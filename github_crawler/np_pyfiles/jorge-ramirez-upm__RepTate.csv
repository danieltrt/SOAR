file_path,api_count,code
setup.py,0,"b'import os\nfrom setuptools import setup, find_packages\nimport versioneer\nimport functools\nimport glob\n\nbase_dir = os.path.dirname(os.path.abspath(__file__))\nrequirements_file = open(os.path.join(base_dir, ""requirements.txt""))\nrequirements = requirements_file.read().splitlines()\n\n\ndef get_directory_structure(rootdir):\n    """"""\n    Creates a nested dictionary that represents the folder structure of rootdir\n    """"""\n    data_file_tree = {}\n\n    def build_tree(dic, dir_tree):\n        for key in dic:\n            if dic[key] is not None:\n                if dir_tree != """":\n                    dir = build_tree(dic[key], dir_tree + os.sep + key)\n                else:\n                    dir = build_tree(dic[key], key)\n            else:\n                data_file_tree[dir_tree + os.sep] = glob.glob(dir_tree + os.sep + ""*.*"")\n        return [(k, data_file_tree[k]) for k in data_file_tree]\n\n    dir = {}\n    rootdir = rootdir.rstrip(os.sep)\n    start = rootdir.rfind(os.sep) + 1\n    for path, dirs, files in os.walk(rootdir):\n        folders = path[start:].split(os.sep)\n        subdir = dict.fromkeys(files)\n        parent = functools.reduce(dict.get, folders[:-1], dir)\n        parent[folders[-1]] = subdir\n\n    return build_tree(dir, """")\n\n\nlist_data_files = get_directory_structure(""data"")\nlist_doc_files = get_directory_structure(""docs"")\n\n\nwith open(""README.rst"", ""r"") as fh:\n    long_description = fh.read()\n\nsetup(\n    name=""RepTate"",\n    version=versioneer.get_version(),\n    cmdclass=versioneer.get_cmdclass(),\n    description=""Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiment"",\n    long_description=long_description,\n    long_description_content_type=""text/x-rst"",\n    author=""Jorge Ramirez, Victor Boudara"",\n    author_email=""reptate.rheology@gmail.com"",\n    url=""http://github.com/jorge-ramirez-upm/RepTate"",\n    packages=find_packages(),\n    package_data={"""": [""*.ui"", ""*.qrc"", ""*.npy"", ""*.so"", ""*.npz""]},\n    data_files=list_data_files,\n    install_requires=requirements,\n    entry_points={\n        ""console_scripts"": [""RepTateCL = RepTate.CL:main""],\n        ""gui_scripts"": [\n            ""RepTate = RepTate.__main__:main"",\n            ""MatDB = RepTate.MatDB:main"",\n            ""UV = RepTate.UV:main"",\n        ],\n    },\n    license=""GNU General Public License v3 or later (GPLv3+)"",\n    classifiers=[\n        ""License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)"",\n        ""Programming Language :: Python :: 3"",\n        ""Topic :: Scientific/Engineering"",\n        ""Intended Audience :: Science/Research"",\n        ""Operating System :: OS Independent"",\n    ],\n)\n'"
versioneer.py,0,"b'\n# Version: 0.18\n\n""""""The Versioneer - like a rocketeer, but for versions.\n\nThe Versioneer\n==============\n\n* like a rocketeer, but for versions!\n* https://github.com/warner/python-versioneer\n* Brian Warner\n* License: Public Domain\n* Compatible With: python2.6, 2.7, 3.2, 3.3, 3.4, 3.5, 3.6, and pypy\n* [![Latest Version]\n(https://pypip.in/version/versioneer/badge.svg?style=flat)\n](https://pypi.python.org/pypi/versioneer/)\n* [![Build Status]\n(https://travis-ci.org/warner/python-versioneer.png?branch=master)\n](https://travis-ci.org/warner/python-versioneer)\n\nThis is a tool for managing a recorded version number in distutils-based\npython projects. The goal is to remove the tedious and error-prone ""update\nthe embedded version string"" step from your release process. Making a new\nrelease should be as easy as recording a new tag in your version-control\nsystem, and maybe making new tarballs.\n\n\n## Quick Install\n\n* `pip install versioneer` to somewhere to your $PATH\n* add a `[versioneer]` section to your setup.cfg (see below)\n* run `versioneer install` in your source tree, commit the results\n\n## Version Identifiers\n\nSource trees come from a variety of places:\n\n* a version-control system checkout (mostly used by developers)\n* a nightly tarball, produced by build automation\n* a snapshot tarball, produced by a web-based VCS browser, like github\'s\n  ""tarball from tag"" feature\n* a release tarball, produced by ""setup.py sdist"", distributed through PyPI\n\nWithin each source tree, the version identifier (either a string or a number,\nthis tool is format-agnostic) can come from a variety of places:\n\n* ask the VCS tool itself, e.g. ""git describe"" (for checkouts), which knows\n  about recent ""tags"" and an absolute revision-id\n* the name of the directory into which the tarball was unpacked\n* an expanded VCS keyword ($Id$, etc)\n* a `_version.py` created by some earlier build step\n\nFor released software, the version identifier is closely related to a VCS\ntag. Some projects use tag names that include more than just the version\nstring (e.g. ""myproject-1.2"" instead of just ""1.2""), in which case the tool\nneeds to strip the tag prefix to extract the version identifier. For\nunreleased software (between tags), the version identifier should provide\nenough information to help developers recreate the same tree, while also\ngiving them an idea of roughly how old the tree is (after version 1.2, before\nversion 1.3). Many VCS systems can report a description that captures this,\nfor example `git describe --tags --dirty --always` reports things like\n""0.7-1-g574ab98-dirty"" to indicate that the checkout is one revision past the\n0.7 tag, has a unique revision id of ""574ab98"", and is ""dirty"" (it has\nuncommitted changes.\n\nThe version identifier is used for multiple purposes:\n\n* to allow the module to self-identify its version: `myproject.__version__`\n* to choose a name and prefix for a \'setup.py sdist\' tarball\n\n## Theory of Operation\n\nVersioneer works by adding a special `_version.py` file into your source\ntree, where your `__init__.py` can import it. This `_version.py` knows how to\ndynamically ask the VCS tool for version information at import time.\n\n`_version.py` also contains `$Revision$` markers, and the installation\nprocess marks `_version.py` to have this marker rewritten with a tag name\nduring the `git archive` command. As a result, generated tarballs will\ncontain enough information to get the proper version.\n\nTo allow `setup.py` to compute a version too, a `versioneer.py` is added to\nthe top level of your source tree, next to `setup.py` and the `setup.cfg`\nthat configures it. This overrides several distutils/setuptools commands to\ncompute the version when invoked, and changes `setup.py build` and `setup.py\nsdist` to replace `_version.py` with a small static file that contains just\nthe generated version data.\n\n## Installation\n\nSee [INSTALL.md](./INSTALL.md) for detailed installation instructions.\n\n## Version-String Flavors\n\nCode which uses Versioneer can learn about its version string at runtime by\nimporting `_version` from your main `__init__.py` file and running the\n`get_versions()` function. From the ""outside"" (e.g. in `setup.py`), you can\nimport the top-level `versioneer.py` and run `get_versions()`.\n\nBoth functions return a dictionary with different flavors of version\ninformation:\n\n* `[\'version\']`: A condensed version string, rendered using the selected\n  style. This is the most commonly used value for the project\'s version\n  string. The default ""pep440"" style yields strings like `0.11`,\n  `0.11+2.g1076c97`, or `0.11+2.g1076c97.dirty`. See the ""Styles"" section\n  below for alternative styles.\n\n* `[\'full-revisionid\']`: detailed revision identifier. For Git, this is the\n  full SHA1 commit id, e.g. ""1076c978a8d3cfc70f408fe5974aa6c092c949ac"".\n\n* `[\'date\']`: Date and time of the latest `HEAD` commit. For Git, it is the\n  commit date in ISO 8601 format. This will be None if the date is not\n  available.\n\n* `[\'dirty\']`: a boolean, True if the tree has uncommitted changes. Note that\n  this is only accurate if run in a VCS checkout, otherwise it is likely to\n  be False or None\n\n* `[\'error\']`: if the version string could not be computed, this will be set\n  to a string describing the problem, otherwise it will be None. It may be\n  useful to throw an exception in setup.py if this is set, to avoid e.g.\n  creating tarballs with a version string of ""unknown"".\n\nSome variants are more useful than others. Including `full-revisionid` in a\nbug report should allow developers to reconstruct the exact code being tested\n(or indicate the presence of local changes that should be shared with the\ndevelopers). `version` is suitable for display in an ""about"" box or a CLI\n`--version` output: it can be easily compared against release notes and lists\nof bugs fixed in various releases.\n\nThe installer adds the following text to your `__init__.py` to place a basic\nversion in `YOURPROJECT.__version__`:\n\n    from ._version import get_versions\n    __version__ = get_versions()[\'version\']\n    del get_versions\n\n## Styles\n\nThe setup.cfg `style=` configuration controls how the VCS information is\nrendered into a version string.\n\nThe default style, ""pep440"", produces a PEP440-compliant string, equal to the\nun-prefixed tag name for actual releases, and containing an additional ""local\nversion"" section with more detail for in-between builds. For Git, this is\nTAG[+DISTANCE.gHEX[.dirty]] , using information from `git describe --tags\n--dirty --always`. For example ""0.11+2.g1076c97.dirty"" indicates that the\ntree is like the ""1076c97"" commit but has uncommitted changes ("".dirty""), and\nthat this commit is two revisions (""+2"") beyond the ""0.11"" tag. For released\nsoftware (exactly equal to a known tag), the identifier will only contain the\nstripped tag, e.g. ""0.11"".\n\nOther styles are available. See [details.md](details.md) in the Versioneer\nsource tree for descriptions.\n\n## Debugging\n\nVersioneer tries to avoid fatal errors: if something goes wrong, it will tend\nto return a version of ""0+unknown"". To investigate the problem, run `setup.py\nversion`, which will run the version-lookup code in a verbose mode, and will\ndisplay the full contents of `get_versions()` (including the `error` string,\nwhich may help identify what went wrong).\n\n## Known Limitations\n\nSome situations are known to cause problems for Versioneer. This details the\nmost significant ones. More can be found on Github\n[issues page](https://github.com/warner/python-versioneer/issues).\n\n### Subprojects\n\nVersioneer has limited support for source trees in which `setup.py` is not in\nthe root directory (e.g. `setup.py` and `.git/` are *not* siblings). The are\ntwo common reasons why `setup.py` might not be in the root:\n\n* Source trees which contain multiple subprojects, such as\n  [Buildbot](https://github.com/buildbot/buildbot), which contains both\n  ""master"" and ""slave"" subprojects, each with their own `setup.py`,\n  `setup.cfg`, and `tox.ini`. Projects like these produce multiple PyPI\n  distributions (and upload multiple independently-installable tarballs).\n* Source trees whose main purpose is to contain a C library, but which also\n  provide bindings to Python (and perhaps other langauges) in subdirectories.\n\nVersioneer will look for `.git` in parent directories, and most operations\nshould get the right version string. However `pip` and `setuptools` have bugs\nand implementation details which frequently cause `pip install .` from a\nsubproject directory to fail to find a correct version string (so it usually\ndefaults to `0+unknown`).\n\n`pip install --editable .` should work correctly. `setup.py install` might\nwork too.\n\nPip-8.1.1 is known to have this problem, but hopefully it will get fixed in\nsome later version.\n\n[Bug #38](https://github.com/warner/python-versioneer/issues/38) is tracking\nthis issue. The discussion in\n[PR #61](https://github.com/warner/python-versioneer/pull/61) describes the\nissue from the Versioneer side in more detail.\n[pip PR#3176](https://github.com/pypa/pip/pull/3176) and\n[pip PR#3615](https://github.com/pypa/pip/pull/3615) contain work to improve\npip to let Versioneer work correctly.\n\nVersioneer-0.16 and earlier only looked for a `.git` directory next to the\n`setup.cfg`, so subprojects were completely unsupported with those releases.\n\n### Editable installs with setuptools <= 18.5\n\n`setup.py develop` and `pip install --editable .` allow you to install a\nproject into a virtualenv once, then continue editing the source code (and\ntest) without re-installing after every change.\n\n""Entry-point scripts"" (`setup(entry_points={""console_scripts"": ..})`) are a\nconvenient way to specify executable scripts that should be installed along\nwith the python package.\n\nThese both work as expected when using modern setuptools. When using\nsetuptools-18.5 or earlier, however, certain operations will cause\n`pkg_resources.DistributionNotFound` errors when running the entrypoint\nscript, which must be resolved by re-installing the package. This happens\nwhen the install happens with one version, then the egg_info data is\nregenerated while a different version is checked out. Many setup.py commands\ncause egg_info to be rebuilt (including `sdist`, `wheel`, and installing into\na different virtualenv), so this can be surprising.\n\n[Bug #83](https://github.com/warner/python-versioneer/issues/83) describes\nthis one, but upgrading to a newer version of setuptools should probably\nresolve it.\n\n### Unicode version strings\n\nWhile Versioneer works (and is continually tested) with both Python 2 and\nPython 3, it is not entirely consistent with bytes-vs-unicode distinctions.\nNewer releases probably generate unicode version strings on py2. It\'s not\nclear that this is wrong, but it may be surprising for applications when then\nwrite these strings to a network connection or include them in bytes-oriented\nAPIs like cryptographic checksums.\n\n[Bug #71](https://github.com/warner/python-versioneer/issues/71) investigates\nthis question.\n\n\n## Updating Versioneer\n\nTo upgrade your project to a new release of Versioneer, do the following:\n\n* install the new Versioneer (`pip install -U versioneer` or equivalent)\n* edit `setup.cfg`, if necessary, to include any new configuration settings\n  indicated by the release notes. See [UPGRADING](./UPGRADING.md) for details.\n* re-run `versioneer install` in your source tree, to replace\n  `SRC/_version.py`\n* commit any changed files\n\n## Future Directions\n\nThis tool is designed to make it easily extended to other version-control\nsystems: all VCS-specific components are in separate directories like\nsrc/git/ . The top-level `versioneer.py` script is assembled from these\ncomponents by running make-versioneer.py . In the future, make-versioneer.py\nwill take a VCS name as an argument, and will construct a version of\n`versioneer.py` that is specific to the given VCS. It might also take the\nconfiguration arguments that are currently provided manually during\ninstallation by editing setup.py . Alternatively, it might go the other\ndirection and include code from all supported VCS systems, reducing the\nnumber of intermediate scripts.\n\n\n## License\n\nTo make Versioneer easier to embed, all its code is dedicated to the public\ndomain. The `_version.py` that it creates is also in the public domain.\nSpecifically, both are released under the Creative Commons ""Public Domain\nDedication"" license (CC0-1.0), as described in\nhttps://creativecommons.org/publicdomain/zero/1.0/ .\n\n""""""\n\nfrom __future__ import print_function\ntry:\n    import configparser\nexcept ImportError:\n    import ConfigParser as configparser\nimport errno\nimport json\nimport os\nimport re\nimport subprocess\nimport sys\nimport RepTate\n\n\nclass VersioneerConfig:\n    """"""Container for Versioneer configuration parameters.""""""\n\n\ndef get_root():\n    """"""Get the project root directory.\n\n    We require that all commands are run from the project root, i.e. the\n    directory that contains setup.py, setup.cfg, and versioneer.py .\n    """"""\n    root = RepTate.root_dir\n    setup_py = os.path.join(root, ""setup.py"")\n    versioneer_py = os.path.join(root, ""versioneer.py"")\n    if not (os.path.exists(setup_py) or os.path.exists(versioneer_py)):\n        # allow \'python path/to/setup.py COMMAND\'\n        root = os.path.dirname(os.path.realpath(os.path.abspath(sys.argv[0])))\n        setup_py = os.path.join(root, ""setup.py"")\n        versioneer_py = os.path.join(root, ""versioneer.py"")\n    if not (os.path.exists(setup_py) or os.path.exists(versioneer_py)):\n        err = (""Versioneer was unable to run the project root directory. ""\n               ""Versioneer requires setup.py to be executed from ""\n               ""its immediate directory (like \'python setup.py COMMAND\'), ""\n               ""or in a way that lets it use sys.argv[0] to find the root ""\n               ""(like \'python path/to/setup.py COMMAND\')."")\n        raise VersioneerBadRootError(err)\n    try:\n        # Certain runtime workflows (setup.py install/develop in a setuptools\n        # tree) execute all dependencies in a single python process, so\n        # ""versioneer"" may be imported multiple times, and python\'s shared\n        # module-import table will cache the first one. So we can\'t use\n        # os.path.dirname(__file__), as that will find whichever\n        # versioneer.py was first imported, even in later projects.\n        me = os.path.realpath(os.path.abspath(__file__))\n        me_dir = os.path.normcase(os.path.splitext(me)[0])\n        vsr_dir = os.path.normcase(os.path.splitext(versioneer_py)[0])\n        if me_dir != vsr_dir:\n            print(""Warning: build in %s is using versioneer.py from %s""\n                  % (os.path.dirname(me), versioneer_py))\n    except NameError:\n        pass\n    return root\n\n\ndef get_config_from_root(root):\n    """"""Read the project setup.cfg file to determine Versioneer config.""""""\n    # This might raise EnvironmentError (if setup.cfg is missing), or\n    # configparser.NoSectionError (if it lacks a [versioneer] section), or\n    # configparser.NoOptionError (if it lacks ""VCS=""). See the docstring at\n    # the top of versioneer.py for instructions on writing your setup.cfg .\n    setup_cfg = os.path.join(root, ""setup.cfg"")\n    parser = configparser.SafeConfigParser()\n    with open(setup_cfg, ""r"") as f:\n        parser.readfp(f)\n    VCS = parser.get(""versioneer"", ""VCS"")  # mandatory\n\n    def get(parser, name):\n        if parser.has_option(""versioneer"", name):\n            return parser.get(""versioneer"", name)\n        return None\n    cfg = VersioneerConfig()\n    cfg.VCS = VCS\n    cfg.style = get(parser, ""style"") or """"\n    cfg.versionfile_source = get(parser, ""versionfile_source"")\n    cfg.versionfile_build = get(parser, ""versionfile_build"")\n    cfg.tag_prefix = get(parser, ""tag_prefix"")\n    if cfg.tag_prefix in (""\'\'"", \'""""\'):\n        cfg.tag_prefix = """"\n    cfg.parentdir_prefix = get(parser, ""parentdir_prefix"")\n    cfg.verbose = get(parser, ""verbose"")\n    return cfg\n\n\nclass NotThisMethod(Exception):\n    """"""Exception raised if a method is not valid for the current scenario.""""""\n\n\n# these dictionaries contain VCS-specific tools\nLONG_VERSION_PY = {}\nHANDLERS = {}\n\n\ndef register_vcs_handler(vcs, method):  # decorator\n    """"""Decorator to mark a method as the handler for a particular VCS.""""""\n    def decorate(f):\n        """"""Store f in HANDLERS[vcs][method].""""""\n        if vcs not in HANDLERS:\n            HANDLERS[vcs] = {}\n        HANDLERS[vcs][method] = f\n        return f\n    return decorate\n\n\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False,\n                env=None):\n    """"""Call the given command(s).""""""\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(""unable to run %s"" % dispcmd)\n                print(e)\n            return None, None\n    else:\n        if verbose:\n            print(""unable to find command, tried %s"" % (commands,))\n        return None, None\n    stdout = p.communicate()[0].strip()\n    if sys.version_info[0] >= 3:\n        stdout = stdout.decode()\n    if p.returncode != 0:\n        if verbose:\n            print(""unable to run %s (error)"" % dispcmd)\n            print(""stdout was %s"" % stdout)\n        return None, p.returncode\n    return stdout, p.returncode\n\n\nLONG_VERSION_PY[\'git\'] = \'\'\'\n# This file helps to compute a version number in source trees obtained from\n# git-archive tarball (such as those provided by githubs download-from-tag\n# feature). Distribution tarballs (built by setup.py sdist) and build\n# directories (produced by setup.py build) will contain a much shorter file\n# that just contains the computed version number.\n\n# This file is released into the public domain. Generated by\n# versioneer-0.18 (https://github.com/warner/python-versioneer)\n\n""""""Git implementation of _version.py.""""""\n\nimport errno\nimport os\nimport re\nimport subprocess\nimport sys\n\n\ndef get_keywords():\n    """"""Get the keywords needed to look up the version information.""""""\n    # these strings will be replaced by git during git-archive.\n    # setup.py/versioneer.py will grep for the variable names, so they must\n    # each be defined on a line of their own. _version.py will just call\n    # get_keywords().\n    git_refnames = ""%(DOLLAR)sFormat:%%d%(DOLLAR)s""\n    git_full = ""%(DOLLAR)sFormat:%%H%(DOLLAR)s""\n    git_date = ""%(DOLLAR)sFormat:%%ci%(DOLLAR)s""\n    keywords = {""refnames"": git_refnames, ""full"": git_full, ""date"": git_date}\n    return keywords\n\n\nclass VersioneerConfig:\n    """"""Container for Versioneer configuration parameters.""""""\n\n\ndef get_config():\n    """"""Create, populate and return the VersioneerConfig() object.""""""\n    # these strings are filled in when \'setup.py versioneer\' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = ""git""\n    cfg.style = ""%(STYLE)s""\n    cfg.tag_prefix = ""%(TAG_PREFIX)s""\n    cfg.parentdir_prefix = ""%(PARENTDIR_PREFIX)s""\n    cfg.versionfile_source = ""%(VERSIONFILE_SOURCE)s""\n    cfg.verbose = False\n    return cfg\n\n\nclass NotThisMethod(Exception):\n    """"""Exception raised if a method is not valid for the current scenario.""""""\n\n\nLONG_VERSION_PY = {}\nHANDLERS = {}\n\n\ndef register_vcs_handler(vcs, method):  # decorator\n    """"""Decorator to mark a method as the handler for a particular VCS.""""""\n    def decorate(f):\n        """"""Store f in HANDLERS[vcs][method].""""""\n        if vcs not in HANDLERS:\n            HANDLERS[vcs] = {}\n        HANDLERS[vcs][method] = f\n        return f\n    return decorate\n\n\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False,\n                env=None):\n    """"""Call the given command(s).""""""\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(""unable to run %%s"" %% dispcmd)\n                print(e)\n            return None, None\n    else:\n        if verbose:\n            print(""unable to find command, tried %%s"" %% (commands,))\n        return None, None\n    stdout = p.communicate()[0].strip()\n    if sys.version_info[0] >= 3:\n        stdout = stdout.decode()\n    if p.returncode != 0:\n        if verbose:\n            print(""unable to run %%s (error)"" %% dispcmd)\n            print(""stdout was %%s"" %% stdout)\n        return None, p.returncode\n    return stdout, p.returncode\n\n\ndef versions_from_parentdir(parentdir_prefix, root, verbose):\n    """"""Try to determine the version from the parent directory name.\n\n    Source tarballs conventionally unpack into a directory that includes both\n    the project name and a version string. We will also support searching up\n    two directory levels for an appropriately named parent directory\n    """"""\n    rootdirs = []\n\n    for i in range(3):\n        dirname = os.path.basename(root)\n        if dirname.startswith(parentdir_prefix):\n            return {""version"": dirname[len(parentdir_prefix):],\n                    ""full-revisionid"": None,\n                    ""dirty"": False, ""error"": None, ""date"": None}\n        else:\n            rootdirs.append(root)\n            root = os.path.dirname(root)  # up a level\n\n    if verbose:\n        print(""Tried directories %%s but none started with prefix %%s"" %%\n              (str(rootdirs), parentdir_prefix))\n    raise NotThisMethod(""rootdir doesn\'t start with parentdir_prefix"")\n\n\n@register_vcs_handler(""git"", ""get_keywords"")\ndef git_get_keywords(versionfile_abs):\n    """"""Extract version information from the given file.""""""\n    # the code embedded in _version.py can just fetch the value of these\n    # keywords. When used from setup.py, we don\'t want to import _version.py,\n    # so we do it with a regexp instead. This function is not used from\n    # _version.py.\n    keywords = {}\n    try:\n        f = open(versionfile_abs, ""r"")\n        for line in f.readlines():\n            if line.strip().startswith(""git_refnames =""):\n                mo = re.search(r\'=\\s*""(.*)""\', line)\n                if mo:\n                    keywords[""refnames""] = mo.group(1)\n            if line.strip().startswith(""git_full =""):\n                mo = re.search(r\'=\\s*""(.*)""\', line)\n                if mo:\n                    keywords[""full""] = mo.group(1)\n            if line.strip().startswith(""git_date =""):\n                mo = re.search(r\'=\\s*""(.*)""\', line)\n                if mo:\n                    keywords[""date""] = mo.group(1)\n        f.close()\n    except EnvironmentError:\n        pass\n    return keywords\n\n\n@register_vcs_handler(""git"", ""keywords"")\ndef git_versions_from_keywords(keywords, tag_prefix, verbose):\n    """"""Get version information from git keywords.""""""\n    if not keywords:\n        raise NotThisMethod(""no keywords at all, weird"")\n    date = keywords.get(""date"")\n    if date is not None:\n        # git-2.2.0 added ""%%cI"", which expands to an ISO-8601 -compliant\n        # datestamp. However we prefer ""%%ci"" (which expands to an ""ISO-8601\n        # -like"" string, which we must then edit to make compliant), because\n        # it\'s been around since git-1.5.3, and it\'s too difficult to\n        # discover which version we\'re using, or to work around using an\n        # older one.\n        date = date.strip().replace("" "", ""T"", 1).replace("" "", """", 1)\n    refnames = keywords[""refnames""].strip()\n    if refnames.startswith(""$Format""):\n        if verbose:\n            print(""keywords are unexpanded, not using"")\n        raise NotThisMethod(""unexpanded keywords, not a git-archive tarball"")\n    refs = set([r.strip() for r in refnames.strip(""()"").split("","")])\n    # starting in git-1.8.3, tags are listed as ""tag: foo-1.0"" instead of\n    # just ""foo-1.0"". If we see a ""tag: "" prefix, prefer those.\n    TAG = ""tag: ""\n    tags = set([r[len(TAG):] for r in refs if r.startswith(TAG)])\n    if not tags:\n        # Either we\'re using git < 1.8.3, or there really are no tags. We use\n        # a heuristic: assume all version tags have a digit. The old git %%d\n        # expansion behaves like git log --decorate=short and strips out the\n        # refs/heads/ and refs/tags/ prefixes that would let us distinguish\n        # between branches and tags. By ignoring refnames without digits, we\n        # filter out many common branch names like ""release"" and\n        # ""stabilization"", as well as ""HEAD"" and ""master"".\n        tags = set([r for r in refs if re.search(r\'\\d\', r)])\n        if verbose:\n            print(""discarding \'%%s\', no digits"" %% "","".join(refs - tags))\n    if verbose:\n        print(""likely tags: %%s"" %% "","".join(sorted(tags)))\n    for ref in sorted(tags):\n        # sorting will prefer e.g. ""2.0"" over ""2.0rc1""\n        if ref.startswith(tag_prefix):\n            r = ref[len(tag_prefix):]\n            if verbose:\n                print(""picking %%s"" %% r)\n            return {""version"": r,\n                    ""full-revisionid"": keywords[""full""].strip(),\n                    ""dirty"": False, ""error"": None,\n                    ""date"": date}\n    # no suitable tags, so version is ""0+unknown"", but full hex is still there\n    if verbose:\n        print(""no suitable tags, using unknown + full revision id"")\n    return {""version"": ""0+unknown"",\n            ""full-revisionid"": keywords[""full""].strip(),\n            ""dirty"": False, ""error"": ""no suitable tags"", ""date"": None}\n\n\n@register_vcs_handler(""git"", ""pieces_from_vcs"")\ndef git_pieces_from_vcs(tag_prefix, root, verbose, run_command=run_command):\n    """"""Get version from \'git describe\' in the root of the source tree.\n\n    This only gets called if the git-archive \'subst\' keywords were *not*\n    expanded, and _version.py hasn\'t already been rewritten with a short\n    version string, meaning we\'re inside a checked out source tree.\n    """"""\n    GITS = [""git""]\n    if sys.platform == ""win32"":\n        GITS = [""git.cmd"", ""git.exe""]\n\n    out, rc = run_command(GITS, [""rev-parse"", ""--git-dir""], cwd=root,\n                          hide_stderr=True)\n    if rc != 0:\n        if verbose:\n            print(""Directory %%s not under git control"" %% root)\n        raise NotThisMethod(""\'git rev-parse --git-dir\' returned error"")\n\n    # if there is a tag matching tag_prefix, this yields TAG-NUM-gHEX[-dirty]\n    # if there isn\'t one, this yields HEX[-dirty] (no NUM)\n    describe_out, rc = run_command(GITS, [""describe"", ""--tags"", ""--dirty"",\n                                          ""--always"", ""--long"",\n                                          ""--match"", ""%%s*"" %% tag_prefix],\n                                   cwd=root)\n    # --long was added in git-1.5.5\n    if describe_out is None:\n        raise NotThisMethod(""\'git describe\' failed"")\n    describe_out = describe_out.strip()\n    full_out, rc = run_command(GITS, [""rev-parse"", ""HEAD""], cwd=root)\n    if full_out is None:\n        raise NotThisMethod(""\'git rev-parse\' failed"")\n    full_out = full_out.strip()\n\n    pieces = {}\n    pieces[""long""] = full_out\n    pieces[""short""] = full_out[:7]  # maybe improved later\n    pieces[""error""] = None\n\n    # parse describe_out. It will be like TAG-NUM-gHEX[-dirty] or HEX[-dirty]\n    # TAG might have hyphens.\n    git_describe = describe_out\n\n    # look for -dirty suffix\n    dirty = git_describe.endswith(""-dirty"")\n    pieces[""dirty""] = dirty\n    if dirty:\n        git_describe = git_describe[:git_describe.rindex(""-dirty"")]\n\n    # now we have TAG-NUM-gHEX or HEX\n\n    if ""-"" in git_describe:\n        # TAG-NUM-gHEX\n        mo = re.search(r\'^(.+)-(\\d+)-g([0-9a-f]+)$\', git_describe)\n        if not mo:\n            # unparseable. Maybe git-describe is misbehaving?\n            pieces[""error""] = (""unable to parse git-describe output: \'%%s\'""\n                               %% describe_out)\n            return pieces\n\n        # tag\n        full_tag = mo.group(1)\n        if not full_tag.startswith(tag_prefix):\n            if verbose:\n                fmt = ""tag \'%%s\' doesn\'t start with prefix \'%%s\'""\n                print(fmt %% (full_tag, tag_prefix))\n            pieces[""error""] = (""tag \'%%s\' doesn\'t start with prefix \'%%s\'""\n                               %% (full_tag, tag_prefix))\n            return pieces\n        pieces[""closest-tag""] = full_tag[len(tag_prefix):]\n\n        # distance: number of commits since tag\n        pieces[""distance""] = int(mo.group(2))\n\n        # commit: short hex revision ID\n        pieces[""short""] = mo.group(3)\n\n    else:\n        # HEX: no tags\n        pieces[""closest-tag""] = None\n        count_out, rc = run_command(GITS, [""rev-list"", ""HEAD"", ""--count""],\n                                    cwd=root)\n        pieces[""distance""] = int(count_out)  # total number of commits\n\n    # commit date: see ISO-8601 comment in git_versions_from_keywords()\n    date = run_command(GITS, [""show"", ""-s"", ""--format=%%ci"", ""HEAD""],\n                       cwd=root)[0].strip()\n    pieces[""date""] = date.strip().replace("" "", ""T"", 1).replace("" "", """", 1)\n\n    return pieces\n\n\ndef plus_or_dot(pieces):\n    """"""Return a + if we don\'t already have one, else return a .""""""\n    if ""+"" in pieces.get(""closest-tag"", """"):\n        return "".""\n    return ""+""\n\n\ndef render_pep440(pieces):\n    """"""Build up version string, with post-release ""local version identifier"".\n\n    Our goal: TAG[+DISTANCE.gHEX[.dirty]] . Note that if you\n    get a tagged build and then dirty it, you\'ll get TAG+0.gHEX.dirty\n\n    Exceptions:\n    1: no tags. git_describe was just HEX. 0+untagged.DISTANCE.gHEX[.dirty]\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""] or pieces[""dirty""]:\n            rendered += plus_or_dot(pieces)\n            rendered += ""%%d.g%%s"" %% (pieces[""distance""], pieces[""short""])\n            if pieces[""dirty""]:\n                rendered += "".dirty""\n    else:\n        # exception #1\n        rendered = ""0+untagged.%%d.g%%s"" %% (pieces[""distance""],\n                                          pieces[""short""])\n        if pieces[""dirty""]:\n            rendered += "".dirty""\n    return rendered\n\n\ndef render_pep440_pre(pieces):\n    """"""TAG[.post.devDISTANCE] -- No -dirty.\n\n    Exceptions:\n    1: no tags. 0.post.devDISTANCE\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""]:\n            rendered += "".post.dev%%d"" %% pieces[""distance""]\n    else:\n        # exception #1\n        rendered = ""0.post.dev%%d"" %% pieces[""distance""]\n    return rendered\n\n\ndef render_pep440_post(pieces):\n    """"""TAG[.postDISTANCE[.dev0]+gHEX] .\n\n    The "".dev0"" means dirty. Note that .dev0 sorts backwards\n    (a dirty tree will appear ""older"" than the corresponding clean one),\n    but you shouldn\'t be releasing software with -dirty anyways.\n\n    Exceptions:\n    1: no tags. 0.postDISTANCE[.dev0]\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""] or pieces[""dirty""]:\n            rendered += "".post%%d"" %% pieces[""distance""]\n            if pieces[""dirty""]:\n                rendered += "".dev0""\n            rendered += plus_or_dot(pieces)\n            rendered += ""g%%s"" %% pieces[""short""]\n    else:\n        # exception #1\n        rendered = ""0.post%%d"" %% pieces[""distance""]\n        if pieces[""dirty""]:\n            rendered += "".dev0""\n        rendered += ""+g%%s"" %% pieces[""short""]\n    return rendered\n\n\ndef render_pep440_old(pieces):\n    """"""TAG[.postDISTANCE[.dev0]] .\n\n    The "".dev0"" means dirty.\n\n    Eexceptions:\n    1: no tags. 0.postDISTANCE[.dev0]\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""] or pieces[""dirty""]:\n            rendered += "".post%%d"" %% pieces[""distance""]\n            if pieces[""dirty""]:\n                rendered += "".dev0""\n    else:\n        # exception #1\n        rendered = ""0.post%%d"" %% pieces[""distance""]\n        if pieces[""dirty""]:\n            rendered += "".dev0""\n    return rendered\n\n\ndef render_git_describe(pieces):\n    """"""TAG[-DISTANCE-gHEX][-dirty].\n\n    Like \'git describe --tags --dirty --always\'.\n\n    Exceptions:\n    1: no tags. HEX[-dirty]  (note: no \'g\' prefix)\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""]:\n            rendered += ""-%%d-g%%s"" %% (pieces[""distance""], pieces[""short""])\n    else:\n        # exception #1\n        rendered = pieces[""short""]\n    if pieces[""dirty""]:\n        rendered += ""-dirty""\n    return rendered\n\n\ndef render_git_describe_long(pieces):\n    """"""TAG-DISTANCE-gHEX[-dirty].\n\n    Like \'git describe --tags --dirty --always -long\'.\n    The distance/hash is unconditional.\n\n    Exceptions:\n    1: no tags. HEX[-dirty]  (note: no \'g\' prefix)\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        rendered += ""-%%d-g%%s"" %% (pieces[""distance""], pieces[""short""])\n    else:\n        # exception #1\n        rendered = pieces[""short""]\n    if pieces[""dirty""]:\n        rendered += ""-dirty""\n    return rendered\n\n\ndef render(pieces, style):\n    """"""Render the given version pieces into the requested style.""""""\n    if pieces[""error""]:\n        return {""version"": ""unknown"",\n                ""full-revisionid"": pieces.get(""long""),\n                ""dirty"": None,\n                ""error"": pieces[""error""],\n                ""date"": None}\n\n    if not style or style == ""default"":\n        style = ""pep440""  # the default\n\n    if style == ""pep440"":\n        rendered = render_pep440(pieces)\n    elif style == ""pep440-pre"":\n        rendered = render_pep440_pre(pieces)\n    elif style == ""pep440-post"":\n        rendered = render_pep440_post(pieces)\n    elif style == ""pep440-old"":\n        rendered = render_pep440_old(pieces)\n    elif style == ""git-describe"":\n        rendered = render_git_describe(pieces)\n    elif style == ""git-describe-long"":\n        rendered = render_git_describe_long(pieces)\n    else:\n        raise ValueError(""unknown style \'%%s\'"" %% style)\n\n    return {""version"": rendered, ""full-revisionid"": pieces[""long""],\n            ""dirty"": pieces[""dirty""], ""error"": None,\n            ""date"": pieces.get(""date"")}\n\n\ndef get_versions():\n    """"""Get version information or return default if unable to do so.""""""\n    # I am in _version.py, which lives at ROOT/VERSIONFILE_SOURCE. If we have\n    # __file__, we can work backwards from there to the root. Some\n    # py2exe/bbfreeze/non-CPython implementations don\'t do __file__, in which\n    # case we can only use expanded keywords.\n\n    cfg = get_config()\n    verbose = cfg.verbose\n\n    try:\n        return git_versions_from_keywords(get_keywords(), cfg.tag_prefix,\n                                          verbose)\n    except NotThisMethod:\n        pass\n\n    try:\n        root = os.path.realpath(__file__)\n        # versionfile_source is the relative path from the top of the source\n        # tree (where the .git directory might live) to this file. Invert\n        # this to find the root from __file__.\n        for i in cfg.versionfile_source.split(\'/\'):\n            root = os.path.dirname(root)\n    except NameError:\n        return {""version"": ""0+unknown"", ""full-revisionid"": None,\n                ""dirty"": None,\n                ""error"": ""unable to find root of source tree"",\n                ""date"": None}\n\n    try:\n        pieces = git_pieces_from_vcs(cfg.tag_prefix, root, verbose)\n        return render(pieces, cfg.style)\n    except NotThisMethod:\n        pass\n\n    try:\n        if cfg.parentdir_prefix:\n            return versions_from_parentdir(cfg.parentdir_prefix, root, verbose)\n    except NotThisMethod:\n        pass\n\n    return {""version"": ""0+unknown"", ""full-revisionid"": None,\n            ""dirty"": None,\n            ""error"": ""unable to compute version"", ""date"": None}\n\'\'\'\n\n\n@register_vcs_handler(""git"", ""get_keywords"")\ndef git_get_keywords(versionfile_abs):\n    """"""Extract version information from the given file.""""""\n    # the code embedded in _version.py can just fetch the value of these\n    # keywords. When used from setup.py, we don\'t want to import _version.py,\n    # so we do it with a regexp instead. This function is not used from\n    # _version.py.\n    keywords = {}\n    try:\n        f = open(versionfile_abs, ""r"")\n        for line in f.readlines():\n            if line.strip().startswith(""git_refnames =""):\n                mo = re.search(r\'=\\s*""(.*)""\', line)\n                if mo:\n                    keywords[""refnames""] = mo.group(1)\n            if line.strip().startswith(""git_full =""):\n                mo = re.search(r\'=\\s*""(.*)""\', line)\n                if mo:\n                    keywords[""full""] = mo.group(1)\n            if line.strip().startswith(""git_date =""):\n                mo = re.search(r\'=\\s*""(.*)""\', line)\n                if mo:\n                    keywords[""date""] = mo.group(1)\n        f.close()\n    except EnvironmentError:\n        pass\n    return keywords\n\n\n@register_vcs_handler(""git"", ""keywords"")\ndef git_versions_from_keywords(keywords, tag_prefix, verbose):\n    """"""Get version information from git keywords.""""""\n    if not keywords:\n        raise NotThisMethod(""no keywords at all, weird"")\n    date = keywords.get(""date"")\n    if date is not None:\n        # git-2.2.0 added ""%cI"", which expands to an ISO-8601 -compliant\n        # datestamp. However we prefer ""%ci"" (which expands to an ""ISO-8601\n        # -like"" string, which we must then edit to make compliant), because\n        # it\'s been around since git-1.5.3, and it\'s too difficult to\n        # discover which version we\'re using, or to work around using an\n        # older one.\n        date = date.strip().replace("" "", ""T"", 1).replace("" "", """", 1)\n    refnames = keywords[""refnames""].strip()\n    if refnames.startswith(""$Format""):\n        if verbose:\n            print(""keywords are unexpanded, not using"")\n        raise NotThisMethod(""unexpanded keywords, not a git-archive tarball"")\n    refs = set([r.strip() for r in refnames.strip(""()"").split("","")])\n    # starting in git-1.8.3, tags are listed as ""tag: foo-1.0"" instead of\n    # just ""foo-1.0"". If we see a ""tag: "" prefix, prefer those.\n    TAG = ""tag: ""\n    tags = set([r[len(TAG):] for r in refs if r.startswith(TAG)])\n    if not tags:\n        # Either we\'re using git < 1.8.3, or there really are no tags. We use\n        # a heuristic: assume all version tags have a digit. The old git %d\n        # expansion behaves like git log --decorate=short and strips out the\n        # refs/heads/ and refs/tags/ prefixes that would let us distinguish\n        # between branches and tags. By ignoring refnames without digits, we\n        # filter out many common branch names like ""release"" and\n        # ""stabilization"", as well as ""HEAD"" and ""master"".\n        tags = set([r for r in refs if re.search(r\'\\d\', r)])\n        if verbose:\n            print(""discarding \'%s\', no digits"" % "","".join(refs - tags))\n    if verbose:\n        print(""likely tags: %s"" % "","".join(sorted(tags)))\n    for ref in sorted(tags):\n        # sorting will prefer e.g. ""2.0"" over ""2.0rc1""\n        if ref.startswith(tag_prefix):\n            r = ref[len(tag_prefix):]\n            if verbose:\n                print(""picking %s"" % r)\n            return {""version"": r,\n                    ""full-revisionid"": keywords[""full""].strip(),\n                    ""dirty"": False, ""error"": None,\n                    ""date"": date}\n    # no suitable tags, so version is ""0+unknown"", but full hex is still there\n    if verbose:\n        print(""no suitable tags, using unknown + full revision id"")\n    return {""version"": ""0+unknown"",\n            ""full-revisionid"": keywords[""full""].strip(),\n            ""dirty"": False, ""error"": ""no suitable tags"", ""date"": None}\n\n\n@register_vcs_handler(""git"", ""pieces_from_vcs"")\ndef git_pieces_from_vcs(tag_prefix, root, verbose, run_command=run_command):\n    """"""Get version from \'git describe\' in the root of the source tree.\n\n    This only gets called if the git-archive \'subst\' keywords were *not*\n    expanded, and _version.py hasn\'t already been rewritten with a short\n    version string, meaning we\'re inside a checked out source tree.\n    """"""\n    GITS = [""git""]\n    if sys.platform == ""win32"":\n        GITS = [""git.cmd"", ""git.exe""]\n\n    out, rc = run_command(GITS, [""rev-parse"", ""--git-dir""], cwd=root,\n                          hide_stderr=True)\n    if rc != 0:\n        if verbose:\n            print(""Directory %s not under git control"" % root)\n        raise NotThisMethod(""\'git rev-parse --git-dir\' returned error"")\n\n    # if there is a tag matching tag_prefix, this yields TAG-NUM-gHEX[-dirty]\n    # if there isn\'t one, this yields HEX[-dirty] (no NUM)\n    describe_out, rc = run_command(GITS, [""describe"", ""--tags"", ""--dirty"",\n                                          ""--always"", ""--long"",\n                                          ""--match"", ""%s*"" % tag_prefix],\n                                   cwd=root)\n    # --long was added in git-1.5.5\n    if describe_out is None:\n        raise NotThisMethod(""\'git describe\' failed"")\n    describe_out = describe_out.strip()\n    full_out, rc = run_command(GITS, [""rev-parse"", ""HEAD""], cwd=root)\n    if full_out is None:\n        raise NotThisMethod(""\'git rev-parse\' failed"")\n    full_out = full_out.strip()\n\n    pieces = {}\n    pieces[""long""] = full_out\n    pieces[""short""] = full_out[:7]  # maybe improved later\n    pieces[""error""] = None\n\n    # parse describe_out. It will be like TAG-NUM-gHEX[-dirty] or HEX[-dirty]\n    # TAG might have hyphens.\n    git_describe = describe_out\n\n    # look for -dirty suffix\n    dirty = git_describe.endswith(""-dirty"")\n    pieces[""dirty""] = dirty\n    if dirty:\n        git_describe = git_describe[:git_describe.rindex(""-dirty"")]\n\n    # now we have TAG-NUM-gHEX or HEX\n\n    if ""-"" in git_describe:\n        # TAG-NUM-gHEX\n        mo = re.search(r\'^(.+)-(\\d+)-g([0-9a-f]+)$\', git_describe)\n        if not mo:\n            # unparseable. Maybe git-describe is misbehaving?\n            pieces[""error""] = (""unable to parse git-describe output: \'%s\'""\n                               % describe_out)\n            return pieces\n\n        # tag\n        full_tag = mo.group(1)\n        if not full_tag.startswith(tag_prefix):\n            if verbose:\n                fmt = ""tag \'%s\' doesn\'t start with prefix \'%s\'""\n                print(fmt % (full_tag, tag_prefix))\n            pieces[""error""] = (""tag \'%s\' doesn\'t start with prefix \'%s\'""\n                               % (full_tag, tag_prefix))\n            return pieces\n        pieces[""closest-tag""] = full_tag[len(tag_prefix):]\n\n        # distance: number of commits since tag\n        pieces[""distance""] = int(mo.group(2))\n\n        # commit: short hex revision ID\n        pieces[""short""] = mo.group(3)\n\n    else:\n        # HEX: no tags\n        pieces[""closest-tag""] = None\n        count_out, rc = run_command(GITS, [""rev-list"", ""HEAD"", ""--count""],\n                                    cwd=root)\n        pieces[""distance""] = int(count_out)  # total number of commits\n\n    # commit date: see ISO-8601 comment in git_versions_from_keywords()\n    date = run_command(GITS, [""show"", ""-s"", ""--format=%ci"", ""HEAD""],\n                       cwd=root)[0].strip()\n    pieces[""date""] = date.strip().replace("" "", ""T"", 1).replace("" "", """", 1)\n\n    return pieces\n\n\ndef do_vcs_install(manifest_in, versionfile_source, ipy):\n    """"""Git-specific installation logic for Versioneer.\n\n    For Git, this means creating/changing .gitattributes to mark _version.py\n    for export-subst keyword substitution.\n    """"""\n    GITS = [""git""]\n    if sys.platform == ""win32"":\n        GITS = [""git.cmd"", ""git.exe""]\n    files = [manifest_in, versionfile_source]\n    if ipy:\n        files.append(ipy)\n    try:\n        me = __file__\n        if me.endswith("".pyc"") or me.endswith("".pyo""):\n            me = os.path.splitext(me)[0] + "".py""\n        versioneer_file = os.path.relpath(me)\n    except NameError:\n        versioneer_file = ""versioneer.py""\n    files.append(versioneer_file)\n    present = False\n    try:\n        f = open("".gitattributes"", ""r"")\n        for line in f.readlines():\n            if line.strip().startswith(versionfile_source):\n                if ""export-subst"" in line.strip().split()[1:]:\n                    present = True\n        f.close()\n    except EnvironmentError:\n        pass\n    if not present:\n        f = open("".gitattributes"", ""a+"")\n        f.write(""%s export-subst\\n"" % versionfile_source)\n        f.close()\n        files.append("".gitattributes"")\n    run_command(GITS, [""add"", ""--""] + files)\n\n\ndef versions_from_parentdir(parentdir_prefix, root, verbose):\n    """"""Try to determine the version from the parent directory name.\n\n    Source tarballs conventionally unpack into a directory that includes both\n    the project name and a version string. We will also support searching up\n    two directory levels for an appropriately named parent directory\n    """"""\n    rootdirs = []\n\n    for i in range(3):\n        dirname = os.path.basename(root)\n        if dirname.startswith(parentdir_prefix):\n            return {""version"": dirname[len(parentdir_prefix):],\n                    ""full-revisionid"": None,\n                    ""dirty"": False, ""error"": None, ""date"": None}\n        else:\n            rootdirs.append(root)\n            root = os.path.dirname(root)  # up a level\n\n    if verbose:\n        print(""Tried directories %s but none started with prefix %s"" %\n              (str(rootdirs), parentdir_prefix))\n    raise NotThisMethod(""rootdir doesn\'t start with parentdir_prefix"")\n\n\nSHORT_VERSION_PY = """"""\n# This file was generated by \'versioneer.py\' (0.18) from\n# revision-control system data, or from the parent directory name of an\n# unpacked source archive. Distribution tarballs contain a pre-generated copy\n# of this file.\n\nimport json\n\nversion_json = \'\'\'\n%s\n\'\'\'  # END VERSION_JSON\n\n\ndef get_versions():\n    return json.loads(version_json)\n""""""\n\n\ndef versions_from_file(filename):\n    """"""Try to determine the version from _version.py if present.""""""\n    try:\n        with open(filename) as f:\n            contents = f.read()\n    except EnvironmentError:\n        raise NotThisMethod(""unable to read _version.py"")\n    mo = re.search(r""version_json = \'\'\'\\n(.*)\'\'\'  # END VERSION_JSON"",\n                   contents, re.M | re.S)\n    if not mo:\n        mo = re.search(r""version_json = \'\'\'\\r\\n(.*)\'\'\'  # END VERSION_JSON"",\n                       contents, re.M | re.S)\n    if not mo:\n        raise NotThisMethod(""no version_json in _version.py"")\n    return json.loads(mo.group(1))\n\n\ndef write_to_version_file(filename, versions):\n    """"""Write the given version number to the given _version.py file.""""""\n    os.unlink(filename)\n    contents = json.dumps(versions, sort_keys=True,\n                          indent=1, separators=("","", "": ""))\n    with open(filename, ""w"") as f:\n        f.write(SHORT_VERSION_PY % contents)\n\n    print(""set %s to \'%s\'"" % (filename, versions[""version""]))\n\n\ndef plus_or_dot(pieces):\n    """"""Return a + if we don\'t already have one, else return a .""""""\n    if ""+"" in pieces.get(""closest-tag"", """"):\n        return "".""\n    return ""+""\n\n\ndef render_pep440(pieces):\n    """"""Build up version string, with post-release ""local version identifier"".\n\n    Our goal: TAG[+DISTANCE.gHEX[.dirty]] . Note that if you\n    get a tagged build and then dirty it, you\'ll get TAG+0.gHEX.dirty\n\n    Exceptions:\n    1: no tags. git_describe was just HEX. 0+untagged.DISTANCE.gHEX[.dirty]\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""] or pieces[""dirty""]:\n            rendered += plus_or_dot(pieces)\n            rendered += ""%d.g%s"" % (pieces[""distance""], pieces[""short""])\n            if pieces[""dirty""]:\n                rendered += "".dirty""\n    else:\n        # exception #1\n        rendered = ""0+untagged.%d.g%s"" % (pieces[""distance""],\n                                          pieces[""short""])\n        if pieces[""dirty""]:\n            rendered += "".dirty""\n    return rendered\n\n\ndef render_pep440_pre(pieces):\n    """"""TAG[.post.devDISTANCE] -- No -dirty.\n\n    Exceptions:\n    1: no tags. 0.post.devDISTANCE\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""]:\n            rendered += "".post.dev%d"" % pieces[""distance""]\n    else:\n        # exception #1\n        rendered = ""0.post.dev%d"" % pieces[""distance""]\n    return rendered\n\n\ndef render_pep440_post(pieces):\n    """"""TAG[.postDISTANCE[.dev0]+gHEX] .\n\n    The "".dev0"" means dirty. Note that .dev0 sorts backwards\n    (a dirty tree will appear ""older"" than the corresponding clean one),\n    but you shouldn\'t be releasing software with -dirty anyways.\n\n    Exceptions:\n    1: no tags. 0.postDISTANCE[.dev0]\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""] or pieces[""dirty""]:\n            rendered += "".post%d"" % pieces[""distance""]\n            if pieces[""dirty""]:\n                rendered += "".dev0""\n            rendered += plus_or_dot(pieces)\n            rendered += ""g%s"" % pieces[""short""]\n    else:\n        # exception #1\n        rendered = ""0.post%d"" % pieces[""distance""]\n        if pieces[""dirty""]:\n            rendered += "".dev0""\n        rendered += ""+g%s"" % pieces[""short""]\n    return rendered\n\n\ndef render_pep440_old(pieces):\n    """"""TAG[.postDISTANCE[.dev0]] .\n\n    The "".dev0"" means dirty.\n\n    Eexceptions:\n    1: no tags. 0.postDISTANCE[.dev0]\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""] or pieces[""dirty""]:\n            rendered += "".post%d"" % pieces[""distance""]\n            if pieces[""dirty""]:\n                rendered += "".dev0""\n    else:\n        # exception #1\n        rendered = ""0.post%d"" % pieces[""distance""]\n        if pieces[""dirty""]:\n            rendered += "".dev0""\n    return rendered\n\n\ndef render_git_describe(pieces):\n    """"""TAG[-DISTANCE-gHEX][-dirty].\n\n    Like \'git describe --tags --dirty --always\'.\n\n    Exceptions:\n    1: no tags. HEX[-dirty]  (note: no \'g\' prefix)\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""]:\n            rendered += ""-%d-g%s"" % (pieces[""distance""], pieces[""short""])\n    else:\n        # exception #1\n        rendered = pieces[""short""]\n    if pieces[""dirty""]:\n        rendered += ""-dirty""\n    return rendered\n\n\ndef render_git_describe_long(pieces):\n    """"""TAG-DISTANCE-gHEX[-dirty].\n\n    Like \'git describe --tags --dirty --always -long\'.\n    The distance/hash is unconditional.\n\n    Exceptions:\n    1: no tags. HEX[-dirty]  (note: no \'g\' prefix)\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        rendered += ""-%d-g%s"" % (pieces[""distance""], pieces[""short""])\n    else:\n        # exception #1\n        rendered = pieces[""short""]\n    if pieces[""dirty""]:\n        rendered += ""-dirty""\n    return rendered\n\n\ndef render(pieces, style):\n    """"""Render the given version pieces into the requested style.""""""\n    if pieces[""error""]:\n        return {""version"": ""unknown"",\n                ""full-revisionid"": pieces.get(""long""),\n                ""dirty"": None,\n                ""error"": pieces[""error""],\n                ""date"": None}\n\n    if not style or style == ""default"":\n        style = ""pep440""  # the default\n\n    if style == ""pep440"":\n        rendered = render_pep440(pieces)\n    elif style == ""pep440-pre"":\n        rendered = render_pep440_pre(pieces)\n    elif style == ""pep440-post"":\n        rendered = render_pep440_post(pieces)\n    elif style == ""pep440-old"":\n        rendered = render_pep440_old(pieces)\n    elif style == ""git-describe"":\n        rendered = render_git_describe(pieces)\n    elif style == ""git-describe-long"":\n        rendered = render_git_describe_long(pieces)\n    else:\n        raise ValueError(""unknown style \'%s\'"" % style)\n\n    return {""version"": rendered, ""full-revisionid"": pieces[""long""],\n            ""dirty"": pieces[""dirty""], ""error"": None,\n            ""date"": pieces.get(""date"")}\n\n\nclass VersioneerBadRootError(Exception):\n    """"""The project root directory is unknown or missing key files.""""""\n\n\ndef get_versions(verbose=False):\n    """"""Get the project version from whatever source is available.\n\n    Returns dict with two keys: \'version\' and \'full\'.\n    """"""\n    if ""versioneer"" in sys.modules:\n        # see the discussion in cmdclass.py:get_cmdclass()\n        del sys.modules[""versioneer""]\n\n    root = get_root()\n    cfg = get_config_from_root(root)\n\n    assert cfg.VCS is not None, ""please set [versioneer]VCS= in setup.cfg""\n    handlers = HANDLERS.get(cfg.VCS)\n    assert handlers, ""unrecognized VCS \'%s\'"" % cfg.VCS\n    verbose = verbose or cfg.verbose\n    assert cfg.versionfile_source is not None, \\\n        ""please set versioneer.versionfile_source""\n    assert cfg.tag_prefix is not None, ""please set versioneer.tag_prefix""\n\n    versionfile_abs = os.path.join(root, cfg.versionfile_source)\n\n    # extract version from first of: _version.py, VCS command (e.g. \'git\n    # describe\'), parentdir. This is meant to work for developers using a\n    # source checkout, for users of a tarball created by \'setup.py sdist\',\n    # and for users of a tarball/zipball created by \'git archive\' or github\'s\n    # download-from-tag feature or the equivalent in other VCSes.\n\n    get_keywords_f = handlers.get(""get_keywords"")\n    from_keywords_f = handlers.get(""keywords"")\n    if get_keywords_f and from_keywords_f:\n        try:\n            keywords = get_keywords_f(versionfile_abs)\n            ver = from_keywords_f(keywords, cfg.tag_prefix, verbose)\n            if verbose:\n                print(""got version from expanded keyword %s"" % ver)\n            return ver\n        except NotThisMethod:\n            pass\n\n    try:\n        ver = versions_from_file(versionfile_abs)\n        if verbose:\n            print(""got version from file %s %s"" % (versionfile_abs, ver))\n        return ver\n    except NotThisMethod:\n        pass\n\n    from_vcs_f = handlers.get(""pieces_from_vcs"")\n    if from_vcs_f:\n        try:\n            pieces = from_vcs_f(cfg.tag_prefix, root, verbose)\n            ver = render(pieces, cfg.style)\n            if verbose:\n                print(""got version from VCS %s"" % ver)\n            return ver\n        except NotThisMethod:\n            pass\n\n    try:\n        if cfg.parentdir_prefix:\n            ver = versions_from_parentdir(cfg.parentdir_prefix, root, verbose)\n            if verbose:\n                print(""got version from parentdir %s"" % ver)\n            return ver\n    except NotThisMethod:\n        pass\n\n    if verbose:\n        print(""unable to compute version"")\n\n    return {""version"": ""0+unknown"", ""full-revisionid"": None,\n            ""dirty"": None, ""error"": ""unable to compute version"",\n            ""date"": None}\n\n\ndef get_version():\n    """"""Get the short version string for this project.""""""\n    return get_versions()[""version""]\n\n\ndef get_cmdclass():\n    """"""Get the custom setuptools/distutils subclasses used by Versioneer.""""""\n    if ""versioneer"" in sys.modules:\n        del sys.modules[""versioneer""]\n        # this fixes the ""python setup.py develop"" case (also \'install\' and\n        # \'easy_install .\'), in which subdependencies of the main project are\n        # built (using setup.py bdist_egg) in the same python process. Assume\n        # a main project A and a dependency B, which use different versions\n        # of Versioneer. A\'s setup.py imports A\'s Versioneer, leaving it in\n        # sys.modules by the time B\'s setup.py is executed, causing B to run\n        # with the wrong versioneer. Setuptools wraps the sub-dep builds in a\n        # sandbox that restores sys.modules to it\'s pre-build state, so the\n        # parent is protected against the child\'s ""import versioneer"". By\n        # removing ourselves from sys.modules here, before the child build\n        # happens, we protect the child from the parent\'s versioneer too.\n        # Also see https://github.com/warner/python-versioneer/issues/52\n\n    cmds = {}\n\n    # we add ""version"" to both distutils and setuptools\n    from distutils.core import Command\n\n    class cmd_version(Command):\n        description = ""report generated version string""\n        user_options = []\n        boolean_options = []\n\n        def initialize_options(self):\n            pass\n\n        def finalize_options(self):\n            pass\n\n        def run(self):\n            vers = get_versions(verbose=True)\n            print(""Version: %s"" % vers[""version""])\n            print("" full-revisionid: %s"" % vers.get(""full-revisionid""))\n            print("" dirty: %s"" % vers.get(""dirty""))\n            print("" date: %s"" % vers.get(""date""))\n            if vers[""error""]:\n                print("" error: %s"" % vers[""error""])\n    cmds[""version""] = cmd_version\n\n    # we override ""build_py"" in both distutils and setuptools\n    #\n    # most invocation pathways end up running build_py:\n    #  distutils/build -> build_py\n    #  distutils/install -> distutils/build ->..\n    #  setuptools/bdist_wheel -> distutils/install ->..\n    #  setuptools/bdist_egg -> distutils/install_lib -> build_py\n    #  setuptools/install -> bdist_egg ->..\n    #  setuptools/develop -> ?\n    #  pip install:\n    #   copies source tree to a tempdir before running egg_info/etc\n    #   if .git isn\'t copied too, \'git describe\' will fail\n    #   then does setup.py bdist_wheel, or sometimes setup.py install\n    #  setup.py egg_info -> ?\n\n    # we override different ""build_py"" commands for both environments\n    if ""setuptools"" in sys.modules:\n        from setuptools.command.build_py import build_py as _build_py\n    else:\n        from distutils.command.build_py import build_py as _build_py\n\n    class cmd_build_py(_build_py):\n        def run(self):\n            root = get_root()\n            cfg = get_config_from_root(root)\n            versions = get_versions()\n            _build_py.run(self)\n            # now locate _version.py in the new build/ directory and replace\n            # it with an updated value\n            if cfg.versionfile_build:\n                target_versionfile = os.path.join(self.build_lib,\n                                                  cfg.versionfile_build)\n                print(""UPDATING %s"" % target_versionfile)\n                write_to_version_file(target_versionfile, versions)\n    cmds[""build_py""] = cmd_build_py\n\n    if ""cx_Freeze"" in sys.modules:  # cx_freeze enabled?\n        from cx_Freeze.dist import build_exe as _build_exe\n        # nczeczulin reports that py2exe won\'t like the pep440-style string\n        # as FILEVERSION, but it can be used for PRODUCTVERSION, e.g.\n        # setup(console=[{\n        #   ""version"": versioneer.get_version().split(""+"", 1)[0], # FILEVERSION\n        #   ""product_version"": versioneer.get_version(),\n        #   ...\n\n        class cmd_build_exe(_build_exe):\n            def run(self):\n                root = get_root()\n                cfg = get_config_from_root(root)\n                versions = get_versions()\n                target_versionfile = cfg.versionfile_source\n                print(""UPDATING %s"" % target_versionfile)\n                write_to_version_file(target_versionfile, versions)\n\n                _build_exe.run(self)\n                os.unlink(target_versionfile)\n                with open(cfg.versionfile_source, ""w"") as f:\n                    LONG = LONG_VERSION_PY[cfg.VCS]\n                    f.write(LONG %\n                            {""DOLLAR"": ""$"",\n                             ""STYLE"": cfg.style,\n                             ""TAG_PREFIX"": cfg.tag_prefix,\n                             ""PARENTDIR_PREFIX"": cfg.parentdir_prefix,\n                             ""VERSIONFILE_SOURCE"": cfg.versionfile_source,\n                             })\n        cmds[""build_exe""] = cmd_build_exe\n        del cmds[""build_py""]\n\n    if \'py2exe\' in sys.modules:  # py2exe enabled?\n        try:\n            from py2exe.distutils_buildexe import py2exe as _py2exe  # py3\n        except ImportError:\n            from py2exe.build_exe import py2exe as _py2exe  # py2\n\n        class cmd_py2exe(_py2exe):\n            def run(self):\n                root = get_root()\n                cfg = get_config_from_root(root)\n                versions = get_versions()\n                target_versionfile = cfg.versionfile_source\n                print(""UPDATING %s"" % target_versionfile)\n                write_to_version_file(target_versionfile, versions)\n\n                _py2exe.run(self)\n                os.unlink(target_versionfile)\n                with open(cfg.versionfile_source, ""w"") as f:\n                    LONG = LONG_VERSION_PY[cfg.VCS]\n                    f.write(LONG %\n                            {""DOLLAR"": ""$"",\n                             ""STYLE"": cfg.style,\n                             ""TAG_PREFIX"": cfg.tag_prefix,\n                             ""PARENTDIR_PREFIX"": cfg.parentdir_prefix,\n                             ""VERSIONFILE_SOURCE"": cfg.versionfile_source,\n                             })\n        cmds[""py2exe""] = cmd_py2exe\n\n    # we override different ""sdist"" commands for both environments\n    if ""setuptools"" in sys.modules:\n        from setuptools.command.sdist import sdist as _sdist\n    else:\n        from distutils.command.sdist import sdist as _sdist\n\n    class cmd_sdist(_sdist):\n        def run(self):\n            versions = get_versions()\n            self._versioneer_generated_versions = versions\n            # unless we update this, the command will keep using the old\n            # version\n            self.distribution.metadata.version = versions[""version""]\n            return _sdist.run(self)\n\n        def make_release_tree(self, base_dir, files):\n            root = get_root()\n            cfg = get_config_from_root(root)\n            _sdist.make_release_tree(self, base_dir, files)\n            # now locate _version.py in the new base_dir directory\n            # (remembering that it may be a hardlink) and replace it with an\n            # updated value\n            target_versionfile = os.path.join(base_dir, cfg.versionfile_source)\n            print(""UPDATING %s"" % target_versionfile)\n            write_to_version_file(target_versionfile,\n                                  self._versioneer_generated_versions)\n    cmds[""sdist""] = cmd_sdist\n\n    return cmds\n\n\nCONFIG_ERROR = """"""\nsetup.cfg is missing the necessary Versioneer configuration. You need\na section like:\n\n [versioneer]\n VCS = git\n style = pep440\n versionfile_source = src/myproject/_version.py\n versionfile_build = myproject/_version.py\n tag_prefix =\n parentdir_prefix = myproject-\n\nYou will also need to edit your setup.py to use the results:\n\n import versioneer\n setup(version=versioneer.get_version(),\n       cmdclass=versioneer.get_cmdclass(), ...)\n\nPlease read the docstring in ./versioneer.py for configuration instructions,\nedit setup.cfg, and re-run the installer or \'python versioneer.py setup\'.\n""""""\n\nSAMPLE_CONFIG = """"""\n# See the docstring in versioneer.py for instructions. Note that you must\n# re-run \'versioneer.py setup\' after changing this section, and commit the\n# resulting files.\n\n[versioneer]\n#VCS = git\n#style = pep440\n#versionfile_source =\n#versionfile_build =\n#tag_prefix =\n#parentdir_prefix =\n\n""""""\n\nINIT_PY_SNIPPET = """"""\nfrom ._version import get_versions\n__version__ = get_versions()[\'version\']\ndel get_versions\n""""""\n\n\ndef do_setup():\n    """"""Main VCS-independent setup function for installing Versioneer.""""""\n    root = get_root()\n    try:\n        cfg = get_config_from_root(root)\n    except (EnvironmentError, configparser.NoSectionError,\n            configparser.NoOptionError) as e:\n        if isinstance(e, (EnvironmentError, configparser.NoSectionError)):\n            print(""Adding sample versioneer config to setup.cfg"",\n                  file=sys.stderr)\n            with open(os.path.join(root, ""setup.cfg""), ""a"") as f:\n                f.write(SAMPLE_CONFIG)\n        print(CONFIG_ERROR, file=sys.stderr)\n        return 1\n\n    print("" creating %s"" % cfg.versionfile_source)\n    with open(cfg.versionfile_source, ""w"") as f:\n        LONG = LONG_VERSION_PY[cfg.VCS]\n        f.write(LONG % {""DOLLAR"": ""$"",\n                        ""STYLE"": cfg.style,\n                        ""TAG_PREFIX"": cfg.tag_prefix,\n                        ""PARENTDIR_PREFIX"": cfg.parentdir_prefix,\n                        ""VERSIONFILE_SOURCE"": cfg.versionfile_source,\n                        })\n\n    ipy = os.path.join(os.path.dirname(cfg.versionfile_source),\n                       ""__init__.py"")\n    if os.path.exists(ipy):\n        try:\n            with open(ipy, ""r"") as f:\n                old = f.read()\n        except EnvironmentError:\n            old = """"\n        if INIT_PY_SNIPPET not in old:\n            print("" appending to %s"" % ipy)\n            with open(ipy, ""a"") as f:\n                f.write(INIT_PY_SNIPPET)\n        else:\n            print("" %s unmodified"" % ipy)\n    else:\n        print("" %s doesn\'t exist, ok"" % ipy)\n        ipy = None\n\n    # Make sure both the top-level ""versioneer.py"" and versionfile_source\n    # (PKG/_version.py, used by runtime code) are in MANIFEST.in, so\n    # they\'ll be copied into source distributions. Pip won\'t be able to\n    # install the package without this.\n    manifest_in = os.path.join(root, ""MANIFEST.in"")\n    simple_includes = set()\n    try:\n        with open(manifest_in, ""r"") as f:\n            for line in f:\n                if line.startswith(""include ""):\n                    for include in line.split()[1:]:\n                        simple_includes.add(include)\n    except EnvironmentError:\n        pass\n    # That doesn\'t cover everything MANIFEST.in can do\n    # (http://docs.python.org/2/distutils/sourcedist.html#commands), so\n    # it might give some false negatives. Appending redundant \'include\'\n    # lines is safe, though.\n    if ""versioneer.py"" not in simple_includes:\n        print("" appending \'versioneer.py\' to MANIFEST.in"")\n        with open(manifest_in, ""a"") as f:\n            f.write(""include versioneer.py\\n"")\n    else:\n        print("" \'versioneer.py\' already in MANIFEST.in"")\n    if cfg.versionfile_source not in simple_includes:\n        print("" appending versionfile_source (\'%s\') to MANIFEST.in"" %\n              cfg.versionfile_source)\n        with open(manifest_in, ""a"") as f:\n            f.write(""include %s\\n"" % cfg.versionfile_source)\n    else:\n        print("" versionfile_source already in MANIFEST.in"")\n\n    # Make VCS-specific changes. For git, this means creating/changing\n    # .gitattributes to mark _version.py for export-subst keyword\n    # substitution.\n    do_vcs_install(manifest_in, cfg.versionfile_source, ipy)\n    return 0\n\n\ndef scan_setup_py():\n    """"""Validate the contents of setup.py against Versioneer\'s expectations.""""""\n    found = set()\n    setters = False\n    errors = 0\n    with open(""setup.py"", ""r"") as f:\n        for line in f.readlines():\n            if ""import versioneer"" in line:\n                found.add(""import"")\n            if ""versioneer.get_cmdclass()"" in line:\n                found.add(""cmdclass"")\n            if ""versioneer.get_version()"" in line:\n                found.add(""get_version"")\n            if ""versioneer.VCS"" in line:\n                setters = True\n            if ""versioneer.versionfile_source"" in line:\n                setters = True\n    if len(found) != 3:\n        print("""")\n        print(""Your setup.py appears to be missing some important items"")\n        print(""(but I might be wrong). Please make sure it has something"")\n        print(""roughly like the following:"")\n        print("""")\n        print("" import versioneer"")\n        print("" setup( version=versioneer.get_version(),"")\n        print(""        cmdclass=versioneer.get_cmdclass(),  ...)"")\n        print("""")\n        errors += 1\n    if setters:\n        print(""You should remove lines like \'versioneer.VCS = \' and"")\n        print(""\'versioneer.versionfile_source = \' . This configuration"")\n        print(""now lives in setup.cfg, and should be removed from setup.py"")\n        print("""")\n        errors += 1\n    return errors\n\n\nif __name__ == ""__main__"":\n    cmd = sys.argv[1]\n    if cmd == ""setup"":\n        errors = do_setup()\n        errors += scan_setup_py()\n        if errors:\n            sys.exit(1)\n'"
RepTate/CL.py,2,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module ReptateCL\n\nMain program that launches the CL version of RepTate.\n\n""""""\nimport os\nimport sys\nimport glob\nimport argparse\nimport logging\nimport numpy as np\n\nfrom RepTate.core.ApplicationManager import ApplicationManager\nfrom PyQt5.QtWidgets import QApplication\nfrom PyQt5.QtCore import QStandardPaths\nfrom RepTate.core.CmdBase import CmdBase, CalcMode, CmdMode\n\n\ndef main():\n    start_RepTate(sys.argv[1:])\n\n\ndef get_argument_files(finlist):\n    """"""\n    Parse files from command line and group them by extension\n\n    :param list finlist: List of files from argparse\n    """"""\n    df = {}\n    if not finlist:\n        return df\n    full_paths = [os.path.join(os.getcwd(), path) for path in finlist]\n    for path in full_paths:\n        if os.path.isfile(path):\n            items = path.split(""."")\n            extension = items[len(items) - 1]\n            if extension in df.keys():\n                df[extension].append(path)\n            else:\n                df[extension] = [path]\n        else:\n            lll = glob.glob(path)\n            for f in lll:\n                items = f.split(""."")\n                extension = items[len(items) - 1]\n                if extension in df.keys():\n                    df[extension].append(f)\n                else:\n                    df[extension] = [f]\n    return df\n\n\ndef start_RepTate(argv):\n    """"""\n    Main RepTate application.\n\n    :param list argv: Command line parameters passed to Reptate\n    """"""\n    # FOR DEBUGGING PURPOSES: Set Single or MultiThread (default)\n    CmdBase.calcmode = CalcMode.singlethread\n\n    GUI = False\n\n    parser = argparse.ArgumentParser(\n        description=""RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiment."",\n        epilog=""(c) Jorge Ramirez (jorge.ramirez@upm.es, UPM), Victor Boudara (U. Leeds) (2017-2020)"",\n    )\n    parser.add_argument(\n        ""-b"", ""--batch"", help=""Run in batch mode (no graphics)"", action=""store_true""\n    )\n    parser.add_argument(\n        ""-l"", ""--tool"", help=""Open the tool L (if available)"", default="""", metavar=""L""\n    )\n    parser.add_argument(\n        ""-s"",\n        ""--single"",\n        help=""Run Reptate as a single thread application"",\n        action=""store_true"",\n    )\n    parser.add_argument(\n        ""-t"", ""--theory"", help=""Open the given theory (if available)"", default=""""\n    )\n    parser.add_argument(\n        ""-v"", ""--verbose"", help=""Write debug information to stdout"", action=""store_true""\n    )\n    parser.add_argument(\n        ""-V"", ""--version"", help=""Print RepTate version and exit"", action=""store_true""\n    )\n    parser.add_argument(""finlist"", nargs=""*"")\n\n    args = parser.parse_args()\n\n    if args.batch:\n        CmdBase.mode = CmdMode.batch\n\n    if args.verbose:\n        loglevel = logging.DEBUG\n    else:\n        loglevel = logging.INFO\n\n    # Get files from command line\n    dictfiles = get_argument_files(args.finlist)\n\n    if args.version:\n        print(ApplicationManager.intro)\n        sys.exit()\n\n    qapp = QApplication(sys.argv)  # Needed, because some internal functions use Qt\n    qapp.setApplicationName(""RepTate"")\n    app = ApplicationManager(loglevel=loglevel)\n\n    # Handle files & open apps accordingly\n    CmdBase.calcmode = (\n        CalcMode.singlethread\n    )  # avoid troubles when loading multiple apps/files/theories\n    d = {\n        app.extension: app.appname for app in list(app.available_applications.values())\n    }\n    fileopen = False\n    theoryopen = False\n    for k in dictfiles.keys():\n        if k == ""rept"":\n            # ex.open_project(dictfiles[k][0])\n            app.logger.warning(\n                ""Open RepTate projects not implemented for the Command Line version""\n            )\n            pass  # Not implemented yet\n        elif np.any([k == key for key in d.keys()]):\n            app.new(d[k])\n            appname = ""%s%d"" % (d[k], app.application_counter)\n            ds, dsname = app.applications[appname].new("""")\n            app.applications[appname].datasets[dsname] = ds\n            for f in dictfiles[k]:\n                ds.do_open(f)\n            fileopen = True\n            if args.theory in list(app.applications[appname].theories.keys()):\n                th, thname = ds.new(args.theory)\n                if th != None:\n                    theoryopen = True\n            if args.tool in (\n                list(app.applications[appname].availabletools.keys())\n                + list(app.applications[appname].extratools.keys())\n            ):\n                app.applications[appname].tool_new(args.tool)\n            ds.do_plot()\n        elif np.any([k in key for key in d.keys()]):  # works with spaces in extensions\n            for key in d.keys():\n                if k in key:\n                    app.new(d[key])\n                    appname = ""%s%d"" % (d[key], app.application_counter)\n                    ds, dsname = app.applications[appname].new("""")\n                    app.applications[appname].datasets[dsname] = ds\n                    for f in dictfiles[k]:\n                        ds.do_open(f)\n                    fileopen = True\n                    if args.theory in list(app.applications[appname].theories.keys()):\n                        th, thname = ds.new(args.theory)\n                        if th != None:\n                            theoryopen = True\n                    if args.tool in (\n                        list(app.applications[appname].availabletools.keys())\n                        + list(app.applications[appname].extratools.keys())\n                    ):\n                        app.applications[appname].tool_new(args.tool)\n                    ds.do_plot()\n                    break\n        else:\n            print(""File type %s cannot be opened"" % k)\n    # set the calmode back\n    if args.single:\n        CmdBase.calcmode = CalcMode.singlethread\n    else:\n        CmdBase.calcmode = CalcMode.multithread\n\n    if fileopen and theoryopen:\n        app.cmdqueue.append(""switch %s.%s.%s"" % (appname, dsname, thname))\n    elif fileopen:\n        app.cmdqueue.append(""switch %s.%s"" % (appname, dsname))\n    try:\n        sys.exit(app.cmdloop())\n    except SystemExit:\n        pass\n\n\nif __name__ == ""__main__"":\n    main()\n'"
RepTate/MatDB.py,0,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module MatDB\n\nMain program that launches the Materials Database\n\n""""""\nimport os\nimport sys\nimport argparse\nimport traceback\nimport logging\n\nfrom RepTate.core.CmdBase import CmdBase, CalcMode, CmdMode\nfrom RepTate.gui.QApplicationManager import QApplicationManager\nfrom RepTate.tools.ToolMaterialsDatabase import ToolMaterialsDatabase\nfrom RepTate.applications.ApplicationCreep import ApplicationCreep\nfrom PyQt5.QtWidgets import QApplication, QMessageBox, QShortcut\nfrom PyQt5.QtGui import QDesktopServices, QIcon, QKeySequence\nfrom PyQt5.QtCore import QUrl, Qt, QCoreApplication\n\n\ndef main():\n    start_MatDB(sys.argv[1:])\n\n\ndef start_MatDB(argv):\n    """"""\n    Materials Database application. \n    \n    :param list argv: Command line parameters passed to MatDB\n    """"""\n    parser = argparse.ArgumentParser(\n        description=""RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiment."",\n        epilog=""(c) Jorge Ramirez (jorge.ramirez@upm.es, UPM), Victor Boudara (U. Leeds) (2017-2020)"",\n    )\n    parser.add_argument(\n        ""-d"", ""--dpi"", help=""High DPI support on Windows"", action=""store_true""\n    )\n    parser.add_argument(\n        ""-v"", ""--verbose"", help=""Write debug information to stdout"", action=""store_true""\n    )\n    parser.add_argument(\n        ""-V"", ""--version"", help=""Print RepTate version and exit"", action=""store_true""\n    )\n    parser.add_argument(""finlist"", nargs=""*"")\n\n    args = parser.parse_args(args=argv)\n    if args.version:\n        print(QApplicationManager.intro)\n        sys.exit()\n\n    if args.verbose:\n        loglevel = logging.DEBUG\n    else:\n        loglevel = logging.INFO\n\n    QApplication.setStyle(""Fusion"")  # comment that line for a native look\n    # for a list of available styles: ""from PyQt5.QtWidgets import QStyleFactory; print(QStyleFactory.keys())""\n\n    if args.dpi:\n        os.environ[""QT_AUTO_SCREEN_SCALE_FACTOR""] = ""1""\n        QCoreApplication.setAttribute(Qt.AA_EnableHighDpiScaling, True)\n        QApplication.setAttribute(Qt.AA_EnableHighDpiScaling, True)\n        QApplication.setAttribute(Qt.AA_UseHighDpiPixmaps, True)\n\n    app = QApplication(sys.argv)\n    app.setApplicationName(""RepTate"")\n\n    CmdBase.mode = CmdMode.GUI\n    tmpex = QApplicationManager(loglevel=loglevel)\n    tmpapp = ApplicationCreep(""tmpapp"", tmpex)\n    ex = ToolMaterialsDatabase(""MatDB"", tmpapp)\n    ex.setWindowIcon(QIcon(""RepTate/gui/Images/DataTable3D.ico""))\n    ex.setWindowTitle(""RepTate Material"" ""s Database"")\n    ex.resize(300, 900)\n    ex.move(100, 20)\n\n    shortcut = QShortcut(QKeySequence(""Ctrl+Q""), ex)\n    shortcut.activated.connect(app.quit)\n\n    CmdBase.calcmode = CalcMode.singlethread\n\n    ex.show()\n    sys.exit(app.exec_())\n\n\nif __name__ == ""__main__"":\n    main()\n'"
RepTate/RepTate.py,0,"b'import sys\nimport os\nsys.path.insert(0, \'../\')\n\nimport RepTate.__main__\n\nif __name__ == ""__main__"":\n    RepTate.__main__.main()\n'"
RepTate/UV.py,0,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module UV\n\nMain program that launches the Universal Viewer of RepTate\n\n""""""\nimport os\nimport sys\nimport glob\nimport argparse\nimport traceback\nimport logging\nimport configparser\n\nfrom PyQt5.QtWidgets import QApplication, QMessageBox, QShortcut\nfrom PyQt5.QtGui import QDesktopServices, QIcon, QKeySequence\nfrom PyQt5.QtCore import QUrl, Qt, QCoreApplication\nfrom RepTate.core.DataTable import DataTable\n\nDataTable.MAX_NUM_SERIES = 10\nfrom RepTate.core.CmdBase import CmdBase, CalcMode, CmdMode\nfrom RepTate.gui.QApplicationManager import QApplicationManager\nfrom RepTate.applications.ApplicationUniversalViewer import ApplicationUniversalViewer\n\n\ndef main():\n    start_UV(sys.argv[1:])\n\n\ndef get_argument_files(finlist):\n    """"""\n    Parse files from command line and group them by extension\n\n    :param list finlist: List of files from argparse\n    """"""\n    df = {}\n    if not finlist:\n        return df\n    full_paths = [os.path.join(os.getcwd(), path) for path in finlist]\n    for path in full_paths:\n        if os.path.isfile(path):\n            items = path.split(""."")\n            extension = items[len(items) - 1]\n            if extension in df.keys():\n                df[extension].append(path)\n            else:\n                df[extension] = [path]\n        else:\n            lll = glob.glob(path)\n            for f in lll:\n                items = f.split(""."")\n                extension = items[len(items) - 1]\n                if extension in df.keys():\n                    df[extension].append(f)\n                else:\n                    df[extension] = [f]\n    return df\n\n\ndef start_UV(argv):\n    """"""\n    Start Universal Viewer app. \n    \n    :param list argv: Command line parameters passed to UV\n    """"""\n    GUI = True\n\n    parser = argparse.ArgumentParser(\n        description=""RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiment."",\n        epilog=""(c) Jorge Ramirez (jorge.ramirez@upm.es, UPM), Victor Boudara (U. Leeds) (2017-2020)"",\n    )\n    parser.add_argument(\n        ""-d"", ""--dpi"", help=""High DPI support on Windows"", action=""store_true""\n    )\n    parser.add_argument(\n        ""-l"", ""--tool"", help=""Open the tool L (if available)"", default="""", metavar=""L""\n    )\n    parser.add_argument(\n        ""-s"",\n        ""--single"",\n        help=""Run Reptate as a single thread application"",\n        action=""store_true"",\n    )\n    parser.add_argument(\n        ""-t"",\n        ""--theory"",\n        help=""Open the theory T (if available)"",\n        default="""",\n        metavar=""T"",\n    )\n    parser.add_argument(\n        ""-v"", ""--verbose"", help=""Write debug information to stdout"", action=""store_true""\n    )\n    parser.add_argument(\n        ""-V"", ""--version"", help=""Print RepTate version and exit"", action=""store_true""\n    )\n    parser.add_argument(""finlist"", nargs=""*"")\n\n    args = parser.parse_args(args=argv)\n\n    # Get files from command line\n    dictfiles = get_argument_files(args.finlist)\n\n    if args.version:\n        print(QApplicationManager.intro)\n        sys.exit()\n\n    if args.verbose:\n        loglevel = logging.DEBUG\n    else:\n        loglevel = logging.INFO\n\n    QApplication.setStyle(""Fusion"")  # comment that line for a native look\n    # for a list of available styles: ""from PyQt5.QtWidgets import QStyleFactory; print(QStyleFactory.keys())""\n\n    if args.dpi:\n        os.environ[""QT_AUTO_SCREEN_SCALE_FACTOR""] = ""1""\n        QCoreApplication.setAttribute(Qt.AA_EnableHighDpiScaling, True)\n        QApplication.setAttribute(Qt.AA_EnableHighDpiScaling, True)\n        QApplication.setAttribute(Qt.AA_UseHighDpiPixmaps, True)\n\n    app = QApplication(sys.argv)\n    app.setApplicationName(""RepTate"")\n\n    CmdBase.mode = CmdMode.GUI\n    tmpex = QApplicationManager(loglevel=loglevel)\n\n    # 1. Find if all argument files have the same extension\n    if len(dictfiles) > 1 or len(dictfiles) == 0:\n        tmpex.logger.error(""Universal Viewer must be invoked with at least one file!"")\n        sys.exit()\n    # 2. Find if in the folder of the first file there is an ini file that describes that extension\n    inifile = None\n    inifilepath = None\n    nplots_max = 1\n    pathtofirstfile = os.path.dirname(list(dictfiles.values())[0][0])\n    for file in os.listdir(pathtofirstfile):\n        if file.endswith("".ini""):\n            config = configparser.ConfigParser()\n            config.read_file(open(pathtofirstfile + os.sep + file))\n            ext = config.get(""file1"", ""extension"").split(""."")[1]\n            if ext in dictfiles.keys():\n                inifile = file\n                inifilepath = pathtofirstfile\n                nplot_max = config.getint(""application"", ""ncharts"")\n                break\n    # 3. If not, show an error message and exit\n    if inifile == None:\n        tmpex.logger.error(\n            ""INI file describing the data not found in the first file folder""\n        )\n        sys.exit()\n\n    ex = ApplicationUniversalViewer(\n        ""UniversalViewer"",\n        tmpex,\n        inifile=inifilepath + os.sep + inifile,\n        nplot_max=nplot_max,\n    )\n    ex.setWindowIcon(QIcon(""RepTate/gui/Images/UView_Icon.ico""))\n    ex.setWindowTitle(\n        ""RepTate %s %s - Universal Viewer - INI: %s""\n        % (tmpex.version, tmpex.date, inifile)\n    )\n    shortcut = QShortcut(QKeySequence(""Ctrl+Q""), ex)\n    shortcut.activated.connect(app.quit)\n\n    # Handle files & open apps accordingly\n    CmdBase.calcmode = (\n        CalcMode.singlethread\n    )  # avoid troubles when loading multiple apps/files/theories\n    for k in dictfiles.keys():\n        ex.new_tables_from_files(dictfiles[k])\n    if args.theory in list(ex.theories.keys()):\n        ex.datasets[""Set1""].new_theory(args.theory)\n    if args.tool in (list(ex.availabletools.keys()) + list(ex.extratools.keys())):\n        ex.new_tool(args.tool)\n        ex.update_all_ds_plots()\n        ex.showDataInspector(True)\n    # set the calmode back\n    if args.single:\n        CmdBase.calcmode = CalcMode.singlethread\n    else:\n        CmdBase.calcmode = CalcMode.multithread\n\n    ex.showMaximized()\n    sys.exit(app.exec_())\n\n\nif __name__ == ""__main__"":\n    main()\n'"
RepTate/__init__.py,1,"b'import sys\nimport os\nimport traceback\nimport logging\nimport numpy as np\nfrom ._version import get_versions\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\n\n__version__ = get_versions()[""version""]\ndel get_versions\n\n# RepTate root directory where the ""data/"" and ""docs/"" folders are located\nif getattr(sys, ""frozen"", False):\n    # If the application is run as a bundle, the PyInstaller bootloader\n    # extends the sys module by a flag frozen=True and sets the app\n    # path into variable _MEIPASS\'.\n    root_dir = sys._MEIPASS\nelse:\n    root_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# setup NumPy log level\nnp.seterr(all=""call"")\n\ndef my_excepthook(type, value, tb):\n    """"""Catch exceptions and print error message. Open email client to report bug to developers""""""\n    tb_msg = """"\n    for e in traceback.format_tb(tb):\n        tb_msg += str(e)\n    tb_msg += ""%s: %s\\n"" % (type.__name__, str(value))\n    msg = (\n        \'Sorry, something went wrong:\\n ""%s: %s"".\'\n        % (type.__name__, str(value))\n    )\n    l = logging.getLogger(""RepTate"")\n    if CmdBase.mode == CmdMode.GUI:\n        from PyQt5.QtWidgets import QMessageBox\n        from PyQt5.QtGui import QDesktopServices\n        from PyQt5.QtCore import QUrl\n        # l = logging.getLogger(""RepTate"")\n        l.error(tb_msg)\n        msg += ""\\nTry to save your work and quit RepTate.\\nDo you want to help RepTate developers by reporting this bug?""\n        ans = QMessageBox.critical(\n            None, ""Critical Error"", msg, QMessageBox.Yes | QMessageBox.No\n        )\n        if ans == QMessageBox.Yes:\n            address = ""reptate.rheology@gmail.com""\n            subject = ""[RepTate] Something went wrong""\n            body = (\n                ""Please describe the actions leading to the Error (apps, theories or tools opened).\\nDo NOT include confidential information.\\n%s\\nError Traceback:\\n %s""\n                % (""*"" * 91 + ""\\n"" * 10 + ""*"" * 91, tb_msg)\n            )\n            QDesktopServices.openUrl(\n                QUrl(\n                    ""mailto:?to=%s&subject=%s&body=%s"" % (address, subject, body),\n                    QUrl.TolerantMode,\n                )\n            )\n    else:\n        l.critical(msg)\n        msg = ""Please report bug to \'reptate.rheology@gmail.com\': Describe the error, attach logfile and datafiles.""\n        l.critical(msg)\n\nsys.excepthook = my_excepthook'"
RepTate/__main__.py,2,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module Reptate\n\nMain program that launches the GUI.\n\n""""""\nimport os\nimport sys\nimport glob\nimport argparse\nimport traceback\nimport numpy as np\nimport logging\n\nfrom RepTate.core.CmdBase import CmdBase, CalcMode, CmdMode\nfrom RepTate.gui.QApplicationManager import QApplicationManager\n\n# from ApplicationManager import * #solved the issue with the matplot window not opening on Mac\nfrom PyQt5.QtWidgets import QApplication, QMessageBox\nfrom PyQt5.QtGui import QDesktopServices\nfrom PyQt5.QtCore import QUrl, Qt, QCoreApplication\nfrom RepTate.gui.SplashScreen import SplashScreen\n\n# from time import time, sleep\n\n\ndef main():\n    start_RepTate(sys.argv[1:])\n\n\ndef get_argument_files(finlist):\n    """"""\n    Parse files from command line and group them by extension\n\n    :param list finlist: List of files from argparse\n    """"""\n    df = {}\n    if not finlist:\n        return df\n    full_paths = [os.path.join(os.getcwd(), path) for path in finlist]\n    for path in full_paths:\n        if os.path.isfile(path):\n            items = path.split(""."")\n            extension = items[len(items) - 1]\n            if extension in df.keys():\n                df[extension].append(path)\n            else:\n                df[extension] = [path]\n        else:\n            lll = glob.glob(path)\n            for f in lll:\n                items = f.split(""."")\n                extension = items[len(items) - 1]\n                if extension in df.keys():\n                    df[extension].append(f)\n                else:\n                    df[extension] = [f]\n    return df\n\n\ndef start_RepTate(argv):\n    """"""\n    Main RepTate application.\n\n    :param list argv: Command line parameters passed to Reptate\n    """"""\n    GUI = True\n\n    parser = argparse.ArgumentParser(\n        description=""RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiment."",\n        epilog=""(c) Jorge Ramirez (jorge.ramirez@upm.es, UPM), Victor Boudara (U. Leeds) (2017-2020)"",\n    )\n    parser.add_argument(\n        ""-d"", ""--dpi"", help=""High DPI support on Windows"", action=""store_true""\n    )\n    parser.add_argument(\n        ""-l"", ""--tool"", help=""Open the tool L (if available)"", default="""", metavar=""L""\n    )\n    parser.add_argument(\n        ""-s"",\n        ""--single"",\n        help=""Run Reptate as a single thread application"",\n        action=""store_true"",\n    )\n    parser.add_argument(\n        ""-t"",\n        ""--theory"",\n        help=""Open the theory T (if available)"",\n        default="""",\n        metavar=""T"",\n    )\n    parser.add_argument(\n        ""-v"", ""--verbose"", help=""Write debug information to stdout"", action=""store_true""\n    )\n    parser.add_argument(\n        ""-V"", ""--version"", help=""Print RepTate version and exit"", action=""store_true""\n    )\n    parser.add_argument(""finlist"", nargs=""*"")\n\n    args = parser.parse_args(args=argv)\n\n    # Get files from command line\n    dictfiles = get_argument_files(args.finlist)\n\n    if args.version:\n        print(QApplicationManager.intro)\n        sys.exit()\n\n    if args.verbose:\n        loglevel = logging.DEBUG\n    else:\n        loglevel = logging.INFO\n\n    QApplication.setStyle(""Fusion"")  # comment that line for a native look\n    # for a list of available styles: ""from PyQt5.QtWidgets import QStyleFactory; print(QStyleFactory.keys())""\n\n    if args.dpi or sys.platform == ""darwin"":\n        os.environ[""QT_AUTO_SCREEN_SCALE_FACTOR""] = ""1""\n        QCoreApplication.setAttribute(Qt.AA_EnableHighDpiScaling, True)\n        QApplication.setAttribute(Qt.AA_EnableHighDpiScaling, True)\n        QApplication.setAttribute(Qt.AA_UseHighDpiPixmaps, True)\n\n    app = QApplication(sys.argv)\n    app.setApplicationName(""RepTate"")\n\n    splash = SplashScreen()\n    splash.show()\n\n    ex = QApplicationManager(loglevel=loglevel)\n    ex.setStyleSheet(""QTabBar::tab { color:black; height: 22px; }"")\n    # splash.showMessage(""Loading RepTate..."")\n\n    splash.finish(ex)\n\n    # Handle files & open apps accordingly\n    CmdBase.calcmode = (\n        CalcMode.singlethread\n    )  # avoid troubles when loading multiple apps/files/theories\n    d = {ex.extension: ex.appname for ex in list(ex.available_applications.values())}\n    toolopen = False    \n    for k in dictfiles.keys():\n        if k == ""rept"":\n            ex.open_project(dictfiles[k][0])\n        elif np.any([k == key for key in d.keys()]):\n            # exact match\n            ex.handle_new_app(d[k])\n            appname = ""%s%d"" % (d[k], ex.application_counter)\n            ex.applications[appname].new_tables_from_files(dictfiles[k])\n            if args.theory in list(ex.applications[appname].theories.keys()):\n                ex.applications[appname].datasets[""Set1""].new_theory(args.theory)\n            if args.tool in (\n                list(ex.applications[appname].availabletools.keys())\n                + list(ex.applications[appname].extratools.keys())\n            ):\n                ex.applications[appname].new_tool(args.tool)\n                ex.applications[appname].update_all_ds_plots()\n                ex.applications[appname].showDataInspector(True)\n                toolopen = True\n\n        elif np.any([k in key for key in d.keys()]):  # works with spaces in extensions\n            for key in d.keys():\n                if k in key:\n                    ex.handle_new_app(d[key])\n                    appname = ""%s%d"" % (d[key], ex.application_counter)\n                    ex.applications[appname].new_tables_from_files(dictfiles[k])\n                    if args.theory in list(ex.applications[appname].theories.keys()):\n                        ex.applications[appname].datasets[""Set1""].new_theory(\n                            args.theory\n                        )\n                    if args.tool in (\n                        list(ex.applications[appname].availabletools.keys())\n                        + list(ex.applications[appname].extratools.keys())\n                    ):\n                        ex.applications[appname].new_tool(args.tool)\n                        ex.applications[appname].update_all_ds_plots()\n                        ex.applications[appname].showDataInspector(True)\n                        toolopen = True\n                    break\n        else:\n            print(""File type %s cannot be opened"" % k)\n    # set the calmode back\n    if args.single:\n        CmdBase.calcmode = CalcMode.singlethread\n    else:\n        CmdBase.calcmode = CalcMode.multithread\n\n    ex.showMaximized()\n    sys.exit(app.exec_())\n\n\nif __name__ == ""__main__"":\n    main()\n'"
RepTate/_version.py,0,"b'\n# This file helps to compute a version number in source trees obtained from\n# git-archive tarball (such as those provided by githubs download-from-tag\n# feature). Distribution tarballs (built by setup.py sdist) and build\n# directories (produced by setup.py build) will contain a much shorter file\n# that just contains the computed version number.\n\n# This file is released into the public domain. Generated by\n# versioneer-0.18 (https://github.com/warner/python-versioneer)\n\n""""""Git implementation of _version.py.""""""\n\nimport errno\nimport os\nimport re\nimport subprocess\nimport sys\n\n\ndef get_keywords():\n    """"""Get the keywords needed to look up the version information.""""""\n    # these strings will be replaced by git during git-archive.\n    # setup.py/versioneer.py will grep for the variable names, so they must\n    # each be defined on a line of their own. _version.py will just call\n    # get_keywords().\n    git_refnames = ""$Format:%d$""\n    git_full = ""$Format:%H$""\n    git_date = ""$Format:%ci$""\n    keywords = {""refnames"": git_refnames, ""full"": git_full, ""date"": git_date}\n    return keywords\n\n\nclass VersioneerConfig:\n    """"""Container for Versioneer configuration parameters.""""""\n\n\ndef get_config():\n    """"""Create, populate and return the VersioneerConfig() object.""""""\n    # these strings are filled in when \'setup.py versioneer\' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = ""git""\n    cfg.style = ""pep440""\n    cfg.tag_prefix = """"\n    cfg.parentdir_prefix = ""None""\n    cfg.versionfile_source = ""RepTate/_version.py""\n    cfg.verbose = False\n    return cfg\n\n\nclass NotThisMethod(Exception):\n    """"""Exception raised if a method is not valid for the current scenario.""""""\n\n\nLONG_VERSION_PY = {}\nHANDLERS = {}\n\n\ndef register_vcs_handler(vcs, method):  # decorator\n    """"""Decorator to mark a method as the handler for a particular VCS.""""""\n    def decorate(f):\n        """"""Store f in HANDLERS[vcs][method].""""""\n        if vcs not in HANDLERS:\n            HANDLERS[vcs] = {}\n        HANDLERS[vcs][method] = f\n        return f\n    return decorate\n\n\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False,\n                env=None):\n    """"""Call the given command(s).""""""\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(""unable to run %s"" % dispcmd)\n                print(e)\n            return None, None\n    else:\n        if verbose:\n            print(""unable to find command, tried %s"" % (commands,))\n        return None, None\n    stdout = p.communicate()[0].strip()\n    if sys.version_info[0] >= 3:\n        stdout = stdout.decode()\n    if p.returncode != 0:\n        if verbose:\n            print(""unable to run %s (error)"" % dispcmd)\n            print(""stdout was %s"" % stdout)\n        return None, p.returncode\n    return stdout, p.returncode\n\n\ndef versions_from_parentdir(parentdir_prefix, root, verbose):\n    """"""Try to determine the version from the parent directory name.\n\n    Source tarballs conventionally unpack into a directory that includes both\n    the project name and a version string. We will also support searching up\n    two directory levels for an appropriately named parent directory\n    """"""\n    rootdirs = []\n\n    for i in range(3):\n        dirname = os.path.basename(root)\n        if dirname.startswith(parentdir_prefix):\n            return {""version"": dirname[len(parentdir_prefix):],\n                    ""full-revisionid"": None,\n                    ""dirty"": False, ""error"": None, ""date"": None}\n        else:\n            rootdirs.append(root)\n            root = os.path.dirname(root)  # up a level\n\n    if verbose:\n        print(""Tried directories %s but none started with prefix %s"" %\n              (str(rootdirs), parentdir_prefix))\n    raise NotThisMethod(""rootdir doesn\'t start with parentdir_prefix"")\n\n\n@register_vcs_handler(""git"", ""get_keywords"")\ndef git_get_keywords(versionfile_abs):\n    """"""Extract version information from the given file.""""""\n    # the code embedded in _version.py can just fetch the value of these\n    # keywords. When used from setup.py, we don\'t want to import _version.py,\n    # so we do it with a regexp instead. This function is not used from\n    # _version.py.\n    keywords = {}\n    try:\n        f = open(versionfile_abs, ""r"")\n        for line in f.readlines():\n            if line.strip().startswith(""git_refnames =""):\n                mo = re.search(r\'=\\s*""(.*)""\', line)\n                if mo:\n                    keywords[""refnames""] = mo.group(1)\n            if line.strip().startswith(""git_full =""):\n                mo = re.search(r\'=\\s*""(.*)""\', line)\n                if mo:\n                    keywords[""full""] = mo.group(1)\n            if line.strip().startswith(""git_date =""):\n                mo = re.search(r\'=\\s*""(.*)""\', line)\n                if mo:\n                    keywords[""date""] = mo.group(1)\n        f.close()\n    except EnvironmentError:\n        pass\n    return keywords\n\n\n@register_vcs_handler(""git"", ""keywords"")\ndef git_versions_from_keywords(keywords, tag_prefix, verbose):\n    """"""Get version information from git keywords.""""""\n    if not keywords:\n        raise NotThisMethod(""no keywords at all, weird"")\n    date = keywords.get(""date"")\n    if date is not None:\n        # git-2.2.0 added ""%cI"", which expands to an ISO-8601 -compliant\n        # datestamp. However we prefer ""%ci"" (which expands to an ""ISO-8601\n        # -like"" string, which we must then edit to make compliant), because\n        # it\'s been around since git-1.5.3, and it\'s too difficult to\n        # discover which version we\'re using, or to work around using an\n        # older one.\n        date = date.strip().replace("" "", ""T"", 1).replace("" "", """", 1)\n    refnames = keywords[""refnames""].strip()\n    if refnames.startswith(""$Format""):\n        if verbose:\n            print(""keywords are unexpanded, not using"")\n        raise NotThisMethod(""unexpanded keywords, not a git-archive tarball"")\n    refs = set([r.strip() for r in refnames.strip(""()"").split("","")])\n    # starting in git-1.8.3, tags are listed as ""tag: foo-1.0"" instead of\n    # just ""foo-1.0"". If we see a ""tag: "" prefix, prefer those.\n    TAG = ""tag: ""\n    tags = set([r[len(TAG):] for r in refs if r.startswith(TAG)])\n    if not tags:\n        # Either we\'re using git < 1.8.3, or there really are no tags. We use\n        # a heuristic: assume all version tags have a digit. The old git %d\n        # expansion behaves like git log --decorate=short and strips out the\n        # refs/heads/ and refs/tags/ prefixes that would let us distinguish\n        # between branches and tags. By ignoring refnames without digits, we\n        # filter out many common branch names like ""release"" and\n        # ""stabilization"", as well as ""HEAD"" and ""master"".\n        tags = set([r for r in refs if re.search(r\'\\d\', r)])\n        if verbose:\n            print(""discarding \'%s\', no digits"" % "","".join(refs - tags))\n    if verbose:\n        print(""likely tags: %s"" % "","".join(sorted(tags)))\n    for ref in sorted(tags):\n        # sorting will prefer e.g. ""2.0"" over ""2.0rc1""\n        if ref.startswith(tag_prefix):\n            r = ref[len(tag_prefix):]\n            if verbose:\n                print(""picking %s"" % r)\n            return {""version"": r,\n                    ""full-revisionid"": keywords[""full""].strip(),\n                    ""dirty"": False, ""error"": None,\n                    ""date"": date}\n    # no suitable tags, so version is ""0+unknown"", but full hex is still there\n    if verbose:\n        print(""no suitable tags, using unknown + full revision id"")\n    return {""version"": ""0+unknown"",\n            ""full-revisionid"": keywords[""full""].strip(),\n            ""dirty"": False, ""error"": ""no suitable tags"", ""date"": None}\n\n\n@register_vcs_handler(""git"", ""pieces_from_vcs"")\ndef git_pieces_from_vcs(tag_prefix, root, verbose, run_command=run_command):\n    """"""Get version from \'git describe\' in the root of the source tree.\n\n    This only gets called if the git-archive \'subst\' keywords were *not*\n    expanded, and _version.py hasn\'t already been rewritten with a short\n    version string, meaning we\'re inside a checked out source tree.\n    """"""\n    GITS = [""git""]\n    if sys.platform == ""win32"":\n        GITS = [""git.cmd"", ""git.exe""]\n\n    out, rc = run_command(GITS, [""rev-parse"", ""--git-dir""], cwd=root,\n                          hide_stderr=True)\n    if rc != 0:\n        if verbose:\n            print(""Directory %s not under git control"" % root)\n        raise NotThisMethod(""\'git rev-parse --git-dir\' returned error"")\n\n    # if there is a tag matching tag_prefix, this yields TAG-NUM-gHEX[-dirty]\n    # if there isn\'t one, this yields HEX[-dirty] (no NUM)\n    describe_out, rc = run_command(GITS, [""describe"", ""--tags"", ""--dirty"",\n                                          ""--always"", ""--long"",\n                                          ""--match"", ""%s*"" % tag_prefix],\n                                   cwd=root)\n    # --long was added in git-1.5.5\n    if describe_out is None:\n        raise NotThisMethod(""\'git describe\' failed"")\n    describe_out = describe_out.strip()\n    full_out, rc = run_command(GITS, [""rev-parse"", ""HEAD""], cwd=root)\n    if full_out is None:\n        raise NotThisMethod(""\'git rev-parse\' failed"")\n    full_out = full_out.strip()\n\n    pieces = {}\n    pieces[""long""] = full_out\n    pieces[""short""] = full_out[:7]  # maybe improved later\n    pieces[""error""] = None\n\n    # parse describe_out. It will be like TAG-NUM-gHEX[-dirty] or HEX[-dirty]\n    # TAG might have hyphens.\n    git_describe = describe_out\n\n    # look for -dirty suffix\n    dirty = git_describe.endswith(""-dirty"")\n    pieces[""dirty""] = dirty\n    if dirty:\n        git_describe = git_describe[:git_describe.rindex(""-dirty"")]\n\n    # now we have TAG-NUM-gHEX or HEX\n\n    if ""-"" in git_describe:\n        # TAG-NUM-gHEX\n        mo = re.search(r\'^(.+)-(\\d+)-g([0-9a-f]+)$\', git_describe)\n        if not mo:\n            # unparseable. Maybe git-describe is misbehaving?\n            pieces[""error""] = (""unable to parse git-describe output: \'%s\'""\n                               % describe_out)\n            return pieces\n\n        # tag\n        full_tag = mo.group(1)\n        if not full_tag.startswith(tag_prefix):\n            if verbose:\n                fmt = ""tag \'%s\' doesn\'t start with prefix \'%s\'""\n                print(fmt % (full_tag, tag_prefix))\n            pieces[""error""] = (""tag \'%s\' doesn\'t start with prefix \'%s\'""\n                               % (full_tag, tag_prefix))\n            return pieces\n        pieces[""closest-tag""] = full_tag[len(tag_prefix):]\n\n        # distance: number of commits since tag\n        pieces[""distance""] = int(mo.group(2))\n\n        # commit: short hex revision ID\n        pieces[""short""] = mo.group(3)\n\n    else:\n        # HEX: no tags\n        pieces[""closest-tag""] = None\n        count_out, rc = run_command(GITS, [""rev-list"", ""HEAD"", ""--count""],\n                                    cwd=root)\n        pieces[""distance""] = int(count_out)  # total number of commits\n\n    # commit date: see ISO-8601 comment in git_versions_from_keywords()\n    date = run_command(GITS, [""show"", ""-s"", ""--format=%ci"", ""HEAD""],\n                       cwd=root)[0].strip()\n    pieces[""date""] = date.strip().replace("" "", ""T"", 1).replace("" "", """", 1)\n\n    return pieces\n\n\ndef plus_or_dot(pieces):\n    """"""Return a + if we don\'t already have one, else return a .""""""\n    if ""+"" in pieces.get(""closest-tag"", """"):\n        return "".""\n    return ""+""\n\n\ndef render_pep440(pieces):\n    """"""Build up version string, with post-release ""local version identifier"".\n\n    Our goal: TAG[+DISTANCE.gHEX[.dirty]] . Note that if you\n    get a tagged build and then dirty it, you\'ll get TAG+0.gHEX.dirty\n\n    Exceptions:\n    1: no tags. git_describe was just HEX. 0+untagged.DISTANCE.gHEX[.dirty]\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""] or pieces[""dirty""]:\n            rendered += plus_or_dot(pieces)\n            rendered += ""%d.g%s"" % (pieces[""distance""], pieces[""short""])\n            if pieces[""dirty""]:\n                rendered += "".dirty""\n    else:\n        # exception #1\n        rendered = ""0+untagged.%d.g%s"" % (pieces[""distance""],\n                                          pieces[""short""])\n        if pieces[""dirty""]:\n            rendered += "".dirty""\n    return rendered\n\n\ndef render_pep440_pre(pieces):\n    """"""TAG[.post.devDISTANCE] -- No -dirty.\n\n    Exceptions:\n    1: no tags. 0.post.devDISTANCE\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""]:\n            rendered += "".post.dev%d"" % pieces[""distance""]\n    else:\n        # exception #1\n        rendered = ""0.post.dev%d"" % pieces[""distance""]\n    return rendered\n\n\ndef render_pep440_post(pieces):\n    """"""TAG[.postDISTANCE[.dev0]+gHEX] .\n\n    The "".dev0"" means dirty. Note that .dev0 sorts backwards\n    (a dirty tree will appear ""older"" than the corresponding clean one),\n    but you shouldn\'t be releasing software with -dirty anyways.\n\n    Exceptions:\n    1: no tags. 0.postDISTANCE[.dev0]\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""] or pieces[""dirty""]:\n            rendered += "".post%d"" % pieces[""distance""]\n            if pieces[""dirty""]:\n                rendered += "".dev0""\n            rendered += plus_or_dot(pieces)\n            rendered += ""g%s"" % pieces[""short""]\n    else:\n        # exception #1\n        rendered = ""0.post%d"" % pieces[""distance""]\n        if pieces[""dirty""]:\n            rendered += "".dev0""\n        rendered += ""+g%s"" % pieces[""short""]\n    return rendered\n\n\ndef render_pep440_old(pieces):\n    """"""TAG[.postDISTANCE[.dev0]] .\n\n    The "".dev0"" means dirty.\n\n    Eexceptions:\n    1: no tags. 0.postDISTANCE[.dev0]\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""] or pieces[""dirty""]:\n            rendered += "".post%d"" % pieces[""distance""]\n            if pieces[""dirty""]:\n                rendered += "".dev0""\n    else:\n        # exception #1\n        rendered = ""0.post%d"" % pieces[""distance""]\n        if pieces[""dirty""]:\n            rendered += "".dev0""\n    return rendered\n\n\ndef render_git_describe(pieces):\n    """"""TAG[-DISTANCE-gHEX][-dirty].\n\n    Like \'git describe --tags --dirty --always\'.\n\n    Exceptions:\n    1: no tags. HEX[-dirty]  (note: no \'g\' prefix)\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""]:\n            rendered += ""-%d-g%s"" % (pieces[""distance""], pieces[""short""])\n    else:\n        # exception #1\n        rendered = pieces[""short""]\n    if pieces[""dirty""]:\n        rendered += ""-dirty""\n    return rendered\n\n\ndef render_git_describe_long(pieces):\n    """"""TAG-DISTANCE-gHEX[-dirty].\n\n    Like \'git describe --tags --dirty --always -long\'.\n    The distance/hash is unconditional.\n\n    Exceptions:\n    1: no tags. HEX[-dirty]  (note: no \'g\' prefix)\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        rendered += ""-%d-g%s"" % (pieces[""distance""], pieces[""short""])\n    else:\n        # exception #1\n        rendered = pieces[""short""]\n    if pieces[""dirty""]:\n        rendered += ""-dirty""\n    return rendered\n\n\ndef render(pieces, style):\n    """"""Render the given version pieces into the requested style.""""""\n    if pieces[""error""]:\n        return {""version"": ""unknown"",\n                ""full-revisionid"": pieces.get(""long""),\n                ""dirty"": None,\n                ""error"": pieces[""error""],\n                ""date"": None}\n\n    if not style or style == ""default"":\n        style = ""pep440""  # the default\n\n    if style == ""pep440"":\n        rendered = render_pep440(pieces)\n    elif style == ""pep440-pre"":\n        rendered = render_pep440_pre(pieces)\n    elif style == ""pep440-post"":\n        rendered = render_pep440_post(pieces)\n    elif style == ""pep440-old"":\n        rendered = render_pep440_old(pieces)\n    elif style == ""git-describe"":\n        rendered = render_git_describe(pieces)\n    elif style == ""git-describe-long"":\n        rendered = render_git_describe_long(pieces)\n    else:\n        raise ValueError(""unknown style \'%s\'"" % style)\n\n    return {""version"": rendered, ""full-revisionid"": pieces[""long""],\n            ""dirty"": pieces[""dirty""], ""error"": None,\n            ""date"": pieces.get(""date"")}\n\n\ndef get_versions():\n    """"""Get version information or return default if unable to do so.""""""\n    # I am in _version.py, which lives at ROOT/VERSIONFILE_SOURCE. If we have\n    # __file__, we can work backwards from there to the root. Some\n    # py2exe/bbfreeze/non-CPython implementations don\'t do __file__, in which\n    # case we can only use expanded keywords.\n\n    cfg = get_config()\n    verbose = cfg.verbose\n\n    try:\n        return git_versions_from_keywords(get_keywords(), cfg.tag_prefix,\n                                          verbose)\n    except NotThisMethod:\n        pass\n\n    try:\n        root = os.path.realpath(__file__)\n        # versionfile_source is the relative path from the top of the source\n        # tree (where the .git directory might live) to this file. Invert\n        # this to find the root from __file__.\n        for i in cfg.versionfile_source.split(\'/\'):\n            root = os.path.dirname(root)\n    except NameError:\n        return {""version"": ""0+unknown"", ""full-revisionid"": None,\n                ""dirty"": None,\n                ""error"": ""unable to find root of source tree"",\n                ""date"": None}\n\n    try:\n        pieces = git_pieces_from_vcs(cfg.tag_prefix, root, verbose)\n        return render(pieces, cfg.style)\n    except NotThisMethod:\n        pass\n\n    try:\n        if cfg.parentdir_prefix:\n            return versions_from_parentdir(cfg.parentdir_prefix, root, verbose)\n    except NotThisMethod:\n        pass\n\n    return {""version"": ""0+unknown"", ""full-revisionid"": None,\n            ""dirty"": None,\n            ""error"": ""unable to compute version"", ""date"": None}\n'"
scripts/traverse.py,0,"b'import os\nimport py_compile\nimport shutil\n\n# Set the directory you want to start from\nrootDir = "".""\nfor dirName, subdirList, fileList in os.walk(rootDir):\n    # print(\'Found directory: %s\' % dirName)\n    for fname in fileList:\n        if fname.endswith("".py""):\n            if dirName == ""."":\n                print(""%s"" % fname)\n            else:\n                print(""%s"" % (dirName + os.sep + fname))\n            a = py_compile.compile(\n                dirName + os.sep + fname, cfile=dirName + os.sep + fname + ""c""\n            )\n            os.remove(dirName + os.sep + fname)\n\nfor dirName, subdirList, fileList in os.walk(rootDir):\n    for dname in subdirList:\n        if dname == ""__pycache__"":\n            print(dirName + os.sep + dname)\n            shutil.rmtree(dirName + os.sep + dname)\n'"
tests/RepTate_SingleApp.py,2,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module Reptate\n\nMain program that launches the GUI.\n\n""""""\nimport os\nimport sys\nimport glob\nimport argparse\nimport traceback\nimport numpy as np\nimport logging\n\nsys.path.append(""."")\nfrom RepTate.core.CmdBase import CmdBase, CalcMode, CmdMode\nfrom RepTate.gui.QApplicationManager import QApplicationManager\nfrom RepTate.applications.ApplicationLVE import ApplicationLVE\nfrom PyQt5.QtWidgets import QApplication, QMessageBox\nfrom PyQt5.QtGui import QDesktopServices, QIcon\nfrom PyQt5.QtCore import QUrl, Qt, QCoreApplication\n\n\ndef get_argument_files(finlist):\n    """"""\n    Parse files from command line and group them by extension\n\n    :param list finlist: List of files from argparse\n    """"""\n    df = {}\n    if not finlist:\n        return df\n    full_paths = [os.path.join(os.getcwd(), path) for path in finlist]\n    for path in full_paths:\n        if os.path.isfile(path):\n            items = path.split(""."")\n            extension = items[len(items) - 1]\n            if extension in df.keys():\n                df[extension].append(path)\n            else:\n                df[extension] = [path]\n        else:\n            lll = glob.glob(path)\n            for f in lll:\n                items = f.split(""."")\n                extension = items[len(items) - 1]\n                if extension in df.keys():\n                    df[extension].append(f)\n                else:\n                    df[extension] = [f]\n    return df\n\n\ndef start_RepTate(argv):\n    """"""\n    Main RepTate application. \n    \n    :param list argv: Command line parameters passed to Reptate\n    """"""\n    GUI = True\n\n    parser = argparse.ArgumentParser(\n        description=""RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiment."",\n        epilog=""(c) Jorge Ramirez - jorge.ramirez@upm.es - UPM , Victor Boudara - U. Leeds (2018)"",\n    )\n    parser.add_argument(\n        ""-d"", ""--dpi"", help=""High DPI support on Windows"", action=""store_true""\n    )\n    parser.add_argument(\n        ""-s"",\n        ""--single"",\n        help=""Run Reptate as a single thread application"",\n        action=""store_true"",\n    )\n    parser.add_argument(\n        ""-v"", ""--verbose"", help=""Write debug information to stdout"", action=""store_true""\n    )\n    parser.add_argument(""finlist"", nargs=""*"")\n\n    args = parser.parse_args(args=argv)\n\n    # Get files from command line\n    dictfiles = get_argument_files(args.finlist)\n\n    if args.verbose:\n        loglevel = logging.DEBUG\n    else:\n        loglevel = logging.INFO\n\n    QApplication.setStyle(""Fusion"")  # comment that line for a native look\n    # for a list of available styles: ""from PyQt5.QtWidgets import QStyleFactory; print(QStyleFactory.keys())""\n\n    if args.dpi:\n        os.environ[""QT_AUTO_SCREEN_SCALE_FACTOR""] = ""1""\n        QCoreApplication.setAttribute(Qt.AA_EnableHighDpiScaling, True)\n        QApplication.setAttribute(Qt.AA_EnableHighDpiScaling, True)\n        QApplication.setAttribute(Qt.AA_UseHighDpiPixmaps, True)\n\n    app = QApplication(sys.argv)\n\n    CmdBase.mode = CmdMode.GUI\n    tmpex = QApplicationManager(loglevel=loglevel)\n    ex = ApplicationLVE(""LVE"", tmpex)\n    ex.setWindowIcon(QIcon(""gui/Images/new_icons/LVE.ico""))\n    ex.setWindowTitle(""PyQt5 simple window - pythonspot.com"")\n\n    # # Handle files & open apps accordingly\n    # CmdBase.calcmode = CalcMode.singlethread # avoid troubles when loading multiple apps/files/theories\n    # d = {ex.extension: ex.appname for ex in  list(ex.available_applications.values())}\n    # for k in dictfiles.keys():\n    # if k == \'rept\':\n    # ex.open_project(dictfiles[k][0])\n    # elif np.any([k == key for key in d.keys()]):\n    # # exact match\n    # ex.handle_new_app(d[k])\n    # appname=""%s%d""%(d[k],ex.application_counter)\n    # ex.applications[appname].new_tables_from_files(dictfiles[k])\n    # elif np.any([k in key for key in d.keys()]): # works with spaces in extensions\n    # for key in d.keys():\n    # if k in key:\n    # ex.handle_new_app(d[key])\n    # appname=""%s%d""%(d[key],ex.application_counter)\n    # ex.applications[appname].new_tables_from_files(dictfiles[k])\n    # break\n    # else:\n    # print(""File type %s cannot be opened""%k)\n    # # set the calmode back\n    if args.single:\n        CmdBase.calcmode = CalcMode.singlethread\n    else:\n        CmdBase.calcmode = CalcMode.multithread\n\n    def my_excepthook(type, value, tb):\n        """"""Catch exceptions and print error message. Open email client to report bug to devlopers""""""\n        tb_msg = """"\n        for e in traceback.format_tb(tb):\n            tb_msg += str(e)\n        tb_msg += ""%s: %s\\n"" % (type.__name__, str(value))\n        # print(tb_msg) # JR: Not needed anymore\n        l = logging.getLogger(""RepTate"")\n        if CmdBase.mode == CmdMode.GUI:\n            l.error(tb_msg.replace(""\\n"", ""<br>""))\n        else:\n            l.error(tb_msg)\n        msg = (\n            \'Sorry, something went wrong:\\n ""%s: %s"".\\nTry to save your work and quit RepTate.\\nDo you want to help RepTate developers by reporting this bug?\'\n            % (type.__name__, str(value))\n        )\n        ans = QMessageBox.critical(\n            ex, ""Critical Error"", msg, QMessageBox.Yes | QMessageBox.No\n        )\n        if ans == QMessageBox.Yes:\n            address = ""reptate.rheology@gmail.com""\n            subject = ""Something went wrong""\n            body = (\n                ""%s\\nIf you can, please describe below what you were doing with RepTate when the error happened (apps and theories or tools open if any) and send the message\\nPlease, do NOT include confidential information\\n%s\\nError Traceback:\\n %s""\n                % (""-"" * 60, ""-"" * 60 + ""\\n"" * 10 + ""-"" * 60, tb_msg)\n            )\n            QDesktopServices.openUrl(\n                QUrl(\n                    ""mailto:?to=%s&subject=%s&body=%s"" % (address, subject, body),\n                    QUrl.TolerantMode,\n                )\n            )\n\n    sys.excepthook = my_excepthook\n\n    ex.showMaximized()\n    sys.exit(app.exec_())\n\n\nif __name__ == ""__main__"":\n    start_RepTate(sys.argv[1:])\n'"
tests/RepTate_Test_BoB_polyconf.py,0,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module Reptate\n\nMain program that launches the GUI.\n\n""""""\nimport os\nimport sys\n\nsys.path.append(""."")\n\nfrom RepTate.core.CmdBase import CmdBase, CalcMode\nfrom RepTate.gui.QApplicationManager import QApplicationManager\n\n# from ApplicationManager import * #solved the issue with the matplot window not opening on Mac\nfrom PyQt5.QtWidgets import QApplication\nfrom time import time, sleep\nimport logging\n\n\ndef start_RepTate(argv):\n    """"""\n    Main RepTate application. \n    \n    :param list argv: Command line parameters passed to Reptate\n    """"""\n    loglevel = logging.DEBUG\n    GUI = True\n    QApplication.setStyle(""Fusion"")  # comment that line for a native look\n    # for a list of available styles: ""from PyQt5.QtWidgets import QStyleFactory; print(QStyleFactory.keys())""\n\n    # app = QApplication(sys.argv)\n\n    # FOR DEBUGGING PURPOSES: Set Single or MultiThread (default)\n    CmdBase.calcmode = CalcMode.singlethread\n\n    ex = QApplicationManager(loglevel=loglevel)\n    ex.setStyleSheet(""QTabBar::tab { color:black; height: 22px; }"")\n\n    ########################################################\n    # THE FOLLOWING LINES ARE FOR TESTING A PARTICULAR CASE\n    # Open a particular application\n    ex.handle_new_app(""React"")\n\n    #####################\n    # Open a Dataset\n    ex.applications[""React1""].new_tables_from_files(\n        [""data%sReact%sout1.reac"" % ((os.sep,) * 2),]\n    )\n    # Open a theory\n    ex.applications[""React1""].datasets[""Set1""].new_theory(""BOB Architecture"")\n\n    ex.show()\n\n    sys.exit(app.exec_())\n\n\nif __name__ == ""__main__"":\n    app = QApplication(sys.argv)\n    start_RepTate(sys.argv[1:])\n'"
tests/RepTate_Test_Gt.py,0,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module Reptate\n\nMain program that launches the GUI.\n\n""""""\nimport os\nimport sys\nimport getopt\n\nsys.path.append(""."")\nfrom RepTate.gui.QApplicationManager import QApplicationManager\n\n# from ApplicationManager import * #solved the issue with the matplot window not opening on Mac\nfrom PyQt5.QtWidgets import QApplication\nfrom time import time, sleep\nfrom RepTate.core.CmdBase import CmdBase, CalcMode\nimport logging\n\n\ndef start_RepTate(argv):\n    """"""\n    Main RepTate application. \n    \n    :param list argv: Command line parameters passed to Reptate\n    """"""\n    loglevel = logging.DEBUG\n    GUI = True\n    QApplication.setStyle(""Fusion"")  # comment that line for a native look\n    # for a list of available styles: ""from PyQt5.QtWidgets import QStyleFactory; print(QStyleFactory.keys())""\n\n    app = QApplication(sys.argv)\n\n    # FOR DEBUGGING PURPOSES: Set Single or MultiThread (default)\n    CmdBase.calcmode = CalcMode.singlethread\n\n    ex = QApplicationManager(loglevel=loglevel)\n    ex.setStyleSheet(""QTabBar::tab { color:black; height: 22px; }"")\n\n    ex.show()\n\n    ########################################################\n    # THE FOLLOWING LINES ARE FOR TESTING A PARTICULAR CASE\n    # Open a particular application\n    ex.handle_new_app(""Gt"")\n\n    #####################\n    # TEST MaxwellModesTime\n    # Open a Dataset\n    gt_dir = ""data%sGt%s"" % ((os.sep,) * 2)\n    ex.applications[""Gt1""].new_tables_from_files(\n        [gt_dir + ""C0224_NVT_450K_1atm.gt"",]\n    )\n    # Open a theory\n    ex.applications[""Gt1""].datasets[""Set1""].new_theory(""Maxwell Modes"")\n    # Minimize the theory\n    ex.applications[""Gt1""].datasets[""Set1""].handle_actionMinimize_Error()\n\n    ex.applications[""Gt1""].datasets[""Set1""].new_theory(""Rouse"")\n    # # Minimize the theory\n    ex.applications[""Gt1""].datasets[""Set1""].handle_actionMinimize_Error()\n\n    sys.exit(app.exec_())\n\n\nif __name__ == ""__main__"":\n    start_RepTate(sys.argv[1:])\n'"
tests/RepTate_Test_LVE.py,0,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module Reptate\n\nMain program that launches the GUI.\n\n""""""\nimport os\nimport sys\nimport logging\n\nsys.path.append(""."")\nfrom RepTate.gui.QApplicationManager import QApplicationManager\n\n# from ApplicationManager import * #solved the issue with the matplot window not opening on Mac\nfrom PyQt5.QtWidgets import QApplication\nfrom time import time, sleep\nfrom RepTate.core.CmdBase import CmdBase, CalcMode\n\n\ndef start_RepTate(argv):\n    """"""\n    Main RepTate application. \n    \n    :param list argv: Command line parameters passed to Reptate\n    """"""\n    loglevel = logging.DEBUG\n    GUI = True\n    QApplication.setStyle(""Fusion"")  # comment that line for a native look\n    # for a list of available styles: ""from PyQt5.QtWidgets import QStyleFactory; print(QStyleFactory.keys())""\n\n    app = QApplication(sys.argv)\n\n    # FOR DEBUGGING PURPOSES: Set Single or MultiThread (default)\n    CmdBase.calcmode = CalcMode.singlethread\n\n    ex = QApplicationManager(loglevel=loglevel)\n    ex.setStyleSheet(""QTabBar::tab { color:black; height: 22px; }"")\n\n    ex.show()\n\n    ########################################################\n    # THE FOLLOWING LINES ARE FOR TESTING A PARTICULAR CASE\n    # Open a particular application\n    ex.handle_new_app(""LVE"")\n\n    #####################\n    # TEST Likhtman-McLeish\n    # Open a Dataset\n    pi_dir = ""data%sPI_LINEAR%s"" % ((os.sep,) * 2)\n    ex.applications[""LVE1""].new_tables_from_files(\n        [\n            pi_dir + ""PI_13.5k_T-35.tts"",\n            pi_dir + ""PI_23.4k_T-35.tts"",\n            pi_dir + ""PI_33.6k_T-35.tts"",\n            pi_dir + ""PI_94.9k_T-35.tts"",\n            pi_dir + ""PI_225.9k_T-35.tts"",\n            pi_dir + ""PI_483.1k_T-35.tts"",\n            pi_dir + ""PI_634.5k_T-35.tts"",\n            pi_dir + ""PI_1131k_T-35.tts"",\n        ]\n    )\n    # Open a theory\n    ex.applications[""LVE1""].datasets[""Set1""].new_theory(""Likhtman-McLeish"")\n    # Minimize the theory\n    ex.applications[""LVE1""].datasets[""Set1""].handle_actionMinimize_Error()\n\n    # Open a theory\n    ex.applications[""LVE1""].datasets[""Set1""].new_theory(""Rouse"")\n    # Minimize the theory\n    ex.applications[""LVE1""].datasets[""Set1""].handle_actionMinimize_Error()\n\n    #####################\n    # TEST Carreau-Yasuda\n    # Open a Dataset\n    ex.handle_new_app(""LVE"")\n    ex.applications[""LVE2""].new_tables_from_files(\n        [pi_dir + ""PI_483.1k_T-35.tts"",]\n    )\n    # Switch the view\n    ex.applications[""LVE2""].view_switch(""logetastar"")\n    # Open a theory\n    ex.applications[""LVE2""].datasets[""Set1""].new_theory(""Carreau-Yasuda"")\n    # Minimize the theory\n    ex.applications[""LVE2""].datasets[""Set1""].handle_actionMinimize_Error()\n\n    # Open a theory\n    ex.applications[""LVE2""].datasets[""Set1""].new_theory(""Maxwell Modes"")\n    # Minimize the theory\n    ex.applications[""LVE2""].datasets[""Set1""].handle_actionMinimize_Error()\n\n    #####################\n    # TEST DTD\n    # Open a Dataset\n    ex.handle_new_app(""LVE"")\n    pi_dir = ""data%sPI_STAR%s"" % ((os.sep,) * 2)\n    ex.applications[""LVE3""].new_tables_from_files(\n        [pi_dir + ""S6Z8.1T40.tts"", pi_dir + ""S6Z12T40.tts"", pi_dir + ""S6Z16T40.tts"",]\n    )\n\n    ex.applications[""LVE3""].datasets[""Set1""].new_theory(""DTD Stars"")\n    ex.applications[""LVE3""].datasets[""Set1""].handle_actionMinimize_Error()\n\n    sys.exit(app.exec_())\n\n\nif __name__ == ""__main__"":\n    start_RepTate(sys.argv[1:])\n'"
tests/RepTate_Test_MWD.py,0,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module Reptate\n\nMain program that launches the GUI.\n\n""""""\nimport os\nimport sys\nimport getopt\n\nsys.path.append(""."")\nfrom RepTate.gui.QApplicationManager import QApplicationManager\n\n# from ApplicationManager import * #solved the issue with the matplot window not opening on Mac\nfrom PyQt5.QtWidgets import QApplication\nfrom time import time, sleep\nfrom RepTate.core.CmdBase import CmdBase, CalcMode\nimport logging\n\n\ndef start_RepTate(argv):\n    """"""\n    Main RepTate application. \n    \n    :param list argv: Command line parameters passed to Reptate\n    """"""\n    loglevel = logging.DEBUG\n    GUI = True\n    QApplication.setStyle(""Fusion"")  # comment that line for a native look\n    # for a list of available styles: ""from PyQt5.QtWidgets import QStyleFactory; print(QStyleFactory.keys())""\n\n    app = QApplication(sys.argv)\n\n    # FOR DEBUGGING PURPOSES: Set Single or MultiThread (default)\n    CmdBase.calcmode = CalcMode.singlethread\n\n    ex = QApplicationManager(loglevel=loglevel)\n    ex.setStyleSheet(""QTabBar::tab { color:black; height: 22px; }"")\n\n    ex.show()\n\n    ########################################################\n    # THE FOLLOWING LINES ARE FOR TESTING A PARTICULAR CASE\n    # Open a particular application\n    ex.handle_new_app(""MWD"")\n\n    #####################\n    # Open a Dataset\n    gt_dir = ""data%sMWD%s"" % ((os.sep,) * 2)\n    ex.applications[""MWD1""].new_tables_from_files(\n        [gt_dir + ""Munstedt_PSIII.gpc"",]\n    )\n    # Open a theory\n    ex.applications[""MWD1""].datasets[""Set1""].new_theory(""Discretize MWD"")\n    ex.applications[""MWD1""].datasets[""Set1""].new_theory(""LogNormal"")\n    ex.applications[""MWD1""].datasets[""Set1""].new_theory(""GEX"")\n\n    sys.exit(app.exec_())\n\n    ex.handle_new_app(""MWD"")\n\n    # THE TEST FAILS FOR THE CODE BELOW... STRANGE!\n    ex.applications[""MWD2""].new_tables_from_files(\n        [gt_dir + ""Munstedt_PSIV.gpc"",]\n    )\n    # Open a theory\n    ex.applications[""MWD2""].datasets[""Set1""].new_theory(""Discretize MWD"")\n    ex.applications[""MWD2""].datasets[""Set1""].new_theory(""LogNormal"")\n    ex.applications[""MWD2""].datasets[""Set1""].new_theory(""GEX"")\n\n    sys.exit(app.exec_())\n\n\nif __name__ == ""__main__"":\n    start_RepTate(sys.argv[1:])\n'"
tests/RepTate_Test_NLVE.py,0,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module Reptate\n\nMain program that launches the GUI.\n\n""""""\nimport os\nimport sys\nimport logging\nimport getopt\n\nsys.path.append(""."")\nfrom RepTate.gui.QApplicationManager import QApplicationManager\n\n# from ApplicationManager import * #solved the issue with the matplot window not opening on Mac\nfrom PyQt5.QtWidgets import QApplication\nfrom time import time, sleep\nfrom RepTate.core.CmdBase import CmdBase, CalcMode\n\n\ndef start_RepTate(argv):\n    """"""\n    Main RepTate application. \n    \n    :param list argv: Command line parameters passed to Reptate\n    """"""\n    loglevel = logging.DEBUG\n    GUI = True\n    QApplication.setStyle(""Fusion"")  # comment that line for a native look\n    # for a list of available styles: ""from PyQt5.QtWidgets import QStyleFactory; print(QStyleFactory.keys())""\n\n    app = QApplication(sys.argv)\n\n    # FOR DEBUGGING PURPOSES: Set Single or MultiThread (default)\n    CmdBase.calcmode = CalcMode.singlethread\n\n    ex = QApplicationManager(loglevel=loglevel)\n    ex.setStyleSheet(""QTabBar::tab { color:black; height: 22px; }"")\n\n    ex.show()\n\n    ########################################################\n    # THE FOLLOWING LINES ARE FOR TESTING A PARTICULAR CASE\n    # Open a particular application\n\n    ####################\n    # open linear rheology data to import the Maxwell modes\n    ex.handle_new_app(""LVE"")\n    dow_dir = ""data%sDOW%sLinear_Rheology_TTS%s"" % ((os.sep,) * 3)\n    ex.applications[""LVE1""].new_tables_from_files(\n        [dow_dir + ""DOWLDPEL150R_160C.tts"",]\n    )\n    ex.applications[""LVE1""].datasets[""Set1""].new_theory(""Maxwell Modes"")\n    ex.applications[""LVE1""].datasets[""Set1""].handle_actionMinimize_Error()\n\n    #####################\n    # TEST Rolie-Poly\n    # Open a Dataset\n\n    ex.handle_new_app(""NLVE"")\n\n    dow_dir = ""data%sDOW%sNon-Linear_Rheology%sStart-up_Shear%s"" % ((os.sep,) * 4)\n    ex.applications[""NLVE2""].new_tables_from_files(\n        [\n            dow_dir + ""My_dow150-160-1 shear.shear"",\n            dow_dir + ""My_dow150-160-01 shear.shear"",\n            dow_dir + ""My_dow150-160-001 shear.shear"",\n            dow_dir + ""My_dow150-160-3 shear.shear"",\n            dow_dir + ""My_dow150-160-03 shear.shear"",\n            dow_dir + ""My_dow150-160-003 shear.shear"",\n            dow_dir + ""My_dow150-160-0003 shear.shear"",\n        ]\n    )\n    # Open a theory\n    ex.applications[""NLVE2""].datasets[""Set1""].new_theory(""Rolie-Poly"")\n    # Minimize the theory\n    # Copy Maxwell Modes\n    ex.applications[""NLVE2""].datasets[""Set1""].theories[""RP1""].do_copy_modes(\n        ""LVE1.Set1.MM1""\n    )\n    ex.applications[""NLVE2""].datasets[""Set1""].handle_actionMinimize_Error()\n\n    #####################\n    # TEST Rolie-Poly uniaxial extension\n    # Open a Dataset\n    ex.handle_new_app(""NLVE"")\n    dow_dir = ""data%sDOW%sNon-Linear_Rheology%sStart-up_extension%s"" % ((os.sep,) * 4)\n    ex.applications[""NLVE3""].new_tables_from_files(\n        [\n            dow_dir + ""My_dow150-160-01.uext"",\n            dow_dir + ""My_dow150-160-001.uext"",\n            dow_dir + ""My_dow150-160-0001.uext"",\n            dow_dir + ""My_dow150-160-03.uext"",\n            dow_dir + ""My_dow150-160-003.uext"",\n            dow_dir + ""My_dow150-160-0003.uext"",\n        ]\n    )\n\n    # Open a theory\n    ex.applications[""NLVE3""].datasets[""Set1""].new_theory(""Rolie-Poly"")\n    # select uniaxial extension\n    ex.applications[""NLVE3""].datasets[""Set1""].theories[""RP1""].select_extensional_flow()\n    # Copy Maxwell Modes\n    ex.applications[""NLVE3""].datasets[""Set1""].theories[""RP1""].do_copy_modes(\n        ""LVE1.Set1.MM1""\n    )\n    # Minimize the theory\n    ex.applications[""NLVE3""].datasets[""Set1""].handle_actionMinimize_Error()\n\n    # Open a theory\n    ex.applications[""NLVE3""].datasets[""Set1""].new_theory(""Pom-Pom"")\n\n    sys.exit(app.exec_())\n\n\nif __name__ == ""__main__"":\n    start_RepTate(sys.argv[1:])\n'"
tests/RepTate_Test_NLVE_RDP.py,0,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module Reptate\n\nMain program that launches the GUI.\n\n""""""\nimport os\nimport sys\nimport getopt\n\nsys.path.append(""core"")\nsys.path.append(""gui"")\nsys.path.append(""console"")\nsys.path.append(""applications"")\nsys.path.append(""theories"")\nsys.path.append(""visual"")\nsys.path.append(""tools"")\nfrom QApplicationManager import QApplicationManager\n\n# from ApplicationManager import * #solved the issue with the matplot window not opening on Mac\nfrom PyQt5.QtWidgets import QApplication\nfrom SplashScreen import SplashScreen\nfrom time import time, sleep\nfrom CmdBase import CmdBase, CalcMode\nimport logging\n\n\ndef start_RepTate(argv):\n    """"""\n    Main RepTate application. \n    \n    :param list argv: Command line parameters passed to Reptate\n    """"""\n    loglevel = logging.DEBUG\n    GUI = True\n    QApplication.setStyle(""Fusion"")  # comment that line for a native look\n    # for a list of available styles: ""from PyQt5.QtWidgets import QStyleFactory; print(QStyleFactory.keys())""\n\n    app = QApplication(sys.argv)\n\n    # FOR DEBUGGING PURPOSES: Set Single or MultiThread (default)\n    CmdBase.calcmode = CalcMode.singlethread\n\n    ex = QApplicationManager(loglevel=loglevel)\n    ex.setStyleSheet(""QTabBar::tab { color:black; height: 22px; }"")\n\n    ex.show()\n\n    ########################################################\n    # THE FOLLOWING LINES ARE FOR TESTING A PARTICULAR CASE\n    # Open a particular application\n    ex.handle_new_app(""NLVE"")\n\n    #####################\n    # TEST Rolie-Poly\n    # Open a Dataset\n\n    dow_dir = ""data%sDOW%sNon-Linear_Rheology%sStart-up_Shear%s"" % ((os.sep,) * 4)\n    ex.applications[""NLVE1""].new_tables_from_files(\n        [\n            dow_dir + ""My_dow150-160-1 shear.shear"",\n            dow_dir + ""My_dow150-160-01 shear.shear"",\n            dow_dir + ""My_dow150-160-001 shear.shear"",\n            dow_dir + ""My_dow150-160-3 shear.shear"",\n            dow_dir + ""My_dow150-160-03 shear.shear"",\n            dow_dir + ""My_dow150-160-003 shear.shear"",\n            dow_dir + ""My_dow150-160-0003 shear.shear"",\n        ]\n    )\n    # Open a theory\n    ex.applications[""NLVE1""].datasets[""Set1""].new_theory(""Rolie-Double-Poly"")\n    # Minimize the theory\n    # ex.applications[""NLVE1""].datasets[""Set1""].handle_actionMinimize_Error()\n\n    ########################################################\n    # THE FOLLOWING LINES ARE FOR TESTING A PARTICULAR CASE\n    # Open a particular application\n    ex.handle_new_app(""NLVE"")\n\n    #####################\n    # TEST Rolie-Poly\n    # Open a Dataset\n\n    dow_dir = os.path.join(""data"", ""NLVE_Extension"", """")\n    ex.applications[""NLVE2""].new_tables_from_files(\n        [\n            dow_dir + ""Minegishi_spiked_PS_0_572.uext"",\n            dow_dir + ""Minegishi_spiked_PS_0_013.uext"",\n            dow_dir + ""Minegishi_spiked_PS_0_047.uext"",\n            dow_dir + ""Minegishi_spiked_PS_0_097.uext"",\n        ]\n    )\n    # Open a theory\n    ex.applications[""NLVE2""].datasets[""Set1""].new_theory(""Rolie-Double-Poly"")\n    # Minimize the theory\n    # ex.applications[""NLVE1""].datasets[""Set1""].handle_actionMinimize_Error()\n\n    sys.exit(app.exec_())\n\n    ####################\n    # open MWD import Mead gpc\n    ex.handle_new_app(""MWD"")\n    dir = os.path.join(""data"", ""MWD"", """")\n    ex.applications[""MWD3""].new_tables_from_files(\n        [dir + ""Munstedt_PSIV.gpc"",]\n    )\n    ex.applications[""MWD3""].datasets[""Set1""].new_theory(""Discretize MWD"")\n\n    # ####################\n    # #open linear rheology data to import the Maxwell modes\n    # ex.handle_new_app(\'NLVE\')\n    # dow_dir = ""data%sDOW%sLinear_Rheology_TTS%s"" % ((\n    #     os.sep, ) * 3)\n    # ex.applications[""LVE3""].new_tables_from_files([\n    #     dow_dir + ""DOWLDPEL150R_160C.tts"",\n    # ])\n    # ex.applications[""LVE3""].datasets[""Set1""].new_theory(""MaxwellModesFrequency"")\n    # ex.applications[""LVE3""].datasets[""Set1""].handle_actionMinimize_Error()\n\n    sys.exit(app.exec_())\n\n\nif __name__ == ""__main__"":\n    start_RepTate(sys.argv[1:])\n'"
tests/RepTate_Test_React.py,0,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module Reptate\n\nMain program that launches the GUI.\n\n""""""\nimport os\nimport sys\n\nsys.path.append(""."")\nfrom RepTate.core.CmdBase import CmdBase, CalcMode\nfrom RepTate.gui.QApplicationManager import QApplicationManager\n\n# from ApplicationManager import * #solved the issue with the matplot window not opening on Mac\nfrom PyQt5.QtWidgets import QApplication\nfrom time import time, sleep\nimport logging\n\n\ndef start_RepTate(argv):\n    """"""\n    Main RepTate application. \n    \n    :param list argv: Command line parameters passed to Reptate\n    """"""\n    loglevel = logging.DEBUG\n    GUI = True\n    QApplication.setStyle(""Fusion"")  # comment that line for a native look\n    # for a list of available styles: ""from PyQt5.QtWidgets import QStyleFactory; print(QStyleFactory.keys())""\n\n    # app = QApplication(sys.argv)\n\n    # FOR DEBUGGING PURPOSES: Set Single or MultiThread (default)\n    CmdBase.calcmode = CalcMode.singlethread\n\n    ex = QApplicationManager(loglevel=loglevel)\n    ex.setStyleSheet(""QTabBar::tab { color:black; height: 22px; }"")\n\n    ########################################################\n    # THE FOLLOWING LINES ARE FOR TESTING A PARTICULAR CASE\n    # Open a particular application\n    ex.handle_new_app(""React"")\n\n    #####################\n    # TEST Likhtman-McLeish\n    # Open a Dataset\n    ex.applications[""React1""].new_tables_from_files(\n        [""data%sReact%sout1.reac"" % ((os.sep,) * 2),]\n    )\n    # Open a theory\n    ex.applications[""React1""].datasets[""Set1""].new_theory(""Tobita CSTR"")\n    # Calculate the theory\n    # ex.applications[""React1""].datasets[""Set1""].handle_actionCalculate_Theory()\n\n    # Open a theory\n    sleep(1)\n    ex.applications[""React1""].datasets[""Set1""].new_theory(""Tobita Batch"")\n    # Calculate the theory\n    # ex.applications[""React1""].datasets[""Set1""].handle_actionCalculate_Theory()\n\n    # Open a theory\n    sleep(1)\n    ex.applications[""React1""].datasets[""Set1""].new_theory(""React Mix"")\n\n    # Open a theory\n    sleep(1)\n    ex.applications[""React1""].datasets[""Set1""].new_theory(""Multi-Met CSTR"")\n\n    ex.show()\n\n    sys.exit(app.exec_())\n\n\nif __name__ == ""__main__"":\n    app = QApplication(sys.argv)\n    start_RepTate(sys.argv[1:])\n'"
tests/RepTate_Test_TTS.py,0,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module Reptate\n\nMain program that launches the GUI.\n\n""""""\nimport os\nimport sys\n\nsys.path.append(""."")\nfrom RepTate.core.CmdBase import CmdBase, CalcMode\nfrom RepTate.gui.QApplicationManager import QApplicationManager\n\n# from ApplicationManager import * #solved the issue with the matplot window not opening on Mac\nfrom PyQt5.QtWidgets import QApplication\nfrom time import time, sleep\nimport logging\n\n\ndef start_RepTate(argv):\n    """"""\n    Main RepTate application. \n    \n    :param list argv: Command line parameters passed to Reptate\n    """"""\n    loglevel = logging.DEBUG\n    GUI = True\n    QApplication.setStyle(""Fusion"")  # comment that line for a native look\n    # for a list of available styles: ""from PyQt5.QtWidgets import QStyleFactory; print(QStyleFactory.keys())""\n\n    app = QApplication(sys.argv)\n\n    # FOR DEBUGGING PURPOSES: Set Single or MultiThread (default)\n    CmdBase.calcmode = CalcMode.singlethread\n\n    ex = QApplicationManager(loglevel=loglevel)\n    ex.setStyleSheet(""QTabBar::tab { color:black; height: 22px; }"")\n\n    ex.show()\n\n    ########################################################\n    # THE FOLLOWING LINES ARE FOR TESTING A PARTICULAR CASE\n    # Open a particular application\n    ex.handle_new_app(""TTS"")\n\n    # Open a Dataset\n    pi_dir = ""data%sPI_LINEAR%sosc%s"" % ((os.sep,) * 3)\n    ex.applications[""TTS1""].new_tables_from_files(\n        [\n            pi_dir + ""PI223k-14c_-45C_FS2_PP10.osc"",\n            pi_dir + ""PI223k-14c_-40C_FS_PP10.osc"",\n            pi_dir + ""PI223k-14c_-30C_FS_PP10.osc"",\n            pi_dir + ""PI223k-14_-10C_FS_PP10.osc"",\n            pi_dir + ""PI223k-14c_-20C_FS_PP10.osc"",\n            pi_dir + ""PI223k-14b_0C_FS4_PP10.osc"",\n            pi_dir + ""PI223k-14_10C_FS_PP10.osc"",\n            pi_dir + ""PI223k-14b_25C_FS3_PP10.osc"",\n            pi_dir + ""PI223k-14_25C_FS3_PP10.osc"",\n            pi_dir + ""PI223k-14c_30C_FS3_PP10.osc"",\n            pi_dir + ""PI223k-14_40C_FS_PP10.osc"",\n            pi_dir + ""PI223k-14_50C_FS_PP10.osc"",\n        ]\n    )\n\n    # Open a theory\n    ex.applications[""TTS1""].datasets[""Set1""].new_theory(""Automatic TTS Shift"")\n    # Minimize the theory\n    ex.applications[""TTS1""].datasets[""Set1""].handle_actionMinimize_Error()\n    # Open a theory\n    ex.applications[""TTS1""].datasets[""Set1""].new_theory(""WLF Shift"")\n    # Minimize the theory\n    ex.applications[""TTS1""].datasets[""Set1""].handle_actionMinimize_Error()\n\n    sys.exit(app.exec_())\n\n\nif __name__ == ""__main__"":\n    start_RepTate(sys.argv[1:])\n'"
RepTate/applications/ApplicationCreep.py,45,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module ApplicationCreep\n\nModule for the analysis of data from Creep experiments\n\n""""""\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Application import Application\nfrom RepTate.gui.QApplicationWindow import QApplicationWindow\nfrom RepTate.core.View import View\nfrom RepTate.core.FileType import TXTColumnFile\nimport numpy as np\nfrom scipy import interpolate\n\nfrom PyQt5.QtWidgets import (\n    QSpinBox,\n    QPushButton,\n    QHBoxLayout,\n    QLineEdit,\n    QLabel,\n    QSizePolicy,\n)\nfrom PyQt5.QtGui import QDoubleValidator\nfrom math import log10\n\n\nclass ApplicationCreep(CmdBase):\n    """"""Application to Analyze Data from Creep experiments""""""\n\n    appname = ""Creep""\n    description = ""Creep Experiments""\n    extension = ""creep""\n\n    def __new__(cls, name=""Creep"", parent=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUIApplicationCreep(name, parent)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLApplicationCreep(name, parent)\n        )\n\n\nclass BaseApplicationCreep:\n    """"""Base Class for both GUI and CL""""""\n\n    html_help_file = (\n        ""http://reptate.readthedocs.io/manual/Applications/Creep/Creep.html""\n    )\n    appname = ApplicationCreep.appname\n\n    def __init__(self, name=""Creep"", parent=None):\n        """"""**Constructor**""""""\n        from RepTate.theories.TheoryRetardationModes import TheoryRetardationModesTime\n\n        super().__init__(name, parent)\n\n        # time range for view conversion to frequency domain\n        self.eta = 10000\n        self.tmin_view = -np.inf\n        self.tmax_view = np.inf\n\n        # VIEWS\n        self.views[""log(gamma(t))""] = View(\n            name=""log(gamma(t))"",\n            description=""log strain"",\n            x_label=""log(t)"",\n            y_label=""log($\\gamma$)"",\n            x_units=""s"",\n            y_units=""-"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewLogStraint,\n            n=1,\n            snames=[""log(gamma)""],\n        )\n        self.views[""gamma(t)""] = View(\n            name=""gamma(t)"",\n            description=""strain"",\n            x_label=""t"",\n            y_label=""$\\gamma$"",\n            x_units=""s"",\n            y_units=""-"",\n            log_x=True,\n            log_y=True,\n            view_proc=self.viewStraint,\n            n=1,\n            snames=[""gamma""],\n        )\n        self.views[""log(J(t))""] = View(\n            name=""log(J(t))"",\n            description=""creep compliance"",\n            x_label=""log(t)"",\n            y_label=""log(J)"",\n            x_units=""s"",\n            y_units=""$\\mathrm{Pa}^{-1}$"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewLogJt,\n            n=1,\n            snames=[""log(J)""],\n        )\n        self.views[""J(t)""] = View(\n            name=""J(t)"",\n            description=""creep compliance"",\n            x_label=""t"",\n            y_label=""J"",\n            x_units=""s"",\n            y_units=""$\\mathrm{Pa}^{-1}$"",\n            log_x=True,\n            log_y=True,\n            view_proc=self.viewJt,\n            n=1,\n            snames=[""J""],\n        )\n        self.views[""t/J(t)""] = View(\n            name=""t/J(t)"",\n            description=""t/creep compliance"",\n            x_label=""t"",\n            y_label=""t/J"",\n            x_units=""s"",\n            y_units=""Pa.s"",\n            log_x=True,\n            log_y=True,\n            view_proc=self.viewt_Jt,\n            n=1,\n            snames=[""t/J""],\n        )\n        self.views[""i-Rheo G\',G\'\'""] = View(\n            name=""i-Rheo G\',G\'\'"",\n            description=""G\', G\'\' from i-Rheo transformation of J(t)"",\n            x_label=""$\\omega$"",\n            y_label=""G\',G\'\'"",\n            x_units=""rad/s"",\n            y_units=""Pa"",\n            log_x=True,\n            log_y=True,\n            view_proc=self.viewiRheo,\n            n=2,\n            snames=[""G\'"", ""G\'\'""],\n        )\n        self.views[""i-Rheo-Over G\',G\'\'""] = View(\n            name=""i-Rheo-Over G\',G\'\'"",\n            description=""G\', G\'\' from i-Rheo transformation of J(t) with Oversampling"",\n            x_label=""$\\omega$"",\n            y_label=""G\',G\'\'"",\n            x_units=""rad/s"",\n            y_units=""Pa"",\n            log_x=True,\n            log_y=True,\n            view_proc=self.viewiRheoOver,\n            n=2,\n            snames=[""G\'"", ""G\'\'""],\n        )\n        self.OVER = 100  # initial oversampling\n        self.MIN_OVER = 1  # min oversampling\n        self.MAX_OVER = 10000  # max oversampling\n\n        # set multiviews\n        self.nplots = 1\n        self.multiviews = []\n        for i in range(self.nplot_max):\n            # set views in the same order as declared above\n            self.multiviews.append(list(self.views.values())[i])\n        self.multiplots.reorg_fig(self.nplots)\n\n        # FILES\n        ftype = TXTColumnFile(\n            ""Creep files"",\n            ""creep"",\n            ""Creep files"",\n            [""t"", ""strain""],\n            [""stress"", ""Mw"", ""T""],\n            [""s"", ""-"", ""Pa"", ""C""],\n        )\n        self.filetypes[ftype.extension] = ftype\n\n        # THEORIES\n        self.theories[TheoryRetardationModesTime.thname] = TheoryRetardationModesTime\n        self.add_common_theories()\n\n        # set the current view\n        self.set_views()\n\n    def viewLogStraint(self, dt, file_parameters):\n        """"""Logarithm of the applied strain :math:`\\\\gamma(t)` vs logarithm of time :math:`t`""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = np.log10(dt.data[:, 0])\n        y[:, 0] = np.log10(np.abs(dt.data[:, 1]))\n        return x, y, True\n\n    def viewStraint(self, dt, file_parameters):\n        """"""Applied strain :math:`\\\\gamma(t)` vs time :math:`t` (both axes in logarithmic scale)""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 1]\n        return x, y, True\n\n    def viewLogJt(self, dt, file_parameters):\n        """"""Logarithm of the compliance :math:`J(t)=\\\\gamma(t)/\\\\sigma_0` (where :math:`\\\\sigma_0` is the applied stress in the creep experiment) vs logarithm of time :math:`t`""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        sigma = float(file_parameters[""stress""])\n        x[:, 0] = np.log10(dt.data[:, 0])\n        y[:, 0] = np.log10(np.abs(dt.data[:, 1]) / sigma)\n        return x, y, True\n\n    def viewJt(self, dt, file_parameters):\n        """"""Compliance :math:`J(t)=\\\\gamma(t)/\\\\sigma_0` (where :math:`\\\\sigma_0` is the applied stress in the creep experiment) vs time :math:`t` (both axes in logarithmic scale)""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        sigma = float(file_parameters[""stress""])\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 1] / sigma\n        return x, y, True\n\n    def viewt_Jt(self, dt, file_parameters):\n        """"""Time divided by compliance :math:`t/J(t)` vs time :math:`t` (both axes in logarithmic scale)""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        sigma = float(file_parameters[""stress""])\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 0] / dt.data[:, 1] * sigma\n        return x, y, True\n\n    def viewiRheo(self, dt, file_parameters):\n        """"""i-Rheo Fourier transformation of the compliance :math:`J(t)` to obtain the storage modulus :math:`G\'(\\\\omega)` and loss modulus :math:`G\'\'(\\\\omega)` (no oversamplig).""""""\n        data_x, data_y = self.get_xy_data_in_xrange(dt)\n        xunique, indunique = np.unique(data_x, return_index=True)\n        n = len(xunique)\n        sigma = float(file_parameters[""stress""])\n        yunique = data_y[indunique] / sigma\n        t = xunique\n        j = yunique\n        x = np.zeros((n, 2))\n        y = np.zeros((n, 2))\n\n        f = interpolate.interp1d(\n            t, j, kind=""cubic"", assume_sorted=True, fill_value=""extrapolate""\n        )\n        j0 = f([0])[0]\n        ind1 = np.argmax(t > 0)\n        t1 = t[ind1]\n        j1 = j[ind1]\n        tN = np.max(t)\n        w = np.logspace(log10(1 / tN), log10(1 / t1), n)\n        x[:, 0] = w[:]\n        x[:, 1] = w[:]\n\n        aux = (\n            1j * w * j0\n            + (1 - np.exp(-1j * w * t1)) * (j1 - j0) / t1\n            + np.exp(-1j * w * tN) / self.eta\n        )\n        for i in range(ind1 + 1, n):\n            aux += (\n                (np.exp(-1j * w * t[i - 1]) - np.exp(-1j * w * t[i]))\n                * (j[i] - j[i - 1])\n                / (t[i] - t[i - 1])\n            )\n        Gstar = 1j * w / aux\n\n        y[:, 0] = Gstar.real\n        y[:, 1] = Gstar.imag\n\n        return x, y, True\n\n    def viewiRheoOver(self, dt, file_parameters):\n        """"""i-Rheo Fourier transformation of the compliance :math:`J(t)` to obtain the storage modulus :math:`G\'(\\\\omega)` and loss modulus :math:`G\'\'(\\\\omega)` (with user selected oversamplig).""""""\n        data_x, data_y = self.get_xy_data_in_xrange(dt)\n        xunique, indunique = np.unique(data_x, return_index=True)\n        n = len(xunique)\n        sigma = float(file_parameters[""stress""])\n        yunique = data_y[indunique] / sigma\n        t = xunique\n        j = yunique\n        x = np.zeros((n, 2))\n        y = np.zeros((n, 2))\n\n        f = interpolate.interp1d(\n            t, j, kind=""cubic"", assume_sorted=True, fill_value=""extrapolate""\n        )\n        j0 = f([0])[0]\n        ind1 = np.argmax(t > 0)\n        t1 = t[ind1]\n        j1 = j[ind1]\n        tN = np.max(t)\n        w = np.logspace(np.log10(1 / tN), np.log10(1 / t1), n)\n        x[:, 0] = w[:]\n        x[:, 1] = w[:]\n\n        # Create oversampled data\n        tover = np.zeros(1)\n        tover[0] = t[ind1]\n        for i in range(ind1 + 1, n):\n            tmp = np.logspace(log10(t[i - 1]), log10(t[i]), self.OVER + 1)\n            tover = np.append(tover, tmp[1:])\n        jover = f(tover)\n        nover = len(tover)\n\n        aux = (\n            1j * w * j0\n            + (1 - np.exp(-1j * w * t1)) * (j1 - j0) / t1\n            + np.exp(-1j * w * tN) / self.eta\n        )\n        for i in range(1, nover):\n            aux += (\n                (np.exp(-1j * w * tover[i - 1]) - np.exp(-1j * w * tover[i]))\n                * (jover[i] - jover[i - 1])\n                / (tover[i] - tover[i - 1])\n            )\n        Gstar = 1j * w / aux\n\n        y[:, 0] = Gstar.real\n        y[:, 1] = Gstar.imag\n\n        return x, y, True\n\n    def get_xy_data_in_xrange(self, dt):\n        """"""Return the x and y data that with t in [self.tmin_view, self.tmax_view]""""""\n        # get indices of data in xrange\n        args = np.where(\n            np.logical_and(\n                dt.data[:, 0] >= self.tmin_view, dt.data[:, 0] <= self.tmax_view\n            )\n        )\n        x_in_range = dt.data[:, 0][args]\n        y_in_range = dt.data[:, 1][args]\n        return x_in_range, y_in_range\n\n\nclass CLApplicationCreep(BaseApplicationCreep, Application):\n    """"""CL Version""""""\n\n    def __init__(self, name=""Creep"", parent=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent)\n\n    def show_sb_oversampling(self):\n        pass\n\n    def hide_sb_oversampling(self):\n        pass\n\n\nclass GUIApplicationCreep(BaseApplicationCreep, QApplicationWindow):\n    """"""GUI Version""""""\n\n    def __init__(self, name=""Creep"", parent=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent)\n\n        self.add_oversampling_widget()\n        self.set_oversampling_widget_visible(False)\n\n        self.add_xrange_widget_view()\n        self.set_xrange_widgets_view_visible(False)\n\n    def add_oversampling_widget(self):\n        """"""Add spinbox for the oversampling ratio""""""\n        self.sb_oversampling = QSpinBox()\n        self.sb_oversampling.setRange(self.MIN_OVER, self.MAX_OVER)\n        self.sb_oversampling.setValue(self.OVER)\n        self.sb_oversampling.valueChanged.connect(self.change_oversampling)\n\n        self.viewLayout.insertWidget(2, self.sb_oversampling)\n\n    def add_xrange_widget_view(self):\n        """"""Add widgets below the view combobox to select the\n        x-range applied to view transformation""""""\n        hlayout = QHBoxLayout()\n\n        hlayout.addStretch()\n        # eta\n        self.eta_view = QLineEdit(""4"")\n        self.eta_view.textChanged.connect(self.change_eta)\n        self.eta_view.setValidator(QDoubleValidator())\n        self.eta_view.setMaximumWidth(35)\n        self.eta_view.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Maximum)\n        self.eta_label = QLabel(""<b>log(eta)</b>"")\n        hlayout.addWidget(self.eta_label)\n        hlayout.addWidget(self.eta_view)\n        # space\n        hlayout.addSpacing(5)\n        # xmin\n        self.xmin_view = QLineEdit(""-inf"")\n        self.xmin_view.textChanged.connect(self.change_xmin)\n        self.xmin_view.setValidator(QDoubleValidator())\n        self.xmin_view.setMaximumWidth(35)\n        self.xmin_view.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Maximum)\n        self.xmin_label = QLabel(""<b>log(t<sub>min</sub>)</b>"")\n        hlayout.addWidget(self.xmin_label)\n        hlayout.addWidget(self.xmin_view)\n        # space\n        hlayout.addSpacing(5)\n        # xmax\n        self.xmax_view = QLineEdit(""inf"")\n        self.xmax_view.textChanged.connect(self.change_xmax)\n        self.xmax_view.setValidator(QDoubleValidator())\n        self.xmax_view.setMaximumWidth(35)\n        self.xmax_view.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Maximum)\n        self.xmax_label = QLabel("" <b>log(t<sub>max</sub>)</b>"")\n        hlayout.addWidget(self.xmax_label)\n        hlayout.addWidget(self.xmax_view)\n        # push button to refresh view\n        self.pb = QPushButton(""GO"")\n        self.pb.setMaximumWidth(25)\n        self.pb.clicked.connect(self.update_all_ds_plots)\n        hlayout.addWidget(self.pb)\n        self.hlayout_view = hlayout\n        self.ViewDataTheoryLayout.insertLayout(1, self.hlayout_view)\n\n    def change_eta(self, text):\n        """"""Update the value of eta""""""\n        if text in ""-np.inf -inf"":\n            self.eta = -np.inf\n        else:\n            try:\n                self.eta = 10 ** float(text)\n            except:\n                pass\n\n    def change_xmin(self, text):\n        """"""Update the value of t_min""""""\n        if text in ""-np.inf -inf"":\n            self.tmin_view = -np.inf\n        else:\n            try:\n                self.tmin_view = 10 ** float(text)\n            except:\n                pass\n\n    def change_xmax(self, text):\n        """"""Update the value of t_max""""""\n        if text in ""np.inf inf"":\n            self.tmax_view = np.inf\n        else:\n            try:\n                self.tmax_view = 10 ** float(text)\n            except:\n                pass\n\n    def change_oversampling(self, val):\n        """"""Change the value of the oversampling ratio.\n        Called when the spinbox value is changed""""""\n        self.OVER = val\n\n    def set_oversampling_widget_visible(self, state):\n        """"""Show/Hide the extra widget ""sampling ratio"" """"""\n        self.sb_oversampling.setVisible(state)\n\n    def set_xrange_widgets_view_visible(self, state):\n        """"""Show/Hide the extra widgets for xrange selection""""""\n        self.pb.setVisible(state)\n        self.xmin_label.setVisible(state)\n        self.eta_label.setVisible(state)\n        self.xmax_label.setVisible(state)\n        self.eta_view.setVisible(state)\n        self.xmin_view.setVisible(state)\n        self.xmax_view.setVisible(state)\n\n    def set_view_tools(self, view_name):\n        """"""Show/Hide extra view widgets depending on the current view""""""\n        if view_name in [""i-Rheo G\',G\'\'"", ""Schwarzl G\',G\'\'""]:\n            self.set_xrange_widgets_view_visible(True)\n            self.set_oversampling_widget_visible(False)\n        elif view_name == ""i-Rheo-Over G\',G\'\'"":\n            self.set_xrange_widgets_view_visible(True)\n            self.set_oversampling_widget_visible(True)\n        else:\n            try:\n                self.set_xrange_widgets_view_visible(False)\n                self.set_oversampling_widget_visible(False)\n            except AttributeError:\n                pass\n'"
RepTate/applications/ApplicationCrystal.py,28,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module ApplicationCrystal\n\nModule for handling data from start up of shear and extensional flow experiments with flow induced crystallisation.\n\n""""""\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Application import Application\nfrom RepTate.gui.QApplicationWindow import QApplicationWindow\nfrom RepTate.core.View import View\nfrom RepTate.core.FileType import TXTColumnFile\nimport numpy as np\n\n\nclass ApplicationCrystal(CmdBase):\n    """"""Module for handling data from start up of shear and extensional flow experiments with flow induced crystallisation.""""""\n\n    appname = ""Crystal""\n    description = ""Flow induced Crystallisation""\n    extension = ""shearxs uextxs shear uext""\n\n    def __new__(cls, name=""Crystal"", parent=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUIApplicationCrystal(name, parent)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLApplicationCrystal(name, parent)\n        )\n\n\nclass BaseApplicationCrystal:\n    """"""Base Class for both GUI and CL""""""\n\n    html_help_file = (\n        ""http://reptate.readthedocs.io/manual/Applications/Crystal/Crystal.html""\n    )\n    appname = ApplicationCrystal.appname\n\n    def __init__(self, name=""Crystal"", parent=None):\n        """"""**Constructor**""""""\n        from RepTate.theories.TheoryGoPolyStrand import TheoryGoPolyStrand\n        from RepTate.theories.TheorySmoothPolyStrand import TheorySmoothPolyStrand\n\n        super().__init__(name, parent)\n\n        # VIEWS\n        self.views[""log(eta(t))""] = View(\n            name=""log(eta(t))"",\n            description=""log transient viscosity"",\n            x_label=""log(t)"",\n            y_label=""log($\\eta^+$)"",\n            x_units=""s"",\n            y_units=""Pa$\\cdot$s"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewLogeta,\n            n=1,\n            snames=[""log(eta)""],\n        )\n        self.views[""Ndot(t) [log-log]""] = View(\n            name=""Ndot(t) [log-log]"",\n            description=""Nucleation rate (log-log)"",\n            x_label=""t"",\n            y_label=""$\\dot{N}$"",\n            x_units=""s"",\n            y_units=""s$^{-1}$m$^{-3}$"",\n            log_x=True,\n            log_y=True,\n            view_proc=self.viewNdot,\n            n=1,\n            snames=[""Ndot""],\n        )\n        self.views[""N(t) [log-log]""] = View(\n            name=""N(t) [log-log]"",\n            description=""Nucleation density (log-log)"",\n            x_label=""t"",\n            y_label=""N"",\n            x_units=""s"",\n            y_units=""m$^{-3}$"",\n            log_x=True,\n            log_y=True,\n            view_proc=self.viewNt,\n            n=1,\n            snames=[""N""],\n        )\n        self.views[""phiX(t) [log-log]""] = View(\n            name=""phiX(t) [log-log]"",\n            description=""Crystal fraction (log-log)"",\n            x_label=""t"",\n            y_label=""$\\phi_X$"",\n            x_units=""s"",\n            y_units=""-"",\n            log_x=True,\n            log_y=True,\n            view_proc=self.viewphiX,\n            n=1,\n            snames=[""phiX""],\n        )\n        self.views[""Ndot(t) [log-lin]""] = View(\n            name=""Ndot(t) [log-lin]"",\n            description=""Nucleation rate (log-lin)"",\n            x_label=""t"",\n            y_label=""$\\dot{N}$"",\n            x_units=""s"",\n            y_units=""s$^{-1}$m$^{-3}$"",\n            log_x=True,\n            log_y=False,\n            view_proc=self.viewNdot,\n            n=1,\n            snames=[""Ndot""],\n        )\n        self.views[""N(t) [log-lin]""] = View(\n            name=""N(t) [log-lin]"",\n            description=""Nucleation density (log-lin)"",\n            x_label=""t"",\n            y_label=""N"",\n            x_units=""s"",\n            y_units=""m$^{-3}$"",\n            log_x=True,\n            log_y=False,\n            view_proc=self.viewNt,\n            n=1,\n            snames=[""N""],\n        )\n        self.views[""phiX(t) [log-lin]""] = View(\n            name=""phiX(t) [log-lin]"",\n            description=""Crystal fraction (log-lin)"",\n            x_label=""t"",\n            y_label=""$\\phi_X$"",\n            x_units=""s"",\n            y_units=""-"",\n            log_x=True,\n            log_y=False,\n            view_proc=self.viewphiX,\n            n=1,\n            snames=[""phiX""],\n        )\n        self.views[""eta(t)""] = View(\n            name=""eta(t)"",\n            description=""transient viscosity"",\n            x_label=""t"",\n            y_label=""$\\eta^+$"",\n            x_units=""s"",\n            y_units=""Pa$\\cdot$s"",\n            log_x=True,\n            log_y=True,\n            view_proc=self.vieweta,\n            n=1,\n            snames=[""eta""],\n        )\n        self.views[""log(sigma(gamma))""] = View(\n            name=""log(sigma(gamma))"",\n            description=""log transient shear stress vs gamma"",\n            x_label=""log($\\gamma$)"",\n            y_label=""log($\\sigma^+$)"",\n            x_units=""-"",\n            y_units=""Pa"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewLogSigmaGamma,\n            n=1,\n            snames=[""log(sigma)""],\n        )\n        self.views[""sigma(gamma)""] = View(\n            name=""sigma(gamma)"",\n            description=""transient shear stress vs gamma"",\n            x_label=""$\\gamma$"",\n            y_label=""$\\sigma^+$"",\n            x_units=""-"",\n            y_units=""Pa"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewSigmaGamma,\n            n=1,\n            snames=[""sigma""],\n        )\n        self.views[""log(sigma(t))""] = View(\n            name=""log(sigma(t))"",\n            description=""log transient shear stress vs time"",\n            x_label=""log(t)"",\n            y_label=""log($\\sigma^+$)"",\n            x_units=""s"",\n            y_units=""Pa"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewLogSigmaTime,\n            n=1,\n            snames=[""log(sigma)""],\n        )\n        self.views[""sigma(t)""] = View(\n            name=""sigma(t)"",\n            description=""transient shear stress vs time"",\n            x_label=""t"",\n            y_label=""$\\sigma^+$"",\n            x_units=""s"",\n            y_units=""Pa"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewSigmaTime,\n            n=1,\n            snames=[""sigma""],\n        )\n        self.views[""sigma(t) [log-lin]""] = View(\n            name=""sigma(t) [log-lin]"",\n            description=""transient shear stress vs time (log-lin)"",\n            x_label=""t"",\n            y_label=""$\\sigma^+$"",\n            x_units=""s"",\n            y_units=""Pa"",\n            log_x=True,\n            log_y=False,\n            view_proc=self.viewSigmaTime,\n            n=1,\n            snames=[""sigma""],\n        )\n        self.views[""Flow Curve""] = View(\n            name=""Flow Curve"",\n            description=""Steady state stress vs flow rate"",\n            x_label=""Flow rate"",\n            y_label=""$\\sigma$"",\n            x_units=""s$^{-1}$"",\n            y_units=""Pa"",\n            log_x=True,\n            log_y=True,\n            view_proc=self.view_flowcurve,\n            n=1,\n            snames=[""sigma""],\n            with_thline=False,\n            filled=True,\n        )\n        self.views[""Steady Nucleation""] = View(\n            name=""Steady Nucleation"",\n            description=""Steady state nucleation rate vs flow rate"",\n            x_label=""Flow rate"",\n            y_label=""$\\dot{N}$"",\n            x_units=""s$^{-1}$"",\n            y_units=""s$^{-1}$m$^{-3}$"",\n            log_x=True,\n            log_y=True,\n            view_proc=self.view_steadyNuc,\n            n=1,\n            snames=[""Ndot""],\n            with_thline=False,\n            filled=True,\n        )\n\n        # set multiviews\n        self.nplots = 4\n        self.multiviews = []\n        for i in range(self.nplot_max):\n            # set views in the same order as declared above\n            self.multiviews.append(list(self.views.values())[i])\n        self.multiplots.reorg_fig(self.nplots)\n\n        # FILES\n        ftype = TXTColumnFile(\n            ""Start-up of shear flow with crystallisation"",\n            ""shearxs"",\n            ""Shear crystallisation files"",\n            [""t"", ""sigma_xy"", ""Ndot"", ""phi_X"", ""N""],\n            [""gdot"", ""T"", ""tstop""],\n            [""s"", ""Pa$\\cdot$s"", ""s$^{-1}$m$^{-3}$"", ""-"", ""m$^{-3}$""],\n        )\n        self.filetypes[ftype.extension] = ftype\n        ftype = TXTColumnFile(\n            ""Elongation flow with crystallisation"",\n            ""uextxs"",\n            ""Elongation crystallisation files"",\n            [""t"", ""N1"", ""Ndot"", ""phi_X"", ""N""],\n            [""gdot"", ""T"", ""tstop""],\n            [""s"", ""Pa$\\cdot$s"", ""s$^{-1}$m$^{-3}$"", ""-"", ""m$^{-3}$""],\n        )\n\n        # THEORIES\n        self.theories[TheoryGoPolyStrand.thname] = TheoryGoPolyStrand\n        self.theories[TheorySmoothPolyStrand.thname] = TheorySmoothPolyStrand\n        self.add_common_theories()\n\n        # set the current view\n        self.set_views()\n\n    def viewLogeta(self, dt, file_parameters):\n        """"""Logarithm of the transient shear or extensional viscosity (depending on the experiment) :math:`\\\\eta(t)` vs logarithm of time :math:`t`""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = np.log10(dt.data[:, 0])\n        try:\n            flow_rate = float(file_parameters[""gdot""])\n        except:\n            flow_rate = float(file_parameters[""edot""])\n        y[:, 0] = np.log10(dt.data[:, 1] / flow_rate)\n        return x, y, True\n\n    def vieweta(self, dt, file_parameters):\n        """"""Transient shear or extensional viscosity (depending on the experiment) :math:`\\\\eta(t)` vs time :math:`t` (both axes in logarithmic scale by default)""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        try:\n            flow_rate = float(file_parameters[""gdot""])\n        except:\n            flow_rate = float(file_parameters[""edot""])\n        y[:, 0] = dt.data[:, 1] / flow_rate\n        return x, y, True\n\n    def viewNdot(self, dt, file_parameters):\n        """"""Nucleation rate as a function of time on log axis :math:`\\\\dot{N}(t)` vs time :math:`t` (x-axis on log scale by default)""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 2]\n        return x, y, True\n\n    def viewNt(self, dt, file_parameters):\n        """"""Nucleation density as a function of time on log axis :math:`N(t)` vs time :math:`t` (x-axis on log scale by default)""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 4]\n        return x, y, True\n\n    def viewphiX(self, dt, file_parameters):\n        """"""Crystal fraction as a function of time on log axis :math:`\\\\phi_X(t)` vs time :math:`t` (x-axis on log scale by default)""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 3]\n        return x, y, True\n\n    def viewLogSigmaTime(self, dt, file_parameters):\n        """"""Logarithm of the transient shear or extensional stress (depending on the experiment) :math:`\\\\sigma(t)` vs logarithm of time :math:`t`""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = np.log10(dt.data[:, 0])\n        y[:, 0] = np.log10(dt.data[:, 1])\n        return x, y, True\n\n    def viewSigmaTime(self, dt, file_parameters):\n        """"""Transient shear or extensional stress (depending on the experiment) :math:`\\\\sigma(t)` vs time :math:`t`""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 1]\n        return x, y, True\n\n    def viewLogSigmaGamma(self, dt, file_parameters):\n        """"""Logarithm of the transient shear or extensional stress (depending on the experiment) :math:`\\\\sigma(t)` vs logarithm of the strain :math:`\\\\gamma`""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        try:\n            flow_rate = float(file_parameters[""gdot""])\n        except:\n            flow_rate = float(file_parameters[""edot""])\n        x[:, 0] = np.log10(dt.data[:, 0] * flow_rate)  # compute strain\n        y[:, 0] = np.log10(dt.data[:, 1])\n        return x, y, True\n\n    def viewSigmaGamma(self, dt, file_parameters):\n        """"""Transient shear or extensional stress (depending on the experiment) :math:`\\\\sigma(t)` vs strain :math:`\\\\gamma`""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        try:\n            flow_rate = float(file_parameters[""gdot""])\n        except:\n            flow_rate = float(file_parameters[""edot""])\n        x[:, 0] = dt.data[:, 0] * flow_rate  # compute strain\n        y[:, 0] = dt.data[:, 1]\n        return x, y, True\n\n    def view_flowcurve(self, dt, file_parameters):\n        """""" :math:`\\\\sigma(t_{\\\\to\\\\infty})` vs flow rate""""""\n\n        try:\n            flow_rate = float(file_parameters[""gdot""])\n        except KeyError:\n            flow_rate = float(file_parameters[""edot""])\n        x = np.zeros((1, 1))\n        y = np.zeros((1, 1))\n        x[0, 0] = flow_rate\n        y[0, 0] = dt.data[-1, 1]\n        return x, y, True\n\n    def view_steadyNuc(self, dt, file_parameters):\n        """""" :math:`\\\\dot{N}(t_{\\\\to\\\\infty})` vs flow rate""""""\n\n        try:\n            flow_rate = float(file_parameters[""gdot""])\n        except KeyError:\n            flow_rate = float(file_parameters[""edot""])\n        x = np.zeros((1, 1))\n        y = np.zeros((1, 1))\n        x[0, 0] = flow_rate\n        y[0, 0] = dt.data[-1, 2]\n        return x, y, True\n\n\nclass CLApplicationCrystal(BaseApplicationCrystal, Application):\n    """"""CL Version""""""\n\n    def __init__(self, name=""Crystal"", parent=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent)\n\n\nclass GUIApplicationCrystal(BaseApplicationCrystal, QApplicationWindow):\n    """"""GUI Version""""""\n\n    def __init__(self, name=""Crystal"", parent=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent)\n'"
RepTate/applications/ApplicationDielectric.py,32,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module ApplicationDielectric\n\nModule for the analysis of small angle oscillatory shear data - Master curves\n\n""""""\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Application import Application\nfrom RepTate.gui.QApplicationWindow import QApplicationWindow\nfrom RepTate.core.View import View\nfrom RepTate.core.FileType import TXTColumnFile\nimport numpy as np\n\n\nclass ApplicationDielectric(CmdBase):\n    """"""Application to Analyze Dielectric Spectroscopy Data""""""\n\n    appname = ""Dielectric""\n    description = ""Dielectric Spectroscopy""\n    extension = ""dls""\n\n    def __new__(cls, name=""Dielectric"", parent=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUIApplicationDielectric(name, parent)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLApplicationDielectric(name, parent)\n        )\n\n\nclass BaseApplicationDielectric:\n    """"""Base Class for both GUI and CL""""""\n\n    html_help_file = (\n        ""http://reptate.readthedocs.io/manual/Applications/Dielectric/Dielectric.html""\n    )\n    appname = ApplicationDielectric.appname\n\n    def __init__(self, name=""Dielectric"", parent=None):\n        """"""**Constructor**""""""\n        from RepTate.theories.TheoryDebyeModes import TheoryDebyeModesFrequency\n        from RepTate.theories.TheoryHavriliakNegamiModes import (\n            TheoryHavriliakNegamiModesFrequency,\n        )\n        from RepTate.theories.TheoryKWWModes import TheoryKWWModesFrequency\n\n        super().__init__(name, parent)\n\n        # VIEWS\n        self.views[""log(e\',e\'\'(w))""] = View(\n            name=""log(e\',e\'\'(w))"",\n            description=""log Relative permittivity, Dielectric Loss"",\n            x_label=""log($\\omega$)"",\n            y_label=""log($\\epsilon\',\\epsilon\'\'$)"",\n            x_units=""rad/s"",\n            y_units=""-"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewLogE1E2,\n            n=2,\n            snames=[""log(e\')"", ""log(e\'\')""],\n        )\n        self.views[""semilog(e\',e\'\'(w))""] = View(\n            name=""semilog(e\',e\'\'(w))"",\n            description=""semilog Relative permittivity, Dielectric Loss"",\n            x_label=""log($\\omega$)"",\n            y_label=""$\\epsilon\',\\epsilon\'\'$"",\n            x_units=""rad/s"",\n            y_units=""-"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewSemiLogE1E2,\n            n=2,\n            snames=[""e\'(w)"", ""e\'\'(w)""],\n        )\n        self.views[""e\',e\'\'(w)""] = View(\n            ""e\',e\'\'(w)"",\n            ""Relative permittivity, Dielectric Loss"",\n            ""$\\omega$"",\n            ""$\\epsilon\',\\epsilon\'\'$"",\n            ""rad/s"",\n            ""-"",\n            True,\n            True,\n            self.viewE1E2,\n            2,\n            [""e\'(w)"", ""e\'\'(w)""],\n        )\n        self.views[""log(e\')""] = View(\n            name=""log(e\')"",\n            description=""log Relative Permittivity"",\n            x_label=""log($\\omega$)"",\n            y_label=""log($\\epsilon\'$)"",\n            x_units=""rad/s"",\n            y_units=""-"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewLogE1,\n            n=1,\n            snames=[""log(e\')""],\n        )\n        self.views[""semilog(e\')""] = View(\n            name=""semilog(e\')"",\n            description=""log Relative Permittivity"",\n            x_label=""log($\\omega$)"",\n            y_label=""$\\epsilon\'$"",\n            x_units=""rad/s"",\n            y_units=""-"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewSemiLogE1,\n            n=1,\n            snames=[""e\'""],\n        )\n        self.views[""e\'""] = View(\n            ""e\'"",\n            ""Relative Permittivity"",\n            ""$\\omega$"",\n            ""$\\epsilon\'$"",\n            ""rad/s"",\n            ""-"",\n            True,\n            True,\n            self.viewE1,\n            1,\n            [""e\'""],\n        )\n        self.views[""log(e\'\')""] = View(\n            name=""log(e\'\')"",\n            description=""log Dielectric Loss"",\n            x_label=""log($\\omega$)"",\n            y_label=""log($\\epsilon\'\'$)"",\n            x_units=""rad/s"",\n            y_units=""-"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewLogE2,\n            n=1,\n            snames=[""log(e\'\')""],\n        )\n        self.views[""semilog(e\'\')""] = View(\n            name=""semilog(e\'\')"",\n            description=""semilog Dielectric Loss"",\n            x_label=""log($\\omega$)"",\n            y_label=""$\\epsilon\'\'$"",\n            x_units=""rad/s"",\n            y_units=""-"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewSemiLogE2,\n            n=1,\n            snames=[""e\'\'""],\n        )\n        self.views[""e\'\'""] = View(\n            ""e\'\'"",\n            ""Dielectric Loss"",\n            ""$\\omega$"",\n            ""$\\epsilon\'\'$"",\n            ""rad/s"",\n            ""-"",\n            True,\n            True,\n            self.viewE2,\n            1,\n            [""e\'\'""],\n        )\n        self.views[""Cole-Cole""] = View(\n            ""Cole-Cole"",\n            ""Cole-Cole plot"",\n            ""$\\epsilon\'$"",\n            ""$\\epsilon\'\'$"",\n            ""-"",\n            ""-"",\n            False,\n            False,\n            self.viewColeCole,\n            1,\n            [""e\'\'""],\n        )\n\n        # set multiviews\n        self.nplots = 1\n        self.multiviews = []\n        for i in range(self.nplot_max):\n            # set views in the same order as declared above\n            self.multiviews.append(list(self.views.values())[i])\n        self.multiplots.reorg_fig(self.nplots)\n\n        # FILES\n        ftype = TXTColumnFile(\n            ""Dielectric Spectroscopy files"",\n            ""dls"",\n            ""Dielectric Spectroscopy files"",\n            [""w"", ""e\'"", ""e\'\'""],\n            [""Mw"", ""T""],\n            [""rad/s"", ""-"", ""-""],\n        )\n        self.filetypes[ftype.extension] = ftype\n\n        # THEORIES\n        self.theories[TheoryDebyeModesFrequency.thname] = TheoryDebyeModesFrequency\n        self.theories[\n            TheoryHavriliakNegamiModesFrequency.thname\n        ] = TheoryHavriliakNegamiModesFrequency\n        self.theories[TheoryKWWModesFrequency.thname] = TheoryKWWModesFrequency\n        self.add_common_theories()\n\n        # set the current view\n        self.set_views()\n\n    def viewLogE1E2(self, dt, file_parameters):\n        """"""Log or the relative permittivity and Dielectric Loss :math:`\\\\epsilon\'(\\\\omega), \\\\epsilon\'\'(\\\\omega)` vs logarithm of the frequency :math:`\\\\omega`""""""\n        x = np.zeros((dt.num_rows, 2))\n        y = np.zeros((dt.num_rows, 2))\n        x[:, 0] = np.log10(dt.data[:, 0])\n        x[:, 1] = np.log10(dt.data[:, 0])\n        y[:, 0] = np.log10(dt.data[:, 1])\n        y[:, 1] = np.log10(dt.data[:, 2])\n        return x, y, True\n\n    def viewSemiLogE1E2(self, dt, file_parameters):\n        """"""Semilog plot: Relative permittivity and Dielectric Loss :math:`\\\\epsilon\'(\\\\omega), \\\\epsilon\'\'(\\\\omega)` vs logarithm of frequency :math:`\\\\omega`""""""\n        x = np.zeros((dt.num_rows, 2))\n        y = np.zeros((dt.num_rows, 2))\n        x[:, 0] = np.log10(dt.data[:, 0])\n        x[:, 1] = np.log10(dt.data[:, 0])\n        y[:, 0] = dt.data[:, 1]\n        y[:, 1] = dt.data[:, 2]\n        return x, y, True\n\n    def viewE1E2(self, dt, file_parameters):\n        """"""Relative permittivity and Dielectric Loss :math:`\\\\epsilon\'(\\\\omega), \\\\epsilon\'\'(\\\\omega)` vs frequency :math:`\\\\omega`""""""\n        x = np.zeros((dt.num_rows, 2))\n        y = np.zeros((dt.num_rows, 2))\n        x[:, 0] = dt.data[:, 0]\n        x[:, 1] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 1]\n        y[:, 1] = dt.data[:, 2]\n        return x, y, True\n\n    def viewLogE1(self, dt, file_parameters):\n        """"""Log or the relative permittivity :math:`\\\\epsilon\'(\\\\omega)` vs logarithm of the frequency :math:`\\\\omega`""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = np.log10(dt.data[:, 0])\n        y[:, 0] = np.log10(dt.data[:, 1])\n        return x, y, True\n\n    def viewSemiLogE1(self, dt, file_parameters):\n        """"""Semilog plot: Relative permittivity :math:`\\\\epsilon\'(\\\\omega)` vs logarithm of the frequency :math:`\\\\omega`""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = np.log10(dt.data[:, 0])\n        y[:, 0] = dt.data[:, 1]\n        return x, y, True\n\n    def viewE1(self, dt, file_parameters):\n        """"""Relative permittivity :math:`\\\\epsilon\'(\\\\omega)` vs frequency :math:`\\\\omega`""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 1]\n        return x, y, True\n\n    def viewLogE2(self, dt, file_parameters):\n        """"""Log or the Dielectric Loss :math:`\\\\epsilon\'\'(\\\\omega)` vs logarithm of the frequency :math:`\\\\omega`""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = np.log10(dt.data[:, 0])\n        y[:, 0] = np.log10(dt.data[:, 2])\n        return x, y, True\n\n    def viewSemiLogE2(self, dt, file_parameters):\n        """"""Semilog plot: Dielectric Loss :math:`\\\\epsilon\'\'(\\\\omega)` vs logarithm of the frequency :math:`\\\\omega`""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = np.log10(dt.data[:, 0])\n        y[:, 0] = dt.data[:, 2]\n        return x, y, True\n\n    def viewE2(self, dt, file_parameters):\n        """"""Dielectric Loss :math:`\\\\epsilon\'\'(\\\\omega)` vs frequency :math:`\\\\omega`""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 2]\n        return x, y, True\n\n    def viewColeCole(self, dt, file_parameters):\n        """"""Cole-Cole plot: Dielectric Loss :math:`\\\\epsilon\'\'(\\\\omega)` vs relative permittivity :math:`\\\\epsilon\'(\\\\omega)`""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 1]\n        y[:, 0] = dt.data[:, 2]\n        return x, y, True\n\n\nclass CLApplicationDielectric(BaseApplicationDielectric, Application):\n    """"""CL Version""""""\n\n    def __init__(self, name=""Dielectric"", parent=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent)\n\n\nclass GUIApplicationDielectric(BaseApplicationDielectric, QApplicationWindow):\n    """"""GUI Version""""""\n\n    def __init__(self, name=""Dielectric"", parent=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent)\n'"
RepTate/applications/ApplicationGt.py,37,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module ApplicationGt\n\nModule for the analysis of stress relaxation data from simulations and experiments.\n\n""""""\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Application import Application\nfrom RepTate.gui.QApplicationWindow import QApplicationWindow\nfrom RepTate.core.View import View\nfrom RepTate.core.FileType import TXTColumnFile\nimport numpy as np\nfrom scipy import interpolate\n\nfrom PyQt5.QtWidgets import (\n    QSpinBox,\n    QPushButton,\n    QHBoxLayout,\n    QLineEdit,\n    QLabel,\n    QSizePolicy,\n)\nfrom PyQt5.QtGui import QDoubleValidator\nimport RepTate.theories.schwarzl_ctypes_helper as sch\nfrom math import log10, sin, cos\n\n\nclass ApplicationGt(CmdBase):\n    """"""Application to Analyze Stress Relaxation Data""""""\n\n    appname = ""Gt""\n    description = ""Relaxation modulus""\n    extension = ""gt""\n\n    def __new__(cls, name=""Gt"", parent=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUIApplicationGt(name, parent)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLApplicationGt(name, parent)\n        )\n\n\nclass BaseApplicationGt:\n    """"""Base Class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/Gt/Gt.html""\n    appname = ApplicationGt.appname\n\n    def __init__(self, name=""Gt"", parent=None):\n        """"""**Constructor**""""""\n        from RepTate.theories.TheoryMaxwellModes import TheoryMaxwellModesTime\n        from RepTate.theories.TheoryRouse import TheoryRouseTime\n        from RepTate.theories.TheoryDTDStars import TheoryDTDStarsTime\n        from RepTate.theories.TheoryShanbhagMaxwellModes import (\n            TheoryShanbhagMaxwellModesTime,\n        )\n\n        super().__init__(name, parent)\n\n        # time range for view conversion to frequency domain\n        self.tmin_view = -np.inf\n        self.tmax_view = np.inf\n\n        # VIEWS\n        self.views[""log(G(t))""] = View(\n            name=""log(G(t))"",\n            description=""log Relaxation modulus"",\n            x_label=""log(t)"",\n            y_label=""log(G)"",\n            x_units=""s"",\n            y_units=""Pa"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewLogGt,\n            n=1,\n            snames=[""log(G)""],\n        )\n        self.views[""i-Rheo G\',G\'\'""] = View(\n            name=""i-Rheo G\',G\'\'"",\n            description=""G\', G\'\' from i-Rheo transformation of G(t)"",\n            x_label=""$\\omega$"",\n            y_label=""G\',G\'\'"",\n            x_units=""rad/s"",\n            y_units=""Pa"",\n            log_x=True,\n            log_y=True,\n            view_proc=self.viewiRheo,\n            n=2,\n            snames=[""G\'"", ""G\'\'""],\n        )\n        self.views[""i-Rheo-Over G\',G\'\'""] = View(\n            name=""i-Rheo-Over G\',G\'\'"",\n            description=""G\', G\'\' from i-Rheo transformation of G(t) with Oversampling"",\n            x_label=""$\\omega$"",\n            y_label=""G\',G\'\'"",\n            x_units=""rad/s"",\n            y_units=""Pa"",\n            log_x=True,\n            log_y=True,\n            view_proc=self.viewiRheoOver,\n            n=2,\n            snames=[""G\'"", ""G\'\'""],\n        )\n        self.views[""Schwarzl G\',G\'\'""] = View(\n            name=""Schwarzl G\',G\'\'"",\n            description=""G\', G\'\' from Schwarzl transformation of G(t)"",\n            x_label=""$\\omega$"",\n            y_label=""G\',G\'\'"",\n            x_units=""rad/s"",\n            y_units=""Pa"",\n            log_x=True,\n            log_y=True,\n            view_proc=self.viewSchwarzl_Gt,\n            n=2,\n            snames=[""G\'"", ""G\'\'""],\n        )\n        self.views[""G(t)""] = View(\n            name=""G(t)"",\n            description=""Relaxation modulus"",\n            x_label=""t"",\n            y_label=""G"",\n            x_units=""s"",\n            y_units=""Pa"",\n            log_x=True,\n            log_y=True,\n            view_proc=self.viewGt,\n            n=1,\n            snames=[""G""],\n        )\n        self.OVER = 100  # initial oversampling\n        self.MIN_OVER = 1  # min oversampling\n        self.MAX_OVER = 10000  # max oversampling\n\n        # set multiviews\n        self.multiviews = [\n            self.views[""log(G(t))""],\n            self.views[""i-Rheo G\',G\'\'""],\n        ]  # default view order in multiplot views, set only one item for single view\n        self.nplots = len(self.multiviews)\n\n        # set multiviews\n        self.nplots = 2\n        self.multiviews = []\n        for i in range(self.nplot_max):\n            # set views in the same order as declared above\n            self.multiviews.append(list(self.views.values())[i])\n        self.multiplots.reorg_fig(self.nplots)\n\n        # FILES\n        ftype = TXTColumnFile(\n            ""G(t) files"",\n            ""gt"",\n            ""Relaxation modulus"",\n            [""t"", ""Gt""],\n            [""Mw"", ""gamma""],\n            [""s"", ""Pa""],\n        )\n        self.filetypes[ftype.extension] = ftype\n\n        # THEORIES\n        self.theories[TheoryMaxwellModesTime.thname] = TheoryMaxwellModesTime\n        self.theories[TheoryRouseTime.thname] = TheoryRouseTime\n        self.theories[TheoryDTDStarsTime.thname] = TheoryDTDStarsTime\n        self.theories[\n            TheoryShanbhagMaxwellModesTime.thname\n        ] = TheoryShanbhagMaxwellModesTime\n\n        self.add_common_theories()\n\n        # set the current view\n        self.set_views()\n\n    def viewGt(self, dt, file_parameters):\n        """"""Relaxation modulus :math:`G(t)` vs time :math:`t` (both in logarithmic scale)""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        try:\n            gamma = float(file_parameters[""gamma""])\n            if gamma == 0:\n                gamma = 1\n        except:\n            gamma = 1\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 1] / gamma\n        return x, y, True\n\n    def viewLogGt(self, dt, file_parameters):\n        """"""Logarithm of the relaxation modulus :math:`G(t)` vs logarithm of time :math:`t`""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        try:\n            gamma = float(file_parameters[""gamma""])\n            if gamma == 0:\n                gamma = 1\n        except:\n            gamma = 1\n        x[:, 0] = np.log10(dt.data[:, 0])\n        y[:, 0] = np.log10(dt.data[:, 1] / gamma)\n        return x, y, True\n\n    def viewSchwarzl_Gt(self, dt, file_parameters):\n        """"""Schwarzl transformation: numerical calculation of the storage modulus :math:`G\'(\\\\omega)` and loss modulus\n        :math:`G\'\'(\\\\omega)` from the relaxation modulus :math:`G(t)`""""""\n        data_x, data_y = self.get_xy_data_in_xrange(dt)\n        n = len(data_x)\n        try:\n            gamma = float(file_parameters[""gamma""])\n            if gamma == 0:\n                gamma = 1\n        except:\n            gamma = 1\n        data_y /= gamma\n        x = np.zeros((n, 2))\n        y = np.zeros((n, 2))\n\n        wp, Gp, wpp, Gpp = sch.do_schwarzl_gt(n, data_y, data_x)  # call the C function\n\n        x[:, 0] = wp[:]\n        x[:, 1] = wpp[:]\n        y[:, 0] = Gp[:]\n        y[:, 1] = Gpp[:]\n        return x, y, True\n\n    def viewiRheo(self, dt, file_parameters):\n        """"""i-Rheo Fourier transformation of the relaxation modulus :math:`G(t)` to obtain the storage modulus :math:`G\'(\\\\omega)` and loss modulus :math:`G\'\'(\\\\omega)` (no oversamplig).""""""\n        data_x, data_y = self.get_xy_data_in_xrange(dt)\n        xunique, indunique = np.unique(data_x, return_index=True)\n        n = len(xunique)\n        yunique = data_y[indunique]\n        data_x = xunique\n        data_y = yunique\n        try:\n            gamma = float(file_parameters[""gamma""])\n            if gamma == 0:\n                gamma = 1\n        except:\n            gamma = 1\n        data_y /= gamma\n        x = np.zeros((n, 2))\n        y = np.zeros((n, 2))\n\n        if len(data_x) < 2:\n            f = interpolate.interp1d(\n                data_x,\n                data_y,\n                kind=""zero"",\n                assume_sorted=True,\n                fill_value=""extrapolate"",\n            )\n        elif len(data_x) < 3:\n            f = interpolate.interp1d(\n                data_x,\n                data_y,\n                kind=""linear"",\n                assume_sorted=True,\n                fill_value=""extrapolate"",\n            )\n        elif len(data_x) < 4:\n            f = interpolate.interp1d(\n                data_x,\n                data_y,\n                kind=""quadratic"",\n                assume_sorted=True,\n                fill_value=""extrapolate"",\n            )\n        else:\n            f = interpolate.interp1d(\n                data_x,\n                data_y,\n                kind=""cubic"",\n                assume_sorted=True,\n                fill_value=""extrapolate"",\n            )\n        g0 = f(0)\n        ind1 = np.argmax(data_x > 0)\n        t1 = data_x[ind1]\n        g1 = data_y[ind1]\n        tinf = np.max(data_x)\n        if tinf <= 0 or t1 <= 0:\n            return x, y, False\n        wp = np.logspace(log10(1 / tinf), log10(1 / t1), n)\n        x[:, 0] = wp[:]\n        x[:, 1] = wp[:]\n\n        coeff = (data_y[ind1 + 1 :] - data_y[ind1:-1]) / (\n            data_x[ind1 + 1 :] - data_x[ind1:-1]\n        )\n        for i, w in enumerate(wp):\n\n            y[i, 0] = (\n                g0\n                + sin(w * t1) * (g1 - g0) / w / t1\n                + np.dot(\n                    coeff, -np.sin(w * data_x[ind1:-1]) + np.sin(w * data_x[ind1 + 1 :])\n                )\n                / w\n            )\n\n            y[i, 1] = (\n                -(1 - cos(w * t1)) * (g1 - g0) / w / t1\n                - np.dot(\n                    coeff, np.cos(w * data_x[ind1:-1]) - np.cos(w * data_x[ind1 + 1 :])\n                )\n                / w\n            )\n\n        return x, y, True\n\n    def viewiRheoOver(self, dt, file_parameters):\n        """"""i-Rheo Fourier transformation of the relaxation modulus :math:`G(t)` to obtain the storage modulus :math:`G\'(\\\\omega)` and loss modulus :math:`G\'\'(\\\\omega)` (with user selected oversamplig).""""""\n        data_x, data_y = self.get_xy_data_in_xrange(dt)\n        xunique, indunique = np.unique(data_x, return_index=True)\n        n = len(xunique)\n        yunique = data_y[indunique]\n        data_x = xunique\n        data_y = yunique\n        try:\n            gamma = float(file_parameters[""gamma""])\n            if gamma == 0:\n                gamma = 1\n        except:\n            gamma = 1\n        data_y /= gamma\n        x = np.zeros((n, 2))\n        y = np.zeros((n, 2))\n\n        f = interpolate.interp1d(\n            data_x, data_y, kind=""cubic"", assume_sorted=True, fill_value=""extrapolate""\n        )\n        g0 = f(0)\n        ind1 = np.argmax(data_x > 0)\n        t1 = data_x[ind1]\n        g1 = data_y[ind1]\n        tinf = np.max(data_x)\n        wp = np.logspace(np.log10(1 / tinf), np.log10(1 / t1), n)\n        x[:, 0] = wp[:]\n        x[:, 1] = wp[:]\n\n        # Create oversampled data\n        xdata = np.zeros(1)\n        xdata[0] = data_x[ind1]\n        for i in range(ind1 + 1, n):\n            tmp = np.logspace(log10(data_x[i - 1]), log10(data_x[i]), self.OVER + 1)\n            xdata = np.append(xdata, tmp[1:])\n        ydata = f(xdata)\n\n        coeff = (ydata[1:] - ydata[:-1]) / (xdata[1:] - xdata[:-1])\n        for i, w in enumerate(wp):\n            y[i, 0] = (\n                g0\n                + sin(w * t1) * (g1 - g0) / w / t1\n                + np.dot(coeff, -np.sin(w * xdata[:-1]) + np.sin(w * xdata[1:])) / w\n            )\n\n            y[i, 1] = (\n                -(1 - cos(w * t1)) * (g1 - g0) / w / t1\n                - np.dot(coeff, np.cos(w * xdata[:-1]) - np.cos(w * xdata[1:])) / w\n            )\n        return x, y, True\n\n    def get_xy_data_in_xrange(self, dt):\n        """"""Return the x and y data that with t in [self.tmin_view, self.tmax_view]""""""\n        # get indices of data in xrange\n        args = np.where(\n            np.logical_and(\n                dt.data[:, 0] >= self.tmin_view, dt.data[:, 0] <= self.tmax_view\n            )\n        )\n        x_in_range = dt.data[:, 0][args]\n        y_in_range = dt.data[:, 1][args]\n        return x_in_range, y_in_range\n\n\nclass CLApplicationGt(BaseApplicationGt, Application):\n    """"""CL Version""""""\n\n    def __init__(self, name=""Gt"", parent=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent)\n\n    def show_sb_oversampling(self):\n        pass\n\n    def hide_sb_oversampling(self):\n        pass\n\n\nclass GUIApplicationGt(BaseApplicationGt, QApplicationWindow):\n    """"""GUI Version""""""\n\n    def __init__(self, name=""Gt"", parent=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent)\n\n        self.add_oversampling_widget()\n        self.set_oversampling_widget_visible(False)\n\n        self.add_xrange_widget_view()\n        self.set_xrange_widgets_view_visible(False)\n\n    def add_oversampling_widget(self):\n        """"""Add spinbox for the oversampling ratio""""""\n        self.sb_oversampling = QSpinBox()\n        self.sb_oversampling.setRange(self.MIN_OVER, self.MAX_OVER)\n        self.sb_oversampling.setValue(self.OVER)\n        self.sb_oversampling.valueChanged.connect(self.change_oversampling)\n\n        self.viewLayout.insertWidget(2, self.sb_oversampling)\n\n    def add_xrange_widget_view(self):\n        """"""Add widgets below the view combobox to select the\n        x-range applied to view transformation""""""\n        hlayout = QHBoxLayout()\n\n        hlayout.addStretch()\n        # xmin\n        self.xmin_view = QLineEdit(""-inf"")\n        self.xmin_view.textChanged.connect(self.change_xmin)\n        self.xmin_view.setValidator(QDoubleValidator())\n        self.xmin_view.setMaximumWidth(35)\n        self.xmin_view.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Maximum)\n        self.xmin_label = QLabel(""<b>log(t<sub>min</sub>)</b>"")\n        hlayout.addWidget(self.xmin_label)\n        hlayout.addWidget(self.xmin_view)\n        # space\n        hlayout.addSpacing(5)\n        # xmax\n        self.xmax_view = QLineEdit(""inf"")\n        self.xmax_view.textChanged.connect(self.change_xmax)\n        self.xmax_view.setValidator(QDoubleValidator())\n        self.xmax_view.setMaximumWidth(35)\n        self.xmax_view.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Maximum)\n        self.xmax_label = QLabel("" <b>log(t<sub>max</sub>)</b>"")\n        hlayout.addWidget(self.xmax_label)\n        hlayout.addWidget(self.xmax_view)\n        # push button to refresh view\n        self.pb = QPushButton(""GO"")\n        self.pb.setMaximumWidth(25)\n        self.pb.clicked.connect(self.update_all_ds_plots)\n        hlayout.addWidget(self.pb)\n        self.hlayout_view = hlayout\n        self.ViewDataTheoryLayout.insertLayout(1, self.hlayout_view)\n\n    def change_xmin(self, text):\n        """"""Update the value of t_min""""""\n        if text in ""-np.inf -inf"":\n            self.tmin_view = -np.inf\n        else:\n            try:\n                self.tmin_view = 10 ** float(text)\n            except:\n                pass\n\n    def change_xmax(self, text):\n        """"""Update the value of t_max""""""\n        if text in ""np.inf inf"":\n            self.tmax_view = np.inf\n        else:\n            try:\n                self.tmax_view = 10 ** float(text)\n            except:\n                pass\n\n    def change_oversampling(self, val):\n        """"""Change the value of the oversampling ratio.\n        Called when the spinbox value is changed""""""\n        self.OVER = val\n\n    def set_oversampling_widget_visible(self, state):\n        """"""Show/Hide the extra widget ""sampling ratio"" """"""\n        self.sb_oversampling.setVisible(state)\n\n    def set_xrange_widgets_view_visible(self, state):\n        """"""Show/Hide the extra widgets for xrange selection""""""\n        self.pb.setVisible(state)\n        self.xmin_label.setVisible(state)\n        self.xmax_label.setVisible(state)\n        self.xmin_view.setVisible(state)\n        self.xmax_view.setVisible(state)\n\n    def set_view_tools(self, view_name):\n        """"""Show/Hide extra view widgets depending on the current view""""""\n        if view_name in [""i-Rheo G\',G\'\'"", ""Schwarzl G\',G\'\'""]:\n            self.set_xrange_widgets_view_visible(True)\n            self.set_oversampling_widget_visible(False)\n        elif view_name == ""i-Rheo-Over G\',G\'\'"":\n            self.set_xrange_widgets_view_visible(True)\n            self.set_oversampling_widget_visible(True)\n        else:\n            try:\n                self.set_xrange_widgets_view_visible(False)\n                self.set_oversampling_widget_visible(False)\n            except AttributeError:\n                pass\n'"
RepTate/applications/ApplicationLAOS.py,81,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module ApplicationLAOS\n\nLarge Amplitude Oscillatory Shear\n\n""""""\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Application import Application\nfrom RepTate.gui.QApplicationWindow import QApplicationWindow\nfrom RepTate.core.View import View\nfrom RepTate.core.FileType import TXTColumnFile\nimport numpy as np\nfrom PyQt5.QtWidgets import QSpinBox\n\n\nclass ApplicationLAOS(CmdBase):\n    """"""Application for Large Oscillatory Shear data""""""\n\n    appname = ""LAOS""\n    description = ""LAOS Application""  # used in the command-line Reptate\n    extension = ""laos""\n\n    def __new__(cls, name=""LAOS"", parent=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUIApplicationLAOS(name, parent)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLApplicationLAOS(name, parent)\n        )\n\n\nclass BaseApplicationLAOS:\n    """"""Base Class for both GUI and CL""""""\n\n    # html_help_file = \'\'\n    appname = ApplicationLAOS.appname\n\n    def __init__(self, name=""LAOS"", parent=None, **kwargs):\n        """"""**Constructor**""""""\n        # IMPORT THEORIES\n        from RepTate.theories.TheoryRoliePoly import TheoryRoliePoly\n        from RepTate.theories.TheoryUCM import TheoryUCM\n        from RepTate.theories.TheoryGiesekus import TheoryGiesekus\n        from RepTate.theories.TheoryPomPom import TheoryPomPom\n\n        super().__init__(name, parent)\n\n        # VIEWS\n        # set the views that can be selected in the view combobox\n        self.views[""sigma,gamma(t)""] = View(\n            name=""sigma,gamma(t)"",\n            description=""RAW Stress and RAW strain as a function of time"",\n            x_label=""$t$"",\n            y_label=""$\\sigma^\\mathrm{raw}(t),\\gamma^\\mathrm{raw}(t)$"",\n            x_units=""s"",\n            y_units=""Pa, -"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.view_sigmatgammatRAW,\n            n=2,\n            snames=[""$\\sigma(t)^\\mathrm{raw}$"", ""$\\gamma(t)^\\mathrm{raw}$""],\n        )\n\n        self.views[""sigma SCA,gamma(t)""] = View(\n            name=""sigma SCA,gamma(t)"",\n            description=""RAW SCALED Stress and RAW strain as a function of time"",\n            x_label=""$t$"",\n            y_label=""$\\sigma^\\mathrm{raw,scaled}(t),\\gamma^\\mathrm{raw}(t)$"",\n            x_units=""s"",\n            y_units=""Pa, -"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.view_sigmatgammatRAWSCALED,\n            n=2,\n            snames=[""$\\sigma(t)^\\mathrm{raw,scaled}$"", ""$\\gamma(t)^\\mathrm{raw}$""],\n        )\n\n        self.views[""sigma(gamma)""] = View(\n            name=""sigma(gamma)"",\n            description=""Stress as a function of strain - RAW"",\n            x_label=""$\\gamma(t)^\\mathrm{raw}$"",\n            y_label=""$\\sigma(t)^\\mathrm{raw}$"",\n            x_units=""-"",\n            y_units=""Pa"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.view_sigmagammaRAW,\n            n=1,\n            snames=[""$\\sigma^\\mathrm{raw}(\\gamma^\\mathrm{raw})$""],\n        )\n\n        self.views[""sigma(gamma) FILT""] = View(\n            name=""sigma(gamma) FILT"",\n            description=""Stress as a function of strain"",\n            x_label=""$\\gamma^\\mathrm{filtered}(t)$"",\n            y_label=""$\\sigma^\\mathrm{filtered}(t)$"",\n            x_units=""-"",\n            y_units=""Pa"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.view_sigmagammaFILTERED,\n            n=1,\n            snames=[""$\\sigma^\\mathrm{filtered}(\\gamma^\\mathrm{filtered})$""],\n        )\n\n        self.views[""FFT spectrum""] = View(\n            name=""FFT spectrum"",\n            description=""Full Fast Fourier Transform spectrum"",\n            x_label=""$\\omega$"",\n            y_label=""$|\\sigma^*_n|/|\\sigma^*_1|$"",\n            x_units=""rad.s$^{-1}$"",\n            y_units=""-"",\n            log_x=False,\n            log_y=True,\n            view_proc=self.view_fftspectrum,\n            n=1,\n            snames=[""FFT""],\n        )\n\n        self.views[""sigma(gdot) FILT""] = View(\n            name=""sigma(gdot) FILT"",\n            description=""FILTERED Stress as a function of strain-rate"",\n            x_label=""$\\dot\\gamma^\\mathrm{filtered}(t)$"",\n            y_label=""$\\sigma^\\mathrm{filtered}(t)$"",\n            x_units=""s$^{-1}$"",\n            y_units=""Pa"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.view_sigmagammadot,\n            n=1,\n            snames=[""$\\sigma(\\dot\\gamma)$""],\n        )\n\n        self.views[""sigma(gamma) ANLS""] = View(\n            name=""sigma(gamma) ANLS"",\n            description=""FILTERED Stress as a function of strain - Analysis of contributions"",\n            x_label=""$\\gamma^\\mathrm{filtered}(t)$"",\n            y_label=""$\\sigma^\\mathrm{filtered}(t)$"",\n            x_units=""s$^{-1}$"",\n            y_units=""Pa"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.view_sigmagammaANLS,\n            n=3,\n            snames=[\n                ""$\\sigma^\\mathrm{filtered}$"",\n                ""$\\sigma^\\mathrm{elastic}$"",\n                ""$\\sigma^\\mathrm{Chebyshev 1+3}$"",\n            ],\n        )\n\n        self.views[""sigma(gdot) ANLS""] = View(\n            name=""sigma(gdot) ANLS"",\n            description=""FILTERED Stress as a function of strain-rate - Analysis of contributions"",\n            x_label=""$\\dot\\gamma^\\mathrm{filtered}(t)$"",\n            y_label=""$\\sigma^\\mathrm{filtered}(t)$"",\n            x_units=""s$^{-1}$"",\n            y_units=""Pa"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.view_sigmagammadotANLS,\n            n=3,\n            snames=[\n                ""$\\sigma^\\mathrm{filtered}$"",\n                ""$\\sigma^\\mathrm{elastic}$"",\n                ""$\\sigma^\\mathrm{Chebyshev 1+3}$"",\n            ],\n        )\n\n        self.views[""Cheb elastic""] = View(\n            name=""Cheb elastic"",\n            description=""Chebyshev Coeff tau_elastic"",\n            x_label=""Polynomial order, $n$"",\n            y_label=""$e_n$"",\n            x_units=""-"",\n            y_units=""Pa"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.view_chebelastic,\n            n=1,\n            snames=[""chebelastic""],\n        )\n\n        self.views[""Cheb viscous""] = View(\n            name=""Cheb viscous"",\n            description=""Chebyshev Coeff tau_viscous"",\n            x_label=""Polynomial order, $n$"",\n            y_label=""$v_n$"",\n            x_units=""-"",\n            y_units=""Pa.s"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.view_chebviscous,\n            n=1,\n            snames=[""chebviscous""],\n        )\n\n        self.views[""sigma(t)""] = View(\n            name=""sigma(t)"",\n            description=""Stress as a function of time - RAW"",\n            x_label=""$t$"",\n            y_label=""$\\sigma(t)^\\mathrm{raw}$"",\n            x_units=""s"",\n            y_units=""Pa"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.view_sigmatRAW,\n            n=1,\n            snames=[""$\\sigma(t)^\\mathrm{raw}$""],\n        )\n\n        self.views[""gamma(t)""] = View(\n            name=""gamma(t)"",\n            description=""Strain as a function of time - RAW"",\n            x_label=""$t$"",\n            y_label=""$\\gamma(t)^\\mathrm{raw}$"",\n            x_units=""s"",\n            y_units=""-"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.view_gammatRAW,\n            n=1,\n            snames=[""$\\gamma(t)^\\mathrm{raw}$""],\n        )\n\n        self.HHSR = 15  # Highest harmonic to consider in stress reconstruction\n        self.PPQC = 50  # Points per quarter cycle in FT reconstruction (20-500)\n\n        # set multiviews\n        # default view order in multiplot views, set only one item for single view\n        # if more than one item, modify the \'nplots\' in the super().__init__ call\n        self.nplots = 4\n        self.multiviews = []\n        for i in range(self.nplot_max):\n            # set views in the same order as declared above\n            self.multiviews.append(list(self.views.values())[i])\n        self.multiplots.reorg_fig(self.nplots)\n\n        # FILES\n        # set the type of files that ApplicationLAOS can open\n        ftype = TXTColumnFile(\n            name=""Large-Angle Oscillatory Shear data"",\n            extension=""laos"",\n            description=""file containing laos data"",\n            col_names=[""time"", ""gamma"", ""sigma""],\n            basic_file_parameters=[""omega"", ""gamma""],\n            col_units=[""s"", ""-"", ""Pa""],\n        )\n        self.filetypes[ftype.extension] = ftype  # add each the file type to dictionary\n\n        # THEORIES\n        self.theories[TheoryRoliePoly.thname] = TheoryRoliePoly\n        self.theories[TheoryUCM.thname] = TheoryUCM\n        self.theories[TheoryGiesekus.thname] = TheoryGiesekus\n        self.theories[TheoryPomPom.thname] = TheoryPomPom\n        self.add_common_theories()  # Add basic theories to the application\n\n        # set the current view\n        self.set_views()\n\n    def view_sigmatgammatRAW(self, dt, file_parameters):\n        """"""Stress & strain vs time""""""\n        x = np.zeros((dt.num_rows, 2))\n        y = np.zeros((dt.num_rows, 2))\n        x[:, 0] = dt.data[:, 0]\n        x[:, 1] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 2]\n        y[:, 1] = dt.data[:, 1]\n\n        return x, y, True\n\n    def view_sigmatgammatRAWSCALED(self, dt, file_parameters):\n        """"""Stress SCALED & strain vs time""""""\n        x = np.zeros((dt.num_rows, 2))\n        y = np.zeros((dt.num_rows, 2))\n        x[:, 0] = dt.data[:, 0]\n        x[:, 1] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 2] / np.max(np.abs(dt.data[:, 2]))\n        y[:, 1] = dt.data[:, 1]\n\n        return x, y, True\n\n    def view_sigmagammaRAW(self, dt, file_parameters):\n        """"""Stress vs strain RAW data""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 1]\n        y[:, 0] = dt.data[:, 2]\n        return x, y, True\n\n    def view_sigmagammaFILTERED(self, dt, file_parameters):\n        """"""Stress vs strain FILTERED data""""""\n        gam_0, Bn, An, Ncycles = self.do_FFT_and_STUFF(dt)\n\n        gam_recon, tau_recon = self.reconstruct_gamma_tau(An, Bn, gam_0, Ncycles)\n\n        ndata = len(gam_recon)\n        x = np.zeros((ndata, 1))\n        y = np.zeros((ndata, 1))\n        x[:, 0] = gam_recon\n        y[:, 0] = tau_recon\n        return x, y, True\n\n    def view_fftspectrum(self, dt, file_parameters):\n        """"""FFT spectrum of stress signal""""""\n        gam_0, Bn, An, Ncycles = self.do_FFT_and_STUFF(dt)\n\n        if Bn[Ncycles - 1] > 0:  # ensure that G_1\' is positive\n            Gp = Bn / gam_0  # G\' from sine terms\n        else:\n            Gp = -Bn / gam_0\n\n        if An[Ncycles - 1] > 0:  # ensure that G_1\'\' is positive\n            Gpp = An / gam_0  # G\'\' from cosine terms\n        else:\n            Gpp = -An / gam_0\n\n        N = len(An)  # number of available harmonics\n        G_complex = np.zeros(N)\n        G_compNORM = np.zeros(N)\n        for j in range(N):\n            G_complex[j] = (Gp[j] ** 2 + Gpp[j] ** 2) ** 0.5\n        for j in range(N):\n            G_compNORM[j] = (\n                G_complex[j] / G_complex[Ncycles - 1]\n            )  # max intensity occurs at Ncycles frequency\n\n        # strain-rate is equal to omega*strain-shifted-1/4-cycle\n        w = float(file_parameters[""omega""])\n        dw = w / Ncycles\n        wn = np.linspace(dw, N * dw, N)\n        if (\n            N > 25 * Ncycles\n        ):  # display a maximum of 25 harmonics, so that plot is not too ""squished""\n            wn_end = 25 * Ncycles\n        else:\n            wn_end = len(wn)\n\n        x = np.zeros((wn_end, 1))\n        y = np.zeros((wn_end, 1))\n        x[:, 0] = wn[0:wn_end]\n        y[:, 0] = G_compNORM[0:wn_end]\n\n        return x, y, True\n\n    def view_sigmagammadot(self, dt, file_parameters):\n        """"""Stress vs strain rate""""""\n        gam_0, Bn, An, Ncycles = self.do_FFT_and_STUFF(dt)\n        gam_recon, tau_recon = self.reconstruct_gamma_tau(An, Bn, gam_0, Ncycles)\n\n        PPC = 4 * self.PPQC  # Points Per Cycle\n\n        # w (omega) is currently a MANUAL input\n        # strain-rate is equal to omega*strain-shifted-1/4-cycle\n        w = float(file_parameters[""omega""])\n        gamdot_recon = w * gam_recon[self.PPQC : self.PPQC + PPC]  # One cylce of gamdot\n        gamdot_recon = np.array(\n            gamdot_recon.tolist() + gamdot_recon[: 2 * self.PPQC + 1].tolist()\n        )  # make 1.5 cycles\n\n        x = np.zeros((len(gamdot_recon), 1))\n        y = np.zeros((len(tau_recon), 1))\n        x[:, 0] = gamdot_recon  # gamdot_recon interp1d\n        y[:, 0] = tau_recon  # tau_recon interp1d\n        return x, y, True\n\n    def view_sigmagammaANLS(self, dt, file_parameters):\n        """"""Stress vs strain ANALYSIS""""""\n        gam_0, Bn, An, Ncycles = self.do_FFT_and_STUFF(dt)\n        gam_recon, tau_recon = self.reconstruct_gamma_tau(An, Bn, gam_0, Ncycles)\n\n        PPC = 4 * self.PPQC  # Points Per Cycle\n\n        FTtau_e = np.zeros(PPC + 1)\n        tau_e_3 = np.zeros(PPC + 1)  # ""elastic"" stress, from 1st & 3rd Harmonics\n\n        for q in range(PPC):  # sum for each point in time for 1 full cycle, no overlap\n            for p in range(\n                1, self.HHSR + 1, 2\n            ):  # self.HHSR:total number of harmonics to consider; sum over ODD harmonics only\n                FTtau_e[q] += Bn[Ncycles * p - 1] * np.sin(p * 2 * np.pi * q / PPC)\n\n            # RHE, added June 15, 2007, trying to use FT to reconstruct ""Chebyshev""\n            # curves\n            for p in range(1, 4, 2):  # Harmonics 1 & 3, for ""elastic"" stress\n                tau_e_3[q] += Bn[Ncycles * p - 1] * np.sin(p * 2 * np.pi * q / PPC)\n\n        # make FTtau_* have one point overlap\n        FTtau_e[PPC] = FTtau_e[0]\n        tau_e_3[PPC] = tau_e_3[0]\n\n        Xe = (\n            gam_recon[3 * self.PPQC : 5 * self.PPQC + 1] / gam_0\n        )  # gam_recon is 1.5 cycles\n        # Create corresponding input function from Geo. Interp. decomposition\n        fe = np.array(\n            FTtau_e[3 * self.PPQC : 4 * self.PPQC].tolist()\n            + FTtau_e[: self.PPQC + 1].tolist()\n        )  # tau_e is 1 cycle\n\n        fe3 = np.array(\n            tau_e_3[3 * self.PPQC : 4 * self.PPQC].tolist()\n            + tau_e_3[: self.PPQC + 1].tolist()\n        )  # tau_e is 1 cycle\n\n        ndata = max(len(gam_recon), len(Xe))\n        x = np.zeros((ndata, 3))\n        y = np.zeros((ndata, 3))\n        x[: len(gam_recon), 0] = gam_recon\n        y[: len(gam_recon), 0] = tau_recon\n        x[: len(Xe), 1] = gam_0 * Xe\n        y[: len(Xe), 1] = fe\n        x[: len(Xe), 2] = gam_0 * Xe\n        y[: len(Xe), 2] = fe3\n\n        return x, y, True\n\n    def view_sigmagammadotANLS(self, dt, file_parameters):\n        """"""Stress vs strain rate ANALYSIS""""""\n\n        gam_0, Bn, An, Ncycles = self.do_FFT_and_STUFF(dt)\n        gam_recon, tau_recon = self.reconstruct_gamma_tau(An, Bn, gam_0, Ncycles)\n\n        PPC = 4 * self.PPQC  # Points Per Cycle\n\n        # w (omega) is currently a MANUAL input\n        # strain-rate is equal to omega*strain-shifted-1/4-cycle\n        w = float(file_parameters[""omega""])\n        gamdot_recon = w * gam_recon[self.PPQC : self.PPQC + PPC]  # One cylce of gamdot\n        gamdot_recon = np.array(\n            gamdot_recon.tolist() + gamdot_recon[: 2 * self.PPQC + 1].tolist()\n        )  # make 1.5 cycles\n\n        FTtau_v = np.zeros(PPC + 1)\n        tau_v_3 = np.zeros(PPC + 1)  # ""viscous"" stress, from 1st & 3rd Harmonics\n\n        for q in range(PPC):  # sum for each point in time for 1 full cycle, no overlap\n            for p in range(\n                1, self.HHSR + 1, 2\n            ):  # self.HHSR:total number of harmonics to consider; sum over ODD harmonics only\n                FTtau_v[q] += An[Ncycles * p - 1] * np.cos(p * 2 * np.pi * q / PPC)\n\n            # RHE, added June 15, 2007, trying to use FT to reconstruct ""Chebyshev""\n            # curves\n            for p in range(1, 4, 2):  # Harmonics 1 & 3, for ""elastic"" stress\n                tau_v_3[q] += An[Ncycles * p - 1] * np.cos(p * 2 * np.pi * q / PPC)\n\n        # make FTtau_* have one point overlap\n        FTtau_v[PPC] = FTtau_v[0]\n        tau_v_3[PPC] = tau_v_3[0]\n\n        Xv = gamdot_recon[2 * self.PPQC : 4 * self.PPQC + 1] / (\n            gam_0 * w\n        )  # gamdot_recon is 1.5 cycles\n        # Create corresponding input function from Geo. Interp. decomposition\n        fv = FTtau_v[2 * self.PPQC : 4 * self.PPQC + 1]  # tau_v is 1 cycle\n\n        fv3 = tau_v_3[2 * self.PPQC : 4 * self.PPQC + 1]  # tau_v is 1 cycle\n\n        ndata = max(len(gamdot_recon), len(Xv))\n        x = np.zeros((ndata, 3))\n        y = np.zeros((ndata, 3))\n        x[: len(gamdot_recon), 0] = gamdot_recon\n        y[: len(gamdot_recon), 0] = tau_recon\n        x[: len(Xv), 1] = gam_0 * w * Xv\n        y[: len(Xv), 1] = fv\n        x[: len(Xv), 2] = gam_0 * w * Xv\n        y[: len(Xv), 2] = fv3\n\n        return x, y, True\n\n    def view_chebelastic(self, dt, file_parameters):\n        """"""Chebyshev decomposition, elastic components""""""\n        gam_0, Bn, An, Ncycles = self.do_FFT_and_STUFF(dt)\n\n        if Bn[Ncycles - 1] > 0:  # ensure that G_1\' is positive\n            Gp = Bn / gam_0  # G\' from sine terms\n        else:\n            Gp = -Bn / gam_0\n\n        # Chebyshev coefficients, found from FT results\n        e_n = np.zeros(int(np.floor(len(Gp) / Ncycles)))\n        # contains e1, e2, e3, e4, ...\n        for o in range(0, int(np.floor(len(Gp) / Ncycles)), 2):\n            e_n[o] = Gp[Ncycles * (o + 1) - 1] * (-1) ** (\n                o / 2\n            )  # only works for ODD Chebyshevs, so I leave even Chebyshevs = 0;\n\n        x = np.zeros((self.HHSR, 1))\n        y = np.zeros((self.HHSR, 1))\n        x[:, 0] = np.linspace(1, self.HHSR, self.HHSR)\n        y[:, 0] = e_n[0 : self.HHSR]\n        return x, y, True\n\n    def view_chebviscous(self, dt, file_parameters):\n        """"""Chebyshev decomposition, viscous components""""""\n        gam_0, Bn, An, Ncycles = self.do_FFT_and_STUFF(dt)\n\n        if An[Ncycles - 1] > 0:  # ensure that G_1\'\' is positive\n            Gpp = An / gam_0  # G\'\' from cosine terms\n        else:\n            Gpp = -An / gam_0\n\n        w = float(file_parameters[""omega""])\n\n        # Chebyshev coefficients, found from FT results\n        v_n = np.zeros(int(np.floor(len(Gpp) / Ncycles)))\n        for o in range(0, int(np.floor(len(Gpp) / Ncycles)), 2):\n            v_n[o] = Gpp[Ncycles * (o + 1) - 1] / w\n\n        x = np.zeros((self.HHSR, 1))\n        y = np.zeros((self.HHSR, 1))\n        x[:, 0] = np.linspace(1, self.HHSR, self.HHSR)\n        y[:, 0] = v_n[0 : self.HHSR]\n        return x, y, True\n\n    def view_sigmatRAW(self, dt, file_parameters):\n        """"""Stress vs time RAW data""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 2]\n\n        return x, y, True\n\n    def view_gammatRAW(self, dt, file_parameters):\n        """"""Strain vs time RAW data""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 1]\n        return x, y, True\n\n    def cycletrim_MITlaos(self, gamma, tau):\n        d_zero = []\n\n        k = 0  # k is a counter for the number of times gamma changes sign\n        sign_gam = np.sign(gamma)\n        for i in range(len(gamma) - 1):\n            if sign_gam[i] != sign_gam[i + 1]:\n                d_zero.append(i + 1)  # index location after sign change\n                k += 1\n\n        lgth = len(d_zero)\n\n        if lgth <= 1:\n            # if there are 0 or 1 locations of gamma crossing zero,\n            # it is impossible to extract the minimum of 1 cycle\n\n            # give an output before exiting\n            istrain = 0\n            istress = 0\n            N = 0\n            istart = 0\n            istop = 0\n            return istrain, istress, N, istart, istop\n\n        if lgth == 2:\n            # if there are 2 locations where gamma crosses zero,\n            # a fancy cycle trimming must be performed, which will NOT start with a\n            # sine wave\n            # SEQUENCE:  estimate points per cycle\n            #           check if there are enough points for single cycle (Npts) (error if not)\n            #           include final Npts of signal\n\n            # estimate number of points per cycle\n            Npts = (d_zero[1] - d_zero[0]) * 2\n\n            if len(gamma) < Npts:  # if there are not enough points\n                # give an output before exiting\n                istrain = 0\n                istress = 0\n                N = 0\n                istart = 0\n                istop = 0\n                return istrain, istress, N, istart, istop\n            else:  # if there are enough points\n                istart = len(gamma) - Npts\n                istop = len(gamma)\n                N = 1\n\n        if lgth > 2:\n            if lgth / 2 != np.round(lgth / 2):  # Check if lgth is odd\n                istart = d_zero[0]\n                istop = d_zero[-1]\n                N = int((lgth - 1) / 2)\n            else:\n                istart = d_zero[0]\n                istop = d_zero[lgth - 2]\n                N = int((lgth - 2) / 2)\n\n        istrain = gamma[istart:istop]\n        istress = tau[istart:istop]\n\n        return istrain, istress, N, istart, istop\n\n    def FTtrig_MITlaos(self, f):\n        """"""\n        Find trigonometric Fourier Series components from FFT:\n        f = A0 + SUM_n( An*cos(n*2*pi*t/T + Bn*sin(n*2*pi*t/T)\n\n        VARIABLES\n        f           vector to be transformed\n        A0          essentially mean(f)\n        An          cosine terms\n        Bn          sine terms\n\n        SEQUENCE\n        force input to have EVEN number of data points (reqd for fft.m)\n        take FFT > complex vector results\n        extract trigonometric terms from complex vector\n        """"""\n        if int(len(f) / 2) != len(f) / 2:\n            # trim last data point to force even number of data points\n            # f MUST HAVE EVEN NUMBER OF DATA POINTS!\n            f = f[0 : len(f) - 1]\n\n        n = len(f)\n        N = int(n / 2)  # N will be the number of harmonics to consider\n\n        Fn = np.fft.fft(f)\n        # rearrange values such that: Fn_new = [ high < low | low > high ]\n        Fn_new = np.array(\n            [np.conj(Fn[N])] + Fn[N + 1 :].tolist() + Fn[0 : N + 1].tolist()\n        )\n        Fn_new /= n  # scale results\n\n        # A0 = Fn_new[N]\n        A0 = np.mean(f)\n        An = 2 * np.real(Fn_new[N + 1 :])  # cosine terms\n        Bn = -2 * np.imag(Fn_new[N + 1 :])  # sine terms\n\n        return A0, An, Bn\n\n    def chebyshev_decompose_MITlaos(self, F, N, X=None):\n        """"""\n        Find Chebyshev Polynomial components of input data vector:\n\n        .. math::        \n            f = A_0 T_0(x) + A_1 T_1(x) + A_2 T_2(x) + ...\n\n        [An]= chebyshev_decompose(F,N,X)\n                \n        Assumes F occupies the domain [-1 : +1]\n        with an arbitrary number of data points\n        Uses trapz.m to calculate integrals\n\n        :param F: vector of data, in domain [-1:1]\n        :param N: degree of desired Legendre Polynomial decomposition\n        :param X: Range points associated with F\n        :return: :math:`A_n` vector of Chebyshev coefficients :math:`A_n(i) = A_{i-1}`\n\n        """"""\n        M = len(F)\n        if X is None:  # Make X (input range) linear spaced and same length as F\n            X = np.linspace(-1, 1, M)\n\n        An = np.zeros(N)  # initialize vector of Chebyshev coefficients\n\n        # T = gallery(\'chebvand\',X);  # Matrix of Chebyshev polynomials evaluated at X\n        # T(i,:) is (i-1)order polynomial\n        T = np.zeros((M, M))\n        T = np.transpose(np.polynomial.chebyshev.chebvander(X, M - 1))\n        # for i in range(M):\n        #    T[i,:] = np.transpose(np.polynomial.chebyshev.chebvander(X,i))\n\n        # COORDINATE TRANSFORM TECHNIQUE: NO WEIGHTING NECESSARY\n\n        THETA = np.arcsin(X)\n\n        # 0th order polynomial has different front factor\n        An[0] = 1 / np.pi * np.trapz(F, THETA)\n        # Remaining coefficients use same front factor\n        for i in range(1, N):\n            An[i] = 2 / np.pi * np.trapz(T[i, :] * F, THETA)\n\n        return An\n\n    def do_FFT_and_STUFF(self, dt):\n        time_uneven = dt.data[:, 0]  # raw time\n        gamma_uneven = dt.data[:, 1]  # raw strain\n        tau_uneven = dt.data[:, 2]  # raw stress\n\n        # Force strain & stress data to be linearly space in time\n        time = np.linspace(time_uneven[0], time_uneven[-1], len(time_uneven))\n        gamma = np.interp(time, time_uneven, gamma_uneven)  # untrimmed strain\n        tauxy = np.interp(time, time_uneven, tau_uneven)  # untrimmed stress\n\n        # This section is equivilent to cycletrim\n\n        d_zero = []\n\n        k = 0  # k is a counter for the number of times gamma changes sign\n        sign_gam = np.sign(gamma)\n        for i in range(len(gamma) - 1):\n            if sign_gam[i] != sign_gam[i + 1]:\n                k += 1\n                d_zero.append(i + 1)  # index location after sign change\n\n        # if the sign changed, and the previous point was NEGATIVE (or ZERO)\n        # then it\'s the beginning of the sine wave\n\n        # NB: the following assumes that strain signal is smooth enough so that the\n        # cycles can be trimmed by finding the gamma=0 crossover points.\n\n        lgth = len(d_zero)\n\n        if lgth == 0:\n            # give an output before exiting\n            # self.Qprint(\'ERROR: Selected data never crosses zero.  Unable to find integer number of cycles\')\n            return\n\n        elif lgth == 1:\n            # if there are 0 or 1 locations of gamma crossing zero, it is impossible to extract the minimum of 1 cycle\n            # self.Qprint(\'WARNING: It looks like you have only one cycle, but this cannot be confirmed.\')\n            Ncycles = 1\n            istart = 0\n            istop = len(gamma)\n\n            time = time[istart:istop]\n            istrain = gamma[istart:istop]\n            istress = tauxy[istart:istop]\n\n        elif lgth == 2:\n            # if there are 2 locations where gamma crosses zero, a fancy cycle trimming must be performed, which will NOT start with a sine wave\n            # SEQUENCE:  estimate points per cycle\n            #           check if there are enough points for single cycle (Npts) (error if not)\n            #           include final Npts of signal\n\n            Npts = (d_zero[1] - d_zero[0]) * 2  # estimate number of points per cycle\n\n            if len(gamma) < (0.95 * Npts):  # if there are not enough points\n                # give an output before exiting\n                # self.Qprint(\'WARNING: It looks like there aren\'\'t enough points for a complete cycle. Proceed with extreme caution.\')\n                istart = 0\n                istop = len(gamma)\n                Ncycles = 1\n\n                time = time[istart:istop]\n                istrain = gamma[istart:istop]\n                istress = tauxy[istart:istop]\n\n            elif len(gamma) > (\n                1.05 * Npts\n            ):  #  check for excess data beyond one cycle (x% tolerance)\n                istart = len(gamma) - Npts\n                istop = len(gamma)\n                Ncycles = 1\n\n                time = time[istart:istop]\n                istrain = gamma[istart:istop]\n                istress = tauxy[istart:istop]\n\n                # self.Qprint(\'WARNING: The beginning of your data was trimmed in order to have exactly one cycle\')\n            else:\n                istart = 0\n                istop = len(gamma)\n                Ncycles = 1\n\n                time = time[istart:istop]\n                istrain = gamma[istart:istop]\n                istress = tauxy[istart:istop]\n                # self.Qprint(\'WARNING: It looks like you have exactly one cycle.  It will not be trimmed.\')\n\n        elif lgth > 2:\n            # perform cycle trimming as usual\n            [gam, tau, Ncycles, istart, istop] = self.cycletrim_MITlaos(gamma, tauxy)\n            time = time[istart:istop]\n            # self.Qprint(\'Ncycles = %d\'%Ncycles)\n\n        # FTtrig_MITlaos\n        A0, AnS, BnS = self.FTtrig_MITlaos(tau)\n        gA0, gAnS, gBnS = self.FTtrig_MITlaos(gam)\n\n        gam_0 = np.sqrt(\n            gBnS[Ncycles - 1] ** 2 + gAnS[Ncycles - 1] ** 2\n        )  # acknowledge possible phase shift, but neglect h.o.t.\n        delta = np.arctan(\n            gAnS[Ncycles - 1] / gBnS[Ncycles - 1]\n        )  # raw signal phase shift\n\n        An = np.zeros(len(AnS))\n        Bn = np.zeros(len(BnS))\n        for q in range(len(AnS)):  # Create NOT SHIFTED Fourier coefficients\n            An[q] = AnS[q] * np.cos((q + 1) * delta / Ncycles) - BnS[q] * np.sin(\n                (q + 1) * delta / Ncycles\n            )\n            Bn[q] = BnS[q] * np.cos((q + 1) * delta / Ncycles) + AnS[q] * np.sin(\n                (q + 1) * delta / Ncycles\n            )\n\n        if abs(An[Ncycles - 1]) > abs(Bn[Ncycles - 1]):\n            if An[Ncycles - 1] < 0:\n                An = -An\n                Bn = -Bn\n        else:  # if the fundamental of Bn was larger, use it as the reference\n            if Bn[Ncycles - 1] < 0:\n                An = -An\n                Bn = -Bn\n\n        return gam_0, Bn, An, Ncycles\n\n    def reconstruct_gamma_tau(self, An, Bn, gam_0, Ncycles):\n        PPC = 4 * self.PPQC  # Points Per Cycle\n\n        gam_recon = np.zeros(PPC)\n        for q in range(PPC):  # sum for each point in time, 1 full cycle, no overlap\n            gam_recon[q] = gam_0 * np.sin(\n                2 * np.pi * q / PPC\n            )  # Reconstruct WITHOUT phase shift\n\n        # make gam_recon 1.5 cycles with 1 point overlap\n        gam_recon = np.array(\n            gam_recon.tolist() + gam_recon[: 2 * self.PPQC + 1].tolist()\n        )\n\n        tau_recon = np.zeros(PPC)  # initialize tau_recon   (m harmonics included)\n\n        for q in range(PPC):  # sum for each point in time for 1 full cycle, no overlap\n            for p in range(\n                1, self.HHSR + 1, 2\n            ):  # self.HHSR:total number of harmonics to consider; sum over ODD harmonics only\n                tau_recon[q] += Bn[Ncycles * p - 1] * np.sin(\n                    p * 2 * np.pi * q / PPC\n                ) + An[Ncycles * p - 1] * np.cos(p * 2 * np.pi * q / PPC)\n\n        # make tau_recon* 1.5 cycles with 1 point overlap\n        tau_recon = np.array(\n            tau_recon.tolist() + tau_recon[0 : 2 * self.PPQC + 1].tolist()\n        )\n\n        return gam_recon, tau_recon\n\n\nclass CLApplicationLAOS(BaseApplicationLAOS, Application):\n    """"""CL Version""""""\n\n    def __init__(self, name=""LAOS"", parent=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent)\n        # usually this class stays empty\n\n\nclass GUIApplicationLAOS(BaseApplicationLAOS, QApplicationWindow):\n    """"""GUI Version""""""\n\n    def __init__(self, name=""LAOS"", parent=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent)\n\n        self.add_HHSR_widget()\n        self.set_HHSR_widget_visible(False)\n        self.add_PPQC_widget()\n        self.set_PPQC_widget_visible(False)\n\n    def add_HHSR_widget(self):\n        """"""Add spinbox for HHSR""""""\n        self.sb_HHSR = QSpinBox()\n        self.sb_HHSR.setRange(1, 99)\n        self.sb_HHSR.setSingleStep(2)\n        self.sb_HHSR.setValue(self.HHSR)\n        self.sb_HHSR.setToolTip(""Highest harmonic to consider in stress reconstruction"")\n        self.sb_HHSR.valueChanged.connect(self.change_HHSR)\n        self.viewLayout.insertWidget(3, self.sb_HHSR)\n\n    def change_HHSR(self, val):\n        """"""Change the value of the HHSR.\n        Called when the spinbox value is changed""""""\n        self.HHSR = val\n        self.update_all_ds_plots()\n\n    def set_HHSR_widget_visible(self, state):\n        """"""Show/Hide the extra widget ""HHSR"" """"""\n        self.sb_HHSR.setVisible(state)\n\n    def add_PPQC_widget(self):\n        """"""Add spinbox for HHSR""""""\n        self.sb_PPQC = QSpinBox()\n        self.sb_PPQC.setRange(20, 500)\n        self.sb_PPQC.setSingleStep(10)\n        self.sb_PPQC.setValue(self.PPQC)\n        self.sb_PPQC.setToolTip(\n            ""Points per quarter cycle in FT reconstruction (20-500)""\n        )\n        self.sb_PPQC.valueChanged.connect(self.change_PPQC)\n        self.viewLayout.insertWidget(3, self.sb_PPQC)\n\n    def change_PPQC(self, val):\n        """"""Change the value of the PPQC.\n        Called when the spinbox value is changed""""""\n        self.PPQC = val\n        self.update_all_ds_plots()\n\n    def set_PPQC_widget_visible(self, state):\n        """"""Show/Hide the extra widget ""PPQC"" """"""\n        self.sb_PPQC.setVisible(state)\n\n    def set_view_tools(self, view_name):\n        """"""Show/Hide extra view widgets depending on the current view""""""\n        if view_name in [\n            ""sigma(gamma) FILT"",\n            ""FFT spectrum"",\n            ""sigma(gdot) FILT"",\n            ""sigma(gamma) ANLS"",\n            ""sigma(gdot) ANLS"",\n            ""Cheb elastic"",\n            ""Cheb viscous"",\n        ]:\n            self.set_HHSR_widget_visible(True)\n            self.set_PPQC_widget_visible(True)\n        else:\n            try:\n                self.set_HHSR_widget_visible(False)\n                self.set_PPQC_widget_visible(False)\n            except AttributeError:\n                pass\n'"
RepTate/applications/ApplicationLVE.py,63,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module ApplicationLVE\n\nModule for the analysis of small angle oscillatory shear data - Master curves\n\n""""""\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Application import Application\nfrom RepTate.gui.QApplicationWindow import QApplicationWindow\nfrom RepTate.core.View import View\nfrom RepTate.core.FileType import TXTColumnFile, ExcelFile\nimport numpy as np\n\n\nclass ApplicationLVE(CmdBase):\n    """"""Application to Analyze Linear Viscoelastic Data""""""\n\n    appname = ""LVE""\n    description = ""Linear Viscoelasticity""\n    extension = ""tts""\n\n    def __new__(cls, name=""LVE"", parent=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUIApplicationLVE(name, parent)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLApplicationLVE(name, parent)\n        )\n\n\nclass BaseApplicationLVE:\n    """"""Base Class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/LVE/LVE.html""\n    appname = ApplicationLVE.appname\n\n    def __init__(self, name=""LVE"", parent=None):\n        """"""**Constructor**""""""\n        from RepTate.theories.TheoryMaxwellModes import TheoryMaxwellModesFrequency\n        from RepTate.theories.TheoryLikhtmanMcLeish2002 import TheoryLikhtmanMcLeish2002\n        from RepTate.theories.TheoryDSMLinear import TheoryDSMLinear\n        from RepTate.theories.TheoryCarreauYasuda import TheoryCarreauYasuda\n        from RepTate.theories.TheoryRouse import TheoryRouseFrequency\n        from RepTate.theories.TheoryDTDStars import TheoryDTDStarsFreq\n        from RepTate.theories.TheoryBobLVE import TheoryBobLVE\n        from RepTate.theories.TheoryRDPLVE import TheoryRDPLVE\n        from RepTate.theories.TheoryStickyReptation import TheoryStickyReptation\n        from RepTate.theories.TheoryShanbhagMaxwellModes import (\n            TheoryShanbhagMaxwellModesFrequency,\n        )\n\n        super().__init__(name, parent)\n\n        # VIEWS\n        self.views[""log(G\',G\'\'(w))""] = View(\n            name=""log(G\',G\'\'(w))"",\n            description=""log Storage,Loss moduli"",\n            x_label=""log($\\omega$)"",\n            y_label=""log(G\'($\\omega$),G\'\'($\\omega$))"",\n            x_units=""rad/s"",\n            y_units=""Pa"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewLogG1G2,\n            n=2,\n            snames=[""log(G\'(w))"", ""log(G\'\'(w))""],\n        )\n        self.views[""G\',G\'\'(w)""] = View(\n            ""G\',G\'\'(w)"",\n            ""Storage,Loss moduli"",\n            ""$\\omega$"",\n            ""G\'($\\omega$),G\'\'($\\omega$)"",\n            ""rad/s"",\n            ""Pa"",\n            True,\n            True,\n            self.viewG1G2,\n            2,\n            [""G\'(w)"", ""G\'\'(w)""],\n        )\n        self.views[""etastar""] = View(\n            ""etastar"",\n            ""Complex Viscosity"",\n            ""$\\omega$"",\n            ""$|\\eta^*(\\omega)|$"",\n            ""rad/s"",\n            ""Pa.s"",\n            True,\n            True,\n            self.viewEtaStar,\n            1,\n            [""eta*(w)""],\n        )\n        self.views[""logetastar""] = View(\n            ""logetastar"",\n            ""log Complex Viscosity"",\n            ""log($\\omega$)"",\n            ""log$|\\eta^*(\\omega)|$"",\n            ""rad/s"",\n            ""Pa.s"",\n            False,\n            False,\n            self.viewLogEtaStar,\n            1,\n            [""log(eta*(w))""],\n        )\n        self.views[""delta""] = View(\n            ""delta"",\n            ""delta"",\n            ""$\\omega$"",\n            ""$\\delta(\\omega)$"",\n            ""rad/s"",\n            ""-"",\n            True,\n            True,\n            self.viewDelta,\n            1,\n            [""delta(w)""],\n        )\n        self.views[""tan(delta)""] = View(\n            ""tan(delta)"",\n            ""tan(delta)"",\n            ""$\\omega$"",\n            ""tan($\\delta$)"",\n            ""rad/s"",\n            ""-"",\n            True,\n            True,\n            self.viewTanDelta,\n            1,\n            [""tan(delta((w))""],\n        )\n        self.views[""log(tan(delta))""] = View(\n            ""log(tan(delta))"",\n            ""log(tan(delta))"",\n            ""log($\\omega$)"",\n            ""log(tan($\\delta$))"",\n            ""rad/s"",\n            ""-"",\n            False,\n            False,\n            self.viewLogTanDelta,\n            1,\n            [""log(tan(delta((w)))""],\n        )\n        self.views[""log(G*)""] = View(\n            ""log(G*)"",\n            ""log(G*(omega))"",\n            ""log($\\omega$)"",\n            ""log(G*($\\omega$))"",\n            ""rad/s"",\n            ""Pa"",\n            False,\n            False,\n            self.viewLogGstar,\n            1,\n            [""log(G*)""],\n        )\n        self.views[""log(tan(delta),G*)""] = View(\n            ""log(tan(delta),G*)"",\n            ""log(tan($\\delta$))"",\n            ""log(G*)"",\n            ""log(tan($\\delta$))"",\n            ""Pa"",\n            ""-"",\n            False,\n            False,\n            self.viewLogtandeltaGstar,\n            1,\n            [""log(tan($\\delta))""],\n        )\n        self.views[""delta(G*)""] = View(\n            ""delta(G*)"",\n            ""$\\delta$)"",\n            ""log(G*)"",\n            ""$\\delta$)"",\n            ""Pa"",\n            ""deg"",\n            False,\n            False,\n            self.viewdeltatanGstar,\n            1,\n            [""delta""],\n        )\n        self.views[""J\',J\'\'(w)""] = View(\n            ""J\',J\'\'(w)"",\n            ""J moduli"",\n            ""$\\omega$"",\n            ""J\'($\\omega$),J\'\'($\\omega$)"",\n            ""rad/s"",\n            ""$Pa^{-1}$"",\n            True,\n            True,\n            self.viewJ1J2,\n            2,\n            [""J\'(w)"", ""J\'\'(w)""],\n        )\n        self.views[""Cole-Cole""] = View(\n            ""Cole-Cole"",\n            ""Cole-Cole plot"",\n            ""$\\eta\'$"",\n            ""$\\eta\'\'$"",\n            ""Pa.s"",\n            ""Pa.s"",\n            False,\n            False,\n            self.viewColeCole,\n            1,\n            [""$eta\'$""],\n        )\n        self.views[""log(G\')""] = View(\n            name=""log(G\')"",\n            description=""log Storage modulus"",\n            x_label=""log($\\omega$)"",\n            y_label=""log(G\'($\\omega$))"",\n            x_units=""rad/s"",\n            y_units=""Pa"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewLogG1,\n            n=1,\n            snames=[""log(G\'(w))""],\n        )\n        self.views[""G\'""] = View(\n            ""G\'"",\n            ""Storage modulus"",\n            ""$\\omega$"",\n            ""G\'($\\omega$)"",\n            ""rad/s"",\n            ""Pa"",\n            True,\n            True,\n            self.viewG1,\n            1,\n            [""G\'(w)""],\n        )\n        self.views[""log(G\'\')""] = View(\n            name=""log(G\'\')"",\n            description=""log Loss modulus"",\n            x_label=""log($\\omega$)"",\n            y_label=""log(G\'($\\omega$))"",\n            x_units=""rad/s"",\n            y_units=""Pa"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewLogG2,\n            n=1,\n            snames=[""log(G\'\'(w))""],\n        )\n        self.views[""G\'\'""] = View(\n            ""G\'\'"",\n            ""Loss modulus"",\n            ""$\\omega$"",\n            ""G\'\'($\\omega$)"",\n            ""rad/s"",\n            ""Pa"",\n            True,\n            True,\n            self.viewG2,\n            1,\n            [""G\'\'(w)""],\n        )\n        self.views[""log(G\',G\'\'(w),tan(delta))""] = View(\n            name=""log(G\',G\'\'(w),tan(delta))"",\n            description=""log Storage,Loss moduli, tan(delta)"",\n            x_label=""log($\\omega$)"",\n            y_label=""log(G\'($\\omega$),G\'\'($\\omega$),tan($\\delta$))"",\n            x_units=""rad/s"",\n            y_units=""Pa,-"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewLogG1G2tandelta,\n            n=3,\n            snames=[""log(G\'(w))"", ""log(G\'\'(w)),log(tan(delta))""],\n        )\n\n        # set multiviews\n        self.nplots = 1\n        self.multiviews = []\n        for i in range(self.nplot_max):\n            # set views in the same order as declared above\n            self.multiviews.append(list(self.views.values())[i])\n        self.multiplots.reorg_fig(self.nplots)\n\n        # FILES\n        ftype = TXTColumnFile(\n            ""LVE files"",\n            ""tts"",\n            ""LVE files"",\n            [""w"", ""G\'"", ""G\'\'""],\n            [""Mw"", ""T""],\n            [""rad/s"", ""Pa"", ""Pa""],\n        )\n        self.filetypes[ftype.extension] = ftype\n        self.filetypes[""osc""] = TXTColumnFile(\n            ""OSC files"",\n            ""osc"",\n            ""Small-angle oscillatory masurements from the Rheometer"",\n            [""w"", ""G\'"", ""G\'\'""],\n            [""Mw"", ""T""],\n            [""rad/s"", ""Pa"", ""Pa""],\n        )\n\n        self.filetypes[""xlsx""] = ExcelFile(\n            ""Excel files"",\n            ""xlsx"",\n            ""Excel File"",\n            [""w"", ""G\'"", ""G\'\'""],\n            [],\n            [""rad/s"", ""Pa"", ""Pa""],\n        )\n\n        # THEORIES\n        self.theories[TheoryMaxwellModesFrequency.thname] = TheoryMaxwellModesFrequency\n        self.theories[TheoryLikhtmanMcLeish2002.thname] = TheoryLikhtmanMcLeish2002\n        self.theories[TheoryCarreauYasuda.thname] = TheoryCarreauYasuda\n        self.theories[TheoryDSMLinear.thname] = TheoryDSMLinear\n        self.theories[TheoryRouseFrequency.thname] = TheoryRouseFrequency\n        self.theories[TheoryDTDStarsFreq.thname] = TheoryDTDStarsFreq\n        self.theories[TheoryBobLVE.thname] = TheoryBobLVE\n        self.theories[TheoryRDPLVE.thname] = TheoryRDPLVE\n        self.theories[TheoryStickyReptation.thname] = TheoryStickyReptation\n        self.theories[\n            TheoryShanbhagMaxwellModesFrequency.thname\n        ] = TheoryShanbhagMaxwellModesFrequency\n        self.add_common_theories()\n\n        # set the current view\n        self.set_views()\n\n    def viewLogG1G2(self, dt, file_parameters):\n        """"""Logarithm of the storage modulus :math:`\\\\log(G\'(\\\\omega))` and loss modulus :math:`\\\\log(G\'\'(\\\\omega))` vs :math:`\\\\log(\\\\omega)`""""""\n        x = np.zeros((dt.num_rows, 2))\n        y = np.zeros((dt.num_rows, 2))\n        x[:, 0] = np.log10(dt.data[:, 0])\n        x[:, 1] = np.log10(dt.data[:, 0])\n        y[:, 0] = np.log10(dt.data[:, 1])\n        y[:, 1] = np.log10(dt.data[:, 2])\n        return x, y, True\n\n    def viewG1G2(self, dt, file_parameters):\n        """"""Storage modulus :math:`G\'(\\\\omega)` and loss modulus :math:`G\'\'(\\\\omega)` (in logarithmic scale) vs :math:`\\\\omega` (in logarithmic scale)""""""\n        x = np.zeros((dt.num_rows, 2))\n        y = np.zeros((dt.num_rows, 2))\n        x[:, 0] = dt.data[:, 0]\n        x[:, 1] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 1]\n        y[:, 1] = dt.data[:, 2]\n        return x, y, True\n\n    def viewEtaStar(self, dt, file_parameters):\n        """"""Complex viscosity :math:`\\\\eta^*(\\\\omega) = \\\\sqrt{G\'^2 + G\'\'^2}/\\\\omega` (in logarithmic scale) vs :math:`\\\\omega` (in logarithmic scale)""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = np.sqrt(dt.data[:, 1] ** 2 + dt.data[:, 2] ** 2) / dt.data[:, 0]\n        return x, y, True\n\n    def viewLogEtaStar(self, dt, file_parameters):\n        """"""Logarithm of the complex viscosity :math:`\\\\eta^*(\\\\omega) = \\\\sqrt{G\'^2 + G\'\'^2}/\\\\omega` vs :math:`\\\\log(\\\\omega)`""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = np.log10(dt.data[:, 0])\n        y[:, 0] = np.log10(\n            np.sqrt(dt.data[:, 1] ** 2 + dt.data[:, 2] ** 2) / dt.data[:, 0]\n        )\n        return x, y, True\n\n    def viewDelta(self, dt, file_parameters):\n        """"""Loss or phase angle :math:`\\\\delta(\\\\omega)=\\\\arctan(G\'\'/G\')\\\\cdot 180/\\\\pi` (in degrees, in logarithmic scale) vs :math:`\\\\omega` (in logarithmic scale)""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = np.arctan2(dt.data[:, 2], dt.data[:, 1]) * 180 / np.pi\n        return x, y, True\n\n    def viewTanDelta(self, dt, file_parameters):\n        """"""Tangent of the phase angle :math:`\\\\tan(\\\\delta(\\\\omega))=G\'\'/G\'` (in logarithmic scale) vs :math:`\\\\omega` (in logarithmic scale)""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 2] / dt.data[:, 1]\n        return x, y, True\n\n    def viewLogTanDelta(self, dt, file_parameters):\n        """""":math:`\\\\log(\\\\tan(\\\\delta(\\\\omega)))=\\\\log(G\'\'/G\')` vs :math:`\\\\log(\\\\omega)`""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = np.log10(dt.data[:, 0])\n        y[:, 0] = np.log10(dt.data[:, 2] / dt.data[:, 1])\n        return x, y, True\n\n    def viewLogGstar(self, dt, file_parameters):\n        """"""Logarithm of the modulus of the complex viscosity :math:`|G^*(\\\\omega)|=\\\\sqrt{G\'^2+G\'\'^2}` vs :math:`\\\\log(\\\\omega)`""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = np.log10(dt.data[:, 0])\n        y[:, 0] = np.log10(np.sqrt(np.square(dt.data[:, 1]) + np.square(dt.data[:, 2])))\n        return x, y, True\n\n    def viewLogtandeltaGstar(self, dt, file_parameters):\n        """"""Logarithm of the tangent of the loss angle :math:`\\\\tan(\\\\delta(\\\\omega))=G\'\'/G\'` vs logarithm of the modulus of the complex viscosity :math:`|G^*(\\\\omega)|=\\\\sqrt{G\'^2+G\'\'^2}`""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = np.log10(np.sqrt(np.square(dt.data[:, 1]) + np.square(dt.data[:, 2])))\n        y[:, 0] = np.log10(dt.data[:, 2] / dt.data[:, 1])\n        return x, y, True\n\n    def viewdeltatanGstar(self, dt, file_parameters):\n        """"""Loss angle :math:`\\\\delta(\\\\omega)=\\\\arctan(G\'\'/G\')` vs logarithm of the modulus of the complex viscosity :math:`|G^*(\\\\omega)|=\\\\sqrt{G\'^2+G\'\'^2}`""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = np.log10(np.sqrt(np.square(dt.data[:, 1]) + np.square(dt.data[:, 2])))\n        y[:, 0] = np.arctan2(dt.data[:, 2], dt.data[:, 1]) * 180 / np.pi\n        return x, y, True\n\n    def viewJ1J2(self, dt, file_parameters):\n        """"""Storage compliance :math:`J\'(\\\\omega)=G\'/(G\'^2+G\'\'^2)` and loss compliance :math:`J\'\'(\\\\omega)=G\'\'/(G\'^2+G\'\'^2)` (in logarithmic scale) vs :math:`\\\\omega` (in logarithmic scale)""""""\n        x = np.zeros((dt.num_rows, 2))\n        y = np.zeros((dt.num_rows, 2))\n        x[:, 0] = dt.data[:, 0]\n        x[:, 1] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 1] / (np.square(dt.data[:, 1]) + np.square(dt.data[:, 2]))\n        y[:, 1] = dt.data[:, 2] / (np.square(dt.data[:, 1]) + np.square(dt.data[:, 2]))\n        return x, y, True\n\n    def viewColeCole(self, dt, file_parameters):\n        """"""Cole-Cole plot: out of phase viscosity :math:`\\\\eta\'\'(\\\\omega)=G\'(\\\\omega)/\\\\omega` vs dynamic viscosity :math:`\\\\eta\'(\\\\omega)=G\'\'(\\\\omega)/\\\\omega`""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 2] / dt.data[:, 0]\n        y[:, 0] = dt.data[:, 1] / dt.data[:, 0]\n        return x, y, True\n\n    def viewLogG1(self, dt, file_parameters):\n        """"""Logarithm of the storage modulus :math:`\\\\log(G\'(\\\\omega))` vs :math:`\\\\log(\\\\omega)`""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = np.log10(dt.data[:, 0])\n        y[:, 0] = np.log10(dt.data[:, 1])\n        return x, y, True\n\n    def viewG1(self, dt, file_parameters):\n        """"""Storage modulus :math:`G\'(\\\\omega)` (in logarithmic scale) vs :math:`\\\\omega` (in logarithmic scale)""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 1]\n        return x, y, True\n\n    def viewLogG2(self, dt, file_parameters):\n        """"""Logarithm of the loss modulus :math:`\\\\log(G\'\'(\\\\omega))` vs :math:`\\\\log(\\\\omega)`""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = np.log10(dt.data[:, 0])\n        y[:, 0] = np.log10(dt.data[:, 2])\n        return x, y, True\n\n    def viewG2(self, dt, file_parameters):\n        """"""Loss modulus :math:`G\'\'(\\\\omega)` (in logarithmic scale) vs :math:`\\\\omega` (in logarithmic scale)""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 2]\n        return x, y, True\n\n    def viewLogG1G2tandelta(self, dt, file_parameters):\n        """"""Logarithm of the storage modulus :math:`\\\\log(G\'(\\\\omega))`, loss modulus :math:`\\\\log(G\'\'(\\\\omega))` and tangent of the loss angle :math:`\\\\log(\\\\tan(\\\\delta(\\\\omega)))=\\\\log(G\'\'/G\')` vs :math:`\\\\log(\\\\omega)`""""""\n        x = np.zeros((dt.num_rows, 3))\n        y = np.zeros((dt.num_rows, 3))\n        x[:, 0] = np.log10(dt.data[:, 0])\n        x[:, 1] = np.log10(dt.data[:, 0])\n        x[:, 2] = np.log10(dt.data[:, 0])\n        y[:, 0] = np.log10(dt.data[:, 1])\n        y[:, 1] = np.log10(dt.data[:, 2])\n        y[:, 2] = np.log10(dt.data[:, 2] / dt.data[:, 1])\n        return x, y, True\n\n\nclass CLApplicationLVE(BaseApplicationLVE, Application):\n    """"""CL Version""""""\n\n    def __init__(self, name=""LVE"", parent=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent)\n\n\nclass GUIApplicationLVE(BaseApplicationLVE, QApplicationWindow):\n    """"""GUI Version""""""\n\n    def __init__(self, name=""LVE"", parent=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent)\n'"
RepTate/applications/ApplicationMWD.py,6,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module ApplicationMWD\n\nModule for handling Molecular weight distributions from GPC experiments.\n\n""""""\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Application import Application\nfrom RepTate.gui.QApplicationWindow import QApplicationWindow\nfrom RepTate.core.View import View\nfrom RepTate.core.FileType import TXTColumnFile\nimport numpy as np\n\n\nclass ApplicationMWD(CmdBase):\n    """"""Application to analyze Molecular Weight Distributions""""""\n\n    appname = ""MWD""\n    description = ""Experimental Molecular weight distributions""\n    extension = ""gpc""\n\n    def __new__(cls, name=""LVE"", parent=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUIApplicationMWD(name, parent)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLApplicationMWD(name, parent)\n        )\n\n\nclass BaseApplicationMWD:\n    """"""Base Class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/MWD/MWD.html""\n    appname = ApplicationMWD.appname\n\n    def __init__(self, name=""MWD"", parent=None):\n        """"""**Constructor**""""""\n        from RepTate.theories.TheoryDiscrMWD import TheoryDiscrMWD\n        from RepTate.theories.TheoryGEX import TheoryGEX\n        from RepTate.theories.TheoryLogNormal import TheoryLogNormal\n\n        super().__init__(name, parent, nplot_max=3)\n\n        # VIEWS\n        self.views[""log-lin""] = View(\n            name=""log-lin"",\n            description=""MWD lin W vs log M"",\n            x_label=""M"",\n            y_label=""dW/dlogM"",\n            x_units=""g/mol"",\n            y_units=""-"",\n            log_x=True,\n            log_y=False,\n            view_proc=self.view_WM,\n            n=1,\n            snames=[""W""],\n        )\n        self.views[""log-log""] = View(\n            name=""log-log"",\n            description=""MWD log W vs log M"",\n            x_label=""log(M)"",\n            y_label=""log(dW/dlogM)"",\n            x_units=""g/mol"",\n            y_units=""-"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.view_logWM,\n            n=1,\n            snames=[""log(W)""],\n        )\n        self.views[""lin-lin""] = View(\n            name=""lin-lin"",\n            description=""MWD lin W vs lin M"",\n            x_label=""M"",\n            y_label=""dW/dlogM"",\n            x_units=""g/mol"",\n            y_units=""-"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.view_WM,\n            n=1,\n            snames=[""W""],\n        )\n\n        # set multiviews\n        self.nplots = 1\n        self.multiviews = []\n        for i in range(self.nplot_max):\n            # set views in the same order as declared above\n            self.multiviews.append(list(self.views.values())[i])\n        self.multiplots.reorg_fig(self.nplots)\n\n        # FILES\n        ftype = TXTColumnFile(\n            ""GPC Files"",\n            ""gpc"",\n            ""Molecular Weight Distribution"",\n            [""M"", ""W(logM)""],\n            [""Mn"", ""Mw"", ""PDI""],\n            [""g/mol"", ""-""],\n        )\n        # ftype=TXTColumnFile(""GPC Files"", ""gpc"", ""Molecular Weight Distribution"", [\'M\',\'W(logM)\'], [], [\'kDa\', \'-\'])\n        self.filetypes[ftype.extension] = ftype\n        ftype = TXTColumnFile(\n            ""React Files"",\n            ""reac"",\n            ""Relaxation modulus"",\n            [""M"", ""W(logM)"", ""g"", ""br/1000C""],\n            [""Mn"", ""Mw"", ""PDI""],\n            [""g/mol"", ""-""],\n        )\n        self.filetypes[ftype.extension] = ftype\n\n        # THEORIES\n        self.theories[TheoryDiscrMWD.thname] = TheoryDiscrMWD\n        self.theories[TheoryGEX.thname] = TheoryGEX\n        self.theories[TheoryLogNormal.thname] = TheoryLogNormal\n        self.add_common_theories()\n\n        # set the current view\n        self.set_views()\n\n    def view_WM(self, dt, file_parameters):\n        """""":math:`W(M)` vs :math:`M`\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 1]\n        return x, y, True\n\n    def view_logWM(self, dt, file_parameters):\n        """""":math:`\\\\log(W(M))` vs :math:`\\\\log(M)`\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = np.log10(dt.data[:, 0])\n        y[:, 0] = np.log10(dt.data[:, 1])\n        return x, y, True\n\n\nclass CLApplicationMWD(BaseApplicationMWD, Application):\n    """"""CL Version""""""\n\n    def __init__(self, name=""MWD"", parent=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent)\n\n\nclass GUIApplicationMWD(BaseApplicationMWD, QApplicationWindow):\n    """"""GUI Version""""""\n\n    def __init__(self, name=""MWD"", parent=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent)\n'"
RepTate/applications/ApplicationNLVE.py,20,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module ApplicationNLVE\n\nModule for handling data from start up of shear and extensional flow experiments.\n\n""""""\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Application import Application\nfrom RepTate.gui.QApplicationWindow import QApplicationWindow\nfrom RepTate.core.View import View\nfrom RepTate.core.FileType import TXTColumnFile\nimport numpy as np\n\n\nclass ApplicationNLVE(CmdBase):\n    """"""Application to Analyze Start up of Nonlinear flow""""""\n\n    appname = ""NLVE""\n    description = ""Non-Linear Flow""\n    extension = ""shear uext""\n\n    def __new__(cls, name=""NLVE"", parent=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUIApplicationNLVE(name, parent)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLApplicationNLVE(name, parent)\n        )\n\n\nclass BaseApplicationNLVE:\n    """"""Base Class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/NLVE/NLVE.html""\n    appname = ApplicationNLVE.appname\n\n    def __init__(self, name=""NLVE"", parent=None):\n        """"""**Constructor**""""""\n        from RepTate.theories.TheoryRoliePoly import TheoryRoliePoly\n        from RepTate.theories.TheoryUCM import TheoryUCM\n        from RepTate.theories.TheoryGiesekus import TheoryGiesekus\n        from RepTate.theories.TheoryPomPom import TheoryPomPom\n        from RepTate.theories.TheoryRolieDoublePoly import TheoryRolieDoublePoly\n        from RepTate.theories.TheoryBobNLVE import TheoryBobNLVE\n        from RepTate.theories.TheoryPETS import TheoryPETS\n        from RepTate.theories.TheorySCCR import TheorySCCR\n\n        super().__init__(name, parent)\n\n        # VIEWS\n        self.views[""log(eta(t))""] = View(\n            name=""log(eta(t))"",\n            description=""log transient viscosity"",\n            x_label=""log(t)"",\n            y_label=""log($\\eta^+$)"",\n            x_units=""s"",\n            y_units=""Pa$\\cdot$s"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewLogeta,\n            n=1,\n            snames=[""log(eta)""],\n        )\n        self.views[""eta(t)""] = View(\n            name=""eta(t)"",\n            description=""transient viscosity"",\n            x_label=""t"",\n            y_label=""$\\eta^+$"",\n            x_units=""s"",\n            y_units=""Pa$\\cdot$s"",\n            log_x=True,\n            log_y=True,\n            view_proc=self.vieweta,\n            n=1,\n            snames=[""eta""],\n        )\n        self.views[""log(sigma(gamma))""] = View(\n            name=""log(sigma(gamma))"",\n            description=""log transient shear stress vs gamma"",\n            x_label=""log($\\gamma$)"",\n            y_label=""log($\\sigma^+$)"",\n            x_units=""-"",\n            y_units=""Pa"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewLogSigmaGamma,\n            n=1,\n            snames=[""log(sigma)""],\n        )\n        self.views[""sigma(gamma)""] = View(\n            name=""sigma(gamma)"",\n            description=""transient shear stress vs gamma"",\n            x_label=""$\\gamma$"",\n            y_label=""$\\sigma^+$"",\n            x_units=""-"",\n            y_units=""Pa"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewSigmaGamma,\n            n=1,\n            snames=[""sigma""],\n        )\n        self.views[""log(sigma(t))""] = View(\n            name=""log(sigma(t))"",\n            description=""log transient shear stress vs time"",\n            x_label=""log(t)"",\n            y_label=""log($\\sigma^+$)"",\n            x_units=""s"",\n            y_units=""Pa"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewLogSigmaTime,\n            n=1,\n            snames=[""log(sigma)""],\n        )\n        self.views[""sigma(t)""] = View(\n            name=""sigma(t)"",\n            description=""transient shear stress vs time"",\n            x_label=""t"",\n            y_label=""$\\sigma^+$"",\n            x_units=""s"",\n            y_units=""Pa"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewSigmaTime,\n            n=1,\n            snames=[""sigma""],\n        )\n        self.views[""Flow Curve""] = View(\n            name=""Flow Curve"",\n            description=""Steady state stress vs flow rate"",\n            x_label=""Flow rate"",\n            y_label=""$\\sigma$"",\n            x_units=""s$^{-1}$"",\n            y_units=""Pa"",\n            log_x=True,\n            log_y=True,\n            view_proc=self.view_flowcurve,\n            n=1,\n            snames=[""sigma""],\n            with_thline=False,\n            filled=True,\n        )\n\n        # set multiviews\n        self.nplots = 1\n        self.multiviews = []\n        for i in range(self.nplot_max):\n            # set views in the same order as declared above\n            self.multiviews.append(list(self.views.values())[i])\n        self.multiplots.reorg_fig(self.nplots)\n\n        # FILES\n        ftype = TXTColumnFile(\n            ""Start-up of shear flow"",\n            ""shear"",\n            ""Shear flow files"",\n            [""t"", ""sigma_xy""],\n            [""gdot"", ""T""],\n            [""s"", ""Pa$\\cdot$s""],\n        )\n        self.filetypes[ftype.extension] = ftype\n        ftype = TXTColumnFile(\n            ""Elongation flow"",\n            ""uext"",\n            ""Elongation flow files"",\n            [""t"", ""N1""],\n            [""gdot"", ""T""],\n            [""s"", ""Pa$\\cdot$s""],\n        )\n        self.filetypes[ftype.extension] = ftype\n\n        # THEORIES\n        self.theories[TheoryRoliePoly.thname] = TheoryRoliePoly\n        self.theories[TheoryUCM.thname] = TheoryUCM\n        self.theories[TheoryGiesekus.thname] = TheoryGiesekus\n        self.theories[TheoryPomPom.thname] = TheoryPomPom\n        self.theories[TheoryRolieDoublePoly.thname] = TheoryRolieDoublePoly\n        self.theories[TheoryBobNLVE.thname] = TheoryBobNLVE\n        self.theories[TheoryPETS.thname] = TheoryPETS\n        self.theories[TheorySCCR.thname] = TheorySCCR\n        self.add_common_theories()\n\n        # set the current view\n        self.set_views()\n\n    def viewLogeta(self, dt, file_parameters):\n        """"""Logarithm of the transient shear or extensional viscosity (depending on the experiment) :math:`\\\\eta(t)` vs logarithm of time :math:`t`\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = np.log10(dt.data[:, 0])\n        try:\n            flow_rate = float(file_parameters[""gdot""])\n        except:\n            flow_rate = float(file_parameters[""edot""])\n        y[:, 0] = np.log10(dt.data[:, 1] / flow_rate)\n        return x, y, True\n\n    def vieweta(self, dt, file_parameters):\n        """"""Transient shear or extensional viscosity (depending on the experiment) :math:`\\\\eta(t)` vs time :math:`t` (both axes in logarithmic scale by default)\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        try:\n            flow_rate = float(file_parameters[""gdot""])\n        except:\n            flow_rate = float(file_parameters[""edot""])\n        y[:, 0] = dt.data[:, 1] / flow_rate\n        return x, y, True\n\n    def viewLogSigmaTime(self, dt, file_parameters):\n        """"""Logarithm of the transient shear or extensional stress (depending on the experiment) :math:`\\\\sigma(t)` vs logarithm of time :math:`t`\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = np.log10(dt.data[:, 0])\n        y[:, 0] = np.log10(dt.data[:, 1])\n        return x, y, True\n\n    def viewSigmaTime(self, dt, file_parameters):\n        """"""Transient shear or extensional stress (depending on the experiment) :math:`\\\\sigma(t)` vs time :math:`t`\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 1]\n        return x, y, True\n\n    def viewLogSigmaGamma(self, dt, file_parameters):\n        """"""Logarithm of the transient shear or extensional stress (depending on the experiment) :math:`\\\\sigma(t)` vs logarithm of the strain :math:`\\\\gamma`\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        try:\n            flow_rate = float(file_parameters[""gdot""])\n        except:\n            flow_rate = float(file_parameters[""edot""])\n        x[:, 0] = np.log10(dt.data[:, 0] * flow_rate)  # compute strain\n        y[:, 0] = np.log10(dt.data[:, 1])\n        return x, y, True\n\n    def viewSigmaGamma(self, dt, file_parameters):\n        """"""Transient shear or extensional stress (depending on the experiment) :math:`\\\\sigma(t)` vs strain :math:`\\\\gamma`\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        try:\n            flow_rate = float(file_parameters[""gdot""])\n        except:\n            flow_rate = float(file_parameters[""edot""])\n        x[:, 0] = dt.data[:, 0] * flow_rate  # compute strain\n        y[:, 0] = dt.data[:, 1]\n        return x, y, True\n\n    def view_flowcurve(self, dt, file_parameters):\n        """""" :math:`\\\\sigma(t_{\\\\to\\\\infty})` vs flow rate\n        """"""\n\n        try:\n            flow_rate = float(file_parameters[""gdot""])\n        except KeyError:\n            flow_rate = float(file_parameters[""edot""])\n        x = np.zeros((1, 1))\n        y = np.zeros((1, 1))\n        x[0, 0] = flow_rate\n        y[0, 0] = dt.data[-1, 1]\n        return x, y, True\n\n\nclass CLApplicationNLVE(BaseApplicationNLVE, Application):\n    """"""CL Version""""""\n\n    def __init__(self, name=""NLVE"", parent=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent)\n\n\nclass GUIApplicationNLVE(BaseApplicationNLVE, QApplicationWindow):\n    """"""GUI Version""""""\n\n    def __init__(self, name=""NLVE"", parent=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent)\n'"
RepTate/applications/ApplicationReact.py,58,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module ApplicationReact\n\nReact module\n\n""""""\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Application import Application\nfrom RepTate.gui.QApplicationWindow import QApplicationWindow\nfrom RepTate.core.View import View\nfrom RepTate.core.FileType import TXTColumnFile\nimport numpy as np\n\n\nclass ApplicationReact(CmdBase):\n    """"""Application for Monte Carlo polymerisation""""""\n    appname = \'React\'\n    description = \'React Application\'  #used in the command-line Reptate\n    extension = \'reac\'\n\n    def __new__(cls, name=\'React\', parent=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return GUIApplicationReact(\n            name,\n            parent) if (CmdBase.mode == CmdMode.GUI) else CLApplicationReact(\n                name, parent)\n\n\nclass BaseApplicationReact:\n    """"""Base Class for both GUI and CL""""""\n\n    html_help_file = \'http://reptate.readthedocs.io/manual/Applications/React/React.html\'\n    appname = ApplicationReact.appname\n\n    def __init__(self, name=\'React\', parent=None, **kwargs):\n        """"""**Constructor**""""""\n        from RepTate.theories.TheoryLDPEBatch import TheoryTobitaBatch\n        from RepTate.theories.TheoryTobitaCSTR import TheoryTobitaCSTR\n        from RepTate.theories.TheoryMultiMetCSTR import TheoryMultiMetCSTR\n        from RepTate.theories.TheoryReactMix import TheoryReactMix\n        from RepTate.theories.TheoryCreatePolyconf import TheoryCreatePolyconf\n        from RepTate.theories.TheoryDieneCSTR import TheoryDieneCSTR\n\n        super().__init__(name, parent)\n\n        # VIEWS\n        # set the views that can be selected in the view combobox\n        self.views[""w(M)""] = View(\n            name=""w(M)"",\n            description=""Molecular weight distribution"",\n            x_label=""M"",\n            y_label=""w"",\n            x_units=""g/mol"",\n            y_units=""-"",\n            log_x=True,\n            log_y=False,\n            view_proc=self.view_wM,\n            n=1,\n            snames=[""w""])\n        self.views[""g(M)""] = View(\n            name=""g(M)"",\n            description=""g(M)"",\n            x_label=""M"",\n            y_label=""g(M)"",\n            x_units=""g/mol"",\n            y_units=""-"",\n            log_x=True,\n            log_y=False,\n            view_proc=self.view_gM,\n            n=1,\n            snames=[""g(M)""])\n        self.views[\'br/1000C\'] = View(\n            name=""br/1000C"",\n            description=""br/1000C(M)"",\n            x_label=""M"",\n            y_label=""br/1000C"",\n            x_units=""g/mol"",\n            y_units=""-"",\n            log_x=True,\n            log_y=False,\n            view_proc=self.view_br_1000C,\n            n=1,\n            snames=[""br/1000C""])\n        self.views[""log(w(M))""] = View(\n            name=""log(w(M))"",\n            description=""Molecular weight distribution"",\n            x_label=""M"",\n            y_label=""log(w)"",\n            x_units=""g/mol"",\n            y_units=""-"",\n            log_x=True,\n            log_y=False,\n            view_proc=self.view_logwM,\n            n=1,\n            snames=[""log(w)""])\n        self.views[""log(g(M))""] = View(\n            name=""log(g(M))"",\n            description=""log(g(M))"",\n            x_label=""M"",\n            y_label=""log(g)"",\n            x_units=""g/mol"",\n            y_units=""-"",\n            log_x=True,\n            log_y=False,\n            view_proc=self.view_loggM,\n            n=1,\n            snames=[""log(g)""])\n        self.views[\'p(mass br) log-lin\'] = View(\n            name=""p(mass br) log-lin"",\n            description=""Prob. dist. of mass segement b/w branch pt log-lin scale"",\n            x_label=""M segment"",\n            y_label=""p(M segment)"",\n            x_units=""g/mol"",\n            y_units=""-"",\n            log_x=True,\n            log_y=False,\n            view_proc=self.thview_proba_mass_br,\n            n=1,\n            snames=[""p(M segment)""],\n            with_thline=False)\n        self.views[\'p(br/molecule) log-lin\'] = View(\n            name=""p(br/molecule) log-lin"",\n            description=""Prob. dist. of num. branch pt per molecule log-lin scale"",\n            x_label=""Num. br/molecule"",\n            y_label=""p(br/molecule)"",\n            x_units=""-"",\n            y_units=""-"",\n            log_x=True,\n            log_y=False,\n            view_proc=self.thview_proba_num_br,\n            n=1,\n            snames=[""p(M segment)""],\n            with_thline=False)\n        self.views[\'p(br/molecule) lin-lin\'] = View(\n            name=""p(br/molecule) lin-lin"",\n            description=""Prob. dist. of num. branch pt per molecule lin-lin scale"",\n            x_label=""Num. br/molecule"",\n            y_label=""p(br/molecule)"",\n            x_units=""-"",\n            y_units=""-"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.thview_proba_num_br,\n            n=1,\n            snames=[""p(M segment)""],\n            with_thline=False)\n        #### extra views for P&S:\n        self.views[\'<senio(prio)> log-log\'] = View(\n            name=""<senio(prio)> log-log"",\n            description=""Average seniority vs priority log-log scale"",\n            x_label=""Priority"",\n            y_label=""Average Seniority"",\n            x_units=""-"",\n            y_units=""-"",\n            log_x=True,\n            log_y=True,\n            view_proc=self.thview_avsenio_v_prio,\n            n=3,\n            snames=[""av_senio""],\n            with_thline=False)\n        self.views[\'<senio(prio)> lin-log\'] = View(\n            name=""<senio(prio)> lin-log"",\n            description=""Average seniority vs priority lin-log scale"",\n            x_label=""Priority"",\n            y_label=""Average Seniority"",\n            x_units=""-"",\n            y_units=""-"",\n            log_x=False,\n            log_y=True,\n            view_proc=self.thview_avsenio_v_prio,\n            n=3,\n            snames=[""av_senio""],\n            with_thline=False)\n        self.views[\'<senio(prio)> lin-lin\'] = View(\n            name=""<senio(prio)> lin-lin"",\n            description=""Average seniority vs priority lin-lin scale"",\n            x_label=""Priority"",\n            y_label=""Average Seniority"",\n            x_units=""-"",\n            y_units=""-"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.thview_avsenio_v_prio,\n            n=3,\n            snames=[""av_senio""],\n            with_thline=False)\n        #####\n        self.views[\'<prio(senio)> log-log\'] = View(\n            name=""<prio(senio)> log-log"",\n            description=""Average priority vs seniority log-log scale"",\n            x_label=""Seniority"",\n            y_label=""Average Priority"",\n            x_units=""-"",\n            y_units=""-"",\n            log_x=True,\n            log_y=True,\n            view_proc=self.thview_avprio_v_senio,\n            n=3,\n            snames=[""av_prio""],\n            with_thline=False)\n        self.views[\'<prio(senio)> lin-log\'] = View(\n            name=""<prio(senio)> lin-log"",\n            description=""Average priority vs seniority lin-log scale"",\n            x_label=""Seniority"",\n            y_label=""Average Priority"",\n            x_units=""-"",\n            y_units=""-"",\n            log_x=False,\n            log_y=True,\n            view_proc=self.thview_avprio_v_senio,\n            n=3,\n            snames=[""av_prio""],\n            with_thline=False)\n        self.views[\'<prio(senio)> lin-lin\'] = View(\n            name=""<prio(senio)> lin-lin"",\n            description=""Average priority vs seniority lin-lin scale"",\n            x_label=""Seniority"",\n            y_label=""Average Priority"",\n            x_units=""-"",\n            y_units=""-"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.thview_avprio_v_senio,\n            n=3,\n            snames=[""av_prio""],\n            with_thline=False)\n        #####\n        self.views[\'p(senio) log-log\'] = View(\n            name=""p(senio) log-log"",\n            description=""seniority prob. dist. log-log"",\n            x_label=""Seniority"",\n            y_label=""Probability"",\n            x_units=""-"",\n            y_units=""-"",\n            log_x=True,\n            log_y=True,\n            view_proc=self.thview_proba_senio,\n            n=1,\n            snames=[""proba_senio""],\n            with_thline=False)\n        self.views[\'p(senio) lin-log\'] = View(\n            name=""p(senio) lin-log"",\n            description=""seniority prob. dist. lin-log scale"",\n            x_label=""Seniority"",\n            y_label=""Probability"",\n            x_units=""-"",\n            y_units=""-"",\n            log_x=False,\n            log_y=True,\n            view_proc=self.thview_proba_senio,\n            n=1,\n            snames=[""proba_senio""],\n            with_thline=False)\n        #####\n        self.views[\'p(prio) log-log\'] = View(\n            name=""p(prio) log-log"",\n            description=""Priority prob. dist. log-log scale"",\n            x_label=""Priority"",\n            y_label=""Probability"",\n            x_units=""-"",\n            y_units=""-"",\n            log_x=True,\n            log_y=True,\n            view_proc=self.thview_proba_prio,\n            n=1,\n            snames=[""proba_prio""],\n            with_thline=False)\n        self.views[\'p(prio) lin-log\'] = View(\n            name=""p(prio) lin-log"",\n            description=""Priority prob. dist. lin-log scale"",\n            x_label=""Priority"",\n            y_label=""Probability"",\n            x_units=""-"",\n            y_units=""-"",\n            log_x=False,\n            log_y=True,\n            view_proc=self.thview_proba_prio,\n            n=1,\n            snames=[""proba_prio""],\n            with_thline=False)\n        ####\n        self.views[\'<mass br(senio)> log-log\'] = View(\n            name=""<mass br(senio)> log-log"",\n            description=""Average mol. mass b/w branch pt vs seniority log-log scale"",\n            x_label=""Seniority"",\n            y_label=""Av. strand length"",\n            x_units=""-"",\n            y_units=""g/mol"",\n            log_x=True,\n            log_y=True,\n            view_proc=self.thview_avarmlen_v_senio,\n            n=1,\n            snames=[""av_strand_length""],\n            with_thline=False)\n        self.views[\'<mass br(senio)> lin-lin\'] = View(\n            name=""<mass br(senio)> lin-lin"",\n            description=""Average mol. mass b/w branch pt vs seniority lin-lin scale"",\n            x_label=""Seniority"",\n            y_label=""Av. strand length"",\n            x_units=""-"",\n            y_units=""g/mol"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.thview_avarmlen_v_senio,\n            n=1,\n            snames=[""av_strand_length""],\n            with_thline=False)\n        ####\n        self.views[\'<mass br(prio)> log-log\'] = View(\n            name=""<mass br(prio)> log-log"",\n            description=""Average mol. mass b/w branch pt vs priority log-log scale"",\n            x_label=""Priority"",\n            y_label=""Av. strand length"",\n            x_units=""-"",\n            y_units=""g/mol"",\n            log_x=True,\n            log_y=True,\n            view_proc=self.thview_avarmlen_v_prio,\n            n=1,\n            snames=[""av_strand_length""],\n            with_thline=False)\n        self.views[\'<mass br(prio)> lin-lin\'] = View(\n            name=""<mass br(prio)> lin-lin"",\n            description=""Average mol. mass b/w branch pt vs priority lin-lin scale"",\n            x_label=""Priority"",\n            y_label=""Av. strand length"",\n            x_units=""-"",\n            y_units=""g/mol"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.thview_avarmlen_v_prio,\n            n=1,\n            snames=[""av_strand_length""],\n            with_thline=False)\n\n        self.extra_view_names = [\n            \'<senio(prio)> log-log\', \'<senio(prio)> lin-log\', \'<senio(prio)> lin-lin\',\n            \'<prio(senio)> log-log\', \'<prio(senio)> lin-log\', \'<prio(senio)> lin-lin\',\n            \'p(senio) log-log\', \'p(senio) lin-log\',\n            \'p(prio) log-log\', \'p(prio) lin-log\',\n            \'<mass br(senio)> log-log\', \'<mass br(senio)> lin-lin\',\n            \'<mass br(prio)> log-log\', \'<mass br(prio)> lin-lin\'\n            ]\n        #set multiviews\n        self.nplots = 3\n        self.multiviews = []\n        for i in range(self.nplot_max):\n            # set views in the same order as declared above\n            self.multiviews.append(list(self.views.values())[i])\n        self.multiplots.reorg_fig(self.nplots)\n\n        # FILES\n        # set the type of files that ApplicationReact can open\n        ftype = TXTColumnFile(\n            name=\'React files\',\n            extension=\'reac\',\n            description=\'Reatc file\',\n            col_names=[\'M\', \'w(M)\', \'g\', \'br/1000C\'],\n            basic_file_parameters=[],\n            col_units=[\'g/mol\', \'-\', \'-\', \'-\'])\n        self.filetypes[\n            ftype.extension] = ftype  #add each the file type to dictionary\n\n        # THEORIES\n        # add the theories related to ApplicationReact to the dictionary, e.g.:\n        self.theories[TheoryTobitaBatch.thname] = TheoryTobitaBatch\n        self.theories[TheoryTobitaCSTR.thname] = TheoryTobitaCSTR\n        self.theories[TheoryMultiMetCSTR.thname] = TheoryMultiMetCSTR\n        self.theories[TheoryReactMix.thname] = TheoryReactMix\n        self.theories[TheoryCreatePolyconf.thname] = TheoryCreatePolyconf\n        self.theories[TheoryDieneCSTR.thname] = TheoryDieneCSTR\n        self.add_common_theories()\n\n        #set the current view\n        self.set_views()\n        # for _ in self.extra_view_names:\n        #     self.viewComboBox.removeItem(self.viewComboBox.count() - 1)\n\n    def change_view(self):\n        """"""Redefinition to handle the x-range selection when P&S is selected""""""\n        do_priority_seniority = False\n        try:\n            ds = self.DataSettabWidget.currentWidget()\n            th = ds.TheorytabWidget.currentWidget()\n            do_priority_seniority = th.do_priority_seniority\n        except Exception as e:\n            pass\n        super().change_view(x_vis=do_priority_seniority)\n\n\n    def view_wM(self, dt, file_parameters):\n        """"""Molecular weight distribution :math:`w(M)` vs molecular weight :math:`M` (in logarithmic scale)\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 1]\n        return x, y, True\n\n    def view_logwM(self, dt, file_parameters):\n        """"""Logarithm of the molecular weight distribution :math:`\\\\log(w(M))` vs molecular weight :math:`M` (in logarithmic scale)\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = np.log10(dt.data[:, 1])\n        return x, y, True\n\n    def view_gM(self, dt, file_parameters):\n        """""":math:`g`-factor as a function of the molecular weight.\n        The :math:`g`-factor is defined as :math:`g = \\\\dfrac{\\\\langle R^2_g \\\\rangle_\\\\text{branched}}{\\\\langle R^2_g \\\\rangle_\\\\text{linear}}`\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 2]\n        return x, y, True\n\n    def view_loggM(self, dt, file_parameters):\n        """"""Logarithm of the :math:`g`-factor as a function of the molecular weight.\n        The :math:`g`-factor is defined as :math:`g = \\\\dfrac{\\\\langle R^2_g \\\\rangle_\\\\text{branched}}{\\\\langle R^2_g \\\\rangle_\\\\text{linear}}`\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = np.log10(dt.data[:, 2])\n        return x, y, True\n\n    def view_br_1000C(self, dt, file_parameters):\n        """"""Number of branching points per 1000 carbon as a function of the molecular weight\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 3]\n        return x, y, True\n\n    def thview_avprio_v_senio(self, dt, file_parameters):\n        try:\n            data = dt.extra_tables[\'avprio_v_senio\']\n        except:\n            x = np.zeros((1, 3))\n            y = np.zeros((1, 3))\n            y[:] = np.nan\n            return x, y, True\n\n        nrows = len(data[:, 0])\n        x = np.zeros((nrows, 3))\n        y = np.zeros((nrows, 3))\n\n        maxp = np.nanmax(data[:, 1])\n        x[:, 0] = data[:, 0]\n        y[:, 0] = data[:, 1]\n        # comb limit\n        x[:, 1] = data[:, 0]\n        y[:, 1] = data[:, 0]\n        # Cayley tree limit\n        x[:, 2] = data[:, 0]\n        y[:, 2] = np.power(2, data[:, 0] - 1)\n        # avoid large numbers\n        y[:, 2] = np.where(y[:, 2] <= maxp , y[:, 2], np.nan)\n\n        return x, y, True\n\n    def thview_avsenio_v_prio(self, dt, file_parameters):\n        try:\n            data = dt.extra_tables[\'avsenio_v_prio\']\n        except:\n            x = np.zeros((1, 3))\n            y = np.zeros((1, 3))\n            y[:] = np.nan\n            return x, y, True\n\n        nrows = len(data[:, 0])\n        x = np.zeros((nrows, 3))\n        y = np.zeros((nrows, 3))\n\n        maxs = np.nanmax(data[:, 1])\n        x[:, 0] = data[:, 0]\n        y[:, 0] = data[:, 1]\n        # comb limit\n        x[:, 1] = data[:, 0]\n        y[:, 1] = data[:, 0]\n        # Cayley tree limit\n        x[:, 2] = data[:, 0]\n        y[:, 2] = np.log(data[:, 0]) / np.log(2) + 1\n        # avoid large numbers\n        y[:, 1] = np.where(y[:, 1] <= maxs , y[:, 1], np.nan)\n\n        return x, y, True\n\n    def thview_proba_prio(self, dt, file_parameters):\n        try:\n            data = dt.extra_tables[\'proba_prio\']\n            is_extra = True\n        except:\n            is_extra = False\n        if is_extra:\n            nrows = len(data[:, 0])\n            x = np.zeros((nrows, 1))\n            y = np.zeros((nrows, 1))\n            x[:, 0] = data[:, 0]\n            y[:, 0] = data[:, 1]\n        else:\n            x = np.zeros((1, 1))\n            y = np.zeros((1, 1))\n            y[:] = np.nan\n        return x, y, True\n\n    def thview_proba_senio(self, dt, file_parameters):\n        try:\n            data = dt.extra_tables[\'proba_senio\']\n            is_extra = True\n        except:\n            is_extra = False\n        if is_extra:\n            nrows = len(data[:, 0])\n            x = np.zeros((nrows, 1))\n            y = np.zeros((nrows, 1))\n            x[:, 0] = data[:, 0]\n            y[:, 0] = data[:, 1]\n        else:\n            x = np.zeros((1, 1))\n            y = np.zeros((1, 1))\n            y[:] = np.nan\n        return x, y, True\n\n    def thview_avarmlen_v_prio(self, dt, file_parameters):\n        try:\n            data = dt.extra_tables[\'avarmlen_v_prio\']\n            is_extra = True\n        except:\n            is_extra = False\n        if is_extra:\n            nrows = len(data[:, 0])\n            x = np.zeros((nrows, 1))\n            y = np.zeros((nrows, 1))\n            x[:, 0] = data[:, 0]\n            y[:, 0] = data[:, 1]\n        else:\n            x = np.zeros((1, 1))\n            y = np.zeros((1, 1))\n            y[:] = np.nan\n        return x, y, True\n\n    def thview_avarmlen_v_senio(self, dt, file_parameters):\n        try:\n            data = dt.extra_tables[\'avarmlen_v_senio\']\n            is_extra = True\n        except:\n            is_extra = False\n        if is_extra:\n            nrows = len(data[:, 0])\n            x = np.zeros((nrows, 1))\n            y = np.zeros((nrows, 1))\n            x[:, 0] = data[:, 0]\n            y[:, 0] = data[:, 1]\n        else:\n            x = np.zeros((1, 1))\n            y = np.zeros((1, 1))\n            y[:] = np.nan\n        return x, y, True\n\n    def thview_proba_mass_br(self, dt, file_parameters):\n        try:\n            data = dt.extra_tables[\'proba_arm_wt\']\n            is_extra = True\n        except:\n            is_extra = False\n        if is_extra:\n            nrows = len(data[:, 0])\n            x = np.zeros((nrows, 1))\n            y = np.zeros((nrows, 1))\n            x[:, 0] = data[:, 0]\n            y[:, 0] = data[:, 1]\n        else:\n            x = np.zeros((1, 1))\n            y = np.zeros((1, 1))\n            y[:] = np.nan\n        return x, y, True\n\n    def thview_proba_num_br(self, dt, file_parameters):\n        try:\n            data = dt.extra_tables[\'proba_br_pt\']\n            is_extra = True\n        except:\n            is_extra = False\n        if is_extra:\n            nrows = len(data[:, 0])\n            x = np.zeros((nrows, 1))\n            y = np.zeros((nrows, 1))\n            x[:, 0] = data[:, 0]\n            y[:, 0] = data[:, 1]\n        else:\n            x = np.zeros((1, 1))\n            y = np.zeros((1, 1))\n            y[:] = np.nan\n        return x, y, True\n\nclass CLApplicationReact(BaseApplicationReact, Application):\n    """"""CL Version""""""\n\n    def __init__(self, name=\'React\', parent=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent)\n        #usually this class stays empty\n\n\nclass GUIApplicationReact(BaseApplicationReact, QApplicationWindow):\n    """"""GUI Version""""""\n\n    def __init__(self, name=\'React\', parent=None):\n        """"""**Constructor**""""""\n\n        super().__init__(name, parent)\n\n        #add the GUI-specific objects here:\n        for _ in self.extra_view_names:\n            self.viewComboBox.removeItem(self.viewComboBox.count() - 1)\n'"
RepTate/applications/ApplicationSANS.py,10,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module ApplicationSANS\n\nModule for the analysis of data from SANS experiments\n\n""""""\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Application import Application\nfrom RepTate.gui.QApplicationWindow import QApplicationWindow\nfrom RepTate.core.View import View\nfrom RepTate.core.FileType import TXTColumnFile\nimport numpy as np\n\n\nclass ApplicationSANS(CmdBase):\n    """"""Application to Analyze Data from SANS experiments""""""\n\n    appname = ""SANS""\n    description = ""Small Angle Neutron Scattering Experiments""\n    extension = ""sans""\n\n    def __new__(cls, name=""SANS"", parent=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUIApplicationSANS(name, parent)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLApplicationSANS(name, parent)\n        )\n\n\nclass BaseApplicationSANS:\n    """"""Base Class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/SANS/SANS.html""\n    appname = ApplicationSANS.appname\n\n    def __init__(self, name=""SANS"", parent=None):\n        """"""**Constructor**""""""\n        from RepTate.theories.TheoryDebye import TheoryDebye\n\n        super().__init__(name, parent)\n\n        # VIEWS\n        self.views[""log(I(q))""] = View(\n            name=""log(I(q))"",\n            description=""log Intensity"",\n            x_label=""log(q)"",\n            y_label=""log(I)"",\n            x_units=""$\\mathrm{\\AA}^{-1}$"",\n            y_units=""-"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewLogSANS,\n            n=1,\n            snames=[""log(I)""],\n        )\n        self.views[""I(q)""] = View(\n            name=""I(q)"",\n            description=""Intensity"",\n            x_label=""q"",\n            y_label=""I"",\n            x_units=""$\\mathrm{\\AA}^{-1}$"",\n            y_units=""-"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewSANS,\n            n=1,\n            snames=[""I""],\n        )\n        self.views[""Zimm""] = View(\n            name=""Zimm"",\n            description=""Zimm plot (1/I(q) vs q^2)"",\n            x_label=""$\\mathrm{q}^2$"",\n            y_label=""1/I"",\n            x_units=""$\\mathrm{\\AA}^{-2}$"",\n            y_units=""-"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewZimm,\n            n=1,\n            snames=[""1/I""],\n        )\n        self.views[""Kratky""] = View(\n            name=""Kratky"",\n            description=""Kratky plot (q^2*I(q) vs q)"",\n            x_label=""q"",\n            y_label=""$\\mathrm{q}^2\\cdot \\mathrm{I}$"",\n            x_units=""$\\mathrm{\\AA}^{-1}$"",\n            y_units=""$\\mathrm{\\AA}^{-2}$"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewKratky,\n            n=1,\n            snames=[""q2*I""],\n        )\n\n        # set multiviews\n        self.nplots = 1\n        self.multiviews = []\n        for i in range(self.nplot_max):\n            # set views in the same order as declared above\n            self.multiviews.append(list(self.views.values())[i])\n        self.multiplots.reorg_fig(self.nplots)\n\n        # FILES\n        ftype = TXTColumnFile(\n            ""SANS files"",\n            ""sans"",\n            ""SANS files"",\n            [""q"", ""I(q)""],\n            [""Mw"", ""Phi""],\n            [""1/A"", ""-""],\n        )\n        self.filetypes[ftype.extension] = ftype\n\n        # THEORIES\n        self.theories[TheoryDebye.thname] = TheoryDebye\n        self.add_common_theories()\n\n        # set the current view\n        self.set_views()\n\n    def viewLogSANS(self, dt, file_parameters):\n        """"""Logarithm of the scattered intensity :math:`\\\\log (I(q))` vs the logarithm of the scattering vector :math:`\\\\log(q)`\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = np.log10(dt.data[:, 0])\n        y[:, 0] = np.log10(np.abs(dt.data[:, 1]))\n        return x, y, True\n\n    def viewSANS(self, dt, file_parameters):\n        """"""Scattered intensity :math:`I(q)` vs scattering vector :math:`q` (both axes in logarithmic scale)\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 1]\n        return x, y, True\n\n    def viewKratky(self, dt, file_parameters):\n        """"""Kratky plot: :math:`q^2\\\\cdot I(q)` vs :math:`q`\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 0] * dt.data[:, 0] * dt.data[:, 1]\n        return x, y, True\n\n    def viewZimm(self, dt, file_parameters):\n        """"""Zimm plot: :math:`I(q)^{-1}` vs :math:`q^2`\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0] * dt.data[:, 0]\n        y[:, 0] = 1.0 / dt.data[:, 1]\n        return x, y, True\n\n\nclass CLApplicationSANS(BaseApplicationSANS, Application):\n    """"""CL Version""""""\n\n    def __init__(self, name=""SANS"", parent=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent)\n\n\nclass GUIApplicationSANS(BaseApplicationSANS, QApplicationWindow):\n    """"""GUI Version""""""\n\n    def __init__(self, name=""SANS"", parent=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent)\n'"
RepTate/applications/ApplicationTTS.py,63,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module ApplicationTTS\n\nModule for handling small angle oscillatory shear experiments and applying the\ntime-temperature superposition principle.\n\n""""""\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Application import Application\nfrom RepTate.gui.QApplicationWindow import QApplicationWindow\nfrom RepTate.core.View import View\nfrom RepTate.core.FileType import TXTColumnFile\nimport numpy as np\n\n\nclass ApplicationTTS(CmdBase):\n    """"""Application to Analyze Linear Viscoelastic Data and perform Time-Temperature Superposition""""""\n\n    appname = ""TTS""\n    description = ""Linear Viscoelasticity""\n    extension = ""osc""\n\n    def __new__(cls, name=""TTS"", parent=None):\n        """"""Create an instance of the GUI or CL class""""""\n        if CmdBase.mode == CmdMode.GUI:\n            return GUIApplicationTTS(name, parent)\n        else:\n            return CLApplicationTTS(name, parent)\n\n\nclass BaseApplicationTTS:\n    """"""Base Class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/TTS/TTS.html""\n    appname = ApplicationTTS.appname\n\n    def __init__(self, name=""TTS"", parent=None):\n        """"""**Constructor**""""""\n        from RepTate.theories.TheoryTTS import TheoryWLFShift\n        from RepTate.theories.TheoryTTS_Automatic import TheoryTTSShiftAutomatic\n\n        super().__init__(name, parent)\n\n        # VIEWS\n        self.views[""log(G\',G\'\'(w))""] = View(\n            name=""log(G\',G\'\'(w))"",\n            description=""log Storage,Loss moduli"",\n            x_label=""log($\\omega$)"",\n            y_label=""log(G\'($\\omega$),G\'\'($\\omega$))"",\n            x_units=""rad/s"",\n            y_units=""Pa"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewLogG1G2,\n            n=2,\n            snames=[""log(G\'(w))"", ""log(G\'\'(w))""],\n        )\n        self.views[""G\',G\'\'(w)""] = View(\n            ""G\',G\'\'(w)"",\n            ""Storage,Loss moduli"",\n            ""$\\omega$"",\n            ""G\'($\\omega$),G\'\'($\\omega$)"",\n            ""rad/s"",\n            ""Pa"",\n            True,\n            True,\n            self.viewG1G2,\n            2,\n            [""G\'(w)"", ""G\'\'(w)""],\n        )\n        self.views[""etastar""] = View(\n            ""etastar"",\n            ""Complex Viscosity"",\n            ""$\\omega$"",\n            ""$|\\eta^*(\\omega)|$"",\n            ""rad/s"",\n            ""Pa.s"",\n            True,\n            True,\n            self.viewEtaStar,\n            1,\n            [""eta*(w)""],\n        )\n        self.views[""logetastar""] = View(\n            ""logetastar"",\n            ""log Complex Viscosity"",\n            ""log($\\omega$)"",\n            ""log$|\\eta^*(\\omega)|$"",\n            ""rad/s"",\n            ""Pa.s"",\n            False,\n            False,\n            self.viewLogEtaStar,\n            1,\n            [""log(eta*(w))""],\n        )\n        self.views[""delta""] = View(\n            ""delta"",\n            ""delta"",\n            ""$\\omega$"",\n            ""$\\delta(\\omega)$"",\n            ""rad/s"",\n            ""-"",\n            True,\n            True,\n            self.viewDelta,\n            1,\n            [""delta(w)""],\n        )\n        self.views[""tan(delta)""] = View(\n            ""tan(delta)"",\n            ""tan(delta)"",\n            ""$\\omega$"",\n            ""tan($\\delta$)"",\n            ""rad/s"",\n            ""-"",\n            True,\n            True,\n            self.viewTanDelta,\n            1,\n            [""tan(delta((w))""],\n        )\n        self.views[""log(tan(delta))""] = View(\n            ""log(tan(delta))"",\n            ""log(tan(delta))"",\n            ""log($\\omega$)"",\n            ""log(tan($\\delta$))"",\n            ""rad/s"",\n            ""-"",\n            False,\n            False,\n            self.viewLogTanDelta,\n            1,\n            [""log(tan(delta((w)))""],\n        )\n        self.views[""log(G*)""] = View(\n            ""log(G*)"",\n            ""log(G*(omega))"",\n            ""log($\\omega$)"",\n            ""log(G*($\\omega$))"",\n            ""rad/s"",\n            ""Pa"",\n            False,\n            False,\n            self.viewLogGstar,\n            1,\n            [""log(G*)""],\n        )\n        self.views[""log(tan(delta),G*)""] = View(\n            ""log(tan(delta),G*)"",\n            ""log(tan($\\delta$))"",\n            ""log(G*)"",\n            ""log(tan($\\delta$))"",\n            ""Pa"",\n            ""-"",\n            False,\n            False,\n            self.viewLogtandeltaGstar,\n            1,\n            [""log(tan($\\delta))""],\n        )\n        self.views[""delta(G*)""] = View(\n            ""delta(G*)"",\n            ""$\\delta$(G*))"",\n            ""log(G*)"",\n            ""$\\delta$(G*))"",\n            ""Pa"",\n            ""deg"",\n            False,\n            False,\n            self.viewdeltatanGstar,\n            1,\n            [""delta""],\n        )\n        self.views[""J\',J\'\'(w)""] = View(\n            ""J\',J\'\'(w)"",\n            ""J moduli"",\n            ""$\\omega$"",\n            ""J\'($\\omega$),J\'\'($\\omega$)"",\n            ""rad/s"",\n            ""$Pa^{-1}$"",\n            True,\n            True,\n            self.viewJ1J2,\n            2,\n            [""J\'(w)"", ""J\'\'(w)""],\n        )\n        self.views[""Cole-Cole""] = View(\n            ""Cole-Cole"",\n            ""Cole-Cole plot"",\n            ""$\\eta\'$"",\n            ""$\\eta\'\'$"",\n            ""Pa.s"",\n            ""Pa.s"",\n            False,\n            False,\n            self.viewColeCole,\n            1,\n            [""$eta\'$""],\n        )\n        self.views[""log(G\')""] = View(\n            name=""log(G\')"",\n            description=""log Storage modulus"",\n            x_label=""log($\\omega$)"",\n            y_label=""log(G\'($\\omega$))"",\n            x_units=""rad/s"",\n            y_units=""Pa"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewLogG1,\n            n=1,\n            snames=[""log(G\'(w))""],\n        )\n        self.views[""G\'""] = View(\n            ""G\'"",\n            ""Storage modulus"",\n            ""$\\omega$"",\n            ""G\'($\\omega$)"",\n            ""rad/s"",\n            ""Pa"",\n            True,\n            True,\n            self.viewG1,\n            1,\n            [""G\'(w)""],\n        )\n        self.views[""log(G\'\')""] = View(\n            name=""log(G\'\')"",\n            description=""log Loss modulus"",\n            x_label=""log($\\omega$)"",\n            y_label=""log(G\'($\\omega$))"",\n            x_units=""rad/s"",\n            y_units=""Pa"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewLogG2,\n            n=1,\n            snames=[""log(G\'\'(w))""],\n        )\n        self.views[""G\'\'""] = View(\n            ""G\'\'"",\n            ""Loss modulus"",\n            ""$\\omega$"",\n            ""G\'\'($\\omega$)"",\n            ""rad/s"",\n            ""Pa"",\n            True,\n            True,\n            self.viewG2,\n            1,\n            [""G\'\'(w)""],\n        )\n        self.views[""log(G\',G\'\'(w),tan(delta))""] = View(\n            name=""log(G\',G\'\'(w),tan(delta))"",\n            description=""log Storage,Loss moduli, tan(delta)"",\n            x_label=""log($\\omega$)"",\n            y_label=""log(G\'($\\omega$),G\'\'($\\omega$),tan($\\delta$))"",\n            x_units=""rad/s"",\n            y_units=""Pa,-"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewLogG1G2tandelta,\n            n=3,\n            snames=[""log(G\'(w))"", ""log(G\'\'(w)),log(tan(delta))""],\n        )\n\n        # set multiviews\n        self.nplots = 1\n        self.multiviews = []\n        for i in range(self.nplot_max):\n            # set views in the same order as declared above\n            self.multiviews.append(list(self.views.values())[i])\n        self.multiplots.reorg_fig(self.nplots)\n\n        # FILES\n        ftype = TXTColumnFile(\n            ""OSC files"",\n            ""osc"",\n            ""Small-angle oscillatory masurements from the Rheometer"",\n            [""w"", ""G\'"", ""G\'\'""],\n            [""Mw"", ""T""],\n            [""rad/s"", ""Pa"", ""Pa""],\n        )\n        self.filetypes[ftype.extension] = ftype\n\n        # THEORIES\n        self.theories[TheoryTTSShiftAutomatic.thname] = TheoryTTSShiftAutomatic\n        self.theories[TheoryWLFShift.thname] = TheoryWLFShift\n        self.add_common_theories()\n\n        # set the current view\n        self.set_views()\n\n    def viewLogG1G2(self, dt, file_parameters):\n        """"""Logarithm of the storage modulus :math:`\\\\log(G\'(\\\\omega))` and loss modulus :math:`\\\\log(G\'\'(\\\\omega))` vs :math:`\\\\log(\\\\omega)`\n        """"""\n        x = np.zeros((dt.num_rows, 2))\n        y = np.zeros((dt.num_rows, 2))\n        x[:, 0] = np.log10(dt.data[:, 0])\n        x[:, 1] = np.log10(dt.data[:, 0])\n        y[:, 0] = np.log10(dt.data[:, 1])\n        y[:, 1] = np.log10(dt.data[:, 2])\n        return x, y, True\n\n    def viewG1G2(self, dt, file_parameters):\n        """"""Storage modulus :math:`G\'(\\\\omega)` and loss modulus :math:`G\'\'(\\\\omega)` (in logarithmic scale) vs :math:`\\\\omega` (in logarithmic scale)\n        """"""\n        x = np.zeros((dt.num_rows, 2))\n        y = np.zeros((dt.num_rows, 2))\n        x[:, 0] = dt.data[:, 0]\n        x[:, 1] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 1]\n        y[:, 1] = dt.data[:, 2]\n        return x, y, True\n\n    def viewEtaStar(self, dt, file_parameters):\n        """"""Complex viscosity :math:`\\\\eta^*(\\\\omega) = \\\\sqrt{G\'^2 + G\'\'^2}/\\\\omega` (in logarithmic scale) vs :math:`\\\\omega` (in logarithmic scale)\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = np.sqrt(dt.data[:, 1] ** 2 + dt.data[:, 2] ** 2) / dt.data[:, 0]\n        return x, y, True\n\n    def viewLogEtaStar(self, dt, file_parameters):\n        """"""Logarithm of the complex viscosity :math:`\\\\eta^*(\\\\omega) = \\\\sqrt{G\'^2 + G\'\'^2}/\\\\omega` vs :math:`\\\\log(\\\\omega)`\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = np.log10(dt.data[:, 0])\n        y[:, 0] = np.log10(\n            np.sqrt(dt.data[:, 1] ** 2 + dt.data[:, 2] ** 2) / dt.data[:, 0]\n        )\n        return x, y, True\n\n    def viewDelta(self, dt, file_parameters):\n        """"""Loss or phase angle :math:`\\\\delta(\\\\omega)=\\\\arctan(G\'\'/G\')\\\\cdot 180/\\\\pi` (in degrees, in logarithmic scale) vs :math:`\\\\omega` (in logarithmic scale)\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = np.arctan2(dt.data[:, 2], dt.data[:, 1]) * 180 / np.pi\n        return x, y, True\n\n    def viewTanDelta(self, dt, file_parameters):\n        """"""Tangent of the phase angle :math:`\\\\tan(\\\\delta(\\\\omega))=G\'\'/G\'` (in logarithmic scale) vs :math:`\\\\omega` (in logarithmic scale)\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 2] / dt.data[:, 1]\n        return x, y, True\n\n    def viewLogTanDelta(self, dt, file_parameters):\n        """""":math:`\\\\log(\\\\tan(\\\\delta(\\\\omega)))=\\\\log(G\'\'/G\')` vs :math:`\\\\log(\\\\omega)`\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = np.log10(dt.data[:, 0])\n        y[:, 0] = np.log10(dt.data[:, 2] / dt.data[:, 1])\n        return x, y, True\n\n    def viewLogGstar(self, dt, file_parameters):\n        """"""Logarithm of the modulus of the complex viscosity :math:`|G^*(\\\\omega)|=\\\\sqrt{G\'^2+G\'\'^2}` vs :math:`\\\\log(\\\\omega)`\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = np.log10(dt.data[:, 0])\n        y[:, 0] = np.log10(np.sqrt(np.square(dt.data[:, 1]) + np.square(dt.data[:, 2])))\n        return x, y, True\n\n    def viewLogtandeltaGstar(self, dt, file_parameters):\n        """"""Logarithm of the tangent of the loss angle :math:`\\\\tan(\\\\delta(\\\\omega))=G\'\'/G\'` vs logarithm of the modulus of the complex viscosity :math:`|G^*(\\\\omega)|=\\\\sqrt{G\'^2+G\'\'^2}`\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = np.log10(np.sqrt(np.square(dt.data[:, 1]) + np.square(dt.data[:, 2])))\n        y[:, 0] = np.log10(dt.data[:, 2] / dt.data[:, 1])\n        return x, y, True\n\n    def viewdeltatanGstar(self, dt, file_parameters):\n        """"""Loss angle :math:`\\\\delta(\\\\omega)=\\\\arctan(G\'\'/G\')` vs logarithm of the modulus of the complex viscosity :math:`|G^*(\\\\omega)|=\\\\sqrt{G\'^2+G\'\'^2}`\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = np.log10(np.sqrt(np.square(dt.data[:, 1]) + np.square(dt.data[:, 2])))\n        y[:, 0] = np.arctan2(dt.data[:, 2], dt.data[:, 1]) * 180 / np.pi\n        return x, y, True\n\n    def viewJ1J2(self, dt, file_parameters):\n        """"""Storage compliance :math:`J\'(\\\\omega)=G\'/(G\'^2+G\'\'^2)` and loss compliance :math:`J\'\'(\\\\omega)=G\'\'/(G\'^2+G\'\'^2)` (in logarithmic scale) vs :math:`\\\\omega` (in logarithmic scale)\n        """"""\n        x = np.zeros((dt.num_rows, 2))\n        y = np.zeros((dt.num_rows, 2))\n        x[:, 0] = dt.data[:, 0]\n        x[:, 1] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 1] / (np.square(dt.data[:, 1]) + np.square(dt.data[:, 2]))\n        y[:, 1] = dt.data[:, 2] / (np.square(dt.data[:, 1]) + np.square(dt.data[:, 2]))\n        return x, y, True\n\n    def viewColeCole(self, dt, file_parameters):\n        """"""Cole-Cole plot: out of phase viscosity :math:`\\\\eta\'\'(\\\\omega)=G\'(\\\\omega)/\\\\omega` vs dynamic viscosity :math:`\\\\eta\'(\\\\omega)=G\'\'(\\\\omega)/\\\\omega`\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 2] / dt.data[:, 0]\n        y[:, 0] = dt.data[:, 1] / dt.data[:, 0]\n        return x, y, True\n\n    def viewLogG1(self, dt, file_parameters):\n        """"""Logarithm of the storage modulus :math:`\\\\log(G\'(\\\\omega))` vs :math:`\\\\log(\\\\omega)`\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = np.log10(dt.data[:, 0])\n        y[:, 0] = np.log10(dt.data[:, 1])\n        return x, y, True\n\n    def viewG1(self, dt, file_parameters):\n        """"""Storage modulus :math:`G\'(\\\\omega)` (in logarithmic scale) vs :math:`\\\\omega` (in logarithmic scale)\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 1]\n        return x, y, True\n\n    def viewLogG2(self, dt, file_parameters):\n        """"""Logarithm of the loss modulus :math:`\\\\log(G\'\'(\\\\omega))` vs :math:`\\\\log(\\\\omega)`\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = np.log10(dt.data[:, 0])\n        y[:, 0] = np.log10(dt.data[:, 2])\n        return x, y, True\n\n    def viewG2(self, dt, file_parameters):\n        """"""Loss modulus :math:`G\'\'(\\\\omega)` (in logarithmic scale) vs :math:`\\\\omega` (in logarithmic scale)\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 2]\n        return x, y, True\n\n    def viewLogG1G2tandelta(self, dt, file_parameters):\n        """"""Logarithm of the storage modulus :math:`\\\\log(G\'(\\\\omega))`, loss modulus :math:`\\\\log(G\'\'(\\\\omega))` and tangent of the loss angle :math:`\\\\log(\\\\tan(\\\\delta(\\\\omega)))=\\\\log(G\'\'/G\')` vs :math:`\\\\log(\\\\omega)`\n        """"""\n        x = np.zeros((dt.num_rows, 3))\n        y = np.zeros((dt.num_rows, 3))\n        x[:, 0] = np.log10(dt.data[:, 0])\n        x[:, 1] = np.log10(dt.data[:, 0])\n        x[:, 2] = np.log10(dt.data[:, 0])\n        y[:, 0] = np.log10(dt.data[:, 1])\n        y[:, 1] = np.log10(dt.data[:, 2])\n        y[:, 2] = np.log10(dt.data[:, 2] / dt.data[:, 1])\n        return x, y, True\n\n\nclass CLApplicationTTS(BaseApplicationTTS, Application):\n    """"""CL Version""""""\n\n    def __init__(self, name=""TTS"", parent=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent)\n\n\nclass GUIApplicationTTS(BaseApplicationTTS, QApplicationWindow):\n    """"""GUI Version""""""\n\n    def __init__(self, name=""TTS"", parent=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent)\n'"
RepTate/applications/ApplicationTTSFactors.py,17,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module ApplicationTTSFactors\n\nModule for handling time-temperature superposition factors and fit theories.\n\n""""""\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Application import Application\nfrom RepTate.gui.QApplicationWindow import QApplicationWindow\nfrom RepTate.core.View import View\nfrom RepTate.core.FileType import TXTColumnFile\nimport numpy as np\n\n\nclass ApplicationTTSFactors(CmdBase):\n    """"""Application handling time-temperature superposition factors and fit theories""""""\n\n    appname = ""TTSF""\n    description = ""TTS shift factors""\n    extension = ""ttsf""\n\n    def __new__(cls, name=""TTSF"", parent=None):\n        """"""Create an instance of the GUI or CL class""""""\n        if CmdBase.mode == CmdMode.GUI:\n            return GUIApplicationTTSFactors(name, parent)\n        else:\n            return CLApplicationTTSFactors(name, parent)\n\n\nclass BaseApplicationTTSFactors:\n    """"""Base Class for both GUI and CL""""""\n\n    html_help_file = (\n        ""http://reptate.readthedocs.io/manual/Applications/TTSFactors/TTSFactors.html""\n    )\n    appname = ApplicationTTSFactors.appname\n\n    def __init__(self, name=""TTSF"", parent=None):\n        """"""**Constructor**""""""\n        from RepTate.theories.TheoryWLF import TheoryWLF\n        from RepTate.theories.TheoryArrhenius import TheoryArrhenius\n\n        # from TheoryArrhenius import TheoryArrhenius\n        super().__init__(name, parent)\n\n        # VIEWS\n        self.views[""log(aT)""] = View(\n            name=""log(aT)"",\n            description=""log Horizontal shift factor"",\n            x_label=""T"",\n            y_label=""$\\log(a_T)$"",\n            x_units=""\xc2\xb0C"",\n            y_units=""-"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewLogaT,\n            n=1,\n            snames=[""log(aT)""],\n        )\n        self.views[""aT""] = View(\n            name=""aT"",\n            description=""Horizontal shift factor"",\n            x_label=""T"",\n            y_label=""$a_T$"",\n            x_units=""\xc2\xb0C"",\n            y_units=""-"",\n            log_x=False,\n            log_y=True,\n            view_proc=self.viewaT,\n            n=1,\n            snames=[""aT""],\n        )\n        self.views[""log(bT)""] = View(\n            name=""log(bT)"",\n            description=""log Vertical shift factor"",\n            x_label=""T"",\n            y_label=""$\\log(b_T)$"",\n            x_units=""\xc2\xb0C"",\n            y_units=""-"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewLogbT,\n            n=1,\n            snames=[""log(bT)""],\n        )\n        self.views[""bT""] = View(\n            name=""bT"",\n            description=""Vertical shift factor"",\n            x_label=""T"",\n            y_label=""$b_T$"",\n            x_units=""\xc2\xb0C"",\n            y_units=""-"",\n            log_x=False,\n            log_y=True,\n            view_proc=self.viewbT,\n            n=1,\n            snames=[""bT""],\n        )\n\n        self.views[""log(aT, bT)""] = View(\n            name=""log(aT, bT)"",\n            description=""log Horizontal and Vertical shift factors"",\n            x_label=""T"",\n            y_label=""$\\log(a_T, b_T)$"",\n            x_units=""\xc2\xb0C"",\n            y_units=""-"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewLogaTbT,\n            n=2,\n            snames=[""log(aT)"", ""log(bT)""],\n        )\n\n        self.views[""log(aT) vs 1/T""] = View(\n            name=""log(aT) vs 1/T"",\n            description=""log Horizontal shift factors vs 1/T"",\n            x_label=""1/T"",\n            y_label=""$\\log(a_T)$"",\n            x_units=""K$^{-1}$"",\n            y_units=""-"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewLogaT_invT,\n            n=1,\n            snames=[""log(aT)""],\n        )\n\n        # set multiviews\n        self.nplots = 1\n        self.multiviews = []\n        for i in range(self.nplot_max):\n            # set views in the same order as declared above\n            self.multiviews.append(list(self.views.values())[i])\n        self.multiplots.reorg_fig(self.nplots)\n\n        # FILES\n        ftype = TXTColumnFile(\n            ""TTS factors"",\n            ""ttsf"",\n            ""TTS shift factors"",\n            [""T"", ""aT"", ""bT""],\n            [""Mw""],\n            [""\xc2\xb0C"", ""-"", ""-""],\n        )\n        self.filetypes[ftype.extension] = ftype\n\n        # THEORIES\n        self.theories[TheoryWLF.thname] = TheoryWLF\n        self.theories[TheoryArrhenius.thname] = TheoryArrhenius\n        # self.theories[TheoryWLFShiftTest.thname] = TheoryWLFShiftTest\n        self.add_common_theories()\n\n        # set the current view\n        self.set_views()\n\n    def viewLogaT(self, dt, file_parameters):\n        """"""Logarithm of the horizontal shift factor\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = np.log10(dt.data[:, 1])\n        return x, y, True\n\n    def viewaT(self, dt, file_parameters):\n        """"""Horizontal shift factor\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 1]\n        return x, y, True\n\n    def viewLogbT(self, dt, file_parameters):\n        """"""Logarithm of the vertical shift factor\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = np.log10(dt.data[:, 2])\n        return x, y, True\n\n    def viewbT(self, dt, file_parameters):\n        """"""Vertical shift factor\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 2]\n        return x, y, True\n\n    def viewLogaTbT(self, dt, file_parameters):\n        """"""Logarithm of the vertical shift factor\n        """"""\n        x = np.zeros((dt.num_rows, 2))\n        y = np.zeros((dt.num_rows, 2))\n        x[:, 0] = dt.data[:, 0]\n        x[:, 1] = dt.data[:, 0]\n        y[:, 0] = np.log10(dt.data[:, 1])\n        y[:, 1] = np.log10(dt.data[:, 2])\n        return x, y, True\n\n    def viewLogaT_invT(self, dt, file_parameters):\n        """"""Logarithm of the horizontal shift factor\n        """"""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = 1 / (dt.data[:, 0] + 273.15)\n        y[:, 0] = np.log10(dt.data[:, 1])\n        return x, y, True\n\n\nclass CLApplicationTTSFactors(BaseApplicationTTSFactors, Application):\n    """"""CL Version""""""\n\n    def __init__(self, name=""TTSFactors"", parent=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent)\n\n\nclass GUIApplicationTTSFactors(BaseApplicationTTSFactors, QApplicationWindow):\n    """"""GUI Version""""""\n\n    def __init__(self, name=""TTSFactors"", parent=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent)\n'"
RepTate/applications/ApplicationTemplate.py,2,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module ApplicationTemplate\n\nTemplate file for the definition of a new Application Module\n\n""""""\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Application import Application\nfrom RepTate.gui.QApplicationWindow import QApplicationWindow\nfrom RepTate.core.View import View\nfrom RepTate.core.FileType import TXTColumnFile\nimport numpy as np\n\n\nclass ApplicationTemplate(CmdBase):\n    """"""Application for [THE BASIC DOCUMENTATION OF THE APPLICATION GOES HERE]""""""\n    appname = \'Template\'\n    description = \'Template Application\'  #used in the command-line Reptate\n    extension = ""txt""  # drag and drop this extension automatically opens this application\n\n    def __new__(cls, name=\'Template\', parent=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return GUIApplicationTemplate(name, parent) if (\n            CmdBase.mode == CmdMode.GUI) else CLApplicationTemplate(\n                name, parent)\n\n\nclass BaseApplicationTemplate:\n    """"""Base Class for both GUI and CL""""""\n\n    #html_help_file = \'\'\n    appname = ApplicationTemplate.appname\n\n    def __init__(self, name=\'Template\', parent=None):\n        """"""**Constructor**""""""\n\n        # IMPORT THEORIES\n        # Import theories specific to the Application e.g.:\n        # from TheoryTemplate import TheoryA\n\n        super().__init__(name, parent, nplot_max=1)\n\n        # VIEWS\n        # set the views that can be selected in the view combobox\n        self.views[\'y(x)\'] = View(\n            name=\'y(x)\',\n            description=\'y as a function of x\',\n            x_label=\'x\',\n            y_label=\'y(x)\',\n            x_units=\'-\',\n            y_units=\'-\',\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewyx,\n            n=1,\n            snames=[\'y(x)\'])\n\n        # set multiviews\n        # default view order in multiplot views, set nplots=1 for single view\n        self.nplots = 1\n        self.multiviews = []\n        for i in range(self.nplot_max):\n            # set views in the same order as declared above\n            self.multiviews.append(list(self.views.values())[i])\n        self.multiplots.reorg_fig(self.nplots)\n\n        # FILES\n        # set the type of files that ApplicationTemplate can open\n        ftype = TXTColumnFile(\n            name=\'content of files\',\n            extension=\'txt\',\n            description=\'description of the file type\',\n            col_names=[\'col1\', \'col2\'],\n            basic_file_parameters=[\'param1\', \'param2\'],\n            col_units=[\'units_col1\', \'units_col2\'])\n        self.filetypes[\n            ftype.extension] = ftype  #add each the file type to dictionary\n\n        # THEORIES\n        # add the theories related to ApplicationTemplate to the dictionary, e.g.:\n        # self.theories[TheoryA.thname] = TheoryA\n        # self.theories[TheoryB.thname] = TheoryB\n        self.add_common_theories()  # Add basic theories to the application\n\n        #set the current view\n        self.set_views()\n\n    def viewyx(self, dt, file_parameters):\n        """"""Function that defines how the view is shown. In this example, just the 1st and 2nd columns are shown. \n        \n        The view must handle objects of type DataTable and can make use of the file parameters""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 1]\n        return x, y, True\n\n\nclass CLApplicationTemplate(BaseApplicationTemplate, Application):\n    """"""CL Version of the Application""""""\n\n    def __init__(self, name=\'Template\', parent=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent)\n        #usually this class stays empty\n\n\nclass GUIApplicationTemplate(BaseApplicationTemplate, QApplicationWindow):\n    """"""GUI Version of the Application""""""\n\n    def __init__(self, name=\'Template\', parent=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent)\n\n        #add the GUI-specific objects here:\n'"
RepTate/applications/ApplicationUniversalViewer.py,6,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module ApplicationUniversalViewer\n\nDefinition of a new Application for viewing generic txt data\n\n""""""\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Application import Application\nfrom RepTate.gui.QApplicationWindow import QApplicationWindow\nfrom RepTate.core.View import View\nfrom RepTate.core.FileType import TXTColumnFile\nfrom numpy import *\nimport numpy as np\nimport re\nimport configparser\n\n\nclass ViewParseExpression(object):\n    """"""Auxiliary class to define views that must parse an expression before being shown""""""\n\n    def __init__(self, name="""", n=1, col_names=[], xexpr=[], yexpr=[], parent=None):\n        self.parent = parent\n        self.name = name\n        self.n = n\n        self.col_names = col_names\n        self.xexpr = xexpr\n        self.yexpr = yexpr\n\n        safe_list = [\n            ""sin"",\n            ""cos"",\n            ""tan"",\n            ""arccos"",\n            ""arcsin"",\n            ""arctan"",\n            ""arctan2"",\n            ""deg2rad"",\n            ""rad2deg"",\n            ""sinh"",\n            ""cosh"",\n            ""tanh"",\n            ""arcsinh"",\n            ""arccosh"",\n            ""arctanh"",\n            ""around"",\n            ""round_"",\n            ""rint"",\n            ""floor"",\n            ""ceil"",\n            ""trunc"",\n            ""exp"",\n            ""log"",\n            ""log10"",\n            ""fabs"",\n            ""mod"",\n            ""e"",\n            ""pi"",\n            ""power"",\n            ""sqrt"",\n        ]\n        self.safe_dict = {}\n        for k in safe_list:\n            self.safe_dict[k] = globals().get(k, None)\n\n    def view(self, dt, file_parameters):\n        """"""Actual function that processes the expression, extracts variables, file parameters and columns, and produces the view""""""\n        x = np.zeros((dt.num_rows, self.n))\n        y = np.zeros((dt.num_rows, self.n))\n\n        for i in range(self.n):\n            # First we do it with x\n            if i < len(self.xexpr):\n                expression = self.xexpr[i].replace(""^"", ""**"")\n            else:\n                expression = self.xexpr[0].replace(\n                    ""^"", ""**""\n                )  # For x, it is not necessary to provide all expressions\n            # Find FILE PARAMETERS IN THE EXPRESSION\n            fparams = re.findall(""\\[(.*?)\\]"", expression)\n            for fp in fparams:\n                if fp in file_parameters:\n                    self.safe_dict[fp] = float(file_parameters[fp])\n                else:\n                    self.parent.logger.warning(\n                        ""File parameter not found. Review your views""\n                    )\n                    self.safe_dict[fp] = 0.0\n            expression = expression.replace(""["", """").replace(""]"", """")\n            # Find Columns in the expression\n            cols = re.findall(""\\{(.*?)\\}"", expression)\n            for cl in cols:\n                if cl in self.col_names:\n                    ind = self.col_names.index(cl)\n                    self.safe_dict[cl] = dt.data[:, ind]\n                else:\n                    self.parent.logger.warning(""Column not found. Review your views"")\n                    self.safe_dict[fp] = np.zeros_like(dt.data[:, ind])\n            expression = expression.replace(""{"", """").replace(""}"", """")\n            try:\n                x[:, i] = eval(expression, {""__builtins__"": None}, self.safe_dict)\n            except NameError as e:\n                self.parent.logger.exception(\n                    ""Error in view (%s) x[%d]"" % (self.name, i)\n                )\n            except TypeError as e:\n                self.parent.logger.exception(\n                    ""Error in view (%s) x[%d]"" % (self.name, i)\n                )\n            except Exception as e:\n                self.parent.logger.exception(\n                    ""Error in view (%s) x[%d]"" % (self.name, i)\n                )\n\n            # Now do the same for y\n            expression = self.yexpr[i].replace(""^"", ""**"")\n            # Find FILE PARAMETERS IN THE EXPRESSION\n            fparams = re.findall(""\\[(.*?)\\]"", expression)\n            for fp in fparams:\n                if fp in file_parameters:\n                    self.safe_dict[fp] = float(file_parameters[fp])\n                else:\n                    self.parent.logger.warning(\n                        ""File parameter not found. Review your views""\n                    )\n                    self.safe_dict[fp] = 0.0\n            expression = expression.replace(""["", """").replace(""]"", """")\n            # Find Columns in the expression\n            cols = re.findall(""\\{(.*?)\\}"", expression)\n            for cl in cols:\n                if cl in self.col_names:\n                    ind = self.col_names.index(cl)\n                    self.safe_dict[cl] = dt.data[:, ind]\n                else:\n                    self.parent.logger.warning(""Column not found. Review your views"")\n                    self.safe_dict[fp] = np.zeros_like(dt.data[:, ind])\n            expression = expression.replace(""{"", """").replace(""}"", """")\n            try:\n                y[:, i] = eval(expression, {""__builtins__"": None}, self.safe_dict)\n            except NameError as e:\n                self.parent.logger.exception(\n                    ""Error in view (%s) y[%d]"" % (self.name, i)\n                )\n            except TypeError as e:\n                self.parent.logger.exception(\n                    ""Error in view (%s) y[%d]"" % (self.name, i)\n                )\n            except Exception as e:\n                self.parent.logger.exception(\n                    ""Error in view (%s) y[%d]"" % (self.name, i)\n                )\n\n        return x, y, True\n\n\nclass ApplicationUniversalViewer(CmdBase):\n    """"""Application for viewing generic txt data described by ini files""""""\n\n    appname = ""Universal Viewer""\n    description = ""Universal Viewer Application""  # used in the command-line Reptate\n    extension = """"  # drag and drop this extension automatically opens this application\n\n    def __new__(cls, name=""Universal Viewer"", parent=None, inifile=None, nplot_max=1):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUIApplicationUniversalViewer(name, parent, inifile, nplot_max)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLApplicationUniversalViewer(name, parent, inifile, nplot_max)\n        )\n\n\nclass BaseApplicationUniversalViewer:\n    """"""Base Class for both GUI and CL""""""\n\n    # html_help_file = \'\'\n    appname = ApplicationUniversalViewer.appname\n\n    def __init__(self, name=""Universal Viewer"", parent=None, inifile=None, nplot_max=1):\n        """"""**Constructor**""""""\n\n        self.inifile = inifile\n        self.config = configparser.ConfigParser()\n        self.config.read_file(open(inifile))\n\n        super().__init__(name, parent, nplot_max=nplot_max)\n\n        # FILES\n        # set the type of files that ApplicationUniversalViewer can open\n        ftype = TXTColumnFile(\n            name=self.config.get(""file1"", ""name""),\n            extension=self.config.get(""file1"", ""extension"").split(""."")[1],\n            description=self.config.get(""file1"", ""name""),\n            col_names=self.config.get(""file1"", ""Colnames"").split("",""),\n            basic_file_parameters=self.config.get(""file1"", ""Parameters"").split("",""),\n            col_units=[""units_col1"", ""units_col2""],\n        )\n        self.filetypes[ftype.extension] = ftype\n\n        # VIEWS\n        # set the views that can be selected in the view combobox\n        nv = 0\n        moreviews = True\n        self.viewclasses = {}\n        while moreviews:\n            if ""view%d"" % (nv + 1) in self.config.sections():\n                nv += 1\n                xexpr = self.config.get(""view%d"" % nv, ""xexpr"").split("","")\n                yexpr = self.config.get(""view%d"" % nv, ""yexpr"").split("","")\n                name, x_label, y_label = self.config.get(""view%d"" % nv, ""name"").split(\n                    "",""\n                )\n                x_units, y_units = self.config.get(\n                    ""view%d"" % nv, ""units"", fallback=""-,-""\n                ).split("","")\n                n = self.config.getint(""view%d"" % nv, ""n"", fallback=1)\n                self.viewclasses[name] = ViewParseExpression(\n                    name,\n                    n,\n                    col_names=ftype.col_names,\n                    xexpr=xexpr,\n                    yexpr=yexpr,\n                    parent=self,\n                )\n                log_x = self.config.getboolean(""view%d"" % nv, ""logx"", fallback=False)\n                log_y = self.config.getboolean(""view%d"" % nv, ""logy"", fallback=False)\n                snames = self.config.get(""view%d"" % nv, ""snames"", fallback=\',,,,,,,,,,,,\').split("","")\n                self.views[name] = View(\n                    name=name,\n                    description=name,\n                    x_label=x_label,\n                    y_label=y_label,\n                    x_units=x_units,\n                    y_units=y_units,\n                    log_x=log_x,\n                    log_y=log_y,\n                    view_proc=self.viewclasses[name].view,\n                    n=n,\n                    snames=snames,\n                )\n            else:\n                moreviews = False\n\n        # set multiviews\n        # default view order in multiplot views, set nplots=1 for single view\n        self.nplots = self.config.getint(""application"", ""ncharts"")\n        self.multiviews = []\n        for i in range(self.nplot_max):\n            # set views in the same order as declared above\n            self.multiviews.append(list(self.views.values())[i])\n        self.multiplots.reorg_fig(self.nplots)\n\n        # THEORIES\n        self.add_common_theories()  # Add basic theories to the application\n\n        # set the current view\n        self.set_views()\n\n    def viewyx(self, dt, file_parameters):\n        """"""Example View function""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 1]\n        return x, y, True\n\n\nclass CLApplicationUniversalViewer(BaseApplicationUniversalViewer, Application):\n    """"""CL Version""""""\n\n    def __init__(self, name=""Universal Viewer"", parent=None, inifile=None, nplot_max=1):\n        """"""**Constructor**""""""\n        super().__init__(name, parent, inifile, nplot_max)\n        # usually this class stays empty\n\n\nclass GUIApplicationUniversalViewer(BaseApplicationUniversalViewer, QApplicationWindow):\n    """"""GUI Version""""""\n\n    def __init__(self, name=""Universal Viewer"", parent=None, inifile=None, nplot_max=1):\n        """"""**Constructor**""""""\n        super().__init__(name, parent, inifile, nplot_max)\n\n        # add the GUI-specific objects here:\n'"
RepTate/applications/__init__.py,0,b''
RepTate/applications/application_frs.py,6,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, mmvahb@leeds.ac.uk\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module Application_frs\n\nModule for handling FRS experiments and simulations.\n\n""""""\nfrom RepTate.core.Application import Application\n\n\nclass ApplicationFRS_I(Application):\n    """"""Application to FRS Intensity simulations""""""\n\n    name = ""FRS_I""\n    description = ""FRS Intensity""\n\n    def __init__(self, name=""FRS_I"", parent=None):\n        """"""**Constructor**""""""\n        super(ApplicationFRS_I, self).__init__(name, parent)\n\n        # VIEWS\n        self.views[""I(t)""] = View(\n            name=""I(t)"",\n            description=""FRS Intensity decay"",\n            x_label=""t"",\n            y_label=""I(t)"",\n            x_units=""s"",\n            y_units=""-"",\n            log_x=True,\n            log_y=True,\n            view_proc=self.viewIt,\n            n=1,\n            snames=[""I(t)""],\n        )\n        self.views[""log[I(t)]""] = View(\n            name=""log[I(t)]"",\n            description=""log FRS Intensity decay"",\n            x_label=""log(t)"",\n            y_label=""log(I(t))"",\n            x_units=""s"",\n            y_units=""-"",\n            log_x=False,\n            log_y=False,\n            view_proc=self.viewLogIt,\n            n=1,\n            snames=[""log(I(t))""],\n        )\n\n        # set multiviews\n        self.multiviews = [self.views[""I(t)""]]\n        self.nplots = len(self.multiviews)\n\n        # FILES\n        ftype = TXTColumnFile(\n            ""I(t) FRS files"",\n            ""FRS_INTENSITY"",\n            ""I(t) decay from FRS"",\n            [""t"", ""I""],\n            [""d"", ""Na"", ""ka"", ""Ns"", ""ka"", ""Keq"", ""beta""],\n            [""s"", ""Pa""],\n        )\n        self.filetypes[ftype.extension] = ftype\n\n        # Theories\n        self.add_common_theories()\n\n    def viewIt(self, dt, file_parameters):\n        """"""Intensity as a function of time""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = dt.data[:, 0]\n        y[:, 0] = dt.data[:, 1]\n        return x, y, True\n\n    def viewLogIt(self, dt, file_parameters):\n        """"""Log I vs log t""""""\n        x = np.zeros((dt.num_rows, 1))\n        y = np.zeros((dt.num_rows, 1))\n        x[:, 0] = np.log10(dt.data[:, 0])\n        y[:, 0] = np.log10(dt.data[:, 1])\n        return x, y, True\n'"
RepTate/core/Application.py,4,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module Application\n\nModule that defines the basic class from which all applications are derived.\n\n""""""\nimport io\n#import logging\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import AutoMinorLocator\n\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.DataSet import DataSet\nfrom RepTate.theories.TheoryBasic import *\nfrom RepTate.core.Tool import *\n\nfrom RepTate.core.MultiView import MultiView, PlotOrganizationType\nfrom PyQt5.QtWidgets import QApplication\nfrom PyQt5.QtGui import QImage, QColor\nfrom PyQt5.QtCore import Qt\n\nfrom collections import OrderedDict\nfrom RepTate.theories.TheoryBasic import TheoryPolynomial, TheoryPowerLaw, TheoryExponential, TheoryTwoExponentials, TheoryAlgebraicExpression\nfrom RepTate.tools.ToolIntegral import ToolIntegral\nfrom RepTate.tools.ToolFindPeaks import ToolFindPeaks\nfrom RepTate.tools.ToolGradient import ToolGradient\nfrom RepTate.tools.ToolSmooth import ToolSmooth\nfrom RepTate.tools.ToolBounds import ToolBounds\nfrom RepTate.tools.ToolEvaluate import ToolEvaluate\nfrom RepTate.tools.ToolInterpolate import ToolInterpolateExtrapolate\nfrom RepTate.tools.ToolPowerLaw import ToolPowerLaw\nfrom RepTate.tools.ToolMaterialsDatabase import ToolMaterialsDatabase\nfrom RepTate.core.mplcursors import cursor\nfrom colorama import Fore, Style\nimport logging\n\nclass Application(CmdBase):\n    """"""Main abstract class that represents an application\n\n    """"""\n    appname = ""Template""\n    description = ""Abstract class that defines basic functionality""\n    extension = """"\n    doc_header = \'Application commands (type help <topic>):\'\n\n    def __init__(self,\n                 name=""ApplicationTemplate"",\n                 parent=None,\n                 nplot_max=4,\n                 ncols=2,\n                 **kwargs):\n        """"""**Constructor**""""""\n\n        super().__init__()\n        self.name = name\n        self.parent_manager = parent\n        self.views = OrderedDict()\n        self.filetypes = OrderedDict() # keep filetypes in order\n        self.theories = OrderedDict()  # keep theory combobox in order\n        self.availabletools = OrderedDict()     # keep tools combobox in order\n        self.extratools = OrderedDict()     # keep tools combobox in order\n        self.datasets = {}\n        self.tools = []\n        self.num_tools = 0\n        self.current_view = 0\n        self.num_datasets = 0\n        self.legend_visible = False\n        self.multiviews = []  #default view order in multiplot views\n        self.nplot_max = nplot_max  # maximun number of plots\n        self.nplots = nplot_max  # current number of plots\n        self.ncols = ncols  #number of columns in the multiplot\n        self.current_viewtab = 0\n\n        self.autoscale = True\n\n        # Theories available everywhere\n        self.common_theories = OrderedDict()  # keep theory combobox in order\n        self.common_theories[TheoryPolynomial.thname] = TheoryPolynomial\n        self.common_theories[TheoryPowerLaw.thname] = TheoryPowerLaw\n        self.common_theories[TheoryExponential.thname] = TheoryExponential\n        self.common_theories[TheoryTwoExponentials.thname] = TheoryTwoExponentials\n        self.common_theories[TheoryAlgebraicExpression.thname] = TheoryAlgebraicExpression\n\n        # Tools available everywhere\n        self.availabletools[ToolBounds.toolname] = ToolBounds\n        self.availabletools[ToolEvaluate.toolname] = ToolEvaluate\n        self.availabletools[ToolFindPeaks.toolname] = ToolFindPeaks\n        self.availabletools[ToolGradient.toolname] = ToolGradient\n        self.availabletools[ToolIntegral.toolname] = ToolIntegral\n        self.availabletools[ToolInterpolateExtrapolate.toolname] = ToolInterpolateExtrapolate\n        self.availabletools[ToolPowerLaw.toolname] = ToolPowerLaw\n        self.availabletools[ToolSmooth.toolname] = ToolSmooth\n        self.extratools[ToolMaterialsDatabase.toolname] = ToolMaterialsDatabase\n\n        # MATPLOTLIB STUFF\n        self.set_multiplot(self.nplots, self.ncols)\n        # self.multiplots = MultiView(PlotOrganizationType.OptimalRow,\n        #                             self.nplots, self.ncols, self)\n        # self.multiplots.plotselecttabWidget.setCurrentIndex(\n        #     self.current_viewtab)\n        # self.figure = self.multiplots.figure\n        # self.axarr = self.multiplots.axarr  #\n        # self.canvas = self.multiplots.canvas\n        self.ax_opt_defaults = {\'fontweight\': \'normal\', \'fontsize\': 20, \'style\': \'normal\', \'family\': \'sans-serif\', \'color_ax\':  QColor(0, 0, 0).getRgbF(),\'color_label\':  QColor(0, 0, 0).getRgbF(), \'tick_label_size\':20, \'axis_thickness\': 1.25, \'grid\': 0, \'label_size_auto\':1, \'tick_label_size_auto\':1}\n        self.ax_opts = self.ax_opt_defaults.copy()\n\n        connection_id = self.figure.canvas.mpl_connect(\'resize_event\', self.resizeplot)\n        connection_id = self.figure.canvas.mpl_connect(\'scroll_event\', self.zoom_wheel)\n        connection_id = self.figure.canvas.mpl_connect(\'button_press_event\', self.on_press)\n        connection_id = self.figure.canvas.mpl_connect(\'motion_notify_event\', self.on_motion)\n        connection_id = self.figure.canvas.mpl_connect(\'button_release_event\', self.onrelease)\n\n        # Variables used during matplotlib interaction\n        self.artists_clicked = []\n        self._pressed_button = None # To store active button during interaction\n        self._axes = None # To store x and y axes concerned by interaction\n        self._event = None  # To store reference event during interaction\n        self._was_zooming = False\n\n        if (CmdBase.mode == CmdMode.cmdline):\n            # self.figure.show()\n            self.multiplots.setWindowFlags(self.multiplots.windowFlags()\n                                           & ~Qt.WindowCloseButtonHint)\n            self.multiplots.show()\n        self.datacursor_ = None\n\n        # LOGGING STUFF\n        self.logger = logging.getLogger(self.parent_manager.logger.name + \'.\' + self.name)\n        self.logger.debug(\'New %s app\'%self.appname)\n\n    def resizeplot(self, event=""""):\n        """"""Rescale plot graphics when the window is resized""""""\n        if not (self.ax_opts[\'label_size_auto\'] or self.ax_opts[\'tick_label_size_auto\']):\n            return\n        #large window settings\n        w_large = 900\n        h_large = 650\n        font_large = 16\n        #small window settings\n        w_small = 300\n        h_small = 400\n        font_small = 10\n        #interpolate for current window size\n        geometry = self.multiplots.frameGeometry()\n        width = geometry.width()\n        height = geometry.height()\n        scale_w = font_small + (width - w_small)*(font_large - font_small)/(w_large - w_small)\n        scale_h = font_small + (height - h_small)*(font_large - font_small)/(h_large - h_small)\n        font_size = min(scale_w, scale_h)\n        #resize plot fonts\n        for ax in self.axarr:\n            if self.ax_opts[\'label_size_auto\']:\n                ax.xaxis.label.set_size(font_size)\n                ax.yaxis.label.set_size(font_size)\n            if self.ax_opts[\'tick_label_size_auto\']:\n                ax.tick_params(which=\'major\', labelsize=font_size)\n                ax.tick_params(which=\'minor\', labelsize=font_size*.8)\n\n    def zoom_wheel(self, event):\n        base_scale = 1.1\n        if event.button == \'up\':\n            # deal with zoom in\n            scale_factor = 1 / base_scale\n        elif event.button == \'down\':\n            # deal with zoom out\n            scale_factor = base_scale\n        else:\n            # deal with something that should never happen\n            scale_factor = 1\n\n        # if event.step > 0:\n            # scale_factor = self.scale_factor\n        # else:\n            # scale_factor = 1. / self.scale_factor\n\n        # Go through all axes to enable zoom for multiple axes subplots\n        x_axes, y_axes = self._axes_to_update(event)\n\n        for ax in x_axes:\n            transform = ax.transData.inverted()\n            xdata, ydata = transform.transform_point((event.x, event.y))\n\n            xlim = ax.get_xlim()\n            xlim = self._zoom_range(xlim[0], xlim[1],\n                                    xdata, scale_factor,\n                                    ax.get_xscale())\n            ax.set_xlim(xlim)\n\n        for ax in y_axes:\n            ylim = ax.get_ylim()\n            ylim = self._zoom_range(ylim[0], ylim[1],\n                                    ydata, scale_factor,\n                                    ax.get_yscale())\n            ax.set_ylim(ylim)\n\n        if x_axes or y_axes:\n            self.figure.canvas.draw()\n\n    def _axes_to_update(self, event):\n        """"""Returns two sets of Axes to update according to event.\n\n        Takes care of multiple axes and shared axes.\n\n        :param MouseEvent event: Matplotlib event to consider\n        :return: Axes for which to update xlimits and ylimits\n        :rtype: 2-tuple of set (xaxes, yaxes)\n\n        """"""\n        x_axes, y_axes = set(), set()\n\n        # Go through all axes to enable zoom for multiple axes subplots\n        for ax in self.figure.axes:\n            if ax.contains(event)[0]:\n                # For twin x axes, makes sure the zoom is applied once\n                shared_x_axes = set(ax.get_shared_x_axes().get_siblings(ax))\n                if x_axes.isdisjoint(shared_x_axes):\n                    x_axes.add(ax)\n\n                # For twin y axes, makes sure the zoom is applied once\n                shared_y_axes = set(ax.get_shared_y_axes().get_siblings(ax))\n                if y_axes.isdisjoint(shared_y_axes):\n                    y_axes.add(ax)\n\n        return x_axes, y_axes\n\n    def _zoom_range(self, begin, end, center, scale_factor, scale):\n        """"""Compute a 1D range zoomed around center.\n        :param float begin: The begin bound of the range.\n        :param float end: The end bound of the range.\n        :param float center: The center of the zoom (i.e., invariant point)\n        :param float scale_factor: The scale factor to apply.\n        :param str scale: The scale of the axis\n        :return: The zoomed range (min, max)\n        """"""\n        if begin < end:\n            min_, max_ = begin, end\n        else:\n            min_, max_ = end, begin\n\n        if scale == \'linear\':\n            old_min, old_max = min_, max_\n        elif scale == \'log\':\n            old_min = np.log10(min_ if min_ > 0. else np.nextafter(0, 1))\n            center = np.log10(\n                center if center > 0. else np.nextafter(0, 1))\n            old_max = np.log10(max_) if max_ > 0. else 0.\n        else:\n            logging.warning(\n                \'Zoom on wheel not implemented for scale ""%s""\' % scale)\n            return begin, end\n\n        offset = (center - old_min) / (old_max - old_min)\n        range_ = (old_max - old_min) / scale_factor\n        new_min = center - offset * range_\n        new_max = center + (1. - offset) * range_\n\n        if scale == \'log\':\n            try:\n                new_min, new_max = 10. ** float(new_min), 10. ** float(new_max)\n            except OverflowError:  # Limit case\n                new_min, new_max = min_, max_\n            if new_min <= 0. or new_max <= 0.:  # Limit case\n                new_min, new_max = min_, max_\n\n        if begin < end:\n            return new_min, new_max\n        else:\n            return new_max, new_min\n\n    def on_press(self, event):\n        if event.button == 2: # Pan\n            x_axes, y_axes = self._axes_to_update(event)\n            if x_axes or y_axes:\n                self._axes = x_axes, y_axes\n                self._pressed_button = event.button\n                self._pan(event)\n        elif event.button == 3: # Zoom\n            x_axes, y_axes = self._axes_to_update(event)\n            if x_axes or y_axes:\n                self._axes = x_axes, y_axes\n                self._pressed_button = event.button\n                self._zoom_area(event)\n\n    def on_motion(self, event):\n        if self._pressed_button == 2:  # pan\n            self._pan(event)\n        elif self._pressed_button == 3:  # zoom area\n            self._zoom_area(event)\n\n    def onrelease(self, event):\n        """"""Called when releasing mouse""""""\n        if event.button == 3:  #if release a right click\n            self._zoom_area(event)\n            if not self._was_zooming and CmdBase.mode == CmdMode.GUI:\n                self.open_figure_popup_menu(event)\n            self.artists_clicked.clear()\n            self._was_zooming = False\n        elif event.button == 2:\n            self._pan(event)\n        self._pressed_button = None\n\n    def _pan(self, event):\n        if event.name == \'button_press_event\':  # begin pan\n            self._event = event\n\n        elif event.name == \'button_release_event\':  # end pan\n            self._event = None\n\n        elif event.name == \'motion_notify_event\':  # pan\n            if self._event is None:\n                return\n\n            if event.x != self._event.x:\n                for ax in self._axes[0]:\n                    xlim = self._pan_update_limits(ax, 0, event, self._event)\n                    ax.set_xlim(xlim)\n\n            if event.y != self._event.y:\n                for ax in self._axes[1]:\n                    ylim = self._pan_update_limits(ax, 1, event, self._event)\n                    ax.set_ylim(ylim)\n\n            if event.x != self._event.x or event.y != self._event.y:\n                self.figure.canvas.draw()\n\n            self._event = event\n\n    def _pan_update_limits(self, ax, axis_id, event, last_event):\n        """"""Compute limits with applied pan.""""""\n        assert axis_id in (0, 1)\n        if axis_id == 0:\n            lim = ax.get_xlim()\n            scale = ax.get_xscale()\n        else:\n            lim = ax.get_ylim()\n            scale = ax.get_yscale()\n\n        pixel_to_data = ax.transData.inverted()\n        data = pixel_to_data.transform_point((event.x, event.y))\n        last_data = pixel_to_data.transform_point((last_event.x, last_event.y))\n\n        if scale == \'linear\':\n            delta = data[axis_id] - last_data[axis_id]\n            new_lim = lim[0] - delta, lim[1] - delta\n        elif scale == \'log\':\n            try:\n                delta = math.log10(data[axis_id]) - \\\n                    math.log10(last_data[axis_id])\n                new_lim = [pow(10., (math.log10(lim[0]) - delta)),\n                           pow(10., (math.log10(lim[1]) - delta))]\n            except (ValueError, OverflowError):\n                new_lim = lim  # Keep previous limits\n        else:\n            logging.warning(\'Pan not implemented for scale ""%s""\' % scale)\n            new_lim = lim\n        return new_lim\n\n    def _zoom_area(self, event):\n        if event.name == \'button_press_event\':  # begin drag\n            self._event = event\n            self._patch = plt.Rectangle(\n                xy=(event.xdata, event.ydata), width=0, height=0,\n                fill=False, linewidth=1., linestyle=\':\', color=\'gray\')\n            self._event.inaxes.add_patch(self._patch)\n\n            canvas = self._patch.figure.canvas\n            axes = self._patch.axes\n            self._patch.set_animated(True)\n            canvas.draw()\n            self.background = canvas.copy_from_bbox(self._patch.axes.bbox)\n            axes.draw_artist(self._patch)\n            canvas.update()\n\n        elif event.name == \'button_release_event\':  # end drag\n            self.background = None\n            try:\n                self._patch.remove()\n                del self._patch\n            except AttributeError:\n                # self._patch do not exist\n                pass\n            if self._event == None:\n                self._was_zooming = False\n                return\n            if (abs(event.x - self._event.x) < 3 or\n                    abs(event.y - self._event.y) < 3):\n                self._was_zooming = False\n                return  # No zoom when points are too close\n\n            x_axes, y_axes = self._axes\n\n            for ax in x_axes:\n                pixel_to_data = ax.transData.inverted()\n                end_pt = pixel_to_data.transform_point((event.x, event.y))\n                begin_pt = pixel_to_data.transform_point(\n                    (self._event.x, self._event.y))\n\n                min_ = min(begin_pt[0], end_pt[0])\n                max_ = max(begin_pt[0], end_pt[0])\n                if (end_pt[0]>begin_pt[0]):\n                    if not ax.xaxis_inverted():\n                        ax.set_xlim(min_, max_)\n                    else:\n                        ax.set_xlim(max_, min_)\n                else:\n                    min_now, max_now = ax.get_xlim()\n                    if ax.get_xscale() == \'log\':\n                        fac = 10.0**((math.log10(max_) - math.log10(min_))/2)\n                        if not ax.xaxis_inverted():\n                            ax.set_xlim(min_now/fac, max_now*fac)\n                        else:\n                            ax.set_xlim(max_now*fac, min_now/fac)\n                    else:\n                        dx = max_ - min_\n                        if not ax.xaxis_inverted():\n                            ax.set_xlim(min_now-dx, max_now+dx)\n                        else:\n                            ax.set_xlim(max_now+dx, min_now-dx)\n\n            for ax in y_axes:\n                pixel_to_data = ax.transData.inverted()\n                end_pt = pixel_to_data.transform_point((event.x, event.y))\n                begin_pt = pixel_to_data.transform_point(\n                    (self._event.x, self._event.y))\n\n                min_ = min(begin_pt[1], end_pt[1])\n                max_ = max(begin_pt[1], end_pt[1])\n                if (end_pt[1]<begin_pt[1]):\n                    if not ax.yaxis_inverted():\n                        ax.set_ylim(min_, max_)\n                    else:\n                        ax.set_ylim(max_, min_)\n                else:\n                    min_now, max_now = ax.get_ylim()\n                    if ax.get_yscale() == \'log\':\n                        fac = 10.0**((math.log10(max_) - math.log10(min_))/2)\n                        if not ax.yaxis_inverted():\n                            ax.set_ylim(min_now/fac, max_now*fac)\n                        else:\n                            ax.set_ylim(max_now*fac, min_now/fac)\n                    else:\n                        dy = max_ - min_\n                        if not ax.yaxis_inverted():\n                            ax.set_ylim(min_now-dy, max_now+dy)\n                        else:\n                            ax.set_ylim(max_now+dy, min_now-dy)\n\n            self._event = None\n            self._was_zooming = True\n            self.figure.canvas.draw()\n\n\n        elif event.name == \'motion_notify_event\':  # drag\n            if self._event is None:\n                return\n\n            if event.inaxes != self._event.inaxes:\n                return  # Ignore event outside plot\n\n            self._patch.set_width(event.xdata - self._event.xdata)\n            self._patch.set_height(event.ydata - self._event.ydata)\n\n            canvas = self._patch.figure.canvas\n            axes = self._patch.axes\n            canvas.restore_region(self.background)\n            axes.draw_artist(self._patch)\n            canvas.update()\n\n    def update_datacursor_artists(self):\n        """"""Update the datacursor instance\n        Called at the end of ds.do_plot() and when plot-tab is changed""""""\n        try:\n            self.datacursor_.remove()\n        except AttributeError:\n            pass\n        del self.datacursor_\n\n        if CmdBase.mode == CmdMode.GUI:\n            ds_list = [self.DataSettabWidget.currentWidget(),]\n            if self.actionView_All_Sets.isChecked():\n                ds_list = self.datasets.values()\n            artists = []\n            for ds in ds_list:\n                if ds:\n                    th = ds.TheorytabWidget.currentWidget()\n                    for f in ds.files:\n                        if f.active:\n                            dt = f.data_table\n                            for j in range(dt.MAX_NUM_SERIES):\n                                if self.current_viewtab == 0:\n                                    # all artists\n                                    for i in range(self.nplots):\n                                        artists.append(dt.series[i][j])\n                                        if th:\n                                            artists.append(th.tables[f.file_name_short].series[i][j])\n                                else:\n                                    # only artists of current tab\n                                    artists.append(dt.series[self.current_viewtab - 1][j])\n                                    if th:\n                                        artists.append(th.tables[f.file_name_short].series[self.current_viewtab - 1][j])\n                self.datacursor_ = cursor(pickables=artists)\n                self.datacursor_.bindings[""deselect""] = 1\n        else:\n            axs = [self.axarr[i] for i in range(self.nplots)]\n            self.datacursor_ = cursor(pickables=axs)\n            self.datacursor_.bindings[""deselect""] = 1\n        @self.datacursor_.connect(""add"")\n        def _(sel):\n            x, y = sel.target\n            sel.annotation.set(text=""%.3g; %.3g""%(x,y), size=13)\n            sel.annotation.get_bbox_patch().set(alpha=0.7)\n            sel.annotation.arrow_patch.set(ec=""red"", alpha=0.5)\n\n    def delete_multiplot(self):\n        """"""deletes the multiplot object""""""\n        del self.multiplots\n\n    def set_multiplot(self, nplots, ncols):\n        """"""defines the plot""""""\n        self.multiplots = MultiView(PlotOrganizationType.OptimalRow,\n                                    nplots, ncols, self)\n        self.multiplots.plotselecttabWidget.setCurrentIndex(\n            self.current_viewtab)\n        self.figure = self.multiplots.figure\n        self.axarr = self.multiplots.axarr  #\n        self.canvas = self.multiplots.canvas\n\n    def set_view_tools(self, view_name):\n        """"""Redefined in Child application. Called when view is changed""""""\n        pass\n\n    def add_common_theories(self):\n        """"""Add common theories to the list of available th""""""\n        for th in self.common_theories.values():\n            self.theories[th.thname] = th\n\n    def refresh_plot(self):\n        """"""Refresh the current plot""""""\n        self.view_switch(self.current_view.name)\n\n    def copy_chart(self):\n        """""" Copy current chart to clipboard""""""\n        buf = io.BytesIO()\n        self.figure.savefig(buf, dpi=150)\n        QApplication.clipboard().setImage(QImage.fromData(buf.getvalue()))\n        buf.close()\n\n    def clipboard_coordinates(self, artist):\n        """"""Copy data to clipboard in tab-separated format""""""\n        try:\n            x, y = artist.get_data()\n        except:\n            return\n        line_strings = []\n        for i in range(len(x)):\n            line_strings.append(str(x[i]) + ""\\t"" + str(y[i]))\n        array_string = ""\\n"".join(line_strings)\n        QApplication.clipboard().setText(array_string)\n\n    def new(self, line):\n        """"""Create new empty dataset in the application""""""\n        self.num_datasets += 1\n        if (line == """"):\n            dsname = ""Set%d"" % self.num_datasets\n        else:\n            dsname = line\n        ds = DataSet(dsname, self)\n        if (self.mode == CmdMode.batch):\n            ds.prompt = \'\'\n        else:\n            ds.prompt = self.prompt[:-2] + \'/\' + Fore.YELLOW + ds.name + \'> \'\n        return ds, dsname\n\n    def do_new(self, line):\n        """"""Create a new empty dataset in this application.""""""\n        ds, dsname = self.new(line)\n        self.datasets[dsname] = ds\n        ds.cmdloop()\n\n    def delete(self, ds_name):\n        """"""Delete a dataset from the current application""""""\n        if ds_name in self.datasets.keys():\n            self.remove_ds_ax_lines(ds_name)\n            for th in self.datasets[ds_name].theories.values():\n                try:\n                    th.destructor()\n                except:\n                    pass\n            self.datasets[ds_name].theories.clear()\n            self.datasets[ds_name].files.clear()\n            del self.datasets[ds_name]\n        else:\n            print(""Data Set \\""%s\\"" not found"" % ds_name)\n\n    def remove_ds_ax_lines(self, ds_name):\n        """"""Remove all dataset file artists from ax including theory ones""""""\n        try:\n            ds = self.datasets[ds_name]\n        except KeyError:\n            return\n        for th in ds.theories.values():\n            for tt in th.tables.values():\n                for i in range(tt.MAX_NUM_SERIES):\n                    for nx in range(self.nplots):\n                        self.axarr[nx].lines.remove(tt.series[nx][i])\n        for file in ds.files:\n            for i in range(file.data_table.MAX_NUM_SERIES):\n                for nx in range(self.nplots):\n                    self.axarr[nx].lines.remove(file.data_table.series[nx][i])\n\n    def do_delete(self, name):\n        """"""Delete a dataset from the current application""""""\n        self.delete(name)\n    do_del = do_delete\n\n    def complete_delete(self, text, line, begidx, endidx):\n        """"""Complete delete dataset command""""""\n        dataset_names = list(self.datasets.keys())\n        if not text:\n            completions = dataset_names[:]\n        else:\n            completions = [f for f in dataset_names if f.startswith(text)]\n        return completions\n    complete_del = complete_delete\n\n    def do_list(self, line=""""):\n        """"""List the datasets in the current application""""""\n        self.do_list_tools()\n        self.do_list_datasets()\n\n    def do_list_datasets(self, line=""""):\n        """"""List the datasets in the current application""""""\n        if len(self.datasets)>0:\n            print(""DATASETS IN THE CURRENT APPLICATION"")\n            print(""==================================="")\n        for ds in self.datasets.values():\n            print(Fore.YELLOW + ""%s""%ds.name + Fore.RESET)\n\n    def do_tree(self, line):\n        """"""List all the tools, datasets, files and theories in the current application""""""\n        done=False\n        if line=="""":\n            offset=0\n            prefix=""""\n            done=True\n        else:\n            try:\n                offset=int(line)\n                if offset==1:\n                    prefix=""|--""\n                    done=True\n                else:\n                    print(""Wrong argument for the tree command."")\n            except ValueError:\n                print(""Wrong argument for the tree command."")\n        if done:\n            for t in self.tools:\n                print(prefix + Fore.CYAN + t.name + Fore.RESET)\n            for ds in self.datasets.keys():\n                print(prefix + Fore.YELLOW + ""%s""%self.datasets[ds].name + Fore.RESET)\n                self.datasets[ds].do_tree(str(offset+1))\n\n    def do_switch(self, line):\n        """"""Set focus to an open set/theory/tool.\n        By hitting TAB, all the currently accessible elements are shown.\n        \n        :param line: Name of the set/theory/tool to switch the focus to.- \n\n        :Example:\n\n            >>> switch LVE1.Set1.LM1\n            >>> switch NLVE2.Set2.RP2\n            >>> switch PL1\n\n        .. todo:: Find key functions and document them like this one\n\n        """"""\n        items=line.split(\'.\')\n        listtools = [x.name for x in self.tools]\n        if len(items)>1:\n            name=items[0]\n            if name in self.datasets.keys():\n                ds = self.datasets[name]\n                ds.cmdqueue.append(\'switch \'+\'.\'.join(items[1:]))\n                ds.cmdloop()\n            else:\n                print(""DataSet \\""%s\\"" not found"" % name)\n        else:\n            name=items[0]\n            if name in self.datasets.keys():\n                ds = self.datasets[name]\n                ds.cmdloop()\n            elif name in listtools:\n                try:\n                    idx = listtools.index(line)\n                    self.tools[idx].cmdloop()\n                except AttributeError as e:\n                    print(""Tool\\""%s\\"" not found"" % line)\n            else:\n                print(""DataSet \\""%s\\"" not found"" % name)\n\n    def complete_switch(self, text, line, begidx, endidx):\n        """"""Complete switch command""""""\n        setlist = list(self.datasets.keys())\n        thlist = []\n        for ds in setlist:\n            thnames = self.datasets[ds].get_tree()\n            thlist += [ds + \'.\' + t for t in thnames]\n        toollist = [x.name for x in self.tools]\n        switchlist = setlist + thlist + toollist\n        if not text:\n            completions = switchlist[:]\n        else:\n            completions = [f for f in switchlist if f.startswith(text)]\n        return completions\n\n    def get_tree(self):\n        ds_names = list(self.datasets.keys())\n        thlist = []\n        for ds in ds_names:\n            thnames = self.datasets[ds].get_tree()\n            thlist += [ds + \'.\' + t for t in thnames]\n        to_names = [t.name for t in self.tools]\n\n        return ds_names + thlist + to_names\n\n# FILE TYPE STUFF\n\n    def do_available_filetypes(self, line=""""):\n        """"""List available file types in the current application""""""\n        print(""AVAILABLE FILETYPES"")\n        print(""==================="")\n        ftypes = list(self.filetypes.values())\n        for ftype in ftypes:\n            print(""%s (""%ftype.name + Fore.CYAN + ""*.%s""%ftype.extension + Fore.RESET + ""): %s""%ftype.description)\n\n# VIEW STUFF\n\n    def set_views(self):\n        """"""Set current view and assign availiable view labels to viewComboBox if in GUI mode""""""\n        for i, view_name in enumerate(self.views):  #loop over the keys\n            if i == 0:\n                #index 0 is the defaut view\n                self.current_view = self.views[view_name]\n            #add view name to the list of views avaliable\n            if CmdBase.mode == CmdMode.GUI:\n                self.viewComboBox.insertItem(i, view_name)\n                self.viewComboBox.setItemData(i, self.views[view_name].description, Qt.ToolTipRole)\n\n        if CmdBase.mode == CmdMode.GUI:\n            #index 0 is the defaut selection\n            self.viewComboBox.setCurrentIndex(0)\n\n    def do_available_views(self, line=""""):\n        """"""List available views in the current application""""""\n        print(""AVAILABLE VIEWS"")\n        print(""==============="")\n        for view in self.views.values():\n            if (view == self.current_view):\n                c = Fore.RED + ""*"" + Fore.RESET\n            else:\n                c = "" ""\n            print(c + Fore.BLUE + Style.BRIGHT + ""%s""%view.name +\n                    Fore.RESET + Style.RESET_ALL + "":\\t%s"" %view.description)\n\n    def do_available(self, line):\n        """"""Tools/File Types/Views/Theories available in the current application""""""\n        self.do_available_tools()\n        self.do_available_filetypes()\n        self.do_available_views()\n        self.do_available_theories()\n\n    def view_switch(self, name):\n        """"""Change to another view from open application""""""\n        if name in list(self.views.keys()):\n            self.current_view = self.views[name]\n            if self.current_viewtab == 0:\n                self.multiviews[0] = self.views[name]\n            else:\n                self.multiviews[self.current_viewtab - 1] = self.views[name]\n        else:\n            print(""View \\""%s\\"" not found"" % name)\n        # Update the plots!\n        # Loop over datasets and call do_plot()\n        temp = self.autoscale\n        self.autoscale = True\n        self.update_all_ds_plots()\n        self.autoscale = temp\n\n    def update_all_ds_plots(self):\n        """"""Update all plots from all DataSets""""""\n        for ds in self.datasets.values():\n            ds.do_plot()\n\n    def do_plot(self, name=""""):\n        """"""Update and refresh all plots""""""\n        self.update_all_ds_plots()\n\n    def do_view(self, name):\n        """"""Change the active view""""""\n        self.view_switch(name)\n\n    def complete_view(self, text, line, begidx, endidx):\n        """"""Complete view command""""""\n        view_names = list(self.views.keys())\n        if not text:\n            completions = view_names[:]\n        else:\n            completions = [f for f in view_names if f.startswith(text)]\n        return completions\n\n# THEORY STUFF\n\n    def do_available_theories(self, line=""""):\n        """"""List available theories in the current application""""""\n        print(""AVAILABLE THEORIES"")\n        print(""=================="")\n        for t in list(self.theories.values()):\n            print(Fore.MAGENTA + ""%s:""%t.thname + (20-len(t.thname))*"" "" + Fore.RESET + ""%s""%t.description)\n\n# TOOL STUFF\n    def do_available_tools(self, line=""""):\n        """"""List available tools in the current application""""""\n        print(""AVAILABLE TOOLS"")\n        print(""==============="")\n        for t in list(self.availabletools.values()):\n            print(Fore.CYAN + ""%s""%t.toolname + Fore.RESET + "":\\t%s""%t.description)\n        for t in list(self.extratools.values()):\n            print(Fore.CYAN + ""%s""%t.toolname + Fore.RESET + "":\\t%s""%t.description)\n\n    def tool_new(self, line):\n        """"""Add a new tool of the type specified to the list of tools""""""\n        tooltypes = list(self.availabletools.keys())\n        extratooltypes = list(self.extratools.keys())\n        if ((line in tooltypes) or (line in extratooltypes)):\n            self.num_tools += 1\n            to_id = \'\'.join(\n                c for c in line\n                if c.isupper())  #get the upper case letters of th_name\n            to_id = ""%s%d"" % (to_id, self.num_tools)\n            if (line in tooltypes):\n                to = self.availabletools[line](to_id, self)\n            elif (line in extratooltypes):\n                to = self.extratools[line](to_id, self)\n            if (self.mode == CmdMode.batch):\n                to.prompt = \'\'\n            else:\n                to.prompt = self.prompt[:-2] + \'/\' + Fore.CYAN + to.name + \'> \'\n            self.tools.append(to)\n        else:\n            to=None\n        return to\n\n    def do_tool_new(self, line):\n        """"""Create a new empty dataset in this application.""""""\n        to = self.tool_new(line)\n        if to != None:\n            to.cmdloop()\n        else:\n            print(""Tool \\""%s\\"" does not exists"" % line)\n\n    def complete_tool_new(self, text, line, begidx, endidx):\n        """"""Complete new tool command""""""\n        tool_names = list(self.availabletools.keys()) + list(self.extratools.keys())\n        if not text:\n            completions = tool_names[:]\n        else:\n            completions = [f for f in tool_names if f.startswith(text)]\n        return completions\n\n    def do_tool_delete(self, name):\n        """"""Delete a tool from the current application""""""\n        listtools = [x.name for x in self.tools]\n        try:\n            idx = listtools.index(name)\n            self.tools[idx].destructor()\n            del self.tools[idx]\n        except AttributeError as e:\n            print(""Tool \\""%s\\"" not found"" % name)\n\n    def complete_tool_delete(self, text, line, begidx, endidx):\n        """"""Complete delete tool command""""""\n        listtools = [x.name for x in self.tools]\n        if not text:\n            completions = listtools[:]\n        else:\n            completions = [f for f in listtools if f.startswith(text)]\n        return completions\n\n    def do_list_tools(self, line=""""):\n        """"""List opened tools in the current application""""""\n        if len(self.tools)>0:\n            print(""OPEN TOOLS IN THIS APPLICATION"")\n            print(""=============================="")\n        for t in self.tools:\n            if t.active:\n                print(""*"" + Fore.CYAN + ""%s:""%t.name + Fore.RESET + (15-len(t.name))*"" "" + ""%s""%t.toolname)\n            else:\n                print("" "" + Fore.CYAN + ""%s:""%t.name + Fore.RESET + (15-len(t.name))*"" "" + ""%s""%t.toolname)\n\n    def do_tool_activate(self, name):\n        """"""Enable/Disable a given tool""""""\n        listtools = [x.name for x in self.tools]\n        try:\n            idx = listtools.index(name)\n            self.tools[idx].do_activate(name)\n        except AttributeError as e:\n            print(""Tool \\""%s\\"" not found"" % name)\n        except ValueError as e:\n            print(""Tool \\""%s\\"" not found"" % name)\n\n    def complete_tool_activate(self, text, line, begidx, endidx):\n        """"""Complete the tool switch command""""""\n        completions = self.complete_tool_delete(text, line, begidx, endidx)\n        return completions\n\n# LEGEND STUFF\n\n    def legend(self):\n        """"""Show/Hide the legend""""""\n        self.legend_visible = not self.legend_visible\n        self.set_legend_properties()\n        self.canvas.draw()\n\n    def do_legend(self, line):\n        """"""Show/Hide the legend""""""\n        self.legend()\n\n\n# OTHER STUFF\n\n    def update_plot(self):\n        """"""Update the plot in the current application""""""\n        self.set_axes_properties(self.autoscale)\n        #self.set_legend_properties()\n        if CmdBase.mode == CmdMode.GUI:\n            self.update_legend()\n        self.canvas.draw()\n\n    def set_axes_properties(self, autoscale=True):\n        """"""Set axes properties""""""\n        for nx in range(self.nplots):\n            view = self.multiviews[nx]\n            ax = self.axarr[nx]\n            if (view.log_x):\n                ax.set_xscale(""log"")\n            else:\n                ax.set_xscale(""linear"")\n                ax.xaxis.set_minor_locator(AutoMinorLocator())\n            if (view.log_y):\n                ax.set_yscale(""log"")\n            else:\n                ax.set_yscale(""linear"")\n                ax.yaxis.set_minor_locator(AutoMinorLocator())\n\n            ax.set_xlabel(view.x_label + \' [\' + view.x_units + \']\')\n            ax.set_ylabel(view.y_label + \' [\' + view.y_units + \']\')\n\n            if not self.ax_opts[\'label_size_auto\']:\n                ax.xaxis.label.set_size(self.ax_opts[\'fontsize\'])\n                ax.yaxis.label.set_size(self.ax_opts[\'fontsize\'])\n\n            ax.xaxis.label.set_color(self.ax_opts[\'color_label\'])\n            ax.yaxis.label.set_color(self.ax_opts[\'color_label\'])\n\n            ax.xaxis.label.set_style(self.ax_opts[\'style\'])\n            ax.yaxis.label.set_style(self.ax_opts[\'style\'])\n\n            ax.xaxis.label.set_family(self.ax_opts[\'family\'])\n            ax.yaxis.label.set_family(self.ax_opts[\'family\'])\n\n            ax.xaxis.label.set_weight(self.ax_opts[\'fontweight\'])\n            ax.yaxis.label.set_weight(self.ax_opts[\'fontweight\'])\n\n            ax_thick = self.ax_opts[\'axis_thickness\']\n            ax.tick_params(which=\'major\', width=1.00*ax_thick, length=5*ax_thick)\n            ax.tick_params(which=\'minor\', width=0.75*ax_thick, length=2.5*ax_thick)\n\n            if not self.ax_opts[\'tick_label_size_auto\']:\n                ax.tick_params(which=\'major\', labelsize=self.ax_opts[\'tick_label_size\'])\n                ax.tick_params(which=\'minor\', labelsize=self.ax_opts[\'tick_label_size\']*.8)\n\n            ax.grid(self.ax_opts[\'grid\'])\n\n            for pos in [\'top\', \'bottom\', \'left\', \'right\']:\n                ax.spines[pos].set_linewidth(ax_thick)\n                ax.spines[pos].set_color(self.ax_opts[\'color_ax\'])\n            ax.tick_params(which=\'both\', color=self.ax_opts[\'color_ax\'], labelcolor=self.ax_opts[\'color_ax\'])\n\n            if autoscale:\n                self.axarr[nx].relim(True)\n                self.axarr[nx].autoscale(True)\n                self.axarr[nx].autoscale_view()\n                self.axarr[nx].set_aspect(""auto"")\n\n    def set_legend_properties(self):\n        """"""Set default legend properties""""""\n        # pass\n        leg = self.axarr[0].legend(frameon=True, ncol=2)\n        if (self.legend_visible):\n            leg.set_draggable(True)\n            pass\n        else:\n            try:\n                leg.remove()\n            except AttributeError as e:\n                pass\n                #print(""legend: %s""%e)\n\n    def do_figure_save(self, line=""""):\n        """"""Save the figure to file. Argument = file name. The image format is determined from the file extension.""""""\n        if line=="""":\n            plt.savefig(""RepTateFigure.png"")\n        else:\n            plt.savefig(line)\n\n    def complete_figure_save(self, text, line, begidx, endidx):\n        """"""Complete the figure_save command""""""\n        return self.complete_cd(text, line, begidx, endidx)\n\n# TUTORIAL\n\n    def do_tutorial(self, line=""""):\n        """"""Show a short tutorial about the commands in RepTate applications""""""\n        print("""")\n        print(\'Inspect the python scripts in the\' + Fore.RED + \' ""tests"" \' + Fore.RESET + \'folder.\')\n        print(\'Visit the page:\')\n        print(Fore.CYAN + \'https://reptate.readthedocs.io/manual/Applications/All_Tutorials/All_Tutorials.html\' + Fore.RESET)\n        print(""""""\nBasic use:\n=========="""""")\n        print(Fore.RED + ""available"" + Fore.RESET)\n        self.do_help(""available"")\n        print(Fore.RED + ""new"" + Fore.RESET)\n        self.do_help(""new"")\n        print(Fore.RED + ""tool_new"" + Fore.RESET)\n        self.do_help(""tool_new"")\n        print(Fore.RED + ""view"" + Fore.RESET)\n        self.do_help(""view"")\n        print(Fore.RED + ""tree"" + Fore.RESET)\n        self.do_help(""tree"")\n        print(Fore.RED + ""switch"" + Fore.RESET)\n        self.do_help(""switch"")\n        print(Fore.RED + ""plot"" + Fore.RESET)\n        self.do_help(""plot"")\n        print("""")\n        \n'"
RepTate/core/ApplicationManager.py,0,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module ApplicationManager\n\nModule for the Main interface that contains all applications. Command line version.\n\n""""""\nimport readline\nfrom urllib.request import urlopen\nimport json\nimport logging\nimport logging.handlers\nfrom pathlib import Path\nimport os\nfrom PyQt5.QtCore import QStandardPaths\n\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.applications.ApplicationTTS import ApplicationTTS\nfrom RepTate.applications.ApplicationTTSFactors import ApplicationTTSFactors\nfrom RepTate.applications.ApplicationLVE import ApplicationLVE\nfrom RepTate.applications.ApplicationNLVE import ApplicationNLVE\nfrom RepTate.applications.ApplicationCrystal import ApplicationCrystal\nfrom RepTate.applications.ApplicationMWD import ApplicationMWD\nfrom RepTate.applications.ApplicationGt import ApplicationGt\nfrom RepTate.applications.ApplicationCreep import ApplicationCreep\nfrom RepTate.applications.ApplicationSANS import ApplicationSANS\nfrom RepTate.applications.ApplicationReact import ApplicationReact\nfrom RepTate.applications.ApplicationDielectric import ApplicationDielectric\nfrom RepTate.applications.ApplicationLAOS import ApplicationLAOS\n\n# from ApplicationXY import ApplicationXY\n# from ApplicationFRS_I import *\nimport RepTate\nfrom collections import OrderedDict\nfrom colorama import Fore\n\n\nclass ApplicationManager(CmdBase):\n    """"""Main Reptate container of applications\n\n    """"""\n\n    verdata = RepTate._version.get_versions()\n    version = verdata[""version""].split(""+"")[0]\n    date = verdata[""date""].split(""T"")[0]\n    build = verdata[""version""]\n    prompt = Fore.GREEN + ""RepTate> ""\n    intro = (\n        Fore.GREEN\n        + ""RepTate ""\n        + Fore.RED\n        + ""%s - %s"" % (version, date)\n        + Fore.RESET\n        + "" command processor (Build %s"" % build\n        + "")\\nhelp [command] for instructions\\nTAB for completions""\n    )\n    doc_header = ""RepTate Manager commands (type help <topic>):""\n\n    def __init__(self, parent=None, loglevel=logging.INFO):\n        """"""**Constructor**""""""\n        super().__init__()\n\n        # SETUP READLINE, COMMAND HISTORY FILE, ETC\n        try:\n            readline.read_history_file()\n        except Exception as e:\n            print(e.__class__, "":"", e)\n            print(""History file not found. Creating a new one"")\n\n        # SETUP APPLICATIONS\n        self.application_counter = 0\n        self.applications = OrderedDict()\n        self.available_applications = OrderedDict()\n        self.available_applications[ApplicationMWD.appname] = ApplicationMWD\n        self.available_applications[ApplicationTTS.appname] = ApplicationTTS\n        self.available_applications[\n            ApplicationTTSFactors.appname\n        ] = ApplicationTTSFactors\n        self.available_applications[ApplicationLVE.appname] = ApplicationLVE\n        self.available_applications[ApplicationNLVE.appname] = ApplicationNLVE\n        self.available_applications[ApplicationCrystal.appname] = ApplicationCrystal\n        self.available_applications[ApplicationGt.appname] = ApplicationGt\n        self.available_applications[ApplicationCreep.appname] = ApplicationCreep\n        self.available_applications[ApplicationSANS.appname] = ApplicationSANS\n        self.available_applications[ApplicationReact.appname] = ApplicationReact\n        self.available_applications[\n            ApplicationDielectric.appname\n        ] = ApplicationDielectric\n        self.available_applications[ApplicationLAOS.appname] = ApplicationLAOS\n\n        # LOGGING STUFF\n        # Setup AppName and platform-dependent path to AppData\n        path_to_AppData = QStandardPaths.writableLocation(QStandardPaths.AppDataLocation)\n        try:\n            os.mkdir(path_to_AppData)\n        except FileExistsError:\n            pass\n\n        self.logger = logging.getLogger(""RepTate"")\n        self.logger.setLevel(loglevel)\n        # home_path = str(Path.home())\n        logfile = os.path.join(path_to_AppData, ""RepTate.log"")\n        fh = logging.handlers.RotatingFileHandler(\n            logfile, maxBytes=100000, backupCount=5\n        )\n        fh.setLevel(loglevel)\n        ch = logging.StreamHandler()\n        ch.setLevel(logging.WARNING)\n        # create formatter and add it to the handlers\n        formatter = logging.Formatter(\n            ""%(asctime)s %(name)s %(levelname)s: %(message)s"", ""%Y%m%d %H%M%S""\n        )\n        fh.setFormatter(formatter)\n        ch.setFormatter(formatter)\n        # add the handlers to the logger\n        self.logger.addHandler(fh)\n        self.logger.addHandler(ch)\n        self.logger.debug(""New ApplicationManager"")\n        if self.mode == CmdMode.batch:\n            self.prompt += Fore.RESET\n\n    # APPLICATION STUFF\n\n    def available(self):\n        """"""Return list of available applications""""""\n        L = []\n        for app in list(self.available_applications.values()):\n            L.append(\n                Fore.RED\n                + ""%s:"" % app.appname\n                + Fore.RESET\n                + (12 - len(app.appname)) * "" ""\n                + ""%s"" % app.description\n            )\n        return L\n\n    def do_available(self, line):\n        """"""List all the available applications in RepTate.""""""\n        print(""AVAILABLE APPLICATIONS"")\n        print(""======================"")\n\n        L = self.available()\n        for app in L:\n            print(app)\n\n    def delete(self, name):\n        """"""Delete an open application""""""\n        if name in self.applications.keys():\n            self.applications[name].delete_multiplot()\n            del self.applications[name]\n        else:\n            print(\'Application ""%s"" not found\' % name)\n\n    def do_delete(self, name):\n        """"""Delete an open application. By hitting TAB, all the currently open applications are shown.""""""\n        self.delete(name)\n\n    do_del = do_delete\n\n    def complete_delete(self, text, line, begidx, endidx):\n        """"""Complete delete application command""""""\n        app_names = list(self.applications.keys())\n        if not text:\n            completions = app_names[:]\n        else:\n            completions = [f for f in app_names if f.startswith(text)]\n        return completions\n\n    complete_del = complete_delete\n\n    def list(self):\n        """"""List open applications""""""\n        L = []\n        for app in list(self.applications.values()):\n            L.append(\n                Fore.RED\n                + ""%s:"" % app.appname\n                + Fore.RESET\n                + (12 - len(app.appname)) * "" ""\n                + ""%s"" % app.description\n            )\n        return L\n\n    def do_list(self, line):\n        """"""List all the currently open applications.""""""\n        print(""CURRENTLY RUNNING APPLICATIONS"")\n        print(""=============================="")\n\n        L = self.list()\n        for app in L:\n            print(app)\n\n    def do_tree(self, line):\n        """"""Show a tree structure of all open applications, tools, datasets and theories""""""\n        for app in self.applications.keys():\n            print(Fore.RED + ""%s"" % self.applications[app].name + Fore.RESET)\n            self.applications[app].do_tree(str(1))\n\n    def new(self, appname):\n        """"""Create a new application and open it.\n\nArguments:\n    - name {str} -- Application to open (MWD, LVE, TTS, etc)""""""\n        if appname in self.available_applications:\n            self.application_counter += 1\n            newapp = self.available_applications[appname](\n                appname + str(self.application_counter), self\n            )\n            self.applications[newapp.name] = newapp\n            if self.mode == CmdMode.batch:\n                newapp.prompt = """"\n            else:\n                newapp.prompt = self.prompt[:-2] + ""/"" + Fore.RED + newapp.name + ""> ""\n            return newapp\n        else:\n            print(\'Application ""%s"" is not available\' % appname)\n            return None\n\n    def do_new(self, appname):\n        """"""Create a new application and open it. Arguments: name (MWD, LVE, TTS, etc... Application to open)""""""\n        newapp = self.new(appname)\n        if newapp != None:\n            if CmdBase.mode != CmdMode.GUI:\n                newapp.cmdqueue.append(""new"")\n            newapp.cmdloop()\n\n    def complete_new(self, text, line, begidx, endidx):\n        """"""Complete new application command""""""\n        app_names = list(self.available_applications.keys())\n        if not text:\n            completions = app_names[:]\n        else:\n            completions = [f for f in app_names if f.startswith(text)]\n        return completions\n\n    def do_switch(self, line):\n        """"""Set focus to an open application/set/theory/tool. \nArgument: name -- applicaton/set/theory/tool to switch the focus to (hit TAB to complete)""""""\n        items = line.split(""."")\n        if len(items) > 1:\n            name = items[0]\n            if name in self.applications.keys():\n                app = self.applications[name]\n                app.cmdqueue.append(""switch "" + ""."".join(items[1:]))\n                app.cmdloop()\n            else:\n                print(\'Application ""%s"" not found\' % name)\n        else:\n            name = items[0]\n            if name in self.applications.keys():\n                app = self.applications[name]\n                app.cmdloop()\n            else:\n                print(\'Application ""%s"" not found\' % name)\n\n    def complete_switch(self, text, line, begidx, endidx):\n        """"""Complete switch command""""""\n        applist = list(self.applications.keys())\n        setlist = []\n        for app in applist:\n            setnames = self.applications[app].get_tree()\n            setlist += [app + ""."" + s for s in setnames]\n        switchlist = applist + setlist\n        if not text:\n            completions = switchlist[:]\n        else:\n            completions = [f for f in switchlist if f.startswith(text)]\n        return completions\n\n    # MAXWELL MODES COPY\n\n    def do_copy_modes(self, line):\n        """"""Copy maxwell modes from one theory to another. Both theories may live inside different applications and/or datasets\n\nUsage:\n    copymodes App1.SetA.TheoryI App2.SetB.TheoryJ\n\nArguments:\n    - line {str} -- Origin (App.Dataset.Theory) Destination (App.Dataset.Theory) """"""\n        apps = line.split()\n        if len(apps) < 2:\n            print(\n                ""Not enough parameters passed\\n""\n                ""Use \'copymodes App1.Dataset1.Theory1 App2.Dataset2.Theory2\'\\n""\n                ""See \'list_theories_Maxwell\' for a list of availiable theories""\n            )\n            return\n\n        source = str(apps[0])\n        target = str(apps[1])\n        if not len(source.split(""."")) == 3:\n            print(\n                ""Source format should be: \'App1.Dataset1.Theory1\'\\n""\n                ""See \'list_theories_Maxwell\' for a list of availiable theories""\n            )\n            return\n        if not len(target.split(""."")) == 3:\n            print(\n                ""Target format should be: \'App2.Dataset2.Theory2\'\\n""\n                ""See \'list_theories_Maxwell\' for a list of availiable theories""\n            )\n            return\n        if source == target:\n            print(""Source and Target theories must be different"")\n            return\n\n        get_dict, set_dict = self.list_theories_Maxwell()\n        dict_keys = list(get_dict.keys())  # get_dict and set_dict have the same keys\n        if (source in dict_keys) and (target in dict_keys):\n            tau, G, success = get_dict[source]()\n            if not success:\n                self.logger.warning(""Could not get modes successfully"")\n                return\n            success = set_dict[target](tau, G)\n            if not success:\n                self.logger.warning(""Could not set modes successfully"")\n                return\n            print(""Copied modes from %s to %s"" % (source, target))\n            return\n        else:\n            print(\n                ""Source or Target not found\\n""\n                ""or theory does not have modes.\\n""\n                ""No copy has been made""\n            )\n            return\n\n    def complete_copy_modes(self, text, line, begidx, endidx):\n        """"""Complete the command copy_modes""""""\n        L, S = self.list_theories_Maxwell()\n        L = list(L.keys())\n        if not text:\n            completions = L[:]\n        else:\n            completions = [f for f in L if f.startswith(text)]\n        return completions\n\n    def list_theories_Maxwell(self, th_exclude=None):\n        """"""List the theories in the current RepTate instance that provide and need\n        Maxwell modes""""""\n        get_dict = {}\n        set_dict = {}\n        for app in self.applications.values():\n            for ds in app.datasets.values():\n                for th in ds.theories.values():\n                    if th.has_modes and th != th_exclude:\n                        get_dict[\n                            ""%s.%s.%s"" % (app.name, ds.name, th.name)\n                        ] = th.get_modes\n                        set_dict[\n                            ""%s.%s.%s"" % (app.name, ds.name, th.name)\n                        ] = th.set_modes\n        return get_dict, set_dict\n\n    def do_list_theories_Maxwell(self, line=""""):\n        """"""List the theories in the current RepTate instance that provide Maxwell modes""""""\n        L, S = self.list_theories_Maxwell()\n        if len(L) > 0:\n            print(""The following open theories provide/require Maxwell Modes:"")\n            for k in L.keys():\n                items = k.split(""."")\n                print(\n                    Fore.RED\n                    + items[0]\n                    + Fore.RESET\n                    + "".""\n                    + Fore.YELLOW\n                    + items[1]\n                    + Fore.RESET\n                    + "".""\n                    + Fore.MAGENTA\n                    + items[2]\n                )\n        else:\n            print(""Currently there are no open theories that provide Maxwell modes."")\n\n    # OTHER STUFF\n\n    def do_tutorial(self, line=""""):\n        """"""Show a short tutorial about the commands in RepTate application manager""""""\n        print("""")\n        print(\n            ""Inspect the python scripts in the""\n            + Fore.RED\n            + \' ""tests"" \'\n            + Fore.RESET\n            + ""folder.""\n        )\n        print(""Visit the page:"")\n        print(\n            Fore.CYAN\n            + ""https://reptate.readthedocs.io/manual/Applications/All_Tutorials/All_Tutorials.html""\n            + Fore.RESET\n        )\n        print(\n            """"""\nBasic use:\n==========""""""\n        )\n        print(Fore.RED + ""available"" + Fore.RESET)\n        self.do_help(""available"")\n        print(Fore.RED + ""new LVE"" + Fore.RESET)\n        self.do_help(""new"")\n        print(Fore.RED + ""list"" + Fore.RESET)\n        self.do_help(""list"")\n        print(Fore.RED + ""switch LVE1"" + Fore.RESET)\n        print(Fore.RED + ""switch LVE1.Set1.LM1"" + Fore.RESET)\n        self.do_help(""switch"")\n        print(Fore.RED + ""tree"" + Fore.RESET)\n        self.do_help(""tree"")\n        print(Fore.RED + ""quit"" + Fore.RESET)\n        self.do_help(""quit"")\n        print("""")\n\n    def do_about(self, line):\n        """"""Show about info.""""""\n        print(ApplicationManager.intro)\n        print("""")\n        print(\n            Fore.GREEN\n            + ""RepTate ""\n            + Fore.RESET\n            + ""(Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiment), ""\n            + ""was originally created in Delphi by Jorge Ram\xc3\xadrez and Alexei Likhtman at the University of Leeds ""\n            + ""and the University of Reading, as part of the muPP2 project, funded by the EPSRC.""\n        )\n        print("""")\n        print(\n            ""This new version is a port (and enhancement) of the original RepTate code to python,""\n            + "" using pyqt and matplotlib for the visuals, and numpy and scipy for the numerical calculations.""\n        )\n        print("""")\n        print(\n            ""It has been developed by Jorge Ram\xc3\xadrez (Universidad Polit\xc3\xa9cnica de Madrid, ""\n            + Fore.CYAN\n            + ""jorge.ramirez@upm.es""\n            + Fore.RESET\n            + "") and Victor Boudara (University of Leeds, ""\n            + Fore.CYAN\n            + ""v.a.boudara@leeds.ac.uk""\n            + Fore.RESET\n            + "").""\n        )\n        print("""")\n        print(""The program and source code are released under the GPLv3 license."")\n        print("""")\n        print(\n            ""This project is dedicated to the memory of our great friend and collaborator Alexei.""\n        )\n        print("""")\n        print(\n            ""Project page: ""\n            + Fore.CYAN\n            + ""https://github.com/jorge-ramirez-upm/RepTate""\n        )\n        print(""Documentation: "" + Fore.CYAN + ""http://reptate.readthedocs.io/"")\n\n    def do_quit(self, args):\n        """"""Exit RepTate.""""""\n        msg = ""Do you really want to exit RepTate?""\n        shall = input(""\\n%s (y/N) "" % msg).lower() == ""y""\n        if shall:\n            print(""Exiting RepTate..."")\n            readline.write_history_file()\n            return True\n\n    do_EOF = do_quit\n    do_up = do_quit\n\n    def check_version(self):\n        url = ""https://api.github.com/repos/jorge-ramirez-upm/RepTate/releases""\n        releasedata = (urlopen(url).read()).decode(""UTF-8"")\n        parsed_json = json.loads(releasedata)\n        release_dict = parsed_json[0]  # Get the latest release\n        tag = release_dict[""tag_name""]\n        version_github = tag.split(""v"")[1]\n        verdata = RepTate._version.get_versions()\n        version_current = verdata[""version""].split(""+"")[0]\n        newversion = version_github > version_current\n        return newversion, version_github, version_current\n\n    def do_check_version(self, line):\n        """"""Check if there is a new version of RepTate on Github.""""""\n        newversion, version_github, version_current = self.check_version()\n        if CmdBase.mode != CmdMode.GUI:\n            print(\n                ""Current Version:   "" + Fore.CYAN + ""%s"" % version_current + Fore.RESET\n            )\n            print(\n                ""Version on Github: "" + Fore.CYAN + ""%s"" % version_github + Fore.RESET\n            )\n            if newversion:\n                print(\n                    ""The version of RepTate on Github (%s) is more recent than the one you are running (%s)""\n                    % (version_github, version_current)\n                )\n            else:\n                print(""Your version is up to date."")\n'"
RepTate/core/CmdBase.py,0,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module CmdBase\n\nModule that defines the basic command line interaction with the user.\n\n""""""\nimport os\nimport sys\nimport cmd\nimport readline\nimport enum\n\n# from pint import UnitRegistry\nfrom colorama import Fore, init\nfrom numpy import *\nimport logging\n\n\nclass CmdMode(enum.Enum):\n    """"""Enumeration that describes the mode in which RepTate is running""""""\n\n    cmdline = 0\n    batch = 1\n    GUI = 2\n    modes = [""Command Line Interpreter"", ""Batch processing"", ""Graphical User Interface""]\n\n    def __str__(self):\n        """"""String representation""""""\n        return (\n            Fore.CYAN\n            + ""cmdline: ""\n            + Fore.RESET\n            + ""%s\\n"" % (self.modes.value[0])\n            + Fore.CYAN\n            + ""batch:   ""\n            + Fore.RESET\n            + ""%s\\n"" % self.modes.value[1]\n            + Fore.CYAN\n            + ""GUI:     ""\n            + Fore.RESET\n            + ""%s"" % self.modes.value[2]\n        )\n\n\nclass CalcMode(enum.Enum):\n    """"""Operation mode: Single or Multithread""""""\n\n    singlethread = 0\n    multithread = 1\n    modes = [\n        ""Calc and Min in the same thread as GUI"",\n        ""Calc and Min in separate threads to GUI"",\n    ]\n\n    def __str__(self):\n        """"""String representation of the class""""""\n        return ""Single thread: %d\\nMulti-thread: %d"" % (\n            self.modes.value[0],\n            self.modes.value[1],\n        )\n\n\nclass CmdBase(cmd.Cmd):\n    """"""Basic Cmd Console that is inherited by most Reptate objects""""""\n\n    prompt = ""> ""\n    mode = CmdMode.cmdline\n    calcmode = CalcMode.multithread\n    # ureg = UnitRegistry()\n\n    def __init__(self, parent=None):\n        """"""**Constructor**""""""\n        super().__init__()\n\n        init()\n\n        delims = readline.get_completer_delims()\n        delims = delims.replace(os.sep, """")\n        readline.set_completer_delims(delims)\n\n        # list of safe methods for eval\n        self.safe_globals = [\n            ""arccos"",\n            ""arcsin"",\n            ""arctan"",\n            ""arctan2"",\n            ""ceil"",\n            ""cos"",\n            ""cosh"",\n            ""degrees"",\n            ""e"",\n            ""exp"",\n            ""fabs"",\n            ""floor"",\n            ""fmod"",\n            ""frexp"",\n            ""hypot"",\n            ""ldexp"",\n            ""log"",\n            ""log10"",\n            ""modf"",\n            ""pi"",\n            ""pow"",\n            ""radians"",\n            ""sin"",\n            ""sinh"",\n            ""sqrt"",\n            ""tan"",\n            ""tanh"",\n        ]\n        self.safe_locals = [""self""]\n\n        # creating a dictionary of safe methods\n        self.safe_dict = {}\n        for k in self.safe_globals:\n            self.safe_dict[k] = globals().get(k, None)\n        for k in self.safe_locals:\n            self.safe_dict[k] = locals().get(k, None)\n        self.safe_dict[""print""] = print\n        self.safe_dict[""list""] = list\n        self.safe_dict[""type""] = type\n\n        self.logger = None\n\n    def do_shell(self, line):\n        """"""Run a shell command. Argument: Command to run. It can also be invoked with the character !""""""\n        print(""running shell command:"", line)\n        output = os.popen(line).read()\n        print(output)\n        self.last_output = output\n\n    def __listdir(self, root):\n        """"""List directory \'root\' appending the path separator to subdirs.""""""\n        res = []\n        for name in os.listdir(root):\n            path = os.path.join(root, name)\n            if os.path.isdir(path):\n                name += os.sep\n                # name += \'/\'\n            res.append(name)\n        return res\n\n    def __complete_path(self, path=None):\n        """"""Perform completion of filesystem path.""""""\n        if not path:\n            return self.__listdir(""."")\n\n        dirname, rest = os.path.split(path)\n        tmp = dirname if dirname else "".""\n        res = [\n            os.path.join(dirname, p) for p in self.__listdir(tmp) if p.startswith(rest)\n        ]\n\n        # more than one match, or single match which does not exist (typo)\n        if len(res) > 1 or not os.path.exists(path):\n            return res\n        # resolved to a single directory, so return list of files below it\n        if os.path.isdir(path):\n            return [os.path.join(path, p) for p in self.__listdir(path)]\n        # exact file match terminates this completion\n        return [path + "" ""]\n\n    def complete_cd(self, text, line, begidx, endidx):\n        """"""Completions for the cd command (used by dereived classes Application and Theory)""""""\n        test = line.split()\n        if len(test) > 1:\n            result = self.__complete_path(test[1])\n        else:\n            result = self.__complete_path()\n\n        return result\n\n    def do_ls(self, line):\n        """"""List contents of current folder.""""""\n        dirs = os.listdir()\n        for d in dirs:\n            print(""%s"" % d)\n\n    do_dir = do_ls\n\n    def do_pwd(self, line):\n        """"""Print the current folder""""""\n        print(os.getcwd())\n\n    do_cwd = do_pwd\n\n    def emptyline(self):\n        """"""Called when an empty line is introduced in the prompt.""""""\n        pass\n\n    def do_EOF(self, args):\n        """"""Exit Console and Return to Parent or exit""""""\n        print("""")\n        return True\n\n    do_up = do_EOF\n\n    def do_quit(self, args):\n        """"""Exit from the application.""""""\n        if CmdBase.mode == CmdMode.batch:\n            print(""Exiting RepTate..."")\n            readline.write_history_file()\n            sys.exit()\n        msg = ""Do you really want to exit RepTate?""\n        shall = input(""%s (y/N) "" % msg).lower() == ""y""\n        if shall:\n            print(""Exiting RepTate..."")\n            readline.write_history_file()\n            sys.exit()\n\n    def default(self, line):\n        """"""Called on an input line when the command prefix is not recognized.\n        In that case we execute the line as Python code.""""""\n        try:\n            eval(\n                line, {""__builtins__"": None}, self.safe_dict\n            )  # in self._locals, self._globals\n        except NameError as e:\n            print(""Command "" + Fore.RED + ""%s"" % line + Fore.RESET + "" not found"")\n        except TypeError as e:\n            print(""Command "" + Fore.RED + ""%s"" % line + Fore.RESET + "" not found"")\n        except Exception as e:\n            print(e.__class__, "":"", e)\n\n    def completedefault(self, text, line, begidx, endidx):\n        items = (\n            line.replace("","", "" "")\n            .replace(""("", "" "")\n            .replace("")"", "" "")\n            .replace(""."", "" "")\n            .split()\n        )\n        lastitem = items[-1]\n        if len(items) > 1:\n            onebeforelastitem = items[-2]\n        else:\n            onebeforelastitem = """"\n        L = list(self.safe_dict.keys())\n        L2 = list(vars(self))\n        if not lastitem:\n            completions = L\n        elif onebeforelastitem == ""self"":\n            completions = [""self."" + f for f in L2 if f.startswith(lastitem)]\n        elif lastitem == ""self"":\n            completions = L2\n        elif lastitem in L and len(items) == 1:\n            completions = L\n        else:\n            completions = [f for f in L if f.startswith(lastitem)]\n        return completions\n\n    def do_log(self, line):\n        """"""Info about the logger""""""\n        if self.logger != None:\n            nhandlers = len(logging.getLogger(""RepTate"").handlers)\n            logfilename = """"\n            if nhandlers > 0:\n                print(Fore.RED + ""%15s %10s"" % (""Log Handler"", ""Level""))\n                print(26 * ""="" + Fore.RESET)\n            print(\n                ""%15s %10s""\n                % (""Main"", logging.getLevelName(logging.getLogger(""RepTate"").level))\n            )\n            for i in range(nhandlers):\n                h = logging.getLogger(""RepTate"").handlers[i]\n                if isinstance(h, logging.handlers.RotatingFileHandler):\n                    print(""%15s %10s"" % (""File"", logging.getLevelName(h.level)))\n                    logfilename = h.baseFilename\n                elif isinstance(h, logging.StreamHandler):\n                    print(""%15s %10s"" % (""Console"", logging.getLevelName(h.level)))\n            print("""")\n            print(Fore.RED + ""Main Logger level:    "" + Fore.RESET + ""RepTate"")\n            print(\n                Fore.RED\n                + ""Current Logger level: ""\n                + Fore.RESET\n                + ""%s"" % self.logger.name\n            )\n            print(Fore.RED + ""Log File: "" + Fore.RESET + ""%s"" % logfilename)\n\n    def do_loglevel(self, line):\n        """"""Set log level""""""\n        if self.logger != None:\n            nhandlers = len(logging.getLogger(""RepTate"").handlers)\n            for i in range(nhandlers):\n                h = logging.getLogger(""RepTate"").handlers[i]\n                if isinstance(h, logging.handlers.RotatingFileHandler):\n                    fhandler = h\n                elif isinstance(h, logging.StreamHandler):\n                    chandler = h\n            items = line.split()\n            h = None\n            l = None\n            handlers = [""Main"", ""File"", ""Console""]\n            levels = [""NOTSET"", ""DEBUG"", ""INFO"", ""WARNING"", ""ERROR"", ""CRITICAL""]\n            if len(items) < 2:\n                print(\n                    ""Wrong number of parameters. Example of use: loglevel Console WARNING""\n                )\n            else:\n                if items[0] == ""Main"":\n                    h = logging.getLogger(""RepTate"")\n                elif items[0] == ""File"":\n                    h = fhandler\n                elif items[0] == ""Console"":\n                    h = chandler\n                else:\n                    print(""Wrong Log Handler. Valid values are:"")\n                    print(handlers)\n                if items[1] not in levels:\n                    print(""Wrong Log level. Valid values are:"")\n                    print(levels)\n                else:\n                    l = items[1]\n\n                if h is not None and l is not None:\n                    h.setLevel(l)\n\n    def complete_loglevel(self, text, line, begidx, endidx):\n        handlers = [""Main"", ""File"", ""Console""]\n        levels = [""NOTSET"", ""DEBUG"", ""INFO"", ""WARNING"", ""ERROR"", ""CRITICAL""]\n        items = line.split()\n        nitems = len(items)\n        if nitems < 2:\n            completions = [f for f in handlers if f.startswith(text)]\n        elif nitems == 2 and items[1] not in handlers:\n            completions = [f for f in handlers if f.startswith(text)]\n        else:\n            completions = [f for f in levels if f.startswith(text)]\n        return completions\n\n    def do_console(self, line):\n        """"""Print/Set current & available Console modes. Arguments (if empty show current):\n        \n    - console --> print current mode\n    - console available --> print available modes\n    - console [cmdline, batch, GUI] --> Set the console mode to [cmdline, batch, GUI]\n        """"""\n        if line == """":\n            print(""Current console mode: %s"" % CmdMode.modes.value[CmdBase.mode.value])\n        elif line == ""available"":\n            c = CmdMode(0)\n            print(c)\n        elif line in dict(CmdMode.__members__.items()):\n            CmdBase.mode = CmdMode[line]\n        else:\n            print(""Console mode %s not valid"" % line)\n\n        if self.mode == CmdMode.batch:\n            self.prompt = """"\n\n    def complete_console(self, text, line, begidx, endidx):\n        names = [""cmdline"", ""batch"", ""GUI"", ""available""]\n        if not text:\n            completions = names[:]\n        else:\n            completions = [f for f in names if f.startswith(text)]\n        return completions\n\n    def cmdloop(self, intro=""""):\n        """"""Overload the cmd.Cmd cmdloop function to capture Ctrl+C""""""\n        if self.intro != None:\n            print(self.intro)\n        while True:\n            try:\n                super(CmdBase, self).cmdloop(intro="""")\n                break\n            except KeyboardInterrupt:\n                print(""^C"")\n'"
RepTate/core/DataSet.py,9,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module DataSet\n\nModule that describes the basic container for data sets (sets of experimental data\nread from different files), as well as the particular theories that are being applied\nto that data set.\n\n""""""\nimport os\nimport glob\n\nimport enum\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.File import File\nfrom RepTate.core.DataTable import DataTable\n\nimport itertools\nfrom collections import OrderedDict\n\nimport numpy as np\nimport matplotlib.patheffects as pe\nfrom colorama import Fore\nimport logging\n\n\nclass ColorMode(enum.Enum):\n    """"""Class to describe how to change colors in the current DataSet""""""\n\n    fixed = 0\n    variable = 1\n    gradient = 2\n    modes = [""Fixed color"", ""Variable color (from palette)"", ""Color gradient""]\n    color1 = (0, 0, 0, 1)  # black RGB\n    color2 = (1, 0, 0, 1)  # red RGB\n    colorpalettes = {\n        ""Rainbow"": [\n            (0, 0, 0),\n            (1.0, 0, 0),\n            (0, 1.0, 0),\n            (0, 0, 1.0),\n            (1.0, 1.0, 0),\n            (1.0, 0, 1.0),\n            (0, 1.0, 1.0),\n            (0.5, 0, 0),\n            (0, 0.5, 0),\n            (0, 0, 0.5),\n            (0.5, 0.5, 0),\n            (0.5, 0, 0.5),\n            (0, 0.5, 0.5),\n            (0.25, 0, 0),\n            (0, 0.25, 0),\n            (0, 0, 0.25),\n            (0.25, 0.25, 0),\n            (0.25, 0, 0.25),\n            (0, 0.25, 0.25),\n        ],\n        ""Pastel"": [\n            (0.573, 0.776, 1.0),\n            (0.592, 0.941, 0.667),\n            (1.0, 0.624, 0.604),\n            (0.816, 0.733, 1.0),\n            (1.0, 0.996, 0.639),\n            (0.69, 0.878, 0.902),\n            (0.573, 0.776, 1.0),\n            (0.592, 0.941, 0.667),\n            (1.0, 0.624, 0.604),\n            (0.816, 0.733, 1.0),\n            (1.0, 0.996, 0.639),\n            (0.69, 0.878, 0.902),\n            (0.573, 0.776, 1.0),\n            (0.592, 0.941, 0.667),\n            (1.0, 0.624, 0.604),\n        ],\n        ""Bright"": [\n            (0.0, 0.247, 1.0),\n            (0.012, 0.929, 0.227),\n            (0.91, 0.0, 0.043),\n            (0.541, 0.169, 0.886),\n            (1.0, 0.769, 0.0),\n            (0.0, 0.843, 1.0),\n            (0.0, 0.247, 1.0),\n            (0.012, 0.929, 0.227),\n            (0.91, 0.0, 0.043),\n            (0.541, 0.169, 0.886),\n            (1.0, 0.769, 0.0),\n            (0.0, 0.843, 1.0),\n            (0.0, 0.247, 1.0),\n            (0.012, 0.929, 0.227),\n            (0.91, 0.0, 0.043),\n        ],\n        ""Dark"": [\n            (0, 0, 0),\n            (0.0, 0.11, 0.498),\n            (0.004, 0.459, 0.09),\n            (0.549, 0.035, 0.0),\n            (0.463, 0.0, 0.631),\n            (0.722, 0.525, 0.043),\n            (0.0, 0.388, 0.455),\n            (0.0, 0.11, 0.498),\n            (0.004, 0.459, 0.09),\n            (0.549, 0.035, 0.0),\n            (0.463, 0.0, 0.631),\n            (0.722, 0.525, 0.043),\n            (0.0, 0.388, 0.455),\n            (0.0, 0.11, 0.498),\n            (0.004, 0.459, 0.09),\n            (0.549, 0.035, 0.0),\n        ],\n        ""ColorBlind"": [\n            (0, 0, 0),\n            (0.0, 0.447, 0.698),\n            (0.0, 0.62, 0.451),\n            (0.835, 0.369, 0.0),\n            (0.8, 0.475, 0.655),\n            (0.941, 0.894, 0.259),\n            (0.337, 0.706, 0.914),\n            (0.0, 0.447, 0.698),\n            (0.0, 0.62, 0.451),\n            (0.835, 0.369, 0.0),\n            (0.8, 0.475, 0.655),\n            (0.941, 0.894, 0.259),\n            (0.337, 0.706, 0.914),\n            (0.0, 0.447, 0.698),\n            (0.0, 0.62, 0.451),\n            (0.835, 0.369, 0.0),\n        ],\n        ""Paired"": [\n            (0.651, 0.808, 0.890),\n            (0.122, 0.471, 0.706),\n            (0.698, 0.875, 0.541),\n            (0.200, 0.627, 0.173),\n            (0.984, 0.604, 0.600),\n            (0.890, 0.102, 0.11),\n            (0.992, 0.749, 0.435),\n            (1.0, 0.498, 0.0),\n            (0.792, 0.698, 0.839),\n            (0.416, 0.239, 0.604),\n            (1.0, 1.0, 0.6),\n            (0.694, 0.349, 0.157),\n            (0.651, 0.808, 0.890),\n            (0.122, 0.471, 0.706),\n            (0.698, 0.875, 0.541),\n            (0.200, 0.627, 0.173),\n        ],\n    }\n\n\nclass SymbolMode(enum.Enum):\n    """"""Class to describe how to change the symbols in the DataSet""""""\n\n    fixed = 0\n    fixedfilled = 1\n    variable = 2\n    variablefilled = 3\n    modes = [\n        ""Fixed empty symbol"",\n        ""Fixed filled symbol"",\n        ""Variable empty symbols"",\n        ""Variable filled symbols"",\n    ]\n    # symbol1 = "".""\n    # symbol1_name = ""point""\n    symbol1 = ""o""\n    symbol1_name = ""circle""\n    allmarkers = [\n        # ""."",\n        ""o"",\n        ""v"",\n        ""^"",\n        ""<"",\n        "">"",\n        ""1"",\n        ""2"",\n        ""3"",\n        ""4"",\n        ""8"",\n        ""s"",\n        ""p"",\n        ""P"",\n        ""*"",\n        ""h"",\n        ""H"",\n        ""+"",\n        ""x"",\n        ""X"",\n        ""D"",\n        ""d"",\n        ""|"",\n        ""_"",\n    ]\n    allmarkernames = [\n        # ""point"",\n        ""circle"",\n        ""triangle_down"",\n        ""triangle_up"",\n        ""triangle_left"",\n        ""triangle_right"",\n        ""tri_down"",\n        ""tri_up"",\n        ""tri_left"",\n        ""tri_right"",\n        ""octagon"",\n        ""square"",\n        ""pentagon"",\n        ""plus (filled)"",\n        ""star"",\n        ""hexagon1"",\n        ""hexagon2"",\n        ""plus"",\n        ""x"",\n        ""x (filled)"",\n        ""diamond"",\n        ""thin_diamond"",\n        ""vline"",\n        ""hline"",\n    ]\n    filledmarkers = [\n        # ""."",\n        ""o"",\n        ""v"",\n        ""^"",\n        ""<"",\n        "">"",\n        ""8"",\n        ""s"",\n        ""p"",\n        ""P"",\n        ""*"",\n        ""h"",\n        ""H"",\n        ""X"",\n        ""D"",\n        ""d"",\n    ]\n    filledmarkernames = [\n        # ""point"",\n        ""circle"",\n        ""triangle_down"",\n        ""triangle_up"",\n        ""triangle_left"",\n        ""triangle_right"",\n        ""octagon"",\n        ""square"",\n        ""pentagon"",\n        ""plus (filled)"",\n        ""star"",\n        ""hexagon1"",\n        ""hexagon2"",\n        ""x (filled)"",\n        ""diamond"",\n        ""thin_diamond"",\n    ]\n\n\nclass ThLineMode(enum.Enum):\n    """"""Class to describe how to change the line types in Theories""""""\n\n    as_data = 0\n    fixed = 1\n    color = (0, 0, 0, 1)  # black RGB\n    linestyles = OrderedDict(\n        [\n            (""solid"", (0, ())),\n            (""loosely dotted"", (0, (1, 10))),\n            (""dotted"", (0, (1, 5))),\n            (""densely dotted"", (0, (1, 1))),\n            (""loosely dashed"", (0, (5, 10))),\n            (""dashed"", (0, (5, 5))),\n            (""densely dashed"", (0, (5, 1))),\n            (""loosely dashdotted"", (0, (3, 10, 1, 10))),\n            (""dashdotted"", (0, (3, 5, 1, 5))),\n            (""densely dashdotted"", (0, (3, 1, 1, 1))),\n            (""loosely dashdotdotted"", (0, (3, 10, 1, 10, 1, 10))),\n            (""dashdotdotted"", (0, (3, 5, 1, 5, 1, 5))),\n            (""densely dashdotdotted"", (0, (3, 1, 1, 1, 1, 1))),\n        ]\n    )\n\n\nclass DataSet(CmdBase):  # cmd.Cmd not using super() is OK for CL mode.\n    """"""Abstract class to describe a data set""""""\n\n    doc_header = ""DataSet commands (type help <topic>):""\n\n    def __init__(self, name=""DataSet"", parent=None):\n        """"""**Constructor**""""""\n        super().__init__()\n\n        self.name = name\n        self.parent_application = parent\n        self.nplots = self.parent_application.nplots\n        self.files = []\n        self.current_file = None\n        self.num_files = 0\n        # Marker settings\n        self.marker_size = 6\n        self.line_width = 1\n        self.colormode = ColorMode.variable.value\n        self.color1 = ColorMode.color1.value\n        self.color2 = ColorMode.color2.value\n        self.th_line_mode = ThLineMode.as_data.value\n        self.th_color = ThLineMode.color.value\n        self.palette_name = ""ColorBlind""\n        self.symbolmode = SymbolMode.fixed.value\n        self.symbol1 = SymbolMode.symbol1.value\n        self.symbol1_name = SymbolMode.symbol1_name.value\n        self.th_linestyle = ""solid""\n        self.th_line_width = 1.5\n        #\n        self.theories = {}\n        self.num_theories = 0\n        self.inactive_files = {}\n        self.current_theory = None\n        self.table_icon_list = []  # save the file\'s marker shape, fill and color there\n        self.selected_file = None\n\n        # LOGGING STUFF\n        self.logger = logging.getLogger(\n            self.parent_application.logger.name + ""."" + self.name\n        )\n        self.logger.debug(""New DataSet"")\n        np.seterrcall(self.write)\n\n    def write(self, type, flag):\n        """"""Write numpy error logs to the logger""""""\n        self.logger.info(""numpy: %s (flag %s)"" % (type, flag))\n\n    # DATASET STUFF ##########################################################################################################\n\n    def do_list(self, line=""""):\n        """"""List files and theories in the current DataSet""""""\n        self.do_list_files()\n        self.do_list_theories()\n\n    def do_tree(self, line):\n        """"""List all the tools, datasets, files and theories in the current application""""""\n        done = False\n        if line == """":\n            offset = 0\n            prefix = """"\n            done = True\n        else:\n            try:\n                offset = int(line)\n                if offset == 1:\n                    prefix = ""|--""\n                    done = True\n                elif offset == 2:\n                    prefix = ""|  |--""\n                    done = True\n                else:\n                    print(""Wrong argument for the tree command."")\n            except ValueError:\n                print(""Wrong argument for the tree command."")\n        if done:\n            for t in self.theories.values():\n                print(prefix + Fore.MAGENTA + ""%s"" % t.name + Fore.RESET)\n            for f in self.files:\n                print(prefix + ""%s"" % f.file_name_short)\n\n    def get_tree(self):\n        return list(self.theories.keys())\n\n    def change_file_visibility(self, file_name_short, check_state=True):\n        """"""Hide/Show file in the figure""""""\n        file_matching = []\n        for file in self.files:\n            if file.file_name_short == file_name_short:  # find changed file\n                file_matching.append(file)\n        if len(file_matching) == 0:\n            raise ValueError(\'Could not match file ""%s""\' % file_name_short)\n            return\n        if len(file_matching) > 1:\n            raise ValueError(\'Too many match for file ""%s""\' % file_name_short)\n            return\n\n        file_matching[0].active = check_state\n\n        # hide datatable\n        dt = file_matching[0].data_table\n        for i in range(dt.MAX_NUM_SERIES):\n            for nx in range(self.nplots):  # loop over the plots\n                dt.series[nx][i].set_visible(check_state)\n        # hide theory table\n        for th in self.theories.values():\n            th.set_th_table_visible(file_matching[0].file_name_short, check_state)\n\n        # save the check_state to recover it upon change of tab or \'view all\' events\n        if check_state == False:\n            self.inactive_files[file_matching[0].file_name_short] = file_matching[0]\n        else:\n            try:\n                del self.inactive_files[file_matching[0].file_name_short]\n            except KeyError:\n                pass\n        self.do_plot()\n\n    def do_show_all(self, line):\n        """"""Show all files in the current DataSet""""""\n        for file in self.files:\n            if file.file_name_short not in self.inactive_files:\n                file.active = True\n                dt = file.data_table\n                for i in range(dt.MAX_NUM_SERIES):\n                    for nx in range(self.nplots):  # loop over the plots\n                        dt.series[nx][i].set_visible(True)\n        if self.current_theory:\n            self.theories[self.current_theory].do_show()\n        self.do_plot("""")\n\n    def do_hide_all(self, line):\n        """"""Hide all files in the current DataSet""""""\n        for file in self.files:\n            file.active = False\n            dt = file.data_table\n            for i in range(dt.MAX_NUM_SERIES):\n                for nx in range(self.nplots):  # loop over the plots\n                    dt.series[nx][i].set_visible(False)\n        for th in self.theories.values():\n            th.do_hide()\n        self.do_plot("""")\n\n    def do_file_hide(self, line):\n        """"""Hide a specific file""""""\n        done = False\n        for index, f in enumerate(self.files):\n            if f.file_name_short == line:\n                if not f.active:\n                    print(""File %s is already hidden"" % line)\n                    return\n                f.active = False\n                dt = f.data_table\n                for i in range(dt.MAX_NUM_SERIES):\n                    for nx in range(self.nplots):\n                        dt.series[nx][i].set_visible(False)\n                done = True\n                self.do_plot()\n        if not done:\n            print(\'File ""%s"" not found\' % line)\n\n    def complete_file_hide(self, text, line, begidx, endidx):\n        """"""Complete with the names of files that are currently visible""""""\n        f_names = [fl.file_name_short for fl in self.files if fl.active]\n        if not text:\n            completions = f_names[:]\n        else:\n            completions = [f for f in f_names if f.startswith(text)]\n        return completions\n\n    def do_file_show(self, line):\n        """"""Show a specific file""""""\n        done = False\n        for index, f in enumerate(self.files):\n            if f.file_name_short == line:\n                if f.active:\n                    print(""File %s is already visible"" % line)\n                    return\n                f.active = True\n                dt = f.data_table\n                for i in range(dt.MAX_NUM_SERIES):\n                    for nx in range(self.nplots):\n                        dt.series[nx][i].set_visible(True)\n                done = True\n                self.do_plot()\n        if not done:\n            print(\'File ""%s"" not found\' % line)\n\n    def complete_file_show(self, text, line, begidx, endidx):\n        """"""Complete with the names of the files in the DataSet that are currently hidden""""""\n        f_names = [fl.file_name_short for fl in self.files if not fl.active]\n        if not text:\n            completions = f_names[:]\n        else:\n            completions = [f for f in f_names if f.startswith(text)]\n        return completions\n\n    def do_plot(self, line=""""):\n        """"""Plot the current dataset using the current view of the parent application""""""\n        # view = self.parent_application.current_view\n\n        self.table_icon_list.clear()\n        filled = False\n        if self.symbolmode == SymbolMode.fixed.value:  # single symbol, empty?\n            markers = [self.symbol1]\n            marker_names = [self.symbol1_name]\n        elif self.symbolmode == SymbolMode.fixedfilled.value:  # single symbol, filled?\n            markers = [self.symbol1]\n            marker_names = [self.symbol1_name]\n            filled = True\n        elif self.symbolmode == SymbolMode.variable.value:  # variable symbols, empty\n            markers = SymbolMode.allmarkers.value\n            marker_names = SymbolMode.allmarkernames.value\n        else:  #\n            markers = SymbolMode.filledmarkers.value  # variable symbols, filled\n            marker_names = SymbolMode.filledmarkernames.value\n            filled = True\n\n        if self.colormode == ColorMode.fixed.value:  # single color?\n            colors = [self.color1]\n        elif self.colormode == ColorMode.variable.value:  # variable colors from palette\n            colors = ColorMode.colorpalettes.value[self.palette_name]\n        else:\n            n = len(self.files) - len(self.inactive_files)  # number of files to plot\n            if n < 2:\n                colors = [self.color1]  # only one color needed\n            else:  # interpolate the color1 and color2\n                r1, g1, b1, a1 = self.color1\n                r2, g2, b2, a2 = self.color2\n                dr = (r2 - r1) / (n - 1)\n                dg = (g2 - g1) / (n - 1)\n                db = (b2 - b1) / (n - 1)\n                da = (a2 - a1) / (n - 1)\n                colors = []\n                for i in range(n):  # create a color palette\n                    colors.append((r1 + i * dr, g1 + i * dg, b1 + i * db, a1 + i * da))\n\n        linelst = itertools.cycle(("":"", ""-"", ""-."", ""--""))\n        palette = itertools.cycle((colors))\n        markerlst = itertools.cycle((markers))\n        marker_name_lst = itertools.cycle((marker_names))\n        size = self.marker_size  # if file.size is None else file.size\n        width = self.line_width\n        # theory settings\n        th_linestyle = ThLineMode.linestyles.value[self.th_linestyle]\n\n        for to in self.parent_application.tools:\n            to.clean_graphic_stuff()\n            if to.active:\n                to.Qprint(""<hr><h2>Calculating...</h2>"")\n\n        for j, file in enumerate(self.files):\n            dt = file.data_table\n\n            marker = next(markerlst)  # if file.marker is None else file.marker\n            marker_name = next(\n                marker_name_lst\n            )  # if file.marker is None else file.marker\n            color = next(palette)  # if file.color is None else file.color\n            face = color if filled else ""none""\n            if self.th_line_mode == ThLineMode.as_data.value:\n                th_color = color\n            else:\n                th_color = self.th_color\n            if CmdBase.mode == CmdMode.GUI:\n                if file.active:\n                    # save file name with associated marker shape, fill and color\n                    self.table_icon_list.append(\n                        (file.file_name_short, marker_name, face, color)\n                    )\n\n            for nx in range(self.nplots):\n                view = self.parent_application.multiviews[nx]\n                try:\n                    x, y, success = view.view_proc(dt, file.file_parameters)\n                except TypeError as e:\n                    print(""in do_plot()"", e)\n                    return\n\n                ## Apply current shifts to data\n                # for i in range(view.n):\n                #    if file.isshifted[i]:\n                #        if view.log_x:\n                #            x[:,i]*=np.power(10, file.xshift[i])\n                #        else:\n                #            x[:,i]+=file.xshift[i]\n                #        if view.log_y:\n                #            y[:,i]*=np.power(10, file.yshift[i])\n                #        else:\n                #            y[:,i]+=file.yshift[i]\n\n                # Apply the currently active tools\n                for to in self.parent_application.tools:\n                    if file.active and to.active:\n                        to.Qprint(""<h3>"" + file.file_name_short + ""</h3>"")\n                        x, y = to.calculate_all(\n                            view.n,\n                            x,\n                            y,\n                            self.parent_application.axarr[nx],\n                            color,\n                            file.file_parameters,\n                        )\n\n                # Apply current shifts to data\n                for i in range(view.n):\n                    if file.isshifted[i]:\n                        if view.log_x:\n                            x[:, i] *= np.power(10, file.xshift[i])\n                        else:\n                            x[:, i] += file.xshift[i]\n                        if view.log_y:\n                            y[:, i] *= np.power(10, file.yshift[i])\n                        else:\n                            y[:, i] += file.yshift[i]\n\n                fillstylesempty = itertools.cycle(\n                    (""none"", ""full"", ""left"", ""right"", ""bottom"", ""top"")\n                )\n                fillstylesfilled = itertools.cycle(\n                    (""full"", ""none"", ""right"", ""left"", ""top"", ""bottom"")\n                )\n                for i in range(dt.MAX_NUM_SERIES):\n                    if i < view.n and file.active:\n                        dt.series[nx][i].set_data(x[:, i], y[:, i])\n                        dt.series[nx][i].set_visible(True)\n                        dt.series[nx][i].set_marker(marker)\n\n                        if filled:\n                            fs = next(fillstylesfilled)\n                        else:\n                            fs = next(fillstylesempty)\n                        if fs == ""none"":\n                            face = ""none""\n                        else:\n                            face = color\n                        dt.series[nx][i].set_fillstyle(fs)\n\n                        # if i == 0:\n                        #     face = color if filled else \'none\'\n                        # elif i == 1: # filled and empty symbols\n                        #     if face == \'none\':\n                        #         face = color\n                        #     elif face == color:\n                        #         face = \'none\'\n                        # else:\n                        #     face = color\n                        #     fillstyles=[""left"", ""right"", ""bottom"", ""top"", ""full"", ""left"", ""right"", ""bottom"", ""top"", ""full"", ""left"", ""right"", ""bottom"", ""top""]\n                        #     fs = fillstyles[i-2]\n                        #     dt.series[nx][i].set_fillstyle(fs)\n                        dt.series[nx][i].set_markerfacecolor(face)\n                        dt.series[nx][i].set_markeredgecolor(color)\n                        dt.series[nx][i].set_markeredgewidth(width)\n                        dt.series[nx][i].set_markersize(size)\n                        dt.series[nx][i].set_linestyle("""")\n                        if file.active and i == 0:\n                            label = """"\n                            for pmt in file.file_type.basic_file_parameters:\n                                try:\n                                    label += (\n                                        pmt + ""="" + str(file.file_parameters[pmt]) + "" ""\n                                    )\n                                except KeyError as e:  # if parameter missing from data file\n                                    self.logger.warning(\n                                        ""Parameter %s not found in data file"" % e\n                                    )\n                                    # if CmdBase.mode != CmdMode.GUI:\n                                    #     print(\n                                    #         ""Parameter %s not found in data file""\n                                    #         % (e))\n                            # dt.series[nx][i].set_label(file.file_name_short)\n                            dt.series[nx][i].set_label(label)\n                        else:\n                            dt.series[nx][i].set_label("""")\n                    else:\n                        dt.series[nx][i].set_visible(False)\n                        dt.series[nx][i].set_label("""")\n\n                for th in self.theories.values():\n                    if th.active:\n                        th.plot_theory_stuff()\n                    tt = th.tables[file.file_name_short]\n                    try:\n                        x, y, success = view.view_proc(tt, file.file_parameters)\n                    except Exception as e:\n                        print(""in do_plot th"", e)\n                        continue\n\n                    # Apply the currently active tools\n                    for to in self.parent_application.tools:\n                        if file.active and to.active and to.applytotheory:\n                            to.Qprint(""* <i>"" + th.name + ""</i>"")\n                            x, y = to.calculate_all(\n                                view.n,\n                                x,\n                                y,\n                                self.parent_application.axarr[nx],\n                                color,\n                                file.file_parameters,\n                            )\n\n                    for i in range(tt.MAX_NUM_SERIES):\n                        if i < view.n and file.active and th.active:\n                            tt.series[nx][i].set_data(x[:, i], y[:, i])\n                            tt.series[nx][i].set_visible(True)\n                            if view.with_thline or i > 0:\n                                tt.series[nx][i].set_marker("""")\n                                if i == 1:  # 2nd theory line with different style\n                                    if self.th_linestyle == ""solid"":\n                                        th_linestyle = ThLineMode.linestyles.value[\n                                            ""dashed""\n                                        ]\n                                    else:\n                                        th_linestyle = ThLineMode.linestyles.value[\n                                            ""solid""\n                                        ]\n                                elif i == 2:  # 3rd theory line with different style\n                                    if self.th_linestyle == ""solid"":\n                                        th_linestyle = ThLineMode.linestyles.value[\n                                            ""dashdotted""\n                                        ]\n                                    else:\n                                        th_linestyle = ThLineMode.linestyles.value[\n                                            ""dotted""\n                                        ]\n                                else:\n                                    th_linestyle = ThLineMode.linestyles.value[\n                                        self.th_linestyle\n                                    ]\n                                tt.series[nx][i].set_linestyle(th_linestyle)\n                            else:\n                                tt.series[nx][i].set_linestyle("""")\n                                tt.series[nx][i].set_marker(""."")\n                                if view.filled:\n                                    tt.series[nx][i].set_markerfacecolor(th_color)\n                                else:\n                                    tt.series[nx][i].set_markerfacecolor(""none"")\n                                tt.series[nx][i].set_markersize(size)\n\n                            tt.series[nx][i].set_linewidth(self.th_line_width)\n                            tt.series[nx][i].set_color(th_color)\n                            tt.series[nx][i].set_label("""")\n                            tt.series[nx][i].set_path_effects([pe.Normal()])\n                        else:\n                            tt.series[nx][i].set_visible(False)\n                            tt.series[nx][i].set_label("""")\n        self.parent_application.update_datacursor_artists()\n        self.parent_application.update_plot()\n\n    def do_sort(self, line):\n        """"""Sort files in dataset according to the value of a file parameter\n\nExamples:\n    sort Mw,reverse\n    sort T\n\nArguments:\n    - Par {[str]} -- File parameter according to which the files will be sorted\n    - reverse -- The files will be sorted in reverse order""""""\n        items = line.split("","")\n        if len(items) == 0:\n            print(""Wrong number of arguments"")\n        elif len(items) == 1:\n            fp = items[0]\n            rev = False\n        elif len(items) == 2:\n            fp = items[0]\n            rev = items[1].strip() == ""reverse""\n        else:\n            print(""Wrong number of arguments"")\n\n        if self.current_file:\n            if fp in self.current_file.file_parameters:\n                self.files.sort(key=lambda x: float(x.file_parameters[fp]), reverse=rev)\n                self.do_plot()\n            elif fp == ""File"":\n                self.files.sort(key=lambda x: x.file_name_short, reverse=rev)\n                self.do_plot()\n            else:\n                self.logger.warning(""Parameter %s not found in files"" % line)\n                # print(""Parameter %s not found in files"" % line)\n\n    def complete_sort(self, text, line, begidx, endidx):\n        """"""Complete with the list of file parameters of the current file in the current dataset""""""\n        if self.current_file == None:\n            print(""A file must be selected first"")\n            return\n        fp_names = list(self.current_file.file_parameters.keys())\n        if not text:\n            completions = fp_names[:]\n        else:\n            completions = [f for f in fp_names if f.startswith(text)]\n        return completions\n\n    # FILE STUFF ##########################################################################################################\n\n    def do_file_delete(self, line):\n        """"""Delete file from the data set""""""\n        done = False\n        for index, f in enumerate(self.files):\n            if f.file_name_short == line:\n                if self.current_file == f:\n                    self.current_file = None\n                dt = f.data_table\n                for i in range(dt.MAX_NUM_SERIES):\n                    for nx in range(self.nplots):\n                        self.parent_application.axarr[nx].lines.remove(dt.series[nx][i])\n                self.files.remove(f)\n                done = True\n                self.do_plot()\n        if not done:\n            print(\'File ""%s"" not found\' % line)\n\n    def complete_file_delete(self, text, line, begidx, endidx):\n        f_names = [fl.file_name_short for fl in self.files]\n        if not text:\n            completions = f_names[:]\n        else:\n            completions = [f for f in f_names if f.startswith(text)]\n        return completions\n\n    def do_list_files(self, line=""""):\n        """"""List the files in the current dataset. Active files are shown with an \\*. Hidden files are shown with (-).""""""\n        print(""FILES IN THE CURRENT DATASET"")\n        print(""============================"")\n        for f in self.files:\n            if f == self.current_file:\n                c = ""*""\n            else:\n                c = "" ""\n            if f.active:\n                a = """"\n            else:\n                a = ""(-)""\n\n            print(\n                Fore.RED\n                + ""%s "" % c\n                + Fore.RESET\n                + ""%s "" % f.file_name_short\n                + Fore.CYAN\n                + ""%s"" % a\n                + Fore.RESET\n            )\n\n    def do_list_files_details(self, line):\n        """"""List the files in the dataset with the file parameters""""""\n        for f in self.files:\n            print(f)\n\n    def do_file_new(self, line):\n        """"""Add an empty file of the given type to the current Data Set\n\nArguments:\n    - line {str} -- TYPE (extension of file) [, NAME (name, optional)]""""""\n        if line == """":\n            print(""Missing file type"")\n            return\n        items = line.split("","")\n        if len(items) == 0:\n            print(""Missing file type"")\n            return\n        elif len(items) == 1:\n            ext = items[0]\n            fname = (\n                os.getcwd()\n                + os.path.sep\n                + ""DummyFile%02d"" % (self.num_files + 1)\n                + "".""\n                + ext\n            )\n        elif len(items) == 2:\n            ext = items[0]\n            fname = os.getcwd() + os.path.sep + items[1] + ""."" + ext\n        else:\n            print(""Wrong number of arguments"")\n\n        if ext in self.parent_application.filetypes:\n            self.num_files += 1\n            f = File(\n                fname,\n                self.parent_application.filetypes[ext],\n                self,\n                self.parent_application.axarr,\n            )\n            self.files.append(f)\n            self.current_file = f\n            # leg=self.current_application.ax.legend([], [], loc=\'upper left\', frameon=True, ncol=2, title=\'Hello\')\n            # if leg:\n            #    leg.draggable()\n            # self.current_application.figure.canvas.draw()\n        else:\n            print(\n                \'File type ""%s"" cannot be read by application %s\'\n                % (line, self.parent_application.name)\n            )\n\n    def complete_file_new(self, text, line, begidx, endidx):\n        """"""Complete new file command""""""\n        file_types = list(self.parent_application.filetypes.keys())\n        if not text:\n            completions = file_types[:]\n        else:\n            completions = [f for f in file_types if f.startswith(text)]\n        return completions\n\n    def new_dummy_file(\n        self,\n        fname="""",\n        xrange=[],\n        yval=0,\n        zval=None,\n        z2val=None,\n        fparams={},\n        file_type=None,\n    ):\n        """"""Create File from xrange and file parameters\n        xrange: list of x points\n        yval: float\n        fparam: dict containing file parameter names and values\n        """"""\n        if fname == """":\n            filename = (\n                ""dummy_""\n                + ""_"".join([pname + ""%.3g"" % fparams[pname] for pname in fparams])\n                + "".""\n                + file_type.extension\n            )\n        else:\n            filename = (\n                fname\n                + ""_"".join([pname + ""%.3g"" % fparams[pname] for pname in fparams])\n                + "".""\n                + file_type.extension\n            )\n        f = File(\n            file_name=filename,\n            file_type=file_type,\n            parent_dataset=self,\n            axarr=self.parent_application.axarr,\n        )\n        f.file_parameters = fparams\n        dt = f.data_table\n        dt.num_columns = len(file_type.col_names)\n        dt.num_rows = len(xrange)\n        dt.data = np.zeros((dt.num_rows, dt.num_columns))\n        dt.data[:, 0] = xrange\n        if isinstance(yval, list):\n            for i in range(1, dt.num_columns):\n                dt.data[:, i] = yval[:]\n        else:\n            for i in range(1, dt.num_columns):\n                dt.data[:, i] = yval\n        if dt.num_columns > 2:\n            if zval is None:\n                dt.data[:, 2] = np.nan\n            else:\n                dt.data[:, 2] = zval[:]\n        if dt.num_columns > 3:\n            if z2val is None:\n                dt.data[:, 3] = np.nan\n            else:\n                dt.data[:, 3] = z2val[:]\n        unique = True\n        for file in self.files:\n            if (\n                f.file_name_short == file.file_name_short\n            ):  # check if file already exists in current ds\n                unique = False\n        if unique:\n            self.files.append(f)\n            self.current_file = f\n            for th_name in self.theories:\n                # add a theory table\n                self.theories[th_name].tables[f.file_name_short] = DataTable(\n                    self.parent_application.axarr, ""TH_"" + f.file_name_short\n                )\n                self.theories[th_name].function(f)\n            if CmdBase.mode == CmdMode.GUI:\n                return f, True\n        else:\n            return None, False\n\n    def do_open(self, line):\n        """"""Open file(s). Arguments: FILENAME(s) (pattern expansion characters -- \\*, ? -- allowed""""""\n        if CmdBase.mode != CmdMode.GUI:\n            f_names = glob.glob(line)\n            if not f_names:\n                f_names = (\n                    line.split()\n                )  # allow to provide multiple file names separated by a space\n        else:\n            f_names = line\n        newtables = []\n        if line == """" or len(f_names) == 0:\n            message = ""No valid file names provided""\n            if CmdBase.mode != CmdMode.GUI:\n                print(message)\n                return\n            return (message, None, None)\n        f_ext = [os.path.splitext(x)[1].split(""."")[-1] for x in f_names]\n        if f_ext.count(f_ext[0]) != len(f_ext):\n            message = ""File extensions of files must be equal!""\n            if CmdBase.mode != CmdMode.GUI:\n                print(message)\n                print(f_names)\n                return\n            return (message, None, None)\n        if f_ext[0] in self.parent_application.filetypes:\n            ft = self.parent_application.filetypes[f_ext[0]]\n            for f in f_names:\n                if not os.path.isfile(f):\n                    print(\'File ""%s"" does not exists\' % f)\n                    continue  # next file name\n                df = ft.read_file(f, self, self.parent_application.axarr)\n                unique = True\n                for file in self.files:\n                    if (\n                        df.file_name_short == file.file_name_short\n                    ):  # check if file already exists in current ds\n                        unique = False\n                if unique:\n                    self.files.append(df)\n                    self.current_file = df\n                    newtables.append(df)\n                    for th_name in self.theories:\n                        # add a theory table\n                        self.theories[th_name].tables[df.file_name_short] = DataTable(\n                            self.parent_application.axarr, ""TH_"" + df.file_name_short\n                        )\n            if CmdBase.mode == CmdMode.GUI:\n                return (True, newtables, f_ext[0])\n            else:\n                self.do_plot()\n        else:\n            message = \'File type ""%s"" does not exists\' % f_ext[0]\n            if CmdBase.mode != CmdMode.GUI:\n                print(message)\n                return\n            return (message, None, None)\n\n    def do_reload_data(self, line=""""):\n        """"""Reload data files in the current DataSet""""""\n        for file in self.files:\n            if not file.active:\n                continue\n            path = file.file_full_path\n            ft = file.file_type\n            if not os.path.isfile(path):\n                self.logger.warning(\n                    ""Could not open file %s: %s"" % (file.file_name_short, path)\n                )\n                continue\n            df = ft.read_file(path, self, None)\n            file.header_lines = df.header_lines[:]\n            file.file_parameters.clear()\n            file.file_parameters.update(df.file_parameters)\n            file.data_table.data = np.array(df.data_table.data)\n            file.data_table.num_columns = df.data_table.num_columns\n            file.data_table.num_rows = df.data_table.num_rows\n        self.do_plot("""")\n\n    def __listdir(self, root):\n        """"""List directory \'root\' appending the path separator to subdirs.""""""\n        res = []\n        for name in os.listdir(root):\n            path = os.path.join(root, name)\n            if os.path.isdir(path):\n                name += os.sep\n                # name += \'/\'\n            res.append(name)\n        return res\n\n    def __complete_path(self, path=None):\n        """"""Perform completion of filesystem path""""""\n        if not path:\n            return self.__listdir(""."")\n\n        dirname, rest = os.path.split(path)\n        tmp = dirname if dirname else "".""\n        res = [\n            os.path.join(dirname, p) for p in self.__listdir(tmp) if p.startswith(rest)\n        ]\n\n        # more than one match, or single match which does not exist (typo)\n        if len(res) > 1 or not os.path.exists(path):\n            return res\n        # resolved to a single directory, so return list of files below it\n        if os.path.isdir(path):\n            return [os.path.join(path, p) for p in self.__listdir(path)]\n        # exact file match terminates this completion\n        return [path + "" ""]\n\n    def complete_open(self, text, line, begidx, endidx):\n        """"""Complete the file_open command""""""\n        test = line.split()\n        if len(test) > 1:\n            result = self.__complete_path(test[1])\n        else:\n            result = self.__complete_path()\n\n        return result\n\n        # f_names=[]\n        # for f in list(self.parent_application.filetypes.keys()):\n        #    pattern=\'%s**.%s\'%(text,f)\n        #    #f_names += glob.glob(\'data/**/*.%s\'%f, recursive=True)\n        #    f_names += glob.glob(pattern, recursive=True)\n        # if not text:\n        #    completions = f_names[:]\n        # else:\n        #    completions = [ f\n        #                    for f in f_names\n        #                    if f.startswith(text)\n        #                    ]\n        # return completions\n\n    def do_file_active(self, line):\n        """"""Change active file in the current dataset""""""\n        done = False\n        for f in self.files:\n            if f.file_name_short == line:\n                self.current_file = f\n                done = True\n        if not done:\n            print(\'File ""%s"" not found\' % line)\n\n    complete_file_active = complete_file_delete\n\n    def do_file(self, line):\n        """"""Show the contents of a given file on the screen (if the file name is not specified, it shows the current file)""""""\n        done = False\n        if line == """":\n            line = self.current_file.file_name_short\n        for index, file in enumerate(self.files):\n            if file.file_name_short == line:\n                done = True\n                print(Fore.YELLOW + ""File: "" + Fore.RESET + file.file_name_short)\n                print(Fore.CYAN + ""Path: "" + Fore.RESET + file.file_full_path)\n                print(Fore.RED + ""Parameters: "" + Fore.RESET)\n                print(file.file_parameters)\n                print(Fore.GREEN + ""Header Lines: "" + Fore.RESET)\n                print(file.header_lines)\n                dfile = list(self.parent_application.filetypes.values())[0]\n                inspect_header = [\n                    a + "" ["" + b + ""]"" for a, b in zip(dfile.col_names, dfile.col_units)\n                ]\n                print(Fore.BLUE + ""Column Header: "" + Fore.RESET)\n                print(inspect_header)\n                print(Fore.MAGENTA + ""Data: "" + Fore.RESET)\n                print(file.data_table.data)\n        if not done:\n            print(\'File ""%s"" not found\' % line)\n\n    complete_file = complete_file_delete\n\n    # THEORY STUFF ##########################################################################################################\n\n    def do_available(self, line):\n        """"""List available filetypes and theories in parent application""""""\n        self.parent_application.do_available_filetypes()\n        self.parent_application.do_available_theories()\n\n    def do_available_filetypes(self, line):\n        """"""List available filetypes in parent application""""""\n        self.parent_application.do_available_filetypes()\n\n    def do_available_theories(self, line):\n        """"""List available theories in parent application""""""\n        self.parent_application.do_available_theories()\n\n    def do_delete(self, name):\n        """"""Delete a theory from the current dataset""""""\n        if name in self.theories.keys():\n            self.theories[name].destructor()\n            for tt in self.theories[\n                name\n            ].tables.values():  # remove matplotlib artist from ax\n                for i in range(tt.MAX_NUM_SERIES):\n                    for nx in range(self.nplots):\n                        self.parent_application.axarr[nx].lines.remove(tt.series[nx][i])\n            del self.theories[name]\n            self.do_plot("""")\n        else:\n            print(\'Theory ""%s"" not found\' % name)\n\n    def complete_delete(self, text, line, begidx, endidx):\n        """"""Complete delete theory command""""""\n        th_names = list(self.theories.keys())\n        if not text:\n            completions = th_names[:]\n        else:\n            completions = [f for f in th_names if f.startswith(text)]\n        return completions\n\n    def do_list_theories(self, line=""""):\n        """"""List open theories in current dataset""""""\n        if len(self.theories) > 0:\n            print(""OPEN THEORIES IN THE CURRENT DATASET"")\n            print(""===================================="")\n        for t in self.theories.values():\n            print(\n                Fore.MAGENTA\n                + ""%s:"" % t.name\n                + Fore.RESET\n                + (15 - len(t.name)) * "" ""\n                + ""%s"" % t.thname\n            )\n\n    def new(self, line):\n        """"""Create a new theory""""""\n        """"""Add a new theory of the type specified to the current Data Set""""""\n        thtypes = list(self.parent_application.theories.keys())\n        if line in thtypes:\n            if self.current_file is None:\n                print(""Current dataset is empty\\n"" ""%s was not created"" % line)\n                return\n            self.num_theories += 1\n            th_id = """".join(\n                c for c in line if c.isupper()\n            )  # get the upper case letters of th_name\n            th_id = ""%s%d"" % (th_id, self.num_theories)  # append number\n            th = self.parent_application.theories[line](\n                th_id, self, self.parent_application.axarr\n            )\n            self.theories[th.name] = th\n            self.current_theory = th.name\n            if self.mode == CmdMode.GUI:\n                if th.autocalculate:\n                    th.do_calculate("""")\n                else:\n                    th.Qprint(\'<font color=green><b>Press ""Calculate""</b></font>\')\n                return th, th_id\n            else:\n                if self.mode == CmdMode.batch:\n                    th.prompt = """"\n                else:\n                    th.prompt = self.prompt[:-2] + ""/"" + Fore.MAGENTA + th_id + ""> ""\n                if th.autocalculate:\n                    th.do_calculate("""")\n                return th, th_id\n        else:\n            print(\'Theory ""%s"" does not exists\' % line)\n            return None, None\n\n    def do_new(self, line, calculate=True):\n        """"""Add a new theory of the type specified to the current Data Set""""""\n        thtypes = list(self.parent_application.theories.keys())\n        if line in thtypes:\n            if self.current_file is None:\n                print(""Current dataset is empty\\n"" ""%s was not created"" % line)\n                return\n            self.num_theories += 1\n            # th_id = ""%s%02d""%(line,self.num_theories)\n            # th_id = \'\'.join(c for c in line if c.isupper()) #get the upper case letters of th_name\n            # th_id = ""%s%02d"" % (line, self.num_theories)\n            th_id = """".join(\n                c for c in line if c.isupper()\n            )  # get the upper case letters of th_name\n            th_id = ""%s%d"" % (th_id, self.num_theories)  # append number\n            th = self.parent_application.theories[line](\n                th_id, self, self.parent_application.axarr\n            )\n            self.theories[th.name] = th\n            self.current_theory = th.name\n            if self.mode == CmdMode.GUI:\n                if calculate and th.autocalculate:\n                    th.do_calculate("""")\n                else:\n                    th.Qprint(\'<font color=green><b>Press ""Calculate""</b></font>\')\n                return th\n            else:\n                if self.mode == CmdMode.batch:\n                    th.prompt = """"\n                else:\n                    th.prompt = self.prompt[:-2] + ""/"" + Fore.MAGENTA + th_id + ""> ""\n                if calculate:\n                    th.do_calculate("""")\n                th.cmdloop()\n        else:\n            print(\'Theory ""%s"" does not exists\' % line)\n\n    def complete_new(self, text, line, begidx, endidx):\n        """"""Complete new theory command""""""\n        theory_names = list(self.parent_application.theories.keys())\n        if not text:\n            completions = theory_names[:]\n        else:\n            completions = [f for f in theory_names if f.startswith(text)]\n        return completions\n\n    def do_switch(self, line):\n        """"""Change the active theory""""""\n        if line in self.theories.keys():\n            th = self.theories[line]\n            self.current_theory = line\n            th.cmdloop()\n        else:\n            print(\'Theory ""%s"" not found\' % line)\n\n    complete_switch = complete_delete\n\n    def do_legend(self, line):\n        """"""Show/hide the legend""""""\n        self.parent_application.do_legend(line)\n\n    def mincol(self, col):\n        """"""Minimum value in table column line of all Files in DataSet""""""\n        min = 1e100\n        for f in self.files:\n            minfile = f.mincol(col)\n            if minfile < min:\n                min = minfile\n        return min\n\n    def minpositivecol(self, col):\n        """"""Minimum positive value in table column line of all Files in DataSet""""""\n        min = 1e100\n        for f in self.files:\n            minfile = f.minpositivecol(col)\n            if minfile < min:\n                min = minfile\n        return min\n\n    def maxcol(self, col):\n        """"""Maximum value in table column line of all Files in DataSet""""""\n        max = -1e100\n        for f in self.files:\n            maxfile = f.maxcol(col)\n            if maxfile > max:\n                max = maxfile\n        return max\n\n    def do_tutorial(self, line=""""):\n        """"""Show a short tutorial about the commands in RepTate Datasets""""""\n        print("""")\n        print(\n            ""Inspect the python scripts in the""\n            + Fore.RED\n            + \' ""tests"" \'\n            + Fore.RESET\n            + ""folder.""\n        )\n        print(""Visit the page:"")\n        print(\n            Fore.CYAN\n            + ""https://reptate.readthedocs.io/manual/Applications/All_Tutorials/All_Tutorials.html""\n            + Fore.RESET\n        )\n        print(\n            """"""\nBasic use:\n==========""""""\n        )\n        print(Fore.RED + ""available"" + Fore.RESET)\n        self.do_help(""available"")\n        print(Fore.RED + ""open"" + Fore.RESET)\n        self.do_help(""open"")\n        print(Fore.RED + ""file*"" + Fore.RESET)\n        print(""Several operations (show, delete, hide...) for files"")\n        print(Fore.RED + ""list"" + Fore.RESET)\n        self.do_help(""list"")\n        print(Fore.RED + ""tree"" + Fore.RESET)\n        self.do_help(""tree"")\n        print(Fore.RED + ""switch"" + Fore.RESET)\n        self.do_help(""switch"")\n        print(Fore.RED + ""reload_data"" + Fore.RESET)\n        self.do_help(""reload_data"")\n        print("""")\n'"
RepTate/core/DataTable.py,3,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module DataTable\n\nModule for the actual object that contains the data, both for experiments and theory. \n\n"""""" \nimport numpy as np\n\nclass DataTable(object):\n    """"""Class that stores data and series""""""\n    MAX_NUM_SERIES=3\n    PICKRADIUS = 10\n\n    def __init__(self, axarr=None, _name=\'\'):\n        """"""**Constructor**""""""\n        self.num_columns=0\n        self.num_rows=0\n        self.column_names=[]\n        self.column_units=[]\n        self.data=np.zeros((self.num_rows, self.num_columns))\n        self.series=[]\n        self.extra_tables = {}\n        \n        if axarr != None:\n            for nx in range(len(axarr)): #create series for each plot\n                series_nx = []\n                for i in range(DataTable.MAX_NUM_SERIES): \n                    ss = axarr[nx].plot([], [], label=\'\', picker=self.PICKRADIUS)\n                    if i == 0:\n                        ss[0]._name = _name #define artist name\n                    else:    \n                        ss[0]._name = _name + "" #%d""%(i + 1) #define artist name\n                    series_nx.append(ss[0])\n                self.series.append(series_nx)\n\n    def __str__(self):\n        """"""Returns a string describing the data\n\n        .. todo:: Refine this. It doesn\'t work\n\n        """"""\n        return self.data\n        \n    def mincol(self, col):\n        """"""Minimum value in table column col\n        \n        .. todo:: Example **todo** in the code\n        """"""\n        return np.min(self.data[:,col])\n        \n    def minpositivecol(self, col):\n        """"""Minimum positive value in table column col""""""\n        return (self.data[self.data[:,col]>0,col]).min()\n\n    def maxcol(self, col):\n        """"""Maximum value in table column col""""""\n        return np.max(self.data[:,col])\n        '"
RepTate/core/DraggableArtists.py,20,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module DraggableArtists\n\nModule for the definition of interactive graphical objects that the user can move.\n\n"""""" \n# draggable matplotlib artists with the animation blit techniques; see\nimport numpy as np\nimport enum\n\nclass DragType(enum.Enum):\n    """"""Describes the type of drag that the graphical object can be subjected to""""""\n    vertical = 1\n    horizontal = 2\n    both = 3\n    none = 4\n    special = 5\n\nclass DraggableArtist(object):\n    """"""Abstract class for motions of a matplotlib artist""""""\n    lock = None\n    def __init__(self, artist=None, mode=DragType.none, function=None, parent_theory=None):\n        """"""**Constructor**""""""\n        self.parent_theory = parent_theory\n        self.artist = artist\n        self.press = None\n        self.background = None\n        self.mode=mode\n        self.function=function\n        self.data = None\n        self.connect()\n\n    def connect(self):\n        """"""Connect events""""""\n        self.cidpress = self.artist.figure.canvas.mpl_connect(\'button_press_event\', self.on_press)\n        self.cidrelease = self.artist.figure.canvas.mpl_connect(\'button_release_event\', self.on_release)\n        self.cidmotion = self.artist.figure.canvas.mpl_connect(\'motion_notify_event\', self.on_motion)\n\n    def on_press(self, event):\n        """"""Press events""""""\n        if event.inaxes != self.artist.axes: return\n        if DraggableArtist.lock is not None: return\n        if event.button != 1: return\n        contains, attrd = self.artist.contains(event)\n        if not contains: return\n        self.get_data()\n        self.press = event.xdata, event.ydata\n        DraggableArtist.lock = self\n        canvas = self.artist.figure.canvas\n        axes = self.artist.axes\n        self.artist.set_animated(True)\n        canvas.draw()\n        self.background = canvas.copy_from_bbox(self.artist.axes.bbox)\n        axes.draw_artist(self.artist)\n        canvas.update()\n        #canvas.blit(axes.bbox)\n\n    def on_motion(self, event):\n        """"""Motion event""""""\n        if DraggableArtist.lock is not self:\n            return\n        if event.inaxes != self.artist.axes: return\n        xpress, ypress = self.press\n        dx = event.xdata - xpress\n        dy = event.ydata - ypress\n        if (self.mode==DragType.none):   \n            self.modify_artist(0, 0)\n        elif (self.mode==DragType.horizontal):\n            self.modify_artist(dx, 0)\n        elif (self.mode==DragType.vertical):\n            self.modify_artist(0, dy)\n        elif (self.mode==DragType.both):\n            self.modify_artist(dx, dy)\n\n        canvas = self.artist.figure.canvas\n        axes = self.artist.axes\n        canvas.restore_region(self.background)\n        axes.draw_artist(self.artist)\n        # canvas.blit(axes.bbox)\n        canvas.update()\n\n\n    def modify_artist(self, dx, dy):\n        """"""Do nothing""""""\n        pass\n\n    def get_data(self):\n        """"""Do nothing""""""\n        pass\n\n    def on_release(self, event):\n        """"""Release event""""""\n        if DraggableArtist.lock is not self: return\n        xpress, ypress = self.press\n        if event.xdata is None: return\n        if event.ydata is None: return\n        dx = event.xdata - xpress\n        dy = event.ydata - ypress\n        if (self.mode==DragType.none):   \n            self.function(0, 0)\n        elif (self.mode==DragType.horizontal):\n            self.function(dx, 0)\n        elif (self.mode==DragType.vertical):\n            self.function(0, dy)\n        elif (self.mode==DragType.both):\n            self.function(dx, dy)\n        self.press = None\n        DraggableArtist.lock = None\n        self.artist.set_animated(False)\n        self.background = None\n        self.artist.figure.canvas.draw()\n        try:\n            self.parent_theory.handle_actionMinimize_Error()\n        except AttributeError:\n            self.parent_theory.do_fit("""")\n\n\n    def disconnect(self):\n        """"""disconnect all the stored connection ids""""""\n        self.artist.figure.canvas.mpl_disconnect(self.cidpress)\n        self.artist.figure.canvas.mpl_disconnect(self.cidrelease)\n        self.artist.figure.canvas.mpl_disconnect(self.cidmotion)\n\n###############################################################\n###############################################################\n\n\nclass DraggableBinSeries(DraggableArtist):\n    """"""Dragabble histogram""""""\n    def __init__(self, artist, mode=DragType.none, logx=False, logy=False, function=None):\n        """"""**Constructor**""""""\n        super().__init__(artist, mode, function)\n        self.logx = logx\n        self.logy = logy\n    \n    def on_press(self, event):\n        """"""Press event""""""\n        if event.inaxes != self.artist.axes: return\n        if DraggableArtist.lock is not None: return \n        if event.button != 1: return\n        contains, attrd = self.artist.contains(event)\n        if not contains: return\n        self.xdata, self.ydata = self.artist.get_data()\n        nmodes=len(self.xdata)\n        try:\n            auxshape = self.xdata.shape[1]\n        except IndexError:\n            auxshape = 0\n        if auxshape>1:\n            self.xdata = self.xdata[:,0]\n            self.ydata = self.ydata[:,0]\n        self.xdata_at_press = self.xdata\n        self.ydata_at_press = self.ydata\n        self.press = event.xdata, event.ydata\n        # Index of mode clicked\n        self.index = np.argmin((self.xdata-self.press[0])**2+(self.ydata-self.press[1])**2)\n        DraggableArtist.lock = self\n        # draw everything but the selected curve and store in \'background\'\n        canvas = self.artist.figure.canvas\n        axes = self.artist.axes\n        self.artist.set_animated(True)\n        canvas.draw()\n        \n        self.background = canvas.copy_from_bbox(self.artist.axes.bbox)\n        # redraw just the curve\n        axes.draw_artist(self.artist)\n\n    def on_motion(self, event):\n        """"""Motion event""""""\n        if DraggableArtist.lock is not self:\n            return\n        if event.inaxes != self.artist.axes:\n            return\n        self.xpress, self.ypress = self.press\n        if self.logx:\n            dx = np.log10(event.xdata) - np.log10(self.xpress)\n        else:\n            dx = event.xdata - self.xpress\n        if self.logy:\n            dy = np.log10(event.ydata) - np.log10(self.ypress)\n        else:\n            dy = event.ydata - self.ypress\n\n        self.modify_artist(dx, dy)        \n        \n        canvas = self.artist.figure.canvas\n        axes = self.artist.axes\n        # restore the background\n        canvas.restore_region(self.background)\n        # draw the curve only\n        axes.draw_artist(self.artist)\n        canvas.update()\n\n    def modify_artist(self, dx, dy):\n        """"""Change artist coords""""""\n        xdata = self.xdata_at_press\n        ydata = self.ydata_at_press\n        xdataind = xdata[self.index] \n        ydataind = ydata[self.index] \n        nmodes = len(self.xdata)\n        if self.logx:\n            newx = self.xpress*np.power(10, dx)\n        else:\n            newx = self.xpress + dx\n        if self.logy:\n            newy = self.ypress*np.power(10, dy)\n        else:\n            newy = self.ypress + dy\n            \n        newxdata=xdata\n        newydata=ydata\n        # if self.index==0:\n        #     newxdata[0] = newx\n        #     newydata[0] = newy\n        #     newxdata = np.linspace(newx, newxdata[nmodes-1], nmodes)\n        #     newxdata=newxdata.reshape(nmodes,1)\n        # elif self.index==nmodes-1:\n        #     newxdata[self.index] = newx\n        #     newydata[self.index] = newy\n        #     newxdata = np.linspace(newxdata[0], newx, nmodes)\n        #     newxdata=newxdata.reshape(nmodes,1)\n        # else:\n        newxdata[self.index] = newx\n        # newydata[self.index] = newy\n            \n\n        self.artist.set_data(newxdata, newydata)\n\n    def on_release(self, event):\n        """"""Release event""""""\n        if DraggableArtist.lock is not self: return\n        xpress, ypress = self.press\n        if event.xdata is None: return\n        if event.ydata is None: return\n\n        #dx = event.xdata - xpress\n        #dy = event.ydata - ypress\n        #if (self.mode==DragType.none):   \n        #    self.function(0, 0)\n        #elif (self.mode==DragType.horizontal):\n        #    self.function(dx, 0)\n        #elif (self.mode==DragType.vertical):\n        #    self.function(0, dy)\n        #elif (self.mode==DragType.both):\n        #    self.function(dx, dy)\n        self.press = None\n        DraggableArtist.lock = None\n        self.artist.set_animated(False)\n        # restore the background\n        canvas = self.artist.figure.canvas\n        axes = self.artist.axes\n        canvas.restore_region(self.background)\n        # draw the curve only\n        axes.draw_artist(self.artist)\n        #update\n        # canvas.update()\n        # canvas.blit(axes.bbox)\n        self.background = None\n        # self.artist.figure.canvas.draw()\n        self.data = self.artist.get_data()\n        xdata = self.data[0]\n        ydata = self.data[1]\n        self.function(xdata, ydata)\n\n################################################################        \n################################################################        \n\n\nclass DraggableModesSeries(DraggableArtist):\n    """"""Draggable points of a series""""""\n    def __init__(self, artist, mode=DragType.none, parent_application=None, function=None):\n        """"""**Constructor**""""""\n        super(DraggableModesSeries, self).__init__(artist, mode, function)\n        self.parent_application = parent_application\n        self.update_logx_logy()\n    \n    def update_logx_logy(self):\n        self.logx = self.parent_application.current_view.log_x\n        self.logy = self.parent_application.current_view.log_y\n\n    def on_press(self, event):\n        """"""Press event""""""\n        if event.inaxes != self.artist.axes: return\n        if DraggableArtist.lock is not None: return\n        if event.button != 1: return\n        contains, attrd = self.artist.contains(event)\n        if not contains: return\n        self.xdata, self.ydata = self.artist.get_data()\n        nmodes=len(self.xdata)\n        auxshape = self.xdata.shape[1]\n        if auxshape>1:\n            self.xdata = self.xdata[:,0]\n            self.ydata = self.ydata[:,0]\n        self.xdata_at_press = self.xdata\n        self.ydata_at_press = self.ydata\n        self.press = event.xdata, event.ydata\n        # Index of mode clicked\n        self.index = np.argmin((self.xdata-self.press[0])**2+(self.ydata-self.press[1])**2)\n        DraggableArtist.lock = self\n        # draw everything but the selected curve and store in \'background\'\n        canvas = self.artist.figure.canvas\n        axes = self.artist.axes\n        self.artist.set_animated(True)\n        canvas.draw()\n        \n        self.background = canvas.copy_from_bbox(self.artist.axes.bbox)\n        # redraw just the curve\n        axes.draw_artist(self.artist)\n        #canvas.blit(axes.bbox)\n\n    def on_motion(self, event):\n        """"""Motion event""""""\n        if DraggableArtist.lock is not self:\n            return\n        if event.inaxes != self.artist.axes: return\n        self.xpress, self.ypress = self.press\n        self.update_logx_logy()\n        if self.logx:\n            dx = np.log10(event.xdata) - np.log10(self.xpress)\n        else:\n            dx = event.xdata - self.xpress\n        if self.logy:\n            dy = np.log10(event.ydata) - np.log10(self.ypress)\n        else:\n            dy = event.ydata - self.ypress\n\n        self.modify_artist(dx, dy)        \n        \n        canvas = self.artist.figure.canvas\n        axes = self.artist.axes\n        # restore the background\n        canvas.restore_region(self.background)\n        # draw the curve only\n        axes.draw_artist(self.artist)\n        canvas.update()\n\n    def modify_artist(self, dx, dy):\n        """"""Modify artist coords""""""\n        xdata = self.xdata_at_press\n        ydata = self.ydata_at_press\n        xdataind = xdata[self.index] \n        ydataind = ydata[self.index] \n        nmodes = len(self.xdata)\n        self.update_logx_logy()\n        if self.logx:\n            newx = self.xpress*np.power(10, dx)\n        else:\n            newx = self.xpress + dx\n        if self.logy:\n            newy = self.ypress*np.power(10, dy)\n        else:\n            newy = self.ypress + dy\n            \n        newxdata=xdata\n        newydata=ydata\n        if self.index==0:\n            if self.logx:\n                newxdata = np.power(10, np.linspace(np.log10(newx), np.log10(newxdata[nmodes-1]), nmodes))\n            else:\n                newxdata = np.linspace(newx, newxdata[nmodes-1], nmodes)\n            newxdata = newxdata.reshape(nmodes,1)\n        elif self.index==nmodes-1:\n            if self.logy:\n                newxdata = np.power(10, np.linspace(np.log10(newxdata[0]), np.log10(newx), nmodes))\n            else:    \n                newxdata = np.linspace(newxdata[0], newx, nmodes)\n            newxdata=newxdata.reshape(nmodes,1)\n        \n        newydata[self.index] = newy\n\n        self.artist.set_data(newxdata, newydata)\n\n    def on_release(self, event):\n        """"""Release event""""""\n        if DraggableArtist.lock is not self: return\n        xpress, ypress = self.press\n        if event.xdata is None: return\n        if event.ydata is None: return\n\n        #dx = event.xdata - xpress\n        #dy = event.ydata - ypress\n        #if (self.mode==DragType.none):   \n        #    self.function(0, 0)\n        #elif (self.mode==DragType.horizontal):\n        #    self.function(dx, 0)\n        #elif (self.mode==DragType.vertical):\n        #    self.function(0, dy)\n        #elif (self.mode==DragType.both):\n        #    self.function(dx, dy)\n        self.press = None\n        DraggableArtist.lock = None\n        self.artist.set_animated(False)\n        # restore the background\n        canvas = self.artist.figure.canvas\n        axes = self.artist.axes\n        canvas.restore_region(self.background)\n        # draw the curve only\n        axes.draw_artist(self.artist)\n        #update\n        # canvas.update()\n        # canvas.blit(axes.bbox)\n        self.background = None\n        # self.artist.figure.canvas.draw()\n        tmp_data = self.artist.get_data()\n        xdata = tmp_data[0]\n        ydata = tmp_data[1]\n        # for compatibility with mpldatacursor\n        # prevent the modes from disappearing \n        try:\n            float(xdata[0])\n            self.data = tmp_data\n        except TypeError:\n            # don\'t change the modes\n            xdata = self.data[0]\n            ydata = self.data[1]\n        self.function(xdata, ydata)\n\n\n###########################################################\n###########################################################\n\nclass DraggableSeries(DraggableArtist):\n    """"""Full draggable series""""""\n    def __init__(self, artist, mode=DragType.none, logx=False, logy=False, xref=0, yref=0, function=None, functionendshift=None, index=0):\n        """"""**Constructor**""""""\n        super(DraggableSeries, self).__init__(artist, mode, function)\n        self.logx = logx\n        self.logy = logy\n        self.xref = xref\n        self.yref = yref\n        self.functionendshift = functionendshift\n        self.index = index\n\n        self.dx = 0\n        self.dy = 0\n\n    def get_data(self):\n        """"""Return data""""""\n        self.data = self.artist.get_data()\n    \n    def on_press(self, event):\n        """"""Press event""""""\n        if event.inaxes != self.artist.axes: return\n        if DraggableArtist.lock is not None: return\n        if event.button != 1: return\n        contains, attrd = self.artist.contains(event)\n        if not contains: return\n        self.press = event.xdata, event.ydata\n        self.get_data()\n        DraggableArtist.lock = self\n        # draw everything but the selected curve and store in \'background\'\n        canvas = self.artist.figure.canvas\n        axes = self.artist.axes\n        self.artist.set_animated(True)\n        canvas.draw()\n        self.background = canvas.copy_from_bbox(self.artist.axes.bbox)\n        # redraw just the curve\n        axes.draw_artist(self.artist)\n        #canvas.blit(axes.bbox)\n\n    def on_motion(self, event):\n        """"""Motion event""""""\n        if DraggableArtist.lock is not self:\n            return\n        if event.inaxes != self.artist.axes: return\n        xpress, ypress = self.press\n        if self.logx:\n            self.dx = np.log10(event.xdata) - np.log10(xpress)\n        else:\n            self.dx = event.xdata - xpress\n        if self.logy:\n            self.dy = np.log10(event.ydata) - np.log10(ypress)\n        else:\n            self.dy = event.ydata - ypress\n\n        if (self.mode==DragType.none):   \n            self.modify_artist(0, 0)\n            self.function(0, 0, self.index)\n        elif (self.mode==DragType.horizontal):\n            self.modify_artist(self.dx, 0)\n            self.function(self.dx, 0, self.index)\n        elif (self.mode==DragType.vertical):\n            self.modify_artist(0, self.dy)\n            self.function(0, self.dy, self.index)\n        elif (self.mode==DragType.both):\n            self.modify_artist(self.dx, self.dy)\n            self.function(self.dx, self.dy, self.index)\n        \n        canvas = self.artist.figure.canvas\n        axes = self.artist.axes\n        # restore the background\n        canvas.restore_region(self.background)\n        # draw the curve only\n        axes.draw_artist(self.artist)\n        canvas.update()\n\n    def modify_artist(self, dx, dy):\n        """"""Modify artist coords""""""\n        if self.logx:\n            newx = [x*np.power(10, dx) for x in self.data[0]]\n        else:\n            newx = [x + dx for x in self.data[0]]\n        if self.logy:\n            newy = [y*np.power(10, dy) for y in self.data[1]]\n        else:\n            newy = [y + dy for y in self.data[1]]\n        self.artist.set_data(newx, newy)\n\n    def on_release(self, event):\n        """"""Release event""""""\n        if DraggableArtist.lock is not self: return\n        if (self.mode==DragType.none):   \n            self.functionendshift(0, 0, self.index)\n        elif (self.mode==DragType.horizontal):\n            self.functionendshift(self.dx, 0, self.index)\n        elif (self.mode==DragType.vertical):\n            self.functionendshift(0, self.dy, self.index)\n        elif (self.mode==DragType.both):\n            self.functionendshift(self.dx, self.dy, self.index)\n        self.press = None\n        DraggableArtist.lock = None\n        self.artist.set_animated(False)\n        # restore the background\n        canvas = self.artist.figure.canvas\n        axes = self.artist.axes\n        canvas.restore_region(self.background)\n        # draw the curve only\n        axes.draw_artist(self.artist)\n        #update\n        # canvas.update()\n        # canvas.blit(axes.bbox)\n        self.background = None\n        # self.artist.figure.canvas.draw()\n\n    def disconnect(self):\n        """"""disconnect all the stored connection ids""""""\n        super().disconnect()\n\nclass DraggablePatch(DraggableArtist):\n    """"""Draggable Patch""""""\n    def __init__(self, artist, mode=DragType.none, function=None):\n        """"""**Constructor**""""""\n        super(DraggablePatch, self).__init__(artist, mode, function)\n\n    def get_data(self):\n        """"""Get data of the artist""""""\n        self.data=self.artist.center\n\n    def modify_artist(self, dx, dy):\n        """"""Modify artist coords""""""\n        self.artist.center = (self.data[0]+dx, self.data[1]+dy)\n\nclass DraggableRectangle(DraggableArtist):\n    """"""Draggable rectangle""""""\n    def __init__(self, artist, mode=DragType.none, function=None):\n        """"""**Constructor**""""""\n        super(DraggableRectangle, self).__init__(artist, mode, function)\n\n    def get_data(self):\n        """"""Get data of the artist""""""\n        self.data=self.artist.xy\n\n    def modify_artist(self, dx, dy):\n        """"""Modify the artist coords""""""\n        self.artist.set_x(self.data[0]+dx)\n        self.artist.set_y(self.data[1]+dy)\n\nclass DraggableVLine(DraggableArtist):\n    """"""Draggable Verticla line""""""\n    def __init__(self, artist, mode=DragType.none, function=None, parent_theory=None):\n        """"""**Constructor**""""""\n        super(DraggableVLine, self).__init__(artist, mode, function, parent_theory)\n    \n    def on_press(self, event):\n        """"""Press event""""""\n        if event.inaxes != self.artist.axes: return\n        if DraggableArtist.lock is not None: return\n        if event.button != 1: return\n        contains, attrd = self.artist.contains(event)\n        if not contains: return\n        self.get_data()\n        self.press = self.data[0][0], 0 # do not use event.xdata, precision matters in non-logscale\n        DraggableArtist.lock = self\n        canvas = self.artist.figure.canvas\n        axes = self.artist.axes\n        self.artist.set_animated(True)\n        canvas.draw()\n        self.background = canvas.copy_from_bbox(self.artist.axes.bbox)\n        axes.draw_artist(self.artist)\n        canvas.update()\n        #canvas.blit(axes.bbox)\n\n    def get_data(self):\n        """"""Get the data from the artist""""""\n        self.data = self.artist.get_data()\n\n    def modify_artist(self, dx, dy):\n        """"""Modify the artist coordinates""""""\n        self.artist.set_data([self.data[0][0] + dx, self.data[0][1] + dx], [0, 1])\n\n\nclass DraggableHLine(DraggableArtist):\n    """"""Draggable Horizontal line""""""\n    def __init__(self, artist, mode=DragType.none, function=None, parent_theory=None):\n        """"""**Constructor**""""""\n        super(DraggableHLine, self).__init__(artist, mode, function, parent_theory)\n    \n    def on_press(self, event):\n        """"""Press event""""""\n        if event.inaxes != self.artist.axes: return\n        if DraggableArtist.lock is not None: return\n        if event.button != 1: return\n        contains, attrd = self.artist.contains(event)\n        if not contains: return\n        self.get_data()\n        self.press = 0, self.data[1][0] # do not use event.ydata, precision matters in non-logscale\n        DraggableArtist.lock = self\n        canvas = self.artist.figure.canvas\n        axes = self.artist.axes\n        self.artist.set_animated(True)\n        canvas.draw()\n        self.background = canvas.copy_from_bbox(self.artist.axes.bbox)\n        axes.draw_artist(self.artist)\n        canvas.update()\n        #canvas.blit(axes.bbox)\n   \n    def get_data(self):\n        """"""Get the artist data""""""\n        self.data = self.artist.get_data()\n\n    def modify_artist(self, dx, dy):\n        """"""Modify the artist coordinates""""""\n        self.artist.set_data([0, 1], [self.data[1][0] + dy, self.data[1][1] + dy])\n\nclass DraggableVSpan(DraggableArtist):\n    """"""Draggable Vertical Span""""""\n    def __init__(self, artist, mode=DragType.none, function=None):\n        """"""**Constructor**""""""\n        super(DraggableVSpan, self).__init__(artist, mode, function)\n\n    def get_data(self):\n        """"""Get the artist data""""""\n        self.data=self.artist.get_xy()\n\n    def modify_artist(self, dx, dy):\n        """"""Modify the artist coordinates""""""\n        xmin = self.data[0][0]\n        xmax = self.data[2][0]\n        self.artist.set_xy([[xmin+dx,0],[xmin+dx,1],[xmax+dx,1],[xmax+dx,0],[xmin+dx,0]])\n\nclass DraggableHSpan(DraggableArtist):\n    """"""Draggable Horizontal Span""""""\n    def __init__(self, artist, mode=DragType.none, function=None):\n        """"""**Constructor**""""""\n        super(DraggableHSpan, self).__init__(artist, mode, function)\n\n    def get_data(self):\n        """"""Get the artist data""""""\n        self.data=self.artist.get_xy()\n\n    def modify_artist(self, dx, dy):\n        """"""Modify the artist data""""""\n        ymin = self.data[0][1]\n        ymax = self.data[1][1]\n        self.artist.set_xy([[0, ymin+dy], [0, ymax+dy], [1, ymax+dy], [1 ,ymin+dy], [0, ymin+dy]])\n\nclass DraggableNote(DraggableArtist):\n    """"""Draggable annotation box""""""\n    def __init__(self, artist, mode=DragType.none, function=None, function2=None):\n        """"""**Constructor**""""""\n        super(DraggableNote, self).__init__(artist, mode, function)\n        self.cidpress = self.artist.figure.canvas.mpl_connect(\'button_press_event\', self.on_press)\n        self.function2=function2\n\n    def get_data(self):\n        """"""Get the artist data""""""\n        self.data=self.artist.get_position()\n\n    def modify_artist(self, dx, dy):\n        """"""Modify the artist position""""""\n        self.artist.set_position([self.press[0]+dx, self.press[1]+dy])\n\n    def on_press(self, event):\n        """"""Press event""""""\n        if not event.dblclick:\n            super(DraggableNote, self).on_press(event)\n            return\n\n        if event.inaxes != self.artist.axes: return\n        if DraggableArtist.lock is not None: return\n        if event.button != 1: return\n        contains, attrd = self.artist.contains(event)\n        if not contains: return\n        self.function2(self.artist)\n                    \n    def on_release(self, event):\n        """"""Release event""""""\n        if DraggableArtist.lock is not self: return\n        xpress, ypress = self.press\n        if event.xdata is None: return\n        if event.ydata is None: return\n        dx = event.xdata - xpress\n        dy = event.ydata - ypress\n        self.press = None\n        DraggableArtist.lock = None\n        self.artist.set_animated(False)\n        self.background = None\n        self.artist.figure.canvas.draw()\n'"
RepTate/core/File.py,0,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module File\n\nModule that defines a basic File, with headers, columns and data.\n\n""""""\nimport os\nfrom RepTate.core.DataTable import DataTable\nfrom colorama import Fore\n\nclass File(object):\n    """"""Basic class that describes elements of a DataSet""""""\n\n    def __init__(self, file_name="""", file_type=None, parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        self.file_full_path = os.path.abspath(file_name)\n        tmpname = os.path.basename(self.file_full_path)\n        self.file_name_short = os.path.splitext(tmpname)[0]\n        self.file_type = file_type\n        self.parent_dataset = parent_dataset\n        self.axarr = axarr\n\n        #plot attributes\n        self.marker = None\n        self.color = None\n        self.filled = None\n        self.size = None\n\n        # Shift variables\n        self.isshifted = [False]*DataTable.MAX_NUM_SERIES\n        self.xshift = [0]*DataTable.MAX_NUM_SERIES\n        self.yshift = [0]*DataTable.MAX_NUM_SERIES\n\n        self.header_lines=[]\n        self.file_parameters={}\n        self.active = True\n        self.data_table = DataTable(axarr, self.file_name_short)\n        # extra theory xrange\n        self.with_extra_x = False\n        self.theory_xmin = ""None""\n        self.theory_xmax = ""None""\n        self.theory_logspace = True\n        self.th_num_pts = 10 # number of points\n        self.nextramin = 0\n        self.nextramax = 0\n\n    def __str__(self):\n        """"""Return a string""""""\n        return Fore.YELLOW + \'File: \' + Fore.RESET  + \'%s\\n\'%self.file_name_short + Fore.CYAN  + \'Path: \' + Fore.RESET + \'%s\\n\'%self.file_full_path + Fore.RED + \'Parameters: \' + Fore.RESET + \'%s\'%self.file_parameters\n\n    def mincol(self, col):\n        """"""Minimum value in data_table column col""""""\n        return self.data_table.mincol(col)\n\n    def minpositivecol(self, col):\n        """"""Minimum positive value in data_table column col""""""\n        return self.data_table.minpositivecol(col)\n\n    def maxcol(self, col):\n        """"""Maximum value in data_table column col""""""\n        return self.data_table.maxcol(col)\n'"
RepTate/core/FileType.py,2,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module FileType\n\nModule for the basic definition of file types.\n\n""""""\nimport os\nimport numpy as np\n\n# import logging\nfrom openpyxl import load_workbook\nfrom RepTate.core.File import File\n\n\nclass TXTColumnFile(object):\n    """"""Basic class for text-column based data files\n\n    Columns should be separated by espaces or tabs\n\n    BASIC Structure of FILE::\n\n        LINE    CONTENTS\n        0       Param1=434;Param2=4355;\n        1       # Header line and/or comments [OPTIONAL, ANY NUMBER OF HEADER LINES IS POSSIBLE]\n        2       col1 col2 col3 [NAMES OF COLUMNS, OPTIONAL]\n        3       4343 434.5 535e-434 [DATA, ONLY NUMBERS ALLOWED]\n\n    The following examples can be declared with the line::\n\n        ftype=TXTColumnFile(""LVE files"", ""tts"", ""LVE files"", [\'w\',\'G\\\'\',\'G\\\'\\\'\'], [\'Mw\',\'T\'], [\'rad/s\',\'Pa\',\'Pa\'])\n\n    EXAMPLE 1: columns line, no header lines::\n\n        C1=8.77210163229153;C2=114.03;Rho0=0.928;C3=0.61;T=-35;CTg=14.65;dx12=0;isof=true;Mw=634.5;chem=PI;PDI=1.03;\n        w                           G\'                          G\'\'                        T                            g\n        4.29882628773180E-0008      1.44001856995549E+0002      3.70207627600662E+0003     -3.30000000000000E-0003      0.00000000000000E+0000\n        6.30767835406968E-0008      2.56947504513849E+0002      5.39032089470917E+0003      3.14760000000000E-0004      0.00000000000000E+0000\n        9.25946098215800E-0008      4.87031807130633E+0002      7.86538338583378E+0003     -1.01000000000000E-0002      0.00000000000000E+0000\n\n    EXAMPLE 2: Neither columns line nor header lines::\n\n        C1=8.77210163229153;C2=114.03;Rho0=0.928;C3=0.61;T=-35;CTg=14.65;dx12=0;isof=true;Mw=23.4;chem=PI;PDI=1.03;\n        2.42782390212358E-0003      2.11182193155015E+0001      1.72559181398615E+0003      1.25000000000000E-0003      0.00000000000000E+0000\n        3.56351666244471E-0003      4.30476548641552E+0001      2.53490824331357E+0003      1.48400000000000E-0002      0.00000000000000E+0000\n\n    EXAMPLE 3: 2 Header lines, no column line::\n\n        T=160;chem=PE;\n        # Header 1\n        # Header 2\n        4.23333e-05 1.05E+00 2.96E+01\n        6.7e-05 2.02E+00 3.97E+01\n\n    EXAMPLE 4: 2 Header lines + column line::\n\n        T=160;chem=PE;\n        # Header 1\n        # Header 2\n        w G\' G\'\'\n        4.23333e-05 1.05E+00 2.96E+01\n        6.7e-05 2.02E+00 3.97E+01\n\n    """"""\n\n    def __init__(\n        self,\n        name=""TXTColumn"",\n        extension=""txt"",\n        description=""Generic text file with columns"",\n        col_names=[],\n        basic_file_parameters=[],\n        col_units=[],\n    ):\n        """"""\n        **Constructor**\n\n        Keyword Arguments:\n            - name {str} -- Name of file type\n            - extension {str} -- File extension\n            - description {str} -- Description of file contents\n            - col_names {list of str}: list with names of columns to read\n            - basic_file_parameters {list of str}: list with file parameters that should always be included in the header line\n            - col_units {list of str}: Default units of columns\n        """"""\n        self.name = name\n        self.extension = extension\n        self.description = description\n        self.col_names_line = 0\n        self.first_data_line = 0\n        self.col_names = col_names\n        self.col_index = list(range(len(self.col_names)))\n        self.basic_file_parameters = (\n            basic_file_parameters  # Those that will show by default in the dataset\n        )\n        self.col_units = col_units\n        # self.logger = logging.getLogger(\'ReptateLogger\')\n\n    def is_number(self, s):\n        """"""Checks if the input string contains a number""""""\n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False\n\n    def get_parameters(self, line, file):\n        """"""Get the file parameters""""""\n        line = line.replace("" "", """")  # remove all spaces\n        items = line.split("";"")\n        file.file_parameters = {}\n        for i in range(len(items)):\n            par = items[i].split(""="")\n            if len(par) > 1:\n                if self.is_number(par[1]):\n                    file.file_parameters[par[0]] = float(par[1])\n                else:\n                    file.file_parameters[par[0]] = par[1]\n\n    def find_col_names_and_first_data_lines(self, lines, file):\n        """"""Find column names and first row with data""""""\n        colnameline = 0\n        firstdata = 0\n        for i in range(1, len(lines)):\n            if all(x in lines[i] for x in self.col_names):\n                # Column names line found\n                colnameline = i\n            elif all(self.is_number(x) for x in lines[i].split()):\n                # Data lines have been found\n                firstdata = i\n                break\n            else:\n                # Otherwise, this must be a header line\n                file.header_lines.append(lines[i])\n        return colnameline, firstdata\n\n    def read_file(self, filename, parent_dataset, axarr):\n        """"""Gets all the data from the file""""""\n        if not os.path.isfile(filename):\n            print(\'File ""%s"" does not exists\' % f)\n            return\n        file = File(filename, self, parent_dataset, axarr)\n        f = open(filename, ""r"", encoding=""latin-1"")\n        lines = f.readlines()\n\n        self.get_parameters(lines[0], file)\n        (\n            self.col_names_line,\n            self.first_data_line,\n        ) = self.find_col_names_and_first_data_lines(lines, file)\n\n        self.col_index = []\n        if self.col_names_line > 0:\n            items = lines[self.col_names_line].split()\n            for col in self.col_names:\n                for j in range(len(items)):\n                    if col == items[j]:\n                        self.col_index.append(int(j))\n                        break\n        else:\n            self.col_index = list(range(len(self.col_names)))\n\n        file.data_table.num_columns = len(self.col_index)\n        rawdata = []\n        for i in range(self.first_data_line, len(lines)):\n            items = lines[i].split()\n            if len(items) > 0:\n                for j in self.col_index:\n                    try:\n                        rawdata.append(float(items[j]))\n                    except (IndexError, ValueError):\n                        rawdata.append(float(""nan""))\n        file.data_table.num_rows = int(len(rawdata) / file.data_table.num_columns)\n        file.data_table.data = np.reshape(\n            rawdata, newshape=(file.data_table.num_rows, file.data_table.num_columns)\n        )\n        file.data_table.data = file.data_table.data[\n            file.data_table.data[:, 0].argsort()\n        ]\n\n        return file\n\n\nclass ExcelFile(object):\n    """"""Parse and read contents from Excel file""""""\n\n    def __init__(\n        self,\n        name=""Excel File"",\n        extension=""xlsx"",\n        description=""Generic Excel file"",\n        col_names=[],\n        basic_file_parameters=[],\n        col_units=[],\n    ):\n\n        self.name = name\n        self.extension = extension\n        self.description = description\n        self.col_names = col_names\n        self.col_index = list(range(len(self.col_names)))\n        self.basic_file_parameters = (\n            basic_file_parameters  # Those that will show by default in the dataset\n        )\n        self.col_units = col_units\n        # self.logger = logging.getLogger(\'ReptateLogger\')\n\n    def read_file(self, filename, parent_dataset, axarr):\n        """"""Read Excel File""""""\n        if not os.path.isfile(filename):\n            print(\'File ""%s"" does not exists\' % f)\n            return\n        file = File(filename, self, parent_dataset, axarr)\n        wb = load_workbook(filename)\n        for i, k in enumerate(wb.sheetnames):\n            print(""%d: %s"" % (i, k))\n        opt = int(\n            input(\n                ""Select the Sheet that contains the data (number between 0 and %d) > ""\n                % (len(wb.sheetnames) - 1)\n            )\n        )\n        if opt < 0 or opt >= len(wb.sheetnames):\n            print(""Invalid option!"")\n        ws = wb[wb.sheetnames[opt]]\n        cexcelnames = [""A"", ""B"", ""C"", ""D"", ""E"", ""F""]\n        for i in range(ws.max_column):\n            print(""%10s"" % cexcelnames[i], end="" "")\n        print("""")\n        for i, row in enumerate(ws.rows):\n            for j, cell in enumerate(row):\n                a = cell.value\n                if type(a) is float:\n                    print(""%10.5g"" % a, end="" "")\n                elif type(a) is str:\n                    print(""%10s"" % a, end="" "")\n                elif type(a) is int:\n                    print(""%10d"" % a, end="" "")\n                if j > 10:\n                    break\n            print("""")\n            if i > 4:\n                break\n        file.data_table.num_rows = ws.max_row - 2\n        file.data_table.num_columns = len(self.col_names)\n        file.data_table.data = np.zeros(\n            (file.data_table.num_rows, file.data_table.num_columns)\n        )\n        for j, n in enumerate(self.col_names):\n            opt = """"\n            while opt not in cexcelnames:\n                opt = input(""Column that contains the data for %s > "" % n)\n            for i in range(3, ws.max_row + 1):\n                cell_name = ""{}{}"".format(opt, i)\n                file.data_table.data[i - 3, j] = ws[cell_name].value\n        return file\n'"
RepTate/core/MultiView.py,0,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module Multiview\n\nOrganise the mmultiple Matplotlib views\n\n""""""\nimport sys\nimport enum\nimport math\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\n\n# from UI_Multimatplotlib import Ui_Form\nfrom PyQt5.QtWidgets import QVBoxLayout, QHBoxLayout, QTabWidget, QWidget\nfrom PyQt5.QtCore import QSize, Qt\nimport matplotlib as mpl\n\n# mpl.use(""Qt5Agg"") # comment this as Mac uses ""macosx"" backend and Windows seems unaffected\nimport matplotlib.pyplot as plt\nfrom matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg\nimport matplotlib.gridspec as gridspec\n\n\nclass PlotOrganizationType(enum.Enum):\n    """"""Defines the way tha the plots are organized in the screen For Vertical and Horizontal, the number of columns is discarded\n\n    Vertical:\n        -------\n        -------\n        -------\n        ...\n        -------\n\n    Horizontal:\n        |  |  | ... |\n\n    OptimalRow:\n        The plots are organized in nplots/ncols X ncols giving more importance to the first plot,\n        which will occupy as much space as available from the first row\n\n    OptimalColumn:\n        The plots are organized in nplots/ncols X ncols giving more importance to the first plot,\n        which will occupy as much space as available from the first column\n\n    Specified:\n        The user must provide a GridSpec with the desired organization of plots\n\n    """"""\n\n    Vertical = 0\n    Horizontal = 1\n    OptimalRow = 2\n    OptimalColumn = 3\n    Specified = 4\n\n\nclass MultiView(QWidget):\n    """"""Object that contains several matplotlib charts""""""\n    LEFT = 0.15\n    RIGHT = 0.98\n    BOTTOM = 0.15\n    TOP = 0.98\n    WSPACE = 0.25\n    HSPACE = 0.35\n    SAVE_DPI = 300\n    FIG_DPI = plt.matplotlib.rcParams[\'figure.dpi\']\n\n    def __init__(\n        self, pot=PlotOrganizationType.Vertical, nplots=1, ncols=1, parent=None\n    ):\n        """"""**Constructor**""""""\n        # QDialog.__init__(self)\n        # super().__init__(self)\n        # QWidget.__init__()\n        super().__init__()\n        self.parent_application = parent\n        self.pot = pot\n        self.nplots = nplots\n        self.ncols = ncols\n        self.setupUi()\n        mpl.rcParams[""savefig.dpi""] = self.SAVE_DPI\n\n    def setupUi(self):\n        # Remove seaborn dependency\n        dark_gray = "".15""\n        light_gray = "".8""\n        style_dict = {\n            ""figure.facecolor"": ""white"",\n            ""text.color"": dark_gray,\n            ""axes.labelcolor"": dark_gray,\n            ""axes.facecolor"": ""white"",\n            ""axes.edgecolor"": dark_gray,\n            ""axes.linewidth"": 1.25,\n            ""grid.color"": light_gray,\n            ""legend.frameon"": False,\n            ""legend.numpoints"": 1,\n            ""legend.scatterpoints"": 1,\n            ""xtick.direction"": ""out"",\n            ""ytick.direction"": ""out"",\n            ""xtick.color"": dark_gray,\n            ""ytick.color"": dark_gray,\n            ""xtick.major.size"": 6,\n            ""ytick.major.size"": 6,\n            ""xtick.minor.size"": 3,\n            ""ytick.minor.size"": 3,\n            ""axes.grid"": False,\n            ""axes.axisbelow"": True,\n            ""image.cmap"": ""rocket"",\n            ""font.family"": [""sans-serif""],\n            ""font.sans-serif"": [\n                ""Arial"",\n                ""DejaVu Sans"",\n                ""Liberation Sans"",\n                ""Bitstream Vera Sans"",\n                ""sans-serif"",\n            ],\n            ""grid.linestyle"": ""-"",\n            ""lines.solid_capstyle"": ""round"",\n        }\n        mpl.rcParams.update(style_dict)\n\n        self.setObjectName(""self"")\n        self.horizontalLayout = QHBoxLayout(self)\n        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout.setSpacing(0)\n        self.horizontalLayout.setObjectName(""horizontalLayout"")\n        self.plotselecttabWidget = QTabWidget(self)\n        self.plotselecttabWidget.setMaximumSize(QSize(22, 1000))\n        self.plotselecttabWidget.setTabPosition(QTabWidget.West)\n        self.plotselecttabWidget.setTabShape(QTabWidget.Triangular)\n        self.plotselecttabWidget.setUsesScrollButtons(False)\n        self.plotselecttabWidget.setDocumentMode(False)\n        self.plotselecttabWidget.setTabsClosable(False)\n        self.plotselecttabWidget.setObjectName(""plotselecttabWidget"")\n        self.plotselecttabWidget.setStyleSheet(\n            ""QTabBar::tab { color:black; height: 40px; }""\n        )\n\n        # Create a tab for all plots\n        if self.nplots > 1:\n            self.tab = QWidget()\n            self.tab.setMaximumSize(QSize(0, 0))\n            self.plotselecttabWidget.addTab(self.tab, ""All"")\n        else:\n            self.plotselecttabWidget.setVisible(False)\n        # Create a tab for each plot\n        for i in range(self.nplots):\n            self.tab = QWidget()\n            self.tab.setMaximumSize(QSize(0, 0))\n            self.plotselecttabWidget.addTab(self.tab, ""%d"" % (i + 1))\n        self.horizontalLayout.addWidget(self.plotselecttabWidget)\n        self.plotselecttabWidget.setCurrentIndex(0)\n\n        self.plotcontainer = QVBoxLayout()\n        self.plotcontainer.setObjectName(""plotcontainer"")\n        self.horizontalLayout.addLayout(self.plotcontainer)\n\n        # Create the multiplot figure\n        gs = self.organizeplots(self.pot, self.nplots, self.ncols)\n        self.axarr = []\n        self.figure = plt.figure()\n        for i in range(self.nplots):\n            self.axarr.append(self.figure.add_subplot(gs[i]))\n\n        self.set_bbox()\n\n        self.canvas = FigureCanvasQTAgg(self.figure)\n        self.canvas.setFocusPolicy(Qt.ClickFocus)\n        self.canvas.setFocus()\n        self.plotcontainer.addWidget(self.canvas)\n        self.init_plot(0)\n\n        connection_id = self.plotselecttabWidget.currentChanged.connect(\n            self.handle_plottabChanged\n        )\n        axes = plt.gcf().axes\n        for ax_i in axes:\n            for side in [""top"", ""right""]:\n                ax_i.spines[side].set_visible(False)\n\n            ax_i.xaxis.tick_bottom()\n            ax_i.yaxis.tick_left()\n        self.hidden_tab = []\n\n    def set_bbox(self):\n        self.bbox = []\n        x0min = y0min = 1e9\n        x1max = y1max = -1e9\n        for i in range(self.nplots):\n            bboxnow = self.axarr[i].get_position()\n            self.bbox.append(bboxnow)\n            x0min = min(x0min, bboxnow.x0)\n            y0min = min(y0min, bboxnow.y0)\n            x1max = max(x1max, bboxnow.x1)\n            y1max = max(y1max, bboxnow.y1)\n        self.bboxmax = [x0min, y0min, x1max - x0min, y1max - y0min]\n\n    def reorg_fig(self, nplots):\n        """"""Reorganise the views to show nplots""""""\n        if CmdBase.mode == CmdMode.GUI:\n            self.parent_application.sp_nviews.blockSignals(True)\n            self.parent_application.sp_nviews.setValue(nplots)\n            self.parent_application.sp_nviews.blockSignals(False)\n\n        self.plotselecttabWidget.blockSignals(True)\n        nplot_old = self.nplots\n        self.nplots = nplots\n        gs = self.organizeplots(self.pot, self.nplots, self.ncols)\n\n        # hide tabs if only one figure\n        self.plotselecttabWidget.setVisible(nplots > 1)\n\n        for i in range(nplots):\n            self.axarr[i].set_position(gs[i].get_position(self.figure))\n            self.axarr[i].set_subplotspec(gs[i])\n        for tab in self.hidden_tab:\n            tab_id = tab[0]\n            widget = tab[1]\n            tab_text = tab[2]\n            self.plotselecttabWidget.insertTab(tab_id, widget, tab_text)\n        self.hidden_tab = []\n\n        for i in range(nplots, len(self.axarr)):\n            self.axarr[i].set_visible(False)\n            tab_id = i + 1\n            widget = self.plotselecttabWidget.widget(nplots + 1)\n            tab_text = self.plotselecttabWidget.tabText(nplots + 1)\n            self.hidden_tab.append([tab_id, widget, tab_text])\n            self.plotselecttabWidget.removeTab(nplots + 1)\n\n        self.set_bbox()\n        for i in range(self.nplots):\n            self.axarr[i].set_position(self.bbox[i])\n        # add new axes to plt\n        for i in range(nplot_old, self.nplots):\n            try:\n                plt.subplot(self.axarr[i])\n            except:\n                pass\n        # remove axes from plt\n        for i in range(self.nplots, nplot_old):\n            try:\n                plt.delaxes(self.axarr[i])\n            except:\n                pass\n        for ds in self.parent_application.datasets.values():\n            ds.nplots = nplots\n        self.parent_application.update_all_ds_plots()\n        self.handle_plottabChanged(0)  # switch to all plot tab\n        self.plotselecttabWidget.blockSignals(False)\n\n    def init_plot(self, index):\n        if index == 0:  # multiplots\n            for i in range(self.nplots):\n                self.axarr[i].set_position(self.bbox[i])\n        else:  # single plot max-size\n            tab_to_maxi = index - 1\n            for i in range(self.nplots):\n                if i == tab_to_maxi:  # hide other plots\n                    self.axarr[i].set_visible(True)\n                    self.axarr[i].set_position(self.bboxmax)\n                else:\n                    self.axarr[i].set_visible(False)\n\n        self.parent_application.current_viewtab = index\n        self.canvas.draw()\n\n    def handle_plottabChanged(self, index):\n        self.parent_application.current_viewtab = index\n        if index == 0:  # multiplots\n            view_name = self.parent_application.multiviews[0].name\n            if CmdBase.mode == CmdMode.GUI:\n                ind = self.parent_application.viewComboBox.findText(\n                    view_name, Qt.MatchExactly\n                )\n                self.parent_application.viewComboBox.blockSignals(True)\n                self.parent_application.viewComboBox.setCurrentIndex(\n                    ind\n                )  # set the view combobox according to current view\n                self.parent_application.viewComboBox.blockSignals(False)\n            for i in range(self.nplots):\n                self.axarr[i].set_position(self.bbox[i])\n                self.axarr[i].set_visible(True)\n                try:\n                    plt.subplot(self.axarr[i])\n                except:\n                    pass\n\n        else:  # single plot max-size\n            tab_to_maxi = index - 1  # in 0 1 2\n            view_name = self.parent_application.multiviews[tab_to_maxi].name\n            if CmdBase.mode == CmdMode.GUI:\n                ind = self.parent_application.viewComboBox.findText(view_name)\n                self.parent_application.viewComboBox.blockSignals(True)\n                self.parent_application.viewComboBox.setCurrentIndex(\n                    ind\n                )  # set the view combobox according to current view\n                self.parent_application.viewComboBox.blockSignals(False)\n            for i in range(self.nplots):\n                if i == tab_to_maxi:  # hide other plots\n                    self.axarr[i].set_visible(True)\n                    self.axarr[i].set_position(self.bboxmax)\n                    try:\n                        plt.subplot(self.axarr[i])\n                    except:\n                        pass\n                else:\n                    self.axarr[i].set_visible(False)\n                    try:\n                        plt.delaxes(self.axarr[i])\n                    except:\n                        pass\n        self.parent_application.update_datacursor_artists()\n        self.canvas.draw()\n        self.parent_application.set_view_tools(view_name)\n\n    def organizeHorizontal(self, nplots):\n        gs = gridspec.GridSpec(\n            1,\n            self.nplots,\n            left=self.LEFT,\n            right=self.RIGHT,\n            bottom=self.BOTTOM,\n            top=self.TOP,\n            wspace=self.WSPACE,\n            hspace=self.HSPACE,\n        )\n        return gs\n\n    def organizeVertical(self, nplots):\n        gs = gridspec.GridSpec(\n            self.nplots,\n            1,\n            left=self.LEFT,\n            right=self.RIGHT,\n            bottom=self.BOTTOM,\n            top=self.TOP,\n            wspace=self.WSPACE,\n            hspace=self.HSPACE,\n        )\n        return gs\n\n    def organizeOptimalRow(self, nplots, ncols):\n        row = math.ceil(nplots / ncols)\n        gstmp = gridspec.GridSpec(\n            row,\n            ncols,\n            left=self.LEFT,\n            right=self.RIGHT,\n            bottom=self.BOTTOM,\n            top=self.TOP,\n            wspace=self.WSPACE,\n            hspace=self.HSPACE,\n        )\n        gs = []\n        # First row might be different\n        gs.append(gstmp[0, 0 : row * ncols - nplots + 1])\n        for j in range(row * ncols - nplots + 1, ncols):\n            gs.append(gstmp[0, j])\n        for i in range(1, row):\n            for j in range(ncols):\n                gs.append(gstmp[i, j])\n        return gs\n\n    def organizeOptimalColumn(self, nplots, ncols):\n        row = math.ceil(nplots / ncols)\n        gstmp = gridspec.GridSpec(\n            row,\n            ncols,\n            left=self.LEFT,\n            right=self.RIGHT,\n            bottom=self.BOTTOM,\n            top=self.TOP,\n            wspace=self.WSPACE,\n            hspace=self.HSPACE,\n        )\n        gs = []\n        # First column might be different\n        gs.append(gstmp[0 : row * ncols - nplots + 1, 0])\n        for j in range(row * ncols - nplots + 1, row):\n            gs.append(gstmp[j, 0])\n        for i in range(1, ncols):\n            for j in range(row):\n                gs.append(gstmp[j, i])\n\n        return gs\n\n    def organizeplots(self, organizationtype, nplots=1, ncols=1, gs=None):\n        if organizationtype == PlotOrganizationType.Vertical:\n            return self.organizeVertical(nplots)\n        elif organizationtype == PlotOrganizationType.Horizontal:\n            return self.organizeHorizontal(nplots)\n        elif organizationtype == PlotOrganizationType.OptimalRow:\n            return self.organizeOptimalRow(nplots, ncols)\n        elif organizationtype == PlotOrganizationType.OptimalColumn:\n            return self.organizeOptimalColumn(nplots, ncols)\n        elif organizationtype == PlotOrganizationType.Specified:\n            pass\n        elif organizationtype == PlotOrganizationType.DefaultOrganization:\n            pass\n'"
RepTate/core/Parameter.py,3,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module Parameter\n\nModule that defines theory parameters and their properties.\n\n""""""\nimport enum\nimport numpy as np\n\n\nclass ParameterType(enum.Enum):\n    """"""Types of parameters that can be used in a Theory\n    \n    Parameters can be:\n        - real: Any real number\n        - integer: Any integer number\n        - discrete_real: It can take a value only from a discrete set of prescribed real values\n        - discrete_integer: It can take a value only from a discrete set of prescribed integer values\n        - bool: The parameter is a flag\n    """"""\n\n    real = 0\n    integer = 1\n    discrete_real = 2\n    discrete_integer = 3\n    boolean = 4\n    string = 5\n\n\nclass OptType(enum.Enum):\n    """"""Store the optimization type that can be used in a Theory\n    \n    Parameters can be:\n        - opt: Optimized at the next minimization\n        - nopt: Not optimized at the next minimization\n        - const: Not allowed to be minimized\n    """"""\n\n    opt = 1\n    nopt = 2\n    const = 3\n\n\nclass Parameter(object):\n    """"""Abstract class to describe theory parameters""""""\n\n    def __init__(\n        self,\n        name="""",\n        value=0,\n        description="""",\n        type=ParameterType.real,\n        opt_type=OptType.opt,\n        min_value=-np.inf,\n        max_value=np.inf,\n        display_flag=True,\n        discrete_values=[],\n    ):\n        """"""**Constructor**\n\n        Arguments:\n            - name {str} -- Parameter name\n            - value {real} -- Value of parameter\n            - description {str} -- Meaning of parameter\n            - type {enum} -- Type of parameter (real, integer, discrete_real, discrete_integer)\n            - opt_type {enum} -- Is this parameter optimized at the next minimization (opt, nopt, const)?\n            - min_value {real} -- Minimum allowed value for the parameter\n            - max_value {real} -- Maximum allowed value\n            - display_flag {bool} -- This parameter will be shown in the Theory table\n            - discrete_values {list} -- Allowed values that the parameter can take\n        """"""\n        self.name = name\n        self.description = description\n        self.type = type\n        if self.type == ParameterType.real:\n            self.value = float(value)\n        elif self.type == ParameterType.integer:\n            self.value = int(value)\n        elif self.type == ParameterType.discrete_real:\n            self.value = float(value)\n        elif self.type == ParameterType.discrete_integer:\n            self.value = int(value)\n        elif self.type == ParameterType.boolean:\n            if value in [True, ""true"", ""True"", ""1"", ""t"", ""T"", ""y"", ""yes""]:\n                self.value = True\n            else:\n                self.value = False\n        elif self.type == ParameterType.string:\n            self.value = str(value)\n\n        else:\n            pass  # NOT IMPLEMENTED YET\n        self.error = np.inf\n        self.opt_type = opt_type\n        self.min_value = min_value\n        self.max_value = max_value\n        self.display_flag = display_flag\n        self.discrete_values = discrete_values\n\n    def copy(self, par2):\n        """"""Copy the contents of another parameter""""""\n        self.name = par2.name\n        self.description = par2.description\n        self.type = par2.type\n        self.value = par2.value\n        self.opt_type = par2.opt_type\n        self.min_value = par2.min_value\n        self.max_value = par2.max_value\n\n    def __str__(self):\n        """"""String representation""""""\n        return ""%s=%g"" % (self.name, self.value)\n\n    def __repr__(self):\n        """"""Another string representation""""""\n        return (\n            ""Parameter(name,value,description,type,opt_type,min_value,max_value,display_flag)\\n""\n            + \'Parameter(""%s"",%g,""%s"",%s,%s,%g,%g,%s)\'\n            % (\n                self.name,\n                self.value,\n                self.description,\n                self.type,\n                self.opt_type,\n                self.min_value,\n                self.max_value,\n                self.display_flag,\n            )\n        )\n'"
RepTate/core/Theory.py,62,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module Theory\n\nModule that defines the basic structure and properties of a theory.\n\n""""""\nimport os\nimport enum\nimport time\nimport getpass\nimport numpy as np\nfrom scipy.optimize import curve_fit, basinhopping, dual_annealing, differential_evolution, shgo, brute\nfrom scipy.stats.distributions import t\n\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.DataTable import DataTable\nfrom RepTate.core.Parameter import ParameterType, OptType\nfrom RepTate.core.DraggableArtists import DraggableVLine, DraggableHLine, DragType\nfrom PyQt5.QtGui import QTextCursor\nfrom PyQt5.QtCore import pyqtSignal\nfrom PyQt5.QtWidgets import QMessageBox\n\nfrom collections import OrderedDict\nfrom math import log\nfrom RepTate.tools.ToolMaterialsDatabase import check_chemistry, get_all_parameters\nfrom colorama import Fore\nimport logging\nfrom scipy.interpolate import interp1d\nfrom html.parser import HTMLParser\n\nclass MLStripper(HTMLParser):\n    """"""Remove HTML tags from string""""""\n    def __init__(self):\n        self.reset()\n        self.strict = False\n        self.convert_charrefs= True\n        self.fed = []\n\n    def handle_data(self, d):\n        self.fed.append(d)\n\n    def get_data(self):\n        return \'\'.join(self.fed)\n\nclass MinimizationMethod(enum.Enum):\n    """"""Method used during minimization\n\n    Parameters can be:\n        - ls: Non-linear Least Squares (default)\n        - basinhopping: Basin-hopping method\n        - dualannealing: Dual-Annealing method\n        - diffevol: Differential Evolution method\n        - SHGO: simplicial homology global optimization\n        - bruteforce: Find the minimum on a hypergrid\n\n    """"""\n    ls=0\n    basinhopping=1\n    dualannealing=2\n    diffevol=3\n    SHGO=4\n    bruteforce=5\n    types=[""ls"", ""basinhopping"", ""dualannealing"", ""diffevol"", ""SHGO"", ""bruteforce""]\n    descriptions=[""Non-linear Least Squares"", ""Basin-hopping method"", ""Dual-Annealing"",\n                  ""Differential Evolution"", ""Simplicial Homology Global Optimization"", ""Find the minimum on a hypergrid""]\n\n    def __str__(self):\n        stt=""""\n        N=len(self.types.value)\n        for i, k in enumerate(self.types.value):\n            stt += Fore.RED + k + Fore.RESET + "": "" + self.descriptions.value[i] + ""\\n""\n        return stt\n\nclass ErrorCalculationMethod(enum.Enum):\n    """"""Method to determine the error of a theory calculation.\n\n    Options are:\n        - View1: Use current view number 1 in the application.\n        - RawData: Use the data table as defined by the application.\n        - AllViews: Use all active views.\n    """"""\n    View1 = 0\n    RawData = 1\n    AllViews = 2\n\nclass EndComputationRequested(Exception):\n    """"""Exception class to end computations""""""\n    pass\n\nclass Theory(CmdBase):\n    """"""Abstract class to describe a theory""""""\n    thname = """"\n    """""" thname {str} -- Theory name """"""\n    description = """"\n    """""" description {str} -- Description of theory """"""\n    citations = []\n    """""" citations {list of str} -- Articles that should be cited """"""\n    doi = []\n    """""" doicode {list of str} -- Doi code of the article """"""\n    nfev = 0\n    """""" nfev {int} -- Number of function evaluations """"""\n    doc_header = \'Theory commands (type help <topic>):\'\n\n    print_signal = pyqtSignal(str)\n\n    def __init__(self, name=""Theory"", parent_dataset=None, axarr=None):\n        """"""\n        **Constructor**\n\n        The following variables should be set by the particular realization of the theory:\n            - parameters     (dict): Parameters of the theory\n            - function       (func): Function that calculates the theory\n            - min            (real): min for integration/calculation\n            - max            (real): max\n            - npoints         (int): Number of points to calculate\n            - point_distribution   : all_points, linear, log\n            - dt             (real): default time step\n            - dt_min         (real): minimum time step for adaptive algorithms\n            - eps            (real): precision for adaptive algorithms\n            - integration_method   : Euler, RungeKutta5, AdaptiveDt\n            - stop_steady    (bool): Stop calculation if steady state of component 0 is attained\n\n        Keyword Arguments:\n            - name {str} -- Name of theory (default: {""Theory""})\n            - parent_dataset {DataSet} -- DataSet that contains the Theory (default: {None})\n            - ax {matplotlib axes} -- matplotlib graph (default: {None})\n        """"""\n        super().__init__()\n\n        self.name = name\n        self.parent_dataset = parent_dataset\n        self.axarr = axarr\n        self.ax = axarr[0]  #theory calculation only on this plot\n        self.parameters = OrderedDict(\n        )  # keep the dictionary key in order for the parameter table\n        self.tables = {}\n        self.function = None\n        self.active = True  #defines if the theory is plotted\n        self.calculate_is_busy = False\n        self.axarr[0].autoscale(False)\n        self.autocalculate = True\n        self.extra_data = {} # Dictionary saved during ""Save Project""\n\n        # THEORY OPTIONS\n        self.npoints = 100\n        self.dt = 0.001\n        self.dt_min = 1e-6\n        self.eps = 1e-4\n        self.stop_steady = False\n        self.is_fitting = False\n        self.has_modes = False\n\n        # LOGGING STUFF\n        self.logger = logging.getLogger(self.parent_dataset.logger.name + \'.\' + self.name)\n        self.logger.debug(\'New \' + self.thname + \' Theory\')\n        # np.seterr(all=""call"")\n        np.seterrcall(self.write)\n\n        ax = self.ax\n\n        # XRANGE for FIT\n        self.xmin = -np.inf\n        self.xmax = np.inf\n        self.xrange = ax.axvspan(\n            self.xmin, self.xmax, facecolor=\'yellow\', alpha=0.3, visible=False)\n        self.xminline = ax.axvline(\n            self.xmin,\n            color=\'black\',\n            linestyle=\'--\',\n            marker=\'o\',\n            visible=False)\n        self.xmaxline = ax.axvline(\n            self.xmax,\n            color=\'black\',\n            linestyle=\'--\',\n            marker=\'o\',\n            visible=False)\n        self.xminlinedrag = DraggableVLine(self.xminline, DragType.horizontal,\n                                           self.change_xmin, self)\n        self.xmaxlinedrag = DraggableVLine(self.xmaxline, DragType.horizontal,\n                                           self.change_xmax, self)\n        self.is_xrange_visible = False\n\n        # YRANGE for FIT\n        self.ymin = -np.inf\n        self.ymax = np.inf\n        self.yrange = ax.axhspan(\n            self.ymin, self.ymax, facecolor=\'pink\', alpha=0.3, visible=False)\n        self.yminline = ax.axhline(\n            self.ymin,\n            color=\'black\',\n            linestyle=\'--\',\n            marker=\'o\',\n            visible=False)\n        self.ymaxline = ax.axhline(\n            self.ymax,\n            color=\'black\',\n            linestyle=\'--\',\n            marker=\'o\',\n            visible=False)\n        self.yminlinedrag = DraggableHLine(self.yminline, DragType.vertical,\n                                           self.change_ymin, self)\n        self.ymaxlinedrag = DraggableHLine(self.ymaxline, DragType.vertical,\n                                           self.change_ymax, self)\n        self.is_yrange_visible = False\n\n        self.setup_default_minimization_options()\n        self.setup_default_error_calculation_options()\n\n        # Pre-create as many tables as files in the dataset\n        for f in parent_dataset.files:\n            self.tables[f.file_name_short] = DataTable(\n                axarr, ""TH-"" + f.file_name_short)\n            #initiallize theory table: important for \'single_file\' theories\n            ft = f.data_table\n            tt = self.tables[f.file_name_short]\n            tt.num_columns = ft.num_columns\n            tt.num_rows = ft.num_rows\n            tt.data = np.zeros((tt.num_rows, tt.num_columns))\n\n        self.do_cite("""")\n\n        if CmdBase.mode == CmdMode.GUI:\n            self.print_signal.connect(self.print_qtextbox)  # Asynchronous print when using multithread\n         # flag for requesting end of computations\n        self.stop_theory_flag = False\n\n    def write(self, type, flag):\n        """"""Write numpy error logs to the logger""""""\n        self.logger.info(\'numpy: %s (flag %s)\'%(type, flag))\n\n    def setup_default_minimization_options(self):\n        # MINIMIZATION OPTIONS\n        self.mintype=MinimizationMethod.ls\n        self.LSmethod=\'trf\'\n        self.LSjac=\'2-point\'\n        self.LSftol=1e-8\n        self.LSxtol=1e-8\n        self.LSgtol=1e-8\n        self.LSloss=\'linear\'\n        self.LSf_scale=1.0\n        self.LSmax_fnev=None\n        self.LStr_solver=None\n        self.basinniter=100\n        self.basinT=1.0\n        self.basinstepsize=0.5\n        self.basininterval=50\n        self.basinniter_success=None\n        self.basinseed=None\n        self.annealmaxiter=1000\n        self.annealinitial_temp=5230.0\n        self.annealrestart_temp_ratio=2e-5\n        self.annealvisit=2.62\n        self.annealaccept=-5.0\n        self.annealmaxfun=10000000\n        self.annealseed=None\n        self.annealno_local_search=False\n        self.diffevolstrategy=\'best1bin\'\n        self.diffevolmaxiter=1000\n        self.diffevolpopsize=15\n        self.diffevoltol=0.01\n        self.diffevolmutation=(0.5, 1)\n        self.diffevolrecombination=0.7\n        self.diffevolseed=None\n        self.diffevolpolish=True\n        self.diffevolinit=\'latinhypercube\'\n        self.diffevolatol=0\n        self.diffevolupdating=\'immediate\'\n        self.SHGOn=100\n        self.SHGOiters=1\n        self.SHGOmaxfev=None\n        self.SHGOf_min=None\n        self.SHGOf_tol=1e-4\n        self.SHGOmaxiter=None\n        self.SHGOmaxev=None\n        self.SHGOmaxtime=None\n        self.SHGOminhgrd=None\n        self.SHGOminimize_every_iter=False\n        self.SHGOlocal_iter=False\n        self.SHGOinfty_constraints=True\n        self.SHGOsampling_method=\'simplicial\'\n        self.BruteNs=20\n\n    def setup_default_error_calculation_options(self):\n        self.errormethod = ErrorCalculationMethod.View1\n        self.normalizebydata = False\n\n    def destructor(self):\n        """"""If the theory needs to erase some memory in a special way, any\n        child theory must rewrite this funcion""""""\n        pass\n\n    def precmd(self, line):\n        """"""Calculations before the theory is calculated\n\n        This function could be erased\n        This method is called after the line has been input but before\n        it has been interpreted. If you want to modifdy the input line\n        before execution (for example, variable substitution) do it here.""""""\n        super(Theory, self).precmd(line)\n        return line\n\n    def update_parameter_table(self):\n        """"""\n        Added so that Maxwell modes works in CL\n        """"""\n        pass\n    def handle_actionCalculate_Theory(self):\n        """"""Used only in non GUI mode""""""\n        self.do_calculate("""")\n\n    def request_stop_computations(self):\n        """"""Called when user wants to terminate the current computation""""""\n        self.Qprint(\'<font color=red><b>Stop current calculation requested</b></font>\')\n        self.stop_theory_flag = True\n\n    def do_calculate(self, line, timing=True):\n        """"""Calculate the theory""""""\n        if self.calculate_is_busy:\n            return\n        if not self.tables:\n            return\n\n        self.calculate_is_busy = True\n        self.start_time_cal = time.time()\n        th_files = self.theory_files()\n        for f in self.parent_dataset.files:\n            if f in th_files:\n                if self.stop_theory_flag:\n                    break\n                if f.with_extra_x:\n                    data_copy = f.data_table.data.copy()\n                    self.extend_xrange(f)\n                self.function(f)\n                if f.with_extra_x:\n                    # restore f\n                    f.data_table.data = data_copy\n                    f.data_table.num_rows = data_copy.shape[0]\n            elif self.single_file:\n                # delete theory data of other files\n                tt = self.tables[f.file_name_short]\n                tt.data = np.empty((tt.num_rows, tt.num_columns))\n                tt.data[:] = np.nan\n\n        if not self.is_fitting:\n            self.do_plot(line)\n            self.do_error(line)\n        if timing:\n            self.Qprint(\'\'\'<i>---Calculated in %.3g seconds---</i><br>\'\'\' % (time.time() - self.start_time_cal))\n            self.do_cite("""")\n        self.calculate_is_busy = False\n\n    def extend_xrange(self, fcopy):\n        """"""Extend the xrange of the fcopy data""""""\n        # xmin/xmax of current data\n        ncol = fcopy.data_table.data.shape[1]\n        xmin = fcopy.data_table.data[:, 0][0]\n        xmax = fcopy.data_table.data[:, 0][-1]\n        try:\n            thmin = float(fcopy.theory_xmin)\n        except ValueError:\n            fcopy.nextramin = 0 # number of extra rows added left\n        else:\n            if thmin < xmin:\n                if 0 < thmin and fcopy.theory_logspace:\n                    xextra_min = np.logspace(np.log10(thmin), np.log10(xmin), fcopy.th_num_pts)[:-1]\n                else:\n                    xextra_min = np.linspace(thmin, xmin, fcopy.th_num_pts)[:-1]\n                fcopy.nextramin = len(xextra_min)\n                data_min = np.zeros((len(xextra_min), ncol))\n                data_min[:, 0] = xextra_min\n                fcopy.data_table.data = np.concatenate((data_min, fcopy.data_table.data))\n\n        try:\n            thmax = float(fcopy.theory_xmax)\n        except ValueError:\n            fcopy.nextramax = 0 # number of extra rows added right\n        else:\n            if thmax > xmax:\n                if 0 < thmax and fcopy.theory_logspace:\n                    xextra_max = np.logspace(np.log10(xmax), np.log10(thmax), fcopy.th_num_pts)[1:]\n                else:\n                    xextra_max = np.linspace(xmax, thmax, fcopy.th_num_pts)[1:]\n                fcopy.nextramax = len(xextra_max)\n                data_max = np.zeros((len(xextra_max), ncol))\n                data_max[:, 0] = xextra_max\n                fcopy.data_table.data = np.concatenate((fcopy.data_table.data, data_max))\n        fcopy.data_table.num_rows = fcopy.data_table.data.shape[0]\n\n    def get_non_extended_th_table(self, f):\n        """"""return a copy of the theory table associated with f, where the extra rows are deleted""""""\n        if f.with_extra_x:\n            tmp_dt = DataTable(axarr=[])\n            nrow = self.tables[f.file_name_short].num_rows\n            tmp_dt.data = self.tables[f.file_name_short].data[f.nextramin:nrow-f.nextramax, :]\n            tmp_dt.num_rows = tmp_dt.data.shape[0]\n            tmp_dt.num_columns = tmp_dt.data.shape[1]\n            return tmp_dt\n        else:\n            return self.tables[f.file_name_short]\n\n    def theory_files(self):\n        f_list = []\n        if self.single_file:\n            selected_file = self.parent_dataset.selected_file\n            if selected_file:\n                if selected_file.active:\n                    f_list.append(self.parent_dataset.selected_file\n                                )  #use the selected/highlighted file if active\n        if not f_list:  #there is no selected file or it is inactive or single_file=False\n            for f in self.parent_dataset.files:\n                if f.active:\n                    f_list.append(f)\n                    if self.single_file:\n                        break\n        return f_list\n\n    def do_error(self, line):\n        """"""Report the error of the current theory\n\nReport the error of the current theory on all the files, taking into account the current selected xrange and yrange.\n\nFile error is calculated as the mean square of the residual, averaged over all points in the file. Total error is the mean square of the residual, averaged over all points in all files.""""""\n        total_error = 0\n        npoints = 0\n        view = self.parent_dataset.parent_application.current_view\n        tools = self.parent_dataset.parent_application.tools\n        # table=\'\'\'<table border=""1"" width=""100%"">\'\'\'\n        # table+=\'\'\'<tr><th>File</th><th>Error (RSS)</th><th># Pts</th></tr>\'\'\'\n        tab_data = [[\'%-18s\' % \'File\', \'%-18s\' % \'Error (RSS)\', \'%-18s\' % \'# Pts\'],]\n        for f in self.theory_files():\n            if self.stop_theory_flag:\n                break\n            xexp, yexp, success = view.view_proc(f.data_table,\n                                                 f.file_parameters)\n            tmp_dt = self.get_non_extended_th_table(f)\n            xth, yth, success = view.view_proc(tmp_dt,\n                                               f.file_parameters)\n            if (self.xrange.get_visible()):\n                conditionx = (xexp > self.xmin) * (xexp < self.xmax)\n            else:\n                conditionx = np.ones_like(xexp, dtype=np.bool)\n            if (self.yrange.get_visible()):\n                conditiony = (yexp > self.ymin) * (yexp < self.ymax)\n            else:\n                conditiony = np.ones_like(yexp, dtype=np.bool)\n            conditionnaninf = (~np.isnan(xexp)) * (~np.isnan(yexp)) * (\n                ~np.isnan(xth)) * (~np.isnan(yth)) * (~np.isinf(xexp)) * (\n                    ~np.isinf(yexp)) * (~np.isinf(xth)) * (~np.isinf(yth))\n            yexp = np.extract(conditionx * conditiony * conditionnaninf, yexp)\n            yth = np.extract(conditionx * conditiony * conditionnaninf, yth)\n            if self.normalizebydata:\n                f_error = np.mean(((yth - yexp)/yexp)**2)\n            else:\n                f_error = np.mean((yth - yexp)**2)\n            npt = len(yth)\n            total_error += f_error * npt\n            npoints += npt\n            # table+= \'\'\'<tr><td>%-18s</td><td>%-18.4g</td><td>%-18d</td></tr>\'\'\'% (f.file_name_short, f_error, npt)\n            tab_data.append([\'%-18s\'% f.file_name_short, \'%-18.4g\' % f_error, \'%-18d\' %npt])\n        # table+=\'\'\'</table><br>\'\'\'\n        # self.Qprint(table)\n        self.Qprint(tab_data)\n\n        #count number of fitting parameters\n        free_p = 0\n        for p in self.parameters.values():\n            if p.opt_type == OptType.opt:\n                free_p += 1\n\n        if npoints != 0 and total_error > 0 :\n            self.Qprint(""<b>TOTAL ERROR</b>: %12.5g (%d Pts)"" % (total_error / npoints, npoints))\n            # Bayesian information criterion (BIC) penalise free parametters (overfitting)\n            # Model with lowest BIC number is prefered\n            self.Qprint(""<b>Bayesian IC</b>: %12.5g<br>"" % (npoints * log(total_error / npoints) + free_p * log(npoints)))\n        else:\n            self.Qprint(""<b>TOTAL ERROR</b>: %12s (%6d)<br>"" % (""N/A"", npoints))\n\n    def do_error_interpolated(self, line):\n        """"""Report the error of the current theory\nThis routine works when the theory and the experimental data are not measured on the same points""""""\n        total_error = 0\n        npoints = 0\n        view = self.parent_dataset.parent_application.current_view\n        tools = self.parent_dataset.parent_application.tools\n        tab_data = [[\'%-18s\' % \'File\', \'%-18s\' % \'Error (RSS)\', \'%-18s\' % \'# Pts\'],]\n        for f in self.theory_files():\n            if self.stop_theory_flag:\n                break\n            xexp, yexp, success = view.view_proc(f.data_table,\n                                                 f.file_parameters)\n            tmp_dt = self.get_non_extended_th_table(f)\n            xth, yth, success = view.view_proc(tmp_dt,\n                                               f.file_parameters)\n            # HERE WE INTERPOLATE\n            yth2 = np.zeros_like(yexp)\n            for i in range(view.n):\n                funcinterp = interp1d(xth[:,i], yth[:,i], kind=\'linear\') # Linear interpolation\n                yth2[:,i] = funcinterp(xexp[:,i])\n\n            if (self.xrange.get_visible()):\n                conditionx = (xexp > self.xmin) * (xexp < self.xmax)\n            else:\n                conditionx = np.ones_like(xexp, dtype=np.bool)\n            if (self.yrange.get_visible()):\n                conditiony = (yexp > self.ymin) * (yexp < self.ymax)\n            else:\n                conditiony = np.ones_like(yexp, dtype=np.bool)\n            conditionnaninf = (~np.isnan(xexp)) * (~np.isnan(yexp)) * (\n                ~np.isnan(yth2)) * (~np.isinf(xexp)) * (\n                    ~np.isinf(yexp)) * (~np.isinf(yth2))\n            yexp = np.extract(conditionx * conditiony * conditionnaninf, yexp)\n            yth2 = np.extract(conditionx * conditiony * conditionnaninf, yth2)\n\n            if self.normalizebydata:\n                f_error = np.mean(((yth2 - yexp)/yexp)**2)\n            else:\n                f_error = np.mean((yth2 - yexp)**2)\n            npt = len(yth2)\n            total_error += f_error * npt\n            npoints += npt\n            # table+= \'\'\'<tr><td>%-18s</td><td>%-18.4g</td><td>%-18d</td></tr>\'\'\'% (f.file_name_short, f_error, npt)\n            tab_data.append([\'%-18s\'% f.file_name_short, \'%-18.4g\' % f_error, \'%-18d\' %npt])\n        # table+=\'\'\'</table><br>\'\'\'\n        # self.Qprint(table)\n        self.Qprint(tab_data)\n\n        #count number of fitting parameters\n        free_p = 0\n        for p in self.parameters.values():\n            if p.opt_type == OptType.opt:\n                free_p += 1\n\n        if npoints != 0 and total_error > 0 :\n            self.Qprint(""<b>TOTAL ERROR</b>: %12.5g (%d Pts)"" % (total_error / npoints, npoints))\n            # Bayesian information criterion (BIC) penalise free parametters (overfitting)\n            # Model with lowest BIC number is prefered\n            self.Qprint(""<b>Bayesian IC</b>: %12.5g<br>"" % (npoints * log(total_error / npoints) + free_p * log(npoints)))\n        else:\n            self.Qprint(""<b>TOTAL ERROR</b>: %12s (%6d)<br>"" % (""N/A"", npoints))\n\n\n    def fit_callback_basinhopping(self, x, f, accepted):\n        if accepted and f<self.fminnow:\n            self.fminnow=f\n            self.Qprint(""nfeval %6d f=%g"" % (self.nfev, f))\n        if self.stop_theory_flag:\n            return True\n\n    def fit_callback_dualannealing(self, x, f, context):\n        if f<self.fminnow:\n            self.fminnow=f\n            self.Qprint(""nfeval %6d f=%g"" % (self.nfev, f))\n        if self.stop_theory_flag:\n            return True\n\n    def fit_callback_diffevol(self, xk, convergence):\n        self.Qprint(""nfeval %6d frac=%g""%(self.nfev, convergence))\n        if self.stop_theory_flag:\n            return True\n\n    def fit_callback_shgo(self, xk):\n        if self.nfev%10==0:\n            self.Qprint(""nfeval %6d""%self.nfev)\n        if self.stop_theory_flag:\n            return True\n\n    def fit_check_bounds(self, **kwargs):\n        x = kwargs[""x_new""]\n        tmax = bool(np.all(x <= self.param_max))\n        tmin = bool(np.all(x >= self.param_min))\n        return tmax and tmin\n\n    def func_fit_and_error(self, x):\n        """"""Calls the theory function, constructs the vector with the theory predictions and\n           returns the sum of the squares of the residuals\n        """"""\n        # NEED TO RECOVER THE VECTOR y THAT WE CONSTRUCTED DURING FUNCTION FIT\n        if self.normalizebydata:\n            residuals = (self.fittingy - self.func_fit(self.fittingx, *x))/self.fittingy\n        else:\n            residuals = self.fittingy - self.func_fit(self.fittingx, *x)\n        fres = sum(residuals**2)\n        return fres\n\n    def func_fit(self, x, *param_in):\n        """"""Calls the theory function and constructs the vector with the theory predictions""""""\n        # 1. Assign the current values of the parameters being optimized\n        ind = 0\n        k = list(self.parameters.keys())\n        k.sort()\n        for p in k:\n            par = self.parameters[p]\n            if par.opt_type == OptType.opt:\n                par.value = param_in[ind]\n                ind += 1\n        # 2. Call the theory function\n        self.do_calculate("""", timing=False)\n\n        # 3. Constructs the y vector that contains all the Y values from the theory after\n        #    applying the current view and respecting the {xmin, xmax} & {ymin, ymax} limits\n        y = []\n        view = self.parent_dataset.parent_application.current_view\n\n        for f in self.theory_files():\n            if f.active:\n                tmp_dt = self.get_non_extended_th_table(f)\n                xth, yth, success = view.view_proc(\n                    tmp_dt, f.file_parameters)\n                xexp, yexp, success = view.view_proc(f.data_table,\n                                                     f.file_parameters)\n                for i in range(view.n):\n                    if (self.xrange.get_visible()):\n                        conditionx = (xexp[:, i] > self.xmin) * (\n                            xexp[:, i] < self.xmax)\n                    else:\n                        conditionx = np.ones_like(xexp[:, i], dtype=np.bool)\n                    if (self.yrange.get_visible()):\n                        conditiony = (yexp[:, i] > self.ymin) * (\n                            yexp[:, i] < self.ymax)\n                    else:\n                        conditiony = np.ones_like(yexp[:, i], dtype=np.bool)\n                    conditionnaninf = (~np.isnan(xexp)[:, 0]) * (\n                        ~np.isnan(yexp)[:, 0]) * (~np.isinf(xexp)[:, 0]) * (\n                            ~np.isinf(yexp)[:, 0])\n                    ycond = np.extract(\n                        conditionx * conditiony * conditionnaninf, yth[:, i])\n                    y = np.append(y, ycond)\n        self.nfev += 1\n        return y\n\n    def do_fit(self, line):\n        """"""Minimize the error""""""\n        # Do some initial checks on the status of datasets and theories\n        if not self.tables:\n            self.is_fitting = False\n            return\n        if len(self.parent_dataset.inactive_files) == len(\n                self.parent_dataset.files):  #all files hidden\n            self.is_fitting = False\n            return\n        th_files = self.theory_files()\n        if not th_files:\n            self.is_fitting = False\n            return\n\n        # Start the fitting procedure\n        # 1. Create x and y vectors that contain the X and Y values of all the active files\n        #    in the current view that respect the {xmin, xmax} & {ymin, ymax} limits\n        self.is_fitting = True\n        start_time = time.time()\n        view = self.parent_dataset.parent_application.current_view\n        self.Qprint(\'\'\'<hr><h2>Parameter Fitting</h2>\'\'\')\n        # Vectors that contain all X and Y in the files & view\n        x = []\n        y = []\n\n        if self.xrange.get_visible():\n            if self.xmin > self.xmax:\n                temp = self.xmin\n                self.xmin = self.xmax\n                self.xmax = temp\n            self.Qprint(""<b>xrange</b>=[%0.3g, %0.3g]"" % (self.xmin, self.xmax))\n        if self.yrange.get_visible():\n            if self.ymin > self.ymax:\n                temp = self.ymin\n                self.ymin = self.ymax\n                self.ymax = temp\n            self.Qprint(""<b>yrange</b>=[%.03g, %0.3g]"" % (self.ymin, self.ymax))\n\n        for f in th_files:\n            if self.stop_theory_flag:\n                return\n            if f.active:\n                xexp, yexp, success = view.view_proc(f.data_table,\n                                                     f.file_parameters)\n                for i in range(view.n):\n                    if (self.xrange.get_visible()):\n                        conditionx = (xexp[:, i] > self.xmin) * (\n                            xexp[:, i] < self.xmax)\n                    else:\n                        conditionx = np.ones_like(xexp[:, i], dtype=np.bool)\n                    if (self.yrange.get_visible()):\n                        conditiony = (yexp[:, i] > self.ymin) * (\n                            yexp[:, i] < self.ymax)\n                    else:\n                        conditiony = np.ones_like(yexp[:, i], dtype=np.bool)\n                    conditionnaninf = (~np.isnan(xexp)[:, 0]) * (\n                        ~np.isnan(yexp)[:, 0]) * (~np.isinf(xexp)[:, 0]) * (\n                            ~np.isinf(yexp)[:, 0])\n                    xcond = np.extract(\n                        conditionx * conditiony * conditionnaninf, xexp[:, i])\n                    ycond = np.extract(\n                        conditionx * conditiony * conditionnaninf, yexp[:, i])\n\n                    x = np.append(x, xcond)\n                    y = np.append(y, ycond)\n\n        # 2. Create the array of theory parameters that will be chenged during the fitting (checked parameters)\n        #    It also creates the arrays with the upper and lower bounds for parameters\n        initial_guess = [] # Take the initial guess for the fit from the current value of the parameter\n        self.param_min = []     # list of min values for fitting parameters\n        self.param_max = []     # list of max values for fitting parameters\n        k = list(self.parameters.keys())\n        k.sort()\n        for p in k:\n            par = self.parameters[p]\n            if par.opt_type == OptType.opt:\n                initial_guess.append(par.value)\n                self.param_min.append(par.min_value)\n                self.param_max.append(par.max_value)\n        # Return if the list of checked parameters is empty\n        if (not initial_guess) or (not self.param_min) or (not self.param_max):\n            self.Qprint(""No parameter to minimize"")\n            self.is_fitting = False\n            return\n\n        # 3. This is where the actual optimization is done\n        # TODO: We should add the option to use different minimization methods\n        #       like those included in scipy or even other ones implemented by us (MC methods)\n        #opt = dict(return_full=True) # I think this is not used\n        self.nfev = 0\n        self.fittingx = x # MAKE EXPERIMENTAL x VECTOR AVAILABLE GLOBAL OPTIMISATION\n        self.fittingy = y # MAKE EXPERIMENTAL y VECTOR AVAILABLE GLOBAL OPTIMISATION\n        self.fminnow = np.inf\n\n        if (self.mintype==MinimizationMethod.dualannealing or self.mintype==MinimizationMethod.diffevol or\n            self.mintype==MinimizationMethod.SHGO):\n            if (np.any(np.isinf(self.param_min)) or np.any(np.isinf(self.param_max)) or np.any(\n                np.isnan(self.param_min)) or np.any(np.isnan(self.param_max))):\n                msg = \'This fitting method cannot be used if any of the bounds is \xc2\xb1 nan or \xc2\xb1 inf\'\n                self.Qprint(msg)\n                self.is_fitting = False\n                return\n\n        if self.mintype==MinimizationMethod.ls:\n            self.Qprint(\'<b>Non-linear Least-squares</b>\')\n            self.Qprint(\'<b>Local optimisation</b>\')\n            try:\n                if self.LSmethod==\'trf\':\n                    self.Qprint(""Method: Trust Region Reflective"")\n                elif self.LSmethod==\'dogbox\':\n                    self.Qprint(""Method: dogleg"")\n                elif self.LSmethod==\'lm\':\n                    self.Qprint(""Method: Levenberg-Marquardt"")\n                if self.LSmethod==\'trf\' or self.LSmethod==\'dogbox\':\n                    pars, pcov = curve_fit(self.func_fit, x, y, p0=initial_guess, bounds=(self.param_min, self.param_max),\n                                        method=self.LSmethod, jac=self.LSjac, ftol=self.LSftol, xtol=self.LSxtol,\n                                        gtol=self.LSgtol, loss=self.LSloss, f_scale=self.LSf_scale, max_nfev=self.LSmax_fnev,\n                                        tr_solver=self.LStr_solver)\n                else:\n                    if self.LSmax_fnev==None:\n                        pars, pcov = curve_fit(self.func_fit, x, y, p0=initial_guess, bounds=(self.param_min, self.param_max),\n                                            method=self.LSmethod, ftol=self.LSftol, xtol=self.LSxtol,\n                                            gtol=self.LSgtol)\n                    else:\n                        pars, pcov = curve_fit(self.func_fit, x, y, p0=initial_guess, bounds=(self.param_min, self.param_max),\n                                            method=self.LSmethod, ftol=self.LSftol, xtol=self.LSxtol,\n                                            gtol=self.LSgtol, maxfev=self.LSmax_fnev)\n            except Exception as e:\n                print(""In do_fit()"", e)\n                self.Qprint(""%s"" % e)\n                self.is_fitting = False\n                return\n\n        elif self.mintype==MinimizationMethod.basinhopping:\n            self.Qprint(""<b>Basin Hopping<b>"")\n            self.Qprint(\'<b>Global optimisation</b>\')\n            minimizer_kwargs = {""method"": ""BFGS""}\n            try:\n                ret = basinhopping(self.func_fit_and_error, initial_guess, niter=self.basinniter, T=self.basinT,\n                                   stepsize=self.basinstepsize, minimizer_kwargs=minimizer_kwargs,\n                                   accept_test=self.fit_check_bounds, callback=self.fit_callback_basinhopping,\n                                   interval=self.basininterval, niter_success=self.basinniter_success, seed=self.basinseed)\n                initial_guess1=ret.x\n                pars, pcov = curve_fit(self.func_fit, x, y, p0=initial_guess1, bounds=(self.param_min, self.param_max), method=\'trf\')\n            except Exception as e:\n                print(""In do_fit()"", e)\n                self.Qprint(""%s"" % e)\n                self.is_fitting = False\n                return\n\n        elif self.mintype==MinimizationMethod.dualannealing:\n            self.Qprint(""<b>Dual Annealing<b>"")\n            self.Qprint(\'<b>Global optimisation</b>\')\n            try:\n                param_bounds=list(zip(self.param_min, self.param_max))\n                ret = dual_annealing(self.func_fit_and_error, bounds=param_bounds,\n                                     maxiter=self.annealmaxiter, initial_temp=self.annealinitial_temp,\n                                     restart_temp_ratio=self.annealrestart_temp_ratio,\n                                     visit=self.annealvisit, accept=self.annealaccept,\n                                     maxfun=self.annealmaxfun, seed=self.annealseed,\n                                     no_local_search=self.annealno_local_search,\n                                     callback=self.fit_callback_dualannealing, x0=initial_guess)\n                initial_guess1=ret.x\n                pars, pcov = curve_fit(self.func_fit, x, y, p0=initial_guess1,\n                                       bounds=(self.param_min, self.param_max), method=\'trf\')\n            except Exception as e:\n                print(""In do_fit()"", e)\n                self.Qprint(""%s"" % e)\n                self.is_fitting = False\n                return\n\n        elif self.mintype==MinimizationMethod.diffevol:\n            self.Qprint(""<b>Differential Evolution<b>"")\n            self.Qprint(\'<b>Global optimisation</b>\')\n            try:\n                param_bounds=list(zip(self.param_min, self.param_max))\n                ret = differential_evolution(self.func_fit_and_error, bounds=param_bounds,\n                                             strategy=self.diffevolstrategy, maxiter=self.diffevolmaxiter,\n                                             popsize=self.diffevolpopsize, tol=self.diffevoltol,\n                                             mutation=self.diffevolmutation, recombination=self.diffevolrecombination,\n                                             seed=self.diffevolseed, callback=self.fit_callback_diffevol,\n                                             polish=self.diffevolpolish, init=self.diffevolinit,\n                                             atol=self.diffevolatol, updating=self.diffevolupdating)\n                initial_guess1=ret.x\n                pars, pcov = curve_fit(self.func_fit, x, y, p0=initial_guess1, bounds=(self.param_min, self.param_max),\n                                       method=\'trf\')\n            except Exception as e:\n                print(""In do_fit()"", e)\n                self.Qprint(""%s"" % e)\n                self.is_fitting = False\n                return\n\n        elif self.mintype==MinimizationMethod.SHGO:\n            self.Qprint(""<b>Simplicial Homology Global Optimization<b>"")\n            try:\n                param_bounds=list(zip(self.param_min, self.param_max))\n                options={\'maxfev\': self.SHGOmaxfev, \'f_min\': self.SHGOf_min, \'f_tol\': self.SHGOf_tol,\n                         \'maxiter\': self.SHGOmaxiter, \'maxev\': self.SHGOmaxev, \'maxtime\': self.SHGOmaxtime,\n                         \'minhgrd\': self.SHGOminhgrd, \'minimize_every_iter\': self.SHGOminimize_every_iter,\n                         \'local_iter\': self.SHGOlocal_iter, \'infty_constraints\': self.SHGOinfty_constraints}\n                ret = shgo(self.func_fit_and_error, bounds=param_bounds, n=self.SHGOn, iters=self.SHGOiters,\n                           callback=self.fit_callback_shgo, options=options, sampling_method=self.SHGOsampling_method)\n                initial_guess1=ret.x\n                pars, pcov = curve_fit(self.func_fit, x, y, p0=initial_guess1, bounds=(self.param_min, self.param_max),\n                                       method=\'trf\')\n            except Exception as e:\n                print(""In do_fit()"", e)\n                self.Qprint(""%s"" % e)\n                self.is_fitting = False\n                return\n\n        elif self.mintype==MinimizationMethod.bruteforce:\n            self.Qprint(""<b>Brute Force Global Optimization<b>"")\n            try:\n                param_bounds=list(zip(self.param_min, self.param_max))\n                ret = brute(self.func_fit_and_error, ranges=param_bounds, Ns=self.BruteNs)\n                initial_guess1=ret\n                pars, pcov = curve_fit(self.func_fit, x, y, p0=initial_guess1, bounds=(self.param_min, self.param_max),\n                                       method=\'trf\')\n            except Exception as e:\n                print(""In do_fit()"", e)\n                self.Qprint(""%s"" % e)\n                self.is_fitting = False\n                return\n\n        # 4. Statistical analysis of the solution found\n        residuals = y - self.func_fit(x, *initial_guess)\n        fres0 = sum(residuals**2)\n        residuals = y - self.func_fit(x, *pars)\n        fres1 = sum(residuals**2)\n\n        # table=\'\'\'<table border=""1"" width=""100%"">\'\'\'\n        # table+=\'\'\'<tr><th>Initial Error</th><th>Final Error</th></tr>\'\'\'\n        # table+=\'\'\'<tr><td>%g</td><td>%g</td></tr>\'\'\'%(fres0, fres1)\n        # table+=\'\'\'</table><br>\'\'\'\n        table = [[\'%-18s\' % \'Initial Error\', \'%-18s\' % \'Final Error\'],]\n        table.append([\'%-18g\' % fres0, \'%-18g\' % fres1])\n        self.Qprint(table)\n\n        self.Qprint(\'<b>%g</b> function evaluations\' % (self.nfev))\n\n        alpha = 0.05  # 95% confidence interval = 100*(1-alpha)\n        n = len(y)  # number of data points\n        p = len(pars)  # number of parameters\n        dof = max(0, n - p)  # number of degrees of freedom\n        # student-t value for the dof and confidence level\n        tval = t.ppf(1.0 - alpha / 2., dof)\n\n        par_error = []\n        #for i, p, var in zip(range(p), pars, np.diag(pcov)):\n        for var in np.diag(pcov):\n            sigma = var**0.5\n            par_error.append(sigma * tval)\n\n        ind = 0\n        # table=\'\'\'<table border=""1"" width=""100%"">\'\'\'\n        # table+=\'\'\'<tr><th>Parameter</th><th>Value \xc2\xb1 Error</th></tr>\'\'\'\n        table = [[\'%-18s\' % \'Parameter\', \'%-18s\' % \'Value \xc2\xb1 Error\'], ]\n        for p in k:\n            par = self.parameters[p]\n            if par.opt_type == OptType.opt:\n                par.error = par_error[ind]\n                ind += 1\n                # table+=\'\'\'<tr><td>%s</td><td>%10.4g \xc2\xb1 %-9.4g</td></tr>\'\'\'%(par.name, par.value, par.error)\n                val_err = \'%.4g \xc2\xb1 %.4g\' % (par.value, par.error)\n                table.append([\'%-18s\' % par.name, \'%-18s\' % val_err])\n            else:\n                # table+=\'\'\'<tr><td>%s</td><td>%10.4g</td></tr>\'\'\'%(par.name, par.value)\n                if par.type == ParameterType.string:\n                    table.append([\'%-18s\' % par.name, \'%18s\' % par.value])\n                else:\n                    table.append([\'%-18s\' % par.name, \'%-18.4g\' % par.value])\n        # table+=\'\'\'</table><br>\'\'\'\n        self.Qprint(table)\n        self.is_fitting = False\n        self.do_calculate(line, timing=False)\n        self.Qprint(\'\'\'<i>---Fitted in %.3g seconds---</i><br>\'\'\' % (time.time() - start_time))\n        self.do_cite("""")\n\n    def do_mintype(self, line):\n        """"""Shows or changes the minimization method""""""\n        if (line==""""):\n            print(""Current minimization method:"")\n            print(Fore.RED + ""%s""%MinimizationMethod.types.value[self.mintype.value] +\n                  Fore.RESET + ""\\t%s""%MinimizationMethod.descriptions.value[self.mintype.value])\n        elif (line==""available""):\n            m = MinimizationMethod(0)\n            print(m)\n        elif (line in dict(MinimizationMethod.__members__.items())):\n            self.mintype=MinimizationMethod[line]\n        else:\n            print (""Minimization method %s not valid""%line)\n\n    def complete_mintype(self, text, line, begidx, endidx):\n        """"""Complete mintype command""""""\n        types = MinimizationMethod.types.value + [""available""]\n        if not text:\n            completions = types[:]\n        else:\n            completions = [f for f in types if f.startswith(text)]\n        return completions\n\n    def do_file(self, line):\n        """"""Print the theory table associated with the given file name""""""\n        if line in self.tables:\n            print(self.tables[line].data)\n        else:\n            print(""Theory table for \\""%s\\"" not found"" % line)\n\n    def complete_file(self, text, line, begidx, endidx):\n        """"""Complete with file names""""""\n        file_names = list(self.tables.keys())\n        if not text:\n            completions = file_names[:]\n        else:\n            completions = [f for f in file_names if f.startswith(text)]\n        return completions\n\n    def do_parameters(self, line):\n        """"""View/switch minimization of Theory parameters. Several parameters are allowed. With no arguments, show the current values""""""\n        if (line == """"):\n            plist = list(self.parameters.keys())\n            plist.sort()\n            print(""%9s   %10s (with * = is optimized)"" % (""Parameter"",\n                                                          ""Value""))\n            print(""=================================="")\n            for p in plist:\n                if self.parameters[p].opt_type == OptType.opt:\n                    print(""*%8s = %10.5g"" % (self.parameters[p].name,\n                                             self.parameters[p].value))\n                elif self.parameters[p].opt_type == OptType.nopt:\n                    print(""%8s = %10.5g"" % (self.parameters[p].name,\n                                            self.parameters[p].value))\n                elif self.parameters[p].opt_type == OptType.const:\n                    print(""%8s = %10.5g"" % (self.parameters[p].name,\n                                            self.parameters[p].value))\n        else:\n            for s in line.split():\n                if (s in self.parameters):\n                    if self.parameters[s].opt_type == OptType.opt:\n                        self.parameters[s].opt_type = OptType.nopt\n                    elif self.parameters[s].opt_type == OptType.nopt:\n                        self.parameters[s].opt_type = OptType.opt\n                    elif self.parameters[s].opt_type == OptType.const:\n                        print(""Parameter %s is not optimized"" % s)\n                else:\n                    print(""Parameter %s not found"" % s)\n\n    def complete_parameters(self, text, line, begidx, endidx):\n        """"""Complete the parameters command""""""\n        parameter_names = list(self.parameters.keys())\n        if not text:\n            completions = parameter_names[:]\n        else:\n            completions = [f for f in parameter_names if f.startswith(text)]\n        return completions\n\n    def plot_theory_stuff(self):\n        """"""Plot theory helpers""""""\n        pass\n\n# SAVE THEORY STUFF\n\n    def do_save(self, line=\'\', extra_txt=\'\'):\n        """"""Save the results from all theory predictions to file""""""\n        self.Qprint(\'Saving prediction(s) of \' + self.name + \' theory\')\n        counter = 0\n        for f in self.parent_dataset.files:\n            fparam = f.file_parameters\n            ttable = self.tables[f.file_name_short]\n            if line == \'\':\n                ofilename = os.path.splitext(\n                    f.file_full_path)[0] + \'_TH\' + os.path.splitext(\n                        f.file_full_path)[1]\n            else:\n                ofilename = os.path.join(line, f.file_name_short + \'_TH\' + extra_txt + os.path.splitext(\n                        f.file_full_path)[1])\n            # print(""ofilename"", ofilename)\n            # print(\'File: \' + f.file_name_short)\n            fout = open(ofilename, \'w\')\n            k = list(f.file_parameters.keys())\n            k.sort()\n            for i in k:\n                fout.write(i + ""="" + str(f.file_parameters[i]) + "";"")\n            fout.write(\'\\n\')\n            fout.write(\'# Prediction of \' + self.thname + \' Theory\\n\')\n            fout.write(\'# \')\n            k = list(self.parameters.keys())\n            k.sort()\n            for i in k:\n                fout.write(i + \'=\' + str(self.parameters[i].value) + \'; \')\n            fout.write(\'\\n\')\n            fout.write(\'# Date: \' + time.strftime(""%Y-%m-%d %H:%M:%S"") +\n                       \' - User: \' + getpass.getuser() + \'\\n\')\n            k = f.file_type.col_names\n            for i in k:\n                fout.write(i + \'\\t\')\n            fout.write(\'\\n\')\n            for i in range(ttable.num_rows):\n                for j in range(ttable.num_columns):\n                    fout.write(str(ttable.data[i, j]) + \'\\t\')\n                fout.write(\'\\n\')\n            fout.close()\n            counter += 1\n\n        # print information\n        msg = \'Saved %d theory file(s) in ""%s""\' % (counter, line)\n        if CmdBase.mode == CmdMode.GUI:\n            QMessageBox.information(self, \'Saved Theory\', msg)\n        else:\n            print(msg)\n\n    def complete_save(self, text, line, begidx, endidx):\n        """"""Complete the save command""""""\n        return self.complete_cd(text, line, begidx, endidx)\n# SPAN STUFF\n\n    def change_xmin(self, dx, dy):\n        """"""Change the min x value of the span""""""\n        try:\n            self.xmin += dx\n            self.xminline.set_data([self.xmin, self.xmin], [0, 1])\n            self.xrange.set_xy([[self.xmin, 0], [self.xmin, 1], [self.xmax, 1],\n                                [self.xmax, 0], [self.xmin, 0]])\n        except:\n            pass\n\n    def change_xmax(self, dx, dy):\n        """"""Change the max x value of the span""""""\n        try:\n            self.xmax += dx\n            self.xmaxline.set_data([self.xmax, self.xmax], [0, 1])\n            self.xrange.set_xy([[self.xmin, 0], [self.xmin, 1], [self.xmax, 1],\n                                [self.xmax, 0], [self.xmin, 0]])\n        except:\n            pass\n\n    def change_ymin(self, dx, dy):\n        """"""Change the min y value of the span""""""\n        self.ymin += dy\n        self.yminline.set_data([0, 1], [self.ymin, self.ymin])\n        self.yrange.set_xy([[0, self.ymin], [0, self.ymax], [1, self.ymax],\n                            [1, self.ymin], [0, self.ymin]])\n\n    def change_ymax(self, dx, dy):\n        """"""Change the max y value of the span""""""\n        self.ymax += dy\n        self.ymaxline.set_data([0, 1], [self.ymax, self.ymax])\n        self.yrange.set_xy([[0, self.ymin], [0, self.ymax], [1, self.ymax],\n                            [1, self.ymin], [0, self.ymin]])\n\n    def do_xrange(self, line, visible=None):\n        """"""Set/show xrange for fit and shows limits. Arguments: limits of the span. \nWith no arguments: switches ON/OFF the horizontal span. Example: xrange -4 5""""""\n        if visible == None:\n            visible = not self.xrange.get_visible()\n        if (line == """"):\n            """""".. todo:: Set range to current view limits""""""\n            self.xmin, self.xmax = self.ax.get_xlim()\n            self.xminline.set_data([self.xmin, self.xmin], [0, 1])\n            self.xmaxline.set_data([self.xmax, self.xmax], [0, 1])\n            self.xrange.set_xy([[self.xmin, 0], [self.xmin, 1], [self.xmax, 1],\n                                [self.xmax, 0], [self.xmin, 0]])\n            self.xrange.set_visible(visible)\n            self.xminline.set_visible(visible)\n            self.xmaxline.set_visible(visible)\n        else:\n            items = line.split()\n            if len(items) < 2:\n                print(""Not enough parameters"")\n            else:\n                self.xmin = float(items[0])\n                self.xmax = float(items[1])\n                self.xminline.set_data([self.xmin, self.xmin], [0, 1])\n                self.xmaxline.set_data([self.xmax, self.xmax], [0, 1])\n                self.xrange.set_xy([[self.xmin, 0], [self.xmin, 1],\n                                    [self.xmax, 1], [self.xmax,\n                                                     0], [self.xmin, 0]])\n                if (not self.xrange.get_visible()):\n                    self.xrange.set_visible(True)\n                    self.xminline.set_visible(True)\n                    self.xmaxline.set_visible(True)\n        self.do_plot(line)\n\n    def do_yrange(self, line, visible=None):\n        """"""Set/show yrange for fit and shows limits\n\n        With no arguments: switches ON/OFF the vertical span\n\n        Arguments:\n            - line {[ymin ymax]} -- Sets the limits of the span\n        """"""\n        if visible == None:\n            visible = not self.yrange.get_visible()\n        if (line == """"):\n            self.ymin, self.ymax = self.ax.get_ylim()\n            self.yminline.set_data([0, 1], [self.ymin, self.ymin])\n            self.ymaxline.set_data([0, 1], [self.ymax, self.ymax])\n            self.yrange.set_xy([[0, self.ymin], [1, self.ymin], [1, self.ymax],\n                                [0, self.ymax], [0, self.ymin]])\n            self.yrange.set_visible(visible)\n            self.yminline.set_visible(visible)\n            self.ymaxline.set_visible(visible)\n            # print(""Ymin=%g Ymax=%g"" % (self.ymin, self.ymax))\n        else:\n            items = line.split()\n            if len(items) < 2:\n                print(""Not enough parameters"")\n            else:\n                self.ymin = float(items[0])\n                self.ymax = float(items[1])\n                self.yminline.set_data([0, 1], [self.ymin, self.ymin])\n                self.ymaxline.set_data([0, 1], [self.ymax, self.ymax])\n                self.yrange.set_xy([[0, self.ymin], [0, self.ymax],\n                                    [1, self.ymax], [1, self.ymin],\n                                    [0, self.ymin]])\n                if (not self.yrange.get_visible()):\n                    self.yrange.set_visible(True)\n                    self.yminline.set_visible(True)\n                    self.ymaxline.set_visible(True)\n        self.do_plot(line)\n\n    def set_xy_limits_visible(self, xstate=False, ystate=False):\n        """"""Hide the x- and y-range selectors""""""\n        self.xrange.set_visible(xstate)\n        self.xminline.set_visible(xstate)\n        self.xmaxline.set_visible(xstate)\n\n        self.yrange.set_visible(ystate)\n        self.yminline.set_visible(ystate)\n        self.ymaxline.set_visible(ystate)\n\n        if CmdBase.mode == CmdMode.GUI:\n            self.parent_dataset.actionVertical_Limits.setChecked(xstate)\n            self.parent_dataset.actionHorizontal_Limits.setChecked(ystate)\n            self.parent_dataset.set_limit_icon()\n\n# MODES STUFF\n\n    def do_list_theories_Maxwell(self, line):\n        """"""List the theories in the current RepTate instance that provide Maxwell modes""""""\n        apmng = self.parent_dataset.parent_application.parent_manager\n        apmng.do_list_theories_Maxwell()\n\n    def do_copy_modes(self, line):\n        """"""Copy Maxwell modes from another theory""""""\n        apmng = self.parent_dataset.parent_application.parent_manager\n        L, S= apmng.list_theories_Maxwell(th_exclude=self)\n        if line in L.keys():\n            tau, G0, success = L[line]()\n            if not success:\n                self.logger.warning(""Could not get modes successfully"")\n            tauinds = (-tau).argsort()\n            tau = tau[tauinds]\n            G0 = G0[tauinds]\n            success = self.set_modes(tau, G0)\n            if not success:\n                self.logger.warning(""Could not set modes successfully"")\n        else:\n            print(""Theory %s does not exist or does not provide modes""%line)\n\n    def complete_copy_modes(self, text, line, begidx, endidx):\n        """"""Complete the copy_modes command""""""\n        apmng = self.parent_dataset.parent_application.parent_manager\n        L, S= apmng.list_theories_Maxwell(th_exclude=self)\n        L = list(L.keys())\n        if not text:\n            completions = L[:]\n        else:\n            completions = [f for f in L if f.startswith(text)]\n        return completions\n\n    def get_modes(self):\n        """"""Get Maxwell modes from this theory. This function must be rewritten from derived theories""""""\n        tau = np.ones(1)\n        G = np.ones(1)\n        return tau, G, False\n\n    def set_modes(self, tau, G):\n        """"""Set Maxwell modes in this theory. This function must be rewritten from derived theories\nthat provide this functionality.""""""\n        self.logger.info(""set_modes not allowed in this theory (%s)"" % self.thname)\n        return False\n\n    def do_cite(self, line):\n        """"""Print citation information""""""\n        if len(self.citations)>0:\n            for i in range(len(self.citations)):\n                if CmdBase.mode == CmdMode.GUI:\n                    self.Qprint(\'\'\'<b><font color=red>CITE</font>:</b> <a href=""%s"">%s</a><p>\'\'\'%(self.doi[i], self.citations[i]))\n                elif CmdBase.mode == CmdMode.cmdline:\n                    self.Qprint(Fore.RED + \'CITE\' + Fore.RESET + \':%s (\'%self.citations[i] + Fore.CYAN + \'%s\'%self.doi[i] + Fore.RESET + \')\')\n\n    def do_plot(self, line):\n        """"""Call the plot from the parent Dataset""""""\n        self.parent_dataset.do_plot(line)\n\n    def set_param_value(self, name, value):\n        """"""Set the value of a theory parameter""""""\n        p = self.parameters[name]\n        try:\n            if (p.type == ParameterType.real):\n                try:\n                    val = float(value)\n                except ValueError:\n                    return ""Value must be a float"", False\n                if val < p.min_value:\n                    p.value = p.min_value\n                    return \'Value must be greater than %.4g\' % p.min_value, False\n                elif val > p.max_value:\n                    p.value = p.max_value\n                    return \'Value must be smaller than %.4g\' % p.max_value, False\n                else:\n                    p.value = val\n                    return \'\', True\n\n            elif (p.type == ParameterType.integer):\n                try:\n                    val = int(value)  #convert to int\n                except ValueError:\n                    return ""Value must be an integer"", False\n                if val < p.min_value:\n                    p.value = p.min_value\n                    return \'Value must be greater than %d\' % p.min_value, False\n                elif val > p.max_value:\n                    p.value = p.max_value\n                    return \'Value must be smaller than %d\' % p.max_value, False\n                else:\n                    p.value = val\n                    return \'\', True\n\n            elif (p.type == ParameterType.discrete_integer):\n                try:\n                    val = int(value)  #convert to int\n                except ValueError:\n                    return ""Value must be an integer"", False\n                if val in p.discrete_values:\n                    p.value = val\n                    return \'\', True\n                else:\n                    message = ""Values allowed: "" + \', \'.join(\n                        [str(s) for s in p.discrete_values])\n                    print(message)\n                    return message, False\n\n            elif (p.type == ParameterType.discrete_real):\n                try:\n                    val = float(value)\n                except ValueError:\n                    return ""Value must be a float"", False\n                if val in p.discrete_values:\n                    p.value = val\n                    return \'\', True\n                else:\n                    message = ""Values allowed: "" + \', \'.join(\n                        [str(s) for s in p.discrete_values])\n                    print(message)\n                    return message, False\n\n            elif (p.type == ParameterType.boolean):\n                if value in [True, \'true\', \'True\', \'1\', \'t\', \'T\', \'y\', \'yes\']:\n                    p.value = True\n                else:\n                    p.value = False\n                return \'\', True\n\n            elif (p.type == ParameterType.string):\n                p.value = value\n                return \'\' , True\n\n            else:\n                return \'\', False\n\n        except ValueError as e:\n            print(""In set_param_value:"", e)\n            return \'\', False\n\n    def default(self, line):\n        """"""Called when the input command is not recognized\n\n        Called on an input line when the command prefix is not recognized.\n        Check if there is an = sign in the line. If so, it is a parameter change.\n        Else, we execute the line as Python code.""""""\n        if ""="" in line:\n            par = line.split(""="")\n            if (par[0] in self.parameters):\n                self.set_param_value(par[0], par[1])\n            else:\n                print(""Parameter %s not found"" % par[0])\n        elif line in self.parameters.keys():\n            print(self.parameters[line])\n            print(self.parameters[line].__repr__())\n        else:\n            super(Theory, self).default(line)\n\n    def show_theory_extras(self, show):\n        pass\n\n    def do_hide(self, line=\'\'):\n        """"""Hide the theory artists and associated tools""""""\n        if self.active:\n            self.set_xy_limits_visible(False, False)  # hide xrange and yrange\n            for table in self.tables.values():\n                for i in range(table.MAX_NUM_SERIES):\n                    for nx in range(self.parent_dataset.nplots):\n                        table.series[nx][i].set_visible(False)\n            self.show_theory_extras(False)\n            self.active = False\n\n    def set_th_table_visible(self, fname, state):\n        """"""Show/Hide all theory lines related to the file ""fname"" """"""\n        tt = self.tables[fname]\n        for i in range(tt.MAX_NUM_SERIES):\n            for nx in range(self.parent_dataset.nplots):\n                tt.series[nx][i].set_visible(state)\n\n    def do_show(self, line=\'\'):\n        """"""Show theory""""""\n        self.active = True\n        self.set_xy_limits_visible(self.is_xrange_visible,\n                                   self.is_yrange_visible)\n        for fname in self.tables:\n            if fname in self.parent_dataset.inactive_files:\n                return\n            else:\n                tt = self.tables[fname]\n                for i in range(tt.MAX_NUM_SERIES):\n                    for nx in range(self.parent_dataset.nplots):\n                        tt.series[nx][i].set_visible(True)\n        self.show_theory_extras(True)\n        self.parent_dataset.do_plot("""")\n\n    def Qprint(self, msg, end=\'<br>\'):\n        """"""Print a message on the theory log area or on the terminal""""""\n\n        if CmdBase.mode == CmdMode.GUI:\n            if isinstance(msg, list):\n                msg = self.table_as_html(msg)\n            self.print_signal.emit(msg + end)\n        else:\n            if end == \'<br>\':\n                end = \'\\n\'\n            if isinstance(msg, list):\n                msg = self.table_as_ascii(msg)\n            else:\n                msg = msg.replace(\'<br>\', \'\\n\')\n                msg = self.strip_tags(msg)\n            print(msg, end=end)\n\n    def table_as_html(self, tab):\n        header = tab[0]\n        rows = tab[1:]\n        nrows = len(rows)\n        table = \'\'\'<table border=""1"" width=""100%"">\'\'\'\n        # header\n        if not np.all([h == \'\' for h in header]):\n            table += \'<tr>\'\n            table += \'\'.join([\'<th>%s</th>\' % h for h in header])\n            table += \'</tr>\'\n        #data\n        for row in rows:\n            table += \'<tr>\'\n            table += \'\'.join([\'<td>%s</td>\' % d for d in row])\n            table += \'</tr>\'\n        table+=\'\'\'</table><br>\'\'\'\n        return table\n\n    def table_as_ascii(self, tab):\n        text = \'\'\n        for row in tab:\n            text += \' \'.join(row)\n            text += \'\\n\'\n        return text\n\n    def strip_tags(self, html_text):\n        s = MLStripper()\n        s.feed(html_text)\n        return s.get_data()\n\n    def print_qtextbox(self, msg):\n        """"""Print message in the GUI log text box""""""\n        self.thTextBox.moveCursor(QTextCursor.End)\n        self.thTextBox.insertHtml(msg)\n        self.thTextBox.verticalScrollBar().setValue(\n            self.thTextBox.verticalScrollBar().maximum())\n        self.thTextBox.moveCursor(QTextCursor.End)\n\n\n    def get_material_parameters(self):\n        """"""Get theory parameters from materials database""""""\n        try:\n            fparam = self.parent_dataset.files[0].file_parameters\n        except:\n            return False\n        if \'chem\' not in fparam.keys():\n            return False\n        chem = fparam[\'chem\']\n        dbindex = check_chemistry(chem)\n        if dbindex<0:\n            return False\n        get_all_parameters(chem, self, fparam, dbindex)\n        return True\n\n    def get_material_parametersOLD(self):\n        """"""Get theory parameters from materials database""""""\n        if \'chem\' in self.parent_dataset.files[0].file_parameters.keys():\n            chem=self.parent_dataset.files[0].file_parameters[\'chem\']\n            if chem in materials_user_database.keys():\n                for p in self.parameters.keys():\n                    if p in materials_user_database[chem].data.keys():\n                        self.set_param_value(p, materials_user_database[chem].data[p])\n                return True\n            elif chem in materials_database.keys():\n                for p in self.parameters.keys():\n                    if p in materials_database[chem].data.keys():\n                        self.set_param_value(p, materials_database[chem].data[p])\n                return True\n            else:\n                return False\n        else:\n            return False\n\n    def do_tutorial(self, line=""""):\n        """"""Show a short tutorial about the commands in RepTate theories""""""\n        print("""")\n        print(\'Inspect the python scripts in the\' + Fore.RED + \' ""tests"" \' + Fore.RESET + \'folder.\')\n        print(\'Visit the page:\')\n        print(Fore.CYAN + \'https://reptate.readthedocs.io/manual/Applications/All_Tutorials/All_Tutorials.html\' + Fore.RESET)\n        print(""""""\nBasic use:\n=========="""""")\n        print(Fore.RED + ""parameters"" + Fore.RESET)\n        self.do_help(""parameters"")\n        print(Fore.RED + ""par1=val1"" + Fore.RESET)\n        print(""Change the value of parameter par1"")\n        print(Fore.RED + ""calculate"" + Fore.RESET)\n        self.do_help(""calculate"")\n        print(Fore.RED + ""error"" + Fore.RESET)\n        self.do_help(""error"")\n        print(Fore.RED + ""fit"" + Fore.RESET)\n        self.do_help(""fit"")\n        print(Fore.RED + ""xrange"" + Fore.RESET)\n        print(Fore.RED + ""yrange"" + Fore.RESET)\n        self.do_help(""xrange"")\n        print("""")\n'"
RepTate/core/Tool.py,7,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Tool and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2018): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module Tool\n\nModule that defines the basic structure and properties of a Tool.\n\n""""""\nimport numpy as np\n\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import ParameterType\nfrom PyQt5.QtGui import QTextCursor\nfrom PyQt5.QtCore import pyqtSignal\n\nfrom collections import OrderedDict\n\nimport logging\nfrom html.parser import HTMLParser\n\nclass MLStripper(HTMLParser):\n    """"""Remove HTML tags from string""""""\n    def __init__(self):\n        self.reset()\n        self.strict = False\n        self.convert_charrefs= True\n        self.fed = []\n\n    def handle_data(self, d):\n        self.fed.append(d)\n\n    def get_data(self):\n        return \'\'.join(self.fed)\n\nclass Tool(CmdBase):\n    """"""Abstract class to describe a Tool""""""\n\n    toolname = """"\n    """""" toolname {str} -- Tool name """"""\n    description = """"\n    """""" description {str} -- Description of Tool """"""\n    citations = []\n    """""" citations {list of str} -- Articles that should be cited """"""\n    doi = []\n    doc_header = ""Tool commands (type help <topic>):""\n\n    print_signal = pyqtSignal(str)\n\n    def __init__(self, name=""Tool"", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__()\n\n        self.name = name\n        self.parent_application = parent_app\n        self.parameters = (\n            OrderedDict()\n        )  # keep the dictionary key in order for the parameter table\n        self.active = True  # defines if the Tool is plotted\n        self.applytotheory = True  # Do we also apply the tool to the theory?\n\n        # LOGGING STUFF\n        self.logger = logging.getLogger(\n            self.parent_application.logger.name + ""."" + self.name\n        )\n        self.logger.debug(""New "" + self.toolname + "" Tool"")\n        # np.seterr(all=""call"")\n        #np.seterr(all=""ignore"")\n        np.seterrcall(self.write)\n\n        self.do_cite("""")\n\n        if CmdBase.mode == CmdMode.GUI:\n            self.print_signal.connect(\n                self.print_qtextbox\n            )  # Asynchronous print when using multithread\n\n    def write(self, type, flag):\n        """"""Write numpy error logs to the logger""""""\n        self.logger.info(""numpy: %s (flag %s)"" % (type, flag))\n\n    def destructor(self):\n        """"""If the Tool needs to erase some memory in a special way, any\n        child theory must rewrite this funcion""""""\n        pass\n\n    def precmd(self, line):\n        """"""Calculations before the Tool is calculated\n\n        This function could be erased\n        This method is called after the line has been input but before\n        it has been interpreted. If you want to modifdy the input line\n        before execution (for example, variable substitution) do it here.""""""\n        super(Tool, self).precmd(line)\n        return line\n\n    def update_parameter_table(self):\n        """"""Added so that Maxwell modes works in CL. CHECK IF THIS CAN BE REMOVED""""""\n        pass\n\n    def do_parameters(self, line):\n        """"""View the Tool parameters. Several parameters are allowed. With no arguments, show the current values""""""\n        plist = list(self.parameters.keys())\n        plist.sort()\n        print(""%9s   %10s"" % (""Parameter"", ""Value""))\n        print(""=================================="")\n        for p in plist:\n            if self.parameters[p].type == ParameterType.string:\n                formatstring = ""%10s""\n            else:\n                formatstring = ""%10.5g""\n            print(\n                ""%8s = "" % self.parameters[p].name\n                + formatstring % self.parameters[p].value\n            )\n\n    def complete_parameters(self, text, line, begidx, endidx):\n        """"""Complete the names of parameters""""""\n        parameter_names = list(self.parameters.keys())\n        if not text:\n            completions = parameter_names[:]\n        else:\n            completions = [f for f in parameter_names if f.startswith(text)]\n        return completions\n\n    def plot_tool_stuff(self):\n        """"""Special function to plot tool graphical objects""""""\n        pass\n\n    def calculate_all(self, n, x, y, ax=None, color=None, file_parameters=[]):\n        """"""Calculate the tool for all views""""""\n        newxy = []\n        lenx = 1e9\n        for i in range(n):\n            self.Qprint(""<b>Series %d</b>"" % (i + 1))\n            xcopy = x[:, i]\n            ycopy = y[:, i]\n            xcopy, ycopy = self.calculate(xcopy, ycopy, ax, color, file_parameters)\n            newxy.append([xcopy, ycopy])\n            lenx = min(lenx, len(xcopy))\n        x = np.resize(x, (lenx, n))\n        y = np.resize(y, (lenx, n))\n        for i in range(n):\n            x[:, i] = np.resize(newxy[i][0], lenx)\n            y[:, i] = np.resize(newxy[i][1], lenx)\n        return x, y\n\n    def calculate(self, x, y, ax=None, color=None, file_parameters=[]):\n        return x, y\n\n    def clean_graphic_stuff(self):\n        pass\n\n    # SAVE Tool STUFF (IS THIS NEEDED?)\n\n    # def do_save(self, line):\n    # """"""Save the results from all Tool calculations to file?\n\n    # [description]\n\n    # Arguments:\n    # - line {[type]} -- [description]\n    # """"""\n    # self.Qprint(\'Saving calculations(s) of \' + self.name + \' Tool\')\n    # for f in self.parent_dataset.files:\n    # fparam = f.file_parameters\n    # ttable = self.tables[f.file_name_short]\n    # if line == \'\':\n    # ofilename = os.path.splitext(\n    # f.file_full_path)[0] + \'_TH\' + os.path.splitext(\n    # f.file_full_path)[1]\n    # else:\n    # ofilename = os.path.join(line, f.file_name_short + \'_Tool\' + os.path.splitext(\n    # f.file_full_path)[1])\n    # # print(""ofilename"", ofilename)\n    # # print(\'File: \' + f.file_name_short)\n    # fout = open(ofilename, \'w\')\n    # k = list(f.file_parameters.keys())\n    # k.sort()\n    # for i in k:\n    # fout.write(i + ""="" + str(f.file_parameters[i]) + "";"")\n    # fout.write(\'\\n\')\n    # fout.write(\'# Results of \' + self.toolname + \' Tool\\n\')\n    # fout.write(\'# \')\n    # k = list(self.parameters.keys())\n    # k.sort()\n    # for i in k:\n    # fout.write(i + \'=\' + str(self.parameters[i].value) + \'; \')\n    # fout.write(\'\\n\')\n    # fout.write(\'# Date: \' + time.strftime(""%Y-%m-%d %H:%M:%S"") +\n    # \' - User: \' + getpass.getuser() + \'\\n\')\n    # k = f.file_type.col_names\n    # for i in k:\n    # fout.write(i + \'\\t\')\n    # fout.write(\'\\n\')\n    # for i in range(ttable.num_rows):\n    # for j in range(ttable.num_columns):\n    # fout.write(str(ttable.data[i, j]) + \'\\t\')\n    # fout.write(\'\\n\')\n    # fout.close()\n\n    # SPAN STUFF\n\n    def do_activate(self, line):\n        """"""Enable/disable the Tool""""""\n        self.active = not self.active\n\n    def do_applytotheory(self, line):\n        """"""Apply the tool to the theory data""""""\n        self.applytotheory = not self.applytotheory\n\n    def do_cite(self, line):\n        """"""Print citation information """"""\n        if len(self.citations) > 1:\n            for i in range(len(self.citations)):\n                self.Qprint(\n                    """"""<b><font color=red>CITE</font>:</b> <a href=""%s"">%s</a><p>""""""\n                    % (self.doi[i], self.citations[i])\n                )\n\n    def do_plot(self, line=""""):\n        """"""Update plot""""""\n        self.parent_application.update_all_ds_plots()\n\n    def set_param_value(self, name, value):\n        """"""Set the value of a parameter of the tool""""""\n        p = self.parameters[name]\n        try:\n            if p.type == ParameterType.real:\n                try:\n                    val = float(value)\n                except ValueError:\n                    return ""Value must be a float"", False\n                if val < p.min_value:\n                    p.value = p.min_value\n                    return ""Value must be greater than %.4g"" % p.min_value, False\n                elif val > p.max_value:\n                    p.value = p.max_value\n                    return ""Value must be smaller than %.4g"" % p.max_value, False\n                else:\n                    p.value = val\n                    return """", True\n\n            elif p.type == ParameterType.integer:\n                try:\n                    val = int(value)  # convert to int\n                except ValueError:\n                    return ""Value must be an integer"", False\n                if val < p.min_value:\n                    p.value = p.min_value\n                    return ""Value must be greater than %d"" % p.min_value, False\n                elif val > p.max_value:\n                    p.value = p.max_value\n                    return ""Value must be smaller than %d"" % p.max_value, False\n                else:\n                    p.value = val\n                    return """", True\n\n            elif p.type == ParameterType.discrete_integer:\n                try:\n                    val = int(value)  # convert to int\n                except ValueError:\n                    return ""Value must be an integer"", False\n                if val in p.discrete_values:\n                    p.value = val\n                    return """", True\n                else:\n                    message = ""Values allowed: "" + "", "".join(\n                        [str(s) for s in p.discrete_values]\n                    )\n                    print(message)\n                    return message, False\n\n            elif p.type == ParameterType.discrete_real:\n                try:\n                    val = float(value)\n                except ValueError:\n                    return ""Value must be a float"", False\n                if val in p.discrete_values:\n                    p.value = val\n                    return """", True\n                else:\n                    message = ""Values allowed: "" + "", "".join(\n                        [str(s) for s in p.discrete_values]\n                    )\n                    print(message)\n                    return message, False\n\n            elif p.type == ParameterType.boolean:\n                if value in [True, ""true"", ""True"", ""1"", ""t"", ""T"", ""y"", ""yes""]:\n                    p.value = True\n                else:\n                    p.value = False\n                return """", True\n            elif p.type == ParameterType.string:\n                p.value = value\n                return """", True\n\n            else:\n                return """", False\n\n        except ValueError as e:\n            print(""In set_param_value:"", e)\n            return """", False\n\n    def default(self, line):\n        """"""Called when the input command is not recognized\n\n        Called on an input line when the command prefix is not recognized.\n        Check if there is an = sign in the line. If so, it is a parameter change.\n        Else, we execute the line as Python code.""""""\n        if ""="" in line:\n            par = line.split(""="")\n            if par[0] in self.parameters:\n                self.set_param_value(par[0], par[1])\n                self.do_plot("""")\n            else:\n                print(""Parameter %s not found"" % par[0])\n        elif line in self.parameters.keys():\n            print(self.parameters[line])\n            print(self.parameters[line].__repr__())\n        else:\n            super(Tool, self).default(line)\n\n    def Qprint(self, msg, end=""<br>""):\n        """"""Print a message on the Tool info area""""""\n        if CmdBase.mode == CmdMode.GUI:\n            if isinstance(msg, list):\n                msg = self.table_as_html(msg)\n            self.print_signal.emit(msg + end)\n        else:\n            if end == ""<br>"":\n                end = ""\\n""\n            if isinstance(msg, list):\n                msg = self.table_as_ascii(msg)\n            else:\n                msg = msg.replace(""<br>"", ""\\n"")\n                msg = self.strip_tags(msg)\n            print(msg, end=end)\n\n    def table_as_html(self, tab):\n        header = tab[0]\n        rows = tab[1:]\n        nrows = len(rows)\n        table = """"""<table border=""1"" width=""100%"">""""""\n        # header\n        table += ""<tr>""\n        table += """".join([""<th>%s</th>"" % h for h in header])\n        table += ""</tr>""\n        # data\n        for row in rows:\n            table += ""<tr>""\n            table += """".join([""<td>%s</td>"" % d for d in row])\n            table += ""</tr>""\n        table += """"""</table><br>""""""\n        return table\n\n    def table_as_ascii(self, tab):\n        text = """"\n        for row in tab:\n            text += "" "".join(row)\n            text += ""\\n""\n        return text\n\n    def strip_tags(self, html_text):\n        s = MLStripper()\n        s.feed(html_text)\n        return s.get_data()\n\n    def print_qtextbox(self, msg):\n        """"""Print message in the GUI log text box""""""\n        self.toolTextBox.moveCursor(QTextCursor.End)\n        self.toolTextBox.insertHtml(msg)\n        self.toolTextBox.verticalScrollBar().setValue(\n            self.toolTextBox.verticalScrollBar().maximum()\n        )\n        self.toolTextBox.moveCursor(QTextCursor.End)\n\n    def do_tutorial(self, line=""""):\n        """"""Show a short tutorial about the commands in RepTate tools""""""\n        print("""")\n        print(\n            ""Inspect the python scripts in the""\n            + Fore.RED\n            + \' ""tests"" \'\n            + Fore.RESET\n            + ""folder.""\n        )\n        print(""Visit the page:"")\n        print(\n            Fore.CYAN\n            + ""https://reptate.readthedocs.io/manual/Applications/All_Tutorials/All_Tutorials.html""\n            + Fore.RESET\n        )\n        print(\n            """"""\nBasic use:\n==========""""""\n        )\n        print(Fore.RED + ""parameters"" + Fore.RESET)\n        self.do_help(""parameters"")\n        print(Fore.RED + ""par1=val1"" + Fore.RESET)\n        print(""Change the value of parameter par1"")\n        print(Fore.RED + ""activate"" + Fore.RESET)\n        self.do_help(""activate"")\n        print("""")\n'"
RepTate/core/View.py,0,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module View\n\nModule that defines the basic properties of a View, that will be used to represent\nthe data graphically.\n\n""""""\nimport enum\n\n\nclass ViewMode(enum.Enum):\n    """"""Defines how to show the experimental/theoretical data view\n    TO BE DONE...\n    \n    Parameters can be:\n        - symbol: Show symbols (default for experimental data -- files in the dataset)\n        - line: Show lines (default for theories)\n        - bar: Show bars \n    """"""\n\n    symbol = 0\n    line = 1\n    bar = 2\n\n\nclass View(object):\n    """"""Abstract class to describe a view""""""\n\n    def __init__(\n        self,\n        name="""",\n        description="""",\n        x_label="""",\n        y_label="""",\n        x_units="""",\n        y_units="""",\n        log_x=False,\n        log_y=False,\n        view_proc=None,\n        n=1,\n        snames=[],\n        inverse_view_proc=None,\n        index=0,\n        with_thline=True,\n        filled=False,\n        viewmode_data=ViewMode.symbol,\n        viewmode_theory=ViewMode.line,\n    ):\n        """"""**Constructor**\n        \n        Keyword Arguments:\n            - name {str} -- View name\n            - description {str} -- Description of the view\n            - x_label {str} -- Label of the x axis\n            - y_label {str} -- Label of the y axis\n            - x_units {str} -- Default units of the x axis\n            - y_units {str} -- Default units of the y axis\n            - log_x {bool} -- X axis logarithmic? (default: {False})\n            - log_y {bool} -- Y axis logarithmic? (default: {False})\n            - view_proc {func} -- Function that creates the X, Y1, Y2 values of the view (default: {None})\n            - inverse_view_proc {func} -- Function that inverses the view: From the n values of the view, returns the data table values (default: {None})\n            - n {int} -- Number of series that the view represents (default: {1})\n            - snames {list of str} -- Names of the series represented by the view\n            - with_thline {bool} -- if True, plot the theory with lines, else use symbols\n            - filled {bool} -- if True, use filled symbols (when with_thline=False)\n        """"""\n        self.name = name\n        self.description = description\n        self.x_label = x_label\n        self.y_label = y_label\n        self.x_units = x_units\n        self.y_units = y_units\n        self.log_x = log_x\n        self.log_y = log_y\n        self.view_proc = view_proc\n        self.inverse_view_proc = inverse_view_proc\n        self.n = n\n        self.snames = snames\n        self.with_thline = with_thline\n        self.filled = filled\n        self.viewmode_data = viewmode_data\n        self.viewmode_theory = viewmode_theory\n'"
RepTate/core/__init__.py,0,b''
RepTate/gui/DataSetWidget.py,0,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module DataSetWidget\n\nModule that defines the a QTreeWidget that allows to select nothing.\n\n""""""\nfrom PyQt5.QtCore import Qt\nfrom PyQt5.QtWidgets import QTreeWidget\n\n\nclass DataSetWidget(QTreeWidget):\n    """"""Subclass of QTreeWidget\n    \n    Subclass of QTreeWidget that allows to select nothing in the DataSet \n    by clicking in the white area of the DataSet, and allows to delete a data table item\n    """"""\n\n    def __init__(self, parent=None):\n        """"""**Constructor**""""""\n        super().__init__(parent)\n        self.parent_dataset = parent\n\n    def mousePressEvent(self, event):\n        """"""Process mouse""""""\n        self.clearSelection()\n        QTreeWidget.mousePressEvent(self, event)\n\n    def keyPressEvent(self, event):\n        """"""Process key""""""\n        if event.key() == Qt.Key_Backspace or event.key() == Qt.Key_Delete:\n            self.delete()\n        else:\n            QTreeWidget.keyPressEvent(self, event)\n\n    def delete(self):\n        """"""Delete the currently selected items""""""\n        selection = self.selectedItems()\n        if selection == []:\n            return\n        index_to_rm = []\n        for item in selection:\n            index_to_rm.append(self.indexOfTopLevelItem(item))  # save indices to delete\n            file_name_short = item.text(0)\n\n            for file in self.parent_dataset.files:  # remove files and lines\n                if file.file_name_short == file_name_short:\n                    dt = file.data_table\n                    for i in range(dt.MAX_NUM_SERIES):\n                        for nx in range(self.parent_dataset.nplots):\n                            self.parent_dataset.parent_application.axarr[\n                                nx\n                            ].lines.remove(dt.series[nx][i])\n                    self.parent_dataset.files.remove(file)\n                    break\n\n            for (\n                th\n            ) in (\n                self.parent_dataset.theories.values()\n            ):  # remove corresponding theory lines\n                try:\n                    tt = th.tables[file_name_short]\n                    for i in range(tt.MAX_NUM_SERIES):\n                        for nx in range(self.parent_dataset.nplots):\n                            self.parent_dataset.parent_application.axarr[\n                                nx\n                            ].lines.remove(tt.series[nx][i])\n                    del th.tables[file_name_short]\n                except KeyError:\n                    pass\n        for ind in index_to_rm:\n            self.takeTopLevelItem(ind)  # remove the table widget\n\n        if self.topLevelItemCount() == 0:\n            self.parent_dataset.parent_application.dataset_actions_disabled(\n                True\n            )  # desactivate buttons\n'"
RepTate/gui/DataSetWidgetItem.py,0,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module DataSetWidgetItem\n\nModule that defines the a DataSetWidgetItem that allows to sort items in the DataSet\n\n""""""\nfrom PyQt5.QtWidgets import QTreeWidgetItem\n\n\nclass DataSetWidgetItem(QTreeWidgetItem):\n    """"""Subclass of QTreeWidgetItem for dataset items\n    \n    Each item of a dataset is a wrapper of the QTreeWidgetItem\n    It contains the necessary tables and types and a redefinition of the \'<\' operator\n    """"""\n\n    series = 0\n\n    def __init__(self, parent=None):\n        """"""**Constructor**""""""\n        QTreeWidgetItem.__init__(self, parent)\n\n    def __init__(self, parent=None, itemlist=[], type=0):\n        """"""**Constructor**""""""\n        QTreeWidgetItem.__init__(self, parent, itemlist, type)\n\n    def __init__(\n        self, parent=None, itemlist=[], type=0, file_name_short=""dummy"", file_type=None\n    ):\n        """"""**Constructor**""""""\n        QTreeWidgetItem.__init__(self, parent, itemlist, type)\n        # self.file_name_short = file_name_short\n        # Table.__init__(self, file_name_short, file_type)\n\n    def __lt__(self, otherItem):\n        """"""Needed for sorting purposes\n        \n        Re-implement the less-than operator to sort the columns based on the float\n        value of the cells, not the strig value""""""\n        column = self.treeWidget().sortColumn()\n        try:\n            return float(self.text(column)) > float(otherItem.text(column))\n        except ValueError:\n            return self.text(column) > otherItem.text(column)\n'"
RepTate/gui/ImportExcelWindow.py,3,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module for importing data form Excel spreadsheets\n\n""""""\nimport sys\nimport os\nimport numpy as np\nfrom PyQt5.uic import loadUiType\nfrom PyQt5.QtCore import Qt, QItemSelectionModel\nfrom PyQt5.QtWidgets import (\n    QApplication,\n    QFileDialog,\n    QTableWidgetItem,\n    QTableWidget,\n    QAbstractItemView,\n    QMessageBox,\n)\nfrom openpyxl import load_workbook\nimport xlrd\nimport RepTate\n\nif getattr(sys, \'frozen\', False):\n    # If the application is run as a bundle, the PyInstaller bootloader\n    # extends the sys module by a flag frozen=True and sets the app \n    # path into variable _MEIPASS\'.\n    PATH = sys._MEIPASS\nelse:\n    PATH = os.path.dirname(os.path.abspath(__file__))\nUi_ImportExcelMainWindow, QMainWindowImportExcel = loadUiType(\n    os.path.join(PATH, ""import_excel_dialog.ui"")\n)\n\n\nclass ImportExcelWindow(QMainWindowImportExcel, Ui_ImportExcelMainWindow):\n    list_AZ = [\n        ""A"",\n        ""B"",\n        ""C"",\n        ""D"",\n        ""E"",\n        ""F"",\n        ""G"",\n        ""H"",\n        ""I"",\n        ""J"",\n        ""K"",\n        ""L"",\n        ""M"",\n        ""N"",\n        ""O"",\n        ""P"",\n        ""Q"",\n        ""R"",\n        ""S"",\n        ""T"",\n        ""U"",\n        ""V"",\n        ""W"",\n        ""X"",\n        ""Y"",\n        ""Z"",\n        ""AA"",\n        ""AB"",\n        ""AC"",\n        ""AD"",\n        ""AE"",\n        ""AF"",\n        ""AG"",\n        ""AH"",\n        ""AI"",\n        ""AJ"",\n        ""AK"",\n        ""AL"",\n        ""AM"",\n        ""AN"",\n        ""AO"",\n        ""AP"",\n        ""AQ"",\n        ""AR"",\n        ""AS"",\n        ""AT"",\n        ""AU"",\n        ""AV"",\n        ""AW"",\n        ""AX"",\n        ""AY"",\n        ""AZ"",\n        ""BA"",\n        ""BB"",\n        ""BC"",\n        ""BD"",\n        ""BE"",\n        ""BF"",\n        ""BG"",\n        ""BH"",\n        ""BI"",\n        ""BJ"",\n        ""BK"",\n        ""BL"",\n        ""BM"",\n        ""BN"",\n        ""BO"",\n        ""BP"",\n        ""BQ"",\n        ""BR"",\n        ""BS"",\n        ""BT"",\n        ""BU"",\n        ""BV"",\n        ""BW"",\n        ""BX"",\n        ""BY"",\n        ""BZ"",\n    ]\n    MAX_ROW = 100\n    MAX_COL = len(list_AZ)\n\n    def __init__(self, parent=None, ftype=None):\n        super().__init__()\n        self.setupUi(self)\n        # self.show()\n        self.filepath = """"\n        self.dir_start = os.path.join(RepTate.root_dir, ""data"")\n        self.is_xlsx = True\n        self.wb = None\n        self.sheet = None\n        self.max_row = 0\n        self.nskip = 0\n        self.max_col = 0\n        self.select_file_tb.clicked.connect(self.handle_get_file)\n        self.skip_sb.valueChanged.connect(self.handle_nskip_changed)\n        self.qtabs.currentChanged.connect(self.handle_tab_changed)\n        self.col1_cb.activated.connect(self.handle_col1_cb_activated)\n        self.col2_cb.activated.connect(self.handle_col2_cb_activated)\n        self.col3_cb.activated.connect(self.handle_col3_cb_activated)\n\n        self.col_names = ftype.col_names\n        self.col_units = ftype.col_units\n        self.ncol = len(self.col_names)\n        self.file_param = ftype.basic_file_parameters\n        self.populate_file_param(self.file_param)\n        self.update_cols_cb()\n\n    def handle_col1_cb_activated(self):\n        if self.wb == None:\n            return\n        sheet = self.qtabs.tabText(self.qtabs.currentIndex())\n        table, selected_idx = self.qtables[sheet]\n        selected_idx[0] = self.col1_cb.currentIndex()\n        self.qtables[sheet] = [table, selected_idx]\n        self.update_data_preview_table()\n\n    def handle_col2_cb_activated(self):\n        if self.wb == None:\n            return\n        sheet = self.qtabs.tabText(self.qtabs.currentIndex())\n        table, selected_idx = self.qtables[sheet]\n        selected_idx[1] = self.col2_cb.currentIndex()\n        self.qtables[sheet] = [table, selected_idx]\n        self.update_data_preview_table()\n\n    def handle_col3_cb_activated(self):\n        if self.wb == None:\n            return\n        sheet = self.qtabs.tabText(self.qtabs.currentIndex())\n        table, selected_idx = self.qtables[sheet]\n        selected_idx[2] = self.col3_cb.currentIndex()\n        self.qtables[sheet] = [table, selected_idx]\n        self.update_data_preview_table()\n\n    def update_cols_cb(self):\n        self.col1_cb.clear()\n        self.col2_cb.clear()\n        self.col1.setText(""Select Column <b>%s [%s]</b>"" % (self.col_names[0], self.col_units[0]))\n        self.col2.setText(""Select Column <b>%s [%s]</b>"" % (self.col_names[1], self.col_units[1]))\n        self.col1_cb.addItems(self.list_AZ[: self.max_col])\n        self.col2_cb.addItems(self.list_AZ[: self.max_col])\n        self.col2_cb.setCurrentIndex(1)\n        if self.ncol > 2:\n            self.col3_cb.clear()\n            self.col3.setText(""Select Column <b>%s [%s]</b>"" % (self.col_names[2], self.col_units[2]))\n            self.col3_cb.addItems(self.list_AZ[: self.max_col])\n            self.col3_cb.setCurrentIndex(2)\n        else:\n            self.col3.hide()\n            self.col3_cb.hide()\n\n    def handle_tab_changed(self, idx):\n        table, selected_idx = self.qtables[self.qtabs.tabText(idx)]\n        ncols = table.columnCount()\n        self.col1_cb.clear()\n        self.col2_cb.clear()\n        self.col1_cb.addItems(self.list_AZ[:ncols])\n        self.col2_cb.addItems(self.list_AZ[:ncols])\n        self.col1_cb.setCurrentIndex(selected_idx[0])\n        self.col2_cb.setCurrentIndex(selected_idx[1])\n        if self.ncol > 2:\n            self.col3_cb.clear()\n            self.col3_cb.addItems(self.list_AZ[:ncols])\n            self.col3_cb.setCurrentIndex(selected_idx[2])\n        self.update_data_preview_table()\n\n    def handle_nskip_changed(self):\n        if self.wb == None:\n            return\n        self.nskip = self.skip_sb.value()\n        self.update_data_preview_table()\n\n    def col2num(self, col):\n        num = 0\n        for c in col:\n            num = num * 26 + (ord(c) - ord(""A"")) + 1\n        return num\n\n    def update_data_preview_table(self):\n        idx = self.qtabs.currentIndex()\n        sname = self.qtabs.tabText(idx)\n        col1 = self.col2num(self.col1_cb.currentText()) - 1\n        col2 = self.col2num(self.col2_cb.currentText()) - 1\n        if self.ncol > 2:\n            col3 = self.col2num(self.col3_cb.currentText()) - 1\n        table, _ = self.qtables[sname]\n        nrows = table.rowCount()\n        ncols = table.columnCount()\n        header_labels = [self.list_AZ[i] for i in range(ncols)]\n        header_labels[col1] = self.col_names[0]\n        header_labels[col2] = self.col_names[1]\n        indexes = [table.model().index(k, col1) for k in range(self.nskip, nrows)]\n        indexes += [table.model().index(k, col2) for k in range(self.nskip, nrows)]\n        if self.ncol > 2:\n            indexes += [table.model().index(k, col3) for k in range(self.nskip, nrows)]\n            header_labels[col3] = self.col_names[2]\n        table.setHorizontalHeaderLabels(header_labels)\n        flag = QItemSelectionModel.Select\n        table.selectionModel().clearSelection()\n        [table.selectionModel().select(i, flag) for i in indexes]\n        table.setFocus()\n\n    def get_data(self):\n        x = []\n        y = []\n        z = []\n        if self.wb == None:\n            msg = ""Could not import data. Select an Excel file first.""\n            return {""error"": True, ""errmsg"": msg}\n        flag_nan = False\n        col1 = self.col2num(self.col1_cb.currentText()) - 1\n        col2 = self.col2num(self.col2_cb.currentText()) - 1\n        if self.ncol > 2:\n            col3 = self.col2num(self.col3_cb.currentText()) - 1\n        sname = self.qtabs.tabText(self.qtabs.currentIndex())\n        if self.is_xlsx:\n            sheet = self.wb[sname]\n            max_row = sheet.max_row\n            max_col = sheet.max_column\n        else:\n            sheet = self.wb.sheet_by_name(sname)\n            max_row = sheet.nrows\n            max_col = sheet.ncols\n        \n        if max_col < min(3, self.ncol):\n            # not enough data columns in the spreadsheet tab\n            # min(3, ) as the Excel import is configured for 3 data columns max.  \n            msg = ""Could not import data. Need %d data columns and this spreadsheed has only %d column(s)"" %(self.ncol, max_col)\n            return {""error"": True, ""errmsg"": msg}\n\n        for k in range(self.nskip, max_row):\n            # x values\n            if self.is_xlsx:\n                cellx = sheet.cell(row=k + 1, column=col1 + 1)\n            else:\n                cellx = sheet.cell(k, col1)\n            if hasattr(cellx, ""value""):\n                valx = cellx.value\n            else:\n                valx = """"\n            try:\n                x.append(float(valx))\n            except (ValueError, TypeError):\n                x.append(np.nan)\n                flag_nan = True\n\n            # y values\n            if self.is_xlsx:\n                celly = sheet.cell(row=k + 1, column=col2 + 1)\n            else:\n                celly = sheet.cell(k, col2)\n            if hasattr(celly, ""value""):\n                valy = celly.value\n            else:\n                valy = """"\n            try:\n                y.append(float(valy))\n            except (ValueError, TypeError):\n                y.append(np.nan)\n                flag_nan = True\n\n            if len(self.col_names) > 2:\n                # z values\n                if self.is_xlsx:\n                    cellz = sheet.cell(row=k + 1, column=col3 + 1)\n                else:\n                    cellz = sheet.cell(k, col3)\n                if hasattr(cellz, ""value""):\n                    valz = cellz.value\n                else:\n                    valz = """"\n                try:\n                    z.append(float(valz))\n                except (ValueError, TypeError):\n                    z.append(np.nan)\n                    flag_nan = True\n        res_dic = {\n            ""error"": False,\n            ""file"": self.selected_file_label.text(),\n            ""sheet"": sname,\n            ""x"": x,\n            ""y"": y,\n            ""z"": z,\n            ""flag_nan"": flag_nan,\n            ""col1"": self.col1_cb.currentText(),\n            ""col2"": self.col2_cb.currentText(),\n        }\n        if len(self.col_names) > 2:\n            res_dic[""col3""] = self.col3_cb.currentText()\n        return res_dic\n\n    def populate_file_param(self, params):\n        self.file_param_txt.clear()\n        txt = """"\n        for p in params:\n            txt += ""%s=0;"" % p\n        self.file_param_txt.setText(txt)\n\n    def handle_get_file(self):\n        # file browser window\n        options = QFileDialog.Options()\n        dilogue_name = ""Select Excel Data File""\n        ext_filter = ""Excel file (*.xls *xlsx)""\n        selected_file, _ = QFileDialog.getOpenFileName(\n            self, dilogue_name, self.dir_start, ext_filter, options=options\n        )\n        self.handle_read_new_file(selected_file)\n\n    def handle_read_new_file(self, path):\n        if not os.path.isfile(path):\n            return\n        self.dir_start = os.path.dirname(path)\n        self.qtabs.blockSignals(True)\n        self.clear_tabs()\n        fname = os.path.basename(path)\n        self.is_xlsx = os.path.splitext(path)[-1] == "".xlsx""\n        self.selected_file_label.setText(fname)\n        self.filepath = path\n        try:\n            if self.is_xlsx:\n                self.wb = load_workbook(filename=self.filepath, data_only=True)\n                self.sheet_names = self.wb.sheetnames\n            else:\n                self.wb = xlrd.open_workbook(self.filepath)\n                self.sheet_names = self.wb.sheet_names()\n        except:\n            # password protected?\n            QMessageBox.warning(\n                self, ""Open Excel File"", ""Error: Could not read the Excel file.""\n            )\n            return\n        self.qtables = {}\n\n        for sname in self.sheet_names:\n            if self.is_xlsx:\n                sheet = self.wb[sname]\n                max_row = sheet.max_row\n                max_col = sheet.max_column\n            else:\n                sheet = self.wb.sheet_by_name(sname)\n                max_row = sheet.nrows\n                max_col = sheet.ncols\n            max_row = min(max_row, self.MAX_ROW)\n            max_col = min(max_col, self.MAX_COL)\n            qsheet = QTableWidget(max_row, max_col, self)\n            qsheet.setSelectionMode(QAbstractItemView.NoSelection)\n            for i in range(max_row):\n                for j in range(max_col):\n                    if self.is_xlsx:\n                        cell = sheet.cell(row=i + 1, column=j + 1)\n                    else:\n                        cell = sheet.cell(i, j)\n                    if hasattr(cell, ""value""):\n                        val = cell.value\n                    else:\n                        val = """"\n                    item = QTableWidgetItem(""%s"" % val)\n                    item.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)\n                    qsheet.setItem(i, j, item)\n            self.qtabs.addTab(qsheet, sname)\n            selected_cols = [0, 1, 2]\n            self.qtables[sname] = [qsheet, selected_cols]\n        self.qtabs.blockSignals(False)\n        self.qtabs.blockSignals(False)\n        self.qtabs.setCurrentIndex(0)\n        self.handle_tab_changed(0)\n\n    def clear_tabs(self):\n        for _ in range(self.qtabs.count()):\n            w = self.qtabs.widget(0)\n            self.qtabs.removeTab(0)\n            del w\n        self.qtables = {}\n        self.skip_sb.blockSignals(True)\n        self.skip_sb.setValue(0)\n        self.skip_sb.blockSignals(False)\n        self.nskip = 0\n\n    def dragEnterEvent(self, e):\n        if e.mimeData().hasFormat(""text/uri-list""):\n            e.accept()\n        else:\n            e.ignore()\n\n    def dropEvent(self, e):\n        path = e.mimeData().urls()[0].toLocalFile()\n        if (\n            os.path.splitext(path)[-1] == "".xls""\n            or os.path.splitext(path)[-1] == "".xlsx""\n        ):\n            self.handle_read_new_file(path)\n        else:\n            pass\n            # print(""not a readable file"")\n\n\nif __name__ == ""__main__"":\n    app = QApplication(sys.argv)\n    GUI = Window()\n    sys.exit(app.exec_())\n'"
RepTate/gui/ImportFromPastedWindow.py,5,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module to import pasted data\n\n""""""\nimport sys\nimport os\nimport io\nimport numpy as np\nfrom PyQt5.uic import loadUiType\nfrom PyQt5.QtWidgets import QApplication\nimport RepTate\n\nif getattr(sys, ""frozen"", False):\n    # If the application is run as a bundle, the PyInstaller bootloader\n    # extends the sys module by a flag frozen=True and sets the app\n    # path into variable _MEIPASS\'.\n    PATH = sys._MEIPASS\nelse:\n    PATH = os.path.dirname(os.path.abspath(__file__))\nUi_ImportPastedMainWindow, QMainWindowImportPasted = loadUiType(\n    os.path.join(PATH, ""import_from_pasted_dialog.ui"")\n)\n\n\nclass ImportFromPastedWindow(QMainWindowImportPasted, Ui_ImportPastedMainWindow):\n    def __init__(self, parent=None, ftype=None):\n        super().__init__()\n        self.setupUi(self)\n        self.col_names = ftype.col_names\n        self.col_units = ftype.col_units\n        self.file_param = ftype.basic_file_parameters\n        self.num_cols = len(self.col_names)\n        txt = """"\n        if self.file_param:\n            txt += (\n                ""Parameters values describing the data can be added to the first line as:<br><b>%s=val;</b><br>""\n                % (""=val;"".join(self.file_param))\n            )\n        col_labels = [\n            ""%s [%s]"" % (name, unit)\n            for name, unit in zip(self.col_names, self.col_units)\n        ]\n        txt += ""The first <b>%d</b> columns should contain values for:<br><b>%s</b>"" % (\n            len(self.col_names),\n            "", "".join(col_labels),\n        )\n        self.label_columns.setText(txt)\n\n    def set_fname_dialog(self, fname):\n        self.file_name_label.setText(fname)\n\n    def get_data(self):\n        pasted_txt = self.paste_box.toPlainText()\n        flag_nan = False\n        is_first_line = True\n        first_line_has_param = False\n        all_data = np.empty((0, self.num_cols))\n        param_read = {}\n        buf = io.StringIO(pasted_txt)\n        for line in buf:\n            if is_first_line:\n                is_first_line = False\n                params_set = line.split("";"")\n                for param in params_set:\n                    p = param.split(""="")\n                    if len(p) > 1:\n                        pname = p[0]\n                        pval = p[1]\n                        if pname in self.file_param:\n                            try:\n                                param_read[pname] = float(pval)\n                                first_line_has_param = True\n                            except ValueError:\n                                pass\n                if first_line_has_param:\n                    continue\n\n            vals = line.split()\n            data_row = []\n            for i in range(self.num_cols):\n                try:\n                    data_row.append(float(vals[i]))\n                except (ValueError, IndexError):\n                    data_row.append(np.nan)\n\n            if all(val is np.nan for val in data_row):\n                # Line contain no values. Skip this line.\n                continue\n            else:\n                if any(val is np.nan for val in data_row):\n                    flag_nan = True\n                all_data = np.vstack([all_data, data_row])\n        x = all_data[:, 0]\n        y = all_data[:, 1]\n        if self.num_cols > 2:\n            z = all_data[:, 2]\n        else:\n            z = []\n        if self.num_cols > 3:\n            z2 = all_data[:, 3]\n        else:\n            z2 = []\n\n        return {\n            ""nrows"": len(all_data),\n            ""flag_nan"": flag_nan,\n            ""param_read"": param_read,\n            ""fname"": self.file_name_label.text(),\n            ""x"": x,\n            ""y"": y,\n            ""z"": z,\n            ""z2"": z2,\n        }\n\n\nif __name__ == ""__main__"":\n    app = QApplication(sys.argv)\n    sys.exit(app.exec_())\n'"
RepTate/gui/QAboutReptate.py,0,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module QAboutReptate\n\nModule that defines the About window.\n\n""""""\nimport sys\nfrom os.path import dirname, join, abspath\nfrom PyQt5.QtWidgets import QDialog\nfrom PyQt5.uic import loadUiType\n\nif getattr(sys, \'frozen\', False):\n    # If the application is run as a bundle, the PyInstaller bootloader\n    # extends the sys module by a flag frozen=True and sets the app \n    # path into variable _MEIPASS\'.\n    PATH = sys._MEIPASS\nelse:\n    PATH = dirname(abspath(__file__))\nUi_AboutReptateWindow, QDialog = loadUiType(join(PATH, ""AboutDialog.ui""))\n\n\nclass AboutWindow(QDialog, Ui_AboutReptateWindow):\n    """"""About window in the GUI""""""\n\n    def __init__(self, parent, version, text):\n        """"""**Constructor**""""""\n        super(AboutWindow, self).__init__(parent)\n        self.setupUi(self)\n        self.setWindowTitle(version)\n        self.label.setText(text)\n'"
RepTate/gui/QApplicationManager.py,9,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module QApplicationManager\n\nModule for the main Graphical User Interface of RepTate. It is the GUI counterpart of\nApplicationManager.\n\n""""""\n#import logging\nimport sys\nimport os\nfrom os.path import dirname, join, abspath, join, isfile, basename\nfrom PyQt5.uic import loadUiType\nfrom PyQt5.QtGui import QIcon, QDesktopServices, QTextCursor\nfrom PyQt5.QtCore import QUrl, Qt, QSize\nfrom PyQt5.QtWidgets import QApplication, QInputDialog, QMenu, QToolBar, QToolButton, QMessageBox, QFileDialog, QTextBrowser\n\nimport RepTate\nfrom RepTate.core.CmdBase import CmdBase, CmdMode, CalcMode\nfrom RepTate.core.ApplicationManager import ApplicationManager\nfrom RepTate.core.File import File\nfrom RepTate.gui.QAboutReptate import AboutWindow\nfrom collections import OrderedDict\nimport numpy as np\nimport time\nimport logging\n\nif getattr(sys, \'frozen\', False):\n    # If the application is run as a bundle, the PyInstaller bootloader\n    # extends the sys module by a flag frozen=True and sets the app \n    # path into variable _MEIPASS\'.\n    PATH = sys._MEIPASS\nelse:\n    PATH = dirname(abspath(__file__))\nUi_MainWindow, QMainWindow = loadUiType(join(PATH, \'ReptateMainWindow.ui\'))\n\nclass QTextEditLogger(logging.Handler):\n    def __init__(self, parent):\n        super().__init__()\n        #self.widget = QPlainTextEdit(parent)\n        self.widget = QTextBrowser(parent)\n        self.widget.setReadOnly(True)\n        self.widget.setStyleSheet(""background-color: rgb(255, 255, 222);"")\n\n\n    def emit(self, record):\n        msg = self.format(record)\n        #self.widget.appendPlainText(msg)\n\n        self.widget.moveCursor(QTextCursor.End)\n        self.widget.insertHtml(msg+\'<br>\')\n        self.widget.verticalScrollBar().setValue(\n            self.widget.verticalScrollBar().maximum())\n        self.widget.moveCursor(QTextCursor.End)\n\n\nclass QApplicationManager(ApplicationManager, QMainWindow, Ui_MainWindow):\n    """"""Main Reptate window and application manager""""""\n    html_help_file = \'http://reptate.readthedocs.io/index.html\'\n\n    def __init__(self, parent=None, loglevel=logging.INFO):\n        """"""**Constructor**""""""\n        super().__init__(loglevel=loglevel)\n        QMainWindow.__init__(self)\n        Ui_MainWindow.__init__(self)\n        CmdBase.mode = CmdMode.GUI  #set GUI mode\n        self.setupUi(self)\n\n        if CmdBase.calcmode == CalcMode.singlethread:\n            self.setWindowTitle(\'RepTate \' + self.version + \' \' + self.date +\n                                \' - SINGLE THREAD!!\')\n        else:\n            self.setWindowTitle(\'RepTate \' + self.version + \' \' + self.date)\n\n        # Add Apps\n        self.toolBarApps.addAction(self.actionMWD)\n        tbut = QToolButton()\n        tbut.setPopupMode(QToolButton.MenuButtonPopup)\n        tbut.setDefaultAction(self.actionTTS)\n        menu = QMenu()\n        menu.addAction(self.actionTTSFactors)\n        tbut.setMenu(menu)\n        self.toolBarApps.addWidget(tbut)\n        self.toolBarApps.addAction(self.actionLVE)\n        self.toolBarApps.addAction(self.actionNLVE)\n        self.toolBarApps.addAction(self.actionCrystal)\n        self.toolBarApps.addAction(self.actionGt)\n        self.toolBarApps.addAction(self.actionCreep)\n        self.toolBarApps.addAction(self.actionSANS)\n        self.toolBarApps.addAction(self.actionReact)\n        self.toolBarApps.addAction(self.actionDielectric)\n        # self.toolBarApps.addAction(self.actionDynamicStructureFactor)\n        self.toolBarApps.addAction(self.actionLAOS)\n\n        #help button\n        icon = QIcon(\':/Icon8/Images/new_icons/icons8-user-manual.png\')\n        #self.show_reptate_help = QAction(icon, \'RepTate Manual\', self)\n        #self.show_app_help = QAction(icon, \'Application Manual\', self)\n        #self.show_th_help = QAction(icon, \'Theory Manual\', self)\n        tbut = QToolButton()\n        tbut.setPopupMode(QToolButton.MenuButtonPopup)\n        tbut.setDefaultAction(self.actionShow_reptate_help)\n        menu = QMenu()\n        menu.addAction(self.actionShow_app_help)\n        menu.addAction(self.actionShow_th_help)\n        menu.addAction(self.actionShow_offline_help)\n        tbut.setMenu(menu)\n        #self.toolBarHelpAbout.insertWidget(self.actionAbout_Qt, tbut)\n        self.toolBarHelpAbout.addWidget(tbut)\n        self.toolBarHelpAbout.addSeparator()\n\n        self.toolBarHelpAbout.addAction(self.actionShow_Logger)\n\n        tbut = QToolButton()\n        tbut.setPopupMode(QToolButton.MenuButtonPopup)\n        tbut.setDefaultAction(self.actionAbout)\n        menu = QMenu()\n        menu.addAction(self.actionAbout_Qt)\n        menu.addAction(self.actionAboutMatplotlib)\n        menu.addAction(self.actionAboutNumpy)\n        menu.addAction(self.actionAboutScipy)\n        menu.addSeparator()\n        menu.addAction(self.actionCite_RepTate)\n        menu.addAction(self.actionCheckRepTateVersion)\n        tbut.setMenu(menu)\n        self.toolBarHelpAbout.addWidget(tbut)\n\n        self.toolBarHelpAbout.insertSeparator(self.actionAbout_Qt)\n        #self.toolBar.insertSeparator(self.actionQuit)\n        self.toolBarProject.setContextMenuPolicy(Qt.PreventContextMenu)\n        self.toolBarApps.setContextMenuPolicy(Qt.PreventContextMenu)\n        self.toolBarHelpAbout.setContextMenuPolicy(Qt.PreventContextMenu)\n\n        # # ApplicationXY button\n        # #choose the button icon\n        # icon = QIcon(\':/Icon8/Images/new_icons/XY.png\')\n        # tool_tip = \'XY\'  # text that appear on hover\n        # self.actionXY = QAction(icon, tool_tip, self)\n        # #insert the new button before the ""MWD"" button\n        # self.toolBarApps.insertAction(self.actionMWD, self.actionXY)\n        # #connect button\n        # self.actionXY.triggered.connect(lambda: self.handle_new_app(\'XY\'))\n\n        # App tabs behaviour\n        self.ApplicationtabWidget.setMovable(True)\n        self.ApplicationtabWidget.setTabsClosable(True)\n        self.ApplicationtabWidget.setUsesScrollButtons(True)\n\n        # Connect actions\n        self.actionOpenProject.triggered.connect(self.launch_open_dialog)\n        self.actionSaveProject.triggered.connect(self.launch_save_dialog)\n\n        # Generate action buttons from dict of available applications\n        self.actionMWD.triggered.connect(lambda: self.handle_new_app(\'MWD\'))\n        self.actionTTS.triggered.connect(lambda: self.handle_new_app(\'TTS\'))\n        self.actionTTSFactors.triggered.connect(lambda: self.handle_new_app(\'TTSF\'))\n        self.actionLVE.triggered.connect(lambda: self.handle_new_app(\'LVE\'))\n        self.actionNLVE.triggered.connect(lambda: self.handle_new_app(\'NLVE\'))\n        self.actionCrystal.triggered.connect(lambda: self.handle_new_app(\'Crystal\'))\n        self.actionGt.triggered.connect(lambda: self.handle_new_app(\'Gt\'))\n        self.actionCreep.triggered.connect(lambda: self.handle_new_app(\'Creep\'))\n        self.actionSANS.triggered.connect(lambda: self.handle_new_app(\'SANS\'))\n        self.actionReact.triggered.connect(lambda: self.handle_new_app(\'React\'))\n        self.actionDielectric.triggered.connect(lambda: self.handle_new_app(\'Dielectric\'))\n        self.actionLAOS.triggered.connect(lambda: self.handle_new_app(\'LAOS\'))\n        # self.actionLAOS.triggered.connect(lambda: self.handle_app_coming_soon(\'LAOS\'))\n        # self.actionDynamicStructureFactor.triggered.connect(lambda: self.handle_app_coming_soon(\'DynamicStructureFactor\'))\n\n        self.ApplicationtabWidget.tabCloseRequested.connect(self.close_app_tab)\n        self.ApplicationtabWidget.currentChanged.connect(self.tab_changed)\n\n        self.actionAbout_Qt.triggered.connect(QApplication.aboutQt)\n        self.actionAbout.triggered.connect(self.show_about)\n\n        connection_id = self.ApplicationtabWidget.tabBarDoubleClicked.connect(\n            self.handle_doubleClickTab)\n        # help buttons\n        self.actionShow_reptate_help.triggered.connect(self.handle_show_reptate_help)\n        self.actionShow_app_help.triggered.connect(self.handle_show_app_help)\n        self.actionShow_th_help.triggered.connect(self.handle_show_th_help)\n        self.actionShow_offline_help.triggered.connect(self.handle_actionShow_offline_help)\n\n        # additional about buttons\n        self.actionAboutMatplotlib.triggered.connect(self.handle_about_matplotlib)\n        self.actionAboutNumpy.triggered.connect(self.handle_about_numpy)\n        self.actionAboutScipy.triggered.connect(self.handle_about_scipy)\n        self.actionCite_RepTate.triggered.connect(self.handle_cite_RepTate)\n        self.actionCheckRepTateVersion.triggered.connect(self.handle_check_RepTate_version)\n\n        connection_id = self.LoggerdockWidget.visibilityChanged.connect(self.handle_loggerVisibilityChanged)\n        connection_id = self.actionShow_Logger.triggered.connect(self.showLogger)\n\n        tb = QToolBar()\n        tb.setIconSize(QSize(24,24))\n        tb.setOrientation(Qt.Vertical)\n\n        self.tbutlog = QToolButton()\n        self.tbutlog.setPopupMode(QToolButton.MenuButtonPopup)\n        menu = QMenu()\n        menu.addAction(self.actionLogNotSet)\n        menu.addAction(self.actionLogDebug)\n        menu.addAction(self.actionLogInfo)\n        menu.addAction(self.actionLogWarning)\n        menu.addAction(self.actionLogError)\n        menu.addAction(self.actionLogCritical)\n        if loglevel==logging.NOTSET:\n            self.tbutlog.setDefaultAction(self.actionLogNotSet)\n        elif loglevel==logging.DEBUG:\n            self.tbutlog.setDefaultAction(self.actionLogDebug)\n        elif loglevel==logging.INFO:\n            self.tbutlog.setDefaultAction(self.actionLogInfo)\n        elif loglevel==logging.WARNING:\n            self.tbutlog.setDefaultAction(self.actionLogWarning)\n        elif loglevel==logging.ERROR:\n            self.tbutlog.setDefaultAction(self.actionLogError)\n        elif loglevel==logging.CRITICAL:\n            self.tbutlog.setDefaultAction(self.actionLogCritical)\n        self.tbutlog.setMenu(menu)\n        tb.addWidget(self.tbutlog)\n\n        tb.addAction(self.actionCopyLogText)\n        self.LoggerdochorizontalLayout.addWidget(tb)\n\n        self.logTextBox = QTextEditLogger(self)\n        formatter = logging.Formatter(\'<font color=blue>%(asctime)s</font> <b>%(name)s <font color=red>%(levelname)s</font></b>: %(message)s\',\n                                ""%Y%m%d %H%M%S"")\n        self.logTextBox.setFormatter(formatter)\n        logging.getLogger(\'RepTate\').addHandler(self.logTextBox)\n        logging.getLogger(\'RepTate\').setLevel(loglevel)\n        import matplotlib\n        matplotlib._log.addHandler(self.logTextBox)\n        self.logTextBox.setLevel(loglevel)\n        self.LoggerdochorizontalLayout.addWidget(self.logTextBox.widget)\n\n        connection_id = self.actionLogNotSet.triggered.connect(self.logNotSet)\n        connection_id = self.actionLogDebug.triggered.connect(self.logDebug)\n        connection_id = self.actionLogInfo.triggered.connect(self.logInfo)\n        connection_id = self.actionLogWarning.triggered.connect(self.logWarning)\n        connection_id = self.actionLogError.triggered.connect(self.logError)\n        connection_id = self.actionLogCritical.triggered.connect(self.logCritical)\n        connection_id = self.actionCopyLogText.triggered.connect(self.copyLogText)\n\n        #self.add_save_load_buttons()\n        self.REPTATE_PROJ_JSON = \'reptate_project.json\' # json filename inside zip\n        self.load_path = None\n\n        # CONSOLE WINDOW (need to integrate it with cmd commands)\n        #self.text_edit = Console(self)\n        #this is how you pass in locals to the interpreter\n        #self.text_edit.initInterpreter(locals())\n        #self.verticalLayout.addWidget(self.text_edit)\n\n        # Hide Logger Window\n        self.LoggerdockWidget.hide()\n\n    def showLogger(self, checked):\n        """"""Handle show Log window""""""\n        if checked:\n            self.LoggerdockWidget.show()\n        else:\n            self.LoggerdockWidget.hide()\n\n    def handle_loggerVisibilityChanged(self, visible):\n        """"""Handle the hide/show event of the logger window""""""\n        self.actionShow_Logger.setChecked(visible)\n\n    def logNotSet(self):\n        logging.getLogger(\'RepTate\').setLevel(logging.NOTSET)\n        self.logTextBox.setLevel(logging.NOTSET)\n        self.tbutlog.setDefaultAction(self.actionLogNotSet)\n\n    def logDebug(self):\n        logging.getLogger(\'RepTate\').setLevel(logging.DEBUG)\n        self.logTextBox.setLevel(logging.DEBUG)\n        self.tbutlog.setDefaultAction(self.actionLogDebug)\n\n    def logInfo(self):\n        logging.getLogger(\'RepTate\').setLevel(logging.INFO)\n        self.logTextBox.setLevel(logging.INFO)\n        self.tbutlog.setDefaultAction(self.actionLogInfo)\n\n    def logWarning(self):\n        logging.getLogger(\'RepTate\').setLevel(logging.WARNING)\n        self.logTextBox.setLevel(logging.WARNING)\n        self.tbutlog.setDefaultAction(self.actionLogWarning)\n\n    def logError(self):\n        logging.getLogger(\'RepTate\').setLevel(logging.ERROR)\n        self.logTextBox.setLevel(logging.ERROR)\n        self.tbutlog.setDefaultAction(self.actionLogError)\n\n    def logCritical(self):\n        logging.getLogger(\'RepTate\').setLevel(logging.CRITICAL)\n        self.logTextBox.setLevel(logging.CRITICAL)\n        self.tbutlog.setDefaultAction(self.actionLogCritical)\n\n    def copyLogText(self):\n        self.logTextBox.widget.selectAll()\n        self.logTextBox.widget.copy()\n\n    def handle_show_reptate_help(self):\n        """"""Show RepTate documentation""""""\n        try:\n            html_help_file = self.html_help_file\n        except AttributeError as e:\n            print(\'in ""handle_show_help"":\', e)\n            return\n        QDesktopServices.openUrl(QUrl.fromUserInput((html_help_file)))\n\n    def handle_show_app_help(self):\n        """"""Show RepTate current application (if any) manual, or all applications""""""\n        try:\n            html_help_file = self.ApplicationtabWidget.currentWidget().html_help_file\n        except AttributeError as e:\n            print(\'in ""handle_show_help"":\', e)\n            html_help_file = \'http://reptate.readthedocs.io/manual/Applications/applications.html\'\n        QDesktopServices.openUrl(QUrl.fromUserInput((html_help_file)))\n\n    def handle_show_th_help(self):\n        """"""Show RepTate current theory (if any) manual, or all theories""""""\n        try:\n            app = self.ApplicationtabWidget.currentWidget()\n            ds = app.DataSettabWidget.currentWidget()\n            th = ds.theories[ds.current_theory]\n            html_help_file = th.html_help_file\n        except Exception as e:\n            print(\'in ""handle_show_help"":\', e)\n            html_help_file = \'http://reptate.readthedocs.io/manual/All_Theories/All_Theories.html\'\n        QDesktopServices.openUrl(QUrl.fromUserInput((html_help_file)))\n\n    def handle_actionShow_offline_help(self):\n        PATH = join(RepTate.root_dir, ""docs"", ""build"", ""html"", ""index.html"")\n        QDesktopServices.openUrl(QUrl.fromLocalFile(PATH))\n\n    def handle_about_matplotlib(self):\n        """"""Show matplotlib web site""""""\n        QDesktopServices.openUrl(QUrl.fromUserInput((\'https://matplotlib.org/index.html\')))\n\n    def handle_about_numpy(self):\n        """"""Show numpy web site""""""\n        QDesktopServices.openUrl(QUrl.fromUserInput((\'http://www.numpy.org/\')))\n\n    def handle_about_scipy(self):\n        """"""Show scipy web site""""""\n        QDesktopServices.openUrl(QUrl.fromUserInput((\'https://scipy.org/\')))\n\n    def handle_cite_RepTate(self):\n        """"""Visit the web site of the RepTatepaper""""""\n        QDesktopServices.openUrl(QUrl.fromUserInput((\'https://dx.doi.org/10.1122/8.0000002\')))\n\n    def handle_check_RepTate_version(self):\n        """"""Query Github for the latest RepTate release""""""\n        newversion, version_github, version_current = self.check_version()\n        if newversion:\n            ans = QMessageBox.question(self, \'New RepTate version found\',\n                ""The version of RepTate on Github (%s) is more recent than the one you are running (%s).Do you want to check the new features?""%(version_github, version_current),\n                QMessageBox.Yes|QMessageBox.No, QMessageBox.Yes)\n            if ans == QMessageBox.Yes:\n                QDesktopServices.openUrl(QUrl.fromUserInput((\'https://github.com/jorge-ramirez-upm/RepTate/releases\')))\n        else:\n            QMessageBox.information(self, \'You are running the latest version of RepTate\',\n                ""The version of RepTate you are running (%s) is up to date with respect to the version on Github (%s)""%(version_current, version_github))\n\n    def list_theories_Maxwell(self, th_exclude=None):\n        """"""Redefinition for the GUI mode that lists the tab names.\n        List the theories in the current RepTate instance that provide and need\n        Maxwell modes""""""\n        get_dict = {}\n        set_dict = {}\n        for app in self.applications.values():\n            app_index = self.ApplicationtabWidget.indexOf(app)\n            app_tab_name = self.ApplicationtabWidget.tabText(app_index)\n            for ds in app.datasets.values():\n                ds_index = app.DataSettabWidget.indexOf(ds)\n                ds_tab_name = app.DataSettabWidget.tabText(ds_index)\n                for th in ds.theories.values():\n                    th_index = ds.TheorytabWidget.indexOf(th)\n                    th_tab_name = ds.TheorytabWidget.tabText(th_index)\n                    if th.has_modes and th != th_exclude:\n                        get_dict[""%s.%s.%s"" % (app_tab_name, ds_tab_name,\n                                               th_tab_name)] = th.get_modes\n                        set_dict[""%s.%s.%s"" % (app_tab_name, ds_tab_name,\n                                               th_tab_name)] = th.set_modes\n        return get_dict, set_dict\n\n    def handle_doubleClickTab(self, index):\n        """"""Edit Application name, tab only, the dictinary key remains unchanged""""""\n        old_name = self.ApplicationtabWidget.tabText(index)\n        dlg = QInputDialog(self)\n        dlg.setWindowTitle(""Change Application Name"")\n        dlg.setLabelText(""New Application Name:"")\n        dlg.setTextValue(old_name)\n        dlg.resize(400, 100)\n        success = dlg.exec()\n        new_tab_name = dlg.textValue()\n        if (success and new_tab_name != """"):\n            self.ApplicationtabWidget.setTabText(index, new_tab_name)\n            # self.applications[old_name].name = new_tab_name\n            # self.applications[new_tab_name] = self.applications.pop(old_name)\n\n    def show_about(self):\n        """"""Show about window""""""\n        #dlg = AboutWindow(self, self.version + \' \' + self.date)\n        dlg = AboutWindow(self, ""RepTate %s %s""%(self.version, self.date), ""Build %s<br><small>\\u00A9 Jorge Ram\xc3\xadrez, Universidad Polit\xc3\xa9cnica de Madrid<br>\\u00A9 Victor Boudara, University of Leeds</small><br>(2017-2020)<br><a href=\\""https://dx.doi.org/10.1122/8.0000002\\"">Cite RepTate</a>"" %self.build)\n        dlg.show()\n\n    def tab_changed(self, index):\n        """"""Capture when the active application has changed""""""\n        #appname = self.ApplicationtabWidget.widget(index).windowTitle\n        #items = self.Projecttree.findItems(appname, Qt.MatchContains)\n        #self.Projecttree.setCurrentItem(items[0])\n        pass\n\n    def close_app_tab(self, index):\n        """"""Close an app""""""\n        app = self.ApplicationtabWidget.widget(index)\n        ds_name_list = [key for key in app.datasets]\n        for ds_name in ds_name_list:\n            app.delete(ds_name) #call theory destructor\n        self.ApplicationtabWidget.removeTab(index)\n        self.delete(app.name)\n\n    def Qopen_app(self, app_name, icon):\n        """"""Open app""""""\n        newapp = self.new(app_name)\n        newapp.createNew_Empty_Dataset(\n        )  #populate with empty dataset at app opening\n        app_tabname = ""%s%d"" % (app_name, self.application_counter)\n        ind = self.ApplicationtabWidget.addTab(newapp, QIcon(icon), app_tabname)\n        self.ApplicationtabWidget.setCurrentIndex(ind)\n        self.ApplicationtabWidget.setTabToolTip(ind, app_name + "" app"")\n        return newapp\n\n    def handle_new_app(self, app_name=\'\'):\n        """"""Open a new application window from name""""""\n        self.Qopen_app(app_name,\n                       \':/Icons/Images/new_icons/%s.png\' % app_name)\n\n\n    def handle_app_coming_soon(self, appname=\'\'):\n        """"""Show message""""""\n        QMessageBox.warning(self, ""new %s application""% appname, ""%s coming soon..."" % appname)\n\n\n\n############################\n#SAVE/LOAD REPTATE SESSION\n############################\n\n\n    def closeEvent(self, event):\n        """"""Ask if we want to save project before closing RepTate (uncomment the rest)""""""\n        pass\n        # btns = (QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel)\n        # msg = \'Do you want to save your project before exiting RepTate?\'\n        # title = \'Quit\'\n        # ans = QMessageBox.question(self, title , msg, buttons=btns)\n        # if ans == QMessageBox.No:\n        #     event.accept()\n        # elif ans == QMessageBox.Yes:\n        #     success = self.launch_save_dialog()\n        #     if not success:\n        #         event.ignore()\n        # elif ans == QMessageBox.Cancel:\n        #     event.ignore()\n\n    def launch_open_dialog(self):\n        """"""Get filename of RepTate project to open""""""\n        if self.load_path:\n            fpath, _ = QFileDialog.getOpenFileName(self,\n                ""Open RepTate Project"", self.load_path, ""RepTate Project (*.rept)"")\n        else:\n            fpath, _ = QFileDialog.getOpenFileName(self,\n                ""Open RepTate Project"", join(RepTate.root_dir, ""data""), ""RepTate Project (*.rept)"")\n        if fpath == \'\':\n            return\n        self.open_project(fpath)\n\n    def launch_save_dialog(self):\n        """"""Get filename of RepTate project to save""""""\n        if self.load_path:\n            fpath, _ = QFileDialog.getSaveFileName(self,\n                ""Save RepTate Project"", self.load_path, ""RepTate Project (*.rept)"")\n        else:\n            fpath, _ = QFileDialog.getSaveFileName(self,\n                ""Save RepTate Project"", join(RepTate.root_dir, ""data""), ""RepTate Project (*.rept)"")\n        if fpath == \'\':\n            return False\n        self.save_reptate(fpath)\n        return True\n\n    def save_reptate(self, fpath):\n        """"""Save RepTate project to \'fpath\'""""""\n        self.load_path = fpath\n        apps_dic = OrderedDict()\n        napps = self.ApplicationtabWidget.count()\n        nth_saved = 0\n        nfile_saved = 0\n        ntool_saved = 0\n        for i in range(napps):\n            app = self.ApplicationtabWidget.widget(i)\n\n            # Save DataSets in application\n            datasets_dic = OrderedDict()\n            ndatasets = app.DataSettabWidget.count()\n            for j in range(ndatasets):\n                ds = app.DataSettabWidget.widget(j)\n                files_dic = OrderedDict()\n                for f in ds.files:\n                    nfile_saved += 1\n                    param_dic = OrderedDict([ (pname, f.file_parameters[pname]) for pname in f.file_parameters])\n\n                    file_dic = OrderedDict(\n                        [\n                            (\'fname\', basename(f.file_full_path)),\n                            (\'is_active\', f.active),\n                            (\'fparam\', param_dic),\n                            (\'ftable\', f.data_table.data.tolist()),\n                            (\'with_extra_x\', int(f.with_extra_x)),\n                            (\'theory_xmin\', f.theory_xmin),\n                            (\'theory_xmax\', f.theory_xmax),\n                            (\'theory_logspace\', int(f.theory_logspace)),\n                            (\'th_num_pts\', f.th_num_pts),\n                            (\'nextramin\', f.nextramin),\n                            (\'nextramax\', f.nextramax),\n                        ]\n                    )\n                    files_dic[f.file_name_short] = file_dic\n\n                # Save theories in DataSet\n                theories_dic = OrderedDict()\n                ntheories = ds.TheorytabWidget.count()\n                for k in range(ntheories):\n                    nth_saved += 1\n                    th = ds.TheorytabWidget.widget(k)\n                    param_dic = OrderedDict([(pname, th.parameters[pname].value) for pname in th.parameters])\n                    th_table_dic = OrderedDict(\n                        [ (f.file_name_short, th.tables[f.file_name_short].data.tolist()) for f in ds.files]\n                    )\n                    # save extra_tables\n                    th_extra_table_dic = OrderedDict()\n                    for f in ds.files:\n                        dic_copy = {}\n                        # loop over extra table and convert np.array to list\n                        for et_key in th.tables[f.file_name_short].extra_tables:\n                            val = th.tables[f.file_name_short].extra_tables[et_key]\n                            if type(val) is np.ndarray:\n                                dic_copy[et_key] = val.tolist()\n                            else:\n                                dic_copy[et_key] = val\n                        th_extra_table_dic[f.file_name_short] = dic_copy\n\n                    th.get_extra_data()\n                    e_dic = th.extra_data\n                    e_dic_copy = {}\n                    # convert numpy arrays into lists\n                    for key in e_dic:\n                        val = e_dic[key]\n                        if type(val) is np.ndarray:\n                            e_dic_copy[key] = val.tolist()\n                        else:\n                            e_dic_copy[key] = val\n\n                    th_dic = OrderedDict(\n                        [\n                            (\'th_tabname\', ds.TheorytabWidget.tabText(k)),\n                            (\'thname\', th.thname),\n                            (\'th_param\', param_dic),\n                            (\'th_textbox\', str(th.thTextBox.toHtml()) + \'<br><i>Saved at %s on %s<i><br>\' % (time.strftime(""%X""), time.strftime(""%a %b %d, %Y"") )),\n                            (\'th_tables\', th_table_dic),\n                            (\'th_extra_table_dic\', th_extra_table_dic),\n                            (\'extra_data\', e_dic_copy)\n                        ]\n                    )\n                    theories_dic[th.name] = th_dic\n\n                # Save figure markers\n                ds_markers = OrderedDict(\n                    [\n                        (\'marker_size\', ds.marker_size),\n                        (\'line_width\', ds.line_width),\n                        (\'colormode\', ds.colormode),\n                        (\'color1\', ds.color1),\n                        (\'color2\', ds.color2),\n                        (\'th_line_mode\', ds.th_line_mode),\n                        (\'th_color\', ds.th_color),\n                        (\'palette_name\', ds.palette_name),\n                        (\'symbolmode\', ds.symbolmode),\n                        (\'symbol1\', ds.symbol1),\n                        (\'symbol1_name\', ds.symbol1_name),\n                        (\'th_linestyle\', ds.th_linestyle),\n                        (\'th_line_width\', ds.th_line_width)\n                    ]\n                )\n                # Save full DataSet\n                ds_dict = OrderedDict(\n                    [\n                        (\'ds_tabname\', app.DataSettabWidget.tabText(j)),\n                        (\'files\', files_dic),\n                        (\'current_th_indx\', ds.TheorytabWidget.currentIndex()),\n                        (\'theories\', theories_dic),\n                        (\'ds_markers\', ds_markers)\n                    ]\n                )\n                datasets_dic[ds.name] = ds_dict\n\n            # Save Tools\n            tools_dic = OrderedDict() # contain all the tools\n            for tool in app.tools:\n                ntool_saved += 1\n                param_dic = OrderedDict()\n                for pname in tool.parameters:\n                    param_dic[pname] = tool.parameters[pname].value\n                tool_dic = OrderedDict(\n                    [\n                        (\'tool_name\', tool.toolname), # what tool\n                        (\'tool_tab_name\', app.TooltabWidget.tabText(app.TooltabWidget.indexOf(tool))),\n                        (\'tool_to_th\', int(tool.actionApplyToTheory.isChecked())),\n                        (\'tool_active\', int(tool.actionActive.isChecked())),\n                        (\'tool_param\', param_dic),\n                        (\'tool_txtbox\', str(tool.toolTextBox.toHtml() + \'<br><i>Saved at %s on %s<i><br>\' % (time.strftime(""%X""), time.strftime(""%a %b %d, %Y""))))\n                    ]\n                )\n                #add to global tools dic\n                tools_dic[tool.name] = tool_dic\n\n            # all tools plus extra\n            tools = {\n                \'tools_dic\': tools_dic,\n                \'cur_tab_index\': app.TooltabWidget.currentIndex()\n            }\n\n            # annotations\n            ann_dict = OrderedDict()\n            for k, ann in enumerate(app.graphicnotes):\n                ann_opts = {}\n                ann_text = ann.get_text()\n                ann_x, ann_y = ann.get_position()\n                ann_opts[""color""] = ann.get_color()\n                ann_opts[""rotation""] = ann.get_rotation()\n                ann_opts[""horizontalalignment""] = ann.get_horizontalalignment()\n                ann_opts[""verticalalignment""] = ann.get_verticalalignment()\n                ann_opts[""fontweight""] = ann.get_fontweight()\n                ann_opts[""style""] = ann.get_fontstyle()\n                ann_opts[""fontsize""] = ann.get_fontsize()\n                ann_opts[""alpha""] = ann.get_alpha()\n                ann_opts[""family""] = ann.get_fontfamily()[0]\n                ann_opts[""zorder""] = ann.get_zorder()\n\n                ann_dict[""annotation_%02d"" % (k + 1)] = {\n                    ""ann_text"": ann_text,\n                    ""ann_x"": ann_x,\n                    ""ann_y"": ann_y,\n                    ""ann_opts"": ann_opts\n                    }\n\n            # collect all app info\n            app_dic = OrderedDict(\n                [\n                    (\'app_tabname\', self.ApplicationtabWidget.tabText(i)),\n                    (\'app_indx\', i),\n                    (\'appname\', app.appname),\n                    (\'current_view_names\', [v.name for v in app.multiviews]),\n                    (\'current_ds_indx\', app.DataSettabWidget.currentIndex()),\n                    (\'datasets\', datasets_dic),\n                    (\'tools\', tools),\n                    (\'show_inspector\', int(app.DataInspectordockWidget.isVisible())),\n                    (\'annotations\', ann_dict),\n                    (\'axis_options\', app.ax_opts),\n                    (\'legend_opts\', app.legend_opts)\n                ]\n            )\n\n            apps_dic[app.name] = app_dic\n\n        current_app_indx = self.ApplicationtabWidget.currentIndex()\n        verdata = RepTate._version.get_versions()\n        version_current = verdata[""version""].split(""+"")[0]\n        date = verdata[""date""].split(""T"")[0]\n        build = verdata[""version""]\n\n        out = OrderedDict(\n            [\n                (\'RepTate_version\', version_current + \'_\' + date + \' (build %s)\'%build),\n                (\'project_saved_at\', \'%s on %s\' % (time.strftime(""%X""), time.strftime(""%a %b %d, %Y""))),\n                (\'napp_saved\', napps), (\'nfile_saved\', nfile_saved),\n                (\'nth_saved\', nth_saved),\n                (\'ntool_saved\', ntool_saved),\n                (\'current_app_indx\', current_app_indx), (\'apps\', apps_dic)\n                ]\n            )\n\n        # zip output file\n        import json, zipfile, tempfile\n        with tempfile.TemporaryDirectory() as tmpdirname:\n            tmp = join(tmpdirname, \'tmp\')\n            json.dump(out, open(tmp, \'w\'), indent=4)\n            with zipfile.ZipFile(fpath, \'w\', compression=zipfile.ZIP_DEFLATED) as z:\n                z.write(tmp, self.REPTATE_PROJ_JSON)\n\n        if napps > 1:\n            txtapp = \'Applications\'\n        else:\n            txtapp = \'Application\'\n        if nth_saved > 1:\n            txtth = \'theories\'\n        else:\n            txtth = \'theory\'\n        if nfile_saved > 1:\n            txtfiles = \'files\'\n        else:\n            txtfiles = \'file\'\n        if ntool_saved > 1:\n            txttool = \'tools\'\n        else:\n            txttool = \'tool\'\n        QMessageBox.information(self, \'Save RepTate Project\', \'Saved %d %s, %d %s, %d %s, and %d %s to \\""%s\\""\' % (napps, txtapp, nth_saved, txtth, nfile_saved, txtfiles, ntool_saved, txttool, fpath))\n\n    # load RepTate session\n############################\n\n    def restore_app(self, app_name, app_tabname):\n        """"""Open new application""""""\n        newapp = self.new(app_name)\n        icon = QIcon(\':/Icons/Images/new_icons/%s.png\' % app_name)\n        ind = self.ApplicationtabWidget.addTab(newapp, icon, app_tabname)\n        # self.ApplicationtabWidget.setCurrentIndex(ind)\n        self.ApplicationtabWidget.setTabToolTip(ind, app_name + "" app"")\n        return self.ApplicationtabWidget.widget(ind), ind\n\n    def restore_files(self, ds, files):\n        """"""Open data files""""""\n        for file_dic in files.values():\n            fname = file_dic[\'fname\']\n            is_active = file_dic[\'is_active\']\n            fparams = file_dic[\'fparam\'] # dict\n            ftable = np.asarray(file_dic[\'ftable\'])\n\n\n            f_ext = fname.split(\'.\')[-1]\n            ft = ds.parent_application.filetypes[f_ext]\n            f = File(fname, ft, ds, ds.parent_application.axarr)\n            f.data_table.num_rows, f.data_table.num_columns = ftable.shape\n            f.data_table.data = ftable\n\n            ds.files.append(f)\n            ds.current_file = f\n            f.active = is_active\n            for pname in fparams:\n                f.file_parameters[pname] = fparams[pname]\n            try:\n                f.with_extra_x = bool(file_dic[\'with_extra_x\'])\n                f.theory_xmin = file_dic[\'theory_xmin\']\n                f.theory_xmax = file_dic[\'theory_xmax\']\n                f.theory_logspace = bool(file_dic[\'theory_logspace\'])\n                f.th_num_pts = file_dic[\'th_num_pts\']\n                f.nextramin = file_dic[\'nextramin\']\n                f.nextramax = file_dic[\'nextramax\']\n            except KeyError:\n                pass # backward compatibility\n\n            ds.parent_application.addTableToCurrentDataSet(f, f_ext)\n            ds.do_plot()\n            ds.parent_application.update_Qplot()\n            ds.set_table_icons(ds.table_icon_list)\n\n    def restore_theories(self, ds, theories):\n        """"""Open theories""""""\n        for th_dic in theories.values():\n            th_tabname = th_dic[\'th_tabname\']\n            thname = th_dic[\'thname\']\n            th_param = th_dic[\'th_param\']\n            th_textbox = th_dic[\'th_textbox\']\n            th_tables = th_dic[\'th_tables\']\n            extra_data = th_dic[\'extra_data\']\n            try:\n                extra_table_dic = th_dic[\'th_extra_table_dic\']\n            except KeyError:\n                # backward compatibility\n                extra_table_dic = {}\n\n            for key in extra_data:\n                val = extra_data[key]\n                if type(val) == list:\n                    extra_data[key] = np.asarray(val)\n\n            if thname == \'SCCR\':\n                thname = \'GLaMM\' # backward compatibility\n            new_th = ds.new_theory(thname, th_tabname, calculate=False, show=False)\n            autocal = new_th.autocalculate\n            new_th.autocalculate = False\n            for pname in th_param:\n                new_th.set_param_value(pname, th_param[pname])\n            for fname in th_tables:\n                tt = new_th.tables[fname]\n                tt.data = np.asarray(th_tables[fname])\n                try:\n                    tt.num_rows, tt.num_columns = tt.data.shape\n                except ValueError:\n                    tt.num_rows, tt.num_columns = (0, 0)\n            for fname in extra_table_dic:\n                tt_dic = new_th.tables[fname].extra_tables\n                for key in extra_table_dic[fname]:\n                    tt_dic[key] = np.asarray(extra_table_dic[fname][key])\n            new_th.set_extra_data(extra_data)\n            new_th.update_parameter_table()\n            new_th.thTextBox.insertHtml(th_textbox)\n            new_th.autocalculate = autocal\n\n    def restore_marker_settings(self, ds, marker_dic):\n        """"""Restore the dataset marker settings""""""\n        ds.marker_size = marker_dic[\'marker_size\']\n        ds.line_width = marker_dic[\'line_width\']\n        ds.colormode = marker_dic[\'colormode\']\n        ds.color1 = marker_dic[\'color1\']\n        ds.color2 = marker_dic[\'color2\']\n        ds.th_line_mode = marker_dic[\'th_line_mode\']\n        ds.th_color = marker_dic[\'th_color\']\n        ds.palette_name = marker_dic[\'palette_name\']\n        ds.symbolmode = marker_dic[\'symbolmode\']\n        ds.symbol1 = marker_dic[\'symbol1\']\n        ds.symbol1_name = marker_dic[\'symbol1_name\']\n        ds.th_linestyle = marker_dic[\'th_linestyle\']\n        ds.th_line_width = marker_dic[\'th_line_width\']\n\n    def restore_tools(self, app, tools):\n        """"""Restore the tools""""""\n        for tdic in tools[\'tools_dic\'].values():\n            toolname = tdic[\'tool_name\']\n            tool_tab_name = tdic[\'tool_tab_name\']\n            tool_to_th = tdic[\'tool_to_th\']\n            tool_active = tdic[\'tool_active\']\n            tool_param = tdic[\'tool_param\']\n            tool_txtbox = tdic[\'tool_txtbox\']\n\n            # create new tool and set state\n            to = app.new_tool(toolname, tool_tab_name)\n            to.handle_actionApplyToTheorypressed(bool(tool_to_th))\n            to.handle_actionActivepressed(bool(tool_active))\n            to.toolTextBox.insertHtml(tool_txtbox)\n            for pname in tool_param:\n                to.set_param_value(pname, tool_param[pname])\n        app.TooltabWidget.setCurrentIndex(tools[\'cur_tab_index\'])\n\n    def restore_annotations(self, app, annotations):\n        """"""Restore the annotations""""""\n        for ann in annotations.values():\n            ann_text = ann[""ann_text""]\n            ann_x = ann[""ann_x""]\n            ann_y = ann[""ann_y""]\n            ann_opts = ann[""ann_opts""]\n            app.add_annotation(text=ann_text, x=ann_x, y=ann_y, annotation_opts=ann_opts)\n\n    def open_project(self, project_path):\n        """"""Open file and load project""""""\n        import json, zipfile, tempfile\n        if not isfile(project_path):\n            return\n        self.load_path = project_path\n        try:\n            with tempfile.TemporaryDirectory() as tmpdirname:\n                with zipfile.ZipFile(project_path) as z:\n                    z.extract(self.REPTATE_PROJ_JSON, tmpdirname)\n                    data = json.load(open(join(tmpdirname, self.REPTATE_PROJ_JSON)), object_pairs_hook=OrderedDict)\n        except:\n            print(""File \\""%s\\"" seems to be corrupted"" % project_path)\n            return\n        try:\n            app_indx_now = current_app_indx = data[\'current_app_indx\']\n            apps_dic = data[\'apps\']\n        except KeyError:\n            print(""Could not find data in \\""%s\\"""" % project_path)\n            return\n        # switch to single thread\n        calc_mode_tmp = CmdBase.calcmode\n        CmdBase.calcmode = CalcMode.singlethread\n        # turn off numpy error messages\n        old_np_settings = np.seterr(all=\'ignore\') \n\n        napps = int(data[\'napp_saved\'])\n        nth_saved = int(data[\'nth_saved\'])\n        nfile_saved = int(data[\'nfile_saved\'])\n        ntool_saved = int(data[\'ntool_saved\'])\n        if napps > 1:\n            txtapp = \'Applications\'\n        else:\n            txtapp = \'Application\'\n        if nth_saved > 1:\n            txtth = \'theories\'\n        else:\n            txtth = \'theory\'\n        if nfile_saved > 1:\n            txtfiles = \'files\'\n        else:\n            txtfiles = \'file\'\n        if ntool_saved > 1:\n            txttool = \'tools\'\n        else:\n            txttool = \'tool\'\n        ans = QMessageBox.question(self, \'Load Project\',\n            \'Will load %d %s, %d %s, %d %s, and %d %s.\\nDo you want to continue?\' % (napps,\n            txtapp, nth_saved, txtth, nfile_saved, txtfiles, ntool_saved, txttool),\n            QMessageBox.Yes|QMessageBox.No, QMessageBox.Yes)\n        if ans != QMessageBox.Yes:\n            return\n        for app_dic in apps_dic.values():\n            app_tabname = app_dic[\'app_tabname\']\n            app_indx = app_dic[\'app_indx\']\n            appname = app_dic[\'appname\']\n            current_view_names = app_dic[\'current_view_names\']\n            current_ds_indx = app_dic[\'current_ds_indx\']\n            datasets = app_dic[\'datasets\']\n            tools = app_dic[\'tools\']\n            show_inspector = bool(app_dic[\'show_inspector\'])\n            annotations = app_dic[\'annotations\']\n\n            new_app_tab, ind = self.restore_app(appname, app_tabname)\n\n            try:\n                new_app_tab.ax_opts = app_dic[\'axis_options\']\n            except:\n                #backward compatibility\n                pass\n\n            try:\n                new_app_tab.legend_opts = app_dic[\'legend_opts\']\n            except:\n                #backward compatibility\n                pass\n\n            if app_indx == current_app_indx:\n                # to be safe in case some apps are open before restore\n                app_indx_now = ind\n\n            for ds_dic in datasets.values():\n                ds_tabname = ds_dic[\'ds_tabname\']\n                files = ds_dic[\'files\']\n                current_th_indx = ds_dic[\'current_th_indx\']\n                theories = ds_dic[\'theories\']\n                ds_markers = ds_dic[\'ds_markers\']\n\n                new_ds_tab = new_app_tab.createNew_Empty_Dataset(tabname=ds_tabname)\n                self.restore_files(new_ds_tab, files)\n                self.restore_theories(new_ds_tab, theories)\n                new_ds_tab.TheorytabWidget.setCurrentIndex(current_th_indx)\n                self.restore_marker_settings(new_ds_tab, ds_markers)\n            self.restore_tools(new_app_tab, tools)\n            new_app_tab.DataInspectordockWidget.setVisible(show_inspector)\n\n            # restore annotations\n            self.restore_annotations(new_app_tab, annotations)\n\n            # set app views\n            new_app_tab.multiviews = [new_app_tab.views[v] for v in current_view_names]\n            new_app_tab.viewComboBox.setCurrentText(current_view_names[0])\n            new_app_tab.change_view()\n            #set current ds_tab index\n            new_app_tab.DataSettabWidget.setCurrentIndex(current_ds_indx)\n            # new_app_tab.update_all_ds_plots() # not needed ?\n\n            QApplication.processEvents()\n\n        self.ApplicationtabWidget.setCurrentIndex(app_indx_now)\n        CmdBase.calcmode = calc_mode_tmp\n        # restore numpy error messages settings\n        np.seterr(**old_np_settings) \n#################\n'"
RepTate/gui/QApplicationWindow.py,15,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module QApplicationWindow\n\nModule that defines the basic GUI class from which all GUI applications are derived.\nIt is the GUI counterpart of Application.\n\n""""""\nimport sys\nimport os\nimport re\nimport traceback\nfrom numpy import *\nimport numpy as np\nfrom os.path import dirname, join, abspath, isfile, isdir\n#import logging\nfrom PyQt5.QtGui import QIcon, QColor, QCursor, QStandardItem, QIntValidator, QDoubleValidator\nfrom PyQt5.uic import loadUiType\nimport matplotlib.pyplot as plt\nfrom matplotlib.backends.backend_qt5agg import NavigationToolbar2QT\nfrom PyQt5 import QtCore\nfrom PyQt5.QtCore import Qt\nfrom PyQt5.QtWidgets import QGroupBox, QFormLayout, QLineEdit, QWidget, QToolBar, QToolButton, QMenu, QFileDialog, QMessageBox, QInputDialog, QLineEdit, QColorDialog, QDialog, QDialogButtonBox, QTreeWidgetItem, QTabWidget, QComboBox, QVBoxLayout, QSplitter, QTableWidgetItem, QRadioButton\nimport RepTate\nfrom RepTate.gui.QDataSet import QDataSet\nfrom RepTate.core.DataTable import DataTable\nfrom RepTate.gui.DataSetWidgetItem import DataSetWidgetItem\nfrom RepTate.core.DataSet import ColorMode, SymbolMode, ThLineMode\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Application import Application\nfrom RepTate.core.DraggableArtists import DragType, DraggableSeries, DraggableNote\nfrom RepTate.gui.SpreadsheetWidget import SpreadsheetWidget\nfrom collections import OrderedDict\nfrom RepTate.gui.ImportExcelWindow import ImportExcelWindow\nfrom RepTate.gui.ImportFromPastedWindow import ImportFromPastedWindow\n\n#To recompile the symbol-settings dialog:\n#pyuic5 gui/markerSettings.ui -o gui/markerSettings.py\nfrom RepTate.gui.markerSettings import Ui_Dialog\n\n# I think the following lines are not needed anymore\n#try:\n#    _fromUtf8 = QtCore.QString.fromUtf8\n#except AttributeError:\n#    _fromUtf8 = lambda s: s\n\nif getattr(sys, \'frozen\', False):\n    # If the application is run as a bundle, the PyInstaller bootloader\n    # extends the sys module by a flag frozen=True and sets the app \n    # path into variable _MEIPASS\'.\n    PATH = sys._MEIPASS\nelse:\n    PATH = dirname(abspath(__file__))\nUi_AppWindow, QMainWindow = loadUiType(join(PATH,\'QApplicationWindow.ui\'))\nUi_EditAnnotation, QDialog = loadUiType(join(PATH,\'annotationedit.ui\'))\nUi_AddDummyFiles, QDialog = loadUiType(join(PATH,\'dummyfilesDialog.ui\'))\n\nclass AddDummyFiles(QDialog, Ui_AddDummyFiles):\n    def __init__(self, parent=None, filetype=None):\n        super(AddDummyFiles, self).__init__(parent)\n        QDialog.__init__(self)\n        Ui_AddDummyFiles.__init__(self)\n        self.setupUi(self)\n\n        for p in filetype.basic_file_parameters:\n            item = QTreeWidgetItem(self.parameterTreeWidget,[p,""0"",""1"",""10""])\n            item.setCheckState(0, 0)\n            item.setIcon(0, QIcon())\n            item.setFlags(item.flags() | Qt.ItemIsEditable)\n            cb = QComboBox(self.parameterTreeWidget)\n            cb.addItems([""Linear"", ""Log""])\n            self.parameterTreeWidget.setItemWidget(item, 4, cb)\n\n        for i in range(4):\n            self.parameterTreeWidget.setColumnWidth(i,60)\n\n        connection_id = self.parameterTreeWidget.itemDoubleClicked.connect(self.handle_itemDoubleClicked)\n\n    def handle_itemDoubleClicked(self, item, column):\n        if (column>0 and column<4):\n            self.parameterTreeWidget.editItem(item, column)\n\nclass AddFileFunction(QDialog):\n    def __init__(self, parent=None, filetype=None):\n        super(AddFileFunction, self).__init__(parent)\n        QDialog.__init__(self)\n        self.filetype = filetype\n        self.createParametersGroupBox(filetype)\n        self.createColumnsGroupBox(filetype)\n        self.createLabelGroupBox()\n        mainLayout = QVBoxLayout()\n        mainLayout.addWidget(self.parametersGroupBox)\n        mainLayout.addWidget(self.columnsGroupBox)\n        mainLayout.addWidget(self.labelGroupBox)\n        buttonBox = QDialogButtonBox(QDialogButtonBox.Ok\n                                     | QDialogButtonBox.Cancel)\n        buttonBox.accepted.connect(self.accept)\n        buttonBox.rejected.connect(self.reject)\n        mainLayout.addWidget(buttonBox)\n        self.setLayout(mainLayout)\n        self.setWindowTitle(""New File from Function"")\n\n    def createParametersGroupBox(self, filetype):\n        """"""Create a form to set the new values of important file parameters""""""\n        self.parametersGroupBox = QGroupBox(\n            ""Parameters of \\""%s\\"" file"" % filetype.name)\n        layout = QFormLayout()\n        parameters = filetype.basic_file_parameters\n        self.param_dict = {}\n        self.p_new = []\n        for i, pname in enumerate(parameters):  #loop over the Parameters\n            self.p_new.append(QLineEdit())\n            self.p_new[i].setValidator(QDoubleValidator())\n            self.p_new[i].setText(""0"")\n            layout.addRow(""%s:"" % pname, self.p_new[i])\n            self.param_dict[pname] = self.p_new[i]\n        self.parametersGroupBox.setLayout(layout)\n\n    def createColumnsGroupBox(self, filetype):\n        """"""Create a form to set the new values the file columns""""""\n        self.columnsGroupBox = QGroupBox(\n            ""Columns of \\""%s\\"" file"" % filetype.name)\n        layout = QFormLayout()\n        cols = filetype.col_names\n        self.col_dict = {}\n        self.c_new = []\n        for i, cname in enumerate(cols):  #loop over the Parameters\n            self.c_new.append(QLineEdit())\n            self.c_new[i].setText(""x"")\n            layout.addRow(""%s"" % cname, self.c_new[i])\n            self.col_dict[cname] = self.c_new[i]\n        self.columnsGroupBox.setLayout(layout)\n\n    def createLabelGroupBox(self):\n        """"""Set the range and scale (linear or logarithmic) of the label x""""""\n        self.labelGroupBox = QGroupBox(\n            ""Range of label x"")\n        layout = QFormLayout()\n        self.lab_dict = {}\n        self.l_new = []\n        self.l_new.append(QLineEdit())\n        self.l_new[0].setText(""0"")\n        self.l_new[0].setValidator(QDoubleValidator())\n        layout.addRow(""xmin"", self.l_new[0])\n        self.lab_dict[""xmin""] = self.l_new[0]\n        self.l_new.append(QLineEdit())\n        self.l_new[1].setText(""1000"")\n        self.l_new[1].setValidator(QDoubleValidator())\n        layout.addRow(""xmax"", self.l_new[1])\n        self.lab_dict[""xmax""] = self.l_new[1]\n        self.l_new.append(QLineEdit())\n        self.l_new[2].setText(""100"")\n        self.l_new[2].setValidator(QIntValidator())\n        layout.addRow(""npoints"", self.l_new[2])\n        self.lab_dict[""npoints""] = self.l_new[2]\n        self.l_new.append(QRadioButton())\n        self.l_new[3].setText(""Linear"")\n        self.l_new.append(QRadioButton())\n        layout.addRow("""", self.l_new[3])\n        self.l_new[3].setChecked(True)\n        self.l_new[4].setText(""Logarithmic"")\n        layout.addRow("""", self.l_new[4])\n        self.labelGroupBox.setLayout(layout)\n\n\nclass EditAnnotation(QDialog, Ui_EditAnnotation):\n    def __init__(self, parent=None, annotation=None):\n        super(EditAnnotation, self).__init__(parent)\n        QDialog.__init__(self)\n        Ui_EditAnnotation.__init__(self)\n\n        self.setupUi(self)\n\n        self.annotation = annotation\n        self.textLineEdit.setText(annotation.get_text())\n        x, y = annotation.get_position()\n        self.xLineEdit.setText(\'%.4g\'%x)\n        self.yLineEdit.setText(\'%.4g\'%y)\n        color = annotation.get_color()\n        col = QColor(color[0]*255, color[1]*255, color[2]*255)\n        self.labelFontColor.setStyleSheet(""background: %s""%col.name())\n        self.rotationSpinBox.setValue(annotation.get_rotation())\n        self.hacomboBox.setCurrentText(annotation.get_horizontalalignment())\n        self.vacomboBox.setCurrentText(annotation.get_verticalalignment())\n        self.fontweightComboBox.setCurrentText(annotation.get_fontweight())\n        self.fontstyleComboBox.setCurrentText(annotation.get_fontstyle())\n        self.fontsizeannotationSpinBox.setValue(annotation.get_fontsize())\n        self.framealphaannotationSpinBox.setValue(annotation.get_alpha())\n        self.fontfamilyComboBox.setCurrentText(annotation.get_fontfamily()[0])\n\n        connection_id = self.pickFontColor.clicked.connect(self.handle_pickFontColor)\n        connection_id = self.pushApply.clicked.connect(self.apply_changes)\n        connection_id = self.pushOK.clicked.connect(self.apply_changes)\n        connection_id = self.pushDelete.clicked.connect(self.delete)\n\n        self.color = None\n\n    def showColorDialog(self):\n        """"""Show the color picker and return the picked QtColor or `None`""""""\n        wtitle = ""Select color for the annotation \\""%s\\""""%self.annotation.get_text()\n        color = QColorDialog.getColor(title=wtitle,\n            options=QColorDialog.DontUseNativeDialog)\n        if not color.isValid():\n            color = None\n        return color\n\n    def apply_changes(self):\n        self.annotation.set_text(self.textLineEdit.text())\n        self.annotation.set_position((float(self.xLineEdit.text()),float(self.yLineEdit.text())))\n        if self.color:\n            self.annotation.set_color(self.color.getRgbF())\n        self.annotation.set_rotation(self.rotationSpinBox.value())\n        self.annotation.set_horizontalalignment(self.hacomboBox.currentText())\n        self.annotation.set_verticalalignment(self.vacomboBox.currentText())\n        self.annotation.set_fontweight(self.fontweightComboBox.currentText())\n        self.annotation.set_fontstyle(self.fontstyleComboBox.currentText())\n        self.annotation.set_fontsize(self.fontsizeannotationSpinBox.value())\n        self.annotation.set_alpha(self.framealphaannotationSpinBox.value())\n        self.annotation.set_family(self.fontfamilyComboBox.currentText())\n        self.annotation.figure.canvas.draw()\n\n    def delete(self):\n        btns = (QMessageBox.Yes | QMessageBox.No)\n        msg = ""Do you want to delete the the annotation \\""%s\\""""%self.annotation.get_text()\n        title = \'Delete annotation\'\n        ans = QMessageBox.question(self, title, msg, buttons=btns)\n        if ans == QMessageBox.Yes:\n            self.annotation.remove()\n            self.pushCancel.click()\n\n    def handle_pickFontColor(self):\n        """"""Call the color picker and save the selected legend face color in\n        RGB format in the dataset legend info.\n        """"""\n        self.color = self.showColorDialog()\n        if self.color:\n            self.labelFontColor.setStyleSheet(""background: %s""%self.color.name())\n\n\nclass ViewShiftFactors(QDialog):\n    def __init__(self, parent=None, fnames=None, factorsx=None, factorsy=None):\n        super(ViewShiftFactors, self).__init__(parent)\n\n        self.setWindowTitle(""View/Edit Shift Factors"")\n        layout = QVBoxLayout(self)\n\n        nfiles = len(fnames)\n        ncurves = len(factorsx[0])\n\n        self.table = SpreadsheetWidget()  #allows copy/paste\n        self.table.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)\n        self.table.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)\n        self.table.setRowCount(nfiles)\n        self.table.setColumnCount(2*ncurves)\n        hlabels=[]\n        for i in range(ncurves):\n            hlabels.append(""x%d""%(i+1))\n        self.table.setHorizontalHeaderLabels(hlabels)\n        self.table.setVerticalHeaderLabels(fnames)\n        for i in range(nfiles):\n            for j in range(ncurves):\n                self.table.setItem(i, 2*j, QTableWidgetItem(""%g""%factorsx[i][j]))\n                self.table.setItem(i, 2*j+1, QTableWidgetItem(""%g""%factorsy[i][j]))\n        self.table.resizeRowsToContents()\n        self.table.resizeColumnsToContents()\n        layout.addWidget(self.table)\n\n        # OK and Cancel buttons\n        buttons = QDialogButtonBox(\n            QDialogButtonBox.Ok | QDialogButtonBox.Cancel, Qt.Horizontal, self)\n        buttons.accepted.connect(self.accept)\n        buttons.rejected.connect(self.reject)\n        layout.addWidget(buttons)\n        self.adjustSize()\n\n\nclass QApplicationWindow(Application, QMainWindow, Ui_AppWindow):\n    """"""GUI Application""""""\n    def __init__(self, name=\'Application Template\', parent=None, **kwargs):\n        """"""**Constructor**""""""\n\n        super().__init__(name, parent, **kwargs)\n\n        if CmdBase.mode!=CmdMode.GUI:\n            return None\n\n        QMainWindow.__init__(self)\n        Ui_AppWindow.__init__(self)\n\n        self.setupUi(self)\n        self.name = name\n        self.parent_application = parent\n        self.tab_count = 0\n        self.curves = []\n        self.zorder = 100\n        self.dir_start = join(RepTate.root_dir, ""data"") # default folder opened\n\n        # Accept Drag and drop events\n        self.setAcceptDrops(True)\n\n        # DataSet Tabs behaviour ##########\n        self.DataSettabWidget.setTabsClosable(True)\n        #self.DataSettabWidget.setTabBarAutoHide(True)\n        self.DataSettabWidget.setUsesScrollButtons(True)\n        self.DataSettabWidget.setMovable(True)\n\n        ############################\n        # SETUP DATA INSPECTOR PANEL\n        # Data Inspector Toolbar\n        self.data_inspector_panel_widget = QWidget(self)\n        vblayout = QVBoxLayout()\n        vblayout.setContentsMargins(0, 0, 0, 0)\n        vblayout.setSpacing(0)\n\n        tb = QToolBar()\n        tb.setIconSize(QtCore.QSize(24,24))\n        tb.addAction(self.actionCopy)\n        tb.addAction(self.actionPaste)\n        tb.addSeparator()\n        tb.addAction(self.actionShiftVertically)\n        tb.addAction(self.actionShiftHorizontally)\n        tb.addAction(self.actionViewShiftFactors)\n        tb.addAction(self.actionSaveShiftFactors)\n        tb.addAction(self.actionResetShiftFactors)\n        vblayout.addWidget(tb)\n        # Shift factors stuff\n        self.shiftTable = SpreadsheetWidget(self) # has a \'copy\' method\n        self.shiftTable.setColumnCount(2)\n        self.shiftTable.setRowCount(DataTable.MAX_NUM_SERIES)\n        # disable Paste\n        self.shiftTable.paste = lambda: None\n\n        self.shiftTable.setHorizontalHeaderLabels([""Xshift"", ""Yshift""])\n        self.shiftTable.horizontalHeader().setStyleSheet(""color: blue; font: bold;"")\n        self.shiftTable.verticalHeader().setStyleSheet(""color: blue; font: bold;"")\n        for i in range(DataTable.MAX_NUM_SERIES):\n            for j in range(2):\n                item = QTableWidgetItem()\n                item.setText(""0"")\n                item.setBackground(QColor(255,255,205))\n                self.shiftTable.setItem(i, j, item)\n        self.shiftTable.resizeRowsToContents()\n        iHeight = 0\n        for i in range(DataTable.MAX_NUM_SERIES):\n            iHeight += self.shiftTable.verticalHeader().sectionSize(i)\n        iHeight += self.shiftTable.horizontalHeader().height()\n        self.shiftTable.setFixedHeight(iHeight)\n        iWidth = 0\n        for i in range(2):\n            iWidth += self.shiftTable.horizontalHeader().sectionSize(i)\n        iWidth += self.shiftTable.verticalHeader().width()\n        self.shiftTable.setMinimumWidth(iWidth)\n        self.shiftTable.setVisible(False)\n        vblayout.addWidget(self.shiftTable)\n\n        #custom QTable to have the copy/paste/delete features\n        self.inspector_table = SpreadsheetWidget(self)\n        self.inspector_table.delete_disabled = False\n        vblayout.addWidget(self.inspector_table)\n        self.data_inspector_panel_widget.setLayout(vblayout)\n\n        ######################\n        # VIEW Toolbar\n        self.saveViewtoolButton.setDefaultAction(self.actionSave_View)\n\n        ################\n        # TOOLS TOOLBAR\n        # In the Data Inspector area (at the bottom)\n        self.tool_panel_widget = QWidget(self)\n        vblayout2 = QVBoxLayout()\n        vblayout2.setContentsMargins(0, 0, 0, 0)\n        vblayout2.setSpacing(0)\n\n        tb = QToolBar()\n        tb.setIconSize(QtCore.QSize(24,24))\n        tb.addAction(self.actionNew_Tool)\n        self.cbtool = QComboBox()\n        model = self.cbtool.model()\n        self.cbtool.setToolTip(""Choose a Tool"")\n\n        item = QStandardItem(\'Select:\')\n        item.setForeground(QColor(\'grey\'))\n        model.appendRow(item)\n        i = 1\n        for tool_name in self.availabletools.keys():\n            item = QStandardItem(tool_name)\n            item.setToolTip(self.availabletools[tool_name].description)\n            model.appendRow(item)\n            i += 1\n        self.cbtool.insertSeparator(i)\n        for tool_name in self.extratools.keys():\n            item = QStandardItem(tool_name)\n            item.setForeground(QColor(\'blue\'))\n            item.setToolTip(self.extratools[tool_name].description)\n            model.appendRow(item)\n\n        tb.addWidget(self.cbtool)\n        vblayout2.addWidget(tb)\n        self.TooltabWidget = QTabWidget()\n        self.TooltabWidget.setTabsClosable(True)\n        self.TooltabWidget.setTabShape(1)\n        self.TooltabWidget.setMovable(1)\n        self.qtabbar = self.TooltabWidget.tabBar()\n        vblayout2.addWidget(self.TooltabWidget)\n        self.tool_panel_widget.setLayout(vblayout2)\n\n        # Data inspector and Tool panels separated by spliter\n        spliter = QSplitter(QtCore.Qt.Vertical)\n        spliter.addWidget(self.data_inspector_panel_widget)\n        spliter.addWidget(self.tool_panel_widget)\n        spliter.setStretchFactor(0, 1)\n        spliter.setStretchFactor(1, 6)\n        self.LayoutDataInspector.addWidget(spliter)\n\n        # Dataset Toolbar\n        tb = QToolBar()\n        tb.setIconSize(QtCore.QSize(24,24))\n        tb.addAction(self.actionNew_Empty_Dataset)\n\n        #tb.addAction(self.actionNew_Dataset_From_File)\n        tbut = QToolButton()\n        tbut.setPopupMode(QToolButton.MenuButtonPopup)\n        tbut.setDefaultAction(self.actionNew_Dataset_From_File)\n        menu = QMenu()\n        menu.addAction(self.actionAddDummyFiles)\n        menu.addAction(self.actionAdd_File_With_Function)\n        menu.addAction(self.action_import_from_excel)\n        menu.addAction(self.action_import_from_pasted)\n        tbut.setMenu(menu)\n        tb.addWidget(tbut)\n        # view all sets / theories\n        tbut2 = QToolButton()\n        tbut2.setPopupMode(QToolButton.MenuButtonPopup)\n        tbut2.setDefaultAction(self.actionView_All_Sets)\n        menu2 = QMenu()\n        menu2.addAction(self.actionView_All_SetTheories)\n        tbut2.setMenu(menu2)\n        tb.addWidget(tbut2)\n        #\n        tb.addAction(self.actionMarkerSettings)\n        tb.addAction(self.actionReload_Data)\n        tb.addAction(self.actionInspect_Data)\n        tb.addAction(self.actionShowFigureTools)\n        self.ViewDataTheoryLayout.insertWidget(1, tb)\n        self.ViewDataTheorydockWidget.Width=500\n        self.ViewDataTheorydockWidget.setTitleBarWidget(QWidget())\n        self.actionAutoscale = tb.addAction(QIcon(\':/Images/Images/new_icons/icons8-padlock-96.png\'), ""Lock XY axes"")\n        self.actionAutoscale.setCheckable(True)\n\n\n        # Tests TableWidget\n        self.inspector_table.setRowCount(30)\n        self.inspector_table.setColumnCount(10)\n        self.inspector_table.setHorizontalHeaderLabels([\'x\',\'y\',\'z\',\'a\',\'b\',\'c\',\'d\',\'e\',\'f\',\'g\'])\n\n        # Hide Data Inspector\n        self.DataInspectordockWidget.hide()\n\n        self.mplvl.addWidget(self.multiplots)\n\n        self.mpl_toolbar = NavigationToolbar2QT(self.canvas, self)\n        self.mpl_toolbar.setIconSize(QtCore.QSize(16, 16))\n        self.mpl_toolbar.setFixedHeight(36)\n        self.mpl_toolbar.layout().setSpacing(0)\n        self.mpl_toolbar.addAction(self.actionTrack_data)\n        self.mpl_toolbar.setVisible(False)\n        self.mplvl.addWidget(self.mpl_toolbar)\n\n\n        # self.canvas.draw()\n        # self.update_Qplot()\n        # LEGEND STUFF\n        self.legend = None\n\n        # EVENT HANDLING\n        # Matplotlib events\n        #connection_id = self.figure.canvas.mpl_connect(\'resize_event\', self.resizeplot)\n        connection_id = self.figure.canvas.mpl_connect(\'pick_event\', self.onpick)\n        #connection_id = self.figure.canvas.mpl_connect(\'button_release_event\', self.onrelease)\n        #connection_id = self.figure.canvas.mpl_connect(\'scroll_event\', self.zoom_wheel)\n        #connection_id = self.figure.canvas.mpl_connect(\'button_press_event\', self.on_press)\n        #connection_id = self.figure.canvas.mpl_connect(\'motion_notify_event\', self.on_motion)\n\n        connection_id = self.actionShowFigureTools.triggered.connect(self.viewMPLToolbar)\n        connection_id = self.actionInspect_Data.triggered.connect(self.showDataInspector)\n        connection_id = self.actionNew_Empty_Dataset.triggered.connect(self.handle_createNew_Empty_Dataset)\n        connection_id = self.actionNew_Dataset_From_File.triggered.connect(self.openDataset)\n        connection_id = self.actionAddDummyFiles.triggered.connect(self.addDummyFiles)\n        connection_id = self.actionAdd_File_With_Function.triggered.connect(self.addFileFunction)\n        connection_id = self.action_import_from_excel.triggered.connect(self.handle_action_import_from_excel)\n        connection_id = self.action_import_from_pasted.triggered.connect(self.handle_action_import_from_pasted)\n        connection_id = self.actionReload_Data.triggered.connect(self.handle_actionReload_Data)\n        connection_id = self.actionAutoscale.triggered.connect(self.handle_actionAutoscale)\n\n        connection_id = self.actionNew_Tool.triggered.connect(self.handle_actionNewTool)\n        connection_id = self.TooltabWidget.tabCloseRequested.connect(self.handle_toolTabCloseRequested)\n        connection_id = self.qtabbar.tabMoved.connect(self.handle_toolTabMoved)\n\n        connection_id = self.viewComboBox.currentIndexChanged.connect(self.handle_change_view)\n        connection_id = self.actionSave_View.triggered.connect(self.save_view)\n        connection_id = self.sp_nviews.valueChanged.connect(self.sp_nviews_valueChanged)\n\n        connection_id = self.DataSettabWidget.tabCloseRequested.connect(self.close_data_tab_handler)\n        connection_id = self.DataSettabWidget.tabBarDoubleClicked.connect(self.handle_doubleClickTab)\n        connection_id = self.DataSettabWidget.currentChanged.connect(self.handle_currentChanged)\n        connection_id = self.actionView_All_Sets.toggled.connect(self.handle_actionView_All_Sets)\n        connection_id = self.actionView_All_SetTheories.triggered.connect(self.handle_actionView_All_SetTheories)\n        connection_id = self.actionShiftVertically.triggered.connect(self.handle_actionShiftTriggered)\n        connection_id = self.actionShiftHorizontally.triggered.connect(self.handle_actionShiftTriggered)\n        connection_id = self.actionViewShiftFactors.triggered.connect(self.handle_actionViewShiftTriggered)\n        connection_id = self.actionSaveShiftFactors.triggered.connect(self.handle_actionSaveShiftTriggered)\n        connection_id = self.actionResetShiftFactors.triggered.connect(self.handle_actionResetShiftTriggered)\n        connection_id = self.DataInspectordockWidget.visibilityChanged.connect(self.handle_inspectorVisibilityChanged)\n\n        connection_id = self.actionMarkerSettings.triggered.connect(self.handle_actionMarkerSettings)\n\n        connection_id = self.actionCopy.triggered.connect(self.inspector_table.copy)\n        connection_id = self.actionPaste.triggered.connect(self.inspector_table.paste)\n\n        # Annotation stuff\n        #connection_id = self.actionTrack_data.triggered.connect(self.handle_annotation)\n        self.graphicnotes = []\n        self.artistnotes = []\n        #plt.connect(\'motion_notify_event\', self.mpl_motion_event)\n\n        #Setting up the marker-settings dialog\n        # self.marker_dic = {\'square\': \'s\', \'plus (filled)\': \'P\', \'point\': \'.\', \'triangle_right\': \'>\', \'hline\': \'_\', \'vline\': \'|\', \'pentagon\': \'p\', \'tri_left\': \'3\', \'tri_up\': \'2\', \'circle\': \'o\', \'diamond\': \'D\', \'star\': \'*\', \'hexagon1\': \'h\', \'octagon\': \'8\', \'hexagon2\': \'H\', \'tri_right\': \'4\', \'x (filled)\': \'X\', \'thin_diamond\': \'d\', \'tri_down\': \'1\', \'triangle_left\': \'<\', \'plus\': \'+\', \'triangle_down\': \'v\', \'triangle_up\': \'^\', \'x\': \'x\'}\n        self.dialog = QDialog()\n        self.dialog.ui = Ui_Dialog()\n        self.dialog.ui.setupUi(self.dialog)\n        self.populate_cbSymbolType()\n        self.populate_cbPalette()\n        self.populate_cbTheoryLine()\n        self.color1 = None\n        self.color2 = None\n        self.color_th = None\n        self.legend_opts = {\'loc\':\'best\', \'ncol\':1, \'fontsize\':12, \'title_fontsize\':12, \'markerfirst\':True, \'frameon\':True, \'fancybox\':True, \'shadow\':True, \'framealpha\':None, \'facecolor\':None, \'edgecolor\':None, \'mode\':None, \'title\':None, \'borderpad\': None, \'labelspacing\':None, \'handletextpad\':None, \'columnspacing\':None}\n        self.annotation_opts = {\'alpha\': 1.0, \'color\': QColor(0, 0, 0).getRgbF(), \'family\':\'sans-serif\', \'horizontalalignment\':\'center\', \'rotation\': 0.0, \'fontsize\':16, \'style\': \'normal\',  \'verticalalignment\': \'center\', \'fontweight\':\'normal\'}\n\n        # dialog import data from excel\n        self.excel_import_gui = None\n        # dialog import pasted data\n        self.pasted_import_gui = None\n\n        self.legend_draggable = True\n        self.default_legend_labels = True\n        self.legend_labels = """"\n        # self.populate_markers()\n        self.fparam_backup = [] #temporary storage of the file parameters\n        self.dialog.ui.spinBox.setSingleStep(3) #increment in the marker size dialog\n        connection_id = self.dialog.ui.pickColor1.clicked.connect(self.handle_pickColor1)\n        connection_id = self.dialog.ui.pickColor2.clicked.connect(self.handle_pickColor2)\n        connection_id = self.dialog.ui.pickThColor.clicked.connect(self.handle_pickThColor)\n        connection_id = self.dialog.ui.pickFaceColor.clicked.connect(self.handle_pickFaceColor)\n        connection_id = self.dialog.ui.pickEdgeColor.clicked.connect(self.handle_pickEdgeColor)\n        connection_id = self.dialog.ui.pickFontColor.clicked.connect(self.handle_pickFontColor)\n        connection_id = self.dialog.ui.pickFontColor_ax.clicked.connect(self.handle_pickFontColor_ax)\n        connection_id = self.dialog.ui.pickFontColor_label.clicked.connect(self.handle_pickFontColor_label)\n        connection_id = self.dialog.ui.reset_all_pb.clicked.connect(self.handle_reset_all_pb)\n        connection_id = self.dialog.ui.rbEmpty.clicked.connect(self.populate_cbSymbolType)\n        connection_id = self.dialog.ui.rbFilled.clicked.connect(self.populate_cbSymbolType)\n        connection_id = self.dialog.ui.pushApply.clicked.connect(self.handle_apply_button_pressed)\n\n        self.dataset_actions_disabled(True)\n        self.sp_nviews.setMaximum(self.nplot_max)\n        # connection_id = self.checkBoxColor.toggled.connect(self)\n        # TEST GET CLICKABLE OBJECTS ON THE X AXIS\n        #xaxis = self.ax.get_xticklabels()\n        #print (xaxis)\n\n    def sp_nviews_valueChanged(self, new_nplots):\n        """"""Change the current number of views displayed in the app""""""\n        self.nplots = new_nplots\n        self.multiplots.reorg_fig(new_nplots)\n\n    def save_view(self):\n        dir_start = self.dir_start\n        dilogue_name = ""Select Folder for Saving data in Current View as txt""\n        folder = QFileDialog.getExistingDirectory(self, dilogue_name, dir_start)\n        if isdir(folder):\n            ds = self.DataSettabWidget.currentWidget()\n            if ds:\n                nfout = 0\n                for f in ds.files:\n                    if f.active:\n                        series = f.data_table.series\n                        all_views_data = OrderedDict()\n                        max_row_len = 0\n                        max_view_name_len = 0\n                        for nx, view in enumerate(self.multiviews):\n                            max_view_name_len = max(max_view_name_len, len(view.name) + 3)\n                            data_view = []\n                            for i in range(view.n):\n                                x, y = series[nx][i].get_data()\n                                if i > 0 and np.array_equal(x, data_view[0][0]):\n                                    # if x1=x2, only use y\n                                    data_view.append([y,])\n                                else:\n                                    data_view.append([x,y])\n                                max_row_len = max(max_row_len, len(series[nx][i].get_data()[0]) )\n                            all_views_data[view.name] = data_view\n\n                        nviews = len(self.multiviews)\n                        with open(join(folder, f.file_name_short) + \'_VIEW.txt\', \'w\') as fout:\n                            # header with file parameters\n                            fout.write(\'#view(s)=[%s];\' % (\', \'.join([v.name for v in self.multiviews])))\n                            for pname in f.file_parameters:\n                                fout.write(\'%s=%s;\' % (pname, f.file_parameters[pname]))\n                            fout.write(\'\\n\')\n\n                            # column titles\n                            field_width = []\n                            for view_name in all_views_data:\n                                view = self.views[view_name]\n                                snames_index = 0\n                                for xy in all_views_data[view_name]:\n                                    # loop over the different series in the view ""view_name""\n                                    if len(xy) > 1:\n                                        # case where there is x and y series\n                                        fw1 = max(len(view.x_label), 15)\n                                        fw2 = max(len(view.snames[snames_index]), 15)\n                                        fout.write(\'{0:<{1}s}\\t\'.format(view.x_label, fw1))\n                                        fout.write(\'{0:<{1}s}\\t\'.format(view.snames[snames_index], fw2))\n                                        field_width.append(fw1)\n                                        field_width.append(fw2)\n                                    else:\n                                        # case where there is y series only\n                                        fw = max(len(view.snames[snames_index]), 15)\n                                        fout.write(\'{0:{1}s}\\t\'.format(view.snames[snames_index], fw))\n                                        field_width.append(fw)\n                                    snames_index += 1\n                            fout.write(\'\\n\')\n\n                            # data lines\n                            for i in range(max_row_len):\n                                fw_index = 0 # field_width index\n                                for view_name in all_views_data:\n                                    data_view = all_views_data[view_name]\n                                    for xy in data_view:\n                                        if len(xy) > 1:\n                                            # case where there is x and y series\n                                            fw1 = field_width[fw_index]\n                                            fw2 = field_width[fw_index + 1]\n                                            fw_index += 2\n                                            try:\n                                                fout.write(\'{0:<{1}.8e}\\t\'.format(xy[0][i], fw1))\n                                                fout.write(\'{0:<{1}.8e}\\t\'.format(xy[1][i], fw2))\n                                            except:\n                                                fout.write(\'{0:{1}s}\\t\'.format(\'\', fw1))\n                                                fout.write(\'{0:{1}s}\\t\'.format(\'\', fw2))\n                                        else:\n                                            # case where there is y series only\n                                            fw = field_width[fw_index]\n                                            fw_index += 1\n                                            try:\n                                                fout.write(\'{0:<{1}.8e}\\t\'.format(xy[0][i], fw1))\n                                            except:\n                                                fout.write(\'{0:{1}s}\\t\'.format(\'\', fw))\n                                fout.write(\'\\n\')\n                        nfout += 1\n\n            QMessageBox.warning(self, ""Saving views"", ""Wrote %d file(s) ending \\""_VIEW.txt\\"" in \\""%s/\\"""" % (nfout, folder))\n\n\n    def handle_actionNewTool(self):\n        """"""Create new tool""""""\n        if self.cbtool.currentIndex() == 0:\n            # by default, open first tool in the list\n            tool_name = self.cbtool.itemText(1)\n        else:\n            tool_name = self.cbtool.currentText()\n        # reset the combobox selection\n        self.cbtool.setCurrentIndex(0)\n        if tool_name != \'\':\n            self.new_tool(tool_name)\n            self.update_all_ds_plots()\n\n    def new_tool(self, tool_name, tool_tab_id=""""):\n        """"""Create new tool""""""\n        newtool = self.tool_new(tool_name)\n\n        # add new tool tab\n        if tool_tab_id == """":\n            tool_tab_id = newtool.name\n            tool_tab_id = \'\'.join(\n                c for c in tool_tab_id\n                if c.isupper())  #get the upper case letters of tool_name\n            tool_tab_id = ""%s%d"" % (tool_tab_id, self.num_tools)  #append number\n        index = self.TooltabWidget.addTab(newtool, tool_tab_id)\n        self.TooltabWidget.setCurrentIndex(index)  #set new tool tab as curent tab\n        self.TooltabWidget.setTabToolTip(index, tool_name)  #set new-tab tool tip\n        return newtool\n\n    def handle_toolTabCloseRequested(self, index):\n        """"""Delete a Tool tab""""""\n        tool_name = self.TooltabWidget.widget(index).name\n        self.do_tool_delete(tool_name)  #call DataSet.do_theory_delete\n        self.TooltabWidget.removeTab(index)\n        self.update_all_ds_plots()\n\n    def handle_toolTabMoved(self, f, t):\n        self.tools.insert(f, self.tools.pop(t))\n        self.update_all_ds_plots()\n\n\n    def handle_actionAutoscale(self, checked):\n        self.autoscale = not checked\n        if self.autoscale:\n            self.actionAutoscale.setIcon(QIcon(\':/Images/Images/new_icons/icons8-padlock-96.png\'))\n        else:\n            self.actionAutoscale.setIcon(QIcon(\':/Images/Images/new_icons/icons8-lock-96.png\'))\n\n    def dataset_actions_disabled(self, state):\n        """"""Disable buttons when there is no file in the dataset""""""\n        self.actionMarkerSettings.setDisabled(state)\n        self.viewComboBox.setDisabled(state)\n        self.actionSave_View.setDisabled(state)\n        self.actionReload_Data.setDisabled(state)\n        self.actionInspect_Data.setDisabled(state)\n        self.actionShowFigureTools.setDisabled(state)\n        self.actionView_All_Sets.setDisabled(state)\n        self.actionAutoscale.setDisabled(state)\n\n        ds = self.DataSettabWidget.currentWidget()\n        if ds:\n            ds.actionNew_Theory.setDisabled(state)\n            ds.cbtheory.setDisabled(state)\n\n    def add_annotation(self, action_trig=False, text=None, x=0, y=0, annotation_opts={}):\n        if self.current_viewtab == 0:\n            ax = self.axarr[0]\n        else:\n            ax = self.axarr[self.current_viewtab - 1]\n        if text is None:\n            # annotation from user\n            if self._event is None:\n                return\n            if self._annotation_done:\n                return\n            text, ok = QInputDialog.getText(self, \'Annotation (LaTeX allowed)\', \'Enter the annotation text:\')\n            if ok:\n                ann = ax.annotate(text, xy=(self._event.xdata, self._event.ydata), xytext=(self._event.xdata, self._event.ydata), **self.annotation_opts)\n                self.graphicnotes.append(ann)\n                self.artistnotes.append(DraggableNote(ann, DragType.both, None, self.edit_annotation))\n                self.canvas.draw()\n            self._annotation_done = True\n        else:\n            # annotation from project loading\n            ann = ax.annotate(text, xy=(x, y), **annotation_opts)\n            self.graphicnotes.append(ann)\n            self.artistnotes.append(DraggableNote(ann, DragType.both, None, self.edit_annotation))\n            self.canvas.draw()\n\n    def edit_annotation(self, artist):\n        d = EditAnnotation(self, artist)\n        d.exec_()\n        self.canvas.draw()\n\n    def update_legend(self):\n        if self.current_viewtab == 0:\n            ax = self.axarr[0]\n        else:\n            ax = self.axarr[self.current_viewtab - 1]\n\n        if not (self.dialog.ui.cb_show_legend.isChecked() and self.DataSettabWidget.currentWidget()):\n            # remove legend when button unchecked or when no dataset\n            try:\n                self.legend.remove()\n            except:\n                pass # no legend to remove\n        else:\n            L=[]\n            N=[]\n            ds = self.DataSettabWidget.currentWidget()\n            if self.default_legend_labels:\n                # set default legend from app parameters\n                self.legend_labels = r""""\n                ftype = list(self.filetypes.values())[0]\n                for p in ftype.basic_file_parameters:\n                    self.legend_labels += p + \' = [\' + p + \'] \'\n            params = re.findall(r""\\[([A-Za-z0-9_]+)\\]"", self.legend_labels)\n            for j, file in enumerate(ds.files):\n                if file.active:\n                    dt = file.data_table\n                    s = dt.series[0][0]\n                    L.append(s)\n                    label = self.legend_labels\n                    for p in params:\n                        if p in file.file_parameters:\n                            val = file.file_parameters[p]\n                            try:\n                                val = ""%g"" % float(val) #format number\n                            except ValueError:\n                                pass\n                            label = label.replace(\'[\'+p+\']\', str(val))\n                    N.append(label)\n            try:\n                self.legend = ax.legend(L, N, **self.legend_opts)\n            except TypeError:\n                # ""title_fontsize"" key invalid for Matplotlib < 3.0.0\n                tempdic = self.legend_opts.copy()\n                tempdic.pop(""title_fontsize"", None)\n                self.legend = ax.legend(L, N, **tempdic)\n\n            self.legend.set_draggable(self.legend_draggable)\n\n            try:\n                self.canvas.draw()\n            except Exception as e:\n                txt=""""\n                txt+=""Exception: %s\\n""%traceback.format_exc()\n                txt+=""\\nPlease, check the TITLE and/or LEGEND below:\\n\\n""\n                if (self.legend_opts[""title""]!=None):\n                    txt+=""TITLE: ""+self.legend_opts[""title""]+""\\n""\n                txt+=""FIRST LEGEND ITEM: ""+N[0]\n                QMessageBox.warning(self, \'Wrong Title or labels in legend\', txt)\n\n    def populate_cbPalette(self):\n        """"""Populate the list color palettes in the marker-settings dialog""""""\n        for palette in sorted(ColorMode.colorpalettes.value):\n            self.dialog.ui.cbPalette.addItem(palette)\n\n    def populate_cbTheoryLine(self):\n        """"""Populate the list theory linestyle in the marker-settings dialog""""""\n        for ls in ThLineMode.linestyles.value:\n            self.dialog.ui.cbTheoryLine.addItem(ls)\n\n    def populate_cbSymbolType(self):\n        """"""Populate the list of the markers in the marker-settings dialog\n\n        Populate the list of the markers of the marker-settings dialog\n        with filled or empty markers, depending on the user\'s choice\n        """"""\n        self.dialog.ui.cbSymbolType.clear()\n        if self.dialog.ui.rbFilled.isChecked(): #combobox with fillable symbols only\n            for m in SymbolMode.filledmarkernames.value:\n                ipath = \':/Markers/Images/Matplotlib_markers/marker_%s.png\'%m\n                self.dialog.ui.cbSymbolType.addItem(QIcon(ipath), m)\n        else: #combobox with all symbols only\n            for m in SymbolMode.allmarkernames.value:\n                ipath = \':/Markers/Images/Matplotlib_markers/marker_%s.png\'%m\n                self.dialog.ui.cbSymbolType.addItem(QIcon(ipath), m)\n\n    def handle_pickColor1(self):\n        """"""Call the color picker and save the selected color to `color1` in RGB format""""""\n        color = self.showColorDialog()\n        if color: #check for none\n            self.dialog.ui.labelPickedColor1.setStyleSheet(""background: %s""%color.name())\n            self.color1 = color.getRgbF()\n\n    def handle_pickColor2(self):\n        """"""Call the color picker and save the selected color to `color2` in\n        RGB format used for gradient color type""""""\n        color = self.showColorDialog()\n        if color:\n            self.dialog.ui.labelPickedColor2.setStyleSheet(""background: %s""%color.name())\n            self.color2 = color.getRgbF()\n\n    def handle_pickThColor(self):\n        """"""Call the color picker and save the selected theory line color in\n        RGB format used for gradient color type""""""\n        color = self.showColorDialog()\n        if color:\n            self.dialog.ui.labelThPickedColor.setStyleSheet(""background: %s""%color.name())\n            self.color_th = color.getRgbF()\n\n    def handle_pickFaceColor(self):\n        """"""Call the color picker and save the selected legend face color in\n        RGB format in the dataset legend info.""""""\n        color = self.showColorDialog()\n        if color:\n            self.dialog.ui.labelFaceColor.setStyleSheet(""background: %s""%color.name())\n            self.legend_opts[\'facecolor\']=color.getRgbF()\n\n    def handle_pickEdgeColor(self):\n        """"""Call the color picker and save the selected legend face color in\n        RGB format in the dataset legend info.""""""\n        color = self.showColorDialog()\n        if color:\n            self.dialog.ui.labelEdgeColor.setStyleSheet(""background: %s""%color.name())\n            self.legend_opts[\'edgecolor\']=color.getRgbF()\n\n    def handle_pickFontColor(self):\n        """"""Call the color picker and save the selected legend face color in\n        RGB format in the dataset legend info.""""""\n        color = self.showColorDialog()\n        if color:\n            self.dialog.ui.labelFontColor.setStyleSheet(""background: %s""%color.name())\n            self.annotation_opts[\'color\']=color.getRgbF()\n\n    def handle_pickFontColor_ax(self):\n        """"""Call the color picker and save the selected legend face color in\n        RGB format in the dataset legend info.""""""\n        color = self.showColorDialog()\n        if color:\n            self.dialog.ui.labelFontColor_ax.setStyleSheet(""background: %s""%color.name())\n            self.ax_opts[\'color_ax\'] = color.getRgbF()\n\n    def handle_pickFontColor_label(self):\n        """"""Call the color picker and save the selected legend face color in\n        RGB format in the dataset legend info.""""""\n        color = self.showColorDialog()\n        if color:\n            self.dialog.ui.labelFontColor_label.setStyleSheet(""background: %s""%color.name())\n            self.ax_opts[\'color_label\'] = color.getRgbF()\n\n    def handle_reset_all_pb(self):\n        self.ax_opts = self.ax_opt_defaults.copy()\n        self.set_axis_marker_settings()\n\n    def showColorDialog(self):\n        """"""Show the color picker and return the picked QtColor or `None`""""""\n        ds = self.DataSettabWidget.currentWidget()\n        if ds:\n            wtitle = ""Select color for %s""%ds.name\n            color = QColorDialog.getColor(title=wtitle,\n                options=QColorDialog.DontUseNativeDialog)\n            if not color.isValid():\n                color = None\n            return color\n\n    def handle_actionMarkerSettings(self):\n        """"""Show the dialog box where the user can change\n        the marker properties: size, shape, color, fill""""""\n        ds = self.DataSettabWidget.currentWidget()\n        if not ds:\n            return\n        self.fparam_backup = []\n        for file in ds.files:\n            self.fparam_backup.append([file.color, file.marker, file.size, file.filled])\n\n        #preset the colors in the labels\n        col = QColor(ds.color1[0]*255, ds.color1[1]*255, ds.color1[2]*255)\n        self.dialog.ui.labelPickedColor1.setStyleSheet(""background: %s""%col.name())\n        col = QColor(ds.color2[0]*255, ds.color2[1]*255, ds.color2[2]*255)\n        self.dialog.ui.labelPickedColor2.setStyleSheet(""background: %s""%col.name())\n        col = QColor(ds.th_color[0]*255, ds.th_color[1]*255, ds.th_color[2]*255)\n        self.dialog.ui.labelThPickedColor.setStyleSheet(""background: %s""%col.name())\n        #preset the spinbox\n        self.dialog.ui.spinBox.setValue(ds.marker_size)\n        self.dialog.ui.spinBoxLineW.setValue(ds.line_width)\n        self.dialog.ui.sbThLineWidth.setValue(ds.th_line_width)\n        #preset radioButtons\n            #symbols\n        is_fixed = ds.symbolmode == SymbolMode.fixed.value\n        self.dialog.ui.rbFixedSymbol.setChecked(is_fixed)\n        # self.dialog.ui.rbVariableSymbol.setChecked(not is_fixed)\n        self.dialog.ui.cbSymbolType.setDisabled(not is_fixed)\n        #preset the color combobox\n        ind = self.dialog.ui.cbPalette.findText(ds.palette_name)\n        self.dialog.ui.cbPalette.setCurrentIndex(ind)\n        #preset radiobutton theory\n        if ds.th_line_mode == ThLineMode.as_data.value:\n            self.dialog.ui.rbThSameColor.click()\n        else:\n            self.dialog.ui.rbThFixedColor.click()\n\n\n            #colors\n        # self.dialog.ui.rbFixedColor.setChecked(False)\n        # self.dialog.ui.rbGradientColor.setChecked(False)\n        # self.dialog.ui.rbPalette.setChecked(False)\n        if ds.colormode == ColorMode.fixed.value:\n            self.dialog.ui.rbFixedColor.click()\n        elif ds.colormode == ColorMode.gradient.value:\n            self.dialog.ui.rbGradientColor.click()\n        else:\n            self.dialog.ui.rbPalette.click()\n\n        # Legend stuff\n        self.dialog.ui.locationComboBox.setCurrentText(self.legend_opts[\'loc\'])\n        self.dialog.ui.colSpinBox.setValue(self.legend_opts[\'ncol\'])\n        self.dialog.ui.fontsizeSpinBox.setValue(self.legend_opts[\'fontsize\'])\n        self.dialog.ui.markerfirstCheckBox.setChecked(self.legend_opts[\'markerfirst\'])\n        self.dialog.ui.frameonCheckBox.setChecked(self.legend_opts[\'frameon\'])\n        self.dialog.ui.fancyboxCheckBox.setChecked(self.legend_opts[\'fancybox\'])\n        self.dialog.ui.shadowCheckBox.setChecked(self.legend_opts[\'shadow\'])\n        if (self.legend_opts[\'framealpha\']==None):\n            self.dialog.ui.framealphaCheckBox.setChecked(False)\n            self.dialog.ui.framealphaSpinBox.setValue(0.0)\n        else:\n            self.dialog.ui.framealphaCheckBox.setChecked(True)\n            self.dialog.ui.framealphaSpinBox.setValue(self.legend_opts[\'framealpha\'])\n        if (self.legend_opts[\'facecolor\']==None):\n            self.dialog.ui.facecolorCheckBox.setChecked(False)\n        else:\n            self.dialog.ui.facecolorCheckBox.setChecked(True)\n            col = QColor(self.legend_opts[\'facecolor\'][0]*255, self.legend_opts[\'facecolor\'][1]*255, self.legend_opts[\'facecolor\'][2]*255)\n            self.dialog.ui.labelFaceColor.setStyleSheet(""background: %s""%col.name())\n        if (self.legend_opts[\'edgecolor\']==None):\n            self.dialog.ui.edgecolorCheckBox.setChecked(False)\n        else:\n            self.dialog.ui.edgecolorCheckBox.setChecked(True)\n            col = QColor(self.legend_opts[\'edgecolor\'][0]*255, self.legend_opts[\'edgecolor\'][1]*255, self.legend_opts[\'edgecolor\'][2]*255)\n            self.dialog.ui.labelEdgeColor.setStyleSheet(""background: %s""%col.name())\n        self.dialog.ui.modeCheckBox.setChecked(self.legend_opts[\'mode\']==\'expand\')\n        if (self.legend_opts[\'title\']==None):\n            self.dialog.ui.legendtitleCheckBox.setChecked(False)\n        else:\n            self.dialog.ui.legendtitleCheckBox.setChecked(True)\n            self.dialog.ui.legendtitleStr.setText(self.legend_opts[\'title\'])\n        if (self.legend_opts[\'borderpad\']==None):\n            self.dialog.ui.borderpadCheckBox.setChecked(False)\n        else:\n            self.dialog.ui.borderpadCheckBox.setChecked(True)\n            self.dialog.ui.borderpadSpinBox.setValue(self.legend_opts[\'borderpad\'])\n        if (self.legend_opts[\'labelspacing\']==None):\n            self.dialog.ui.labelspacingCheckBox.setChecked(False)\n        else:\n            self.dialog.ui.labelspacingCheckBox.setChecked(True)\n            self.dialog.ui.labelspacingSpinBox.setValue(self.legend_opts[\'labelspacing\'])\n        if (self.legend_opts[\'handletextpad\']==None):\n            self.dialog.ui.handletextpadCheckBox.setChecked(False)\n        else:\n            self.dialog.ui.handletextpadCheckBox.setChecked(True)\n            self.dialog.ui.handletextpadSpinBox.setValue(self.legend_opts[\'handletextpad\'])\n        if (self.legend_opts[\'columnspacing\']==None):\n            self.dialog.ui.columnspacingCheckBox.setChecked(False)\n        else:\n            self.dialog.ui.columnspacingCheckBox.setChecked(True)\n            self.dialog.ui.columnspacingSpinBox.setValue(self.legend_opts[\'columnspacing\'])\n        if (self.default_legend_labels == True):\n            self.dialog.ui.legendlabelCheckBox.setChecked(False)\n            str = """"\n            ftype = list(self.filetypes.values())[0]\n            for p in ftype.basic_file_parameters:\n                str += p + \' = [\' + p + \'] \'\n            self.dialog.ui.legendlabelStr.setText(str)\n        else:\n            self.dialog.ui.legendlabelCheckBox.setChecked(True)\n            self.dialog.ui.legendlabelStr.setText(self.legend_labels)\n        self.dialog.ui.draggableCheckBox.setChecked(self.legend_draggable)\n\n\n        # Annotation stuff\n        self.dialog.ui.rotationSpinBox.setValue(self.annotation_opts[\'rotation\'])\n        self.dialog.ui.hacomboBox.setCurrentText(self.annotation_opts[\'horizontalalignment\'])\n        self.dialog.ui.vacomboBox.setCurrentText(self.annotation_opts[\'verticalalignment\'])\n        col = QColor(self.annotation_opts[\'color\'][0]*255, self.annotation_opts[\'color\'][1]*255, self.annotation_opts[\'color\'][2]*255)\n        self.dialog.ui.labelFontColor.setStyleSheet(""background: %s""%col.name())\n        self.dialog.ui.fontweightComboBox.setCurrentText(self.annotation_opts[\'fontweight\'])\n        self.dialog.ui.fontstyleComboBox.setCurrentText(self.annotation_opts[\'style\'])\n        self.dialog.ui.fontsizeannotationSpinBox.setValue(self.annotation_opts[\'fontsize\'])\n        self.dialog.ui.framealphaannotationSpinBox.setValue(self.annotation_opts[\'alpha\'])\n        self.dialog.ui.fontfamilyComboBox.setCurrentText(self.annotation_opts[\'family\'])\n        #Axis stuff\n        self.set_axis_marker_settings()\n\n        success = self.dialog.exec_() #this blocks the rest of the app as opposed to .show()\n        if success == 1:\n            self.handle_apply_button_pressed()\n        else:\n            ds.do_plot()\n\n    def set_axis_marker_settings(self):\n        col = QColor(self.ax_opts[\'color_label\'][0]*255, self.ax_opts[\'color_label\'][1]*255, self.ax_opts[\'color_label\'][2]*255)\n        self.dialog.ui.labelFontColor_label.setStyleSheet(""background: %s""%col.name())\n        col = QColor(self.ax_opts[\'color_ax\'][0]*255, self.ax_opts[\'color_ax\'][1]*255, self.ax_opts[\'color_ax\'][2]*255)\n        self.dialog.ui.labelFontColor_ax.setStyleSheet(""background: %s""%col.name())\n        self.dialog.ui.fontweightComboBox_ax.setCurrentText(self.ax_opts[\'fontweight\'])\n        self.dialog.ui.fontstyleComboBox_ax.setCurrentText(self.ax_opts[\'style\'])\n        self.dialog.ui.fontsizeSpinBox_ax.setValue(self.ax_opts[\'fontsize\'])\n        self.dialog.ui.fontfamilyComboBox_ax.setCurrentText(self.ax_opts[\'family\'])\n        self.dialog.ui.axis_thickness_cb.setValue(self.ax_opts[\'axis_thickness\'])\n        self.dialog.ui.tick_label_size_cb.setValue(self.ax_opts[\'tick_label_size\'])\n        self.dialog.ui.grid_cb.setChecked(bool(self.ax_opts[\'grid\']))\n        self.dialog.ui.label_size_auto_cb.setChecked(bool(self.ax_opts[\'label_size_auto\']))\n        self.dialog.ui.tick_label_size_auto_cb.setChecked(bool(self.ax_opts[\'tick_label_size_auto\']))\n\n    def handle_apply_button_pressed(self):\n        """"""Apply the selected marker properties to all the files in the current dataset""""""\n        ds = self.DataSettabWidget.currentWidget()\n        if ds:\n            #find the color mode\n            if self.dialog.ui.rbFixedColor.isChecked(): #fixed color?\n                ds.colormode = ColorMode.fixed.value\n                ds.color1 = self.color1 if self.color1 else ColorMode.color1.value\n            elif self.dialog.ui.rbPalette.isChecked(): #color from palette?\n                ds.colormode = ColorMode.variable.value\n                ds.palette_name = self.dialog.ui.cbPalette.currentText()\n                # ds.palette = ColorMode.colorpalettes.value[palette_name]\n            else: # color from gradient\n                ds.colormode = ColorMode.gradient.value\n                ds.color1 = self.color1 if self.color1 else ColorMode.color1.value\n                ds.color2 = self.color2 if self.color2 else ColorMode.color2.value\n\n            #find Theory color mode\n            if self.dialog.ui.rbThSameColor.isChecked():\n                ds.th_line_mode = ThLineMode.as_data.value\n            else:\n                ds.th_line_mode = ThLineMode.fixed.value\n                ds.th_color = self.color_th if self.color_th else ThLineMode.color.value\n\n            #find the shape mode\n            if self.dialog.ui.rbVariableSymbol.isChecked(): #variable symbols?\n                if self.dialog.ui.rbFilled.isChecked(): #filled?\n                    ds.symbolmode = SymbolMode.variablefilled.value\n                else: #empty\n                    ds.symbolmode = SymbolMode.variable.value\n            else: #single symbol\n                ind = self.dialog.ui.cbSymbolType.currentIndex()\n                if self.dialog.ui.rbFilled.isChecked(): #filled?\n                    ds.symbolmode = SymbolMode.fixedfilled.value\n                    ds.symbol1 = SymbolMode.filledmarkers.value[ind]\n                    ds.symbol1_name = self.dialog.ui.cbSymbolType.currentText()\n                else: #empty\n                    ds.symbolmode = SymbolMode.fixed.value\n                    ds.symbol1 = SymbolMode.allmarkers.value[ind]\n                    ds.symbol1_name = self.dialog.ui.cbSymbolType.currentText()\n\n\n            #get the marker size\n            ds.marker_size = self.dialog.ui.spinBox.value()\n            #get the line width\n            ds.line_width = self.dialog.ui.spinBoxLineW.value()\n            #get the theory linestyle\n            ds.th_linestyle = self.dialog.ui.cbTheoryLine.currentText()\n            #get the theory line width\n            ds.th_line_width = self.dialog.ui.sbThLineWidth.value()\n\n            # ds.DataSettreeWidget.blockSignals(True) #avoid triggering \'itemChanged\' signal that causes a call to do_plot()\n            ds.set_table_icons(ds.table_icon_list)\n            # ds.DataSettreeWidget.blockSignals(False)\n\n            # Legend stuff\n            self.legend_opts[\'loc\'] = self.dialog.ui.locationComboBox.currentText()\n            self.legend_opts[\'ncol\'] = self.dialog.ui.colSpinBox.value()\n            self.legend_opts[\'title_fontsize\'] = self.legend_opts[\'fontsize\'] = self.dialog.ui.fontsizeSpinBox.value()\n            self.legend_opts[\'markerfirst\'] = self.dialog.ui.markerfirstCheckBox.isChecked()\n            self.legend_opts[\'frameon\'] = self.dialog.ui.frameonCheckBox.isChecked()\n            self.legend_opts[\'fancybox\'] = self.dialog.ui.fancyboxCheckBox.isChecked()\n            self.legend_opts[\'shadow\'] = self.dialog.ui.shadowCheckBox.isChecked()\n            if (self.dialog.ui.framealphaCheckBox.isChecked()):\n                self.legend_opts[\'framealpha\'] = self.dialog.ui.framealphaSpinBox.value()\n            else:\n                self.legend_opts[\'framealpha\'] = None\n            if (self.dialog.ui.facecolorCheckBox.isChecked()):\n                pass\n            else:\n                self.legend_opts[\'facecolor\'] = None\n            if (self.dialog.ui.edgecolorCheckBox.isChecked()):\n                pass\n            else:\n                self.legend_opts[\'edgecolor\'] = None\n            if (self.dialog.ui.modeCheckBox.isChecked()):\n                self.legend_opts[\'mode\'] = \'expand\'\n            else:\n                self.legend_opts[\'mode\'] = None\n            if (self.dialog.ui.legendtitleCheckBox.isChecked()):\n                self.legend_opts[\'title\'] = r""""+self.dialog.ui.legendtitleStr.text()\n            else:\n                self.legend_opts[\'title\'] = None\n            if (self.dialog.ui.borderpadCheckBox.isChecked()):\n                self.legend_opts[\'borderpad\'] = self.dialog.ui.borderpadSpinBox.value()\n            else:\n                self.legend_opts[\'borderpad\'] = None\n            if (self.dialog.ui.labelspacingCheckBox.isChecked()):\n                self.legend_opts[\'labelspacing\'] = self.dialog.ui.labelspacingSpinBox.value()\n            else:\n                self.legend_opts[\'labelspacing\'] = None\n            if (self.dialog.ui.handletextpadCheckBox.isChecked()):\n                self.legend_opts[\'handletextpad\'] = self.dialog.ui.handletextpadSpinBox.value()\n            else:\n                self.legend_opts[\'handletextpad\'] = None\n            if (self.dialog.ui.columnspacingCheckBox.isChecked()):\n                self.legend_opts[\'columnspacing\'] = self.dialog.ui.columnspacingSpinBox.value()\n            else:\n                self.legend_opts[\'columnspacing\'] = None\n            if (self.dialog.ui.legendlabelCheckBox.isChecked()):\n                self.default_legend_labels = False\n                self.legend_labels = self.dialog.ui.legendlabelStr.text()\n            else:\n                self.default_legend_labels = True\n            self.legend_draggable = self.dialog.ui.draggableCheckBox.isChecked()\n\n            # Annotation stuff\n            self.annotation_opts[\'alpha\'] = self.dialog.ui.framealphaannotationSpinBox.value()\n            self.annotation_opts[\'family\'] = self.dialog.ui.fontfamilyComboBox.currentText()\n            self.annotation_opts[\'horizontalalignment\'] = self.dialog.ui.hacomboBox.currentText()\n            self.annotation_opts[\'rotation\'] = self.dialog.ui.rotationSpinBox.value()\n            self.annotation_opts[\'fontsize\'] = self.dialog.ui.fontsizeannotationSpinBox.value()\n            self.annotation_opts[\'style\'] = self.dialog.ui.fontstyleComboBox.currentText()\n            self.annotation_opts[\'verticalalignment\'] = self.dialog.ui.vacomboBox.currentText()\n            self.annotation_opts[\'fontweight\'] = self.dialog.ui.fontweightComboBox.currentText()\n\n            #Axis stuff\n            self.ax_opts[\'family\'] = self.dialog.ui.fontfamilyComboBox_ax.currentText()\n            self.ax_opts[\'fontsize\'] = self.dialog.ui.fontsizeSpinBox_ax.value()\n            self.ax_opts[\'style\'] = self.dialog.ui.fontstyleComboBox_ax.currentText()\n            self.ax_opts[\'fontweight\'] = self.dialog.ui.fontweightComboBox_ax.currentText()\n            self.ax_opts[\'axis_thickness\'] = self.dialog.ui.axis_thickness_cb.value()\n            self.ax_opts[\'tick_label_size\'] = self.dialog.ui.tick_label_size_cb.value()\n            self.ax_opts[\'grid\'] = int(self.dialog.ui.grid_cb.isChecked())\n            self.ax_opts[\'label_size_auto\'] = int(self.dialog.ui.label_size_auto_cb.isChecked())\n            self.ax_opts[\'tick_label_size_auto\'] = int(self.dialog.ui.tick_label_size_auto_cb.isChecked())\n            self.resizeplot()\n            ds.do_plot() # update plot and legend\n\n    def handle_inspectorVisibilityChanged(self, visible):\n        """"""Handle the hide/show event of the data inspector""""""\n        self.actionInspect_Data.setChecked(visible)\n        if visible:\n            ds = self.DataSettabWidget.currentWidget()\n            if ds:\n                ds.populate_inspector()\n        else:\n            self.disconnect_curve_drag()\n\n    def handle_actionViewShiftTriggered(self):\n        ds = self.DataSettabWidget.currentWidget()\n        if ds is None:\n            return\n        fnames = [file.file_name_short for file in ds.files]\n        factorsx = [file.xshift for file in ds.files]\n        factorsy = [file.yshift for file in ds.files]\n        d = ViewShiftFactors(self, fnames, factorsx, factorsy)\n        if d.exec_():\n            nfiles = len(fnames)\n            ncurves = len(factorsx[0])\n            for i in range(nfiles):\n                f = ds.files[i]\n                for j in range(ncurves):\n                    f.xshift[j] = float(d.table.item(i, 2*j).text())\n                    f.yshift[j] = float(d.table.item(i, 2*j+1).text())\n\n    def handle_actionSaveShiftTriggered(self):\n        ds = self.DataSettabWidget.currentWidget()\n        if ds is None:\n            return\n        dir_start = self.dir_start\n        dilogue_name = ""Select Folder for Saving shift factors of current dataset as txt""\n        folder = QFileDialog.getExistingDirectory(self, dilogue_name, dir_start)\n        if isdir(folder):\n            with open(join(folder, \'Shift_Factors.txt\'), \'w\') as fout:\n                f0 = ds.files[0]\n                fparam = f0.file_type.basic_file_parameters\n                for pname in f0.file_parameters:\n                    if pname not in fparam:\n                        fout.write(\'%s=%s;\' % (pname, f0.file_parameters[pname]))\n                fout.write(\'\\n\')\n                for p in fparam:\n                    fout.write(\'%s \'%p)\n                ncurves = len(f0.xshift)\n                for i in range(ncurves):\n                    fout.write(\'x%d y%d \'%(i+1,i+1))\n                fout.write(\'\\n\')\n                for i, f in enumerate(ds.files):\n                    if f.active:\n                        for p in fparam:\n                            fout.write(\'%s \'%f.file_parameters[p])\n                        for j in range(ncurves):\n                            fout.write(\'%g %g \'%(f.xshift[j], f.yshift[j]))\n                        fout.write(\'\\n\')\n\n\n    def handle_actionResetShiftTriggered(self):\n        ds = self.DataSettabWidget.currentWidget()\n        if ds is None:\n            return\n        for file in ds.files:\n            file.xshift = [0]*DataTable.MAX_NUM_SERIES\n            file.yshift = [0]*DataTable.MAX_NUM_SERIES\n            file.isshifted = [False]*DataTable.MAX_NUM_SERIES\n            ds.do_plot()\n        for i in range(DataTable.MAX_NUM_SERIES):\n            for j in range(2):\n                item = self.shiftTable.item(i, j)\n                item.setText(""0"")\n\n    def handle_actionShiftTriggered(self):\n        """"""Allow the current \'selected_file\' to be dragged""""""\n        self.shiftTable.setVisible((self.actionShiftHorizontally.isChecked() or self.actionShiftVertically.isChecked()))\n        ds = self.DataSettabWidget.currentWidget()\n        if not ds.selected_file:\n            return\n        moveH = self.actionShiftHorizontally.isChecked()\n        moveV = self.actionShiftVertically.isChecked()\n        if moveH and moveV:\n            mode = DragType.both\n        elif moveH:\n            mode = DragType.horizontal\n        elif moveV:\n            mode = DragType.vertical\n        else:\n            self.disconnect_curve_drag()\n            return\n        for curve in self.curves:\n            curve.disconnect()\n        self.curves.clear()\n\n        for i, curve in enumerate(ds.selected_file.data_table.series[0]): #drag allowed on axarr[0] only\n            x, y, success = self.current_view.view_proc(ds.selected_file.data_table, ds.selected_file.file_parameters)\n            cur = DraggableSeries(curve, mode, self.current_view.log_x, self.current_view.log_y, xref=x[0], yref=y[0], function=self.update_shifts, functionendshift=self.finish_shifts, index=i)\n            self.curves.append(cur)\n\n    def update_shifts(self, dx, dy, index):\n        ds = self.DataSettabWidget.currentWidget()\n        if not ds.selected_file:\n            return\n        item = self.shiftTable.item(index, 0)\n        item.setText(""%g""%(ds.selected_file.xshift[index]+dx))\n        item = self.shiftTable.item(index, 1)\n        item.setText(""%g""%(ds.selected_file.yshift[index]+dy))\n\n\n    def finish_shifts(self, dx, dy, index):\n        ds = self.DataSettabWidget.currentWidget()\n        if not ds.selected_file:\n            return\n        ds.selected_file.xshift[index]+=dx\n        ds.selected_file.yshift[index]+=dy\n        ds.selected_file.isshifted[index] = True\n\n    def disconnect_curve_drag(self):\n        """"""Remove the Matplotlib drag connections\n        and reset the shift buttons in the data inspector""""""\n        for curve in self.curves:\n            curve.disconnect()\n        self.curves.clear()\n        #self.actionShiftHorizontally.setChecked(False)\n        #self.actionShiftVertically.setChecked(False)\n\n    def handle_actionReload_Data(self):\n        """"""Reload the data files in the current DataSet""""""\n        ds = self.DataSettabWidget.currentWidget()\n        if not ds:\n            return\n        ds.do_reload_data()\n\n    # def handle_actionReload_Data(self):\n    #     """"""Reload the data files: remove and reopen the current files\n\n    #     [description]\n    #     """"""\n    #     ds = self.DataSettabWidget.currentWidget()\n    #     if not ds:\n    #         return\n    #     self.disconnect_curve_drag()\n    #     paths_to_reopen, th_to_reopen, success = self.clear_files_and_th_from_dataset(ds)\n    #     if success:\n    #         if paths_to_reopen:\n    #             self.new_tables_from_files(paths_to_reopen)\n    #         for th_name, tab_name in th_to_reopen:\n    #             ds.new_theory(th_name, tab_name)\n    #     else:\n    #         QMessageBox.warning(self, \'Reload Error\', \'Error in locating some data files\')\n\n    # def clear_files_and_th_from_dataset(self, ds):\n    #     """"""Remove all files from dataset and widgetTree,\n    #     return a list with the full path of deleted files and opened theories""""""\n    #     file_paths_cleaned = []\n    #     th_cleaned = []\n    #     #save file names\n    #     for f in ds.files:\n    #         fpath = f.file_full_path\n    #         print(fpath)\n    #         if not isfile(fpath):\n    #             return None, None, False\n    #         file_paths_cleaned.append(fpath)\n    #     #remove lines from figure\n    #     self.remove_ds_ax_lines(ds.name)\n    #     ds.set_no_limits(ds.current_theory)\n    #     #remove tables from ds\n    #     ntable = ds.DataSettreeWidget.topLevelItemCount()\n    #     for i in range(ntable):\n    #         ds.DataSettreeWidget.takeTopLevelItem(0)\n    #     #save theory tabs of ds\n    #     ntabs = ds.TheorytabWidget.count()\n    #     for i in range(ntabs):\n    #         th = ds.TheorytabWidget.widget(0)\n    #         try:\n    #             th.destructor()\n    #         except:\n    #             pass\n    #         thname = th.thname\n    #         thtabname = ds.TheorytabWidget.tabText(0)\n    #         th_cleaned.append((thname, thtabname))\n    #         ds.TheorytabWidget.removeTab(0)\n\n    #     ds.files.clear()\n    #     ds.theories.clear()\n    #     return file_paths_cleaned, th_cleaned, True\n\n    def handle_actionView_All_SetTheories(self, checked):\n        ds = self.DataSettabWidget.currentWidget()\n        if ds:\n            for th in ds.theories.values():\n                th.do_show()\n\n    def handle_actionView_All_Sets(self, checked):\n        """"""Show all datasets simultaneously""""""\n        if len(self.datasets) < 2:\n            return\n        if checked:\n            for ds in self.datasets.values():\n                ds.Qshow_all()\n                ds.highlight_series()\n        else:\n            #trigger a false change of tab to hide other dataset files from figure\n            self.handle_currentChanged(self.DataSettabWidget.currentIndex())\n        self.update_Qplot()\n\n    def handle_currentChanged(self, index):\n        """"""Change figure when the active DataSet tab is changed\n        and empty the dataInspector""""""\n        if self.actionView_All_Sets.isChecked():\n            return\n        ds = self.DataSettabWidget.widget(index)\n        if ds:\n            disable_buttons = True if not ds.files else False\n            self.dataset_actions_disabled(disable_buttons) # disable/activate buttons buttons\n            ntab = self.DataSettabWidget.count()\n            for i in range(ntab):\n                if i!=index:\n                    ds_to_hide = self.DataSettabWidget.widget(i) #hide files of all datasets except current one\n                    ds_to_hide.do_hide_all("""")\n                    ds_to_hide.set_no_limits(ds_to_hide.current_theory)\n            ds.Qshow_all() #show all data of current dataset, except previously unticked files\n            ds.highlight_series()\n            ds.populate_inspector()\n        else: # handle case where no dataset is left\n            self.dataset_actions_disabled(True)\n            self.inspector_table.setRowCount(0) #empty the inspector\n            self.DataInspectordockWidget.setWindowTitle(""File:"")\n        self.update_Qplot()\n\n    def handle_doubleClickTab(self, index):\n        """"""Edit DataSet name\n\n        Edit the dataset tab name, leave the \'dataset\' dictionary keys unchanged.\n        Two datasets can share the sae name.""""""\n        old_name = self.DataSettabWidget.tabText(index)\n        dlg = QInputDialog(self)\n        dlg.setWindowTitle(""Change DataSet Name"")\n        dlg.setLabelText(""New DataSet Name:"")\n        dlg.setTextValue(old_name)\n        dlg.resize(400,100)\n        success = dlg.exec()\n        new_tab_name = dlg.textValue()\n        if (success and new_tab_name!=""""):\n            self.DataSettabWidget.setTabText(index, new_tab_name)\n            # self.datasets[old_name].name = new_tab_name\n            # self.datasets[new_tab_name] = self.datasets.pop(old_name)\n\n    def close_data_tab_handler(self, index):\n        """"""Delete a dataset tab from the current application""""""\n        ds = self.DataSettabWidget.widget(index)\n        if index == self.DataSettabWidget.currentIndex():\n            self.disconnect_curve_drag()\n            ds.set_no_limits(ds.current_theory)\n        self.delete(ds.name) #call Application.delete to delete DataSet\n        self.DataSettabWidget.removeTab(index)\n        self.update_legend()\n\n    def handle_change_view(self):\n        self.change_view()\n\n    def change_view(self, x_vis=False, y_vis=False):\n        """"""Change plot view""""""\n        selected_view_name = self.viewComboBox.currentText()\n        ds = self.DataSettabWidget.currentWidget()\n        if ds:\n            if ds.current_theory:\n                ds.theories[ds.current_theory].is_xrange_visible = x_vis\n                ds.theories[ds.current_theory].is_yrange_visible = y_vis\n                ds.theories[ds.current_theory].set_xy_limits_visible(x_vis, y_vis)\n\n        self.view_switch(selected_view_name) #view_switch of Application\n        self.set_view_tools(selected_view_name)\n        self.update_Qplot()\n        self.disconnect_curve_drag()\n        if ds:\n            ds.highlight_series()\n\n    def dragEnterEvent(self, e):\n        """"""Drag and drop stuff""""""\n        if e.mimeData().hasUrls():\n            e.accept()\n        else:\n            e.ignore()\n\n    def dropEvent(self, e):\n        """"""Drag and drop stuff""""""\n        #reptatelogger = logging.getLogger(\'ReptateLogger\')\n        paths_to_open = []\n        for url in e.mimeData().urls():\n            path = url.toLocalFile()\n            if isfile(path):\n                paths_to_open.append(path)\n        self.new_tables_from_files(paths_to_open)\n\n    def update_Qplot(self):\n        """"""No idea. SHOULD WE DELETE THIS?""""""\n        pass\n        # try:\n        #     plt.tight_layout(pad=1.2)\n        # except:\n        #     pass\n        # self.canvas = FigureCanvas(self.figure)\n        #self.mplvl.addWidget(self.canvas)\n        # self.canvas.draw()\n\n    def addTableToCurrentDataSet(self, dt, ext):\n        """"""Add file table to curent dataset tab""""""\n        ds = self.DataSettabWidget.currentWidget()\n        lnew = []\n        for param in self.filetypes[ext].basic_file_parameters[:]:\n            try:\n                s_param = dt.file_parameters[param]\n            except KeyError as e:\n                # header = ""Missing Parameter""\n                message = ""Parameter %s not found in file \'%s\'.""%(e, dt.file_name_short)\n                # QMessageBox.warning(self, header, message)\n                self.logger.warning(message)\n            else:\n                # parameter exists\n                try:\n                    s_param = ""%.3g"" % float(s_param)\n                except ValueError:\n                    s_param = str(dt.file_parameters[param])\n                lnew.append(s_param)\n\n        file_name_short = dt.file_name_short\n        lnew.insert(0, file_name_short)\n        newitem = DataSetWidgetItem(ds.DataSettreeWidget, lnew)\n        newitem.setCheckState(0, 2)\n        self.dataset_actions_disabled(False) #activate buttons\n\n    def handle_createNew_Empty_Dataset(self):\n        """"""Called when button \'new dataset\' pushed""""""\n        self.createNew_Empty_Dataset()\n\n    def createNew_Empty_Dataset(self, tabname=\'\'):\n        """"""Add New empty tab to DataSettabWidget""""""\n        self.num_datasets += 1 #increment counter of Application\n        num = self.num_datasets\n        ds_name = \'Set%d\'%num\n        ds = QDataSet(name=ds_name, parent=self)\n        self.datasets[ds_name] = ds\n        if tabname == \'\':\n            tabname = ds_name\n        ind = self.DataSettabWidget.addTab(ds, tabname)\n\n        #Set the new tab the active tab\n        self.DataSettabWidget.setCurrentIndex(ind)\n        #Define the tab column names (header)\n        dfile = list(self.filetypes.values())[0]\n        dataset_header=dfile.basic_file_parameters[:]\n        dataset_header.insert(0, ""File"")\n        ds.DataSettreeWidget.setHeaderItem(QTreeWidgetItem(dataset_header))\n        ds.DataSettreeWidget.setSortingEnabled(True)\n\n        hd=ds.DataSettreeWidget.header()\n        hd.setSectionsClickable(True)\n        w=ds.DataSettreeWidget.width()\n        w/=hd.count()\n        for i in range(hd.count()):\n            hd.resizeSection(i, w)\n            #hd.setTextAlignment(i, Qt.AlignHCenter)\n\n        #Define the inspector column names (header)\n        if num == 1:\n            #inspect_header = dfile.col_names[:]\n            inspect_header = [a+\' [\' + b + \']\' for a,b in zip(dfile.col_names,dfile.col_units)]\n            inspec_tab = self.inspector_table.setHorizontalHeaderLabels(inspect_header)\n        return self.DataSettabWidget.widget(ind)\n\n    def openDataset(self):\n        """"""Open Files to a new Dataset""""""\n        # \'allowed_ext\' defines the allowed file extensions\n        # should be of form, e.g., ""LVE (*.tts *.osc);;Text file (*.txt)""\n        allowed_ext = """"\n        for ftype in self.filetypes.values():\n            allowed_ext += ""%s (*%s);;"" %(ftype.name, ftype.extension)\n        allowed_ext = allowed_ext.rstrip("";"")\n        paths_to_open = self.openFileNamesDialog(allowed_ext)\n        if not paths_to_open:\n            return\n        self.new_tables_from_files(paths_to_open)\n\n    def handle_action_import_from_excel(self):\n        """"""Import new data from an Excel file""""""\n        for ftype in self.filetypes.values():\n            break\n        if self.excel_import_gui is None:\n            self.excel_import_gui = ImportExcelWindow(parent=self, ftype=ftype)\n        if self.excel_import_gui.exec_():\n            res_dic = self.excel_import_gui.get_data()\n            if res_dic[""error""]:\n                QMessageBox.warning(self, ""Import Error"", res_dic[""errmsg""])\n                return\n            params = self.excel_import_gui.file_param_txt.text().split("";"")\n            fparams = {}\n            for p in params:\n                try:\n                    pname, pval = p.split(""="")\n                    fparams[pname] = pval\n                except ValueError:\n                    pass\n            for key in fparams:\n                try:\n                    fparams[key] = float(fparams[key])\n                except ValueError:\n                    pass\n            ds = self.DataSettabWidget.currentWidget()\n            if ds is None:\n                self.createNew_Empty_Dataset()\n                ds = self.DataSettabWidget.currentWidget()\n            fname = ""%s_%s_%s_%s"" % (res_dic[""file""], res_dic[""sheet""], res_dic[""col1""], res_dic[""col2""])\n            try:\n                fname += ""_%s"" % res_dic[""col3""]\n            except:\n                pass\n            f, success = ds.new_dummy_file(fname=fname+""_"", xrange=res_dic[""x""], yval=res_dic[""y""], zval=res_dic[""z""], fparams=fparams, file_type=ftype)\n            if success:\n                self.addTableToCurrentDataSet(f, ftype.extension)\n            ds.set_table_icons(ds.table_icon_list) # update the ds table marker icon\n            if res_dic[""flag_nan""]:\n                QMessageBox.warning(self, \'Open Excel File\', \'Some values could not be read from the file and were set to ""nan""\')\n\n    def handle_action_import_from_pasted(self):\n        """"""Import data from pasted text""""""\n        for ftype in self.filetypes.values():\n            break\n        if self.pasted_import_gui is None:\n            self.pasted_import_gui = ImportFromPastedWindow(parent=self, ftype=ftype)\n            self.count_pasted_data = 1\n\n        fname = ""pasted_data_%d"" % (self.count_pasted_data)\n        self.pasted_import_gui.set_fname_dialog(fname)\n        if self.pasted_import_gui.exec_():\n            res_dic = self.pasted_import_gui.get_data()\n            if res_dic[""nrows""] == 0:\n                QMessageBox.warning(self, \'Import From Pasted Data\', \'Could not read pasted data\')\n                return\n            ds = self.DataSettabWidget.currentWidget()\n            if ds is None:\n                self.createNew_Empty_Dataset()\n                ds = self.DataSettabWidget.currentWidget()\n            fparam = {}\n            for pname in ftype.basic_file_parameters:\n                fparam[pname] = 0\n            fparam.update(res_dic[""param_read""])\n            f, success = ds.new_dummy_file(fname=res_dic[""fname""] + ""_"", xrange=res_dic[""x""], yval=res_dic[""y""], zval=res_dic[""z""], z2val=res_dic[""z2""], fparams=fparam, file_type=ftype)\n            if success:\n                self.addTableToCurrentDataSet(f, ftype.extension)\n                self.count_pasted_data += 1\n            ds.set_table_icons(ds.table_icon_list) # update the ds table marker icon\n            if res_dic[""flag_nan""]:\n                QMessageBox.warning(self, \'Import From Pasted Data\', \'Some values could not be read from the file and were set to ""nan""\')\n\n    def addDummyFiles(self):\n        """"""Add dummy files to dataset""""""\n        if self.DataSettabWidget.count() == 0:\n                self.createNew_Empty_Dataset()\n        ds = self.DataSettabWidget.currentWidget()\n        ftype = self.filetypes[list(self.filetypes)[0]]\n        d = AddDummyFiles(self, ftype)\n        parameterstochange = []\n        parameterrange = []\n        parameterstokeepconstant = []\n        parametervalue = []\n        if d.exec_():\n            for i in range(d.parameterTreeWidget.topLevelItemCount()):\n                item = d.parameterTreeWidget.topLevelItem(i)\n                if item.checkState(0):\n                    parameterstochange.append(item.text(0))\n                    pmin = float(item.text(1))\n                    pmax = float(item.text(2))\n                    npoints = int(item.text(3))\n                    cb = d.parameterTreeWidget.itemWidget(item, 4)\n                    if cb.currentText() == \'Log\':\n                        prange = np.logspace(np.log10(pmin), np.log10(pmax), npoints)\n                    else:\n                        prange = np.linspace(pmin, pmax, npoints)\n                    parameterrange.append(prange)\n                else:\n                    parameterstokeepconstant.append(item.text(0))\n                    parametervalue.append(float(item.text(1)))\n\n            nparameterstochange = len(parameterstochange)\n            paramsnames = parameterstochange + parameterstokeepconstant\n            if nparameterstochange==0:\n                cases = [np.array(parametervalue)]\n            elif nparameterstochange==1:\n                cases = []\n                for i in range(len(parameterrange[0])):\n                    case = [parameterrange[0][i]] + parametervalue\n                    cases.append(np.array(case))\n            else:\n                for val in parametervalue:\n                    parameterrange.append(np.array([val]))\n                cases = list(np.array(np.meshgrid(*parameterrange)).T.reshape(-1,len(parameterrange)))\n\n            # print(paramsnames)\n            # print(cases)\n            yval = float(d.yvaluesLineEdit.text())\n            xmin = float(d.xminLineEdit.text())\n            xmax = float(d.xmaxLineEdit.text())\n            npoints = int(d.npointsLineEdit.text())\n            if d.scaleComboBox.currentText() == \'Log\':\n                xrange = np.logspace(np.log10(xmin), np.log10(xmax), npoints)\n            else:\n                xrange = np.linspace(xmin, xmax, npoints)\n            for c in cases:\n                fparams = {}\n                for i, pname in enumerate(paramsnames):\n                    fparams[pname] = c[i]\n                f, success = ds.new_dummy_file(xrange=xrange, yval=yval, fparams=fparams, file_type=ftype)\n                if success:\n                    self.addTableToCurrentDataSet(f, ftype.extension)\n\n    def addFileFunction(self):\n        ""Add a File to the current DataSet using a mathematical expression""\n        if self.DataSettabWidget.count() == 0:\n                self.createNew_Empty_Dataset()\n        ds = self.DataSettabWidget.currentWidget()\n        ftype = self.filetypes[list(self.filetypes)[0]]\n        d = AddFileFunction(self, ftype)\n        if d.exec_():\n            fparams = {}\n            for p in d.param_dict:\n                try:\n                    fparams[p] = float(d.param_dict[p].text())\n                except:\n                    fparams[p] = 0\n            xmin = float(d.lab_dict[\'xmin\'].text())\n            xmax = float(d.lab_dict[\'xmax\'].text())\n            npoints = int(d.lab_dict[\'npoints\'].text())\n            logscale = d.l_new[4].isChecked()\n            if (logscale):\n                xrange = np.logspace(np.log10(xmin), np.log10(xmax), npoints)\n            else:\n                xrange = np.linspace(xmin, xmax, npoints)\n            f, success = ds.new_dummy_file(xrange=xrange, yval=0, fparams=fparams, file_type=ftype)\n\n            if success:\n                cols = ftype.col_names\n                self.safe_dict={}\n                safe_list = [\'sin\', \'cos\', \'tan\', \'arccos\', \'arcsin\', \'arctan\', \'arctan2\', \'deg2rad\', \'rad2deg\', \'sinh\', \'cosh\', \'tanh\', \'arcsinh\', \'arccosh\', \'arctanh\', \'around\', \'round_\', \'rint\', \'floor\', \'ceil\',\'trunc\', \'exp\', \'log\', \'log10\', \'fabs\', \'mod\', \'e\', \'pi\', \'power\', \'sqrt\']\n                for k in safe_list:\n                    self.safe_dict[k] = globals().get(k, None)\n                self.safe_dict[\'x\']=xrange\n                for i, cname in enumerate(cols):  #loop over the Parameters\n                    expr = d.c_new[i].text()\n                    x2 = eval(expr, {""__builtins__"":None}, self.safe_dict)\n                    f.data_table.data[:,i] = x2\n\n                self.addTableToCurrentDataSet(f, ftype.extension)\n\n    def new_tables_from_files(self, paths_to_open):\n        """"""Create new Files in a DataSet from a list of files""""""\n        if (self.DataSettabWidget.count()==0):\n                self.createNew_Empty_Dataset()\n        ds = self.DataSettabWidget.currentWidget()\n        ds.DataSettreeWidget.blockSignals(True) #avoid triggering \'itemChanged\' signal that causes a call to do_plot()\n        success, newtables, ext = ds.do_open(paths_to_open)\n        if success==True:\n            self.check_no_param_missing(newtables, ext)\n            for dt in newtables:\n                self.addTableToCurrentDataSet(dt, ext)\n            ds.do_plot()\n            self.update_Qplot()\n            ds.set_table_icons(ds.table_icon_list)\n        else:\n            QMessageBox.about(self, ""Open"", success)\n        ds.DataSettreeWidget.blockSignals(False)\n\n    def check_no_param_missing(self, newtables, ext):\n        """"""Check""""""\n        for dt in newtables:\n            e_list = []\n            for param in self.filetypes[ext].basic_file_parameters[:]:\n                try:\n                    temp = dt.file_parameters[param]\n                    if temp == \'\' or temp == \'\\n\': # case where no value is provided (end line)\n                        e_list.append(param)\n                except KeyError:\n                    e_list.append(param)\n            if len(e_list)>0:\n                message = ""Parameter(s) {%s} not found in file \'%s\'\\n Value(s) set to 0""%("", "".join(e_list), dt.file_name_short)\n                # header = ""Missing Parameter""\n                # QMessageBox.warning(self, header, message)\n                self.logger.warning(message)\n                for e_param in e_list:\n                    dt.file_parameters[e_param] = ""0""\n\n    def openFileNamesDialog(self, ext_filter=""All Files (*)""):\n        """"""Open Files""""""\n        # file browser window\n        qfdlg = QFileDialog(self)\n        #options = QFileDialog.Options()\n        options = qfdlg.Options()\n        #options |= QFileDialog.DontUseNativeDialog\n        dilogue_name = ""Open""\n        #selected_files, _ = QFileDialog.getOpenFileNames(self, dilogue_name, dir_start, ext_filter, options=options)\n        selected_files, _ = qfdlg.getOpenFileNames(self, dilogue_name, self.dir_start, ext_filter, options=options)\n        if selected_files:\n            self.dir_start = dirname(selected_files[0])\n        return selected_files\n\n    def showDataInspector(self, checked):\n        """"""Show Data Inspector""""""\n        if checked:\n            self.DataInspectordockWidget.show()\n        else:\n            self.DataInspectordockWidget.hide()\n\n    def viewMPLToolbar(self, checked):\n        """"""Show Matplotlib toolbar""""""\n        if checked:\n            self.mpl_toolbar.show()\n        else:\n            self.mpl_toolbar.hide()\n\n    def printPlot(self):\n        """"""Print/save current plot""""""\n        fileName = QFileDialog.getSaveFileName(self,\n            ""Export plot"", """", ""Image (*.png);;PDF (*.pdf);; Postscript (*.ps);; EPS (*.eps);; Vector graphics (*.svg)"");\n        # TODO: Set DPI, FILETYPE, etc\n        plt.savefig(fileName[0])\n\n\n    # def resizeplot(self, event=""""):\n    #     """"""[summary]\n\n    #     [description]\n    #     """"""\n    #     if not (self.ax_opts[\'label_size_auto\'] or self.ax_opts[\'tick_label_size_auto\']):\n    #         return\n    #     #large window settings\n    #     w_large = 900\n    #     h_large = 650\n    #     font_large = 16\n    #     #small window settings\n    #     w_small = 300\n    #     h_small = 400\n    #     font_small = 10\n    #     #interpolate for current window size\n    #     geometry = self.multiplots.frameGeometry()\n    #     width = geometry.width()\n    #     height = geometry.height()\n    #     scale_w = font_small + (width - w_small)*(font_large - font_small)/(w_large - w_small)\n    #     scale_h = font_small + (height - h_small)*(font_large - font_small)/(h_large - h_small)\n    #     font_size = min(scale_w, scale_h)\n    #     #resize plot fonts\n    #     for ax in self.axarr:\n    #         if self.ax_opts[\'label_size_auto\']:\n    #             ax.xaxis.label.set_size(font_size)\n    #             ax.yaxis.label.set_size(font_size)\n    #         if self.ax_opts[\'tick_label_size_auto\']:\n    #             ax.tick_params(which=\'major\', labelsize=font_size)\n    #             ax.tick_params(which=\'minor\', labelsize=font_size*.8)\n\n\n    def onpick(self, event):\n        """"""Called when clicking on a plot/artist""""""\n        import matplotlib\n        if event.mouseevent.button == 3:  #right click in plot\n            if not isinstance(event.artist, matplotlib.legend.Legend):\n                if event.artist.get_visible():\n                    self.artists_clicked.append(event.artist)  #collect all artists under mouse\n\n    # def onrelease(self, event):\n    #     """"""Called when releasing mouse""""""\n    #     if event.button == 3:  #if release a right click\n    #         self._zoom_area(event)\n    #         if not self._was_zooming:\n    #             self.open_figure_popup_menu(event)\n    #         self.artists_clicked.clear()\n    #         self._was_zooming = False\n    #     elif event.button == 2:\n    #         self._pan(event)\n    #     self._pressed_button = None\n\n    # def _zoom_area(self, event):\n    #     if event.name == \'button_press_event\':  # begin drag\n    #         self._event = event\n    #         self._patch = plt.Rectangle(\n    #             xy=(event.xdata, event.ydata), width=0, height=0,\n    #             fill=False, linewidth=1., linestyle=\':\', color=\'gray\')\n    #         self._event.inaxes.add_patch(self._patch)\n\n    #         canvas = self._patch.figure.canvas\n    #         axes = self._patch.axes\n    #         self._patch.set_animated(True)\n    #         canvas.draw()\n    #         self.background = canvas.copy_from_bbox(self._patch.axes.bbox)\n    #         axes.draw_artist(self._patch)\n    #         canvas.update()\n\n    #     elif event.name == \'button_release_event\':  # end drag\n    #         self.background = None\n    #         try:\n    #             self._patch.remove()\n    #             del self._patch\n    #         except AttributeError:\n    #             # self._patch do not exist\n    #             pass\n    #         if self._event == None:\n    #             self._was_zooming = False\n    #             return\n    #         if (abs(event.x - self._event.x) < 3 or\n    #                 abs(event.y - self._event.y) < 3):\n    #             self._was_zooming = False\n    #             return  # No zoom when points are too close\n\n    #         x_axes, y_axes = self._axes\n\n    #         for ax in x_axes:\n    #             pixel_to_data = ax.transData.inverted()\n    #             end_pt = pixel_to_data.transform_point((event.x, event.y))\n    #             begin_pt = pixel_to_data.transform_point(\n    #                 (self._event.x, self._event.y))\n\n    #             min_ = min(begin_pt[0], end_pt[0])\n    #             max_ = max(begin_pt[0], end_pt[0])\n    #             if (end_pt[0]>begin_pt[0]):\n    #                 if not ax.xaxis_inverted():\n    #                     ax.set_xlim(min_, max_)\n    #                 else:\n    #                     ax.set_xlim(max_, min_)\n    #             else:\n    #                 min_now, max_now = ax.get_xlim()\n    #                 if ax.get_xscale() == \'log\':\n    #                     fac = 10.0**((math.log10(max_) - math.log10(min_))/2)\n    #                     if not ax.xaxis_inverted():\n    #                         ax.set_xlim(min_now/fac, max_now*fac)\n    #                     else:\n    #                         ax.set_xlim(max_now*fac, min_now/fac)\n    #                 else:\n    #                     dx = max_ - min_\n    #                     if not ax.xaxis_inverted():\n    #                         ax.set_xlim(min_now-dx, max_now+dx)\n    #                     else:\n    #                         ax.set_xlim(max_now+dx, min_now-dx)\n\n    #         for ax in y_axes:\n    #             pixel_to_data = ax.transData.inverted()\n    #             end_pt = pixel_to_data.transform_point((event.x, event.y))\n    #             begin_pt = pixel_to_data.transform_point(\n    #                 (self._event.x, self._event.y))\n\n    #             min_ = min(begin_pt[1], end_pt[1])\n    #             max_ = max(begin_pt[1], end_pt[1])\n    #             if (end_pt[1]<begin_pt[1]):\n    #                 if not ax.yaxis_inverted():\n    #                     ax.set_ylim(min_, max_)\n    #                 else:\n    #                     ax.set_ylim(max_, min_)\n    #             else:\n    #                 min_now, max_now = ax.get_ylim()\n    #                 if ax.get_yscale() == \'log\':\n    #                     fac = 10.0**((math.log10(max_) - math.log10(min_))/2)\n    #                     if not ax.yaxis_inverted():\n    #                         ax.set_ylim(min_now/fac, max_now*fac)\n    #                     else:\n    #                         ax.set_ylim(max_now*fac, min_now/fac)\n    #                 else:\n    #                     dy = max_ - min_\n    #                     if not ax.yaxis_inverted():\n    #                         ax.set_ylim(min_now-dy, max_now+dy)\n    #                     else:\n    #                         ax.set_ylim(max_now+dy, min_now-dy)\n\n    #         self._event = None\n    #         self._was_zooming = True\n    #         self.figure.canvas.draw()\n\n\n    #     elif event.name == \'motion_notify_event\':  # drag\n    #         if self._event is None:\n    #             return\n\n    #         if event.inaxes != self._event.inaxes:\n    #             return  # Ignore event outside plot\n\n    #         self._patch.set_width(event.xdata - self._event.xdata)\n    #         self._patch.set_height(event.ydata - self._event.ydata)\n\n    #         canvas = self._patch.figure.canvas\n    #         axes = self._patch.axes\n    #         canvas.restore_region(self.background)\n    #         axes.draw_artist(self._patch)\n    #         canvas.update()\n\n\n\n    def open_figure_popup_menu(self, event):\n        """"""Open a menu to let the user copy data or chart to clipboard""""""\n        main_menu = QMenu()\n\n        #copy chart action\n        copy_chart_action = main_menu.addAction(""Copy Chart To Clipboard"")\n        copy_chart_action.triggered.connect(self.copy_chart)\n        #save chart action\n        save_chart_action = main_menu.addAction(""Save Chart"")\n        save_chart_action.triggered.connect(self.mpl_toolbar.save_figure)\n\n        #copy data sub-menu\n        if self.artists_clicked:  #do nothing if list of artists is empty\n            menu = QMenu(""Copy Data To Clipboard"")\n            for artist in self.artists_clicked:\n                action_print_coordinates = menu.addAction(artist._name)\n                action_print_coordinates.triggered.connect(\n                    lambda: self.clipboard_coordinates(artist))\n            main_menu.addMenu(menu)\n\n        main_menu.addSeparator()\n        if self._event is not None:\n            self._annotation_done = False\n            add_annotation = main_menu.addAction(self.actionAdd_Annotation)\n            connection_id = self.actionAdd_Annotation.triggered.connect(self.add_annotation)\n        refresh_chart_action = main_menu.addAction(""Reset view(s)"")\n        refresh_chart_action.triggered.connect(self.refresh_plot)\n        # change view\n        n_ax_view_to_change = None\n        for i, ax in enumerate(self.axarr):\n            if event.inaxes == ax:\n                n_ax_view_to_change = i\n        if n_ax_view_to_change is not None:\n            tab_ind = self.multiplots.plotselecttabWidget.currentIndex()\n            if tab_ind != 0:\n                n_ax_view_to_change = tab_ind - 1\n\n            menu2 = QMenu(""Select View"")\n            for i in range(self.viewComboBox.count()):\n                view_name = self.viewComboBox.itemText(i)\n                pick_view = menu2.addAction(view_name)\n                pick_view.triggered.connect(lambda _, view_name=view_name: self.change_ax_view(n_ax_view_to_change, view_name))\n            main_menu.addMenu(menu2)\n\n        #launch menu\n        if main_menu.exec_(QCursor.pos()):\n            self.artists_clicked.clear()\n\n    def change_ax_view(self, n_ax, view_name):\n        """"""Change the view corresponding to axis n_ax""""""\n        tab_ind = self.multiplots.plotselecttabWidget.currentIndex()\n        if (n_ax == 0) or (n_ax == tab_ind - 1):\n            # change combobox selection\n            ind = self.viewComboBox.findText(view_name)\n            self.viewComboBox.setCurrentIndex(ind)\n        else:\n            self.multiviews[n_ax] = self.views[view_name]\n            self.refresh_plot()\n\n    # def _pan(self, event):\n    #     if event.name == \'button_press_event\':  # begin pan\n    #         self._event = event\n\n    #     elif event.name == \'button_release_event\':  # end pan\n    #         self._event = None\n\n    #     elif event.name == \'motion_notify_event\':  # pan\n    #         if self._event is None:\n    #             return\n\n    #         if event.x != self._event.x:\n    #             for ax in self._axes[0]:\n    #                 xlim = self._pan_update_limits(ax, 0, event, self._event)\n    #                 ax.set_xlim(xlim)\n\n    #         if event.y != self._event.y:\n    #             for ax in self._axes[1]:\n    #                 ylim = self._pan_update_limits(ax, 1, event, self._event)\n    #                 ax.set_ylim(ylim)\n\n    #         if event.x != self._event.x or event.y != self._event.y:\n    #             self.figure.canvas.draw()\n\n    #         self._event = event\n\n    # def _pan_update_limits(self, ax, axis_id, event, last_event):\n    #     """"""Compute limits with applied pan.""""""\n    #     assert axis_id in (0, 1)\n    #     if axis_id == 0:\n    #         lim = ax.get_xlim()\n    #         scale = ax.get_xscale()\n    #     else:\n    #         lim = ax.get_ylim()\n    #         scale = ax.get_yscale()\n\n    #     pixel_to_data = ax.transData.inverted()\n    #     data = pixel_to_data.transform_point((event.x, event.y))\n    #     last_data = pixel_to_data.transform_point((last_event.x, last_event.y))\n\n    #     if scale == \'linear\':\n    #         delta = data[axis_id] - last_data[axis_id]\n    #         new_lim = lim[0] - delta, lim[1] - delta\n    #     elif scale == \'log\':\n    #         try:\n    #             delta = math.log10(data[axis_id]) - \\\n    #                 math.log10(last_data[axis_id])\n    #             new_lim = [pow(10., (math.log10(lim[0]) - delta)),\n    #                        pow(10., (math.log10(lim[1]) - delta))]\n    #         except (ValueError, OverflowError):\n    #             new_lim = lim  # Keep previous limits\n    #     else:\n    #         logging.warning(\'Pan not implemented for scale ""%s""\' % scale)\n    #         new_lim = lim\n    #     return new_lim\n\n    # def _zoom_range(self, begin, end, center, scale_factor, scale):\n    #     """"""Compute a 1D range zoomed around center.\n    #     :param float begin: The begin bound of the range.\n    #     :param float end: The end bound of the range.\n    #     :param float center: The center of the zoom (i.e., invariant point)\n    #     :param float scale_factor: The scale factor to apply.\n    #     :param str scale: The scale of the axis\n    #     :return: The zoomed range (min, max)\n    #     """"""\n    #     if begin < end:\n    #         min_, max_ = begin, end\n    #     else:\n    #         min_, max_ = end, begin\n\n    #     if scale == \'linear\':\n    #         old_min, old_max = min_, max_\n    #     elif scale == \'log\':\n    #         old_min = np.log10(min_ if min_ > 0. else np.nextafter(0, 1))\n    #         center = np.log10(\n    #             center if center > 0. else np.nextafter(0, 1))\n    #         old_max = np.log10(max_) if max_ > 0. else 0.\n    #     else:\n    #         logging.warning(\n    #             \'Zoom on wheel not implemented for scale ""%s""\' % scale)\n    #         return begin, end\n\n    #     offset = (center - old_min) / (old_max - old_min)\n    #     range_ = (old_max - old_min) / scale_factor\n    #     new_min = center - offset * range_\n    #     new_max = center + (1. - offset) * range_\n\n    #     if scale == \'log\':\n    #         try:\n    #             new_min, new_max = 10. ** float(new_min), 10. ** float(new_max)\n    #         except OverflowError:  # Limit case\n    #             new_min, new_max = min_, max_\n    #         if new_min <= 0. or new_max <= 0.:  # Limit case\n    #             new_min, new_max = min_, max_\n\n    #     if begin < end:\n    #         return new_min, new_max\n    #     else:\n    #         return new_max, new_min\n\n    # def zoom_wheel(self, event):\n    #     base_scale = 1.1\n    #     if event.button == \'up\':\n    #         # deal with zoom in\n    #         scale_factor = 1 / base_scale\n    #     elif event.button == \'down\':\n    #         # deal with zoom out\n    #         scale_factor = base_scale\n    #     else:\n    #         # deal with something that should never happen\n    #         scale_factor = 1\n\n    #     # if event.step > 0:\n    #         # scale_factor = self.scale_factor\n    #     # else:\n    #         # scale_factor = 1. / self.scale_factor\n\n    #     # Go through all axes to enable zoom for multiple axes subplots\n    #     x_axes, y_axes = self._axes_to_update(event)\n\n    #     for ax in x_axes:\n    #         transform = ax.transData.inverted()\n    #         xdata, ydata = transform.transform_point((event.x, event.y))\n\n    #         xlim = ax.get_xlim()\n    #         xlim = self._zoom_range(xlim[0], xlim[1],\n    #                                 xdata, scale_factor,\n    #                                 ax.get_xscale())\n    #         ax.set_xlim(xlim)\n\n    #     for ax in y_axes:\n    #         ylim = ax.get_ylim()\n    #         ylim = self._zoom_range(ylim[0], ylim[1],\n    #                                 ydata, scale_factor,\n    #                                 ax.get_yscale())\n    #         ax.set_ylim(ylim)\n\n    #     if x_axes or y_axes:\n    #         self.figure.canvas.draw()\n\n    # def on_press(self, event):\n    #     if event.button == 2: # Pan\n    #         x_axes, y_axes = self._axes_to_update(event)\n    #         if x_axes or y_axes:\n    #             self._axes = x_axes, y_axes\n    #             self._pressed_button = event.button\n    #             self._pan(event)\n    #     elif event.button == 3: # Zoom\n    #         x_axes, y_axes = self._axes_to_update(event)\n    #         if x_axes or y_axes:\n    #             self._axes = x_axes, y_axes\n    #             self._pressed_button = event.button\n    #             self._zoom_area(event)\n\n    # def _axes_to_update(self, event):\n    #     """"""Returns two sets of Axes to update according to event.\n\n    #     Takes care of multiple axes and shared axes.\n\n    #     :param MouseEvent event: Matplotlib event to consider\n    #     :return: Axes for which to update xlimits and ylimits\n    #     :rtype: 2-tuple of set (xaxes, yaxes)\n\n    #     """"""\n    #     x_axes, y_axes = set(), set()\n\n    #     # Go through all axes to enable zoom for multiple axes subplots\n    #     for ax in self.figure.axes:\n    #         if ax.contains(event)[0]:\n    #             # For twin x axes, makes sure the zoom is applied once\n    #             shared_x_axes = set(ax.get_shared_x_axes().get_siblings(ax))\n    #             if x_axes.isdisjoint(shared_x_axes):\n    #                 x_axes.add(ax)\n\n    #             # For twin y axes, makes sure the zoom is applied once\n    #             shared_y_axes = set(ax.get_shared_y_axes().get_siblings(ax))\n    #             if y_axes.isdisjoint(shared_y_axes):\n    #                 y_axes.add(ax)\n\n    #     return x_axes, y_axes\n\n    # def on_motion(self, event):\n    #     if self._pressed_button == 2:  # pan\n    #         self._pan(event)\n    #     elif self._pressed_button == 3:  # zoom area\n    #         self._zoom_area(event)\n'"
RepTate/gui/QDataSet.py,2,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module QDataSet\n\nModule that defines the GUI counterpart of Dataset.\n\n""""""\nimport sys\nimport os\nfrom os.path import dirname, join, abspath, isdir\nfrom PyQt5.QtGui import (\n    QPixmap,\n    QColor,\n    QPainter,\n    QIcon,\n    QIntValidator,\n    QDoubleValidator,\n    QStandardItem,\n)\nfrom PyQt5.uic import loadUiType\nfrom PyQt5.QtCore import QSize, Qt\nfrom PyQt5.QtWidgets import (\n    QWidget,\n    QTreeWidgetItem,\n    QTabWidget,\n    QToolBar,\n    QComboBox,\n    QMessageBox,\n    QInputDialog,\n    QToolButton,\n    QMenu,\n    QAction,\n    QTableWidgetItem,\n    QDialog,\n    QVBoxLayout,\n    QDialogButtonBox,\n    QGroupBox,\n    QFormLayout,\n    QLineEdit,\n    QLabel,\n    QFileDialog,\n    QCheckBox,\n)\nimport RepTate\nfrom RepTate.core.DataSet import DataSet\nfrom RepTate.core.DataTable import DataTable\nfrom RepTate.core.Theory import MinimizationMethod, ErrorCalculationMethod\nfrom RepTate.gui.DataSetWidget import DataSetWidget\nimport numpy as np\nimport matplotlib.patheffects as pe\n\nif getattr(sys, \'frozen\', False):\n    # If the application is run as a bundle, the PyInstaller bootloader\n    # extends the sys module by a flag frozen=True and sets the app \n    # path into variable _MEIPASS\'.\n    PATH = sys._MEIPASS\nelse:\n    PATH = dirname(abspath(__file__))\nUi_DataSet, QWidget = loadUiType(join(PATH, ""DataSet.ui""))\n\n\nclass EditFileParametersDialog(QDialog):\n    """"""Create the form that is used to modify the file parameters""""""\n\n    def __init__(self, parent, file):\n        super().__init__(parent)\n        self.parent_dataset = parent\n        self.file = file\n        self.createFormGroupBox(file)\n        self.createFormGroupBoxTheory(file)\n\n        buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n        buttonBox.accepted.connect(self.accept)\n        buttonBox.rejected.connect(self.reject)\n\n        mainLayout = QVBoxLayout()\n        tab_widget = QTabWidget()\n        tab_widget.addTab(self.formGroupBox, ""File Parameters"")\n        tab_widget.addTab(self.formGroupBoxTheory, ""Theory Parameters"")\n        mainLayout.addWidget(tab_widget)\n        mainLayout.addWidget(buttonBox)\n        self.setLayout(mainLayout)\n        self.setWindowTitle(""Edit Parameters"")\n\n    def createFormGroupBox(self, file):\n        """"""Create a form to set the new values of the file parameters""""""\n        self.formGroupBox = QGroupBox(\'Parameters of ""%s""\' % file.file_name_short)\n        layout = QFormLayout()\n\n        parameters = file.file_parameters\n        self.param_dict = {}\n        self.p_new = []\n        for i, pname in enumerate(parameters):  # loop over the Parameters\n            self.p_new.append(QLineEdit())\n            if isinstance(parameters[pname], str):  # the parameter is a string\n                self.p_new[i].setText(""%s"" % parameters[pname])\n            else:  # parameter is a number:\n                self.p_new[i].setValidator(QDoubleValidator())  # prevent letters\n                self.p_new[i].setText(""%.4g"" % parameters[pname])\n            layout.addRow(""%s:"" % pname, self.p_new[i])\n            self.param_dict[pname] = self.p_new[i]\n        self.formGroupBox.setLayout(layout)\n\n    def createFormGroupBoxTheory(self, file):\n        self.formGroupBoxTheory = QGroupBox(\n            \'Extend theory xrange of ""%s""\' % file.file_name_short\n        )\n        layout = QFormLayout()\n        self.with_extra_x = QCheckBox(self)\n        self.with_extra_x.setChecked(file.with_extra_x)\n        layout.addRow(""Extra theory xrange?"", self.with_extra_x)\n        self.with_extra_x.toggled.connect(self.activate_th_widgets)\n        # Npoints\n        self.th_num_pts = QLineEdit(self)\n        intvalidator = QIntValidator()\n        intvalidator.setBottom(2)\n        self.th_num_pts.setValidator(QIntValidator())\n        self.th_num_pts.setText(""%s"" % file.th_num_pts)\n        layout.addRow(""Num. of extra point"", self.th_num_pts)\n        # logspace\n        self.th_logspace = QCheckBox(self)\n        self.th_logspace.setChecked(file.theory_logspace)\n        layout.addRow(""logspace"", self.th_logspace)\n        # theory xmin/max\n        dvalidator = QDoubleValidator()\n        self.th_xmin = QLineEdit(self)\n        self.th_xmax = QLineEdit(self)\n        self.th_xmin.setValidator(dvalidator)\n        self.th_xmax.setValidator(dvalidator)\n        self.th_xmin.textEdited.connect(self.update_current_view_xrange)\n        self.th_xmax.textEdited.connect(self.update_current_view_xrange)\n        self.th_xmin.setText(""%s"" % file.theory_xmin)\n        self.th_xmax.setText(""%s"" % file.theory_xmax)\n        layout.addRow(""xmin theory"", self.th_xmin)\n        layout.addRow(""xmax theory"", self.th_xmax)\n        # current view theory xmin/max\n        self.view_xmin = QLabel(self)\n        self.view_xmax = QLabel(self)\n        layout.addRow(""xmin(current view)"", self.view_xmin)\n        layout.addRow(""xmax(current view)"", self.view_xmax)\n        self.update_current_view_xrange()\n        # set layout\n        self.formGroupBoxTheory.setLayout(layout)\n        self.activate_th_widgets()\n\n    def update_current_view_xrange(self):\n        view = self.parent_dataset.parent_application.current_view\n        tmp_dt = DataTable(axarr=[])\n        tmp_dt.data = np.empty((1, 3))\n        tmp_dt.data[:] = np.nan\n        tmp_dt.num_rows = 1\n        tmp_dt.num_columns = 3\n        try:\n            xmin = float(self.th_xmin.text())\n        except ValueError:\n            self.view_xmin.setText(""N/A"")\n        else:\n            tmp_dt.data[0, 0] = xmin\n            x, y, success = view.view_proc(tmp_dt, self.file.file_parameters)\n            self.view_xmin.setText(""%.4g"" % x[0, 0])\n\n        try:\n            xmax = float(self.th_xmax.text())\n        except ValueError:\n            self.view_xmax.setText(""N/A"")\n        else:\n            tmp_dt.data[0, 0] = xmax\n            x, y, success = view.view_proc(tmp_dt, self.file.file_parameters)\n            self.view_xmax.setText(""%.4g"" % x[0, 0])\n\n    def activate_th_widgets(self):\n        checked = self.with_extra_x.isChecked()\n        self.th_xmin.setDisabled(not checked)\n        self.th_xmax.setDisabled(not checked)\n        self.th_num_pts.setDisabled(not checked)\n        self.th_logspace.setDisabled(not checked)\n        self.view_xmin.setDisabled(not checked)\n        self.view_xmax.setDisabled(not checked)\n\n\nclass QDataSet(DataSet, QWidget, Ui_DataSet):\n    """"""Class that contains data files""""""\n\n    def __init__(self, name=""QDataSet"", parent=None):\n        """"""**Constructor**""""""\n        super().__init__(name=name, parent=parent)\n        QWidget.__init__(self)\n        Ui_DataSet.__init__(self)\n\n        self.setupUi(self)\n\n        self.DataSettreeWidget = DataSetWidget(self)\n        self.splitter.insertWidget(0, self.DataSettreeWidget)\n\n        self.DataSettreeWidget.setIndentation(0)\n        self.DataSettreeWidget.setHeaderItem(QTreeWidgetItem([""""]))\n        self.DataSettreeWidget.setSelectionMode(1)  # QAbstractItemView::SingleSelection\n        hd = self.DataSettreeWidget.header()\n        hd.setSectionsMovable(False)\n        w = self.DataSettreeWidget.width()\n        w /= hd.count()\n        for i in range(hd.count()):\n            hd.resizeSection(0, w)\n\n        # Theory Toolbar\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n        tb.addAction(self.actionNew_Theory)\n        self.cbtheory = QComboBox()\n        model = self.cbtheory.model()\n        self.cbtheory.setToolTip(""Choose a Theory"")\n\n        item = QStandardItem(""Select:"")\n        item.setForeground(QColor(""grey""))\n        model.appendRow(item)\n        i = 1\n        for th_name in self.parent_application.theories:\n            if th_name not in self.parent_application.common_theories:\n                item = QStandardItem(th_name)\n                item.setToolTip(self.parent_application.theories[th_name].description)\n                model.appendRow(item)\n        flag_first = True\n        for th_name in self.parent_application.theories:\n            if th_name in self.parent_application.common_theories:\n                if flag_first:\n                    # add separator if al least one common theories is added\n                    self.cbtheory.insertSeparator(self.cbtheory.count())\n                    flag_first = False\n                item = QStandardItem(th_name)\n                item.setToolTip(self.parent_application.theories[th_name].description)\n                model.appendRow(item)\n        self.cbtheory.setCurrentIndex(0)\n\n        ###\n\n        self.cbtheory.setMaximumWidth(115)\n        self.cbtheory.setMinimumWidth(50)\n        tb.addWidget(self.cbtheory)\n        tb.addAction(self.actionCalculate_Theory)\n        # MINIMIZE BUTTON + OPTIONS\n        tbut0 = QToolButton()\n        tbut0.setPopupMode(QToolButton.MenuButtonPopup)\n        tbut0.setDefaultAction(self.actionMinimize_Error)\n        menu0 = QMenu()\n        menu0.addAction(self.actionFitting_Options)\n        menu0.addAction(self.actionError_Calc_Options)\n        tbut0.setMenu(menu0)\n        tb.addWidget(tbut0)\n        # tb.addAction(self.actionMinimize_Error)\n        # Buttons not wired yet\n        # tb.addAction(self.actionTheory_Options)\n        # self.actionTheory_Options.setDisabled(True)\n        tbut = QToolButton()\n        tbut.setPopupMode(QToolButton.MenuButtonPopup)\n        tbut.setDefaultAction(self.actionShow_Limits)\n        menu = QMenu()\n        menu.addAction(self.actionVertical_Limits)\n        menu.addAction(self.actionHorizontal_Limits)\n        tbut.setMenu(menu)\n        tb.addWidget(tbut)\n        tbut2 = QToolButton()\n        tbut2.setPopupMode(QToolButton.MenuButtonPopup)\n        self.action_save_theory_data = QAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-save_TH.png""),\n            ""Save Theory Data"",\n            self,\n        )\n        tbut2.setDefaultAction(self.action_save_theory_data)\n        menu2 = QMenu()\n        menu2.addAction(self.actionCopy_Parameters)\n        menu2.addAction(self.actionPaste_Parameters)\n        tbut2.setMenu(menu2)\n        tb.addWidget(tbut2)\n\n        self.TheoryLayout.insertWidget(0, tb)\n        self.splitter.setSizes((1000, 3000))\n\n        # desactive buttons when no theory tab\n        self.theory_actions_disabled(True)\n\n        connection_id = self.actionNew_Theory.triggered.connect(\n            self.handle_actionNew_Theory\n        )\n        connection_id = self.DataSettreeWidget.itemChanged.connect(\n            self.handle_itemChanged\n        )\n        # connection_id = self.DataSettreeWidget.itemClicked.connect(self.handle_itemClicked)\n        connection_id = self.DataSettreeWidget.itemDoubleClicked.connect(\n            self.handle_itemDoubleClicked\n        )\n        connection_id = self.DataSettreeWidget.header().sortIndicatorChanged.connect(\n            self.handle_sortIndicatorChanged\n        )\n        connection_id = self.DataSettreeWidget.itemSelectionChanged.connect(\n            self.handle_itemSelectionChanged\n        )\n        # connection_id = self.DataSettreeWidget.currentItemChanged.connect(self.handle_currentItemChanged)\n\n        connection_id = self.TheorytabWidget.tabCloseRequested.connect(\n            self.handle_thTabCloseRequested\n        )\n        connection_id = self.TheorytabWidget.tabBarDoubleClicked.connect(\n            self.handle_thTabBarDoubleClicked\n        )\n        connection_id = self.TheorytabWidget.currentChanged.connect(\n            self.handle_thCurrentChanged\n        )\n        connection_id = self.actionMinimize_Error.triggered.connect(\n            self.handle_actionMinimize_Error\n        )\n        connection_id = self.actionCalculate_Theory.triggered.connect(\n            self.handle_actionCalculate_Theory\n        )\n        connection_id = self.action_save_theory_data.triggered.connect(\n            self.handle_action_save_theory_data\n        )\n        connection_id = self.actionCopy_Parameters.triggered.connect(\n            self.copy_parameters\n        )\n        connection_id = self.actionPaste_Parameters.triggered.connect(\n            self.paste_parameters\n        )\n\n        connection_id = self.actionVertical_Limits.triggered.connect(\n            self.toggle_vertical_limits\n        )\n        connection_id = self.actionHorizontal_Limits.triggered.connect(\n            self.toggle_horizontal_limits\n        )\n        connection_id = self.actionFitting_Options.triggered.connect(\n            self.handle_fitting_options\n        )\n        connection_id = self.actionError_Calc_Options.triggered.connect(\n            self.handle_error_calculation_options\n        )\n\n    def copy_parameters(self):\n        """"""Copy the parameters of the currently active theory to the clipboard""""""\n        th = self.current_theory\n        if th:\n            self.theories[th].copy_parameters()\n\n    def paste_parameters(self):\n        """"""Paste the parameters from the clipboard to the currently active theory""""""\n        th = self.current_theory\n        if th:\n            self.theories[th].paste_parameters()\n\n    def handle_action_save_theory_data(self):\n        """"""Save theory data of current theory""""""\n        th = self.current_theory\n        if th:\n            # file browser window\n            dir_start = join(RepTate.root_dir, ""data"")\n            dilogue_name = ""Select Folder""\n            folder = QFileDialog.getExistingDirectory(self, dilogue_name, dir_start)\n            if isdir(folder):\n                dialog = QInputDialog(self)\n                dialog.setWindowTitle(""Add label to filename(s)?"")\n                dialog.setLabelText(\n                    ""Add the following text to each saved theory filename(s):""\n                )\n                dialog.setTextValue("""")\n                dialog.setCancelButtonText(""None"")\n                if dialog.exec():\n                    txt = dialog.textValue()\n                    if txt != """":\n                        txt = ""_"" + txt\n                else:\n                    txt = """"\n                self.theories[th].do_save(folder, txt)\n\n    def set_table_icons(self, table_icon_list):\n        """"""The list \'table_icon_list\' contains tuples (file_name_short, marker_name, face, color)""""""\n        self.DataSettreeWidget.blockSignals(\n            True\n        )  # avoid triggering \'itemChanged\' signal that causes a call to do_plot()\n\n        for fname, marker_name, face, color in table_icon_list:\n            item = self.DataSettreeWidget.findItems(\n                fname, Qt.MatchCaseSensitive, column=0\n            )  # returns list of items matching file name\n            if item:\n                # paint icon\n                folder = "":/Markers/Images/Matplotlib_markers/""\n                if face == ""none"":  # empty symbol\n                    marker_path = folder + ""marker_%s"" % marker_name\n                else:  # filled symbol\n                    marker_path = folder + ""marker_filled_%s"" % marker_name\n                qp = QPixmap(marker_path)\n                mask = qp.createMaskFromColor(QColor(0, 0, 0), Qt.MaskOutColor)\n                qpainter = QPainter()\n                qpainter.begin(qp)\n                qpainter.setPen(\n                    QColor(\n                        int(255 * color[0]),\n                        int(255 * color[1]),\n                        int(255 * color[2]),\n                        255,\n                    )\n                )\n                qpainter.drawPixmap(qp.rect(), mask, qp.rect())\n                qpainter.end()\n                item[0].setIcon(0, QIcon(qp))\n\n        self.DataSettreeWidget.blockSignals(False)\n\n    def theory_actions_disabled(self, state):\n        """"""Disable theory buttons if no theory tab is open""""""\n        self.actionCalculate_Theory.setDisabled(state)\n        self.actionMinimize_Error.setDisabled(state)\n        # self.actionTheory_Options.setDisabled(state)\n        self.actionShow_Limits.setDisabled(state)\n        self.actionVertical_Limits.setDisabled(state)\n        self.actionHorizontal_Limits.setDisabled(state)\n        self.action_save_theory_data.setDisabled(state)\n\n    def set_limit_icon(self):\n        """"""Set xrange / yrange""""""\n        if self.current_theory:\n            th = self.theories[self.current_theory]\n        vlim = th.is_xrange_visible\n        hlim = th.is_yrange_visible\n        if hlim and vlim:\n            img = ""Line Chart Both Limits""\n        elif vlim:\n            img = ""Line Chart Vertical Limits""\n        elif hlim:\n            img = ""Line Chart Horizontal Limits""\n        else:\n            img = ""Line Chart""\n        self.actionShow_Limits.setIcon(QIcon("":/Images/Images/%s.png"" % img))\n\n    def set_no_limits(self, th_name):\n        """"""Turn the x and yrange selectors off""""""\n        if th_name in self.theories:\n            self.theories[self.current_theory].set_xy_limits_visible(\n                False, False\n            )  # hide xrange and yrange\n\n    def toggle_vertical_limits(self, checked):\n        """"""Show/Hide the xrange selector for fit""""""\n        if self.current_theory:\n            th = self.theories[self.current_theory]\n            th.do_xrange("""", checked)\n            th.is_xrange_visible = checked\n            self.set_limit_icon()\n\n    def toggle_horizontal_limits(self, checked):\n        """"""Show/Hide the yrange selector for fit""""""\n        if self.current_theory:\n            th = self.theories[self.current_theory]\n            th.do_yrange("""", checked)\n            th.is_yrange_visible = checked\n            self.set_limit_icon()\n\n    def handle_fitting_options(self):\n        if not self.current_theory:\n            return\n        th = self.theories[self.current_theory]\n        th.fittingoptionsdialog.ui.tabWidget.setCurrentIndex(th.mintype.value)\n        success = (\n            th.fittingoptionsdialog.exec_()\n        )  # this blocks the rest of the app as opposed to .show()\n\n        if not success:\n            return\n\n        th.mintype = MinimizationMethod(\n            th.fittingoptionsdialog.ui.tabWidget.currentIndex()\n        )\n        if th.mintype == MinimizationMethod.ls:\n            th.LSmethod = th.fittingoptionsdialog.ui.LSmethodcomboBox.currentText()\n            if th.fittingoptionsdialog.ui.LSftolcheckBox.isChecked():\n                th.LSftol = float(th.fittingoptionsdialog.ui.LSftollineEdit.text())\n            else:\n                th.LSftol = None\n            if th.fittingoptionsdialog.ui.LSxtolcheckBox.isChecked():\n                th.LSxtol = float(th.fittingoptionsdialog.ui.LSxtollineEdit.text())\n            else:\n                th.LSxtol = None\n            if th.fittingoptionsdialog.ui.LSgtolcheckBox.isChecked():\n                th.LSgtol = float(th.fittingoptionsdialog.ui.LSgtollineEdit.text())\n            else:\n                th.LSgtol = None\n            th.LSloss = th.fittingoptionsdialog.ui.LSlosscomboBox.currentText()\n            th.LSf_scale = float(th.fittingoptionsdialog.ui.LSf_scalelineEdit.text())\n            if th.fittingoptionsdialog.ui.LSmax_nfevcheckBox.isChecked():\n                th.LSmax_nfev = int(\n                    th.fittingoptionsdialog.ui.LSmax_nfevlineEdit.text()\n                )\n            else:\n                th.LSmax_nfev = None\n            if th.fittingoptionsdialog.ui.LStr_solvercheckBox.isChecked():\n                th.LStr_solver = (\n                    th.fittingoptionsdialog.ui.LStr_solvercomboBox.currentText()\n                )\n            else:\n                th.LStr_solver = None\n\n        elif th.mintype == MinimizationMethod.basinhopping:\n            th.basinniter = int(th.fittingoptionsdialog.ui.basinniterlineEdit.text())\n            th.basinT = float(th.fittingoptionsdialog.ui.basinTlineEdit.text())\n            th.basinstepsize = float(\n                th.fittingoptionsdialog.ui.basinstepsizelineEdit.text()\n            )\n            th.basininterval = int(\n                th.fittingoptionsdialog.ui.basinintervallineEdit.text()\n            )\n            if th.fittingoptionsdialog.ui.basinniter_successcheckBox.isChecked():\n                th.basinniter_success = int(\n                    th.fittingoptionsdialog.ui.basinniter_successlineEdit.text()\n                )\n            else:\n                th.basinniter_success = None\n            if th.fittingoptionsdialog.ui.basinseedcheckBox.isChecked():\n                th.basinseed = int(th.fittingoptionsdialog.ui.basinseedlineEdit.text())\n            else:\n                th.basinseed = None\n\n        elif th.mintype == MinimizationMethod.dualannealing:\n            th.annealmaxiter = int(\n                th.fittingoptionsdialog.ui.annealmaxiterlineEdit.text()\n            )\n            th.annealinitial_temp = float(\n                th.fittingoptionsdialog.ui.annealinitial_templineEdit.text()\n            )\n            th.annealrestart_temp_ratio = float(\n                th.fittingoptionsdialog.ui.annealrestart_temp_ratiolineEdit.text()\n            )\n            th.annealvisit = float(\n                th.fittingoptionsdialog.ui.annealvisitlineEdit.text()\n            )\n            th.annealaccept = float(\n                th.fittingoptionsdialog.ui.annealacceptlineEdit.text()\n            )\n            th.annealmaxfun = int(\n                th.fittingoptionsdialog.ui.annealmaxfunlineEdit.text()\n            )\n            if th.fittingoptionsdialog.ui.annealseedcheckBox.isChecked():\n                th.annealseed = int(\n                    th.fittingoptionsdialog.ui.annealseedlineEdit.text()\n                )\n            else:\n                th.annealseed = None\n            th.annealno_local_search = (\n                th.fittingoptionsdialog.ui.annealno_local_searchcheckBox.isChecked()\n            )\n\n        elif th.mintype == MinimizationMethod.diffevol:\n            th.diffevolstrategy = (\n                th.fittingoptionsdialog.ui.diffevolstrategycomboBox.currentText()\n            )\n            th.diffevolmaxiter = int(\n                th.fittingoptionsdialog.ui.diffevolmaxiterlineEdit.text()\n            )\n            th.diffevolpopsize = int(\n                th.fittingoptionsdialog.ui.diffevolpopsizelineEdit.text()\n            )\n            th.diffevoltol = float(\n                th.fittingoptionsdialog.ui.diffevoltollineEdit.text()\n            )\n            th.diffevolmutation = (\n                float(th.fittingoptionsdialog.ui.diffevolmutationAlineEdit.text()),\n                float(th.fittingoptionsdialog.ui.diffevolmutationBlineEdit.text()),\n            )\n            th.diffevolrecombination = float(\n                th.fittingoptionsdialog.ui.diffevolrecombinationlineEdit.text()\n            )\n            if th.fittingoptionsdialog.ui.diffevolseedcheckBox.isChecked():\n                th.diffevolseed = int(\n                    th.fittingoptionsdialog.ui.diffevolseedlineEdit.text()\n                )\n            else:\n                th.diffevolseed = None\n            th.diffevolpolish = (\n                th.fittingoptionsdialog.ui.diffevolpolishcheckBox.isChecked()\n            )\n            th.diffevolinit = (\n                th.fittingoptionsdialog.ui.diffevolinitcomboBox.currentText()\n            )\n            th.diffevolatol = float(\n                th.fittingoptionsdialog.ui.diffevolatollineEdit.text()\n            )\n\n        elif th.mintype == MinimizationMethod.SHGO:\n            th.SHGOn = int(th.fittingoptionsdialog.ui.SHGOnlineEdit.text())\n            th.SHGOiters = int(th.fittingoptionsdialog.ui.SHGOiterslineEdit.text())\n            if th.fittingoptionsdialog.ui.SHGOmaxfevcheckBox.isChecked():\n                th.SHGOmaxfev = int(\n                    th.fittingoptionsdialog.ui.SHGOmaxfevlineEdit.text()\n                )\n            else:\n                th.SHGOmaxfev = None\n            if th.fittingoptionsdialog.ui.SHGOf_mincheckBox.isChecked():\n                th.SHGOf_min = float(\n                    th.fittingoptionsdialog.ui.SHGOf_minlineEdit.text()\n                )\n            else:\n                th.SHGOf_min = None\n            th.SHGOf_tol = float(th.fittingoptionsdialog.ui.SHGOf_tollineEdit.text())\n            if th.fittingoptionsdialog.ui.SHGOmaxitercheckBox.isChecked():\n                th.SHGOmaxiter = int(\n                    th.fittingoptionsdialog.ui.SHGOmaxiterlineEdit.text()\n                )\n            else:\n                th.SHGOmaxiter = None\n            if th.fittingoptionsdialog.ui.SHGOmaxevcheckBox.isChecked():\n                th.SHGOmaxev = int(th.fittingoptionsdialog.ui.SHGOmaxevlineEdit.text())\n            else:\n                th.SHGOmaxev = None\n            if th.fittingoptionsdialog.ui.SHGOmaxtimecheckBox.isChecked():\n                th.SHGOmaxtime = float(\n                    th.fittingoptionsdialog.ui.SHGOmaxtimelineEdit.text()\n                )\n            else:\n                th.SHGOmaxtime = None\n            if th.fittingoptionsdialog.ui.SHGOminhgrdcheckBox.isChecked():\n                th.SHGOminhgrd = int(\n                    th.fittingoptionsdialog.ui.SHGOminhgrdlineEdit.text()\n                )\n            else:\n                th.SHGOminhgrd = None\n            th.SHGOminimize_every_iter = (\n                th.fittingoptionsdialog.ui.SHGOminimize_every_itercheckBox.isChecked()\n            )\n            th.SHGOlocal_iter = (\n                th.fittingoptionsdialog.ui.SHGOlocal_itercheckBox.isChecked()\n            )\n            th.SHGOinfty_constraints = (\n                th.fittingoptionsdialog.ui.SHGOinfty_constraintscheckBox.isChecked()\n            )\n            th.SHGOsampling_method = (\n                th.fittingoptionsdialog.ui.SHGOsampling_methodcomboBox.currentText()\n            )\n\n        elif th.mintype == MinimizationMethod.bruteforce:\n            th.BruteNs = int(th.fittingoptionsdialog.ui.BruteNslineEdit.text())\n\n        # if th.mintype==MinimizationMethod.trf:\n        #     th.mintype=MinimizationMethod.basinhopping\n        # elif th.mintype==MinimizationMethod.basinhopping:\n        #     th.mintype=MinimizationMethod.dualannealing\n        # elif th.mintype==MinimizationMethod.dualannealing:\n        #     th.mintype=MinimizationMethod.differential_evolution\n        # else:\n        #     th.mintype=MinimizationMethod.trf\n\n    def handle_error_calculation_options(self):\n        if not self.current_theory:\n            return\n        th = self.theories[self.current_theory]\n        success = (\n            th.errorcalculationdialog.exec_()\n        )  # this blocks the rest of the app as opposed to .show()\n\n        if not success:\n            return\n\n        if th.errorcalculationdialog.ui.View1radioButton.isChecked():\n            th.errormethod = ErrorCalculationMethod.View1\n        elif th.errorcalculationdialog.ui.RawDataradioButton.isChecked():\n            th.errormethod = ErrorCalculationMethod.RawData\n        elif th.errorcalculationdialog.ui.AllViewsradioButton.isChecked():\n            th.errormethod = ErrorCalculationMethod.AllViews\n\n        th.normalizebydata = th.errorcalculationdialog.ui.NormalizecheckBox.isChecked()\n\n    def end_of_computation(self, th_name):\n        """"""Action when theory has finished computations""""""\n        try:\n            th = self.theories[th_name]\n            th.stop_theory_flag = False\n        except KeyError:\n            pass\n        if self.current_theory == th_name:\n            self.icon_calculate_is_stop(False)\n            self.icon_fit_is_stop(False)\n\n    def handle_actionCalculate_Theory(self):\n        if self.current_theory and self.files:\n            th = self.theories[self.current_theory]\n            if th.thread_calc_busy:  # request stop if in do_calculate\n                th.request_stop_computations()\n                return\n            elif (\n                th.is_fitting or th.thread_fit_busy\n            ):  # do nothing if already busy in do_fit\n                th.Qprint(""Busy minimising theory..."")\n                return\n            if th.single_file and (len(self.files) - len(self.inactive_files)) > 1:\n                header = ""Calculate""\n                message = (\n                    \'<p>Too many active files: ""%s"" uses only one data file.</p>\\\n                    <p>The theory will be applied to the highlighted file if any or to the first active file.</p>\'\n                    % th.thname\n                )\n                QMessageBox.warning(self, header, message)\n            self.icon_calculate_is_stop(True)\n            th.handle_actionCalculate_Theory()\n\n    def handle_actionMinimize_Error(self):\n        """"""Minimize the error""""""\n        if self.current_theory and self.files:\n            th = self.theories[self.current_theory]\n            if th.is_fitting or th.thread_fit_busy:  # request stop if in do_fit\n                th.request_stop_computations()\n                return\n            elif (\n                th.calculate_is_busy or th.thread_calc_busy\n            ):  # do nothing if already busy in do_calculate\n                th.Qprint(""Busy calculating theory..."")\n                return\n            if th.single_file and (len(self.files) - len(self.inactive_files)) > 1:\n                header = ""Minimization""\n                message = (\n                    \'<p>Too many active files: ""%s"" uses only one data file.</p>\\\n                    <p>The theory will be applied to the highlighted file if any or to the first active file.</p>\'\n                    % th.thname\n                )\n                QMessageBox.warning(self, header, message)\n            self.icon_fit_is_stop(True)\n            th.handle_actionMinimize_Error()\n\n    def icon_calculate_is_stop(self, ans):\n        """"""Change the ""calculate"" button to ""stop"" button""""""\n        if ans:\n            self.actionCalculate_Theory.setIcon(\n                QIcon("":/Icon8/Images/new_icons/icons8-stop-sign.png"")\n            )\n            self.actionCalculate_Theory.setToolTip(""Stop current calculations"")\n        else:\n            self.actionCalculate_Theory.setIcon(\n                QIcon("":/Icon8/Images/new_icons/icons8-abacus.png"")\n            )\n            self.actionCalculate_Theory.setToolTip(""Calculate Theory (Alt+C)"")\n\n    def icon_fit_is_stop(self, ans):\n        """"""Change the ""fit"" button to ""stop"" button""""""\n        if ans:\n            self.actionMinimize_Error.setIcon(\n                QIcon("":/Icon8/Images/new_icons/icons8-stop-sign.png"")\n            )\n            self.actionCalculate_Theory.setToolTip(""Stop current calculations"")\n        else:\n            self.actionMinimize_Error.setIcon(\n                QIcon("":/Icon8/Images/new_icons/icons8-minimum-value.png"")\n            )\n            self.actionCalculate_Theory.setToolTip(""Calculate Theory (Alt+C)"")\n\n    def handle_thCurrentChanged(self, index):\n        """"""Change figure when the active theory tab is changed""""""\n        self.icon_calculate_is_stop(False)\n        self.icon_fit_is_stop(False)\n        th = self.TheorytabWidget.widget(index)\n        if th:\n            self.current_theory = th.name\n            ntab = self.TheorytabWidget.count()\n            # hide all theory curves\n            for i in range(ntab):\n                if i != index:\n                    th_to_hide = self.TheorytabWidget.widget(i)\n                    th_to_hide.do_hide()\n            th.do_show()  # must be called last, after hiding other theories\n\n            if th.thread_calc_busy or th.thread_fit_busy:\n                self.icon_calculate_is_stop(th.thread_calc_busy)\n                self.icon_fit_is_stop(th.thread_fit_busy)\n                return\n        else:\n            self.current_theory = None\n            self.theory_actions_disabled(True)\n        self.parent_application.update_plot()\n        self.parent_application.update_Qplot()\n\n    def handle_thTabBarDoubleClicked(self, index):\n        """"""Edit Theory name\n\n        Edit the theory tab name, leave \'theories\' dictionary keys unchanged.\n        Two tabs can share the same name""""""\n        old_name = self.TheorytabWidget.tabText(index)\n        dlg = QInputDialog(self)\n        dlg.setWindowTitle(""Change Theory Name"")\n        dlg.setLabelText(""New Theory Name:"")\n        dlg.setTextValue(old_name)\n        dlg.resize(400, 100)\n        success = dlg.exec()\n        new_tab_name = dlg.textValue()\n        if success and new_tab_name != """":\n            self.TheorytabWidget.setTabText(index, new_tab_name)\n            # self.theories[old_name].name = new_tab_name\n            # self.theories[new_tab_name] = self.theories.pop(old_name)\n            # self.current_theory = new_tab_name\n\n    def handle_thTabCloseRequested(self, index):\n        """"""Delete a theory tab from the current dataset""""""\n        th_name = self.TheorytabWidget.widget(index).name\n        th = self.theories[th_name]\n        th.Qprint(""Close theory tab requested"")\n        th.request_stop_computations()\n        self.set_no_limits(th_name)\n        self.do_delete(th_name)  # call DataSet.do_delete\n        self.TheorytabWidget.removeTab(index)\n\n    def handle_itemSelectionChanged(self):\n        """"""Define actions for when a file table is selected""""""\n        selection = self.DataSettreeWidget.selectedItems()\n        if selection == []:\n            self.selected_file = None\n            self.highlight_series()\n            return\n        for f in self.files:\n            if f.file_name_short == selection[0].text(0):\n                self.parent_application.disconnect_curve_drag()\n                self.selected_file = f\n                self.highlight_series()\n                self.populate_inspector()\n                self.parent_application.handle_actionShiftTriggered()\n\n    def highlight_series(self):\n        """"""Highligh the data series of the selected file""""""\n        self.do_plot()  # remove current series highlight\n        file = self.selected_file\n        thname = self.current_theory\n        if thname:\n            th = self.theories[thname]\n        else:\n            th = None\n        if file is not None:\n            dt = file.data_table\n            if th:\n                tt = th.tables[file.file_name_short]\n            for i in range(dt.MAX_NUM_SERIES):\n                for nx in range(self.nplots):\n                    view = self.parent_application.multiviews[nx]\n                    if i < view.n and file.active:\n                        dt.series[nx][i].set_marker(""."")\n                        # dt.series[nx][i].set_linestyle("":"")\n                        dt.series[nx][i].set_markerfacecolor(\n                            dt.series[nx][i].get_markeredgecolor()\n                        )\n                        dt.series[nx][i].set_markeredgecolor(""peachpuff"")\n                        dt.series[nx][i].set_markersize(self.marker_size + 3)\n                        dt.series[nx][i].set_markeredgewidth(2)\n                        dt.series[nx][i].set_zorder(\n                            self.parent_application.zorder\n                        )  # put series on top\n                        if th:\n                            if th.active:\n                                tt.series[nx][i].set_color(""k"")\n                                tt.series[nx][i].set_path_effects(\n                                    [\n                                        pe.Stroke(\n                                            linewidth=self.th_line_width + 3,\n                                            foreground=""chartreuse"",\n                                        ),\n                                        pe.Normal(),\n                                    ]\n                                )\n                                tt.series[nx][i].set_zorder(\n                                    self.parent_application.zorder\n                                )\n\n            self.parent_application.zorder += 1\n        self.parent_application.update_plot()\n\n    def populate_inspector(self):\n        """"""Fill the data inspector table""""""\n        file = self.selected_file\n        if not file:\n            self.parent_application.inspector_table.setRowCount(0)\n            self.parent_application.DataInspectordockWidget.setWindowTitle(""File:"")\n            return\n        if self.parent_application.DataInspectordockWidget.isHidden():\n            return\n        dt = file.data_table\n        nrow = dt.num_rows\n        ncol = dt.num_columns\n        inspec_tab = self.parent_application.inspector_table\n        inspec_tab.file_repr = file\n        inspec_tab.setRowCount(nrow)\n        inspec_tab.setColumnCount(ncol)\n        for i in range(nrow):\n            for j in range(ncol):\n                item = QTableWidgetItem(""%.3e"" % dt.data[i, j])\n                item.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)\n                inspec_tab.setItem(i, j, item)  # dt.setItem(row, column, item)\n        ds_index = self.parent_application.DataSettabWidget.currentIndex()\n        self.parent_application.DataInspectordockWidget.setWindowTitle(\n            \'File: ""%s"" in %s\'\n            % (\n                file.file_name_short,\n                self.parent_application.DataSettabWidget.tabText(ds_index),\n            )\n        )\n        inspec_tab.resizeColumnsToContents()\n        inspec_tab.resizeRowsToContents()\n        # Update shift factors\n        for i in range(DataTable.MAX_NUM_SERIES):\n            self.parent_application.update_shifts(0, 0, i)\n\n    def handle_itemChanged(self, item, column):\n        """"""Detect when an item has been selected in the dataset""""""\n        if column == 0:\n            self.change_file_visibility(\n                item.text(0), item.checkState(column) == Qt.Checked\n            )\n\n    def handle_sortIndicatorChanged(self, column, order):\n        """"""Sort files according to the selected parameter (column) and replot""""""\n        # if column == 0: #do not sort file name\n        #     return\n        if self.DataSettreeWidget.topLevelItemCount() > 0:\n            # sort iff there are some files in the dataset\n            sort_param = self.DataSettreeWidget.headerItem().text(column)\n            rev = True if order == Qt.AscendingOrder else False\n            if rev:\n                sort_param = sort_param + "",reverse""\n            self.do_sort(sort_param)\n            self.do_plot()\n            self.set_table_icons(self.table_icon_list)\n\n    def Qshow_all(self):\n        """"""Show all the files in this dataset, except those previously hiden""""""\n        self.do_show_all("""")\n        for i in range(self.DataSettreeWidget.topLevelItemCount()):\n            file_name = self.DataSettreeWidget.topLevelItem(i).text(0)\n            if file_name in self.inactive_files:\n                self.DataSettreeWidget.topLevelItem(i).setCheckState(0, 0)\n            else:\n                self.DataSettreeWidget.topLevelItem(i).setCheckState(0, 2)\n\n    def resizeEvent(self, evt=None):\n        """"""Resize dataset""""""\n        hd = self.DataSettreeWidget.header()\n        w = self.DataSettreeWidget.width()\n        w /= hd.count()\n        for i in range(hd.count()):\n            hd.resizeSection(i, w)\n            # hd.setTextAlignment(i, Qt.AlignHCenter)\n\n    def handle_itemDoubleClicked(self, item, column):\n        """"""Edit item entry upon double click""""""\n        # if column>0:\n        #     param = self.DataSettreeWidget.headerItem().text(column) #retrive parameter name\n        #     file_name_short = item.text(0) #retrive file name\n        #     header = ""Edit Parameter""\n        #     message = ""Do you want to edit %s of \\""%s\\""?""%(param, file_name_short)\n        #     answer = QMessageBox.question(self, header, message)\n        #     if answer == QMessageBox.Yes:\n        #         old_value = item.text(column) #old parameter value\n        #         message = ""New value of %s""%param\n        #         new_value, success = QInputDialog.getDouble(self, header, message, float(old_value))\n        #         if success:\n        #             for file in self.files:\n        #                 if file.file_name_short == file_name_short:\n        #                     file.file_parameters[param] = new_value #change value in DataSet\n        #             self.DataSettreeWidget.blockSignals(True) #avoid triggering \'itemChanged\' signal that causes a false checkbox change\n        #             item.setText(column, str(new_value)) #change table label\n        #             self.DataSettreeWidget.blockSignals(False)\n        # else:\n        file_name_short = item.text(0)\n        for file in self.files:\n            if file.file_name_short == file_name_short:\n                d = EditFileParametersDialog(self, file)\n                if d.exec_():\n                    for p in d.param_dict:\n                        if isinstance(file.file_parameters[p], str):\n                            file.file_parameters[p] = d.param_dict[p].text()\n                        else:\n                            try:\n                                file.file_parameters[p] = float(d.param_dict[p].text())\n                            except Exception as e:\n                                print(e)\n                        for i in range(self.DataSettreeWidget.columnCount()):\n                            if p == self.DataSettreeWidget.headerItem().text(i):\n                                item.setText(i, str(file.file_parameters[p]))\n                    # theory xmin/max\n                    try:\n                        file.theory_xmin = float(d.th_xmin.text())\n                    except ValueError:\n                        file.theory_xmin = ""None""\n                    try:\n                        file.theory_xmax = float(d.th_xmax.text())\n                    except ValueError:\n                        file.theory_xmax = ""None""\n                    # theory logspace and Npoints\n                    try:\n                        file.th_num_pts = float(d.th_num_pts.text())\n                    except ValueError:\n                        pass\n                    try:\n                        file.th_num_pts = max(int(d.th_num_pts.text()), 2)\n                    except ValueError:\n                        pass\n                    file.theory_logspace = d.th_logspace.isChecked()\n                    file.with_extra_x = d.with_extra_x.isChecked() and (\n                        file.theory_xmin != ""None"" or file.theory_xmax != ""None""\n                    )\n\n    def handle_actionNew_Theory(self):\n        """"""Create new theory and do fit""""""\n        self.actionNew_Theory.setDisabled(True)\n        if self.cbtheory.currentIndex() == 0:\n            # by default, open first theory in the list\n            th_name = self.cbtheory.itemText(1)\n        else:\n            th_name = self.cbtheory.currentText()\n        self.cbtheory.setCurrentIndex(0)  # reset the combobox selection\n        if th_name != """":\n            self.new_theory(th_name)\n        self.actionNew_Theory.setDisabled(False)\n\n    def new_theory(self, th_name, th_tab_id="""", calculate=True, show=True):\n        """"""Create a new theory from name""""""\n        if not self.files:\n            return\n        if self.current_theory:\n            self.set_no_limits(self.current_theory)  # remove the xy-range limits\n        self.theory_actions_disabled(False)  # enable theory buttons\n        newth = self.do_new(th_name, calculate)\n\n        # add new theory tab\n        if th_tab_id == """":\n            th_tab_id = newth.name\n            th_tab_id = """".join(\n                c for c in th_tab_id if c.isupper()\n            )  # get the upper case letters of th_name\n            th_tab_id = ""%s%d"" % (th_tab_id, self.num_theories)  # append number\n\n        # hide all theory curves\n        ntab = self.TheorytabWidget.count()\n        for i in range(ntab):\n            th_to_hide = self.TheorytabWidget.widget(i)\n            th_to_hide.do_hide()\n        # add theory tab\n        self.TheorytabWidget.blockSignals(\n            True\n        )  # avoid trigger handle_thCurrentChanged()\n        index = self.TheorytabWidget.addTab(newth, th_tab_id)\n        self.TheorytabWidget.setCurrentIndex(index)  # set new theory tab as curent tab\n        self.TheorytabWidget.setTabToolTip(index, th_name)  # set new-tab tool tip\n        self.TheorytabWidget.blockSignals(False)\n        if show:\n            newth.update_parameter_table()\n            newth.do_show("""")\n        return newth\n'"
RepTate/gui/QTheory.py,0,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module QTheory\n\nModule that defines the GUI counterpart of the class Theory.\n\n""""""\nimport sys\nimport os\nfrom PyQt5.uic import loadUiType\nimport RepTate\nfrom RepTate.core.CmdBase import CmdBase, CalcMode\nfrom RepTate.core.Theory import Theory, ErrorCalculationMethod\nfrom os.path import dirname, join, abspath\nfrom PyQt5.QtWidgets import (\n    QWidget,\n    QTabWidget,\n    QTreeWidgetItem,\n    QFrame,\n    QHeaderView,\n    QMessageBox,\n    QDialog,\n    QVBoxLayout,\n    QRadioButton,\n    QDialogButtonBox,\n    QButtonGroup,\n    QFormLayout,\n    QLineEdit,\n    QComboBox,\n    QFileDialog,\n    QApplication,\n)\nfrom PyQt5.QtCore import Qt, QObject, QThread, pyqtSignal\nfrom PyQt5.QtGui import QIntValidator, QDoubleValidator, QCursor\nfrom RepTate.core.Parameter import OptType, ParameterType\nfrom math import ceil, floor\nimport RepTate\nimport time\nimport ast\n\nif getattr(sys, ""frozen"", False):\n    # If the application is run as a bundle, the PyInstaller bootloader\n    # extends the sys module by a flag frozen=True and sets the app\n    # path into variable _MEIPASS\'.\n    PATH = sys._MEIPASS\nelse:\n    PATH = dirname(abspath(__file__))\nUi_TheoryTab, QWidget = loadUiType(join(PATH, ""theorytab.ui""))\nfrom RepTate.gui.fittingoptions import Ui_Dialog\nimport RepTate.gui.errorcalculationoptions\n\n# def trap_exc_during_debug(*args):\n#     # when app raises uncaught exception, print info\n#     print(args)\n\n# # install exception hook: without this, uncaught exception would cause application to exit\n# sys.excepthook = trap_exc_during_debug\n\n\nclass EditThParametersDialog(QDialog):\n    """"""Create the form that is used to modify the theorys parameters""""""\n\n    def __init__(self, parent, p_name):\n        super().__init__(parent)\n        self.parent_theory = parent\n        self.tabs = QTabWidget()\n        self.all_pattr = {}\n        for pname in self.parent_theory.parameters:\n            tab = self.create_param_tab(pname)\n            self.tabs.addTab(tab, pname)\n            if pname == p_name:\n                index = self.tabs.indexOf(tab)\n        self.tabs.setCurrentIndex(index)\n\n        buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n        buttonBox.accepted.connect(self.accept)\n        buttonBox.rejected.connect(self.reject)\n\n        mainLayout = QVBoxLayout()\n        mainLayout.addWidget(self.tabs)\n        mainLayout.addWidget(buttonBox)\n        self.setLayout(mainLayout)\n        self.setWindowTitle(""Theory Parameters"")\n\n    def create_param_tab(self, p_name):\n        """"""Create a form to set the new values of the file parameters""""""\n        tab = QWidget()\n        layout = QFormLayout()\n\n        p = self.parent_theory.parameters[p_name]\n        p_attributes = p.__dict__\n        attr_dict = {}\n        a_new = []\n        i = 0\n        for attr_name in p_attributes:  # loop over the Parameters attributes\n            if attr_name == ""type"":\n                cb = QComboBox()\n                cb.addItem(""real"")\n                cb.addItem(""integer"")\n                cb.addItem(""discrete_real"")\n                cb.addItem(""discrete_integer"")\n                cb.addItem(""boolean"")\n                cb.addItem(""string"")\n                # cb.setCurrentText(\'%s\'.split(""."")[-1] % p_attributes[attr_name])\n                s = ""%s"" % p_attributes[attr_name]\n                cb.setCurrentText(s.split(""."")[-1])\n                a_new.append(cb)\n            elif attr_name == ""opt_type"":\n                cb = QComboBox()\n                cb.addItem(""opt"")\n                cb.addItem(""nopt"")\n                cb.addItem(""const"")\n                # cb.setCurrentText(\'%s\'.split(""."")[-1] % p_attributes[attr_name])\n                s = ""%s"" % p_attributes[attr_name]\n                cb.setCurrentText(s.split(""."")[-1])\n                a_new.append(cb)\n            elif attr_name == ""display_flag"":\n                cb = QComboBox()\n                cb.addItem(""True"")\n                cb.addItem(""False"")\n                cb.setCurrentText(""%s"" % p_attributes[attr_name])\n                a_new.append(cb)\n            elif attr_name in [""value"", ""error""]:\n                continue\n            else:\n                qline = QLineEdit()\n                if attr_name in [""name"", ""description""]:\n                    qline.setReadOnly(True)\n                a_new.append(qline)\n                a_new[i].setText(""%s"" % p_attributes[attr_name])\n            layout.addRow(""%s:"" % attr_name, a_new[i])\n            attr_dict[attr_name] = a_new[i]\n            i += 1\n        tab.setLayout(layout)\n        self.all_pattr[p_name] = attr_dict\n        return tab\n\n\nclass CalculationThread(QObject):\n    sig_done = pyqtSignal()\n\n    def __init__(self, fthread, *args):\n        super().__init__()\n        self.args = args\n        self.function = fthread\n\n    def work(self):\n        self.function(*self.args)\n        self.sig_done.emit()\n\n\nclass GetModesDialog(QDialog):\n    def __init__(self, parent=None, th_dict={}):\n        super(GetModesDialog, self).__init__(parent)\n\n        self.setWindowTitle(""Get Maxwell modes"")\n        layout = QVBoxLayout(self)\n\n        self.btngrp = QButtonGroup()\n\n        for item in th_dict.keys():\n            rb = QRadioButton(item, self)\n            layout.addWidget(rb)\n            self.btngrp.addButton(rb)\n\n        # select first button by default\n        rb = self.btngrp.buttons()[0]\n        rb.setChecked(True)\n\n        # OK and Cancel buttons\n        buttons = QDialogButtonBox(\n            QDialogButtonBox.Ok | QDialogButtonBox.Cancel, Qt.Horizontal, self\n        )\n        buttons.accepted.connect(self.accept)\n        buttons.rejected.connect(self.reject)\n        layout.addWidget(buttons)\n\n\nclass QTheory(Ui_TheoryTab, QWidget, Theory):\n    """"""Abstract class that defines a theory""""""\n\n    def __init__(self, name=""QTheory"", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name=name, parent_dataset=parent_dataset, axarr=axarr)\n        self.setupUi(self)\n\n        # build the therory widget\n        self.thParamTable.setIndentation(0)\n        self.thParamTable.setColumnCount(3)\n        self.thParamTable.setHeaderItem(\n            QTreeWidgetItem([""Parameter"", ""Value"", ""Error""])\n        )\n        # self.thParamTable.header().setSectionResizeMode(QHeaderView.ResizeToContents)\n        self.thParamTable.header().resizeSections(QHeaderView.ResizeToContents)\n        self.thParamTable.setAlternatingRowColors(True)\n        self.thParamTable.setFrameShape(QFrame.NoFrame)\n        self.thParamTable.setFrameShadow(QFrame.Plain)\n        self.thParamTable.setEditTriggers(self.thParamTable.NoEditTriggers)\n\n        self.thTextBox.setReadOnly(True)\n        self.thTextBox.setOpenExternalLinks(True)\n        self.thTextBox.setContextMenuPolicy(Qt.CustomContextMenu)\n        self.thTextBox.customContextMenuRequested.connect(self.thtextbox_context_menu)\n\n        self.thread_calc_busy = False\n        self.thread_fit_busy = False\n\n        # Setup Theory Parameters Dialog\n        self.fittingoptionsdialog = QDialog()\n        self.fittingoptionsdialog.ui = Ui_Dialog()\n        self.fittingoptionsdialog.ui.setupUi(self.fittingoptionsdialog)\n        self.populate_default_minimization_options()\n\n        # Setup Error Calculation Options\n        self.errorcalculationdialog = QDialog()\n        self.errorcalculationdialog.ui = RepTate.gui.errorcalculationoptions.Ui_Dialog()\n        self.errorcalculationdialog.ui.setupUi(self.errorcalculationdialog)\n        self.populate_default_error_calculation_options()\n\n        connection_id = self.thParamTable.itemDoubleClicked.connect(\n            self.onTreeWidgetItemDoubleClicked\n        )\n        connection_id = self.thParamTable.itemChanged.connect(\n            self.handle_parameterItemChanged\n        )\n\n    def populate_default_minimization_options(self):\n        dvalidator = QDoubleValidator()\n        ivalidator = QIntValidator()\n        # LEAST-SQUARES LOCAL MIN\n        self.fittingoptionsdialog.ui.LSftollineEdit.setValidator(dvalidator)\n        self.fittingoptionsdialog.ui.LSxtollineEdit.setValidator(dvalidator)\n        self.fittingoptionsdialog.ui.LSgtollineEdit.setValidator(dvalidator)\n        self.fittingoptionsdialog.ui.LSf_scalelineEdit.setValidator(dvalidator)\n        self.fittingoptionsdialog.ui.LSmax_nfevlineEdit.setValidator(ivalidator)\n        self.fittingoptionsdialog.ui.LSmethodcomboBox.setCurrentIndex(\n            self.fittingoptionsdialog.ui.LSmethodcomboBox.findText(self.LSmethod)\n        )\n        self.fittingoptionsdialog.ui.LSjaccomboBox.setCurrentIndex(\n            self.fittingoptionsdialog.ui.LSjaccomboBox.findText(self.LSjac)\n        )\n        self.fittingoptionsdialog.ui.LSftollineEdit.setText(""%g"" % self.LSftol)\n        self.fittingoptionsdialog.ui.LSxtollineEdit.setText(""%g"" % self.LSxtol)\n        self.fittingoptionsdialog.ui.LSgtollineEdit.setText(""%g"" % self.LSgtol)\n        self.fittingoptionsdialog.ui.LSlosscomboBox.setCurrentIndex(\n            self.fittingoptionsdialog.ui.LSlosscomboBox.findText(self.LSloss)\n        )\n        self.fittingoptionsdialog.ui.LSf_scalelineEdit.setText(""%g"" % self.LSf_scale)\n        self.fittingoptionsdialog.ui.LSmax_nfevlineEdit.setText(""100"")\n        # BASIN HOPPING\n        self.fittingoptionsdialog.ui.basinniterlineEdit.setValidator(ivalidator)\n        self.fittingoptionsdialog.ui.basinTlineEdit.setValidator(dvalidator)\n        self.fittingoptionsdialog.ui.basinstepsizelineEdit.setValidator(dvalidator)\n        self.fittingoptionsdialog.ui.basinintervallineEdit.setValidator(ivalidator)\n        self.fittingoptionsdialog.ui.basinniter_successlineEdit.setValidator(ivalidator)\n        self.fittingoptionsdialog.ui.basinseedlineEdit.setValidator(ivalidator)\n        self.fittingoptionsdialog.ui.basinniterlineEdit.setText(""%d"" % self.basinniter)\n        self.fittingoptionsdialog.ui.basinTlineEdit.setText(""%g"" % self.basinT)\n        self.fittingoptionsdialog.ui.basinstepsizelineEdit.setText(\n            ""%g"" % self.basinstepsize\n        )\n        self.fittingoptionsdialog.ui.basinintervallineEdit.setText(\n            ""%d"" % self.basininterval\n        )\n        self.fittingoptionsdialog.ui.basinniter_successlineEdit.setText(""30"")\n        self.fittingoptionsdialog.ui.basinseedlineEdit.setText(""4398495"")\n        # DUAL ANNEALING\n        self.fittingoptionsdialog.ui.annealmaxiterlineEdit.setValidator(ivalidator)\n        self.fittingoptionsdialog.ui.annealinitial_templineEdit.setValidator(dvalidator)\n        self.fittingoptionsdialog.ui.annealrestart_temp_ratiolineEdit.setValidator(\n            dvalidator\n        )\n        self.fittingoptionsdialog.ui.annealvisitlineEdit.setValidator(dvalidator)\n        self.fittingoptionsdialog.ui.annealacceptlineEdit.setValidator(dvalidator)\n        self.fittingoptionsdialog.ui.annealmaxfunlineEdit.setValidator(ivalidator)\n        self.fittingoptionsdialog.ui.annealseedlineEdit.setValidator(ivalidator)\n        self.fittingoptionsdialog.ui.annealmaxiterlineEdit.setText(\n            ""%d"" % self.annealmaxiter\n        )\n        self.fittingoptionsdialog.ui.annealinitial_templineEdit.setText(\n            ""%g"" % self.annealinitial_temp\n        )\n        self.fittingoptionsdialog.ui.annealrestart_temp_ratiolineEdit.setText(\n            ""%g"" % self.annealrestart_temp_ratio\n        )\n        self.fittingoptionsdialog.ui.annealvisitlineEdit.setText(\n            ""%g"" % self.annealvisit\n        )\n        self.fittingoptionsdialog.ui.annealacceptlineEdit.setText(\n            ""%g"" % self.annealaccept\n        )\n        self.fittingoptionsdialog.ui.annealmaxfunlineEdit.setText(\n            ""%d"" % self.annealmaxfun\n        )\n        self.fittingoptionsdialog.ui.annealseedlineEdit.setText(""4389439"")\n        # DIFFERENTIAL EVOLUTION\n        self.fittingoptionsdialog.ui.diffevolmaxiterlineEdit.setValidator(ivalidator)\n        self.fittingoptionsdialog.ui.diffevolpopsizelineEdit.setValidator(ivalidator)\n        self.fittingoptionsdialog.ui.diffevoltollineEdit.setValidator(dvalidator)\n        self.fittingoptionsdialog.ui.diffevolmutationAlineEdit.setValidator(dvalidator)\n        self.fittingoptionsdialog.ui.diffevolmutationBlineEdit.setValidator(dvalidator)\n        self.fittingoptionsdialog.ui.diffevolrecombinationlineEdit.setValidator(\n            dvalidator\n        )\n        self.fittingoptionsdialog.ui.diffevolseedlineEdit.setValidator(ivalidator)\n        self.fittingoptionsdialog.ui.diffevolatollineEdit.setValidator(dvalidator)\n        self.fittingoptionsdialog.ui.diffevolstrategycomboBox.setCurrentIndex(\n            self.fittingoptionsdialog.ui.diffevolstrategycomboBox.findText(\n                self.diffevolstrategy\n            )\n        )\n        self.fittingoptionsdialog.ui.diffevolmaxiterlineEdit.setText(\n            ""%d"" % self.diffevolmaxiter\n        )\n        self.fittingoptionsdialog.ui.diffevolpopsizelineEdit.setText(\n            ""%d"" % self.diffevolpopsize\n        )\n        self.fittingoptionsdialog.ui.diffevoltollineEdit.setText(\n            ""%g"" % self.diffevoltol\n        )\n        self.fittingoptionsdialog.ui.diffevolmutationAlineEdit.setText(\n            ""%g"" % self.diffevolmutation[0]\n        )\n        self.fittingoptionsdialog.ui.diffevolmutationBlineEdit.setText(\n            ""%g"" % self.diffevolmutation[1]\n        )\n        self.fittingoptionsdialog.ui.diffevolrecombinationlineEdit.setText(\n            ""%g"" % self.diffevolrecombination\n        )\n        self.fittingoptionsdialog.ui.diffevolseedlineEdit.setText(""4389439"")\n        self.fittingoptionsdialog.ui.diffevolinitcomboBox.setCurrentIndex(\n            self.fittingoptionsdialog.ui.diffevolinitcomboBox.findText(\n                self.diffevolinit\n            )\n        )\n        self.fittingoptionsdialog.ui.diffevolatollineEdit.setText(\n            ""%g"" % self.diffevolatol\n        )\n        # SHGO\n        self.fittingoptionsdialog.ui.SHGOnlineEdit.setValidator(ivalidator)\n        self.fittingoptionsdialog.ui.SHGOiterslineEdit.setValidator(ivalidator)\n        self.fittingoptionsdialog.ui.SHGOmaxfevlineEdit.setValidator(ivalidator)\n        self.fittingoptionsdialog.ui.SHGOf_minlineEdit.setValidator(dvalidator)\n        self.fittingoptionsdialog.ui.SHGOf_tollineEdit.setValidator(dvalidator)\n        self.fittingoptionsdialog.ui.SHGOmaxiterlineEdit.setValidator(ivalidator)\n        self.fittingoptionsdialog.ui.SHGOmaxevlineEdit.setValidator(ivalidator)\n        self.fittingoptionsdialog.ui.SHGOmaxtimelineEdit.setValidator(dvalidator)\n        self.fittingoptionsdialog.ui.SHGOminhgrdlineEdit.setValidator(ivalidator)\n        self.fittingoptionsdialog.ui.SHGOnlineEdit.setText(""%d"" % self.SHGOn)\n        self.fittingoptionsdialog.ui.SHGOiterslineEdit.setText(""%d"" % self.SHGOiters)\n        self.fittingoptionsdialog.ui.SHGOf_tollineEdit.setText(""%g"" % self.SHGOf_tol)\n        # Brute Force\n        self.fittingoptionsdialog.ui.BruteNslineEdit.setValidator(ivalidator)\n        self.fittingoptionsdialog.ui.BruteNslineEdit.setText(""%d"" % self.BruteNs)\n\n    def populate_default_error_calculation_options(self):\n        # ERROR CALCULATION METHOD\n        if self.errormethod == ErrorCalculationMethod.View1:\n            self.errorcalculationdialog.ui.View1radioButton.setChecked(True)\n        elif self.errormethod == ErrorCalculationMethod.RawData:\n            self.errorcalculationdialog.ui.RawDataradioButton.setChecked(True)\n        elif self.errormethod == ErrorCalculationMethod.AllViews:\n            self.errorcalculationdialog.ui.AllViewsradioButton.setChecked(True)\n        self.errorcalculationdialog.ui.NormalizecheckBox.setChecked(\n            self.normalizebydata\n        )\n\n    def thtextbox_context_menu(self):\n        """"""Custom contextual menu for the theory textbox""""""\n        menu = self.thTextBox.createStandardContextMenu()\n        menu.addSeparator()\n        menu.addAction(\n            ""Increase Font Size"", lambda: self.change_thtextbox_fontsize(1.25)\n        )\n        menu.addAction(\n            ""Deacrease Font Size"", lambda: self.change_thtextbox_fontsize(0.8)\n        )\n        menu.addAction(""Clear Text"", self.thTextBox.clear)\n        menu.exec_(QCursor.pos())\n\n    def change_thtextbox_fontsize(self, factor):\n        """"""Change the thTextBox font size by a factor `factor` """"""\n        font = self.thTextBox.currentFont()\n        if factor < 1:\n            font_size = ceil(font.pointSize() * factor)\n        else:\n            font_size = floor(font.pointSize() * factor)\n        font.setPointSize(font_size)\n        self.thTextBox.document().setDefaultFont(font)\n\n    def set_extra_data(self, extra_data):\n        """"""set the extra data dict at loading, redefined in Child class if needed""""""\n        self.extra_data = extra_data\n\n    def get_extra_data(self):\n        """"""get the extra data dict before saving (defined in Child class if needed)""""""\n        pass\n\n    def theory_buttons_disabled(self, state):\n        """"""Disable theory button inside the theory""""""\n        pass\n\n    def handle_actionCalculate_Theory(self):\n        if self.thread_calc_busy:\n            return\n        self.thread_calc_busy = True\n        # disable buttons\n        self.parent_dataset.actionNew_Theory.setDisabled(\n            True\n        )  # only needed for theories using shared libraries\n        self.theory_buttons_disabled(True)\n\n        if CmdBase.calcmode == CalcMode.multithread:\n            self.worker = CalculationThread(self.do_calculate, """",)\n            self.worker.sig_done.connect(self.end_thread_calc)\n            self.thread_calc = QThread()\n            self.worker.moveToThread(self.thread_calc)\n            self.thread_calc.started.connect(self.worker.work)\n            self.thread_calc.start()\n        elif CmdBase.calcmode == CalcMode.singlethread:\n            self.do_calculate("""")\n            self.end_thread_calc()\n\n    def end_thread_calc(self):\n        if CmdBase.calcmode == CalcMode.multithread:\n            try:\n                self.thread_calc.quit()\n            except:\n                pass\n        else:\n            self.update_parameter_table()\n            for file in self.theory_files():  # copy theory data to the plot series\n                tt = self.tables[file.file_name_short]\n                for nx in range(self.parent_dataset.nplots):\n                    view = self.parent_dataset.parent_application.multiviews[nx]\n                    x, y, success = view.view_proc(tt, file.file_parameters)\n                    for i in range(tt.MAX_NUM_SERIES):\n                        if i < view.n:\n                            tt.series[nx][i].set_data(x[:, i], y[:, i])\n\n            self.parent_dataset.parent_application.update_Qplot()\n        self.thread_calc_busy = False\n        # enable buttons\n        self.parent_dataset.actionNew_Theory.setDisabled(False)\n        self.theory_buttons_disabled(False)\n        self.parent_dataset.end_of_computation(self.name)\n\n    def handle_actionMinimize_Error(self):\n        """"""Minimize the error""""""\n        if self.thread_fit_busy:\n            return\n        self.thread_fit_busy = True\n        # disable buttons\n        self.parent_dataset.actionNew_Theory.setDisabled(\n            True\n        )  # only needed for theories using shared libraries\n        self.theory_buttons_disabled(True)\n\n        if CmdBase.calcmode == CalcMode.multithread:\n            self.worker = CalculationThread(self.do_fit, """",)\n            self.worker.sig_done.connect(self.end_thread_fit)\n            self.thread_fit = QThread()\n            self.worker.moveToThread(self.thread_fit)\n            self.thread_fit.started.connect(self.worker.work)\n            self.thread_fit.start()\n        elif CmdBase.calcmode == CalcMode.singlethread:\n            self.do_fit("""")\n            self.end_thread_fit()\n\n    def end_thread_fit(self):\n        if CmdBase.calcmode == CalcMode.multithread:\n            try:\n                self.thread_fit.quit()\n            except:\n                pass\n        self.update_parameter_table()\n        self.parent_dataset.parent_application.update_Qplot()\n        self.thread_fit_busy = False\n        # enable buttons\n        self.parent_dataset.actionNew_Theory.setDisabled(False)\n        self.theory_buttons_disabled(False)\n        self.parent_dataset.end_of_computation(self.name)\n\n    def copy_parameters(self):\n        text = """"\n        for param in self.parameters:\n            p = self.parameters[param]\n            text += ""%s\\t%g\\n"" % (p.name, p.value)\n        QApplication.clipboard().setText(text)\n\n    def paste_parameters(self):\n        text = QApplication.clipboard().text()\n        if text == """":\n            return\n        rows = text.splitlines()  # split on newlines\n        for i in range(len(rows)):\n            cols = rows[i].split()  # split on whitespaces\n            if len(cols) == 2:\n                if cols[0] in self.parameters:\n                    message, success = self.set_param_value(cols[0], cols[1])\n        self.update_parameter_table()\n        if self.autocalculate:\n            self.parent_dataset.handle_actionCalculate_Theory()\n\n    def update_parameter_table(self):\n        """"""Update the theory parameter table""""""\n        # clean table\n        self.thParamTable.clear()\n\n        # populate table\n        for param in self.parameters:\n            p = self.parameters[param]\n            if p.display_flag:  # only allowed param enter the table\n                if p.opt_type == OptType.const:\n                    if p.type == ParameterType.string:\n                        item = QTreeWidgetItem(\n                            self.thParamTable, [p.name, p.value, ""N/A""]\n                        )\n                    else:\n                        item = QTreeWidgetItem(\n                            self.thParamTable, [p.name, ""%0.3g"" % p.value, ""N/A""]\n                        )\n                    item.setCheckState(0, Qt.PartiallyChecked)\n                    item.setFlags(item.flags() & ~Qt.ItemIsUserCheckable)\n                else:\n                    try:\n                        err = ""%0.3g"" % p.error\n                    except:\n                        err = ""-""\n                    if p.type == ParameterType.string:\n                        item = QTreeWidgetItem(\n                            self.thParamTable, [p.name, p.value, ""N/A""]\n                        )\n                    else:\n                        item = QTreeWidgetItem(\n                            self.thParamTable, [p.name, ""%0.3g"" % p.value, err]\n                        )\n                    if p.opt_type == OptType.opt:\n                        item.setCheckState(0, Qt.Checked)\n                    elif p.opt_type == OptType.nopt:\n                        item.setCheckState(0, Qt.Unchecked)\n\n                item.setFlags(item.flags() | Qt.ItemIsEditable)\n                item.setToolTip(0, p.description)\n        self.thParamTable.header().resizeSections(QHeaderView.ResizeToContents)\n\n    def onTreeWidgetItemDoubleClicked(self, item, column):\n        """"""Start editing text when a table cell is double clicked\n        Or edit all parameters fittingoptionsdialog if parameter name is double clicked""""""\n        if column == 0:\n            p_name = item.text(0)\n            d = EditThParametersDialog(self, p_name)\n            if d.exec_():\n                for pname in self.parameters:\n                    p = self.parameters[pname]\n                    attr_dict = d.all_pattr[pname]\n                    for attr_name in attr_dict:\n                        if attr_name == ""type"":\n                            val = attr_dict[attr_name].currentText()\n                            setattr(p, attr_name, ParameterType[val])\n                        elif attr_name == ""opt_type"":\n                            val = attr_dict[attr_name].currentText()\n                            setattr(p, attr_name, OptType[val])\n                        elif attr_name == ""display_flag"":\n                            val = ast.literal_eval(\n                                attr_dict[attr_name].currentText()\n                            )  # bool\n                            setattr(p, attr_name, val)\n                        elif attr_name == ""discrete_values"":\n                            val = attr_dict[attr_name].text()\n                            l = ast.literal_eval(val)\n                            if isinstance(l, list):\n                                setattr(p, attr_name, l)\n                        elif attr_name in [""name"", ""description""]:\n                            continue\n                        else:\n                            val = float(attr_dict[attr_name].text())\n                            setattr(p, attr_name, val)\n                self.update_parameter_table()\n\n        elif column == 1:\n            self.thParamTable.editItem(item, column)\n            # thcurrent = self.parent_dataset.TheorytabWidget.currentWidget()\n            # thcurrent.editItem(item, column)\n\n    def handle_parameterItemChanged(self, item, column):\n        """"""Modify parameter values when changed in the theory table""""""\n        param_changed = item.text(0)\n        if column == 0:  # param was checked/unchecked\n            if item.checkState(0) == Qt.Checked:\n                self.parameters[param_changed].opt_type = OptType.opt\n            elif item.checkState(0) == Qt.Unchecked:\n                self.parameters[param_changed].opt_type = OptType.nopt\n            return\n        # else, assign the entered value\n        new_value = item.text(1)\n        message, success = self.set_param_value(param_changed, new_value)\n        if not success:\n            msg = QMessageBox()\n            msg.setWindowTitle(""Error"")\n            if message != """":\n                msg.setText(""Not a valid value\\n"" + message)\n            else:\n                msg.setText(""Not a valid value"")\n            msg.exec_()\n            item.setText(1, str(self.parameters[param_changed].value))\n        else:\n            self.update_parameter_table()\n            if self.autocalculate:\n                self.parent_dataset.handle_actionCalculate_Theory()\n\n    def Qcopy_modes(self):\n        """"""Copy Maxwell modes between theories""""""\n        apmng = self.parent_dataset.parent_application.parent_manager\n        G, S = apmng.list_theories_Maxwell(th_exclude=self)\n        if G:\n            d = GetModesDialog(self, G)\n            if d.exec_() and d.btngrp.checkedButton() != None:\n                item = d.btngrp.checkedButton().text()\n                tau, G0, success = G[item]()\n                if not success:\n                    self.logger.warning(""Could not get modes successfully"")\n                    return\n                tauinds = (-tau).argsort()\n                tau = tau[tauinds]\n                G0 = G0[tauinds]\n                success = self.set_modes(tau, G0)\n                if not success:\n                    self.logger.warning(""Could not set modes successfully"")\n                    return\n                self.update_parameter_table()\n                self.parent_dataset.handle_actionCalculate_Theory()\n        else:\n            QMessageBox.information(\n                self, ""Import Modes"", ""Found no opened theory to import modes from""\n            )\n\n    def save_modes(self):\n        """"""Save Maxwell modes to a text file""""""\n        fpath, _ = QFileDialog.getSaveFileName(\n            self, ""Save Maxwell modes to a text file"", os.path.join(RepTate.root_dir, ""data""), ""Text (*.txt)""\n        )\n        if fpath == """":\n            return\n\n        with open(fpath, ""w"") as f:\n            times, G, success = self.get_modes()\n            if not success:\n                self.logger.warning(""Could not get modes correctly"")\n                return\n\n            header = ""# Maxwell modes\\n""\n            verdata = RepTate._version.get_versions()\n            version = verdata[""version""].split(""+"")[0]\n            date = verdata[""date""].split(""T"")[0]\n            build = verdata[""version""]\n            header += ""# Generated with RepTate %s %s (build %s)\\n"" % (\n                version,\n                date,\n                build,\n            )\n            header += ""# At %s on %s\\n"" % (\n                time.strftime(""%X""),\n                time.strftime(""%a %b %d, %Y""),\n            )\n            f.write(header)\n\n            f.write(""\\n#number of modes\\n"")\n            n = len(times)\n            f.write(""%d\\n"" % n)\n            f.write(""\\n#%4s\\t%15s\\t%15s\\n"" % (""i"", ""tau_i"", ""G_i""))\n\n            for i in range(n):\n                f.write(""%5d\\t%15g\\t%15g\\n"" % (i + 1, times[i], G[i]))\n\n            f.write(""\\n#end"")\n\n        QMessageBox.information(self, ""Success"", \'Wrote Maxwell modes ""%s""\' % fpath)\n'"
RepTate/gui/QTool.py,0,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Tool and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2018): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module QTool\n\nModule that defines the GUI counterpart of the class Tool.\n\n""""""\n# from PyQt5.QtCore import *\nimport sys\nfrom PyQt5.uic import loadUiType\nfrom RepTate.core.Tool import Tool\nfrom os.path import dirname, join, abspath\nfrom PyQt5.QtWidgets import (\n    QWidget,\n    QTreeWidget,\n    QTreeWidgetItem,\n    QFrame,\n    QHeaderView,\n    QMessageBox,\n    QToolBar,\n)\nfrom PyQt5.QtCore import Qt, QSize\nfrom PyQt5.QtGui import QIcon, QCursor\nfrom RepTate.core.Parameter import OptType, ParameterType\nfrom math import ceil, floor\n\nif getattr(sys, \'frozen\', False):\n    # If the application is run as a bundle, the PyInstaller bootloader\n    # extends the sys module by a flag frozen=True and sets the app \n    # path into variable _MEIPASS\'.\n    PATH = sys._MEIPASS\nelse:\n    PATH = dirname(abspath(__file__))\nsys.path.append(PATH)\nUi_ToolTab, QWidget = loadUiType(join(PATH, ""Tooltab.ui""))\n\n\nclass QTool(Ui_ToolTab, QWidget, Tool):\n    """"""Abstract class to describe a tool""""""\n\n    def __init__(self, name=""QTool"", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name=name, parent_app=parent_app)\n        self.setupUi(self)\n\n        self.tb = QToolBar()\n        self.tb.setIconSize(QSize(24, 24))\n        self.actionActive.setChecked(True)\n        self.actionApplyToTheory.setChecked(True)\n        self.tb.addAction(self.actionActive)\n        self.tb.addAction(self.actionApplyToTheory)\n        self.verticalLayout.insertWidget(0, self.tb)\n\n        # build the tool widget\n        self.toolParamTable.setIndentation(0)\n        self.toolParamTable.setColumnCount(2)\n        self.toolParamTable.setHeaderItem(QTreeWidgetItem([""Parameter"", ""Value""]))\n        self.toolParamTable.header().resizeSections(QHeaderView.ResizeToContents)\n        self.toolParamTable.setAlternatingRowColors(True)\n        self.toolParamTable.setFrameShape(QFrame.NoFrame)\n        self.toolParamTable.setFrameShadow(QFrame.Plain)\n        self.toolParamTable.setEditTriggers(self.toolParamTable.NoEditTriggers)\n\n        self.toolTextBox.setReadOnly(True)\n        self.toolTextBox.setContextMenuPolicy(Qt.CustomContextMenu)\n        self.toolTextBox.customContextMenuRequested.connect(\n            self.toolTextBox_context_menu\n        )\n\n        connection_id = self.actionActive.triggered.connect(\n            self.handle_actionActivepressed\n        )\n        connection_id = self.actionApplyToTheory.triggered.connect(\n            self.handle_actionApplyToTheorypressed\n        )\n\n        connection_id = self.toolParamTable.itemDoubleClicked.connect(\n            self.onTreeWidgetItemDoubleClicked\n        )\n        connection_id = self.toolParamTable.itemChanged.connect(\n            self.handle_parameterItemChanged\n        )\n        self.toolParamTable.setEditTriggers(QTreeWidget.EditKeyPressed)\n\n    def toolTextBox_context_menu(self):\n        """"""Custom contextual menu for the theory textbox""""""\n        menu = self.toolTextBox.createStandardContextMenu()\n        menu.addSeparator()\n        menu.addAction(\n            ""Increase Font Size"", lambda: self.change_toolTextBox_fontsize(1.25)\n        )\n        menu.addAction(\n            ""Deacrease Font Size"", lambda: self.change_toolTextBox_fontsize(0.8)\n        )\n        menu.addAction(""Clear Text"", self.toolTextBox.clear)\n        menu.exec_(QCursor.pos())\n\n    def change_toolTextBox_fontsize(self, factor):\n        """"""Change the toolTextBox font size by a factor `factor` """"""\n        font = self.toolTextBox.currentFont()\n        if factor < 1:\n            font_size = ceil(font.pointSize() * factor)\n        else:\n            font_size = floor(font.pointSize() * factor)\n        font.setPointSize(font_size)\n        self.toolTextBox.document().setDefaultFont(font)\n\n    def editItem(self, item, column):\n        print(column)\n\n    def update_parameter_table(self):\n        """"""Update the Tool parameter table""""""\n        # clean table\n        self.toolParamTable.clear()\n\n        # populate table\n        for param in self.parameters:\n            p = self.parameters[param]\n            if p.display_flag:  # only allowed param enter the table\n                if p.type == ParameterType.string:\n                    item = QTreeWidgetItem(self.toolParamTable, [p.name, p.value])\n                else:\n                    item = QTreeWidgetItem(\n                        self.toolParamTable, [p.name, ""%0.4g"" % p.value]\n                    )\n                item.setToolTip(0, p.description)\n\n                item.setFlags(item.flags() | Qt.ItemIsEditable)\n        self.toolParamTable.header().resizeSections(QHeaderView.ResizeToContents)\n\n    def handle_parameterItemChanged(self, item, column):\n        """"""Modify parameter values when changed in the Tool table""""""\n        param_changed = item.text(0)\n        if column == 0:  # param was checked/unchecked\n            if item.checkState(0) == Qt.Checked:\n                self.parameters[param_changed].opt_type = OptType.opt\n            elif item.checkState(0) == Qt.Unchecked:\n                self.parameters[param_changed].opt_type = OptType.nopt\n            return\n        # else, assign the entered value\n        new_value = item.text(1)\n        message, success = self.set_param_value(param_changed, new_value)\n        if not success:\n            msg = QMessageBox()\n            msg.setWindowTitle(""Error"")\n            if message != """":\n                msg.setText(""Not a valid value\\n"" + message)\n            else:\n                msg.setText(""Not a valid value"")\n            msg.exec_()\n            item.setText(1, str(self.parameters[param_changed].value))\n        self.parent_application.update_all_ds_plots()\n\n    def handle_actionActivepressed(self, checked):\n        if checked:\n            self.actionActive.setIcon(\n                QIcon("":/Icon8/Images/new_icons/icons8-toggle-on.png"")\n            )\n        else:\n            self.actionActive.setIcon(\n                QIcon("":/Icon8/Images/new_icons/icons8-toggle-off.png"")\n            )\n        self.actionActive.setChecked(checked)\n        self.active = checked\n        self.parent_application.update_all_ds_plots()\n\n    # def actionActivepressed(self):\n    #     self.active = self.actionActive.isChecked()\n    #     self.parent_application.update_all_ds_plots()\n\n    def handle_actionApplyToTheorypressed(self, checked):\n        if checked:\n            self.actionApplyToTheory.setIcon(\n                QIcon("":/Icon8/Images/new_icons/icons8-einstein-yes.png"")\n            )\n        else:\n            self.actionApplyToTheory.setIcon(\n                QIcon("":/Icon8/Images/new_icons/icons8-einstein-no.png"")\n            )\n        self.actionApplyToTheory.setChecked(checked)\n        self.applytotheory = checked\n        self.parent_application.update_all_ds_plots()\n\n    def onTreeWidgetItemDoubleClicked(self, item, column):\n        """"""Start editing text when a table cell is double clicked""""""\n        if column == 1:\n            self.toolParamTable.editItem(item, column)\n'"
RepTate/gui/SplashScreen.py,0,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module SplasScreen\n\nModule that defines the GUI Splashscreen that is loaded during the startup of RepTate.\n\n""""""\nfrom PyQt5.QtCore import Qt\nfrom PyQt5.QtGui import QPixmap, QColor\nfrom PyQt5.QtWidgets import QSplashScreen, QApplication, QLabel\nfrom PyQt5.QtGui import QPixmap, QFont\nimport RepTate\n\n\nclass SplashScreen(QSplashScreen):\n    """"""Class to define a splash screen to show loading progress""""""\n\n    def __init__(self):\n        """"""**Constructor**""""""\n        QSplashScreen.__init__(self, QPixmap("":/Images/Images/logo_with_uni_logo.png""))\n        lblVersion = QLabel(self)\n\n        verdata = RepTate._version.get_versions()\n        version = verdata[""version""].split(""+"")[0]\n        date = verdata[""date""].split(""T"")[0]\n        build = verdata[""version""]\n\n        lblVersion.setText(\n            ""RepTate %s %s (build %s)<br><small>\\u00A9 Jorge Ram\xc3\xadrez, Universidad Polit\xc3\xa9cnica de Madrid<br>\\u00A9 Victor Boudara, University of Leeds</small><br>(2017-2020)<br><a href=\\""https://dx.doi.org/10.1122/8.0000002\\"">Cite RepTate</a>"" % (version, date, build)\n        )\n        font = self.font()\n        font.setPixelSize(11)\n        font.setWeight(QFont.Bold)\n        self.setFont(font)\n        lblVersion.adjustSize()\n        # lblVersion.setStyleSheet(""QLabel { color : white; }"")\n        # lblVersion.move(425 - lblVersion.width(), 195)\n        QApplication.flush()\n\n    def showMessage(self, msg):\n        """"""Procedure to update message in splash""""""\n        align = Qt.Alignment(Qt.AlignBottom | Qt.AlignRight | Qt.AlignAbsolute)\n        # color = QtGui.QColor(QtCore.Qt.White)\n        color = QColor(0, 0, 0)\n        QSplashScreen.showMessage(self, msg, align, color)\n        QApplication.processEvents()\n\n    def clearMessage(self):\n        """"""Clear message in Splash""""""\n        QSplashScreen.clearMessage(self)\n        QApplication.processEvents()\n\n    def mousePressEvent(self, event):\n        self.hide()\n'"
RepTate/gui/SpreadsheetWidget.py,1,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module SpreadsheetWidget\n\nModule that defines a QTableWidget that allows copy/paste of data.\n\n""""""\nimport numpy as np\nfrom PyQt5.QtCore import Qt\nfrom PyQt5.QtGui import QKeySequence\nfrom PyQt5.QtWidgets import QTableWidget, QApplication\n\n\nclass SpreadsheetWidget(QTableWidget):\n    """"""Subclass of QTableWidget\n\n    Subclass of QTableWidget that enables (i) to copy selected QTableWidget items to the clipboard\n    in a tab-separated format and (ii) to paste the content of the clipboard into the QTableWidget\n    """"""\n\n    def __init__(self, parent=None):\n        """"""**Constructor**""""""\n        super().__init__(parent)\n        delete_disabled = True  # disable the possibility to delete rows\n        file_repr = None  # store the file object represented in the table\n\n    def keyPressEvent(self, event):\n        """"""Catch key""""""\n        if event.matches(QKeySequence.Copy):\n            self.copy()\n        elif event.matches(QKeySequence.Paste):\n            self.paste()\n        elif event.key() == Qt.Key_Backspace or event.key() == Qt.Key_Delete:\n            self.delete()\n        else:\n            QTableWidget.keyPressEvent(self, event)\n\n    def delete(self):\n        if self.delete_disabled:\n            pass\n        else:\n            sel = (\n                self.selectedIndexes()\n            )  # returns a list of all selected item indexes in the view\n            if sel:\n                row_list = []\n                for ind in range(len(sel)):\n                    row_list.append(sel[ind].row())\n                row_list = list(set(row_list))\n                self.file_repr.data_table.data = np.delete(\n                    self.file_repr.data_table.data, row_list, axis=0\n                )\n                self.file_repr.data_table.num_rows -= len(row_list)\n                self.file_repr.parent_dataset.populate_inspector()\n                self.file_repr.parent_dataset.do_plot()  # TODO: we only need to update one data series, not the whole ds\n\n    def copy(self):\n        """"""Copy the selected data of the dataInspector into the clipboard""""""\n        sel = (\n            self.selectedIndexes()\n        )  # returns a list of all selected item indexes in the view\n        if sel:\n            text = """"\n            row0 = sel[0].row()\n            for ind in range(len(sel)):\n                row = sel[ind].row()\n                col = sel[ind].column()\n                if row != row0:\n                    row0 = row\n                    text = text.rstrip(""\\t"")  # remove tab at the end of line\n                    text += ""\\n""\n                text += self.item(row, col).text()\n                text += ""\\t""  # tab separated format\n            text = text.rstrip(""\\t"")\n            QApplication.clipboard().setText(text)\n\n    def paste(self):\n        """"""Paste data""""""\n        text = QApplication.clipboard().text()\n        if text == """":\n            return\n        # Replace commas if any\n        text = text.replace("","", "" "")\n\n        rows = text.splitlines()  # split on newlines\n        for i in range(len(rows)):\n            cols = rows[i].split()  # split on whitespaces\n            for j in range(len(cols)):\n                try:\n                    self.item(i, j).setText(cols[j])\n                except AttributeError:\n                    # index out of range\n                    # more data to paste than table entries\n                    pass\n'"
RepTate/gui/Theory_rc.py,0,"b'# -*- coding: utf-8 -*-\n\n# Resource object code\n#\n# Created by: The Resource Compiler for PyQt5 (Qt v5.14.0)\n#\n# WARNING! All changes made in this file will be lost!\n\nfrom PyQt5 import QtCore\n\nqt_resource_data = b""\\\n\\x00\\x00\\x09\\x61\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x60\\x00\\x00\\x00\\x60\\x08\\x06\\x00\\x00\\x00\\xe2\\x98\\x77\\x38\\\n\\x00\\x00\\x00\\x04\\x73\\x42\\x49\\x54\\x08\\x08\\x08\\x08\\x7c\\x08\\x64\\x88\\\n\\x00\\x00\\x00\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x05\\x46\\x00\\x00\\x05\\x46\\\n\\x01\\xc1\\xb4\\xfa\\x1a\\x00\\x00\\x00\\x19\\x74\\x45\\x58\\x74\\x53\\x6f\\x66\\\n\\x74\\x77\\x61\\x72\\x65\\x00\\x77\\x77\\x77\\x2e\\x69\\x6e\\x6b\\x73\\x63\\x61\\\n\\x70\\x65\\x2e\\x6f\\x72\\x67\\x9b\\xee\\x3c\\x1a\\x00\\x00\\x08\\xde\\x49\\x44\\\n\\x41\\x54\\x78\\x9c\\xed\\x9c\\x7b\\x50\\x54\\xd7\\x1d\\xc7\\xbf\\xf7\\xee\\x2e\\\n\\x8f\\x65\\xd9\\x05\\x96\\xe5\\xfd\\x30\\x2a\\x2f\\x01\\x11\\xdd\\x04\\x53\\xd0\\\n\\xd4\\x4a\\x90\\xd8\\xa2\\x8e\\xb5\\x4d\\xd3\\xd4\\x4c\\x89\\x36\\x0c\\xd3\\xa6\\\n\\xad\\x71\\x3a\\x76\\x3a\\x6d\\x27\\x7d\\xcc\\xa4\\x4d\\x3b\\x65\\x1c\\x99\\x9a\\\n\\x71\\x44\\x93\\x8e\\xcd\\x84\\x5a\\x4c\\xaa\\xc6\\x04\\x89\\x99\\xc6\\xa9\\x51\\\n\\x0c\\x28\\x28\\x02\\x06\\x82\\x91\\xf7\\xfb\\xb1\\xc8\\x63\\x79\\xec\\xed\\x1f\\\n\\x3b\\x64\\x88\\xf7\\x9c\\xcb\\x65\\x1f\\xb9\\xe8\\x9e\\xcf\\x7f\\x9c\\xd7\\xfd\\\n\\xdd\\xf3\\xbd\\xe7\\x77\\x7f\\xe7\\x77\\x2e\\x0b\\x30\\x18\\x0c\\x06\\x83\\xc1\\\n\\x60\\x30\\x18\\x0c\\x06\\x83\\xc1\\x60\\x30\\x18\\x0c\\x06\\x83\\xc1\\x78\\xd8\\\n\\xe1\\x64\\xb7\\x3c\\xf0\\x61\\x32\\x0f\\x61\\x0f\\x80\\x1c\\x00\\xa1\\x00\\x82\\\n\\xdd\\x65\\xd4\\x03\\x4a\\x3f\\x04\\x74\\x83\\xe3\\xce\\xdb\\x78\\x5b\\x09\\x5e\\\n\\xc9\\xae\\x97\\xd3\\x69\\x61\\x01\\x5e\\xa8\\xd2\\xf0\\x41\\x23\\x7f\\x83\\x80\\\n\\x42\\x00\\x2a\\x67\\xad\\xf4\\x10\\x66\\x01\\x14\\xdb\\x86\\x0c\\xbf\\xc0\\x11\\\n\\xf3\\xb4\\x54\\x43\\x69\\x01\\x5e\\xfe\\x97\\x17\\x37\\x61\\x3c\\xc3\\xd9\\x9f\\\n\\x7a\\xc6\\x22\\x11\\x04\\xee\\x7d\\x61\\x58\\xbf\\x4d\\x4a\\x04\\x5e\\x6a\\x00\\\n\\x7e\\xdc\\x78\\x90\\x4d\\xbe\\xe3\\x70\\x9c\\x90\\xcb\\x07\\x5a\\x8a\\x24\\xdb\\\n\\x50\\x6b\\xec\\x3e\\xbf\\x16\\xcc\\xed\\x38\\xcb\\xac\\x4d\\xb0\\xa5\\xe2\\xd5\\\n\\x27\\x1b\\x48\\x95\\xd4\\x15\\xc0\\x43\\x28\\x00\\x9b\\x7c\\x57\\xa0\\xe2\\x39\\\n\\xfe\\x05\\x5a\\xa5\\x94\\x0b\\xca\\x76\\x83\\x31\\x9e\\x89\\x40\\x9f\\x4b\\x29\\\n\\x01\\xa2\\xdd\\x60\\x8a\\x67\\xc2\\x21\\x96\\x56\\x25\\x25\\x80\\xce\\x0d\\xa6\\\n\\x78\\x2a\\xfe\\xb4\\x0a\\xc9\\x28\\x88\\xe1\\x7e\\x98\\x00\\x0a\\xc3\\x04\\x50\\\n\\x18\\x26\\x80\\xc2\\x30\\x01\\x14\\x86\\x09\\xa0\\x30\\x4c\\x00\\x85\\x51\\xbb\\\n\\x7a\\xc0\\xd9\\x3f\\x7d\\x83\\x58\\xae\\xfa\\xe5\\x87\\x0b\\xf6\\xe5\\x39\\x0e\\\n\\xdb\\x56\\x05\\x23\\x37\\xc1\\x88\\x47\\xa3\\xf4\\x30\\xe9\\x34\\xd0\\x6a\\x54\\\n\\x10\\x04\\x01\\xad\\xc3\\x56\\x5c\\xef\\x1c\\x45\\x69\\x6d\\x0f\\x3e\\x68\\x1e\\\n\\x84\\x20\\x38\\x66\\x5f\\xa4\\xde\\x1b\\x3b\\x52\\x4c\\xc8\\x4b\\x0a\\x46\\x94\\\n\\xc1\\x1b\\x26\\x3f\\x2f\\x00\\x40\\xdf\\xd8\\x14\\xda\\x86\\xad\\x38\\xd3\\xd0\\\n\\x8f\\x77\\x6e\\xf5\\xa1\\xd3\\x62\\x75\\xec\\x02\\x8b\\xc4\\xe5\\x02\\x38\\xca\\\n\\xa6\\x15\\x81\\x38\\xb4\\x3d\\x1e\\x49\\x21\\x7e\\xc4\\xfa\\x20\\xad\\x06\\x6b\\\n\\x22\\x74\\xc8\\x37\\x87\\xa3\\xaa\\x7d\\x14\\x05\\xa7\\x1a\\x50\\xd3\\x79\\x4f\\\n\\xf6\\xf8\\xfe\\xde\\x2a\\xfc\\x21\\x67\\x05\\x0a\\x1f\\x8f\\x84\\x9a\\x17\\xe7\\\n\\x20\\x83\\xfd\\x34\\x48\\x0a\\xf1\\x43\\x4e\\x7c\\x10\\x8a\\xf2\\xe2\\x70\\xf8\\\n\\x72\\x07\\x7e\\x73\\xfe\\x33\\x8c\\x5a\\x67\\x1d\\xbe\\x27\\x39\\x2c\\x09\\x17\\\n\\xf4\\xeb\\xcd\\xcb\\x50\\xb1\\x37\\x9d\\x3a\\xf9\\xf7\\x63\\x8e\\xf2\\xc7\\xff\\\n\\x0a\\xcd\\xd8\\x91\\x6c\\x92\\xd5\\x3e\\xd0\\x57\\x8d\\x8a\\x1f\\xa5\\xe3\\xc5\\\n\\xcc\\x28\\xe2\\xe4\\xdf\\x8f\\x9a\\xe7\\xf0\\x62\\x66\\x14\\xce\\xef\\x4d\\x47\\\n\\x80\\xaf\\x7b\\x9f\\x51\\xc5\\x05\\x28\\xc8\\x88\\xc4\\xef\\x9e\\x5c\\x0e\\x4e\\\n\\xfe\\xe1\\x28\\x00\\xc0\\x57\\xc3\\xe3\\xad\\xef\\xa7\\x60\\xd3\\x8a\\x40\\xc9\\\n\\x76\\x3a\\x2f\\x15\\xca\\xf7\\xa6\\xe3\\xd1\\x28\\xfd\\xa2\\x6d\\x7b\\x2c\\x5a\\\n\\x8f\\xf2\\x3d\\xe9\\xf0\\xf3\\x72\\x5f\\x52\\x58\\x51\\x01\\x22\\xf5\\xde\\xf8\\\n\\xcb\\x37\\x57\\x3a\\xdc\\x5f\\xa3\\xe2\\x70\\x74\\x57\\x12\\x34\\x2a\\xba\\x7a\\\n\\x45\\x79\\x71\\x58\\x17\\x49\\x4d\\xc5\\x2c\\x88\\x39\\xca\\x1f\\x45\\x79\\x71\\\n\\x0e\\xf7\\x5f\\x08\\x45\\xdf\\x01\\xfb\\x37\\xc6\\x10\\x9f\\xae\\xf1\\xe9\\x59\\\n\\xfc\\xf1\\xc2\\xe7\\x38\\x5d\\xdf\\x8f\\xee\\x51\\x2b\\x56\\x87\\xfb\\xa3\\x78\\\n\\x47\\x3c\\x56\\x11\\x5c\\xd4\\xb2\\x40\\x1f\\x7c\\x2d\\xd6\\x80\\x8f\\x5a\\x86\\\n\\x45\\x75\\x4f\\x2c\\x0f\\x40\\xbe\\x39\\x82\\x78\\xed\\xe9\\x59\\x01\\x65\\x75\\\n\\xbd\\xb8\\x7c\\x77\\x04\\x1c\\x07\\x3c\\x1e\\x63\\xc0\\xce\\x94\\x10\\xa2\\x98\\\n\\xcf\\x9b\\x23\\x70\\xe2\\x5a\\x37\\x2e\\xde\\x11\\x5f\\xc3\\x59\\x14\\x13\\x80\\\n\\xe3\\x80\\x9d\\xa9\\x64\\x1f\\xfe\\xcc\\x9b\\xb7\\x70\\xb6\\xa1\\xff\\x8b\\xbf\\\n\\x3f\\x6a\\x19\\x42\\xee\\xd1\\x1a\\xd4\\xed\\xcf\\x80\\xde\\x5b\\x6c\\xf2\\x96\\\n\\x78\\x23\\x51\\x80\\x9f\\x67\\xc5\\x10\\x5d\\xdb\\xf0\\xc4\\x0c\\x9e\\x3a\\x56\\\n\\x83\\xab\\x6d\\x96\\x2f\\xca\\x0e\\x5d\\x6a\\x47\\x46\\x74\\x1b\\xce\\x3d\\xbf\\\n\\x46\\xe4\\xf7\\x39\\xce\\xfe\\xb0\\xb8\\x43\\x00\\xc5\\x5c\\x50\\xb0\\x56\\x83\\\n\\x68\\x83\\x8f\\xa8\\xbc\\xb6\\xeb\\xde\\x97\\x26\\x7f\\x8e\\x0e\\x8b\\x15\\x27\\\n\\x6f\\xf4\\x12\\xc7\\xca\\x88\\x11\\xfb\\xf7\\x48\\xbd\\x37\\xb6\\x26\\x1a\\x89\\\n\\xed\\x7f\\x7a\\xfa\\xd3\\x2f\\x4d\\xfe\\x1c\\x95\\x6d\\x16\\xfc\\xec\\xcc\\xa7\\\n\\xc4\\x3e\\x4f\\x25\\x18\\x11\\x13\\x20\\xb6\\xd7\\x59\\x14\\x13\\x20\\x54\\xe7\\\n\\x45\\x2c\\x6f\\xec\\x1d\\xa3\\xf6\\xa9\\x6a\\x1f\\x25\\x96\\x47\\xe8\\xbd\\x45\\\n\\x65\\xd9\\x71\\x41\\xc4\\x88\\xa7\\xd3\\x62\\x45\\x69\\x6d\\x0f\\xf5\\x1a\\xa5\\\n\\xb5\\x3d\\xe8\\x1e\\x9d\\x12\\x95\\xab\\x78\\x0e\\xd9\\x71\\x41\\xd4\\x7e\\x8e\\\n\\xa2\\x98\\x00\\xd3\\x36\\xf2\\x4e\\x2a\\x51\\x22\\x14\\xbd\\x33\\x38\\x41\\x2c\\\n\\x0f\\xf3\\x17\\x8b\\xf9\\x58\\x34\\x39\\xea\\xa9\\x68\\x1a\\xc4\\x0c\\xe5\\xda\\\n\\x80\\xfd\\xdd\\x50\\xd1\\x34\\x48\\xac\\xa3\\x8d\\xe9\\x0c\\x8a\\xbd\\x03\\xba\\\n\\x2c\\x53\\xb0\\x09\\x02\\xf8\\xfb\\x9c\\x74\\x5a\\xb8\\x0e\\x5b\\x13\\x8d\\x38\\\n\\xd7\\x38\\x20\\xea\\x53\\xd1\\x34\\x28\\x6b\\x47\\x0d\\x00\\x6b\\x29\\x91\\x4f\\\n\\x75\\x07\\x79\\x15\\xcd\\xe7\\x5a\\xc7\\x28\\x76\\xaf\\x0d\\x13\\x95\\xaf\\x89\\\n\\x70\\xfd\\x21\\xa1\\x62\\x2b\\xc0\\x62\\x9d\\xc1\\x8d\\x2e\\xb2\\xbb\\x79\\xfd\\\n\\xbb\\xab\\xf0\\xad\\x24\\xe7\\xbe\\x7c\\x34\\xf9\\x69\\x88\\xe5\\x2d\\x03\\xe4\\\n\\x55\\x34\\x9f\\x3b\\x43\\xe4\\x36\\xc1\\x5a\\xf2\\x98\\xce\\xa0\\xe8\\x3e\\xe0\\\n\\x58\\x55\\x27\\xb1\\xdc\\xa8\\xd5\\xe0\\x9d\\xe7\\x56\\xe3\\xe4\\x0f\\x52\\x91\\\n\\x60\\xd2\\x3a\\x34\\x76\\x80\\x2f\\x79\\xb2\\xe4\\xa4\\x16\\x2c\\x93\\x33\\x8b\\\n\\x1a\\xd3\\x19\\x14\\x15\\xa0\\xe4\\x6a\\x27\\x6e\\x76\\x93\\xf3\\x39\\x1c\\x07\\\n\\xec\\x4c\\x31\\xe1\\xc6\\xbe\\x0c\\xbc\\xf9\\x4c\\x32\\xb2\\xe3\\x82\\x44\\xee\\\n\\x4a\\x0a\\xbd\\x37\\x79\\xf7\\x3a\\x39\\xb3\\xb0\\x00\\x13\\xd3\\x36\\x62\\xb9\\\n\\x3f\\x65\\x4c\\x67\\x50\\x54\\x80\\xc9\\x19\\x1b\\xbe\\x73\\xa2\\x0e\\x3d\\xf7\\\n\\xc4\\x51\\xc7\\x1c\\x6a\\x9e\\xc3\\xd3\\x69\\xa1\\x28\\xdf\\xb3\\x06\\x75\\x2f\\\n\\x65\\x60\\x57\\x6a\\x88\\xac\\xb4\\x85\\x4a\\x46\\xce\\x87\\x86\\x8d\\x92\\x6a\\\n\\x95\\x93\\x47\\x5a\\x2c\\x8a\\xe7\\x82\\x9a\\xfa\\xc7\\x91\\x7d\\xe4\\x3a\\x35\\\n\\xc2\\x99\\x4f\\x82\\x49\\x8b\\xd2\\x67\\x53\\x70\\xf6\\x87\\x69\\x54\\x1f\\xff\\\n\\xa0\\xa1\\xb8\\x00\\x00\\x50\\xdf\\x3b\\x86\\xb5\\x07\\x3f\\xc1\\xf1\\xaa\\x2e\\\n\\xea\\xd3\\x37\\x9f\\xdc\\x04\\x23\\x2e\\x16\\xae\\x7b\\x28\\x44\\x58\\x12\\x02\\\n\\x00\\xf6\\xa8\\x68\\xef\\xbf\\x1b\\xb0\\xbe\\xb8\\x0a\\x1f\\x50\\xe2\\xf0\\xf9\\\n\\xc4\\x07\\x6b\\x51\\xf6\\xdc\\x6a\\xb7\\xb8\\x85\\xaf\\x92\\x25\\x23\\xc0\\x1c\\\n\\xd5\\x1d\\xa3\\xd8\\x52\\x52\\x83\\xf5\\xc5\\x55\\x78\\xbb\\xae\\x4f\\x72\\x45\\\n\\x64\\xc6\\x1a\\xf0\\xd2\\x86\\x98\\xaf\\xcc\\x36\\x47\\x4f\\xe1\\xa4\\x58\\x72\\\n\\x02\\xcc\\xf1\\x49\\xbb\\x05\\xbb\\x4e\\xdc\\x44\\xd2\\x5f\\xaf\\xe0\\x1f\\xd5\\\n\\x5d\\xd4\\x76\\xfb\\x36\\x44\\xc3\\x47\\x2d\\xbe\\x0d\\xeb\\x0c\\x39\\x92\\x91\\\n\\xb3\\x62\\x68\\xd1\\xd6\\xd8\\xb4\\xeb\\x4f\\xc7\\x96\\xac\\x00\\x73\\x34\\x0f\\\n\\x4c\\x20\\xff\\x64\\x03\\x0a\\xdf\\xbe\\x4d\\x5c\\x0d\\x21\\x3a\\x2f\\xac\\x8f\\\n\\x35\\x88\\xca\\x87\\x29\\xb1\\xbc\\x8f\\x66\\xe1\\x50\\xd2\\x97\\xd2\\x66\\x78\\\n\\x82\\x3c\\xa6\\x33\\x2c\\x79\\x01\\xe6\\x38\\x52\\xd9\\x81\\x37\\xaa\\xbb\\x89\\\n\\x75\\x66\\x42\\xda\\x61\\x88\\x32\\x59\\x61\\x94\\x24\\xe0\\x7c\\x82\\xb4\\xe4\\\n\\x0c\\xcd\\xd0\\x84\\xe4\\xbf\\x7b\\x39\\x84\\x62\\xb9\\xa0\\x91\\xdf\\x3f\\x01\\\n\\x1d\\xe1\\x30\\x66\\xc3\\xe1\\x6a\\x7c\\x7c\\x77\\x84\\xd8\\xe7\\x74\\x7d\\x1f\\\n\\xf2\\xcd\\xe1\\xa2\\xf2\\x50\\x42\\x32\\xae\\xb9\\x7f\\x1c\\x89\\x84\\x5d\\xb4\\\n\\x9c\\x9d\\xf5\\x4a\\x23\\xb9\\xcd\\xad\\x1e\\x7a\\xa6\\xd6\\x51\\x14\\x5b\\x01\\\n\\xb4\\xcf\\x3e\\x48\\xa9\\xe5\\x39\\x06\\xc7\\xc9\\x4f\\xb5\\x97\\x4a\\x7c\\x1b\\\n\\x95\\x84\\x7c\\x3f\\x00\\x6c\\x7c\\x24\\x60\\x41\\xdb\\x32\\x09\\x2e\\x0d\\x00\\\n\\x2a\\x5b\\xc9\\x63\\x3a\\x83\\x62\\x02\\x74\\x8c\\x90\\x05\\xc8\\x89\\xa7\\xe7\\\n\\xdc\\x69\\xe2\\x0c\\x8c\\x8b\\x5d\\xc3\\xa5\\xcf\\xc9\\xa7\\x57\\x1b\\x1e\\x09\\\n\\x40\\x5c\\x30\\x7d\\x15\\x84\\xe8\\xbc\\xb0\\x39\\x8e\\x7c\\xd0\\xff\\xdf\\x96\\\n\\x21\\x6a\\x3f\\x47\\x51\\x4c\\x80\\x0b\\xcd\\xe4\\x9b\\x79\\x36\\x3d\\x0c\\x69\\\n\\xe1\\xe4\\xb4\\x2f\\x29\\x45\\x0c\\x00\\xb7\\xfb\\xc6\\x45\\x65\\x17\\xef\\x0c\\\n\\x13\\xcb\\x55\\x3c\\x87\\xa3\\xbb\\x12\\xe1\\xab\\x11\\xdf\\x3a\\xcf\\x71\\x28\\\n\\xca\\x8b\\x83\\x96\\xf0\\x12\\xbe\\xd2\\x6a\\xc1\\x8d\\x2e\\xf9\\xdf\\x21\\xc9\\\n\\x45\\x31\\x01\\x4e\\xd7\\xf7\\x11\\xcb\\x7d\\xd4\\x3c\\x2e\\x16\\xae\\xc3\\xab\\\n\\x5b\\x57\\x62\\xdb\\xaa\\x60\\x6c\\x5e\\x19\\x84\\xed\\xc9\\x26\\x9c\\xda\\x9d\\\n\\x4a\\x3c\\x62\\x9c\\xb1\\x09\\xc4\\x8d\\x9b\\x20\\x00\\xc5\\x1f\\xb7\\x13\\xaf\\\n\\x91\\xb5\\x2c\\x00\\x97\\x7f\\x6c\\xff\\xae\\xc8\\xe0\\xa3\\x86\\x8f\\x9a\\x47\\\n\\x66\\xac\\x01\\xef\\xe6\\xa7\\xe1\\x7b\\x69\\xa1\\xc4\\x3e\\x87\\x2e\\xb5\\x2d\\\n\\xe2\\xee\\xe4\\xa3\\xd8\\x4b\\xf8\\x56\\xcf\\x18\\x4a\\x6b\\x7b\\xf0\\x34\\xe1\\\n\\x86\\x75\\x5e\\x2a\\xec\\xdf\\x18\\x83\\xfd\\x1b\\x17\\xde\\x64\\x1d\\xaf\\xea\\\n\\x22\\xba\\x20\\x00\\x78\\xed\\x4a\\x07\\xbe\\x9d\\x6a\\xc2\\xd7\\x97\\x8b\\x5d\\\n\\x4a\\x6a\\x98\\x0e\\x65\\xbb\\x53\\x65\\xd9\\xfa\\xfe\\xed\\x01\\xbc\\x25\\x71\\\n\\x8c\\xe9\\x0c\\x8a\\x86\\xa1\\x05\\xa7\\x1a\\x71\\xbd\\x73\\xe1\\x13\\x2a\\x1a\\\n\\xad\\xc3\\x93\\xf8\\xed\\xf9\\x16\\x6a\\xbd\\x4d\\x10\\x50\\x50\\xd6\\x88\\x41\\\n\\x8a\\x40\\x72\\x18\\x1c\\x9f\\xc6\\x4f\\xfe\\x43\\x3e\\xa8\\x77\\x05\\x8a\\x0a\\\n\\x30\\x6a\\x9d\\x45\\x6e\\x49\\x8d\\x43\\x2f\\xb7\\x9e\\x7b\\x53\\xc8\\x3b\\x5e\\\n\\x8b\\x5e\\x89\\x54\\x36\\x60\\xdf\\xc8\\x65\\x14\\x57\\xa1\\x59\\xc6\\x49\\xd8\\\n\\xfd\\xb4\\x8d\\x4c\\x22\\xeb\\x70\\xb5\\xac\\x4c\\xad\\xa3\\x28\\xbe\\x11\\xeb\\\n\\x1f\\x9b\\x46\\xce\\xd1\\x1a\\xec\\x3b\\xd3\\x84\\x76\\x4a\\x64\\x34\\x9f\\x59\\\n\\x9b\\x80\\x53\\x75\\x7d\\x58\\x7b\\xf0\\x2a\\xea\\x64\\xc6\\xe5\\x2d\\x83\\x13\\\n\\xc8\\xfa\\x7b\\x15\\x5e\\xbb\\xd2\\x21\\x79\\x20\\x3f\\x87\\x4d\\x10\\xf0\\xcf\\\n\\xeb\\xdd\\xd8\\x78\\xf8\\x1a\\xf1\\x45\\xee\\x4a\\xa8\\x89\\x11\\xfe\\xc0\\x05\\\n\\x87\\x52\\x4f\\xce\\x7e\\x9e\\x9e\\xb5\\xcc\\x80\\xec\\xb8\\x20\\x24\\x98\\xb4\\\n\\x08\\x9c\\xf7\\x81\\x54\\x97\\x65\\x0a\\x95\\x6d\\x16\\xbc\\xdb\\xd8\\x8f\\xbb\\\n\\x43\\x93\\x8e\\x98\\x06\\xc0\\xfe\\x25\\xdd\\xf6\\x64\\x13\\xb6\\x26\\x18\\xb1\\\n\\xc2\\xe8\\x8b\\x08\\xbd\\x37\\xd4\\x3c\\x87\\xbe\\xb1\\x69\\xb4\\x0e\\x4f\\xe2\\\n\\x6c\\x43\\x3f\\xca\\x6e\\xf6\\xa2\\xd1\\xc5\\x13\\x6f\\xfb\\xf3\\x66\\xe2\\x5c\\\n\\xbb\\x5c\\x00\\x06\\x19\\x9a\\x00\\x8a\\xbb\\x20\\x4f\\x87\\x09\\xa0\\x30\\x4c\\\n\\x00\\x85\\x61\\x02\\x28\\x0c\\x13\\x40\\x61\\x98\\x00\\x0a\\xc3\\x04\\x50\\x18\\\n\\x29\\x01\\x5c\\x7f\\xfc\\xe3\\xb9\\x50\\x13\\x5e\\x52\\x02\\xb4\\xba\\xc1\\x10\\\n\\x4f\\x85\\x3a\\x97\\x12\\x02\\x70\\xef\\xb9\\xc3\\x12\\x8f\\x44\\x10\\xce\\xd1\\\n\\xaa\\xa8\\x02\\xd8\\x78\\x5b\\x09\\x00\\xd7\\x7f\\x87\\xe1\\x79\\xcc\\xd8\\x54\\\n\\xaa\\x63\\xb4\\x4a\\xfa\\x0a\\xb0\\xff\\xf6\\xf1\\x21\\x77\\x58\\xe4\\x51\\x08\\\n\\x42\\x11\\x5e\\xd9\\xd4\\x48\\xab\\x96\\x8c\\x82\\x6c\\x43\\x86\\x03\\x02\\x84\\\n\\x72\\xd7\\x5b\\xe5\\x19\\x08\\xc0\\x7b\\x36\\xad\\xea\\x57\\x52\\x6d\\xa4\\xc3\\\n\\xd0\\x23\\xe6\\x69\\x61\\x28\\x20\\x0f\\x1c\\x8a\\x61\\xff\\x41\\x6a\\x86\\x3c\\\n\\x66\\x01\\x1c\\x14\\x86\\x0c\\xdb\\xf1\\xf2\\x26\\x49\\x37\\xee\\xc8\\xcf\\xd7\\\n\\x6f\\x01\\xb0\\x1c\\x80\\xeb\\xff\\x69\\xf6\\xc1\\x66\\x12\\xc0\\x67\\x00\\x57\\\n\\xbe\\x98\\x9f\\xaf\\x67\\x30\\x18\\x0c\\x06\\x83\\xc1\\x60\\x30\\x18\\x0c\\x06\\\n\\x83\\xc1\\x60\\x30\\x18\\x0c\\x06\\x83\\xf1\\xf0\\xf3\\x7f\\x1d\\x32\\xb2\\xaf\\\n\\xed\\xb5\\x64\\x96\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\\n\\x00\\x00\\x0e\\xd1\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x64\\x00\\x00\\x00\\x64\\x08\\x06\\x00\\x00\\x00\\x70\\xe2\\x95\\x54\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0e\\xc3\\x00\\x00\\x0e\\xc3\\x01\\xc7\\x6f\\\n\\xa8\\x64\\x00\\x00\\x0e\\x66\\x49\\x44\\x41\\x54\\x78\\x5e\\xed\\x5d\\x79\\x90\\\n\\x5c\\x45\\x19\\x1f\\xef\\x1b\\xe3\\x7d\\x1f\\xe5\\x3f\\x2a\\xa7\\x12\\xc4\\x04\\\n\\x76\\x66\\x76\\x43\\xa2\\x51\\xc2\\xce\\x7b\\xb3\\xbb\\x94\\x27\\x10\\x0d\\x31\\\n\\x50\\x92\\x08\\x1a\\x4f\\x4c\\x88\\x04\\xa8\\xa2\\x8c\\x16\\x6a\\xa8\\x60\\x05\\\n\\x41\\x41\\x20\\x0b\\x21\\xd9\\x9d\\x7e\\xb3\\x39\\xd0\\x98\\x10\\x95\\x08\\x78\\\n\\xc4\\xc4\\x2a\\xb4\\x5c\\x93\\x10\\xe4\\x54\\x30\\xb8\\x24\\x42\\xb2\\xeb\\xef\\\n\\xeb\\xf7\\xed\\xa4\\xbb\\x5f\\xbf\\x99\\x79\\x33\\x93\\x99\\x59\\xe8\\x5f\\xd5\\\n\\x57\\x3b\\x79\\x5f\\xf7\\xd7\\x5f\\x7f\\x7d\\x77\\x7f\\xdd\\x49\\x39\\x38\\x38\\\n\\x38\\x38\\x38\\x38\\x38\\x38\\x38\\x38\\x38\\x38\\x38\\x38\\x38\\x34\\x06\\x1d\\\n\\x79\\xf1\\x9e\\x8c\\x57\\xfc\\x5c\\xd6\\x13\\x97\\x65\\xfd\\x60\\xa9\\xfc\\x9d\\\n\\x1b\\x7a\\x37\\xb3\\x1d\\x9a\\x85\\xb4\\x57\\xfc\\x08\\x0a\\xe0\\x37\\xa0\\xb1\\\n\\x28\\x89\\xd1\\x8c\\x27\\xb6\\x66\\xf3\\x62\\x3a\\x07\\x77\\x38\\x52\\xe8\\xeb\\\n\\xeb\\x7f\\x41\\xc6\\x17\\x57\\xdb\\x0b\\xc2\\x42\\x5e\\xb0\\x9c\\xe2\\x70\\x74\\\n\\x87\\x46\\xe2\\xe8\\xbe\\xfe\\x17\\x67\\xfc\\x60\\xad\\xd5\\xf0\\xe5\\x69\\x35\\\n\\xc5\\x65\\x31\\x0e\\x8d\\xc1\\xd8\\xf3\\xc8\\xb0\\x86\\xa1\\x43\\xf2\\x82\\xbf\\\n\\xa3\\xa0\\x6e\\x20\\xa2\\xdf\\xb6\\x30\\xe8\\xc2\\x6e\\x25\\x19\\x2c\\xcc\\xa1\\\n\\x5e\\xc0\\xa8\\x4b\\x4d\\x23\\x83\\xfe\\x0d\\x9a\\xa3\\x1b\\x1a\\x05\\xe7\\x05\\\n\\xe7\\xa2\\x00\\x9e\\x30\\xc2\\x12\\x2d\\xe1\\x40\\x0e\\xf5\\xa0\\x33\\x1f\\x9c\\\n\\x0a\\x23\\x1f\\x52\\x8d\\x0b\\x83\\xdf\\xdf\\xd5\\x3d\\xf4\\x5e\\x0e\\x12\\x41\\\n\\x36\\x3f\\xf8\\x3e\\x0a\\xa3\\xc7\\x09\\x0e\\x66\\xbc\\xc1\\xa9\\x1c\\xc4\\xa1\\\n\\x16\\x50\\xdf\\x0f\\x63\\xfe\\x45\\x35\\x2c\\x68\\x24\\xdb\\x13\\x9c\\xc4\\x41\\\n\\x62\\x91\\xf6\\x0a\\x27\\xa3\\x20\\x9f\\x52\\xe3\\xa2\\x90\\x76\\x4c\\x9e\\x7b\\\n\\xcf\\x8b\\x38\\x88\\x43\\x52\\x64\\xbd\\xe2\\x79\\xaa\\x41\\x43\\x12\\x17\\x32\\\n\\xbb\\x22\\x32\\xf9\\xe0\\xcb\\x66\\x7c\\x14\\xca\\x5c\\x66\\x3b\\x24\\xc1\\x94\\\n\\xde\\x55\\x2f\\x83\\x01\\x1f\\x30\\x0c\\xba\\x2d\\xc9\\x34\\x56\\x4e\\x93\\x3d\\\n\\x71\\xb7\\x2a\\x03\\x5d\\xd7\\xde\\xec\\xd9\\x9b\\x5e\\xca\\x41\\x1c\\xaa\\x45\\\n\\x3a\\x27\\x3e\\xaf\\x1a\\x92\\x28\\x9d\\x17\\x19\\x66\\x57\\x8d\\x4e\\xaf\\x98\\\n\\x8d\\xc8\\xf1\\x0a\\x67\\x33\\xdb\\xa1\\x5a\\x64\\x3d\\xf1\\x7b\\xd5\\x88\\xa8\\\n\\xd9\\x43\\xcc\\x4a\\x0c\\xc8\\xda\\xa0\\xca\\x22\\xd9\\xcc\\x72\\xa8\\x06\\x72\\\n\\x40\\x56\\x0d\\x08\\xca\\xe4\\x45\\x17\\xb3\\x13\\x03\\x6b\\x94\\x19\\x11\\x79\\\n\\x7e\\xf1\\x43\\xcc\\x76\\xa8\\x04\\x0c\\xdc\\xcb\\x74\\x03\\x8a\\x9d\\xf5\\x2d\\\n\\xec\\x68\\x61\\x29\\x76\\x1a\\x32\\x97\\x31\\xd3\\xa1\\x2c\\x16\\x2f\\x7e\\x3e\\\n\\x0c\\xa6\\x0d\\xe6\\xe8\\xae\\x16\\x30\\xb7\\x66\\x90\\x0c\\x43\\xe6\\x5e\\x4a\\\n\\x8b\\xd9\\xcf\\x6e\\xd0\\x2c\\x46\\x76\\x13\\x5e\\xf0\\x0d\\xf4\\xd7\\x3f\\x47\\\n\\xe6\\x37\\xc2\\x08\\xdb\\x68\\xc6\\x43\\xbf\\xe5\\x9e\\x94\\x17\\x5c\\x45\\x53\\\n\\x58\\xd0\\xcc\\x6c\\x9f\\x78\\x33\\x47\\x4d\\x75\\x76\\x8b\\x0f\\x1b\\x86\\x3b\\\n\\xa8\\xf2\\x6b\\x05\\xc9\\x90\\xb2\\x14\\xd9\\xea\\x7a\\x26\\xed\\x0f\\xbd\\x45\\\n\\xea\\x42\\x3a\\x41\\x37\\xd2\\x51\\xea\\x1a\\xce\\xd2\\xa0\\x3b\\xf2\\xe0\\x89\\\n\\x1b\\x29\\x4f\\x32\\x6f\\x13\\x61\\xa6\\x86\\x75\\x43\\x47\\xc6\\x17\\xb7\\x81\\\n\\xfe\\xab\\x65\\xbc\\x1a\\xf2\\xc4\\x3f\\xf1\\xb7\\x3f\\xe3\\x15\\x84\\xf1\\x7d\\\n\\x03\\x8b\\xaf\\x1b\\x90\\xf5\\x0b\\x55\\x36\\x8c\\x2c\\x48\\x5f\\x7c\\x7f\\x58\\\n\\xfd\\x5e\\x0d\\x71\\x1e\\xfb\\x69\\x27\\x81\\xc5\\xb7\\x0f\\xb2\\x7d\\x9b\\x5e\\\n\\x09\\xe5\\x56\\xa9\\x0a\\x37\\x8c\\xbc\\x60\\x79\\x23\\x6a\\xa3\\x6c\\xb5\\xf9\\\n\\x60\\x85\\x35\\x8d\\x3a\\x09\\x05\\x7b\\xf3\\x8c\\x19\\xeb\\x5f\\xc1\\x49\\xb5\\\n\\x16\\x53\\x7a\\xd7\\xbd\\x16\\x46\\xbb\\xd7\\xa6\\x68\\x03\\x69\\x1f\\xe8\\x7a\\\n\\x79\\xe8\\x94\\xa0\\xdf\\xa7\\x85\\x21\\xc5\\x41\\x0b\\xf8\\x29\\xba\\x9e\\x27\\\n\\x0d\\x99\\x0d\\x25\\x74\\x63\\xf7\\x74\\x9c\\x2e\\x5e\\xc3\\x49\\xb7\\x06\\x7c\\\n\\x60\\x74\\x47\\x8c\\x82\\x8f\\x87\\x63\\x85\\xb8\\x0c\\x61\\xe6\\xd3\\xf1\\xaa\\\n\\x24\\x5f\\x9c\\x8f\\x6f\\x17\\x23\\xcc\\x35\\xa8\\x59\\x43\\x28\\xcc\\xdd\\x66\\\n\\xdc\\x0a\\x44\\x03\\xfe\\xb7\\xa7\\xfa\\xeb\\xdf\\xc8\\x6a\\x44\\x30\\xed\\x8c\\\n\\x81\\x37\\xa1\\x00\\x16\\x73\\x58\\x9b\\x8c\\x38\\x1a\\x66\\x9d\\x56\\x90\\x8e\\\n\\x52\\x57\\x3f\\x98\\xcd\\x7a\\xcf\\x07\\x5d\\x0e\\xde\\x00\\x64\\xdb\\x76\\x93\\\n\\xa9\\xa5\\x6c\\x6c\\xe9\\x81\\x98\\x6d\\x35\\x0d\\xa5\\x1e\\xa4\\x8c\\xcc\\x9c\\\n\\x59\\x7c\\x09\\x07\\xab\\x88\\x6c\\x6e\\xcd\\x24\\x5a\\x67\\xc0\\x08\\x5b\\x4c\\\n\\x79\\x71\\x84\\x34\\x0e\\xa0\\xc0\\xaf\\xcb\\xf4\\x14\\x3f\\xc8\\x62\\x30\\x30\\\n\\x0f\\x9e\\x08\\xde\\xf5\\xc4\\x33\\xc3\\xc7\\x11\\x64\\x6c\\xca\\xe6\\x0a\\x9d\\\n\\xa4\\x03\\x8b\\xa9\\x08\\xca\\x1b\\x0a\\xe6\\x8b\\x88\\xfb\\x90\\x29\\x8f\\x6c\\\n\\xc2\\xc1\\x9a\\x0f\\xcc\\x48\\xb6\\x1b\\x0a\\x0d\\x9f\\xd2\\xbd\\xf6\\xad\\xcc\\\n\\x4e\\x0c\\x64\\xf2\\x97\\x9a\\x3c\\x4f\\xdc\\x8b\\x6f\\xda\\x8e\\x6d\\x0c\\xed\\\n\\x44\\x58\\x63\\x9d\\x61\\xa5\\x11\\x54\\x18\\xad\\x7b\\x45\\xe1\\xdd\\xc1\\xc9\\\n\\x27\\x06\\xe5\\x15\\x32\\x86\\x75\\x79\\xc1\\x1f\\x98\\xdd\\x5c\\x4c\\xeb\\x2d\\\n\\xbc\\x4d\\x55\\x84\\x28\\xed\\x07\\xd3\\x98\\x5d\\x13\\xcc\\xae\\x80\\xce\\x2f\\\n\\x90\\xe9\\x57\\x65\\x73\\xe2\\x1c\\xea\\x0e\\x50\\x01\\x46\\x55\\x7e\\x75\\x44\\\n\\x4e\\x0f\\xc1\\x46\\xda\\xbf\\x92\\x93\\x0f\\xcc\\x04\\x35\\xbe\\x27\\xfe\\xc5\\\n\\xc9\\xd7\\x04\\xca\\xb3\\x26\\x0f\\x44\\x53\\x68\\x66\\x37\\x0f\\x9d\\xbe\\x38\\\n\\x5d\\x55\\x02\\x99\\xde\\xc5\\xac\\x9a\\x70\\x6a\\xdf\\xe0\\x3b\\x55\\x79\\x68\\\n\\x19\\x87\\xa8\\x30\\x98\\x2d\\x21\\x0f\\x9e\\x7c\\x71\\x35\\x6a\\xe1\\x7e\\x2d\\\n\\xac\\x85\\x10\\x6e\\x3f\\x64\\x2c\\x37\\x0f\\xb2\\x4e\\x9e\\x59\\x3c\\x2a\\x5a\\\n\\xb0\\xc5\\xb7\\x33\\xbb\\x26\\x40\\xde\\x1e\\x55\\x1e\\x6c\\xf1\\x31\\x66\\x35\\\n\\x0f\\x69\\x5f\\x7c\\x41\\x53\\xc2\\x17\\x77\\x32\\xab\\x26\\x64\\xfc\\x42\\xb7\\\n\\x21\\xef\\x6f\\xcc\\x2a\\x01\\xfd\\xf3\\x29\\xe0\\x55\\x3d\\xce\\xa0\\x40\\x36\\\n\\x53\\x1c\\x8e\\x5e\\x02\\x78\\x5a\\x37\\x43\\x95\\x8b\\x59\\x35\\x01\\x2d\\x7b\\\n\\xab\\x2a\\xaf\\x25\\xe3\\x08\\x9a\\xfa\\x27\\x55\\x25\\xea\\xed\\x3b\\x23\\x87\\\n\\x49\\x9e\\x08\\x98\\x45\\x19\\x7e\\x3f\\x6a\\xe1\\xa0\\xc6\\x4f\\x44\\x62\\x90\\\n\\x64\\xb0\\x38\\xda\\x46\\x19\\x32\\xf8\\x55\\x1f\\x7a\\xd9\\x00\\x79\\x7f\\xd6\\\n\\xe5\\x15\\x3e\\xc1\\xac\\xe6\\xa1\\xcb\\x13\\x93\\x55\\x25\\x90\\xe1\\x27\\xeb\\\n\\x99\\xf2\\xa1\\x36\\x5f\\xa5\\xca\\xc3\\xbf\\x57\\xf0\\x21\\xd5\\x52\\xfc\\xfe\\\n\\x9f\\xc6\\x53\\x88\\x8c\\x91\\xc9\\x15\\xcf\\xa0\\x16\\x16\\x35\\x8c\\x42\\x90\\\n\\x81\\x4a\\x73\\x29\\xc9\\x44\\xeb\\xfb\\xb1\\xca\\x43\\xbc\\xef\\xb3\\x1a\\x89\\\n\\x41\\x47\\xc2\\x90\\x31\\xa2\\xca\\xeb\\xf2\\x0b\\x27\\x30\\xbb\\x79\\xc8\\x66\\\n\\x37\\xbd\\x10\\x19\\xd3\\xb6\\x48\\x3a\\xf3\\x85\\x8f\\x32\\x3b\\x31\\x60\\xb0\\\n\\xdb\\x55\\x59\\x98\\x06\\xff\\x04\\xdf\\xfe\\xaa\\x7e\\x33\\x68\\x18\\x8b\\xbe\\\n\\xcf\\x6a\\x0b\\x45\\xfc\\x86\\xd1\\xcf\\x82\\x5e\\xff\\xb0\\x84\\x0f\\x09\\x32\\\n\\x3b\\xbd\\xe2\\x75\\xea\\x37\\x84\\xbf\\x8d\\x25\\x24\\x86\\x39\\x96\\x82\\xf6\\\n\\xb5\\x6c\\x2d\\x42\\xdd\\x8a\\xaa\\x4c\\x3d\\x19\\x43\\x0b\\xd3\\x8e\\x5a\\xe3\\\n\\x08\\x06\\xc7\\xdc\\x5f\\x5c\\x50\\xce\\xf9\\x2d\\x74\\x8e\\x10\\x17\\x40\\xbf\\\n\\x98\\x3d\\x2a\\x63\\x50\\xf7\\xc4\\xef\\x38\\x6a\\x62\\x40\\x1f\\xcd\\x79\\x0f\\\n\\x36\\x28\\x30\\xab\\xf9\\x40\\x46\\x3e\\xa3\\x2a\\x83\\xda\\x77\\xa8\\xa3\\xa7\\\n\\x78\\x3c\\xb3\\x13\\x21\\xde\\x78\\x4c\\xb2\\xcb\\xc1\\x4a\\x19\\x53\\x57\\x8e\\\n\\x52\\x11\\x14\\x56\\xc6\\x29\\xd3\\xe5\\x11\\xa1\\xcb\\x7a\\x90\\xa3\\x24\\x02\\\n\\x2d\\x4a\\xcd\\xc2\\xc5\\x58\\xf8\\x29\\x66\\x37\\x1f\\x93\\x67\\x0d\\xbe\\x1c\\\n\\x4a\\x90\\xc3\\xda\\xe1\\x0c\\x2a\\x83\\x71\\xb5\\xa0\\xad\\x0e\\x4d\\x86\\x41\\\n\\x30\\xea\\x9d\\x18\\x28\\x8f\\xe5\\xe0\\x89\\x41\\x71\\xcd\\x99\\x90\\x4e\\x62\\\n\\x6c\\xaa\\xbf\\x3a\\x76\\x2b\\x26\\x0e\\x28\\xc8\\x75\\xaa\\x1c\\xb4\\x96\\xc7\\\n\\x68\\x8c\\x62\\x76\\x6b\\x00\\x25\\xbe\\xa9\\x2a\\x25\\x15\\xf3\\xc4\\x99\\xcc\\\n\\xae\\x08\\xac\\x01\\xa6\\x20\\xfc\\x5e\\x53\\x86\\x94\\x43\\xfb\\x61\\xd2\\x6d\\\n\\xa7\\x01\\x6e\\xa0\\x34\\xbe\\x40\\x16\\xc9\\xb4\\xa5\\x05\\xda\\x43\\x47\\xc7\\\n\\x1c\\xba\\x22\\x50\\xf1\\xb4\\x59\\x26\\x51\\x26\\x17\\x7c\\x95\\xd9\\xad\\x83\\\n\\x5c\\x49\\x87\\x67\\x19\\x87\\x15\\x43\\x17\\x50\\x6e\\xf3\\x2f\\x04\\xb9\\x7d\\\n\\x8a\\x85\\xa0\\xa7\\xd5\\xb8\\x25\\x19\\x7e\\x70\\x13\\xb5\\x1c\\x0e\\xdc\\x30\\\n\\xd0\\x41\\x15\\xd2\\xbc\\xc5\\x96\\x26\\xe9\\x02\\xdd\\x2f\\xaa\\x54\\x01\\x64\\\n\\x8b\\x36\\xba\\x58\\xc4\\xdb\\xdb\\x36\\x5b\\xf0\\xa8\\xe5\\xbd\\xaa\\x72\\x21\\\n\\x89\\xf5\\x71\\x5b\\xe5\\x1d\\xbd\\xc5\\x37\\x20\\x43\\xda\\x84\\x40\\x23\\x2f\\\n\\x78\\x98\\x83\\x56\\xc4\\xd8\\x9a\\xd4\\xa4\\x31\\x91\\x9a\\x2c\\x69\\x63\\xea\\\n\\xd5\\xfc\\xb9\\x22\\x60\\xc0\\x47\\xad\\x69\\x83\\xc0\\x13\\xa7\\x79\\xb7\\xbf\\\n\\x8e\\x83\\x6a\\x88\\xdd\\xe1\\xce\\x05\\x1e\\x07\\x69\\x0f\\x40\\xa9\\x88\\x77\\\n\\x3a\\xba\\x88\\x45\\xcc\\x2e\\x21\\x9b\\x13\\x1f\\xc0\\x77\\xcd\\xef\\xd6\\x24\\\n\\x64\\x38\\xb2\\x4a\\x37\\x31\\x5a\\x48\\x9d\\x30\\x3a\\x98\\x0a\\x40\\xcf\\x8c\\\n\\x15\\x52\\x63\\x44\\xf4\\x1b\\xdf\\x07\\x89\\xc7\\xc1\\x62\\x81\\x42\\xb7\\x7a\\\n\\xca\\x97\\xc8\\x0b\\x76\\xa3\\x0b\\x3a\\x8e\\x83\\x97\\x00\\xdd\\x69\\x5b\\xdf\\\n\\x0c\\xdf\\xcf\\xec\\xf6\\x01\\x1d\\xce\\xc0\\x90\\xc6\\xfc\\x5f\\x8c\\xa6\\xfd\\\n\\xe2\\xa7\\x39\\x48\\xaa\\xd3\\x13\\x39\\x64\\x28\\x72\\x50\\x84\\x1a\\xa9\\x9f\\\n\\x75\\xfb\\x62\\x3b\\x47\\xb1\\x02\\xad\\xa1\\x0f\\xc6\\xdf\\x3f\\x5e\\x10\\x26\\\n\\x11\\x6f\\x54\\xa4\\xf2\\x1c\\xdc\\x0a\\x4a\\x43\\x4d\\x33\\xaa\\x83\\xa4\\x7d\\\n\\xb4\\xe8\\xe4\\x28\\x29\\xca\\x0b\\xe5\\xc9\\x08\\x33\\x3c\\xbd\\x6f\\x63\\xd5\\\n\\x2d\\xb3\\xa9\\x20\\xa7\\x01\\x28\\xa8\\xad\\x5a\\x69\\xca\\x19\\xee\\x88\\xd2\\\n\\xba\\x40\\xf7\\x62\\x67\\xfe\\x6e\\x74\\x5f\\x74\\x47\\xb0\\xf4\\x0d\\x85\\xf6\\\n\\x5b\\x16\\x19\\xc1\\xe8\\x40\\xea\\x78\\x18\\xfc\\x80\\xad\\x20\\x54\\x42\\x2b\\\n\\x19\\x01\\xc5\\xce\\xcc\\x30\\x46\\xdd\\xa5\\xa6\\x99\\x96\\x3a\\xe8\\x9b\\x84\\\n\\x44\\xb2\\xa0\\xbc\\x60\\x5e\\x67\\xae\\x78\\x1a\\xe5\\xc5\\xe0\\x8f\\xd0\\x8e\\\n\\x05\\x8b\\x6c\\x4f\\xd0\\x3e\\x8e\\x59\\x8b\\x60\\xe0\\x98\\x75\\x80\\x18\\xa4\\\n\\xbe\\x3a\\xe2\\x54\\xed\\x05\\x9b\\x59\\x5c\\x04\\x28\\x0c\\x61\\x2b\\x00\\x1b\\\n\\xa1\\x40\\x62\\x17\\x69\\x48\\x47\\xdf\\xa4\\x84\\x0e\\xa1\\x2e\\x71\\x63\\x9b\\\n\\x31\\xf9\\x40\\xe5\\xa2\\xed\\x1a\\x16\\xd7\\xde\\x40\\xa6\\xbe\\xae\\x29\\x6f\\\n\\x21\\xd4\\xd0\\x2b\\xc7\\x07\\x7d\\x64\\xf6\\x2b\\x1a\\x0f\\x83\\xaa\\x14\\x64\\\n\\x80\\x06\\x70\\x14\\xc8\\xd3\\x36\\xe3\\xdb\\x88\\xc2\\x8e\\xae\\x4d\\x69\\x5b\\\n\\xf8\\xe3\\xa0\\x34\\xd4\\x34\\x49\\x07\\xfa\\x4e\\x83\\x36\\x7e\\x1b\\x8e\\x7a\\\n\\x16\\xc2\\x0c\\x51\\x0a\\x9a\\x28\\x40\\xab\\xf8\\x8e\\x2d\\x23\\x18\\x67\\x9e\\\n\\xc1\\xdf\\xd9\\x1c\\x4c\\x02\\x85\\x63\\xae\\x65\\x56\\x33\\x4b\\xc3\\x68\\x90\\\n\\x3a\\xc9\\x66\\xf8\\xb2\\x84\\xd9\\x17\\x47\\xd7\\x40\\x69\\xa8\\x69\\x92\\x0e\\\n\\xcc\\x92\\xc0\\xb7\\x39\\x30\\xba\\x6d\\x5c\\xa1\\x16\\xbf\\x98\\x83\\x4d\\x1c\\\n\\xc0\\xf0\\x97\\x5b\\x33\\x13\\x16\\xc8\\x1c\\x0e\\x26\\xd1\\x96\\x05\\x82\\x71\\\n\\x03\\xad\\x28\\x3a\\xe6\\x85\\x34\\xb1\\xae\\xc7\\x55\\xd3\\x65\\x21\\xcc\\x77\\\n\\xc7\\x77\\x45\\xab\\xed\\xb2\\x46\\x8b\\xa9\\xa3\\x9a\\xd1\\x65\\x81\\xf7\\x3d\\\n\\x9d\\x17\\x25\\x8c\\x1f\\x5f\\x93\\x82\\xda\\x1d\\xf6\\xa9\\xa1\\xdd\\x0b\\x44\\\n\\x1a\\x25\\xb7\\x66\\x92\\xe5\\xa6\\xd4\\x16\\x16\\x17\\x01\\x0d\\xd4\\x36\\xe3\\\n\\xdb\\x08\\x05\\x32\\xc0\\xd1\\x22\\xa0\\x34\\xb4\\x34\\xa1\\x43\\xe8\\x63\\x66\\\n\\x1b\\xd4\\xc5\\x28\\x5a\\xb6\\x31\\x31\\x91\\x0f\\x14\\x94\\x9d\\x5a\\xb7\\x1c\\\n\\x72\\xda\\x6b\\x7a\\x89\\xd0\\x2e\\xad\\x74\\xf1\\x29\\x9e\\x87\\x02\\xb0\\xf5\\\n\\xc9\\xc3\\x99\\x6e\\xb1\\x48\\xfd\\x56\\x76\\xda\\x1b\\xa4\\x8e\\xa3\\x29\\xad\\\n\\xad\\x00\\x54\\x92\\xd3\\xde\\x81\\xd4\\x31\\x1c\\x2d\\x02\\x74\\x51\\xfa\\xb4\\\n\\xd7\\x2f\\x5c\\x82\\xbf\\xda\\xd1\\x2e\\x91\\xd4\\xd9\\x0b\\xce\\x95\\x53\\xf7\\\n\\x89\\x34\\xed\\xad\\x66\\x61\\x28\\x4f\\xf6\\x6c\\x1e\\x84\\x91\\xfd\\xac\\xf2\\\n\\x0b\\x43\\xd4\\xfc\\x1e\\x50\\xfc\\xc2\\xb0\\x90\\x7a\\x0a\\x85\\x91\\xe3\\xe0\\\n\\x56\\x50\\x1a\\x5a\\x9a\\xf6\\x3d\\xb5\\x7d\\x28\\x90\\x92\\xc3\\xc2\\x84\\x5a\\\n\\x18\\xa2\\xf6\\x68\\x27\\x7e\\x44\\x30\\x7e\\x64\\xeb\\x84\\xb6\\x23\\x10\\xb6\\\n\\xac\\xb7\\x22\\x0a\\xb6\\x9a\\xad\\x93\\x63\\xa9\\x4b\\xa2\\x71\\xa2\\x54\\x10\\\n\\x34\\x66\\xd0\\x37\\x91\\x2a\\x9d\\x9f\\xc7\\x01\\x3a\\x94\\xdd\\x3a\\x41\\x41\\\n\\xec\\x9a\\xb0\\x5b\\x27\\x50\\xf2\\x4c\\x53\\x49\\x64\\x68\\x5d\\xb9\\xcd\\x45\\\n\\xf0\\xe9\\x8a\\x82\\x16\\xa7\\x44\\x5e\\xf0\\x08\\x07\\xad\\x08\\x1a\\xe8\\x69\\\n\\x26\\x85\\x82\\x38\\x91\\x7e\\xf3\\xe7\\x8a\\x40\\xfa\\xb1\\x9b\\x8b\\x68\\x05\\\n\\xeb\\xb3\\xb3\\x06\\x5f\\xcf\\x41\\x35\\xb4\\xfd\\xe6\\x62\\xdc\\xf6\\x3b\\x19\\\n\\x9d\\x83\\x58\\x11\\x66\\x2c\\xb8\\xd4\\xd2\\x05\\x8c\\xd3\\xaa\\x23\\xe1\\x70\\\n\\x16\\xde\\x03\\x09\\xfa\\x8d\\xb4\\x42\\xa2\\xd5\\x37\\xd6\\x4f\\x71\\x15\\x69\\\n\\x1c\\xb6\\xed\\x77\\xd0\\x03\\x6d\\xb1\\xfd\\x0e\\xc5\\xc8\\x71\\x5a\\x55\\x0c\\\n\\x54\\xec\\x65\\x76\\x45\\xc8\\xa7\\x96\\x3c\\xf1\\x48\\x54\\x06\\x75\\x5d\\xc1\\\n\\xe3\\x30\\xd2\\xbc\\x4a\\x06\\xaa\\x0a\\x90\\x81\\x9a\\x7d\\x3e\\x0c\\x6e\\x75\\\n\\x94\\x06\\x3d\\x94\\xe4\\x49\\x27\\xe8\\xdc\\x7e\\x07\\x54\\x54\\x23\\xa4\\xd1\\\n\\x54\\xa5\\x62\\xd6\\x10\\xe5\\x30\\xbd\\x7b\\x03\\xf9\\xc8\\x6a\\x99\\x33\\xe8\\\n\\xd7\\xb6\\xfe\\xbc\\x5a\\xc8\\x71\\x2b\\xf6\\x7d\\xad\\x90\\xd2\\xfe\\xea\\xc4\\\n\\xad\\x91\\xba\\x65\\x55\\x06\\x6c\\xf1\\x68\\x4b\\x6f\\x56\\xa1\\x96\\x44\\x9c\\\n\\x1c\\x6a\\x35\\x1c\\x32\\x13\\xf1\\x24\\xd7\\x88\\x4e\\xf3\\xfc\\xe0\\x8a\\xe4\\\n\\x4e\\x0e\\x88\\x13\\x73\\x2a\\x59\\x22\\x74\\xb9\\x1c\\x25\\x11\\x6c\\x4e\\x0e\\\n\\x2d\\x71\\x92\\x1b\\x07\\x32\\xa2\\xbb\\x01\\xc9\\x67\\x90\\x6a\\x03\\xe2\\x1a\\\n\\x6e\\x40\\x31\\x63\\x0b\\xba\\x37\\xd4\\xcc\\x05\\x95\\xdc\\x80\\x28\\x8c\\xac\\\n\\xb1\\x36\\x19\\xa6\\xec\\x3a\\xdc\\x80\\x50\\x09\\x07\\x34\\x59\\xbe\\x18\\x64\\\n\\x56\\x73\\x71\\xa4\\x1d\\xe5\\xd2\\xbe\\xb8\\x16\\x99\\xbb\\x4f\\xfd\\xa6\\x11\\\n\\x4d\\x9d\\x73\\xe2\\x1c\\x75\\x7c\\x91\\x3b\\xb5\\xf8\\x26\\x79\\xb6\\x38\\x92\\\n\\xc4\\x7d\\xd2\\x09\\x4f\\xf9\\x86\\x7c\\xd4\\xec\\x4f\\x86\\xb4\\x66\\xa9\\xb2\\\n\\x40\\xad\\x71\\x94\\x6b\\x86\\x2b\\x29\\xf5\\xc7\\xf8\\xbd\\x04\\xbf\\xcd\\x15\\\n\\xb2\\x42\\x62\\x67\\xa6\\xbb\\xe8\\xa7\\x73\\x41\\x0f\\xfd\\xb6\\x87\\x01\\x85\\\n\\x32\\x2e\\x91\\x77\\x0d\\x1b\\xe8\\x4a\\x1a\\xb6\\x46\\xa1\\x79\\xe3\\xb7\\xc6\\\n\\x95\\x34\\x32\\xcb\\x28\\xbf\\xba\\xae\\x84\\x72\\xce\\xd6\\xe1\\x35\\x84\\x9a\\\n\\x9e\\xf7\\x93\\x24\\xe3\\x42\\x06\\x8b\\xa3\\xc1\\xb8\\xc1\\xce\\xd6\\x62\\x87\\\n\\x2a\\x0f\\xff\\xae\\xda\\x0d\\xaa\\x61\\x40\\xc2\\x73\\x34\\x25\\xea\\xbc\\x8e\\\n\\x10\\xf1\\x91\\xc5\\x4a\\x9a\\x59\\x25\\x48\\x1f\\x2e\\xba\\x82\\xa6\\x86\\x2b\\\n\\x47\\xf2\\x46\\x56\\x71\\x0a\\x47\\x2f\\x01\\x3c\\xfd\\xd6\\x53\\xbe\\xf8\\x71\\\n\\x66\\xd5\\x04\\xc8\\xd8\\xa6\\xc9\\xf3\\x83\\xb3\\x98\\xd5\\x3c\\xa0\\x56\\xcd\\\n\\xd4\\x94\\xa0\\x97\\x11\\xea\\x70\\x68\\x8b\\x5c\\xd8\\xc1\\xc0\\x6b\\x5e\\xd8\\\n\\xe9\\xea\\x19\\x3a\\x06\\xbc\\x6b\\xc0\\xab\\x78\\x87\\x10\\x15\\xe4\\x00\\x75\\\n\\x7b\\x1d\\xdd\\xc5\\xa3\\x39\\xba\\x04\\xed\\x3b\\x99\\x61\\xe9\\x36\\x18\\xb3\\\n\\x6b\\x80\\xf4\\x2f\\xd3\\x16\\xc6\\xb4\\xb6\\x62\\x66\\xf3\\x20\\x1d\\xce\\x14\\\n\\x25\\x24\\xd5\\xf9\\x56\\x2e\\x9a\\x7a\\xe4\\x4a\\x1b\\x19\\x90\\x2e\\xc0\\xc0\\\n\\xc0\\xbf\\xa2\\x42\\x52\\xf9\\xd5\\x11\\x6d\\x9d\\x07\\x9b\\xe8\\x26\\xad\\x2c\\\n\\x8c\\x06\\x5f\\x69\\x93\\xd7\\xae\\x55\\x79\\x48\\xef\\x48\\x38\\xf8\\x55\\x05\\\n\\x18\\xd0\\x7c\\x1c\\x6c\\x17\\xba\\x88\\x9a\\xaf\\x87\\xc1\\x38\\xe6\\x4b\\x0b\\\n\\x7f\\x94\\x35\\x5d\\xf9\\x66\\x25\\x4f\\x6c\\x47\\xd8\\xf8\\xbb\\x21\\xe3\\x44\\\n\\x47\\x03\\x9e\\xf8\\x93\\xfe\\xad\\xf6\\x97\\x22\\xd2\\xb9\\x75\\xef\\x08\\xf3\\\n\\x7c\\x58\\x1e\\xd9\\x84\\xd9\\xcd\\x87\\x7c\\xda\\x5b\\x51\\x46\\x2a\\xe4\\x07\\\n\\x8f\\x41\\xc9\\x05\\x49\\x56\\xac\\xb4\\xef\\x45\\x53\\x66\\x18\\xa7\\x8c\\x43\\\n\\xb4\\x4e\\xc8\\x38\\xcd\\x6c\\x56\\xaa\\xde\\xf6\\xf4\\x1b\\x35\\xf4\\x5a\\xe6\\\n\\x59\\xe3\\x45\\x88\\xae\\xbd\\xa1\\x8b\\xa9\\xb4\\xf7\\xa6\\x22\\xbc\\x48\\x54\\\n\\xf8\\x12\\xe5\\xd5\\x22\\x53\\xf3\\x17\\x68\\x2e\\x68\\x7f\\xc8\\xd8\\x3e\\x50\\\n\\x68\\x1f\\x0c\\x1c\\x40\\xe9\\x2b\\xf1\\x77\\x21\\x8c\\x34\\x97\\x08\\x06\\xbb\\\n\\x10\\x7f\\x17\\x85\\x86\\xa3\\xc7\\x5d\\x02\\xab\\xa3\\x75\\x2c\\x91\\x47\\xa1\\\n\\x27\\xbe\\x15\\xb7\\x1b\\x4b\\x60\\x57\\xd5\\x8b\\x29\\xac\\x55\\x46\\x0c\\x41\\\n\\xee\\xfd\\xa4\\x13\\x7e\\xaf\\x64\\x1d\\x49\\xd7\\x50\\x6f\\xca\\x43\\x98\\x97\\\n\\x00\\xff\\xb6\\xbe\\x0a\\x81\\xb8\\x43\\x0d\\xd9\\x77\\xab\\x07\\x3c\\x48\\x6a\\\n\\xb3\\x8c\\x46\\x13\\x0c\\x41\\xfb\\x65\\x2b\\xe9\\xb9\\xbe\\x44\\x19\\xa6\\x0a\\\n\\x43\\xa7\\x95\\x54\\xf8\\xf1\\x5e\\xef\\x0d\\x21\\xc8\\xbf\\xab\\x6d\\x0e\\xaa\\\n\\xc2\\x7b\\x7b\\xc1\\x0d\\x36\\x45\\xeb\\xa6\\x7c\\xe1\\x47\\x8d\\x78\\xda\\x55\\\n\\xde\\xaa\\xca\\x07\\xcb\\xad\\x69\\xd4\\x49\\x68\\x19\\x3f\\x6b\\xf9\\xbd\\x10\\\n\\x1b\\xe4\\x3a\\xc1\\x0b\\x6e\\x86\\x92\\xf4\\x58\\x8c\\x55\\xf9\\x78\\x12\\x7b\\\n\\x50\\xa8\\x37\\xa1\\x4b\\xd0\\xf6\\x86\\x30\\xa8\\xd7\\xfc\\xd2\\x82\\x09\\xc8\\\n\\xd6\\x26\\x0d\\x94\\x16\\xa5\\x49\\x5d\\x95\\xf6\\xbd\\x2a\\x12\\xff\\xa1\\xb8\\\n\\x49\\xee\\x94\\xb4\\x0c\\xf4\\x16\\x08\\xbf\\x5d\\xb2\\x90\\xba\\x0b\\x50\\x11\\\n\\x99\\xd8\\x82\\x8c\\x6f\\xa5\\x3e\\x3a\\x2c\\x34\\xb1\\x0c\\xc6\\x9e\\x8f\\x4c\\\n\\xcd\\x50\\x07\\x54\\xf3\\xbd\\x45\\x84\\x6d\\xc8\\x03\\x66\\xf2\\x60\\xca\\xf0\\\n\\xb3\\xa2\\xb7\\x51\\x98\\x1d\\x9e\\x62\\x42\\x17\\xa9\\x13\\xb9\\x01\\x79\\xe2\\\n\\x96\\x50\\x57\\x39\\xd1\\xd8\\x12\\xe6\\x01\\x79\\xa1\\xb1\\x04\\x79\\x2b\\xb7\\\n\\xb9\\xf9\\xec\\x02\\xfa\\x7d\\x18\\xa0\\xe1\\x4f\\xfc\\xd1\\xac\\x48\\x95\\x09\\\n\\xe3\\xee\\x69\\xf9\\x00\\x3c\\x51\\x40\\xad\\xc7\\x30\\x9e\\x7b\\x04\\xb3\\x95\\\n\\x30\\x77\\x92\\x89\\xe8\\x3a\\x00\\xb3\\x13\\x43\\xae\\x71\\x0c\\x79\\x6d\\x7f\\\n\\x8d\\xa0\\xdd\\x80\\xbe\\x5a\\x7b\\x48\\x19\\x35\\x7a\\x3d\\xb3\\x12\\x03\\xb2\\\n\\xcc\\xc1\\xdc\\x3d\\xa4\\x9c\\x14\\x30\\xdc\\x6c\\xcd\\x88\\x20\\xb9\\x0e\\x49\\\n\\x88\\x70\\x1d\\xa2\\xcb\\xc1\\xe0\\xdd\\xfc\\xdd\\xd8\\x89\\x0e\\xb9\\xb6\\x31\\\n\\x56\\xf1\\x98\\xf1\\xdc\\x9d\\xe4\\x10\\x4c\\x9e\\x20\\x46\\xde\\x83\\x14\\x7b\\\n\\x92\\xbc\\x76\\xe7\\xa0\\x00\\xc6\\x9c\\xa7\\x1b\\x53\\xce\\xb8\\x2e\\x62\\x76\\\n\\x45\\xd0\\x14\\x35\\x1a\\xdf\\xfd\\x77\\x15\\x35\\x23\\x7c\\x69\\x27\\x72\\x2c\\\n\\x3b\\x52\\xcd\\x62\\x8c\\x1e\\x64\\x86\\xf1\\xb5\\x4d\\x46\\xfc\\x7b\\x07\\xf9\\\n\\x02\\x70\\x10\\x87\\x5a\\x40\\x67\\x22\\xe6\\x82\\x4e\\x76\\x65\\xca\\x91\\xac\\\n\\x09\\x3a\\x94\\x42\\x38\\x73\\x2d\\x73\\xd0\\x76\\x7a\\xe8\\x50\\x03\\x60\\xd0\\\n\\x25\\xaa\\x71\\x43\\x03\\x8b\\x27\\xe8\\x55\\x3b\\x6d\\x7d\\x42\\x8b\\x4a\\x79\\\n\\xed\\x21\\xea\\x9d\\x88\\x6f\\x13\\xef\\x1a\\x5a\\xfb\\x82\\x16\\x76\\xb1\\xfe\\\n\\xb8\\x74\\xad\\xfa\\xc6\\x90\\x62\\xb7\\xdb\\x57\\xd5\\xb7\\xb0\\x74\\x88\\x40\\\n\\xee\\xd6\\x5a\\x5e\\x8b\\xa8\\x44\\x68\\x19\\xb7\\x3e\\x77\\xf6\\x9d\\x9a\\x0c\\\n\\x9a\\xc6\\x66\\x7c\\xf1\\x43\\x0c\\xf4\\x55\\x9c\\xad\\xcb\\xe7\\x61\\x7f\\xd0\\\n\\x12\\xa7\\xb5\\xe7\\x1a\\xf8\\x55\\x85\\xcd\\xf6\\x82\\xc1\\x37\\x3a\\x96\\xad\\\n\\xf3\\x0d\\x61\\x87\\x1a\\xd0\\x95\\x17\\xef\\x92\\xae\\xa3\\xe1\\xff\\x04\\xba\\\n\\x94\\x1e\\x4b\\xa6\\x6f\\xcc\\x76\\x70\\x70\\x70\\x70\\x70\\x70\\x70\\x70\\x70\\\n\\x70\\x70\\x70\\x70\\x70\\x70\\xa8\\x0b\\xa9\\xd4\\xff\\x01\\x3b\\x02\\x66\\x9a\\\n\\xab\\x4f\\xa1\\xe7\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\\n\\x00\\x00\\x0e\\x7b\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x50\\x00\\x00\\x00\\x50\\x08\\x06\\x00\\x00\\x00\\x8e\\x11\\xf2\\xad\\\n\\x00\\x00\\x0e\\x42\\x49\\x44\\x41\\x54\\x78\\xda\\xed\\x9b\\x59\\x50\\x5b\\xd7\\\n\\x19\\xc7\\xcf\\x5d\\xb4\\x20\\x76\\xcc\\x66\\x04\\x12\\x86\\x04\\x63\\x8c\\x30\\\n\\xe0\\x0d\\x3b\\x7e\\x48\\x26\\xa9\\xcd\\xbe\\xd5\\xf1\\x5b\\x9a\\xce\\x74\\x32\\\n\\x7d\\xc8\\x4b\\x33\\x4d\\x1c\\x30\\x4b\\x6e\\x6c\\xb0\\xbb\\x24\\xe3\\x2c\\xed\\\n\\x34\\x99\\x66\\xea\\x49\\xd3\\x34\\x1d\\x3b\\x0e\\xab\\x59\\x26\\x6d\\x93\\x4e\\\n\\x27\\xb1\\x1d\\x2f\\x6c\\xde\\x11\\x8b\\xe3\\x18\\xb1\\xc8\\x08\\x21\\x04\\x92\\\n\\xee\\xd6\\x73\\xc9\\xe0\\x80\\x74\\xaf\\x74\\xaf\\x24\\x40\\x6e\\xfb\\x9f\\xf1\\\n\\x83\\x75\\x96\\x7b\\xcf\\x8f\\xef\\x9c\\xf3\\x9d\\xa3\\xbf\\x10\\xf0\\x7f\\xf9\\\n\\x24\\x64\\xbd\\x5f\\xe0\\x51\\xd7\\xff\\x04\\xc0\\xd2\\xc3\\x2d\\xa1\\x2c\\x26\\\n\\x7b\\x1a\\x57\\x60\\x07\\x51\\x80\\x64\\xb3\\x0c\\x1b\\xc5\\x30\\x4c\\x38\\x1c\\\n\\x3d\\x85\\x22\\x98\\x09\\x41\\x81\\x81\\x26\\xe9\\x73\\x80\\x65\\xda\\x9b\\x8f\\\n\\x17\\xf6\\x41\\x2c\\xac\\xd8\\xbe\\xff\\xab\\x01\\x96\\x1f\\x39\\x97\\x8d\\x60\\\n\\x18\\xc1\\xd2\\x6c\\x61\\x48\\x68\\xb0\\x2d\\x3a\\x26\\x3a\\x34\\x24\\x34\\x04\\\n\\xc8\\x70\\x1c\\xc8\\xe5\\x72\\xc0\\xd0\\x0c\\x70\\x90\\x0e\\x60\\xb7\\x3b\\x80\\\n\\xc9\\x34\\xe3\\x30\\x1a\\xa7\\x28\\x86\\x61\\xad\\xf0\\xf3\\x37\\x19\\x39\\xfd\\\n\\x6e\\x1b\\x51\\x32\\xef\\x37\\x80\\x04\\x00\\xac\\x9b\\xb2\\x80\\xfa\\x43\\x3c\\\n\\xfb\\xd2\\xe9\\x20\\x5a\\x15\\xfa\\x06\\x03\\xc0\\xcf\\xd4\\x89\\x09\\x48\\xa2\\\n\\x3a\\x41\\x8e\\xcb\\x64\\xa2\\xda\\x9a\\x67\\x67\\xc1\\xb0\\x7e\\x64\\x6e\\x61\\\n\\x61\\x61\\x8e\\x66\\xe8\\x9f\\xb4\\x1e\\x2f\\xfa\\xdc\\x5d\\x7d\\xb7\\x03\\x77\\\n\\x07\\xcd\\x4d\\x9b\\x75\\x85\\x59\\x5e\\xd5\\x99\\x0c\\x64\\xc8\\x3f\\x23\\xc2\\\n\\xc3\\x36\\xa6\\xa5\\x3d\\xae\\x94\\x89\\x04\\xe7\\x2c\\xd3\\xb4\\x09\\xdc\\xbc\\\n\\x75\\xdb\\xce\\xb0\\xf4\\x3b\\x2d\\x0d\\x85\\xaf\\x0a\\x4d\\x6b\\xc1\\xc1\\x12\\\n\\x5e\\xc0\\x5b\\xd6\\x76\\x5d\\x20\\x96\\x54\\xb7\\xa5\\x63\\x38\\xfe\\x95\\x5a\\\n\\x9d\\x10\\xaa\\xd5\\x68\\x65\\x88\\x8f\\x6f\\x61\\xb3\\xd9\\xc0\\xc0\\xc0\\xf5\\\n\\x79\\xca\\x41\\x9e\\xfd\\xac\\xe1\\xc0\\xf3\\x7c\\x10\\x79\\x1f\\x41\\x08\\xc0\\\n\\xe3\\x03\\x23\\xa5\\xee\\x6a\\xaa\\xb4\\xb6\\x73\\x33\\x86\\xa0\\x17\\x52\\x52\\\n\\x93\\xc3\\xe3\\xe3\\xe2\\xfc\\xf6\\x6c\\x8a\\xa6\\x41\\x6f\\x4f\\xaf\\xcd\\x66\\\n\\xb7\\xbf\\x0d\\x23\\xb1\\xca\\xb9\\x5c\\x14\\x10\\x31\\x30\\xbc\\x6d\\xe7\\x0f\\\n\\x2d\\xc1\\xdb\\x94\\x92\\x1c\\xbe\\x31\\xde\\x7f\\xf0\\x96\\xc4\\x45\\x62\\x4f\\\n\\x4f\\x9f\\x8d\\x66\\xc8\\x92\\x96\\x86\\xe2\\xbf\\x2f\\x2f\\x5b\\xf1\\x30\\x5f\\\n\\x21\\xf8\\xda\\xde\\x1b\\x55\\x54\\x9f\\x4b\\x03\\x38\\x76\\x3e\\x25\\x35\\x25\\\n\\x32\\x3e\\x2e\\xd6\\xed\\xb3\\xac\\x56\\x2b\\x98\\x18\\x9f\\x5c\\x78\\x60\\x32\\\n\\xd9\\x49\\x07\\xa9\\x40\\x11\\xc0\\x28\\x83\\x82\\x1c\\xd1\\x31\\x1b\\xc2\\xe2\\\n\\xe2\\x62\\x31\\x19\\x2e\\xbc\\x5e\\x4e\\x9b\\x4c\\xe0\\xd6\\xcd\\x5b\\xe3\\x26\\\n\\x4c\\xb9\\xe9\\x4b\\xe2\\x29\\x9b\\x28\\x80\\xde\\x0c\\xde\\x1f\\x7d\\x88\\x55\\\n\\x71\\x6d\\xdb\\xe3\\x32\\x04\\xbf\\x90\\x0a\\xe1\\xc5\\xb9\\x99\\xb6\\x14\\x45\\\n\\x81\\x3b\\x77\\xee\\xcc\\xcd\\xcc\\xcc\\x5a\\x60\\xee\\xf2\\x06\\x83\\x82\\xcf\\\n\\x51\\xca\\x3e\\x86\\x20\\x2a\\x39\\x85\\xd0\\x8f\\x23\\x08\\x7a\\x08\\x45\\x91\\\n\\xe7\\xb5\\x1a\\x8d\\x3c\\x21\\x21\\x41\\x2e\\xb4\\x76\\xf6\\xf6\\xf6\\xcf\\xcd\\\n\\x59\\x2d\\xf5\\x2d\\x0d\\x45\\x27\\x03\\x02\\x20\\xe1\\x61\\xa3\\x72\\xd7\\x76\\\n\\x09\\x5e\\x4a\\x6a\\x6a\\x04\\x8c\\x3c\\x54\\xa8\\x1e\\x37\\xfd\\xfa\\xfb\\x07\\\n\\xac\\x70\\x2d\\xfb\\x00\\x47\\x67\\x0f\\x9f\\x21\\x0e\\x39\\x78\\xfb\\xab\\x69\\\n\\x53\\xcb\\x31\\x59\\x47\\x64\\x64\\x54\\xea\\xe6\\xcd\\x69\\xc1\\x7c\\x10\\x67\\\n\\x61\\x8a\\x73\\xed\\xda\\xcd\\x89\\xa6\\x63\\x07\\xe2\\x5d\\x00\\xfa\\x03\\x9e\\\n\\xb7\\x90\\x45\\xd4\\x5f\\xf1\\x2e\\x62\\xe1\\xd9\\x6d\\x76\\xd0\\xdb\\xd7\\x67\\\n\\x25\\x29\\xba\\xae\\xa5\\xa1\\xe0\\xa4\\xa7\\xe7\\x70\\xf9\\x23\\x15\\x12\\x76\\\n\\x3e\\x29\\x51\\x9d\\x91\\xa4\\x49\\xe2\\x9d\\xcf\\x17\\x2f\\x5e\\x9a\\x73\\x38\\\n\\xa8\\x27\\x5a\\x8f\\x17\\xf4\\xaf\\x0b\\x40\\xc2\\xc3\\xae\\xed\\xa9\\xbc\\xb4\\\n\\xaa\\xeb\\x31\\x5c\\x8e\\x5c\\x4c\\x49\\xd9\\x04\\xa7\\xad\\xf0\\x9a\\xc7\\xc1\\\n\\xeb\\xe9\\xeb\\x9b\\xa3\\x49\\xaa\\xae\\xb9\\xb1\\xf0\\x2d\\xb1\\xef\\x57\\x79\\\n\\xa4\\x6b\\x23\\x83\\xb2\\x83\\x3b\\x76\\x6e\\x0f\\x56\\xc0\\xd3\\x8a\\xb3\\xf4\\\n\\x43\\xc3\\xe4\\xb8\\x61\\xb2\\xa1\\xa5\\x31\\xff\\x68\\x40\\x00\\x24\\x44\\xa6\\\n\\x52\\x5c\\x3d\\x0e\\x1e\\x26\\x03\\x70\\xcd\\x4b\\x85\\xf0\\x62\\x84\\xa7\\xad\\\n\\xdd\\x0e\\xfa\\x7a\\xfb\\xad\\x0e\\xca\\x51\\xd3\\xda\\x50\\xf4\\xb6\\xd4\\x77\\\n\\x2c\\xaf\\xeb\\x3a\\x99\\x98\\xb0\\xf1\\x45\\x6d\\xb2\\xd6\\x25\\x0a\\xb9\\x04\\\n\\x1b\\xae\\xa7\\xdf\\x7c\\xfa\\xfa\\x81\\xdd\\x3e\\x01\\x24\\x44\\x4e\\x43\\xc2\\\n\\xcd\\x33\\xa4\\x00\\xe4\\xd4\\x57\\xd7\\x69\\x4c\\x4d\\x7d\\x2c\\x4a\\x0c\\x3c\\\n\\x8a\\x24\\x6b\\xa5\\x44\\xde\\x72\\x15\\x57\\xb7\\xed\\x09\\x0e\\x0e\\xee\\xdc\\\n\\xb1\\x3d\\x37\\xdc\\xb9\\xcc\\x6a\\x9d\\x07\\xfd\\x7d\\xfd\\xf7\\x3e\\x3b\\x96\\\n\\xaf\\x59\\x77\\x80\\x52\\x9f\\xb1\\xf0\\xd1\\x10\\x1b\\x1d\\xbd\\x41\\xb0\\xcd\\\n\\xc2\\x82\\x0d\\xf4\\xf5\\x43\\x78\\x0e\\xe6\\x17\\x2d\\xc7\\xf3\\x3f\\xf0\\x06\\\n\\x1e\\xa7\\x72\\xa2\\x29\\x02\\x90\\x41\\xe3\\x4f\\xec\\xcb\\x53\\x38\\x97\\x71\\\n\\x3b\\x3a\\x5c\\x07\\xe7\\x9b\\x1b\\x0a\\x82\\xd7\\x1d\\xa0\\x54\\x05\\x77\\xce\\\n\\x08\\x96\\x71\\x6b\\xde\\xf7\\xf0\\xa8\\x23\\x4d\\x8d\\x05\\xef\\xf8\\xf2\\x9c\\\n\\x27\\x89\\x2f\\x94\\xe1\\xe4\\x82\\x65\\xdf\\xbe\\xbd\\xb8\\x73\\x19\\xc3\\x30\\\n\\xe0\\xeb\\xaf\\x2f\\x50\\x2d\\x8d\\x85\\x32\\x9f\\x00\\xba\\x01\\x26\\xd8\\xcf\\\n\\x6a\\x01\\x5c\\xda\\x6d\\x61\\x74\\x54\\x37\\x37\\x14\\xbe\\xeb\\xcb\\x33\\x38\\\n\\x95\\xd7\\x76\\xa4\\x62\\x98\\xac\\x37\\x2f\\x6f\\x67\\x08\\xdf\\xb3\\xae\\xf4\\\n\\x5c\\x35\\x36\\x1d\\x2d\\x88\\x59\\x01\\xd0\\x5f\\x10\\xa5\\x00\\xf4\\xd4\\x7f\\\n\\x45\\x7d\\xf7\\x7b\\x61\\x21\\xa1\\xcf\\x6d\\xcd\\xcc\\x50\\x09\\x25\\xb7\\xdf\\\n\\xc3\\xe3\\xd6\\x3c\\xba\\xaa\\xb9\\x31\\xff\\x77\\xbe\\xc2\\xe3\\x54\\x5a\\xdd\\\n\\xf1\\x42\\x74\\x74\\xd4\\xc9\\x2d\\x19\\xe9\\xc1\\xce\\x65\\x5c\\x2e\\x78\\xfd\\\n\\xfa\\xad\\x9b\\x9f\\x1d\\xdd\\x9f\\xe1\\x77\\x80\\x84\\x87\\x4d\\x42\\x4a\\xff\\\n\\x25\\x75\\x5d\\x5b\\x71\\x16\\x5c\\xde\\xb1\\x33\\x57\\x29\\xe7\\x49\\x27\\x16\\\n\\xe1\\xd9\\x1d\\xf0\\x74\\xd0\\x67\\xa5\\x29\\xfa\\xd5\\xa6\\x86\\xfc\\xdf\\xfb\\\n\\x03\\x1e\\x41\\x10\\x68\\x1f\\xbd\\x7b\\x30\\x3d\\x3d\\x3d\\x25\\x2a\\x2a\\xd2\\\n\\xa5\\x7c\\xcc\\x60\\x60\\xbf\\x1d\\xb9\\xf7\\xf1\\xd9\\x63\\xfb\\x9f\\xf3\\x08\\\n\\x50\\x2a\\x44\\x7f\\x02\\x84\\xa9\\x44\\x53\\xa2\\x3a\\xa1\\x48\\xab\\xd5\\xf0\\\n\\x26\\xb4\\x1c\\xbc\\xbe\\xbe\\x5e\\x2b\\xe9\\x60\\xfc\\x16\\x79\\x9c\\xca\\x8e\\\n\\x74\\xbc\\x1a\\x1c\\xac\\xaa\\xcd\\xce\\xc9\\x0e\\xe1\\x8b\\x7a\\xb8\\xce\\x9a\\\n\\xcd\\xb3\\x96\\xe7\\xdb\\x1a\\x8b\\x5a\\x5c\\x00\\xfa\\x02\\x91\\x10\\x71\\xad\\\n\\x25\\xb6\\xef\\x02\\xa2\\x23\\x6c\\x37\\x51\\x68\\x76\\xfe\\x7c\\x69\\x0d\\xa4\\\n\\x68\\x0a\\x5c\\xbd\\xc2\\xc1\\xa3\\xfc\\x0a\\xaf\\xa2\\xe6\\x5c\\x19\\x82\\xca\\\n\\x3e\\xc9\\xc9\\xcd\\x0a\\x52\\x2a\\x95\\x2e\\xe5\\xdc\\xd5\\xd6\\xc5\\xf3\\x17\\\n\\xed\\x32\\x59\\x50\\xf4\\x19\\xe2\\xa9\\x39\\x5e\\x80\\x62\\x61\\x78\\xaa\\x2b\\\n\\xd4\\x86\\x10\\x11\\x85\\xa5\\x35\\xed\\xcf\\xe6\\x36\\x16\\x9f\\xe6\\x83\\xc7\\\n\\xe9\\xc6\\x8d\\x9b\\x56\\xf3\\x8c\\xf9\\x8f\\x30\\x17\\x7b\\xc9\\xbf\\xf0\\xf0\\\n\\x4f\\x32\\x75\\x19\\x41\\xa1\\xa1\\xa1\\xbc\\x75\\xee\\x8e\\xde\\x75\\xdc\\x1f\\\n\\x1b\\x6b\\x69\\x3a\\x56\\x70\\x68\\xe9\\xb3\\x55\\xb9\\x91\\x96\\x02\\xd0\\xb9\\\n\\x9e\\x50\\xf9\\x12\\x40\\xee\\x4a\\xaa\\xaf\\x6f\\x60\\xda\\x84\\x29\\xd4\\xcb\\\n\\xaf\\x95\\x7c\\x11\\xdc\\x75\\xcb\\x51\\x04\\xfb\\xab\\x3b\\x78\\x0e\\x87\\x03\\\n\\x5c\\xbe\\x74\\x65\\x01\\x46\\x7f\\x6e\\xdb\\x89\\x92\\x5b\\x1e\\x01\\x7a\\x03\\\n\\x91\\x83\\x40\\x88\\x88\\x30\\xa9\\xfd\\x2e\\x8f\\xbe\\xd1\\x91\\xc5\\x28\\x78\\\n\\x13\\x26\\xb2\\x47\\xfc\\x01\\xaf\\xac\\xa6\\xb3\\x02\\x43\\xd1\\x8f\\x75\\x10\\\n\\x5e\\x88\\x00\\x3c\\xee\\x75\\x07\\x06\\xae\\x5b\\x67\\x2d\\x73\\xef\\x37\\x1f\\\n\\xcb\\xff\\xe5\\xf2\\x12\\xbf\\x7f\\x2b\\x27\\x06\\xa0\\x58\\x90\\x7c\\x79\\xdf\\\n\\xd5\\xab\\xbd\\x33\\x0b\\x0b\\x96\\x8a\\xe6\\x86\\x92\\x2f\\xb9\\x13\\x03\\x42\\\n\\x2b\\x7f\\x0b\\x58\\xa4\\x82\\x05\\xac\\x12\\x45\\xb1\\x3b\\x0e\\xd2\\xfe\\x62\\\n\\xfb\\x89\\x92\\xf3\\x62\\xc6\\x54\\x51\\xdb\\x5e\\x89\\x20\\xd8\\x5f\\x74\\xba\\\n\\x4c\\x37\\xf0\\x96\\xa6\\xae\\x41\\x8f\\x63\\xb3\\x39\\xce\\xd7\\x61\\x01\\xf5\\\n\\x75\\xe4\\x92\\xca\\x6a\\x3a\\xc8\\xbd\\x7b\\xf3\\x70\\x14\\x75\\x3d\\xf2\\xc2\\\n\\x63\\x94\\xc5\\x46\\xd9\\xb6\\xcb\\x19\\xd9\\x1c\\x83\\x81\\x0b\\x30\\xd5\\x88\\\n\\x49\\xd6\\x26\\x05\\xc9\\x64\\x72\\x30\\x33\\x63\\x86\\x07\\xfd\\x41\\x1b\\x43\\\n\\x51\\xfb\\x5b\\x4e\\x14\\xff\\x5b\\x0c\\xbc\\x4c\\x9d\\x0e\\x4e\\xdb\\x10\\xc1\\\n\\x7a\\x13\\x13\\x53\\x8c\\x7e\\x48\\x6f\\xa4\\x18\\x2a\\xb7\\xbd\\xb1\\xe4\\xbe\\\n\\x73\\x79\\x60\\x02\\xac\\xed\\xb0\\xe6\\xed\\xde\\xa5\\xc2\\x71\\x97\\x93\\x14\\\n\\xb8\\x74\\xf9\\x8a\\x99\\xb6\\x93\\x07\\x19\\x04\\xf9\\x53\\xa2\\x3a\\x7e\\xa3\\\n\\x46\\xab\\x5d\\x51\\x69\\x72\\x6a\\x0a\\x0c\\xeb\\x87\\x7a\\xce\\x1e\\xcd\\xcf\\\n\\x15\\xea\\xbf\\xbc\\xe6\\xdc\\x73\\x28\\x8a\\xbf\\xaf\\xcb\\x82\\x91\\x17\\x12\\\n\\x2c\\x54\\x0d\\xdc\\x37\\x18\\xe8\\xbb\\x23\\x77\\xa7\\x18\\x06\\xd9\\xd5\\xd2\\\n\\x78\\xe0\\x1e\\x5f\\x9d\\x80\\x04\\x58\\x59\\xd7\\xfd\\xdd\\xb6\\x6c\\x9d\\x5a\\\n\\xa5\\x52\\xb9\\x94\\xc1\\xb5\\xc8\\x62\\xb1\\xcc\\x39\\x20\\xbc\\x70\\x67\\x78\\\n\\x9c\\x60\\x52\\x0d\\xce\\x5f\\xb8\\xf8\\xf0\\xac\\xea\\x2c\\xf8\\xc7\\xe1\\xec\\\n\\x1d\\x7f\\xce\\xda\\xa6\\x83\\xf0\\xdc\\x45\\xde\\x24\\x33\\x34\\x34\\x34\\xcd\\\n\\xb2\\x6c\\x1e\\x3c\\x1e\\x0e\\x09\\xd5\\x0b\\x48\\x80\\x07\\xeb\\xbb\\x2f\\xa7\\\n\\x6d\\x4e\\xdb\\x1e\\xe9\\x74\\x12\\xe0\\x76\\xc2\\xde\\xde\\x7e\\x10\\x17\\x17\\\n\\xc3\\x6a\\xb5\\x5a\\xde\\x77\\xe7\\x6e\\x64\\xae\\x5e\\xb9\\x6a\\x69\\x6e\\x2c\\\n\\x0c\\x73\\x2e\\xab\\xa8\\xe9\\x7c\\x16\\x8e\\xf8\\xc3\\xac\\x2c\\x08\\x2f\\xd4\\\n\\x13\\xbc\\x61\\x13\\x4d\\x82\\xbc\\xd6\\x5f\\xe5\\xeb\\xdd\\xbd\\x6b\\x40\\x02\\\n\\x2c\\xaf\\xed\\x24\\xe2\\xe3\\xe3\\xaa\\x53\\x53\\x53\\x1e\\x9e\\xe1\\x38\\x78\\\n\\xfd\\xfd\\xd7\\x40\\x6c\\x6c\\x34\\xd0\\x68\\x34\\x82\\x6d\\x6f\\xdd\\xbc\\x6d\\\n\\x37\\x99\\x4c\\x1f\\xc1\\x1c\\xf1\\x05\\x17\\x78\\x28\\xfa\\x61\\x96\\x6e\\xab\\\n\\x5b\\x78\\xe3\\x13\\x93\\x34\\x8c\\x3c\\x13\\x43\\x22\\x7b\\x3c\\xc1\\x0b\\x58\\\n\\x80\\xa5\\x55\\x1d\\x39\\xf2\\x20\\xf9\\xbf\\x76\\xef\\xda\\x11\\x2a\\x05\\xde\\\n\\xf0\\xf0\\x28\\x39\\x31\\x31\\x71\\x97\\xb2\\xd9\\x72\\x5b\\x7f\\x53\\x66\\x59\\\n\\xfa\\xbc\\xbc\\xee\\xdc\\x21\\x04\\x60\\xa7\\xb2\\xb2\\x32\\x55\\x6e\\xa7\\xed\\\n\\x38\\x8c\\xbc\\x61\\x71\\x91\\x17\\xd0\\x00\\x01\\x97\\x97\\xd4\\x75\\x4d\\xc0\\\n\\xf4\\x22\\x86\\xf3\\xb6\\x0c\\x40\\x78\\x09\\xea\\x04\\xa0\\x86\\xff\\x78\\x6b\\\n\\xc3\\x64\\x68\\x50\\xaf\\xb7\\x1b\\xa7\\x8c\\x7a\\xdc\\x81\\x3d\\x71\\xe6\\xd7\\\n\\x3f\\x5a\\x3c\\x06\\x72\\x17\\x03\\x3d\\x54\\xde\\x2b\\x18\\x8a\\xd4\\xeb\\x74\\\n\\x5b\\x45\\xc1\\x23\\x59\\x72\\x4f\\x7b\\x43\\xc9\\xa0\\xd8\\x37\\x0d\\x50\\x80\\\n\\x8b\\xa9\\xcc\\xcb\\x21\\xc1\\xaa\\xd7\\x49\\x92\\x52\\x79\\x82\\xa7\\x1f\\xd4\\\n\\x33\\x53\\x46\\xe3\\xb7\\x28\\x85\\x14\\xd8\\x58\\x72\\x42\\x8e\\x83\\x78\\x86\\\n\\xc5\\x9e\\xc2\\x70\\xf4\\x15\\x55\\x50\\x50\\x74\\xfa\\x96\\xf4\\x10\\x85\\xc0\\\n\\x8d\\x0e\\xa7\\x71\\x08\\x6f\\x78\\x78\\x78\\x06\\xc2\\xcb\\x93\\x02\\x2f\\xb0\\\n\\x01\\x56\\x37\\x67\\xa0\\x98\\x62\\x40\\x9b\\xac\\x41\\xd5\\x6a\\xb5\\x20\\xbc\\\n\\x21\\xfd\\x10\\x30\\x99\\xcd\\x40\\x8e\\xe3\\xe6\\x05\\x9b\\x1d\\x63\\x19\\x1a\\\n\\xc7\\xe5\\x32\\x7b\\x44\\x44\\xb8\\x22\\x36\\x36\\x4e\\x19\\x1e\\x16\\xea\\xf6\\\n\\x39\\x86\\xf1\\x09\\x76\\x64\\x78\\xc4\\x04\\x28\\x7a\\x4f\\xd3\\x89\\xa2\\x3b\\\n\\x52\\xdf\\x33\\x20\\x01\\x96\\xd4\\xb6\\x6e\\xc2\\x11\\xf9\\x05\\x8d\\x36\\x29\\\n\\x3a\\x51\\xad\\xe6\\xfd\\x02\\x69\\x09\\x9e\\x05\\x9e\\x8d\\xb3\\x32\\xb7\\x02\\\n\\x0c\\xc7\\x24\\x3f\\x67\\xdc\\x30\\xce\\x0c\\x8d\\x8c\\x9a\\x10\\x8a\\xde\\xeb\\\n\\x0d\\x3c\\x4e\\xab\\x06\\xd0\\x5b\\x5b\\xed\\x32\\x78\\x1b\\x20\\x3c\\x5e\\x2a\\\n\\xfe\\x81\\x37\\xb1\\x38\\x6d\\x69\\x00\\xf6\\xb6\\x36\\x14\\xdc\\xf6\\x76\\x9c\\\n\\x7e\\x07\\xe8\\x8b\\xad\\x16\\xb0\\x8e\\x36\\x14\\x57\\x7e\\xb1\\xba\\xf0\\x58\\\n\\x30\\x3a\\x7a\\x97\\x1c\\x1b\\x1b\\x37\\xd3\\x2c\\xbb\\xcf\\x17\\x78\\x7e\\x05\\\n\\xe8\\xab\\xad\\x16\\x6e\\x04\\xf3\\x76\\x9b\\x5d\\xa9\\x49\\xd6\\x00\\x77\\xd3\\\n\\x56\\x0f\\xe1\\xcd\\x79\\x09\\x8f\\x4b\\x87\\xe0\\x59\\xd9\\x62\\x9e\\x35\\x8f\\\n\\x32\\x76\\x32\\x1f\\xa6\\x3a\\x63\\xbe\\x8e\\xdb\\x2f\\x00\\x7d\\xb5\\xd5\\x2e\\\n\\x3a\\x41\\x17\\x53\\x95\\x8d\\xc0\\xdd\\x86\\x31\\x38\\x38\\x48\\x1a\\xa7\\xa6\\\n\\x41\\x50\\x90\\xd2\\x9e\\x9a\\xba\\x29\\x24\\x2c\\x3c\\x4c\\x54\\xff\\x24\\x45\\\n\\x82\\x7b\\xdf\\xdd\\x77\\x18\\xee\\x1b\\x68\\x04\\xa0\\xef\\xd9\\xcc\\x74\\x75\\\n\\xe7\\xbb\\x85\\x76\\x7f\\x8c\\xdd\\x67\\x80\\xbe\\xda\\x6a\\x7f\\x80\\xe7\\x31\\\n\\x55\\xb1\\x4f\\x4d\\x3d\\x18\\x04\\x34\\xf6\\x24\\x83\\xd8\\x2b\\x50\\x14\\x3d\\\n\\x0e\\x23\\x50\\xb5\\x61\\x43\\xb4\\x2c\\x2a\\x2a\\x52\\xce\\x5d\\xc1\\x2b\\x14\\\n\\x72\\xc0\\xdd\\xe0\\x38\\xe0\\xf2\\x60\\x83\\xd1\\x66\\x99\\xb3\\xb0\\xc6\\x49\\\n\\xe3\\x9c\\xd5\\x62\\x55\\x22\\x38\\x7a\\x9a\\xa1\\x41\\xb5\\xd0\\xa5\\xc0\\xba\\\n\\x00\\xf4\\xd5\\x56\\x2b\\x15\\x1e\\x4e\\xa2\\xfb\\x96\\x92\\x64\\x2e\\xd9\\x2e\\\n\\xad\\xea\\xcc\\x46\\x71\\xb4\\x18\\xe6\\x7b\\x45\\x70\\x93\\x52\\x33\\x34\\x15\\\n\\x0b\\xab\\xe3\\x08\\x8a\\x9a\\x31\\x14\\x33\\x30\\x2c\\xdb\\x43\\x91\\xf4\\xa7\\\n\\x08\\x4d\\xfe\\x63\\xf9\\xc9\\x24\\x20\\x00\\xfa\\x6a\\xab\\x15\\x0b\\x6f\\xf0\\\n\\x8e\\x1e\\x6e\\x34\\x0f\\xee\\xac\\x84\\x17\\x38\\xf2\\x0a\\xa0\\xaf\\xb6\\x5a\\\n\\xb9\\x52\\x41\\xc1\\x69\\x16\\x9e\\x94\\x94\\xe8\\x21\\xf2\\x86\\xc0\\x24\\xb7\\\n\\x4b\\xd3\\x78\\x62\\xeb\\xf1\\x67\\x26\\xd6\\x1b\\x96\\x5f\\x00\\xfa\\x6a\\xab\\\n\\x65\\x80\\xe2\\x31\\x14\\xc3\\xba\\xb4\\xda\\xa4\\x30\\x75\\xa2\\xe7\\x24\\x19\\\n\\x61\\x59\\xeb\\xdc\\xfc\\x5c\\xdd\\x72\\x5b\\x6d\\x20\\x49\\x12\\x40\\x5f\\x6d\\\n\\xb5\\x4b\\x49\\xb2\\x56\\x93\\x14\\x05\\xe1\\xe1\\x7c\\x6d\\x97\\xc3\\xd3\\xe9\\\n\\x32\\xc0\\xbc\\x75\\xde\\xc5\\x56\\x1b\\x48\\x12\\x0d\\xd0\\x57\\x5b\\xed\\xfe\\\n\\x97\\xbb\\x83\\x55\\x4a\\xe6\\x3a\\x9c\\xb6\\x1b\\x35\\x9a\\x24\\xc1\\x93\\xfd\\\n\\xc8\\xc8\\x28\\x4c\\xb0\\x4d\\x40\\x97\\x95\\x09\\x96\\x5c\\xf3\\xce\\xb6\\xda\\\n\\x40\\x92\\x28\\x80\\xfe\\xb0\\xd5\\x56\\xd6\\x77\\xbe\\x13\\xb9\\x21\\xea\\x85\\\n\\xf4\\xb4\\xcd\\x4a\\xa1\\xf6\\x0f\\xe1\\xe9\\x20\\xbc\\x65\\xb9\\xa4\\xb3\\xad\\\n\\x36\\x90\\xe4\\x11\\xa0\\xbf\\x6c\\xb5\\x15\\x75\\x5d\\xc6\\xdc\\xdc\\xec\\x0d\\\n\\x7c\\x96\\x09\\x4e\\xf0\\x5c\\x4a\\x4f\\x19\\x1f\\xa0\\xb9\\x39\\xd9\\x88\\x73\\\n\\x22\\xee\\x6c\\xab\\x0d\\x24\\xb9\\x05\\xc8\\xf9\\xe4\\x10\\x04\\xb9\\xe0\\x0f\\\n\\x5b\\x6d\\x59\\x6d\\xe7\\xc2\\x9e\\xbc\\xdd\\x4a\\x0c\\x73\\xed\\x66\\x78\\x64\\\n\\xc4\\x3e\\x6e\\x18\\x9f\\x92\\xc9\\xe5\\x61\\x3b\\x77\\x6c\\x77\\x39\\x5e\\x38\\\n\\xdb\\x6a\\x03\\x49\\x82\\x00\\xcb\\xaa\\x3b\\x32\\x60\\x92\\xfa\\x15\\x3c\\x9a\\\n\\x85\\xfb\\xc3\\x56\\x5b\\x59\\xdf\\xcd\\x2d\\x01\\xbb\\xe0\\x12\\xe0\\x02\\xcf\\\n\\x60\\x18\\xbf\\xc7\\x90\\x8e\\x02\\x14\\x53\\x5c\\x13\\x63\\xab\\x0d\\x24\\xf1\\\n\\x82\\xa9\\x3c\\xdc\\x91\\xc8\\x2a\\x90\\x2b\\x30\\xf2\\xa2\\xdd\\x45\\x9e\\x14\\\n\\x5b\\x6d\\x59\\x4d\\xfb\\x5e\\x0c\\xc3\\xbb\\x53\\x52\\x52\\x42\\x62\\x62\\xa2\\\n\\x17\\x6f\\x63\\x46\\x46\\xef\\x5a\\x4d\\xa6\\x69\\x83\\x9d\\x62\\xf7\\x2e\\x28\\\n\\x82\\x2c\\x62\\x6d\\xb5\\x81\\x24\\x17\\x80\\xdf\\xff\\xd8\\x24\\xb4\\x17\\x1e\\\n\\xea\\x93\\xb5\\x5a\\x8d\\xe0\\x6e\\xe9\\x8d\\xad\\xb6\\xac\\xfa\\xdc\\x6e\\x4c\\\n\\x86\\xfd\\x81\\xa2\\xe8\\x2c\\x78\\xd4\\x9a\\x86\\x39\\xf5\\xa7\\x0b\\x38\\xa8\\\n\\xea\\x24\\x0a\\x67\\x97\\xdb\\x6a\\x5f\\xb9\\x18\\xe1\\xd2\\xb6\\x82\\xe9\\x7c\\\n\\x68\\xab\\x15\\x25\\x82\\xc7\\x36\\x42\\xf8\\xff\\xfa\\xce\\xa5\\xc3\\x40\\xb0\\\n\\xd5\\xf2\\x01\\x94\\x04\\x80\\x10\\xf0\\xdc\\xac\\x36\\xc0\\x40\\xb1\\xd5\\x3e\\\n\\xb2\\x00\\x03\\xc5\\x56\\xfb\\x48\\x02\\xe4\\x6c\\xb5\\x0a\\x12\\x99\\xcc\\xdb\\\n\\xb3\\x4b\\x81\\x61\\xae\\x37\\xbd\\x6b\\x69\\xab\\x15\\x04\\x28\\x06\\x02\\xe1\\\n\\xc6\\x32\\xb7\\x9a\\x00\\x39\\x5b\\x6d\\x78\\x78\\xc4\\x07\\x59\\xba\\x4c\\xde\\\n\\x6b\\xde\\xb5\\xb4\\xd5\\x3e\\x92\\x00\\x7f\\x5c\\xdf\\x7d\\x5a\\xbb\\x29\\xf9\\\n\\x20\\xdf\\xdd\\xde\\x5a\\xdb\\x6a\\x1f\\x49\\x80\\x95\\xaf\\x75\\xdd\\xce\\xdc\\\n\\xba\\x35\\x8d\\xcf\\x23\\xbc\\xd6\\xb6\\x5a\\xb7\\x00\\xdd\\x81\\x20\\x3c\\x58\\\n\\x87\\xdd\\x01\\xf4\\xb2\\xed\\xc3\\x0f\\x2b\\xea\\xba\\x8d\\xb9\\xdb\\xe1\\x59\\\n\\x55\\xe1\\x72\\x10\\x58\\x61\\xab\\xf5\\x15\\x9e\\x18\\x5b\\xed\\x9a\\x02\\xf4\\\n\\xd4\\xc6\\x43\\x1f\\x0f\\xff\\x23\\xc6\\x56\\x2b\\xd5\\x37\\x22\\x04\\xcf\\x93\\\n\\xad\\x76\\xcd\\x00\\x7a\\xda\\xad\\x45\\xec\\xe6\\x3f\\x00\\xf4\\x60\\xab\\x75\\\n\\x2c\\xd8\\x9e\\x6c\\x3e\\x5e\\xd4\\xeb\\x2d\\x3c\\x29\\xb6\\xda\\xb7\\xbe\\xdd\\\n\\xe2\\xf9\\x0b\\x5f\\xb1\\x30\\xa4\\xb4\\x11\\xfb\\x87\\xe1\\x03\\xe8\\xce\\x56\\\n\\x7b\\xed\\xfa\\x8d\\x59\\xd3\\xf4\\xf4\\xcf\\x5b\\x8f\\x17\\xff\\xcd\\x1b\\x78\\\n\\x52\\x6d\\xb5\\x4d\\x58\\x41\\xb4\\xcb\\x0b\\x7b\\x1a\\x2c\\x5f\\xb9\\xbb\\x36\\\n\\x52\\x8e\\x7a\\x6e\\xea\\x3e\\x6c\\x20\\x64\\xab\\xe5\\x34\\x3e\\x3e\\x01\\x46\\\n\\x87\\x47\\xdb\\xcf\\x1e\\x3b\\x50\\x22\\x15\\x9e\\x57\\xb6\\x5a\\x65\\xfe\\xca\\\n\\xa5\\x62\\x2d\\x00\\x4a\\xdd\\xdd\\x9d\\x01\\xf2\\xd9\\x6a\\x97\\x44\\xd3\\x0c\\\n\\xf8\\xe6\\xd2\\xa5\\x79\\x9a\\xa1\\xf2\\x5a\\x8e\\x15\\x0d\\x48\\x82\\xe7\\x8d\\\n\\xad\\x56\\x0c\\x8c\\xe5\\x83\\x16\\x2a\\x93\\x1a\\x81\\x52\\xe4\\x0c\\xd0\\xd9\\\n\\x56\\xeb\\xac\\xc9\\xc9\\x29\\x46\\xaf\\x1f\\x1a\\xc3\\x31\\xb0\\xed\\x0c\\x91\\\n\\x3f\\xed\\xa9\\x7f\\x9f\\x6c\\xb5\\x42\\x03\\xf7\\xd7\\xe7\\xab\\x01\\x70\\xb9\\\n\\xad\\x56\\xe8\\xf7\\x62\\x23\\xa3\\xa3\\x36\\xc3\\x18\\x9c\\xcf\\x14\\xbd\\x5f\\\n\\xc8\\x4f\\xe7\\x17\\x5b\\xed\\x7a\\x00\\xf4\\x32\\xc9\\x5e\\xd1\\x88\\xb3\\xd5\\\n\\xc2\\xf4\\xe2\\xb5\\x6d\\xdb\\xb2\\x04\\x47\\x0d\\xd7\\x2a\\x7a\\x78\\x78\\xc4\\\n\\x86\\xa0\\x6c\\x2b\\xe9\\xa0\\x4f\\x31\\x08\\x73\\x83\\xa5\\x91\\x79\\xbf\\xda\\\n\\x6a\\xc5\\x02\\x11\\xd2\\x7a\\x01\\x2c\\x21\\xda\\x54\\x18\\x8d\\x8f\\x64\\x6c\\\n\\x49\\x8f\\x8d\\x8c\\x8c\\x14\\x6c\\x44\\xd3\\x34\\x98\\x98\\x34\\xb2\\xc6\\xa9\\\n\\x49\\xf3\\xfc\\xbc\\x0d\\xf7\\xbb\\xad\\xd6\\x97\\xa9\\x27\\x16\\xd2\\x6a\\x00\\\n\\xe4\\x54\\x56\\xdb\\xfe\\x0c\\x86\\xe2\\x2d\\xb9\\x39\\x39\\x2a\\x85\\x52\\xe1\\\n\\x4d\\x9f\\x6e\\x25\\xca\\x56\\xbb\\x1e\\x00\\xdd\\x41\\x14\\x93\\xc6\\x2c\\x57\\\n\\x45\\x4d\\x47\\xbd\\x4c\\xa1\\x38\\x9c\\x93\\x9b\\x1d\\x8c\\x63\\xd2\\xed\\xb3\\\n\\xc2\\xf0\\x44\\xda\\x6a\\xd7\\x02\\xa0\\x98\\x72\\x11\\xf5\\x04\\xc3\\xb6\\xf2\\\n\\xb5\\xae\\x53\\x38\\x26\\x3b\\x94\\xa5\\xcb\\xf4\\x43\\x24\\x4a\\xb4\\xd5\\x4a\\\n\\x1d\\xb8\\xb7\\x80\\xfc\\x79\\x94\\xe3\\x53\\x69\\x4d\\x67\\x2d\\x8e\\x22\\x55\\\n\\xe9\\xe9\\x9b\\x83\\xf9\\x12\\x6c\\x31\\xf2\\xca\\x56\\xbb\\x56\\x00\\xdd\\xf5\\\n\\x25\\xfc\\x6e\\xfc\\x97\\x09\\x42\\x2a\\x3e\\xd2\\xf9\\xb4\\x0c\\x43\\x4f\\xa9\\\n\\x54\\x41\\x11\\x29\\x9b\\x92\\x43\\xd7\\xc4\\x56\\xbb\\x96\\x00\\xc5\\x82\\xf4\\\n\\x74\\x9d\\xe5\\x4e\\x4f\\x12\\x5f\\xe0\\xe1\\x8e\\xf9\\x9f\\x06\\x8a\\xad\\x36\\\n\\x90\\x24\\x71\\xeb\\x0e\\x0c\\x5b\\x6d\\x20\\x29\\x20\\x7f\\xa9\\xf4\\x28\\xe9\\\n\\xff\\x00\\x7d\\xd4\\x7f\\x00\\xd5\\x28\\x90\\xd8\\xa4\\x8e\\xda\\xa3\\x00\\x00\\\n\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x0b\\xdf\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x50\\x00\\x00\\x00\\x50\\x08\\x06\\x00\\x00\\x00\\x8e\\x11\\xf2\\xad\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0d\\xd7\\x00\\x00\\x0d\\xd7\\x01\\x42\\x28\\\n\\x9b\\x78\\x00\\x00\\x01\\xcb\\x69\\x54\\x58\\x74\\x58\\x4d\\x4c\\x3a\\x63\\x6f\\\n\\x6d\\x2e\\x61\\x64\\x6f\\x62\\x65\\x2e\\x78\\x6d\\x70\\x00\\x00\\x00\\x00\\x00\\\n\\x3c\\x78\\x3a\\x78\\x6d\\x70\\x6d\\x65\\x74\\x61\\x20\\x78\\x6d\\x6c\\x6e\\x73\\\n\\x3a\\x78\\x3d\\x22\\x61\\x64\\x6f\\x62\\x65\\x3a\\x6e\\x73\\x3a\\x6d\\x65\\x74\\\n\\x61\\x2f\\x22\\x20\\x78\\x3a\\x78\\x6d\\x70\\x74\\x6b\\x3d\\x22\\x58\\x4d\\x50\\\n\\x20\\x43\\x6f\\x72\\x65\\x20\\x35\\x2e\\x34\\x2e\\x30\\x22\\x3e\\x0a\\x20\\x20\\\n\\x20\\x3c\\x72\\x64\\x66\\x3a\\x52\\x44\\x46\\x20\\x78\\x6d\\x6c\\x6e\\x73\\x3a\\\n\\x72\\x64\\x66\\x3d\\x22\\x68\\x74\\x74\\x70\\x3a\\x2f\\x2f\\x77\\x77\\x77\\x2e\\\n\\x77\\x33\\x2e\\x6f\\x72\\x67\\x2f\\x31\\x39\\x39\\x39\\x2f\\x30\\x32\\x2f\\x32\\\n\\x32\\x2d\\x72\\x64\\x66\\x2d\\x73\\x79\\x6e\\x74\\x61\\x78\\x2d\\x6e\\x73\\x23\\\n\\x22\\x3e\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x3c\\x72\\x64\\x66\\x3a\\x44\\x65\\\n\\x73\\x63\\x72\\x69\\x70\\x74\\x69\\x6f\\x6e\\x20\\x72\\x64\\x66\\x3a\\x61\\x62\\\n\\x6f\\x75\\x74\\x3d\\x22\\x22\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\\n\\x20\\x20\\x20\\x78\\x6d\\x6c\\x6e\\x73\\x3a\\x78\\x6d\\x70\\x3d\\x22\\x68\\x74\\\n\\x74\\x70\\x3a\\x2f\\x2f\\x6e\\x73\\x2e\\x61\\x64\\x6f\\x62\\x65\\x2e\\x63\\x6f\\\n\\x6d\\x2f\\x78\\x61\\x70\\x2f\\x31\\x2e\\x30\\x2f\\x22\\x0a\\x20\\x20\\x20\\x20\\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x78\\x6d\\x6c\\x6e\\x73\\x3a\\x74\\x69\\\n\\x66\\x66\\x3d\\x22\\x68\\x74\\x74\\x70\\x3a\\x2f\\x2f\\x6e\\x73\\x2e\\x61\\x64\\\n\\x6f\\x62\\x65\\x2e\\x63\\x6f\\x6d\\x2f\\x74\\x69\\x66\\x66\\x2f\\x31\\x2e\\x30\\\n\\x2f\\x22\\x3e\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x3c\\x78\\x6d\\\n\\x70\\x3a\\x43\\x72\\x65\\x61\\x74\\x6f\\x72\\x54\\x6f\\x6f\\x6c\\x3e\\x77\\x77\\\n\\x77\\x2e\\x69\\x6e\\x6b\\x73\\x63\\x61\\x70\\x65\\x2e\\x6f\\x72\\x67\\x3c\\x2f\\\n\\x78\\x6d\\x70\\x3a\\x43\\x72\\x65\\x61\\x74\\x6f\\x72\\x54\\x6f\\x6f\\x6c\\x3e\\\n\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x3c\\x74\\x69\\x66\\x66\\x3a\\\n\\x4f\\x72\\x69\\x65\\x6e\\x74\\x61\\x74\\x69\\x6f\\x6e\\x3e\\x31\\x3c\\x2f\\x74\\\n\\x69\\x66\\x66\\x3a\\x4f\\x72\\x69\\x65\\x6e\\x74\\x61\\x74\\x69\\x6f\\x6e\\x3e\\\n\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x3c\\x2f\\x72\\x64\\x66\\x3a\\x44\\x65\\x73\\\n\\x63\\x72\\x69\\x70\\x74\\x69\\x6f\\x6e\\x3e\\x0a\\x20\\x20\\x20\\x3c\\x2f\\x72\\\n\\x64\\x66\\x3a\\x52\\x44\\x46\\x3e\\x0a\\x3c\\x2f\\x78\\x3a\\x78\\x6d\\x70\\x6d\\\n\\x65\\x74\\x61\\x3e\\x0a\\x18\\xcb\\x55\\x58\\x00\\x00\\x09\\xad\\x49\\x44\\x41\\\n\\x54\\x78\\x01\\xed\\x9c\\x0b\\x4c\\x54\\xd9\\x19\\xc7\\xff\\x88\\x32\\xc0\\x08\\\n\\xe2\\x82\\xc2\\xfa\\x00\\x91\\x54\\x7c\\xd5\\xaa\\x68\\x11\\x0d\\x56\\x8d\\x55\\\n\\x04\\x5c\\xdd\\xc4\\x27\\xa6\\xba\\x69\\xd5\\xc4\\x17\\xed\\x9a\\x5d\\x0d\\xbb\\\n\\xba\\x9a\\xd6\\xa2\\x06\\x23\\xeb\\xc6\\xa8\\x9b\\xfa\\xc0\\x17\\x26\\x4d\\x6b\\\n\\x05\\xac\\x18\\x93\\xfa\\x22\\x8d\\x8f\\xf8\\xc2\\x28\\xbe\\xab\\xd5\\xa2\\x14\\\n\\xad\\xa2\\xa2\\x88\\xa0\\x74\\xfe\\x27\\x0e\\xcb\\xdc\\xb9\\xf7\\xce\\x9d\\xb9\\\n\\x77\\x70\\x91\\x7b\\x92\\xc3\\xdc\\xf3\\xfa\\xee\\xb9\\xbf\\xfb\\x9d\\x73\\xbe\\\n\\xf3\\x9d\\x61\\x00\\x33\\x98\\x04\\x4c\\x02\\x26\\x81\\xe6\\x4b\\xc0\\x47\\xfa\\\n\\xe8\\x59\\x5f\\x6e\\xaf\\x93\\xe6\\xe9\\x49\\xbf\\x68\\x51\\x83\\x27\\x7e\\xaf\\\n\\x50\\x55\\x5b\\xa3\\x47\\x8c\\xee\\xb6\\x01\\xad\\xfc\\xf0\\x51\\xb5\\x1f\\x82\\\n\\x7d\\xfd\\xbf\\xf9\\x3c\\xf3\\x57\\x7f\\xd0\\x2d\\xf0\\x9d\\x80\\x96\\x72\\x82\\\n\\x3e\\xfd\\xec\\x53\\xb9\\x6c\\xd5\\xbc\\xf2\\xd2\\x4a\\xd9\\xf2\\xbf\\x9c\\xdc\\\n\\x8f\\x09\\xa9\\xbf\\x44\\x64\\xe7\\x8f\\x65\\xcb\\x1b\\x2b\\xf3\\xce\\xdd\\xfb\\\n\\x28\\x28\\x2c\\x42\\xd8\\x1b\\xff\\x8c\\x6f\\xbf\\xce\\xf5\\xf9\\xdd\\x1f\\xd3\\\n\\x7e\\x6f\\xc4\\xbd\\x5b\\x18\\x21\\x44\\x4d\\x46\\x65\\xd5\\x8b\\xf7\\x0e\\x8f\\\n\\xfd\\xeb\\x12\\xd9\\x01\\xcf\\x5e\\x54\\x62\\x58\\xea\\xb0\\x00\\x3f\\x8b\\x65\\\n\\xf1\\xb7\\x5f\\xef\\x5a\\xa9\\xd6\\x6f\\xad\\x65\\x5e\\x07\\xa8\\xb5\\x23\\x8d\\\n\\x55\\xcf\\xe2\\x6f\\xc1\\x2f\\x52\\x86\\x06\\xfa\\x59\\x02\\xd2\\x8d\\x80\\xd8\\\n\\xec\\x00\\xf2\\x45\\x35\\x84\\x98\\xfd\\x55\\x6e\\xa6\\x9e\\x97\\xd7\\x2c\\x01\\\n\\x36\\x84\\x68\\x83\\xf9\\x5b\\x3d\\x10\\x65\\x17\\x11\\x3d\\x6f\\xa4\\xb1\\xda\\\n\\x6e\\xcc\\xf9\\xb3\\xec\\xad\\xe6\\x7c\\x36\\x49\\x36\\x5f\\x2e\\xd3\\xae\\x89\\\n\\xc7\\xfe\\x7e\\x9c\\x10\\xf1\\x79\\x66\\xda\\x57\\x72\\xf5\\xd4\\xf2\\x9a\\xad\\\n\\x06\\xda\\xa1\\xd8\\x21\\x7a\\xaa\\x89\\xcd\\x1e\\x20\\x41\\xea\\x81\\x68\\x02\\\n\\x7c\\xa7\\x8a\\x9e\\x42\\x34\\x01\\xda\\xc7\\xb2\\x87\\x9a\\x68\\x02\\x6c\\x00\\\n\\x90\\x97\\xee\\x6a\\xa2\\x09\\x50\\x02\\xd0\\x5d\\x88\\x26\\x40\\x19\\x80\\x0e\\\n\\x10\\x03\\x2d\\xe9\\x6a\\x76\\xa2\\x09\\x50\\x01\\x60\\x3d\\xc4\\x31\\x43\\xad\\\n\\x16\\x15\\x88\\x26\\x40\\x15\\x80\\x5a\\x20\\x9a\\x00\\x5d\\x00\\xb4\\x43\\x1c\\\n\\x9a\\x94\\x68\\xad\\xad\\xa9\\xc9\\x90\\x56\\x37\\x01\\x4a\\x89\\x28\\xa4\\xfd\\\n\\x03\\xfc\\x65\\x4b\\x9a\\xec\\x5e\\xd8\\x9d\\x3d\\xaf\\xec\\x93\\x1b\\x94\\x69\\\n\\x6a\\xa0\\x4e\\x90\\x26\\x40\\x13\\xa0\\x4e\\x02\\x3a\\x9b\\x1b\\xa6\\x81\\x2d\\\n\\x7c\\xe5\\x45\\x59\\x03\\x02\\x71\\xaf\\xf4\\xbf\\x3a\\xbb\\xa9\\xbf\\xf9\\xdd\\\n\\xff\\x94\\x21\\xc8\\xda\\x5a\\xbf\\x20\\x89\\x04\\xc3\\x16\\x91\\xa0\\x10\\x0b\\\n\\x9e\\x57\\x54\\xe3\\xed\\x9b\\xb7\\x0e\\xb7\\x18\\xf4\\x93\\x38\\xfc\\x35\\xff\\\n\\x1f\\x78\\x51\\x55\\xe5\\x90\\xdf\\xd8\\x89\\xa0\\x40\\x2b\\x46\\xc7\\x0f\\x31\\\n\\xfc\\xb6\\x86\\x01\\xb4\\xf8\\xfb\\xc2\\x12\\x11\\xe8\\xd4\\xc1\\xf6\\x1d\\xbb\\\n\\x21\\xae\\x4f\\x37\\xa7\\xfc\\x0f\\x25\\x43\\x7e\\xdc\\x7d\\x28\\x4f\\xd7\\x08\\\n\\xcf\\x61\\x02\\xd4\\x09\\xd9\\x04\\x68\\x02\\xd4\\x49\\x40\\x67\\x73\\x53\\x03\\\n\\x4d\\x80\\x3a\\x09\\xe8\\x6c\\x6e\\x6a\\xa0\\x09\\x50\\x27\\x01\\x9d\\xcd\\x4d\\\n\\x0d\\xd4\\x09\\xd0\\xed\\x9d\\xc8\\xe6\\x03\\xf2\\xdf\\x49\\xd1\\xd9\\x8f\\x1f\\\n\\x4d\\xf3\\x99\\xc9\\xda\\xbf\\x5b\\xc3\\x4e\\xbb\\x0d\\x90\\x8d\\x56\\x7e\\xf1\\\n\\x1b\\x7e\\x7c\\x70\\x21\\x63\\xcd\\x16\\xb7\\x9f\\xc9\\x1c\\xc2\\x6e\\x23\\x73\\\n\\x6c\\xe0\\x91\\x06\\x3a\\x8a\\xf8\\x21\\xf5\\xfa\\xf5\\x6b\\xdc\\xbb\\x77\\x4f\\\n\\xc4\\xda\\xda\\xda\\x1f\\x0a\\x34\\x5e\\x45\\x44\\x44\\xa0\\x67\\xcf\\x9e\\x68\\\n\\xd1\\x42\\xdb\\x7b\\x2d\\x2f\\x2f\\xc7\\xd9\\xb3\\x67\\x71\\xe9\\xd2\\x25\\x3c\\\n\\x79\\xf2\\x04\\x15\\x15\\x15\\x60\\x1f\\x3a\\x76\\xec\\x88\\x4e\\x9d\\x3a\\x89\\\n\\xc8\\xeb\\xde\\xbd\\x7b\\x6b\\x96\\xa9\\xb1\\xab\\xf5\\xd5\\x0c\\x03\\x58\\x56\\\n\\x56\\x86\\x05\\x0b\\x16\\xe0\\xe6\\xcd\\x9b\\x78\\xf9\\xf2\\x25\\xde\\xbe\\x75\\\n\\x74\\x6b\\xd5\\xdf\\x51\\xe5\\x22\\x20\\x20\\x00\\x91\\x91\\x91\\x58\\xb7\\x6e\\\n\\x1d\\x62\\x62\\x62\\x14\\x6b\\x5e\\xbc\\x78\\x11\\x9b\\x36\\x6d\\xc2\\x99\\x33\\\n\\x67\\xf0\\xf8\\xf1\\x63\\x01\\x8f\\xe0\\x18\\xeb\\xea\\xea\\x40\\x39\\x81\\x81\\\n\\x81\\xb0\\x5a\\xad\\xe2\\x3a\\x2e\\x2e\\x0e\\x73\\xe6\\xcc\\x41\\x7c\\x7c\\xbc\\\n\\xa2\\x4c\\x4f\\x0b\\x0c\\x03\\x98\\x95\\x95\\x85\\xbd\\x7b\\xf7\\x7a\\x04\\xae\\\n\\x61\\xe7\\xa9\\x4d\\x83\\x06\\x0d\\xc2\\x92\\x25\\x4b\\x1a\\x66\\x8b\\xeb\\x37\\\n\\x6f\\xde\\x60\\xcd\\x9a\\x35\\xd8\\xb5\\x6b\\x17\\xae\\x5f\\xbf\\x2e\\x80\\x39\\\n\\x55\\xb2\\x65\\xd4\\xd4\\xd4\\xe0\\xd9\\xb3\\x67\\xf5\\x45\\x57\\xaf\\x5e\\xc5\\\n\\xe9\\xd3\\xa7\\x31\\x6a\\xd4\\x28\\x2c\\x5b\\xb6\\x0c\\x6d\\xdb\\xb6\\xad\\x2f\\\n\\xd3\\x7b\\x61\\x18\\xc0\\xfd\\xfb\\xf7\\xeb\\x86\\xc7\\x87\\xa1\\x06\\xc9\\x0d\\\n\\x61\\xe6\\xaf\\x5a\\xb5\\x0a\\x6b\\xd7\\xae\\x15\\x5a\\xe7\\xce\\x83\\x73\\x3a\\\n\\xb9\\x72\\xe5\\x0a\\x6e\\xdf\\xbe\\x8d\\x2a\\x9b\\x63\\x77\\xfd\\xfa\\xf5\\x68\\\n\\xd5\\xaa\\x95\\x3b\\x22\\x14\\xeb\\x1a\\x02\\x90\\x9a\\x71\\xe3\\xc6\\x0d\\xc5\\\n\\x9b\\x68\\x2d\\x68\\xd3\\xa6\\x0d\\x46\\x8e\\x1c\\x89\\x09\\x13\\x26\\x38\\x35\\\n\\x39\\x7a\\xf4\\xa8\\xd0\\x3e\\xce\\x73\\xd2\\x90\\x92\\x92\\x22\\x86\\x27\\xe7\\\n\\x50\\x82\\xe6\\xdc\\x58\\x54\\x54\\x84\\x43\\x87\\x0e\\x39\\x54\\x7d\\xf5\\xea\\\n\\x15\\xb6\\x6f\\xdf\\x8e\\xd8\\xd8\\x58\\x2c\\x5c\\xb8\\xd0\\xa1\\xcc\\xd3\\x84\\\n\\x21\\x00\\xd9\\x69\\x46\\x69\\xe0\\x50\\xe4\\x90\\xd3\\x1a\\x82\\x82\\x82\\x10\\\n\\x12\\x12\\x82\\x0e\\x1d\\x3a\\x38\\x34\\xa1\\x6c\\xca\\x91\\xc2\\x63\\xdd\\xad\\\n\\x5b\\xb7\\xa2\\x5f\\xbf\\x7e\\x60\\x5b\\x3f\\x3f\\x3f\\xd1\\x0f\\x0e\\xe1\\x69\\\n\\xd3\\xa6\\x81\\xa3\\x22\\x3d\\x3d\\xdd\\x41\\x56\\x75\\x75\\xb5\\x90\\x35\\x77\\\n\\xee\\x5c\\xf8\\xfb\\xcb\\x1f\\x96\\x3b\\x34\\x70\\x91\\x30\\x04\\xa0\\xd2\\x3d\\\n\\xc2\\xc2\\xc2\\xc4\\x7c\\xa6\\x54\\x2e\\xcd\\xf7\\xf5\\xf5\\x95\\x66\\x89\\xf4\\\n\\xa3\\x47\\x8f\\x9c\\xb4\\x89\\x05\\x1c\\xce\\x63\\xc6\\x8c\\x91\\x05\\x11\\x1a\\\n\\x1a\\x8a\\xe9\\xd3\\xa7\\xe3\\xdc\\xb9\\x73\\xc8\\xc9\\xc9\\x11\\x72\\xec\\x7f\\\n\\x1e\\x3c\\x78\\x20\\x56\\xee\\x01\\x03\\x06\\xd8\\xb3\\x3c\\xfe\\xd4\\x66\\x2f\\\n\\x78\\x2c\\x1e\\x20\\x14\\xad\\x51\\xe9\\x36\\x77\\xee\\xdc\\x81\\x9c\\x59\\xc4\\\n\\xa1\\xab\\xa6\\x45\\x9c\\x12\\xb8\\x68\\xf4\\xea\\xd5\\xcb\\x49\\x34\\x35\\xd1\\\n\\x88\\xe0\\x55\\x0d\\x7c\\x64\\xeb\\x63\\x91\\x01\\x27\\x9a\\x67\\xef\\xca\\xff\\\n\\x1f\\x5e\\xde\\x85\\xbb\\xe8\\xfe\\xb3\\xf6\\xaa\\x1c\\xea\\xfc\\xa3\\xf0\\xeb\\\n\\x6f\\xb2\\xf1\\xc5\\xd4\\x24\\xd4\\xbd\\x33\\xad\\x68\\x2a\\xf5\\xe9\\xd3\\x47\\\n\\xb5\\x9d\\xd6\\x42\\xaf\\x02\\x0c\\xb3\\x00\\x89\\xe1\\x5a\\xbb\\xa2\\x5c\\x2f\\\n\\xb4\\x87\\xbc\\x90\\xbc\\xef\\x96\\x23\\xf9\\xfb\\xef\\x85\\xe1\\xac\\xdc\\xda\\\n\\x07\\x3f\\xff\\x24\\x11\\xe1\\x3b\\x76\\x20\\x3f\\x3f\\x1f\\x3e\\x3e\\x3e\\x98\\\n\\x3d\\x7b\\xb6\\x98\\x33\\x95\\xdb\\x68\\x2f\\xf1\\x2a\\x40\\xed\\xdd\\x50\\xaf\\\n\\x49\\x8d\\x69\\xdd\\xba\\x35\\x2a\\x2b\\x1d\\x35\\xf1\\xe0\\xc1\\x83\\x98\\x3a\\\n\\x75\\x2a\\x26\\x4f\\x9e\\x8c\\xe4\\xe4\\x64\\x44\\x47\\x47\\xcb\\x0a\\xe2\\x30\\\n\\x1f\\x3f\\x7e\\x3c\\x12\\x13\\x13\\x45\\x39\\x57\\x6b\\xa3\\x42\\x93\\x00\\xc8\\\n\\x1d\\xc5\\xbc\\x79\\xf3\\xb0\\x7a\\xf5\\x6a\\x87\\xe7\\xa6\\xf9\\x44\\x73\\xe5\\\n\\xda\\xb5\\x6b\\xd8\\xb2\\x65\\x0b\\xba\\x76\\xed\\x8a\\x81\\x03\\x07\\x82\\x8b\\\n\\x03\\x23\\xe7\\x40\\x7b\\xa0\\x0c\\x46\\xa3\\x83\\x57\\x01\\x5e\\xbe\\x7c\\x19\\\n\\xcb\\x97\\x2f\\x77\\xd9\\x67\\xae\\x98\\x34\\x79\\xfa\\xf7\\xef\\x2f\\x16\\x1c\\\n\\x69\\x03\\x0e\\x3b\\x6e\\xc5\\x0a\\x0b\\x0b\\xc1\\x6d\\x9c\\x34\\xd0\\xee\\x63\\\n\\x2c\\x2e\\x2e\\xc6\\x91\\x23\\x47\\x40\\x79\\x8c\\x7d\\xfb\\xf6\\x45\\x42\\x42\\\n\\x02\\x86\\x0c\\x19\\xa2\\xba\\x35\\x94\\xca\\x73\\x27\\xed\\x55\\x80\\x5c\\x3d\\\n\\xb3\\xb3\\xb3\\x5d\\xf6\\x87\\x43\\x8c\\x26\\x0f\\xb7\\x83\\x1c\\x8a\\x72\\xa1\\\n\\x73\\xe7\\xce\\xc2\\xe6\\x9b\\x35\\x6b\\x16\\xce\\x9f\\x3f\\x2f\\x57\\x45\\xec\\\n\\x84\\xb8\\x37\\x66\\xa4\\x61\\x4f\\x13\\xa6\\xa0\\xa0\\x00\\xed\\xda\\xb5\\x43\\\n\\x52\\x52\\x12\\x66\\xcc\\x98\\x81\\xee\\xdd\\xbb\\xcb\\xb6\\xf5\\x34\\xd3\\xab\\\n\\x00\\x69\\x00\\x37\\xdc\\x93\\x2a\\x75\\x92\\x75\\xa8\\x41\\xfb\\xf6\\xed\\x53\\\n\\x04\\xc8\\xed\\x1d\\x35\\x6a\\xcf\\x9e\\x3d\\x22\\xd2\\x06\\x7c\\xfe\\xfc\\xb9\\\n\\x92\\x48\\x91\\x4f\\xe7\\x42\\x69\\x69\\xa9\\x88\\x74\\x72\\x1c\\x38\\x70\\x00\\\n\\xa9\\xa9\\xa9\\x58\\xba\\x74\\xa9\\xaa\\xf9\\xa3\\x2a\\x54\\x52\\xe8\\x55\\x80\\\n\\x92\\x7b\\xb9\\x4c\\x12\\x90\\x5a\\xa0\\x3d\\xc9\\x6d\\xd8\\xfc\\xf9\\xf3\\x31\\\n\\x6e\\xdc\\x38\\x1c\\x3b\\x76\\x4c\\xac\\xac\\xc7\\x8f\\x1f\\x07\\xe7\\x43\\xb5\\\n\\xc0\\x05\\x88\\xc3\\x9f\\xfb\\x61\\xbe\\xd8\\x15\\x2b\\x56\\xc8\\xee\\xb9\\xd5\\\n\\x64\\xc8\\x95\\x79\\x15\\xa0\\xb5\\xcd\\x47\\xe8\\x37\\x64\\x98\\xdc\\x7d\\x1d\\\n\\xf2\\x42\\x42\\xdb\\xe1\\xa7\\x03\\x12\\x10\\x39\\x3c\\x45\\xa3\\xdd\\x18\\x86\\\n\\xba\\x8f\\x43\\x11\\x9b\\x1c\\x8d\\xd9\\x09\\x9f\\x60\\x4a\\xc5\\x63\\xdc\\xbc\\\n\\x5c\\x8c\\x92\\xf3\\xa7\\x51\\x72\\xee\\x14\\x6e\\x97\\x14\\x3b\\xc8\\x6f\\x98\\\n\\xa0\\xd6\\xd2\\x99\\xc0\\xed\\x22\\x5f\\x84\\xde\\xe0\\x55\\x80\\xf1\\x71\\x7d\\\n\\xb1\\x75\\xc3\\x5a\\x97\\x7d\\xa4\\x67\\x24\\x38\\x38\\x58\\x98\\x2a\\x2e\\x2b\\\n\\xd7\\x57\\xb0\\xfd\\xe0\\x48\\x44\\x88\\x2d\\x15\\x62\\xd3\\xa8\\x68\\x54\\x0e\\\n\\x8e\\xb5\\x0d\\xe9\\x31\\xc2\\xd4\\x79\\xf8\\xf0\\x21\\x4e\\x9d\\x3a\\x85\\xcd\\\n\\x9b\\x37\\x0b\\x2f\\x4c\\x7d\\x93\\x77\\x17\\x84\\x98\\x99\\x99\\x89\\x99\\x33\\\n\\x67\\xea\\x1e\\xca\\x5e\\x05\\x48\\xa7\\x66\\x54\\x54\\x94\\xb4\\xff\\x1e\\xa5\\\n\\x39\\x44\\x2f\\x5c\\xb8\\x20\\x4c\\x15\\xa9\\x3f\\x8f\\xab\\x34\\x9d\\x09\\x8c\\\n\\x0c\\x74\\xc6\\xd2\\xb3\\xcd\\x85\\x83\\x73\\xe6\\xca\\x95\\x2b\\x9d\\x86\\x38\\\n\\xf7\\xc3\\xf4\\x29\\xea\\xdd\\x91\\x78\\x7d\\x2f\\xec\\x11\\x2d\\x49\\xa3\\x5b\\\n\\xb7\\x6e\\x61\\xe2\\xc4\\x89\\x62\\x15\\xe5\\xfe\\x97\\x06\\xb4\\x5a\\xe0\\x5c\\\n\\x49\\xc8\\x3d\\x7a\\xf4\\x10\\xde\\x98\\x8c\\x0c\\xa7\\x7f\\xef\\x10\\xcd\\xb9\\\n\\x4a\\xeb\\x0d\\x4d\\x02\\xe0\\xce\\x9d\\x3b\\xc5\\x0a\\x4d\\xbb\\xf2\\xc4\\x89\\\n\\x13\\x20\\x10\\x9e\\x81\\xb8\\x0a\\xd4\\x4c\\x9a\\x30\\x69\\x69\\x69\\xb2\\x55\\\n\\xe9\\xfd\\xd6\\x1b\\x9a\\x04\\xc0\\xc3\\x87\\x0f\\x3b\\xf8\\x1b\\x39\\x94\\x39\\\n\\xbf\\x69\\x0d\\xf4\\x1b\\xca\\x05\\x23\\x76\\x26\\x4d\\x02\\x60\\x78\\xb8\\xb3\\\n\\x33\\x81\\x06\\x3a\\x0f\\xb2\\xb4\\x04\\x25\\xc3\\xbb\\x4b\\x97\\x2e\\x5a\\x9a\\\n\\xab\\xd6\\x69\\x12\\x00\\xc7\\x8e\\x1d\\xeb\\xf4\\x10\\x5c\\x04\\x68\\x10\\x3f\\\n\\x7d\\xfa\\xd4\\xa9\\xac\\x61\\x06\\x8f\\x59\\xe9\\x13\\x94\\x06\\x1a\\xe6\\x76\\\n\\xe7\\x82\\xb4\\xcc\\x9d\\xb4\\x57\\x57\\x61\\xa3\\xfc\\x81\\x61\\xf1\\x63\\x11\\\n\\x11\\x15\\x83\\xb2\\x7f\\xdf\\x72\\x78\\xb6\\x9c\\x1d\\x3b\\x71\\xbd\\xac\\x02\\\n\\xd3\\xe6\\x2f\\x42\\x64\\x4c\\x2c\\xac\\x41\\xc1\\xf5\\xe5\\x55\\xb6\\x9f\\x79\\\n\\x2a\\x3a\\x98\\x8f\\x82\\xdc\\x2d\\x28\\xb6\\x9d\\x1d\\x4b\\xc3\\xa4\\x49\\x93\\\n\\x0c\\xb1\\x10\\xbc\\x0a\\xd0\\x28\\x7f\\x20\\xc2\\xdb\\x22\\x77\\xdb\\x9f\\xc4\\\n\\x39\\x07\\x35\\xcf\\x1e\\x6a\\x5f\\x57\\xe3\\x9f\\x85\\x7f\\xc3\\xa3\\x7f\\x95\\\n\\x08\\x3b\\x92\\x26\\x13\\x17\\x0d\\xd6\\xb9\\x7f\\xff\\xbe\\x38\\xe0\\xe7\\x56\\\n\\xce\\x36\\x81\\xda\\x9b\\x88\\x4f\\x4e\\x09\\x8b\\x17\\x2f\\x36\\xe4\\x64\\xce\\\n\\x10\\x80\\x34\\x1b\\x5a\\xb6\\x6c\\xe9\\xe4\\x76\\x6f\\xe8\\x4e\\x72\\x78\\x02\\\n\\x0f\\x12\\xf4\\xa8\\xe4\\xe6\\xe6\\x8a\\x73\\x0e\\x0e\\x4b\\x7b\\xa0\\x7d\\x58\\\n\\x52\\x52\\x22\\x92\\x3c\\xfb\\xa5\\x51\\xce\\x43\\x25\\xa5\\x83\\x7d\\xda\\xa6\\\n\\xdb\\xb6\\x6d\\x93\\x75\\xf3\\xdb\\x65\\xba\\xf3\\x69\\xc8\\x1c\\x48\\x73\\x81\\\n\\x27\\x63\\xd2\\x60\\xa4\\xe7\\x83\\x27\\x6e\\x83\\x07\\x0f\\xc6\\xee\\xdd\\xbb\\\n\\x15\\x5d\\x53\\x84\\xc6\\xb3\\x0e\\x25\\x78\\xa3\\x47\\x8f\\x16\\xde\\x99\\xe1\\\n\\xc3\\x87\\x1b\\xa2\\x7d\\x7c\\x5e\\x43\\x00\\x52\\xd0\\xa2\\x45\\x8b\\x1c\\x7c\\\n\\x79\\xfc\\x4e\\xca\\x94\\x29\\x53\\x58\\x64\\x58\\x20\\x44\\xfa\\x0d\\xf3\\xf2\\\n\\xf2\\xb0\\x61\\xc3\\x06\\x10\\x08\\x5f\\x9e\\x5a\\xa0\\x27\\x9b\\xe7\\xcc\\x74\\\n\\xb8\\x6e\\xdc\\xb8\\x51\\x2c\\x1c\\x6a\\x07\\x51\\x6a\\xb2\\xe4\\xca\\x0c\\x19\\\n\\xc2\\x14\\xcc\\x6d\\x13\\xcf\\x61\\x4f\\x9e\\x3c\\x29\\xbe\\x97\\x32\\x62\\xc4\\\n\\x08\\x45\\x17\\xbb\\x5c\\x47\\xb4\\xe6\\x71\\x88\\x72\\x9b\\x46\\xff\\x20\\xef\\\n\\xc9\\xf9\\x8e\\x91\\x47\\x9f\\x8c\\x74\\x8d\\x71\\xea\\xe0\\x4e\\x84\\x3e\\xc6\\\n\\x6e\\xdd\\xba\\x89\\x6b\\xa6\\xed\\x5b\\x3d\\xad\\xf7\\xd2\\x52\\xcf\\x30\\x80\\\n\\x7c\\xd3\\x84\\x46\\x57\\x3a\\x4d\\x04\\x1a\\xaf\\x72\\x5f\\xd1\\xd0\\xd2\\x29\\\n\\x57\\x75\\xa8\\x75\\x74\\x3e\\x30\\xf2\\xbc\\x84\\x7e\\x3f\\xce\\x7b\\x8c\\x9c\\\n\\x13\\x39\\x27\\x13\\x34\\x23\\xb5\\xcd\\x95\\x96\\xba\\xba\\x9f\\x5a\\xb9\\x61\\\n\\x00\\x79\\x13\\x0e\\x31\\xbe\\xf5\\xc6\\x0c\\x84\\xc5\\x6f\\x63\\x31\\xbe\\x8f\\\n\\x60\\xd8\\x1c\\xf8\\x3e\\x3a\\xff\\x63\\xb8\\xa7\\x09\\x50\\xe7\\x5b\\x70\\x5a\\\n\\xc2\\x5c\\xfd\\x0c\\xf2\\xff\\xda\\xbf\\xdf\\x9f\\x33\\xd6\\xf9\\xbc\\x2e\\x9b\\\n\\x87\\x96\\xab\\x7f\\xed\\xed\\xcb\\xac\\x19\\x4e\\xcc\\x5c\\x0a\\x35\\x2b\\x98\\\n\\x04\\x4c\\x02\\x26\\x81\\x0f\\x94\\xc0\\xff\\x01\\x3b\\xfb\\x35\\x98\\xe4\\x6a\\\n\\x7f\\x54\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x06\\x7a\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x60\\x00\\x00\\x00\\x60\\x08\\x06\\x00\\x00\\x00\\xe2\\x98\\x77\\x38\\\n\\x00\\x00\\x00\\x04\\x73\\x42\\x49\\x54\\x08\\x08\\x08\\x08\\x7c\\x08\\x64\\x88\\\n\\x00\\x00\\x00\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x1b\\xaf\\x00\\x00\\x1b\\xaf\\\n\\x01\\x5e\\x1a\\x91\\x1c\\x00\\x00\\x00\\x19\\x74\\x45\\x58\\x74\\x53\\x6f\\x66\\\n\\x74\\x77\\x61\\x72\\x65\\x00\\x77\\x77\\x77\\x2e\\x69\\x6e\\x6b\\x73\\x63\\x61\\\n\\x70\\x65\\x2e\\x6f\\x72\\x67\\x9b\\xee\\x3c\\x1a\\x00\\x00\\x05\\xf7\\x49\\x44\\\n\\x41\\x54\\x78\\x9c\\xed\\xdc\\x4f\\x6c\\x1c\\x67\\x19\\xc7\\xf1\\xef\\x33\\x3b\\\n\\xbb\\xeb\\x35\\xbb\\x75\\x12\\xff\\x69\\x1d\\xd7\\x69\\x9b\\x3f\\x2a\\x20\\x1a\\\n\\x4a\\x02\\x08\\x68\\x2b\\xda\\x03\\x82\\x1c\\x28\\x6a\\xc5\\x81\\x5e\\x40\\x20\\\n\\x15\\x9a\\x43\\x7b\\x23\\x52\\x25\\x10\\x27\\x38\\xb4\\x17\\x44\\xb9\\x80\\x54\\\n\\x90\\xb8\\x00\\x07\\xd4\\x0a\\x0e\\xa5\\x42\\x82\\x53\\xa4\\x4a\\x25\\x42\\x49\\\n\\x09\\x56\\x9d\\x34\\x49\\x93\\x26\\x26\\xf1\\xee\\xda\\xbb\\xb6\\x77\\xbd\\xbb\\\n\\x33\\xef\\xc3\\xc1\\x4d\\x52\\xff\\x53\\xbc\\xb3\\x6b\\xbf\\x36\\xfb\\x7c\\x24\\\n\\xcb\\xd6\\x3b\\xef\\x3b\\xfb\\xce\\xfb\\x9b\\x79\\xdf\\x99\\x64\\x35\\x60\\x8c\\\n\\x31\\xc6\\x18\\x63\\x8c\\x31\\xc6\\x18\\x63\\x8c\\x31\\xbd\\x40\\x3a\\x69\\xfc\\\n\\xaf\\xc9\\xc9\\x87\\xc7\\x06\\x47\\x4e\\x49\\x20\\x91\\xaa\\xc6\\x02\\xb1\\x88\\\n\\xd4\\x05\\xe6\\x1c\\x32\\x2f\\x68\\x03\\xa8\\x00\\x75\\xd0\\x22\\x12\\x5c\\x17\\\n\\xd5\\x1b\\xaa\\x4c\\x8b\\x52\\x84\\xe0\\x8a\\x73\\x8b\\x97\\x87\\x87\\x87\\xe7\\\n\\xba\\x73\\x38\\xed\\x99\\x9e\\x9e\\x2e\\x04\\x41\\xdf\\x3e\\x70\\xe3\\x2a\\x0c\\\n\\x89\\x30\\xac\\x22\\x23\\xa8\\xbb\\x1b\\x64\\x08\\xc8\\x01\\x03\\x8a\\x64\\x03\\\n\\x34\\xaf\\x50\\x50\\xd5\\x9c\\x42\\x4a\\x44\\x52\\xea\\x34\\xfc\\xa0\\x58\\x3e\\\n\\x72\\xe4\\xc1\\xfd\\xa7\\x93\\xf6\\x21\\xec\\xe8\\x08\\x34\\x38\\x1e\\x04\\x12\\\n\\x00\\x19\\x91\\x5b\\x59\\xe6\\x15\\x86\\x05\\x5d\\x51\\x59\\x40\\x75\\xa9\\x54\\\n\\x40\\x05\\xc0\\x21\\x41\\x86\\xe2\\x4c\\xa5\\x2c\\x70\\x59\\xe1\\x7d\\x85\\x0b\\\n\\x28\\xa7\\x08\\xe5\\xed\\xa1\\x42\\xe1\\x9c\\x88\\xac\\xdc\\x51\\x7b\\x5d\\x54\\\n\\x95\\xe2\\xdc\\xdc\\x21\\x89\\xf4\\xf3\\x2a\\x1c\\x11\\xd8\\x2f\\x70\\x9f\\xc2\\\n\\x3e\\x60\\x8f\\xe2\\x6e\\xd7\\x5d\\x6a\\xc0\\xca\\xf3\\x52\\xd0\\x5b\\x47\\x23\\\n\\x22\\xb7\\xb6\\x4a\\x20\\xa0\\xee\\x38\\xf0\\x5c\\xd2\\xfe\\x25\\xbe\\x02\\xde\\\n\\x3a\\x77\\xee\\xae\\x6c\\x2c\\x57\\xc7\\xef\\x1e\\xce\\x27\\xdd\\xc7\\x9d\\x28\\\n\\x14\\x05\\x4e\\xa2\\xfc\\x2d\\x9d\\xe2\\xf7\\x03\\x03\\x03\\xe5\\x8d\\xb4\\xab\\\n\\x56\\xab\\x83\\xcd\\x48\\x9f\\x41\\xf8\\x8a\\xc2\\x97\\x04\\x86\\x36\\xab\\x8f\\\n\\x57\\xae\\x4f\\xcf\\x37\\x52\\x3a\\xf6\\x85\\x43\\x87\\xaa\\x49\\xda\\x07\\x49\\\n\\x3f\\xb8\\x2f\\x92\\x67\\x80\\x4d\\x1b\\x7c\\x80\\x0f\\x07\\xee\\x1b\\x08\\xbf\\\n\\x6c\\x39\\xae\\x15\\x67\\x66\\x5f\\x2d\\x95\\x4a\\xe3\\xeb\\xd5\\x2f\\x95\\x4a\\\n\\xe3\\xc5\\x99\\xd9\\xdf\\x34\\x63\\xbd\\x8a\\xf0\\x0a\\xf0\\xe4\\x66\\x0e\\xfe\\\n\\x87\\xf2\\x7d\\x91\\x7c\\x2b\\x69\\xe3\\xc4\\x01\\x20\\x3c\\x9b\\xb8\\x6d\\x32\\\n\\x59\\x90\\xef\\x69\\x10\\x9e\\x2d\\x97\\xab\\x8f\\xae\\xdc\\x78\\xa3\\x5c\\x7d\\\n\\x4c\\x83\\xf0\\x2c\\xc8\\x77\\x97\\xea\\x6e\\x21\\xe1\\xfb\\x49\\x9b\\x26\\x0a\\\n\\xe0\\xd4\\xc4\\xf9\\xa3\\x0a\\x47\\x93\\x7e\\x68\\x87\\x0a\\xb1\\xf0\\x87\\x95\\\n\\x85\\x82\\xfe\\x11\\x28\\x78\\xe8\\x0f\\x0a\\x47\\x4f\\x4d\\x9c\\x4f\\x34\\x1e\\\n\\xeb\\x2e\\xc2\\xa3\\x27\\xce\\xac\\xbb\\xf8\\xbd\\x39\\x19\\x71\\xec\\xc1\\xce\\\n\\xd6\\xef\\x4e\\x08\\x3a\\xf6\\xfa\\xdf\\x4f\\x2e\\xeb\\x9f\\x74\\x74\\x3f\\xd7\\\n\\xb9\\xbf\\x4e\\x46\\xff\\x1c\\x3d\\x71\\x66\\xdd\\xed\\x53\\x2f\\x1d\\x5e\\xb3\\\n\\x87\\x6d\\x5f\\x01\\xfd\\x19\\x78\\xfc\\x80\\xbf\\xc1\\xdf\\xae\\x9e\\x38\\x10\\\n\\xd2\\x9f\\x69\\xbf\\x5d\\xdb\\x01\\x3c\\xfe\\x40\\x48\\xce\\xc6\\x7f\\x95\\x5c\\\n\\x08\\x5f\\x7e\\xa0\\xfd\\x81\\x69\\x3b\\x80\\xaf\\x7d\\xdc\\x46\\x7f\\x3d\\xc7\\\n\\x12\\x8c\\x4d\\xdb\\x2d\\x0e\\x0e\\x26\\xbf\\x71\\xda\\x4e\\x62\\x07\\xbf\\xfe\\\n\\xb7\\xf0\\xc6\\x25\\x10\\x84\\x63\\xf7\\x2b\\xcf\\x7e\\x4a\\x49\\x75\\x70\\x78\\\n\\x49\\xc6\\xa6\\x67\\x4f\\xe7\\x5f\\xbd\\x23\\xfc\\xf6\\x3f\\xb7\\xd7\\xc5\\x57\\\n\\xcf\\x2e\\xfd\\xfd\\xdc\\xe1\\x8e\\x1e\\xbc\\xdb\\xf6\\xff\\x71\\x3a\\x27\\xf0\\\n\\x97\\x0b\\xab\\x6f\\x4a\\xfe\\xbc\\x46\\xd9\\x66\\xeb\\xd9\\x00\\xb6\\x8b\\x9e\\\n\\x0d\\xe0\\xeb\\xfb\\x57\\x4f\\x35\\x4f\\xae\\x51\\xb6\\xd9\\x7a\\x76\\x0d\\xf8\\\n\\xc1\\x43\\x8a\\x08\\xbc\\xf6\\xde\\xd2\\xb4\\xf3\\xf4\\x81\\xa5\\x45\\x78\\xab\\\n\\xf5\\x6c\\x00\\xa9\\x00\\x8e\\x1f\\x56\\x8e\\x6f\\xf1\\xa2\\xbb\\x52\\xcf\\x4e\\\n\\x41\\xdb\\x85\\x05\\xe0\\x99\\x05\\xe0\\x59\\xcf\\xae\\x01\\xdf\\x7e\\x53\\x98\\\n\\x28\\x2f\\xbf\\xef\\xff\\xc4\\x1e\\xe5\\x77\\x5f\\xb5\\x07\\xb1\\x9e\\x62\\x01\\\n\\x78\\x66\\x01\\x78\\x66\\x01\\x78\\x66\\x01\\x78\\x66\\x01\\x78\\x66\\x01\\x78\\\n\\x66\\x01\\x78\\x66\\x01\\x78\\x66\\x01\\x78\\x66\\x01\\x78\\x66\\x01\\x78\\x66\\\n\\x01\\x78\\x66\\x01\\x78\\x66\\x01\\x78\\x66\\x01\\x78\\x66\\x01\\x78\\x66\\x01\\\n\\x78\\x66\\x01\\x78\\x66\\x01\\x78\\x66\\x01\\x78\\xd6\\xb3\\xdf\\x8a\\x58\\xfa\\\n\\xf6\\x83\\xdf\\x6f\\xc5\\x81\\x5d\\x01\\xde\\x59\\x00\\x9e\\x59\\x00\\x9e\\x59\\\n\\x00\\x9e\\x59\\x00\\x9e\\x59\\x00\\x9e\\x59\\x00\\x9e\\x59\\x00\\x9e\\x59\\x00\\\n\\x9e\\x75\\xf4\\x24\\x5c\\x5b\\x6c\\xf0\\xd6\\x99\\x89\\x65\\x65\\x12\\x08\\xa9\\\n\\x20\\x20\\x15\\x08\\x12\\x04\\x84\\x41\\x40\\x10\\xa4\\x48\\x87\\x37\\x7f\\x42\\\n\\xd2\\xe9\\x90\\x74\\x18\\x92\\x4d\\x87\\x64\\x33\\x19\\x52\\x81\\x9f\\xf3\\x20\\\n\\x76\\x8e\\x46\\xb3\\x49\\xa3\\x15\\xd1\\x8a\\x22\\x5a\\x37\\x7f\\x47\\x31\\xad\\\n\\x28\\xc6\\xb9\\x98\\xc8\\x39\\xd4\\x39\\x62\\xa7\\xc4\\xce\\xa1\\x6e\\xf9\\xd3\\\n\\xf3\\x9e\\x81\\x02\\xb9\\xbe\\xe4\\xaf\\x27\\x4a\\x1c\\x40\\xec\\x1c\\xa5\\xd9\\\n\\x2a\\xce\\xb9\\x15\\x1b\\xa0\\xd5\\xe6\\xbe\\xd2\\x61\\x8a\\x4c\\x3a\\x4d\\x36\\\n\\x93\\x21\\x97\\xcd\\x90\\xef\\xef\\x23\\x9f\\xcb\\x75\\x74\\x60\\x1f\\x55\\x5f\\\n\\x6c\\x30\\x57\\xaf\\xb3\\x50\\x5b\\xa4\\xde\\x68\\xd2\\x68\\x36\\x69\\xb6\\x5a\\\n\\xb4\\xa2\\xb8\\xe3\\x7d\\x17\\x67\\xab\\xec\\x1d\\x19\\x4c\\x7c\\x12\\x25\\x0e\\\n\\xa0\\x5c\\x59\\x63\\xf0\\x13\\xba\\x79\\xc6\\x2d\\xd4\\x17\\x97\\x95\\xa7\\xc3\\\n\\x90\\xc2\\xc7\\xfa\\xd9\\x7d\\x57\\x9e\\xa1\\x5d\\x03\\xa4\\xc3\\xd4\\x86\\xf7\\\n\\x57\\x9c\\x99\\x65\\x66\\x6e\\x81\\xb9\\x85\\x1a\\xad\\x28\\xea\\x4a\\x3f\\xd7\\\n\\xe2\\x9c\\xa3\\x5c\\xa9\\x32\\xbc\\x7b\\x57\\xa2\\xf6\\x89\\x02\\xa8\\xd5\\x1b\\\n\\xd4\\xea\\x8d\\x44\\x1f\\xd8\\x8e\\x56\\x14\\x51\\xae\\x54\\x29\\x57\\xaa\\x5c\\\n\\xb8\\xfa\\x5f\\x46\\x76\\x0f\\xb0\\x6f\\x74\\x84\\x6c\\x3a\\xbd\\x66\\xfd\\x46\\\n\\xab\\xc5\\xe5\\xa9\\x1b\\xdc\\x98\\xa9\\xa0\\x5d\\x3a\\x39\\x36\\xa2\\x56\\x6f\\\n\\x50\\xeb\\x6b\\xd0\\x9f\\x6b\\xff\\x8a\\x6d\\x3b\\x80\\xd8\\x39\\x4a\\x95\\x44\\\n\\x2f\\x08\\xec\\x88\\x3a\\xc7\\xf5\\xd2\\x0c\\xc5\\x99\\x0a\\x9f\\x3c\\x78\\xdf\\\n\\xaa\\xed\\xd5\\xf9\\x05\\xce\\xbe\\xf7\\x3e\\xf1\\x16\\x0e\\xfc\\x47\\x95\\x2a\\\n\\x55\\xb2\\xd9\\xc1\\xb6\\xdb\\xb5\\x3d\\x71\\x75\\x73\\xea\\x49\\x22\\x76\\x8e\\\n\\xc9\\x4b\\x1f\\xac\\x2a\\x7f\\xf7\\xd2\\x15\\x6f\\x83\\x0f\\xb7\\xa7\\xa2\\x76\\\n\\xb5\\x7d\\x05\\x7c\\xe7\\xb5\\x0c\\x90\\xe0\\xdd\\x5c\\x1d\\xca\\xff\\xe3\\x79\\\n\\x24\\xde\\xd8\\xb4\\xa7\\xa9\\x3e\\xe6\\x9f\\xf8\\xc5\\x26\\xf7\\xa8\\x3b\\x76\\\n\\xcc\\x73\\x80\\xcb\\x8f\\xb6\\x51\\x77\\xef\\x26\\xf6\\xa4\\xbb\\x76\\x4c\\x00\\\n\\xd1\\x3d\\x5f\\xdc\\x78\\xdd\\xd1\\x8d\\xd7\\xf5\\x6d\\xc7\\x04\\xd0\\x1c\\x7b\\\n\\x0c\\x97\\xbf\\xf7\\x8e\\xf5\\x5c\\x61\\x9c\\xe6\\xde\\x47\\xb6\\xa0\\x47\\xdd\\\n\\xb1\\x63\\x02\\x20\\x08\\xa9\\x7d\\xe6\\x05\\x5c\\x61\\xdd\\x37\\x17\\xe3\\x0a\\\n\\xfb\\xa8\\x3d\\xfc\\x02\\x04\\x3b\\xe7\\xbf\\xba\\x77\\x4e\\x4f\\x01\\xcd\\xee\\\n\\x62\\xe1\\x73\\x2f\\x92\\xbe\\x76\\x92\\xf4\\xb5\\x93\\xa4\\xe6\\x97\\xee\\x86\\\n\\xe2\\xc2\\xbd\\xb4\\x46\\x1f\\x25\\x1a\\x7b\\x04\\x95\\x8d\\x3d\\xac\\x6d\\x17\\\n\\x9e\\xdf\\x37\\x7b\\x67\\xa3\\x27\\x4e\\xff\\x0c\\xe4\\xc5\\x64\\xad\\xe5\\xa7\\\n\\x53\\x2f\\x3d\\xf4\\xa3\\xee\\xf6\\xa8\\xbb\\xb6\\xfd\\x14\\x34\\x75\\xf1\\xdd\\\n\\x1f\\x83\\x26\\xb9\\xa7\\xfc\\xf9\\xd4\\xc5\\x89\\x9f\\x74\\xbd\\x43\\x5d\\xb6\\\n\\xed\\xaf\\x80\\x9b\\xee\\x39\\x71\\xfa\\x9b\\x82\\xbc\\x0c\\xdc\\x7f\\x87\\xaa\\\n\\x17\\x51\\xfd\\xe1\\xd4\\xcb\\x9f\\xfe\\xd3\\x16\\x74\\xab\\x63\\x3b\\x26\\x00\\\n\\x80\\x83\\xcf\\x9f\\xcb\\xd6\\xfa\\x6b\\x4f\\xa9\\x0b\\x8e\\x11\\xe8\\x67\\x51\\\n\\xf6\\x03\\x20\\x5c\\x10\\xe5\\x6d\\x54\\xde\\xe8\\x5f\\xec\\x7b\\xfd\\xfc\\x2b\\\n\\x87\\x36\\xff\\x1f\\xaa\\x8c\\x31\\xc6\\x18\\x63\\x8c\\x31\\xc6\\x18\\x63\\x8c\\\n\\x31\\xc6\\xb4\\xe1\\x7f\\x29\\xb2\\xf8\\x69\\x95\\xee\\x84\\xee\\x00\\x00\\x00\\\n\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x05\\xe2\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x50\\x00\\x00\\x00\\x50\\x08\\x06\\x00\\x00\\x00\\x8e\\x11\\xf2\\xad\\\n\\x00\\x00\\x00\\x04\\x73\\x42\\x49\\x54\\x08\\x08\\x08\\x08\\x7c\\x08\\x64\\x88\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x16\\x25\\x00\\x00\\x16\\x25\\x01\\x49\\x52\\\n\\x24\\xf0\\x00\\x00\\x00\\x19\\x74\\x45\\x58\\x74\\x53\\x6f\\x66\\x74\\x77\\x61\\\n\\x72\\x65\\x00\\x77\\x77\\x77\\x2e\\x69\\x6e\\x6b\\x73\\x63\\x61\\x70\\x65\\x2e\\\n\\x6f\\x72\\x67\\x9b\\xee\\x3c\\x1a\\x00\\x00\\x05\\x42\\x49\\x44\\x41\\x54\\x78\\\n\\x5e\\xed\\x9c\\x5f\\x68\\x5b\\x55\\x1c\\xc7\\xbf\\xa9\\xac\\x6b\\x57\\xfb\\xb2\\\n\\xc1\\x74\\xba\\x0d\\x91\\xdc\\x3c\\x74\\x11\\x5f\\x06\\xa1\\x37\\x4e\\x91\\x89\\\n\\x35\\xab\\x0f\\xed\\x4b\\xd0\\x07\\x65\\xa0\\xa4\\xf8\\x62\\xf2\\xb0\\x0a\\x82\\\n\\x8f\\x05\\xc1\\xee\\xa1\\x01\\x41\\x5a\\x26\\x0c\\xfb\\x50\\x09\\xc2\\x8a\\x9a\\\n\\x04\\xc4\\x3d\\x8d\\x5c\\x37\\x26\\x65\\x4a\\x17\\xa1\\xb9\\xc2\\xdc\\x5f\\x57\\\n\\x28\\x9b\\xb6\\x25\\x2b\\x73\\x9b\\xe7\\xae\\xe7\\x26\\xe7\\x34\\x37\\xff\\xee\\\n\\x39\\x31\\xb7\\xe6\\x7c\\xe0\\xd0\\x73\\xcf\\x3d\\x37\\xb7\\xf9\\xf4\\xfc\\xce\\\n\\xf9\\xdd\\xd3\\xb4\\xbe\\x47\\x04\\x28\\x5c\\xd3\\x45\\xbf\\x2a\\x5c\\xa2\\x04\\\n\\x0a\\xa2\\x04\\x0a\\x52\\x31\\x07\\x9e\\xfc\\xe8\\x2b\\x5a\\x93\\xc3\\x7a\\xd7\\\n\\x7d\\xdc\\xe9\\xbe\\x87\\xe2\\x3f\\xf7\\x69\\x4b\\x7b\\xe8\\xdd\\xd1\\x8d\\xdd\\\n\\x1b\\xdd\\x18\\x1a\\x0a\\x21\\xf4\\xea\\x0b\\xb4\\x55\\x1c\\x47\\x81\\xa3\\xc7\\\n\\x47\\xe9\\x51\\xe3\\x2c\\xdf\\x58\\xa3\\x35\\x9e\\x6f\\xce\\x7f\\x8f\\xd1\\x37\\\n\\x5f\\xc1\\xc1\\x03\\xfb\\x68\\x4b\\x7b\\xb8\\x72\\xf5\\x26\\xbe\\xcb\\x9e\\x83\\\n\\xe6\\xdb\\x83\\x17\\x07\\x35\\x22\\x31\\x48\\xcf\\x88\\xd1\\xf2\\x10\\x5e\\x2b\\\n\\xae\\xb7\\x5d\\x9e\\xc5\\x73\\x07\\x9f\\xc1\\xdf\\xeb\\x6b\\x78\\xe9\\x8d\\x23\\\n\\xf8\\xf5\\xc2\\xef\\xc8\\xfd\\x70\\x89\\x9e\\x11\\xa3\\xe3\\xe6\\xc0\\x9d\\x3d\\\n\\x3b\\x11\\x7e\\x3d\\x8c\\xfc\\xc2\\x1f\\x52\\x24\\x76\\xe4\\x22\\xc2\\x4b\\xfc\\\n\\x85\\xb6\\xba\\xa3\\x63\\x57\\xe1\\xb2\\xc4\\x2b\\x42\\x12\\xb7\\xad\\xc0\\x2f\\\n\\x4e\\xa7\\x1c\\x4b\\x33\\xc8\\x90\\xd8\\xb1\\x23\\xd0\\x46\\x54\\x62\\xc7\\x0b\\\n\\xb4\\x10\\x91\\xa8\\x04\\x52\\xdc\\x4a\\x54\\x02\\x19\\xdc\\x48\\x54\\x02\\xb7\\\n\\xd0\\xac\\x44\\x25\\xd0\\x81\\x66\\x24\\x2a\\x81\\x55\\xb0\\x25\\xfe\\x76\\xa9\\\n\\x76\\xb2\\xad\\x04\\xd6\\xc0\\x92\\xa8\\xbf\\xa6\\xd7\\x94\\xa8\\x04\\xd6\\xa1\\\n\\x9e\\x44\\x25\\xb0\\x01\\x2c\\x89\\x83\\x47\\x07\\xf1\\xd3\\x8f\\x4a\\xa0\\x6b\\\n\\x7a\\x7a\\x7b\\x68\\x8d\\x67\\xdb\\x0a\\xfc\\xe0\\x78\\xd4\\xb1\\xfc\\xd7\\xa8\\\n\\x11\\x28\\x88\\x12\\x28\\x88\\x12\\x28\\x88\\x34\\x81\\x5d\\x4f\\x38\\xbf\\x54\\\n\\x5f\\xef\\x2e\\x5c\\xbb\\x71\\x9b\\x1e\\xb5\\x8f\\xab\\xd7\\xff\\x44\\x7f\\xdf\\\n\\x93\\xf4\\x48\\x1e\\xd2\\x7e\\x2b\\xb7\\x71\\xef\\x01\\x56\\xef\\x6e\\xe0\\xe1\\\n\\x83\\x87\\xb4\\x65\\x93\\x6b\\x2b\\x37\\x71\\xbe\\xf0\\x33\\xd6\\x8b\\x45\\xda\\\n\\xd2\\x1e\\xfa\\x77\\xf5\\x61\\x28\\x14\\xc6\\xf3\\xcf\\x1e\\xa0\\x2d\\xcd\\x73\\\n\\xe6\\xf4\\x19\\x9c\\xf8\\xec\\x5d\\x7a\\xb4\\x89\\x34\\x81\\x9d\\x80\\x93\\x40\\\n\\x35\\x07\\x0a\\xa2\\x04\\x0a\\xa2\\x04\\x0a\\xa2\\x04\\x0a\\xa2\\x04\\x0a\\xa2\\\n\\x04\\x0a\\xa2\\x04\\x0a\\xa2\\x04\\x0a\\xa2\\x04\\x0a\\xd2\\xf4\\x93\\xc8\\xa9\\\n\\x4c\\x73\\x9f\\x3f\\xd9\\x6e\\xbc\\x7f\\xac\\xfa\\x9e\\xa2\\x94\\x47\\x39\\x4b\\\n\\xe0\\xa7\\x27\\xde\\xa3\\x47\\xff\\x2f\\x3e\\x3e\\xf9\\x65\\xd3\\x02\\x55\\x08\\\n\\x0b\\xa2\\x04\\x0a\\xe2\\x59\\x81\\xd9\\x31\\x1f\\x7c\\xbe\\xcd\\x12\\x4e\\x9a\\\n\\xb4\\xd5\\x1d\\x66\\x32\\x5c\\x7a\\x2d\\xdf\\x58\\x96\\xb6\\xca\\x41\\x92\\xc0\\\n\\x2c\\x92\\x61\\xf6\\x0d\\x57\\xff\\x26\\xb3\\xec\\x9b\\x09\\x27\\xc9\\x95\\x0e\\\n\\x98\\x49\\x4c\\xcc\\xd0\\x3a\\x74\\x44\\x87\\xfd\\xb4\\xee\\x0e\\xff\\x70\\x94\\\n\\xbc\\x0a\\x65\\x66\\x02\\x82\\x3f\\x0f\\x0e\\x69\\x23\\x30\\x6f\\xd0\\x0a\\xc1\\\n\\xc8\\xd3\\x8a\\x13\\x0d\\x74\\x34\\xd3\\x29\\x94\\x7a\\xe9\\x51\\x08\\xfa\\xb3\\\n\\x0c\\x22\\x5a\\x32\\x68\\x20\\x95\\x96\\x67\\xd0\\x83\\x21\\x9c\\xc5\\x64\\xa2\\\n\\x2c\\x59\\x8f\\x0e\\x43\\xd4\\x1f\\x31\\x88\\xe1\\xb2\\x41\\x18\\x89\\x49\\xe7\\\n\\x91\\xef\\x02\\xef\\x09\\xcc\\xce\\xa3\\x14\\xbd\\x12\\xc2\\xd7\\x86\\x0b\\x63\\\n\\x72\\x87\\x79\\x49\\x06\\x3d\\x27\\xd0\\x5c\\x5a\\xa4\\x35\\x82\\x8c\\xf0\\xb5\\\n\\xe1\\xc2\\x18\\x58\\x5c\\x92\\x13\\xc6\\x1e\\x13\\x68\\x22\\x9d\\x62\\xe6\\xc8\\\n\\x60\\xc0\\x31\\x7c\\xcd\\xe4\\x18\\xc2\\xf6\\x42\\x54\\xa3\\xf0\\x0b\\xae\\x1f\\\n\\x01\\xe6\\xaf\\xbb\\x8c\\x54\\x9a\\xdc\\x4d\\x9c\\xd6\\x08\\x2c\\x02\\xe7\\x6e\\\n\\x3b\\x97\\xcb\\x5b\\x7e\\x39\\x77\\x99\\x3b\\x5f\\xc0\\x59\\xd6\\xdf\\x7e\\x8d\\\n\\x39\\x47\\xcb\\xdc\\x18\\xb4\\xc4\\x4c\\x79\\x91\\xa9\\xc1\\xad\\xbb\\xfc\\xb5\\\n\\x7f\\xed\\x67\\x86\\x20\\x59\\xc0\\x0a\\xb4\\x2a\\x42\\x6b\\x04\\xce\\x1e\\xc3\\\n\\xcb\\x4f\\xfb\\x1c\\xcb\\xf8\\x2c\\xed\\x43\\x39\\xf4\\x14\\x70\\xc4\\x2e\\xab\\\n\\x4b\\x58\\xa1\\xed\\x16\\xfa\\x61\\x7f\\xf9\\xdc\\xe3\\x62\\x62\\xe1\\x73\\x6b\\\n\\x86\\xd4\\x31\\x95\\x29\\xc0\\x7a\\x0a\\xcd\\xc4\\x36\\xfb\\x02\\x31\\x64\\xc8\\\n\\xb1\\xd5\\x66\\x97\\x6f\\xdf\\x66\\xaf\\x05\\xde\\x3a\\xcc\\xfe\\x81\\xe1\\x22\\\n\\x64\\x44\\xb1\\xb7\\x42\\xb8\\x90\\x67\\x46\\x96\\x8e\\x01\\x8d\\x56\\x6d\\xb2\\\n\\x93\\x48\\x19\\x3a\\x62\\x99\\x1c\\xe2\\x11\\x2b\\xb8\\x4d\\x94\\xa6\\x4c\\x7d\\\n\\x00\\x5b\\xbb\\x57\\xa0\\x0d\\x30\\x0b\\x89\\x81\\xbc\\x84\\x21\\xe8\\xb9\\x45\\\n\\xa4\\x26\\x91\\x69\\xe4\\x1e\\xe5\\x30\\x1d\\xa1\\xc7\\x1e\\xa0\\x35\\x02\\x63\\\n\\x19\\x2e\\x94\\xd8\\x52\\x0e\\x39\\x19\\x14\\xca\\x79\\x79\\x95\\x05\\x87\\xc3\\\n\\x1f\\x00\\x17\\xc4\\x12\\x62\\x78\\x7b\\x8d\\x40\\x51\\xcc\\x25\\x32\\xf3\\xc9\\\n\\xa5\\xb3\\x04\\x6e\\x21\\x18\\x10\\x4f\\x32\\x3b\\x5a\\xa0\\x0c\\x5a\\x23\\xd0\\\n\\x6d\\x1e\\xb8\\x7b\\x80\\x99\\xa3\\x0c\\x9c\\xbd\\xc8\\x9c\\xab\\x52\\x6e\\xd1\\\n\\xde\\xa5\\x7b\\x92\\x3c\\xd1\\xe7\\x0b\\xe3\\xc3\\x0b\\x7c\\xbf\\xc7\\xe5\\x62\\\n\\x9d\\x55\\xde\\x05\\xad\\x11\\xd8\\xcb\\xe7\\x5f\\x6c\\x39\\x44\\xce\\xb1\\x70\\\n\\x79\\x60\\x28\\xc0\\xa4\\x19\\xc0\\xca\\xb2\\xc9\\x5d\\x5b\\x59\\x34\\x1c\\xb5\\\n\\x2f\\x98\\x9d\\xc0\\xc2\\xaa\\x95\\x27\\x2e\\x42\\xd7\\x83\\x88\\x84\\x2a\\xfb\\\n\\xef\\x5b\\x66\\x67\\xc0\\x20\\x24\\x44\\xb0\\xd7\\x42\\x58\\xc3\\x00\\xf7\\xb0\\\n\\x50\\x2f\\x51\\x63\\x1f\\xcf\\x0c\\x24\\x34\\x0d\\x09\\xc3\\x80\\x11\\x1c\\x81\\\n\\x53\\xa6\\x53\\x60\\xb7\\xd2\\x1a\\xc9\\x1b\\x1b\\x40\\x9a\\x40\\xf6\\x8d\\x93\\\n\\xef\\xad\\x3a\\x35\\x3b\\xf2\\xdb\\x4e\\x98\\x99\\xaf\\xbb\\xed\\x14\\x99\\x2e\\\n\\x60\\x8a\\xb9\\x04\\xfa\\x14\\x0a\\x8e\\x89\\x22\\x93\\x74\\x13\\xe4\\x6c\\x93\\\n\\x49\\x13\\x18\\x41\\x3c\\x57\\xce\\xf5\\x72\\xf1\\xea\\x99\\x6e\\x24\\x9e\\x2b\\\n\\xe7\\x85\\xb9\\x78\\xc5\\x48\\xf1\\xb3\\x4f\\xfc\\x0d\\x3d\\x6e\\xf9\\xb9\\x7b\\\n\\x5b\\xaf\\xe9\\x28\\xc6\\x4c\\x93\\xa7\\x18\\x5a\\x27\\xc8\\x58\\x81\\x2d\\x3c\\\n\\x16\\xc2\\x84\\xc8\\x08\\x79\\xaa\\xb5\\x91\\xb7\\x7b\\xcc\\xed\\x72\\x93\\x3b\\\n\\x8c\\x48\\x7a\\x9a\\xf1\\x9e\\x40\\x32\\x26\\xc7\\x99\\x98\\x94\\xb3\\xed\\xc4\\\n\\x6f\\x93\\xe9\\x53\\xe3\\x8e\\x73\\xa4\\x1b\\x3c\\x28\\x90\\x04\\x25\\xbb\\x7b\\\n\\x6c\\xa4\\x20\\x3c\\x08\\xb9\\xf0\\x95\\xb7\\xcb\\x6d\\x21\\x5d\\x60\\x45\\xee\\\n\\xe5\\xa6\\xf4\\xc7\\x31\\xfa\\x8e\\xad\\xd0\\xc0\\xa9\\x39\\xd3\\xb9\\x5f\\x83\\\n\\xe5\\xeb\\xb9\\x72\\xf8\\xea\\xb1\\x4f\\x10\\x97\\xe7\\x4f\\x7d\\xb4\\x83\\x45\\\n\\x7d\\xb4\\xa3\\x0d\\x28\\x81\\x82\\x28\\x81\\x82\\x28\\x81\\x82\\x28\\x81\\x82\\\n\\x28\\x81\\x82\\x28\\x81\\x82\\x28\\x81\\x82\\x38\\x26\\xd2\\xb5\\x58\\xd9\\xdb\\\n\\xde\\x7f\\x67\\xdc\\x6a\\xf6\\x2c\\xef\\xa0\\x35\\x67\\xea\\x7e\\xc8\\x5c\\xd1\\\n\\x1c\\x2a\\x84\\x05\\x51\\x02\\x05\\x51\\x02\\x85\\x00\\xfe\\x05\\x27\\x87\\x95\\\n\\x77\\xa5\\x58\\xd9\\x13\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\\n\\x82\\\n\\x00\\x00\\x0f\\xe2\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x64\\x00\\x00\\x00\\x64\\x08\\x06\\x00\\x00\\x00\\x70\\xe2\\x95\\x54\\\n\\x00\\x00\\x00\\x04\\x73\\x42\\x49\\x54\\x08\\x08\\x08\\x08\\x7c\\x08\\x64\\x88\\\n\\x00\\x00\\x00\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x05\\x7e\\x00\\x00\\x05\\x7e\\\n\\x01\\x3e\\x02\\xc3\\x21\\x00\\x00\\x00\\x19\\x74\\x45\\x58\\x74\\x53\\x6f\\x66\\\n\\x74\\x77\\x61\\x72\\x65\\x00\\x77\\x77\\x77\\x2e\\x69\\x6e\\x6b\\x73\\x63\\x61\\\n\\x70\\x65\\x2e\\x6f\\x72\\x67\\x9b\\xee\\x3c\\x1a\\x00\\x00\\x0f\\x5f\\x49\\x44\\\n\\x41\\x54\\x78\\x9c\\xed\\x5d\\x6b\\x90\\x1c\\xd5\\x75\\xfe\\x4e\\xf7\\x2c\\xbb\\\n\\x42\\x91\\xd6\\x60\\x4b\\x68\\x25\\x99\\xb2\\x14\\x09\\x81\\x85\\x24\\xd4\\xb7\\\n\\x67\\x94\\x95\\x0a\\x33\\x60\\x19\\x8c\\x5d\\x45\\xc0\\xb0\\x12\\x09\\x38\\x7e\\\n\\x54\\xc0\\x01\\xe4\\x72\\x12\\x5b\\x09\\x46\\xa6\\x62\\xc7\\xc2\\x36\\x2f\\x93\\\n\\x50\\xb6\\x21\\x26\\xb1\\x1d\\x12\\xcc\\xd3\\x16\\x20\\x63\\x8c\\x22\\x23\\x41\\\n\\x50\\x36\\xd2\\xf4\\xed\\x51\\x64\\x59\\x46\\x2f\\xcb\\x4e\\xcc\\x8e\\x8a\\x87\\\n\\x60\\xbd\\x0b\\x2b\\x76\\xa6\\xfb\\xe4\\x47\\xcf\\x8a\\xee\\xbb\\x3d\\xda\\x99\\\n\\x9d\\xbe\\xb3\\xb3\\xaa\\xfd\\xaa\\xf6\\x47\\x9f\\x7b\\xfb\\x9e\\xd3\\xfb\\x75\\\n\\xdf\\xd7\\x39\\xf7\\x0c\\x30\\x81\\xa6\\x02\\x8d\\xb5\\x01\\xf5\\xc2\\xb6\\xed\\\n\\xcb\\x99\\xf9\\x1e\\x00\\x1e\\x11\\xad\\x71\\x1c\\xe7\\x47\\x63\\x6d\\x53\\x3d\\\n\\x30\\xc6\\xda\\x80\\x3a\\x41\\xcc\\xfc\\x5d\\x00\\xd3\\x00\\xcc\\x28\\x13\\x33\\\n\\xae\\x31\\xae\\xbf\\x10\\x21\\xc4\\xc9\\x00\\xde\\x54\\xc4\\x93\\xa5\\x94\\x6f\\\n\\x8d\\x85\\x3d\\x49\\x60\\xbc\\x7f\\x21\\x27\\x1c\\x26\\x08\\x69\\x32\\x4c\\x10\\\n\\xd2\\x64\\x98\\x20\\xa4\\xc9\\x30\\x41\\x48\\x93\\x61\\x82\\x90\\x26\\xc3\\x04\\\n\\x21\\x4d\\x86\\x71\\x4d\\xc8\\xdc\\xb9\\x73\\xdf\\x46\\x74\\x1d\\xd2\\x5f\\x96\\\n\\x8d\\x5b\\x98\\x63\\x6d\\x40\\x3d\\xd8\\xb3\\x67\\x0f\\xcf\\x9a\\x35\\xeb\\x5d\\\n\\x00\\x56\\x94\\x45\\x77\\x6d\\xde\\xbc\\xf9\\x3f\\xc6\\xd2\\xa6\\x7a\\x91\\xd8\\\n\\x4a\\x7d\\xc9\\x92\\x25\\xb3\\x4c\\xd3\\xbc\\x94\\x88\\x1c\\x29\\xe5\\xf6\\xa4\\\n\\xda\\xad\\x06\\xe9\\x74\\x7a\\x21\\x00\\xe4\\x72\\xb9\\x5f\\x36\\x52\\xaf\\x6d\\\n\\xdb\\x59\\x00\\x4b\\x0d\\xc3\\x78\\x7c\\xc7\\x8e\\x1d\\x87\\x92\\x68\\x33\\x11\\\n\\x42\\x56\\xac\\x58\\x31\\xe5\\xe8\\xd1\\xa3\\x7b\\x00\\xcc\\x06\\xc0\\x00\\xd6\\\n\\x4a\\x29\\xef\\x4c\\xa2\\xed\\x66\\x85\\x10\\xe2\\x0b\\x00\\x6e\\x43\\xf0\\x3f\\\n\\x3c\\x02\\xe0\\x6c\\x29\\x65\\xa1\\xde\\x76\\x13\\x19\\x43\\x06\\x06\\x06\\x56\\\n\\x22\\x20\\x03\\x08\\x0c\\xbc\\xa3\\x6c\\xf0\\x09\\x09\\xcb\\xb2\\xd6\\x02\\xb8\\\n\\x1d\\xef\\xbc\\xd0\\xa7\\x12\\xd1\\x79\\x49\\xb4\\x9d\\x08\\x21\\x44\\xb4\\x0b\\\n\\x80\\x3a\\x98\\xde\\x7e\\x22\\x92\\x62\\x59\\xd6\\x5a\\x22\\xba\\x4d\\x11\\x0f\\\n\\x18\\x86\\x91\\x48\\x37\\x9d\\xd8\\x18\\x62\\xdb\\xf6\\x25\\xcc\\xfc\\x28\\x80\\\n\\x93\\x94\\xa2\\xb5\\x52\\xca\\x3b\\x92\\xd2\\x93\\xc9\\x64\\xde\\x5d\\x2c\\x16\\\n\\x17\\x9a\\xa6\\x79\\x16\\x33\\xbf\\x0f\\xc0\\x24\\x22\\x9a\\x04\\x00\\xcc\\x3c\\\n\\x00\\xe0\\x2d\\x22\\xfa\\xad\\xef\\xfb\\x7b\\x5a\\x5b\\x5b\\x7f\\xd9\\xdd\\xdd\\\n\\x7d\\x24\\x29\\xdd\\x15\\xc8\\x18\\x64\\xe6\\x2b\\x5c\\xd7\\xdd\\x98\\x84\\x8e\\\n\\x44\\xb7\\xdf\\x75\\x90\\x22\\x84\\x38\\x99\\x88\\xfe\\x98\\x99\\x2f\\x00\\xf0\\\n\\x01\\x00\\x67\\xd4\\xd8\\xc4\\x5e\\x00\\xcf\\x13\\xd1\\xb3\\x2d\\x2d\\x2d\\x4f\\\n\\x74\\x77\\x77\\x0f\\x8c\\xc6\\x8e\\x46\\x90\\x01\\x68\\xf0\\x87\\x24\\x45\\xca\\\n\\xd2\\xa5\\x4b\\x97\\x98\\xa6\\x79\\x3d\\x33\\xaf\\x06\\xd0\\x9e\\x90\\x79\\xbd\\\n\\xcc\\xfc\\x10\\x11\\x7d\\x5b\\x4a\\xf9\\x8b\\x6a\\x6f\\x6a\\x14\\x19\\x80\\x26\\\n\\x07\\x55\\x25\\x52\\x98\\xf9\\x4a\\xd7\\x75\\x1f\\x3e\\xde\\xbd\\x42\\x88\\x65\\\n\\x00\\xbe\\x04\\xe0\\xa3\\xba\\xec\\x0b\\x4c\\xe1\\x8d\\xa6\\x69\\xae\\xcf\\xe5\\\n\\x72\\xb9\\xe3\\x55\\xb4\\x6d\\xfb\\x4f\\x98\\xf9\\x87\\x8a\\x58\\x0b\\x19\\x80\\\n\\x46\\x8f\\x61\\x05\\x52\\x1e\\x90\\x52\\x5e\\x1d\\x57\\x5f\\x08\\xd1\\xc1\\xcc\\\n\\xb7\\x12\\xd1\\xd5\\x55\\xd8\\xf5\\x3b\\x00\\xbf\\x02\\xf0\\x22\\x33\\xff\\x9e\\\n\\x88\\xfa\\x00\\x80\\x99\\xa7\\x10\\xd1\\x54\\x00\\x67\\x02\\x78\\x3f\\x80\\x59\\\n\\x23\\xb4\\xc3\\x00\\xee\\x37\\x0c\\xe3\\xc6\\x5c\\x2e\\x77\\x38\\xae\\x82\\x65\\\n\\x59\\x0f\\x12\\xd1\\x95\\x21\\x91\\x36\\x32\\x00\\xcd\\x2e\\xdc\\x18\\x52\\x6e\\\n\\x90\\x52\\x7e\\x47\\xad\\x67\\x59\\xd6\\xd5\\x44\\xf4\\x6d\\x00\\x53\\x2b\\x34\\\n\\xf5\\x3a\\x80\\x07\\x99\\x79\\xb3\\x69\\x9a\\xdd\\x95\\xfe\\x79\\x2a\\xd2\\xe9\\\n\\xf4\\x0c\\xcf\\xf3\\x96\\x13\\xd1\\x87\\x00\\x5c\\x09\\xe0\\x5d\\x15\\xaa\\xf6\\\n\\x12\\xd1\\x75\\x8e\\xe3\\x3c\\xa8\\x16\\x08\\x21\\x3e\\x0b\\xe0\\xee\\xf2\\xa5\\\n\\x56\\x32\\x80\\x06\\xf8\\xd4\\xd3\\xe9\\xf4\\x72\\xdf\\xf7\\x2f\\x21\\xa2\\x7d\\\n\\x8e\\xe3\\x7c\\x1f\\xc1\\x5b\\x09\\x00\\xc8\\x66\\xb3\\x6d\\x7d\\x7d\\x7d\\x77\\\n\\x03\\xb8\\xa6\\xc2\\xed\\x3b\\x99\\xf9\\x8e\\xa9\\x53\\xa7\\xfe\\x68\\xeb\\xd6\\\n\\xad\\x47\\xeb\\xb1\\x23\\x9b\\xcd\\xb6\\xf5\\xf7\\xf7\\x77\\x31\\xf3\\xe7\\x01\\\n\\x2c\\xa9\\x50\\xed\\xde\\xde\\xde\\xde\\xbf\\x3c\\x70\\xe0\\x40\\x78\\x0a\\x6f\\\n\\xd8\\xb6\\xfd\\x29\\x66\\x9e\\xef\\xfb\\xfe\\x13\\xf9\\x7c\\xbe\\xbb\\x1e\\x3b\\\n\\x46\\xc2\\x98\\x05\\x39\\x08\\x21\\xda\\x89\\xe8\\x49\\x66\\xfe\\x40\\x4c\\xf1\\\n\\x5e\\x22\\xfa\\x2b\\xc7\\x71\\x9e\\xd6\\xa0\\x9a\\x84\\x10\\x1f\\x01\\x70\\x17\\\n\\x80\\xf9\\x31\\xe5\\x5b\\x52\\xa9\\xd4\\xa5\\xdb\\xb7\\x6f\\xff\\xbd\\x06\\xdd\\\n\\x23\\x62\\x4c\\x36\\x17\\x17\\x2f\\x5e\\x3c\\xdd\\x34\\xcd\\xcd\\x00\\xfe\\x48\\\n\\x29\\x2a\\x01\\x58\\xdf\\xdb\\xdb\\x7b\\xd5\\xee\\xdd\\xbb\\x5f\\xd4\\xa5\\xbf\\\n\\x50\\x28\\xec\\x5f\\xb0\\x60\\xc1\\x7d\\xc5\\x62\\xd1\\x00\\xb0\\x1c\\xd1\\x05\\\n\\xf2\\x1c\\xdf\\xf7\\x2f\\x9a\\x31\\x63\\xc6\\x86\\xc3\\x87\\x0f\\x37\\x3c\\x7a\\\n\\xa5\\xe1\\x5f\\x48\\x67\\x67\\xe7\\xa9\\x83\\x83\\x83\\xcf\\x03\\x58\\xa8\\x14\\\n\\x1d\\x64\\xe6\\xd5\\xae\\xeb\\xca\\x46\\xda\\x93\\x4e\\xa7\\xd3\\xbe\\xef\\x3f\\\n\\x04\\x60\\xae\\x52\\xb4\\xfb\\xa4\\x93\\x4e\\x3a\\x2f\\xc9\\x85\\x65\\x35\\x68\\\n\\xa8\\x3f\\x24\\x9b\\xcd\\xb6\\x15\\x8b\\xc5\\x0d\\x50\\xc8\\x60\\xe6\\x5c\\xb1\\\n\\x58\\x5c\\xde\\x68\\x32\\x00\\x20\\x97\\xcb\\xe5\\x0c\\xc3\\x58\\x01\\xc0\\x55\\\n\\x8a\\xce\\x1e\\x1c\\x1c\\x7c\\x6c\\xde\\xbc\\x79\\xad\\x8d\\xb4\\xa7\\xa1\\x84\\\n\\xf4\\xf5\\xf5\\xdd\\x19\\x33\\x66\\x6c\\x2a\\x95\\x4a\\xe7\\xef\\xda\\xb5\\xeb\\\n\\xe5\\x46\\xda\\x12\\x46\\x2e\\x97\\x3b\\x7c\\xf4\\xe8\\xd1\\xf3\\x98\\x79\\xb3\\\n\\x52\\x74\\x7e\\x7b\\x7b\\xfb\\xed\\x8d\\xb4\\xa5\\x61\\x5d\\x96\\x10\\xa2\\x0b\\\n\\xc0\\x23\\x8a\\xf8\\xbf\\x8b\\xc5\\xe2\\xca\\x5d\\xbb\\x76\\xa9\\xd1\\x87\\x63\\\n\\x82\\x85\\x0b\\x17\\xfe\\x41\\x6b\\x6b\\xeb\\xb3\\x44\\x94\\x0e\\x89\\xb9\\x3c\\\n\\xd5\\xfd\\x71\\x23\\x6c\\x68\\x08\\x21\\x4b\\x97\\x2e\\x9d\\x66\\x18\\xc6\\x8b\\\n\\x00\\x4e\\x0d\\x89\\xff\\xd7\\x34\\x4d\\x6b\\xc7\\x8e\\x1d\\xaf\\x35\\xc2\\x86\\\n\\x6a\\x51\\xb6\\xd5\\xc5\\x3b\\xee\\x04\\x00\\x78\\xd5\\x34\\xcd\\x33\\x1b\\x61\\\n\\x6b\\x4a\\xb7\\x02\\x00\\x30\\x0c\\xe3\\x2e\\x44\\xc9\\x18\\xf4\\x7d\\xff\\x72\\\n\\x29\\x65\\xdc\\x03\\xbe\\x1f\\xc0\\x3f\\x56\\x68\\xea\\x05\\x00\\x5f\\xa9\\x51\\\n\\x7d\\x17\\x80\\x6b\\x2b\\x94\\x7d\\x0e\\xc0\\x9e\\xb0\\x20\\x9f\\xcf\\xbf\\x52\\\n\\x8e\\xa8\\x7f\\x01\\x40\\x4b\\x59\\xfc\\x1e\\xcf\\xf3\\xbe\\x09\\xe0\\x13\\x35\\\n\\xea\\xae\\x19\\x8d\\x58\\x18\\xa6\\x7d\\xdf\\xdf\\xae\\xe8\\xfa\\xba\\x94\\xf2\\\n\\xa6\\x0a\\xb7\\x74\\x02\\xf8\\xaf\\x0a\\x65\\x0c\\xe0\\x02\\x00\\x5b\\x6b\\x30\\\n\\x61\\x2d\\x02\\xcf\\x5e\\x1c\\x96\\x03\\x88\\x5d\\xe8\\xd9\\xb6\\x7d\\x1b\\x33\\\n\\xaf\\x55\\x74\\xdb\\x52\\x4a\\x75\\xf0\\x4f\\x14\\xda\\x07\\x75\\x66\\xbe\\x19\\\n\\x51\\x32\\xf6\\xf6\\xf6\\xf6\\xd6\\xfa\\x96\\x0f\\x81\\x00\\x7c\\x0b\\xef\\xbc\\\n\\xb9\\xda\\xd0\\xd2\\xd2\\xf2\\x77\\x00\\x7e\\xad\\xe8\\xbe\\x59\\xb7\\x5e\\xad\\\n\\x84\\x58\\x96\\x75\\x16\\x33\\x7f\\x54\\x11\\xdf\\xac\\x6c\\x4d\\xd4\\x8a\\x85\\\n\\x00\\x3e\\x5b\\xc7\\xfd\\x55\\xa1\\xec\\x37\\x51\\x09\\xb8\\x44\\x08\\x71\\xa6\\\n\\x4e\\xbd\\x5a\\x09\\x21\\xa2\\xeb\\x14\\x1d\\xbf\\x90\\x52\\x3e\\x96\\x40\\xd3\\\n\\x5f\\xc6\\xc8\\x3b\\xb9\\x75\\x43\\x4a\\xf9\\x10\\x80\\xdd\\x21\\x91\\x01\\xe0\\\n\\x2f\\x74\\xea\\xd4\\x46\\x88\\x10\\xa2\\x05\\xc0\\x6a\\x45\\x7c\\x37\\x42\\x9b\\\n\\x8b\\x75\\x60\\x0a\\x80\\x6f\\x26\\xd0\\xce\\x48\\xf0\\x89\\xe8\\x5b\\x8a\\x6c\\\n\\x75\\x36\\x9b\\xd5\\x36\\x19\\xd2\\x46\\x08\\x11\\xad\\x04\\x30\\x3d\\x24\\x1a\\\n\\x48\\xa5\\x52\\xea\\x3a\\xa4\\x1e\\xac\\x02\\x70\\x71\\x82\\xed\\xc5\\xa2\\x54\\\n\\x2a\\x3d\\x8c\\x68\\x00\\xc7\\x8c\\xfe\\xfe\\xfe\\xf3\\x75\\xe9\\xd3\\x46\\x08\\\n\\x33\\xaf\\x54\\x44\\x1b\\x35\\xec\\xa0\\xde\\x0d\\xa0\\x2d\\xe1\\x36\\x23\\xd8\\\n\\xb9\\x73\\xe7\\x1b\\x00\\x7e\\xaa\\x88\\x3f\\xa4\\x4b\\x9f\\xce\\x31\\x24\\x42\\\n\\x08\\x33\\xeb\\xd8\\x4a\\x9f\\x87\\x60\\x5a\\xab\\x1b\\x11\\x42\\x62\\x5e\\xb6\\\n\\xc4\\xa0\\x85\\x90\\xf2\\x61\\xcc\\xb3\\xc3\\xb2\\x54\\x2a\\xf5\\x9c\\x0e\\x5d\\\n\\x00\\xbe\\x88\\xe1\\x3b\\xb5\\x89\\x82\\x99\\xb7\\x2a\\xa2\\xc5\\xd9\\x6c\\x56\\\n\\xcb\\x97\\xa9\\x85\\x10\\xc3\\x30\\xce\\x50\\xda\\x7e\\x2d\\xa9\\xd8\\xd7\\x18\\\n\\x4c\\x02\\x30\\xcc\\x2d\\x9c\\x24\\x5c\\xd7\\x3d\\x80\\xc0\\x8d\\x3c\\x04\\xb3\\\n\\xaf\\xaf\\x2f\\xce\\xb9\\x55\\x37\\xb4\\x10\\xe2\\x79\\xde\\x82\\xf0\\x35\\x33\\\n\\xef\\x4d\\xa8\\xe9\\x4a\\xb1\\xb3\\x17\\x21\\x88\\x52\\xd1\\x89\\x7d\\xe1\\x0b\\\n\\x22\\x5a\\x50\\xa9\\x62\\x3d\\xa8\\x38\\x7d\\x5b\\xb4\\x68\\xd1\\x29\\x6d\\x6d\\\n\\x6d\\xa7\\x1c\\xef\\x66\\xdf\\xf7\\x5f\\x93\\x52\\xf6\\xc6\\x14\\x75\\x84\\x2f\\\n\\x88\\x28\\xa9\\xaf\\xe3\\x9f\\x00\\x7c\\x0c\\xc0\\xe2\\x98\\xb2\\x7b\\x10\\xec\\\n\\x83\\xf5\\x27\\xa4\\x2b\\x02\\x66\\x3e\\x44\\x44\\xcb\\x42\\xd7\\x1d\\x31\\xd5\\\n\\x8c\\x73\\xce\\x39\\xe7\\xf4\\x96\\x96\\x96\\x8a\\x2f\\x7a\\xa9\\x54\\xf2\\xf2\\\n\\xf9\\xfc\\xff\\x01\\xf0\\xe3\\xca\\x63\\x09\\xb1\\x6d\\xfb\\x16\\x66\\xfe\\x5b\\\n\\xdf\\xf7\\x47\\x72\\xf1\\x7a\\x42\\x88\\x87\\x01\\x7c\\x52\\x4a\\x59\\x1c\\x12\\\n\\x12\\xd1\\x14\\xa5\\x5e\\x1c\\x69\\xa3\\x41\\x09\\xc0\\x0d\\x00\\x9e\\xc7\\xf0\\\n\\x7d\\xb8\\xf7\\x02\\x58\\x87\\x60\\x4c\\xd1\\x81\\xc8\\x33\\x94\\xc3\\x8d\\x8e\\\n\\x21\\x93\\xc9\\xcc\\xf1\\x3c\\xef\\x19\\x00\\xf3\\x7d\\x3f\\xf6\\x7f\\x0d\\x00\\\n\\x30\\x0c\\x03\\x42\\x88\\x57\\x00\\xac\\x96\\x52\\x6e\\x19\\x56\\xae\\x0a\\x96\\\n\\x2c\\x59\\x32\\x8b\\x99\\xbf\\x88\\xea\\xfc\\xed\\x26\\x80\\x3f\\x05\\x10\\x99\\\n\\x97\\xab\\x84\\x30\\x73\\x92\\x6f\\xed\\x0b\\x00\\xfe\\xad\\x42\\xd9\\x5f\\x23\\\n\\xf8\\x4a\\x12\\x87\\x61\\x18\\x91\\x29\\xbb\\xef\\xfb\\x53\\x95\\xeb\\xcf\\x23\\\n\\x3e\\x68\\x22\\x0e\\xd3\\x98\\xf9\\xd6\\x58\\x3d\\xaa\\x20\\x95\\x4a\\xbd\\x0d\\\n\\xc0\\xab\\xb2\\x61\\x00\\x00\\x11\\x45\\x1c\\x4c\\xcc\\xec\\x29\\xe5\\x49\\x07\\\n\\x53\\xac\\x45\\x74\\x90\\x1d\\xc2\\x49\\x00\\xee\\x85\\x86\\x5d\\x6c\\x66\\x8e\\\n\\x3c\\x83\\x61\\x18\\x25\\xa5\\x4a\\x4d\\x01\\x11\\xea\\xff\\xec\\x58\\xbb\\xaa\\\n\\x40\\x4a\\xf9\\x2a\\x11\\x7d\\x06\\xc0\\x4b\\x08\\x1e\\xfa\\x78\\x7f\\x2f\\x01\\\n\\x58\\xef\\x38\\x8e\\xba\\x5d\\x1e\\x79\\x9b\\x62\\xba\\xb0\\x7a\\xf1\\x32\\x82\\\n\\x70\\xd3\\x38\\x9c\\x8b\\xe0\\xab\\x4d\\x1a\\x91\\x2f\\x82\\x99\\x23\\xcf\\xd8\\\n\\xd2\\xd2\\xf2\\x0d\\x00\\xcf\\x60\\xe4\\xff\\xd9\\xeb\\xcc\\x9c\\x33\\x0c\\x63\\\n\\x4d\\x9c\\x92\\xd8\\x31\\xc4\\x71\\x9c\\xef\\x01\\xf8\\xde\\x68\\x2d\\x2f\\x87\\\n\\x77\\x1e\\xbb\\x56\\x3f\\xef\\x84\\x70\\x2f\\x80\\x3f\\x03\\xb0\\x2c\\xa6\\xec\\\n\\x4e\\x00\\x4f\\x01\\x78\\x23\\x41\\x7d\\xea\\x33\\x44\\x08\\x29\\x47\\xa7\\x7c\\\n\\xb8\\x5e\\x25\\xba\\xd6\\x21\\x91\\xd0\\x19\\x22\\x9a\\xa1\\x41\\x8d\\x8f\\x60\\\n\\x80\\x8f\\xeb\\x5e\\x4f\\x03\\xf0\\xf7\\x09\\xeb\\x53\\x67\\x8e\\x71\\x5d\\x66\\\n\\xdd\\xd0\\x42\\x08\\x11\\xfd\\x4a\\x11\\xa9\\x31\\x58\\x49\\x41\\x22\\x98\\x0a\\\n\\xc7\\xe1\\x7a\\x00\\x4b\\x13\\xd4\\x15\\xd9\\x79\\x20\\x22\\x2d\\x81\\x7c\\x5a\\\n\\x08\\x49\\xa5\\x52\\x7b\\x11\\x7d\\x73\\xa7\\x09\\x21\\xde\\xa3\\x43\\x17\\x82\\\n\\x69\\x6e\\xdc\\x82\\xd1\\x44\\x40\\x56\\xdd\\xcf\\xb8\\x6c\\xd9\\xb2\\xd3\\x00\\\n\\x84\\xd7\\x64\\xde\\xe4\\xc9\\x93\\xc7\\x0f\\x21\\x65\\x6f\\x5b\\xd8\\xfd\\x09\\\n\\x22\\x5a\\xae\\x43\\x17\\x82\\xbe\\xbc\\xd2\\x00\\x9f\\x46\\x02\\x03\\x7c\\xa9\\\n\\x54\\xea\\x54\\x44\\x07\\xea\\x0d\\xfe\\xae\\x04\\x9d\\xdb\\xef\\xcf\\x86\\xaf\\\n\\x7d\\xdf\\xff\\x88\\x2e\\x5d\\x00\\xbe\\x0f\\x60\\xd8\\x22\\xab\\x8c\\xb8\\x55\\\n\\x7d\\x4d\\x20\\x22\\xd5\\xef\\x52\\x49\\x57\\xdd\\xd0\\xe9\\xa0\\xfa\\x99\\x72\\\n\\x7d\\x11\\x34\\x9e\\x88\\x02\\xb0\\x06\\x40\\x71\\xa4\\x8a\\xa3\\x00\\x31\\xb3\\\n\\xea\\xff\\x78\\x46\\x83\\x1e\\x00\\x1a\\x09\\x69\\x6b\\x6b\\xfb\\x39\\xa2\\x9e\\\n\\xb6\\xf7\\xa5\\xd3\\xe9\\x0f\\xea\\xd2\\x87\\x20\\xbe\\xea\\xae\\xa4\\x1b\\xb5\\\n\\x6d\\xfb\\x3c\\x00\\x73\\x42\\xa2\\xc1\\xf2\\xb3\\x69\\x81\\x36\\x42\\xb6\\x6d\\\n\\xdb\\xd6\\x47\\x44\\x8f\\x87\\x65\\xbe\\xef\\x7f\\x46\\x97\\xbe\\x32\\xbe\\x02\\\n\\xe0\\x37\\x49\\x36\\xc8\\xcc\\xd7\\x2a\\xd7\\x1b\\xb7\\x6d\\xdb\\xd6\\x97\\xa4\\\n\\x8e\\x30\\xb4\\x46\\x9d\\xf8\\xbe\\xff\\x5d\\x45\\x74\\x69\\x26\\x93\\xa9\\xf5\\\n\\x58\\x73\\x2d\\x78\\x0b\\xc1\\x7e\\x56\\x22\\x48\\xa7\\xd3\\x73\\x01\\x5c\\x1e\\\n\\x96\\x11\\x91\\xfa\\x4c\\x89\\x42\\x2b\\x21\\xae\\xeb\\x6e\\x01\\x10\\x9e\\x1e\\\n\\xa6\\x4a\\xa5\\xd2\\x68\\x83\\xe4\\xaa\\xc5\\x06\\x00\\x3f\\x49\\xa2\\x21\\xcf\\\n\\xf3\\xbe\\x8c\\xe8\\xa1\\xd5\\x83\\x52\\x4a\\x35\\x42\\x3e\\x51\\xe8\\x8e\\x5c\\\n\\x64\\x00\\x5f\\x0d\\x0b\\x88\\x68\\x95\\x65\\x59\\xea\\xc9\\xa9\\xa4\\xb1\\x06\\\n\\xc3\\xf3\\xf9\\xd6\\x04\\x21\\x84\\x45\\x44\\x91\\x29\\x33\\x33\\xaf\\x47\\x05\\\n\\x3f\\x46\\x52\\xd0\\x1e\\x4a\\x2a\\xa5\\x7c\\x10\\x40\\x3e\\xac\\x93\\x88\\x7e\\\n\\xa0\\xf9\\x20\\xcc\\x6f\\x01\\xc4\\x6e\\x6f\\x57\\x83\\x72\\x4c\\xd9\\x0f\\x10\\\n\\x75\\x41\\xfc\\x8f\\xeb\\xba\\xf7\\xd7\\x69\\xd7\\x88\\x68\\xc4\\x81\\x1d\\x2e\\\n\\xfb\\x57\\xc2\\x58\\xd0\\xde\\xde\\x5e\\x69\\x31\\x97\\x14\\x6e\\x45\\xb4\\xbb\\\n\\xac\\x05\\x5f\\x00\\xb0\\x28\\x2c\\x28\\xc7\\x28\\x6b\\xfd\\x3a\\x80\\x06\\x9d\\\n\\xa0\\x72\\x5d\\xf7\\x19\\x00\\xea\\xdb\\xb5\\xce\\xb6\\xed\\x2b\\x34\\xaa\\x1d\\\n\\xc4\\x28\\x62\\x80\\x6d\\xdb\\xbe\\x18\\xc0\\xfa\\xb0\\x8c\\x99\\x1f\\xd2\\x79\\\n\\x36\\x3d\\x8c\\x86\\x9c\\x0f\\x01\\x80\\x54\\x2a\\xf5\\x37\\xa5\\x52\\xe9\\x62\\\n\\x04\\x89\\xf3\\x81\\x60\\xc1\\x75\\x9f\\x10\\x22\\x2f\\xa5\\x3c\\x18\\xaa\\xda\\\n\\x8f\\x60\\xd3\\x30\\x0e\\xb5\\x26\\x08\\xdb\\x8c\\x60\\x3f\\xcb\\xae\\x50\\x1e\\\n\\xf1\\x64\\xa6\\xd3\\xe9\\xf7\\xfa\\xbe\\xff\\xaf\\x88\\xbe\\xa8\\xaf\\x7b\\x9e\\\n\\xd7\\xb0\\x34\\x53\\x0d\\x3d\\x85\\x6b\\x59\\xd6\\x87\\x89\\xe8\\x29\\x44\\x1f\\\n\\x78\\x17\\x80\\xce\\xb1\\x4e\\xa0\\x3f\\x6f\\xde\\xbc\\xd6\\xf6\\xf6\\xf6\\xe7\\\n\\x10\\xf5\\xaf\\x30\\x80\\x8f\\x49\\x29\\x1f\\xaf\\x70\\x5b\\xe2\\x68\\xe8\\xa1\\\n\\x4f\\xd7\\x75\\x7f\\x46\\x44\\xdf\\x50\\xc4\\x8b\\x01\\xfc\\xb0\\xab\\xab\\x6b\\\n\\x2c\\x13\\x72\\x52\\x7b\\x7b\\xfb\\xbf\\x40\\x71\\x76\\x31\\xf3\\x3f\\x34\\x92\\\n\\x0c\\x60\\x0c\\x12\\x07\\xf4\\xf4\\xf4\\x6c\\x99\\x39\\x73\\xe6\\x59\\x88\\xfa\\\n\\x48\\xce\\x3c\\x72\\xe4\\xc8\\xec\\x42\\xa1\\xf0\\x64\\xa3\\xed\\x01\\x00\\x21\\\n\\xc4\\x77\\x00\\x7c\\x5a\\x11\\x3f\\xe5\\xba\\xee\\xa7\\x90\\x4c\\xb4\\x7e\\xd5\\\n\\x18\\x8b\\xbc\\xbd\\x9c\\x4a\\xa5\\xae\\x01\\x10\\xc9\\x20\\x4a\\x44\\x9f\\x16\\\n\\x42\\xe8\\x0a\\xe1\\xa9\\x08\\xdb\\xb6\\xd7\\x00\\xb8\\x4e\\x11\\x1f\\x30\\x4d\\\n\\xf3\\x13\\x68\\xc0\\xac\\x4a\\x85\\xf6\\x31\\xa4\\x7c\\x80\\xf2\\x62\\x22\\x7a\\\n\\x3a\\xfc\\x73\\x44\\x42\\x88\\xd3\\x11\\x9c\\xef\\x9b\\x19\\xaa\\xce\\x00\\xae\\\n\\x96\\x52\\xaa\\xf9\\xa9\\xb4\\xc0\\xb2\\xac\\xcb\\x88\\xe8\\x31\\x44\\x5f\\xcc\\\n\\x97\\x99\\x79\\x45\\x39\\x7c\\x74\\xc8\\xd6\\xeb\\x99\\x59\\x18\\x86\\xf1\\x53\\\n\\xdd\\x3f\\xa9\\xa4\\x3b\\x3d\\xd3\\xba\\xf2\\xea\\x76\\x08\\x17\\x49\\x29\\x37\\\n\\x85\\xca\\x97\\x32\\xf3\\x73\\x08\\x0e\\xe0\\x0c\\xe1\\x28\\x11\\xad\\x74\\x1c\\\n\\x67\\x9b\\x66\\xdb\\x32\\xcc\\xbc\\x05\\xc0\\xc9\\x21\\x71\\xbf\\x61\\x18\\x17\\\n\\x84\\x93\\x9a\\xd9\\xb6\\x7d\\x25\\x33\\x1f\\x4b\\xdb\\xc4\\xcc\\xeb\\x5c\\xd7\\\n\\xfd\\x9a\\x2e\\xbb\\xb4\\x75\\x59\\x31\\x64\\x0c\\xf3\\x1a\\x3a\\x8e\\x93\\x27\\\n\\xa2\\xd5\\x08\\x22\\x12\\x87\\xd0\\xc6\\xcc\\x1b\\xca\\x1b\\x7b\\x5a\\x90\\xc9\\\n\\x64\\xe6\\x30\\xf3\\x93\\x88\\x92\\x51\\x24\\xa2\\x55\\x6a\\x86\\x39\\x66\\x16\\\n\\xe1\\x6b\\x22\\xba\\xc5\\xb2\\xac\\x4a\\x27\\x88\\xeb\\x86\\x16\\x42\\xe2\\xc8\\\n\\x40\\xf0\\x4f\\x7f\\x42\\xad\\xeb\\x38\\xce\\xd3\\x44\\xa4\\xc6\\x28\\x4d\\xf3\\\n\\x7d\\x7f\\x63\\x67\\x67\\xe7\\xa4\\xa4\\x6d\\xeb\\xec\\xec\\x9c\\xe4\\x79\\xde\\\n\\x4f\\x10\\x44\\xa6\\x84\\x71\\x7d\\x85\\x74\\x50\\x8f\\x21\\xfa\\xc2\\x68\\x25\\\n\\x25\\xf1\\x59\\x56\\xf9\\x7c\\xb7\\x7a\\x7a\\xf5\\x6d\\x22\\xba\\xd4\\x71\\x9c\\\n\\xff\\x8c\\xbb\\xa7\\xa7\\xa7\\x47\\x76\\x74\\x74\\xb4\\x10\\x51\\x38\\x0f\\xca\\\n\\x34\\xcf\\xf3\\x26\\x15\\x0a\\x85\\x4d\\x71\\xf7\\x8c\\x16\\xd3\\xa7\\x4f\\xbf\\\n\\x8d\\x88\\x2e\\x51\\xc4\\x5f\\xad\\x94\\x89\\xbb\\x50\\x28\\xbc\\x34\\x6b\\xd6\\\n\\x2c\\x09\\xe0\\x0a\\x84\\x16\\xd2\\x44\\xf4\\xc1\\x8e\\x8e\\x8e\\x93\\x0b\\x85\\\n\\x42\\xa2\\xbb\\xbf\\x89\\x12\\x52\\xfe\\x32\\x54\\x32\\x4a\\xcc\\xfc\\x71\\x29\\\n\\xe5\\xb0\\xaf\\x23\\x8c\\x42\\xa1\\xb0\\x75\\xe6\\xcc\\x99\\x8b\\x01\\x9c\\x15\\\n\\x12\\xa7\\x67\\xcf\\x9e\\xbd\\xb1\\xa7\\xa7\\xa7\\xaa\\x94\\x7e\\x23\\xa1\\xbc\\\n\\x83\\x7b\\x1f\\x42\\x3d\\x03\\x11\\xfd\\x58\\x4a\\x79\\x03\\x8e\\x33\\xbd\\xed\\\n\\xe9\\xe9\\xd9\\xdf\\xd1\\xd1\\xb1\\x8f\\x88\\x2e\\x53\\xee\\x5d\\xd1\\xd1\\xd1\\\n\\x51\\x2c\\x14\\x0a\\xb1\\x2f\\xda\\x68\\x90\\x58\\x97\\x65\\x59\\xd6\\x4d\\x71\\\n\\xdd\\x14\\x33\\x5f\\xe5\\xba\\x6e\\x35\\x87\\x3d\\xfd\\x54\\x2a\\xf5\\x49\\x04\\\n\\x3b\\xb5\\x43\\x48\\x79\\x9e\\x97\\xe4\\x26\\xe4\\xcd\\x88\\x6e\\x17\\xed\\x1b\\\n\\x18\\x18\\xa8\\x6a\\x7a\\xeb\\xba\\xee\\x23\\xcc\\x7c\\x15\\x62\\xba\\xaf\\x24\\\n\\xa7\\xeb\\x89\\xcc\\xb2\\xd2\\xe9\\xf4\\x4a\\xdf\\xf7\\xd5\\x9f\\x89\\xa8\\x85\\\n\\x8c\\x63\\x10\\x42\\x5c\\x88\\x68\\x10\\x41\\xc9\\xf7\\xfd\\x99\\xf9\\x7c\\xfe\\\n\\x95\\x7a\\x6c\\x5c\\xb6\\x6c\\xd9\\x69\\xa5\\x52\\xe9\\x25\\x44\\x7b\\x85\\x73\\\n\\xa5\\x94\\x2f\\xd4\\xd2\\x8e\\x65\\x59\\xab\\x88\\xe8\\x01\\x44\\x89\\x65\\x66\\\n\\x5e\\xe9\\xba\\xee\\xb3\\x95\\xee\\xab\\x16\\x89\\x6c\\x2e\\xfa\\xbe\\x9f\\x56\\\n\\x44\\xa3\\x22\\x03\\x00\\xa4\\x94\\x9b\\x6c\\xdb\\xfe\\x39\\x33\\x0f\\x05\\x44\\\n\\xa4\\x88\\xe8\\x1e\\x21\\xc4\\x81\\xe3\\xde\\x38\\x02\\x3c\\xcf\\x9b\\x8f\\x28\\\n\\x19\\x9b\\x6a\\x25\\x03\\x08\\xbe\\x14\\xcb\\xb2\\xa0\\x90\\x42\\xe5\\x94\\x4e\\\n\\x4d\\x43\\xc8\\x13\\x86\\x61\\x7c\\x09\\xc1\\x34\\xf2\\x6d\\x00\\x1f\\x77\\x5d\\\n\\xf7\\xd1\\x3a\\x9a\\x7c\\x14\\xc0\\xb1\\x08\\x15\\x22\\xba\\xfc\\x38\\x75\\xab\\\n\\x02\\xf3\\xb0\\x21\\x62\\xd4\\xf6\\x85\\x48\\xb9\\x1f\\x40\\x2b\\x02\\x5f\\xfe\\\n\\x71\\xc7\\xc8\\x6a\\x91\\xc8\\x18\\x92\\xcf\\xe7\\xf7\\x00\\x58\\x4c\\x44\\x7f\\\n\\x6e\\x9a\\xe6\\x62\\x29\\x65\\x3d\\x64\\xc0\\xf7\\xfd\\xfd\\x49\\xd8\\x75\\x3c\\\n\\x30\\xf3\\xaf\\x47\\xae\\x55\\x19\\xae\\xeb\\x3e\\x42\\x44\\x4b\\x00\\x5c\\x63\\\n\\x18\\xc6\\x22\\x29\\x65\\x22\\xa1\\xa5\\x89\\xf9\\x43\\xca\\x3e\\x8d\\x83\\x23\\\n\\x56\\xac\\x0e\\x3a\\x02\\xde\\x12\\xd7\\xe1\\x38\\xce\\x5e\\x04\\xc9\\xfe\\x13\\\n\\x43\\xc3\\x1c\\x54\\x75\\xe2\\x0d\\x22\\xaa\\x2b\\x2d\\x07\\x33\\xaf\\x42\\xe5\\\n\\xcc\\xd6\\x4d\\x83\\xf1\\x42\\x48\\xc1\\x71\\x9c\\xba\\x82\\xec\\x84\\x10\\xe7\\\n\\x62\\x1c\\x10\\x32\\xae\\x7f\\x36\\xef\\x44\\xc4\\x04\\x21\\x4d\\x86\\xf1\\xd2\\\n\\x65\\x4d\\xce\\x64\\x32\\x73\\xc2\\xe9\\x39\\xca\\xc9\\xf5\\xcf\\x65\\xe6\\x6a\\\n\\xbb\\x21\\x1d\\xe7\\x1c\\x13\\x47\\x53\\x12\\x62\\x9a\\xa6\\xa1\\x1c\\xbe\\x3f\\\n\\xdd\\xf3\\xbc\\x83\\x42\\x88\\x6b\\xa5\\x94\\xff\\x9c\\xcd\\x66\\x53\\x7d\\x7d\\\n\\x7d\\x5b\\x30\\x3c\\x77\\xfc\\xb8\\x47\\x53\\x76\\x59\\xcc\\xfc\\x87\\x31\\x62\\\n\\x42\\x90\\xd6\\x15\\x6f\\xbe\\xf9\\x66\\x06\\x27\\x20\\x19\\x40\\xf3\\x12\\xf2\\\n\\xbb\\x38\\x39\\x11\\xed\\x03\\x80\\x52\\xa9\\xf4\\x1b\\x0c\\xff\\x99\\xbe\\x13\\\n\\x02\\x4d\\xd9\\x65\\x61\\x78\\x56\\x84\\xb7\\x00\\xdc\\xdf\\xd2\\xd2\\xb2\\x0e\\\n\\x00\\xf2\\xf9\\x7c\\x8f\\x6d\\xdb\\x97\\x31\\xf3\\xe7\\xd4\\x0c\\x0b\\x95\\x40\\\n\\x44\\x2b\\x10\\xa4\\x72\\x1a\\xba\\x6e\\x68\\x34\\x49\\xb5\\x68\\x4a\\x42\\x7c\\\n\\xdf\\x3f\\x62\\x18\\x91\\x8f\\x97\\x00\\xdc\\xd8\\xdd\\xdd\\x7d\\x2c\\x01\\x4c\\\n\\xd9\\xbb\\x57\\x55\\x96\\x3a\\x21\\x44\\x3b\\x00\\xd5\\xa7\\xf2\\x6a\\xbd\\x76\\\n\\xea\\x40\\x53\\x12\\x62\\x18\\xc6\\x7e\\x04\\x69\\x28\\x86\\x8e\\x22\\x4f\\x02\\\n\\xb0\\x21\\x9d\\x4e\\x7f\\xcd\\xf3\\xbc\\x9a\\x0e\\xec\\x1b\\x86\\x71\\x2a\\x33\\\n\\xdf\\x84\\x68\\x6e\\xc6\\xd7\\xa6\\x4c\\x99\\x52\\xd7\\xee\\xb1\\x2e\\x8c\\xd9\\\n\\x4f\\x1e\\x8d\\x04\\x21\\xc4\\xed\\x08\\xa2\\xd0\\x75\\xe0\\x56\\x29\\xe5\\x8d\\\n\\x9a\\xda\\xae\\x0b\\x4d\\x39\\xa8\\x03\\x80\\xe7\\x79\\xb7\\x00\\xd0\\xf1\\x16\\\n\\xef\\x03\\xf0\\x75\\x0d\\xed\\x26\\x82\\xa6\\x25\\x64\\xe7\\xce\\x9d\\x6f\\x98\\\n\\xa6\\x79\\x21\\x80\\x9d\\x09\\x36\\x2b\\x7d\\xdf\\xbf\\xb0\\x42\\x16\\xbc\\xa6\\\n\\x40\\xd3\\x76\\x59\\x43\\xe8\\xea\\xea\\x32\\x0f\\x1d\\x3a\\xd4\\x55\\xf6\\x67\\\n\\x9f\\x81\\x60\\xdc\\x3b\\x05\\xd1\\x54\\x17\\x71\\x18\\x4a\\x87\\x54\\x04\\xb0\\\n\\x9f\\x99\\xff\\xbd\\xec\\x34\\x6b\\x78\\x78\\x68\\x2d\\x68\\x7a\\x42\\xe2\\x90\\\n\\xc9\\x64\\xde\\xed\\x79\\xde\\x23\\x08\\x7e\\xba\\x62\\x18\\x98\\x79\\x73\\x6b\\\n\\x6b\\xeb\\xea\\x46\\xff\\xa0\\x57\\x12\\x18\\x97\\x84\\x94\\x41\\x96\\x65\\xad\\\n\\x32\\x0c\\xe3\\x2a\\x66\\x9e\\x0f\\x00\\xcc\\xbc\\x0f\\xc0\\x03\\xe5\\x2f\\xa1\\\n\\x29\\xd7\\x19\\x13\\x98\\xc0\\x04\\x26\\x70\\x02\\xe1\\xff\\x01\\x15\\x92\\xd5\\\n\\x9d\\x9b\\x98\\xe5\\x4b\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\\n\\x82\\\n\\x00\\x00\\x11\\x18\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x64\\x00\\x00\\x00\\x64\\x08\\x06\\x00\\x00\\x00\\x70\\xe2\\x95\\x54\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0e\\xc3\\x00\\x00\\x0e\\xc3\\x01\\xc7\\x6f\\\n\\xa8\\x64\\x00\\x00\\x10\\xad\\x49\\x44\\x41\\x54\\x78\\x5e\\xed\\x5d\\x0b\\x70\\\n\\x54\\xd5\\x19\\xc6\\xda\\xd6\\xb1\\xb6\\xd6\\xb6\\x56\\x5b\\xdb\\x3a\\xed\\xd8\\\n\\x99\\xd6\\xb6\\xb6\\x9d\\x76\\xa6\\x4e\\x5b\\x5b\\xa7\\x0a\\xd9\\x9b\\xf0\\xd2\\\n\\x2a\\xe3\\x5b\\x6b\\xd1\\x8a\\xb5\\x54\\x81\\x6c\\x02\\xa2\\x8d\\x5a\\xc0\\x90\\\n\\x07\\x10\\x20\\x90\\xbd\\xbb\\x49\\xf6\\x01\\x21\\x84\\x77\\x08\\x49\\xee\\x6e\\\n\\x1e\\x98\\x84\\x90\\x10\\x92\\x90\\xf0\\x08\\xcf\\x41\\xc2\\x23\\x3c\\x45\\xde\\\n\\x05\\x84\\xd3\\xff\\x3f\\x7b\\xce\\xcd\\xdd\\xdd\\xb3\\xaf\\xbb\\x4b\\x08\\xe6\\\n\\x7e\\x33\\xdf\\x04\\xf6\\x9e\\xfb\\xef\\xbd\\xdf\\x7f\\x1e\\xff\\x7f\\xce\\xb9\\\n\\x77\\x07\\x19\\x30\\x60\\xc0\\x40\\xdf\\x60\\xe6\\x9b\\x85\\x77\\xa4\\xa7\\xd8\\\n\\x7f\\x9e\\x91\\x6c\\x4f\\xc8\\x4c\\x71\\xbc\\x04\\x7f\\x5f\\xcb\\x34\\xdb\\x53\\\n\\x33\\x92\\x1d\\x23\\x59\\x11\\x03\\xd7\\x0a\\x53\\x27\\xe5\\x7f\\x3b\\xc3\\xec\\\n\\x1c\\x05\\x62\\xcf\\x00\\xd1\\x3d\\x20\\xfe\\xe1\\x4c\\xb3\\x83\\x08\\xb8\\x74\\\n\\xba\\xd9\\xf6\\x35\\x76\\x9a\\x81\\x78\\x22\\x3b\\xd5\\xf9\\x2b\\x70\\xc0\\x54\\\n\\x10\\xb9\\x23\\xc3\\x6c\\xbf\\xea\\x27\\xbc\\x0f\\xf1\\x78\\x46\\xb2\\x33\\x85\\\n\\x0c\\x22\\x37\\xb1\\xd3\\x0d\\xc4\\x03\\xd8\\x0d\\xa1\\xb0\\x19\\x66\\x47\\x97\\\n\\x48\\xf8\\xac\\x14\\x27\\xb1\\x4c\\x5b\\x41\\xe6\\x7d\\xb0\\xb4\\xf7\\xf3\\x64\\\n\\xfb\\xe5\\x2c\\x73\\xe1\\x73\\xcc\\x84\\x81\\x78\\x20\\x3d\\xd5\\x71\\x2f\\x74\\\n\\x45\\x73\\xa1\\xa6\\x9f\\xd5\\x3a\\x00\\x69\\x9d\\xbe\\x8a\\xac\\x72\\x35\\x91\\\n\\xf5\\x55\\x7b\\xc8\\x8e\\x8e\\x93\\xa4\\x65\\xed\\x3e\\x32\\x73\\xe2\\x02\\xe6\\\n\\x0c\\xc7\\x85\\xcc\\x09\\xce\\xe1\\xcc\\x8c\\x81\\x58\\x81\\x2d\\x02\\x1c\\xf1\\\n\\x21\\x38\\xe2\\xbc\\xd6\\x09\\xb9\\xef\\x2f\\x25\\xe5\\xc5\\x2d\\xa4\\xa3\\xa9\\\n\\x87\\xec\\xde\\x7a\\x5a\\x65\\x47\\xf3\\x61\\x32\\xfb\\xdd\\x62\\x5a\\x06\\xce\\\n\\xf9\\x2c\\xcb\\x6c\\x1f\\xc1\\x4c\\x19\\x88\\x15\\x10\\x19\\xfd\\x15\\x44\\x3d\\\n\\xa2\\x75\\x44\\x41\\xf6\\x1a\\xd2\\xa0\\xec\\x22\\xbb\\xb6\\x9c\\xf2\\x71\\x04\\\n\\x72\\x67\\xe7\\x49\\xda\\x5a\\x78\\x59\\x18\\xd8\\x5f\\x67\\xa6\\x0c\\xc4\\x82\\\n\\xf4\\x54\\xcb\\xd7\\x41\\x50\\x07\\x17\\x16\\x69\\x9b\\x5e\\x4a\\xbb\\x24\\x7f\\\n\\x27\\x68\\xb9\\xca\\xd9\\xa4\\x71\\x86\\x63\\x0e\\x33\\x67\\x20\\x16\\x40\\xad\\\n\\xbe\\x4f\\x3b\\x60\\xcf\\x9a\\x5c\\x44\\x3c\\xcb\\x3b\\x84\\x2d\\x42\\xcb\\xf6\\\n\\x75\\x07\\x49\\x56\\xaa\\xcb\\xeb\\x0c\\xb3\\xbd\\x2d\\x67\\x6c\\xce\\x2d\\xcc\\\n\\x64\\x54\\xa0\\x95\\x01\\x5a\\x26\\xfb\\xef\\xc0\\x46\\x56\\xaa\\xe3\\x21\\x10\\\n\\xf3\\x18\\x77\\x46\\x41\\x66\\x19\\xe9\\xdc\\x70\\x44\\xe8\\x00\\x1f\\x6e\\x39\\\n\\x4d\\xbb\\x32\\x7a\\x5e\\xb2\\xfd\\x62\\xe6\\x04\\xd7\\xcf\\x98\\xc9\\xa8\\x50\\\n\\x32\\xaa\\xe4\\x66\\xa8\\x0c\\xe5\\x60\\x67\\x02\\xfb\\x68\\xe0\\x02\\xc2\\xd5\\\n\\x3f\\x40\\x44\\x74\\x8e\\x3b\\x63\\x85\\xbd\\x21\\x6c\\xab\\xe0\\xac\\x5d\\xbd\\\n\\xcd\\xeb\\x0c\\x4a\\xfb\\x87\\xcc\\x64\\xd4\\x80\\xd6\\x99\\x81\\x36\\x06\\xfc\\\n\\xd8\\x93\\x91\\x5c\\xf8\\x6b\\x70\\xc6\\xa7\\x54\\xd0\\x14\\x07\\x51\\x96\\xb4\\\n\\x09\\x85\\x0f\\x46\\x39\\x5d\\x1d\\xc8\\x7b\\x20\\xc4\\xbd\\x8d\\x99\\x8d\\x0a\\\n\\xe0\\x84\\xe7\\x99\\x0d\\x74\\xc8\\x8b\\xec\\xe3\\x81\\x87\\x59\\x93\\x8a\\xee\\\n\\x86\\x6e\\xea\\x10\\x17\\xc3\\xbd\\x6c\\x93\\x50\\xf4\\x60\\x6c\\xaa\\xde\\xc3\\\n\\x9d\\x81\\x03\\xf9\\x44\\x66\\x36\\x2a\\xc0\\x79\\xcf\\x62\\x88\\xcc\\xed\\x40\\\n\\x12\\xf9\\x28\\x3b\\x34\\xb0\\x90\\x96\\x96\\xf6\\x05\\xa8\\x8d\\x6e\\x2e\\x04\\\n\\xe6\\x15\\x22\\xd1\\x43\\x71\\xc1\\x1c\\xb7\\xd7\\x19\\x90\\x30\\x62\\xce\\xc2\\\n\\x4c\\x47\\x0c\\xc8\\xfa\\xff\\xa6\\x75\\x06\\x32\\x3d\\xc5\\x71\\x3f\\x3b\\x3c\\\n\\xb0\\x80\\x33\\xaf\\x5c\\x84\\xa2\\xb9\\x55\\x74\\x70\\x16\\x89\\x1e\\x8c\\x98\\\n\\x95\\xcf\\x98\\xc4\\x32\\x72\\xb3\\xc3\\xc5\\xcc\\x46\\x0c\\x38\\xe7\\x9f\\xe0\\\n\\x8c\\x80\\x39\\xb0\\x9c\\xb1\\xae\\xdb\\x59\\x91\\x81\\x83\\xec\\x71\\xf6\\xef\\\n\\x61\\xad\\x46\\x01\\x72\\x3f\\x58\\x42\\xba\\xda\\x4f\\x08\\x45\\x0f\\x45\\x4c\\\n\\x10\\x55\\x21\\x27\\x14\\x0e\\x65\\xa6\\xc3\\x62\\x6e\\x5a\\xc9\\x57\\xe1\\x1c\\\n\\x17\\x3f\\x17\\x9d\\xca\\xe7\\xbe\\x20\\xca\\x3a\\xc0\\x8a\\x0d\\x2c\\x68\\x05\\\n\\x59\\x07\\xc2\\x8a\\x04\\x0f\\xc7\\xe5\\x85\\x0d\\x5e\\x67\\x40\\xa8\\x9b\\x96\\\n\\x66\\xf9\\x0a\\x33\\x1d\\x12\\x74\\x86\\x58\\x93\\xe7\\x80\\x73\\x48\\x6b\\x7d\\\n\\x37\\xc9\\x9b\\xba\\xdc\\x6b\\xcb\\xec\\xa8\\x60\\x45\\x07\\x0e\\xe8\\xa2\\x11\\\n\\xeb\\x2a\\x68\\x57\\x25\\x10\\x3b\\x12\\xda\\x32\\x4a\\xb9\\x88\\x0d\\xcc\\x74\\\n\\x50\\x64\\x8d\\x5f\\x78\\x27\\x4e\\x4e\\xd2\\x3c\\x85\\x39\\x23\\x1f\\xb2\\xff\\\n\\x2d\\x2d\\x47\\x68\\xd7\\x97\\x95\\xea\\xa4\\x9f\\x61\\xe8\\xcb\\x4e\\x19\\x38\\\n\\x00\\x61\\x64\\x2a\\x0a\\x84\\xb8\\x6d\\x0d\\xfb\\x85\\x62\\x47\\xc2\\x99\\x93\\\n\\x17\\x72\\x11\\x73\\x99\\xe9\\x00\\x40\\x18\\x7c\\x17\\x46\\x5f\\xd0\\x2a\\x4e\\\n\\x72\\x47\\x60\\x46\\x5f\\x56\\xb4\\x41\\xcd\\x73\\x1a\\x3d\\xbb\\xe9\\xe7\\xcc\\\n\\xd6\\xe3\\xec\\xd4\\x81\\x01\\xba\\x9e\\xc1\\xc6\\x0e\\xd7\\x6c\\x77\\x80\\xc8\\\n\\x91\\x12\\x6b\\x76\\xaf\\x88\\xce\\x37\\x98\\x79\\x0a\\xfc\\x8e\\x2c\\xb3\\xf3\\\n\\x31\\x70\\xfc\\x4a\\x70\\xc4\\x25\\x5e\\x0e\\x99\\x9f\\xb9\\x9a\\x76\\x51\\x5a\\\n\\x5b\\xab\\x9c\\x8d\\xde\\xe3\\xc9\\x8e\\x2b\\xd9\\xe3\\xac\\xdf\\x64\\x66\\x6e\\\n\\x2c\\x60\\xc8\\x5a\\x69\\x4b\\xf8\\x8b\\x22\\x9b\\xc6\\x23\\xdd\\x16\\xe9\\x61\\\n\\xfc\\x8c\\x1d\\x0e\\x0a\\xb8\\xf1\\x31\\x5c\\x1c\\xbd\\x63\\x07\\xb2\\xe5\\xa3\\\n\\x7d\\xaa\\xc8\\x19\\x29\\x34\\xc3\\x36\\x03\\xe7\\x81\\xb3\\xdb\\x80\\x3e\\x61\\\n\\x2c\\x52\\x9e\\xb6\\x92\\x34\\x54\\xee\\x14\\xda\\xb2\\xc0\\x31\\x2c\\x83\\xe7\\\n\\xb2\\xcb\\xbc\\xb1\\x50\\x69\\x4d\\xf8\\xb1\\xdb\\x2a\\xb5\\x02\\x89\\x1f\\x5b\\\n\\xab\\xf3\\xa4\\xfb\\x58\\x31\\x21\\xb0\\xd6\\xe2\\xcd\\xe3\\x9a\\x45\\xa4\\x53\\\n\\x23\\x22\\xae\\xaf\\xea\\xed\\x66\\x82\\x11\\xa3\\xa7\\xe2\\xf9\\x35\\x34\\x79\\\n\\x0c\\x16\\x52\\xb7\\x37\\x1e\\x54\\xcb\\x43\\xd7\\xf6\\x5f\\x76\\x99\\x37\\x0e\\\n\\x94\\x79\\x43\\xee\\x72\\x5b\\x4d\\xfb\\x05\\xce\\x60\\x34\\xed\\xaf\\xb5\\x0c\\\n\\xbb\\x93\\x15\\xf7\\x01\\xce\\xc0\\x42\\x1f\\x7d\\x06\\x6f\\x7e\\xa9\\xad\\x4e\\\n\\x28\\x50\\xa4\\xac\\xaf\\xd8\\xe1\\x23\\x3e\\x12\\x67\\x86\\x71\\x42\\x72\\x79\\\n\\xe1\\x3a\\x1a\\x12\\x6f\\xef\\x3c\\x29\\x3c\\x57\\xcb\\xd5\\x0b\\x9b\\xd5\\xf3\\\n\\x31\\xd8\\x60\\x97\\xda\\xbf\\x50\\x65\\x7d\\xe4\\x6e\\x25\\x2f\\xe9\\x41\\xb7\\\n\\x6c\\x7a\\x46\\xb1\\x9a\\x26\\x01\\x65\\x45\\x96\\xca\\x40\\xec\\x6a\\xb7\\x2c\\\n\\x1d\\xe1\\xe2\\x77\\xd5\\xfc\\x9b\\xfc\\xef\\x90\\x85\\x12\\xff\\xcd\\x3f\\x87\\\n\\xb2\\x59\\xcc\\x94\\x0f\\xe0\\x86\\x13\\xf9\\xcd\\xaf\\x2d\\xdb\\x26\\x14\\x28\\\n\\x52\\x36\\x54\\xf6\\x3a\\xa4\\xb6\\x74\\x0b\\xd9\\xb2\\xf1\\xa8\\xb0\\x5c\\x28\\\n\\x62\\x0b\\xcd\\x7d\\xaf\\x84\\xda\\x80\\xd6\\xd1\\xc9\\x2e\\xf3\\xfa\\x81\\x0a\\\n\\x6f\\x49\\x4c\\x04\\x11\\x27\\x83\\xd8\\x4b\\xe0\\xef\\x16\\x10\\xfc\\x2c\\x17\\\n\\x36\\x14\\x37\\xac\\x78\\x81\\x90\\x4f\\x9c\\x40\\x17\\xa3\\x93\\x6c\\x58\\xfe\\\n\\x02\\x3f\\xbe\\x97\\x7d\\x05\\x05\\x86\\x9c\\x70\\xc3\\xd3\\xa6\\x9b\\x1d\\xea\\\n\\x32\\x2c\\x0e\\xca\\x22\\x91\\x22\\xa5\\x36\\x32\\x6a\\xd5\\x19\\xa9\\x69\\x5b\\\n\\x19\\x5c\\xdf\\x78\\x76\\xb9\\x7d\\x07\\xec\\xfb\\xa1\\xf6\\x8e\\x86\\x9a\\x6f\\\n\\x87\\x81\\x78\\x8f\\x56\\xe0\\x60\\xac\\xb1\\x0f\\x27\\xeb\\x8a\\x9f\\x22\\x2d\\\n\\x2b\\x5f\\x22\\x9b\\xca\\x5f\\x55\\x3f\\xdf\\xf9\\xd1\\x78\\x8d\\x33\\xbc\\xdc\\\n\\xdd\\x90\\xcc\\x8f\\x5f\\xf1\\x4e\\x8b\\xd0\\xa9\\x91\\x4c\\xde\\x4d\\x71\\xe6\\\n\\xbc\\xb3\\x48\\x28\\x50\\x34\\x6c\\xae\\xdd\\xab\\xda\\xc3\\x7f\\x8b\\xca\\x84\\\n\\x63\\x7e\\xc6\\x6a\\xe6\\x0c\\xfb\\x19\\x3d\\xf3\\x60\\x51\\xa3\\x36\\xed\\xe1\\\n\\x2f\\x82\\x13\\x86\\x80\\x03\\x66\\x80\\x48\\x5d\\x5c\\x4c\\x7f\\xa2\\xe8\\x28\\\n\\x78\\x57\\xcd\\x9b\\xa4\\x7b\\xc3\\x3b\\xe4\\xd8\\xb6\\xe9\\xe4\\xdc\\xbe\\x5c\\\n\\x72\\xe5\\x98\\x3d\\x40\\x74\\x7e\\xce\\xce\\xba\\x09\\x01\\xc7\\xf6\\xae\\x9f\\\n\\xa8\\x1e\\xe7\\x62\\x69\\x39\\xeb\\x6d\\x6f\\xde\\x80\\xa1\\xa7\\x48\\xa0\\x68\\\n\\x88\\xad\\x82\\xdb\\xc5\\xf1\\x42\\x54\\x26\\x14\\xb5\\x2d\\x0c\\x2a\\xce\\x6c\\\n\\x26\\x59\\xfc\\x41\\xc8\\xa0\\x9b\\x2a\\x64\\xd3\\x9f\\xa0\\x0b\\xca\\x05\\x47\\\n\\x1c\\xe5\\x02\\x71\\x7a\\x6c\\x12\\x69\\x2c\\x79\\x9a\\x8a\\xdf\\xd3\\x39\\x85\\\n\\x9c\\xef\\x9e\\x0f\\x62\\x6a\\xbb\\x9e\\xd0\\xe4\\x76\\xa2\\x71\\x08\\xae\\x57\\\n\\xa0\\x00\\x79\\x53\\xbc\\xd3\\x13\\x8b\\xe6\\x55\\x0b\\x45\\x8a\\x86\\x9b\\x1a\\\n\\x0f\\xa9\\xf6\\xa3\\x1d\\x8f\\x76\\x6d\\x3e\\x45\\xe4\\x0f\\xd9\\x1a\\x4a\\xb2\\\n\\xe3\\x5c\\x7a\\x8a\\xeb\\xfb\\x4c\\xbe\\xf8\\xa1\\x6c\\xde\\xd0\\x6f\\x28\\x56\\\n\\x69\\x1c\\x8c\\x01\\xdb\\xb9\\x28\\x9c\\xb5\\x8e\\x91\\x64\\xb3\\x32\\x86\\x3a\\\n\\xe0\\xd2\\x61\\x5b\\x80\\x90\\xd1\\x90\\xdb\\x0c\\xe7\\x10\\x91\\x10\\x73\\xd8\\\n\\x00\\xba\\x2c\\xbf\\x5e\\x78\\x7c\\xe7\\xe6\\x4f\\x49\\xe9\\x82\\x66\\x32\\x27\\\n\\x6d\\x31\\xc9\\x9e\\xb8\\x80\\x14\\x66\\x95\\x91\\xd6\\x3a\\xdf\\x24\\x8e\\x53\\\n\\x9b\\x18\\x56\\xad\\xe8\\x14\\x96\\x09\\x46\\x65\\xe9\\x26\\xf5\\xdc\\xb8\\x87\\\n\\xba\\xb5\\x85\\x49\\xdf\\x01\\x47\\xcc\\x82\\x16\\x71\\x8e\\x8b\\x81\\xac\\x2e\\\n\\x1c\\x0e\\x4e\\x78\\x9d\\x1c\\xef\\x9a\\x4e\\xae\\x9e\\x88\\xbc\\x05\\x84\\x23\\\n\\xb7\\xaf\\xc7\\x21\\x7c\\xaa\\x03\\x33\\x63\\xd1\\xf1\\x85\\x73\\xab\\x54\\xa1\\\n\\x38\\xb3\\x53\\x5d\\x01\\x99\\x35\\x72\\x7b\\xfb\\x27\\x6a\\x99\\xca\\x92\\xc8\\\n\\x57\\x18\\x3b\\x9b\\x0e\\x93\\x99\\xac\\xeb\\x84\\x44\\xf0\\x50\\xdc\\xf6\\xf9\\\n\\xd6\\x16\\x8e\\xbc\\x03\\xc7\\x06\\x08\\x49\\xcf\\x73\\x11\\x90\\xd8\\x1d\\xed\\\n\\x6f\\xfd\\x0f\\xf9\\xec\\x58\\x61\\x80\\x60\\xf1\\x20\\xff\\x1e\\x3d\\x0e\\xc1\\\n\\x6d\\x9e\\x28\\x44\\xa9\\x73\\x7d\\xc0\\x31\\xdc\\xe2\\xc3\\x05\\xf6\\x67\\x61\\\n\\xf6\\x9a\\x80\\xf2\\x18\\xb2\\xf2\\xe3\\x6b\\x8a\\x37\\x06\\x1c\\x17\\x71\\x17\\\n\\xb4\\x40\\xcd\\x84\\x24\\xb6\\x8e\\xf8\\xec\\x82\\xaf\\x94\\xa5\\xe7\\xe0\\xa6\\\n\\x0f\\xf1\\x9b\\x47\\xb6\\xac\\x78\\x91\\x9c\\xd8\\x9e\\x19\\x20\\x52\\xbc\\xc9\\\n\\xbf\\x4f\\x8f\\x43\\x72\\xde\\x5d\\x44\\x85\\x58\\x5e\\x10\\xd8\\x65\\x95\\x17\\\n\\xb7\\xaa\\x42\\xf9\\x13\\xbb\\x2f\\xff\\xf2\\x5b\\x5b\\x8f\\xa9\\xc7\\x71\\x9b\\\n\\x90\\xff\\x71\\x11\\xb1\\xab\\xe4\\xe7\\x80\\x33\\x0a\\x98\\x9c\\xfa\\x51\\xee\\\n\\x92\\x6e\\x87\\xae\\x69\\x39\\xbf\\x69\\xe4\\xfa\\x25\\xcf\\x80\\x23\\xb2\\x02\\\n\\xc4\\xb9\\x56\\xe4\\xdf\\xab\\xc7\\x21\\xf3\\xa7\\x2c\\xa3\\x62\\x2c\\x9a\\x1f\\\n\\x38\\xa8\\xa3\\xa8\\x5c\\x2c\\x7f\\xe2\\xd8\\xe3\\x5f\\xbe\\x05\\xc6\\x16\\x7e\\\n\\xbc\\xae\\x62\\x7b\\xc0\\x71\\x7f\\x62\\x2b\\xe2\\xe5\\xc1\\x19\\x9d\\x31\\xaf\\\n\\x0a\\x56\\x5a\\x12\\x7e\\x0a\\xdd\\xd3\\x0e\\x7e\\xc3\\x35\\x85\\xc3\\x48\\x77\\\n\\xcb\\xbb\\x71\\x1d\\x1f\\x22\\x21\\xff\\x7e\\x3d\\x0e\\xc1\\xae\\x07\\x05\\xb1\\\n\\x41\\xfc\\xef\\x7f\\x0c\\x6b\\x3c\\x6f\\x41\\xfe\\x2c\\x5b\\xb8\\x21\\xa0\\xbc\\\n\\xd6\\x81\\xed\\x10\\x71\\xf9\\x1f\\xd7\\x52\\x59\\xd2\\x4e\\xa7\\xfa\\x69\\xf9\\\n\\x64\\xc7\\x51\\xc8\\x3b\\x42\\xce\\xb7\\x85\\x85\\xdb\\x9a\\x74\\x3f\\xdc\\xa4\\\n\\x3a\\x65\\xd1\\xbc\\xec\\x79\\x16\\xae\\xfa\\x0a\\xd2\\x17\\xe4\\xd7\\xa0\\xc7\\\n\\x21\\xb8\\xd7\\x0a\\x45\\xc1\\x49\\x3f\\xd1\\xc4\\x62\\xa3\\x67\\x4f\\x80\\x53\\\n\\x8a\\x20\\x44\\xc6\\xbe\\xdf\\xbf\\x6c\\x31\\xb4\\x32\\x3c\\x4e\\x93\\xcc\\x60\\\n\\x6b\\xf1\\xf0\\xf9\\x6a\\x88\\xda\\x54\\x7b\\xc9\\x8e\\xd3\\x99\\x13\\x9c\\x0f\\\n\\x32\\x59\\xf5\\xc1\\x63\\x19\\x7c\\x2f\\xdc\\xa0\\x3a\\x5e\\x60\\xf8\\x7a\\xe5\\\n\\xb8\\x23\\x40\\x8c\\xbe\\x22\\xbf\\x0e\\x3d\\x0e\\xa9\\x2d\\xdd\\xaa\\x8a\\x23\\\n\\x8a\\x9c\\x90\\xd8\\x52\\xaa\\x56\\x74\\x90\\x8a\\xc5\\xad\\xde\\x59\\x5a\\x41\\\n\\x19\\xdc\\x54\\x8d\\x13\\x89\\x68\\x27\\xd8\\x9a\\x0a\\xae\\xd1\\xbb\\x66\\x2b\\\n\\xea\\xf7\\x65\\x98\\x1d\\x27\\xd2\\x53\\xec\\xbf\\x63\\xb2\\xea\\x03\\x26\\x79\\\n\\x74\\x42\\x8f\\xdd\\xe4\\xb6\\xea\\xb1\\x70\\xe3\\x7d\\xdb\\x45\\xf9\\x93\\x5f\\\n\\x4b\\x38\\x87\\x60\\x34\\x83\\xe1\\x2d\\x26\\x84\\xbc\\x86\\x77\\x36\\xf7\\xa8\\\n\\x02\\x95\\x2f\\x8e\\x2c\\x32\\x12\\xb1\\x5e\\xd9\\xa9\\xda\\xa9\\x5e\\xb5\\x39\\\n\\xe0\\x38\\xae\\x7b\\xcc\\x7d\\x6f\\x89\\x5a\\x06\\x37\\x2e\\x64\\xa7\\x14\\x3c\\\n\\xc0\\x64\\xd5\\x0f\\xb7\\x35\\xe1\\x65\\x7e\\x83\\x6d\\xab\\x47\\xf7\\xf9\\x78\\\n\\x21\\x22\\xbf\\x9e\\x70\\x0e\\xe1\\x62\\x20\\x73\\xa0\\x36\\x17\\xe7\\xd5\\xd0\\\n\\xc1\\x37\\x97\\xed\\xee\\xc0\\x79\\x24\\x7f\\x21\\x23\\x65\\x89\\x65\\x2d\\xb5\\\n\\x81\\xeb\\xe0\\xdb\\x5a\\x8f\\xab\\x9f\\x63\\x12\\xa9\\x6d\\x15\\x94\\xc9\\xf6\\\n\\x35\\xf8\\xfc\\x21\\x93\\x34\\x36\\x40\\xd6\\xbd\\x09\\x6f\\x0e\\x33\\xed\\x8b\\\n\\x3d\\xd6\\x00\\x01\\xae\\x2d\\x9d\\xe4\\xec\\xbe\\x5c\\x72\\xb0\\xed\\x3d\\xb2\\\n\\x63\\xed\\x78\\xd2\\x5a\\xfa\\x77\\x52\\x5f\\xf4\\x84\\x2a\\xf8\\xd6\\xaa\\x7f\\\n\\x05\\x9c\\x83\\x9f\\xe1\\x31\\xc5\\x92\\x74\\x11\\x92\\xae\\x26\\x5c\\x12\\xf5\\\n\\x11\\x07\\x98\\xcd\\x36\\x13\\x60\\x4e\\x82\\xdd\\x93\\x56\\xe8\\x48\\x88\\x1b\\\n\\x12\\x7a\\xbb\\x2b\\x85\\xb6\\x3e\\x6c\\x11\\xd4\\x11\\x7c\\xe0\\x06\\xb2\\x09\\\n\\xcd\\x09\\x71\\x7b\\xa6\\xb0\\xca\\x2a\\xfd\\x92\\xdf\\x3c\\xce\\xa2\\xfa\\xdf\\\n\\x7c\\xbc\\x79\\xf5\\x84\\x8b\\x9c\\xda\\x33\\x0b\\x6a\\xf9\\x24\\x2a\\x3e\\x4e\\\n\\x38\\xf2\\xef\\x17\\xb1\\xc6\\x3e\\x82\\x9c\\xdf\\xdf\\x1b\\x58\\xe0\\xbf\\xf1\\\n\\x33\\x7a\\x5c\\x96\\x6a\\xf0\\x1e\\x70\\x83\\x01\\x70\\x34\\x38\\xa7\\x14\\xe7\\\n\\x8c\\xb8\\x58\\x9c\\xd5\\x51\\x4e\\x79\\x20\\xb5\\xd3\\x1e\\x8e\\x99\\x15\\x81\\\n\\x91\\x19\\x56\\x82\\x64\\x7b\\xfe\\x8c\\xb7\\x5c\\xdf\\xa5\\x42\\xc6\\x0b\\x8a\\\n\\x45\\x7a\\x9a\\xdf\\xfc\\x99\\xbd\\x73\\x7c\\xc4\\x8b\\x17\\x2f\\x1f\\x29\\x20\\\n\\x3d\\x1d\\x1f\\x90\\xce\\x8a\\xd7\\x48\\xad\\x73\\xa4\\x8f\\xe0\\x5a\\x2a\\xb2\\\n\\x74\\x41\\x91\\x4d\\x2d\\x6e\\xd9\\x64\\x81\\xbf\\x05\\xfc\\x73\\x74\\xc0\\x36\\\n\\x68\\x15\\xd8\\x32\\x54\\x67\\x00\\x2b\\xe5\\x84\\x61\\xec\\x36\\x54\\xe0\\xbe\\\n\\x29\\xcc\\x8c\\xa1\\xe6\\x3a\\xa1\\x4f\\xa7\\x5b\\x80\\xa2\\xde\\xe4\\x00\\x51\\\n\\x13\\x9f\\xa0\\xf4\\x27\\x6b\\x11\\xf3\\xf4\\x3e\\x8a\\x10\\x16\\x6e\\x9b\\x94\\\n\\xcc\\x6f\\xf0\\xca\\xf1\\xc0\\x69\\x70\\xbd\\xc4\\xc9\\xc5\\x03\\xad\\x69\\xa4\\\n\\x75\\xd5\\xcb\\xa4\\x2a\\x3f\\x49\\x15\\xd1\\x87\\xb2\\xd4\\x0d\\xe2\\xbb\\xdc\\\n\\x72\\xe2\\xab\\xee\\xbc\\xc4\\x07\\x70\\x1a\\x9f\\x5d\\x16\\x05\\x1c\\x9f\\x26\\\n\\x3c\\xcf\\xcb\\xb0\\x93\\x75\\x20\\x9e\\x1d\\x45\\xc4\\xf0\\x17\\xbb\\x20\\xa1\\\n\\xf8\\x02\\xae\\x73\\x6b\\x76\\x2a\\x32\\x27\\x00\\x97\\x65\\x99\\xed\\xaf\\xe0\\\n\\x83\\x36\\xcc\\xfc\\xb5\\x01\\xdc\\xf4\\x5b\\xfc\\x26\\x2f\\x1f\\xc9\\x17\\x8a\\\n\\x1b\\x29\\x31\\x18\\xc0\\x35\\x8e\\x8e\\xf2\\x7f\\x90\\xaa\\x82\\x40\\x27\\x28\\\n\\x56\\xe9\\x8c\\x77\\x06\\xc0\\xf4\\x4a\\xc5\\x7c\\xd3\\x0f\\xd9\\x25\\x84\\x04\\\n\\xb6\\x02\\xec\\x9a\\xc0\\x71\\xa7\\x29\\x31\\x1a\\xb4\\x99\\x22\\xda\\xce\\x89\\\n\\x2d\\x85\\x8b\\x5a\\x57\\x1e\\x3e\\xcb\\xe6\\x54\\x17\\x94\\xcc\\xf6\\xf3\\x19\\\n\\x13\\x5d\\x09\\x69\\x69\\x25\\x5f\\x66\\x26\\xaf\\x3d\\xa0\\x9b\\x78\\x92\\x0b\\\n\\xf6\\xe9\\xee\\x99\\x42\\xa1\\xc3\\xf1\\xd2\\xe1\\x7c\\x3a\\x26\\xd4\\x2d\\xe8\\\n\\x1d\\x8c\\x35\\xc4\\x44\\x73\\xae\\x22\\x27\\x3e\\x52\\x52\\x32\\xaa\\xef\\x6e\\\n\\x0c\\x90\\x3d\\x6e\\xf1\\xad\\x28\\x2a\\x8a\\xbb\\xd8\\x52\\x2b\\x14\\xdf\\x9f\\\n\\xb8\\x65\\x88\\x3b\\x11\\x1c\\x3a\\x95\\x99\\xea\\x3b\\xd0\\x69\\x75\\x59\\xba\\\n\\x8a\\xe2\\x89\\x96\\x4b\\x43\\xf1\\xc2\\x81\\x3c\\xba\\xe9\\xa0\\xba\\x60\\x98\\\n\\xaf\\x13\\xa0\\x26\\x2b\\x56\\x93\\x03\\xfe\\x9a\\xc0\\x09\\x37\\xb3\\xaf\\xba\\\n\\x2e\\xe0\\xdb\\x81\\x30\\xd3\\x16\\x65\\xe2\\xfe\\xb4\\xa6\\xab\\x7b\\xa7\\x4e\\\n\\xe1\\x1a\\x3d\\x33\\xd3\\xb7\\x00\\x87\\xd4\\xa2\\x90\\x38\\x60\\x5e\\x38\\x68\\\n\\x11\\x8a\\xaf\\xe5\\xa5\\x1e\\x1b\\x84\\xa8\\xe3\\x44\\xdd\\x52\\x17\\x0c\\xc6\\\n\\x6f\\xac\\xb4\\x8d\\xe8\\x37\\xef\\xf8\\xc0\\xe8\\x8b\\xd7\\xf8\\xf5\\x41\\x32\\\n\\x72\\x2d\\x79\\x59\\x70\\xe4\\x5c\\x66\\xa2\\xef\\x01\\x03\\xfb\\xa3\\xbc\\x95\\\n\\x34\\x2d\\x7d\\x16\\x72\\x11\\x39\\xa8\\x23\\xf6\\x34\\xa4\\xf8\\x44\\x3a\\x5e\\\n\\x9a\\xca\\x71\\x4d\\x1d\\x33\\x7e\\x66\\xb2\\xdf\\x80\\x86\\xc4\\x2c\\x4f\\x11\\\n\\xad\\x8f\\xf8\\x53\\xe3\\x10\\xdd\\xcf\\x10\\xc6\\x05\\xe0\\x90\\x39\\x5c\\x60\\\n\\x4c\\x10\\x77\\x37\\x98\\xc9\\x89\\x1d\\x99\\x90\\x33\\xe4\\x90\\x23\\x9b\\xa7\\\n\\xd2\\xb0\\xb3\\xba\\x60\\xa8\\x9f\\x23\\xa4\\x3a\\xc5\\x9a\\xf8\\x47\\x66\\xa2\\\n\\xdf\\x82\\x26\\x8f\\x20\\xb2\\x68\\xf6\\xd7\\x9f\\xfd\\xc6\\x21\\xd8\\xd7\\x43\\\n\\x34\\x93\\xe7\\x27\\x78\\x30\\x6e\\x04\\x26\\xb1\\x53\\xfb\\x2d\\x2a\\x6d\\x89\\\n\\x8f\\x61\\x77\\x5c\\x29\\x27\\x5d\\xf2\\xbb\\xfe\\xb0\\xc4\\x1e\\x03\\xba\\xdf\\\n\\x8f\\x61\\x1c\\x9c\\x11\\x6c\\x87\\x64\\x9f\\x00\\x37\\xb4\\xc1\\x80\\xbc\\x9e\\\n\\x77\\x61\\xea\\x05\\x5a\\xa5\\x4b\\x70\\x81\\x6b\\x3c\\xb2\\x69\\x64\\x7f\\xec\\\n\\x9a\\xfc\\x01\\xf7\\x90\\xae\\xbd\\xfe\\xd8\\x68\\xda\\x8f\\x7b\\xcd\\x98\\xe9\\\n\\xeb\\x03\\xb7\\x6d\\xf0\\x3d\\xb8\\xcd\\x07\\x1c\\x31\\x1c\\xb7\\x7b\\x36\\x66\\\n\\x3f\\x79\\x2b\\x3b\\xd4\\xef\\x81\\x95\\x86\\x8b\\xc9\\xb3\\xfc\\x9d\\x75\\xe3\\\n\\xa3\\x22\\x06\\x2d\\xb8\\x6b\\x92\\xdb\\xc1\\x19\\x84\\x1b\\xa1\\x22\\xf6\\x4b\\\n\\x60\\x37\\xc5\\x9d\\x71\\x5e\\x33\\x0f\\x16\\x3d\\x9d\\x74\\x5f\\x19\\x77\\x0a\\\n\\x3e\\x0a\\xc1\\xbe\\xc2\\x40\\x34\\x80\\xb1\\x90\\xee\\x1b\\x16\\xcd\\x14\\x47\\\n\\x4b\\xdc\\xe0\\xcd\\x1d\\x82\\xfb\\xd1\\xd8\\x57\\x18\\x88\\x06\\x86\\x43\\xfa\\\n\\x19\\xe8\\xdc\\x17\\x08\\x18\\xef\\x2e\\x4b\\xb1\\x25\\xfd\\x99\\x7d\\x85\\x81\\\n\\x68\\xe0\\xb6\\x98\\x46\\x70\\x11\\xf9\\xa0\\x8e\\x73\\x6d\\xd1\\x10\\xf3\\x30\\\n\\xed\\xa0\\x0e\\x91\\x56\\x93\\x31\\xa8\\xc7\\x00\\x68\\x25\\xa1\\xa6\\xee\\xa3\\\n\\xa3\\x2c\\x75\\x5f\\xf7\\xb0\\xf7\\xf3\\x00\\xbe\\xc8\\xe5\\xf1\\x17\\x38\\x1a\\\n\\xda\\xa4\\x13\\x1e\\xc7\\xa3\\xdf\\x62\\x26\\x0d\\xc4\\x02\\x08\\x7f\\xad\\x28\\\n\\x6a\\x7d\\xd1\\x93\\x82\\xf1\\x21\\x34\\xdb\\xcb\\x46\\x53\\x87\\x80\\x8d\\x46\\\n\\x66\\xce\\x40\\xac\\xc0\\x64\\x0e\\x45\\xc5\\x9d\\x34\\x22\\xd1\\x43\\x11\\xf7\\\n\\x30\\xb3\\x56\\xb2\\x9a\\x99\\x33\\x10\\x0b\\x70\\x31\\xcc\\x2d\\x9b\\x2e\\xa2\\\n\\xa8\\xd1\\xae\\xf3\\x20\\x1b\\x16\\x8d\\xf2\\x3a\\x44\\x96\\xf2\\x98\\x49\\x03\\\n\\xb1\\xa0\\x22\\xcf\\xf4\\x1b\\x56\\xc3\\xc9\\xc1\\xf6\\xf7\\x85\\xa2\\x87\\x22\\\n\\xee\\x69\\xc6\\x73\\x61\\xfc\\xd1\\xf5\\xb2\\x32\\x03\\x7e\\x00\\x31\\x5f\\xe7\\\n\\x0e\\x39\\xdb\\x9d\\x2b\\x14\\x3d\\x18\\xf1\\x99\\x17\\x7e\\x2e\\xee\\xca\\x61\\\n\\x26\\x0d\\xc4\\x02\\xc8\\xaa\\x8b\\x50\\xd0\\xb5\\xce\\x91\\x42\\xd1\\x43\\x11\\\n\\x37\\xee\\x71\\x87\\x40\\xb8\\x1b\\xdb\\x3e\\x5d\\x03\\x5e\\x28\\x56\\xd3\\x01\\\n\\x14\\x14\\xa3\\x25\\x91\\xe8\\xa1\\x78\\x74\\xeb\\x87\\xaa\\x43\\xca\\xf3\\xa5\\\n\\xf8\\x6c\\x0f\\x1d\\xc8\\x50\\xe4\\x21\\x3f\\xe2\\x82\\x7e\\xdc\\x3c\\x49\\x28\\\n\\x7a\\x28\\x7e\\xdc\\xfc\\x36\\x3d\\x17\\x5a\\xd9\\x19\\x66\\xd2\\x40\\x2c\\xc0\\\n\\x7d\\x5f\\xdc\\x21\\xa7\\xf7\\xce\\x16\\x8a\\x1e\\x8a\\xb8\\xfb\\xdf\\xeb\\x10\\\n\\xd3\\xf5\\x7f\\x0d\\xc6\\xe7\\x01\\x10\\xee\\xae\\x40\\x41\\xbd\\xe3\\x47\\xf4\\\n\\x3b\\xf9\\xd5\\x39\\x2c\\x59\\x2a\\x61\\x26\\x0d\\xe8\\x45\\x79\\x8e\\x74\\x0b\\\n\\x76\\x35\\x28\\x68\\x67\\xe5\\x18\\xa1\\xe0\\xa1\\x88\\x9b\\xc1\\x8d\\x90\\x37\\\n\\x8e\\x50\\x6c\\x52\\x02\\xad\\xdd\\xc0\\x9e\\x8e\\x29\\x42\\xd1\\x43\\xf1\\x5c\\\n\\xf7\\x3c\\x6f\\xeb\\x00\\xa2\\x2d\\x66\\xd6\\x80\\x5e\\x60\\x66\\x8d\\x62\\xe2\\\n\\x26\\x3e\\x3d\\x7b\\x95\\x7b\\x3a\\xfe\\xab\\x3a\\xc4\\x88\\xb0\\x62\\xc4\\x46\\\n\\xcb\\x6f\\xbf\\x04\\x03\\xf1\\x31\\x14\\x13\\x9f\\x3d\\x11\\x09\\x1e\\x8e\\x9a\\\n\\x01\\x7d\\x07\\x33\\x6b\\x40\\x2f\\x70\\x57\\x3c\\xaf\\xdd\\x07\\xda\\xd2\\x84\\\n\\x82\\x87\\x23\\xbe\\x22\\x8a\\xda\\x90\\x4d\\xf9\\xcc\\xac\\x01\\xbd\\x80\\x70\\\n\\x77\\x01\\x8a\\x59\\x55\\x30\\x54\\x57\\x77\\x85\\x5b\\x68\\xdd\\xd6\\x44\\xaf\\\n\\x43\\xac\\x09\\x2f\\x33\\xb3\\x06\\xf4\\x00\\xdf\\x3e\\xd1\\x1b\\x5d\\xbd\\x26\\\n\\x14\\x3c\\x1c\\x71\\x12\\xd2\\xeb\\x0c\\x88\\xb0\\x2c\\x83\\xef\\x65\\xa6\\x0d\\\n\\xe8\\x81\\x47\\x96\\xc6\\x72\\x31\\xf1\\xa1\\x21\\x91\\xe0\\xe1\\x88\\x0f\\x1a\\\n\\x31\\x1b\\x5d\\xcc\\xac\\x01\\x3d\\xc0\\xcd\\x07\\x38\\x08\\xa3\\x98\\x75\\x0b\\\n\\x9f\\xd0\\xf5\\x58\\xf7\\xd5\\xe3\\x0e\\x75\\x57\\xbf\\x12\\xe4\\xe5\\x9a\\x06\\\n\\x22\\x04\\x3e\\x18\\xc4\\x6a\\x36\\x9d\\x87\\x12\\x09\\x1e\\x8e\\xda\\x09\\x45\\\n\\x7c\\x71\\x33\\x33\\x6d\\x40\\x0f\\x20\\xf7\\x70\\xa3\\x90\\xf8\\x32\\x35\\x7c\\\n\\xe2\\x57\\x24\\x78\\x38\\xe2\\x13\\xc2\\x68\\x43\\x91\\x4d\\x3d\\xd7\\xfb\\xa9\\\n\\xaf\\x1b\\x1a\\x1e\\x8b\\xf4\\x10\\xaf\\xd9\\x5d\\xb5\\x6f\\x0a\\xc5\\x0e\\xc7\\\n\\xcb\\x47\\x0b\\xd5\\x67\\x5f\\xa0\\xbb\\x32\\x7e\\x97\\x30\\x16\\xc0\\xd8\\x51\\\n\\x8f\\x42\\x56\\xe5\\x0f\\x25\\x17\\x0e\\xe6\\x09\\x05\\x0f\\x47\\x7c\\xfd\\x14\\\n\\x77\\x2a\\x3a\\x98\\x99\\x36\\x10\\x2d\\x3c\\xd6\\x04\\x89\\x0b\\x89\\x8f\\x0f\\\n\\x88\\xc4\\x8e\\x84\\x3c\\x19\\x84\\xee\\x6a\\xab\\xb1\\x3b\\x51\\x27\\x68\\x64\\\n\\x25\\x9b\\xda\\x50\\xc8\\x1a\\x18\\x3b\\xf0\\xf9\\x47\\x91\\xd8\\xe1\\x78\\x7c\\\n\\x7b\\x46\\x6f\\xeb\\x80\\xd0\\x99\\x99\\x37\\x10\\x2d\\x3c\\x96\\x84\\x27\\xb8\\\n\\x90\\xbb\\xd7\\x99\\x85\\x62\\x47\\x42\\xfe\\xda\\x72\\x4c\\x2a\\xf1\\x85\\x9f\\\n\\xcc\\xbc\\x81\\x68\\x01\\xa1\\xae\\x82\\x42\\xe2\\xda\\x05\\xbe\\xb8\\x40\\x24\\\n\\x76\\x38\\x6a\\x5b\\x07\\x70\\xe0\\xfd\\x04\\x51\\xbc\\xa0\\x38\\x87\\xdc\\x06\\\n\\x35\\x9a\\x3e\\xc8\\xe9\\x7d\\xd9\\x9a\\x58\\xf0\\x50\\xc4\\x44\\xb0\\x71\\xf1\\\n\\xd3\\x5e\\x67\\xc8\\xd2\\x59\\xfc\\x79\\x0c\\x66\\xde\\x40\\xb4\\xf0\\xd8\\x4c\\\n\\xbf\\xe7\\x35\\x5b\\xcf\\x22\\x14\\x72\\x5f\\xf3\\x64\\xb5\\x75\\x40\\xa4\\x96\\\n\\xce\\x4c\\x1b\\xd0\\x03\\xed\\x34\\xfb\\xc9\\x5d\\x33\\x84\\x82\\x87\\x22\\xae\\\n\\x0a\\xf2\\xd7\\x81\\x80\\x33\\x0e\\xf4\\xa7\\x37\\x4f\\xdc\\x90\\xd0\\x2e\\xd3\\\n\\xe2\\xcb\\x0d\\x44\\xa2\\x07\\x23\\xbe\\x82\\xaa\\x69\\xe9\\x73\\x6a\\xeb\\x70\\\n\\xdb\\xa4\\x51\\xcc\\xac\\x01\\xbd\\xa8\\x2c\\x48\\xf8\\x01\\x17\\x34\\xba\\xfc\\\n\\xc3\\x49\\xdf\\xb6\\xca\\xcf\\x85\\x71\\x68\\x31\\x33\\x69\\x20\\x56\\x80\\xa0\\\n\\xf4\\xc7\\xc2\\xf0\\x35\\x20\\x91\\x64\\xe8\\x38\\x03\\xbc\\xd5\\xe3\\x7d\\x57\\\n\\x23\\x63\\x97\\xd1\\x55\\xc5\\x11\\x8a\\x2c\\x3d\\xce\\xc5\\xc5\\x1f\\x06\\x08\\\n\\xf5\\xc2\\x67\\x7c\\x92\\x16\\xd7\\xd8\\x79\\x79\\x9c\\x40\\xac\\xb0\\x99\\x7e\\\n\\xc2\\x4c\\x19\\x88\\x17\\x60\\x40\\x76\\x70\\x91\\x71\\x90\\xde\\xbe\\xf6\\x2d\\\n\\x3a\\xc8\\xe3\\x9b\\x55\\x71\\xac\\xc0\\x5d\\x8b\\xbb\\xea\\x93\\x89\\xf6\\x45\\\n\\x9b\\x38\\x88\\x1b\\xce\\xb8\\x46\\xc0\\x69\\x72\\xa8\\xed\\x99\\x6e\\xab\\xe9\\\n\\x0a\\x17\\x3c\\x24\\x31\\x99\\xb4\\x0d\\xbe\\x87\\x9d\\x6e\\xe0\\x5a\\x01\\x5f\\\n\\x79\\x01\\x8e\\x59\\x03\\x82\\x7f\\x26\\x74\\x04\\x8c\\x37\\x1e\\x39\\xf1\\x45\\\n\\x63\\xe2\\xb0\\x8f\\x41\\x7f\\x8c\\x12\\x73\\x14\\xd9\\x34\\x06\\xdf\\xb6\\x5a\\\n\\x69\\x4d\\x7c\\x4a\\xb1\\x0d\\xf9\\x05\\x3b\\x6c\\xc0\\x80\\x81\\x1b\\x14\\x83\\\n\\x06\\xfd\\x1f\\x16\\x0d\\xb8\\x4b\\x27\\x09\\x1d\\x06\\x00\\x00\\x00\\x00\\x49\\\n\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x15\\xfe\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x50\\x00\\x00\\x00\\x50\\x08\\x06\\x00\\x00\\x00\\x8e\\x11\\xf2\\xad\\\n\\x00\\x00\\x00\\x04\\x73\\x42\\x49\\x54\\x08\\x08\\x08\\x08\\x7c\\x08\\x64\\x88\\\n\\x00\\x00\\x00\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x04\\x65\\x00\\x00\\x04\\x65\\\n\\x01\\x59\\x90\\x9b\\x60\\x00\\x00\\x00\\x19\\x74\\x45\\x58\\x74\\x53\\x6f\\x66\\\n\\x74\\x77\\x61\\x72\\x65\\x00\\x77\\x77\\x77\\x2e\\x69\\x6e\\x6b\\x73\\x63\\x61\\\n\\x70\\x65\\x2e\\x6f\\x72\\x67\\x9b\\xee\\x3c\\x1a\\x00\\x00\\x15\\x7b\\x49\\x44\\\n\\x41\\x54\\x78\\x9c\\xed\\x9c\\x79\\x7c\\x54\\xd5\\xd9\\xc7\\xbf\\xf7\\xde\\xd9\\\n\\xb2\\xef\\x1b\\x81\\x84\\x04\\xd9\\x83\\x22\\x44\\x20\\x14\\x34\\x58\\x01\\x45\\\n\\xa9\\xad\\x0a\\x1f\\x77\\x71\\xdf\\x5e\\xfb\\x5a\\x5b\\x0b\\x7d\\x6b\\x35\\xad\\\n\\x6f\\x15\\x7d\\xd5\\xb6\\x74\\x51\\xa9\\x4b\\x5d\\xab\\x08\\x8a\\x4b\\x51\\x20\\\n\\x42\\x10\\x81\\x84\\x7d\\x93\\x2d\\x92\\x7d\\x83\\xec\\xeb\\xcc\\x64\\x66\\xee\\\n\\x79\\xff\\x98\\x24\\x92\\x99\\x3b\\x33\\x77\\x42\\xa2\\xfe\\xe1\\xef\\xf3\\xc9\\\n\\x1f\\x39\\xe7\\xb9\\xe7\\x3c\\xe7\\x77\\xcf\\xf2\\x9c\\xe7\\x79\\xe6\\xc2\\x0f\\\n\\xf8\\x01\\xdf\\x25\\xa4\\xef\\x5a\\x81\\x5e\\xcc\\x7f\\x6a\\xc7\\x33\\x08\\x7e\\\n\\xa9\\x47\\x56\\x42\\x3c\\xf3\\xd9\\xb2\\x99\\x0f\\x0f\\xb5\\x4e\\x7a\\x20\\x7f\\\n\\xd7\\x0a\\xf4\\x41\\x70\\xb1\\x7e\\x51\\x49\\xb7\\xec\\x50\\xe3\\x7b\\x31\\x03\\\n\\x73\\xff\\xb4\\x39\\xda\\x6c\\xb7\\x34\\xc8\\xb2\\xa4\\xdc\\xfb\\x93\\x6c\\x0c\\\n\\x06\\xed\\xf7\\xea\\x74\\xaa\\x3c\\xff\\xd1\\x6e\\x54\\x55\\xb8\\x5c\\x18\\xe3\\\n\\xf2\\x97\\x65\\xb7\\x7e\\xcb\\xaa\\x7a\\xe1\\x7b\\x31\\x03\\x4d\\xdd\\xe6\\x5c\\\n\\x40\\x49\\x89\\x8d\\xf0\\x49\\x1e\\x80\\xc1\\x20\\x93\\x12\\x1b\\x0e\\xa0\\x28\\\n\\x38\\x73\\xbf\\x1d\\xed\\xfc\\xe3\\x7b\\x41\\xa0\\x24\\xe4\\x8b\\x00\\x86\\x27\\\n\\x46\\x06\\x94\\x4d\\x4d\\x70\\xcb\\x48\\x88\\x8b\\x86\\x56\\x2b\\x7d\\xf8\\x5e\\\n\\x10\\x08\\x62\\x0e\\x40\\x6a\\x7c\\x44\\x40\\xc9\\xe1\\x09\\x6e\\x19\\x81\\x34\\\n\\x67\\x68\\x75\\xd2\\x87\\xef\\x9c\\xc0\\x85\\xcf\\xec\\x8e\\x07\\xce\\x35\\x28\\\n\\x32\\x29\\x71\\xe1\\x01\\xe5\\x87\\xc5\\x45\\xa0\\xc8\\x32\\x20\\xce\\xfd\\xf1\\\n\\x13\\x45\\x71\\x43\\xae\\x60\\x00\\x7c\\xe7\\x04\\x3a\\x1c\\xdd\\xb3\\x01\\x29\\\n\\x29\\x26\\x1c\\x83\\x12\\x58\\x1d\\x45\\x91\\x49\\x8e\\x0d\\x03\\x90\\x15\\xc5\\\n\\x35\\x7b\\xa8\\xf5\\x0b\\x84\\xef\\x9c\\x40\\x15\\x29\\x17\\xf4\\xed\\x7f\\xbd\\\n\\xe8\\xdb\\x07\\x05\\xb9\\x43\\xa1\\x53\\x30\\x30\\x7c\\x17\\x9d\\xe6\\xe5\\x09\\\n\\xb9\\xd0\\x52\\x34\\x13\\xc4\\x62\\x81\\x74\\x13\\x08\\x86\\xe9\\x58\\xbe\\xbd\\\n\\xf8\\x66\\xaf\\x94\\x6f\\xb9\\x74\\xf9\\x0e\\xd9\\xa5\\xf2\\xee\\x8f\\xba\\x67\\\n\\xec\\xc8\\xcb\\x93\\xd4\\xa1\\xd1\\xd8\\x37\\xbe\\x55\\x3b\\x70\\xfe\\x1f\\x77\\\n\\xa7\\xa0\\x38\\x1e\\x04\\xae\\x07\\x86\\xf7\\x96\\x5b\\x4c\\x06\\x6e\\x5f\\x70\\\n\\xbe\\x5f\\x13\\xe6\\x4c\\x38\\x9d\\x2a\\x2f\\xaf\\xdb\\x87\\xad\\xdb\\x79\\x66\\\n\\x71\\x15\\xf0\\xb6\\x22\\x2b\\x7f\\x5a\\xf7\\xeb\\x69\\x75\\x83\\xa9\\xb7\\x3f\\\n\\x7c\\x2b\\x04\\xce\\x7d\\xea\\xcb\\x61\\x92\\xaa\\x2c\\x45\\xe2\\x4e\\x09\\x42\\\n\\x00\\x22\\x42\\x4d\\x8c\\x19\\x1e\\xc7\\x98\\x11\\x71\\x24\\xc4\\x84\\x05\\xad\\\n\\x88\\x00\\xea\\x9b\\x3b\\x39\\x5e\\xd9\\x48\\x71\\x55\\x23\\xed\\x5d\\xdd\\xbd\\\n\\xe5\\x56\\x09\\xb1\\x52\\x95\\xd4\\xa7\\x37\\x2e\\x9d\\x55\\x33\\xc8\\x43\\xf1\\\n\\xc2\\x90\\x12\\x98\\x9b\\xb7\\xd9\\x60\\x0a\\xb1\\x2c\\x95\\x04\\x8f\\x00\\x16\\\n\\x09\\xc8\\x48\\x89\\x61\\xca\\xd8\\x64\\x86\\xc5\\x47\\x0e\\x5e\\xe7\\x02\\xaa\\\n\\x1b\\xdb\\xd8\\x73\\xbc\\x8e\\xb2\\xda\\x66\\x84\\xbb\\xd4\\x06\\x3c\\x6e\\xb7\\\n\\xd9\\x9e\\x2e\\xc8\\x9b\\xe3\\xf4\\xfb\\xfc\\x59\\x60\\xc8\\x08\\x9c\\xf7\\xc4\\\n\\xf6\\x71\\x92\\x2c\\xbd\\x06\\x4c\\x93\\x80\\x51\\xa9\\xb1\\x4c\\x1b\\x3f\\x8c\\\n\\x84\\xe8\\xb0\\xa1\\xea\\x12\\x80\\xfa\\x96\\x4e\\x8a\\x8e\\xd6\\x50\\x52\\xdd\\\n\\x84\\x00\\x04\\x14\\xca\\x92\\x6b\\xc9\\x67\\x4b\\x67\\x1d\\x1f\\x8a\\xfe\\x74\\\n\\x11\\x38\\xf7\\xc9\\xc2\\x79\\x0a\\x62\\xa6\\x90\\xc5\\xba\\x1c\\x6b\\xce\\xee\\\n\\x40\\x9b\\xf5\\xfc\\xa7\\x0a\\x6f\\x45\\x88\\x7f\\x00\\x96\\xc8\\x30\\x33\\x3f\\\n\\x9e\\x92\\x41\\x5a\\x52\\xd4\\xa0\\x28\\xac\\x17\\x15\\xa7\\x5a\\xc9\\xdf\\x53\\\n\\x4a\\x7b\\x97\\x1d\\x49\\xc2\\xaa\\xc2\\xbd\\x1b\\x96\\xe6\\xbc\\xe6\\xef\\x99\\\n\\xbc\\x3c\\x21\\x6f\\x37\\x15\\x5e\\x20\\x4b\\x5c\\xa6\\xca\\xd2\\xb6\\x0d\\x4b\\\n\\x67\\x6c\\x0c\\xd4\\x4f\\x40\\x02\\x2f\\x5b\\xb1\\xce\\xac\\x76\\xc5\\x7c\\x05\\\n\\x8c\\xea\\x29\\xaa\\x97\\x04\\x1b\\x84\\x24\\xd6\\x99\\x0c\\xa6\\x0d\\x1f\\xff\\\n\\x2a\\xbb\\xa1\\x4f\\x58\\x08\\x69\\xfe\\xf2\\x1d\\xbf\\x47\\x92\\x7e\\x27\\x01\\\n\\x93\\x32\\x93\\x98\\x75\\xee\\x08\\x8c\\x06\\x25\\x50\\x37\\x43\\x02\\x87\\xd3\\\n\\xc5\\xd6\\x43\\x95\\x1c\\x3e\\x79\\xaa\\x67\\x59\\x4b\\x7f\\x58\\xbf\\x74\\x7a\\\n\\x1e\\x92\\x24\\x7a\\x65\\x16\\x3e\\xb3\\x3b\\xbe\\xdb\\xd9\\x3d\\x4f\\x12\\xd2\\\n\\x02\\x21\\x31\\x1f\\x88\\xef\\xa9\\xfa\\x5a\\x0e\\x6d\\xce\\xfa\\xf4\\xe7\\x0b\\\n\\xec\\xfe\\xfa\\x08\\x48\\xe0\\xfc\\x27\\x77\\x2c\\x45\\x62\\x79\\x44\\xa8\\x19\\\n\\x45\\x91\\x68\\x69\\xb7\\x9d\\x59\\xad\\x02\\xbb\\x40\\xac\\x93\\x25\\x79\\x83\\\n\\xaa\\xaa\\xf7\\x21\\x49\\x37\\xc9\\xb2\\xc4\\xdc\\xec\\x4c\\xc6\\xa5\\xc5\\xfb\\\n\\x68\\xb5\\x3f\\xec\\x0e\\x17\\x35\\x0d\\x6d\\x54\\x37\\x74\\xd0\\xd8\\xda\\x45\\\n\\x73\\xbb\\x0d\\x9b\\xa3\\xff\\xb6\\x65\\x31\\x1a\\x88\\x89\\xb4\\x10\\x17\\x19\\\n\\x4a\\x6a\\x7c\\x04\\xa9\\xf1\\x11\\x98\\x8c\\xfa\\x5e\\xcc\\x91\\xf2\\x7a\\x3e\\\n\\xdf\\x5d\\x8a\\x2a\\x04\\x20\\xbd\\x2e\\x4b\\x3c\\xef\\x42\\xcc\\x97\\x04\\x97\\\n\\x01\\x17\\x70\\x86\\x3d\\x1c\\x1d\\x61\\xc1\\xe5\\x12\\xb4\\x77\\xd9\\x01\\x96\\\n\\xae\\x5f\\x96\\xf3\\xb4\\xbf\\xb6\\xfd\\x12\\x78\\xc9\\xf2\\x2f\\xd3\\x64\\x94\\\n\\x63\\x32\\x84\\x2c\\x9a\\x33\\x81\\x94\\xb8\\x08\\xba\\xec\\x0e\\xca\\xeb\\x5a\\\n\\x28\\xad\\x6d\\xa5\\xfc\\x54\\x33\\xdd\\x8e\\xfe\\xab\\xd9\\x62\\x36\\x8a\\x2b\\\n\\x7f\\x34\\x46\\x4a\\x8e\\x0d\\x60\\xd7\\x09\\x38\\x59\\xdb\\xc4\\x91\\xb2\\x06\\\n\\xca\\xea\\x5a\\x50\\x55\\xe1\\x5f\\xde\\x03\\x8a\\x2c\\x33\\x32\\x25\\x9a\\x09\\\n\\x23\\xe3\\xc9\\x4c\\x8e\\x09\\x38\\x15\\x6a\\x1b\\xdb\\xf9\\x68\\xfb\\x09\\x61\\\n\\xb3\\x3b\\xfb\\x49\\x9a\\x8c\\x0a\\xe9\\x49\\xd1\\x64\\xa4\\x44\\x91\\x9e\\x1c\\\n\\x4d\\xa8\\xd9\\x48\\x4d\\x43\\x3b\\xab\\x0b\\x8e\\x20\\xa0\\xcb\\x85\\x6b\\x7c\\\n\\xfe\\xb2\\x59\\x15\\xbe\\xda\\xf5\\x6b\\x48\\x2b\\x28\\xbf\\x07\\x42\\x32\\x53\\\n\\x63\\x49\\x89\\x73\\x1b\\xaf\\xa1\\x66\\x23\\xe3\\xd3\\x13\\x18\\x9f\\x9e\\x80\\\n\\xc3\\xa5\\x52\\x79\\xba\\x95\\xb2\\xba\\x56\\xca\\x6a\\x5b\\x70\\x3a\\x5d\\xfc\\\n\\x6c\\xf6\\x38\\x29\\x21\\x3a\\xd4\\xef\\x60\\x8e\\x57\\x36\\xb2\\xf3\\x48\\x35\\\n\\x4d\\xed\\x56\\x00\\x24\\x09\\x46\\x26\\x86\\x33\\x3a\\x25\\x82\\xf4\\x84\\x30\\\n\\x86\\xc5\\x86\\x10\\x1d\\x66\\xea\\xf7\\x4c\\x73\\x67\\x37\\x35\\x4d\\x56\\xca\\\n\\x4f\\x77\\x52\\x5c\\xd7\\x4e\\x45\\x7d\\x07\\x27\\xab\\x9b\\x38\\x59\\xdd\\x44\\\n\\x6c\\x64\\x08\\x33\\x26\\xa4\\x32\\x7a\\xb8\\xef\\xab\\x71\\x4a\\x5c\\x04\\x57\\\n\\x5d\\x38\\x4e\\xfa\\x60\\xcb\\x31\\x0c\\x06\\x85\\x91\\x29\\xd1\\x8c\\x4c\\x8e\\\n\\x22\\x2d\\x21\\xca\\xcb\\xfe\\x1c\\x16\\x1f\\x41\\xe6\\xb0\\x58\\x4e\\xd6\\x34\\\n\\x85\\x2a\\x28\\x79\\xc0\\x6d\\xbe\\xda\\xf5\\xf9\\xde\\x2e\\x7d\\x72\\xdb\\x05\\\n\\x42\\x92\\x0b\\x15\\x59\\x96\\x6f\\x9a\\x3f\\x89\\xa8\\x30\\x8b\\x5f\\x52\\xc0\\\n\\xbd\\x14\\xcd\\x7e\\x96\\x55\\x6b\\xa7\\x8d\\xcf\\xf7\\x94\\x51\\x79\\xda\\xed\\\n\\x07\\x8d\\x0e\\x33\\x31\\x27\\x2b\\x89\\xe9\\x63\\xe2\\xbd\\x08\\x0b\\x84\\xe6\\\n\\x8e\\x6e\\x8a\\x8a\\x1b\\x28\\x38\\x7c\\x8a\\x96\\x4e\\xb7\\x0d\\x98\\x9e\\x14\\\n\\xc5\\x9c\\xa9\\x19\\x44\\x85\\x9a\\x07\\xac\\x63\\x2f\\x5a\\x3a\\x6c\\xbc\\xb9\\\n\\xe1\\x10\\x2e\\x55\\x55\\x55\\x49\\x9e\\xbe\\x71\\xe9\\xf4\\xdd\\x5a\\x72\\x9a\\\n\\x04\\xe6\\xe5\\x09\\x79\\x87\\xa5\\x70\\x17\\x30\\x65\\xda\\xb8\\x54\\x72\\xb2\\\n\\x86\\x6b\\x89\\x05\\x85\\x13\\x95\\x8d\\x7c\\xbe\\xb7\\x94\\x6e\\x87\\x8b\\x50\\\n\\xb3\\x81\\x85\\xd9\\xa9\\xcc\\x9e\\x90\\xa8\\xcb\\x81\\xe0\\x0f\\x0e\\xa7\\xca\\\n\\xd6\\xa3\\xa7\\xf9\\x64\\x57\\x35\\x5d\\xdd\\x4e\\xcc\\x46\\x85\\x1f\\x67\\x67\\\n\\x32\\x3a\\x35\\xf6\\xac\\x75\\xde\\x7e\\xb8\\x8a\\x5d\\xc7\\xaa\\x01\\xf6\\xe4\\\n\\xd8\\x66\\x4c\\xd3\\xb2\\x3e\\x34\\x5f\\x85\\xe9\\xb2\\x4b\\xaf\\x97\\xe0\\xfe\\\n\\x50\\x8b\\x91\\xcb\\xa6\\x9f\\x83\\x72\\x16\\x83\\x14\\x40\\xe1\\xe1\\x2a\\xb6\\\n\\x1c\\x28\\xc7\\xa5\\x0a\\xa6\\x64\\xc6\\xf2\\xc0\\xe5\\x63\\x19\\x9b\\x1a\\x85\\\n\\x2c\\x9f\\xbd\\x19\\xaa\\xc8\\x12\\x19\\x49\\xe1\\xe4\\x8c\\x4d\\xa0\\xa1\\xcd\\\n\\x4e\\x55\\x63\\x17\\xc5\\x55\\x4d\\x80\\x44\\x6a\\xc2\\xd9\\x19\\xeb\\x49\\x31\\\n\\x61\\x1c\\x29\\xaf\\xc7\\xe1\\x54\\x87\\x55\\x19\\x2a\\x4f\\x9c\\xcc\\x7f\\xf9\\\n\\x90\\x57\\xff\\x9e\\x05\\xf3\\xfe\\xef\\x40\\x98\\xa4\\x3a\\xd6\\x02\\x91\\x17\\\n\\x4d\\x4e\\xef\\xdb\\xfb\\x06\\x02\\x01\\x6c\\xde\\x5b\\xc6\\xbe\\xe2\\x5a\\x14\\\n\\x59\\xe2\\xba\\x59\\x23\\xb9\\x2a\\x27\\x4d\\xd7\\x12\\x0a\\x16\\x66\\xa3\\x42\\\n\\xf6\\x39\\x71\\x84\\x5b\\x0c\\x1c\\xa9\\x6a\\xa3\\xea\\x74\\x1b\\x56\\xbb\\x93\\\n\\x8c\\x94\\xe8\\x01\\xb7\\xa9\\x28\\x32\\x16\\xa3\\x42\\x49\\x6d\\x0b\\x20\\x4d\\\n\\x9f\\x30\\xeb\\xde\\x17\\x4f\\x14\\xac\\x74\\x9c\\x29\\xe3\\x35\\xb5\\x24\\xb5\\\n\\xf3\\x4e\\x60\\xb8\\x2c\\x49\\x0c\\x3b\\x0b\\xf2\\x00\\x0a\\xbf\\xaa\\xe2\\x50\\\n\\xc9\\x29\\xcc\\x06\\x99\\xfb\\x2e\\x1d\\xc3\\x85\\x13\\x93\\xce\\xaa\\x3d\\x3d\\\n\\xc8\\xcd\\x4a\\xe6\\xbe\\x4b\\xc7\\x60\\x36\\xc8\\x1c\\x3c\\x79\\x8a\\xa2\\x23\\\n\\x55\\x67\\xd5\\x5e\\x4a\\x5c\\x04\\xb2\\x24\\x01\\x0c\\xef\\xb6\\x38\\xef\\xf4\\\n\\xac\\xf7\\x22\\xd0\\x6e\\xb5\\xbf\\x24\\x04\\x5b\\x54\\x21\\x58\\xb3\\xe5\\x28\\\n\\x4d\\x6d\\xd6\\x01\\x75\\x7c\\xa2\\xb2\\x91\\x9d\\x47\\xab\\x91\\x65\\x89\\x3b\\\n\\xe7\\x8e\\x66\\x62\\xda\\xc0\\x67\\x42\\xb0\\xc8\\x4a\\x8b\\xe6\\x8e\\xb9\\xa3\\\n\\x91\\x65\\x89\\xa2\\x23\\xd5\\x7c\\x5d\\xdd\\x34\\xa0\\x76\\x1a\\xdb\\xac\\xbc\\\n\\xff\\xc5\\xd1\\x1e\\xfb\\x91\\x02\\xbb\\xcd\\xfa\\xb2\\xa7\\x8c\\x17\\x81\\x05\\\n\\x79\\x73\\x3a\\xcc\\x76\\xe3\\x02\\x60\\x63\\xa7\\xcd\\xc1\\x7b\\x5f\\x1c\\x15\\\n\\xf5\\xad\\x9d\\x41\\x75\\xdc\\xd2\\x61\\x23\\x7f\\x4f\\x29\\x00\\x8b\\x67\\xa6\\\n\\x91\\x95\\xfe\\xed\\x91\\xd7\\x8b\\x49\\xe9\\xd1\\x5c\\x93\\x93\\x86\\x00\\xf2\\\n\\x77\\x97\\xd0\\xda\\xe9\\xf7\\x42\\xe1\\x85\\xfa\\x96\\x4e\\x56\\x6f\\x39\\x22\\\n\\x3a\\x6d\\x0e\\x24\\xc4\\x06\\x93\\xcd\\x78\\x79\\x41\\xde\\x9c\\x0e\\x4f\\x39\\\n\\xcd\\xd3\\xe1\\xe3\\xbc\\xec\\x2e\\xbb\\xcd\\xf6\\x13\\x10\\xff\\xb1\\xd9\\x1c\\\n\\xd2\\x9a\\x82\\xa3\\xd4\\x35\\x79\\x3d\\xeb\\x13\\x9b\\xf6\\x96\\xe2\\x70\\xba\\\n\\x98\\x3a\\x2a\\x8e\\xdc\\xac\\xe4\\xa0\\x14\\x1f\\x4c\\x5c\\x3c\\x29\\x99\\xf3\\\n\\x33\\x62\\xb1\\x3b\\x5c\\x6c\\xde\\x5b\\xa6\\xfb\\xb9\\xba\\xa6\\x0e\\xd6\\x6c\\\n\\x39\\x8a\\xcd\\xee\\x94\\x10\\x7c\\x62\\xb3\\xd9\\xaf\\xfc\\x38\\x2f\\xbb\\x4b\\\n\\x4b\\xd6\\xe7\\xf1\\x5a\\x90\\x37\\xc7\\x16\\x69\\x8b\\xba\\x4a\\xc0\\x07\\x76\\\n\\x87\\x8b\\xf7\\xb7\\x1e\\x13\\xd5\\x0d\\x6d\\x01\\x3b\\x2f\\xae\\x6a\\xa4\\xf2\\\n\\x74\\x1b\\x61\\x66\\x03\\xd7\\xcd\\x4a\\xd7\\xad\\xf4\\x50\\xe1\\xba\\xd9\\x23\\\n\\x09\\x35\\x19\\x28\\x3f\\xd5\\xc2\\x49\\x1d\\x4b\\xb9\\xba\\xa1\\x8d\\xf7\\xb7\\\n\\x1e\\x13\\x76\\x87\\x0b\\xe0\\xfd\\x48\\x7b\\xe4\\xd5\\x05\\x79\\x73\\x6c\\xbe\\\n\\xe4\\x03\\x9e\\xf2\\xb9\\x79\\x9b\\x0d\\x26\\x8b\\xe5\\x0d\\x09\\xae\\x35\\x18\\\n\\x64\\xb1\\x30\\x67\\x8c\\xe4\\xcb\\xb3\\x22\\x80\\xb7\\x36\\x1e\\xa2\\xb1\\xb5\\\n\\x8b\\x6b\\x67\\xa5\\x07\\x3d\\xfb\\x9c\\x2e\\x95\\xbd\\x27\\x9b\\xd8\\x57\\xda\\\n\\x4c\\x55\\x63\\x27\\x9d\\x76\\x17\\x00\\x61\\x66\\x85\\x11\\xf1\\x61\\x9c\\x97\\\n\\x11\\xc3\\xd4\\xcc\\xd8\\xa0\\x6d\\xc7\\xcf\\x0f\\xd5\\xf2\\xde\\xb6\\x0a\\x12\\\n\\xa2\\xc2\\xb8\\x6e\\x6e\\x96\\xcf\\x41\\x57\\x9c\\x6a\\xe5\\xe3\\x1d\\x27\\x84\\\n\\xd3\\xa9\\x4a\\x48\\xd2\\xbf\\xed\\x56\\xeb\\xcd\\x81\\x7c\\x89\\x01\\xed\\x89\\\n\\xb2\\x82\\xd7\\xd4\\x29\\x77\\xcd\\x5f\\xdb\\xdd\\x14\\x95\\xae\\x0a\\x31\\xb9\\\n\\xb8\\xaa\\x89\\x11\\x89\\x91\\x44\\x68\\x58\\xfb\\xe5\\xb5\\x2d\\xec\\x2b\\xae\\\n\\x23\\x3a\\xcc\\xc4\\x92\\x8b\\x47\\x05\\x65\\xe7\\xed\\x2d\\x69\\xe2\\x1f\\x9f\\\n\\x9d\\x60\\xfb\\xf1\\x7a\\xea\\x5a\\xac\\x74\\xd9\\x5d\\x38\\x5c\\x2a\\x0e\\x97\\\n\\x4a\\x97\\xdd\\x45\\x6d\\xb3\\x95\\xfd\\xa5\\xcd\\xec\\x2c\\x6e\\x24\\x26\\xc2\\\n\\x44\\x4a\\x4c\\x88\\xee\\xb6\\x47\\xc4\\x87\\xb1\\xed\\x58\\x3d\\xcd\\x1d\\x36\\\n\\x52\\xe2\\xc2\\x89\\x0e\\xf7\\xbe\\x55\\xd5\\x36\\xb6\\xb3\\x76\\xeb\\x71\\x5c\\\n\\x2e\\x55\\x02\\xfe\\x15\\x99\\x59\\x79\\xeb\\xba\\xfb\\xaf\\x70\\x05\\x6a\\x5b\\\n\\xd7\\xab\\x7c\\x6f\\xf1\\x62\\xd7\\x0c\\xfb\\x8c\\xdb\\x40\\xd4\\xba\\x54\\xb5\\\n\\x27\\x2e\\xeb\\x8d\\xaf\\xca\\xeb\\x01\\xc8\\xcd\\x4a\\xd2\\x3d\\x4b\\x54\\x21\\\n\\x58\\xb5\\xad\\x9c\\x95\\x1b\\x8a\\x69\\x6c\\xb7\\x83\\xc4\\x61\\x24\\xf1\\x0b\\\n\\x50\\xb2\\x4c\\x06\\x63\\x82\\xc9\\x60\\x4c\\x10\\x2e\\x75\\x92\\x10\\x3c\\x04\\\n\\xe2\\xab\\x86\\x76\\x3b\\x2f\\xae\\x2f\\x66\\xf5\\xf6\\x8a\\xde\\xd3\\x31\\x20\\\n\\x8c\\x8a\\x4c\\x6e\\x96\\xdb\\x84\\x3a\\x52\\xd6\\xa0\\x29\\x23\\xcb\\x32\\x2e\\\n\\x55\\x05\\x44\\x6d\\x8e\\x6d\\xc6\\xed\\xef\\x2d\\x5e\\x1c\\x90\\x3c\\x08\\x22\\\n\\x2a\\xb7\\xcb\\xfc\\x65\\x14\\x18\\x92\\x15\\x45\\x26\\x5e\\xc3\\x59\\xd0\\xed\\\n\\x70\\x51\\x5a\\xd3\\x82\\x2c\\x49\\xcc\\x18\\xa3\\xcf\\x8d\\x05\\xf0\\xfe\\x8e\\\n\\x4a\\x36\\x1d\\xaa\\x03\\xe8\\x06\\xf1\\x50\\x64\\x46\\xd5\\x0b\\x1a\\xca\\x37\\\n\\x00\\x87\\x17\\xad\\x5a\\xb5\\xa2\\xb5\\x64\\xc4\\x7d\\x12\\x3c\\x9b\\x7f\\xb0\\\n\\xd6\\x28\\xc9\\x12\\x57\\xcf\\x18\\xa1\\xab\\x9f\\x9c\\x31\\x09\\x7c\\xbc\\xab\\\n\\x8a\\x93\\x35\\xcd\\x38\\x5c\\x2a\\x46\\x8f\\x17\\x1c\\x1f\\x1d\\x8a\\xa2\\xc8\\\n\\xb8\\x5c\\x6a\\x72\\x41\\x54\\x41\\x24\\xd0\\xa2\\xa7\\x5d\\xdd\\x9b\\x89\\x13\\\n\\xc3\\x54\\x40\\x4a\\x8c\\x0e\\xeb\\x35\\x2c\\xfb\\xa1\\xa6\\xa1\\x1d\\x97\\xaa\\\n\\x92\\x91\\x14\\xae\\xdb\\x31\\xb0\\xbf\\xac\\x89\\xfc\\x83\\xb5\\x00\\xdd\\x42\\\n\\x92\\xae\\x58\\xbf\\x6c\\xe6\\xdf\\xfd\\xbd\\xf9\\xf7\\x16\\x2f\\x76\\x6d\\x58\\\n\\x96\\xf3\\x57\\x55\\x48\\x57\\x00\\xdd\\xf9\\xfb\\x6b\\x38\\x58\\xde\\xac\\xab\\\n\\xaf\\x98\\x70\\x13\\xe9\\x09\\xe1\\xb8\\x5c\\x2a\\x35\\x0d\\xed\\x5e\\xf5\\x8a\\\n\\x24\\x91\\x10\\x15\\x0a\\x20\\x59\\xba\\xcd\\x53\\x75\\x35\\x4a\\x10\\x04\\x0a\\\n\\x99\\xe9\\x00\\x49\\xb1\\xda\\x31\\x8d\\xea\\x46\\xb7\\x52\\x63\\x87\\xe9\\x0b\\\n\\x90\\xbb\\x5c\\x82\\x35\\xdb\\x2b\\xdd\\x6d\\x0b\\xe9\\x01\\x3d\\xee\\xf3\\x5e\\\n\\x6c\\xfc\\xcd\\x8c\\x0d\\x02\\x1e\\x14\\xc0\\xea\\xed\\x15\\xb8\\x74\\xfa\\x12\\\n\\xc7\\xa6\\xba\\x75\\xab\\xae\\xf7\\x26\\x10\\xa0\\xd7\\x87\\x29\\x84\\x34\\x5d\\\n\\xaf\\x2e\\xba\\x09\\x94\\x84\\x94\\x09\\x10\\x1f\\xa5\\xbd\\x79\\x37\\xb6\\xba\\\n\\x6f\\x2c\\x69\\x09\\xfe\\x7d\\x81\\xbd\\xd8\\x5b\\xda\\x44\\x7d\\x9b\\x0d\\x01\\\n\\x87\\x66\\xda\\xa7\\xbf\\xa4\\x57\\x8f\\x5e\\x44\\x65\\x56\\xae\\x04\\x8e\\x9c\\\n\\x6e\\xb5\\x71\\xa0\\x54\\xdf\\x4d\\x23\\x3d\\xc1\\xfd\\xf2\\x1b\\xdb\\x34\\x4d\\\n\\x3a\\xe2\\x7a\\xc6\\x26\\x20\\x53\\xaf\\x1e\\xc1\\xd8\\x03\\xb1\\x00\\x21\\x66\\\n\\xa3\\x66\\x65\\x73\\x87\\x9b\\xc0\\xc4\\x68\\x7d\\xa7\\xe3\\x81\\x32\\xf7\\xd2\\\n\\x93\\x25\\x5e\\x1a\\x48\\x46\\xc1\\x7b\\x8b\\x17\\xbb\\x84\\xe0\\x25\\x80\\xfd\\\n\\x65\\xba\\xb6\\x2b\\x92\\xa3\\xdd\\xa7\\xaf\\x47\\x58\\xa2\\x0f\\x21\\xe6\\xbe\\\n\\x23\\x41\\xb7\\x2f\\x2c\\x68\\x02\\x7d\\x79\\x52\\x6c\\x76\\xb7\\xb9\\x14\\x15\\\n\\xaa\\x4d\\xb0\\x27\\x2a\\xea\\xdd\\xd7\\x43\\x27\\xe8\\x5e\\xba\\x5e\\x50\\xd5\\\n\\x8d\\x00\\x15\\x0d\\xfa\\xae\\x9a\\x51\\xa1\\xee\\xbd\\xd9\\xda\\xad\\x6d\\xda\\\n\\x59\\x4c\\x3d\\x04\\x8a\\xa1\\x20\\x50\\x12\\xb1\\xe0\\x0e\\xee\\x68\\xa1\\xdb\\\n\\xe9\\xde\\xfb\\x2d\\x3a\\x23\\x70\\xad\\x5d\\x6e\\xaf\\x90\\xd3\\x6a\\xab\\xd4\\\n\\xad\\x83\\x07\\x2c\\x06\\x51\\x0e\\x6e\\xef\\xb4\\x1e\\x98\\x8d\\xee\\xe1\\x76\\\n\\x3b\\xb4\\xcf\\xa9\\xbe\\xb1\\x49\\x43\\x33\\x03\\xfd\\xa2\\x2f\\x50\\xa8\\xd7\\\n\\x76\\xee\\xb1\\xe1\\x4c\\x61\\xb1\\xc1\\x45\\x93\\xbe\\x67\\xd0\\x4f\\xa0\\x2a\\\n\\x9a\\x01\\x6c\\x3e\\xde\\x9e\\xb1\\x67\\x69\\xfb\\xaa\\xf7\\x44\\x54\\x8f\\xa9\\\n\\xa3\\xaa\\x5d\\x69\\xba\\x75\\xf0\\x80\\x5d\\x98\\xd2\\x00\\xdd\\x66\\x93\\xbd\\\n\\x27\\x82\\x68\\xf4\\x91\\xc4\\xd4\\x17\\x4a\\x15\\xe8\\xf6\\x7f\\x05\\xb1\\x84\\\n\\xe5\\x46\\x00\\xbb\\xaf\\xfd\\xa3\\x67\\x03\\xee\\x5d\\x9a\\x81\\x90\\xd6\\x73\\\n\\x22\\x1a\\x60\\xae\\x6e\\x1d\\x3c\\x20\\x84\\x6b\\x1e\\x7c\\x73\\xba\\x06\\x42\\\n\\x6b\\x4f\\x02\\x52\\xa8\\x8f\\x83\\xb0\\x77\\x1f\\x97\\x24\\x1a\\xf5\\xea\\x10\\\n\\xc4\\x12\\x76\\xcf\\x40\\x6b\\xb7\\x36\\x41\\x31\\xe1\\xee\\xd3\\xf7\\x74\\x8b\\\n\\x3e\\x07\\xec\\x79\\x23\\x63\\x00\\x50\\x05\\x77\\xe4\\xe5\\x89\\xa0\\xb7\\x92\\\n\\x45\\xab\\x56\\x29\\x92\\xc4\\x1d\\x00\\x93\\x47\\xea\\xf3\\x37\\xd6\\xb5\\xb8\\\n\\x4f\\xdf\\xe8\\x08\\xed\\x08\\x63\\xef\\xe1\\x22\\x40\\x9f\\x75\\x4e\\x30\\x86\\\n\\x34\\xd2\\x09\\x80\\xfa\\x66\\x6d\\x82\\x7a\\x6d\\xa8\\x8a\\x7a\\x6d\\x1b\\xcb\\\n\\x13\\x53\\x32\\x62\\x49\\x88\\xb4\\x20\\xc1\\xa4\\xed\\xe6\\xa2\\x3b\\xf4\\xea\\\n\\xd1\\x8b\\xd6\\x92\\x11\\x77\\x01\\x13\\x12\\xa3\\x2c\\x9c\\x97\\xa1\\x6f\\xcf\\\n\\x2f\\xef\\x39\\xf9\\xe3\\x22\\xb5\\x6d\\xd5\\xfa\\x66\\xb7\\xee\\x12\\x9c\\xd0\\\n\\xab\\x87\\xde\\xbb\\x70\\x52\\xe9\\x17\\x6f\\xb6\\xc4\\xa4\\x65\\xb1\\xaf\\x76\\\n\\x3f\\x4a\\x9d\\x5b\\xe1\\x90\\xd0\\x70\\x14\\x83\\x91\\x90\\xb0\\x70\\x22\\x4d\\\n\\xee\\xa0\\xf6\\xf1\\x9a\\xc0\\x3e\\x43\\x00\\x45\\x91\\xb8\\x66\\x66\\x1a\\x2f\\\n\\x7c\\x76\\x02\\x24\\xf1\\xd7\\x79\\x4f\\x15\\x96\\xea\\xbd\\x8d\\xcc\\x7d\\xb2\\\n\\x70\\x9e\\x84\\xf8\\xb3\\x04\\x2c\\x9a\\x99\\x86\\xa2\\xc3\\xeb\\x63\\xb3\\x59\\\n\\x29\\xda\\x7d\\x80\\xd6\\xda\\x06\\xda\\x2d\\x75\\x6c\\xab\\x2a\\x42\\x15\\x2a\\\n\\x06\\x83\\x11\\x4b\\x68\\x38\\x8a\\xa2\\xf0\\x75\\x99\\x15\\x55\\x8a\\x44\\x31\\\n\\x18\\xf6\\xe8\\x1a\\x04\\xbe\\xcf\\x4c\\x19\\xf8\\x08\\x38\\x07\\x48\\x07\\x02\\\n\\x47\\xd5\\x01\\x83\\x39\\x94\\xc8\\xd4\\xb1\\x2c\\xfa\\xe9\\xe5\\x2c\\xb9\\xf3\\\n\\x6e\\x92\\x53\\x52\\x03\\x3e\\xf3\\xd1\\xce\\x2a\\xd6\\xed\\xad\\x86\\x5e\\x67\\\n\\x42\\xa6\\xa6\\x33\\x01\\x70\\x2f\\xdb\\x5e\\x67\\x02\\x60\\xbc\\x3c\\x7b\\x38\\\n\\x0b\\xb3\\x7d\\xf7\\xf1\\xf6\\xab\\x2f\\xb2\\xea\\xcd\\x57\\xa9\\x28\\x2b\\xa1\\\n\\xb9\\x51\\xdb\\x0b\\xe3\\x09\\x49\\x92\\x01\\x8e\\x0b\\xa1\\x16\\x02\\x6f\\x02\\\n\\x9f\\x03\\x3e\\x2d\\x05\\x5f\\x04\\x2a\\xc0\\x59\\x25\\x25\\x1a\\x8c\\x46\\x96\\\n\\xdc\\xf5\\x00\\xbf\\xfa\\xdd\\xff\\x62\\xb6\\xf8\\xe6\\x5f\\x00\\x1f\\x16\\x55\\\n\\xf1\\xd9\\xbe\\xea\\x5e\\x8d\\x0e\\x83\\x78\\x59\\x76\\xc9\\x1b\\xac\\xdd\\xd6\\\n\\x12\\x80\\x10\\x53\\x48\\xa6\\x4b\\x12\\xf3\\x25\\x49\\xdc\\x0e\\xd2\\x44\\x80\\\n\\x05\\x53\\x52\\x59\\x38\\x6d\\xb8\\x5f\\xab\\xe9\\x91\\x87\\xee\\xe3\\xad\\x57\\\n\\x5e\\x38\\x9b\\x61\\x00\\xec\\x05\\x6e\\x01\\x0e\\x6b\\x55\\x0e\\x19\\x81\\xbd\\\n\\x98\\x3a\\x7d\\x26\\x6f\\x7d\\x98\\xef\\x97\\x44\\x70\\x3b\\x54\\xd7\\xec\\xa8\\\n\\x70\\xfb\\x04\\xfd\\x20\\x3e\\xc2\\xcc\\xd5\\x33\\xd3\\x38\\x5f\\xc7\\xbe\\x37\\\n\\x48\\x04\\x82\\x3b\\xdb\\xf5\\x32\\xa0\\xc0\\xb3\\x62\\xc8\\xb3\\xf4\\xf7\\x14\\\n\\x6d\\xe7\\xb1\\x5f\\xff\\x9c\\xe5\\x2b\\x56\\xfa\\x95\\x9b\\x92\\x19\\xcb\\xb9\\\n\\xe9\\xd1\\xec\\x2b\\x6d\\xe6\\xab\\x8a\\x56\\xca\\x1b\\x3a\\x68\\x68\\x73\\x93\\\n\\x19\\x1f\\x69\\x66\\x64\\x7c\\x38\\x13\\xd3\\xa2\\x98\\x9c\\x11\\x73\\xd6\\xe9\\\n\\x20\\x03\\x80\\x05\\x58\\x03\\x4c\\x04\\xfa\\x25\\xb0\\x07\\x35\\x03\\xcd\\x21\\\n\\x61\\x8c\\x9a\\x30\\x99\\xe8\\xb8\\x44\\x14\\xc5\\xcd\\x7d\\x73\\xc3\\x29\\x4e\\\n\\x55\\x95\\x52\\x5f\\xeb\\xfb\\x46\\x66\\x30\\x1a\\xd9\\x7a\\xb0\\x44\\xd7\\x9e\\\n\\x38\\x98\\xf0\\x35\\x03\\xd3\\x47\\x4f\\x24\\x31\\x35\\x1d\\x4b\\x88\\xdb\\x7e\\\n\\xb4\\xdb\\xba\\x68\\xa8\\xab\\xa2\\xa2\\xf8\\x08\\x4e\\xa7\\x5f\\x3b\\xf6\\x0f\\\n\\xc0\\x63\\x67\\x16\\x04\\x35\\x03\\x33\\xc7\\x9f\\xc7\\x33\\xef\\x6e\\xd5\\xac\\\n\\x3b\\x7e\\x60\\x27\\xcf\\xfd\\x7a\\x09\\x95\\x27\\x8f\\x79\\xd5\\x39\\x1d\\x0e\\\n\\xf2\\xd7\\x7d\\xc4\\x8d\\xb7\\xdf\\x1b\\x4c\\x77\\x43\\x86\\x87\\x9f\\x7b\\x83\\\n\\xcc\\xf1\\x93\\xbd\\xca\\x3b\\xdb\\x5a\\x78\\xfd\\x4f\\x8f\\xf2\\xf1\\x1b\\x7f\\\n\\xf3\\xf5\\xe8\\xd5\\x78\\x10\\xa8\\xb9\\x16\\x7e\\x74\\xdb\\xcb\\xfa\\x9c\\x7a\\\n\\x67\\x60\\xec\\x79\\xd3\\x78\\xe2\\x8d\\x7c\\xc2\\xa3\\x62\\x34\\xeb\\xab\\x2b\\\n\\x7d\\xe6\\x28\\x0e\\x19\\xaa\\x9b\\xf4\\xd9\\xa4\\xbd\\x08\\x8b\\x8c\\xe6\\xde\\\n\\xc7\\x56\\x30\\xf7\\x9a\\x5b\\x7d\\x89\\x78\\xc5\\x69\\xbd\\x08\\xcc\\xcd\\xdb\\\n\\x1c\\x1e\\x3a\\x6a\\xec\\x27\\x41\\xf5\\xdc\\x83\\xb8\\xc4\\x61\\xcc\\xbe\\x6c\\\n\\x91\\x66\\x5d\\x67\\x87\\xb6\\x17\\x78\\xa8\\x70\\xa8\\xbc\\x85\\x92\\x3a\\xfd\\\n\\xc9\\x00\\x67\\xe2\\xca\\x5b\\x1e\\xf0\\x55\\x15\\x82\\x47\\x24\\xd3\\x6b\\x09\\\n\\x9b\\x43\\xcc\\x77\\x08\\x97\\xb8\\x70\\x40\\x3d\\x03\\xf1\\xc9\\xda\\xfb\\x9c\\\n\\x12\\x9e\\xa0\\xeb\\x79\\x55\\x55\\x39\\xbc\\x7f\\x0f\\x9b\\x36\\xfc\\x87\\xba\\\n\\x9a\\x1a\\xda\\xdb\\x5a\\x51\\x14\\x85\\x98\\xb8\\x78\\x12\\x93\\x92\\x99\\x95\\\n\\x7b\\x09\\x93\\xce\\xcf\\x46\\xf6\\x11\\x19\\x04\\x38\\x5c\\xd1\\xc2\\x4b\\x1b\\\n\\x8b\\x11\\x3a\\xa3\\x76\\xde\\x63\\xd0\\xce\\x87\\x34\\x98\\xc3\\xda\\x9d\\xf6\\\n\\xce\\x7e\\x36\\xaa\\x17\\x81\\x42\\x0e\\xfb\\x27\\x6a\\xc7\\x2f\\x39\\xe3\\xa7\\\n\\x58\\xc1\\xe0\\x54\\x75\\xb9\\x66\\xf9\\xc1\\xa6\\x10\\xbe\\xf8\\xea\\x94\\xcf\\\n\\x0c\\x2d\\x55\\x55\\xf9\\xe4\\xfd\\x77\\x79\\xee\\x89\\xc7\\x28\\x2f\\xf9\\xda\\\n\\x67\\xfb\\xcf\\x3c\\xfe\\x08\\xc9\\x29\\xa9\\xfc\\xe2\\xb7\\xbf\\xe7\\x9a\\xeb\\\n\\x97\\x78\\x11\\x59\\x70\\xb8\\x8e\\x55\\xdb\\x2b\\x50\\x55\\x41\\x5c\\x54\\x28\\\n\\x03\\x71\\x36\\x9e\\xf6\\x31\\x06\\x57\\xb7\\xed\\x80\\x67\\x99\\xd7\\x6b\\xdc\\\n\\xf0\\xf0\\x79\\x9d\\xc2\\xe5\\xf8\\x9f\\x01\\xf4\\x4b\\x43\\x5d\\x15\\x5f\\x7e\\\n\\xba\\xda\\xab\\xdc\\x1c\\x1a\\x4e\\xec\\x39\\xd3\\x78\\x7b\\x6b\\x19\\x2b\\x37\\\n\\x14\\xd3\\x6e\\xed\\x7f\\xd2\\x75\\xdb\\xed\\x3c\\x70\\xdb\\x75\\xfc\\xf7\\x1d\\\n\\x37\\xf8\\x25\\xaf\\x17\\x75\\xb5\\xd5\\x2c\\xfd\\xaf\\x3b\\xb8\\xf9\\xaa\\x4b\\\n\\xe9\\xea\\x74\\x2f\\xd3\\xb6\\x2e\\x07\\x2f\\xae\\x2f\\xe6\\x9d\\x2f\\xcb\\x51\\\n\\x55\\xc1\\xf4\\x09\\xc3\\x19\\xa6\\xe3\\x07\\xdc\\x5a\\x58\\xfb\\xaf\\x15\\x9a\\\n\\xe5\\x42\\xb8\\xde\\xf1\\x2c\\xd3\\x5c\\x07\\x1b\\x1f\\xc9\\x7d\\x3b\\xd8\\x4e\\\n\\x8b\\x0f\\xed\\x66\\xd9\\x0d\\x17\\xd3\\xd5\\xe1\\x7d\\x17\\xbe\\xf9\\xc1\\x3c\\\n\\xae\\x98\\x3d\\x09\\x93\\x51\\x61\\x6f\\x49\\x13\\x8f\\xbd\\x73\\x90\\xcd\\x87\\\n\\xea\\x70\\xba\\x54\\x54\\x55\\xe5\\x9e\\x9b\\xae\\x66\\xdd\\xda\\xf7\\x82\\xed\\\n\\x92\\x6d\\x05\\xf9\\xdc\\xf8\\xd3\\x79\\x6c\\xdc\\x57\\x49\\xde\\x3b\\x07\\xd9\\\n\\x57\\xda\\x84\\xd9\\xa8\\xb0\\x20\\x67\\x34\\x33\\x26\\x04\\x6f\\x32\\xd9\\xad\\\n\\x5d\\xac\\xf8\\xed\\xdd\\x6c\\x5a\\xfb\\x86\\x56\\xf5\\x51\\xe0\\x15\\xcf\\xc2\\\n\\xb3\\x32\\xa4\\xdb\\x5a\\x1a\\xa9\\x2d\\xff\\x9a\\x4f\\xdf\\xf9\\x27\\x9b\\x3e\\\n\\x78\\x43\\xd3\\x86\\x5a\\x70\\xfd\\x3d\\xfc\\xf4\\xd6\\x5f\\x20\\x49\\x12\\x49\\\n\\xb1\\x61\\x7d\\x49\\xe6\\xef\\x6e\\x2b\\x67\\xfd\\xfe\\x5a\\x6c\\x07\\x56\\xb1\\\n\\x79\\xc3\\xba\\x01\\xeb\\xb0\\x6f\\x57\\x21\\x4f\\xff\\xf1\\x71\\x46\\x5d\\x72\\\n\\xbb\\xae\\x24\\x73\\x4f\\x74\\xdb\\x6d\\x34\\xd7\\xd7\\x51\\x98\\xff\\x21\\x1f\\\n\\xfe\\x6b\\x05\\x75\\x55\\xa5\\x5e\\x32\\xb2\\x62\\xaa\\x55\\x5d\\xdd\\x0b\\x01\\\n\\xaf\\xd8\\xc1\\x90\\x5d\\xe5\\x12\\x53\\xd3\\xb9\\xe1\\x81\\x47\\x35\\x4d\\x82\\\n\\x13\\x95\\x8d\\xec\\x3e\\x56\\x4b\\x4d\\x6d\\x2d\\x5b\\x9e\\xbc\\x12\\x97\\xc3\\\n\\x3b\\x4a\\x36\\x3c\\x3d\\x83\\x07\\x97\\x3d\\x4a\\xf6\\x8c\\x59\\xd8\\x1d\\x2a\\\n\\x7b\\xf6\\xec\\xe1\\x85\\x67\\x1f\\xa7\\xe2\\xeb\\xa3\\xde\\xca\\x1a\\x4c\\xfc\\\n\\x61\\xf5\\x41\\xce\\xcf\\x1a\\xd3\\xaf\\xfc\\x6f\\x8f\\xde\\xc7\\xba\\xb7\\x07\\\n\\x7e\\x95\\x93\\x15\\x23\\xb1\\xe7\\x4c\\x3d\\xd1\\x70\\xbc\\x70\\x36\\x70\\x5a\\\n\\x53\\x66\\xc0\\xad\\xfb\\x41\\xee\\x35\\x77\\xf1\\x97\\x0f\\x76\\xfa\\xb4\\xa7\\\n\\xc6\\x8c\\x88\\xe3\\xfa\\xb9\\x59\\xc4\\x36\\xed\\xd4\\x24\\x2f\\x34\\x2e\\x95\\\n\\x31\\xb7\\x3c\\xcf\\xc6\\xd6\\x71\\x3c\\xb9\\xbe\\x81\\xe7\\x36\\x35\\xb1\\xa5\\\n\\x35\\x83\\x31\\xb7\\x3c\\x4f\\x78\\x62\\x86\\x97\\xbc\\xcb\\xd9\\x4d\\x49\\xe1\\\n\\x47\\x83\\x3a\\x86\\xf0\\xa4\\x4c\\xb2\\x6f\\xff\\x73\\xc7\\x05\\xb7\\x3c\\x3d\\\n\\x0b\\x1f\\xe4\\xc1\\x10\\x11\\x58\\xb0\\x7a\\x25\\x37\\xce\\x1c\\xce\\x1f\\xef\\\n\\xbf\\x86\\xb2\\xe3\\x5e\\x89\\xed\\x7d\\x38\\x56\\xa4\\xed\\xfe\\x9b\\xba\\x68\\\n\\x29\\xe1\\x51\\xdf\\x38\\x0b\\xcc\\x46\\x85\\xa8\\x30\\x0b\\xa3\\xd2\\x92\\xb8\\\n\\xf4\\xb6\\xdf\\x68\\x3e\\xb3\\x7d\\xfd\\x07\\x67\\xa7\\xb4\\x07\\x3a\\x4e\\x95\\\n\\xb0\\x73\\xe5\\xfd\\xe1\\x9f\\xfe\\xcf\\x85\\x5b\\x81\\x3b\\xf1\\x91\\xc9\\x36\\\n\\xe4\\xde\\x18\\x83\\xd1\\xc4\\x43\\x4f\\xbf\\x4a\\xee\\xc2\\xeb\\xfa\\x95\\x3b\\\n\\x9d\\x0e\\x16\\x9d\\x1f\\x83\\xdd\\xda\\xff\\xb6\\x10\\x11\\x1d\\xcb\\xdb\\x45\\\n\\x75\\x7d\\x77\\x6d\\x4f\\x38\\x9d\\x0e\\xae\\xcd\\x4e\\xf0\\x3a\\xac\\x4c\\x66\\\n\\x0b\\xab\\x0f\\xb4\\x62\\x30\\x7c\\x13\\xef\\x58\\xf1\\xc8\\x3d\\x7c\\xf6\\x8e\\\n\\x7f\\x27\\x46\\x10\\x58\\x07\\x5c\\x03\\xf4\\x73\\xc9\\x07\\x75\\x88\\xc8\\x8a\\\n\\xa1\\x5e\\x75\\xa9\\xaf\\x82\\x2a\\x70\\x93\\x1f\\x0d\\x44\\x01\\x89\\xc0\\x54\\\n\\xc0\\x2b\\x31\\xc6\\xe9\\xe8\\xe6\\xd9\\x87\\x97\\x90\\x90\\x32\\x82\\x89\\xd9\\\n\\xb3\\xfa\\xca\\xeb\\x2a\\x4a\\xbc\\xc8\\x03\\xc8\\x1c\\x3f\\xd9\\x27\\x79\\x00\\\n\\x06\\x83\\x91\\xcc\\xf1\\x93\\x39\\xbc\\xeb\\x8b\\x7e\\xe5\\xdd\\x76\\x1b\\xd5\\\n\\xa5\\x27\\x48\\x1f\\x3d\\x11\\x70\\x27\\x4b\\x9e\\xa8\\xf4\\x19\\x5c\\x7b\\x95\\\n\\x6f\\x96\\x65\\x68\\xcf\\x18\\xa2\\x80\\x2c\\xbe\\xf9\\x55\\xaa\\x27\\x16\\x00\\\n\\x2f\\x02\\x37\\xf7\\xd3\\xc7\\xa7\\xa6\\x1a\\x50\\x5d\\xce\\x62\\x60\\xa9\\x8f\\\n\\xea\\x10\\xe0\\x2e\\xe0\\x89\\x1e\\xa5\\xfa\\xe0\\x72\\x3a\\x78\\x6a\\xe9\\xdd\\\n\\x3c\\xb3\\xba\\x88\\xc4\\x18\\x77\\x02\\x4f\\x47\\x9b\\x76\\xdc\\x26\\x71\\x58\\\n\\xe0\\x28\\x67\\x4c\\xbc\\xb6\\x31\\xde\\xde\\xd2\\xd8\\xef\\x07\\xd7\\x0e\\xa7\\\n\\xcf\\x10\\xeb\\x0a\\x60\\xbf\\x8f\\xba\\xe9\\xc0\\xdf\\x71\\x4f\\x08\\x4f\\xdc\\\n\\x04\\xac\\x04\\xbe\\xec\\x2d\\x18\\x4c\\x7f\\xa0\\x15\\xf8\\x0b\\x50\\x06\\xac\\\n\\xf5\\xac\\x6c\\x28\\x3f\\xca\\xca\\xd7\\xd7\\x70\\x5e\\x76\\x0e\\x53\\xc6\\x26\\\n\\xd3\\xd1\\xa6\\x9d\\xcf\\x62\\x0e\\x09\\x1c\\xa2\\x8c\\x49\\xd0\\x4e\\x1d\\xde\\\n\\x54\\x74\\x04\\xca\\xcd\\x7d\\x3f\\xf9\\xef\\xac\\x2f\\x3b\\x08\\x4c\\xd3\\xa7\\\n\\x7e\\x1f\\x8a\\x80\\x39\\xc0\\x4e\\x60\\x9c\\x46\\xfd\\x6d\\x9c\\x41\\xe0\\x50\\\n\\x1c\\x22\\x1f\\xe2\\x36\\x3a\\xbd\\xd0\\x54\\xb2\\xdf\\x51\\x52\\xdb\\xcc\\xea\\\n\\x82\\xa3\\xe4\\xef\\xd5\\xbe\\x2e\\x59\\x3b\\x03\\x3b\\x1d\\x24\\x8d\\xfc\\x44\\\n\\x80\\xfa\\x56\\x1b\\x2a\\x58\\x41\\xfc\\x45\\x95\\x5c\\xa3\\x9a\\x4a\\xf6\\xed\\\n\\xd5\\xaf\\x76\\x3f\\xb4\\xe3\\x9e\\x85\\x5a\\xf8\\xd1\\x99\\xff\\x0c\\x95\\x47\\\n\\xfa\\x08\\x30\\xde\\xb3\\xf0\\xe4\\xe6\\xd7\\x56\\xa6\\xcf\\xbe\\xb6\\x13\\xb8\\\n\\xde\\x21\\x59\\x34\\xef\\xda\\x4d\\xf5\\xb5\\x01\\x1b\\x6f\\x6f\\xd5\\x5e\\xfe\\\n\\x4e\\x5b\\xc7\\x9b\\x06\\x59\\x79\\x78\\x90\\x3e\\x7b\\xa2\\x39\\x09\\x80\\x94\\\n\\x33\\xff\\x19\\x2a\\xdf\\xb8\\xa6\\x3f\\xd1\\xd1\\xd5\\x62\\x5d\\xbf\\x2c\\x67\\\n\\x69\\x8e\\x6d\\x46\\xba\\xb5\\xb9\\xf6\\x67\\x5a\\x32\\xbe\\x2e\\xf2\\x67\\xa2\\\n\\xa2\\x54\\xfb\\xbe\\x7c\\xe0\\xdf\\x8f\\x3e\\x3a\\x88\\xdf\\x8c\\xf1\\x95\\xa7\\\n\\xe7\\xdf\\x9d\\x35\\x08\\x08\\x07\\x66\\xf9\\xa8\\xab\\x04\\xe8\\xc9\\x07\\x5c\\\n\\x0b\\xd4\\x00\\xc3\\xce\\x14\\xa8\\x2e\\x3d\\x41\\x5d\\x55\\x29\\xc9\\xc3\\xbd\\\n\\x0d\\x66\\x80\\x6e\\x9b\\x95\\xf2\\x63\\x9a\\xfb\\x7f\\x23\\xee\\xfd\\x77\\xb0\\\n\\x30\\xdf\\x47\\x79\\x3f\\x07\\xcf\\x60\\xcf\\x40\\x19\\x78\\x01\\xf0\\xe5\\x06\\\n\\xf1\\xb4\\xaa\\xb7\\x69\\x09\\xad\\x7d\\xe5\\xcf\\x3e\\x3b\\xd8\\xf4\\xe1\\x9b\\\n\\x38\\xec\\x9a\\xd9\\x11\\x85\\xf8\\x89\\xdf\\x06\\x89\\x39\\xc0\\xdd\\x3e\\xea\\\n\\xfa\\x85\\x37\\x07\\x93\\xc0\\xe9\\xc0\\xa7\\xc0\\x0d\\x3e\\xea\\x4b\\x80\\x2d\\\n\\x1e\\x65\\xaf\\x6b\\x09\\x7e\\xf2\\xd6\\x3f\\x28\\xcc\\xff\\xd0\\xbb\\x81\\xa3\\\n\\xfb\\x79\\xe5\\xa9\\x65\\xbe\\xfa\\x7f\\x53\\x9f\\x9a\\x7e\\x91\\x00\\xfc\\x16\\\n\\xf8\\x0f\\xe0\\x2b\\x53\\xb4\\x9f\\x47\\x26\\xd8\\x9b\\x88\\x13\\x28\\x06\\xba\\\n\\x70\\x7b\\x26\\x3a\\x71\\x67\\xae\\x8e\\x24\\x70\\x5a\\xec\\x12\\xc0\\xf3\\xbb\\\n\\x2d\\x0a\\x70\\x1c\\x0d\\xe3\\x55\\x92\\x24\\xa6\\xcc\\x9e\\xcf\\xb8\\xc9\\xd3\\\n\\x31\\x99\\x2d\\x94\\x1c\\x3d\\xc0\\xb6\\xcf\\xd6\\xf8\\x8a\\x9a\\x55\\x03\\x19\\\n\\x80\\x67\\xe5\\xf3\\xc0\\x3d\\x1a\\xf2\\x75\\x3d\\xcf\\x80\\xfb\\xe7\\x0c\\x26\\\n\\x20\\x0d\\x48\\xc5\\xff\\xb6\\x56\\x88\\xfb\\x14\\x0e\\x98\\x92\\xac\\x40\\xef\\\n\\x87\\x7f\\x06\\xe5\\x4f\\xd3\\xc1\\xd6\\x83\\x8b\\x90\\x24\\xf5\\x2c\\xda\\x56\\\n\\x81\\xcb\\x7d\\xb4\\xfd\\xfc\\x20\\x8e\\xa1\\x11\\xf7\\x44\\xd1\\x85\\xc1\\x24\\\n\\xf0\\xef\\x04\\x38\\xac\\xe2\\xc7\\xcc\\x78\\xa9\\xe7\\x63\\x38\\x03\\xf9\\x7b\\\n\\xdc\\x4f\\xd3\\x83\\x45\\x60\\x31\\xda\\x46\\xb5\\x4f\\x0c\\x06\\x81\\xfb\\xf0\\\n\\x3d\\x33\\xfa\\xe1\\x92\\xe5\\xbb\\xa3\\xb2\\x16\\x3f\\xea\\x32\\x86\\x44\\x04\\\n\\xd1\\xbe\\xd4\\x81\\xdb\\x4b\\xe2\\x0f\\x67\\x4b\\x60\\x1b\\xee\\x17\\x14\\xf4\\\n\\x77\\xab\\x64\\xe0\\x6d\\x60\\x0f\\xee\\x7d\\x4e\\x4f\\x67\\x56\\x60\\x37\\xee\\\n\\xcc\\xa9\\x1c\\x82\\xfc\\xb0\\xd9\\xfc\\xe5\\x3b\\xf6\\xcc\\xf9\\xdd\\xa7\\x22\\\n\\xe3\\xc2\\x1b\\x44\\x68\\xdc\\x70\\x9f\\xfd\\x58\\xa2\\x12\\x45\\xea\\x05\\x0b\\\n\\xeb\\x00\\x3d\\xdf\\x0f\\xb8\\x19\\x77\\x76\\x55\\xb5\\xce\\x31\\x08\\xa0\\x14\\\n\\x58\\x0d\\xdc\\x88\\x0e\\xe2\\xf4\\x0e\\x32\\x14\\x88\\xc3\\x7d\\x50\\x78\\x2e\\\n\\x47\\x27\\xd0\\x8a\\xfb\\x03\\x88\\x03\\x76\\x81\\xcd\\x5f\\xbe\\xe3\\x59\\xe0\\\n\\xa1\\xde\\xff\\xad\\x4d\\x35\\x74\\x35\\x55\\x63\\x6f\\xad\\x47\\x55\\x5d\\x98\\\n\\xc2\\xa2\\x09\\x89\\x49\\x21\\x22\\xe5\\x1c\\x80\\xe7\\xd6\\x2f\\xcb\\xd1\\xf5\\\n\\xd9\\xf8\\x33\\xa0\\xf4\\xe8\\x1f\\x07\\x68\\x5d\\xb8\\xdb\\x80\\x7a\\x74\\xfe\\\n\\x46\\xee\\x07\\xfc\\x80\\xef\\x07\\xfe\\x1f\\x72\\xec\\x90\\xfb\\x81\\x9b\\x89\\\n\\xdd\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x0e\\x62\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x60\\x00\\x00\\x00\\x60\\x08\\x06\\x00\\x00\\x00\\xe2\\x98\\x77\\x38\\\n\\x00\\x00\\x00\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\\n\\x00\\x00\\x00\\x20\\x63\\x48\\x52\\x4d\\x00\\x00\\x7a\\x26\\x00\\x00\\x80\\x84\\\n\\x00\\x00\\xfa\\x00\\x00\\x00\\x80\\xe8\\x00\\x00\\x75\\x30\\x00\\x00\\xea\\x60\\\n\\x00\\x00\\x3a\\x98\\x00\\x00\\x17\\x70\\x9c\\xba\\x51\\x3c\\x00\\x00\\x00\\x09\\\n\\x70\\x48\\x59\\x73\\x00\\x00\\x0e\\xc4\\x00\\x00\\x0e\\xc4\\x01\\x95\\x2b\\x0e\\\n\\x1b\\x00\\x00\\x01\\x59\\x69\\x54\\x58\\x74\\x58\\x4d\\x4c\\x3a\\x63\\x6f\\x6d\\\n\\x2e\\x61\\x64\\x6f\\x62\\x65\\x2e\\x78\\x6d\\x70\\x00\\x00\\x00\\x00\\x00\\x3c\\\n\\x78\\x3a\\x78\\x6d\\x70\\x6d\\x65\\x74\\x61\\x20\\x78\\x6d\\x6c\\x6e\\x73\\x3a\\\n\\x78\\x3d\\x22\\x61\\x64\\x6f\\x62\\x65\\x3a\\x6e\\x73\\x3a\\x6d\\x65\\x74\\x61\\\n\\x2f\\x22\\x20\\x78\\x3a\\x78\\x6d\\x70\\x74\\x6b\\x3d\\x22\\x58\\x4d\\x50\\x20\\\n\\x43\\x6f\\x72\\x65\\x20\\x35\\x2e\\x34\\x2e\\x30\\x22\\x3e\\x0a\\x20\\x20\\x20\\\n\\x3c\\x72\\x64\\x66\\x3a\\x52\\x44\\x46\\x20\\x78\\x6d\\x6c\\x6e\\x73\\x3a\\x72\\\n\\x64\\x66\\x3d\\x22\\x68\\x74\\x74\\x70\\x3a\\x2f\\x2f\\x77\\x77\\x77\\x2e\\x77\\\n\\x33\\x2e\\x6f\\x72\\x67\\x2f\\x31\\x39\\x39\\x39\\x2f\\x30\\x32\\x2f\\x32\\x32\\\n\\x2d\\x72\\x64\\x66\\x2d\\x73\\x79\\x6e\\x74\\x61\\x78\\x2d\\x6e\\x73\\x23\\x22\\\n\\x3e\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x3c\\x72\\x64\\x66\\x3a\\x44\\x65\\x73\\\n\\x63\\x72\\x69\\x70\\x74\\x69\\x6f\\x6e\\x20\\x72\\x64\\x66\\x3a\\x61\\x62\\x6f\\\n\\x75\\x74\\x3d\\x22\\x22\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\\n\\x20\\x20\\x78\\x6d\\x6c\\x6e\\x73\\x3a\\x74\\x69\\x66\\x66\\x3d\\x22\\x68\\x74\\\n\\x74\\x70\\x3a\\x2f\\x2f\\x6e\\x73\\x2e\\x61\\x64\\x6f\\x62\\x65\\x2e\\x63\\x6f\\\n\\x6d\\x2f\\x74\\x69\\x66\\x66\\x2f\\x31\\x2e\\x30\\x2f\\x22\\x3e\\x0a\\x20\\x20\\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x3c\\x74\\x69\\x66\\x66\\x3a\\x4f\\x72\\x69\\\n\\x65\\x6e\\x74\\x61\\x74\\x69\\x6f\\x6e\\x3e\\x31\\x3c\\x2f\\x74\\x69\\x66\\x66\\\n\\x3a\\x4f\\x72\\x69\\x65\\x6e\\x74\\x61\\x74\\x69\\x6f\\x6e\\x3e\\x0a\\x20\\x20\\\n\\x20\\x20\\x20\\x20\\x3c\\x2f\\x72\\x64\\x66\\x3a\\x44\\x65\\x73\\x63\\x72\\x69\\\n\\x70\\x74\\x69\\x6f\\x6e\\x3e\\x0a\\x20\\x20\\x20\\x3c\\x2f\\x72\\x64\\x66\\x3a\\\n\\x52\\x44\\x46\\x3e\\x0a\\x3c\\x2f\\x78\\x3a\\x78\\x6d\\x70\\x6d\\x65\\x74\\x61\\\n\\x3e\\x0a\\x4c\\xc2\\x27\\x59\\x00\\x00\\x0c\\x73\\x49\\x44\\x41\\x54\\x78\\x01\\\n\\xed\\x98\\xeb\\x93\\x15\\xc5\\x19\\x87\\xe5\\x2e\\x08\\x0a\\x28\\x22\\xc8\\x65\\\n\\x01\\x41\\x90\\x04\\x41\\x11\\x6f\\x20\\x14\\x1a\\xa8\\x08\\x26\\x51\\x63\\x99\\\n\\x98\\x52\\xcc\\xc5\\x98\\x4b\\xa5\\x52\\x56\\xa5\\x92\\x7f\\x02\\x13\\xbf\\x18\\\n\\x24\\x17\\xd4\\x24\\x16\\xa9\\x94\\x51\\x22\\x46\\x04\\x22\\x8b\\x82\\x10\\x10\\\n\\x22\\x88\\x82\\x01\\xb9\\xc9\\x45\\x11\\x50\\x89\\x28\\x02\\x0a\\x79\\x9e\\xf5\\\n\\xcc\\x49\\x6f\\x3b\\x73\\xce\\x9e\\x65\\x57\\xf3\\xa1\\x7f\\x55\\x0f\\x33\\xd3\\\n\\x33\\xd3\\xd3\\xfd\\x7b\\xdf\\x7e\\xfb\\x2c\\xa7\\x9d\\x96\\x94\\x1c\\x48\\x0e\\\n\\x24\\x07\\x92\\x03\\xc9\\x81\\xe4\\x40\\x72\\x20\\x39\\x90\\x1c\\x48\\x0e\\x24\\\n\\x07\\x92\\x03\\xc9\\x81\\xe4\\x40\\x72\\x20\\x39\\x90\\x1c\\x48\\x0e\\x24\\x07\\\n\\x92\\x03\\xc9\\x81\\xe4\\x40\\x72\\x20\\x39\\x90\\x1c\\x48\\x0e\\x24\\x07\\x92\\\n\\x03\\xc9\\x81\\xe4\\x40\\x72\\x20\\x39\\x90\\x1c\\x48\\x0e\\x24\\x07\\x92\\x03\\\n\\xc9\\x81\\xe4\\x40\\x72\\x20\\x39\\x90\\x1c\\x48\\x0e\\xb4\\x88\\x03\\x6d\\x5a\\\n\\xa4\\x97\\xcf\\xbe\\x13\\xc7\\xdd\\x0e\\x4e\\xc2\\xc7\\x9f\\xfd\\xe7\\xcb\\x5f\\\n\\x74\\x1c\\xed\\x4b\\x57\\xc7\\xcb\\xad\\x35\\x9c\\x14\\x05\\xe0\\x74\\xfa\\xe8\\\n\\x0f\\x75\\xd0\\x0d\\x9c\\x6c\\x91\\x34\\xe1\\x23\\x38\\x0a\\x47\\xe0\\x5d\\xd8\\\n\\x03\\x6f\\x43\\x4b\\x99\\xd3\\x85\\xbe\\x86\\xc2\\x65\\x30\\x0c\\x7a\\x82\\x6d\\\n\\x7e\\xf7\\x10\\xec\\x86\\xb5\\xb0\\x0e\\x0e\\x40\\x6b\\xe8\\x0c\\x3a\\x1d\\x02\\\n\\xa3\\x4a\\xc7\\xb3\\x39\\x76\\x85\\xce\\xa0\\x07\\x1f\\x82\\x73\\xdf\\x05\\x1b\\\n\\x61\\x03\\xec\\x85\\x8a\\xca\\x0b\\x80\\xc6\\xdf\\x0c\\x53\\xe0\\x1c\\x30\\x18\\\n\\x79\\xcf\\xd1\\x5c\\x96\\x46\\x8b\\x59\\x90\\x05\\x61\\x1b\\xe7\\x8b\\xe0\\x79\\\n\\x38\\x0c\\xcd\\x91\\x81\\xbf\\x08\\xbe\\x0e\\x13\\x60\\x00\\xf4\\x02\\x27\\xdd\\\n\\x01\\x4e\\x80\\x81\\x77\\xe2\\x06\\x61\\x3d\\x3c\\x0e\\xf5\\xe0\\x38\\x5a\\x42\\\n\\x06\\x7b\\x22\\x4c\\x05\\x83\\xdf\\x07\\xf4\\xc5\\x04\\xe8\\x08\\xd9\\x0a\\x70\\\n\\xfe\\xd9\\xdc\\xf7\\x71\\x6e\\x10\\xfe\\x0e\\xcf\\x40\\x93\\x93\\xa2\\x13\\x0f\\\n\\xdf\\x0e\\x5b\\xc1\\xc9\\x19\\xd9\\xe6\\x62\\x66\\xae\\x86\\x99\\x30\\x01\\x0c\\\n\\x64\\x2d\\xd2\\xe0\\xc9\\xf0\\x18\\x38\\xa1\\xa6\\x8c\\xc3\\x40\\xaf\\x84\\xbb\\\n\\xc1\\x95\\x7b\\x2a\\x32\\xf8\\x97\\xc0\\x7d\\x60\\x60\\xdf\\x87\\xa6\\x8c\\x21\\\n\\x7b\\xe6\\x03\\x9e\\x7f\\x19\\x66\\xc3\\x97\\x40\\x6f\\xab\\xca\\xe8\\xde\\x0b\\\n\\xa7\\x6a\\x7e\\x36\\x08\\xfb\\xb1\\x14\\x3d\\x0d\\x37\\x41\\x5b\\x68\\xaa\\xc6\\\n\\xf1\\xe0\\x3c\\x30\\xab\\xb2\\xfe\\xb2\\xa3\\xfd\\xba\\xe4\\x25\\x6b\\xcb\\x8e\\\n\\x96\\xa5\\x17\\xe1\\x36\\xc8\\xb2\\x93\\xd3\\x9a\\xe4\\x38\\xfd\\xfe\\x5c\\x70\\\n\\xfc\\x59\\xdf\\xcd\\x39\\xfe\\x87\\xf7\\x17\\xc2\\x0d\\xf0\\xa9\\xf9\\xc7\\x03\\\n\\xec\\xce\\x43\\xbd\\xa1\\x5a\\xc9\\xe1\\x91\\x26\\xc9\\x7e\\x7a\\xc0\\x44\\x30\\\n\\x23\\x76\\xc0\\xbf\\xa0\\x9a\\x5c\\xe2\\x96\\x40\\x57\\x40\\xb8\\x72\\x2c\\x71\\\n\\x2f\\xc1\\x7c\\xd8\\x02\\x66\\xe9\\x68\\x98\\x0e\\x96\\x07\\x95\\x95\\xad\\xaf\\\n\\x71\\x6e\\x20\\x36\\xd9\\x58\\xa3\\x86\\xf3\\xfc\\x5d\\x70\\x3d\\x9c\\x99\\xf3\\\n\\xee\\x31\\xda\\x0c\\xcc\\x5b\\x60\\x82\\x58\\x8e\\xce\\x85\\x9e\\xe0\\xca\\x0d\\\n\\xe5\\x4a\\xb4\\x02\\xf8\\x9c\\xa5\\x68\\x25\\x94\\x15\\x07\\xc0\\x9a\\x16\\x4e\\\n\\xb8\\xfc\\x20\\x27\\xdb\\xe0\\x05\\x38\\x1a\\x34\\xba\\xac\\x1c\\xa0\\x26\\x3b\\\n\\x00\\x57\\x90\\xf5\\x39\\x96\\x7d\\x5e\\x03\\xb7\\xc2\\x6e\\x70\\xe0\\x95\\xa4\\\n\\x99\\x06\\x2d\\x2e\\x23\\x1a\\xfa\\x4b\\x78\\x06\\x0e\\x82\\x66\\xd7\\xc3\\x5e\\\n\\xf8\\x31\\x0c\\x02\\xe5\\x3c\\xc6\\xc0\\x55\\x50\\x6b\\x00\\x1c\\xff\\x78\\x30\\\n\\x63\\x63\\xf3\\x35\\x71\\x1d\\x58\\xdb\\x2d\\x2f\\x66\\xb7\\x49\\xe1\\xf7\\x4c\\\n\\xde\\x51\\xf0\\x55\\xb8\\x18\\xc2\\x24\\xb6\\x4f\\xe7\\xb3\\x1d\\x2c\\xef\\xe5\\\n\\xf9\\xc7\\x01\\xf0\\xa5\\xf0\\x45\\x2e\\xcb\\x7a\\x85\\xb3\\xfb\\xe0\\x9d\\x72\\\n\\xcb\\x27\\x4b\\x5c\\x73\\xfd\\x80\\x83\\xbd\\x08\\xcc\\x46\\x97\\x6f\\x1c\\x08\\\n\\x7f\\x35\\x98\\xd1\\xcb\\xc1\\x0c\\xae\\xa4\\xbe\\xdc\\x1c\\x1a\\x3d\\x60\\x0d\\\n\\x5e\\x01\\x4f\\xc1\\x7b\\xa5\\x7b\\x96\\x1b\\x03\\x6a\\x89\\x1b\\x0b\\x59\\x00\\\n\\x38\\x3d\\x2d\\xaf\\x0f\\xdb\\xab\\x69\\x30\\x0f\\x68\\x96\\x09\\x15\\x4a\\xf3\\\n\\x17\\xc1\\xfd\\x60\\x22\\x98\\x00\\x27\\x21\\x93\\xe5\\xc5\\xb9\\x6d\\x86\\x1f\\\n\\xc1\\xd5\\x10\\xca\\x00\\x99\\x14\\xc3\\xa0\\x30\\x00\\xe1\\x0b\\xf1\\xb9\\xd1\\\n\\x36\\x7a\\xfb\\xe3\\x1b\\xa5\\x6b\\x03\\xe7\\xf2\\xda\\x00\\x77\\xc3\\x8d\\x10\\\n\\x6b\\x00\\x0d\\x23\\xa0\\x5a\\x00\\xba\\xf2\\x8c\\xab\\x2a\\x94\\x2b\\xcf\\x49\\\n\\x67\\xe6\\x87\\xf7\\xde\\xe6\\x62\\x6f\\xd8\\xc0\\xb9\\x89\\x61\\x3f\\x1a\\xe3\\\n\\x9e\\xd1\\x54\\xf5\\xe3\\x41\\x13\\x29\\x4e\\x44\\x8d\\x9d\\x0b\\x4b\\xc1\\xac\\\n\\x8f\\xe5\\x37\\x34\\xd6\\xd5\\xd1\\x0d\\xce\\x87\\x3a\\x08\\x65\\x9b\\x01\\x30\\\n\\x50\\x0d\\x72\\x70\\x2d\\x25\\xb3\\xc1\\xd5\\xf1\\x2c\\xcc\\x83\\x1d\\x10\\xcb\\\n\\x2c\\x30\\x33\\xdb\\xc7\\x37\\xa2\\x6b\\x33\\xfb\\x58\\xd4\\xa6\\x99\\xbe\\x1b\\\n\\x97\\x05\\x1f\\xb3\\xf6\\x5a\\xfe\\x42\\x7d\\xc0\\x85\\x49\\x13\\x66\\x69\\x78\\\n\\xbf\\xe8\\xdc\\xc0\\xf7\\xce\\xb9\\xb9\\x8b\\xb6\\x97\\x20\\xcf\\xfc\\xf0\\xf1\\\n\\x43\\x5c\\x2c\\x04\\x03\\x11\\x3f\\xdb\\x89\\x36\\xff\\x9e\\x28\\xab\\x25\\x03\\\n\\x90\\x75\\xea\\x2f\\x93\\x2d\\xf0\\x5a\\xd6\\x10\\x1c\\x3b\\x72\\xde\\x0b\\xce\\\n\\x0e\\xda\\xf2\\x4e\\x0f\\xd0\\x68\\x69\\x09\\xe5\\xbb\\x97\\xc3\\xa4\\xb0\\x91\\\n\\x73\\x0d\\x9b\\x0c\\xe3\\xa3\\x76\\xfb\\xd8\\x09\\xb5\\x06\\xc0\\xef\\xc4\\xe5\\\n\\xd3\\xae\\x35\\x2e\\x5e\\x95\\xb6\\xe7\\xc9\\xb1\\x3f\\x0e\\x2b\\xa2\\x9b\\xb6\\\n\\x6f\\x0a\\xdb\\x5a\\x23\\x00\\xf6\\x6f\\x16\\x14\\x95\\x2a\\x33\\xd9\\x95\\x50\\\n\\x49\\x06\\x6f\\x6d\\xce\\x03\\xc3\\x69\\xbb\\x15\\x46\\x96\\xee\\xb9\\xa4\\xbf\\\n\\x03\\x96\\xbc\\x7e\\xa5\\x36\\x0f\\x1f\\xc3\\x3a\\x58\\xee\\x45\\x8d\\x32\\x81\\\n\\x0e\\xe7\\xbc\\xe3\\xb7\\xa7\\x42\\xbc\\x37\\xe4\\x3c\\xda\\xf0\\x17\\xfa\\x0b\\\n\\xdc\\x98\\x05\\x8b\\x61\\x1b\\x2c\\x83\\x39\\xb0\\x06\\xca\\x6a\\x5f\\x3e\\x6b\\\n\\xd9\\x13\\xfb\\x2d\\xea\\xbb\\x68\\x82\\xe1\\x08\\x76\\x73\\x61\\x29\\x33\\xb3\\\n\\x07\\x05\\x37\\xba\\x70\\x7e\\x1d\\xec\\x03\\x27\\x34\\x05\\x34\\xa5\\x0e\\xda\\\n\\x40\\xa6\\x57\\x39\\xf9\\x2b\\xb8\\x12\\x6b\\xd5\\xbb\\xbc\\x60\\xff\\x61\\x40\\\n\\xed\\x43\\xe3\\xbf\\x05\\x26\\x90\\x7d\\xaf\\x87\\xf7\\xa1\\x48\\x96\\x3f\\x4b\\\n\\x91\\xfb\\xa6\\x3f\\xab\\x4d\\x4a\\xc7\\x63\\xff\\x65\\x15\\x99\\x54\\x7e\\xa0\\\n\\x99\\x27\\xd6\\xe3\\x21\\x39\\xef\\x9a\\x99\\x96\\x06\\xa9\\x24\\x83\\xf4\\x1c\\\n\\xb8\\x59\\x9b\\xdd\\x9d\\x20\\x93\\x25\\xcc\\x55\\x70\\x2d\\x0c\\x80\\x70\\x35\\\n\\x59\\x6e\\x5e\\x81\\xfb\\xc1\\xc9\\xc7\\xfb\\x08\\x4d\\x55\\xa5\\x61\\xfe\\xca\\\n\\xb9\\x34\\x7a\\xb2\\x1d\\xd7\\x83\\x61\\x06\\x8c\\x03\\x7f\\x86\\xba\\xca\\x36\\\n\\xc0\\x66\\x38\\x08\\x71\\xb9\\xd3\\xec\\x46\\x19\\xcf\\x75\\x23\\xb5\\x74\\x00\\\n\\xcc\\x42\\x8d\\x9f\\x06\\xc3\\x1a\\x7d\\xe9\\x93\\x0b\\xb3\\xc2\\xec\\x3a\\x9a\\\n\\x73\\x2f\\x6e\\xda\\x43\\xc3\\xa3\\x70\\x21\\x98\\xe5\\x99\\xfc\\x86\\x9b\\xb1\\\n\\x84\\xd2\\x6c\\x27\\x3b\\x1b\\x9e\\x82\\x6a\\x41\\xe6\\x91\\x5c\\xb9\\xfa\\x0c\\\n\\xbe\\x2b\\xad\\x0e\\x42\\xf9\\x6d\\xf7\\xaf\\xab\\x61\\x0c\\xb8\\x02\\xdf\\x04\\\n\\xc7\\x6a\\xd9\\x74\\x93\\x76\\x65\\x6c\\x07\\x93\\xa8\\xaa\\x5a\\x2a\\x00\\x0e\\\n\\xcc\\x5f\\x27\\xe3\\xe1\\x36\\x98\\x04\\x5d\\x21\\x96\\xfb\\xc2\\xce\\xb8\\xb1\\\n\\xe0\\xfa\\x23\\xda\\xcd\\xb2\\x7a\\xb8\\x02\\xce\\x82\\x22\\x19\\xd4\\x27\\x61\\\n\\x2e\\x18\\x04\\x97\\x7b\\x73\\x65\\x72\\x2c\\x85\\x47\\xe0\\x6e\\xb0\\x7c\\xc4\\\n\\x72\\xbe\\x67\\x80\\x2b\\x42\\x5c\\xd9\\x26\\xd7\\x1b\\xb0\\x17\\x76\\x80\\xab\\\n\\xc8\\x40\\xba\\xe9\\x7a\\x3f\\x57\\xb5\\x04\\xc0\\x3f\\x8c\\xee\\x84\\xf7\\x4a\\\n\\x3d\\x39\\x88\\xce\\xd0\\x13\\x1c\\xa4\\x0c\\x82\\x0b\\xc1\\xc1\\xc5\\x3a\\x42\\\n\\xc3\\x2a\\x58\\x1e\\xdf\\xc8\\xb9\\xb6\\xef\\xf3\\xe1\\x06\\xb8\\x1e\\x3a\\x41\\\n\\x91\\xac\\xc3\\x96\\x9b\\x99\\x60\\x16\\x1a\\xb8\\x53\\x95\\x19\\xfd\\x30\\xb4\\\n\\x85\\xdb\\xa1\\x1f\\x54\\x92\\xe5\\xa9\\x47\\x09\\xff\\x86\\x30\\xfb\\x5d\\x41\\\n\\xd3\\xe1\\x59\\x70\\x45\\x6e\\x84\\xc2\\x40\\x70\\xaf\\x41\\xa3\\xf9\\xd7\\x0d\\\n\\xc6\\x5a\\x16\\xa3\\xf1\\x3b\\xc1\\x1d\\x3d\\x63\\x17\\xe7\\xd6\\x3e\\x3f\\x78\\\n\\x02\\xe2\\x77\\xb2\\x6b\\xef\\x69\\xbc\\x4b\\xd6\\xc1\\x56\\x92\\x7f\\x40\\x4d\\\n\\x86\\x87\\x40\\x43\\x8f\\x43\\xd6\\x4f\\xde\\xd1\\x8c\\x5d\\x00\\xe3\\x21\\x4f\\\n\\xae\\xc4\\x6b\\xe0\\xe7\\xf0\\x43\\xf0\\xd7\\x8c\\x01\\xae\\x26\\xc7\\x39\\x00\\\n\\xbe\\x0d\\xf3\\xc1\\x55\\x95\\xf7\\xfd\\x4a\\x6d\\x8e\\xdd\\x60\\x3a\\xbe\\xef\\\n\\x83\\xc9\\x5a\\x51\\x95\\x02\\x50\\xe9\\x43\\xd5\\xee\\xfd\\x9b\\xaf\\x3a\\x79\\\n\\xcd\\xa8\\x24\\xef\\xdf\\x0c\\xf5\\x70\\x18\\xaa\\xf5\\x9b\\xdd\\x77\\xb3\\x7b\\\n\\x10\\x46\\x42\\xa8\\x0e\\x5c\\x98\\x85\\xf6\\xa7\\x11\\xdb\\x61\\x26\\x0c\\x84\\\n\\xa6\\xca\\x31\\x8d\\x81\\xef\\xc2\\xef\\xc1\\x92\\x62\\xd0\\x4f\\xd6\\x80\\xab\\\n\\xd2\\x1f\\x07\\x3f\\x80\\x46\\xd5\\x21\\xce\\xc6\\xf3\\x78\\x60\\x22\\x8c\\x80\\\n\\x96\\xd0\\x3e\\x3a\\x79\\x12\\x66\\xc1\\xd3\\xe0\\x7f\\x19\\x14\\xa9\\x1b\\x37\\\n\\xbe\\x02\\x3f\\x83\\x71\\xe0\\x4a\\xc8\\xe4\\x64\\x5d\\x7d\\x2e\\xe5\\xfd\\x50\\\n\\x07\\x61\\x16\\xfb\\xac\\x25\\xcb\\xf9\\xbc\\x0a\\xd9\\x1e\\x30\\x84\\x73\\x8d\\\n\\xb3\\x5f\\xf7\\x90\\xee\\xe0\\x77\\xb6\\x81\\x86\\x34\\x45\\x6e\\xee\\x6f\\x82\\\n\\xfd\\xba\\xc9\\xae\\x84\\x7f\\xc2\\x76\\xf8\\x00\\xfc\\xb6\\xa6\\x86\\xe3\\xe1\\\n\\xb2\\x91\\x2c\\x65\\x96\\x28\\xc7\\xa8\\x07\\x26\\xa4\\x55\\xa1\\xf0\\xb7\\xba\\\n\\xf7\\x9a\\x23\\x97\\x9c\\x9b\\x91\\x03\\x5e\\x07\\xff\\x80\\xd5\\xe0\\x60\\x8f\\\n\\x40\\x91\\x1c\\xfc\\x25\\x70\\x57\\xe9\\x18\\x26\\x86\\x7d\\xae\\x82\\xdf\\x81\\\n\\x7d\\x99\\xe5\\x66\\xa5\\x41\\x0a\\xd5\\x8b\\x8b\\x5b\\xc0\\x09\\x3e\\x00\\xef\\\n\\x80\\x2b\\xda\\x72\\x16\\xee\\x75\\xbe\\xab\\x19\\xb5\\xca\\xf1\\x6f\\x29\\xd1\\\n\\x99\\xa3\\xdf\\xeb\\x03\\xe7\\x41\\x1d\\x38\\xae\\xb1\\x30\\x1c\\xbc\\x1f\\xcb\\\n\\x31\\x7c\\x01\\xbe\\x09\\x5b\\xc1\\xb9\\x34\\x1a\\x98\\xd7\\x95\\x64\\xd4\\x9e\\\n\\x83\\xd8\\x48\\x37\\x16\\xcb\\x85\\x7b\\x81\\x93\\x77\\xaf\\x10\\x7f\\x0d\\xec\\\n\\x04\\xb3\\xa4\\x9a\\xcc\\x8c\\x69\\x70\\x19\\xc4\\xe6\\x2f\\xa3\\xed\\x5e\\xf0\\\n\\xdb\\x7e\\xc7\\xe0\\x5a\\x4b\\xcd\\xe6\\x61\\x10\\xaa\\x1f\\x17\\x77\\x80\\x49\\\n\\xf0\\x0c\\x5c\\x01\\xd6\\xf1\\x50\\x07\\xb8\\xd8\\x1d\\x36\\x34\\xe3\\x5c\\x0f\\\n\\x5e\\x2f\\x61\\xf2\\xb8\\x02\\x7a\\x43\\x1d\\x4c\\x00\\xcb\\xa8\\x9b\\x71\\x5b\\\n\\x08\\xe5\\x8f\\x89\\x4b\\xe1\\x2a\\xa8\\x39\\x00\\x9b\\x78\\xe9\\xd7\\xa0\\xc9\\\n\\xa1\\x2c\\x0f\\x47\\xe1\\x7d\\xf8\\x10\\x0c\\x48\\xad\\x32\\x7b\\xae\\x03\\x27\\\n\\x12\\x6a\\x33\\x17\\x7f\\x80\\x7a\\xc8\\x02\\x6f\\x66\\x3f\\x01\\x06\\xe1\\x27\\\n\\xd0\\x17\\x32\\x69\\xc6\\x10\\x70\\xc3\\x73\\x92\\x23\\x20\\xcc\\x7e\\x97\\xfd\\\n\\x56\\x78\\x09\\x8a\\x64\\x60\\xaf\\x84\\xcb\\xe1\\x5d\\x30\\xf0\\x1b\\xc0\\x95\\\n\\x98\\x27\\xe7\\x6f\\x62\\x88\\x2b\\xfd\\x65\\x58\\x07\\x33\\xe0\\x06\\x08\\x13\\\n\\x8a\\xcb\\x86\\x95\\x33\\x94\\xa3\\xab\\xe4\\x48\\x38\\x38\\x6f\\x56\\x92\\x06\\\n\\xbb\\x91\\xed\\xaf\\xf4\\x50\\x33\\xee\\x69\\x9a\\x99\\xeb\\xa0\\x42\\x39\\xb1\\\n\\xf5\\xb0\\x08\\x32\\xf3\\xb3\\xfb\\xfb\\x38\\xf9\\x33\\x68\\xd6\\xf7\\xe0\\x6c\\\n\\xc8\\xe4\\x84\\x2d\\x03\\x83\\x20\\x9e\\xbc\\x59\\xbb\\x1c\\xde\\x80\\x3c\\x75\\\n\\xa1\\xf1\\xcb\\x70\\x0f\\xf8\\xbe\\xdf\\x75\\x55\\xce\\x02\\xdf\\xab\\x26\\x03\\\n\\xec\\xd8\\x16\\x80\\xdf\\x1e\\x0c\\xa3\\x20\\x54\\x07\\x2e\\x2c\\x81\\x67\\x42\\\n\\x4d\\x01\\x08\\x3b\\x69\\xc9\\x73\\xb3\\xfe\\x5c\\x88\\xb3\\xdf\\xc9\\xef\\x02\\\n\\x4b\\x4e\\x2c\\x83\\xa3\\x99\\x73\\xc0\\x65\\x7d\\x07\\xb8\\x22\\x32\\x99\\x58\\\n\\x12\\xca\\x95\\xb9\\x16\\x16\\xc3\\x47\\xe1\\x8d\\xe0\\xbc\\x3f\\xe7\\x53\\xc1\\\n\\x32\\xd1\\xb6\\xd4\\x3e\\x8d\\xe3\\x5b\\xe0\\x6a\\xf4\\xd8\\x14\\x59\\x11\\x36\\\n\\x81\\x2b\\x27\\x0e\\x80\\xef\\x1b\\x84\\xd3\\x3d\\xc9\\x3e\\xe2\\xf9\\xe7\\x25\\\n\\x0d\\xd4\\x7c\\x57\\x42\\x28\\xc7\\x16\\x67\\x70\\x78\\x3f\\x2b\\x27\\xb3\\x69\\\n\\xfc\\x13\\x58\\x9a\\x2a\\xc9\\x80\\x2d\\x01\\xcb\\x44\\x91\\xba\\x71\\xe3\\x1c\\\n\\x08\\x7d\\xf1\\xd7\\xd3\\x64\\x98\\x08\\xb5\\xc8\\x92\\x75\\xac\\xe0\\x05\\x4b\\\n\\xb5\\x15\\xa5\\xd1\\x87\\x0a\\x9e\\x6d\\xf5\\x66\\x07\\xe2\\xbe\\x12\\xef\\x1d\\\n\\x1d\\x69\\x73\\x65\\x84\\xe5\\x85\\xcb\\x46\\xf2\\x9d\\x2d\\xf0\\x00\\x3c\\x02\\\n\\xd6\\xec\\x22\\x59\\x1a\\x5e\\x83\\xa2\\x5a\\xee\\x7b\\x8e\\x25\\xaf\\x0f\\xcb\\\n\\xa3\\x2b\\xe3\\x7c\\x68\\xaa\\x0c\\xa4\\xa5\\x35\\x96\\x63\\x3e\\x54\\xe2\\xff\\\n\\x22\\x00\\x2e\\x57\\xcb\\xcc\\x7e\\x08\\x65\\x16\\x8e\\x01\\xb3\\x2f\\x5e\\x1d\\\n\\xe1\\x73\\x4e\\x68\\x27\\xb8\\xb1\\xba\\x11\\x16\\x69\\x30\\x37\\x6e\\x81\\xb1\\\n\\x50\\xd4\\x5f\\x16\\xa4\\xb8\\x44\\x75\\xe6\\x9d\\x09\\x30\\x1d\\xdc\\x27\\xaa\\\n\\xa9\\x17\\x0f\\x4c\\x82\\xd1\\x39\\x0f\\x3a\\x4f\\x57\\x61\\x43\\x22\\xc4\\x4b\\\n\\xfc\\x3c\\x6e\\xb8\\xd4\\x46\\x40\\x2c\\xeb\\xd9\\x42\\x68\\xca\\xcf\\xca\\xf8\\\n\\xdd\\x6a\\xd7\\xd6\\x6f\\x07\\x3b\\x20\\x7a\\xd0\\x8d\\xca\\xdf\\xed\\xaf\\x83\\\n\\x3f\\x6b\\x4f\\x42\\x2c\\x37\\x34\\x7f\\x6d\\xdc\\x09\\x17\\x80\\xf5\\x35\\x4f\\\n\\x96\\xb9\\x3a\\xe8\\x0f\\x66\\xa0\\x41\\xb3\\x8c\\x85\\xb2\\x64\\x58\\x86\\xac\\\n\\xdb\\xbd\\xc3\\x1b\\xa5\\x76\\xc7\\x67\\xc0\\x35\\xd0\\x3d\\x2a\\x56\\x5b\\x1a\\\n\\xea\\xe0\\x76\\x98\\x01\\x03\\x21\\xd6\\x6a\\x1a\\x1e\\x82\\xdd\\xde\\x88\\x37\\\n\\x2a\\xdb\\x3e\\x0f\\x6d\\xe4\\xa3\\x06\\x77\\x24\\x68\\x68\\x26\\x33\\xef\\x1a\\\n\\x70\\xc3\\x7a\\x1c\\x96\\x82\\x03\\x37\\x43\\x35\\xe8\\x62\\x98\\x02\\x13\\x61\\\n\\x18\\x14\\x99\\xcf\\xad\\x06\\x19\\x68\\x4b\\x89\\x65\\xcd\\xf3\\xbf\\x81\\x65\\\n\\x27\\x93\\xe6\\xae\\x81\\xa7\\x60\\x08\\x84\\xd9\\xde\\x91\\xeb\\x2f\\xc2\\x3d\\\n\\xe0\\x77\\x57\\xc1\\x0e\\x30\\x21\\xdd\\xc7\\xcc\\x7a\\x4b\\xd5\\x38\\xb8\\x04\\\n\\x0c\\x74\\xac\\x83\\x34\\x3c\\x0f\\x26\\x73\\x83\\xe2\\x00\\x9c\\xa4\\x55\\xf2\\\n\\x64\\x7b\\x9c\\x31\\x79\\xcf\\x35\\xa7\\xcd\\x3f\\x8e\\xe6\\xc1\\x70\\xf8\\x06\\\n\\x84\\x2b\\xd3\\x4d\\x50\\x83\\x35\\xe4\\x26\\xb0\\x46\\x6b\\x94\\xab\\xa3\\x2f\\\n\\x0c\\x2a\\x9d\\x73\\x68\\x24\\xcb\\x91\\xcb\\x3c\\x0c\\xa8\\x0f\\xb8\\x12\\xae\\\n\\x2c\\x1d\\xbd\\x9e\\x0b\\xe1\\x9c\\xf7\\x71\\xfd\\x28\\xf8\\xbd\\x1b\\x21\\x1c\\\n\\x8b\\x7e\\x5d\\x00\\x7d\\x60\\x32\\xb8\\x77\\xf9\\x0d\\xdb\\xed\\xd7\\xba\\x2f\\\n\\x79\\x89\\xe0\\x78\\x16\\xc0\\x5f\\x20\\x0c\\x3a\\x97\\xff\\xd3\\x85\\x9c\\x3e\\\n\\x0c\\x0e\\x28\\x44\\xe3\\x7f\\x03\\x0d\\x3f\\x9d\\x38\\xb6\\x86\\xcc\\xb0\\xa9\\\n\\x50\\x0f\\x66\\x78\\xf8\\xfd\\xf8\\xdc\\xf1\\xc4\\x6d\\xd9\\xb5\\xef\\xbe\\x08\\\n\\xbf\\x80\\x9f\\x82\\x99\\x9a\\xf7\\xbc\\xe5\\xe6\\x41\\x70\\x25\\xc5\\x72\\x9e\\\n\\x1a\\x3c\\x1f\\xfc\\xc5\\x92\\xf5\\xdd\\xdc\\xa3\\xe6\\x1b\\xd4\\x2b\\x20\\x0c\\\n\\x68\\xe3\\x0b\\x6e\\xb6\\x01\\xcb\\xc0\\xd5\\xa5\\x73\\x0e\\x0d\\x3a\\xc4\\xbf\\\n\\x8b\\x61\\xc9\\x27\\x97\\xad\\xf2\\xaf\\x59\\xbd\\x1f\\xb6\\x80\\x19\\xa2\\x31\\\n\\xdd\\x21\\x4f\\x8e\\x33\\x4f\\xef\\xd1\\xb8\\x08\\x7e\\x05\\xae\\xa8\\x75\\xe0\\\n\\xfe\\xd1\\x15\\x06\\x42\\xb8\\xe2\\x35\\x62\\x2b\\xd4\\x83\\xab\\x2a\\x94\\x41\\\n\\x74\\x25\\xbc\\x06\\x9e\\xf7\\x03\\xf7\\x86\\x5a\\x65\\xe0\\x37\\xc3\\x1c\\xf8\\\n\\x2d\\xac\\x07\\xfb\\x2b\\xab\\x51\\x34\\x68\\x35\\x2b\\x8c\\xbe\\xa5\\xa0\\x2f\\\n\\xa8\\xe3\\xb0\\x02\\x1e\\x02\\x27\\xd3\\x9a\\x3a\\x4a\\xe7\\x7b\\xe0\\x65\\xd0\\\n\\x1c\\x83\\x62\\x6d\\xb5\\x16\\x17\\x99\\xee\\x33\\xbe\\xe3\\xf2\\x76\\xa2\\x7f\\\n\\x04\\xb3\\xde\\x60\\x98\\xbd\\xbb\\x40\\x13\\x34\\x63\\x00\\x18\\x0c\\xf5\\x26\\\n\\x3c\\x01\\x4b\\xc0\\x39\\xc6\\xb2\\xed\\x0d\\x70\\x7f\\x72\\x3c\\xbb\\xc1\\x55\\\n\\x6a\\x52\\xe4\\x95\\x18\\x9a\\xcb\\x32\\x61\\x5d\\x85\\x8f\\x81\\x63\\x32\\x19\\\n\\xb6\\x80\\x63\\x6d\\xa4\\xbc\\x49\\xb9\\x39\\x4d\\x80\\x6b\\xe1\\x1c\\x70\\x02\\\n\\x8b\\x61\\x25\\x14\\xd6\\x2e\\xee\\xb5\\xb4\\x34\\x7d\\x30\\x98\\x0c\\x83\\xa0\\\n\\x0e\\x9c\\x7c\\x67\\x30\\x8b\\xde\\x01\\x6b\\xf0\\x5b\\xb0\\x0d\\x9c\\xa0\\x09\\\n\\xe2\\x72\\x8f\\x65\\xe6\\x6b\\xbe\\x25\\x60\\x34\\xd8\\xf7\\x1a\\x58\\x06\\x5b\\\n\\xa1\\x9a\\x34\\xde\\x15\\x39\\x04\\x1c\\x93\\x7b\\x40\\x8f\\x12\\x67\\x71\\x54\\\n\\x06\\x5c\\xe3\\x0f\\xc0\\x0e\\xd8\\x0e\\x8e\\xc7\\x95\\x64\\x62\\xe7\\x2a\\x2f\\\n\\x00\\x3e\\xe8\\x24\\xcd\\x3c\\xb3\\xc5\\x4e\\x2d\\x0d\\x85\\x9d\\x70\\xaf\\x35\\\n\\xd5\\x8e\\xce\\x1d\\x87\\x13\\x76\\x5c\\x66\\xdf\\x09\\xf0\\xd7\\x87\\x98\\x14\\\n\\x1e\\x3f\\x95\\x5d\\xb4\\xc5\\xd2\\x48\\x93\\xca\\xa3\\x81\\xf3\\xbd\\x5a\\xa4\\\n\\x5f\\xbe\\xeb\\x86\\xeb\\x58\\x0c\\xa4\\x15\\x43\\xb9\\x7a\\x5d\\x71\\x26\\x80\\\n\\xc1\\x70\\x05\\x25\\x25\\x07\\x92\\x03\\xc9\\x81\\xe4\\x40\\x72\\x20\\x39\\x90\\\n\\x1c\\x48\\x0e\\x24\\x07\\x92\\x03\\xc9\\x81\\xe4\\x40\\x72\\x20\\x39\\x90\\x1c\\\n\\x48\\x0e\\x24\\x07\\x92\\x03\\xc9\\x81\\xe4\\x40\\x72\\x20\\x39\\x90\\x1c\\x48\\\n\\x0e\\x24\\x07\\x92\\x03\\xc9\\x81\\xe4\\x40\\x72\\x20\\x39\\x90\\x1c\\x48\\x0e\\\n\\x24\\x07\\x92\\x03\\xc9\\x81\\xe4\\x40\\x72\\x20\\x39\\x90\\x1c\\x48\\x0e\\x24\\\n\\x07\\x92\\x03\\xc9\\x81\\xe4\\x40\\x72\\xe0\\xb3\\x70\\xe0\\xbf\\x1b\\xb5\\x5b\\\n\\x13\\xb5\\x32\\xe9\\xf7\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\\n\\x82\\\n\\x00\\x00\\x0c\\x52\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x60\\x00\\x00\\x00\\x60\\x08\\x06\\x00\\x00\\x00\\xe2\\x98\\x77\\x38\\\n\\x00\\x00\\x00\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\\n\\x00\\x00\\x00\\x20\\x63\\x48\\x52\\x4d\\x00\\x00\\x7a\\x26\\x00\\x00\\x80\\x84\\\n\\x00\\x00\\xfa\\x00\\x00\\x00\\x80\\xe8\\x00\\x00\\x75\\x30\\x00\\x00\\xea\\x60\\\n\\x00\\x00\\x3a\\x98\\x00\\x00\\x17\\x70\\x9c\\xba\\x51\\x3c\\x00\\x00\\x00\\x09\\\n\\x70\\x48\\x59\\x73\\x00\\x00\\x0e\\xc4\\x00\\x00\\x0e\\xc4\\x01\\x95\\x2b\\x0e\\\n\\x1b\\x00\\x00\\x01\\x59\\x69\\x54\\x58\\x74\\x58\\x4d\\x4c\\x3a\\x63\\x6f\\x6d\\\n\\x2e\\x61\\x64\\x6f\\x62\\x65\\x2e\\x78\\x6d\\x70\\x00\\x00\\x00\\x00\\x00\\x3c\\\n\\x78\\x3a\\x78\\x6d\\x70\\x6d\\x65\\x74\\x61\\x20\\x78\\x6d\\x6c\\x6e\\x73\\x3a\\\n\\x78\\x3d\\x22\\x61\\x64\\x6f\\x62\\x65\\x3a\\x6e\\x73\\x3a\\x6d\\x65\\x74\\x61\\\n\\x2f\\x22\\x20\\x78\\x3a\\x78\\x6d\\x70\\x74\\x6b\\x3d\\x22\\x58\\x4d\\x50\\x20\\\n\\x43\\x6f\\x72\\x65\\x20\\x35\\x2e\\x34\\x2e\\x30\\x22\\x3e\\x0a\\x20\\x20\\x20\\\n\\x3c\\x72\\x64\\x66\\x3a\\x52\\x44\\x46\\x20\\x78\\x6d\\x6c\\x6e\\x73\\x3a\\x72\\\n\\x64\\x66\\x3d\\x22\\x68\\x74\\x74\\x70\\x3a\\x2f\\x2f\\x77\\x77\\x77\\x2e\\x77\\\n\\x33\\x2e\\x6f\\x72\\x67\\x2f\\x31\\x39\\x39\\x39\\x2f\\x30\\x32\\x2f\\x32\\x32\\\n\\x2d\\x72\\x64\\x66\\x2d\\x73\\x79\\x6e\\x74\\x61\\x78\\x2d\\x6e\\x73\\x23\\x22\\\n\\x3e\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x3c\\x72\\x64\\x66\\x3a\\x44\\x65\\x73\\\n\\x63\\x72\\x69\\x70\\x74\\x69\\x6f\\x6e\\x20\\x72\\x64\\x66\\x3a\\x61\\x62\\x6f\\\n\\x75\\x74\\x3d\\x22\\x22\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\\n\\x20\\x20\\x78\\x6d\\x6c\\x6e\\x73\\x3a\\x74\\x69\\x66\\x66\\x3d\\x22\\x68\\x74\\\n\\x74\\x70\\x3a\\x2f\\x2f\\x6e\\x73\\x2e\\x61\\x64\\x6f\\x62\\x65\\x2e\\x63\\x6f\\\n\\x6d\\x2f\\x74\\x69\\x66\\x66\\x2f\\x31\\x2e\\x30\\x2f\\x22\\x3e\\x0a\\x20\\x20\\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x3c\\x74\\x69\\x66\\x66\\x3a\\x4f\\x72\\x69\\\n\\x65\\x6e\\x74\\x61\\x74\\x69\\x6f\\x6e\\x3e\\x31\\x3c\\x2f\\x74\\x69\\x66\\x66\\\n\\x3a\\x4f\\x72\\x69\\x65\\x6e\\x74\\x61\\x74\\x69\\x6f\\x6e\\x3e\\x0a\\x20\\x20\\\n\\x20\\x20\\x20\\x20\\x3c\\x2f\\x72\\x64\\x66\\x3a\\x44\\x65\\x73\\x63\\x72\\x69\\\n\\x70\\x74\\x69\\x6f\\x6e\\x3e\\x0a\\x20\\x20\\x20\\x3c\\x2f\\x72\\x64\\x66\\x3a\\\n\\x52\\x44\\x46\\x3e\\x0a\\x3c\\x2f\\x78\\x3a\\x78\\x6d\\x70\\x6d\\x65\\x74\\x61\\\n\\x3e\\x0a\\x4c\\xc2\\x27\\x59\\x00\\x00\\x0a\\x63\\x49\\x44\\x41\\x54\\x78\\x01\\\n\\xed\\x9d\\x57\\x88\\xd5\\x4c\\x14\\xc7\\x67\\xed\\xbd\\xf7\\xba\\x2a\\xf6\\x2e\\\n\\x16\\xec\\x8a\\x88\\x28\\xf8\\x60\\x01\\x1f\\x54\\xd0\\x07\\x1b\\x96\\x07\\xc5\\\n\\x07\\x51\\x7c\\x11\\x2b\\x82\\x05\\x45\\x1f\\x6d\\x60\\x79\\x50\\x14\\x3b\\x58\\\n\\x50\\x14\\x41\\xc5\\xae\\x58\\x40\\xec\\xbd\\xf7\\x9a\\x6f\\x7e\\xf3\\x7d\\x73\\\n\\xbf\\xbb\\xb9\\x93\\xdd\\x9b\\xb8\\x49\\x76\\xbd\\x73\\x60\\x36\\xc9\\x24\\x99\\\n\\xc9\\xfd\\xff\\x33\\x33\\x27\\xe7\\x9c\\x99\\xcd\\x72\\xa4\\x08\\x2b\\xb1\\x21\\\n\\x50\\x24\\xb6\\x9a\\x6d\\xc5\\x0a\\x01\\x4b\\x40\\xcc\\x2f\\x82\\x25\\xc0\\x12\\\n\\x10\\x33\\x02\\x31\\x57\\x6f\\x5b\\x80\\x25\\x20\\x66\\x04\\x62\\xae\\xde\\xb6\\\n\\x00\\x4b\\x40\\xcc\\x08\\xc4\\x5c\\xbd\\x6d\\x01\\x96\\x80\\x98\\x11\\x88\\xb9\\\n\\x7a\\xdb\\x02\\x2c\\x01\\x31\\x23\\x10\\x73\\xf5\\xb6\\x05\\xc4\\x4c\\x40\\xb1\\\n\\x30\\xea\\xc7\\xc0\\xfa\\xf5\\xeb\\x57\\xf1\\xf9\\xf3\\x67\\x95\\xbe\\x7c\\xf9\\\n\\x92\\xd8\\x27\\x8f\\xe3\\x9f\\x3f\\x7f\\x8a\\x5f\\xbf\\x7e\\x89\\xdf\\xbf\\x7f\\\n\\x27\\xb6\\x7a\\x9f\\x7c\\x12\\xd7\\xe8\\xeb\\x92\\xb7\\x25\\x4a\\x94\\x10\\x95\\\n\\x2a\\x55\\x12\\x5d\\xba\\x74\\x11\\x1d\\x3a\\x74\\x10\\x59\\x59\\x59\\x61\\xfc\\\n\\x8c\\x48\\xca\\xcc\\x17\\x02\\xde\\xbe\\x7d\\x2b\\x1e\\x3e\\x7c\\xa8\\xd2\\x83\\\n\\x07\\x0f\\x04\\xe9\\xdd\\xbb\\x77\\x8a\\x04\\xc0\\x86\\x0c\\xbd\\x85\\x00\\x8e\\\n\\x35\\xc8\\x1a\\x74\\xb6\\x7a\\x5f\\x9f\\x4b\\x06\\x5d\\xef\\x73\\xae\\x78\\xf1\\\n\\xe2\\x8a\\x80\\x8e\\x1d\\x3b\\x8a\\xb1\\x63\\xc7\\x8a\\x51\\xa3\\x46\\x45\\x02\\\n\\x56\\x18\\x95\\x04\\x22\\xe0\\xc3\\x87\\x0f\\xe2\\xdc\\xb9\\x73\\xe2\\xfe\\xfd\\\n\\xfb\\x2a\\x3d\\x7e\\xfc\\x58\\x3c\\x7d\\xfa\\x54\\x3c\\x79\\xf2\\x44\\x3c\\x7a\\\n\\xf4\\x48\\x70\\x0c\\x98\\x61\\xc9\\x8f\\x1f\\x3f\\x54\\x8b\\xa2\\x9e\\xbb\\x77\\\n\\xef\\xaa\\x56\\xd0\\xbc\\x79\\xf3\\xb0\\xaa\\x0b\\xb5\\x5c\\xdf\\x04\\x5c\\xb8\\\n\\x70\\x41\\x6c\\xda\\xb4\\x49\\x9c\\x3f\\x7f\\x3e\\xf1\\xc6\\xf3\\x76\\xc6\\x25\\\n\\xd7\\xaf\\x5f\\x17\\x87\\x0f\\x1f\\x16\\x19\\x41\\xc0\\xf3\\xe7\\xcf\\xc5\\xfc\\\n\\xf9\\xf3\\xc5\\xbe\\x7d\\xfb\\x44\\x41\\x72\\xa4\\x3d\\x7b\\xf6\\x2c\\x2e\\xfe\\\n\\xff\\xb8\\x5e\\x5f\\x2d\\xe0\\xf8\\xf1\\xe3\\x62\\xef\\xde\\xbd\\x7f\\x5c\\x69\\\n\\x7e\\x17\\xd0\\xa3\\x47\\x8f\\xfc\\x2e\\x32\\xb2\\xf2\\x7c\\xa9\\xa1\\x87\\x0e\\\n\\x1d\\x8a\\xec\\xc1\\xd2\\xad\\x68\\xe2\\xc4\\x89\\xa2\\x67\\xcf\\x9e\\xe9\\x5e\\\n\\x5e\\xe0\\xae\\xf3\\xd5\\x02\\xca\\x97\\x2f\\x9f\\xef\\x3f\\x00\\x15\\xb2\\x48\\\n\\x91\\x22\\x2a\\x15\\x2d\\x5a\\x54\\xe8\\x54\\xac\\x58\\xb1\\xc4\\xbe\\xce\\xe3\\\n\\x3a\\xbd\\xdf\\xac\\x59\\x33\\x05\\xfc\\xc8\\x91\\x23\\x45\\xc5\\x8a\\x15\\xf3\\\n\\xfd\\xb9\\xa2\\x2a\\x30\\xcb\\x4f\\x54\\xc4\\xd1\\xa3\\x47\\xc5\\xd0\\xa1\\x43\\\n\\x95\\x06\\x92\\xdb\\x03\\x56\\xa8\\x50\\x41\\x00\\x50\\xd5\\xaa\\x55\\x45\\x95\\\n\\x2a\\x55\\x44\\xe5\\xca\\x95\\x55\\x42\\x77\\x47\\x85\\x04\\x5c\\x37\\xc0\\x80\\\n\\x9b\\x4c\\x86\\xde\\xd7\\x5b\\xf7\\xf9\\x1a\\x35\\x6a\\x88\\xa6\\x4d\\x9b\\x16\\\n\\x6a\\xf0\\xc1\\xd0\\x17\\x01\\xa8\\x9f\\xdb\\xb7\\x6f\\x17\\x6b\\xd7\\xae\\x15\\\n\\x17\\x2f\\x5e\\xf4\\xe4\\x60\\xdc\\xb8\\x71\\x62\\xcc\\x98\\x31\\xa2\\x5c\\xb9\\\n\\x72\\xa2\\x6c\\xd9\\xb2\\x39\\x92\\x7e\\x83\\xf5\\xdb\\xec\\x59\\x48\\x86\\x9c\\\n\\xf0\\xdd\\x05\\xf1\\xe1\\xf3\\xed\\xdb\\x37\\x31\\x6d\\xda\\x34\\x4f\\x88\\x5a\\\n\\xb7\\x6e\\x2d\\x06\\x0c\\x18\\xe0\\x79\\xde\\x9e\\xf8\\x1f\\x01\\x5f\\x83\\x30\\\n\\xb7\\x95\\x2c\\x59\\x52\\xb4\\x69\\xd3\\xe6\\xff\\x12\\xec\\xde\\x1f\\x21\\xe0\\\n\\x9b\\x80\\x3f\\xaa\\xcd\\xde\\x9c\\x82\\x80\\x25\\x20\\x05\\x92\\x68\\x33\\x2c\\\n\\x01\\xd1\\xe2\\x9d\\x52\\x9b\\x25\\x20\\x05\\x92\\x68\\x33\\x2c\\x01\\xd1\\xe2\\\n\\x9d\\x52\\x9b\\x25\\x20\\x05\\x92\\x68\\x33\\x2c\\x01\\xd1\\xe2\\x9d\\x52\\x9b\\\n\\x25\\x20\\x05\\x92\\x68\\x33\\x2c\\x01\\xd1\\xe2\\x9d\\x52\\x9b\\x25\\x20\\x05\\\n\\x92\\x68\\x33\\x2c\\x01\\xd1\\xe2\\x9d\\x52\\x9b\\x25\\x20\\x05\\x92\\x68\\x33\\\n\\x7c\\x59\\x43\\xa3\\x7a\\x34\\x42\\x4f\\x08\\x63\\xd1\\x89\\x28\\x08\\x4c\\xdb\\\n\\xf8\\x16\\xf0\\x27\\xfc\\x4d\\x12\\x0a\\x01\\x37\\x6e\\xdc\\x10\\x07\\x0f\\x1e\\\n\\x4c\\x38\\xee\\xb5\\x03\\x5f\\x87\\xaa\\xe8\\x63\\x0d\\xb4\\x0e\\xe0\\x62\\xfb\\\n\\xe9\\xd3\\xa7\\x44\\x0c\\x11\\xf1\\x43\\x24\\xa2\\x2e\\xca\\x94\\x29\\x23\\xea\\\n\\xd5\\xab\\xa7\\x1c\\x42\\x9d\\x3b\\x77\\xfe\\x6b\\x38\\x08\\x85\\x80\\x03\\x07\\\n\\x0e\\x88\\xab\\x57\\xaf\\x2a\\x90\\x34\\xd8\\x1c\\xb0\\xaf\\x8f\\xd9\\x42\\x08\\\n\\x6f\\x79\\x32\\x01\\x00\\xae\\xaf\\x71\\xa3\\x8c\\x17\\xed\\xec\\xd9\\xb3\\x62\\\n\\xc9\\x92\\x25\\xa2\\x5d\\xbb\\x76\\xee\\xd3\\x85\\xf2\\x38\\x14\\x02\\x08\\xd0\\\n\\x22\\xe5\\xb7\\xd0\\x12\\x20\\xb7\\x41\\x83\\x06\\x62\\xfd\\xfa\\xf5\\xf9\\x5d\\\n\\x7c\\x2c\\xe5\\x15\\xca\\x41\\x78\\xc7\\x8e\\x1d\\xb1\\x80\\x15\\x46\\xa5\\x85\\\n\\x92\\x80\\x52\\xa5\\x4a\\x85\\x81\\x45\\x2c\\x65\\x16\\x4a\\x02\\x26\\x4c\\x98\\\n\\x10\\x0b\\x58\\x61\\x54\\x1a\\xca\\x18\\x10\\xc6\\x83\\x52\\x26\\x6f\\x3e\\x11\\\n\\x17\\xe3\\xc7\\x8f\\x0f\\xab\\x8a\\xc8\\xcb\\x2d\\x30\\x04\\x10\\xae\\x42\\x3c\\\n\\x11\\xc1\\x5f\\x6c\\xd1\\xfb\\x75\\x22\\xb4\\x85\\x38\\x20\\xc2\\xd1\\x89\\x82\\\n\\xcb\\xce\\xce\\x8e\\x1c\\xa8\\xb0\\x2a\\x0c\\x85\\x80\\x7e\\xfd\\xfa\\x89\\x5e\\\n\\xbd\\x7a\\xa9\\x68\\x37\\x02\\xab\\x74\\x70\\x95\\x69\\x9f\\x28\\x0b\\x74\\x7c\\\n\\xde\\x6e\\x12\\xc7\\x7a\\xcb\\xbe\\x3e\\x86\\x94\\x3a\\x75\\xea\\xa8\\x32\\xc3\\\n\\x02\\x23\\x8e\\x72\\x43\\x21\\xa0\\x6f\\xdf\\xbe\\x62\\xea\\xd4\\xa9\\x0a\\x78\\\n\\x0d\\x3a\\x5b\\x84\\x80\\x2c\\x44\\xe7\\xf3\\x65\\xcb\\x8c\\x17\\x9d\\xaf\\x4e\\\n\\x66\\xd0\\x9f\\x50\\x08\\xa0\\xeb\\xa8\\x5e\\xbd\\x7a\\x06\\xc1\\x18\\xfc\\xa7\\\n\\x16\\x4a\\x2d\\x28\\xf8\\xcf\\x2d\\x78\\x77\\x5a\\x02\\x62\\xe6\\xc4\\x12\\x60\\\n\\x09\\x88\\x19\\x81\\x98\\xab\\xb7\\x2d\\x20\\x66\\x02\\x42\\xd1\\x82\\x62\\xfe\\\n\\x4d\\xa1\\x54\\xff\\xfd\\xfb\\x77\\xf1\\xe6\\xcd\\x1b\\xc1\\x1c\\x89\\x6a\\xd5\\\n\\xaa\\xa9\\x79\\xca\\xf9\\x51\\x91\\x25\\xc0\\x03\\x45\\x26\\x9a\\x33\\x09\\x85\\\n\\x74\\xe9\\xd2\\x25\\xf1\\xf2\\xe5\\x4b\\xe5\\x1c\\x82\\x08\\x3e\\x1c\\x21\\x81\\\n\\x19\\x3a\\x6d\\xdb\\xb6\\x15\\x03\\x07\\x0e\\x54\\x93\\x50\\x3c\\x8a\\xca\\x35\\\n\\xdb\\x12\\xe0\\x82\\x87\\x09\\xe7\\xbb\\x76\\xed\\x52\\x1e\\x3d\\x66\\xfc\\xe3\\\n\\xd7\\x60\\x7a\\xae\\xf6\\xe6\\xe9\\xcb\\xf9\\x90\\x64\\xca\\x55\\xad\\x5a\\xb5\\\n\\x04\\x1e\\xc0\\x39\\x73\\xe6\\xe8\\x53\\xbe\\xb6\\x96\\x80\\xff\\xe0\\x02\\x60\\\n\\xe6\\x3f\\xe3\\xe8\\xb9\\x7c\\xf9\\xb2\\x9a\\x84\\x9e\\x1b\\x92\\x78\\xed\\xe8\\\n\\x92\\x48\\x2b\\x57\\xae\\x54\\xa6\\x97\\xde\\xbd\\x7b\\xe7\\x76\\x8b\\xf1\\x9c\\\n\\x25\\x40\\xc2\\xf2\\xe2\\xc5\\x0b\\xb1\\x7a\\xf5\\x6a\\xb1\\x73\\xe7\\x4e\\xc1\\\n\\xcc\\x7b\\xbf\\x42\\x0b\\x39\\x73\\xe6\\x8c\\xb0\\x04\\xf8\\x45\\x4e\\x5e\\x0f\\\n\\xe0\\xf3\\xe6\\xcd\\x13\\x47\\x8e\\x1c\\x11\\xef\\xdf\\xbf\\x0f\\x50\\xc2\\xbf\\\n\\xb7\\x7c\\xfc\\xf8\\x31\\xd0\\xbd\\x05\\xbe\\x05\\xd0\\xd4\\x79\\x43\\x59\\x8d\\\n\\x85\\x3e\\x99\\x2d\\xfd\\x2f\\xe6\\xe9\\xee\\xdd\\xbb\\x8b\\xba\\x75\\xeb\\x06\\\n\\xfa\\xe1\\xdc\\xc4\\x00\\x3b\\x6b\\xd6\\x2c\\x71\\xec\\xd8\\x31\\xcf\\x40\\x00\\\n\\x5d\\x78\\xb6\\x34\\x81\\x33\\xe0\\x32\\x38\\x9f\\x38\\x71\\x42\\x67\\x27\\xb6\\\n\\x41\\x8d\\x89\\xa1\\x10\\xc0\\x2a\\x2a\\x44\\x45\\x68\\x7b\\x3e\\x5b\\x4c\\xcc\\\n\\x5e\\x82\\xb3\\x9d\\xb7\\x8f\\x1f\\x47\\x62\\xf9\\x1b\\x12\\x9a\\x07\\x65\\xe9\\\n\\xd5\\x58\\x58\\x89\\x85\\x04\\x01\\x18\\xfb\\xba\\x76\\xed\\x2a\\x66\\xcc\\x98\\\n\\xa1\\x56\\x4b\\xf1\\x2a\\xdb\\x2b\\x9f\\x37\\x9f\\x7b\\x4f\\x9e\\x3c\\xe9\\x75\\\n\\x89\\x0a\\x83\\x19\\x36\\x6c\\x98\\xe8\\xd3\\xa7\\x8f\\x0a\\x04\\xc0\\x24\\xce\\\n\\x5c\\x69\\x13\\x01\\x3c\\x53\\x10\\x09\\x85\\x80\\xfd\\xfb\\xf7\\xab\\xb7\\x15\\\n\\x47\\x0a\\x2a\\x9b\\x9e\\x2b\\x5c\\xba\\x74\\xe9\\xc4\\x9a\\x40\\x0c\\x7a\\xc4\\\n\\x05\\xb1\\x25\\xf0\\x0a\\xfd\\x5a\\x27\\xc8\\x20\\x41\\x80\\xd7\\xd2\\x37\\xf4\\\n\\xbb\\xd7\\xae\\x5d\\x13\\x34\\xfd\\x8d\\x1b\\x37\\x0a\\xca\\x4e\\x57\\x08\\x7d\\\n\\x61\\xd1\\x91\\xdc\\xc0\\x1f\\x3d\\x7a\\xb4\\x98\\x3c\\x79\\xb2\\x68\\xd8\\xb0\\\n\\xa1\\x6a\\x6d\\xf8\\x25\\x10\\x1d\\x6e\\xe3\\xae\\x2b\\x68\\x0b\\xa0\\xe9\\xf9\\\n\\x16\\xb9\\x68\\x07\\xff\\x73\\xc0\\x57\\x92\\x6f\\x88\\x23\\x6d\\xff\\x8e\\x8c\\\n\\xed\\x71\\xe4\\xc3\\x3a\\x1c\\xfb\\x2d\\xc3\\x74\\x3d\\x65\\x49\\x35\\xd0\\xd7\\\n\\x6f\\x58\\xb7\\x6e\\x9d\\x7a\\x0e\\x53\\x79\\x72\\xd9\\x03\\x67\\xc5\\x8a\\x15\\\n\\xce\\x9d\\x3b\\x77\\x1c\\xf9\\x82\\xa4\\x94\\xbb\\x6d\\xdb\\x36\\xe3\\x73\\x2f\\\n\\x5c\\xb8\\x30\\xe5\\xda\\x74\\x32\\x02\\xb5\\x00\\x02\\xa4\\xfc\\x8a\\x7c\\x18\\\n\\xf5\\xa6\\xfb\\xbd\\x2f\\xaf\\xeb\\x69\\x41\\x44\\xd3\\xa5\\x2b\\xb7\\x6e\\xdd\\\n\\x12\\x8b\\x17\\x2f\\x56\\xd1\\x76\\xee\\x7b\\x58\\x5e\\x61\\xd5\\xaa\\x55\\xa2\\\n\\x5b\\xb7\\x6e\\x6a\\x69\\x05\\xf7\\x79\\x8e\\x69\\xb5\\x26\\x09\\xda\\x02\\xfc\\\n\\x23\\x29\\x6b\\xa7\\x59\\xd2\\xe7\\x01\\x6a\\xdc\\xc2\\x58\\x40\\xa0\\x56\\x3a\\\n\\x02\\x59\\x4b\\x97\\x2e\\x55\\xe3\\x8a\\xfb\\x7a\\x00\\x5c\\xb6\\x6c\\x99\\x9a\\\n\\xe1\\x9f\\x5b\\xfc\\x69\\x7e\\x13\\x10\\xc8\\x18\\x57\\xbb\\x76\\x6d\\xd1\\xa9\\\n\\x53\\x27\\xf7\\x6f\\x88\\xfc\\x18\\xa0\\xf8\\x02\\xc5\\x2c\\x90\\x8e\\x9c\\x3e\\\n\\x7d\\x5a\\x6c\\xdd\\xba\\xd5\\x78\\xe9\\xcc\\x99\\x33\\x95\\x49\\x21\\x37\\xf0\\\n\\xb9\\xd1\\x8b\\x80\\xa0\\x83\\x70\\x20\\x02\\x88\\x60\\x98\\x3b\\x77\\xae\\x80\\\n\\x88\\x38\\x04\\xe7\\x3c\\x7e\\xe7\\xe5\\xcb\\x97\\xab\\x45\\xfb\\xd2\\xf9\\xf1\\\n\\xb4\\x56\\x3e\\xb6\\x88\\x45\\x75\\x0b\\xab\\x2f\\xa2\\x11\\xa1\\x30\\xe4\\x25\\\n\\x5e\\x04\\xe4\\x75\\x9f\\xd7\\xf9\\x40\\x5d\\x10\\x85\\x0d\\x1e\\x3c\\x58\\xf5\\\n\\x97\\xbb\\x77\\xef\\x56\\x0b\\xe7\\xa1\\x1e\\xa2\\xa3\\xe7\\xf7\\x03\\x12\\x92\\\n\\x4e\\xdf\\xdc\\xa8\\x51\\x23\\x91\\x2d\\x75\\x71\\xba\\x9b\\x9a\\x35\\x6b\\x2a\\\n\\x35\\x94\\x25\\x2b\\x51\\x71\\xd3\\x11\\xd4\\xd9\\x3d\\x7b\\xf6\\x18\\x2f\\x9d\\\n\\x3d\\x7b\\xb6\\xa8\\x5f\\xbf\\xbe\\xf1\\x9c\\x3b\\xd3\\xeb\\xf7\\x11\\x60\\x1c\\\n\\x44\\x02\\x13\\x80\\x5e\\x3f\\x62\\xc4\\x08\\xc1\\xca\\x28\\x7c\\x28\\x69\\xfd\\\n\\x1d\\xd5\\x91\\x35\\xdc\\x48\\x18\\xb6\\x18\\x20\\xd1\\xf3\\x79\\x70\\x53\\x42\\\n\\x45\\x65\\xc1\\x25\\x9d\\x74\\x5c\\x90\\xde\\xf2\\xc1\\x45\\x3f\\x4f\\xa2\\xab\\\n\\x61\\x0d\\xa2\\x20\\x4a\\x00\\xa6\\x02\\x56\\x79\\x71\\x0b\\xc6\\xb4\\x41\\x83\\\n\\x06\\xb9\\xb3\\x3d\\x8f\\x69\\xfd\\x26\\xc1\\x26\\x14\\x44\\x02\\x13\\x40\\x65\\\n\\x0c\\x5c\\xad\\x5a\\xb5\\xca\\x51\\x2f\\x6f\\x82\\xfe\\xa0\\x62\\xcb\\x8f\\x66\\\n\\xf0\\x23\\xd1\\x0d\\xe8\\x7d\\x7d\\x4c\\x48\\x0a\\x3a\\xbc\\x57\\xca\\xab\\x4f\\\n\\xce\\x51\\x79\\x2e\\x07\\x98\\x1a\\x4c\\xc2\\x8a\\x5b\\x7c\\x60\\xa5\\x2b\\x5e\\\n\\xdf\\x1b\\xb1\\x10\\x60\\x7a\\x68\\xfa\\x51\\x52\\x5c\\xe3\\x83\\xe9\\x99\\x68\\\n\\x79\\x5e\\xeb\\xdd\\xf9\\x5d\\xf4\\x95\\x16\\x6b\\x92\\x57\\xaf\\x5e\\x99\\xb2\\\n\\xf3\\xcc\\x0b\\x34\\x08\\xe7\\x59\\x6a\\x01\\xbb\\xe0\\xde\\xbd\\x7b\\xea\\xcb\\\n\\xdc\\xfd\\x58\\x74\\x7b\\x7e\\xb5\\x39\\x2f\\x02\\x5e\\xbf\\x7e\\xed\\x2e\\x3e\\\n\\xad\\xe3\\x8c\\x20\\x80\\xb7\\xd3\\xf4\\xcd\\xd2\\xa4\\x49\\x93\\xb4\\x34\\x9f\\\n\\x64\\x24\\xbd\\xba\\x2b\\xc6\\xbe\\x20\\x92\\x11\\x04\\xa0\\x04\\x98\\x04\\xcd\\\n\\xca\\xaf\\x30\\x4f\\xcd\\x24\\xd8\\xa6\\x82\\x48\\x46\\x10\\x60\\x7a\\xfb\\x01\\\n\\x2b\\xdd\\x2f\\xe8\\x64\\x60\\xd1\\xc6\\x4c\\xdd\\x10\\xc6\\x43\\x2f\\x15\\x35\\\n\\xf9\\x7e\\xf7\\x7e\\x46\\x10\\x80\\xc6\\x65\\x12\\x54\\x5a\\xbf\\x82\\x56\\x86\\\n\\x5f\\xc0\\x2d\\x90\\xec\\xc7\\x26\\xa5\\xef\\xcf\\x08\\x02\\x18\\x6c\\x4d\\x72\\\n\\xe5\\xca\\x15\\x53\\x76\\x9e\\x79\\x8c\\x1d\\x26\\xc1\\x61\\xe4\\x57\\x32\\x82\\\n\\x80\\xc6\\x8d\\x1b\\xab\\xb9\\x05\\x6e\\x70\\x50\\x4d\\xfd\\xe8\\xef\\x74\\x31\\\n\\x9b\\x37\\x6f\\x56\\x1e\\x34\\x77\\x59\\x1c\\x33\\x37\\xda\\xb7\\xc8\\xa6\\x93\\\n\\x11\\x22\\x9d\\x2b\\x46\\x3b\\xfe\\xf4\\xe9\\xd3\\x1d\\xe9\\xd4\\xc9\\x13\\x03\\\n\\xa9\\xe5\\x38\\xd2\\xfe\\xe5\\x48\\x32\\x8d\\xe5\\x48\\xe0\\x1d\\x19\\x27\\xe4\\\n\\xc8\\xc1\\x38\\xcf\\xb2\\x92\\x2f\\x08\\xe4\\x90\\x49\\x2e\\xa0\\xb0\\xec\\xcb\\\n\\xff\\x31\\x60\\x04\\x4e\\x7e\\x34\\x3a\\x53\\xa6\\x4c\\x71\\x70\\x32\\x49\\x43\\\n\\x9d\\xf1\\xe7\\x70\\x6e\\xf8\\xf0\\xe1\\x8e\\x54\\x41\\x8d\\x65\\x00\\xbe\\x4e\\\n\\x0b\\x16\\x2c\\x30\\x96\\xe1\\x95\\xe9\\x6b\\xe9\\x62\\xdf\\xcd\\xab\\x00\\xdd\\\n\\x80\\xbb\\x13\\xb3\\x09\\x06\\x43\\xb7\\xe0\\x6e\\xe4\\x1c\\x5d\\x15\\x5b\\xec\\\n\\x5c\\xd8\\x9b\\xf8\\xb8\\xc2\\x9e\\x45\\x9c\\x10\\x0e\\x7c\\x09\\xa2\\xfb\\xd6\\\n\\x94\\x63\\x6c\\x57\\xfc\\x43\\x89\\xf6\\xed\\xdb\\xa7\\x9c\\x33\\x66\\x78\\x31\\\n\\xf3\\x37\\xe6\\x6f\\xd8\\xb0\\x21\\xf1\\xa6\\x4a\\x30\\x8c\\xfb\\xbc\\xe5\\x52\\\n\\x3b\\x72\\xa4\\xe1\\xcf\\x91\\xea\\x66\\x20\\xd7\\xa9\\x5c\\x37\\x3b\\x6d\\xf8\\\n\\x32\\xa6\\x0b\\x02\\x11\\x19\\x69\\xe1\\xc8\\xb9\\x6b\\x46\\xe0\\xbd\\x08\\xc9\\\n\\x2d\\x5f\\x7e\\xc8\\x19\\xcb\\x92\\x06\\x3b\\x47\\x06\\x1a\\xa4\\x45\\x42\\x46\\\n\\x11\\x00\\x22\\xd2\\x2e\\xe4\\xc8\\x58\\x20\\x23\\x70\\xb9\\x81\\x9d\\x7c\\x4e\\\n\\x76\\x59\\xce\\xa2\\x45\\x8b\\x1c\\x19\\x9e\\xe2\\x48\\xa3\\xa3\\xb1\\x2c\\x69\\\n\\x8e\\xb7\\x04\\x78\\x21\\x20\\xc7\\x01\\x67\\xcd\\x9a\\x35\\x8e\\x5c\\x84\\xdc\\\n\\x08\\x5e\\x32\\xd8\\xee\\x7d\\x39\\x57\\xd9\\x91\\x21\\x8c\\x8e\\xf4\\x81\\x38\\\n\\xd2\\xc4\\xe1\\x6c\\xd9\\xb2\\xc5\\x91\\x3e\\x82\\x1c\\xe5\\xb4\\x68\\xd1\\xc2\\\n\\x91\\x1f\\x65\\x5e\\xd5\\xe7\\xc8\\xcf\\x98\\x41\\x58\\x02\\x99\\x43\\xf0\\x55\\\n\\xc8\\xd0\\x13\\x15\\x92\\x78\\xea\\xd4\\x29\\x71\\xf3\\xe6\\x4d\\x71\\xfb\\xf6\\\n\\x6d\\xe5\\xaf\\xc0\\xc5\\x89\\xaf\\x43\\x27\\xbc\\x72\\x0c\\xce\\x43\\x86\\x0c\\\n\\x11\\xfd\\xfb\\xf7\\x17\\x2d\\x5b\\xb6\\x4c\\x04\\x9a\\x31\\xb8\\x13\\x97\\x84\\\n\\xb7\\x8d\\x28\\x69\\x26\\x93\\x4f\\x9a\\x34\\x49\\x5d\\x9b\\x8e\\xab\\x34\\x63\\\n\\x09\\xd0\\x6c\\x60\\x29\\xc5\\xa3\\x47\\x80\\x17\\xa6\\x04\\xcc\\x16\\x00\\x97\\\n\\x9c\\x30\\x3f\\xe0\\xa1\\xc3\\xc7\\x01\\x19\\x6e\\xe1\\x63\\x8e\\x00\\x32\\xc8\\\n\\x20\\x64\\x9d\\xa8\\x11\\x2f\\xc7\\x8d\\xfb\\xde\\x8c\\x27\\xc0\\x0d\\x48\\xd4\\\n\\xc7\\x19\\x61\\x8a\\x88\\x1a\\x54\\x3f\\xf5\\x59\\x02\\xfc\\xa0\\x15\\xc2\\xb5\\\n\\x96\\x80\\x10\\x40\\xf5\\x53\\xa4\\x25\\xc0\\x0f\\x5a\\x21\\x5c\\x6b\\x09\\x08\\\n\\x01\\x54\\x3f\\x45\\x5a\\x02\\xfc\\xa0\\x15\\xc2\\xb5\\xff\\x00\\x53\\x78\\x7c\\\n\\x7c\\x5f\\xdb\\x52\\x47\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\\n\\x82\\\n\\x00\\x00\\x08\\x5c\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x50\\x00\\x00\\x00\\x50\\x08\\x06\\x00\\x00\\x00\\x8e\\x11\\xf2\\xad\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0e\\xc3\\x00\\x00\\x0e\\xc3\\x01\\xc7\\x6f\\\n\\xa8\\x64\\x00\\x00\\x07\\xf1\\x49\\x44\\x41\\x54\\x78\\x5e\\xed\\x9b\\x7b\\x6c\\\n\\x14\\x45\\x1c\\xc7\\xaf\\x50\\x28\\x08\\x08\\x04\\x34\\x28\\x26\\xc6\\xc0\\x1f\\\n\\xa2\\x68\\x04\\x91\\x48\\x24\\xc4\\x18\\x23\\x31\\xa0\\x44\\x12\\x88\\x89\\x8a\\\n\\x24\\x44\\x20\\x6a\\xa2\\x26\\x24\\x98\\x40\\xb2\\x57\\x1e\\x42\\x79\\x84\\x67\\\n\\x80\\xc6\\x06\\xa4\\xa5\\x2d\\xb7\\xdb\\x52\\xfa\\xa0\\xed\\xdd\\xb5\\xdc\\x95\\\n\\xb6\\xf4\\xfa\\xdc\\x2b\\x34\\xd2\\x40\\x22\\x55\\x34\\x41\\x10\\x01\\xa1\\xdd\\\n\\xdb\\x7b\\xcc\\xf8\\x9b\\x65\\xee\\x7a\\xbd\\x9b\\xde\\xb5\\xa5\\xdd\\xed\\x72\\\n\\xfb\\x4d\\x3e\\x69\\xd9\\xee\\xcc\\x7e\\x7f\\xdf\\x9b\\xd9\\xdd\\x59\\xf6\\x4c\\\n\\x86\\x0c\\x19\\x32\\x64\\xc8\\x90\\xa1\\x44\\x17\\xb2\\x4f\\x98\\x82\\x9c\\x63\\\n\\x16\\xa0\\xaa\\xd1\\xcb\\x50\\xd5\\x98\\x45\\xc8\\x91\\x32\\x93\\xfe\\xc9\\x50\\\n\\x6f\\xc2\\x0e\\x53\\x32\\xaa\\x4a\\x59\\x07\\xa1\\x5d\\x44\\xce\\x94\\x00\\xae\\\n\\x4a\\xc1\\xe1\\xc0\\xf6\\x0e\\xd8\\xbe\\x1b\\xd5\\x8e\\x7b\\x96\\x36\\x31\\x14\\\n\\x14\\xaa\\x1a\\x35\\x17\\xc2\\xbb\\x12\\x19\\x1a\\x0b\\xd8\\xef\\x01\\x04\\xf9\\\n\\x35\\x6d\\x6a\\x08\\x46\\xd6\\x12\\x08\\xa4\\x93\\x15\\x56\\x2c\\xa0\\xdd\\x11\\\n\\x8c\\x4d\\x49\\xb4\\x9b\\xc4\\x94\\x32\\xf2\\x06\\x10\\x5e\\x10\\xe4\\x1c\\xbd\\\n\\x89\\x76\\x95\\x78\\xa2\\xe7\\xbc\\x3e\\x4d\\xdb\\xde\\x20\\xe7\\x4a\\xe4\\x1c\\\n\\x35\\x87\\x76\\x99\\x58\\x82\\x2b\\xeb\\x57\\xac\\x50\\xfa\\x0b\\x8c\\x42\\x2b\\\n\\xed\\x32\\xb1\\x44\\xae\\xb6\\xac\\x40\\xfa\\x0b\\x8c\\x42\\x84\\x2a\\xc6\\x4e\\\n\\xa7\\xdd\\x26\\x86\\xb0\\x63\\xfc\\x54\\x32\\xfd\\x58\\x81\\x0c\\x08\\x67\\xca\\\n\\x5a\\xda\\x75\\x62\\x08\\x55\\x25\\xcf\\x67\\x06\\x31\\x40\\xe0\\x5c\\xba\\x97\\\n\\x76\\x9d\\x18\\x82\\xf3\\xd6\\x47\\xac\\x20\\x06\\x0a\\x9c\\x0e\\x32\\x69\\xd7\\\n\\x89\\x21\\xec\\x48\\x79\\x97\\x15\\xc4\\x40\\x81\\x0f\\xe4\\x30\\xed\\x3a\\x31\\\n\\x84\\x2a\\x53\\x66\\xb0\\x82\\x18\\x28\\x10\\xe0\\x46\\xda\\x75\\xe2\\x88\\xac\\\n\\x6d\\x59\\x61\\x0c\\x04\\xe4\\x48\\x9e\\x47\\xbb\\x4d\\x1c\\xa1\\xec\\x11\\x75\\\n\\xf8\\x98\\x09\\x3f\\x2e\\xe8\\x78\\x92\\x17\\xf3\\xa6\\x91\\xb4\\xdb\\x90\\x30\\\n\\xcf\\x8f\\x44\\xa9\\xf9\\x6f\\x21\\x4e\\x58\\x8f\\xcc\\x42\\x1a\\x90\\x0d\\x54\\\n\\x03\\xd7\\x80\\xeb\\xb0\\xfd\\x5f\\xc4\\xf1\\x6e\\xc4\\xe5\\xbf\\x40\\x9b\\x68\\\n\\x27\\xcc\\x39\\x92\\x11\\x67\\x99\\x0f\\xa6\\x96\\xa2\\x6d\\x96\\x3e\\xdd\\x93\\\n\\xa1\\xd3\\xa3\\x66\\xa3\\x74\\x13\\x62\\x85\\xd2\\x1f\\xd0\\xe9\\x91\\xe9\\xb4\\\n\\x4b\\x45\\x98\\xe3\\x46\\x40\\x40\\x3f\\x00\\x7f\\x61\\xb3\\x80\\x7b\\x03\\xbc\\\n\\x3e\\x84\\xf0\\x66\\xd3\\x66\\xda\\x08\\xed\\xb5\\x8c\\x05\\xa3\\xa9\\xc0\\x9d\\\n\\x90\\x31\\x33\\x7f\\x17\\x71\\x39\\xcf\\xd3\\x5d\\x62\\x0a\\xe5\\x8c\\xcc\\x65\\\n\\x85\\xd2\\x57\\x50\\x66\\xd2\\x3f\\x18\\x77\\x8f\\x3e\\xb4\\xdd\\xf2\\x0c\\x1c\\\n\\xbf\\x2e\\x3c\\xa8\\xde\\x80\\x0f\\xfc\\x5b\\xda\\x4c\\x1b\\x11\\xb3\\x98\\x13\\\n\\x9a\\x98\\xe6\\x52\\xf3\\x16\\xd3\\xdd\\xa2\\x84\\x4a\\xaf\\xa6\\x74\\xd9\\xdd\\\n\\x0b\\x25\\xbb\\xb8\\x16\\xd8\\x83\\x72\\xa6\\xdd\\x61\\x85\\x13\\x0f\\x74\\x7c\\\n\\x54\\x40\\x2a\\x17\\xce\\x79\\x6c\\x62\\x86\\x64\\x13\\x0f\\x78\\xcb\\xc5\\xef\\\n\\xd1\\xf6\\x33\\x22\\xcb\\x4f\\x24\\x30\\x75\\x3b\\xc8\\xac\\xa1\\x96\\xd4\\x17\\\n\\xc6\\x38\\x09\\xc2\\x73\\x46\\x1b\\x13\\xfc\\x40\\x09\\xe6\\xf8\\xd1\\x74\\x57\\\n\\x45\\xd8\\xd1\\x36\\x5e\\xb6\\x8b\\x9f\\x41\\xb1\\x65\\x92\\xcd\\xdd\\xe5\\xb1\\\n\\xbb\\x71\\x37\\x2d\\x38\\x90\\xb7\\x00\\xe3\\xf4\\xe8\\x90\\x7a\\x03\\x65\\x4d\\\n\\xc2\\x1e\\x5b\\x71\\x58\\x1f\\x6e\\xec\\xcb\\x74\\xf4\\xf0\\x12\\x0b\\x64\\xb6\\\n\\x68\\xfb\\x14\\x07\\x3e\\xc1\\x4f\\x7b\\x18\\x52\\x4e\\xc6\\x96\\xf7\\xd0\\xee\\\n\\xcc\\x71\\x74\\x17\\x45\\xd8\\x21\\x4e\\x82\\x51\\x66\\x06\\xee\\x84\\x17\\x1b\\\n\\xe4\\xec\\x92\\xcd\\x78\\xe7\\xd3\\xcb\\x14\\x8a\\xde\\x9f\\x87\\xbb\\x8e\\xc0\\\n\\x55\\x95\\x11\\x58\\x90\\xc0\\xcf\\x23\\xb0\\xfb\\x9b\\x97\\x70\\xda\\xe4\\x8f\\\n\\x43\\xed\\x82\\x7d\\xa1\\x5d\\x45\\x3d\\x42\\x8a\\x05\\xda\\x92\\x3b\\x8b\\x5a\\\n\\xd4\\x46\\x10\\x58\\x79\\xc8\\x8c\\x99\\xbf\\x81\\x77\\xf2\\x13\\xe9\\x9f\\x14\\\n\\x91\\x11\\x2a\\x59\\xc5\\xd5\\x50\\xd8\\xad\\x60\\x81\\x2c\\xc2\\x03\\x0c\\x92\\\n\\x35\\x67\\x11\\x6e\\xfb\\xee\\x45\\x7c\\x73\\xc7\\x64\\x7c\\x6f\\xff\\x78\\x7c\\\n\\x7b\\xd7\\x44\\xfc\\xdb\\xe6\\x69\\xb8\\xf4\\xc3\\x39\\x38\\x6d\\x52\\x77\\x70\\\n\\x41\\x94\\xbe\\x6c\\xee\\xa8\\x90\\x7a\\x83\\x5c\\x5c\\xa8\\x4d\\xed\\x04\\xd3\\\n\\xf4\\x56\\xb7\\x21\\x9e\\xa3\\x9b\\x15\\xdd\\xb7\\xd7\\x4f\\x81\\x69\\x5a\\x10\\\n\\x19\\x16\\x0b\\x56\\x80\\xfd\\x85\\xf4\\x23\\x9f\\x6b\\x8c\\x0a\\xaa\\x37\\xe0\\\n\\x3c\\xe9\\xa2\\x56\\xb5\\x13\\x7c\\x8a\\x72\\xc8\\x90\\x59\\xf8\\x92\\x6e\\x36\\\n\\x49\\x95\\x97\\x67\\x40\\x41\\xd7\\xc2\\x43\\x8a\\x45\\xc7\\x91\\x12\\x7c\\x69\\\n\\x4b\\xf6\\x63\\x41\\xfa\\xe9\\x4f\\x80\\xbe\\xa3\\xd6\\x00\\x5c\\xc4\\x56\\x51\\\n\\xcb\\xda\\x08\\xa6\\xf0\\xd5\\xa0\\x21\\x18\\x8d\\x07\\xc9\\x36\\x8f\\xad\\x79\\\n\\x16\\x5c\\x24\\x6e\\x46\\x86\\xa4\\x16\\xe8\\xa7\\x82\\xa8\\xb0\\x58\\xf8\\x8e\\\n\\x9f\\xc7\\x70\\xd5\\x46\\x52\\x85\\xb8\\x4e\\x29\\x46\\x0b\\x41\\x68\\x47\\x82\\\n\\x86\\x20\\x4c\\x8f\\xef\\x40\\xc9\\x32\\x08\\xef\\x06\\xab\\x30\\xb5\\xf0\\x65\\\n\\x3a\\xa3\\xc2\\x62\\xe1\\x3b\\x55\\xa5\\xec\\x2f\\xd9\\xdd\\x7e\\xd9\\x26\\xae\\\n\\xa0\\x25\\xa9\\x2b\\x72\\x07\\x0f\\x21\\x7a\\x89\\x21\\xf8\\xe9\\xf7\\x0a\\xb5\\\n\\xed\\x91\\x05\\x69\\x81\\x3f\\xa3\\x92\\x19\\x5a\\x38\\xf2\\x19\\x57\\x68\\x7f\\\n\\x18\\x89\\x0f\\xc8\\xcc\\xa1\\x65\\xa9\\x2b\\x38\\xf7\\x6d\\x24\\x86\\xfc\\x87\\\n\\xca\\x1b\\xc2\\x8b\\xd0\\x1a\\x6f\\x81\\x0b\\x07\\x0e\\x97\\x63\\xbc\\x25\\x2f\\\n\\x2a\\xbc\\xc0\\xa1\\xb2\\xa8\\xfd\\x61\\x24\\x36\\x62\\x87\\x46\\x37\\xd5\\x78\\\n\\x5f\\xb1\\x19\\x3e\\x45\\x7f\\xa4\\xa9\\x61\\x81\\x4d\\xc4\\x72\\x41\\x3d\\xf6\\\n\\x9e\\xae\\x51\\x20\\xbf\\x33\\xf7\\x03\\xe0\\x26\\x7c\\x2f\\xb9\\xf5\\xa2\\x65\\\n\\xa9\\x27\\x38\\xb8\\x33\\xd2\\x8c\\x1e\\x91\\x8b\\x1a\\x6e\\xc1\\x8c\\x2a\\x84\\\n\\xc5\\x80\\x7a\\xef\\xe0\\x74\\x59\\x5b\\x17\\xb1\\xcc\\xe8\\x81\\x86\\x53\\x75\\\n\\xf8\\x95\\x15\\xb9\\xf8\\xd5\\x95\\xb9\\xb8\\x21\\xbb\\x4e\\xd9\\x16\\xd8\\x53\\\n\\x7c\\x91\\xdc\\x9e\\xc1\\x39\\xfd\\x18\\x2c\\x45\\xdf\\xa0\\x65\\x0e\\x9d\\x60\\\n\\xea\\x9e\\x8e\\x34\\xa6\\x17\\xd6\\x6d\\x28\\xc6\\x13\\x16\\x9f\\x54\\x58\\x0f\\\n\\xbf\\x93\\x6d\\xb2\\xe5\\x62\\x7b\\xf8\\xf9\\x12\\x16\\x08\\x76\\xf2\\x88\\x8e\\\n\\x96\\x3b\\xb8\\xc2\\xf6\\xa6\\x89\\xb0\\xbe\\xf5\\x44\\x1a\\xd3\\x0b\\x27\\xf6\\\n\\x9d\\x0f\\x05\\x78\\x72\\x9f\\x23\\xb4\\x1d\\x46\\xe0\\x9f\\x11\\x21\\xfa\\x60\\\n\\x34\\xae\\xa6\\x65\\x0f\\x9e\\x60\\xed\\xb9\\x3c\\xdc\\x90\\x1e\\x71\\x65\\xd5\\\n\\xe1\\xfa\\x53\\x17\\x7b\\x6c\\x23\\xd3\\x38\\x3c\\xc0\\x47\\x21\\x0a\\xb7\\x69\\\n\\xd9\\x83\\x27\\xb8\\xc2\\x1d\\x0c\\x3f\\xf0\\x93\\x82\\x2f\\xc3\\xce\\x7c\\x18\\\n\\x4b\\xcb\\x1e\\x3c\\xc1\\x08\\x74\\xb0\\x0c\\xe8\\x1d\\x6f\\x5e\\xdd\\x25\\x75\\\n\\x02\\xb4\\x8b\\x7f\\xb0\\x0c\\xe8\\x1d\\xb9\\xb0\\x21\\xf4\\x94\\x69\\x48\\x03\\\n\\x54\\x96\\x40\\x0c\\x03\\x7a\\x47\\x2a\\x6b\\xe9\\x54\\x2b\\x40\\xc4\\x32\\xa0\\\n\\x77\\x24\\xab\\x88\\xd4\\x09\\xd0\\xee\\xbe\\xc7\\x32\\xa0\\x7b\\xca\\x9a\\xef\\\n\\xab\\x12\\x20\\x1c\\xec\\x7a\\xd4\\xc1\\x9f\\x00\\xe4\\xc2\\xfa\\x1b\\x6a\\x05\\\n\\xf8\\x44\\xac\\x81\\x23\\xf1\\xe6\\x56\\x37\\xab\\x13\\xa0\\xcd\\x9d\\xce\\x32\\\n\\xa0\\x77\\xfc\\x47\\xad\\xb5\\x91\\xe1\\x91\\x07\\xc6\\xb4\\xec\\xc1\\x93\\x54\\\n\\xe1\\x5e\\xc3\\x32\\xa0\\x77\\x02\\x3b\\xce\\xd6\\x47\\x05\\x68\\x16\\x44\\x5a\\\n\\xf6\\xe0\\x49\\x2a\\x6f\\x9e\\xc9\\x32\\xa0\\x67\\x24\\x5b\\x4b\\x00\\xc2\\x0a\\\n\\xbd\\xa2\\xf2\\x28\\x3c\\xfe\\x0a\\xe2\\x84\\xd7\\x69\\xd9\\x83\\x2b\\xb8\\x95\\\n\\xb9\\xc4\\x32\\xa2\\x57\\x7c\\x39\\x17\\xdc\\xa1\\xe0\\x38\\xa1\\x1d\\x99\\x2d\\\n\\x6b\\x22\\xdf\\xb0\\x18\\x54\\xc1\\x7a\\x78\\x13\\xcb\\x88\\x5e\\x09\\xa4\\x15\\\n\\xba\\x94\\xe0\\x52\\x2d\\x9f\\x90\\x37\\xbc\\x68\\x99\\x43\\xa7\\x87\\x8e\\xb6\\\n\\x69\\xd1\\xef\\xb9\\xe8\\x13\\xb9\\xb8\\xf1\\x6f\\x64\\xce\\x4f\\xc3\\xdc\\x89\\\n\\x31\\xb4\\x3c\\x75\\x04\\x57\\xe3\\x63\\x2c\\x43\\x7a\\x43\\xb6\\xd4\\xee\\xa2\\\n\\x25\\xa9\\xab\\xce\\x0a\\x71\\xba\\xde\\xd7\\xc5\\xb0\\xaa\\xba\\x8a\\x32\\xdd\\\n\\x3d\\x5e\\x8a\\x52\\x55\\x30\\x0a\\x37\\xb0\\x8c\\xe9\\x01\\xb2\\xa6\\x87\\xf5\\\n\\xef\\x07\\xb4\\x14\\x6d\\x44\\xde\\x45\\xd6\\xeb\\xf3\\x41\\xc9\\x2e\\xee\\xa7\\\n\\x65\\x68\\x2b\\x32\\x95\\xb5\\x7e\\xb5\\xa3\\xff\\x88\\x95\\x98\\x6f\\x1b\\xba\\\n\\xdb\\x94\\xfe\\x4a\\xb6\\xb5\\xbe\\xa6\\x97\\xa7\\x34\\x30\\xf2\\x2e\\x93\\xd7\\\n\\xf0\\xa8\\xf5\\xe1\\x23\\xb9\\xa2\\x75\\x2e\\x4c\\xe7\\xdb\\x2c\\xd3\\xc3\\x05\\\n\\x38\\xef\\xb5\\xfc\\xe7\\x68\\x9a\\x4a\\x2d\\x0f\\x3f\\xc9\\xf9\\xb5\\xb3\\xa5\\\n\\x73\\x8d\\xbf\\xb2\\xcc\\x6b\\x8d\\x54\\xd2\\x50\\x4c\\xde\\xd7\\xa6\\x56\\x87\\\n\\xaf\\xd0\\xae\\xbc\\x77\\xfc\\xe9\\xf6\\x0b\\x30\\x55\\x02\\xac\\x42\\xd4\\x46\\\n\\x2a\\x6d\\xee\\x0c\\xec\\x29\\x72\\xa1\\x6d\\xf9\\xcf\\x51\\x8b\\xc3\\x5f\\x88\\\n\\xe3\\x5d\\x68\\x6b\\xde\\x65\\x2f\\x5f\\xe3\\x66\\x15\\xa5\\x06\\xe4\\x01\\x81\\\n\\x2f\\xa3\\xd2\\x85\\xcc\\x02\\xac\\x34\\x84\\x42\\x6a\\x4d\\x1f\\x02\\xc3\\xa9\\\n\\xa1\\xc5\\xf9\\xd6\\xfc\\x56\\xdf\\x2f\\xe7\\xab\\x3d\\x56\\xb1\\x4f\\x4b\\x3f\\\n\\xb8\\x18\\x75\\x92\\x5b\\x8c\\x2e\\xab\\xf8\\x39\\x79\\x09\\x92\\xfc\\x24\\xff\\\n\\x06\\x3a\\x59\\xfb\\x47\\x51\\xd6\\x7c\\x1f\\x66\\x40\\x0d\\x4a\\x15\\x6e\\x86\\\n\\x3c\\x68\\xfd\\xd5\\x86\\xfe\\x0a\\x16\\xe6\\x4b\\x83\\xe6\\x43\\x45\\x70\\xfc\\\n\\x43\\xb4\\xa3\\xc0\\xe5\\x3f\\x6a\\x75\\x7a\\x73\\xab\\x9b\\x3c\\x85\\xf5\\xbf\\\n\\x7b\\xca\\x9a\\xee\\x86\\xff\\x27\\x15\\x09\\xcf\\x5b\\xda\\xf4\\x36\\xed\\xa6\\\n\\x87\\xbc\\xa5\\x75\\x0b\\x23\\xd7\\xdf\\x52\\x79\\xf3\\x5d\\xb9\\xa8\\xbe\\x43\\\n\\xce\\xb9\\xd0\\xe0\\x3f\\x54\\x5a\\x13\\xd8\\x9a\\xd7\\x0e\\xc7\\xf6\\x47\\x1f\\\n\\x5b\\x58\\x49\\xbb\\xd1\\x87\\x30\\x97\\xf7\\x72\\x64\\x11\\x7d\\x01\\x46\\x6e\\\n\\x8f\\xef\\xbe\\x45\\x0a\\x82\\xc8\\x60\\xb5\\x8b\\x07\\xb4\\x1b\\x9a\\xe7\\x7a\\\n\\x43\\x25\\xe5\\xab\\x60\\x8c\\x42\\xe2\\x01\\x53\\xed\\x0b\\xda\\x05\\x53\\x30\\\n\\x8a\\x57\\xb1\\xda\\xc5\\x43\\x57\\x17\\x10\\x22\\xcc\\x15\\x3d\\xc5\\x2a\\x24\\\n\\x1e\\x28\\xd5\\xb2\\x84\\x76\\xc1\\x14\\xf9\\x3b\\xab\\x5d\\x3c\\x10\\x97\\xf5\\\n\\x34\\xed\\x42\\x3f\\x62\\x15\\x12\\x97\\x2d\\xfc\\x9b\\xb4\\x39\\x53\\xe4\\xef\\\n\\xcc\\x76\\x71\\xa0\\xcd\\xf5\\x25\\x56\\x21\\xb1\\x80\\xf3\\xdf\\x83\\x78\\xdf\\\n\\xa2\\x7c\\xf4\\xdd\\x64\\xe1\\x21\\xab\\x7d\\x2c\\x68\\x73\\x7d\\x09\\x0a\\xed\\\n\\xf1\\xd6\\x67\\x5c\\x38\\xfe\\x47\\xda\\x34\\xa6\\xc8\\x2d\\x09\\xb3\\x7d\\x2f\\\n\\xc0\\x07\\x73\\x9d\\x36\\xd5\\x97\\xc8\\xb7\\x22\\x21\\xc4\\x4c\\xcc\\x09\\x7c\\\n\\x2c\\x60\\x9f\\x63\\xc0\\x72\\xda\\xac\\x4f\\x22\\xfb\\x93\\x76\\xac\\xfe\\xc2\\\n\\x81\\xf0\\x4e\\xc4\\x3b\\x2d\\x18\\x32\\x64\\xc8\\x90\\x21\\x43\\x86\\x0c\\x19\\\n\\x32\\x34\\x70\\x99\\x4c\\xff\\x03\\x1c\\xab\\x6f\\xf5\\xc2\\x9c\\x3e\\x6a\\x00\\\n\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x0b\\x10\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x50\\x00\\x00\\x00\\x50\\x08\\x06\\x00\\x00\\x00\\x8e\\x11\\xf2\\xad\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0e\\xc3\\x00\\x00\\x0e\\xc3\\x01\\xc7\\x6f\\\n\\xa8\\x64\\x00\\x00\\x0a\\xa5\\x49\\x44\\x41\\x54\\x78\\x5e\\xed\\x5a\\x69\\x70\\\n\\x14\\xc7\\x15\\x86\\xa4\\x92\\xfc\\x48\\x7e\\x24\\x95\\xa3\\x2a\\xa9\\x1c\\x95\\\n\\x4a\\xaa\\x12\\x27\\x3f\\x52\\x89\\xff\\x24\\x95\\x54\\x51\\xb6\\x76\\xa5\\xd5\\\n\\xee\\x4a\\x62\\x35\\xb3\\xac\\x10\\x87\\x90\\x16\\x5d\\xe8\\x46\\xf7\\x85\\x00\\\n\\x81\\x25\\xc0\\x20\\xeb\\x00\\x61\\x90\\xcd\\x21\\x10\\x60\\x6e\\x30\\xe1\\x46\\\n\\x80\\x30\\x87\\x31\\x60\\x73\\x19\\x84\\x31\\x60\\x22\\x09\\x0c\\xc6\\xe2\\x10\\\n\\x08\\x04\\x7a\\x79\\x6f\\x76\\x56\\x9a\\x9e\\x69\\x5d\\x20\\x81\\x8c\\xfb\\xab\\\n\\xfa\\xaa\\x46\\x33\\xfd\\xfa\\xbd\\xf7\\xcd\\x74\\xf7\\xeb\\x5e\\x0d\\x11\\x10\\\n\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\\n\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x78\\xb1\\xb0\\xd9\\x42\\x7f\\x42\\x54\\xff\\\n\\x14\\xd0\\xa2\\xa0\\xa0\\xe0\\x3b\\xaf\\x5b\\xe4\\xbf\\x98\\xad\\xce\\x71\\x66\\\n\\x9b\\x5c\\x6c\\xb2\\xca\\xeb\\x4d\\x36\\xe9\\x84\\xc9\\x26\\x37\\x9a\\xac\\xd2\\\n\\x63\\xbc\\x07\\x3a\\xb6\\x29\\xcf\\xa8\\x8d\\x55\\x5a\\x87\\x7f\\x17\\x9b\\x6d\\\n\\x52\\x98\\xc9\\xea\\x7a\\x85\\xfa\\x52\\xbb\\x7d\\xb9\\x61\\x0e\\x90\\x7f\\x6f\\\n\\xb2\\x4b\\x31\\x98\\xfc\\x06\\x4c\\xbe\\x59\\x23\\xce\\x33\\x52\\xe9\\x6b\\x03\\\n\\xf5\\xfd\\x9a\\x35\\xf8\\x77\\xaa\\xbb\\x97\\x03\\x34\\x04\\x7d\\xac\\x72\\x02\\\n\\x26\\x78\\x08\\xd9\\xde\\x99\\xf4\\x80\\xb1\\xdd\\x6c\\x95\\x0e\\xe2\\xd7\\x1a\\\n\\x3f\\x2c\\x28\\xe8\\xc7\\x6a\\x18\\xdf\\x3c\\xf8\\x05\\x48\\x7f\\xc5\\xe1\\x56\\\n\\x85\\x43\\xb3\\x85\\x93\\x24\\x97\\xbe\\x81\\x2e\\xb0\\x8f\\x70\\x83\\x23\\x2c\\\n\\x01\\x64\\x77\\x2a\\x38\\xa3\\xd2\\x41\\x8e\\x44\\xe2\\x35\\xdd\\xb3\\x3b\\xc3\\\n\\xc1\\x37\\xc0\\xc5\\xb5\\xe5\\x51\\xf1\\x6d\\x95\\x17\\xd0\\x54\\xa1\\x86\\x35\\\n\\xf8\\x41\\x73\\x12\\xce\\x51\\x2b\\x91\\x4f\\x78\\x49\\x79\\x69\\x95\\xc6\\x82\\\n\\x2b\\x36\\x1b\\xdc\\x79\\x65\\x90\\x30\\x7b\\x05\\x64\\x54\\xed\\x80\\xbc\\xe5\\\n\\x07\\x7b\\xe6\\xb2\\x0f\\x20\\x7d\\xc1\\x36\\x98\\xf0\\xc6\\x12\\x18\\x93\\x56\\\n\\x0c\\x52\\x44\\x0a\\x58\\x86\\x8f\\xe2\\xfa\\xf0\\x92\\x62\\xf1\\xc4\\xe4\\x7a\\\n\\x45\\x0d\\x73\\xf0\\x61\\x98\\x7d\\xe4\\xcf\\xf0\\x8b\\x9b\\x8b\\x01\\xb7\\xe9\\\n\\x13\\xd0\\x33\\x22\\xb7\\x94\\x2f\\x4e\\x1f\\x99\\xf9\\xee\\x6e\\x48\\x99\\xb7\\\n\\x05\\x52\\xe6\\xbe\\x0f\\x21\\x71\\xf9\\x5c\\x5f\\x3a\\xe2\\x42\\x24\\xcd\\xa5\\\n\\x58\\xd5\\xb0\\x07\\x07\\x7c\\x6d\\xf2\\x28\\x1c\\x2a\\x37\\x39\\x01\\x1b\\x38\\\n\\x3a\\xb9\\x90\\x2b\\xc6\\xd3\\x32\\xf5\\xed\\xad\\x1d\\x22\\x06\\x8f\\x4b\\xe2\\\n\\xfa\\x34\\xd0\\x2a\\xdd\\xf0\\xf1\\x97\\x43\\xd5\\xf0\\x5f\\x1c\\x7c\\x86\\x0f\\\n\\xff\\x29\\x06\\x84\\x2b\\xaa\\x31\\x48\\xff\\xa0\\x10\\x88\\x8e\\x4b\\x65\\xee\\\n\\x05\\x84\\x44\\x42\\x6e\\x75\\x9d\\x41\\x84\\x15\\x75\\xe7\\xe1\\x42\\xe3\\xd7\\\n\\xd0\\x78\\xeb\\x1e\\x1c\\xa9\\x6f\\x82\\xa2\\xb5\\x47\\x0d\\x6d\\xba\\x62\\xce\\\n\\xd2\\xfd\\x1e\\x01\\x91\\x89\\x65\\xeb\\xc1\\x3f\\x78\\x34\\xe3\\x33\\x22\\x3a\\\n\\x09\\x02\\x25\\xf6\\x9e\\x97\\x54\\x3a\\x51\\x0e\\x6a\\x3a\\xcf\\x17\\x26\\xbb\\\n\\xf3\\x3f\\xf8\\x26\\xaf\\xf0\\x02\\x9b\\x3c\\x6d\\x26\\x34\\x34\\x36\\x41\\x6a\\\n\\xe6\\x24\\xe6\\xfe\\x84\\xa2\\x25\\x06\\x01\\xb6\\x9f\\xb8\\x02\\x7a\\xdc\\x6e\\\n\\x79\\x08\\xd3\\x57\\x7f\\x68\\x68\\xdb\\x15\\xd3\\x17\\xee\\xe8\\x10\\x31\\x2c\\\n\\x73\\x36\\xe3\\x73\\x4c\\xc4\\x04\\xb8\\x71\\xf3\\x2b\\x78\\xf3\\xad\\x79\\xe0\\\n\\x6b\\x77\\x32\\xcf\\x14\\x62\\x0e\\x26\\x8b\\xe3\\x9f\\x6a\\x5a\\xcf\\x07\\x54\\\n\\xfc\\xe2\\xa4\\xfc\\x50\\x1f\\x4c\\x54\\xdc\\x44\\xf8\\xf8\\xe4\\x69\\x45\\x84\\\n\\xab\\x57\\x1b\\x98\\x67\\xb4\\x8a\\xd2\\x02\\xa0\\x4d\\x9c\\x44\\x7a\\xfc\\xa4\\\n\\x5d\\x69\\xaf\\xc7\\x9e\\x63\\xf5\\x10\\x5d\\xb8\\x40\\x61\\x72\\xe9\\x5a\\x6c\\\n\\xcf\\xda\\x6a\\x99\\xbd\\x64\\x5f\\x87\\x80\\xc9\\x15\\x9b\\xc1\\xe6\\x8c\\x60\\\n\\x7c\\x1f\\xf9\\xf0\\x04\\xb4\\xb5\\x3d\\x81\\xfa\\x0b\\x17\\x21\\x25\\x3d\\x8f\\\n\\x79\\x46\\x54\\x72\\xc1\\x9c\\xd4\\xf4\\x06\\x16\\x38\\x09\\x17\\xea\\x03\\x20\\\n\\x56\\x54\\x56\\xc1\\xc3\\x87\\x8f\\xd4\\xf4\\x01\\xd6\\x6f\\xdc\\xc2\\x3c\\x8f\\\n\\x9c\\x52\\x69\\x48\\xfc\\x9d\\x5d\\x67\\xd4\\xd6\\x46\\x9c\\x3c\\x75\\x86\\xb1\\\n\\x0f\\x18\\x19\\x09\\x09\\x73\\x56\\x1a\\xfa\\xf0\\x72\\xe2\\x7c\\x75\\x2e\\x44\\\n\\x86\\x26\\x4f\\x63\\x6c\\xcb\\xe6\\x55\\xc1\\x83\\x07\\x6d\\x0a\\x5b\\x5b\\xdb\\\n\\xa0\\xba\\xe6\\x3d\\xf0\\x0b\\x18\\xc1\\xb4\\x21\\xe2\\x90\\x9e\\xaa\\xa6\\x39\\\n\\x20\\x18\\x8a\\x15\\x7f\\x99\\xde\\xa9\\x63\\x44\\x18\\xec\\x3f\\x70\\x48\\x4d\\\n\\xbb\\x13\\x93\\xa6\\x16\\x77\\xb6\\xc3\\xa1\\x93\\x51\\xb5\\xd3\\x90\\x74\\xc9\\\n\\xa6\\xe3\\x6a\\x6b\\x23\\x76\\xd7\\xd6\\x31\\x7e\\xbc\\xfd\\xc4\\xbe\\xb1\\xc8\\\n\\xd0\\x0f\\x91\\xfa\\xf7\\x0a\\x18\\x83\\x25\\x8e\\xd6\\x2e\\x0a\\xe7\\x62\\xaf\\\n\\x80\\x5e\\x1e\\x3b\\x7e\\x0a\\x46\\x8e\\x8d\\x62\\xda\\x29\\xb4\\x4a\\x6f\\x51\\\n\\xae\\x9e\\x94\\xfb\\x11\\x58\\xd9\\x57\\xe8\\x9d\\x8d\\x8f\\x4d\\x86\\xa6\\x6b\\\n\\xd7\\xd5\\x94\\x59\\xd0\\xdc\\xe3\\x6d\\x17\\x34\\x3a\\x96\\x9b\\x74\\x3e\\xf2\\\n\\xb3\\xa6\\x66\\xd5\\xa2\\x13\\xed\\xed\\xed\\x86\\xf9\\xd3\\x4b\\xbf\\xa0\\x91\\\n\\xdc\\x97\\x91\\xb9\\xb8\\xb6\\x43\\x40\\x5a\\x91\\xb5\\xb5\\xa1\\x7f\\x90\\x0b\\\n\\xee\\xdd\\x6b\\x35\\x88\\x78\\xfd\\xfa\\x57\\x90\\x92\\xc1\\x29\\x7f\\xac\\x52\\\n\\xb9\\x9a\\x76\\xff\\x80\\x37\\x6c\\x63\\x13\\x33\\xa0\\xf9\\xf6\\x1d\\x35\\x65\\\n\\x16\\x6d\\x6d\\x8f\\x99\\x09\\x7b\\x44\\x74\\x96\\x21\\x61\\x2f\\x8b\\xd6\\x1c\\\n\\x85\\x73\\x0d\\xb7\\x54\\x4b\\x80\\x96\\x96\\xfb\\x30\\x73\\x4e\\x05\\xe3\\x4b\\\n\\xcf\\xb0\\x8c\\x59\\x86\\x7e\\xb4\\xf3\\x20\\x31\\x30\\x34\\x9a\\xb1\\xf9\\xfc\\\n\\x52\\x83\\x41\\x40\\x62\\x73\\xf3\\x3d\\xc8\\xcc\\x2d\\x64\\xda\\x7a\\x28\\x4d\\\n\\x56\\xd3\\x7f\\x36\\x60\\x7d\\xe7\\xd6\\x77\\x9e\\x94\\x96\\x8b\\x6f\\xb4\\x45\\\n\\x4d\\xd9\\x88\\xdb\\x77\\xee\\x30\\xed\\x7b\\x53\\xfb\\xb9\\x93\\x72\\x21\\x26\\\n\\x21\\x4d\\xf9\\x5a\\xb4\\xb6\\x3c\\x3a\\xc6\\x25\\x1a\\xec\\x73\\x96\\xd6\\x31\\\n\\x02\\x3a\\xc2\\x93\\x19\\x9b\\xd3\\x67\\xea\\xb9\\x02\\x12\\xef\\xde\\x7d\\x00\\\n\\xf9\\x53\\x66\\x30\\xed\\x89\\xbe\\x36\\x29\\x42\\x95\\xe1\\xe9\\x60\\xf6\\x0f\\\n\\xfe\\xb7\\x7e\\xb5\\x4d\\xcb\\x2a\\x40\\xa7\\xad\\xaa\\x54\\x7c\\x34\\x34\\x5e\\\n\\x63\\x02\\x09\\x4b\\x9f\\x61\\x48\\x58\\x4f\\x5a\\x24\\xb4\\x36\\xdd\\x91\\xda\\\n\\xea\\xed\\x73\\xab\\x0f\\x30\\x02\\x3a\\xa3\\x32\\x18\\x9b\\x63\\x27\\x4e\\x1b\\\n\\x84\\xd3\\x92\\x86\\xf8\\x94\\xe9\\x6c\\x09\\x44\\xb9\\xfb\\xd8\\xe5\\x7f\\xa9\\\n\\x72\\xf4\\x0d\\x9e\\xad\\x99\\xdc\\xa8\\xed\\x30\\x6c\\x7c\\xbc\\xf2\\x75\\x75\\\n\\x05\\x9c\\xba\\x70\\x25\\x7e\\x0c\\x37\\x6f\\x36\\x33\\x81\\x84\\x26\\x4c\\x36\\\n\\x24\\xac\\xa7\\xa4\\xfb\\x62\\xba\\xa3\\x14\\x9e\\x62\\xb0\\xd7\\x16\\xd4\\xc4\\\n\\xe0\\x08\\xb6\\x88\\x3f\\xfb\\xe9\\x67\\x5c\\xe1\\xb4\\xbc\\x73\\xe7\\x3e\\xc4\\\n\\x25\\x67\\x31\\x76\\xa4\\xc1\\xd3\\x14\\xdb\\x43\\x71\\x22\\xdd\\xa8\\xed\\x28\\\n\\xc8\\x39\\x06\\x2e\\x5d\\x36\\x16\\xbd\\x5e\\xd0\\xc4\\xdf\\xda\\xfa\\x58\\x09\\\n\\x84\\xde\\xa6\\x76\\x28\\x3a\\x23\\xd3\\x0c\\x09\\xeb\\x19\\x91\\x53\\xd2\\xd1\\\n\\xbe\\x27\\x52\\x5b\\xbd\\x7d\\xd6\\x62\\x76\\x0e\\x0c\\x18\\xc9\\xce\\x81\\x57\\\n\\xff\\x77\\xcd\\x20\\x18\\x8f\\x0d\\x8d\\x5f\\x42\\xc8\\x58\\xd6\\x96\\xb4\\x50\\\n\\x75\\xe9\\x1d\\xf0\\xd3\\x0d\\xd6\\x76\\x40\\x0b\\xc2\\xc1\\xc3\\x47\\x55\\xa9\\\n\\x8c\\xf0\\x88\\xc7\\x06\\xe2\\x8e\\xe9\\xdc\\x97\\x06\\xb8\\xdc\\x86\\x84\\xf5\\\n\\xcc\\x5e\\x54\\xab\\x9c\\xd0\\x68\\xfd\\xf2\\x48\\x6d\\xb2\\x70\\xc5\\xd5\\xdb\\\n\\x67\\x2e\\xda\\xd3\\x21\\x5e\\x52\\xc5\\x26\\xac\\xf3\\x3a\\x5f\\x20\\x6d\\xe5\\\n\\xee\\xdf\\x7f\\xc4\\xc4\\xd7\\x1d\\x4f\\x9e\\x3a\\x07\\x76\\x47\\x28\\xe3\\xd7\\\n\\x64\\x97\\x7c\\x54\\x79\\x7a\\x06\\x2e\\x1c\\xe9\\x5a\\xe3\\xd0\\xb0\\xe8\\x2e\\\n\\x17\\x0d\\x1a\\xb6\\x7a\\xf1\\x88\\xd3\\x67\\x94\\x32\\x01\\x4c\\x9c\\xbb\\xc9\\\n\\x90\\xb4\\x9e\\x89\\x73\\x56\\x81\\x05\\xcb\\x14\\xad\\x9d\\x96\\xf4\\x2c\\xb1\\\n\\x64\\x15\\xd7\\x36\\x6d\\xc1\\xf6\\x0e\\x01\\xdd\\x05\\xf3\\x19\\xbb\\xe4\\xf4\\\n\\x7c\\x43\\x7c\\xdd\\x91\\x16\\x95\\xe8\\xf8\\x74\\xa6\\x8f\\x3e\\x2d\\x28\\x66\\\n\\xb3\\xe3\\x17\\x38\\xf6\\xaf\\x6b\\x3b\\xc8\\x9f\\x52\\xac\\x7c\\x69\\x5a\\x78\\\n\\xc4\\xf3\\x0c\\x5b\\x3d\\xb7\\x6c\\xdd\\xc5\\x04\\x10\\x9e\\x3d\\x87\\x9b\\xb8\\\n\\x9e\\xa9\\xf3\\x36\\x83\\x3c\\x1e\\xe7\\x2f\\xed\\xbe\\x15\\xaf\\xe9\\x1e\\x3d\\\n\\xe3\\xd9\\xd0\\x16\\xd1\\x2b\\x1e\\xd1\\x19\\x93\\xc3\\xf8\\x5e\\x5c\\xbd\\x8a\\\n\\x1b\\x63\\x57\\x9c\\x5d\\x5a\\xc9\\xd8\\xe3\\x88\\xbc\\xe5\\xe7\\xe7\\xf8\\xa5\\\n\\x2a\\x4f\\xef\\xe0\\xeb\\x2f\\xd9\\xd1\\x98\\x39\\x82\\x5f\\x54\\xbd\\x42\\x95\\\n\\xce\\x03\\x5a\\x30\\x78\\x01\\x10\\x6f\\xdc\\xf8\\x1a\\xac\\xc3\\x3b\\xbf\\x26\\\n\\x9b\\x33\\x5c\\x99\\xe8\\xb9\\x02\\x70\\x98\\x89\\xc5\\x72\\xe2\\xec\\x55\\x0a\\\n\\x79\\x85\\xb3\\x96\\xda\\xf9\\x2f\\x61\\xce\\x6a\\xf0\\x0b\\x0c\\xe9\\xf0\\x4b\\\n\\x3c\\x5f\\x7f\\x99\\x1b\\x23\\x8f\\x6b\\xd6\\xb1\\x5b\\x50\\x95\\x4e\\x55\\x96\\\n\\xbe\\x81\\xb6\\x35\\xda\\x8e\\x68\\x2e\\xac\\xdd\\x77\\x40\\x11\\x8f\\x36\\xe7\\\n\\xbc\\x00\\xb4\\xd4\\x97\\x05\\xfd\\x75\\x90\\xaa\\x67\\xc7\\x99\\x20\\x72\\x44\\\n\\x2c\\xfb\\xf5\\x25\\xa4\\x64\\x73\\x63\\xe3\\xf1\\xd0\\x91\\xe3\\xc6\\x3d\\xb2\\\n\\x55\\xae\\x54\\xe5\\xe8\\x3b\\x9c\\x4e\\xe7\\x77\\x71\\x17\\xb2\\x5b\\xdb\\x21\\\n\\x9d\\xf3\\x91\\x88\\xbc\\x00\\xf4\\x3c\\x73\\xf6\\x02\\xb3\\x23\\xb1\\x38\\x46\\\n\\x41\\xfa\\xc2\\xed\\x5c\\x11\\x9e\\x96\\xd9\\x8b\\x3b\\xcb\\x97\\x98\\xa2\\xc5\\\n\\xe8\\x8f\\x15\\x60\\xef\\xfe\\xc3\\xdc\\xd8\\xf4\\xfc\\xe0\\xd0\\x47\\x60\\x0f\\\n\\xd6\\xfd\\x34\\x60\\x95\\xea\\x50\\x83\\xef\\xab\\x72\\x3c\\x1d\\x2c\\x16\\xf9\\\n\\xe7\\xf8\\x16\\xea\\xb5\\x1d\\xd3\\x5b\\xda\\xba\\x7d\\x0f\\x37\\x10\\x3d\\xa7\\\n\\x15\\xb3\\xe5\\x49\\xd0\\xa8\\x58\\x1c\\xca\\xfb\\xb8\\x62\\xf4\\x95\\xb9\\xcb\\\n\\x0e\\x74\\x9c\\xc2\\xd0\\xd0\\xf5\\x97\\xc2\\x18\\x5f\\x49\\x69\\x79\\xbd\\x5a\\\n\\x7d\\x6b\\xf7\\x1d\\x52\\x3e\\x0c\\xad\\x2d\\xce\\x7b\\x17\\x28\\x77\\x55\\x86\\\n\\x67\\x83\\xc5\\xe2\\xf8\\x35\\x2e\\x2a\\x57\\xb5\\x0e\\x48\\xc4\\x8d\\x9b\\x77\\\n\\x70\\x03\\xd2\\xb2\\x11\\xeb\\x2a\\x87\\x6b\\x1c\\x13\\x9c\\x33\\x2a\\x13\\x72\\\n\\x71\\xeb\\xc5\\x13\\xa5\\x2f\\xf4\\x1e\\xa4\\xd2\\x49\\x74\\x20\\xbe\\x18\\xad\\\n\\x0f\\x9a\\x7f\\xcf\\x9d\\xff\\x9c\\x1b\\x93\\x96\\xdb\\x76\\xec\\x35\\x6e\\x1f\\\n\\xad\\x52\\x83\\x6f\\x80\\xfc\\x47\\x35\\xfd\\xfe\\x81\\xaf\\x3d\\xf8\\xcf\\xd4\\\n\\x31\\xe3\\x08\\x59\\x5a\\xb1\\x40\\xa9\\xe0\\x79\\xc1\\x79\\xb9\\xaf\\xee\\x30\\\n\\x33\\x94\\x89\\xc1\\x61\\x09\\x3d\\x2e\\x0e\\xdd\\xd1\\xfb\\x83\\xd2\\x84\\x59\\\n\\x2b\\xc0\\x86\\x75\\xa6\\xb6\\x6f\\xe2\\xda\\x0d\\x5b\\xb9\\xb1\\x78\\x79\\xf7\\\n\\x6e\\x2b\\x94\\x57\\xbe\\x6b\\x88\\x0b\\x73\\xbc\\x46\\x3f\\xc9\\xaa\\x69\\xf7\\\n\\x2f\\x5e\\xb3\\xb8\\xfe\\x80\\x4e\\x2e\\x33\\x0e\\x91\\x74\\x32\\x73\\xe5\\x8b\\\n\\x46\\x6e\\xa0\\x5e\\x56\\xd7\\xac\\x65\\x6c\\x88\\xb4\\x32\\x2b\\xc7\\xfc\\xba\\\n\\x93\\xea\\x9e\\x98\\xf1\\xce\\x2e\\x48\\x9e\\xbb\\x19\\xc6\\x65\\x95\\x60\\x6d\\\n\\xc8\\x16\\xbc\\xc4\\x92\\xb2\\xf9\\xdc\\x18\\xbc\\xfc\\xe2\\x6a\\x13\\xc4\\xe3\\\n\\xe2\\xa2\\xb7\\xa3\\x51\\xe6\\xe7\\x27\\xff\\x49\\x4d\\x77\\x60\\x60\\x0a\\x0c\\\n\\xf9\\x15\\x2e\\x2c\\x1f\\xe9\\x9d\\x07\\xbb\\xc2\\x95\\xe1\\xd0\\xdd\\x9c\\x43\\\n\\xf5\\x98\\xde\\x8e\\x48\\xc7\\xfd\\xf1\\xb3\\x6a\\xb8\\x3f\\x38\\x69\\xa9\\xcc\\\n\\x79\\x95\\x5b\\x20\\x22\\xbf\\x02\\x02\\x42\\xc6\\x73\\xfb\\xa2\\xa3\\xb0\\x96\\\n\\x96\\x87\\x5c\\xff\\xc4\\x9d\\xbb\\xf7\\x83\\x14\\x12\\x6e\\xb0\\xc3\\x9c\\x4e\\\n\\xf8\\x06\\xb9\\x7e\\xa3\\xa6\\x39\\xb0\\x30\\x9b\\x47\\xff\\x10\\x9d\\xae\\xd1\\\n\\x07\\x41\\x9c\\x98\\x31\\x09\\xce\\x9e\\xbb\\xc8\\x0d\\x9e\\xb8\\x79\\xcb\\x4e\\\n\\xb0\\x39\\xf8\\xbb\\x0d\\x5a\\xa5\\x43\\xe2\\xf2\\x20\\x72\\x72\\xa5\\x22\\x68\\\n\\x0a\\xce\\x6d\\x29\\x65\\xeb\\xf0\\x7a\\x39\\x84\\xe7\\x94\\x82\\xe4\\x9e\\xc8\\\n\\x6c\\xd1\\xb4\\xa4\\x39\\x79\\xe9\\xf2\\xd5\\x5c\\x9f\\xc4\\xf3\\xf5\\x97\\x94\\\n\\xd8\\x78\\xb6\\xb8\\x60\\xac\\x1b\\xe6\\x74\\xfe\\x48\\x4d\\xef\\xb9\\x81\\x0e\\\n\\x1c\\x52\\xcc\\x36\\xe9\\x91\\x3e\\x20\\x4b\\xa0\\x0b\\x4a\\xca\\xdf\\x86\\xc6\\\n\\xa6\\x1b\\xdc\\x64\\xe8\\x64\\x24\\x3a\\x3e\\x8d\\xb1\\x79\\x16\\x8e\\x75\\xc7\\\n\\xc1\\xd1\\x63\\x27\\xb9\\xbe\\x9a\\xae\\xdd\\x84\\xf2\\x79\\x55\\x4a\\x4c\\x46\\\n\\x5b\\x8c\\x1d\\x73\\xa0\\x5c\\x3c\\x29\\xbd\\x00\\xf8\\x58\\xa4\\xbf\\x9b\\xac\\\n\\xf2\\xc7\\xc6\\xe0\\x3c\\x2b\\x61\\xd1\\xac\\x72\\xee\\x51\\x12\\x9d\\xd8\\xac\\\n\\xdf\\xb8\\x0d\\x46\\x85\\xc7\\x18\\xec\\x7a\\x4b\\x39\\xd4\\x0d\\xcb\\x57\\xae\\\n\\xe3\\x2e\\x62\\xe4\\x73\\xc6\\x9b\\xe5\\xcc\\x6e\\x88\\xa1\\x55\\xfe\\xc4\\xcf\\\n\\xee\\xf8\\x87\\x9a\\xc6\\x8b\\xc5\\xab\\xaf\\x46\\x7d\\x0f\\xe7\\x90\\x1c\\x7c\\\n\\x9b\\x77\\xb9\\xc1\\x22\\x53\\xb3\\x0a\\xe0\\xfd\\xff\\xee\\x86\\xeb\\x5f\\xde\\\n\\x62\\x12\\xa5\\xd5\\x70\\xef\\xfe\\x83\\x30\\x69\\xea\\x4c\\xe5\\xc8\\x8c\\x67\\\n\\xab\\x25\\x15\\xbb\\x59\\x79\\x85\\x38\\xdf\\xd6\\x42\\xf3\\xed\\x16\\xa6\\x2f\\\n\\xea\\x9b\\x7c\\x90\\x2f\\x9e\\xad\\x42\\xab\\x74\\x9f\\x62\\xa5\\x98\\xd5\\xf0\\\n\\x07\\x0f\\x4c\\x76\\xe7\\x6f\\x71\\x3e\\x59\\x86\\xec\\xf2\\x1f\\x8b\\x68\\xae\\\n\\xa2\\xd3\\x91\\x9a\\x55\\xeb\\x95\\xaf\\x84\\x4e\\x3e\\xbc\\x02\\xd0\\x57\\x79\\\n\\xe6\\x6c\\xbd\\x22\\x4e\\x75\\xcd\\x1a\\x98\\xbf\\x70\\xa9\\xc2\\x25\\xcb\\x56\\\n\\x2b\\xc2\\x7c\\x72\\xf2\\x53\\xa6\\x3d\\x5d\\xd3\\x6e\\x87\\xfa\\xa2\\xa2\\xd9\\\n\\xb0\\x0d\\xd3\\xd0\\x13\\x93\\xb4\\x9c\\x62\\x54\\xc3\\x1d\\xbc\\xa0\\x9a\\x91\\\n\\x84\\xc4\\xc0\\x7b\\xfc\\x47\\x23\\x2a\\x62\\xc7\\xc7\\xa6\\x28\\x3b\\x96\\x25\\\n\\xd5\\xef\\xc1\\x86\\x4d\\xdb\\x95\\x95\\x92\\xb6\\x56\\x24\\x18\\x91\\xae\\xe9\\\n\\x1e\\x3d\\xa3\\x36\\xd4\\x96\\x6c\\x7a\\xf3\\xfb\\x09\\x12\\x63\\x40\\xe1\\x06\\\n\\xf3\\x7f\\x66\\x75\\x05\\xda\\xc1\\x60\\xf0\\xd3\\x70\\xd8\\x18\\x0a\\xf0\\x01\\\n\\x27\\xfa\\xc4\\xa1\\x5a\\x48\\x31\\xa8\\xe1\\x7c\\x73\\x41\\x87\\x12\\x3e\\xb6\\\n\\x60\\x13\\x26\\x54\\x85\\x82\\x36\\x71\\x13\\xee\\x17\\x52\\xdf\\xd2\\x42\\xb3\\\n\\xbf\\xfc\\x3a\\xf9\\x54\\xdd\\xbf\\x74\\x18\\xaa\\xac\\xdc\\x36\\x39\\x19\\x87\\\n\\xf9\\x0a\\x5c\\x0d\\x2f\\x76\\x37\\x67\\x76\\x45\\xc5\\x06\\x6d\\xf1\\xba\\x86\\\n\\xfa\\xa2\\x3e\\xa9\\x6f\\x8f\\x8b\\x6f\\x19\\x2c\\x16\\xcb\\x0f\\x7c\\x6d\\x8e\\\n\\xbf\\x29\\x87\\xb8\\x56\\xd9\\x8d\\xe2\\x64\\xe2\\x97\\x54\\x84\\xe2\\x14\\x7b\\\n\\x28\\x15\\x29\\xf7\\xf0\\x19\\xb5\\xa1\\xb6\\x64\\xa3\\x9a\\x0b\\x08\\x08\\x08\\\n\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\\n\\x08\\x08\\x08\\x08\\x08\\x0c\\x28\\x86\\x0c\\xf9\\x3f\\x5a\\x33\\xf8\\x84\\xd7\\\n\\x02\\x0c\\x17\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x14\\x23\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x60\\x00\\x00\\x00\\x60\\x08\\x06\\x00\\x00\\x00\\xe2\\x98\\x77\\x38\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x16\\x25\\x00\\x00\\x16\\x25\\x01\\x49\\x52\\\n\\x24\\xf0\\x00\\x00\\x01\\xcb\\x69\\x54\\x58\\x74\\x58\\x4d\\x4c\\x3a\\x63\\x6f\\\n\\x6d\\x2e\\x61\\x64\\x6f\\x62\\x65\\x2e\\x78\\x6d\\x70\\x00\\x00\\x00\\x00\\x00\\\n\\x3c\\x78\\x3a\\x78\\x6d\\x70\\x6d\\x65\\x74\\x61\\x20\\x78\\x6d\\x6c\\x6e\\x73\\\n\\x3a\\x78\\x3d\\x22\\x61\\x64\\x6f\\x62\\x65\\x3a\\x6e\\x73\\x3a\\x6d\\x65\\x74\\\n\\x61\\x2f\\x22\\x20\\x78\\x3a\\x78\\x6d\\x70\\x74\\x6b\\x3d\\x22\\x58\\x4d\\x50\\\n\\x20\\x43\\x6f\\x72\\x65\\x20\\x35\\x2e\\x34\\x2e\\x30\\x22\\x3e\\x0a\\x20\\x20\\\n\\x20\\x3c\\x72\\x64\\x66\\x3a\\x52\\x44\\x46\\x20\\x78\\x6d\\x6c\\x6e\\x73\\x3a\\\n\\x72\\x64\\x66\\x3d\\x22\\x68\\x74\\x74\\x70\\x3a\\x2f\\x2f\\x77\\x77\\x77\\x2e\\\n\\x77\\x33\\x2e\\x6f\\x72\\x67\\x2f\\x31\\x39\\x39\\x39\\x2f\\x30\\x32\\x2f\\x32\\\n\\x32\\x2d\\x72\\x64\\x66\\x2d\\x73\\x79\\x6e\\x74\\x61\\x78\\x2d\\x6e\\x73\\x23\\\n\\x22\\x3e\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x3c\\x72\\x64\\x66\\x3a\\x44\\x65\\\n\\x73\\x63\\x72\\x69\\x70\\x74\\x69\\x6f\\x6e\\x20\\x72\\x64\\x66\\x3a\\x61\\x62\\\n\\x6f\\x75\\x74\\x3d\\x22\\x22\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\\n\\x20\\x20\\x20\\x78\\x6d\\x6c\\x6e\\x73\\x3a\\x78\\x6d\\x70\\x3d\\x22\\x68\\x74\\\n\\x74\\x70\\x3a\\x2f\\x2f\\x6e\\x73\\x2e\\x61\\x64\\x6f\\x62\\x65\\x2e\\x63\\x6f\\\n\\x6d\\x2f\\x78\\x61\\x70\\x2f\\x31\\x2e\\x30\\x2f\\x22\\x0a\\x20\\x20\\x20\\x20\\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x78\\x6d\\x6c\\x6e\\x73\\x3a\\x74\\x69\\\n\\x66\\x66\\x3d\\x22\\x68\\x74\\x74\\x70\\x3a\\x2f\\x2f\\x6e\\x73\\x2e\\x61\\x64\\\n\\x6f\\x62\\x65\\x2e\\x63\\x6f\\x6d\\x2f\\x74\\x69\\x66\\x66\\x2f\\x31\\x2e\\x30\\\n\\x2f\\x22\\x3e\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x3c\\x78\\x6d\\\n\\x70\\x3a\\x43\\x72\\x65\\x61\\x74\\x6f\\x72\\x54\\x6f\\x6f\\x6c\\x3e\\x77\\x77\\\n\\x77\\x2e\\x69\\x6e\\x6b\\x73\\x63\\x61\\x70\\x65\\x2e\\x6f\\x72\\x67\\x3c\\x2f\\\n\\x78\\x6d\\x70\\x3a\\x43\\x72\\x65\\x61\\x74\\x6f\\x72\\x54\\x6f\\x6f\\x6c\\x3e\\\n\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x3c\\x74\\x69\\x66\\x66\\x3a\\\n\\x4f\\x72\\x69\\x65\\x6e\\x74\\x61\\x74\\x69\\x6f\\x6e\\x3e\\x31\\x3c\\x2f\\x74\\\n\\x69\\x66\\x66\\x3a\\x4f\\x72\\x69\\x65\\x6e\\x74\\x61\\x74\\x69\\x6f\\x6e\\x3e\\\n\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x3c\\x2f\\x72\\x64\\x66\\x3a\\x44\\x65\\x73\\\n\\x63\\x72\\x69\\x70\\x74\\x69\\x6f\\x6e\\x3e\\x0a\\x20\\x20\\x20\\x3c\\x2f\\x72\\\n\\x64\\x66\\x3a\\x52\\x44\\x46\\x3e\\x0a\\x3c\\x2f\\x78\\x3a\\x78\\x6d\\x70\\x6d\\\n\\x65\\x74\\x61\\x3e\\x0a\\x18\\xcb\\x55\\x58\\x00\\x00\\x11\\xe1\\x49\\x44\\x41\\\n\\x54\\x78\\x5e\\xed\\x9d\\x09\\x58\\x93\\x57\\xba\\xc7\\xff\\xc8\\x92\\x90\\xb0\\\n\\x49\\xc2\\xbe\\x8a\\x80\\x50\\x01\\x57\\x54\\x40\\xc4\\xa5\\xa2\\xad\\xd5\\x71\\\n\\xbb\\x75\\xa6\\xb6\\xf7\\x7a\\xb5\\xad\\x5d\\xe6\\x69\\xa9\\xa5\\xdb\\xf8\\xb4\\\n\\xf6\\x4e\\xe7\\xe9\\xe8\\x75\\xda\\x6b\\x5b\\xeb\\x58\\x6d\\xed\\x3c\\x8f\\x6d\\\n\\xc7\\xb1\\x5a\\xc7\\x8d\\x3a\\x54\\x5b\\x97\\x2a\\x5a\\xa4\\xe2\\xc2\\x22\\x20\\\n\\xab\\xa0\\x6c\\xca\\x4e\\x48\\x02\\xdc\\x73\\x3e\\x0e\\x01\\x03\\x24\\x5f\\x12\\\n\\xb2\\x39\\xfe\\x7c\\xf2\\xe4\\x7b\\x4f\\x90\\x4f\\xcf\\xff\\x3b\\xef\\x39\\xef\\\n\\x7b\\x96\\xd8\\x74\\x13\\x70\\x1f\\xa1\\xec\\x92\\x23\\x2d\\x67\\x1b\\x16\\x45\\\n\\xa7\\xb0\\x12\\xcb\\x66\\x04\\x7b\\xbf\\x2f\\xa8\\x6e\\x2e\\xc1\\xb6\\xd3\\x6b\\\n\\x91\\x59\\x76\\x98\\x95\\x58\\x3e\\xf7\\x8d\\x00\\x17\\xcb\\x8f\\x60\\xfb\\x99\\\n\\x17\\x50\\xdb\\x52\\xce\\x4a\\xac\\x03\\xab\\x17\\x40\\xde\\x29\\xc3\\xfe\\xec\\\n\\x8d\\x38\\x78\\xe5\\xff\\x38\\xf7\\x63\\x6d\\x58\\xb5\\x00\\xd4\\xe5\\x6c\\x3f\\\n\\xf3\\x3c\\xb2\\x6f\\xfe\\xc0\\x4a\\xac\\x0f\\xab\\x15\\xc0\\x5a\\x5d\\x8e\\x3a\\\n\\x56\\x27\\x80\\xb5\\xbb\\x1c\\x75\\xac\\x4a\\x80\\xfb\\xc1\\xe5\\xa8\\x63\\xd1\\\n\\x71\\x40\\x57\\xb7\\x12\\x1d\\xca\\x36\\x28\\xba\\x64\\xb8\\x54\\x71\\x0c\\x3f\\\n\\x5d\\xff\\x1a\\x9d\\xa4\\x8c\\x0f\\xc9\\x91\\xab\\x21\\x71\\x0a\\x42\\xd0\\xc8\\\n\\x28\\x88\\x1d\\xdc\\x58\\xa9\\xe5\\x61\\x51\\x02\\x74\\x75\\x77\\xa2\\x4d\\xd1\\\n\\x08\\x99\\xb2\\x19\\xed\\x8a\\x26\\xe2\\x6e\\xda\\x38\\x37\\x93\\x71\\xe3\\x20\\\n\\x6e\\xd4\\x5e\\x62\\x3f\\xa5\\x1b\\x36\\x36\\x36\\x90\\x88\\x7c\\xe1\\xef\\x1e\\\n\\x89\\x51\\x92\\x71\\x18\\xeb\\x95\\x04\\x81\\xbd\\x98\\x7d\\x6a\\x7e\\xf4\\x12\\\n\\x40\\xd9\\xd9\\x89\\xdc\\xc2\\x32\\xe4\\x15\\x57\\xa0\\xea\\x76\\x1d\\x5a\\xdb\\\n\\x3b\\xb8\\x72\\xb1\\xa3\\x00\\xbe\\xde\\x52\\x44\\x86\\x04\\x60\\x6c\\x58\\x30\\\n\\x6c\\x6d\\xf9\\x79\\x38\\x5a\\xe1\\x4d\\x1d\\xb5\\x68\\x95\\xdf\\xe1\\x44\\xe8\\\n\\xe5\\x6e\\x5b\\x35\\x4e\\x5d\\xff\\x06\\x0d\\xed\\xb5\\xac\\xc4\\x70\\x6c\\x6d\\\n\\x6c\\x31\\x4a\\x3a\\x0e\\xe3\\xfd\\x93\\x11\\xed\\x3b\\x1b\\x23\\x88\\x6d\\x4e\\\n\\x74\\x16\\x20\\xa7\\xb0\\x14\\x47\\x4f\\xfe\\x02\\x17\\x27\\x27\\x84\\x04\\xfb\\\n\\xc3\\xdb\\xcb\\x03\\x42\\x07\\x07\\xee\\x33\\x99\\x5c\\x8e\\xdb\\xd5\\xb5\\xb8\\\n\\x51\\x5a\\x81\\xe6\\xe6\\x56\\x2c\\x98\\x35\\x95\\x08\\x11\\xc4\\x7d\\xa6\\x4e\\\n\\x37\\xf9\\xd3\\x4c\\x2a\\xbd\\x41\\x76\\x0b\\x0a\\xd2\\xb1\\xaa\\x53\\x50\\xfd\\\n\\x0b\\x2e\\x14\\x1f\\xe1\\xed\\x72\\xf4\\xc1\\x55\\xe4\\x89\\x69\\xc1\\x8b\\x31\\\n\\x35\\x68\\x09\\xec\\x6d\\x7b\\xfe\\x0f\\xa6\\x86\\xb7\\x00\\xf4\\x87\\xd2\\x7f\\\n\\xce\\xc2\\xd5\\xeb\\x25\\x48\\x8a\\x9f\\x0c\\x2f\\x0f\\x49\\xcf\\x07\\x43\\x70\\\n\\xbb\\xb6\\x0e\\xa7\\xcf\\x65\\x21\\x26\\x3c\\x18\\x73\\x13\\x27\\xc3\\x86\\x95\\\n\\x77\\x77\\x77\\x91\\xa7\\xbd\\x86\\xab\\x78\\x4d\\xa3\\x98\\xfc\\xdb\\x17\\x90\\\n\\x59\\x72\\xd4\\xa8\\x02\\xf4\\xe2\\x24\\x74\\x43\\x6c\\xe0\\x42\\x4c\\x1f\\xbd\\\n\\x02\\x0e\\xb6\\x8e\\xac\\xd4\\x34\\xf0\\x16\\x80\\x56\\x7e\\x41\\x59\\x15\\xe6\\\n\\xcf\\x4a\\x80\\x83\\x83\\x3d\\x2b\\xd5\\x8c\\x5c\\xae\\xc0\\xb1\\x1f\\xcf\\x62\\\n\\xcc\\x28\\x3f\\xcc\\x4d\\x98\\x88\\x56\\xc5\\x5d\\xd4\\xb7\\x96\\x91\\x4e\\xb5\\\n\\xc7\\x65\\x69\\x83\\xba\\x1e\\xea\\x82\\xa8\\x2b\\x32\\x05\\x22\\x07\\x17\\xcc\\\n\\x1e\\xf3\\x14\\x69\\x11\\x4b\\x59\\x89\\xf1\\xe1\\x25\\x40\\xde\\x8d\\x72\\x1c\\\n\\xf9\\xe9\\x02\\x16\\x3f\\x32\\x1b\\x02\\x81\\x6e\\x4d\\x55\\xd6\\x21\\xc7\\x81\\\n\\xa3\\xc7\\x91\\x94\\x10\\x04\\x0f\\x9f\\xde\\x76\\xc0\\x1f\\x65\\x97\\x02\\xbf\\\n\\x90\\x96\\x40\\x5d\\x92\\xa9\\x08\\x21\\x7d\\xc4\\x6f\\x62\\x5e\\x85\\xbb\\xc8\\\n\\x8f\\x95\\x18\\x0f\\xad\\xbd\\x24\\xed\\x70\\x0f\\x9d\\x38\\x8f\\x99\\x09\\x53\\\n\\x74\\xae\\x7c\\x8a\\x90\\xfc\\x9d\\x99\\x09\\xb1\\x38\\xf1\\x73\\x11\\x3a\\xbb\\\n\\x74\\xea\\x6e\\x38\\xec\\x46\\xd8\\x23\\x7e\\xf4\\x62\\x24\\x86\\x2d\\x27\\xd7\\\n\\xa6\\xf1\\xd3\\xc5\\x75\\x97\\xb1\\xf5\\xf4\\x33\\xc8\\x28\\xf9\\x8e\\x95\\x18\\\n\\x0f\\xad\\x02\\xe4\\x16\\x95\\x93\\x0e\\x57\\x4c\\x7c\\xbe\\x3b\\x2b\\xd1\\x1d\\\n\\x1f\\xd2\\x51\\xbb\\x88\\x9d\\x51\\x51\\xde\\xcc\\x4a\\xf8\\x63\\x4b\\x04\\x70\\\n\\x72\\x90\\x10\\x1f\\xbd\\x08\\xab\\xe2\\x36\\xc1\\x93\\x8c\\xed\\xf9\\x10\\xe6\\\n\\x39\\x09\\x8e\\xf6\\xce\\xcc\\xd2\\x1d\\x85\\xb2\\x03\\x69\\x39\\x9f\\x62\\xef\\\n\\xaf\\xef\\x71\\xd1\\xb7\\xb1\\xd0\\xea\\x82\\xfe\\x7e\\xf8\\x27\\x48\\xa4\\x12\\\n\\x44\\x84\\x8d\\x62\\x25\\xfa\\x91\\x5b\\x70\\x03\\x95\\xd5\\xc5\\x98\\x99\\xa4\\\n\\xbd\\x59\\x0b\\xed\\x9c\\xb8\\x4a\\x77\\xb4\\x77\\x1d\\xd0\\x29\\x2a\\x3a\\x69\\\n\\xc5\\x6c\\xe3\\x72\\x41\\x9a\\x78\\xef\\xb1\\x13\\xdc\\x7b\\x65\\xe3\\x75\\xd2\\\n\\xa1\\x9f\\x45\\xce\\xed\\x33\\xa8\\x6d\\xd6\\x2f\\x6f\\xe4\\xe9\\x1c\\x8c\\xd5\\\n\\x71\\x1f\\x18\\x25\\xa0\\xd3\\xda\\x02\\x2a\\xab\\xeb\\xc9\\x50\\x53\\xca\\x2c\\\n\\xfd\\xf1\\x25\\xad\\xa0\\xae\\x7e\\xe8\\x27\\x89\\x8e\\xc7\\xdd\\x84\\xbe\\x08\\\n\\x74\\x1d\\x07\\x3f\\x97\\xb1\\x70\\x15\\x7a\\x0f\\x3a\\x22\\xb1\\xb7\\x15\\x10\\\n\\xff\\xfc\\x0a\\x96\\x8d\\x7f\\x83\\x7c\\x2e\\x64\\xa5\\x43\\xe3\\xe7\\x3a\\x06\\\n\\x73\\xc6\\xac\\xc6\\x4b\\x49\\x5f\\xe2\\x85\\xc4\\xed\\x98\\x1c\\xf8\\x08\\xf7\\\n\\x3b\\x74\\xa1\\xa6\\xb9\\x14\\x9f\\x9f\\x4b\\x21\\x83\\x82\\xe1\\x1f\\x0c\\x68\\\n\\x15\\xa0\\xb9\\xb5\\x0d\\x62\\x91\\xe1\\x43\\x33\\xb1\\x48\\x84\\xd6\\x56\\x05\\\n\\xb3\\xfa\\xb0\\xb5\\xb1\\x87\\xbb\\x63\\x00\\x82\\xdc\\x26\\x90\\x88\\x35\\x80\\\n\\x54\\x8e\\xf6\\x4a\\xa5\\xd0\\x40\\xea\\xb9\\xc4\\xbf\\xc2\\xcb\\x99\\x7f\\xcb\\\n\\xf4\\x71\\x0d\\x23\\xe2\\xa5\\x22\\xf5\\xe1\\x3d\\x48\\x08\\x59\\xae\\x53\\x44\\\n\\x5c\\xd7\\x52\\x81\\x9d\\x67\\x5f\\x1a\\xf6\\xec\\xab\\x56\\x01\\xe4\\x0a\\x05\\\n\\xec\\xed\\xec\\x98\\xa5\\x3f\\xf6\\xf6\\x76\\x50\\x28\\xee\\x1d\\xd3\\xbb\\x08\\\n\\xbc\\x10\\xe8\\x16\\x83\\x91\\x8e\\xbe\\x7a\\x45\\xa4\\x1e\\x4e\\x81\\x58\\x3b\\\n\\xfd\\x53\\xf2\\x54\\x3f\\xc6\\x4a\\xf8\\x21\\xb2\\x77\\xc1\\xfc\\x87\\x9e\\xc7\\\n\\xab\\xb3\\xbf\\xc6\\xa4\\xc0\\xf9\\xb0\\xb1\\xd1\\x5a\\x0d\\x1c\\x4d\\xb2\\x3a\\\n\\x7c\\x99\\x91\\x8a\\x86\\xb6\\xdb\\xac\\xc4\\x70\\xb4\\xf6\\x01\\x6f\\xfd\\xe5\\\n\\x0b\\x3c\\xbf\\xea\\x71\\x66\\x0d\\xe4\\xaf\\x7f\\xdb\\xcb\\xae\\xf8\\xf1\\xf4\\\n\\xea\\x28\\xf2\\x94\\x3b\\xc2\\x4b\\x3c\\x1a\\x02\\xbb\\xe1\\xcb\\xc9\\x64\\xdf\\\n\\x4c\\xc7\\xe1\\xab\\x1f\\xa9\\x3a\\xcc\\xde\\x3e\\x80\\x0f\\x37\\xea\\xb2\\xf0\\\n\\xcf\\xcb\\x9b\\x79\\xa7\\x3c\\x68\\x9f\\xf0\\x74\\xfc\\x16\\x83\\x3a\\xf9\\x5e\\\n\\x0c\\x16\\x40\\x17\\xa8\\x58\\x29\\xcf\\x25\\xc1\\x43\\x3c\\xca\\x28\\x39\\x18\\\n\\xea\\x1e\\xfe\\x91\\xf5\\x47\\x2e\\x6d\\xad\\x8b\\x00\\x94\\x76\\x45\\x33\\xf6\\\n\\x5e\\xfa\\x13\\x8a\\x6a\\x2e\\xb2\\x12\\xcd\\x04\\xb9\\x47\\xe3\\xbf\\xe3\\xfe\\\n\\x42\\x5c\\xa8\\x61\\xde\\x81\\x5f\\xdb\\x1b\\x46\\xbc\\x9c\\x42\\x8d\\x96\\x00\\\n\\xd3\\xd7\\x25\\x51\\xe8\\xd3\\xfc\\x5f\\x53\\x36\\x61\\x56\\xf8\\x53\\xb0\\x51\\\n\\x25\\x4e\\x86\\xa6\\xec\\xce\\x55\\xa4\\xe7\\xed\\x64\\x96\\xfe\\x98\\x5c\\x00\\\n\\x63\\xd3\\x3b\\x4a\\xd2\\x97\\xd9\\xe1\\xab\\xb0\\x6c\\xc2\\x5b\\xbc\\x9e\\xec\\\n\\x8c\\xe2\\xfd\\xc8\\x23\\x43\\x5c\\x43\\xb8\\xef\\x04\\x18\\x0e\\xc6\\xf9\\xcd\\\n\\xc1\\x13\\xb1\\x7f\\x24\\x41\\xa0\\x66\\x11\\x68\\x46\\xf7\\x00\\xe9\\x3b\\x1a\\\n\\xdb\\x6b\\x58\\x89\\xee\\x3c\\x10\\x60\\x08\\xc2\\x3d\\xa7\\xe2\\xb7\\x93\\x36\\\n\\x68\\x75\\x97\\xb4\\xef\\xf8\\xe7\\x95\\x0f\\x99\\xa5\\x3b\\x0f\\x04\\xd0\\x40\\\n\\x84\\x57\\x3c\\xe6\\x45\\x3e\\xcb\\xac\\xa1\\x29\\xaa\\xcd\\x44\\x7e\\x75\\x06\\\n\\xb3\\x74\\xc3\\x22\\x05\\xa0\\x03\\xb3\\xbd\\x7b\\xf7\\x62\\xcd\\x9a\\x35\\xac\\\n\\xc4\\x7c\\xc4\\x93\\x80\\x2d\\xca\\x77\\x26\\xb3\\x86\\xe6\\x68\\xce\\x56\\x2e\\\n\\x4d\\xa2\\x2b\\x16\\x27\\xc0\\xe1\\xc3\\x87\\x11\\x15\\x15\\x85\\x15\\x2b\\x56\\\n\\x60\\xd7\\xae\\x5d\\x38\\x74\\xe8\\x10\\xfb\\xc4\\x7c\\x2c\\xa6\\xa9\\x69\\xb1\\\n\\xe6\\x1c\\x16\\x0d\\xce\\x7e\\xd1\\x63\\x4d\\xaa\\xc9\\x03\\xb1\\x3f\\xa7\\x6a\\\n\\x7e\\xaa\\x67\\xcd\\x9a\\x85\\x93\\x27\\x4f\\x32\\x0b\\x88\\x89\\x89\\xc1\\xa5\\\n\\x4b\\x97\\x30\\x62\\x84\\x79\\x9f\\x95\\xf2\\x3b\\xd7\\xb8\\x7c\\x10\\xed\\x78\\\n\\x87\\xc2\\x59\\x28\\xc1\\x3a\\x12\\x5d\\xd3\\x14\\x3a\\x5f\\x4c\\x1e\\x88\\x69\\\n\\x13\\xe0\\xf2\\xe5\\xcb\\x98\\x38\\x71\\x22\\xba\\xba\\xba\\x58\\x09\\xf0\\xc5\\\n\\x17\\x5f\\x60\\xf5\\xea\\xd5\\xcc\\x32\\x1f\\xdf\\x65\\x6f\\xc2\\x25\\x12\\x71\\\n\\x6b\\x62\\x51\\xf4\\x2b\\x88\\x0d\\xe2\\x1f\\x87\\x58\\x9c\\x0b\\x1a\\x37\\x6e\\\n\\x1c\\xe7\\x7e\\xfa\\xf3\\xf6\\xdb\\x6f\\xa3\\xad\\xad\\x8d\\x59\\xe6\\x63\\x5e\\\n\\xe4\\x5a\\x08\\xb5\\xa4\\x4f\\x7e\\x2e\\xde\\xab\\xb1\\x95\\xa8\\x63\\x91\\x9d\\\n\\xf0\\xfb\\xef\\xbf\\x0f\\x81\\xa0\\x2f\\x65\\x5c\\x55\\x55\\x85\\x4f\\x3e\\xf9\\\n\\x84\\x59\\x86\\x51\\xff\\x7d\\x0a\\x76\\x25\\x78\\x62\\x93\\x0d\\x7b\\x25\\x24\\\n\\x13\\x3b\\x05\\x87\\xd6\\x6e\\x43\\xc1\\xf7\\xe9\\xe4\\x55\\x8c\\xfa\\xa2\\x9e\\\n\\x97\\x3a\\x62\\x81\\x1b\\xa6\\x8d\\x5a\\xc2\\xac\\x7e\\xdc\\xea\\xc0\\x08\\xf6\\\n\\x6a\\x3a\\x9d\\x87\\xb3\\x7b\\x37\\x90\\xdf\\xd7\\x77\\x9f\\x5d\\x6b\\x87\\x6e\\\n\\x35\\x16\\xe7\\x82\\x7a\\x79\\xf9\\xe5\\x97\\xf1\\xf1\\xc7\\x1f\\x33\\x0b\\x70\\\n\\x73\\x73\\x43\\x51\\x51\\x11\\x24\\x12\\xcd\\xab\\x31\\x34\\x51\\xff\\x51\\x32\\\n\\x3e\\x4f\\xc9\\x66\\x96\\x69\\xf1\\xd8\\x72\\x1e\\xab\\x5f\\x0e\\x61\\x56\\x1f\\\n\\x16\\xd9\\x02\\x28\\xd4\\xed\\xb8\\xb8\\xb8\\x30\\x8b\\x8c\\x32\\x1a\\x1a\\xb0\\\n\\x71\\xe3\\x46\\x66\\xe9\\x43\\x3a\\xce\\x9a\\xa9\\xf2\\x29\\xb5\\x29\\xcf\\x21\\\n\\xa3\\x88\\x19\\xfd\\xb0\\x58\\x01\\xa4\\x52\\x29\\x52\\x53\\x53\\x99\\xd5\\xc3\\\n\\xd6\\xad\\x5b\\x51\\x56\\x56\\xc6\\x2c\\x6b\\x23\\x1b\\xa7\\x37\\x0f\\x74\\x45\\\n\\x16\\x2b\\x00\\x65\\xdd\\xba\\x75\\xf0\\xf1\\xf1\\x61\\x16\\x20\\x93\\xc9\\xb0\\\n\\x61\\xc3\\x06\\x66\\x59\\x21\\x3b\\xd2\\x50\\xc0\\x2e\\x7b\\xb1\\x68\\x01\\xc4\\\n\\x62\\x31\\xde\\x79\\xe7\\x1d\\x66\\xf5\\xb0\\x7b\\xf7\\x6e\\x64\\x67\\xeb\\xe3\\\n\\x4a\\x92\\x11\\xa1\\x3d\\xab\\x60\\x64\\x72\\x49\\xe7\\xce\\x2e\\x19\\x5a\\x3b\\\n\\xe1\\xf3\\x0f\\x3f\\xcc\\xae\\x86\\x87\\x69\\xc7\\x8f\\xb3\\x2b\\x7e\\x74\\x76\\\n\\x76\\x22\\x3a\\x3a\\x1a\\x79\\x79\\x79\\xac\\x04\\x78\\xf4\\xd1\\x47\\x71\\xf4\\\n\\xe8\\x51\\x66\\xe9\\x42\\x31\\x0a\\xd6\\x3e\\x87\\x03\\x3b\\xf4\\xec\\x0b\\x9e\\\n\\xfd\\x0a\\x4f\\x7f\\x96\\x0c\\x3a\\x0c\\xb8\\xd5\\x54\\xc4\\xed\\xc8\\xa4\\x23\\\n\\x1f\\x8e\\xaa\\x0e\\xd8\\x55\\x36\\xc2\\x6e\\x67\\x83\\xc6\\xa7\\x3a\\x32\\xad\\\n\\x06\\x8b\\x1e\\x61\\x06\\x81\\x97\\x00\\xe3\\x1f\\xd3\\x7d\\x82\\x63\\x30\\xb2\\\n\\x8f\\x1c\\xd1\\x59\\x00\\xca\\xfe\\xfd\\xfb\\xb1\\x7c\\xf9\\x72\\x66\\xf5\\x70\\\n\\xe2\\xc4\\x09\\xcc\\x9e\\x3d\\x9b\\x59\\x3a\\x52\\xb4\\x0d\\xbb\\xc2\\xde\\x85\\\n\\x6e\\x6b\\xae\\xc7\\x63\\x46\\x61\\x3a\\xe2\\x42\\x7b\\x2c\\x5a\\x6d\\x1b\\x7f\\\n\\x58\\x86\\x36\\x79\\x63\\x4f\\x81\\x0a\\x22\\xc4\\xa7\\xe5\\x10\\x1e\\x1b\\x7c\\\n\\x05\\x88\\xba\\x00\\x16\\xed\\x82\\x7a\\x59\\xb6\\x6c\\x19\\xe2\\xe3\\xe3\\x99\\\n\\xd5\\xc3\\x9b\\x6f\\xbe\\xc9\\x55\\x82\\x5e\\x84\\xbe\\x80\\xdf\\x6c\\x19\\xcf\\\n\\x0c\\xbe\\x3c\\x04\\x09\\xab\\x7c\\x0a\\xdd\\x77\\x10\\xec\\x1e\\xcd\\xac\\xfe\\\n\\x08\\xa0\\x7c\\x31\\x0c\\xb2\\xf9\\xcc\\xd4\\x82\\x55\\x08\\x40\\x51\\x1f\\x82\\\n\\x66\\x66\\x66\\x62\\xdf\\xbe\\x7d\\xcc\\xd2\\x1d\\x49\\xf8\\x43\\xec\\x8a\\x27\\\n\\xf1\\xe1\\x9c\\xeb\\xe9\\x8f\\xa7\\x86\\x25\\x31\\xca\\x17\\xc3\\x11\\xf8\\x1f\\\n\\xcc\\x50\\xf1\\x04\\x22\\xfa\\x3d\\xfd\\x14\\xab\\x11\\x20\\x31\\x31\\x11\\x0b\\\n\\x16\\x2c\\x60\\x56\\x0f\\xeb\\xd7\\xaf\\x87\\x42\\x31\\x70\\xad\\x11\\x2f\\xc2\\\n\\xc2\\xe1\\xc1\\x2e\\x79\\x11\\x15\\x3a\\x40\\x00\\xa9\\x53\\x00\\xbb\\x1a\\x0c\\\n\\x01\\xe4\\xaf\\x2e\\xc5\\x8c\\x67\\x7b\\x5b\\x1a\\x75\\x61\\x5b\\x10\\xce\\xac\\\n\\x5e\\xac\\x46\\x00\\x0a\\x6d\\x05\\xb6\\xb6\\x7d\\x33\\x54\\x85\\x85\\x85\\x70\\\n\\x77\\x77\\xc7\\xd2\\xa5\\x4b\\xb9\\x28\\xd9\\xd4\\x48\\xc5\\xfe\\x40\\x56\\x05\\\n\\x44\\x0b\\xaf\\xc2\\x69\\x61\\x21\\x84\\x87\\xee\\x9d\\x0f\\x68\\xe9\\xe8\\x44\\\n\\xdc\\x67\\xe9\\x78\\xa3\\xbb\\x86\\xbc\\xfa\\xfa\\x8f\\xfe\\x58\\x95\\x00\\x74\\\n\\x9e\\x80\\x56\\x76\\x7f\\x5a\\x5a\\x5a\\x70\\xe0\\xc0\\x01\\x4c\\x99\\x32\\x05\\\n\\x15\\x15\\x15\\xac\\x94\\x07\\xa1\\xa1\\xd0\\x65\\xc1\\xa5\\xc7\\x43\\x03\\x6b\\\n\\x4f\\xe4\\x90\\x0d\\xe1\\xbb\\xbd\\xa3\\x1e\\x19\\x19\\x01\\x95\\xc3\\xe1\\x16\\\n\\x67\\x70\\xd0\\x0d\\x86\\xda\\xb0\\x2a\\x01\\x28\\xb4\\xc2\\x29\\x91\\x71\\x9e\\\n\\x78\\x6b\\xef\\x4c\\xbc\\xf9\\x8f\\x99\\x88\\x88\\xf3\\xc0\\xdd\\xbb\\x77\\xb9\\\n\\xc0\\xcd\\x94\\x08\\x8e\\x9f\\xc2\\xbd\\xd3\\xf6\\x32\\x38\\x7c\\xd7\\xc4\\xae\\\n\\xa9\\x00\\xed\\xec\\x6a\\x68\\xac\\x4e\\x80\\x33\\x67\\xce\\x70\\xef\\x4b\\x53\\\n\\xa3\\xe0\\xee\\x23\\x82\\xc4\\x57\\x84\\xa5\\xeb\\xa2\\xb8\\xb2\\x1f\\x7e\\x30\\\n\\xed\\xfe\\xe1\\xe6\\xe2\\x42\\x76\\xd5\\x8f\\xd2\\x0e\\x55\\xa5\\xca\\x4d\\xd1\\\n\\x02\\xe8\\xd8\\x9e\\xef\\xcb\\x50\\x9a\\x9a\\x9a\\xd0\\xde\\xde\\xf3\\x54\\x91\\\n\\x51\\xa0\\x0a\\x9b\\x11\\x3d\\x86\\xde\\xc3\\x52\\x1e\\xd4\\xa6\\x7c\\x8c\\x82\\\n\\xfe\\xdd\\x0c\\x89\\x25\\x8e\\xbe\\x72\\x99\\x19\\xfd\\xc8\\x97\\xe9\\x54\\xa9\\\n\\x56\\x11\\x88\\x51\\x5a\\x5b\\x5b\\xb9\\x51\\xd0\\xa9\\x53\\xa7\\x38\\x9b\\xba\\\n\\xa0\\xe5\\xaf\\x47\\x91\\x4a\\x07\\xf6\\x6d\\xbe\\x8a\\xfc\\x8c\\x5a\\x2e\\x58\\\n\\xfb\\xf6\\xdb\\x6f\\xb9\\xcf\\xb5\\x93\\x8e\\x43\\x36\\x4f\\xa2\\x2f\\xbe\\x1e\\\n\\x2e\\x84\\x90\\xef\\x08\\x83\\xdc\\x87\\xf6\\x11\\xae\\x78\\x2b\\x59\\xf3\\x2e\\\n\\x1b\\xab\\x70\\x41\\xf4\\xc9\\x9f\\x3b\\x77\\xae\\xaa\\xf2\\x29\\x79\\x19\\x35\\\n\\x78\\x6f\\xc9\\x8f\\xf8\\xd3\\xd2\\x1f\\xb9\\xca\\xa7\\xa3\\xa1\\x0f\\x3f\\xd4\\\n\\x7f\\x7d\\x8e\\x31\\x10\\xd8\\x69\\x5f\\xd6\\x6f\\xf1\\x02\\xd0\\xca\\x9f\\x3f\\\n\\x7f\\x3e\\x32\\x32\\x06\\xae\\xbb\\xb1\\xb3\\xb3\\xe3\\xe6\\x0c\\x68\\xa4\\x4c\\\n\\x13\\x74\\x01\\x01\\x9a\\xc6\\xe5\\xa6\\x47\\x60\\x27\\x62\\x57\\x43\\x63\\xd1\\\n\\x02\\x68\\xaa\\x7c\\xea\\x8e\\xe8\\x88\\xa8\\xb1\\xb1\\x91\\x8b\\x88\\x75\\xae\\\n\\x7c\\x12\\x37\\xd4\\xb1\\x4b\\x63\\xe1\\x24\\xd0\\xbe\\xaf\\xce\\x62\\x05\\xd0\\\n\\x54\\xf9\\x0f\\x93\\x7e\\x89\\xfa\\xfa\\xfe\\xf3\\xc6\\x96\\x08\\x5d\\xad\\xad\\\n\\x0d\\x8b\\x14\\x40\\x5b\\xe5\\xd3\\xc5\\x5a\\x8e\\x8e\\xa6\\xdd\\xd1\\x8e\\xf8\\\n\\x77\\xf1\\x34\\x17\\xd1\\xd2\\xd7\\x79\\x2c\\x51\\xa5\\x18\\xd4\\x11\\xa2\\x8b\\\n\\xcd\\x21\\x49\\x68\\xa4\\xac\\x05\\x8b\\x13\\x80\\x06\\x54\\x34\\xcd\\x3c\\x58\\\n\\xe5\\xcf\\x99\\x33\\xc7\\x3c\\x95\\x4f\\xf0\\x78\\x7c\\x7e\\xbf\\x5c\\x50\\x08\\\n\\xc2\\xb6\\xff\\x0b\\x5d\\x6a\\x89\\x35\\x8e\\x08\\x22\\x00\\xbb\\xb4\\xca\\x16\\\n\\xb0\\x72\\xe5\\x4a\\x64\\x65\\x65\\x31\\xab\\x8f\\x84\\x84\\x04\\x2e\\xe5\\x60\\\n\\x8e\\xca\\x1f\\x8c\\xea\\xe6\\x62\\xb4\\x4d\\x1d\\x64\\xdb\\x6a\\xb0\\x80\\x13\\\n\\x80\\xa6\\xab\\x7d\\x5c\\x07\\x49\\xfe\\xa8\\xa1\\x51\\x00\\x59\\x55\\x15\\xbb\\\n\\x1a\\x1a\\xf5\\x60\\x4b\\xd3\\x8b\\xd2\\x51\\xad\\x79\\xab\\xa7\\xfa\\x6a\\x08\\\n\\x0a\\x6d\\x11\\xe9\\xe9\\xe9\\x70\\x76\\x36\\x7c\\x4f\\xd6\\x70\\x51\\x54\\x7b\\\n\\x11\\xf0\\xed\\x7b\\xda\\x7b\\x51\\x4e\\xeb\\xf9\\xb7\\xfb\\xb8\\x84\\xf2\\xda\\\n\\x43\\x36\\x64\\x20\\xd6\\x56\\x5c\\x8c\\xfc\\xd7\\x5e\\x83\\x27\\x19\\x5d\\x48\\\n\\x83\\x83\\x59\\xa9\\x61\\xd4\\x95\\x95\\xa1\\xfa\\xe6\\x4d\\x44\\x7e\\xf0\\x01\\\n\\x44\\x81\\x43\\x37\\xcf\\x73\\xe7\\xce\\x71\\x7d\\x40\\x73\\x73\\x33\\x57\\xf9\\\n\\x74\\xc1\\xae\\x48\\xa4\\x7d\\x48\\xa7\\x13\\xdf\\xa7\\x60\\xd3\\xa3\\xdf\\x30\\\n\\x43\\x3b\\xea\\xeb\\x7a\\x3e\\x39\\xb5\\x06\\x35\\xcd\\x57\\x20\\x5c\\x58\\xd6\\\n\\x97\\x0f\\x8a\\xf0\\x46\\xdb\\x66\\x0f\\x4e\\x94\\xc4\\xd1\\x2b\\x90\\xcc\\x63\\\n\\x69\\xfb\\xa0\\x2d\\x40\\x56\\x59\\x89\\xfc\\xd7\\x5f\\x87\\x5f\\x58\\xd8\\xb0\\\n\\x55\\x3e\\x45\\x1a\\x14\\x04\\xdf\\x90\\x10\\xe4\\xa5\\xa6\\x42\\x76\\x7b\\xe8\\\n\\xad\\x9e\\x74\\xf6\\xeb\\xd8\\xb1\\x63\\x58\\xb4\\x68\\x91\\x71\\x2a\\x5f\\x0f\\\n\\x6a\\x73\\xfb\\xf2\\x10\\x74\\x13\\x20\\xdd\\xbc\\x0d\\xb8\\x40\\xfe\\x0c\\xdb\\\n\\xd7\\x1c\\xe1\\x06\\xf9\\xba\\x9e\\xca\\xa7\\x04\\x4b\\xc6\\xb1\\x2b\\xcd\\x0c\\\n\\x10\\xa0\\x4b\\x2e\\x47\\xc1\\xfa\\xf5\\xdc\\x93\\xef\\xea\\xed\\xcd\\x4a\\x87\\\n\\x8f\\x91\\x3e\\x3e\\xf0\\xf2\\xf3\\xc3\\x75\\x72\\x8f\\x2e\\x0d\\x93\\x29\\x54\\\n\\x84\\x83\\x07\\x0f\\x1a\\xad\\xf2\\xeb\\x0b\\x72\\xd9\\x95\\xee\\x64\\x95\\xa7\\\n\\xb1\\x2b\\x52\\x5f\\x8b\\xc2\\xd0\\x72\\x38\\x1a\\x2d\\x9b\\x03\\xb8\\xf4\\x03\\\n\\x45\\x68\\xef\\x84\\x10\\xe9\\x84\\x1e\\x43\\x0b\\x03\\x04\\xa8\\xf8\\xf2\\x4b\\\n\\x08\\x6c\\x6d\\xb9\\xa7\\xd5\\x58\\xd0\\xdf\\x4d\\x9f\\x9b\\x9b\\xbb\\x77\\xf7\\\n\\x14\\x98\\x81\\xfa\\x5c\\x1d\\x57\\x46\\x5c\\x2b\\x42\\x3d\\x79\\x6b\\xee\\xa8\\\n\\x47\\x66\\x99\\xe6\\xc4\\x62\\xb4\\xef\\x4c\\xde\\x27\\xbb\\xdc\\x23\\x00\\xed\\\n\\x74\\xeb\\xd2\\xd2\\xe0\\x3f\\x66\\x0c\\x2b\\x31\\x1e\\x7e\\xe4\\x1e\\x35\\xe4\\\n\\x09\\xd7\\xd6\\x29\\x1b\\x03\\xba\\x40\\xf7\\xc0\\x0e\\x66\\xf0\\xe5\\xdc\\xbb\\\n\\x38\\xf8\\x51\\x31\\x4e\\x96\\x1c\\xd0\\x7a\\x5e\\xe9\\x78\\xbf\\xb9\\xec\\x4a\\\n\\x3b\\xf7\\x08\\x50\\xf5\\xd5\\x57\\x90\\x92\\xce\\xd1\\x96\\x9d\\x01\\x67\\x4c\\\n\\xec\\xc8\\x3d\\xa4\\xc4\\xcd\\x55\\xee\\xd9\\xc3\\x4a\\x4c\\x40\\x51\\x3a\\x0e\\\n\\x25\\x78\\xe2\\x73\\x1d\\x3a\\xdf\\xfe\\xd4\\xa6\\x4c\\x43\\x6e\\xe4\\x1f\\xe0\\\n\\xf4\\x5a\\x05\\xec\\xfa\\xcd\\x7c\\xf5\\xc7\\x5d\\xe4\\x8b\\x00\\xf7\\xb1\\xcc\\\n\\xd2\\x8e\\x4a\\x00\\x65\\x4b\\x0b\\xea\\x4f\\x9f\\x86\\xc4\\x84\\x09\\x2d\\x2a\\\n\\xc0\\x9d\\x13\\x27\\xd0\\xc9\\x72\\xfc\\xc6\\x85\\x54\\x7e\\xd8\\x93\\xc8\\x3b\\\n\\xc7\\x4c\\x43\\xc8\\x6f\\x80\\xf0\\xc3\\xda\\x81\\xfe\\x9b\\x90\\x18\\xfa\\x5b\\\n\\x5e\\x1b\\xbd\\x7b\\x51\\xfd\\x8e\\xc6\\xcc\\x4c\\x38\\x79\\x7a\\x72\\x4f\\xa6\\\n\\xa9\\xb0\\x13\\x08\\x20\\x92\\x4a\\xd1\\xf0\\xeb\\xaf\\xac\\xc4\\x88\\x7c\\x9f\\\n\\x36\\xbc\\xb9\\x7f\\x22\\x82\\x7a\\x2b\\x70\\x75\\xf4\\xc4\\x04\\xff\\x79\\xcc\\\n\\xe2\\xc7\\x3d\\x02\\xb8\\xb8\\xba\\x32\\xcb\\x74\\xd0\\xa0\\xab\\xf1\\x22\\xbf\\\n\\xf3\\x19\\x0c\\xc1\\x90\\x51\\xcf\\xe0\\xc8\\x30\\x42\\x2d\\x4e\\x4d\\x0a\\x5d\\\n\\xa9\\x75\\x73\\xb7\\x3a\\x2a\\x01\\x5a\\xae\\x5f\\x87\\xa3\\x5a\\x04\\x6a\\x0a\\\n\\xe8\\x3d\\x5b\\xfb\\xad\\xfb\\x34\\x16\\x92\\x05\\x8b\\x75\\x5b\\x07\\xa4\\x15\\\n\\x12\\x05\\xfb\\xb2\\x4b\\x02\\x5d\\xa2\\x32\\x21\\x40\\xb7\\xa7\\x9f\\xa2\\x12\\\n\\x40\\x51\\x57\\x07\\x07\\xb1\\xe9\\x8f\\xf4\\x15\\x90\\x7b\\xca\\x6b\\xf4\\xdf\\\n\\xea\\xcf\\x9b\\xd0\\x17\\x30\\x7d\\xc8\\x0c\\xa6\\xee\\x74\\x3d\\x13\\xa8\\x1a\\\n\\xf7\\x53\\x16\\x44\\xfd\\x5e\\xa7\\xdd\\x91\\xbd\\xa8\\x52\\x11\\x17\\xe6\\xcd\\\n\\x43\\x0c\\x09\\xff\\x69\\x12\\xc9\\x94\\xd0\\xdd\\x90\\xd7\\xd2\\xd3\\x31\\x85\\\n\\x44\\xbe\\x26\\x81\\x8c\\x84\\x0a\\x8e\\xa6\\x21\\x3f\\x37\\x17\\x75\\xd7\\x68\\\n\\x41\\x36\\x6a\\x35\\x76\\xcc\\xe4\\x49\\x8f\\x60\\xef\\xc1\\x42\\x2e\\xd7\\xd3\\\n\\x35\\xa9\\x27\\xe1\\xd6\\x0b\\xdd\\xc8\\xbd\\x62\\xe2\\xdb\\xcc\\xd2\\x8d\\x7f\\\n\\x3f\\x01\\x78\\x72\\xbd\\xe6\\x3c\\xfe\\x9e\\xb9\\x41\\xeb\\xc9\\xbd\\x34\\xe1\\\n\\xf6\\xe2\\x8c\\x1d\\x5c\\x07\\xac\\x0f\\x2a\\x17\\x64\\xeb\\xe8\\x88\\x4e\\x7d\\\n\\xd7\\x59\\x1a\\x00\\x4d\\x47\\xd0\\x7b\\x5b\\x12\\xf4\\x44\\xc6\\x6f\\x32\\xdf\\\n\\xd6\\x5a\\xf9\\xf4\\x61\\x5d\\x3e\\xe1\\x0f\\x7a\\x57\\x3e\\x45\\x25\\x80\\x90\\\n\\x0c\\x07\\xe5\\x66\\xd8\\x8b\\xdb\\xd1\\xda\\x0a\\x41\\xbf\\x6d\\x48\\xe6\\xe6\\\n\\x6c\\xf1\\xb7\\x38\\x74\\x65\\x0b\\xba\\xba\\xd5\\x13\\xcd\\x03\\x89\\x1b\\xb5\\\n\\x0c\\xe1\\x9e\\x53\\x98\\xa5\\x1f\\x2a\\x01\\x44\\x61\\x61\\x68\\xbd\\x7b\\x97\\\n\\x59\\xa6\\xa3\\x8d\\xdc\\x53\\x6c\\x82\\xd4\\x87\\x36\\xe8\\x3a\\x4e\\x7a\\x48\\\n\\xeb\\xb1\\xdc\\xed\\xbc\\x36\\x5a\\xd3\\x23\\xcb\\x92\\x23\\x9f\\x61\\x96\\xfe\\\n\\xa8\\x04\\x70\\x89\\x8d\\x45\\x23\\x19\\x09\\x99\\x9a\\xc6\\x3b\\x77\\xe0\\x32\\\n\\x79\\x32\\xb3\\xcc\\xc3\\xcd\\x86\\x7c\\xee\\xab\\x51\\xae\\x56\\xf5\\x9d\\x51\\\n\\xa1\\x09\\x7a\\x68\\xdf\\xca\\xd8\\xf7\\x0c\\x3e\\x2f\\x8e\\xa2\\x12\\x60\\xe4\\\n\\xb4\\x69\\x68\\x6f\\x68\\x80\\x52\\x6e\\xba\\x2f\\xc6\\x51\\x76\\x74\\x70\\xf7\\\n\\x74\\x9b\\x34\\x89\\x95\\x98\\x96\\x96\\x8e\\xbb\\xdc\\x21\\x7f\\x9f\\xfd\\xfc\\\n\\x22\\xea\\x5a\\x6f\\xb2\\x52\\xcd\\xb8\\x89\\xbc\\xb1\\x6a\\xda\\xff\\x0e\\xcb\\\n\\x89\\x89\\x94\\xbe\\x4e\\x58\\x24\\x82\\x64\\xc6\\x0c\\xd4\\x94\\x94\\xb0\\x12\\\n\\xe3\\x73\\xab\\xa4\\x08\\x55\\x63\\xba\\x70\\xbc\\xe4\\x6f\\xdc\\xc9\\x53\\xa6\\\n\\x42\\xa6\\x68\\xc1\\xa9\\xc2\\xaf\\xb9\\x59\\xad\\x6b\\xb7\\xfa\\x56\\xdb\\x69\\\n\\xc3\\x45\\xe8\\x81\\xa7\\x62\\xdf\\x87\\xb3\\x40\\xff\\xdd\\xfa\\xea\\xdc\\x33\\\n\\x25\\xd9\\x5e\\x51\\x81\\xab\\x6b\\xd7\\x22\\x22\\x31\\x11\\x0e\\x46\\x1e\\x99\\\n\\xd0\\x0e\\x3f\\xe7\\xcc\\x49\\x9c\\x7c\\xb2\\x13\\x6d\\xae\\x80\\x83\\x9d\\x23\\\n\\xc6\\xf9\\xcd\\xc6\\x94\\xc0\\x45\\xf0\\xe6\\x31\\x99\\xad\\x0f\\xf4\\x58\\x4b\\\n\\xfa\\x65\\x40\\xf4\\x5c\\x1f\\x3e\\x6b\\xf7\\xfb\\x43\\x4f\\xe8\\xfd\\xcf\\xa9\\\n\\x7f\\xe6\\x44\\x18\\x4e\\x06\\xcc\\x09\\x97\\x6d\\xdb\\x86\\xf6\\xcc\\x4c\\x04\\\n\\xc7\\xc4\\xd0\\x71\\x16\\x2b\\x1d\\x66\\xc8\\x2d\\x0b\\xb2\\x2e\\x20\\x37\\xa0\\\n\\x1e\\x39\\x09\\x03\\x47\\x1b\\x9e\\xce\\x41\\x18\\xeb\\x3b\\x03\\x63\\x3c\\xe2\\\n\\xe0\\xe7\\x66\\x58\\x07\\x4d\\xa7\\x0e\\x0b\\x6b\\x2f\\xe2\\x6a\\xe5\\x8f\\xdc\\\n\\x41\\xde\\xfa\\x30\\x4a\\x32\\x1e\\x4f\\x4c\\xfe\\x1f\\x6e\\xa6\\x6b\\xb8\\x19\\\n\\x20\\x40\\xb7\\x52\\x89\\xbc\\x75\\xeb\\xe0\\xd8\\xd9\\x09\\x1f\\x32\\x32\\x32\\\n\\x06\\x15\\xf9\\x39\\x28\\xe9\\x28\\xc7\\xd9\\x25\\x4a\\x74\\xa9\\x9c\\xe0\\xe0\\\n\\xd0\\x63\\x86\\xfd\\x46\\x8e\\x81\\x87\\x53\\x00\\xa4\\x4e\\x81\\xdc\\x5a\\x1b\\\n\\xba\\xe4\\x8f\\xae\\x3c\\xa6\\x9f\\x51\\x64\\xca\\x56\\xce\\xad\\xd0\\x2d\\xa3\\\n\\xf5\\xad\\x95\\xa8\\x6b\\xb9\\x89\\x9a\\x96\\x52\\x94\\xd6\\x5f\\x21\\x7e\\xfe\\\n\\x0e\\xf7\\x33\\xfa\\x40\\xd3\\xca\\x09\\xa3\\x1f\\xc7\\xdc\\x88\\x35\\x46\\x3b\\\n\\xeb\\x74\\x80\\x00\\x14\\x05\\x19\\x99\\x50\\x57\\xe4\\x1d\\x14\\x04\\x77\\x7f\\\n\\xed\\xab\\xbb\\x74\\xa1\\xbe\\xa2\\x1c\\xa5\\xc5\\x39\\x38\\xf9\\x3b\\x25\\x64\\\n\\xe6\\x9f\\x6b\\x1f\\x12\\xda\\xc9\\x2e\\x1d\\xff\\x3a\\x77\\x70\\x9f\\x31\\x19\\\n\\x54\\x00\\x4a\\x5b\\x69\\x29\\xae\\xbf\\xf1\\x06\\x46\\x7a\\x7a\\xc2\\x3b\\x24\\\n\\xc4\\x70\\x77\\x44\\x6e\\x73\\xb3\\x30\\x1f\\xb7\\x6e\\x97\\xe2\\xfc\\x62\\x25\\\n\\x9a\\xf4\\xff\\x3e\\x08\\xa3\\x13\\xe9\\x9d\\x80\\x05\\x63\\x7f\\x6f\\x50\\x84\\\n\\xcb\\x97\\x21\\x05\\xa0\\x28\\xc8\\x10\\x91\\xae\\x5e\\xb0\\x25\\xd1\\xaa\\x7f\\\n\\x44\\x04\\xec\\x85\\xfc\\x8e\\x96\\x57\\x47\\xde\\xde\\x8e\\xca\\xfc\\x7c\\xb4\\\n\\x89\\x6d\\x71\\x76\\x41\\x3b\\x6a\\xbb\\x4d\\x90\\xfd\\xd4\\x03\\x3a\\xbe\\x5f\\\n\\x18\\xf5\\x12\\xef\\x25\\x25\\xc3\\x81\\x46\\x01\\x28\\xb4\\x4f\\xa8\\xda\\xb3\\\n\\x07\\xb7\\xf7\\xed\\xe3\\xdc\\x91\\xa7\\x0e\\x73\\xc6\\x34\\xa6\\xa8\\x2d\\x2f\\\n\\x47\\x3d\\x79\\x79\\x2f\\x5b\\x06\\xbf\\x95\\x2b\\xa1\\x20\\x7f\\xce\\x14\\xef\\\n\\x41\\x66\\xe9\\x11\\xb4\\xca\\x1b\\xd8\\x4f\\x9a\\x17\\x3a\\xb2\\x99\\x4e\\x7c\\\n\\xfd\\xe4\\xc0\\x05\\x3a\\x7f\\xb9\\x83\\xa1\\x68\\x15\\xa0\\x17\\xda\\x2f\\x54\\\n\\xec\\xdc\\x89\\xba\\x53\\xa7\\x20\\x76\\x77\\x87\\xb3\\x44\\x02\\xb1\\xab\\x2b\\\n\\x97\\xcf\\xef\\x15\\xa4\\x93\\x54\\x38\\xcd\\xed\\xb4\\x91\\x96\\x43\\x23\\xdc\\\n\\x36\\xf2\\x92\\x24\\x25\\xc1\\x7f\\xd5\\x2a\\x08\\xbc\\xbc\\xb8\\x9f\\xe9\\x85\\\n\\x7e\\x3b\\xd2\\xf9\\xd2\\xfd\\xe4\\x75\\x10\\x8d\\x6d\\xe6\\x69\\x11\\x74\\xa3\\\n\\xf5\\xf4\\x90\\x15\\x18\\xef\\x3f\\x57\\xe7\\x99\\xac\\xe1\\x82\\xb7\\x00\\xbd\\\n\\xd0\\xc9\\xfb\\x86\\x8c\\x0c\\x6e\\x0a\\x93\\x2e\\x5f\\x94\\xd7\\xd7\\x43\\x49\\\n\\x2a\\x9d\\x62\\x47\\xc4\\x70\\x90\\x4a\\x21\\x22\\x7d\\x86\\x6b\\x6c\\x2c\\x46\\\n\\xc6\\xc5\\xc1\\x96\\xc7\\x24\\x4f\\x65\\x43\\x3e\\xb2\\x2a\\xd2\\x70\\xad\\xea\\\n\\x0c\\xf7\\x1d\\x92\\xc6\\x84\\x46\\xb2\\x13\\xfc\\x93\\x11\\xe5\\x93\\xc4\\xb9\\\n\\x1c\\x73\\xa3\\xb3\\x00\\xc6\\x84\\xb6\\x8a\\xc2\\x9a\\x0c\\x6e\\xdc\\x5e\\x7a\\\n\\xe7\\x2a\\xea\\x5b\\x2a\\xd0\\x65\\xe0\\x3f\\x6f\\x84\\xcd\\x08\\xf8\\xba\\x86\\\n\\x73\\x2b\\xd5\\x42\\xa4\\x13\\x89\\x7f\\x8f\\x19\\x96\\x1c\\xce\\x70\\x61\\x51\\\n\\x02\\xa8\\x43\\xc7\\xf5\\xe5\\x77\\x73\\x48\\x04\\x5b\\x46\\xc6\\xf7\\x15\\x44\\\n\\x90\\x4a\\xd2\\x6f\\xd0\\x6f\\x5b\\x6d\\x85\\x5c\\xd9\\xae\\xda\\x08\\x4d\\x87\\\n\\x8c\\x42\\x7b\\x31\\xf7\\x4e\\x0f\\x4f\\x95\\x8a\\x69\\xcc\\xe0\\x0f\\x09\\x79\\\n\\xf7\\x71\\x19\\x6d\\x94\\x00\\x6a\\xb8\\xb0\\x68\\x01\\xfe\\x1d\\xd0\\x12\\x87\\\n\\x3e\\xc0\\xd8\\x3c\\x10\\xc0\\xcc\\x3c\\x10\\xc0\\xcc\\x3c\\x10\\xc0\\xcc\\x3c\\\n\\x10\\xc0\\xcc\\x3c\\x10\\xc0\\xcc\\x3c\\x10\\xc0\\xac\\x00\\xff\\x0f\\xe1\\xbb\\\n\\x0e\\x79\\x18\\xa7\\x66\\xda\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\\n\\x60\\x82\\\n\\x00\\x00\\x0a\\x04\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x50\\x00\\x00\\x00\\x50\\x08\\x06\\x00\\x00\\x00\\x8e\\x11\\xf2\\xad\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0e\\xc3\\x00\\x00\\x0e\\xc3\\x01\\xc7\\x6f\\\n\\xa8\\x64\\x00\\x00\\x09\\x99\\x49\\x44\\x41\\x54\\x78\\x5e\\xed\\x5c\\xd9\\x6f\\\n\\x54\\x55\\x1c\\xe6\\x49\\xa3\\x0f\\xea\\x1f\\x60\\x5c\\xe2\\xab\\xbb\\x31\\x92\\\n\\xb8\\x94\\xb9\\xb7\\xd5\\xaa\\xb8\\x60\\x41\\x13\\x0d\\x44\\x50\\xd4\\x44\\xd1\\\n\\x47\\x15\\x45\\x8b\\x89\\x3b\\xb4\\x58\\x7d\\x32\\xd1\\x37\\x13\\xd7\\x18\\x05\\\n\\xe4\\x4d\\x82\\xd8\\x76\\xa4\\x45\\x41\\x08\\x45\\xb6\\x20\\x55\\x44\\xa5\\x05\\\n\\xb1\\xb5\\xfb\\x1c\\xbf\\xef\\xcc\\xef\\xce\\x0c\\xed\\xb9\\x33\\x77\\x39\\xf7\\\n\\xde\\x52\\xf8\\x92\\x2f\\xd3\\xce\\x39\\xf7\\x9c\\xdf\\xef\\x9b\\xb3\\x2f\\x77\\\n\\xd6\\x19\\x9c\\xc1\\xe9\\x8b\\xee\\xb9\\x73\\xcf\\xed\\xa8\\xaf\\xaf\\xeb\\x70\\\n\\x9c\\x27\\x3a\\x1d\\xa7\\xa5\\xc3\\x75\\xbf\\x01\\xb7\\xe3\\xff\\xfd\\x9d\\xae\\\n\\xdb\\x8f\\xcf\\x11\\x52\\xfe\\xde\\xaf\\xc3\\x10\\x47\\xc7\\x75\\x9c\\xc7\\xf9\\\n\\x2c\\xd3\\x90\\xe4\\x4e\\x0f\\xe4\\xeb\\xeb\\x67\\x43\\x90\\x66\\x08\\xf1\\x9d\\\n\\x88\\xa3\\xe2\\x50\\xd2\\xd8\\x04\\x36\\x77\\xce\\x99\\x73\\x83\\x64\\x33\\xb3\\\n\\xd0\\x59\\x57\\x77\\x09\\x1c\\x5c\\x01\\xee\\xa5\\xd3\\x1e\\x21\\xa6\\xda\\x76\\\n\\xdf\\x7d\\x6a\\xcf\\xe2\\xc5\\xea\\xd7\\xa7\\x9e\\x52\\x47\\x9e\\x7b\\x4e\\xf5\\\n\\xbf\\xf2\\x8a\\xfa\\xe7\\xd5\\x57\\xd5\\xc0\\x9b\\x6f\\xaa\\xff\\x5a\\x5a\\x34\\\n\\xf9\\x37\\xbf\\x63\\xd8\\x91\\x67\\x9f\\xd5\\x71\\xf7\\x3c\\xfc\\xb0\\xda\\xd6\\\n\\xd4\\xa4\\xd3\\xa8\\x4c\\x13\\x82\\xfe\\x82\\xcf\\x15\\xed\\xb9\\xdc\\xc5\\x92\\\n\\xfd\\xa9\\x0b\\x38\\x73\\x2d\\xf8\\x05\\x38\\xe1\\x39\\xd8\\x7d\\xe7\\x9d\\x6a\\\n\\xdf\\xa3\\x8f\\x6a\\xb1\\x06\\xde\\x7a\\x4b\\x0d\\xb5\\xb6\\xc6\\x22\\xd3\\x60\\\n\\x5a\\x4c\\x93\\x69\\x57\\x08\\x39\\xc1\\xbc\\xdb\\x5d\\xf7\\x1a\\x31\\xe7\\xd4\\\n\\x41\\x3e\\x97\\xbb\\x4e\\xb7\\x55\\xe2\\x4c\\xbe\\xa1\\x41\\xed\\x5e\\xb4\\x48\\\n\\xfd\\xb5\\x7c\\xb9\\x2e\\x51\\x26\\x21\\x6c\\x90\\x69\\xff\\x89\\x3c\\x98\\x17\\\n\\xf3\\x2c\\x89\\x09\\x5b\\x4e\\x09\\x21\\x37\\xd6\\xd5\\x5d\\x00\\x83\\xdf\\xf5\\\n\\x4a\\xdc\\x0f\\xb7\\xdd\\xa6\\xf6\\x2d\\x5d\\xaa\\xfe\\x7d\\xe3\\x0d\\xa3\\xc3\\\n\\x49\\x92\\x79\\x32\\xef\\xfc\\xad\\xb7\\x16\\x85\\x74\\x9c\\x71\\xb0\\x8d\\x36\\\n\\x8a\\xb9\\xd3\\x0b\\x79\\xc7\\x99\\x8f\\x5f\\xfa\\x08\\x8d\\x65\\xbb\\xc4\\x2a\\\n\\xc5\\xb6\\xcb\\xe4\\x5c\\x9a\\xfc\\x17\\x36\\xd0\\x16\\xaf\\xad\\xc4\\x8f\\x7b\\\n\\x18\\x9f\\x4d\\x62\\x76\\xf6\\xf8\\xa6\\xb1\\xf1\\x6c\\x18\\xf4\\xae\\xfe\\x95\\\n\\xc1\\x9f\\x17\\x2c\\x50\\xfd\\x2b\\x57\\x1a\\x9d\\xc9\\x92\\xb4\\x89\\xb6\\x79\\\n\\x76\\xd2\\x66\\xda\\x2e\\x6e\\x64\\x03\\xb4\\x33\\x97\\xa2\\x5a\\xfc\\x48\\x83\\\n\\xd8\\xe6\\x1c\\x7a\\xe6\\x19\\x35\\x94\\x60\\x1b\\x17\\x9b\\xb0\\xed\\xd0\\xd3\\\n\\x4f\\x97\\xda\\x47\\x94\\xc6\\xae\\xcc\\x7a\\x6b\\x08\\x77\\xa5\\x54\\x07\\xb5\\\n\\x75\\xee\\x5c\\xd5\\xdf\\xdc\\x6c\\x36\\x7a\\x1a\\xb2\\xef\\xe5\\x97\\xb5\\xcd\\\n\\x22\\xe2\\x61\\xfa\\x22\\x6e\\xa5\\x03\\xce\\x00\\x90\\xf9\\x31\\x1a\\xb0\\xe3\\\n\\xfe\\xfb\\xad\\x0c\\x47\\xa6\\xb0\\xad\\x4d\\x8d\\x75\\x77\\xab\\xc2\\xc0\\x80\\\n\\xe6\\x58\\x57\\x97\\xfe\\xce\\x18\\x37\\x02\\xd9\\x3e\\xef\\x28\\x57\\xe9\\x63\\\n\\x68\\xc3\\x6f\\x16\\xf7\\x92\\x05\\x32\\x9b\\x83\\x5f\\x6d\\x90\\x19\\xef\\x7a\\\n\\xe8\\x21\\x35\\xb8\\x7a\\xb5\\xd1\\xc0\\xb8\\x1c\\xdb\\xb2\\x45\\x4d\\x06\\xbf\\\n\\x33\\xc5\\x8d\\x4a\\xda\\x4e\\x1f\\xe8\\x0b\\x7d\\x42\\x75\\xbe\\x45\\xdc\\x4c\\\n\\x06\\xe8\\x65\\xaf\\x40\\x46\\xc7\\x99\\x21\\x67\\x02\\xb1\\xc6\\x74\\x35\\x4a\\\n\\x18\\xbf\\x9b\\x0c\\x7e\\x77\\x52\\x1a\\x16\\x48\\x1f\\x7e\\x81\\x2f\\x22\\xe2\\\n\\x71\\xfa\\x28\\xee\\xda\\xc5\\xf7\\xb9\\xdc\\x65\\xc8\\xe4\\x37\\x5d\\xf2\\x1e\\\n\\x7c\\x30\\xf6\\x80\\xb8\\x56\\x09\\xf3\\x43\\x65\\x1a\\xb6\\x48\\x5f\\x4a\\x25\\\n\\xd1\\x75\\x7b\\xf3\\x75\\x75\\x17\\x8a\\xdb\\x76\\x20\\x43\\x95\\xad\\xcc\\x60\\\n\\xc7\\x03\\x0f\\xc4\\x16\\x8f\\xac\\x55\\xc2\\xfc\\x50\\x99\\x86\\x4d\\x0e\\xae\\\n\\x5a\\xa5\\xdb\\x73\\x11\\xb1\\x7b\\xe7\\x82\\x05\\x67\\x89\\xfb\\xf1\\x81\\x04\\\n\\xdf\\x63\\xc2\\xec\\xb9\\x06\\xde\\x7e\\xdb\\x68\\x40\\x58\\xfa\\x21\\x68\\x78\\\n\\x12\\x64\\xc7\\xb2\\xf5\\xae\\xbb\\xb4\\x88\\x9c\\xb5\\x88\\xfb\\xf1\\x80\\xc4\\\n\\x9a\\x74\\x82\\x18\\xc9\\xdb\\x1c\\xaa\\xf8\\x21\\x68\\x78\\x52\\xbd\\x74\\xdf\\\n\\x4b\\x2f\\x69\\x5f\\x51\\x68\\x0a\\xed\\x8e\\x73\\xaf\\xc8\\x10\\x0d\\x9c\\x37\\\n\\x22\\x21\\x3d\\x3d\\xe3\\x00\\xd4\\x94\\x61\\x54\\xfa\\x21\\x68\\x78\\x92\\xbd\\\n\\xf4\\xa1\\x65\\xcb\\xbc\\x4e\\xe5\\x70\\xbe\\xb1\\xf1\\x3c\\x91\\x23\\x3c\\xbc\\\n\\xaa\\xcb\\x29\\x90\\xed\\x19\\x86\\x1f\\x82\\x86\\xd7\\x6a\\x43\\xe3\\x72\\x7b\\\n\\x53\\x93\\x27\\xe2\\x3b\\x22\\x47\\x38\\x70\\x49\\x0a\\xed\\xc0\\x38\\x27\\xe1\\\n\\x49\\xcc\\x6d\\xfd\\x60\\x2b\\x3c\\x2e\\xe9\\xb3\\x5e\\x80\\x80\\x06\\xdf\\x37\\\n\\x34\\x5c\\x2d\\xb2\\x04\\x07\\x4a\\x9f\\x5e\\xcf\\xe3\\x4a\\x86\\x29\\x83\\x9a\\\n\\xac\\xd1\\x46\\xf9\\xc1\\x56\\xb8\\x0d\\xee\\x7b\\xe4\\x11\\xaf\\x14\\xae\\x13\\\n\\x59\\x82\\x41\\x97\\x3e\\x3c\\xc8\\xf5\\xbc\\xa8\\x4b\\x52\\x71\\xc7\\x79\\x7e\\\n\\x08\\x1a\\x6e\\x83\\x5c\\x0a\\xe3\\xc2\\x03\\x3b\\x94\\x50\\xa5\\x10\\x8a\\x7f\\\n\\xa1\\x4b\\xdf\\xd2\\xa5\\xc6\\x84\\x83\\xb0\\x56\\x1b\\xe5\\x07\\x5b\\xe1\\xb6\\\n\\x48\\x0d\\x74\\x29\\x74\\xdd\\xcf\\x44\\x9e\\xea\\xe0\\x12\\x15\\x04\\x9c\\xa0\\\n\\xf2\\x71\\x56\\x92\\xfd\\x90\\x56\\xb8\\x2d\\x9e\\x78\\xfd\\xf5\\x62\\x29\\x84\\\n\\x26\\x81\\x96\\xbe\\xa0\\x36\\x77\\xcf\\xf4\\xbe\\x82\\x29\\xc1\\xa0\\xf4\\x43\\\n\\x5a\\xe1\\x36\\x49\\x2d\\xa8\\x09\\x3a\\x94\\x17\\x44\\x26\\x7f\\x20\\xa2\\xde\\\n\\x7a\\xe4\\xe6\\x8c\\x29\\xb1\\xa0\\xf4\\x43\\x5a\\xe1\\x36\\xf9\\xe7\\xf3\\xcf\\\n\\x7b\\x02\\xf6\\x88\\x4c\\x66\\xa0\\xdb\\xe6\\xa6\\xb7\\xde\\x1e\\x34\\x25\\x14\\\n\\x86\\x7e\\x48\\x2b\\xdc\\x26\\x39\\xf7\\xef\\xba\\xe3\\x0e\\x2d\\x62\\xbb\\xeb\\\n\\x5e\\x2f\\x72\\x4d\\x05\\x22\\xac\\x64\\xa4\\xc8\\x43\\x97\\x0a\\xfa\\x21\\xad\\\n\\x70\\xdb\\xdc\\xbb\\x64\\x49\\xb1\\x14\\xba\\xee\\x8b\\x22\\xd7\\x54\\x20\\x90\\\n\\x47\\x24\\xf4\\x46\\xb5\\x29\\x91\\x30\\xf4\\x43\\x5a\\xe1\\xb6\\xc9\\x13\\x11\\\n\\xd4\\x06\\x9d\\xc9\\x46\\x91\\xeb\\x64\\xe8\\x83\\x3e\\x8e\\x33\\xc2\\xd1\\xb7\\\n\\x8d\\x25\\x7a\\x3f\\xa4\\x15\\x6e\\x9b\\x1c\\x0f\\xeb\\x12\\xe8\\x38\\xc3\\x1d\\\n\\xb3\\x67\\x9f\\x23\\xb2\\x95\\x81\\xc0\\x39\\x8c\\xc0\\xb3\\x2a\\xa6\\x04\\xc2\\\n\\xd2\\x0f\\x69\\x85\\x27\\x41\\x6a\\x43\\x8d\\x8c\\xfb\\x27\\x28\\x7d\\x4f\\x30\\\n\\x90\\x07\\x7d\\x4c\\x0f\\x87\\xa5\\x1f\\xd2\\x0a\\x4f\\x82\\xde\\xd2\\x7f\\xde\\\n\\x75\\x1f\\x13\\xd9\\xca\\x40\\x40\\x2b\\x03\\x7f\\x7d\\xf2\\x49\\xe3\\xc3\\x61\\\n\\xe9\\x87\\xb4\\xc2\\x93\\x20\\x4f\\x85\\x51\\x23\\x14\\xb6\\xd5\\x22\\x5b\\x19\\\n\\x98\\xaa\\xac\\x67\\x20\\x1b\\x4b\\xd3\\xc3\\x61\\xe9\\x87\\xb4\\xc2\\x93\\xa0\\\n\\xd7\\x91\\xa0\\x1d\\x5c\\x2b\\xb2\\x95\\x01\\x01\\xb7\\x33\\xd0\\xd6\\xd2\\x55\\\n\\x56\\x30\\xd9\\x62\\x8b\\xd4\\x46\\x97\\x40\\x68\\x25\\xb2\\x95\\x81\\x80\\x83\\\n\\x0c\\xfc\\xe7\\xb5\\xd7\\x8c\\x0f\\x87\\x65\\x56\\x30\\xd9\\x62\\x8b\\x3c\\xe4\\\n\\xa9\\x05\\x74\\x9c\\x03\\x22\\x5b\\x19\\xf8\\xf2\\x28\\x03\\x6d\\x9d\\x32\\xc8\\\n\\x0a\\x26\\x5b\\x6c\\xd1\\x1b\\xca\\xa0\\x04\\xfe\\x2d\\xb2\\x95\\xc1\\x31\\x20\\\n\\x03\\x6d\\x6c\\x59\\x92\\x59\\xc1\\x64\\x8b\\x2d\\xf2\\x24\\x03\\x35\\xe2\\x58\\\n\\x50\\x64\\x2b\\x63\\x26\\x0b\\x38\\xf2\\xd1\\x47\\x6a\\xe2\\xe0\\x41\\xa5\\xc6\\\n\\xc6\\x94\\x1a\\x1e\\x56\\xe3\\xbb\\x77\\xab\\xe1\\x0f\\x3e\\x30\\xc6\\xad\\xc6\\\n\\x5a\\x02\\x16\\xab\\x70\\xc4\\x15\\xe8\\xc9\\xcc\\x0a\\x93\\xed\\x18\\xf9\\xf2\\\n\\xcb\\xa2\\x70\\x93\\x50\\x18\\x1c\\x54\\xc3\\x1f\\x7e\\x38\\x25\\x7e\\x35\\x56\\\n\\xad\\xc2\\x08\\x98\\x71\\x9d\\x88\\x16\\x6f\\x7c\\x5c\\x42\\xa6\\x82\\x25\\xb1\\\n\\x32\\x7e\\x2d\\x56\\xef\\x44\\x66\\xd8\\x30\\xa6\\x96\\x78\\x44\\x01\\xd5\\xb9\\\n\\xd2\\xe6\\x5a\\xac\\x18\\xc6\\x6c\\x13\\xd9\\xca\\xc0\\x97\\xa9\\x0c\\xa4\\x93\\\n\\x06\\xf3\\x0e\\x22\\x9e\\xc6\\xe8\\xe8\\x14\\xbb\\xab\\xb1\\xea\\x40\\x1a\\x5f\\\n\\xb6\\x30\\x30\\xe9\\xa9\\x5c\\xd2\\x08\\x2c\\x1e\\x30\\x71\\xe0\\x80\\xd1\\x76\\\n\\x3f\\x96\\xa6\\x72\\xae\\xbb\\x4a\\x64\\x2b\\x03\\xf5\\xba\\xb8\\x98\\x80\\x09\\\n\\xb3\\xe9\\xe1\\xb0\\xcc\\x0c\\x01\\xc5\\x63\\xc7\\xc2\\xde\\xd9\\x64\\xbb\\x1f\\\n\\xab\\x2e\\x26\\xc8\\xb1\\x5d\\x7d\\x7d\\xca\\xf4\\x70\\x58\\x4e\\x6b\\x40\\x64\\\n\\x96\\x54\\x93\\xdd\\xd5\\xb8\\x6d\\xde\\xbc\\xa2\\x80\\xa6\\xe5\\x2c\\x2e\\xa8\\\n\\x72\\x7c\\x93\\xf4\\x82\\x6a\\xe6\\x88\\x28\\x1e\\x35\\xa1\\x78\\xe0\\x90\\x71\\\n\\x41\\x95\\x40\\x60\\xe2\\x4b\\xfa\\x99\\x22\\xa2\\x78\\x64\\x69\\x49\\xdf\\x75\\\n\\xbf\\x15\\xb9\\xa6\\x02\\x11\\x9a\\x19\\x89\\x67\\x42\\x4c\\x89\\x84\\xe1\\xb4\\\n\\x43\\x0c\\xf1\\xc8\\x40\\x9b\\x4a\\xde\\xb6\\x26\\xb7\\xf0\\xe2\\x4e\\xe9\\xa6\\\n\\x15\\x62\\x8a\\xa7\\xb7\\x35\\x6f\\xbf\\x5d\\x0b\\xc8\\x73\\x43\\x22\\x97\\x19\\\n\\xe8\\x8d\\xf7\\x30\\x62\\x52\\x1b\\xeb\\xa9\\x23\\xa6\\x78\\xa4\\xb7\\xb1\\x0e\\\n\\x6d\\x76\\x89\\x4c\\xfe\\x60\\x11\\x65\\xe4\\xa4\\x8e\\x76\\xa4\\x0a\\x0b\\xe2\\\n\\x91\\x3d\\x0b\\x17\\x7a\\x02\\x2e\\x17\\x99\\xfc\\xc1\\xdb\\xe5\\x88\\x18\\xff\\\n\\x70\\xd1\\xc8\\x88\\x78\\x91\\x11\\x2c\\x89\\xa7\\x0f\\x17\\xf1\\xcc\\x74\\xd0\\\n\\xc3\\x45\\x04\\x22\\x7f\\x4e\\xc5\\x63\\x1d\\x6f\\xeb\\xef\\x17\\x4f\\x32\\x80\\\n\\x25\\xf1\\x48\\xef\\x78\\x1b\\x86\\x78\\x9f\\x88\\x3c\\xb5\\x01\\x01\\xaf\\x45\\\n\\x77\\x5d\\xe0\\x65\\xe5\\xa8\\xcb\\x5b\\xe3\\x3d\\x3d\\xe2\\x4d\\xca\\xb0\\x28\\\n\\x9e\\x3e\\x60\\x09\\x0d\\xb4\\x16\\xb9\\xdc\\x55\\x22\\x4f\\x30\\xe0\\x21\\xbd\\\n\\xb8\\x10\\xf5\\x9c\\xcc\\xe8\\xfa\\xf5\\xe2\\x51\\x8a\\xb0\\x28\\x1e\\xb9\\x57\\\n\\x8e\\xf8\\x1a\\x17\\x0f\\x6a\\x81\\xef\\x18\\xc0\\x83\\xd1\\x0f\\x99\\xb7\\xb5\\\n\\xa9\\xc2\\xf1\\xe3\\xe2\\x59\\x0a\\x28\\x14\\xac\\x8a\\xc7\\x3b\\x31\\xf4\\x1d\\\n\\x02\\x8e\\x41\\x87\\x68\\xd7\\x61\\xf1\\xb0\\xbe\\x89\\x1e\\xf5\\x9a\\xc3\\xe8\\\n\\xda\\xb5\\xe2\\x5d\\xf2\\x18\\xdd\\xb0\\xc1\\x68\\x43\\x54\\x6e\\x9f\\x3f\\xbf\\\n\\x58\\xfa\\x5c\\xb7\\x55\\xe4\\x08\\x8f\\xee\\xfa\\xfa\\xf3\\x51\\x95\\xff\\x60\\\n\\x42\\xbc\\x7c\\x62\\xca\\xa8\\x16\\x79\\x52\\x3f\\x51\\x4c\\x4c\\xa8\\xd1\\x4d\\\n\\x9b\\x8c\\x79\\x47\\xa5\\xb7\\x6c\\x85\\x92\\xf7\\x7b\\xac\\x8b\\x36\\x04\\x3a\\\n\\x94\\x79\\x3a\\x31\\x14\\x67\\xde\\xf4\\x36\\x65\\x58\\x95\\x6b\\xd6\\x24\\x26\\\n\\x22\\x0f\\xad\\x8f\\x7c\\xfc\\xb1\\x39\\xdf\\x88\\x3c\\xca\\xab\\x5e\\x72\\x32\\\n\\x3f\\xef\\xba\\xf7\\x88\\x0c\\xf1\\x00\\x01\\x75\\x55\\xe6\\x45\\xbc\\xa8\\xbd\\\n\\xf2\\xe8\\xd7\\x5f\\xab\\xc2\\xb1\\x63\\xe2\\x7a\\x4c\\xa0\\xbd\\x1b\\xdf\\xb9\\\n\\x53\\x0d\\xbf\\xff\\xbe\\x31\\xaf\\xa8\\xe4\\x8a\\x4b\\xe9\\x55\\x00\\xae\\xbb\\\n\\x46\\xdc\\x8f\\x0f\\x5e\\xfd\\x44\\xa2\\xa5\\xeb\\xae\\xbc\\x1a\\x6a\\x32\\xa0\\\n\\x26\\xd1\\xb1\\x8c\\xae\\x5b\\xa7\\x87\\x38\\x85\\xbe\\x3e\\xbd\\xa4\\x1e\\x08\\\n\\xa8\\xa6\\x85\\x13\\x27\\xd4\\x44\\x6f\\xaf\\x1a\\xdb\\xbc\\x39\\xf4\\x6e\\x5a\\\n\\x10\\xd2\\xa7\\xd2\\x5b\\x3d\\x1c\\x67\\x8b\\xd5\\xeb\\xae\\x84\\x9e\\xa1\\xb8\\\n\\x6e\\x2f\\x33\\xe0\\xe5\\x64\\x5b\\xfb\\xc7\\xd3\\x81\\xf4\\x25\\xd1\\x0b\\xd7\\\n\\x1e\\x90\\x78\\xe9\\xca\\x3f\\x97\\xb7\\x67\\x82\\x88\\xf4\\x21\\x95\\x2b\\xff\\\n\\x1e\\xf8\\x62\\x06\\x64\\x94\\xf8\\x4b\\x27\\xd2\\x20\\xab\\x6d\\xe5\\x4b\\x27\\\n\\x3a\\x1a\\x1a\\x6e\\x14\\x37\\x93\\x05\\x7a\\xe4\\x9b\\x90\\x69\\x3f\\x33\\xe6\\\n\\xab\\x43\\x6c\\x9d\\x66\\x48\\x93\\xb4\\xb9\\xe2\\x4d\\x46\\xfd\\xf4\\x49\\xdc\\\n\\x4b\\x07\\x52\\x9d\\x4b\\x2f\\xde\\x89\\x34\\xc4\\xc9\\x88\\x95\\x2f\\xde\\x01\\\n\\x7f\\x6b\\x6f\\x68\\xb8\\x5c\\xdc\\x4a\\x17\\x5c\\xde\\x81\\x88\\x5d\\xda\\x10\\\n\\x8c\\x9d\\xa2\\x0e\\xb6\\xd3\\xa4\\x1e\\x24\\xc3\\x56\\xda\\x4c\\xdb\\x37\\xd7\\\n\\xd7\\x5f\\x24\\xee\\x64\\x03\\xfd\\x46\\x0f\\xc7\\x69\\x43\\x89\\x2c\\xd0\\x28\\\n\\xde\\xf4\\xb6\\x75\\x3c\\xc4\\x26\\x39\\xb7\\x2d\\xdd\\x42\\xa7\\xad\\x8e\\xd3\\\n\\x92\\xf9\\xcb\\xc7\\x2a\\xc1\\x51\\xbb\\x57\\xa5\\x39\\x09\\xe7\\x2a\\x0e\\x97\\\n\\x83\\x4c\\xce\\xa4\\x49\\xda\\xc0\\x55\\x15\\x59\\x18\\x60\\xa9\\x3b\\xdc\\x99\\\n\\xcb\\xdd\\x2d\\x66\\x4f\\x2f\\xc8\\xdc\\x79\\x0d\\x0c\\x1d\\xd3\\x42\\xa2\\xaa\\\n\\x70\\x41\\x92\\xab\\xba\\x26\\xe7\\x92\\x24\\xf3\\x64\\xde\\xb4\\x81\\xb6\\x88\\\n\\x4d\\xad\\xb1\\xe7\\xb6\\x69\\x80\\xb7\\xbb\\xf1\\x4b\\xaf\\xf3\\xaa\\x35\\x9d\\\n\\xd8\\xbd\\x70\\xa1\\xde\\x9c\\x49\\x72\\xec\\xc8\\xb4\\x99\\x07\\xf7\\x30\\x3c\\\n\\xe1\\x68\\x03\\xf8\\x55\\xe8\\x05\\xd1\\xe9\\x00\\x0a\\x09\\x27\\x3e\\x85\\x98\\\n\\xa5\\x97\\xd0\\x72\\xcb\\x94\\x7b\\xac\\xdc\\xa8\\xb6\\x31\\xfc\\xe1\\xfc\\x95\\\n\\x69\\x31\\x4d\\x6f\\xeb\\x51\\x0b\\x57\\xcc\\xf3\\xd3\\x53\\x52\\xb8\\xc9\\x60\\\n\\x4f\\x87\\x46\\xfb\\x05\\xb0\\xc7\\x73\\xd0\\x23\\xcf\\x9b\\x70\\x26\\xc0\\xde\\\n\\x91\\x42\\xb0\\x03\\xd2\\xaf\\x41\\x86\\x30\\x2c\\x51\\x24\\xff\\xd6\\xaf\\x41\\\n\\x46\\x18\\xe3\\x30\\x2e\\x9f\\xf1\\xce\\xaa\\x9c\\x44\\xe4\\x01\\xf1\\x96\\x67\\\n\\xde\\xbb\\x26\\x05\\xde\\xb7\\x85\\xa3\\x2b\\xe0\\xe4\\x46\\x7c\\x0e\\x9d\\xe4\\\n\\x7c\\x34\\x0e\\xa1\\x8a\\x7e\\x8b\\xcf\\x17\\x6b\\x6e\\x7a\\xcf\\x34\\xf0\\x90\\\n\\x0e\\xa7\\x86\\x3c\\x2e\\x06\\x11\\x56\\xb1\\xdd\\x44\\x09\\xfa\\x09\\x9f\\xfb\\\n\\xf1\\xd9\\x87\\x4f\\xfd\\x2a\\x78\\xf0\\xa8\\x7c\\xf7\\x13\\xb8\\x96\\x71\\xf9\\\n\\x0c\\x4f\\x49\\xf9\\x1e\\xf4\\x39\\x83\\x33\\x38\\x0d\\x30\\x6b\\xd6\\xff\\x01\\\n\\xd8\\x81\\x7a\\xcd\\x4d\\x58\\x60\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\\n\\x42\\x60\\x82\\\n\\x00\\x00\\x0c\\xa4\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x64\\x00\\x00\\x00\\x64\\x08\\x06\\x00\\x00\\x00\\x70\\xe2\\x95\\x54\\\n\\x00\\x00\\x00\\x04\\x73\\x42\\x49\\x54\\x08\\x08\\x08\\x08\\x7c\\x08\\x64\\x88\\\n\\x00\\x00\\x00\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x1b\\xaf\\x00\\x00\\x1b\\xaf\\\n\\x01\\x5e\\x1a\\x91\\x1c\\x00\\x00\\x00\\x19\\x74\\x45\\x58\\x74\\x53\\x6f\\x66\\\n\\x74\\x77\\x61\\x72\\x65\\x00\\x77\\x77\\x77\\x2e\\x69\\x6e\\x6b\\x73\\x63\\x61\\\n\\x70\\x65\\x2e\\x6f\\x72\\x67\\x9b\\xee\\x3c\\x1a\\x00\\x00\\x0c\\x21\\x49\\x44\\\n\\x41\\x54\\x78\\x9c\\xed\\x9d\\x7b\\x6c\\x1c\\xc5\\x1d\\xc7\\xbf\\xbf\\xf1\\xda\\\n\\xb1\\x93\\x5e\\x42\\x40\\x25\\xb9\\x73\\xca\\x23\\x09\\x84\\x24\\xd8\\xaa\\x77\\\n\\x2f\\x3e\\x4c\\x68\\xa1\\xe0\\x54\\xa5\\xa4\\x45\\x88\\x9e\\x28\\xa5\\x01\\x21\\\n\\x8a\\x48\\xa2\\x3e\\xe0\\x8f\\x36\\x88\\x37\\xb4\\x14\\x50\\xa1\\x2d\\x42\\x22\\\n\\x6d\\x55\\x81\\x1a\\x50\\x78\\x56\\xa5\\x40\\x1f\\xd0\\x24\\x1c\\x2d\\x86\\xc6\\\n\\x77\\xb3\\xce\\x03\\x07\\x42\\x4c\\x02\\x4d\\x7b\\x17\\x40\\x80\\x63\\x43\\xce\\\n\\x39\\xdf\\xee\\xaf\\x7f\\xdc\\x25\\x3d\\xdf\\xed\\xbd\\xf7\\x76\\xaf\\xf6\\x7d\\\n\\x24\\x4b\\xd9\\xd9\\x99\\xdf\\xfc\\x32\\xdf\\xdb\\xdd\\xd9\\xd9\\xdf\\xcc\\x00\\\n\\x0d\\x1a\\x34\\x68\\xd0\\xa0\\x41\\x65\\x90\\xdb\\x0e\\x14\\x23\\x10\\x08\\xcc\\\n\\x34\\x0c\\xe3\\x34\\xd3\\x34\\x4f\\x21\\xa2\\x53\\x01\\x9c\\x02\\xe0\\x64\\x00\\\n\\xd3\\x00\\xcc\\x02\\x30\\x3d\\xfd\\x6f\\x00\\x38\\x0c\\xe0\\x10\\x80\\x83\\xe9\\\n\\x7f\\xef\\x03\\xb0\\x87\\x99\\xdf\\x12\\x42\\xec\\x99\\x36\\x6d\\xda\\x1b\\x7d\\\n\\x7d\\x7d\\xa3\\xce\\xff\\x2f\\x4a\\xa7\\xee\\x04\\xe9\\xe9\\xe9\\x39\\x36\\x91\\\n\\x48\\x9c\\x47\\x44\\xbd\\xcc\\xdc\\x0b\\x60\\xbe\\xcd\\x55\\xec\\x25\\xa2\\x4d\\\n\\xcc\\xbc\\x29\\x91\\x48\\x6c\\xda\\xb9\\x73\\xe7\\xc7\\x36\\xdb\\xaf\\x8a\\xba\\\n\\x10\\x24\\x18\\x0c\\x36\\xbd\\xfd\\xf6\\xdb\\xbd\\x42\\x88\\x2b\\x99\\xf9\\x42\\\n\\x00\\xad\\x0e\\x55\\x3d\\xc6\\xcc\\xcf\\x10\\xd1\\xc3\\x52\\xca\\x4d\\x00\\x4c\\\n\\x87\\xea\\xcd\\x8b\\xab\\x82\\x04\\x02\\x81\\x79\\x86\\x61\\xac\\x61\\xe6\\xcb\\\n\\x01\\xcc\\x73\\xd3\\x17\\x00\\xfb\\x99\\x79\\x83\\x61\\x18\\xeb\\xb7\\x6f\\xdf\\\n\\xfe\\x1f\\xb7\\x9c\\x70\\x45\\x90\\xae\\xae\\xae\\x25\\x42\\x88\\xdb\\x00\\x5c\\\n\\x0c\\x40\\xb8\\xe1\\x43\\x01\\x4c\\x00\\xbf\\x67\\xe6\\x5b\\x75\\x5d\\x7f\\xc3\\\n\\xe9\\xca\\x1d\\x15\\xa4\\xbb\\xbb\\xfb\\x64\\xc3\\x30\\x7e\\x0c\\xe0\\x12\\x00\\\n\\x8a\\x93\\x75\\x57\\x40\\x92\\x99\\x1f\\x63\\xe6\\x9b\\x07\\x06\\x06\\xde\\x75\\\n\\xaa\\x52\\x47\\x04\\x59\\xbe\\x7c\\xb9\\x67\\x6c\\x6c\\xec\\x27\\x00\\xd6\\x00\\\n\\x68\\x76\\xa2\\x4e\\x1b\\x19\\x07\\xb0\\xbe\\xb5\\xb5\\xf5\\x26\\x27\\x7a\\x68\\\n\\x35\\x17\\x44\\x55\\xd5\\x95\\x44\\x74\\x3f\\xec\\xef\\x2d\\x39\\xcd\\x10\\x11\\\n\\xfd\\x20\\x12\\x89\\xfc\\xb9\\x96\\x95\\xd4\\x4c\\x90\\xce\\xce\\xce\\x19\\x8a\\\n\\xa2\\xac\\x27\\xa2\\x55\\xb5\\xaa\\xc3\\x0d\\x98\\xf9\\x11\\x22\\x5a\\x2d\\xa5\\\n\\x3c\\x54\\x0b\\xfb\\x35\\x11\\xc4\\xef\\xf7\\x9f\\xce\\xcc\\x4f\\x01\\x38\\xad\\\n\\x16\\xf6\\xeb\\x80\\x37\\x84\\x10\\xc1\\x70\\x38\\x3c\\x68\\xb7\\x61\\xdb\\x7b\\\n\\x38\\xaa\\xaa\\xae\\x64\\xe6\\x57\\x30\\x79\\xc5\\x00\\x80\\xc5\\xa6\\x69\\xbe\\\n\\xe2\\xf7\\xfb\\xbf\\x6a\\xb7\\xe1\\x26\\x3b\\x8d\\x69\\x9a\\xb6\\x9a\\x88\\x36\\\n\\x00\\x68\\xb3\\xd3\\x6e\\x9d\\xd2\\x0a\\xe0\\x9b\\x5e\\xaf\\xf7\\x40\\x2c\\x16\\\n\\x93\\x76\\x19\\xb5\\x4d\\x10\\x4d\\xd3\\xee\\x06\\x70\\x17\\xea\\xef\\xbd\\xa2\\\n\\x96\\x08\\x22\\x5a\\xd9\\xde\\xde\\x4e\\xd1\\x68\\x34\\x64\\x87\\x41\\x5b\\x04\\\n\\xd1\\x34\\xed\\x0e\\x00\\x37\\xd8\\x61\\xeb\\xff\\x10\\x02\\x70\\x8e\\xcf\\xe7\\\n\\x13\\xb1\\x58\\x2c\\x54\\xad\\xb1\\xaa\\x05\\xd1\\x34\\xed\\x66\\x00\\xb7\\x55\\\n\\x6b\\x67\\x12\\x70\\x76\\x7b\\x7b\\x7b\\x32\\x1a\\x8d\\xfe\\xa3\\x1a\\x23\\x55\\\n\\x09\\xe2\\xf7\\xfb\\xaf\\x03\\x70\\x77\\x35\\x36\\x26\\x19\\xe7\\xfa\\x7c\\xbe\\\n\\xe1\\x58\\x2c\\xb6\\xb5\\x52\\x03\\x15\\x77\\x7b\\x55\\x55\\xbd\\x88\\x88\\x9e\\\n\\x82\\xcd\\x1d\\x83\\x49\\x80\\x41\\x44\\x17\\x47\\x22\\x91\\x3f\\x56\\x52\\xb8\\\n\\x22\\x41\\x54\\x55\\x5d\\x4c\\x44\\x61\\x00\\x33\\x2a\\x29\\x3f\\x05\\xf8\\x14\\\n\\x80\\x5f\\x4a\\xf9\\x66\\xb9\\x05\\xcb\\xee\\x11\\xf5\\xf4\\xf4\\xb4\\x11\\xd1\\\n\\x93\\x68\\x88\\x51\\x88\\x19\\x00\\x9e\\xec\\xe9\\xe9\\x29\\xbb\\xfb\\x5f\\xb6\\\n\\x20\\x89\\x44\\xe2\\x5e\\x00\\xa7\\x97\\x5b\\x6e\\x0a\\xd2\\x91\\x48\\x24\\xee\\\n\\x29\\xb7\\x50\\x59\\xb7\\x2c\\xbf\\xdf\\xbf\\x82\\x99\\x5f\\x28\\xb7\\xdc\\x14\\\n\\x86\\x4d\\xd3\\x5c\\x31\\x30\\x30\\xb0\\xb9\\xd4\\x02\\x25\\x37\\x6c\\x67\\x67\\\n\\xe7\\x8c\\xe6\\xe6\\xe6\\x5d\\x00\\x4e\\xa8\\xc8\\xb5\\xa9\\xcb\\xbb\\xe3\\xe3\\\n\\xe3\\x4b\\x77\\xec\\xd8\\xf1\\x69\\x29\\x99\\x4b\\xbe\\x65\\x35\\x37\\x37\\xdf\\\n\\x88\\x86\\x18\\x95\\x70\\x62\\x73\\x73\\xf3\\xf5\\xa5\\x66\\x2e\\xe9\\x0a\\x51\\\n\\x55\\xb5\\x93\\x88\\x24\\xea\\xff\\x2b\\x5f\\xbd\\x92\\x60\\xe6\\xcf\\x97\\xf2\\\n\\x49\\xb8\\xa4\\x2b\\x44\\x08\\x71\\x2b\\x1a\\x62\\x54\\x43\\x0b\\x11\\xdd\\x56\\\n\\x4a\\xc6\\xa2\\x57\\x88\\xa6\\x69\\x1d\\x00\\xb6\\x97\\x92\\xb7\\x41\\x41\\x98\\\n\\x88\\x3a\\x23\\x91\\xc8\\xeb\\x85\\x32\\x95\\x72\\x85\\xac\\x43\\x43\\x0c\\x3b\\\n\\x20\\x66\\xfe\\x61\\xd1\\x4c\\x85\\x4e\\x76\\x75\\x75\\x9d\\x28\\x84\\xd8\\x83\\\n\\xfa\\x0a\\x4c\\x18\\x07\\xb0\\x85\\x99\\xff\\x0e\\x40\\x57\\x14\\x65\\x77\\x3c\\\n\\x1e\\x1f\\x06\\x00\\x45\\x51\\xda\\x14\\x45\\x99\\x6d\\x18\\xc6\\x1c\\x00\\x67\\\n\\x10\\x51\\x0f\\x80\\x2f\\x02\\x98\\xe9\\xa2\\xbf\\x99\\x24\\x00\\x9c\\x22\\xa5\\\n\\xfc\\x57\\xbe\\x0c\\x05\\x9f\\x0b\\x44\\xb4\\x16\\xf5\\x23\\xc6\\xc7\\x00\\x7e\\\n\\x29\\x84\\xf8\\x4d\\x38\\x1c\\x3e\\x50\\x20\\x4f\\x14\\xc0\\x20\\x80\\x2d\\xc0\\\n\\xd1\\x6f\\xfb\\x41\\x00\\x6b\\x89\\x68\\x99\\x33\\xae\\xe6\\xa5\\x05\\xc0\\x6a\\\n\\x14\\xf8\\x54\\x91\\xf7\\x0a\\x09\\x06\\x83\\x4d\\x7b\\xf7\\xee\\x7d\\x17\\x40\\\n\\x7b\\x0d\\x1c\\x2b\\x07\\x06\\xf0\\xdb\\x44\\x22\\xb1\\xae\\xca\\x38\\x5c\\xa1\\\n\\xaa\\xea\\x1a\\x22\\xba\\x1b\\xc0\\x67\\x6c\\xf2\\xad\\x12\\xf6\\x4b\\x29\\x4f\\\n\\x42\\x9e\\xb0\\xd5\\xbc\\x82\\x68\\x9a\\xf6\\x65\\x00\\x2f\\xd4\\xc8\\xa9\\x52\\\n\\x19\\x23\\xa2\\x2b\\x23\\x91\\xc8\\xe3\\x76\\x19\\x54\\x55\\x75\\x21\\x11\\xbd\\\n\\x00\\x17\\xc3\\x92\\x4c\\xd3\\xec\\xcd\\xf7\\xf6\\x5e\\xe8\\x96\\x75\\x79\\x8d\\\n\\xfc\\x29\\x95\\x43\\xcc\\xfc\\x35\\x29\\xe5\\x16\\xab\\x93\\x5d\\x5d\\x5d\\x9f\\\n\\x15\\x42\\x04\\x01\\x74\\x03\\xf0\\x02\\x38\\x0e\\x40\\x1c\\xc0\\x07\\x44\\xb4\\\n\\x83\\x99\\x5f\\x96\\x52\\xbe\\x8c\\xac\\x5f\\xa2\\xae\\xeb\\x43\\x9a\\xa6\\x9d\\\n\\x05\\xe0\\x45\\xb8\\x34\\x26\\x27\\x84\\xb8\\x1c\\x80\\xa5\\x20\\x96\\x57\\xc8\\\n\\xc2\\x85\\x0b\\xa7\\xcd\\x9a\\x35\\xeb\\x43\\xb8\\x37\\xa2\\xcb\\x44\\x74\\x91\\\n\\xd5\\x37\\x85\\x40\\x20\\x30\\x2f\\x99\\x4c\\xfe\\x1c\\xc0\\x45\\x28\\xfe\\x6e\\\n\\xf4\\x0e\\x11\\xdd\\x10\\x89\\x44\\x1e\\xcb\\x3e\\x91\\x0e\\x6b\\x1d\\x40\\x6a\\\n\\x8e\\x89\\xd3\\x8c\\x02\\x38\\x4e\\x4a\\x39\\x9e\\x7d\\xc2\\xb2\\xdb\\x3b\\x7b\\\n\\xf6\\xec\\x33\\xe0\\xe2\\xf0\\x3a\\x11\\xdd\\x6f\\x25\\x86\\xdf\\xef\\x5f\\x95\\\n\\x4c\\x26\\x77\\x01\\x08\\xa2\\xb4\\x17\\xd5\\x93\\x98\\x79\\xa3\\xa6\\x69\\x39\\\n\\x43\\xe1\\xfd\\xfd\\xfd\\xfb\\x98\\xf9\\x1a\\x9b\\x5c\\x2e\\x17\\x0f\\x80\\x80\\\n\\xd5\\x09\\x4b\\x41\\x4c\\xd3\\x3c\\xb7\\xa6\\xee\\x14\\x66\\x7f\\x3c\\x1e\\xbf\\\n\\x39\\x3b\\x51\\xd3\\xb4\\xd5\\xcc\\xfc\\x3b\\xa4\\xfe\\x33\\xe5\\x12\\x3c\\x7c\\\n\\xf8\\xf0\\xb3\\x9a\\xa6\\x4d\\xe8\\x31\\xea\\xba\\xfe\\x04\\x33\\xbf\\x5a\\xa9\\\n\\xa3\\x55\\x62\\xd9\\xc6\\xf9\\x5e\\x0c\\x5d\\x13\\x84\\x99\\x6f\\x19\\x1c\\x1c\\\n\\xfc\\x24\\x33\\x4d\\xd3\\xb4\\x0b\\x00\\x3c\\x88\\x2a\\x5e\\x50\\x89\\xa8\\x17\\\n\\x16\\xdf\\xff\\x85\\x10\\x77\\x56\\x6a\\xb3\\x4a\\xbe\\x64\\x95\\x98\\x23\\x88\\\n\\xa6\\x69\\xd3\\x91\\x7a\\x50\\xba\\xc1\\x3b\\x33\\x67\\xce\\x7c\\x34\\x33\\x61\\\n\\xf9\\xf2\\xe5\\x1e\\x00\\xeb\\x61\\xcf\\x68\\xc1\\xf7\\xbb\\xba\\xba\\x96\\x64\\\n\\x26\\x44\\x22\\x91\\xbf\\x00\\xf8\\xb7\\x0d\\xb6\\xcb\\xa5\\xe7\\x9c\\x73\\xce\\\n\\xc9\\x99\\x29\\x96\\x23\\x08\\x11\\x2d\\x42\\xea\\x05\\xc6\\x0d\\x1e\\x0a\\x85\\\n\\x42\\xc9\\xcc\\x84\\x78\\x3c\\xbe\\x0e\\xc0\\xe7\\x6c\\xb2\\xaf\\x08\\x21\\x7e\\\n\\x94\\x95\\xc6\\x44\\xf4\\x37\\x9b\\xec\\x97\\xc3\\xb4\\x91\\x91\\x91\\x53\\xb3\\\n\\x13\\xad\\x1e\\x8c\\x8b\\x1c\\x70\\xc6\\x12\\xc3\\x30\\x26\\xbc\\x6f\\xa4\\xef\\\n\\xf9\\x57\\xd9\\x5c\\x4d\\xd0\\xef\\xf7\\xff\\x95\\x99\\x8d\\x23\\x09\\xa6\\x69\\\n\\x26\\x88\\x9c\\x1f\\xae\\x4b\\xff\\xf8\\x77\\x64\\xa6\\xe5\\x08\\xc2\\xcc\\x39\\\n\\xaa\\x39\\xc4\\xd0\\xb6\\x6d\\xdb\\xf6\\x64\\xf9\\xb2\\x92\\x88\\xe6\\xda\\x5c\\\n\\xcf\\x74\\x66\\x9e\\xd0\\x0d\\x76\\x43\\x8c\\x74\\xbd\\x39\\x6d\\x6d\\xf5\\x50\\\n\\x77\\x25\\x6a\\x3d\\x3d\\x58\\x38\\x01\\x21\\xc4\\x57\\xdc\\xf0\\xc5\\x41\\x72\\\n\\xda\\x3a\\x47\\x10\\x66\\x3e\\xd1\\x19\\x5f\\x26\\x42\\x44\\x3b\\xb2\\xd3\\x98\\\n\\xd9\\xef\\x86\\x2f\\x4e\\x61\\xd5\\xd6\\x56\\x0f\\x75\\xb7\\x86\\xaa\\x87\\x32\\\n\\x0f\\xd2\\x3d\\x90\\x0e\\x97\\x7c\\x71\\x8a\\x9c\\xb6\\xb6\\xba\\x65\\xb9\\x32\\\n\\x12\\x6a\\x9a\\xe6\\x84\\xae\\xe7\\xe8\\xe8\\xe8\\xf1\\xa8\\x9f\\xa1\\xff\\x5a\\\n\\x91\\xf3\\x92\\x6b\\x25\\x88\\x2b\\x57\\x88\\xa2\\x28\\x1f\\x65\\x1e\\x9b\\xa6\\\n\\x39\\xdb\\x0d\\x3f\\x1c\\x26\\xa7\\xad\\xad\\xba\\xbd\\xae\\x5c\\x21\\xc9\\x64\\\n\\x72\\x2c\\xf3\\x58\\x51\\x94\\x63\\x4c\\xb3\\xec\\x95\\x2e\\xb6\\x00\\xf8\\xb0\\\n\\x82\\xea\\x5b\\x00\\x5c\\x58\\x41\\xb9\\x6a\\xc9\\xb9\\x42\\x26\\x55\\x24\\x09\\\n\\x33\\xdf\\xa8\\xeb\\xfa\\x3f\\xcb\\x2d\\xd7\\xd1\\xd1\\x31\\xbb\\xa5\\xa5\\xe5\\\n\\xa3\\xe2\\x39\\x6b\\x8f\\xd5\\x2d\\xeb\\x13\\x8b\\xb4\\x9a\\x23\\x84\\x98\\x30\\\n\\x1a\\x6b\\x18\\x46\\x5d\\xad\\xd2\\x53\\x23\\x72\\x16\\x22\\xb0\\x12\\xc4\\xad\\\n\\xf5\\xa4\\x26\\x7c\\x97\\x20\\xa2\\x61\\x97\\xfc\\x70\\x92\\x9c\\xb6\\xb6\\xba\\\n\\x65\\xb9\\x22\\x08\\x11\\xcd\\x03\\xb0\\xf3\\xc8\\xb1\\xc7\\xe3\\x79\\x7f\\x74\\\n\\x74\\x74\\x1c\\x65\\xf4\\xb4\\x88\\xe8\\x42\\x55\\x55\\x3b\\x8b\\xe5\\x13\\x42\\\n\\xbc\\x5a\\x2c\\x3e\\xca\\x21\\x8a\\x0b\\xc2\\xcc\\x23\\x2e\\x0d\\x25\\x2c\\xc8\\\n\\x3c\\x08\\x85\\x42\\x63\\x9a\\xa6\\xbd\\x0e\\xa0\\xab\\x0c\\x1b\\xd7\\x97\\xe8\\\n\\xfb\\xf7\\x00\\x1c\\x15\\x44\\x08\\x31\\xbd\\x8c\\x3a\\xec\\xe4\\x60\\x76\\x42\\\n\\xce\\x2d\\x4b\\x08\\xb1\\xd7\\x19\\x5f\\x72\\x50\\xb3\\x13\\x98\\xb9\\xbf\\x16\\\n\\x15\\x99\\xa6\\xf9\\x41\\xe6\\xb1\\xa2\\x28\\x73\\x6a\\x51\\x4f\\x09\\xe4\\xb4\\\n\\xb5\\xd5\\xd0\\xc9\\x5b\\xce\\xf8\\x92\\x53\\xef\\x99\\xd9\\x69\\x42\\x88\\x4d\\\n\\x35\\xaa\\x2b\\x96\\x75\\x7c\\x7c\\x2d\\xea\\x29\\xc1\\x8f\\x9c\\xb6\\xb6\\x12\\\n\\x64\\xb7\\x33\\xee\\xe4\\xb0\\xa8\\xbb\\xbb\\xfb\\xe4\\xcc\\x84\\x78\\x3c\\xfe\\\n\\x2c\\x80\\x0f\\xf2\\xe4\\xaf\\x94\\xb8\\x10\\x22\\x92\\x95\\xb6\\xc0\\x32\\x67\\\n\\x8d\\x11\\x42\\xe4\\xb4\\x75\\x3d\\x09\\x02\\xd3\\x34\\x83\\x99\\xc7\\x83\\x83\\\n\\x83\\x09\\x66\\x7e\\xd8\\xe6\\x6a\\x5e\\xcc\\x5e\\xc9\\x87\\x88\\x56\\xd8\\x5c\\\n\\x47\\xa9\\x14\\x17\\x64\\xd6\\xac\\x59\\xbb\\x91\\x5a\\x62\\xd5\\x71\\x98\\xf9\\\n\\x0a\\x64\\x7d\\xaa\\x25\\xa2\\x9f\\x22\\x15\\x1e\\x6a\\x57\\x1d\\x13\\xbe\\xab\\\n\\x2f\\x5d\\xba\\xb4\\x05\\xee\\xc4\\x10\\xc4\\x87\\x87\\x87\\xf7\\x64\\x27\\xe6\\\n\\x08\\x12\\x0a\\x85\\xc6\\x98\\xb9\\xec\\xb7\\x5d\\x9b\\x58\\xa2\\x69\\xda\\x84\\\n\\x21\\x0c\\x29\\xe5\\x41\\x66\\xfe\\xae\\x4d\\xf6\\x37\\x66\\xbf\\xc9\\xb7\\xb5\\\n\\xb5\\x9d\\x8f\\xca\\x22\\x59\\xaa\\x82\\x88\\x5e\\x1d\\x1a\\x1a\\xca\\xf9\\xe1\\\n\\xe7\\x8b\\x3a\\x79\\xa9\\xc6\\xfe\\x14\\xe2\\xce\\xf4\\xaf\\xf6\\x28\\xba\\xae\\\n\\xff\\x01\\x40\\xd1\\x50\\xfe\\x22\\x6c\\x6d\\x69\\x69\\xf9\\x4e\\x56\\x1a\\x99\\\n\\xa6\\x79\\x63\\x95\\x76\\x2b\\xc5\\xb2\\x8d\\x2d\\x05\\x61\\x66\\x37\\x05\\x59\\\n\\xd2\\xd6\\xd6\\x96\\xd3\\xf8\\x52\\xca\\x7b\\x99\\xf9\\x3a\\x00\\x63\\x16\\x65\\\n\\x0a\\x42\\x44\\x4f\\xb4\\xb6\\xb6\\xae\\x78\\xed\\xb5\\xd7\\xe2\\x99\\xe9\\xaa\\\n\\xaa\\x7e\\xcb\\xad\\x88\\x78\\x22\\xb2\\x6c\\xe3\\x7a\\x0d\\x25\\x35\\x88\\xe8\\\n\\xfc\\x48\\x24\\x92\\x13\\x0d\\xa2\\x69\\xda\\x02\\x00\\x3f\\x03\\xf0\\x75\\x14\\\n\\x5f\\xd6\\xe3\\x75\\x22\\xba\\x3d\\x12\\x89\\x3c\\x9d\\x7d\\x22\\x3d\\xf7\\x45\\\n\\x07\\x70\\xac\\x2d\\x1e\\x97\\x47\\xde\\x50\\xd2\\x42\\xd1\\xef\\x8f\\x02\\xb8\\\n\\xac\\x96\\x5e\\x15\\x61\\xc4\\x34\\xcd\\xf3\\x06\\x06\\x06\\xb2\\xbb\\xa8\\x00\\\n\\x80\\xce\\xce\\xce\\xe3\\x15\\x45\\x09\\xa6\\x7f\\xe1\\x5e\\x00\\xc7\\x31\\xf3\\\n\\x27\\x44\\xf4\\x1e\\x80\\x6d\\xcc\\xfc\\x92\\xae\\xeb\\xfd\\xb0\\x08\\xfb\\x4f\\\n\\x07\\x6a\\x87\\x00\\x2c\\xc9\\x3e\\xe7\\x10\\x1b\\xa4\\x94\\x57\\x58\\x9d\\xa8\\\n\\xf7\\xe9\\x08\\xc3\\x44\\x74\\x99\\x9d\\x2b\\x81\\xa6\\xa7\\x23\\xfc\\x09\\x80\\\n\\x5b\\xd1\\x35\\x05\\xa7\\x23\\xe4\\x9d\\x63\\x38\\x7f\\xfe\\xfc\\xcd\\x00\\x5c\\\n\\x5b\\x72\\x3b\\xcd\\x31\\xcc\\xfc\\x9c\\xaa\\xaa\\x0f\\x04\\x02\\x81\\x6a\\xbf\\\n\\x64\\x0a\\xbf\\xdf\\x7f\\x0d\\x11\\xe9\\x70\\x51\\x0c\\x00\\xfb\\x07\\x06\\x06\\\n\\xf2\\x3e\\xa3\\xf3\\xde\\x83\\x77\\xed\\xda\\xc5\\x5e\\xaf\\x77\\x0e\\x11\\x2d\\\n\\xaf\\x8d\\x5f\\x25\\x43\\x44\\xd4\\x6d\\x9a\\xe6\\xd5\\x3e\\x9f\\x4f\\x99\\x3b\\\n\\x77\\xee\\xee\\x03\\x07\\x0e\\x94\\xbc\\x44\\xab\\xa6\\x69\\xd3\\xbd\\x5e\\xef\\\n\\x25\\x3e\\x9f\\xef\\x21\\x00\\x57\\xe3\\x7f\\x5b\\x5b\\xb8\\xc5\\x83\\xb1\\x58\\\n\\x2c\\xef\\x90\\x50\\xc1\\xa1\\x51\\x4d\\xd3\\x4e\\x40\\x2a\\x1a\\xa4\\x9e\\x82\\\n\\x0d\\x12\\xcc\\xbc\\x99\\x88\\x5e\\x66\\xe6\\x6d\\xa6\\x69\\xee\\x6e\\x6a\\x6a\\\n\\x7a\\x5f\\x4a\\x79\\xa8\\xa3\\xa3\\x63\\xb6\\xa2\\x28\\x5e\\x45\\x51\\x7c\\x86\\\n\\x61\\x74\\xa7\\x03\\xac\\xcf\\x84\\xfb\\x22\\x1c\\x21\\x21\\x84\\x58\\x18\\x0e\\\n\\x87\\xf7\\xe7\\xcb\\x50\\x74\\xac\\x5a\\x55\\xd5\\x5f\\x11\\x91\\x5b\\xf3\\x28\\\n\\x26\\x1b\\xeb\\xa5\\x94\\x6b\\x0b\\x65\\x28\\x3a\\x4f\\x5d\\x51\\x94\\x7b\\x00\\\n\\x24\\x8b\\xe5\\x6b\\x50\\x94\\x84\\x10\\xe2\\xae\\x62\\x99\\x8a\\x0a\\xd2\\xdf\\\n\\xdf\\xbf\\x0f\\xc0\\x93\\xb6\\xb8\\x34\\xb5\\x79\\xbc\\xd0\\xad\\xea\\x08\\xa5\\\n\\xae\\x75\\x72\\x3d\\x5c\\x0a\\x7e\\x98\\x24\\x1c\\x14\\x42\\xac\\x2b\\x25\\x63\\\n\\x49\\x0b\\x58\\x46\\xa3\\xd1\\x11\\x9f\\xcf\\x67\\x02\\xe8\\xad\\xca\\xad\\xa9\\\n\\xcb\\x4d\\x56\\xa3\\x0e\\x56\\x94\\xbc\\x5e\\x96\\xc7\\xe3\\xb9\\x0f\\x19\\x41\\\n\\x08\\x0d\\x4a\\x66\\xbb\\xc7\\xe3\\xb9\\xbf\\xd4\\xcc\\x8d\\x25\\xfe\\x6a\\x0b\\\n\\x33\\x73\\xaf\\xae\\xeb\\x96\\x73\\xed\\xad\\x28\\x6b\\xcd\\xdd\\x68\\x34\\xba\\\n\\xd7\\xe7\\xf3\\x4d\\x03\\xf0\\x85\\xb2\\x5d\\x9b\\x9a\\xdc\\xa9\\xeb\\xfa\\x43\\\n\\xe5\\x14\\x28\\x7b\\x55\\x52\\x8f\\xc7\\x73\\x0b\\x80\\xaa\\x96\\xd3\\x9e\\x0a\\\n\\x10\\xd1\\x66\\x29\\xe5\\xad\\xe5\\x96\\x2b\\x5b\\x90\\x50\\x28\\x94\\x4c\\x26\\\n\\x93\\x97\\xc2\\xfe\\xe0\\x83\\xc9\\xc4\\x81\\xa6\\xa6\\xa6\\xcb\\x50\\xc1\\xbe\\\n\\x88\\x15\\x6d\\x2d\\x91\\xde\\xe7\\xef\\xdb\\x48\\xad\\x5d\\xd5\\x60\\x22\\x09\\\n\\x21\\xc4\\xaa\\xad\\x5b\\xb7\\xbe\\x57\\x49\\xe1\\x8a\\xf7\\xfa\\x90\\x52\\xbe\\\n\\x48\\x44\\x41\\x00\\x46\\xd1\\xcc\\x53\\x87\\x24\\x11\\x05\\xc3\\xe1\\x70\\xc5\\\n\\xf1\\x64\\x55\\x2d\\xa4\\x1f\\x8d\\x46\\x77\\xb7\\xb7\\xb7\\xbf\\x07\\x60\\x65\\\n\\x35\\x76\\x26\\x0b\\xcc\\xbc\\x46\\x4a\\xb9\\xb1\\x1a\\x1b\\x55\\xef\\x6c\\x10\\\n\\x8d\\x46\\xa5\\xcf\\xe7\\x13\\x00\\xce\\xae\\xd6\\xd6\\xff\\x33\\x44\\x74\\xbb\\\n\\x94\\xf2\\xbe\\x6a\\xed\\xd8\\xb2\\xd5\\x44\\x2c\\x16\\x0b\\xf9\\x7c\\xbe\\xf7\\\n\\x01\\x9c\\x8f\\xa9\\xf7\\x8e\\x62\\x02\\x58\\x2b\\xa5\\xbc\\xd7\\x0e\\x63\\xb6\\\n\\x36\\x5e\\x7a\\x4f\\x91\\x8d\\x70\\x6e\\xb7\\x67\\xb7\\x19\\x03\\x70\\xa9\\x94\\\n\\xf2\\x19\\xbb\\x0c\\xda\\xba\\x19\\x4b\\x2c\\x16\\x7b\\xd3\\xeb\\xf5\\x6e\\x27\\\n\\xa2\\x0b\\x30\\xf9\\x45\\x19\\x26\\xa2\\x4b\\xa4\\x94\\xcf\\xd9\\x69\\xd4\\xf6\\\n\\x1d\\xd5\\x74\\x5d\\x7f\\x5e\\x08\\xd1\\x01\\xa0\\xcf\\x6e\\xdb\\x75\\xc4\\x2b\\\n\\x8a\\xa2\\x74\\xd4\\x62\\x1b\\xd6\\x9a\\x6c\\x57\\x14\\x8d\\x46\\x47\\x16\\x2d\\\n\\x5a\\xb4\\x61\\x7c\\x7c\\x9c\\x91\\x5a\\x37\\x77\\xb2\\x3c\\x57\\x4c\\x22\\xba\\\n\\xc3\\xe3\\xf1\\x5c\\xd5\\xd7\\xd7\\x57\\x93\\x29\\x77\\x8d\\xcd\\x89\\x4b\\xc7\\\n\\x91\\xcd\\x89\\x6b\\xbe\\x09\\xa4\\xae\\xeb\\xcf\\x23\\xb5\\xc8\\xca\\xb5\\x70\\\n\\x6f\\x42\\x69\\x35\\x8c\\x00\\xb8\\xd6\\xe3\\xf1\\x2c\\xae\\xb5\\x18\\x40\\x63\\\n\\x83\\xfb\\x42\\x4c\\xde\\x0d\\xee\\xb3\\x09\\x04\\x02\\x73\\x92\\xc9\\xe4\\x75\\\n\\x48\\x4d\\xbe\\x74\\x6b\\xc2\\x65\\x3e\\x0e\\x01\\x78\\x40\\x51\\x94\\x5f\\x54\\\n\\x3a\\x1e\\x55\\x0d\\xae\\x3e\\x6c\\xd3\\x6b\\xf0\\x5e\\x83\\xd4\\x40\\xe5\\x49\\\n\\x6e\\xfa\\x02\\x60\\x1f\\x80\\x47\\x93\\xc9\\xe4\\xaf\\xd3\\x83\\xa7\\xae\\x50\\\n\\x2f\\xbd\\x1f\\x52\\x55\\xf5\\x2c\\x22\\x5a\\x05\\xe0\\x1b\\x00\\x9c\\x5a\\x78\\\n\\xe6\\x23\\x22\\x7a\\x9a\\x99\\x1f\\x91\\x52\\xf6\\x21\\xb5\\xce\\xbc\\xab\\xd4\\\n\\x8b\\x20\\x13\\x58\\xb6\\x6c\\xd9\\x7c\\xc3\\x30\\x7a\\xd3\\x91\\x87\\xe7\\x22\\\n\\xb5\\x8c\\xb8\\x1d\\x7c\\x88\\xd4\\x56\\x17\\x9b\\x9a\\x9a\\x9a\\x36\\x85\\xc3\\\n\\x61\\xb7\\xa6\\x80\\xe7\\xa5\\x2e\\x05\\xc9\\x24\\xbd\\x10\\xe6\\x02\\x66\\x5e\\\n\\x02\\xe0\\x34\\x21\\xc4\\x62\\x66\\x5e\\x88\\xd4\\xd2\\x46\\x99\\x7f\\x40\\xaa\\\n\\x47\\x74\\xf4\\x8f\\x88\\x86\\x98\\x79\\x17\\x33\\xbf\\x29\\x84\\xd8\\xc5\\xcc\\\n\\x7b\\xad\\xe6\\x64\\x34\\x68\\xd0\\xa0\\x41\\x83\\x06\\x93\\x81\\xff\\x02\\x4c\\\n\\x60\\x1d\\xc8\\xb9\\x76\\x75\\xb2\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\\n\\x42\\x60\\x82\\\n\\x00\\x00\\x0d\\x9d\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x64\\x00\\x00\\x00\\x64\\x08\\x06\\x00\\x00\\x00\\x70\\xe2\\x95\\x54\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0e\\xc3\\x00\\x00\\x0e\\xc3\\x01\\xc7\\x6f\\\n\\xa8\\x64\\x00\\x00\\x0d\\x32\\x49\\x44\\x41\\x54\\x78\\x5e\\xed\\x9d\\x7b\\x70\\\n\\x54\\xd5\\x1d\\xc7\\xb1\\x9d\\x3e\\xa6\\xaf\\x69\\xa7\\xd3\\x7f\\xda\\x4e\\xa7\\\n\\x7f\\xb4\\xd3\\x7f\\xfa\\x98\\x69\\x67\\xda\\x4e\\x5f\\xf6\\x41\\x76\\x57\\x51\\\n\\xac\\x76\\xd4\\x3a\\x45\\xa6\\xad\\xda\\xfa\\xa8\\x8f\\x5a\\x2d\\xd6\\x56\\xd1\\\n\\x8a\\xb9\\xbb\\x44\\xa1\\x28\\x88\\xa2\\x88\\xe2\\x83\\x87\\x20\\x42\\x0d\\x04\\\n\\x28\\x04\\x21\\xb9\\x77\\xf3\\x22\\x44\\x42\\x08\\x98\\x17\\x49\\x08\\x81\\xf0\\\n\\x56\\x41\\x5e\\x39\\xfd\\x7d\\x6f\\xce\\xd9\\x3d\\xb9\\xf9\\xed\\xee\\xdd\\xcd\\\n\\xbd\\x70\\x93\\xdc\\xdf\\xcc\\x67\\x12\\xd9\\xb3\\xe7\\xde\\xf3\\xfb\\xe6\\x9e\\\n\\xdf\\x79\\xfc\\xce\\x75\\x5c\\x68\\xa1\\x85\\xe6\\xc6\\x62\\xf1\\xe4\\x0f\\x23\\\n\\xc5\\xd6\\x94\\x91\\x80\\xbc\\xe5\\xd1\\x6d\\x91\\xb8\\x75\\x5f\\x34\\x6e\\x89\\\n\\x91\\x80\\xbc\\xe5\\xd1\\x6d\\xa1\\x20\\x01\\x33\\x5d\\x90\\xa7\\x6b\\xcf\\x65\\\n\\xe4\\xaf\\xcb\\xba\\x53\\x8e\\xe1\\x3e\\x57\\x78\\x5d\\x6e\\xae\\x79\\x2c\\x55\\\n\\x4e\\xde\\xf2\\xe8\\xb6\\x50\\x90\\x80\\x59\\x28\\x48\\xc0\\x2c\\x14\\x24\\x60\\\n\\x16\\x0a\\x12\\x30\\x0b\\x05\\x09\\x98\\x85\\x82\\x04\\xcc\\x74\\x41\\xa6\\x95\\\n\\x76\\x67\\xe4\\xde\\xa5\\xad\\xe2\\xc6\\xf9\\x8d\\x36\\xdc\\xe7\\x0a\\xaf\\xcb\\\n\\x4d\\x2b\\xed\\x1c\\xbb\\x82\\x04\\x91\\xdb\\x17\\x36\\xa6\\x7e\\x97\\xb7\\x3c\\\n\\xba\\x2d\\x14\\x24\\x60\\xa6\\x0b\\xd2\\x7e\\xb4\\x3f\\x70\\xcc\\x2d\\x4f\\xc7\\\n\\x1a\\x79\\xcb\\xa3\\xdb\\x42\\x41\\x02\\x66\\xa1\\x20\\x01\\xb3\\x50\\x90\\x80\\\n\\x59\\x28\\x48\\xc0\\x2c\\x14\\x24\\x60\\x16\\x0a\\x12\\x30\\x2b\\x54\\x90\\x96\\\n\\xc3\\xfd\\x62\\x37\\xc1\\x7d\\x96\\x8b\\xa6\\x3e\\xfe\\xdf\\x39\\x42\\x41\\x5c\\\n\\xd0\\x4a\\x94\\xef\\xe9\\x17\\x1b\\xda\\xe9\\xf7\\x23\\x7c\\x99\\x4c\\x6c\\xdb\\\n\\xdf\\x2f\\x56\\xb7\\xf4\\x8b\\xad\\xbd\\xfc\\xe7\\x4e\\x42\\x41\\x72\\xd0\\x46\\\n\\x6c\\xee\\x1c\\x70\\x2a\\x78\\x8b\\x84\\x69\\x73\\x29\\x4a\\x23\\x3d\\x19\\x6b\\\n\\x5a\\x07\\xbe\\xb7\\x86\\xd8\\x7e\\x80\\x2f\\xa7\\x33\\xa6\\x05\\x71\\xd3\\x95\\\n\\x58\\xdd\\x69\\x31\\x14\\x95\\x5d\\x7c\\x59\\x9d\\xe6\\x43\\xfd\\xa2\\x4c\\x8a\\\n\\xa1\\x28\\x23\\x76\\x1e\\xe4\\xcb\\x2b\\xc6\\xb4\\x20\\x6b\\xdb\\x28\\x2e\\x90\\\n\\xe3\\x38\\xc7\\x80\\xda\\x7d\\x83\\x1d\\xaa\\x53\\xb5\\x97\\xff\\x0e\\x78\\x87\\\n\\x62\\xcd\\x3a\\xaa\\x9b\\xfb\\x1e\\xfe\\x1d\\x9f\\x73\\xdf\\x03\\xf3\\x36\\xef\\\n\\x1b\\xbb\\x82\\xc0\\x41\\xeb\\x29\\x2e\\x20\\x60\\x3b\\x1d\\xa3\\xfa\\xfe\\x6c\\\n\\x70\\x71\\x01\\xf1\\x66\\x63\\x07\\x5f\\x5e\\x91\\x29\\x16\\xe1\\x9a\\x8b\\xeb\\\n\\xc7\\xf0\\x7e\\x88\\x72\\xd0\\x26\\x47\\x5c\\xd0\\xfb\\xfe\\x6c\\x38\\xe3\\x82\\\n\\x33\\xde\\x64\\xc3\\x19\\x8b\\xd4\\x35\\x17\\x6d\\x0d\\x05\\xb1\\x51\\x71\\x81\\\n\\xeb\\xfb\\xb3\\x81\\xb8\\xa0\\x62\\x11\\x17\\x6f\\xb2\\xc1\\x5d\\x33\\x14\\x44\\\n\\xc3\\xa2\\xb8\\xb0\\x3e\\x43\\xdf\\x9f\\x0d\\xc4\\xa2\\x64\\x9e\\x62\\x28\\x20\\\n\\xa2\\x1e\\x6f\\x42\\x41\\x02\\x46\\x28\\x48\\xc0\\x08\\x05\\x09\\x18\\xa1\\x20\\\n\\x2e\\xc1\\xa8\\xc8\\xed\\x08\\x4a\\x07\\x23\\xb1\\xea\\x1e\\x77\\xa3\\x36\\x10\\\n\\x0a\\xe2\\x82\\x0d\\x34\\xaf\\xc0\\xbc\\x41\\xad\\x69\\x71\\x65\\x32\\xa1\\xe6\\\n\\x2a\\x6e\\xe6\\x35\\x20\\x14\\x24\\x07\\xce\\xd9\\x7c\\xb6\\x59\\xb8\\x13\\xe7\\\n\\x6c\\x3e\\xdb\\xcc\\x5f\\x31\\xa6\\x05\\xc9\\x35\\x6f\\xd0\\xe7\\x18\\x3a\\x6e\\\n\\xe6\\x2a\\x99\\xd6\\xbb\\x72\\x5d\\x73\\x4c\\x0b\\x92\\x6d\\x66\\x9d\\x6b\\x75\\\n\\x36\\xdb\\x6c\\x3e\\xdb\\x8a\\x70\\xae\\x6b\\x2e\\xb0\\x0e\\x8e\\x5d\\x41\\xe0\\\n\\xa0\\x4c\\x71\\xc1\\xcd\\xfe\\x05\\x17\\x17\\xdc\\xec\\x99\\xe0\\x73\\x94\\x73\\\n\\x7e\\x17\\xd7\\x0c\\xf7\\x43\\x08\\x2c\\x2e\\x62\\x91\\x51\\x39\\x26\\xdb\\x4a\\\n\\xae\\x13\\x3d\\x2e\\xe4\\x5a\\xc9\\xd5\\x71\\xc6\\x22\\x75\\xcd\\x50\\x10\\xc9\\\n\\x2e\\x19\\x17\\xdc\\xec\\x75\\x38\\x41\\x5c\\xc8\\x14\\x6f\\xb2\\xa1\\x62\\x91\\\n\\x7e\\xcd\\x50\\x10\\x0d\\x6c\\x1e\\xb9\\xdd\\x0d\\xd4\\x41\\x5c\\xc8\\xb5\\xf1\\\n\\x94\\x09\\xe7\\x35\\x43\\x41\\x02\\x46\\x28\\x48\\xc0\\x08\\x05\\x09\\x18\\xa1\\\n\\x20\\x01\\x23\\x14\\x24\\x60\\xe8\\x82\\x44\\x0d\\xeb\\xf7\\x91\\x62\\xf3\\x6b\\\n\\xf2\\xd6\\x47\\xa7\\x8d\\x28\\x41\\x24\\x91\\xb8\\xd9\\x13\\x31\\xac\\x25\\x11\\\n\\xc3\\xbc\\x3d\\x62\\x24\\xbf\\x33\\x75\\xaa\\xf8\\x90\\x6c\\xce\\xc8\\xb7\\xa0\\\n\\x0b\\x52\\xd6\\x74\\x54\\xdc\\xb3\\x68\\xa7\\xf8\\xf5\\x8c\\xea\\x21\\xc2\\xa4\\\n\\x31\\x8f\\x92\\x38\\x6f\\xa2\\x2d\\x45\\x8f\\x9a\\x3f\\x8e\\xcd\\x5a\\xfd\\x31\\\n\\xd9\\xbc\\x91\\x67\\x41\\x17\\x44\\x81\\xb9\\xc9\\x96\\xd6\\xf7\\xc4\\xf3\\x5b\\\n\\x7a\\xc4\\xfd\\xaf\\xed\\x16\\xd7\\x3c\\x59\\xeb\\x10\\x25\\x0d\\x3d\\x3d\\x27\\\n\\xe8\\xe7\\x5b\\xf4\\x24\\x3d\\x12\\x8d\\x57\\x46\\x27\\x26\\x2a\\x3e\\x2d\\x9b\\\n\\x1b\\x7c\\x1b\\x29\\x82\\x70\\x54\\xed\\x39\\x21\\x5e\\xa9\\xda\\x2f\\x1e\\x5a\\\n\\xd1\\x22\\x26\\xcd\\xad\\x1f\\x22\\x8c\\x82\\x04\\x3a\\x4b\\x4f\\x51\\x2d\\xc5\\\n\\xa0\\x99\\x31\\xc3\\xbc\\x32\\xf6\\xe8\\xe6\\x2f\\xc8\\xe6\\x07\\xcf\\x46\\xb2\\\n\\x20\\x4e\\xb6\\xed\\x3d\\x25\\x96\\xd5\\xf5\\x89\\x78\\x69\\xbb\\xb8\\xe1\\xd9\\\n\\x06\\x11\\x4b\\x0c\\x15\\x27\\x85\\x61\\x36\\x11\\xf3\\xa2\\x89\\xe4\\xf5\\x24\\\n\\xd4\\x57\\xa5\\x3b\\x2e\\xbc\\xe9\\x82\\xd4\\xef\\xfd\\x40\\xac\\x6a\\x38\\x2c\\\n\\x5e\\xa8\\xdc\\x67\\x07\\xd3\\x19\\x6b\\xf7\\xd8\\xcc\\xd9\\xd8\\x65\\x77\\x15\\\n\\xa5\\xdb\\x8f\\x88\\xda\\xae\\x93\\xac\\x33\\x82\\x48\\xd3\\x81\\x33\\x76\\x7b\\\n\\x66\\x52\\x1b\\x6e\\x7b\\xb1\\x51\\x4c\\x28\\xa9\\x1a\\x2a\\x8c\\x84\\x62\\x50\\\n\\x17\\x09\\xf3\\x0a\\x3d\\x4d\\xb7\\x14\\x3d\\x5a\\xf9\\xcd\\x71\\x42\\x5c\\x24\\\n\\x5d\\x74\\x7e\\x4d\\x17\\xc4\\x2d\\x57\\x3f\\x51\\x2b\\xfe\\xb5\\xfc\\x1d\\xb1\\\n\\xa4\\xfa\\x80\\x68\\xee\\x3b\\xc3\\x3a\\x23\\x88\\xec\\x3e\\x74\\x56\\xac\\x6b\\\n\\x3e\\x2e\\x16\\xd5\\x1f\\x17\\xc5\\xab\\xbb\\xc4\\x35\\x4f\\x6c\\x65\\xdb\\x67\\\n\\x63\\x58\\x87\\x48\\xa4\\x95\\x91\\x78\\xf2\\x1e\\xbc\\x97\\xf2\\x7b\\xcf\\xd4\\\n\\x7e\\x44\\xba\\xcc\\x5f\\x2b\\x44\\x10\\x9d\\x89\\x8f\\x57\\x8b\\x7f\\xbf\\xd1\\\n\\x2a\\x92\\x1d\\xef\\xb3\\x4e\\x08\\x22\\x5b\\xb4\\x0d\\xb1\\x35\\x2d\\x67\\xc5\\\n\\x6b\\x0d\\xef\\x8a\\x19\\xeb\\x7b\\xc4\\xe4\\x67\\x1a\\xd8\\x36\\xda\\x18\\xe6\\\n\\x7b\\x14\\x87\\x36\\x90\\x50\\x0f\\x15\\x19\\xc9\\x5f\\x16\\x95\\x6c\\xfb\\xa4\\\n\\x74\\xa1\\xb7\\xc6\\x09\\x72\\x49\\x22\\x29\\x7e\\x33\\xab\\x56\\x4c\\x7e\\x7a\\\n\\x9b\\xcd\\x6f\\x67\\xd7\\x65\\x7d\\xdc\\x01\\xfa\\xeb\\x07\\x5e\\x7f\\xc7\\xee\\\n\\xf6\\x38\\x27\\x04\\x09\\x9c\\xfc\\xca\\xb4\\xbb\\x59\\xd6\\x7a\\x4e\\xac\\x68\\\n\\x7c\\x5f\\xcc\\xde\\xb4\\x5f\\xdc\\x34\\x3f\\xfd\\x16\\x89\\x21\\x18\\xe6\\x69\\\n\\x7a\\x82\\x2c\\xfa\\x59\\x12\\x4d\\x58\\x13\\x2f\\x9e\\x5a\\xfe\\x71\\xe9\\xd2\\\n\\xe1\\x99\\x2e\\xc8\\x6b\\xb5\\x7d\\xa2\\xae\\x9b\\x8f\\x11\\x18\\x76\\x56\\x77\\\n\\x9e\\x14\\x2b\\xea\\x0f\\xda\\x41\\x73\\xd2\\x53\\xfc\\xe3\\x8e\\x27\\x66\\x3e\\\n\\xc5\\x1b\\x2c\\xc1\\x73\\xf5\\x04\\x85\\x3a\\x17\\x09\\x16\\x48\\xa3\\xad\\xeb\\\n\\xfe\\x40\\x2c\\xa9\\x39\\x20\\x8a\\xff\\xdb\\x26\\xfe\\x30\\x8f\\x06\\x0a\\x4c\\\n\\x9b\\x01\\x89\\xd3\\x47\\x3c\\x48\\xc2\\x7c\\x6a\\xc0\\xb3\\x05\\x9a\\x2e\\x08\\\n\\x77\\xe3\\x99\\x80\\xc3\\xd7\\xef\\x3c\\x66\\x3f\\x15\\x97\\x4c\\x4f\\x0e\\xb9\\\n\\x41\\x4c\\xe6\\xb6\\xf7\\x9e\\x66\\xbf\\x1b\\x08\\x32\\x6c\\x1b\\x3b\\x49\\x3a\\\n\\x76\\x4b\\x1b\\xf7\\x9f\\x16\\x2b\\x1b\\x0e\\x89\\xc7\\xd6\\x74\\x88\\x9b\\x17\\\n\\x6c\\x17\\x97\\x3a\\xda\\x8e\\x55\\x84\\x98\\x61\\x4d\\x92\\xee\\xcd\\xdf\\x0a\\\n\\x15\\x44\\xa7\\xba\\xf3\\x84\\x3d\\x59\\xd3\\x6f\\x0c\\xfc\\x6e\\xce\\x56\\x7b\\\n\\xae\\xc0\\x7d\\x27\\x08\\xec\\xe8\\xe3\\x45\\x18\\x04\\x75\\x6d\\xd9\\x36\\xdb\\\n\\x9a\\x0f\\x9e\\x15\\xcb\\xb7\\x1e\\x14\\x7f\\x9a\\xff\\xf6\\xa0\\xb6\\x63\\x69\\\n\\x67\\x82\\xb1\\xe5\\x73\\xd2\\xcd\\xee\\xcd\\x0b\\x41\\x14\\xa5\\xdb\\x0f\\x8b\\\n\\x6b\\x9f\\xac\\x1b\\x74\\x63\\x18\\x91\\x6d\\x6e\\x79\\x97\\x2d\\x1f\\x04\\xcc\\\n\\x2e\\x46\\x04\\x07\\x48\\xfa\\xc8\\xd5\\x05\\xe3\\xf3\\xa5\\xd4\\xb5\\xa1\\xbd\\\n\\xa9\\xf6\\x1b\\xd6\\x9e\\xd8\\x74\\xeb\\xdb\\xd2\\xd5\\xee\\xcc\\x4b\\x41\\xc0\\\n\\xf6\\x7d\\xa7\\xc4\\x9d\\x2f\\x35\\xa5\\x6f\\x8a\\xc0\\x00\\xa1\\x3a\\xa0\\x4f\\\n\\x0a\\x12\\x3a\\x90\\xfc\\xc7\\x09\\xa1\\x53\\xef\\x22\\xeb\\x06\\x34\\x52\\x37\\\n\\x3d\\x65\\xc9\\xae\\x54\\xdb\\xa9\\x0b\\x3b\\x46\\x93\\xcf\\x9f\\x4a\\x77\\xe7\\\n\\x36\\xaf\\x05\\x01\\x2d\\x87\\xce\\xd9\\xf3\\x14\\x55\\x2f\\xc0\\xd2\\xc6\\x0e\\\n\\xea\\x7f\\xb9\\xf2\\x17\\x1a\\x37\\x67\\x59\\xd6\\x52\\xd7\\xc5\\x1d\\xf5\\xcb\\\n\\xc4\\x9c\\x0d\\x5d\\xa9\\xb6\\x43\\x94\\xa2\\x62\\xeb\\x07\\xd2\\xe5\\xd9\\xcd\\\n\\x0f\\x41\\x00\\x46\\x65\\x0f\\x3a\\x44\\xc1\\x5f\\x0e\\x57\\xf6\\x42\\x81\\xd8\\\n\\x80\\x24\\x3e\\x4e\\x00\\x8e\\x4a\\x12\\x8e\\xab\\x27\\x13\\x0b\\x2a\\x7a\\x52\\\n\\xa3\\x32\\x1a\\x81\\xed\\xa3\\x09\\xe6\\x97\\xa5\\xdb\\x33\\x9b\\x5f\\x82\\x00\\\n\\x3c\\x29\\xb7\\x2f\\xdc\\x31\\x48\\x94\\x97\\xac\\x5e\\xb6\\xec\\xf9\\x04\\xb9\\\n\\xc9\\x15\\x2e\\x62\\x07\\x07\\x06\\x02\\x5c\\x9d\\x99\\x58\\x50\\x91\\x3e\\x45\\\n\\x4c\\xbe\\x36\\xaf\\x5e\\xba\\xf4\\xc3\\xd2\\xf5\\xbc\\xf9\\x29\\x08\\x68\\xe8\\\n\\x39\\x35\\x28\\xd0\\x5d\\x35\\xb3\\xc6\\x8e\\x33\\x5c\\x59\\xbf\\x41\\x97\\x83\\\n\\x61\\xac\\xdb\\xa3\\x10\\x1c\\x78\\xa2\\xb8\\xba\\xb3\\x81\\x95\\x0c\\xd5\\x7e\\\n\\xe2\\x6e\\xe9\\x7a\\xde\\x74\\x41\\x10\\x90\\xb8\\x0a\\x87\\x0b\\x16\\xf8\\xb4\\\n\\x1b\\x12\\xd3\\x56\\xb5\\xb1\\xe5\\xfc\\x02\\xdd\\x67\\x4d\\x1e\\x67\\x52\\x38\\\n\\x90\\xc0\\x87\\x3a\\x90\\x6a\\xcb\\x5d\\x23\\x1b\\x58\\xef\\x53\\x13\\x69\\xc4\\\n\\x93\\x5f\\x15\\x57\\x7d\\x5e\\xba\\x7f\\xa8\\x45\\xe3\\xe6\\x9f\\x95\\xa3\\xac\\\n\\x76\\xff\\xd6\\xa3\\xa6\\x2c\\x4e\\x8f\\x3c\\x2e\\x2d\\x49\\x9e\\xb7\\x25\\x16\\\n\\x8c\\x8e\\xdc\\x1e\\x97\\xe0\\x80\\x88\\x08\\xfa\\xf9\\x04\\x74\\x0e\\x4c\\x26\\\n\\x55\\xfb\\x69\\x8e\\x92\\x90\\xee\\x1f\\x6a\\x51\\x23\\x39\\x41\\x15\\xc4\\x76\\\n\\x29\\x57\\x99\\x17\\x60\\x82\\xa8\\xef\\x4f\\x4c\\x2f\\xed\\x60\\xcb\\x79\\x0d\\\n\\xba\\x28\\xce\\xd1\\xb9\\x40\\xe6\\x3d\\x52\\x5a\\x0b\\x7d\\xe3\\x11\\x07\\x66\\\n\\xf6\\x76\\xfb\\x0d\\xeb\\x50\\xc6\\xb5\\xaf\\xf1\\x09\\xeb\\xeb\\xca\\x49\\xcf\\\n\\x6d\\xd9\\xcb\\x56\\xe4\\x15\\xff\\x5c\\x96\\x9e\\xcd\\x5f\\xf5\\x9f\\x1a\\xfa\\\n\\xab\\x3b\\xc7\\x96\\xf3\\x12\\x74\\x57\\xf9\\x1e\\xed\\xc6\\xf1\\x88\\x42\\x53\\\n\\x61\\xb3\\xb1\\x98\\x26\\x8e\\xaa\\xfd\\xd1\\xe2\\xca\\xeb\\xa4\\x04\\x0e\\x13\\\n\\xe2\\x22\\x28\\x86\\x42\\xf7\\x2c\\x6a\\x66\\x2b\\xf2\\x8a\\x75\\x3b\\x8f\\xa6\\\n\\x6f\\x88\\xc0\\x63\\xcc\\x95\\xf3\\x1a\\x9c\\x6b\\xe1\\x1c\\xef\\x04\\x6b\\x5b\\\n\\x38\\xe7\\xc2\\xd5\\xe1\\x05\\xbb\\x0f\\x9e\\x4d\\x25\\x6b\\xd0\\x30\\x78\\x91\\\n\\x54\\x60\\xa8\\xd1\\x87\\xcb\\x51\\x08\\x2b\\xb5\\x7e\\xfe\\xd5\\x62\\x79\\xe1\\\n\\xba\\xd9\\xe9\\x55\\xe2\\x47\\x56\\xb6\\xb2\\xe5\\xfc\\xc0\\xcd\\x01\\x55\\x94\\\n\\xe1\\xbe\\xeb\\x25\\xf7\\xd2\\x1f\\xfd\\x40\\xfb\\xcd\\xde\\x8c\\xbb\\x92\\x24\\\n\\xc8\\x64\\xe5\\x24\\x2c\\x94\\x71\\x15\\x79\\x85\\xf1\\x66\\x5b\\x4a\\x90\\x49\\\n\\x4f\\xd5\\xb3\\x65\\xfc\\x00\\xb1\\x20\\xd7\\xb1\\x3b\\xd0\\xe0\\xe2\\x1d\\x5e\\\n\\xc3\\x01\\x5b\\x13\\xaa\\xfd\\xd4\\x33\\xf1\\x7b\\xf9\\x58\\xc3\\xa7\\xc8\\x7f\\\n\\x1c\\x85\\x10\\x78\\xb8\\x8a\\xbc\\x02\\x82\\xa7\\x6e\\x88\\x40\\x62\\x02\\x57\\\n\\xce\\x0f\\xdc\\x1c\\x32\\x45\\xbc\\xc9\\xf7\\x2d\\x79\\xf9\\x80\\x05\\xd8\\x54\\\n\\xfb\\x0d\\x73\\xbc\\x94\\x60\\xa8\\x91\\x5a\\x4f\\xaa\\x82\\x6b\\x7d\\x1c\\x6d\\\n\\xd5\\x75\\x9f\\x4c\\xdf\\x10\\x81\\xb8\\xc2\\x95\\xf3\\x85\\x02\\xf7\\x40\\xbc\\\n\\xa4\\xa6\\x4b\\x6b\\xbf\\x61\\xde\\x38\\xe0\\x7d\\xc6\\xb0\\xce\\x42\\x4f\\xc9\\\n\\x07\\x28\\x88\\x14\\x1a\\x2c\\x7b\\x70\\x15\\x0e\\x17\\x8c\\x7a\\x2e\\x7f\\x2c\\\n\\xbd\\x1d\\xbc\\xd0\\x3c\\xbf\\x4b\\x29\\x4d\\x34\\x7a\\xe2\\x44\\x18\\x04\\x75\\\n\\x6d\\x7e\\x8c\\xb2\\x00\\x32\\x61\\x54\\xdb\\x91\\x40\\x21\\xdd\\xcf\\xdb\\x40\\\n\\xa6\\xdf\\x40\\xe1\\x59\\xeb\\x3a\\xd9\\x0a\\xbd\\xe0\\x7a\\x2d\\xa9\\xed\\xa9\\\n\\x8d\\x5d\\x6c\\x19\\x3f\\xf1\\x6a\\x0f\\xa4\\x10\\x06\\x0b\\x62\\xdd\\x27\\x5d\\\n\\xcf\\xdb\\xd5\\x53\\x1b\\x3f\\x4a\\x85\\xb6\\xa2\\x30\\x12\\x1d\\xfc\\xea\\xba\\\n\\x6e\\x7a\\x2e\\xbd\\xbb\\x86\\x9c\\x29\\xae\\x8c\\x5f\\xe0\\x70\\x29\\x26\\x7c\\\n\\x9c\\x08\\x4e\\xdc\\xee\\x81\\xe4\\x03\\x96\\x51\\x52\\x82\\xb8\\xf9\\xdf\\xc9\\\n\\x5e\\x62\\x98\\xdf\\x52\\x5d\\x17\\xc6\\xcc\\x1b\\x77\\x1d\\x67\\x2b\\x1e\\x0e\\\n\\xb7\\xbe\\x90\\xce\\xe6\\x88\\x97\\xb6\\xb3\\x65\\xbc\\xa6\\x85\\xba\\x4a\\xbc\\\n\\x63\\x05\\x87\\x51\\x39\\xe7\\x73\\xe4\\xbb\\x07\\xe2\\x06\\x3d\\x86\\xc4\\xe2\\\n\\xe6\\x0d\\xd2\\xed\\xd9\\x2d\\x5a\\x6c\\xde\\xac\\xbe\\x74\\xe5\\xcc\\x1a\\xcf\\\n\\xb7\\x60\\x11\\xa3\\x54\\xfd\\x7e\\x3f\\x21\\x88\\x59\\xc8\\x30\\x71\\xb3\\x2b\\\n\\xc8\\x51\\x91\\xe7\\x1e\\x48\\x2e\\xca\\x77\\x1f\\x4f\\xb5\\x1d\\xe9\\x43\\xd2\\\n\\xe5\\xb9\\x8d\\xbe\\xf0\\x80\\xfa\\x22\\x82\\xb0\\x97\\xc1\\x17\\xc9\\x0f\\xaa\\\n\\xee\\xa7\\xcb\\xbb\\xd9\\x32\\xc3\\x05\\xfd\\x7f\\x03\\x75\\x39\\x85\\xbc\\x11\\\n\\x4f\\x81\\xf5\\x2c\\x93\\x04\\xf1\\x32\\x96\\x20\\xd5\\x4a\\xb5\\x3d\\x9a\\x30\\\n\\xbf\\x2b\\xdd\\xed\\xce\\xe8\\x4b\\x77\\x53\\xa0\\x3f\\xa7\\x2a\\xc0\\x5a\\x14\\\n\\xf6\\x37\\xb8\\x0b\\xb9\\x05\\x2b\\x01\\x7a\\xda\\x10\\xd6\\x77\\xb8\\x72\\xc3\\\n\\x01\\x4b\\x25\\xb9\\xde\\x84\\x9a\\x0b\\xcc\\xda\\x9b\\x7d\\x18\\x69\\x3d\\x5e\\\n\\xb6\\x67\\xa0\\xed\\x86\\x79\\xba\\xa0\\x73\\x2c\\x91\\x44\\xe5\\x65\\x14\\xe8\\\n\\x0f\\x2b\\x07\\xe2\\x69\\x29\\x59\\xdd\\x51\\xb0\\x30\\x66\\xfb\\xfb\\x29\\x31\\\n\\x80\\xd7\\x31\\xaa\\xd0\\xd5\\x5d\\x05\\x46\\x57\\x18\\x1a\\x73\\x75\\x7b\\x81\\\n\\xda\\x41\\xc5\\xe0\\x49\\xba\\x38\\x7f\\x9b\\x30\\xcd\\xfc\\x52\\xc4\\x30\\xdf\\\n\\xd4\\x1d\\x79\\x59\\x49\\x95\\xbd\\x2e\\x83\\xae\\x2c\\x9f\\xbd\\x8d\\x97\\xad\\\n\\xde\\x54\\x1d\\x78\\x52\\xbc\\x4e\\xd6\\x76\\x95\\x6b\\xc5\\x80\\x77\\x80\\xbd\\\n\\xed\\xf3\\xb2\\xc9\\x4e\\x1a\\xf2\\xaa\\xc4\\x3a\\xf2\\xe7\\x1c\\xe9\\xde\\xc2\\\n\\x2d\\x52\\x6c\\xc6\\xd4\\xb0\\xd8\\x09\\x76\\xc4\\xfe\\xb1\\x74\\x97\\x98\\x5b\\\n\\xde\\x65\\x2f\\x0f\\x64\\xda\\xa6\\xd5\\xb3\\x51\\x90\\x5c\\xc6\\x95\\x19\\x2e\\\n\\x15\\x2e\\x16\\x12\\x15\\xd8\\xbc\\xb2\\x87\\xb7\\x3e\\x2e\\x97\\x28\\xf4\\xf8\\\n\\x51\\x54\\x9c\\x8c\\x48\\xb7\\x0e\\xdf\\xa2\\x86\\xf5\\x73\\xaa\\xf4\\x45\\x3b\\\n\\xe7\\x48\\x5e\\x80\\x03\\x2b\\xbb\\x7f\\x5f\\xdc\\x2c\\x66\\xff\\xaf\\xd3\\xde\\\n\\xc6\\xad\\xe9\\x3e\\x21\\xae\\xd0\\xce\\x0a\\xa2\\x3f\\xe5\\x6e\\x7c\\xb8\\xe0\\\n\\x3d\\x2d\\x98\\x6d\\x73\\x02\\xe8\\x60\\x7f\\xbc\\x90\\x2d\\xd9\\x42\\xb9\\xf3\\\n\\xa5\\x54\\x77\\x75\\xd8\\x97\\xe3\\x0d\\x98\\x48\\xc6\\xe2\\xd6\\x4f\\x28\\x40\\\n\\xdd\\x4f\\x17\\x79\\x9d\\xe6\\x2f\\x1d\\xca\\xd9\\x99\\x80\\x20\\x13\\x67\\x0c\\\n\\x2c\\x9d\\xcc\\xdb\\xd4\\x9d\\x31\\xb9\\x7b\\xb8\\xe0\\x9d\\xc3\\x9c\\x08\\x3a\\\n\\xd8\\x9e\\xf5\\x72\\x47\\x30\\x1b\\x9b\\x68\\xb8\\x9b\\x4a\\xd4\\x36\\xcc\\x92\\\n\\x01\\x0f\\x9e\\x07\\xc3\\x06\\x3e\\x89\\x53\\x44\\xdc\\x47\\x2c\\x25\\x91\\x5a\\\n\\x74\\x41\\x38\\xb0\\x7b\\x78\\xd7\\xcb\\x4d\\xf6\\x9c\\x64\\x79\\x5d\\x9f\\x9d\\\n\\x2b\\xcc\\x35\\x2a\\x1f\\x30\\xa1\\x73\\xb3\\xdc\\x5e\\xc8\\xdb\\x8e\\xf2\\x05\\\n\\xc3\\x66\\x2d\\x9b\\xf3\\xcc\\xf8\\xf8\\x96\\xaf\\x48\\x77\\x5d\\x18\\xbb\\x78\\\n\\x66\\xf9\\x67\\x23\\x89\\xe4\\x2f\\x48\\x9c\\xbf\\x91\\x48\\xaf\\xd2\\xcf\\x66\\\n\\x7d\\x38\\xcd\\x71\\xe5\\x8c\\x1a\\x71\\x07\\x8d\\x48\\x90\\x65\\x8e\\x9c\\x59\\\n\\x24\\x60\\x60\\x92\\xc7\\x35\\x38\\x13\\xc8\\x12\\xe1\\x44\\x70\\xe2\\xe7\\xa8\\\n\\x0a\\x20\\x17\\x4d\\xb5\\x8b\\x82\\xf9\\x2c\\xe9\\x96\\x60\\x19\\x8e\\x2a\\x23\\\n\\xe7\\x95\\x84\\xb9\\x8b\\x6e\\x72\\x21\\xd1\\x48\\x42\\x9d\\xd5\\x45\\x71\\x82\\\n\\x1d\\xcd\\xdb\\x5e\\x68\\x14\\x89\\xd2\\x76\\xf1\\x6a\\xf5\\x7e\\x51\\xd9\\xf6\\\n\\x9e\\x68\\xcd\\xb2\\xc3\\x89\\xf8\\xe0\\x26\\xe3\\x04\\x73\\x16\\x3f\\x16\\x12\\\n\\x01\\x86\\xf5\\x6a\\x75\\x9b\\xda\\xda\\x13\\x9b\\x9a\\xfc\\x8c\\x74\\x41\\xf0\\\n\\xed\\xb2\\xa9\\xb5\\x9f\\x88\\xc4\\x2b\\x7f\\x44\\x37\\xfe\\x17\\xea\\x67\\x9f\\\n\\x8f\\xc6\\xcd\\x6d\\xd4\\x90\\x33\\xba\\x28\\x4e\\xd0\\x58\\x6c\\xaa\\xe1\\x40\\\n\\xcd\\xcb\\xc9\\x5e\\x7b\\x99\\x47\\xdf\\x86\\xae\\x77\\xf9\\x3a\\x5a\\x3f\\x16\\\n\\x12\\x71\\xae\\x1e\\x89\\xe6\\xb8\\x4f\\xfb\\x8f\\x8d\\x06\\x43\\xb2\\xa9\\x23\\\n\\xd7\\x90\\x2e\\x43\\x02\\x7d\\xdf\\x5e\\x5f\\x33\\xcc\\x79\\xd4\\xb0\\x3a\\xfa\\\n\\xef\\x53\\x4e\\x61\\x74\\x90\\xf7\\x85\\x15\\x65\\x64\\x0c\\x3e\\x5f\\xd1\\x23\\\n\\xca\\x76\\x9f\\xce\\x99\\x24\\x87\\xb5\\x2e\\x2c\\x40\\x72\\x8e\\x2d\\x04\\x24\\\n\\x70\\xa0\\xdb\\xb5\\xef\\xc9\\x30\\xfb\\x63\\x09\\xeb\\x56\\xd9\\xa4\\xd1\\x67\\\n\\x18\\x32\\x62\\x1d\\x28\\x62\\x54\\xfe\\xd1\\xde\\xe9\\x34\\xac\\x4a\\x6a\\xf8\\\n\\xbb\\xba\\x28\\x4e\\x62\\xd3\\x2d\\x71\\xeb\\xc2\\x26\\xfb\\x70\\x27\\x5e\\x3d\\\n\\x5b\\xba\\xeb\\x94\\x58\\xdb\\x7a\\x6e\\x90\\x28\\x18\\x99\\x71\\xce\\xcd\\x07\\\n\\x1c\\xfb\\x43\\x92\\xb9\\x36\\xa2\\xea\\xa7\\x9f\\x77\\xc8\\x5b\\x1f\\x3b\\x86\\\n\\x17\\xd0\\x44\\x13\\x15\\xdf\\x40\\xbe\\x13\\x3d\\x45\\x09\\x1a\\x3c\\xac\\x27\\\n\\xa1\\xec\\xf4\\xa6\\x6c\\xe0\\xe4\\x6d\\x71\\x69\\xa7\\x78\\xb1\\xea\\x88\\x58\\\n\\xb5\\xf3\\xa4\\x48\\x76\\x9c\\xcc\\x7b\\xf0\\x80\\xf2\\x1b\\x9a\\x8f\\xd9\\x29\\\n\\xb2\\x78\\x3a\\x53\\xf5\\x1b\\xd6\\x91\\x22\\xc3\\xbc\\x5c\\xde\\x62\\x68\\x30\\\n\\x0c\\x31\\xa3\\x46\\xf2\\x0a\\x72\\xd0\\xc3\\x34\\x70\\x58\\x49\\x71\\xa9\\x33\\\n\\xe5\\xb0\\x0c\\x20\\x2e\\x61\\x15\\xe1\\xe1\\x15\\x2d\\xe2\\xd9\\xcd\\x7b\\xc5\\\n\\xea\\xc6\\x23\\x76\\x32\\x06\\x62\\x13\\xce\\xb8\\x60\\x58\\xbe\\x66\\xc7\\x11\\\n\\xfb\\x65\\x0a\\xe8\\x16\\xaf\\x7d\\x62\\xf0\\xa9\\x31\\x40\\xd7\\x5a\\xee\\xea\\\n\\xf8\\x41\\x68\\xe3\\xc6\\xe1\\x5d\\x27\\xf6\\x5c\\xa9\\xd8\\x9a\\x42\\x4f\\xd3\\\n\\x12\\xa2\\xd9\\x0e\\xba\\x0e\\xa7\\xe6\\x0b\\xea\\xa0\\xf8\\xf6\\x06\\x5e\\x34\\\n\\x20\\x2f\\x15\\x5a\\xa1\\x86\\xc1\\xc3\\x40\\x5c\\x32\\x27\\x93\\x58\\xd3\\xc9\\\n\\xb9\\x65\\xf4\\x7b\\x17\\xe7\\xf8\\xc1\\x98\\xbd\\xc4\\x62\\x0c\\x3a\\xc6\\x27\\\n\\x2a\\xbe\\x28\\xab\\x0b\\xcd\\x2f\\xc3\\x49\\xda\\x22\\xa3\\xf2\\x67\\x24\\xd0\\\n\\x2d\\x78\\xa2\\x48\\x84\\xbb\\x21\\x1a\\xfe\\x8d\\x62\\x44\\x70\\x5e\\x5a\\x13\\\n\\x5a\\x68\\xa3\\xd8\\xc6\\x8d\\xfb\\x3f\\x38\\xf6\\xc6\\xe9\\x8f\\x98\\x23\\x0d\\\n\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x06\\x6c\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x50\\x00\\x00\\x00\\x50\\x08\\x06\\x00\\x00\\x00\\x8e\\x11\\xf2\\xad\\\n\\x00\\x00\\x00\\x04\\x73\\x42\\x49\\x54\\x08\\x08\\x08\\x08\\x7c\\x08\\x64\\x88\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x16\\x25\\x00\\x00\\x16\\x25\\x01\\x49\\x52\\\n\\x24\\xf0\\x00\\x00\\x00\\x19\\x74\\x45\\x58\\x74\\x53\\x6f\\x66\\x74\\x77\\x61\\\n\\x72\\x65\\x00\\x77\\x77\\x77\\x2e\\x69\\x6e\\x6b\\x73\\x63\\x61\\x70\\x65\\x2e\\\n\\x6f\\x72\\x67\\x9b\\xee\\x3c\\x1a\\x00\\x00\\x05\\xcc\\x49\\x44\\x41\\x54\\x78\\\n\\x5e\\xed\\x9c\\x5f\\x68\\x5b\\x55\\x1c\\xc7\\xbf\\x99\\xf4\\xdf\\xba\\xec\\xc1\\\n\\x82\\xa5\\xea\\x86\\x48\\xd2\\x87\\x10\\x11\\xa6\\x50\\x7a\\x63\\x50\\x51\\xec\\\n\\xd2\\xf8\\xd0\\xbe\\x04\\x0b\\x62\\x06\\x8e\\x94\\x3d\\xcc\\x04\\x99\\x82\\xb0\\\n\\xed\\x61\\x2b\\x08\\xa3\\x0f\\x89\\x0e\\x64\\x41\\x61\\x11\\xb1\\x25\\x08\\x2d\\\n\\xcc\\x36\\x22\\xbe\\x15\\xe3\\x84\\x51\\xa6\\x94\\x0a\\x6b\\x84\\xb9\\xb9\\x69\\\n\\x0b\\x45\\xe9\\x1f\\xba\\x32\\x37\\x3d\\xa7\\xf7\\xdc\\xdc\\x73\\x6f\\xfe\\x34\\\n\\xc9\\x39\\x35\\xb4\\x39\\x1f\\xb8\\xf4\\xdc\\x73\\x6e\\xfe\\xdc\\xcf\\x3d\\xbf\\\n\\xdf\\xf9\\xdd\\xa4\\xc4\\xf1\\x2f\\x01\\x8a\\x9a\\xd9\\xc7\\xfe\\x2a\\x6a\\x44\\\n\\x09\\x14\\x44\\x09\\x14\\xa4\\x20\\x07\\x8e\\xbe\\xff\\x39\\x6b\\xc9\\x61\\x7d\\\n\\xdf\\x7d\\xfc\\xd5\\x7c\\x0f\\x1b\\xff\\xdc\\x67\\x3d\\xf5\\xa1\\xad\\xa9\\x19\\\n\\x8f\\x6e\\x36\\xa3\\xaf\\xaf\\x07\\x3d\\x2f\\x3f\\xc3\\x7a\\xc5\\x29\\x2a\\x70\\\n\\xf0\\xd8\\x20\\xdb\\xab\\x9c\\xa5\\x3b\\x6b\\xac\\x65\\xe5\\xab\\xab\\x5f\\x63\\\n\\xf0\\xf5\\x17\\x71\\xf8\\x50\\x17\\xeb\\xa9\\x0f\\x37\\x6f\\xdd\\xc5\\x95\\xcc\\\n\\x0c\\xdc\\x8e\\x0e\\x3c\\xdb\\xeb\\x26\\x12\\xbd\\x6c\\x44\\x8c\\x1d\\x0f\\xe1\\\n\\xb5\\x8d\\xf5\\xba\\xcb\\xa3\\x3c\\x75\\xf8\\x71\\xac\\xac\\xaf\\xe1\\x85\\xa3\\\n\\x7e\\xfc\\xfc\\xe3\\xaf\\xf8\\xfe\\xdb\\xeb\\x6c\\x44\\x8c\\x86\\xcb\\x81\\x2d\\\n\\xad\\x2d\\xf0\\xbd\\xe6\\xc3\\xfc\\xec\\x6f\\x52\\x24\\x36\\xe4\\x22\\x62\\x95\\\n\\xf8\\x13\\xeb\\xad\\x8d\\x86\\x5d\\x85\\x4d\\x89\\x37\\x85\\x24\\xee\\x5a\\x81\\\n\\x9f\\x5c\\x4e\\x17\\xdd\\xaa\\x41\\x86\\xc4\\x86\\x9d\\x81\\x06\\xa2\\x12\\x1b\\\n\\x5e\\x20\\x45\\x44\\xa2\\x12\\xc8\\xa8\\x55\\xa2\\x12\\xc8\\x51\\x8b\\x44\\x25\\\n\\xd0\\x46\\xb5\\x12\\x95\\xc0\\x22\\x54\\x23\\x51\\x09\\x2c\\x81\\x21\\xf1\\x97\\\n\\xeb\\xe5\\x8b\\x6d\\x25\\xb0\\x0c\\x54\\xa2\\xf6\\xaa\\x56\\x56\\xa2\\x12\\xb8\\\n\\x0d\\xdb\\x49\\x54\\x02\\x2b\\x80\\x4a\\xec\\x7d\\xa5\\x17\\x3f\\x7c\\xa7\\x04\\\n\\xd6\\x4c\\x6b\\x5b\\x2b\\x6b\\x59\\xd9\\xb5\\x02\\x4f\\x1c\\x0b\\x15\\xdd\\xfe\\\n\\x6f\\xd4\\x0c\\x14\\x44\\x09\\x14\\x44\\x09\\x14\\x44\\x9a\\xc0\\x7d\\x8f\\x14\\\n\\x7f\\xaa\\xf6\\xb6\\xfd\\xb8\\x7d\\x67\\x91\\xed\\xd5\\x8f\\x5b\\xbf\\xff\\x09\\\n\\x67\\xfb\\x01\\xb6\\x27\\x0f\\x69\\xdf\\xca\\x6d\\xde\\x7b\\x80\\xd5\\xbf\\x37\\\n\\xf1\\xf0\\xc1\\x43\\xd6\\xa3\\x73\\x7b\\xf9\\x2e\\xae\\x2e\\x5c\\xc3\\xfa\\xc6\\\n\\x06\\xeb\\xa9\\x0f\\xce\\xfd\\xed\\xe8\\xeb\\xf1\\xe1\\xe9\\x27\\x0e\\xb1\\x9e\\\n\\xea\\x99\\xb8\\x3c\\x81\\x53\\x17\\xde\\x62\\x7b\\x3a\\xd2\\x04\\x36\\x02\\xc5\\\n\\x04\\xaa\\x1c\\x28\\x88\\x12\\x28\\x88\\x12\\x28\\x88\\x12\\x28\\x88\\x12\\x28\\\n\\x88\\x12\\x28\\x88\\x12\\x28\\x88\\x12\\x28\\x88\\x12\\x28\\x48\\xd5\\x77\\x22\\\n\\x9f\\x4e\\x57\\xf7\\xff\\x27\\xbb\\x8d\\xe3\\xfd\\xa5\\x3f\\x53\\x94\\x72\\x2b\\\n\\x47\\x05\\x7e\\x78\\xea\\x6d\\xb6\\xb7\\xb7\\xf8\\x60\\xf4\\xb3\\xaa\\x05\\xaa\\\n\\x10\\x16\\x44\\x09\\x14\\x44\\x09\\x14\\x44\\x09\\x14\\x44\\x09\\x14\\x44\\x09\\\n\\x14\\x44\\x09\\x14\\x44\\x09\\x14\\x44\\x09\\x14\\x44\\xfa\\x9d\\xc8\\x4c\\xfd\\\n\\xbf\\xc1\\x2c\\x8b\\xbf\\x93\\x35\\x8a\\x50\\xcb\\x9d\\x88\\xba\\x95\\xe3\\x50\\\n\\xb7\\x72\\x75\\xa0\\x76\\x81\\x99\\x61\\x38\\x1c\\x8e\\x82\\x6d\\x38\\xc3\\xc6\\\n\\x0b\\xc8\\x60\\xb8\\xc8\\xf1\\xbe\\x44\\x8e\\x8d\\xef\\x4e\\xa4\\xcf\\xc0\\xb9\\\n\\x1b\\x25\\x84\\x64\\x26\\x91\\x64\\xcd\\xbd\\x84\\x74\\x81\\xd9\\xf4\\x14\\x8a\\\n\\x29\\xcc\\x4c\\xee\\x45\\x7d\\x3b\\x91\\x03\\xb3\\x69\\x4c\\x15\\x18\\xcc\\xe1\\\n\\xc6\\x1c\\x6b\\xee\\x31\\xa4\\x09\\xd4\\x22\\x11\\x68\\x5b\\xad\\x2c\\xd2\\x76\\\n\\x83\\xb9\\x29\\xa4\\xb3\\xb4\\xa1\\x21\\x12\\xd1\\x8f\\x2a\\x20\\x97\\x80\\x8f\\\n\\xcf\\x8f\\xbe\\x84\\x65\\x26\\x67\\x86\\xb9\\x31\\x87\\x0f\\x34\\x75\\xf2\\x7d\\\n\\x85\\xb9\\xd4\\x96\\x73\\x0b\\x92\\xb3\\x75\\xbc\\x74\\xee\\x2e\\x8f\\xbc\\x19\\\n\\xe8\\xf1\\xc0\\xf8\\x15\\x82\\xec\\x17\\x53\\x18\\x27\\xf5\\x20\\xad\\x09\\xe9\\\n\\x36\\x3e\\x96\\x26\\x5a\\x29\\x5e\\xb4\\x3c\\xb9\\xd5\\xc8\\xb3\\xb2\\xc2\\x8e\\\n\\x73\\x46\\x71\\xf2\\x1c\\x27\\x37\\x1b\\xc3\\xbb\\x63\\x6c\\x6c\\x6c\\x18\\xfd\\\n\\x5c\\x06\\xf0\\x9e\\x4b\\xe1\\x88\\x13\\x38\\xf0\\x52\\x84\\xf5\\x14\\xbe\\xe6\\\n\\xcc\\x98\\x2d\\xe7\\x26\\x27\\x31\\x4a\\xfa\\xf3\\x58\\x72\\x72\\x04\\x03\\x01\\\n\\xd6\\xac\\x12\\x89\\x21\\x1c\\xc4\\x80\\x71\\x3e\\xd7\\xd2\\x58\\x5c\\xd5\\x8b\\\n\\x56\\x7f\\x67\\x0e\\x8b\\xdf\\xe8\\xfa\\xa0\\x79\\x10\\x38\\xa8\\x37\\x0d\\x0e\\\n\\x92\\x7d\\xfd\\x38\\xe0\\x8d\\x33\\x29\\xc4\\x39\\x87\\x57\\x2e\\x26\\xd0\\x45\\\n\\x1e\\x3f\\x7b\\x91\\x53\\xa1\\xc5\\x31\\x71\\xc6\\xa5\\x3f\\x66\\x68\\x80\\x9c\\\n\\x3a\\xc3\\xf2\\x9a\\x40\\xd7\\x92\\x3d\\x67\\xcc\\xa1\\x89\\x8c\\x1b\\xe4\\xf8\\\n\\x9c\\x12\\x19\\x40\\x8d\\xfe\\xe4\\x09\\xf4\\x76\\xbb\\xe0\\xf6\\x18\\x67\\xcf\\\n\\x87\\xf1\\x02\\xe6\\x0d\\x7f\\xa1\\x20\\x02\\xdd\\xe5\\x7e\\x2d\\xc3\\x85\\x68\\\n\\x2a\\xce\\x52\\x01\\x81\\xcc\\xc2\\xb0\\x2f\\x8c\\x18\\x7b\\x3c\\x4d\\x01\\xf1\\\n\\x54\\x94\\x1c\\x65\\x10\\x30\\x2f\\x9a\\xe5\\x35\\x73\\x98\\xd2\\x73\\x06\\x47\\\n\\xe9\\x71\\xcd\\xe3\\x66\\xad\\xea\\x91\\xba\\x88\\xb8\\x82\\xa1\\xfc\\xc9\\xe7\\\n\\x57\\x63\\x2e\\x54\\xa8\\xe4\\x6d\\x71\\x45\\x91\\xe2\\xa6\\x61\\x36\\xcb\\x9d\\\n\\x68\\x3c\\x85\\xa8\\xed\\x29\\xcc\\x8b\\x46\\x8e\\x9d\\x5f\\x60\\x2d\\xf3\\xa2\\\n\\xf1\\xe4\\xc7\\xf3\\x39\\x99\\xa2\\x21\\x14\\xac\\xe0\\x7d\\x95\\x40\\xaa\\x40\\\n\\xb8\\xba\\xf3\\x79\\x90\\xbc\\x5b\\x72\\x1a\\xd4\\x9f\\xa1\\xaf\\xf2\\x3c\\xe3\\\n\\x8a\\x9e\\x36\\x43\\xd3\\x80\\x84\\x6e\\xca\\x6e\\x8f\\xc0\\x5f\\x34\\x9a\\xe7\\\n\\xb6\\xd6\\x02\\x3e\\xbf\\x45\\xe2\\x66\\x5a\\x30\\xc6\\x17\\xe6\\x59\\x4e\\x26\\\n\\x68\\x21\\x08\\xf8\\x93\\x2c\\xd0\\x12\\x52\\x49\\x4c\\x66\\x32\\xc8\\xfb\\x23\\\n\\xf9\\xaf\\xf2\\x40\\x09\\xe0\\x3d\\x3e\\x19\\x52\\xbc\\xdd\\x5c\\xe8\\x72\\xb8\\\n\\x82\\x08\\x99\\x06\\xc9\\x6b\\xf2\\x17\\x8d\\xa6\\xb7\\x28\\xcc\\xac\\x31\\x07\\\n\\x5a\\xe7\\xf3\\xe3\\x34\\xad\\x08\\xf8\\x93\\x25\\x50\\x83\\x91\\x46\\xf8\\x90\\\n\\x4a\\x8e\\x8c\\x90\\xb7\\xac\\x53\\xd5\\x1b\\x25\\x25\\x4d\\xd8\\x4c\\x7c\\x3a\\\n\\xc9\\xfe\\x12\\xa5\\x86\\x0b\\x41\\xd3\\x20\\xb9\\x13\\x4a\\x70\\x35\\xa7\\x3e\\\n\\xeb\\x03\\xf9\\xab\\x4a\\xf3\\x60\\xc2\\xbc\\xa8\\x82\\xe1\\x4b\\x91\\x3c\\x03\\\n\\x6d\\x21\\x45\\xf2\\x97\\xa1\\x21\\x9f\\xff\\xdc\\x1e\\x73\\xbc\\x28\\x39\\x24\\\n\\xc2\\x31\\x33\\xc4\\x38\\x92\\x23\\xd6\\xda\\xd0\\xc0\\x92\\x7b\\x63\\x31\\x73\\\n\\xd1\\x31\\x66\\x3d\\xf7\\x9a\\x74\\xdc\\xf4\\x27\\x16\\xbe\\x14\\xe9\\x02\\x67\\\n\\x9c\\xdd\\xe8\\x60\\x6d\\x93\\x08\\xdc\\x47\\x58\\x7d\\xb6\\x4c\\x6a\\x3f\\xd6\\\n\\x4b\\xc9\\xd7\\x81\\x6c\\x1b\\x3f\\x6f\\x5d\\x75\\x4f\\x7e\\x19\\xe7\\xf2\\x6a\\\n\\x0c\\x83\\xe7\\x73\\x96\\xe3\\xb7\\x36\\x67\\x10\\xcf\\x3d\\xcf\\x8e\\xe1\\xf0\\\n\\x1e\\x0d\\xe2\\x8f\\x32\\xe3\\xa2\\xe1\\x4b\\x91\\x2e\\xd0\\xdf\\x19\\xc0\\x09\\\n\\xfb\\x0a\\x40\\x66\\xc2\\x00\\xab\\xcf\\xfc\\xc4\\x2e\\x5f\\x0a\\xf2\\x75\\xa0\\\n\\x7f\\x35\\x81\\x8f\\xcf\\x9a\\x73\\x8f\\xae\\xba\\x1f\\x0d\\x45\\x71\\x81\\x7b\\\n\\xbe\\xb9\\xb3\\x61\\xcc\\x72\\xf5\\x9e\\xbe\\xb9\\xf0\\xce\\x9b\\xf6\\x79\\xad\\\n\\xe1\\xf8\\x10\\xab\\x17\\x4b\\x8c\\x8b\\x86\\x2f\\x45\\xba\\x40\\x8a\\x99\\x73\\\n\\x74\\x2a\\xbb\\xd2\\xb6\\xd0\\xe5\\x56\\xdd\\xc0\\xa5\\x69\\x6e\\x55\\xce\\x22\\\n\\x16\\x2e\\x0c\\x65\\x57\\x41\\x7d\\xe9\\x05\\x5f\\x35\\x15\\x8c\\x4b\\x08\\x5f\\\n\\x8a\\x24\\x81\\xd6\\x37\\x6b\\xcf\\x73\\x96\\xfa\\x8f\\x2f\\x75\\x38\\x72\\x09\\\n\\x3e\\x74\\x49\\xd0\\x9f\\xb6\\x16\\xcc\\x97\\xa6\\xb9\\x8b\\x42\\x0b\\x6c\\xfb\\\n\\xbd\\x6f\\x80\\xbb\\x2b\\xa1\\xd8\\xef\\x2e\\x6c\\xe3\\x32\\xc2\\x97\\xa2\\x3e\\\n\\xd2\\xe7\\x50\\x1f\\xe9\\xd7\\x01\\x25\\x50\\x10\\x25\\x50\\x10\\x25\\x50\\x10\\\n\\x25\\x50\\x90\\xa2\\xab\\x70\\x39\\x96\\x1f\\xab\\xef\\xcf\\x19\\xef\\x34\\x1d\\\n\\x4b\\x4d\\xac\\x55\\x9c\\x6d\\xff\\x33\\x41\\x51\\x1d\\x2a\\x84\\x05\\x51\\x02\\\n\\x05\\x51\\x02\\x85\\x00\\xfe\\x03\\xb0\\xd9\\x67\\x56\\x4e\\xe5\\xc7\\x7b\\x00\\\n\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x0e\\xbb\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x60\\x00\\x00\\x00\\x60\\x08\\x06\\x00\\x00\\x00\\xe2\\x98\\x77\\x38\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x1b\\xaf\\x00\\x00\\x1b\\xaf\\x01\\x5e\\x1a\\\n\\x91\\x1c\\x00\\x00\\x01\\xcb\\x69\\x54\\x58\\x74\\x58\\x4d\\x4c\\x3a\\x63\\x6f\\\n\\x6d\\x2e\\x61\\x64\\x6f\\x62\\x65\\x2e\\x78\\x6d\\x70\\x00\\x00\\x00\\x00\\x00\\\n\\x3c\\x78\\x3a\\x78\\x6d\\x70\\x6d\\x65\\x74\\x61\\x20\\x78\\x6d\\x6c\\x6e\\x73\\\n\\x3a\\x78\\x3d\\x22\\x61\\x64\\x6f\\x62\\x65\\x3a\\x6e\\x73\\x3a\\x6d\\x65\\x74\\\n\\x61\\x2f\\x22\\x20\\x78\\x3a\\x78\\x6d\\x70\\x74\\x6b\\x3d\\x22\\x58\\x4d\\x50\\\n\\x20\\x43\\x6f\\x72\\x65\\x20\\x35\\x2e\\x34\\x2e\\x30\\x22\\x3e\\x0a\\x20\\x20\\\n\\x20\\x3c\\x72\\x64\\x66\\x3a\\x52\\x44\\x46\\x20\\x78\\x6d\\x6c\\x6e\\x73\\x3a\\\n\\x72\\x64\\x66\\x3d\\x22\\x68\\x74\\x74\\x70\\x3a\\x2f\\x2f\\x77\\x77\\x77\\x2e\\\n\\x77\\x33\\x2e\\x6f\\x72\\x67\\x2f\\x31\\x39\\x39\\x39\\x2f\\x30\\x32\\x2f\\x32\\\n\\x32\\x2d\\x72\\x64\\x66\\x2d\\x73\\x79\\x6e\\x74\\x61\\x78\\x2d\\x6e\\x73\\x23\\\n\\x22\\x3e\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x3c\\x72\\x64\\x66\\x3a\\x44\\x65\\\n\\x73\\x63\\x72\\x69\\x70\\x74\\x69\\x6f\\x6e\\x20\\x72\\x64\\x66\\x3a\\x61\\x62\\\n\\x6f\\x75\\x74\\x3d\\x22\\x22\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\\n\\x20\\x20\\x20\\x78\\x6d\\x6c\\x6e\\x73\\x3a\\x78\\x6d\\x70\\x3d\\x22\\x68\\x74\\\n\\x74\\x70\\x3a\\x2f\\x2f\\x6e\\x73\\x2e\\x61\\x64\\x6f\\x62\\x65\\x2e\\x63\\x6f\\\n\\x6d\\x2f\\x78\\x61\\x70\\x2f\\x31\\x2e\\x30\\x2f\\x22\\x0a\\x20\\x20\\x20\\x20\\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x78\\x6d\\x6c\\x6e\\x73\\x3a\\x74\\x69\\\n\\x66\\x66\\x3d\\x22\\x68\\x74\\x74\\x70\\x3a\\x2f\\x2f\\x6e\\x73\\x2e\\x61\\x64\\\n\\x6f\\x62\\x65\\x2e\\x63\\x6f\\x6d\\x2f\\x74\\x69\\x66\\x66\\x2f\\x31\\x2e\\x30\\\n\\x2f\\x22\\x3e\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x3c\\x78\\x6d\\\n\\x70\\x3a\\x43\\x72\\x65\\x61\\x74\\x6f\\x72\\x54\\x6f\\x6f\\x6c\\x3e\\x77\\x77\\\n\\x77\\x2e\\x69\\x6e\\x6b\\x73\\x63\\x61\\x70\\x65\\x2e\\x6f\\x72\\x67\\x3c\\x2f\\\n\\x78\\x6d\\x70\\x3a\\x43\\x72\\x65\\x61\\x74\\x6f\\x72\\x54\\x6f\\x6f\\x6c\\x3e\\\n\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x3c\\x74\\x69\\x66\\x66\\x3a\\\n\\x4f\\x72\\x69\\x65\\x6e\\x74\\x61\\x74\\x69\\x6f\\x6e\\x3e\\x31\\x3c\\x2f\\x74\\\n\\x69\\x66\\x66\\x3a\\x4f\\x72\\x69\\x65\\x6e\\x74\\x61\\x74\\x69\\x6f\\x6e\\x3e\\\n\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x3c\\x2f\\x72\\x64\\x66\\x3a\\x44\\x65\\x73\\\n\\x63\\x72\\x69\\x70\\x74\\x69\\x6f\\x6e\\x3e\\x0a\\x20\\x20\\x20\\x3c\\x2f\\x72\\\n\\x64\\x66\\x3a\\x52\\x44\\x46\\x3e\\x0a\\x3c\\x2f\\x78\\x3a\\x78\\x6d\\x70\\x6d\\\n\\x65\\x74\\x61\\x3e\\x0a\\x18\\xcb\\x55\\x58\\x00\\x00\\x0c\\x89\\x49\\x44\\x41\\\n\\x54\\x78\\x01\\xed\\x5c\\x7d\\x70\\x15\\xd5\\x15\\xbf\\x77\\x37\\x79\\x90\\x0f\\\n\\x08\\xf2\\x61\\x05\\xa1\\x45\\x6b\\x67\\xca\\x87\\x08\\x33\\x58\\x63\\x12\\x60\\\n\\x12\\x82\\xd0\\x00\\x86\\x8f\\x9a\\xa1\\x54\\x3b\\xa3\\x52\\x50\\xaa\\x33\\x02\\\n\\x96\\x62\\x9d\\xb1\\x38\\xd3\\x3a\\x6d\\x6d\\x6d\\xa7\\xa0\\x88\\xb5\\x7f\\x68\\\n\\x5b\\xa4\\xa9\\x90\\x20\\x90\\x4a\\x81\\xa4\\x10\\x78\\x6a\\x85\\xd6\\xda\\x62\\\n\\x3b\\xb5\\xa0\\xd0\\x16\\xac\\x20\\xc8\\x87\\x84\\xe4\\x65\\xf7\\xf6\\x9c\\xcd\\\n\\x7b\\x2f\\x77\\xef\\xdb\\xcd\\xbb\\x77\\x77\\x5f\\x78\\xf4\\xed\\x9d\\x49\\xde\\\n\\xfd\\x38\\xe7\\x77\\xcf\\xf9\\x9d\\xbb\\x77\\xf7\\xde\\xbd\\xef\\x11\\x12\\xa6\\\n\\x90\\x81\\x90\\x81\\x90\\x81\\x90\\x81\\x90\\x81\\x90\\x81\\x90\\x81\\x90\\x81\\\n\\x90\\x81\\x90\\x81\\x90\\x81\\x90\\x81\\x90\\x81\\x90\\x81\\x90\\x81\\x90\\x81\\\n\\x5c\\x61\\x80\\x5e\\x51\\x8e\\xae\\xfd\\xd5\\x67\\x88\\xa6\\xcd\\x02\\x9b\\xf1\\\n\\xef\\x7a\\x42\\xc9\\xb0\\xb8\\xfd\\x27\\x08\\x23\\x87\\x09\\x61\\x3b\\x88\\xc9\\\n\\x1a\\xc8\\x03\\x5f\\x39\\x7a\\xa5\\xf8\\x75\\x65\\x04\\x60\\x5d\\xfd\\xb5\\x84\\\n\\x1a\\x8f\\x01\\xc9\\xf7\\x02\\xb1\\x7a\\x1a\\x72\\x0d\\x68\\xdf\\x00\\x62\\x8f\\\n\\x90\\xfb\\xeb\\xfe\\x93\\x46\\xf6\\xb2\\x37\\x67\\x7f\\x00\\x9e\\xde\\x78\\x1b\\\n\\xd1\\xcc\\x97\\x09\\xa1\\xfd\\xd4\\xd8\\x62\\xe7\\x09\\xd1\\x16\\x93\\xfb\\x17\\\n\\x6c\\x54\\xd3\\xeb\\x5d\\x69\\xad\\x77\\xbb\\x53\\xec\\x6d\\xdd\\x4b\\xcb\\x88\\\n\\xc6\\x9a\\xd4\\xc9\\xc7\\x7e\\x30\\x60\\x6c\\x03\\x41\\x8c\\x2c\\x4e\\xd9\\x7b\\\n\\x05\\x3c\\xbb\\x71\\x1e\\x61\\x0c\\x46\\x3e\\xcc\\xf4\\xfe\\x12\\x23\\x94\\x7e\\\n\\x89\\xdc\\xb7\\x60\\xb3\\x3f\\x98\\xcc\\x68\\xfb\\x75\\x2e\\x33\\x56\\xad\\xdf\\\n\\x30\\x98\\x18\\xf4\\x7d\\xa0\\xbe\\x28\\x90\\x0e\\x18\\xf9\\x84\\x30\\x7d\\x3c\\\n\\xf9\\x7a\\xdd\\x3f\\x03\\xc1\\x0b\\x10\\x24\\x3b\\xa7\\x20\\x46\\x1f\\x0e\\x8c\\\n\\x7c\\x24\\x0b\\x03\\xa9\\x1b\\x4f\\x04\\xc8\\x5b\\x60\\x50\\xd9\\x77\\x05\\xac\\\n\\xff\\xc5\\x50\\x62\\xe6\\x1d\\x01\\x0f\\xfb\\x06\\xe6\\x65\\x17\\x90\\x49\\xb4\\\n\\xce\\xe1\\x64\\xc9\\x5d\\x27\\x02\\xc6\\xf5\\x05\\x97\\x7d\\x57\\x00\\xd3\\xe7\\\n\\x82\\x47\\x41\\x93\\x8f\\x24\\x69\\x30\\x0d\\x21\\x76\\x56\\xa5\\xec\\x0b\\x00\\\n\\xa1\\xb5\\x99\\x63\\x28\\x93\\xd8\\xde\\xac\\xce\\xbe\\x00\\x30\\x72\\x83\\x37\\\n\\x57\\x24\\xb4\\x18\\x19\\x21\\x21\\xd5\\xab\\x22\\x59\\x17\\x00\\x4a\\xc9\\xf0\\\n\\x4c\\x31\\xa0\\x53\\x3a\\x34\\x53\\xd8\\x5e\\x71\\xb3\\xe2\\x26\\xbc\\x79\\xd7\\\n\\x1b\\x83\\x34\\x6a\\x7c\\x0d\\x16\\x4e\\x5f\\xbd\\xe3\\xdd\\x63\\xa3\\x62\\xcc\\\n\\xab\\x3b\\x3d\\xeb\\xf5\\xd7\\x35\\xf2\\xe2\\x67\\x87\\xff\\x0d\\x1e\\x8b\\x5e\\\n\\x34\\x99\\xfe\\xb3\\x79\\xd5\\xb7\\x7c\\xd4\\xb3\\x46\\xe6\\x5b\\x2f\\x6b\\x00\\\n\\x9a\\x9a\\x5e\\xef\\xdf\\x51\\x60\\x3c\\x08\\x7b\\x3c\\x2b\\xc1\\xd5\\xfe\\xe8\\\n\\xee\\x92\\x23\\xc7\\xc9\\x7f\\x63\\x9d\\x19\\xf1\\x7c\\x78\\x9f\\x7c\\xb2\\x76\\\n\\x64\\xf2\\x22\\x38\\x07\\xfd\\xae\\x89\\xb4\\xeb\\x3f\\xa8\\xa9\\x29\\x3d\\x97\\\n\\x91\\x0e\\x25\\x40\\x2f\\xdb\\x14\\xd4\\xd8\\x1c\\x5d\\xd8\\xd1\\xd7\\x38\\x0c\\\n\\x24\\x7c\\x07\\xec\\xb4\\xc8\\x47\\x7b\\x87\\x45\\xf2\\x24\\xcc\\xf6\\x26\\x32\\\n\\x24\\xcf\\xb6\\x8f\\xd7\\x1f\\xd6\\x07\\x8f\\xa2\\x0d\\x68\\x8b\\x37\\x44\\xff\\\n\\x5a\\xbd\\x7e\\x05\\xd4\\xef\\xdd\\x3b\\x24\\x12\\xd3\\x7f\\x0a\\xce\\x2f\\x70\\\n\\x32\\xff\\xb7\\x67\\xce\\x9b\\xeb\\x3f\\x3c\\x93\\x91\\x81\\xb1\\xf8\\xea\\x81\\\n\\xb1\\x9a\\xab\\x8a\\xf3\\x9d\\xfa\\xa5\\x8c\\x6c\\x6b\\xcf\\x37\\xee\\xa9\\x9b\\\n\\x3c\\xf9\\xa4\\x53\\x7b\\xa6\\xea\\x32\\xe2\\xa8\\x9b\\xb1\\x8d\\x7b\\xa2\\x37\\\n\\x46\\x3a\\xf5\\x3f\\xba\\x90\\x7f\\x0a\\xea\\x57\\x9d\\x6a\\x67\\x13\\x40\\xff\\\n\\x92\\x1b\\x86\\x8f\\x7a\\xf3\\xfd\\x76\\x32\\x0e\\xfb\\x00\\x8c\\x53\\x22\\x0e\\\n\\xa3\\x64\\x16\\xda\\x86\\x36\\x8a\\x6d\\x99\\x2c\\xf7\\xda\\x15\\xd0\\xd0\\x1c\\\n\\x9d\\x4a\\x09\\xdb\\x04\\xce\\x94\\x08\\x0e\\x75\\xc0\\x93\\xcf\\x13\\xf9\\x6d\\\n\\xfa\\x8f\\x93\\x73\\xf1\\xb3\\x2f\\x7d\\x0f\\xa6\\xa6\\x6f\\x0a\\x72\\xfe\\x8a\\\n\\x94\\xfc\\x86\\xdc\\xf7\\xe5\\x3a\\x04\\xc1\\x7b\\x4f\\xac\\xc0\\x58\\xc6\\x18\\\n\\x79\\x18\\x8a\\xc5\\x02\\xf0\\x59\\xd8\\xbd\\x9b\\x3f\\xb7\\xaa\\x6c\\xb7\\x50\\\n\\x9f\\x91\\x62\\xaf\\x04\\x60\\xcb\\xae\\x7d\\xd3\\x98\\x46\\xb7\\x81\\x07\\x11\\\n\\xde\\x0b\\x18\\x75\\x6f\\x6a\\x86\\xbe\\xa8\\xb6\\xba\\xf4\\x6d\\xbe\\x9e\\xe0\\\n\\x66\\x9c\\x49\\xdf\\x83\\x3a\\x91\\x1c\\x9b\\x98\\x42\\xe1\\x02\\x31\\xf5\\x09\\\n\\xe2\\x66\\xdc\\xa6\\x5d\\xad\\xd7\\x6b\\xba\\xb6\\x11\\xa6\\x9f\\x9b\\x05\\xac\\\n\\x0e\\x6a\\xb2\\x59\\xb5\\xd5\\x15\\x3b\\x85\\xfa\\xc0\\x8b\\x19\\x9f\\x82\\xb6\\\n\\xec\\x89\\x4e\\x00\\xf2\\x71\\xe4\\x0b\\xe4\\xd3\\xb5\\x03\\x48\\x47\\x59\\x0a\\\n\\xf9\\xe8\\xe2\\x92\\x85\\xa7\\x60\\x2b\\xfa\\x2e\\xc8\\x99\\x58\\xf4\\x99\\x4c\\\n\\x0b\\xcb\\x61\\x27\\x74\\x7e\\xf5\\xa4\\x23\\x68\\x03\\xa3\\x74\\xad\\xd0\\x47\\\n\\x04\\x6d\\x46\\xdb\\x85\\xfa\\xc0\\x8b\\x19\\xbd\\x02\\x36\\xb5\\xbc\\x3e\\x5c\\\n\\x67\\x9d\\x6f\\xc2\\x73\\xf7\\x35\\x9c\\xe5\\x26\\xcc\\xc3\\xdf\\x9a\\x53\\x59\\\n\\xfe\\x7d\\xae\\xce\\x39\\xfb\\xcc\\x86\\x87\\x60\\x2f\\xff\\x49\\x68\\xf4\\xfa\\\n\\x68\\xc4\\x80\\xfc\\xe5\\x64\\xe9\\xc2\\x9f\\x38\\x77\\xd0\\x5d\\xdb\\xd8\\xb2\\\n\\x6f\\x11\\x61\\x74\\x3d\\xd4\\x70\\x83\\x92\\x7d\\x60\\xd0\\xbc\\x9b\\xe7\\x57\\\n\\x96\\xfe\\xbb\\x5b\\x32\\xd8\\x1c\\xd7\\x59\\xb0\\xc0\\xf5\\xf5\\xf5\\x7a\\x1e\\\n\\x33\\x7e\\x29\\x90\\x0f\\x45\\xba\\x54\\x8a\\x7c\\x34\\x07\\x88\\x2b\\xed\\x57\\\n\\xb8\\xb4\\x50\\x53\\x37\\x13\\x75\\xc6\\x16\\xf5\\xfd\\x86\\x0c\\xf9\\xd8\\xd5\\\n\\x9c\\xca\\x8a\\xe7\\xd1\\x36\\xcc\\x77\\x27\\x7a\\x0d\\xfa\\x80\\xbe\\x74\\xd7\\\n\\x05\\x9b\\x53\\xf7\\x4c\\xb2\\xff\\xc8\\xe0\\x61\\x8f\\xc2\\x82\\x76\\x0a\\x2f\\\n\\x0e\\x37\\xb7\\xc7\\xe6\\x54\\x96\\xe1\\x28\\x93\\x4e\\xab\\x86\\x0d\\x19\\xf5\\\n\\xf4\\x75\\x43\\xc9\\x8c\\x01\\xc5\\xfc\\xd0\\x74\\xd5\\x47\\x87\\xaa\\x4a\\x8a\\\n\\x08\\xea\\x7c\\x77\\xc4\\x10\\xa5\\x6d\\x0d\\xb4\\x0d\\x6d\\xe4\\xc1\\xd1\\x07\\\n\\xf4\\x85\\xaf\\x0b\\x32\\x9f\\x91\\x29\\x68\\x73\\xcb\\xfe\\xb1\\x1a\\x23\\x7f\\\n\\x02\\x43\\xbb\\xa7\\x0e\\xca\\x1a\\x60\\x94\\xcd\\x53\\x35\\xbe\\xb1\\x79\\xff\\\n\\x31\\xd0\\xb1\\x36\\xd1\\x4e\\xc5\\x0c\\xf2\\xc2\\xc9\\xb3\\x2f\\xb4\\x9e\\xbf\\\n\\x70\\x35\\xd4\\x5d\\x07\\x5b\\x17\\xd7\\xc6\\xf1\\x8e\\xc3\\xa5\\x75\\xa4\\xac\\\n\\x5f\\xd1\\x47\\xf7\\x0c\\x19\\x70\\xe7\\xe0\\xfc\\xe4\\x80\\x3d\\xfe\\xd6\\xde\\\n\\xb2\\x11\\xab\\x57\\x53\\xa5\\x7b\\x09\\x4c\\x47\\x9b\\x61\\x3a\\xe2\\xb7\\xae\\\n\\x3b\\x4d\\x4a\\x26\\xcc\\xab\\x2c\\xff\\xab\\xaa\\xfd\\xe9\\xe4\\xbb\\x09\\x4a\\\n\\x27\\xa9\\xd0\\x0e\\xe4\\xe3\\xfc\\xce\\x63\\x9f\\xd0\\x49\\x6c\\xb1\\x02\\x84\\\n\\x25\\xda\\xd0\\xb2\\x7f\\x3c\\x3c\\x8e\\x26\\x77\\x30\\x81\\xd8\\x8b\\x2b\\x4b\\\n\\x86\\x2e\\x6d\\xbd\\x73\\xe2\\x45\\x27\\xac\\x47\\xb6\\x1e\\x28\\x34\\xf2\\xdb\\\n\\x31\\xc8\\x85\\xf1\\xf6\\x61\\xe3\\x2a\\xa2\\xb7\\x40\\xfe\\x35\\x27\\x79\\xb7\\\n\\x3a\\xb4\\xd5\\x20\\x91\\x52\\x68\\x4f\\xec\\x5b\\xe4\\xc5\\x7d\\x9a\\xe9\\xa6\\\n\\xe3\\xb5\\x3e\\xf0\\x29\\x08\\x9f\\xf7\\xc1\\x98\\x1a\\xde\\x20\\x78\\xfe\\x7f\\\n\\x60\\x76\\x65\\x65\\xca\\xe2\\x87\\x97\\x71\\xca\\x6b\\xa6\\x75\\x00\\x2b\\xd9\\\n\\x04\\xd3\\xc3\\xab\\xb3\\x67\\x3b\\x93\\x8f\\x42\\x56\\x1b\\x85\\xc3\\x59\\x5c\\\n\\xd2\\x74\\xa6\\x7c\\xd5\\xa1\\xad\\x68\\x33\\x07\\x83\\xd9\\x9a\\xb8\\x6f\\x42\\\n\\xb5\\xbf\\x62\\xe0\\x01\\x80\\xd7\\x4e\\xab\\x79\\x93\\x60\\x8e\\xdb\\x57\\x5b\\\n\\x55\\xe1\\xe9\\x44\\x02\\xac\\x13\\xec\\x23\\x0e\\xa6\\x31\\x1e\\xdb\\x29\\xcf\\\n\\x4c\\x6a\\x97\\x61\\x9a\\x6d\\x30\\x38\\xe9\\x38\\xd5\\xa1\\xcd\\x68\\x3b\\xdf\\\n\\x26\\xfa\\xc6\\xb7\\x79\\xcd\\x07\\x1a\\x80\\x86\\xdd\\xd1\\x2f\\xc0\\x4d\\xab\\\n\\x82\\x37\\x86\\x11\\x13\\x57\\x9b\\xca\\xa9\\xfe\\xd5\\xe8\\x40\\x50\\xe2\\x17\\\n\\x48\\x46\\xac\\x9d\\x36\\xa5\\x03\\x8a\\xc5\\xe8\\x76\\x90\\x31\\xba\\xe5\\xd8\\\n\\xe8\\xed\\x2d\\x7f\\xe0\\x1f\\x83\\xbb\\x9b\\xd2\\xe4\\x44\\xdb\\xd1\\x37\\xf4\\\n\\x31\\x8d\\x9a\\x52\\x73\\xa0\\x01\\xd0\\x28\\x59\\xc1\\xf7\\x0e\\x06\\x37\\xcf\\\n\\xa9\\x9a\\xf4\\x06\\x5f\\x27\\x9b\\x8f\\xf4\\x31\\xa7\\x81\\x6c\\xf2\\x6e\\x0a\\\n\\x37\\xd9\\x03\\x75\\x33\\xca\\x4e\\xa7\\xd3\\xef\\x92\\xa1\\x07\\x78\\xb9\\x18\\\n\\xeb\\xac\\xe2\\xcb\\xb2\\x79\\xb4\\x1d\\x7d\\xe0\\xe5\\x45\\x1f\\xf9\\x36\\x2f\\\n\\xf9\\xc0\\x02\\xb0\\x15\\x6e\\x80\\xb0\\xea\\xb1\\xcf\\xb7\\x94\\xae\\xf1\\x62\\\n\\x14\\xea\\x50\\x46\\xa7\\xf0\\xba\\x94\\x98\\xbf\\xe3\\xcb\\x3d\\xe5\\x45\\x59\\\n\\x98\\xcf\\x6d\\x57\\x65\\x4f\\xba\\x29\\x6d\\x82\\x0f\\xe8\\x23\\x2e\\x30\\x53\\\n\\xe4\\x3c\\x56\\x04\\x16\\x00\\xa3\\xb0\\x0d\\x6f\\xbe\\xfc\\x93\\xcf\\xd1\\x3f\\\n\\xef\\xb9\\xf5\\x15\\x8f\\x76\\xc1\\xc3\\x8f\\x6d\\xfa\\xc1\\x4d\\x89\\x56\\x69\\\n\\x2c\\x41\\x16\\x1e\\x21\\x27\\x4a\\xeb\\x0a\\x82\\x71\\x1f\\x8e\\x72\\xd5\\x79\\\n\\x79\\xc4\\x9c\\xcf\\x95\\x7d\\x65\\x03\\x0b\\x00\\xa1\\xda\\x1d\\xbc\\x25\\x70\\\n\\x03\\xfb\\xb5\\xea\\xf3\\x77\\x42\\xbf\\xbe\\xfe\\x10\\xee\\x1b\\x8d\\x4b\\x94\\\n\\xf1\\x53\\xef\\xc3\\x6c\\xd3\\x0a\\xdf\\x26\\xe6\\x45\\x59\\xd8\\x6c\\xbb\\x29\\\n\\x8e\\x29\\x8a\\xa6\\x2d\\xa3\\x0f\\xe8\\x0b\\x2f\\xc8\\x98\\x69\\xf3\\x95\\x6f\\\n\\x53\\xcd\\x07\\x12\\x80\\x1d\\x3b\\x76\\x14\\x41\\xc7\\xb5\\x7c\\xe7\\xb0\\xf4\\\n\\x79\\x99\\x2f\\xab\\xe4\\xfb\\x0e\\xfc\\xf8\\x26\\x90\\xe7\\x37\\xef\\x0e\\xcf\\\n\\x9a\\x34\\xe9\\x8c\\x2c\\x46\\x5c\\xf6\\x30\\x27\\x1f\\x89\\x63\\x72\\x55\\xf2\\\n\\xd9\\x54\\x5f\\x68\\x69\\xdc\\x67\\x79\\x10\\x17\\xc9\\x40\\x02\\xd0\\x16\\xe9\\\n\\x7f\\x2b\\xe0\\x27\\x5f\\x2b\\x42\\xfe\\xd8\\xec\\xa9\\x65\\xd2\\x23\\x56\\xb4\\\n\\xcd\\x48\\x9d\\x32\\xbc\\x60\\xd9\\x74\\x1c\\x30\\xc5\\x6e\\x5d\\xcb\\x71\\x5f\\\n\\x8e\\x71\\x02\\x7a\\xdc\\x67\\xae\\xca\\x5b\\x36\\x90\\x00\\xc0\\x8e\\xe3\\x24\\\n\\x5b\\xf7\\x8c\\x34\\x53\\x0a\\x17\\xbe\\xd7\\x24\\x06\\x80\\xd9\\x9f\\x6a\\xa4\\\n\\x60\\x45\\x1d\\x11\\x53\\x0a\\xa4\\x4b\\xc8\\xf2\\x05\\x7c\\xb2\\xa9\\x88\\x3e\\\n\\xdb\\x1a\\xe5\\x0b\\x81\\x04\\x00\\x9e\\x32\\xec\\x4f\\x2c\\x1a\\xfb\\xbd\\xbc\\\n\\x09\\xa9\\x92\\x94\\xd0\\x31\\x7c\\x2d\\x65\\xe6\\x41\\xbe\\x2c\\x93\\x17\\x75\\\n\\x44\\x4c\\x19\\x0c\\x5e\\x86\\x0a\\x3e\\x89\\x3e\\xf3\\xb2\\x2a\\x79\\xdf\\x01\\\n\\x60\\x8c\\xc1\\x50\\x67\\xb6\\xa7\\x0c\\xaa\\x19\\x7b\\x55\\x8c\\x48\\x95\\x65\\\n\\x37\\xf0\\x75\\x9d\\x11\\xf3\\xef\\x7c\\x59\\x26\\x9f\\xaa\\x63\\xc7\\x94\\xc1\\\n\\xe0\\x65\\x44\\x9f\\xd0\\x67\\xf4\\x9d\\x97\\xf1\\x92\\xf7\\x1d\\x80\\xcd\\xcd\\\n\\xd1\\x4f\\xc3\\x53\\x3b\\xde\\x84\\x13\\xe9\\xf4\\xed\\x53\\xa6\\xbc\\x97\\x28\\\n\\xa8\\x7e\\x6e\\x6b\\x6d\\xbd\\x0a\\x74\\x06\\x71\\x7a\\xe7\\xe7\\x4f\\x9e\\xac\\\n\\x7c\\xa2\\x39\\xae\\x73\\x9e\\xc3\\x19\\x14\\xc7\\xe6\\xaa\\xe4\\xb3\\x71\\x9f\\\n\\xb8\\x85\\x20\\x2d\\xea\\xf2\\x5d\\x1e\\xc3\\x49\\xd2\\x77\\x00\\xe0\\xb8\\xdf\\\n\\xe7\\x05\\x60\\x5f\\x5b\\xb6\\x66\\xbb\\x66\\x1b\\xfd\\x10\\xdc\\x7f\\x08\\xf8\\\n\\x0a\\x45\\xbb\\x6e\\x2a\\xb6\\x02\\x54\\x97\\xa8\\xcd\\x37\\x07\\xdf\\x95\\x01\\\n\\x7d\\x07\\x00\\x4e\\x16\\x8c\\xe2\\x7b\\x85\\x6b\\xf2\\x10\\x5f\\x56\\xcd\\x9b\\\n\\x1a\\xfd\\x9c\\x4d\\x87\\xb1\\x77\\x6d\\x65\\x95\\x82\\xa0\\x9b\\x82\\xad\\x82\\\n\\x05\\xb2\\xa2\\x6f\\xa2\\xef\\x8a\\x70\\x96\\xb8\\xef\\x00\\xc0\\x4b\\x91\\x91\\\n\\x7c\\xc7\\x26\\x23\\x70\\xf6\\xd2\\x4f\\x32\\x47\\xda\\xb4\\xa9\\x7d\\x14\\xdb\\\n\\xda\\xd2\\x15\\x52\\x74\\x05\\xec\\x74\\xfa\\x42\\x7b\\xaa\\x6f\\x76\\xdf\\x05\\\n\\x71\\xa9\\xa2\\xef\\x00\\x68\\xc2\\x89\\x63\\x8d\\xd0\\x0f\\xa4\\x7a\\x76\\x15\\\n\\xa2\\x9f\\xb2\\x35\\x51\\xf2\\xa1\\xad\\xac\\x52\\x48\\xd1\\x15\\xb0\\x55\\xb0\\\n\\x40\\x56\\xf4\\x4d\\xf4\\x5d\\x11\\xce\\x12\\xf7\\x1d\\x00\\xb8\\x02\\x12\\xdf\\\n\\x56\\xb7\\x00\\x61\\x99\\xee\\x2f\\x00\\x2c\\xf9\\xed\\x77\\x0b\\x0f\\x56\\xa1\\\n\\x9e\\x03\\x90\\xa2\\x2b\\x60\\xab\\x12\\x96\\xea\\x9b\\xdd\\x77\\x55\\x3c\\x94\\\n\\xf7\\x1d\\x00\\xd6\\xfd\\xda\\xce\\xea\\x5f\\xd7\\xb5\\x93\\x5e\\x0c\\x49\\xe8\\\n\\xc0\\x29\\x39\\xdb\\xde\\x3d\\xac\\x60\\x3d\\x07\\x40\\xd4\\x15\\xb1\\x13\\x7d\\\n\\xca\\x7e\\x8a\\xbe\\x89\\xbe\\xcb\\xe2\\xf0\\x72\\xbe\\x03\\x00\\x60\\xf8\\xe2\\\n\\x24\\x99\\xda\\xda\\xbd\\x13\\x86\\x20\\xe0\\x14\\xbe\\x70\\x4f\\x26\\xcd\\xec\\\n\\xf4\\x1c\\x50\\x51\\x57\\xc4\\x4e\\x76\\x22\\x99\\x71\\xf0\\xcd\\xe6\\xbb\\x24\\\n\\x8c\\x4d\\x2c\\x88\\x00\\xd8\\x16\\x23\\x85\\x45\\x06\\xf8\\xe9\\x2b\\xf5\\xe3\\\n\\xb5\\x0d\\x3d\\x72\\x8e\\x2f\\xab\\xe4\\x0d\\x42\\x2f\\xf1\\xf2\\x60\\x28\\xbf\\\n\\x5d\\xce\\x37\\x49\\xe5\\x03\\xf0\\x2d\\xa5\\x9f\\x20\\x02\\x30\\x80\\x47\\x9d\\\n\\x59\\x51\\xf1\\x31\\x5f\\xf6\\x90\\xb7\\x05\\xa0\\xa0\\x8d\\x78\\x0f\\x40\\x04\\\n\\x7f\\x2f\\xa2\\x3b\\xc1\\xc8\\x28\\xe9\\x2e\\x65\\x47\\x2e\\x88\\x00\\xd8\\x3c\\\n\\xf1\\xb5\\x09\\xd7\\x85\\x54\\xcc\\x03\\x26\\x4f\\x4c\\xf3\\x95\\x92\\xf9\\x42\\\n\\x4a\\x3b\\x05\\xd1\\xc0\\xfd\\x15\\xf0\\x95\\x8b\\xb6\\xe9\\xc3\\x4d\\x1b\\xf7\\\n\\xbe\\xdb\\xf2\\x8b\\xf1\\xa5\\xc4\\x4c\\x37\\x99\\x1e\\xeb\\xe1\\x4c\\x3e\\x7f\\\n\\x1c\\x31\\xdb\\xf1\\xd0\\x97\\x2d\\x2d\\xfb\\xbf\\x0d\\x0b\\xad\\xd5\\x3d\\xfa\\\n\\xe5\\xd6\\x48\\xc9\\x6b\\x05\\x1d\\x17\\xa6\\x4d\\x9f\\x3e\\xfd\\x13\\x37\\x91\\\n\\x44\\xbd\\xd4\\x88\\x40\\xa0\\xc8\\xa5\\xb3\\xf8\\x1a\\x6e\\x7b\\x42\\x51\\xf6\\\n\\x13\\x9c\\x78\\x9c\\x27\\x1f\\xf5\\x38\\xbc\\xbd\\xb2\\x38\\x09\\xb9\\x34\\x78\\\n\\x81\\xd8\\x87\\x7d\\xd5\\x56\\x96\\x3f\\x0e\\x3b\\x9e\\x2b\\x13\\xfd\\x4a\\x7f\\\n\\x02\\xf9\\x91\\x36\\x7d\\x86\\x0c\\xf9\\x88\\x29\\x75\\x05\\x24\\x3a\\x6f\\x6a\\\n\\x6a\\xea\\xd3\\x5e\\x50\\xb2\\x15\\xb6\\x3f\\xf1\\xc4\\x42\\xda\\x84\\x64\\xcd\\\n\\x9d\\x5a\\xbe\\xda\\x4d\\x10\\xaf\\x84\\x8b\\x91\\xe2\\x86\\xa0\\xf0\\x82\\xb6\\\n\\x0f\\xed\\x6e\\xdc\\x1d\\x85\\xdf\\xad\\x60\\x4f\\xba\\xf9\\x60\\xaf\\xa7\\x07\\\n\\x23\\x97\\xb4\\x2a\\x95\\x69\\x53\\x29\\x00\\xd8\\x59\\x7d\\x34\\x5a\\x10\\xb9\\\n\\x64\\xbe\\x02\\xb1\\xab\\xb6\\x77\\x6e\\x2f\\xa5\\x23\\x3f\\x21\\x9d\\xed\\x78\\\n\\x68\\x27\\x1c\\x91\\x5c\\x01\\x83\\xe4\\x87\\x09\\x9b\\x9d\\x3f\\xe9\\xc1\\xbc\\\n\\x7c\\x63\\x9a\\xca\\xab\\x53\\xc4\\x51\\x0e\\x00\\x2a\\xa5\\x25\\x0d\\xce\\x86\\\n\\xce\\x99\\x5a\\xbe\\x0a\\x65\\x65\\x52\\xb6\\xe3\\xa1\\x0f\\x5b\\x9a\\xf7\\x2f\\\n\\x87\\xa7\\xa8\\x1f\\x39\\xfb\\xe3\\x8d\\x7c\\xc4\\x92\\xba\\x07\\x88\\x9d\\xd6\\\n\\x95\\x95\\xb5\\x75\\xf4\\xd5\\x6e\\x87\\x65\\xd3\\x2e\\xb1\\x0d\\x56\\x52\\x4a\\\n\\xe4\\xa3\\x7e\\xb6\\xe3\\xa1\\x8d\\xb5\\x55\\xe5\\x4f\\x81\\xbf\\xcb\\x31\\x6f\\\n\\x4f\\xde\\xc9\\x47\\x1c\\x4f\\x57\\x40\\xc2\\x80\\x94\\x91\\xeb\\x81\\xfc\\x04\\\n\\x16\\x7e\\x66\\x3b\\x1e\\xda\\xd8\\xd8\\xbc\\x6f\\x19\\xd0\\x06\\xc1\\xc0\\xe4\\\n\\x8f\\x7c\\x0b\\xc1\\xc2\\xf1\\xf1\\xcf\\x22\\xad\\x1d\\x7f\\x2e\\x92\\x44\\x55\\\n\\xa6\\x1d\\xb7\\x2e\\xb3\\x1d\\x0f\\xed\\x86\\xf3\\xa1\\x0f\\xc1\\x3b\\xe2\\x79\\\n\\x79\\x79\\x66\\xad\\xea\\x9c\\x2f\\xfa\\xed\\xfd\\x0a\\xd8\\xf9\\xf6\\x8d\\xf0\\\n\\x1b\\x9e\\x77\\xc3\\x94\\x33\\x03\\x40\\xe1\\xb5\\x24\\x6e\\xe3\\x90\\x7f\\xc1\\\n\\xff\\xdd\\x70\\x8c\\xed\\x39\\x32\\x6d\\xdc\\x5f\\xc4\\xce\\x7a\\x2c\\xe7\\x1a\\\n\\x5e\\x9c\\x0c\\xf5\\x00\\xe0\\xa9\\xb5\\x81\\x6c\\x0d\\xe8\\x2f\\x82\\x3f\\xb7\\\n\\x7b\\x88\\x09\\x6d\\xcf\\x93\\xd3\\xf4\\x41\\x52\\x37\\xa6\\x23\\xde\\x97\\xf3\\\n\\x47\\xae\\xe1\\x09\\x2c\\xa8\\x05\\xc0\\x22\\x8b\\x6c\\x83\\xc1\\x2e\\xb5\\x0e\\\n\\x80\\x39\\x72\\x27\\x39\\x0d\\x5f\\xb2\\x70\\x0b\\x42\\xae\\xe1\\x09\\xe4\\x63\\\n\\xd1\\x6d\\x04\\x3b\\x88\\x42\\xd5\\x40\\x86\\x4f\\x02\\x92\\xe4\\x23\\x04\\xc8\\\n\\x5a\\x3a\\xce\\x70\\x39\\x87\\xe7\\x40\\x83\\xfc\\x15\\xb0\\xe3\\x9d\\xb1\\x44\\\n\\x67\\x6f\\x01\\xa9\\xdc\\x99\\x7d\\x07\\xc4\\x94\\x2a\\x6a\\xc0\\x4f\\x50\\x8e\\\n\\x27\\xd3\\x47\\xdb\\x4e\\x14\\x90\\x5c\\xc3\\x4b\\xe1\\xa5\\xab\\x42\\xfe\\x0a\\\n\\xd0\\xcc\\x7b\\xd5\\xc9\\xc7\\x4e\\x20\\x60\\x96\\xae\\x60\\x41\\xae\\xe1\\x09\\\n\\xee\\x27\\x8a\\xf2\\x01\\xa0\\xe4\\xb6\\x84\\x92\\xf2\\x27\\x75\\xd8\\x3b\\xca\\\n\\x35\\x3c\\x17\\xd2\\xe4\\x03\\x80\\x3f\\x17\\xef\\x3d\\xd9\\x4f\\x3a\\x74\\xe1\\\n\\xe4\\x1a\\x9e\\x23\\x7b\\x2a\\x01\\x70\\x04\\x08\\x2b\\xfd\\x31\\xa0\\x12\\x80\\\n\\x23\\x9e\\xbb\\xa2\\xcc\\xe9\\xa8\\x4a\\xae\\xe1\\x39\\xd2\\x27\\x1f\\x00\\x4a\\\n\\x6c\\x5f\\x80\\x76\\x44\\x73\\xad\\x84\\xf5\\x80\\x98\\x72\\x0d\\x4f\\xf4\\x3f\\\n\\x5e\\x56\\x08\\x00\\xfd\\x39\\x2c\\xac\\x0c\\x17\\x9c\\x1e\\xaa\\x41\\x87\\xa2\\\n\\xae\\x90\\xac\\xba\\x1c\\xc2\\x13\\xdc\\x4f\\x14\\xe5\\x03\\x50\\x35\\xe6\\x10\\\n\\xa1\\xe6\\x33\\x09\\x45\\xe9\\x4f\\xd4\\x41\\x5d\\x31\\xe5\\x1a\\x9e\\xe8\\x7f\\\n\\xbc\\x2c\\x1f\\x00\\x54\\x28\\x69\\x5f\\x01\\x9b\\x6d\\xd2\\xdf\\xd7\\xb5\\x64\\\n\\x51\\xc7\\x2d\\xe5\\x1a\\x9e\\x03\\x0f\\x6a\\x01\\x98\\x38\\x31\\x46\\xce\\xd0\\\n\\xd9\\x30\\xa5\\xac\\xeb\\x79\\x3a\\xb2\\xa6\\x9d\\x75\\x96\\x2c\\xea\\xb8\\xa5\\\n\\x5c\\xc3\\x73\\xe0\\x41\\x7e\\x2b\\x42\\x54\\xde\\x75\\x68\\x34\\x8c\\xf0\\xbb\\\n\\xe1\\x85\\xf5\\x17\\xa1\\x09\\xb7\\xa3\\x21\\x26\\xec\\x28\\x61\\x1a\\x6c\\x47\\\n\\x93\\xe7\\x48\\xf5\\x98\\x77\\xac\\x3a\\xd9\\x7f\\xb9\\x86\\x27\\xcb\\x4b\\x28\\\n\\x17\\x32\\x10\\x32\\x10\\x32\\x10\\x32\\x10\\x32\\x10\\x32\\x10\\x32\\x10\\x32\\\n\\x10\\x32\\x10\\x32\\x10\\x32\\x10\\x32\\x10\\x32\\x10\\x32\\x10\\x32\\x10\\x32\\\n\\xf0\\x7f\\xc3\\xc0\\xff\\x00\\x48\\x0d\\xdc\\xc6\\xf7\\x9e\\xf1\\xd6\\x00\\x00\\\n\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x06\\x3f\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x64\\x00\\x00\\x00\\x64\\x08\\x06\\x00\\x00\\x00\\x70\\xe2\\x95\\x54\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0e\\xc3\\x00\\x00\\x0e\\xc3\\x01\\xc7\\x6f\\\n\\xa8\\x64\\x00\\x00\\x05\\xd4\\x49\\x44\\x41\\x54\\x78\\x5e\\xed\\x9c\\x5d\\x68\\\n\\x1c\\x55\\x14\\xc7\\x93\\xfa\\xfd\\xe8\\x27\\x28\\x0a\\x8a\\x0a\\x5a\\x50\\xc1\\\n\\x64\\x67\\x36\\x21\\xed\\x16\\xb3\\x7b\\x67\\x42\\xb2\\x77\\x26\\x75\\x37\\x31\\\n\\xb1\\x49\\xd5\\xd0\\x36\\xa5\\x25\\xfd\\x48\\xac\\x49\\x6b\\x12\\x8b\\xd6\\x2a\\\n\\x49\\x6d\\xc0\\x8f\\xa6\\xd8\\x4a\\xb5\\x82\\xe0\\x93\\x3e\\xe8\\xb3\\x55\\xab\\\n\\xbe\\x59\\x0d\\x28\\xa2\\x60\\x51\\xc1\\x2f\\xea\\x83\\x2f\\x56\\xa5\\xb9\\x9e\\\n\\x33\\xb9\\xb5\\x25\\x3d\\x9b\\xec\\x6e\\x76\\x3b\\x77\\x77\\xce\\x0f\\xfe\\x64\\\n\\xb3\\xbb\\x73\\xef\\x39\\xff\\x33\\x73\\xef\\x9d\\xdd\\x9d\\xa9\\x61\\x18\\x86\\\n\\x61\\x18\\x86\\x61\\x18\\x86\\x61\\x18\\x86\\x61\\x18\\x86\\x61\\x18\\x86\\x61\\\n\\x18\\x86\\xa9\\x1c\\xe2\\x99\\xcc\\x55\\x56\\x2a\\x7d\\x9b\\x25\\xda\\xef\\xb3\\\n\\x85\\x5f\\x67\\x3b\\xde\\xaa\\xb8\\x23\\x93\\x28\\x7c\\x1c\\x3c\\xe7\\xa6\\xef\\\n\\x85\\xc7\\xb7\\xe2\\x7b\\xf5\\x66\\xcc\\x52\\x69\\x72\\x33\\xd7\\x5b\\x4e\\xda\\\n\\x03\\x63\\x47\\x6d\\xe1\\xbd\\x6d\\x3b\\x72\\xc6\\x12\\xde\\x1f\\xf0\\xbf\\x2a\\\n\\x44\\x73\\xdb\\xc8\\x19\\xdd\\xc6\\x93\\x20\\x59\\xd7\\xd6\\x76\\x9d\\xee\\x86\\\n\\x59\\x80\\xda\\x06\\xe1\\x35\\x5a\\x8e\\x9c\\x04\\xd3\\x4e\\x80\\x99\\xb3\\xf3\\\n\\xcd\\x2d\\x99\\x84\\x3c\\x03\\x7d\\x7c\\x0e\\x9a\\x88\\x39\\x7e\\x03\\xf6\\x3d\\\n\\x17\\x02\\x53\\x63\\xb9\\xed\\x37\\x83\\x41\\x7b\\x2c\\x21\\x4f\\x92\\xe6\\x5d\\\n\\x04\\x41\\xdf\\xdf\\x5b\\x8e\\xf7\\x4c\\x63\\x52\\xde\\xa4\\xc3\\x8a\\x1e\\x96\\\n\\x2b\\x97\\x83\\x11\\x47\\x61\\x2f\\xfd\\x87\\x32\\x29\\x14\\x09\\xf9\\x37\\xfc\\\n\\x3d\\x62\\x27\\xfd\\xbb\\x75\\x98\\xd5\\x0f\\x8e\\xdf\\x50\\x88\\x97\\x61\\x8f\\\n\\xfc\\xf7\\x02\\x43\\x0c\\x11\\xc6\\x86\\x31\\x56\\xfd\\x5c\\x63\\x3b\\xe9\\xd5\\\n\\x30\\x47\\x9c\\xa2\\x4c\\x30\\x52\\xc2\\xfb\\x1d\\x16\\x05\\xbe\\x0e\\xbf\\x7a\\\n\\xc0\\xe5\\x27\\x0c\\x07\\x87\\xc8\\xa4\\x2b\\x41\\x10\\x7b\\x22\\x91\\xb8\\x52\\\n\\xa7\\x53\\xd9\\xe0\\x61\\x0f\\x09\\x7d\\x42\\x26\\x5a\\x41\\x82\\x23\\xfb\\x78\\\n\\xac\\xd9\\xbf\\x56\\xa7\\x55\\x99\\xe0\\x0a\\x0a\\xc6\\xe3\\x6f\\xa9\\x04\\x2b\\\n\\x52\\x42\\x7e\\x83\\x39\\xe9\\xf4\\x2a\\x8b\\xb9\\x13\\x3b\\xf9\\x15\\x99\\x58\\\n\\x05\\x0b\\x26\\xfb\\x2f\\xe3\\x22\\x73\\x8d\\x4e\\xb3\\x32\\x70\\x5d\\xf7\\x0a\\\n\\x38\\x32\\x3e\\xa3\\x12\\xaa\\x0a\\x09\\xef\\xd3\\xe5\\xd9\\xec\\xe5\\x3a\\x5d\\\n\\xf3\\x81\\x73\\x8b\\xfd\\x64\\x22\\x55\\x25\\x39\\xa1\\xd3\\x35\\x1b\\x3b\\xe5\\\n\\xb7\\x40\\xc0\\xe5\\xfb\\xd8\\xc3\\x1c\\xcd\\xda\\x22\\x9d\\xd2\\x69\\x9b\\x09\\\n\\x1e\\xc6\\x30\\xc6\\x7e\\x47\\x04\\x5f\\x9d\\x82\\x49\\xbe\\xae\\x6e\\xfd\\x65\\\n\\x3a\\x7d\\xf3\\x80\\x93\\xa8\\xad\\x64\\xe0\\x55\\x2d\\x39\\xa0\\xd3\\x37\\x8b\\\n\\x60\\x22\\x17\\xf2\\x37\\x3a\\xe8\\xea\\x15\\xac\\x24\\x7f\\x35\\x72\\x82\\xb7\\\n\\x5d\\x7f\\x0d\\x15\\x70\\x14\\x64\\x39\\x7e\\x97\\xb6\\xc1\\x1c\\xf0\\x4c\\x96\\\n\\x0a\\x36\\x22\\x3a\\xa6\\x6d\\x30\\x83\\xfb\\x9d\\xf6\\x1b\\x21\\xa8\\x28\\xac\\\n\\xac\\x68\\x09\\x79\\xa6\\x21\\xd5\\x7e\\x83\\xb6\\x23\\x7c\\x62\\xa9\\xf4\\x5a\\\n\\x32\\xd0\\x28\\x09\\x86\\x6c\\x6d\\x47\\xf8\\xc0\\x64\\x7e\\x94\\x0c\\x32\\x4a\\\n\\x12\\xf2\\x0d\\x6d\\x47\\xf8\\xc0\\xd2\\x6f\\x86\\x0c\\x32\\x42\\x82\\x25\\xff\\\n\\x17\\xda\\x8e\\x70\\x49\\x24\\x12\\x97\\xc2\\xde\\x81\\x5f\\x7d\\x92\\x81\\x46\\\n\\x45\\x96\\xe3\\xfd\\x95\\xcd\\x66\\x2f\\xd1\\xb6\\x84\\x47\\x5c\\xa4\\xef\\xa0\\\n\\x02\\x8c\\xa2\\x1a\\x5d\\xff\\x76\\x6d\\x4b\\x78\\xd8\\x29\\x69\\x53\\xc1\\x45\\\n\\x51\\x71\\xe1\\x5b\\xda\\x96\\xf0\\xd0\\xbf\\x18\\x24\\x03\\x8c\\x9a\\x62\\xae\\\n\\xd7\\xac\\x6d\\x09\\x0f\\xfc\\x11\\x00\\x15\\x5c\\x14\\x65\\xc4\\x0f\\x22\\x62\\\n\\xc2\\xeb\\xa6\\x82\\x8b\\xa2\\xd0\\x0b\\x6d\\x4b\\x78\\x70\\x41\\xce\\x89\\x0b\\\n\\x62\\x98\\xb8\\x20\\x86\\x89\\x0b\\x62\\x98\\xb8\\x20\\x86\\x89\\x0b\\x62\\x98\\\n\\xb8\\x20\\x86\\x89\\x0b\\x62\\x98\\xb8\\x20\\x86\\xc9\\x88\\x82\\x74\\x6c\\x1a\\\n\\xda\\xb3\\x61\\x74\\xaf\\x62\\xed\\x55\\xe8\\x85\\xb6\\x25\\x3c\\x7a\\x06\\x47\\\n\\x5f\\x1a\\x9e\\x3a\\xa4\\x58\\x87\\x14\\x7a\\xa1\\x6d\\x29\\x39\\xb5\\x31\\xc7\\\n\\x73\\x2c\\xe1\\x4d\\xe1\\xd7\\xb3\\xa0\\xb1\\xe0\\x6a\\xd5\\xf1\\xf1\\x65\\xfa\\\n\\xf5\\xff\\xe1\\x82\\x9c\\x13\\x59\\x10\\xf0\\x0c\\xbd\\x43\\x0f\\xe7\\xbc\\xf4\\\n\\xa6\\xd0\\x5b\\x78\\x25\\xff\\x2b\\x7f\\x61\\x3c\\x3c\\x32\\x7f\\x7c\\x9c\\x93\\\n\\xfc\\xc1\\x72\\xe4\\x64\\x2c\\x29\\xeb\\xf5\\x5b\\xb9\\x20\\xe7\\xe9\\xfc\\x82\\\n\\xd4\\xbb\\x6d\\x31\\xf4\\xca\\x16\\xf2\\x47\\xda\\x4b\\xef\\xb0\\x7e\\xeb\\xc2\\\n\\xe4\\xfb\\x71\\xba\\xe5\\x78\\x5f\\x5b\\x4e\\x7a\\xa4\\x7b\\x60\\xe4\\x75\\x2a\\\n\\xb8\\x28\\x0a\\xbd\\x80\\x02\\xec\\x42\\x6f\\x28\\xcf\\xe6\\x0b\\x6f\\x8c\\xa0\\\n\\x6d\\xcf\\x0d\\x14\\xe4\\x2d\\x6a\\xe3\\x05\\x34\\xdb\\xb2\\x66\\x9d\\x7a\\x74\\\n\\xc7\\x53\\x6a\\xc7\\x0b\\x07\\xc9\\x40\\xab\\x59\\x8f\\xef\\x3b\\x18\\xe4\\x8e\\\n\\x1e\\xa0\\x17\\xf3\\xbc\\x59\\x50\\xe8\\xb5\\xb6\\x3d\\x37\\x30\\x2c\\xe1\\x5d\\\n\\x14\\xc8\\x06\\x16\\x53\\x63\\xeb\\x6a\\xe5\\x3d\\xb6\\x59\\xad\\x1f\\x7d\\x4e\\\n\\x3d\\x41\\x04\\x5f\\x2d\\xc2\\xdc\\x70\\x55\\x85\\xb9\\x62\\xce\\x94\\x17\\xf9\\\n\\x49\\x9e\\xd0\\xb6\\xe7\\x06\\xde\\x78\\xec\\xc2\\x0d\\x0b\\x57\\xc2\\x7f\\x48\\\n\\x75\\x6c\\xdc\\xae\\x36\\xed\\xde\\x47\\x26\\x55\\x89\\xc2\\x5c\\xb2\\xfd\\x83\\\n\\x6a\\xa5\\xd7\\x49\\xe6\\x5c\\xa8\\x60\\x92\\xff\\x48\\xdb\\x9e\\x1b\\x18\\xff\\\n\\x5e\\xa3\\x36\\x5e\\x8a\\x56\\xb5\\x77\\xa9\\xec\\xc6\\x41\\x48\\x68\\x52\\x0d\\\n\\xef\\x7f\\x95\\x4c\\xd6\\x44\\xe1\\x91\\x80\\x31\\x63\\x11\\x30\\x07\\x2a\\xb7\\\n\\xa5\\x08\\xbc\\x7e\\x53\\xdb\\x9e\\x1b\\x38\\x8c\\xb6\\x50\\x1b\\x97\\x4a\\x2b\\\n\\x64\\xa7\\xf2\\xfb\\x36\\xab\\xbe\\xe1\\xa7\\xd5\\xd0\\xe4\\x01\\xd2\\x88\\x30\\\n\\x35\\x34\\x39\\x1d\\xc4\\x86\\xc3\\xd1\\x0a\\xd9\\x41\\xe6\\x50\\x2a\\x41\\x41\\\n\\x76\\x6a\\xdb\\x73\\x13\\x6f\\xf1\\xee\\xa1\\x36\\x2e\\x87\\xe2\\x2d\\xbe\\x12\\\n\\x9d\\x8f\\x04\\x47\\xcf\\xba\\x5d\\xcf\\xc2\\x04\\x39\\x4d\\x9a\\x54\\x4e\\xe1\\\n\\x4e\\x81\\x7d\\xe3\\xf0\\x8a\\xb1\\xc4\\x5d\\x9f\\x8c\\xb5\\x1c\\x8a\\xa5\\xe4\\\n\\x4a\\x6d\\xfb\\x82\\xd4\\x42\\xe5\\x7e\\xa1\\x1a\\x28\\xbb\\xc0\\x8c\\xe6\\x6c\\\n\\x4f\\x70\\x04\\x3d\\xbc\\x75\\xa7\\xea\\x1f\\x7b\\x3e\\xd8\\x63\\x29\\x23\\x8b\\\n\\xd1\\xe0\\xc4\\x81\\xa0\\x4d\\x6c\\x1b\\xfb\\x78\\xe0\\xc1\\x9e\\xa0\\x4f\\x32\\\n\\x96\\x32\\x0b\\x56\\x58\\xa7\\xf3\\xbe\\xc1\\x1a\\x9e\\x4d\\x52\\x8d\\x84\\xa5\\\n\\xa6\\x74\\x56\\x25\\x3b\\x7a\\x55\\x5b\\x6f\\xbf\\xca\\xf4\\x6f\\x53\\xdd\\x5b\\\n\\x86\\x55\\xef\\xf6\\x31\\x58\\x6e\\xee\\x0e\\x86\\x97\\xb3\\x9f\\x25\\xe1\\x63\\\n\\x7c\\x0e\\x5f\\xeb\\x1a\\x18\\x51\\x99\\x0d\\xdb\\x82\\x6d\\x92\\xd9\\xb5\\x41\\\n\\x1b\\x54\\xdb\\x61\\x09\\x3c\\x7e\\x57\\xdb\\xbd\\x38\\x0d\\xa2\\xed\\x2e\\xbc\\\n\\xe6\\x81\\x6a\\x88\\x55\\x1a\\x59\\xae\\xcc\\x6a\\xbb\\xf3\\xa3\\x88\\x13\\x44\\\n\\x56\\x9e\\x82\\xe5\\xee\\x49\\xfc\\x91\\xba\\xb6\\x3a\\x3f\\xea\\x85\\x77\\x0b\\\n\\x14\\xe5\\x4f\\xaa\\x41\\xd6\\xd2\\x04\\x73\\x74\\x8f\\xb6\\xb9\\x30\\x2c\\xd7\\\n\\xeb\\xa3\\x1a\\x64\\x15\\x2f\\x38\\x3a\\x3e\\x00\\x6b\\x8b\\xbf\\xc7\\x23\\x34\\\n\\xf2\\xe2\\xfc\\x46\\x59\\xc5\\xc9\\x72\\xe4\\x29\\x1c\\x79\\xb4\\xb5\\x45\\x32\\\n\\x3e\\xbe\\x0c\\x1a\\x7a\\x85\\xea\\x80\\x95\\xbf\\x82\\xe1\\x3f\\x25\\x6d\\xed\\\n\\xea\\xd2\\x81\\x06\\x87\\x40\\xa7\\xa9\\xce\\x58\\x8b\\x48\\x78\\x3f\\xeb\\xdb\\\n\\xd1\\x96\\x16\\xbc\\x9b\\x34\\x4c\\x48\\x1f\\x93\\x9d\\xb2\\x48\\xc1\\xe8\\xf2\\\n\\x7e\\xd9\\x6f\\x3f\\x8b\\x17\\xa6\\xc0\\xe4\\xf4\\x1e\\x5f\\x5b\\x98\\x53\\xb3\\\n\\xe0\\xcd\\x87\\x71\\x91\\x76\\xb5\\x65\\x17\\x87\\xa6\\xd6\\xd6\\xab\\x71\\x09\\\n\\x07\\x9d\\x4f\\xc3\\x9e\\x70\\x3c\\xca\\xcb\\x64\\xc8\\xfd\\x27\\x18\\x9a\\xde\\\n\\xc1\\x6f\\x51\\x8d\\xb8\\xd6\\xf0\\x2c\\x78\\x13\\x1a\\xbc\\xbd\\x5f\\x70\\x31\\\n\\x28\\xde\\x18\\xbf\\x9a\\x95\\x6c\\xbd\\x13\\x73\\x2d\\xf8\\x24\\x8f\\x61\\x18\\\n\\x86\\x61\\x18\\x86\\x61\\x18\\x86\\x61\\x18\\x86\\x61\\x18\\x86\\x61\\x18\\x86\\\n\\x61\\x18\\x86\\x61\\x98\\x02\\xa9\\xa9\\xf9\\x0f\\x29\\x1e\\x35\\x26\\xd5\\xcc\\\n\\x7e\\x62\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x0b\\x87\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x64\\x00\\x00\\x00\\x64\\x08\\x06\\x00\\x00\\x00\\x70\\xe2\\x95\\x54\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x16\\x25\\x00\\x00\\x16\\x25\\x01\\x49\\x52\\\n\\x24\\xf0\\x00\\x00\\x0b\\x1c\\x49\\x44\\x41\\x54\\x78\\x5e\\xed\\x9d\\x09\\x74\\\n\\x54\\xd5\\x19\\xc7\\xff\\xb3\\x65\\x0f\\xc9\\x10\\x20\\x0b\\x20\\x02\\x49\\x90\\\n\\x55\\x91\\x2d\\x04\\x5a\\x04\\x2d\\x15\\xb0\\x22\\xb2\\x0b\\xd8\\xe3\\x29\\x24\\\n\\x05\\xa9\\x89\\xb6\\x20\\x9b\\x68\\xa9\\x52\\xc0\\xd2\\x12\\x17\\x24\\x29\\xf5\\\n\\x9c\\x22\\x82\\x8d\\xc5\\x42\\x8b\\x09\\x07\\x6d\\xd9\\x4c\\xa0\\x94\\xad\\x28\\\n\\x42\\xc9\\x1c\\x08\\x92\\x10\\x43\\x96\\xc9\\x9e\\x0c\\xb3\\xf5\\xbe\\x99\\x2f\\\n\\xcc\\xbc\\x99\\xc9\\x64\\x26\\x84\\xf7\\x1e\\xe4\\xfd\\xce\\xf9\\x4e\\xee\\x77\\\n\\x97\\xdc\\xc9\\xfc\\xdf\\xbb\\xdb\\x37\\x6f\\xa2\\xb0\\x32\\x20\\x23\\x19\\x94\\\n\\xf4\\x53\\x46\\x22\\xc8\\x82\\x48\\x0c\\x59\\x10\\x89\\x21\\x0b\\x22\\x31\\x64\\\n\\x41\\x24\\x86\\x2c\\x88\\xc4\\x90\\x05\\x91\\x18\\xb2\\x20\\x12\\x43\\x16\\x44\\\n\\x62\\xc8\\x82\\x48\\x0c\\x59\\x10\\x89\\xd1\\x6e\\x67\\x59\\xfa\\xb2\\x52\\x9c\\\n\\x3c\\xf8\\x39\\x79\\x1d\\x8b\\x91\\x13\\xa7\\x40\\xdb\\x35\\x9a\\xbc\\x3b\\xa3\\\n\\xdd\\x04\\x29\\xbc\\x74\\x01\\x59\\x6b\\x7f\\x45\\x5e\\xc7\\x22\\x65\\xdd\\xef\\\n\\xf0\\xe0\\x43\\x03\\xc9\\xbb\\x33\\xe4\\x21\\x4b\\x62\\xc8\\x82\\x48\\x0c\\x59\\\n\\x10\\x89\\x21\\x0b\\x22\\x31\\x04\\x99\\xd4\\xe3\\x07\\x0f\\xa5\\xd4\\xbd\\x8d\\\n\\xee\\xeb\\xb3\\x94\\xe2\\xd3\\x9e\\x93\\xba\\x20\\x82\\xac\\xcf\\xce\\xa5\\xd4\\\n\\xbd\\xcd\\xaa\\x59\\x93\\x28\\xc5\\x47\\x5e\\x65\\xdd\\xc7\\xc8\\x82\\x48\\x0c\\\n\\x59\\x10\\x89\\x21\\x0b\\x22\\x31\\x64\\x41\\x24\\x86\\xa8\\x82\\x34\\x1e\\xfd\\\n\\x3b\\xca\\x52\\xc7\\xe2\\xec\\xb8\\x2e\\x38\\x35\\xb9\\x0f\\x6a\\xcf\\x1c\\xa5\\\n\\x12\\xcf\\x58\\x6a\\x2a\\x51\\xb5\\x69\\x09\\x0a\\x9f\\xee\\x85\\xbc\\x64\\x2d\\\n\\xae\\xac\\x99\\xcf\\x32\\x2d\\x54\\xda\\x36\\x4c\\xc5\\x57\\x50\\xb9\\x66\\x0e\\\n\\x2e\\x3f\\x19\\x87\\x3c\\xf6\\x3a\\x8a\\xdf\\x5f\\x4d\\x25\\xe2\\x20\\x9a\\x20\\\n\\x8d\\x87\\xf6\\xa0\\x6a\\xe3\\xcf\\x61\\x2a\\xba\\x02\\xab\\xd5\\x82\\xba\\x8a\\\n\\x32\\x9c\\x5b\\xfa\\x34\\x1a\\x75\\x5f\\x53\\x0d\\x3e\\xd6\\x5b\\x4d\\xa8\\x5c\\\n\\x35\\x13\\x8d\\x47\\xf6\\x02\\xb7\\x0c\\x30\\x9a\\x4d\\xf8\\xee\\x8b\\x7d\\xb8\\\n\\xf8\\x8b\\xc9\\x54\\xc3\\x7f\\xcc\\x15\\xdf\\xa3\\x7c\\xd9\\x54\\x18\\xce\\x1e\\\n\\x85\\xd5\\x64\\x84\\xb1\\xc9\\x80\\x82\\x1d\\xef\\xa0\\x28\\x63\\x05\\xd5\\x10\\\n\\x1e\\x51\\x04\\xb1\\x36\\xd4\\xa2\\x26\\xf3\\x35\\xf2\\x1c\\x98\\xcd\\x66\\x5c\\\n\\x5e\\xc9\\xae\\x7a\\x0f\\xd4\\x7f\\xb6\\x0d\\xc6\\xab\\x17\\xc9\\x73\\x70\\xf3\\\n\\x54\\x1e\\x6a\\x4e\\x7c\\x41\\x9e\\x7f\\xd4\\xfe\\x69\\x1d\\xac\\xd5\\x15\\xe4\\\n\\x39\\xb8\\xfa\\x97\\x6d\\x30\\x55\\x96\\x92\\x27\\x2c\\xa2\\x08\\xc2\\x0d\\x55\\\n\\x96\\xda\\x2a\\xf2\\xf8\\x54\\x5d\\xbf\\x0a\\x03\\x1b\\x46\\x78\\xb0\\xbd\\x6b\\\n\\xc3\\x81\\x8f\\xc8\\xe1\\xc3\\xed\\x6a\\x8b\\xb6\\xaf\\xb7\\x3b\\x7e\\x60\\x61\\\n\\x42\\x34\\xe6\\x79\\x8e\\xdf\\x70\\x17\\x46\\x51\\xe6\\x3a\\xf2\\x84\\x45\\x90\\\n\\x9d\\xfa\\x5b\\x6b\\xf9\\x3b\\xdc\\xea\\xdd\\xfb\\xd0\\x78\\xce\\x71\\xb5\\x97\\\n\\xd4\\x36\\xa1\\xc6\\x60\\x24\\x0f\\xe8\\xf7\\x93\\x09\\x88\\x79\\xe6\\x71\\xf2\\\n\\xd8\\x1b\\x74\\xb3\\x02\\x65\\x9b\\xff\\x48\\x1e\\x60\\x30\\x5b\\x50\\xa8\\xaf\\\n\\x27\\x0f\\x08\\x0c\\x0e\\x44\\xd2\\x7b\\x6b\\xc9\\xf3\\x0d\\xc3\\x85\\xcb\\xd0\\\n\\xef\\xf8\\x8c\\x3c\\xd8\\xfa\\xe7\\x5e\\x47\\x33\\xda\\xd8\\x2e\\x18\\xf2\\xe6\\\n\\xcb\\xe4\\xd9\\x59\\xbd\\xce\\xf3\\x89\\xc3\\x3d\\xb7\\x53\\x57\\x18\\xf4\\x3c\\\n\\x33\\x95\\x57\\x52\\x89\\x67\\x1a\\x6e\\x14\\xf1\\xea\\x9b\\x6f\\x16\\x53\\x89\\\n\\x67\\xb8\\xb1\\xdf\\xb9\\xbe\\x2f\\x66\\x2e\\xbd\\x41\\xad\\x3d\\x63\\xa8\\xa9\\\n\\x73\\x6b\\x23\\x04\\xe2\\x4c\\xea\\x26\\x13\\x25\\x3c\\x63\\x35\\xf1\\x57\\x4e\\\n\\x56\\x36\\x84\\x78\\xc3\\x0a\\x05\\xa5\\x7c\\xc7\\x6a\\xf1\\x3e\\x30\\x58\\xd8\\\n\\x5d\\x28\\x06\\xa2\\x08\\xa2\\x0c\\x09\\xa2\\x94\\x67\\x34\\xe1\\x21\\x94\\xb2\\\n\\xa3\\x0c\\xf6\\x5e\\x5f\\xad\\xf4\\xff\\xcf\\x50\\xb2\\x61\\xce\\x1b\\x9a\\xc0\\\n\\x00\\x4a\\x09\\x8b\\x30\\x82\\xf4\\x99\\xc9\\x33\\x4d\\xff\\x31\\x54\\xe0\\x99\\\n\\x88\\x71\\xb3\\xf9\\xf5\\x47\\xff\\x0c\\x56\\xa5\\x9a\\x4a\\xdd\\x09\\xd6\\x76\\\n\\xe6\\xd5\\xf7\\xc5\\x34\\xc3\\x59\\x1f\\x5e\\x08\\x7d\\xa0\\x8f\\x7b\\x3b\\x01\\\n\\x10\\x46\\x10\\xed\\x00\\x9e\\x05\\xfd\\xe8\\x05\\x2a\\x70\\x47\\x13\\x10\\x80\\\n\\xc8\\xa7\\x96\\xf2\\xea\\x2b\\x62\\x87\\x23\\x68\\xf8\\x78\\xaa\\xe1\\x4e\\xd7\\\n\\xc7\\xa7\\xf1\\xea\\xfb\\x62\\x9a\\x47\\x9f\\x81\\x32\\xfa\\x01\\xfa\\x0d\\xee\\\n\\xc4\\xcc\\x79\\xc5\\xbd\\x9d\\x00\\x88\\x32\\x64\\x69\\x12\\x1e\\x46\\xd0\\xe8\\\n\\x1f\\x93\\xc7\\xa7\\xd7\\x8c\\x45\\xec\\x55\\xb9\\xbf\\xac\\xf0\\xe7\\x5e\\x81\\\n\\x55\\xa1\\x22\\xcf\\x41\\x50\\x60\\x10\\x7a\\x2c\\x7d\\x8b\\x3c\\x3f\\x50\\x28\\\n\\xd0\\x69\\xc1\\x72\\x72\\xf8\\x44\\xc4\\x76\\x47\\xe4\\x13\\xd3\\xc9\\x13\\x16\\\n\\x51\\x04\\xe1\\x88\\x48\\xfb\\x3d\\x34\\x7d\\x87\\x90\\x67\\x27\\x7a\\x68\\x12\\\n\\x7a\\xa4\\x6d\\x20\\x8f\\x0f\\x27\\x62\\xe4\\x4b\\x6f\\xc3\\xaa\\x72\\x0c\\x5d\\\n\\x1a\\xb5\\x06\\x03\\xb7\\xec\\x81\\x22\\xc0\\xfb\\x1c\\xd3\\x12\\xc1\\xe3\\x9f\\\n\\x45\\xd8\\x8c\\x25\\xe4\\xd9\\x09\\x0e\\x0b\\xc5\\xc0\\xcc\\x2f\\xc9\\x13\\x1e\\\n\\x71\\x23\\x86\\x26\\x23\\x9a\\xfe\\x7d\\x10\\x15\\x27\\xbe\\x44\\xc8\\xe0\\x24\\\n\\x68\\x27\\x7a\\x1f\\xd7\\x39\\x4c\\x37\\x0a\\x51\\x7f\\x64\\x1f\\xaa\\x8b\\xae\\\n\\x20\\x6e\\xe1\\x6b\\x50\\x6b\\xbb\\x50\\x49\\xdb\\x31\\x5e\\x3e\\x87\\x6a\\xb6\\\n\\x59\\xbd\\x65\\x34\\x21\\xf6\\x85\\x15\\x50\\x04\\xf1\\x17\\x15\\xcd\\x08\\x11\\\n\\x31\\x94\\x43\\xb8\\x7e\\x20\\x87\\x70\\x3b\\x20\\xb2\\x20\\x12\\x43\\x16\\x44\\\n\\x62\\xc8\\x82\\x48\\x0c\\xd1\\x05\\xe1\\x82\\x44\\x35\\xc7\\xf6\\xc3\\xe4\\x21\\\n\\x2e\\xe1\\x11\\x6e\\x65\\x76\\xfe\\x78\\xab\\xd1\\x45\\x67\\xfc\\xee\\x43\\x44\\\n\\xc4\\x13\\xc4\\x6c\\x42\\xf5\\xfb\\x2b\\x50\\xfa\\xfc\\x70\\xe8\\x56\\x3f\\x8f\\\n\\xfc\\x27\\xfb\\xa0\\x78\\xeb\\xeb\\x54\\xe8\\x19\\xe3\\xa5\\xd3\\x28\\x5d\\x38\\\n\\x06\\xdf\\x2f\\x9f\\x86\\xd3\\x8b\\xa7\\xe0\\xcc\\xd3\\x89\\x30\\x7a\\x3b\\x09\\\n\\x6e\\x43\\x1f\\x62\\x23\\x9a\\x20\\x35\\x7f\\xde\\x80\\x86\\x9c\\x1d\\x50\\xc0\\\n\\x7e\\xaa\\x6a\\xb1\\x58\\xa0\\xdb\\xf1\\x07\\x54\\xee\\xf7\\x1c\\x88\\x32\\x97\\\n\\x97\\xa0\\xf2\\x8d\\xf9\\xb0\\x94\\x15\\x51\\x0e\\xfb\\x1d\\xa5\\x25\\xf8\\x7a\\\n\\xe1\\x63\\xe4\\xb9\\xe3\\x6f\\x1f\\x52\\x40\\x14\\x41\\xcc\\xa5\\xd7\\x51\\xbf\\\n\\xcf\\x11\\x70\\x6a\\x86\\xdb\\x12\\xe9\\xde\\x59\\x45\\x1e\\x9f\\xba\\xdd\\x9b\\\n\\x61\\xa9\\xad\\x26\\xcf\\x41\\x4d\\xe9\\xf7\\xb8\\xf9\\xc9\\x7b\\xe4\\x39\\x68\\\n\\x4b\\x1f\\x52\\x40\\x18\\x41\\xcc\\x4d\\x3c\\x6b\\x3c\\xbc\\xc7\\x36\\x17\\x78\\\n\\xa2\\xa1\\xba\\x0a\\xf5\\x67\\x0e\\xf3\\xea\\x5b\\x0d\\xb5\\x68\\x60\\xbb\\xf3\\\n\\x96\\x28\\xd9\\xb3\\x9d\\x57\\x9f\\x33\\x7f\\xfb\\xf0\\xc9\\x04\\x40\\x98\\x9d\\\n\\xfa\\xab\\x49\\x94\\xb2\\xa3\\xdf\\x75\\x00\\x4d\\x97\\xae\\x91\\xe7\\x1e\\xc2\\\n\\xed\\x3b\\x61\\x18\\x7a\\xce\\x70\\x9c\\xee\\x1a\\x4b\\xca\\x51\\xfe\\x01\\x7b\\\n\\x83\\x09\\xd7\\x10\\x6e\\x40\\x80\\x0a\\xc9\\x5b\\xf8\\xe1\\x56\\x7f\\xfb\\xf0\\\n\\x85\\x55\\x1b\\x4f\\x50\\x8a\\xcf\\x3d\\xbf\\x53\\x37\\xd7\\x34\\x50\\xca\\x33\\\n\\x86\\xca\\x5a\\x4a\\xd9\\x31\\x57\\x3b\\xde\\x7c\\x4f\\x18\\x8d\\xee\\xd1\\x3d\\\n\\x7f\\xfb\\x90\\x0a\\xe2\\xad\\xb2\\xbc\\xa0\\x50\\xb4\\xcb\\x4d\\xeb\\x15\\x21\\\n\\xfa\\x68\\x0b\\xa2\\x08\\xa2\\x72\\x09\\xd1\\xba\\x12\\xd0\\x39\\x82\\x52\\x76\\\n\\x54\\x91\\x61\\x94\\xf2\\x8c\\x46\\xed\\x1e\\x27\\xf1\\xb7\\x0f\\xa9\\x20\\xcc\\\n\\x1c\\xb2\\xfb\\x6f\\x94\\xb2\\x53\\xf7\\xd7\\x6d\\xa8\\xdd\\xb1\\x89\\x3c\\xf7\\\n\\xf1\\x7d\\xc4\\xb6\\xfd\\x08\\x1d\\x32\\x8a\\x3c\\x06\\x9b\\x9c\\x4b\\xe6\\x0d\\\n\\x03\\x1a\\xeb\\x6c\\xae\\xeb\\x1c\\xa2\\xed\\x1d\\x8f\\x87\\x3f\\x3e\\x4e\\x9e\\\n\\x1d\\xbf\\xfb\\xf0\\x81\\x55\\x73\\xa7\\x51\\x8a\\xcf\\xbd\\x37\\x87\\xa8\\x82\\\n\\x78\\x16\\x3c\\x61\\x16\\x14\\x4e\\x81\\x26\\x67\\xc2\\x22\\xb5\\x08\\x1d\\x3a\\\n\\x8e\\xdf\\x26\\x30\\x1c\\x21\\xe3\\x9f\\xa5\\x1a\\xee\\x74\\x9f\\xbe\\x88\\x5f\\\n\\x9f\\x99\\xdf\\x7d\\xf8\\x62\\x02\\x20\\xce\\x90\\xd5\\x35\\x0e\\xa1\\xd3\\x17\\\n\\x93\\xe7\\x40\\xa1\\x50\\xa0\\xef\\xcb\\x1b\\xc9\\xe3\\x13\\x36\\x27\\x1d\\x8a\\\n\\x88\\x28\\xf2\\x1c\\x44\\xc4\\xf6\\x40\\x97\\x99\\xfc\\xa8\\x1f\\x47\\x5b\\xfa\\\n\\x90\\x02\\xa2\\x4d\\xea\\xe1\\x0b\\x96\\x23\\x74\\xea\\xc2\\xdb\\x71\\x72\\x95\\\n\\x4a\\x85\\x7e\\x29\\xab\\xa0\\x7d\\x72\\xae\\xcd\\x77\\x45\\x15\\x15\\x83\\xa8\\\n\\x5f\\xef\\x84\\x32\\xba\\x17\\xe5\\xd8\\xc5\\x18\\xfc\\x21\\xdb\\x4f\\xb4\\x80\\\n\\xbf\\x7d\\x48\\x01\\xd1\\x23\\x86\\x16\\xfd\\x4d\\x34\\x5c\\x3e\\x87\\xe0\\x01\\\n\\x23\\xd8\\x44\\xac\\xa5\\x5c\\x2f\\x98\\x4d\\x68\\x2a\\x38\\x0f\\x0b\\xfb\\x19\\\n\\x32\\x70\\x24\\x65\\x7a\\xc7\\xef\\x3e\\x5a\\xa0\\x43\\x44\\x0c\\x95\\xda\\x6e\\\n\\x08\\x1b\\x35\\xd1\\xf7\\x37\\x8a\\xcd\\x0b\\x41\\x0f\\x3d\\xea\\xb3\\x18\\x1c\\\n\\x7e\\xf7\\x21\\x22\\x77\\x5d\\x10\\x7d\\xc1\\x09\\xdb\\xb8\\x7d\\x67\\x96\\x8a\\\n\\xfb\\x23\\x2a\\xdf\\x3a\\x77\\x5d\\x10\\x6d\\x42\\x92\\xed\\x40\\xcf\\x5a\\x90\\\n\\x83\\x14\\xca\\xe3\\x91\\x92\\x63\\x2f\\x77\\xb6\\x82\\x02\\xe4\\x6c\\x49\\x41\\\n\\x32\\x55\\xe9\\x48\\x08\\x37\\x64\\xc5\\x4f\\xc2\\xb2\\x2d\\x3e\\xbe\\xc5\\xf1\\\n\\xf1\\x98\\x94\\x96\\x89\\xbc\\x96\\x44\\xbc\\x8f\\x11\\x7d\\x0e\\xf1\\x0a\\x13\\\n\\x31\\x33\\xa7\\x63\\x49\\x22\\xbe\\x20\\x37\\x8e\\xa3\\x78\\xd3\\x4b\\x2d\\x07\\\n\\x8d\\x26\\x2d\\x83\\xaf\\x37\\x16\\x07\\xf7\\xb8\\x5c\\xc3\\x81\\x8f\\x71\\x6d\\\n\\xdd\\x42\\xd4\\x9e\\x38\\x48\\xb9\\xde\\xb9\\xf5\\xed\\x7f\\x50\\xf6\\xc1\\xeb\\\n\\xb6\\x67\\x0b\\xcd\\x8d\\xde\\x0f\\x32\\xef\\x36\\xe2\\x0b\\xf2\\xdf\\xad\\x28\\\n\\xdd\\xbf\\x13\\xe7\\x7f\\xb3\\x04\\x17\\x17\\x71\\x4f\\x4d\\xe5\\x22\\x35\\xd5\\\n\\x79\\x0a\\x8f\\x47\\xe2\\x20\\x4a\\xb6\\x82\\xe9\\xda\\x25\\x94\\xa5\\xfe\\x10\\\n\\xd5\\xef\\x2e\\xc3\\x8d\\x03\\x9f\\xe2\\x4c\\xda\\x74\\x14\\xae\\x77\\xdf\\x34\\\n\\x3a\\x53\\x93\\xb5\\x16\\x15\\xcb\\xa6\\xa2\\x72\\xcf\\x56\\xe8\\x76\\xbd\\x8f\\\n\\x93\\x53\\xfa\\xc2\\xf0\\x5d\\x01\\x95\\x0a\\x8f\\xa4\\x86\\xac\\xd2\\xf3\\x27\\\n\\x71\\x7d\\xe5\\x46\\x7c\\x43\\x7e\\x33\\x93\\x32\\x33\\xe1\\x79\\x07\\xe0\\x84\\\n\\xc9\\x08\\xfd\\xfa\\x45\\x30\\x3b\\x3d\\xac\\xc9\\x6d\\xb0\\xae\\xed\\xfb\\x08\\\n\\x95\\xb9\\xbb\\xec\\x19\\x2e\\x34\\xfe\\x33\\x1b\\xf5\\xfb\\xb6\\x93\\x67\\xc7\\\n\\x50\\x5f\\x8f\\x6f\\x96\\x4e\\x21\\x4f\\x78\\x24\\x37\\x87\\x1c\\xcf\\xce\\x43\\\n\\x3e\\x5b\\x69\\xb5\\x4a\\x6e\\x2a\\x7f\\x69\\xac\\x09\\x40\\xb7\\xac\\xaf\\xb0\\\n\\xbc\\xcc\\x5e\\x5c\\xa4\\xbf\\x85\\xcd\\x17\\xeb\\xf0\\xd8\\xc9\\x3a\\x44\\xcd\\\n\\x5b\\x8c\\x0c\\x9d\\x3d\\xdf\\xb9\\x5d\\xc8\\x13\\xb3\\x11\\x97\\x53\\x62\\xb3\\\n\\xd7\\xe9\\x03\\x29\\xc5\\xd5\\x26\\xbc\\x71\\xb8\\xc0\\x5e\\x67\\x4c\\xaa\\xa3\\\n\\x9d\\x40\\x08\\x23\\x88\\xfe\\x5b\\xbb\\x35\\x78\\x0f\\x1a\\xb1\\x3d\\x35\\x3e\\\n\\xba\\x62\\x62\\x97\\xf5\\x5e\\x47\\x9b\\x96\\x2c\\x29\\x0d\\xd6\\xec\\x15\\x1e\\\n\\x97\\xc6\\x57\\x0b\\x2b\\x30\\xeb\\x52\\x13\\xf6\\x37\\xc7\\xa0\\xf4\\x35\\x48\\\n\\x9f\\x9d\\x06\\x9d\\x53\\xbb\\xd1\\x54\\xe4\\x4c\\x71\\x69\\x23\\xe6\\xff\\xcf\\\n\\xa9\\x5d\\x7e\\x16\\xd2\\x9f\\x5b\\x69\\x6f\\xc7\\x99\\x00\\x08\\x23\\xc8\\x95\\\n\\x4f\\xed\\x56\\xe1\\xe5\\x73\\x51\\x4d\\x16\\x76\\x45\\x37\\x60\\x3f\\x97\\x2e\\\n\\xc9\\x73\\xb4\\xf1\\x66\\x7d\\x8a\\xe0\\x3a\\xbd\\x5c\\xd2\\x55\\x20\\xad\\x36\\\n\\x1c\\xd9\\xa3\\x3b\\x61\\x43\\x57\\xca\\xe4\\xd0\\x1f\\xe5\\xb5\\xeb\\x4f\\xd9\\\n\\xcd\\x5c\\x2e\\xac\\xc2\\x6f\\x1b\\x02\\xb1\\x73\\x64\\x38\\xbf\\x9d\\xe1\\x9c\\\n\\xa3\\x9d\\x00\\x88\\x3f\\x64\\x5d\\xaf\\xc0\\xb0\\x63\\x7a\\x8c\\x3f\\xcf\\xc4\\\n\\x68\\xbe\\x32\\x8d\\x6d\\xff\\x40\\xc1\\x29\\xbd\\x1a\\xe9\\x83\\x03\\xd0\\x83\\\n\\xa5\\x47\\x75\\x76\\x3a\\x7e\\x8f\\x52\\xb2\\xe5\\x81\\x03\\xd7\\x41\\xf1\\x6c\\\n\\x95\\x1a\\x0b\\x7a\\xab\\xd0\\x9d\\x95\\xf0\\xda\\xc5\\x77\\xe1\\xb5\\xbb\\xdb\\\n\\x88\\x2f\\x48\\xcf\\x28\\x9c\\xfe\\x81\\x16\\x87\\x86\\x84\\xe0\\xa9\\x70\\xca\\\n\\x53\\xb9\\x47\\x00\\x7d\\x46\\xab\\x46\\x6f\\x4a\\x22\\x22\\x88\\xae\\x76\\x15\\\n\\xd6\\x4d\\x88\\xb3\\x65\\x35\\xe3\\xf6\\xdc\\x6e\\xa4\\xca\\x26\\xa2\\x0d\\xd6\\\n\\x6e\\x4b\\x2c\\x97\\xe8\\x89\\x2d\\x0b\\x84\\x94\\x43\\x28\\x41\\x82\\xd9\\x5f\\\n\\xc7\\x99\\x46\\x43\\x19\\x1e\\x08\\x52\\xe2\\x97\\xfd\\x99\\x28\\x5c\\x3a\\x94\\\n\\xbd\\x8b\\xcd\\x6d\\xbc\\x9a\\xfb\\x61\\xe1\\xf0\\xd8\\x40\\x87\\x20\\x8c\\x51\\\n\\xbd\\xc3\\x70\\x68\\x64\\x30\\xd2\\x93\\x06\\x7a\\x6d\\x37\\xb4\\x5b\\x80\\xed\\\n\\xee\\x68\\x66\\xdc\\x88\\x07\\x61\\xbd\\xb0\\x06\\x69\\x89\\x4e\\xfd\\x09\\x80\\\n\\x30\\x82\\x0c\\x60\\xbb\\x6d\\xce\\x62\\x62\\x28\\xa3\\x25\\x94\\x98\\xdb\\x8b\\\n\\xdd\\x1d\\x89\\x54\\xbf\\x55\\x6b\\x75\\x31\\x6c\\x83\\x7b\\xf4\\x2d\\x7c\\xda\\\n\\x06\\x5e\\xbb\\xd6\\xee\\xc1\\xce\\xc9\\xec\\xd2\\xe0\\xf5\\xc5\\x4c\\x00\\xc4\\\n\\x1f\\xb2\\x5c\\x18\\xd0\\x3f\\x06\\xc9\\x21\\xdd\\xc8\\x73\\x26\\x17\\x19\\x6d\\\n\\x5c\\x83\\x46\\x8f\\x71\\x7c\\x4d\\x47\\x33\\xde\\xbe\\x6a\\x80\\x0b\\x64\\xc5\\\n\\xa5\\xf8\\xf7\\x55\\x1d\\xed\\x85\\xa4\\x04\\xd1\\xa8\\xd4\\xe8\\xf7\\xee\\x6a\\\n\\xb7\\x95\\x93\\x8d\\xdc\\xbd\\xc8\\xa6\\xa4\\x3f\\x70\\x0f\\x71\\xf6\\x5e\\xcb\\\n\\xdf\\xfc\\xb5\\x46\\x9f\\x79\\x2f\\x42\\xad\\x75\\x5e\\x6a\\x09\\x87\\xf8\\x82\\\n\\x84\\x77\\x87\\x42\\xad\\x46\\xa7\\x6e\\x31\\x78\\x64\\x5b\\x0e\\x82\\xe3\\x17\\\n\\x23\\x33\\xd3\\x75\\x28\\xd2\\x21\\xe3\\xcd\\x2c\\x0c\\x4a\\x6c\\x7d\\x82\\x55\\\n\\x26\\xbf\\x6c\\x7b\\xfe\\x5c\\xa5\\xd2\\xa0\\x73\\xef\\x44\\x0c\\xdd\\x75\\x0a\\\n\\xaa\\x30\\x1f\\x3e\\xf2\\xa3\\x0e\\x44\\x60\\x50\\x08\\x12\\x17\\xbe\\x8a\\xee\\\n\\x2f\\xb6\\xe1\\x31\\xeb\\x76\\x42\\x7c\\x41\\xc6\\x6e\\xc0\\xd0\\x7f\\xdd\\xc4\\\n\\xa3\\xff\\x28\\x40\\xe8\\x10\\x4f\\xdb\\x35\\x26\\x47\\xc6\\x4f\\x91\\x9e\\x9f\\\n\\x8c\\x01\\x09\\x94\\xe1\\x05\\xf5\\xa0\\x99\\x88\\xfe\\xf0\\x04\\x46\\x1e\\x2b\\\n\\xc7\\x90\\x4f\\x4e\\x23\\x20\\xfa\\xf6\\xda\\xc9\\x2b\\xc1\\x29\\xc7\\x30\\xfa\\\n\\x48\\x29\\xe2\\x16\\xad\\xa1\\x1c\\x71\\x90\\xdc\\x1c\\xe2\\x8a\\x2e\\x63\\x0c\\\n\\x12\\xd2\\xf3\\x59\\x6a\\x10\\x7c\\xb8\\x41\\xee\\x79\\x84\\x13\\x44\\x97\\x8b\\\n\\xb7\\x6d\\x6f\\xac\\x0b\\x59\\x7b\\x3d\\x9c\\x17\\xe9\\x58\\xf5\\x0c\\xa4\\x8e\\\n\\x51\\x90\\x18\\x8c\\xe4\\x01\\x70\\xbb\\x41\\xd8\\xbc\\xe2\\x7a\\x10\\x99\\x9f\\\n\\xfd\\x39\\x6b\\xdd\\x0a\\x6d\\x6d\\x27\\x00\\x77\\x5d\\x90\\xdb\\x31\\xf5\\x84\\\n\\xc9\\xc8\\xa2\\x3c\\x3e\\x59\\x48\\x4f\\xa0\\x03\\xc2\\xdb\\x96\\x80\\x84\\xc9\\\n\\xe9\\xc8\\x72\\xd6\\x6f\\x50\\x22\\x7f\\xc7\\xcc\\x1d\\x12\\x4e\\xce\\x82\\x9b\\\n\\xc4\\xf9\\xe9\\x48\\x60\\xbf\\x83\\x77\\x82\\xef\\x4c\\x5b\\xdb\\x09\\xc4\\x5d\\\n\\x17\\xe4\\x76\\x4c\\xfd\\x4e\\xcd\\x75\\xa2\\x9f\\x94\\xe9\\xb9\\x1e\\x99\\xdb\\\n\\xba\\xa0\\x99\\xb6\\xb6\\x13\\x08\\xc9\\xcf\\x21\\x1d\\x0d\\x41\\x3e\\x28\\x27\\\n\\xff\\xbb\\x0a\\xdf\\x11\\x44\\x90\\xfb\\x1d\\xf9\\xbb\\x4e\\xee\\x63\\x64\\x41\\\n\\x24\\x86\\x2c\\x88\\xc4\\x90\\x05\\x91\\x18\\xed\\x36\\xa9\\x57\\x57\\x94\\xe3\\\n\\xdc\\x57\\x87\\xc8\\xeb\\x58\\x3c\\x32\\x76\\x3c\\x22\\xa2\\xee\\xfc\\x9b\\xed\\\n\\x38\\xda\\x4d\\x10\\x99\\xf6\\x41\\x1e\\xb2\\x24\\x86\\x2c\\x88\\xc4\\x90\\x05\\\n\\x91\\x18\\xb2\\x20\\x12\\x43\\x16\\x44\\x62\\xc8\\x82\\x48\\x0c\\x59\\x10\\x89\\\n\\x21\\x0b\\x22\\x31\\x64\\x41\\x24\\x86\\x2c\\x88\\xc4\\x90\\x05\\x91\\x14\\xc0\\\n\\xff\\x01\\xb9\\x24\\x1a\\xb0\\xbe\\xfb\\xfb\\x87\\x00\\x00\\x00\\x00\\x49\\x45\\\n\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x1a\\xab\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x50\\x00\\x00\\x00\\x50\\x08\\x06\\x00\\x00\\x00\\x8e\\x11\\xf2\\xad\\\n\\x00\\x00\\x00\\x06\\x62\\x4b\\x47\\x44\\x00\\xff\\x00\\xff\\x00\\xff\\xa0\\xbd\\\n\\xa7\\x93\\x00\\x00\\x1a\\x60\\x49\\x44\\x41\\x54\\x78\\x9c\\xed\\x9c\\x79\\x70\\\n\\x54\\xd7\\x9d\\xef\\x3f\\xe7\\x76\\xb7\\xba\\xb5\\xb7\\xf6\\x0d\\x49\\xec\\x42\\\n\\x58\\x80\\x17\\xb0\\x84\\x58\\x46\\x18\\x2c\\x81\\x8d\\x97\\xe1\\x05\\x87\\x78\\\n\\xc6\\xc9\\x4c\\x9c\\x99\\xd4\\x64\\x32\\x76\\xe2\\x8c\\x0d\\x38\\xcb\\xe0\\xbc\\\n\\x18\\x01\\x4e\\xf2\\x1c\\x3b\\x6f\\x26\\x95\\xf2\\xbc\\x3c\\x3b\\xc9\\xd8\\x63\\\n\\x4f\\xe2\\x18\\x63\\x83\\x64\\xb3\\x18\\x5b\\x0b\\xfb\\x26\\x04\\x42\\xec\\x12\\\n\\xda\\x85\\x96\\x96\\x5a\\xbd\\xdd\\x7b\\xde\\x1f\\xbd\\x20\\xa9\\x57\\x61\\xc7\\\n\\x7e\\x35\\xc5\\xb7\\xaa\\xab\\xba\\xce\\xfd\\xdd\\x73\\xcf\\xf9\\xde\\xb3\\xfc\\\n\\xb6\\x73\\xe1\\x16\\x6e\\xe1\\x16\\x6e\\xe1\\x16\\x6e\\xe1\\x16\\xbe\\x18\\x88\\\n\\x2f\\xba\\x01\\xab\\xb6\\xd6\\x4f\\xd2\\x34\\x39\\x4b\\x28\\x62\\x26\\x52\\xce\\\n\\x92\\x90\\x23\\x85\\xc8\\x10\\xc8\\x42\\x24\\x51\\x00\\x08\\x1c\\x68\\xe2\\x34\\\n\\x42\\x76\\x4b\\x49\\xab\\xa2\\x88\\x26\\xa9\\xc9\\x73\\x06\\x55\\x9e\\xd9\\xf1\\\n\\x83\\xd2\\x6b\\x5f\\x64\\xfb\\x3f\\x77\\x02\\x1f\\xfa\\xd9\\xa9\\x5c\\xab\\x3a\\\n\\xb2\\x5c\\xd1\\xd4\\xa5\\xc0\\x32\\x60\\xf2\\xa7\\xac\\xf2\\x32\\x88\\x3d\\x42\\\n\\x91\\x1f\\xdb\\xa4\\xf8\\x70\\xdf\\xfa\\x92\\xd6\\x4f\\xdd\\xc8\\x09\\xe0\\x73\\\n\\x21\\x70\\xed\\xcf\\x6b\\xa3\\x07\\xec\\xf2\\x19\\xa1\\x28\\x8f\\x23\\xc9\\x1d\\\n\\x7d\\xcd\\x18\\xa5\\x27\\x35\\x21\\x86\\xa4\\x78\\x13\\x49\\xf1\\x26\\x12\\x62\\\n\\x8d\\xa8\\xaa\\x64\\xd7\\xc1\\xf3\\x63\\xea\\x58\\xbd\\x70\\x06\\x52\\xc2\\x80\\\n\\xd5\\x4e\\xbf\\xc5\\x46\\x9f\\xc5\\x46\\xcf\\x80\\x15\\xbb\\xd3\\x75\\x43\\x48\\\n\\x82\\x44\\x5e\\xd5\\x29\\xca\\x2b\\x71\\x06\\xed\\xa7\\x6f\\x3d\\x55\\x3a\\xf2\\\n\\xe7\\xee\\xdb\\x9f\\x95\\xc0\\xe5\\xcf\\xd7\\x67\\xe8\\x14\\xf9\\xac\\x10\\xe2\\\n\\xdb\\x20\\x15\\x6f\\x79\\x42\\x9c\\x91\\x79\\xd3\\x32\\xc8\\x4d\\x4f\\x20\\x2d\\\n\\x21\\xd6\\xaf\\x15\\x76\\xa7\\x8b\\x5f\\xbd\\x73\\x64\\x4c\\xd9\\x3f\\xfd\\x8f\\\n\\xbb\\x51\\xc4\\x38\\x41\\x09\\xdd\\x03\\xc3\\xb4\\x74\\x0d\\x72\\xfc\\x7c\\x07\\\n\\x16\\xab\\xc3\\x77\\x49\\x80\\x26\\x05\\x2f\\xba\\x5c\\x62\\xdb\\xee\\xef\\x97\\\n\\x74\\x7e\\xf6\\xbd\\x73\\x43\\xff\\xe7\\xa8\\xf4\\xde\\xad\\x9f\\x64\\x2b\\x52\\\n\\x79\\x56\\x22\\xbf\\x2e\\x20\\x1a\\xe4\\x98\\xeb\\x26\\xbd\\x9e\\x3b\\x67\\x64\\\n\\x05\\xbd\\xdf\\xa0\\xd7\\x8d\\x6d\\xa4\\x4e\\xf1\\x27\\x0f\\x40\\x40\\x9a\\x39\\\n\\x96\\x34\\x73\\x2c\\xa7\\x2e\\x76\\x8d\\xb9\\x24\\x41\\x41\\xf2\\x94\\x4e\\x27\\\n\\xff\\x61\\xe5\\x96\\xba\\x57\\xa4\\x6a\\xa8\\xac\\xfa\\xfe\\xfc\\xf6\\x9b\\xef\\\n\\x55\\x60\\x7c\\xa6\\x04\\x96\\x6d\\xda\\xab\\x37\\x9a\\xa2\\xff\\x11\\x29\\x7f\\\n\\x0c\\x24\\x28\\xc0\\xe4\\xac\\x24\\x26\\x67\\x26\\xb2\\xf7\\xd8\\x65\\x9f\\x5c\\\n\\xd7\\xc0\\x30\\x36\\x87\\x0b\\x53\\x54\\xe0\\xc7\\x2b\\x42\\xb0\\x60\\x56\\x0e\\\n\\x7a\\x9d\\x9b\\x34\\x29\\x65\\x40\\x39\\x2f\\x86\\x46\\x1c\\xf4\\x0f\\xd9\\xc6\\\n\\x94\\x55\\x14\\x4f\\xe3\\xe2\\xb5\\x7e\\xce\\xb7\\xf6\\x46\\x4b\\xf8\\x27\\x74\\\n\\xce\\xaf\\x57\\x54\\xd6\\xfd\\x4f\\xbb\\xdd\\xf6\\xb3\\x7d\\x9b\\x96\\xb9\\x82\\\n\\x54\\x35\\x61\\x7c\\x66\\x53\\x78\\x65\\x65\\xcd\\x02\\x89\\xf2\\x0a\\x82\\xb9\\\n\\x00\\x53\\xb3\\x92\\x28\\x2d\\x9a\\x44\\x4a\\x62\\x0c\\x00\\x6f\\xed\\x6b\\xa4\\\n\\xad\\xc7\\xe2\\x93\\x7f\\x70\\xd1\\x4c\\xa6\\x64\\x25\\x7d\\x26\\xcf\\x3e\\xd7\\\n\\xd2\\xcb\\xce\\x03\\x37\\xd6\\xcc\\xfc\\x0c\\x33\\x0f\\x2f\\x29\\x00\\xa0\\x67\\\n\\xc0\\x4a\\x6d\\x43\\x2b\\x97\\xda\\xfb\\x3c\\x57\\xc5\\x71\\x4d\\x88\\xbf\\xfb\\\n\\x60\\x7d\\xf1\\xe1\\xcf\\xe2\\xd9\\x9f\\x9e\\x40\\x29\\x45\\xc5\\xb6\\x03\\x4f\\\n\\x22\\xe5\\x56\\x20\\x2a\\x2e\\x3a\\x8a\\xa5\\xf3\\xf2\\x98\\x31\\x29\\x65\\x8c\\\n\\xd8\\xe5\\xf6\\x7e\\xaa\\x0e\\x5d\\x60\\xe6\\xa4\\x14\\x0a\\x27\\xa7\\x92\\x99\\\n\\x1c\\xf7\\xa9\\x1f\\x3d\\x1a\\xed\\xbd\\x16\\xce\\x5e\\xed\\xe5\\x5c\\x4b\\x2f\\\n\\xab\\x4b\\x67\\x92\\x93\\x1a\\x3f\\xe6\\xfa\\xc5\\xf6\\x3e\\x3e\\x3a\\x76\\x85\\\n\\x41\\xab\\x1d\\xc0\\x25\\x10\\x3f\\xdc\\xb5\\xbe\\x78\\x2b\\x42\\x84\\x1e\\xde\\\n\\x61\\xf0\\xa9\\x08\\x5c\\xb5\\x79\\x7f\\x9a\\xa6\\x18\\x6a\\x80\\x19\\x00\\xb7\\\n\\x4f\\xcf\\x64\\x51\\x51\\x2e\\x7a\\xbd\\xe2\\x27\\x2b\\x01\\x4d\\xd3\\xd0\\x29\\\n\\xfe\\xd7\\x3e\\x4b\\x68\\x9a\\x44\\x51\\x02\\x77\\xcb\\xe5\\xd2\\xf8\\xf8\\xd4\\\n\\x55\\x4e\\x5e\\xf0\\xec\\x29\\x52\\x9c\\x73\\xc5\\x0f\\x95\\xee\\xfe\\xf6\\x8a\\\n\\xde\\x9b\\x7d\\xde\\x4d\\x13\\x78\\xdf\\x4f\\x6b\\xf2\\x55\\x97\\x72\\x02\\x48\\\n\\x04\\x28\\x9a\\x92\\xc6\\xf2\\xbb\\xa6\\xde\\x6c\\x75\\x9f\\x2b\\xaa\\x0f\\x5d\\\n\\xe0\\xcc\\x95\\x1e\\x00\\x04\\x58\\xf4\\x4e\\x71\\xd7\\x8e\\x1f\\x96\\x34\\xdf\\\n\\x4c\\x5d\\x37\\x35\\x1c\\x56\\xfd\\xb4\\x7e\\xb6\\xea\\x14\\x4d\\x78\\xc8\\x03\\\n\\x38\\x7b\\xb5\\x97\\xee\\x7e\\xeb\\xcd\\x54\\xf7\\xb9\\xa2\\xbd\\xd7\\xc2\\xb9\\\n\\xab\\x37\\x06\\x9c\\x84\\x78\\x87\\x5e\\x9e\\x7c\\x60\\xf3\\xe1\\x59\\x37\\x53\\\n\\xdf\\x84\\x09\\x5c\\xb1\\xb5\\xae\\x50\\x73\\xc9\\x7d\\x08\\x8c\\xa3\\xcb\\x5d\\\n\\xaa\\xc6\\xfb\\xf5\\xcd\\x38\\x9c\\xea\\xcd\\xb4\\xe3\\x73\\x81\\xdd\\xe1\\x62\\\n\\xd7\\xc1\\x0b\\xa8\\xe3\\x76\\x75\\x21\\x30\\x39\\x14\\xe7\\x47\\xe5\\x9b\\x6b\\\n\\x27\\x4c\\xe2\\x84\\xd4\\x98\\xf2\\x9f\\x1c\\xcc\\x15\\xa8\\x55\\x40\\x5a\\x5e\\\n\\x86\\x99\\xd4\\xc4\\x18\\x8e\\x9e\\xbb\\xa1\\x5a\\x99\\xe3\\x4c\\x7e\\x8d\\x8b\\\n\\x04\\x7d\\x96\\x11\\x5a\\xbb\\x07\\xe9\\x1e\\x18\\xa1\\xdf\\x32\\xc2\\xe0\\xb0\\\n\\x03\\x9b\\xd3\\x85\\xcb\\xf3\\x32\\xf4\\x06\\x1d\\x26\\x83\\x9e\\x84\\xd8\\x28\\\n\\x92\\xe2\\xa3\\x49\\x4d\\x8c\\x26\\x37\\x2d\\x11\\x73\\xbc\\x69\\x42\\xcf\\x91\\\n\\x40\\x52\\x5c\\x34\\x83\\xc3\\x76\\x5f\\x59\\xf1\\xec\\x1c\\xda\\x7b\\x87\\xb8\\\n\\xda\\x39\\x90\\x2e\\x84\\xd8\\xb5\\xfa\\x27\\xb5\\x8b\\x26\\x62\\x5f\\x47\\xbc\\\n\\x06\\x2e\\xdf\\x7c\\x20\\x45\\xaf\\x68\\xfb\\x81\\xd9\\x59\\x29\\xf1\\xac\\x59\\\n\\x32\\x0b\\x9d\\x5e\\x61\\xf7\\xe1\\x4b\\x9c\\xbe\\xdc\\xc5\\xdc\\xa9\\x19\\x2c\\\n\\xbb\\x63\\x72\\xc4\\x35\\xf6\\x0c\\x58\\x69\\xbc\\xdc\\x43\\x73\\x6b\\x2f\\x43\\\n\\x23\\x8e\\xf0\\x37\\x04\\x40\\x7c\\x4c\\x14\\x33\\x26\\xa5\\x50\\x98\\x9f\\x4a\\\n\\xaa\\x47\\x5d\\x0a\\x07\\x29\\x25\\x7b\\x8f\\x5f\\xe1\\xd4\\x85\\x4e\\x77\\x9b\\\n\\xef\\x9c\\x8c\\x53\\xd5\\xf8\\xe3\\x47\\x67\\xe8\\xb8\\x3e\\x04\\x82\\x06\\xbd\\\n\\xe6\\x5a\\xfa\\xde\\xc6\\x25\\x7d\\xe1\\x6b\\x8b\\xb0\\xbb\\x9b\\x36\\x49\\xa5\\\n\\xde\\x54\\xb7\\x53\\x22\\xca\\x53\\x12\\xa2\\xf9\\x52\\xd9\\x6c\\x9f\\x12\\xac\\\n\\x49\\x49\\x73\\x4b\\x2f\\x05\\x79\\xa9\\xe1\\x1b\\x8f\\x5b\\x9d\\x39\\x74\\xb6\\\n\\x8d\\xf6\\x5e\\xcb\\xe8\\x4b\\x1d\\xc0\\x1e\\x04\\x2d\\x48\\xd6\\xa7\\x25\\x9a\\\n\\xd8\\xb8\\xe6\\x36\\x8c\\x06\\xb7\\x45\\x62\\x77\\xaa\\x54\\xfe\\xe1\\x34\\xdd\\\n\\x83\\x36\\x04\\x72\\x8b\\x14\\x4a\\x3e\\x52\\x2e\\x03\\x32\\xbd\\x15\\x64\\xa7\\\n\\xc6\\xb3\\xa0\\x20\\x9b\\xfc\\x2c\\x73\\x44\\x9d\\x6a\\x6e\\xed\\x65\\x46\\x4e\\\n\\x8a\\x8f\\x81\\x11\\x87\\x8b\\xff\\xda\\xdb\\xc8\\x75\\xcb\\x08\\x52\\xf0\\x7e\\\n\\xf5\\x33\\x25\\xab\\x23\\x51\\x71\\x22\\x5a\\x03\\xeb\\x4c\\xf5\\x1b\\x24\\xa2\\\n\\xdc\\x14\\xa5\\xe7\\xa1\\xc5\\xb3\\xc6\\x58\\x10\\x8a\\x10\\x11\\x91\\xd7\\xd5\\\n\\x37\\xcc\\x9b\\x7b\\x4e\\xb3\\xbd\\xa6\\xc9\\x4b\\x5e\\xaf\\x94\\xbc\\xa4\\x09\\\n\\x65\\x41\\xd5\\x86\\x85\\x59\\x55\\x1b\\x16\\xfe\\x15\\x9a\\xdc\\x07\\x90\\x1a\\\n\\x6f\\x24\\xc6\\xa8\\x47\\xa7\\x08\\x74\\x8a\\x20\\xc6\\xa8\\x27\\x35\\xc1\\xb7\\\n\\xe4\\xee\\xab\\x5a\\x5f\\xf2\\x68\\xd5\\x86\\x85\\x59\\x42\\x6a\\x77\\x0b\\x78\\\n\\x19\\xe8\\x6d\\xeb\\xb1\\xf0\\x4e\\x4d\\x13\\x6f\\xee\\x39\\x4d\\x57\\xff\\x70\\\n\\xd8\\xf6\\xcc\\x98\\x94\\x32\\x66\\xf8\\x44\\x47\\xe9\\x79\\x68\\x71\\x01\\x26\\\n\\x83\\x1e\\x21\\xb9\\xaf\\x62\\x6b\\xfd\\xd3\\x91\\x70\\x13\\x96\\xc0\\x8a\\x6d\\\n\\x07\\x96\\x00\\xcf\\x09\\xa0\\x62\\xc1\\x34\\xe2\\x63\\xa2\\x22\\xa9\\xd7\\x07\\\n\\x97\\xaa\\xf1\\xd1\\x89\\x2b\\xbc\\xb1\\xfb\\xb4\\x7b\\x8a\\x40\\x2b\\x88\\xef\\\n\\x44\\xd9\\x0c\\x79\\xd5\\x1b\\x17\\x3e\\x39\\xd6\\x22\\x10\\x93\\x00\\x92\\x62\\\n\\xfd\\x9f\\x61\\xf6\\x96\\x09\\x26\\x79\\xcb\\x76\\x6d\\x5c\\x74\\x68\\xd7\\x86\\\n\\x85\\x4f\\x48\\x5d\\x4c\\x3e\\x42\\x7e\\x57\\xc2\\xb5\\x8e\\xeb\\x43\\xbc\\xf1\\\n\\xe1\\x69\\xf6\\x9f\\xb8\\x8a\\xaa\\x69\\x13\\x6a\\x6b\\x42\\xac\\x91\\x7b\\xef\\\n\\x9e\\xea\\xe5\\xf5\\xf9\\xf2\\x2d\\xb5\\xa5\\xe1\\xee\\x09\\x49\\x60\\xd9\\xa6\\\n\\xbd\\x26\\xa1\\x69\\xaf\\x01\\xfa\\x3b\\x0b\\xb2\\x99\\x9c\\x65\\x9e\\x50\\x83\\\n\\xfa\\x87\\x6c\\xbc\\xb9\\xb7\\x91\\xe3\\xcd\\x1d\\x48\\xa4\\x53\\x20\\xb7\\x48\\\n\\x5d\\xcc\\xac\\xaa\\x0d\\x25\\xbf\\x78\\x77\\xd3\\x7c\\x3f\\x9d\\x47\\x2a\\xe4\\\n\\x00\\x98\\xe3\\x02\\x10\\xe8\\x29\\x93\\xd2\\x2d\\x33\\x1a\\xd5\\x4f\\xcf\\x1b\\\n\\xae\\x5a\\x5f\\xfa\\x22\\xba\\x98\\x02\\x60\\x9b\\x44\\x3a\\x8f\\x35\\xb7\\xf3\\\n\\xe6\\x9e\\x46\\x06\\x86\\x6d\\xe3\\xc5\\x43\\x62\\x6a\\x56\\x12\\xb7\\xbb\\x1d\\\n\\x1d\\x7a\\x50\\x7e\\xbb\\xea\\xa5\\xf7\\x8d\\xa1\\xe4\\x43\\x12\\x68\\x34\\x46\\\n\\xfd\\x4e\\xc2\\xe4\\x68\\xa3\\x81\\xbb\\x67\\x67\\x4f\\xa8\\x21\\xed\\xbd\\x16\\\n\\xfe\\x73\\xf7\\x69\\xba\\xfb\\x87\\x01\\xd1\\x04\\xca\\x82\\x5d\\x1b\\x4a\\x37\\\n\\x56\\x3f\\x3d\\x2f\\xe8\\xfc\\x12\\x1e\\x72\\x92\\x62\\x0d\\x7e\\xd7\\x92\\x62\\\n\\xdc\\x65\\x42\\xf8\\x13\\xe8\\x45\\xf5\\xd3\\xf3\\x86\\xab\\x36\\x2c\\x5c\\xaf\\\n\\x29\\xda\\xdd\\xc0\\xb9\\xae\\xfe\\xe1\\xd1\\x23\\x3f\\x62\\x94\\x14\\xe6\\x10\\\n\\x1d\\x65\\x40\\x20\\xa7\\x6a\\x23\\xc9\\xbf\\x09\\x25\\x1b\\x94\\xc0\\x95\\x2f\\\n\\xd4\\xcf\\x95\\x8a\\xb2\\x06\\x60\\xc4\\xee\\xe4\\xf5\\x0f\\x1a\\xb8\\xd2\\xd1\\\n\\x1f\\x51\\x03\\xae\\x74\\x0e\\xf0\\xf6\\xfe\\x33\\xd8\\xdc\\xce\\xce\\x3f\\xd8\\\n\\x6d\\x23\\xf3\\xab\\x36\\x14\\x9f\\x08\\x77\\x9f\\xf4\\x90\\x93\\x18\\x60\\x0a\\\n\\x27\\x79\\x46\\xa0\\xe6\\x99\\xe6\\xa1\\xf0\\xc1\\x33\\x8b\\x8e\\x1b\\x85\\x3a\\\n\\x5f\\xc2\\xdb\\x36\\x87\\x8b\\x3f\\xec\\x3f\\x23\\xaf\\x76\\x0e\\x44\\xd4\\xf6\\\n\\x8b\\xed\\x7d\\xfc\\xee\\xc3\\x53\\x8c\\x38\\x9c\\xde\\x56\\xad\\xbb\\xff\\xf9\\\n\\x43\\x45\\xc1\\xe4\\x83\\x12\\xa8\\xa9\\xda\\x7f\\x08\\x79\\x63\\x99\\xed\\x1f\\\n\\xb2\\xf1\\xa7\\x4f\\x9a\\x68\\x6a\\x09\\x6d\\x36\\x76\\x5c\\x1f\\xe2\\xbd\\xda\\\n\\x26\\x9c\\xaa\\x04\\xf8\\xbf\\x76\\x9b\\x6d\\xdd\\xbe\\x4d\\xcb\\x22\\x1b\\x02\\\n\\x1e\\x6f\\x75\\x52\\xa0\\x29\\xec\\x21\\x55\\x04\\x98\\xc2\\x81\\xb0\\x7d\\xfd\\\n\\x62\\x4b\\xe2\\xd4\\x96\\xb5\\x08\\x7e\\xe5\\x72\\x69\\xe2\\xdd\\xda\\x73\\xe3\\\n\\x77\\x7e\\x3f\\x9c\\xbe\\xd4\\xc5\\xbb\\x35\\xe7\\xb0\\x58\\x6f\\xe8\\x89\\x48\\\n\\x84\\x4b\\xe7\\xfa\\x5d\\xb0\\x7b\\x02\\x12\\x78\\xef\\xb6\\xfa\\x19\\x02\\x31\\\n\\x7b\\x7c\\x79\\x42\\xac\\x91\\x69\\x21\\x5c\\x50\\xfd\\x43\\x36\\xde\\xf9\\xd8\\\n\\x43\\x9e\\xe0\\x57\\x55\\x1b\\x16\\xfe\\xed\\x44\\x7c\\x6f\\x02\\xcf\\x14\\x0e\\\n\\xb0\\x51\\x8d\\xda\\x58\\xc2\\x8e\\x40\\x2f\\xde\\x7a\\xe4\\x11\\xb5\\x6a\\xfd\\\n\\xc2\\x7f\\x10\\x42\\xfe\\xda\\xa5\\x6a\\x6c\\xaf\\x69\\x62\\x60\\x94\\x12\\x3d\\\n\\x1e\\x33\\xf3\\x52\\x89\\x8f\\xf1\\x5f\\xf2\\x24\\xcc\\x5d\\x51\\x79\\x28\\xa0\\\n\\xa1\\x1f\\x90\\x40\\xa1\\xc9\\xf5\\x80\\x98\\x92\\x9d\\x44\\x7e\\xc6\\x8d\\x8d\\\n\\x63\\xe9\\xdc\\xbc\\x80\\x9e\\x16\\xf0\\x9a\\x72\\xe7\\xdd\\xd3\\x56\\xc8\\x86\\\n\\x28\\x9d\\xed\\x87\\x21\\x7b\\x37\\x0e\\x6b\\x7f\\x5e\\x1b\\x0d\\x24\\xe9\\x75\\\n\\x0a\\xb1\\xd1\\xfe\\x6b\\x60\\x6c\\xb4\\x01\\xbd\\x4e\\x01\\x48\\xf6\\xc8\\x46\\\n\\x0c\\x83\\xce\\xfe\\x7d\\x10\\xa7\\x6d\\x0e\\x95\\x9d\\xf5\\xcd\\x41\\x77\\x67\\\n\\x83\\x4e\\x61\\xc9\\x5c\\x4f\\xc8\\x46\\xc0\\xf4\\x9c\\x64\\xa6\\x66\\x25\\x21\\\n\\x40\\xe8\\x15\\xe7\\xfa\\x40\\xf7\\xf8\\x99\\x72\\xcb\\x9f\\xaf\\xcf\\x10\\xc8\\\n\\xc7\\x04\\x82\\xa5\\x73\\xf3\\x30\\xc7\\x99\\xe8\\xec\\x1b\\xe6\\xdc\\xd5\\x5e\\\n\\xa6\\xe6\\x24\\x07\\x6d\\x64\\x4d\\x43\\x8b\\x67\\xc3\\x00\\xa4\\x28\\x72\\xb8\\\n\\x4c\\x2d\\x15\\x95\\xb5\\x6f\\x29\\x52\\xd9\\xb2\\xf3\\xd9\\x92\\xc6\\x70\\x9d\\\n\\xec\\x77\\x29\\x93\\x14\\xa4\\x48\\x8a\\x35\\x04\\x54\\x84\\x05\\xee\\xcd\\xa5\\\n\\x7b\\xd0\\x2e\\x06\\xed\\xe4\\x00\\xe7\\x03\\x88\\x8d\\xc1\\xaa\\x6d\\x35\\xd3\\\n\\x54\\x55\\x79\\xc2\\xe1\\xe2\\x71\\x90\\xb1\\x00\\x9d\\x7d\\xc3\\xd4\\x36\\xb4\\\n\\xb2\\x64\\x6e\\x5e\\xc0\\x7b\\xa6\\x4f\\x4a\\xe1\\xae\\x02\\x2b\\x85\\xf9\\xa9\\\n\\xa4\\x24\\x44\\xd3\\x67\\x19\\xe1\\x52\\x7b\\x3f\\x52\\xf2\\xb5\\x55\\x9b\\xf7\\\n\\xff\\x60\\xe7\\xb3\\x4b\\xbb\\x47\\xcb\\xfb\\x0d\\x27\\xbd\\x5e\\xfb\\x0a\\x10\\\n\\x35\\x25\\xcb\\x8c\\x39\\xce\\x6d\\x6b\\x66\\x24\\xc5\\xb2\\x64\\x5e\\x5e\\x50\\\n\\x0d\\xbf\\xab\\x6f\\x98\\x13\\xe7\\x3b\\xd1\\xe9\\x04\\x8f\\x2e\\x99\\xc2\\x6d\\\n\\x79\\x66\\x04\\x98\\x10\\xe2\\x31\\x4d\\x91\\xa7\\x56\\x6e\\xa9\\xdb\\x5e\\x5e\\\n\\x79\\xe0\\x9e\\x50\\x9d\\x15\\x9a\\x9c\\x05\\x90\\x18\\x42\\xcf\\xf4\\x5e\\x93\\\n\\x3a\\x42\\x1a\\xfd\\xe5\\x95\\x07\\xee\\x59\\xb9\\xa5\\x6e\\xbb\\xa6\\x29\\xe7\\\n\\x84\\xe0\\x09\\x01\\xb1\\xb3\\x73\\x13\\xf9\\xca\\xe2\\x7c\\x74\\x8a\\xe0\\x78\\\n\\x73\\x07\\xdd\\x03\\x81\\x95\\x01\\x01\\x2c\\x9e\\x93\\x4b\\x4a\\x82\\x7b\\x90\\\n\\x27\\xc5\\x47\\x33\\x39\\x2b\\x11\\xc0\\xa8\\x2a\\x86\\x75\\xe3\\xe5\\xfd\\x9d\\\n\\x09\\x52\\x7c\\x15\\xa0\\x30\\x3f\\xbc\\x75\\x01\\x6e\\xf3\\x6c\\xef\\xb1\\xcb\\\n\\x48\\x29\\xb9\\x77\\x6e\\x36\\x4b\\x6f\\x4b\\x67\\xe9\\x6d\\xe9\\xb4\\xf7\\x8d\\\n\\xb0\\xe7\\x54\\x07\\xf5\\x4d\\x3d\\x8a\\x53\\xd5\\x1e\\x10\\x42\\x7b\\xa0\\x62\\\n\\x4b\\xfd\\x71\\x29\\xe4\\x8b\\xba\\xe8\\xbe\\x37\\x76\\x3e\\x71\\x9f\\x1d\\x60\\\n\\x45\\xe5\\xa1\\xa9\\x7a\\x5c\\x3f\\x96\\xb0\\xce\\xdd\\xe0\\xe0\\x6a\\x57\\x52\\\n\\xbc\\x11\\x3a\\x2c\\x08\\x4d\\xbc\\x5d\\xbe\\xa5\\xee\\x0d\\x74\\xca\\x8f\\xaa\\\n\\x9f\\x2e\\xbe\\x04\\xb0\\xea\\xa5\\xf7\\x8d\\xea\\x48\\xd2\\x3a\\x21\\xc5\\x77\\\n\\x40\\xbb\\x5d\\xe2\\x9e\\x92\\xc5\\x33\\x53\\xb9\\x67\\x6e\\x26\\xd9\\x49\\x6e\\\n\\x42\\x7a\\x86\\x9c\\x7c\\x70\\xbc\\x8d\\x7d\\xc7\\xae\\xb0\\xb6\\xcc\\x6f\\x99\\\n\\x0f\\x88\\xc2\\xfc\\x54\\x2e\\xb5\\xf7\\x23\\xe0\\x31\\xdc\\x96\\x8f\\x0f\\x63\\\n\\x06\\x55\\xf9\\xf3\\x35\\x45\\x42\\xa7\\x9c\\x32\\x19\\xf4\\x7c\\xe3\\x81\\x3b\\\n\\x22\\xf2\\x1e\\x5f\\x6a\\xef\\x67\\x7b\\x4d\\x13\\xe6\\xd8\\x28\\x9e\\xfb\\xca\\\n\\x3c\\x8c\\xe3\\xd6\\xc8\\x61\\x9b\\x8b\\x8f\\x1a\\x3b\\xf9\\xa8\\xa1\\x93\\x01\\\n\\xab\\x57\\x35\\xa0\\x03\\x21\\xfe\\x15\\xb4\\x3e\\xa4\\xa8\\x04\\xe2\\xf4\\x8a\\\n\\x42\\x71\\x41\\x2a\\xcb\\x47\\x75\\x76\\x3c\\xda\\xae\\x5b\\xd9\\x7d\\xb2\\x93\\\n\\xfa\\x73\\xdd\\xa8\\x9a\\x04\\x18\\x42\\xc8\\x8d\\xa0\\x24\\x21\\xe5\\xb7\\xf0\\\n\\xd8\\xc6\\x09\\xd1\\x06\\xca\\x8a\\x32\\x58\\x3a\\x3b\\x9d\\xb8\\x71\\xeb\\xa9\\\n\\xdd\\xa9\\xf2\\xa3\\x37\\x4e\\x30\\x30\\xec\\xe4\\xe1\\x25\\x05\\x63\\xd6\\xf8\\\n\\x60\\x70\\xa9\\x1a\\xaf\\xec\\x38\\x8a\\xdd\\xa9\\x22\\x35\\x59\\x58\\xfd\\x6c\\\n\\xe9\\x59\\xef\\xb5\\x31\\x23\\x50\\x28\\xca\\xfd\\x00\\xd3\\x26\\x25\\x47\\xec\\\n\\x7a\\x3f\\x74\\xb6\\x0d\\x80\\xb2\\xa2\\x0c\\x3f\\xf2\\x00\\x62\\x4d\\x7a\\xee\\\n\\xbb\\x33\\x87\\x8a\\x79\\xd9\\x1c\\xba\\xd0\\xc3\\xee\\x93\\x9d\\xb4\\xf4\\x0c\\\n\\x67\\xba\\x23\\x77\\xee\\xf7\\x57\\x3c\\x23\\x95\\xbf\\x2c\\xc9\\xbd\\x61\\xae\\\n\\x05\\x41\\x76\\x72\\x0c\\x8f\\x95\\x4d\\xe1\\x81\\x05\\x39\\xfc\\xb1\\xbe\\x85\\\n\\x83\\xcd\\x3d\\x71\\x48\\xf1\\xb2\\x37\\x6c\\x9a\\x9b\\x12\\xcb\\x3d\\xf3\\x32\\\n\\x58\\x30\\x2d\\xc5\\xbb\\xe1\\xf8\\xc1\\x68\\xd0\\x51\\x76\\x5b\\x26\\xef\\x1c\\\n\\x6c\\xe1\\xd0\\x99\\xb6\\x88\\x08\\xd4\\xeb\\x14\\xa6\\xe5\\x24\\xd3\\x78\\xb9\\\n\\x1b\\x21\\x94\\xfb\\x81\\x20\\x04\\x0a\\x79\\x8f\\x44\\x90\\x97\\x9e\\x10\\xb6\\\n\\x52\\x80\\xee\\x7e\\xab\\x4f\\xb7\\xda\\x7f\\xba\\x8b\\x99\\x59\\xf1\\x4c\\xcd\\\n\\x8c\\x0f\\x28\\xab\\xd3\\x09\\x4a\\x66\\xa6\\x51\\x32\\x33\\x8d\\x73\\x6d\\x83\\\n\\x7c\\x78\\xa2\\x83\\xf3\\xed\\x16\\xfe\\xba\\x6c\\x0a\\x77\\x4e\\x0d\\xbe\\x39\\\n\\x05\\x82\\x39\\x36\\x8a\\xaf\\x2f\\x9f\\xc6\\xbc\\xc9\\x66\\x7e\\xf7\\xd1\\x25\\\n\\x66\\x64\\x25\\xb0\\x7c\\x5e\\x26\\x05\\xd9\\xe1\\xdb\\x7d\\xa9\\x73\\x88\\x4f\\\n\\xce\\xb8\\x63\\xc8\\xd7\\x7a\\x2c\\xf4\\x0e\\x58\\x7d\\x91\\xc3\\x50\\xc8\\x4b\\\n\\x4f\\xa0\\xf1\\x72\\x37\\x52\\x91\\xf7\\x00\\x3f\\xf3\\x96\\xfb\\xa6\\xf0\\xda\\\n\\x4d\\xa7\\xa3\\x2c\\xa6\\xc1\\x3e\\x20\\xe6\\x1b\\xab\\xef\\x24\\xc6\\xe4\\xaf\\\n\\x4a\\x8c\\xc7\\xfe\\x13\\x57\\x39\\xd6\\xdc\\x8e\\x84\\x4e\\x01\\x19\\x8a\\x10\\\n\\x3c\\x78\\x77\\x0e\\x15\\xb7\\xe7\\x10\\x28\\x0e\\x3e\\x1e\\x2e\\x55\\x0b\\x3a\\\n\\x52\\x22\\x45\\xa4\\x75\\x48\\x09\\xd5\\xc7\\xdb\\xd8\\x7e\\xb0\\xd5\\xe3\\xf4\\\n\\x95\\x5d\\x20\\xd2\\xef\\x2a\\xc8\\x66\\xf1\\x9c\\xdc\\xb0\\xf7\\x0f\\x8f\\x38\\\n\\xf9\\xf7\\xf7\\x8e\\x22\\x11\\xd6\\x9e\\x24\\xbd\\xf9\\xc8\\x37\\xe7\\x3b\\x61\\\n\\xd4\\x2e\\x6c\\x89\\xea\\x5b\\x29\\x21\\x46\\x51\\x14\\xea\\xcf\\x5c\\xa3\\xb9\\\n\\xb5\\x17\\xab\\xdd\\x19\\xbc\\x46\\xdc\\x3e\\x35\\x00\\x74\\x3c\\x24\\x24\\xcf\\\n\\x69\\x52\\x6a\\x7f\\x3a\\xd0\\xca\\x8b\\xef\\x9e\\xa1\\xdf\\x1a\\xde\\x49\\xfa\\\n\\x69\\xc9\\x8b\\xb4\\x0e\\xcb\\x88\\x93\\xff\\xbd\\xb3\\x89\\xb7\\x0f\\xb4\\xa0\\\n\\x4a\\x29\\xa5\\xe4\\x25\\x45\\x13\\x6b\\xc0\\x1d\\x53\\x0e\\x79\\xaf\\xd5\\x4e\\\n\\xe3\\x95\\x6e\\x6a\\x1a\\x5a\\x10\\x42\\x00\\x32\\x26\\xad\\xd7\\x75\\xaf\\xef\\\n\\xf9\\xde\\x3f\\x52\\xa7\\xfb\\x0b\\x24\\xa8\\x9a\\xc6\\xa9\\x0b\\x9d\\x9c\\xba\\\n\\xd0\\x89\\x4e\\x51\\xf8\\xd6\\xc3\\xf3\\x03\\x86\\x09\\xfb\\x2c\\x23\\x1e\\x4f\\\n\\xb2\\x6c\\xaf\\xfe\\xe7\\x85\\x07\\x11\\xe2\\xc0\\xca\\xad\\xb5\\x1f\\x4b\\xc9\\\n\\x6f\\x9b\\xda\\x06\\xb3\\x7e\\xf2\\x66\\x03\\x5f\\x5b\\x36\\x95\\x39\\xf9\\x13\\\n\\xf3\\xe0\\x7c\\xd6\\x38\\x7b\\x6d\\x80\\xdf\\xec\\xbe\\xe0\\xdd\\xc0\\xba\\x41\\\n\\xf9\\xdb\\xea\\x8d\\xc5\\xef\\x21\\xa5\\xa8\\xd8\\x5a\\xdf\\x69\\xb1\\xda\\x33\\\n\\xfa\\x87\\x6c\\x3e\\x95\\x6d\\x34\\x5c\\xaa\\xc6\\xab\\x3b\\x4f\\xf8\\x87\\x29\\\n\\x74\\x5a\\x19\\xf0\\x3e\\x8c\\xd6\\x03\\xa5\\x3b\\xa3\\x60\\x34\\x12\\xe3\\x8c\\\n\\x41\\x63\\xac\\xad\\x5d\\x83\\xee\\x3f\\x42\\xd9\\xe7\\xf5\\xdc\\xee\\x5a\\x5f\\\n\\xba\\x5b\\xea\\xe4\\xed\\xc0\\xce\\x21\\x9b\\x93\\x7f\\xdd\\xd9\\xc4\\x7f\\xd6\\\n\\x5c\\x41\\x55\\x23\\x8f\\x93\\x68\\x12\\xae\\xf6\\x4b\\xea\\x5b\\x25\\x1f\\x5e\\\n\\x70\\xff\\xea\\x5b\\x25\\x57\\xfb\\x25\\xda\\x04\\xc2\\x2d\\xaa\\x26\\xd9\\x71\\\n\\xb8\\x95\\x5f\\xec\\x38\\xeb\\x25\\x6f\\xaf\\x26\\xd4\\xdb\\xab\\x36\\x14\\xbf\\\n\\xe7\\x6e\\xb7\\x90\\x08\\xf6\\x01\\xb4\\x78\\xfb\\x32\\x0e\\x7a\\x9d\\x42\\x42\\\n\\x00\\x62\\xa5\\x54\\x7c\\x5c\\x8d\\x1a\\xff\\x72\\xda\\x78\\xc1\\xa4\\xf8\\xe0\\\n\\x16\\x53\\xcf\\xa0\\x3b\\x73\\x4c\\x20\\xeb\\x47\\x97\\x57\\x3f\\xbd\\xa8\\xab\\\n\\x6a\\x7d\\xc9\\xfd\\x20\\xbe\\x23\\xc1\\xb1\\xf7\\x54\\x07\\xdb\\xfe\\x74\\x9a\\\n\\xae\\x81\\xf0\\x7e\\x39\\x9b\\x0a\\xf5\\x2d\\x92\\x33\\x3d\\x30\\x60\\x03\\x55\\\n\\xba\\x7f\\x03\\x36\\x38\\xd3\\x03\\xf5\\xad\\x12\\x5b\\x04\\x41\\xbf\\xeb\\x43\\\n\\x76\\x7e\\xbe\\xfd\\x0c\\x3b\\x0e\\x5f\\x43\\x4a\\x5c\\x42\\xf2\\xdc\\x42\\x5b\\\n\\xc9\\x8a\\x0f\\xd6\\x2f\\x6e\\x1b\\x2b\\xe9\\x6e\\x7b\\xcf\\x40\\xf0\\x70\\x6c\\\n\\x52\\x00\\x02\\x41\\x9b\\xee\\xfd\\xe7\\x9b\\xc2\\x02\\x31\\x22\\x81\\x3b\\x66\\\n\\x64\\xe2\\x52\\x35\\xfa\\x2c\\x36\\x32\\x93\\x62\\x83\\x56\\xdc\\x67\\x71\\x13\\\n\\xa8\\x6a\\xe2\\xac\\xdf\\x45\\x21\\x64\\x15\\xfc\\xa2\\x7c\\x73\\x5d\\xbd\\x50\\\n\\x78\\xfd\\x4a\\xf7\\xf0\\x94\\xe7\\xff\\xd0\\x20\\x1f\\x5d\\x32\\x59\\x14\\xcf\\\n\\x08\\xac\\xa0\\x6b\\x12\\x8e\\x5e\\x93\\x58\\x42\\x2c\\x9d\\x16\\x3b\\x1c\\x6d\\\n\\x93\\x94\\x4c\\x12\\x04\\x99\\x18\\x1c\\x6c\\xee\\xe1\\x3f\\x3e\\xbe\\x8c\\xcd\\\n\\xa1\\x02\\x5c\\x16\\x9a\\xf6\\xe8\\xae\\x67\\x17\\xd5\\xed\\x0a\\xf8\\x50\\xce\\\n\\x22\\xf0\\x4b\\x4c\\x1a\\x8d\\xec\\xd4\\x38\\x54\\x29\\x49\\x8e\\x8f\\x46\\xaf\\\n\\x08\\x0e\\x35\\xb5\\x21\\x11\\x3e\\xc6\\x47\\xa9\\x31\\xd2\\x04\\x82\\x79\\xd3\\\n\\x33\\x49\\x8c\\x0d\\xe9\\x84\\x05\\xf0\\x79\\x35\\x24\\xba\\xa0\\x36\\x69\\xf5\\\n\\xb3\\x0b\\x0f\\xac\\xd8\\x72\\xf8\\x0e\\x1d\\xce\\x5f\\xdb\\x1d\\xea\\x23\\xaf\\\n\\xed\\xbd\\xc8\\x82\\xe9\\x29\\x01\\x53\\xd5\\x5a\\x07\\x42\\x93\\xe7\\x85\\xc5\\\n\\xee\\x96\\xcd\\x33\\xfb\\xd7\\xa1\\x49\\xc9\\xab\\xfb\\x2e\\xba\\x97\\x0c\\x21\\\n\\xde\\xb2\\x47\\x8d\\xfc\\xfd\\xbe\\xef\\x2e\\x0b\\xe5\\xc4\\x3c\\x0f\\x30\\x10\\\n\\x82\\xc0\\xbb\\x0a\\xb2\\xb9\\xcb\\x9d\\xa7\\xc4\\xc0\\xb0\\x8d\\x43\\x4d\\x6d\\\n\\x08\\xf0\\xe9\\x3d\\xbe\\x29\\x2c\\x11\\x09\\x80\\x2f\\x12\\x16\\x0e\\xde\\x00\\\n\\xba\\xce\\xe8\\x0c\\xe9\\x65\\xfd\\x70\\xc3\\xfc\\x01\\x45\\xd1\\x9e\\x05\\x48\\\n\\x8e\\x8b\\x0a\\x9c\\xe7\\x07\\xb4\\x4d\\xc0\\x69\\xdc\\x1e\\x44\\x56\\x11\\x82\\\n\\x64\\xcf\\xcb\\x57\\x84\\xba\\x31\\x0c\\x79\\x44\\x19\\xa2\\xfa\\xc1\\x6d\\x9d\\\n\\x44\\x82\\x51\\x79\\x8b\\x3e\\x65\\x77\\xb4\\x0e\\x10\\xef\\x16\\x8a\\x4c\\xb5\\\n\\x70\\xb8\\xdc\\x0f\\x4d\\x18\\x4c\\x0c\\xdf\\x75\\xa9\\x4b\\x03\\xfc\\xcc\\xaa\\\n\\xd1\\x18\\x0a\\xee\\xa6\\xf3\\x83\\x25\\x84\\x6c\\x5c\\xb4\\x7b\\x52\\xa9\\x2e\\\n\\x25\\xac\\x31\\xef\\x8a\\xea\\xb2\\x00\\x38\\x5d\\x91\\x05\\x9f\\x8c\\x1e\\x02\\\n\\x65\\x10\\x02\\xf5\\x80\\x47\\xd7\\xf9\\xff\\x1b\\x91\\x34\\x51\\xe8\\x6e\\x22\\\n\\x45\\x22\\x5c\\x9d\\x9e\\x85\\x57\\x80\\xcf\\xe6\\x1c\\x4d\\xa0\\x3b\\x71\\x4e\\\n\\x8d\\xec\\x6d\\x44\\x79\\xde\\xc6\\x60\\xc2\\x40\\xd8\\x44\\x3f\\x4d\\xd3\\x7a\\\n\\x00\\x86\\x46\\x82\\x3b\\xa7\\xe3\\xc2\\x2f\\xbb\\x37\\x64\\x43\\x98\\xcc\\xde\\\n\\x67\\x28\\x42\\x86\\x4d\\x59\\xd3\\x3b\\xd2\\x27\\x34\\xeb\\x5c\\x37\\x46\\xaa\\\n\\x6f\\xd1\\x1c\\x7d\\xa7\\x0d\\x22\\x27\\xd0\\x3b\\x9c\\x15\\x97\\x0c\\x99\\x66\\\n\\x5a\\xf6\\xbf\\xf6\\x9a\\x85\\xa0\\x12\\xe0\\xfa\\xb0\\x1d\\x2d\\xc8\\xc0\\xc8\\\n\\x9e\\x40\\xbe\\x65\\x56\\x10\\x59\\x4d\\x4a\\xae\\x7b\\x36\\x37\\x4d\\x53\\x36\\\n\\xaf\\xd8\\x72\\x38\\x31\\xb0\\xa4\\x1b\\x0e\\xa7\\xc3\\x0c\\x60\\x34\\x44\\x96\\\n\\x22\\x34\\x8a\\x1b\\xdf\\x22\\x32\\x9a\\xc0\\x41\\x00\\x67\\x84\\x04\\x26\\x78\\\n\\x86\\x8c\\xd4\\xc4\\xf4\\x60\\x32\\x2b\\x37\\xd7\\x2c\\x34\\xda\\x4d\\xc7\\x24\\\n\\xe2\\x4b\\x26\\xa3\\x4e\\xfe\\x4d\\xd9\\xd4\\xa0\\x9b\\xc8\\xa4\\x44\\x41\\x08\\\n\\x57\\xa0\\x0f\\xf1\\x46\\xc8\\x4d\\x0c\\x5c\\x87\\x22\\x04\\x5f\\x2b\\x9b\\x8a\\\n\\x29\\x4a\\x07\\xf0\\x88\\x0e\\xe7\\xb1\\xf2\\xcd\\x75\\xc5\\xc1\\xea\\x92\\x42\\\n\\xcc\\x00\\xb7\\xc1\\x10\\x09\\x9c\\xaa\\x6f\\xb3\\xf1\\x69\\xde\\xa3\\x76\\x61\\\n\\xf7\\x34\\x6b\\xed\\x1c\\xa4\\xa5\\x6b\\x90\\xb3\\x57\\x7b\\xb8\\xd4\\x1e\\x7c\\\n\\x13\\xf3\\x29\\xd9\\x42\\x14\\xf8\\xb7\\x4c\\x8a\\x8a\\x2d\\xf5\\x4f\\x4a\\x45\\\n\\xf9\\x08\\x98\\x9c\\x9f\\x16\\xcb\\xf7\\xd7\\x14\\x89\\x05\\x41\\x74\\x40\\x00\\\n\\x45\\xc0\\x9d\\xd9\\xa1\\x49\\x8c\\x37\\xba\\x65\\x42\\xad\\x81\\x77\\xcf\\x48\\\n\\xe5\\x47\\x8f\\xcc\\x61\\x9a\\xdb\\x2b\\x34\\x45\\x28\\x7c\\xb2\\xb2\\xb2\\x6e\\\n\\xd3\\xa6\\x4d\\xd2\\x6f\\x9e\\x0a\\x21\\x0b\\x80\\x80\\x66\\x9c\\x17\\x67\\xae\\\n\\x74\\x73\\xf0\\xac\\xdb\\x37\\xd0\\xda\\xed\\xf6\\x3c\\x49\\x77\\x2e\\x0f\\x30\\\n\\x46\\x0f\\x54\\xcc\\x00\\x1f\\x1e\\xb9\\xe8\\x2b\\xc9\\xcb\\x48\\x64\\x4a\\x90\\\n\\x6c\\x84\\xd4\\xc4\\x68\\x4f\\x65\\xa2\\x04\\x78\\xc9\\x5b\\x5e\\xfe\\x42\\x4d\\\n\\xba\\xd8\\x56\\xff\\x2a\\xb0\\x52\\x00\\x65\\x73\\x32\\xf9\\x52\\x49\\x1e\\x3a\\\n\\x5d\\xf8\\x95\\xdf\\xa4\\x83\\x85\\x93\\x04\\x2d\\x03\\x92\\xf6\\xa1\\x1b\\xbb\\\n\\x6d\\xbc\\xd1\\x3d\\x6d\\x73\\x13\\x43\\x93\\xe7\\x45\\x72\\x9c\\x91\\xa7\\x1e\\\n\\x2c\\x64\\xe7\\xd1\\x6b\\xbc\\x77\\xe4\\x9a\\x5e\\xc2\\xbf\\xd4\\x9b\\xea\\x96\\\n\\xdc\\xbb\\xf5\\x93\\xc7\\xc6\\x58\\x23\\x52\\x2c\\x04\\x48\\x33\\x07\\x77\\x67\\\n\\x9d\\xbd\\xda\\xcb\\xf8\\x98\\xb2\\xe2\\x51\\xf9\\xdc\\xff\\x6f\\xc0\\x2f\\xc5\\\n\\xb5\\x27\\x44\\xc6\\x69\\x6e\\x9a\\x67\\x79\\x91\\x72\\x19\\x52\\x0a\\x80\\x8a\\\n\\xca\\xba\\x15\\x42\\x55\\x4e\\x20\\x59\\x19\\x17\\x6d\\xe0\\x1f\\x57\\x15\\xf0\\\n\\xe5\\x45\\xf9\\x11\\x91\\xe7\\x85\\x10\\x90\\x67\\x16\\x14\\x4f\\x12\\xac\\x98\\\n\\xe6\\xfe\\x15\\x4f\\x12\\xe4\\x99\\x23\\x23\\xcf\\x0b\\x9d\\x22\\x58\\x3d\\x7f\\\n\\x12\\x4f\\xae\\x9e\\x45\\x62\\x8c\\x01\\x89\\xb8\\x47\\x91\\xba\\xe3\\x2b\\x37\\\n\\xd7\\xdf\\xe7\\x69\\xb7\\x00\\xca\\x00\\x26\\xa5\\x05\\xf7\\x23\\xf6\\x59\\xfc\\\n\\x95\\x6c\\x29\\xe4\\x55\\xef\\x7f\\x1f\\x81\\xe3\\x6d\\x5a\\x00\\xab\\xdd\\xc9\\\n\\x90\\x2d\\xb0\\x79\\x60\\x8e\\x37\\x79\\x13\\x8d\\x32\\x57\\x6d\\xab\\x29\\x5e\\\n\\x59\\x59\\xb7\\x09\\x41\\x15\\x90\\x39\\x2b\\x27\\x81\\x1f\\xac\\x2d\\xa2\\xe8\\\n\\x0b\\xf6\\xc4\\x00\\xcc\\xca\\x49\\xe4\\x07\\x6b\\xe7\\x50\\x94\\x67\\x06\\x48\\\n\\x93\\x8a\\xdc\\x51\\x5e\\x59\\xf7\\x8b\\xfb\\x2b\\x0f\\x2e\\x06\\xd2\\xe3\\x63\\\n\\x8c\\x41\\xa7\\xb0\\xd5\\xee\\x64\\xc8\\x1a\\x40\\xe9\\x54\\x39\\xea\\xfd\\x7b\\\n\\x63\\x04\\x0a\\x97\\xcf\\x5c\\x8c\\x8d\\x36\\x30\\x25\\x2b\\x89\\x05\\xb3\\x72\\\n\\x50\\x42\\x64\\xdb\\x79\\x8f\\x32\\x68\\x52\\xf7\\x8e\\x14\\xfc\\x8b\\x4e\\x08\\\n\\x65\\x4d\\x49\\x2e\\x4f\\xae\\x2e\\xc4\\x1c\\x41\\x16\\x57\\xa4\\x0a\\x6c\\x28\\\n\\x44\\xa2\\x35\\xc4\\x7b\\x66\\xc3\\x5f\\x16\\xe7\\xa2\\x13\\x42\\x08\\xc1\\x13\\\n\\x4e\\x45\\xfd\\x2f\\x80\\x99\\xb9\\x29\\x41\\xef\\x33\\xe8\\x75\\x54\\x14\\x4f\\\n\\xa7\\x68\\x4a\\x3a\\x89\\xb1\\x37\\x48\\x76\\x2a\\x8e\\xf7\\xbc\\xff\\x7d\\x6b\\\n\\x60\\xc2\\x94\\x8e\\x23\\x83\\x17\\x73\\xad\\x40\\xcc\\x57\\xee\\x29\\x22\\x36\\\n\\x3a\\x3c\\x01\\x85\\xf9\\xa9\\xde\\x14\\xdf\\xf4\\xd4\\x04\\x23\\x8f\\x2f\\x9f\\\n\\xce\\x94\\x8c\\xf0\\xfa\\xc8\\xd9\\x6b\\x83\\xec\\x3e\\xd9\\xc1\\xf9\\xf6\\x41\\\n\\xfe\\x6a\\xe9\\x14\\xe6\\x4f\\x0f\\xde\\x89\\x50\\x38\\x7a\\xa1\\x97\\xdf\\x46\\\n\\xe8\\xd2\\x17\\x02\\x2a\\xee\\xc8\\x66\\x66\\x76\\x02\\xaf\\x7c\\x78\\x9e\\x5e\\\n\\x8b\\x3d\\x1d\\xa0\\x30\\x2f\\x04\\x81\\x3a\\x85\\x82\\xdc\\x14\\x0a\\x72\\x53\\\n\\xb0\\x58\\xed\\xfc\\x9f\\xf7\\x8f\\x83\\x60\\x38\\x65\\x4a\\xe7\\x01\\xaf\\x8c\\\n\\xcf\\xb8\\x6b\\x7c\\xeb\\x2d\\x39\\x7d\\xc5\\xe3\\x77\\x83\\x98\\x65\\x8e\\x33\\\n\\x91\\x11\\xc1\\x41\\x98\\x18\\x93\\x81\\x96\\xae\\x41\\x2c\\x56\\x07\\xe5\\xb7\\\n\\x67\\xb3\\x20\\x04\\x11\\x2e\\x55\\xe3\\x40\\x73\\x0f\\xaf\\xee\\xbd\\x48\\xf5\\\n\\xf1\\x76\\xba\\x06\\x6c\\xb8\\x54\\xc9\\xd1\\x8b\\xd7\\xe9\\x1c\\xb0\\x33\\x39\\\n\\x3d\\x96\\xe8\\x20\\x47\\xbf\\xc6\\xa3\\x6f\\xc8\\xc1\\xeb\\x1f\\x5f\\x66\\xfb\\\n\\xa1\\x56\\x5c\\xaa\\xa4\\x73\\xc0\\x46\\x7d\\x53\\x0f\\x27\\x2e\\xf5\\x63\\x30\\\n\\x08\\xb2\\xcd\\x31\\x41\\xfd\\x98\\x49\\x71\\x51\\xd8\\x9d\\x1a\\x4d\\x6d\\x83\\\n\\xe4\\xa4\\xc6\\x33\\x7f\\x56\\x64\\x59\\x67\\x4d\\x2d\\xbd\\x5c\\x6e\\xef\\x07\\\n\\xe4\\xce\\xed\\xdf\\x5c\\xf9\\xba\\xb7\\x7c\\x4c\\x8b\\x25\\xca\\x1b\\x02\\xf9\\\n\\xd0\\x85\\xb6\\x3e\\xe6\\x4c\\xcb\\x88\\xa8\\xe2\\x05\\x05\\xd9\\xbc\\xd3\\xd3\\\n\\xc4\\xbe\\x86\\x4e\\x96\\xcd\\xc9\\xf4\\x8b\\xcc\\x0d\\x8d\\x38\\xd9\\xdf\\xd8\\\n\\xc5\\xbe\\x86\\x4e\\x06\\x47\\x02\\x87\\x35\\x0f\\x35\\xf7\\xc4\\x1d\\xbd\\xd0\\\n\\x4b\\xf1\\x8c\\x54\\x56\\xcc\\xcb\\x24\\x3b\\x39\\xf0\\xae\\xd8\\xd6\\x37\\xc2\\\n\\xee\\x13\\x1d\\xa3\\xc3\\x9a\\x16\\x90\\x1b\\x11\\x4a\\x32\\x52\\x7e\\xab\\xa5\\\n\\x77\\x38\\xf3\\xd5\\x3d\\x17\\x79\\xbb\\xae\\x85\\x65\\x45\\x19\\x2c\\x09\\x12\\\n\\xd6\\xdc\\x77\\xda\\xad\\x85\\x2c\\x28\\x8c\\x28\\x4f\\x09\\x80\\x0b\\xd7\\xdc\\\n\\x29\\xd3\\x12\\xe5\\x8d\\xd1\\xe5\\x63\\x08\\x34\\xda\\xf4\\xdb\\xed\\x46\\xe7\\\n\\xd0\\xd5\\xce\\xc1\\x38\\x8b\\xd5\\x1e\\x30\\xd1\\x66\\x3c\\xf2\\xb3\\xcc\\x64\\\n\\x26\\xc7\\xb9\\xb3\\xb2\\x0e\\x5f\\x63\\x4d\\x49\\xee\\x8d\\xce\\x9e\\xec\\xe0\\\n\\xe0\\xb9\\x9e\\x51\\xca\\xb9\\xf0\\x0b\\xac\\x97\\xbf\\x70\\xe0\\x3d\\x54\\xed\\\n\\xc7\\xaa\\x26\\xd7\\xd5\\x36\\x75\\xeb\\x1d\\xaa\\xc6\\x37\\x56\\x04\\xd6\\xcd\\\n\\x77\\x1e\\x6d\\xe3\\x50\\x73\\x0f\\x80\\x0b\\x29\\x5f\\x17\\x88\\x1f\\xed\\xda\\\n\\x58\\x7a\\x19\\x60\\xd5\\x4b\\xef\\x6f\\xf3\\x06\\xd6\\x07\\x47\\x9c\\xb7\\xbf\\\n\\x73\\xa8\\x95\\xf7\\x8f\\xb6\\x51\\x3c\\x33\\x95\\xe5\\x73\\x32\\xc9\\x4a\\x76\\\n\\xab\\x5d\\x3b\\x0e\\x5f\\x63\\xd0\\xea\\x24\\x3b\\x35\\x9e\\xfc\\x8c\\x90\\x86\\\n\\x8a\\x0f\\x16\\xab\\x9d\\x96\\xce\\x41\\xa4\\x64\\xc8\\x68\\xd7\\x6f\\x1f\\x7d\\\n\\xcd\\x6f\\x9c\\x57\\x54\\xd6\\xbe\\x86\\x10\\x8f\\x2d\\x98\\x95\\x43\\x69\\x51\\\n\\x64\\x89\\x50\\xde\\x44\\x46\\x45\\xc0\\xda\\xd2\\x3c\\x4e\\x5e\\xe9\\xe7\\x4c\\\n\\xcb\\x80\\xf7\\x90\\xab\\x26\\xe0\\x3d\\x4d\\x2a\\x2f\\x56\\x6f\\x2c\\xde\\x13\\\n\\xac\\x8e\\xf2\\x6d\\xb5\\xab\\x85\\x26\\xde\\x9d\\x9e\\x19\\xcf\\x3f\\x3f\\x1c\\\n\\x38\\x63\\xe0\\x67\\xef\\x9c\\xa1\\xb9\\x7d\\x10\\x09\\x0f\\x56\\x6f\\x58\\xf8\\\n\\x6e\\xd0\\xba\\x2a\\x0f\\xdc\\xa3\\x08\\xed\\x3b\\x12\\xee\\xc7\\xad\\xa3\\x53\\\n\\x98\\x6b\\x66\\xde\\xe4\\x44\\xde\\xac\\xb9\\x8a\\x94\\xb0\\x6e\\x79\\x51\\x48\\\n\\xfd\\x6f\\x34\\x6a\\x1b\\x5a\\xdc\\xf1\\x6f\\x29\\x7f\\x5b\\xb5\\xb1\\xf4\\xab\\\n\\xa3\\xaf\\xf9\\x2d\\x3a\\x02\\xf9\\xb2\\x44\\xfc\\xf5\\xc9\\x0b\\x9d\\xe2\\xae\\\n\\x82\\xcc\\x88\\xec\\xc4\\x74\\x73\\x2c\\xb7\\x4f\\xcf\\xe4\\x58\\x73\\x3b\\x6f\\\n\\x7c\\x72\\xc5\\x5b\\x6c\\x43\\xca\\x88\\x93\\x8b\\x84\\xea\\xf1\\x0e\\x0f\\x07\\\n\\xf7\\xaa\\xf6\\x79\\x7c\\x5e\\x3a\\x45\\x0b\\x59\\x9f\\xe7\\x45\\xed\\xf1\\x26\\\n\\x17\\x21\\x78\\xbc\\xb1\\xa5\\x3f\\xb6\\xb1\\xc5\\x6d\\x59\\xdd\\x35\\x33\\x2b\\\n\\x62\\xf2\\x6c\\x0e\\x17\\x27\\xdc\\x67\\xeb\\xa4\\x40\\xbe\\x3c\\xfe\\xba\\x9f\\\n\\x79\\xb3\\x6b\\xe3\\xa2\\x43\\x02\\x76\\xd8\\x9d\\x2e\\x8e\\x34\\xb9\\xd7\\x0a\\\n\\x97\\x4b\\xa3\\xa6\\xa1\\x85\\xba\\x86\\xe0\\x9f\\x23\\x58\\x34\\x67\\x12\\xe9\\\n\\x9e\\x10\\x80\\x44\\x9c\\x8e\\xd2\\xdb\\x72\\xab\\x36\\x96\\x7e\\x35\\x12\\xf2\\\n\\x00\\x12\\x8c\\x5c\\x03\\x64\\xbf\\xd5\\x49\\x20\\x77\\x83\\x04\\xfa\\xdd\\xc1\\\n\\x21\\x19\\xa7\\x17\\x6d\\x01\\x44\\xfc\\xb0\\xf3\\x99\\x45\\x17\\xaa\\x37\\x2e\\\n\\x7c\\x32\\x4a\\x6f\\x9b\\x8c\\xa4\\x11\\x20\\x23\\x39\\x8e\\xd2\\xa2\\xe0\\x71\\\n\\xe0\\xda\\x86\\x56\\x3e\\x3a\\x7e\\xc5\\xe7\\xef\\x3c\\x72\\xae\\x1d\\x87\\x53\\\n\\x45\\xc0\\x8e\\x5d\\x1b\\x17\\x1d\\x1a\\x2f\\x1f\\xd0\\x8f\\xa3\\x49\\xf1\\x1c\\\n\\x20\\x8f\\x9e\\x6b\\xa7\\xe1\\x52\\x17\\xaf\\x55\\x9f\\xe4\\xf0\\xd9\\x36\\x8e\\\n\\x9d\\xef\\xc0\\xe6\\x08\\xec\\x92\\xd2\\x29\\x0a\\xf7\\x95\\x4c\\xc7\\x14\\xa5\\\n\\x47\\x20\\x6f\\x73\\xaa\\xc6\\xe7\\x23\\xe9\\xa4\\x17\\x9e\\xef\\x1b\\x5c\\x77\\\n\\xa9\\x1a\\x43\\x23\\xfe\\xf1\\xe8\\xa1\\x11\\xa7\\x57\\xe7\\xeb\\x9d\\xd0\\xb7\\\n\\x10\\xa4\\x14\\x0e\\x97\\x69\\x33\\x82\\xd9\\xd1\\x46\\x03\\xab\\x4a\\xa6\\x07\\\n\\xdd\\xa1\\x6d\\x0e\\x17\\xc7\\xcf\\x77\\x70\\xfc\\x7c\\x07\\xbf\\xff\\xe0\\x14\\\n\\xa7\\x2e\\x75\\x79\\xd5\\x34\\xe9\\xe1\\xc4\\x0f\\x01\\x09\\xac\\xde\\x58\\x72\\\n\\x44\\x08\\xe5\\x35\\x55\\xd3\\xd8\\x7d\\xe4\\x12\\x16\\xab\\x9d\\xac\\x94\\x78\\\n\\x1e\\x5d\\x5e\\x14\\xf4\\x94\\x39\\x40\\x62\\xac\\x89\\x87\\x17\\x17\\x60\\x30\\\n\\xe8\\xa4\\x94\\xe2\\xef\\x2b\\xb6\\xd4\\xfd\\xa6\\x6c\\xd3\\xde\\xc8\\x8f\\x93\\\n\\x49\\xae\\x41\\xe0\\x69\\xdc\\xe7\\x2b\\x13\\x11\\x7f\\x95\\x63\\xed\\x9b\\x6f\\\n\\xea\\xca\\xb7\\x1e\\xf8\\x37\\xe0\\xef\\xf4\\x3a\\x85\\x07\\x4a\\x67\\x90\\x18\\\n\\x62\\x63\\x34\\x45\\xe9\\x79\\x74\\x79\\x11\\x59\\x29\\xf1\\x0c\\x0e\\xdb\\xd9\\\n\\x73\\xe4\\x12\\xaa\\x26\\x91\\x92\\xd7\\xaa\\x37\\x96\\x1c\\x09\\x74\\x4f\\x50\\\n\\x4f\\xa2\\x34\\xa8\\x4f\\x09\\x89\\x03\\x60\\x5a\\x76\\x12\\x6b\\xcb\\x0a\\x23\\\n\\x3a\\x9b\\x96\\x91\\x1c\\xc7\\xea\\x92\\x19\\xc2\\xe0\\xce\\x18\\xf8\\x1b\\xa3\\\n\\x29\\xfa\\xad\\x07\\xb7\\x7e\\x12\\x38\\x61\\x66\\xfc\\x33\\x15\\x5a\\x61\\x34\\\n\\x59\\x37\\x30\\xe0\\x29\\x93\\x42\\x46\\x34\\x7d\\x57\\x6d\\xaa\\x4f\\x18\\xbc\\\n\\x90\\xfb\\x47\\x81\\xfc\\xa6\\xc1\\xa0\\x93\\x0f\\x94\\xce\\x24\\x2b\\x25\\x7c\\\n\\x33\\xcc\\xf1\\x26\\x1e\\x29\\x9b\\xed\\x3b\\x3c\\x24\\x10\\x0e\\x35\\x5e\\xf9\\\n\\x5e\\x30\\xf9\\xa0\\x04\\x56\\x3d\\x55\\x7a\\x5d\\x2a\\xf2\\x7b\\xe0\\x4e\\xc2\\\n\\x09\\x36\\x75\\x03\\x21\\x2f\\x23\\x91\\x35\\x7f\\x51\\xe8\\x19\\xad\\xf2\\x61\\\n\\xbb\\xd4\\x1d\\x59\\x55\\x59\\x7b\\x47\\xb8\\xfb\\x14\\xa4\\x9b\\xc0\\x21\\x7f\\\n\\x02\\xaf\\x7b\\xcb\\xa4\\x68\\x09\\x57\\x4f\\xc5\\xb6\\xba\\x3b\\x35\\x93\\x3c\\\n\\x82\\xe0\\xc1\\x68\\xa3\\x81\\x35\\x4b\\x66\\x89\\xbc\\x08\\x55\\x16\\x70\\xdb\\\n\\xc0\\xbe\\x13\\x09\\x42\\xfb\\xde\\xee\\x6f\\x17\\x07\\xf5\\x6e\\x87\\xf4\\x65\\\n\\x57\\xad\\x2f\\xfd\\x25\\x82\\x5d\\x36\\x87\\x8b\\xda\\x10\\x1b\\x48\\x20\\x64\\\n\\x26\\xc7\\xb1\\x6e\\x79\\x11\\x19\\xee\\x8d\\x65\\x86\\x26\\xc4\\x81\\xf2\\xad\\\n\\xf5\\xdb\\xca\\x36\\xed\\x0d\\x6a\\xe2\\x48\\xcf\\x14\\x1e\\x18\\xf6\\x5f\\x03\\\n\\xbd\\x65\\x42\\x10\\xf4\\x24\\xe5\\x83\\x5b\\x3f\\x89\\xaf\\xd8\\x5a\\xf7\\x53\\\n\\x34\\xea\\x81\\xe9\\x19\\xc9\\x71\\x7c\\x79\\xf9\\x6d\\x13\\xfe\\xbc\\x40\\x6d\\\n\\x43\\xab\\x7b\\xc0\\x08\\x76\\x55\\xad\\x2f\\xfd\\x65\\x28\\xd9\\xb0\\xc1\\x00\\\n\\x4d\\x88\\x27\\x00\\x57\\xe3\\xe5\\x6e\\xfa\\x03\\xb8\\x76\\x42\\x21\\x31\\xd6\\\n\\xc8\\xda\\x65\\xb3\\xb9\\x73\\x66\\x16\\x8a\\x10\\x06\\x21\\xe5\\xd3\\x46\\x93\\\n\\xf1\\x5c\\x79\\x65\\xdd\\x77\\xcb\\x5f\\x38\\xe1\\x17\\xb5\\xf7\\x92\\x13\\x68\\\n\\x0a\\x8f\\x1a\\x95\\x7e\\x6f\\xb2\\xfc\\x85\\x13\\xb1\\x2b\\xb7\\xd4\\x3d\\x65\\\n\\x97\\xba\\x73\\x48\\xbe\\xa7\\x08\\x61\\xb8\\x6b\\x66\\x16\\x8f\\x94\\xcd\\x0e\\\n\\xb9\\xe6\\x05\\x42\\x9f\\x65\\x84\\xc6\\xcb\\xdd\\x00\\x2e\\x4f\\xdf\\x43\\x22\\\n\\x2c\\x81\\x1f\\x3c\\x53\\xd2\\x2c\\x24\\xbf\\xd7\\xa4\\xa4\\xf1\\x4a\\x77\\x38\\\n\\x71\\x3f\\xe8\\x14\\x85\\x25\\x73\\xf3\\x58\\xb7\\xe2\\x36\\xb2\\x53\\xe3\\x01\\\n\\x91\\x25\\x04\\x3f\\x17\\xaa\\xf5\\x4a\\x45\\x65\\xdd\\xcb\\xe5\\x9b\\xeb\\x8a\\\n\\xbd\\xfe\\x44\\x64\\xf0\\x35\\xd0\\x5b\\xa6\\x69\\x9e\\x11\\x28\\xa5\\x58\\xb5\\\n\\xb5\\xbe\\xa4\\x62\\x4b\\xed\\x2f\\x85\\x6a\\xbd\\x2a\\xdd\\x39\\x7b\\x99\\xd9\\\n\\xa9\\xf1\\xac\\x5b\\x5e\\xc4\\xe2\\xb9\\x79\\x41\\x77\\xdb\\x50\\x68\\xbc\\xd2\\\n\\x83\\x44\\x22\\x24\\xbf\\xff\\xe0\\x99\\xf0\\x9f\\x01\\x88\\xe8\\x09\\x2b\\x37\\\n\\xd7\\x2c\\x94\\x8a\\x52\\x9b\\x66\\x8e\\xe1\\xd1\\x15\\x73\\x26\\xdc\\xa8\\xd1\\\n\\xb8\\xd2\\xd9\\xcf\\xa1\\x33\\x6d\\x5c\\xeb\\x19\\x73\\xe8\\xa5\\x0b\\xc1\\x5e\\\n\\xa4\\x76\\x05\\x94\\x67\\xd2\\x12\\x8d\\x6c\\x58\\x53\\x84\\xc9\\x13\\xb8\\xb2\\\n\\xb9\\x54\\x2a\\xff\\xd8\\x40\\xcf\\x80\\x1d\\x24\\x5b\\x51\\x98\\x8c\\x64\\x19\\\n\\x90\\xee\\xad\\x20\\x27\\x35\\x9e\\x05\\x85\\x39\\x11\\x9b\\x67\\xc1\\xf0\\xfb\\\n\\x0f\\x4e\\xd1\\x33\\x60\\x45\\x68\\x5a\\xe9\\xae\\x67\\x17\\xd5\\x85\\x93\\x8f\\\n\\x48\\xc5\\xd0\\x0c\\x71\\x27\\x85\\x6a\\x0d\\x79\\x48\\x25\\x52\\xe4\\x67\\x98\\\n\\xc9\\xcf\\x30\\xd3\\x3b\\x60\\xe5\\x8c\\xe7\\x33\\x25\\x16\\xab\\x3d\\x1d\\xc9\\\n\\x97\\xbd\\x13\\xa2\\x7b\\xc0\\xce\\xf7\\x7e\\x13\\x50\\x6b\\x00\\xc1\\x7a\\xaf\\\n\\xa6\\x1d\\x1f\\x63\\x64\\x66\\x6e\\x0a\\x85\\x79\\x29\\x11\\x65\\x99\\x46\\x02\\\n\\x6f\\x1f\\x0d\\x0e\\x63\\xd8\\xa3\\x69\\x10\\xe9\\x91\\x7f\\xd7\\xc8\\x2c\\x04\\\n\\x21\\x75\\xc0\\x89\\x22\\x25\\x31\\x86\\xc5\\x73\\x62\\x58\\x3c\\x27\\x97\\xfe\\\n\\x21\\x9b\\xfb\\xc8\\x7f\\x9f\\x95\\xfe\\x61\\x1b\\x83\\xc3\\x76\\x6c\\x0e\\x97\\\n\\xcf\\x1a\\x88\\xd2\\xeb\\x30\\x45\\xe9\\x49\\x88\\x35\\x62\\x8e\\x35\\x91\\x9e\\\n\\x14\\x43\\x4e\\x5a\\x42\\xc8\\x60\\xd0\\xcd\\x22\\xda\\xa8\\xc7\\xe9\\x52\\x71\\\n\\x19\\x1d\\x05\\xc0\\xb1\\x70\\xf2\\x61\\xa7\\xf0\\xaa\\x97\\xde\\x37\\x6a\\x23\\\n\\x49\\x87\\x91\\x14\\xcd\\x9f\\x95\\xcd\\xa2\\x10\\x66\\xd0\\x7f\\x07\\xd4\\x34\\\n\\xb4\\x70\\xf8\\x6c\\x1b\\x48\\x4e\\x2a\\xb1\\x7d\\x77\\x7b\\xbd\\x46\\xc1\\x10\\\n\\x76\\x48\\xa9\\xd6\\xa4\\xaf\\x0b\\x28\\x02\\xb8\\xd6\\x6d\\x61\\xef\\xd1\\xcb\\\n\\xc4\\xc5\\x44\\x11\\x6b\\x32\\x10\\x6d\\xd4\\x13\\x65\\xd0\\x63\\xd0\\x29\\x44\\\n\\x19\\x74\\xe8\\x14\\xe1\\xcb\\x58\\x00\\x40\\x44\\x1e\\xb4\\xfe\\x73\\xc1\\xee\\\n\\x74\\x8d\\xf9\\xf6\\x99\\xc3\\xa5\\xa2\\x6a\\x12\\x87\\x53\\xc5\\xa9\\x6a\\x38\\\n\\x9c\\x2e\\x46\\xec\\x2e\\xac\\x76\\x07\\x16\\xab\\xf3\\xc6\\xa7\\x5b\\x04\\x73\\\n\\xd5\\xe1\\xe4\\xaf\\x01\\xbf\\x0e\\x55\\x7f\\xd8\\xde\\xe9\\x35\\x65\\xb7\\x2a\\\n\\xd4\\x8f\\x11\\x62\\x71\\x7b\\xaf\\x45\\x84\\x3b\\xf1\\xf8\\xdf\\x04\\x52\\x4a\\\n\\xf6\\x4b\\x1d\\x7b\\xc3\\x09\\x46\\xbc\\xcf\\xaf\\xd8\\x72\\x38\\x51\\xaf\\xd9\\\n\\x67\\x4b\\x45\\x29\\x42\\x30\\x0d\\x49\\x32\\x42\\x98\\x91\\x32\\x09\\x48\\x02\\\n\\xcc\\x02\\x29\\x24\\x44\\x83\\x18\\xbd\\x38\\x19\\x80\\xcf\\xf6\\x43\\x59\\x91\\\n\\x63\\x08\\x18\\xa5\\x95\\x4b\\x9b\\x80\\x11\\x89\\x90\\x02\\xd9\\x27\\x11\\xfd\\\n\\x08\\xd1\\x87\\x94\\xfd\\x02\\xd9\\x2b\\x11\\x17\\x85\\xa6\\x35\\xb8\\x14\\x63\\\n\\xe3\\x87\\x1b\\xe6\\x47\\x76\\xc0\\xf8\\x16\\x6e\\xe1\\x16\\x6e\\xe1\\x16\\x6e\\\n\\xe1\\x16\\xbe\\x20\\xfc\\x3f\\xce\\x96\\xe0\\x58\\x7b\\xdb\\x58\\xfa\\x00\\x00\\\n\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x04\\x64\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x50\\x00\\x00\\x00\\x50\\x08\\x06\\x00\\x00\\x00\\x8e\\x11\\xf2\\xad\\\n\\x00\\x00\\x00\\x04\\x73\\x42\\x49\\x54\\x08\\x08\\x08\\x08\\x7c\\x08\\x64\\x88\\\n\\x00\\x00\\x00\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x04\\x65\\x00\\x00\\x04\\x65\\\n\\x01\\x59\\x90\\x9b\\x60\\x00\\x00\\x00\\x19\\x74\\x45\\x58\\x74\\x53\\x6f\\x66\\\n\\x74\\x77\\x61\\x72\\x65\\x00\\x77\\x77\\x77\\x2e\\x69\\x6e\\x6b\\x73\\x63\\x61\\\n\\x70\\x65\\x2e\\x6f\\x72\\x67\\x9b\\xee\\x3c\\x1a\\x00\\x00\\x03\\xe1\\x49\\x44\\\n\\x41\\x54\\x78\\x9c\\xed\\x9c\\x4d\\x48\\x14\\x61\\x18\\xc7\\xff\\x69\\xee\\xcc\\\n\\xee\\xa6\\x6b\\x16\\xdb\\x17\\x1b\\x1d\\xac\\x9b\\x22\\x04\\x16\\xb4\\xba\\x1d\\\n\\x0c\\xfb\\xf0\\x22\\x46\\x07\\x21\\x0b\\xea\\x92\\x87\\x6c\\x25\\x89\\x75\\x21\\\n\\xa5\\xd0\\x0e\\x86\\x75\\xf3\\x92\\x50\\x12\\x7e\\x44\\x5d\\xfa\\x3c\\x75\\xb0\\\n\\x2e\\x22\\x82\\x42\\xd0\\x51\\xc2\\xd6\\xca\\x20\\x47\\x4d\\xd1\\x65\\xd5\\x3a\\\n\\xe4\\x47\\x3a\\xe3\\xec\\xce\\x3c\\xef\\xd8\\x4e\\xfb\\xfc\\x2e\\xcb\\x3e\\xef\\\n\\x3b\\xcf\\xfb\\xf0\\x63\\xbe\\xde\\x77\\x67\\x07\\x60\\x18\\x86\\x49\\x5d\\xb6\\\n\\xac\\x0f\\xb4\\xd4\\x3d\\xfa\\x25\\x72\\x80\\x99\\xb4\\x18\\x14\\xc7\\x1c\\x66\\\n\\xe7\\x63\\x22\\xd3\\x1a\\xc6\\x99\\xe1\\x40\\x4e\\xd4\\x81\\xac\\x74\\xf9\\x66\\\n\\xb0\\xf9\\xfc\\x6d\\x51\\x79\\xb7\\x6a\\x05\\xcb\\x2f\\x96\\x1b\\x4e\\xf4\\x7d\\\n\\x74\\x5a\\x33\\xfe\\xb4\\xef\\x25\\xce\\x96\\x9d\\xc0\\x7e\\xdf\\x1e\\xc3\\x39\\\n\\x45\\xf2\\x69\\xe4\\x0b\\x5e\\xbc\\x79\\x8f\\x9d\\x0b\\x72\\xe8\\x7e\\xb8\\x73\\\n\\xcb\\xb5\\xa6\\xca\\x5b\\x22\\xf2\\xa6\\x89\\x48\\xa2\\xc7\\xf4\\xec\\xcc\\x3f\\\n\\x97\\x07\\x00\\x07\\xf6\\xef\\xc5\\xd4\\xcc\\x34\\x8e\\x97\\x1d\\x77\\x3a\\x24\\\n\\xe9\\xc6\\xfd\\xf0\\xe3\\x3b\\x22\\xf2\\x5a\\x2e\\x30\\xd9\\x90\\x64\\x09\\x81\\\n\\x33\\xc5\\x2e\\x87\\xe4\\xbc\\x2a\\x42\\x62\\xca\\x09\\x04\\xd6\\x4a\\xbc\\x57\\\n\\xdf\\xd9\\x4c\\xc9\\x95\\x92\\x02\\x81\\x55\\x89\\x92\\x2c\\xd5\\x50\\x24\\x6a\\\n\\x5e\\x44\\xec\\x40\\xdb\\xc3\\x27\\x9a\\xf1\\x2b\\x17\\xcf\\x25\\x9c\\x63\\x59\\\n\\x62\\xef\\xab\\x77\\x35\\xf7\\xea\\x3b\\x11\\x6c\\xae\\xac\\x37\\x5a\\x47\\xca\\\n\\xee\\x81\\xcb\\x50\\xf7\\xc4\\x94\\x17\\x08\\xd0\\x24\\xb2\\xc0\\x25\\xcc\\x4a\\\n\\x64\\x81\\x7f\\x61\\x46\\x22\\x0b\\x5c\\x87\\x51\\x89\\x2c\\x50\\x03\\x23\\x12\\\n\\x59\\xe0\\x06\\xac\\x48\\x74\\x49\\xba\\x37\\xdb\\x2c\\x50\\x07\\x49\\x96\\x10\\\n\\x38\\x55\\xec\\xd6\\x93\\xc8\\x02\\xe3\\x10\\x4f\\x22\\x0b\\x4c\\x00\\x49\\x96\\\n\\x50\\x7c\\xb2\\xc8\\x3d\\x1f\\x8b\\x85\\xd6\\xb7\\xb1\\xc0\\x04\\x91\\x9d\\xb2\\\n\\x66\\xdc\\xb6\\x73\\x61\\x23\\x73\\x5e\\x2b\\xe1\\x3d\\x90\\x08\\x0b\\x24\\xc2\\\n\\x02\\x89\\x08\\x13\\x98\\x96\\xae\\x9d\\xca\\xed\\x74\\xe1\\xf3\\xe8\\x98\\xa8\\\n\\x61\\x4c\\x33\\x12\\xf9\\x86\\x4c\\xf7\\x36\\xe1\\x79\\x85\\x5d\\x44\\x32\\xb3\\\n\\x25\\xfc\\x9c\\x88\\x62\\x71\\x61\\x71\\x4d\\xfc\\xe8\\xc1\\xc3\\x78\\xf6\\xfc\\\n\\x2d\\x66\\x66\\x67\\x45\\x0d\\x65\\x8a\\x4c\\x97\\x1b\\xa5\\x47\\x8e\\x09\\xcf\\\n\\x2b\\x4c\\xa0\\x24\\xa7\\x43\\xda\\xed\\x52\\xc5\\xbd\\xfb\\x0e\\xe1\\x70\\xfe\\\n\\x21\\x51\\xc3\\x24\\x1d\\x7c\\x0e\\x24\\xc2\\x02\\x89\\xb0\\x40\\x22\\x2c\\x90\\\n\\x08\\x0b\\x24\\xc2\\x02\\x89\\xb0\\x40\\x22\\x2c\\x90\\x08\\x0b\\x24\\x62\\x78\\\n\\x26\\xf2\\xe0\\xb5\\xf6\\x33\\x29\\xff\\x0b\\x97\\x4f\\x1b\\x5b\\x67\\x34\\x35\\\n\\x95\\xbb\\x73\\xfd\\x92\\x99\\xcd\\x92\\x9e\\xd0\\xdd\\x76\\xc3\\xdb\\xf0\\x21\\\n\\x4c\\x84\\x05\\x12\\x21\\xad\\xc6\\x54\\x54\\x54\\xa0\\xbf\\xbf\\x5f\\x54\\x2d\\\n\\x00\\x80\\x60\\x30\\x88\\xda\\xda\\xda\\x95\\xef\\x79\\x79\\x79\\x98\\x98\\x98\\\n\\x50\\xf5\\xeb\\xea\\xea\\x82\\xdf\\xef\\xd7\\xcd\\x15\\x0e\\x87\\xd1\\xd1\\xd1\\\n\\xa1\\x8a\\x57\\x55\\x55\\xa1\\xa9\\xa9\\x89\\x5e\\x2c\\x88\\x02\\xc7\\xc6\\xc6\\\n\\x10\\x89\\x44\\x84\\x14\\xb2\\xcc\\xe4\\xe4\\xe4\\x9a\\xef\\x91\\x48\\x44\\x53\\\n\\xe0\\xdc\\xdc\\x5c\\xdc\\x5c\\x8a\\xa2\\x68\\xd6\\x37\\x3e\\x3e\\x6e\\xbe\\xc0\\\n\\x75\\xf0\\x21\\x4c\\x84\\x05\\x12\\x61\\x81\\x44\\x48\\xe7\\xc0\\xd6\\xd6\\x56\\\n\\x28\\x8a\\xa2\\xd9\\xd6\\xd7\\xd7\\x87\\xc6\\xc6\\x46\\x55\\xdc\\xe3\\xf1\\xa0\\\n\\xa7\\xa7\\x67\\xc3\\x9c\\xb9\\xb9\\xb9\\x94\\x92\\x36\\x1d\\x92\\xc0\\xc2\\xc2\\\n\\xc2\\x0d\\xdb\\xa2\\xd1\\xa8\\x66\\xdc\\xe1\\x70\\xa0\\xb4\\xb4\\x94\\x32\\x6c\\\n\\x52\\x21\\xfc\\xd1\\x8e\\xf7\\x4b\\xbf\\x60\\x7e\\x54\\x5f\\x38\\x01\\x00\\xb1\\\n\\xc5\\xd5\\x3e\\x89\\x30\\xbf\\xc1\\x5f\\x1f\\x3f\\x28\\x80\\x14\\x27\\xcf\\xd7\\\n\\x4d\\xf8\\x21\\x50\\xb8\\xc0\\xa2\\x5d\\x7f\\x3e\\x95\\x6c\\xed\\xf6\\x8c\\xb4\\\n\\xd5\\x3e\\x89\\xb0\\x55\\xf5\\x7f\\xd2\\x3f\\xe4\\x6d\\x8f\\x9f\\xa7\\xcb\\x99\\\n\\xf8\\x38\\x66\\xe1\\x8b\\x08\\x11\\x16\\x48\\x84\\x05\\x12\\xb1\\xed\\xf3\\x81\\\n\\xdd\\xdd\\xdd\\x18\\x18\\x18\\xd0\\xed\\x33\\x38\\x38\\x68\\x79\\x1d\\xb6\\x15\\\n\\xd8\\xde\\x6e\\x7c\\xed\\xce\\x0a\\xf8\\x10\\x26\\x62\\xdb\\xfb\\xc0\\x64\\xc1\\\n\\xb6\\xf7\\x81\\xc9\\x82\\x6d\\xcf\\x81\\x7e\\xbf\\x1f\\x5e\\xaf\\x57\\xb7\\xcf\\\n\\xd0\\xd0\\x10\\x86\\x87\\x87\\x2d\\xad\\xc3\\xb6\\x02\\x1b\\x1a\\x1a\\x50\\x52\\\n\\x52\\xa2\\xdb\\xa7\\xba\\xba\\x1a\\x6d\\x6d\\x6d\\x96\\xd6\\xc1\\x17\\x11\\x22\\\n\\x2c\\x90\\x08\\x0b\\x24\\xc2\\x02\\x89\\xd8\\xf6\\x3e\\x90\\xd7\\x03\\x13\\x84\\\n\\xd7\\x03\\xff\\x73\\x58\\x20\\x11\\x16\\x48\\x84\\x05\\x12\\x61\\x81\\x44\\x2c\\\n\\x9b\\x0b\\x7b\\x3c\\x1e\\x14\\x14\\x14\\xa8\\xe2\\x39\\x39\\x39\\x86\\xf2\\xe4\\\n\\xe7\\xe7\\x63\\x6a\\x6a\\x4a\\x15\\xcf\\xca\\xca\\x8a\\xbb\\xad\\xcf\\xe7\\xd3\\\n\\xac\\xc1\\xe7\\xf3\\x19\\xaa\\x41\\x0f\\xcb\\x04\\x06\\x02\\x01\\x21\\x4b\\xea\\\n\\xbd\\xbd\\xbd\\xa6\\xb7\\x0d\\x85\\x42\\x08\\x85\\x54\\xef\\x89\\x10\\x0a\\x1f\\\n\\xc2\\x44\\x0c\\xbf\\x06\\xf9\\x87\\xf7\\xdf\\xbe\\xce\\xd8\\x6a\\x76\\x7c\\xcf\\\n\\xd0\\x6d\\xaf\\x6b\\xb9\\x90\\xe4\\x4b\\xbc\\x0c\\xc3\\x30\\x9b\\xc7\\x6f\\x3b\\\n\\xde\\x0c\\x3a\\x66\\xb1\\x4b\\x3d\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\\n\\x42\\x60\\x82\\\n\\x00\\x00\\x07\\xc8\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x50\\x00\\x00\\x00\\x50\\x08\\x06\\x00\\x00\\x00\\x8e\\x11\\xf2\\xad\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0e\\xc3\\x00\\x00\\x0e\\xc3\\x01\\xc7\\x6f\\\n\\xa8\\x64\\x00\\x00\\x07\\x5d\\x49\\x44\\x41\\x54\\x78\\x5e\\xed\\x9b\\x09\\x6c\\\n\\x15\\x45\\x18\\xc7\\x87\\x43\\xf1\\x40\\xd4\\x88\\x06\\x8f\\x12\\xad\\x31\\x1a\\\n\\x83\\x01\\x05\\x8c\\xd2\\x57\\x2a\\x14\\xb0\\x5e\\x80\\x40\\x83\\x31\\x81\\x06\\\n\\xb0\\x2a\\x18\\x88\\x22\\xa7\\x08\\x09\\x51\\x2c\\x72\\x44\\xa2\\x08\\x28\\xa2\\\n\\x86\\x4b\\x05\\xc3\\x8d\\x91\\x43\\xa3\\x9c\\x02\\xd1\\x2a\\x87\\x35\\x80\\x18\\\n\\x02\\x11\\x82\\x47\\x45\\x0e\\x1b\\xa0\\xfb\\xf9\\xff\\xde\\x7e\\xcb\\xdb\\x7d\\\n\\x3b\\xaf\\xef\\xb5\\x7d\\x7d\\xbb\\xdb\\xec\\x2f\\xf9\\xa7\\xe9\\xce\\xec\\xcc\\\n\\xff\\xfb\\x76\\x76\\x76\\x76\\xba\\x55\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\x21\\\n\\x21\\x21\\x21\\x21\\xf5\\x07\\xa3\\x83\\xba\\xca\\x88\\xa8\\x63\\x94\\xab\\xc8\\\n\\x4b\\x45\\x3d\\xe4\\xa9\\xa6\\x62\\x2b\\x38\\xc0\\xf8\\x1b\\xba\\x80\\xbc\\x10\\\n\\xbc\\xbc\\x26\\xb6\\x82\\x81\\x91\\xab\\x6e\\x83\\xe9\\xff\\x74\\xc1\\x78\\x21\\\n\\xf8\\x39\\x03\\x65\\x89\\x3d\\xff\\x03\\xb3\\x4b\\x75\\x81\\x78\\x29\\x78\\x9a\\\n\\x2f\\xf6\\xfc\\x0d\\x46\\x5e\\x9e\\x2e\\x00\\xaf\\x85\\x04\\x1a\\x98\\x97\\xdb\\\n\\x89\\x4d\\x7f\\x42\\x4a\\x35\\x44\\x02\\x7f\\xd0\\x05\\xe0\\x07\\xc1\\xdb\\x26\\\n\\xb1\\xea\\x4f\\x70\\x95\\x9f\\xd1\\x19\\xf7\\x93\\xe0\\xb1\\xb7\\xd8\\xf5\\x17\\\n\\xc6\\xfd\\xaa\\x19\\xae\\xb0\\xe7\\xcb\\x96\\x64\\x42\\x02\\x0f\\x1a\\x05\\xaa\\\n\\x89\\xd8\\xf6\\x0f\\x30\\xf6\\xa6\\xce\\xb0\\x1f\\x85\\x0b\\x3d\\x5c\\x6c\\xfb\\\n\\x03\\x8a\\xa8\\x6c\\x98\\xaa\\xd0\\x99\\xf5\\xa3\\xe0\\xb5\\xdc\\xc8\\x57\\xd7\\\n\\x89\\x7d\\xef\\xc1\\xe8\\x5b\\xa6\\x33\\xea\\x67\\x21\\x89\\xef\\x88\\x7d\\x6f\\\n\\x31\\x3a\\xaa\\x4e\\x3a\\x83\\x7e\\x17\\x12\\x78\\x1e\\xaf\\x78\\x77\\x49\\x18\\\n\\xde\\x40\\x85\\xaa\\x11\\x46\\x5f\\xa9\\xce\\x60\\x10\\x04\\xef\\xab\\x24\\x14\\\n\\x6f\\xc0\\x55\\x2c\\xd6\\x19\\x0b\\x92\\x10\\x43\\xbe\\x84\\x93\\x59\\xa2\\xcb\\\n\\x96\\x5c\\x75\\x42\\x67\\x2a\\x48\\x42\\x0c\\x3f\\xf2\\x9d\\x24\\x61\\x65\\x0e\\\n\\x5c\\xb9\\xa9\\x3a\\x43\\x41\\x14\\x92\\x38\\x48\\xc2\\xca\\x0c\\x78\\x70\\xdc\\\n\\x81\\x04\\x06\\x66\\xd9\\x92\\x4c\\x88\\x25\\xb3\\x7b\\x86\\xb8\\x62\\xcb\\x75\\\n\\x46\\x82\\x2c\\x24\\x31\\x33\\x7b\\x86\\x48\\x5e\\x67\\x9d\\x81\\xa0\\x0b\\x71\\\n\\xd5\\xfd\\x9e\\x61\\x74\\xd9\\x12\\x51\\xbb\\x75\\x06\\xea\\x83\\x90\\xc0\\x05\\\n\\x12\\x6a\\xdd\\x80\\x0e\\x9e\\xd7\\x75\\x5c\\x5f\\x84\\xf8\\x0c\\xcc\\xef\\xed\\\n\\x25\\xdc\\xf4\\x82\\x49\\xf6\\x1a\\x74\\x90\\x78\\xd9\\xd2\\xe5\\x72\\xa2\\x21\\\n\\x39\\x44\\xe3\\x9e\\x24\\x7a\\x21\\x42\\xd4\\xad\\xa9\\xb3\\xbc\\x4f\\x4b\\xa2\\\n\\x09\\x85\\xa9\\x8b\\xeb\\xdb\\xcf\\x67\\xe5\\x35\\x24\\x1a\\x78\\x2f\\xd1\\x98\\\n\\xee\\x44\\xc3\\xbb\\x11\\xf5\\xbc\\xd1\\x5d\\x87\\xf5\\x78\\x73\\x7d\\x9b\\xe3\\\n\\xfb\\x10\\x0d\\xcd\\x73\\x7b\\xb3\\x09\\x31\\x6e\\x96\\x90\\xd3\\x0b\\x6e\\xdd\\\n\\x69\\xba\\x0e\\xa9\\xd3\\x25\\x44\\xf3\\x27\\x11\\x9d\\xf9\\x97\\x1c\\x9c\\x3d\\\n\\x45\\xb4\\x78\\x0a\\x51\\xe7\\x26\\x66\\xbd\\x89\\x4f\\x4b\\x41\\x8a\\x70\\x7d\\\n\\x7b\\x3f\\x93\\x8a\\x88\\xfe\\x3a\\x26\\x85\\x82\\x61\\x10\\x6d\\xff\\x82\\xa8\\\n\\x6f\\xb6\\xb3\\x2e\\x5f\\xc0\\xaa\\x38\\x57\\x41\\xb4\\x74\\x06\\x51\\xfe\\x65\\\n\\xce\\xf3\\x44\\x48\\x62\\x7a\\xf7\\x0c\\xa3\\xcb\\x96\\x5c\\x75\\x4e\\xd7\\x19\\\n\\x7d\\xbd\\x44\\x5c\\x25\\xe0\\xdb\\x65\\x44\\x1d\\x1b\\xd4\\x2e\\x81\\xef\\xbf\\\n\\x22\\x07\\x13\\xf0\\xf7\\x71\\xa2\\xa7\\x6e\\x8f\\xd5\\x4f\\x96\\x40\\x8b\\x5d\\\n\\xeb\\x31\\xaa\\x1b\\xc5\\xce\\x13\\x21\\xd6\\xf4\\xee\\x19\\x62\\xf4\\xad\\x8c\\\n\\xef\\x24\\xaa\\x17\\xf3\\xc5\\x89\\xc0\\xc9\\x9a\\x3c\\x90\\x68\\xdd\\x02\\x39\\\n\\x20\\x8c\\x7a\\x8c\\xa8\\xdf\\xdd\\x44\\x73\\x46\\xc7\\xb4\\x62\\xb6\\x14\\x0a\\\n\\x4b\\xde\\x72\\x96\\x73\\x7d\\xee\\x63\\x60\\x1b\\xa2\\xca\\x0b\\x52\\x09\\xec\\\n\\xfb\\xce\\x4c\\xe8\\xe7\\x6f\\x13\\x9d\\x3e\\x29\\x07\\x41\\xe9\\x37\\x31\\x5f\\\n\\xf1\\x09\\xb4\\xda\\xfe\\x60\\x3c\\x51\\xd9\\x2e\\x39\\x28\\x4c\\x7d\\x36\\x76\\\n\\x9e\\x4d\\x48\\xe2\\x08\\x09\\xbf\\x76\\x60\\xf4\\x75\\xd5\\x75\\x10\\xd5\\xc2\\\n\\xc9\\xe2\\x02\\x1c\\x3d\\xe8\\xbc\\x9a\\x7b\\xb7\\x49\\x01\\x58\\x3d\\xd7\\x79\\\n\\x1e\\x2b\\x3e\\xc8\\xa2\\x7b\\xdc\\x75\\x58\\x6b\\xe6\\x49\\x05\\x70\\x68\\x2f\\\n\\xa6\\x84\\x4b\\x63\\x65\\x23\\x1f\\x95\\x02\\x81\\xe7\\x47\\x3e\\x5e\\x55\\xdb\\\n\\x7c\\xfe\\xe1\\x5f\\xa4\\x00\\xec\\xde\\x12\\x2b\\xb3\\x09\\x83\\xa6\\x1c\\xf3\\\n\\x7e\\x73\\x49\\x43\\xcd\\x40\\x03\\x8d\\xd1\\xd0\\x1e\\x5d\\x07\\x51\\xf1\\x1c\\\n\\x67\\xf1\\xf3\\x0e\\x67\\xd9\\xe4\\x41\\xe6\\xed\\xcd\\x9a\\x3b\\xce\\x59\\xc6\\\n\\x4a\\x35\\x81\\x27\\x8e\\x48\\x05\\x30\\x6b\\xa4\\xb3\\x8c\\x1f\\x2a\\xf6\\xf2\\\n\\xd9\\xa3\\xcc\\xe3\\xc9\\xda\\x5e\\x58\\x22\\x05\\x80\\xe7\\x6e\\x7b\\x99\\x4d\\\n\\x88\\xbd\\x76\\x7b\\x86\\x68\\x60\\x88\\xae\\xe1\\x8b\\x9a\\xd4\\x5f\\x5c\\x08\\\n\\xd3\\x07\\xeb\\xeb\\xe9\\x94\\x4a\\x02\\xf9\\x69\\x69\\x67\\xe4\\x23\\xee\\x3a\\\n\\x3c\\x8f\\x59\\xac\\xfd\\xd0\\x3c\\x96\\xac\\xed\\xb9\\xaf\\x4a\\x01\\xe0\\x07\\\n\\x8a\\xbd\\xcc\\x26\\xc4\\x5f\\xf3\\x3d\\xc3\\xe8\\xb2\\x25\\xa2\\xfe\\xd0\\x35\\\n\\x7c\\x51\\xfc\\x14\\xfb\\xfd\\x90\\x38\\x11\\xf6\\x6c\\x35\\xe7\\x3c\\x7e\\x70\\\n\\xe8\\xce\\xb1\\x94\\x4a\\x02\\x7b\\xdd\\x22\\x85\\xc2\\xa0\\xfb\\xdc\\x75\\x36\\\n\\x2c\\x96\\x42\\xb0\\x79\\x85\\x79\\x2c\\x59\\xdb\\xdb\\xd7\\x4a\\x01\\x38\\xb2\\\n\\xdf\\x59\\x16\\x27\\xcc\\x85\\xab\\x25\\x25\\xd5\\x03\\x09\\xbc\\x15\\x09\\x4c\\\n\\xfe\\x79\\xc6\\x80\\xd6\\x44\\xc7\\x0f\\x8b\\x1b\\x1b\\xbf\\xed\\x23\\x1a\\x51\\\n\\xa0\\x3f\\x87\\x95\\x4a\\x02\\x79\\x2d\\x68\\x47\\x57\\x67\\xc3\\x22\\x29\\x04\\\n\\xdb\\xd6\\x98\\xc7\\xe2\\xdb\\x9e\\xf9\\xb2\\xb9\\x0e\\xe4\\x27\\x3b\\xcf\\xa9\\\n\\xbc\\xfc\\xb1\\xf8\\x74\\x9a\\xbb\\xcd\\x38\\x19\\x39\\xaa\\xb5\\xa4\\xa5\\x7a\\\n\\x20\\x81\\x25\\xba\\x06\\x5d\\xea\\x7e\\x03\\xd1\\xb2\\x99\\x44\\x15\\x67\\xc5\\\n\\x95\\x50\\x59\\x09\\xf3\\xc3\\xf5\\xe7\\x64\\x32\\x81\\x89\\xe0\\xf9\\x93\\xbd\\\n\\xc7\\xb7\\x69\\x13\\x46\\x60\\x69\\x8d\\xf7\\x0b\\x31\\x0a\\x9b\\x22\\x89\\xa9\\\n\\xff\\xad\\x97\\xcd\\xc4\\x2f\\xaa\\xf9\\x6a\\x17\\xb7\\x77\\xd7\\xad\\x49\\x02\\\n\\xad\\xa7\\xac\\x5d\\xf6\\x04\\x6e\\x5d\\x6d\\x1e\\x4b\\x25\\x81\\x3f\\x6d\\x72\\\n\\xae\\x1d\\x35\\x42\\xf2\\xf8\\xd5\\x2e\\x57\\xd2\\x51\\x33\\xd0\\x48\\x91\\xae\\\n\\xf1\\x2a\\xc5\\x6f\\x06\\x27\\xff\\x14\\xa7\\x80\\x47\\x67\\x7c\\x9d\\x54\\x12\\\n\\x58\\x70\\xb5\\x14\\x0a\\x2f\\x75\\x75\\xd7\\xb1\\xcf\\x67\\x5f\\xce\\x37\\x8f\\\n\\xc5\\xb7\\x6d\\xad\\x03\\xf9\\x29\\x5d\\x32\\x80\\xa8\\x7f\\x2b\\x77\\x3b\\x1a\\\n\\x61\\xf0\\x7c\\x26\\x69\\xa8\\x39\\xd1\\xef\\x5d\\x72\\xd5\\x2e\\x5d\\x07\\x74\\\n\\xfa\\x1f\\x71\\x08\\xd8\\x98\\xbd\\x6c\\xfd\\x42\\x29\\x00\\x3b\\xd7\\x39\\xcb\\\n\\x58\\xa9\\x24\\x90\\x55\\x7e\\x42\\x2a\\x80\\x19\\x43\\xdd\\xe5\\x47\\x0f\\x48\\\n\\x21\\x98\\x37\\xc1\\x3c\\x96\\x6a\\xdb\\x55\\x08\\x31\\x9f\\xa1\\x1c\\xd5\\x52\\\n\\xd2\\x50\\x3b\\x30\\x8c\\x1f\\xe4\\xe1\\xec\\xea\\xa8\\x6c\\xa7\\x38\\x04\\x3c\\\n\\x39\\xdb\\xcb\\x78\\x3e\\xb2\\xd8\\xb4\\xdc\\x59\\xc6\\x4a\\x35\\xc8\\x8d\\x9f\\\n\\x48\\x05\\xb0\\xbf\\xd4\\xb9\\x58\\xe7\\x11\\x69\\x87\\xdb\\xe4\\xe3\\xe9\\x48\\\n\\x60\\x44\\x4d\\x90\\xf0\\xd3\\x03\\x1a\\x5c\\xe4\\xea\\x68\\xea\\x73\\xe2\\x10\\\n\\xf0\\x03\\x83\\x5f\\xcf\\x5e\\xef\\x67\\xbe\\xa1\\xf0\\xef\\x16\\xef\\x8e\\x70\\\n\\x9e\\xc7\\x4a\\x35\\xc8\\xc1\\x1d\\x9c\\x4f\\xcd\\xbd\\xdb\\x89\\xde\\x1b\\x8b\\\n\\xa7\\xe7\\x74\\x73\\xc3\\xc2\\x82\\x93\\x6b\\x2d\\x9d\\x6a\\x99\\x40\\x0c\\x96\\\n\\xc3\\xd4\\x56\\x5d\\x21\\xa1\\xa7\\x07\\x34\\x9a\\x15\\x1d\\xd6\\xf6\\xce\\x78\\\n\\x34\\x6c\\x59\\x25\\x2e\\x13\\xc0\\xb7\\x58\\x41\\x33\\x87\\xc1\\xa8\\xaa\\x13\\\n\\xe4\\x47\\x13\\xa5\\x52\\x02\\x4e\\x95\\x9b\\xcb\\x29\\xab\\x7e\\x6d\\x47\\x60\\\n\\x44\\x15\\x4a\\xd8\\xe9\\x85\\x87\\xb5\\xab\\xb3\\x87\\x1a\\x9b\\x2b\\x7b\\xfb\\\n\\x5c\\xc5\\xf0\\xa8\\xe1\\xe4\\xf6\\xce\\x72\\xd6\\xb7\\x54\\xdd\\x20\\xa7\\x14\\\n\\xbb\\xb7\\xb3\\x98\\xef\\xbf\\x8a\\x6d\\x3c\\x58\\xaa\\x45\\x02\\x11\\x63\\xdd\\\n\\x7d\\x43\\xc8\\xc3\\x3a\\x3a\\xbc\\x35\\x1d\\x47\\xf7\\x05\\x8b\\xdb\\x11\\x8d\\\n\\xed\\x81\\xb9\\xa9\\x0b\\x51\\x8f\\x16\\xee\\x3a\\x76\\xc5\\x6f\\x7a\\xf2\\x13\\\n\\x57\\x57\\xcf\\xae\\x8b\\x1b\\xaa\\x4f\\x98\\x1b\\xaa\\xbd\\x6e\\xd6\\xd7\\xab\\\n\\x49\\xdb\\x10\\x92\\x77\\x81\\x3a\\xa8\\x36\\x12\\x6e\\xdd\\x80\\x04\\xf6\\xd5\\\n\\x75\\x5e\\x1f\\x84\\x04\\xce\\x91\\x30\\xeb\\x0e\\x2c\\x6b\\x1a\\xf0\\x30\\xd7\\\n\\x19\\x08\\xb2\\x10\\x53\\x39\\x74\\xbd\\x84\\x59\\xb7\\xf0\\xc7\\xda\\x18\\x89\\\n\\x95\\x3a\\x23\\x41\\x15\\x92\\x37\\x4c\\xc2\\xcb\\x0c\\x48\\xe0\\x3c\\x9d\\x91\\\n\\x20\\x0a\\xc9\\x2b\\xe3\\xbd\\x4f\\x09\\x2d\\x33\\xa0\\xc3\\x16\\x48\\xe2\\x49\\\n\\x9d\\xa1\\xa0\\x09\\x71\\x74\\x93\\xb0\\x32\\x8b\\x91\\xa3\\x46\\xeb\\x0c\\x05\\\n\\x49\\x18\\x7d\\x2b\\x25\\x9c\\xcc\\xc3\\x7f\\xb9\\x82\\x81\\x03\\x3a\\x63\\x41\\\n\\x10\\xbc\\x57\\xf0\\x5f\\x1c\\x25\\x1c\\x6f\\xc0\\xaa\\xbd\\xa7\\xce\\x5c\\x10\\\n\\x84\\x04\\x96\\x48\\x18\\xde\\x82\\x39\\x64\\xa3\\xce\\xa0\\x9f\\x85\\xe4\\x1d\\\n\\xe3\\x8f\\x44\\x25\\x04\\x6f\\x31\\xf2\\x54\\x2b\\x18\\x3a\\xaf\\x33\\xea\\x57\\\n\\xe1\\xa2\\x17\\x89\\x7d\\x7f\\x00\\x43\\xb3\\x74\\x46\\xfd\\x28\\x5c\\xec\\x1d\\\n\\xfc\\x42\\x20\\xd6\\xfd\\x01\\xff\\xe3\\x0a\\x8c\\x95\\xeb\\x0c\\xfb\\x49\\xb8\\\n\\xd0\\x06\\x56\\x0f\\x0f\\x88\\x6d\\x7f\\x81\\x04\\x0e\\xd3\\x99\\xf6\\x95\\x22\\\n\\xea\\x63\\xb1\\xeb\\x3f\\x78\\x35\\x8f\\x24\\x96\\x69\\x8d\\xfb\\x40\\xf0\\x76\\\n\\x0a\\xaf\\xa1\\x37\\x89\\x5d\\x7f\\x82\\x5b\\xe4\\x61\\x9d\\x79\\x9f\\x68\\x8c\\\n\\xd8\\xf4\\x37\\xb8\\xd2\\x6b\\x34\\xe6\\x3d\\x15\\x2e\\xec\\xaf\\xbe\\xfc\\x37\\\n\\x57\\x1d\\xb8\\x4d\\xee\\x84\\x61\\xfd\\xf7\\x84\\x5e\\x09\\x0b\\x7e\\xb1\\x17\\\n\\x0c\\x90\\xc0\\xe9\\xda\\x40\\x3c\\x10\\xee\\x88\\x75\\x62\\x2b\\x38\\xe0\\x81\\\n\\x52\\xf5\\x37\\xd5\\x19\\x12\\x92\\x77\\x9e\\x17\\xfa\\x62\\x2b\\x58\\x18\\x5d\\\n\\xd5\\x95\\xb8\\x75\\xae\\xd5\\x09\\xc9\\xcd\\xc2\\xcf\\x6c\\x9d\\xf8\\x05\\x1f\\\n\\x3f\\xdb\\x26\\x12\\x7f\\x6e\\x81\\x9f\\x5d\\xaa\\x50\\xa1\\x25\\xd4\\xed\\x24\\\n\\x76\\x42\\x42\\x42\\x42\\x42\\x42\\x42\\x42\\x42\\x42\\x42\\x42\\x42\\x42\\x94\\\n\\x52\\xea\\x7f\\x69\\xa6\\xb0\\x82\\x23\\x39\\x0a\\xc8\\x00\\x00\\x00\\x00\\x49\\\n\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x4d\\xf7\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x01\\x2c\\x00\\x00\\x01\\x2c\\x08\\x06\\x00\\x00\\x00\\x79\\x7d\\x8e\\x75\\\n\\x00\\x00\\x01\\x61\\x69\\x43\\x43\\x50\\x6b\\x43\\x47\\x43\\x6f\\x6c\\x6f\\x72\\\n\\x53\\x70\\x61\\x63\\x65\\x44\\x69\\x73\\x70\\x6c\\x61\\x79\\x50\\x33\\x00\\x00\\\n\\x28\\x91\\x63\\x60\\x60\\x52\\x49\\x2c\\x28\\xc8\\x61\\x61\\x60\\x60\\xc8\\xcd\\\n\\x2b\\x29\\x0a\\x72\\x77\\x52\\x88\\x88\\x8c\\x52\\x60\\x7f\\xc8\\xc0\\x0e\\x84\\\n\\xbc\\x0c\\x62\\x0c\\x0a\\x89\\xc9\\xc5\\x05\\x8e\\x01\\x01\\x3e\\x40\\x25\\x0c\\\n\\x30\\x1a\\x15\\x7c\\xbb\\xc6\\xc0\\x08\\xa2\\x2f\\xeb\\x82\\xcc\\x3a\\x25\\x35\\\n\\xb5\\x49\\xb5\\x5e\\xc0\\xd7\\x62\\xa6\\xf0\\xd5\\x8b\\xaf\\x44\\x9b\\x30\\xd5\\\n\\xa3\\x00\\xae\\x94\\xd4\\xe2\\x64\\x20\\xfd\\x07\\x88\\x53\\x93\\x0b\\x8a\\x4a\\\n\\x18\\x18\\x18\\x53\\x80\\x6c\\xe5\\xf2\\x92\\x02\\x10\\xbb\\x03\\xc8\\x16\\x29\\\n\\x02\\x3a\\x0a\\xc8\\x9e\\x03\\x62\\xa7\\x43\\xd8\\x1b\\x40\\xec\\x24\\x08\\xfb\\\n\\x08\\x58\\x4d\\x48\\x90\\x33\\x90\\x7d\\x03\\xc8\\x56\\x48\\xce\\x48\\x04\\x9a\\\n\\xc1\\xf8\\x03\\xc8\\xd6\\x49\\x42\\x12\\x4f\\x47\\x62\\x43\\xed\\x05\\x01\\x6e\\\n\\x97\\xcc\\xe2\\x82\\x9c\\xc4\\x4a\\x85\\x00\\x63\\x02\\xae\\x25\\x03\\x94\\xa4\\\n\\x56\\x94\\x80\\x68\\xe7\\xfc\\x82\\xca\\xa2\\xcc\\xf4\\x8c\\x12\\x05\\x47\\x60\\\n\\x28\\xa5\\x2a\\x78\\xe6\\x25\\xeb\\xe9\\x28\\x18\\x19\\x18\\x9a\\x33\\x30\\x80\\\n\\xc2\\x1c\\xa2\\xfa\\x73\\x20\\x38\\x2c\\x19\\xc5\\xce\\x20\\xc4\\x9a\\xef\\x33\\\n\\x30\\xd8\\xee\\xff\\xff\\xff\\xff\\x6e\\x84\\x98\\xd7\\x7e\\x06\\x86\\x8d\\x40\\\n\\x9d\\x5c\\x3b\\x11\\x62\\x1a\\x16\\x0c\\x0c\\x82\\xdc\\x0c\\x0c\\x27\\x76\\x16\\\n\\x24\\x16\\x25\\x82\\x85\\x98\\x81\\x98\\x29\\x2d\\x8d\\x81\\xe1\\xd3\\x72\\x06\\\n\\x06\\xde\\x48\\x06\\x06\\xe1\\x0b\\x40\\x3d\\xd1\\xc5\\x69\\xc6\\x46\\x60\\x79\\\n\\x46\\x1e\\x27\\x06\\x06\\xd6\\x7b\\xff\\xff\\x7f\\x56\\x63\\x60\\x60\\x9f\\xcc\\\n\\xc0\\xf0\\x77\\xc2\\xff\\xff\\xbf\\x17\\xfd\\xff\\xff\\x77\\x31\\x50\\xf3\\x1d\\\n\\x06\\x86\\x03\\x79\\x00\\x15\\x21\\x65\\xee\\x35\\xc7\\xd1\\xfb\\x00\\x00\\x40\\\n\\x00\\x49\\x44\\x41\\x54\\x78\\x01\\xed\\x5d\\x07\\x7c\\x14\\xd5\\xd6\\x3f\\xdb\\\n\\xd2\\x13\\xd2\\x03\\x24\\x40\\x68\\x01\\xa4\\x57\\x15\\x11\\x51\\x11\\x50\\x51\\\n\\xec\\x05\\x7b\\x41\\x14\\xec\\xf5\\xf3\\xf9\\xf4\\xf9\\xf4\\xd9\\x10\\xcb\\x7b\\\n\\x8a\\x0d\\xec\\x8a\\xbd\\x8b\\x34\\xc5\\x86\\x8d\\x4e\\xa4\\xf7\\x10\\x12\\x42\\\n\\x2a\\xe9\\xd9\\x6c\\xfb\\xee\\x99\\x30\\x61\\x76\\x33\\xb3\\x3b\\x33\\x3b\\x75\\\n\\xf7\\xde\\xdf\\x6f\\x76\\xda\\x2d\\xe7\\xfe\\xef\\xcc\\x7f\\xef\\xbd\\x73\\xee\\\n\\x39\\x16\\x1f\\x09\\x40\\x03\\x45\\x80\\x22\\x40\\x11\\x30\\x20\\x02\\x2d\\x3b\\\n\\xb6\\x80\\xb7\\xa1\\x1e\\x12\\x46\\x1c\\xcb\\x48\\x67\\x15\\x92\\xd1\\x5d\\x71\\\n\\x08\\x9a\\x0b\\xd7\\x0a\\xdd\\xa6\\xd7\\x29\\x02\\x14\\x01\\x8a\\x80\\xaa\\x08\\\n\\x20\\x59\\x95\\xdc\\x76\\x35\\x94\\xde\\x73\\x03\\x34\\xad\\xfb\\x93\\x29\\xcb\\\n\\xc2\\xd7\\xc3\\x42\\xb2\\x3a\\x70\\xf3\\xe5\\xe0\\xae\\xaa\\x80\\xdc\\xb9\\xf3\\\n\\x21\\x7e\\xd8\\x68\\x55\\x05\\xa3\\x99\\x53\\x04\\x28\\x02\\x14\\x01\\x2e\\x02\\\n\\x2c\\x59\\x79\\xeb\\x6b\\x99\\xcb\\x96\\xd8\\x38\\xe8\\xfa\\xf4\\xab\\xd0\\xa1\\\n\\x87\\xc5\\x92\\x95\\xab\\x64\\x3f\\xf8\\x5a\\x9a\\xa1\\xe4\\xee\\x19\\xd0\\xbc\\\n\\x61\\x35\\x37\\x2f\\x7a\\x4c\\x11\\xa0\\x08\\x50\\x04\\x54\\x45\\xc0\\x5d\\x7a\\\n\\x00\\xbc\\x4d\\x0d\\xed\\x65\\xf8\\x9c\\x2d\\xd0\\xbc\\xee\\x2f\\xe8\\xd0\\xc3\\\n\\xaa\\xfd\\xfa\\x63\\x28\\x9f\\xf3\\x60\\x7b\\x44\\x3c\\xb0\\xc4\\xc5\\xd3\\x9e\\\n\\x96\\x1f\\x22\\xda\\x9d\\x34\\xb6\\xfa\\xa0\\xde\\x09\\x50\\x4f\\xf6\\x8d\\xad\\\n\\x00\\x4d\\x64\\xdf\\xe4\\x22\\x7b\\x66\\xf3\\x41\\x8b\\x1b\\xc0\\xc9\\x6c\\x3e\\\n\\x70\\x7a\\xda\\x8e\\x5b\\xc9\\xde\\xe5\\xf1\\x81\\xcb\\x0b\\xe0\\x26\\x9b\\x8b\\\n\\x9c\\xe3\\xde\\x83\\x1b\\x99\\xb2\\x3c\\x7a\\x0c\\x80\\x33\\x98\\x5e\\xce\\xc6\\\n\\x9c\\x63\\xf5\\xc8\\x35\\x9c\\xdc\\xc4\\x73\\x76\\x7f\\xe4\\x32\\xee\\x14\\x0b\\\n\\x96\\x23\\x39\\x59\\xc8\\x01\\x1e\\xb3\\x7b\\x3c\\xc1\\x7f\\x53\\x3c\\xb7\\x72\\\n\\x36\\x3c\\xb7\\xe1\\x46\\x6e\\xda\\xc9\\x66\\x23\\x17\\xd8\\x63\\x87\\xad\\xed\\\n\\x9a\\x83\\x5c\\x77\\x90\\x48\\x31\\xe4\\x3c\\xd6\\x4e\\x36\\x66\\x6f\\x61\\x8e\\\n\\xe3\\xc8\\x79\\x82\\xc3\\x42\\x36\\xdc\\x93\\x2d\\xc6\\x02\\x89\\x31\\x00\\xc9\\\n\\x64\\x9f\\x1c\\x0b\\xe4\\x98\\x64\\x4e\\x83\\x21\\x10\\xa8\\x5f\\xb1\\x18\\xca\\\n\\xfe\\x7d\\x17\\x79\\x68\\x3d\\x90\\x76\\xd9\\x0c\\xc8\\xbc\\xe9\\xee\\x8e\\x84\\\n\\x85\\x92\\xd6\\x2c\\x5c\\x00\\x95\\x2f\\x3d\\xed\\x27\\x34\\x25\\x2d\\x3f\\x38\\\n\\xc2\\x3a\\xf1\\x10\\x86\\xa8\\x6e\\x06\\xa8\\x68\\xf4\\x31\\x5b\\x65\\x93\\x0f\\\n\\xaa\\x1a\\x09\\xee\\x2d\\x3e\\x38\\xdc\\xec\\x83\\x1a\\x72\\x0f\\x8f\\x91\\xa8\\\n\\x90\\x4c\\x68\\xd0\\x0e\\x01\\x24\\x47\\x24\\xae\\xb4\\x38\\x0b\\xa4\\xc5\\x03\\\n\\xa4\\xc6\\x93\\x3d\\x39\\xce\\x48\\x04\\xc8\\x4c\\xb0\\x40\\x56\\x62\\xdb\\x96\\\n\\x4e\\xee\\xd9\\x30\\x32\\x0d\\xaa\\x22\\x80\\xa4\\xe5\\xdc\\xb9\\x05\\x32\\x67\\\n\\x12\\xe2\\x22\\xa1\\x43\\x0f\\x8b\\x2d\\x9d\\x92\\x16\\x8b\\x84\\xfc\\x7d\\x35\\\n\\x21\\xa2\\xa2\\xc3\\x3e\\xd8\\x4f\\xb6\\x92\\x7a\\x2f\\x94\\xd6\\x01\\x1c\\xac\\\n\\xf7\\xc1\\xa1\\x86\\xb6\\x5e\\x8e\\xfc\\x9c\\x69\\x4a\\xbd\\x11\\xc0\\xde\\x5d\\\n\\x4e\\x92\\x05\\xba\\x24\\x5b\\xa0\\x6b\\x0a\\x40\\x6e\\xb2\\x15\\xba\\xa7\\x5a\\\n\\xa0\\x07\\xd9\\xd2\\x09\\xb1\\xd1\\xa0\\x0e\\x02\\xa4\\x83\\xcc\\x1f\\xd2\\xa6\\\n\\x5f\\xcf\\xdc\\xe0\\xf6\\xb4\\x70\\x1c\\xe9\\x2a\\x3f\\x08\\xe4\\xcf\\x85\\x06\\\n\\x0e\\x02\\xd8\\x63\\x2a\\xae\\xf5\\xc1\\xae\\x2a\\x76\\xf3\\xc2\\x3e\\x42\\x52\\\n\\x0d\\x64\\x08\\x47\\x43\\x64\\x22\\x80\\xc3\\xea\\x92\\x3a\\xf2\\x47\\x44\\x36\\\n\\x28\\xc1\\x3a\\x92\\x0b\\x47\\x42\\x12\\x19\\x62\\xe6\\x13\\xe2\\xea\\x93\\x61\\\n\\x25\\x1b\\xee\\x2d\\xd0\\xad\\x13\\x0e\\x5d\\x29\\x91\\xb1\\x18\\xc9\\xdd\\x0b\\\n\\xf6\\xb0\\xd8\\x0c\\xdb\\x7b\\x5a\\x64\\xae\\x20\\xe7\\x9f\\x4f\\x41\\xca\\xe4\\\n\\x69\\xec\\xad\\xa8\\xdd\\xe3\\xbc\\xd2\\xd6\\x0a\\x1f\\x6c\\x29\\xf7\\xc2\\xa6\\\n\\x43\\x5e\\xd8\\x5e\\x49\\xe6\\x8f\\xc8\\x3c\\x12\\x0d\\x14\\x01\\x21\\x04\\x70\\\n\\x2e\\xad\\x5f\\xa6\\x05\\x06\\xe5\\x58\\xe1\\x98\\x6c\\x2b\\x0c\\xc8\\xc2\\xb9\\\n\\x33\\x4a\\x60\\x1e\\xa2\\x63\\x65\\x4b\\x4a\\x16\\x82\\xad\\xc3\\xf5\\x90\\x84\\\n\\x85\\x29\\x6a\\x16\\xbe\\x0e\\xb6\\x8c\\xcc\\xa8\\x25\\x2b\\x9c\\xc0\\x46\\x82\\\n\\x5a\\x57\\xea\\x85\\xf5\\x64\\xdb\\x49\\x7a\\x52\\x74\\x6e\\xa9\\xc3\\xb3\\x44\\\n\\x2f\\x48\\x40\\x00\\x3b\\x5b\\x7d\\x49\\xcf\\x6b\\x78\\x57\\x2b\\x8c\\x20\\x1b\\\n\\x12\\x18\\x7e\\x28\\x88\\xa6\\xc0\\xa8\\x2e\\xdc\\x71\\x2d\\x64\\xcd\\xbe\\x17\\\n\\x52\\xce\\x38\\x4f\\x54\\xd5\\x45\\x11\\x96\\xa8\\x9c\\x22\\x2c\\x12\\x0e\\xf3\\\n\\x90\\xa0\\x7e\\xda\\xeb\\x85\\xdf\\x8b\\xbc\\xd0\\x4c\\x7b\\x50\\x11\\xd6\\xc2\\\n\\xc6\\xaa\\x4e\\x3c\\xe9\\x81\\x8d\\xed\\x61\\x85\\x09\\x3d\\xdb\\x08\\x2c\\xd2\\\n\\x87\\x8f\\x7e\\x7a\\x56\\x38\\x7a\\xbb\\xff\\x71\\x51\\xa4\\x45\\x09\\x8b\\xf3\\\n\\xdc\\xe2\\x2a\\xa5\\xbf\\x0f\\xf9\\xe0\\xa7\\x3d\\x1e\\xf8\\x95\\x90\\x14\\x7e\\\n\\xa5\\xa3\\x81\\x22\\xa0\\x35\\x02\\xf8\\x95\\xf2\\x44\\x24\\xaf\\x5e\\x36\\x18\\\n\\x9c\\x63\\x21\\xaa\\x1d\\x91\\xd5\\xf3\\xf2\\x23\\x2b\\x16\\x5c\\x52\\xc7\\x6e\\\n\\xf3\\x3f\\x81\\xb8\\xfe\\x83\\xd9\\x2b\\xbc\\x7b\\xc5\\x08\\xcb\\x53\\x77\\x18\\\n\\x6c\\x29\\xa9\\xbc\\x85\\x18\\xfd\\x62\\xbd\\xd3\\x07\\xcb\\x76\\x7a\\xe0\\xdb\\\n\\xed\\x1e\\xf2\\x15\\xcf\\xe8\\xd2\\x52\\xf9\\xa2\\x09\\x81\\x2e\\x64\\x7a\\x67\\\n\\x6a\\x3f\\x1b\\x4c\\xea\\x6b\\x23\\xea\\x16\\xe6\\x27\\x2e\\x5e\\xb2\\x22\\x0d\\\n\\xca\\xea\\x59\\x85\\x6a\\x5b\\x45\\x08\\xab\\x7e\\xf9\\xb7\\x50\\x3e\\xf7\\x5f\\\n\\xd0\\xf5\\xa9\\x57\\x4c\\xb5\\x8c\\x67\\x67\\xa5\\x17\\xbe\\xd9\\xe6\\x61\\x86\\\n\\x7d\\xa8\\x6c\\x49\\x03\\x45\\xc0\\xa8\\x08\\xa0\\x12\\x2c\\x0e\\x17\\xcf\\xea\\\n\\x6f\\x83\\xbe\\x99\\x44\\xa7\\xc2\\x84\\x21\\x5c\\xb2\\xc2\\x2a\\x87\\x4d\\x58\\\n\\x48\\x56\\x65\\x8f\\xde\\x43\\xbe\\xea\\x7a\\x4d\\xa3\\x11\\xbf\\xe6\\x80\\x17\\\n\\x16\\x16\\xba\\xc9\\x57\\x3e\\xaa\\x95\\x69\\xc2\\xe7\\x3e\\xea\\x45\\x3e\\x26\\\n\\xdb\\x02\\xd3\\x87\\xd8\\x61\\x54\\x9e\\xb9\\x88\\xab\\x78\\xe6\\xc5\\xd0\\xb2\\\n\\x79\\x83\\x5f\\xfb\\x89\\xed\\x59\\xb1\\x89\\xc2\\x22\\xac\\xd6\\xa2\\xdd\\x50\\\n\\x74\\xc5\\x54\\x86\\xac\\xda\\x33\\x34\\xf0\\x32\\x9e\\x3f\\x8b\\x3d\\xb0\\x70\\\n\\x83\\x07\\x76\\x90\\xaf\\x7c\\x34\\x50\\x04\\xcc\\x8e\\x40\\x01\\xf9\\xca\\x38\\\n\\x7d\\x98\\x0d\\x8e\\xeb\\x46\\xba\\x5f\\x26\\x08\\xee\\xca\\x72\\x38\\x70\\xcb\\\n\\x95\\xe0\\x2a\\xde\\xcb\\x48\\x2b\\x95\\xac\\x30\\x51\\x58\\x84\\x85\\x19\\xb4\\\n\\xeb\\x69\\xe1\\xc9\\x91\\x60\\xb4\\x65\\x3c\\xbf\\x17\\x79\\xe0\\xbd\\x8d\\x1e\\\n\\xd8\\x53\\x4d\\x89\\x8a\\x6d\\x23\\xba\\x8f\\x1c\\x04\\x7a\\xa5\\x5b\\xe0\\xf2\\\n\\xa1\\x36\\xf2\\x95\\xd1\\xf8\\xc4\\xc5\\x92\\x56\\xd2\\xf8\\x89\\xcc\\xda\\x40\\\n\\xa9\\xad\\x10\\x36\\x61\\x61\\x81\\x46\\x25\\xad\\x9d\\x55\\x5e\\x78\\x75\\x95\\\n\\x9b\\x28\\x77\\x52\\xa2\\x92\\xfa\\x60\\xd0\\xf8\\xe6\\x43\\x60\\x10\\xf9\\xa2\\\n\\x38\\x73\\x8c\\x9d\\xe8\\x77\\x19\\x7b\\xa8\\xe8\\x69\\x6c\\x00\\x5b\\x62\\x92\\\n\\x2c\\x80\\x15\\x21\\x2c\\x2c\\x99\\x8f\\xb4\\x62\\x7a\\xf7\\x83\\xee\\x6f\\x7d\\\n\\xa5\\xf9\\x67\\xd9\\x2a\\xb2\\x86\\xef\\xad\\x75\\x6e\\x58\\xbe\\xeb\\xe8\\x72\\\n\\x09\\x59\\xe8\\xd0\\x44\\x14\\x01\\x13\\x22\\x70\\x5a\\x1f\\x2b\\x5c\\x3d\\xc2\\\n\\x0e\\x19\\x11\\xb8\\xa6\\x51\\x31\\xc2\\xc2\\x76\\xe5\\x92\\x96\\xa3\\x6b\\x37\\\n\\xc8\\x7d\\xe1\\x5d\\x70\\xe4\\x74\\xd1\\xac\\xc9\\xdd\\x44\\xd9\\xf3\\x93\\x4d\\\n\\x1e\\xf8\\xb0\\xd0\\x43\\x97\\xca\\x68\\x86\\x3a\\x2d\\xc8\\x88\\x08\\xe0\\x52\\\n\\xa0\\x4b\\x86\\xd8\\xe0\\xc2\\x41\\x36\\x62\\x86\\xc7\\xfc\\xea\\x10\\x2c\\xc6\\\n\\x8a\\x12\\x16\\x66\\x8a\\xa4\\x55\\xfb\\xe5\\x87\\x9a\\x93\\xd5\\x0e\\xa2\\xa2\\\n\\xf0\\xec\\x4a\\x37\\xb3\\xe8\\x98\\xad\\x1c\\xdd\\x53\\x04\\xa2\\x1d\\x81\\x9e\\\n\\x69\\x16\\xb8\\xe3\\x04\\x3b\\x14\\x68\\xa4\\x0a\\x81\\xaa\\x0b\\x87\\x3f\\x78\\\n\\x1d\\xb2\\xef\\x7f\\x02\\xac\\x31\\x64\\x15\\xb8\\xc2\\x41\\x71\\xc2\\x42\\xf9\\\n\\xbc\\x4d\\x8d\\x60\\x4d\\x20\\x06\\x84\\x34\\x08\\x4e\\xb7\\x0f\\xde\\x25\\x5f\\\n\\xfe\\x3e\\xdf\\xec\\xa1\\xeb\\xfb\\x34\\xc0\\x9b\\x16\\x61\\x3e\\x04\\xb0\\x83\\\n\\x75\\xde\\x40\\x1b\\x5c\\x41\\xbe\\x28\\xc6\\xda\\xd5\\xeb\\x6d\\x71\\xf5\\xac\\\n\\x12\\x8e\\x1b\\x0f\\x5d\\x1e\\x9f\\xa7\\x38\\x69\\xa9\\x42\\x58\\x5a\\x35\\x29\\\n\\x5a\\x4a\\x78\\x66\\xa5\\x8b\\x6a\\xa7\\x6b\\x05\\x38\\x2d\\xc7\\xd4\\x08\\xa0\\\n\\xd6\\xfc\\x5d\\xe3\\x1c\\x8c\\xc5\\x08\\xa5\\x2b\\xc2\\x25\\x2b\\x36\\x6f\\x24\\\n\\xad\\xae\\x4f\\xbe\\x0c\\x16\\x3b\\x19\\x9f\\x2a\\x14\\x8c\\xfd\\x39\\x41\\xa0\\\n\\x92\\x5e\\xb2\\xe6\\xef\\xfd\\x0d\\x6e\\xb8\\x77\\x09\\x25\\x2b\\x01\\x88\\xe8\\\n\\x65\\x8a\\x40\\x07\\x04\\x70\\xd9\\x19\\xbe\\x33\\xf8\\xee\\xe0\\x3b\\xa4\\x54\\\n\\xe0\\x23\\x2b\\xcc\\x3b\\x96\\x7c\\x74\\x53\\x92\\xac\\x30\\x4f\\xcd\\x09\\xcb\\\n\\xe7\\x76\\x11\\x3b\\xcd\\x77\\xcb\\x76\\x6c\\x81\\x5f\\x00\\xef\\x5f\\xea\\x62\\\n\\x86\\x81\\xd4\\xc4\\x0b\\x36\\x21\\x0d\\x14\\x01\\xf1\\x08\\xe0\\x3b\\x83\\x53\\\n\\x28\\xf8\\x0e\\xe1\\xbb\\x14\\x6e\\x10\\x22\\x2b\\x39\\x4a\\xa1\\x62\\x64\\xd1\\\n\\x74\\x48\\x88\\x64\\x75\\xf0\\xc1\\xdb\\xa1\\xf1\\xd7\\xef\\x65\\x2d\\xe3\\x59\\\n\\x53\\xe2\\x85\\xa7\\x7f\\x75\\x41\\x6d\\x8b\\x98\\xaa\\xd1\\x38\\x14\\x01\\x8a\\\n\\x40\\x30\\x04\\x3a\\xc5\\x01\\xdc\\x73\\xa2\\x03\\x46\\xe5\\xca\\xeb\\xb7\\xb8\\\n\\xca\\x4a\\x61\\xff\\x35\\xe7\\x00\\xeb\\x8a\\x8b\\x2d\\x4b\\x2d\\xb2\\xc2\\xfc\\\n\\xe5\\x49\\xca\\x4a\\x26\\x61\\x8f\\xa6\\x5b\\x58\\xb2\\xc2\\x64\\x52\\x5d\\x88\\\n\\x7d\\x40\\xd6\\xfe\\xfd\\x73\\x39\\x25\\x2b\\x09\\x90\\xd3\\xa8\\x14\\x81\\xa0\\\n\\x08\\xe0\\x1f\\x3f\\xbe\\x53\\xf8\\x6e\\xc9\\x09\\x8e\\xce\\x5d\\x21\\x79\\xf2\\\n\\xd9\\x7e\\x49\\xd5\\x24\\x2b\\x2c\\x48\\x33\\xc2\\x42\\x9b\\x3e\\xf1\\x83\\x87\\\n\\xfb\\x55\\x4e\\x0c\\x69\\xb5\\x12\\x6b\\x9f\\x73\\x7e\\x71\\xc1\\xdb\\xeb\\xa8\\\n\\x39\\x05\\x3f\\xf0\\xe8\\x09\\x45\\x40\\x21\\x04\\xf0\\xdd\\xc2\\x77\\x0c\\xdf\\\n\\x35\\xa9\\x21\\xfb\\xf6\\x7f\\x42\\xa7\\x0b\\xae\\x60\\x92\\xa9\\x4d\\x56\\x58\\\n\\x88\\xa6\\x43\\x42\\x2c\\x90\\xab\\x5c\\x8a\\xe7\\x18\\x84\\xd6\\x1e\\xd6\\x10\\\n\\x97\\x57\\x8f\\xac\\x70\\x31\\xe6\\x89\\xdb\\x62\\xd2\\x5f\\x8a\\x00\\x45\\x40\\\n\\x2d\\x04\\xd0\\x4c\\xf3\\x43\\xa7\\x38\\x88\\x7b\\x33\\xe9\\xaa\\x0f\\x0d\\x2b\\\n\\x57\\x40\\xd2\\xb8\\x53\\xd4\\x12\\xad\\x3d\\x5f\\xcd\\x09\\x0b\\x4b\\x16\\x22\\\n\\xad\\xee\\x6f\\x7c\\x0e\\x31\\xdd\\x7b\\x31\\xc2\\xed\\xad\\xf1\\xc2\\x43\\xdf\\\n\\xbb\\x88\\xdf\\xbe\\x76\\x59\\xe9\\x01\\x45\\x80\\x22\\xa0\\x32\\x02\\x59\\x44\\\n\\x7d\\xf2\\x91\\x89\\x0e\\xe8\\x99\\xa6\\xd9\\xe0\\x4b\\x52\\x8d\\x74\\x91\\x0a\\\n\\x5d\\x88\\x65\\xce\\x22\\x36\\xb4\\x38\\x21\\x79\\xd2\\x59\\xe0\\xe8\\xd6\\x93\\\n\\xb9\\xb2\\xad\\xc2\\x0b\\xf7\\x2c\\xa6\\x64\\xc5\\x81\\x87\\x1e\\x52\\x04\\x34\\\n\\x41\\x00\\x3b\\x08\\xf8\\xee\\xe1\\x3b\\x68\\xc4\\xa0\\x0b\\x61\\x21\\x10\\x5c\\\n\\xd2\\x4a\\x39\\xfb\\x22\\xc8\\xbe\\xe7\\x11\\x66\\x91\\xf4\\x86\\x83\\x5e\\xf8\\\n\\x3f\\xf2\\xc9\\x95\\xfa\\xf4\\x33\\xe2\\xe3\\x42\\x65\\x8a\\x06\\x04\\xf0\\xdd\\\n\\xc3\\x77\\x10\\xdf\\x45\\x0c\\xa8\\xba\\xe0\\xdc\\xb9\\xd5\\x10\\x55\\xd7\\x65\\\n\\x48\\xc8\\xad\\x79\\xe3\\xaa\\x95\\x90\\x30\\xfa\\x04\\x86\\xac\\xd0\\xc0\\xde\\\n\\x63\\x3f\\xba\\xc1\\x65\\x4c\\x72\\xe7\\x8a\\x4d\\x8f\\x29\\x02\\x11\\x8f\\x80\\\n\\x83\\x74\\x67\\x1e\\xca\\xdf\\x01\\xe9\\x4f\\x5c\\xc7\\xd4\\x35\\xef\\x7f\\x6f\\\n\\x43\\x6c\\xdf\\x01\\xba\\xd6\\x5b\\x77\\xc2\\x62\\x6b\\xff\\xf3\\x5e\\x0f\\x3c\\\n\\xf5\\x0b\\x6a\\xe0\\xb2\\x57\\xe8\\x9e\\x22\\x40\\x11\\xd0\\x13\\x81\\xbc\\xca\\\n\\xad\\x70\\xf3\\xe2\\x19\\x90\\xe8\\xac\\x63\\xc4\\xb0\\x26\\x77\\x02\\xbd\\x49\\\n\\x4b\\xb7\\x21\\x21\\xb7\\x21\\xb0\\x67\\x45\\xc9\\x8a\\x8b\\x08\\x3d\\xa6\\x08\\\n\\xe8\\x8b\\x40\\x20\\x59\\xa1\\x34\\xa8\\x20\\x8a\\x5f\\x03\\xf5\\x0c\\xba\\x13\\\n\\x16\\x8e\\x93\\x71\\x18\\x28\\xd4\\xb3\\xea\\x5c\\xb3\\x0b\\x7a\\x97\\xad\\xd5\\\n\\x13\\x23\\x5a\\x36\\x45\\x20\\xaa\\x10\\xe0\\x23\\x2b\\x04\\xa0\\x75\\xda\\xf5\\\n\\x90\\x71\\xcd\\x6c\\x5d\\xb1\\xd0\\x95\\xb0\\xf0\\x4b\\xc4\\xc3\\x3f\\xb8\\x04\\\n\\xe7\\xac\\x90\\xac\\x6e\\x5d\\x74\\x3d\\xdc\\xb4\\x64\\x16\\xf4\\x3e\\xb8\\x46\\\n\\x57\\xa0\\x68\\xe1\\x14\\x81\\x68\\x40\\x40\\x88\\xac\\x96\\x0f\\xb9\\x16\\x1e\\\n\\xe8\\x72\\xab\\xee\\x5f\\x0f\\x75\\x23\\x2c\\xd4\\xb3\\xc2\\x65\\x01\\x2d\\x02\\\n\\xab\\x02\\x58\\xb2\\x4a\\x6e\\xa9\\x86\\x58\\x77\\x33\\xdc\\xb4\\x74\\x36\\x25\\\n\\xad\\x68\\x78\\x63\\x68\\x1d\\x75\\x45\\x20\\xd6\\xd5\\x08\\x76\\x8f\\xcb\\x4f\\\n\\x06\\x24\\xab\\xaf\\xc7\\xdc\\xce\\xbc\\xab\\xf8\\xce\\xe2\\xbb\\xab\\x57\\xd0\\\n\\x85\\xb0\\x50\\x83\\x1d\\x95\\x42\\x83\\xa9\\x2e\\x14\\x94\\xae\\x06\\x24\\x2b\\\n\\x36\\x50\\xd2\\x62\\x91\\xa0\\x7b\\x8a\\x80\\x7a\\x08\\xec\\xee\\x32\\x0a\\x5e\\\n\\x9e\\x3c\\x0f\\x9c\\xf6\\x78\\xa6\\x10\\x96\\xac\\xd8\\x12\\xf1\\x9d\\xc5\\x77\\\n\\x17\\xdf\\x61\\x3d\\x82\\xe6\\x5f\\x09\\x71\\xbd\\xd2\\x7d\\xc4\\x26\\xcf\\xd6\\\n\\x8a\\xd0\\x15\\x3e\\xb5\\xf0\\x4d\\x38\\x67\\xd5\\x73\\x7e\\xb8\\x20\\x90\\x08\\\n\\x28\\x02\\x4b\\x03\\x45\\x80\\x22\\xa0\\x0e\\x02\\x38\\x05\\xd3\\xaf\\xf4\\x2f\\\n\\xf8\\x6e\\x24\\xff\\x9c\\x15\\x2e\\xe3\\x79\\x6a\\x8a\\x03\\x62\\x6c\\xd2\\x97\\\n\\xf1\\x84\\x23\\xb1\\xe6\\x84\\x85\\x8b\\x2c\\x57\\xec\\x11\\xdf\\xa5\\xa4\\xa4\\\n\\x15\\x4e\\xf3\\xd2\\xb4\\x14\\x01\\xf5\\x10\\x38\\xa5\\x97\\x15\\xee\\x1d\\xef\\\n\\x50\\xaf\\x00\\x9e\\x9c\\x35\\x1d\\x12\\xa2\\x19\\x0b\\x29\\x64\\x85\\xf2\\xfe\\\n\\x30\\xe4\\x1a\\xf8\\x72\\xcc\\x1d\\x7e\\xa2\\x5b\\x7c\\x5e\\xb0\\x7b\\x05\\x26\\\n\\xbf\\xfc\\x62\\xd2\\x13\\x8a\\x00\\x45\\x40\\x2d\\x04\\xf0\\x5d\\x96\\x6b\\x9a\\\n\\x46\\xae\\x4c\\x9a\\x11\\x16\\x1a\\xdf\\x93\\x6b\\x22\\x86\\x4b\\x5a\\xad\\xb6\\\n\\x58\\x78\\x6d\\xd2\\x0b\\xb0\\x3d\\xf7\\x38\\xb9\\x75\\xa6\\xe9\\x28\\x02\\x51\\\n\\x8f\\x40\\x72\\x53\\x95\\x22\\x18\\xe0\\x3b\\x8d\\xef\\xb6\\x56\\x41\\x93\\x21\\\n\\x21\\x9a\\x62\\x9d\\xf5\\x75\\x6b\\xd8\\x96\\x42\\x4f\\xfe\\xfb\\x1d\\x28\\x4d\\\n\\x2f\\xa0\\x64\\xa5\\xd5\\xd3\\x41\\xcb\\x89\\x48\\x04\\x58\\xd5\\x85\\x1f\\x07\\\n\\x5d\\x01\\x4b\\x87\\xcf\\x0c\\xbb\\x8e\\x68\\xb9\\xf4\\xa5\\xb3\\x63\\x34\\x71\\\n\\xdc\\xaa\\x3a\\x61\\xa1\\xb1\\x7b\\xb4\\x1f\\xbd\\xb1\\x2c\\xf4\\x24\\x7b\\xd8\\\n\\xc8\\xd1\\x0c\\x28\\x02\\x14\\x81\\xa0\\x08\\xb0\\x64\\xc5\\x2e\\xb7\\xf9\\x96\\\n\\x4c\\xaa\\x2b\\x41\\x5a\\x43\\x3b\\x5b\\xe0\\x89\\xc9\\x0e\\xb0\\x12\\x43\\x9d\\\n\\x6a\\x06\\xd5\\x87\\x84\\x1f\\x6c\\xf4\\x50\\xb2\\x52\\xb3\\x05\\x69\\xde\\x14\\\n\\x01\\x91\\x08\\x04\\x92\\x15\\x26\\x9b\\xba\\x76\\x1e\\x14\\x90\\xaf\\x81\\xe1\\\n\\x06\\xec\\x90\\xe0\\xbb\\xae\\x76\\x50\\x95\\xb0\\xd0\\x6f\\xe0\\xfb\\x1a\\x54\\\n\\x82\\x0b\\x52\\xa7\\xc6\\x43\\xdc\\x53\\x7a\\x4c\\x11\\xa0\\x08\\x10\\x04\\xf8\\\n\\xc8\\x0a\\x81\\x41\\x3d\\xab\\x1d\\x5d\\x8f\\x55\\x04\\x23\\x7c\\xd7\\xf1\\x9d\\\n\\x57\\x33\\xa8\\x46\\x58\\xe8\\x91\\x19\\x9d\\x9c\\x0a\\xad\\x11\\x54\\xa3\\x52\\\n\\xa7\\x14\\xbe\\x05\\x0f\\x7e\\x72\\x36\\xd5\\x88\\x57\\x03\\x5c\\x9a\\xa7\\x69\\\n\\x11\\x08\\x46\\x56\\xa8\\xc1\\xae\\x54\\xc0\\x77\\x1d\\xdf\\x79\\x7c\\xf7\\xd5\\\n\\x0a\\xaa\\x11\\xd6\\x3b\\xeb\\x3d\\x9a\\x7a\\x64\\x46\\xb2\\x3a\\x77\\xd5\\xb3\\\n\\x74\\x19\\x8f\\x5a\\x4f\\x0a\\xcd\\xd7\\xb4\\x08\\x9c\\x49\\x86\\x7d\\xec\\x9c\\\n\\x15\\x5b\\x89\\x40\\x0d\\x76\\xf6\\x7a\\xb8\\x7b\\x74\\xd6\\x8a\\x7e\\x0f\\xd5\\\n\\x0a\\xaa\\x10\\xd6\\x8e\\x4a\\x2f\\x7c\\xb1\\x45\\x3d\\xa1\\x03\\xc1\\xe8\\x5e\\\n\\xb1\\x89\\x21\\x2b\\xf6\\x3a\\x5d\\xc6\\xc3\\x22\\x41\\xf7\\x14\\x01\\x80\\xb7\\\n\\x4e\\x7e\\x0a\\xf6\\x64\\x0f\\x6d\\x87\\x42\\x2d\\xb2\\x62\\x0b\\xf8\\x7c\\xb3\\\n\\x07\\x90\\x03\\xd4\\x08\\x8a\\x13\\x96\\x9b\\xf4\\x0b\\x9f\\x5d\\x29\\x6c\\x2e\\\n\\x46\\x8d\\x4a\\xec\\xcf\\x1a\\xd4\\x41\\xb9\\x94\\x92\\x96\\x1a\\x48\\xd3\\x3c\\\n\\xcd\\x88\\x80\\x33\\x26\\x11\\x5e\\x9a\\xf2\\x0a\\x43\\x5a\\x6a\\x93\\x15\\xe2\\\n\\x83\\x43\\x43\\xe4\\x00\\xe4\\x02\\xa5\\x83\\xe2\\x6a\\x0d\\x1f\\x6c\\x74\\xc3\\\n\\xdb\\x64\\x38\\xa8\\x47\\xa0\\xcb\\x78\\xf4\\x40\\x9d\\x96\\x69\\x16\\x04\\xec\\\n\\x6e\\x27\\xb8\\xed\\xb1\\x9a\\x89\\x7b\\xd5\\x08\\x1b\\x5c\\x3a\\xc4\\xae\\x68\\\n\\x79\\x8a\\xf6\\xb0\\x50\\x41\\xf4\\xc3\\xbf\\xf5\\x21\\x2b\\x44\\x85\\xab\\x11\\\n\\xcf\\xa2\\x84\\x3d\\xad\\x33\\xd7\\xbd\\xc4\\x9e\\xd2\\x3d\\x45\\x20\\x6a\\x11\\\n\\xd0\\x92\\xac\\x10\\xe4\\x0f\\x0b\\x3d\\x80\\x9c\\xa0\\x64\\x50\\x94\\xb0\\xde\\\n\\x5a\\xe7\\x26\\x5f\\x08\\x94\\x14\\x4f\\x7a\\x5e\\x81\\xa4\\xb5\\x3f\\xf3\\x18\\\n\\x98\\x3f\\xf1\\x79\\xe9\\x19\\xd1\\x14\\x14\\x01\\x8a\\x40\\x58\\x08\\x20\\x17\\\n\\x20\\x27\\x28\\x19\\x14\\x23\\xac\\x9d\\x55\\x5e\\x58\\xbe\\x4b\\x9d\\x89\\x36\\\n\\xa9\\x15\\x66\\x49\\x0b\\xc9\\xea\\xc5\\xd3\\x5f\\x83\\xe6\\xd8\\x14\\xa9\\x59\\\n\\xd0\\xf8\\x14\\x01\\x53\\x21\\x80\\xaa\\x0b\\xb3\\x16\\xcf\\x84\\xf8\\x23\\x0e\\\n\\x23\\x8c\\x22\\x3c\\x72\\x02\\x72\\x83\\x52\\x41\\xb1\\x39\\xac\\xbb\\x17\\xb7\\\n\\x12\\xa5\\x31\\x65\\xbb\\x7f\\xe1\\x56\\xd2\\x46\\x2c\\x27\\x7a\\x6c\\xda\\x9a\\\n\\xbf\\x08\\x57\\x66\\x9a\\x9e\\x22\\x20\\x15\\x01\\xae\\x9e\\x95\\x11\\xff\\xa4\\\n\\x07\\xe5\\x58\\x60\\xee\\xe9\\x31\\x52\\xab\\xc5\\x1b\\x5f\\x91\\x1e\\xd6\\xef\\\n\\x45\\xa8\\xe1\\x6a\\x2c\\xb2\\xc2\\xda\\x52\\xb2\\xe2\\x6d\\x73\\x7a\\x31\\x82\\\n\\x10\\xe0\\x92\\x15\\x56\\xab\\x7b\\xe5\\x16\\xe2\\x9a\\xeb\\x06\\x70\\xb8\\x5b\\\n\\x0c\\x53\\x4b\\xe4\\x06\\xe4\\x08\\x25\\x82\\x22\\x84\\xf5\\x9e\\xc6\\xcb\\x6f\\\n\\x94\\xa8\\x38\\xcd\\x83\\x22\\x60\\x76\\x04\\x02\\xc9\\x8a\\xad\\xcf\\xf6\\xae\\\n\\xc7\\x81\\xcb\\x4e\\x4c\\x28\\x18\\x28\\x28\\xc5\\x11\\x61\\x13\\x16\\xfa\\x14\\\n\\xdc\\x53\\x6d\\xbc\\xde\\x55\\xa8\\xb6\\x8a\\x6d\\x6d\\x84\\xd9\\xe4\\x9f\\x88\\\n\\x7a\\xe3\\x09\\x85\\x14\\xbd\\x6f\\x44\\x04\\x84\\xc8\\x4a\\x0b\\x3d\\x2b\\x39\\\n\\x78\\x20\\x47\\x20\\x57\\x84\\x1b\\xc2\\x26\\xac\\x85\\x2a\\xaa\\xe1\\x87\\x5b\\\n\\x39\\xa1\\xf4\\x0c\\x59\\x2d\\x99\\x09\\xfd\\x4b\\xfe\\xa4\\xde\\x78\\x84\\x40\\\n\\xa2\\xd7\\x0d\\x8b\\x40\\x52\\x73\\xb5\\x9f\\x47\\x66\\x56\\x50\\xa3\\x92\\x15\\\n\\x2b\\x9f\\x12\\x5c\\x11\\x16\\x61\\xad\\x39\\xe0\\x85\\x1d\\x55\\xe6\\xea\\x5d\\\n\\x59\\xbd\\x2e\\x98\\xb5\\xe4\\x46\\xe8\\x59\\x5e\\xc8\\xe0\\x48\\x35\\xe2\\xd9\\\n\\xc7\\x89\\xee\\xcd\\x82\\x40\\x43\\x7c\\x3a\\x2c\\x1b\\x7a\\xbd\\x9f\\xb8\\x46\\\n\\x27\\x2b\\x14\\x16\\xb9\\x02\\x39\\x23\\x9c\\x10\\x16\\x61\\x2d\\x24\\x36\\xda\\\n\\xcd\\x16\\xbc\\x56\\x07\\x14\\xe6\\x9f\\xe2\\x27\\x36\\x25\\x2d\\x3f\\x38\\xe8\\\n\\x89\\x09\\x10\\x58\\x31\\xe4\\x6a\\xf8\\x62\\xcc\\x9d\\x8c\\xa4\\x66\\x20\\x2b\\\n\\x16\\xd2\\x70\\x39\\x43\\xb6\\x5a\\xc3\\x4e\\xb2\\xb8\\xf1\\x96\\x6f\\xfd\\x1d\\\n\\x2e\\xb2\\x42\\x99\\x61\\x4f\\x97\\xf1\\x98\\xa1\\x95\\xa8\\x8c\\xa1\\x10\\xc0\\\n\\x39\\x58\\xb3\\xb9\\xbc\\x7b\\x61\\xaa\\x03\\xfa\\x66\\xca\\xeb\\x2b\\xc9\\x4b\\\n\\x45\\x50\\xfc\\x66\\x5b\\xf8\\x13\\x68\\xa1\\x1a\\x43\\xcd\\xfb\\xac\\x72\\x29\\\n\\xb7\\x0c\\xb6\\xa7\\x95\\xd6\\x70\\x90\\x7b\\x99\\x1e\\x53\\x04\\x0c\\x8b\\x80\\\n\\xd9\\xc8\\x0a\\x81\\x0c\\x87\\x3b\\x64\\xad\\x4c\\xac\\x77\\xfa\\xe0\\xa7\\xbd\\\n\\xe1\\x8d\\x45\\x8d\\xf0\\x04\\x20\\x69\\x61\\xe0\\x3a\\x6b\\x5d\\x3e\\xf4\\x5a\\\n\\xa8\\x49\\xea\\x62\\x04\\xf1\\x0c\\x27\\x83\\xbb\\xa5\\x01\\x9a\\x0e\\xed\\x82\\\n\\xa6\\xf2\\xdd\\xe0\\xac\\x3d\\x04\\x1e\\x67\\x63\\xdb\\x46\\xae\\xbb\\xd9\\x63\\\n\\x67\\x03\\xb9\\xd6\\x04\\x5e\\x77\\x2b\\xd8\\x62\\x12\\xc0\\x16\\x8b\\x5b\\x12\\\n\\xd9\\x12\\xc1\\x1e\\x97\\xc8\\xec\\xdb\\x8e\\x93\\x20\\x2e\\xbd\\x3b\\x24\\xe4\\\n\\xf4\\x86\\xf8\\xcc\\x7c\\xb0\\xda\\xa9\\x82\\xaf\\xe1\\x1a\\x5c\\x25\\x81\\x90\\\n\\x3b\\x66\\x8c\\xf6\\x41\\x72\\xac\\x74\\xfb\\xef\\xb2\\x08\\x6b\\xd9\\x4e\\x0f\\\n\\xb4\\x9a\\xbb\\x83\\xd5\\xde\\x14\\x5c\\xd2\\x52\\xca\\x20\\x7f\\x7b\\xe6\\x26\\\n\\x3d\\x68\\xaa\\xd8\\x0b\\x75\\xfb\\xd6\\xb7\\x91\\x13\\x21\\xa8\\x46\\x42\\x50\\\n\\x4d\\x65\\xbb\\xa0\\xb5\\x4e\\x25\\xf3\\xd3\\x16\\x2b\\x21\\xad\\x1e\\x84\\xbc\\\n\\xfa\\x40\\x42\\x76\\x6f\\x48\\xc4\\x7d\\xe7\\xbe\\xd0\\xa9\\xd7\\x68\\x88\\x49\\\n\\x4a\\x37\\x29\\x8a\\xe1\\x8b\\x8d\\xaa\\x0b\\x09\\xce\\x5a\\xd8\\x11\\x61\\x2e\\\n\\xed\\x90\\x3b\\x90\\x43\\xce\\x1f\\x24\\x9d\\x7e\\x24\\xcf\\x61\\xf9\\x88\\x17\\\n\\x9c\\x6b\\x3f\\x6f\\xd5\\xd4\\x9a\\x68\\xf8\\x4d\\x1f\\x3a\\x87\\xfc\\x43\\x1b\\\n\\x61\\x5f\\xce\\x51\\x23\\x67\\xa1\\x53\\x44\\x4e\\x8c\\xe6\\xaa\\xfd\\x50\\xbd\\\n\\xf5\\x67\\xa8\\xde\\xf6\\x0b\\xd9\\x7e\\x86\\x16\\x72\\x6e\\x88\\x40\\x3c\\xb0\\\n\\x24\\xe7\\x0d\\x86\\xf4\\x01\\x27\\x41\\x7a\\xff\\x93\\x20\\xad\\xdf\\x38\\x70\\\n\\x24\\xa4\\x1a\\x42\\x34\\xb5\\x85\\x60\\xf5\\xac\\x1c\\xc4\\x24\\x4c\\x24\\xfa\\\n\\xe1\\xec\\x92\\x0c\\xf0\\xc6\\x79\\x31\\x60\\x91\\xe8\\x65\\x47\\x32\\x61\\x15\\\n\\x96\\x79\\xe1\\xde\\x25\\xe6\\x9d\\x6c\\x57\\xfb\\x41\\x33\\x43\\xfe\\x9e\\xd6\\\n\\x66\\x28\\x5f\\xff\\x2d\\x54\\x6d\\xfe\\x9e\\x21\\xa9\\x66\\xd2\\xa3\\x32\\x45\\\n\\x20\\x0f\\x77\\x4a\\xf7\\x61\\x84\\xbc\\xc6\\x43\\xe6\\xd0\\xd3\\x19\\x12\\x93\\\n\\xfa\\xc0\\x9b\\xa1\\x9e\\x2c\\x59\\xb1\\x66\\x8d\\x23\\xd5\\x79\\xf0\\x9c\\x29\\\n\\x0e\\x18\\xd2\\x59\\xda\\x34\\xba\\xe4\\x3e\\xd9\\x4f\\x7b\\x22\\x64\\x2c\\x68\\\n\\x86\\x27\\x57\\x61\\x19\\x6b\\x76\\xfe\\x01\\x25\\x2b\\xdf\\x81\\xb2\\x55\\x9f\\\n\\x82\\xa7\\x85\\x18\\xdf\\x36\\x5b\\x20\\xbd\\xfb\\xba\\xa2\\xf5\\xcc\\xb6\\x6f\\\n\\xe9\\x7f\\x21\\x2e\\xa3\\x07\\xe4\\x8e\\xbb\\x1c\\xba\\x9e\\x70\\x39\\x24\\x64\\\n\\xf5\\x34\\x5b\\x6d\\x78\\xe5\\x0d\\x24\\x2b\\x8c\\x14\\xe3\\x71\\x42\\xef\\xb2\\\n\\x35\\x11\\xe7\\x40\\x18\\xb9\\x44\\x2a\\x61\\x49\\xea\\x61\\x79\\x88\\xc9\\xd3\\\n\\x4b\\x3e\\x6a\\x85\\x7a\\x27\\x2f\\xd6\\x11\\x7d\\x91\\x5d\\xc2\\x63\\xb6\\xaf\\\n\\x32\\x2d\\xd5\\x07\\xa0\\xf4\\xb7\\xf7\\xa1\\xe4\\xb7\\x77\\xc8\\x9c\\xd4\\xee\\\n\\x88\\x6d\\xa3\\xb4\\x7e\\xe3\\x09\\x79\\x5d\\x01\\x39\\xa3\\xcf\\x03\\x3b\\x99\\\n\\xe0\\x37\\x63\\xe0\\x23\\x2b\\xac\\x87\\x99\\xf4\\xac\\xa4\\xe0\\x9e\\x4c\\x8c\\\n\\x9f\\x7e\\x78\\x71\\x0c\\xd8\\xac\\xe2\\x27\\xdf\\x25\\x11\\xd6\\xaa\\x03\\x1e\\\n\\x78\\xe8\\x7b\\xf3\\x29\\x8b\\x4a\\x01\\x91\\x2f\\x2e\\x92\\xd5\\x4d\\x4b\\x67\\\n\\x33\\xb7\\x5e\\x9e\\x3c\\xcf\\x14\\x7a\\x2f\\xd8\\x9b\\xda\\xf3\\xcd\\x13\\x50\\\n\\xb9\\x69\\x39\\x00\\xe9\\x99\\x44\\x4b\\xc0\\x2f\\x90\\x5d\\x4f\\xb8\\x02\\x7a\\\n\\x4d\\xbd\\x07\\xe2\\xd2\\x72\\x4d\\x53\\xed\\x68\\x23\\x2b\\xb6\\x61\\x1e\\x99\\\n\\x68\\x87\\x31\\x79\\x36\\xf6\\x34\\xe4\\x5e\\xd2\\x00\\xf2\\xe7\\x08\\x50\\x65\\\n\\x08\\x89\\x48\\x40\\x04\\x96\\xac\\x50\\x47\\x8b\\xd5\\xd3\\x62\\x7b\\x5b\\x01\\\n\\x51\\x0d\\x71\\x7a\\x78\\xf7\\x5f\\xb0\\xe6\\x99\\xb3\\x60\\xd5\\xe3\\x27\\x43\\\n\\xe5\\xdf\\xcb\\xa2\\x8a\\xac\\xb0\\x01\\x50\\xd5\\xa2\\x78\\xc5\\x2b\\xf0\\xeb\\\n\\xbd\\xc7\\xc0\\xd6\\xf7\\xef\\x24\\xea\\x17\\x65\\x86\\x68\\x97\\x50\\x42\\xb8\\\n\\x89\\xdd\\x36\\xaf\\xc5\\x7f\\x86\\x26\\x52\\x7b\\x56\\x5c\\x2c\\xa4\\x72\\x8a\\\n\\x68\\xc2\\x72\\x79\\xd0\\xa6\\x8d\\xf9\\x75\\xaf\\xb8\\x60\\x89\\x39\\x46\\xfb\\\n\\x42\\x48\\x54\\x6c\\x30\\x2a\\x69\\xd5\\xee\\x59\\x03\\x6b\\x9f\\x3d\\x1b\\xfe\\\n\\xfa\\xcf\\x49\\x50\\x85\\xbd\\xaa\\x28\\x0f\\x5e\\xf2\\x75\\x6d\\xff\\xf7\\x2f\\\n\\xc1\\x2f\\xf7\\xf4\\x87\\xed\\x1f\\xde\\x07\\xce\\xba\\x72\\x43\\x23\\x52\\x96\\\n\\xd6\\x07\\xfe\\x77\\xe6\\x02\\xa8\\x8f\\x6b\\x53\\xe3\\x88\\x06\\xb2\\xc2\\x06\\\n\\x41\\x4e\\x41\\x6e\\x11\\x1b\\x44\\x0f\\x09\\xa3\\xf9\\xeb\\xa0\\x91\\x97\\xf1\\\n\\x34\\x94\\x6c\\x81\\xed\\x1f\\xff\\x03\\x2a\\x0b\\x97\\x88\\x6d\\xf3\\xa8\\x8c\\\n\\x87\\x4a\\xac\\xdd\\x27\\xce\\x82\\x5e\\x67\\xfd\\x1f\\x51\\x60\\x4d\\x32\\x2c\\\n\\x06\\x9d\\x6b\\x76\\xc1\\x90\\x7d\\x2b\\x60\\xd9\\xf0\\x1b\\x0c\\x2b\\xa3\\xd2\\\n\\x82\\x49\\xf9\\x5a\\x28\\x9a\\xb0\\xd0\\x98\\x3c\\x7a\\xc1\\x88\\xd6\\x60\\x34\\\n\\xd2\\x42\\x4d\\xf2\\x3d\\xdf\\x12\\x07\\x99\\xdf\\xce\\x01\\x1f\\x31\\x05\\x4d\\\n\\x83\\x38\\x04\\xe2\\x32\\xba\\xc3\\xc0\\xab\\x5e\\x84\\xcc\\xc1\\x93\\xc4\\x25\\\n\\xa0\\xb1\\x54\\x47\\xe0\\x92\\x21\\x36\\xb8\\x7a\\x84\\xff\\x70\\x58\\xa8\\x50\\\n\\xd1\\x43\\xc2\\xf5\\xa5\\xd1\\x37\\x1c\\xe4\\x82\\xc6\\xb7\\xf6\\xd0\\x6d\\x8b\\\n\\x81\\x96\\x18\\xed\\xff\\xad\\x71\\x9e\\xea\\xf7\\x7f\\x1d\\x0b\\xbb\\xbf\\x7a\\\n\\x8c\\x92\\x15\\xb7\\x91\\x44\\x1c\\xa3\\x52\\x2c\\x0e\\x9d\\xff\\x5e\\x70\\x3d\\\n\\xb4\\x36\\x54\\x8b\\x48\\x41\\xa3\\xa8\\x8d\\x80\\x14\\x6e\\x11\\x45\\x58\\x8d\\\n\\xad\\x3e\\xe2\\xf9\\x42\\xfc\\x38\\x53\\xed\\x0a\\xea\\x95\\x3f\\x97\\xb4\\x1a\\\n\\x63\\x3b\\xc1\\x0b\\x67\\xcc\\x87\\x92\\x8c\\xfe\\x9a\\x89\\x83\\xeb\\xf5\\x70\\\n\\x22\\xf9\\xaf\\xc7\\x26\\x40\\x63\\xe9\\x56\\xcd\\xca\\x8d\\xc4\\x82\\x4a\\x7f\\\n\\x7b\\x0f\\x7e\\x7b\\x60\\x18\\x94\\xad\\xfe\\x5c\\xd3\\xea\\xa5\\xd7\\x97\\x44\\\n\\xdd\\x87\\x90\\x50\\x00\\x23\\xb7\\x20\\xc7\\x88\\x09\\xa2\\xfa\\x61\\x5b\\x2b\\\n\\x7c\\x8c\\xfb\\x69\\x31\\x19\\x46\\x7a\\x1c\\x24\\x2d\\x97\\x2d\\x16\\x76\\x77\\\n\\x1e\\xa1\\x29\\x59\\xd5\\x6c\\x5f\\x09\\x85\\xf3\\xaf\\x35\\xce\\xb2\\x99\\x08\\\n\\x68\\xe8\\x56\\x32\\x11\\xbf\\xf1\\xa5\\xe9\\x70\\x70\\xe4\\x34\\x18\\x74\\xed\\\n\\xab\\xaa\\x2f\\xfb\\x61\\x55\\x17\\x36\\xf4\\x9c\\x04\\x1f\\x9e\\xf0\\x20\\x90\\\n\\x75\\x29\\x11\\x80\\x62\\xf8\\x55\\x40\\x8f\\xf6\\xc8\\x31\\xa3\\x72\\x43\\xe3\\\n\\x21\\xaa\\x87\\xb5\\xf9\\x50\\x74\\x0f\\x07\\x03\\x9b\\xe4\\x97\\x81\\xd3\\x35\\\n\\x25\\xab\\xe2\\x1f\\x5f\\x83\\xd5\\x4f\\x4f\\xa1\\x64\\x15\\xd8\\x10\\x0a\\x9d\\\n\\x97\\xaf\\xfd\\x0a\\xfe\\x7c\\xe4\\x04\\x68\\x38\\xb8\\x5d\\xa1\\x1c\\x3b\\x66\\\n\\xc3\\x92\\x15\\x2e\\xb7\\x39\\x61\\xdb\\xa7\\x70\\xc9\\x6f\\x8f\\xd2\\x9e\\x16\\\n\\x07\\x26\\xb1\\x1c\\x23\\x8e\\xb0\\xca\\x29\\x61\\x71\\xb0\\xd5\\xec\\xd0\\xeb\\\n\\x76\\xc1\\xe6\\xb7\\x6f\\x86\\x2d\\xef\\xdc\\x4a\\xe6\\xaa\\xa2\\x4f\\x61\\x57\\\n\\x33\\xa0\\x49\\x41\\xb8\\x0a\\xe0\\xcf\\x47\\xc6\\x41\\xc5\\xc6\\xc5\\x8a\\x17\\\n\\xcb\\x25\\x2b\\x36\\x73\\x24\\xad\\x21\\x45\\x2b\\xd8\\xd3\\xa8\\xdf\\x6f\\x16\\\n\\xc9\\x31\\x21\\x09\\x0b\\x97\\xe3\\x6c\\xaf\\x14\\x37\\xbe\\x8c\\x7a\\xd4\\x39\\\n\\x00\\x64\\xd5\\x16\\x71\\xce\\xa4\\x1f\\xa2\\xde\\xd0\\xea\\x39\\x93\\xe1\\xc0\\\n\\x4f\\x0b\\xa4\\x27\\xa6\\x29\\x64\\x21\\x80\\xeb\\x2b\\xd7\\xfd\\xf7\\x3c\\xd8\\\n\\xb3\\xe8\\x69\\x59\\xe9\\xf9\\x12\\xf1\\x91\\x15\\xc6\\x43\\x3d\\xab\\xc2\\xfc\\\n\\x53\\xf9\\x92\\x44\\xe5\\x35\\xe4\\x18\\xe4\\x9a\\x50\\x21\\x24\\x61\\x15\\xd7\\\n\\xfa\\xc0\\x49\\xff\\xdc\\x43\\xe1\\xe8\\x77\\xff\\xfc\\x3f\\x9e\\x84\\xfb\\xbe\\\n\\xb8\\x48\\xb6\\x0b\\x31\\xb4\\x45\\xf5\\xe7\\xbf\\xc7\\xc2\\xe1\\x9d\\xbf\\xfb\\\n\\xe5\\x4b\\x4f\\x34\\x40\\x80\\x2c\\x63\\xda\\xf9\\xe9\\x83\\xb0\\xf1\\xe5\\x2b\\\n\\x00\\xad\\x5a\\x84\\x13\\x82\\x91\\xd5\\xd7\\x63\\x6e\\x0f\\x27\\xeb\\x88\\x4b\\\n\\x8b\\x1c\\x83\\x5c\\x13\\x2a\\x84\\x24\\xac\\x5d\\xf4\\xeb\\x60\\x28\\x0c\\xfd\\\n\\xee\\x23\\x59\\x4d\\xd8\\xbc\\x50\\xf6\\x32\\x9e\\x1a\\x42\\x52\\xab\\x9e\\x9c\\\n\\x08\\xb8\\x68\\x99\\x06\\xfd\\x10\\x28\\x5b\\xf5\\x09\\xa3\\xfe\\x80\\xd6\\x53\\\n\\xe5\\x86\\x93\\xc8\\x73\\xc0\\x9a\\x88\\x61\\xf3\\x88\\x16\\x0d\\x76\\xb6\\xbe\\\n\\x52\\xf6\\x62\\xb8\\x26\\x24\\x61\\x51\\x75\\x06\\xf1\\x90\\x17\\x10\\x3f\\x87\\\n\\x48\\x56\\x6c\\x90\\xba\\x8c\\x07\\xf5\\xab\\x50\\x47\\x08\\xd7\\xc3\\xd1\\xa0\\\n\\x3f\\x02\\x35\\xdb\\x7f\\x65\\x86\\x88\\x72\\x7b\\x5a\\x1f\\x9c\\xf8\\x10\\x6c\\\n\\xec\\x71\\x72\\x7b\\x45\\x28\\x59\\xb5\\x43\\xc1\\x7b\\xa0\\x08\\x61\\xed\\xae\\\n\\xa2\\x13\\xee\\xbc\\xe8\\xf2\\x5c\\x44\\x53\\xb6\\x5f\\x8e\\xb9\\xc3\\xef\\x8e\\\n\\x58\\xd2\\x3a\\xbc\\x67\\x35\\xac\\x99\\x3b\\x95\\xd8\\xa9\\x6a\\xf0\\x4b\\x4f\\\n\\x4f\\xf4\\x45\\xa0\\x7a\\xeb\\x4f\\xb0\\xfe\\x7f\\x17\\x80\\xc7\\xd5\\x22\\x59\\\n\\x10\\x74\\x29\\xf7\\xc6\\xa9\\x73\\x19\\xd2\\xa2\\x64\\x15\\x1a\\xbe\\x5d\\x22\\\n\\xb8\\x26\\xe4\\xd2\\x9c\\x0b\\x16\\x3a\\xa1\\xa1\\x35\\x74\\x61\\x34\\xc6\\x51\\\n\\x04\\xa4\\x2e\\xe3\\xa9\\xdd\\xbb\\x16\\xd6\\x3c\\x7d\\x06\\xb8\\x9b\\x6b\\x8f\\\n\\x66\\x42\\x8f\\x0c\\x85\\x40\\xe6\\xa0\\x49\\x30\\xfc\\xd6\\x4f\\xc0\\xea\\x20\\\n\\x46\\x9c\\x24\\x06\\x8b\\xd7\\x03\\x3e\\xab\\x78\\x13\\x2a\\x12\\xb3\\x8f\\x98\\\n\\xe8\\x49\\x31\\x00\\x9f\\x4e\\x0f\\x8e\\x6f\\xd0\\x21\\x61\\x55\\x93\\x8f\\x92\\\n\\x95\\x8c\\xc7\\x81\\xab\\x11\\xcf\\x26\\xc7\\x9e\\xd6\\x49\\x9b\\x3f\\x60\\x4f\\\n\\xdb\\xf7\\x75\\x45\\x1b\\x48\\xcf\\xea\\x4c\\x4a\\x56\\xed\\x88\\x18\\xf3\\xa0\\\n\\x72\\xd3\\x32\\x58\\xff\\xe2\\xc5\\x8c\\x37\\x20\\xa9\\x12\\x52\\xb2\\x12\\x87\\\n\\x18\\x76\\x8c\\x90\\x73\\x82\\x85\\xa0\\x84\\xb5\\xff\\x70\\xf0\\xc4\\xc1\\x32\\\n\\x8e\\xf6\\x7b\\x81\\xa4\\xb5\\x39\\x6f\\x1c\\xbc\\x73\\xf2\\x13\\x7e\\xb0\\xb4\\\n\\xd4\\x94\\x30\\x73\\x56\\xee\\xa6\\xc3\\x7e\\xd7\\xe9\\x89\\x31\\x11\\x40\\x8b\\\n\\x18\\x5b\\x88\\x5e\\x1c\\x0d\\xea\\x21\\x10\\x8a\\x73\\x82\\x12\\x56\\xd1\\x61\\\n\\x3a\\x7f\\x15\\x4e\\xd3\\xb0\\xa4\\x85\\x64\\xb5\\xe0\\xb4\\xe7\\x01\\x17\\x4b\\\n\\xb3\\xc1\\xeb\\x72\\xc2\\x86\\x17\\x2e\\x26\\xae\\xb3\\x8c\\x6d\\xa7\\x89\\x95\\\n\\x97\\xee\\xdb\\x10\\x40\\x9b\\xf8\\xfb\\x7f\\x78\\xa5\\x1d\\x0e\\x54\\x5d\\xb8\\\n\\xfb\\xcb\\x4b\\x21\\xb5\\xc1\\x1c\\x86\\x02\\xdb\\x05\\x37\\xe8\\x41\\x28\\xc2\\\n\\x0a\\x3a\\x87\\x35\\xef\\x4f\\x17\\xf1\\xd2\\x4a\\x49\\x2b\\xdc\\xb6\\xb5\\xf8\\\n\\xbc\\xe0\\x23\\xbe\\xf7\\xb8\\x61\\xd3\\x1b\\x37\\x42\\xc9\\xaf\\x6f\\x71\\x2f\\\n\\xd1\\x63\\x93\\x20\\x60\\xb1\\xd9\\x61\\xf4\\xbd\\x4b\\x61\\x70\\x7a\\x3a\\xdc\\\n\\xbc\\x78\\x06\\xa3\\xba\\x50\\x99\\x9c\\x07\\xff\\x3d\\xf3\\x0d\\x38\\x9c\\xd4\\\n\\xd9\\x24\\xb5\\x30\\xa6\\x98\\x67\\x0f\\xb0\\xc2\\xac\\x63\\x85\\x9d\\xea\\xfa\\\n\\xbf\\x45\\x01\\x75\\x38\\x68\\x42\\xc7\\x2a\\x01\\x55\\x30\\xc4\\x69\\x20\\x59\\\n\\xe1\\xda\\x40\\x4a\\x56\\x86\\x68\\x1a\\x59\\x42\\xe0\\x32\\xa9\\x96\\xd7\\x2f\\\n\\x87\\x9b\\x17\\x5d\\xd7\\xae\\x67\\x95\\x59\\x7f\\x00\\x6e\\x5b\\x74\\x2d\\xc4\\\n\\x93\\xb5\\x82\\x34\\xc8\\x47\\xa0\\x34\\x04\\x7c\\x41\\xad\\x35\\x1c\\xac\\xa7\\\n\\x73\\x58\\xf2\\xa1\\xe7\\x4f\\x89\\xce\\x21\\xd0\\x44\\x4c\\x24\\x06\\x74\\x00\\\n\\x61\\x8b\\x4b\\x66\\x2c\\x7a\\xe2\\xd7\\x34\\x4f\\x4b\\x23\\xb8\\xc9\\x72\\x17\\\n\\xdc\\x7c\\xc4\\xe0\\x60\\xa4\\x84\\x01\\x89\\xb1\\xb0\\x20\\x3f\\x01\\x12\\x5d\\\n\\xfe\\x2a\\x28\\xeb\\x89\\x15\\x86\\xe6\\xd8\\x94\\x48\\xa9\\xa6\\x2e\\xf5\\x08\\\n\\xc5\\x39\\x82\\x84\\x85\\xeb\\x7a\\xca\\x28\\x61\\x29\\xda\\x68\\xad\\x75\\x15\\\n\\xb0\\x61\\xde\\xa5\\x7e\\x0b\\x99\\xb3\\x1c\\x36\\x78\\xf5\\x98\\x5c\\x78\\x62\\\n\\x6f\\x05\\xac\\xae\\x0b\\x6f\\x29\\x88\\xa2\\xc2\\xf2\\x64\\x66\\x21\\x9f\\xe6\\\n\\x93\\xf2\\x06\\x41\\x52\\xd7\\xfe\\x90\\xd8\\x75\\x00\\xd9\\xb7\\x6d\\xb1\\x69\\\n\\x5d\\x01\\xc9\\x2a\\x98\\x53\\x53\\x5c\\xc8\\xed\\x6e\\xa9\\x23\\x8b\\x8c\\x77\\\n\\x41\\x43\\xe9\\x36\\xc6\\x9e\\x57\\x03\\xb1\\xe9\\x55\\x5f\\xbc\\x09\\x9c\\xe4\\\n\\xe3\\x83\\x59\\x02\\x92\\xd5\\xdb\\x03\\xf3\\x20\\x95\\xb4\\x1b\\x37\\x50\\x3d\\\n\\x2b\\x2e\\x1a\\xf2\\x8f\\x0f\\x35\\xb4\\xad\\x29\\x14\\x72\\xfd\\x25\\x48\\x58\\\n\\xd5\\xe4\\xdd\\x91\\x60\\x1b\\x5e\\xbe\\x84\\x51\\x94\\x12\\x7b\\x56\\xad\\x1c\\\n\\x2f\\x2e\\x48\\x56\\xef\\x0e\\xea\\x06\\xbd\\x12\\x62\\x60\\x3e\\x21\\xad\\x19\\\n\\x5b\\x4a\\x0c\\x47\\x5a\\x8e\\xc4\\x34\\x62\\x4e\\x78\\x32\\x64\\x0d\\x3b\\x83\\\n\\x31\\x2b\\x2c\\xd7\\x55\\xbc\\xd5\\xee\\x80\\x98\\xa4\\x0c\\x66\\x4b\\xed\\x7d\\\n\\xac\\x5f\\xab\\x37\\x94\\x6c\\x25\\x56\\x12\\xbe\\x83\\x72\\xb2\\x1d\\x26\\x3d\\\n\\x50\\x20\\x73\\x7e\\x46\\x0c\\x89\\x36\\x0b\\xbc\\x39\\x30\\xb7\\x03\\x59\\x7d\\\n\\x9d\\x7b\\x2a\\x2c\\xa7\\x6b\\x03\\x15\\x69\\x32\\x37\\x69\\x7a\\xe4\\x9e\\x2c\\\n\\x01\\xd7\\x92\\x82\\x93\\xee\\x5b\\x88\\xb9\\x87\\x3b\\xbf\\xa3\\xb6\\xc2\\x15\\\n\\x69\\x05\\x92\\x49\\xf9\\xfa\\x45\\x44\\x63\\xfa\\xfc\\xf6\\xec\\xe2\\x88\\xf3\\\n\\xc8\\x2f\\x87\\xf6\\x60\\xc8\\x8a\\xbd\\xd8\\xe4\\xf1\\x1a\\x86\\xb4\\x32\\x87\\\n\\x4c\\x86\\xfc\\xc9\\xb7\\xb5\\xb9\\x83\\xd7\\x50\\xe9\\x11\\xcd\\x16\\x1f\\xfc\\\n\\xe3\\x03\\x40\\xcf\\xce\\x68\\xce\\xd8\\x68\\x61\\x6a\\x66\\x32\\x3c\\x5d\\xd0\\\n\\x19\\x6c\\x47\\x8c\\xef\\xbd\\x76\\xa0\\x1a\\xe6\\x35\\xa5\\xc0\\x09\\x8f\\xae\\\n\\x21\\xbd\\xcc\\x04\\xa3\\x89\\x6b\\x4a\\x79\\x9e\\x3d\\xc3\\x01\\xc7\\x64\\xf3\\\n\\x4f\\xaf\\xf3\\x5f\\x25\\xd5\\xac\\x68\\xa4\\xf3\\x57\\x4a\\xb5\\xb6\\xbb\\xb9\\\n\\x0e\\xb6\\xbc\\x7b\\xab\\x5f\\x76\\x2d\\x64\\xc8\\xfd\\x69\\xb9\\xbf\\x66\\x7b\\\n\\x82\\xcd\\xca\\xf4\\xb4\\x46\\xa7\\xc4\\xfb\\xc5\\xd5\\xea\\x04\\xbf\\x7e\\x75\\\n\\x1d\\x7b\\x19\\x8c\\x7d\\x74\\x2d\\x8c\\xbc\\xe3\\x2b\\xc8\\x38\\xe6\\x14\\xc0\\\n\\x61\\xa0\\x96\\x21\\x26\\x29\\x1d\\x7a\\x9c\\x36\\x1b\\x4e\\x7c\\x6a\\x0b\\x0c\\\n\\xbe\\xe1\\x2d\\x48\\xee\\x36\\x44\\xcb\\xe2\\x43\\x96\\xf5\\x6d\\x65\\x3d\\xdc\\\n\\xb3\\xa3\\x8c\\x8c\\x3e\\x7c\\x80\\x64\\x35\\xb7\\xa8\\x12\\x9a\\x2b\\xf6\\xc0\\\n\\xae\\x2f\\xfe\\x1d\\x32\\x2d\\x8d\\x20\\x0e\\x81\\x60\\xdc\\x23\\xd8\\xc3\\xfa\\\n\\x6c\\xb3\\x1b\\xe6\\xaf\\x8e\\x5e\\x2f\\x39\\xe2\\xa0\\x15\\x17\\x6b\\xf3\\xdb\\\n\\xb7\\x10\\xbb\\x56\\xf3\\x79\\x23\\x5f\\x9f\\x9b\\x06\\xf7\\xe6\\x67\\xf9\\xdd\\\n\\xd3\\xa3\\xa7\\xd5\\xa9\\xd7\\x68\\x42\\x10\\x6f\\x42\\x62\\x4e\\x1f\\x3f\\x59\\\n\\x8c\\x70\\x52\\xb2\\xf2\\x5d\\xd8\\xfa\\xde\\xed\\x86\\x5a\\x14\\x8e\\x73\\x59\\\n\\x5b\\x1b\\x9d\\x47\\xe1\\x21\\x6a\\x2b\\xc7\\x3d\\xf8\\x2b\\x74\\xea\\x39\\xf2\\\n\\xe8\\x35\\x7a\\x24\\x0b\\x81\\x19\\xa3\\x6d\\x70\\xfe\\x40\\xfe\\xd9\\x2a\\xc1\\\n\\x1e\\x56\\x25\\x35\\x18\\x20\\x0b\\xec\\xc0\\x44\\x68\\x8b\\x5d\\x88\\xac\\x30\\\n\\xee\\x82\\x92\\x1a\\x98\\xb3\\xaf\\xc2\\x2f\\x19\\xf6\\xb4\\x5e\\x1d\\x90\\x0b\\\n\\x69\\x76\\xc1\\xe6\\xf1\\x8b\\x1f\\xd6\\x09\\x19\\xda\\xf4\\x9c\\x7a\\x2f\\x8c\\\n\\xf9\\xc7\\x8f\\x86\\x24\\x2b\\xac\\x5b\\xee\\xb8\\x2b\\x60\\xec\\x23\\xab\\x08\\\n\\x19\\x8c\\x0a\\xab\\xaa\\x4a\\x26\\xf6\\x23\\x2b\\xcc\\x98\\xcc\\xbb\\x6d\\x7a\\\n\\x63\\x26\\x59\\xba\\x43\\xa7\\x51\\xc2\\xc5\\x39\\x18\\xf7\\x08\\xbe\\x11\\x35\\\n\\xcd\\x74\\x48\\x18\\x2e\\xf0\\xf8\\xf0\\x6e\\x7a\\xeb\\xa6\\x90\\xd9\\x04\\x92\\\n\\x96\\x97\\x0c\\x37\\xfe\\xb3\\xb7\\x1c\\x6a\\x70\\x06\\x52\\xc5\\x10\\x97\\x9e\\\n\\xc7\\x28\\x40\\x16\\x9c\\xff\\x08\\x58\\xc9\\x70\\xd0\\xc8\\x21\\x21\\xbb\\x37\\\n\\x8c\\x79\\xe0\\x27\\x86\\x5c\\x8d\\xea\\xbc\\xa1\\xe1\\xc0\\x26\\x32\\xf7\\xf6\\\n\\xbc\\x91\\x61\\x34\\x85\\x6c\\xc1\\xb8\\x47\\x90\\xb0\\x0e\\xb7\\x50\\xc2\\x0a\\\n\\xb7\\x75\\x51\\x39\\xb4\\xa9\\x6c\\xa7\\xa8\\x6c\\x58\\xd2\\x42\\xb2\\xfa\\xc7\\\n\\xae\\x43\\xf0\\x79\\x79\\x08\\x0d\\x3a\\x51\\xb9\\x0a\\x47\\xca\\x19\\x75\\x2e\\\n\\xe9\\xb5\\xac\\x26\\x93\\xea\\xe3\\x85\\x23\\x19\\xec\\x0e\\x92\\x2a\\x92\\x2b\\\n\\x6a\\x99\\x23\\xd9\\xaa\\x15\\x70\\xb8\\x87\\x93\\xeb\\x72\\xc2\\x5e\\x62\\x5e\\\n\\xd9\\xd5\\x58\\x23\\x27\\x29\\x4d\\x73\\x04\\x81\\x60\\xdc\\x23\\x48\\x58\\x35\\\n\\xc6\\x56\\x09\\x32\\x7c\\xe3\\xe2\\x5a\\xc1\\xdd\\xdf\\x3c\\x29\\x49\\x4e\\x24\\\n\\xad\\xa9\\xeb\\x8b\\x54\\x25\\x2b\\x74\\xd9\\x3e\\xf0\\x9a\\x57\\x60\\xd8\\xec\\\n\\x0f\\x00\\x55\\x16\\xcc\\x18\\x90\\x64\\x91\\x6c\\x91\\x74\\x95\\x0e\\xac\\x9e\\\n\\xd5\\x5c\\xf2\\x25\\xf0\\xec\\x2c\\xe9\\xa4\\x85\\x1f\\x58\\xf6\\x2e\\x79\\x4e\\\n\\x69\\xb1\\xa2\\x2a\\xbf\\x60\\xdc\\x23\\x48\\x58\\xc1\\x58\\x2e\\xaa\\xd0\\x93\\\n\\x59\\xd9\\xe2\\x1f\\xe7\\xcb\\x52\\x88\\xdc\\xd5\\xac\\x9e\\x46\\x38\\x92\\xd5\\\n\\xe8\\xfb\\xbf\\x87\\xbc\\xf1\\x57\\xcb\\xac\\x95\\x71\\x92\\x21\\xd9\\x22\\xe9\\\n\\xf6\\x98\\x74\\x8b\\x62\\x42\\xb1\\x64\\x85\\x4a\\xa1\\x56\\x32\\xb7\\x37\\xa7\\\n\\xaf\\x3c\\xd2\\xda\\xbf\\x7c\\x1e\\x59\\xd4\\xee\\x3f\\x2f\\xa9\\x98\\x90\\x51\\\n\\x90\\x51\\x30\\xee\\x11\\x24\\xac\\x7a\\xce\\x07\\x90\\x28\\xc0\\x48\\xd1\\x2a\\\n\\xa2\\x1d\\xf0\\x3d\\x8b\\xe6\\x28\\x9a\\x67\\xd8\\x99\\x91\\x17\\x70\\xc8\\xcc\\\n\\xb7\\xa1\\x53\\xfe\\x88\\xb0\\xb3\\x32\\x52\\x06\\xfd\\x2e\\x7e\\x0a\\xb2\\x86\\\n\\x4f\\x0d\\x5b\\x24\\x2e\\x59\\xb1\\x99\\x21\\x69\\xf5\\x21\\x4a\\xbd\\x52\\x03\\\n\\x9a\\xb8\\xde\\xfb\\xdd\\x5c\\xa9\\xc9\\x68\\xfc\\x23\\x08\\x04\\xe3\\x1e\\x5e\\\n\\xc2\\x42\\xb7\\xd1\\x22\\x3c\\xee\\x50\\x80\\x05\\x10\\xd8\\xff\\xc3\\xcb\\xaa\\\n\\x99\\x8d\\x99\\x9c\\x91\\x04\\x72\\xf4\\xb4\\xfa\\x5d\\xf4\\x24\\x64\\x8f\\x38\\\n\\x4b\\x40\\x62\\xf3\\x5e\\xb6\\x58\\xad\\x0c\\x11\\x27\\xf7\\x18\\x26\\xbb\\x12\\\n\\x7c\\x64\\x85\\x99\\xa1\\x9e\\xd5\\xb3\\x45\\x55\\xb2\\xf2\\xdd\\xbf\\xe2\\x55\\\n\\x70\\x1e\\x3e\\x28\\x2b\\x6d\\xb4\\x27\\x42\\xee\\x11\\x72\\x5d\\xcf\\x4b\\x58\\\n\\xc1\\x18\\x2e\\xda\\xc1\\x0c\\x55\\x7f\\x77\\x73\\x3d\\xf9\\x77\\x7d\\x26\\x54\\\n\\x34\\x59\\xf7\\xa7\\x10\\xb2\\x7a\\xae\\x5f\\x17\\xc9\\xca\\xa5\\x79\\x13\\x66\\\n\\x40\\xfe\\x94\\xdb\\x64\\x95\\x69\\x86\\x44\\x76\\xb2\\x8e\\x71\\xc4\\x6d\\x9f\\\n\\x43\\x6c\\x5a\\xae\\x64\\x71\\xfb\\x27\\xf0\\xaf\\x0d\\x64\\x95\\x42\\x25\\x67\\\n\\x78\\x24\\x81\\x97\\xd8\\x80\\xdf\\xfd\\xcd\\x53\\x72\\x93\\x47\\x7d\\x3a\\x21\\\n\\x0e\\xe2\\x27\\x2c\\xd2\\xc3\\xa2\\x41\\x1e\\x02\\x07\\x7e\\x79\\x93\\x7c\\x25\\\n\\xaa\\x96\\x97\\x38\\x48\\x2a\\x24\\xab\\x67\\x09\\x59\\xd9\\xc9\\x30\\x45\\x8a\\\n\\x46\\x7c\\xc6\\xa0\\xd3\\x60\\xc0\\xe5\\x91\\x3f\\x09\\x1c\\x47\\x16\\x60\\x8f\\\n\\xb8\\xfd\\x0b\\x66\\x11\\x76\\x10\\x18\\x3b\\xdc\\xaa\\x71\\x7b\\xa0\\x96\\x6c\\\n\\xdc\\x10\\x2e\\x59\\xb1\\x79\\x1d\\xf8\\xe5\\x0d\\x68\\x6d\\x90\\xd7\\x43\\x63\\\n\\xf3\\x88\\xd6\\x7d\\xbd\\x00\\x07\\xf1\\x12\\x56\\x03\\x9d\\xbf\\x92\\xfd\\x9c\\\n\\xa8\\xe5\\xa9\\x39\\x37\\xd6\\xc1\\x90\\x15\\x2b\\x98\\x18\\xd2\\x4a\\xca\\x3d\\\n\\x06\\x86\\xcd\\x7a\\xdf\\xf0\\x3a\\x56\\x6c\\x9d\\xc2\\xdd\\xa7\\x74\\x1f\\x02\\\n\\x43\\x6f\\x7a\\x1f\\xc8\\x7a\\x22\\xd1\\x59\\x1d\\x6a\\x75\\xc3\\xe5\\x9b\\x0e\\\n\\x40\\xd1\\x91\\x8f\\x1d\\x4a\\x91\\x15\\x0a\\x80\\x26\\x75\\x4a\\x7f\\x23\\xf2\\\n\\xd0\\x20\\x19\\x81\\x46\\x81\\x6f\\x4f\\xbc\\x2d\\xdb\\xec\\xa2\\x3d\\x2c\\xc9\\\n\\x08\\x93\\x04\\xd5\\xc4\\x8f\\x5d\\x63\\xd9\\x0e\\x39\\x49\\x43\\xa6\\x79\\xbd\\\n\\x94\\x5f\\x23\\x1e\\xad\\x3c\\xf0\\xcd\\x69\\xd9\\x13\\x52\\x61\\xc4\\x1d\\x5f\\\n\\x82\\x3d\\x3e\\xba\\xec\\x33\\x65\\x0d\\x9d\\x02\\x05\\x17\\x3d\\x1e\\x12\\x4f\\\n\\x6e\\x04\\x96\\xb4\\x9e\\x22\\x26\\x7e\\x70\\x6d\\xa0\\x92\\x41\\xad\\x3f\\x30\\\n\\x25\\x65\\x34\\x62\\x5e\\x4d\\x52\\x7a\\x58\\x4d\\x74\\x75\\x81\\xac\\x36\\x54\\\n\\xfb\\xe1\\x64\\x95\\x4b\\xb9\\xc2\\xb1\\x3d\\xad\\x11\\xc9\\x71\\xdc\\xcb\\xd0\\\n\\x8b\\x2c\\xb7\\x89\\xcf\\xe8\\xee\\x77\\x2d\\x5a\\x4e\\xf2\\x89\\xaa\\x43\\x62\\\n\\xe7\\x02\\x49\\xd5\\x45\\xd2\\xc2\\x3f\\x05\\xa5\\x03\\xfe\\x81\\x55\\x6f\\xfb\\\n\\x45\\xe9\\x6c\\x23\\x3e\\x3f\\x21\\x0e\\xe2\\xed\\x61\\x09\\x45\\x8e\\x78\\x94\\\n\\xc2\\xa8\\x20\\xce\\x55\\x94\\xad\\xf9\\x22\\x8c\\x1c\\xc4\\x25\\xe5\\x23\\xad\\\n\\x6a\\x97\\x07\\xca\\xc8\\x0b\\xc7\\x06\\xd4\\x02\\xef\\x3e\\x71\\x16\\x7b\\x1a\\\n\\x75\\x7b\\xb4\\x30\\xd1\\xf7\\x82\\x47\\x0d\\x53\\xef\\xe2\\x9f\\x16\\x18\\x46\\\n\\x16\\xb3\\x08\\x22\\xc4\\x41\\x02\\x84\\x45\\x87\\x84\\x52\\x1b\\xb6\\x74\\xe5\\\n\\x7b\\x9a\\x99\\x01\\xe6\\x92\\xd6\\x81\\x16\\x17\\x99\\x83\\x29\\x86\\x52\\xe7\\\n\\x51\\xc2\\xea\\x7d\\xce\\x83\\x60\\x73\\xf8\\xf7\\xb8\\xa4\\xd6\\xc7\\xec\\xf1\\\n\\x73\\x46\\x4e\\x83\\x4e\\xbd\\xc6\\xb4\\x57\\xa3\\x67\\xbc\\x03\\x1c\\x96\\xf6\\\n\\x53\\x4d\\x0f\\x0e\\xad\\xfd\\x12\\x5a\\xeb\\x95\\x1d\\x6a\\x6a\\x5a\\x01\\x1d\\\n\\x0a\\x6b\\x12\\x98\\x96\\xe2\\x25\\xac\\x96\\xa3\\xcf\\xbe\\x0e\\xa2\\x9a\\xb3\\\n\\xc8\\xe2\\x9f\\xb5\\xfd\\x17\\x45\\xd2\\x7a\\x88\\xac\\x39\\x0c\\x24\\x2b\\x34\\\n\\x5d\\x9c\\x7b\\xc2\\xe5\\xe6\\x04\\x51\\x61\\xa9\\xfb\\x1d\\x99\\xcb\\x42\\x3d\\\n\\xab\\x8f\\x06\\x77\\x87\\x17\\xfa\\x77\\xd5\\x85\\xb4\\x70\\xf2\\xbd\\xe4\\xb7\\\n\\xf7\\x14\\xae\\x5d\\x64\\x67\\x27\\xc4\\x41\\xbc\\x84\\xc5\\xf9\\xb3\\x8e\\x6c\\\n\\x54\\x14\\xaa\\x5d\\xed\\xbe\\x75\\xa2\\x17\\x39\\x2b\\x54\\x24\\x93\\xcd\\x87\\\n\\x87\\x6a\\xfd\\x7a\\x56\\x78\\xb1\\xe0\\x82\\xff\\x68\\x6e\\x74\\x4f\\xc9\\x3a\\\n\\x29\\x99\\x57\\x5a\\xbf\\x71\\x30\\x76\\xf8\\x29\\xed\\x36\\xd8\\x4f\\x49\\x4f\\\n\\xd2\\x8d\\xb4\\x0e\\xfe\\xf9\\xa1\\x92\\x55\\x8b\\xf8\\xbc\\x84\\x38\\x48\\x80\\\n\\xb0\\xe8\\x90\\x50\\xca\\x13\\x51\\xb1\\xe1\\x3b\\x29\\xd1\\x55\\x8b\\x9b\\xda\\\n\\x77\\x2c\\x64\\x0f\\x3f\\x53\\xb5\\xfc\\xcd\\x96\\x31\\x3a\\x39\\x7d\\xb1\\x53\\\n\\x8d\\x9f\\x0d\\x76\\x24\\xad\\x33\\x33\\xb5\\xff\\x72\\x5a\\x5f\\xb4\\x01\\xd0\\\n\\xd3\\x37\\x0d\\xe2\\x10\\x70\\xba\\xf9\\x39\\x88\\x9f\\xb0\\xfc\\xf5\\xe8\\xc4\\\n\\x95\\x10\\xc5\\xb1\\x2a\\x36\\x2c\\x32\\x44\\xed\\x0b\\x2e\\x7c\\xcc\\x4f\\x0e\\\n\\xab\\xd7\\x0d\\x5d\\xaa\\xd5\\x51\\xb3\\xf0\\x2b\\xc8\\x80\\x27\\x48\\x56\\xe8\\\n\\xe4\\x34\\xc9\\xe5\\x6f\\x89\\x12\\xf5\\xac\\xbe\\xac\\x50\\xd7\\x74\\x8f\\x10\\\n\\x1c\\x15\\x1b\\x17\\x0b\\xdd\\xa2\\xd7\\x03\\x10\\x70\\x0a\\x70\\x10\\x3f\\x61\\\n\\xd1\\x39\\xac\\x00\\xf8\\x84\\x4f\\x5b\\x6a\\x4a\\xa1\\xae\\x68\\xbd\\x70\\x04\\\n\\x8d\\xee\\xa4\\x0f\\x98\\x00\\x69\\x7d\\x8f\\x6f\\x2f\\x0d\\xc9\\xea\\xea\\x15\\\n\\xf7\\xc1\\x5d\\x5f\\x5f\\x01\\xbd\\x0f\\xae\\x69\\xbf\\x1e\\x0d\\x07\\x2c\\x59\\\n\\x25\\x06\\x38\\x35\\x55\\x52\\x29\\x54\\x0e\\x8e\\x46\\xf9\\x63\\x93\\x23\\xbb\\\n\\xd6\\x69\\x24\\x0d\\x09\\x5b\\x05\\xd8\\x4d\\x6b\\xa1\\xcd\\x50\\x1e\\xba\\xa7\\\n\\x32\\x42\\xe8\\x3c\\xe6\\x82\\x76\\x31\\x58\\xb2\\x1a\\xbe\\x6f\\x39\\xc4\\xba\\\n\\x9b\\xe1\\xa6\\xa5\\xb3\\xa3\\x8a\\xb4\\x46\\xec\\x59\\xd2\\xee\\x91\\x99\\x05\\\n\\xe5\\xad\\x3a\\x87\\xe2\\x4a\\xa1\\x6c\\xde\\x62\\xf7\\x55\\x5b\\x7e\\x04\\x4f\\\n\\x2b\\x35\\x34\\x27\\x06\\x2f\\x21\\x0e\\xe2\\xed\\x61\\xb9\\xa8\\x43\\x42\\x31\\\n\\x98\\x32\\x71\\x0c\\xf1\\xaf\\x49\\x96\\xa2\\x64\\x8f\\x38\\xbb\\x5d\\xe6\\x81\\\n\\xc5\\xbf\\x00\\x92\\x15\\x1b\\xa2\\x8d\\xb4\\xbe\\x1e\\x7d\\x3b\\xfc\\x3a\\xe0\\\n\\x22\\xb6\\xfa\\x80\\x4e\\x4e\\x3f\\x29\\xb8\\xb8\\xfd\\x5c\\xaf\\x03\\x5c\\x10\\\n\\x5d\\xb5\\x79\\x85\\x5e\\xc5\\x9b\\xaa\\x5c\\x21\\x0e\\xe2\\x27\\x2c\\x75\\x4d\\\n\\x89\\x9b\\x0a\\xb8\\x60\\xc2\\xe2\\xbf\\x25\\xfe\\x6b\\xea\\x1d\\xd2\\x0a\\xc6\\\n\\x41\\x6c\\x4a\\x76\\xbb\\x18\\x7f\\xf7\\x38\\x05\\xbe\\x1c\\x73\\x47\\xfb\\x39\\\n\\x1e\\x44\\x15\\x69\\x91\\x05\\xe2\\x1f\\x8f\\x7d\\x80\\x21\\x2d\\xd6\\x23\\x73\\\n\\xce\\xa8\\xf3\\xfc\\xf0\\xd0\\xeb\\xc4\\x10\\x7f\\x70\\x7a\\x55\\x5e\\x42\\xb9\\\n\\x2e\\x01\\x0e\\xe2\\x27\\x2c\\x3a\\x24\\x14\\x05\\x6d\\xcd\\x8e\\x95\\x80\\xff\\\n\\x9a\\x7a\\x87\\xce\\xa3\\x3b\\x9a\\x0a\\xfe\\x61\\xc8\\x35\\x94\\xb4\\x4e\\xf8\\\n\\x27\\x7c\\x7d\\xc4\\x23\\x73\\x62\\xe7\\x3e\\x90\\x94\\x37\\x48\\xef\\xa6\\x82\\\n\\xca\\xcd\\xdf\\xeb\\x2e\\x83\\x19\\x04\\x20\\x8b\\x37\\x78\\x03\\x2f\\x61\\xa9\\\n\\xec\\xac\\x85\\x57\\x10\\x33\\x5e\\xac\\xdd\\x63\\x8c\\xc9\\xec\\x9c\\x91\\xe7\\\n\\xf0\\xc2\\x27\\x44\\x5a\\x23\\xf6\\x2c\\xe3\\x8d\\x1f\\xe9\\x17\\x3b\\x8f\\xd6\\\n\\xbf\\x97\\x85\\xde\\xac\\x9d\\x75\\xe5\\x91\\x0e\\x75\\xd8\\xf5\\x13\\xe2\\x20\\\n\\x4a\\x58\\x61\\x40\\x5b\\xbb\\x57\\x7f\\xc2\\x4a\\xed\\x73\\x3c\\xc4\\xa6\\x76\\\n\\x11\\xac\\x45\\x20\\x69\\xfd\\x51\\x70\\x0e\\x7c\\x32\\xf6\\x7e\\xc1\\xf8\\x66\\\n\\xba\\x61\\xf1\\x0a\\xfc\\x0d\\x0b\\x54\\x22\\x67\\x64\\xc7\\x9e\\xa8\\x40\\x54\\\n\\x55\\x2f\\xd7\\xed\\x5d\\xab\\x6a\\xfe\\x91\\x90\\xb9\\x24\\xc2\\xf2\\x08\\x8c\\\n\\x1f\\x23\\x01\\x08\\x25\\xeb\\x50\\x6b\\x80\\x07\\x2f\\x47\\x44\\xaf\\x81\\x25\\\n\\x2d\\x24\\xab\\x85\\x27\\x12\\x97\\xea\\x64\\x8e\\xc7\\xec\\x01\\x55\\x17\\x1e\\\n\\xf8\\xec\\x5c\\x49\\x7a\\x66\\x49\\xb9\\x03\\x20\\xb1\\x4b\\x3f\\xdd\\xab\\x6e\\\n\\x84\\x3f\\x3a\\xdd\\x41\\x08\\x21\\x80\\x10\\x07\\xf1\\xf6\\xb0\\x3c\\xc4\\x37\\\n\\x1e\\x0d\\xc1\\x11\\x40\\xfd\\xab\\xd6\\xda\\xb2\\xe0\\x91\\x34\\xb8\\x2b\\x34\\\n\\x1c\\x0c\\x2c\\x1a\\x49\\x6b\\xe1\\xf8\\x47\\x22\\x86\\xac\\x50\\x29\\x34\\xa7\\\n\\x76\\x1f\\xdc\\xba\\xe8\\x7a\\x49\\xa4\\x65\\x84\\xc9\\x77\\x23\\xfc\\xd1\\x05\\\n\\x3e\\x1f\\x46\\x3b\\x17\\xe2\\x20\\x5e\\xc2\\x12\\xea\\x8e\\x19\\xad\\x52\\x7a\\\n\\xca\\x63\\x84\\x6e\\x7d\\x7c\\x56\\x2f\\x62\\xf3\\xaa\\x9b\\x9e\\x30\\x68\\x5e\\\n\\x76\\xa0\\x52\\x68\\x92\\xf3\\x30\\x43\\x5a\\x29\\x4d\\xe2\\xdc\\x6a\\x19\\xc1\\\n\\x71\\xac\\x11\\x9e\\x1d\\xcd\\x1b\\x4e\\x62\\x81\\x42\\x1c\\xc4\\x4b\\x58\\x42\\\n\\xdd\\x31\\x89\\x65\\x46\\x74\\x74\\x23\\x74\\xeb\\x93\\xf3\\x06\\x2a\\x8a\\x31\\\n\\x2a\\x9c\\x1a\\x39\\x04\\x92\\x15\\x2b\\xeb\\x1f\\xfd\\xce\\x83\\xba\\x84\\x2c\\\n\\xf6\\x34\\xe8\\x3e\\xd9\\x00\\x5f\\x0a\\x5b\\xeb\\x2b\\xa0\\x99\\x4c\\xbe\\xd3\\\n\\x20\\x8c\\x80\\x10\\x07\\xf1\\x13\\x16\\x1d\\x11\\x0a\\x23\\x79\\xe4\\x0e\\x5a\\\n\\x68\\xd0\\x3b\\x28\\xf9\\x99\\x3e\\xe7\\xf0\\x5e\\xf8\\xe7\\xa7\\xd3\\x0c\\xab\\\n\\x11\\x2f\\x44\\x56\\xac\\x9e\\x95\\xd8\\xb6\\x88\\x49\\xc9\\x82\\x18\\x8e\\xce\\\n\\x9a\\xd8\\x74\\x4a\\xc7\\xab\\xdb\\xab\\xff\\xf3\\xa3\\x74\\x9d\\x94\\xcc\\x4f\\\n\\x48\\x77\\x9d\\x97\\xb0\\xe8\\x14\\x56\\x68\\xe8\\x1b\\x0f\\x6e\\x0f\\x1d\\x49\\\n\\xe5\\x18\\xc9\\xdd\\x94\\xd1\\x2b\\x42\\xb2\\xba\\x75\\xd1\\xb5\\x90\\x55\\x57\\\n\\x6c\\xc8\\x65\\x3c\\x76\\x4f\\x2b\\xdc\\xb0\\xec\\xd6\\x0e\\xcb\\x6d\\xa4\\x92\\\n\\x15\\xdb\\x1c\\x4a\\x12\\x3d\\x9b\\xa7\\xd4\\xbd\\x11\\x9e\\x1f\\xa9\\x32\\x6b\\\n\\x19\\x5f\\x88\\x83\\x78\\x09\\x8b\\x3a\\x51\\x0d\\xde\\x34\\x3e\\xf2\\x39\\xdd\\\n\\x69\\x00\\x53\\x21\\x4a\\xbc\\x78\\xf1\\x64\\x81\\x30\\x92\\x55\\x4a\\x73\\x9b\\\n\\x3b\\x2a\\x23\\x6a\\xc4\\xbb\\x6d\\x31\\xf0\\xee\\x84\\xc7\\xa0\\xd5\\x76\\xd4\\\n\\x8a\\xaa\\x5c\\xb2\\xc2\\x96\\x55\\x7a\\x28\\x1d\\xfc\\x69\\xe1\\xbf\\xdb\\x5c\\\n\\x5d\\xcc\\x7f\\x83\\x5e\\x65\\x10\\x10\\xe2\\x20\\x4a\\x58\\x32\\x1e\\x10\\xfc\\\n\\x42\\x88\\xa4\\xa5\\x67\\xb0\\xda\\x63\\x21\\x31\\xa7\\x4f\\xd8\\x22\\x34\\xc7\\\n\\xa6\\xc0\\x8a\\xc1\\x57\\xfa\\xe5\\x63\\x44\\xd2\\xda\\xd9\\x75\\x0c\\xbc\\x32\\\n\\xf9\\x45\\x86\\xb4\\xc2\\x21\\x2b\\xac\\xa8\\x12\\x44\\xef\\x07\\x98\\x8c\\x93\\\n\\x96\\xca\\xfd\\x32\\x52\\x45\\x4f\\x12\\x4a\\x58\\x0a\\xb6\\x75\\x8b\\x01\\xfe\\\n\\x1d\\x13\\xbb\\xf6\\x57\\xcc\\xb2\\x28\\xab\\xa7\\xc5\\x85\\xc8\\xa8\\xa4\\xf5\\\n\\xc4\\x79\\x9f\\xb6\\x2f\\xb7\\xe1\\xca\\x2b\\xe5\\xd8\\x08\\x13\\xef\\xcd\\xd5\\\n\\x94\\xb0\\x82\\xb5\\x99\\x24\\xc2\\x12\\x1a\\x3f\\x06\\x2b\\x20\\x9a\\xee\\x35\\\n\\x1b\\xe0\\xdf\\x51\\xe9\\x97\\x4e\\x88\\xb4\\x66\\x7c\\x7f\\x07\\xc4\\xb8\\x9a\\\n\\x0c\\xd3\\xbc\\x95\\x9d\\xba\\x87\\x2d\\x0b\\x3a\\x98\\xd5\\x5b\\x79\\xb6\\xa5\\\n\\x8a\\x0e\\x09\\x83\\x35\\xa4\\x10\\x07\\xf1\\x0f\\x09\\x83\\xe5\\x44\\xef\\x81\\\n\\x11\\x7a\\x58\\x6a\\x0c\\x6b\\x02\\x49\\xcb\\x65\\x75\\xc0\\xdb\\x13\\x9e\\x80\\\n\\x56\\x47\\x42\\x44\\xb5\\xba\\x2d\\x26\\x1e\\x12\\xb2\\x7b\\xe9\\x5a\\x27\\x8f\\\n\\xb3\\x91\\xb8\\xb1\\xaf\\xd6\\x55\\x06\\x23\\x17\\x2e\\xb4\\xd8\\x86\\x97\\xb0\\\n\\x80\\xaa\\x35\\x04\\x6d\\x4b\\x23\\xfc\\x3b\\x4a\\x75\\x14\\x1a\\xb4\\x42\\x9c\\\n\\x9b\\x2c\\x69\\xb9\\xc8\\x44\\xf7\\xfc\\xd3\\xfe\\x0b\\x5b\\xbb\\x8d\\xe3\\xdc\\\n\\x55\\xf7\\x10\\x55\\x17\\x26\\x6c\\x7a\\x57\\xdd\\x42\\x8e\\xe4\\xae\\x16\\x7e\\\n\\x52\\x84\\x37\\xc2\\x1f\\x9f\\x14\\x79\\x35\\x8d\\x2b\\xc0\\x41\\x76\\x3e\\x21\\\n\\x04\\xe2\\xf2\\x45\\x8d\\xca\\x6b\\x46\\x50\\xfa\\x73\\x24\\xa6\\xaa\\x86\\x3d\\\n\\x92\\xd6\\xfa\\x9e\\x93\\xa0\\x3a\\x39\\x57\\xb5\\x32\\x02\\x33\\xe6\\xea\\x59\\\n\\x39\\x88\\x5b\\xac\\xe5\\xc3\\xae\\x0b\\x8c\\xa2\\xe8\\xb9\\x3d\\x21\\x4d\\xd1\\\n\\xfc\\xe4\\x64\\x86\\x13\\xef\\x29\\xdd\\x87\\xca\\x49\\x1a\\xf1\\x69\\x84\\x38\\\n\\x88\\xb7\\x87\\x25\\x34\\xe1\\x15\\xf1\\x28\\x89\\xac\\xa0\\xbb\\xe9\\xb0\\xc8\\\n\\x98\\xea\\x45\\xb3\\xc7\\xa7\\xa8\\x97\\x39\\xc9\\x59\\x2f\\xb2\\xc2\\x4a\\x9d\\\n\\xbd\\xe6\\xbf\\x70\\xda\\x86\\xd7\\x55\\xad\\x9f\\xda\\xf8\\x89\\x11\\xde\\x65\\\n\\x80\\xe7\\x48\\x8c\\x9c\\x7a\\xc4\\x11\\xe2\\x20\\x5e\\xc2\\xd2\\x43\\x40\\x33\\\n\\x95\\xe9\\x71\\xea\\x3f\\x09\\x6d\\x84\\x17\\x4e\\x89\\x36\\xe3\\xf6\\xac\\xb8\\\n\\xf9\\xc5\\xb7\\xd6\\x73\\x4f\\x15\\x3f\\xb6\\x27\\xa8\\x4b\\xf8\\x62\\x04\\xf6\\\n\\xb4\\xea\\xff\\x1c\\x89\\x91\\xd3\\x48\\x71\\x78\\x09\\x4b\\x68\\x86\\xde\\x48\\\n\\x82\\xeb\\x29\\x8b\\x11\\x1e\\x34\\xbd\\x09\\x6b\\xfc\\xe6\\x0f\\xc2\\x5e\\xc6\\\n\\x23\\x44\\x56\\xe1\\xea\\x59\\x89\\x79\\x36\\xec\\x71\\x46\\x20\\x2c\\xea\\x90\\\n\\x42\\xa8\\xad\\x84\\x38\\x88\\x97\\xb0\\x84\\x32\\xa1\\xd7\\xdb\\x10\\x30\\x82\\\n\\x59\\x64\\x3d\\x09\\xeb\\xa4\\x4d\\xef\\xc1\\x85\\x7f\\x3c\\x11\\xd6\\x32\\x9e\\\n\\x2e\\xd5\\x3b\\x19\\xbf\\x81\\x81\\xae\\xb8\\xb4\\x20\\x2b\\x6c\\x45\\x87\\x01\\\n\\x7a\\x58\\x5e\\xea\\x41\\x47\\x32\\xa5\\xf0\\x12\\x96\\xd0\\x84\\x97\\xe4\\xdc\\\n\\x23\\x34\\x81\\xde\\x43\\x42\\x5b\\x4c\\x82\\x62\\x4a\\xa3\\x52\\x9b\\x08\\xc9\\\n\\xea\\x82\\x3f\\xe7\\x30\\xc9\\xc2\\x51\\x2e\\xad\\x49\\xea\\x0c\\x15\\x29\\xfe\\\n\\x3a\\x55\\x5a\\x91\\x15\\x0a\\x6f\\x33\\x44\\x0f\\x8b\\x0e\\x09\\x85\\x9e\\x3f\\\n\\x21\\x0e\\xe2\\x25\\x2c\\xa1\\x4c\\xe8\\xf5\\x36\\x04\\xf4\\x1e\\x12\\xda\\x13\\\n\\x3a\\xe9\\xd6\\x14\\x76\\xaf\\xcb\\xaf\\x6c\\xb9\\xa4\\xd5\\x12\\x93\\x0c\\xf3\\\n\\x4e\\x7f\\x15\\xf6\\x65\\xb5\\x2d\\xe0\\xd6\\x92\\xac\\xb0\\x02\\x0e\\x1d\\x31\\\n\\x64\\x01\\xd4\\xfb\\x39\\x62\\xe5\\x30\\xd3\\x9e\\x12\\x96\\xc4\\xd6\\xf2\\x91\\\n\\xc1\\xb5\\xde\\x43\\x42\\x7b\\x5c\\xb2\\x44\\xa9\\x95\\x8b\\xce\\xea\\x69\\x71\\\n\\x73\\x0c\\x97\\xb4\\x3e\\x1e\\xfb\\x8f\\xb0\\x97\\xdb\\x70\\xe5\\x11\\x73\\xac\\\n\\x27\\x86\\xac\\x7c\\x5e\\x27\\x9d\\xc3\\x62\\xb1\\x10\\xbb\\xa7\\x84\\x25\\x16\\\n\\xa9\\x23\\xf1\\xf4\\x26\\x2b\\x14\\x43\\xcf\\x1e\\x16\\x96\\x1f\\x8c\\xb4\\xf2\\\n\\xcb\\x37\\x62\\x14\\xd1\\x01\\x7b\\x5a\\xbf\\x1e\\x73\\x89\\xe8\\xf8\\x4a\\x45\\\n\\xd4\\x1b\\x43\\xac\\x87\\xc7\\x45\\x09\\x4b\\x6a\\x7b\\x52\\xc2\\x92\\x8a\\x18\\\n\\x8d\\xcf\\x20\\xc0\\x47\\x5a\\xe5\\x9d\\x7a\\x40\\x79\\x4a\\xbe\\x29\\x10\\xb2\\\n\\x58\\x79\\x75\\xa6\\x4d\\x21\\x7b\\x34\\x0b\\x49\\x09\\x4b\\x62\\xeb\\x5b\\x1d\\\n\\x47\\x6d\\x32\\x49\\x4c\\xaa\\x58\\x74\\x77\\x53\\xad\\x62\\x79\\x85\\x93\\x11\\\n\\x97\\xb4\\x8a\\x33\\xfa\\xc3\\x8b\\xa7\\xcf\\x87\\xa6\\x38\\xff\\xf9\\x35\\xfc\\\n\\x1a\\x18\\xd7\\xda\\x10\\x4e\\x31\\xaa\\xa4\\xf5\\xba\\x9d\\xaa\\xe4\\x2b\\x25\\\n\\x53\\xfc\\x78\\x42\\x83\\x34\\x04\\xe8\\xdf\\x8c\\x34\\xbc\\xc8\\x22\\x7f\\x0b\\\n\\x58\\xc9\\xe2\\x59\\x3d\\x3f\\x49\\xbb\\x9a\\xeb\\x24\\x4a\\xad\\x5e\\x74\\x24\\\n\\xad\\xfa\\xb8\\x74\\xd8\\xd4\\x7d\\x42\\x07\\xb2\\x62\\xf5\\xac\\x2a\\x52\\x7a\\\n\\x30\\x13\\xec\\x2d\\x31\\x49\\xea\\x09\\x22\\x31\\x67\\x63\\x10\\x56\\xbc\\x44\\\n\\xa9\\x69\\x74\\xda\\xc3\\x92\\xf1\\x0c\\xe8\\xfd\\xcf\\x68\\x84\\xa5\\x41\\x5c\\\n\\xd8\\x56\\x15\\x4c\\x13\\x24\\x2b\\xd4\\xb3\\xca\\xaf\\xf8\\x1b\\x66\\x2f\\x9e\\\n\\x69\\xa8\\x9e\\x96\\xd7\\xa5\\x7f\\x0f\\xcb\\x1a\\x4b\\x7b\\x58\\xdc\\xe7\\x48\\\n\\xcc\\x31\\x25\\x2c\\x31\\x28\\x05\\xc4\\xd1\\x9b\\xb0\\x70\\xe2\\xdf\\xeb\\xf6\\\n\\x57\\x2f\\x08\\x10\\x51\\xd7\\x53\\xb6\\x67\\xc5\\x55\\x0a\\x45\\xd2\\x1a\\xbd\\\n\\xeb\\x5b\\x5d\\xe5\\xe2\\x16\\x6e\\x8c\\x1e\\x16\\x25\\x2c\\x6e\\x9b\\x88\\x39\\\n\\xa6\\x84\\x25\\x06\\xa5\\x80\\x38\\x68\\x4f\\x49\\xef\\xe0\\x6e\\x36\\xc6\\x3c\\\n\\x56\\x20\\x0e\\x7c\\x64\\x85\\x71\\xfe\\xea\\x73\\x96\\x2e\\x5f\\x03\\x03\\xe5\\\n\\x63\\xcf\\xbd\\xae\\x56\\xf6\\x50\\xb7\\xbd\\xde\\x7f\\x7c\\xba\\x55\\x3c\\x8c\\\n\\x82\\x29\\x61\\xc9\\x00\\xcf\\x08\\x5d\\x79\\x23\\x12\\x96\\x10\\x59\\xd5\\x24\\\n\\xe6\\xc0\\xb0\\x7d\\xdf\\x87\\xbd\\xf6\\x50\\x46\\x53\\x09\\x26\\x71\\x35\\xb6\\\n\\x39\\xdd\\x10\\x8c\\xa0\\xc1\\x0d\\x23\\xfc\\xf1\\x69\\x50\\x4d\\x45\\x8b\\xa0\\\n\\x84\\x25\\x03\\x4e\\x23\\xfc\\x33\\xba\\x9b\\x8c\\x33\\xf1\\xce\\x42\\xd8\\xf7\\\n\\xe0\\xea\\x0e\\xae\\xb8\\x90\\xac\\xd2\\x1a\\x0f\\x81\\x5c\\xe5\\x52\\x36\\x6f\\\n\\xa5\\xf7\\xce\\xda\\x72\\xa5\\xb3\\x94\\x9c\\x9f\\x8d\\xce\\x61\\x49\\xc6\\x8c\\\n\\x12\\x96\\x64\\xc8\\x00\\x62\\x92\\x32\\x64\\xa4\\x52\\x36\\x89\\xcb\\x80\\x43\\\n\\xc2\\x1f\\x89\\xf7\\x9d\\xaf\\x47\\xdd\\xda\\x5e\\xd1\\xbf\\xbb\\x9d\\xc4\\x90\\\n\\x15\\x7b\\xc1\\x48\\xa4\\xd5\\x5a\\xaf\\x3f\\x61\\x39\\x92\\x32\\x59\\x68\\xe8\\\n\\x5e\\x24\\x02\\x94\\xb0\\x44\\x02\\xc5\\x8d\\x16\\x97\\xe9\\xbf\\x68\\x97\\x7b\\\n\\x4f\\xab\\xe3\\xd6\\xda\\x43\\x5a\\x15\\x25\\xa9\\x9c\\xe5\\xc3\\xae\\x67\\x48\\\n\\x0b\\xd7\\x06\\xbe\\x36\\xf9\\x05\\xf8\\x72\\xcc\\x1d\\x7e\\xe9\\x8d\\x42\\x5a\\\n\\xad\\x06\\xe8\\x61\\xc5\\x67\\xe8\\xff\\x1c\\xf9\\x35\\x8e\\x09\\x4e\\x28\\x61\\\n\\xc9\\x68\\xa4\\xf8\\x8c\\x1e\\x32\\x52\\x29\\x9b\\xa4\\xfe\\xc0\\x26\\x65\\x33\\\n\\x54\\x30\\x37\\x86\\xb4\\xc6\\xdc\\xce\\xe4\\xc8\\x55\\x2e\\x65\\x8b\\x30\\x02\\\n\\x69\\x39\\xeb\\xf4\\xef\\x61\\x19\\xe1\\x8f\\x8f\\x6d\\x13\\xb3\\xec\\x29\\x61\\\n\\xc9\\x68\\x29\\x23\\xfc\\x33\\xd6\\x17\\x17\\xca\\x90\\x5c\\x9f\\x24\\x42\\xa4\\\n\\xd5\\xbb\\x6c\\x9d\\x3e\\x02\\x91\\x52\\x5b\\xaa\\x8a\\x74\\x2b\\x1b\\x0b\\x76\\\n\\x24\\xa6\\x83\\x3d\\x36\\x51\\x57\\x19\\xcc\\x58\\x38\\x25\\x2c\\x19\\xad\\x66\\\n\\x84\\x7f\\xc6\\xfa\\x62\\xfd\\x7a\\x58\\x76\\x8f\\x74\\x95\\x80\\x40\\xd2\\x5a\\\n\\x3c\\x7c\\x26\\x2c\\x1b\\x7e\\x83\\x0c\\xf4\\xc3\\x4f\\x82\\x4a\\xa3\\x4d\\xe5\\\n\\x7b\\xc3\\xcf\\x28\\x8c\\x1c\\x8c\\xf0\\x0c\\x85\\x21\\xbe\\x6e\\x49\\xe9\\xd2\\\n\\x1c\\x19\\xd0\\x1b\\xa1\\x87\\xe5\\xac\\x29\\x61\\xfc\\xda\\xc5\\x24\\xa5\\xcb\\\n\\xa8\\x81\\xfc\\x24\\xa8\\xba\\x70\\xc3\\xb2\\x5b\\xe1\\xdd\\x09\\x8f\\x01\\xba\\\n\\x8f\\x97\\x12\\x90\\xb4\\x30\\xc4\\x12\\xc7\\xac\\xdf\\x8d\\x9c\\x2d\\x25\\xa9\\\n\\xa2\\x71\\x1b\\xcb\\x76\\x02\\xf8\\x84\\x3c\\xdf\\x29\\x5a\\x94\\x60\\x66\\xf1\\\n\\x99\\xfa\\x4f\\x2b\\x08\\x0a\\x67\\xe0\\x1b\\xb4\\x87\\x25\\xa3\\x71\\x62\\x92\\\n\\x33\\x99\\xf5\\x84\\x32\\x92\\x2a\\x9a\\x44\\xeb\\x61\\x21\\xab\\x67\\x95\\xd6\\\n\\x74\\x08\\x6e\\x5c\\x7a\\x33\\xf4\\x2d\\x5d\\x25\\xb9\\x3e\\x48\\x5a\\x7a\\x92\\\n\\x15\\x0a\\xdc\\x50\\xba\\x55\\xb2\\xdc\\x4a\\x27\\x30\\xc2\\x9f\\x9e\\xd2\\x75\\\n\\xd2\\x22\\x3f\\x4a\\x58\\x32\\x51\\x36\\xc2\\x3f\\x64\\x83\\x86\\xc3\\x42\\x96\\\n\\xac\\xd8\\xe5\\x36\\x31\\x9e\\x16\\x86\\xb4\\x32\\xeb\\xcc\\xe7\\x72\\xbd\\xf1\\\n\\xe0\\x36\\x99\\xad\\xae\\x5c\\xb2\\xf8\\xcc\\x7c\\xe5\\x32\\x8b\\xa2\\x9c\\x28\\\n\\x61\\xc9\\x6c\\xec\\xe4\\x6e\\x43\\x64\\xa6\\x54\\x2e\\x99\\x56\\x3d\\xac\\x40\\\n\\xb2\\x62\\x6b\\xf0\\xf3\\xc0\\x4b\\xa1\\x32\\xa5\\x1b\\x7b\\xaa\\xd8\\xde\\xe1\\\n\\x6e\\x51\\x2c\\x2f\\xbe\\x8c\\x6a\\x77\\xaf\\xe6\\xbb\\xac\\xe9\\xb5\\xe4\\xee\\\n\\xfa\\x3f\\x3f\\x9a\\x56\\x58\\xa1\\xc2\\x28\\x61\\xc9\\x04\\xb2\\x53\\xaf\\xd1\\\n\\x32\\x53\\x2a\\x97\\xac\\x4e\\x83\\x2f\\x85\\x42\\x64\\xb5\\x9c\\x0c\\xed\\xbe\\\n\\x0e\\xd0\\xb1\\x52\\xa2\\x66\\xbd\\xca\\xd6\\xc3\\xc3\\x1f\\x9d\\xae\\xda\\x32\\\n\\x1e\\xaf\\xc7\\x0d\\x35\\x3b\\x7f\\x53\\x42\\x54\\xf9\\x79\\x58\\xac\\x90\\x92\\\n\\x3f\\x42\\x7e\\xfa\\x28\\x4e\\xc9\\x4b\\x58\\x96\\x28\\x06\\x44\\x6c\\xd5\\x3b\\\n\\xf5\\x1c\\x25\\x36\\xaa\\x6a\\xf1\\x1a\\x4a\\xb6\\x80\\xbb\\x59\\x3d\\x87\\xa3\\\n\\x16\\xaf\\x07\\xae\\x59\\x71\\x6f\\x87\\xe5\\x36\\x6d\\x0e\\x23\\xfc\\x15\\x42\\\n\\x95\\xa8\\x24\\x92\\xd5\\x4d\\x4b\\x6e\\x82\\x94\\xe6\\xaa\\xb0\\x5c\\x88\\x05\\\n\\x93\\xa5\\x6e\\xdf\\x3a\\xf0\\x38\\x1b\\x83\\x45\\x51\\xfd\\x5e\\x52\\xee\\x00\\\n\\xaa\\xd2\\x10\\x02\\x65\\x21\\x0e\\xe2\\x25\\xac\\x10\\x79\\xd1\\xdb\\x04\\x81\\\n\\x94\\x1e\\xc3\\x74\\x73\\xb5\\xc5\\x36\\x80\\xcf\\xdd\\x0a\\xe5\\x1b\\x16\\xb1\\\n\\xa7\\x8a\\xef\\x7d\\x56\\x1b\\xbc\\x7e\\xea\\x33\\xd0\\x10\\x9b\\xda\\x9e\\xb7\\\n\\x5a\\xde\\x6d\\x52\\x1a\\xcb\\x09\\x59\\xdd\\x08\\x71\\xee\\x36\\xd7\\x57\\x6a\\\n\\x29\\x97\\xd6\\x6c\\xff\\xb5\\xbd\\x2e\\x7a\\x1d\\x74\\xea\\xa9\\x7f\\xef\\x5c\\\n\\xaf\\xba\\x87\\x5b\\x2e\\x2f\\x61\\x11\\xa3\\x9a\\x34\\x84\\x40\\x00\\x57\\xda\\\n\\x27\\xe5\\x0e\\x0c\\x11\\x4b\\xfd\\xdb\\x65\\xab\\x3e\\x51\\xb5\\x90\\xd2\\x8c\\\n\\x02\\x78\\xe1\\x8c\\x05\\x0c\\x69\\xa9\\x45\\x56\\x58\\x81\\x6a\\x6b\\x3c\\xbc\\\n\\x5a\\xe5\\xf1\\xab\\x8b\\x1a\\xa4\\x55\\x51\\xb8\\xd4\\xaf\\x0c\\x3d\\x4e\\x3a\\\n\\xf5\\x1c\\xa9\\x47\\xb1\\xa6\\x2a\\x53\\x88\\x83\\xf8\\x09\\xcb\\x54\\x55\\xd3\\\n\\x4f\\x58\\x23\\xcc\\x63\\x55\\x6e\\x5a\\x4e\\x86\\x85\\xea\\x5a\\x6e\\x40\\xd2\\\n\\x7a\\xe2\\xfc\\xcf\\x54\\x73\\xc5\\xe5\\x21\\x06\\x09\\xd7\\xfd\\xf7\\x7c\\x98\\\n\\xb7\\x69\\x13\\xcc\\xd9\\x57\\xe1\\xd7\\xa0\\x4a\\x92\\x56\\x53\\xc5\\x5e\\xa8\\\n\\xd9\\xfe\\x8b\\x5f\\xfe\\x7a\\x9c\\x18\\xe1\\xb9\\xd1\\xa3\\xde\\x52\\xca\\x14\\\n\\xea\\x33\\xf1\\x13\\x96\\x50\\x6c\\x29\\x25\\x46\\x41\\x5c\\x23\\xfc\\x53\\x32\\\n\\xc3\\xc2\\xf5\\xdf\\xa8\\x8e\\x76\\x5d\\x42\\x96\\x2a\\x65\\xe0\\x24\\xf8\\xc6\\\n\\x79\\x97\\xb6\\x13\\xc9\\x82\\x92\\x1a\\x5e\\xd2\\xba\\xea\\xc7\\xfb\\x41\\x8e\\\n\\x86\\x3d\\x57\\xe8\\xd2\\x95\\xef\\x72\\x4f\\x75\\x39\\x46\\x27\\x26\\x49\\x79\\\n\\x6d\\xce\\x63\\x75\\x11\\xc0\\x24\\x85\\xd2\\x1e\\x96\\x0a\\x0d\\x95\\x56\\x30\\\n\\x4e\\x85\\x5c\\xa5\\x67\\x79\\xf0\\x2f\\x75\\x87\\x85\\xd2\\x25\\x12\\x97\\xc2\\\n\\xe7\\xf5\\xc2\\xa6\\x05\\xd7\\x41\\xc5\\xc6\\xc5\\x7e\\x09\\x02\\x49\\xab\\xce\\\n\\x6b\\x81\\x97\\x4f\\x7c\\x14\\xdc\\xb6\\x18\\xbf\\x78\\x52\\x4e\\xd0\\x01\\x6e\\\n\\xc9\\x6f\\xef\\x49\\x49\\xa2\\x4a\\xdc\\xd4\\x3e\\xc7\\x83\\xd5\\x46\\x17\\x98\\\n\\x84\\x02\\x57\\xa8\\xcf\\xc4\\xdb\\xc3\\x02\\xa1\\xd8\\xa1\\x4a\\x89\\xb2\\xfb\\\n\\x89\\x5d\\x0a\\x20\\x21\\xa7\\x8f\\xee\\xb5\\xae\\xda\\xfc\\x03\\xb8\\x9a\\x0e\\\n\\xcb\\x96\\x03\\x55\\x17\\xce\\x5e\\xf5\\xbc\\xec\\xf4\\x72\\x13\\x6e\\x7d\\xef\\\n\\x76\\x38\\xf8\\xe7\\x47\\xbc\\xc9\\x59\\xd2\\xaa\\x75\\x7b\\xe0\\xaa\\xc2\\x7d\\\n\\xf0\\xc9\\x2b\\x37\\x41\\x0b\\x59\\x8e\\x24\\x37\\x54\\x6f\\x59\\x41\\x16\\x3c\\\n\\xef\\x97\\x9b\\x5c\\xb1\\x74\\xd9\\xc3\\xa7\\x2a\\x96\\x57\\x44\\x67\\x24\\xc0\\\n\\x41\\xbc\\x84\\xc5\\x7b\\x31\\xa2\\xd1\\x91\\x5f\\x39\\x23\\x3c\\x80\\x3e\\x8f\\\n\\x0b\\xca\\xd7\\x7d\\x2d\\xab\\x12\\xac\\x9e\\xd5\\x69\\x85\\x6f\\xc0\\x85\\xbf\\\n\\x3d\\x26\\x2b\\x0f\\x39\\x89\\x76\\x7c\\xfa\\x20\\x14\\xff\\xf8\\x5a\\xd0\\xa4\\\n\\x48\\x5a\\x93\\xd7\\xed\\x83\\xcd\\x8d\\x4e\\x68\\x24\\xcb\\x69\\xfe\\x7a\\xec\\\n\\x64\\x60\\xd6\\x01\\x06\\x4d\\xc5\\x7f\\xb3\\x64\\xe5\\x3b\\xfc\\x37\\x34\\xbe\\\n\\x9a\\x3d\\xfc\\x4c\\x8d\\x4b\\x34\\x67\\x71\\x42\\x1c\\xc4\\x7b\\x5d\\x68\\xfc\\\n\\x68\\xce\\xaa\\xab\\x2b\\x75\\xf6\\x30\\x63\\xfc\\x63\\x1e\\xfc\\xf3\\x63\\xc9\\\n\\x15\\x65\\xc9\\x8a\\x5d\\x6e\\x33\\x7e\\xeb\\x47\\x9a\\x90\\xd6\\xde\\xef\\x9e\\\n\\x81\\xbd\\x8b\\x9e\\x16\\x25\\x6f\\xb5\\xeb\\xe8\\x97\\x43\\xec\\x21\\xfd\\xf5\\\n\\xf8\\xc9\\x50\\xbb\\x77\\xad\\xa8\\xb4\\x6c\\x24\\xec\\x7d\\x1e\\x5a\\xf3\\x25\\\n\\x7b\\xaa\\xdb\\x1e\\xe7\\xae\\xe8\\x92\\x1c\\x71\\xf0\\x0b\\x71\\x10\\x2f\\x61\\\n\\x59\\x05\\xba\\x63\\xe2\\x8a\\x8a\\xae\\x58\\xa9\\x7d\\x8f\\x67\\x6c\\x1b\\xe9\\\n\\x5d\\xeb\\xaa\\xcd\\xdf\\xc3\\xe1\\xdd\\x7f\\x89\\x16\\x23\\x90\\xac\\xd8\\x84\\\n\\x4e\\x47\\x02\\x7b\\xa8\\xca\\xbe\\xf8\\xa7\\x05\\xb0\\xe3\\x93\\x07\\x64\\xe7\\\n\\xed\\xaa\\xaf\\x84\\xd5\\x4f\\x4d\\x02\\x1c\\x06\\x8b\\x0d\\x65\\x7f\\x7d\\x4c\\\n\\xdc\\xa2\\xe9\\xef\\x87\\x30\\x7b\\xf8\\x59\\x62\\x45\\x8e\\xfa\\x78\\x42\\x1c\\\n\\x44\\x09\\x2b\\xcc\\x47\\xc3\\x42\\x94\\x2b\\xb3\\x86\\x9e\\x1e\\x66\\x2e\\xca\\\n\\x24\\xdf\\xfe\\xd1\\xfd\\xa2\\x32\\x12\\x22\\x2b\\xb5\\x96\\xdb\\xb0\\x42\\x1d\\\n\\x24\\xc4\\xb1\\xe5\\x9d\\x5b\\xd8\\x53\\xd9\\x7b\\xd4\\x54\\x5f\\xfb\\xdc\\x39\\\n\\x50\\xb6\\xea\\x53\\x98\\xba\\xfa\\x7f\\x41\\x97\\xf1\\xa0\\xca\\xc4\\xde\\xef\\\n\\x9e\\x95\\x5d\\x96\\x92\\x09\\xb3\\x47\\x50\\xc2\\x12\\x8b\\x27\\x25\\x2c\\xb1\\\n\\x48\\xc9\\x88\\x67\\x94\\x7f\\xce\\xc3\\x3b\\x7f\\x87\\x43\\x21\\xe6\\xb2\\xb2\\\n\\x0f\\xef\\x85\\x9b\\x17\\xcf\\xd0\\x6c\\xb9\\x0d\\x0b\\x67\\xc5\\xc6\\x25\\xf0\\\n\\xf7\\xfc\\x6b\\x89\\x1d\\x2a\\x1f\\x7b\\x29\\xac\\x3d\\xce\\xdb\\x9d\\xbe\\xe4\\\n\\x0e\\x98\\xbc\\x71\\x41\\xd0\\x65\\x3c\\x7b\\x17\\xcd\\x85\\xe6\\xca\\x7d\\x61\\\n\\x95\\xa5\\x44\\xe2\\xd8\\xd4\\xae\\x64\\x75\\xc4\\x70\\x25\\xb2\\x8a\\x8a\\x3c\\\n\\x24\\x11\\x96\\xd0\\xf8\\x31\\x2a\\x90\\x92\\x51\\xc9\\x8c\\x41\\x13\\xc1\\x08\\\n\\xae\\xbf\\x50\\x74\\x1c\\x6e\\xa1\\x6e\\x93\\x50\\xa8\\x4a\\xce\\x83\\xbd\\xd9\\\n\\xc3\\xfc\\x6e\\xab\\xa9\\xc1\\x8e\\x05\\x55\\x93\\xe5\\x30\\x1b\\xe6\\x5d\\x02\\\n\\xbe\\x20\\x72\\xf9\\x09\\x24\\xe2\\xe4\\xbe\\xfc\\x4c\\xb8\\xb6\\x6b\\x1a\\x13\\\n\\x53\\x48\\xb9\\x14\\x89\\x4a\\xec\\x5c\\x99\\x88\\x22\\xc3\\x8a\\x92\\x33\\xfa\\\n\\x5c\\xb0\\xd0\\x17\\x4b\\x34\\x86\\x42\\x50\\xf1\\x0e\\x09\\x6d\\x74\\x0e\\x4b\\\n\\x34\\xb0\\x18\\xd1\\x1e\\x97\\x04\\x5d\\x8e\\xbb\\x44\\x52\\x1a\\xb5\\x22\\x37\\\n\\x11\\x6b\\x9a\\x07\\xc8\\x3c\\x91\\x50\\xf0\\xd8\\x1c\\xb0\\x60\\xe2\\x73\\xb0\\\n\\xa9\\xdb\\x78\\x26\\x8a\\xda\\x64\\x55\\xb7\\x6f\\x3d\\xac\\x7b\\xfe\\x3c\\xf0\\\n\\x92\\xa1\\x99\\x92\\xa1\\x8a\\x33\\x19\\x8f\\xf9\\xb6\\x91\\xd6\\x2c\\xbf\\xe1\\\n\\xe1\\xd6\\x85\\x77\\x1b\\x62\\xee\\x0a\\xe5\\xeb\\x36\\x61\\x06\\xee\\x68\\x10\\\n\\x89\\x80\\x10\\x07\\xf1\\x13\\x16\\xef\\x55\\x91\\x25\\x45\\x69\\xb4\\x6e\\x27\\\n\\x1b\\xe7\\x81\\xdc\\xfd\\xd5\\x63\\x41\\xad\\x38\\xb0\\xa4\\xf5\\xee\\xf8\\x47\\\n\\x55\\x5b\\x6e\\x83\\x8f\\x41\\xc3\\xc1\\xed\\xb0\\xe6\\x99\\xa9\\xe0\\x69\\x51\\\n\\xde\\xa2\\x04\\xab\\xa7\\xc5\\x7d\\xdc\\x62\\x89\\x1d\\xad\\x9b\\x96\\xb6\\x91\\\n\\x56\\xc5\\xdf\\x4b\\xa1\\x62\\xfd\\xb7\\xdc\\xdb\\xba\\x1d\\xa7\\xf5\\x3b\\x11\\\n\\x92\\xba\\xf6\\xd7\\xad\\x7c\\x33\\x16\\x6c\\x13\\xe0\\x20\\xde\\xcb\\x76\\xde\\\n\\xab\\x66\\xac\\xb6\\x76\\x32\\xa7\\xe4\\x0f\\x07\\x23\\x98\\x9c\\xc1\\x1a\\xb7\\\n\\xd6\\x57\\x90\\x89\\xe6\\xb9\\x41\\x2b\\x8f\\xa4\\xb5\\xaa\\x60\\x5a\\xd0\\x38\\\n\\xe1\\xdc\\x6c\\xae\\x2c\\x82\\x35\\x4f\\x9f\\x01\\xae\\x86\\xaa\\x70\\xb2\\x09\\\n\\x9a\\x56\\x90\\xb4\\x96\\xcc\\x02\\xf8\\xf4\\xce\\xa0\\x69\\xb5\\xbc\\xd9\\xed\\\n\\x64\\x7d\\x9c\\x6d\\x68\\x59\\x47\\xa5\\xcb\\x12\\xe2\\x20\\x5e\\x6a\\xb2\\x09\\\n\\x0d\\x20\\x95\\x96\\x2a\\xc2\\xf2\\xcb\\x33\\x50\\x2f\\x6b\\xdf\\xd2\\xff\\x42\\\n\\xdd\\xfe\\x42\\x5d\\x10\\x76\\x12\\x27\\xaf\\x48\\x56\\xe8\\x28\\x43\\xed\\xc0\\\n\\x47\\x5a\\x6b\\x0f\\xd7\\xc1\\xa6\\xe2\\x3d\\x6a\\x17\\x2d\\x2a\\xff\\x98\\x94\\\n\\x6c\\xc8\\x19\\x79\\x8e\\xa8\\xb8\\x34\\xd2\\x51\\x04\\x84\\x38\\x88\\x9f\\xb0\\\n\\x78\\xaf\\x1e\\xcd\\x8c\\x1e\\xf1\\x23\\xd0\\xe5\\xd8\\x8b\\xc0\\x1e\\xdf\\x89\\\n\\xff\\xa6\\xc6\\x57\\x0b\\x1c\\x3e\\x28\\x7e\\xe1\\xdc\\xb0\\x96\\xb3\\xc8\\x15\\\n\\xd9\\x59\\x5b\\x06\\xae\\xe6\\x5a\\xb9\\xc9\\x25\\xa7\\xe3\\x92\\xd6\\x6f\\x87\\\n\\x1b\\xe1\\x86\\xbf\\x8b\\xa0\\x55\\xa1\\xaf\\x91\\x92\\x85\\x09\\x48\\x90\\x3b\\\n\\xfe\\x6a\\xb0\\xda\\x1d\\x01\\x57\\xe9\\x69\\x28\\x04\\xe8\\x90\\x30\\x14\\x42\\\n\\x0a\\xdc\\x47\\x1b\\x59\\x5d\\xc7\\x5d\\xae\\x40\\x4e\\xe1\\x65\\x31\\x20\\x31\\\n\\x16\\xde\\x19\\x94\\x07\\x6f\\x74\\x77\\xc0\\xfe\\xff\\x4d\\x0b\\x3a\\x9f\\x15\\\n\\x5e\\x49\\xfc\\xa9\\x53\\xba\\x0f\\x85\\x63\\xff\\xf1\\x23\\xc4\\x69\\xe8\\x21\\\n\\x1b\\x49\\xeb\\xb6\\x6d\\xa5\\x30\\x73\\x4b\\xa9\\x61\\xc8\\x8a\\x7c\\x16\\x84\\\n\\x6e\\x27\\x5d\\xc7\\x0f\\x12\\xbd\\x1a\\x14\\x01\\x49\\x43\\x42\\x87\\x2d\\x68\\\n\\x5e\\xf4\\x66\\x10\\x04\\xba\\x9f\\x7a\\x93\\xae\\x96\\x48\\x91\\xac\\xde\\x1e\\\n\\x98\\x07\\xa9\\xa4\\x11\\xf3\\xe3\\x63\\xe0\\xd5\\xf4\\x06\\x28\\x79\\xe5\\x62\\\n\\xe2\\x86\\xef\\xe8\\x12\\x97\\x20\\xe2\\x2b\\x76\\x2b\\xb1\\x73\\x5f\\x38\\xf6\\\n\\x81\\x1f\\x89\\x29\\x95\\x81\\x8a\\xe5\\x19\\x2a\\xa3\\xc5\\x55\\x0d\\xc6\\x21\\\n\\x2b\\x22\\x6c\\xe7\\xd1\\xe7\\x93\\xa5\\x38\\xd4\\xff\\x60\\xa8\\x76\\xe3\\xbb\\\n\\x2f\\xc4\\x41\\xbc\\x83\\x3f\\x21\\x76\\xe3\\xcb\\x98\\x5e\\xf3\\x47\\x20\\x91\\\n\\x58\\x6f\\xc8\\x1d\\x77\\x95\\xff\\x45\\x8d\\xce\\xb8\\x64\\xc5\\x16\\x89\\xa4\\\n\\x35\\xb6\\x72\\x3d\\x6c\\x79\\xf7\\x76\\xf6\\x92\\x66\\xfb\\xb8\\xb4\\xae\\x30\\\n\\xe6\\xfe\\x1f\\x20\\xb5\\xef\\x58\\xcd\\xca\\x34\\x4c\\x41\\xc4\\xd1\\x44\\x9f\\\n\\x73\\xff\\x65\\x18\\x71\\xcc\\x26\\x88\\x10\\x07\\xf1\\x12\\x96\\x83\\xf7\\xaa\\\n\\xd9\\xaa\\xac\\x9f\\xbc\\xbd\\xa7\\xfd\\x03\\x2c\\x76\\xf9\\xb6\\x9b\\xe4\\x48\\\n\\xce\\x47\\x56\\x98\\xcf\\xfc\\x03\\xd5\\xf0\\x46\\x69\\x0d\\xd1\\xcd\\x9a\\x0f\\\n\\x7b\\x17\\x6b\\xbf\\x44\\xc5\\x91\\x90\\x0a\\xa3\\xee\\x5e\\x04\\x59\\xc3\\xce\\\n\\x94\\x53\\x2d\\x45\\xd3\\x64\\x90\\xbf\\xed\\x61\\xc9\\x71\\x8a\\xe6\\x29\\x94\\\n\\x59\\xee\\xb8\\x2b\\x00\\x7b\\x99\\x34\\xc8\\x43\\x40\\x88\\x83\\x78\\xa9\\xc9\\\n\\x21\\xa4\\xb5\\x25\\xaf\\xec\\xa8\\x4b\\x15\\x97\\x9e\\x07\\xdd\\x35\\xfc\\x94\\\n\\x1d\\x8c\\xac\\x9e\\x2e\\xaa\\x6c\\xc7\\x7f\\xc7\\xc7\\xff\\x80\\xd2\\x3f\\x3e\\\n\\x68\\x3f\\xd7\\xea\\x00\\xe7\\xf6\\x86\\xdf\\xf2\\x31\\xe9\\x79\\x5e\\xa9\\x55\\\n\\x91\\x1d\\xca\\x41\\xb2\\x7a\\x97\\xcc\\xeb\\xbd\\x45\\x86\\xcb\\xa3\\x53\\xe2\\\n\\x3b\\xdc\\x57\\xf2\\x02\\xfe\\x59\\xf5\\x9e\\x26\\x7f\\x81\\xb7\\x92\\xb2\\x98\\\n\\x35\\x2f\\x21\\x0e\\xe2\\x25\\xac\\x18\\x3a\\x87\\x15\\x76\\x3b\\xf7\\x9a\\x7a\\\n\\x1f\\xd8\\x62\\x13\\xc3\\xce\\x47\\x4c\\x06\\xbd\\xc9\\xb0\\x2f\\x25\\xa0\\x0f\\\n\\xfd\\x1a\\xe9\\x59\\x71\\xc9\\x8a\\xcd\\xe7\\xef\\xd7\\xae\\x21\\x0b\\x90\\x6f\\\n\\x05\\x4f\\x6b\\x33\\x7b\\x49\\x93\\x3d\\x2e\\x12\\x1f\\x74\\xdd\\x6b\\xd0\\xf3\\\n\\x8c\\xbb\\x34\\x29\\x8f\\x5b\\x08\\x4b\\x56\\x7d\\x12\\x62\\x21\\x81\\x7c\\x7e\\\n\\x9a\\x7f\\x4c\\xae\\xaa\\xa4\\xd5\\x6d\\xc2\\xf5\\x40\\x5d\\xd1\\x73\\x5b\\x40\\\n\\xfa\\xb1\\x10\\x07\\xf1\\x12\\x56\\x2c\\xb5\\xe0\\x2a\\x1d\\xe1\\x80\\x14\\x31\\\n\\x29\\x59\\xd0\\x63\\x52\\xf8\\x96\\x09\\x02\\xb2\\xe5\\x3d\\xfd\\xb6\\xb2\\x1e\\\n\\xee\\xdb\\x59\\x06\\xde\\x23\\x9f\\xf2\\x91\\xac\\xe6\\x72\\x7a\\x56\\x81\\x89\\\n\\xd0\\x70\\xde\\x1f\\x0f\\x1f\\x47\\xf4\\xb4\\x36\\x06\\xde\\x52\\xfd\\xbc\\xe0\\\n\\xc2\\xc7\\xa0\\xdf\\x25\\x73\\x54\\x2f\\x87\\x5b\\xc0\\xc9\\x69\\x89\\x80\\x64\\\n\\xc5\\x06\\x35\\x49\\x0b\\xd7\\x94\\xe2\\x9f\\x15\\x0d\\xe1\\x21\\x20\\xc4\\x41\\\n\\xfc\\x84\\x45\\x7b\\x58\\xe1\\xa1\\x7d\\x24\\x75\\xfe\\x94\\x3b\\xc0\\x91\\x94\\\n\\xa1\\x48\\x5e\\xa1\\x32\\xf9\\xaa\\xa2\\x8d\\xb4\\x5e\\x0d\\x41\\x56\\x6c\\x3e\\\n\\x8d\\x64\\xd9\\xcc\\x9f\\x8f\\x8c\\x83\\xbd\\x4b\\x9e\\x27\\x06\\x14\\x94\\xb1\\\n\\xa0\\xc0\\xe6\\x1d\\x6a\\x9f\\x3f\\xf9\\x56\\x18\\x7c\\xc3\\x9b\\x60\\xd1\\xc8\\\n\\xb6\\xf9\\xa7\\xe5\\x75\\x1d\\x1c\\x5b\\xa8\\x45\\x5a\\xf9\\x53\\x6e\\x87\\xd8\\\n\\x4e\\x39\\xa1\\x20\\xa0\\xf7\\x43\\x20\\x10\\x2b\\xc0\\x41\\xfc\\x84\\x65\\xa7\\\n\\xab\\x9f\\x43\\xe0\\x29\\xea\\xb6\\x23\\xa1\\x13\\x0c\\xb8\\x4c\\xbb\\x89\\x6e\\\n\\x24\\xad\\x67\\x82\\xf4\\xac\\x02\\x85\\x46\\x13\\x2d\\x3b\\x3e\\xfa\\x3f\\x58\\\n\\x33\\xf7\\x4c\\xa2\\x60\\x5a\\x1a\\x78\\x5b\\xd5\\xf3\\xae\\xc7\\x5f\\x0a\\xc3\\\n\\x6f\\xfb\\x4c\\x33\\x2b\\x17\\x5c\\xe5\\x52\\xb6\\x62\\x4a\\x93\\x56\\x62\\xe7\\\n\\x02\\xda\\xbb\\x62\\xc1\\x0d\\x73\\x1f\\x2b\\xc0\\x41\\x02\\x84\\x15\\x66\\x69\\\n\\x34\\x79\\x3b\\x02\\x5d\\x8e\\xbb\\xd8\\x10\\x5f\\xc8\\xda\\x05\\xe2\\x39\\x40\\\n\\x07\\x0d\\xbf\\x3f\\x38\\x0a\\xd0\\xc0\\x1e\\x7a\\xb2\\xd1\\x2a\\x64\\x0d\\x9e\\\n\\x0c\\xa3\\xee\\x5d\\xa2\\x99\\xc5\\x56\\x3e\\xd2\\x8a\\x27\\x86\\x97\\xba\\xc7\\\n\\x29\\xa0\\x89\\x4e\\x94\\x44\\x07\\x5e\\xfb\\x2a\\x58\\x1d\\x47\\x87\\x9e\\x5a\\\n\\xe1\\x18\\x89\\xe5\\x48\\x1a\\x12\\xc6\\xd1\\x39\\x2c\\x45\\x9f\\x81\\x81\\x57\\\n\\xbd\\xa8\\xc8\\x92\\x9d\\x44\\x15\\xbf\\xde\\xba\\x1a\\xab\\xa1\\xf0\\x95\\x2b\\\n\\x61\\xe5\\x03\\x43\\xa1\\xf8\\xe7\\xd7\\x89\\x39\\x18\\x6d\\x4c\\x0a\\xa7\\xf6\\\n\\x1e\\x03\\x63\\xfe\\xb1\\x02\\xf0\\xcb\\xaa\\x16\\x81\\x4b\\x5a\\x38\\x14\\x7e\\\n\\x70\\x77\\x39\\x7c\\x46\\x86\\x8c\\xe1\\x06\\x54\\x18\\x4e\\x23\\xe6\\xb2\\x69\\\n\\x50\\x06\\x01\\x21\\x0e\\xb2\\x3d\\x4c\\x42\\x60\\x11\\x7b\\xaa\\x7d\\xb0\\xba\\\n\\x44\\xbb\\x7f\\xda\\xc0\\xf2\\x23\\xed\\xdc\\x1e\\x97\\x0c\\xb8\\x08\\x36\\x1c\\\n\\x73\\x27\\xa8\\xba\\xf0\\xf9\\xd0\\xee\\x70\\xd0\\xe9\\x86\\x9d\\x4d\\xad\\xaa\\\n\\x41\\xe4\\x6a\\xa8\\x86\\x8a\\x0d\\xdf\\xc1\\x81\\x9f\\xdf\\x24\\xa4\\xd5\\x0c\\\n\\x31\\x49\\x99\\x44\\x76\\x75\\x9c\\xa8\\xb2\\x95\\x88\\x49\\xce\\x24\\x5a\\xe1\\\n\\xe7\\x41\\x39\\x31\\x07\\xe3\\x6e\\xaa\\x61\\x2f\\xab\\xb6\\x5f\\x57\\xdf\\x02\\\n\\xcd\\xa4\\x27\\xb9\\x84\\x68\\xc6\\x7f\\x7c\\x28\\xfc\\x35\\x8f\\xe8\\x58\\x62\\\n\\xd8\\xcd\\x1f\\x92\\x35\\x83\\xda\\xea\\xde\\xa9\\x06\\x90\\x01\\x32\\x1e\\xdb\\\n\\xdd\\x06\\xfd\\xb2\\x3a\\x0e\\x00\\x2d\\xe4\\x5f\\xa6\\xc3\\x8c\\xeb\\xf7\\xbb\\\n\\x3c\\x30\\x77\\xa5\\xb0\\xd5\\x4a\\x03\\xd4\\xc7\\x94\\x22\\xac\\x79\\xe6\\x2c\\\n\\xa8\\x22\\xae\\xe5\\xa5\\x06\\xae\\x9e\\x95\\x87\\x34\\xd7\\xdd\\x3b\\xca\\x60\\\n\\x11\\xf9\\x32\\xa8\\x55\\xc0\\x17\\x32\\x6b\\xe8\\x19\\x64\\x68\\x7b\\x06\\xe9\\\n\\x45\\x8c\\x25\\xea\\x1a\\xca\\x39\\xaa\\xf0\\xba\\x5d\\x84\\x20\\x17\\x41\\x31\\\n\\x51\\x6c\\x95\\xe2\\x58\\x42\\xab\\xba\\x8b\\x29\\x07\\x15\\x63\\x33\\x06\\x9e\\\n\\x2a\\x26\\x2a\\x8d\\x23\\x12\\x81\\xbb\\xc7\\xd9\\x61\\x62\\x9f\\x8e\\x33\\xef\\\n\\xbc\\x84\\xf5\\x7b\\x91\\x07\\x1e\\xf9\\x91\\x12\\x96\\x48\\x6c\\x45\\x47\\x6b\\\n\\x26\\x6e\\xaa\\x7e\\x7f\\x68\\x0c\\xe9\\x45\\x1c\\x16\\x9d\\x86\\x4b\\x56\\x6c\\\n\\x22\\x24\\xad\\x73\\x37\\xec\\x87\\x6d\\x4d\\xda\\x0c\\xdb\\xd8\\x72\\xd9\\x3d\\\n\\x12\\x58\\x62\\xd7\\x7e\\xc4\\x28\\xdd\\x00\\xb2\\x1f\\x00\\xb8\\x04\\x07\\x7b\\\n\\x91\\xb6\\xd8\\x24\\x32\\xf4\\x4d\\x02\\x1b\\x39\\x46\\x97\\xec\\x68\\x12\\xd9\\\n\\xe7\\x6e\\x25\\x26\\x9b\\xc9\\x46\\xf6\\xee\\xc6\\xc3\\xe0\\xac\\x2b\\x07\\xb4\\\n\\xe6\\xd0\\x5c\\xbe\\x07\\x6a\\x76\\xfe\\x01\\xb5\\x7b\\x56\\x29\\x6e\\x8d\\x94\\\n\\x95\\x53\\x8b\\x7d\\x1e\\xb1\\x24\\x3a\\xf0\\xaa\\x17\\xb4\\x28\\x2a\\xaa\\xca\\\n\\x78\\xe8\\x64\\x3b\\x8c\\xed\\xd1\\x91\\xb0\\x78\\x67\\xab\\xe2\\x1d\\xf4\\x2b\\\n\\xa1\\x1a\\x4f\\x07\\x2a\\x13\\x0e\\xbd\\xe9\\x3d\\x58\\xfb\\xec\\xd9\\xc4\\x19\\\n\\x43\\xe8\\x21\\x37\\x1f\\x59\\xa1\\x5c\\x6f\\x10\\xcb\\x04\\x7a\\x91\\x15\\x96\\\n\\x8f\\xb6\\xd2\\x71\\xab\\x2c\\x5c\\x8a\\xa7\\x11\\x1b\\x92\\x88\\x92\\x69\\x83\\\n\\x47\\xb8\\x9d\\x3a\\xf5\\x1a\\x43\\xbe\\x02\\x3f\\x13\\xb1\\xf5\\xd7\\xb3\\x62\\\n\\x09\\x31\\xfc\\x1c\\xd4\\x71\\x90\\x48\\xa4\\x4c\\xa2\\x1f\\x3a\\x54\\x6b\\xab\\\n\\x4c\\xe2\\xb0\\xa2\\xdf\\x45\\x4f\\x84\\xcc\\x5f\\x88\\xac\\x70\\x6d\\x20\\x9f\\\n\\x06\\x7b\\xc8\\x0c\\x69\\x04\\x49\\x08\\x9c\\x96\\x9e\\x04\\x3f\\x8d\\xea\\x29\\\n\\xa8\\x11\\x1f\\x93\\x92\\x43\\xe7\\xad\\x24\\x21\\x2a\\x2d\\x72\\xa2\\xc0\\x74\\\n\\x20\\x2f\\x61\\x25\\x0b\\xb0\\x9b\\xb4\\x22\\x69\\x6c\\x21\\x04\\xf2\\xa7\\xdc\\\n\\x06\\x5d\\x8e\\x9f\\x2e\\x74\\x9b\\xb9\\xfe\\x9f\\xde\\x39\\x8c\\x89\\x18\\x6e\\\n\\x24\\xa1\\xe5\\x36\\xdc\\x38\\xf4\\x38\\x7c\\x04\\x90\\xac\\x9e\\xef\\xd7\\x85\\\n\\x2c\\x77\\xb2\\xf1\\x2e\\xe3\\xb1\\x10\\xf3\\xd2\\x38\\xc9\\x8e\\x43\\x61\\x1a\\\n\\xd4\\x41\\x40\\x88\\x83\\xf8\\x09\\x8b\\xf6\\xb0\\xd4\\x69\\x05\\x4e\\xae\\x03\\\n\\xaf\\x79\\x09\\x52\\x7a\\x8e\\xe4\\x5c\\xf1\\x3f\\x9c\\x4d\\x8c\\xd1\\xed\\x6f\\\n\\x39\\xfa\\x35\\x30\\xd4\\x72\\x1b\\xff\\xd4\\xf4\\x4c\\x2e\\x02\\xa8\\x93\\x85\\\n\\x64\\xe5\\x38\\xe2\\x18\\x8f\\x4f\\xb9\\x14\\x87\\x81\\x54\\x85\\x41\\x2e\\xc2\\\n\\xe2\\xd2\\x25\\x0b\\x70\\x10\\x2f\\x61\\x25\\x92\\x1e\\x96\\x90\\x23\\x43\\x71\\\n\\xc5\\xd1\\x58\\xa1\\x10\\xb0\\x91\\x49\\x69\\xb4\\x60\\x80\\x43\\x0b\\xbe\\x50\\\n\\xd6\\xea\\x86\\xcb\\xff\\x3e\\xc0\\x90\\x16\\x25\\x2b\\x3e\\x84\\xd4\\xb9\\xb6\\\n\\xbf\\xc5\\x05\\xcf\\xed\\x3f\\x6a\\xe1\\x02\\x4b\\xe1\\x92\\x56\\xee\\xf8\\x6b\\\n\\x80\\x3a\\x95\\x50\\x07\\x7b\\x36\\x57\\xe4\\x1e\\xe4\\x20\\xbe\\xc0\\x4b\\x58\\\n\\x18\\x51\\x88\\xe1\\xf8\\x32\\xa1\\xd7\\xe4\\x21\\x10\\x97\\x96\\x4b\\x6c\\x45\\\n\\x7d\\x2b\\xb8\\xde\\x10\\x49\\xeb\\x3c\\xf2\\x35\\x30\\xd8\\x42\\x66\\x79\\x25\\\n\\xd3\\x54\\xc1\\x10\\xe0\\x2a\\x97\\xb2\\xf1\\x58\\xd2\\xea\\x57\\xb3\\x4d\\x73\\\n\\x93\\xd3\\xac\\x0c\\xd1\\xb2\\x0f\\xc6\\x3d\\x82\\x84\\x95\\x16\\xc7\\xcf\\x70\\\n\\xd1\\x02\\x9a\\x56\\xf5\\x4c\\xee\\x36\\x18\\x46\\xdf\\xbb\\x14\\x1c\\x44\\x79\\\n\\x92\\x2f\\xd4\\x05\\xf9\\x4a\\xc5\\x17\\x9f\\x5e\\x53\\x06\\x01\\x21\\xd2\\xba\\\n\\xdb\\x5e\\x0a\\xab\\x9f\\x9a\\xc8\\xa8\\x67\\x28\\x53\\x12\\xcd\\x25\\x10\\x81\\\n\\x60\\xdc\\x23\\x4c\\x58\\xea\\xda\\x38\\x0b\\x94\\x31\\xaa\\xcf\\x93\\xbb\\x0d\\\n\\x0a\\x4a\\x5a\\x51\\x0d\\x8e\\x8e\\x95\\x0f\\x24\\xad\\x52\\xa7\\x8b\\x71\\x72\\\n\\x51\\x57\\xb4\\x11\\x56\\x3d\\x76\\x32\\x34\\x11\\x5d\\x32\\x1a\\x94\\x47\\x20\\\n\\x2d\\x08\\xf7\\x08\\x12\\x56\\x27\\xda\\xc3\\x52\\xbe\\x25\\x02\\x72\\xcc\\xab\\\n\\xdc\\x0a\\x97\\xfd\\xf2\\x20\\x58\\xbd\\x2e\\x48\\x26\\xce\\x1a\\xc6\\xdc\\xb7\\\n\\x0c\\x62\\x92\\xd5\\x5d\\x06\\x13\\x20\\x02\\x3d\\x0d\\x81\\x00\\x4b\\x5a\\x48\\\n\\x56\\x57\\x90\\x39\\xc5\\x62\\xb2\\xc7\\xd0\\x54\\xbe\\x1b\\xfe\\x22\\xa4\\xa5\\\n\\x97\\xef\\xc7\\x10\\x62\\x9b\\xfa\\x76\\x6a\\xbc\\xf0\\xe8\\x4e\\x90\\xb0\\xd2\\\n\\x83\\x24\\x32\\x35\\x1a\\x06\\x11\\x1e\\xc9\\xea\\xe6\\xc5\\x33\\xe0\\xb8\\x1d\\\n\\x5f\\xc1\\xb5\\x3f\\xdc\\xc3\\x90\\x56\\x52\\xee\\x31\\x30\\xfa\\xbe\\xa5\\xcc\\\n\\xba\\x43\\x83\\x88\\x49\\xc5\\x20\\x08\\x20\\x69\\x9d\\xb9\\xbe\\xa8\\x9d\\xac\\\n\\x58\\x50\\x5a\\xeb\\x0e\\xc1\\xea\\x27\\x27\\x42\\xf5\\xb6\\x5f\\xd8\\x4b\\x74\\\n\\xaf\\x00\\x02\\xb2\\x86\\x84\\x19\\xda\\x58\\xf7\\x55\\xa0\\x7a\\xe6\\xcb\\x82\\\n\\x25\\xab\\x44\\x67\\x9b\\x95\\x80\\xa1\\x45\\x2b\\x18\\xd2\\xb2\\x10\\x57\\x5c\\\n\\x48\\x5a\\xc7\\x3d\\xf8\\x2b\\x24\\x13\\xdf\\x7e\\x34\\x18\\x07\\x81\\x46\\x81\\\n\\xb9\\x44\\x77\\x73\\x1d\\xac\\x25\\x6b\\x44\\x0f\\xad\\xfd\\xca\\x38\\xc2\\x9a\\\n\\x5c\\x92\\x60\\xdc\\x23\\xd8\\xc3\\xca\\x4c\\x10\\xee\\x96\\x99\\x1c\\x0f\\x5d\\\n\\xc5\\x0f\\x24\\x2b\\x56\\x98\\xf2\\x4e\\x3d\\xc0\\x47\\xec\\x9e\\x63\\x40\\x5f\\\n\\x76\\xc7\\x3e\\xf0\\x53\\x48\\xe5\\x52\\x36\\x2d\\xdd\\xeb\\x8b\\x80\\xd7\\xed\\\n\\x84\\x0d\\xf3\\x2e\\x65\\xcc\\xf2\\xe8\\x2b\\x49\\x64\\x94\\x1e\\x8c\\x7b\\x04\\\n\\x09\\x2b\\x2b\\x91\\x12\\x96\\xd2\\xcd\\x2f\\x44\\x56\\xcb\\x87\\x5c\\x03\\x5f\\\n\\x8f\\xb9\\xc3\\xaf\\x38\\xf4\\x34\\x33\\xe4\\x86\\x37\\xa0\\xff\\xf4\\x67\\x74\\\n\\x75\\xcc\\xea\\x27\\x14\\x3d\\xe1\\x45\\x00\\x5f\\xa2\\xc7\\x7b\\x67\\x41\\xe2\\\n\\xe7\\x77\\xc3\\xee\\xaf\\x43\\x2f\\xbb\\xe2\\xcd\\x84\\x5e\\x6c\\x47\\x20\\x18\\\n\\xf7\\x50\\xc2\\x6a\\x87\\x49\\xdd\\x83\\xf4\\xfa\\x12\\x66\\xce\\x8a\\x1d\\x06\\\n\\xb2\\xa5\\x2d\\x1f\\x72\\x6d\\x07\\xb2\\x62\\xef\\xe1\\xbe\\xc7\\x69\\xb3\\x61\\\n\\xd4\\x3d\\x8b\\xe9\\x64\\x3c\\x17\\x14\\x03\\x1d\\xe3\\x0b\\x34\\xb7\\xa0\\x33\\\n\\x5c\\x90\\xd3\\x89\\x59\\xc6\\x93\\xf6\\xc3\\x1c\\xd8\\xfa\\xde\\x9d\\x9a\\x5a\\\n\\x6e\\x35\\x10\\x1c\\x8a\\x88\\x22\\x8b\\xb0\\xd2\\xc9\\xa7\\xc5\\x00\\xcf\\x51\\\n\\x8a\\x08\\x13\\xad\\x99\\x54\\x27\\x75\\x85\\x0d\\xf9\\xa7\\xf9\\x55\\xbf\\x8d\\\n\\xac\\x42\\x7b\\x64\\x4e\\xef\\x3f\\x1e\\x8e\\x7f\\xf8\\x0f\\xc8\\x1c\\x3c\\xc9\\\n\\x2f\\x3d\\x3d\\xd1\\x1f\\x01\\x24\\xab\\xa9\\x59\\x29\\x8c\\x20\\xac\\x72\\x69\\\n\\xce\\xea\\x37\\xa1\\xf0\\xd5\\x2b\\x19\\x93\\x3a\\xfa\\x4b\\x68\\x2e\\x09\\x90\\\n\\x73\\x90\\x7b\\x84\\x82\\x60\\x0f\\xcb\\x46\\xf4\\xe3\\x73\\x92\\xe8\\xb0\\x50\\\n\\x08\\x38\\xc9\\xd7\\x89\\xcd\\xef\\x0f\\xc7\\x3d\\x04\\xbf\\xf5\\x3b\\x9f\\x49\\\n\\x2a\\x96\\xac\\xd8\\x72\\xd0\\x84\\xf0\\xc8\\x3b\\xbf\\x86\\x21\\x33\\xdf\\xa6\\\n\\xbd\\x2d\\x16\\x14\\x03\\xec\\xb7\\x34\\xfa\\xdb\\x24\\x63\\x49\\xab\\xdb\\xb6\\\n\\x45\\xb0\\xee\\xf9\\x73\\xc1\\xdd\\xd2\\x60\\x00\\x29\\xcd\\x23\\x02\\x72\\x0e\\\n\\x72\\x8f\\x50\\xe0\\x35\\xe0\\xc7\\x46\\xfe\\xe7\\x72\\x17\\xac\\xa1\\xa6\\x92\\\n\\x59\\x38\\x94\\xd9\\x13\\xe3\\x7b\\x43\\xf7\\xfd\\x00\\x1b\\x7b\\x4e\\x94\\x9d\\\n\\x9f\\xab\\xb1\\x06\\xb6\\x7f\\x74\\x3f\\x94\\xfc\\xfa\\x96\\xec\\x3c\\x68\\x42\\\n\\xe5\\x10\\xb8\\x3e\\x37\\x0d\\xee\\xcd\\xf7\\xd7\\x9f\\x6b\\x22\\x5f\\x15\\x67\\\n\\x6c\\x29\\x81\\xed\\xe9\\x03\\x60\\xe4\\x1d\\x5f\\xa9\\x6e\\x66\\x5a\\xb9\\xda\\\n\\xe8\\x9b\\xd3\\xa8\\x5c\\x2b\\xfc\\xe7\\x34\\x61\\xa7\\x20\\x82\\x3d\\x2c\\x14\\\n\\xbb\\x6b\\x5b\\x4f\\x57\\xdf\\x1a\\x44\\x5a\\xe9\\xa4\\xa7\\x15\\x0e\\x59\\x21\\\n\\x1c\\x8e\\xc4\\x34\\x18\\x74\\xed\\x2b\\x44\\x67\\x6b\\x19\\x24\\xe4\\xf4\\x89\\\n\\x34\\x84\\x4c\\x57\\x1f\\x56\\xb9\\x94\\x2b\\x38\\xdb\\xd3\\xca\\x3a\\xb4\\x09\\\n\\xfe\\x7a\\xfc\\x64\\xc6\\xe0\\x21\\xf7\\x3e\\x3d\\xe6\\x47\\x20\\x14\\xe7\\x04\\\n\\x25\\xac\\xdc\\xe4\\xa0\\xb7\\xf9\\x4b\\xa4\\x57\\x35\\x43\\x00\\xe7\\xb6\\x4e\\\n\\x78\\x74\\x2d\\xf4\\x27\\xe6\\x4e\\x62\\x53\\xa9\\x6d\\xa6\\x60\\xc0\\xab\\xed\\\n\\xd0\\x96\\x8f\\xb4\\x96\\x11\\x27\\x17\\x7b\\x9a\\x5b\\xa1\\xe9\\xd0\\x2e\\x46\\\n\\x2b\\xbe\\xbe\\x78\\x53\\x30\\x11\\xe9\\x3d\\x82\\x40\\x28\\xce\\x09\\xca\\x48\\\n\\xdd\\x53\\x85\\xc7\\x92\\x14\\x5d\\x7e\\x04\\x50\\x75\\xa1\\x73\\xcd\\x6e\\xfe\\\n\\x9b\\x2a\\x5c\\x45\\x3f\\x78\\x3d\\x26\\xce\\x86\\xf1\\x73\\xb6\\xc2\\x80\\xcb\\\n\\x9f\\x83\\x58\\x62\\x01\\x82\\x86\\xa3\\x08\\xe0\\x87\\x0a\\x74\\x23\\x76\\xd2\\\n\\x33\\xbb\\x18\\x27\\x1a\\x47\\xef\\x28\\x7f\\xc4\\x25\\xad\\x2f\\x89\\xeb\\xb0\\\n\\xfb\\x76\\x96\\x01\\xeb\\xe1\\xc5\\x79\\xf8\\x20\\xac\\x7a\\xe2\\x54\\xa8\\xd9\\\n\\xbe\\x52\\xf9\\x82\\x23\\x28\\xc7\\x50\\x9c\\x13\\x74\\x0e\\xab\\xaa\\xc9\\x07\\\n\\x97\\x7d\\x7c\\xd4\\x88\\x5c\\x04\\xe1\\xa2\\x4a\\x55\\x58\\x3d\\x2b\\xaf\\xc5\\\n\\x0e\\xff\\x3b\\xf3\\x75\\x28\\x4b\\xeb\\xad\\x4a\\x39\\xc1\\x32\\x45\\x67\\x0f\\\n\\x38\\xb7\\xb5\\xe7\\xdb\\xa7\\xa1\\xa5\\xba\\x38\\x58\\xd4\\xc8\\xbd\\x47\\x86\\\n\\xdd\\x39\\x23\\xcf\\x61\\xbc\\x30\\xa7\\xf4\\x18\\xd6\\x5e\\x4f\\x1f\\x59\\x49\\\n\\xb0\\xf9\\xad\\xd9\\xaa\\xcf\\xfd\\x9d\\x94\\x96\\x08\\xbf\\xd4\\x34\\xb6\\x93\\\n\\x55\\xbb\\x00\\xe4\\xc0\\x6a\\x8f\\x85\\xa1\\xb3\\xde\\x87\\xec\\xe1\\x53\\xb9\\\n\\x97\\xe9\\xf1\\x11\\x04\\x16\\x5e\\x14\\x03\\xe9\\x41\\x94\\xd6\\x83\\x12\\x16\\\n\\xe6\\x71\\xc1\\x42\\x27\\x34\\x50\\xce\\x0a\\xf9\\x40\\xb1\\x64\\xc5\\xea\\x59\\\n\\xd5\\xc7\\xa5\\xeb\\x46\\x5a\\x28\\x2c\\x12\\x57\\xe9\\xef\\x0b\\xc9\\xcb\\xf9\\\n\\x36\\x1c\\xde\\xf5\\x47\\x48\\xf9\\x23\\x21\\x82\\x85\\xac\\x14\\xe8\\x72\\xdc\\\n\\x25\\xd0\\x73\\xea\\xbd\\x90\\xd4\\xa5\\x9f\\x60\\x95\\x76\\x7e\\xf6\\x2f\\x42\\\n\\xe8\\x4f\\x09\\xde\\x57\\xfd\\x86\\xc5\\xca\\xcc\\x41\\xe6\\x8e\\xbb\\x52\\xf5\\\n\\xa2\\xcc\\x54\\x40\\x12\\xb1\\xe3\\xfe\\xe9\\x74\\x01\\x53\\xa3\\x47\\x2a\\xc2\\\n\\xeb\\x35\\x87\\x5b\\xc9\\x7c\\x32\\x2c\\xdc\\x54\\xce\\x76\\x6c\\xb9\\x77\\xe8\\\n\\x31\\x8b\\x40\\x20\\x59\\xe1\\xf5\\xe4\\x96\\x6a\\x18\\x42\\xbe\\x06\\xea\\xd1\\\n\\xcb\\xc2\\xf2\\xd1\\xa9\\x67\\xde\\xf8\\xab\\x99\\x0d\\x2d\\x0b\\x94\\xfe\\xf6\\\n\\x3e\\x43\\x60\\xe8\\xed\\x26\\xd2\\x42\\x5c\\x46\\x0f\\xc8\\x19\\x35\\x8d\\x0c\\\n\\x8d\\x67\\x91\\x65\\x4d\\xf9\\x21\\xab\\xd7\\xf7\\xfc\\x7f\\x93\\x39\\xbf\\x2e\\\n\\xb0\\xf5\\x7d\\xb2\\xba\\xa0\\xa3\\x5b\\xce\\x90\\xe9\\xc3\\x8d\\x80\\xc4\\x1a\\\n\\xd3\\x89\\xdf\\xd2\\x6c\\xb8\\x79\\x9b\\x39\\x3d\\x72\\x4d\\xa8\\x10\\xb2\\x87\\\n\\xf5\\xca\\x5f\\x6e\\xf8\\x72\\xab\\x27\\x54\\x3e\\x51\\x7b\\x9f\\x8f\\xac\\x10\\\n\\x0c\\xa9\\x7a\\x56\\x5a\\x00\\x88\\x3e\\x73\\x6b\\x76\\xac\\x64\\xc8\\xab\\x6c\\\n\\xf5\\x67\\xe0\\x69\\xd1\\xce\\x19\\xab\\xd2\\xf5\\xc3\\xc5\\xe1\\xd9\\x23\\xce\\\n\\x26\\x43\\xab\\xb3\\x20\\xa5\\xfb\\x10\\x59\\xd9\\x97\\xad\\xf9\\x82\\x28\\x78\\\n\\x5e\\xc5\\xf8\\x4e\\x94\\x95\\x81\\x8c\\x44\\x48\\x56\\x93\\xaf\\x7b\\x01\\x7a\\\n\\xf5\\x1a\\x0a\\xbb\\x3b\\x0b\\xdb\\xf4\\x97\\x91\\xb5\\xe9\\x93\\x9c\\x33\\xc0\\\n\\x06\\x37\\x1e\\x1b\\xbc\\x0f\\x15\\x92\\xb0\\xa8\\x17\\x68\\xe1\\xe7\\xc0\\x4c\\\n\\x64\\x15\\x58\\x0b\\x1c\\x32\\xd6\\xee\\x5d\\xc3\\x98\\x46\\xa9\\xd9\\xfe\\x2b\\\n\\x1c\\x26\\x4e\\x4d\\x3d\\xad\\x4d\\x81\\xd1\\x0c\\x73\\x8e\\x2f\\x7a\\x5a\\xbf\\\n\\xf1\\x84\\xa4\\xa6\\x32\\x24\\x85\\x3e\\x1e\\x95\\x08\\x68\\x1a\\x66\\xfd\\xff\\\n\\x2e\\x20\\x66\\x8f\\xdb\\x2c\\x67\\x28\\x91\\xa7\\x60\\x1e\\x64\\x6e\\x6d\\xd2\\\n\\xd5\\xcf\\xc1\\x63\\x07\\x3e\\x81\\xb8\\xd6\\x06\\x78\\x79\\xf2\\x3c\\xd8\\xdd\\\n\\x65\\x94\\x60\\xf4\\x68\\xbb\\x21\\xe4\\xed\\x99\\x8b\\x43\\x48\\xc2\\xda\\x57\\\n\\xe3\\x85\\x1b\\xbf\\x6a\\x33\\x5a\\xc6\\x4d\\x48\\x8f\\x01\\xfa\\x95\\xfc\\x09\\\n\\x33\\x97\\xdd\\x0c\\x0e\\xe2\\xd9\\x98\\x0d\\x46\\xec\\x59\\xb1\\xb2\\x05\\xdb\\\n\\xa3\\xcb\\x78\\x24\\x30\\x24\\x2f\\x7c\\x89\\xeb\\x8a\\xd6\\x83\\xab\\xa1\\x2a\\\n\\x58\\x12\\xd5\\xee\\x59\\xc9\\xc2\\xef\\xa4\\x2e\\xfd\\x21\\x89\\x18\\x35\\x44\\\n\\x73\\x3b\\x49\\xb9\\x03\\x21\\xb5\\xcf\\xb1\\xe0\\x48\\x48\\x55\\xa5\\xcc\\xfa\\\n\\xe2\\xbf\\x19\\xe7\\xb6\\xf8\\x25\\x4f\\xcd\\x30\\xf1\\xf2\\x27\\xe1\\x89\\x43\\\n\\xdf\\x40\\xa7\\xa6\\x0a\\xa6\\x18\\xa7\\x3d\\x9e\\x92\\x16\\x07\\xf0\\x57\\xa6\\\n\\x39\\x20\\x3f\\x2d\\xa8\\xe2\\x02\\x84\\x24\\x2c\\x8f\\xd7\\x07\\xe7\\x2d\\x6c\\\n\\x05\\x27\\xf5\\x5c\\xcf\\x81\\xf6\\xe8\\x61\\xbf\\x03\\x7f\\xc0\\xcc\\xe5\\xb7\\\n\\x30\\xa4\\x65\\x56\\xb2\\x3a\\x5a\\x1b\\xff\\x23\\x57\\xd3\\x61\\xa2\\x43\\xb4\\\n\\x9b\\xb1\\xae\\x19\\xb8\\x6f\\x25\\x2e\\xe7\\xe5\\x06\\xfc\\x52\\x66\\x8b\\x4f\\\n\\x66\\xdc\\xdb\\x23\\x09\\x25\\x76\\x29\\x20\\x6e\\xef\\x09\\x31\\x31\\x04\\x35\\\n\\x80\\xcc\\x43\\xf5\\x24\\x16\\x2a\\x82\\x3f\\xb8\\x72\\xcb\\x16\\x4a\\xd7\\x5c\\\n\\x59\\x04\\x6b\\x9e\\x99\\x0a\\x4d\\x65\\x3b\\x85\\xa2\\x84\\x75\\x7d\\xc0\\xe5\\\n\\xcf\\xc3\\x65\\x5d\\x52\\xe1\\xa2\\xdf\\x1f\\xf7\\xcb\\x87\\x92\\x56\\x1b\\x1c\\\n\\xb1\\x64\\x24\\xf8\\xf9\\xf4\\x98\\xa0\\xcb\\x72\\x30\\x66\\x48\\xc2\\xc2\\x48\\\n\\xf7\\x2e\\x69\\x85\\xc2\\x32\\x3a\\xf1\\x8e\\x58\\xf0\\x05\\x24\\xad\\x3e\\x65\\\n\\x6b\\x61\\xd1\\xa8\\x9b\\xf9\\x6e\\x47\\xec\\x35\\x8f\\xb3\\x09\\x3c\\xce\\x46\\\n\\x70\\x3b\\x1b\\xc8\\xbe\\xed\\xd8\\x73\\xe4\\xd8\\xeb\\x71\\x81\\x2d\\x36\\x81\\\n\\x90\\x52\\x0a\\x43\\x4c\\xf6\\xf8\\x24\\xb0\\x1d\\x39\\xb6\\xda\\x85\\x97\\x5e\\\n\\xe8\\x09\\x56\\x2b\\xe9\\x51\\xae\\x7b\\xee\\x1c\\xa8\\xdd\\xb3\\x5a\\x51\\x31\\\n\\x0a\\x88\\xa7\\xef\\x9e\\xa7\\xb7\\x99\\x0f\\x3a\\xb5\\xf0\\x4d\\x38\\x67\\xd5\\\n\\x73\\x7e\\xf9\\x53\\xd2\\x02\\x18\\xd2\\xd9\\x02\\x73\\xa6\\x90\\xcf\\x84\\x21\\\n\\x82\\x28\\xc2\\x7a\\x67\\xbd\\x1b\\x16\\x6e\\xa4\\x13\\xef\\x21\\xb0\\xa4\\xb7\\\n\\x23\\x00\\x01\\x24\\xde\\x0d\\x2f\\x4d\\x87\\xca\\xc2\\x25\\x8a\\xd4\\xa6\\xf7\\\n\\x39\\x0f\\x42\\x9f\\x69\\x0f\\xf8\\xe5\\x45\\x49\\xcb\\x0f\\x0e\\xe6\\x64\\xfa\\\n\\x50\\x1b\\x5c\\x39\\x3c\\xf8\\x84\\x3b\\x46\\x14\\xd5\\xef\\x3e\\x26\\x5b\\x54\\\n\\xb4\\x8e\\x52\\xd0\\x2b\\x14\\x01\\x93\\x21\\x80\\xbd\\xc2\\xe1\\xb7\\x7e\\x0a\\\n\\x5d\\x4f\\xb8\\x22\\x6c\\xc9\\x7b\\x9e\\x71\\x57\\x07\\xb2\\xc2\\x4c\\x7f\\x20\\\n\\x06\\x1b\\xbf\\x0c\\x34\\xd8\\x48\\x1c\\x91\\xc4\\xb9\\x8c\\xfb\\xd1\\x23\\x6c\\\n\\x30\\x42\\x64\\x20\\x96\\x63\\x44\\x31\\xd1\\x80\\xac\\xe8\\xf6\\x04\\x9d\\xd8\\\n\\x52\\x13\\x02\\x6e\\x7a\\x3b\\x92\\x10\\xb0\\xda\\xec\\x30\\xf8\\xfa\\xf9\\xd0\\\n\\xf3\\xcc\\x7b\\x64\\x57\\xab\\xfb\\xa9\\xb3\\xa0\\xe0\\xc2\\xc7\\x04\\xd3\\x73\\\n\\x49\\xcb\\x6d\\xb5\\xc3\\x82\\x89\\xcf\\xc1\\xe6\\xee\\xe3\\x05\\xe3\\x47\\xf2\\\n\\x0d\\xb4\\x26\\x83\\x1c\\x23\\x26\\x84\\xee\\x83\\x91\\x5c\\xd0\\x6d\\x74\\xdf\\\n\\x0c\\x0b\\x6c\\xaf\\x8c\\xbe\\x79\\x2c\\x56\\x75\\x61\\xd9\\xd0\\x19\\xb0\\x62\\\n\\xc8\\x55\\x62\\x30\\xa5\\x71\\x22\\x04\\x81\\x82\\x0b\\x1e\\x25\\x0a\\xa6\\x9d\\\n\\x61\\xdb\\xc2\\xbb\\x25\\x29\\x98\\xa2\\x3b\\x7b\\x5c\\x90\\x1e\\x2a\\x20\\x69\\\n\\xf9\\xc8\\x20\\xe7\\x50\\x6a\\x3e\\x21\\xab\\x93\\x42\\x45\\x8f\\xd8\\xfb\\xc8\\\n\\x2d\\x42\\xae\\xe9\\x03\\x2b\\x2d\\x8a\\xb0\\x30\\xd1\\xf0\\xae\\x56\\x42\\x58\\\n\\xd1\\x35\\x8f\\xc5\\x92\\x15\\x2e\\xb7\\x39\\x77\\x55\\xdb\\x03\\x48\\x49\\x2b\\\n\\xf0\\x11\\x8a\\xec\\x73\\x5c\\x58\\x1e\\x9b\\x92\\x03\\x85\\xaf\\x11\\x72\\x21\\\n\\x1f\\x12\\x42\\x05\\x5c\\x1a\\x34\\xf0\\xaa\\x79\\x60\\x21\\x3a\\x57\\x62\\x02\\\n\\x7d\\x9e\\xda\\xb8\\x45\\x0c\\x56\\x18\\x47\\xd4\\x90\\x10\\x23\\x8e\\x20\\x84\\\n\\x15\\x4d\\x81\\x4b\\x56\\x6c\\xbd\\x91\\xb4\\x7a\\x93\\xaf\\x81\\x34\\x44\\x17\\\n\\x02\\x9d\\xc7\\x5c\\x00\\x23\\xef\\xfa\\x86\\x7c\\xe5\\x4c\\x0e\\x5a\\x71\\x5c\\\n\\x70\\x3d\\x78\\xc6\\xeb\\x9a\\xab\\x64\\x04\\x15\\xca\\x04\\x37\\xa5\\x70\\x8b\\\n\\x68\\x16\\xc2\\x31\\x66\\xbc\\xe8\\xfe\\x98\\x09\\x50\\x0a\\x22\\x22\\x1f\\x59\\\n\\x61\\x74\\xd4\\xb3\\xa2\\xcb\\x29\\x82\\x00\\x17\\xc1\\xb7\\x32\\x06\\x4c\\x80\\\n\\x31\\xf7\\xff\\x40\\x2c\\x87\\xf2\\xaf\\x01\\xcc\\x1c\\x32\\x19\\x86\\xdc\\xf8\\\n\\x8e\\x2a\\x1e\\x8e\\x92\\x9b\\x2a\\x23\\x16\\x59\\xe4\\x14\\xb1\\xf3\\x57\\x08\\\n\\x82\\x68\\xc2\\x72\\xd8\\x2c\\x30\\xb6\\x87\\xe8\\xe8\\xa6\\x05\\x38\\x18\\x59\\\n\\x7d\\x3d\\x26\\xb4\\xc3\\x08\\xd3\\x56\\x9c\\x0a\\x1e\\x12\\x01\\x5c\\xb3\\x78\\\n\\xdc\\x83\\x3f\\x77\\xb0\\xf2\\x9a\\x3e\\xe0\\x64\\x18\\x76\\xf3\\x47\\xcc\\x82\\\n\\xf3\\x90\\x99\\x48\\x8c\\x70\\xe2\\x96\\x0f\\xe0\\x5f\\x1f\\x9f\\x09\\xbd\\x0f\\\n\\xae\\x91\\x98\\xd2\\x1c\\xd1\\x91\\x53\\x90\\x5b\\xc4\\x06\\x49\\x0c\\x34\\xa1\\\n\\xa7\\xa4\\xe8\\x62\\x65\\x30\\x54\\xbc\\x69\\xab\\x9f\\x03\\xd6\\x44\\x0c\\x2b\\\n\\x58\\xa4\\x69\\xb0\\xb3\\xf5\\xa2\\x7b\\xe9\\x08\\xa0\\x35\\x08\\x74\\x72\\xdb\\\n\\xa9\\x67\\xdb\\x1a\\xc0\\xd4\\x3e\\xc7\\xc3\\xf0\\xdb\\x3e\\x05\\x9b\\x23\\x4e\\\n\\x7a\\x66\\x21\\x52\\x20\\x59\\x5d\\xf4\\xfb\\x13\\x10\\xeb\\x6e\\x86\\x9b\\x96\\\n\\xce\\x8e\\x48\\xd2\\x92\\xca\\x29\\x92\\x18\\x08\\xc7\\x9a\\xc9\\xc1\\xcd\\xd5\\\n\\x84\\x68\\x02\\xe3\\xdf\\x7e\\xe3\\x94\\xb9\\xb0\\x3f\\xf3\\x98\\x76\\x41\\x29\\\n\\x59\\xb5\\x43\\x41\\x0f\\x8e\\x20\\x10\\x93\\x9c\\x09\\xa3\\xee\\x5b\\x0a\\x3d\\\n\\x26\\xdf\\x4a\\x3c\\x19\\x7d\\x05\\xf6\\xd8\\x44\\xc5\\xb1\\xc9\\xad\\xda\\x06\\\n\\x17\\x12\\xb2\\x62\\x43\\x24\\x92\\x16\\x72\\x89\\x94\\xf9\\x2b\\xc4\\x42\\x12\\\n\\x61\\xa1\\xfb\\x9d\\x13\\x23\\x7c\\x58\\xd8\\x1c\\x9b\\x02\\x2f\\x9e\\xfe\\x1a\\\n\\x43\\x5a\\x94\\xac\\xd8\\xd7\\x85\\xee\\x03\\x11\\x40\\x92\\xea\\x7f\\xc9\\x1c\\\n\\xb0\\xc7\\xab\\xe3\\xa9\\xa5\\x24\\xa3\\x3f\\x7c\\x15\\xa0\\x5c\\x1a\\x69\\xa4\\\n\\x85\\x5c\\x12\\xcc\\xa5\\x57\\x20\\xe6\\x78\\x2e\\x6a\\x69\\x0e\\x37\\x61\\x61\\\n\\x99\\x97\\xac\\x2d\\x0c\\xfd\\x79\\x97\\x9b\\xc6\\x8c\\xc7\\x0e\\xd2\\x0d\\x77\\\n\\x91\\xd5\\xf4\\x34\\x50\\x04\\xf4\\x44\\x20\\x92\\x97\\xf1\\xcc\\x99\\xe2\\x20\\\n\\x6b\\x08\\x25\\xf5\\x99\\xa4\\xf5\\xb0\\xb0\\xe1\\x06\\xe7\\x58\\xa0\\x4b\\xf0\\\n\\xaf\\xbb\\x7a\\xb6\\xaf\\x62\\x65\\x53\\xb2\\x52\\x0c\\x4a\\x9a\\x51\\x18\\x08\\\n\\x70\\x35\\xe2\\xd9\\x6c\\xb0\\xa7\\x35\\x6d\\xf5\\xf3\\xec\\xa9\\x29\\xf7\\xc8\\\n\\x21\\xc8\\x25\\x52\\x83\\x34\\x7a\\x23\\xb9\\xa3\\x42\\xdc\\xd4\\x7e\\x36\\xa9\\\n\\xe5\\xd0\\xf8\\x14\\x01\\x8a\\x80\\x4c\\x04\\x02\\x49\\xab\\x24\\xbd\\x2f\\xbc\\\n\\x3a\\xe9\\x05\\x99\\xb9\\x19\\x23\\x19\\x72\\x88\\x58\\xe5\\x5a\\xae\\xc4\\x92\\\n\\x09\\x0b\\x13\\x4f\\xea\\x4b\\x6c\\x52\\x9b\\x98\\xb3\\x50\\x75\\x61\\xe6\\xd2\\\n\\x9b\\x21\\xb6\\xb5\\x91\\x8b\\x05\\x3d\\xa6\\x08\\x18\\x16\\x01\\x96\\xb4\\x90\\\n\\xac\\x5e\\x38\\x63\\x01\\x34\\xc6\\xa5\\x19\\x56\\xd6\\x50\\x82\\x21\\x77\\x20\\\n\\x87\\xc8\\x09\\x92\\xe7\\xb0\\xd8\\x42\\x9e\\x5d\\xe9\\x82\\x65\\xbb\\xbc\\xec\\\n\\xa9\\x69\\xf6\\x5c\\x3d\\xab\\x3d\\xd9\\x43\\xe1\\xa5\\x29\\xaf\\x80\\x33\\x46\\\n\\xf9\\xaf\\x3c\\xa6\\x01\\x84\\x0a\\x6a\\x2a\\x04\\xec\\x6e\\x27\\xb8\\x89\\x01\\\n\\x44\\x33\\x87\\x49\\x7d\\xac\\x70\\xe7\\x38\\x79\\x36\\xd1\\x64\\xf5\\xb0\\x10\\\n\\xac\\xb3\\xfa\\xcb\\x63\\x48\\x3d\\x81\\xe6\\x92\\x15\\xca\\xd1\\xab\\x7c\\x23\\\n\\xcc\\x5a\\x72\\x23\\xe0\\x43\\x40\\x03\\x45\\xc0\\x0c\\x08\\x98\\x9d\\xac\\x10\\\n\\xe3\\x70\\xb8\\x43\\x36\\x61\\xf5\\xcd\\xb4\\xc2\\x31\\xd9\\xd2\\x27\\xcd\\xf4\\\n\\x7a\\x28\\x02\\xc9\\x8a\\x95\\x03\\x97\\xda\\x44\\xc2\\x43\\xc0\\xd6\\x87\\xee\\\n\\x29\\x02\\x46\\x46\\x00\\x39\\x03\\xb9\\x43\\x6e\\x90\\x9f\\x92\\x94\\x38\\x7d\\\n\\x88\\x39\\x16\\x17\\x0a\\x91\\x15\\xd5\\xb3\\x92\\xfb\\xd8\\xd0\\x74\\x46\\x44\\\n\\x00\\x55\\x71\\x70\\x6e\\xd6\\xc8\\xcb\\x78\\xc2\\xe5\\x8c\\xb0\\x08\\x6b\\x54\\\n\\x9e\\x15\\x0a\\x88\\x2d\\x1b\\x23\\x07\\x5c\\x38\\x7a\\xf3\\xe2\\x19\\x74\\xb9\\\n\\x8d\\x91\\x1b\\x89\\xca\\x16\\x36\\x02\\x48\\x56\\xb8\\x7c\\x67\\x50\\xf1\\x2f\\\n\\x86\\x5d\\xc6\\x83\\x5c\\x81\\x9c\\x11\\x4e\\x08\\x2f\\x35\\x29\\x79\\xfa\\x30\\\n\\x63\\xcf\\x65\\xd5\\x27\\x64\\xc2\\x4f\\x03\\xfd\\xcd\\xdd\\xd2\\x9e\\x55\\x38\\\n\\x8f\\x0c\\x4d\\x6b\\x34\\x04\\x2c\\x5e\\x0f\\xdc\\x48\\x7a\\x56\\x7d\\x8f\\x2c\\\n\\x90\\x36\\xaa\\x46\\xbc\\x12\\x5c\\x11\\x36\\x61\\x1d\\xd7\\xcd\\x06\\xbd\\xd2\\\n\\x8d\\xdd\\xcb\\x5a\\x32\\x62\\x26\\x2c\\x1a\\x31\\x9b\\x79\\xce\\x28\\x59\\x19\\\n\\xed\\x75\\xa3\\xf2\\x84\\x8b\\x80\\x8f\\x38\\x99\\xdd\\xd2\\x6d\\x9c\\x5f\\x36\\\n\\x46\\x23\\x2d\\xe4\\x08\\xe4\\x8a\\x70\\x83\\x6c\\xb5\\x06\\x6e\\xc1\\xbf\\x17\\\n\\x79\\xe0\\x91\\x1f\\x8d\\xef\\xb8\\xb0\\x80\\x38\\x3e\\xdd\\x91\\x7b\\x1c\\x57\\\n\\x74\\x7a\\x4c\\x11\\x88\\x59\\x12\\xdd\\x2a\\x00\\x00\\x0c\\x45\\x49\\x44\\x41\\\n\\x54\\x18\\x04\\x8c\\xbc\\x8c\\xe7\\xa1\\x93\\xed\\xc4\\x3c\\x55\\xf8\\x84\\x15\\\n\\x76\\x0f\\x0b\\x5b\\x1b\\x05\\x19\\x24\\x43\\xcd\\x5e\\xeb\\x27\\x85\\x92\\x95\\\n\\xd6\\x88\\xd3\\xf2\\xb4\\x44\\x80\\x55\\x2e\\xe5\\x96\\xc9\\xf6\\xb4\\x32\\xea\\\n\\x0f\\x70\\x2f\\x6b\\x7a\\x8c\\xdc\\xa0\\x04\\x59\\xa1\\xd0\\x8a\\x10\\x16\\x66\\\n\\x34\\x73\\x8c\\x39\\xbe\\x18\\xa2\\xac\\x34\\x50\\x04\\x22\\x15\\x01\\x3e\\xd2\\\n\\xfa\\x79\\xe0\\x74\\xa8\\x4a\\xce\\xd3\\xad\\xca\\x4a\\x72\\x83\\x62\\x84\\xd5\\\n\\x37\\xc3\\x0a\\xa7\\x11\\x0d\\x56\\xbd\\x02\\xaa\\x2e\\x50\\x7b\\xeb\\x7a\\xa1\\\n\\x4f\\xcb\\x35\\x12\\x02\\x5c\\xd2\\x5a\\x36\\xf4\\x3a\\xf8\\x66\\xf4\\x6d\\xba\\\n\\x89\\x87\\x9c\\x80\\xdc\\xa0\\x54\\x50\\x64\\x0e\\x8b\\x15\\xa6\\xaa\\xc9\\x07\\\n\\xd7\\x7e\\xde\\x0a\\x4e\\x8d\\xa7\\xb3\\x58\\x3d\\x2b\\x3b\\xf1\\x6a\\xf2\\xf2\\\n\\x94\\x97\\xa8\\xdd\\x75\\xb6\\x41\\xe8\\x3e\\xaa\\x11\\xc0\\x3f\\x70\\x3d\\x7d\\\n\\x10\\xc4\\x92\\x41\\xd7\\x1b\\xe7\\xc5\\x40\\x46\\x82\\x72\\x1f\\xe5\\x94\\xa3\\\n\\x3e\\xf2\\x68\\xa0\\x60\\x97\\x0c\\x09\\x7f\\x62\\x4d\\xca\\x53\\xc6\\x92\\x15\\\n\\x9a\\x35\\x66\\xc6\\xeb\\x4b\\x66\\xd1\\x9e\\x96\\x14\\x00\\x69\\xdc\\x88\\x45\\\n\\x40\\x4f\\xb2\\x42\\x50\\x91\\x0b\\x94\\x24\\x2b\\xcc\\x53\\x51\\xc2\\xc2\\x0c\\\n\\x2f\\x1c\\x64\\x83\\xfc\\x54\\xe5\\x18\\x15\\xf3\\x14\\x0a\\x5c\\xb2\\x62\\xe3\\\n\\x20\\x69\\xf5\\x23\\x5f\\x03\\x69\\xa0\\x08\\x50\\x04\\xf4\\x43\\x00\\x39\\x00\\\n\\xb9\\x40\\xe9\\xa0\\x38\\x61\\xd9\\x89\\x19\\xe5\\x3b\\xc7\\xd9\\x01\\xdd\\x4f\\\n\\xab\\x19\\xf8\\xc8\\x0a\\xcb\\x43\\x3d\\xab\\xef\\x46\\xb6\\xe9\\x5c\\xa9\\x59\\\n\\x3e\\xcd\\x9b\\x22\\x60\\x76\\x04\\x7a\\x94\\x17\\xaa\\xb2\\x8c\\x07\\xdf\\x7d\\\n\\xe4\\x00\\xe4\\x02\\xa5\\x83\\xe2\\x84\\x85\\x02\\x16\\x90\\xc5\\x8d\\xe7\\x0d\\\n\\x54\\x9e\\x5d\\xd9\\xca\\x07\\x23\\x2b\\xea\\x8a\\x8b\\x45\\x89\\xee\\x29\\x02\\\n\\xc2\\x08\\x20\\x59\\xcd\\x5e\\x3c\\x53\\x95\\x65\\x3c\\xf8\\xee\\x23\\x07\\xa8\\\n\\x11\\xd4\\xc9\\x95\\x48\\x7a\\x05\\x59\\xb2\\xa3\\xa5\\x29\\x65\\xaa\\xc1\\xae\\\n\\xc6\\xe3\\x41\\xf3\\x8c\\x44\\x04\\x58\\xb2\\x8a\\x77\\x35\\x2a\\xee\\x42\\x0c\\\n\\xdf\\x79\\x7c\\xf7\\xd5\\x0a\\xaa\\x11\\x56\\xac\\xdd\\x02\\x77\\x11\\x23\\x5d\\\n\\x2a\\xf4\\x0a\\xe1\\x40\\xe6\\x00\\xe2\\xd9\\x66\\x3e\\x34\\x12\\x0f\\x37\\x18\\\n\\x28\\x59\\xa9\\xf5\\x78\\xd0\\x7c\\x23\\x11\\x81\\x7c\\xd2\\xbb\\x42\\xb2\\x62\\\n\\x03\\xab\\x5c\\x1a\\xae\\x95\\x07\\x7c\\xd7\\xf1\\x9d\\xc7\\x77\\x5f\\xad\\x60\\\n\\x7b\\x98\\x04\\xb5\\x32\\xcf\\x4e\\x6a\\x13\\xbc\\xb0\\xcc\\xa7\\x78\\x11\\x75\\\n\\x09\\x59\\xb0\\x2d\\xf7\\x78\\xa8\\x4d\\xc8\\x81\\x45\\xa3\\x6e\\x56\\x3c\\x7f\\\n\\x9a\\x21\\x45\\x20\\x52\\x11\\x28\\xca\\x1e\\x02\\xad\\xf6\\x38\\xe8\\xcf\\xf9\\\n\\x38\\x65\\xf7\\xba\\x61\\xf8\\xde\\x65\\xb0\\x3b\\x67\\x38\\xd4\\x24\\x77\\x95\\\n\\x55\\xf5\\xcb\\x49\\xcf\\x6a\\x62\\x1f\\xf5\\x7a\\x57\\x28\\x94\\xa2\\x7a\\x58\\\n\\x7c\\xb5\\xf4\\xfa\\x7c\\x70\\xff\\x52\\x17\\x6c\\x54\\x81\\xb4\\xf8\\xca\\xa3\\\n\\xd7\\x28\\x02\\x14\\x01\\x71\\x08\\x28\\xb9\\xf6\\x70\\x68\\x67\\x0b\\x3c\\x31\\\n\\x19\\x47\\x54\\xea\\xf5\\xae\\xb0\\x56\\xaa\\x0d\\x09\\x59\\xc8\\xb0\\x02\\xf7\\\n\\x8e\\x77\\x40\\x27\\xe5\\x3d\\x79\\xb3\\x45\\xd0\\x3d\\x45\\x80\\x22\\x20\\x03\\\n\\x01\\xae\\x46\\x3c\\x9b\\xdc\\x6b\\xb1\\x81\\xdb\\x26\\xcd\\x66\\x3c\\xbe\\xdb\\\n\\xf8\\x8e\\xab\\x4d\\x56\\x28\\xa3\\xea\\x84\\x85\\x85\\xa0\\xf2\\xd8\\x3d\\x27\\\n\\x4a\\x37\\x3a\\x9f\\xda\\x50\\x86\\xc9\\x69\\xa0\\x08\\x50\\x04\\x54\\x42\\x80\\\n\\x4b\\x5a\\xcd\\x8e\\x24\\x98\\x77\\xfa\\xab\\x50\\x94\\x3d\\x58\\x52\\x69\\xf8\\\n\\x6e\\x2b\\xad\\x20\\x2a\\x24\\x80\\xea\\x43\\x42\\x6e\\xc1\\x1f\\x14\\xba\\xe1\\\n\\xed\\x75\\x1e\\xee\\x25\\xc1\\x63\\x56\\x75\\x61\\x75\\x9f\\xb3\\xe0\\xb3\\xe3\\\n\\xef\\x13\\x8c\\x47\\x6f\\x50\\x04\\x28\\x02\\xe1\\x23\\x70\\xd2\\xa6\\xf7\\x60\\\n\\x1f\\xf1\\x22\\x25\\x95\\xac\\xae\\x1a\\x61\\x83\\x4b\\x35\\x34\\x95\\xae\\x29\\\n\\x61\\x21\\xac\\x73\\x7e\\x71\\xc1\\x8a\\x3d\\xc1\\xdd\\x83\\xb1\\x64\\x85\\xcb\\\n\\x6d\\x30\\xfc\\x34\\xf0\\x32\\x4a\\x5a\\x0c\\x12\\xf4\\x87\\x22\\x60\\x1c\\x04\\\n\\x4e\\xe9\\x65\\x65\\x86\\x82\\x5a\\x4a\\xa4\\xc9\\x90\\x90\\x5b\\xa1\\xdb\\x4f\\\n\\xb0\\xc3\\x80\\x2c\\xe1\\x89\\xb9\\x40\\xb2\\xc2\\xb4\\x13\\x36\\xbf\\x0f\\x03\\\n\\xf7\\xff\\xcc\\xcd\\x86\\x1e\\x53\\x04\\x28\\x02\\x3a\\x22\\x80\\xef\\x30\\xbe\\\n\\xcb\\x5a\\x07\\xcd\\x09\\x2b\\xc6\\x66\\x81\\x87\\x4e\\x71\\x40\\x16\\x8f\\xef\\\n\\x52\\x3e\\xb2\\x42\\x40\\x50\\xcf\\x6a\\x73\\xf7\\x93\\xb4\\xc6\\x86\\x96\\x47\\\n\\x11\\xa0\\x08\\x70\\x10\\xc8\\xa8\\x3b\\xc0\\x9c\\xe1\\xbb\\x8b\\xef\\x30\\xbe\\\n\\xcb\\x5a\\x07\\xcd\\x09\\x0b\\x2b\\x98\\x16\\x6f\\x81\\x47\\x26\\x3a\\x20\\x29\\\n\\xe6\\x68\\x75\\x83\\x91\\x15\\x5d\\x6e\\x73\\x14\\x27\\x7a\\x44\\x11\\xd0\\x03\\\n\\x81\\xb3\\x57\\x3d\\x0f\\xf7\\x7f\\x7e\\x3e\\x0c\\xaa\\x5c\\xc3\\xbc\\xbb\\xf8\\\n\\x0e\\xeb\\x11\\x74\\x21\\x2c\\xac\\x68\\xcf\\x34\\x2b\\xfc\\xe7\\x34\\x07\\xc4\\\n\\x1d\\xe9\\x55\\x9e\\x5a\\xf8\\x16\\x75\\xc5\\xa5\\xc7\\x13\\x40\\xcb\\xa4\\x08\\\n\\x84\\x40\\x00\\xc9\\xea\\xb4\\xc2\\x37\\x98\\x65\\x3c\\x37\\x2c\\x9e\\x0d\\x9d\\\n\\x8b\\xd6\\x86\\x48\\xa1\\xde\\x6d\\xdd\\x08\\x0b\\xab\\xd4\\x3f\\xcb\\x0a\\x0f\\\n\\x9f\\xea\\x00\\x07\\x91\\xe2\\xfd\\x93\\x1e\\x85\\x2d\\x79\\x27\\xb4\\xd7\\x94\\\n\\x2e\\xb7\\x69\\x87\\x82\\x1e\\x50\\x04\\x74\\x43\\x00\\x97\\xeb\\x20\\x59\\xb1\\\n\\xc1\\xe2\\x6c\\x86\\x92\\xbb\\x67\\x40\\xf3\\x86\\xd5\\xec\\x25\\x4d\\xf7\\x9a\\\n\\x7f\\x25\\xe4\\xab\\xdd\\x1f\\xfb\\x3d\\xf0\\x28\\xf1\\xba\\x63\\x75\\xb7\\xc2\\\n\\x8c\\xe5\\xb7\\x41\\x49\\x7a\\x3f\\xa0\\xc3\\x40\\x3e\\xa4\\xe8\\x35\\x8a\\x80\\\n\\xf6\\x08\\x4c\\x2c\\x7c\\x13\\xa6\\xad\\x7a\\xce\\xaf\\x60\\x4b\\x5c\\x3c\\xe4\\\n\\xce\\x9d\\x0f\\xf1\\xc3\\x46\\xfb\\x5d\\x57\\xfb\\xc4\\x10\\x84\\x85\\x95\\xfc\\\n\\x79\\xaf\\x07\\x9e\\xfa\\x85\\xd8\\x56\\xf6\\xb8\\xc1\\x6b\\xd5\\xfe\\xeb\\x83\\\n\\xda\\x40\\xd3\\xfc\\x29\\x02\\x66\\x44\\x00\\x17\\x34\\xdf\\x37\\xde\\x0e\\x43\\\n\\xfe\\x78\\x13\\x2a\\x5f\\x7a\\xda\\xaf\\x0a\\x7a\\x90\\x96\\xae\\x43\\x42\\x6e\\\n\\xed\\x4f\\xea\\x69\\x83\\x07\\x89\\xef\\x32\\x9b\\x9d\\x92\\x15\\x17\\x17\\x7a\\\n\\x4c\\x11\\xd0\\x0b\\x01\\x9c\\xaa\\x79\\xe8\\x14\\x3b\\xe0\\xbb\\x99\\x36\\xfd\\\n\\x7a\\xc8\\x9c\\x75\\x8f\\x9f\\x28\\xbe\\x96\\x66\\xa8\\xf9\\xe0\\x75\\xbf\\x6b\\\n\\x6a\\x9f\\x18\\xa6\\x87\\xc5\\x56\\x74\\xc3\\x41\\x2f\\x3c\\xfc\\x83\\x0b\\x5a\\\n\\x34\\x76\\x64\\xc1\\x96\\x4f\\xf7\\x14\\x01\\x8a\\x00\\x30\\x1f\\xc3\\x70\\x7e\\\n\\x79\\x58\\x17\\xff\\x3e\\x4d\\xcd\\xc2\\x05\\xed\\x3d\\xad\\xf8\\x11\\xc7\\x41\\\n\\xd7\\x39\\xaf\\x80\\x95\\x0c\\x0f\\xb5\\x0a\\xfe\\xd2\\xa8\\x5c\\x6a\\xcb\\x8e\\\n\\x2d\\x50\\x7c\\xe3\\x25\\xe0\\xae\\xaa\\x10\\x2c\\x09\\x01\\x7a\\x92\\xac\\xfa\\\n\\xe6\\xaa\\x3c\\x08\\x46\\xa6\\x37\\x28\\x02\\x14\\x01\\xc5\\x11\\xc0\\x77\\x0f\\\n\\xdf\\xc1\\x40\\xb2\\xc2\\x82\\xd8\\x9e\\x96\\x1e\\x64\\x85\\xe5\\x6b\\xd6\\xc3\\\n\\x42\\xb2\\x2a\\xb9\\xed\\x6a\\xf0\\xd6\\xd7\\x82\\xa3\\x7b\\x2f\\xc8\\x7b\\xe1\\\n\\x1d\\xb0\\x67\\x64\\xa1\\x0c\\xbc\\x61\\x6f\\x8d\\x17\\x1e\\xfa\\xde\\x05\\x15\\\n\\x47\\xed\\x8c\\xf1\\xc6\\xa3\\x17\\x29\\x02\\x14\\x01\\xe5\\x10\\x40\\xa5\\x50\\\n\\xd4\\x91\\x44\\xb5\\xa3\\x60\\xc1\\xe7\\xf1\\x80\\xc5\\xa6\\xae\\xed\\x2b\\xbe\\\n\\xf2\\x35\\x21\\x2c\\x2e\\x59\\xb1\\x42\\x20\\x69\\x75\\x9b\\xff\\x09\\xd8\\x12\\\n\\x93\\xd8\\x4b\\x1d\\xf6\\x35\\xcd\\x3e\\x78\\x64\\x85\\x0b\\xb6\\x56\\x28\\x6f\\\n\\x00\\xb0\\x43\\x61\\xf4\\x02\\x45\\x20\\xca\\x11\\xc0\\xe5\\x36\\xa8\\xc1\\xae\\\n\\x97\\x52\\xa8\\x18\\xf8\\x83\\xd3\\xa8\\x98\\x1c\\x42\\xc4\\xe1\\x23\\x2b\\x4c\\\n\\x92\\x74\\xe2\\xa9\\x41\\xc9\\x0a\\xe3\\x20\\x70\\x4f\\x4d\\x71\\x00\\x2e\\xb2\\\n\\xa4\\x81\\x22\\x40\\x11\\x50\\x0f\\x01\\x7c\\xc7\\xf0\\x5d\\x33\\x32\\x59\\x61\\\n\\xed\\x55\\x65\\x02\\x21\\xb2\\x4a\\xbb\\x6c\\x06\\x64\\xde\\x74\\xb7\\x28\\xf4\\\n\\x71\\xbd\\x12\\x1a\\x07\\x43\\x33\\x16\\x34\\x50\\x04\\x28\\x02\\xca\\x23\\x80\\\n\\xef\\x16\\xbe\\x63\\x4a\\xad\\x0d\\x74\\xd7\\x54\\x43\\xf1\\xcc\\x8b\\x54\\x51\\\n\\x2e\\x55\\x6d\\x48\\xe8\\x69\\xa8\\x87\\x7d\\x17\\x9f\\x06\\xde\\xda\\x1a\\x3f\\\n\\x84\\xa5\\x90\\x95\\x5f\\x42\\x72\\xb2\\xa6\\xc4\\x0b\\x4f\\xff\\xea\\x82\\xda\\\n\\x96\\xc0\\x3b\\xf4\\x9c\\x22\\x40\\x11\\x90\\x8a\\x00\\x5a\\x0a\\x45\\xe3\\x7b\\\n\\xa3\\x72\\x95\\xeb\\xb7\\x20\\x59\\x95\\xdc\\x76\\x15\\xb4\\xee\\xd9\\x01\\x6a\\\n\\xe8\\x69\\x29\\x27\\x69\\x00\\x5a\\xb6\\xa4\\xe4\\x36\\xbd\\x0d\\x8e\\x8d\\xe7\\\n\\x70\\xc8\\x0a\\xb3\\x47\\x60\\x5f\\x3a\\x3b\\x06\\xd0\\x7e\\x34\\x0d\\x14\\x01\\\n\\x8a\\x80\\x7c\\x04\\xf0\\x1d\\xc2\\x77\\x49\\x49\\xb2\\xf2\\x3a\\x9d\\xed\\x64\\\n\\x85\\x92\\xa1\\x9e\\x96\\xd2\\xcb\\x78\\x54\\x23\\x2c\\x14\\xb8\\xd3\\x99\\xe7\\\n\\x43\\xf6\\xff\\x3d\\x46\\xbe\\x45\\x5a\\x20\\x5c\\xb2\\xc2\\xfc\\x30\\xa0\\x29\\\n\\x56\\x34\\x76\\x8f\\xbe\\xcf\\xd4\\x70\\x21\\xd6\\x56\\x0a\\xfd\\xa5\\x08\\x44\\\n\\x26\\x02\\xf8\\xce\\xe0\\xbb\\x83\\xef\\x90\\xd2\\x66\\x8d\\xad\\xb1\\xb1\\x90\\\n\\x32\\x65\\x9a\\x1f\\x70\\x4a\\x93\\x96\\x6a\\x43\\x42\\xae\\xd4\\x2d\\xdb\\xfe\\\n\\x86\\xb8\\xfe\\xd2\\xec\\x44\\x73\\xd3\\x0b\\x1d\\x6f\\x3a\\xe4\\x85\\x67\\x56\\\n\\xba\\xe0\\x60\\xbd\\x50\\x0c\\x7a\\x9d\\x22\\x40\\x11\\x60\\x11\\x40\\x27\\xa7\\\n\\xe8\\x37\\x70\\x50\\x8e\\xaa\\xfd\\x14\\xe0\\x2a\\x97\\xb2\\x65\\x2b\\x35\\x3c\\\n\\xd4\\x84\\xb0\\x58\\xa1\\xd5\\xd8\\x3b\\xdd\\x3e\\x78\\x67\\xbd\\x07\\xbe\\xd8\\\n\\xe2\\x01\\x2f\\xd5\\x7e\\x50\\x03\\x62\\x9a\\xa7\\xc9\\x11\\xc0\\x5e\\xd5\\xb9\\\n\\xc7\\xd8\\xe0\\xca\\xe1\\x36\\x55\\x9d\\x9c\\x72\\x61\\xe2\\x25\\xad\\xf8\\x04\\\n\\xc8\\xff\\x68\\x39\\xd8\\xd3\\x33\\xb9\\x51\\x25\\x1d\\x9b\\x9e\\xb0\\xd8\\xda\\\n\\xee\\xa8\\xf4\\xc2\\xb3\\x2b\\xdd\\xb0\\xef\\x30\\x65\\x2d\\x16\\x13\\xba\\xa7\\\n\\x08\\xe4\\xa7\\x5a\\xe0\\xce\\x71\\x76\\x28\\xc8\\x54\\xb7\\x57\\xc5\\x87\\x74\\\n\\x20\\x69\\x65\\xdd\\xf5\\x2f\\x48\\x3d\\x77\\x3a\\x5f\\x54\\xd1\\xd7\\xc2\\x26\\\n\\x2c\\x54\\x5d\\x70\\x97\\x1e\\x80\\xa4\\x09\\x93\\x44\\x17\\xaa\\x56\\x44\\x37\\\n\\xe9\\x62\\x7d\\xb2\\xc9\\x03\\x1f\\x16\\x7a\\xc0\\x49\\xd7\\x22\\xaa\\x05\\x33\\\n\\xcd\\xd7\\x04\\x08\\xc4\\x12\\x1b\\x02\\x97\\x0c\\xb1\\xc1\\x85\\x83\\x6c\\x60\\\n\\xd7\\x71\\xb2\\x97\\x25\\x2d\\x25\\xc8\\x0a\\x61\\x0f\\x8b\\xb0\\xda\\xf5\\xac\\\n\\x9a\\x1a\\xa0\\xf3\\xc3\\xcf\\x42\\xf2\\xc9\\x53\\x0c\\xd1\\x94\\x55\\x4d\\x3e\\\n\\x78\\x6b\\x9d\\x1b\\x96\\xef\\x0a\\xee\\x9d\\xc7\\x10\\xc2\\x52\\x21\\x28\\x02\\\n\\x0a\\x23\\x70\\x5a\\x1f\\x2b\\x5c\\x3d\\xc2\\xae\\xf8\\xa4\\xba\\x5c\\x31\\x9d\\\n\\x3b\\xb7\\x41\\x6c\\xdf\\xfe\\x72\\x93\\xfb\\xa5\\x93\\x4d\\x58\\xed\\x64\\x45\\\n\\xd6\\x06\\x32\\x81\\xac\\x2b\\x32\\x12\\x69\\xa1\\x4c\\x3b\\xab\\xbc\\xf0\\xea\\\n\\x2a\\x37\\x6c\\x3a\\x44\\x87\\x89\\x6d\\x8d\\x44\\x7f\\x23\\x19\\x81\\x41\\x39\\\n\\x16\\x98\\x39\\xc6\\x0e\\x7d\\x33\\xb4\\x1f\\xfe\\x69\\x85\\xab\\x2c\\xc2\\xea\\\n\\x40\\x56\\x47\\xa4\\x4d\\xbb\\x62\\x26\\x64\\xce\\xbc\\x53\\x2b\\xd9\\x45\\x97\\\n\\xf3\\x7b\\x91\\x07\\xde\\xdb\\xe8\\x81\\x3d\\xd5\\x94\\xb8\\x44\\x83\\x46\\x23\\\n\\x9a\\x06\\x81\\x5e\\xe9\\x16\\xb8\\x7c\\xa8\\x0d\\xc6\\xf6\\x88\\xfc\\xd5\\x20\\\n\\x92\\x09\\x4b\\x90\\xac\\x24\\x2c\\xb7\\xd1\\xeb\\x49\\xf8\\xb3\\xd8\\x03\\x0b\\\n\\x37\\x78\\x60\\x47\\x15\\x25\\x2e\\xbd\\xda\\x80\\x96\\xab\\x1c\\x02\\x05\\x19\\\n\\x16\\x98\\x4e\\x74\\xaa\\x8e\\xeb\\x66\\x6e\\xa2\\x6a\\x58\\xb9\\x02\\x50\\xd1\\\n\\x5c\\x8c\\xb9\\x65\\x49\\x84\\xe5\\xdc\\xb9\\x15\\x0e\\xdc\\x7a\\x15\\x63\\x22\\\n\\x86\\x0b\\xbb\\x52\\x4a\\xa1\\xdc\\x3c\\xd5\\x3c\\x5e\\x73\\xc0\\x0b\\x0b\\x0b\\\n\\xdd\\xb0\\xa5\\x9c\\x12\\x97\\x9a\\x38\\xd3\\xbc\\xd5\\x41\\xe0\\x98\\x6c\\x42\\\n\\x54\\xc4\\x3d\\xfc\\xa8\\x3c\\xf3\\x0f\\xfd\\x90\\xac\\x0e\\xfe\\xf3\\x56\\xb0\\\n\\x10\\x4b\\xc3\\x62\\x6c\\xc4\\x4b\\x22\\x2c\\xd7\\xc1\\x03\\x70\\xe0\\xe6\\x2b\\\n\\xc0\\x7d\\xa8\\xb4\\xbd\\x25\\xcc\\x46\\x56\\xed\\x82\\x93\\x83\\x9d\\x44\\x15\\\n\\xe2\\x9b\\x6d\\x1e\\xf8\\x69\\xaf\\x17\\x5a\\x3d\\xdc\\x3b\\xf4\\x98\\x22\\x60\\\n\\x2c\\x04\\x62\\x48\\x27\\x6a\\x42\\x4f\\x2b\\x9c\\xd5\\xdf\\x06\\x7d\\x75\\x50\\\n\\x51\\x50\\x03\\x0d\\x96\\xac\\xc0\\xed\\x62\\xb2\\x17\\xa3\\x5c\\x2a\\x89\\xb0\\\n\\x30\\x57\\x2e\\x69\\x99\\x99\\xac\\xb8\\x0d\\x50\\xef\\xf4\\xc1\\xb2\\x9d\\x1e\\\n\\xf8\\x76\\xbb\\x87\\x6a\\xcd\\x73\\x81\\xa1\\xc7\\xba\\x23\\x80\\xda\\xe9\\x53\\\n\\xfb\\xd9\\x60\\x52\\x5f\\x1b\\x24\\xc7\\x46\\xd6\\x1a\\xda\\x9a\\x0f\\xde\\x80\\\n\\xca\\x79\\x4f\\xf9\\x61\\x1c\\x8a\\xb4\\x24\\x13\\x16\\xe6\\x8e\\xa4\\x55\\xbf\\\n\\x62\\x31\\xa4\\x93\\x79\\xab\\x48\\x0a\\x3e\\x9f\\x0f\\xfe\\x26\\x5f\\x14\\x7f\\\n\\xda\\xe3\\x81\\x5f\\x8b\\xbc\\x50\\xef\\x8c\\xa4\\xda\\xd1\\xba\\x98\\x05\\x81\\\n\\xe4\\x58\\x80\\x13\\x7b\\x58\\x61\\x42\\x2f\\x1b\\x0c\\x26\\x5f\\xfe\\x2c\\x1c\\\n\\x03\\x02\\x66\\xa9\\x83\\x58\\x39\\x59\\x3d\\x2d\\x6e\\xfc\\x60\\xa4\\x25\\x8b\\\n\\xb0\\xb8\\x99\\x47\\xea\\x31\\x2a\\xa1\\xae\\x2b\\xf5\\x12\\xf7\\x63\\x5e\\xf8\\\n\\x9d\\x90\\x57\\x33\\x55\\x44\\x8d\\xd4\\xa6\\x36\\x44\\xbd\\xe2\\x89\\xa2\\xe7\\\n\\x58\\x42\\x52\\x27\\x91\\x61\\xdf\\xc8\\xae\\x56\\xb0\\xe9\\xa8\\xec\\xa9\\x35\\\n\\x20\\x82\\xa4\\xf5\\xcc\\x02\\x88\\x1f\\x3a\\xca\\x4f\\x1c\\xea\\x53\\xcb\\x0f\\\n\\x8e\\xa3\\x27\\xa8\\x1d\\x3c\\x26\\xcf\\xc6\\x6c\\xae\\xb1\\x3e\\xc6\\x4c\\x33\\\n\\x12\\xd8\\x7a\\xb2\\xed\\x24\\x5f\\x19\\xe9\\xba\\xc5\\xa3\\x58\\xd1\\x23\\xe9\\\n\\x08\\x20\\x1f\\xf5\\x25\\x5f\\xf9\\x86\\x13\\x72\\x1a\\x41\\x36\\x34\\x4f\\xec\\\n\\x20\\xc6\\x2a\\xa3\\x31\\xa0\\x63\\x0b\\x0c\\x5c\\xbf\\x87\\x56\\xf2\\xd5\\xd0\\\n\\xc6\\xe3\\xf3\\x81\\xb7\\x87\\xd5\\x5a\\xbc\\x0f\\x1c\\x5d\\xf2\\x98\\x99\\xfb\\\n\\x68\\x04\\x30\\x54\\x9d\\x1b\\x5b\\xdb\\x08\\x6c\\x33\\xb1\\x16\\xb1\\xb9\\xdc\\\n\\x0b\\xdb\\x2b\\x7d\\x74\\x29\\x50\\x28\\xd0\\xa2\\xfc\\x3e\\x2e\\x95\\xe9\\x97\\\n\\x69\\x81\\x81\\xd9\\x56\\x18\\x48\\xac\\x25\\x20\\x41\\x25\\xc6\\x44\\x27\\x41\\\n\\x09\\x3d\\x0a\\x6c\\x4f\\xcb\\x96\\x99\\x0d\\x79\\x2f\\xbe\\x07\\x31\\x79\\x3d\\\n\\x3a\\x44\\xed\\x40\\x58\\xac\\x9e\\x55\\xc2\\xa8\\xe3\\xa1\\xf3\\xbf\\x9e\\xa1\\\n\\xa4\\xd5\\x01\\xb2\\x8e\\x17\\x3c\\xa4\\xbb\\x55\\x5c\\xeb\\x83\\x5d\\xa4\\xe7\\\n\\x85\\xbd\\xaf\\xdd\\x44\\xc3\\x1e\\x17\\x61\\x37\\xb4\\x76\\x8c\\x4b\\xaf\\x44\\\n\\x3e\\x02\\xe8\\x26\\x0b\\x17\\x1d\\xf7\\x26\\x1a\\xe7\\xd8\\x8b\\xea\\x43\\xb6\\\n\\x6e\\x9d\\x2c\\x51\\x35\\xcc\\x93\\xdb\\xca\\x87\\xbf\\x58\\x08\\x09\\xa3\\x4f\\\n\\xe0\\x25\\x2b\\xcc\\xd3\\x8f\\xb0\\x58\\xb2\\x42\\x57\\x5c\\x18\\x92\\xc8\\xda\\\n\\x40\\x4a\\x5a\\x0c\\x14\\xb2\\x7e\\x70\\x4d\\xe3\\x7e\\x42\\x5c\\xb8\\x1d\\xa8\\\n\\xf3\\x32\\x5f\\x20\\x0f\\xd6\\xfb\\xa0\\x8c\\x6c\\x1e\\xaa\\x02\\x26\\x0b\\x53\\\n\\xa3\\x24\\xc2\\xd1\\x5b\\xe7\\x64\\x0b\\x74\\x61\\x36\\x80\\xbc\\x14\\x2b\\x74\\\n\\x27\\x24\\x85\\x9b\\xd2\\x86\\xf1\\x8c\\x52\\x67\\x23\\xc8\\xd1\\x4e\\x58\\x81\\\n\\x64\\xc5\\x0a\\x97\\xf3\\xd0\\x5c\\x48\\x99\\x74\\x16\\x7b\\x4a\\xf7\\x0a\\x20\\\n\\x80\\x3d\\xb2\\xea\\x66\\x20\\x3e\\x17\\x7d\\xcc\\x56\\x49\\x88\\xad\\x92\\xf8\\\n\\x5f\\x44\\xb7\\x66\\x87\\x5b\\x7c\\x64\\x0f\\xcc\\x1e\\xbf\\x52\\xd2\\xb9\\x32\\\n\\x05\\x00\\x97\\x90\\x05\\xce\\x2d\\xe1\\x57\\xba\\xd4\\x38\\x62\\x25\\x97\\x38\\\n\\x34\\xc6\\x7d\\x3a\\xf1\\xde\\x94\\x41\\xfc\\xf5\\x65\\x12\\x6b\\xb7\\x59\\x89\\\n\\x6d\\x5b\\x3a\\xb9\\x17\\x4d\\x13\\xe3\\x12\\x20\\x54\\x35\\x2a\\x33\\xe9\\x2e\\\n\\x44\\x56\\xa8\\x67\\x45\\xc9\\x4a\\x79\\xfc\\xf1\\x41\\x47\\x87\\x95\\xf8\\xf0\\\n\\x87\\x0a\\x38\\x5f\\x86\\xc4\\x55\\x4f\\xf6\\x0d\\x64\\xdf\\xec\\xf2\\x41\\x13\\\n\\xd1\\xb3\\x6b\\xdb\\x7c\\xd0\\x42\\xbe\\x5e\\xa2\\x29\\x1d\\x34\\x64\\xe8\\x24\\\n\\xca\\xaf\\x78\\x8c\\x4a\\xb0\\x2e\\xd2\\x85\\x73\\x11\\x63\\x15\\x2e\\x72\\xec\\\n\\x26\\x7b\\xdc\\x3c\\xb8\\x11\\xd5\\x8d\\xa3\\xc7\\xc4\\xee\\x36\\xe9\\xe9\\x21\\\n\\x29\\xb2\\x1b\\x73\\x8e\\x42\\x91\\x6b\\xd8\\x09\\x64\\x09\\x13\\xaf\\x63\\x38\\\n\\xb2\\x6b\\x3b\\x51\\xe0\\x97\\x45\\x80\\xfd\\x72\\x8f\\x84\\xc1\\x5c\\x23\\x3f\\\n\\xa8\\xc7\\x8d\\xd7\\xf1\\x1a\\xbb\\xe1\\x39\\xf6\\x6e\\x6c\\xe4\\xa6\\x9d\\x6c\\\n\\x36\\x72\\x81\\x3d\\xc6\\x73\\x07\\x51\\xb0\\x74\\x30\\x7b\\x0b\\xf1\\x02\\x03\\\n\\xc4\\x60\\x1d\\xd9\\x98\\xbd\\x85\\x39\\x8e\\x23\\xe7\\x09\\x0e\\x0b\\xd9\\x70\\\n\\x0f\\x10\\x4f\\x8e\\x93\\x08\\x41\\x25\\x93\\xf9\\x24\\x24\\x2a\\x3a\\xaf\\xa4\\\n\\x40\\xa3\\xaa\\x98\\x85\\xa5\\x79\\xfb\\x66\\x1f\\xeb\\x91\\x99\\x5b\\x4e\\xa4\\\n\\x28\\x85\\x72\\xeb\\x44\\x8f\\x29\\x02\\x14\\x01\\x73\\x23\\x60\\xad\\x5f\\xfc\\\n\\x85\\xe9\\xd7\\x06\\x9a\\xbb\\x09\\xa8\\xf4\\x14\\x01\\x8a\\x80\\x58\\x04\\xac\\\n\\x99\\xb7\\xdc\\x0f\\x29\\x67\\x9c\\xd7\\x1e\\x9f\\xf6\\xac\\xda\\xa1\\xa0\\x07\\\n\\x14\\x01\\x8a\\x80\\xc1\\x10\\xb0\\x5b\\xac\\xd6\\x36\\x57\\x5c\\x44\\x30\\x5b\\\n\\x5a\\x86\\x68\\x8f\\xcc\\x06\\xab\\x07\\x15\\x87\\x22\\x40\\x11\\x88\\x02\\x04\\\n\\xfe\\x1f\\x20\\x83\\x6c\\x46\\x9f\\xf2\\x00\\x2f\\x00\\x00\\x00\\x00\\x49\\x45\\\n\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x09\\x92\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x50\\x00\\x00\\x00\\x50\\x08\\x06\\x00\\x00\\x00\\x8e\\x11\\xf2\\xad\\\n\\x00\\x00\\x00\\x04\\x73\\x42\\x49\\x54\\x08\\x08\\x08\\x08\\x7c\\x08\\x64\\x88\\\n\\x00\\x00\\x00\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x04\\x65\\x00\\x00\\x04\\x65\\\n\\x01\\x59\\x90\\x9b\\x60\\x00\\x00\\x00\\x19\\x74\\x45\\x58\\x74\\x53\\x6f\\x66\\\n\\x74\\x77\\x61\\x72\\x65\\x00\\x77\\x77\\x77\\x2e\\x69\\x6e\\x6b\\x73\\x63\\x61\\\n\\x70\\x65\\x2e\\x6f\\x72\\x67\\x9b\\xee\\x3c\\x1a\\x00\\x00\\x09\\x0f\\x49\\x44\\\n\\x41\\x54\\x78\\x9c\\xed\\x9c\\x7d\\x4c\\x14\\xf9\\x19\\xc7\\xbf\\xc3\\x22\\x33\\\n\\xcb\\xea\\xe9\\x0a\\x68\\x29\\xc1\\x17\\x1a\\x31\\x1a\\x2c\\xa0\\x6c\\x7a\\xe1\\\n\\x78\\x39\\x63\\xac\\xc0\\x9d\\xd6\\xf3\\x0d\\x6b\\xad\\xd2\\xb4\\xf5\\xe5\\x4e\\\n\\xcf\\xf3\\x15\\x81\\xd8\\xc5\\xb5\\xea\\x1e\\x87\\x68\\x49\\x8c\\xd1\\xb4\\x5a\\\n\\x44\\x01\\x5d\\x1b\\xf0\\x6a\\xef\\x4c\\x51\\x88\\x20\\x91\\x9e\\x09\\x06\\x85\\\n\\x34\\x31\\x82\\x82\\x82\\x2c\\xfb\\xc6\\x22\\xcb\\x1e\\xcb\\xb2\\xd3\\x3f\\xac\\\n\\xcb\\xce\\xee\\x80\\xec\\xcc\\x80\\xde\\x39\\x9f\\x84\\x84\\x79\\x7e\\xcf\\x3e\\\n\\xbf\\x67\\xbe\\xf9\\xbd\\xce\\x1b\\x20\\x22\\x22\\x22\\xf2\\xee\\x42\\xb8\\x1b\\\n\\xbe\\xda\\x5b\\x40\\x0b\\x59\\x81\\xc5\\xa7\\x1f\\x26\\xbf\\xef\\x61\\xb5\\xf7\\\n\\x0b\\x19\\xd6\\x6b\\xa4\\xe3\\xfc\\x30\\xb9\\xcf\\x0f\\xef\\x49\\xa8\\x3f\\xed\\\n\\x3c\\xf2\\xdb\\x43\\x42\\xc5\\xf5\\x65\\x33\\x7e\\x92\\xf6\\x89\\xd7\\x81\\x3a\\\n\\xdb\\x7a\\x58\\xed\\x57\\x6a\\xaf\\x61\\xd5\\xc7\\x8b\\x31\\x2d\\x34\\xd8\\xeb\\\n\\x98\\x42\\xf2\\xa4\\xb5\\x1d\\xff\\xfc\\xb6\\x1a\\x81\\x03\\x54\\xc6\\x89\\xac\\\n\\x22\\xe2\\x8b\\xc3\\xeb\\x54\\x42\\xc4\\xf5\\x11\\x22\\xc8\\x70\\xf4\\x58\\x2d\\\n\\x6f\\x5c\\x3c\\x00\\x98\\x31\\xed\\xa7\\xe8\\xb6\\xf4\\xe0\\xc3\\x8f\\x3f\\x94\\\n\\xfa\\x91\\x64\\xfa\\x89\\xac\\x0b\\x47\\x85\\x88\\x3b\\xea\\x02\\xbe\\x6d\\x90\\\n\\x14\\x89\\xc4\\x8f\\x12\\xfc\\xfd\\x48\\xe9\\xe7\\x42\\x88\\xf8\\xce\\x09\\x08\\\n\\x30\\x45\\x3c\\x9e\\x59\\x74\\x84\\x4f\\xac\\x77\\x52\\x40\\x60\\x50\\x44\\x92\\\n\\x22\\x77\\xf0\\x11\\x91\\x75\\x12\\xf9\\x21\\x70\\xea\\xef\\x97\\x59\\xed\\x5b\\\n\\xd3\\xd6\\x8c\\x38\\xc6\\x2b\\x11\\x6f\\xfd\\xab\\x6a\\xc7\\xf1\\xcc\\x22\\xec\\\n\\x3c\\xb2\\x2e\\xd3\\xdb\\x3c\\xde\\xd9\\x16\\xf8\\x0a\\xbe\\x2d\\xf1\\x9d\\x17\\\n\\x10\\xe0\\x27\\xa2\\x28\\xe0\\xff\\xe1\\x2a\\xa2\\x28\\xa0\\x0b\\x5c\\x44\\x14\\\n\\x05\\x74\\xc3\\x5b\\x11\\x45\\x01\\x59\\xf0\\x46\\x44\\x51\\xc0\\x21\\x70\\x8a\\\n\\xe8\\x4f\\x0e\\xbb\\xd8\\x16\\x05\\x1c\\x06\\x92\\x22\\x91\\x98\\x9c\\x20\\x1b\\\n\\x4e\\x44\\x51\\xc0\\xd7\\xf0\\x3a\\x11\\x45\\x01\\x47\\x00\\x49\\x91\\x48\\x48\\\n\\x8a\\x97\\xd9\\xfb\\xfb\\x33\\xdc\\xcb\\x44\\x01\\x47\\x08\\x25\\xa5\\x58\\xed\\\n\\x3f\\xd8\\xbd\\xb0\\x37\\x7b\\xde\\xd1\\x44\\x6c\\x81\\x3c\\x11\\x05\\xe4\\x89\\\n\\x28\\x20\\x4f\\x04\\x13\\xd0\\x47\\xc2\\x1e\\x4a\\x26\\xf5\\xc7\\xd3\\x36\\xad\\\n\\x50\\xd5\\x70\\xa6\\xf5\\x59\\x07\\x26\\xc8\\xc6\\x0b\\x1e\\x57\\xb0\\x49\\x64\\\n\\xc2\\x24\\x12\\x2f\\xba\\xfa\\xe0\\x18\\x70\\x30\\xec\\xef\\xcf\\x5a\\x80\\x7f\\\n\\x7c\\x7d\\x13\\x16\\xab\\x55\\xa8\\xaa\\x38\\x31\\xc1\\x5f\\x86\\x25\\xbf\\xf8\\\n\\x40\\xf0\\xb8\\x82\\x09\\x48\\x52\\x12\\x90\\x3f\\xf1\\xf7\\xb0\\x4f\\x09\\x09\\\n\\xc7\\x82\\x9f\\x87\\x0b\\x55\\xcd\\x5b\\x87\\x38\\x06\\xf2\\x44\\x14\\x90\\x27\\\n\\xa2\\x80\\x3c\\x11\\x05\\xe4\\x89\\x28\\x20\\x4f\\x44\\x01\\x79\\x22\\x0a\\xc8\\\n\\x13\\x51\\x40\\x9e\\x88\\x02\\xf2\\xc4\\xeb\\x9d\\xc8\\x5f\\xbf\\x61\\x7f\\x26\\\n\\xe5\\xc7\\xc2\\x1f\\x52\\xbc\\xbb\\xce\\xc8\\x69\\x2b\\x77\\x74\\xcf\\xef\\xb9\\\n\\xfc\\xec\\xad\\x27\\x23\\xf7\\x6f\\x5e\\xff\\x46\\xec\\xc2\\x3c\\x11\\x05\\xe4\\\n\\x89\\x28\\x20\\x4f\\x44\\x01\\x79\\x22\\x0a\\xc8\\x13\\x51\\x40\\x9e\\x70\\xbe\\\n\\x22\\x6d\\x30\\x18\\x90\\x9b\\x9b\\x8b\\x96\\x96\\x16\\x68\\xb5\\x5a\\x18\\x0c\\\n\\x06\\x18\\x0c\\x06\\x58\\x2c\\x16\\x50\\x14\\x05\\xb9\\x5c\\x0e\\xb9\\x5c\\x8e\\\n\\xa0\\xa0\\x20\\xc4\\xc6\\xc6\\x22\\x35\\x35\\x15\\xd3\\xa6\\x4d\\x13\\x32\\x77\\\n\\x06\\x25\\x25\\x25\\xb8\\x79\\xf3\\x26\\x3a\\x3a\\x3a\\xa0\\xd7\\xeb\\x61\\x34\\\n\\x1a\\x61\\x30\\x18\\x40\\xd3\\xb4\\x33\\x17\\xb9\\x5c\\x8e\\x39\\x73\\xe6\\x20\\\n\\x29\\x29\\x09\\x4b\\x96\\x2c\\x81\\x8f\\x0f\\xff\\xf6\\xc3\\x59\\x40\\x9d\\x4e\\\n\\x07\\xb5\\x5a\\x3d\\x64\\xf9\\xf3\\xe7\\xcf\\x9d\\xff\\x97\\x95\\x95\\x21\\x33\\\n\\x33\\x13\\xdb\\xb6\\x6d\\x83\\x5a\\xad\\x06\\x49\\x92\\x5c\\xab\\x1d\\x92\\x8b\\\n\\x17\\x2f\\xe2\\xda\\xb5\\x6b\\xac\\x65\\x46\\xa3\\xd1\\xf9\\x7f\\x79\\x79\\x39\\\n\\xf2\\xf3\\xf3\\x11\\x11\\x11\\x81\\xf3\\xe7\\xcf\\x23\\x3a\\x3a\\x9a\\x57\\xbd\\\n\\x63\\xd6\\x85\\xed\\x76\\x3b\\x4e\\x9c\\x38\\x81\\x8d\\x1b\\x37\\x8e\\x55\\x95\\\n\\xc3\\xd2\\xd0\\xd0\\x80\\x85\\x0b\\x17\\xa2\\xb1\\xb1\\x91\\x57\\x1c\\xc1\\x6e\\\n\\x2a\\x11\\x04\\x81\\x45\\x8b\\x16\\xc1\\x4e\\x4d\\x02\\x41\\x10\\xe8\\xb5\\xbc\\\n\\xc0\\x7f\\xeb\\xbe\\x43\\x77\\x97\\x91\\xe1\\x77\\xe9\\xd2\\x25\\xc4\\xfd\\xfa\\\n\\x53\\x44\\xbe\\x9f\\x20\\x54\\xd5\\x00\\x00\\x63\\x1f\\xf3\\x38\\xf4\\x67\\xe1\\\n\\x08\\x0d\\x0b\\x07\\x49\\x49\\x61\\xb7\\xf7\\xe3\\x79\\xeb\\x63\\x3c\\x6a\\xac\\\n\\x67\\xf8\\x98\\xcd\\x66\\x64\\x65\\x65\\xa1\\xac\\xac\\x8c\\x73\\xbd\\x82\\x0a\\\n\\x58\\x5e\\x5e\\xce\\xb0\\xd9\\x6c\\x36\\xec\\xdf\\xbf\\x1f\\xc7\\x8f\\x1f\\x67\\\n\\xd8\\xdb\\xff\\x73\\x1d\\xdb\\x7e\\x25\\xac\\x80\\x93\\xdd\\x46\\x85\\x2f\\x3e\\\n\\xdd\\x8c\\x5d\\xbb\\x76\\x31\\x6c\\xf5\\xf5\\xf5\\x48\\x4a\\x4a\\x42\\x47\\x47\\\n\\x87\\xd3\\x76\\xfd\\xfa\\x75\\xd0\\x34\\x0d\\x82\\xf0\\x78\\x71\\x75\\x44\\x8c\\\n\\x6a\\x17\\xf6\\xf3\\xf3\\xc3\\xb1\\x63\\xc7\\x30\\x73\\xe6\\x4c\\x86\\x5d\\xab\\\n\\x7d\\x33\\x37\\xda\\x23\\x23\\x23\\x91\\x95\\x95\\xc5\\xb0\\xf5\\xf5\\xf5\\xa1\\\n\\xab\\xab\\x8b\\x73\\xcc\\x51\\x7f\\x3a\\x8b\\x20\\x08\\x84\\x84\\x84\\xe0\\xf1\\\n\\xe3\\xc7\\x4e\\xdb\\xd4\\xa9\\x53\\x87\\xf4\\xd7\\x6a\\xb5\\x28\\x2d\\x2d\\x45\\\n\\x4d\\x4d\\x0d\\x74\\x3a\\x1d\\x68\\x9a\\x46\\x60\\x60\\x20\\x12\\x13\\x13\\xb1\\\n\\x62\\xc5\\x0a\\x04\\x06\\x06\\xf2\\xca\\x27\\x24\\x24\\x84\\x71\\x4c\\x51\\x14\\\n\\x26\\x4d\\x9a\\xc4\\x39\\xde\\xa8\\x0b\\x68\\x32\\x99\\xf0\\xe0\\xc1\\x03\\x86\\\n\\x6d\\xc1\\x82\\x05\\xac\\xbe\\x39\\x39\\x39\\x50\\xa9\\x54\\xb0\\x58\\x2c\\x1e\\\n\\x65\\x45\\x45\\x45\\xd8\\xb7\\x6f\\x1f\\xd4\\x6a\\x35\\xb6\\x6c\\xd9\\xc2\\x39\\\n\\x9f\\xea\\xea\\x6a\\xc6\\x71\\x74\\x74\\x34\\xe7\\xee\\x0b\\x8c\\x72\\x17\\xd6\\\n\\xe9\\x74\\x58\\xbd\\x7a\\x35\\xcc\\x66\\xb3\\xd3\\x16\\x19\\x19\\x89\\x65\\xcb\\\n\\x96\\x79\\xf8\\xee\\xde\\xbd\\x1b\\xe9\\xe9\\xe9\\xac\\xe2\\xbd\\xc2\\x6c\\x36\\\n\\x63\\xeb\\xd6\\xad\\x50\\xa9\\xb8\\xbd\\x2b\\x7d\\xf6\\xec\\x59\\xe4\\xe7\\xe7\\\n\\x3b\\x8f\\x09\\x82\\xc0\\x81\\x03\\x07\\x38\\xc5\\x7a\\x85\\x60\\x2d\\x90\\xa6\\\n\\x69\\x9c\\x39\\x73\\x06\\x00\\xe0\\x70\\x38\\xd0\\xd8\\xd8\\x88\\x0b\\x17\\x2e\\\n\\x30\\xc6\\x97\\xc8\\xc8\\x48\\x5c\\xbd\\x7a\\x15\\xe3\\xc6\\x8d\\x63\\xfc\\xb6\\\n\\xbc\\xbc\\xdc\\x63\\xa2\\x91\\x4a\\xa5\\x50\\x28\\x14\\xf0\\xf1\\xf1\\xc1\\x9d\\\n\\x3b\\x77\\xd0\\xd7\\x37\\x38\\xcd\\xaa\\x54\\x2a\\x24\\x27\\x27\\x43\\xa1\\x50\\\n\\x0c\\x99\\x4f\\x6d\\x6d\\xad\\x33\\x1f\\xb3\\xd9\\x0c\\x8d\\x46\\x83\\xbb\\x77\\\n\\xef\\x3a\\xcb\\x49\\x92\\x44\\x5e\\x5e\\x1e\\x92\\x93\\x93\\xb9\\x9f\\x34\\x04\\\n\\x16\\x70\\xf3\\xe6\\xcd\\xac\\x65\\x41\\x41\\x41\\xc8\\xc9\\xc9\\xc1\\xfa\\xf5\\\n\\xeb\\xe1\\xeb\\xeb\\x59\\x65\\x6e\\x6e\\x2e\\x68\\x7a\\xf0\\x53\\x0d\\xe1\\xe1\\\n\\xe1\\xa8\\xa8\\xa8\\x70\\x8e\\x57\\x4f\\x9e\\x3c\\x41\\x62\\x62\\x22\\x5a\\x5b\\\n\\x5b\\x01\\x00\\x03\\x03\\x03\\xc8\\xcb\\xcb\\x43\\x71\\x71\\xf1\\x90\\xf9\\x68\\\n\\x34\\x1a\\x68\\x34\\x1a\\xd6\\xb2\\x0d\\x1b\\x36\\x20\\x3b\\x3b\\xdb\\x63\\x72\\\n\\xe3\\xc2\\x98\\x2c\\xa4\\x75\\x3a\\x1d\\x3e\\xdb\\xfe\\x39\\x7e\\xb9\\xf2\\x37\\\n\\xb8\\x7c\\xf7\\x31\\xaa\\xb5\\x70\\xfe\\x7d\\xfb\\xb0\\x0b\\x37\\x6e\\xdc\\x60\\\n\\xf8\\xff\\x31\\xfb\\x2f\\x68\\xf6\\x0d\\x71\\xfa\\x3c\\x95\\xce\\xc0\\x9a\\xed\\\n\\xcc\\xd9\\xb3\\xb4\\xec\\x2a\\x2a\\x9f\\xf5\\x3b\\x7d\\xdc\\xd7\\x81\\xc3\\x51\\\n\\x58\\x58\\x88\\xe5\\xcb\\x97\\xa3\\xa0\\xa0\\x80\\xf7\\xb9\\x09\\x3a\\x89\\x84\\\n\\x85\\x85\\x01\\x00\\x7a\\x7a\\x7a\\xa0\\xd7\\xeb\\xe1\\x70\\x0c\\x3e\\xea\\xd6\\\n\\xdb\\xf3\\x02\\x95\\x5f\\x5f\\x46\\xc3\\x9d\\x4a\\xd4\\xd4\\xd4\\x60\\xd6\\xac\\\n\\x59\\x00\\x80\\x7f\\xd7\\x7f\\xc7\\xf0\\xa3\\x28\\x0a\\x3b\\xd7\\x2c\\x86\\x44\\\n\\xc2\\x8c\\x3d\\xf7\\x77\\x2b\\x91\\xbb\\x77\\xb0\\x85\\xf7\\x7d\\x6f\\xc5\\xc4\\\n\\xce\\x07\\x98\\x3f\\x7f\\x3e\\x00\\xcf\\x75\\x60\\x40\\x40\\x00\\x26\\x4e\\x9c\\\n\\x08\\xbb\\xdd\\x0e\\x9d\\x4e\\x07\\xab\\xcb\\xe3\\x75\\x34\\x4d\\xe3\\xfe\\xfd\\\n\\xfb\\x48\\x4b\\x4b\\xc3\\xa3\\x47\\x8f\\x70\\xe8\\x10\\xf7\\x8f\\x78\\x08\\xf7\\\n\\x80\\xa5\\x8f\\x0f\\x9a\\x9a\\x9a\\xd0\\xd4\\xd4\\x04\\xad\\x56\\x0b\\xbb\\xdd\\\n\\x8e\\x7b\\xf7\\xee\\x21\\x3d\\x3d\\x1d\\x12\\x17\\x35\\x74\\x3a\\x1d\\x63\\x16\\\n\\x75\\x5d\\xd4\\x02\\x2f\\x97\\x38\\x12\\x77\\xf5\\x30\\x28\\x88\\x2b\\x6d\\x6d\\\n\\x6d\\x43\\xe6\\x93\\x99\\x99\\x89\\xa6\\xa6\\x26\\xb4\\xb4\\xb4\\xa0\\xb7\\xb7\\\n\\x17\\x7a\\xbd\\x1e\\x25\\x25\\x25\\x98\\x3d\\x7b\\x36\\xc3\\xef\\xf0\\xe1\\xc3\\\n\\xa8\\xab\\xab\\xf3\\xea\\x5c\\x5d\\x19\\xb5\\x2e\\x4c\\x10\\x04\\xa2\\xa2\\xa2\\\n\\xa0\\x56\\xab\\x3d\\x16\\xaf\\x15\\x15\\x15\\x78\\xf6\\xec\\x19\\x80\\x97\\xad\\\n\\xd5\\x95\\x80\\x80\\x80\\x21\\x63\\xba\\x97\\x75\\x77\\x77\\x8f\\x38\\x9f\\x80\\\n\\x80\\x00\\xa4\\xa6\\xa6\\xa2\\xb2\\xb2\\x12\\xe3\\xc7\\x0f\\x3e\\xa9\\x4a\\xd3\\\n\\x34\\x0a\\x0b\\x0b\\x47\\x1c\\xc7\\x9d\\x31\\x19\\x03\\x57\\xae\\x5c\\xe9\\x61\\\n\\x6b\\x68\\x68\\x00\\x00\\xc8\\x64\\x32\\x86\\xdd\\xf5\\xca\\x89\\x3b\\xee\\x3b\\\n\\x06\\x57\\x21\\x46\\x4a\\x70\\x70\\x30\\x62\\x63\\x63\\x19\\x36\\x3e\\x17\\x14\\\n\\xc6\\x44\\x40\\xbb\\xdd\\xee\\x61\\xeb\\xef\\x7f\\xf9\\x25\\xa3\\xe0\\x60\\xe6\\\n\\x37\\x65\\xda\\xdb\\xdb\\x59\\xd7\\x82\\x56\\xab\\x15\\x26\\x93\\x89\\x61\\x1b\\\n\\x6e\\x47\\xe3\\x4d\\x3e\\xaf\\x72\\xe1\\xc2\\x98\\x08\\x78\\xee\\xdc\\x39\\x0f\\\n\\xdb\\xf4\\xe9\\xd3\\x01\\xbc\\xdc\\x95\\xb8\\xee\\x04\\x6c\\x36\\x1b\\x4a\\x4b\\\n\\x4b\\x3d\\xfc\\x2b\\x2b\\x2b\\x19\\x4b\\x1d\\x92\\x24\\x11\\x15\\x15\\xe5\\x75\\\n\\x2e\\x75\\x75\\x75\\xb8\\x7d\\xfb\\x36\\x6b\\x2e\\x5c\\x18\\x55\\x01\\x9b\\x9b\\\n\\x9b\\xb1\\x69\\xd3\\x26\\x9c\\x3c\\x79\\x92\\x61\\x0f\\x0b\\x0b\\xc3\\xbc\\x79\\\n\\xf3\\x00\\xbc\\x1c\\x9b\\x12\\x12\\x98\\x57\\x66\\x94\\x4a\\x25\\xe3\\x82\\x6c\\\n\\x67\\x67\\x27\\xd2\\xd3\\xd3\\x19\\x3e\\x49\\x49\\x49\\xa0\\x28\\xf6\\xd7\\xaf\\\n\\xd8\\xb0\\xd9\\x6c\\x28\\x28\\x28\\x40\\x4a\\x4a\\x0a\\x6c\\x36\\x1b\\xa3\\x8c\\\n\\x6d\\x67\\x34\\x52\\x04\\x5b\\xc6\\x38\\x1c\\x0e\\xf8\\xfb\\xfb\\xe3\\xbd\\xc9\\\n\\x41\\x90\\xf8\\xfa\\xa2\\xa7\\xdb\\x8c\\x6e\\x93\\x81\\xd5\\x77\\xdd\\xae\\x83\\\n\\xb8\\xdd\\x39\\xd8\\xea\\x3e\\xda\\xb4\\x0f\\xb7\\x6e\\xdd\\x72\\x1e\\x37\\x37\\\n\\x37\\x23\\x7c\\xce\\x5c\\xcc\\xff\\x60\\x21\\x1c\\x0e\\x07\\xea\\xef\\x54\\xe1\\\n\\x85\\x79\\xb0\\xfb\\x12\\x04\\x81\\x45\\x69\\x3b\\x51\\xed\\x72\\x51\\xc7\\x7d\\\n\\x1d\\xb8\\x67\\xcf\\x1e\\xfc\\xf9\\xe8\\x97\\x90\\xca\\xc6\\x63\\xc0\\x6e\\x87\\\n\\x5e\\xdb\\x8e\\x01\\x96\\xa1\\x44\\xa1\\x50\\x60\\xe9\\xd2\\xa5\\x1c\\xcf\\x5a\\\n\\xe0\\x75\\xa0\\xd5\\x6a\\x85\\xb5\\xad\\x75\\xc8\\x72\\x82\\x20\\xa0\\x54\\x2a\\\n\\xa1\\xfc\\x6c\\x3d\\xc3\\x1e\\xbf\\x2e\\x05\\x4d\\x55\\x9b\\x71\\xfa\\xf4\\x69\\\n\\xa7\\xad\\xc7\\xdc\\x85\\xaa\\x6f\\x3c\\xbb\\x32\\x00\\xec\\xd8\\xb1\\x03\\xdb\\\n\\x97\\x27\\x32\\x6c\\xee\\xeb\\x40\\x9a\\xa6\\x61\\xd2\\x77\\xc2\\xa4\\xef\\x1c\\\n\\x32\\x9f\\x88\\x88\\x08\\x5c\\xb9\\x72\\xc5\\x63\\x6b\\xe9\\x0d\\x63\\x32\\x06\\\n\\x12\\x04\\x81\\xf8\\xf8\\x78\\x54\\x54\\x54\\x40\\xa9\\x54\\xb2\\xfa\\x9c\\x3a\\\n\\x75\\x0a\\x4a\\xa5\\x72\\xd8\\xfb\\x25\\x24\\x49\\xe2\\xe0\\xc1\\x83\\xc8\\xcb\\\n\\xcb\\xe3\\x95\\x4f\\x60\\x60\\x20\\x54\\x2a\\x15\\x6a\\x6b\\x6b\\x79\\xdf\\xe8\\\n\\xe2\\xdc\\x02\\x43\\x43\\x43\\xa1\\xd1\\x68\\xf0\\xf0\\xe1\\x43\\xe7\\x5d\\xb0\\\n\\xde\\xde\\x5e\\x86\\x8f\\x5c\\x2e\\x87\\x42\\xa1\\xc0\\xe2\\xc5\\x8b\\x5f\\x3b\\\n\\x50\\x13\\x04\\x81\\xec\\xec\\x6c\\xa4\\xa5\\xa5\\xa1\\xb8\\xb8\\x18\\x55\\x55\\\n\\x55\\x30\\x18\\x0c\\x20\\x08\\x02\\x53\\xa6\\x4c\\x41\\x5c\\x5c\\x1c\\xd6\\xae\\\n\\x5d\\x3b\\x64\\x1c\\xa5\\x52\\x89\\x94\\x94\\x14\\x3c\\x7d\\xfa\\x14\\x46\\xa3\\\n\\x11\\x26\\x93\\x89\\x31\\xe9\\x48\\x24\\x12\\xcc\\x9d\\x3b\\x17\\x71\\x71\\x71\\\n\\x88\\x8f\\x8f\\x67\\xdd\\x93\\x73\\x81\\x73\\x14\\x99\\x4c\\x86\\x55\\xab\\x56\\\n\\x09\\x92\\x84\\x2b\\x33\\x66\\xcc\\x40\\x46\\x46\\x06\\x32\\x32\\x3c\\xde\\x6d\\\n\\x1e\\x96\\x98\\x98\\x18\\xc4\\xc4\\xc4\\x08\\x9e\\xcf\\xeb\\x10\\x6f\\xac\\xf3\\\n\\x44\\x14\\x90\\x27\\xa2\\x80\\x3c\\x11\\x05\\xe4\\x89\\x28\\x20\\x4f\\xbc\\xfe\\\n\\x0c\\xb2\\x61\\xca\\x9b\\xfd\\x9c\\xf1\\x68\\x13\\xd0\\x39\\xfc\\xa2\\x7a\\xef\\\n\\x57\\x1b\\xb9\\xdf\\xc2\\x13\\x11\\x11\\x11\\xf9\\x91\\xf1\\x3f\\x57\\x5e\\x26\\\n\\x27\\x2f\\xf7\\x23\\x4d\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\\n\\x82\\\n\\x00\\x00\\x05\\x9b\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x50\\x00\\x00\\x00\\x50\\x08\\x06\\x00\\x00\\x00\\x8e\\x11\\xf2\\xad\\\n\\x00\\x00\\x00\\x04\\x73\\x42\\x49\\x54\\x08\\x08\\x08\\x08\\x7c\\x08\\x64\\x88\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0e\\xc4\\x00\\x00\\x0e\\xc4\\x01\\x95\\x2b\\\n\\x0e\\x1b\\x00\\x00\\x00\\x19\\x74\\x45\\x58\\x74\\x53\\x6f\\x66\\x74\\x77\\x61\\\n\\x72\\x65\\x00\\x77\\x77\\x77\\x2e\\x69\\x6e\\x6b\\x73\\x63\\x61\\x70\\x65\\x2e\\\n\\x6f\\x72\\x67\\x9b\\xee\\x3c\\x1a\\x00\\x00\\x04\\xfb\\x49\\x44\\x41\\x54\\x78\\\n\\x5e\\xed\\x9c\\x5f\\x68\\x1c\\x45\\x1c\\xc7\\xbf\\x17\\x69\\x9a\\x34\\xad\\x0f\\\n\\x16\\x94\\x2a\\x2d\\x22\\xb7\\x7d\\xd0\\x88\\x20\\x81\\x23\\xb7\\x16\\x11\\xc5\\\n\\xb8\\x87\\x42\\xf3\\x22\\xf1\\x45\\x0a\\xca\\x1d\\xbe\\xf4\\x8e\\x52\\x05\\x41\\\n\\x7d\\xc8\\x8b\\xa2\\x7d\\xb8\\xc3\\x87\\xb2\\x8b\\x42\\xf5\\xc1\\x83\\x22\\x54\\\n\\xfc\\x73\\x07\\xe2\\x93\\x65\\xd7\\x94\\x04\\xa9\\x56\\x2b\\xb8\\x27\\xd4\\xd6\\\n\\xb6\\x69\\x20\\x28\\x35\\x21\\x0d\\xb5\\x8d\\xb3\\xc9\\xdc\\x9f\\xfd\\x73\\x7f\\\n\\xf6\\x66\\x76\\xf7\\xae\\x37\\x1f\\xf8\\x91\\xd9\\xd9\\xd9\\x85\\xfb\\x30\\xb3\\\n\\xfb\\xfb\\x4d\\x8e\\x8b\\x6d\\x10\\x20\\xe8\\x9a\\x21\\xfa\\x57\\xd0\\x25\\x42\\\n\\x20\\x23\\x42\\x20\\x23\\xae\\x67\\xe0\\xb1\\x37\\x3e\\xa5\\x2d\\x3e\\xac\\x0e\\\n\\xdd\\xc4\\xdf\\xc3\\x37\\xb0\\xf6\\xdf\\x4d\\xda\\x13\\x0d\\xa3\\xdb\\x86\\x71\\\n\\xcf\\xfa\\x30\\xa6\\xa6\\x12\\x48\\x3c\\xf5\\x28\\xed\\x65\\xc7\\x53\\xe0\\xf4\\\n\\xa1\\x69\\x7a\\xd4\\x39\\x4b\\x97\\x57\\x68\\xcb\\xce\\xe7\\x73\\x5f\\x63\\xfa\\\n\\xf9\\x27\\xb1\\x6f\\xef\\x1e\\xda\\x13\\x0d\\x17\\x2e\\x5e\\xc1\\x57\\xe5\\xd3\\\n\\x90\\x62\\xbb\\xf1\\xd8\\xa4\\x44\\x24\\x8e\\xd3\\x33\\x6c\\x04\\xbe\\x84\\x57\\\n\\xd6\\x56\\x23\\x97\\x67\\xf1\\xe0\\xbe\\xfb\\x71\\x7d\\x75\\x05\\x4f\\x3c\\x77\\\n\\x00\\x3f\\x9f\\xf9\\x03\\xfa\\xb7\\x67\\xe9\\x19\\x36\\x06\\xee\\x19\\xb8\\x7d\\\n\\x64\\x3b\\xe4\\x67\\x65\\x9c\\xff\\xf1\\x4f\\x2e\\x12\\x07\\xf2\\x25\\x62\\x97\\\n\\xf8\\x13\\xed\\xed\\x8e\\x81\\x7d\\x0b\\xd7\\x25\\x5e\\x60\\x92\\xd8\\xb7\\x02\\\n\\x8f\\x9f\\x38\\xe9\\x19\\x7e\\xe0\\x21\\x71\\x60\\x67\\x60\\x15\\x56\\x89\\x03\\\n\\x2f\\xd0\\x82\\x45\\xa2\\x10\\x48\\xe9\\x56\\xa2\\x10\\xd8\\x40\\x37\\x12\\x85\\\n\\x40\\x07\\x7e\\x25\\x0a\\x81\\x1e\\xf8\\x91\\x28\\x04\\x36\\xa1\\x2a\\xf1\\xb7\\\n\\xb3\\xad\\x93\\x6d\\x21\\xb0\\x05\\x96\\xc4\\xe4\\x33\\xc9\\x96\\x12\\x85\\xc0\\\n\\x36\\xb4\\x93\\x28\\x04\\x76\\x80\\x25\\x71\\xf2\\xe9\\x49\\xfc\\xf0\\x9d\\x10\\\n\\xd8\\x35\\x23\\xa3\\x23\\xb4\\x65\\xa7\\x6f\\x05\\xbe\\x76\\xe8\\x45\\xcf\\x08\\\n\\x1b\\x31\\x03\\x19\\x11\\x02\\x19\\x11\\x02\\x19\\xe1\\x26\\x70\\xe8\\x2e\\xef\\\n\\x5b\\x8d\\x8d\\xee\\xc0\\xa5\\xcb\\xd7\\xe8\\x51\\x74\\x5c\\xfc\\x6b\\x11\\xbb\\\n\\xc6\\x76\\xd2\\x23\\x7e\\x70\\xfb\\xaf\\xdc\\xfa\\x8d\\x5b\\xf8\\xf7\\x9f\\x75\\\n\\xdc\\xbe\\x75\\x9b\\xf6\\x6c\\x71\\x69\\xf9\\x0a\\xe6\\xcc\\x05\\xac\\xae\\xad\\\n\\xd1\\x9e\\x68\\xd8\\xb5\\x63\\x0c\\x53\\x09\\x19\\x0f\\x3d\\xb0\\x97\\xf6\\xf8\\\n\\xe7\\xd4\\x89\\x53\\x38\\xfa\\xfe\\xcb\\xf4\\x68\\x0b\\x6e\\x02\\x07\\x01\\x2f\\\n\\x81\\xe2\\x19\\xc8\\x88\\x10\\xc8\\x88\\x10\\xc8\\x88\\x10\\xc8\\x88\\x10\\xc8\\\n\\x88\\x10\\xc8\\x88\\x10\\xc8\\x88\\x10\\xc8\\x88\\x10\\xc8\\x88\\xef\\x4a\\xe4\\\n\\xa3\\x92\\xbf\\xef\\x9f\\xf4\\x1b\\xaf\\xa6\\x9a\\xef\\x29\\x72\\x29\\xe5\\x2c\\\n\\x81\\xef\\x1e\\x7d\\x85\\x1e\\xdd\\x59\\xbc\\x79\\xec\\x63\\xdf\\x02\\xc5\\x12\\\n\\x66\\x44\\x08\\x64\\x44\\x08\\x64\\x44\\x08\\x64\\x44\\x08\\x64\\x24\\x64\\x81\\\n\\x15\\x94\\x0b\\x19\\xc8\\xb2\\x8c\\x58\\x2c\\x66\\x0f\\xd2\\x27\\x67\\x0a\\x28\\\n\\x94\\x2b\\x74\\x6c\\x73\\x2a\\x05\\x8f\\xeb\\x7d\\x44\\xa6\\x4c\\x6f\\xc4\\x81\\\n\\xd0\\x04\\x6e\\x7d\\x68\\x09\\xa9\\x9c\\x06\\xc3\\x30\\x68\\x6f\\x03\\xa4\\xcf\\\n\\xd0\\x72\\xc8\\xa5\\x24\\x22\\x33\\x83\\x42\\x7b\\x8f\\x3d\\x41\\x28\\x02\\xcb\\\n\\x99\\x18\\xa4\\x9c\\x87\\xb4\\x66\\x18\\x1a\\x72\\x12\\xdf\\x99\\x12\\x14\\xc1\\\n\\x0b\\x2c\\x67\\x90\\xd2\\x68\\xdb\\x27\\x5a\\x2a\\x83\\x5e\\x77\\xc8\\x5d\\xe0\\\n\\xe9\\x6b\\x8d\\x51\\xc1\\xe1\\x77\\xdc\\xf6\\xc6\\x67\\x4b\\x28\\xce\\x6d\\xe0\\\n\\xfb\\xc5\\x7a\\x14\\xe7\\x4a\\x78\\x61\\x82\\x0e\\xa8\\xa1\\xe1\\x78\\xd1\\x79\\\n\\x4f\\x60\\xe1\\x3a\\x3d\\x5d\\x23\\x8d\\x0f\\x1a\\xee\\xd5\\x2a\\xac\\xc2\\x4b\\\n\\x55\\xe8\\x65\\x1c\\xe0\\x2e\\xf0\\xc0\\x7d\\x8d\\x61\\x62\\x7d\\x81\\x9e\\xa0\\\n\\x24\\xf3\\x26\\xce\\xbd\\xad\\x60\\x26\\x61\\x1f\\x3b\\x93\\x50\\xf0\\xe5\\x7c\\\n\\x89\\xa8\\xb0\\xb3\\xbc\\x54\\xb1\\x8d\\xb3\\x62\\xe2\\x6e\\x7a\\xb2\\x81\\x47\\\n\\x1c\\x63\\x9a\\x05\\x6f\\x42\\x7b\\x89\\x54\\x19\\xdf\\x1f\\xa7\\x2d\\x2f\\x14\\\n\\xa8\\x64\\x86\\x58\\xb3\\xa4\\x1a\\x7a\\xb6\\xd5\\xf8\\xe8\\x09\\x5d\\xa0\\x96\\\n\\x92\\xfb\\xe6\\x0d\\xdb\\x09\\x01\\x0b\\x54\\x70\\xd0\\xb9\\x26\\x61\\x6c\\xbe\\\n\\x61\\x37\\x53\\x15\\x92\\xf3\\xf5\\xbb\\xcb\\xc0\\x67\\xa0\\xf2\\x7a\\x1e\\x49\\\n\\xda\\xb6\\x61\\xa5\\x2a\\x24\\xe7\\x93\\xac\\xe4\\x96\\x24\\xd1\\x99\\x42\\x99\\\n\\x41\\xa6\\x86\\x94\\x23\\x59\\xf6\\x0e\\xfe\\x6f\\xf5\\xe0\\x97\\x70\\x3c\\x8b\\\n\\x4f\\xf2\\x9e\\x0a\\xeb\\x90\\x24\\x5a\\xcb\\xa5\\xea\\x32\\x3b\\xa8\\x46\\x7a\\\n\\x85\\x50\\x9e\\x81\\xf1\\xac\\x0e\\xb3\\xd4\\x64\\x26\\x3a\\xb1\\x64\\xf6\\x51\\\n\\x35\\xc2\\x5d\\xa0\\x33\\x67\\xab\\xc6\\xd5\\xc7\\xb3\\x78\\x6f\\xd1\\x44\\xf1\\\n\\xb3\\x34\\xc6\\x5d\\xf9\\x9e\\x07\\x9b\\xd5\\x88\\x8c\\xc3\\x67\\xdc\\xf7\\x72\\\n\\xe7\\x81\\xd1\\xc1\\x5d\\xa0\\x57\\xee\\x55\\x8f\\x38\\x66\\x5e\\x52\\x71\\x6e\\\n\\x9e\\xa4\\x28\\xa6\\x89\\x52\\x3e\\x8d\\x64\\xcb\\x69\\x69\\xe0\\xc3\\x23\\x05\\\n\\xec\\x71\\xdc\\xc7\\x9d\\x07\\xa6\\x51\\x72\\xa4\\x3f\\xde\\xa1\\x92\\xd7\\x1a\\\n\\x5f\\x42\\x59\\xc2\\x9e\\xc4\\xe3\\x50\\xb2\\x2a\\x74\\xdd\\xfa\\x60\\x2d\\x64\\\n\\x1a\\x27\\xf1\\x4d\\x0f\\x2f\\xe5\\xe8\\x04\\xda\\xa8\\xcb\\x34\\x4b\\xce\\xbc\\\n\\xc7\\xc0\\x79\\x93\\x36\\x7b\\x90\\x00\\x05\\x56\\x50\\x90\\x1d\\x69\\x44\\x07\\\n\\xdb\\x2b\\x71\\xe5\\xa0\\xab\\x9c\\xfb\\xe5\\xf7\\xde\\x9d\\x82\\x01\\x0a\\x8c\\\n\\x63\\xbf\\xf3\\xb7\\x6d\\xb4\\x54\\xfb\\x2d\\xaa\\xf2\\x17\\x24\\xab\\xb3\\xd3\\\n\\xba\\xfc\\x8b\\x96\\x40\\x97\\xb0\\xe2\\x2e\\x43\\x36\\x4b\\x39\\x99\\x58\\xac\\\n\\x38\\x27\\x15\\xe9\\xd8\\xdc\\xad\\x76\\xed\\x7d\\x25\\xf1\\xb0\\x44\\x9b\\x3d\\\n\\x48\\xb0\\xcf\\x40\\x45\\x85\\xeb\\x91\\x46\\x9e\\x69\\x06\\x99\\x89\\x92\\x55\\\n\\xce\\x35\\x2e\\x6f\\x89\\xee\\x56\\xd3\\x51\\x35\\xd2\\x6f\\xa1\\x97\\xf7\\x13\\\n\\xb8\\x0b\\x74\\xe6\\x6c\\x3b\\x67\\xbd\\xf6\\xf9\\x3a\\x64\\x22\\x8f\\xe2\\xac\\\n\\xe2\\xba\\xa7\\x57\\x1e\\xf8\\xab\\x63\\x4c\\xb3\\xe0\\x0d\\x77\\x81\\x8d\\xf9\\\n\\xda\\x56\\x58\\xfb\\x7c\\x26\\xf2\\xe9\\x8e\\xea\\x90\\x1a\\xc9\\x74\\x09\\xe6\\\n\\x7c\\x16\\x33\\xae\\xfb\\x0d\\xe4\\x7e\\x60\\x1c\\x59\\x55\\x6f\\x48\\x9e\\x93\\\n\\x1e\\x65\\x1d\\xe9\\x4b\\xa6\\x91\\xce\\x13\\x71\\xe6\\x06\\x74\\x55\\x21\\x57\\\n\\xf5\\x3e\\x21\\x09\\xa4\\xd4\\x92\\x67\\x1d\\xba\\xab\\x4a\\x20\\x7d\\xba\\x0a\\\n\\x35\\x4b\\xc4\\xb5\\x31\\x67\\xd5\\xd6\\xf6\\x6b\\xf9\\x57\\x18\\x9d\\x12\\xae\\\n\\xc0\\x3b\\x10\\x21\\x90\\x11\\x21\\x90\\x11\\x21\\x90\\x11\\x21\\x90\\x11\\x21\\\n\\x90\\x11\\xcf\\xef\\x48\\xb7\\x62\\xf9\\xde\\x68\\x7f\\xce\\x38\\x68\\x76\\x2f\\\n\\x6d\\xa3\\x2d\\x6f\\xda\\x7e\\xc9\\x5c\\xe0\\x0f\\xb1\\x84\\x19\\x11\\x02\\x19\\\n\\x11\\x02\\x99\\x00\\xfe\\x07\\xb0\\x26\\x69\\xd4\\x8b\\xf5\\xfb\\x75\\x00\\x00\\\n\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x0b\\x5e\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x50\\x00\\x00\\x00\\x50\\x08\\x06\\x00\\x00\\x00\\x8e\\x11\\xf2\\xad\\\n\\x00\\x00\\x00\\x04\\x73\\x42\\x49\\x54\\x08\\x08\\x08\\x08\\x7c\\x08\\x64\\x88\\\n\\x00\\x00\\x00\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x04\\x65\\x00\\x00\\x04\\x65\\\n\\x01\\x59\\x90\\x9b\\x60\\x00\\x00\\x00\\x19\\x74\\x45\\x58\\x74\\x53\\x6f\\x66\\\n\\x74\\x77\\x61\\x72\\x65\\x00\\x77\\x77\\x77\\x2e\\x69\\x6e\\x6b\\x73\\x63\\x61\\\n\\x70\\x65\\x2e\\x6f\\x72\\x67\\x9b\\xee\\x3c\\x1a\\x00\\x00\\x0a\\xdb\\x49\\x44\\\n\\x41\\x54\\x78\\x9c\\xed\\x9a\\x79\\x6c\\x23\\x57\\x1d\\xc7\\x3f\\x1e\\xdb\\xf1\\\n\\x95\\xf8\\x88\\xed\\x75\\xae\\x4d\\xdc\\x84\\xcd\\x26\\x59\\xb1\\x6c\\x0f\\x96\\\n\\x2d\\xaa\\x5a\\x28\\xad\\x90\\x8a\\xb8\\xca\\x55\\x10\\xa2\\x40\\xb9\\x8b\\xaa\\\n\\x4a\\x20\\x4e\\x09\\x09\\x89\\x43\\x08\\x90\\x10\\x88\\xa3\\x15\\x47\\x8b\\x04\\\n\\xe5\\x10\\x50\\xd1\\xe3\\x2f\\x40\\x2d\\x57\\x4b\\x29\\xb0\\xa2\\xbb\\xf1\\x6e\\\n\\xee\\xcd\\xb5\\xb9\\xec\\x38\\x71\\x62\\x8f\\x3d\\x19\\x0f\\x7f\\x3c\\x8f\\x99\\\n\\x4c\\x9c\\x78\\xb2\\xf1\\xb6\\x8b\\x98\\x8f\\x14\\x29\\x9e\\xf3\\x37\\xbf\\xf7\\\n\\xde\\xef\\xfd\\x7e\\xdf\\xf7\\xc0\\xc6\\xc6\\xc6\\xc6\\xc6\\xc6\\xc6\\xc6\\xc6\\\n\\xc6\\xc6\\xc6\\xc6\\xc6\\xc6\\xc6\\xc6\\xc6\\xc6\\xc6\\xc6\\xc6\\xc6\\xc6\\xc6\\\n\\xa6\\x0e\\x8e\\x4b\\xb8\\xa7\\x07\\xb8\\x11\\x18\\x02\\xda\\x01\\x3f\\xb0\\x01\\\n\\xa4\\x81\\x71\\xe0\\x5f\\xc0\\xbf\\x81\\x42\\x83\\x6c\\x6c\\x14\\x3e\\xe0\\x38\\\n\\x70\\x35\\xd0\\x07\\x44\\x81\\x66\\x20\\x0f\\x5c\\x04\\xce\\x02\\x7f\\x04\\xa6\\\n\\x2f\\xc7\\xcb\\x9b\\x80\\x3b\\x81\\x67\\x01\\xcd\\xc2\\x9f\\x02\\xfc\\x0e\\xf8\\\n\\x08\\xc2\\xc9\\x2f\\x14\\x1d\\xc0\\xdd\\xc0\\xef\\x81\\x2d\\xac\\xd9\\xfe\\x0c\\\n\\xf0\\x2e\\xc0\\xdd\\x28\\x23\\xde\\x01\\x4c\\x5a\\x7c\\x79\\xad\\xbf\\x2d\\xe0\\\n\\x51\\xe0\\xb5\\x80\\xb3\\x51\\x46\\xed\\x81\\x13\\x78\\x1d\\xf0\\x18\\xa0\\x1e\\\n\\xc0\\xee\\x71\\xe0\\x6d\\xf5\\x5e\\xb6\\xd7\\x10\\x0e\\x00\\x0f\\x00\\x6f\\xd6\\\n\\x0f\\x48\\x92\\x44\\x38\\x1c\\x26\\x14\\x0a\\xe1\\xf3\\xf9\\x68\\x6a\\x6a\\x02\\\n\\xa0\\x5c\\x2e\\xa3\\xaa\\x2a\\x85\\x42\\x81\\xcd\\xcd\\x4d\\x36\\x36\\x36\\xd8\\\n\\xdc\\xdc\\xac\\xf5\\xcc\\x69\\xe0\\x2b\\xc0\\x0f\\x80\\x62\\x3d\\xe3\\xf6\\x89\\\n\\x07\\x78\\x1f\\xf0\\x49\\xe0\\xb0\\xf1\\x84\\xc3\\xe1\\x20\\x10\\x08\\xd0\\xdc\\\n\\xdc\\x4c\\x20\\x10\\xc0\\xeb\\xf5\\xe2\\x74\\x3a\\x91\\x24\\x09\\x80\\x52\\xa9\\\n\\x44\\xa1\\x50\\x20\\x9b\\xcd\\x92\\xcd\\x66\\xd1\\x34\\xcd\\x78\\xfb\\xcf\\x80\\\n\\xbb\\x10\\x43\\x7d\\x07\\xbb\\x39\\x30\\x0a\\x3c\\x0e\\x9c\\xd4\\x0f\\xc4\\xe3\\\n\\x71\\x3a\\x3a\\x3a\\x70\\xb9\\x5c\\x96\\xbe\\x66\\x6b\\x6b\\x8b\\xb5\\xb5\\x35\\\n\\xd2\\xe9\\x34\\xb9\\x5c\\xce\\x7c\\x7a\\x06\\xf8\\x12\\xf0\\x7d\\x44\\x0f\\x3d\\\n\\x08\\x6e\\x84\\xe3\\x3e\\x03\\x74\\x19\\x4f\\x04\\x83\\x41\\x5a\\x5b\\x5b\\x09\\\n\\x85\\x42\\xfb\\xb2\\x7b\\x7e\\x7e\\x9e\\xe5\\xe5\\x65\\xe3\\xe1\\xa7\\x80\\xd7\\\n\\x00\\xab\\xe6\\xeb\\x6b\\x39\\x30\\x84\\x88\\x19\\xd7\\x02\\x78\\xbd\\x5e\\x92\\\n\\xc9\\x24\\x81\\x40\\xc0\\x92\\x01\\xb5\\x90\\x65\\x99\\xe5\\xe5\\x65\\x56\\x56\\\n\\x56\\x28\\x97\\xcb\\xc6\\x53\\x67\\x80\\x7b\\x2b\\xef\\xbb\\x14\\x6e\\x05\\xbe\\\n\\x81\\x98\\xd0\\x00\\x31\\x4a\\xe2\\xf1\\x38\\xf1\\x78\\x1c\\x8f\\xc7\\x73\\xc9\\\n\\x36\\x6f\\x6c\\x6c\\x30\\x35\\x35\\x45\\xb1\\x58\\x1d\\x28\\x7f\\x07\\x6e\\x01\\\n\\xd6\\x8d\\xd7\\x99\\x1d\\x28\\x01\\x8f\\x00\\xb7\\x01\\xf8\\x7c\\x3e\\xfa\\xfb\\\n\\xfb\\x2d\\xb7\\x5e\\x3d\\x14\\x45\\x61\\x61\\x61\\xa1\\x96\\x23\\x7f\\x0d\\x7c\\\n\\x14\\x31\\x1b\\x5a\\xa1\\x03\\xf8\\x36\\xf0\\x86\\xaa\\xe1\\x15\\xc7\\xb5\\xb5\\\n\\xb5\\x35\\xd4\\xde\\xd1\\xd1\\x51\\x0a\\x85\\x6a\\x42\\xf1\\x48\\xe5\\x9d\\x55\\\n\\xe3\\xcd\\x41\\xfd\\x53\\xc0\\x87\\xa0\\xf1\\xce\\x03\\x70\\x3a\\x9d\\x84\\x42\\\n\\x21\\xa2\\xd1\\x28\\x8a\\xa2\\x20\\xcb\\xb2\\x7e\\x6a\\x10\\x78\\x37\\x30\\x85\\\n\\x48\\x27\\xf6\\xe2\\x0e\\xc4\\xa4\\x74\\xb5\\x7e\\xa0\\xb5\\xb5\\x95\\xbe\\xbe\\\n\\x3e\\x22\\x91\\x48\\x35\\xae\\x35\\xca\\xde\\x48\\x24\\xc2\\xda\\xda\\x1a\\x5b\\\n\\x5b\\x5b\\x00\\x47\\x11\\x29\\xdb\\x5f\\xf5\\x6b\\x8c\\x3d\\x70\\x08\\xf8\\x27\\\n\\xe0\\x91\\x24\\x89\\xc1\\xc1\\x41\\xbc\\x5e\\x6f\\xc3\\x8c\\xa9\\x45\\x2e\\x97\\\n\\x63\\x7a\\x7a\\xda\\xe8\\x48\\x80\\x87\\x10\\x8d\\xb8\\x6e\\xba\\x3c\\x04\\xdc\\\n\\x87\\x61\\x66\\xf4\\x7a\\xbd\\x74\\x77\\x77\\xd3\\xd2\\xd2\\x72\\x59\\xed\\x94\\\n\\x65\\x99\\x54\\x2a\\xa5\\x8f\\x1a\\x19\\x78\\x09\\x30\\x02\\xdb\\x7b\\xe0\\x8f\\\n\\x81\\x01\\x80\\x9e\\x9e\\x1e\\x82\\xc1\\xe0\\x65\\x35\\x0a\\xc0\\xe3\\xf1\\x10\\\n\\x8f\\xc7\\x91\\x24\\x89\\x8d\\x8d\\x0d\\xfd\\xf0\\x8b\\x81\\x77\\x02\\x7f\\x01\\\n\\xe6\\x2a\\xc7\\x6e\\x01\\xfe\\x04\\xbc\\x14\\xc4\\xac\\xda\\xd9\\xd9\\xc9\\x55\\\n\\x57\\x5d\\x75\\xa0\\x38\\x67\\x15\\x97\\xcb\\x85\\xdb\\xed\\x66\\x6d\\x6d\\x0d\\\n\\xc0\\x05\\x24\\x11\\x0d\\x5d\\xed\\x81\\x27\\x10\\x15\\x04\\x81\\x40\\x80\\x81\\\n\\x81\\x81\\xcb\\x6e\\x94\\x99\\x1a\\x41\\x7b\\x13\\xf8\\x20\\xc2\\xa1\\x9f\\xa0\\\n\\x62\\xab\\xc7\\xe3\\x21\\x99\\x4c\\xd2\\xdc\\xdc\\xfc\\xbc\\xdb\\x98\\x4a\\xa5\\\n\\xc8\\xe7\\xf3\\x20\\xf2\\xc4\\xe3\\xc0\\x19\\xdd\\x81\\xdf\\xab\\x18\\x4b\\x6f\\\n\\x6f\\x2f\\x91\\x48\\xc4\\xd2\\x03\\x57\\x57\\x57\\xc9\\x64\\x32\\xe4\\xf3\\x79\\\n\\x54\\x55\\xc5\\xe1\\x70\\xe0\\xf3\\xf9\\xaa\\xe9\\x83\\x9e\\x27\\x5a\\x45\\x55\\\n\\x55\\x2e\\x5c\\xb8\\xc0\\xea\\xea\\x8e\\x6c\\x01\\x80\\x48\\x24\\x42\\x4f\\x4f\\\n\\x0f\\x4e\\xe7\\xfe\\xf2\\xf1\\x52\\xa9\\x44\\x3a\\x9d\\x66\\x7d\\x7d\\x1d\\x59\\\n\\x96\\xd1\\x34\\x0d\\xa7\\xd3\\x89\\xdf\\xef\\xa7\\xb5\\xb5\\xd5\\xf2\\xf7\\x66\\\n\\x32\\x19\\x26\\x27\\x27\\xf5\\x9f\\xdf\\x01\\xee\\x76\\x20\\xca\\xb4\\x05\\x20\\\n\\xe2\\xf1\\x78\\x38\\x76\\xec\\x18\\x0e\\xc7\\xde\\x25\\xb2\\x2c\\xcb\\x4c\\x4e\\\n\\x4e\\xea\\xad\\xb1\\x2b\\xc1\\x60\\x90\\xb6\\xb6\\xb6\\x7d\\xc7\\xa8\\xc5\\xc5\\\n\\x45\\x66\\x67\\x67\\xb7\\x1d\\x8b\\x46\\xa3\\x24\\x93\\xc9\\x7d\\x3d\\x27\\x97\\\n\\xcb\\xb1\\xb0\\xb0\\xc0\\xfa\\xba\\x39\\x9c\\x6e\\xc7\\xef\\xf7\\xd3\\xdb\\xdb\\\n\\x5b\\x37\\x1c\\x68\\x9a\\xc6\\xd9\\xb3\\x67\\xf5\\x51\\xb2\\x02\\xb4\\x3b\\x81\\\n\\x9b\\x81\\x0f\\x00\\xc4\\x62\\x31\\x42\\xa1\\xd0\\x9e\\x0f\\x29\\x14\\x0a\\x8c\\\n\\x8c\\x8c\\x18\\x87\\x9a\\x06\\xfc\\x03\\x18\\x06\\x66\\x81\\x08\\xa2\\x2a\\xa0\\\n\\x58\\x2c\\x92\\x4e\\xa7\\x29\\x14\\x0a\\xf8\\xfd\\x7e\\x4b\\x33\\xfa\\xe6\\xe6\\\n\\x26\\x33\\x33\\x33\\xdb\\xd2\\x9c\\x9e\\x9e\\x1e\\x3a\\x3a\\x3a\\xea\\xde\\xab\\\n\\x23\\xcb\\x32\\x53\\x53\\x53\\xcc\\xcf\\xcf\\x1b\\xed\\x04\\x31\\x31\\xfd\\x0d\\\n\\x18\\x45\\x24\\xc5\\xed\\x80\\x43\\x51\\x14\\x32\\x99\\x0c\\xa1\\x50\\x08\\xb7\\\n\\x7b\\xf7\\x12\\xd8\\xe1\\x70\\x50\\x2c\\x16\\xf5\\x2a\\xcb\\x0f\\x3c\\x21\\x01\\\n\\x37\\xe8\\x17\\xd4\\x9b\\x38\\x54\\x55\\x65\\x6c\\x6c\\x4c\\x9f\\xd2\\x41\\xe4\\\n\\x45\\xfd\\x88\\xe0\\x7e\\x2b\\x70\\x13\\xd0\\x0a\\xbc\\x09\\xa1\\x6c\\x00\\x90\\\n\\xcd\\x66\\x19\\x1e\\x1e\\x66\\x6e\\x6e\\xce\\x5c\\x26\\x6d\\x63\\x75\\x75\\x95\\\n\\x91\\x91\\x11\\x14\\x45\\x01\\x44\\x2a\\x75\\xf4\\xe8\\x51\\x62\\xb1\\xd8\\x9e\\\n\\x76\\xe9\\x94\\xcb\\x65\\xc6\\xc7\\xc7\\x19\\x1e\\x1e\\xd6\\x03\\xbe\\xce\\x93\\\n\\xc0\\xed\\x88\\xc6\\xbd\\xa9\\x62\\xeb\\x75\\x88\\xb4\\xe4\\x31\\x10\\x15\\xc8\\\n\\xd8\\xd8\\x18\\xaa\\xaa\\xee\\xf9\\x0e\\x93\\x8f\\x6e\\x90\\x80\\x6b\\x40\\x78\\\n\\xb7\\x5e\\x60\\x5e\\x5c\\x5c\\xa4\\x54\\x2a\\xe9\\x3f\\x1f\\x42\\x24\\x95\\x63\\\n\\xa6\\xcb\\x54\\x44\\x62\\x7c\\x13\\x70\\x3d\\x42\\xdd\\x40\\xd3\\x34\\x16\\x16\\\n\\x16\\x38\\x77\\xee\\x9c\\x39\\x6d\\x41\\xd3\\x34\\x66\\x67\\x67\\x99\\x98\\x98\\\n\\xa8\\xf6\\xbc\\x44\\x22\\xc1\\xe0\\xe0\\xa0\\xe5\\xc9\\x22\\x9b\\xcd\\x72\\xfa\\\n\\xf4\\x69\\x73\\x2d\\xfb\\x34\\xf0\\x32\\xe0\\x15\\xc0\\x6f\\x30\\x24\\xc0\\x15\\\n\\x46\\x11\\xc2\\xc3\\x2f\\x40\\xc4\\xca\\xa5\\xa5\\xa5\\x3d\\xdf\\xd3\\xd2\\xd2\\\n\\x62\\x0c\\x71\\xd7\\x4a\\x08\\x6d\\x0c\\xb7\\xdb\\x5d\\x37\\x09\\x5d\\x59\\x59\\\n\\xd1\\xff\\x5d\\x44\\x4c\\x3a\\x66\\x83\\xcc\\x3c\\x0d\\x9c\\x02\\xde\\x53\\xb9\\\n\\x87\\x7c\\x3e\\x4f\\x2a\\x95\\xaa\\xd6\\x9a\\x85\\x42\\x81\\xe1\\xe1\\x61\\x16\\\n\\x17\\x17\\xd1\\xed\\xe8\\xef\\xef\\xa7\\xab\\xab\\xab\\x6e\\x2c\\xd6\\x99\\x98\\\n\\x98\\x60\\x7c\\x7c\\xdc\\xe8\\xb8\\x32\\xf0\\x55\\xe0\\xe5\\x54\\x1a\\x70\\x0f\\\n\\xca\\x88\\x10\\xb6\\x6c\\xfa\\xc6\\x9a\\x48\\x92\\x64\\x1c\\xe6\\x7d\\x2e\\x2a\\\n\\x7a\\x5d\\xbd\\xf8\\x54\\x28\\x14\\xaa\\x43\\x0b\\xf8\\x29\\xb0\\x43\\x21\\xd8\\\n\\x05\\x0d\\xa1\\xea\\x3c\\x0e\\xfc\\x08\\xb8\\xad\\x5c\\x2e\\x33\\x3d\\x3d\\xcd\\\n\\xca\\xca\\x0a\\xb2\\x2c\\x57\\x7b\\x5d\\x28\\x14\\x22\\x99\\x4c\\x5a\\xae\\x7e\\\n\\x8a\\xc5\\x22\\xe7\\xcf\\x9f\\x37\\xda\\x05\\x22\\x0e\\xdf\\x8c\\xe8\\x5d\\x56\\\n\\x59\\x43\\x8c\\xa8\\x7b\\x4a\\xa5\\x12\\xb2\\x2c\\xef\\x59\\x44\\xb8\\x5c\\x2e\\\n\\x7d\\x24\\xb6\\x4b\\x08\\xd9\\x6a\\xcf\\xe0\\x09\\x18\\x87\\x2e\\x08\\xc5\\x79\\\n\\xbf\\x2c\\x21\\x14\\x8d\\x3b\\xa9\\x48\\x43\\xf9\\x7c\\x9e\\x72\\xb9\\x8c\\xc3\\\n\\xe1\\xa0\\xa3\\xa3\\x83\\xbe\\xbe\\x3e\\xcb\\xce\\x5b\\x5c\\x5c\\xe4\\xcc\\x99\\\n\\x33\\x46\\xe7\\x95\\x81\\x2f\\x22\\xa4\\xac\\xfd\\x38\\x4f\\xe7\\xb4\\xfe\\x8f\\\n\\xe9\\x5b\\x77\\x60\\xf0\\x55\\x4b\\xe3\\x0a\\x5d\\xeb\\x9c\\x42\\xc8\\xeb\\x80\\\n\\x88\\xbd\\xdd\\xdd\\xdd\\x96\\x27\\x0a\\x3d\\x96\\xce\\xcf\\xcf\\x9b\\x4f\\xe5\\\n\\x11\\x22\\xe8\\xa5\\x72\\x29\\xcb\\x1b\\x48\\x88\\x8c\\xdf\\x38\\xb3\\xd6\\xc4\\\n\\x94\\x14\\x5f\\xbd\\xdb\\x75\\x7b\\x70\\x04\\x21\\xa8\\x7e\\x98\\x8a\\xb1\\x6e\\\n\\xb7\\x9b\\xa1\\xa1\\x21\\xcb\\xce\\xd3\\x87\\xac\\xee\\x3c\\xa7\\xd3\\x69\\x94\\\n\\xd9\\x9a\\x81\\x1f\\x02\\xbf\\x02\\xac\\x3d\\x70\\x3b\\xd5\\x6f\\xaa\\x57\\x00\\\n\\x18\\x7a\\x7d\\x4e\\xa2\\x22\\x21\\x99\\xe2\\xc8\\x0e\\x7c\\x3e\\x9f\\xb1\\xeb\\\n\\xde\\x01\\x58\\xcd\\x8e\\x1d\\xc0\\xd7\\x80\\x73\\x18\\x94\\xe2\\x48\\x24\\xc2\\\n\\xf1\\xe3\\xc7\\x2d\\x0b\\x16\\x99\\x4c\\x86\\x54\\x2a\\x55\\x55\\xba\\x9b\\x9b\\\n\\x9b\\x19\\x1a\\x1a\\x62\\x60\\x60\\x80\\xee\\xee\\x6e\\xe3\\x04\\x78\\x3b\\xf0\\\n\\x1c\\x62\\x5d\\xc3\\x6a\\xaf\\x0a\\x51\\x11\\x29\\x9a\\x9a\\x9a\\xea\\xda\\x64\\\n\\xe8\\x6c\\x17\\x25\\x2a\\xdd\\x5e\\x51\\x14\\xb3\\x46\\xb7\\x83\\x78\\x3c\\xae\\\n\\xff\\x7b\\x08\\xa1\\x8c\\xd4\\xd3\\x8e\\x4e\\x21\\x66\\xe2\\x8f\\xe9\\xd7\\x3a\\\n\\x1c\\x0e\\xfa\\xfa\\xfa\\xe8\\xed\\xed\\xad\\x73\\xab\\x40\\x4f\\x71\\x26\\x27\\\n\\x27\\xab\\x39\\x5a\\x22\\x91\\xa0\\xbf\\xbf\\xbf\\xda\\x53\\xe2\\xf1\\x38\\x83\\\n\\x83\\x83\\xf8\\xfd\\x7e\\xfd\\xb6\\x36\\xe0\\x41\\x84\\xec\\x74\\xb2\\xc6\\x63\\\n\\x8d\\x48\\xc0\\xfd\\x40\\x1c\\xa8\\x3b\\x1a\\xca\\xe5\\xb2\\xb1\\xb3\\x8d\\x4b\\\n\\x88\\x2a\\x02\\x4d\\xd3\\x8c\\x8a\\x48\\x4d\\x12\\x89\\x84\\xb1\\xdc\\x79\\x3b\\\n\\xf0\\x30\\xf0\\x22\\xd3\\x65\\x4e\\x44\\x2f\\x78\\x12\\x21\\x85\\x9f\\x04\\xe1\\\n\\xb8\\x70\\x38\\xcc\\x89\\x13\\x27\\x08\\x87\\xc3\\x75\\xbe\\x49\\x90\\xcb\\xe5\\\n\\x48\\xa5\\x52\\xd5\\x14\\x47\\x92\\x24\\x7a\\x7b\\x7b\\x6b\\xa6\\x38\\x5e\\xaf\\\n\\x97\\x81\\x81\\x01\\x12\\x89\\x84\\xf1\\xdc\\x29\\x44\\xe5\\xf1\\x04\\xf0\\x46\\\n\\x76\\x36\\xf8\\x11\\xe0\\xb7\\xc0\\x5b\\x41\\x08\\x15\\x89\\x44\\xa2\\xae\\x4d\\\n\\x86\\x74\\xe9\\x59\\x07\\xf0\\x4a\\xe0\\x0f\\x20\\x1c\\xd4\\xd5\\xd5\\xb5\\xdb\\\n\\xbd\\xc0\\x7f\\x4b\\x39\\x43\\x37\\xd6\\x4b\\xb9\\x2c\\xa2\\xae\\x3e\\x01\\x6c\\\n\\x4b\\xd7\\xc3\\xe1\\x30\\x9d\\x9d\\x9d\\xfb\\xd2\\x17\\x2f\\x5e\\xbc\\xb8\\x6d\\\n\\xa2\\xf0\\x7a\\xbd\\xf4\\xf5\\xf5\\x59\\x7a\\x86\\x2c\\xcb\\xcc\\xce\\xce\\x9a\\\n\\xab\\x11\\x10\\xa5\\xdc\\x69\\xa0\\x84\\xa8\\x4a\\xae\\xa1\\x32\\xcc\\x5d\\x2e\\\n\\x17\\xfd\\xfd\\xfd\\xf8\\x7c\\x3e\\xf3\\x3d\\xdb\\x98\\x99\\x99\\x31\\x26\\xdb\\\n\\x37\\x3a\\x10\\xfa\\xd6\\x02\\x10\\xbd\\x52\\xc4\\x84\\x89\\x89\\x89\\x1d\\x8a\\\n\\x4c\\x7b\\x7b\\xfb\\xbe\\xea\\x61\\xb8\\xec\\x62\\xc2\\x32\\x15\\x31\\xa1\\x0c\\\n\\xf4\\x02\\xd7\\xa9\\xaa\\x8a\\xcf\\xe7\\xab\\xdb\\x0a\\x2e\\x97\\x8b\\x78\\x3c\\\n\\x8e\\xcf\\xe7\\x43\\xd3\\x34\\x54\\x55\\xa5\\x5c\\x2e\\xe3\\x74\\x3a\\x69\\x6e\\\n\\x6e\\x26\\x1e\\x8f\\x93\\x4c\\x26\\x39\\x74\\xe8\\xd0\\xbe\\x04\\x4f\\x55\\x55\\\n\\x99\\x9c\\x9c\\x24\\x9b\\xcd\\xee\\x38\\xb7\\xb1\\xb1\\x41\\xa1\\x50\\x20\\x14\\\n\\x0a\\x59\\x96\\xed\\x3d\\x1e\\x0f\\xd1\\x68\\x94\\x58\\x2c\\x86\\xcb\\xe5\\xaa\\\n\\xda\\xaa\\x69\\x1a\\x6e\\xb7\\x9b\\x60\\x30\\x48\\x47\\x47\\x07\\x87\\x0f\\x1f\\\n\\xb6\\x94\\x7f\\xae\\xae\\xae\\x1a\\x2b\\x95\\x07\\x81\\x47\\xaf\\x64\\x41\\x55\\\n\\x03\\xbe\\x8c\\x58\\xb9\\xbb\\x1f\\x91\\xa6\\x5c\\x71\\x82\\xaa\\xae\\x4c\\x2e\\\n\\x20\\x74\\xfe\\x41\\x45\\x51\\x70\\xbb\\xdd\\x07\\x5a\\xc6\\xdc\\x0f\\x7a\\x59\\\n\\x37\\x33\\x33\\x63\\x54\\x42\\xc6\\x10\\xb1\\xf9\\x21\\x84\\x03\\x7f\\x82\\xa8\\\n\\x6b\\xbb\\x54\\x55\\x25\\x9d\\x4e\\xa3\\x28\\x0a\\xc1\\x60\\xd0\\x72\\xbd\\x7c\\\n\\x50\\x96\\x96\\x96\\x48\\xa7\\xd3\\xfa\\xcf\\x5f\\x22\\x04\\xd5\\x6d\\x6b\\x22\\\n\\xcf\\x21\\x16\\xa8\\x5d\\xb9\\x5c\\x8e\\x48\\x24\\xd2\\xd0\\x15\\xb9\\x5a\\xac\\\n\\xaf\\xaf\\x33\\x3e\\x3e\\x6e\\x8c\\x51\\x1a\\xf0\\x5d\\xc4\\x8c\\x39\\x67\\xb8\\\n\\x74\\x0d\\x51\\x7f\\xc7\\x10\\xeb\\xd5\\x8e\\x7c\\x3e\\x4f\\x36\\x9b\\xc5\\xe7\\\n\\xf3\\x5d\\xf6\\x75\\x11\\x59\\x96\\x99\\x98\\x98\\xd0\\x67\\x5f\\x19\\x31\\x6b\\\n\\xa7\\x61\\xbb\\x03\\x97\\x11\\x52\\xd4\\xab\\xf4\\x94\\xa6\\xd1\\xcb\\x84\\x3a\\\n\\xa5\\x52\\xa9\\x2a\\x78\\x1a\\x66\\xf3\\x39\\xe0\\x2d\\xc0\\xb7\\xa8\\xbd\\x5b\\\n\\x41\\x41\\x2c\\x67\\x3e\\x83\\xe8\\x9d\\x2d\\x5b\\x5b\\x5b\\xa4\\xd3\\x69\\x64\\\n\\x59\\x26\\x10\\x08\\xec\\x5b\\xea\\xb7\\x82\\xa2\\x28\\x8c\\x8d\\x8d\\x19\\x73\\\n\\xbf\\x4f\\x23\\x74\\x50\\xa0\\xce\\xc2\\xba\\xd7\\xeb\\xe5\\xc8\\x91\\x23\\xfb\\\n\\x5e\\xdb\\xd8\\x8d\\x52\\xa9\\x54\\x5d\\x58\\x37\\x49\\x4f\\x0f\\x00\\x1f\\xa7\\\n\\xc6\\xd6\\x89\\x5d\\x68\\x05\\xbe\\x8e\\xa8\\x36\\xaa\\x09\\x7a\\x2c\\x16\\xa3\\\n\\xad\\xad\\xad\\xa1\\xf6\\x8e\\x8e\\x8e\\x1a\\xf5\\xcb\\x1d\\x0b\\xeb\\x75\\xb7\\\n\\x76\\x34\\x35\\x35\\x91\\x4c\\x26\\x0f\\xb4\\xf6\\xba\\xb9\\xb9\\xc9\\xf2\\xf2\\\n\\x32\\x99\\x4c\\xc6\\xac\\x48\\x3f\\x05\\xdc\\x83\\xd8\\x36\\x77\\x29\\x9c\\x04\\\n\\xbe\\x89\\x10\\x4d\\x01\\xe1\\xc8\\xd6\\xd6\\x56\\xe2\\xf1\\xf8\\x81\\xe2\\xf8\\\n\\xfa\\xfa\\x3a\\x17\\x2e\\x5c\\x30\\x2a\\x33\\x96\\xb6\\x76\\xe8\\x44\\x11\\xde\\\n\\xbe\\x5e\\x3f\\x10\\x8b\\xc5\\xe8\\xec\\xec\\xb4\\x1c\\x17\\x4b\\xa5\\x12\\xd9\\\n\\x6c\\x96\\x95\\x95\\x15\\xe3\\xd6\\x08\\x9d\\x51\\xe0\\x73\\xc0\\xcf\\x11\\x71\\\n\\xef\\x20\\x38\\x10\\x5b\\xf0\\x3e\\x4f\\x45\\x1c\\xd6\\xf1\\xfb\\xfd\\x44\\xa3\\\n\\x51\\xc2\\xe1\\xb0\\xe5\\x5e\\xb9\\xb5\\xb5\\xc5\\xdc\\xdc\\x9c\\x59\\x58\\xfd\\\n\\x33\\x42\\xb9\\xb6\\xb4\\xb9\\x48\\xc7\\x8b\\x68\\xdd\\xf7\\xeb\\x07\\xcc\\xdb\\\n\\xdb\\x3c\\x1e\\x0f\\x92\\x24\\xa1\\xaa\\x2a\\x8a\\xa2\\x58\\xdd\\xde\\xf6\\x05\\\n\\x84\\xb0\\x7a\\xd0\\x5d\\x59\\x66\\xdc\\xc0\\x7b\\x81\\xcf\\x62\\xda\\xde\\x06\\\n\\x6c\\xdb\\xde\\xa6\\x0b\\x23\\x4e\\xa7\\x93\\x72\\xb9\\x4c\\xb1\\x58\\xdc\\x6d\\\n\\x7b\\x9b\\x86\\xa8\\xf9\\xef\\xe5\\x00\\xdb\\xf1\\x6e\\x03\\xce\\xf3\\xbf\\xb5\\\n\\xc1\\xf2\\xf5\\x1c\\x7c\\x83\\x65\\x0a\\x78\\x75\\xa3\\x8c\\x72\\xb3\\xbf\\x2d\\\n\\xbe\\x39\\xc4\\x22\\xce\\x5d\\x08\\x65\\xe4\\x85\\xa2\\x1d\\x91\\x9a\\x3d\\x5c\\\n\\xb1\\xa9\\xe1\\x5b\\x7c\\x1b\\xbd\\xc9\\x7c\\x04\\xa1\\x7e\\x9c\\x45\\xb4\\xfe\\\n\\x95\\x84\\x13\\x38\\x86\\x50\\x68\\x8e\\xf0\\x3c\\x6f\\x32\\xb7\\xb1\\xb1\\xb1\\\n\\xb1\\xb1\\xb1\\xb1\\xb1\\xb1\\xb1\\xb1\\xb1\\xb1\\xb1\\xb1\\xb1\\xb1\\xb1\\xb1\\\n\\xb1\\xb1\\xb1\\xb1\\xb1\\xf9\\x3f\\xe6\\x3f\\xbb\\x18\\xad\\xa4\\xf4\\xd8\\xcd\\\n\\xc3\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x09\\x70\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x64\\x00\\x00\\x00\\x64\\x08\\x06\\x00\\x00\\x00\\x70\\xe2\\x95\\x54\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0e\\xc3\\x00\\x00\\x0e\\xc3\\x01\\xc7\\x6f\\\n\\xa8\\x64\\x00\\x00\\x09\\x05\\x49\\x44\\x41\\x54\\x78\\x5e\\xed\\x9d\\x59\\x6c\\\n\\x1b\\x45\\x18\\xc7\\xcd\\x25\\x0e\\xd5\\xce\\x3a\\x71\\x63\\x27\\x4d\\xb9\\x8f\\\n\\x3e\\x20\\x28\\x14\\x48\\xec\\xf8\\x48\\xda\\x34\\x71\\x0e\\x21\\x5a\\x5a\\xca\\\n\\x5d\\x0a\\xa4\\x1c\\x82\\x4a\\x2d\\x88\\x52\\x40\\xa2\\xe5\\x01\\x28\\x88\\xab\\\n\\x48\\x80\\xb8\\x11\\x08\\x1e\\x10\\x02\\x54\\xe0\\x01\\x1e\\x38\\xd2\\x36\\x69\\\n\\x1b\\xe7\\x68\\x10\\x34\\xa5\\x69\\x20\\xd8\\x4e\\xe8\\x2d\\x7a\\xd1\\x24\\xc4\\\n\\xcc\\x17\\x66\\xac\\x99\\xf1\\x97\\x78\\x37\\x08\\xad\\x77\\x33\\x3f\\xe9\\xff\\\n\\xe2\\xfd\\xef\\xac\\xbf\\xef\\x6f\\xc7\\x3b\\xde\\x1d\\xc7\\xa1\\x50\\x28\\x14\\\n\\x0a\\x85\\x42\\xa1\\x50\\x28\\x14\\x0a\\x85\\x42\\xa1\\x50\\x4c\\x36\\x56\\x2e\\\n\\xaa\\x39\\x7b\\xd5\\x82\\x9a\\xa7\\x27\\xa3\\xa0\\x76\\xda\\x86\\xdc\\x61\\xe5\\\n\\xc2\\x68\\x70\\xd5\\xc2\\x68\\x6a\\x32\\x0a\\x6a\\xa7\\x6d\\xc8\\x1d\\x54\\x20\\\n\\x39\\x86\\x0a\\x24\\xc7\\x50\\x81\\xe4\\x18\\x2a\\x90\\x1c\\x63\\xdc\\x40\\x16\\\n\\x44\\xbf\\xb1\\x85\\xb0\\xda\\x88\\x2c\\x17\\x08\\xb5\\x58\\x1e\\xac\\x36\\x90\\\n\\x0a\\xc4\\x24\\xb0\\xda\\x40\\x2a\\x10\\x93\\xc0\\x6a\\x03\\xa9\\x40\\x4c\\x02\\\n\\xab\\x0d\\xa4\\x02\\x31\\x09\\xac\\x36\\x90\\x0a\\xc4\\x24\\xb0\\xda\\x40\\xb6\\\n\\x09\\x24\\x5e\\x5b\\xbc\\x28\\x59\\xe7\\xdb\\x1e\\x0b\\x6a\\xc3\\xcd\\x81\\xbc\\\n\\xbd\\xb1\\x8a\\x82\\x39\\x74\\x13\\x4a\\xa2\\xa1\\xc8\\x93\\xac\\xf5\\x7d\\xb8\\\n\\xab\\xba\\xf0\\x68\\x53\\xa9\\x73\\x38\\x16\\xd6\\x3e\\x25\\x83\\x9f\\x48\\x37\\\n\\x4f\\x08\\xf2\\x1c\\x2e\\x24\\xcf\\xe1\\xeb\\xed\\x73\\x3c\\x83\\x4d\\x7e\\xe7\\\n\\xf1\\xb6\\xb0\\xf6\\x3c\\xdd\\x94\\x01\\x56\\x1b\\xc8\\x16\\x81\\x90\\x26\\xdc\\\n\\x9c\\xac\\x2b\\x4a\\x81\\x62\\x21\\x77\\xea\\xdb\\xab\\xa6\\xa4\\x7e\\x28\\x75\\\n\\xfe\\xdd\\x31\\xc7\\x73\\x19\\xb5\\x08\\xf4\\x2d\\x28\\x39\\x9d\\xec\\xd3\\x09\\\n\\xfe\\xde\\x1a\\xef\\xa8\\x1f\\xb4\\x25\\x98\\xd7\\x44\\x2d\\x86\\xe9\\xab\\x2f\\\n\\x99\\x96\\xa8\\x2b\\xda\\x0d\\x63\\x92\\x40\\xd2\\x63\\xb6\\x85\\xdd\\xeb\\xa8\\\n\\x45\\x00\\xab\\x0d\\x64\\xf9\\x40\\xf6\\x46\\xf3\\x5d\\xe4\\x95\\xbe\\x57\\x0e\\\n\\x04\\xb4\\xb9\\x5c\\xeb\\xa5\\x36\\x01\\x12\\xc6\\x63\\xcc\\xcf\\x07\\xf2\\xdd\\\n\\xbf\\x0d\\xac\\xa3\\x36\\x43\\xc0\\xbb\\x8d\\x8d\\xc9\\x07\\x02\\x2f\\x8c\\x9f\\\n\\x6a\\x3c\\x45\\xd4\\x96\\x06\\xab\\x0d\\x64\\xf9\\x40\\x12\\xb5\\x45\\x8d\\xac\\\n\\x11\\x20\\x3e\\x90\\xef\\x4a\\x9d\\xa9\\xb6\\x2a\\xcf\\x05\\xd4\\x3a\\x0a\\x19\\\n\\xe0\\x04\\x12\\x48\\x1f\\xf3\\xf3\\x81\\x80\\xb6\\x06\\xb5\\x56\\x6a\\xd5\\x4d\\\n\\x32\\xea\\x9b\\x4a\\xde\\x1d\\x83\\x6c\\x4c\\x3e\\x10\\x50\\x6b\\xd8\\xfd\\x2e\\\n\\xb5\\xa6\\xc1\\x6a\\x03\\x59\\x2e\\x90\\x91\\xd6\\xd5\\x3d\\xbc\\xf6\\x3f\\xe0\\\n\\x3f\\xc4\\x1a\\x01\\xe2\\x03\\x01\\xc5\\x1f\\x9d\\x7d\\x80\\xf7\\x0f\\x7e\\xb9\\\n\\x2c\\x1d\\x06\\x48\\x0e\\x64\\x53\\x38\\x7f\\x84\\xf7\\xeb\\xd1\\xd1\\x77\\x6e\\\n\\x1e\\xe0\\xc7\\x94\\x03\\x69\\x6f\\x28\\x19\\x92\\xf7\\xc1\\x6a\\x03\\x59\\x2e\\\n\\x90\\x54\\xeb\\x6a\\x41\\x7b\\x96\\xce\\x4c\\x37\\x02\\x24\\x07\\xb2\\xf3\\x9e\\\n\\xcb\\x05\\xff\\x5f\\x1f\\xdd\\x21\\xf8\\xe5\\x40\\xbe\\x2f\\x9d\\x22\\xf8\\xf5\\\n\\xe8\\xf0\\x4b\\xf3\\x84\\x31\\xe5\\x40\\x36\\x57\\x7a\\x32\\xf6\\xc1\\x6a\\x03\\\n\\x59\\x3f\\x90\\xdb\\x2f\\x16\\x9a\\x21\\x07\\xf2\\x4b\\xe3\\x4c\\xc1\\x7f\\xec\\\n\\x83\\xdb\\x04\\xbf\\x1c\\x08\\xfc\\x99\\xe3\\xfd\\x7a\\x74\\xe8\\x85\\x6b\\x84\\\n\\x31\\xe5\\x40\\x9a\\xc3\\xf9\\x19\\xfb\\x60\\xb5\\x81\\x2c\\x1f\\xc8\\xbe\\xfb\\\n\\xae\\x10\\x9a\\x21\\x07\\xf2\\xeb\\x8a\\x80\\xe0\\x3f\\xfe\\xc9\\xdd\\x82\\x5f\\\n\\x0e\\x64\\x83\\x3f\\x4f\\xf0\\xeb\\xd1\\x91\\xd7\\x16\\x09\\x63\\x66\\x7c\\x86\\\n\\xcc\\xf5\\x65\\xec\\x83\\xd5\\x06\\xb2\\x60\\x20\\x6b\\x16\\xf2\\xda\\xbb\\xf4\\\n\\xd2\\xcf\\xf8\\x66\\xc8\\x81\\xf4\\x3d\\x18\\x7c\\x91\\xf7\\x0f\\x7f\\xb3\\xfc\\\n\\xd6\\x44\\x5d\\xf1\\x30\\xf3\\xcb\\x81\\x6c\\x09\\xe7\\x1f\\xe0\\xfd\\x7a\\x74\\\n\\x78\\xdd\\xfc\\x87\\xf9\\xe7\\x20\\x07\\xd2\\x11\\xf5\\xed\\x90\\xf7\\xc1\\x6a\\\n\\x03\\x59\\x2e\\x10\\x6a\\x49\\x43\\x4e\\x37\\xaf\\xe0\\x9b\\xc1\\x07\\xd2\\x54\\\n\\xe6\\x1c\\x24\\x3b\\x64\\x4c\\xf6\\xc8\\x19\\xd1\\x7a\\xe6\\x97\\x03\\x89\\x85\\\n\\xb4\\x57\\xa8\\x4d\\x37\\x70\\xe6\\x46\\xce\\xf6\\x76\\xb1\\x31\\xe5\\x40\\x3a\\\n\\x83\\xee\\x1b\\xa8\\x35\\x0d\\x56\\x1b\\xc8\\xf2\\x81\\x00\\xe4\\x34\\xf6\\x53\\\n\\xd6\\x0c\\x3e\\x90\\xb1\\x26\\x65\\x10\\x22\\x69\\xe0\\xe8\\xbb\\x84\\x0f\\x64\\\n\\x63\\x99\\xf3\\xaf\\xde\\x88\\xe3\\x34\\x6a\\x33\\x44\\x22\\x5a\\x74\\x13\\x16\\\n\\x48\\x4b\\xb9\\x2b\\x41\\x2d\\x02\\x58\\x6d\\x20\\x5b\\x04\\x12\\xbf\\xa6\\xb8\\\n\\x20\\x59\\x5b\\xd4\\xca\\x07\\x42\\x66\\xdd\\xcd\\x74\\x33\\x4a\\x3c\\x5a\\x7c\\\n\\x3b\\x79\\xa7\\x0c\\xb1\\x40\\x9a\\x4a\\x9d\\x43\\xb1\\x2c\\x5f\\xb7\\x64\\x83\\\n\\xbc\\x30\\xd6\\xf2\\x81\\x6c\\xf4\\x3b\\x0f\\xc7\\x2a\\x7d\\x67\\xd1\\xcd\\x02\\\n\\x58\\x6d\\x20\\x5b\\x04\\x02\\xa4\\x66\\x39\\x4e\\x21\\xaf\\xfc\\x6b\\xbb\\x2a\\\n\\xf2\\x5f\\xef\\x88\\x68\\xb7\\xd0\\x87\\xc7\\xa5\\xaf\\xba\\xe4\\xfc\\xde\\xaa\\\n\\xc2\\x47\\x62\\x61\\xed\\x8d\\x0e\\xbf\\xb7\\x90\\x3e\\xfc\\x9f\\x20\\x93\\xc4\\\n\\x2b\\xbb\\xab\\x3c\\x6b\\xdb\\xc3\\xda\\xb3\\x89\\x59\\x8e\\x33\\xe8\\xc3\\x19\\\n\\x60\\xb5\\x81\\x6c\\x13\\x88\\xd5\\xc0\\x6a\\x03\\xa9\\x40\\x4c\\x02\\xab\\x0d\\\n\\xa4\\x02\\x31\\x09\\xac\\x36\\x90\\x0a\\xc4\\x24\\xb0\\xda\\x40\\x2a\\x10\\x93\\\n\\xc0\\x6a\\x03\\xd9\\x2a\\x10\\xb8\\x48\\xd4\\x55\\x99\\x3f\\xbf\\x35\\x32\\xc5\\\n\\x43\\x1f\\x1a\\x17\\x38\\x33\\xdb\\x55\\xe5\\x8b\\xc4\\x0c\\x9c\\xee\\x1a\\x3d\\\n\\xc6\\x58\\x60\\xb5\\x81\\x6c\\x11\\x48\\x2a\\xe2\\x38\\x99\\xcc\\x29\\x5e\\x25\\\n\\x93\\xbd\\xbf\\x61\\x1e\\xf2\\x7d\\xa9\\x73\\x24\\x16\\xd4\\x9e\\xa1\\x9b\\x51\\\n\\x06\\xa2\\x85\\x65\\xc4\\xff\\x2b\\x9b\\x87\\xb4\\x04\\x5c\\xfd\\x5d\\x21\\xf7\\\n\\x74\\xba\\x39\\x83\\x89\\x1c\\x63\\x3c\\xb0\\xda\\x40\\xb6\\x08\\x84\\x34\\xe9\\\n\\x19\\x36\\x4b\\x66\\x13\\x43\\xf8\\xd6\\xb6\\x33\\xe4\\xbe\\x93\\x5a\\x04\\x7e\\\n\\x8f\\x4e\\x2b\\x21\\x93\\xb8\\x7d\\xe0\\xe7\\x67\\xea\\x64\\x56\\x3d\\x40\\x2d\\\n\\x19\\x18\\x3d\\x46\\x36\\xb0\\xda\\x40\\x96\\x0f\\xa4\\xbf\\xc6\\x7b\\x36\\x7f\\\n\\xb5\\x8e\\x35\\x0b\\xb4\\xc9\\xef\\x3a\\x48\\x6d\\x02\\x24\\x8c\\xd7\\x99\\x5f\\\n\\xfe\\x2e\\xab\\x2d\\xe4\\x7e\\x90\\xda\\xd2\\x4c\\xe4\\x18\\xd9\\xc0\\x6a\\x03\\\n\\x59\\x2e\\x90\\xd4\\xb6\\xa7\\xdc\\xbc\\xfa\\xaf\\x3d\\x67\\x0d\\x6b\\x94\\xdc\\\n\\x2c\\xd0\\x8e\\x45\\x33\\x1a\\x78\\xff\\xa1\\xcf\\x97\\x79\\x49\\x73\\xd3\\x57\\\n\\x19\\xe5\\x40\\x36\\x07\\xdd\\xbd\\xbc\\x1f\\x64\\xf4\\x18\\x7a\\x84\\xd5\\x06\\\n\\xb2\\x5e\\x20\\xd2\\x75\\x85\\xfd\\x2b\\xca\\xd2\\x8d\\xc2\\x9a\\xd5\\xf7\\x70\\\n\\x44\\xf0\\x0f\\xae\\xbf\\x4f\\xf0\\xcb\\x81\\x6c\\x0c\\x66\\x5e\\x0f\\x31\\x7a\\\n\\x0c\\x3d\\xc2\\x6a\\x03\\x59\\x3e\\x90\\x3d\\x77\\x5e\\x32\\x6e\\xb3\\x7e\\x59\\\n\\x2a\\x5e\\xc2\\x3d\\xf6\\xc1\\x12\\xc1\\x2f\\x07\\x82\\x5d\\x31\\x34\\x7a\\x0c\\\n\\x3d\\xc2\\x6a\\x03\\xd9\\x3e\\x90\\x9d\\x77\\x5d\\x26\\xf8\\xff\\x8f\\x40\\xe4\\\n\\x63\\xe8\\x11\\x56\\x1b\\xc8\\xf2\\x81\\xec\\x5f\\x9e\\xe5\\xcf\\xc9\\xaa\\x0a\\\n\\xc1\\x3f\\xf8\\xc5\\xfd\\x82\\x3f\\xe3\\x4f\\x56\\xb9\\x26\\xf8\\x41\\x46\\x8f\\\n\\xa1\\x47\\x58\\x6d\\x20\\xeb\\x05\\x22\\x7d\\x38\\x66\\xfb\\xc0\\xed\\xbe\\x7e\\\n\\x46\\x3d\\xef\\x1f\\xf9\\xe4\\xee\\x42\\xf2\\xa1\\xfe\\x27\\xf3\\x67\\x7c\\xa8\\\n\\x87\\xb4\\x1e\\xde\\x0f\\x32\\x7a\\x0c\\x3d\\xc2\\x6a\\x03\\x59\\x2e\\x10\\x6a\\\n\\x49\\x13\\xaf\\x2e\\x9e\\x9e\\xac\\xf5\\x1d\\xc7\\x9a\\xd5\\x1c\\x70\\x1d\\xa0\\\n\\x36\\x01\\x98\\xe0\\x31\\xbf\\x1c\\x48\\x67\\x24\\x6f\\x39\\xb5\\xa5\\x99\\xc8\\\n\\x31\\xb2\\x81\\xd5\\x06\\xb2\\x7c\\x20\\x00\\x99\\x57\\x3c\\x29\\x37\\xeb\\xdf\\\n\\x49\\x9b\\xb6\\x98\\x5a\\x04\\xf8\\xfb\\x70\\xf9\\x40\\x5a\\x02\\x79\\x71\\x6a\\\n\\xc9\\xc0\\xe8\\x31\\xb2\\x81\\xd5\\x06\\xb2\\x45\\x20\\xa9\\x85\\x8e\\x93\\x48\\\n\\xc3\\x5e\\x24\\xb3\\xe9\\x61\\x68\\x16\\xdc\\x4f\\xdb\\x1e\\x72\\xaf\\xa1\\x9b\\\n\\x51\\xe8\\x75\\xf5\\x1e\\x16\\x08\\x84\\x81\\xdd\\x83\\xcb\\x98\\xc8\\x31\\xc6\\\n\\x03\\xab\\x0d\\x64\\x8b\\x40\\x18\\x7f\\xd4\\x4d\\xf5\\xfd\\x34\\x47\\xab\\xff\\\n\\xb1\\xda\\x95\\x4f\\x1f\\x1a\\x17\\xf8\\x7e\\xaa\\x7b\\xae\\xb7\\xb4\\xab\\xd2\\\n\\x1d\\xa0\\x0f\\x65\\xc5\\xe8\\x31\\xc6\\x02\\xab\\x0d\\x64\\xab\\x40\\xac\\x04\\\n\\x56\\x1b\\x48\\x05\\x62\\x12\\x58\\x6d\\x20\\x15\\x88\\x49\\x60\\xb5\\x81\\x54\\\n\\x20\\x26\\x81\\xd5\\x06\\x52\\x81\\x98\\x04\\x56\\x1b\\xc8\\x36\\x81\\xec\\x88\\\n\\x9e\\x7f\\x2a\\x99\\x5b\\xdc\\xd0\\x55\\x51\\xf0\\x76\\x67\\xc4\\xd3\\x48\\x1f\\\n\\xfe\\x4f\\xc0\\x72\\x39\\x72\\x9a\\xdb\\xd8\\x11\\xd6\\x3e\\xdc\\x56\\xa1\\xd5\\\n\\xd3\\x87\\xc7\\x85\\xf8\\xcb\\xbb\\x67\\x4f\\x7d\\x0e\\x6e\\x63\\xfd\\x36\\x32\\\n\\x75\\x0a\\x7d\\x38\\x03\\xac\\x36\\x90\\x2d\\x02\\x81\\x25\\x65\\x64\\x5e\\xd1\\\n\\xc1\\x4f\\xda\\xb6\\x96\\x6b\\x5b\\xe8\\xe6\\x09\\xd1\\x5f\\xef\\xbd\\x98\\x8c\\\n\\x19\\x87\\x31\\x37\\xf9\\x5d\\xa3\\xeb\\x0f\\xc9\\xd8\\xef\\xd1\\xcd\\x28\\xc4\\\n\\xff\\x02\\xf8\\xd9\\xad\\xa4\\x1b\\x02\\xae\\xa3\\xdb\\x22\\x05\\x33\\xe8\\x66\\\n\\x01\\xac\\x36\\x90\\x2d\\x02\\x21\\xaf\\xca\\x2f\\xe4\\x59\\x34\\xa8\\x2d\\xac\\\n\\xbd\\x46\\x2d\\x86\\xa0\\xb7\\xa5\\xfe\\xcc\\xc6\\x84\\x40\\x60\\x3c\\x08\\xa5\\\n\\x3d\\x92\\xbf\\x84\\xda\\x04\\x92\\xf5\\xbe\\xc5\\xcc\\xcf\\xdf\\x6c\\xdd\\x1c\\\n\\x70\\xf5\\x53\\x8b\\x00\\x56\\x1b\\xc8\\xf2\\x81\\x90\\x57\\xf2\\x55\\xac\\x11\\\n\\x20\\x3e\\x90\\x0d\\x7e\\x7c\\x39\\x42\\x36\\xe2\\xb5\\xc5\\x4b\\xf8\\x31\\x59\\\n\\x20\\x20\\xec\\xba\\x7b\\xea\\x71\\xc7\\x89\\xe4\\xcf\\x65\\x2f\\xf3\\xcb\\xcb\\\n\\x11\\xb0\\x7b\\x8d\\xb1\\xda\\x40\\x96\\x0b\\x44\\x5e\\xf8\\xb2\\x7b\\xe9\\xcc\\\n\\xcf\\xf9\\xe6\\xf1\\x81\\x80\\x7e\\x7b\\xc0\\xbf\\x4e\\xde\\x27\\x9b\\x06\\x6e\\\n\\xbc\\xa0\\x8d\\x1f\\x93\\x0f\\x04\\xde\\x25\\x87\\x3f\\xbe\\xab\\x91\\xf7\\x4f\\\n\\xea\\x05\\x3b\\xf2\\x75\\x05\\xa3\\x4b\\xda\\xf4\\x68\\xe0\\xba\\xf3\\x84\\x31\\\n\\xf9\\x40\\x40\\x7b\\x5e\\x5e\\x20\\xf8\\xb3\\x2d\\x69\\xdb\\x5a\\xe5\\x15\\xfc\\\n\\x20\\xac\\x36\\x90\\xe5\\x03\\x31\\xba\\xe8\\x53\\x8f\\x92\\x0d\\xd3\\x84\\x31\\\n\\xe5\\x40\\x12\\x4f\\x54\\x0b\\x7e\\xb5\\xe8\\x93\\x53\\xb6\\x65\\xd1\\x3d\\xf7\\\n\\xce\\xca\\xd8\\x27\\x9b\\xfa\\xe7\\x9d\\x29\\x8c\\x29\\x07\\x32\\xb0\\xb6\\x41\\\n\\xf0\\x4f\\xee\\x65\\xd1\\x5b\\x1f\\x6f\\xe5\\xb5\\x6f\\x45\\xe9\\xe8\\x0d\\x6f\\\n\\x4c\\x72\\x20\\x7d\\x8f\\x54\\xf4\\xcb\\xfb\\x64\\xd3\\xee\\x5b\\x67\\x1c\\xe1\\\n\\xc7\\x94\\x03\\x39\\xf8\\xee\\xe2\\x6e\\xde\\x7f\\xe4\\xcd\\x1b\\x77\\xf2\\x7e\\\n\\x39\\x90\\xb6\\xba\\x69\\xc7\\x79\\x3f\\x08\\xab\\x0d\\x64\\xb9\\x40\\xa8\\x25\\\n\\x0d\\x39\\xbb\\xb9\\x83\\x6f\\x06\\x1f\\x08\\x5c\\x40\\xea\\x98\\xeb\\x3d\\x87\\\n\\x5a\\x75\\x43\\x4e\\xa3\\x9f\\xe7\\xc7\\xe4\\x03\\x81\\xa5\\x6f\\xd4\\x96\\x06\\\n\\x96\\xd4\\x91\\xe7\\x31\\xe6\\x4f\\x6b\\xb4\\x85\\xdc\\x6f\\x51\\x6b\\x1a\\xac\\\n\\x36\\x90\\xe5\\x03\\xa1\\x3f\\x3e\\xb3\\x87\\x35\\x83\\x0f\\xa4\\x25\\xa0\\xf5\\\n\\x50\\x9b\\x21\\xe2\\x35\\xc5\\x17\\x91\\x06\\x0f\\xb1\\x31\\xf9\\x40\\x5a\\x43\\\n\\xda\\x57\\xd4\\x26\\x40\\x42\\x7c\\x9f\\xf9\\xf9\\x40\\xe0\\x42\\xd6\\xb6\\xd9\\\n\\x85\\x5e\\x6a\\x4b\\x83\\xd5\\x06\\xb2\\x7c\\x20\\x00\\xfc\\x56\\x16\\x69\\xe0\\\n\\x08\\x1f\\x08\\xfc\\x06\\xd6\\x58\\x3f\\xcf\\xa4\\x07\\xd2\\xe0\\xd5\\x72\\x20\\\n\\xb0\\x88\\xb3\\x3d\\x92\\xa7\\x51\\x8b\\xc0\\x6f\\x57\\x4f\\x2f\\x26\\x2f\\x8c\\\n\\x84\\x1c\\xc8\\x58\\xbf\\x99\\x85\\xd5\\x06\\xb2\\x45\\x20\\x40\\xb2\\xce\\x37\\\n\\x9f\\x34\\xb1\\x2b\\x16\\xd2\\x06\\x5b\\x02\\xae\\x81\\xce\\x4a\\x4f\\x98\\x6e\\\n\\x9a\\x10\\xe4\\x40\\x27\\x90\\x90\\xef\\x27\\x63\\xee\\x6a\\xf1\\xe7\\x0d\\x6d\\\n\\x0e\\xe4\\xed\\x18\\x6b\\x45\\x2d\\x63\\xa0\\xbe\\xf0\\x5c\\xb2\\xcf\\xfa\\xed\\\n\\xb3\\x3d\\x47\\x37\\x94\\xb9\\x8e\\xc5\\xc2\\x05\\x4f\\xd2\\x4d\\x19\\x60\\xb5\\\n\\x81\\x6c\\x13\\x88\\xd5\\xc0\\x6a\\x03\\xa9\\x40\\x4c\\x02\\xab\\x0d\\xa4\\x02\\\n\\x31\\x09\\xac\\x36\\x90\\x0a\\xc4\\x24\\xb0\\xda\\x40\\x2a\\x10\\x93\\xc0\\x6a\\\n\\x03\\xa9\\x40\\x4c\\x02\\xab\\x0d\\x64\\xb9\\x40\\xd0\\x7f\\xfd\\x60\\x45\\x61\\\n\\xb5\\x11\\x59\\x2f\\x10\\x9b\\x4b\\x05\\x92\\x63\\x52\\x81\\xe4\\x98\\x54\\x20\\\n\\x39\\x26\\x15\\x48\\x8e\\x29\\x27\\x03\\x79\\x68\\x5e\\xb4\\x84\\x3c\\xb1\\x95\\\n\\x93\\x51\\x50\\x3b\\x6d\\x83\\x42\\xa1\\x50\\x28\\x14\\x0a\\x85\\x42\\xa1\\x50\\\n\\x28\\x14\\x0a\\x85\\x42\\x31\\x49\\x70\\x38\\xfe\\x01\\x04\\xb0\\x3c\\x6d\\xd5\\\n\\x67\\xd7\\x9b\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x02\\xd7\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x60\\x00\\x00\\x00\\x60\\x08\\x06\\x00\\x00\\x00\\xe2\\x98\\x77\\x38\\\n\\x00\\x00\\x00\\x04\\x73\\x42\\x49\\x54\\x08\\x08\\x08\\x08\\x7c\\x08\\x64\\x88\\\n\\x00\\x00\\x00\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x37\\x5d\\x00\\x00\\x37\\x5d\\\n\\x01\\x19\\x80\\x46\\x5d\\x00\\x00\\x00\\x19\\x74\\x45\\x58\\x74\\x53\\x6f\\x66\\\n\\x74\\x77\\x61\\x72\\x65\\x00\\x77\\x77\\x77\\x2e\\x69\\x6e\\x6b\\x73\\x63\\x61\\\n\\x70\\x65\\x2e\\x6f\\x72\\x67\\x9b\\xee\\x3c\\x1a\\x00\\x00\\x02\\x54\\x49\\x44\\\n\\x41\\x54\\x78\\x9c\\xed\\xdb\\xbd\\x8a\\x13\\x51\\x18\\xc6\\xf1\\xe7\\x9d\\x1c\\\n\\x10\\xc2\\xfa\\x81\\xb2\\x2c\\xac\\x77\\xa0\\x48\\x32\\x4c\\x20\\x44\\x04\\x53\\\n\\x79\\x17\\x36\\x2e\\x56\\xd6\\x82\\xa5\\x8d\\x8d\\x37\\x62\\xe3\\x35\\x48\\xda\\\n\\x28\\x43\\x1a\\xc7\\xc2\\xda\\x6e\\x05\\xd1\\x58\\x1d\\x87\\x79\\x2d\\xb6\\x16\\\n\\x64\\x67\\x72\\x9e\\x93\\xcd\\xf3\\xeb\\x67\\xce\\xcb\\xfc\\x99\\xe1\\x64\\xc8\\\n\\x00\\x22\\x22\\x22\\x22\\x22\\x22\\x22\\x22\\x72\\x28\\x8c\\x3d\\xc0\\x65\\x4d\\\n\\x26\\x93\\xbb\\x21\\x84\\xc7\\x00\\x2a\\x00\\xf7\\x01\\x9c\\x02\\x38\\x06\\x70\\\n\\x0d\\x40\\x00\\x70\\xfd\\x32\\xe7\\xad\\xeb\\x3a\\xe9\\x35\\x09\\x29\\x17\\xeb\\\n\\xab\\xaa\\xaa\\x9b\\x66\\xf6\\xcc\\xdd\\xcf\\x70\\x71\\xd1\\xf7\\xde\\xbe\\x04\\\n\\xb0\\xd9\\x6c\\xf6\\xc2\\xdd\\x5f\\xbb\\xfb\\x1d\\xf6\\x30\\x43\\xca\\x3e\\xc0\\\n\\x62\\xb1\\xb8\\x1d\\x63\\x7c\\xe7\\xee\\x4f\\xd8\\xb3\\xec\\x42\\xd6\\x01\\xe6\\\n\\xf3\\xf9\\x49\\x8c\\xf1\\x03\\x80\\x7b\\xec\\x59\\x76\\xa5\\x60\\x0f\\xf0\\x2f\\\n\\xcb\\xe5\\x32\\xb4\\x6d\\xfb\\x1e\\x57\\xf8\\xe2\\x03\\x19\\x07\\xd8\\x6e\\xb7\\\n\\x2f\\x01\\x3c\\x62\\xcf\\xb1\\x6b\\x59\\x06\\x98\\x4e\\xa7\\xb7\\x00\\xbc\\x62\\\n\\xcf\\x91\\x42\\x96\\x01\\x8a\\xa2\\x78\\x0e\\xe0\\x06\\x7b\\x8e\\x14\\xb2\\x0c\\\n\\x60\\x66\\x4f\\xd9\\x33\\xa4\\x92\\x5d\\x80\\xb2\\x2c\\x4f\\x01\\x3c\\x60\\xcf\\\n\\x91\\x4a\\x76\\x01\\x46\\xa3\\xd1\\x8c\\x3d\\x43\\x4a\\xd9\\xfd\\x0e\\xe8\\xba\\\n\\xae\\x34\\xeb\\xfd\\x3a\\xe6\\xab\\x99\\xbd\\x75\\xf7\\x8f\\x31\\xc6\\x6f\\x5d\\\n\\xd7\\xfd\\x69\\x9a\\xe6\\xf7\\x10\\xf3\\x0d\\x2d\\xbb\\x00\\x66\\x56\\xf6\\x3c\\\n\\x45\\x13\\x42\\x78\\xb8\\x5e\\xaf\\x7f\\x0d\\x32\\xd0\\x8e\\x65\\xf7\\x08\\x02\\\n\\x70\\xd2\\xe7\\x60\\x33\\x7b\\xb3\\x2f\\x17\\x1f\\xc8\\x33\\x40\\xaf\\xed\\x67\\\n\\xd7\\x75\\x9f\\x86\\x1a\\x24\\x85\\x2b\\x17\\x20\\x84\\xf0\\x63\\xa8\\x41\\x52\\\n\\xc8\\x31\\xc0\\x51\\x9f\\x83\\xc7\\xe3\\xf1\\xcf\\xa1\\x06\\x49\\x21\\xc7\\x00\\\n\\xbd\\x36\\x06\\xab\\xd5\\xaa\\x1d\\x6a\\x90\\x14\\x72\\x0c\\x70\\x50\\x14\\x80\\\n\\x4c\\x01\\xc8\\x14\\x80\\x4c\\x01\\xc8\\x14\\x80\\x4c\\x01\\xc8\\x14\\x80\\x4c\\\n\\x01\\xc8\\x92\\xff\\x37\\xb4\\xaa\\x2a\\x4f\\xbd\\xe6\\x7f\\xf8\\x5e\\xd7\\xf5\\\n\\x31\\x63\\x61\\xdd\\x01\\x17\\x3e\\xb3\\x16\\x56\\x00\\x00\\x66\\xd6\\xb0\\xd6\\\n\\x56\\x00\\x00\\xee\\xfe\\x85\\xb5\\xb6\\x02\\x00\\x28\\x8a\\x42\\x77\\x00\\x53\\\n\\xdb\\xb6\\xba\\x03\\x88\\xce\\x37\\x9b\\xcd\\x39\\x6b\\x71\\x05\\x00\\x68\\x8f\\\n\\x1f\\x40\\x01\\xa8\\x3b\\x20\\x40\\x01\\xa8\\x3b\\x20\\x40\\x01\\xa8\\x3b\\x20\\\n\\x40\\x01\\xa8\\x3b\\x20\\x20\\xc3\\xef\\x84\\xfb\\xbe\\x2b\\x4a\\xfd\\x9d\\x6f\\\n\\x5f\\x07\\x7f\\x07\\xb0\\x29\\x00\\x99\\x02\\x90\\x29\\x00\\x99\\x02\\x90\\x29\\\n\\x00\\x99\\x02\\x90\\x29\\x00\\x99\\x02\\x90\\x29\\x00\\x99\\x02\\x90\\x29\\x00\\\n\\x99\\x02\\x90\\x29\\x00\\x99\\x02\\x90\\x29\\x00\\x99\\x02\\x90\\x29\\x00\\x99\\\n\\x02\\x90\\x29\\x00\\x99\\x02\\x90\\x29\\x00\\x99\\x02\\x90\\x29\\x00\\x99\\x02\\\n\\x90\\x29\\x00\\x99\\x02\\x90\\x29\\x00\\x99\\x02\\x90\\x29\\x00\\x99\\x02\\x90\\\n\\x29\\x00\\x99\\x02\\x90\\x29\\x00\\x99\\x02\\x88\\x88\\x88\\x88\\x88\\x88\\x24\\\n\\xf6\\x17\\xb7\\x8d\\x6e\\xf7\\x9a\\x00\\xf8\\x6f\\x00\\x00\\x00\\x00\\x49\\x45\\\n\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x04\\xec\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x60\\x00\\x00\\x00\\x60\\x08\\x06\\x00\\x00\\x00\\xe2\\x98\\x77\\x38\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0e\\xc3\\x00\\x00\\x0e\\xc3\\x01\\xc7\\x6f\\\n\\xa8\\x64\\x00\\x00\\x04\\x81\\x49\\x44\\x41\\x54\\x78\\x5e\\xed\\x9c\\x4d\\x68\\\n\\x5c\\x55\\x14\\xc7\\x5f\\x95\\x16\\x3f\\x4a\\x37\\x8a\\xab\\xba\\x12\\x17\\xea\\\n\\xa2\\xb4\\x20\\x2a\\xae\\xb5\\x88\\x3b\\x3f\\x5a\\x28\\x12\\xc7\\xda\\x52\\x70\\\n\\x51\\x5c\\x28\\x08\\x26\\x8a\\xba\\x68\\x99\\x80\\xdd\\x54\\x14\\xdc\\xb8\\x70\\\n\\x15\\xba\\x68\\x53\\x90\\xe6\\xdd\\x37\\x19\\xd3\\x45\\xdd\\x84\\x7e\\xcc\\xb9\\\n\\x13\\x4a\\x49\\xcd\\xae\\xb5\\x58\\x29\\xda\\xc4\\x52\\x17\\x1d\\xdf\\x19\\x4f\\\n\\x9b\\x34\\xef\\x3c\\x30\\x6f\\xee\\x7d\\xf7\\xdc\\xc9\\xf9\\xc1\\x1f\\xc2\\xa3\\\n\\x33\\xef\\xfc\\xcf\\x2f\\x33\\x99\\xbc\\x99\\x26\\x51\\x14\\x45\\x51\\x14\\x45\\\n\\x51\\x14\\x45\\x51\\x14\\x45\\x51\\x94\\x32\\xce\\x5d\\x9c\\xef\\xad\\x0c\\x1d\\\n\\x2e\\xc7\\xc0\\xef\\x49\\x66\\x7b\\x43\\x11\\xec\\x12\\x9a\\x0a\\x02\\x4e\\xb3\\\n\\x65\\x62\\x8c\\x81\\x19\\x6a\\x15\\x8e\\x0a\\x02\\xbe\\x63\\xcb\\xc4\\x18\\x63\\\n\\xbf\\xa5\\x56\\xe1\\x58\\xb3\\x80\\x0c\\x3e\\x64\\xcb\\xc4\\x18\\xd3\\x39\\x48\\\n\\xad\\xc2\\xb1\\x66\\x01\\x2d\\x78\\x95\\x2d\\x13\\x65\\x3a\\xaf\\x50\\xab\\x70\\\n\\xac\\x59\\xc0\\x29\\x78\\x92\\x2f\\x13\\x61\\xda\\x17\\xb6\\x52\\xab\\x70\\xac\\\n\\x59\\x00\\x62\\xe0\\x2f\\xb6\\x50\\x4c\\x31\\xf6\\x06\\xb5\\x09\\x4b\\x45\\x01\\\n\\x33\\x6c\\xa9\\xb8\\xd2\\xa6\\x36\\x61\\xa9\\x26\\xc0\\x1e\\x61\\x0a\\x45\\x16\\\n\\xf8\\x9a\\xda\\x84\\xa5\\x9a\\x00\\x18\\xe1\\x4b\\xc5\\x94\\xce\\x3b\\xd4\\x26\\\n\\x2c\\x95\\x04\\xb4\\xba\\xcf\\xf1\\xa5\\x22\\x4a\\x0a\\xcf\\x50\\x9b\\xb0\\x54\\\n\\x12\\x30\\x31\\xf1\\x60\\x5e\\x62\\xa9\\x50\\x2a\\x9e\\x2c\\xf6\\x3b\\x48\\xa0\\\n\\x92\\x00\\x24\\x83\\x5f\\x98\\x62\\x91\\x24\\x9f\\x5d\\x0a\\xd5\\x05\\xd8\\x6f\\\n\\x8a\\xc5\\x22\\x89\\x81\\xa3\\xd4\\x22\\x3c\\xd5\\x05\\xc0\\x3e\\xb6\\x5c\\x0c\\\n\\x31\\x9d\\xbd\\xd4\\x22\\x3c\\x95\\x05\\xc4\\xfd\\x83\\xf8\\x59\\x6a\\x11\\x9e\\\n\\xca\\x02\\x7a\\xbd\\x0d\\xf9\\xa3\\xe0\\x0f\\xa6\\x9c\\xf0\\xc0\\xf5\\xfe\\xec\\\n\\x52\\xa8\\x2c\\x00\\x31\\x76\\x92\\x2f\\x29\\x39\\x70\\x9c\\xa6\\x97\\xc1\\x60\\\n\\x02\\xe0\\x63\\xbe\\xa4\\xe0\\xb4\\xe0\\x23\\x9a\\x5e\\x06\\x83\\x09\\xe8\\xbc\\\n\\xc4\\x96\\x94\\x9c\\x74\\xee\\x45\\x9a\\x5e\\x06\\x03\\x09\\x98\\xb0\\x9b\\xf2\\\n\\xa7\\xa1\\xbf\\xd9\\xa2\\x32\\xb3\\x94\\xcc\\xce\\x6e\\xa4\\xe9\\x65\\x30\\x90\\\n\\x00\\x04\\xaf\\x2a\\xf2\\x65\\xe5\\xc5\\xd8\\x69\\x9a\\x5a\\x0e\\x0e\\x04\\x7c\\\n\\x55\\x28\\x2a\\x36\\xf0\\x25\\x4d\\x2d\\x87\\x81\\x05\\xa4\\xb0\\x93\\x2f\\x2b\\\n\\x31\\x02\\xde\\x82\\x5c\\xcd\\xc0\\x02\\x7e\\xba\\xb4\\x25\\x7f\\x68\\xff\\xc3\\\n\\x17\\x16\\x14\\x9c\\xb1\\x6d\\x37\\xd3\\xd4\\x72\\x18\\x58\\x00\\x12\\xc7\\x67\\\n\\x85\\x7e\\xa6\\x69\\x65\\xe1\\x44\\x40\\x06\\x9f\\x32\\x85\\x65\\xc5\\xd8\\x4f\\\n\\x68\\x5a\\x59\\x38\\x11\\x60\\xe0\\x79\\xb6\\xb4\\xa8\\xcc\\xed\\xa0\\x69\\x65\\\n\\xe1\\x44\\xc0\\xe7\\xbd\\x07\\x72\\x09\\x92\\x3f\\x33\\x7a\\x4d\\xd4\\xf5\\x9f\\\n\\x95\\x38\\x11\\x80\\x64\\xf0\\x23\\x53\\x5c\\x48\\xe0\\x07\\x9a\\x52\\x1e\\xee\\\n\\x04\\xd8\\xb7\\x8a\\xc5\\x85\\x24\\x85\\x37\\x68\\x4a\\x79\\x38\\x13\\x80\\x2f\\\n\\xf1\\x0c\\xdc\\x62\\x17\\x10\\x32\\x78\\xa9\\x64\\xea\\xfc\\xa3\\x34\\xa5\\x3c\\\n\\x9c\\x09\\x40\\x32\\x7b\\xb2\\xb0\\x80\\xd0\\x31\\x70\\x82\\xa6\\x93\\x89\\x5b\\\n\\x01\\xf0\\x3e\\xbb\\x84\\x90\\x69\\xd9\\xf7\\x68\\x3a\\x99\\x38\\x15\\xd0\\xbe\\\n\\xf8\\xb8\\xac\\xdf\\x8a\\xe1\\x76\\x7f\\x26\\xc9\\x38\\x15\\x80\\x48\\x7a\\x1a\\\n\\x92\\xfe\\xf4\\x83\\x38\\x17\\x60\\x60\\x37\\xbb\\x8c\\x10\\x69\\x75\\xdf\\xa6\\\n\\xa9\\xe4\\xe2\\x5c\\xc0\\xe4\\xec\\x23\\xb9\\x04\\x01\\x1f\\x5f\\x87\\x3f\\x93\\\n\\xf6\\xc2\\x43\\x34\\x95\\x5c\\x9c\\x0b\\x40\\xf0\\x17\\x1f\\x76\\x29\\x35\\xc6\\\n\\xd8\\xef\\x69\\x1a\\xd9\\x78\\x11\\x30\\x05\\x2f\\xb3\\x4b\\xa9\\x33\\xd2\\xde\\\n\\xfb\\x2d\\xc3\\x8b\\x00\\x24\\x83\\xb3\\xec\\x62\\xea\\x88\\xb1\\xb3\\x34\\x85\\\n\\x7c\\xbc\\x09\\x48\\xed\\x7e\\x76\\x39\\x75\\x44\\xfa\\x6b\\xff\\x95\\x78\\x13\\\n\\xd0\\xff\\x61\\x6c\\x6f\\xb0\\x0b\\xf2\\x1a\\xb8\\x9e\\x9c\\x39\\xf3\\x30\\x4d\\\n\\x21\\x1f\\x6f\\x02\\x10\\x03\\x87\\xf9\\x25\\xf9\\x0c\\x1c\\xa2\\xb3\\xc7\\x81\\\n\\x57\\x01\\x53\\xe7\\x9f\\xc8\\x97\\xb2\\x58\\x5c\\x92\\xa7\\x18\\xb8\\x99\\x98\\\n\\xb9\\xc7\\xe8\\xec\\x71\\xe0\\x55\\x00\\x92\\xd9\\x66\\x61\\x51\\xde\\x12\\xd9\\\n\\x77\\x3f\\xe2\\x5d\\x40\\x5d\\x8f\\x02\\xfc\\xee\\x97\\x7e\\xdd\\x87\\xc3\\xbb\\\n\\x00\\xa4\\x8e\\x0f\\x6f\\x19\\xf8\\x82\\xce\\x16\\x17\\xb5\\x08\\xc0\\x57\\x44\\\n\\x99\\xfd\\xb5\\xb0\\x34\\x57\\x31\\x76\\x3e\\x8a\\xcb\\x0e\\x1c\\xb5\\x08\\x40\\\n\\xd2\\xce\\xeb\\xec\\xf2\\x9c\\xa4\\xfb\\x1a\\x9d\\x25\\x3e\\x6a\\x13\\x80\\x64\\\n\\xf6\\x58\\x71\\x79\\x03\\xc6\\xc0\\x04\\xdd\\x7b\\x9c\\xd4\\x2a\\xa0\\xff\\x86\\\n\\x0d\\x2c\\xb0\\x8b\\xac\\x96\\xcb\\xd1\\xbd\\xec\\x5c\\x4d\\xad\\x02\\x10\\xd3\\\n\\xdd\\x9e\\x2f\\xce\\xc5\\x7f\\xf2\\x5e\\x4a\\x5a\\xb0\\x8d\\xee\\x35\\x5e\\x6a\\\n\\x17\\x80\\xa4\\x76\\x4f\\xfe\\x48\\xb8\\xc3\\x2c\\xf5\\xff\\x05\\x6f\\x8b\\x6f\\\n\\xfc\\x0c\\x03\\x41\\x04\\x20\\x06\\x3e\\xa8\\x24\\xe1\\xbf\\xdb\\x1c\\xa0\\x7b\\\n\\x89\\x9f\\x60\\x02\\x90\\xb4\\xb3\\x2b\\x5f\\xe8\\xcd\\xc2\\x92\\xcb\\xd2\\xbf\\\n\\xd4\\x00\\x6f\\xd2\\xad\\x87\\x83\\xa0\\x02\\x90\\xb4\\xfb\\x74\\xfe\\x3a\\x3e\\\n\\x65\\x17\\xbe\\x32\\xc6\\x4e\\xe5\\xcf\\xf9\\x4f\\xd1\\xad\\x86\\x87\\xe0\\x02\\\n\\xee\\x82\\xef\\x60\\xe1\\x9f\\xc4\\x34\\xd0\\xcd\\x17\\x8e\\x97\\x2e\\x16\\xfb\\\n\\x5f\\xe3\\x9f\\x96\\x9c\\xee\\xbe\\x40\\xff\\x6a\\xf8\\x28\\x13\\x30\\x32\\x3a\\\n\\xbe\\xab\\x31\\x3a\\x7e\\x15\\x83\\x5f\\xd3\\xe1\\x75\\x77\\xdc\\x3b\\x65\\x02\\\n\\x1a\\xa3\\xcd\\x6b\\x8d\\xb1\\xf1\\x1e\\xe6\\xdd\\xb1\\xe6\\x6f\\x74\\x78\\xdd\\\n\\x1d\\xf7\\x4e\\x99\\x00\\x1c\\xe2\\xee\\x40\\x8d\\xb1\\xe6\\x15\\x3a\\xbc\\xee\\\n\\x8e\\x7b\\xa7\\x4c\\xc0\\xbd\\x87\\x64\\x3e\\x4c\\xe3\\xb3\\xe6\\xbd\\x0f\\x38\\\n\\xad\\xb7\\xe3\\xde\\x29\\x13\\xa0\\xd4\\x84\\x0a\\x08\\x8c\\x0a\\x08\\x8c\\x0a\\\n\\x08\\x8c\\x0a\\x08\\x8c\\x0a\\x08\\xcc\\x6a\\x01\\x9a\\xfb\\x43\\x6b\\xf2\\x07\\\n\\x77\\x52\\xcd\\x72\\x68\\x4d\\xfe\\xe0\\x4e\\xaa\\x59\\x0e\\xad\\xc9\\x1f\\xdc\\\n\\x49\\x35\\xcb\\xa1\\x35\\x29\\x8a\\xa2\\x28\\x8a\\xa2\\x28\\x8a\\xa2\\x28\\x8a\\\n\\xa2\\x28\\xca\\x2a\\x92\\xe4\\x5f\\x6f\\x35\\xfa\\x2c\\x40\\x0b\\xc2\\x78\\x00\\\n\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x11\\xb0\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x50\\x00\\x00\\x00\\x50\\x08\\x06\\x00\\x00\\x00\\x8e\\x11\\xf2\\xad\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x04\\x76\\x00\\x00\\x04\\x76\\x01\\xbd\\x3d\\\n\\xaa\\xc7\\x00\\x00\\x01\\xcb\\x69\\x54\\x58\\x74\\x58\\x4d\\x4c\\x3a\\x63\\x6f\\\n\\x6d\\x2e\\x61\\x64\\x6f\\x62\\x65\\x2e\\x78\\x6d\\x70\\x00\\x00\\x00\\x00\\x00\\\n\\x3c\\x78\\x3a\\x78\\x6d\\x70\\x6d\\x65\\x74\\x61\\x20\\x78\\x6d\\x6c\\x6e\\x73\\\n\\x3a\\x78\\x3d\\x22\\x61\\x64\\x6f\\x62\\x65\\x3a\\x6e\\x73\\x3a\\x6d\\x65\\x74\\\n\\x61\\x2f\\x22\\x20\\x78\\x3a\\x78\\x6d\\x70\\x74\\x6b\\x3d\\x22\\x58\\x4d\\x50\\\n\\x20\\x43\\x6f\\x72\\x65\\x20\\x35\\x2e\\x34\\x2e\\x30\\x22\\x3e\\x0a\\x20\\x20\\\n\\x20\\x3c\\x72\\x64\\x66\\x3a\\x52\\x44\\x46\\x20\\x78\\x6d\\x6c\\x6e\\x73\\x3a\\\n\\x72\\x64\\x66\\x3d\\x22\\x68\\x74\\x74\\x70\\x3a\\x2f\\x2f\\x77\\x77\\x77\\x2e\\\n\\x77\\x33\\x2e\\x6f\\x72\\x67\\x2f\\x31\\x39\\x39\\x39\\x2f\\x30\\x32\\x2f\\x32\\\n\\x32\\x2d\\x72\\x64\\x66\\x2d\\x73\\x79\\x6e\\x74\\x61\\x78\\x2d\\x6e\\x73\\x23\\\n\\x22\\x3e\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x3c\\x72\\x64\\x66\\x3a\\x44\\x65\\\n\\x73\\x63\\x72\\x69\\x70\\x74\\x69\\x6f\\x6e\\x20\\x72\\x64\\x66\\x3a\\x61\\x62\\\n\\x6f\\x75\\x74\\x3d\\x22\\x22\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\\n\\x20\\x20\\x20\\x78\\x6d\\x6c\\x6e\\x73\\x3a\\x78\\x6d\\x70\\x3d\\x22\\x68\\x74\\\n\\x74\\x70\\x3a\\x2f\\x2f\\x6e\\x73\\x2e\\x61\\x64\\x6f\\x62\\x65\\x2e\\x63\\x6f\\\n\\x6d\\x2f\\x78\\x61\\x70\\x2f\\x31\\x2e\\x30\\x2f\\x22\\x0a\\x20\\x20\\x20\\x20\\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x78\\x6d\\x6c\\x6e\\x73\\x3a\\x74\\x69\\\n\\x66\\x66\\x3d\\x22\\x68\\x74\\x74\\x70\\x3a\\x2f\\x2f\\x6e\\x73\\x2e\\x61\\x64\\\n\\x6f\\x62\\x65\\x2e\\x63\\x6f\\x6d\\x2f\\x74\\x69\\x66\\x66\\x2f\\x31\\x2e\\x30\\\n\\x2f\\x22\\x3e\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x3c\\x78\\x6d\\\n\\x70\\x3a\\x43\\x72\\x65\\x61\\x74\\x6f\\x72\\x54\\x6f\\x6f\\x6c\\x3e\\x77\\x77\\\n\\x77\\x2e\\x69\\x6e\\x6b\\x73\\x63\\x61\\x70\\x65\\x2e\\x6f\\x72\\x67\\x3c\\x2f\\\n\\x78\\x6d\\x70\\x3a\\x43\\x72\\x65\\x61\\x74\\x6f\\x72\\x54\\x6f\\x6f\\x6c\\x3e\\\n\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x3c\\x74\\x69\\x66\\x66\\x3a\\\n\\x4f\\x72\\x69\\x65\\x6e\\x74\\x61\\x74\\x69\\x6f\\x6e\\x3e\\x31\\x3c\\x2f\\x74\\\n\\x69\\x66\\x66\\x3a\\x4f\\x72\\x69\\x65\\x6e\\x74\\x61\\x74\\x69\\x6f\\x6e\\x3e\\\n\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x3c\\x2f\\x72\\x64\\x66\\x3a\\x44\\x65\\x73\\\n\\x63\\x72\\x69\\x70\\x74\\x69\\x6f\\x6e\\x3e\\x0a\\x20\\x20\\x20\\x3c\\x2f\\x72\\\n\\x64\\x66\\x3a\\x52\\x44\\x46\\x3e\\x0a\\x3c\\x2f\\x78\\x3a\\x78\\x6d\\x70\\x6d\\\n\\x65\\x74\\x61\\x3e\\x0a\\x18\\xcb\\x55\\x58\\x00\\x00\\x0f\\x7e\\x49\\x44\\x41\\\n\\x54\\x78\\x01\\xed\\x9c\\x09\\x74\\x55\\xc5\\x19\\xc7\\xef\\x7b\\xf7\\x66\\x07\\\n\\x02\\x09\\x92\\x84\\x40\\x02\\x61\\xb1\\x34\\xec\\x5b\\xc4\\x7a\\x00\\xa1\\x16\\\n\\xa5\\x2e\\x3d\\x6d\\xa9\\x0b\\x60\\x01\\xd9\\xa4\\x07\\xeb\\xd1\\x56\\x6d\\x8f\\\n\\xf6\\x50\\xeb\\x69\\x7b\\xb4\\x5a\\x2d\\xb2\\x25\\x80\\x58\\xe4\\xb8\\x70\\xa8\\\n\\x5a\\xad\\x14\\x81\\x82\\x0b\\x20\\x3b\\x84\\xb0\\x89\\x09\\x42\\x80\\x04\\x12\\\n\\xb6\\x08\\x59\\xdf\\xd2\\xdf\\xf7\\xcc\\xbd\\xe6\\xbd\\xbc\\xbc\\x77\\xdf\\x92\\\n\\x05\\xcd\\x9c\\x33\\x67\\xee\\x9d\\x99\\x6f\\xe6\\x9b\\xff\\xfd\\xe6\\x9b\\x6f\\\n\\xbe\\x99\\xf7\\x14\\xa5\\x35\\xb4\\x22\\xd0\\x8a\\x40\\x2b\\x02\\xad\\x08\\xb4\\\n\\x22\\xd0\\x8a\\x40\\x2b\\x02\\xad\\x08\\xb4\\x22\\xd0\\x8a\\x40\\xc0\\x08\\x58\\\n\\x02\\xa6\\x68\\x42\\x82\\xe1\\xc3\\x87\\x27\\xd6\\xd4\\xd4\\x3c\\x6c\\xb5\\x5a\\\n\\x6f\\x72\\x3a\\x9d\\x51\\x74\\xfd\\x1f\\x87\\xc3\\xb1\\x60\\xdf\\xbe\\x7d\\x97\\\n\\x9a\\x90\\x0d\\x9f\\x5d\\xb5\\x58\\x00\\x47\\x8c\\x18\\x91\\x5a\\x55\\x55\\xf5\\\n\\x16\\xe0\\x0d\\x05\\xbc\\x48\\x8b\\xc5\\xa2\\x90\\x56\\x31\\x9a\\x0d\\x36\\x9b\\\n\\x6d\\xd6\\xfe\\xfd\\xfb\\x4f\\x7b\\x8e\\x6c\\xe6\\xcc\\x99\\x69\\x36\\xcd\\x99\\\n\\x63\\x75\\x58\\x6e\\x94\\x32\\xa7\\xa6\\x6c\\x55\\x2a\\xec\\xbf\\x5a\\xb6\\x6c\\\n\\xd9\\x17\\x9e\\x75\\xc3\\xf5\\xde\\x22\\x01\\x04\\xbc\\x98\\xea\\xea\\xea\\x1c\\\n\\x40\\x9b\\x08\\x68\\x4e\\x06\\xfb\\x15\\xd1\\x41\\x6c\\x0f\\xa0\\x4e\\xa4\\x70\\\n\\x99\\xa6\\x69\\x8f\\x6e\\xdf\\xbe\\xbd\\x4c\\x07\\x42\\xc0\\xb3\\xab\\xca\\x81\\\n\\x93\\x3d\\xec\\x71\\x67\\x53\\x78\\x22\\x24\\x9d\\x51\\x6d\\x69\\xf9\\xd6\\x8a\\\n\\x28\\x6b\\x44\\xe6\\xc2\\x85\\x0b\\x0b\\xf5\\xba\\xe1\\x4c\\xad\\xe1\\x6c\\x2c\\\n\\x5c\\x6d\\x21\\x79\\x77\\xd3\\xd6\\xc4\\xda\\xf6\\x0e\\xd9\\xed\\xf6\\xdb\\x78\\\n\\x1e\\x09\\x96\\xc7\\x88\\xe0\\x6a\\x99\\x8e\\x14\\xfe\\x82\\x3c\\x43\\x00\\x6c\\\n\\x11\\xce\\xec\\x93\\x19\\xf6\\x58\\xa2\\x5a\\x15\\xa3\\x28\\x12\\x01\\x53\\x2b\\\n\\xec\\xe1\\x8c\\xa9\\x54\\x6a\\x96\\xd4\\xb6\\x15\\xf6\\xa4\\xc5\\x01\\x38\\x64\\\n\\xc8\\x90\\x7e\\x8c\\xf2\\x39\\x19\\x29\\x60\\x5d\\x40\\xda\\x9e\\x41\\xe7\\x6d\\\n\\xdd\\xbd\\x7b\\xf7\\x01\\xb2\\xfe\\x4c\\xde\\x45\\x29\\x23\\xbc\\x30\\x70\\xe0\\\n\\x40\\xd7\\x54\\x95\\x17\\xd5\\x6e\\x19\\x55\\x9c\\x6a\\xd7\\xe4\\xb9\\x6e\\x28\\\n\\x4e\\xb5\\x69\\xaa\\xc3\\x32\\xba\\x6e\\x5e\\x38\\x9f\\x5b\\x14\\x80\\x59\\x59\\\n\\x59\\xed\\x90\\xae\\x67\\x89\\x1d\\x19\\x24\\x58\\x39\\x5f\\xdf\\xbb\\x77\\xef\\\n\\x1b\\xfa\\x80\\xf7\\xec\\xd9\\xb3\\x82\\xb2\\xa5\\xbc\\xdb\\x48\\xdb\\x12\\x5f\\\n\\xcc\\xcc\\xcc\\x4c\\x76\\x95\\x3b\\x91\\x46\\xab\\x21\\x90\\x3a\\x89\\x22\\xf3\\\n\\x9f\\x76\\x1a\\x6d\\x9c\\x2e\\x5d\\x61\\xf4\\xd6\\xcc\\x0f\\x49\\x49\\x49\\x0f\\\n\\x01\\xca\\x54\\xa2\\x86\\xe4\\xed\\x41\\xcf\\xcd\\x3e\\x73\\xe6\\xcc\\x95\\xba\\\n\\x6c\\xb5\\x69\\xd3\\x66\\x6f\\x64\\x64\\xe4\\x10\\xea\\xf4\\x20\\xa6\\xa8\\xaa\\\n\\x1a\\x9b\\x90\\x90\\xb0\\xa1\\x73\\xb7\\xae\\x37\\x39\\x54\\x25\\xed\\x72\\x82\\\n\\x3b\\x58\\x5d\\x4e\\x68\\xb6\\x76\\x97\\x2d\\xdb\\x87\\x0d\\x1a\\x7a\\x05\\xe9\\\n\\xce\\x1c\\x3a\\x74\\x68\\x0a\\xe9\\x29\\x24\\x5a\\x74\\x6a\\xc8\\xa1\\xfe\\x27\\\n\\x0b\\xb9\\xc9\\xe0\\x1a\\x18\\x3c\\x78\\xf0\\x44\\x00\\x59\\x40\\x8c\\x47\\x62\\\n\\x8a\\x89\\xe3\\x90\\xb8\\x5c\\x6f\\xad\\x0d\\x1a\\x34\\x28\\x9d\\x7a\\xef\\xb2\\\n\\xa0\\x0c\\xa0\\x9e\\x9d\\x3a\\x7f\\x01\\x94\\x55\\x00\\xb8\\xe7\\x44\\x0f\\x7b\\\n\\x64\\x51\\x17\\xbb\\x6a\\x41\\x20\\x93\\x0b\\xad\\xb6\\xb4\\x02\\xb5\\x3c\\xca\\\n\\xa2\\xf5\\xd5\\x17\\x91\\xa9\\x53\\xa7\\x5e\\xc7\\x87\\xc9\\x82\\x3e\\x06\\x5a\\\n\\x1b\\xcf\\x9b\\x17\\x2d\\x5a\\xa4\\xab\\x05\\xb7\\xee\\xcc\\xac\\xea\\x2d\\x02\\\n\\xc0\\xfe\\xfd\\xfb\\xf7\\x65\\x20\\xaf\\x88\\xc9\\x22\\x23\\x40\\xfa\\x66\\x03\\\n\\x9e\\x4b\\xf1\\xf7\\xec\\xd9\\x33\\xaa\\x6d\\xdb\\xb6\\x93\\x28\\x1b\\x49\\xfe\\\n\\x1f\\x98\\xd2\\x27\\xa4\\xce\\xb0\\x61\\xc3\\x7e\\xc8\\xfb\\x3b\\x3c\\xc6\\x11\\\n\\x4b\\x3a\\x74\\xe8\\xb0\\x30\\x23\\x23\\xe3\\x23\\xcc\\x98\\x27\\xd0\\x79\\xb2\\\n\\xe0\\x60\\xc6\\x58\\x36\\x47\\x39\\xb5\\x99\\x3a\\x78\\x42\\x57\\x37\\x4c\\x99\\\n\\x32\\x25\\x1a\\x69\\x1e\\x01\\x98\\x5d\\xc9\\x8f\\x60\\xb1\\xda\\xb7\\x74\\xe9\\\n\\xd2\\xdd\\x52\\xc7\\xec\\xaa\\xde\\x28\\x00\\x9a\\xf9\\x72\\xfa\\x40\\x26\\x4c\\\n\\x98\\xa0\\x16\\x14\\x14\\x2c\\x07\\xa0\\xfb\\xc8\\xd3\\x18\\xc4\\xea\\xab\\x57\\\n\\xaf\\x3e\\x70\\xf4\\xe8\\x51\\x31\\x5d\\x14\\x24\\xf3\\x0e\\x06\\xf8\\x2a\\xb1\\\n\\x03\\xa0\\xac\\x00\\xb4\\xc7\\x00\\xb1\\x84\\x22\\x0b\\x20\\x3e\\x4a\\x9e\\x6b\\\n\\xc1\\xe1\\xfd\\x28\\x46\\xf7\\xbd\\xd8\\x87\\x7b\\x85\\x2e\\x98\\x30\\x63\\xc6\\\n\\x8c\\x4c\\xe8\\x32\\xe1\\x25\\xba\\x46\\x75\\xfe\\xba\\xb0\\xbb\\xbd\\xbf\\xac\\\n\\xe4\\x75\\xdb\\x4a\\xcf\\xd7\\x6c\\x5d\\x8e\\x5b\\xd6\\x2f\\x5f\\x98\\x33\\x5e\\\n\\xf2\\xc3\\x0e\\xa0\\xd9\\x2f\\xa7\\x33\\x05\\x40\\xe3\\x60\\xf8\\x6d\\xde\\x65\\\n\\x4a\\x15\\x60\\xff\\xfd\\xf8\\xc0\\x81\\x03\\x47\\xa4\\x9c\\x69\\xd9\\x83\\xe4\\\n\\x3d\\xca\\xfb\\x00\\x9c\\x42\\x5a\\x8d\\xf9\\xf2\\xbb\\xe4\\xe4\\xe4\\x05\\x6b\\\n\\xd7\\xae\\xad\\xa2\\x3c\\x1e\\xc9\\x7d\\xbd\\xd6\\xcc\\xa1\\x8a\\xe3\\x9d\\xa8\\\n\\xa8\\xa8\\x49\\xdb\\xb6\\x6d\\xab\\x10\\xfa\\x50\\xc2\\x8c\\xd9\\x33\\x2b\\x3f\\\n\\x1b\\x59\\x1d\\x55\\x1d\\xed\\xde\\x4a\\x54\\xa5\\xa2\\x64\\x7d\\x1c\\x59\\x91\\\n\\xb3\\x38\\x3b\\x56\\x4a\\xc2\\xbe\\x3a\\x05\\x62\\x8f\\x31\\x75\\xaf\\x07\\xb4\\\n\\x27\\xe0\\xc3\\xa5\\x8f\\x00\\xe0\\x71\\xc0\\x3b\\x2a\\x8c\\xb1\\xba\\xb6\\x41\\\n\\xea\\x7e\\xab\\x83\\x27\\x79\\x94\\x47\\xf2\\xfe\\x74\\x69\\x69\\xe9\\x4d\\xf2\\\n\\xde\\xaf\\x5f\\x3f\\x4b\\x5a\\x5a\\xda\\x3a\\xf2\\x05\\x70\\x2b\\xf5\\xef\\xaa\\\n\\xac\\xac\\x9c\\x20\\xcf\\x52\\x1e\\x52\\x90\\xe5\\xbb\\xe1\\x55\\xdd\\x10\\xbc\\\n\\xd0\\x3b\\xf2\\xe0\\xd2\\xac\\x3d\\x26\\x26\\x4b\\x44\\x44\\xc4\\x1c\\x56\\xd1\\\n\\xd1\\x0c\\xdc\\x0e\\x90\\x2f\\xc4\\xc6\\xc6\\xae\\xa3\\x39\\x61\\xdd\\x42\\xfe\\\n\\x1d\\xa4\\xb3\\x00\\xc7\\xad\\x07\\xea\\xc6\\x91\\x37\\x1f\\xfa\\x5e\\xd0\\xff\\\n\\x64\\xf5\\xea\\xd5\\xff\\xa0\\xee\\x5c\\xe8\\xcb\\x28\\x53\\x89\\x7f\\xc4\\x3e\\\n\\x1c\\x29\\x6d\\xb8\\x11\\x06\\xf8\\x62\\xb7\\x3a\\x3f\\x91\\x45\\xc8\\x93\\x2c\\\n\\xe5\\xb4\\x66\\x63\\xb1\\xda\\xa4\\xe7\\x87\\x1d\\x40\\x86\\xef\\xcb\\x1e\\xd3\\\n\\x07\\x65\\x45\\x5f\\xdd\\xc9\\xa0\\x1f\\x12\\x46\\x98\\x96\\x9b\\x50\\xe6\\x8b\\\n\\xb6\\x6c\\xd9\\xe2\\xd2\\x7b\\x4c\\xcd\\x0c\\xc0\\xf9\\x1b\\xe5\\x3a\\x9f\\x46\\\n\\x2a\\x79\\x80\\xd4\\x87\\xf2\\xe5\\xc7\\x8e\\x1d\\x93\\x45\\xc4\\x59\\x5e\\x5e\\\n\\xfe\\x31\\xe9\\x93\\xe4\\x57\\x00\\x66\\x37\\xa6\\xf5\\x93\\xe8\\xc7\\xee\\x06\\\n\\x51\\x10\\x0f\\x9a\\xdd\\x32\\x57\\xb6\\x81\\xac\\xe2\\xf6\\x88\\x6a\\x45\\x89\\\n\\xac\\xb6\\x28\\x69\\xf9\\xaa\\xad\\x6b\\x81\\xb5\\x3c\\x5a\\x89\\x98\\xa5\\x37\\\n\\x19\\x76\\x3b\\x70\\xe0\\xf0\\xc1\\xa3\\x1c\\xaa\\x33\\xbd\\x9e\\x3d\\x76\\x52\\\n\\xb5\\xb7\\xbb\\x64\\x3d\\x38\\x6c\\xf0\\x90\\x95\\x74\\x7e\\x3d\\x83\\xcd\\x61\\\n\\x3a\\xb6\\x47\\x9a\\xc4\\xce\\x9b\\xbd\\x6b\\xd7\\xae\\xfd\\xc2\\x94\\xac\\xba\\\n\\xd1\\xd1\\xd1\\x2f\\xf1\\x68\\xec\\x32\\x24\\xdf\\x33\\xa0\\xf7\\xd2\\x00\\x2e\\\n\\xbf\\xb8\\xb8\\x78\\x4f\\x49\\x49\\x89\\xbd\\x73\\xe7\\xce\\x05\\xb4\\x95\\x4c\\\n\\xbb\\x83\\x68\\x37\\x83\\x72\\x95\\xbc\\x8f\\x8a\\x8a\\x8a\\x6a\\x3c\\x69\\xcd\\\n\\xbc\\x63\\x27\\x96\\x0e\\x1b\\x3c\\x74\\x55\\xdb\\xcb\\x96\\xbe\\x69\\xc7\\xb5\\\n\\xd4\\xd4\\xe3\\x56\\x5b\\x7c\\x99\\xf5\\x7f\\x51\\x8a\\x76\\x5b\\xdd\\x55\\x5d\\\n\\x97\\x08\\x33\\x6d\\x9a\\xaa\\xc3\\x4a\\x76\\xbb\\x53\\xb5\\xbc\\x79\\xa2\\xa7\\\n\\x3d\\xca\\xd3\\x1e\\x8b\\x51\\x23\\x07\\x96\\x95\\x95\\x0d\\xcc\\xcf\\xcf\\x7f\\\n\\x0c\\x09\\xbc\\x81\\x01\\xdb\\x88\\xaf\\x31\\xe8\\x99\\x30\\xec\\x1a\\x28\\x86\\\n\\xee\\xfd\\x48\\xd9\\x72\\x3a\\x33\\xf3\\x71\\x8b\\xa8\\x7b\\xab\\x6e\\x2f\\x42\\\n\\x2b\\x3a\\xf5\\x43\\x00\\x4c\\xa3\\x5d\\xd1\\x99\\x0f\\xb0\\x62\\x4b\\x5b\\x8d\\\n\\x16\\xcc\\x30\\x69\\xba\\xf3\\x59\\xb3\\x66\\x8d\\x80\\xe9\\x72\\xab\\x62\\xf9\\\n\\xab\\xb7\\x2f\\xb7\\x60\\xc1\\x82\\x13\\x4c\\xbd\\x69\\x48\\xc7\\xdd\\x32\\x15\\\n\\x79\\xce\\x8b\\x8b\\x8b\\x7b\\x98\\x55\\xf3\\x9c\\x74\\x82\\x81\\x2c\\xba\\x6b\\\n\\x11\\x80\\xc6\\x9b\\xec\\x54\\xb6\\x73\\xc3\\xd3\\xd3\\xd3\\x3f\\x3c\\x75\\xea\\\n\\xd4\\x25\\x76\\x2d\\xe7\\x53\\x52\\x52\\x4e\\x42\\x3b\\x12\\x10\\xdb\\x92\\xde\\\n\\x9c\\x9a\\x9a\\x7a\\x88\\x7c\\xd7\\xc2\\x64\\xb2\\xcd\\x80\\xaa\\x85\\x4d\\x02\\\n\\x01\\x6f\\x2c\\xc0\\x94\\x60\\x88\\x7a\\xdd\\x3d\\x08\\x57\\x28\\xf7\\x5b\\xd0\\\n\\x51\\xab\\x05\\x20\\x80\\x3e\\x8d\\xc9\\x31\\x91\\x95\\x38\\x0e\\x30\\xdb\\x33\\\n\\xd5\\x3e\\x3d\\x7d\\xfa\\x74\\x36\\x65\\x3f\\xa2\\xaa\\x69\\xbe\\xa8\\xef\\x80\\\n\\xfe\\x15\\x24\\x78\\x06\\x74\\x4e\\xf4\\xa7\\x18\\xc4\\xf3\\xd0\\x83\\x8f\\x50\\\n\\x16\\x4d\\x3f\\x07\\xc9\\x1f\\x4f\\xb9\\x00\\x1b\\xf6\\x10\\x16\\x09\\x04\\xbc\\\n\\x7b\\x61\\x36\\x37\\x3b\\x3b\\xbb\\xc1\\x2f\\xdd\\xbb\\x77\\xef\\x8e\\x00\\xb6\\\n\\x02\\xc9\\x10\\xe5\\x5e\\xc9\\xc0\\x9e\\xdd\\xb9\\x73\\xe7\\x2a\\x06\\x76\\x8c\\\n\\x41\\x1f\\x01\\xbc\\xf9\\x2c\\x26\\x77\\x52\\x16\\xe8\\xc2\\x66\\x01\\xc0\\xeb\\\n\\x91\\xb4\\xcb\\x48\\xda\\x4e\\x3e\\x84\\x03\\xd3\\x66\\x3f\\xed\\xcb\\x36\\xaf\\\n\\x37\\x7c\\x75\\x22\\xed\\x42\\xfe\\xea\\xb0\\xa3\\x47\\x83\\x21\\x01\\x38\\x6f\\\n\\xde\\x3c\\x6b\\xaf\\x5e\\xbd\\x26\\xf0\\xc5\\xd7\\xe7\\xe4\\xe4\\x14\\xf9\\x62\\\n\\xb0\\x5b\\xb7\\x6e\\xcf\\x33\\x18\\x31\\x4d\\x24\\xac\\xc3\\xe7\\xf7\\x38\\xca\\\n\\x9f\\xf5\\x0d\\x71\\xb3\\x58\\x6e\\xc5\\x80\\x9e\\x4d\\x9a\\x20\\xef\\x81\\x06\\\n\\x3e\\x4a\\x24\\x20\\x65\\x00\\xe2\\x41\\x40\\xfc\\x92\\x8f\\x51\\xd1\\xbd\\x7b\\\n\\xf7\\xed\\x7c\\x10\\xf1\\x23\\x26\\x12\\x7b\\xe2\\xa8\\x70\\xb0\\xe0\\x7c\\x12\\\n\\x68\\xdb\\xfe\\xea\\x07\\x0d\\x20\\x3b\\x8e\\x88\\x2b\\x57\\xae\\xdc\\x0b\\x93\\\n\\xef\\x2f\\x5f\\xbe\\xfc\\xb2\\xaf\\x8e\\x30\\x29\\x26\\x31\\xc0\\x47\\xa9\\x13\\\n\\x4b\\x7a\\x12\\x9a\\x7b\\xf2\\xf2\\xf2\\x5c\\x7a\\x0f\\xe9\\x93\\xbc\\xe7\\x99\\\n\\xda\\xe2\\xba\\xf7\\xd5\\x8c\\xcf\\x32\\x40\\xec\\x88\\xd4\\x89\\x94\\xbf\\x7d\\\n\\xe9\\xd2\\x25\\x5b\\x61\\x61\\xe1\\x45\\x59\\x99\\x21\\xba\\x9d\\xb2\\x38\\x3e\\\n\\xce\\xf7\\xba\\x76\\xed\\x7a\\x14\\x70\\x8f\\xf9\\x6c\\x28\\xc0\\xc2\\x40\\xa7\\\n\\x8b\\xab\\xf9\\x69\\xd3\\xa6\\x89\\xf2\\x96\\x85\\xe0\\x4d\\xc0\\x73\\xd9\\x6e\\\n\\x0d\\xf5\\x0b\\x40\\xfd\\x18\\xd8\\x13\\xd4\\x17\\x49\\xa8\\x26\\xfd\\x7d\\x6e\\\n\\x6e\\xee\\x71\\xbd\\x3e\\xc0\\xe1\\x3b\\x56\\x64\\x1a\\x96\\x92\\x96\\xa2\\xbb\\\n\\x9c\\x4a\\xac\\xa6\\x38\\xe3\\x88\\x31\\x0d\\x7e\\x5f\\x39\\x54\\x72\\xd5\\xd7\\\n\\x53\\xe8\\xcf\\xf3\\xac\\xb1\\x88\\xb8\\xb6\\x58\\x3c\\x2b\\xa8\\x87\\x0f\\xe8\\\n\\x6f\\x3e\\x8f\\x76\\xd2\\x54\\x66\\xca\\x9f\\xc4\\x00\\x97\\xb2\\x70\\x05\\xd3\\\n\\xca\\x5a\\xef\\x70\\xce\\x9c\\x39\\x5d\\x61\\x64\\xe0\\x92\\x25\\x4b\\xde\\xd3\\\n\\xf3\\x1a\\x4a\\x65\\x81\\x00\\x90\\x7f\\xc2\\xfc\\x4f\\x89\\x52\\x2d\\x1b\\x7b\\\n\\xef\\x41\\x52\\x47\\x43\\x34\\xd3\\x1e\\x9c\\xb1\\xbe\\x30\\xc3\\x31\\x5a\\x36\\\n\\xf1\\x96\\xd2\\x4a\\xa5\\xdd\\xd2\\x02\\x85\\xfe\\x8c\\xea\\x00\\xae\\x30\\xfd\\\n\\xfb\\xe2\\x34\\x90\\xc5\\xc1\\x4c\\x88\\xe1\\x23\\xbe\\x4d\\xff\\xe3\\x44\\xc2\\\n\\x89\\xff\\xc2\\x59\\x31\\x45\\x77\\x56\\x98\\x69\\xc0\\x57\\x9d\\x80\\x24\\x50\\\n\\xbc\\x15\\x4c\\xbf\\x3e\\x66\\xc0\\x93\\x4e\\x31\\x53\\xee\\x87\\xf1\\x9b\\x05\\\n\\x3c\\xa4\\x30\\x17\\x3d\\xf7\\x14\\xd9\\x0d\\x82\\x27\\x34\\x9e\\x3b\\x00\\xc9\\\n\\xf3\\x0c\\x4c\\x49\\x37\\x0f\\x89\\x67\\xb9\\xc7\\x7b\\x05\\xfb\\xe3\\x99\\x00\\\n\\xf7\\xb9\\xf0\\x41\\x1c\\x83\\x53\\x76\\xb2\\x47\\x9d\\xa0\\x5f\\x4d\\x33\\x22\\\n\\x36\\x1e\\x92\\xe0\\x64\\xb1\\xf8\\xd0\\x6c\\x6f\\x80\\x36\\x18\\x09\\x14\\x37\\\n\\x94\\x90\\x6c\\x67\\xbb\\x36\\x16\\x5b\\x4f\\x57\\x74\\xb2\\xdf\\xad\\xa1\\xcc\\\n\\xcd\\x73\\xc2\\xb4\\x53\\x06\\x0c\\x18\\x30\\xb0\\x6b\\x81\\xba\\x28\\xe9\\x6a\\\n\\xc4\\xa8\\xcf\\x15\\x45\\xce\\x83\\xbd\\x06\\x24\\x2b\\x82\\x02\\x31\\x7b\\x7c\\\n\\x06\\xfa\\x10\\x15\\xb1\\x19\\xf0\\x7a\\x03\\x7e\\x7b\\x99\\x41\\x3e\\x09\\x02\\\n\\x28\\x74\\x03\\xb0\\x21\\x3f\\x1e\\x20\\xa4\\xd3\\xa9\\x4f\\x1b\\xcf\\x5b\\x9f\\\n\\x30\\x7b\\x06\\x10\\x1d\\x30\\x6e\\x05\\xac\\x19\\xa4\\x33\\xc8\\xf3\\x56\\xd5\\\n\\xc8\\xa3\\x8e\\xc2\\x02\\xd3\\x71\\xc7\\x8e\\x1d\\xe3\\x00\\x7b\\x00\\x52\\xbc\\\n\\xcf\\x28\\xf4\\x78\\xa0\\x4d\\x39\\x43\\x79\\xbf\\xf6\\x03\\x79\\x94\\xba\\xbf\\\n\\x4a\\x9d\\xda\\x28\\xfa\\xa0\\xde\\x99\\xb2\\x7b\\x6d\\xf3\\x6f\\x06\\x80\\xba\\\n\\x1f\\x0f\\xfd\\x53\\xf7\\x5c\\x75\\x4c\\x7a\\x81\\x9a\\xab\\x59\\xb5\\xb1\\x4c\\\n\\xdb\\x06\\x0d\\x64\\x1f\\xdd\\x2d\\xa6\\xac\\x3d\\x8c\\xcf\\x02\\xb8\\x06\\x25\\\n\\x49\\xe8\\xc1\\xd9\\x35\\x40\\x01\\x10\\xd0\\x74\\x29\\xf5\\xd1\\x34\\x36\\x98\\\n\\xaa\\x3a\\xd9\\x12\\x1a\\x74\\xbe\\x3e\\x8e\\xb4\\x4b\\x1f\\xd5\\xf0\\x22\\x3b\\\n\\x9d\\x6c\\x9f\\x0d\\x07\\x50\\x68\\x00\\x28\\x7e\\xbc\\xc2\\x6e\\x0e\\xd7\\xb9\\\n\\xaa\\x4e\\xef\\x52\\xe4\\x6c\\x0a\\xba\\x1c\\x77\\xe9\\xae\\xf1\\x7a\\xbe\\xd9\\\n\\x94\\xe9\\x58\\x84\\x14\\x3d\\x43\\xfd\\x35\\x30\\x1d\\xe7\\x8b\\x8e\\xc1\\x3d\\\n\\x0d\\x00\\x2e\\x97\\xbe\\xaf\\x7a\\xde\\xca\\x6a\\xc1\\xd9\\x45\\xd9\\x1f\\xbc\\\n\\x95\\xeb\\x79\\xf4\\x51\\xce\\xf3\\x21\\xf6\\xce\\x25\\x7a\\x5e\\xa8\\xa9\\x01\\\n\\xa0\\x2f\\x3f\\x5e\\x7a\\x7e\\xe4\\xe8\\x60\\x3b\\xaa\\x75\\xbf\\xfb\\x65\\x18\\\n\\xcf\\xf4\\x1c\\x01\\x42\\xa6\\x59\\xa0\\x41\\xe8\\x08\\xc5\\xac\\xf0\\x6b\\x03\\\n\\xa5\\x0d\\xb5\\xbe\\x01\\xe0\\x37\\x7e\\x3c\\xf7\\x01\\xc8\\x1b\\x83\\x0a\\xd8\\\n\\xdc\\x09\\x82\\xb1\\x06\\x8d\\x3e\\x93\\x6d\\x85\\x4a\\x5f\\xaf\\x1b\\xd7\\x9a\\\n\\xa0\\x46\\xe5\\xa8\\x4e\\xfb\\x8d\\x52\\xe8\\xb0\\x6a\\x5b\\x95\\xaa\\xab\\x6e\\\n\\x77\\x6d\\x0c\\x8d\\x6e\\xd6\\x03\\x5b\\xaf\\x97\\x6f\\x69\\x86\\x80\\xe7\\xb4\\\n\\x46\\x1c\\x38\\x97\\x34\\x7c\\xec\\xc1\\xef\\x4f\\x6b\\x23\\xf1\\x6c\\xa7\\x61\\\n\\x63\\x2c\\x5a\\xe4\\x1e\\xb1\\x85\\xf5\\x61\\x1b\\x00\\x7a\\xda\\x5f\\x0d\\x79\\\n\\x60\\x75\\xc2\\x6f\\x7b\\x6a\\x53\\xa3\\xb2\\x8b\\x92\\x47\\xc4\\x16\\x27\\xdf\\\n\\xa0\\x56\\x47\\xc6\\x2b\\x12\\x79\\xd6\\x8a\\x53\\x6e\\x8c\\xa9\\x74\\x5a\\x97\\\n\\xe8\\xe3\\x37\\x00\\xc4\\x93\\x72\\x84\\xf3\\xd4\\xbe\\xb8\\xac\\x37\\x8e\\xd8\\\n\\x1c\\x59\\x99\\xb5\\x49\\xab\\x4c\\xfb\\x52\\xdd\\x50\\xf7\\x50\\x5a\\x27\\xfa\\\n\\x2e\\xa4\\xaa\\xa3\\x66\\xd4\\xf9\\x84\\xcc\\x6f\\x54\\x5c\\xed\\xa0\\x25\\x8f\\\n\\x29\\x3d\\x5a\\xc7\\xc0\\xad\\x02\\x20\\x9e\\xa4\\x60\\x9c\\x5e\\x78\\xad\\xa6\\\n\\x66\\x74\\x57\\x43\\x63\\x13\\x0f\\x13\\x1e\\x9d\\x4c\\x74\\xbf\\xea\\xed\\x54\\\n\\x4e\\x5c\\x95\\x4e\\xc7\\x37\\x6b\\x82\\x1b\\x80\\x0d\\x35\\x7a\\x2d\\xe5\\xd7\\\n\\xd1\\x5d\\x71\\x17\\x12\\xfa\\xb8\\x16\\x96\\x84\\x0b\\x87\\xc7\\x24\\x17\\x6d\\\n\\x15\\xdd\\x55\\xef\\x9e\\xe0\\xec\\xd9\\xb3\\xbb\\xb1\\x48\\x66\\x11\\xc5\\xe0\\\n\\x8f\\x01\\xbc\\x32\\xb6\\xab\\x3b\\x94\\xa8\\xd8\\x8f\\x12\\x4b\\xf3\\x46\\x17\\\n\\x27\\x67\\xb9\\x61\\x94\\x78\\x21\\x8f\\x53\\x39\\x6d\\x93\\x8e\\x89\\x5b\\xa1\\\n\\x9e\\x79\\x2d\\xa7\\xa2\\xbb\\xce\\x25\\x65\\xa1\\xbb\\xb2\\x8c\\x55\\x59\\x74\\\n\\x17\\x63\\x8a\\xe9\\x74\\x76\\x7b\\x0e\\x00\\x3f\\x03\\x50\\xe2\\x91\\x91\\xa3\\\n\\xd4\\x0a\\x6c\\xc3\\xa2\\x8a\\x8a\\x8a\\xf7\\x57\\xae\\x5c\\x79\\xb5\\xee\\xb8\\\n\\xa9\\x37\\x17\\xd0\\x77\\x60\\x83\\xc4\\x96\\x26\\xf6\\xe7\\xb8\\x14\\xc7\\x62\\\n\\x69\\xae\\x2d\\xa5\\xf8\\xb3\\xf2\\x08\\xab\\x73\\x96\\x5e\\xf7\\x5b\\x07\\xa0\\\n\\x2f\\xdd\\x95\\x5c\\xb4\\xe5\\x66\\x8c\\xf5\\xdf\\x70\\xb3\\xe1\\x55\\xa6\\xaa\\\n\\x4f\\xa7\\x86\\xac\\x09\\x80\\xd8\\xb7\\xd3\\xd9\\x1d\\x39\\x29\\x45\\x5b\\xb8\\\n\\x6b\\x03\\x94\\x5a\\xe4\\x66\\xc0\\x73\\xbb\\x6b\\xd3\\x28\\x00\\xca\\x34\\x42\\\n\\x12\\x7c\\xda\\x4f\\xfa\\x17\\x6c\\x84\\xd4\\xeb\\xb9\\xb4\\xe8\\x2e\\x6c\\x5d\\\n\\xc7\\xe2\\x25\\x8b\\xf3\\xcc\\xf6\\x69\\x66\\x4d\\x30\\x56\\x61\\xb3\\x8d\\xfa\\\n\\xab\\x27\\xe0\\x99\\xb1\\x9f\\xfc\\xb5\\x13\\x6c\\xb9\\xdd\\xaa\\x7d\\xd2\\xf1\\\n\\xfc\\x01\\x71\\x18\\xb8\\x05\\x4f\\xdd\\xe5\\x56\\x18\\xc2\\x4b\\xd8\\x25\\xd0\\\n\\x8f\\x0e\\x12\\xfb\\x29\\xe0\\x3d\\xb5\\xd9\\xf1\\x4d\\x9e\\x3c\\x39\\x4e\\xb3\\\n\\x57\\xaf\\x4f\\x2a\\xda\\x76\\x03\\x53\\x2e\\xc6\\x97\\xee\\x32\\xdb\\xa6\\xbf\\\n\\x7a\\x61\\x07\\xd0\\x97\\x0e\\x4a\\x29\\xde\\x3a\\xda\\x1f\\x43\\xc1\\x96\\xe3\\\n\\x99\\xe1\\x6a\\x4d\\xac\\x5c\\x17\\xf9\\xbb\\xd5\\x61\\x7b\\xc3\\x9f\\xee\\x0a\\\n\\xb6\\x1f\\x4f\\xba\\xb0\\x03\\x48\\x07\\x0d\\xea\\xa0\\xba\\xf6\\x93\\x27\\x23\\\n\\xa1\\xbe\\xb3\\x38\\x44\\xe3\\x72\\x7b\\xbd\\xb6\\x9d\\x26\\xb3\\x67\\xc3\\xae\\\n\\x03\\x45\\x07\\x25\\x96\\xd6\\xd7\\x41\\x1d\\x2f\\x1c\\xb0\\x3b\\xad\\xda\\x61\\\n\\x74\\xa4\\x71\\xe8\\x13\\x2a\\x68\\x89\\x89\\x89\\x72\\x20\\xe5\\x0a\\xf8\\x05\\\n\\x2f\\xe8\\xcf\\x4d\\x99\\x86\\x1d\\x40\\xd5\\x56\\xf5\\x52\\x72\\xf1\\xb6\\xaa\\\n\\xe4\\xe2\\xcf\\xec\\x5a\\x4d\\xb9\\x12\\x61\\x2b\\x57\\x78\\xb6\\x25\\x17\\x6f\\\n\\xbf\\x1a\\xa3\\x29\\x3f\\x63\\x8a\\x8d\\xe2\\x78\\x60\\xd2\\xdc\\xb9\\x73\\xdb\\\n\\x85\\x32\\xd0\\xe9\\xd3\\xa7\\xf7\\xe1\\x72\\x79\\xb3\\xef\\x9a\\xc2\\x3a\\x85\\\n\\x6b\\xcf\\x4d\\x4a\\xd1\\x41\\x7d\\xbc\\xe9\\xa0\\x97\\x5f\\x5e\\x50\\x08\\x68\\\n\\xc7\\x91\\xc2\\x08\\x0e\\x98\\x6e\\xa1\\x7e\\x02\\xe7\\x24\\xff\\x9e\\x3f\\x7f\\\n\\x7e\\x59\\x20\\x60\\x72\\x80\\x3e\\x1c\\x63\\x78\\x5f\\xed\\xf5\\xb6\\x65\\x81\\\n\\xd0\\x86\\xbb\\x6e\\xd8\\xfc\\x7c\\x80\\xe1\\xf7\\x6e\\x8c\\x27\\xf3\\x02\\x24\\\n\\x40\\xdc\\xc2\\x6e\\xa0\\x03\\x8e\\xd7\\x5f\\xca\\x33\\x12\\xaa\\x70\\x59\\x68\\\n\\x40\\x7c\\xa7\\xce\\xcf\\x55\\x5f\\xfd\\xea\\xa6\\xcf\\x8f\\x1c\\x8a\\xf5\\x3c\\\n\\xd6\\xe4\\xd2\\xf9\\x98\\x8d\\x1b\\x37\\x6e\\xe2\\x27\\x61\\x09\\x4c\\xdd\\xf3\\\n\\xd0\\xc9\\xd1\\xe7\\x5a\\x3c\\xcd\\x8d\\xb6\\xc2\\x7b\\xf2\\xae\\xbf\\x87\\x45\\\n\\x02\\x01\\x4f\\xee\\xc6\\x6c\\xe3\\x62\\xd1\\x97\\x7a\\xc3\\x66\\x52\\x0c\\x55\\\n\\xb9\\xd2\\xf6\\x81\\x00\\x49\\x78\\x98\\x3d\\xa8\\x8b\\x2c\\xbe\\x43\\xc7\\x4f\\\n\\xf1\\xc3\\xc5\\x96\\x5a\\xe2\\x55\\xe5\\xc8\\xa1\\x7a\\x4d\\x5d\\x20\\xd4\\xcb\\\n\\x6c\\xa6\\x8c\\x90\\x00\\x14\\xcf\\x05\\x57\\x25\\x7e\\xce\\xc0\\xd7\\xf1\\x8b\\\n\\xc8\\xa0\\x07\\x25\\x40\\xe2\\xd2\\x2f\\xc1\\x14\\x71\\xc1\\x70\\x2e\\x79\\x98\\\n\\xcb\\x0f\\xe7\\xbc\\x50\\x18\\xda\\xe5\\x9d\\x26\\x00\\x35\\x68\\x00\\x45\\x6a\\\n\\xb8\\xf1\\x74\\x37\\x53\\xe7\\x5d\\x7f\\xd7\\x3b\\x02\\x1d\\xc7\\xf9\\xf6\\x5f\\\n\\x7b\\x51\\x02\\xa5\\x6b\\x8e\\xfa\\x41\\x01\\x58\\x7b\\x37\\xe6\\x2e\\xf4\\x95\\\n\\xdc\\x8d\\x71\\xdd\\x2c\\x0d\\x2b\\xf3\\x5e\\x6e\\xc7\\x87\\xb5\\xfd\\x30\\x36\\\n\\x16\\x30\\x80\\x75\\xee\\xc6\\xbc\\x16\\x46\\x3e\\xdc\\x9a\\x4a\\x38\\x7f\\xd8\\\n\\x76\\x36\\xf6\\xba\\x80\\x79\\x73\\x6b\\xa4\\x89\\x5e\\x02\\x62\\xb2\\xf6\\x6e\\\n\\x4c\\x2a\\x3a\\xcb\\xef\\xc5\\xa2\\x50\\xf8\\xc7\\x04\\xaa\\xb4\\x44\\x44\\xc6\\\n\\x94\\x58\\x13\\x55\\xbc\\x48\\x2d\\x3a\\x98\\x36\\xa4\\xc5\\xc6\\x63\\xca\\xb6\\\n\\x05\\x3c\\xd3\\x77\\x63\\x82\\x1d\\x79\\xd9\\xc5\\xd2\\x1f\\x00\\xe2\\xc6\\x5e\\\n\\x5f\\xbc\\x59\\x15\\x6c\\x1b\\x4d\\x45\\xe7\\x26\\x81\\x2c\\x0c\\x5e\\xfd\\x78\\\n\\xc1\\xde\\x8d\\x09\\x76\\x10\\xb8\\xd5\\x4f\\xad\\x59\\xb3\\xc6\\xef\\xdd\\x98\\\n\\x60\\xdb\\x0f\\x27\\x9d\\x01\\xa0\\x80\\x57\\xeb\\xc7\\x73\\x3b\\x4b\\x48\\x29\\\n\\xde\\x96\\xab\\xa9\\x96\\x60\\xef\\xc6\\x84\\x93\\xd7\\x16\\xd9\\x96\\x01\\xa0\\\n\\x0f\\x3f\\x9e\\xc2\\x59\\xc2\\x53\\x70\\xdf\\xe4\\x56\\x7e\\x8b\\x44\\xcc\\x83\\\n\\x29\\x43\\x07\\xfa\\xf2\\xe3\\xd5\\x3d\\x07\\xf5\\xa0\\xff\\xce\\xbf\\x1a\\x00\\\n\\x82\\x44\\xb3\\xf8\\xf1\\xae\\xf5\\x2f\\x60\\x00\\xf8\\xb5\\x1f\\x2f\\xaf\\xde\\\n\\xaf\\x13\\x1b\\xeb\\x2c\\xe1\\x5a\\x07\\x4e\\xe7\\xdf\\xd0\\x81\\x9c\\x25\\x98\\\n\\x3a\\x07\\xd5\\x09\\x5b\\xd3\\xaf\\x11\\x30\\x24\\x10\\xfb\\xee\\x88\\xd5\\x69\\\n\\x93\\x73\\xd0\\x8d\\xfd\\xf2\\x16\\x55\\x66\\xe6\\x2e\\xaa\\x4c\\x3a\\xb7\\x73\\\n\\x03\\xe7\\xa0\\xc6\\x1f\\x36\\xb4\\x82\\x56\\x1f\\x01\\x43\\x02\\xa5\\x08\\x10\\\n\\x4f\\x92\\x34\\xbb\\x97\\xb7\\x3e\\x9b\\x2d\\x37\\xc7\\x90\\xc0\\x96\\xcb\\x62\\\n\\xcb\\xe6\\xac\\x45\\x03\\xc8\\xd6\\xd1\\xab\\xc7\\xbc\\xa1\\xfc\\xe6\\x80\\xba\\\n\\x45\\x03\\x88\\x97\\xfb\\x22\\xfe\\xc6\\xc3\\x6c\\x25\\xe5\\x46\\xbe\\x22\\x29\\\n\\xce\\xdb\\x43\\x92\\xdf\\x1c\\x60\\x79\\xeb\\xd3\\x4d\\x07\\x7a\\xab\\xd0\\x9c\\\n\\x79\\x9c\\xf5\\x9e\\x01\\xac\\x89\\x9c\\x99\\x74\\x91\\x73\\x11\\x01\\x91\\xe7\\\n\\x42\\xd2\\x33\\xcd\\xc9\\x57\\xdd\\xbe\\x5b\\x0c\\x80\\x00\\x65\\x78\\xae\\xf8\\\n\\x15\\xa8\\xeb\\x99\\x9f\\x49\\x88\\xb3\\x56\\xfe\\x48\\x47\\x62\\xbd\\x20\\xf5\\\n\\xf8\\x75\\xa6\\x2b\\xbf\\x2e\\x7d\\xbd\\x8a\\x8d\\x98\\xd1\\x62\\xa6\\x30\\x7a\\\n\\xed\\x1c\\xd2\\xe5\\x1a\\x2a\\x92\\x27\\xff\\x1f\\xe8\\x37\\x30\\xa5\\xef\\x91\\\n\\x4a\\x42\\x07\\xfd\\x59\\xbf\\x04\\x8d\\x50\\xa1\\xc5\\x48\\x20\\x63\\xfb\\x2f\\\n\\x20\\x8c\\x47\\x92\\x3a\\x01\\xcc\\xf3\\xfc\\x0e\\xee\\x69\\xf2\\x0c\\xa9\\xf4\\\n\\x32\\x76\\x59\\x60\\x5c\\x3f\\xde\\x11\\xf0\\xa1\\x6b\\xf2\\xdf\\x88\\x08\\x4f\\\n\\x5e\\x57\\x39\\x2f\\xcc\\x36\\x45\\x96\\x05\\xd0\\x5e\\xa4\\xa3\\x29\\x44\\xf9\\\n\\x0d\\x9c\\xdf\\x3e\\x01\\x4e\\xea\\x5c\\x22\\x5d\\xc1\\x99\\xf0\\x23\\x3c\\xfb\\\n\\x02\\xdc\\x6f\\x7b\\xc1\\x54\\xf0\\xcf\\x65\\x30\\xad\\x86\\x40\\xc3\\x4f\\xc3\\\n\\xee\\x01\\xbc\\xfb\\x88\\x19\\x34\\xe3\\x8b\\x3f\\x70\\x73\\xe6\\xb3\\xa0\\xac\\\n\\xe2\\xbf\\x17\\xde\\x0a\\xa1\\xcb\\x90\\x48\\xff\\x0f\\x6f\\x11\\x8a\\x97\\x1a\\\n\\x5e\\x95\\xcf\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x03\\x13\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x50\\x00\\x00\\x00\\x50\\x08\\x06\\x00\\x00\\x00\\x8e\\x11\\xf2\\xad\\\n\\x00\\x00\\x00\\x04\\x73\\x42\\x49\\x54\\x08\\x08\\x08\\x08\\x7c\\x08\\x64\\x88\\\n\\x00\\x00\\x00\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0d\\xd7\\x00\\x00\\x0d\\xd7\\\n\\x01\\x42\\x28\\x9b\\x78\\x00\\x00\\x00\\x19\\x74\\x45\\x58\\x74\\x53\\x6f\\x66\\\n\\x74\\x77\\x61\\x72\\x65\\x00\\x77\\x77\\x77\\x2e\\x69\\x6e\\x6b\\x73\\x63\\x61\\\n\\x70\\x65\\x2e\\x6f\\x72\\x67\\x9b\\xee\\x3c\\x1a\\x00\\x00\\x02\\x90\\x49\\x44\\\n\\x41\\x54\\x78\\x9c\\xed\\xdc\\xbd\\x6b\\x13\\x71\\x1c\\xc7\\xf1\\x6f\\x13\\x7b\\\n\\xbf\\x7b\\x30\\x22\\x2a\\xf5\\x09\\x8b\\x8b\\x1d\\x5d\\x3a\\x28\\x48\\xd3\\x2e\\\n\\xe2\\x53\\x97\\x82\\x38\\x14\\xc4\\x82\\x2e\\x2e\\xd6\\x82\\x45\\x92\\x82\\x83\\\n\\x62\\x3a\\x54\\x68\\x37\\x17\\x05\\x05\\xc9\\x20\\xba\\xf8\\x38\\x39\\x68\\x17\\\n\\xff\\x0c\\xa9\\x56\\xb4\\x20\\x8a\\x26\\xc4\\x92\\xb6\\xba\\x58\\xb5\\xe9\\x79\\\n\\xcd\\xef\\x3e\\xdf\\x90\\xd4\\xfb\\xbc\\xc6\\x5f\\xc8\\xf7\\xc2\\x9b\\xbb\\xe6\\\n\\x77\\x4d\\x88\\x08\\x11\\x51\\x72\\xb5\\xd5\\x2e\\x4c\\x8c\\xde\\xfd\\xa1\\x79\\\n\\x80\\x72\\xaa\\x2a\\x9f\\x9d\\xef\\x52\\x59\\xa8\\x6a\\x8e\\xb5\\xe6\\xb5\\x3b\\\n\\xb2\\x65\\xde\\x91\\x4d\\x69\\xf7\\xca\\x48\\xe1\\xf4\\x35\\xad\\xb9\\x1b\\xc2\\\n\\x16\\x07\\x86\\x06\\xac\\x07\\xcd\\xcd\\x96\\x42\\xd7\\x1f\\xbc\\x7e\\x22\\x27\\\n\\xfb\\x0f\\x4b\\xe7\\x9e\\x9d\\xd6\\x33\\x35\\xbd\\x99\\x79\\x2f\\x8f\\x9f\\x4f\\\n\\xcb\\xb6\\x45\\x37\\x37\\x35\\x56\\x6c\\xbb\\x78\\x7d\\xf0\\xaa\\xc6\\xdc\\x94\\\n\\xc6\\x90\\x28\\xa5\\x4a\\xb9\\xe9\\xf1\\x44\\x44\\xf6\\x76\\xee\\x92\\xaf\\xe5\\\n\\x92\\xf4\\xf5\\xf7\\x79\\x8e\\x31\\x97\\xa7\\xc6\\xee\\x8d\\x6b\\xcc\\x6d\\x78\\\n\\xc0\\x56\\x63\\x5c\\x23\\xbd\\x27\\xb2\\xbe\\x63\\xbc\\x0b\\x1a\\x11\\x13\\x17\\\n\\x50\\x64\\x65\\xc4\\xc9\\x7c\\xb1\\x80\\xcc\\x4a\\x64\\x40\\x91\\x3f\\x11\\x8d\\\n\\x6b\\x86\\x91\\x88\\xa1\\x6f\\x22\\xeb\\xc1\\xcd\\x3b\\xf7\\x43\\xd7\\xcf\\x0f\\\n\\x9d\\xaa\\x7b\\xc6\\x72\\xc4\\x97\\x4f\\x5f\\x0d\\x4f\\xe6\\x8b\\x32\\x52\\x18\\\n\\xcc\\xdb\\xbe\\x8e\\xc4\\x9e\\x81\\xcb\\xd0\\x33\\x31\\xf1\\x01\\x45\\xb0\\x88\\\n\\x0c\\xf8\\x4b\\xdc\\x88\\x0c\\xf8\\x97\\x38\\x11\\x19\\xb0\\x86\\x6d\\x44\\x06\\\n\\x0c\\x61\\x13\\x91\\x01\\xff\\xe1\\x77\\x44\\xdf\\x44\\x6e\\xb6\\x19\\x30\\x82\\\n\\x71\\x8d\\xf4\\x1e\\xcb\\x06\\x51\\x11\\x19\\x70\\x0d\\x6b\\x45\\x64\\xc0\\x3a\\\n\\x18\\xd7\\x48\\xf6\\x68\\x4f\\xb0\\x50\\xad\\xe6\\x6a\\x1f\\x63\\xc0\\x3a\\xb9\\\n\\x9e\\x1b\\xba\\xbe\\x6e\\xef\\x85\\x6d\\xee\\x79\\x1b\\x89\\x67\\x20\\x88\\x01\\\n\\x41\\x0c\\x08\\x52\\x0b\\x98\\x4a\\x87\\x8f\\x0a\\x3c\\x5f\\xde\\xce\\x7e\\xd4\\\n\\x3a\\x4c\\x6c\\x33\\xef\\x3e\\x48\\x26\\xd8\\xa8\\x3e\\x57\\xed\\x4d\\x24\\xb3\\\n\\xd9\\xc8\\xb7\\x2f\\xf3\\xb2\\xb4\\xb8\\xb4\\x62\\xfd\\xe0\\xbe\\x6e\\x79\\xf8\\\n\\xe8\\x85\\x94\\x2b\\x15\\xad\\x43\\xc5\\x92\\xf1\\x03\\x39\\x72\\xe0\\x90\\xfa\\\n\\x5c\\xb5\\x80\\xc6\\x4d\\x8b\\xd9\\xe1\\xaf\\x5a\\xef\\xd8\\xdd\\x25\\xdd\\xfb\\\n\\xbb\\xb4\\x0e\\xd3\\x72\\xf8\\x37\\x10\\xc4\\x80\\x20\\x06\\x04\\x31\\x20\\x88\\\n\\x01\\x41\\x0c\\x08\\x62\\x40\\x10\\x03\\x82\\x18\\x10\\x64\\x7d\\x27\\x72\\xeb\\\n\\x59\\xf8\\x77\\x52\\xfe\\x17\\xe7\\x8e\\xdb\\xfd\\x9f\\x31\\xd6\\xad\\xdc\\xf8\\\n\\xa5\\xb3\\x71\\x9e\\xd6\\xf2\\x72\\x37\\x6e\\x5b\\x3f\\x87\\x97\\x30\\x88\\x01\\\n\\x41\\x0c\\x08\\x62\\x40\\x10\\x03\\x82\\x18\\x10\\xc4\\x80\\x20\\x06\\x04\\x31\\\n\\x20\\x48\\xfd\\xab\\x1d\\xd3\\xcd\\xff\\x04\\x33\\x52\\xcf\\x76\\xdd\\x79\\xea\\\n\\x01\\xb5\\x5f\\x60\\xab\\xe3\\x25\\x0c\\x62\\x40\\x10\\x03\\x82\\x18\\x10\\xc4\\\n\\x80\\x20\\x06\\x04\\x71\\x1f\\x08\\xe2\\x3e\\x10\\xc4\\x4b\\x18\\xc4\\x80\\x20\\\n\\x06\\x04\\x31\\x20\\x88\\x01\\x41\\x0c\\x08\\xe2\\x3e\\x10\\xc4\\x7d\\x20\\x88\\\n\\x97\\x30\\x88\\x01\\x41\\x0c\\x08\\x62\\x40\\x10\\x03\\x82\\x18\\x10\\xc4\\x80\\\n\\x20\\x06\\x04\\x59\\xff\\x0c\\xf2\\xa7\\x8e\\xe6\\xfe\\x9c\\x71\\xa3\\x6d\\x9d\\\n\\x6b\\x8f\\x7c\\x7c\\x74\\xe2\\xcc\\xaa\\x66\\x44\\x44\\x49\\xf5\\x13\\xef\\xf0\\\n\\x8a\\xfe\\x73\\xbb\\x18\\x34\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\\n\\x60\\x82\\\n\\x00\\x00\\x10\\x6a\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x64\\x00\\x00\\x00\\x64\\x08\\x06\\x00\\x00\\x00\\x70\\xe2\\x95\\x54\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0e\\xc3\\x00\\x00\\x0e\\xc3\\x01\\xc7\\x6f\\\n\\xa8\\x64\\x00\\x00\\x0f\\xff\\x49\\x44\\x41\\x54\\x78\\x5e\\xed\\x9d\\x09\\x90\\\n\\x14\\xd5\\x19\\xc7\\x49\\xa2\\x26\\xa9\\xd2\\xc4\\x4a\\x99\\x44\\x45\\x11\\x11\\\n\\x56\\x40\\x22\\x18\\xaf\\xa0\\x31\\xe5\\x0d\\xc1\\xd2\\x58\\xe6\\xf4\\x8a\\x47\\\n\\xaa\\x62\\x52\\xf1\\x26\\x51\\x13\\x4b\\x4d\\x4c\\x19\\x53\\x51\\x4a\\xa3\\x82\\\n\\x9c\\x2b\\xcb\\xe2\\x02\\x2b\\xba\\xb0\\x27\\x7b\\xce\\x5e\\x33\\x3b\\xf7\\xcc\\\n\\xce\\xd5\\x73\\xad\\x1b\\x0e\\x5d\\xf6\\x60\\x96\\x73\\x57\\x58\\x76\\x5e\\xbe\\\n\\xaf\\xf7\\xf5\\xd0\\x33\\xf3\\x6d\\xcf\\xcc\\xce\\xb1\\x03\\xf6\\xbf\\xea\\x57\\\n\\xc0\\xf4\\x7b\\xfd\\xbe\\xf7\\x7d\\xfd\\xae\\xee\\xd7\\xcd\\x14\\x55\\xaa\\x54\\\n\\xa9\\x52\\xa5\\x4a\\x95\\x2a\\x55\\xaa\\x54\\xa9\\x52\\xa5\\x4a\\x95\\x2a\\x55\\\n\\xaa\\x54\\x65\\x5e\\x1a\\x9b\\x6d\\x41\\xbd\\xde\\x52\\x2d\\xd1\\xa8\\xb7\\x96\\\n\\xdb\\xbc\\xc1\\xe7\\x95\\xb0\\x08\\xc2\\xf9\\x3c\\xbb\\xaa\\x4c\\xab\\xd9\\xe2\\\n\\x58\\xb8\\xad\\x49\\xcb\\x24\\x2a\\x5a\\xf4\\x0c\\x9c\\xae\\x8c\\xd0\\x3d\\x9d\\\n\\x67\\x57\\x95\\x8a\\x34\\x1a\\xcd\\x69\\x36\\x21\\x70\\x23\\xff\\x27\\x29\\xb3\\\n\\xd9\\x7c\\xfa\\x36\\x8d\\x2e\\x95\\x80\\x8c\\xe0\\x79\\x79\\x76\\x55\\xc9\\xca\\\n\\xee\\x09\\xce\\x83\\x60\\x18\\xd1\\x89\\x56\\x6f\\x70\\x87\\xc1\\xd5\\x7d\\x2e\\\n\\x3f\\x14\\xa7\\xca\\x16\\xfd\\x31\\x29\\x20\\xf0\\x77\\x2a\\x08\\x11\\xac\\xde\\\n\\x40\\x37\\xcf\\xa6\\x2a\\x19\\x31\\xc6\\xbe\\x02\\x8e\\x7b\\x0e\\x82\\x70\\x34\\\n\\xda\\x99\\x81\\xcf\\xad\\xde\\xae\\xab\\x79\\xb2\\x28\\xd5\\xb4\\x9b\\x06\\xa4\\\n\\x80\\x54\\xb7\\x1a\\x64\\x79\\xe2\\x81\\xf3\\x6a\\x78\\xb6\\x88\\x1a\\x4d\\x8e\\\n\\x25\\xfc\\xaf\\xaa\\xe4\\xb2\\x75\\x77\\x9f\\x6d\\x15\\x82\\x65\\x94\\x23\\x45\\\n\\x84\\xc0\\x7e\\x9b\\xaf\\xeb\\x1a\\x9e\\x3c\\xa2\\xba\\x0e\\x8b\\x4b\\x0a\\x48\\\n\\x4d\\xbb\\x91\\xce\\xcb\\x81\\x16\\xf2\\x01\\xcf\\x26\\xaa\\xd1\\x60\\x7e\\x17\\\n\\xf3\\x55\\xb5\\x1a\\x0e\\x37\\x74\\x58\\x97\\xf2\\x9f\\x55\\x99\\xbd\\xdd\\xb3\\\n\\xa1\\x15\\xf8\\x29\\x27\\x46\\x01\\x41\\x89\\x6d\\x29\\x0d\\x06\\x5b\\x95\\x14\\\n\\x90\\x1d\\x5a\\x13\\x9d\\x4f\\x42\\x08\\xfc\\x9d\\x67\\x9b\\xd2\\x64\\xe8\\x7c\\\n\\x68\\xbb\\x6c\\xfc\\x41\\x6a\\xdb\\x4d\\x81\\x16\\x93\\xe9\\x3c\\x9e\\xe4\\xcb\\\n\\xa9\\x4e\\x5f\\xd7\\x0d\\x70\\xe5\\xee\\x23\\x1d\\x48\\xf3\\x99\\x3d\\x18\\xfc\\\n\\x1e\\xcf\\x3e\\x45\\x63\\xec\\x5c\\x16\\x71\\xa8\\xce\\x4c\\xa5\\x3f\\x81\\x10\\\n\\x7c\\x58\\xcc\\xe3\\x72\\x9d\\x59\\xd9\\xda\\xf1\\x85\\x3c\\x18\\x08\\xb4\\x36\\\n\\x66\\xf5\\xf8\\xbd\\x56\\xbf\\x7f\\xae\\x78\\xf2\\x2f\\x9b\\x60\\xf0\\xbe\\x07\\\n\\xae\\xda\\x61\\xd2\\x79\\x0a\\xc0\\x58\\x50\\x0b\\xe3\\xcd\\x57\\xf1\\x1c\\xed\\\n\\x66\\xc7\\xfd\\x92\\x43\\xeb\\xc1\\xa1\\x54\\xfa\\x08\\x7c\\xd6\\x06\\x6b\\x96\\\n\\x3a\\x79\\x20\\x10\\xe8\\xb2\\xf0\\xb8\\x98\\x0e\\xce\\x7f\\x08\\x6d\\xc3\\xb4\\\n\\x5f\\x1a\\x41\\x17\\xf5\\x4b\\xa8\\xfc\\x48\\x94\\xc3\\x52\\x00\\xc6\\x9b\\xa7\\\n\\xf0\\x3c\\x3a\\x57\\x60\\x66\\xc4\\xa9\\x06\\x1b\\x99\\x36\\x02\\xac\\x41\\x6a\\\n\\x8d\\xf6\\x79\\xd0\\x55\\x85\\xe5\\xc1\\xa8\\xc7\\x60\\xc4\\xa5\\x0d\\x1c\\xb7\\\n\\x78\\x03\\x0f\\x8a\\xc6\\x9e\\xea\\x82\\x60\\xfc\\x0a\\x2b\\x1c\\xe7\\x84\\x14\\\n\\xb0\\x0a\\x81\\x41\\xe8\\x5a\\xbe\\x8b\\xeb\\x0a\\x5c\\x7f\\xa0\\x63\\x35\\xa6\\\n\\x4e\\x32\\x2d\\x47\\x5c\\x83\\x40\\xb7\\x66\\x92\\x07\\x03\\xc7\\x1d\\x08\\x2e\\\n\\x95\\x1e\\xcb\\x08\\xc3\\xb1\\xfb\\xb8\\xd9\\xa7\\xa6\\x9a\\x0c\\xd6\\xa5\\x8d\\\n\\x06\\x5b\\x5a\\xc1\\x90\\x80\\xb1\\x67\\x15\\x9e\\xb3\\xaa\\xcd\\x20\\x8e\\x07\\\n\\xad\\x16\\x07\\x99\\x0e\\xc1\\x35\\x48\\x83\\xcd\\x36\\x55\\xde\\x3a\\x70\\x9a\\\n\\x6c\\xf1\\x8c\\x75\\x53\\x14\\x18\\x10\\xbb\\xe0\\xbf\\x53\\x34\\xfc\\x54\\x54\\\n\\xa3\\xd1\\x7e\\xcf\\x76\\x8d\\x56\\x74\\x48\\x93\\xd1\\x4e\\x3a\\x21\\x15\\x70\\\n\\xbd\\xe2\\x0c\\x04\\x2e\\xac\\x69\\x37\\xf4\\xe3\\x39\\xdb\\x6d\\x2e\\x32\\x1d\\\n\\x82\\x6b\\x10\\x18\\xb4\\x3f\\x91\\x82\\x51\\xde\\xdc\\xc1\\x4c\\x6e\\x1f\\x99\\\n\\x56\\xc6\\xbf\\xb8\\xe9\\xa7\\x9e\\x1a\\xad\\xd6\\xf9\\x15\\xcd\\x1d\\xc7\\x25\\\n\\x87\\x20\\x2d\\x66\\xc5\\x2e\\x26\\x59\\xde\\xac\\xd3\\x99\\xbd\\x78\\xbe\\x8e\\\n\\x4e\\x0f\\x75\\x9c\\x13\\x58\\x5f\\xd9\\xac\\x1f\\x92\\xca\\xd6\\xda\\xdd\\x44\\\n\\x9a\\x13\\x40\\xeb\\x68\\x2c\\x65\\xec\\x6b\\xdc\\x7c\\x51\\xb8\\x88\\x84\\x56\\\n\\x15\\xaa\\xeb\\x30\\x97\\xf3\\x9f\\x4e\\x4e\\x19\\x0c\\xae\\x73\\xa1\\x22\\x47\\\n\\x24\\x67\\xc8\\x51\\xea\\x66\\x92\\x01\\xa7\\xcc\\x75\\x3a\\x53\\x1b\\x9e\\xcb\\\n\\xe0\\xf2\\x92\\x69\\x90\\x76\\xab\\xab\\x5c\\x2a\\xb3\\xc9\\xa8\\x3c\\xf8\\xc3\\\n\\xb8\\xb1\\x27\\x6a\\x6a\\xad\\x61\\xa7\\xd5\\xe9\\x2c\\x65\\xf2\\xfb\\x66\\xf0\\\n\\xef\\x3a\\x7e\\xf8\\xe4\\x12\\xde\\x0e\\x69\\xb3\\xba\\xf4\\xe5\\x31\\x8b\\xb0\\\n\\x08\\xf0\\xbb\\x2e\\xc1\\xd5\\x9a\\x08\\x8d\\xc9\\xd6\\x89\\xe7\\x32\\x7b\\xfc\\\n\\xe4\\x71\\x04\\x5a\\x51\\x1f\\xa6\\xc1\\x71\\x03\\xae\\x7e\\x32\\x0d\\xe7\\x18\\\n\\x70\\x3d\\x37\\x7f\\x4a\\x8b\\xc1\\xf0\\x93\\x9a\\x36\\xc3\\x60\\x94\\xcd\\x1c\\\n\\x98\\x9d\\x9d\\x7c\\x2d\\x05\\xa7\\xa7\\x58\\x51\\xb3\\xc7\\x27\\x4e\\x2f\\xa9\\\n\\x8a\\x95\\x37\\xeb\\x14\\xaf\\xee\\x44\\xc0\\xd8\\xd1\\xbb\\x1d\\xce\\x23\\xad\\\n\\x23\\x62\\x81\\xf1\\x83\\xe1\\xd8\\x85\\x69\\x0c\\x4e\\xe5\\x72\\x20\\xed\\x2b\\\n\\xdc\\xf4\\x29\\x60\\xef\\x4b\\xb1\\x53\\xe4\\x58\\xea\\xf5\\xd6\\x62\\x9e\\x3c\\\n\\xff\\x65\\x11\\x82\\x57\\xe2\\xc0\\x2b\\xaf\\x70\\x87\\xc3\\xc3\\xaa\\x5a\\xc7\\\n\\xa6\\xa9\\x72\\x2a\\x5b\\x3a\\x98\\xd9\\x3d\\xfe\\x15\\xae\\x84\\xde\\xe1\\x09\\\n\\x57\\x29\\xdc\\x58\\xc4\\xb1\\x05\\xcb\\xd0\\x98\\x12\\x4c\\x24\\x84\\x80\\x11\\\n\\xa7\\xc6\\xb8\\xe8\\xc4\\x07\\x5e\\xf2\\x2e\\x4a\\x4e\\x75\\x9b\\x81\\x35\\xea\\\n\\xad\\x62\\x77\\xdb\\x61\\x77\\x8f\\x5a\\x84\\xc0\\x5d\\xbc\\xca\\xf9\\x2b\\xbd\\\n\\xdf\\xff\\x2d\\x9b\\x10\\x0c\\x52\\x15\\xc7\\x2e\\x03\\xd7\\x0c\\x70\\xd5\\x46\\\n\\x55\\x14\\x6f\\x0e\\x26\\xe8\\x4e\\x48\\x4c\\x2e\\x9f\\xe2\\x6d\\x13\\x98\\x66\\\n\\x8f\\xdd\\x9a\\x57\\x3a\\xb7\\x10\\x18\\xc6\\x5b\\x26\\x1a\\x8d\\xf7\\x1c\\xb0\\\n\\x63\\xa7\\xdc\\x2e\\x0c\\x0c\\x74\\x79\\xd0\\x12\\x9d\\xe3\\x74\\x8b\\x81\\x23\\\n\\x76\\x9f\\xef\\x5a\\x5e\\xf5\\xfc\\x14\\x0c\\xb6\\x1b\\xe3\\x0d\\x8f\\x06\\xbb\\\n\\x29\\x0c\\x82\\xbc\\xf2\\xe4\\xaa\\x39\\x01\\xd8\\xb2\\xd0\\xe9\\xd4\\x31\\xa4\\\n\\x12\\x5a\\x64\\xe2\\x71\\xca\\xff\\x4c\\xab\\xdd\\x5e\\x00\\xad\\x37\\x32\\xf9\\\n\\xa8\\x06\\xdb\\xda\\xac\\x4e\\xc5\\xb5\\x8a\\x04\\x74\\xcd\\xbb\\x70\\xa1\\xca\\\n\\xab\\x9f\\x5f\\xc2\\xc5\\x14\\x65\\x34\\x05\\xae\\x92\\x5b\\xcc\\x0e\\xf1\\x2a\\\n\\x94\\x1c\\x81\\x4e\\xa0\\xd2\\x8e\\x07\\x3a\\xac\\x75\\x9c\\x3c\\x18\\xf4\\x44\\\n\\x37\\x1d\\xc1\\x06\\x6b\\x43\\x87\\xe3\\x72\\x08\\xc6\\x30\\x96\\x0f\\x33\\x28\\\n\\xe8\\x06\\x05\\x32\\xad\\x12\\xd0\\x3d\\xef\\x88\\x9d\\x2a\\x4f\\xba\\x04\\x41\\\n\\x38\\x0b\\x2a\\xb8\\x9b\\x32\\x58\\x09\\x74\\x1c\\x8e\\x03\\xe8\\x10\\xbc\\x2d\\\n\\x6e\\x4c\\x61\\x90\\xb7\\x40\\x37\\x62\\x18\\xc7\\x81\\xd8\\xcf\\x27\\x5a\\x00\\\n\\x1a\\x9d\\xde\\x07\\x61\\x0c\\x3b\\x5a\\xa7\\x35\\xc3\\xa0\\x9f\\x7a\\x20\\xe4\\\n\\x40\\x50\\x5e\\xe6\\xae\\xc8\\x0f\\xc1\\xb8\\xb1\\x9c\\x32\\x34\\x29\\xa0\\x8f\\\n\\x6f\\x80\\xc1\\x12\\x83\\x22\\x3e\\x6c\\x4a\\x72\\x3c\\x11\\x27\\x03\\xe3\\xa4\\\n\\x55\\x5e\\x2c\\x62\\x30\\x83\\xf6\\x46\\x83\\xf5\\xd3\\x74\\x03\\x21\\x63\\xc4\\\n\\xe6\\xf3\\x2d\\xe0\\xee\\x98\\x5c\\x41\\xd7\\xb1\\x10\\x06\\xe5\\x51\\xc2\\xc8\\\n\\x94\\x68\\x83\\xab\\x1a\\x07\\xfc\\x64\\x57\\xf2\\x38\\xad\\xa5\\x7e\\x47\\xb0\\\n\\x4b\\xa4\\x7e\\x97\\x30\\x79\\x02\\x87\\xa9\\xdf\\xd3\\xc4\\x3c\\xe9\\x5d\\x17\\\n\\x2e\\x00\\x21\\x18\\x06\\xc2\\xb8\\x09\\x81\\xd3\\xe3\\x0a\\x98\\x0a\\x63\\x77\\\n\\x44\\x1d\\xcf\\x77\\xc0\\x17\\x7f\\xe6\\xae\\x99\\x1c\\xd9\\x84\\xae\\xfb\\x29\\\n\\xc3\\xd2\\x01\\x07\\x56\\x4d\\x06\\x6e\\x42\\x4e\\x0a\\xb8\\x07\\xa0\\xbb\\xfb\\\n\\x6c\\xee\\x9e\\xdc\\x4a\\xb7\\x6b\\xd7\\x37\\x61\\x2e\\xbe\\x93\\x34\\x2c\\x4d\\\n\\x70\\x0c\\x48\\x66\\xda\\x99\\x8f\\xc8\\x57\\xfd\\x39\\x15\\xf4\\xd3\\x4f\\x52\\\n\\x06\\x65\\x0a\\x58\\x09\\x93\\xbf\\x53\\x74\\xba\\xec\\x6c\\x67\\xfd\\xab\\xac\\\n\\xf7\\xe3\\x5f\\xb3\\xfe\\x4d\\x8b\\xd8\\x40\\xf1\\x8f\\xd9\\xc0\\x87\\x37\\xb1\\\n\\xde\\xd2\\xbb\\xd9\\x67\\x95\\x4f\\x30\\x9f\\xfe\\x23\\x32\\x5f\\x36\\x80\\xb5\\\n\\x58\\x08\\x17\\xc8\\xdc\\x4d\\xb9\\x91\\xdf\\xef\\xff\\x3a\\x04\\x64\\x0f\\x65\\\n\\x50\\xae\\xf0\\x1a\\xcb\\x58\\x4f\\xd9\\x43\\x2c\\xb4\\xee\\x07\\x2c\\xf4\\xde\\\n\\x05\\x6c\\xdf\\xbb\\x53\\x15\\x09\\x2d\\x9f\\x06\\x41\\xba\\x99\\x05\\xdb\\xd6\\\n\\x91\\xe7\\xcb\\x30\\x4f\\x73\\x57\\xe5\\x46\\x56\\x4f\\xd7\\x6d\\x10\\x90\\x2f\\\n\\x08\\x43\\xb2\\x86\\xd4\\x0a\\x06\\x4a\\x6e\\x61\\x83\\xef\\xcf\\x20\\x9d\\x9e\\\n\\x2c\\x83\\x6b\\xe7\\xb0\\xee\\xa6\\x37\\xc9\\x72\\x32\\x84\\x99\\xbb\\x2a\\x77\\\n\\x82\\x79\\xf7\\x54\\x08\\xca\\x32\\xe8\\x33\\xb3\\x31\\x85\\x14\\xc1\\x56\\xb0\\\n\\xb7\\xec\\xe1\\xa4\\x5b\\x41\\xaa\\x84\\xd6\\x5f\\xc5\\x3c\\xe6\\x1d\\x64\\xd9\\\n\\xe9\\x32\\x69\\x3b\\xee\\x4d\\x9e\\xff\\x9d\\x07\\x0b\\xc3\\x0d\\x30\\xe5\\x0b\\\n\\x53\\x86\\xa5\\x4a\\xb0\\x6d\\xd5\\x84\\x5b\\xc1\\x81\\xf7\\x2f\\x64\\x87\\xd7\\\n\\x4c\\x67\\x47\\xd6\\x4e\\x67\\x87\\x57\\x5f\\xc4\\x0e\\xae\\x9a\\xc6\\x06\\x97\\\n\\x2b\\x07\\x32\\x04\\xc7\\xb1\\xe5\\x51\\xb6\\x4c\\x14\\x71\\x5d\\xe6\\xf1\\xdf\\\n\\xce\\x5d\\x34\\x39\\x32\\x7b\\xfc\\x3f\\x02\\x63\\xcc\\xb1\\xc6\\xa5\\x0a\\x0e\\\n\\xc8\\x94\\xe3\\x28\\xd0\\xd9\\x87\\xd7\\x5c\\xc4\\x8e\\xae\\x9f\\xc1\\xc2\\x1f\\\n\\xce\\x62\\x6c\\x53\\x01\\xc9\\xf1\\xe2\\x99\\x6c\\x68\\xdd\\xf4\\x71\\x5b\\xd9\\\n\\x40\\xf1\\x0d\\xa4\\x2d\\xa9\\x13\\xd8\\x89\\xb3\\x2c\\xb3\\xab\\x6b\\x1a\\x77\\\n\\xcb\\xe4\\x0a\\x9f\\x2b\\xe0\\x7d\\x1d\\x30\\x6e\\xc2\\x7b\\xaf\\xf6\\xad\\xbf\\\n\\x9a\\x74\\x9a\\x04\\xb6\\x02\\x74\\xee\\x08\\x38\\x99\\x72\\xbe\\x12\\xa3\\x10\\\n\\xb4\\xfd\\x2b\\x2e\\x8c\\x3b\\xe7\\x40\\xd1\\x42\\xd2\\x96\\x24\\xc1\\xa7\\x8d\\\n\\xa5\\x16\\x6f\\x60\\xb1\\xb4\\x91\\x2f\\xef\\x24\\xb6\\x96\\x71\\x9e\\x8b\\x24\\\n\\x22\\x54\\x78\\x45\\x9c\\xc3\\x10\\xec\\x86\\xd0\\xa1\\x94\\xa3\\x53\\xe1\\xf8\\\n\\xc6\\x99\\x2c\\x14\\x7b\\x7e\\xb8\\x08\\x28\\x5b\\x94\\x80\\xe9\\xad\\x0f\\xba\\\n\\xa6\\xa5\\xf2\\xe7\\xf0\\x79\\x2d\\xf1\\x0e\\xb0\\x27\\x58\\x4c\\x55\\x46\\x89\\\n\\x50\\xe1\\xe5\\xd1\\xce\\x02\\xb0\\x4b\\xa2\\x9c\\x3b\\x51\\xb0\\x9b\\x93\\x9f\\\n\\x3f\\x54\\x38\\x9f\\xb4\\x85\\x02\\x82\\xd0\\x0b\\x54\\xc2\\x84\\x66\\x35\\xfc\\\n\\xd9\\x0a\\xdd\\x54\\x0f\\xf4\\x0a\\x27\\x9e\\x90\\xe2\\x36\\x59\\x21\\xe8\\x81\\\n\\xdf\\xb7\\x5a\\xbd\\xfe\\xdf\\xe5\\xc5\\xf3\\x92\\x06\\xbd\\x75\\x6e\\x9d\\xce\\\n\\xac\\xd3\\xda\\xdd\\x83\\xf2\\xca\\x24\\xc3\\xe0\\xea\\x82\\x28\\x67\\xa1\\xf3\\\n\\x28\\xa7\\xa6\\xc3\\xb1\\x0d\\x97\\x44\\x95\\x11\\x5a\\x3d\\x9b\\xb4\\x25\\x13\\\n\\x40\\x4b\\x8a\\x7a\\x1d\\x22\\xa7\\xc2\\x3e\\x14\\x02\\xb1\\xad\\x5c\\xa3\\x0d\\\n\\x2b\\x6d\\x60\\x53\\x62\\x70\\x79\\x74\\x1f\\x8f\\x03\\x32\\xe5\\xd4\\xb4\\x28\\\n\\x29\\x88\\x1a\\xe0\\x43\\x2b\\xa6\\x91\\xb6\\x64\\x02\\x68\\x3d\\x2e\\xee\\x9e\\\n\\xdc\\x0a\\x9f\\xbe\\x55\\xb7\\xf1\\xdd\\x84\\xd6\\x89\\x05\\xc3\\xe1\\x34\\x46\\\n\\x05\\x03\\x07\\x60\\xd2\\xa1\\x19\\xe0\\x10\\x4c\\x89\\xe5\\x65\\x39\\x9c\\x09\\\n\\xde\\x33\\x99\\x20\\x10\\x90\\x43\\xdc\\x45\\xb9\\x53\\xa3\\xd1\\xf2\\x68\\x85\\\n\\xa6\\x63\\x14\\x83\\x91\\x70\\x97\\x87\\x02\\xc1\\xb6\\xb5\\x51\\x4e\\x1a\\x2e\\\n\\xbc\\x98\\x74\\x66\\x26\\x38\\x56\\x14\\xdd\\x6d\\x05\\xb5\\x85\\xa4\\x4d\\x99\\\n\\x80\\xbb\\x29\\x37\\x6a\\x34\\x58\\x9e\\xd8\\xde\\x34\\xb6\\x8f\\x09\\x9f\\x4b\\\n\\x53\\x06\\x25\\xcb\\x9e\\xea\\x67\\x23\\x0e\\xc2\\x2e\\x25\\x0c\\x5d\\x0b\\xe5\\\n\\xcc\\x4c\\xb1\\x1f\\xa6\\xd0\\x52\\x79\\x7b\\xaa\\xff\\x42\\xda\\x94\\x36\\x42\\\n\\xe0\\x38\\x77\\x55\\xf6\\xd5\\x60\\xb2\\x3d\\x27\\x6d\\xeb\\xc1\\x67\\xe3\\x30\\\n\\xeb\\xa0\\x8d\\x4a\\x92\\xbe\\xcd\\x77\\x46\\x1c\\x84\\x6b\\x0d\\xca\\x89\\x99\\\n\\x44\\x3e\\xb8\\x63\\xd9\\x94\\x4d\\xe9\\x02\\x3e\\x19\\xe4\\xee\\xca\\xae\\xe4\\\n\\xbb\\xda\\x91\\x89\\xec\\xd8\\x88\\x25\\xb4\\x76\\x9e\\xe8\\x1c\\x5c\\x81\\x67\\\n\\xbb\\x75\\x48\\x1c\\x5c\\x39\\x36\\x96\\x60\\xd9\\x94\\x4d\\xe9\\x02\\xb3\\x2c\\\n\\x27\\x77\\x59\\xf6\\xa4\\x71\\x38\\x66\\x57\\xc8\\x76\\xb5\\x37\\xa7\\x31\\x6e\\\n\\x48\\xd8\\x3d\\x42\\x64\\xe6\\x73\\xf4\\x83\\xcc\\xae\\x3b\\x94\\xc0\\x15\\xbf\\\n\\x18\\x10\\x28\\xdb\\xe6\\x99\\xf8\\xd6\\x56\\x05\\x4a\\xb9\\xdb\\xb2\\xa3\\x52\\\n\\x97\\xeb\\x0c\\xe8\\x9e\\x0e\\x48\\xc1\\xc0\\x2d\\xa2\\x30\\x93\\xa0\\x0c\\x51\\\n\\xc4\\xee\\x76\\xb3\\x60\\xc3\\x32\\xb6\\xbb\\xf4\\x3e\\xb6\\x67\\xf3\\x2f\\xd8\\\n\\xee\\xb2\\xdf\\x8b\\x8e\\xc1\\x2b\\x96\\x72\\x5c\\x36\\xc1\\xbb\\x00\\x58\\xf6\\\n\\xae\\xb2\\x3f\\x8c\\xd9\\x02\\x36\\xa1\\x6d\\x68\\x23\\x65\\x3b\\x62\\x70\\x0a\\\n\\xfd\\x30\\x81\\xd1\\x41\\xcf\\xf0\\xa8\\xd5\\xd7\\x75\\xeb\\x78\\x58\\x5c\\x81\\\n\\x99\\xdc\\x75\\xd9\\x51\\x9d\\xd6\\xdc\\x2e\\x05\\x03\\x49\\xb4\\xe5\\x86\\xc2\\\n\\x6d\\xae\\x65\\xbd\\x6b\\xae\\x14\\x9d\\x20\\xd1\\xff\\xc1\\x42\\xf1\\x2a\\x1d\\\n\\xdd\\x98\\x85\\x75\\x47\\x02\\xc2\\x25\\xb3\\xc4\\x6e\\xb2\\x7f\\xfd\\x75\\x51\\\n\\x36\\xf5\\xae\\xbd\\x8a\\xb9\\x2c\\x0d\\x64\\x1d\\x10\\xec\\xa6\\x2b\\x5b\\xf4\\\n\\xe1\\xea\\x36\\x63\\x0f\\xcc\\x34\\xdf\\xd4\\xeb\\xf5\\xb9\\x7d\\x52\\x88\\x33\\\n\\x2a\\xf9\\x6e\\x43\\xdc\\xfb\\x4a\\x19\\xaa\\x84\\xc3\\x69\\x65\\x7d\\x6b\\x16\\\n\\x44\\x55\\x5c\\x64\\xed\\x65\\x09\\xa7\\xb9\\x3b\\xdf\\x99\\xc9\\x3e\\x7e\\x7c\\\n\\x1a\\xd3\\xfc\\x75\\x3a\\x1b\\xd9\\x48\\xa7\\x91\\x83\\x69\\x30\\x2d\\xe6\\xd9\\\n\\xf5\\xce\\x25\\x64\\x1a\\x09\\xbc\\x3d\\xb3\\x6f\\xcd\\xd8\\x18\\x26\\x07\\x6d\\\n\\xed\\x04\\x9b\\xa9\\xba\\x20\\xb8\\xef\\xb7\\x56\\x6b\\x12\\xfd\\x81\\xb3\\xcd\\\n\\x5a\\x9d\\xa9\\x0d\\xbb\\x74\\xee\\xb2\\xec\\x49\\x63\\xb3\\x9d\\x5d\\xd1\\xac\\\n\\x8b\\x7c\\x63\\x04\\x49\\x65\\xa7\\xa1\\x44\\x77\\xe5\\x0b\\x71\\x95\\x1e\\x78\\\n\\x6f\\x1a\\x3b\\xb0\\x4a\\x79\\xdc\\x38\\xb0\\x6e\\x16\\x7b\\xf9\\x8e\\xf3\\xd9\\\n\\x0b\\x8b\\xce\\x13\\xa9\\x78\\x26\\xf1\\x2d\\x15\\x4c\\x23\\xa5\\xc7\\xbc\\x78\\\n\\x0e\\x2a\\x9d\\xc4\\x81\\xd5\\x33\\x44\\x5b\\x62\\xed\\xfb\\xb4\\xea\\x45\\xb2\\\n\\x2e\\x12\\x56\\x21\\x28\\xee\\x94\\x91\\xfc\\x82\\x33\\xcf\\x3a\\x9d\\xa9\\x75\\\n\\x87\\xcb\\xf5\\x1d\\xee\\xbe\\xcc\\xab\\x56\\x67\\xd6\\xc9\\x83\\x81\\xbb\\x0d\\\n\\x29\\xe3\\x12\\xd1\\x53\\x74\\x63\\x5c\\x85\\xfb\\x0a\\xaf\\x61\\x23\\x1b\\x94\\\n\\xbb\\x2a\\xdf\\xb2\\x19\\x11\\xe7\\x22\\x2b\\x1e\\x98\\x4a\\xa6\\x93\\xb3\\xfc\\\n\\x81\\x0b\\xa2\\xf2\\xe0\\x39\\xa8\\x74\\x12\\x78\\x9b\\xa6\\x6f\\xdd\\xb5\\x71\\\n\\xf6\\xa1\\xcd\\x54\\x5d\\x62\\xc1\\xfd\\xc9\\x72\\x1f\\x55\\xb4\\x74\\x8c\\xe0\\\n\\xfb\\x26\\xdc\\x85\\x99\\x13\\xbe\\x51\\x24\\xff\\x24\\x05\\x5e\\x01\\x49\\xbc\\\n\\x3c\\x49\\x42\\x75\\x57\\x7d\\x25\\x3f\\x25\\x1d\\x24\\x67\\xb8\\xa8\\x80\\xbd\\\n\\x76\\xf7\\xd4\\x88\\x73\\x5b\\x5e\\x4c\\xbc\\x4e\\xc1\\xee\\x4a\\x4a\\x8f\\x79\\\n\\x87\\x8b\\x12\\xdf\\xbe\\xef\\xdb\\xb4\\x24\\xde\\x3e\\xb0\\x99\\xaa\\x0b\\x85\\\n\\xb6\\xd3\\x1d\\xf7\\xca\\x05\\x8e\\xbb\\x38\\x19\\xe2\\xee\\x4c\\x5f\\xb1\\xad\\\n\\x63\\x22\\x63\\x87\\x44\\x4f\\xd1\\xcd\\x71\\x15\\x3e\\xb8\\xf5\\x76\\xd2\\x39\\\n\\xb1\\x60\\x97\\xa3\\x7d\\xf9\\x62\\x26\\xfc\\x27\\xf9\\x69\\x31\\xa6\\xc5\\x3c\\\n\\x89\\xba\\x2b\\x09\\xb4\\x25\\xd6\\xbe\\x9e\\xa2\\x5b\\xc8\\xba\\x8c\\x07\\x15\\\n\\x14\\x18\\xf8\\x7b\\x35\\x1a\\xd7\\x99\\xdc\\xa5\\xe9\\x09\\x5b\\x88\\x7c\\x30\\\n\\xc7\\x2d\\x9f\\x94\\x21\\xc9\\x10\\xac\\x7d\\x3d\\xaa\\xb2\\xfd\\x2b\\x2f\\x63\\\n\\xe1\\xcd\\x73\\x48\\xe7\\x4c\\x06\\x68\\x0b\\xda\\x24\\xb7\\x31\\x58\\xf7\\x3a\\\n\\x59\\x17\\x25\\xf0\\x8d\\x5f\\xb9\\xcf\\x90\\x1a\\xad\\xf1\\xb3\\x8c\\xb5\\x14\\\n\\xa9\\x95\\x24\\xfa\\x60\\x58\\x22\\x70\\x01\\xb8\\xb7\\xf0\\xc4\\xf4\\xb2\\xb7\\\n\\x64\\x09\\xe9\\x98\\xc9\\x64\\x6f\\xc9\\x1d\\x11\\xfb\\xf6\\x16\\x5e\\x2f\\xda\\\n\\x4c\\xd5\\x25\\x11\\x2d\\xa6\\xce\\xa8\\x80\\x20\\xf5\\x7a\\x4b\\x15\\x77\\x69\\\n\\x7a\\xd2\\x18\\x0c\\xe7\\x96\\x6b\\x74\\xa3\\xcd\\xca\\x9f\\xb2\\x48\\x8a\\x4e\\\n\\x87\\x91\\x7d\\xbe\\x61\\xac\\x6b\\x08\\x7d\\x94\\x7f\\x01\\x09\\x6d\\xbd\\x4b\\\n\\xb4\\xed\\xf3\\xe2\\x45\\xcc\\xe1\\x98\\x78\\xf7\\x8c\\x48\\xaf\\x5a\\x20\\xf8\\\n\\x02\\x6a\\x93\\xc1\\xbe\\x88\\xbb\\x34\\x7d\\x35\\x76\\x58\\xd6\\x4e\\x74\\x30\\\n\\xa7\\xf0\\x6a\\x4b\\xd8\\xc8\\x96\\xf9\\xa4\\x53\\x26\\x93\\x91\\x2d\\x57\\x30\\\n\\x41\\xb7\\x89\\xb4\\x39\\x55\\x70\\x4b\\x2c\\xbe\\x5e\\x87\\x01\\x81\\xf5\\x8a\\\n\\x8e\\xbb\\x32\\x33\\xc2\\x27\\x82\\x50\\x48\\xda\\x5b\\x7d\\x24\\x02\\xe6\\x4f\\\n\\x48\\x87\\x28\\x11\\xde\\x3c\\x97\\x0d\\x6d\\x5b\\x44\\x1e\\xa3\\x18\\xda\\xb6\\\n\\x78\\x42\\x63\\x14\\xda\\x46\\xd9\\x3c\\x11\\xf0\\x6e\\x06\\x7e\\xc1\\xae\\xbd\\\n\\x5d\\x38\\x8b\\xbb\\x32\\x73\\xc2\\x8f\\x8f\\x51\\x85\\x2a\\x11\\xb5\\x09\\x40\\\n\\x46\\x6f\\xe3\\x0b\\xa4\\x33\\xc6\\x63\\x7f\\xf5\\x23\\xcc\\xed\\xd4\\xb1\\x4e\\\n\\xc1\\xc5\\x8e\\x6c\\xbf\\x83\\x4c\\x23\\xe7\\x48\\xf9\\x9d\\xac\\xd3\\xe3\\x16\\\n\\xf3\\xec\\xaf\\x79\\x98\\x4c\\x33\\x1e\\x68\\x1b\\x65\\x33\\x3e\\x01\\xa4\\x7e\\\n\\x57\\x44\\x08\\xf6\\x35\\x5b\\x9c\\x73\\xb8\\x0b\\x33\\x2f\\x28\\xa4\\x34\\xae\\\n\\xd0\\xf1\\x10\\x02\\x9d\\x56\\x21\\xf0\\x6f\\xea\\xd8\\x70\\xd9\\x2d\\xa4\\x33\\\n\\x62\\xc1\\x2b\\x7c\\x77\\xdb\\x7f\\xa3\\xf2\\x3a\\xdc\\x36\\x76\\xb0\\xea\\x37\\\n\\x64\\x7a\\xe4\\x40\\xd5\\xbd\\x62\\x1a\\x79\\x9e\\xdd\\xed\\x6f\\x25\\xdd\\x5a\\\n\\x86\\xcb\\x6e\\x8d\\xca\\x2b\\x01\\xab\\xf2\\xa7\\x70\\xe3\\x02\\x75\\x8c\\x02\\\n\\x02\\x88\\x5b\\x6d\\x23\\x5f\\x89\\xc8\\x8a\\xf0\\xa3\\x60\\xe2\\x76\\x17\\xc2\\\n\\x80\\x18\\x3e\\xd2\\x74\\x77\\x7f\\x03\\xae\\x10\\x77\\xec\\x31\\xa7\\xcb\\x44\\\n\\x3a\\x82\\x62\\x97\\xf6\\xdd\\xa8\\xbc\\x72\\xba\\x8c\\x9b\\xd9\\xbe\\xda\\x3f\\\n\\xb1\\xc3\\xe5\\x3f\\x13\\xd9\\x57\\xfb\\x38\\xfc\\xb6\\x85\\x4c\\x8b\\xec\\x69\\\n\\x7d\\x83\\x2c\\x23\\x9e\\x4b\\xc1\\xc6\\xf8\\x27\\xa0\\x10\\x10\\x9b\\xe8\\x83\\\n\\xb1\\xaf\\x66\\xc7\\x1d\\x8f\\x26\\x70\\x04\\xfc\\xa4\\xf8\\x1d\\xe2\\x8c\\x09\\\n\\x0a\\x7c\\x2d\\xde\\x00\\x39\\x81\\xb7\\xc5\\x57\\xde\\xfc\\xfe\\xb9\\xd4\\xf1\\\n\\x6e\\x7d\\x11\\xe1\\x84\\x78\\x06\\xea\\x9f\\x8c\\xcb\\x9b\\x2e\\xa1\\x1d\\x8f\\\n\\x91\\x65\\xc5\\xf2\\xa9\\xbe\\x98\\xcc\\x8f\\x1f\\xf0\\x44\\x1f\\xc0\\xd5\\xff\\\n\\x0a\\x75\\x5c\\x44\\x08\\xf6\\xe3\\x86\\x41\\xd1\\x59\\xb9\\x90\\xcb\\xe5\\x3a\\\n\\x13\\x37\\x89\\x91\\xc6\\x78\\x83\\xef\\x60\\x30\\x30\\x1d\\x18\\xf6\\x18\\x71\\\n\\x9c\\xf5\\x35\\x3e\\x4f\\x3a\\x41\\xce\\xf1\\xd2\\x05\\x71\\xdd\\x4e\\x26\\x70\\\n\\xba\\x6c\\xe2\\xb9\\xa9\\x32\\xe5\\xf4\\x36\\xfe\\x8d\\xcc\\x0f\\x81\\xf8\\xa3\\\n\\xe8\\x04\\x10\\x74\\x5f\\x2b\\x89\\xe3\\x96\\xac\\x3f\\x07\\xa1\\x04\\xce\\x7e\\\n\\x24\\xd6\\x18\\xf8\\x6d\\x8d\\x14\\x0c\\x14\\x34\\xd9\\x15\\x71\\x69\\x00\\x1c\\\n\\xa0\\x29\\x27\\xc8\\xe9\\x69\\xfe\\x47\\x5c\\xbe\\x4c\\xd1\\xa3\\x79\\x85\\x2c\\\n\\x53\\xce\\x60\\xcd\\xa3\\x64\\x5e\\xe8\\xb6\\x22\\x1f\\x9f\\x81\\x0b\\xf3\\x0c\\\n\\xa8\\xe3\\xd8\\x17\\xb9\\xc7\\xde\\x46\\x7e\\x03\\x7f\\xe3\\x87\\x73\\xab\\xb1\\\n\\x69\\x70\\xc0\\x74\\xc2\\xd0\\x00\\xcc\\x63\\xa3\\x37\\x1c\\xc3\\x6f\\x6d\\xd2\\\n\\x71\\x39\\x38\\x03\\xa2\\x9c\\x70\\x82\\x4b\\xc5\\xd9\\x11\\x95\\x37\\x13\\xb8\\\n\\x1d\\x5a\\xb1\\x0c\\xba\\xec\\x31\\x0e\\x6f\\xbf\\x8b\\xcc\\x0b\\x17\\x9d\\x87\\\n\\x57\\x4f\\x94\\xc3\\xe7\\x9b\\x01\\xf5\\x34\\x40\\x60\\x6e\\xe2\\x3f\\x4d\\x9e\\\n\\xc4\\x6f\\xf0\\xe2\\x87\\x23\\xbd\\x01\\x07\\x76\\x63\\xfc\\xe7\\x88\\xb0\\x2f\\\n\\xa5\\x2a\\x75\\xa8\\xe2\\xe7\\xa4\\x13\\x24\\x86\\xb6\\x2d\\x89\\xcb\\x93\\x69\\\n\\x86\\xb6\\x2f\\x26\\xcb\\x96\\x40\\x1b\\xa9\\x7c\\x38\\x58\\xf3\\xea\\xe5\\xa7\\\n\\x20\\x18\\xeb\\xc6\\xeb\\x33\\xa1\\x02\\xe4\\xab\\x09\\xfd\\x0d\\xcf\\x92\\x4e\\\n\\x90\\x18\\xa8\\x7f\\x22\\x2e\\x4f\\xa6\\x19\\xa8\\x7b\\x9c\\x2c\\x5b\\xa2\\xbf\\\n\\x7e\\x29\\x99\\x0f\\xc1\\xcd\\xe4\\xbc\\x8a\\xf9\\x27\\xf9\\x98\\x21\\xd7\\xd8\\\n\\xc0\\x4f\\x57\\xc8\\x67\\xad\\x21\\x9d\\x20\\x31\\xba\\x65\\x1e\\x0c\\xbc\\x3f\\\n\\x8c\\x62\\xa8\\x78\\x3e\\x1b\\x58\\x35\\x87\\xf5\\xbf\\x3f\\x3b\\x25\\x06\\x56\\\n\\xce\\x61\\x43\\x1b\\xe6\\xc7\\x9d\\x0f\\xcb\\xa0\\xca\\x96\\xf0\\x59\\xc7\\x79\\\n\\xdd\\x6d\\x6c\\x9c\\xcc\\xcf\\x77\\x41\\x94\\x64\\xee\\xea\\xfa\\x36\\x59\\x21\\\n\\xce\\xfe\\x9a\\x87\\x48\\x47\\x28\\x81\\x1b\\x12\\xf0\\xf9\\x37\\xee\\x8a\\x17\\\n\\x77\\x1e\\xbe\\x77\\xe2\\x36\\x79\\x04\\xf8\\x0d\\x8f\\x45\\xde\\xae\\x82\\x3c\\\n\\xd4\\xb9\\x94\\xc0\\x49\\x47\\x9c\\xcd\\xf8\\x1d\\xfa\\x93\\xf9\\x9b\\xbe\\xf8\\\n\\xed\\x0f\\xb8\\x9a\\x70\\xda\\xdb\\xcc\\x67\\x20\\x51\\x15\\x74\\xb8\\x3b\\x93\\\n\\x5e\\xad\\x2b\\x81\\xaf\\xb3\\xe1\\x6e\\x15\\x44\\xe9\\xd5\\xb6\\x64\\x19\\x2e\\\n\\xbb\\x4d\\xb4\\x4d\\x66\\xeb\\x31\\xe8\\x96\\x57\\xe1\\xe7\\x69\\x79\\xd5\\x4e\\\n\\x7e\\x39\\x1c\\x5d\\xdf\\xb7\\x7a\\x82\\xf7\\x42\\x60\\xde\\x82\\x0a\\xea\\xc4\\\n\\x55\\x2c\\x54\\xd6\\xe5\\x34\\x24\\x31\\xe3\\xca\\x1d\\x68\\x0b\\xda\\x04\\x6b\\\n\\x89\\x83\\xd0\\x22\\xea\\xf1\\x23\\x67\\x27\\xcd\\x5b\\x52\\xe9\\x0a\\xdf\\x2e\\\n\\xc2\\xff\\x59\\xc7\\xe9\\xd4\\x5e\\x37\\x5c\\x76\\xeb\\x27\\xe1\\x92\\x82\\xe3\\\n\\x94\\x93\\x72\\x01\\x96\\x0d\\x2d\\xe3\\x63\\x87\\xa3\\xfd\\x2a\\x7c\\xe5\\x3b\\\n\\xef\\x3e\\x4a\\x36\\x19\\x0a\\x6f\\x99\\x39\\x37\\xbc\\x69\\x56\\x59\\x78\\x53\\\n\\xc1\\x28\\xe5\\xb4\\x6c\\x80\\x65\\x01\\x5b\\xa1\\xdc\\xec\\xdd\\x8d\\x3d\\xd9\\\n\\xc5\\x4a\\x67\\x4c\\x03\\x27\\xbd\\x04\\x83\\xb1\\x97\\x72\\x62\\x26\\xc0\\x73\\\n\\x63\\x19\\x58\\x16\\x2f\\x56\\x55\\x32\\x12\\x83\\xb3\\x79\\xd6\\x6f\\xe1\\x0a\\\n\\x5e\\x07\\x0e\\xd4\\x83\\x23\\xf7\\x51\\x0e\\x56\\x02\\xf3\\x88\\x79\\xf1\\x1c\\\n\\x70\\x2e\\x35\\x08\\x19\\x16\\xfb\\xb0\\xe0\\x1c\\x70\\xf0\\x3f\\x29\\xe7\\xcb\\\n\\x81\\x40\\xbc\\x8a\\x69\\x79\\x36\\x55\\xd9\\x56\\x78\\xf3\\xa5\\xf7\\x43\\x60\\\n\\xf6\\x12\\x81\\xe8\\xc1\\x63\\x3c\\x99\\xaa\\x5c\\x8a\\xad\\xba\\xf2\\x74\\x98\\\n\\x21\\x2d\\x06\\x9e\\xe6\\x2c\\xc6\\xdf\\xf8\\x61\\x55\\xaa\\x54\\xa9\\x52\\xa5\\\n\\x4a\\x95\\x2a\\x55\\xaa\\x54\\xa9\\x52\\xa5\\x4a\\x95\\x2a\\x55\\xaa\\x54\\x65\\\n\\x4d\\x53\\xa6\\xfc\\x1f\\xa3\\xa8\\x8d\\xdb\\x32\\x0d\\x7a\\x6b\\x00\\x00\\x00\\\n\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x0b\\x97\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x64\\x00\\x00\\x00\\x64\\x08\\x06\\x00\\x00\\x00\\x70\\xe2\\x95\\x54\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0e\\xc3\\x00\\x00\\x0e\\xc3\\x01\\xc7\\x6f\\\n\\xa8\\x64\\x00\\x00\\x0b\\x2c\\x49\\x44\\x41\\x54\\x78\\x5e\\xed\\x9d\\x6b\\x70\\\n\\x13\\xd7\\x15\\xc7\\xa1\\x4d\\x3b\\x4d\\xfa\\xa0\\xb4\\x4d\\xa7\\x69\\xd3\\xc9\\\n\\x87\\x4c\\xdb\\x69\\x33\\x2d\\xed\\xa4\\x8f\\xb4\\x4d\\x71\\x40\\x92\\xe3\\xc4\\\n\\x0e\\xc1\\x29\\x8e\\xb5\\x12\\xb6\\xb1\\x76\\x25\\x03\\x36\\x0e\\xc6\\xd8\\x92\\\n\\x78\\x58\\xc1\\xbc\\x8d\\x6d\\x49\\xd4\\xa1\\xb6\\x24\\x9b\\x09\\x90\\x69\\x31\\\n\\x61\\x9a\\x49\\x81\\x00\\x26\\xf0\\xa1\\x93\\xe9\\x74\\xda\\x30\\xc9\\xa4\\x4d\\\n\\x3a\\x40\\x08\\x29\\x79\\xf3\\x48\\x9a\\x94\\x34\\x40\\xc3\\xed\\x39\\xe6\\x2e\\\n\\xc8\\xab\\xb3\\xab\\xd5\\x5a\\x5a\\x4b\\x66\\xff\\x33\\xbf\\x01\\xa4\\xdd\\xbb\\\n\\xf7\\x9c\\xff\\xde\\xbb\\xf7\\xee\\xde\\x15\\x13\\x2c\\x59\\xb2\\x64\\xc9\\x92\\\n\\x25\\x4b\\x96\\x2c\\x59\\xb2\\x64\\xc9\\x92\\x25\\x4b\\x96\\x32\\x53\\xb1\\xcb\\\n\\x33\\xcd\\x2e\\x88\\x7d\\x5a\\x94\\xb8\\xdd\\x5f\\xe0\\x9b\\x5b\\xca\\xb5\\x1c\\\n\\x82\\xb4\\xd3\\xe1\\x92\\x98\\x26\\x82\\xd7\\xc9\\x37\\xb7\\x94\\x4b\\xdd\\x31\\\n\\xab\\xe9\\x7a\\x68\\x01\\xe7\\x48\\x13\\x46\\x20\\x6e\\xe7\\xbb\\x58\\xca\\xa5\\\n\\x1c\\x6e\\xa9\\x9c\\x36\\x40\\x89\\xf8\\x41\\x51\\x4d\\xcd\\x67\\xf8\\x6e\\x96\\\n\\x72\\x25\\xe8\\xae\\xb6\\xd0\\x06\\xa4\\x62\\x77\\x7b\\x67\\xf0\\xdd\\x2c\\xe5\\\n\\x42\\xb7\\xfb\\x7c\\x9f\\x02\\x43\\xde\\xa5\\x92\\x4f\\x01\\x5d\\xdb\\x66\\xbe\\\n\\xab\\xa5\\x5c\\xc8\\xe1\\xf6\\x14\\x53\\x89\\x57\\x45\\x90\\x4e\\x17\\x15\\x85\\\n\\xae\\xe3\\xbb\\x5b\\xca\\xb6\\xec\\x2e\\xa9\\x97\\x4c\\xbc\\x06\\x76\\xb7\\xc7\\\n\\xc6\\x77\\xb7\\x24\\xab\\xcc\\xe7\\xbb\\xc1\\x26\\x48\\xd5\\x15\\x15\\x15\\x9f\\\n\\xe6\\x1f\\x65\\xac\\x50\\x28\\xf4\\x09\\x48\\xf0\\x9b\\xca\\x84\\xa7\\x03\\xba\\\n\\xad\\x1e\\x5e\\x84\\x21\\xdd\\xed\\xf6\\xde\\x04\\x03\\x89\\x59\\xfc\\x9f\\x85\\\n\\x2f\\x34\\x03\\xba\\x8e\\x03\\xc3\\x09\\x12\\xc4\\x57\\x21\\x41\\x92\\x91\\x6e\\\n\\xc4\\x2e\\xf8\\xee\\x54\\x26\\x5b\\x17\\x82\\xf8\\x1a\\xec\\x3e\\xf1\\x72\\x29\\\n\\xfa\\x85\\x27\\x8f\\xdd\\x25\\x36\\xe3\\x68\\x0d\\xcb\\xc1\\xbf\\xf3\\xaf\\x0a\\\n\\x57\\x23\\xcc\\x18\\x81\\x78\\xc4\\xe1\\x14\\x67\\xe3\\x59\\xcf\\x37\\x4d\\x2b\\\n\\x48\\x48\\x97\\xb2\\x9c\\x92\\xaa\\x3a\\x76\\xef\\x9c\\xf9\\xac\\xcc\\x53\\xcf\\\n\\xca\\x6a\\x1b\\xd8\\x3d\\xd5\\x73\\xd9\\xdd\\xb3\\x7d\\x23\\xb6\\x41\\xec\\x6e\\\n\\xe9\\x0e\\x5e\\x8c\\x2e\\xe1\\xd0\\xda\\x2e\\x48\\x47\\x53\\xca\\x29\\x64\\x53\\\n\\xd4\\xcd\\xb8\\x0a\\x04\\xf8\\x77\\xde\\x1d\\xa4\\x3d\\x83\\xcb\\x3c\\x0d\\x27\\\n\\x85\\x85\\x4b\\x98\\x77\\xd9\\x5a\\xd6\\xb8\\x3a\\xc2\\x5a\\xba\\x7a\\x59\\x20\\\n\\x92\\x20\\x69\\xee\\xd8\\xc4\\xea\\xdb\\xbb\\x59\\x6d\\x70\\x25\\xab\\xa8\\x6f\\\n\\x61\\xa5\\x73\\xea\\xa3\\xbc\\x18\\x4d\\xd9\\x9c\\x9e\\x1f\\x41\\x9d\\x0f\\x51\\\n\\x75\\x95\\x29\\x48\\x53\\xf4\\x98\\xa1\\xe0\\x70\\xb1\\x4b\\x2a\\xe3\\xbb\\x5f\\\n\\xd1\\xd2\\x9e\\xc4\\x2d\\x81\\x48\\x7c\\x79\\x6b\\x77\\xec\\x5f\\x54\\xe2\\x75\\\n\\x13\\x8e\\x33\\x7f\\x24\\x3e\\x14\\xe8\\x4e\\xb8\\x43\\x3d\\x3d\\x9f\\xe3\\xc5\\\n\\x5f\\x11\\x5e\\x27\\xa0\\x45\\xf4\\x43\\x77\\xfa\\x31\\x51\\xb7\\x54\\x04\\x69\\\n\\x11\\xdf\\x35\\xff\\x65\\xc0\\x8c\\xab\\x08\\xe2\\x9f\\x6d\\x2e\\xaf\\x7d\\x49\\\n\\x38\\xf6\\x43\\x48\\xe4\\xa0\\x3f\\x92\\xf8\\x38\\x25\\xb9\\xa3\\xe7\\x0c\\x10\\\n\\x6a\\xea\\x8a\\x7f\\x09\\x67\\xf2\\x60\\xc2\\x52\\xf9\\x3a\\x91\\x11\\x85\\x62\\\n\\x8a\\xdd\\xe5\\x59\\x4c\\x06\\xa0\\x83\\x7b\\x6b\\xe6\\xb1\\xba\\xe5\\xeb\\x87\\\n\\xcf\\x68\\x45\\x12\\xb3\\x4e\\x6b\\x38\\x7e\\xae\\xaa\\xb9\\xed\\x54\\xb1\\x9b\\\n\\xae\\x8b\\x0e\\x2e\\x4d\\x73\\x79\\x6e\\xe1\\x61\\xe7\\xaf\\x4a\\x66\\xd5\\xde\\\n\\x08\\xcd\\xff\\x7d\\x22\\x00\\x4d\\x84\\x85\\x4b\\x35\\xaf\\x0b\\xb9\\xa2\\x71\\\n\\xcd\\x46\\x76\\xbf\\xd4\\x48\\xd6\\x49\\x13\\x41\\xda\\xc2\\x43\\xce\\x7f\\x41\\\n\\x85\\x57\\xa5\\x04\\xa0\\x42\\x49\\xd5\\x5c\\x56\\xd7\\x06\\xad\\x82\\x48\\x96\\\n\\x59\\xc0\\x35\\x0a\\x4e\\x88\\x25\\x64\\xfd\\x28\\xa0\\x9b\\x3b\\x37\\xbd\\xba\\\n\\xee\\x1b\\x3c\\xdc\\xfc\\x17\\xf4\\xcd\\x5f\\x84\\x4a\\x9f\\xa5\\x82\\x49\\xa6\\\n\\xb4\\x66\\x3e\\x7b\\x68\\xed\\x46\\x32\\x49\\x63\\x81\\x18\\x5c\\xcd\\x1c\\x6e\\\n\\x2f\\x59\\xd7\\x64\\x20\\xb6\\x36\\x1e\\x6a\\xe1\\xe8\\xf2\\xc5\\x92\\x0e\\x08\\\n\\xb9\\x4f\\x6c\\x60\\x4d\\xeb\\x1f\\x21\\x13\\x33\\x96\\xd4\\x85\\x3a\\x58\\xb1\\\n\\x3b\\x75\\x2e\\x73\\x05\\x98\\xdc\\xe2\\xc0\\x85\\x87\\x59\\x38\\x9a\\xe1\\xf1\\\n\\x7c\\xde\\xee\\x92\\xde\\xa1\\x82\\xc2\\xc9\\x1c\\xce\\x15\\xa8\\x84\\xe4\\x03\\\n\\xbe\\xe5\\xeb\\x54\\x5b\\x8a\\xcd\\x25\\xba\\x78\\x88\\x85\\x27\\x6a\\xc4\\x55\\\n\\x52\\x5d\\x97\\x57\\xdd\\x94\\x1a\\xb5\\x81\\x95\\x23\\xea\\x3d\\x0c\\x0c\\xcb\\\n\\x21\\xac\\x8c\\x6f\\xc3\\xe4\\x8d\\xf8\\xe3\\xd6\\x37\\xae\\x04\\x04\\x67\\xdd\\\n\\x5c\\xe8\\x12\\xa8\\x04\\xe4\\x23\\x0f\\x36\\xf8\\x93\\x0d\\xb9\\xe4\\x70\\x7a\\\n\\x7f\\xc6\\x43\\x2b\\x5c\\x41\\x20\\xf5\\x72\\x50\\xee\\xa6\\x65\\x64\\xe0\\xf9\\\n\\x0a\\x0e\\xc3\\xf1\\x1e\\x19\\xd6\\x1d\\xba\\xdf\\xad\\x3c\\xa4\\xc2\\x16\\xde\\\n\\x35\\x85\\x31\\xfb\\x89\\x52\\xb8\\x6e\\xb4\\x76\\xf7\\x91\\x81\\x67\\x0a\\xcc\\\n\\xe0\\x2f\\xfa\\xc3\\xf1\\x83\\x30\\x81\\x8c\\x04\\x23\\xf1\\xd6\\x40\\x34\\x51\\\n\\x15\\x88\\xc6\\x7d\\xf0\\x5d\\xc8\\x1f\\x89\\xc7\\xe0\\xf3\\x23\\xca\\x7d\\x8c\\\n\\x32\\xbf\\xbd\\x6b\\x78\\x98\\x5b\\xe2\\x96\\x6e\\xe6\\x21\\x15\\xbe\\x20\\x20\\\n\\x29\\x1b\\x5d\\x95\\x3f\\x9c\\x78\\xde\\x1f\\xee\\xaf\\xc6\\xdb\\x1e\\xbc\\x68\\\n\\x55\\x05\\xa3\\xfd\\xdf\\x03\\xd3\\x1e\\x06\\x83\\xde\\xa5\\xca\\xca\\x84\\xaa\\\n\\x96\\x15\\x3b\\x78\\xb1\\xe3\\x43\\xfe\\x0d\\x89\\xa9\\x54\\xa0\\xba\\x09\\x27\\\n\\x4e\\xa2\\x11\\x99\\xdc\\xae\\x97\\xb5\\xa8\\xb3\\xef\\x2b\\x60\\x4a\\x17\\xb6\\\n\\x2a\\xb2\\x6c\\x1d\\xb4\\x46\\x12\\xaf\\xc0\\xb1\\xc7\\xcf\\xa3\\xe0\\x40\\x24\\\n\\xbe\\x8b\\x0a\\x54\\x17\\xe1\\xf8\\x9f\\xe0\\x6c\\xbf\\x91\\x17\\x65\\x58\\xfe\\\n\\xee\\xd8\\x74\\x28\\x0f\\x6f\\x2c\\xd2\\xc7\\x49\\x03\\x9e\\x10\\xbc\\xa8\\xc2\\\n\\x56\\x6b\\x77\\xec\\x36\\x48\\xea\\x25\\x2a\\xc8\\x74\\xc0\\x99\\xbd\\x2d\\x14\\\n\\x1a\\x34\\xfc\\xd8\\x57\\xa9\\xc5\\xd1\\xde\\x5b\\xa1\\xb5\\x1d\\xa3\\x8e\\x95\\\n\\x0e\\xe8\\xfe\\x5e\\xe0\\xc5\\x14\\xb6\\xa0\\x75\\x74\\x50\\x01\\xea\\xe0\\x50\\\n\\x36\\xcd\\x90\\xd5\\xda\\x35\\xf0\\x7d\\x28\\xfb\\x3d\\xc5\\xb1\\xf4\\x11\\x8d\\\n\\xdf\\xce\\x8b\\x29\\x4c\\x55\\x0c\\x0e\\x7e\\x12\\xba\\x8a\\xb7\\xc8\\xe0\\x34\\\n\\x89\\xbf\\x92\\x8d\\x6e\\x4a\\x4d\\xd0\\x4a\\x66\\x18\\x6a\\xb5\\x30\\xaa\\xe3\\\n\\x45\\x14\\x96\\xa6\\x3b\\xc5\\x1f\\xe0\\x0d\\xb8\\x72\\x5f\\x93\\xa1\\xe1\\x67\\\n\\xb0\\x3b\\x96\\xf3\\x55\\x1e\\x70\\x91\\xdf\\x49\\x1d\\x5b\\x8b\\x96\\x0d\\xbd\\\n\\x67\\x6c\\x6e\\xef\\x4f\\x8c\\x0c\\x2e\\xcc\\xd6\\x44\\x5c\\x48\\x60\\x17\\xa4\\\n\\xf5\\xc9\\x8b\\x03\\xaa\\x9a\\xdb\\xc8\\xc0\\xd2\\xf0\\x97\\x09\\x8c\\xe5\\xfc\\\n\\xf6\\x44\\xa0\\x33\\xf6\\x6d\\x23\\x23\\x2f\\x9c\\x4f\\xc1\\x24\\xf1\\x0c\\xc4\\\n\\xf9\\x7b\\x1c\\xce\\x17\\x57\\xce\\xf9\\x26\\x2f\\x72\\x6c\\x85\\x4b\\x79\\x70\\\n\\x11\\x1a\\x54\\xaa\\x07\\x92\\xff\\xba\\x6c\\x42\\x32\\xf3\\x1e\\xde\\x40\\x06\\\n\\xa5\\x45\\x30\\x1c\\x7f\\x80\\x1f\\x22\\xe7\\x82\\x2e\\xe8\\x77\\x54\\x1d\\xb4\\\n\\xa8\\x6c\\x0c\\xa4\\xc4\\x69\\x77\\x89\\x2f\\x39\\x5c\\xe2\\x46\\x9b\\xd3\\x53\\\n\\x5a\\x54\\x31\\x3f\\xe5\\x99\\x7d\\x4e\\xc5\\xd7\\x47\\x0d\\xc0\\xec\\xfb\\xb4\\\n\\xb2\\x62\\x4a\\x9a\\xd6\\x65\\x7a\\x7b\\x3d\\xfe\\x61\\x53\\xd7\\xf6\\xeb\\xf9\\\n\\xa1\\x72\\xae\\xd6\\x68\\xff\\x83\\x74\\x3d\\xd4\\x99\\xe3\\x5f\\x41\\xc6\\x2a\\\n\\x03\\xad\\xe7\\x3c\\xe4\\xe6\\x10\\x18\\x14\\x34\\xe5\\x21\\x16\\x1c\\xec\\x31\\\n\\xaa\\x22\\x4a\\xf0\\x99\\x02\\x9c\\x81\\x64\\x50\\x6a\\xc0\\x30\\xf7\\x0f\\xfc\\\n\\x30\\xa6\\xc8\\xbf\\xae\\x6f\\x12\\x5c\\xe0\\x3f\\xa2\\xea\\xa2\\x46\\x5d\\x5b\\\n\\x07\\x19\\x2f\\x85\\x29\\xb7\\xea\\xf5\\x1a\\x52\\x56\\x5b\\x4f\\x06\\xa4\\x05\\\n\\x8c\\xf5\\x4d\\x7f\\x12\\x07\\x27\\xc1\\xb3\\x54\\x5d\\xd4\\x58\\xb0\\x3a\\x4a\\\n\\xc6\\x4b\\x91\\x57\\x86\\xcc\\x10\\x1b\\xc9\\x80\\xb4\\x08\\x46\\xfa\\x45\\x7e\\\n\\x18\\xd3\\x04\\xc7\\x1d\\x54\\xd6\\x43\\x8b\\x85\\x6b\\x7b\\xc8\\x78\\x29\\xf2\\\n\\xca\\x90\\xf2\\xba\\x26\\x32\\x20\\x2d\\x5a\\xbb\\x13\\xa5\\xfc\\x30\\xa3\\x52\\\n\\x51\\xd1\\xa1\\xeb\\xee\\x2c\\xdd\\x35\\x59\\x0f\\x0b\\xd7\\x0d\\x3c\\xba\\x78\\\n\\xc3\\x00\\xd3\\x4b\\xe3\\xda\\x5e\\x66\\x17\\xe6\\xe9\\x62\\x9a\\xb3\\xc9\\x4b\\\n\\x1d\\xf3\\xa7\\x25\\x7b\\xb2\\xf7\\x42\\xaa\\x6e\\x43\\x7c\\x99\\x1b\\xe2\\x8f\\\n\\xc6\\xee\\xe7\\x87\\x31\\xac\\xa2\\xf2\\xdd\\xb5\\x53\\xcb\\x77\\xfd\\x07\\xfe\\\n\\x64\\xf9\\xcc\\xd4\\x99\\xbb\\x9f\\xfb\\x55\\xf9\\x53\\x37\\xf1\\x6a\\x1b\\x57\\\n\\x2e\\xbb\\x2c\\x60\\x2e\\x3f\\x8c\\x21\\x61\\xcb\\x80\\x60\\xcf\\x29\\x83\\xcf\\\n\\x57\\xc0\\x94\\x30\\xaf\\xba\\x71\\xe9\\x35\\x04\\x17\\x32\\x10\\x09\\xd7\\xc4\\\n\\x1f\\x4e\\xb4\\xf3\\xc3\\x18\\x92\\xbd\\x62\\x68\\x12\\x15\\x78\\xde\\x32\\x73\\\n\\xd7\\x63\\xbc\\xea\\xc6\\xa5\\xd7\\x10\\x7c\\x7e\\xee\\x0f\\xc7\\xc8\\xc4\\xab\\\n\\x81\\x4f\\x01\\xf9\\x61\\x0c\\xe9\\x9a\\x34\\x04\\xd7\\xb3\\x82\\x29\\x2d\\x30\\\n\\x3b\\x7d\\x06\\x66\\xe9\\x9a\\xab\\xc5\\x33\\x5d\\x5d\\x82\\xb7\\x32\\xf4\\x3c\\\n\\x0d\\x54\\xd3\\x35\\x69\\x48\\xb2\\xec\\x4e\\xcf\\xd7\\x6d\\x82\\x38\\xcf\\x21\\\n\\x88\\x43\\x30\\x33\\xbd\\xa8\\x34\\x64\\x78\\xe1\\x34\\x91\\x78\\x2d\\x46\\x33\\\n\\xf4\\xbd\\xe6\\x0d\\x49\\x56\\xa9\\x6b\\xde\\x64\\x87\\x5b\\xac\\x01\\x73\\x9e\\\n\\x00\\x73\\x3e\\x44\\x43\\x5c\\x0b\\x97\\x92\\x49\\xd7\\x24\\x9c\\x38\\x66\\xf4\\\n\\x39\\x88\\x65\\x88\\x8a\\x1c\\xb3\\x67\\x7f\\x16\\x4c\\xa9\\x80\\xa1\\xef\\x1f\\\n\\xc9\\xa4\\xa7\\x23\\x1c\\x6f\\xe4\\x45\\x65\\x24\\xcb\\x10\\x1d\\x82\\x0b\\xf5\\\n\\x4b\\x64\\xd2\\xb5\\x79\\xaf\\x25\\x9c\\xf8\\x0e\\x2f\\x42\\xb7\\xfa\\x86\\xce\\\n\\x4e\\x8a\\x3e\\x71\\xf2\\xd9\\x74\\x84\\x1f\\x3f\\x76\\xb2\\x6b\\xfb\\x8b\\x2c\\\n\\x53\\xc2\\x3b\\x8e\\xbe\\x41\\x95\\x67\\x94\\x4d\\x4f\\xbe\\x66\\xfe\\x03\\x2f\\\n\\x38\\xdb\\x83\\x44\\xc2\\xd3\\x02\\x17\\xf8\\xa3\\x78\\xf3\\x8f\\x17\\xa3\\x4b\\\n\\x43\\x2f\\xb3\\x49\\x43\\xc7\\x2f\\xb2\\x42\\x61\\xff\\xf1\\x0b\\xe6\\xb7\\x90\\\n\\xd6\\x68\\xec\\x66\\xb8\\x2e\\x5c\\xa0\\x92\\x9e\\x96\\x70\\xe2\\x99\\xe6\\x0d\\\n\\x9b\\xbe\\xca\\x8b\\x4a\\x2b\\xcb\\x10\\x9d\\x82\\x09\\xdf\\x00\\x99\\x70\\x1d\\\n\\x40\\x97\\x77\\xc2\\xbf\\xb1\\x7f\\x0a\\x2f\\x4a\\x53\\x96\\x21\\x3a\\xd5\\xd4\\\n\\xde\\x35\\x25\\xd3\\x67\\x23\\xc9\\x80\\x29\\xff\\x85\\xd6\\xd2\\x99\\x6e\\x8e\\\n\\x92\\x0b\\x43\\x06\\x0e\\x9e\\x62\\x3b\\x0f\\x7f\\x40\\x7e\\x37\\x5a\\xc6\\xcc\\\n\\x10\\xbb\\x20\\x2d\\xf1\\x04\\x56\\x91\\xc9\\xce\\x84\\xcb\\xcb\\x42\\xe3\\x1d\\\n\\xc1\\xee\\xf8\\x2f\\xa9\\x85\\x06\\xd9\\x36\\x64\\xe0\\xe9\\x53\\xac\\xd8\\xb9\\\n\\x8f\\xcd\\x94\\x0e\\xe6\\xc4\\x94\\x31\\x31\\xc4\\x5e\\xe1\\x9b\\x04\\x33\\xfa\\\n\\xb3\\xf8\\xab\\x0b\\x59\\x7e\\x49\\xe7\\x6d\\xe8\\x0a\\x77\\xc3\\xc5\\x3f\\x0a\\\n\\x26\\xad\\x43\\xda\\x7e\\xbb\\x6d\\x2b\\x15\\xb8\\x11\\x64\\x33\\xe4\\x21\\x6a\\\n\\x2e\\x4c\\x19\\x1b\\x43\\x5c\\x52\\xbb\\x3c\\x73\\x9f\\x35\\x7f\\x71\\xc6\\x8f\\\n\\x75\\x33\\x61\\xd9\\x23\\x5b\\xc8\\xc0\\x93\\x19\\xfc\\xeb\\xfb\\x2c\\xb6\\xef\\\n\\x2d\\xf2\\x3b\\x19\\xa5\\x19\\x32\\x8b\\xbb\\x5e\\x20\\xb7\\x37\\x8a\\xe9\\x86\\\n\\xd8\\xaa\\xaa\\xbe\\x0c\\xdd\\xd5\\xbf\\x65\\x43\\x90\\x39\\xfe\\x76\\x32\\x99\\\n\\xd9\\x20\\x9d\\x21\\x68\\xc6\\x7d\\xb5\\x4f\\x33\\x5b\\xc5\\x53\\xac\\x77\\xcf\\\n\\x9b\\xe4\\x36\\x6a\\x66\\xf8\\xda\\xfe\\xc6\\xf6\\x1e\\x3d\\x4f\\xee\\x63\\x14\\\n\\xd3\\x0d\\xb1\\xbb\\xc4\\x8e\\x64\\x33\\x10\\x5c\\xfc\\x50\\xbf\\xa2\\x8b\\x4c\\\n\\xe8\\x68\\xd1\\x32\\x44\\x36\\x43\\x4e\\x30\\x65\\x8a\\x99\\x66\\x20\\xa6\\x1a\\\n\\x52\\x54\\x51\\xf3\\x35\\xb8\\x76\\x90\\xbf\\x1e\\x8a\\xbf\\xd8\\xb3\\x60\\x55\\\n\\x84\\x4c\\xea\\x68\\xd0\\x32\\xc4\\x1f\\xfd\\x47\\x4a\\xa2\\x93\\x4d\\x41\\x33\\\n\\x1c\\x95\\x7b\\x53\\xb6\\xc9\\x95\\x19\\x88\\xa9\\x86\\xe0\\xc2\\x31\\xca\\x0c\\\n\\x99\\x92\\xea\\xb9\\xac\\x61\\x55\\x98\\x4c\\xac\\x51\\xb4\\x0c\\xd9\\x7f\\xec\\\n\\x02\\x6b\\x5c\\xf3\\x5c\\x4a\\xc2\\xd1\\x94\\x15\\x89\\x23\\xa6\\x9b\\x81\\x98\\\n\\x66\\x08\\x2e\\xaf\\x84\\xee\\xea\\x23\\xca\\x88\\x64\\xb0\\xa5\\x18\\x59\\xdd\\\n\\xa8\\x46\\xba\\x6b\\x88\\x9a\\x29\\x14\\xb9\\x36\\x03\\x31\\xcd\\x10\\xe8\\xaa\\\n\\xfa\\x28\\x03\\xd4\\xa8\\x6e\\x09\\x65\\x65\\xf4\\x95\\xce\\x10\\x44\\x8f\\x29\\\n\\x66\\x98\\x81\\x98\\x62\\xc8\\xb4\\x4a\\xef\\xad\\x0e\\x41\\xbc\\x40\\x25\\x5e\\\n\\x8b\\xf2\\xba\\x45\\xc3\\x6b\\x9e\\xa8\\x44\\xeb\\x45\\x8f\\x21\\x88\\x96\\x29\\\n\\x66\\x99\\x81\\x98\\x62\\x08\\x5c\\x3b\\x1a\\xa9\\x84\\xeb\\x01\\x47\\x60\\x55\\\n\\xcd\\x6d\\xff\\x6b\\xe9\\xee\\x3b\\x4f\\x25\\x3c\\x1d\\x7a\\x0d\\x41\\x28\\x53\\\n\\xcc\\x34\\x03\\x31\\xab\\xcb\\x9a\\x08\\x2d\\x24\\x46\\x25\\x5c\\x1b\\xf1\\x22\\\n\\x74\\x75\\x09\\x7c\\x66\\x1f\\xd8\\xb4\\x69\\x32\\x2e\\x2b\\x85\\x24\\x9f\\x52\\\n\\x26\\x5d\\x8b\\x4c\\x0c\\x41\\x92\\x4d\\xa9\\x33\\xd9\\x0c\\xc4\\xb4\\x6b\\x08\\\n\\x48\\xb7\\x29\\xb8\\x50\\x02\\x5f\\xca\\xb7\\x0b\\x75\\xdf\\xe2\\xfb\\x5e\\x11\\\n\\x3e\\xca\\xc5\\xc5\\x73\\xcd\\x9d\\xbd\\xfb\\xf4\\xbc\\xe3\\x9e\\xa9\\x21\\x08\\\n\\x9a\\xb2\\x76\\xeb\\x71\\xd3\\xcd\\x40\\xcc\\x34\\x04\\x95\\xce\\x94\\x4b\\xd0\\\n\\x2a\\x1e\\xbf\\xdb\\x29\\xdd\\xc6\\xb7\\xd7\\x94\\xc3\\xe5\\x7d\\x1e\\x57\\x43\\\n\\xe2\\x4b\\x40\\xde\\x65\\x6b\\x86\\x87\\xcc\\xf8\\x6b\\x42\\x2d\\x9d\\x60\\x14\\\n\\x0c\\x08\\xf0\\x37\\xaf\\x02\\x91\\x7e\\x32\\xf0\\xd1\\x10\\xde\\xf1\\x2a\\x7b\\\n\\xf4\\xd0\\x69\\xf2\\xbb\\xd1\\x62\\xb6\\x21\\x28\\x35\\x53\\x76\\x15\\xbb\\xa4\\\n\\x8c\\x5e\\xa0\\x84\\x56\\x14\\x22\\xca\\x19\\x41\\x99\\x67\\x01\\x19\\xb8\\x51\\\n\\x3a\\xb7\\x9f\\x60\\x77\\xfd\\x7a\\x0f\\x2b\\x16\\xf6\\xe5\\xc4\\x94\\xb1\\x30\\\n\\x04\\x75\\xd5\\x14\\x41\\x3a\\x50\\x5c\\xe9\\xfd\\x05\\xff\\x3c\\x23\\x15\\xcf\\\n\\xae\\x9d\\xa2\\x34\\x40\\x49\\x36\\x0d\\x91\\xcd\\x90\\x2f\\xf8\\xb9\\x30\\x65\\\n\\xac\\x0c\\x41\\x4d\\xb4\\x3b\\x3d\\x3f\\xe6\\x7f\\x37\\xac\\xe4\\xf7\\x17\\x29\\\n\\xf4\\x18\\xd2\\x7f\\xe0\\x1d\\xb6\\x76\\xdb\\x71\\xf2\\x3b\\x19\\xa5\\x19\\x32\\\n\\x6d\\xbd\\xff\\x24\\xb7\\x37\\xca\\x58\\x1a\\x92\\x15\\x51\\x37\\x2b\\x93\\x49\\\n\\x67\\x08\\x9a\\x61\\x77\\xee\\x65\\x77\\x3d\\xb0\\x9b\\xad\\xd9\\xf2\\x32\\xb9\\\n\\x8d\\x9a\\x19\\xc1\\xdf\\xbc\\x48\\x6e\\x3f\\x1a\\x0a\\xde\\x10\\x9b\\xe0\\xf9\\\n\\x39\\x65\\x84\\x8c\\x96\\x21\\xb2\\x19\\x72\\x82\\x29\\x53\\xcc\\x34\\x03\\x29\\\n\\x78\\x43\\xf0\\xb1\\x2d\\x24\\x9e\\x7c\\xe3\\x17\\xd1\\x32\\x64\\xe5\\xe6\\x63\\\n\\x29\\x89\\x4e\\x36\\xc5\\x6c\\x33\\x90\\x82\\x37\\x04\\x05\\xf3\\x16\\x7c\\x0d\\\n\\x3b\\x63\\x43\\x10\\xbc\\xab\\xab\\x4c\\x38\\x9a\\xd2\\xb0\\xf2\\xb0\\xe9\\x66\\\n\\x20\\xe3\\xc3\\x10\\xb7\\xc7\\x46\\x99\\x81\\xe8\\xb9\\xa8\\x53\\xa6\\x50\\xe4\\\n\\xda\\x0c\\x64\\x5c\\x18\\x82\\xff\\x0f\\x15\\xfe\\x92\\x82\\x51\\x43\\x90\\x74\\\n\\xa6\\x98\\x61\\x06\\x32\\x2e\\x0c\\x41\\x41\\xb7\\xb5\\x79\\x34\\x86\\x20\\x6a\\\n\\xa6\\x98\\x65\\x06\\x32\\x7e\\x0c\\xa9\\x14\\xbf\\x0b\\x33\\x7d\\x9f\\x92\\x59\\\n\\xf5\\xc1\\x87\\xa8\\xc0\\xd5\\x50\\x9a\\x62\\xa6\\x19\\xc8\\xb8\\x31\\x44\\x4d\\\n\\x46\\x16\\xca\\xc9\\xa6\\x98\\x6d\\x06\\x62\\x19\\xa2\\x42\\x62\\xff\\xdb\\xe4\\\n\\xe7\\xb9\\xc6\\x32\\x24\\xcf\\xb0\\x0c\\xc9\\x33\\x2c\\x43\\xf2\\x8c\\x71\\x6f\\\n\\xc8\\x93\\xaf\\xb3\\x1b\\x86\\x8e\\x5f\\x18\\x2c\\x20\\x0c\\xbd\\x4b\\x69\\xc9\\\n\\x92\\x25\\x4b\\x96\\x2c\\x59\\xb2\\x64\\xc9\\x92\\x25\\x4b\\xb9\\xd3\\x84\\x09\\\n\\xff\\x07\\x7f\\xaf\\x44\\xf0\\x15\\x35\\x3e\\x76\\x00\\x00\\x00\\x00\\x49\\x45\\\n\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x0b\\x1b\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x64\\x00\\x00\\x00\\x64\\x08\\x06\\x00\\x00\\x00\\x70\\xe2\\x95\\x54\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x20\\x63\\x48\\x52\\x4d\\x00\\x00\\x7a\\x26\\x00\\x00\\x80\\x84\\x00\\x00\\xfa\\\n\\x00\\x00\\x00\\x80\\xe8\\x00\\x00\\x75\\x30\\x00\\x00\\xea\\x60\\x00\\x00\\x3a\\\n\\x98\\x00\\x00\\x17\\x70\\x9c\\xba\\x51\\x3c\\x00\\x00\\x00\\x09\\x70\\x48\\x59\\\n\\x73\\x00\\x00\\x0e\\xc4\\x00\\x00\\x0e\\xc4\\x01\\x95\\x2b\\x0e\\x1b\\x00\\x00\\\n\\x01\\x59\\x69\\x54\\x58\\x74\\x58\\x4d\\x4c\\x3a\\x63\\x6f\\x6d\\x2e\\x61\\x64\\\n\\x6f\\x62\\x65\\x2e\\x78\\x6d\\x70\\x00\\x00\\x00\\x00\\x00\\x3c\\x78\\x3a\\x78\\\n\\x6d\\x70\\x6d\\x65\\x74\\x61\\x20\\x78\\x6d\\x6c\\x6e\\x73\\x3a\\x78\\x3d\\x22\\\n\\x61\\x64\\x6f\\x62\\x65\\x3a\\x6e\\x73\\x3a\\x6d\\x65\\x74\\x61\\x2f\\x22\\x20\\\n\\x78\\x3a\\x78\\x6d\\x70\\x74\\x6b\\x3d\\x22\\x58\\x4d\\x50\\x20\\x43\\x6f\\x72\\\n\\x65\\x20\\x35\\x2e\\x34\\x2e\\x30\\x22\\x3e\\x0a\\x20\\x20\\x20\\x3c\\x72\\x64\\\n\\x66\\x3a\\x52\\x44\\x46\\x20\\x78\\x6d\\x6c\\x6e\\x73\\x3a\\x72\\x64\\x66\\x3d\\\n\\x22\\x68\\x74\\x74\\x70\\x3a\\x2f\\x2f\\x77\\x77\\x77\\x2e\\x77\\x33\\x2e\\x6f\\\n\\x72\\x67\\x2f\\x31\\x39\\x39\\x39\\x2f\\x30\\x32\\x2f\\x32\\x32\\x2d\\x72\\x64\\\n\\x66\\x2d\\x73\\x79\\x6e\\x74\\x61\\x78\\x2d\\x6e\\x73\\x23\\x22\\x3e\\x0a\\x20\\\n\\x20\\x20\\x20\\x20\\x20\\x3c\\x72\\x64\\x66\\x3a\\x44\\x65\\x73\\x63\\x72\\x69\\\n\\x70\\x74\\x69\\x6f\\x6e\\x20\\x72\\x64\\x66\\x3a\\x61\\x62\\x6f\\x75\\x74\\x3d\\\n\\x22\\x22\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x78\\\n\\x6d\\x6c\\x6e\\x73\\x3a\\x74\\x69\\x66\\x66\\x3d\\x22\\x68\\x74\\x74\\x70\\x3a\\\n\\x2f\\x2f\\x6e\\x73\\x2e\\x61\\x64\\x6f\\x62\\x65\\x2e\\x63\\x6f\\x6d\\x2f\\x74\\\n\\x69\\x66\\x66\\x2f\\x31\\x2e\\x30\\x2f\\x22\\x3e\\x0a\\x20\\x20\\x20\\x20\\x20\\\n\\x20\\x20\\x20\\x20\\x3c\\x74\\x69\\x66\\x66\\x3a\\x4f\\x72\\x69\\x65\\x6e\\x74\\\n\\x61\\x74\\x69\\x6f\\x6e\\x3e\\x31\\x3c\\x2f\\x74\\x69\\x66\\x66\\x3a\\x4f\\x72\\\n\\x69\\x65\\x6e\\x74\\x61\\x74\\x69\\x6f\\x6e\\x3e\\x0a\\x20\\x20\\x20\\x20\\x20\\\n\\x20\\x3c\\x2f\\x72\\x64\\x66\\x3a\\x44\\x65\\x73\\x63\\x72\\x69\\x70\\x74\\x69\\\n\\x6f\\x6e\\x3e\\x0a\\x20\\x20\\x20\\x3c\\x2f\\x72\\x64\\x66\\x3a\\x52\\x44\\x46\\\n\\x3e\\x0a\\x3c\\x2f\\x78\\x3a\\x78\\x6d\\x70\\x6d\\x65\\x74\\x61\\x3e\\x0a\\x4c\\\n\\xc2\\x27\\x59\\x00\\x00\\x09\\x2f\\x49\\x44\\x41\\x54\\x78\\x01\\xed\\x5d\\x6d\\\n\\x6c\\x14\\x45\\x18\\x7e\\x67\\xaf\\xbd\\x16\\x5b\\x68\\xa4\\x58\\x15\\x10\\xa3\\\n\\x82\\x82\\x8d\\x46\\x0a\\x68\\x0b\\xf8\\x2d\\x85\\xfa\\x11\\x34\\x41\\x41\\xe3\\\n\\x0f\\x93\\xea\\x1f\\x63\\x88\\x5f\\x48\\xe1\\x8f\\xfd\\x61\\x6c\\x6b\\x90\\x1f\\\n\\xc6\\xaf\\x44\\x31\\xfe\\x31\\xa2\\x25\\x1a\\x3f\\x5b\\x0a\\x1a\\x8d\\xc0\\x1d\\\n\\xf2\\x11\\xa3\\x51\\x1a\\x15\\x22\\x16\\x30\\x02\\x25\\x58\\x5a\\xda\\x5e\\x7b\\\n\\x33\\xbe\\xef\\x96\\xd9\\x5e\\xe9\\xde\\xd1\\xbb\\xbd\\xd9\\x65\\x6f\\x67\\x92\\\n\\x76\\x66\\xdf\\x9d\\x7b\\x67\\xe7\\x79\\xee\\x9d\\x9d\\x79\\xe7\\xf6\\x5d\\x00\\\n\\x9d\\x34\\x02\\x1a\\x81\\xe4\\x08\\x30\\x79\\xaa\\xe6\\xb5\\xaf\\x0b\\x44\\xef\\\n\\xc4\\x5a\\xe0\\xf1\\x5d\\xad\\x6b\\x16\\xec\\x92\\x72\\x9d\\x3b\\x43\\xa0\\xbe\\\n\\x5e\\x18\\x3b\\x0a\\x23\\x95\\x00\\x6c\\x0e\\x82\\x3d\\x8e\\x09\\xd1\\xc1\\xc4\\\n\\xe0\\xd6\\x96\\xb5\\xb7\\x1c\\xb3\\xd3\\x9c\\x27\\x85\\xfc\\xf4\\xc4\\xc7\\x01\\\n\\xc4\\xeb\\xc0\\x58\\x27\\xca\\x26\\x49\\xb9\\xce\\x33\\x47\\x60\\x49\\x43\\xe4\\\n\\xb6\\xed\\x2c\\xf2\\x86\\x01\\xec\\x5a\\xa9\\x45\\x30\\x06\\x9c\\xe5\\xc5\\xaa\\\n\\x1b\\x22\\x6f\\xc7\\xfa\\xfb\\x56\\x7f\\x57\\x7f\\x7b\\x9f\\x3c\\x47\\xb9\\x21\\\n\\x0f\\x04\\xc0\\xf8\\xa1\\x32\\x2b\\x95\\x32\\x9d\\x67\\x8e\\x40\\x75\\xd3\\x8e\\\n\\xfb\\x05\\x88\\xb6\\x44\\x32\\xa4\\x36\\x06\\x2c\\x8c\\xbc\\xac\\x2c\\x28\\x08\\\n\\x6f\\xa1\\x91\\x49\\xca\\x29\\xb7\\x2c\\x44\\x70\\xb8\\x8d\\x59\\xf4\\x24\\x56\\\n\\xd1\\xe5\\x74\\x11\\xa8\\x7e\\xe9\\xc7\\xcb\\x40\\x0c\\x7e\\x80\\xa3\\x4d\\x7e\\\n\\x28\\xc4\\xe0\\xde\\x8a\\x29\\x30\\x7f\\x66\\x19\\x14\\x15\\x86\\xe0\\xaf\\x63\\\n\\x3d\\xf0\\xd1\\xb6\\x83\\xd0\\x71\\xbc\\x07\\x47\\x31\\x63\\x21\\x3f\\x5d\\xf2\\\n\\x32\\xea\\x7f\\x4e\\xb6\\x61\\x51\\xc0\\x0c\\x3e\\xc2\\x74\\x64\\x05\\x9d\\xa7\\\n\\x8f\\x00\\xcb\\xe3\\xcf\\xa2\\x15\\x5c\\x40\\x9f\\xac\\xbd\\x73\\x3a\\xd4\\xcc\\\n\\x99\\x02\\x25\\x45\\xf9\\x90\\x17\\x32\\x60\\xfa\\x25\\xe3\\xa1\\xee\\x81\\x72\\\n\\xb8\\xac\\xb4\\xc8\\x54\\x2c\\x80\\x3d\\x75\\xdf\\xba\\xdd\\xd6\\x2d\\xc2\\x22\\\n\\x04\\xef\\x1f\\xbb\\xd3\\x6f\\x5a\\x7f\\xc2\\x16\\x01\\xc1\\xef\\x21\\xf9\\xcc\\\n\\x29\\x13\\xa0\\xe2\\xca\\x89\\xa3\\xaa\\x90\\xd5\\x3c\\xb4\\x70\\x9a\\x29\\xa7\\\n\\xe1\\x6b\\x60\\x20\\xb6\\x48\\x56\\x4a\\x20\\x24\\x34\\x28\\x85\\x3a\\x77\\x86\\\n\\x00\\x7e\\xeb\\x4d\\xb4\\xa7\\x5d\\x54\\x9c\\x54\\xd1\\x15\\x65\\x23\\xce\\x4d\\\n\\x95\\x15\\x13\\x08\\x91\\x22\\x9d\\x3b\\x45\\x80\\x31\\xd1\\x4d\\x3a\\xfa\\x06\\\n\\xe2\\x49\\x55\\x75\\xf7\\x0d\\x7f\\xff\\x85\\x01\\xbd\\xb2\\xa2\\x26\\x44\\x22\\\n\\x91\\xc5\\x1c\\xd7\\x1b\\x7b\\x48\\xdd\\xde\\x03\\x27\\xa0\\x27\\x01\\xf8\\xc4\\\n\\x26\\xb6\\xed\\x3b\\x6a\\x1d\\x8a\\x38\\xb3\\xd6\\x7d\\x9a\\x10\\x0b\\x96\\xec\\\n\\x15\\xb8\\x60\\xef\\x91\\xb6\\xee\\xde\\x01\\x78\\x77\\xeb\\x9f\\xa3\\x48\\xd9\\\n\\xb3\\xbf\\x13\\x5a\\xf6\\x1e\\x31\\x1b\\x14\\x02\\x7e\\x99\\x1f\\xab\\xb4\\x08\\\n\\xb1\\xa6\\xbd\\xd9\\xbb\\x1c\\xad\\xa9\\xad\\xae\\xf2\\xe3\\xc5\\xaf\\x44\\x1f\\\n\\x03\\x01\\x4b\\xf6\\x1d\\xfa\\x0f\\x5e\\xfc\\xe8\\x67\\x98\\x7d\\xc5\\x85\\x50\\\n\\x18\\xce\\x83\\x83\\x47\\xbb\\xe1\\xf7\\x23\\x5d\\x43\\x64\\x80\\x88\\x19\\xcc\\\n\\x78\\xb2\\xbe\\x9e\\x71\\x89\\x9a\\xb6\\x10\\x89\\x44\\x36\\x73\\xbc\\x89\\x18\\\n\\xbd\\x6c\\x39\\x08\\xd1\\x42\\x6a\\xc9\\x52\\x7e\\xf8\\xed\\x28\\x6c\\xf9\\xe9\\\n\\xc8\\x30\\x19\\x02\\x4e\\xe1\\x42\\x64\\x59\\x6b\\x5d\\xe5\\xb6\\xc4\\xa6\\x35\\\n\\x21\\x89\\x68\\x64\\xb1\\xdc\\x52\\x5f\\xd9\\xb5\\xb9\\xae\\x8a\\xa6\\xbf\\xcb\\\n\\xd1\\x57\\xb2\\x19\\x3d\\x21\\xc7\\x70\\x78\\xea\\xc7\\xe3\\x76\\x00\\xbe\\x9e\\\n\\xf1\\xfc\\x6b\\xda\\xea\\xaa\\xbe\\x38\\xbb\\xc9\\xc0\\x0d\\x59\\x77\\x35\\x6e\\\n\\x9b\\x16\\x82\\xbc\\x67\\x00\\xd7\\x0a\\x34\\x3d\\x45\\xcf\\xd2\\x29\\xc6\\xd8\\\n\\x5e\\x1a\\xf7\\x69\\xa8\\xc1\\xd5\\x35\\x62\\x97\\xa5\\x84\\xba\\x36\\x03\\x7c\\\n\\x8c\\xda\\xe8\\x6f\\x4c\\x29\\x50\\x16\\x52\\xdd\\x14\\x5d\\x16\\x12\\xc6\\x6f\\\n\\xb8\\x08\\x7e\\x1a\\x81\\x9f\\x81\\xfe\\xa4\\x02\\x74\\x5f\\x4c\\x42\\x62\\xaa\\\n\\xb1\\xbc\\x71\\x71\\x63\\xe4\\xab\\x9a\\xfa\\xe8\\x84\\x31\\x21\\xa7\\xa8\\x52\\\n\\x60\\x2c\\xa4\\xe6\\x95\\x1d\\xb7\\xc6\\x39\\x27\\xff\\x52\\x98\\xb0\\x9c\\x39\\\n\\xa5\\x04\\x2e\\x2f\\x2b\\x82\\xde\\x58\\xdc\\x9c\\x9e\\xd2\\x38\\x8f\\xe7\\x6a\\\n\\x78\\x01\\xdf\\x88\\x63\\xff\\x3d\\x59\\xb5\\x94\\x34\\xc8\\x0b\\x04\\x21\\xb4\\\n\\x27\\xb1\\x9d\\x47\\xde\\x44\\xcf\\x6b\\x98\\xdc\\x16\\x8f\\xdf\\x35\\x1d\\x67\\\n\\x3d\\xc3\\x2e\\x8d\\xa5\\xf3\\xa6\\xc2\\x3b\\x38\\x3d\\x6d\\xc7\\x19\\x11\\x91\\\n\\xb2\\xa4\\x31\\xb2\\xac\\x15\\xa0\\x39\\x0d\\x1c\\xb3\\x56\\x35\\x10\\x43\\x16\\\n\\x6d\\x10\\x49\\x37\\xf8\\xdd\\xb3\\x27\\x8f\\x20\\x83\\x90\\x2c\\x2a\\xcc\\x83\\\n\\x27\\x90\\x24\\xca\\x29\\x09\\x61\\xd4\\x9a\\x05\\x0f\\xfe\\x05\\x82\\x10\\xfc\\\n\\xda\\xcf\\x91\\xd8\\x2e\\x9c\\x75\\xb1\\x2c\\x8e\\xc8\\x89\\x0c\\xe9\\x08\\x14\\\n\\x86\\xa8\\x18\\x71\\xd2\\xc5\\x83\\x40\\x10\\x42\\x5b\\xa7\\x12\\x53\\xda\\x93\\\n\\x48\\x96\\x68\\xe1\\x66\\x26\\x01\\x9e\\xdd\\xd8\\x03\\x41\\x08\\x0e\\x42\\x87\\\n\\x24\\x09\\xb4\\x41\\x94\\x2c\\xd1\\x2a\\x9a\\x12\\x03\\x71\\x20\\x59\\x1d\\xd5\\\n\\xf2\\x40\\x10\\x22\\x42\\x62\\x2b\\x6e\\xa7\\xc6\\x08\\x4c\\xda\\xad\\x8b\\xc7\\\n\\x47\\x2f\\x35\\xf6\\xa2\\x7f\\x49\\xba\\x34\\x80\\x0d\\xad\\xb0\\x55\\x83\\x6f\\\n\\xa7\\x3f\\x10\\x84\\xb4\\xad\\x5a\\x70\\x94\\x81\\xf1\\x26\\x01\\x40\\x5b\\xa7\\\n\\x8d\\x9f\\xfe\\x0a\\x7f\\xfc\\xd3\\x05\\x83\\x71\\x0e\\x27\\x7b\\x62\\xf0\\xe5\\\n\\xee\\xc3\\xb0\\xe1\\x9b\\xfd\\x26\\x3e\\xb8\\x9a\\x3e\\x05\\xf1\\x82\\x75\\x76\\\n\\x60\\xb9\\x21\\x0b\\xc4\\xb4\\x97\\x80\\x9c\\x10\\xe6\\x6b\\xbb\\xfa\\xc5\\x5c\\\n\\xda\\xc7\\x26\\x52\\x5e\\xfd\\x6c\\xdf\\x28\\x7c\\xc9\\x8a\\x0c\\x83\\x3d\\xda\\\n\\xba\\x66\\xee\\x3f\\xa3\\x4e\\xba\\x24\\x08\\x84\\x85\\x10\\x96\\xcd\\xcf\\xce\\\n\\xef\\xed\\xef\\xa7\\xad\\x52\\xbe\\x5e\\x0e\\x5f\\x89\\x18\\x93\\x1b\\x1c\\x8f\\\n\\x6f\\x6f\\x5d\\x5d\\xf5\\x79\\xa2\\xdc\\xed\\x72\\x60\\x2c\\x84\\x80\\x3d\\xf3\\\n\\x1b\\xa8\\xe7\\xf0\\x47\\x05\\x0d\\x67\\xf6\\xb1\\xa7\\xd2\\x6e\\x1d\\x6d\\x10\\\n\\xd1\\x9e\\x44\\xa2\\x1b\\xdc\\x6d\\x22\\x64\\x7b\\x81\\x22\\x44\\x76\\xfa\\x8b\\\n\\xe7\\xe7\\x1e\\xc7\\xf2\\x87\\xf2\\x98\\xf2\\xb6\\xc4\\x03\\x0f\\xcb\\x81\\x19\\\n\\xb2\\x3c\\xc4\\x38\\xad\\xa6\\x3d\\xb3\\x10\\x57\\xdd\\xe0\\x69\\x41\\x92\\x5e\\\n\\xe5\\x6c\\xf7\\xc3\\xfa\\xb1\\x75\\x75\\x63\\xb4\\x0e\\x17\\x44\\x0d\\x74\\x39\\\n\\xb8\\xb1\\x62\\xc9\\xd3\\xbb\\xbc\\xb1\\xd5\\x26\\x37\\x38\\xe3\\xfc\\x7d\\x74\\\n\\xe4\\x15\\xd9\\x7e\\x02\\x77\\xda\\x8c\\x7e\\x63\\x05\\x6d\\xf2\\xd8\\x9e\\x3f\\\n\\x4f\\x84\\x2a\\xfa\\xe1\\xba\\x85\\xf8\\xc5\\x0d\\x7e\\x2e\\xce\\x55\\xf5\\xc3\\\n\\x55\\x42\\xfc\\xe4\\x06\\x4f\\x45\\x88\\xca\\x7e\\xb8\\x7a\\x53\\xf7\\x93\\x1b\\\n\\x3c\\x15\\x21\\x2a\\xfb\\xe1\\x2a\\x21\\x7e\\x72\\x83\\xa7\\x22\\x44\\x65\\x3f\\\n\\x5c\\x25\\xc4\\x4f\\x6e\\xf0\\x54\\x84\\xa8\\xec\\x87\\xab\\x84\\xf8\\xc9\\x0d\\\n\\x9e\\x8a\\x10\\x95\\xfd\\x70\\x95\\x10\\x3f\\xb9\\xc1\\x53\\x11\\xa2\\xb2\\x1f\\\n\\xae\\x12\\xe2\\x27\\x37\\x78\\x2a\\x42\\x54\\xf6\\xc3\\xd5\\x69\\x2f\\x75\\xd2\\\n\\x2f\\x6e\\xf0\\x54\\x84\\xa8\\xec\\x87\\xab\\x16\\x42\\x1d\\xf1\\x8b\\x1b\\xfc\\\n\\x5c\\x84\\xa8\\xea\\x87\\xe5\\x22\\x71\\xd3\\x75\\x22\\x3b\\x4b\\xcf\\xd6\\x9d\\\n\\xaf\\x6e\\x70\\x79\\x8d\\x63\\xc9\\xb3\\xd9\\x0f\\x4f\\x09\\x19\\x4b\\x67\\x83\\\n\\x56\\xc7\\xf5\\x21\\x2b\\x68\\x00\\xa7\\xdb\\x5f\\x4d\\x48\\xba\\x88\\x29\\xae\\\n\\xaf\\x09\\x51\\x0c\\x70\\xba\\xea\\x5d\\x9f\\xf6\\xa6\\x7b\\x81\\x2a\\xeb\\xa7\\\n\\x1b\\x18\\x46\\xe5\\xb5\\x48\\xdd\\x81\\x25\\x24\\x93\\xc0\\x30\\x12\\x34\\x95\\\n\\x79\\x20\\x87\\xac\\x4c\\x03\\xc3\\xa8\\x24\\x42\\xea\\x0e\\x9c\\x85\\x38\\x09\\\n\\x0c\\x23\\x41\\x53\\x99\\x07\\xce\\x42\\x9c\\x04\\x86\\x51\\x49\\x84\\xd4\\x1d\\\n\\x38\\x42\\xe8\\x61\\x4f\\xea\\x7c\\x26\\x81\\x61\\x24\\x68\\x2a\\xf3\\xc0\\x11\\\n\\xe2\\x24\\x30\\x8c\\x4a\\x22\\xa4\\xee\\xc0\\x11\\xe2\\x24\\x30\\x8c\\x04\\x4d\\\n\\x65\\x1e\\x3c\\x42\\x1c\\x04\\x86\\x51\\x49\\x84\\xd4\\x1d\\x38\\x42\\x9c\\x04\\\n\\x86\\x91\\xa0\\xa9\\xcc\\x03\\x37\\xed\\x75\\x12\\x18\\x46\\x25\\x11\\x52\\x77\\\n\\xe0\\x2c\\x84\\x02\\x02\\x64\\x1a\\x18\\x46\\x82\\xa6\\x32\\x0f\\x1e\\x21\\x88\\\n\\x66\\xa6\\x81\\x61\\x54\\x12\\x21\\x75\\x67\\x65\\xc8\\x32\\x9d\\x74\\x05\\xd1\\\n\\x07\\x99\\xe0\\xb5\\x60\\xb0\\x0a\\x21\\x58\\x31\\x63\\xfc\\x20\\x3e\\xd7\\xf7\\\n\\x15\\x06\\x76\\x59\\xdf\\xb2\\xba\\xf2\\x90\\x6c\\xf0\\xbc\\xc9\\x33\\x08\\x0c\\\n\\xe3\\xc6\\xb5\\x3b\\xb6\\x10\\x0a\\xd6\\x12\\x2d\\x8c\\xb4\\x50\\xf0\\x16\\x30\\\n\\x0c\\x7c\\x64\\x8c\\x95\\x9a\\x41\\x5d\\xc0\\xb8\\x1a\\x9f\\x75\\x7d\\x86\\x73\\\n\\xde\\xbe\\xb8\\x31\\xba\\xd4\\x8d\\xce\\xe4\\x42\\x1b\\xce\\x08\\x41\\x53\\xe0\\\n\\xe1\\xf8\\x26\\x8a\\xa6\\x43\\x60\\x14\\x8f\\xcb\\x87\\x5b\\xca\\x2f\\x86\\xea\\\n\\x1b\\x26\\xc3\\x35\\x93\\xcf\\x3c\\x7b\\x8f\\x8f\\x1c\\x08\\xe0\\x18\\x61\\x6d\\\n\\xe7\\xcd\\xb9\\x00\\x98\\xea\\x3e\\x38\\x1a\\xb2\\x30\\x48\\xcb\\x0a\\x61\\x5a\\\n\\x05\\xc0\\xac\\xa9\\x25\\x66\\x50\\x17\\x19\\x2f\\x84\\x2e\\x9c\\x62\\x0b\\xbe\\\n\\xf7\\xed\\x7e\\x7c\\x2e\\x1c\\xc2\\x22\\x1e\\x7f\\x0b\\x87\\xb6\\xeb\\xcf\\x87\\\n\\xe7\\xf8\\x54\\x83\\xea\\x44\\xbf\\x33\\x0b\\x61\\xf0\\x18\\x35\\x3e\\x1e\\x2d\\\n\\x83\\x22\\xec\\x24\\x92\\x41\\xf2\\x39\\x57\\x95\\x42\\x0d\\x06\\x7b\\xa1\\x84\\\n\\xf7\\x92\\xf2\\x1d\\xe1\\xe8\\x3c\\xf3\\x40\\xff\\x4b\\x8a\\x80\\x23\\x42\\xf0\\\n\\x1e\\x61\\x06\\x75\\x99\\x8d\\xd1\\x9b\\xcf\\x26\\x43\\xb6\\xb8\\xf0\\xda\\x32\\\n\\x59\\x04\\x16\\x12\\x9a\\x10\\x0b\\x0d\\xfb\\x82\\x33\\x42\\x70\\x36\\x45\\x6a\\\n\\x0b\\xf3\\x93\\x07\\x74\\x29\\x2e\\x18\\x1e\\x15\\x31\\xf6\\xa6\\x15\\x04\\xc6\\\n\\xfe\\x72\\xb4\\xd4\\x11\\x21\\x34\\xb5\\x25\\x08\\xff\\x3e\\x36\\x14\\xb4\\xc5\\\n\\x0e\\xce\\x03\\xff\\x26\\x9c\\x63\\x46\\x87\\x5d\\x1d\\x2d\\x1b\\x46\\xc0\\x19\\\n\\x21\\xb8\\xce\\x20\\x55\\xed\\x87\\xbb\\xcc\\x30\\x79\\xc3\\x6a\\x87\\x4a\\x14\\\n\\xe4\\xa5\\x79\\xfb\\xdf\\xe6\\x01\\x45\\xe4\\x1c\\xe0\\x6c\\xcb\\xd9\\x75\\xf4\\\n\\xf1\\x48\\x04\\x9c\\x11\\x82\\x8b\\x3e\\x0c\\xbf\\x66\\xc6\\x3b\\xda\\x80\\x21\\\n\\xf2\\x28\\x88\\xcb\\xc9\\xd3\\x31\\x33\\xa8\\x0b\\x05\\x77\\x69\\xfc\\xe4\\x57\\\n\\xe8\\xe8\\x34\\x4f\\x63\\x88\\x11\\x78\\xfd\\x9b\\xb5\\x37\\xd1\\xdb\\x7b\\x74\\\n\\x4a\\x81\\xc0\\xf0\\x00\\x9f\\xa2\\x52\\xb2\\x53\\xb4\\x02\\x5f\\xd2\\x14\\x79\\\n\\x44\\x70\\xb1\\x09\\x03\\xeb\\xe4\\x7f\\xb9\\xfb\\x10\\x92\\x32\\x7a\\x51\\x2e\\\n\\x84\\xf8\\xa1\\xa4\\xaf\\x64\\x6d\\x32\\x3d\\x99\\xca\\x7d\\xe9\\x21\\x38\\x47\\\n\\x67\\x1d\\x59\\x08\\xe9\\xa6\\x60\\x2d\\x8c\\x19\\x77\\x70\\x10\\x18\\x7e\\x75\\\n\\x64\\xa2\\x20\\x2f\\xf8\\xec\\xfb\\xba\\x50\\xd1\\xc9\\x45\\xcd\\xf5\\xe5\\x66\\\n\\xbc\\xaa\\x91\\x35\\x32\\x3f\\xca\\x55\\x0f\\x81\\x63\\x42\\x08\\x52\\x0a\\x97\\\n\\xbd\\xa0\\xaf\\xea\\x3a\\x7c\\x6d\\x52\\x25\\x4e\\x85\\x57\\xe2\\x9b\\xc8\\x5e\\\n\\xc0\\x17\\x95\\x3c\\x1c\\xe7\\xa1\\xc9\\xad\\x75\\xf3\\x57\\xb5\\xac\\xbc\\x9b\\\n\\x22\\x3a\\x67\\x2f\\xe5\\xb0\\x87\\xc0\\xd1\\x90\\x95\\x88\\xf0\\x99\\x15\\xf8\\\n\\x4e\\x94\\xd1\\x9f\\xd2\\x94\\xcb\\x1e\\x82\\xac\\x58\\x88\\x52\\xf4\\xed\\x94\\\n\\xe7\\xb0\\x87\\xc0\\x97\\x84\\xe4\\xb2\\x87\\xc0\\x9f\\x84\\xe4\\xb0\\x87\\xc0\\\n\\x97\\x84\\xe4\\xb2\\x87\\xc0\\x9f\\x84\\xe4\\xb0\\x87\\xc0\\x9f\\x84\\xe4\\xb0\\\n\\x87\\x20\\x6b\\xd3\\x5e\\xbb\\xc9\\x90\\x2a\\x99\\xd7\\x1e\\x02\\x55\\xfd\\x22\\\n\\xbd\\xbe\\xb4\\x10\\xba\\x70\\xaf\\x3c\\x04\\xd4\\xb6\\xca\\xe4\\x4b\\x0b\\x91\\\n\\x80\\x90\\x87\\x00\\xfd\\x59\\xd7\\x99\\x3b\\x91\\x06\\xdc\\x68\\x08\\x51\\x88\\\n\\x5e\\xcc\\x8e\\x41\\x6e\\x6c\\x69\\xf3\\xa9\\x23\\xd3\\xd7\\x84\\x10\\x31\\x6e\\\n\\x7a\\x08\\xe4\\x17\\x41\\x65\\xee\\xdb\\x21\\x4b\\x25\\x28\\x5e\\xea\\xd6\\x84\\\n\\x78\\x89\\xbe\\x4d\\xdb\\x9a\\x10\\x1b\\x50\\xbc\\x14\\x69\\x42\\xbc\\x44\\xdf\\\n\\xa6\\x6d\\x4d\\x88\\x0d\\x28\\x5e\\x8a\\x34\\x21\\x5e\\xa2\\x6f\\xd3\\xb6\\x26\\\n\\xc4\\x06\\x14\\x2f\\x45\\x9a\\x10\\x2f\\xd1\\xb7\\x69\\x5b\\x13\\x62\\x03\\x8a\\\n\\x97\\x22\\x4d\\x88\\x97\\xe8\\xdb\\xb4\\xad\\x09\\xb1\\x01\\xc5\\x4b\\x91\\xad\\\n\\x2f\\x0b\\x5f\\x63\\x8d\\xdb\\xd6\\x3a\\xb9\\x83\\x80\\xe8\\xc4\\x9f\\x4d\\xd5\\\n\\xb4\\xae\\x59\\xb0\\x8b\\xda\\xd3\\x16\\xe2\\x0e\\xea\\x29\\x5a\\x61\\xa5\\x60\\\n\\x84\\xac\\xc7\\x34\\x2c\\x0b\\x41\\xd7\\x75\\x14\\xdf\\x58\\xd6\\x94\\xe2\\x93\\\n\\xfa\\x94\\x13\\x04\\x44\\xfc\\x52\\x7c\\x0b\\xf5\\x0c\\x7c\\x28\\xd6\\x8a\\x04\\\n\\x8b\\x85\\xef\\xf1\\x47\\xe8\\x87\\x8d\\x71\\x27\\x36\\x38\\x51\\xad\\x3f\\xab\\\n\\x11\\x08\\x0e\\x02\\xff\\x03\\x14\\x8e\\xec\\xc5\\x85\\xda\\x25\\x37\\x00\\x00\\\n\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x0b\\x46\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x50\\x00\\x00\\x00\\x50\\x08\\x06\\x00\\x00\\x00\\x8e\\x11\\xf2\\xad\\\n\\x00\\x00\\x00\\x04\\x73\\x42\\x49\\x54\\x08\\x08\\x08\\x08\\x7c\\x08\\x64\\x88\\\n\\x00\\x00\\x00\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0d\\xd7\\x00\\x00\\x0d\\xd7\\\n\\x01\\x42\\x28\\x9b\\x78\\x00\\x00\\x00\\x19\\x74\\x45\\x58\\x74\\x53\\x6f\\x66\\\n\\x74\\x77\\x61\\x72\\x65\\x00\\x77\\x77\\x77\\x2e\\x69\\x6e\\x6b\\x73\\x63\\x61\\\n\\x70\\x65\\x2e\\x6f\\x72\\x67\\x9b\\xee\\x3c\\x1a\\x00\\x00\\x0a\\xc3\\x49\\x44\\\n\\x41\\x54\\x78\\x9c\\xed\\x9c\\x69\\x90\\x14\\xe5\\x19\\xc7\\xff\\x4f\\x77\\x0f\\\n\\x8a\\x14\\xa8\\xeb\\xf4\\x60\\x52\\x8b\\x49\\xa5\\x28\\xa2\\x95\\x4a\\x19\\x75\\\n\\x65\\x66\\x17\\x48\\xb2\\x04\\x94\\x90\\xc3\\x4a\\x25\\xf1\\x48\\x25\\x15\\x8d\\\n\\x51\\x93\\x78\\x84\\x43\\x39\\x76\\x66\\x96\\x96\\x9d\\x19\\x40\\x70\\x05\\x31\\\n\\x1a\\x42\\x3e\\x80\\x57\\x12\\x4d\\xd4\\xf8\\x21\\x95\\xc3\\x68\\xca\\x63\\xa7\\\n\\x67\\x85\\xa8\\x89\\x58\\x51\\xbc\\xc0\\x20\\xec\\xcc\\x00\\x91\\x9b\\xdd\\x9e\\\n\\x7e\\xf2\\x61\\x59\\xdc\\x63\\x66\\xfb\\xe9\\x63\\x76\\xb0\\xe4\\xf7\\x6d\\xa7\\\n\\x9f\\xf7\\x7d\\x1e\\x1e\\xba\\xfb\\xff\\xf6\\xbf\\xdf\\x19\\xe0\\x24\\x27\\x39\\\n\\xc9\\xc7\\x91\\xc8\\xd2\\xdc\\xf9\\xb5\\xae\\xe1\\x44\\x40\\xf1\\x32\\x48\\x4f\\\n\\xe5\\xbe\\xcb\\x0a\\xbf\\x18\\x49\\x67\\xdb\\x83\\x2e\\xe8\\xa3\\x86\\xeb\\x06\\\n\\xea\\xa9\\xec\\x15\\x00\\x3f\\x0c\\x20\\xc4\\x4c\\x73\\x23\\x6d\\xe6\\xaa\\x2a\\\n\\xd4\\xf5\\x91\\x81\\xdc\\x04\\x87\\xd3\\xe6\\x95\\xc4\\x78\\x00\\x80\\xd6\\xff\\\n\\x73\\x66\\xac\\x2c\\x26\\x63\\x0b\\x02\\xad\\xac\\x0c\\x7a\\x9b\\x39\\x1b\\x0a\\\n\\x7f\\xbe\\xda\\x79\\xdc\\x20\\x6e\\xa0\\x9e\\x36\\x7f\\x04\\xc6\\x7a\\x54\\x38\\\n\\x6b\\x19\\x58\\x52\\x4c\\xc4\\x96\\x06\\x56\\xd9\\x20\\xc2\\xe9\\x4d\\x9f\\x20\\\n\\xb6\\x5e\\x07\\x30\\xb6\\x5a\\x39\\x3c\\xb0\\x55\\x74\\x09\\xeb\\x6d\\xb9\\x6b\\\n\\x87\\x6b\\x1e\\x00\\x10\\x70\\xbb\\x9e\\xca\\x26\\x02\\x2b\\x6d\\xf0\\xfc\\x6c\\\n\\x65\\x70\\x62\\x35\\x0f\\xcc\\x34\\xcf\\xf1\\x0c\\x0c\\xb7\\x65\\xaf\\x23\\xa2\\\n\\x75\\x10\\x9e\\xad\\x04\\x5a\\x98\\x4f\\x44\\xef\\xf0\\x5d\\x5d\\xff\\x1a\\x96\\\n\\x9a\\x17\\x91\\x82\\x4e\\x78\\x14\\xbd\\x6a\\xc0\\xc0\\x53\\xc5\\x44\\x6c\\xa6\\\n\\x63\\x41\\x8a\\xaa\\xbc\\x0a\\xe0\\x80\\x7c\\x62\\x5e\\xa1\\xa7\\xb3\\x0b\\x7d\\\n\\x55\\x37\\x60\\x42\\x26\\x52\\xb0\\x1a\\x27\\x50\\xf3\\x00\\x58\\x9a\\xad\\xcc\\\n\\x01\\x04\\x45\\xe5\\x5b\\xa2\\x59\\x82\\x3d\\x0b\\xc0\\x7e\\xf1\\xf4\\x4c\\xcb\\\n\\x23\\xe9\\xdc\\x6d\\xde\\xeb\\xfb\\x90\\x48\\x3a\\xf7\\x7d\\x00\\x53\\x83\\x98\\\n\\x2b\\x28\\x88\\x78\\xed\\xae\\xd6\\xc9\\x5b\\x00\\xe1\\xff\\x6a\\x3e\\xd1\\xd4\\\n\\x01\\x60\\x36\\xdc\\x9c\\x89\\xcc\\x2b\\xf4\\x36\\xf3\\x46\\x6f\\x25\\xf6\\xf2\\\n\\x49\\x63\\xd3\\x69\\x60\\x4e\\xf9\\x99\\x23\\x68\\x08\\xd8\\x73\\xa4\\xe7\\xc3\\\n\\x9a\\xc4\\x97\\x45\\x21\\x11\\x7b\\x1e\\x0a\\xcd\\x06\\x70\\x50\\x9c\\x8b\\xb0\\\n\\x36\\x92\\x32\\x7f\\xe6\\xb6\\xc8\\x3e\\x7a\\x34\\x6b\\x31\\x13\\x9d\\xe3\\x75\\\n\\x7c\\x75\\xa0\\xf8\\x3e\\xa3\\x69\\x4f\\xdf\\x5f\\xae\\xee\\x2b\\x85\\x96\\xe8\\\n\\x73\\x44\\xf8\\x16\\x80\\x23\\xd2\\x6c\\x0c\\xdc\\x13\\x49\\xe5\\x7e\\xe2\\x26\\\n\\x0f\\x00\\x9c\\xb9\\x7c\\xd3\\x39\\x00\\xe6\\xb9\\x1d\\x57\\x65\\x5e\\xc9\\x4f\\\n\\xda\\xb6\\xbe\\xff\\x07\\xae\\x16\\xd2\\x7d\\x44\\xda\\xcc\\x4b\\x98\\xf0\\x47\\\n\\x00\\xa7\\x0a\\x87\\x30\\x33\\xdf\\x50\\x4c\\x36\\xae\\x77\\x0e\\xed\\x45\\x4f\\\n\\x99\\xbf\\x07\\xf0\\x6d\\xc7\\x40\\xc2\\x66\\xd8\\xf4\\x94\\x74\\xde\\xa1\\xe3\\\n\\x79\\xa2\\x28\\x0f\\x00\\x66\\x6e\\x2e\\x26\\x1b\\xff\\x31\\x60\\xb8\\x9e\\xce\\\n\\x76\\x82\\x15\\xad\\xc2\\x98\\xe1\\x18\\x07\\xe2\\xcf\\x80\\xc5\\xff\\x09\\x25\\\n\\x22\\x5c\\x9d\\x8f\\xc7\\x1e\\x74\\x0a\\x0c\\xa7\\xcd\\x66\\x62\\x3c\\x2d\\x98\\\n\\xd3\\x52\\x48\\xbd\\xa0\\x2b\\x7e\\xf1\\xab\\xc2\\x1a\\x86\\xa0\\xa7\\xcc\\x3f\\\n\\x03\\xb8\\x54\\x10\\xfa\\x68\\x21\\x11\\xbb\\x7c\\xf0\\x87\\x1a\\x98\\x2e\\x04\\\n\\x58\\xf5\\x94\\x9d\\x5d\\x45\\xab\\xcc\\xd8\\x10\\x4e\\x9b\\x56\\x31\\x1e\\xfb\\\n\\x6d\\xc5\\xa8\\x47\\x1e\\x51\\xe9\\x0d\\xdc\\x25\\x9c\\xf3\\x1e\\x3f\\xcd\\x1b\\\n\\x9f\\x32\\x2f\\xb3\\x65\\xcd\\x3b\\xa2\\xaa\\x5c\\xf6\\x51\\x75\\xa4\\xd7\\x56\\\n\\x2a\\x31\\x1e\\x0c\\xa7\\x72\\x57\\x55\\x0a\\x88\\xbc\\x3e\\xe1\\x7a\\x00\\x8e\\\n\\x56\\x19\\x01\\x7b\\x46\\x29\\xe4\\x5d\\xa1\\x8d\\x2d\\xa3\\x6c\\x40\\xb4\\xe0\\\n\\x27\\xc6\\xca\\x5d\\x8b\\x1b\\xdf\\x2d\\x77\\xac\\x16\\x8b\\x53\\x95\\xc0\\x0f\\\n\\xf4\\xba\\x3a\\x03\\x39\\x7d\\xd9\\x73\\x67\\x32\\x91\\xf0\\x79\\x9a\\xe2\\x3b\\\n\\x5a\\xa2\\xbb\\xbd\\x16\\xa1\\x87\\xf6\\xcd\\x05\\x30\\x49\\x10\\xba\\x83\\x4e\\\n\\x1d\\xbd\\xa2\\xd2\\xc1\\x5a\\xad\\xee\\x55\\x02\\xdd\\x1f\\x4e\\x9b\\xcd\\xfd\\\n\\x3f\\x1c\\x55\\x0a\\x19\\x00\\xc2\\x4e\\x83\\x19\\xd8\\x92\\xb7\\x0e\\xfd\\xda\\\n\\x6b\\xf2\\x48\\xda\\x1c\\x0f\\xa6\\xc5\\x92\\x58\\x26\\x5a\\xd0\\x75\\xdb\\xf9\\\n\\x15\\x97\\x6e\\x35\\x7b\\x3c\\x62\\xd0\\x96\\x1e\\xa5\\xe7\\xe5\\xbe\\xbf\\xcf\\\n\\x6a\\xcb\\x9e\\x07\\xe0\\xa7\\xb2\\xc1\\x7c\\x13\\x8c\\x66\\xcb\\x73\\x6e\\xc6\\\n\\x32\\x00\\xa7\\x0b\\x8a\\xcc\\x16\\x5b\\x26\\xff\\x66\\xb8\\x90\\x5a\\x35\\xf0\\\n\\xe5\\xa3\\x56\\x69\\xc6\\x07\\x8b\\xa7\\xed\\x3d\\x5e\\x08\\x29\\xed\\x00\\x42\\\n\\x82\\xb1\\x8f\\x0e\\x5e\\x4a\\xb8\\x21\\x9c\\xce\\x5e\\x08\\xe0\\x87\\x82\\x50\\\n\\xdb\\x26\\x7b\\x0e\\x88\\x86\\x95\\xca\\x5a\\x34\\xf0\\x95\\x51\\x0a\\xcd\\xe8\\\n\\xbf\\x9a\\x0f\\xb7\\x65\\xbf\\x09\\xf0\\x2c\\xc1\\xd8\\x8a\\x6a\\x28\\x82\\x99\\\n\\xc8\\x26\\xa9\\x31\\xb1\\x61\\x77\\xa2\\xa9\\xd3\\x29\\x68\\xa4\\x1b\\xf8\\x1f\\\n\\x22\\x5c\\x3a\\xe0\\xe6\\x6f\\x6c\\x19\\x45\\x44\\x2b\\x25\\x83\\x87\\x53\\x43\\\n\\x09\\xe1\\xb4\\xf9\\x3d\\x10\\xa6\\x09\\x42\\xf7\\x33\\x69\\x22\\x6f\\x53\\x83\\\n\\x6d\\x5f\\xcc\\x2a\\xb9\\x7b\\x22\\xd1\\x14\\x85\\x7a\\x78\\x29\\x80\\xaf\\xba\\\n\\x18\\xf5\\x06\\x93\\x36\\xbd\\x10\\x6f\\xe8\\xea\\xff\\x61\\x44\\x3b\\x30\\x87\\\n\\x03\\x50\\x43\\x27\\xea\\xdb\\x3b\\x46\\x77\\x1f\\x44\\x86\\x05\\xff\\x52\\x02\\\n\\xa5\\x0a\\xf1\\x86\\x9d\\x92\\x79\\xb5\\x42\\x6b\\xd3\\x4b\\xae\\x2a\\x31\\x58\\\n\\x09\\x73\\x6e\\x03\\xdc\\x35\\x6f\\x2b\\x5b\\x56\\x73\\xd1\\x88\\x0d\\x28\\x6a\\\n\\xbc\\xf1\\x42\\xc4\\x06\\xb7\\x48\\x26\\x60\\xf0\\xc2\\xe1\\xd4\\xd0\\x89\\xa3\\\n\\x87\\x94\\x16\\x10\\x04\\xc6\\x04\\xbd\\x35\\x6e\\xdc\\xee\\x35\\x79\\xe1\\xbc\\\n\\xee\\x2e\\x61\\x66\\x8a\\x84\\x72\\xf7\\x12\\xf0\\x03\\xf1\\x10\\x60\\x9b\\x86\\\n\\xd2\\xcc\\xa2\\x31\\xf5\\xfd\\xc1\\xc7\\x6c\\x4d\\x95\\xab\\x61\\x3c\\xf6\\xb0\\\n\\xab\\x5a\\xfb\\x51\\x97\\xea\\x9c\\x00\\xa1\\x31\\xc1\\x6c\\xcf\\x7b\\xf3\\x96\\\n\\xd9\\x47\\xa5\\x73\\xcb\\x1b\\xc8\\x4c\\xe1\\x4c\\xe7\\x2f\\x98\\x71\\x83\\x74\\\n\\x08\\x31\\x6f\\x57\\x99\\x9a\\x77\\x26\\xa6\\x6c\\x1b\\x7c\\x4c\\x5f\\xda\\x71\\\n\\x01\\x80\\xab\\x05\\xd3\\x88\\xd4\\x70\\x38\\x54\\xb2\\xdb\\x01\\x9c\\xe6\\x14\\\n\\xc7\\xe0\\xbf\\x17\\x93\\x8d\\x4f\\xba\\x99\\x5b\\xd6\\x40\\x66\\xd2\\x33\\xb9\\\n\\xb5\\xc4\\x2c\\x5b\\xa7\\xf5\\xf2\\x1e\\x69\\x5a\\x73\\x57\\x32\\xfa\\x4e\\xb9\\\n\\xf9\\x40\\xca\\x1a\\x61\\xfe\\x8d\\x12\\x35\\xac\\x84\\x9e\\x32\\xa7\\x82\\x45\\\n\\x6e\\x8b\\xa5\\xda\\x3c\\xd7\\xed\\xfc\\xa2\\x06\\x86\\xd3\\xe6\\x72\\x30\\xdc\\\n\\xb8\\xcb\\x3b\\x88\\x4b\\xcd\\x5d\\x8b\\x2f\\x7e\\xbb\\xec\\x7c\\x99\\xce\\xab\\\n\\x5c\\xa8\\x61\\xdc\\x45\\xde\\x81\\x18\\xac\\x80\\xb0\\x1a\\x32\\xdb\\xee\\xde\\\n\\xae\\xd6\\xa6\\x7f\\xbb\\x4d\\xe1\\xd8\\x40\\x3d\\x95\\x4d\\x10\\xc8\\xcd\\xda\\\n\\x6b\\x27\\x2b\\x34\\x3d\\x9f\\x9c\\xf2\\x56\\xb9\\x83\\xf5\\xed\\x1d\\xa3\\x15\\\n\\xdb\\x5e\\x26\\x9a\\x89\\x38\\x5d\\x14\\xaa\\x61\\x39\\x22\\x5a\\xe7\\xf5\\x60\\\n\\x5c\\xe4\\x98\\xa6\\xd7\\x98\\xf0\\xf4\\x4e\\xdb\\xf9\\x0c\\x64\\xfa\\x1d\\x08\\\n\\xff\\x95\\x4d\\x47\\x05\\xd5\\x56\\x66\\x16\\x5b\\xa2\\x6f\\x54\\x8a\\xe8\\x3e\\\n\\xa8\\x08\\x6d\\x7a\\x7a\\xeb\\xf4\\xb1\\x7b\\x57\\xcb\\xf2\\x0e\\xe5\\x0c\\xe3\\\n\\xa5\\x33\\x18\\x90\\x35\\x85\\x39\\xe1\\xd5\\x98\\x70\\x6c\\x60\\x21\\x19\\xdb\\\n\\xaa\\x71\\x69\\x2a\\x80\\xa1\\xf7\\xb2\\x81\\x14\\x15\\xbb\\xf4\\x95\\xbe\\xb7\\\n\\x55\\xe5\\xa8\\x4b\\x75\\x4e\\x60\\xc2\\x7c\\x49\\x61\\x6e\\xd5\\x70\\x30\\x21\\\n\\xed\\xe8\\x12\\x80\\x75\\xc7\\x3c\\xc0\\x96\\x7c\\xe9\\x88\\xd8\\x29\\x1f\\x8c\\\n\\xe8\\x1e\\xb8\\x33\\x31\\x65\\x9b\\xa5\\x69\\x5f\\x06\\xa8\\xec\\x65\\x09\\xe0\\\n\\x7f\\x6c\\x63\\x96\\xd3\\x3d\\x44\\x85\\x7d\\x27\\xaa\\xa4\\x86\\xfd\\x39\\x2b\\\n\\xd3\\x71\\x2e\\x20\\xbb\\x67\\x2b\\x84\\xb9\\x7e\\x8c\\x09\\xf1\\x32\\x66\\xef\\\n\\xa2\\x86\\xed\\x25\\x50\\x33\\x80\\x37\\x07\\x1d\\xfa\\xc0\\xb6\\x95\\x4b\\x8a\\\n\\xad\\xb1\\xcd\\xc3\\x8d\\x8f\\x64\\xb2\\x53\\x00\\x7c\\x47\\x90\\xca\\x93\\x1a\\\n\\xf6\\x47\\xb1\\xc5\\xc6\\xc4\\x1f\\xf2\\xf1\\xd8\\xdf\\x7c\\xe5\\x72\\x13\\xbc\\\n\\x27\\x31\\xf9\\x3d\\x58\\xca\\x34\\x02\\x5e\\x3b\\xf6\\xd1\\x3e\\xc5\\xe6\\x4b\\\n\\x77\\xb7\\x4e\\x7e\\x71\\xd8\\x81\\x06\\x2b\\xcc\\xb4\\x06\\x55\\x54\\xc3\\x3e\\\n\\xc2\\x6d\\xb9\\xaf\\x43\\xf4\\x94\\x44\\x47\\xa1\\xda\\x8b\\xbc\\xe6\\xe9\\xc3\\\n\\xb5\\x99\\x50\\x30\\x26\\xef\\x02\\x61\\x3a\\x13\\x72\\x80\\xf2\\x8d\\xae\\xd6\\\n\\xc6\\x9c\\xd3\\x98\\xb0\\xda\\x79\\x5d\\xb5\\xd5\\x10\\xc0\\x31\\x63\\x82\\x65\\\n\\xfb\\x15\\x19\\xab\\x0a\\x8b\\x9b\\x06\\x5f\\x4d\\xae\\xf1\\xf2\\x36\\x0e\\xf9\\\n\\x78\\xac\\x0b\\xcc\\x8d\\x92\\xa7\\x83\\x3a\\xc3\\x1c\\x47\\xc4\\x86\\x70\\xea\\\n\\xa4\\x1f\\x9b\\x3e\\xa2\\xed\\xbf\\x85\\x81\\xcf\\x0a\\x42\\x77\\x95\\x4a\\x1c\\\n\\xc8\\x06\\x28\\xef\\x76\\x96\\xf0\\xd1\\x4a\\x0b\\xb1\\x01\\xe0\\x6c\\xc7\\xe9\\\n\\x80\\xd7\\xf2\\xd6\\xe1\\x5f\\x79\\x2d\\x67\\xbc\\xf1\\x42\\x84\\x01\\x91\\x05\\\n\\x45\\xc0\\x82\\x3d\\x46\\x6c\\x9f\\xd7\\x5c\\xfd\\xa9\\xaa\\x1f\\x78\\x56\\xa6\\\n\\xe3\\x5c\\x66\\xba\\x49\\x14\\xcc\\xfe\\xd4\\xd0\\xd6\\x94\\x0c\\x24\\xc6\\x04\\\n\\x60\\xe6\\xe3\\x51\\xc7\\x77\\xd3\\x52\\x3c\\x5d\\xc2\\x52\\xc4\\x6a\\x48\\x78\\\n\\x2c\\x9f\\x88\\xfd\\xd5\\x6b\\x9e\\x5e\\x63\\x82\\xae\\x11\\x84\\xb2\\x62\\xb3\\\n\\x2f\\x63\\x62\\x30\\x55\\x3b\\x03\\xa5\\x6a\\x48\\x40\\x37\\x6c\\xf8\\x53\\x43\\\n\\x45\\x91\\xda\\xf4\\x1b\\x25\\xa2\\xe7\\x2a\\x75\\x90\\x93\\x1d\\xc7\\x85\\x1a\\\n\\x32\\x78\\x55\\x21\\x19\\xdb\\xea\\x35\\xd5\\xb1\\x97\\xf4\\x5f\\x14\\x84\\x1e\\\n\\x60\\xcb\\xf2\\x6e\\x4c\\x54\\xa0\\x2a\\x0d\\x8c\\x68\\xfb\\x6f\\x81\\x54\\x0d\\\n\\x2d\\xf2\\x65\\xd3\\x03\\x2c\\x33\\x26\\x80\\x74\\x39\\x53\\xd7\\x2f\\x81\\x37\\\n\\x70\\x24\\xd5\\xb0\\xfb\\x20\\x2d\\x24\\xe0\\x53\\x82\\xd0\\xb7\\xc7\\x58\\x87\\\n\\x3d\\x1b\\x13\\xc3\\x11\\x78\\x03\\x6d\\x4d\\x4b\\x43\\xa2\\x86\\x84\\xcd\\x79\\\n\\x2b\\xfa\\x90\\xd7\\x3c\\x75\\x86\\x59\\xcf\\x44\\xb7\\x4a\\x62\\x89\\x69\\xfe\\\n\\xbb\\x46\\xb3\\x74\\x4f\\xa3\\x2b\\x02\\x6d\\x60\\xaf\\x1a\\xb2\\x4c\\x0d\\x4b\\\n\\x7c\\x23\\x0c\\xb2\\xbd\\xe6\\x52\\x35\\xac\\x02\\x30\\xc6\\x29\\x8e\\x80\\xa7\\\n\\xf3\\xc9\\xe8\\x13\\x5e\\xf3\\x38\\x11\\xec\\x19\\xd8\\xab\\x86\\x82\\xad\\x72\\\n\\x7c\\xbf\\x1f\\x35\\x8c\\xa4\\x3a\\x9a\\x00\\x0c\\xd9\\xab\\x57\\x86\\x12\\xd9\\\n\\xf6\\x1c\\xaf\\x79\\x24\\x04\\xd6\\xc0\\x70\\xda\\xbc\\x12\\x62\\x35\\x2c\\x89\\\n\\x5e\\x65\\x96\\xc5\\x60\\x85\\xa1\\x08\\x8d\\x09\\xbe\\xcf\\x8f\\x31\\x21\\x21\\\n\\x90\\x06\\xd6\\xb7\\x77\\x8c\\x06\\x63\\xb9\\x28\\x98\\x90\\xf1\\xa3\\x86\\xe1\\\n\\x50\\xee\\xc7\\x00\\x1a\\x04\\xa1\\x7b\\x43\\x56\\xe8\\x76\\xaf\\x79\\xa4\\x04\\\n\\xd2\\x40\\x57\\x6a\\xd8\\x73\\x58\\xba\\xfb\\x74\\x08\\x75\\x86\\x39\\x8e\\x18\\\n\\xc2\\xa6\\x50\\xeb\\xfb\\x46\\x43\\xd1\\x6b\\x2e\\x29\\xbe\\x1b\\xe8\\x4a\\x0d\\\n\\x41\\xb7\\xfa\\x51\\x43\\x4d\\xa3\\x25\\x10\\x1a\\x13\\x05\\x5d\\x5d\\xe7\\x35\\\n\\x8f\\x1b\\x7c\\x37\\xd0\\x95\\x1a\\x26\\xa2\\x8f\\x7b\\xcd\\xa3\\x2f\\xeb\\x98\\\n\\xc8\\x42\\x9b\\x1e\\x8c\\xb9\\xb8\\xa1\\xa1\\xc7\\x6b\\x2e\\x37\\xf8\\x6a\\xa0\\\n\\x1b\\x35\\x04\\xc1\\x97\\x4d\\x8f\\x92\\xb2\\x06\\xe0\\x53\\x9c\\x03\\xf9\\xf1\\\n\\x7c\\xd2\\xbb\\x31\\xe1\\x16\\xef\\x0d\\x74\\xa3\\x86\\x84\\x5f\\xe6\\xe3\\xb1\\\n\\x7f\\x79\\x4d\\x15\\x49\\x9b\\x33\\xd1\\xfb\\x55\\x33\\x87\\x34\\xe8\\x06\\x53\\\n\\x70\\x5f\\x74\\x14\\xe0\\xb9\\x81\\x61\\xd5\\xbc\\x16\\x52\\x35\\xec\\xd1\\x0c\\\n\\xaf\\x79\\xb0\\x6e\\x53\\x88\\x19\\x6b\\x25\\xa1\\xcc\\xb8\\xd3\\x8f\\x31\\xe1\\\n\\x05\\x4f\\x0d\\x0c\\xaf\\x78\\x7e\\x2c\\xc9\\x77\\xd3\\xfb\\x52\\xc3\\x70\\xa1\\\n\\xe7\\x66\\xc8\\x8c\\x89\\xae\\x52\\x49\\xb8\\x94\\x0a\\x10\\x4f\\x0d\\x54\\xba\\\n\\xb5\\x11\\x51\\xc3\\xb3\\x33\\xcf\\xea\\x04\\x4a\\xca\\xa2\\x69\\x61\\x50\\x36\\\n\\xbd\\x1b\\xdc\\xff\\x6a\\xc7\\xb2\\x8e\\x89\\x4c\\x42\\x9b\\x9e\\x68\\x9e\\x1f\\\n\\x35\\xb4\\xed\\x51\\x29\\x00\\x67\\x38\\xe7\\xc1\\xe6\\x82\\x35\\xf9\\x01\\xaf\\\n\\x79\\xfc\\xe0\\xfe\\x0c\\x2c\\x29\\xab\\x25\\x6a\\xc8\\x84\\x27\\xf2\\xf1\\xe8\\\n\\x5f\\x3c\\x55\\x05\\x40\\x4f\\x77\\x7e\\x81\\x81\\x6b\\x05\\xa1\\x0c\\xc6\\x1c\\\n\\x3f\\xc6\\x84\\x1f\\x5c\\x35\\x70\\x7c\\x5b\\x76\\x06\\x80\\xaf\\x39\\xc5\\x11\\\n\\xd0\\x4d\\x36\\xfc\\xfd\\x0c\\x8a\\xcd\\x22\\x63\\x82\\x81\\x07\\x0b\\x89\\xd8\\\n\\xf3\\xbe\\x72\\xf9\\x40\\xde\\x40\\xe3\\x19\\xad\\x44\\x24\\x32\\x25\\x19\\x68\\\n\\xf7\\xa3\\x86\\x7a\\x2a\\x7b\\x05\\x88\\xbf\\x24\\x08\\x3d\\x54\\xd2\\x64\\xbb\\\n\\xe9\\xab\\x85\\xb8\\x81\\x61\\xf5\\xb4\\x9b\\x09\\xf8\\x9c\\x20\\xb4\\xab\\x64\\\n\\x41\\x6a\\xb3\\x0f\\xa1\\xd7\\xa6\\x27\\xa1\\x9a\\x52\\x7a\\xef\\xa2\\x86\\xed\\\n\\x5e\\x73\\x05\\x81\\xa8\\x81\\x67\\x67\\x9e\\xd5\\x89\\xb8\\x55\\x34\\x23\\xf1\\\n\\x22\\x3f\\x6a\\x78\\xe4\\xb0\\xba\\x00\\xc0\\xa7\\x05\\xa1\\xef\\x8c\\xb1\\x0e\\\n\\xd5\\xfc\\xb7\\xbb\\x44\\x0d\\x14\\xab\\x21\\xf0\\xcf\\x42\\x4f\\xec\\x7e\\xaf\\\n\\xc5\\xd4\\x19\\x66\\x3d\\x31\\x8b\\x7e\\xed\\x83\\x98\\x7d\\x19\\x13\\x41\\xe1\\\n\\xbc\\xc5\\xd7\\x8d\\x1a\\x02\\x3f\\xf7\\xa3\\x86\\x9a\\x86\\x3b\\x20\\x30\\x26\\\n\\x00\\x3c\\x93\\x4f\\x36\\x3e\\xe6\\x35\\x4f\\x90\\x38\\x9f\\x81\\x52\\x35\\x64\\\n\\x3c\\xe4\\x47\\x0d\\x23\\x99\\x5c\\x23\\x03\\x57\\x0a\\x42\\x4b\\x44\\xa8\\xaa\\\n\\x4d\\xef\\x86\\x61\\x1b\\xa8\\xa7\\xb3\\x97\\x8b\\xd5\\x30\\xe4\\x6f\\x37\\x3d\\\n\\xb3\\x2d\\xdd\\x3f\\xb8\\xce\\x8f\\x31\\x11\\x34\\x15\\x0b\\xae\\x6f\\xef\\x18\\\n\\x7d\\xf4\\x90\\xf2\\x1a\\x24\\x37\\x74\\xc6\\x73\\xac\\xc0\\xf3\\x86\\x1d\\x62\\\n\\x9c\\x07\\x88\\xce\\xaa\\xbd\\x21\\x4b\\x9b\\x34\\x12\\x4e\\xb3\\x94\\x8a\\x9b\\\n\\x8b\\x8e\\x1c\\x52\\x6e\\x23\\x99\\x1a\\x02\\x84\\x69\\xc4\\xa2\\xef\\x7d\\xf8\\\n\\x84\\x8d\\x13\\xa9\\x79\\x40\\x85\\x4b\\xb8\\xce\\x30\\xeb\\x09\\x3e\\x9f\\x24\\\n\\x02\\xa6\\xd7\\x98\\x08\\xdd\\x57\\xeb\\x3a\\x06\\x53\\xb6\\x81\\x9a\\xca\\x2b\\\n\\x20\\x53\\xc3\\x11\\x83\\xd9\\x9e\\x3f\\x52\\x36\\xbd\\x1b\\x86\\xdc\\x03\\x23\\\n\\x99\\x5c\\x23\\xdb\\xfc\\x42\\xb9\\x63\\xb5\\x82\\x08\\x4f\\xe6\\xe3\\xb1\\xcb\\\n\\x6a\\x5d\\x47\\x39\\x06\\x9e\\x81\\x06\\x2b\\x6c\\xf3\\xdd\\x38\\x91\\x9a\\x07\\\n\\x74\\xb3\\x0d\\xd1\\x5b\\xbf\\x5a\\x30\\x40\\x44\\x74\\xb5\\xf3\\x1a\\xc8\\x6c\\\n\\xfa\\x11\\x83\\x99\\xee\\x2a\\x24\\xa3\\x23\\x6a\\xd3\\xbb\\xe1\\xf8\\x19\\x58\\\n\\x67\\x98\\xe3\\x40\\x27\\xd6\\x6f\\xf5\\xa1\\x77\\x37\\x7d\\xa6\\xd6\\x45\\x0c\\\n\\xc7\\xf1\\x06\\x2a\\x2a\\x12\\x10\\xd8\\xf4\\x23\\x0a\\xa3\\xa5\\x16\\x36\\xbd\\\n\\x1b\\x34\\x00\\x98\\x78\\xf7\\x9f\\x4e\\xf9\\x60\\x3f\\x9d\\x4a\\xcc\\x9e\\xbf\\\n\\x66\\x10\\x34\\x36\\xb0\\xaf\\x58\\x8a\\x6e\\xac\\x75\\x1d\\x27\\xa9\\x32\\xff\\\n\\x07\\x68\\x25\\x04\\x86\\xfb\\xd1\\x77\\x1d\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\\n\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x05\\x90\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x50\\x00\\x00\\x00\\x50\\x08\\x06\\x00\\x00\\x00\\x8e\\x11\\xf2\\xad\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0e\\xc3\\x00\\x00\\x0e\\xc3\\x01\\xc7\\x6f\\\n\\xa8\\x64\\x00\\x00\\x05\\x25\\x49\\x44\\x41\\x54\\x78\\x5e\\xed\\x58\\x4d\\x6f\\\n\\x13\\x57\\x14\\xcd\\xdf\\xe8\\xd7\\x6f\\x41\\xd8\\x06\\x36\\x6d\\x7f\\x00\\x1f\\\n\\x7f\\xa0\\x89\\xd4\\x05\\xb0\\xe9\\x16\\x58\\x81\\x40\\x08\\x29\\x48\\x75\\x17\\\n\\xac\\x60\\x05\\xab\\x86\\xee\\x60\\xd3\\xe2\\xa8\\x95\\x0a\\xab\\x40\\x76\\x64\\\n\\x03\\x6c\\xa0\\xd0\\x80\\xe2\\xc4\\x71\\xa6\\xf7\\x0c\\xf7\\x62\\x67\\x7c\\x87\\\n\\x79\\x7e\\xf6\\x9c\\xda\\x9e\\x39\\xd2\\x91\\x2c\\xbf\\x3b\\xf7\\xfa\\x9c\\x3b\\\n\\xef\\xc3\\x6f\\xa9\\x46\\x8d\\x1a\\x86\\xf5\\x23\\x47\\xbe\\x7e\\xd4\\x68\\xac\\\n\\x74\\x1a\\x8d\\xdf\\x84\\x4f\\xe5\\xf3\\x7b\\x10\\x9f\\xf1\\xdd\\x7a\\xa3\\xb1\\\n\\x8c\\x18\\x0d\\xaf\\x61\\xf8\\xbd\\xd5\\xfa\\xb2\\xd3\\x6c\\xfe\\x22\\xec\\x09\\\n\\x93\\x02\\x22\\xa6\\xfd\\xd7\\x89\\x13\\x5f\\xe8\\xe3\\xd5\\x46\\xe7\\xe8\\xd1\\\n\\xef\\xc5\\x90\\xed\\xd4\\x9c\\x56\\x2b\\x79\\x7a\\xfa\\x74\\xf2\\xe2\\xdc\\xb9\\\n\\xe4\\x9f\\x0b\\x17\\x92\\x0f\\x57\\xae\\xa4\\xc4\\x67\\x7c\\x87\\x31\\xc4\\xa8\\\n\\x91\\xff\\xe2\\x59\\x4d\\x53\\x4d\\xc8\\xb4\\xfc\\x51\\xa6\\x68\\x1f\\x86\\x6c\\\n\\x88\\x39\\x6f\\x2f\\x5e\\x4c\\x76\\xae\\x5d\\xfb\\x2c\\x11\\xb3\\x71\\xea\\x54\\\n\\x6a\\x62\\xfa\\xac\\xe4\\xd0\\x74\\xd5\\x02\\xde\\x1e\\x18\\xb0\\x2e\\x46\\x6c\\\n\\xad\\xac\\xb8\\x66\\x7d\\x8e\\x78\\x06\\xcf\\x8a\\x81\\xfb\\x95\\x7b\\x13\\xc5\\\n\\xb8\\xaf\\xd2\\x29\\x18\\x69\\x9e\\x11\\xcf\\xea\\x9b\\xf8\\xae\\x52\\x6b\\xa2\\\n\\x88\\xc6\\x86\\x91\\x4e\\x45\\xcf\\x98\\x71\\xb8\\x71\\xf2\\xa4\\xad\\x89\\x6d\\\n\\x4d\\xbf\\xd8\\xf8\\xf3\\xf8\\xf1\\x6f\\xd2\\x69\\x27\\x9b\\x41\\xc8\\x9a\\x57\\\n\\x44\\xe4\\x58\\x3f\\x76\\x0c\\x06\\xf6\\x2a\\x71\\xc4\\x91\\xe9\\xb6\\x82\\x37\\\n\\x06\\x3b\\xaa\\x67\\x48\\x0c\\xb1\\x01\\x21\\x27\\xce\\x89\\x5a\\x66\\x71\\xf1\\\n\\xa8\\xd9\\x5c\\x83\\x58\\x1c\\x4b\\x3c\\x33\\x62\\x88\\x5c\\xc8\\x29\\xcd\\xf9\\\n\\x55\\xcb\\x2c\\x2e\\x44\\xe4\\x26\\xc4\\x66\\xa7\\xef\\xb8\\x18\\x7e\\x16\\xb9\\\n\\xd4\\xc0\\x4d\\x2d\\xb3\\xb8\\x10\\xa1\\xe9\\xee\\xfb\\xfe\\xf2\\xe5\\x43\\x26\\\n\\x8c\\x8b\\xe1\\x67\\x91\\x0b\\x39\\x91\\x5b\\xcb\\x2c\\x2e\\x6a\\x03\\x27\\x44\\\n\\x19\\x53\\x18\\x7f\\xf5\\x90\\xb3\\x12\\x53\\xf8\\xd3\\x26\\x72\\xfe\\xfc\\x21\\\n\\x13\\x26\\xe1\\x8b\\xb3\\x67\\xcd\\xc0\\x4a\\x6c\\x22\\xa5\\x1d\\x63\\x84\\x3f\\\n\\x68\\x99\\xc5\\x45\\x7a\\x90\\xc6\\x95\\x54\\x7d\\x90\\x8e\\x87\\x88\\x6d\\xe3\\\n\\x8d\\x99\\xf8\\xaf\\xdc\\xd5\\xab\\x9f\\xfe\\xca\\xc9\\x9b\\xfd\\xb3\\xa6\\x5f\\\n\\x7c\\xe0\\x02\\x55\\x04\\xbf\\x83\\xf0\\x89\\x2e\\x13\\x96\\x97\\xcd\\xbc\\xb7\\\n\\x95\\xbb\\x60\\x4d\\x2f\\x52\\xe5\\x3f\\x71\\x7a\\x9d\\x25\\x46\\x78\\x06\\xe5\\\n\\x52\\xde\\x3c\\x33\\x0f\\x39\\xc4\\xc0\\xef\\x34\\x6d\\xb5\\x80\\xcb\\x50\\x11\\\n\\xff\\xf1\\x42\\x55\\xa6\\x73\\xc8\\x9a\\x88\\x98\\xa1\\x69\\x5b\\xdd\\x0b\\x55\\\n\\x83\\x5e\\xac\\xa6\\xd3\\x39\\xbd\\xd2\\x3f\\x73\\xe6\\xe3\\x95\\xbe\\x18\\x85\\\n\\xeb\\x7c\\x1c\\x92\\xed\\x4a\\x3f\\xdd\\x6d\\xf5\\x4a\\x1f\\xcf\\xfc\\xd1\\x6c\\\n\\x7e\\xab\\x69\\xfe\\x7f\\xa4\\x02\\x6a\\x06\\x53\\x6d\\x1b\\xc0\\x0b\\xaa\\x99\\\n\\x4f\\xb5\\x6d\\x00\\x1b\\x30\\xec\\x3d\\x7c\\xe8\\xae\\x41\\xc6\\xdd\\xbb\\x77\\\n\\x35\\xf2\\x30\\x76\\xef\\xdd\\x73\\xe3\\x8d\\xc8\\x3b\\x82\\x5e\\x2f\\xe9\\xde\\\n\\xba\\xe5\\xc6\\x1b\\xf7\\x1f\\x3f\\xd6\\xe0\\x01\\x0e\\xb6\\xb7\\x93\\xee\\xea\\\n\\xaa\\x1b\\x6f\\xec\\x3f\\x7f\\xae\\xd1\\x03\\xf4\\x5f\\xbd\\x4a\\x76\\xae\\x5f\\\n\\x77\\xe3\\x53\\xde\\xb8\\x91\\x1c\\xbc\\x79\\xa3\\xd1\\x03\\xec\\x3f\\x7b\\x16\\\n\\x66\\x60\\x7f\\x6b\\xcb\\x4f\\xac\\xc4\\x8f\\xc6\\x8f\\xcf\\x62\\xff\\xc9\\x13\\\n\\x37\\xde\\x08\\x93\\x60\\x56\\x16\\x7b\\x0f\\x1e\\xb8\\xf1\\xc6\\xdc\\x66\\xc9\\\n\\xf7\\x5e\\xbc\\x11\\x79\\x47\\x10\\xd2\\x2c\\xd1\\x91\\x85\\x35\\xab\\xd0\\xc0\\\n\\x83\\x6e\\x37\\xe9\\xb6\\xdb\\x6e\\x62\\x23\\x3a\\x91\\x05\\x3a\\x86\\xce\\x79\\\n\\xf1\\x29\\xa5\\xe3\\xe8\\x7c\\x16\\x78\\x43\\xdc\\x78\\x65\\x6e\\xb3\\xe4\\x8d\\\n\\xf4\\xe2\\x8d\\xb9\\xcd\\x2a\\x9a\\x59\\x32\\x83\\x3c\\x58\\xb3\\x0a\\x0d\\xdc\\\n\\xbb\\x7f\\x7f\\x24\\xe9\\x30\\x31\\x3e\\x82\\x7e\\x3f\\xd9\\xbd\\x73\\xc7\\x8d\\\n\\x37\\xf6\\x3a\\x1d\\x0d\\x1e\\x20\\xba\\x59\\xaf\\x5f\\x17\\x37\\xeb\\xe5\\x4b\\\n\\x8d\\x1e\\x60\\x1a\\x33\\xab\\xd0\\xc0\\xe1\\x84\\x59\\x42\\x2c\\x44\\x67\\x01\\\n\\x73\\xbc\\x78\\x23\\xcc\\x85\\xc9\\x59\\x14\\x36\\x6b\\x6d\\x4d\\x23\\x87\\x80\\\n\\x66\\xdd\\xbe\\xed\\xc6\\x1b\\xa7\\xda\\xac\\xcc\\xcc\\x9a\\xc8\\xc0\\x69\\x2f\\\n\\xc8\\x6e\\xbc\\x32\\x6d\\xd6\\xce\\x8e\\x46\\x0f\\x50\\xd8\\x2c\\x31\\x37\\xaa\\\n\\x59\\x79\\x33\\x2b\\xd3\\xac\\x68\\x03\\xcb\\x58\\x90\\xbd\\x78\\xa3\\xdb\\x2c\\\n\\x99\\x96\\x51\\xcd\\xda\\xdc\\xf4\\xe3\\x95\\xe3\\xcc\\xac\\x28\\x03\\xcb\\x5a\\\n\\x90\\xf3\\x18\\xdd\\x2c\\xd9\\x58\\xb2\\x48\\x9b\\x75\\xf3\\xa6\\x1b\\x6f\\xc4\\\n\\xda\\x98\\x45\\xde\\xcc\\x1a\\xdf\\xc0\\xbc\\xdd\\xb3\\x68\\x41\\x96\\x1f\\x3d\\\n\\xd5\\xdd\\x33\\xf6\\xa8\\x33\\xe5\\x73\\xe9\\xd8\\x06\\x46\\x2f\\xc8\\x32\\x6d\\\n\\xb2\\x08\\x3a\\xea\\x78\\xbb\\x67\\xec\\x51\\xa7\\x84\\x73\\xe9\\x58\\x06\\x96\\\n\\xbd\\x20\\x67\\xe9\\x36\\x4b\\x36\\x92\\x69\\xec\\x9e\\x23\\xcc\\x9b\\x59\\x05\\\n\\xcd\\x0a\\x37\\x70\\x92\\xdd\\x33\\xe6\\xa8\\x93\\xd7\\x2c\\x39\\xca\\x78\\xf1\\\n\\xc6\\xdc\\x66\\x95\\x74\\x2e\\x0d\\x36\\x30\\x7a\\xf7\\xf4\\x16\\xe4\\x90\\xdd\\\n\\x53\\x0e\\xc7\\x59\\x94\\xd6\\xac\\xd8\\x73\\xa9\\x8c\\x07\\x19\\xc8\\x5a\\x90\\\n\\x8d\\xb3\\x72\\x51\\xe0\\xc6\\x2b\\xad\\x59\\x85\\x06\\x32\\x17\\x64\\x30\\xb7\\\n\\x59\\x65\\x1d\\x75\\x26\\x9c\\x59\\x85\\x06\\x32\\x17\\xe4\\xdc\\x66\\xc9\\x1b\\\n\\xe9\\xc5\\x1b\\x73\\x9b\\x55\\xd6\\xb9\\x74\\x68\\x66\\x15\\x1a\\x58\\x33\\x8c\\\n\\x6a\\xdb\\x00\\x5e\\x50\\xcd\\x7c\\xaa\\x6d\\xc5\\x58\\xfd\\xa9\\x95\\x80\\x1f\\\n\\xfe\\xbe\\xe4\\xd2\\xc6\\x35\\x7c\\x6e\\x40\\xd3\\x45\\x2b\\x44\\x06\\x4d\\x17\\\n\\xad\\x10\\x19\\x34\\x5d\\xb4\\x42\\x64\\xd0\\x74\\xd1\\x0a\\x91\\x41\\xd3\\x45\\\n\\x2b\\x44\\x06\\x4d\\x17\\xad\\x10\\x19\\x34\\x5d\\xb4\\x42\\x64\\xd0\\x74\\xd1\\\n\\x0a\\x91\\x41\\xd3\\x45\\x2b\\x44\\x06\\x4d\\x17\\xad\\x10\\x19\\x34\\x5d\\xb4\\\n\\x42\\x64\\xd0\\x74\\xd1\\x0a\\x91\\x41\\xd3\\x45\\x2b\\x44\\x06\\x4d\\x17\\xad\\\n\\x10\\x19\\x34\\x5d\\xb4\\x42\\x64\\xd0\\x74\\x85\\x16\\x9a\\x57\\x7a\\x9a\\x40\\\n\\x1b\\x57\\x1b\\xe2\\x11\\x5a\\x68\\x5e\\xe9\\x69\\x02\\x6d\\x5c\\x6d\\x88\\x47\\\n\\x68\\x21\\x6f\\x6c\\x96\\x19\\xaa\\x4b\\x6d\\x88\\x47\\x68\\x21\\x6f\\x6c\\x96\\\n\\x19\\xaa\\x4b\\x6d\\x88\\x47\\x68\\x21\\x6f\\x6c\\x96\\x19\\xaa\\x4b\\x6d\\x88\\\n\\x47\\x68\\x21\\x6f\\x6c\\x96\\x19\\xaa\\x4b\\x6d\\x88\\x47\\x68\\xa1\\x79\\xa5\\\n\\xa7\\x09\\xb4\\x71\\xb5\\x21\\x1e\\xa1\\x85\\xe6\\x95\\x9e\\x26\\xd0\\xc6\\xd5\\\n\\x86\\x78\\xd0\\x0a\\x91\\x41\\xd3\\x45\\x2b\\x44\\x06\\x4d\\x17\\xad\\x10\\x19\\\n\\x34\\x5d\\xb4\\x42\\x64\\xd0\\x74\\xd1\\x0a\\x91\\x41\\xd3\\x45\\x2b\\x44\\x06\\\n\\x4d\\x17\\xad\\x10\\x19\\x34\\x5d\\xb4\\x42\\x64\\xd0\\x74\\x59\\xa2\\x22\\x6a\\\n\\xf8\\xdc\\xc0\\xd3\\xe0\\x51\\xc3\\xe3\\xe1\\x25\\xf5\\xa8\\xe1\\x73\\x03\\x4f\\\n\\x83\\x47\\x0d\\xaf\\x51\\x63\\x26\\xb1\\xb4\\xf4\\x1f\\x10\\x55\\x5c\\xbf\\x48\\\n\\x7d\\xdf\\x77\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x0f\\x61\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x64\\x00\\x00\\x00\\x64\\x08\\x06\\x00\\x00\\x00\\x70\\xe2\\x95\\x54\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0e\\xc3\\x00\\x00\\x0e\\xc3\\x01\\xc7\\x6f\\\n\\xa8\\x64\\x00\\x00\\x0e\\xf6\\x49\\x44\\x41\\x54\\x78\\x5e\\xed\\x9d\\xd9\\x6f\\\n\\x14\\xc9\\x19\\xc0\\x57\\x91\\xa2\\x3c\\xe4\\xfa\\x07\\xa2\\x3c\\x44\\x51\\x5e\\\n\\x22\\x45\\x89\\x94\\xbc\\xe4\\x2f\\x88\\xf2\\x1e\\x29\\x91\\xa2\\x3c\\xae\\xb4\\\n\\x8c\\x0d\\xec\\xb2\\x0e\\x7b\\xb0\\x18\\xf6\\x0a\\x2c\\x63\\x83\\x8d\\x8d\\xef\\\n\\x39\\x7c\\x01\\xbe\\x6d\\x30\\x3e\\xc6\\xe7\\xf8\\xb6\\x31\\x36\\xc6\\x80\\x8d\\\n\\xf1\\x7d\\x02\\xbe\\x8d\\x8d\\xef\\x2f\\xf5\\xb5\\xa7\\x7b\\xaa\\xba\\x6b\\x66\\\n\\xba\\x67\\x7a\\x66\\xda\\x66\\x3e\\xe9\\xa7\\x5d\\xba\\xaa\\xab\\xba\\xbf\\x9f\\\n\\xbb\\xaa\\xbb\\x67\\xba\\xe7\\x83\\x48\\x44\\x22\\x12\\x91\\x88\\x44\\x24\\x22\\\n\\x11\\x89\\x48\\x18\\x39\\xcc\\xd1\\xf6\\x3f\\x99\\xa3\\x2c\\x97\\xe3\\x4c\\xd6\\\n\\x42\\xb3\\xc9\\xea\\x38\\x8e\\xc4\\x99\\x2c\\x0f\\xe2\\xa2\\xac\\xd7\\xe2\\x4e\\\n\\x65\\xfc\\xd6\\xb5\\x5b\\xc7\\x2f\\x6e\\x9c\\xb6\\xff\\xda\\x1c\\x65\\xad\\x24\\\n\\x3b\\x02\\x27\\x05\\x22\\x67\\x9b\\xfc\\x61\\xfd\\xd3\\xb5\\x8b\\xc7\\x27\\xe2\\\n\\x4d\\x99\\x7f\\x8e\\x8b\\xb2\\xbc\\xe2\\xed\\xd4\\xb1\\xc7\\x64\\xd9\\xf9\\xe1\\\n\\x23\\xdb\\x1f\\x5c\\xbb\\x6a\\xfc\\xb8\\xf6\\x91\\xe5\\x2f\\x64\\xc3\\x57\\x15\\\n\\x3b\\x42\\x48\\x8e\\xc9\\x85\\x47\\xb5\\x6d\\xba\\xd3\\x57\\xd7\\x05\\x8f\\x1b\\\n\\xfb\\x29\\xfa\\x84\\x65\\x4c\\x1d\\x47\\x3b\\xf4\\x93\\xe5\\x6c\\x3d\\x25\\xf2\\\n\\xf5\\x90\\xce\\x7b\\xcd\\x70\\xeb\\x7c\\xae\\x7b\\x5f\\x4c\\x16\\xab\\x6b\\x77\\\n\\x8d\\x1d\\x72\\x19\\xd7\\x4f\\xdb\\xc0\\x96\\xd1\\x26\\xed\\x48\\xda\\x97\\xf9\\\n\\xb0\\xbb\\x32\\xa6\\x2b\\xfb\\xeb\\xb3\\x00\\xef\\x56\\x29\\x56\\x60\\x7f\\x6d\\\n\\x86\\xa9\\xb3\\xb7\\x3a\\x01\\x87\\x5b\\xcb\\xb2\\x7a\\x4a\\xb0\\x2d\\x7a\\x3d\\\n\\x89\\xd5\\x31\\x18\\x6c\\xe9\\x93\\xf6\\x83\\xcc\\x89\\x83\\xae\\x5d\\x36\\x6e\\\n\\xf0\\x64\\x94\\xd4\\x8d\\x41\\x59\\xcb\\x74\\xd0\\x84\\x84\\x4a\\xc6\\xe1\\xe6\\\n\\x1b\\x98\\x79\\x36\\xea\\x16\\x62\\xb2\\x4c\\xba\\x76\\xdb\\x98\\xe1\\x49\\x86\\\n\\x63\\x6c\\x27\\x68\\x42\\x42\\x29\\x03\\xeb\\x1c\\x1b\\x21\\xde\\x64\\x04\\x4b\\\n\\x48\\xa8\\x65\\x20\\xc7\\x42\\x88\\x2f\\x19\\xc1\\x10\\x12\\x0e\\x19\\x88\\xe1\\\n\\x85\\xa8\\x91\\xa1\\xb7\\x90\\x70\\xc9\\x40\\x0c\\x2d\\x44\\xad\\x0c\\x3d\\x85\\\n\\x84\\x53\\x06\\x62\\x58\\x21\\x5a\\x64\\x20\\xfe\\x08\\xd9\\xdb\\x98\\x83\\xbd\\\n\\xb5\\x29\\xe9\\xdf\\xe1\\x96\\x81\\x68\\x15\\x72\\x25\\x3a\\xfd\\x57\\xe4\\x7a\\\n\\xe5\\x73\\x72\\x8a\\x5c\\x42\\xd6\\xa9\\x35\\x47\\x59\\x6d\\x71\\x51\\xb6\\xff\\\n\\x24\\x44\\x27\\xfc\\xc4\\x55\\x25\\xf0\\xd0\\x2a\\x03\\xf1\\x47\\xc8\\xe1\\xfe\\\n\\x0e\\x1c\\xec\\xac\\x0b\\xff\\x6f\\x04\\x19\\x88\\x16\\x21\\xa4\\xfc\\x93\\xb8\\\n\\x28\\xcb\\x3b\\xb1\\xbe\\x8c\\x09\\x73\\xb4\\xe5\\xaf\\xae\\xaa\\xfe\\x87\\x3f\\\n\\x32\\x10\\xad\\x42\\xf6\\xb7\\x96\\x40\\x8c\\x83\\xcd\\x45\\x59\\x62\\xc2\\x23\\\n\\x03\\x51\\x2b\\x84\\x94\\x99\\xc5\\x7a\\x9e\\x21\\xb2\\x4e\\x59\\xff\\xe6\\x5a\\\n\\x45\\x7b\\xf8\\x2b\\x03\\x51\\x2b\\x04\\x87\\xa9\\xc3\\xbd\\x6d\\x97\\x0a\\x2a\\\n\\xf6\\x77\\x01\\xb6\\xd7\\x49\\x52\\xf4\\x93\\xb1\\xb7\\x31\\x7f\\xf4\\xff\\x2a\\\n\\x65\\x20\\x6a\\x84\\xc8\\x65\\x24\\x47\\x5b\\xa0\\xfe\\x93\\x4c\\xe8\\xfc\\x34\\\n\\x03\\xee\\x7d\\x9c\\x05\\xf1\\x54\\x99\\xdf\\x52\\x02\\x91\\x81\\xa8\\x16\\xb2\\\n\\x3e\\x03\\x87\\xbb\\x5b\\x2e\\x0b\\x54\\x90\\xe1\\x0b\\xb6\\xd7\\xf4\\x93\\x41\\\n\\xfa\\x01\\x38\\x24\\xff\\x9d\\x56\\x2d\\x03\\xf1\\x25\\x44\\x2e\\xc3\\x76\\xda\\\n\\x02\\xb3\\xe7\\xd3\\x60\\xe9\\x33\\x37\\xcf\\x62\\xd2\\x21\\x31\\xda\\x72\\xe8\\\n\\xae\\xa7\\x51\\x0a\\xde\\xff\\x37\\x9b\\xac\\x4b\\x62\\x03\\x5a\\x65\\x20\\x5a\\\n\\x87\\xac\\x03\\x72\\x24\\x48\\xb1\\xb3\\x41\\x92\\xa1\\xef\\x30\\x75\\xb8\\xe7\\\n\\x92\\xbe\\x4f\\x8e\\x46\\xce\\x3a\\x9e\\xf0\\x26\\x84\\x27\\x63\\xee\\x7c\\x3a\\\n\\x23\\x43\\xe4\\xf9\\x7f\\xfd\\x94\\x12\\x1b\\x1b\\xfb\\x23\\x72\\x86\\xd0\\x27\\\n\\xae\\xe8\\x8f\\x0c\\xa4\\xb4\\x71\\x52\\xda\\xd0\\xcc\\x8b\\xb7\\x15\\x09\\xa2\\\n\\xc1\\x04\\x0a\\x09\\x38\\xd8\\x3f\\x3a\\x32\\x74\\x96\\xb1\\xf7\\x76\\xfe\\x48\\\n\\x86\\x18\\x82\\x70\\xfe\\xfa\\x72\\x3c\\x09\\x21\\xff\\x8e\\x13\\x97\\x23\\xd6\\\n\\x33\\x9e\\x65\\x88\\xf8\\x25\\xc5\\x1c\\x95\\xf5\\x2f\\x69\\x85\\x68\\x2b\\x14\\\n\\xd7\\xbc\\xe4\\x26\\xdc\\x1b\\xd5\\x4f\\xd7\\x20\\x3d\\xae\\x5a\\xda\\xd8\\xa2\\\n\\x84\\x72\\x45\\x92\\x44\\x24\\x19\\x08\\x26\\x6a\\x9b\\x24\\x55\\x2f\\x19\\x6b\\\n\\x93\\x70\\x40\\x86\\x3d\\x1c\\xaa\\x14\\x81\\xf3\\x16\\x96\\x71\\xda\\xa1\\xe1\\\n\\x09\\x91\\x1f\\x19\\x6a\\x64\\x88\\x68\\x96\\x42\\xce\\xa1\\x4b\\xe9\\xce\\xf4\\\n\\x60\\xa0\\xb1\\x83\\x4d\\x94\\x0b\\x46\\x86\\x80\\x7e\\x47\\x86\\x70\\xd6\\x76\\\n\\x78\\xe0\\xca\\xbe\\x87\\x38\\x24\\xa2\\x70\\xfe\\xe2\\xb4\\x27\\x22\\x17\\x22\\\n\\x97\\x91\\x44\\x26\\xf0\\x39\\x4e\\xe2\\xbd\\xa1\\x49\\x0a\\xa9\\x30\\xeb\\xae\\\n\\x18\\x38\\x45\\xc9\\xf7\\x61\\x77\\xd9\\x9d\\x28\\x29\\x61\\x41\\x94\\x21\\x80\\\n\\x47\\x07\\xb9\\xa6\\xf1\\x1a\\x2a\\x8e\\x12\\x46\\x48\\x14\\x9d\\x44\\x37\\x0f\\\n\\x3e\\xce\\xe4\\x26\\xde\\x1b\\xaa\\xa5\\xc4\\x99\\xac\\x7b\\x74\\x67\\xfe\\x92\\\n\\xfa\\x59\\x1e\\xb4\\x95\\x37\\xc1\\xce\\xd2\\xa8\\x22\\x59\\x41\\x97\\x81\\x88\\\n\\xa7\\xb6\\x78\\xea\\x7c\\xb0\\xe7\\x32\\xe0\\x8a\\x03\\xf1\\x94\\x9a\\xdf\\x26\\\n\\x0d\\x2d\\x84\\x21\\xda\\xca\\xc8\\x09\\x9a\\x14\\xba\\x93\\x89\\xfe\\x3e\\x58\\\n\\x1c\\x7d\\xaa\\x99\\x95\\xe9\\x21\\xee\\x51\\x81\\x84\\x54\\x86\\x58\\x97\\x9e\\\n\\x47\\x70\\x98\\x7a\\xe7\\x7b\\xee\\x10\\xe1\\x09\\x49\\x89\\x2d\\x86\\xba\\xe6\\\n\\x31\\xb8\\x75\\xa1\\x70\\x85\\x5e\\xae\\x8b\\x14\\x93\\xe5\\x6d\\xfc\\x29\\xdb\\\n\\xef\\x5d\\x3a\\x58\\x21\\xcb\\x13\\xcf\\xf9\\x3b\\xec\\x27\\x61\\x91\\x21\\xb2\\\n\\xf7\\xee\\x48\\x88\\x8f\\x39\\x43\\x4e\\xe3\\x5d\\xa7\\x94\\x0f\\x04\\x65\\x34\\\n\\xb4\\x4f\\x83\\xb3\\x77\\x1e\\x1a\\x3b\\xa6\\x82\\x22\\x85\\x5c\\x72\\x34\\xb9\\\n\\x74\\x04\\x4f\\x48\\x58\\x65\\x08\\x90\\xa3\\x02\\x87\\x2e\\x6e\\x19\\x1f\\x67\\\n\\x51\\xab\\x94\\x0b\\x44\\x90\\x41\\x24\\xa0\\x0c\\x11\\xbd\\xa4\\xf4\\x91\\xab\\\n\\x7a\\xba\\x0d\\xb3\\xc9\\xfe\\xbb\\xa0\\x09\\x09\\xbf\\x0c\\xed\\x38\\x8b\\xdd\\\n\\x5f\\xd2\\x40\\x52\\x2e\\x16\\x1d\\xc9\\x78\\x38\\x07\\xf5\\xad\\x13\\x41\\x91\\\n\\x92\\x49\\x2e\\x2c\\xdd\\x6d\\x64\\xfd\\x3b\\x28\\x42\\x4e\\x8a\\x8c\\xc6\\xf6\\\n\\x29\\x21\\xf1\\x69\\x5f\\x97\\x0a\\xcb\\xb2\\x13\\x1c\\xba\\x4b\\xc9\\x3b\\x93\\\n\\x25\\xad\\x6b\\x36\\xd9\\x3e\\xd4\\x5d\\xc8\\x89\\x90\\x11\\xeb\\x96\\x91\\x7a\\\n\\xa9\\x44\\x5a\\x7e\\xe3\\x6c\\x0e\\x23\\x24\\x50\\x29\\xf3\\xe7\\xd3\\xe0\\x26\\\n\\xb9\\x10\\x97\\xd6\\x3d\\x65\\xf9\\xbb\\x2e\\x42\\x1e\\xd5\\xb6\\x42\\x8d\\xbd\\\n\\x1a\\x6a\\xb3\\x1d\\xe0\\xc8\\x6d\\x64\\xa8\\xb5\\xd7\\x0a\\x65\\x6e\\x6a\\xc0\\\n\\x91\\xd3\\xa0\\xa8\\x27\\x07\\xdb\\xc2\\xfa\\x2d\\xc5\\x0d\\xb0\\xf9\\x6a\\xc4\\\n\\xdd\\x1f\\x91\\x31\\xd4\\x39\\xc0\\x5d\\x47\\x20\\xaf\\x09\\x26\\x07\\x5e\\x70\\\n\\x13\\xcf\\xa3\\xc5\\x83\\x8c\\xe6\\xee\\x59\\x48\\xbb\\x7c\\x74\\x64\\x88\\xe4\\\n\\x67\\x38\\x15\\x42\\x02\\x91\\x52\\x7a\\xd6\\x7d\\x74\\xe0\\x99\\x56\\xd2\\xa9\\\n\\xa4\\x9f\\x05\\x2c\\x64\\xb4\\xf7\\x91\\xbb\\xd1\\x20\\xd1\\x52\\xd4\\x70\\xd4\\\n\\x1f\\x91\\xb1\\x3c\\x39\\x21\\xdc\\xde\\xe1\\xd5\\x13\\x49\\xf8\\xd8\\x4e\\xea\\\n\\xca\\x3f\\x5f\\x51\\xd2\\x52\\xd2\\xce\\xac\\x87\\x32\\x1a\\xda\\x26\\x85\\x24\\\n\\x57\\x94\\x3f\\x61\\xca\\x72\\x53\\x1a\\xc8\\x5c\\xa2\\x94\\x21\\xa2\\x55\\x4a\\\n\\x05\\x2d\\x03\\x31\\x59\\x2f\\x09\\x32\\x30\\xe8\\x02\\xad\\x42\\xa6\\x06\\xfa\\\n\\x7d\\x26\\x28\\x50\\xf0\\xeb\\x9d\\xe2\\x30\\xb5\\xbe\\x30\\x0f\\x37\\xce\\xd8\\\n\\xb9\\xf5\\x44\\x92\\x63\\xf2\\x60\\x6f\\x7d\\x89\\x2b\\x41\\xa4\\x55\\x26\\x23\\\n\\x31\\x26\\x5f\\x92\\x81\\x34\\xb4\\x4d\\x08\\xcb\\xb0\\x2c\\x2f\\xb5\\xc9\\xab\\\n\\x0c\\x11\\xb5\\x52\\x38\\x32\\xea\\xd3\\x3e\\x4c\\xfb\\xb1\\x4b\\x47\\x60\\x42\\\n\\x70\\x9c\\x1f\\xef\\x1f\\x16\\x76\\x10\\xc7\\x62\\xa4\\xb9\\xa0\\x11\\x9a\\x0a\\\n\\xea\\x29\\xc8\\x5f\\x57\\x71\\xab\\x54\\xee\\x89\\xe6\\xc2\\x26\\xd9\\x7a\\xf5\\\n\\xf0\\xb8\\xbe\\x1d\\xb6\\x97\\x47\\x99\\x39\\x63\\x6e\\x68\\x0c\\x5a\\x4b\\x3b\\\n\\xb8\\x6d\\xb4\\x57\\x74\\xc0\\xe2\\xf8\\x34\\x93\\x7c\\x39\\xad\\xa5\\xac\\x0c\\\n\\x91\\x3b\\x56\\xb2\\x8d\\x54\\x82\\x9b\\xba\\x66\\xa0\\xce\\x39\\xce\\x2c\\x93\\\n\\xca\\x3a\\xa7\\xe1\\x4e\\x66\\x0b\\xdc\\xb5\\xb5\\x41\\x53\\xcf\\x9c\\xb4\\xdc\\\n\\x97\\x14\\xb9\\x0c\\x72\\xfd\\xe1\\xbc\\x76\\x2e\\xfb\\xa7\\x2e\\x15\\x47\\x41\\\n\\x57\\xd0\\x22\\xe4\\x38\\x4e\\xe0\\x72\\x19\\xf1\\xb2\\xa3\\x5b\\x2e\\x85\\x07\\\n\\xca\\x48\\xfb\\xa6\\x4c\\x5a\\xa7\\x38\\xaf\\x9b\\x29\\xf7\\x24\\x45\\x95\\x0c\\\n\\x0c\\xba\\x92\\x5a\\x21\\x27\\x41\\x86\\xfd\\xeb\\x6c\\x98\\xeb\\x2b\\x04\\x4b\\\n\\x2c\\x3b\\x04\\x7a\\x93\\x82\\x47\\x0d\\x2d\\x03\\x29\\xb9\\xdb\\xab\\xa8\\xc7\\\n\\x93\\x42\\xe3\\x51\\x06\\x06\\x5d\\x51\\x8d\\x10\\xb9\\x8c\\x37\\xe3\\x93\\xd0\\\n\\xaf\\xe3\\x23\\x01\\x02\\x8e\\x36\\xe8\\x6f\\xe8\\xe5\\xae\\x83\\x0c\\x77\\x3d\\\n\\x85\\xfd\\x0d\\xef\\xf3\\x04\\x0d\\x0e\\x71\\xf4\\x7e\\xa2\\x8c\\xd5\\xe1\\x22\\\n\\xd8\\x99\\x2e\\x81\\x95\\xa1\\x62\\xd5\\x52\\xec\\x89\\x0e\\xa6\\x5e\\x76\\x62\\\n\\x9d\\xc7\\xf9\\xc5\\x93\\x14\\xaf\\x32\\x30\\xe8\\xca\\xbe\\x84\\xf0\\x64\\x5c\\\n\\x3f\\xed\\x7d\\x92\\x0d\\x16\\xf7\\x33\\x1d\\xcc\\xb6\\x78\\xa2\\xad\\x8c\\x27\\\n\\xa3\\x58\\x90\\x21\\xa2\\x56\\x4a\\xc6\\xf7\\x15\\x52\\xb9\\x37\\x19\\x02\\xa4\\\n\\xcc\\x4e\\x2e\\x26\\xe9\\x36\\x51\\x86\\x74\\x7a\\xeb\\x29\\xe8\\x15\\xbc\\x09\\\n\\xe1\\x0d\\x53\\x23\\xdd\\xe4\\x2c\\x8b\\x5a\\x3f\\x94\\xe4\\x5d\\x2d\\x93\\x6d\\\n\\x8f\\x12\\x35\\x32\\xb4\\x48\\xa9\\x6d\\x7c\\x09\\xb6\\xf8\\x6a\\x28\\xb0\\x93\\\n\\x93\\x18\\x0f\\x32\\x70\\x8e\\x11\\x64\\xc8\\x8e\\xa6\\xb8\\x28\\x4b\\xb3\\x4f\\\n\\x19\\x18\\xf4\\x4a\\x9e\\x84\\x78\\x9a\\x33\\xf0\\xb3\\x8f\\x66\\x72\\x36\\x54\\\n\\x70\\xbd\\x8c\\x50\\x0e\\x85\\x09\\xf7\\x09\\x95\\x5e\\x29\\xb8\\x51\\xe1\\xaa\\\n\\xaf\\xa4\\xf0\\x86\\xef\\xf5\\x91\\xb2\\x94\\x2a\\x58\\x18\\x19\\x97\\x6d\\x13\\\n\\x8b\\x52\\x86\\xdd\\xa3\\x0c\\x91\\xa5\\x3e\\x3b\\x58\\x2e\\xd0\\xf7\\x97\\xd4\\\n\\x4d\\xf4\\x48\\x13\\xb9\\x98\\xcc\\xfa\\xa1\\x52\\x58\\x27\\xf9\\x8b\\x02\\xa6\\\n\\x0d\\x9f\\xc3\\x14\\x1d\\xf4\\x8a\\x3c\\x21\\x9e\\x64\\xd0\\x75\\x8c\\x36\\x81\\\n\\xb7\\x95\\x6b\\x97\\xf1\\xee\\x85\\x1d\\xb6\\x9e\\xa4\\xc0\\x62\\x57\\xaa\\x66\\\n\\x29\\x28\\x83\\x1e\\xce\\x68\\x34\\xc9\\xc0\\xa0\\x57\\x96\\x0b\\x39\\x8e\\x32\\\n\\xda\\xcb\\x3b\\x99\\x84\\xd8\\x2e\\x7b\\x1e\\xa6\\x44\\x44\\x19\\x22\\x9a\\xa4\\\n\\x3c\\x9c\\x83\\xcc\\x2b\\xf7\\x98\\xba\\x22\\xaa\\xe6\\x0c\\x79\\xd0\\x0d\\xd0\\\n\\x42\\x4e\\x84\\x8c\\x4b\\xda\\x65\\x68\\x95\\x52\\x55\\xf5\\x9c\\xa9\\x43\\xd1\\\n\\xa2\\x59\\x06\\x06\\xdd\\x88\\x28\\xe4\\x7d\\x97\\x21\\xa2\\x46\\x0a\\x7e\\x66\\\n\\x12\\xaf\\xbc\\x9d\\xe3\\x9f\\x0c\\x0c\\xba\\x21\\x14\\x72\\x2c\\x65\\x54\\xb0\\\n\\x73\\x86\\xf5\\x92\\xfa\\x39\\xc3\\x17\\x5e\\xa5\\x90\\xb3\\xa9\\xec\\x9b\\x75\\\n\\x4c\\x19\\xa1\\xe5\\x6a\\x4c\\xe6\\xcf\\x5d\\xe9\\xd5\\x1e\\x74\\x63\\x2b\\xd3\\\n\\xa3\\xb2\\x9d\\x3d\\x59\\x32\\x86\\x1a\\x0b\\xe0\\x61\\xc5\\x6d\\xd8\\x78\\xa6\\\n\\x4e\\x86\\x08\\x57\\x8a\\xa5\\x0d\\xb2\\x93\\x74\\x96\\x81\\x41\\x37\\xb8\\x3e\\\n\\x3f\\x4f\\xed\\xac\\x6f\\x19\\xdb\\xcb\\x6f\\x20\\xff\\x5a\\x39\\xbd\\x41\\xba\\\n\\x80\\x77\\x74\\x9b\\x0b\\x5b\\xa9\\x6d\\xe1\\xc3\\x95\\x41\\xae\\x27\\x78\\x32\\\n\\x5a\\x6e\\xdf\\x96\\xea\\xd5\\xa5\\x67\\x70\\x13\\xef\\x0d\\x9e\\x14\\x1a\\xb3\\\n\\xc9\\xd2\\x1a\\xb0\\x0c\\x0c\\xba\\x51\\xb7\\x10\\x75\\x47\\xc6\\x8b\\x9e\\x67\\\n\\xcc\\x46\\xe9\\x49\\x7c\\xb4\\x0d\\x0e\\xde\\x7a\\x3e\\x12\\x3b\\x2a\\xd8\\x39\\\n\\x43\\xad\\x0c\\xa4\\x3a\\x25\\x93\\x9b\\x74\\x5f\\x78\\x92\\xa2\\x9b\\x0c\\x0c\\\n\\xba\\xe1\\x23\\x21\\xea\\x87\\xa9\\xb7\\xaf\\x17\\x20\\xfd\\xc2\\x1d\\x66\\xe3\\\n\\xf4\\xe2\\x7e\\x86\\xe7\\x5b\\x23\\x1d\\xf7\\x64\\x32\\x62\\xc9\\x04\\xae\\x52\\\n\\x86\\xe5\\x62\\x16\\x2c\\xf7\\xa4\\x72\\x13\\xee\\x93\\x81\\x14\\xa8\\x4c\\xcc\\\n\\x64\\xda\\x43\\x19\\x09\\xd1\\x39\\xbf\\x70\\xa5\\x33\\xf0\\xa0\\x1b\\x5f\\x9f\\\n\\x9f\\xd3\\x3c\\x67\\x1c\\x6c\\x2e\\xc3\\xea\\xec\\x1c\\x2c\\x4d\\x8c\\x70\\xbf\\\n\\x44\\xb7\\x38\\xf6\\x14\\x56\\xa6\\x26\\x61\\x75\\x66\\x56\\x35\\x1b\\xaf\\x16\\\n\\xb8\\x7d\\x21\\x81\\xca\\x58\\xea\\xf6\\x5f\\x06\\x1e\\x59\\x74\\x7b\\x71\\x26\\\n\\x6b\\x9b\\xae\\x32\\x30\\xe8\\x0e\\x56\\xa6\\x5e\\x6a\\x92\\x21\\x12\\xaa\\x09\\\n\\x9c\\x2b\\xc3\\x75\\xd7\\x56\\x4e\\x77\\x09\\x7b\\xe4\\x1e\\x0b\\x19\\x18\\x74\\\n\\x27\\xf4\\x85\\xa1\\xd1\\x64\\x74\\xde\\x67\\x65\\xe0\\x8d\\x40\\x4f\\x32\\x90\\\n\\xdc\\xef\\xb2\\xdd\\x75\\x03\\x1c\\xa6\\x6a\\x52\\xd9\\x2f\\xb5\\xa1\\x8c\\x2b\\\n\\x1f\\xa6\\xfd\\xd2\\x95\\x42\\x7d\\x83\\xee\\x48\\x14\\xa2\\x56\\xc6\\xde\\xea\\\n\\x0c\\x34\\xdf\\xad\\xd3\\x7c\\xa3\\xb0\\x28\\xb1\\x12\\x7a\\xaa\\x7b\\xb8\\x6d\\\n\\xf2\\xe8\\xbc\\xdf\\xc5\\x24\\xc4\\x97\\x0c\\xa4\\xaf\\xdc\\x06\\x09\\x67\\xad\\\n\\x90\\xfb\\x8d\\xbe\\x32\\xcc\\x51\\x96\\xf6\\xa0\\xc9\\xc0\\xa0\\x3b\\x43\\x21\\\n\\x5a\\x8e\\x8c\\xe1\\xae\\x87\\xcc\\xc6\\x6a\\xc5\\xd7\\xe7\\xdf\\x08\\x4f\\x06\\\n\\xde\\x2a\\xe7\\x49\\x10\\x91\\x2e\\xfa\\x48\\x42\\x15\\x49\\x56\\x0b\\xca\\x90\\\n\\x0d\\x53\\x41\\x97\\x81\\x41\\x77\\xb8\\x3c\\x39\\xac\\x69\\x98\\x5a\\x18\\x1e\\\n\\x14\\x1e\\x81\\xa3\\xdb\\x50\\xcb\\xcd\\x4f\\x73\\xe0\\xdd\\xd2\\x6b\\x6e\\xfb\\\n\\x22\\x5a\\x64\\xf4\\x57\\xdd\\x81\\xaa\\xf4\\x3c\\x98\\xef\\xb6\\xf1\\x13\\xac\\\n\\x05\\x22\\xa3\\x36\\x35\\x0c\\x32\\x30\\xe8\\x4e\\xd7\\xe6\\xe4\\xb7\\x4d\\x94\\\n\\xc8\\xe7\\x0c\\x94\\xd2\\x5f\\xd7\\xee\\xf3\\x63\\x57\\x9a\\x41\\xe7\\x63\\xd2\\\n\\xd7\\x1c\\xb7\\x7d\\x91\\xce\\x4a\\xf5\\x32\\xe8\\xb3\\xa9\\xfc\\xef\\x2c\\xfc\\\n\\x24\\xab\\x85\\x27\\xc3\\x64\\xe9\\x08\\x89\\x0c\\x0c\\xba\\x63\\xf6\\x4a\\x5d\\\n\\x49\\xa8\\x26\\xf0\\x2e\\x3f\\x65\\x20\\x25\\x66\\xff\\x2e\\xfa\\x04\\x04\\x19\\\n\\xb2\\x09\\x3c\\xca\\xda\\x19\\x32\\x19\\x18\\x74\\xe7\\xde\\x84\\x1c\\x07\\x19\\\n\\xd6\\xaf\\x2c\\x01\\x4d\\xe0\\x8e\\x34\\xf9\\x91\\x61\\x5d\\x0a\\xa9\\x0c\\x0c\\\n\\x7a\\x03\\x3c\\x09\\x09\\x97\\x8c\\xac\\x8b\\xd9\\x61\\x93\\x81\\x90\\xa1\\x8a\\\n\\xfb\\x26\\x87\\xa0\\x06\\xbd\\x01\\x3c\\x21\\x21\\x93\\xf1\\xa0\\x9b\\x49\\x46\\\n\\xb8\\x65\\x20\\x86\\x13\\x12\\x2a\\x19\\xdd\\x1c\\x19\\xcb\\xcf\\xf9\\xd7\\x19\\\n\\x72\\x19\\x81\\x5e\\xf4\\x39\\xd2\\xd9\\x39\\x83\\x7e\\x4d\\xac\\xa1\\x84\\x28\\\n\\x64\\xac\\x4e\\x86\\x48\\x86\\x3d\\x34\\x32\\x08\\x72\\x19\\x39\\xff\\x2b\\x62\\\n\\xae\\xad\\x0c\\x23\\x44\\x2e\\x03\\x5f\\x32\\x86\\xef\\xb6\\xda\\x5d\\x1d\\xd7\\\n\\x55\\x46\\x6f\\x6d\\xaf\\xd4\\xb7\\x88\\xc3\\x9a\\x07\\x03\\xd5\\x77\\x60\\xac\\\n\\xad\\x00\\x16\\xfa\\x8b\\x60\\x73\\xec\\x68\\xd8\\x0a\\x85\\x8c\\x8d\\xf9\\x17\\\n\\xc2\\x93\\xc8\\xe2\\x32\\x43\\x08\\x51\\xc8\\xc0\\xb7\\xf7\\x88\\x4f\\xb4\\xaa\\\n\\x7c\\x3d\\x85\\x2a\\xb6\\x56\\x21\\xf1\\x5c\\x8e\\xd4\\xb7\\x37\\x12\\x3f\\x61\\\n\\x2f\\x3e\\x03\\x95\\x51\\x97\\xce\\xce\\x19\\xa2\\x0c\\xdc\\x5f\\x43\\x09\\xc1\\\n\\x8f\\x70\\x69\\x19\\xbb\\x2b\\xe3\\xec\\xbb\\x43\\x54\\xbc\\x9a\\x42\\x2d\\xf8\\\n\\x59\\x0a\\xdd\\xb7\\x5a\\x74\\x97\\xf1\\x7d\\xa1\\x24\\xc3\\x70\\x42\\xe8\\xbb\\\n\\xbd\\x12\\x38\\x67\\x08\\x52\\x48\\xa8\\x7c\\x1b\\x82\\x1a\\xe6\\x86\\xc7\\xa4\\\n\\x7e\\x6f\\x9e\\xcb\\x86\\x8e\\xf2\\x26\\xa8\\xcb\\xad\\x85\\xd2\\x5b\\xf7\\x20\\\n\\xef\\x6a\\x31\\xa4\\x7e\\x91\\xcf\\xbd\\x2d\\xf3\\xba\\x23\\x78\\x32\\x10\\x63\\\n\\x0b\\xa1\\x27\\xf0\\xdd\\x4d\\x45\\x52\\x03\\x61\\xb8\\xfb\\xa9\\xd4\\xaf\\xfd\\\n\\xdb\\x42\\xb6\\x5f\\x17\\x3b\\xcb\\xa3\\x30\\xf3\\x74\\x40\\xaa\\x87\\xac\\xf6\\\n\\xf2\\x93\\xed\\x0b\\xfc\\x1c\\x9d\\x6e\\x07\\x65\\xac\\xcf\\xb1\\x32\\x10\\xe3\\\n\\x0a\\xd1\\xf9\\x6c\\x4a\\xce\\xc3\\x1a\\xf7\\xd9\\x4c\\xf1\\xcd\\x0a\\x26\\x29\\\n\\x34\\xb8\\x4d\\xf4\\x36\\x76\\xe6\\xa7\\xc3\\xc3\\x82\\x0c\\x81\\x31\\x47\\x1a\\\n\\x37\\xf9\\x72\\xe4\\x32\\xb2\\xbf\\x2f\\xe2\\xca\\x40\\x8c\\x29\\x24\\xc8\\x32\\\n\\x10\\xfa\\x15\\x16\\x8e\\x9c\\x1a\\x45\\x62\\x44\\xe4\\x42\\x18\\xa2\\xad\\x30\\\n\\x52\\xe3\\x5d\\x4a\\x7d\\x06\\x3b\\x4c\\x79\\x93\\x81\\x18\\x4f\\x48\\x08\\x64\\\n\\x20\\x15\\xa9\\x35\\x52\\xbf\\x38\\x7f\\xf0\\x92\\x83\\x6c\\xbd\\x1e\\x81\\x1b\\\n\\x67\\x3d\\x3f\\x83\\xd2\\x6c\\xcb\\xe0\\x8a\\x40\\xea\\x33\\x78\\x47\\xc6\\x30\\\n\\xb7\\x1f\\x11\\x63\\x09\\x99\\x7c\\x1e\\x12\\x19\\x48\\xee\\x95\\x32\\xa9\\xdf\\\n\\x41\\x67\\x27\\x37\\x39\\x22\\x43\\x6d\\xdd\\x50\\x92\\x58\\x2e\\x7d\\x1a\\x99\\\n\\xf1\\x95\\xfb\\x9a\\xe4\\x41\\x32\\xff\\xee\\xae\\x42\\xc6\\x77\\x38\\x67\\x78\\\n\\x97\\x81\\x18\\x4a\\xc8\\xda\\xec\\x14\\x37\\x79\\xc1\\x20\\xe5\\x33\\x77\\x52\\\n\\x27\\x1f\\xf7\\x73\\x93\\xe3\\x89\\xae\\x4a\\xf7\\x70\\x57\\xf4\\x83\\x52\\x48\\\n\\x43\\xa6\\x7f\\x32\\x10\\x43\\x09\\xe1\\xdd\\x5c\\x0c\\x06\\xf8\\x7c\\x20\\xdd\\\n\\x2f\\x73\\x32\\xa1\\x82\\x67\\x4e\\xf7\\x5d\\x61\\xfb\\xa5\\x2c\\xdf\\x32\\x66\\\n\\xd5\\xc9\\x40\\xde\\x4b\\x21\\xcb\\x53\\x33\\x52\\x9f\\x48\\x43\\xbe\\x83\\x9b\\\n\\x1c\\x4f\\xd0\\x49\\xbb\\x15\\xe3\\xfe\\x84\\x50\\x2e\\xc3\\xae\\x51\\x06\\x62\\\n\\x58\\x21\\xf3\\x2f\\xc6\\x21\\xf7\\x7f\\xa5\\x50\\x99\\x55\\xc7\\x7d\\xe2\\x75\\\n\\xa8\\x73\\x90\\xec\\x70\\xb1\\xf0\\xbe\\x10\\x79\\x19\\x82\\x9f\\x87\\xdb\\xbf\\\n\\x2d\\x86\\x27\\xce\\xc7\\x8a\\xb2\\xb1\\x47\\x43\\x52\\x9f\\x22\\x5a\\xa4\\x2c\\\n\\x8e\\x51\\x5f\\x61\\x25\\x67\\x5a\\x6f\\x1f\\xa7\\x40\\xa3\\x4c\\x06\\x82\\xef\\\n\\x56\\xe1\\xbd\\xe9\\xae\\xfb\\x81\\x13\\x6c\\x5f\\x17\\x40\\x4f\\x55\\x8b\\xa2\\\n\\xcc\\xb0\\x42\\x4a\\x93\\xab\\xa4\\xe5\\x23\\x3d\\xcf\\x99\\x84\\x22\\xe9\\x5f\\\n\\xba\\xbf\\x88\\x86\\xdf\\x36\\xa4\\xcb\\xf0\\xcb\\x0b\\x62\\xd9\\xcd\\x73\\x39\\\n\\x4c\\x19\\xf2\\xc8\\xa1\\xbc\\xa9\\x88\\xa8\\x95\\xf2\\xee\\xcd\\x4b\\x66\\x3d\\\n\\xf9\\xd7\\x3b\\x69\\xf0\\xc2\\x52\\xbe\\xae\\x78\\x07\\xe0\\xfa\\x19\\x9b\\xf0\\\n\\x6f\\xba\\xdc\\xb0\\x42\\xee\\xc4\\xb9\\x9f\\x99\\x7b\\xde\\xfe\\x84\\x49\\x28\\\n\\x92\\x14\\xe3\\xfe\\xdc\\xe0\\xcd\\x18\\x7b\\x32\\x80\\xed\\x88\\x65\\x08\\x5d\\\n\\x86\\xd4\\xdf\\x66\\x5f\\xa3\\x47\\xa3\\x56\\x0a\\xf3\\xf3\\x76\\x14\\x38\\x4c\\\n\\xd1\\x65\\x98\\x60\\x7a\\x3d\\xbc\\x55\\x42\\xd7\\x37\\xf4\\xad\\x93\\x50\\x09\\\n\\x29\\x4e\\x7a\\xc0\\x94\\xcb\\xf1\\x26\\x65\\x93\\x5c\\x97\\xbc\\x7a\\x31\\x28\\\n\\xbc\\x3d\\x5b\\xbe\\x1e\\xca\\x58\\x9b\\x19\\x16\\x5e\\x75\\x2e\\x2e\\x3b\\x31\\\n\\x42\\xee\\xc6\\xfb\\x10\\xf2\\xa9\\x4a\\x21\\x64\\x8c\\xa7\\xcb\\x90\\xcc\\x58\\\n\\xf6\\xb1\\x61\\x1e\\x95\\x99\\x0f\\xc0\\x59\\xd8\\x40\\xe6\\xb0\\x2a\\x28\\xbc\\\n\\x51\\x06\\xd6\\xcb\\x05\\xc2\\x4d\\x48\\x5e\\x5d\\x04\\xef\\x87\\xa1\\x0c\\x4c\\\n\\x6a\\xfa\\x05\\xb7\\xac\\x13\\x23\\x04\\xdf\\xae\\x83\\xcb\\xae\\x9f\\xb1\\xc3\\\n\\xe2\\x84\\xf2\\xfa\\x44\\xfc\\x2b\\xbf\\x75\\x3e\\x1f\\x76\\xd7\\xd8\\x49\\x1f\\\n\\xbf\\x11\\x2f\\x3e\\xa6\\x70\\xfb\\x5a\\x05\\x5b\\xf6\\x76\\x59\\xf7\\xb7\\x3f\\\n\\xd0\\x32\\x90\\x8a\\xb4\\xa3\\xe7\\xc5\\x51\\x20\\xef\\x2c\\xcb\\x72\\xf9\\xae\\\n\\x50\\x8e\\x92\\xe5\\x65\\x86\\x15\\x72\\xb8\\xb5\\x22\\x9c\\x0d\\x79\\xfa\\xba\\\n\\xe7\\x1e\\x91\\x80\\x93\\xfd\\xc6\\x02\\xff\\xd1\\x81\\xcd\\x37\\x0b\\x42\\xf9\\\n\\xce\\x0a\\xfb\\x32\\xb1\\xe5\\x29\\xf7\\xaf\\x28\\xf8\\x0b\\x4e\\xc6\\x38\\x2c\\\n\\xe5\\x5f\\x2d\\x16\\xce\\xa4\\xe4\\x49\\xc7\\x89\\x7a\\xb8\\xbd\\x1b\\x96\\xc6\\\n\\x9f\\x31\\xcb\\x45\\xb0\\x3e\\x5e\\xfd\\xf3\\x64\\x19\\x56\\x48\\xb0\\x78\\x3d\\\n\\xea\\xfe\\x15\\x05\\x1e\\x78\\x06\\x84\\xf3\\x03\\xde\\x22\\xc1\\xe1\\xca\\x59\\\n\\x58\\x0f\\xbd\\x35\\xad\\x30\\xdc\\xd1\\x23\\x9c\\x31\\x79\\x7b\\x69\\xb3\\x1e\\\n\\xbc\\x77\\x42\\xf0\\x09\\xad\\xba\\x3c\\x87\\x30\\x6c\\xe0\\xaf\\x28\\xe0\\x9d\\\n\\xde\\xee\\x4a\\xa7\\xf0\\xe5\\x82\\xd7\\x23\\x83\\xb0\\xbd\\xa8\\x7c\\x55\\x79\\\n\\x28\\x79\\xcf\\x84\\xac\\xc0\\x9e\\xf8\\xed\\x15\\x83\\xf2\\x1e\\x09\\x31\\xbe\\\n\\x0c\\x24\\xec\\x42\\x48\\xa7\\x5b\\xe2\\x06\\xe0\\x8b\\xe8\\xf9\\xc9\\x0c\\x94\\\n\\xe3\\x21\\x03\\xc1\\xdf\\x3e\\x91\\x84\\x84\\xe3\\xe7\\xbb\\xcd\\x26\\x6b\\x93\\\n\\xb8\\x01\\x59\\xe4\\xfa\\x00\\xbf\\x2b\\xc5\\x7b\\x84\\xc0\\x7f\\xfa\\xa0\\xcf\\\n\\xd1\\xc1\\x7f\\x73\\x9c\\xc1\\xc0\\x37\\xa0\\x26\\xc5\\xe4\\xd0\\xbf\\x5c\\x10\\\n\\xfa\\x1f\\xb8\\xc7\\xdf\\xaf\\x20\\x7f\\x09\\xcc\\x6f\\x63\\x44\\x20\\x98\\x2c\\\n\\x3b\\xf1\\xf4\\xcf\\x48\\x84\\x32\\x52\\x3e\\xbf\\x7d\\x29\\xce\\x64\\x3d\\xe0\\\n\\x6e\\xd8\\x7b\\x89\\x05\\x7f\\xbd\\xf3\\x1f\\xae\\xf4\\x84\\x27\\xae\\x9f\\xb2\\\n\\xfe\\x91\\xcc\\x27\\x09\\x64\\x43\\xaa\\xc9\\x30\\xe6\\x78\\x2f\\x89\\xb2\\x56\\\n\\x12\\xae\\xc4\\x7f\\x94\\xf5\\x1b\\x57\\x5a\\x22\\x11\\x89\\x48\\x44\\x22\\x12\\\n\\x91\\x88\\x44\\x24\\x22\\x71\\x02\\xe2\\x83\\x0f\\xfe\\x0f\\xf5\\xc9\\xf6\\xad\\\n\\x99\\x34\\x6f\\x40\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\\n\\x00\\x00\\x05\\x87\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x50\\x00\\x00\\x00\\x50\\x08\\x06\\x00\\x00\\x00\\x8e\\x11\\xf2\\xad\\\n\\x00\\x00\\x00\\x04\\x73\\x42\\x49\\x54\\x08\\x08\\x08\\x08\\x7c\\x08\\x64\\x88\\\n\\x00\\x00\\x00\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0d\\xd7\\x00\\x00\\x0d\\xd7\\\n\\x01\\x42\\x28\\x9b\\x78\\x00\\x00\\x00\\x19\\x74\\x45\\x58\\x74\\x53\\x6f\\x66\\\n\\x74\\x77\\x61\\x72\\x65\\x00\\x77\\x77\\x77\\x2e\\x69\\x6e\\x6b\\x73\\x63\\x61\\\n\\x70\\x65\\x2e\\x6f\\x72\\x67\\x9b\\xee\\x3c\\x1a\\x00\\x00\\x05\\x04\\x49\\x44\\\n\\x41\\x54\\x78\\x9c\\xed\\x9b\\x4d\\x68\\x9c\\x45\\x1c\\xc6\\x9f\\x67\\xde\\xdd\\\n\\xc4\\xa4\\xb4\\x44\\xf3\\x51\\xb7\\x8a\\x56\\x0c\\x4a\\x0d\\x8d\\x14\\x9a\\x46\\\n\\x52\\x3c\\x04\\x11\\x11\\xcf\\x39\\x79\\xd1\\x62\\x11\\xc4\\x8f\\x93\\xa0\\x98\\\n\\x96\\x6d\\x93\\x80\\x08\\x05\\x53\\x10\\x2f\\x85\\x52\\xd1\\x8b\\x88\\x8a\\x17\\\n\\xbd\\xf5\\x22\\xd9\\xa4\\x15\\x82\\x96\\x56\\x85\\x58\\x41\\xab\\x26\\x5d\\xa3\\\n\\x69\\x5a\\x93\\x26\\xbb\\x3b\\x7f\\x0f\\x69\\xb4\\x29\\x29\\xbb\\xb3\\x33\\xf3\\\n\\xce\\x9b\\xf6\\xfd\\x9d\\x67\\x9e\\xf9\\xe7\\xb7\\xf3\\x7e\\x4d\\x66\\x80\\x14\\\n\\x2b\\x68\\xd3\\xb9\\x63\\x64\\xfc\\x49\\x11\\xec\\x77\\x55\\xcc\\x1a\\x44\\x72\\\n\\x00\\xb6\\x83\\x9c\\x02\\x50\\xf4\\x32\\x06\\x70\\xb4\\x38\\xf8\\xd8\\xd7\\x36\\\n\\x01\\x19\\xab\\xe1\\x85\\x0f\\x02\\x32\\x60\\x95\\x71\\x33\\xf8\\xdf\\x6f\\x7b\\\n\\xaf\\x97\\x7c\\x00\\x42\\x7e\\x6e\\x9b\\xa1\\x5c\\x14\\x72\\x3b\\x93\\x0a\\xb4\\\n\\x24\\x15\\x68\\x49\\x2a\\xd0\\x92\\x54\\xa0\\x25\\xa9\\x40\\x4b\\x52\\x81\\x96\\\n\\xa4\\x02\\x2d\\x49\\x05\\x5a\\x62\\xf5\\x25\\xa2\\x89\\x79\\xa5\\xe5\\x17\\x21\\\n\\x37\\x03\\x6c\\x06\\xa4\\xd1\\x55\\x61\\x1e\\xb9\\x0a\\x60\\x51\\x80\\x79\\x68\\\n\\x7d\\xc5\\x36\\xcc\\xea\\x5b\\xf8\\x46\\xb6\\xe5\\xbf\\x69\\xab\\xa8\\xe5\\x9c\\\n\\x8e\\xb8\\x03\\x5a\\x75\\x83\\xf2\\x04\\x80\\x1e\\x00\\x91\\xcb\\x71\\x6a\\xa4\\\n\\x0c\\x60\\x8c\\x22\\x27\\x41\\x9e\\x51\\x5a\\xfd\\xb0\\xa0\\xcb\\x7f\\xcc\\xe7\\\n\\xfb\\xfe\\x72\\x39\\x88\\x53\\x81\\xeb\\xd1\\x3a\\x3c\\x76\\x0f\\xc1\\x57\\x09\\\n\\xf5\\x5a\\x4c\\x33\\x74\\x41\\xc8\\x77\\xa2\\x52\\xf9\\xfd\\x99\\xfc\\xde\\x8b\\\n\\xbe\\x07\\xf3\\x2e\\x70\\x95\\x8e\\x91\\xf1\\x6e\\x11\\x7c\\x05\\x20\\xe7\\x71\\\n\\x98\\xf3\\x88\\xf4\\x53\\xc5\\x37\\xfb\\xa6\\x3c\\x8e\\xb1\\x86\\xd8\\x04\\x02\\\n\\x40\\xeb\\xe1\\x53\\x3d\\x4a\\xe9\\x31\\xd8\\xae\\x02\\xad\\xcf\\xa2\\x48\\xb4\\\n\\xeb\\xcf\\x03\\x3d\\x3f\\x7a\\xc8\\xbe\\x29\\xb1\\x3e\\x85\\x67\\x0f\\xee\\x39\\\n\\x0d\\xc1\\x27\\x9e\\xe2\\x8f\\xc7\\x2d\\x0f\\x08\\xf1\\x1a\\xa3\\xe4\\x33\\x2f\\\n\\xb1\\x54\\x9f\\xfa\\xc8\\xad\\x3a\\x6e\\xdc\\x03\\x46\\x95\\xe8\\xac\\x8f\\x5c\\\n\\x5d\\x82\\x97\\xdc\\x6a\\xc4\\x3f\\x03\\x33\\x57\\x7d\\x3c\\x19\\xa5\\x98\\x53\\\n\\xb3\\x1e\\x72\\xab\\x12\\xbb\\xc0\\xe9\\xce\\x69\\xa7\\xef\\x61\\xd7\\xb8\\x8c\\\n\\x17\\x77\\x97\\x3c\\xe4\\x56\\x25\\xfe\\x19\\x78\\x6e\\x40\\x3c\\xa4\\xfa\\xc8\\\n\\xac\\x89\\xf4\\x5b\\xd8\\x92\\x5b\\x45\\x60\\xac\\xef\\xb3\\xd7\\x93\\x0a\\xb4\\\n\\xe4\\x56\\x11\\x18\\x8c\\xf8\\x05\\xe6\\xa9\\x85\\xb2\\x1f\\x80\\x93\\xef\\x55\\\n\\x02\\xe7\\x48\\xbc\\xe4\\x22\\xab\\xce\\xf1\\xc3\\xd0\\x92\\x9f\\x6c\\xc9\\x46\\\n\\x4b\\x5f\\x80\\x78\\xdc\\x22\\xe6\\x4b\\xd5\\xd8\\x34\\x30\\xf3\\xfa\\xa3\\xff\\\n\\x38\\x2b\\xcc\\x90\\x60\\x02\\x01\\xa0\\x3d\\x7f\\xea\\x6e\\x64\\xf4\\x19\\x00\\\n\\x6d\\xc6\\x9d\\x89\\x0b\\xa5\\x52\\xe3\\xce\\xb9\\xfc\\xae\\x39\\xf7\\x95\\xd5\\\n\\x4e\\xd0\\x7b\\x60\\x31\\xbf\\x67\\x1a\\x90\\xd1\\xba\\x3a\\x6b\\xbc\\x1d\\x5a\\\n\\x1e\\x90\\x80\\x87\\x88\\x86\\x1c\\xaf\\xa3\\x5b\\xb9\\x9c\\xcd\\x7c\\xe8\\xbc\\\n\\x98\\x3a\\x08\\x2e\\x70\\x76\\xb0\\xef\\x37\\x98\\x3e\\x50\\x28\\x93\\x7f\\xbf\\\n\\xb1\\xfb\\x92\\x9f\\x8a\\xcc\\x08\\x2e\\xf0\\x1a\\xdf\\x1a\\xb5\\x16\\x7c\\xe7\\\n\\xa9\\x0e\\x63\\x92\\x21\\x90\\xb8\\x60\\xd4\\x5c\\xcc\\xda\\xfb\\x24\\x19\\x02\\\n\\x05\\x97\\x4d\\x9a\\x6b\\x62\\xde\\x57\\x29\\xa6\\x24\\x42\\xa0\\x90\\x65\\x93\\\n\\xf6\\x5c\\xf9\\x97\\x65\\x22\\x48\\x84\\x40\\x6a\\x34\\x99\\x75\\xe0\\x26\\x4f\\\n\\xa5\\x18\\x93\\x08\\x81\\xa2\\xb0\\xc5\\xac\\x83\\x61\\x7b\\x8f\\x24\\x42\\x20\\\n\\x45\\xee\\x30\\x6a\\xcf\\xe4\\x6c\\x21\\x49\\x8a\\x40\\x23\\x21\\x02\\x36\\xf8\\\n\\xaa\\xc5\\x94\\x44\\x08\\x14\\x65\\x26\\x84\\x82\\x54\\xe0\\xf5\\x88\\x20\\x6b\\\n\\xd4\\x1e\\x66\\xed\\x7d\\x92\\x08\\x81\\x34\\x14\\x42\\x30\\x15\\xb8\\x06\\x62\\\n\\xab\\x49\\x73\\x0d\\x31\\x6a\\xef\\x93\\xf0\\x02\\xf3\\x67\\x1b\\x20\\x78\\xc8\\\n\\xa4\\x0b\\x81\\x2e\\x88\\x04\\x5d\\xcb\\x5c\\x25\\xb8\\xc0\\x8e\\xec\\x95\\x7e\\\n\\x00\\x9b\\x0d\\xbb\\xe5\\x5a\\x47\\x0a\\x3d\\x3e\\xea\\x31\\x25\\xb8\\x40\\x11\\\n\\x1c\\xac\\xa7\\x9f\\x82\\xaa\\xab\\x9f\\x6b\\x82\\x0a\\x6c\\x1f\\x2e\\x0c\\x02\\\n\\xd2\\x57\\x67\\xf7\\x67\\xda\\x87\\x27\\x5e\\x76\\x5a\\x50\\x1d\\x04\\xbb\\x8f\\\n\\xb4\\x0f\\x15\\x5e\\x01\\x39\\x6a\\x59\\x43\\x85\\xe4\\xbe\\x8b\\x6f\\xf5\\x7e\\\n\\xe0\\xaa\\x2e\\x53\\x82\\xcc\\xc0\\xf6\\xe1\\xc2\\x31\\x90\\x47\\x61\\xff\\x03\\\n\\x46\\x22\\x72\\xa2\\x63\\x78\\xe2\\x88\\x8b\\xba\\xea\\x21\\xd0\\x25\\x4c\\xa7\\\n\\x87\\xb4\\xc5\\xd7\\xa1\\xef\\x1a\\x08\\x75\\x0f\\x74\\xbd\\x47\\x70\\xc6\\x71\\\n\\x5e\\xcd\\x84\\x11\\x28\\xce\\xff\\xe0\\xdb\\x4c\\x20\\x25\\x9d\\x81\\x36\\x88\\\n\\xd0\\xed\\x56\\x0c\\x3a\\xce\\x33\\x20\\x88\\x40\\x2a\\x18\\x2d\\xa0\\x56\\xcd\\\n\\x83\\x04\\x5b\\xde\\x0a\\x75\\x0f\\x34\\xfd\\x74\\xab\\x96\\x17\\x6c\\x89\\x3f\\\n\\x7e\\x81\\x22\\x04\\xb1\\xd3\\x65\\xa4\\x06\\xba\\x5d\\xe6\\x99\\x10\\xbb\\xc0\\\n\\xad\\x23\\x13\\xbd\\x10\\x6c\\x73\\x99\\x49\\xa0\\xab\\x75\\xa8\\xb0\\xc3\\x65\\\n\\x66\\xad\\xc4\\x2b\\x50\\x84\\x1a\\x38\\xec\\x23\\x5a\\x91\\x87\\x7c\\xe4\\x56\\\n\\x23\\xd6\\x73\\xbc\\x1d\\xd9\\xa7\\x0f\\x01\\xd8\\xe7\\x29\\xbe\\x6b\\x53\\xff\\\n\\x0b\\x73\\x0b\\x27\\x8f\\x4d\\x78\\xca\\x5f\\x97\\x58\\x16\\x13\\x5a\\xf2\\x93\\\n\\x2d\\xd9\\xcc\\xd2\\x11\\xf8\\x93\\xf7\\x3f\\xc4\\x28\\x4a\\x8b\\x83\\xc5\\x7c\\\n\\xbf\\xf5\\x69\\xf4\\xda\\x86\\xf3\\x48\\xdb\\xd0\\xe9\\x87\\x15\\x2a\\xcf\\xca\\\n\\xca\\x1e\\xe6\\x56\\x9f\\x63\\xdd\\xc0\\x34\\x20\\xef\\x29\\x51\\x1f\\xcd\\x1c\\\n\\xe8\\xfd\\xd9\\xe7\\x40\\x56\\x02\\xef\\xca\\x8f\\x6f\\xc9\\x28\\x3e\\xa0\\x21\\\n\\x99\\x88\\x72\\xa7\\x90\\x39\\xa1\\xdc\\x47\\x8d\\x47\\x34\\xb9\\x97\\xc0\\xfd\\\n\\xae\\x0a\\xb5\\x60\\x4a\\x80\\x02\\x89\\xef\\x09\\xfc\\x5a\\xd1\\xfc\\x9d\\x22\\\n\\x97\\x54\\x84\\x92\\x94\\x16\\xcf\\xdb\\xce\\x54\\xab\\x83\\xcf\\x51\\x84\\xe7\\\n\\x85\\xf2\\x2e\\x01\\xe8\\xd5\\xdf\\x42\\x08\\x61\\xe0\\xcd\\xd7\\x6b\\xe9\\x24\\\n\\xd0\\x09\\x59\\x39\\x0f\\xa6\\x28\\x00\\x01\\x11\\x00\\x99\\xe6\\xe7\\x00\\x9c\\\n\\xb0\\x09\\xb7\\x7b\\x0a\\x2b\\x34\\x5b\\xf5\\x0f\\x0c\\x45\\x5b\\xd7\\x6f\\x27\\\n\\x50\\x36\\xb6\\x40\\xad\\x18\\x56\\xa0\\x04\\xfc\\x06\\x75\\x01\\x61\\xbf\\x45\\\n\\xc4\\x4a\\x20\\x41\\x6d\\x5b\\x40\\x58\\xc4\\xba\\x7e\\xcb\\x4b\\x98\\x15\\xdb\\\n\\x02\\x42\\x42\\x07\\xf5\\xdb\\xcd\\x40\\xca\\x86\\x16\\xa8\\x43\\x0b\\xd4\\xc0\\\n\\x86\\x16\\x48\\xea\\xc0\\x33\\x10\\x66\\x9b\\xc3\\x93\\x86\\x8b\\xfa\\x2d\\x05\\\n\\x26\\x67\\xb7\\x7c\\x3d\\x24\\xe0\\x12\\xd6\\x1b\\x5a\\xa0\\x8b\\x09\\x60\\x37\\\n\\x03\\x37\\xf8\\x53\\x18\\x0c\\x2c\\x10\\x1b\\xfc\\x12\\x76\\xf1\\x16\\x61\\xb9\\\n\\x98\\xb0\\xfc\\x71\\xb9\\xdc\\x30\\x6e\\x5b\\xc4\\x7a\\x50\\xa1\\x49\\x6b\\x6c\\\n\\x8f\\xc0\\x9f\\x34\\x64\\xd9\\xc7\\x18\\x4b\\x5a\\x7b\\x5d\\xea\\x4a\\xa9\\x81\\\n\\x7f\\x01\\xa8\\x2e\\x65\\x1d\\xa2\\x44\\x68\\x88\\x00\\x00\\x00\\x00\\x49\\x45\\\n\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x06\\x31\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x5a\\x00\\x00\\x00\\x5a\\x08\\x06\\x00\\x00\\x00\\x38\\xa8\\x41\\x02\\\n\\x00\\x00\\x00\\x04\\x73\\x42\\x49\\x54\\x08\\x08\\x08\\x08\\x7c\\x08\\x64\\x88\\\n\\x00\\x00\\x00\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0d\\xd7\\x00\\x00\\x0d\\xd7\\\n\\x01\\x42\\x28\\x9b\\x78\\x00\\x00\\x00\\x19\\x74\\x45\\x58\\x74\\x53\\x6f\\x66\\\n\\x74\\x77\\x61\\x72\\x65\\x00\\x77\\x77\\x77\\x2e\\x69\\x6e\\x6b\\x73\\x63\\x61\\\n\\x70\\x65\\x2e\\x6f\\x72\\x67\\x9b\\xee\\x3c\\x1a\\x00\\x00\\x05\\xae\\x49\\x44\\\n\\x41\\x54\\x78\\x9c\\xed\\x9a\\x7b\\x88\\x56\\x45\\x14\\xc0\\x7f\\xa6\\x6e\\xab\\\n\\xeb\\xa6\\x99\\xaf\\xb2\\x2c\\x43\\x42\\xb4\\xc2\\x48\\x22\\xa2\\x92\\xca\\x82\\\n\\x22\\xc2\\x1e\\x20\\x48\\x2e\\x51\\x92\\x20\\x05\\x15\\xf5\\x47\\x41\\x44\\x51\\\n\\x54\\x56\\xa2\\x45\\x4f\\xb4\\x6c\\xe9\\x09\\x52\\xd4\\xf6\\xfe\\x23\\x52\\x7b\\\n\\x20\\x96\\x98\\x11\\x99\\x82\\xf9\\x28\\x4b\\x77\\xb7\\x5c\\xcd\\x6c\\x35\\xf7\\\n\\xeb\\x8f\\xf3\\x7d\\x39\\x7b\\xf7\\x9b\\x73\\xe7\\x7e\\x77\\xee\\xae\\xd8\\xf9\\\n\\xc1\\xc0\\x77\\xbf\\x99\\x39\\xe7\\xdc\\x73\\xef\\x3d\\x33\\x73\\x66\\xc0\\x30\\\n\\x0c\\xc3\\x30\\x0c\\xc3\\x30\\x0c\\xc3\\x30\\x0c\\xc3\\x30\\x0c\\xc3\\x30\\x0c\\\n\\xc3\\x30\\x0c\\xc3\\x30\\x0c\\xc3\\x30\\x8c\\x5e\\xe7\\xe8\\x23\\x44\\x47\\x30\\\n\\xfd\\xaa\\xfc\\x37\\x0a\\x68\\x02\\x86\\x02\\x6b\\x80\\x16\\xe0\\x9f\\x48\\xba\\\n\\x6e\\x07\\x6e\\x01\\xc6\\x03\\xdb\\x81\\x05\\xc0\\x13\\x11\\x64\\xbb\\x4c\\x00\\\n\\x16\\x01\\xd3\\x81\\xa3\\x80\\x77\\x80\\x79\\xc0\\xce\\xc0\\xfe\\x83\\x80\\x93\\\n\\x81\\x71\\xc0\\xf1\\xc8\\x03\\x6b\\x04\\x06\\x38\\x6d\\xea\\x80\\x06\\xe7\\x7a\\\n\\x18\\x70\\x4c\\xf9\\xf7\\x97\\xc0\\x12\\x60\\x9f\\xa6\\xe4\\x74\\xa0\\x1d\\x28\\\n\\x39\\x65\\x35\\x30\\x3c\\xd0\\x48\\x8d\\x27\\x13\\x72\\x2b\\xa5\\x29\\x82\\xec\\\n\\x0a\\xc3\\x81\\x4d\\x55\\x74\\xac\\x46\\x9c\\x5e\\x8d\\xc9\\xc0\\x5d\\xc0\\x9b\\\n\\xc0\\x46\\xa0\\xcb\\x63\\x67\\x96\\xb2\\x8e\\x14\\x9f\\xbd\\xe5\\xe9\\xf8\\x7c\\\n\\xd6\\x3b\\x4e\\x30\\x00\\x38\\xe0\\x91\\xbd\\x91\\xea\\x5f\\x56\\x2d\\x3c\\xe3\\\n\\xd1\\x51\\x02\\xa6\\x26\\xda\\x9e\\x04\\x7c\\xa0\\xb4\\xcf\\x5b\\x9e\\xd2\\x0c\\\n\\xdd\\xe2\\xe9\\xb4\\xb6\\xb6\\xfb\\xee\\x46\\x87\\x62\\xd4\\xf4\\x08\\xf2\\x27\\\n\\x00\\xfb\\x03\\x75\\x0c\\x01\\x36\\x2b\\x6d\\x63\\x94\\x2d\\xae\\x71\\xc9\\xcf\\\n\\x69\\x84\\xe7\\x26\\xfa\\x67\\xb8\\x61\\x1f\\xcb\\x95\\xba\\x9b\\x23\\xc8\\x7f\\\n\\x00\\x18\\xe8\\xa9\\xeb\\x02\\xbe\\x77\\xae\\x67\\x20\\x71\\xb8\\x48\\x0e\\xb8\\\n\\x17\\xae\\xa3\\x07\\x97\\x4b\\x51\\xb4\\x28\\x75\\x33\\x80\\xd1\\x39\\x64\\x4f\\\n\\x01\\x66\\xa6\\xe8\\xfe\\xd5\\xb9\\x6e\\xcc\\xa1\\x2b\\x94\\x97\\x7c\\x15\\x23\\\n\\xf1\\x7f\\x06\\xdf\\x45\\x50\\x7c\\x02\\xfa\\x40\\x73\\x77\\x0e\\xd9\\xef\\x2b\\\n\\x72\\x3b\\x81\\x89\\x89\\xf6\\x27\\x02\\x07\\x95\\x3e\\x79\\x4a\\x27\\x30\\x9f\\\n\\x44\\x14\\x70\\xa7\\x2c\\x31\\xc2\\x83\\xc6\\x76\\xe0\\x73\\xe0\\x02\\x4f\\xfd\\\n\\x1c\\xe0\\x11\\xc4\\xd8\\x2c\\x9c\\x0f\\x5c\\xa1\\xd4\\x2f\\x00\\xd6\\x27\\xfe\\\n\\xfb\\x19\\xb8\\xbf\\x5c\\x7c\\xac\\x00\\x76\\x00\\xad\\x40\\x1b\\x32\\xc6\\xfc\\\n\\xe9\\x69\\x3b\\x10\\x71\\xf0\\x2f\\xc0\\x4a\\xa5\\x1d\\x00\\x63\\x29\\xf6\\x8d\\\n\\x06\\xb8\\x5e\\xd1\\x51\\x02\\xa6\\xd5\\x20\\xb3\\x45\\x91\\xd7\\xce\\xa1\\xf9\\\n\\x6d\\x35\\xda\\x94\\xbe\\x0d\\x4a\\xbf\\x5c\\x8c\\x53\\x94\\xc6\\x72\\x74\\x3d\\\n\\x3d\\xe7\\xe9\\x6e\\x59\\x9c\\x51\\xde\\x44\\xf4\\x10\\x70\\x6f\\x4a\\xff\\x56\\\n\\xa5\\x6f\\x61\\x8e\\x1e\\xaf\\x28\\x8d\\xe5\\x68\\x80\\x85\\x8a\\x9e\\x0e\\xb2\\\n\\x0d\\xc8\\x4b\\x14\\x59\\x7f\\x20\\xab\\x5b\\x8d\\x3e\\x71\\xf4\\xa9\\x8a\\xd2\\\n\\x98\\x8e\\x3e\\x43\\xd1\\x53\\x02\\x66\\x05\\xca\\x19\\x8d\\x2c\\x73\\x7d\\x72\\\n\\xee\\x0b\\x90\\x71\\x44\\x3b\\x1a\\x64\\x01\\xe4\\xd3\\xf5\\x71\\xa0\\x8c\\x87\\\n\\x15\\x19\\x1d\\xc0\\xb1\\x01\\x32\\x7a\\xcd\\xd1\\xbe\\xf5\\x7f\\xd1\\x2c\\x55\\\n\\xea\\x2e\\x41\\x06\\x66\\x8d\\x46\\x60\\xae\\x52\\xbf\\x08\\x09\\x1d\\x87\\x0d\\\n\\x7d\\xe5\\xe8\\xd7\\x48\\xac\\x9c\\x1c\\xfa\\x93\\x1e\\x3e\\xe6\\xe0\\x7f\\x63\\\n\\xf7\\x91\\x92\\x67\\xe8\\x0b\\xdc\\x79\\x74\\x6f\\x3a\\x7d\\x27\\xf0\\x21\\x70\\\n\\x95\\xa7\\xbe\\x09\\x78\\xcc\\x53\\x37\\x10\\xb8\\x4d\\x91\\xfd\\x2a\\x12\\x12\\\n\\xf2\\x72\\x11\\xf0\\xb7\\x73\\x3d\\x04\\x79\\xb8\\xc3\\xcb\\xe5\\x38\\x24\\x8d\\\n\\x5a\\x19\\xbc\\x37\\x00\\x8f\\x03\\x3f\\xa5\\x09\\x9e\\x48\\xef\\xc5\\x68\\x80\\\n\\x6b\\x14\\x7d\\x25\\xe0\\x2c\\x4f\\xbf\\xd9\\x4a\\x9f\\x2e\\x24\\xd5\\x1b\\x8a\\\n\\x16\\xa3\\x6b\\x29\\xad\\xc0\\x98\\x34\\xa5\\x93\\x15\\x01\\xeb\\x32\\x18\\x1f\\\n\\x4a\\x1d\\xf2\\x66\\xfb\\x74\\x2e\\xf0\\xf4\\xfb\\x56\\xe9\\xf3\\x49\\x46\\x1b\\\n\\x62\\x3b\\xba\\x04\\x3c\\x54\\x4d\\x91\\x1b\\x2e\\xb4\\x25\\x78\\x57\\xc6\\x1b\\\n\\x08\\x61\\x3f\\xf0\\x8a\\x52\\x3f\\x8b\\xee\\xa1\\x0d\\xe4\\x73\\x3e\\x53\\xe9\\\n\\xb3\\x30\\xaf\\x51\\x11\\xa8\\x6a\\x5f\\x5f\\x3a\\x1a\\xe0\\x45\\xa5\\x6e\\x34\\\n\\x70\\x59\\xe2\\xbf\\x5b\\x95\\xf6\\xeb\\x91\\xb8\\xdf\\xd7\\xec\\x48\\x6b\\x30\\\n\\x15\\xff\\xe7\\xf0\\x75\\x81\\x86\\xad\\x52\\xf4\\xbe\\xee\\xb4\\x6b\\x44\\x06\\\n\\x27\\x5f\\x5b\\xed\\x21\\xf8\\x88\\x1d\\x3a\\x3a\\xe9\\xb9\\x93\\xd3\\x83\\x73\\\n\\x15\\x01\\xab\\x6a\\xb8\\x89\\x50\\xe6\\x2a\\x7a\\xff\\xe2\\xd0\\x32\\xfa\\x5a\\\n\\xa5\\xdd\\x5e\\x64\\x83\\x34\\x2b\\x31\\x1d\\xbd\\x16\\x65\\xa7\\x28\\x34\\x4d\\\n\\x5a\\x54\\xe8\\x00\\x78\\x03\\x19\\xf8\\xaa\\xe5\\x38\\x06\\x01\\xd7\\x21\\x39\\\n\\x8d\\xd9\\x29\\x32\\x76\\x45\\xb6\\xeb\\x6d\\x64\\x07\\xbc\\xce\\xf9\\xaf\\xb2\\\n\\x08\\xda\\x85\\x0c\\xe4\\x6d\\xc8\\x96\\xd8\\x1a\\x60\\x6b\\xa8\\xe0\\x0b\\xf1\\\n\\x3f\\xad\\x2f\\x72\\x1a\\x9d\\xc6\\xcb\\x8a\\xee\\xcf\\x90\\x44\\xbd\\x6f\\x73\\\n\\xb7\\x04\\x9c\\x53\\xa3\\xde\\x3e\\xc9\\x75\\x4c\\x53\\x94\\xae\\x2c\\x4a\\x69\\\n\\x19\\xed\\x21\\x77\\xa1\\x67\\xe9\\xbe\\xc9\\xa1\\xf7\\xb0\\xcb\\x75\\x1c\\x8c\\\n\\xa9\\xb4\\x0a\\x2b\\xe8\\xb9\\x0b\\x52\\xa1\\x1f\\x70\\xa3\\xd2\\xf7\\xb9\\xf8\\\n\\xe6\\xc4\\x27\\xd4\\xd1\\xa5\\x42\\xad\\x10\\x96\\xd6\\xd0\\x67\\x2f\\x12\\x9f\\\n\\x0f\\x7b\\x42\\x1d\\x5d\\xe4\\x60\\x58\\xa1\\x99\\xec\\x47\\xcf\\x96\\x01\\x7b\\\n\\x0a\\xb0\\x25\\x3a\\xae\\xa3\\x7d\\x67\\x22\\xa0\\xf8\\xd0\\x01\\x72\\x1c\\xe0\\\n\\xa3\\x8c\\x7d\\x96\\x16\\x60\\x47\\x2d\\x34\\x00\\xe7\\x01\\x67\\xe3\\x99\\xbd\\\n\\xb9\\xd3\\x3b\\xed\\xf4\\x65\\x6f\\xbc\\xd1\\x20\\x2b\\xc5\\x2b\\x03\\xdb\\x6e\\\n\\x42\\x3f\\x94\\x93\\x97\\x8b\\x91\\x87\\xdf\\x8e\\x84\\xa8\\x21\\xc8\\x54\\x6f\\\n\\x18\\x72\\xf8\\x66\\x3c\\x72\\x3a\\x6a\\x2a\\x92\\x27\\xaa\\xf8\\x72\\x03\\x70\\\n\\x03\\xf0\\x95\\x2b\\xcc\\x75\\xb4\\x16\\x87\\x27\\xa1\\x9f\\xbf\\xab\\x9c\\xb6\\\n\\x6c\\x28\\x1b\\x33\\x18\\x79\\x70\\xf5\\xc0\\x0f\\xc0\\x9d\\x24\\x8e\\x48\\x79\\\n\\x78\\x0f\\x59\\xc2\\x86\\x1c\\xa6\\x69\\xa6\\xd8\\xb1\\xe3\\xdd\\x1a\\xfb\\x9d\\\n\\x86\\xec\\x12\\x4d\\x41\\x5e\\x86\\x1e\\x5c\\x4a\\xdc\\xe5\\xa8\\x5b\\x5a\\x91\\\n\\x87\\x15\\xc2\\xfc\\x00\\x79\\x07\\x81\\x53\\x02\\xe5\\x69\\x14\\x91\\xbd\\xab\\\n\\x94\\x47\\x5d\\x45\\x6e\\x8c\\xde\\x1b\\xc1\\x70\\x1f\\x23\\x80\\x67\\x03\\xdb\\\n\\x2e\\x09\\x68\\xb3\\x1c\\x59\\x91\\xe5\\xc5\\xb7\\xcb\\x13\\x83\\x6e\\x79\\x69\\\n\\xd7\\xd1\\x1b\\x0b\\x54\\x0a\\x72\\xa2\\xa8\\x2e\\xb5\\x15\\xfc\\x48\\xfa\\x4a\\\n\\xb4\\x39\\xbf\\x39\\xff\\xe9\\x2a\\x0a\\xf5\\x1e\\xb4\\x44\\x7c\\xde\\xd2\\x46\\\n\\xf8\\x39\\xe8\\x9b\\x14\\x39\\xbb\\x91\\x81\\x29\\x06\\x97\\x13\\xe7\\xe0\\x79\\\n\\xb2\\x7c\\x4a\\xcf\\x5c\\x7a\\x37\\x16\\x17\\xa0\\xb4\\x52\\xee\\xc8\\xe0\\x80\\\n\\x46\\x24\\x71\\x53\\x4d\\xce\\xa2\\x0c\\x72\\x42\\x98\\x89\\xcc\\x2e\\xf2\\xde\\\n\\xdf\\x36\\x24\\xad\\x3b\\x17\\x99\\x04\\x74\\x23\\xf9\\x86\\x8d\\x44\\x9e\\x46\\\n\\x96\\x7d\\xb7\\x34\\xb6\\x01\\x0f\\x02\\x2f\\x64\\xec\\x37\\x0f\\x78\\x3a\\xf1\\\n\\xdf\\x66\\x64\\x3a\\xd5\\x9e\\xdf\\xac\\x6e\\xd4\\x23\\x69\\xe2\\x49\\xc8\\x8c\\\n\\x67\\x14\\xb2\\x01\\x3b\\xb4\\x5c\\x2a\\x6b\\x8c\\x3d\\xc8\\xa2\\xea\\x77\\xe4\\\n\\xbe\\xb6\\x22\\xb3\\xa9\\xb5\\xa4\\xcc\\xaa\\xaa\\x7d\\xca\\x75\\xc8\\x0c\\x64\\\n\\xac\\x23\\x38\\xc9\\x6e\\xd2\\x17\\x31\\x7b\\x80\\xdf\\x90\\x93\\x9b\\xb5\\x2e\\\n\\x78\\xae\\x46\\xbe\\x84\\x31\\x48\\x4e\\xfc\\x1e\\x32\\xa4\\x23\\x0d\\xc3\\x30\\\n\\x0c\\xc3\\x30\\x0c\\xc3\\x30\\x0c\\xc3\\x30\\x0c\\xc3\\x30\\x0c\\xc3\\x30\\x0c\\\n\\xc3\\x30\\x0c\\xc3\\x30\\x0c\\xc3\\x30\\xfe\\x5f\\xfc\\x0b\\x20\\x91\\x4e\\x48\\\n\\x71\\x22\\x38\\xa7\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\\n\\x00\\x00\\x08\\xe0\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x60\\x00\\x00\\x00\\x60\\x08\\x06\\x00\\x00\\x00\\xe2\\x98\\x77\\x38\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x16\\x25\\x00\\x00\\x16\\x25\\x01\\x49\\x52\\\n\\x24\\xf0\\x00\\x00\\x08\\x75\\x49\\x44\\x41\\x54\\x78\\x5e\\xed\\x9c\\x5b\\x6c\\\n\\x54\\x45\\x18\\xc7\\xff\\xdb\\xd2\\xd2\\x2b\\x2d\\x74\\x5b\\x90\\x95\\xfb\\x16\\\n\\xe8\\x05\\xa5\\x36\\xb6\\xda\\x16\\x89\\x28\\xc8\\x6e\\x63\\xac\\x37\\x34\\x88\\\n\\x59\\x7d\\xb0\\x1b\\xf5\\x01\\x6f\\x51\\x21\\x1a\\xd1\\x18\\x8c\\xf1\\x41\\x1b\\\n\\x0d\\x97\\x26\\x46\\x1b\\x04\\x09\\x26\\xc8\\x83\\x6d\\x63\\x82\\x98\\x86\\x40\\\n\\xb0\\x89\\x86\\x87\\x16\\xa3\\x5d\\x8d\\x55\\x6b\\x30\\x6a\\x94\\x07\\x62\\x4c\\\n\\xd0\\xfa\\xcd\\xee\\xb7\\x70\\xf6\\xf4\\x74\\xbb\\xdb\\x3d\\x73\\x66\\x0f\\xcc\\\n\\x2f\\xd9\\xf4\\x9b\\xd9\\x5e\\xe6\\xcc\\x7f\\xe6\\xbb\\xcc\\x39\\x5b\\xcf\\x38\\\n\\x01\\x8d\\x32\\x72\\xf8\\xab\\x46\\x11\\x5a\\x00\\xc5\\x68\\x01\\x14\\xa3\\x05\\\n\\x50\\x8c\\x16\\x40\\x31\\x5a\\x00\\xc5\\x68\\x01\\x14\\xa3\\x05\\x50\\x8c\\x16\\\n\\x40\\x31\\x5a\\x00\\xc5\\x68\\x01\\x14\\x93\\xf6\\x59\\xd0\\xe9\\x6f\\xbe\\x63\\\n\\x2b\\xc6\\xea\\x15\\xcb\\xd8\\xb2\\xa6\\x72\\xe0\\x6b\\xfc\\x7e\\xe1\\x3f\\x6e\\\n\\xb9\\x1b\\xef\\x8c\\x1c\\xfc\\xb6\\xb6\\x86\\x5b\\xf6\\x20\\x7d\\x07\\xd4\\x14\\\n\\x17\\xb0\\xe5\\x7e\\x6a\\x4b\\xec\\xbf\\x16\\xe9\\x02\\xd4\\x16\\xcf\\x64\\xcb\\\n\\xfd\\xd4\\x4a\\x58\\x4c\\xd2\\x05\\x58\\x59\\x72\\xf9\\x08\\x50\\x53\\x9c\\xcf\\\n\\x96\\x7d\\xe8\\x1d\\x90\\x06\\x35\\x12\\xae\\x45\\x7e\\x0c\\x28\\xd2\\x02\\x24\\\n\\x43\\xba\\x00\\x0b\\x0a\\xf2\\x50\\x9a\\xe3\\xe1\\x96\\x7b\\x29\\xcf\\xcd\\xc5\\\n\\xd5\\x33\\xf3\\xb8\\x65\\x1f\\xd2\\x05\\x10\\x34\\xcc\\x2a\\x64\\xcb\\xbd\\xac\\\n\\x9e\\x25\\x27\\x9b\\x73\\x44\\x80\\xeb\\x4a\\xdd\\x2f\\x40\\x43\\xa9\\x1c\\x57\\\n\\xea\\xcc\\x0e\\x28\\x75\\x7f\\x2d\\x20\\x6b\\x11\\x39\\x22\\x40\\xe3\\x65\\xe0\\\n\\x82\\x1a\\xdd\\x2c\\xc0\\xca\\xa2\\x7c\\x14\\xe5\\x3a\\xf2\\xa7\\xa4\\x50\\x4c\\\n\\x63\\x5f\\x4e\\xd7\\x20\\x03\\x47\\x66\\x25\\xd7\\xe3\\xc1\\x35\\x2e\\x2e\\xc8\\\n\\x56\\xd1\\xd8\\xc5\\x35\\xc8\\xc0\\xb1\\x65\\xe9\\xe6\\x40\\xdc\\x28\\x31\\x86\\\n\\x39\\x26\\x80\\x9b\\x03\\xb1\\xcc\\xc5\\xe3\\x98\\x00\\x37\\x96\\x15\\xb1\\xe5\\\n\\x3e\\x6e\\x90\\x38\\x76\\xc7\\x04\\x10\\x67\\x42\\x73\\xf2\\x1c\\xfb\\x73\\xb6\\\n\\x51\\x41\\x63\\x96\\x71\\x04\\x11\\xc7\\xb1\\x19\\x11\\x21\\xac\\xb5\\xac\\x38\\\n\\xd6\\x70\\x11\\x6d\\xe5\\xc5\\xd1\\xb1\\xcb\\xc2\\xd1\\x25\\xb9\\xa6\\xdc\\x7d\\\n\\x6e\\xa8\\x4d\\xf2\\x98\\x1d\\x15\\x40\\xf6\\xc5\\xc8\\xa0\\x4d\\xf2\\xae\\x75\\\n\\x54\\x00\\x51\\x4d\\x16\\x7a\\xdc\\x13\\x07\\x44\\xf1\\xd8\\x28\\xe9\\x10\\x2e\\\n\\x8e\\xf4\\x9b\\xf2\\x66\\xd6\\x7d\\x35\\x80\\xcf\\xdf\\xed\\x07\\x06\\x3e\\x05\\\n\\x86\\x4f\\x73\\xaf\\x91\\xd5\\x40\\x5d\\x35\\xb0\\x76\\x1d\\x70\\xd7\\x1a\\xee\\\n\\x53\\xc3\\xcd\\xe4\\xff\\x8f\\x35\\x2e\\xe6\\x96\\x1c\\x1c\\x14\\x20\\x82\\xfe\\\n\\x70\\x08\\xc1\\xee\\x93\\xdc\\x26\\xda\\x9f\\x03\\x36\\x3d\\x08\\xf8\\xb8\\x3d\\\n\\xf6\\x23\\xf0\\xc5\\x7b\\xc0\\xae\\x8f\\xb8\\x83\\x30\\x7f\\x8f\\x83\\xbc\\xb8\\\n\\xa4\\x12\\xaf\\x2c\\xad\\xe2\\x96\\x1c\\x9c\\xf1\\x07\\x91\\x2e\\x84\\x5b\\xab\\\n\\x13\\x27\\xff\\xb1\\x3e\\xe0\\x49\\xd3\\xc4\\xfa\\x16\\xd2\\xaa\\x7f\\x09\\xe8\\\n\\xa1\\x49\\x8f\\xd3\\xfb\\x3a\\x10\\xda\\x02\\x0c\\x92\\x38\\x0e\\x93\\x98\\x34\\\n\\x44\\xd0\\xd5\\x1a\\x06\\xed\\x5d\\x5b\\x91\\x2f\\x00\\x4d\\x7e\\x6b\\xf5\\x13\\\n\\x30\\xce\\x3d\\xda\\xf7\\xd0\\x44\\xd3\\x64\\x4f\\x86\\x8f\\x84\\xd9\\x79\\x2f\\\n\\x37\\x04\\xe4\\xaa\\xb6\\x07\\x1d\\x15\\x21\\x8f\\x92\\x4f\\x63\\xf1\\x18\\xe9\\\n\\x0a\\xe1\\x09\\xe3\\x35\\xd8\\x84\\x5c\\x01\\x78\\xf2\\x13\\xc7\\xdd\\x89\\xfa\\\n\\x1d\\x1b\\xd8\\x4e\\x42\\xd3\\xc3\\x14\\x0b\\xd8\\x8e\\x13\\x15\\x81\\x6d\\xc9\\\n\\xb4\\xcc\\x2e\\x42\\x49\\xfc\\x04\\x97\\xae\\x23\\x24\\x63\\xf6\\x09\\x89\\x02\\\n\\xd0\\x96\\x0d\\x99\\x27\\x9f\\xe8\\xec\\xc0\\xfd\\xde\\x12\\x6e\\x24\\x83\\x76\\\n\\xc8\\x5a\\x0a\\xc8\\x66\\xb6\\xbf\\xcc\\x86\\x5c\\x36\\xce\\x89\\x8f\\xb1\\x1f\\\n\\xe1\\x09\\x8b\\xc8\\x3e\\xe4\\x09\\xd0\\xff\\x86\\xe5\\x96\\xed\\xec\\x08\\x60\\\n\\xc3\\xc5\\x8b\\x9b\\x82\\xe6\\xdb\\xd8\\x30\\x42\\x01\\xfa\\xb0\\x7c\\x57\\xb4\\\n\\xa1\\x42\\x8c\\x51\\xf8\\xfd\\x20\\xba\\x63\\x5d\\x52\\x90\\x24\\x00\\x0d\\xfc\\\n\\x55\\xab\\x61\\xb7\\xa0\\x96\\x32\\x4c\\x51\\x0f\\x88\\xe7\\x2c\\xa7\\xc4\\x37\\\n\\x49\\x0a\\xb8\\x8b\\x32\\x25\\x89\\x54\\xe5\\xcf\\x40\\x43\\xe9\\xcf\\x34\\xf9\\\n\\xd5\\x52\\xfc\\xbe\\x11\\x39\\x02\\x44\\x7a\\x71\\xc8\\x72\\xe0\\xf5\\x58\\xee\\\n\\xa7\\x3f\\xea\\x01\\x6e\\xf3\\x96\\x72\\x5f\\x32\\x16\\x4d\\x8c\\x03\\x51\\x68\\\n\\x17\\xc4\\x63\\xc1\\x20\\xb9\\xa4\\x5b\\xeb\\xad\\x5f\\x5b\\xf7\\xd1\\x37\\xd0\\\n\\x6e\\x79\\x93\\xb2\\xa8\\x84\\xf7\\xa8\\x7d\\xf8\\x78\\xec\\xe7\\x2d\\x08\\x9c\\\n\\x3f\\x88\\x36\\x8f\\xd5\\xe4\\x77\\x23\\xe8\\xf1\\xc0\\x73\\xf1\\x95\\x79\\x56\\\n\\x24\\x47\\x80\\x91\\x33\\xd6\\x3e\\xb3\\xa5\\x16\\xb4\\x01\\xa2\\x74\\x54\\xce\\\n\\x62\\x2b\\x19\\x14\\x07\\x26\\xab\\x83\\x7e\\x66\\x37\\xd4\\x44\\x69\\xeb\\x51\\\n\\x4a\\x69\\xdb\\x63\\xcd\\x44\\xbe\\x27\\x11\\x28\\x70\\xf7\\x9a\\x0b\\x3e\\x6a\\\n\\xef\\x7a\\x94\\xde\\xb3\\x88\\x27\\x83\\xfb\\x70\\x2a\\xb0\\x43\\x9a\\xcf\\x37\\\n\\x23\\x45\\x80\\xc8\\xb7\\x43\\x6c\\x4d\\xce\\x46\\xf2\\xb1\\x05\\x99\\x1c\\x33\\\n\\x8e\\x8e\\xb2\\x21\\x20\\xa1\\x5a\\x8d\\x69\\x2b\\x33\\x4c\\x3b\\x65\\x98\\x02\\\n\\xf9\\x4e\\x12\\xe8\\x28\\x8d\\xa9\\x67\\x37\\xbf\\xc1\\x88\\xf7\\xa3\\xbb\\xe4\\\n\\x12\\x85\\xcd\\x21\\x7c\\x79\\xe1\\x5f\\x8c\\x8f\\xf7\\x51\\xbe\\x66\\xa6\\x13\\\n\\x7d\\x54\\xb7\\x8a\\xda\\x35\\xf6\\xda\\x8b\\x00\\xbf\\x33\\x5d\\x24\\xc5\\x80\\\n\\xa9\\x11\\x29\\xde\\xad\\x15\\xa9\\xb8\\xa1\\x0c\\xd9\\xf9\\x01\\xed\\x12\\xae\\\n\\x39\\x7c\\x6b\\x4c\\xf5\\x05\\x31\\x4c\\x85\\x9e\\x21\\xa8\\xaf\\xaf\\x28\\x8a\\\n\\xde\\x84\\x77\\x0a\\x65\\x02\\x08\\x3a\\x2a\\x25\\x0b\\x50\\x47\\x15\\x75\\x13\\\n\\xdb\\x71\\x9a\\xd6\\xb1\\x61\\x60\\x60\\x80\\x0d\\x1a\\x53\\x55\\x19\\x5b\\xce\\\n\\xa0\\x54\\x80\\x3b\\x28\\x0e\\x88\\x8a\\xd3\\x59\\x2c\\x02\\xfb\\xf0\\xa7\\xc0\\\n\\x18\\x90\\x4f\\xb3\\x71\\x7b\\x4a\\xc9\\x81\\x7d\\x48\\x11\\xc0\\xbf\\x9c\\x32\\\n\\x8d\\x14\\xf0\\xe6\\xe5\\x52\\x36\\x94\\x62\\x4d\\x60\\x66\\x11\\x4d\\xe4\\xb4\\\n\\xb0\\x0a\\xec\\x14\\x94\\x49\\x00\\x51\\x7c\\x89\\x31\\x39\\x89\\x9c\\x1d\\x10\\\n\\xe8\\xb0\\x08\\x60\\xc4\\xc9\\x33\\x18\\x61\\x33\\xce\\x96\\x79\\xc9\\xb6\\x3c\\\n\\xf9\\xe6\\x1f\\xd8\\x4c\\x80\\x02\\x6b\\x33\\xfb\\x75\\x1b\\xd9\\x72\\xd5\\x6c\\\n\\xb6\\x9c\\x43\\x92\\x0b\\x0a\\xa0\\xc3\\x52\\x81\\x21\\x7c\\x1b\\x61\\x93\\x11\\\n\\x5b\\x7e\\xf2\\xc7\\xd7\\x29\\xd3\\x19\\x66\\xd3\\x48\\x1d\\x55\\xc8\\x36\\x1f\\\n\\x4f\\xe7\\xe7\\x7a\\x1c\\x77\\x3f\\x02\\x69\\x31\\x20\\x60\\xa9\\xc0\\x49\\x9c\\\n\\x31\\x6d\\x01\\x71\\xd7\\xe9\\xae\\xb9\\x93\\xd4\\x04\\x63\\x96\\xcb\\x1f\\x78\\\n\\xe0\\x41\\x36\\xec\\x63\\x69\\x79\\x39\\x0a\\x14\\x7c\\x8e\\x41\\x9a\\x00\\x08\\\n\\xec\\x45\\x9f\\x85\\x06\\xdd\\x47\\x26\\xd6\\x8e\\x8f\\xcc\\x9f\\xc3\\x96\\x89\\\n\\x2f\\x28\\x38\\x9a\\xb1\\xca\\x6c\\x32\\x66\\x35\\x36\\x5e\\xef\\xbc\\xfb\\x11\\\n\\xc8\\x13\\x80\\x08\\xec\\xb5\\x28\\x66\\xba\\x8f\\x4c\\x28\\xdf\\x5b\\xcb\\x8b\\\n\\x2c\\x9e\\xbf\\x27\\xff\\x3f\\x60\\xae\\x60\\xc9\\xf7\\x3f\\x9b\\xe9\\xea\\xb7\\\n\\x88\\x2b\\xab\\x6e\\xc7\\xe3\\x0d\\x6a\\x1e\\x9d\\x94\\x2a\\x80\\x88\\x05\\x7b\\\n\\x47\\xde\\x42\\x0b\\xb7\\x62\\x74\\x23\\x18\\x9e\\xb8\\x0b\\x1e\\xf5\\x55\\xb0\\\n\\xc5\\x1c\\xde\\x6e\\xf2\\xff\\x34\\xf9\\x3d\\x54\\x54\\x65\\xec\\xfb\\x27\\xc6\\\n\\x15\\xff\\x3d\\x77\\xc2\\xcf\\x76\\x72\\x0c\\x31\\xac\\x3f\\x0c\\x8b\\xcb\\x48\\\n\\x1b\\xc9\\x02\\x10\\xfe\\xad\\x38\\x31\\x42\\x3b\\xc1\\xa8\\x42\\x77\\x90\\x06\\\n\\x9f\\x18\\x8d\\x1f\\xa0\\x6c\\x48\\x7c\\x0e\\x2b\\xca\\xd8\\x3e\\x60\\x97\\x61\\\n\\xf5\\xd7\\x51\\xf5\\x3a\\x9d\\xc9\\xe7\\xfc\\x3e\\x81\\xc1\\x63\\x6c\\x30\\xf5\\\n\\xdb\\xf0\\xf1\\x0b\\xd7\\x72\\xc3\\x48\\x35\\x6a\\x13\\x57\\x0e\\x21\\x62\\x18\\\n\\x8d\\x3b\\xd2\\x8f\\xf0\\xab\\x54\\xb4\\x65\\x7a\\x0e\\x41\\xc8\\x17\\x40\\xe0\\\n\\xa7\\x9d\\x70\\x62\\x04\\x7d\\x6f\\x75\\x5e\\xdc\\x0d\\xdd\\xc1\\x6a\\xb4\\xd2\\\n\\x12\\x8a\\xb0\\x0e\\x22\\x18\\x87\\xff\\x3d\\x47\\x2b\\xff\\x65\\x20\\xf4\\x7a\\\n\\xac\\x53\\xac\\xfa\\xf6\\xdd\\x40\\xd7\\x4b\\xd3\\x5b\\xf9\\x22\\x5b\\x3a\\x64\\\n\\xb8\\x9f\\x3c\\x76\\x1c\\xd8\\x6f\\xb8\\xe1\\x4f\\xc2\\x6e\\xea\\xda\\x8a\\xfa\\\n\\x1c\\xab\\x69\\xf0\\x63\\x6b\\x8f\\x79\\xf7\\xc6\\xc6\\xed\\xa9\\xa6\\xd9\\x7f\\\n\\x21\\xf3\\x73\\x20\\x81\\xe3\\x8f\\xa5\\x08\\x22\\xfd\\x5d\\xe8\\x3d\\x72\\x08\\\n\\x87\\x86\\x68\\x4d\\x9d\\x34\\x9d\\x3b\\xd6\\x35\\x50\\xa1\\x44\\x0e\\xa1\\xf5\\\n\\xe1\\x4b\\x67\\x38\\xa9\\x20\\x8e\\xa5\\xb7\\x1b\\x26\\x57\\x20\\x02\\x76\\x17\\\n\\xc5\\x8c\\x41\\xda\\x51\\xfb\\x49\\xd4\\xb8\\xeb\\xa9\\x23\\x61\\xd7\\x86\\x51\\\n\\x7c\\xcf\\x4d\\x18\\x6d\\x5b\\x81\\x8a\\x64\\xc5\\x97\\x58\\xed\\xa1\\xe0\\xa5\\\n\\x7b\\xda\\x2d\\x9d\\xe8\\xeb\\xa1\\xc9\\x4f\\xcd\\x67\\x4d\\x89\\x12\\x01\\x92\\\n\\xf1\\x6c\\xe4\\x57\\xbc\\x31\\xfa\\x3b\\xb7\\xd2\\x20\\x99\\x00\\x93\\xf0\\xfc\\\n\\x62\\x2f\\x5e\\x5b\\x36\\x97\\x5b\\x6a\\x70\\xc6\\x05\\xa5\\xc1\\x33\\x0b\\x2b\\\n\\x1c\\x39\\x8d\\x2c\\xa1\\x9c\\xff\\xe9\\x85\\x5e\\x6e\\xa9\\x23\\xeb\\x04\\x10\\\n\\xb7\\x03\\x9f\\x24\\x11\\x64\\xf3\\xd4\\x22\\xaf\\xe3\\xe7\\x3e\\x56\\x64\\x9d\\\n\\x00\\x82\\x6d\\x34\\x39\\x4b\\x0a\\xe5\\x7c\\x28\\x4e\\xb0\\xac\\x20\\x1f\\xdb\\\n\\x16\\x57\\x72\\x4b\\x2d\\x59\\x29\\x80\\xc8\\x88\\xde\\x5e\\x3e\\x8f\\x5b\\xf6\\\n\\xf3\\xf6\\xca\\xab\\x94\\x1c\\x3b\\x58\\x91\\x95\\x02\\x08\\xda\\xbd\\xa5\\xb8\\\n\\xbb\\x2a\\x95\\xfb\\xc6\\xe9\\x71\\x2f\\xfd\\xce\\x40\\xf4\\x91\\x93\\xec\\x20\\\n\\x6b\\x05\\x10\\xec\\x59\\x39\\x1f\\x8b\\x0b\\x52\\xf9\\x07\\x19\\x94\\xe7\\x9f\\\n\\x30\\x65\\x40\\x02\\x53\\x21\\xb6\\x94\\xdc\\xda\\x6e\\xfa\\x9d\\xd9\\x44\\x56\\\n\\x0b\\x20\\x82\\xe4\\xe1\\x6b\\x16\\x26\\xff\\x90\\x77\\xf4\\xb1\\x14\\xf1\\xe4\\\n\\x03\\xb7\\x13\\xa0\\x6a\\x3a\\x14\\x7b\\x0c\\x25\\xff\\x6c\\x0e\\xfd\\xae\\x05\\\n\\xc9\\x73\\x7e\\x05\\x64\\x5d\\x1d\\x60\\xc5\\x81\\xb3\\xe7\\xb0\\x65\\xe8\\x27\\\n\\x8c\\x4f\\xf3\\xc3\\xd2\\x74\\x91\\xf8\\x70\\xd5\\x02\\xdc\\x37\\xd7\\xd9\\xfb\\\n\\xbd\\xa9\\x90\\xd5\\x3b\\x20\\xce\\xe6\\x79\\x65\\x78\\x87\\x5c\\x87\\x98\\xc8\\\n\\x74\\x11\\x3f\\xb3\\xbb\\xc6\\x97\\x95\\x93\\x2f\\x70\\x85\\x00\\x82\\xc7\\xae\\\n\\x9e\\x83\\x83\\xb4\\x8a\\x45\\x01\\x95\\x2a\\xe2\\x7b\\x3f\\x22\\x17\\x16\\xf6\\\n\\xa9\\x39\\xeb\\x4f\\x05\\xd7\\x08\\x20\\xd8\\x44\\xab\\xf8\\xab\\x66\\x3f\\xd6\\\n\\xcf\\x9e\\x3a\\x8b\\x11\\x0f\\x00\\x9f\\xbe\\xc1\\x2f\\x25\\x93\\xb2\\x13\\x57\\\n\\xc4\\x00\\x2b\\x4e\\x9d\\xfb\\x1b\\xef\\xff\\xf2\\x27\\x8e\\xff\\x75\\x1e\\xa3\\\n\\xff\\x5c\\x88\\xf6\\x2d\\x9a\\x39\\x03\\x37\\x91\\x38\\x0f\\xcd\\x2f\\x47\\xb3\\\n\\x4b\\xfe\\x45\\x8e\\x6d\\x02\\x0c\\x0e\\x7d\\x83\\x03\\xbd\\xb1\\xb3\\xf6\\xcd\\\n\\xed\\xeb\\xd0\\x54\\xbf\\x22\\x6a\\x5f\\x69\\xfd\\xe9\\x62\\x9b\\x0b\\xda\\xff\\\n\\xc9\\x51\\x9c\\x3b\\x7f\\x3e\\xfa\\xfa\\xa0\\xef\\x33\\xee\\xbd\\xf2\\xfa\\xd3\\\n\\xc5\\x36\\x01\\xc6\\x0d\\xc1\\x31\\xd7\\x10\\x27\\xaf\\xb4\\xfe\\x74\\xc9\\xdd\\\n\\x41\\xb0\\x9d\\x12\\x67\\xff\\xf8\\x93\\xad\\x18\\xf3\\xbc\\xb1\\x27\\x1a\\x2a\\\n\\xca\\x66\\x61\\xe4\\x87\\x31\\x14\\x52\\xe5\\xba\\x39\\x78\\x0b\\x7c\\x55\\xb1\\\n\\xa3\\xde\\x2b\\xad\\x3f\\x5d\\x5c\\x1b\\x84\\x2f\\x17\\x5c\\x95\\x86\\x5e\\x8e\\\n\\x68\\x01\\x14\\xa3\\x05\\x50\\x8c\\x16\\x40\\x31\\x5a\\x00\\xc5\\x64\\x9c\\x05\\\n\\x69\\x12\\x49\\x37\\x2b\\xd4\\x3b\\x40\\x31\\x5a\\x00\\xc5\\x68\\x01\\x14\\x93\\\n\\x76\\x0c\\xd0\\xd8\\x8b\\xde\\x01\\x8a\\xd1\\x02\\x28\\x46\\x0b\\xa0\\x18\\x2d\\\n\\x80\\x62\\xb4\\x00\\x8a\\xd1\\x02\\x28\\x46\\x0b\\xa0\\x18\\x2d\\x80\\x62\\xb4\\\n\\x00\\x8a\\xd1\\x02\\x28\\x46\\x0b\\xa0\\x14\\xe0\\x7f\\xee\\x0a\\xc7\\x1a\\x6a\\\n\\x0b\\x9a\\x3b\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x31\\x22\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x01\\x2c\\x00\\x00\\x01\\x2c\\x08\\x06\\x00\\x00\\x00\\x79\\x7d\\x8e\\x75\\\n\\x00\\x00\\x01\\x61\\x69\\x43\\x43\\x50\\x6b\\x43\\x47\\x43\\x6f\\x6c\\x6f\\x72\\\n\\x53\\x70\\x61\\x63\\x65\\x44\\x69\\x73\\x70\\x6c\\x61\\x79\\x50\\x33\\x00\\x00\\\n\\x28\\x91\\x63\\x60\\x60\\x52\\x49\\x2c\\x28\\xc8\\x61\\x61\\x60\\x60\\xc8\\xcd\\\n\\x2b\\x29\\x0a\\x72\\x77\\x52\\x88\\x88\\x8c\\x52\\x60\\x7f\\xc8\\xc0\\x0e\\x84\\\n\\xbc\\x0c\\x62\\x0c\\x0a\\x89\\xc9\\xc5\\x05\\x8e\\x01\\x01\\x3e\\x40\\x25\\x0c\\\n\\x30\\x1a\\x15\\x7c\\xbb\\xc6\\xc0\\x08\\xa2\\x2f\\xeb\\x82\\xcc\\x3a\\x25\\x35\\\n\\xb5\\x49\\xb5\\x5e\\xc0\\xd7\\x62\\xa6\\xf0\\xd5\\x8b\\xaf\\x44\\x9b\\x30\\xd5\\\n\\xa3\\x00\\xae\\x94\\xd4\\xe2\\x64\\x20\\xfd\\x07\\x88\\x53\\x93\\x0b\\x8a\\x4a\\\n\\x18\\x18\\x18\\x53\\x80\\x6c\\xe5\\xf2\\x92\\x02\\x10\\xbb\\x03\\xc8\\x16\\x29\\\n\\x02\\x3a\\x0a\\xc8\\x9e\\x03\\x62\\xa7\\x43\\xd8\\x1b\\x40\\xec\\x24\\x08\\xfb\\\n\\x08\\x58\\x4d\\x48\\x90\\x33\\x90\\x7d\\x03\\xc8\\x56\\x48\\xce\\x48\\x04\\x9a\\\n\\xc1\\xf8\\x03\\xc8\\xd6\\x49\\x42\\x12\\x4f\\x47\\x62\\x43\\xed\\x05\\x01\\x6e\\\n\\x97\\xcc\\xe2\\x82\\x9c\\xc4\\x4a\\x85\\x00\\x63\\x02\\xae\\x25\\x03\\x94\\xa4\\\n\\x56\\x94\\x80\\x68\\xe7\\xfc\\x82\\xca\\xa2\\xcc\\xf4\\x8c\\x12\\x05\\x47\\x60\\\n\\x28\\xa5\\x2a\\x78\\xe6\\x25\\xeb\\xe9\\x28\\x18\\x19\\x18\\x9a\\x33\\x30\\x80\\\n\\xc2\\x1c\\xa2\\xfa\\x73\\x20\\x38\\x2c\\x19\\xc5\\xce\\x20\\xc4\\x9a\\xef\\x33\\\n\\x30\\xd8\\xee\\xff\\xff\\xff\\xff\\x6e\\x84\\x98\\xd7\\x7e\\x06\\x86\\x8d\\x40\\\n\\x9d\\x5c\\x3b\\x11\\x62\\x1a\\x16\\x0c\\x0c\\x82\\xdc\\x0c\\x0c\\x27\\x76\\x16\\\n\\x24\\x16\\x25\\x82\\x85\\x98\\x81\\x98\\x29\\x2d\\x8d\\x81\\xe1\\xd3\\x72\\x06\\\n\\x06\\xde\\x48\\x06\\x06\\xe1\\x0b\\x40\\x3d\\xd1\\xc5\\x69\\xc6\\x46\\x60\\x79\\\n\\x46\\x1e\\x27\\x06\\x06\\xd6\\x7b\\xff\\xff\\x7f\\x56\\x63\\x60\\x60\\x9f\\xcc\\\n\\xc0\\xf0\\x77\\xc2\\xff\\xff\\xbf\\x17\\xfd\\xff\\xff\\x77\\x31\\x50\\xf3\\x1d\\\n\\x06\\x86\\x03\\x79\\x00\\x15\\x21\\x65\\xee\\x35\\xc7\\xd1\\xfb\\x00\\x00\\x2f\\\n\\x7c\\x49\\x44\\x41\\x54\\x78\\x01\\xed\\x9d\\x09\\x7c\\x1c\\xc5\\x9d\\xef\\xff\\\n\\xba\\x2f\\x4b\\xb2\\x24\\x4b\\x96\\xe5\\x4b\\xbe\\x0f\\x7c\\x08\\x83\\xc1\\x36\\\n\\xa7\\x01\\x07\\x30\\xe1\\x0a\\x01\\x72\\x27\\xbb\\x49\\x48\\x5e\\x0e\\xc2\\xdb\\\n\\x1c\\x9b\\x0d\\x1b\\xde\\x26\\x9f\\xcd\\x23\\xcb\\x2e\\x1f\\xf6\\x6d\\x92\\x25\\\n\\xc7\\xcb\\xcb\\xb5\\x9b\\x84\\x38\\x4b\\x82\\x49\\x08\\x84\\x24\\x1c\\x36\\xb6\\\n\\x39\\x6c\\x7c\\x61\\xe3\\x43\\xbe\\x2d\\xc9\\x96\\x25\\xeb\\xb0\\x6e\\x69\\xf4\\\n\\xea\\x57\\x62\\x8c\\xd6\\xee\\x19\\xf5\\x4c\\x77\\x57\\x77\\x8f\\x7e\\xc5\\xa7\\\n\\x98\\x71\\x4f\\x75\\x55\\xf5\\xb7\\x47\\xbf\\xa9\\xae\\xfa\\xd7\\xff\\x9f\\x36\\\n\\xa8\\x92\\x30\\x91\\x00\\x09\\x90\\x40\\x08\\x08\\xa4\\x87\\xa0\\x8f\\xec\\x22\\\n\\x09\\x90\\x00\\x09\\x68\\x02\\x14\\x2c\\x7e\\x11\\x48\\x80\\x04\\x42\\x43\\x80\\\n\\x82\\x15\\x9a\\x5b\\xc5\\x8e\\x92\\x00\\x09\\x64\\x86\\x19\\x41\\x6f\\xa4\\x4b\\\n\\x5a\\xfa\\x1a\\xe5\\x4c\\x7f\\x8b\\xca\\xa7\\xa5\\xb3\\xbf\\x4d\\x3a\\x07\\xda\\\n\\xa5\\x6b\\xe0\\x8c\\xf4\\xa8\\xcf\\x7a\\x22\\x9d\\xd2\\x17\\xe9\\x19\\xca\\x83\\\n\\xbd\\x32\\x30\\xd8\\x27\\xfd\\x11\\xf5\\x2a\\xfd\\x12\\x19\\x8c\\xa8\\x7f\\xf7\\\n\\xcb\\xa0\\x44\\xf4\\xfb\\x41\\xf5\\x6e\\x50\\x1d\\xc3\\x2b\\xd2\\xd0\\x2b\\xa7\\\n\\xf7\\xc2\\xfc\\xfd\\x08\\x73\\xdf\\xd3\\x64\\x68\\x2c\\x91\\x26\\xea\\xbf\\x34\\\n\\xfc\\x3f\\x5d\\xe7\\xf4\\xb4\\x74\\x49\\x4f\\xcb\\x90\\x0c\\x64\\xc9\\x94\\x8c\\\n\\xf4\\x2c\\xc9\\x4c\\x43\\xce\\x96\\xec\\xf4\\x1c\\xc9\\x4a\\xcf\\x95\\x9c\\xf4\\\n\\x3c\\x95\\xf3\\x25\\x37\\xa3\\x40\\xf2\\x33\\x8a\\x54\\x2e\\x94\\x31\\x99\\x25\\\n\\x52\\x98\\x55\\x22\\x63\\xb3\\xca\\x55\\xb9\\xbc\\xd0\\xa2\\x49\\x0b\\xc3\\xa4\\\n\\x7b\\xf7\\x40\\x87\\xd4\\x75\\xd7\\x4a\\x7d\\x57\\xad\\x9c\\xea\\x3d\\x2e\\xcd\\\n\\xbd\\x0d\\x3a\\x77\\x0c\\xb4\\x84\\x16\\x3c\\x3b\\x4e\\x02\\x7e\\x11\\x28\\xc8\\\n\\x18\\x2b\\xa5\\xd9\\x95\\x3a\\x97\\x65\\x4f\\x94\\xaa\\xbc\\x19\\x52\\x95\\x3b\\\n\\x43\\x0b\\x9c\\x5f\\x7d\\xb2\\xdb\\x6e\\x20\\x05\\xab\\xbd\\xaf\\x59\\x6a\\x3b\\\n\\xb6\\xca\\x81\\x8e\\x1d\\x52\\xd7\\xb5\\x4f\\x9a\\xfb\\x1a\\xec\\x5e\\x0f\\xcb\\\n\\x91\\x00\\x09\\x24\\x49\\xa0\\x34\\xab\\x52\\x89\\xd7\\x2c\\x99\\x5e\\xb0\\x50\\\n\\x66\\x14\\xd4\\xa8\\x11\\x59\\x69\\x92\\x35\\x79\\x77\\x5a\\x60\\x04\\xab\\xbe\\\n\\xfb\\x80\\xec\\x6c\\x5d\\xaf\\x85\\xea\\x64\\xcf\\x11\\xef\\xae\\x98\\x35\\x93\\\n\\x00\\x09\\xd8\\x22\\x50\\x91\\x33\\x45\\x0b\\xd7\\x82\\xe2\\xcb\\x65\\x42\\xee\\\n\\x74\\x5b\\xe7\\x78\\x5d\\xc8\\x57\\xc1\\xc2\\x9c\\xd2\\x8e\\xd6\\x75\\xf2\\xea\\\n\\xe9\\xa7\\x05\\x82\\xc5\\x44\\x02\\x24\\x10\\x4c\\x02\\x10\\xac\\xa5\\x25\\x37\\\n\\xc8\\xc2\\xe2\\x2b\\xd4\\xfc\\x59\\x96\\x6f\\x9d\\xf4\\x45\\xb0\\x30\\xf1\\xfd\\\n\\xea\\xe9\\x67\\x64\\x63\\xf3\\x5a\\x3d\\x59\\xee\\xdb\\xd5\\xb3\\x61\\x12\\x20\\\n\\x81\\x84\\x08\\x60\\xf2\\x7e\\x79\\xe9\\x2d\\x4a\\xbc\\xae\\x97\\xcc\\xf4\\xec\\\n\\x84\\xce\\x75\\xa3\\xb0\\x51\\xc1\\xc2\\x2a\\xdc\\xd6\\xd6\\xe7\\xe4\\xf9\\xc6\\\n\\xc7\\xa4\\xbd\\xbf\\xd9\\x8d\\xfe\\xb3\\x0e\\x12\\x20\\x01\\x1f\\x08\\x14\\x66\\\n\\x96\\xca\\xd5\\xe5\\x77\\x4b\\x4d\\xf1\\x4a\\xb5\\x8a\\x69\\xce\\x3a\\xca\\x98\\\n\\x60\\xd5\\x75\\xed\\x97\\xa7\\x1a\\x7e\\xa0\\x57\\xfb\\x7c\\xe0\\xcb\\x26\\x49\\\n\\x80\\x04\\x3c\\x20\\x80\\xd5\\xc5\\xd5\\x95\\x1f\\x57\\x93\\xf5\\x33\\x3d\\xa8\\\n\\xfd\\xfc\\x2a\\x3d\\x17\\x2c\\xcc\\x53\\x3d\\xdf\\xf8\\x2b\\xd9\\xd0\\xf4\\x84\\\n\\xb2\\x6d\\x8a\\x9c\\xdf\\x03\\x1e\\x21\\x01\\x12\\x08\\x35\\x01\\xd8\\x88\\xad\\\n\\x28\\xbb\\x55\\x8d\\xb8\\xee\\xf2\\x7c\\x7e\\xcb\\x53\\xc1\\x6a\\xea\\xa9\\x93\\\n\\x35\\xc7\\x1f\\x96\\x93\\x3d\\x87\\x43\\x7d\\x43\\xd8\\x79\\x12\\x20\\x81\\x91\\\n\\x09\\x54\\xe4\\x4c\\x95\\x3b\\x27\\x7e\\x5e\\xca\\x72\\xaa\\x46\\x2e\\x9c\\x64\\\n\\x09\\xcf\\x04\\x6b\\x57\\xdb\\x46\\x59\\x5b\\xff\\x1d\\xe9\\x8d\\x74\\x27\\xd9\\\n\\x35\\x9e\\x46\\x02\\x24\\x10\\x36\\x02\\xd9\\xca\\xd2\\xfe\\x96\\x09\\x9f\\x96\\\n\\xf9\\x45\\xcb\\x3d\\xe9\\xba\\x27\\x82\\xb5\\xb1\\xe9\\x49\\x79\\xf6\\xe4\\x4f\\\n\\x3c\\xe9\\x30\\x2b\\x25\\x01\\x12\\x08\\x3e\\x81\\x55\\x15\\x1f\\x96\\xe5\\x65\\\n\\x37\\xbb\\xde\\x51\\x57\\x05\\x0b\\xae\\xb5\\x9e\\x3d\\xf9\\x53\\xd9\\xd4\\xfc\\\n\\xa4\\xeb\\x1d\\x65\\x85\\x24\\x40\\x02\\xe1\\x22\\xb0\\xac\\xf4\\x66\\x59\\x55\\\n\\xf1\\x21\\xbd\\x17\\xd2\\xad\\x9e\\xbb\\x26\\x58\\xd8\\x48\\xfc\\x44\\xdd\\xb7\\\n\\x65\\x67\\xdb\\x7a\\xb7\\xfa\\xc6\\x7a\\x48\\x80\\x04\\x42\\x4e\\x60\\x41\\xd1\\\n\\xe5\\x72\\x6b\\xd5\\x67\\xd4\\x64\\xbc\\x3b\\x7e\\x16\\x5c\\x31\\xa0\\xc0\\xc8\\\n\\x8a\\x62\\x15\\xf2\\x6f\\x16\\xbb\\x4f\\x02\\x1e\\x10\\xc0\\x00\\x06\\xda\\xe0\\\n\\x96\\x63\\x63\\x57\\x04\\x0b\\x8f\\x81\\x1c\\x59\\x79\\x70\\xb7\\x59\\x25\\x09\\\n\\xa4\\x00\\x01\\x68\\x03\\x34\\xc2\\x8d\\xe4\\x58\\xb0\\x30\\xc1\\xce\\x39\\x2b\\\n\\x37\\x6e\\x05\\xeb\\x20\\x81\\xd4\\x25\\x00\\x8d\\x80\\x56\\x38\\x4d\\x8e\\x04\\\n\\x0b\\xa6\\x0b\\x5c\\x0d\\x74\\x7a\\x0b\\x78\\x3e\\x09\\x8c\\x0e\\x02\\xd0\\x0a\\\n\\x68\\x86\\x93\\x94\\xb4\\x60\\xc1\\x28\\x14\\x76\\x56\\x4c\\x24\\x40\\x02\\x24\\\n\\x60\\x97\\x00\\x34\\x03\\xda\\x91\\x6c\\x4a\\x4a\\xb0\\xb0\\xdd\\x06\\x16\\xec\\\n\\x34\\x0a\\x4d\\x16\\x3b\\xcf\\x23\\x81\\xd1\\x49\\x00\\x9a\\x01\\xed\\x80\\x86\\\n\\x24\\x93\\x92\\x12\\x2c\\x78\\x5b\\xe0\\x76\\x9b\\x64\\x70\\xf3\\x1c\\x12\\x20\\\n\\x01\\x68\\x07\\x34\\x24\\x99\\x94\\xb0\\x60\\xc1\\xeb\\xc2\\x86\\xa6\\xb5\\xc9\\\n\\xb4\\xc5\\x73\\x48\\x80\\x04\\x48\\x40\\x13\\x80\\x86\\x40\\x4b\\x12\\x4d\\x09\\\n\\x09\\x16\\xfc\\x59\\xc1\\x45\\x0c\\xbd\\x2e\\x24\\x8a\\x99\\xe5\\x49\\x80\\x04\\\n\\x86\\x13\\x80\\x86\\x68\\x2d\\x51\\x9a\\x92\\x48\\x4a\\x48\\xb0\\xe0\\x7c\\x0f\\\n\\xd1\\x6b\\x98\\x48\\x80\\x04\\x48\\xc0\\x29\\x01\\x68\\x09\\x34\\x25\\x91\\x64\\\n\\x5b\\xb0\\xe0\\xd6\\x38\\xd9\\xe7\\xce\\x44\\x3a\\xc4\\xb2\\x24\\x40\\x02\\xa3\\\n\\x87\\x00\\x34\\x05\\xda\\x62\\x37\\xd9\\x16\\x2c\\xf8\\x60\\xa7\\x5b\\x63\\xbb\\\n\\x58\\x59\\x8e\\x04\\x48\\xc0\\x0e\\x01\\x68\\x0a\\xb4\\xc5\\x6e\\xb2\\x25\\x58\\\n\\x58\\x82\\x44\\xc0\\x08\\x26\\x12\\x20\\x01\\x12\\x70\\x9b\\x00\\xb4\\xc5\\xae\\\n\\x99\\x83\\x2d\\xc1\\x42\\x28\\x2e\\x84\\x82\\x67\\x22\\x01\\x12\\x20\\x01\\xb7\\\n\\x09\\x40\\x5b\\xa0\\x31\\x76\\x92\\x2d\\xc1\\x42\\xdc\\x40\\x26\\x12\\x20\\x01\\\n\\x12\\xf0\\x8a\\x80\\x5d\\x8d\\x19\\x51\\xb0\\x10\\xe0\\x94\\x41\\x4e\\xbd\\xba\\\n\\x4d\\xac\\x97\\x04\\x48\\x00\\x04\\xec\\xea\\xcc\\x88\\x82\\x85\\xf0\\xf1\\x4c\\\n\\x24\\x40\\x02\\x24\\xe0\\x35\\x01\\x3b\\x5a\\x33\\xa2\\x60\\xd5\\x76\\x6c\\xf5\\\n\\xba\\x9f\\xac\\x9f\\x04\\x48\\x80\\x04\\xc4\\x8e\\xd6\\xc4\\x15\\xac\\xf6\\xbe\\\n\\x66\\xb5\\x67\\xf0\\x08\\x51\\x92\\x00\\x09\\x90\\x80\\xe7\\x04\\xa0\\x35\\xd0\\\n\\x9c\\x78\\x29\\xae\\x60\\xd9\\x51\\xbc\\x78\\x95\\xf3\\x33\\x12\\x20\\x01\\x12\\\n\\x48\\x84\\xc0\\x48\\x9a\\x13\\x57\\xb0\\x0e\\x74\\xec\\x48\\xa4\\x2d\\x96\\x25\\\n\\x01\\x12\\x20\\x01\\x47\\x04\\x46\\xd2\\x9c\\xb8\\x82\\x55\\xd7\\xb5\\xcf\\x51\\\n\\xe3\\x3c\\x99\\x04\\x48\\x80\\x04\\x12\\x21\\x30\\x92\\xe6\\xc4\\x14\\xac\\xee\\\n\\x81\\x0e\\x69\\xee\\x6b\\x48\\xa4\\x2d\\x96\\x25\\x01\\x12\\x20\\x01\\x47\\x04\\\n\\xa0\\x39\\xd0\\x9e\\x58\\x29\\xa6\\x60\\xd1\\x2b\\x43\\x2c\\x64\\x3c\\x4e\\x02\\\n\\x24\\xe0\\x25\\x81\\x78\\xda\\x13\\x5b\\xb0\\xba\\xe8\\x46\\xc6\\xcb\\x9b\\xc2\\\n\\xba\\x49\\x80\\x04\\xac\\x09\\xd4\\xc7\\xd1\\x9e\\x98\\x82\\xd5\\xd4\\x7b\\xdc\\\n\\xba\\x36\\x1e\\x25\\x01\\x12\\x20\\x01\\x0f\\x09\\x9c\\x8a\\xa3\\x3d\\x31\\x05\\\n\\xab\\xb9\\x97\\xf3\\x57\\x1e\\xde\\x13\\x56\\x4d\\x02\\x24\\x10\\x83\\x40\\x3c\\\n\\xed\\x89\\x23\\x58\\xf5\\x31\\xaa\\xe3\\x61\\x12\\x20\\x01\\x12\\xf0\\x8e\\x40\\\n\\xc2\\x82\\xd5\\x1b\\xe9\\x92\\x8e\\x81\\x56\\xef\\x7a\\xc4\\x9a\\x49\\x80\\x04\\\n\\x48\\x20\\x06\\x81\\x8e\\x81\\x16\\x15\\x42\\xb0\\xcb\\xf2\\x53\\xcb\\x11\\x56\\\n\\x4b\\x6f\\xa3\\x65\\x61\\x1e\\x24\\x01\\x12\\x20\\x01\\x13\\x04\\x5a\\xfa\\xac\\\n\\x35\\xc8\\x52\\xb0\\xda\\xe9\\xac\\xcf\\xc4\\x3d\\x61\\x1b\\x24\\x40\\x02\\x31\\\n\\x08\\xb4\\xf7\\x59\\x3b\\x0c\\xb5\\x14\\x2c\\x7a\\x17\\x8d\\x41\\x91\\x87\\x49\\\n\\x80\\x04\\x8c\\x10\\xc0\\x63\\xa1\\x55\\xb2\\x14\\xac\\xce\\x81\\x76\\xab\\xb2\\\n\\x3c\\x46\\x02\\x24\\x40\\x02\\x46\\x08\\x74\\xf4\\xb7\\x59\\xb6\\x13\\x43\\xb0\\\n\\xac\\x0b\\x5b\\xd6\\xc0\\x83\\x24\\x40\\x02\\x24\\xe0\\x32\\x81\\xae\\x18\\x83\\\n\\x26\\x4b\\xc1\\x8a\\xb7\\x97\\xc7\\xe5\\x7e\\xb1\\x3a\\x12\\x20\\x01\\x12\\x38\\\n\\x8f\\x40\\xd7\\xc0\\x99\\xf3\\x8e\\xe1\\x80\\xa5\\x60\\xf5\\x44\\x3a\\x2d\\x0b\\\n\\xf3\\x20\\x09\\x90\\x00\\x09\\x98\\x20\\x10\\x4b\\x83\\x28\\x58\\x26\\xe8\\xb3\\\n\\x0d\\x12\\x20\\x81\\x84\\x08\\xf4\\x24\\x62\\x87\\xd5\\x17\\xe9\\x49\\xa8\\x72\\\n\\x16\\x26\\x01\\x12\\x20\\x01\\x37\\x09\\xf4\\x45\\xba\\x2d\\xab\\xb3\\x1c\\x61\\\n\\xf5\\x52\\xb0\\x2c\\x61\\xf1\\x20\\x09\\x90\\x80\\x19\\x02\\x7d\\x91\\x5e\\xcb\\\n\\x86\\x2c\\x05\\xab\\x7f\\xd0\\xba\\xb0\\x65\\x0d\\x3c\\x48\\x02\\x24\\x40\\x02\\\n\\x2e\\x13\\xe8\\x8b\\xa1\\x41\\x31\\x04\\xab\\xcf\\xe5\\xe6\\x59\\x1d\\x09\\x90\\\n\\x00\\x09\\xd8\\x27\\x10\\x6b\\xd0\\x64\\x29\\x58\\x03\\x11\\x0a\\x96\\x7d\\xb4\\\n\\x2c\\x49\\x02\\x24\\xe0\\x36\\x81\\x58\\x1a\\x64\\x2d\\x58\\xd2\\xef\\x76\\xfb\\\n\\xac\\x8f\\x04\\x48\\x80\\x04\\x6c\\x13\\x18\\x88\\xa1\\x41\\xd6\\x82\\x35\\x38\\\n\\x60\\xbb\\x62\\x16\\x24\\x01\\x12\\x20\\x01\\xb7\\x09\\x44\\x06\\x23\\x96\\x55\\\n\\x5a\\x0a\\x56\\x84\\x82\\x65\\x09\\x8b\\x07\\x49\\x80\\x04\\xcc\\x10\\x18\\x18\\\n\\xb4\\x7e\\xca\\x8b\\x21\\x58\\xd6\\xea\\x66\\xa6\\xab\\x6c\\x85\\x04\\x48\\x60\\\n\\xb4\\x13\\x18\\x14\\x6b\\x0d\\xb2\\x14\\xac\\x58\\x85\\x47\\x3b\\x44\\x5e\\x3f\\\n\\x09\\x90\\x80\\x19\\x02\\x09\\x3d\\x12\\x52\\xb0\\xcc\\xdc\\x14\\xb6\\x42\\x02\\\n\\x24\\x60\\x4d\\x60\\x50\\x06\\x2d\\x3f\\xb0\\x1e\\x61\\x0d\\x5a\\x17\\xb6\\xac\\\n\\x81\\x07\\x49\\x80\\x04\\x48\\xc0\\x65\\x02\\x83\\x89\\x4c\\xba\\xc7\\x52\\x37\\\n\\x97\\xfb\\xc4\\xea\\x48\\x80\\x04\\x48\\xc0\\x92\\x40\\x2c\\x0d\\xb2\\x1e\\x61\\\n\\xc5\\x18\\x8e\\x59\\xd6\\xcc\\x83\\x24\\x40\\x02\\x24\\x60\\x88\\x80\\xa5\\x60\\\n\\x09\\x05\\xcb\\x10\\x7e\\x36\\x43\\x02\\x24\\x60\\x45\\x20\\xa1\\x11\\x96\\x55\\\n\\x05\\x3c\\x46\\x02\\x24\\x40\\x02\\xe6\\x08\\x58\\xcf\\xa3\\xc7\\x18\\x61\\x99\\\n\\xeb\\x16\\x5b\\x22\\x01\\x12\\x20\\x01\\xbb\\x04\\x28\\x58\\x76\\x49\\xb1\\x1c\\\n\\x09\\x90\\x80\\xef\\x04\\x28\\x58\\xbe\\xdf\\x02\\x76\\x80\\x04\\x48\\xc0\\x2e\\\n\\x01\\x0a\\x96\\x5d\\x52\\x2c\\x47\\x02\\x24\\xe0\\x3b\\x01\\x0a\\x96\\xef\\xb7\\\n\\x80\\x1d\\x20\\x01\\x12\\xb0\\x4b\\x80\\x82\\x65\\x97\\x14\\xcb\\x91\\x00\\x09\\\n\\xf8\\x4e\\x80\\x82\\xe5\\xfb\\x2d\\x60\\x07\\x48\\x80\\x04\\xec\\x12\\xa0\\x60\\\n\\xd9\\x25\\xc5\\x72\\x24\\x40\\x02\\xbe\\x13\\xa0\\x60\\xf9\\x7e\\x0b\\xd8\\x01\\\n\\x12\\x20\\x01\\xbb\\x04\\x28\\x58\\x76\\x49\\xb1\\x1c\\x09\\x90\\x80\\xef\\x04\\\n\\x28\\x58\\xbe\\xdf\\x02\\x76\\x80\\x04\\x48\\xc0\\x2e\\x01\\x0a\\x96\\x5d\\x52\\\n\\x2c\\x47\\x02\\x24\\xe0\\x3b\\x01\\x0a\\x96\\xef\\xb7\\x80\\x1d\\x20\\x01\\x12\\\n\\xb0\\x4b\\x80\\x82\\x65\\x97\\x14\\xcb\\x91\\x00\\x09\\xf8\\x4e\\x80\\x82\\xe5\\\n\\xfb\\x2d\\x60\\x07\\x48\\x80\\x04\\xec\\x12\\xa0\\x60\\xd9\\x25\\xc5\\x72\\x24\\\n\\x40\\x02\\xbe\\x13\\xa0\\x60\\xf9\\x7e\\x0b\\xd8\\x01\\x12\\x20\\x01\\xbb\\x04\\\n\\x28\\x58\\x76\\x49\\xb1\\x1c\\x09\\x90\\x80\\xef\\x04\\x28\\x58\\xbe\\xdf\\x02\\\n\\x76\\x80\\x04\\x48\\xc0\\x2e\\x01\\x0a\\x96\\x5d\\x52\\x2c\\x47\\x02\\x24\\xe0\\\n\\x3b\\x01\\x0a\\x96\\xef\\xb7\\x80\\x1d\\x20\\x01\\x12\\xb0\\x4b\\x80\\x82\\x65\\\n\\x97\\x14\\xcb\\x91\\x00\\x09\\xf8\\x4e\\x80\\x82\\xe5\\xfb\\x2d\\x60\\x07\\x48\\\n\\x80\\x04\\xec\\x12\\xa0\\x60\\xd9\\x25\\xc5\\x72\\x24\\x40\\x02\\xbe\\x13\\xc8\\\n\\xf4\\xbd\\x07\\xec\\x40\\xe8\\x08\\x9c\\x39\\xd5\\x2d\\xcd\\x47\\x3b\\xe4\\x4c\\\n\\x63\\x97\\xf4\\x74\\x0e\\x48\\x5f\\x57\\xbf\\xf4\\x76\\xa8\\xdc\\x35\\x20\\xbd\\\n\\x9d\\xfd\\xfa\\xdf\\x69\\xe9\\x69\\x92\\x5d\\x90\\x29\\xd9\\xf9\\x99\\x92\\xf3\\\n\\xd6\\x6b\\xf4\\xfd\\xd8\\xaa\\x02\\x29\\x9d\\x5a\\x20\\x99\\xd9\\x19\\xa1\\xbb\\\n\\x76\\x76\\xd8\\x5f\\x02\\x14\\x2c\\x7f\\xf9\\x07\\xba\\xf5\\xa6\\x43\\xed\\x72\\\n\\xe8\\xb5\\x53\\xd2\\x74\\xf8\\x8c\\x34\\x1f\\xe9\\x50\\xf9\\x8c\\x9c\\x3e\\x7a\\\n\\x46\\x89\\xd2\\x80\\xe3\\x7e\\xa7\\xa5\\x89\\x14\\x57\\xe5\\x4b\\x59\\x75\\xa1\\\n\\x8c\\x9b\\x36\\x46\\xbf\\x56\\xce\\x2e\\x96\\x49\\x35\\xa5\\x92\\x91\\xc9\\x81\\\n\\xbf\\x63\\xc0\\x29\\x5a\\x01\\x05\\x2b\\x45\\x6f\\x6c\\x32\\x97\\xd5\\xd9\\xd2\\\n\\x23\\x07\\x36\\x36\\x4a\\xed\\x86\\x13\\x52\\xbb\\xf1\\xa4\\xb4\\xd6\\x75\\x26\\\n\\x53\\x8d\\xad\\x73\\x06\\x55\\x24\\xf2\\x96\\xe3\\x9d\\x3a\\xd7\\xbe\\x74\\xe2\\\n\\xec\\x39\\x18\\x8d\\x4d\\x5f\\x31\\x5e\\x66\\x5f\\x59\\x29\\x33\\xaf\\x18\\x2f\\\n\\x45\\x15\\x79\\x67\\x3f\\xe3\\x1b\\x12\\xa0\\x60\\xf9\\xfc\\x1d\\xe8\\x38\\xdd\\\n\\x23\\x5b\\x7f\\x7b\\x58\\xc6\\x55\\x8f\\x91\\x39\\x2b\\xab\\x8c\\xf7\\xa6\\xaf\\\n\\x7b\\x40\\x5e\\xff\\xcd\\x21\\x79\\xfd\\xf1\\x43\\x52\\xbf\\xab\\x45\\x20\\x24\\\n\\x7e\\xa6\\x1e\\xf5\\x68\\xb9\\xfb\\xd9\\xe3\\x3a\\xa3\\x1f\\x95\\x73\\x8b\\x65\\\n\\xee\\xb5\\x55\\x72\\xc9\\xfb\\x66\\x48\\x41\\x49\\x8e\\x6f\\x5d\\xfb\\xd3\\x23\\\n\\x3b\\x65\\xca\\x92\\x32\\x25\\xa2\\x95\\x92\\xae\\x1e\\x77\\x99\\xfc\\x21\\x40\\\n\\xc1\\xf2\\x81\\xfb\\xa0\\x52\\x85\\x83\\x2f\\x37\\xca\\xe6\\x35\\x07\\x65\\xf7\\\n\\x9f\\x8e\\xcb\\x40\\xdf\\xa0\\xdc\\xf4\\xd5\\x1a\\xa3\\x3d\\xe9\\x6c\\xe9\\x95\\\n\\x57\\x7f\\x51\\x2b\\x9b\\xfe\\x63\\xbf\\x74\\x9e\\xee\\x35\\xda\\x76\\x22\\x8d\\\n\\x35\\xbc\\xd9\\x2a\\xc8\\x2f\\xfd\\xbf\\xbd\\x72\\xc9\\x7b\\x67\\xc8\\x8a\\x8f\\\n\\xcc\\x92\\x31\\xe3\\x72\\x13\\xa9\\xc2\\x95\\xb2\\xfb\\xd6\\x37\\xc8\\xba\\x1f\\\n\\xec\\x91\\xe2\\x09\\x79\\xb2\\xe4\\x8e\\x6a\\xb9\\xf0\\x5d\\xd5\\x52\\x5c\\x99\\\n\\xef\\x4a\\xdd\\xac\\xc4\\x3e\\x01\\x0a\\x96\\x7d\\x56\\x8e\\x4b\\x9e\\x69\\xea\\\n\\x96\\xad\\xbf\\x39\\x2c\\x9b\\x7f\\x7d\\x50\\xcf\\x09\\x39\\xae\\x30\\x89\\x0a\\\n\\x5a\\xeb\\x3b\\x65\\xc3\\x8f\\xf7\\xe9\\x3e\\xf4\\xa9\\x49\\xf2\\xb0\\x24\\xf4\\\n\\x15\\xa2\\xf5\\xf2\\x7f\\xee\\x97\\x8b\\xef\\x9a\\x2e\\x97\\x7d\\x74\\xb6\\x2f\\\n\\x8f\\x8b\\xad\\xf5\\x5d\\xf2\\xdc\\xb7\\x77\\xcb\\xf3\\xff\\xbe\\x5b\\x66\\x5d\\\n\\x39\\x41\\x2e\\xbe\\xb3\\x5a\\x66\\x5d\\x35\\x81\\xa3\\x2e\\x43\\x5f\\x24\\x0a\\\n\\x96\\xc7\\xa0\\x31\\x9a\\x3a\\xa0\\xe6\\x83\\xf4\\x68\\xea\\xcf\\x75\\x12\\xe9\\\n\\xf7\\xef\\x99\\x6b\\xc7\\x53\\x47\\x65\\xed\\x03\\x9b\\x5d\\x99\\x34\\xf7\\x18\\\n\\x5b\\xcc\\xea\\xfb\\x7b\\x22\\xb2\\xe9\\x67\\xfb\\xe5\\xd5\\x5f\\x1e\\x90\\x77\\\n\\x7c\\x71\\xa1\\x2c\\xfb\\xc0\\xcc\\x98\\x65\\xbd\\xfc\\x60\\x30\\x22\\xb2\\xf7\\\n\\xf9\\x7a\\x9d\\x8b\\xc6\\xe7\\xe9\\x11\\x17\\x46\\x5e\\x63\\xd5\\x42\\x02\\x93\\\n\\x77\\x04\\x28\\x58\\x1e\\xb1\\x6d\\x6f\\xec\\xd6\\x73\\x43\\x5b\\x7e\\x7d\\x48\\\n\\x4e\\x1f\\xeb\\xf0\\xa8\\x15\\x7b\\xd5\\xf6\\xf7\\x0e\\xc8\\xd3\\xdf\\xdc\\xae\\\n\\xff\\xc8\\xed\\x9d\\x11\\xfc\\x52\\x03\\x7d\\x11\\xf9\\xc3\\xff\\xde\\x26\\xc7\\\n\\xb6\\x35\\xcb\\x2d\\x5f\\x5f\\x22\\xd9\\x79\\xfe\\x7d\\x95\\xdb\\x4e\\x74\\xc9\\\n\\x0b\\x8f\\xee\\x96\\x17\\xbf\\xbb\\x5b\\xcf\\x71\\x5d\\xf4\\xee\\x6a\\x3d\\x1f\\\n\\x99\\x9e\\xc1\\xb9\\x2e\\xb7\\xbf\\x49\\xfe\\xdd\\x65\\xb7\\xaf\\x24\\x00\\xf5\\\n\\x45\\x22\\x6a\\x34\\xa5\\x56\\xd8\\x5e\\xfb\\xd5\\x41\\xd9\\xf3\\x5c\\xbd\\x44\\\n\\x06\\xfc\\x1b\\x4d\\x45\\x71\\x34\\x2b\\x33\\x84\\x5f\\xdd\\xf7\\xb2\\xd4\\xef\\\n\\x6e\\x89\\x1e\\x4a\\xa9\\xd7\\x1d\\xbf\\x3f\\x2a\\x27\\xf6\\xb4\\xca\\x7b\\xfe\\\n\\x6d\\x99\\x36\\x8d\\xf0\\xf3\\xe2\\xb0\\x60\\xb1\\xef\\xc5\\x06\\x9d\\x31\\xcf\\\n\\x86\\x11\\xd7\\x12\\x25\\x5e\\x25\\x13\\x0b\\xfc\\xec\\x56\\x4a\\xb5\\x4d\\xc1\\\n\\x72\\xe1\\x76\\xb6\\x9d\\xec\\x92\\xd7\\xff\\xeb\\x90\\x6c\\x56\\xd9\\x4b\\x53\\\n\\x80\\x44\\xbb\\x7a\\xf0\\xe5\\x93\\xf2\\x8b\\xcf\\x6e\\x94\\x9e\\x33\\xfd\\x89\\\n\\x9e\\x1a\\xaa\\xf2\\x27\\xf7\\xb7\\xc9\\xf7\\xee\\xfc\\x8b\\xdc\\xf1\\xd0\\x52\\\n\\x5f\\x56\\x5a\\xad\\x60\\xc1\\xb8\\xf6\\xc5\\xef\\xbd\\xa9\\xf3\\x8c\\xcb\\xc6\\\n\\xeb\\xb9\\xae\\x39\\xd7\\x54\\xd1\\xc6\\xcc\\x0a\\x56\\x02\\xc7\\x28\\x58\\x09\\\n\\xc0\\x1a\\x5e\\x14\\xa3\\xa9\\xfd\\xeb\\x1a\\xe4\\x35\\xb5\\xd2\\x87\\xb9\\x0c\\\n\\xcc\\x69\\x04\\x29\\xe1\\x31\\xf4\\xb1\\xfb\\x36\\xa5\\xbc\\x58\\x45\\x99\\xc3\\\n\\x1c\\xe2\\x97\\x9f\\xdb\\x24\\x1f\\xf9\\xd1\\x95\\x32\\xf5\\xa2\\x71\\xd1\\xc3\\\n\\x81\\x78\\x85\\x9d\\x19\\x72\\x41\\x59\\x8e\\x5c\\x78\\x7b\\xb5\\xe0\\x91\\xb1\\\n\\x74\\xca\\x98\\x40\\xf4\\x2d\\x6c\\x9d\\xa0\\x60\\x25\\x78\\xc7\\x5a\\x1b\\x3a\\\n\\x65\\x8b\\x1a\\x49\\x21\\xb7\\x35\\x74\\x25\\x78\\xb6\\x99\\xe2\\xb0\\xad\\xfa\\\n\\xe5\\xbd\\x1b\\xa5\\xab\\xb5\\xcf\\x4c\\x83\\x01\\x69\\x05\\x0b\\x1a\\x8f\\x29\\\n\\xd1\\xfa\\xc4\\x9a\\x6b\\x94\\xf9\\x41\\x7e\\x40\\x7a\\xf5\\x76\\x37\\x3a\\x9a\\\n\\x7a\\x64\\xfd\\xff\\xdd\\xa3\\xf3\\xf4\\xe5\\x15\\x4a\\xb8\\xa6\\xc9\\xbc\\xeb\\\n\\xd4\\xa8\\x2b\\x8b\\x96\\xfd\\x6f\\x53\\x8a\\xff\\x8e\\x82\\x15\\x9f\\x8f\\xfe\\\n\\x14\\x73\\x51\\xfb\\x5e\\xac\\xd7\\x73\\x53\\x98\\xa3\\xf0\\xdb\\xb8\\x72\\xa4\\\n\\x2e\\xaf\\xfd\\x5f\\x9b\\xb5\\xed\\xd2\\x48\\xe5\\x52\\xf1\\xf3\\x8e\\xe6\\x1e\\\n\\xf9\\xf9\\x67\\x36\\xc8\\xc7\\xfe\\x73\\xa5\\x64\\xe5\\x06\\x77\\xaf\\x22\\x56\\\n\\x8e\\x91\\xf3\\x4b\\xb2\\xcf\\x8e\\xba\\xb0\\x4d\\x89\\x29\\x3e\\x01\\x0a\\x56\\\n\\x1c\\x3e\\x2d\\xc7\\x3b\\x86\\x46\\x53\\xca\\x0a\\xbc\\xfd\\x64\\x77\\x9c\\x92\\\n\\xc1\\xf9\\x08\\x86\\xa0\\xdb\\x9f\\x3c\\x1a\\x9c\\x0e\\xf9\\xd0\\x93\\x86\\xdd\\\n\\xad\\xf2\\xdb\\xfb\\x5f\\x93\\x3b\\x1f\\xbe\\xd4\\x87\\xd6\\x13\\x6b\\x12\\x46\\\n\\xbb\\xb0\\x2f\\x43\\xae\\xbe\\xa4\\x5c\\x2e\\xba\\x73\\x9a\\xcc\\x5f\\x35\\x51\\\n\\x6d\\x0c\\xe7\\xa8\\xcb\\x8a\\x24\\x05\\xeb\\x1c\\x2a\\x03\\xfd\\x11\\x3d\\x27\\\n\\x85\\xb9\\xa9\\xda\\xf5\\x27\\x02\\x3f\\x9a\\x1a\\xde\\xfd\\x53\\x07\\xdb\\xe5\\\n\\x99\\x87\\xb6\\x0f\\x3f\\x34\\x6a\\xdf\\xef\\xfc\\xc3\\x31\\x99\\x7c\\x61\\x99\\\n\\x6f\\x76\\x5a\\xc9\\x80\\x3f\\xf4\\x4a\\xa3\\x20\\x3f\\x55\\x9c\\x2d\\x35\\xb7\\\n\\x4d\\x55\\xe2\\x55\\x2d\\xe5\\xd3\\x8b\\x92\\xa9\\x2a\\x65\\xcf\\xa1\\x60\\xbd\\\n\\x75\\x6b\\x31\\x49\\x0d\\x0b\\xf4\\xd7\\x1f\\x3f\\x2c\\x58\\xe1\\x09\\x63\\x82\\\n\\x2d\\x90\\x9f\\x86\\xa9\\x41\\x63\\xb6\\xee\\xfb\\x6f\\x2a\\xab\\xf8\\x69\\xa1\\\n\\x73\\x63\\xd3\\xd5\\xda\\x2b\\x1b\\x7f\\xb2\\x4f\\xe7\\xa9\\x17\\x8f\\xd3\\x73\\\n\\x5d\\xf3\\xaf\\x9f\\x28\\x59\\x39\\xc1\\x7d\\xc4\\x35\\x75\\xef\\x47\\xb5\\x60\\\n\\xc1\\xf8\\x70\\xcf\\x73\\x75\\x7a\\x6e\\xaa\\x76\\xc3\\x49\\x53\\xcc\\x3d\\x69\\\n\\x07\\xa3\\x2b\\x58\\xb2\\x9b\\x4a\\x79\\x6a\\x14\\x80\\x47\\x98\\x69\\x97\\x96\\\n\\x4b\\xd9\\xd4\\x31\\x92\\x3b\\x26\\x4b\\x72\\xc6\\x28\\xdf\\x57\\x85\\x59\\x7a\\\n\\x9b\\x0a\\x0c\\x67\\xdb\\x95\\xb9\\x47\\xf4\\xb5\\xed\\x44\\xb7\\x1c\\xdf\\xd9\\\n\\x2c\\x78\\x5c\\x33\\x95\\xce\\x9c\\xea\\x91\\x6d\\x6b\\x8f\\xe8\\x3f\\x78\\x53\\\n\\x6d\\xba\\xdd\\xce\\x61\\xe5\\xde\\x07\\xf9\\x0f\\x0f\\x6e\\x95\\xc5\\xb7\\xa8\\\n\\x51\\x97\\x9a\\xa8\\xaf\\x98\\x35\\x7a\\x47\\x5d\\xa3\\x52\\xb0\\xe0\\xd7\\x09\\\n\\x5b\\x65\\x5e\\x57\\x5e\\x12\\xb0\\x72\\x93\\x0a\\x09\\x5b\\x55\\x4c\\x98\\x56\\\n\\x5c\\xfa\\x81\\x19\\xb2\\x44\\x6d\\xfc\\x1d\\x3f\\xa7\\x58\\xd2\\xe0\\xd4\\x2a\\\n\\x46\\x82\\xe1\\xe4\\x84\\x79\\x63\\xcf\\xfb\\xb4\\xb1\\xb6\\x4d\\xb6\\xff\\xee\\\n\\xa8\\xca\\x47\\xb4\\x6b\\x99\\xf3\\x0a\\xb8\\x7c\\x60\\xc3\\x8f\\xf6\\x69\\x03\\\n\\xce\\x78\\x7d\\x75\\xb9\\x49\\x4f\\xaa\\xc3\\x8a\\x2f\\xb6\\x24\\x21\\xe3\\x51\\\n\\x17\\x73\\x5d\\x0b\\x6e\\x98\\x14\\xe8\\x85\\x05\\x2f\\x40\\x8c\\x1a\\xc1\\xea\\\n\\xef\\x8d\\xc8\\x9b\\x6a\\x2f\\xdf\\x6b\\x6b\\x0e\\xc8\\xc1\\x4d\\x8d\\x5e\\xb0\\\n\\xf4\\xb5\\x4e\\x5c\\x9b\\x97\\x29\\xaf\\x38\\x4b\\x6e\\x7f\\x50\\x19\\x66\\x5e\\\n\\x3d\\xc1\\x51\\x33\\xe5\\x33\\x8a\\xe4\\xda\\xcf\\x5d\\x20\\xd7\\xdc\\x3b\\x5f\\\n\\x8e\\xbe\\xde\\x24\\xcf\\x3f\\xfa\\xa6\\xb6\\x51\\x72\\x54\\x69\\x9c\\x93\\x31\\\n\\xf2\\xdc\\xf3\\x97\\x7a\\xed\\xa2\\x26\\x4e\\xb1\\x50\\x7d\\x04\\x6e\\xc8\\x4f\\\n\\x3f\\xb8\\x4d\\x16\\xdd\\x3c\\x45\\x3f\\xf6\\x8e\\x57\\xce\\x0f\\x47\\x43\\x4a\\\n\\x79\\xc1\\x3a\\xa5\\xbc\\x66\\x62\\x34\\x05\\x9f\\x53\\x41\\x76\\xa3\\xe2\\xe4\\\n\\xcb\\x86\\x6d\\x37\\x2d\\x1e\\x3a\\xdb\\x9b\\xb8\\xb0\\x44\\xee\\xfe\\xd7\\x65\\\n\\xae\\xda\\x36\\x61\\xc4\\x33\\x65\\xc9\\x38\\xf9\\xe0\\xf7\\x2f\\xd3\\xa3\\x86\\\n\\x67\\x1f\\xde\\xa1\\xdd\\xec\\x38\\xe1\\x10\\xeb\\xdc\\xf5\\x6a\\x05\\x0e\\x3e\\\n\\xb5\\x52\\x2d\\x75\\xb7\\xf7\\xc9\\x2b\\x3f\\xaf\\xd5\\x79\\xd2\\xa2\\xd2\\xa1\\\n\\x51\\xd7\\xea\\x49\\xbe\\xee\\xab\\xf4\\x9a\\x71\\x4a\\x0a\\x16\\x36\\xfb\\xee\\\n\\x7a\\xb6\\x4e\\x36\\xff\\xea\\x80\\x1c\\x7a\\xf5\\x94\\xd7\\x0c\\x7d\\xaf\\x7f\\\n\\xff\\x30\\x8f\\x9d\\x6e\\x77\\x26\\x3d\\x33\\x4d\\x6d\\x79\\xb9\\xc4\\x55\\xb1\\\n\\x1a\\xde\\x47\\x08\\xd7\\xf2\\x0f\\xcd\\xd2\\xbe\\xdf\\xd7\\x3e\\xb0\\x65\\xf8\\\n\\x47\\xae\\xbd\\xc7\\x68\\xe4\\xc4\\xbe\\x56\\x19\\x3f\\x2b\\x75\\x47\\x21\\xc7\\\n\\xb6\\x37\\x0b\\xf2\\xd3\\xdf\\x1c\\x1a\\x75\\xe1\\x91\\xd1\\xea\\x91\\xdc\\x35\\\n\\xa8\\x3e\\x55\\x94\\x52\\x82\\x85\\xf9\\x11\\x3d\\x9a\\x7a\\xe2\\x88\\xb2\\xf2\\\n\\x0e\\xae\\x53\\x3a\\xb7\\xef\\xf5\\x49\\xf5\\xc7\\xe8\\x55\\x5a\\x7c\\xcb\\x14\\\n\\x3d\\xa9\\xee\\x55\\xfd\\xd1\\x7a\\x31\\x99\\x7c\\x64\\xf3\\x29\\xd9\\xaa\\xee\\\n\\x9d\\x17\\xe9\\xf8\\x8e\\xd3\\x29\\x2d\\x58\\x51\\x66\\xd8\\xa2\\x84\\xf9\\x4c\\\n\\xe4\\xaa\\x05\\x25\\x7a\\xd4\\xb5\\x70\\xf5\\x64\\x1d\\x08\\x24\\x5a\\x26\\xcc\\\n\\xaf\\xa1\\x17\\xac\\xbe\\x1e\\x35\\x9a\\x7a\\xe6\\xb8\\x9e\\x9b\\x3a\\xb2\\xb9\\\n\\x29\\x74\\xf7\\x62\\xcc\\xb8\\xa1\\xfd\\x65\\xd8\\xa2\\x91\\x6c\\xc2\\xe6\\x5f\\\n\\xaf\\x12\\x1e\\x35\\x4c\\xa5\\x55\\x5f\\x58\\x28\\xdb\\x95\\xf7\\x05\\x2f\\x4c\\\n\\x33\\xe0\\xd1\\xc1\\x49\\xba\\xfe\\x0b\\x8b\\xe4\\x65\\xf5\\xf8\\x85\\x7d\\xa3\\\n\\x41\\xf0\\xc2\\x61\\xe7\\x5a\\xea\\x76\\x9e\\x16\\xe4\\x67\\xfe\\x69\\xbb\\x2c\\\n\\xbc\\x69\\xb2\\x9e\\xeb\\xaa\\xba\\xa0\\xc4\\xce\\xa9\\x81\\x2d\\x13\\x5a\\xc1\\\n\\x3a\\xb9\\xaf\\x4d\\x8b\\x14\\x96\\xad\\xbb\\xdb\\xc2\\xb5\\x67\\x0e\\x8b\\x6b\\\n\\x08\\xb4\\x00\\x1b\\xa1\\x39\\x2b\\x27\\x38\\xda\\xc1\\x8f\\x4d\\xd8\\xa7\\x6a\\\n\\xdb\\x3d\\xfb\\x82\\x95\\x4e\\x36\\xb7\\x49\\x77\\x4c\\x59\\xae\\xcc\\x55\\x1e\\\n\\x0d\\x76\\xfd\\xf1\\xb8\\xeb\\xd7\\xd3\\xf0\\xa6\\x33\\xf7\\x3a\\xd8\\xfb\\x87\\\n\\xdc\\xae\\x42\\x9b\\xe9\\xbd\\xa4\\xca\\xcf\\x99\\x97\\xf3\\x86\\x6e\\x02\\x40\\\n\\xe8\\x35\\x3c\\x79\\x20\\xe3\\x31\\x11\\x8f\\x8b\\x8b\\x6e\\xc6\\xa8\\x2b\\xcb\\\n\\xcd\\x66\\x8c\\xd4\\x15\\x2a\\xc1\\xc2\\xa6\\xde\\x9d\\x4f\\x1f\\xd3\\x73\\x53\\\n\\x47\\xb7\\x36\\x1b\\x01\\xe4\\x66\\x23\\x85\\xe5\\xb9\\x43\\x9e\\x29\\x5d\\xf4\\\n\\x91\\xd4\\xa3\\x26\\x5e\\xb1\\x02\\xea\\x55\\xea\\xeb\\x36\\xeb\\x9a\\x06\\x16\\\n\\xde\\x9e\\x08\\x96\\xc3\\x11\\x56\\x94\\x6f\\x61\\x79\\x9e\\x5c\\xf5\\xc9\\x79\\\n\\x72\\xc5\\x3d\\x73\\xf5\\x5e\\xc0\\x21\\xdf\\x67\\xfe\\x7a\\x92\\x8d\\xf6\\xcd\\\n\\xce\\x2b\\x16\\x68\\x7e\\xf7\\xf5\\xd7\\xe5\\x99\\x7f\\x56\\xa3\\x2e\\xf5\\xa8\\\n\\x08\\xf1\\x32\\x39\\x8a\\xb6\\xd3\\xc7\\x78\\x65\\x42\\x21\\x58\\x0d\\xea\\xcb\\\n\\x86\\x09\\xf4\\x6d\\x4f\\x1e\\x09\\x9d\\xbb\\x14\\x8c\\xa6\\x10\\x69\\xe5\\x62\\\n\\xf5\\xc5\\x98\\x75\\x55\\xa5\\xa3\\xd1\\x94\\xd5\\x8d\\xc4\\x9c\\x85\\x97\\xa9\\\n\\xee\\x8d\\x16\\xa3\\x3e\\xa6\\xbc\\x9a\\x28\\xc6\\x28\\x1c\\x23\\x22\\xb7\\x5c\\\n\\x18\\x23\\x72\\xce\\x4c\\xe5\\xe7\\x0a\\x19\\x3b\\x23\\x10\\x79\\x68\\x33\\xbc\\\n\\xcb\\xaa\\x00\\xb3\\x61\\x48\\xf0\\x91\\x1f\\xf5\\x3a\\x02\\x9b\\x3a\\x08\\xd7\\\n\\x62\\x65\\x22\\x91\\xab\\x0c\\x7f\\x83\\x9c\\x02\\x2b\\x58\\x18\\xc6\\x62\\x3f\\\n\\x18\\xec\\xa6\\x8e\\x6f\\x3f\\x1d\\x64\\x86\\x96\\x7d\\x33\\xe5\\xe7\\x1b\\x11\\\n\\x97\\xbd\\x4c\\x58\\x79\\x32\\x99\\xc0\\x0d\\xb1\\x09\\xbd\\x10\\xe2\\x13\\x7b\\\n\\x5a\\x5c\\x13\\xac\\xe1\\x4c\\x60\\x24\\x7b\\xc5\\xc7\\xe7\\xca\\xe5\\x1f\\x9b\\\n\\x33\\xe4\\xbf\\x5f\\x6d\\xf1\\x82\\x5d\\x1c\\xa2\\x21\\x85\\x21\\x61\\x7e\\xef\\\n\\xa9\\x7f\\xdc\\x2a\\xcf\\xfe\\xcb\\x0e\\xb9\\x40\\x19\\xa3\\x62\\xaa\\x62\\x72\\\n\\x4d\\x59\\x20\\xbb\\x1e\\x38\\xc1\\x42\\x6c\\x3c\\x88\\xd4\\x0e\\x65\\x0d\\xed\\\n\\xc5\\x97\\xd6\\xcb\\xbb\\x90\\xa6\\x36\\xd8\\x9f\\x8d\\xa4\\xa2\\x22\\xaa\\x98\\\n\\xf0\\xe9\\x0d\\x61\\xf7\\x32\\xed\\x57\\x1b\\xc0\\xf7\\xbe\\x50\\x2f\\xb3\\x55\\\n\\x64\\x18\\x53\\x69\\xb9\\x0a\\xe5\\xe5\\x85\\xaf\\xb1\\x8c\\x6c\\x6f\\xf7\\xe2\\\n\\xc1\\x44\\x63\\x86\\x9a\\x9b\\x44\\x86\\x9b\\x9b\\xe8\\xa8\\xab\\x59\\x45\\xce\\\n\\x0e\\x43\\xc2\\x94\\x0b\\xec\\x15\\x91\\x2b\\x66\\x16\\x0d\\x8d\\xba\\xd4\\x2a\\\n\\x31\\xb6\\x61\\x05\\x25\\xa5\\xa9\\xa8\\x2e\\xe7\\xfd\\x0c\\x7c\\x7d\\xf7\\xbb\\\n\\x8d\\xf6\\x0f\\xc2\\x84\\x7d\\x70\\x78\\xec\\xc3\\x23\\x48\\xd8\\x92\\x9f\\xb1\\\n\\xea\\x60\\xc9\\xfd\\xad\\x9b\\xfe\\xe8\\x29\\x32\\x58\\xb9\\x7f\\xf2\\xd7\\xd7\\\n\\xca\\x58\\xfa\\x26\\x4f\\x98\\x33\\xfe\\xbc\\xe0\\x81\\x01\\x73\\x5d\\xd1\\x18\\\n\\x94\\x09\\x57\\xe2\\xe3\\x09\\x70\\x73\\x83\\x51\\x17\\x1e\\x19\\x4d\\x7b\\x72\\\n\\x7d\\x60\\xde\\xaf\\xcf\\xbb\\x72\\x5f\\x05\\xeb\\xb8\\x5a\\x72\\x85\\x48\\x41\\\n\\xac\\x7a\\x3b\\xc3\\x13\\x23\\x0f\\x14\\x31\\x7a\\xc2\\x9c\\x14\\xe6\\xa6\\xfc\\\n\\x8c\\x06\\x8c\\x11\\xd6\\x37\\x2e\\x7e\\xe2\\xbc\\x1b\\xeb\\xf6\\x81\\xb1\\x13\\\n\\xf3\\xe5\\x5d\\x6a\\x6b\\x0e\\xbc\\x07\\x30\\x25\\x47\\x00\\x51\\xbe\\xb7\\x3d\\\n\\x71\\x58\\x8b\\x57\\xd3\\xa1\\x70\\x8c\\xba\\x86\\x5f\\xe9\\xb8\\xe9\\x85\\x5a\\\n\\xb8\\x6a\\x6e\\x9d\\x2a\\xf9\\x63\\xbd\\x1f\\x75\\x05\\x42\\xb0\\xba\\xcf\\xf4\\\n\\xe9\\xc7\\x3d\\x3c\\xf6\\x99\\xdc\\xb9\\x3f\\x1c\\xbc\\x93\\xf7\\x98\\xb4\\x45\\\n\\x24\\x14\\x44\\xfe\\x2d\\xaa\\xc8\\x73\\x52\\x95\\x6b\\xe7\\x3e\\xb8\\x6c\\xad\\\n\\x31\\xd3\\x8e\\x65\\x1f\\x9c\\x29\\xd7\\xde\\x77\\x41\\x4a\\x6f\\xff\\x70\\xed\\\n\\xc6\\xc4\\xa9\\xe8\\xd0\\xab\\x43\\x91\\xbf\\xb1\\x22\\xea\\xe5\\x2a\\x6f\\x9c\\\n\\x2e\\x24\\xfd\\x11\\x5c\\x3a\\xcf\\x7f\\xc7\\x44\\x3d\\xd7\\x55\\xbd\\xb4\\x3c\\\n\\xe9\\x7a\\x46\\x3a\\xd1\\x57\\xc1\\x42\\xfc\\x38\\x88\\x14\\x26\\xd2\\xc3\\x14\\\n\\x71\\x18\\x50\\x31\\x9a\\x82\\xbd\\x14\\x26\\x23\\x61\\x3f\\x85\\x15\\xa2\\x20\\\n\\xa5\\x7f\\xbf\\xed\\x59\\x39\\xb1\\xd7\\x3b\\xe3\\xd1\\x73\\xaf\\x35\\xb7\\x28\\\n\\x4b\\x7b\\x40\\x40\\xe8\\xf8\\x92\\x49\\x0c\\x61\\x75\\x2e\\x9f\\x44\\xfe\\xdd\\\n\\xd9\\xd2\\xab\\x5c\\xe0\\xa8\\x68\\xe0\\xca\\x46\\xaa\\xd1\\x43\\x7b\\xba\\x44\\\n\\xfa\\x94\\x48\\x59\\xb8\\x16\\xc2\\xe3\\x62\\xcd\\xed\\x53\\xa5\\xa0\\x24\\x27\\\n\\x91\\x53\\x47\\x2c\\x6b\\x5c\\xb0\\xb0\\x39\\x13\\xa6\\x08\\x78\\xec\\x33\\xf9\\\n\\x07\\x35\\x22\\x09\\x9b\\x05\\xf0\\xc7\\xa8\\x47\\x53\\x2a\\xd2\\x09\\x6c\\xa8\\\n\\x82\\x9a\\xfe\\xe3\\x93\\x2f\\xe9\\x58\\x78\\xa6\\xfb\\x07\\x93\\x8d\\x19\\x97\\\n\\x8f\\x97\\x79\\x6a\\x63\\x31\\x26\\xe5\\xb1\\xc2\\xc7\\x94\\x3c\\x81\\x23\\x5b\\\n\\x4e\\xe9\\xc7\\xc5\\x37\\x9e\\x39\\x26\\x88\\x70\\x1d\\xa6\\x94\\x91\\x95\\xa6\\\n\\x02\\x6a\\x4c\\xd4\\xe2\\x35\\x7d\\x59\\x85\\x2b\\x5d\\x37\\x26\\x58\\x47\\xd4\\\n\\x66\\x53\\x88\\x14\\x8c\\x3c\\xc3\\x06\\x1e\\x9b\\x7d\\xf1\\x07\\x88\\x5f\\x0d\\\n\\x58\\x36\\x87\\xc1\\x8f\\xd2\\xc6\\x9f\\xee\\xd3\\x91\\x9d\\x5d\\xf9\\x96\\x38\\\n\\xa8\\xa4\\x72\\x6e\\xb1\\x5a\\x25\\xad\\xd4\\x93\\xb3\\x58\\x16\\x0f\\xba\\x4d\\\n\\x8f\\x83\\x4b\\xf5\\xf4\\xd4\\xae\\x36\\x8c\\xba\\xd4\\x0f\\xbd\\x1a\\x75\\x61\\\n\\x47\\x47\\xd8\\x52\\xe9\\x14\\xfc\\xd0\\x4f\\x53\\xc1\\x35\\xa6\\x0a\\x76\\x2f\\\n\\x24\\x9b\\x3c\\x15\\x2c\\x6c\\x36\\x06\\x64\\x3c\\xf6\\x35\\xee\\xf7\\x6e\\xab\\\n\\x48\\xb2\\x17\\x3f\\xd2\\x79\\xa5\\x18\\xda\\xde\\x51\\xad\\x87\\xb6\\x4e\\x20\\\n\\x8f\\xd4\\x8e\\x17\\x9f\\x83\\xfd\\xbf\\x5c\\xf5\\xfb\\x40\\xcd\\x85\\x60\\xf4\\\n\\x55\\xa1\\x7c\\x34\\x4d\\x51\\xce\\xe6\\xe0\\x70\\x6e\\x72\\x4d\\xa9\\x98\\xdc\\\n\\xe6\\xe3\\x05\\x67\\x3f\\xea\\x3c\\xba\\x55\\xfd\\xf8\\x2b\\xe1\\xd2\\x53\\x29\\\n\\xca\\xec\\x20\\x4c\\x09\\x3f\\xfe\\xd8\\x6a\\xa5\\xa7\\x52\\x92\\xf8\\xf1\\xf7\\\n\\x44\\xb0\\xe0\\xbe\\x15\\x22\\x85\\x0d\\xc8\\xe1\\x9b\\x3c\\x1c\\x1a\\xc6\\x02\\\n\\x28\\xdc\\xfd\\x86\\x61\\x34\\x15\\xeb\\x0b\\xfb\\xf8\\x97\\x5f\\xd5\\x3f\\x18\\\n\\xb1\\x3e\\x0f\\xc2\\xf1\\x82\\xd2\\x1c\\x99\\xb4\\xb8\\x54\\xe7\\xc9\\xea\\xb5\\\n\\x6a\\x41\\x69\\xca\\x78\\x11\\xf0\\x9a\\x2f\\xa6\\x57\\xe0\\xa5\\x15\\xe6\\x11\\\n\\x4e\\x37\\x72\\x7b\\xdd\\x57\\xab\\xfa\\xb1\\xca\\x0c\\x8f\\x1c\\x58\\xac\\xb2\\\n\\x3b\\xbd\\xe2\\xaa\\x60\\xe1\\xb1\\xef\\x89\\xaf\\x6e\\x96\\x53\\x07\\xc2\\x37\\\n\\x9a\\x2a\\xab\\x7e\\x6b\\xa2\\x50\\xed\\x5b\\x73\\x7b\\xa2\\xd0\\xea\\x66\\x99\\\n\\x38\\x86\\xf9\\x8f\\x1f\\x7e\\xe0\\x05\\x13\\x4d\\xb9\\xd6\\x06\\x0c\\x6d\\x2b\\\n\\x94\\x8f\\x2a\\x8c\\xbe\\xf0\\x08\\x89\\xb9\\x0f\\xce\\x83\\x8d\\x8c\\x17\\xbb\\\n\\x0f\\x30\\xea\\x82\\x39\\x50\\x18\\x17\\xb0\\x66\\x2b\\xaf\\xb5\\xef\\xfd\\xd6\\\n\\xf2\\x11\\x2f\\xd4\\x4a\\xb0\\x92\\xb6\\x74\\x87\\xca\\x87\\x49\\xac\\xb0\\x14\\\n\\x7b\\x81\\x8a\\x3c\\x82\\xb9\\x29\\x2f\\x97\\x62\\x47\\xbc\\x0b\\x1e\\x15\\x80\\\n\\xf7\\x4e\\xcc\\xb9\\x21\\x38\\x67\\x58\\x12\\x7c\\xd0\\xe3\\x7b\\x84\\xfc\\xda\\\n\\x63\\x07\\x75\\xb7\\x61\\x61\\x3d\\xf3\\x8a\\xf1\\x32\\xeb\\xf2\\x4a\\x99\\x72\\\n\\x51\\x59\\xe8\\x22\\xde\\x98\\x60\\x8f\\xcd\\xca\\xc8\\x37\\x7c\\x79\\x91\\xf6\\\n\\x8f\\xbf\\x59\\x8d\\xba\\xb0\\xa9\\x39\\x0c\\x09\\xae\\x79\\xb0\\x6d\\x09\\xaf\\\n\\xc9\\xec\\x04\\x49\\x5a\\xb0\\xc2\\x00\\x07\\x7d\\x2c\\x9f\\x31\\x64\\xec\\x86\\\n\\x88\\x23\\x26\\x8c\\xdd\\xfc\\xe4\\x72\\xc7\\x43\\x4b\\xe5\\xd1\\xdb\\xff\\x1c\\\n\\xda\\x30\\x65\\x60\\x07\\xdf\\x5e\\xc8\\x08\\x1e\\x91\\x95\\x97\\x21\\xd3\\xd4\\\n\\xa3\\x3a\\x0c\\x73\\xb1\\xc9\\x18\\x4b\\xe8\\x4c\\x6f\\x13\\x80\\x7b\\x98\\xa5\\\n\\x77\\x4f\\xd7\\xb9\\xee\\x8d\\xd3\\xfa\\x71\\x71\\x87\\xf2\\x27\\xe6\\xf5\\x76\\\n\\xad\\xb7\\x7b\\x60\\xfe\\x5d\\x4a\\x0a\\x56\\x66\\x0e\\x46\\x53\\xfe\\x6c\\x27\\\n\\x30\\x7f\\x0b\\xdf\\x6e\\x11\\x8b\\x05\\x77\\x3e\\x7c\\x89\\xfc\\xf8\\xaf\\x5e\\\n\\x34\\x12\\x41\\xe7\\xed\\x96\\xbd\\x79\\x87\\xc7\\x9d\\xbd\\x2f\\x34\\xe8\\x8c\\\n\\x16\\x4a\\x26\\x17\\xc8\\x2c\\x25\\x5e\\x88\\xda\\x33\\x61\\xfe\\x58\\x6f\\x1a\\\n\\x0d\\x69\\xad\\x70\\xcc\\x77\\xcb\\xd7\\x4a\\xe4\\xfa\\x2f\\x2d\\x52\\x13\\xf4\\\n\\x47\\xb5\\x78\\xc1\\x79\\x5f\\xaa\\xa5\\x94\\x12\\x2c\\xbd\\x61\\x53\\x4d\\xa0\\\n\\xc3\\x4d\\x46\\x90\\x36\\x6c\\x9a\\xfc\\xd2\\xe0\\x71\\x17\\x51\\x69\\xfe\\xf4\\\n\\xc8\\x1b\\x26\\x9b\\x35\\xd2\\x16\\x5c\\xb7\\x9c\\x0d\\xba\\xa0\\x26\\xed\\x61\\\n\\xb8\\x7a\\xc1\\x0d\\x08\\xeb\\xee\\xed\\xa6\\x66\\x23\\x17\\xe7\\x52\\x23\\xf0\\\n\\x74\\x81\\xc9\\x6d\\x64\\x3c\\x26\\x62\\xae\\x6b\\x3b\\xdc\\x32\\x79\\xec\\xd5\\\n\\xc3\\xa5\\xee\\x8f\\x58\\x4d\\xe8\\x05\\x2b\\x2b\\x37\\x23\\xf0\\x2e\\x31\\x46\\\n\\xbc\\x0b\\x2e\\x17\\x80\\xab\\x93\\x4c\\x15\\x25\\x18\\xae\\x71\\xcf\\xdf\\xda\\\n\\xee\\x72\\x63\\x3e\\x55\\x87\\x9d\\x13\\xc8\\x4f\\xff\\xd3\\x36\\x1d\\x8e\\xfe\\\n\\xb2\\x8f\\xce\\xa6\\x70\\x9d\\x73\\x2f\\xe0\\x5b\\xec\\x9d\\x0f\\x5c\\x28\\xef\\\n\\x50\\xae\\xa7\\xc3\\xec\\xaa\\x69\\xf8\\x65\\x85\\x56\\xb0\\xc2\\xe4\\x74\\x6c\\\n\\x38\\x70\\x53\\xef\\x11\\x89\\x06\\x73\\x3e\\x6b\\x3e\\xff\\x4a\\x4a\\xcf\\x69\\\n\\x20\\x74\\xdb\\x5f\\xbe\\xb5\\x4b\\x07\\xc5\\xbd\\xe9\\xfe\\x1a\\x6d\\xb8\\x6a\\\n\\x8a\\x71\\x58\\xda\\xc9\\xce\\xcf\\xd4\\x5b\\xa9\\x96\\x28\\x3b\\x43\\xed\\x0c\\\n\\xf3\\xad\\x51\\x17\\x4c\\x25\\xc2\\x96\\x42\\x25\\x58\\x98\\x84\\x0d\\xa3\\x5b\\\n\\x57\\xbf\\xbe\\x14\\xd8\\x2e\\xf3\\xb1\\x9f\\x5f\\x2d\\xbf\\xfc\\xdc\\x26\\x09\\\n\\x8b\\x4f\\xa6\\x64\\x59\\xe1\\x71\\x11\\x5b\\x94\\x10\\x7f\\x70\\xf5\\x57\\x16\\\n\\x7b\\x16\\x96\\x2c\\xd9\\xfe\\x05\\xe5\\xbc\\x4a\\xe5\\x5d\\xf4\\xa6\\xbf\\xaf\\\n\\x19\\x1a\\x75\\x85\\xd0\\xdd\\x78\\x28\\x04\\xab\\x72\\x5e\\xb1\\x72\\xe3\\x32\\\n\\x3d\\xb4\\x8e\\xf3\\xfd\\xfc\\xb2\\x22\\x22\\xf0\\xa7\\x9f\\x58\\xa5\\xe6\\x7e\\\n\\xf6\\xcb\\x0b\\x2a\\xca\\x72\\x18\\x7f\\x55\\x13\\xe1\\x87\\x25\\x73\\xc4\\x21\\\n\\x7c\\xff\\x77\\x2f\\x93\\x89\\x2a\\xcc\\x15\\x93\\x35\\x01\\x4c\\xa5\\x5c\\xa8\\\n\\xec\\x10\\x91\\xb1\\xfd\\x67\\xb3\\xf2\\x92\\xba\\x55\\xb9\\xbe\\x09\\x7a\\x40\\\n\\x97\\xc0\\x0a\\x56\\x76\\xbe\\x1a\\x4d\\xdd\\x34\\x14\\x86\\x3b\\xec\\xa1\\x89\\\n\\xac\\xbf\\x32\\xe6\\x8e\\xc2\\x09\\xdb\\x8a\\x8f\\xcc\\x96\\xc5\\xca\\x8f\\xd1\\\n\\x73\\xea\\xf1\\xe9\\x35\\xb5\\xcf\\x13\\x36\\x50\\xa9\\x9a\\xe0\\xed\\xf3\\x47\\\n\\x1f\\x7e\\x41\\xee\\x7e\\x64\\x19\\x1f\\x11\\x6d\\xdc\\xe4\\x8a\\x59\\x45\\x72\\\n\\xe3\\xdf\\x2d\\x96\\xeb\\xfe\\x66\\x41\\xe0\\x43\\xe6\\x29\\x5b\\xe3\\xe0\\x25\\\n\\xec\\x43\\x5b\\xaa\\x56\\x80\\xae\\xfe\\xd4\\x3c\\xa1\\x58\\xb9\\x77\\x7f\\x60\\\n\\xd5\\x8f\\x49\\xd8\\xfb\\xfe\\x78\\xa3\\x66\\x5b\\x54\\x99\\xba\\xde\\x15\\x60\\\n\\x12\\xf1\\xf3\\x4f\\x6f\\x90\\x2d\\x8f\\x1f\\x72\\x0f\\x60\\x8a\\xd7\\x94\\xa5\\\n\\x16\\x6a\\x10\\x38\\xf7\\xda\\x7b\\x2f\\x08\\x6c\\x24\\x9d\\x40\\x8e\\xb0\\xb0\\\n\\xb2\\xf5\\xd2\\x0f\\xf7\\x2a\\xe3\\xc1\\xbd\\xda\\x6d\\x09\\xf6\\xfa\\xf9\\xe9\\\n\\xd5\\x33\\xd5\\xbe\\xa7\\x70\\x42\\xb8\\xf2\\x33\\xf3\\xe5\\xaa\\xff\\x31\\x4f\\\n\\xf6\\xaf\\x6f\\xd0\\xd1\\x5e\\xf6\\xaf\\x6b\\x08\\xdd\\x5e\\xd0\\x91\\xee\\x0b\\\n\\xac\\xa9\\xd7\\xaa\\xed\\x63\\xb8\\x5e\\xb7\\x5c\\x9e\\x8c\\xd4\\x66\\x58\\x3f\\\n\\x87\\x37\\xd4\\xad\\xbf\\x19\\xf2\\xcb\\xd5\\x14\\x60\\x1f\\xf4\\x81\\x14\\xac\\\n\\xe8\\x4d\\xc7\\x63\\xcb\\x9e\\xe7\\xea\\x75\\xc6\\x68\\x00\\xab\\x1c\\x30\\x1a\\\n\\x2c\\x9e\\x90\\x1f\\x2d\\xc2\\x57\\x07\\x04\\xb0\\x35\\x02\\x13\\xf3\\xc8\\x08\\\n\\x40\\x70\\x58\\x85\\x8a\\xaf\\x7d\\xe9\\x84\\xec\\x57\\x39\\x8c\\x6e\\x4d\\xac\\\n\\x50\\xe0\\xc7\\xef\\xf1\\xbf\\x7d\\x55\\x3e\\xf5\\xc4\\x75\\x6a\\xa7\\x83\\xbb\\\n\\x0e\\xe6\\xac\\xda\\x0b\\xd3\\x31\\xf8\\x9b\\x3f\\xf8\\xf2\\x90\\xe7\\xd3\\xb0\\\n\\xf8\\x9b\\x0f\\xb4\\x60\\x0d\\xbf\\xf9\\x88\\xa2\\xf2\\xfc\\x77\\x76\\xab\\x89\\\n\\xe3\\xdd\\x32\\x53\\xed\\x33\\xc3\\xa8\\x0b\\x7f\\x68\\xc9\\xec\\x47\\x1a\\x5e\\\n\\x2f\\xdf\\x0f\\x11\\xc0\\x24\\x6c\\x34\\xce\\xde\\xf5\\xea\\x50\\x7b\\x63\\xb7\\\n\\xd4\\x6e\\x38\\xf1\\x56\\x3e\\x29\\x1d\\x4d\\x3d\\xa1\\x45\\x85\\x6b\\xf9\\xed\\\n\\xfd\\x9b\\xe5\\x7d\\xdf\\x59\\x11\\xda\\x6b\\x70\\xb3\\xe3\\x67\\x9a\\x10\\x47\\\n\\xf1\\xb0\\x6c\\x51\\x13\\xed\\xcd\\x47\\xc2\\x11\\x47\\x31\\x7a\\xfd\\xa1\\x11\\\n\\xac\\x68\\x87\\x31\\xea\\xda\\xf7\\x62\\x83\\xce\\x85\\x15\\xb9\\x7a\\xc4\\x85\\\n\\x91\\x17\\x23\\xba\\x44\\x09\\xb9\\xf3\\x0a\\x17\\x20\\x08\\x36\\x80\\x8c\\x5f\\\n\\x62\\x6c\\x50\\xae\\xdd\\x70\\x52\\x0e\\x29\\x77\\x42\\xc7\\xb6\\x35\\x09\\xec\\\n\\x9f\\xc2\\x94\\x30\\x52\\x7f\\x4d\\xd9\\x1f\\x21\\x68\\xc8\\x68\\x4c\\xb8\\x87\\\n\\xd8\\x18\\x0f\\xf7\\x34\\x6f\\xfe\\x25\\x3c\\x91\\xaa\\xcf\\xbd\\x57\\xa1\\x13\\\n\\xac\\xe1\\x17\\xd0\\x7e\\xb2\\x5b\\x5e\\xf8\\xee\\x9b\\xf2\\xe2\\xf7\\xde\\xd4\\\n\\xae\\x7a\\xf1\\x65\\x84\\xeb\\x8a\\x8c\\xcc\\x40\\xae\\x25\\x0c\\xef\\x7a\\xa8\\\n\\xde\\xc3\\x4f\\x58\\xe5\\xdc\\xb1\\x3a\\x5f\\xf6\\xd7\\xb3\\x75\\xdf\\x31\\xcf\\\n\\x01\\xe7\\x72\\xb0\\x36\\xc7\\x2b\\x04\\x0d\\x8f\\x5f\\x41\\x4e\\x1b\\x7f\\xbc\\\n\\x6f\\xd4\\x09\\x16\\x46\\x97\\x88\\x8f\\xb8\\x05\\x51\\xa9\\x8f\\x85\\x6b\\x34\\\n\\x65\\xf5\\x5d\\x0a\\xb5\\x60\\x45\\x2f\\x08\\x7f\\x28\\xfb\\xd7\\xa9\\xb9\\x17\\\n\\x95\\x11\\x85\\xf7\\xc2\\x77\\x4d\\xd5\\x7b\\xa9\\x18\\x20\\x21\\x4a\\xc8\\xfd\\\n\\x57\\x58\\xd1\\x23\\x63\\x04\\x86\\x04\\xb7\\xbe\\x70\\xe6\\x88\\x39\\x11\\x44\\\n\\x84\\x09\\xa2\\x80\\x21\\x86\\x23\\xfc\\xb8\\xc1\\x0b\\x6a\\x2a\\xa7\\x48\\x64\\\n\\x50\\xcf\\x45\\x62\\x34\\xb5\\xf7\\xf9\\x7a\\xed\\xca\\x25\\x55\\xae\\x37\\x25\\\n\\x04\\x6b\\xf8\\xcd\\x38\\x73\\xaa\\x5b\\xd6\\x7d\\x7f\\x8f\\xce\\x33\\x56\\x54\\\n\\xe8\\xb9\\xae\\x39\\x2b\\xab\\x04\\xfe\\xb0\\x98\\xbc\\x23\\x90\\x57\\x94\\xad\\\n\\xdd\\xe1\\xc2\\x25\\x2e\\x12\\xa2\\xc1\\x1c\\xdc\\x74\\x52\\x47\\x8d\\xde\\xa7\\\n\\xa2\\x47\\x07\\x65\\x0e\\xec\\x75\\x65\\xe6\\x90\\xaa\\x82\\xd5\\x76\\xb2\\x4b\\\n\\x5e\\xff\\xaf\\x43\\xb2\\x59\\xe5\\xd6\\xba\\x4e\\xef\\x6e\\xb6\\x8f\\x35\\xa7\\\n\\x9c\\x60\\x0d\\x67\\x89\\x39\\x17\\xe4\\x82\\xb2\\x1c\\x6d\\xd1\\x0b\\xe7\\x7d\\\n\\xa5\\x53\\xe8\\x53\\x69\\x38\\x23\\xaf\\xde\\xc3\\xf7\\x18\\x22\\x06\\x23\\x63\\\n\\xfe\\x04\\xae\\x4e\\xe0\\x2a\\x06\\x81\\x49\\xfc\\x74\\xfc\\x08\\xd7\\x2b\\x30\\\n\\x92\\xc4\\xfe\\xba\\x54\\x48\\x18\\x4d\\xc1\\x24\\x05\\xf3\\x73\\x18\\x4d\\xa5\\\n\\xb2\\x41\\x30\\xee\\x57\\x6a\\xdc\\xb5\\x11\\xbe\\x79\\xf8\\x75\\x5f\\xaf\\xec\\\n\\xba\\x90\\xa7\\x2d\\x2b\\xd7\\xdb\\x7c\\xb0\\xe7\\x0c\\x16\\xe0\\x4c\\xde\\x13\\\n\\xc0\\x1c\\xd8\\xc4\\x85\\xa5\\x3a\\xc3\\xfe\\x0b\\x1b\\x70\\x77\\x2a\\xf7\\xbe\\\n\\xdb\\x95\\xb3\\x39\\xd3\\x23\\x01\\x44\\x18\\x87\\x3b\\x69\\xac\\x34\\x87\\x39\\\n\\xb5\\x36\\x74\\xca\\x16\\x35\\x92\\x42\\xc6\\x0a\\xfa\\x68\\x49\\x49\\x0b\\x16\\\n\\xe6\\x89\\x72\\x0a\\xb3\\xb4\\xbf\\x9d\\x43\\xaf\\x34\\x86\\x86\\xd7\\xc1\\x4d\\\n\\x8d\\xea\\x51\\xa5\\x51\\xf2\\x4b\\xb2\\xa5\\x46\\xed\\xa3\\xc2\\xa8\\x6b\\x5c\\\n\\x75\\x61\\x68\\xfa\\x9f\\x0a\\x1d\\xc5\\x06\\x5c\\xe4\\x95\\x9f\\x9d\\x2f\\xf0\\\n\\x90\\x89\\x47\\x78\\xcc\\x2f\\x99\\x4a\\x6d\\x27\\xba\\x4d\\x35\\xe5\\x6a\\x3b\\\n\\x30\\x84\\xdd\\xf7\\xa2\\x5a\\xed\\x54\\x73\\x53\\xfb\\xd4\\xa8\\x2a\\x6c\\xa3\\\n\\x29\\xf8\\xea\\x5a\\xa4\\x7c\\xd5\\xc1\\x57\\x57\\xb2\\xe6\\x48\\x69\\x6a\\xb8\\\n\\x7e\\xde\\xda\\xce\\xd7\\x77\\xbf\\x3b\\x21\\xd0\\x4d\\x87\\xda\\xf5\\x73\\x33\\\n\\x2c\\x65\\xb1\\x8f\\x2b\\x6c\\xa9\\x7a\\xe9\\x38\\xb9\\xe8\\xae\\xe9\\x32\\x7f\\\n\\x15\\x46\\x5d\\x74\\x06\\x67\\xfa\\xfe\\xe1\\xb1\\x06\\x73\\x4b\\x4f\\xfd\\xe3\\\n\\x56\\x23\\xd6\\xf6\\x10\\xca\\xab\\x95\\x95\\x7f\\x58\\x52\\x8b\\x9a\\x8f\\x82\\\n\\xcd\\x14\\xb6\\x19\\x61\\x65\\x3c\\x6c\\x09\\x91\\x92\\x30\\x30\\x58\\x70\\xe3\\\n\\x24\\xc9\\xce\\xb3\\x3f\\x46\\xb2\\x0a\\x42\\xe1\\x8a\\x60\\x45\\x01\\x0e\\xf4\\\n\\x45\\xb4\\x8d\\x07\\xbc\\x1c\\x62\\xee\\x28\\x6c\\x09\\x5e\\x4a\\x87\\x46\\x5d\\\n\\xd5\\x52\\x3e\\xbd\\x28\\x6c\\xdd\\x0f\\x7d\\x7f\\x61\\x22\\xf1\\x8b\\xcf\\x6e\\\n\\xf4\\xdc\\x27\\x3d\\x8c\\x8e\\x6f\\xfe\\x87\\x25\\x81\\xe6\\x35\\xd0\\x1f\\xd1\\\n\\x73\\x52\\x98\\x9b\\xaa\\x55\\x8b\\x16\\xe7\\x0f\\x2b\\x02\\xdd\\x7d\\xc9\\x2d\\\n\\xca\\xd2\\x2b\\xc8\\x18\\x4d\\x61\\x73\\x75\\x32\\xc9\\x73\\xc1\\x1a\\xde\\xa9\\\n\\xd3\\xc7\\x3b\\xf4\\xf3\\x35\\x56\\x2d\\x60\\x0b\\x12\\xb6\\x84\\x88\\x2d\\x70\\\n\\x69\\x33\\x5f\\x45\\xda\\xc1\\xa6\\x50\\x26\\x33\\x04\\x1a\\x6b\\xdb\\xe4\\xd1\\\n\\x77\\xfd\\x49\\x06\\xfa\\xce\\x1b\\xf8\\xbb\\xd6\\x81\\xd9\\x57\\x55\\xca\\xfb\\\n\\x1f\\xbd\\xcc\\xb5\\xfa\\xdc\\xac\\x08\\xb6\\x52\\xd1\\xb9\\x29\\xac\\x78\\x87\\\n\\x2d\\x4d\\xbd\\x58\\x3d\\xad\\xa8\\xd1\\xd4\\xfc\\x77\\x38\\xff\\xbb\\x31\\x2a\\\n\\x58\\x51\\xd0\\x78\\xee\\xde\\xfb\\x42\\xbd\\x9e\\xeb\\x0a\\xe3\\x73\\xb7\\x1b\\\n\\xbf\\x14\\x51\\x16\\x6e\\xbe\\xe2\\x8b\\xfd\\xe4\\xd7\\x5e\\x77\\xb3\\xca\\xb3\\\n\\x75\\xbd\\xfb\\x9f\\x2f\\xf1\\x35\\xc2\\xd0\\x9f\\xfe\\x75\\xa7\\x9e\\xd7\\x3a\\\n\\xdb\\x21\\x97\\xdf\\x54\\x5d\\x30\\x56\\x3e\\xb1\\xe6\\x5a\\x97\\x6b\\x4d\\xbe\\\n\\x3a\\x3c\\x99\\xec\\x79\\xae\\x4e\\xcf\\x4d\\x85\\xf1\\xc9\\xc4\\xab\\xf9\\x60\\\n\\x2b\\xc1\\xb2\\xff\\x40\\x99\\xe4\\xfd\\xc0\\xe4\\x1a\\x6c\\x73\\x90\\xb1\\xb2\\\n\\x81\\xb9\\x0a\\xfc\\x82\\xb4\\xd6\\x87\\x63\\x65\\x03\\x0e\\xcd\\x36\\xfd\\x6c\\\n\\xbf\\xce\\x08\\xb9\\xae\\x9f\\xc5\\xd5\\x52\\x3d\\xf6\\xde\\xf9\\x99\\x60\\x57\\\n\\x86\\x8d\\xca\\x5e\\xa4\\x96\\xba\\x0e\\x5f\\x05\\xeb\\xca\\x4f\\xcc\\xd5\\xde\\\n\\x3a\\xf0\\x63\\xe7\\x45\\x0a\\x8a\\x4d\\x5e\\xf3\\x91\\x33\\xda\\x53\\x06\\x2c\\\n\\xd1\\x83\\x62\\xa7\\x96\\x08\\x6f\\xc4\\xc1\\xc4\\x23\\x9f\\xc9\\x15\\x77\\xcf\\\n\\x05\\x6b\\x38\\x80\\xe2\\xca\\x7c\\xe5\\x87\\x69\\xbe\\x5c\\xf9\\xc9\\x79\\xfa\\\n\\xb9\\x3c\\x6a\\x3b\\xe2\\xd5\\x17\\x73\\x78\\xdb\\x6e\\xbc\\x87\\x27\\x4b\\xe4\\\n\\xa7\\x1f\\xdc\\xa6\\x57\\x3b\\x30\\x17\\x02\\x8f\\x9e\\x7e\\x24\\x84\\x7d\\xf7\\\n\\x2a\\x61\\x99\\xbc\\x6a\\xbe\\x7f\\xde\\x3a\\x31\\x31\\x5b\\x36\\x6d\\x8c\\x34\\\n\\xee\\xf7\\x66\\xe5\\x30\\x5b\\xc5\\xf3\\xf3\\x2b\\xf5\\xf7\\xaa\\x79\\x5e\\xe5\\\n\\x15\\xf5\\xb5\\x35\\x07\\xf4\\x6a\\xb5\\x5f\\xfd\\x48\\xb6\\xdd\\xe8\\x4e\\x12\\\n\\xec\\xdf\\x2d\\x9d\\x6c\\xde\\xa6\\xd1\\xa8\\x60\\x45\\x21\\xa5\\xa7\\xa7\\x69\\\n\\x4f\\x90\\xb3\\xae\\xac\\xd4\\xf3\\x5b\\x5b\\x7f\\xab\\xac\\x73\\xb1\\xd7\\x49\\\n\\xf9\\xe5\\x0e\\x43\\x82\\x9b\\xe1\\xb3\\xe1\\xa6\\x54\\x04\\xde\\x8b\\x94\\x70\\\n\\x25\\xba\\x02\\xe2\\xf4\\x3a\\x31\\x4a\\xc8\\x2b\\xce\\x92\\xae\\x56\\xf7\\x03\\\n\\x09\\xb4\\xd6\\xfb\\x6f\\x25\\x8d\\x90\\x6d\\x5e\\x09\\x16\\x96\\xd7\\x4d\\x27\\\n\\xbd\\x92\\xae\\xbe\\xe3\\x18\\x4d\\x85\\x6d\\xe3\\x38\\x1c\\x6a\\xc2\\x1f\\xdd\\\n\\x45\\xef\\xae\\xf6\\x7d\\xaf\\xae\\xf9\\x3b\\x77\\xce\\x37\\x05\\x5e\\x01\\x10\\\n\\x96\\xea\\xf2\\x8f\\xcd\\xd1\\xbf\\x38\\xf0\\x2d\\x1d\\x16\\xdf\\x3c\\xb8\\x94\\\n\\x63\\xdb\\x55\\xb8\\x29\\x95\\xa3\\xa3\\x2e\\x3c\\x32\\x22\\xbc\\x92\\x89\\x54\\\n\\x34\\x3e\\xcf\\x13\\xc1\\x82\\x67\\x83\\x4b\\xdf\\x3f\\xd3\\xc4\\x25\\xc4\\x6c\\\n\\x03\\x06\\x9e\\x5e\\xa5\\x5c\\x65\\x3f\\x68\\x22\\xf5\\xf7\\x0e\\xa8\\xef\\xf2\\\n\\xd0\\xdc\\x54\\x98\\x6c\\x15\\xa3\\x6c\\xb4\\x0f\\x3a\\xe5\\x7f\\x0e\\xa3\\xa9\\\n\\xa0\\xf8\\xa0\\xf3\\x5d\\xb0\\xa2\\x70\\x60\\x0d\\x8d\\x67\\x62\\x64\\xed\\xfd\\\n\\xf0\\xb7\\xf0\\xd7\\x73\\xc8\\xa8\\x41\\x61\\xb4\\x2f\\xc9\\xbc\\x22\\x50\\xe5\\\n\\xab\\xbf\\x3c\\xa0\\x73\\x95\\x0a\\x7e\\x80\\xc7\\xc5\\x05\\x37\\x4e\\x16\\x2f\\\n\\x7f\\xcd\\x27\\xa8\\xc7\\xb6\\x13\\x7b\\xdb\\x92\\xe9\\x6e\\xdc\\x73\\x30\\xf1\\\n\\x8b\\x55\\xde\\x92\\x89\\x05\\x71\\xcb\\x79\\xf9\\xa1\\x97\\x9e\\x05\\xbc\\x0e\\\n\\x79\\xdf\\x78\\x40\\x05\\x75\\x58\\x73\\x48\\xb6\\xa9\\xa0\\x0e\\xd8\\x53\\x19\\\n\\xa6\\x84\\x39\\xe7\\x59\\x6a\\x15\\x15\\x9e\\x4f\\x82\\xe8\\xe5\\x37\\x30\\x82\\\n\\x35\\xfc\\xa6\\xc2\\xf7\\xf8\\x65\\x7f\\x35\\x5b\\x67\\x78\\x00\\xc0\\xf3\\xfe\\\n\\xae\\x67\\x8e\\x1b\\x31\\x2a\\x1c\\xde\\x8f\\x64\\xdf\\x63\\xdf\\xdc\\x5a\\x95\\\n\\x9f\\xfe\\xe6\\x76\\x15\\x48\\x63\\xb2\\x16\\x2f\\x2f\\x7c\\xd3\\x4f\\x5c\\x58\\\n\\x22\\x5b\\x95\\xb0\\x7b\\x91\\xf0\\x63\\x81\\x08\\xd2\\x7e\\x24\\x8c\\x4c\\x5a\\\n\\x94\\x60\\x7a\\x95\\x92\\xb5\\x0b\\x8a\\xd7\\x9f\\xbe\\x9e\\x01\\xd9\\xf5\\xc7\\\n\\xe3\\x7a\\x35\\x1c\\xdf\\xd9\\xb0\\xa5\\xb1\\x13\\xf3\\xf5\\x04\\x3a\\x76\\xb0\\\n\\x14\\x96\\xe7\\x05\\xb6\\xfb\\x81\\x14\\xac\\xe1\\xb4\\x60\\xd7\\x81\\xbc\\xfa\\\n\\x2b\\xbd\\xb2\\x4d\\x85\\xdc\\x86\\x51\\x6a\\x58\\xdc\\xf7\\xf6\\x76\\xf6\\xeb\\\n\\xfe\\xa2\\xcf\\x78\\x4c\\xc4\\x5c\\xd7\\xa2\\x77\\x62\\xd4\\xe5\\xce\\x23\\x89\\\n\\x17\\x22\\x18\\x65\\x0f\\x7f\\xfa\\x0b\\x56\\x4f\\x92\\xf1\\xb3\\xcc\\x2f\\x2a\\\n\\xc0\\x1b\\x66\\x7f\\x8f\\x77\\x61\\x7d\\x2a\\x5c\\xbc\\xa6\\x93\\xfb\\x31\\x9a\\\n\\x3a\\x28\\xdb\\xd6\\x1e\\xf6\\xe4\\xf1\\x3c\\x7a\\x3f\\xbc\\x78\\x4d\\xcf\\x4c\\\n\\x93\\x79\\x6a\\x4f\\x2d\\xa6\\x31\\xf0\\x64\\x83\\xa7\\x9c\\xa0\\x27\\x57\\x2d\\\n\\xdd\\x4d\\x5d\\xec\\x51\\xe5\\xf1\\x12\\x5f\\x12\\x84\\xdf\\x46\\x74\\x94\\x30\\\n\\xa5\\x68\\x30\\x58\\x3c\\x32\\x62\\x43\\xb0\\x93\\x04\\xfb\\x9d\\x87\\xae\\xf8\\\n\\x9d\\x67\\xb1\\xe4\\x30\\xf1\\x7d\\xcf\\x9a\\x6b\\x8c\\x1a\\xce\\xc2\\xc2\\xfb\\\n\\xdf\\x6e\\x7c\\x46\\x8d\\xb0\\xbc\\x99\\xf8\\xc7\\xea\\xea\\x97\\xd6\\xbf\\xd3\\\n\\x09\\x76\\xed\\xff\\xfe\\x8d\\x67\\x8e\\x69\\xbb\\x29\\xac\\x1a\\x87\\x2d\\xe1\\\n\\x91\\x78\\x89\\x9a\\x40\\xbf\\xf0\\xf6\\x6a\\xf1\\x72\\xb5\\xd9\\x29\\x17\\x5f\\\n\\xec\\xb0\\x9c\\x76\\xda\\xea\\xfc\\xc9\\x8b\\xcb\\x04\\xf9\\x86\\x2f\\x2f\\x96\\\n\\x1d\\xbf\\x3b\\xaa\\xc5\\xab\\x7e\\x77\\x8b\\x55\\xd1\\xc0\\x1d\\x83\\xc0\\x46\\\n\\x2d\\x99\\xc7\\xab\\x0d\\xc0\\x10\\xae\\x45\\xef\\x9c\\x22\\xc9\\x4c\\x04\\x63\\\n\\xa5\\x70\\xfe\\xaa\\x89\\xba\\x3e\\x2f\\x2e\\x14\\xa3\\x07\\x04\\x70\\xb8\\xe3\\\n\\xa1\\x4b\\x8c\\x79\\xb6\\xc0\\x7e\\x42\\xaf\\xc4\\x0a\\x8c\\xe6\\xac\\x9c\\x90\\\n\\x34\\xaa\\x13\\x7b\\x5b\\xdf\\x1a\\x4d\\x1d\\x09\\x5d\\x40\\x5a\\xfd\\x5d\\x51\\\n\\xd6\\xe7\\xf8\\xbe\\x55\\x2f\\x2d\\x4f\\x9a\\x81\\xdf\\x27\\x86\\x72\\x84\\x65\\\n\\x05\\xad\\x6e\\xd7\\x69\\xd9\\xac\\x76\\xb1\\x6f\\x57\\x02\\x86\\x47\\xb1\\x30\\\n\\x25\\x18\\xa1\\xde\\xf9\\xf0\\x25\\xea\\x8f\\x69\\xc8\\xf9\\x5d\\x22\\x7d\\x87\\\n\\x9f\\xee\\x9f\\x7c\\x74\\x5d\\x22\\xa7\\x24\\x5c\\x16\\x8f\\xe4\\xef\\xfd\\xf6\\\n\\x72\\x81\\x93\\x3e\\x2f\\xd3\\x5f\\x54\\x90\\x57\\x04\\x19\\xf1\\x32\\xbd\\xff\\\n\\xd1\\x15\\x3a\\x78\\x49\\xa2\\x6d\\xac\\xf9\\xfc\\xcb\\x7a\\x44\\x9f\\xe8\\x79\\\n\\x7e\\x97\\x2f\\x9f\\x59\\xa8\\xe7\\xa6\\x16\\xdf\\x32\\xd5\\x57\\x63\\xe0\\x64\\\n\\x38\\xa4\\xcc\\x08\\xcb\\xea\\xe2\\x61\\xe8\\x58\\xf5\\x0f\\x25\\x72\\xfd\\x97\\\n\\x16\\xe9\\x2f\\x16\\x1e\\x19\\x61\\x6e\\x10\\x86\\x84\\x10\\x5b\\xad\\x49\\xfa\\\n\\x34\\xaa\\xbe\\xa4\\x5c\\x60\\xde\\xd0\\x76\\xc2\\xbb\\x9d\\x03\\x98\\x44\\xfe\\\n\\xc1\\xdd\\xcf\\xc9\\xea\\xfb\\x17\\x7b\\xe2\\x47\\xaa\\xb3\\xa5\\x47\\x9e\\xf8\\\n\\xea\\x16\\x6d\\x50\\xe9\\xe5\\xfd\\xc2\\x8a\\x2d\\xe6\\x6a\\x92\\x49\\xa7\\x94\\\n\\x47\\x92\\xb0\\x24\\xfc\\x00\\xc2\\x71\\x22\\xe6\\xa6\\x52\\xcd\\xbb\\x6a\\xe0\\\n\\x27\\xdd\\x13\\xfd\\x92\\xc0\\x93\\xa4\\x8e\\x5f\\xa8\\x6c\\x47\\xce\\x0e\\xe1\\\n\\xd5\\x64\\x3d\\xb6\\xd8\\xa4\\x62\\xc2\\x32\\xf4\\x95\\x9f\\x9c\\x2b\\xbf\\xf3\\\n\\x68\\x5f\\x61\\x94\\x19\\x82\\x4e\\xfc\\xec\\x9e\\x97\\xd4\\x52\\xf7\\x78\\xbd\\\n\\x7a\\xe8\\x86\\x25\\x3c\\xb6\\xa6\\x6c\\x7d\\x02\\x0b\\x29\\x07\\x94\\x87\\x06\\\n\\xef\\xdd\\x12\\x5d\\xf2\\xbe\\x19\\x29\\xed\\x3e\\xa8\\x72\\x6e\\xb1\\x16\\xa9\\\n\\x64\\xa7\\x18\\xa2\\xf7\\x3a\\xc8\\xaf\\x29\\x27\\x58\\xc3\\x61\\x63\\xdb\\xcc\\\n\\xea\\xfb\\x6b\\x64\\xd5\\x17\\x16\\xca\\x1b\\xca\\x35\\x2f\\x8c\\x52\\x8f\\x6c\\\n\\x0e\\xdf\\x24\\xe9\\xf0\\x6b\\xb2\\x7a\\x8f\\xe0\\xb2\\x88\\x94\\xed\\xa5\\xed\\\n\\x52\\xb4\\xdd\\x68\\xb0\\x8f\\x71\\xd3\\x0b\\xb5\\xc9\\xc6\\xbc\\xeb\\xaa\\xb4\\\n\\x2b\\x1e\\xbb\\x0e\\xd9\\xba\\x5a\\x7b\\xb5\\x9b\\x64\\xd8\\x28\\x1d\\xdd\\x6a\\\n\\x6e\\x04\\x8c\\xc5\\x8e\\xe5\\x1f\\x99\\x15\\xbd\\x8c\\x94\\x79\\xc5\\x0f\\xf4\\\n\\x42\\xb5\\x9a\\x0b\\x7f\\x6e\\x13\\x95\\xfd\\x5f\\xaa\\xa7\\x94\\x16\\xac\\xe8\\\n\\xcd\\x83\\x7b\\x98\\x68\\x8c\\xbd\\x30\\x1b\\xf5\\x45\\xaf\\xe7\\xdc\\x57\\x4c\\\n\\xa8\\x5e\\xf7\\x3f\\x17\\x08\\xe6\\x59\\x4c\\x25\\xf8\\x65\\x7f\\x4e\\xcd\\x39\\\n\\x21\\x67\\xe6\\xa4\\xeb\\x3d\\x95\\xf8\\x81\\x80\\xff\\x7c\\x2c\\x20\\x20\\x63\\\n\\x8f\\x28\\xf6\\x25\\x62\\xd3\\xfb\\xd0\\xab\\x7a\\xaf\\xb6\\xfd\\x44\\xfa\\xbd\\\n\\xd9\\xd4\\x1c\\xef\\xda\\x2f\\x55\\xa3\\x2b\\xd8\\xf7\\xa5\\x4a\\x82\\x0d\\x9e\\\n\\xde\\x88\\xef\\xb1\\x71\\x72\\xd0\\x78\\x8d\\x0a\\xc1\\x1a\\x0e\\x1d\\x8e\\xf9\\\n\\x6e\\xf8\\xdb\\x45\\xfa\\x0f\\x1c\\x5b\\x80\\x30\\xea\\x82\\xcb\\xe4\\xb0\\x27\\\n\\xec\\x65\\x3c\\xf8\\x8a\\x0a\\x94\\xf9\\xd8\\x41\\xe3\\x97\\x02\\x9b\\xa9\\xe3\\\n\\x3b\\x4e\\xeb\\x6c\\xbc\\x71\\x1b\\x0d\\xe2\\x51\\xe9\\x6a\\xe5\\x4b\\x3e\\xec\\\n\\x29\\x67\\x4c\\xa6\\x2c\\x86\\x8b\\x61\\x35\\x37\\x85\\x38\\x91\\xa3\\x31\\x8d\\\n\\x3a\\xc1\\x8a\\xde\\x64\\x04\\xa0\\x58\\xb8\\x7a\\xb2\\xce\\x51\\x37\\x1f\\xd8\\\n\\x84\\x6d\\x62\\x2e\\x25\\xda\\x07\\xb7\\x5f\\x6f\\xfc\\xbb\\x1a\\x69\\xd8\\xdd\\\n\\x1a\\x9a\\xc5\\x06\\xb7\\xaf\\xdf\\xaa\\x3e\\x4c\\xb4\\xdf\\xf5\\xc8\\x32\\xa3\\\n\\xb6\\x64\\x56\\xfd\\x70\\x72\\x2c\\x48\\x6e\\x8d\\x9c\\x5c\\x87\\x1b\\xe7\\x8e\\\n\\x5a\\xc1\\x1a\\x0e\\x0f\\xa1\\xbf\\x56\\xfd\\xcd\\x02\\xb9\\xe6\\xde\\xf9\\xca\\\n\\x91\\xda\\x90\\xb3\\x41\\xf8\\x9a\\x0a\\x9b\\x5b\\x5a\\x88\\xf0\\xdd\\xff\\x67\\\n\\x99\\x7c\\xf7\\x8e\\x3f\\x87\\xd2\\xb7\\xfe\\xf0\\x7b\\xe2\\xd6\\xfb\\xdb\\xbe\\\n\\x71\\x91\\x0e\\xf8\\xea\\x56\\x7d\\xa6\\xea\\xd1\\xee\\xba\\x6f\\x9d\\xa2\\x0c\\\n\\x3c\\x95\\x8b\\x61\\x65\\xc0\\xcb\\x34\\x44\\x80\\x82\\x35\\xec\\x9b\\x80\\x10\\\n\\xf7\\x30\\xc4\\x44\\xc6\\x5e\\xb6\\x2d\\x8f\\x1f\\xd6\\x0e\\x07\\xbd\\x34\\x19\\\n\\x18\\xd6\\xbc\\x2b\\x6f\\x61\\xe2\\x70\\xd7\\x23\\x97\\xca\\x4f\\xfe\\x7a\\x5d\\\n\\x4a\\x45\\xfc\\x4d\\x06\\xce\\xa5\\x1f\\x98\\xa1\\x5c\\xf5\\x4e\\x4a\\xe6\\x54\\\n\\xdf\\xce\\x81\\x99\\x0a\\x1e\\xf9\\x18\\x10\\xc5\\xfa\\x16\\x50\\xb0\\xac\\xb9\\\n\\xc8\\x58\\xe5\\xa9\\xe0\\x1a\\x44\\x57\\xf9\\xd4\\x3c\\x1d\\x52\\x09\\x76\\x5d\\\n\\x70\\xf5\\x1c\\x86\\xd0\\x4a\\xb0\\x64\\xbe\\xe1\\xcb\\x8b\\xe4\\xa9\\x6f\\x6c\\\n\\x8b\\x71\\x75\\xa9\\x7f\\x78\\x92\\xf2\\x53\\x76\\xfd\\x17\\x17\\x85\\xe2\\x42\\\n\\xb1\\x3d\\xa6\\xe6\\x76\\x15\\x72\\x4e\\x99\\xe2\\x94\\x31\\xe4\\x5c\\xdc\\x7b\\\n\\x46\\xc1\\x8a\\x8b\\x47\\x74\\xfc\\xb4\\x39\\x57\\x4f\\x10\\xe4\\x68\\x28\\x70\\\n\\x6c\\xad\\x41\\xe8\\xa5\\x20\\x27\\xf8\\xb3\\x82\\xaf\\xb1\\xdf\\x7c\\xe5\\x35\\\n\\x65\\xf9\\x1f\\xae\\xfd\\x96\\x4e\\xb9\\x62\\xfb\\xcd\\x1d\\x0f\\x2d\\x15\\xac\\\n\\x9e\\x06\\x39\\xcd\\x58\\xa1\\x5c\\x0c\\xab\\xd1\\x14\\xdc\\x87\\x07\\xbd\\xaf\\\n\\x41\\xe1\\x48\\xc1\\x4a\\xe0\\x4e\\x14\\x55\\xe4\\xc9\\x55\\x2a\\x9e\\xdd\\x15\\\n\\xca\\xe7\\xf8\\x81\\x0d\\x27\\x94\\xdb\\x9b\\x43\\x3a\\x78\\x80\\x1f\\xcb\\xf4\\\n\\x76\\xba\\x8d\\xc7\\xa1\\x71\\xd3\\x8a\\x54\\xe8\\xac\\x0d\\xd2\\x7c\\xc4\\x3b\\\n\\x77\\x2d\\x76\\xfa\\x62\\xaa\\x0c\\xfc\\xc1\\x63\\x2e\\x32\\xa8\\x9e\\x07\\xf0\\\n\\x23\\x72\\xa1\\x1a\\x49\\xc1\\xb8\\xd9\\x4f\\x7f\\x63\\xa6\\xee\\x87\\xdb\\xed\\\n\\x50\\xb0\\x92\\x20\\x0a\\x17\\xcf\\x08\\x75\\x8e\\x8c\\x50\\x4c\\xf0\\x49\\x05\\\n\\xf3\\x88\\x20\\x8a\\x02\\x7c\\x3f\\xdd\\xf3\\xab\\x6b\\xe4\\xd7\\x5f\\x7c\\x45\\\n\\x60\\xf4\\x99\\xaa\\x09\\xdb\\x51\\x6e\\xfb\\xc6\\xc5\\xda\\x55\\x75\\xd0\\xae\\\n\\x31\\x4d\\x0d\\xf4\\x66\\xc1\\xc5\\xb0\\x1a\\x4d\\xcd\\xbe\\x6a\\x42\\xd2\\x51\\\n\\x8f\\x83\\x76\\x5d\\x7e\\xf4\\x87\\x82\\xe5\\x90\\x3a\\x9c\\xf2\\xc3\\xbd\\xf3\\\n\\x65\\x1f\\x9d\\x2d\\x70\\x83\\x8b\\xb9\\xae\\x5d\\xcf\\xd6\\xa9\\xb8\\x7a\\xde\\\n\\xf9\\x73\\x4a\\xb4\\xcb\\xd8\\xb4\\x8c\\x38\\x7c\\xcf\\x7f\\x7b\\x97\\xac\\xff\\\n\\xe1\\x1e\\x4f\\x63\\xfe\\x25\\xda\\x37\\x37\\xca\\x8f\\xad\\xca\\x97\\xf7\\x7c\\\n\\x6b\\xb9\\x31\\xd7\\xd4\\x76\\xfb\\x5c\\x3c\\x21\\x4f\\x8f\\xa4\\x2e\\x54\\x3b\\\n\\x11\\x10\\x80\\x85\\xc9\\x39\\x01\\x0a\\x96\\x73\\x86\\xba\\x06\\x3c\\x82\\x4c\\\n\\xbb\\xb4\\x42\\x67\\x6c\\xe6\\x1d\\xda\\x23\\x77\\x50\\x60\\x11\\x1e\\x84\\x84\\\n\\x51\\xe1\\x35\\xf7\\x5e\\xa0\\x97\\xc9\\xd7\\x7d\\xff\\x4d\\x1d\\x0c\\xc1\\xcb\\\n\\x60\\xa5\\x26\\xae\\x79\\xcc\\xb8\\x1c\\xfd\\x63\\x71\\xf1\\xdd\\xd3\\x03\\x63\\\n\\x67\\x85\\x2d\\x4a\\xb3\\xd5\\x7c\\x27\\xdc\\xb8\\xcc\\xb8\\x6c\\xbc\\x80\\x3b\\\n\\x93\\x7b\\x04\\x28\\x58\\xee\\xb1\\x3c\\x5b\\x53\\xfe\\xd8\\x1c\\x59\\xf1\\xe1\\\n\\x59\\x3a\\x1f\\xd9\\xa2\\x5c\\x3c\\x2b\\xb7\\x37\\x70\\xf8\\xe6\\xa5\\x17\\xcd\\\n\\xb3\\x8d\\x8f\\xf0\\x06\\xa3\\x11\\x84\\x69\\xbf\\xe2\\x9e\\xb9\\xf2\\xe2\\xf7\\\n\\x86\\x84\\x2b\\xa8\\x73\\x70\\xb1\\x2e\\x05\\xab\\x6a\\x97\\x7f\\x6c\\xb6\\x2c\\\n\\x7d\\xcf\\x0c\\xdf\\xe3\\x43\\x46\\xfb\\x58\\x32\\xb9\\x40\\x47\\x95\\xa9\\xb9\\\n\\xad\\x5a\\x2f\\x76\\x44\\x8f\\xf3\\xd5\\x5d\\x02\\x14\\x2c\\x77\\x79\\x9e\\x57\\\n\\xdb\\x94\\x25\\xe3\\x04\\xf9\\xc6\\xaf\\x2c\\xd6\\xbe\\xba\\xf0\\xc8\\x78\\x62\\\n\\x4f\\xeb\\x79\\xe5\\x4c\\x1f\\x80\\x70\\xdd\\xf2\\xb5\\x25\\x72\\xe5\\x3d\\x73\\\n\\xd4\\x63\\xe2\\x5e\\xbd\\x39\\x3c\\xe8\\x01\\x13\\x0a\\x2b\\x72\\x65\\xd9\\x07\\\n\\x67\\x0a\\xbc\\x2e\\x20\\x76\\xa1\\xdf\\x29\\x23\\x4b\\xb9\\x18\\xbe\\x6e\\xa2\\\n\\xf6\\x37\\x35\\x6d\\x59\\x79\\x60\\x27\\xfa\\xfd\\xe6\\xe4\\x66\\xfb\\xfe\\xdf\\\n\\x75\\x37\\xaf\\x26\\xc0\\x75\\x61\\x1e\\x09\\x1b\\x70\\x91\\xe1\\xa7\\x0b\\xc2\\\n\\xb5\\xf3\\x0f\\x70\\x36\\xe8\\xaf\\xc9\\x01\\xec\\xcd\\xde\\xf9\\xc0\\x85\\xb2\\\n\\xfa\\xef\\x6b\\xe4\\xb8\\xea\\xd7\\x9e\\xe7\\xeb\\x95\\xbd\\x59\\x43\\x20\\x44\\\n\\x15\\x2e\\xc6\\x27\\x2d\\x2e\\xd5\\x31\\x2c\\x67\\x5f\\x39\\x41\\x2a\\xe7\\x15\\\n\\x07\\x42\\x14\\xc6\\x4d\\x2b\\xd4\\x2e\\x86\\x6b\\x6e\\x9b\\x9a\\x52\\x1b\\xaa\\\n\\x03\\xfc\\xe7\\x73\\xb6\\x6b\\x14\\xac\\xb3\\x28\\xcc\\xbd\\x81\\x51\\x23\\x32\\\n\\x8c\\x3b\\x77\\xfc\\x7e\\xc8\\xc5\\xb3\\xdf\\xcb\\xf0\\x98\\x6b\\x99\\x5c\\xa3\\\n\\x5c\\x4f\\xab\\x7c\\xdd\\x7d\\x0b\\xb4\\x87\\x05\\x08\\x17\\x42\\x7e\\x35\\xd6\\\n\\xb6\\xa9\\x20\\xb7\\x67\\x3c\\x9f\\xac\\xc7\\x88\\xa5\\x44\\x45\\x13\\xae\\xba\\\n\\x60\\xac\\x5e\\x55\\x9b\\x79\\xf9\\x78\\xe5\\x25\\x33\\x18\\x1e\\x16\\x32\\xb3\\\n\\x33\\x54\\xb4\\x6f\\x15\\x01\\xe9\\xce\\xe9\\x3a\\x28\\x8a\\xb9\\x6f\\x0b\\x5b\\\n\\x1a\\x4e\\x20\\x65\\x5c\\x24\\x0f\\xbf\\xa8\\x30\\xbe\\x47\\x68\\x2b\\xfc\\x51\\\n\\x04\\x35\\x21\\x38\\x44\\xcb\\xb1\\x0e\\x1d\\x27\\xb2\\x51\\x2d\\x24\\x34\\x1d\\\n\\x3a\\x23\\x70\\xea\\x07\\xff\\x56\\xbd\\x2a\\x26\\x23\\xe2\\x32\\xf6\\x76\\xf6\\\n\\xc5\\x14\\x35\\x18\\x46\\x62\\x23\\x32\\xfc\\x37\\x65\\xab\\x57\\xac\\xae\\x22\\\n\\x18\\x42\\x59\\xf5\\x18\\x19\\xa7\\xac\\xbb\\xf1\\x8a\\xd1\\x9e\\x5d\\xbf\\x5a\\\n\\xa6\\x39\\x05\\xfd\\xfe\\x98\\xe6\\x61\\xa2\\xbd\\x94\\x76\\x91\\x6c\\x02\\xa0\\\n\\x97\\x6d\\x04\\x59\\xac\\x70\\xdd\\xd8\\x67\\x89\\x6d\\x23\\xc8\\x73\\x56\\xc6\\\n\\x26\\xd1\\xdf\\x1b\\xd1\\xc2\\x05\\x01\\xc3\\xa8\\x2d\\x2a\\x50\\x38\\x3f\\xcc\\\n\\x29\\xe8\\xf7\\x27\\xcc\\x6c\\x13\\xe9\\x3b\\x1f\\x09\\x13\\xa1\\xc5\\xb2\\x23\\\n\\x12\\x80\\xc7\\x88\\xcc\\xec\\x9c\\xc0\\x3c\\xca\\x8d\\xd8\\x61\\x16\\x08\\x15\\\n\\x81\\x70\\xff\\xec\\x85\\x0a\\x35\\x3b\\x4b\\x02\\x24\\xe0\\x94\\x00\\x05\\xcb\\\n\\x29\\x41\\x9e\\x4f\\x02\\x24\\x60\\x8c\\x00\\x05\\xcb\\x18\\x6a\\x36\\x44\\x02\\\n\\x24\\xe0\\x94\\x00\\x05\\xcb\\x29\\x41\\x9e\\x4f\\x02\\x24\\x60\\x8c\\x00\\x05\\\n\\xcb\\x18\\x6a\\x36\\x44\\x02\\x24\\xe0\\x94\\x00\\x05\\xcb\\x29\\x41\\x9e\\x4f\\\n\\x02\\x24\\x60\\x8c\\x00\\x05\\xcb\\x18\\x6a\\x36\\x44\\x02\\x24\\xe0\\x94\\x00\\\n\\x05\\xcb\\x29\\x41\\x9e\\x4f\\x02\\x24\\x60\\x8c\\x00\\x05\\xcb\\x18\\x6a\\x36\\\n\\x44\\x02\\x24\\xe0\\x94\\x00\\x05\\xcb\\x29\\x41\\x9e\\x4f\\x02\\x24\\x60\\x8c\\\n\\x00\\x05\\xcb\\x18\\x6a\\x36\\x44\\x02\\x24\\xe0\\x94\\x00\\x05\\xcb\\x29\\x41\\\n\\x9e\\x4f\\x02\\x24\\x60\\x8c\\x00\\x05\\xcb\\x18\\x6a\\x36\\x44\\x02\\x24\\xe0\\\n\\x94\\x00\\x05\\xcb\\x29\\x41\\x9e\\x4f\\x02\\x24\\x60\\x8c\\x00\\x05\\xcb\\x18\\\n\\x6a\\x36\\x44\\x02\\x24\\xe0\\x94\\x00\\x05\\xcb\\x29\\x41\\x9e\\x4f\\x02\\x24\\\n\\x60\\x8c\\x00\\x05\\xcb\\x18\\x6a\\x36\\x44\\x02\\x24\\xe0\\x94\\x00\\x05\\xcb\\\n\\x29\\x41\\x9e\\x4f\\x02\\x24\\x60\\x8c\\x00\\x05\\xcb\\x18\\x6a\\x36\\x44\\x02\\\n\\x24\\xe0\\x94\\x00\\x05\\xcb\\x29\\x41\\x9e\\x4f\\x02\\x24\\x60\\x8c\\x00\\x05\\\n\\xcb\\x18\\x6a\\x36\\x44\\x02\\x24\\xe0\\x94\\x00\\x05\\xcb\\x29\\x41\\x9e\\x4f\\\n\\x02\\x24\\x60\\x8c\\x00\\x05\\xcb\\x18\\x6a\\x36\\x44\\x02\\x24\\xe0\\x94\\x00\\\n\\x05\\xcb\\x29\\x41\\x9e\\x4f\\x02\\x24\\x60\\x8c\\x00\\x05\\xcb\\x18\\x6a\\x36\\\n\\x44\\x02\\x24\\xe0\\x94\\x00\\x05\\xcb\\x29\\x41\\x9e\\x4f\\x02\\x24\\x60\\x8c\\\n\\x00\\x05\\xcb\\x18\\x6a\\x36\\x44\\x02\\x24\\xe0\\x94\\x00\\x05\\xcb\\x29\\x41\\\n\\x9e\\x4f\\x02\\x24\\x60\\x8c\\x00\\x05\\xcb\\x18\\x6a\\x36\\x44\\x02\\x24\\xe0\\\n\\x94\\x00\\x05\\xcb\\x29\\x41\\x9e\\x4f\\x02\\x24\\x60\\x8c\\x00\\x05\\xcb\\x18\\\n\\x6a\\x36\\x44\\x02\\x24\\xe0\\x94\\x00\\x05\\xcb\\x29\\x41\\x9e\\x4f\\x02\\x24\\\n\\x60\\x8c\\x00\\x05\\xcb\\x18\\x6a\\x36\\x44\\x02\\x24\\xe0\\x94\\x00\\x05\\xcb\\\n\\x29\\x41\\x9e\\x4f\\x02\\x24\\x60\\x8c\\x00\\x05\\xcb\\x18\\x6a\\x36\\x44\\x02\\\n\\x24\\xe0\\x94\\x00\\x05\\xcb\\x29\\x41\\x9e\\x4f\\x02\\x24\\x60\\x8c\\x00\\x05\\\n\\xcb\\x18\\x6a\\x36\\x44\\x02\\x24\\xe0\\x94\\x00\\x05\\xcb\\x29\\x41\\x9e\\x4f\\\n\\x02\\x24\\x60\\x8c\\x00\\x05\\xcb\\x18\\x6a\\x36\\x44\\x02\\x24\\xe0\\x94\\x00\\\n\\x05\\xcb\\x29\\x41\\x9e\\x4f\\x02\\x24\\x60\\x8c\\x00\\x05\\xcb\\x18\\x6a\\x36\\\n\\x44\\x02\\x24\\xe0\\x94\\x00\\x05\\xcb\\x29\\x41\\x9e\\x4f\\x02\\x24\\x60\\x8c\\\n\\x00\\x05\\xcb\\x18\\x6a\\x36\\x44\\x02\\x24\\xe0\\x94\\x40\\x0c\\xc1\\x4a\\x73\\\n\\x5a\\x2f\\xcf\\x27\\x01\\x12\\x20\\x01\\x07\\x04\\xac\\x35\\xc8\\x52\\xb0\\xd2\\\n\\xc4\\xba\\xb0\\x83\\xd6\\x79\\x2a\\x09\\x90\\x00\\x09\\xd8\\x26\\x10\\x4b\\x83\\\n\\x2c\\x05\\xcb\\x76\\xad\\x2c\\x48\\x02\\x24\\x40\\x02\\x06\\x09\\x58\\x0a\\x56\\\n\\x2c\\x75\\x33\\xd8\\x2f\\x36\\x45\\x02\\x24\\x30\\x8a\\x09\\xc4\\xd2\\x20\\x6b\\\n\\xc1\\x4a\\xb3\\x3c\\x3c\\x8a\\xf1\\xf1\\xd2\\x49\\x80\\x04\\x4c\\x12\\x48\\x4b\\\n\\xb3\\x9e\\x96\\xb2\\x54\\xa6\\x58\\xea\\x66\\xb2\\xc3\\x6c\\x8b\\x04\\x48\\x60\\\n\\xf4\\x12\\x48\\x13\\x4b\\x69\\xb2\\x3e\\x9a\\xce\\x11\\xd6\\xe8\\xfd\\xa6\\xf0\\\n\\xca\\x49\\x20\\x00\\x04\\x12\\x12\\xac\\x58\\x85\\x03\\x70\\x1d\\xec\\x02\\x09\\\n\\x90\\xc0\\x28\\x20\\x10\\x6b\\xd0\\x64\\x39\\xee\\xca\\x48\\xcb\\x1c\\x05\\x48\\\n\\x78\\x89\\x24\\x40\\x02\\x41\\x25\\x90\\x9e\\x96\\x61\\xd9\\x35\\x4b\\xc1\\x8a\\\n\\xa5\\x6e\\x96\\x35\\xf0\\x20\\x09\\x90\\x00\\x09\\xb8\\x4c\\x20\\x23\\x11\\xc1\\\n\\xca\\x10\\x8e\\xb0\\x5c\\xe6\\xcf\\xea\\x48\\x80\\x04\\x12\\x20\\x10\\x4b\\x83\\\n\\x2c\\x47\\x58\\x19\\xe9\\x59\\x09\\x54\\xcd\\xa2\\x24\\x40\\x02\\x24\\xe0\\x2e\\\n\\x81\\x58\\x1a\\x64\\x29\\x58\\x99\\x69\\xd9\\xee\\xb6\\xce\\xda\\x48\\x80\\x04\\\n\\x48\\x20\\x01\\x02\\x99\\x69\\xd6\\x83\\x26\\x4b\\xc1\\xca\\xa2\\x60\\x25\\x80\\\n\\x96\\x45\\x49\\x80\\x04\\xdc\\x26\\x10\\x6b\\xd0\\x64\\x2d\\x58\\xe9\\x1c\\x61\\\n\\xb9\\x7d\\x03\\x58\\x1f\\x09\\x90\\x80\\x7d\\x02\\xd9\\xe9\\x39\\x96\\x85\\x63\\\n\\x08\\x56\\xae\\x65\\x61\\x1e\\x24\\x01\\x12\\x20\\x01\\x13\\x04\\xb2\\xd2\\xad\\\n\\x35\\xc8\\x52\\xb0\\x72\\xd2\\xf3\\x4d\\xf4\\x89\\x6d\\x90\\x00\\x09\\x90\\x80\\\n\\x25\\x81\\x9c\\xf4\\x3c\\xcb\\xe3\\x31\\x04\\xcb\\xba\\xb0\\x65\\x0d\\x3c\\x48\\\n\\x02\\x24\\x40\\x02\\x2e\\x13\\x88\\x35\\x68\\xb2\\x14\\xac\\xbc\\x8c\\x31\\x2e\\\n\\x37\\xcf\\xea\\x48\\x80\\x04\\x48\\xc0\\x3e\\x81\\xdc\\x8c\\x02\\xcb\\xc2\\x31\\\n\\x04\\xab\\xd0\\xb2\\x30\\x0f\\x92\\x00\\x09\\x90\\x80\\x09\\x02\\xf9\\x19\\x45\\\n\\x96\\xcd\\x58\\x0a\\x56\\x41\\xa6\\x75\\x61\\xcb\\x1a\\x78\\x90\\x04\\x48\\x80\\\n\\x04\\x5c\\x26\\x90\\x9f\\x61\\x3d\\x68\\xb2\\x16\\xac\\x8c\\xb1\\x2e\\x37\\xcf\\\n\\xea\\x48\\x80\\x04\\x48\\xc0\\x3e\\x81\\x31\\x99\\x25\\x96\\x85\\x2d\\x05\\xab\\\n\\x30\\xcb\\xba\\xb0\\x65\\x0d\\x3c\\x48\\x02\\x24\\x40\\x02\\x2e\\x13\\x88\\xa5\\\n\\x41\\x96\\x82\\x35\\x36\\xab\\xdc\\xe5\\xe6\\x59\\x1d\\x09\\x90\\x00\\x09\\xd8\\\n\\x27\\x10\\x4b\\x83\\x2c\\x05\\x2b\\x5b\\xd9\\x40\\x14\\xf0\\xb1\\xd0\\x3e\\x5d\\\n\\x96\\x24\\x01\\x12\\x70\\x8d\\x00\\xb4\\x07\\x1a\\x64\\x95\\x2c\\x05\\x0b\\x05\\\n\\x4b\\xb3\\x2b\\xad\\xca\\xf3\\x18\\x09\\x90\\x00\\x09\\x78\\x4a\\x20\\x9e\\xf6\\\n\\x50\\xb0\\x3c\\x45\\xcf\\xca\\x49\\x80\\x04\\x12\\x25\\x90\\x94\\x60\\x8d\\xcb\\\n\\x9e\\x98\\x68\\x3b\\x2c\\x4f\\x02\\x24\\x40\\x02\\x8e\\x09\\x94\\xc5\\xd1\\x9e\\\n\\x98\\x23\\xac\\x09\\x79\\x33\\x1c\\x37\\xcc\\x0a\\x48\\x80\\x04\\x48\\x20\\x51\\\n\\x02\\x55\\x71\\xb4\\x27\\xa6\\x60\\x55\\xe5\\x52\\xb0\\x12\\x05\\xcd\\xf2\\x24\\\n\\x40\\x02\\xce\\x09\\xc4\\xd3\\x9e\\x98\\x82\\x85\\xbd\\x3c\\xa5\\x59\\x9c\\x78\\\n\\x77\\x8e\\x9f\\x35\\x90\\x00\\x09\\xd8\\x25\\x00\\xcd\\x89\\xb5\\x8f\\x10\\x75\\\n\\xc4\\x14\\x2c\\x7c\\x58\\x95\\x37\\x0b\\x2f\\x4c\\x24\\x40\\x02\\x24\\x60\\x84\\\n\\xc0\\x48\\x9a\\x13\\x57\\xb0\\xa6\\x17\\x2c\\x34\\xd2\\x49\\x36\\x42\\x02\\x24\\\n\\x40\\x02\\x20\\x30\\x92\\xe6\\xc4\\x15\\xac\\x19\\x05\\x35\\xa4\\x48\\x02\\x24\\\n\\x40\\x02\\xc6\\x08\\x8c\\xa4\\x39\\x71\\x05\\xab\\x30\\xab\\x54\\x2a\\x72\\xa6\\\n\\x18\\xeb\\x2c\\x1b\\x22\\x01\\x12\\x18\\xbd\\x04\\xa0\\x35\\xd0\\x9c\\x78\\x29\\\n\\xae\\x60\\xe1\\xc4\\x91\\x14\\x2f\\x5e\\xe5\\xfc\\x8c\\x04\\x48\\x80\\x04\\xec\\\n\\x12\\xb0\\xa3\\x35\\x23\\x0a\\xd6\\x82\\xe2\\xcb\\xed\\xb6\\xc7\\x72\\x24\\x40\\\n\\x02\\x24\\x90\\x34\\x01\\x3b\\x5a\\x33\\xa2\\x60\\x4d\\xc8\\x9d\\x2e\\xc8\\x4c\\\n\\x24\\x40\\x02\\x24\\xe0\\x15\\x01\\xbb\\x3a\\x33\\xa2\\x60\\xa1\\x83\\x4b\\x4b\\\n\\x6e\\xf0\\xaa\\x9f\\xac\\x97\\x04\\x48\\x80\\x04\\x6c\\x6b\\x8c\\x2d\\xc1\\x5a\\\n\\x58\\x7c\\x85\\xc4\\xf2\\x00\\x48\\xd6\\x24\\x40\\x02\\x24\\xe0\\x84\\x00\\xb4\\\n\\x05\\x1a\\x63\\x27\\xd9\\x12\\xac\\x0c\\x15\\xe7\\x7e\\x79\\xe9\\x2d\\x76\\xea\\\n\\x63\\x19\\x12\\x20\\x01\\x12\\x48\\x88\\x00\\xb4\\x05\\x1a\\x63\\x27\\xd9\\x12\\\n\\x2c\\x54\\xb4\\xb4\\xe4\\x7a\\x29\\xcc\\x8c\\xbf\\xe4\\x68\\xa7\\x41\\x96\\x21\\\n\\x01\\x12\\x20\\x81\\x28\\x01\\x68\\x0a\\xb4\\xc5\\x6e\\xb2\\x2d\\x58\\x99\\xe9\\\n\\xd9\\x72\\x75\\xf9\\xdd\\x76\\xeb\\x65\\x39\\x12\\x20\\x01\\x12\\x18\\x91\\x00\\\n\\x34\\x05\\xda\\x62\\x37\\xd9\\x16\\x2c\\x54\\x58\\x53\\xbc\\x52\\xe2\\xed\\xa4\\\n\\xb6\\xdb\\x28\\xcb\\x91\\x00\\x09\\x90\\x00\\xb4\\x04\\x9a\\x92\\x48\\x4a\\x48\\\n\\xb0\\xd2\\xd2\\xd2\\x65\\x75\\xe5\\xc7\\x25\\x2d\\xfe\\x9e\\xe9\\x44\\xda\\x67\\\n\\x59\\x12\\x20\\x81\\x51\\x48\\x00\\x1a\\xa2\\xb5\\x44\\x69\\x4a\\x22\\x29\\xb1\\\n\\xd2\\xaa\\xe6\\xaa\\xbc\\x99\\xb2\\xa2\\x8c\\x13\\xf0\\x89\\x40\\x66\\x59\\x12\\\n\\x20\\x81\\xff\\x4e\\x60\\x45\\xd9\\xad\\x5a\\x4b\\xfe\\xfb\\xd1\\x91\\xff\\x95\\\n\\xb0\\x60\\xa1\\x4a\\x3c\\x77\\x56\\xe4\\x4c\\x1d\\xb9\\x76\\x96\\x20\\x01\\x12\\\n\\x20\\x81\\x73\\x08\\x40\\x3b\\xae\\x2e\\xbf\\xeb\\x9c\\xa3\\xf6\\xfe\\x99\\x94\\\n\\x60\\x61\\x09\\xf2\\xce\\x89\\x9f\\x57\\xa1\\x78\\x72\\xed\\xb5\\xc2\\x52\\x24\\\n\\x40\\x02\\x24\\xa0\\x08\\x40\\x33\\xa0\\x1d\\x76\\xcd\\x18\\xce\\x85\\x96\\x94\\\n\\x60\\xa1\\x92\\xb2\\x9c\\x2a\\xb9\\x65\\xc2\\xa7\\xcf\\xad\\x8f\\xff\\x26\\x01\\\n\\x12\\x20\\x81\\x98\\x04\\xa0\\x19\\xd0\\x8e\\x64\\x53\\xd2\\x82\\x85\\x06\\xe7\\\n\\x17\\x2d\\x97\\x55\\x15\\x1f\\x4e\\xb6\\x6d\\x9e\\x47\\x02\\x24\\x30\\x8a\\x08\\\n\\x40\\x2b\\xa0\\x19\\x4e\\x92\\x23\\xc1\\x42\\xc3\\xcb\\xcb\\x6e\\x96\\x65\\xa5\\\n\\x37\\x3b\\xe9\\x03\\xcf\\x25\\x01\\x12\\x48\\x71\\x02\\xd0\\x08\\x68\\x85\\xd3\\\n\\xe4\\x58\\xb0\\xd0\\x81\\x55\\x15\\x1f\\x92\\x05\\x45\\x74\\x43\\xe3\\xf4\\x66\\\n\\xf0\\x7c\\x12\\x48\\x45\\x02\\xd0\\x06\\x68\\x84\\x1b\\xc9\\x15\\xc1\\x4a\\x4b\\\n\\x4b\\x93\\x5b\\xab\\x3e\\x43\\xd1\\x72\\xe3\\x8e\\xb0\\x0e\\x12\\x48\\x21\\x02\\\n\\x10\\x2b\\x68\\x03\\x34\\xc2\\x8d\\x94\\x36\\xa8\\x92\\x1b\\x15\\xa1\\x0e\\x54\\\n\\xf5\\xec\\xc9\\x9f\\xca\\xa6\\xe6\\x27\\xdd\\xaa\\x92\\xf5\\x90\\x00\\x09\\x84\\\n\\x94\\x00\\x1e\\x03\\x31\\xb2\\x72\\x4b\\xac\\x80\\xc1\\x55\\xc1\\x8a\\x72\\xdd\\\n\\xd8\\xf4\\xa4\\x12\\xae\\x9f\\x44\\xff\\xc9\\x57\\x12\\x20\\x81\\x51\\x46\\x00\\\n\\x13\\xec\\x6e\\xcc\\x59\\x9d\\x8b\\xcd\\x13\\xc1\\x42\\x23\\xbb\\xda\\x36\\xca\\\n\\xda\\xfa\\xef\\x48\\x6f\\xa4\\xfb\\xdc\\x36\\xf9\\x6f\\x12\\x20\\x81\\x14\\x25\\\n\\x00\\x3b\\x2b\\x98\\x2e\\x38\\x5d\\x0d\\x8c\\x85\\xc7\\x33\\xc1\\x42\\x83\\x4d\\\n\\x3d\\x75\\xb2\\xe6\\xf8\\xc3\\x72\\xb2\\xe7\\x70\\xac\\xf6\\x79\\x9c\\x04\\x48\\\n\\x20\\x45\\x08\\xc0\\x82\\x1d\\x46\\xa1\\x4e\\xec\\xac\\x46\\x42\\xe1\\xa9\\x60\\\n\\xa1\\xf1\\x81\\xc1\\x3e\\x79\\xbe\\xf1\\x31\\xd9\\xd0\\xb4\\x56\\x06\\x25\\x32\\\n\\x52\\x7f\\xf8\\x39\\x09\\x90\\x40\\xc8\\x08\\x60\\x23\\x33\\xf6\\x17\\x63\\xcb\\\n\\x5e\\xb2\\x16\\xec\\x76\\x2f\\xd9\\x73\\xc1\\x8a\\x76\\xa4\\xae\\x6b\\xbf\\x3c\\\n\\xd5\\xf0\\x03\\xa9\\xeb\\xae\\x8d\\x1e\\xe2\\x2b\\x09\\x90\\x40\\xc8\\x09\\xc0\\\n\\x45\\x0c\\xbc\\x2e\\xc0\\x29\\x82\\x89\\x64\\x4c\\xb0\\x70\\x31\\x83\\x83\\x11\\\n\\xd9\\xda\\xfa\\x9c\\x1e\\x71\\xb5\\xf7\\x37\\x9b\\xb8\\x3e\\xb6\\x41\\x02\\x24\\\n\\xe0\\x01\\x01\\x78\\x0a\\xc5\\x88\\x0a\\xfe\\xac\\xe0\\x76\\xca\\x54\\x32\\x2a\\\n\\x58\\xd1\\x8b\\xea\\x8f\\xf4\\xca\\xab\\xa7\\x9f\\x91\\x8d\\xcd\\x6b\\xe5\\x4c\\\n\\xff\\xe9\\xe8\\x61\\xbe\\x92\\x00\\x09\\x04\\x9c\\x00\\x02\\x46\\xc0\\x07\\x3b\\\n\\xdc\\x1a\\x27\\xe2\\x29\\xd4\\xad\\xcb\\xf2\\x45\\xb0\\xa2\\x9d\\xc7\\xfc\\xd6\\\n\\x8e\\xd6\\x75\\x4a\\xbc\\x9e\\x96\\xfa\\xee\\x03\\xd1\\xc3\\x7c\\x25\\x01\\x12\\\n\\x08\\x18\\x01\\xc4\\x0d\\x44\\xb8\\x3f\\x44\\xb7\\xf1\\x7a\\x9e\\x2a\\xde\\xa5\\\n\\xfb\\x2a\\x58\\xc3\\x3b\\x06\\xc1\\xda\\xd9\\xba\\x5e\\x6a\\x3b\\xb6\\xaa\\x55\\\n\\xc5\\x23\\xc3\\x3f\\xe2\\x7b\\x12\\x20\\x01\\x1f\\x08\\x54\\xe4\\x4c\\x11\\x84\\\n\\x8f\\x47\\x44\\xe6\\xa0\\x04\\x53\\x0e\\x8c\\x60\\x0d\\xbf\\x1f\\xed\\x7d\\xcd\\\n\\x5a\\xb8\\x0e\\x74\\xec\\x90\\xba\\xae\\x7d\\xd2\\xdc\\xd7\\x30\\xfc\\x63\\xbe\\\n\\x27\\x01\\x12\\xf0\\x80\\x40\\x69\\x56\\xa5\\x9a\\x3c\\x9f\\x25\\xd3\\x0b\\x16\\\n\\x6a\\xa1\\x2a\\xcc\\x0a\\x5e\\x94\\xac\\x40\\x0a\\xd6\\xb9\\xf7\\xa2\\x7b\\xa0\\\n\\x43\\xaf\\x2e\\xd6\\x75\\xd5\\x4a\\x53\\xef\\x71\\x69\\xee\\x6d\\x50\\xb9\\x5e\\\n\\x3a\\x06\\x5a\\xcf\\x2d\\xca\\x7f\\x93\\x00\\x09\\x8c\\x40\\xa0\\x20\\x63\\xac\\\n\\x94\\x66\\x57\\xea\\x3c\\x2e\\x7b\\xa2\\x4c\\xc8\\x9b\\xa1\\x83\\xcb\\xe4\\x66\\\n\\x14\\x8c\\x70\\xa6\\xff\\x1f\\x87\\x42\\xb0\\x62\\x61\\xea\\x8d\\x74\\x49\\x4b\\\n\\x5f\\xa3\\xb4\\xf7\\x9d\\xd6\\x93\\xf7\\x9d\\x03\\xed\\xd2\\x39\\xd0\\x26\\x10\\\n\\xb8\\x9e\\x48\\xa7\\xca\\x5d\\xd2\\xa7\\x2c\\xed\\x7b\\x23\\x3d\\xd2\\x3f\\xd8\\\n\\xab\\x72\\x9f\\x0c\\x44\\x54\\x96\\x7e\\x65\\x1f\\x36\\x20\\x11\\x9d\\x23\\xda\\\n\\x3e\\x0c\\x36\\x62\\xd8\\x0b\\x19\\xfd\\x4f\\xad\\x69\\xc6\\x6a\\x96\\xc7\\x49\\\n\\xc0\\x63\\x02\\x69\\x2a\\xd0\\xcb\\xd0\\x66\\x61\\xfd\\x4e\\xad\\xc2\\xe1\\x35\\\n\\x5d\\xbf\\xa6\\xab\\x39\\xa4\\x4c\\xfd\\x3e\\x43\\x32\\x25\\x23\\x3d\\x4b\\x32\\\n\\xd3\\xb2\\x25\\x0b\\x59\\x85\\xcb\\xca\\x52\\x96\\xe6\\x39\\xe9\\x79\\x2a\\xe7\\\n\\x4b\\x5e\\xc6\\x18\\x95\\x0b\\xa5\\x20\\xb3\\x48\\x20\\x52\\x85\\x59\\x25\\x32\\\n\\x36\\xab\\x5c\\x79\\xfd\\xcc\\xf3\\xb8\\xff\\xde\\x55\\x1f\\x6a\\xc1\\xf2\\x0e\\\n\\x0b\\x6b\\x26\\x01\\x12\\x08\\x22\\x01\\x73\\x06\\x14\\x41\\xbc\\x7a\\xf6\\x89\\\n\\x04\\x48\\x20\\x54\\x04\\x28\\x58\\xa1\\xba\\x5d\\xec\\x2c\\x09\\x8c\\x6e\\x02\\\n\\x14\\xac\\xd1\\x7d\\xff\\x79\\xf5\\x24\\x10\\x2a\\x02\\xff\\x1f\\x8d\\x87\\xe4\\\n\\xc1\\xcd\\xed\\xe9\\x42\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\\n\\x82\\\n\\x00\\x00\\x09\\x51\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x64\\x00\\x00\\x00\\x64\\x08\\x06\\x00\\x00\\x00\\x70\\xe2\\x95\\x54\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0e\\xc3\\x00\\x00\\x0e\\xc3\\x01\\xc7\\x6f\\\n\\xa8\\x64\\x00\\x00\\x08\\xe6\\x49\\x44\\x41\\x54\\x78\\x5e\\xed\\x9d\\x69\\x8c\\\n\\x14\\x45\\x14\\xc7\\x17\\x6f\\x4d\\xd4\\x78\\xc6\\x18\\x35\\xde\\xfa\\xc1\\x23\\\n\\x4a\\x54\\xa2\\xe8\\x4c\\xf5\\x2c\\xb8\\x2a\\xde\\x59\\xf1\\xc6\\x83\\x10\\x51\\\n\\x11\\x31\\xe0\\x1e\\x3d\\x93\\x06\\x81\\x40\\x40\\x01\\xfd\\x60\\x42\\x8c\\x41\\\n\\x13\\x8d\\x80\\x22\\x3b\\x35\\xc3\\x06\\x24\\x88\\x9a\\x68\\x3c\\x00\\x45\\x21\\\n\\x88\\x06\\xe4\\x90\\x28\\x22\\x11\\x41\\x04\\x05\\x59\\xff\\xaf\\xe7\\xed\\x32\\\n\\x3b\\x53\\xb3\\xdd\\xb3\\xb3\\xdd\\xd3\\xdd\\x5b\\xbf\\xe4\\x9f\\x21\\x4b\\x55\\\n\\x75\\xbd\\xba\\xab\\xba\\xfb\\x75\\x8d\\x46\\xa3\\xd1\\x68\\x34\\x1a\\x8d\\x46\\\n\\xa3\\xd1\\x68\\x34\\x1a\\x4d\\x79\\xd4\\xcf\\xad\\x3f\\xd4\\xca\\x26\\xce\\x35\\\n\\xb3\\x89\\x3a\\x33\\x23\\x86\\x27\\x33\\x46\\x43\\x52\\x8a\\x89\\xa6\\x14\\x33\\\n\\xf0\\x3b\\x1d\\xbf\\x93\\x93\\xd2\\x30\\xcd\\xb4\\xf1\\x78\\x2a\\x6d\\x0c\\xb0\\\n\\xd2\\xb1\\xf3\\x2d\\xcb\\x3a\\x84\\xa3\\x6b\\x2a\\xc5\\x92\\xb5\\x67\\x25\\xd3\\\n\\xc6\\x23\\xa6\\x34\\x5e\\x87\\xbe\\x41\\xa1\\xef\\x45\\x25\\xb4\\x95\\x23\\x54\\\n\\xd2\\x9f\\xa8\\xa4\\x8f\\xcd\\x8c\\x31\\xcd\\xcc\\x24\\x1e\\xb0\\xb2\\xb1\\xd3\\\n\\x38\\x79\\x8d\\x1b\\x9a\\x33\\xc6\\xd5\\x28\\xc0\\x57\\x50\\x90\\xeb\\x54\\x05\\\n\\x5c\\xb1\\xa4\\x71\\x00\\xbd\\x6b\\x05\\xf5\\xac\\x26\\x19\\xbb\\x98\\x2f\\xab\\\n\\xc9\\xc7\\x6a\\xad\\x3b\\x0e\\x05\\x34\\x06\\x05\\xb6\\xa6\\xa8\\x00\\xbd\\x96\\\n\\x34\\xbe\\x42\\xcf\\x19\\x62\\xcd\\xad\\x3f\\x82\\xb3\\xd3\\x7b\\xb1\\x64\\xec\\\n\\x64\\x14\\xca\\x78\\x0c\\x27\\x7f\\x14\\x15\\x94\\xcf\\x42\\xaf\\xd9\\x82\\x46\\\n\\x31\\xaa\\x57\\x56\\x8c\\xb5\\x34\\x76\\x18\\x0a\\x61\\x24\\x0a\\x60\\x47\\x61\\\n\\xc1\\x54\\x5b\\xa8\\x98\\x8d\\x66\\x5a\\xdc\\xc7\\x59\\x8d\\x3e\\xa9\\x6c\\xfc\\\n\\x1a\\x0c\\x13\\x5f\\xab\\x0a\\x23\\x48\\xc2\\x22\\x62\\xa1\\x35\\x3f\\x76\\x36\\\n\\x67\\x3b\\x7a\\x8c\\x68\\xad\\x3b\\x12\\x86\\x4e\\x45\\x0b\\xfc\\xaf\\xd0\\xf8\\\n\\x00\\x6b\\x27\\x2d\\xaf\\x6b\\xda\\x6a\\xfa\\xb0\\x19\\xd1\\x80\\xf6\\x03\\x34\\\n\\x79\\x2a\\x0c\\xee\\xb6\\xb0\\x0a\\xdb\\x4e\\x2b\\xb1\\xdc\\x72\\xd8\\xf8\\x14\\\n\\x05\\xf7\\x19\\xfe\\xbd\\x0c\\xf3\\xd1\\x8f\\xf8\\xff\\x9d\\x85\\xe1\\x2b\\x92\\\n\\x34\\xb2\\x8d\\xef\\x27\\x4e\\x62\\x73\\xc2\\x4d\\xb3\\x8c\\xdf\\x6d\\xef\\x05\\\n\\x54\\x86\\xba\\x94\\x3d\\xae\\x67\\xc4\\x2c\\x5a\\x0d\\xa5\\xb2\\xa2\\xef\\x98\\\n\\x96\\x6b\\x8f\\xe5\\xe4\\x4b\\xd2\\x98\\xed\\x7f\\x42\\xb2\\x25\\x71\\x05\\x0a\\\n\\x73\\x68\\x32\\x23\\x66\\xe3\\xf7\\x37\\x55\\xda\\x6e\\x45\\x79\\x48\\xc9\\xc4\\\n\\x55\\x9c\\x7c\\x38\\x41\\x65\\x3c\\x83\\x82\\x38\\xa0\\x32\\xd0\\x49\\x68\\xed\\\n\\xbf\\xd0\\x66\\x0e\\x85\\x79\\x39\\x27\\x57\\x11\\xb4\\x63\\x37\\xb3\\xe2\\x06\\\n\\xa4\\x3b\\xb3\\xdb\\x8b\\x09\\x29\\xfe\\x6a\\x96\\xc6\\xad\\x9c\\x64\\x88\\xc0\\\n\\x98\\x8b\\x16\\x35\\x41\\x69\\x94\\x93\\xa4\\xf8\\x02\\x9b\\xc3\\x3b\\xe9\\x98\\\n\\x84\\x53\\xeb\\x71\\xb0\\xca\\x3b\\x0a\\x3d\\x6d\\x18\\x2a\\xfc\\x7b\\x65\\x1e\\\n\\xba\\x94\\xd8\\x8f\\x1e\\xff\\x28\\x27\\x15\\x0e\\x90\\xf1\\x49\\xc5\\x86\\x74\\\n\\x2d\\x9a\\x03\\xe8\\xfc\\x89\\x93\\xf0\\x05\\xbb\\xd7\\x60\\x89\\x5b\\xfe\\xa9\\\n\\x80\\xd8\\x9f\\xcc\\x1a\\x0f\\x72\\x32\\xc1\\x06\\x19\\x1e\\x59\\x6c\\x40\\x17\\\n\\xc2\\xd8\\x4e\\x73\\x43\\x35\\x57\\x32\\xb4\\x19\\x44\\xcf\\x1c\\x83\\x46\\xb1\\\n\\x5b\\x99\\x47\\xa5\\x50\\x29\\x19\\x71\\x1b\\x27\\x11\\x4c\\x4c\\x99\\x18\\x5c\\\n\\xe6\\x9c\\xb1\\xa8\\xa9\\xb5\\xff\\x29\\x1c\\xbd\\xea\\x24\\x33\\xb5\\x17\\x20\\\n\\xff\\xee\\xf7\\x48\\x98\\x53\\x92\\x0b\\x12\\x97\\x72\\xf4\\x60\\x91\\x6c\\x11\\\n\\x17\\x21\\x93\\xee\\x96\\x9b\\x54\\x69\\xd2\\x30\\x83\\x78\\x34\\x4e\\xf3\\x0b\\\n\\x0a\\xfa\\x0d\\x65\\xbe\\x15\\xa2\\xd5\\x17\\xad\\xe8\\x38\\xba\\x12\\xea\\x81\\\n\\x29\\x19\\x7f\\x32\\x99\\x16\\xf7\\xf0\\x9f\\xbc\\x25\\x67\\x84\\xcb\\x96\\x25\\\n\\x8d\\x7f\\x31\\x66\\x3f\\xc4\\x51\\x83\\x49\\x6e\\x51\\x32\\x56\\x99\\x7f\\xb5\\\n\\xde\\xe3\\x98\\x9d\\xa1\\x74\\x30\\x6a\\xf0\\xde\\xa8\\xcd\\x6c\\x15\\xe7\\xf1\\\n\\xff\\x78\\x0b\\x2e\\xf6\\x72\\x5e\\xe6\\x4a\\x2a\\x37\\x46\\x8b\\x9b\\x39\\x5a\\\n\\xe0\\xc1\\x12\\xf9\\x29\\xbb\\x37\\x2b\\x6c\\x29\\x96\\x78\\x8c\\xa3\\xd9\\xa0\\\n\\x47\\x24\\x10\\xb7\\x63\\x33\\x8c\\x4a\\x59\\xc5\\xff\\xe5\\x2d\\xb4\\xb6\\x77\\\n\\x93\\x69\\x54\\xc6\\x3f\\x58\\xc3\\xdf\\xc4\\xd1\\x42\\x03\\xf2\\xee\\x6e\\x91\\\n\\x82\\xbd\\x8d\\x39\\x7f\\xe0\\x99\\xb4\\x19\\x45\\x45\\x2e\\x54\\x84\\x99\\xc4\\\n\\x49\\x7a\\xc7\\xb0\\x65\\x7d\\x0f\\x47\\xcb\\x58\\xad\\xb8\\x78\\x67\\xa1\\xc2\\\n\\xe8\\x6e\\x1d\\x47\\x0b\\x1d\\xb0\\x71\\x9c\\xd2\\xae\\x62\\x6d\\x46\\xc3\\x53\\\n\\x9e\\xd5\\x99\\xb2\\xb6\\x3f\\x27\\xe7\\x1d\\xe8\\x86\\xcf\\xab\\x2e\\x5e\\x24\\\n\\x4c\\xe0\\x1c\\x25\\x9c\\xd8\\x73\\x81\\x78\\x47\\x69\\x9b\\x0b\\xa1\\x9c\\xb6\\\n\\x79\\xb9\\xd1\\xb5\\xb1\\x5a\\x6a\\x4f\\xc7\\x85\\x76\\xa9\\x32\\xd0\\x49\\xd2\\\n\\xc8\\x56\\x73\\x8f\\xd1\\x53\\x58\\x72\\xd0\\x31\\xb0\\xe5\\x3b\\xa5\\x8d\\x4e\\\n\\xc2\\xaa\\x8d\\x93\\xf1\\x0e\\x54\\xc6\\x34\\xe5\\xc5\\xf3\\x84\\xee\\xbb\\x25\\\n\\x32\\xa7\\xa4\\xa0\\x29\\x13\\xbb\\x04\\xc3\\x57\\xf9\\x0f\\x5a\\x64\\x8d\\x7a\\\n\\x4e\\xc2\\x1b\\xe8\\xd6\\xab\\x9b\\xde\\x11\\xa9\\x3b\\x6f\\x07\\x97\\xb0\\xdb\\\n\\x55\\xb6\\x96\\x14\\x96\\xf9\\x0d\\x8b\\x6b\\x8f\\xe7\\x54\\xbc\\xc1\\xe5\\x24\\\n\\xb7\\x84\\x83\\x87\\x1e\\x34\\x2c\\x03\\x05\\xdb\\xdd\\xfb\\x39\\x8b\\x38\\x19\\\n\\x6f\\xa0\\xdd\\x35\\x2a\\x64\\x93\\xe2\\xc2\\x9d\\x94\\x4a\\xc7\\xaf\\xe3\\x28\\\n\\xa1\\xa5\\x8b\\x25\\xac\\x6b\\xd1\\x2d\\x08\\x4e\\xce\\x1b\\xec\\x0d\\x8f\\xe2\\\n\\xc2\\xf9\\x42\\xb7\\xfe\\x88\\x83\\x87\\x12\\xfb\\xe9\\xc8\\x8c\\xf1\\x76\\xa9\\\n\\x25\\x6c\\x39\\xf2\\x7c\\x77\\x8e\\x4c\\xce\\x52\\x5d\\x38\\x5f\\x58\\x22\\x0e\\\n\\xe4\\xe0\\xa1\\x03\\x0d\\x2e\\x06\\x1b\\xb7\\xaa\\xec\\x2a\\x5f\\x62\\x35\\x27\\\n\\xeb\\x11\\xf6\\x19\\x8f\\xb1\\x4d\\x7d\\xf1\\x9c\\xe8\\xde\\x42\\xd8\\x97\\xb9\\\n\\xf4\\x98\\x52\\x2a\\x6b\\x08\\x14\\xe8\\x4b\\xb0\\xe7\\x07\\x95\\x9d\\x2e\\xe5\\\n\\xed\\xee\\xbc\\x29\\x6d\\x5c\\xa6\\xb8\\x68\\x27\\xa1\\x75\\x8d\\xe5\\xe0\\x91\\\n\\x81\\x4e\\xb2\\x51\\x31\\xa3\\x69\\x28\\xc6\\x9c\\xb2\\x4f\\x65\\xb7\\x4a\\x9e\\\n\\xef\\xce\\x71\\x91\\xae\\xcf\\x75\\xe8\\x88\\xc4\\xaf\\x13\\xcd\\x2a\\x61\\x2d\\\n\\x1c\\x78\\x22\\x36\\x7a\\xf7\\xd3\\xce\\x1d\\x15\\xd4\\xc5\\x13\\x97\\xe2\\x77\\\n\\xcf\\x77\\xe7\\x68\\x1d\\xf3\\xd4\\x17\\x6f\\x97\\x58\\xc9\\x41\\x7b\\x05\\xed\\\n\\x43\\x1b\\x2a\\xe7\\xc5\\xa2\\xa1\\xcd\\x8f\\xdd\\x39\\x7a\\xc0\\x86\\x4e\\x17\\\n\\x2d\\x10\\x32\\x35\\x83\\x83\\xf6\\x4a\\x1a\\x17\\x24\\x2e\\xa4\\xa1\\x0d\\x95\\\n\\xb1\\x34\\x99\\x15\\x77\\xf1\\x9f\\xbd\\xc1\\x7e\\x42\\x5d\\x51\\x09\\xf9\\x6a\\\n\\x4e\\xc7\\x6f\\xe7\\xe0\\x1a\\xaf\\xa1\\x07\\xd4\\x54\\x95\\x90\\x2f\\x33\\x3d\\\n\\xe0\\x1c\\x0e\\xae\\xf1\\x1a\\xba\\x9f\\xa1\\xaa\\x84\\x76\\x61\\x7e\\xd9\\xe3\\\n\\xf9\\x24\\xa6\\x39\\x08\\x26\\xec\\x94\\xaa\\x22\\xf2\\xb4\\x86\\x83\\x6a\\xfc\\\n\\x00\\x4b\\xbc\\x29\\x8a\\x4a\\xe8\\x10\\xf6\\x1f\\x5f\\x72\\x50\\x8d\\x1f\\x60\\\n\\x85\\xf5\\xaa\\xaa\\x22\\xda\\x85\\xd5\\xc5\\x87\\x1c\\x54\\xe3\\x07\\x74\\xd8\\\n\\xa6\\xaa\\x88\\x76\\x61\\x0e\\x49\\x73\\x50\\x8d\\x1f\\xe8\\x0a\\x09\\x18\\x7a\\\n\\xc8\\x0a\\x18\\x7a\\x52\\x0f\\x18\\x7a\\xd9\\x1b\\x30\\x9c\\x36\\x86\\x49\\x29\\\n\\xf6\\xea\\x8d\\xa1\\x8f\\xe8\\xa3\\x93\\x80\\xe1\\xe6\\x70\\x11\\x13\\xff\\x1d\\\n\\x1c\\x5c\\xe3\\x07\\xfa\\xf8\\x3d\\x60\\x38\\xdd\\xa0\\x42\\x85\\x7c\\xcb\\x41\\\n\\x35\\x7e\\x80\\x42\\x77\\xbc\\x85\\x4b\\x4e\\x02\\x38\\xb8\\xc6\\x6b\\xe8\\x7d\\\n\\x3a\\x65\\x45\\xe4\\x09\\xbd\\xe8\\x05\\x0e\\xae\\xf1\\x9c\\xb6\\x9a\\x3e\\xe8\\\n\\x05\\x0e\\x1e\\x11\\xc4\\xfa\\x28\\x3c\\xed\\xee\\x44\\xee\\xf9\\x66\\xb1\\x02\\\n\\x36\\x37\\xd0\\x9b\\x00\\xfc\\x67\\xff\\x41\\x26\\x9c\\x1f\\x94\\xcb\\x26\\xea\\\n\\x38\\x78\\x64\\xc1\\xbe\\x8b\\x1c\\xae\\xb1\\xcd\\xe4\\x4c\\xc0\\x58\\x40\\x4f\\\n\\xb9\\x93\\x93\\x1d\\x0e\\xe2\\x0f\\xb9\\x07\\xc8\\x3a\\x57\\x40\\xa1\\x30\\xb9\\\n\\x7f\\xc2\\xc1\\x23\\x09\\xbd\\x55\\x8b\\x86\\xb9\\xb1\\x84\\xed\\xdb\\x51\\x39\\\n\\x33\\x9b\\xd3\\xb1\\x7e\\x1c\\xdc\\x5b\\x6c\\xef\\x07\\x25\\x32\\x93\\xaf\\x54\\\n\\xc6\\xb8\\x9e\\xa3\\x44\\x0e\\xd8\\x4f\\x1e\\x51\\x95\\x76\\x77\\x48\\x8a\\xc5\\\n\\x1c\\xdc\\x7b\\x90\\x21\\xe7\\x57\\x86\\xa5\\x58\\x1a\\xc5\\xb9\\x64\\xd4\\x9c\\\n\\x7e\\x47\\xc3\\xb6\\x9f\\x95\\x36\\xe7\\xc9\\xd7\\x27\\x70\\xe8\\xad\\x28\\xd3\\\n\\xcd\\x0b\\x3b\\x21\\x7e\\xd1\\xb3\\x14\\x68\\x8c\\x2e\\x9c\\xea\\x88\\xf5\\xbe\\\n\\x3b\\x45\\xc0\\x85\\xa7\\x16\\x67\\xa4\\x50\\xe2\\x57\\x5a\\x8d\\x70\\x94\\xd0\\\n\\x63\\x3f\\xdb\\xec\\xc2\\x77\\x30\\xe6\\x11\\xff\\xbd\\x05\\x91\\x43\\x62\\x37\\\n\\xbd\\x04\\x95\\xd2\\x1a\\x85\\xa1\\x8b\\x5e\\xfa\\x84\\xbd\\xab\\xd4\\x36\\xe6\\\n\\x49\\x8a\\xb5\\xf4\\x88\\x29\\x47\\xf3\\x17\\xb4\\x84\\xd1\\xca\\x4c\\x15\\x08\\\n\\xe1\\x92\\x1c\\x25\\x9c\\xa0\\x41\\xc1\\x86\\x77\\x55\\xb6\\x15\\xaa\\x39\\x1b\\\n\\xbf\\x85\\x63\\xf9\\x0f\\xb5\\x04\\x6c\\x14\\x9d\\x5f\\x15\\x0e\\xbd\\xe3\\x00\\\n\\x77\\xfe\\xbf\\xe8\\xac\\x8f\\xa3\\x54\\x0f\\x7a\\x97\\x10\\x13\\x9d\\xe3\\xab\\\n\\x5f\\x08\\x43\\xae\\x35\\x42\\xe7\\x1e\\xcf\\x94\\x89\\xe7\\x54\\xf6\\x14\\x49\\\n\\x8a\\x1d\\x56\\x6b\\xec\\x0c\\x8e\\x56\\x5d\\x90\\x99\\xe9\\xca\\x4c\\x16\\x08\\\n\\x95\\xb2\\x3b\\x99\\x4e\\x0c\\xe2\\x68\\x81\\x07\\x79\\x1e\\x49\\xbd\\xbb\\xd0\\\n\\x0e\\x95\\x30\\x02\\x0c\\xe1\\x68\\xd5\\x27\\xe7\\x93\\x57\\x2c\\x57\\x65\\xb4\\\n\\x50\\xe8\\xd6\\xfb\\xe8\\x8b\\x07\\x1c\\x35\\x98\\xd8\\x67\\x76\\x62\\xa2\\x2a\\\n\\xff\\x2a\\x61\\xb2\\x9f\\xc3\\x31\\x83\\x03\\x1d\\xbb\\x63\\xe2\\x73\\xe7\\x0e\\\n\\x96\\x5a\\x9d\\x34\\xb0\\x54\\x0f\\xa0\\x03\\x33\\xdb\\x85\\x86\\x78\\x4b\\x99\\\n\\x6f\\x95\\xa4\\xb1\\xc1\\xc9\\x81\\x59\\xd5\\xa0\\xc3\\x35\\xb7\\x5d\\x9c\\x84\\\n\\x21\\xec\\x83\\x20\\x7d\\xcf\\x83\\x5e\\xb8\\x41\\xfe\\xdd\\xfb\\x33\\x21\\x77\\\n\\xb3\\x41\\x75\\xf1\\xd7\\x0e\\x0a\\xd9\\xf9\\x9c\\x27\\x4f\\xe8\\xee\\xdb\\x50\\\n\\x08\\x43\\xab\\xb9\\x57\\xc9\\x1d\\x16\\xda\\x9e\\x8d\\xfe\\x2e\\xcc\\x5f\\x29\\\n\\xe5\\x86\\xde\\x90\\xcc\\x87\\xc8\\x70\\xf9\\x6e\\x62\\xa5\\xf1\\xb9\\xdf\\x0e\\\n\\xce\\x6c\\xaf\\x14\\xf4\\x02\\xa7\\x8b\\xc3\\xd2\\xce\\xa2\\xe3\\xf6\\xc4\\x60\\\n\\x4e\\x26\\x1c\\x20\\xe3\\xe3\\x8b\\x0d\\x71\\x16\\x2a\\x66\\x19\\xb9\\x27\\x27\\\n\\xe7\\x68\\x9c\\x54\\x8f\\x93\\xdb\\x75\\x8b\\xe1\\xe8\\x15\\xb6\\x2f\\xc4\\x72\\\n\\x64\\xf7\\x8c\\xb0\\xf8\\xec\\x2d\\xc4\\xcc\\x8a\\x11\\x30\\xbc\\x5b\\xee\\x29\\\n\\x10\\x6f\\x2b\\x2d\\xa7\\xe9\\x79\\x30\\x4e\\xae\\x22\\xe8\\x21\\x3e\\xf6\\xd2\\\n\\x30\\xcb\\x1e\\xfb\\x15\\xd7\\x74\\x12\\x2a\\x70\\x17\\x7a\\x47\\x68\\x7c\\x46\\\n\\x2a\\xa1\\x63\\x68\\x18\\x52\\xd1\\x17\\x74\\xd0\\x2a\\x37\\x43\\x6f\\xd2\\xa1\\\n\\x1d\\x39\\xc4\\x77\\xe3\\xee\\x88\\x4e\\xa4\\xa9\\x32\\x53\\xd2\\x78\\x02\\x85\\\n\\x38\\x1b\\x71\\xcb\\x73\\xab\\x54\\x20\\xd8\\xf0\\x13\\x86\\xd4\\x2b\\x39\\xf9\\\n\\x70\\x43\\x4f\\x34\\x62\\xe2\\xee\\xd1\\xcf\\x55\\x50\\x2b\\x47\\x21\\xaf\\x43\\\n\\x61\\xaf\\x44\\xda\\x07\\x3f\\x57\\x41\\x7f\\x23\\x07\\xc7\\xaa\\x38\\xdd\\x55\\\n\\x94\\x3e\\x57\\xd1\\x0e\\x6d\\x1e\\x51\\x58\\x93\\x69\\x42\\x54\\x1a\\x1d\\x4c\\\n\\xed\\xa4\\x1e\\x16\\xc5\\x1b\\x6d\\x1d\\xd0\\x90\\x43\\x2d\\x59\\x61\\x7c\\xc0\\\n\\x24\\x5a\\xe9\\x3b\\x8a\\x9c\\xed\\x68\\x43\\xcb\\xcd\\x54\\xc6\\x78\\xba\\xd2\\\n\\xb9\\xc5\\x0b\\xe5\\x86\\x41\\xe3\\x5e\\xce\\x6a\\xef\\x82\\x1c\\xb9\\x60\\xec\\\n\\x1f\\x5b\\xe9\\x84\\xdb\\x33\\x12\\x9b\\x9a\\x33\\xc6\\xb3\\xbd\\xf2\\xb3\\x79\\\n\\x85\\xd0\\x27\\x8c\\x50\\x29\\xa3\\x51\\x28\\xce\\x4e\\x99\\x7b\\x58\\xb4\\x18\\\n\\xa0\\x7d\\x85\\x97\\xfb\\x9e\\x50\\x43\\x4b\\x55\\x54\\x0e\\x7d\\x6c\\x78\\xad\\\n\\xaa\\x00\\x2b\\x96\\x7d\\xb3\\x8c\\x9e\\x38\\x14\\xe3\\xc8\\x0f\\x16\\x5f\\x56\\\n\\xe3\\x06\\xba\\xe1\\x83\\x82\\x7b\\x18\\x05\\xf8\\x1a\\x7e\\x97\\x63\\x31\\xb0\\\n\\x47\\x59\\xc8\\x5d\\x88\\xe7\\xa9\\x25\\xf8\\x9d\\x42\\x9f\\x8b\\xb0\\xe6\\x0d\\\n\\x38\\x95\\x93\\xd7\\x54\\x0a\\x2d\\x06\\xe8\\x63\\x8f\\xa9\\x4c\\xfc\\x46\\xf4\\\n\\xa4\\x61\\x28\\xe8\\x06\\x54\\xd6\\x04\\xee\\x51\\xf6\\xe7\\xbb\\xa1\\x46\\x08\\\n\\x1b\\xc8\\x78\\x82\\x9c\\x59\\x46\\x7a\\xc9\\xaa\\xd1\\x68\\x34\\x1a\\x8d\\x46\\\n\\xa3\\xd1\\x68\\x34\\x1a\\x8d\\xc6\\x17\\x6a\\x6a\\xfe\\x07\\x9b\\x5d\\x18\\x09\\\n\\xd9\\x3c\\xee\\x0c\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\\n\\x00\\x00\\x3a\\x27\\\n\\x00\\\n\\x02\\x89\\xae\\x78\\x9c\\xed\\x5d\\x07\\x60\\x14\\x45\\x17\\x7e\\x47\\xc0\\x80\\\n\\x94\\xa3\\x1b\\x9a\\x17\\x44\\x40\\x8a\\x80\\x20\\x52\\x04\\x8e\\xde\\x7b\\x91\\\n\\x4e\\x28\\xd2\\xa5\\x08\\xd2\\x21\\x77\\x11\\x10\\x90\\xde\\x7b\\xd3\\x50\\xa5\\\n\\x29\\x4d\\x4a\\xc2\\xd1\\x94\\x26\\x08\\x02\\xe1\\x07\\x81\\xa3\\x0a\\x84\\x12\\\n\\x5a\\x38\\x20\\xc9\\xfe\\xfb\\x65\\x77\\x73\\x9b\\xcb\\x5e\\xdf\\xbb\\x5c\\xc2\\\n\\x7e\\xe4\\xb1\\xe5\\xa6\\xcf\\xec\\xcc\\x9b\\x37\\x6f\\xde\\x10\\xa9\\x28\\x03\\\n\\x01\\x2a\\x0a\\xa4\\x76\\xd9\\x88\\x16\\xb0\\xf7\\x7a\\x3d\\xf7\\xfc\\x49\\x7a\\\n\\x15\\x3d\\x66\\xdf\\x75\\xed\\xca\\x3d\\xaf\\x9f\\x47\\x94\\x3b\\xaf\\x8a\\xea\\\n\\xd7\\xe7\\x9e\\x27\\xb7\\x26\\x0a\\xdf\\xa2\\xa2\\xea\\xd5\\x79\\xf7\\x35\\x89\\\n\\xea\\xfa\\xa5\\xa1\\x32\\x65\\x78\\xf7\\x85\\x89\\x06\\xd6\\x49\\x43\\x81\\x81\\\n\\xfc\\x73\\x56\\xd6\\x7f\\xff\\x34\\x14\\x10\\xc0\\xfb\\x67\\xa3\\x0e\\x1f\\x93\\\n\\x86\\xb2\\x66\\xe5\\x9e\\xfb\\xa4\\x65\\xfd\\x4f\\x4c\\x43\\x53\\x9a\\x37\\xad\\\n\\x97\\xf9\\xfd\\xbc\\xef\\xb3\\x49\\xc9\\xdc\\xa0\\x7e\\xed\\x96\\xf8\\x15\\x94\\\n\\xfe\\x3d\\xf6\\xd2\\x69\\xc8\\xfa\\x5e\\xec\\x25\\xc3\\xe0\\xfa\\xed\\x87\\x12\\\n\\x65\\x39\\x0c\\x52\\xfd\\x39\\x68\\xfd\\xd7\\x44\\xd9\\xde\\x6f\\x50\\xbb\\x46\\\n\\xeb\\x91\\xcb\\x1e\\x5d\\x0d\\x9a\\xdc\\xf9\\x42\\xb0\\xe1\\xe9\\xd6\\x85\\x21\\\n\\x59\\xbe\\x5b\\x15\\x92\\x36\\x7f\\x99\\xc1\\x7e\\x79\\xea\\x57\\x3f\\x18\\xf2\\\n\\xfe\\xfb\\x19\\xbe\\x36\\xe4\\x9c\\x98\\x3b\\xe7\\x96\\x3a\\x07\\xf5\\xdf\\xd7\\\n\\x2c\\xb9\\xbb\\x8c\\xba\\x9a\\xc9\\x78\\xb8\\xca\\xed\\x83\\xfe\\x19\\x8b\\xdd\\\n\\x3e\\xf8\\xbd\\x7a\\xf5\\xa5\\x39\\x93\\xda\\xb5\\x8c\\xaa\\xd9\\x61\\x48\\xc1\\\n\\x4f\\xb3\\x0d\\x29\\x38\\x31\\xfd\\x9e\\x85\\xb5\\xbb\\x2f\\xad\\xbe\\xbf\\xf6\\\n\\xdf\\x37\\xe7\\xa7\\xcf\\xb1\\xc8\\xf0\\xa2\\xdb\\xf2\\x3d\\x0d\\xfe\\x5c\\x5c\\\n\\xa9\\xff\\xa3\\xb0\\xe8\\x2e\\x6f\\xcf\\xbc\\xf2\\xcb\\x38\\x71\\x59\\xa5\\xff\\\n\\x76\\x47\\xb3\\x2f\\x62\\xaf\\x8c\\x89\\x8d\\x7e\\xaf\\xc1\\x9c\\x8f\\xf1\\x37\\\n\\x3e\\xba\\xdd\\x7d\\x0a\\xcd\\x62\\x2a\\x67\\x34\\x86\\x3e\\xf2\\xeb\\xa5\\x0f\\\n\\x5b\\xda\\xe5\\x79\\xf9\\x28\\xfa\\x3d\\xf3\\xbf\\x8b\\x76\\x68\\x3a\\x4c\\xdd\\\n\\x56\\xb0\\x29\\xe5\\xfd\\xd9\\xcf\\x70\\xae\\xd0\\x80\\xf0\\x9b\\x6f\\xc7\\xfa\\\n\\xc5\\xfc\\x59\\xe8\\xd1\\xc9\\x25\\xdf\\x36\\xe8\\x77\\x2c\\x87\\xe1\\xad\\xa1\\\n\\x49\\xd7\\xb0\\xd5\\xc3\\xc7\\x3d\\xcb\\xd3\\x6c\\xc7\\xf9\\xa2\\x0d\\x5a\\x55\\\n\\x51\\x77\\x5a\\xb5\\xa7\\xc6\\x81\\xce\\xfb\\x28\\x7f\\xdf\\xd5\\xba\\x39\\xbb\\\n\\xa2\\xb2\\x0f\\x9e\\x1f\\xed\\x1f\\x77\\x77\\x78\\xcf\\xec\\x53\\x43\\x73\\xe7\\\n\\x5f\\x75\\xea\\x43\\xed\\xdd\\xc9\\xc6\\xea\\xe3\\x63\\x17\\xd4\\x1d\\x90\\xdb\\\n\\x44\\xed\\x7e\\x8e\\xe9\\x7a\\x7d\\xcb\\xe6\\x34\\x45\\xd3\\xb7\\xcd\\xf3\\x71\\\n\\xcf\\xdf\\x56\\x0e\\xcc\\xff\\x78\\x5d\\x68\\x3a\\xed\\xa0\\xaf\\x1b\\xd5\\x2f\\\n\\xf4\\xbc\\xf8\\xe0\\x99\\xcf\\xc6\\x57\\xde\\x39\\x4e\\x3b\\xa5\\x73\\xcb\\x3a\\\n\\x4f\\x5a\\x06\\x07\\x46\\x0c\\x78\\xd2\\xeb\\x7a\\xf1\\x73\\xe9\\x97\\x85\\xc6\\\n\\x18\\xff\\xba\\xd0\\xb4\\xd7\\xb5\\x2f\\xce\\x76\\xca\\xb0\\xbe\\xda\\x9b\\x80\\\n\\x91\\x5f\\xde\\x7a\\x7b\\x95\\x82\\x33\\xc7\\x64\\x31\\xf5\\x3b\\xf7\\x38\\xc7\\\n\\x57\\x6f\\x6a\\xb4\\x2b\\x56\\x31\\x63\\xc9\\xc6\\x97\\xe7\\x1a\\x5a\\x1c\\x3a\\\n\\x77\\xa3\\x53\\x9c\\xca\\xb4\\x74\\xda\\x93\\xa2\\x99\\xcf\\x4d\\xba\\xfd\\xbf\\\n\\xc8\\x2e\\xef\\x5d\\x5b\\xfd\\xa6\\x6c\\xd7\\x22\\xba\\xb7\\xa7\\x6f\\x87\\x0d\\\n\\x39\\xf2\\xa2\\xc6\\xf4\\x76\\xa1\\x07\\x3b\\xae\\xbd\\x46\\x1d\\xfd\\x9a\\xfa\\\n\\x35\\x2b\\x9f\\xf5\\xca\\xcd\\xdb\\x61\\x91\\x5d\\x7e\\xe8\\x34\\x30\\xf0\\x8b\\\n\\x0d\\xaf\\x56\\xac\\xbb\\x66\\xac\\xdc\\xac\\xe2\\xd8\\x41\\x97\\x0f\\xdd\\xde\\\n\\xfe\\xa0\\x71\\xcb\\x33\\xbb\\xb3\\xae\\x3b\\x9f\\xef\\xb9\\xa1\\xf3\\xc6\\xcc\\\n\\xeb\\xf7\\x19\\x4e\\x3e\\x9a\\x74\\xea\\xe4\\xf9\\xa9\\x7b\\x9a\\xf6\\xfb\\x28\\\n\\x73\\xc3\\x0b\\x6b\\xc2\\x3e\\xf8\\xe4\\xcb\\x59\\x77\\x37\\x7c\\xb0\\xef\\xf3\\\n\\xd1\\x83\\x5a\\x0c\\xa0\\xe5\\x3f\\xe5\\x6b\\x34\\xb0\\x77\\xfa\\x5f\\x5b\\xdf\\\n\\x3f\\xdc\\x31\\xdd\\xcd\\xf9\\x95\\x7b\\xa8\\xbb\\x1d\\xed\\xf4\\xc0\\xd0\\xbe\\\n\\x58\\xb6\\x87\\x39\\x4b\\x84\\xbe\\xba\\xd5\\xb1\\x6b\\xdb\\x29\\x5d\\xd7\\x94\\\n\\x32\\x2d\\x7a\\x51\\xe3\\x79\\xb7\\xd9\\xf5\\x6f\\xb5\\xde\\x33\\xe1\\xf5\\xb7\\\n\\xb3\\xeb\\xaf\\x39\\x94\\xbb\\xbe\\x36\\x52\\xb7\\xb7\\x7e\\x68\\xdf\\xa6\\x73\\\n\\x2f\\xae\\x2b\\x7f\\x79\\xcf\\xe8\\x82\\xc3\\x1a\\x3e\\xa8\\xbe\\xa7\\x61\\xbb\\\n\\xcd\\x11\\xc3\\xb6\\x87\\xb6\\x2d\\x15\\xdd\\xad\\xfb\\xdc\\xdf\\x1a\\x5c\\x7d\\\n\\x7b\\xfd\\xe7\\xa0\\x31\\xc7\\xd3\\x9d\\x2b\\x1e\\x10\\x11\\xf5\\xdb\\xaa\\xba\\\n\\x1f\\x97\\x6f\\xfb\\xf8\\xd6\\x83\\x3d\\xe7\\x1b\\xd6\\x5d\\x98\\xa1\\x7f\\xce\\\n\\x5e\\xfa\\x2f\\x8f\\xa8\\xa7\\xf5\\xff\\xee\\xd6\\x90\\xa0\\x8d\\x79\\x6a\\x3e\\\n\\xfc\\x35\\x76\\x7f\\xab\\x22\\x8d\\x37\\x74\\xae\\xd7\\xe0\\x4a\\xb9\\x05\\xed\\\n\\xee\\x2c\\x3c\\x79\\x32\\xf4\\xe5\\xcb\\x3e\\x8b\\xcb\\xac\\x89\\x1e\\x5b\\xf3\\\n\\xf2\\x94\\x03\\xe1\\x8d\\x2a\\x15\\xbc\\x57\\xb8\\x46\\xe6\\x2e\\x27\\xde\\xbc\\\n\\xee\\x31\\xb1\\xfb\\xa9\\xfb\\x01\\x4f\\x63\\xc3\\x3a\\x7e\\x52\\x77\\x43\\x2e\\\n\\xff\\x06\\x5f\\x3e\\xbf\\x3e\\xe9\\x64\\xf0\\x3f\\xa7\\x66\\x0f\\xaf\\x13\\xf8\\\n\\x5f\\x93\\xfa\\xa6\\xf6\\xa7\\x2b\\xcc\\xed\\x57\\x79\\x4e\\xd4\\xe5\\x66\\x19\\\n\\x46\\x3c\\xba\\xbf\\x4f\\x93\\x61\\xdc\\x94\\xf9\\xbf\\x4d\\x5f\\x3b\\x24\\x4d\\\n\\xf3\\x85\\x55\\x16\\x46\\x5d\\xd6\\x0d\\x2a\\xf9\\x63\\xf4\\x9a\\x17\\x85\\x7b\\\n\\xe6\\x6b\\x10\\x36\\x64\\xa2\\xa9\\xd6\\x8d\\x82\\x9f\\x4e\\x5b\\x5c\\x34\\xfc\\\n\\xfa\\xc2\\x8c\\x47\\x3f\\x29\\x5f\\x6a\\xd7\\xb3\\x27\\xa3\\x37\\x50\\xbe\\x9c\\\n\\x6f\\xcf\\xdf\\x7c\\x32\\x34\\x78\\x7d\\x31\\xfd\\xde\\xee\\xea\\xa7\\x6b\\xb6\\\n\\x56\\x58\\x92\\x29\\x74\\xd6\\xf5\\xba\\xe1\\x03\\x3f\\xe8\\xd6\\xb1\\xe7\\x8d\\\n\\xb4\\xab\\xb6\\xd4\\x7f\\xdd\\x42\\x77\\xa1\\x5d\\xce\\x3b\\xa1\\x2f\\x8a\\x5d\\\n\\xa9\\x9a\\x66\\x19\\x9d\\xcf\\x55\\xac\\x52\\x6c\\xc4\\xf4\\x3a\\x2d\\x4e\\x57\\\n\\xf8\\x27\\xe8\\x59\\xbd\\x31\\x43\\xc7\\xad\\xcf\\xa1\\x7f\\x73\\x6f\\xd2\\x39\\\n\\xd5\\xe7\\x46\\x5d\\xa3\\xb1\\xec\\xc3\\xde\\xee\\xf5\\x7b\\xbf\\x5c\\xba\\x60\\\n\\x40\\xc7\\x4a\\xaa\\xf5\\x25\\xc2\\x4b\\x14\\xa8\\x3e\\x33\\x34\\x34\\xe3\\x97\\\n\\x6c\\xaa\\xda\\x56\\xa9\\x3f\\xf2\\xd1\\xca\\xcf\\x73\\xd7\\xa9\\xa4\\xeb\\x70\\\n\\xb3\\xd6\\x72\\x36\\x28\\x6d\\x91\\xfd\\xc3\\x27\\xdf\\xaf\\x79\\xa2\\xcd\\x2c\\\n\\xed\\xed\\x37\\xcd\\x8b\\xd2\\xb0\\x3a\\x0d\\xdf\\xff\\x7b\\xdd\\x15\\xdd\\xd1\\\n\\x86\\xc5\\x9e\\x1d\\xff\\x42\\x55\\xbf\\x73\\xf6\\x31\\x1a\\x43\\x89\\x35\\x69\\\n\\xbe\\x69\\xfe\\xb0\\xec\\xbd\\x0b\\x2d\\x55\\x0d\\x9b\\x4c\\x0d\\xab\\x73\\xb1\\\n\\xf8\\xe1\\x4f\\xd2\\x5d\\x2b\\xd3\\xe8\\x5e\\xab\\xc6\\xd7\\xb7\\xde\\x89\\xe9\\\n\\xda\\x8a\\x86\\x35\\x78\\xd8\\xef\\xf7\\xf6\\x3f\\xb4\\xc9\\xf5\\x2a\\xff\\xd3\\\n\\x1c\\x1d\\x2e\\xf6\\xfc\\xbb\\x29\\x3d\\x98\\x53\\x3a\\x7b\\x97\\x2f\\x43\\xeb\\\n\\xf5\\x59\\xf7\\xa2\\xf0\\xae\\x5e\\xd5\\x1f\\x2c\\x2f\\x7c\\xf3\\x64\\xf7\\x41\\\n\\x0b\\x32\\xfc\\x9a\\x6d\\xf7\\xe4\\x27\\xaf\\x5a\\x2e\\xce\\xba\\xe6\\xee\\x9a\\\n\\xdb\\x87\\x22\\x0d\\x37\\xca\\x76\\xeb\\x35\\x6c\\xd1\\x8e\\x2b\\xab\\x5e\\x3e\\\n\\xcd\\x7d\\xaf\\xe5\\x8e\\xe7\\x47\\xd4\\x93\\xcb\\xa1\\xd8\\x4b\\x3e\\x8d\\xad\\\n\\x1a\\xc4\\x16\\x7b\\xf9\\x41\\x39\\xb4\\x81\\x6f\\xe2\\x8c\\xa7\\xce\\xd7\\x5b\\\n\\x15\\xd6\\x99\\xad\\xb8\\xaa\\x43\\x43\\xd7\\xa8\\x56\\xce\\xcb\\x50\\x6e\\xea\\\n\\xbc\\xde\\x81\\x9b\\xb2\\xef\\x9a\\xfe\\xf9\\xc8\\xde\\x93\\x35\\x01\\x91\\x86\\\n\\xd5\\x65\\xbb\\x5d\\x1c\\x32\\x61\\x47\\xb5\\x2c\\x05\\xaf\\xce\\xfe\\xa9\\xe4\\\n\\xec\\x2f\\x2a\\x6e\\x39\\xbb\\x75\\x62\\x8d\\xed\\x13\\xde\\xe6\\x5d\\xfb\\xe2\\\n\\xdb\\x0d\\xb5\\x57\\xb5\\x2c\\xb6\\xb0\\x41\\xbe\\x40\\xcd\\xfc\\x0c\\xdb\\xe7\\\n\\xcc\\xac\\x1f\\x79\\xe5\\x68\\xd9\\x6e\\x0d\\xef\\x84\\x56\\xab\\x38\\xb4\\xc0\\\n\\xc8\\x30\\xb6\\x81\\x75\\x29\\x1a\\x16\\x34\\x2e\\x98\\x36\\xb6\\x6e\\x7f\\x62\\\n\\x68\\x9a\\x8b\\x19\\x7a\\x9f\\xdf\\x37\\xb6\\x9a\\x31\\x6b\\xdf\\xde\\xb1\\x11\\\n\\x79\\x7a\\xdd\\x98\\x9b\\xf3\\x4e\\xa5\\x73\\xaf\\x16\\xbc\\xba\\x77\\xf7\\xe3\\\n\\xc1\\x93\\x77\\xf4\\xa6\\x81\\x8d\\xfb\\x9c\\x99\\x97\\xfe\\xab\\x07\\x3f\\x9e\\\n\\x1f\\x3b\\xaa\\x47\\xf6\\x91\\xab\\x6b\\x6f\\xbb\\x32\\x32\\xe4\\xc5\\xc1\\xeb\\\n\\xbb\\x9f\\xe7\\x6d\\x59\\x68\\xf8\\xec\\xe8\\x63\\x51\\xf5\\x5e\\xad\\x38\\x99\\\n\\xee\\xe6\\xd5\\x6f\\x16\\xbf\\x38\\x1c\\x37\\xac\\xe6\\xca\\xed\\x57\\x99\\xa0\\\n\\x07\\xdb\\x7f\\x6e\\x9d\\xaf\\x76\\xa4\\xa1\\xd2\\x89\\x4c\\xa1\\x9d\\xe7\\x9e\\\n\\xd9\\x92\\xfd\\x79\\xde\\xd5\\x67\\xe6\\x14\\xf9\\x6a\\xfd\\x17\\x8b\\x2e\\x86\\\n\\x0c\\x0a\\xa9\\xd0\\x61\\xda\\xcb\\xe9\\xc7\\x7b\\x7f\\x35\\x7d\\xc4\\x9a\\xa3\\\n\\xed\\xd6\\x74\\x59\\x54\\x70\\x73\\xf3\\x3e\\xbf\\x0c\\xcf\\x35\\x72\\xc3\\xc1\\\n\\x80\\xa0\\x25\\x63\\xeb\\x2e\\x0f\\xd0\\x1e\\xfe\\x51\\xdb\\xb7\\xd1\\x50\\x43\\\n\\xe1\\x07\\x99\\xb7\\x0d\\x3b\\x74\\xe2\\x60\\x4f\\xe3\\xd3\\x4c\\x9f\\x55\\xcd\\\n\\xb2\\xbf\\x51\\xcc\\xa3\\x53\\xc3\\xfb\\x2d\\x1c\\x1c\\x76\\x60\\xc7\\xcf\\xa3\\\n\\xce\\x2d\\x3c\\xfb\\x78\\x5e\\xff\\xa0\\x8f\\xf3\\x0f\\xd1\\xa8\\x86\\xd7\\x1b\\\n\\x1b\\xf7\\xf8\\x78\\xff\\xb6\\x45\\x74\\x1d\\x5f\\xfe\\x7b\\xe4\\xee\\xf0\\xe5\\\n\\xd3\\x9a\\xc5\\x4e\\x7f\\xd9\\xee\\x8a\\xe6\\x93\\x9e\\x65\\x9a\\x05\\x8c\\x2d\\\n\\xb6\\xfb\\xdc\\x8c\\x97\\x05\\x6e\\x5c\\x9b\\xf0\\x6a\\x94\\x69\\xd3\\xf7\\x95\\\n\\x0e\\xbd\\x89\\x4d\\xb7\\x24\\x4f\\xe8\\x81\\x74\\x71\\xdf\\x4f\\x6b\\x16\\x33\\\n\\xfb\\x87\\x52\\x6d\\x2b\\x37\\xdf\\x3b\\xea\\x52\\xe9\\x36\\x9f\\xd7\\xeb\\xd0\\\n\\x64\\x5c\\xc4\\xe5\\xa2\\x2f\\x7e\\xf9\\xb1\\xc5\\x83\\xd0\\x5b\\xa1\\x57\\x6b\\\n\\x87\\x7e\\xd7\\x71\\xf9\\x91\\x92\\xc5\\xe6\\xd6\\x79\\xb6\\x3c\\xff\\x37\\xbf\\\n\\x75\\x5e\\x7a\\xa4\\x78\\xb1\\xed\\x79\\x8c\\x55\\x37\\x6e\\xde\\x37\\x68\\xef\\\n\\xd5\\xa5\\x47\\xee\\x96\\x0f\\xde\\xd0\\x6d\\x4c\\xc8\\x3f\\xb7\\xf7\\xd5\\x6e\\\n\\xbb\\x6e\\x73\\x93\\xee\\xff\\xbb\\xd2\\x67\\x66\\xe1\\xd8\\x23\\x69\\xba\\x45\\\n\\xcd\\xaf\\xa8\\xdd\\xd6\\x70\\xfd\\xdd\\xc8\\xe7\\x9d\\xa7\\xae\\xa9\\xb1\\xa8\\\n\\xe8\\xa6\\x98\\x5f\\xf6\\x35\\xae\\xb0\\xb6\\xf3\\xf2\\xb1\\x17\\xc7\\x96\\xa8\\\n\\x3a\\x77\\xde\\xed\\x62\\x35\\x4b\\x05\\x87\\x54\\xa9\\xf7\\xde\\x2f\\x13\\xf2\\\n\\x4e\\x7c\\x55\\xe4\\xc9\\xd5\\x12\\x5b\\xd2\\x9e\\x5f\\xf4\\x57\\xf6\\xd3\\xc7\\\n\\x4a\\xa7\\x79\\x9b\\xa1\\x44\\xc6\\x57\\x4f\\x07\\xdf\\xb9\\xfe\\x47\\x97\\x98\\\n\\x7c\\x1f\\x6e\\xc9\\xb4\\xbf\\xc9\\xc8\\x9a\\x4f\\x74\\x39\\x3e\\xec\\xf5\\xe6\\\n\\xe8\\xed\\xeb\\x1f\\xf3\\xdd\\xb7\\x4c\\x7f\\x77\\xa2\\xd8\\x51\\x60\\x78\\x54\\\n\\xda\\xc1\\x59\\x2f\\xf9\\x3f\\x4c\\x37\\xbc\\xc9\\xe5\\x5e\\x41\\x7e\\xda\\x34\\\n\\xbb\\x8b\\x3e\\x7a\\x2f\\xaa\\x56\\x3e\\x55\\xc3\\x71\\x11\\xf3\\x33\\x74\\xcd\\\n\\x5d\\x31\\x6d\\x49\\xd5\\xa4\\x90\\x3a\\xbb\\x3e\\x7c\\xf8\\xeb\\x40\\x3f\\x26\\\n\\xdd\\xd8\\x2c\\x31\\x79\\x4d\\x9d\\xc3\\xa2\\x3e\\xbe\\xf3\\x85\\xff\\xfe\\x2c\\\n\\xcb\\xfc\\x1e\\xab\\x22\\x33\\xef\\xfa\\xd2\\xd0\\xe0\\xd0\\xc7\\x85\\x36\\xac\\\n\\x5a\\x17\\x32\\xb3\\x6f\\xf0\\xdf\\x83\\x22\\x06\\xaa\\x9e\\xa8\\x66\\x56\\xb8\\\n\\xda\\xa2\\x81\\xba\\x80\\xaa\\x54\\xcb\\x5e\\x7f\\x0f\\xba\\xf0\\x55\\xc8\\x4c\\\n\\x7d\\x6c\\x93\\xe1\\x1d\\xf2\\xee\\xeb\\x7d\\xff\\xa2\\xe1\\xfa\\xbf\\x17\\xf5\\\n\\xad\\x0c\\x2b\\xd6\\x7e\\xa1\\x6f\\x6d\\xc8\\x61\\x08\\x4a\\x53\\x5a\\xa5\\x2d\\\n\\x9d\\xcd\\xf0\\xa1\\x31\\xc7\\x09\\x75\\xd4\\xa5\\xe8\\xaa\\xdb\\x32\\x9d\\xfa\\\n\\xfc\\xd7\\xcf\\x42\\x73\\x3f\\x7c\\x2f\\x38\\x43\\xa7\\xbb\\xeb\\x0e\\x3c\\x39\\\n\\x93\\x7e\\x6e\\xcd\\x12\\xd7\\x02\\x33\\xad\\x3f\\x37\\x7e\\x6f\\xc3\\x7d\\x99\\\n\\xaa\\x2c\\xd6\\xcd\\xad\\x3f\\x7d\\x51\\xba\\xe0\\x1a\\x15\\x17\\x87\\xff\\x71\\\n\\xfa\\xc0\\xa3\\x7d\\x13\\x1a\\x3d\\x98\\xfe\\xbf\\x74\\xcb\\x96\\x67\\xaf\\xad\\\n\\xb9\\x5c\\xbc\\x5b\\x91\\xf9\\x7b\\x1f\\x64\\xbd\\xf1\\xf5\\xe8\\x07\\x33\\xa2\\\n\\xbf\\x69\\xa5\\xaa\\x9a\\xf9\\xdf\\xc6\\x99\\xd6\\x46\\x3e\\xca\\x74\\x63\\xc8\\\n\\x9a\\xf3\\xe9\\xde\\x86\\xe4\\x98\\x50\\xa2\\xfd\\xb0\\xe0\\x88\\xe7\\x7b\\xfc\\\n\\xc6\\x4c\\x19\\xb2\\xf0\\xe5\\x92\\x81\\x11\\x7d\\xba\\x8e\\x6f\\x30\\x7b\\xf8\\\n\\x89\\xc8\\x5f\\x76\\xad\\x99\\x5e\\xe1\\xcc\\xb7\\x87\\xfa\\xe7\\x31\\xed\\x6b\\\n\\xfc\\x64\\xe7\\x8d\\x6a\\x51\\xf9\\x8c\\x19\\x8d\\x8d\\x0e\\x3d\\xbb\\x76\\x65\\\n\\xae\\xee\\x6d\\xde\\x91\\xd5\\x2f\\x95\\x7b\\x52\\xf0\\x76\\xf5\\x8c\\x06\\x15\\\n\\x3b\\xc4\\x1c\\x9e\\xcb\\xdc\\x7d\\x96\\x73\\xf0\\xfc\\x6d\\x67\\xc3\\x4f\\x99\\\n\\xc2\\xcf\\x0d\\xef\\x95\\xa1\\x77\\xd4\\x4c\\x95\\xae\\x4e\\x5c\\x8e\\x7f\\xfe\\\n\\x37\\xa3\\xdf\\xc2\\xe3\\x15\\x4a\\x5c\\x2d\\xbc\\xe9\\x62\\xc7\\x8f\\xbe\\xd1\\\n\\x57\\xbe\\x1b\\x12\\x91\\xfe\\xf5\\xe9\\x7e\\x7f\\x98\\x56\\x6c\\xce\\xb3\\x70\\\n\\xc7\\xdc\\x8d\\xa3\\xc6\\xf5\\x3b\\x39\\xe4\\xa3\\x32\\x11\\x46\\xad\\xff\\xfe\\\n\\xfa\\x43\\x17\\x5e\\x8f\\xa6\\x27\\xb3\\xfe\\x8b\\x39\\xf2\\x6a\\x42\\xa1\\xcc\\\n\\xc5\\x16\\x76\\x1a\\x35\\xee\\x9b\\x93\\x43\\xb2\\x47\\x6d\\x6e\\x1c\\x52\\xf2\\\n\\x6e\\xfa\\x22\\xe7\\x32\\x45\\xbd\\x7f\\x63\\x70\\xf8\\xe3\\xd9\\x86\\x9a\\x53\\\n\\xbf\\xed\\x3f\\x72\\xc9\\xb1\\xc8\\x1e\\x97\\x0b\\x94\\x5d\\x76\\x66\\xf4\\x8a\\\n\\xfb\\x11\\xf9\\x46\\xf4\\x6b\\xab\\xff\\xef\\xc1\\x7b\\x2d\\x0e\\x67\\x1a\\xbc\\\n\\x6c\\xf4\\xa4\\xf6\\x11\\x1b\\xda\\x6e\\x5e\\xff\\xb4\\xc1\\x9e\\x2e\\xd7\\xcf\\\n\\xaf\\x38\\x10\\x6d\\x0c\\x5a\\xf5\\xc6\\xd0\\x7e\\x4d\\xc7\\x12\\x8f\\xee\\x66\\\n\\x08\\xaa\\x7b\\x21\\xf3\\xe8\\x15\\x8f\\x5f\\xd4\\xb9\\x7a\\xe1\\xab\\x2e\\x07\\\n\\xda\\xec\\xcb\\xb0\\x69\\xd6\\xfd\\xc9\\xc3\\x16\\x3c\\x98\\x74\\xa6\\x42\\xdf\\\n\\x57\\x83\\xb5\\x47\\xcb\\x5e\\x68\\x96\\x73\\xc5\\x27\\x59\\xb7\\xee\\xdd\\xfa\\\n\\x68\\x7f\\xdc\\xd9\\xe8\\x4f\\x57\\x1f\\x7b\\x34\\xf8\\x71\\xd3\\xe5\\x1b\\x03\\\n\\xfe\\x1e\\xb5\\xf7\\xc0\\xa2\\x5e\\xb3\\x67\\x5d\\x59\\x17\\x3d\\x20\\xf3\\x93\\\n\\xcf\\x56\\xad\\x6a\\xdd\\xe5\\x40\\xd3\\x4b\\x21\\xcb\\xfd\\xba\\xac\\x8d\\xcb\\\n\\xb5\\xe3\\xd3\\x02\\x1b\\x02\\x2e\\xe5\\x79\\x33\\x74\\xd1\\xd8\\x59\\x70\\xf1\\\n\\x34\\xf7\\xd5\\x95\\xc6\\xf3\\xd3\\xce\\x8d\\x8a\\x2d\\x7c\\x28\\xd7\\x96\\xba\\\n\\x25\\xda\\xf7\\xde\\x30\\xfc\\x93\\xa1\\x1b\\x8f\\xaf\\xca\\x5b\\xb6\\xd9\\xce\\\n\\x06\\xc6\\xaf\\xa7\\x74\\x6d\\x73\\xaa\\xeb\\xb3\\x37\\x01\\x25\\x72\\x7d\\x5f\\\n\\xa5\\x91\\x2e\\x3a\\x66\\xe9\\xa3\\x42\\x55\\x0b\\xb4\\x2b\\xb4\\x29\\xe0\\xfc\\\n\\xe0\\xcc\\x65\\xb7\\xae\\xec\\x55\\xfa\\x7e\\xd1\\x63\\xa5\\xce\\x5e\\x3f\\x78\\\n\\xe0\\x46\\xe0\\xfd\\x9d\\x99\\x3f\\xf8\\xb1\\xf6\\xc6\\x22\\x99\\x2b\\x6f\\x9d\\\n\\xf9\\xed\\xe8\\x49\\xb4\\xbb\\xdf\\x88\\x3c\\x4d\\x6f\\x9c\\xea\\x1f\\xaa\\xeb\\\n\\x5b\\x8f\\x7d\\xbf\\xac\\xee\\xec\\x88\\x3f\\x2f\\xd5\\xbb\\xfc\\x5e\\x3b\\xbf\\\n\\x19\\x0b\\xd2\\xef\\xa8\\xa1\\x99\\x1d\\x7d\\xa7\\x73\\xc9\\x1c\\x6b\\xcb\\x06\\\n\\xb4\\xe9\\xa2\\xb9\\xf5\\x71\\xdf\\xe5\\x01\\x37\\xa7\\x6c\\x2b\\x5e\\xb4\\x7a\\\n\\xa3\\x2d\\x43\\x5a\\x2f\\x69\\x71\\xf7\\xe5\\x67\\xc3\\x67\\x2f\\xf0\\xbb\\xde\\\n\\xed\\xf7\\x46\\x3d\\x82\\x3e\\x7e\\x34\\x75\\xc0\\xc3\\x19\\x25\\x4e\\x74\\x7f\\\n\\x31\\x6a\\xdc\\xb4\\x5b\\xa1\\xc3\\x1e\\xee\\x2c\\xdb\\x6d\\xd7\\xdd\\x72\\x37\\\n\\x77\\x1f\\xcd\\x7b\\xb8\\x92\\xba\\x6c\\xce\\xbb\\x2f\\xa7\\x6c\\xc9\\x7a\\x7d\\\n\\xcf\\x2f\\x13\\xbb\\x7f\\xf3\\xcf\\x47\\x7d\\x83\\x4c\\xfb\\x7a\\x1e\\x3a\\x5f\\\n\\xe4\\xee\\xcb\\x5c\\x25\\x67\\x5d\\x3c\\xdb\\xa3\\xe7\\xa1\\x6f\\x3a\\x37\\xbc\\\n\\xf1\\x77\\x40\\x91\\xa3\\x5b\\xca\\x6e\\xdd\\x7a\\xbf\\xea\\xcd\\x2f\\xc7\\x4e\\\n\\x8d\\x0b\\x7a\\x3e\\xf3\\x65\\xa6\\xbe\\xda\\x1f\\xc6\\xd5\\xf9\\x29\\x7f\\xd1\\\n\\xe7\\x6f\\xa6\\x95\\xca\\x7e\\xfd\\xf5\\xfc\\x9a\\x9f\\x2d\\x98\\xf3\\x5b\\x63\\\n\\xd3\\xc8\\xd5\\x01\\x7f\\x1e\\xda\\x1f\\xae\\x1a\\x1a\\x3a\\xe0\\x14\\xfb\\x7b\\\n\\xc9\\xa2\\x77\\xee\\xdd\\xeb\\xb4\\x3a\\x60\\xd2\\xe9\\xfd\\xe1\\x35\\x1a\\x85\\\n\\xfe\\xa5\\xef\\xb1\\x7d\\xa1\\xe9\\xd1\\xf3\\x01\\xec\\x9b\\x63\\xfb\\xc3\\x0b\\\n\\x3f\\xc9\\x71\\xa0\\xdb\\x57\\xef\\x1f\\x6d\\xd7\\xa1\\x61\\xde\\x32\\x97\\xaa\\\n\\xd6\\xc9\\x78\\x2a\\x32\\x63\\xfd\\x51\\x9b\\x22\\xd8\\x51\\x64\\x6a\\xa3\\xf6\\\n\\x1f\\xc6\\x34\\x5c\\x1d\\xf0\\xf6\\xc4\\xfe\\xf0\\x6d\\xfd\\x8f\\x0c\\x58\\x5f\\\n\\xbe\\xee\\x17\\xe5\\xaa\\x7d\\xb4\\xa6\\xfe\\xbd\\xd8\\x9a\\x9f\\x45\\x4f\\x1f\\\n\\x35\\xae\\xde\\x91\\x05\\x71\\x5d\\x4a\\xe4\\xea\\xea\\x5f\\xa5\\x4e\\xcc\\xcc\\\n\\xc8\\xef\\x58\\x97\\x86\\xfd\\xe1\\x3d\\xee\\x4e\\xb9\\xae\\xef\\x51\\xed\\x70\\\n\\xd5\\x46\\x31\\xc3\\xf7\\xb6\\xfb\\xe4\\x0f\\x36\\xd1\\x4f\\xb6\\xcd\\xab\\x7a\\\n\\xc5\\x7f\\x62\\xf7\\x87\\x3f\\x5e\\x0a\\xbb\\xf8\\x57\\x4b\\xd5\\xf0\\xc9\\xa3\\\n\\xc6\\x4d\\xaa\\xba\\xf7\\xc7\\xd2\\x3d\\xfd\\x62\\x17\\x7d\\x39\\x6b\\xc5\\xeb\\\n\\x25\\xbf\\x97\\xcf\\xda\\x23\\xbc\\xfd\\xbd\\x82\\xc6\\x26\\x87\\xa6\\xfc\\xbd\\\n\\xab\\x44\\x9d\\x03\\x69\\xe2\\x32\\x98\\xfe\\x3b\\xce\\xf4\\xcf\\xd7\\x66\\xe1\\\n\\xd3\\xb8\\x6a\\xfd\\x73\\xc6\\x3e\\x0f\\x7c\\x36\\xac\\xc7\\x2f\\xef\\xff\\xdb\\\n\\x2c\\xe0\\xc5\\x9f\\x7d\\x74\\xb3\\x2f\\x8d\\x30\\xac\\x9b\\x50\\x83\\x19\\x75\\\n\\x72\\xe5\\xd5\\x8e\\x33\\x9b\\xd2\\xdb\\x86\\xe9\\xce\\xd6\\xea\\xa1\\x4d\\x33\\\n\\xfa\\xfc\\xc0\\x43\\xf3\\x67\\xf7\\xd8\\xa1\\x2b\\x37\\xef\\xad\\xe1\\x80\\x8a\\\n\\xa9\\xf8\\xfa\\x49\\xec\\x02\\xed\\x81\\x57\\x7f\\xb4\\x3c\\xf6\\xf3\\xfe\\x25\\\n\\xc1\\xc1\\xb1\\x9f\\xaf\\xcc\\x11\\xfd\\x62\\x65\\xf6\\xe8\\x98\\x8d\\xf7\\xce\\\n\\x96\\x7e\\x3c\\x7c\\x43\\xe0\\xe8\\x3e\\x9b\\xf6\\x84\\x8d\\x8a\\x35\\xb4\\x5e\\\n\\xbe\\x67\\xe5\\xb1\\xbc\\x75\\x98\\x23\\x03\\x77\\x0f\\xca\\x3b\\xfd\\xa7\\x02\\\n\\x77\\x5f\\xfa\\x45\\xdf\\x53\\xbf\\x56\\x67\\xd0\\x55\\xb8\\x58\\xd5\\xf8\\x43\\\n\\xd8\\xec\\xad\\x91\\x91\\x7b\\xd2\\x3c\\x7f\\xc3\\x72\\xc0\\xcd\\x97\\xad\\x2e\\\n\\x95\\xf6\\xd9\\xe8\\xb0\\x4e\\xef\\xe7\\xef\\xd6\\xa7\\x51\\x48\\xe7\\x49\\x5b\\\n\\xb5\\xbf\\x05\\xf4\\xd9\\xdb\\x76\\x0a\\x13\\x32\\x62\\x67\\xc0\\xb1\\x61\\xa6\\\n\\xcb\\x73\\xee\\x18\\xfe\\x79\\xb9\\x33\\xff\\xa5\\x61\\xa6\\x25\\x27\\xf2\\x7d\\\n\\xdf\\x38\\x62\\x5d\\xbe\\xef\\x17\\x45\\x94\\x38\\x9e\\xbd\\x6f\\xd0\\xe3\\x4b\\\n\\x2f\\xee\\x2c\\xe8\\x7a\\xf7\\xe5\\xc6\\x23\\x4b\\xbf\\x7f\\xbc\\xe9\\x64\\x85\\\n\\x74\\xe5\\xb7\\xb6\\xcd\\xfd\\xc1\\x14\\xe6\\x66\\x5b\\xb6\\x0a\\x1a\\x9e\\xb8\\\n\\xc1\\x7c\\xf9\\xe9\\x91\\x1e\\x5d\\xb6\\x3e\\x1c\\x5b\\xe6\\xd8\\xc5\\xbd\\xcf\\\n\\xba\\x66\\x7d\\x3e\\xba\\x7c\\xf1\\x97\\x67\\xbb\\x6e\\x5d\\x98\\x61\\xfb\\xb0\\\n\\x35\\x9a\\xcc\\xbd\\xba\\x6c\\xbd\\x68\\x1a\\xfc\\x37\\x53\\xfa\\xe5\\x8d\\x55\\\n\\x27\\x17\\x57\\x8b\\xd8\\xdf\\xa5\\xce\\xfe\\x5a\\x97\\x67\\xde\\xb9\\xc0\\xb6\\\n\\xa7\\xb5\\x7f\\xfd\\x39\\x7e\\x69\\xc4\\x2f\\xbf\\x57\\x32\\x7e\\xf8\\x54\\xbb\\\n\\x6c\\xdf\\x8e\\xa0\\x0f\\x2f\\x2f\\xf8\\xa0\\x7e\\xbe\\xda\\xbd\\x4b\\x8c\\xad\\\n\\xfb\\xc1\\xb3\\x37\\xbb\\xf3\\x3c\\x1e\\xb1\\xfe\\xfd\\xa6\\x73\\xa2\\x0b\\x55\\\n\\x6e\\x5f\\xe4\\x54\\xdd\\xbf\\xe6\\x04\\x9b\\x96\\xb7\\xac\\xda\\xb6\\xf2\\x56\\\n\\xdd\\xca\\xa7\\x9d\\x4f\\xb4\\x09\\x1d\\x17\\xfa\\x68\\xfa\\x45\\xfd\\x7f\\x8d\\\n\\xd2\\x5e\\x5e\\x35\\xaf\\xe7\\x81\\xc8\\x23\\x6d\\x98\\xf9\\xa7\\x23\\x9b\\x9d\\\n\\x0d\\x9e\\xb2\\x75\\xf4\\x83\\xcf\\xfb\\x6a\\xb7\\xed\\xcb\\xf4\\x5f\\xdd\\x45\\\n\\xc5\\xea\\x68\\xf3\\x0d\\xe8\\xbb\\xf4\\x55\\xf1\\xe5\\x11\\x2b\\x0b\\xdf\\x7e\\\n\\xd9\\x63\\xcf\\xd7\\xbf\\x34\\xbe\\x3b\\xa5\\x74\\xb6\\x6b\\x7d\\x16\\xde\\x63\\\n\\xd4\\x8f\\xa8\\xef\\x7f\\xd5\\x2f\\x86\\x64\\x5c\\x7a\\xed\\xf0\\xfe\\x2e\\xe3\\\n\\xb7\\xd5\\x7c\\x33\\xf3\\x49\\xc9\\xd8\\xe5\\x69\\xa3\\xb3\\xcd\\xf8\\xba\\xe5\\\n\\x9b\\x7d\\x75\\x7f\\x6f\\x46\\x8b\\x22\\xfa\\x77\\xdd\\xb8\\x2c\\x7d\\xc7\\xa2\\\n\\xb7\\x97\\x8c\\x2b\\xd7\\xec\\xf2\\x90\\xeb\\xd3\\xa3\\x4b\\xb3\\xef\\x0c\\x0b\\\n\\xd6\\x47\\xdf\\xaa\\x52\\x4b\\x37\\x23\\x6d\\x96\\xac\\xd1\\xab\\x06\\xa8\\x8d\\\n\\xc5\\xff\\xda\\xdf\\x65\\x73\\xa3\\xb0\\x92\\xbf\\x9f\\x3d\\xfd\\x4f\\xec\\xd2\\\n\\xc9\\x71\\x95\\xee\\x4f\\x8a\\x2d\\xdc\\x61\\xf9\\xfe\\x60\\xed\\x8d\\x8d\\x7f\\\n\\x0c\\x3b\\x34\\xfb\\x44\\xae\\x9a\\x7b\\x8d\\x95\\xd2\\xd4\\x59\\x5c\\xb8\\xe4\\\n\\xdb\\xcd\\xcf\\x0e\\x87\\x65\\xa8\\x72\\x35\\xf8\\x58\\x8b\\x05\\xc5\\x86\\xce\\\n\\x29\\xd5\\xf3\\xca\\x85\\xbf\\x22\\x75\\xbf\\xd6\\xd2\\x6c\\xcd\\x31\\x23\\x38\\\n\\x74\\x43\\xee\\xf5\\xc1\\x43\\xfa\\xcf\\x2f\\x73\\x69\\xef\\x90\\x63\\x6f\\x2a\\\n\\xf6\\x4d\\x57\\x6d\\xc0\\xae\\x65\\xa3\\x62\\x9b\\x8e\\xd7\\xfd\\x7c\\xb5\\x7b\\\n\\xc5\\x85\\x83\\x2e\\x6c\\xfb\\xf9\\xfc\\x95\\x1e\\x5d\\x54\\x2b\\x06\\x54\\x7d\\\n\\x30\\xa9\\x97\\xfe\\xd6\\xbc\\x4a\\x8d\\xb4\\x03\\xbe\\x3f\\xb5\\x3c\\x42\\x53\\\n\\x30\\x6e\\xdf\\xde\\x19\\x73\\xf5\\x1f\\x85\\xd5\\x89\\xd5\\xc4\\xb4\\xbf\\xdc\\\n\\x24\\x63\\xaf\\xf4\\x53\\xc7\\x6c\\x5c\\xfb\\x59\\x93\\x9d\\x6b\\xb7\\x44\\x68\\\n\\x3e\\x1a\\xf7\\xe9\\xe1\\x9e\\x7b\\x75\\xe1\\x75\\x0b\\xfc\\xda\\x78\\x85\\x6a\\\n\\xf0\\x8c\\xe6\\x83\\xff\\x69\\xdd\\x6f\\xdb\\xd2\\x6d\\x7f\\x3e\\x39\\x97\\x27\\\n\\x6e\\xed\\xd6\\x08\\xcd\\xaa\\x37\\xd9\\x4e\\x17\\x5e\\x96\\x36\\x67\\xb1\\x88\\\n\\x8f\\xb7\\x35\\xad\\x98\\x51\\x37\\xa7\\x79\\xb3\\xe6\\xbb\\x73\\xbe\\xfc\\xf6\\\n\\xd0\\xb5\\xb8\\xfc\\xf7\\x4b\\xe4\\x59\\xda\\x6f\\x40\\xe7\\xad\\xda\\xea\\xb1\\\n\\x25\\xf2\\x8e\\xeb\\x72\\x6c\\x4d\\xda\\x99\\x3d\\x47\\xce\\x0c\\x4a\\xa3\\x6b\\\n\\x76\\x4d\\x73\\x6a\\x9c\\xb1\\x82\\xe1\\x03\\xc3\\xf4\\x06\\xfb\\xaa\\xbe\\xde\\\n\\x7d\\xdd\\x4f\\x9d\\x7e\\xcc\\x86\\xab\\x13\\x8e\\xdf\\x0c\\xbc\\x91\\xf6\\x4e\\\n\\x8d\\x43\\x99\\x4b\\x66\\xe9\\x35\\x6d\\xcd\\x8c\\xb7\\x86\\xad\\xe9\\xd5\\xbb\\\n\\x63\\x72\\x15\\x7c\\x5c\\xe4\\xaf\\x1c\\xd1\\xc6\\x4a\\x8f\\xff\\x7d\\x5e\\x2c\\\n\\x2a\\x22\\xcf\\xb5\\x7a\\x85\\xa2\\xca\\xde\\x7f\\x7d\\x77\\x56\\xc7\\x29\\xc3\\\n\\x4c\\x6d\\xda\\x7e\\xf6\\xf8\\xfc\\x0f\\xed\\x6e\\x6e\\xfe\\xa1\\xe4\\xb9\\xcd\\\n\\x55\\xf6\\x3d\\xfa\\x6a\\x48\\x81\\xb8\\xfc\\xdd\\xce\\xf5\\xfd\\x29\\x48\\xb3\\\n\\xeb\\x92\\xfa\\xe5\\xbf\\xa5\\xce\\x7d\\x58\\xfa\\xe2\\xab\\x8b\\x13\\x87\\x99\\\n\\xb6\\x7f\\x5e\\xc1\\x54\\xa1\\xc3\\x96\\x31\\xf9\\xfb\\x7d\\x7c\\x2d\\x74\\x4c\\\n\\xc4\\xff\\x86\\xee\\x2c\\xb5\\xf9\\xf0\\xca\\xd5\\x61\\x19\\x5e\\x8d\\x6c\\x34\\\n\\xee\\x5c\\xf5\\x87\\xaa\\x6a\\xab\\x63\\xf4\\x7f\\x5d\\xd8\\xdb\\x2e\\x48\\xf7\\\n\\x43\\xf4\\x9b\\x03\\x75\\xdb\\xb5\\xf9\\xa4\\xf0\\xa8\\x19\\x3b\\xd6\\x65\\x1e\\\n\\xb6\\x61\\xd8\\x9e\\xf0\\xf0\\x7e\\xdf\\x5e\\x6c\\x62\\x1c\\x54\\x22\\xee\\x51\\\n\\xde\\x6e\\x7f\\xfd\\x30\\xef\\x9b\\x29\\xc1\\x8d\\xd3\\x76\\x3e\\x16\\xb9\\xae\\\n\\x52\\x8d\\x9d\\xe1\\x57\\xef\\xdc\\x28\\x7c\\x6e\\x63\\xff\\x8a\\x8f\\xb3\\x7d\\\n\\x95\\xa7\\xe1\\xfc\\x92\\xd9\\x4f\\xb4\\xdc\\xf7\\xdd\\xff\\xb6\\x35\\x1a\\x15\\\n\\xfb\\x79\\x1b\\xff\\xc7\\xaf\\x62\\xbe\\x1b\\x57\\xfb\\xc4\\x2d\\x63\\x85\\x66\\\n\\x69\\x9a\\x7d\\x71\\x5e\\x3b\\xfd\\x48\\xfe\\x82\\xeb\\xe2\\x34\\x27\\x32\\xc7\\\n\\x94\\xba\\xfb\\xf2\\xcb\\x51\\xe3\\x1f\\xf8\\x0d\\xdf\\x57\\x34\\xa6\\x75\\x93\\\n\\xc2\\x8f\\xbb\\xe7\\xf9\\xb5\\xf8\\xb3\\xf0\\x51\\xf7\\xbb\\x9f\\x18\\xbd\\xbb\\\n\\x5f\\xff\\x6f\\x74\\xbb\\x6f\\x66\\x5e\\x57\\x62\\xff\\x93\\xca\\x83\\xfd\\x4b\\\n\\xa4\\xcf\\x75\\xfc\\xed\\x8d\\xb6\\x23\\x26\\x3c\\x18\\xcf\\xcc\\x9f\\xfc\\x6a\\\n\\xeb\\xd0\\x4a\\x67\\xcb\\x76\\x1f\\x70\\xf2\\xed\\x8d\\x88\\xb6\\x6b\\x36\\x8d\\\n\\xf8\\x39\\x6c\\x71\\x54\\xa5\\x72\\xad\\xb5\\x0d\\xc6\\xa4\\x2b\\x91\\xbe\\xfc\\\n\\x8d\\xd8\\xa8\\xe7\\x1b\\x5a\\x5d\\xec\\xd8\\xf3\\x65\\x97\\xe5\\x85\\x8f\\x2e\\\n\\xc8\\x36\\x73\\xd9\\xa8\\x71\\x5d\\x86\\x9d\\x18\\xdd\\xec\\xbc\\xe9\\xdf\\xce\\\n\\xad\\x4b\\x17\\xaf\\x5c\\xef\\xc0\\xcc\\x5d\\xf3\\xd8\\xfe\\x30\\xcf\\xf3\\xd6\\\n\\xa5\\x37\\x9d\\x68\\x71\\xb0\\xed\\xba\\xdf\\xfe\\x1e\\x93\\x21\\x13\\xeb\\x6c\\\n\\xfb\\x83\\x2c\\xe1\\x9d\\xd8\\x66\\x94\\xb6\\x7b\\x9e\\xa7\\x54\\xb5\\x81\\x29\\\n\\x64\\x71\\x44\\x85\\x75\\x4d\\xb3\\x5c\\x3b\\xb2\\xe2\\x55\\xe0\\x85\\xa2\\xaa\\\n\\x93\\x93\\xfd\\x6f\\xb7\\xb9\\xac\\x31\\xd5\\x3a\\x15\\x39\\xa2\\xe5\\xba\\x4d\\\n\\xbb\\x8f\\xe7\\x18\\x3c\\x69\\x43\\x70\\xae\\x43\\x65\\x6f\\xaa\\xda\\x85\\x86\\\n\\x1d\\xd4\\xde\\xde\\x1f\\x5c\\x74\\xd8\\x96\\xc3\\xbb\\xbf\\x2d\\x7a\\xfd\\x70\\\n\\xeb\\x03\\xbb\\x7f\\xea\\x79\\xa4\\x6a\\xc4\\x77\\x61\\xaf\\x03\\x9e\\xbd\\xe9\\\n\\xbb\\x71\\xc1\\xcb\\x5d\\x7b\\xd2\\xff\\x97\\x6b\\x63\\xe9\\xba\\xbf\\x4d\\xfb\\\n\\xfd\\xcf\\xf0\\x35\\x8b\\x43\\xb4\\x0b\\xf6\\x07\\x2f\\xd9\\xd8\\xff\\xe9\\xa0\\\n\\xb3\\x71\\xef\\xef\\x8f\\x28\\xfe\\x47\\xbf\\x3c\\xdf\\xce\\xbc\\x93\\xff\\x45\\\n\\x8f\\x93\\x91\\xeb\\x8e\\xb7\\xb8\\x78\\xe5\\x8b\\x93\\x93\\xeb\\xad\\x7d\\x3c\\\n\\xbd\\xda\\x9f\\x4b\\x22\\x9a\\xb5\\xea\\x1d\\x38\\x3f\\xfc\\xd1\\x9e\\x9e\\x47\\\n\\x0a\\x3d\\x2b\\x78\\x3f\\x68\\xc7\\xa8\\xd8\\xd3\\xd7\\x56\\xbd\\xa1\\xcb\\x5b\\\n\\x36\\xed\\x1e\\xc0\\xe6\\xef\\x48\\xa9\\x9b\\x6d\\xdf\\x2c\\x8e\\x68\\xd6\\x76\\\n\\xdd\\xa6\\x57\\x7d\\x42\\x46\\x8e\\x18\\xb2\\xa4\\xdf\\x5c\\x3d\\x1b\\xf7\\x76\\\n\\x43\\xb4\\xfa\\xc2\\xe7\\x5b\\x67\\x8e\\x98\\xd0\\xeb\\xe4\\xe8\\x2b\\xbd\\xf2\\\n\\x3c\\x9d\\x7c\\x2a\\x6b\\xf0\\x84\\x75\\xe9\\xcb\\x31\\x19\\x4e\\x45\\xb6\\x3a\\\n\\x5f\\x2c\\x72\\xdc\\x2f\\xd5\\xf7\\xff\\x5a\\xb2\\xd0\\x82\\xb5\\x7d\\xf6\\xc5\\\n\\x87\\xd4\\xe8\\xca\\xfa\\x56\\x17\\xdf\\xd6\\x08\\x19\\xf9\\xcb\\x6f\\xd3\\xda\\\n\\x5d\\x0e\\xfd\\xae\\xfd\\xa0\\x2b\\xec\\xaf\\x45\\xf6\\xb6\\x8c\\x4f\\x4d\\xf9\\\n\\xd1\\xc3\\x86\\xdc\\x2c\\x98\\x3f\\x4b\\xc7\\xba\\x9b\\xce\\xf6\\xbb\\xd5\\x37\\\n\\xac\\xd6\\xa0\\x71\\x15\\x9f\\x16\\x8b\\xad\\xbd\\xb4\\x59\\x64\\x81\\xd1\\xdb\\\n\\xa7\\xb5\\x0b\\xdb\\x5e\\xf3\\x75\\x48\\xb9\\x79\\xbb\\xea\\xfe\\xfe\\xc1\\xc4\\\n\\xf3\\x19\\x87\\x7e\\x17\\x39\\x6a\\x52\\xad\\x3e\\xbd\\xe7\\x84\\xab\\x0a\\xbf\\\n\\x6d\\x7f\\x9f\\xde\\xfb\\x3a\\xdb\\x07\\x3b\\x6e\\x47\\x77\\xbf\\x4f\\x3f\\x9c\\\n\\xce\\x10\\xa8\\x89\\xd8\\xf9\\x5f\\xef\\x16\\xed\\x0f\\x2f\\xa3\\x67\\xaf\\x37\\\n\\x7e\\x47\\x7e\\xb7\\xbf\\x18\\xb0\\x28\\x47\\xf5\\x6a\\x41\\x54\\xa1\\xa1\\xff\\\n\\x67\\x65\\x56\\x2e\\xc8\\x52\\xbd\\xe1\\xd3\\x8f\\x7a\\xae\\x58\\x5a\\xe6\\xc8\\\n\\xf0\\x8c\\xad\\xe8\\xe5\\xdf\\x25\\xe6\\x8d\\xaa\\x76\\x73\\xd6\\xe5\\x36\\x87\\\n\\xe6\\x74\\x2f\\xff\\xf0\\xd7\\x73\\xaa\\x4c\\xe7\\xab\\xdc\\x38\\xad\\x3d\\x33\\\n\\x2f\\x4b\\x68\\xef\\xe0\\xb4\\x71\\x39\\x4c\\x6d\\x8d\\x35\\x6e\\xb4\\xe3\\xd9\\\n\\xce\\x0d\\x4c\\x9c\\xba\\x77\\x58\\x83\\x4f\\x47\\xdc\\x69\\x36\\x13\\xb2\\x9d\\\n\\x06\\x75\\x9a\\xd6\\xde\\x52\\xb3\\xeb\\xf7\\x9f\\x40\\xb6\\xc3\\x09\\x7b\\xe2\\\n\\xe5\\x2d\\xf1\\x48\\xaf\\x22\\x05\\x0a\\x14\\x28\\x48\\x81\\x80\\x44\\xb8\\x26\\\n\\x4b\\xcd\\x7c\\x90\\x1a\\xb3\\x94\\xdb\\x73\\x59\\x7f\\xe7\\x91\\x9d\\xa5\\x33\\\n\\x2c\\x31\\x3e\\x4c\\xcf\\x59\\xaa\\xed\\xa9\\x02\\x78\\xc7\\x11\\x42\\xc9\\x5f\\\n\\xbf\\x8e\\xd0\\x25\\x4f\\x15\\xc0\\x3b\\x8e\\x9f\\x29\\xf9\\xeb\\xd6\\x11\\x7a\\\n\\xeb\\xa9\\x02\\x78\\xc7\\x11\\x44\\xc9\\x5f\\xb7\\x8e\\xd0\\x0e\\x4f\\x15\\xc0\\\n\\x3b\\x0e\\x4c\\x5c\\x97\\x53\\xf2\\xd7\\xaf\\x2d\\xba\\xc2\\x52\\x1e\\x4f\\x15\\\n\\x80\\x02\\xf2\\x63\\x69\\x13\\x59\\x2f\\xff\\x85\\x1e\\x8e\\x1f\\x3c\\xfe\\x6b\\\n\\x2b\\x71\\xdf\\x62\\xe9\\x23\\x0f\\xc7\\xaf\\x80\\x9b\\x03\\xee\\x25\\xeb\\x6d\\\n\\x60\\xa2\\x87\\xe2\\xd5\\xb2\\xf4\\xd2\\x4a\\x9c\\x91\\x2c\\x95\\xf4\\x50\\xbc\\\n\\xc9\\x05\\xcc\\x65\\xd1\\xde\\x4b\\x25\\x77\\x42\\x24\\x00\\x25\\xb6\\x3f\\xc9\\\n\\x7a\\x1b\\xf8\\x4e\\xe6\\xf8\\xca\\xb1\\x14\\x65\\x25\\xae\\x67\\x2c\\x7d\\x21\\\n\\x73\\x7c\\xc9\\x0d\\xcc\\x61\\x31\\x97\\x15\\xf2\\x78\\x81\\xa5\\x91\\x2c\\x15\\\n\\x48\\xce\\x44\\x59\\x40\\xcd\\xd2\\x39\\x92\\xae\\x93\\x38\\x96\\xbe\\x96\\x29\\\n\\x1e\\x88\\xd1\\x1f\\x58\\x89\\xc7\\xc4\\x52\\x0d\\x99\\xe2\\xf1\\x25\\xfc\\x8f\\\n\\xa4\\xf3\\x1b\\xcb\\x52\\x38\\x4b\\x5d\\x59\\xca\\x92\\x5c\\x89\\x13\\xe1\\x03\\\n\\xe2\\x78\\x2e\\xa9\\xb4\\xc6\\xb0\\xd4\\xc6\\xcd\\xf0\\x3f\\x24\\x6e\\x5c\\xb7\\\n\\x16\\x7e\\x53\\x37\\xc3\\xf7\\x55\\xbc\\x21\\xfb\\xbc\\x6e\\x34\\x4b\\x6b\\x59\\\n\\x6a\\xc0\\x52\\xda\\xe4\\x49\\x66\\x3c\\x02\\xc9\\x7a\\x1d\\x81\\x57\\xab\\xe7\\\n\\x62\\xb8\\x18\\xff\\xac\\xb5\\x2d\\xf4\\x2f\\x9d\\xdd\\x49\\xb4\\x8f\\x63\\x27\\\n\\x39\\x37\\xef\\xb9\\xc7\\x12\\xd6\\x1e\\xcb\\x26\\x47\\x62\\x59\\x14\\x27\\xeb\\\n\\x7d\\x34\\x78\\xb6\\xca\\x4e\\x86\\x87\\xb1\\xe5\\xac\\x95\\xf0\\x40\\x03\\x64\\\n\\x49\\xb5\\xef\\x22\\x17\\x71\\x72\\x0c\\xb4\\x73\\x67\\xe7\\xc0\\xc9\\xc5\\x2b\\\n\\x94\\x27\\xeb\\x3c\\x1a\\xde\\x3b\\xca\\xc7\\x62\\x1f\\xc2\\x51\\x2b\\xe1\\x80\\\n\\x82\\x65\\x4d\\xb5\\x6f\\x43\\xc3\\xd2\\x68\\xe2\\x64\\xda\\xce\\xb6\\x83\\xe4\\\n\\xe0\\x15\\xc0\\x8b\\x45\\x5b\\x49\\x0f\\xfa\\x87\\x42\\x76\\xfc\\x63\\x6e\\xf9\\\n\\xbb\\x15\\xff\\xa0\\x99\\x1e\\x49\\x75\\xca\\x00\\xbe\\xaf\\x39\\x64\\xbd\\x9f\\\n\\xf5\\x15\\x5e\\xa1\\x09\\x71\\x32\\x78\\xa9\\x74\\x18\\x59\\xca\\x67\\xc5\\x1f\\\n\\x64\\x4b\\x1b\\xad\\xf8\\x03\\xad\\x24\\x4e\\x06\\xf9\\xae\\x03\\xf5\\x07\\xb9\\\n\\xc0\\x06\\x96\\x5e\\x91\\xf3\\x6d\\xc1\\x1b\\xbc\\x42\\x47\\xb2\\x3e\\x76\\x5d\\\n\\x24\\x6e\\x7c\\x13\\x03\\xf5\\xba\\xd4\\x46\\x9a\\xb7\\x10\\xd7\\x3e\\x14\\x24\\\n\\x06\\xfa\\x75\\x8c\\x87\\xd6\\xfa\\xdc\\xe4\\xe4\\x15\\xfa\\xdb\\x88\\xf7\\x24\\\n\\x71\\x3c\\x9e\\x80\\xa9\\x36\\xdc\\xee\\x27\\x6e\\x5c\\x50\\x90\\x18\\x5a\\x96\\\n\\x7e\\x25\\x6e\\x1e\\xec\\x4a\\xdd\\x7b\\x83\\x57\\x18\\x6b\\x23\\xce\\x03\\xc4\\\n\\xf1\\x7a\\xa3\\x6d\\xb8\\x39\\xc6\\xbb\\x51\\x60\\xc6\\xa7\\x2c\\x85\\x91\\xfb\\\n\\x75\\xee\\x2d\\x5e\\x61\\xba\\x8d\\xb8\\x6c\\xcd\\xf1\\x20\\x5b\\xcc\\x26\\x43\\\n\\xfc\\xa9\\x05\\xa8\\x8b\\xef\\xc9\\x3a\\x6f\\xe5\\x09\\x92\\x83\\x57\\x70\\x65\\\n\\xdd\\x58\\x59\\xc7\\x4d\\x8c\\x9c\\xc4\\xf5\\x97\\xde\\xaa\\x77\\x29\\x72\\x87\\\n\\x57\\xb0\\xb7\\x6e\\x2c\\x26\\x65\\x1d\\x37\\x31\\x30\\x5f\\xb2\\xb6\\x1e\\x20\\\n\\xa6\\xab\\x2c\\xcd\\x62\\xa9\\x15\\x4b\\xc5\\x88\\xe3\\xaf\\xf0\\xed\\x61\\xfc\\\n\\x44\\x9d\\xd5\\x62\\x69\\x0c\\x4b\\x07\\x89\\x1b\\xef\\x5d\\x6d\\x07\\xae\\xf2\\\n\\x0a\\xf6\\xd6\\x8d\\x41\\x98\\xdb\\x96\\x70\\x22\\xcc\\xd4\\x8e\\x00\\xb2\\x2e\\\n\\x03\\x17\\x68\\x17\\x4b\\x55\\xc9\\xb9\\xb9\\x31\\xd6\\x55\\x30\\x2e\\x8b\\xd7\\\n\\x18\\x5d\\x21\\x67\\x79\\x05\\x5b\\xeb\\xc6\\x4f\\x29\\xf5\\xad\\xe3\\xba\\x03\\\n\\x94\\x15\\xe6\\x49\\xd6\\xca\\x1e\\x7d\\x82\\xbb\\x6b\\x9f\\x79\\x59\\xda\\x6c\\\n\\x23\\x0e\\x67\\xc8\\x51\\x5e\\x41\\x6a\\xdd\\xf8\\x95\\x0c\\x79\\x49\\x6d\\x58\\\n\\x4c\\xd6\\xcb\\x7a\\x1d\\x4b\\x19\\x65\\x8c\\xab\\x37\\x59\\xd7\\xab\\xf2\\x04\\\n\\xaf\\x00\\x7e\\x06\\xed\\xee\\x11\\x71\\x73\\x80\\x5a\\x32\\xe6\\x25\\x35\\x00\\\n\\xfd\\xa9\\xb5\\xb2\\x9d\\x41\\x9e\\x91\\x83\\xd6\\x25\\xeb\\xfa\\x55\\x18\\x97\\\n\\x53\\xca\\x1a\\x44\\x4a\\x07\\xf8\\x24\\xf0\\x72\\x52\\xe5\\xb9\\x8c\\x3c\\x2b\\\n\\x03\\x6f\\x44\\xd2\\xf2\\x24\\xc8\\x72\\x2b\\x51\\xca\\x59\\x83\\x48\\xc9\\x18\\\n\\x48\\xd2\\xe5\\x77\\x9c\\xbc\\x23\\x07\\x1d\\x63\\x25\\xfe\\x03\\x22\\x37\\x29\\\n\\x61\\x0d\\x22\\x25\\x02\\xf3\\x64\\x23\\x25\\x2d\\x2f\\x8c\\xcd\\x45\\xbd\\x94\\\n\\x86\\x34\\xc4\\xb5\\x35\\xa9\\x7a\\xab\\x28\\xe1\\x1e\\xfd\\x3a\\x74\\xfd\\x0c\\\n\\x94\\xb2\\xf4\\x15\\x7c\\x11\\xf8\\xa6\\xa4\\xca\\x68\\x8a\\x97\\xd3\\x51\\xd1\\\n\\x4a\\x3a\\x56\\xd9\\xf1\\xa7\\x21\\xf7\\xf4\\x15\\xd0\\xc7\\x74\\xa7\\xc4\\x6b\\\n\\x43\\xef\\x12\\x30\\x3e\\x5a\\x96\\x0b\\xfa\\xd7\\x0f\\x92\\x21\\x2d\\x52\\x7a\\\n\\x18\\x90\\x17\\xa4\\x77\\xd0\\xbf\\xbb\\xbc\\xc2\\x7a\\x96\\x1a\\xb2\\x94\\x4e\\\n\\x96\\xdc\\xf8\\x3e\\xd0\\xf7\\x3f\\xa6\\xa4\\x65\\xb1\\x2e\\x99\\xd2\\xd3\\x4a\\\n\\x22\\x2d\\xa0\\x3a\\x4e\\x86\\xe3\\x2e\\xaf\\x70\\x9f\\x38\\xb9\\xe6\\xe7\\x6e\\\n\\xe5\\xc6\\xf7\\x01\\xfd\\x38\\xa9\\xfc\\x37\\x4f\\xa6\\xf4\\xf8\\x93\\xf4\\x7c\\\n\\x70\\xbc\\x1b\\x61\\xba\\xcb\\x2b\\x40\\x77\\x64\\x14\\x71\\xe3\\x4c\\x6a\\x43\\\n\\x10\\x25\\xcd\\x2f\\xca\\x28\\x7b\\x32\\xa6\\x69\\x9f\\x44\\x9a\\xb6\\xcb\\x14\\\n\\xb6\\xc2\\x2b\\x24\\x06\\xbe\\x2b\\xcb\\x7c\\x1a\\x93\\x33\\x41\\x2c\\xa6\\x51\\\n\\xd2\\x34\\x45\\x78\\x20\\x1e\\x85\\x57\\x90\\xd6\\x7f\\x33\\x24\\x67\\x82\\x58\\\n\\xf4\\xa1\\xa4\\x69\\x8a\\xf2\\x60\\x7c\\xef\\x32\\xaf\\x00\\x3e\\xcf\\x32\\x3f\\\n\\x5b\\x93\\x35\\x45\\x44\\x9d\\x48\\xba\\x9c\\xbd\\x81\\x77\\x8d\\x57\\x50\\xea\\\n\\xdf\\x3a\\xde\\x05\\x5e\\x61\\x09\\x29\\xfd\\xbf\\x23\\x48\\xad\\xbc\\xc2\\xbb\\\n\\xcc\\xff\\xb9\\x82\\xd4\\xc6\\x2b\\x04\\x51\\xd2\\x34\\xa6\\xe6\\xf9\\x9f\\x9c\\\n\\x48\\x0d\\xbc\\xc2\\xbb\\x20\\xff\\xf1\\x06\\x52\\x2a\\xaf\\x90\\x5a\\xe5\\xbf\\\n\\xc9\\x89\\x94\\xc6\\x2b\\x58\\x5b\\xff\\x09\\xf0\\x52\\xfc\\x62\\xb8\\xbb\\xfe\\\n\\xe3\\x4b\\x48\\x29\\xbc\\x82\\xaf\\xaf\\xff\\xae\\xf6\\x72\\x3a\\x3c\\x01\\x5f\\\n\\xe6\\x15\\xd0\\x4e\\x8d\\x12\\x71\\xc2\\xce\\x91\\xaf\\xea\\x7f\\xa4\\x64\\xf8\\\n\\x22\\xaf\\x90\\x12\\xf4\\xbf\\x52\\x23\\x7c\\x85\\x57\\x00\\xdf\\xed\\xab\\xfa\\\n\\x9f\\xef\\x02\\x7c\\x81\\x57\\x48\\x0e\\xfd\\x6f\\xf0\\xf5\\xd6\\xf4\\xbf\\x57\\\n\\x78\\x20\\xbe\\x94\\x80\\xe4\\xe4\\x15\\xa4\\xe4\\xc1\\x02\\x61\\x4e\\x98\\xc9\\\n\\xb5\\x2c\\x49\\xa2\\x27\\x59\\xdf\\xff\\x71\\x9d\\x14\\xdd\\x7d\\xc0\\xdb\\xbc\\\n\\x82\\x2f\\xec\\xff\\x42\\x7f\\xa0\\xe8\\x68\\x27\\x85\\x1c\\xbc\\x42\\x19\\x07\\\n\\xe2\\xf1\\xd4\\xfe\\x4f\\xb4\\x65\\xc8\\xf6\\x6d\\xed\\xff\\x84\\x9d\\x81\\xc6\\\n\\x4e\\x84\\xf9\\x2e\\xc2\\x1d\\x5e\\x01\\x73\\x3a\\x47\\xda\\x00\\xf6\\x7f\\x5f\\\n\\x76\\x20\\x3c\\xf0\\x8c\\xd8\\x53\\x01\\xb9\\x1d\\xec\\x31\\x66\\x25\\xae\\x4d\\\n\\x60\\x9f\\xa0\\x78\\xff\\xb7\\x81\\xec\\xef\\xff\\xc6\\x58\\xd0\\xc2\\xf9\\xe2\\\n\\x78\\xa7\\xe1\\x0a\\xaf\\xb0\\xd8\\xc1\\xb0\\x73\\x90\\xf7\\xec\\x3f\\x80\\x7f\\\n\\xad\\xea\\x42\\xfe\\x15\\x98\\xe1\\x28\\xaf\\x30\\xdf\\x89\\x30\\xbd\\x61\\xff\\\n\\x05\\xf6\\x19\\xf2\\xba\\x94\\x63\\x05\\xd6\\x60\\x8d\\x57\\x40\\x1f\\xfb\\x99\\\n\\x0b\\xe1\\x79\\xc2\\xfe\\x13\\x6c\\xae\\x40\\xd7\\x47\\xb1\\xaf\\xe8\\x39\\x08\\\n\\xbc\\x02\\xfa\\x7c\\xe8\\x7a\\x96\\x73\\x33\\x3c\\x2d\\x4b\\xbf\\x91\\x7b\\xf6\\\n\\xdf\\xb0\\xf7\\xae\\x2f\\xa5\\xcc\\x35\\x1d\\x05\\x1c\\x60\\x27\\xab\\x1f\\x71\\\n\\xb6\\x00\\x71\\x0e\\x8a\\xad\\xfa\\x06\\x8f\\xfa\\x07\\x71\\x6b\\xf8\\xca\\xbc\\\n\\x2e\\x75\\x02\\x7b\\x05\\xb1\\x4e\\x03\\x59\\xae\\x70\\x36\\x6a\\x35\\xe2\\x6c\\\n\\x2f\\x2b\\x36\\x54\\x15\\x28\\x50\\xa0\\x40\\x81\\x02\\x05\\x0a\\x14\\x28\\x50\\\n\\xa0\\x40\\x81\\x02\\x05\\x0a\\x14\\x28\\x50\\xa0\\x40\\x81\\x02\\x05\\x0a\\x14\\\n\\x28\\x50\\xa0\\x40\\x81\\x02\\x05\\x0a\\x14\\x28\\x50\\xa0\\x40\\x81\\x02\\x05\\\n\\x0a\\x14\\x28\\x50\\xa0\\x40\\x81\\x02\\x05\\x0a\\x14\\x28\\x50\\xa0\\x40\\x41\\\n\\x4a\\xc0\\x27\\xc4\\xd9\\xdb\\x83\\x3d\\xa5\\x33\\x2c\\x3d\\x24\\x6e\\x5f\\xf6\\\n\\x6b\\xfe\\xfe\\x0c\\xff\\xdb\\x00\\xde\\xad\\x82\\x94\\x0f\\xd8\\x55\\xea\\x4f\\\n\\x5c\\xdd\\x3a\\xbb\\x5f\\x1a\\x7e\\xfa\\xf2\\x61\\x28\\x48\\x59\\x80\\x6d\\x83\\\n\\x6e\\x2c\\xdd\\x25\\xf7\\xed\\x25\\xdc\\xe5\\xc3\\x52\\xec\\x25\\xa4\\x0c\\x60\\\n\\x8f\\xbc\\x27\\xec\\xe7\\x84\\xf3\\x61\\x2b\\xf0\\x5d\\x7c\\x41\\xdc\\x79\\xe3\\\n\\x9e\\xb2\\x99\\x83\\xb0\\xcb\\x7b\\x2d\\x37\\x0a\\x9c\\x01\\xec\\x23\\x5a\\xb3\\\n\\x69\\x2a\\x10\\x6c\\x75\\x61\\x5c\\x9f\\xc7\\xd2\\x37\\xc4\\xd9\\xc1\\xe9\\xc4\\\n\\xdf\\xcf\\xe3\\x7f\\xb3\\x67\\xcf\\xeb\\x05\\x4b\\xd5\\xbd\\x93\\x25\\x05\\x0e\\\n\\x02\\xb6\\x95\\x70\\x56\\x95\\xb5\\x3a\\x83\\xed\\xc3\\xc9\\x2c\\x15\\x74\\x20\\\n\\xac\\x8f\\x78\\xb7\\xb6\\xec\\x25\\x22\\x2e\\x47\\xec\\xf9\\x29\\xf0\\x3c\\xb2\\\n\\xb1\\x74\\x8d\\xac\\xd7\\xd5\\x46\\x72\\xed\\x4c\\xf5\\x0f\\x78\\xbf\\xd6\\xc2\\\n\\xbd\\xc6\\xc7\\xad\\x20\\x79\\xf1\\x33\\x49\\xd7\\x0f\\x6c\\x65\\x7d\\x23\\x43\\\n\\xf8\\xdf\\x90\\x75\\xbb\\x5b\\x3f\\xcb\\x10\\xbe\\x02\\xd7\\x51\\x9d\\xac\\x8f\\\n\\xf3\\x1d\\x64\\x8c\\xa7\\x03\\x49\\xf3\\x05\\x78\\xa7\\x95\\x31\\x1e\\x05\\xce\\\n\\xe1\\x28\\x49\\xd7\\xff\\x58\\x0f\\xc4\\x35\\xd6\\x4a\\x5c\\x87\\x3d\\x10\\x97\\\n\\x02\\xfb\\xc0\\x19\\x15\\xd6\\xea\\x23\\x8d\\x07\\xe2\\x43\\x98\\xd6\\xda\\xdb\\\n\\xbb\\x72\\x5e\\x86\\x2f\\x01\\xb6\\x35\\xa5\\xfa\\x63\\x57\\xec\\xac\\x3a\\x8a\\\n\\xcf\\x48\\x7a\\x1c\\x70\\xd4\\xb6\\xb3\\x02\\x79\\x80\\x6f\\x51\\xca\\xfe\\xe5\\\n\\xef\\x5e\\x88\\x7b\\x8f\\x44\\xbc\\xb0\\xf7\\xab\\xc8\\x87\\xbd\\x87\\xd2\\x24\\\n\\xdd\\x0f\\xb7\\xf5\\x42\\xdc\\xed\\xac\\xc4\\x5d\\xda\\x0b\\x71\\x2b\\xe0\\xd0\\\n\\x95\\x92\\x96\\x3f\\xce\\x39\\xf0\\xc6\\xf9\\xc9\\xd9\\x49\\xfa\\x4c\\x85\\x20\\\n\\x2f\\xc4\\xad\\x80\\xc3\\x0f\\x94\\xb4\\xfc\\xaf\\x78\\x31\\xfe\\x7f\\x25\\xe2\\\n\\x9f\\xe8\\xc5\\xf8\\xdf\\x75\\xe0\\x6c\\x3c\\xcb\\xf2\\xdf\\xe3\\xc5\\xf8\\xf7\\\n\\x4a\\xc4\\xbf\\xd4\\x8b\\xf1\\xbf\\xeb\\x90\\x3a\\x3b\\x79\\xab\\x17\\xe3\\xdf\\\n\\x2a\\x11\\xff\\x1a\\x2f\\xc6\\xff\\xae\\x63\\x25\\x25\\x2d\\xff\\xed\\x5e\\x8c\\\n\\x7f\\x87\\x44\\xfc\\x2b\\xbd\\x18\\xff\\xbb\\x0e\\x9c\\x8b\\x69\\x59\\xfe\\xa7\\\n\\xbd\\x18\\xff\\x69\\x89\\xf8\\xa7\\x7b\\x31\\xfe\\x77\\x1d\\x52\\xe7\\x26\\x63\\\n\\xed\\xdf\\x1b\\x67\\x26\\x23\\x8e\\x68\\x89\\xf8\\x07\\x78\\x21\\x6e\\x05\\x1c\\\n\\xa0\\xeb\\x21\\x35\\x07\\xf7\\xc6\\x59\\x66\\x55\\xad\\xc4\\xed\\xee\\xf9\\x9c\\\n\\x0a\\x1c\\xc7\\xfb\\x24\\x7d\\x86\\xad\\x33\\x67\\xac\\xb9\\x8a\\x05\\x12\\xf1\\\n\\xbe\\xe6\\xd3\\xa4\\xc0\\x7b\\x90\\x92\\xc3\\x42\\x67\\x27\\xa7\\x07\\xe3\\xcc\\\n\\x49\\xd2\\x7a\\x41\\xbb\\x3d\\x18\\xa7\\x02\\x69\\x40\\x6f\\x4f\\xaa\\x1f\\x9e\\\n\\xed\\xc1\\x38\\xe7\\x58\\x89\\x53\\x4e\\x5d\\x03\\x05\\x8e\\x01\\xfb\\x32\\xa4\\\n\\xf4\\xfb\\xa1\\xab\\x53\\xcd\\x03\\xf1\\x55\\x23\\x69\\x3d\\x20\\xa4\\xc1\\x1b\\\n\\x7c\\xa7\\x82\\xa4\\x90\\x9a\\x07\\x80\\xfe\\x23\\x4e\\x8f\\x53\\x2e\\x7c\\xc4\\\n\\x87\\x29\\x15\\xd7\\x40\\x19\\xe3\\x51\\xe0\\x1c\\xd2\\xb1\\x74\\x9e\\xa4\\xeb\\\n\\xe5\\x3a\\x4b\\x85\\x65\\x88\\xa3\\x30\\x1f\\x96\\x54\\x1c\\xff\\x10\\x77\\xd6\\\n\\xa7\\x82\\xe4\\xc3\\xe7\\x24\\x3d\\x17\\x00\\x3d\\x26\\xee\\x8c\\x74\\x57\\xd1\\\n\\x8a\\x0f\\x43\\x2a\\xec\\xd7\\x7c\\xdc\\x0a\\x92\\x1f\\xd8\\xe3\\x29\\x55\\x47\\\n\\x02\\xed\\x24\\xe7\\xce\\x40\\x2d\\xc7\\xfb\\xb1\\x15\\x66\\x7f\\x99\\xd2\\xae\\\n\\x40\\x1e\\x4c\\x21\\xdb\\xf5\\x05\\x3a\\xc9\\xd2\\x18\\xe2\\x78\\x39\\xec\\xe5\\\n\\x7b\\x8f\\xa7\\x3c\\xfc\\xbb\\x31\\xbc\\x1b\\x7b\\xe1\\x4c\\xf2\\x52\\x9e\\x14\\\n\\x38\\x07\\x3d\\xd9\\xaf\\x3b\\x77\\x49\\xef\\xa5\\xbc\\x28\\x70\\x0d\\x1d\\xc9\\\n\\xf6\\xde\\x2d\\x57\\xe9\\x19\\x4b\\xed\\xbd\\x98\\x0f\\x05\\xae\\x03\\xe7\\x5f\\\n\\x43\\x26\\x27\\x57\\xdd\\xef\\x22\\xc7\\xf6\\x0e\\x2a\\xf0\\x2d\\xd4\\x23\\xf7\\\n\\x6c\\x01\\x60\\xcf\\x7f\\x5d\\xaf\\xa7\\x5a\\x81\\xdc\\xc0\\x1c\\x5e\\x4f\\xdc\\\n\\xde\\x10\\x6b\\x73\\x45\\x61\\x4e\\x07\\x37\\x3a\\x92\\x47\\x76\\xa0\\xc0\\xf7\\\n\\xe0\\x47\\x5c\\xdd\\x56\\x67\\xa9\\x19\\x4f\\xd5\\xf9\\x77\\x7e\\xc9\\x96\\x2a\\\n\\x05\\x0a\\x14\\xa4\\x7a\\x30\\x8e\\xc0\\x00\\x97\\x1a\\xf3\\xb3\\x1e\\xcf\\x6a\\\n\\xf9\\x9e\\x0d\\x1a\\x8e\\x04\\x18\\xd9\\xdf\\xf4\\xda\\xf8\\x5b\\x13\\xfe\\x8b\\\n\\xf2\\x67\\x18\\xd2\\xc5\\x3f\\x47\\xc1\\x99\\xc9\\x8f\\x89\\xe3\\x53\\x1e\\xe5\\\n\\xc7\\xfe\\x17\\xa3\\xc2\\x1f\\xf7\\x0c\\x77\\xec\\x8f\\x26\\x3f\\xe1\\x19\\x1e\\\n\\x48\\x87\\x20\\xb8\\x67\\xfc\\xa0\\xd7\\x1a\\xf9\\xe8\\x63\\x08\\x1e\\x0c\\x9a\\\n\\x84\\xe8\\xf5\\x48\\x98\\x51\\xad\\x17\\x9e\\x8d\\xf0\\x10\\xe5\\x4f\\x5a\\x46\\\n\\xe4\\xc1\\xe4\\xc7\\x27\\x87\\x4d\\x0b\\x72\\x12\\x63\\x2e\\x48\\x23\\x91\\x8a\\\n\\x4d\\x80\\x4a\\x9c\\x57\\x5d\\x1c\\xf9\\x09\\xcf\\x5c\\xd6\\x89\\x4f\\x0e\\x83\\\n\\xcd\\x7b\\xac\\x63\\xbd\\x50\\x1a\\x31\\xa4\\x8d\\x22\\xd2\\x26\\x24\\xc7\\xa4\\\n\\x42\\xe0\\x6a\\xa3\\x10\\x3d\\xf2\\xc5\\x7a\\x88\\x12\\xa2\\x47\\xbe\\xd8\\x28\\\n\\x84\\x9f\\xe3\\x8b\\x8e\\xad\\x2e\\xff\\x84\\x67\\x36\\x20\\x63\\x19\\x73\\x72\\\n\\x0c\\xac\\x4b\\xe3\\x87\\x66\\x0f\\x06\\x1d\\xca\\xd4\\x90\\xe0\\x01\\xcf\\x26\\\n\\xb5\\x29\\x21\\x3f\\x7a\\xc4\\xa9\\x8e\\x4b\\xf0\\xc0\\x3d\\x33\\x09\\x1e\\xf0\\\n\\x1c\\xa3\\x66\\x12\\x3c\\x84\\x70\\xcf\\x8c\\xd0\\x5e\\x84\\x67\\xc1\\x83\\xf0\\\n\\x2c\\x78\\x10\\x9e\\x05\\x0f\\x09\\xcf\\x46\\xae\\xc8\\x12\\x9e\\x79\\x0f\\x7a\\\n\\xe1\\x99\\xf7\\xc0\\xa7\\x27\\xc1\\x83\\xf9\\x99\\xaf\\x59\\x9d\\xf0\\xcc\\x79\\\n\\xe0\\xf2\\xcb\\x24\\x78\\x88\\x2f\\x0f\\x0d\\x93\\xe0\\x21\\xbe\\xbc\\x84\\xbc\\\n\\xb2\\x15\\x15\\x5f\\x9e\\xfc\\x33\\x3c\\xc4\\x97\\x37\\x5f\\xf8\\xf0\\x10\\x5f\\\n\\x1f\\x3a\\x26\\xc1\\x43\\x7c\\x7d\\x09\\x85\\xcd\\x36\\x36\\xd4\\x67\\x42\\xe1\\\n\\xc7\\x90\\x0a\\xf5\\x9d\\xd0\\x16\\x18\\xbd\\x0a\\xed\\x21\\xa1\\xb2\\x18\\xd6\\\n\\xa9\\x5e\\xfc\\x65\\xc4\\xa9\\xd0\\x9e\\x34\\x09\\xcf\\xcc\\x78\\x94\\x83\\x8e\\\n\\x11\\x41\\xd4\\xb4\\xf8\\x54\\x6a\\x18\\x05\\x29\\x11\\x31\\xe6\\xaf\\x38\\x1e\\\n\\x46\\x51\\xc3\\x00\\xf4\\xe6\\xaf\\x38\\x1e\\x16\\xbd\\x37\\x5a\\x96\\x2e\\x51\\\n\\x70\\x94\\x28\\x40\\x13\\x3b\\xa1\\xd0\\x88\\x9e\\xd9\\x9e\\xd3\\xa0\\x16\\x3f\\\n\\xab\\xf1\\x27\\x8a\\x5e\\xc3\\x98\\xc4\\x09\\x60\\xbf\\x8a\\x18\\xf1\\x33\\xfb\\\n\\x55\\xc4\\x88\\x9b\\x1e\\xfb\\x65\\xc5\\x89\\x9f\\xf1\\x25\\xaa\\x9c\\x78\\x0e\\\n\\xe1\\x49\\xae\\x67\\x67\\xe3\\xb7\\x4c\\x7f\\x92\\x67\\x8b\\xfc\\x26\\x29\\x1f\\\n\\x35\\x13\\x25\\x7e\\x66\\x1f\\x8c\\xe2\\xf2\\x64\\x7b\\x86\\x84\\x41\\x05\\xb0\\\n\\xac\\x1f\\xcb\\xfa\\xb3\\xac\\xdf\\x24\\xf5\\x6f\\xd9\\x3e\\x4c\\x89\\xaa\\x17\\\n\\x01\\x30\\xf6\\x01\\xc3\\xb2\\x5d\\x59\\xc2\\x10\\xaf\\xa2\\xc0\\x78\\x9e\\x40\\\n\\x3f\\xcf\\x13\\x9c\\x86\\x82\\x14\\x0e\\xcc\\x45\\xd3\\x7b\\x99\\x3c\\x61\\x37\\\n\\x23\\x25\\x02\\x32\\x81\\xdb\\xc4\\xad\\x23\\x78\\x93\\x10\\x67\\x73\\x2f\\xe4\\\n\\xcf\\x97\\x01\\x7d\\x9a\\x9b\\xe4\\xf9\\x75\\x3c\\x6b\\x74\\xdf\\xf3\\x59\\xf4\\\n\\x69\\xa0\\xfc\\x6f\\x11\\x57\\x16\\x71\\x64\\xb6\\x77\\x22\\xf7\\xbd\\xb5\\xdf\\\n\\xee\\x79\\x3e\\x8b\\x3e\\x8f\\xaf\\x58\\x7a\\x4b\\xde\\x2f\\x7f\\xc4\\xd9\\xce\\\n\\x0b\\xf9\\x4b\\x09\\xe8\\x45\\x49\\xed\\x3c\\x40\\x07\\xb4\\xa8\\x0c\\x61\\x17\\\n\\xa7\\xa4\\x76\\x8a\\x11\\x57\\x5f\\x19\\xc2\\xf6\\x14\\xc0\\x1b\\x78\\x5b\\x3e\\\n\\x3e\\x82\\x92\\xb6\\x53\\x23\\x4b\\x05\\xdc\\x08\\xb3\\x20\\x1f\\x86\\x65\\xb8\\\n\\x23\\xdd\\x08\\xd3\\xd3\\x00\\x4f\\x00\\xde\\xe0\\x0e\\x71\\x76\\x8a\\x2b\\x78\\\n\\x29\\x5e\\xd8\\x34\\x82\\xae\\x93\\x65\\x9f\\x01\\x9d\\xdb\\xdc\\x2e\\x84\\x07\\\n\\x9b\\xaa\\x97\\x28\\x69\\xff\\x33\\x45\\x8e\\xc4\\x7a\\x10\\xe0\\x09\\x2c\\xf9\\\n\\x84\\xff\\x11\\x67\\x13\\xb0\\x90\\x87\\xe3\\x46\\x1d\\x48\\xed\\x39\\x3b\\xc5\\\n\\x52\\x56\\x27\\xc2\\x81\\xad\\x5a\\xcb\\x7d\\xcb\\x28\\xfb\\x85\\xe4\\xfb\\xb6\\\n\\xab\\xd0\\x57\\xda\\x1a\\xb3\\x0e\\xb1\\xd4\\x93\\xa5\\x1c\\x1e\\x8a\\x1f\\xfd\\\n\\xde\\x5a\\x89\\xf8\\x0d\\xe4\\xd8\\xbe\\xbf\\x4c\\xc4\\xa5\\xd1\\x72\\xfc\\x5d\\\n\\x4b\\x29\\x63\\xcd\\x11\\xfd\\x0f\\x6c\\x9c\\xd9\\xe3\\x9d\\x61\\x1b\\xfd\\x17\\\n\\x96\\x9a\\x92\\xfc\\x7b\\x62\\x10\\xde\\x76\\x89\\x38\\x7f\\x23\\x6e\\x1f\\x80\\\n\\x35\\xe0\\xb7\\x5d\\x12\\xfe\\xf0\\xce\\x5f\\xe6\\x34\\x7a\\x12\\xc8\\x3f\\xea\\\n\\x61\\x0b\\x71\\x7b\\xdd\\xc5\\x6d\\x51\\x8a\\xaf\\x83\\x7d\\x3c\\x61\\xac\\x90\\\n\\xab\\x8d\\x65\\x24\\xae\\xcd\\x5b\\x7e\\x8b\\xb0\\x7d\\x22\\xb5\\x0f\\x02\\xef\\\n\\x36\\x48\\xb8\\x3f\\x48\\x29\\x7b\\xbf\\x2c\\xf6\\x81\\xf6\\x66\\xe9\\x08\\x71\\\n\\xfd\\x8f\\x2d\\xbe\\x1a\\x74\\x91\\xa5\\x71\\x2c\\x7d\\x2c\\x43\\xdc\\x6a\\xe2\\\n\\xfa\\x7e\\xcb\\x78\\xb0\\xf7\\x59\\xdc\\x8f\\x83\\x5f\\x5b\\x44\\x49\\xfb\\x4b\\\n\\xf8\\x4d\\x4d\\x76\\xcb\\xa1\\xb7\\x01\\xdb\\x1b\\x6f\\xc8\\xfe\\x9c\\x47\\x18\\\n\\x2b\\xc0\\xdb\\x3b\\x33\\x76\\x5a\\x22\\x80\\xb8\\x3a\\xb5\\xac\\x67\\xb1\\x0d\\\n\\xb0\\x1f\\x25\\xe2\\x07\\xcf\\xe0\\x0a\\xdf\\xe4\\xab\\x28\\x42\\x9c\\xdd\\x2b\\\n\\xf4\\xfb\\xce\\xca\\x59\\x5e\\x11\\x37\\x56\\x40\\xd6\\x96\\xde\\x85\\xb8\\x3f\\\n\\xa4\\xa4\\xfb\\xb2\\x50\\xc6\\xc3\\x58\\x1a\\x2d\\x11\\x1f\\xdc\\x6a\\x5c\\x88\\\n\\xc7\\x17\\x81\\x7e\\x18\\xed\\xcb\\x44\\x8e\\xcb\\x55\\x6c\\xdd\\x83\\xbf\\xc2\\\n\\x58\\x51\\x91\\x9c\\x93\\x01\\x63\\x2e\\xfc\\x9f\\x45\\x78\\x58\\x68\\x89\\xb5\\\n\\x88\\x07\\xe1\\x17\\x73\\x31\\xaf\\xbe\\x06\\xf4\\xe1\\x7f\\x93\\xfd\\xf1\\xd7\\\n\\xd5\\xfb\\x08\\xe2\\xc6\\x0a\\x47\\xf5\\x8d\\xb1\\xaf\\xe9\\x89\\x8d\\xf0\\x9e\\\n\\x90\\x73\\x7b\\x9f\\x7c\\x19\\xb0\\xb1\\x2a\\x35\\x17\\x03\\xc1\\x26\\x23\\xe6\\\n\\xaa\\xd0\\xd7\\xcd\\x4b\\xe6\\xbd\\x3d\\xf9\\xf8\\x77\\xf8\\xed\\x2a\\x99\\xcb\\\n\\xc7\\x1e\\xa1\\x0d\\x3b\\x3a\\xaf\\x80\\x4d\\x98\\x67\\x12\\x61\\x40\\xa6\\x5f\\\n\\xcd\\xdd\\x4c\\xfb\\x08\\xd0\\xee\\x05\\x99\\x95\\xb8\\x9d\\x5d\\x23\\x6e\\x5f\\\n\\x84\\x23\\xfb\\x60\\xc1\\x8b\\xb7\\x23\\xf3\\x79\\x2d\\xb6\\xbe\\x05\\xf1\\x3b\\\n\\x8c\\x2f\\x38\\x8b\\x05\\xf3\\x0a\\x6b\\x63\\x45\\x03\\xe2\\xf4\\x77\\x05\\xbf\\\n\\x18\\x5f\\x1a\\x39\\x97\\x45\\x9f\\x05\\x78\\x65\\xcb\\x3e\\x07\\x84\\xf3\\x47\\\n\\xb2\\xb8\\x10\\x1e\\xfc\\x08\\xf3\\x59\\x47\\xca\\xdf\\x72\\xac\\x98\\x4b\\xd2\\\n\\x32\\xa8\\x16\\xc4\\xc9\\xd6\\xb0\\x7e\\xd3\\xd2\\x85\\x74\\xf9\\x2a\\xa6\\x52\\\n\\x52\\x3e\\x63\\xaa\\x9b\\x61\\xaa\\xf8\\x30\\x2c\\xfb\\x23\\xc8\\xc7\\xc4\\xf3\\\n\\x0a\\x5b\\xe4\\x2d\\x19\\x54\\x72\\x02\\xfc\\xbd\\xf0\\x5d\\x0b\\x65\\x85\\x76\\\n\\x2f\\xc7\\x5a\\x35\\xc2\\x08\\xa5\\xc4\\xed\\x1b\\xfd\\x46\\x11\\x3e\\x5e\\x1d\\\n\\x25\\x96\\x57\\x5a\\xfb\\x2e\\xbc\\x21\\x83\\x4a\\x2e\\x80\\xbf\\x17\\xe7\\x19\\\n\\x7c\\xb4\\x2b\\x7d\\x8e\\x35\\x64\\x26\\xb3\\x3c\\x5e\\x28\\x53\\xb1\\x2d\\x5d\\\n\\xc8\\x2e\\x70\\xbe\\x06\\x64\\xa0\\x0f\\xc9\\xfe\\xb8\\x21\\x96\\x41\\xd9\\x92\\\n\\x0b\\xa5\\x04\\x60\\x9e\\x6e\\xc9\\x57\\x78\\xc2\\xc6\\x7d\\x7b\\x8b\\x38\\x9e\\\n\\x91\\xb4\\x8c\\xc0\\x52\\x06\\x65\\xaf\\x7f\\x82\\x0c\\x0a\\x72\\x09\\xcc\\x2b\\\n\\x52\\x82\\x9c\\xd3\\x12\\x28\\x17\\x71\\xdb\\x42\\xdb\\xf7\\x44\\x3e\\xd0\\x4e\\\n\\xc5\\xbc\\x69\\x1c\\xd9\\xdf\\x6b\\x6a\\x4b\\x06\\x25\\x75\\x8f\\x79\\x45\\x30\\\n\\xc9\\x23\\x83\\xf2\\x16\\xd0\\x0f\\x88\\xf3\\xf0\\x83\\x07\\xe3\\x12\\xd6\\xb9\\\n\\x84\\xb8\\x96\\x38\\xe1\\x17\\x63\\x05\\xca\\xf6\\x0a\\x59\\x2f\\x7f\\xe1\\x1e\\\n\\x75\\x85\\x3d\\x66\\xa8\\x3b\\x5f\\x97\\xc3\\x41\\x56\\x28\\xfe\\x9e\\xeb\\x78\\\n\\x30\\xae\\xba\\x16\\x71\\x9d\\x74\\x31\\x1c\\x8c\\x15\\xe8\\x73\\x1c\\x59\\xaf\\\n\\xc0\\x58\\xbf\\x89\\xb8\\x3e\\xcd\\x15\\x19\\x94\\x27\\x81\\xf9\\x94\\xa5\\x6c\\\n\\x25\\x9f\\x07\\xe3\\xc3\\x9a\\xba\\x60\\xdf\\x0c\\x71\\x45\\xba\\x19\\x1e\\xec\\\n\\xb3\\xa1\\x5c\\x37\\x53\\xd2\\xf5\\x0a\\x6b\\xf3\\x0a\\xd4\\x1b\\xea\\xcf\\x17\\\n\\xf4\\x10\\x91\\x7e\\x8c\\x83\\x42\\x3a\\x21\\x6b\\xcb\\xe4\\xc1\\xf8\\x20\\xd7\\\n\\x17\\xec\\x0a\\x23\\xce\\x58\\x19\\xc3\\xc6\\x58\\xd1\\x87\\xb8\\xb1\\xc2\\x11\\\n\\x39\\x15\\x78\\x5e\\xf4\\x67\\x72\\xda\\x50\\x73\\x16\\x42\\xf9\\x0b\\xdf\\xaa\\\n\\x37\\xcb\\x5f\\x90\\xff\\x78\\x02\\x98\\xab\\xa1\\x6c\\x85\\x79\\x85\\x3d\\x19\\\n\\x14\\xc6\\x0a\\xac\\x57\\x78\\xd2\\xae\\xa9\\x14\\x52\\x7a\\xff\\x63\\x0f\\xe8\\\n\\x63\\x2a\\x13\\x37\\xaf\\x10\\x64\\x8a\\xb6\\xbe\\x0b\\xf4\\x61\\x18\\x2b\\xb0\\\n\\x5e\\x91\\xc1\\xc3\\x69\\x13\\x90\\x12\\xc7\\x5f\\x57\\x80\\xb1\\x17\\xb2\\x23\\\n\\x8c\\x15\\x26\\xb2\\xfd\\x4d\\x80\\x50\\x5f\\xc2\\x7a\\x85\\x27\\xe1\\x4d\\xfe\\\n\\x73\\xb2\\x45\\x5c\\xce\\xf0\\x9f\\x72\\x02\\x3c\\xa9\\x30\\x56\\x38\\x32\\xaf\\\n\\xb8\\x4c\\xf2\\xad\\x6d\\x5b\\xc2\\x97\\xe7\\x5f\\xde\\x80\\xa5\\x0c\\xca\\x91\\\n\\x79\\x85\\x9c\\x63\\x85\\xaf\\xc9\\x1f\\x92\\x0b\\x52\\x32\\x28\\x5b\\x04\\x19\\\n\\x14\\xfa\\x32\\x8c\\x15\\xee\\xea\\x41\\x09\\x67\\x5d\\x09\\x75\\x8d\\xb5\\x13\\\n\\x4f\\xcb\\xdf\\x92\\xab\\xef\\x71\\x04\\xb6\\xf4\\xa0\\xa4\\xee\\xdd\\x95\\x41\\\n\\x41\\x16\\xec\\x6d\\xf9\\x73\\x4a\\xb1\\x3d\\x63\\x29\\x83\\xb2\\x55\\x17\\xee\\\n\\xc8\\xa0\\xbc\\xb9\\xfe\\xf2\\xa3\\x9b\\xe1\\x26\\x17\\xc4\\x32\\x28\\x7b\\xfd\\\n\\x93\\xb3\\x32\\x28\\x6b\\xeb\\x8f\\x68\\xbb\\xae\\xae\\x3f\\xae\\xa1\\xa4\\xed\\\n\\xe4\\x2c\\xf9\\x9e\\x1c\\xc6\\x15\\x88\\x65\\x50\\xf6\\xe6\\xda\\x8e\\xca\\xa0\\\n\\x6c\\xad\\xbf\\xe3\\xfc\\x01\\x77\\xd7\\xdf\\xef\\x52\\xca\\x92\\x0d\\x3b\\x02\\\n\\x29\\x19\\x94\\xad\\xba\\xc0\\x7c\\xb7\\x99\\x8d\\xf0\\xa0\\x7f\\x62\\x4d\\xae\\\n\\x08\\xfe\\x51\\x4a\\xff\\x24\\x2f\\xd9\\xd7\\x3f\\x41\\xbd\\x7a\\xf2\\xdc\\x72\\\n\\x5f\\x80\\xa5\\x0c\\xca\\x5a\\xdf\\x04\\xdd\\x01\\x5b\\x6d\\x59\\x6e\\xfd\\x2b\\\n\\x84\\x95\\x9c\\x72\\xae\\xe4\\x80\\xa5\\x0c\\x4a\\x5c\\x26\\x37\\xc8\\x7e\\x5f\\\n\\x02\\xfd\\x43\\xec\\xd9\\x71\\x47\\xff\\x10\\xfd\\x1e\\xc6\\xda\\x94\\xac\\x07\\\n\\xee\\x2e\\xc4\\x32\\xa8\\xdb\\x3c\\xb5\\x70\\xc2\\x3f\\xc6\\x7c\\x67\\xf5\\x6f\\\n\\xd1\\x0f\\x2e\\x27\\x8e\\xaf\\x55\\x60\\x06\\xda\\xbc\\xab\\xfa\\x02\\xe0\\x67\\\n\\x30\\x87\\x45\\x5d\\x40\\x6e\\x86\\x39\\xc7\\x33\\x9e\\x1e\\xf0\\xef\\xf0\\x1b\\\n\\xc6\\xde\\xcc\\x6e\\xa7\\x54\\x81\\x23\\xf0\\xa7\\x94\\xb5\\xbf\\x47\\x81\\x02\\\n\\x05\\x0a\\x14\\x28\\x50\\xa0\\x40\\x81\\x02\\x05\\x0a\\x14\\x28\\x50\\xa0\\x40\\\n\\x81\\x02\\x05\\x0a\\x14\\x28\\x50\\xa0\\x40\\x81\\x02\\x05\\x0a\\x14\\xbc\\x3b\\\n\\x80\\x8e\\x42\\x35\\xe2\\xf4\\x66\\x60\\x6f\\x02\\xfa\\x6a\\x26\\x9e\\xfe\\xe3\\\n\\xdf\\x4d\\xe1\\xdd\\x38\\xa2\\x0f\\xa8\\xc0\\x31\\xa0\\x2c\\xbb\\x13\\x67\\x6f\\\n\\xc5\\x51\\x1d\\xa7\\x08\\xde\\x8f\\x52\\x0f\\xee\\x01\\x47\\xe6\\x1c\\x27\\xe7\\\n\\xf5\\xfa\\x04\\x3a\\xc6\\x87\\xa1\\xc0\\x79\\x34\\x24\\x69\\xbb\\x66\\xe2\\xfd\\\n\\xa9\\xd1\\x3c\\x59\\xda\\xca\\xb7\\xdc\\xcf\\xd3\\xc0\\xcb\\x69\\x4f\\xe9\\x80\\\n\\xed\\x32\\xe8\\x48\\x5a\\xb6\\x6d\\xe8\\xef\\x41\\xef\\xbe\\x15\\x71\\x36\\x02\\\n\\xb3\\xf0\\x54\\x90\\x7f\\x17\\x4a\\xd2\\xfb\\x62\\x10\\x56\\x43\\xaf\\xe6\\x20\\\n\\xe5\\x02\\xb6\\x2a\\xa3\\x28\\x69\\x19\\xc2\\x06\\x9d\\xc6\\x01\\xff\\x1a\\xde\\\n\\xad\\x65\\xdd\\x45\\x51\\xea\\xb1\\x83\\xe9\\x29\\x60\\x8f\\x16\\xf4\\x25\\x2d\\\n\\xf7\\xab\\x0c\\x74\\x21\\xac\\x81\\x94\\xd4\\x8e\\xda\\x49\\x4a\\x99\\xb6\\x88\\\n\\xbc\\x85\\xaf\\x29\\xe9\\x18\\x3a\\xc0\\x8d\\xf0\\x06\\x50\\xd2\\xef\\xa8\\x87\\\n\\x9b\\x69\\x4c\\xad\\x40\\xbb\\x04\\xdf\\x28\\x2e\\x2b\\xd8\\x4f\\x77\\xe7\\x7c\\\n\\x06\\xf8\\xb5\\xec\\x8b\\x22\\x48\\xf9\\x06\\xa4\\xa0\\xa5\\xc4\\x7b\\x53\\x30\\\n\\x66\\xe6\\x97\\x21\\xdc\\xfc\\x64\\x1e\\xcb\\x85\\x7a\\xd0\\xca\\x10\\x6e\\x6a\\\n\\x83\\x78\\x3f\\xa6\\xb0\\xbf\\x50\\x2e\\x58\\xee\\x37\\x4c\\xa9\\xfb\\x3c\\x3d\\\n\\x09\\xc8\\x0f\\xc4\\xe5\\xdf\\x5a\\xc6\\xb0\\x5b\\x53\\xe2\\xf2\\x3f\\x24\\x63\\\n\\xd8\\xa9\\x01\\xd8\\x0b\\x84\\xfd\\x3f\\x62\\x5e\\xc5\\x11\\x5e\\xd3\\x51\\x04\\\n\\x5a\\x84\\x7d\\x8b\\x7c\\xc3\\xce\\x96\\xaf\\x00\\x7b\\x6f\\xc5\\x3c\\xbf\\xdc\\\n\\xf6\\xa6\\xb0\\xef\\x47\\x6c\\x9f\\x3a\\x8a\\x52\\xc7\\x5e\\x67\\xb9\\xe0\\xe9\\\n\\xf2\\xcf\\x44\\x89\\xf7\\x2b\\x2a\\xe5\\x9f\\x18\\x52\\xfd\\x4f\\xa0\\x8c\\xe1\\\n\\x07\\x92\\xd2\\xff\\xd8\\x83\\x32\\xfe\\x26\\x2f\\x2c\\xcf\\xec\\xf9\\x59\\xc6\\\n\\xb0\\x43\\x49\\xe1\\x3f\\xed\\xc1\\x72\\xfe\\x85\\xfe\\xda\\x9d\\xb3\\x3e\\x05\\\n\\x14\\xa0\\xc4\\x76\\xe5\\x10\\x47\\x35\\x19\\xc2\\x4d\\x6d\\xc0\\x5a\\x15\\xd6\\\n\\xb8\\xe4\\x96\\x3f\\x6c\\xb0\\x08\\x53\\x91\\x3f\\x58\\x07\\x64\\x63\\x8a\\xfc\\\n\\x2d\\xf9\\x00\\x9e\\xe4\\x04\\x25\\x95\\x3f\\xa3\\x1c\\x9d\\xf9\\x0e\\x54\\xbc\\\n\\x1f\\x4b\\xf9\\xf3\\x09\\x52\\xf8\\x1e\\x7b\\xc0\\xf9\\xd8\\x52\\xeb\\x2f\\xeb\\\n\\x89\\x3b\\xf7\\xcd\\x1e\\x3e\\xe4\\xdd\\x5a\\xda\\x24\\x89\\xe2\\xc3\\x56\\x60\\\n\\x1f\\x58\\x7f\\x14\\xc6\\x4c\\xcb\\xf5\\x47\\xc8\\xd2\\xc0\\x4f\\x42\\x3e\\x21\\\n\\xd8\\x39\\xd2\\xf0\\xef\\xd6\\x90\\xf4\\xfa\\x23\\xc2\\x52\\xd6\\x1f\\x9d\\x43\\\n\\x7d\\xb2\\xbd\\xfe\\xee\\x28\\x3d\\xe5\\xc3\\x52\\xe0\\x3c\\xd0\\x5f\\xb8\\xaa\\\n\\x7f\\x82\\x7b\\x45\\xff\\xc4\\x7d\\x80\\x2f\\x05\\xcf\\x22\\x9c\\xaf\\xe1\\x48\\\n\\xf9\\xc3\\x2e\\xb1\\xa2\\x7f\\x25\\x2f\\xc0\\xd3\\x60\\x8e\\x26\\xd6\\x3f\\x14\\\n\\xec\\x1c\\x09\\xfa\\x87\\xf8\\xad\\x1a\\xf9\\xfe\\x99\\xf2\\xa9\\x05\\xc2\\xf8\\\n\\xab\\x20\\x15\\x81\\xb1\\x00\\xfb\\xca\\x8f\\xbf\\x45\\xdf\\xa6\\xe2\\xef\\x63\\\n\\xac\\xdc\\x8b\\xdd\\x30\\x2a\\x26\\x2e\\xde\\xef\\x73\\x96\\xf4\\x4c\\x8c\\x3f\\\n\\xee\\x8d\\xb8\\xd7\\x99\\xd4\\xf1\\xf7\\x1a\\x86\\x31\\x68\\xa3\\xb8\\x7b\\x3f\\\n\\x3c\\xe3\\x0d\\x7b\\x25\\x1d\\x13\\xa5\\x36\\x68\\x71\\x1f\\x45\\x6a\\xc6\\xe4\\\n\\xaf\\xd7\\x71\\x81\\xfb\\x31\\x31\\x7e\\x7c\\x12\\x0d\\xa4\\x8b\\xf3\\xe3\\xa3\\\n\\xd2\\xb3\\x8e\\xf8\\x64\\xc6\\x21\\x7e\\xbd\\x7f\\x42\\xc2\\x74\\x86\\xf8\\xe0\\\n\\x19\\x30\\x81\\x6a\\x2e\\x78\\x26\\xca\\xdf\\x44\\xaa\\xa8\\xf8\\xe0\\xd9\\x38\\\n\\x59\\x1f\\x23\\x75\\xdc\\xbd\\x8e\\xcd\\xae\\x9a\\x0f\\x5e\\xc7\\x86\\xca\\x07\\\n\\x6f\\x60\\xff\\x0c\\xc4\\xb9\\x0f\\x61\\x9d\\x8d\\x24\\xff\\x84\\x7b\\x1d\\xef\\\n\\x68\\x3c\\x1b\\xac\\xce\\xc8\\x39\\x8a\\xbf\\x8f\\xe1\\x1c\\xf9\\xe1\\x9e\\xe1\\\n\\xca\\x95\\xbb\\xe7\\x1c\\x71\\xf7\\x9c\\x23\\xee\\x9e\\x73\\x34\\x9e\\xbb\\x8f\\\n\\x77\\xc4\\xdf\\xc7\\x3b\\x8a\\x8f\\x2b\\x3e\\xab\\xe6\\x7b\\x23\\x69\\xe2\\xd3\\\n\\xc6\\xe5\\xd5\\x2f\\x3e\\xcd\\x7c\\x79\\xc0\\x01\\x97\\xb0\\x28\\x62\\x4b\\x35\\\n\\x4e\\xc5\\x17\\x8e\\x1f\\x9b\\x77\\xbe\\x3e\\xf5\\x2a\\xb6\\x4c\\xb8\\x8c\\xb0\\\n\\x8e\\x62\\x12\\x72\\x1e\\x87\\x41\\x4c\\xc3\\x57\\x61\\x08\\x1b\\x96\\x8e\\xbf\\\n\\x7f\\xce\\x18\\x13\\xaa\\x96\\x85\\x96\\x79\\x17\\x61\\x4a\\x28\\x0e\\xae\\xfc\\\n\\x05\\x18\\x84\\xe2\\x63\\x50\\xfc\\xfe\\x09\\xf7\\xe6\\xcf\\x87\\x89\\x53\\xc5\\\n\\x25\\x94\\x1f\\xfb\\x31\\xe8\\x13\\xee\\xd5\\x5c\\x15\\xc6\\x07\\xaf\\x46\\x2d\\\n\\xf2\\xf7\\x1a\\xae\\x9a\\xe3\\xef\\xb5\\xf1\\x4d\\x21\\xc9\\x3d\\xdb\\x8a\\xf9\\\n\\x86\\xec\\xd8\\xbd\\xb5\\x70\\x12\\xc5\\x25\\x4a\\x83\\x38\\x6d\\x31\\x7e\\x4c\\\n\\x42\\xf7\\x20\\xce\\x8b\\x38\\x8f\\x89\\xf2\\x2e\\x2e\\x13\\x71\\x59\\x89\\xcb\\\n\\x90\\x39\\xc3\\x24\\x02\\x18\\x56\\x4c\\x18\\x66\\xa1\\x23\\xe1\\x97\\x81\\xba\\\n\\xca\\xb9\\x1a\\xa1\\x40\\x0e\\xe0\\xcc\\xa2\\x6f\\x89\\x3b\\x03\\x56\\x6e\\xaa\\\n\\xe5\\xc5\\x7c\\x78\\x0a\\x2b\\xc9\\xfa\\xbe\\x00\\x29\\x72\\xc4\\x8d\\xe0\\x0e\\\n\\x72\\xbd\\x94\\x6e\\x2f\\x5b\\x29\\x1f\\xdb\\xc0\\x59\\xbe\\xb0\\x49\\x2f\\xce\\\n\\xfb\\x2e\\xe2\\xce\\x64\\x71\\x86\\x26\\x92\\xf9\\x2c\\x39\\x10\\xf6\\x4a\\xf4\\\n\\xf1\\x62\\x3e\\x04\\x78\\x62\\xcd\\x05\\xf6\\xcd\\x85\\x33\\x07\\x90\\xb7\\xc7\\\n\\xe4\\x9c\\x2d\\x73\\xc8\\xc2\\x57\\x51\\xe2\\xf6\\x33\\x52\\xde\\x24\\x3a\\x04\\\n\\x8c\\x6e\\x8f\\x88\\xb3\\x07\\xfe\\x1d\\xc9\\xa3\\xf7\\x29\\x00\\xf6\\xc5\\xa1\\\n\\x5b\\x21\\xe4\\x0f\\x73\\xe5\\xa2\\x0e\\xf8\\xc3\\x1c\\x7a\\x36\\x25\\x2e\\x9b\\\n\\xc9\\x32\\xa6\\xcb\\x19\\xfc\\x6e\\x91\\x0e\\x7c\\xdf\\x7b\\x59\\xea\\x4c\\xf2\\\n\\xe8\\xe9\\x94\\x24\\xee\\x6c\\x1d\\x21\\xfc\\xeb\\x64\\x7f\\xed\\x37\\xc4\\x22\\\n\\x4d\\x8b\\x29\\xf9\\xe4\\x0e\\xd8\\x7b\\xf3\\x9c\\xa4\\xe5\\xaf\\x78\\x0f\\x5d\\\n\\x02\\x9c\\x03\\xe0\\xce\\x37\\x58\\x81\\x38\\x59\\xae\\x10\\xee\\x45\\x96\\x72\\\n\\x59\\x71\\x3b\\x98\\x12\\xaf\\xa5\\xaf\\x77\\x33\\x6e\\x39\\x00\\x1d\\xb8\\x20\\\n\\x96\\xf6\\x91\\xf4\\x79\\x31\\xa0\\x3b\\x2c\\x4d\\x23\\xee\\xac\\x05\\x57\\x00\\\n\\xbe\\x25\\x5a\\x14\\x1e\\xce\\xd0\\x53\\x5b\\xb8\\xe9\\x46\\x5c\\x1f\\x2c\\xb8\\\n\\xd9\\x49\\xbe\\x77\\x56\\x38\\xfa\\x9f\\xe1\\x2c\\x9d\\x23\\xeb\\xe3\\x2c\\xc6\\\n\\x26\\x57\\xfa\\x2a\\xd8\\x98\\x7f\\x23\\x0a\\xc7\\x40\\xe6\\x33\\x0d\\x5b\\x92\\\n\\xb9\\x6e\\x40\\x90\\xe9\\xf9\\xa2\\x8d\\x7e\\x7c\\xe7\\xf5\\x88\\x1b\\x8f\\x21\\\n\\x62\\xb0\\xc5\\x8f\\x88\\xfb\\x2a\\x47\\xed\\xaf\\x07\\x59\\x84\\xbb\\x9d\\xb8\\\n\\xf5\\xab\\x57\\xa2\\x77\\x7f\\xb1\\x94\\x55\\x96\\xdc\\xc8\\x8b\\x40\\x96\\xf6\\\n\\x90\\x6b\\x7c\\x1d\\xf8\\x14\\xa1\\xaf\\xb2\\xf7\\x4d\\x0c\\xa2\\xc4\\xdf\\x91\\\n\\xf8\\x1e\\x3a\\x1e\\x1f\\xc8\\x97\\x25\\xd9\\x50\\x95\\x38\\xfb\\xfc\\x96\\xbc\\\n\\x2a\\xd6\\xe5\\x17\\xb1\\x34\\x9e\\x38\\x19\\x36\\xce\\x17\\xbb\\x4f\\xb6\\xcb\\\n\\x10\\x3a\\x8c\\xe8\\xab\\xca\\xd8\\x88\\x4f\\x47\\x49\\xcb\\xd9\\x48\\x8e\\xad\\\n\\x63\\x7b\\x1b\\x38\\xb7\\x48\\xcc\\xa7\\xa2\\x8f\\xc0\\x39\\x9b\\x05\\xad\\xb8\\\n\\x87\\xdc\\x19\\x7c\\xd3\\x05\\xb2\\xdf\\xc6\\x6c\\xf1\\x55\\x33\\xc9\\x5c\\x3e\\\n\\x38\\x0b\\xc7\\x11\\xde\\xc8\\xdb\\xc0\\x38\\x2b\\xe6\\xe1\\x30\\x4e\\x39\\x7a\\\n\\xfe\\x28\\xce\\x21\\x58\\x44\\xb6\\xcb\\x47\\x68\\x1b\\x28\\x73\\xcb\\xbe\\x0a\\\n\\x3c\\x32\\xe6\\xe4\\x38\\x27\\xaa\\x94\\xfb\\x59\\xf1\\x08\\x56\\x93\\x39\\x2f\\\n\\xa8\\x43\\x57\\xce\\xb0\\x9b\\x41\\x89\\xdb\\x1e\\x78\\x18\\xe8\\x4d\\x0a\\x7c\\\n\\x95\\x65\\x99\\x89\\xfb\\xaa\\xe4\\xe6\\x6d\\x6c\\x01\\x7b\\x7e\\x85\\xb3\\x8d\\\n\\xd1\\x47\\xba\\xba\\x17\\x1e\\x6b\\x99\\x47\\xc8\\xcc\\xd3\\xad\\xe1\\xdf\\x0b\\\n\\x7c\\xd5\\x7e\\x51\\x3c\\x62\\x92\\x83\\xaf\\xf2\\x24\\xc4\\xf5\\xfe\\xab\\x9b\\\n\\x61\\x95\\x27\\xf3\\x38\\x84\\xe5\\x06\\x4b\\xfe\\xd8\\x16\\x5f\\x25\\x94\\x15\\\n\\x7e\\x1b\\x46\\xf2\\xce\\x01\\xdd\\x81\\x78\\xdd\\x5b\\x8e\\x33\\xa0\\x8f\\x8a\\\n\\xc2\\xeb\\x64\\xc3\\x1d\\xe6\\xf1\\xd3\\x89\\x6b\\x3b\\x52\\xe3\\x20\\xc6\\x4d\\\n\\xf0\\xf2\\x5d\\x28\\xf9\\xce\\xb5\\xc9\\x49\\x89\\xfb\\x03\\x39\\xf6\\x74\\x8c\\\n\\x15\\x85\\x39\\xd7\\x01\\xf7\\xf8\\x2e\\x21\\x2e\\x17\\xfa\\x2a\\xa9\\xfe\\xfd\\\n\\x19\\xff\\x7b\\x3d\\xf2\\xae\\x4e\\x42\\x39\\x51\\x1a\\xfe\\x96\\x29\\xcc\\xe6\\\n\\xa2\\x30\\xb7\\x3b\\xe9\\x17\\xb6\\x2a\\x84\\x39\\xa0\\x78\\x0e\\x22\\x26\\x8c\\\n\\xb3\\x02\\x5f\\xe5\\xe9\\xf9\\x7c\\x35\\x51\\xbc\\x72\\xed\\x89\\xa8\\x25\\x0a\\\n\\xf3\\x80\\x1b\\xe1\\x40\\xfe\\x81\\xbe\\x4a\\x90\\x41\\x4a\\xf1\\xeb\\xf8\\x6d\\\n\\x18\\xc9\\xa3\\x27\\x2f\\x05\\x5f\\x6b\\x3f\\x52\\x40\\x1b\\x11\\xf7\\x55\\x52\\\n\\xbc\\x02\\xda\\x9a\\xd0\\x57\\xc9\\x79\\x7e\\xb2\\xb8\\xff\\xc1\\xb7\\x2f\\x77\\\n\\xff\\x33\\x47\\x86\\xf0\\xc4\\xc0\\x9c\\xce\\x91\\xbe\\x0a\\x7c\\x95\\x5c\\x7d\\\n\\x55\\x72\\x8d\\x5f\\xee\\x42\\xdc\\x57\\x89\\x65\\x22\\xe2\\x6f\\x50\\xdc\\x57\\\n\\xb9\\x8a\\x19\\x64\\xe6\\xd5\\xe4\\xe2\\x7f\\x84\\xfd\\x33\\xb9\\xdd\\x0c\\xcf\\\n\\x51\\x08\\x7c\\xd5\\x3f\\x64\\x2e\\x1f\\x4b\\x1e\\xf4\\x1c\\xef\\x26\\x9f\\x93\\\n\\x61\\x0b\\xfc\\xb3\\x20\\x63\\x70\\x97\\x7f\\x16\\xea\\x70\\x8d\\x6d\\xe7\\x1e\\\n\\x03\\xda\\x0a\\xfa\\xaa\\xbb\\x24\\xfd\\xfd\\x21\\xaf\\xce\\xf2\\x55\\x72\\xcf\\\n\\xbf\\x20\\xe7\\x4a\\x6e\\xbd\\x55\\x7b\\x7c\\x95\\x20\\x5b\\x77\\x84\\xaf\\x72\\\n\\x67\\xfe\\x8e\\x3e\\x7d\\xa1\\x45\\xdc\\xa3\\x9d\\xcb\\x8a\\xc7\\x21\\xd5\\x57\\\n\\x59\\x8e\\x83\\xf6\\xf8\\x2a\\xb9\\xe4\\x3f\\x58\\x6b\\xf0\\xe5\\x3d\\x2e\\x02\\\n\\x5f\\x65\\x4b\\xb6\\x1e\\x4e\\xd2\\xe7\\x47\\x42\\x7e\\x68\\x79\\xae\\xb7\\x33\\\n\\xf2\\xc3\\x9f\\x28\\xe5\\xe8\\x6b\\x8a\\xf9\\x2a\\xf1\\xb7\\x23\\xd0\\x17\\x56\\\n\\xfc\\x05\\x92\\xf3\\xf2\\x67\\xac\\x1b\\xf7\\xa6\\x94\\xab\\x37\\x2c\\xe6\\xab\\\n\\x90\\x17\\xf0\\xfd\\xb6\\xce\\x1f\\x15\\xaf\\x5f\\x08\\x76\\x21\\xa4\\xc8\\xc8\\\n\\xd2\\xf7\\x64\\x7d\\x9d\\x2f\\x25\\x02\\xfd\\xb4\\x33\\xf5\\x9c\\x8d\\xb8\\xb2\\\n\\xc5\\x7e\\x3a\\xf0\\xc6\\x23\\x88\\x93\\x8f\\x7e\\x4a\\xbe\\xdd\\xcf\\x28\\x50\\\n\\xa0\\x40\\x81\\x02\\x05\\x0a\\x14\\x28\\x50\\xa0\\x40\\x81\\x02\\x05\\x0a\\x14\\\n\\xa4\\x54\\x40\\x1e\\xfc\\x15\\x71\\xeb\\xce\\x63\\x58\\xea\\x4b\\xdc\\x3a\\x7a\\\n\\x06\\x5b\\x9e\\x52\\x39\\x20\\x87\\xea\\x40\\x9c\\x1c\\x58\\x58\\x7f\\xb3\\x94\\\n\\xe5\\x41\\x2e\\xb8\\x80\\xe4\\xb5\\xeb\\x9b\\x12\\x80\\xfc\\x0a\\xb6\\x2d\\xa5\\\n\\x74\\x18\\x2c\\x09\\x6b\\x3a\\xfd\\x93\\x25\\xa5\\xde\\x07\\xf6\\xbd\\x08\\xfa\\\n\\x55\\x02\\xc1\\x7e\\x12\\xe4\\xc2\\x58\\xab\\xc1\\x7a\\xc2\\x72\\x4a\\x7c\\xf6\\\n\\x94\\x40\\xb3\\x93\\x21\\xbd\\xde\\x04\\xf4\\xc7\\x6f\\x92\\x39\\xbf\\x90\\x93\\\n\\x63\\x2f\\x5d\\x36\\x09\\xb7\\x90\\x27\\xd7\\x60\\xe9\\x0c\\x25\\x2e\\x23\\x5f\\\n\\x5b\\xa7\\x93\\x13\\x58\\x63\\x12\\xd6\\xd7\\x9f\\x90\\x63\\x36\\x2d\\xb1\\x26\\\n\\xb1\\x56\\xe4\\x0f\\x6b\\x57\\x65\\x3d\\x95\\xc0\\x64\\x44\\x65\\x4a\\xbc\\x9e\\\n\\x5e\\xcf\\x09\\xbf\\x58\\x9f\\x30\\x90\\xb9\\x8f\\xda\\x23\\x77\\xe2\\x7c\\x00\\\n\\xd0\\xef\\x11\\xca\\x67\\x95\\x0b\\xfe\\xa1\\x5f\\x20\\xac\\x33\\xc7\\x90\\x6b\\\n\\xfa\\x06\\xbe\\x0a\\xe8\\x92\\x8b\\xf7\\x22\\x3a\\xb3\\x9f\\x55\\x8c\\x6d\\xa2\\\n\\x30\\x06\\xc9\\x93\\x34\\x9f\\x00\\xf8\\x3f\\x21\\x5f\\xd0\\x61\\x71\\x75\\x0d\\\n\\xae\\x2f\\xb9\\xd7\\x06\\x7d\\x15\\xd0\\xa3\\x10\\xf2\\xf5\\x87\\x1b\\xe1\\xd4\\\n\\x13\\x85\\xf3\\xbb\\x0c\\xe9\\xf2\\x15\\x28\\xe5\\x63\\x1b\\x72\\x7d\\x5f\\xfd\\\n\\x28\\x75\\x7e\\x5f\\x96\\xfd\\xb3\\xab\\xba\\x97\\xa9\\xb5\\x7f\\x06\\x30\\xbe\\\n\\x0b\\x3c\\xde\\x6a\\x17\\xfc\\x17\\x21\\xb3\\xed\\xe2\\xd4\\x36\\xbe\\x03\\x72\\\n\\xf2\\x87\\xa9\\xa9\\xef\\x11\\x63\\x33\\x99\\xcb\\xc8\\xd9\\xf9\\x85\\x30\\xc7\\\n\\x87\\x0e\\x61\\x6a\\x9c\\x5f\\x00\\x96\\xf3\\x53\\xe8\\x5b\\x63\\x7e\\x9a\\x43\\\n\\xc2\\xad\\x30\\x3f\\x3d\\x2d\\x72\\x9f\\xda\\xe7\\xa7\\x80\\x94\\x7c\\xe3\\x05\\\n\\x4b\\xbb\\xc9\\x31\\xf9\\x46\\x4a\\xd5\\x07\\x74\\x06\\x81\\xa4\\xc8\\xc7\\xec\\\n\\x41\\x2c\\x5f\\xb5\\x56\\x3e\\xe8\\xa3\\xde\\x45\\xf9\\xaa\\x25\\x02\\x59\\x6a\\\n\\x4b\\x8a\\x7c\\xde\\xe3\\x10\\x19\\x5f\\x24\\xde\\xea\\xa9\\xf9\\x9e\\xac\\xdc\\\n\\xf3\\x6e\\x9e\\xc0\\xe4\\xa8\\x1f\\x77\\x7f\\x90\\x61\\x42\\xe2\\xfc\\xb9\\x7b\\\n\\x83\\x96\\x31\\x24\\xdc\\xfb\\x33\\xc6\\xb1\\x6a\\xee\\xde\\xa8\\x62\\xa2\\x2a\\\n\\x6a\\xb8\\xfb\\x18\\xd2\\x9a\\xb2\\x6a\\x85\\x7b\\xff\\x98\\x78\\x53\\x8e\\x14\\\n\\x3f\\x00\\xc5\\x11\\x9f\\x9e\\x28\\x22\\xad\\x8a\\xbf\\x37\\x56\\x23\\xff\\xf1\\\n\\xfc\\xbd\\x81\\xd1\\xd3\\x24\\x46\\x88\\x97\\xb7\\x08\\xc9\\xde\\x8f\\x67\\x8c\\\n\\x9c\\xc5\\x56\\xf6\\x7e\\x12\\x13\\x35\\x98\\x12\\xee\\x4d\\xc1\\xc4\\xc7\\xeb\\\n\\xcf\\x98\\x74\\x7a\\x3e\\xcd\\x6a\\xf6\\x3e\\x0a\\x11\\xf3\\xf7\\x71\\x70\\xc4\\\n\\xdf\\x33\\x70\\xc4\\xbb\\x67\\xe0\\x88\\x0b\\x47\\xc7\\xc0\\x11\\x17\\x3e\\xeb\\\n\\xd1\\xe0\\xc7\\xc7\\xcb\\x59\\xa3\\xe4\\xd2\\x03\\xb3\\x96\\xf1\\x06\\x7b\\x0c\\\n\\xb0\\xb0\\xca\\x3a\\x52\\xc5\\xa7\\x5f\\xc5\\x99\\xac\\x8c\\xcf\\x57\\xbc\\x9d\\\n\\x4b\\x14\\x2a\\x9b\\x5f\\x7f\\xde\\xc6\\x25\\xca\\x81\\xb3\\x6d\\x09\\x21\\x31\\\n\\xa3\\xd7\\x89\\xea\\x85\\x49\\x41\\xf7\\x26\\xb5\\xf9\\x9e\\x2b\\x1f\\xee\\x5e\\\n\\xaf\\x32\\xdf\\xf3\\x8c\\x3d\\x10\\xe7\\x67\\xd0\\x25\\xdc\\xab\\xa3\\xb4\\xc2\\\n\\x7d\\x8c\\xc6\\x64\\xbe\\xd7\\xc6\\x68\\x84\\x7b\\x93\\x36\\x4e\\xfa\\x5e\\x67\\\n\\xe5\\xde\\x8a\\x7b\\x71\\x98\\xe2\\xb8\\xc4\\x69\\x10\\xa7\\x8d\\xe1\\x0c\\xa1\\\n\\x24\\xcd\\x8b\\x38\\x8f\\xe2\\xbc\\x73\\x65\\x82\\x0d\\x48\\xd5\\x59\\xd2\\x93\\\n\\xd9\\x0e\\x29\\xd5\\x74\\xe2\\x03\\x55\\xe0\\x2a\\x30\\xc7\\x01\\x2f\\xbb\\x4e\\\n\\x26\\xc2\\x9c\\xa0\\x95\\x57\\x73\\xe0\\x1e\\xb0\\xc7\\xd0\\x72\\x0f\\xa3\\xbb\\\n\\xf4\\xc2\\xab\\x39\\x70\\x0f\\x01\\xc4\\xc9\\x9e\\xe4\\xcc\\xff\\x46\\xaf\\xe6\\\n\\xc0\\x7d\\x60\\x7f\\x09\\x6c\\x42\\x0a\\xe9\\x9f\\xe4\\x84\\x5f\\x0c\\x61\\xa7\\\n\\x45\\x7e\\xb1\\x9f\\xcc\\x1b\\xe7\\x8d\\xe2\\x1b\\x5b\\xc1\\x5f\\x6d\\xed\\x3f\\\n\\x72\\x14\\xd8\\x23\\x29\\xb6\\x6b\\x38\\xcc\\x01\\x3f\\xb0\\x17\\x77\\x58\\xe4\\\n\\x07\\x3c\\xbb\\xb7\\xec\\x83\\xbc\\x10\\xc5\\x0b\\x7d\\x0b\\xec\\xc9\\xab\\x42\\\n\\xee\\xcd\\x23\\xb1\\x67\\x5d\\x7c\\x16\\x52\\x4f\\x1b\\x6e\\xb1\\x0f\\x6c\\xb7\\\n\\x28\\x0d\\xd8\\x1b\\x29\\x25\\x0f\\xf0\\x14\\x56\\x92\\x79\\x7e\\x24\\xa6\\xab\\\n\\xc4\\xd9\\xcb\\x74\\x55\\x8e\\x27\\xd8\\x05\\xe4\\x58\\x4e\\x4e\\xff\\xc7\\x12\\\n\\x98\\xa3\\x09\\x67\\xfd\\x81\\xae\\x91\\xf3\\x7b\\xbd\\xe5\\x00\\x64\\x97\\xe3\\\n\\xf9\\xf8\\x2d\\xcb\\x01\\x65\\xf3\\x27\\x71\\xb2\\x71\\x67\\xeb\\xa5\\x1b\\x99\\\n\\xcb\\x16\\x6c\\xa6\\xe5\\x99\\x4a\\x8b\\x45\\xf1\\xc0\\xc6\\x6b\\x72\\xdb\\x3f\\\n\\x46\\x9b\\xc7\\x7e\\xd5\\x55\\x24\\x6d\\x17\\x0a\\x79\\x80\\x0c\\xdc\\x99\\xbe\\\n\\xe2\\x5b\\x91\\x7f\\x7c\\x6b\\x5f\\xf2\\xef\\xa7\\x50\\xe2\\xef\\xee\\x53\\x39\\\n\\x32\\xe0\\x26\\x32\\x12\\xc7\\x76\\x62\\xbf\\xae\\xbd\\xb1\\xc9\\x99\\xbe\\xe2\\\n\\x7b\\x91\\x3f\\xc8\\x1c\\xe6\\x8b\\x9e\\xd1\\x57\\x56\\x92\\x39\\x1f\\xae\\x00\\\n\\x76\\x20\\xa4\\xda\\xbf\\x23\\xe4\\x48\\x5f\\x31\\x47\\xc2\\x1f\\xfa\\xc8\\xba\\\n\\xf2\\x67\\xc5\\x69\\xd4\\x26\\x4e\\x87\\x4a\\x48\\x17\\xd6\\x8a\\x7e\\x20\\x6e\\\n\\x2c\\xc3\\x3e\\x79\\xf4\\x53\\xe0\\x6f\\x9a\\x11\\xc7\\x93\\x48\\x7d\\x1b\\xf6\\\n\\xfa\\x0a\\xb4\\x91\\x9f\\x44\\x6e\\xd1\\x37\\xfa\\x02\\x7f\\x8b\\x29\\x93\\xf8\\\n\\xcc\\x38\\xa4\\xd1\\x9e\\x8d\\x52\\xc8\\xe7\\x23\\xc8\\x76\\x9b\\x90\\xea\\x2b\\\n\\xb0\\x0e\\x87\\xfd\\xce\\xf8\\x06\\x82\\xe4\\xcc\\x84\\x8b\\x40\\x9d\\xe0\\xac\\\n\\x36\\x21\\xcd\\xce\\x9c\\xb1\\x0c\\x9d\\x32\\x4b\\x7e\\x0d\\xb6\\x58\\x5e\\x53\\\n\\xd2\\xb2\\x90\\x8b\\xaf\\x90\\x1b\\xb0\\xc5\\x20\\xa4\\x11\\x36\\x24\\x9d\\x4d\\\n\\x9b\\x86\\xcc\\xf6\\xa5\\x51\\xa7\\xf8\\x56\\x60\\xdf\\x08\\xb2\\x66\\x9c\\x63\\\n\\xe7\\x09\\xbe\\x42\\x4e\\xc0\\xfe\\x21\\xd2\\x04\\xfd\\x5b\\x57\\x6d\\x97\\x8c\\\n\\x25\\x73\\xde\\x7a\\x59\\xfc\\x66\\x8f\\xaf\\x40\\x19\\xa1\\xac\\xbc\\xc9\\xef\\\n\\x09\\x80\\x0d\\xf6\\x37\\x7c\\x5a\\xc2\\xdc\\x08\\x07\\xf6\\x82\\x84\\xfe\\xd0\\\n\\x9a\\x2d\\x22\\x81\\xaf\\x58\\x42\\x5c\\x3b\\x91\\x83\\xaf\\x70\\x17\\x15\\x45\\\n\\xf1\\x8f\\x75\\x33\\xac\\xb3\\x7c\\x38\\x37\\x1d\\x70\\x8b\\xfc\\xe1\\xbb\\xb3\\\n\\xd5\\x57\\x80\\x2f\\xf4\\x74\\x5f\\xd1\\x5c\\x14\\x67\\x47\\x37\\xc3\\xda\\x46\\\n\\xe6\\x31\\xcd\\x19\\x38\\xd2\\x57\\x80\\x77\\x2a\\xe2\\x66\\xfa\\xa4\\xe0\\x0b\\\n\\xf9\\x17\\xc3\\xdb\\x7d\\x45\\x72\\xb5\\x7f\\x7b\\xf0\\x56\\x5f\\xe1\\xcd\\xfe\\\n\\xcf\\x55\\x78\\xba\\xaf\\x90\\x7b\\xfc\\xeb\\xed\\x62\\x18\\x8e\\xc0\\x13\\x7d\\\n\\x85\\x27\\xf8\\x1f\\x6f\\x40\\xae\\xbe\\x42\\x4e\\xfe\\xd7\\x11\\x39\\x9f\\xdc\\\n\\x90\\xa3\\xaf\\x90\\x63\\xfe\\x73\\x90\\x92\\xdf\\x9e\\xb8\\xa3\\x7d\\x85\\x94\\\n\\x0d\\x2e\\x7b\\xf3\\x5f\\xe4\\x4d\\x98\\xff\\x42\\x5e\\x27\\x9e\\xff\\xa2\\xef\\\n\\x4f\\x0e\\xfe\\xd5\\x16\\x6c\\xf5\\x15\\xe8\\xeb\\xa4\\xf4\\xcb\\x5c\\x91\\x7f\\\n\\x6c\\xa5\\xa4\\x67\\xc5\\xf8\\x1a\\x2c\\xfb\\x0a\\xe4\\xdf\\xda\\xfe\\x04\\x41\\\n\\xfe\\x15\\x49\\xb6\\xf3\\x8d\\x3d\\x53\\x2d\\x3d\\x9a\\x6a\\xf9\\x81\\xbe\\x02\\\n\\x72\\xb6\\x72\\x0e\\xb8\\x85\\xbd\\x3d\\xc8\\xa5\\xf4\\xc4\\xc9\\x42\\xb1\\x1e\\\n\\x89\\xf9\\x3b\\xce\\x17\\xf0\\x05\\x39\\xa5\\x02\\x05\\x0a\\x14\\x28\\x50\\xa0\\\n\\x40\\x81\\x02\\x05\\x0a\\x14\\x28\\x48\\xdd\\x80\\x1e\\x42\\x53\\xe2\\xce\\xa1\\\n\\x80\\xbc\\xd3\\xc4\\xd3\\x55\\xfe\\x5d\\x53\\x4a\\xbd\\xf6\\xad\\x21\\xb7\\x12\\\n\\xd6\\x19\\x6c\\xd1\\x59\\xb2\\x6e\\x67\\x3e\\xa5\\x02\\xeb\\x53\\x62\\x99\\x1e\\\n\\x64\\x5a\\x97\\x88\\x93\\xf5\\xfd\\xca\\xdf\\x8b\\xe5\\x5c\\x70\\xdb\\x21\\x59\\\n\\x52\\x2a\\x3f\\xa0\\x33\\x27\\xe8\\x11\\x82\\xb0\\xc7\\xb4\\xb8\\x84\\xbb\\xe2\\\n\\xfc\\x6f\\x82\\xbb\\xb7\\x94\\x54\\xdf\\x2e\\xa5\\x01\\x72\\x68\\x9c\\xcd\\x22\\\n\\xd4\\xf9\\x60\\x07\\xfc\\x88\\xcf\\xf1\\x86\\x4e\\xa1\\xaf\\xcb\\x27\\x6d\\x01\\\n\\xb2\\x48\\xa1\\x3e\\x67\\x39\\xe1\\x6f\\x96\\xc8\\x9f\\xce\\x03\\xe9\\xf2\\x16\\\n\\x8c\\xc4\\xe5\\x01\\x3a\\xe5\\x99\\x9c\\xf0\\x97\\x89\\xcc\\x7a\\xe8\\x46\\xd9\\\n\\x53\\xe5\\x1d\\x40\\x17\\x56\\xa8\\xc3\\xc5\\x2e\\xf8\\x17\\xeb\\xd6\\x16\\x92\\\n\\x31\\x5d\\xde\\x02\\xfa\\x2e\\x21\\xfd\\xb6\\xf4\\xc7\\xad\\xa1\\xa7\\xc8\\x7f\\\n\\x4a\\xec\\x07\\x71\\xe6\\xbc\\x90\\xfe\\x76\\x2e\\xf8\\x6f\\x27\\xf2\\xdf\\x42\\\n\\xc6\\x74\\x79\\x0b\\x5a\\x32\\xa7\\x7f\\x88\\x0b\\xfe\\x87\\x88\\xfc\\x3b\\x62\\\n\\x87\\xc1\\xd7\\x90\\x9d\\xcc\\x76\\x31\\x77\\xb8\\xe0\\x7f\\x07\\x99\\xd7\\xbb\\\n\\xb2\\xcb\\x98\\x2e\\x6f\\x02\\xe7\\x16\\x22\\x0f\\x58\\x6f\\x2d\\xe6\\x84\\x3f\\\n\\xf1\\xf9\\xd1\\x47\\x3c\\x90\\x2e\\x6f\\x01\\x7b\\xd2\\x85\\x36\\x8c\\xb5\\x5c\\\n\\x47\\xf6\\x43\\xa5\\xe7\\xdd\\x0a\\xfe\\xa4\\xf6\\x9d\\xa4\\x14\\x60\\xcd\\xd2\\\n\\x40\\xe6\\xbc\\x40\\x5f\\x27\\xa7\\x0d\\xf7\\x39\\xc9\\xac\\xd3\\xc3\\xf0\\x7e\\\n\\x7d\\x49\\xdf\\xd8\\x15\\xe4\\x65\\xe9\\x06\\x25\\xd6\\x4d\\x00\\x4f\\x87\\x73\\\n\\xed\\xfd\\x79\\x2a\\xc5\\xbf\\x7b\\x28\\x72\\x77\\x83\\xf7\\x9b\\x1a\\x10\\x48\\\n\\xdc\\x39\\x99\\x8e\\xea\\x25\\x9c\\xe3\\xfd\\xa4\\x26\\xe0\\xbb\\x46\\x1d\\x4b\\\n\\xe9\\xf9\\x88\\x75\\x5c\\x82\\xc9\\x3b\\xfb\\x26\\x93\\x0b\\xb0\\xc9\\x01\\xdd\\\n\\xd5\\xc9\\xc4\\xd9\\xec\\xfa\\x99\\xbf\\x6f\\x4e\\x8a\\xbd\\x0e\\x87\\x91\\x60\\\n\\x33\\x80\\x81\\xd5\\x0b\\xa9\\xab\\x49\\x1b\\xc5\\x5e\\x0f\\x33\\x31\\x1a\\xa3\\\n\\x8e\\x61\\x0c\\xba\\x38\\xb5\\x01\\xd6\\x07\\x34\\x8c\\x3f\\xac\\x4c\\x18\\xfd\\\n\\x98\\xf1\\xb0\\x8f\\x61\\x22\\xdd\\x41\\xff\\xf8\\xab\\xda\\xa8\\x8e\\xf7\\xed\\\n\\x17\\xa5\\xc1\\xef\\xec\\x3c\\x1c\\xc1\\x18\\xe2\\x28\\x3d\\xeb\\x9d\\x19\\xcf\\\n\\xc4\\x5b\\xf1\\x60\\xaf\\xfa\\x78\\xd3\\x1b\\x93\\x98\\xc3\\x7a\\xb8\\x57\\x33\\\n\\x87\\x8d\\xaa\\xf8\\xeb\\xad\\x18\\xc4\\xcb\\x5e\\x19\\xfc\\x80\\x6b\\x94\\x8a\\\n\\xbb\\xe2\\x07\\xd6\\x1d\\xc3\\xe8\\xfd\\xe1\\x8f\\xc1\\x0f\\xe3\\xd9\\x7f\\x4c\\\n\\x1c\\x69\\xc7\\x33\\x88\\x5d\\xef\\xcf\\x19\\x00\\x89\\x52\\x19\\x09\\xa1\\xc6\\\n\\x51\\x14\\x67\\xdb\\xc2\\x60\\x8a\\x8f\\x8d\\x79\\x1a\\xa7\\x62\\xbc\\x0f\\x13\\\n\\x1f\\x69\\x14\\x5f\\xdc\\x46\\x2e\\x31\\x8c\\x01\\x25\\xcb\\x62\\x7c\\x8c\\x26\\\n\\xfe\\x3a\\x29\\x2e\\xf1\\x55\\xcd\\xa8\\x1d\\xba\\x0a\\xee\\x85\\x70\\x42\\x4c\\\n\\xdc\\xd5\\xc0\\xd5\\x60\\x42\\x7c\\x42\\xfc\\x31\\x7e\\x09\\x49\\x83\\xd2\\x1f\\\n\\x8c\\x00\\x76\\x25\\xb3\\x9d\\x08\\xbd\\x67\\x76\\xa4\\x40\\x1e\\x9b\\xd6\\x05\\\n\\xf2\\x05\\x39\\x6e\\x13\\xe2\\xf4\\x02\\x5f\\xbb\\x40\\xf0\\xd7\\xd4\\xfb\\x49\\\n\\x4e\\x04\\xe8\\x2b\\x5a\\xb3\\x89\\xe5\\x08\\x35\\x97\\x31\\x2d\\xae\\xf2\\x61\\\n\\xc3\\xc9\\x6c\\xcb\\xdc\\xde\\x39\\xd6\\x8d\\xc8\\x7c\\x36\\xe8\\x08\\x17\\xe3\\\n\\x93\\x02\\xea\\x11\\x7a\\xce\\xbf\\xb1\\xd4\\x86\\x9c\\x1f\\x67\\x60\\x07\\x01\\\n\\xe3\\x33\\xf6\\xff\\x56\\xb1\\xe2\\x06\\x7a\\xbc\\x68\\x33\\x48\\xfb\\x64\\xd7\\\n\\x92\\x69\\x15\\x48\\xbf\\xf8\\xcc\\x54\\xf0\\x09\\x4b\\x89\\x9b\\x17\\x3b\\x5a\\\n\\x2f\\x8b\\xc8\\x6c\\x33\\xcc\\xd2\\x7e\\x68\\x59\\xfe\\x7d\\x1c\\xef\\xce\\x13\\\n\\xc0\\x79\\xae\\x03\\x29\\xb1\\x3d\\x33\\xd0\\x75\\x96\\x26\\x90\\x7d\\xfd\\x7d\\\n\\xf4\\x27\\x82\\x9d\\x45\\xc8\\x94\\x05\\x3d\\x79\\xf8\\x13\\xce\\x1d\\x5e\\x47\\\n\\x9e\\xef\\x77\\xd0\\x76\\x20\\x9f\\x15\\x9f\\x79\\x21\\x5c\\xa1\\x8b\\xfe\\x0d\\\n\\x59\\x3f\\xbb\\x16\\x7a\\x99\\xc2\\xbc\\xde\\x48\\x5c\\x5b\\x12\\xe6\\x06\\x3b\\\n\\x89\\xb3\\xa5\\xe0\\x49\\x68\\xf9\\x78\\xed\\xf5\\x1b\\x68\\x6b\\xc2\\xb7\\x62\\\n\\xc9\\x8b\\x22\\xff\\x96\\xb6\\xfb\\xf0\\xfc\\xbe\\x87\\xd3\\xde\\x8c\\xcc\\x6b\\\n\\x48\\x7f\\x11\\xb7\\x3e\\x04\\x9d\\x6e\\x41\\xb7\\xbb\\x03\\xff\\x5e\\x5c\\x1f\\\n\\xb8\\xa2\\x5d\\x0b\\xdf\\x8a\\xd0\\x36\\xd4\\x22\\xb7\\x7f\\x91\\xe7\\xd7\\x18\\\n\\x30\\x32\\x0b\\xe7\\xb9\\x4f\\x25\\xeb\\xba\\xf6\\x78\\x3f\\x8d\\x12\\xdb\\x42\\\n\\x16\\xdb\\x47\\x84\\x0e\\xb4\\xf0\\xad\\x60\\xae\\x3c\\x98\\x6c\\xcf\\xa7\\xe5\\\n\\xc2\\x16\\x3e\\x0d\\xa1\\x0e\\xba\\x0f\\xe5\\xdd\\xc3\\x1f\\x64\\x39\\x48\\xb3\\\n\\x91\\xcc\\xf5\\xe2\\xc8\\xb7\\x22\\x17\\x30\\x87\\xc6\\x5a\\xda\\x2b\\xe2\\xf6\\\n\\x3a\\x39\\x02\\xd8\\x39\\x8d\\xe6\\xfd\\x09\\x73\\x70\\xf4\\xb3\\xf8\\x7e\\x96\\\n\\x91\\xb9\\xaf\\x04\\x61\\x0f\\x16\\xbe\\x15\\xc8\\x69\\x3c\\x31\\x7f\\x69\\x4f\\\n\\x5c\\xb9\\xfd\\xe6\\xa4\\xbf\\xed\\xbc\\xbf\\xf6\\x12\\xbf\\x21\\x9d\\x5f\\xf1\\\n\\x6e\\x84\\x6f\\x4a\\x18\\x1b\\xf0\\xad\\x20\\x9f\\x72\\xf5\\xa3\\xa3\\xf8\\xb0\\\n\\x9d\\xb1\\x25\\x44\\xbc\\x7b\\x47\\xec\\xc5\\xa2\\x4e\\x71\\x4e\\xb6\\x30\\xae\\\n\\x08\\xe4\\xe8\\xb8\\x62\\x0f\\x48\\x3f\\x43\\xce\\xa7\\x7f\\x32\\xef\\xcf\\x19\\\n\\x7b\\xb7\\x48\\x2b\\x6c\\x90\\x5d\\xa7\\xc4\\x6b\\xe5\\xc8\\x1b\\xf2\\xe8\\x68\\\n\\xfb\\x15\\xc3\\x13\\xed\\xc7\\x1e\\xd0\\x76\\x2c\\xbf\\x15\\x61\\x5d\\xdf\\xd9\\\n\\x6f\\x45\\xae\\xef\\xd7\\x55\\x88\\xbf\\x15\\x7c\\xeb\\x62\\xdb\\xab\\xc2\\xb7\\\n\\x62\\x8f\\x07\\x73\\xb5\\xff\\xdc\\xec\\x42\\x7a\\x6d\\xc1\\x92\\x07\\x13\\xea\\\n\\xc5\\xde\\xb7\\xe2\\xca\\xf8\\x05\\xf7\\x9e\\xb4\\x07\\x84\\x71\\x45\\xfc\\xad\\\n\\x08\\xf9\\xb1\\xf6\\xad\\x88\\x79\\x68\\x7b\\xfc\\x03\\xdc\\x35\\xf3\\x60\\xda\\\n\\xc5\\x10\\x7f\\x2b\\x51\\x94\\x98\\x07\\x6b\\x62\\xe1\\x56\\xcc\\xbf\\x89\\xfb\\\n\\x07\\xb1\\x0c\\xf1\\x3a\\xef\\x2e\\x39\\x00\\x5e\\x51\\xf8\\x56\\x30\\xdf\\xb2\\\n\\x4c\\x3f\\x80\\xef\\x09\\xfb\\x6c\\x21\\xe7\\xc7\\x1a\\xbf\\x89\\xbf\\xe2\\xb9\\\n\\x0f\\xf9\\x8e\\x0c\\xd0\\xd1\\xf1\\x2f\\xb9\\xf7\\x4d\\x2a\\x50\\xa0\\x40\\x81\\\n\\x02\\x05\\x0a\\x3c\\x03\\xf0\\xf7\\xe0\\x07\\xa1\\xab\\x0c\\xdb\\x8a\\x6f\\xf9\\\n\\xeb\\xaf\\xfc\\x7b\\x5f\\xd6\\x51\\x80\\xee\\x10\\xce\\xeb\\x11\\xcb\\xc5\\xc4\\\n\\xf3\\x98\\x38\\xfe\\x77\\x5f\\xd4\\x31\\x82\\x4c\\xf1\\x14\\x71\\x69\\x84\\x8c\\\n\\x17\\x73\\x97\\x02\\xc4\\xe9\\x4c\\x14\\xe0\\x9f\\xf1\\x9e\\xe1\\xdd\\x79\\x5a\\\n\\x06\\xe9\\x2c\\x84\\xb9\\x10\\xce\\x7a\\xb1\\x66\\x17\\x36\\x1f\\x99\\xcf\\x82\\\n\\x99\\xe6\\xa5\\x74\\x39\\x02\\xe8\\x6e\\x63\\x3d\\xc3\\x96\\xbd\\x05\\x01\\x9f\\\n\\xf1\\xee\\x5e\\x92\\x7d\\xdb\\x23\\xde\\x02\\x6c\\xa6\\xa0\\x5d\\x38\\x6a\\x1b\\\n\\x29\\x8c\\x77\\xef\\x0b\\x36\\x2d\\x81\\x91\\xc4\\xb5\\x89\\x29\\x0e\\xba\\x9f\\\n\\x42\\xf2\\xaf\\x9b\\xb9\\x03\\xa4\\x03\\xe5\\xe9\\x4c\\xfa\\x19\\xf2\\x9d\\xf4\\\n\\xa7\\xf4\\xf6\\x03\\xfb\\x46\\x8e\\x7e\\xbf\\x65\\xc9\\xf7\\xbe\\x5f\\x00\\xfd\\\n\\x21\\xca\\xd4\\xd1\\xfe\\x73\\xaa\\x97\\xd2\\xe5\\x28\\xac\\x8d\\x5f\\x7e\\x94\\\n\\x32\\xc6\\x2f\\x00\\x7c\\x01\\xce\\x83\\xb6\\xb5\\x5e\\xe8\\xab\\xfc\\x83\\x00\\\n\\xf0\\x67\\xd0\\x85\\x10\\xf8\\x37\\x13\\xa5\\x1c\\xfe\\x4d\\x0a\\x0e\\xcb\\x9c\\\n\\x98\\x78\\xbd\\x2d\\xf6\\x1a\\x17\\x7f\\x9f\\x70\\xbd\\xce\\xa8\\x6f\\xe0\\x3a\\\n\\x9e\\x99\\x74\\x18\\x57\\xbd\\xee\\xf0\\x24\\x5c\\x0d\\x1a\\xa8\\x83\\x11\\x45\\\n\\xf9\\x41\\x1d\\x0c\\xc2\\xc6\\xc1\\x9a\\xf8\\xf7\\x94\\x5e\\x1b\\xef\\xde\\xc8\\\n\\x1d\\x80\\x34\\xd3\\xc4\\x5d\\xd5\\xa6\\xea\\xf1\\xee\\x34\\x31\\x23\\x55\\xdc\\\n\\x55\\x17\\x7f\\xf8\\x11\\x7b\\x35\\xaa\\xb9\\xab\\x49\\x15\\xef\\x8e\\x7d\\xab\\\n\\x85\\x3f\\x86\\x31\\xaa\\x11\\x0e\\xc3\\xc4\\xb0\\xa5\\x6e\\xe0\\xcf\\x86\\x32\\\n\\xfa\\xc5\\xeb\\x3b\\x51\\x14\\xd4\\xc0\\xd8\\x9e\\x88\\x89\\xd7\\x7c\\x22\\xf3\\\n\\xf9\\x3f\\x32\\x5c\\xf5\\x5a\\xee\\x0a\\xab\\x77\\x0c\\x7f\\xe8\\x12\\xae\\x1a\\\n\\xee\\x1a\\xa3\\x9d\\xc4\\x5d\\x75\\x7f\\xda\\xbe\\xf2\\xee\\x04\\x7f\\x42\\x38\\\n\\x42\\xb8\\x09\\xf1\\xbc\\x65\\x38\\x81\\x7a\\x20\\x71\\x67\\xfa\\x24\\xe8\\x69\\\n\\xb9\\xd7\\xc3\\x7e\\x44\\xdc\\x18\\x63\\x8f\\x3c\\xb5\\x67\\x02\\x67\\x14\\x3a\\\n\\xa2\\xc3\\xfb\\x9f\\x0b\\x61\\x43\\x1f\\xc2\\xde\\x1a\\x0f\\x6c\\x7c\\xe1\\x0c\\\n\\x65\\xe8\\x4d\\x14\\xb0\\xf8\\x0d\\x32\\xdb\\xf5\\xc4\\xc9\\x9e\\xcb\\xbb\\x10\\\n\\xff\\x6d\\xe2\\xe6\\x46\\xd0\\xd1\\xc0\\xfe\\x1b\\x6b\\xb2\\x68\\x8c\\xad\\xd8\\\n\\xa7\\x0b\\x1b\\x7a\\xe2\\xf5\\x6b\\xec\\xd9\\xc2\\xba\\x53\\x0d\\x17\\xe2\\x26\\\n\\x3e\\x3e\\xc4\\x8b\\xf3\\x34\\xd0\\xaf\\x62\\x3d\\x00\\x67\\x45\\x56\\xa7\\xa4\\\n\\x7d\\x14\\xd6\\x2c\\xae\\x10\\xb7\\x66\\x01\\x1b\\x77\\x93\\xf9\\xb4\\xbb\\xab\\\n\\xb3\\x86\\xbd\\x56\\x18\\x4f\\x2d\\xeb\\x13\\xe5\\x0d\\x9b\\x7a\\xe2\\x7d\\x1c\\\n\\x81\\x2c\\xdd\\x22\\x6e\\x4d\\x02\\xfc\\x43\\x27\\x37\\xe3\\xc6\\x7e\\x09\\xec\\\n\\xfb\\x80\\x1e\\x4f\\x69\\xe2\\xf4\\x08\\xf3\\x10\\xa7\\x43\\x26\\xd8\\xf7\\x43\\\n\\xb9\\x9c\\x24\\xee\\xfc\\x62\\xb4\\x15\\xec\\x9b\\x45\\xbd\\xb9\\x7b\\x3e\\x24\\\n\\xea\\x11\\xed\\x66\\xb6\\x95\\xdf\\xab\\x13\\x37\\xef\\xc7\\x9a\\xdf\\x0a\\xde\\\n\\xad\\x23\\x6d\\xc5\\x51\\x40\\x97\\x03\\x7a\\x5d\\xb6\\x78\\x00\\xe8\\x4a\\x1f\\\n\\xe5\\xef\\x85\\xb6\\xb2\\x93\\x4f\\x17\\xd2\\x83\\xb6\\x82\\xb6\\xe7\\xca\\x78\\\n\\xb6\\x9a\\x0f\\xcb\\x16\\xba\\x12\\xd7\\xbe\\x2d\\x81\\xf5\\x56\\xd4\\x87\\xc0\\\n\\xeb\\x08\\x6d\\x45\\x6a\\x9f\\xb3\\x27\\xe2\\x17\\x03\\x71\\x4e\\xe2\\xd3\\x10\\\n\\xc7\\xa7\\x49\\x68\\x2b\\xb6\\xe0\\x6c\\xf9\\xdb\\x83\\x70\\xfe\\xad\\xb8\\xad\\\n\\x20\\x7f\\xd6\\xda\\x8a\\xbd\\xf6\\x87\\x35\\x3d\\xd4\\xb3\\x2b\\xdf\\x98\\xa3\\\n\\x6d\\xc5\\xde\\xf7\\xb7\\xc1\\x85\\xb8\\x2d\\x21\\xd5\\x56\\xc4\\x3a\\x06\\xe8\\\n\\x7f\\x2e\\x53\\xe2\\xbe\\x07\\x6b\\xc9\\x7a\\x92\\x7f\\xad\\x0d\\x6d\\x05\\xed\\\n\\xd4\\x72\\x7f\\x26\\xca\\x04\\x73\\x26\\xec\\xbb\\xc4\\xe9\\x7b\\x19\\x65\\x8e\\\n\\x57\\x81\\x02\\x05\\xde\\x01\\xbe\\x5f\\xe8\\x16\\xbc\\xe4\\x69\\x3f\\x79\\xef\\\n\\x44\\x4d\\xe8\\x39\\x80\\x2f\\x42\\xbf\\xdb\\x9d\\xa7\\x9d\\xfc\\x3b\\x4f\\xda\\\n\\x1a\\x07\\x60\\x33\\x00\\x3a\\x24\\x3a\\x89\\xdf\\xf4\\xfc\\x6f\\x9e\\xb4\\x2b\\\n\\x80\\x33\\x52\\xd0\\xb7\\x4b\\xf5\\xd9\\x7e\\xfc\\x6f\\x7a\\x0f\\xc6\\x0f\\x5d\\\n\\xf1\\x2d\\x36\\x7e\\x87\\xed\\xe3\\x35\\x1e\\x8c\\x7f\\x2e\\x71\\x3a\\xae\\xd6\\\n\\x70\\x9c\\x77\\xe3\\x29\\xd4\\x23\\x6e\\x7c\\x95\\x9a\\x07\\x56\\xe3\\x7f\\xf3\\\n\\xf4\\xd9\\x55\\x28\\x7f\\xf0\\x54\\x5d\\x89\\x3b\\x0f\\x31\\x33\\x7f\\xff\\x98\\\n\\x6c\\xd7\\x8d\\x5c\\x80\\x3e\\x12\\xce\\x47\\x17\\xdb\\xdf\\x79\\xc3\\xbf\\xf3\\\n\\xe6\\x1e\\x4b\\xf0\\x9e\\x0d\\x79\\x92\\xe4\\x43\\x19\\x83\\x3f\\x03\\x5a\\x79\\\n\\x78\\x12\\x33\\xfe\\xc6\\x4c\\x46\\x3f\\x58\\xc3\\x18\\x02\\xb4\\xf1\\xbb\\xed\\\n\\x34\\xa0\\x59\\x6a\\x46\\xbb\\xc2\\x8f\\xd1\\xae\\x34\\xe8\\x34\\x2b\\xa3\\xd4\\\n\\x1a\\x4d\\x9c\\x4a\\xaf\\x65\\x0c\\x06\\x2d\\x63\\x32\\x32\\xb6\\x10\\xa3\\x66\\\n\\x18\\x13\\x1b\\xf8\\xd3\\x5b\\x1c\\x3d\\x7f\\xce\\x11\\xee\\xf1\\x1e\\x14\\xa7\\\n\\x81\\x9c\\x02\\x13\\x4a\\x6c\\x0c\\x11\\xe4\\x14\\x5d\\x9d\\x9f\\xd1\\xc0\\x8e\\\n\\xfa\\x38\\xe2\\xf6\\xb0\\x4a\\x91\\xbb\\x76\\x2c\\x10\\xfe\\xbf\\x2c\\xfd\\x4d\\\n\\x5c\\xbf\\x26\\x10\\xce\\x66\\x43\\x9f\\xfa\\xad\\x03\\x61\\x14\\x25\\x4e\\x36\\\n\\x81\\x6f\\x4f\\xca\\xce\\x16\\xe4\\x2b\\x38\\x07\\xa4\\x2d\\xff\\x0c\\x5b\\x34\\\n\\xd8\\x8f\\xef\\xcc\\x9e\\x9e\\x40\\x32\\xef\\xb7\\x81\\x6d\\xab\\xb1\\x94\\x78\\\n\\x3f\\x73\\x09\\xe2\\x74\\xfb\\x21\\x93\\xdc\\x4f\\xce\\xef\\xb9\\xc1\\x38\\x02\\\n\\xf9\\x25\\x74\\x06\\xc1\\xbf\\xa2\\x2f\\x41\\xfe\\x61\\xc7\\xff\\x6b\\xe2\\x64\\\n\\xf8\\xc8\\x1b\\xce\\x05\\x70\\x76\\x4f\\xcc\\xe7\\x2c\\xdd\\xa1\\xa4\\x63\\x03\\\n\\x64\\xf1\\x98\\x67\\xe3\\xfc\\xb8\\x27\\xfc\\x15\\xf2\\x6b\\x67\\x65\\xd6\\x98\\\n\\x3f\\x4b\\xd9\\x81\\xc2\\xde\\x17\\xc8\\xc2\\x21\\xd3\\x41\\xfa\\x61\\xff\\xe5\\\n\\x10\\xff\\xce\\x5a\\x5d\\x49\\x01\\xe5\\x59\\xcb\\xca\\x6f\\x38\\xa3\\xb5\\xaa\\\n\\xc5\\xbb\\x82\\xc4\\xd5\\xcf\\x25\\x92\\xae\\x2b\\x4b\\x38\\x92\\x7e\\x6b\\x40\\\n\\x1e\\xe6\\xf2\\xee\\x50\\x57\\xc8\\xa3\\xa5\\x34\\x10\\x72\\x2b\\x6b\\xe5\\xef\\\n\\xe8\\xf9\\x2c\\x48\\x0b\\xe4\\x40\\xe2\\xba\\x6a\\x42\\xe6\\xfd\\x45\\x52\\xed\\\n\\x07\\xf3\\x5a\\x57\\xce\\x41\\x10\\xd7\\xd5\\x6a\\xd1\\xfb\\xfc\\xc4\\x9d\\x23\\\n\\x08\\xfd\\x77\\xec\\xfb\\xf3\\x85\\xfd\\xa0\\x0a\\x7c\\x03\\xd5\\x89\\xdb\\x57\\\n\\x81\\xf3\\xe6\\xe4\\xdc\\xbf\\x84\\x36\\x06\\x9e\\x0e\\x67\\x10\\x43\\x06\\x84\\\n\\xb3\\x50\\xb0\\x57\\xb0\\xb2\\x4c\\xe1\\xa3\\x6f\\xc5\\x77\\xfb\\x9e\\xe8\\x1d\\\n\\xda\\x36\\x74\\xae\\xd3\\xca\\x10\\x3e\\xf6\\x46\\x48\\x8d\\x91\\x90\\x35\\x4b\\\n\\x9d\\xf9\\xe1\\x6b\\xe1\\x7b\\xba\\x7c\\xa4\\xea\\x17\\x63\\xb9\\x5c\\xf5\\x2b\\\n\\xa0\\x3a\\x59\\x69\\x9f\\x71\\x2c\\x0b\\x09\\x52\\x67\\x63\\x28\\x64\\x3c\\x43\\\n\\x7a\\x3f\\x86\\xf2\\xfb\\x33\\x54\\x45\\xc5\\x50\\xb5\\xc1\\x5a\\xaa\\x12\\xec\\\n\\x4f\\xf9\\x59\\xae\\x4d\\xcf\\x44\\xd1\\x41\\x86\\xc1\\x3a\\x90\\x05\\x4d\\x22\\\n\\x26\\xce\\x8f\\xa5\\xcf\\x58\\x1a\\xc5\\xd3\\x67\\xdc\\x3b\\xf6\\x37\\xf0\\x61\\\n\\xe8\\x50\\x03\\xc9\\xcc\\x87\\x55\\x77\\xbc\\xe4\\x30\\xe7\\xda\\x60\\x41\\xd6\\\n\\xf6\\x5c\\x43\\xce\\x06\\x7e\\x29\\x40\\xf4\\xae\\x22\\xef\\x07\\xe3\\x04\\xf8\\\n\\x24\\xc8\\xb6\\xad\\x9d\\x63\\x8e\\xba\\xc0\\x98\\x04\\xde\\x1a\\xeb\\x15\\xd8\\\n\\x3f\\x01\\x5e\\x00\\x67\\x87\\xaf\\xe7\\xdf\\xd9\\x1a\\x4f\\xc0\\x5f\\x4d\\xe7\\\n\\xc3\\xc7\\x58\\x07\\x99\\x3e\\xda\\x8e\\x30\\x26\\xd9\\x1a\\x47\\x81\\xcd\\x94\\\n\\x78\\x4c\\x81\\x2c\\x73\\x10\\x9f\\x1f\\xe4\\x0b\\x6d\\x1d\\x3c\\x5b\\x49\\x27\\\n\\xfd\\x8b\\x01\\xbf\\x53\\xf8\\xb0\\x2c\\xcb\\xca\\x32\\xfd\\xbb\\x88\\x93\\x6d\\\n\\x4a\\x01\\xf1\\x80\\x27\\x41\\xde\\x30\\x16\\x0b\\x7b\\x4b\\x50\\x07\\xab\\x58\\\n\\x9a\\x49\\x1c\\x1f\\xe2\\x08\\x50\\xc6\\x15\\x1c\\x74\\x9b\\x1a\\x00\\xf9\\xf3\\\n\\x26\\x96\\x7e\\xe1\\xaf\\x79\\x9c\\xf4\\xbf\\x92\\xcc\\xfc\\x5c\\x20\\xff\\xec\\\n\\x0c\\x36\\xd9\\x79\\xb6\\x07\\xcc\\x87\\x7a\\x10\\xd7\\x27\\xe2\\xea\\xec\\x59\\\n\\x85\\x68\\x3b\\xe0\\xa3\\xb0\\x27\\xac\\x2f\\xff\\x4c\\x26\\x0d\\xdb\\x18\\x59\\\n\\x8a\\x5f\\x15\\x60\\x67\\x40\\x65\\xd8\\xfb\\x72\\xe3\\x89\\xfc\\x8c\\x6c\\xc7\\\n\\x18\\xc3\\xaf\\xf5\\x0b\\xc4\\x7e\\x55\\x0c\\xcb\\xe1\\x31\\x57\\xf9\\x7b\\x96\\\n\\xfe\\x0f\\xc0\\xed\\x38\\xf0\\\n\\x00\\x00\\x52\\xcf\\\n\\x00\\\n\\x02\\x94\\x4f\\x78\\x9c\\xed\\x5d\\x05\\x40\\x14\\xcd\\x17\\x7f\\x70\\x0a\\x36\\\n\\xa8\\xf8\\x89\\xa2\\x82\\xfa\\x17\\x0b\\x03\\x3b\\x50\\xf8\\xec\\xee\\x16\\x15\\\n\\xec\\x44\\x6c\\xb1\\x38\\x2c\\xec\\x0e\\xec\\xee\\x6e\\xec\\x53\\x54\\x54\\x50\\\n\\x3e\\xbb\\x50\\x4e\\x51\\x31\\x01\\x31\\x40\\x45\\xee\\xbf\\xef\\x76\\xd6\\x5b\\\n\\xd6\\xbd\\xde\\xe3\\x4e\\xb8\\x9f\\x3e\\x76\\x76\\x6f\\xe6\\xcd\\x9b\\xd8\\xd9\\\n\\x89\\x37\\x6f\\x00\\x2c\\x20\\x2b\\x20\\x2c\\xc0\\x09\\xbe\\x3b\\x00\\xac\\xa0\\\n\\xdc\\x62\\x31\\x7d\\x5f\\x2a\\x8b\\x05\\x2c\\x2c\\x04\\xe0\\xe5\\x45\\xdf\\xef\\\n\\x5c\\x06\\x70\\xe2\\x7f\\x16\\xd0\\xa4\\x09\\x7d\\x3f\\xab\\x03\\x40\\xaf\\x93\\\n\\x16\\xe0\\xe1\\x41\\xfc\\xd7\\x03\\x88\\xc9\\x69\\x09\\x15\\x2b\\x12\\xff\\x25\\\n\\x00\\x6c\\xda\\x58\\x82\\x93\\x13\\xb9\\xb7\\xa5\\xc2\\x8f\\xb1\\x04\\x7b\\x7b\\\n\\x12\\x9e\\x8a\\xba\\xd7\\x4c\\x4b\\xb0\\xb5\\xa5\\xef\\x07\\x66\\xa2\\xc2\\x2f\\\n\\xb4\\x84\\xd9\\x6d\\x5a\\x35\\xce\\x99\\xad\\x60\\x36\\x4a\\x94\\x9c\\x4d\\x9b\\\n\\x34\\x68\\x87\\xbf\\x22\\x65\\xb1\\xa2\\x2e\\x9e\\x23\\x77\\xf6\\xa7\\x2e\\x59\\\n\\x7d\\x9b\\x74\\x1d\\x05\\x90\\x2b\\x04\\xc9\\x22\\x74\\xf8\\xce\\xbe\\x00\\x0e\\\n\\x7b\\x9a\\x36\\xf8\\xb7\\xc3\\xf8\\xb5\\x1f\\xd7\\x4d\\x9e\\xd7\\xe3\\xb2\\x5f\\\n\\xa0\\xe3\\xe6\\x35\\x7d\\xf7\\xec\\xbd\\xd8\\xa9\\xeb\\x8c\\xe5\\xbe\\xef\\xf6\\\n\\x75\\xb9\\xb6\\xff\\xc3\\x55\\x87\\xe7\\x76\\xbb\\x83\\x2f\\xe6\\x5b\\x20\\xae\\\n\\xd7\\x77\\x47\\x97\\x19\\x59\\x8a\\xad\\xad\\x97\\x79\\x71\\xde\\x93\\xa5\\xff\\\n\\x4d\\x0e\\xc8\\x53\\x76\\xf3\\xe0\\x3c\\xaf\\x42\\x4a\\x54\\x19\\xb3\\x7a\\xeb\\\n\\x98\\x62\\x79\\x0b\\xe4\\x2b\\x93\\xf7\\x79\\x96\\x62\\xed\\x1f\\xe5\\xeb\\xe0\\\n\\x3c\\x63\\xf4\\x6c\\xa7\\x84\\xa9\\x85\\xbd\\x7b\\x6f\\x1d\\x33\\xa4\\x73\\xb5\\\n\\x1e\\x65\\x4e\\x3f\\xea\\xe8\\x23\\x0b\\x1a\\x75\\x64\\xe5\\xe9\\xc4\\x3e\\xfd\\\n\\x6f\\xae\\xad\\x3d\\xea\\xe6\\xf7\\x3a\\xb7\\xf7\\xf4\\x38\\x10\\xb1\\xca\\x6f\\\n\\xc0\\xcd\\x55\\x89\\xe1\\xa1\\xb5\\xe3\\xc4\\x3b\\x8b\\x9f\\xb0\\x68\\x2d\\xfa\\\n\\xbc\\xca\\x6d\\xdd\\xaf\\x96\\x59\\xda\\x7a\\x17\\x94\\xf4\\xdc\\xf8\\xa8\\xfe\\\n\\xb7\\xfe\\x0f\\xb2\\x14\\x2d\\x73\\xa5\\x94\\xef\\xa2\\x67\\xf3\\xcf\\x97\\xb0\\\n\\x3e\\x32\\x64\\x86\\x6d\\x3e\\xef\\x42\\x77\\x6e\\x38\\xde\\x4d\\xea\\x9e\\x50\\\n\\xa5\\xe2\\x3f\\x0d\\xdb\\x17\\x6d\\xd0\\xc6\\x59\\xbc\\xe5\\x61\\xf5\\x94\\x15\\\n\\x85\\x6e\\xc4\\xe6\\xab\\xb7\\x6c\\x59\\x47\\x49\\xa1\\x58\\xca\\x6f\\xc9\\x23\\\n\\x55\\xa6\\xdb\\x96\\x88\\x2e\\x13\\x9e\\xe3\\xfc\\xf0\\xe8\\xe1\\xd7\\x26\\xad\\\n\\x58\\x61\\xbb\\xf9\\x7f\\x91\\x56\\x2e\\x8b\\xce\\x7f\\x3a\\xd1\\xd7\\xa2\\x5c\\\n\\xde\\x6c\\x8b\\xdd\\x72\\x4a\\xe7\\x4e\\x1f\\x92\\xb4\\x6e\\xa4\\x7b\\x37\\x67\\\n\\xbb\\x62\\x4d\\x1b\\x05\\x94\\x2c\\xb5\\xff\\xd3\\x89\\x97\\x23\\x8e\\xb6\\x28\\\n\\xd5\\xa0\\xdd\\xde\\x0b\\xc3\\xb7\\x47\\x75\\x5e\\xd0\\xdf\\x2f\\x5b\\xd1\\x62\\\n\\xa3\\xf2\\x7a\\x3b\\xff\\x9c\\xe4\\x6c\\x3d\\xbc\\x60\\xbd\\xef\\xd3\\x6d\\x7b\\\n\\xd8\\x5b\\x8c\\x5d\\x7a\\x20\\x77\\xc4\\xe2\\xe1\\xab\\x0e\\xae\\x7a\\x5b\\xb1\\\n\\x9d\\x6f\\xd7\\x19\\xb6\\xc3\\xf6\\x5a\\xf4\\xbf\\x1a\\x35\\xbf\\xd7\\xe2\\xa6\\\n\\xcf\\x9e\\x87\\xe4\\x28\\x98\\x27\\x8b\\xab\\xdd\\x71\\x51\\xcc\\xb5\\x07\\x5e\\\n\\x36\\x9f\\xee\\xcf\\x3e\\x73\\xeb\\xc3\\x70\\xbf\\xdb\\x6e\\x1b\\xde\\x3a\\x4f\\\n\\x2f\\x25\\x5e\\xfe\\x72\\xf8\\xd6\\x96\\x13\\xe2\\x92\\x1c\\x8e\\xb6\\xff\\xef\\\n\\x72\\xf0\\xde\\x1c\\x5d\\x7c\\x8a\\x0e\\x8e\\x18\\x7b\\xb1\\xc5\\x97\\x8f\\x47\\\n\\xaf\\x0e\\x19\\x20\\x9e\\xf4\\xba\\xed\\x70\\x8f\\x59\\x91\\x7b\\x2d\\x16\\xd8\\\n\\x6e\\xff\\xd7\\x67\\xc4\\xd5\\x71\\xd9\\xbd\\x73\\xdc\\xcc\\xed\\xb5\\xae\\xf1\\\n\\xc9\\x19\\x3b\\xab\\xf6\\x91\\x94\\xbf\\x18\\xfc\\xf9\\x5c\\xb6\\xbd\\x5f\\xff\\\n\\xf3\\x1e\\x36\\x76\\xf8\\xb3\\xe4\\xfc\\x87\\x0f\\x0f\\x9c\\x78\\xc8\\x56\\x34\\\n\\x10\\xc6\\x59\\xee\\xb8\\x16\\x15\\xbf\\x3a\\x48\\x5a\\xc4\\xef\\xf8\\x97\\x05\\\n\\x79\\x6f\\x9e\\x8e\\x1f\\xdd\\xa9\\xda\\xc9\\x3c\\xd9\\x6f\\xcd\\x70\\x08\\xe8\\\n\\x33\\x7d\\xd0\\xd0\\xec\\x41\\x87\\x26\\xcd\\xba\\x72\\xff\\xea\\xed\\x6c\\xc7\\\n\\x4e\\xbe\\xe9\\xd2\\xa9\\x53\\xd1\\x4c\\x07\\x57\\x25\\x0f\\xf9\\xf1\\xb1\\x92\\\n\\xf5\\xd0\\x32\\x1e\\x11\\x2d\\x5f\\x8e\\x2b\\x38\\x78\\xe5\\xaa\\xbd\\x1f\\xea\\\n\\xdd\\x5d\\x60\\xe5\\x9b\\xdd\\xdb\\x61\\x4a\\xde\\x23\\x99\\x3a\\xf7\\xb5\\xdb\\\n\\x90\\xf5\\xe2\\xf0\\x1a\\xab\\x2f\\x0c\\xad\\x7a\\xff\\x3f\\x8f\\x0e\\xeb\\x5d\\\n\\xa5\\x3e\\x17\\x5b\\xec\\x3f\\x16\\x76\\x70\\x9d\\x6f\\xbd\\x72\\xcd\\x8f\\x87\\\n\\x35\\x6d\\xf1\\x74\\xe0\\xe1\\x36\\x1d\\x16\\x94\\xad\\x58\\xf7\\xb3\\x5f\\x9d\\\n\\xa4\\x53\\xd7\\x46\\x49\\xde\\x3d\\xcf\\xf7\\xaa\\xfa\\x5e\\xe7\\xf0\\x3c\\xfd\\\n\\xaa\\xf7\\x39\\x6e\\xdd\\x7e\\x40\\xbd\\x65\\x2b\\x9a\\xbb\\xf6\\x3a\\x9a\\x3f\\\n\\x6b\\x54\\x93\\x6e\\x39\\x5f\\xd5\\x7d\\x31\\x76\\x9d\\xc3\\xaa\\x5c\\x0d\\xed\\\n\\x8f\\x3b\\x6f\\x8f\\x8d\\xbd\\x7c\\x77\\x9b\\xed\\xb5\\xcf\\x45\\xa4\\x63\\xc3\\\n\\x13\\xba\\x5f\\x5d\\xe4\\xb9\\x6e\\xa4\\x6d\\x50\\xc1\\x76\\xab\\x86\\x06\\x6d\\\n\\x4d\\xf2\\xfa\\x5f\\x6b\\x51\\xed\\x45\\xae\\xb6\\xb3\\x0f\\xe5\\xfa\\x9c\\x6f\\\n\\xf4\\xec\\xd3\\x71\\x65\\x77\\x04\\x74\\x0f\\x6c\\xef\\x52\\xc1\\xc7\\xf9\\x43\\\n\\xb3\\x7f\\x2b\\xd4\\x9c\\xba\\xeb\\x73\\x18\\x75\\x5b\\x74\\x45\\x97\\x19\\xab\\\n\\x8e\\x3d\\x0b\\xf3\\xed\\xf9\\xcd\\x79\\xfb\\xdc\\x5f\\xf9\\xae\\xbb\\xfe\\x5b\\\n\\x6d\\xe6\\xec\\xe6\\x5d\\xee\\x1e\\xdc\\xb8\\xa6\\x6d\\x64\\xe0\\x88\\x4a\\xed\\\n\\xb2\\x8c\\xca\\xbd\\x6c\\x6e\\xc0\\x1e\\xd7\\x3e\\xdf\\x7f\\xe5\\x38\\x70\\xe1\\\n\\x44\\x58\\xdd\\xdb\\xef\\x62\\x9f\\x54\\x6a\\x1a\\xf4\\x74\\x46\\x5d\\x2b\\x6f\\\n\\xf7\\xed\\x81\\xbe\\x55\\x5f\\x17\\x98\\x53\\xc4\\xd3\\xae\\x7b\\x40\\x83\\x60\\\n\\xfb\\x3b\\x57\\xb7\\x8b\\x07\\x85\\xe7\\x48\\xac\\xf2\\xba\\xc4\\x82\\xcb\\xde\\\n\\xd2\\x22\\xd2\\xef\\xb3\\x6a\\x4d\\xf7\\xaa\\xb3\\x3d\\xf1\\xb0\\xeb\\xe6\\x5c\\\n\\x07\\xfa\\xbc\\xfb\\x54\\x23\\xbe\\x9d\\x73\\x68\\x40\\xf5\\x62\\xef\\x96\\x65\\\n\\x1a\\x53\\x11\\xe2\\x2e\\x8c\\x6e\\xde\\xd9\\xab\\x50\\x57\\xe7\\xc3\\x51\\x25\\\n\\x9f\\xf4\\x75\\x5b\\x30\\xb8\\x87\\x5f\\x8e\\xf1\\xd0\\x07\\x76\\x5f\\x9a\\x10\\\n\\xde\\xf9\\x51\\xbf\\xce\\xbd\\x6f\\xad\\x0d\\xb1\\x9f\\x9a\\xd7\\xbe\\xf8\\xa7\\\n\\x5a\\xbe\\xbb\\x3f\\xc6\\x14\\x90\\x9e\\xef\\x53\\xba\\x7a\\x8e\\x39\\xd5\\xa0\\\n\\x4f\\xd0\\xaa\\x27\\xfb\\x5c\\x3e\\x36\\xa9\\xbd\\xf8\\x97\\x9b\\xe8\\xcc\\xa3\\\n\\x57\\xe3\\xc4\\x0d\\xc3\\xeb\\xbf\\x09\\xed\\xbb\\xd0\\x7f\\x61\\xef\\x82\\xa3\\\n\\xdf\\x0f\\xe8\\x3a\\x3e\\x47\\x92\\x65\\x7c\\xbd\\xa1\\x0d\\xb3\\xf5\\x2f\\x78\\\n\\xe4\\x84\\x53\\x89\\xfa\\x15\\x67\\x8d\\x2a\\x6c\\xf9\\xfa\\x97\\xe7\\xd0\\xd3\\\n\\xaf\\xed\\x7c\\x37\\xb5\\x2e\\xb8\\xb4\\xb0\\xac\\x48\\x9f\\x41\\xad\\x76\\xfc\\\n\\xea\\xb1\\x2e\\xfc\\xf6\\xba\\xcc\\x45\\xae\\x4c\\xca\\xf1\\x6c\\xeb\\xf4\\x16\\\n\\x79\\x7c\\x46\\x35\\xef\\xf8\\xca\\xa5\\xff\\x9e\\xa1\\x05\\x42\\x93\\xfc\\x56\\\n\\x5d\\xca\\x91\\xf3\\x66\\x1e\\x59\\xcd\\xad\\x2e\\xa1\\xb3\\x6a\\xdb\\x7d\\xdd\\\n\\x1c\\xf0\\xa9\\xcd\\xdc\\x1e\\x7e\\xbb\\xae\\xcf\\x95\\xf4\\x28\\xb5\\xba\\x7c\\\n\\x50\\xad\\xe0\\x69\\xf1\\x3f\\x8b\\xed\\xfe\\x5f\\x44\\xdb\\xc3\\x67\\xf3\\xac\\\n\\x99\\xdd\\x6b\\xd0\\xae\\x6b\\x85\\x5e\\x0f\\x71\\x5f\\xb7\\xa5\\xe7\\x9e\\x9b\\\n\\x55\\xb6\\x2f\\x68\\x95\\x47\\xe6\\xb7\\xcd\\x79\\xdb\\xe3\\x9a\\xab\\xaa\\xf7\\\n\\x9c\\xdc\\xb1\\x6f\\x91\\x23\\x76\\xc7\\x67\\x2f\\xe9\\x1a\\x7f\\xb5\\x4a\\xc5\\\n\\x31\\xc7\\x57\\xd6\\x08\\x5c\\xbf\\xb5\\x94\\xcd\\xeb\\xdd\\xb7\\x8a\\xd8\\x7d\\\n\\x6d\\x77\\xff\\xe4\\x90\\x89\\x85\\x6a\\x40\\x72\\x96\\xca\\x4b\\xcf\\x3f\\x4c\\\n\\x1c\\x7c\\x6b\\x7e\\x43\\xe9\\xae\\x16\\x05\\x83\\x4a\\x5c\\x7a\\x1f\\xe0\\xb0\\\n\\x33\\x66\\x52\\x56\\xbb\\xd1\\x45\\xb6\\x9c\\x6b\\xf6\\xbd\\x66\\xe0\\xa0\\x37\\\n\\x11\\x96\\xee\\x97\\xc2\\x9f\\xcd\\xf1\\x3d\\xea\\x30\\x2d\\xc2\\x6b\\x52\\x95\\\n\\x6a\\xa2\\xce\\xbd\\x73\\xd4\\x2f\\x70\\xa6\\xf8\\xd2\\x86\\x56\\x92\\x75\\xed\\\n\\x25\\x95\\x57\\x25\\x97\\xbd\\xd7\\xeb\\x78\\xf3\\xf9\\x5d\\x9f\\x0d\\xee\\xbb\\\n\\x23\\x60\\x8f\\x38\\xe7\\x2a\\xbb\\x02\\xb6\\xdb\\x46\\x5e\\x85\\x2f\\x03\\xfe\\\n\\x89\\xae\\xfa\\xcd\\x25\\x7e\\xe4\\xb7\\xcf\\x2d\\x3a\\xcc\\x6f\\x50\\xb2\\x42\\\n\\xdf\\x04\\x8f\\x6f\\x71\\x23\\x5a\\xc4\\x79\\xe5\\xbc\\xf2\\x7d\\xe0\\xea\\x1f\\\n\\xb9\\x1c\\xac\\x8a\\x89\\xbc\\x0a\\xd5\\xea\\xef\\xda\\x27\\x31\\x5a\\x52\\xa1\\\n\\x4b\\x42\\xae\\xb2\\xdb\\x44\\x8d\\x6e\\xd4\\x9c\\xb6\\x6a\\x5a\\xcd\\xff\\xbe\\\n\\x9d\\x68\\xbb\\xc2\\xf3\\x6c\\x85\\xb0\\x29\\xad\\x7a\\xcf\\xcc\\x5b\\x76\\xe6\\\n\\xde\\x5e\\xed\\xb6\\x7a\\x41\\x79\\x5b\\x9f\\xdb\\x07\\x5f\\xad\\xbb\\x97\\xf0\\\n\\xf0\\x94\\xf8\\xed\\xe1\\xf3\\xb3\\xfd\\x5c\\x7b\\x86\\xa5\\x3c\\x1d\\xf9\\xb9\\\n\\xd0\\xcb\\x61\\xa5\\x76\\x5f\\x58\\xe3\\xf2\\xd5\\xee\\xd4\\xad\\x91\\x79\\x1d\\\n\\x23\\xa6\\xec\\x0f\\x9f\\xb2\\xe0\\xe8\\xaf\\xa1\\x7e\\xb1\\xc7\\x52\\xfe\\x99\\\n\\xba\\x28\\xee\\x5c\\xfe\\xd2\\xf6\\xe2\\xa8\\x77\\x49\\xe3\\xf6\\x5c\\xb4\\xbe\\\n\\x35\\x38\\xb2\\xde\\xcb\\x6d\\xc7\\x6c\\x24\\x2b\\x9b\\x86\\xbd\\x3f\\x75\\xf6\\\n\\xc8\\x8d\\x42\\xdf\\x5f\\x3b\\x67\\x16\\xfd\\x37\\xbb\\xe0\\xb1\\x52\\x0e\\x25\\\n\\x7b\\x97\\x95\\x86\\x3d\\xe9\\x5d\\xd6\\x69\\xfa\\xac\\xc0\\x1c\\x62\\xdb\\xaa\\\n\\x8d\\xac\\x3c\\x66\\x15\\x2c\\x2e\\x72\\x6a\\x30\\x7f\\xb1\\x85\\xed\\xe6\\x2b\\\n\\x57\\x21\\x4b\\xdb\\x3e\\x7d\\x61\\xfa\\x4e\\xd7\\x4a\\x50\\xef\\xae\\x7d\\x01\\\n\\x28\\x3a\\x78\\x9e\\x50\\xde\\x82\\xec\\x6c\\xac\\x72\\x5f\\xae\\x6c\\x15\\x39\\\n\\xb5\\xa6\\x5b\\x5e\\xa9\\x9f\\xd4\\x3a\\x28\\xfa\\xee\\xf4\\xab\\x37\\x8a\\x84\\\n\\x2f\\x6e\\x5c\\xad\\xd8\\xcc\\xb0\\xf9\\x92\\xae\\x2b\\xdc\\x03\\x8f\\x48\\x5e\\\n\\xcf\\x9a\\x70\\x2f\\xdf\\x93\\xb1\\x87\\x77\\xcc\\x0a\\xaf\\x9a\\x69\\x67\\xfe\\\n\\x35\\xe2\\x40\\xd7\\x3a\\xe2\\x56\\x57\\xc4\\x8d\\x03\\xf6\\x04\\xee\\x5e\\x3c\\\n\\x6b\\x4e\\x0e\\x8f\\xb3\\x0f\\x5b\\xca\\xbc\\x7b\\x89\\x92\\xee\\x2f\\x1a\\x9d\\\n\\x3b\\xab\\x93\\xa8\\x8d\\xe3\\x7d\\xcb\\xf6\\xff\\x3c\\x68\\xd9\\xef\\xc1\\x9c\\\n\\x82\\x78\\x37\\xb4\\xe0\\xf9\\x88\\x63\\x9b\\x2f\\x0d\\xcc\\xb7\\x31\\x72\\xef\\\n\\x85\\xf0\\x97\\xbd\\x60\\x7d\\xe6\\x9e\\xef\\x47\\xde\\xc8\\xe2\\x9b\\xd3\\x77\\\n\\x65\\xfd\\x53\\xe3\\xbc\\x9d\\xd7\\x4f\\x59\\xbb\\xed\\xe9\\xb5\\x32\\xd2\\xeb\\\n\\x1f\\x12\\xbb\\x4a\\x4b\\xe6\\x1a\\x34\\xb7\\xe0\\xc6\\x8e\\xe2\\xde\\x5d\\xad\\\n\\xc3\\x0f\\x9e\\x29\\x9f\\x28\\xca\\xfb\\xa8\\xea\\x4a\\x38\\x2d\\xbe\\xd3\\x63\\\n\\xff\\x91\\xe5\\x77\\xba\\x16\\x5c\\xd9\\x77\\x50\\x2b\\x08\\x3c\\xe5\\x59\\x7d\\\n\\xe9\\xdb\\xff\\x45\\xce\\x3e\\x95\\xad\\x8d\\x5d\\x25\\xb8\\xec\\x9a\\x33\\xfc\\\n\\xce\\xe9\\xba\\x31\\xe2\\xe1\\x10\\xf3\\xd3\\x33\\xba\\x4c\\xcc\\x91\\x2a\\x31\\\n\\x3f\\x3c\\x2b\\x2f\\x9c\\x27\\xb6\\xa9\\x04\\x17\\x67\\xfb\\xf4\\x4a\\xe9\\xd0\\\n\\x77\\xbb\\x64\\x64\\xe7\\xe5\\x3b\\xad\\x3c\\x96\\x8a\\x5f\\xf5\\xae\\xb3\\xdd\\\n\\x7a\\x51\\x99\\x3b\\x2e\\x7e\\xf9\\xe7\\xe4\\xa1\\x04\\x2c\\x7f\\xfd\\xa0\\x5b\\\n\\x67\\xab\\xc2\\x0d\\x67\\xd2\\x39\\xb6\\xd1\\xd3\\xcd\\xa1\\xbb\\x45\\xf6\\xf5\\\n\\xb3\\xf7\\x89\\x0f\\x36\\xa6\\xee\\xc2\\x2d\\x03\\xfb\\x94\\xbd\\x15\\x58\\x32\\\n\\x20\\xfa\\xd0\\x72\\xdb\\x6f\\x57\\x61\\xd9\\xc2\\x85\\xa2\\x1d\\xbd\\xcb\\xde\\\n\\x9a\\xd1\\x5e\\x42\\x15\\x5e\\xd1\\xc8\\x45\\x25\\xbd\\xbe\\x8f\\x2f\\x7c\\x64\\\n\\x48\\x5c\\xfb\\xf5\\x89\\x1b\\x2c\\x72\\x41\\x05\\xd1\\xf9\\xeb\\x29\\xdf\\xc6\\\n\\x86\\xbf\\x7c\\x7a\\x4c\\x12\\x3c\\xe0\\xd4\\xc2\\x25\\xdb\\xbd\\xf3\\xe4\\x5e\\\n\\xe4\\xe8\\x31\\xa2\\x85\\x34\\xe6\\xe5\\x28\\xbb\\x87\\xd7\\xa5\\x4f\\xc5\\xdd\\\n\\x8f\\x0c\\x99\\xbc\\x76\\x86\\xf3\\x8a\\x92\\xa5\\xad\\x9c\\x1a\\x3b\\x3d\\xbf\\\n\\x54\\x3e\\xd2\\x21\\xa6\\xba\\xeb\\x44\\xcb\\xa1\\x05\\x2c\\x8a\\x7c\\xb9\\x3a\\\n\\xa0\\xf3\\xfe\\x25\\xf7\\xf2\\x16\\x00\\xef\\x1b\\x59\\x62\\xcf\\xfd\\xea\\x15\\\n\\xb6\\x38\\xea\\xd7\\x02\\xbf\\x75\\x8d\\x42\\x9a\\x75\\xa6\\xca\\xae\\xea\\x9a\\\n\\x11\\xb2\\x84\\x98\\xcb\\xc7\\x4a\\x6e\\x3c\\xd8\\xdb\\xe7\\x2a\\xcc\\x0a\\xd8\\\n\\x7b\\xa1\\xca\\xde\\x92\\x87\\x0e\\x3c\\xd8\\x12\\x3c\\xe6\\xe7\\x44\\x57\\xcb\\\n\\x42\\xa3\\xae\\x26\\x5e\\x6b\\xf1\\xa0\\xaa\\x45\\xc2\\x7e\\x51\\x25\\xd8\\x5c\\\n\\xb2\\x73\\xf4\\xfd\\xa4\\xc7\\xfd\\x9a\\x7b\\xd4\\xf1\\xf9\\x76\\xf7\\xb9\\xbd\\\n\\x6f\\x47\\x8f\\x3a\\xbb\\x67\\xe5\\x10\\xbf\\xb9\\xde\\xdf\\xcb\\xe2\\xfc\\xcc\\\n\\xfc\\x13\\x5c\\x9e\\x49\\xdc\\xf7\\x4b\\x2c\\x0b\\xfe\\xf3\\xa5\\xf8\\x6e\\x8b\\\n\\x45\\xc5\\xdb\\xac\\x9e\\x67\\x11\\x15\\x72\\x3e\\xb7\\x23\\xfc\\x33\\x6d\\x50\\\n\\x9f\\xdb\\x13\\xae\\x7f\\x7e\\x66\\xb5\\xdd\\xe5\\x69\\xb1\\xdc\\x73\\xaf\\x5e\\\n\\x85\\xad\\xd7\\xca\\xbd\\x1c\\x52\\xf1\\xc8\\x26\\xbb\\x41\\xd1\\x03\\x6a\\xc6\\\n\\x0e\\x2b\\xdc\\xa0\\x58\\x9e\\xfa\\x56\\x4e\\x2d\\x13\\x62\\x77\\xc9\\xee\\x49\\\n\\x9b\\xcf\\x5c\\xbf\\xfd\\x45\\xa6\\xff\\xcd\\xa2\\x33\\xd1\\xa9\\xe5\\xfa\\x08\\\n\\x3f\\x59\\xed\\xa9\\x03\\x73\\x57\\xbb\\x71\\xa6\\x5f\\x9e\\xcc\\x4e\\xa2\\x45\\\n\\xce\\x7e\\x36\\xef\\x5c\\x8a\\x95\\x69\\xbd\\x5e\\xbc\\x21\\xa6\\x62\\xbf\\x3c\\\n\\xb3\\x8b\\x52\\x8f\\x62\\x2a\\x76\\x1f\\x32\\x79\\x40\\xc2\\x81\\x12\\xc9\\x95\\\n\\xa4\\xce\\x11\\x13\\xf3\\xbb\\xf6\\xbb\\x75\\x2d\\x24\\x6b\\x31\\xd1\\xa2\\xf2\\\n\\x0b\\x2d\\x1e\\x3c\\xcf\\xef\\xd5\\x67\\xed\\xc1\\x21\\x71\\xd5\\x5f\\x9c\\x68\\\n\\x39\\xfe\\x9f\\xa4\\x8a\\xdb\\x5d\\x36\\x37\\xba\\x9a\\xbb\\x94\\xcb\\x10\\xd7\\\n\\xf5\\x93\\xfb\\x8d\\xc8\\xfc\\x6c\\xea\\xd4\\x69\\x8f\\x8b\\xb5\\xf6\\xf0\\xbe\\\n\\xf1\\x4f\\xe4\\x99\\xf8\\xde\\x43\\xad\\xb2\\xbd\\x9d\\xea\\x69\\x8d\\x39\\x54\\\n\\xf7\\x49\\xc0\\xf9\\xd5\\xc5\\xcf\\x57\\xa8\\xf9\\x7a\\xdb\\x47\\x49\\x6c\\x83\\\n\\xaa\\xb0\\x5a\\x54\\x2a\\x7f\\x7e\\x71\\x60\\xa1\\xb8\\x93\\x0e\\x32\\xb1\\x53\\\n\\x62\\xad\\xd7\\x5f\\x6d\\xbd\\x7b\\x2c\\x6a\\xd8\\xb4\\xad\\xcd\\xc6\\x1a\\x93\\\n\\xea\\x4f\\x2d\\x2c\\xf2\\xe9\\xed\\xdb\\xe4\\xe0\\x9a\\xf8\\x27\\x01\\x3b\\x17\\\n\\x79\\x4d\\x69\\xf0\\xd1\\x62\\xe7\\xe9\\x4e\\x75\\x5b\\x59\\x44\\x59\\xd4\\xfd\\\n\\x38\\x3e\\xca\\x2e\\xbe\\xa2\\x73\\xa9\\x37\\xed\\xed\\xa3\\x52\\x64\\x61\\x29\\\n\\x71\\xeb\\x82\\xc6\\xa4\\xb4\\x4c\\xb2\\xce\\xfc\\xab\\x5a\\xb6\\x6c\\x65\\x2a\\\n\\xdd\\x15\\x95\\x5a\\x10\\x65\\x31\\x65\\xf6\\xcf\\xfc\\xa7\\x06\\xae\\xaa\\x5f\\\n\\x07\\x1c\\xab\\x58\\x3b\\xad\\x4d\\x6a\\x2c\\x9d\\x7c\\x68\\xf9\\x9b\\x8b\\x99\\\n\\x0e\\xd6\\x3e\\x9e\\xe7\\x62\\xce\\x02\\xe2\\x91\\x9f\\xa6\\xb4\\x58\\xb6\\xb1\\\n\\xc3\\x23\\xcb\\x16\\x57\\x3a\\xd5\\x7b\\x58\\x9c\\xaa\\x71\\x75\\xed\\xa9\\x1a\\\n\\xb6\\x7f\\x1e\\xa9\\x61\\xcb\\xbc\\x6f\\x57\\x9b\\x9e\\xb8\\xc9\\x3e\\x4f\\x25\\\n\\x78\\xf5\\x22\\xe6\\x50\\xbe\\x83\\x92\\xfe\\x4f\\xe2\\x42\\x5d\\x77\\x64\\x91\\\n\\x0d\\x77\\x8e\\xe8\\xeb\\x9f\\x37\\xdf\\xbf\\x7b\\xe0\\xf2\\xa7\\x62\\x9f\\x06\\\n\\x24\\x4f\\xbc\\x16\\x0e\\x4f\\xa3\\xac\\x3e\\x7c\\x1c\\x25\\xeb\\xf9\\x2e\\xb1\\\n\\xed\\x1c\\x52\\xfd\\x3f\\x59\\x48\\xfd\\xdf\\xf4\\xd8\\x70\\x3e\\x53\\x8a\\x95\\\n\\xfb\\x80\\x4d\\x3d\\x47\\x16\\x19\\x0f\\x47\\xee\\x3e\\x78\\xbf\\xda\\xcf\\x6b\\\n\\x82\\x38\\xb6\\xd7\\xc1\\xab\\x43\\x76\\x74\\xde\\xb7\\x2c\\x7f\\x01\\x78\\x1e\\\n\\x5e\\xe5\\xca\\xe2\\x1d\\x47\\xca\\x6f\\xb8\\x98\\x94\\x55\\xdc\\x75\\xc5\\x93\\\n\\x19\\xfe\\x35\\xe2\\xfa\\x8f\\x8d\\x2b\\xbf\\xe2\\x7e\\x62\\x67\\xb0\\x3e\\xed\\\n\\x59\\x3d\\x44\\x7a\\x45\\xe6\\x33\\x6f\\xb1\\xfd\\xb2\\x18\\x07\\xc9\\xe9\\x42\\\n\\xef\\xb7\\x84\\x53\\x2d\\xc6\\xf0\\xfd\\x99\\x62\\x25\\x99\\x22\\xc7\\xfb\\x2f\\\n\\x1c\\x52\\x30\\x78\\x78\\x09\\x9f\\x61\\x6f\\x3f\\x56\\x7d\\x5b\\x23\\xf3\\xd0\\\n\\xb0\\x4b\\xd5\\x1e\\xc6\\x38\\x07\\x26\\x57\\xef\\xb6\\xbd\\x6b\\xe6\\xcd\\x05\\\n\\xc5\\x95\\xc2\\xcb\\xcc\\x7d\\xe6\\xb6\\xa6\\xa9\\xfb\\x3f\\x5d\\xb3\\x5d\\x1d\\\n\\x31\\xbf\\xdf\\xa9\\xa8\\xcd\\xfe\\xb6\\x0b\\xa3\\x83\\xad\\xcb\\x8c\\xc8\\x3a\\\n\\x2a\\xf6\\xfd\\x02\\x97\\x42\\xbb\\x9e\\x4c\\x6f\\xbe\\x6e\\xc4\\xa0\\x83\\x75\\\n\\xdb\\xce\\x6a\\x90\\x75\\xb1\\xc5\\x4e\\x9b\\x0a\\xde\\x0f\\x0e\\x2e\\x1c\\x40\\\n\\x37\\x13\\x15\\xea\\x36\\x95\\xfd\\xfa\\x31\\x57\\xb2\\xc1\\xfa\\xe6\\xa8\\x4c\\\n\\xa3\\x3c\\xde\\x34\\x2e\\x14\\xfb\\xbd\\xc9\\xd8\\x85\\x6b\\xe7\\x34\\x9b\\xe3\\\n\\x6c\\x71\\xa7\\x5f\\x76\\xdf\\x15\\xaf\\x22\\x9e\\xbb\\x84\\x85\\xf8\\xf5\\xc8\\\n\\x19\\x19\\xf8\\xe8\\xe5\\xa8\\xea\\x07\\x6f\\x57\\x5a\\xe8\\x2a\\x1d\\x2b\\xb5\\\n\\xfd\\xbe\\xa2\\x78\\xc4\\x80\\x41\\x91\\x0b\\x7e\\x15\\xba\\xb8\\xba\\xc5\\x83\\\n\\xa7\\xab\\x62\\x3b\\x77\\x79\\x96\\x3f\\xfb\\x3e\\xcb\\x59\\x9b\\x2a\\x5b\\x0d\\\n\\x0d\\x75\\xdb\\x51\\xe7\\x51\\xdc\\xc7\\x9c\\x43\\xa7\\xc6\\x86\\x4d\\xce\\x1e\\\n\\xd4\\xef\\x42\\xcf\\xa5\\xa1\\xef\\xc5\\x93\\xa7\\x7f\\xfd\\x77\\x60\\x75\\xab\\\n\\x89\\x6f\\x27\\xd7\\xfd\\xb7\\xf8\\x9d\\x7d\\x4f\\x66\\x5f\\x6f\\xbd\\x28\\xb6\\\n\\x53\\xbf\\x02\\xb0\\xd8\\xae\\x78\\x8e\\x6f\\xd5\\x26\\x4d\\x3f\\x51\\x30\\xa0\\\n\\xa3\\x24\\xc5\\x22\\x71\\xfa\\xb2\\x5f\\x5d\\xd7\\x97\\x2b\\xb8\\xaa\\xd5\\xaf\\\n\\xd8\\x55\\x45\\x6f\\x14\\x9d\\x91\\x43\\xdc\\x64\\xce\\xe9\\x43\\x13\\x7d\\x16\\\n\\x7a\\x4d\\xc8\\xd9\\x6b\\xeb\\xcf\\xce\\x27\\x06\\x76\\xbd\\x9a\\x50\\xa4\\x8f\\\n\\x2f\\xd5\\x71\\x5c\\x20\\xfe\\x6a\\x97\\x0d\\x39\\x44\\x78\\xcb\\x3e\\x94\\xaf\\\n\\xe1\\xd9\\x7d\\x59\\xf0\\x1b\\xdf\\xff\\x79\\xd5\\x99\\x51\\x6c\\xb7\\xc5\\x7f\\\n\\x65\\xc4\\x6f\\xfa\\x1e\\x0b\\x39\\x16\\xe7\\xd2\\x22\\xfb\\x44\\xcf\\xd1\\x41\\\n\\x2e\\xcd\\x66\\x1f\\x2e\\x26\\x72\\xaa\\xb5\\x6b\\xa4\\x57\\x44\\xf5\\x3e\\x65\\\n\\x17\\x15\\xa4\\xde\\xd4\\xa5\\xff\\xee\\xbf\\xdc\\xef\\xf5\\xaa\\x87\\xd9\\xb6\\\n\\x52\\x0d\\xd1\\x9b\\x97\\x43\\x3a\\x7c\\xf6\\x5d\\xd8\\x50\\x1a\\x76\\x68\\x79\\\n\\x93\\x9c\\xc3\\xac\\xf2\\xac\\x3b\\x03\\x91\\x99\\x27\\x9d\\x90\\xb8\\xf5\\x0f\\\n\\x90\\xf5\\x1d\\xd4\\x35\\xd6\\xd2\\x37\\xab\\xcf\\x67\\x9b\\xf2\\x2e\\x96\\x8e\\\n\\x61\\x09\\xf9\\xea\\x7b\\xec\\x81\\x57\\x03\\xac\\x9f\\xf7\\x7f\\xb7\\xd0\\xdb\\\n\\x72\\xf2\\x50\\xaf\\xf8\\x6b\\x0d\\x1c\\xa8\\x16\\xa6\\x55\\xc9\\x77\\xce\\xd9\\\n\\x25\\xf7\\xdd\\xf2\\xb5\\xad\\xd8\\xb6\\xb3\\xc5\\x9c\\x7a\\x56\\x1b\\x0b\\x4e\\\n\\x5a\\x3f\\x69\\x7e\\x9c\\xed\\xf7\\x6f\\xdf\\x86\\x5f\\xbf\\x7d\\x75\\x4b\\xc8\\\n\\xba\\x9a\\x09\\x8e\\x56\\xdd\\xac\\xf6\\x16\\xcd\\x2b\\x19\\xe0\\xba\\x7f\\xdf\\\n\\xc4\\x23\\x51\\xed\\x47\\x77\\xfc\\x55\\x27\\xe2\\x67\\x2b\\x78\\x60\\xe1\\x9f\\\n\\xa9\\xd0\\xcd\\xc5\\xb2\\xf6\\x5d\\x0b\\x3e\\xe8\\x37\\xe8\\xc7\\x41\\xd7\\xc6\\\n\\x29\\x17\\xf3\\x7e\\x85\\x09\\x47\\x72\\xd6\\x08\\x4d\\x98\\x50\\x63\\xe5\\xaf\\\n\\x5e\\x65\\x3c\\xa7\\x45\\xe5\\x1f\\xe7\\x58\\xb1\\x9b\\xb8\\xee\\x96\\xae\\x8f\\\n\\xeb\\xd6\\xda\\x36\\x29\\x68\\xce\\x4c\\xa8\\xfa\\xa2\\x9b\\xd5\\x83\\xd0\\x63\\\n\\xb7\\x8e\\x76\\xdf\\x1c\\x10\\x65\\x3f\\xe9\\x81\\xed\\xe8\\x9f\\xa7\\x02\\x7b\\\n\\x36\\x6e\\x3a\\xee\\x62\\x77\\xab\\x8d\\x8d\\xce\\x5c\\x94\\xfe\\x18\\x5f\\x62\\\n\\xf5\\xd8\\xe6\\x91\\xd3\\x27\\x16\\xff\\xf9\\xc3\\xf6\\xeb\\xcf\\xdd\\x81\\x53\\\n\\xaa\\xe7\\x6a\\xeb\\x9e\\xbf\\x2f\\x0c\\xbe\\x58\\xe5\\xdb\\x98\\x84\\x80\\x26\\\n\\xb5\\x8e\\x07\\x5d\\xe8\\xf9\\xc0\\x79\\x44\\xae\\xcc\\x4f\\x3f\\xee\\x8c\\xde\\\n\\x58\\x39\\x7b\\xef\\xdc\\xf7\\x60\\x60\\x1e\\xdf\\xf1\\xc9\\xfb\\x43\\x8e\\x2d\\\n\\x6d\\x58\\xda\\xfb\\x82\\x95\\x55\\x60\\x92\\x4f\\x8c\\x9f\\xf4\\x4e\\xe6\\xb7\\\n\\xb7\\x17\\xb6\\xee\\x33\\xe9\\x9f\\xa1\\xab\\xae\\x2c\\x6b\\x79\\x74\\xf1\\xbb\\\n\\xe0\\x9d\\x2e\\x7b\\x2f\\x4c\\xbf\\x7c\\x4e\\x3c\\x62\\xd3\\xe4\\x7d\\x61\\x55\\\n\\x8b\\x07\\x65\\x3d\\xf6\\xa4\\xf0\\xed\\xb3\\x85\\x93\\xaa\\xc6\\x47\\xbb\\x7c\\\n\\x6c\\xd5\\xe9\\xd0\\xe8\\x2c\\x31\\xcd\\x25\\xad\\x0b\\xdf\\x2e\\x72\\x69\\x58\\\n\\xae\\x07\\xe5\\x7b\\xd7\\x5b\\x12\\x1a\\x5f\\xc8\\xf3\\x52\\xa1\\x92\\xd5\\xa6\\\n\\xfd\\x9a\\x38\\xc9\\x61\\xa4\\x75\\x91\\x6c\\x1d\\x1d\\x2d\\xf7\\x6e\\x99\\x58\\\n\\xdd\\xcf\\xbd\\x79\\x98\\xdf\\x4a\\xdb\\x58\\xaf\\x05\\xcd\\x0f\\x57\\xe9\\xfc\\\n\\xdf\\xe4\\x1e\\x93\\x66\\x3e\\x5b\\x3c\\xd2\\xd3\\xfe\\x42\\x6c\\xfc\\x82\\x15\\\n\\x6e\\xf6\\x4e\\x11\\x67\\xdc\\x66\\x9d\\x3d\\x37\\xa0\\x69\\xdc\\x96\\x1d\\x35\\\n\\xc5\\x4b\\x5c\\x5b\\xca\\x1a\\x55\\xb2\\x9e\\x34\\x2d\\xbe\\xf1\\xa8\\xc9\\xd3\\\n\\x2e\\x34\\x1e\\xf5\\xaa\\xaa\\xa5\\x43\\xe1\\x31\\xcd\\x2e\\x8c\\xf3\\xb6\\x3c\\\n\\x71\\xea\\x99\\x7d\\xc3\\xb0\\x67\\xd4\\x77\\x23\\xc7\\x83\\xac\\x87\\xbd\\x9b\\\n\\x3d\\x9b\\xbd\\x7f\\x5d\\x2e\\xbf\\x8f\\x37\\x56\\x75\\x6e\\xf2\\xa3\\x70\\x8d\\\n\\xc7\\xa5\\x6b\\x17\\x7f\\xfb\\x70\\xae\\xfc\\xbb\\xe4\\xb3\\x37\\x74\\xd8\\xd4\\\n\\xa1\\x0f\\x5b\\xf4\\xf1\\xef\\xd0\\xb9\\xba\\xa7\\xf3\\xb5\\x73\\x1b\\x8a\\x6f\\\n\\xf8\\x2f\\x59\\xf2\\xbc\\x5b\\xcb\\x4c\\xc7\\x8b\\x8a\\xa4\\x57\\x1e\\x3f\\xcc\\\n\\xd6\\xc5\\x6b\\x4b\\xf4\\x06\\x0b\\xf7\\x0b\\x2d\\x2a\\xa6\\x9c\\x6a\\x59\\xad\\\n\\xeb\\xeb\\x11\\x01\\x47\\x9d\\xef\\xe4\\xba\\x33\\xf9\\xf0\\x51\\x87\\x35\\xe3\\\n\\x87\\xac\\xaa\\xe0\\xf5\\xee\\x45\\xde\\x19\\x03\\x57\\xd4\\xa8\\x04\\x5f\\x5f\\\n\\x0c\\x93\\xd4\\x97\\xb8\\xc3\\xf9\\x85\\x59\\x77\\x8c\\x69\\xbb\\xe6\\x61\\x42\\\n\\x8e\\x6f\\x39\\x7d\\xec\\x8f\\x76\\xf2\\x1e\\x3a\\xa8\\xc2\\xe7\\xda\\xae\\x63\\\n\\x3e\\x2d\\x0c\\xda\\xd4\\x60\\xdf\\xe3\\x06\\xfb\\xb2\\x39\\x88\\x2b\\x35\\x08\\\n\\x7b\\x9b\\xd8\\x2f\\xc5\\xcd\\xb7\\xb9\\xd8\\xad\\x9d\\x5b\\x2d\\x97\\xe9\\xad\\\n\\x4e\\x58\\x6e\\xc8\\xbe\\xa8\\xd5\\xa0\\x45\\x16\\xbe\\x7d\\x56\\x4c\\x3a\\xfd\\\n\\x64\\xce\\xeb\\xa6\\x13\\x36\\xc8\\xaa\\x67\\x9b\\xe4\\xdc\\xa6\\x6e\\x49\\xcb\\\n\\x6d\\x79\\x97\\xb4\\xb1\\x5e\\x9d\\x52\\x22\\x7e\\xbf\\xc7\\xa0\\x12\\x0b\\x73\\\n\\x88\\x6b\\x3b\\x96\\xbc\\x21\\x59\\xb5\\xe3\\x8d\\xfb\\x82\\x1e\\x36\\x67\\x6a\\\n\\xb7\\xe9\\x59\\x3e\\x64\\x86\\x77\\xee\\x66\\x3b\\xc6\\x89\\x1c\\x73\\x2c\\xeb\\\n\\x94\\xb0\\xf5\\xb5\\x5d\\x5b\\xab\\x9e\\xd6\\x45\\x32\\xd7\\x7d\\xe5\\x27\\x2b\\\n\\x20\\x85\\xf8\\x4a\\xce\\xdd\\x72\\x4a\\x9e\\xb8\\xf6\\x9c\\xf1\\xc0\\x32\\x7a\\\n\\xfd\\xdb\\x94\\xbc\\xbf\\x72\\xde\\x19\\x3e\\x71\\xfb\\x93\\xf9\\x76\\x51\\x6b\\\n\\x16\\xd5\\x9a\\xb1\\x77\\x4f\\xb7\\x76\\xfd\\xdc\\xa1\\x73\\xe8\\xd2\\x15\\x85\\\n\\x2e\\x4f\\xdf\\x5e\\xd0\\x2e\\xcf\\x90\\x21\\x63\\xf7\\x0d\\xf9\\x31\\xad\\xd0\\\n\\xa8\\xba\\xd2\\xc5\\xfd\\x2b\\x7c\\xaa\\x3a\\xa5\\x61\\x42\\xe9\\x8b\\xcb\\x87\\\n\\x07\\x35\\x3f\\x7b\\x2c\\x51\\xd4\\xe4\\xd3\\x90\\xdb\\x0b\\x27\\x8e\\x70\\xef\\\n\\x13\\x1b\\x57\\x31\\x67\\x7c\\x5b\\x2b\\xc7\\x88\\x5f\\x03\\xc7\\x7e\\x8c\\xaa\\\n\\xf5\\xda\\x75\\xc9\\xdb\\xfb\\x73\\x0b\\x84\\x17\\x91\\xd9\\x6e\\xad\\xd1\\x28\\\n\\xd7\\xb6\\x3b\\xae\\x91\\xd5\\x0a\\xbc\\x2a\\x7a\\xf9\\x48\\xb6\\x69\\xd2\\xdb\\\n\\xa2\\xa0\\x79\\x5b\\x36\\xe7\\x2f\\x1e\\xfc\\xf3\\x9b\\x7f\\xb9\\xc6\\x53\\xfc\\\n\\x3f\\x06\\x3d\\x18\\xf4\\xc3\\xa1\\xc3\\x1a\\xf1\\xff\\xaa\\x25\\xac\\x2b\\xd4\\\n\\xaf\\x4c\\xb6\\x95\\xe3\\xf6\\x6f\\xf0\\xac\\xdc\\x60\\x5d\\xc9\\xc2\\x5f\\xca\\\n\\x6c\\xb5\\x6e\\x63\\x77\\x7a\\xe7\\x76\\x8b\\x87\\xf3\\x9e\\x84\\x7d\\xb9\\x01\\\n\\x7e\\xa7\\x86\\x8e\\x1d\\xd4\\xbf\\xd6\\xb7\\x3e\\x0e\\x4f\\xeb\\x2f\\x39\\xd9\\\n\\x64\\xce\\xc4\\xf7\\x9f\\x4f\\x0d\\xdc\\x70\\x79\\x58\\xc9\\xbe\\x59\\x9c\\x0b\\\n\\x7f\\xf9\\xd9\\x2c\\x77\\x36\\xbb\\x7b\\xbf\\xea\\x76\\x6e\\x73\\xca\\x35\\x38\\\n\\x4b\\xe5\\x69\\x29\\x75\\xe7\\x59\\xaf\\x2b\\x77\\x24\\x68\\xe9\\xd8\\xcf\\x23\\\n\\x6d\\x5e\\x87\\xd5\\xe9\\xe7\\xf7\\xab\\xe4\\x91\\x0d\\xa1\\x01\\x1b\\xc6\\x7d\\\n\\x97\\xc5\\x79\\xaf\\xc8\\x3e\\xfc\\xf2\\xd0\\x22\\x83\\xdd\\xbb\\xc7\\x85\\x04\\\n\\xdd\\x19\\x6b\\xed\\x3a\\x7f\\xd5\\x5e\\xb7\\x3e\\xbb\\xda\\xdf\\x6a\\xe1\\xe5\\\n\\xee\\xe3\\x6e\\x5d\\x68\\xe8\\xcf\\x44\\x3f\\xa9\\x7b\\xc5\\x4f\\x56\\xb2\\xb2\\\n\\x07\\x7b\\x16\\x2d\\x7d\\xef\\x50\\xff\\xda\\x87\\x4e\\x0c\\x2d\\xfd\\xb3\\xbf\\\n\\xcc\\x35\\x3e\\x7b\\xf2\\xb9\\x52\\xdd\\x2d\\xdf\\x8d\\x38\\xb2\\x23\\x57\\xa8\\\n\\x6f\\xf6\\x59\\x83\\x26\\x86\\x8f\\xcd\\x7b\\x22\\xc9\\xaa\\xe1\\xa8\\x92\\xdf\\\n\\x26\\xc4\\xcd\\xdd\\xda\\xa7\\x7a\\xb5\\xde\\x07\\x12\\x6f\\xd6\\x28\\xf3\\xe3\\\n\\x50\\xce\\x9f\\x53\\xb7\\xd9\\x66\\x3a\\xe2\\xf0\\x24\\x3e\\xae\\x55\\xae\\x82\\\n\\x73\\x4f\\xdf\\x96\\x7f\\xee\\xa7\\x05\\x66\\x2e\\x17\\x3b\\xb2\\x49\\xf5\\x6d\\\n\\x5b\\x8e\\x2f\\xf4\\x3a\\x90\\xd8\\x63\\xf1\\xe8\\x0f\\x33\\xc3\\xd6\\x86\\x1f\\\n\\x2f\\x66\\x57\\x6a\\x70\\x3e\\xc9\\xb6\\xd3\\x4b\\x2e\\xae\\x4f\\x68\\xf5\\xac\\\n\\xf9\\xb9\\x2c\\x27\\xac\\xb3\\x38\\x94\\x18\\x90\\x3b\\x6f\\xf1\\xa8\\x40\\xab\\\n\\xed\\x4f\\x86\\xdf\\x39\\xe6\\xfe\\x61\\x51\\xec\\x72\\x49\\xc7\\x22\\x3f\\xa6\\\n\\xbf\\x2e\\xb3\\x62\\x73\\xf1\\x47\\xbe\\xc1\\x4e\\x75\\x26\\xf9\\xfa\\x25\\x66\\\n\\x2f\\x60\\x69\\xd7\\x0f\\x3c\\xaf\\xcc\\x8c\\x2b\\xdd\\x24\\xd0\\x6d\\x52\\x8e\\\n\\xd3\\x56\\x77\\xe6\\xae\\xac\\x5f\\xfa\\xf6\\x95\\x88\\x91\\x91\\xb5\\x67\\x3e\\\n\\x2d\\x22\\xee\\x1a\\xe9\\x39\\x58\\x76\\xbd\\xf5\\xba\\x8d\\xc1\\x6f\\x2a\\x36\\\n\\xef\\x16\\x23\\x3a\\x75\\xe6\\xe7\\x8c\\xf0\\x13\\x54\\x17\\xbb\\xdd\\x07\\x8b\\\n\\x97\\xf3\\xaf\\xff\\xdc\\xe3\\xd4\\x6d\\x7a\\xcb\\x3b\\xd5\\x5a\\x49\\x12\\x0b\\\n\\xdd\\x8e\\xf4\\x08\\xba\\xd1\\xf0\\x5c\\xe4\\xcc\\x27\\x85\\x6e\\xd7\\x6f\\x58\\\n\\xfa\\xc5\\xec\\xb0\\xd3\\xbd\\x66\\xfd\\xf4\\x6b\\x6b\\x25\\x69\\xf8\\xe8\\xda\\\n\\xd4\\xd1\\xb6\\x53\\x82\\x33\\x3d\\x80\\xe8\\x83\\x55\\xba\\x8a\\x8b\\x4c\\x0b\\\n\\xba\\x78\\xa3\\xeb\\xe0\\xc5\\x47\\xa7\\x06\\x89\\xbb\\x9f\\x5d\\xbe\\xdf\\xda\\\n\\xab\\x76\\xff\\x55\\x2e\\x94\\x00\\x2f\\x7b\\xc4\\x4c\\x99\\x68\\x5b\\xee\\xd9\\\n\\xf5\\xda\\x23\\x9f\\xc9\\xce\\xbc\\x1a\\x53\\x52\\x1c\\x5a\\xe8\\x76\\x61\\xd1\\\n\\x94\\x06\\xae\\xa1\\x01\\x5f\\x5f\\xf4\\x96\\x06\\x2e\\xf0\\xab\\x3b\\xf3\\x51\\\n\\xe8\\xe2\\x3c\\x4b\\x57\\x3c\\x38\\xdb\\xb4\\x56\\xf3\\xfd\\xf7\\xcf\\xcc\\xfa\\\n\\x35\\xcf\\x6f\\xf0\\x99\\xfc\\xd1\\xf6\\x2f\\x4e\\x67\\x6b\\xd3\\xe0\\x8c\\x5b\\\n\\xd4\\xa8\\x4f\\xab\\xbb\\x76\\xf5\\x7c\\x5d\\xc5\\x33\\x97\\xeb\\xa0\\x6b\\xad\\\n\\x5d\\x73\\x1e\\x19\\x58\\xfe\\x4a\\xf0\\xbb\\x53\\xef\\x56\\xf6\\x2e\\x55\\xfd\\\n\\xc9\\xf2\\x75\\xf9\\xfb\\x94\\x0e\\x0a\\x0c\\x3d\\xe4\\x5f\\x23\\x24\\x79\\xc2\\\n\\xc3\\xc3\\x39\\x65\\x56\\x2b\\x1f\\x57\\xda\\xb8\\xb0\\xf5\\xd4\\xb9\\xad\\x3d\\\n\\x9a\\xa7\\xac\\xeb\\x1d\\x33\\xda\\xf9\\xb0\\x9b\\xe7\\xd7\\x66\\x83\\x3e\\x9e\\\n\\xbf\\x6c\\xff\\xed\\x47\\xdc\\xc2\\xad\\x7d\\xca\\x7b\\x7a\\x76\\xf9\\x9c\\xe9\\\n\\xb0\\xcb\\x12\\xb7\\x05\\x1e\\x45\\x23\\x36\\x7f\\xae\\xb9\\xe7\\xc0\\xec\\x11\\\n\\x99\\x1e\\xbf\\x59\\x15\\x93\\x2d\\xf2\\x66\\x96\\x81\\xd7\\x0a\\x5d\\x5e\\x7b\\\n\\x65\\x62\\xd5\\x5f\\x21\\x9b\\x13\\x97\\x7c\\xdf\\xeb\\xb2\\xeb\\x50\\x91\\x9f\\\n\\x95\\x72\\x44\\xff\\x77\\x4f\\xfa\\x41\\x72\\x4e\\x5c\\xda\\x6f\\xf9\\x98\\x91\\\n\\xb9\\x9d\\x3d\\x2e\\x6d\\xf0\\xba\\x9f\\x38\\x2c\\x6c\\xf4\\xb2\\x8a\\xa7\\xcf\\\n\\x36\\xf2\\xad\\xbd\\x2b\\xb1\\x69\\x78\\x7e\\xf7\\x06\\x70\\x67\\x62\\xa1\\x84\\\n\\x8f\\xcb\\xea\\xb8\\x14\\x1e\\xb8\\x24\\xb0\\xb9\\x6f\\xf6\\x9f\\x4f\\x4b\\x27\\\n\\x66\\xfa\\x6f\\x53\\x16\\xcf\\x33\\xf9\\xc7\\x35\\xb8\\xed\\x9a\\xbf\\x7c\\xcf\\\n\\x56\\xfd\\x0e\\xf9\\x76\\xf7\\x9d\\xf8\\xbd\\xde\\xda\\xb5\\xd1\\xa7\\x0a\\x94\\\n\\x5a\\x96\\x7d\\xa4\\xe8\\x48\\xd5\\x47\\x27\\x9e\\x57\\x75\\x9d\\xf2\\xcd\\xe6\\\n\\xc5\\x38\\xaf\\x6b\\xa7\\x3e\\x3c\\x3b\\x63\\xbd\\xd7\\xad\\xd9\\xea\\xee\\x37\\\n\\x7b\\x54\\x0b\\x7f\\xd4\\x68\\x48\\xab\\x39\\x23\\x3e\\x64\\x1f\\x5f\\x6a\\xc9\\\n\\x82\\xfd\\x49\\x43\\xad\\xcf\\xb9\\x37\\x9e\\xd2\\x6b\\x64\\x78\\xd9\\xbb\\x91\\\n\\xf5\\x45\\xe7\\x6b\\x8a\\xa7\\x8c\\xcc\\xf1\\xf9\\x76\\xd4\\xac\\x41\\x91\\x1f\\\n\\xcf\\x4e\\x6b\\x7e\\xf8\\xfc\\xd3\\x65\\x3d\\xa2\\x6f\\x47\\x1f\\x5a\\xdc\\xd8\\\n\\xf2\\x5e\\xf3\\x26\\xb9\\xbc\\x0f\\x9c\\x1f\\xbe\\x6c\\xe7\\x9b\\x87\\xd5\\x56\\\n\\xd8\\x75\\xb6\\x9c\\xf0\\xbc\\xf7\\xc9\\xee\\x09\\x4e\\x3e\\x21\\x01\\xb9\\x23\\\n\\xcf\\x27\\xb7\\xbc\\xf8\\x75\\x6b\\xc2\\xde\\x1a\\x5b\\xcb\\x94\\x5e\\xd7\\x37\\\n\\xd3\\xb7\\x3d\\x2d\\xfa\\x0d\\x76\\x08\\x1b\\x6f\\xf9\\xd3\\xfa\\x68\\x2d\\x8c\\\n\\x66\\x66\\xa6\\xda\\x33\\xbf\\x5f\\xcc\\x99\\x2d\\xeb\\xd8\\xbc\\x53\\x7a\\x49\\\n\\xda\\x0c\\xf8\\xfa\\xf4\\xcd\\xe2\\x71\\x5d\\x2f\\x8d\\x6d\\xdf\\xe1\\xd6\\xde\\\n\\x2b\\x3d\\x63\\x4a\\xce\\xe9\\xb0\\xf5\\x8d\\xcf\\x2d\\x97\\x6f\\xa7\\x7f\\xed\\\n\\x77\\x2a\\xe7\\xfe\\xb1\\xe7\\x5a\\xcb\\x73\\x73\\x27\\x7a\\x9e\\x29\\x2d\\xf5\\\n\\x9e\\x57\\x3f\\x14\\x3b\\x68\\xdf\\x36\\x6e\\x7c\\x5f\\xb1\\x4f\\x9d\\xa8\\xd8\\\n\\x67\\x27\\xb2\\x46\\x97\\x5f\\x7d\\xdb\\xe7\\xe4\\x7f\\x91\\x33\\x46\\x38\\xcd\\\n\\xb9\\x91\\x2f\\xd7\\x83\\xed\\xe3\\xad\\xa6\\x55\\x2d\\xff\\xf3\\x61\\xfb\\x1c\\\n\\x95\\xef\\xcd\\xcf\\x9a\\xbc\\x62\\xcb\\x9c\\x15\\x35\\x2f\\x7e\\x81\\x84\\x42\\\n\\x03\\xd6\\x9f\\x3a\\x53\\x70\\xe3\\x94\\x7a\\xf1\\x85\\x3f\\x8c\\x79\\x56\\xb0\\\n\\x69\\xa8\\x53\\x0b\\xaf\\x5e\\xff\\x6d\\x59\\x3c\\x7a\\xf4\\x2b\\xa7\\x4f\\xbd\\\n\\x5e\\xf6\\x4c\\x18\\x2f\\x4e\\xd8\\x36\\x30\\x72\\x77\\x7f\\xf0\\xdc\\x5c\\x77\\\n\\x47\\x70\\xd7\\x9b\\xb3\\x3b\\xef\\x6a\\xe5\\xbd\\x63\\x96\\x2c\\x8f\\x4d\\x9e\\\n\\x27\\xff\\x79\\x9f\\x3d\\xb8\\xee\\x44\\x57\\xc9\\xda\\x86\\x07\\x6d\\x0f\\xed\\\n\\xcd\\x9e\\xeb\\x47\\xb5\\xa6\\x21\\x5b\\x6e\\xbe\\xda\\xd2\\x25\\xf8\\x42\\xc1\\\n\\x46\\x5d\\x7c\\x57\\xb6\\xef\\x1b\\x58\\x60\\xf1\\xbd\\xc0\\x65\\x21\\x2b\\x8f\\\n\\xf9\\x66\\x5d\\x70\\x6b\\xfe\\xf9\\x13\\xc1\\xfd\\x73\\xe7\\xad\\xfc\\xbc\\x75\\\n\\x80\\xfb\\xa5\\x29\\x5b\\xda\\x36\\x59\\x6f\\x9d\\x02\\xc1\\xb9\\x92\\xb2\\x87\\\n\\x4d\\xac\\x97\\x69\\xd0\\x8d\\xb9\\x61\\xb5\\xd7\\xdf\\xce\\x1a\\xfe\\x2c\\x78\\\n\\xfa\\xaa\\x66\\xb7\\x06\\x9c\\x5e\\x37\\xec\\x92\\xec\\xa2\\xcd\\x92\\x61\\x16\\\n\\xd7\\x4f\\x9e\\x6e\\xfd\\x23\\xbb\\x8b\\xe3\\xca\\x6a\\x87\\x27\\x7d\\x6e\\xf4\\\n\\xfa\\xd8\\xe2\\x55\\x2e\\x07\\x6e\\x66\\xfd\\xf0\\xf1\\x4b\\xdc\\x7c\\xbb\\x3c\\\n\\x1d\\x1f\\x88\\x56\\x96\\xb8\\xdf\\xac\\xc5\\xd5\\x53\\xa3\\xd7\\x44\\x34\\xba\\\n\\x7d\\x6b\\x45\\xd9\\xd9\\x51\\x12\\xeb\\xa6\\x3b\\x27\\xe7\\x7b\\xd2\\xb5\\xae\\\n\\x63\\xc5\\x10\\xe9\\xd9\\xcc\\xdd\\x2b\\xf6\\xf8\\xb8\\xa8\\xfe\\xb4\\x19\\x2e\\\n\\x37\\xfe\\xed\\xb9\\x60\\x4d\\x17\\x9f\\xe9\\xaf\\x2b\\xfa\\x9c\\x28\\xfd\\x9f\\\n\\x64\\xd8\\xca\\x41\\xcf\\x9e\\x7b\\x56\\x3a\\x33\\x67\\xf2\\xa6\\xcf\\x63\\xbd\\\n\\xe7\\xf6\\xb7\\xef\\x55\\xb3\\x57\\xd6\\xc2\\x07\\xce\\x07\\xb8\\x96\\x72\\x18\\\n\\x91\\x78\\xc7\\xde\\x3a\\x56\\x32\\xe9\\xd3\\x24\\xe7\\x7f\\x62\\x0e\\x4f\\x8c\\\n\\x93\\x4c\\x1e\\x34\\x7a\\xcc\\xf6\\xcf\\x13\\x6e\\x27\\x40\\xa4\\x78\\xf2\\xf7\\\n\\xfa\\xeb\\x5e\\x2c\\xcb\\xf4\\xeb\\xd4\\xb2\\x75\\x4b\\x9a\\x75\\xde\\x97\\xff\\\n\\xce\\x97\\xa8\\x12\\xd5\\xad\\xdd\\x3c\\xa6\\x38\\x7e\\x1b\\x5b\\x73\\xc3\\xb6\\\n\\x47\\x07\\x8a\\xde\\x58\\xfa\\x7a\\x7d\\xe2\\x3f\\xe5\\xd7\\xf4\\x6a\\xf7\\xbd\\\n\\x77\\xe0\\x95\\xcb\\x73\\xab\\x5c\\xaa\\xbb\\xa4\\x6f\\xb0\\xc5\\xcf\\xa9\\x1b\\\n\\xe6\\x6d\\xdd\\x92\\xfd\\xce\\xe8\\xb8\\xac\\x6e\\x17\\x6e\\x37\\xbb\\x92\\xe9\\\n\\x75\\x40\\x4c\\xd7\\xce\\xee\\xeb\\xb6\\xdd\\x6a\\x36\\x2a\\xf3\\xd3\\x95\\x45\\\n\\x07\\x34\\x39\\xfd\\x69\\xda\\xaa\\xea\\x07\\xcb\\x8d\\xdb\\xf5\\xe0\\xdc\\x4f\\\n\\xdf\\x3c\\x3f\\x6b\\x35\\xa9\\xea\\x79\\x2e\\xff\\x96\\xe0\\xc9\\xb9\\xc3\\x2a\\\n\\x3e\\xc9\\xb5\\x7d\\xee\\xc9\\x72\\x4b\\x7b\\x46\\x1f\\xb3\\xea\\xff\\xe1\\xdd\\\n\\xe1\\xe5\\x49\\x1e\\x63\\x5b\\x1f\\x88\\x7d\\xdf\\xa1\\xfb\\xb9\\x5d\\x57\\xda\\\n\\xbd\\xd9\\x1a\\x6b\\x25\\xd9\\xf6\\xd3\\x7f\\x7d\\xb6\\x22\\x85\\x4e\\x39\\xfe\\\n\\xcc\\x56\\x2a\\xec\\x9b\\x57\\xfe\\xba\\x73\\x26\\x7f\\x77\\xa7\\x8a\\xb4\\xd8\\\n\\xae\\x89\\xdf\\x7b\\x9c\\x92\\xd5\\xff\\xdc\\xd9\\xfe\\xf5\\x27\\xa9\\xec\\x83\\\n\\xef\\xc7\\x4e\\xb7\\x57\\x9f\\xc9\\x7a\\x61\\xf6\\xd4\\xfd\\xe5\\xb2\\x1f\\xf8\\\n\\x67\\xf4\\xb0\\x02\\x03\\xbd\\x22\\x5f\\x0c\\x1b\\x31\\xa8\\xec\\xb6\\x0b\\x63\\\n\\xec\\x7d\\x27\\x17\\xaa\\x9a\\xfd\\x55\\x3e\\xab\\x95\\x3f\\x97\\x0f\\x7c\\x9c\\\n\\x2f\\x22\\xec\\xee\\x91\\xe4\\x07\\xd1\\xf7\\x7f\\xb5\\x76\\x6d\\xd4\\xdf\\xd6\\\n\\x73\\xa6\\x45\\xd1\\xe4\\xc7\\xed\\x43\\x9c\\x9b\\xb5\\xdb\\xe6\\xec\\x5f\\x2b\\\n\\x78\\xe6\\x85\\x57\\xad\\x9f\\x3a\\xdc\\xb5\\x5e\\x09\\x27\\x4b\\x07\\x97\\xcd\\\n\\x7f\\x65\\xdf\\xc3\\xce\\x97\\x2c\\x07\\x59\\x8d\\x0a\\x0f\\xab\\x16\\x9e\\xfb\\\n\\xde\\xba\\x57\\x93\\x45\\x49\\x0d\\xdc\\x8e\\xcd\\xbc\\x32\\x6c\\xf4\\xb8\\x99\\\n\\x35\\xd7\\xfc\\xea\\x75\\xaf\\x4b\\xc0\\x9a\\xf6\\x77\\xf7\\x8d\\xb8\\x5b\\x28\\\n\\x57\\xf1\\x60\\xbf\\x7a\\x1f\\xe7\\x6d\\xe9\\xff\\xbc\\x05\\x6c\\xb8\\xdc\\x60\\\n\\xd7\\xa3\\x35\\xbf\\xd6\\xff\\x68\\xb4\\x73\\xd1\\x99\\xfc\\x79\\xdf\\x24\\xfc\\\n\\x5c\\xf5\\xe1\\x6a\\x4a\\xa7\\x86\\x63\\x7b\\xcb\\xce\\x6d\\xd8\\x36\\xf5\\x88\\\n\\x6c\\x5d\\xf0\\xf4\\x53\\xab\\xb7\\x58\\xe5\\x2b\\x56\\x26\\x2c\\x8b\\x4f\\xcf\\\n\\x45\\xcb\\x47\\xa6\\xbc\\x9d\\xf1\\x7e\\x57\\xe5\\xd2\\x81\\x39\\xf2\\x6f\\x76\\\n\\x3c\\x11\\xfd\\x6d\\x7f\\x60\\x96\\x57\\x3d\\xb3\\xad\\x0f\\x39\\xd7\\xae\\x99\\\n\\x9f\\xcb\\x12\\xdb\\xe0\\xcc\\x29\\x35\\xf2\\x34\\x0d\\x2d\\x15\\x3c\\x34\\xb7\\\n\\x4f\\xbb\\x1b\\x25\\xfe\\x6d\\x3b\\xcc\\x73\\x45\\xca\\xea\\x0e\\x7d\\xdf\\x1f\\\n\\x28\\xb7\\xff\\xd3\\xd7\\x0d\\x0b\\xb6\\x6c\\xb7\\x7d\\x56\\xe8\\x42\\xca\\xaf\\\n\\xba\\x2d\\x73\\xc6\\x9c\\xf2\\xec\\xdf\\x78\\xcd\\xd6\\xbc\\xb7\\xbb\\xce\\xfa\\\n\\x77\\xe8\\x95\\x8f\\x4f\\x9f\\x15\\x68\\x7c\\x23\\x38\\xf8\\xca\\x03\\x9b\\xb3\\\n\\x0f\\x7a\\xcc\\xda\\xec\\x3b\\xbb\\x40\\xee\\x77\\x6e\\x81\\xed\\x5e\\xe4\\x29\\\n\\xd2\\xf5\\x2c\\xb4\\xb5\\xf2\\x3c\\x9f\\x72\\x3a\\x7a\\xe7\\x2a\\xab\\xf6\\xc1\\\n\\x7e\\x4d\\x0b\\x6f\\x9b\\xb0\\x66\\x7a\\x83\\x31\\x03\\xa5\\xd5\\x3e\\x9f\\xf7\\\n\\x98\\x71\\x71\\xca\\xf7\\xc3\\xd6\\xd5\\xe7\\x9e\\xac\\xb3\\x60\\x75\\xbd\\x1c\\\n\\x7d\\xad\\x7d\\xe2\\x12\\xd6\\xd7\\x18\\xbc\\x7d\\xc6\\x90\\x0a\\x52\\x97\\x12\\\n\\x75\\xcb\\x75\\xec\\xb0\\x62\\x44\\x64\\x64\\xe4\\xd7\\xaf\\xc3\\x43\\x8e\\xe5\\\n\\x6f\\xf3\\x7e\\xc4\\xd2\\x26\\x79\\x56\\x06\\xaf\\xfc\\xf1\\x63\\x9c\\xf4\\x71\\\n\\xf6\\x2e\\x50\\x7e\\xe1\\xe6\\x5d\\xb6\\x61\\x27\\x2d\\x4f\\x24\\x26\\xba\\xfd\\\n\\xf8\\x51\\x21\\xa4\\x44\\xdf\\x76\\x79\\x8f\\xdc\\xdd\\x9c\\xf5\\xdf\\xdc\\x6b\\\n\\xac\\x62\\x37\\xbd\\x68\\xbf\\x70\\x52\\xe1\\x19\\xae\\x91\\xc5\\xdf\\x3c\\x73\\\n\\x68\\xd8\\xbe\\xe8\\x8a\\x60\\x9b\\x13\\xe3\\xbe\\x55\\x79\\xdd\\x23\\x7f\\x0f\\\n\\xdf\\xd9\\x85\\xa3\\xde\\x35\\x3b\\x59\\xa4\\x4b\\xd1\\x06\\xa5\\x3a\\x45\\x4f\\\n\\x49\\xa9\\xdf\\x31\\xc2\\x2d\\x4b\\x3d\\xd1\\x91\\x9f\\x11\\xdb\\xea\\x2d\\xdc\\\n\\xb8\\x49\\x6c\\x5f\\x37\\x67\\x64\\xf2\\xaf\\x35\\x41\\xe3\\xba\\xc7\\xbd\\x83\\\n\\x6a\\xcf\\x3b\\xed\\x6a\\x29\\x4d\\x29\\xb5\\x7a\\x4e\\xad\\x51\\xee\\xb1\\x71\\\n\\x6f\\xaf\\xd8\\xcf\\x59\\xb1\\xb8\\x4e\\x70\\xc7\\x0f\\x96\\xf1\\x9b\\xf0\\x61\\\n\\x42\\xd1\\x48\\x1b\\xf7\\xa7\\x79\\x1b\\xde\\x59\\x52\\x69\\xc1\\xcf\\xe9\\xd2\\\n\\x3d\\x03\\x47\\x36\\xb4\\x8b\\xb0\\xf7\\x09\\x7c\\x3a\\xf8\\x45\\xc4\\xd2\\x35\\\n\\x23\\xe2\\x7a\\x77\\x74\\x5d\\x16\\xdc\\x24\\xfb\\x4a\\xdb\\xa8\\x72\\xbb\\x5e\\\n\\xb4\\x1d\\x50\\xff\\xc2\\x8e\\xc3\\x71\\x73\\x37\\xef\\xda\\x29\\xaa\\x7d\\xab\\\n\\xf1\\xa0\\x9d\\x7b\\x25\\x93\\x4b\\x1d\\xf4\\xa8\\x6a\\xb3\\xd2\\x76\\xc4\\x49\\\n\\xab\\xc4\\x11\\xb2\\x41\\x83\\xcf\\x3c\\x70\\xb7\\xeb\\xee\\x7b\\xe2\\xd4\\x8e\\\n\\x00\\x2a\\x60\\xbe\\xe5\\x7d\\xf3\\xf9\\x38\\x4c\\xee\\x36\\xb2\\x7e\\x8e\\x7e\\\n\\x7b\\x66\\xbd\\x6f\\x34\\xd7\\xb9\\x7f\\xaf\\xe3\\x63\\x73\\xce\\x39\\xd3\\x42\\\n\\x7a\\x3c\\xf4\\x7c\\x89\\xc7\\x07\\xff\\x59\\xd4\\x36\\xb9\\xc8\\xc5\\x3b\\x77\\\n\\x2b\\x3e\\xdc\\x9c\\xe5\\x4a\\x96\\xd7\\x85\\x13\\xbe\\x27\\x75\\xf8\\x26\\x8e\\\n\\xe8\\xd2\\x42\\xf4\\x39\\xd8\\x7d\\xde\\x64\\xe4\\x20\\xcd\\x1d\\x19\\x75\\xc2\\\n\\x2f\\xfc\\x74\\x99\\x6c\\x92\\x57\\xbe\\xb7\\xc6\\x3e\\xca\\x57\\xbf\\x6b\\xdb\\\n\\xc1\\x9e\\xe3\\x76\\x1c\\xdf\\x7a\\x3b\\x70\\xe2\\x76\\x71\\xd8\\xa3\\xa9\\x95\\\n\\x2c\\x2f\\x5a\\x47\\x5d\\xe9\\x35\\xf7\\xc8\\xaf\\xde\\x77\\x24\\xc3\\x3d\\xef\\\n\\x37\\xa8\\x6b\\xd9\\xbb\\x62\\xed\\x4f\\x13\\x4f\\xac\\x6f\\xe4\\x30\\x79\\xe6\\\n\\x95\\x4c\\xb1\\xb1\\x41\\xe5\\x4e\\xd6\\x9e\\x7a\\x6e\\x73\\xa1\\xc8\\xb9\\x51\\\n\\xb5\\xbf\\x96\\xe9\\x16\\xe7\\x58\\x6b\\xcf\\xa7\\x35\\x76\\x77\\x7d\\x3d\\x46\\\n\\x87\\x9c\\x78\\xe2\\xbe\\xb0\\x77\\xbb\\x06\\x7d\\x8a\\xc7\\x3e\\xeb\\x5a\\xc9\\\n\\x72\\x73\\xde\\xa8\\x2b\\xe7\\xc5\\xc7\\x93\\x1a\\x0d\\x70\\x98\\x62\\x73\\x60\\\n\\xf6\\xa3\\xcd\\xbb\\x46\\x74\\x9f\\x3c\\x48\\x7a\\xee\\xeb\\x99\\x1e\\xc7\\x73\\\n\\xf6\\xe8\\x73\\x2b\\xdf\\x03\\x51\\x81\\xc7\\xaf\\x9c\\x46\\x3e\\xde\\x59\\x7c\\\n\\x8b\\xa4\\x68\\x72\\xd4\\x9a\\xc2\\x21\\x9d\\xbb\\x7e\\x89\\x9e\\x9b\\xe4\\x1e\\\n\\xbe\\x45\\xb2\\x8d\\x72\\x37\\xe8\\x5d\\x62\\xca\\xfa\\x6d\\xe5\\xda\\x66\\xda\\\n\\xdd\\xe0\\x53\\xe1\\xb0\\xaa\\x01\\x35\\x5b\\x4c\\x1a\\xd7\\x76\\xd8\\x7e\\x89\\\n\\xdb\\x90\\xa8\\xc4\\x06\\xa3\\x1a\\xcf\\x5e\\x1a\\x9a\\xc5\\x65\\xe3\\xce\\x7d\\\n\\x1d\\xfb\\xd7\\x4e\\x59\\x7a\\x65\\x70\\x72\\x89\\x62\\x0b\\x73\\x0f\\xec\\xed\\\n\\x3c\\xf3\\xe8\\xec\\x9d\\xb5\\xe6\\x2d\\x19\\x7e\\xb8\\xf5\\xfc\\xf3\\xd3\\x5f\\\n\\x56\\xb5\\xac\\x5c\\x6a\\xbb\\x47\\xbe\\x2e\\x33\\x7e\\x5e\\xab\\xb3\\x6e\\xf3\\\n\\xd2\\x49\\xcd\\x9a\\xad\\xbf\\x17\\xe0\\x7c\\xe5\\x5a\\xfd\\xd0\\xc5\\x2b\\x57\\\n\\x7e\\x0c\\x76\\x8c\\xbc\\x55\\x7a\\xf5\\xc7\\x0a\\x35\\xfd\\x42\\x27\\xb7\\x6c\\\n\\xe1\\x59\\x3d\\x73\\xfe\\xd2\\x36\\xd1\\x49\\x97\\x97\\x0e\\xcd\\x7f\\xc3\\xba\\\n\\xe3\\x2c\\x87\\xf8\\x71\\x0e\\x3e\\xd7\\x06\\x49\\x57\\x78\\x97\\x2d\\xbf\\xf6\\\n\\x64\\xe6\\xc4\\x1a\\x4b\\x9e\\x4e\\x98\\x92\\x2d\\xa6\\xa3\\xeb\\xfd\\xa5\\xc3\\\n\\xbf\\xef\\x38\\x5b\\xfd\\xe0\\xc8\\xab\\xa7\\xe6\\x5e\\xd8\\xfb\\x3f\\x59\\xe7\\\n\\xf3\\xb3\\xfd\\x1a\\xdb\\xfd\\xb7\\x65\\xf3\\x5e\\x27\\xd9\\xf4\\x36\\xef\\xb3\\\n\\x8f\\xa8\\x3e\\xb2\\x78\\xab\\x00\\xab\\xd7\\x5d\\x5f\\x7e\\xa4\\x3e\\x8e\\x71\\\n\\x57\\xe6\\x3c\\xdf\\x5d\\x61\\xe6\\x8d\\x52\\x07\\x57\\x26\\x57\\x68\\x9e\\xb7\\\n\\xc6\\xcc\\x7a\\x8b\\x42\\x5f\\x4e\\x08\\xaf\\x9c\\xe5\\x93\\x4b\\x62\\xb1\\x95\\\n\\xf1\\xdd\\x72\\xf7\\x1e\\x79\\xb0\\x44\\x6b\\x18\\x32\\x73\\xcf\\x94\\x7d\\x5d\\\n\\x03\\x77\\x7d\\xb6\\x8d\\xf0\\xb1\\xd8\\xf7\\xe5\\xee\\x8a\\x9c\\x92\\xa6\\x17\\\n\\xcf\\x36\\x99\\x28\\x0e\\x9b\\xd9\\x6d\\xea\\x84\\x11\\x05\\xb6\\x2f\\xa8\\x5f\\\n\\x20\\x76\\x69\\xd0\\x38\\x8f\\xbb\\x41\\x23\\xbc\\xdc\\xbd\\x7b\\x96\\x2a\\x30\\\n\\xb5\\x77\\x96\\xa7\\xf1\\x6b\\x82\\x06\\xec\\xdf\\xd6\\xe3\\x93\\x43\\xec\\xff\\\n\\xc2\\x1b\\xb4\\x3b\\x5d\\xf4\\xa1\\xb5\\x67\\xdd\\xf0\\x7a\\x1d\\xe6\\x85\\xb9\\\n\\x6e\\x3a\\x59\\xbf\\x5a\\xb2\\xdf\\xd1\\x73\\x15\\x26\\x1c\\x5c\\x5d\\x71\\x4f\\\n\\xa6\\x75\\x23\\xb3\\x3c\\x9c\\xd7\\x29\\xe7\\xd0\\x81\\x5e\\xef\\xde\\xd9\\x3e\\\n\\xdf\\x10\\x32\\xaa\\xd4\\xa4\\x95\\xf6\\x1e\\x43\\xba\\x96\\x3e\\x90\\x7d\\x50\\\n\\xf5\\x9a\\xb3\\x67\\xd7\\xda\\xf3\\x50\\x14\\x76\\xd2\\xae\\x7d\\xf5\\x4d\\xaf\\\n\\xfb\\x3e\\x7e\\xe5\\xd6\\xed\\x78\\xbe\\x05\\x2d\\xda\\x86\\x77\\xde\\x59\\xd5\\\n\\x6d\\x7c\\xa1\\xe8\\x63\\x9d\\x62\\xb6\\xed\\x68\\xdb\\xa2\\xb0\\xdb\\xbf\\x0f\\\n\\x7d\\xa6\\x0c\\x88\\x1b\\x32\\xb2\\xc9\\xab\\xdc\\xf9\\xfa\\x3a\\x7c\\xef\\xd1\\\n\\xdc\\x7a\\xf2\\xba\\x6f\\xde\\xa7\\xce\\x8e\\x79\\x38\\xd5\\x6d\\x6a\\xe9\\xf7\\\n\\xc5\\xed\\xee\\x84\\x0d\\xbe\\x36\\xc8\\xee\\x48\\xeb\\x4c\\xbd\\x73\\x1c\\x29\\\n\\x71\\x74\\xe7\\x81\\x0e\\xcd\\x5f\\xbb\\xd6\\x99\\x56\\x7b\\xd7\\xfd\\x32\\x17\\\n\\xfb\\x05\\x1d\\xfb\\x16\\x9a\\xb5\\xf6\\xad\\xc7\\x7b\\xc6\\x7d\\xcd\\x17\\x5e\\\n\\x39\\x6f\\xb1\\x52\\xed\\xa7\\x8f\\xf2\\x38\\xb4\\xb8\\x4f\\x50\\x9f\\xed\\xc3\\\n\\x37\\x79\\xfe\\xb4\\xe9\\xd4\\x7b\\xf4\\xb3\\x96\\x35\\x5a\\xd7\\x71\\xf0\\x2b\\\n\\xf4\\x79\\xde\\xf4\\x52\\xcb\\xe6\\xdb\\x55\\x77\\xff\\xaf\\xf5\\xeb\\x8a\\x3d\\\n\\x62\\x26\\xba\\xfa\\x1c\\x2c\\xdd\\xc2\\xb9\\xe7\\x9c\\x5b\\xaf\\x7a\\xce\\xf3\\\n\\x29\\x5a\\xcd\\xf3\\xe4\\xf5\\xa2\\x76\\x1b\\xa2\\xe6\\xce\\xed\\x5d\\xb6\\xcd\\\n\\xc8\\xe3\\x5e\\xfd\\xf7\\xf7\\x89\\x2d\\x52\\xdb\\x3a\\xdc\\x32\\x34\\x20\\xef\\\n\\xaa\\xa3\\x53\\xdc\\xad\\xcf\\x2c\\xae\\xfc\\x6b\\xae\\xeb\\xd3\\xb7\\x4d\\xc3\\\n\\x1f\\x8c\\x39\\xfc\\x31\\xf1\\xde\\xa5\\x8f\\x83\\xcf\\xc3\\xa4\\x5c\\x35\\x6c\\\n\\xdb\\x06\\xb6\\x2b\\x2e\\xb2\\x9d\\x59\\x2e\\x68\\x5a\\xe3\\x07\\xa1\\x9d\\xb6\\\n\\x5a\\xef\\x10\\x57\\x0f\\x78\\x70\\x3a\\xb9\\xf0\\x8a\\x0d\\x43\\x4e\\x58\\x56\\\n\\xae\\xbf\\xe1\\x9d\\xdf\\xb8\\x08\\xcb\\x5e\\x56\\x45\\xe6\\xee\\x9b\\x65\\xfb\\\n\\x71\\xa8\\xd3\\xde\\xee\\x87\\x5e\\xee\\x3b\\xec\\xf8\\x3d\\x76\\x6e\\x9e\\x8a\\\n\\x33\\x56\\x41\\xd9\\x09\\x57\\x4e\\xe7\\xaa\\xb4\\xe1\\xde\\x36\\xe7\\xc4\\x06\\\n\\x6f\\xed\\x2f\\xef\\x6d\\xe8\\x58\\x74\\x4a\\xfd\\x32\\x6b\\x0a\\x5d\\x7b\\xb7\\\n\\xff\\xe6\\x82\\x76\\x9b\\xeb\\xed\\xbd\\x3c\\xbd\\x4c\\x85\\x8b\\xf7\\x8e\\x95\\\n\\x19\\x59\\x69\\xcf\\x96\\x63\\xeb\\xc7\\xb8\\x34\\x28\\xfd\\x50\\xec\\x77\\x6b\\\n\\xee\\x97\\x8a\\x2e\\x73\\xc3\\xfb\\x8d\\xd9\\x74\\x68\\x72\\xa6\\xa3\\xd9\\x6c\\\n\\x57\\x5a\\xbd\\xbe\\x7c\\xde\\x2a\\xef\\x8c\\xe3\\xe5\\x7b\\x9d\\x5b\\x59\\xb1\\\n\\xf9\\x38\\x77\\xab\\xf5\\x16\\xff\\x44\\xef\\x6e\\xdf\\xab\\x2f\\xdc\\xee\\x9d\\\n\\xd9\\xb7\\x9c\\x6f\\xd5\\x2b\\x87\\x4a\\xdc\\xeb\\x57\\xa3\\x73\\x2b\\x8b\\xc0\\\n\\x00\\x7f\\x8b\\xf5\\x7d\\xbf\\x8f\\xdc\\x3a\\x6b\\x7a\\x0e\\x8f\\xc7\\x2d\\x7a\\\n\\x4f\\xc8\\xe2\\x68\\xb9\\xff\\xd2\\x17\\xdb\\x76\\x51\\xb7\\x4f\\xcd\\xfa\\x7e\\\n\\xd1\\x3d\\x7b\\xb2\\xc3\\xeb\\xec\\xfe\\xc5\\xb6\\xd7\\xdb\\x5c\\xbd\\x12\\xbc\\\n\\xda\\x1c\\xe0\\x6a\\x39\\xc4\\x35\\xc0\\xb5\\xf3\\x80\\x4a\\xd7\\xe2\\x73\\x86\\\n\\x14\\xdb\\xee\\x1d\\xd1\\x3f\\xa1\\x72\\x8b\\x10\\xff\\xac\\x63\\xde\\x36\\x9f\\\n\\x96\\xc3\\x63\\x4c\\x97\\x0b\\x4b\\xe6\\xc6\\x36\\x0b\\x4f\\x78\\x54\\xa3\\xbf\\\n\\xbd\\xeb\\xf5\\xee\\xd1\\x4f\\x4f\\xa4\\x1c\\x58\\x57\\xd9\\x7e\\xf8\\x85\\x7f\\\n\\x0e\\x0c\\x90\\xd5\\xbd\\xf7\\xcd\\xff\\xc0\\xa1\\x97\\xfd\\xf7\\xfa\\x4c\\xca\\\n\\x9c\\xe4\\x9f\\x39\\xfa\\xd1\\xea\\x82\\x75\\xca\\x2d\\xc2\\xc5\\xc7\\xa6\\x0d\\\n\\x5b\\x35\\xd8\\x5f\\xcf\\x6b\\x6a\\x29\\x5c\\x7c\\xa4\\x57\\x23\\xe5\\x0b\\x82\\\n\\x72\\x64\\xb1\\x80\\x0c\\x02\\x4c\\x68\\x71\\x8a\\x5a\\x53\\x34\\x86\\xa2\\xe5\\\n\\x14\\x9d\\xa0\\xe8\\x3a\\x45\\xcf\\x28\\x8a\\xa3\\x28\\x81\\x22\\x19\\xa1\\x04\\\n\\xf2\\xec\\x19\\xf1\\x73\\x82\\x84\\x19\\x43\\x78\\x14\\x27\\x3c\\xcd\\x30\\x4d\\\n\\x58\\x53\\x54\\x8f\\xa2\\x00\\x8a\\xce\\x40\\xea\\xb2\\x15\\x8a\\x12\\x08\\xef\\\n\\x00\\x12\\x97\\x75\\x9a\\xa4\\xcc\\x0c\\x65\\xb0\\xa1\\xa8\\x17\\x45\\x87\\x28\\\n\\xfa\\x02\\xc2\\x97\\xb7\\x3a\\xfa\\x42\\xe2\\xee\\x49\\x64\\x31\\xc3\\xf0\\x10\\\n\\x51\\xd4\\x94\\xa2\\xfd\\x14\\x25\\x41\\xda\\x97\\xb9\\x32\\x4a\\x22\\x32\\x35\\\n\\x25\\x32\\x9a\\x21\\x2c\\xf0\\xfd\\x1a\\x4d\\xd1\\x0b\\x30\\x7e\\x59\\xab\\xa3\\\n\\x17\\x44\\x56\\x73\\x9b\\xa0\\x3f\\xec\\x28\\x0a\\x04\\xfd\\xbe\\xe7\\x1f\\x29\\\n\\xba\\x46\\xd1\\x4e\\x8a\\xe6\\x52\\xe4\\x47\\x11\\xea\\xbd\\xe1\\xb7\\xa3\\x2b\\\n\\xa1\\x5e\\xe4\\x99\\x1f\\xf1\\xb3\\x93\\x84\\xf9\\xa8\\x47\\xbc\\x9f\\x88\\xec\\\n\\x79\\x05\\xcf\\x95\\xf4\\x0f\\xd4\\xa4\\x9c\\x0c\\x74\\x9f\\x5c\\x9b\\x3c\\xff\\\n\\x06\\x8a\\x3e\\x5a\\x13\\x8a\\x0a\\x08\\x20\\x4b\\x01\\xc2\\x8b\\xe9\\x5b\\x7e\\\n\\xd3\\x52\\x26\\x4c\\xc3\\x24\\x92\\x26\\x33\\xd4\\xa3\\x13\\x45\\xcf\\x41\\xf3\\\n\\xfc\\x8d\\xa1\\x68\\x09\\x45\\x8d\\x28\\xca\\x92\\x06\\xf2\\x61\\x1c\\x8d\\x49\\\n\\x9c\\x6f\\xb4\\x90\\xf3\\x39\\x49\\x9b\\x19\\xfc\\x28\\x4c\\xd1\\x71\\xd0\\xbc\\\n\\xbf\\xb5\\x8d\\xa2\\xfa\\x60\\xdc\\xfe\\x16\\xc6\\xdd\\x80\\xc8\\xa2\\x69\\x7f\\\n\\xf4\\x18\\xd0\\x69\\x35\\x43\\x01\\x2f\\x8a\\x3e\\x83\\xfa\\xbc\\xc3\\xf7\\x0d\\\n\\xdb\\x52\\x3b\\xa3\\x48\\xa9\\x1a\\x28\\x13\\xca\\xf6\\x16\\xd4\\xa7\\x03\\xfb\\\n\\x33\\x5e\\x46\\x91\\xd2\\xb4\\x80\\x7d\\xe4\\x5d\\xa0\\x3e\\xbf\\x5e\\x53\\x34\\\n\\x1c\\xd2\\xa6\\x7d\\xd7\\x17\\x28\\x23\\xca\\x8a\\x32\\xab\\x4b\\x17\\xa6\\x3d\\\n\\xa3\\x8e\\x13\\xca\\x52\\xf4\\x08\\xd4\\xf7\\xe7\\xfc\\x29\\xca\\x66\\x24\\x19\\\n\\xf5\\x41\\x76\\xa0\\xa7\\xe0\\xd5\\xf5\\x17\\x31\\x0f\\xca\\x1a\\x47\\x44\\xa3\\\n\\xa1\\x25\\xa8\\x6f\\xef\\x71\\x6e\\x2d\\x3d\\x7c\\x27\\x31\\x0d\\x98\\x16\\x55\\\n\\x69\\xc5\\xbc\\x68\\x61\\x2c\\x01\\xd3\\x18\\x43\\x29\\x4a\\x06\\xe5\\x79\\xf1\\\n\\x01\\xd2\\x67\\x3f\\x19\\xd3\\x84\\x69\\x53\\x96\\x6e\\xcc\\x93\\x21\\x46\\x93\\\n\\x2e\\x6d\\x80\\x6d\\xb9\\xaa\\xf7\\xe0\\x14\\x45\\x05\\x8d\\x26\\x9d\\xe1\\x81\\\n\\x69\\x3b\\x0d\\xaa\\xf3\\x60\\x8a\\xd1\\xa4\\x33\\x2c\\x70\\x2e\\x4c\\x59\\x9a\\\n\\x53\\x80\\x9e\\x5f\\xb1\\x34\\x9a\\x74\\x69\\x07\\x1c\\x33\\x4e\\x05\\x3a\\xcd\\\n\\xca\\xf2\\x23\\xd0\\x68\\xd2\\x19\\x06\\x33\\x40\\x79\\x5a\\xbf\\x52\\xd4\\xca\\\n\\x78\\xa2\\x19\\x0d\\xa8\\x57\\x80\\x69\\x57\\x96\\x2f\\xd3\\x8d\\x27\\x9a\\xa0\\\n\\x18\\x05\\xca\\xd3\\x88\\x73\\x77\\x95\\x8c\\x27\\x9a\\xd1\\x51\\x19\\xe8\\x3c\\\n\\x50\\x96\\x3f\\xa3\\x8c\\x27\\x9a\\x20\\xc0\\x3e\\x8f\\xb2\\x76\\x2e\\x1a\\x68\\\n\\xbd\\x9a\\x8c\\x0e\\xcc\\x03\\xcc\\x0b\\x65\\xdf\\xc5\\xbf\\xb5\\x2f\\x5c\\x9d\\\n\\xa2\\x44\\xe0\\x4f\\x17\\xea\\x59\\x15\\x32\\x9e\\x68\\x26\\x07\\x1c\\x23\\x46\\\n\\x01\\x7f\\x5e\\x61\\x1e\\x56\\x37\\x9e\\x68\\x3a\\x21\\x3f\\x45\\x2f\\xc1\\xfc\\\n\\xde\\x6b\\x03\\x55\\xed\\x00\\xe6\\x65\\x7e\\xe3\\x89\\xa6\\x15\\xb0\\x7f\\x7b\\\n\\x0e\\xf8\\xd3\\x11\\x0f\\x19\\x6f\\xae\\x4b\\x1b\\xb8\\x00\\x9d\\x47\\x7c\\x79\\\n\\x87\\x79\\xfa\\x37\\xe8\\x16\\xa1\\x0e\\x05\\x9f\\xfc\\x3f\\x80\\x5e\\x2b\\x33\\\n\\x43\\x35\\x1a\\x52\\xf4\\x13\\xf8\\xf3\\x70\\xbc\\x11\\xe5\\xd2\\x04\\xd8\\x9f\\\n\\xc5\\x72\\xe6\\x93\\x7d\\xb8\\x11\\xe5\\xfa\\xdb\\xe0\\x0b\\xca\\xdf\\x21\\x53\\\n\\x1d\\x2f\\x65\\xa6\\xe8\\x3f\\xe0\\x97\\x7b\\xa7\\x11\\xe5\\xfa\\x5b\\x81\\x79\\\n\\xc6\\x97\\x97\\x11\\x14\\x65\\x32\\xa2\\x5c\\xca\\x80\\x6d\\x13\\x9f\\xbc\\xd8\\\n\\xaf\\xcd\\x65\\x44\\xb9\\xfe\\x56\\x60\\x9e\\x29\\x1b\\x13\\x8c\\x33\\xa2\\x5c\\\n\\x7c\\xc0\\x79\\x6d\\x3e\\x1d\\xfc\\x5f\\x14\\xb9\\x19\\x51\\xae\\xbf\\x1d\\x98\\\n\\x77\\x98\\x87\\xdc\\x7c\\xc5\\xbc\\x36\\xa5\\x75\\x92\\xcd\\xc0\\x5f\\x4f\\x97\\\n\\x18\\x53\\xa8\\x74\\x82\\xa5\\xc0\\x9f\\xb7\\x9b\\x8c\\x29\\x14\\x0b\\x15\\x81\\\n\\x7f\\x8e\\x0f\\xc7\\xac\\x39\\x8c\\x28\\x57\\x7a\\x41\\x4e\\xe0\\x9f\\x4b\\xc1\\\n\\x76\\xa1\\xa2\\x11\\xe5\\x62\\x70\\x00\\xf8\\xeb\\x67\\x77\\x63\\x0a\\x95\\xce\\\n\\xe0\\x09\\xfc\\x79\\x7c\\xc0\\x98\\x42\\x51\\xa8\\x00\\xfc\\xef\\x3e\\xee\\x9d\\\n\\x30\\xef\\x97\\x15\\x0e\\x98\\x97\\x98\\xa7\\x7c\\xeb\\x03\\xe5\\x8d\\x28\\xd7\\\n\\x16\\x1e\\x99\\x90\\x1a\\x1b\\x51\\xa6\\xf4\\x0a\\xcc\\x53\\xbe\\xbc\\xde\\x62\\\n\\x24\\x79\\x70\\xfd\\x86\\x6f\\xae\\x27\\xc4\\x48\\xf2\\x64\\x04\\x5c\\x02\\xfe\\\n\\x39\\x21\\x63\\xac\\xa5\\x4d\\xe1\\x91\\x05\\xa9\\xa5\\x11\\x64\\xc9\\x28\\x40\\\n\\x3d\\x19\\xbe\\x3c\\x9f\\x94\\xc6\\x72\\xa0\\x9e\\x96\\x94\\x47\\x8e\\x47\\x90\\\n\\x76\\x3a\\x5c\\x78\\x84\\x41\\x23\\x42\\x56\\x69\\x14\\x27\\x1b\\x38\\xdf\\xd9\\\n\\x80\\x50\\xe6\\x34\\x8a\\x13\\xf3\\x96\\x4f\\x67\\x5e\\x0a\\x69\\xab\\x3b\\x57\\\n\\x8f\\x47\\x06\\xa4\\x91\\x69\\x14\\x7f\\x1e\\x8a\\xee\\xb0\\xe2\\xbd\\x4b\\x9e\\\n\\xa5\\x15\\x72\\x73\\xe2\\xbf\\x43\\x9e\\xa5\\x05\\x46\\x02\\x7f\\xde\\xd7\\x4b\\\n\\xa3\\xf8\\x11\\x2b\\x79\\xe2\\xc7\\xfd\\x6f\\x69\\xb5\\xd7\\x79\\x2a\\x4f\\xfc\\\n\\x53\\xd3\\x28\\x6e\\x63\\xc7\\x8f\\x79\\xfc\\x9d\\x27\\xfe\\x95\\x69\\x14\\x3f\\\n\\xae\\x41\\xf3\\xed\\x71\\x3b\\x6c\\x80\\xb8\\x70\\xee\\x03\\xe7\\x38\\xd8\\x7b\\\n\\xa7\\xf3\\x51\\x74\\x81\\x27\\xfe\\x0b\\xe4\\x37\\x06\\x59\\x49\\xd8\\x9c\\x06\\\n\\x90\\x8b\\x6f\\xcf\\xda\\x2e\\x03\\xc4\\xa3\\x0c\\x87\\x79\\xe2\\xc7\\x32\\x49\\\n\\x8b\\x6f\\x40\\x0d\\x9e\\xb8\\x0d\\x31\\xdf\\xd3\\x01\\x14\\x7b\\x84\\xd0\\x0e\\\n\\x43\\x5f\\x8a\\x76\\x80\\xf2\\xf5\\x65\\xa6\\x2f\\x8c\\x7e\\xfa\\x51\\x14\\x4b\\\n\\x9e\\x7d\\x26\\xbc\\x84\\xc4\\x7e\\x9e\\xb8\\xf7\\x0b\\x1c\\x87\\x2a\\x28\\x9b\\\n\\x0f\\xaa\\x96\\x06\\x71\\x8b\\x79\\xe2\\x45\\x7d\\x05\\x21\\xd7\\xf8\\x90\\x97\\\n\\x26\\xfb\\x81\\x35\\x25\\xe4\\xa5\\x49\\x3b\\xd0\\x91\\xa2\\xb5\\x40\\xdb\\x9e\\\n\\xb0\\xe5\\xfc\\xe6\\x4e\\x7e\\x53\\xa6\\xa3\\x25\\x23\\xbf\\xad\\x25\\x7e\\xd9\\\n\\xc8\\x4d\\x78\\xe2\\x6f\\x42\\xd4\\x45\\x94\\x8d\\x4f\\x47\\xc4\\x5f\\x00\\xde\\\n\\xea\\x70\\x91\\x27\\xde\\x0b\\x02\\xc7\\x51\\x91\\x27\\x0e\\x7d\\xa9\\x82\\x9a\\\n\\x38\\xb9\\x7a\\x4b\\xb7\\x81\\xfe\\x9e\\xfc\\x4b\\x51\\x98\\x0e\\xf1\\x61\\x18\\\n\\x0f\\x8a\\x1c\\xe0\\xcf\\x3e\\xbb\\x10\\x7a\\xdd\\x7c\\xdf\\xc0\\x8b\\x02\\xf0\\\n\\x55\\x05\\x1c\\x67\\xf1\\xe9\\xf4\\x4e\\x14\\x38\\x1e\\xfc\\x76\\x33\\xed\\xb7\\\n\\x10\\xf4\\x01\\xd4\\xdb\\x5f\\xe1\\xd3\\xc3\\xc7\\x6f\\xaa\\xaa\\x7d\\x3a\\xea\\\n\\x08\\xc3\\xf2\\xd9\\x10\\x8a\\xd6\\x29\\x57\\x52\\x63\\x22\\x0f\\x5f\\x2c\\x1b\\\n\\x43\\x8e\\x85\\x6b\\xf2\\xc4\\x89\\x54\\xd7\\x00\\x71\\xf5\\x55\\x12\\x17\\x43\\\n\\xb8\\x26\\x76\\x8a\\x90\\x32\\x5d\\x63\\x86\\xfa\\x6a\\x10\\x9f\\x26\\x76\\x1b\\\n\\x84\\xa2\\x57\\x3a\\xe4\\x07\\x17\\x75\\x95\\xf0\\x36\\xa4\\xae\\xf8\\x40\\x9e\\\n\\xf8\\xb0\\xcf\\x65\\x88\\xfd\\xf9\\x3b\\x78\\xe2\\x62\\xca\\x1d\\xe7\\xc1\\xd8\\\n\\xeb\\x4b\\x16\\xe4\\x99\\xb2\\x7a\\xb0\\x43\\x83\\xf8\\x94\\xcd\\x67\\x1a\\x82\\\n\\x84\\x98\\xaf\\xc3\\x3c\\xe7\\xeb\\x03\\x0c\\x14\\x80\\xb7\\x32\\xac\\xe0\\x89\\\n\\xef\\x8e\\x01\\xe2\\xf9\\x07\\xf8\\xfb\\xf9\\x58\\xbe\\x4e\\x2a\\xc2\\x15\\x03\\\n\\xfe\\x3a\\x80\\xbc\\xf2\\xa9\\x08\\x87\\xc0\\x3a\\xc4\\x97\\x3e\\x36\\xe1\\x9a\\\n\\xfb\\x41\\x8a\\xba\\x11\\x39\\x32\\x13\\x2a\\x4a\\x9e\\x1d\\x04\\x7e\\x7d\\x1d\\\n\\x36\\xad\\x00\\xe1\\xd6\\x46\\xd9\\x73\\x50\\x0c\\x2d\\x17\\x88\\x37\\x1f\\x24\\\n\\x3c\\xf1\\x6d\\x13\\x90\\x3f\\xce\\xe1\\xe1\\xbe\\x47\\xbe\\xbe\\x0d\\x92\\x26\\\n\\x36\\x12\\x94\\xcd\\x91\\x23\\x4f\\xdc\\x63\\xcc\\xed\\xd7\\xb3\\xe1\\xad\\x24\\\n\\x2c\\x12\\xda\\x85\\x2e\\xa7\\x41\\xfc\\xe5\\x89\\x5f\\x65\\x7c\\xbc\\x35\\xe0\\\n\\xa1\\x29\\xb6\\xf3\\xf0\\x3f\\x2f\\x20\\x7f\\x2e\\xf8\\xec\\xb2\\x4d\\x16\\x88\\\n\\x37\\xbe\\x47\\x7c\\xf5\\x99\\x21\\xec\\x33\\x69\\xf2\\xde\\xa0\\x1f\\x55\\xfd\\\n\\x81\\x9b\\xc0\\xaf\\x3f\\x8b\\xba\\x4a\\xef\\x94\\x84\\xc1\\xb9\\x1d\\x6d\\xfa\\\n\\x55\\xe8\\x77\\xb7\\x12\\x5e\\x6f\\x41\\x38\\xbd\\x28\\xbe\\x6f\\x96\\x54\\x20\\\n\\xde\\x5c\\x60\\xf9\\xf0\\xd9\\xed\\xe8\\x21\\x10\\xff\\x06\\x3c\\xbc\\xd9\\x74\\\n\\x4a\\x0b\\x5e\\xa7\\xd4\\xf0\\xe2\\x9b\\x2b\\x57\\xb6\\x4f\\x39\\x18\\x74\\xdb\\\n\\x77\\x23\\x52\\x21\\x87\\xaf\\x0e\\xfc\\xf8\\xd0\\x83\\x87\\x37\\x96\\x91\\x21\\\n\\xd6\\xa3\\x1c\\x78\\xe2\\x42\\x72\\x17\\x88\\xbf\\xb1\\xcb\\xff\\x1e\\x8f\\x3f\\\n\\xdc\\x8b\\xf5\\x8f\\xf6\\x49\\xf9\\x8d\\xfc\\xc0\\xbf\\x9f\\xeb\\xae\\x1e\\x3c\\\n\\xd9\\x70\\xe7\\xe1\\x8d\\x64\\x08\\xdd\\xe0\\x72\\x4a\\xe2\\x2a\\x23\\x10\\x7f\\\n\\x75\\xed\\x3f\\xda\\x55\\x36\\x54\\xfb\\xff\\x3f\\x25\\x7e\\x03\\xf4\\x49\\x10\\\n\\x41\\x80\\x12\\xde\\xff\\x13\\x80\\x77\\x19\\x25\\xbc\\x35\\xe9\\xa7\\x68\\x0b\\\n\\x65\\x75\\x4d\\xc8\\x7d\\xa9\\xea\\xfa\\x7f\\xcd\\x35\\xe0\\xa1\\x69\\xff\\x8f\\\n\\xd1\\x1f\\xc0\\x39\\xdf\\xc5\\x4a\\xc2\\x08\\x61\\x7f\\xcc\\x51\\x09\\xef\\x45\\\n\\x24\\x6e\\x7d\\xf4\\x07\\xec\\x95\\xf0\\x16\\xaa\\x4d\\x66\\xa3\\xb9\\x92\\xb8\\\n\\x54\\xf5\\xa7\\x75\\x05\\x8e\\xd5\\x94\\x8d\\xff\\x54\\xed\\x1d\\x2f\\x0a\\xca\\\n\\xc7\\x7f\\x6c\\x9b\\xa1\\x5c\\xfd\\x01\\x3e\\x7a\\x2c\\x58\\x6a\\x00\\x9e\\xa8\\\n\\x89\\x4b\\x57\\xfd\\x01\\x5b\\x25\\xfc\\x9a\\xe9\\x2f\\xf2\\x1f\\x68\\xad\\x24\\\n\\x2e\\x43\\xe9\\xf9\\xaa\\x9a\\xff\\x69\\x01\\x7f\\xce\\xff\\xb4\\x00\\xcd\\xe7\\\n\\x7f\\xf8\\xd6\\xef\\xb9\\x14\\x2c\\x60\\x5a\\x82\\x35\\x88\\x4f\\x17\\xfd\\x01\\\n\\x4b\\x25\\xbc\\x5a\\xeb\\x2f\\xf2\\x1f\\x50\\x56\\xfe\\x86\\x42\\x3f\\x25\\xf1\\\n\\x31\\x84\\xfd\\x01\\x66\\xfe\\x57\\xd5\\x9a\\x1c\\x12\\x77\\xfe\\x57\\x99\\xde\\\n\\xb2\\x31\\xcb\\x5f\\x57\\x3d\\xde\\xf4\\x58\\xfe\\x38\\xb7\\xa9\\xad\\xed\\x7f\\\n\\x55\\x84\\x6b\\x30\\xec\\xf5\\x9f\\x5e\\x1a\\x84\\x39\\x2f\\x60\\x7a\\x24\\x1a\\\n\\xc4\\xd7\\x4b\\x47\\xde\\xe9\\xb1\\xfc\\x0d\\xb1\\xfe\\xcb\\xdd\\x2b\\x85\\x7d\\\n\\x41\\xac\\x63\\x29\\xc0\\xbf\\xc6\\x87\\x6b\\x86\\x42\\xe8\\xd3\\x20\\x0f\\xbe\\\n\\x35\\x40\\x26\\xde\\x38\\xd0\\x6f\\x9c\\x91\\x1e\\xcb\\x1f\\x75\\x35\\xd2\\x52\\\n\\xff\\x43\\xd9\\x98\\xa1\\xa6\\x00\\x69\\xa9\\xa5\\x84\\xb7\\x50\\x36\\x0f\\xd3\\\n\\x63\\xf9\\x23\\xd8\\xfa\\x5f\\xef\\x41\\x7b\\xfd\\x2f\\xe6\\xfb\\xa1\\x89\\xfe\\\n\\x17\\x8e\\x07\\xf8\\xe6\\x36\\x85\\xb0\\x5b\\xc1\\x67\\xc7\\x01\\xd7\\xed\\x84\\\n\\xd2\\x17\\x4e\\xaf\\xe5\\x8f\\xc0\\x7e\\x00\\xce\\x65\\xb0\\xcf\\x5a\\xd4\\x46\\\n\\xff\\x13\\x75\\x7e\\x34\\x9d\\x6b\\x3f\\xc6\\xc3\\x13\\xdb\\x67\\x7d\\x74\\x1b\\\n\\xdc\\x81\\xff\\xdb\\x72\\x4c\\x0f\\x9e\\x5c\\xa4\\xe7\\xf2\\x57\\x06\\x43\\xe8\\\n\\x5f\\x37\\xe5\\xe1\\x89\\x84\\xba\\x1a\\xba\\xd8\\xab\\x2b\\x4e\\xc2\\xf2\\xf1\\\n\\x6c\\xa2\\xa7\\xac\\x6c\\x64\\xc4\\xf2\\xe7\\xce\\xdf\\xdc\\x01\\xfd\\xf7\\x7f\\\n\\xe0\\x1c\\xc2\\x55\\xe0\\x4f\\x23\\x8e\\x2f\\x5d\\xb4\\xe0\\x85\\x7e\\x95\\x9d\\\n\\x55\\x78\\x05\\x84\\x9d\\x33\\xc9\\x88\\xe5\\x8f\\xc0\\xf9\\xdb\\x86\\x84\\x84\\\n\\xd2\\x79\\x53\\xd6\\x06\\x20\\xa1\\x6e\\x9d\\x3a\\xfd\\x81\\xdc\\xc4\\x8f\\x32\\\n\\xbb\\xa7\\x48\\xf5\\x05\\x92\\x95\\x41\\x46\\x2d\\x7f\\xa1\\x81\\x73\\xe9\\xea\\\n\\xe6\\x69\\x91\\xf0\\x3c\\x17\\xd4\\xf5\\x1f\\x4b\\x51\\x6f\\x42\\xe8\\x3e\\x00\\\n\\x9a\\x9d\\x0d\\xc8\\xe8\\x15\\x0b\\x05\\x73\\xf9\\x0b\\x83\\x23\\xa0\\xbe\\xec\\\n\\x84\\xa2\\x83\\x02\\xca\\x6d\\x2e\\x7f\\x61\\x20\\xe4\\x7c\\x83\\x3a\\x8a\\x17\\\n\\x50\\x6e\\x73\\xf9\\x0b\\x03\\xb4\\xab\\xc8\\x4d\\xdb\\x5e\\xe0\\xdf\\xe7\\xae\\\n\\x29\\x49\\x09\\x0f\\xee\\xf3\\x1b\\x02\\xca\\x6d\\x2e\\x7f\\xdd\\x80\\x3a\\x20\\\n\\xf5\\x08\\xa1\\x1b\\x6d\\xed\\x31\\x7b\\x4e\\x70\\xcc\\xbe\\x10\\xe8\\x7e\\x3a\\\n\\xce\\x23\\xa0\\xbd\\x45\\x55\\xe7\\x34\\x70\\xe9\\x35\\x09\\x93\\x95\\xf0\\x58\\\n\\x08\\x8a\\x79\\x00\\x9c\\x0b\\xae\\x2d\\x60\\x3a\\xcc\\xe5\\xaf\\x3d\\xb0\\x9f\\\n\\x8e\\x7a\\x40\\x4c\\x1a\\xd0\\x6d\\x4b\\x08\\xf5\\x31\\xf8\\x74\\x73\\xb0\\x8e\\\n\\xe0\\xb8\\x1d\\xcb\\x92\\xaf\\x2e\\xc4\\x90\\xdf\\x9a\\x00\\xbf\\x7e\\x69\\x49\\\n\\xc2\\x5b\\xe8\\xfd\\xc8\\xe6\\xf2\\xd7\\x1e\\x7c\\x3a\\x59\\xda\\xac\\xc1\\x18\\\n\\x7b\\xff\\x37\\x1b\\xe6\\xf2\\x57\\x0e\\xdc\\x47\\xec\\x0a\\xf4\\x59\\x9c\\x0c\\\n\\x84\\xb0\\x1f\\xb0\\x8d\\x27\\xfc\\x56\\x81\\x65\\xd7\\x14\\xe6\\xf2\\xe7\\x07\\\n\\xea\\xd6\\x31\\x7d\\x7a\\xfc\\xae\\x0b\\x69\\x3f\\xc0\\x8b\\x27\\x6c\\x2f\\x43\\\n\\x26\\x46\\x05\\xcc\\xe5\\xff\\x27\\xf0\\xbd\\xe7\\xb3\\x47\\xad\\x2b\\x61\\x1d\\\n\\xc8\\x0e\\xa9\\xe1\\x0f\\x74\\x1d\\x89\\x85\\xb4\\xd9\\x77\\xaf\\x0c\\xe6\\xf2\\\n\\xff\\x13\\x78\\x46\\x82\\x50\\x65\\xcf\\x90\\x31\\xed\\x6c\\xaa\\x82\\xb9\\xfc\\\n\\xff\\x04\\xbe\\xab\\x42\\xda\\x0f\\x40\\xfd\\x03\\x53\\x3d\\x7b\\xde\\x5c\\xfe\\\n\\xfc\\xd0\\xc4\\x7e\\xc0\\x49\\x42\\x42\\xd8\\x0f\\x30\\x16\\xcc\\xe5\\xcf\\x8f\\\n\\xb4\\xb6\\x1f\\x60\\x2c\\x98\\xcb\\xff\\x4f\\xa8\\xb2\\x1f\\xa0\\x4a\\x97\\x43\\\n\\x1f\\xfb\\x01\\xc6\\x82\\xb9\\xfc\\x15\\x60\\xd6\\xdf\\x0d\\x65\\x3f\\x40\\x0c\\\n\\x86\\xd9\\xef\\xa4\\x0f\\xcc\\xe5\\x4f\\x03\\xe7\\x5c\\xd9\\x73\\xba\\x5c\\x32\\\n\\xb4\\xfd\\x00\\x63\\xc1\\x5c\\xfe\\x34\\x94\\xd9\\x24\\x66\\xe8\\xa4\\x16\\xbc\\\n\\x74\\xd9\\x3f\\x6e\\x2c\\x98\\xcb\\x9f\\x86\\xb9\\xfc\\x33\\x76\\xf9\\xab\\x6b\\\n\\xff\\x0d\\x69\\x3f\\xc0\\x98\\x30\\x97\\xbf\\x02\\xd8\\x37\\x53\\xd5\\xff\\x13\\\n\\xc2\\x7e\\x80\\x8d\\xe0\\x52\\xeb\\x07\\x73\\xf9\\xff\\x09\\x5d\\xed\\x07\\x38\\\n\\x81\\x66\\xf6\\x03\\x4c\\x09\\xe6\\xf2\\xe7\\x87\\x21\\xed\\x07\\x98\\x12\\xcc\\\n\\xe5\\xcf\\x0f\\x4d\\xed\\x07\\x60\\xbf\\x50\\x5b\\xfb\\x01\\xa6\\x04\\x73\\xf9\\\n\\xff\\x09\\x43\\xdb\\x0f\\x30\\x25\\x98\\xcb\\xff\\x4f\\xa4\\x85\\xfd\\x00\\x53\\\n\\x81\\xb9\\xfc\\xff\\x44\\x5a\\xdb\\x0f\\x30\\x26\\xcc\\xe5\\xcf\\x0f\\x7d\\xec\\\n\\x07\\xa0\\x5f\\x6d\\xec\\x07\\x18\\x13\\xe6\\xf2\\x57\\x0e\\x21\\xec\\x07\\x98\\\n\\xea\\x7b\\xcf\\xc0\\x5c\\xfe\\xda\\x43\\x5f\\xfd\\x6f\\x53\\x82\\xb9\\xfc\\xb5\\\n\\x07\\xae\\x13\\xb3\\xf7\\x7b\\x31\\xfb\\x3f\\xfe\\x46\\x98\\xcb\\x5f\\x37\\x70\\\n\\xf7\\x7f\\xfd\\xad\\x30\\x97\\x7f\\xc6\\x86\\xb9\\xfc\\x33\\x36\\xcc\\xe5\\x9f\\\n\\xb1\\x61\\x2e\\xff\\x8c\\x0d\\x73\\xf9\\x67\\x6c\\x98\\xcb\\x3f\\x63\\xc3\\x5c\\\n\\xfe\\x19\\x1b\\xe6\\xf2\\xcf\\xd8\\x30\\x97\\x7f\\xc6\\x86\\xb9\\xfc\\x33\\x36\\\n\\xcc\\xe5\\x9f\\xb1\\x61\\x2e\\xff\\x8c\\x0d\\x63\\x97\\x3f\\x9e\\xff\\xeb\\x4f\\\n\\xd1\\x7c\\xa0\\xed\\x9f\\xb1\\x69\\x06\\xf9\\x6d\\x3c\\x45\\x43\\x80\\x3e\\xaf\\\n\\x14\\xf5\\x6c\\xf1\\x8c\\xfa\\x22\\x90\\x7a\\x5d\\x3e\\xa3\\x02\\xf3\\xc0\\x11\\\n\\xe8\\x3c\\x69\\x09\\x74\\x1e\\x61\\x5e\\xf9\\x01\\x9d\\x77\\x81\\xf0\\x67\\xbe\\\n\\xce\\x27\\xbf\\x61\\xde\\x1b\\xbb\\xfc\\xf5\\x25\\xb4\\x9b\\x77\\x91\\xa2\\xf5\\\n\\x40\\xd7\\x93\\xc6\\x40\\xdb\\x62\\x4e\\x6f\\xc0\\x34\\xa1\\x6d\\x40\\x2c\\xd7\\\n\\x8d\\x14\\x5d\\x02\\xed\\x6c\\x4a\\x6a\\x43\\x7f\\x53\\xf9\\x2b\\x23\\xd4\\xc5\\\n\\x47\\x5d\\xac\\x01\\x40\\xdb\\x4e\\xfc\\xdb\\x80\\x32\\xa3\\xec\\x98\\x06\\x75\\\n\\xf6\\x45\\xfe\\x86\\xf2\\x6f\\x99\\xc6\\x69\\xe0\\x12\\x9e\\xc7\\xb9\\x00\\xe8\\\n\\x33\\x99\\x0c\\x75\\xe6\\xa4\\x3e\\x40\\x99\\x50\\x36\\x94\\x11\\x65\\x35\\x66\\\n\\x5e\\x69\\x62\\xe7\\x40\\x5b\\xe0\\xfe\\xa7\\x04\\x23\\xa7\\x8b\\xa1\\xa7\\x40\\\n\\xdb\\x62\\x28\\x64\\x80\\x74\\x6a\\x0b\\x3c\\x17\\xdd\\x9f\\xa2\\x48\\x30\\x7e\\\n\\xbe\\x20\\x61\\x19\\x19\\x6a\\xaf\\x1a\\xea\\xca\\xdc\\x25\\xf1\\xa0\\x7e\\x2c\\\n\\xee\\xa1\\xc1\\xba\\x8e\\xba\\x54\\xa8\\x43\\x75\\x9e\\x43\\x11\\x84\\xa2\\x28\\\n\\x7a\\x07\\xaa\\x75\\x6f\\x75\\x21\\x3c\\x47\\x0b\\xed\\x6b\\x57\\x37\\x50\\x7a\\\n\\x55\\x01\\xe3\\xdc\\x4d\\x64\\x10\\x3a\\x4d\\xa8\\xaf\\x8c\\x79\\xf6\\x1f\\xd0\\\n\\xf9\\x87\\xba\\xa9\\x7c\\xf9\\x8a\\xe7\\x55\\x60\\x19\\x60\\x59\\xa0\\x7d\\x69\\\n\\x3c\\x07\\xe7\\x5f\\x43\\x26\\x5a\\x00\\xa0\\x3e\\x6d\\x09\\xa0\\xcf\\xd5\\xc2\\\n\\xbe\\xee\\x14\\x8a\\x36\\x03\\x6d\\x13\\x5d\\xd5\\xb9\\x29\\xea\\xe8\\x34\\xd0\\\n\\x36\\xbc\\x0d\\x0d\\x8c\\x43\\x93\\xf3\\x5c\\x95\\x51\\x12\\xd0\\xef\\x0a\\xda\\\n\\x8b\\xc5\\x76\\x03\\xf3\\xc0\\x83\\x22\\x67\\xa0\\xed\\x56\\x66\\x64\\x88\\x80\\\n\\xd6\\xd7\\xc6\\xbd\\x7b\\x9b\\x40\\xf9\\x19\\x4a\\xaa\\x08\\xcf\\xd6\\x70\\x36\\\n\\x80\\x6c\\x58\\x67\\xf7\\xeb\\x20\\x0f\\xf6\\xfd\\xf0\\x6c\\xdf\\xfe\\x40\\xeb\\\n\\x93\\x8b\\x0c\\x20\\x5b\\x7a\\x46\\x19\\x8a\\xc6\\x50\\x14\\x0a\\xfc\\x67\\xe9\\\n\\xf1\\x11\\x7e\\x67\\x70\\xee\\x41\\x88\\x3d\\x7b\\x68\\xf7\\x71\\x1a\\x45\\xdf\\\n\\x35\\x8c\\x1b\\x29\\x1c\\xe8\\xb1\\x6c\\x59\\x01\\xe2\\x37\\x43\\x01\\xdc\\xbb\\\n\\x8f\\xe7\\xfc\\xa9\\xdb\\xaf\\xcb\\x10\\xf6\\xc9\\xea\\xe8\\x11\\x9f\\x1b\\x68\\\n\\xde\\xaf\\x7b\\x45\\x64\\xe3\\x3b\\x3b\\xc0\\x0c\\x61\\x81\\xfa\\xda\\x68\\xdf\\\n\\xfb\\x3a\\xa8\\x2f\\x97\\x5f\\x14\\xcd\\x01\\xed\\xce\\x88\\x43\\xbf\\xb3\\x80\\\n\\xff\\x4c\\x58\\x2e\\x85\\x51\\xd4\\x09\\xfe\\x6e\\x1d\\xf2\\xbf\\x19\\x38\\x5f\\\n\\x88\\x65\\xa0\\xae\\x9c\\xae\\x01\\x6d\\xdf\\x43\\x1d\\x9c\\x88\\x5f\\x4d\\xca\\\n\\xbd\\xb1\\x60\\xa9\\x30\\x43\\x1f\\xe0\\xdc\\x4b\\x17\\x50\\xdf\\x5f\\x44\\x9b\\\n\\xd0\\xaa\\xce\\x5e\\xc5\\xf2\\xe4\\x3b\\xab\\x9d\\x4d\\x2f\\x48\\x5c\\xa6\\x38\\\n\\x07\\x95\\xd1\\x81\\xfb\\x3d\\xe7\\x81\\xea\\x76\\x1b\\x7f\\x1b\\xc5\\x13\\x76\\\n\\x94\\x06\\xe1\\x90\\x37\\xf7\\x1c\\x00\\x33\\x4c\\x0f\\x38\\x37\\xf3\\x10\\x54\\\n\\xbf\\xc7\\xab\\x80\\x1e\\x8b\\x89\\x88\\x5b\\x95\\xdf\\x87\\x60\\x9c\\x39\\x26\\\n\\x33\\x74\\x07\\xb6\\x05\\x6b\\x40\\x75\\xb9\\x1e\\x27\\xa4\\xca\\xcf\\x1a\\xc2\\\n\\xcb\\x8c\\xbf\\x13\\x38\\xbf\\xf6\\x15\\x34\\x1f\\xbb\\x33\\xf4\\x95\\x84\\x35\\\n\\xe3\\xef\\x07\\x9e\\x01\\xf6\\x1c\\x34\\x2f\\x7b\\x29\\x98\\xae\\xbd\\x1f\\x33\\\n\\x74\\x43\\x7e\\xd0\\x6c\\x9c\\x18\\x46\\xfc\\x9a\\x91\\xfe\\x80\\xf3\\xc1\\xc7\\\n\\x40\\x79\\xd9\\x1f\\x05\\xd3\\xb5\\xf3\\x66\\x86\\x30\\xc8\\x0c\\xf4\\x7a\\x23\\\n\\xb7\\xec\\xf1\\x99\\x79\\x0e\\x2f\\x63\\x00\\xe7\\x6e\\xc4\\x40\\xcf\\xf5\\x7c\\\n\\x24\\xee\\x0c\\x39\\x9f\\x23\\x93\\x23\\x09\\xc0\\x51\\xc6\\x82\\x98\\xca\\x0d\\\n\\xd6\\x2d\\xce\\x7c\\x80\\xbb\\xe2\\x5e\\x8a\\xf7\\xd6\\xa9\\xbc\\xb3\\x03\\xa4\\\n\\xd0\\xac\\xfd\\x99\\xfb\\x24\\x8c\\x86\\x15\\x43\\x3c\\xd8\\x90\\x3f\\x34\\x24\\\n\\xe8\\x35\\x05\\x44\\xbf\\xd9\\xc9\\x5d\\x12\\x86\\x61\\x0a\\xed\\x33\\x9e\\x61\\\n\\x98\\x4c\\x8b\\x92\\xcc\\x48\\x94\\x44\\x12\\xc1\\x44\\x10\\x4f\\x18\\x49\\x48\\\n\\x04\\x52\\xeb\\xd4\\x57\\xe6\\x39\\xe3\\x4f\\x4c\\xf8\\x24\\x93\\x08\\x99\\x78\\\n\\x52\\x80\\x7d\\xf9\\xfd\\x43\\xf2\\xef\\x84\\xd2\\x01\\x93\\x7e\\xcb\\x2d\\x91\\\n\\x0b\\x10\\xff\\x3b\\x63\\xa4\\xb4\\xdc\\xbf\\xd3\\x49\\xbb\\xa4\\x8e\\xcc\\x7d\\\n\\x92\\xdc\\xa7\\xc4\\x9d\\xb9\\x4f\\x16\\xf1\\xdd\\x8b\\xfd\\x99\\xfb\\x14\\x79\\\n\\xcc\\x62\\xd9\\x6f\\xc8\\xef\\x41\\x71\\x0f\\xbf\\x1f\\x12\\x01\\x7f\\x07\\x22\\\n\\xf7\\x14\\xab\\x14\\x91\\xe2\\x5e\\x42\\xdd\\x27\\xb3\\xca\\x51\\xea\\xfe\\xe7\\\n\\x3d\\x0a\\x99\\xec\\x4e\\x13\\x8a\\x9e\\x44\\x25\\x22\\xc9\\x91\\xa6\\x78\\x9e\\\n\\x7b\\x8a\\x52\\x2a\\xe6\\xf0\\xa7\\x9f\\xd9\\xc8\\xef\\x93\\xb1\\xf2\\xb0\\xee\\\n\\xb1\\xb6\\x3d\\x97\\x88\\x02\\xe9\\x7b\\x77\\xf9\\xbd\\x04\\xa8\\xf2\\x4f\\xb6\\\n\\x91\\xc7\\xa9\\xb8\\xb7\\x96\\xdf\\x63\\xf8\\x54\\xf7\\x16\\x62\\xd6\\x3d\\x15\\\n\\x95\\xb5\\x94\\xf6\\x9f\\x42\\xdf\\x4b\\x6d\\xe2\\xad\\x91\\x98\\x7b\\x89\\x4d\\\n\\xbc\\x48\\xe2\\x98\\x44\\xff\\x4e\\xa5\\x19\\xdd\\x12\\x77\\x2a\\x77\\x31\\x2f\\\n\\x98\\x7b\\xff\\x14\\xc5\\x3d\\xe5\\x5f\\x8c\\x19\\x49\\xee\\x29\\x5e\\x99\\xb0\\\n\\x06\\xbb\\x93\\x7b\\x2a\\x3e\\x7b\\x2a\\x57\\xc5\\x8e\\xe4\\x9e\\x92\\xa7\\x86\\\n\\xe2\\x5e\\xfe\\xba\\xd0\\xf7\\x32\\xfa\\x9e\\x4a\\x8f\\x3d\\xe7\\xbe\\x90\\x9c\\\n\\x9f\\xe2\\xde\\x51\\x1e\\x9f\\xec\\x77\\x78\\x77\\xf6\\x3d\\xe6\\xa7\\x5c\\x3e\\\n\\x72\\x8f\\x79\\x29\\x97\\x9f\\x7d\\x8f\\xe9\\x63\\xee\\xa9\\xb2\\x92\\x5a\\x63\\\n\\x75\\x27\\xf7\\x58\\xd4\\x98\\x3f\\xba\\xdf\\x63\\x0b\\xc0\\xbe\\xa7\\x32\\x4c\\\n\\x14\\xca\\xbe\\x77\\xc4\\xf2\\xfd\\x7d\\x4f\\x49\\x3c\\x9e\\x7d\\x8f\\x39\\xc2\\\n\\xbe\\xc7\\x1c\\x70\\x4f\\x7d\\x8f\\x3f\\x2b\\xbd\\x4f\\x26\\xcd\\xcf\\xef\\x7b\\\n\\x0b\\x71\\xaa\\x7b\\xac\\x01\\xec\\x7b\\x79\\xe9\\xb3\\xee\\xb1\\x44\\x53\\xdd\\\n\\x3b\\x26\\xa9\\xbe\\xe7\\xf8\\xe7\\xf2\\xe3\\xc6\\xc7\\x95\\x87\\x2b\\xaf\\xba\\\n\\xf4\\xa9\\x4b\\xaf\\xfc\\x8d\\x92\\xa5\\xca\\x6f\\x99\\xca\\xfb\\x64\\xf7\\xd4\\\n\\xf7\\x04\\x7f\\xe3\\x3d\\xf3\\x8d\\xc2\\x4f\\x88\\x88\\xa9\\x98\\x08\\x09\\x73\\\n\\xcf\\x7c\\x0f\\x7e\\xdf\\x8b\\xc8\\xcf\\xcc\\x3d\\xd0\\xa1\\xe5\\xf7\\x52\\xf2\\\n\\x2d\\x4b\\xfe\\xfd\\x0d\\x8b\\x07\\xfa\\x7b\\xf4\\xfb\\x83\\x24\\xa5\\xc3\\x29\\\n\\x1a\\x42\\xfa\\xfb\\xa5\\x10\\x4b\\x0a\\xfe\\x29\\xec\\xef\\x5f\\x12\\x38\\x26\\\n\\xa5\\xfa\\x80\\x82\\x4d\\x3c\\xcb\\x3b\\xf5\\xea\\x5b\\x4b\\xd9\\xdf\\x53\\x99\\\n\\x54\\x24\\xb1\\x66\\xdf\\x73\\xbf\\xbf\\xc9\\xa9\\x3e\\xb7\\xb2\\xd4\\xb1\\xcb\\\n\\x19\\x5a\\xa4\\xbe\\x97\\x88\\x52\\xdf\\x4b\\xad\\x53\\xdf\\x2b\\x3e\\x42\\x24\\\n\\x42\\x26\\xba\\x52\\x40\\x1f\\x66\\x8d\\xd9\\x64\\x41\\x96\\x47\\xc5\\xcb\\x84\\\n\\xec\\x61\\x18\\x1c\\xd8\\x6f\\x63\\xf6\\x56\\xa0\\x9e\\xd0\\x5a\\x8a\\xce\\x50\\\n\\x74\\x8f\\xa2\\xb7\\x40\\xdb\\x6f\\xfd\\x45\\xe8\\x33\\x79\\x76\\x8f\\xf8\\x59\\\n\\x4b\\xc2\\x34\\x21\\x3c\\x32\\x64\\x1f\\x50\\x07\\xe4\\x00\\xfa\\x9c\\x94\\x95\\\n\\x14\\x3d\\x00\\x5a\\x67\\x95\\xd1\\xcd\\x4a\\xd1\\xd1\\xfd\\x93\\xf0\\x5a\\x49\\\n\\x78\\xe7\\x48\\xb3\\xd4\\xfc\\x1d\\xc0\\xba\\xd9\\x80\\xa2\\x6d\\xa0\\xd0\\xf7\\\n\\xd5\\x37\\xcf\\xd9\\x6e\\xee\\x7d\\x2c\\x89\\xab\\x01\\x64\\xec\\xf7\\x02\\xf5\\\n\\x95\\x87\\x02\\xad\\x6b\\xad\\xed\\x1a\\x02\\x7e\\x65\\x50\\xa7\\xf9\\x2b\\xa1\\\n\\x44\\xd0\\x4c\\xa7\\x88\\x4b\\x18\\xf7\\x10\\x30\\x7d\\x5b\\xc4\\x42\\x02\\xd7\\\n\\xdc\\x46\\x00\\xbd\\x47\\x4e\\x5d\\x1d\\xfe\\x06\\xb4\\x2e\\x58\\x10\\xd0\\x65\\\n\\xd5\\x8c\\x22\\x17\\xa0\\xf7\\x66\\xa0\\x5d\\xd7\\x9c\\x84\\x6c\\xc9\\x33\\x17\\\n\\xe2\\x67\\x28\\x09\\x73\\x9d\\xf0\\x50\\xf7\\x9e\\xa0\\x2c\\xbe\\x90\\xfe\\xd7\\\n\\x03\\xd1\\xde\\x39\\xea\\x3d\\xb2\\xd3\\xce\\xcd\\x0f\\xd4\\x83\\x59\\x04\\xf4\\\n\\xb7\\x53\\x08\\xbd\\xf5\\x5c\\x84\\xd7\\x22\\x50\\xe8\\xf1\\x28\\x2b\\x8b\\x48\\\n\\x30\\x6d\\x9b\\xec\\xba\\xc2\\x91\\xa2\\x23\\xa0\\x7a\\x4d\\x12\\xe7\\x29\\xdd\\\n\\xc1\\xb0\\x6d\\xb2\\x05\\x89\\x63\\x33\\xa8\\x5e\\x3b\\x3d\\x0c\\xf4\\x3e\\xee\\\n\\xf4\\x00\\xd4\\xe9\\xfa\\x00\\xfc\\xf5\\x0d\\xbf\\x85\\xa8\\x4f\\x5e\\xc0\\x08\\\n\\x72\\x15\\x20\\x71\\xc7\\x2a\\x91\\x0d\\x65\\xee\\x62\\x04\\xb9\\x84\\x02\\xea\\\n\\xda\\xe2\\x88\\x03\\xfb\\xe7\\xdc\\xf7\\x1d\\x75\\xee\\x71\\xaf\\xbb\\x29\\x9c\\\n\\xbd\\x86\\x32\\xa0\\x2c\\x28\\x13\\x57\\x4e\\x94\\x1d\\xd3\\xa0\\x8d\\x8e\\xb1\\\n\\x29\\x40\\xd9\\x59\\x08\\x98\\xa6\\xf3\\x14\\x95\\x32\\x9e\\x68\\x4a\\x81\\x32\\\n\\xa1\\x6c\\x7c\\x7b\\x41\\x30\\x2d\\xa6\\x50\\x57\\x34\\x01\\xb6\\xf5\\xa8\\x57\\\n\\xc6\\xad\\x4b\\xd8\\xde\\xfa\\x80\\x69\\xef\\x13\\x42\\xd9\\x50\\x46\\x94\\x95\\\n\\x2b\\x3f\\xa6\\xc9\\xd1\\x78\\xa2\\x69\\x04\\xdc\\x47\\x22\\x85\\x3f\\xeb\\x0f\\\n\\xee\\x65\\xfd\\x9b\\xf4\\x3e\\x50\\xaf\\x85\\x6f\\x5c\\x22\\x05\\xd5\\xe7\\x5c\\\n\\x1a\\x13\\x4e\\x40\\xeb\\xe2\\x70\\xbf\\x65\\x78\\x16\\x5f\\x6e\\xe3\\x89\\xa5\\\n\\x33\\x50\\x66\\xdc\\x7b\\xca\\xfd\\x2e\\x63\\x1a\\x9d\\x8c\\x27\\x16\\x2f\\xf2\\\n\\x02\\x7f\\x9b\\x83\\xfb\\x13\\xff\\xb6\\x6f\\x17\\x1b\\x28\\x3b\\xa6\\x81\\xaf\\\n\\x2d\\xca\\x6b\\x44\\xb9\\xd8\\x40\\x19\\x25\\xf0\\x67\\x3d\\x59\\x0d\\xe9\\x43\\\n\\xef\\x00\\xd3\\x80\\xba\\xb2\\xdc\\xf7\\x5a\\x02\\xa6\\x51\\xb7\\x96\\x03\\xbf\\\n\\xce\\x87\\x29\\x7f\\x67\\xb5\\x05\\xa6\\x05\\xdf\\x03\\x6e\\x3a\\x97\\x1b\\x53\\\n\\x28\\xa0\\xc7\\x27\\x4c\\xff\\x9e\\xa9\\x1b\\xd8\\x66\\x9a\\x42\\xbd\\x10\\x1a\\\n\\x98\\x26\\x5c\\x5b\\x60\\xbf\\xe3\\x98\\x76\\x63\\x8d\\xd1\\x0a\\x83\\x62\\xec\\\n\\xc8\\xc8\\x83\\xfd\\x9c\\x3c\\x46\\x92\\x27\\x2d\\x80\\x6d\\x3e\\xa6\\x91\\x5d\\\n\\xdf\\x50\\xcf\\x27\\xad\\xed\\xc5\\xe0\\x3c\\x0a\\x77\\x3e\\x07\\xfb\\xcc\\x7f\\\n\\x53\\x1f\\x53\\x57\\x60\\x1a\\xb9\\x73\\x47\\x38\\x5f\\x94\\x96\\x6b\\x09\\x38\\\n\\x47\\xc8\\xfd\\x1e\\xf9\\xa4\\x61\\xfc\\xc6\\x06\\xa6\\x95\\xbb\\xc6\\x93\\x56\\\n\\xf3\\xa6\\xa8\\x47\\xcb\\x9d\\x43\\x96\\x50\\x64\\x99\\x46\\xf1\\x9b\\x02\\x30\\\n\\xad\\x38\\x27\\xc1\\x9d\\xbb\\x4e\\x0b\\x1d\\xe3\\xd1\\x90\\xfa\\xdd\\xc3\\xb5\\\n\\xa7\\xd2\\x69\\x10\\xaf\\xa9\\x01\\xed\\x87\\x70\\xed\\x0a\\xf1\\xed\\xff\\x14\\\n\\x12\\xb8\\x47\\xf4\\x0d\\xa4\\x2e\\xf7\\xf9\\x06\\x8e\\xd3\\x94\\x81\\x69\\x67\\\n\\xb7\\x03\\x98\\x37\\x86\\xdc\\x47\\x3b\\x04\\x52\\xb7\\x79\\xf1\\x90\\xfa\\x6c\\\n\\xd7\\x8c\\x06\\x4c\\x3b\\xe6\\x01\\xfb\\x5b\\x30\\xc4\\x40\\x71\\xe1\\x38\\xf0\\\n\\x11\\xa4\\x7e\\xdf\\xa6\\x1a\\x28\\xae\\xbf\\x09\\x68\\x43\\x88\\x9d\\x27\\x98\\\n\\x47\\x86\\x18\\xf7\\x37\\x84\\xd4\\x75\\x1f\\xd7\\xb5\\x85\\xde\\xcf\\xc4\\xec\\\n\\x9b\\x36\\x14\\x0c\\xc1\\x1f\\xf5\\xbb\\x30\\x2f\\xd8\\x79\\xd3\\x40\\xe0\\x38\\\n\\x10\\xa8\\x33\\xc3\\x7e\\xcf\\x36\\x0b\\xcc\\xbf\\x1d\\xd0\\xb6\\x86\\x5e\\x11\\\n\\xb7\\xd0\\x68\\x0b\\xb4\\xcd\\xb2\\x97\\xc4\\x2d\\x24\\x30\\x2f\\xd8\\xdf\\xc4\\\n\\x6d\\x02\\xf3\\x47\\x9d\\x31\\xe6\\xdc\\x76\\xa6\\x0c\\xf4\\xb1\\xff\\xc4\\x05\\\n\\xbe\\xaf\\x6c\\xdb\\x53\\xd1\\x20\\xec\\x3b\\x6c\\x68\\xfe\\x68\\x73\\x91\\xbd\\\n\\x6e\\x86\\x79\\x25\\xa4\\x9e\\x5d\\x2b\\x48\\xfd\\x9d\\x97\\x82\\xee\\xf2\\x63\\\n\\x38\\x1c\\xbf\\xac\\xa7\\xa8\\x3e\\xd0\\x6b\\x1d\\xa8\\xab\\xc3\\xe8\\x4f\\xa5\\\n\\x10\\x77\\x10\\xf9\\xad\\x01\\xf1\\xab\\xcf\\xda\\x19\\xea\\xf5\\x7c\\x61\\xa5\\\n\\xe1\\x0b\\x08\\xab\\xeb\\x83\\x69\\x92\\x42\\xea\\x3c\\x6a\\x29\\x20\\xff\\x95\\\n\\x1c\\xde\\x8b\\xf4\\xe0\\xe5\\xc3\\xe2\\xf5\\x13\\x14\\x3a\\x9e\\x7c\\x3a\\x08\\\n\\xcc\\xef\\xcc\\x73\\x55\\x63\\x6c\\x9c\\x17\\xc0\\xb1\\x49\\x65\\xd6\\x33\\x9c\\\n\\x8b\\x1a\\x04\\xf4\\xfe\\xcb\\x64\\x16\\xdf\\x64\\xf2\\x6c\\x10\\xa4\\x9e\\xaf\\\n\\xaa\\x4c\\x78\\x54\\xd0\\x21\\x5d\\x4b\\x38\\x69\\x58\\xa1\\x03\\x0f\\x65\\xe0\\\n\\xf6\\x7b\\xf4\\xb1\\x0f\\xb5\\x9e\\xc3\\x4b\\x1b\\x5a\\xaf\\x84\\x27\\xe6\\x5b\\\n\\x12\\xf1\\x83\\x7a\\x0c\\xdd\\x81\\xee\\x97\\x68\\x62\\xd7\\x39\\x81\\xf8\\xed\\\n\\x0b\\x0a\\x3b\\xbe\\x38\\xae\\xd2\\x76\\x2e\\xab\\x31\\x87\\xef\\x23\\x2d\\xc3\\\n\\x2b\\x03\\xf6\\x71\\xd9\\x75\\x12\\xe7\\x9e\\x6c\\xf4\\xe0\\x87\\xed\\x09\\xbb\\\n\\x4e\\xb3\\xeb\\x3c\\xa3\\x4f\\xae\\xec\\x5d\\xa8\\xa7\\x84\\xe7\\x68\\x8e\\x7f\\\n\\x2e\\x71\\x79\\x69\\xe2\\x1e\\xa1\\x65\\xba\\x30\\x4f\\x98\\x79\\x39\\x86\\x8f\\\n\\x10\\x63\\xa3\\xa6\\x90\\xba\\x5c\\xaf\\xeb\\xc9\\x0f\\xdb\\x74\\xae\\x6d\\xe5\\\n\\xfb\\x40\\xdb\\xb6\\xcf\\x4d\\x08\\xdd\\x0f\\x38\\x7e\\x7e\\x92\\xb0\\x7c\\xa8\\\n\\x0a\\x9a\\xd9\\xf1\\xe4\\xd3\\x2d\\xe1\\x23\\xe4\\x55\\x45\\x87\\xb4\\x71\\xed\\\n\\x16\\xaa\\xb2\\x49\\xa6\\x29\\xc6\\x42\\x6a\\xd9\\x83\\xf4\\xe0\\x85\\x7b\\xa4\\\n\\x57\\x41\\xea\\xfa\\x86\\x79\\xcf\\xb7\\x66\\x80\\x73\\xed\\x0f\\x38\\x7e\\x31\\\n\\xac\\xb2\\xef\\x7e\\x4f\\xe0\\xaf\\xcb\\xd8\\xdf\\x44\\x9b\\xa9\\xa8\\x9b\\x6b\\\n\\x4d\\xc8\\x85\\x3c\\x7b\\xa9\\x24\\x4c\\x4f\\x1d\\xd3\\x17\\xc4\\xe1\\x33\\x46\\\n\\x47\\x3e\\x6c\\xac\\x85\\xd4\\xf9\\x3f\\x54\\x47\\x3e\\xd8\\xa7\\xc7\\xf4\\xb2\\\n\\xbf\\x83\\x78\\x6d\\xa5\\x22\\x4c\\x6b\\x8e\\x5f\\x0c\\x8b\\x3a\\xb4\\x7c\\x7d\\\n\\x8b\\xa9\\xf0\\x67\\x5e\\x6e\\x07\\xd5\\x6d\\xa5\\x0d\\xf1\\xc3\\xcd\\xff\\x00\\\n\\x0d\\xd3\\xc4\\xc5\\x30\\x0e\\x9f\\x35\\x3a\\xf2\\x61\\xe3\\x0c\\xa4\\x7e\\xa7\\\n\\x9a\\xe9\\xc0\\x03\\xfb\\x8d\\x7c\\x67\\x75\\x60\\x5b\\xaf\\x4a\\x37\\x25\\x37\\\n\\xf1\\xc3\\x0d\\x87\\xfd\\x77\\xf6\\x7c\\x37\\xea\\xa6\\x7d\\xe2\\xf8\\xc1\\x7c\\\n\\xd5\\xa4\\x8f\\x8c\\x7e\\x76\\x72\\xc2\\x22\\x2f\\x5d\\xf4\\x1b\\x9a\\x71\\xf8\\\n\\x9c\\xd1\\x81\\x07\\x17\\xf7\\x20\\x75\\xfd\\x77\\xd1\\x81\\x07\\x3b\\xff\\xb9\\\n\\xeb\\xa7\\x9a\\xe6\\x3f\\x3b\\x1c\\x37\\xff\\x87\\x70\\xfc\\xbc\\x06\\xed\\xc6\\\n\\x3f\\x39\\x49\\x18\\x76\\x1c\\x83\\xb5\\x08\\xcf\\xc0\\x85\\x23\\xc7\\x3d\\x1d\\\n\\x78\\x70\\xf1\\x96\\xc3\\x53\\xd7\\x33\\x94\\x94\\xb5\\x3f\\xaa\\xc6\\x29\\xca\\\n\\xda\\x1f\\xa6\\xcd\\xc2\\x72\\xc5\\x71\\xd4\\x51\\x8e\\x8c\\x7e\\x3a\\xc8\\xe7\\\n\\x07\\xa9\\xf3\\xff\\x28\\xe1\\xad\\xcd\\x98\\xaf\\x00\\x47\\x8e\\xb7\\x3a\\xc8\\\n\\xc1\\x06\\xbe\\x9b\\xdc\\xf7\\x5a\\x9f\\xf9\\x6d\\xe6\\xfb\\xcb\\xe6\\x87\\xdf\\\n\\x58\\xbe\\x77\\x3d\\x0f\\xfc\\xd9\\x07\\x0a\\x02\\x45\\x9b\\xc2\\xcc\\x17\\xe1\\\n\\x58\\x96\\xbb\\xf7\\x48\\x17\\xfb\\xe4\\xe5\\x38\\x3c\\x92\\x09\\x6f\\x6d\\xe6\\\n\\x8b\\x72\\x70\\x78\\x7c\\x02\\xfd\\xe6\\x39\\xd0\\x46\\xfb\\x67\\x48\\x5d\\xa6\\\n\\xfa\\x02\\xc7\\x35\\xdc\\xfe\\x3f\\xe6\\x33\\xd6\\x69\\xa6\\xff\\x89\\xee\\xfb\\\n\\x90\\xba\\x3e\\xfe\\x04\\xc5\\x98\\x88\\x3d\\x9f\\xc3\\xfd\\xe6\\xa2\\x3f\\x5d\\\n\\xf6\\xcd\\xe4\\x02\\xe5\\xfb\\x2d\\x35\\x9d\\x2f\\xb2\\xe0\\x84\\xc5\\xbc\\xd3\\\n\\xe7\\x2c\\x3e\\x43\\xe4\\x3f\\xce\\x63\\xeb\\x3a\\xfe\\xaa\\x4f\\x78\\x98\\x6a\\\n\\xfe\\x03\\x18\\x2e\\xff\\x19\\xd2\\x17\\x1b\\x38\\xfc\\xb4\\x21\\xf6\\xfc\\x43\\\n\\x1b\\xa0\\xdb\\x57\\x76\\x3e\\x31\\xa4\\x4b\\x1f\\x81\\xdb\\xfe\\xb0\\xdb\\x70\\\n\\x6d\\xce\\x3d\\x63\\xf3\\x30\\xc5\\xfa\\x6f\\x88\\xf9\\xb7\\xc3\\x9c\\xb0\\xe3\\\n\\x75\\x90\\x6b\\x3c\\x27\\xee\\xc3\\x3a\\xf0\\x00\\x8e\\x1c\\xa6\\x98\\xff\\xd8\\\n\\x9f\\xc0\\x31\\x1c\\x8e\\xeb\\x70\\x3e\\x07\\xdb\\x74\\xfc\\x26\\x73\\xe7\\x9f\\\n\\x57\\x91\\xdf\\xb0\\xbd\\xc2\\x7a\\x3f\\x0c\\x94\\xf7\\x45\\x06\\x73\\x64\\xc4\\\n\\xef\\xb2\\x36\\x7b\\x7a\\x73\\x91\\x30\\xec\\xfc\\x1f\\xa4\\x45\\x78\\x36\\x4c\\\n\\xbd\\xfd\\xe1\\x83\\xbe\\xeb\\x23\\x7c\\xe3\\x2f\\x3c\\x9f\\x51\\x93\\xbe\\x23\\\n\\xfa\\xd9\\xce\\x09\\x1b\\x0f\\xba\\xef\\x37\\x32\\xf5\\xf6\\x47\\x19\\xf4\\x5d\\\n\\x7f\\xe4\\x9b\\x7f\\xc0\\x71\\xad\\xba\\xf9\\x87\\x9d\\xf0\\x67\\xdb\\xa7\\xeb\\\n\\xfc\\x03\\x80\\xe9\\xb7\\x3f\\xaa\\xa0\\xcf\\xfa\\x38\\x9e\\xad\\xa5\\x6a\\xfe\\\n\\x0d\\xbf\\xaf\\x79\\x08\\x95\\x03\\xd5\\xf3\\x6f\\x9e\\x3a\\xa7\\xe0\\xef\\x6c\\\n\\x7f\\xf4\\x45\\x35\\x50\\x3f\\xff\\x8c\\xf9\\x91\\x44\\x88\\xdb\\x5f\\xe2\\x12\\\n\\xfa\\xd1\\x65\\xfe\\x19\\xe0\\xef\\x6d\\x7f\\xf4\\x81\\x10\\xeb\\x2f\\x5c\\xff\\\n\\x23\\x75\\x94\\xe5\\x6f\\x6e\\x7f\\xb4\\x05\\xd3\\x5e\\xe1\\xba\\x0c\\xae\\x19\\\n\\x32\\x75\\xbc\\x17\\xd0\\xdf\\x83\\x4f\\xa0\\x3e\\xff\\x3f\\x11\\xbf\\xbd\\x40\\\n\\xf1\\x6e\\xa0\\x3e\\x8f\\xae\\xba\\xf4\\x19\\xa5\\xfd\\xc1\\x39\\x8a\\x68\\x42\\\n\\xe8\\xc6\\xfc\\xc2\\x35\\xc3\\x4a\\x2c\\x3f\\xb8\\xfe\\x87\\x7d\\x53\\xb4\\x8d\\\n\\xcc\\x9e\\xc7\\xfe\\x45\\x9e\\xe1\\x6f\\xec\\x7e\\x4e\\x15\\xc2\\x43\\x97\\xf5\\\n\\x77\\x06\\x19\\xa1\\xfd\\xc1\\xbe\\x29\\xdb\\x96\\xc9\\x0b\\x50\\xdd\\x5f\\x35\\\n\\xb4\\xfe\\x09\\x1b\\xe9\\xad\\xfd\\xc1\\x7c\\x1d\\x4e\\xd1\\x46\\xa0\\xc7\\x62\\\n\\xd8\\xd6\\x28\\x1b\\xaf\\x29\\xd3\\x17\\xc2\\x79\\x57\\xa6\\xaf\\xa3\\xcb\\xf8\\\n\\x42\\x1b\\xa4\\xb7\\xf6\\x07\\xf3\\x9e\\x6f\\x3e\\x82\\x8f\\xb8\\xf3\\x15\\xc3\\\n\\x58\\x7c\\x70\\x0e\\x27\\x86\\x90\\x21\\xce\\xb1\\x67\\x90\\xde\\xda\\x9f\\x8d\\\n\\x9c\\xf8\\xb5\\x71\\xaf\\x4b\\x7b\\x71\\xd3\\x5d\\xfb\\xc3\\xcc\\x57\\xf3\\xe5\\\n\\x33\\x7e\\x47\\xb9\\xeb\\x69\\xec\\x77\\x45\\x99\\xbe\\x90\\x21\\x91\\xde\\xf2\\\n\\x9f\\xd1\\x17\\x62\\xe7\\x2d\\xae\\xd7\\xf0\\xe9\\x0b\\x71\\xf3\\xdf\\x18\\xfb\\\n\\x31\\xd3\\x53\\xfb\\x8f\\xdf\\x48\\x4d\\xd7\\x2b\\x19\\x7d\\x21\\xb6\\x5f\\x55\\\n\\xfa\\x42\\x86\\x42\\x7a\\x69\\xff\\xb1\\x4f\\x8f\\xfd\\x4a\\x76\\x3f\\x27\\x05\\\n\\x74\\xd3\\x17\\x52\\x15\\x46\\x68\\xa4\\x87\\xf6\\x07\\xfb\\x8d\\xd1\\xf0\\x67\\\n\\x9b\\x8f\\xf9\\xa9\\xad\\xbe\\x4a\\x0a\\xfc\\xa9\\xaf\\x62\\x48\\xa4\\x87\\xf6\\\n\\x87\\xc9\\x7f\\x6e\\xff\\x52\\x9b\\xfc\\x67\\x53\\x5a\\xe7\\x7f\\x7a\\x6e\\x7f\\\n\\x74\\xd1\\x17\\x12\\x72\\x2f\\x84\\x3a\\xa4\\x87\\xf6\\x87\\x01\\xfb\\xfb\\xcb\\\n\\xc4\\xaf\\x4e\\x5f\\x88\\x9d\\xff\\x6c\\x7d\\xa1\\xb4\\x42\\x7a\\x68\\x7f\\xd8\\\n\\x60\\xeb\\x0b\\xb1\\xfb\\x40\\x5c\\x7d\\x21\\x3e\\x7d\\x75\\x63\\xf5\\x3f\\xd3\\\n\\x43\\xfb\\xc3\\x40\\x9f\\xf1\\x57\\x7d\\x1e\\x7e\\x86\\x46\\x7a\\x6a\\x7f\\x10\\\n\\x1b\\xe0\\xcf\\xbc\\xd5\\xd4\\xbd\\xde\\x08\\xf2\\xa6\\xb7\\xf6\\x87\\x4f\\x5f\\\n\\x48\\xd3\\xf9\\x37\\x63\\xd8\\xc4\\x49\\x6f\\xed\\x8f\\xb6\\xfa\\x42\\x42\\xec\\\n\\x57\\xd5\\x07\\xe9\\xad\\xfd\\xe1\\x83\\xb6\\xeb\\x2f\\x69\\x89\\xf4\\xd6\\xfe\\\n\\x28\\x03\\xf6\\xf5\\xd9\\xeb\\x8f\\xa6\\x82\\xf4\\xd6\\xfe\\xa8\\x82\\x25\\x98\\\n\\x9e\\xdd\\xad\\x8c\\xd0\\xfe\\x98\\x32\\x32\\x4a\\xfb\\x63\\xaa\\xc8\\x48\\xed\\\n\\x8f\\x29\\xc2\\xdc\\xfe\\x18\\x17\\xe6\\xf6\\xc7\\xb8\\x30\\xb7\\x3f\\xc6\\x85\\\n\\xb9\\xfd\\x31\\x2e\\xcc\\xed\\x8f\\x71\\x61\\xe8\\xf6\\xc7\\x91\\xa2\\xff\\x01\\\n\\xbd\\xc7\\x99\\x21\\x67\\xf2\\x1c\\xf7\\x7f\\xe3\\x9e\\x12\\x53\\x99\\x0b\\x10\\\n\\x12\\xa8\\xc3\\x88\\x69\\xc3\\x34\\x62\\x5a\\x4b\\x42\\xea\\x3c\\xf8\\x1f\\x79\\\n\\x6e\\xc8\\xf6\\x87\\xbb\\xae\\xcd\\x37\\xe7\\x8e\\xba\\xdb\\xa8\\xd3\\x1d\\x45\\\n\\xd1\\x15\\xa0\\xf7\\xf7\\x4c\\x07\\x5a\\xbf\\xbb\\x22\\x49\\x87\\xa9\\x02\\x65\\\n\\x43\\x19\\xbd\\x28\\x9a\\x09\\xb4\\xec\\xa1\\x40\\xa7\\x05\\xd3\\x84\\x69\\xd3\\\n\\xe6\\x4c\\x5c\\x43\\xb4\\x3f\\xfa\\x12\\xea\\xd8\\x5f\\x26\\xe9\\xfb\\x97\\xc4\\\n\\x61\\x2c\\x64\\x21\\x32\\xcc\\x24\\x32\\x31\\x36\\xcc\\x84\\x22\\x7d\\xf3\\x9f\\\n\\xad\\x87\\xa0\\x49\\xfd\\xd7\\xc5\\xfd\\x1e\\xe8\\x35\\x16\\x9c\\x37\\x4e\\x8b\\\n\\x76\\x2b\\x13\\x28\\xe6\\xa8\\xdf\\x0b\\x9c\\x16\\xae\\x5b\\x08\\xbd\\x0b\\x9c\\\n\\x67\\x44\\xdb\\x2c\\x49\\x44\\x5e\\x3c\\x7f\\x09\\xcf\\x80\\xb8\\x45\\x51\\x04\\\n\\x21\\x3c\\x0f\\xe8\\x19\\x45\\xef\\x40\\xb1\\x0f\\x4b\\x53\\x39\\xd9\\xcf\\x90\\\n\\x2f\\xee\\xfb\\x31\\xc4\\x79\\xbc\\xc8\\x13\\xf7\\x56\\x3c\\xd2\\x42\\x36\\xae\\\n\\xfb\\x3b\\x49\\xe3\\x33\\xc2\\x87\\x49\\xff\\x6d\\x22\\x3b\\xe6\\x0d\\xe6\\x11\\\n\\xe6\\x15\\xee\\xe3\\x34\\xd6\\xbc\\x2c\\xa6\\x15\\xbf\\x47\\xb8\\x5e\\xd2\\x87\\\n\\xa2\\xd9\\x14\\x1d\\x07\\xba\\x1c\\x35\\x39\\x27\\x19\\xcf\\xbe\\x9c\\x02\\xc2\\\n\\x94\\x03\\xda\\x24\\x99\\x0c\\x74\\xbe\\xa8\\x8b\\xf7\\x17\\x91\\x11\\x65\\x9d\\\n\\x4b\\x64\\xc7\\x34\\x60\\xff\\x42\\x88\\xb3\\x70\\x8d\\x0d\\x7c\\x17\\xb1\\x5c\\\n\\xbc\\x80\\xfe\\xb6\\x61\\x3e\\xab\\xaa\\x77\\xf8\\xfe\\xf6\\x02\\xdd\\xde\\x61\\\n\\x0c\\xd3\\x13\\x94\\xdb\\xe9\\x60\\xdc\\x78\\x7e\\xcb\\x2e\\x8a\\x7a\\x53\\x54\\\n\\x42\\xc7\\xb8\\xfe\\x56\\xe0\\x79\\x11\\xa8\\x1b\\xb5\\x1f\\x14\\xb6\\x37\\xf9\\\n\\xf2\\xe9\\x1c\\x45\\xc5\\xb4\\xe0\\x8b\\x7e\\xcf\\x2a\\xe1\\x25\\x23\\x71\\x61\\\n\\x9c\\xd8\\xb6\\x1a\\xd2\\x5e\\xff\\xdf\\x04\\x3c\\x3f\\x7c\\x16\\x28\\xec\\xe9\\\n\\x73\\x09\\xed\\xa4\\x62\\x7b\\xa0\\xea\\x9c\\x1b\\xfc\\x0d\\xeb\\x31\\xd7\\x16\\\n\\x01\\x43\\xc8\\x1b\\xdb\\xc2\\xb4\\x3e\\xaf\\xe8\\x6f\\x02\\xee\\x59\\xc4\\x73\\\n\\x25\\xd8\\x36\\xdd\\xd9\\xf5\\x17\\x6d\\x8d\\xf3\\xd9\\x76\\xcb\\x0e\\x0a\\x3b\\\n\\xe4\\xdc\\x7e\\xda\\x37\\xc2\\x33\\x23\\x9f\\x15\\xa1\\x2d\\x70\\x7c\\xc9\\x9c\\\n\\x77\\xc6\\x6d\\x3f\\xc2\\x21\\xf5\\x59\\xb0\\x8e\\xe4\\x19\\x5f\\x79\\x21\\x0f\\\n\\x53\\x3c\\x6f\\xf8\\x6f\\x00\\xb6\\x27\\x03\\x81\\xdf\\x8e\\x33\\xf6\\xef\\xaa\\\n\\x12\\x7a\\xc5\\xf3\\x7b\\x02\\x09\\x9b\\x96\\xe7\\x72\\xa5\\x57\\xe0\\xf9\\x4a\\\n\\x38\\xde\\xe0\\xd6\\xed\\x04\\x42\\xdc\\xe7\\xb7\\x20\\x63\\x9e\\xc9\\x64\\x48\\\n\\x60\\x9b\\x8f\\xfd\\x44\\x75\\xe3\\xa4\\x9d\\x20\\xec\\xd9\\x07\\x66\\x28\\x80\\\n\\x7d\\x73\\xb4\\x15\\xcf\\xb7\\xc7\\xe2\\x17\\xf9\\x2d\\x23\\xf5\\xdf\\x8d\\x05\\\n\\xb4\\xdb\\xc0\\x1e\\x2f\\xa0\\x5b\\x57\\x7b\\x61\\x66\\xe8\\x86\\x8e\\xa0\\xd8\\\n\\xcf\\xde\\xd1\\xc8\\xb2\\xe8\\x0c\\x19\\x85\\x64\\x00\\x77\\x19\\x81\\x14\\xc0\\\n\\x9a\\x71\\x33\\xbf\\xd3\\x5e\\x7e\\x7b\\xc2\\x31\\x0c\\xd8\\x30\\xde\\x29\\x6f\\\n\\x24\\x80\\x98\\xba\\x4a\\x2d\\x48\\x50\\x77\\x0c\\x43\\x82\\x32\\x0f\\x64\\xb2\\\n\\x24\\x11\\xfe\\x95\\x38\\xca\\xd9\\xc8\\x83\\x49\\xe5\\x8c\\xa4\\xf2\\x27\\x49\\\n\\xf2\\x27\\x12\\xb9\\xcf\\x64\\xb9\\x4f\\xb1\\x3f\\xfe\\x4d\\x91\\x33\\x25\\xa2\\\n\\xc8\\x2f\\x24\\x16\\x31\\xfe\\x28\\xa2\\xdd\\x12\\xca\\x6b\\x32\\x91\\x44\\x4a\\\n\\xb1\\x48\\x22\\x12\\xc6\\x53\\xac\\x93\\x1c\\x69\\x37\\x5e\\xe3\\x19\\x37\\xf5\\\n\\x7b\\x3c\\x49\\x51\\x32\\xe5\\x96\\xfa\\xd3\\xee\\x14\\xeb\\xd4\\x6e\\x09\\x93\\\n\\x1b\\x22\\xb9\\x3b\\x46\\xfe\\x9f\\x72\\x5f\\x90\\xc9\\x42\\xe4\\xff\\xa7\\xc9\\\n\\x64\\x01\\xa9\\xfe\\xc7\\x53\\x99\\x43\\xbb\\xa7\\xa1\\xfb\\x0a\\xf4\\x41\\xcf\\\n\\x72\\xb7\\x18\\x2c\\xd0\\x2d\\x62\\xdc\\x14\\x43\\x6b\\xc6\\x2d\\x45\\xb7\\xd4\\\n\\xcd\\x5a\\x02\\x22\\xda\\x2d\\x99\\x22\\xa2\\xfe\\xd3\\x6e\\xf1\\x14\\x0b\\xb1\\\n\\xcc\\xe2\\xb7\\x3b\\x80\\xe2\\x4e\\xfc\\x58\\x8a\\xa8\\xa4\\x4b\\x51\\x54\\xa9\\\n\\x5b\\x26\\xca\\xed\\x2e\\xf5\\x4f\\xb1\\xa1\\x78\\x66\\xa1\\xdc\\x8e\\x6c\\x77\\\n\\x3c\\xed\\xce\\x81\\x7e\\x88\\xdb\\x66\\x1a\\x25\\x0d\\xe3\\x46\\x9e\\x72\\x37\\\n\\x75\\xc5\\xb8\\x68\\x77\\x08\\x8a\\x41\\xdc\\x31\\x32\\x94\\x8d\\x76\\x53\\x99\\\n\\x0f\\x16\\x7c\\x6e\\xaa\\x35\\xfa\\xed\\x4e\\xb6\\xa2\\xd2\\x4e\\xdc\\x49\\x8e\\\n\\x54\\x86\\x10\\x37\\x00\\xdb\\x1d\\xc2\\x72\\xcb\\xd4\\xb9\\x53\\x44\\x58\\xd0\\\n\\xb4\\x3b\\xd9\\x1a\\x0b\\x9a\\x76\\x27\\x59\\x63\\x1d\\xfa\\xd3\\xcd\\xf6\\xc3\\\n\\x0e\\xab\\x49\\x5c\\x4a\\xdd\\xf2\\xfa\\xc4\\xa4\\xd1\\x5d\\xe1\\x4e\\xf1\\x57\\\n\\xb8\\xe9\\xca\\x67\\x18\\x37\\x30\\x75\\x1e\\x28\\x37\\xfd\\xfa\\x51\\xef\\x2d\\\n\\xba\\xc1\\x5f\\x5e\\x02\\xb4\\xdb\\x86\\x7e\\x57\\xfd\\xf1\\x45\\xc6\\xda\\x4b\\\n\\xbf\\xce\\x49\\xf8\\x97\\x1a\\xb1\\xc9\\xe8\\x60\\xee\\xc9\\xcc\\xfb\\x9b\\x02\\\n\\x8e\\x49\\x40\\x6a\\xbe\\x4c\\x62\\x2d\\x15\\xfd\\x8e\\x51\\x24\\xf9\\x1d\\x7b\\\n\\xb2\\x85\\xd8\\x9d\\x71\\xa7\\xc0\\x6f\\xef\\x54\\x15\\xb0\\xf8\\xed\\x94\\x49\\\n\\x44\\x0a\\xb7\\xd4\\x5a\\xe1\\x4e\\x72\\x54\\xb8\\x93\\x69\\x36\\x38\\x30\\xc4\\\n\\x43\\x32\\xf0\\x40\\x23\\x0b\\x70\\x92\\xb7\\x49\\x5e\\x69\\x75\\x92\\xad\\x6a\\\n\\xd8\\x02\\x2d\\xda\\x24\\xa0\\x6d\\x49\\x5e\\x03\\x5a\\xcf\\x1c\\xd7\\x94\\x92\\\n\\x09\\x7d\\x26\\xcf\\xae\\x11\\x3f\\x93\\x48\\x18\\x5b\\x23\\xc8\\x9b\\x16\\xc0\\\n\\x79\\x2b\\x5c\\x1f\\x09\\x01\\xba\\xcf\\x91\\xa2\\x84\\xb8\\xf3\\x2f\\x5c\\xfa\\\n\\x41\\x78\\x8c\\x80\\xbf\\x7f\\x2e\\x0c\\xc7\\xd7\\xb8\\x46\\x80\\xf6\\x72\\xb9\\\n\\x73\\xb8\\xca\\xd2\\xce\\xd8\\x01\\x54\\x95\\x87\\xec\\xb9\\xda\\xc3\\x24\\x8e\\\n\\xbf\\x6d\\x2c\\xef\\x01\\xf4\\xba\\x2e\\x5f\\xdd\\xc0\\x74\\x85\\x51\\xb4\\x98\\\n\\x22\\x6f\\x8a\\xdc\\x28\\x2a\\x02\\xb4\\x8e\\x43\\x36\\x42\\x36\\xe4\\x99\\x1b\\\n\\xf1\\xb3\\x98\\x84\\xf9\\x01\\xfc\\xf5\\xec\\x32\\x89\\xd3\\xd4\\x51\\x90\\xa2\\\n\\xdd\\xa0\\xb0\\x75\\xce\\x10\\xea\\x16\\x9c\\x02\\x7a\\x7d\\x46\\x9f\\xb9\\xca\\\n\\x7f\\x08\\x8f\\xd3\\x90\\x7a\\xef\\x64\\x0a\\x89\\x73\\x37\\x91\\xc1\\x14\\xd1\\\n\\x05\\xe8\\x35\\x21\\xb6\\xcc\\x78\\xae\\xd5\\x32\\xa0\\xd7\\x87\\x84\\x46\\x09\\\n\\xc2\\xfb\\x2b\\x27\\xce\\x8f\\x44\\x16\\x53\\x81\\x15\\xd0\\x67\\xda\\xb1\\x65\\\n\\xc4\\x6f\\xd0\\x26\\x8a\\x0a\\xa7\\x41\\xfc\\x85\\x49\\x5c\\xcc\\x7e\\x5b\\x86\\\n\\x56\\x10\\xd9\\x8c\\x09\\xfc\\xde\\xe2\\x7a\\x17\\xbb\\x3d\\x78\\x42\\x91\\xbb\\\n\\x11\\x64\\x71\\x27\\x71\\xb3\\xdb\\xbb\\xb3\\x60\\xbc\\x3e\\x01\\xda\\x77\\xbc\\\n\\x01\\x8a\\x79\\x1a\\x94\\x09\\xcf\\x67\\x35\\x84\\x8e\\x83\\xa6\\xc0\\xb8\\xd9\\\n\\xe7\\x4e\\x21\\xa1\\x8c\\xba\\xda\\xdc\\xd6\\x15\\xb8\\x77\\xff\\x26\\xa4\\x6e\\\n\\x1b\\xc7\\xa6\\xb1\\x0c\\xaa\\x80\\xb2\\xb0\\xbf\\x11\\x98\\x47\\xaa\\xec\\x9f\\\n\\x08\\x09\\xd4\\x9b\\x62\\xaf\\x21\\xe3\\x37\\xb7\\x67\\x1a\\xc5\\xad\\x0d\\x50\\\n\\x26\\x76\\x3f\\x0a\\x65\\xd6\\x47\\xe7\\x4b\\x53\\xb0\\xdb\\xe2\\x64\\x30\\xcd\\\n\\xbc\\x61\\x80\\xb2\\xb1\\xdb\\x6d\\x21\\xcf\\x46\\xe5\\x43\\x17\\x48\\xfd\\x8d\\\n\\x30\\xa5\\x77\\x4a\\x19\\xc6\\x41\\x6a\\x99\\x0d\\xf5\\xed\\xc7\\x7e\\x17\\xbb\\\n\\x7f\\xb3\\x15\\xfe\\x8e\\x7e\\x3d\\xca\\x88\\xdf\\x0d\\x76\\xff\\xc8\\x10\\x7d\\\n\\xc8\\xdd\\xac\\x38\\x50\\xa7\\xed\\x6f\\xd2\\xbb\\x42\\x59\\x51\\x66\\x46\\xfe\\\n\\xdd\\x02\\xf3\\xf7\\x80\\xd4\\x6d\\x8e\\x87\\xc0\\xfc\\xd3\\x02\\x1e\\x90\\xba\\\n\\x2d\\xf2\\x10\\x90\\x37\\x7b\\xac\\xb9\\x49\\x40\\xbe\\x69\\x0d\\x94\\x9d\\x3d\\\n\\xa6\\x15\\x02\\xf5\\x40\\xd1\\xdf\\x42\\x7d\\x98\\xb4\\x18\\x33\\x18\\x0a\\x28\\\n\\x3b\\xa6\\x81\\xe9\\xcf\\x0a\\x61\\x67\\xf5\\x08\\x28\\xf2\\x7c\\xa9\\x00\\xfc\\\n\\x8c\\x0d\\x1c\\xd3\\x32\\xe9\\xd1\\xf5\\x2c\\x27\\x06\\x38\\x47\\xc7\\xcc\\x23\\\n\\xe0\\xbb\\xfb\\x3f\\x1d\\xf9\\xe0\\xda\\xb0\\x37\\x21\\x7d\\xd6\\x89\\x31\\xac\\\n\\x17\\x21\\x5d\\xf9\\x60\\x1a\\x98\\x76\\x08\\xd3\\xa6\\xcf\\x3c\\x24\\xce\\x89\\\n\\x32\\x75\\xf1\\x94\\x1e\\x7c\\xbc\\x58\\x7c\\xbc\\xf4\\xe4\\xc3\\xbc\\xeb\\xfa\\\n\\xf0\\x39\\xc5\\xe2\\xa3\\xeb\\x79\\x18\\x88\\x10\\xd0\\x2d\\x5d\\x65\\x80\\xd6\\\n\\x53\\xf5\\x07\\xda\\x0e\\xf9\\x53\\x16\\x9f\\xa7\\xe4\\x99\\x98\\xf8\\x29\\xa3\\\n\\x21\\x4f\\xec\\xc7\\x04\\x82\\x22\\x5d\\x81\\xa0\\x7b\\xff\\xcb\\x9b\\xc5\\xe7\\\n\\xa2\\x8e\\x3c\\x70\\x5e\\x80\\xd9\\xb3\\x80\\xf5\\x50\\x9b\\x31\\xf0\\x7e\\xd0\\\n\\x7c\\xee\\x7d\\x3f\\x4f\\x78\\x3c\\xe7\\x09\\x75\\x95\\x30\\x0f\\x70\\x4c\\x8e\\\n\\xe7\\xa8\\xa0\\x1d\\x3b\\xf6\\x19\\x8c\\xbf\\xc8\\x33\\xfc\\x0d\\xfb\\x37\\x73\\\n\\x48\\x98\\x36\\x1a\\xc8\\x97\\x0f\\x14\\xf6\\xa8\\xbe\\x83\\x6e\\x73\\x20\\x4d\\\n\\x58\\xb2\\x84\\x69\\x19\\x56\\x0c\\x7f\\xe6\\x03\\xfb\\x8c\\x49\\x36\\xf9\\xf3\\\n\\x84\\xbf\\xcd\\xfa\\x3d\\x96\\x27\\x0c\\x37\\xaf\\xe3\\x59\\xee\\x08\\x0d\\x65\\\n\\x0c\\x63\\xf1\\x69\\xac\\x5d\\xf2\\xe4\\x98\\xc4\\x92\\x65\\xb1\\x96\\x61\\x7d\\\n\\x41\\x21\\x2f\\xae\\x47\\xa0\\xbd\\x7e\\xe6\\x8c\\xa8\\x61\\xa0\\x38\\x8f\\x05\\\n\\x69\\x38\\x4f\\xf8\\xd9\\xc0\\x5f\\xd7\\x50\\xff\\xf9\\x2a\\xa1\\x4f\\x4a\\xfc\\\n\\xcc\\xd2\\x50\\xc6\\xc5\\xa0\\xc8\\x9f\\x89\\x5a\\xa6\\x0f\\xb1\\x03\\x14\\xf9\\\n\\xe3\\xad\\x61\\x18\\xe6\\x3b\\xf5\\x14\\x14\\xf2\\x0e\\xe3\\xf1\\x37\\x8c\\xf5\\\n\\x3b\\xfa\\xc5\\x71\\x36\\xbb\\x2d\\x41\\x3d\\x34\\x76\\x9d\\x88\\xa3\\xa8\\x3f\\\n\\xd0\\x7a\\xff\\x0c\\xb2\\x92\\x67\\x71\\x90\\xba\\x1e\\x69\\xaa\\xc3\\x86\\xfa\\\n\\xe6\\x4c\\xfe\\x6c\\xd7\\x30\\x0c\\x1b\\xd7\\x40\\x31\\x07\\x57\\x5b\\xc3\\x30\\\n\\x5e\\xac\\x30\\x4c\\x1b\\x91\\x87\\xc7\\x5f\\x1e\\xf8\\x53\\x57\\xac\\x17\\xeb\\\n\\xf7\\x31\\xac\\xe7\\xf8\\x7e\\x95\\x57\\x11\\x27\\x9e\\x49\\x13\\xc7\\xf2\\x3f\\\n\\x5a\\x43\\x59\\x6b\\xb3\\xc2\\x5c\\xd3\\x30\\x0c\\x1b\\xb8\\xbe\\xcb\\xd4\\x1f\\\n\\x47\\x35\\x7e\\x19\\x78\\xc1\\x9f\\x6d\\x8e\\xaa\\xfc\\x61\\xfb\\x65\\xe7\\xcf\\\n\\x43\\xd6\\xf3\\xfe\\x1a\\xc4\\xdb\\x9f\\xe5\\xff\\x81\\x86\\xb2\\x62\\x9a\\x98\\\n\\xfa\\xf3\\x42\\xc3\\x30\\x0c\\xb0\\xae\\xb3\\xf5\\x5f\\x35\\xad\\xb3\\x9a\\xbe\\\n\\x5f\\x3e\\xf0\\xe7\\xfb\\x95\\x89\\x84\\x0d\\x84\\xd4\\xef\\x4b\\x56\\x9e\\xf0\\\n\\x5c\\x64\\x85\\xd4\\xef\\x23\\xee\\x3b\\xf5\\x02\\xd5\\x7d\\x48\\xe6\\x4c\\x6b\\\n\\xf4\\x9f\\xa0\\x41\\x1c\\x6c\\xe0\\xba\\x08\\x7b\\x1f\\x83\\xb6\\x7d\\x55\\x5d\\\n\\xda\\x67\\x2f\\xf8\\xf3\\xbb\\x74\\x5d\\x8b\\x38\\xaf\\x73\\xc2\\xaa\\xeb\\x43\\\n\\x5a\\xb2\\xe2\\xc3\\xb4\\x6a\\xb3\\xbf\\x9b\\x9b\\x3f\\xda\\x22\\x80\\x23\\x2b\\\n\\xfb\\x7d\\x53\\xf6\\x7d\\xef\\xc5\\xf3\\x9b\\x3e\\xf9\\xc3\\x7d\\x67\\xf9\\x60\\\n\\xac\\xfc\\xd1\\xa5\\x7f\\xc8\\xbc\\x9b\\x33\\x59\\xbf\\x69\\xf3\\x7e\\xb1\\xbf\\\n\\xf7\\x33\\x41\\xb3\\xb1\\x9e\\xb1\\xf2\\x07\\xc7\\x0c\\xfb\\x80\\xde\\x6b\\x8a\\\n\\xef\\x1a\\x77\\x7c\\x81\\xcf\\xc4\\xa0\\x7c\\x7c\\xc1\\x6e\\x9f\\xfb\\x69\\x10\\\n\\x9f\\x2e\\xed\\x33\\x80\\xf1\\xf2\\x87\\x0b\\x2f\\x96\\x2c\\x5e\\x1a\\xf8\\x1f\\\n\\xc3\\x8a\\x1b\\xbf\\xef\\xaa\\xec\\x61\\x57\\x84\\xd4\\x7d\\x6c\\x4d\\xbf\\xef\\\n\\x00\\xa6\\x93\\x3f\\xda\\xce\\x6f\\xe0\\x98\\x8b\\xfd\\xbe\\x60\\xfa\\xb1\\x8e\\\n\\xb0\\x6d\\x32\\x64\\x21\\xcf\\xd8\\x79\\x83\\xfd\\x20\\x6d\\xf6\\x38\\xe8\\x9b\\\n\\x3f\\x4c\\xff\\x29\\xad\\x31\\x0f\\x52\\xf7\\x1d\\x19\\xc2\\x3c\\xbb\\x4e\\x88\\\n\\x6f\\x6f\\x14\\x92\\xa6\\xe3\\x0b\\x60\\x85\\x31\\x76\\xfd\\xd1\\x16\\xec\\xf1\\\n\\x29\\xbb\\x5f\\xa3\\xac\\xad\\x67\\xfb\\xf9\\x4f\\x8b\\x78\\x4c\\xe5\\xfd\\xd2\\\n\\x04\\xd8\\x27\\xed\\x45\\x08\\xe7\\x37\\x30\\x9d\\xd8\\x57\\xc4\\xf7\\x05\\xdb\\\n\\x23\\x6c\\xb3\\xb9\\xf3\\x1b\\x0f\\xc9\\x6f\\xe8\\x07\\xeb\\x0d\\x8e\\xdd\\x35\\\n\\x99\\xdf\\x60\\xf0\\x37\\xe5\\x0f\\xe6\\x0b\\x23\\x6f\\x4f\\x25\\x7e\\x66\\x81\\\n\\x22\\x7f\\xb4\\x79\\x8f\\x94\\xc1\\x94\\xf3\\x07\\x6d\\x27\\x1d\\x00\\xfa\\x3b\\\n\\xaf\\xe9\\x1c\\xa3\\x17\\x4b\\x26\\x75\\x7d\\x3f\\x4d\\x60\\xca\\xf9\\x73\\x10\\\n\\xd4\\xb7\\x2b\\x0c\\xed\\x23\\x61\\x84\\x98\\x9f\\x67\\xc3\\x94\\xf3\\x47\\x0c\\\n\\x7f\\xe6\\x83\\xb2\\x39\\xc6\\x29\\x06\\x92\\xc1\\x94\\xf3\\x87\\x3b\\x86\\xc5\\\n\\x31\\xbd\\x36\\x73\\x8c\\x42\\xc0\\x14\\xf3\\x87\\xf9\\x4e\\xe9\\x3b\\xc7\\x28\\\n\\x04\\x4c\\x31\\x7f\\xb8\\xe3\\x74\\x5d\\xe7\\xd0\\x84\\x80\\x29\\xf6\\x9f\\x99\\\n\\xef\\x38\\x7b\\x0e\\x96\\x4f\\x37\\x50\\xdd\\x1c\\xac\\x10\\x30\\xc5\\xfe\\x33\\\n\\xbe\\x23\\xf8\\xae\\xe8\\x32\\xc7\\x98\\x11\\xde\\x2f\\x06\\xfa\\xae\\x01\\x09\\\n\\x01\\x53\\xce\\x1f\\xbe\\x39\\x46\\x6d\\xd6\\x10\\x85\\x80\\x29\\xe7\\x8f\\xbe\\\n\\x6b\\xd0\\x42\\xc0\\x94\\xf3\\x47\\xdf\\x39\\x46\\x21\\x60\\xca\\xf9\\xc3\\x05\\\n\\x7b\\x7c\\x2a\\xf4\\x77\\x4a\\x19\\xfe\\xa6\\xfc\\x61\\xfa\\x8d\\x86\\xf8\\x4e\\\n\\x29\\xc3\\xdf\\x94\\x3f\\xc6\\x80\\x29\\xf6\\x0f\\x4d\\x09\\xa6\\xd8\\x3f\\x34\\\n\\x25\\x98\\xdf\\x2f\\xd5\\x30\\xe7\\x8f\\x6a\\x98\\xf3\\x47\\x35\\x84\\xca\\x9f\\\n\\xfc\\x40\\xeb\\xcb\\x38\\x11\\x42\\x5b\\xfc\\xa8\\xaf\\x89\\x7b\\xd5\\x4d\\x79\\\n\\x0f\\x0f\\xca\\x86\\x32\\xa2\\xac\\x28\\xb3\\x13\\x21\\x4c\\x0b\\xa6\\x49\\x88\\\n\\xfc\\x51\\xd6\\xe7\\xc7\\x71\\x12\\x8e\\x21\\x71\\xcd\\x12\\xd7\\x59\\x4e\\x52\\\n\\xb4\\x1c\\x68\\x7b\\x55\\x35\\x20\\x6d\\xed\\xcf\\x67\\x21\\x71\\xa2\\xfd\\x2c\\\n\\xdc\\x03\\x77\\x8a\\xc8\\x14\\x47\\x64\\xe4\\x1b\\xd3\\xb1\\xd3\\xa6\\x6d\\xfe\\\n\\xa0\\xae\\xd2\\x17\\x50\\x9d\\x3f\\xea\\xc6\\x4d\\x68\\x63\\x04\\xf3\\x0c\\xc7\\\n\\xe2\\x05\\x74\\x49\\xb4\\x1a\\x14\\x20\\xbc\\x4f\\x92\\xb8\\x34\\x1d\\xcb\\xf1\\\n\\xf9\\xf9\\x02\\xda\\xdb\\xb0\\x47\\x1d\\x52\\xd4\\x0d\\xc6\\x35\\x5d\\xb4\\xa5\\\n\\x25\\x05\\x7a\\xff\\x34\\x12\\xda\\x8e\\xc6\\x75\\x6f\\xbe\\x33\\x17\\xf8\\x08\\\n\\xfd\\x1d\\x05\\xdd\\xf4\\x68\\xb9\\x40\\x1e\\x47\\xe0\\x4f\\xfb\\x09\\xca\\xd2\\\n\\x9e\\x4c\\x64\\x7d\\x49\\x51\\x24\\x91\\xff\\x39\\x49\\xd3\\x27\\x92\\x46\\x21\\\n\\xd6\\xd2\\xf8\\x80\\xef\\x37\\xce\\xd7\\xa0\\xfe\\x24\\xda\\x74\\xc6\\xbd\\x8c\\\n\\xa8\\xf7\\x2a\\x65\\xc9\\xc8\\xa5\\x70\\xd0\\x2d\\x9f\\x30\\x0c\\xa3\\xb3\\xcc\\\n\\x25\\x8c\\x0b\\xd3\\x8c\\x36\\x18\\xc7\\x13\\x59\\x50\\xa6\\xbc\\x60\\xba\\xed\\\n\\x23\\xee\\x03\\xc1\\x39\\x40\\xdc\\x67\\xc5\\xcc\\x93\\xb2\\xcb\\x17\\xf7\\xce\\\n\\x38\\x69\\xc0\\x07\\xdb\\xd2\\x43\\xf0\\x67\\xdd\\x40\\x9e\\x78\\x0e\\x0a\\x8e\\\n\\xf3\\x0d\\x61\\xbf\\x22\\x2d\\x81\\xf3\\x13\\x2b\\x21\\xf5\\x37\\x11\\x09\\xf5\\\n\\x0a\\x54\\xe9\\x56\\x7b\\xc1\\x9f\\xfa\\x09\\xc8\\x23\\x08\\xe8\\xf5\\xd7\\xf4\\\n\\x06\\xdc\\x9f\\xb6\\x01\\xfe\\xb4\\x95\\x81\\xfb\\xfa\\xb2\\xb1\\xfc\\xa1\\x7b\\\n\\x23\\xc7\\x4f\\x32\\x09\\xfb\\x37\\xef\\xcf\\xd3\\x14\\x75\\x20\\xb5\\x0e\\x1d\\\n\\x12\\xea\\x68\\x17\\x20\\x74\\x8d\\xf3\\xdb\\x43\\x12\\x26\\x23\\x01\\x75\\x52\\\n\\xf0\\xec\\x71\\x76\\x3e\\x44\\x11\\x62\\x3f\\x5b\\x0b\\x19\\xdb\\xee\\xed\\x00\\\n\\x50\\xac\\x55\\xb0\\xdb\\x70\\x7c\\xa6\\x89\\xee\\x7c\\x46\\x40\\x43\\x50\\x9c\\\n\\x4d\\xc0\\xb4\\xdb\\x0d\\x8d\\x2a\\x91\\xe9\\xa1\\x0a\\x28\\xde\\xaf\\x2a\\x46\\\n\\x96\\xe5\\x37\\xd0\\x0c\\x23\\xd0\\x76\\x28\\xd1\\x8d\\x06\\x37\\x89\\x1b\\x3f\\\n\\x17\\xee\\xc4\\x8d\\x55\\xdd\\x91\\xb8\\xa5\\xd6\\x72\\xdb\\x8b\\x72\\xb7\\xc4\\\n\\x5d\\x6e\\x50\\x55\\xee\\xc6\\xe0\\x40\\xbb\\xe5\\xb6\\x53\\x25\\x72\\xfb\\x90\\\n\\xb4\\xed\\x54\\xa9\\xbb\\xdc\\x2d\\xb7\\xd3\\x48\\xfd\\x41\\xb7\\xdc\\x46\\x6a\\\n\\xb2\\x0d\\xed\\x46\\x73\\x8f\\x29\\xb4\\x5b\\x2a\\x37\\xdf\\x68\\x2d\\x77\\xd3\\\n\\x36\\x52\\x45\\x72\\xf7\\x05\\xb9\\x7b\\x9a\\xdc\\x3d\\x4d\\xee\\xbe\\x20\\x77\\\n\\x07\\xca\\xdd\\xcf\\xe5\\x6e\\xda\\x24\\xa4\\x54\\xee\\xa6\\x2d\\x4b\\xc6\\xcb\\\n\\x2b\\xa4\\x0d\\xe5\\xeb\\x39\\x15\\x0b\\xba\\x1d\\xe5\\xee\\x24\\xda\\x9d\\x04\\\n\\xfe\\x12\\xda\\x9d\\x4c\\xb9\\xc7\\x83\\x75\\x92\\x3b\\xba\\xdd\\xe5\\xee\\xe4\\\n\\x3f\\xdd\\xd2\\xf1\\xf6\\x39\\x58\\x6e\\x77\\x96\\xdb\\x3f\\x50\\xee\\x4e\\xa2\\\n\\xdc\\xe0\\x2f\\x26\\xee\\x24\\xf0\\x90\\x49\\x92\\xb1\\x03\\x97\\xe4\\x2f\\x77\\\n\\xa7\\xfc\\x76\\xfb\\x8b\\x7f\\xbb\\xc7\\xfb\\x07\\x12\\xb7\\x2c\\x30\\xc9\\xdd\\\n\\x5a\\xe1\\xce\\xf1\\xdb\\x4d\\x95\\x00\\xbf\\x5b\\xc2\\x72\\x87\\x3c\\x97\\x31\\\n\\xee\\x64\\x28\\xaa\\xc4\\xed\\xce\\xeb\\x8e\\x77\\xb3\\xd1\\xca\\xad\\x8c\\x8f\\\n\\x32\\x37\\x1a\\xb4\\xe5\\x75\\xcb\\x84\\x70\\xcb\\xcd\\x85\\xa6\\x00\\xed\\xb6\\\n\\x90\\x57\\x63\\xda\\x4d\\x49\\x90\\x4c\\x77\\xa0\\x93\\xd1\\x6c\\x69\\x3c\\x6d\\\n\\x44\\x4b\\x86\\x86\\x4e\\x25\\xb4\\xfd\\x52\\xb9\\x1d\\xe1\\xdf\\xf5\\x1c\\x6d\\\n\\xe0\\xfe\\x7e\\x17\\xa4\\xf6\\xd6\\xbf\\xdd\\x49\\x72\\xbb\\xa6\\xb4\\x3b\\x59\\\n\\x6e\\x73\\x98\\x76\\xd3\\x66\\x83\\x89\\x3b\\x80\\xe5\\x0e\\x21\\x6e\\xb4\\x43\\\n\\xea\\x01\\xf4\\x42\\x1c\\x63\\x87\\x54\\x10\\xab\\x02\\xda\\x03\\xc7\\x49\\xae\\\n\\x14\\x0d\\x01\\xfa\\x9b\\x8e\\xfb\\x8a\\xb1\\x2d\\x42\\x3d\\xe7\\x9f\\x84\\x12\\\n\\xc8\\xb3\\x8b\\xc4\\xcf\\x10\\x12\\xc6\\x54\\xc7\\x58\\x9a\\xa0\\x2e\\x45\\xab\\\n\\x28\\x7a\\x03\\xfc\\x63\\x4b\\x4d\\xe8\\x0d\\xe1\\x51\\x37\\x8d\\x65\\xd7\\x15\\\n\\x38\\x97\\x84\\xfb\\x37\\xef\\x81\\xf2\\x34\\xa1\\x9d\\x1d\\x1c\\xab\\x9f\\x00\\\n\\x7a\\x1d\\x79\\x1f\\x71\\x87\\x93\\xdf\\x94\\x85\\x43\\x9e\\x38\\x26\\x33\\xd5\\\n\\xb3\\x50\\x51\\xbf\\x1a\\x6d\\xe5\\x70\\xe5\\xc6\\x35\\x71\\xdc\\xf3\\x8b\\x73\\\n\\x07\\xf6\\x1a\\xf0\\xb1\\x27\\x7e\\x31\\xcc\\x33\\x1e\\x7e\\x8f\\x41\\x3b\\x5d\\\n\\x6e\\x43\\x03\\xe5\\xc5\\x79\\x02\\xb6\\x8c\\x38\\x37\\x84\\x67\\x17\\xd5\\x12\\\n\\x80\\x7f\\x2d\\xc2\\x8b\\xb1\\x29\\xc0\\xd0\\x21\\xd0\\x2c\\x3f\\x0d\\x09\\xec\\\n\\x6b\\xbe\\x05\\x85\\x4c\\xd8\\x79\\x59\\x03\\xb4\\x8d\\x57\\xa1\\x81\\x3c\\xd7\\\n\\x42\\xea\\xf3\\x06\\xdf\\x82\\xf1\\xfa\\xbb\\xc3\\x38\\xb2\\xe0\\xbe\\x84\\xca\\\n\\x69\\x10\\x6f\\x65\\x12\\x17\\x3b\\xcf\\xf9\\xf4\\xe0\\x0c\\x89\\x00\\x56\\xfc\\\n\\x38\\xee\\x58\\x08\\x69\\x6b\\x33\\xd4\\x8a\\xc4\\xc9\\x9e\\x0b\\x0d\\x48\\xa3\\\n\\xb8\\xa7\\x40\\xea\\xf7\\xbc\\x47\\x1a\\xc5\\xcb\\x87\\x9e\\x90\\xba\\x5d\\x98\\\n\\x6c\\xe0\\xf8\\xd8\\xf6\\x51\\x70\\xbe\\xaf\\x89\\x81\\xe3\\xd3\\x04\\x4d\\x29\\\n\\x4a\\x04\\x45\\x5d\\xd4\\xd4\\x26\\x84\\xb6\\xa8\\x06\\x8a\\xf3\\x8c\\xb1\\xcf\\\n\\xd6\\xc2\\x40\\xf1\\xe8\\x02\\x94\\x85\\xb1\\xcb\\x82\\x32\\x56\\x13\\x98\\x3f\\\n\\xce\\x43\\x45\\x82\\xa2\\x9e\\x0d\\x11\\x98\\xbf\\x10\\x18\\x0a\\x0a\\xf9\\x50\\\n\\x56\\x21\\xe7\\xce\\x96\\xb2\\x78\\x6f\\x13\\x90\\xaf\\xd0\\x40\\xd9\\x18\\x39\\\n\\x97\\x08\\xc4\\x13\\xed\\x74\\x30\\xdf\\x39\\x5c\\xbf\\xb3\\x11\\x88\\xaf\\x21\\\n\\x80\\xb2\\x31\\xe7\\xd3\\xa2\\xcc\\x15\\x04\\xe0\\x79\\x02\\x14\\x79\\xda\\x5e\\\n\\x00\\x7e\\x86\\x06\\xca\\xc8\\xc8\\x7b\\x42\\x4f\\x5e\\x38\\x5f\\xc6\\xb4\\xf7\\\n\\x21\\x7a\\xf2\\x4a\\x4b\\xb0\\xed\\x93\\xe9\\x33\\xe7\\xb7\\x15\\x14\\x79\\xd9\\\n\\x40\\x00\\xb9\\xd2\\x0a\\x28\\x2b\\x23\\xf7\\x56\\x1d\\x79\\xe0\\xde\\x13\\xe6\\\n\\xbb\\x7a\\x5b\\x87\\xf0\\x38\\x4e\\x0d\\x24\\xa4\\xcb\\x98\\x55\\xdf\\xf0\\x28\\\n\\x33\\xca\\x8e\\x69\\xd0\\xc5\\xc6\\xb6\\x17\\x28\\xf2\\x50\\xd3\\x7d\\x12\\x22\\\n\\x50\\xd8\\xb7\\xed\\xc4\\x0a\\xdf\\x89\\x3c\\xcb\\x45\\xfc\\x68\\x82\\x66\\xac\\\n\\xf0\\xcd\\x34\\x0c\\xc3\\xc6\\x70\\x56\\x78\\x2f\\x1d\\xc2\\xef\\x03\\xc5\\x3b\\\n\\xa4\\x89\\x5d\\x60\\x4c\\x17\\xda\\x5e\\x47\\xdb\\xdd\\x38\\x8f\\xc5\\xde\\xa3\\\n\\xf4\\x8b\\x3c\\xfb\\x41\\xfc\\x70\\xf3\\x00\\xed\\xca\\x35\\x02\\x45\\x39\\x57\\\n\\x87\\xd4\\xef\\xde\\x56\\xf2\\x0c\\x88\\x9f\\x46\\xa0\\xfe\\x3c\\x0d\\x07\\x50\\\n\\xb4\\x5d\\xfb\\xd4\\xf8\\xe5\\x02\\xe7\\xdd\\x98\\xb9\\x98\\x9b\\x1a\\x86\\xc1\\\n\\xb2\\x65\\xce\\x8b\\x51\\x45\\x3f\\xe0\\x4f\\x1b\\xc8\\x0f\\xc8\\x6f\\xa8\\x9f\\\n\\x72\\x51\\x45\\x58\\xfc\\x2d\\x18\\x14\\xf3\\x41\\xea\\x70\\x13\\x14\\x73\\x4e\\\n\\xda\\xcc\\x25\\x96\\x62\\xc5\\xb9\\x48\\x8b\\x70\\x6c\\xd9\\x71\\x3e\\x6b\\x00\\\n\\xa1\\x70\\x48\\x9d\\x06\\x2e\\x1e\\x81\\xfa\\x7c\\xe3\\x92\\x26\\xf6\\x56\\x16\\\n\\xb1\\xfc\\x6b\\x73\\x66\\x71\\x47\\x56\\xb8\\x9e\\x1a\\xf8\\xc7\\x3a\\xd9\\x19\\\n\\x14\\x75\\x1e\\xf5\\x69\\xb8\\x36\\x3f\\x98\\x3c\\x40\\x3f\\x9d\\x20\\x75\\x9b\\\n\\x56\\x17\\x52\\xa7\\x0d\\xcf\\x58\\xc6\\xd9\\xea\\xac\\x84\\xd0\\x7d\\x96\\xe3\\\n\\x47\\x93\\x39\\xd1\\x9e\\x2c\\xff\\xda\\x9c\\x69\\x38\\x9e\\x15\\x4e\\x93\\xb1\\\n\\x44\\x20\\x47\\xb6\\x01\\x3c\\x7e\\x06\\x70\\xfc\\xcc\\x60\\xfd\\xb6\\x9a\\xf5\\\n\\x1c\\xe7\\x7b\\xf9\\xea\\xaa\\x05\\x8f\\x3f\\x75\\xa8\\xce\\xf2\\x3f\\x5e\\x03\\\n\\xff\\x0c\\x18\\x1b\\x85\\x48\\x9a\\xb4\\x7d\\xfa\\xa4\\x1f\\xcb\\xf7\\x0b\\x79\\\n\\x86\\x3a\\x66\\xaa\\xf4\\x11\\x33\\x13\\x3f\\x32\\x12\\x46\\x9d\\x0d\\xa7\\x82\\\n\\xac\\xf8\\xb4\\xb1\\x25\\xb9\\x99\\x15\\x4e\\x13\\x3b\\x51\\x58\\x97\\xb1\\x4e\\\n\\x6b\\x5a\\xff\\x3b\\x92\\x67\\x98\\x6f\\x27\\x59\\x71\\x69\\x32\\x7f\\xc1\\x9e\\\n\\x7f\\x09\\x06\\xd5\\xfd\\x83\\x6c\\x2c\\xbf\\x9b\\x35\\xe0\\xcd\\x60\\x07\\x2b\\\n\\x9c\\x36\\x60\\xb7\\x7f\\x98\\x07\\x4c\\xfb\\xc7\\xd6\\xaf\\x63\\xda\\xbf\\xa6\\\n\\x90\\xba\\x3e\\x20\\x79\\x6a\\x10\\x87\\x27\\x4f\\xb8\\xa6\\x2a\\xfc\\x33\\x7e\\\n\\x76\\x68\\x91\\x0e\\x5d\\xd2\\x8f\\xdf\\x34\\x66\\x0e\\x42\\x93\\xef\\x1f\\xce\\\n\\x5d\\x33\\xe7\\xea\\x30\\xbf\\x69\\x32\\xaf\\x30\\x84\\xe5\\x3f\\x85\\xf0\\xc8\\\n\\xaf\\xc2\\x7f\\x5a\\xa5\\x5f\\x93\\xfe\\xcf\\x4f\\xf8\\xb3\\xff\\x83\\xf9\\xc0\\\n\\xe4\\x41\\xb0\\x06\\xf1\\x30\\xdf\\x7f\\x46\\x7f\\x5d\\x1d\\xd2\\x2a\\xfd\\x08\\\n\\xb4\\x0d\\xc2\\x9c\\x43\\xa4\\x4d\\xff\\xf7\\x3c\\x28\\xd2\\xd4\\x56\\x05\\xff\\\n\\x76\\xa0\\xc8\\xab\\xf3\\x1a\\xca\\x94\\x96\\xe9\\x67\\x43\\x9b\\xf1\\x0b\\x7b\\\n\\xbc\\x86\\xf3\\x77\\x83\\x38\\x61\\x32\\x91\\x67\\x89\\x2c\\x7f\\x9a\\xae\\x66\\\n\\x1b\\x2b\\xfd\\xda\\x80\\x39\\x07\\x9e\\x4d\\xb8\\xf6\\x7b\\x8c\\x10\\xdf\\x1a\\\n\\xb2\\xa6\\xf3\\x70\\x7f\\x43\\xfa\\xe3\\x49\\x5c\\xef\\x20\\x75\\x19\\x73\\x29\\\n\\x91\\xf8\\x41\\x77\\xac\\x86\\xbc\\x4d\\x35\\xfd\\x58\\xa7\\x67\\x10\\xc2\\xf7\\\n\\x1a\\xfb\\x73\\xa8\\xbb\\xed\\x04\\xb4\\x9d\\x38\\x66\\x5f\\xb5\\x8c\\xb8\\xe7\\\n\\x91\\xdf\\xd0\\x0f\\xf6\\x03\\x5b\\x6a\\x18\\x8f\\x29\\xa5\\x1f\\xdb\\x3e\\x66\\\n\\xfe\\x54\\x5d\\xfb\\xc8\\x9e\\xc7\\xd3\\x67\\xde\\xd1\\x54\\xd2\\xaf\\xcd\\xfc\\\n\\x00\\x7e\\x47\\xf0\\xbb\\xf8\\x98\\x90\\x26\\xdf\\x39\\x65\\x30\\x95\\xf4\\x63\\\n\\xb9\\x6b\\x3a\\x3f\\x20\\xe4\\x59\\x7e\\xa6\\x92\\x7e\\x84\\xae\\xf3\\x03\\xfa\\\n\\xc0\\x14\\xd2\\xaf\\xcb\\xf8\\x48\\x28\\x3d\\x1f\\x53\\x48\\xff\\x0c\\x48\\x5d\\\n\\xc7\\xb5\\x9d\\x1f\\xd0\\x07\\xe6\\xf4\\x1b\\x3f\\xfd\\xba\\xd4\\x7f\\x4d\\xe7\\\n\\xc9\\xd5\\xc1\\x14\\xd2\\xcf\\x40\\x9b\\xf9\\x01\\xa1\\x60\\x2a\\xe9\\xd7\\x76\\\n\\x7e\\x40\\x28\\x98\\x4a\\xfa\\x75\\x9d\\x1f\\xd0\\x17\\xa6\\x92\\x7e\\x84\\xae\\\n\\xf3\\x03\\xfa\\xc0\\x94\\xd2\\xcf\\x06\\x33\\xfe\\x99\\x0e\\x86\\xd5\\xe9\\x35\\\n\\xd5\\xf4\\xa7\\x15\\xcc\\xe9\\x37\\xa7\\xdf\\x9c\\x7e\\x73\\xfa\\xcd\\xe9\\xd7\\\n\\x1c\\xec\\xf4\\x9f\\x03\\xda\\xde\\x41\\x28\\x45\\x97\\x80\\x5e\\x87\\xc6\\xbd\\\n\\x07\\x1b\\x81\\xb6\\x7f\\x81\\xb6\\x57\\x50\\x07\\x5f\\x9f\\x39\\x1a\\x6d\\x81\\\n\\x73\\x43\\x8d\\x48\\xdc\\xb3\\x89\\x2c\\x87\\x88\\x6c\\x97\\x89\\xac\\x57\\x88\\\n\\xec\\xba\\xa4\\x7f\\x3b\\x2b\\x9c\\x36\\x84\\xe7\\x6d\\x6d\\xa1\\xa8\\x1b\\x08\\\n\\xdb\\x87\\xcd\\x45\\x78\\x6e\\x21\\x71\\xe8\\x22\\x9b\\x36\\x67\\xc9\\xe1\\x7c\\\n\\x2c\\xae\\x2f\\xa3\\xfd\\x98\\xb7\\x24\\xce\\x28\\xa0\\x75\\x2b\\xdf\\x83\\x42\\\n\\x0f\\x5a\\x15\\xa1\\x7e\\x38\\xce\\xd1\\xd7\\xd4\\x29\\xc5\\x34\\x6a\\x10\\x1e\\\n\\x6c\\x9b\\x7a\\xca\\xe8\\x3b\\x91\\x2d\\x9a\\x25\\xeb\\x3b\\x92\\x86\\xcf\\x24\\\n\\x4d\\x42\\x02\\xf5\\x8b\\x4b\\x02\\xad\\x03\\x8f\\x67\\xa9\\xa2\\x8e\\x92\\x54\\\n\\x89\\x6c\\x58\\x2f\\xab\\x6a\\xc1\\x1b\\xfd\\x9e\\x51\\xc2\\x0b\\xed\\xb1\\x6c\\\n\\x23\\x71\\x36\\x21\\x32\\x08\\x39\\x5f\\xa8\\x2f\\x50\\xcf\\x66\\x02\\xd0\\xb6\\\n\\x1d\\xd8\\x72\\xe3\\x18\\x07\\xe7\\xed\\x55\\xe9\\x0f\\xe3\\x6f\\xab\\xe0\\x4f\\\n\\xfb\\xd6\\xa8\\x1f\\x84\\x67\\x45\\x96\\x36\\x98\\xd4\\xc2\\x03\\xf5\\x55\\xd0\\\n\\xb6\\x0e\\xb6\\x99\\xdc\\xf2\\x73\\xe3\\xf1\\x8f\\xcf\\xa4\\x1c\\xbf\\x18\\xb6\\\n\\x09\\xfc\\xdd\\xfb\\x40\\x11\\xb8\\xa6\\x8b\\xe9\\x66\\x8f\\xf1\\x7d\\x58\\xbf\\\n\\x0f\\x83\\xd4\\x73\\xe3\\xcf\\x41\\xf5\\x3a\\xf0\\xdf\\x08\\x7c\\x47\\x37\\x40\\\n\\xea\\xf2\\x5d\\x46\\x88\\xfd\\x6c\\x03\\x98\\xd6\\xfb\\x2c\\x34\\x70\\x7f\\x0e\\\n\\xdf\\x1a\\x27\\x3e\\xf3\\x32\\x9e\\x58\\x69\\x0a\\x3c\\xc3\\xf4\\x03\\x28\\xd2\\\n\\xfe\\x01\\x34\\x3f\\xab\\x35\\xbd\\x00\\x6d\\x4f\\x31\\xeb\\x7b\\x46\\x6b\\xd7\\\n\\xe5\\xd6\\x02\\xe4\\x26\\x0d\\x92\\xe5\\x66\\x37\\x64\\x32\\x29\\x80\\xdc\\x9e\\\n\\x85\\xc4\\x26\\x5e\\x44\\x2c\\x0d\\xa0\\x07\\xb4\\xad\\x21\\xf1\\x97\\x9b\\xce\\\n\\x90\\xdb\\xd0\\x40\\x9b\\x1a\\x48\\x68\\x43\\x23\\xc5\\x46\\x46\\xdb\\xcf\\xb0\\\n\\x96\\xd1\\xf6\\x32\\xa6\\xc9\\x68\\x5b\\x19\\xd4\\x4d\\x20\\x6d\\x26\\x83\\xb6\\\n\\x91\\x41\\x79\\xb2\\xa1\\xcd\\x63\\xa4\\xa0\\x5d\\x03\\x59\\x92\\x3f\\x73\\x4d\\\n\\x76\\x67\\xfe\\xbd\\x2c\\x49\\x5f\\x25\\xa2\\x59\\xb9\\x93\\xdd\\x93\\xfc\\x25\\\n\\x22\\xb1\\x45\\x8a\\x63\\x92\\xbf\\xd4\\x9a\\xbe\\x06\\x04\\xd0\\xd7\\x69\\x17\\\n\\xa6\\x5d\\xa0\\xaf\\xd6\\x52\\xf9\\x73\\xb1\\x4d\\x7c\\x5d\\xc7\\x24\\x99\\x34\\\n\\x93\\x4d\\xbc\\x3b\\x75\\x95\\x00\\xb9\\x8a\\x6c\\xe2\\x65\\xd4\\xf5\\x65\\xc9\\\n\\xc0\\xe7\\x78\\x4d\\x76\\x0f\\x08\\xc0\\xab\\x4c\\x26\\xb6\\x48\\x75\\x4d\\x06\\\n\\xfa\\xfa\\xf2\\x7f\\xee\\xf2\\xab\\x04\\xc8\\x95\\x4a\\x39\\x5e\\xd1\\xfa\\x08\\\n\\x5e\\xa9\\xe0\\xf2\\xeb\\xb4\\x0b\\xa9\\xaf\\xcc\\x73\\xc6\\x1f\\x13\\x8e\\xb9\\\n\\xbe\\x2c\\x49\\x5f\\x93\\xdd\\xe9\\x2b\\x42\\xf3\\x2b\\x1a\\x82\\xa0\\xfe\\xc8\\\n\\xed\\x4c\\x88\\xf1\\x0a\\xfe\\x29\\x68\\x1c\\x25\\x19\\xdd\\x58\\x70\\xf1\\xd6\\\n\\x52\\x79\\xde\\x26\\x8b\\x24\\xf2\\x72\\x94\\xcb\\x23\\x2f\\x48\\x11\\x7d\\x8d\\\n\\xa7\\x4d\\x93\\xc8\\x4b\\x4d\\xee\\x11\\xbd\\x61\\x67\\x05\\x0f\\x2a\\xf4\\x02\\\n\\x85\\x9d\\x08\\xb1\\xe1\\xac\\xba\\xe1\\xdc\\x26\\xf6\\x87\\xb1\\x2f\\x83\\x67\\\n\\x54\\xa1\\x0e\\x37\\xda\\xaa\\x64\\xec\\x40\\xc4\\x91\\x67\\x07\\x88\\x9f\\x9a\\\n\\x20\\xfc\\x7c\\xa8\\x2e\\xc0\\xbd\\xd7\\x38\\xd6\\x43\\x5b\\x88\\x4c\\x9b\\xc5\\\n\\xb6\\xcb\\xf4\\x83\\x10\\xdb\\x4e\\x1e\\xf3\\xdb\\x4b\\x12\\xd6\\x10\\x7b\\xc2\\\n\\xd5\\x01\\xf7\\x08\\xa0\\x6d\\xd2\\xef\\x2c\\xd9\\x70\\x6f\\x20\\xee\\xe7\\xeb\\\n\\x42\\x51\\x39\\xa0\\xf7\\x86\\x58\\x13\\xca\\x4d\\x9e\\x75\\x21\\x7e\\x22\\x59\\\n\\xe1\\xbe\\x13\\x5e\\xea\\xf6\\x1d\\x08\\x05\\x94\\xe1\\x03\\x28\\xf2\\x17\\xc7\\\n\\x17\\x35\\x74\\xe0\\x53\\x83\\x84\\x65\\xca\\xe7\\x3d\\xe1\\x6d\\x28\\xa0\\x8e\\\n\\xf2\\x4a\\x50\\xe4\\x1b\\xea\\x2b\\x6a\\xa3\\x7b\\xaf\\x0c\\xa5\\x08\\x2f\\x86\\\n\\xef\\x0a\\xd0\\xce\\x76\\xab\\x26\\xc0\\x75\\xc8\\x63\\x84\\xff\\x57\\xd0\\xec\\\n\\x0c\\x58\\x6d\\x81\\x3c\\x19\\x7b\\x8b\\xc7\\x40\\x38\\x7b\\xb9\\xb8\\x86\\x70\\\n\\x1c\\xe8\\xf7\\x0e\\xf5\\xe5\\x0c\\x69\\xeb\\xaa\\x0a\\x28\\x74\\xf2\\x8e\\x83\\\n\\x30\\xeb\\x17\\x2b\\x08\\x3f\\xb4\\xaf\\x2a\\x44\\x7d\\x51\\x07\\xec\\x73\\x30\\\n\\x69\\x58\\xa1\\x27\\x2f\\x7c\\x9f\\x98\\x3a\\xa3\\xcd\\x38\\x5f\\x5f\\x54\\x25\\\n\\x71\\xa6\\x80\\xee\\xef\\x34\\xb6\\x67\\xef\\x09\\x0f\\x43\\xd4\\x77\\x75\\xe8\\\n\\x07\\x8a\\x76\\x49\\x97\\xb6\\x95\\xa9\\x37\\x9a\\xe8\\x4e\\x1b\\x0a\\x8c\\x4e\\\n\\xb6\\xb6\\xf5\\x08\\x6d\\x82\\xe2\\x77\\x05\\xbf\\xfd\\x69\\x51\\xe7\\x95\\xa1\\\n\\x14\\x91\\xe1\\x3b\\x68\\x67\\xa7\\x94\\x39\\x57\\x54\\xd7\\x3d\\xa6\\x42\\x02\\\n\\x65\\x40\\x59\\x34\\xb5\\xc9\\x8c\\xfd\\xaa\\x97\\x24\\x8c\\x26\\xdf\\x55\\x9c\\\n\\x83\\xb9\\x42\\x48\\x93\\xf9\\x18\\x6d\\xfd\\xd7\\x00\\x45\\x7f\\x49\\x93\\x3e\\\n\\x5f\\x4d\\x50\\xec\\x7f\\x50\\xc5\\x1f\\x6d\\x47\\xe3\\x3e\\x70\\xb6\\x2d\\xe3\\\n\\x43\\xe4\\xd9\\x38\\x8e\\x5f\\x6c\\x13\\x71\\x5e\\x13\\xdb\\x73\\xdc\\x73\\xca\\\n\\xf4\\x4b\\x9b\\x91\\x67\\x39\\x40\\xf9\\x58\\x0d\\x65\\x60\\xfa\\x4b\\x9a\\xe4\\\n\\xe7\\x44\\xe2\\x57\\x9d\\x9d\\x02\\xf6\\xfe\\x7b\\xae\\x8d\\xee\\xe3\\x2c\\x7f\\\n\\x38\\x9e\\xc4\\x79\\xc3\\xbb\\x90\\xfa\\x4c\\x26\\x26\\x2c\\xca\\xf6\\x80\\xf8\\\n\\x51\\xf6\\xae\\x2d\\x21\\x61\\x26\\x6a\\x20\\xff\\x01\\x50\\xdf\\xee\\x62\\x9e\\\n\\x30\\xb6\\xa1\\xd0\\xbf\\x3d\\x21\\xe6\\x0c\\xd6\\x43\\xa0\\x28\\x3b\\x9c\\xf3\\\n\\xb9\\xc7\\x92\\xf9\\x3e\\xd0\\x3a\\xcf\\xf3\\x88\\x9b\\x49\\xcf\\x3d\\x50\\x3e\\\n\\x3f\\xc4\\x7c\\x87\\x0e\\x68\\x20\\x3f\\x13\\x57\\x39\\x15\\x7e\\xae\\x80\\x22\\\n\\xcf\\xd9\\xeb\\x3b\\xf6\\xac\\xe7\\x97\\xc8\\x33\\xec\\x8b\\x31\\xe5\\x8f\\x73\\\n\\x5a\\xec\\x3a\\x2c\\x22\\xcf\\x98\\xfe\\xb7\\xb2\\xfe\\x42\\x39\\x50\\xa4\\x51\\\n\\x1d\\xe2\\x88\\x5f\\x55\\x7b\\xbb\\x35\\x95\\x1f\\xcb\\x80\\xd9\\x6f\\xfd\\x00\\\n\\xf8\\xdf\\x3f\\x11\\x28\\xf6\\xe9\\x2a\\xdb\\x8f\\x9d\\x9b\\xf0\\x8c\\x53\\x23\\\n\\x3b\\xf2\\x62\\x6c\\xdb\\xaa\\x7a\\xd7\\xd9\\xf5\\xe7\\x20\\x49\\x03\\xb7\\xfe\\\n\\xa0\\x4e\\x0d\\xa6\\x93\\xd1\\xad\\x9a\\xaf\\x82\\xdf\\x7c\\xe2\\xe7\\x27\\xf0\\\n\\xb7\\x4b\\x22\\x50\\xd8\\xd8\\x55\\x25\\x17\\x96\\x1f\\x33\\xa6\\x52\\x87\\x13\\\n\\xa0\\xdc\\xd6\\xfe\\x09\\x50\\xb4\\x93\\xcc\\x33\\x75\\xf2\\x33\\xfe\\x94\\xb5\\\n\\xab\\xcc\\x58\\x4d\\x28\\xf9\\xb1\\x8d\\xc4\\x76\\x46\\x5d\\xfb\\x89\\x73\\xfd\\\n\\xcc\\x7b\\xab\\xae\\xfe\\xa8\\xb2\\xd3\\x2f\\xb4\\xfc\\x0c\\xd4\\x7d\\x8f\\xb4\\\n\\x79\\x7f\\x55\\x8d\\xbb\\x0c\\x25\\xbf\\x3a\\x60\\x9b\\xf8\\x00\\x14\\x65\\x84\\\n\\xe5\\x30\\x9f\\xd0\\x7d\\xd6\\xf3\\xbb\\xa0\\x7a\\x7e\\xdd\\x58\\xf2\\x33\\xdf\\\n\\x2f\\x6c\\xfb\\x18\\x5b\\x4b\\xdc\\xef\\x17\\xfe\\x86\\x76\\x6d\\x54\\xf5\\x15\\\n\\xd3\\x5a\\x7e\\xac\\x4b\\x97\\x08\\x31\\xfd\\x07\\xac\\x1f\\xdc\\xfe\\x03\\x3e\\\n\\xc3\\x7c\\x57\\xd7\\xcf\\x4d\\x2b\\xf9\\x71\\x3f\\xb8\\xaa\\x7e\\x91\\xb6\\xfd\\\n\\x37\\x06\\x69\\x25\\x3f\\x33\\xe6\\x50\\xd7\\x2f\\xd2\\x16\\x69\\x21\\x3f\\xf7\\\n\\xbb\\xa6\\xaa\\x5f\\xa4\\x2d\\xd2\\x42\\xfe\\x4b\\xa0\\x79\\xbf\\x48\\x5b\\x98\\\n\\xe5\\x57\\x0f\\x65\\xfd\\x22\\xa6\\x4f\\x6e\\xea\\xf5\\x07\\xa1\\x6a\\x5c\\xa3\\\n\\x8f\\xdd\\xae\\xb4\\x92\\x5f\\xd3\\x7e\\x91\\xb6\\x30\\xc6\\xf7\\x0b\\x75\\xc6\\\n\\x98\\x71\\x80\\xbe\\x30\\x56\\xff\\x41\\x28\\x98\\xe5\\x37\\x2e\\x32\\x9a\\xfc\\\n\\xb6\\x40\\xcf\\xfb\\xe2\\x59\\x86\\xa8\\xe7\\x28\\xf4\\x9a\\x8e\\x2a\\x64\\x26\\\n\\x71\\xda\\x11\\x19\\x98\\xf1\\xbb\\x36\\xf2\\xb3\\xdb\\x6d\\x26\\x2c\\xea\\x4c\\\n\\x5e\\x07\\x5a\\x5f\\x13\\xcf\\x09\\x43\\x5b\\xfe\\x96\\x7a\\xc8\\x69\\x49\\x78\\\n\\xf8\\x12\\x9e\\x61\\x24\\x0e\\x55\\x32\\xa8\\x9b\\x43\\xc4\\x7e\\x2d\\x8e\\xf3\\\n\\xd1\\x8e\\x40\\x0c\\xe1\\x87\\x67\\xc9\\xb0\\xcf\\x4c\\x63\\x5f\\x51\\x07\\x14\\\n\\xe7\\x56\\x9d\\xb4\\x90\\xdb\\x91\\x84\\x61\\x74\\x56\\xd9\\xe3\\x99\\x14\\x12\\\n\\xd7\\x27\\x12\\x77\\x0c\\x91\\x05\\x65\\xba\\xac\\x45\\x1c\\x5c\\x60\\xba\\xf1\\\n\\xac\\x29\\xd4\\xa7\\xc1\\xbd\\x75\\x1b\\x41\\x31\\xcf\\x8b\\x84\\xeb\\xa0\\x68\\\n\\xa3\\x5c\\x95\\xed\\x74\\x7b\\xe2\\x87\\xbd\\xa6\\xfd\\x0a\\xe8\\xf3\\xbe\\x06\\\n\\x12\\xde\\x05\\x21\\xed\\xd6\\xe6\\xb1\\xfc\\xeb\\x02\\xad\\xc3\\xcc\\xcc\\xf3\\\n\\x60\\x5e\\xf5\\xe4\\xf1\\xdb\\x83\\xfc\\xc6\\xcc\\xf3\\x60\\x18\\x77\\xd0\\xaf\\\n\\xfe\\x09\\x09\\x1c\\xff\\x61\\xbf\\x81\\xc9\\xd7\\xf5\\xa0\\x58\\x7f\\x5f\\x0f\\\n\\x8a\\x3a\\x72\\x1c\\x8c\\xbb\\x26\\xa2\\x0e\\xa8\\xc7\\xc6\\x9c\\xaf\\x19\\x42\\\n\\x28\\x85\\x3c\\x33\\x94\\x0d\\x6a\\xa1\\x81\\x67\\x39\\xa2\\xae\\x34\\x93\\xe7\\\n\\x51\\xe4\\xd9\\xdf\\x04\\x7c\\x0f\\x6f\\x10\\xd2\\xc4\\x56\\x9b\\x4e\\x90\\x6b\\\n\\x49\\xa1\\xaa\\x18\\x95\\x53\\x78\\x80\\x0d\\x1e\\xcd\\x84\\x07\\x2a\\xc9\\xe2\\\n\\xdd\\xe5\\x87\\x29\\xe1\\x99\\x49\\x78\\x60\\x12\\xea\\x7d\\xe1\\x01\\x49\\xa8\\\n\\xef\\x25\\xc5\\xab\\x0d\\x7d\\x18\\x12\\xea\\x79\\xe1\\x81\\x47\\xa8\\x74\\x84\\\n\\x87\\x14\\x25\\xa3\\xda\\x98\\x3b\\x7d\\x9e\\x0e\\x1e\\xa6\\x23\\xd7\\x73\\xa2\\\n\\xae\\xf1\\x32\\x1b\\xea\\x3f\\x75\\x4d\\x16\\x89\\x1d\\xa9\\xeb\\xa7\\x64\\x11\\\n\\xd8\\x2c\\xa4\\xae\\x49\\x16\\xe4\\xea\\x6d\\x45\\x5f\\xbd\\x6c\\xf0\\xfa\\x3c\\\n\\x09\\x1c\\xa7\\x05\\x02\\x44\\x27\\x53\\xd7\\x50\\xbc\\x8a\\x6c\\x6c\\xf0\\x2a\\\n\\xb3\\xb1\\xa2\\xaf\\x32\\x48\\x7d\\xa5\\x3c\\xca\\xaf\\xf1\\x20\\xa3\\xaf\\x36\\\n\\xf4\\x55\\x6a\\x4d\\x5f\\x9f\\x07\\xa6\\xbe\\x32\\xcf\\x19\\x7f\\xcc\\x95\\x4a\\\n\\x09\\xcd\\x57\\xa6\\xea\\x2a\\xc5\\x74\\x5b\\xa3\\x62\\xb3\\x7f\\x0a\\xbe\\xe1\\\n\\xf1\\xa8\\xae\\x65\\x83\\xf9\\x65\\x2d\\x95\\xe7\\x57\\x8a\\x48\\x7e\\x60\\x15\\\n\\xad\\xa6\\x85\\x57\\x54\\xd3\\xc2\\x2b\\xaa\\x69\\xe1\\x15\\x73\\x8c\\x6e\\x08\\\n\\x9c\\x80\\x3e\\xd3\\xe7\\xb7\\x9e\\x96\\xad\\xde\\xc5\\x8a\\xeb\\xe7\\x33\\x29\\\n\\xba\\x00\\xb4\\x2e\\x00\\x33\\x5f\\xf5\\x86\\x3c\\x9b\\x09\\x86\\x59\\xcf\\x6f\\\n\\x0e\\x74\\x7d\\xc5\\x77\\x0e\\xd7\\xef\\x50\\xe7\\x1d\\xf5\\xa1\\xbb\\x12\\xf2\\\n\\x21\\xcf\\x18\\x5b\\x7f\\x37\\x48\\x18\\x7d\\x81\\xfd\\x9b\\xbd\\x40\\xbf\\xef\\\n\\x78\\xad\\xae\\xda\\xbb\\x1c\\xd5\\x39\\x61\\x74\\xb1\\xa5\\x8b\\x70\\x02\\x5a\\\n\\x8f\\x1f\\xfb\\x02\\xba\\x9c\\xc4\\x84\\x61\\xa2\\x09\\x0f\\x27\\x2d\\xc3\\xe2\\\n\\xf7\\xfc\\x19\\xd0\\xf9\\xa8\\xcf\\x3e\\x25\\x0c\\x7b\\x93\\xf0\\xd2\\xf4\\xec\\\n\\x15\\xec\\x23\\xe0\\xde\\x6e\\x94\\x3b\\xaf\\x1e\\x71\\x33\\xc8\\x4b\\x78\\x5d\\\n\\x04\\xcd\\xfa\\x1f\\x68\\x07\\x18\\xfb\\x54\\xaa\\xd6\\xf9\\xb4\\x45\\x39\\xc2\\\n\\x53\\x9d\\x5d\\x64\\x9c\\xef\\x45\\xdb\\xb3\\x42\\xd9\\xb2\\x60\\x03\\x79\\x7e\\\n\\x00\\xd5\\x73\\xf9\\x68\\x2b\\x10\\xbf\\xc7\\xca\\xea\\x6c\\x71\\x42\\xca\\x50\\\n\\x8c\\x10\\x1f\\x72\\x13\\xde\\xaa\\x6c\\x16\\x62\\x9f\\x60\\x13\\xcf\\x73\\x6c\\\n\\x53\\x70\\xff\\xce\\x5d\\x42\\x23\\x41\\xd1\\xce\\xe0\\x98\\x04\\xcf\\x7e\\xc6\\\n\\x74\\x9d\\x26\\x94\\x93\\x3c\\xe3\\x8e\\x8d\\xd0\\xa6\\xa5\\x32\\x7b\\x11\\x68\\\n\\xfb\\x12\\xfb\\xaf\\x9d\\x79\\x7e\\xc3\\xf8\\xb0\\x5d\\x09\\x07\\x85\\xdd\\x8d\\\n\\x91\\xe4\\x37\\x3c\\x47\\x01\\xf3\\x35\\x0e\\x14\\x7d\\x75\\x74\\x63\\x39\\x72\\\n\\xd3\\xda\\x99\\xc4\\x91\\x0d\\xfe\\x44\\x65\\x12\\x96\\xab\\x4d\\x8b\\xf9\\x79\\\n\\x97\\xc4\\x6b\\x49\\x28\\x9c\\x3c\\xc3\\xdf\\xaa\\x91\\x70\\xa8\\x6b\\x99\\x97\\\n\\xd0\\x72\\xf2\\x8c\\xdb\\x16\\x97\\x20\\xcf\\xf9\\xce\\xdd\\x69\\x41\\x7e\\xe3\\\n\\xda\\x2f\\x55\\x15\\x3f\\xee\\x63\\x44\\x5b\\xd1\\xb8\\xce\\xc2\\x9e\\x0b\\x42\\\n\\xf7\\x7d\\xf2\\x1b\\xbb\\x3e\\x64\\x25\\x71\\xf0\\x9d\\x05\\xc2\\xd8\\xef\\xe2\\\n\\xc3\\x28\\xe0\\xcf\\x7f\\xe6\\x4c\\x9b\\x43\\x3c\\x61\\x98\\x79\\xb6\\x85\\x9c\\\n\\xe7\\x32\\xe0\\xb7\\x0f\\xa6\\x2a\\x7e\\x6e\\xfd\\x1b\\x05\\x8a\\xbc\\x1d\\x03\\\n\\x74\\x59\\xdb\\xb1\\xfc\\xdb\\x91\\x67\\x63\\x78\\x78\\xe9\\x12\\x3f\\x03\\xbe\\\n\\xf7\\xaf\\x36\\x28\\xd6\\xe1\\x07\\x12\\x62\\xd6\\x4d\\xf9\\xce\\xd3\\xd2\\x27\\\n\\x7e\\x2e\\xb0\\x6c\\x31\\x5f\\xd0\\x1e\\x21\\x9e\\x79\\xfe\\x8d\\xd0\\x4e\\xf2\\\n\\xac\\xb5\\x81\\xe2\\xc7\\xbc\\xc7\\x32\\xe0\\xb6\\x07\\x8b\\x41\\xbd\\xdd\\x5e\\\n\\x21\\xe2\\x57\\x56\\x1f\\x35\\x81\\xbe\\xf1\\xab\\x6b\\x0f\\xd2\\x7b\\xfc\\x08\\\n\\x63\\xe6\\x3f\\x42\\xd5\\xf7\\x28\\x2d\\xe2\\x67\\xa0\\xea\\x7b\\x9b\\x16\\xf1\\\n\\xeb\\x02\\x53\\x8f\\x1f\\xe7\\x22\\xfa\\x50\\xd4\\x1d\\xe8\\x75\\x78\\x17\\xd0\\\n\\x6d\\x8e\\xd5\\x8a\\x84\\x6d\\x46\\x78\\xf5\\x21\\xbc\\x95\\xc5\\x8f\\xf3\\x55\\\n\\x38\\x0f\\x89\\x67\\x9b\\xa2\\x7d\\x53\\xf6\\x9e\\x71\\xdc\\xeb\\x77\\x0e\\xe8\\\n\\xfd\\xfb\\xaa\\xf6\\xc9\\xe7\\x22\\x7e\\xce\\x41\\xea\\x3d\\x83\\x49\\x84\\x67\\\n\\x02\\x89\\xa3\\xae\\x86\\x69\\x40\\xdd\\x84\\xf2\\x44\\x6e\\x6c\\xd3\\x51\\x77\\\n\\x1a\\xe7\\xca\\xf0\\xfd\\xe3\\xea\\xbb\\x8c\\x22\\xbf\\x7d\\x25\\x7e\\xbd\\x49\\\n\\x58\\x21\\xf7\\x66\\x62\\x9f\\x0e\\xfb\\xb1\\x98\\x36\\x9c\\xf3\\x74\\x20\\x74\\\n\\x99\\x3c\\x9b\\x41\\xfc\\x18\\x1a\\x65\\x81\\xee\\xf3\\xbc\\x24\\x74\\x8f\\x3c\\\n\\x4b\\x4b\\x60\\x59\\x9f\\x21\\xa4\\xb3\\xed\\x04\\xf9\\xee\\x33\\xb1\\x85\\x2c\\\n\\xc5\\x26\\x5e\\xbe\\xa7\\x0e\\x77\\xd8\\xc5\\xcb\\x64\\x36\\x9f\\x64\\xb2\\x85\\\n\\xd1\\x32\\x59\\x68\\x74\\x4c\\x4c\\x68\\x4c\\x00\\xc4\\x84\\x06\\x40\\x34\\x4e\\\n\\x53\\x84\\x82\\x7d\\x9f\\x08\\xb1\\xdb\\xa8\\x88\\x00\\xfb\\xcf\\x11\\x31\\xf0\\\n\\x39\\x22\\x85\\xa2\\x24\\x6b\\x8a\\x1c\\x3f\\x47\\xc4\\xdb\\xd0\\x84\\x6e\\xa4\\\n\\x14\\xff\\xcf\\x11\\x32\\x99\\x9c\\x24\\xee\\xc9\\x22\\x89\\xb5\\x54\\x94\\x62\\\n\\x21\\xf6\\x97\\xc7\\x89\\xd3\\x15\\xc9\\xee\\xf2\\xfd\\x64\\x38\\x30\\xc4\\x3d\\\n\\x65\\xcc\\x3c\\x85\\x97\\x26\\x16\\xf4\\x53\\x03\\xe7\\x42\\xf1\\x1d\\xc3\\xf1\\\n\\xb6\\x14\\xe8\\x3a\\xfe\\x9d\\xb8\\xf7\\x92\\xdf\\xac\\x75\\xcc\\x22\\xb4\\xb5\\\n\\x85\\x63\\xf0\\xe3\\x84\\x4f\\x51\\xa0\\xdf\\x6d\\x2b\\xe2\\xee\\x4e\\x7e\\x7b\\\n\\x01\\x0a\\xbb\\x5c\\x9a\\x00\\xbf\\x9b\\xa8\\x23\\x86\\xfd\\x64\\x4d\\xf4\\x7f\\\n\\x6b\\x10\\xbf\\xcb\\x40\\xb3\\xb9\\x69\\xf4\\x87\\x76\\x14\\xb4\\x79\\xff\\xd0\\\n\\xef\\x39\\x12\\x56\\x15\\x3a\\x11\\x59\\x74\\x79\\xb7\\x73\\x92\\xb0\\xca\\xf2\\\n\\x0a\\xcb\\x09\\xf3\\x52\\x97\\xbd\\x5b\\x0c\\x6a\\x10\\x1e\\x7c\\x65\\x8e\\xe7\\\n\\x01\\xf0\\xe9\\xfb\\x54\\x22\\xa4\\xe9\\xf3\\xe3\\xc0\\x7f\\xfe\\x00\\x53\\xdf\\\n\\xd8\\xc0\\x33\\x1b\\xde\\x13\\x3a\\x49\\x9e\\x75\\x00\\x7a\\x7d\\xea\\x3f\\x42\\\n\\x23\\x20\\xf5\\x77\\xc1\\x93\\xf0\\xe2\\x42\\x0a\\x74\\xbd\\x63\\xcb\\x87\\x7c\\\n\\x6b\\x10\\x42\\xb7\\x2b\\xe1\\x87\\x6d\\x13\\x33\\x47\\xf6\\x92\\xc4\\xc7\\xa0\\\n\\x28\\xe1\\xc5\\x05\\xbe\\x37\\xec\\xef\\x1d\\xc3\\xbf\\x3a\\x8b\\x3f\\x7e\\xcb\\\n\\x6e\\x11\\xbe\\x0c\\xba\\x91\\x67\\x4c\\x5e\\x65\\x26\\xbc\\xd8\\xc0\\x7a\\x9b\\\n\\xcc\\x13\\x27\\x37\\x7f\\x2a\\x69\\xc0\\x1f\\x08\\x2f\\xf6\\xb8\\x53\\x19\\x7f\\\n\\x26\\x1d\\xec\\xb0\\x4c\\xfe\\x74\\x23\\xc4\\xcd\\x1f\\x6d\\xf9\\xb3\\x81\\xf9\\\n\\x3f\\x83\\xf0\\xbb\\x45\\x88\\x5b\\xbe\\xba\\xf2\\xe7\\xe6\\x95\\x2b\\x21\\x3e\\\n\\x68\\xcb\\xdf\\x15\\xf8\\xeb\\x92\\x32\\xe8\\xca\\x9f\\x5d\\x97\\x84\\xe4\\x8f\\\n\\xe0\\x7b\\xd7\\x84\\xe4\\x8f\\x50\\x95\\xe7\\x42\\xf0\\xd7\\x14\\xca\\xf8\\xe3\\\n\\x17\\x34\\x0b\\xe8\\xa6\\x9f\\x63\\x41\\xc2\\x66\\xe5\\xe1\\xcf\\x9c\\xf3\\x85\\\n\\x7d\\x3c\\x1c\\xe7\\x63\\x9f\\x0b\\xe7\\xdc\\xb1\\xbf\\xd7\\x1d\\xf8\\xf7\\x66\\\n\\x32\\xdf\\xe6\\x9d\\xc4\\x6f\\x22\\x09\\xfb\\x15\\xd4\\x9f\\xb3\\x85\\x61\\xb1\\\n\\x8b\\x80\\x7d\\x49\\x2c\\x4b\\xa6\\x3d\\x63\\x80\\xee\\x68\\xf2\\x5b\\x6f\\xe2\\\n\\x57\\xd7\\xef\\x3c\\x02\\xeb\\x25\\x8e\\xe7\\x56\\x13\\xba\\x0b\\x9a\\xcd\\xf9\\\n\\x6b\\x83\\xec\\x40\\xcf\\x4d\\x1d\\x22\\x6e\\x8d\\x90\\x02\\xfe\\x54\\x61\\xb8\\\n\\xe3\\x7a\\x17\\x7c\\x92\\x2d\\x84\\x68\\x59\\x28\\x84\\xca\\xa2\\x21\\xc2\\xed\\\n\\x33\\xdc\\xb4\\xad\\x4c\\x0d\\x82\\x29\\x12\\xe5\\x85\\xf5\\xa2\\x02\\xb0\\xa1\\\n\\x62\\x4d\\xd8\\x20\\xa5\\x48\\xf2\\x1d\\x36\\x04\\x10\\x0a\\xa1\\x28\\x86\\x22\\\n\\xd9\\x77\\x98\\x26\\xbb\\x00\\x62\\x37\\x0b\\x48\\xb2\\x77\\x04\\x59\\x80\\x0c\\\n\\x64\\x21\\x32\\x79\\xc6\\xe1\\xf2\\x90\\x13\\x28\\xfa\\x61\\x1e\\x9a\\xed\\x52\\\n\\xc5\\xfe\\xb6\\x18\\x68\\x5d\\xc2\\xdd\\x84\\x0e\\x90\\x67\\xea\\xfa\\xe2\\xb8\\\n\\x46\\x71\\x14\\xf8\\xbf\\xf5\\x35\\xc8\\x6f\\xca\\xd6\\x3e\\xb0\\x5c\\xd0\\x46\\\n\\x97\\xba\\xf3\\x9f\\xb6\\xc3\\x9f\\x65\\x88\\xe3\\x15\\xfc\\x7e\\x6b\\x92\\xff\\\n\\xd9\\x89\\x5f\\xf6\\x78\\x07\\xd7\\x96\\x06\\x11\\x37\\xf6\\x67\\x98\\x6f\\x48\\\n\\x4e\\x12\\x67\\x2d\\x42\\x8c\\x6c\\x83\\x20\\xf5\\x7a\\x14\\xea\\xd8\\x3b\\x12\\\n\\x77\\x37\\x22\\xe3\\x76\\x50\\xd8\\x2c\\xdb\\x46\\x68\\x0b\\xf1\\xe3\\x08\\xa9\\\n\\xf7\\x79\\xa0\\x8e\\x82\\x25\\x4f\\x78\\x5c\\x7f\\x0b\\x67\\xf9\\x43\\xb7\\x0b\\\n\\xf1\\xcb\\xb6\\xe7\\xb6\\x8b\\xe5\\xe6\\xca\\x8f\\xfe\\x3a\\x12\\xda\\xae\\x24\\\n\\x0c\\xdb\\xcd\\xe5\\x13\\x04\\xf4\\x5a\\x1c\\xee\\xc3\\xaa\\xab\\x24\\x0c\\x5f\\\n\\x78\\x6e\\x3e\\x70\\x61\\xe8\\xf0\\xdc\\x7c\\xd0\\x36\\xbc\\x3a\\xb0\\xc3\\x6c\\\n\\x26\\xf7\\x98\\xd7\\x73\\x80\\x9e\\x23\\xe0\\x8e\\xa7\\x9b\\x91\\xdf\\x76\\x10\\\n\\xbf\\x7c\\xe7\\x71\\xa1\\x3f\\x9c\\x0f\\xc6\\x75\\x06\\xd4\\x23\\xad\\x49\\x08\\\n\\xdd\\xb8\\x2e\\xf1\\x3f\\xd0\\x5c\\xe7\\x06\\xd7\\x24\\x36\\x11\\xe2\\x5b\\x9f\\\n\\x90\\x23\\xde\\x46\\x3e\\x08\\x84\\x50\\xaa\\xd5\\x5d\\xf8\\x09\\x60\\x51\\x56\\\n\\x42\\x54\\x0b\\x7d\\x90\\xca\\xb5\\x33\\x48\\x75\\x14\\x74\\xfe\\x17\\x40\\x40\\\n\\x00\\xd5\\xd1\\xb4\\xc6\\xb5\\x7c\\x80\\xff\\x03\\x1e\\xb9\\x27\\xb8\\\n\\x00\\x00\\x47\\x94\\\n\\x00\\\n\\x02\\x8e\\x29\\x78\\x9c\\xed\\x5d\\x07\\x5c\\x13\\x49\\x17\\x1f\\xe0\\x14\\xc5\\\n\\x02\\x9e\\x8a\\x5d\\x10\\xbb\\x77\\xf6\\x5e\\xb1\\xa0\\xe2\\xa7\\xe8\\xd9\\xb1\\\n\\xf7\\x5e\\xb8\\xb3\\xa2\\xa2\\x04\\x1b\\x88\\x67\\xc1\\x2e\\x16\\x3c\\x7b\\x57\\\n\\x14\\xbb\\x42\\x14\\x3d\\xec\\x78\\x62\\x6f\\xc4\\xde\\x25\\x8a\\x25\\x4a\\xc9\\\n\\xb7\\x7f\\x76\\x97\\x6c\\xc2\\x26\\x24\\x61\\x53\\xc0\\xfc\\x7f\\x3e\\x77\\xb3\\\n\\xcc\\xce\\xbc\\x29\\x3b\\xe5\\xbd\\x37\\x6f\\x08\\xb1\\x22\\x39\\x09\\x60\\x45\\\n\\x9c\\x49\\x4c\\x41\\x42\\x56\\x50\\xf7\\x22\\x11\\xfd\\xbb\\x42\\x0e\\x2b\\x32\\\n\\xc2\\x91\\x90\\xfe\\xfd\\xe9\\xdf\\xdb\\x97\\x11\\x12\\x54\\xd2\\x8a\\xb8\\xbb\\\n\\xd3\\xbf\\x03\\xba\\x10\\x52\\xff\\xa0\\x15\\x69\\xda\\x94\\x09\\xdf\\x9c\\x90\\\n\\xd3\\xb6\\xd6\\xa4\\x5a\\x35\\x26\\x7c\\x59\\x42\\x5e\\xb7\\xb1\\x26\\xce\\xce\\\n\\xcc\\x6f\\x07\\xea\\x7d\\x2f\\x6b\\x52\\xb8\\x30\\xf3\\x3e\\x95\\x74\\x7d\\x91\\\n\\x35\\x71\\x70\\xa0\\x7f\\x0f\\xff\\x85\\x7a\\x7f\\x9e\\x35\\x99\\xf7\\x47\\xfb\\\n\\xd6\\x79\\xec\\x8a\\xda\\x51\\xac\\xe4\\x69\\xe3\\xee\\xd6\\x09\\x7f\\x05\\xe5\\\n\\xc8\\x4e\\x5d\\x7a\\x8f\\xdb\\x3e\\x94\\xba\\xe4\\xfc\\xd3\\xbd\\xc7\\x78\\x42\\\n\\xf2\\x46\\x82\\xac\\xa2\\xbc\\xb6\\x0f\\x26\\xa4\\xe0\\x9c\\x36\\x6e\\xcd\\xba\\\n\\x78\\xaf\\x7d\\xff\\xd0\\x2b\\xa0\\x60\\xf7\\xe0\\xa8\\x8f\\x5e\\x67\\xe6\\xbc\\\n\\x2f\\xf4\\xad\\x65\\xe4\\xe7\\x81\\x91\\x47\\x2b\\xdc\\xe9\\xdf\\x62\\xf6\\xe7\\\n\\x5f\\x4b\\x35\\x9f\\x5d\\xab\\x42\\x99\\xb6\\xbf\\xd8\\x94\\x6e\\xe7\\xec\\x97\\\n\\xef\\xd7\\x55\\x7e\\xb9\\x9f\\xcd\\xa9\\xfa\\xc9\\x25\\x57\\xb8\\xb4\\xa5\\xe7\\\n\\xa7\\x33\\x7d\\x0e\\x48\\xaa\\xf4\\x18\\xee\\x58\\xe8\\x40\\x5b\\xc7\\xe2\\x7f\\\n\\x3a\\xd6\\xac\\x37\\xbf\\xc7\\xda\\x52\\x35\\x57\\x95\\xad\\x52\\xf4\\xf2\\x86\\\n\\x59\\x55\\xde\\x6f\\x38\\xfd\\xbb\\x5d\\xe5\\xb0\\x3f\\xe7\\x9c\\xa8\\xba\\x7e\\\n\\xda\\xb6\\xb8\\x09\\xef\\x3e\\xc4\\x77\\xb9\\xb9\\x63\\xfc\\xce\\x37\\xdf\\xfc\\\n\\x66\\x95\\xd8\\x3e\\xc1\\x75\\xa2\\xd7\\xba\\xce\\x2f\\xe5\\x53\\xec\\x5e\\x1f\\\n\\xa8\\xd8\\xdf\\x76\\xff\\xf4\\x65\\x43\\x45\\xaf\\xe7\\x85\\x24\\x6c\\x92\\xaf\\\n\\x2f\\xd9\\xc7\\xf5\\x7b\\x7c\\xab\\x92\\x7f\\x5f\\x7f\\x16\\xfd\\x74\\xc2\\xb4\\\n\\xcf\\x71\\x47\\x36\\x85\\x78\\x59\\xc9\\x73\\x35\\xda\\xfb\\x64\\xe8\\xd9\\xb8\\\n\\x1d\\x37\\xac\\xdc\\x27\\x34\\xee\\x5f\\xb7\\x9a\\xfd\\xbb\\x22\\x49\\x27\\xc6\\\n\\x2f\\x1b\\xba\\xb4\\xe5\\x97\\x6d\\x63\\x0f\\x76\\x73\\xf6\\xc9\\xd3\\xbb\\x44\\\n\\x52\\x42\\xc3\\x2e\\xf5\\xdc\\xb6\\x58\\x6f\\xe8\\xf3\\x43\\x7c\\x50\\x1c\\xde\\\n\\xf1\\x9e\\xcd\\xe5\\x01\\x73\\x9a\\xe6\\x6f\\xfc\\xaf\\xdd\\xcc\\x4b\\xe2\\x42\\\n\\x9b\\x3e\\xbb\\x8a\\x23\\x97\\x35\\x3b\\x34\\xcf\\x4e\\x34\\xf4\\xbe\\xd5\\xef\\\n\\x0b\\xaf\\xf7\\xfd\\x3d\\x72\\xf2\\xe9\\x21\\x92\\xba\\xe2\\x61\\x9b\\x3e\\x7b\\\n\\x5c\\xec\\x1f\\xdc\\x2e\\x5b\\xd3\\x83\\xa3\\x6d\\xfa\\x0e\\xad\\x1c\\x13\\xd7\\\n\\xae\\x70\\xdb\\xf6\\xe1\\xd9\\x67\\xcc\\x29\\x98\\x3d\\xc4\\x5a\\xbe\\xb2\\x56\\\n\\x70\\xf6\\x8e\\x56\\x8b\\x23\\x5e\\x8a\\x5a\\x78\\xfe\\x1b\\xbb\\xb2\\xde\\x8a\\\n\\x72\\xde\\x7f\\xdf\\xcc\\xdb\\x24\\xdb\\x8c\\x85\\xb5\\x8b\\xb8\\x15\\x7d\\x9e\\\n\\x4d\\x52\\x66\\x7f\\xee\\xdc\\xcb\\xff\\xb7\\xe5\\xf9\\x7f\\xc3\\xbe\\xcf\\x7c\\\n\\x5b\\xcc\\x61\\xc7\\xdd\\xf8\\x0a\\x31\\xb7\\x3b\\x16\\x3e\\xb9\\x68\\xe2\\xb2\\\n\\xc0\\x32\\x47\\xf2\\xd4\\xcb\\xde\\xbb\\xf4\\xf4\\x17\\xaf\\x7a\\xfe\\xf8\\xd5\\\n\\xbb\\x98\\xec\\xd1\\x8a\\xd8\\x25\\xee\\xe7\\xfa\\x5a\\x5d\\x25\\x36\\xd7\\x87\\\n\\xcd\\xde\\xbb\\xad\\xab\\x64\\x90\\x44\\xbc\\x35\\xd6\\xb3\\xed\\x8e\\xfc\\xfb\\\n\\x9b\\x4c\\x97\\x78\\x48\\xb6\\xdd\\xb9\\xe3\\x93\\x7f\\x77\\xc8\\x85\\xba\\x5f\\\n\\x2b\\xc7\\x96\\x98\\x1f\\x37\\xe8\\xa0\\x6d\\xd4\\xfa\\x5a\\x4b\\xab\\x4d\\xee\\\n\\xee\\x17\\x61\\x9b\\x5c\\xc4\\x7b\\x59\\xbd\\x15\\x3d\\xb7\\x93\\x00\\xaf\\x42\\\n\\x2b\\x5e\\x2f\\x5a\\xd2\\xa1\\x95\\x77\\xee\\x07\\xab\\xdc\\x27\\x87\\x86\\x7e\\\n\\xee\\xb5\\x29\\x24\\xee\\xd3\\xb6\\x22\\xe1\\x76\\x31\\x77\\x2e\\x47\\xf6\\x18\\\n\\x2d\\x1b\\x57\\xac\\xce\\x73\\xef\\xb1\\x9f\\x63\\xeb\\x7b\\x78\\x4e\\x25\\x89\\\n\\x36\\xd2\\x23\\x61\\x3e\\x0b\\xfd\\xec\\x44\\xde\\x93\\xac\\x7c\\xf3\\x9c\\x6c\\\n\\x76\\xdc\\x36\\xa1\\xfa\\xd7\\x6e\\x27\\x02\\x3d\\xd6\\x7f\\x0f\\x3c\\xd4\\x2e\\\n\\x64\\x53\\xfd\\xd1\\x3b\\x3f\\x8d\\xbd\\x55\\xae\\xce\\x95\\xa5\\x1f\\xe2\\xa7\\\n\\xfd\\x92\\x98\\xbf\\x9b\\x43\\x62\\x93\\x8e\\xb9\\xaf\\x57\\x8b\\x1e\\x38\\xe6\\\n\\x62\\x81\\xf7\\x09\\x6b\\x36\\x45\\x24\\x75\\xee\\x6f\\xd5\\xeb\\x5d\\xcc\\x84\\\n\\xce\\x9e\\x03\\xa4\\x79\\x27\\x79\\xd5\\xdd\\x21\\x1f\\x5f\\x82\\xb4\\xf5\\xfc\\\n\\xa7\\xca\\x27\\xb7\\x13\\xfb\\xfd\\x37\\x7f\\xc8\\xed\\x6b\\xe7\\xbd\\xc0\\xc7\\\n\\xf1\\xeb\\x8d\\x01\\x0d\\x27\\x45\\xb7\\xbd\\xd1\\xcb\\x39\\xb7\\x68\\xd1\\xfe\\\n\\x17\\xf3\\x73\\xf4\\x5f\\xd7\\xa7\\x7c\\xe8\\xa3\\x67\\x77\\xec\\x25\\x95\\xfe\\\n\\x74\\x94\\xe5\\xbc\\xf2\\xda\\x7d\\x77\\x64\\xa3\\x3a\\x9b\\x27\\xaf\\xff\\x11\\\n\\xee\\x9f\\xff\\x59\\xcc\\xb6\\xd2\\x39\\x3f\\x8b\\x26\\xfb\\x25\\x9c\\x9d\\x7e\\\n\\xe7\\x83\\xcd\\x36\\xbf\\xd2\\x9e\\xfb\\x8e\\x8f\\xde\\xbb\\xe8\\xcb\\x89\\xb5\\\n\\xd9\\xbb\\x05\\xc8\\x1f\\x26\\xae\\xf2\\x69\\x50\\x75\\x4b\\x39\\xdb\\x80\\x86\\\n\\x53\\x86\\x15\\x94\\xfd\\xe2\\xbd\\x7c\\x52\\xd8\\xd3\\xce\\xab\\xcf\\xd8\\x5d\\\n\\xad\\x79\\x76\\x4f\\x91\\xde\\xcd\\x3a\\x2f\\x68\\x38\\xc0\\xf6\\x6b\\xb5\\x73\\\n\\x53\\x17\\x37\\xb1\\x7d\\xd4\\xdc\\xeb\\x47\\xe1\\xa1\\xfb\\xa3\\xbf\\xfe\\xfa\\\n\\x31\\x3c\\x22\\x66\\xbb\\xef\\x86\\x43\\x8f\\xca\\xb5\\x5f\\xfe\\xa9\\x89\\xb4\\\n\\xd4\\xc3\\x1e\\x97\\x42\\x66\\x9d\\xf2\\x7c\\x39\\x62\\x77\\x5c\\x7c\\xeb\\x2f\\\n\\x0f\\x03\\xcf\\x1e\\xce\\x75\\xb4\\xe9\\x17\\xfb\\x8b\\xb5\\x77\\xd7\\xec\\xd0\\\n\\x35\\x71\\xc2\\x8f\\x3b\\xd2\\x27\\x13\\x77\\xca\\x67\\x44\\x0f\\xac\\xdd\\x6a\\\n\\xc4\\xfe\\xc9\\xdb\\xc3\\xdf\\x7b\\x5b\\x8d\\xba\\xdf\\xb6\\xc9\\x54\\xcf\\x7e\\\n\\xcd\\x6e\\x5e\\x99\\x55\\x70\\xf7\\xd2\\x3f\\x8a\\x0e\\x75\\xac\\xd7\\xfa\\x90\\\n\\x7d\\xe4\\x94\\xdd\\x6f\\x2a\\x4e\\xe9\\xb5\\xf9\\x47\\xd1\\xd8\\x22\\xb5\\x06\\\n\\xdf\\x29\\x5c\\xd5\\xea\\xdb\\xf6\\xaf\\x0b\\x22\\x3c\\x5f\\xe6\\x71\\x2f\\xeb\\\n\\xb8\\xe3\\xb0\\xb3\\x67\\xf6\\xbe\\xbb\\xe3\\xb3\\x9f\\xdd\\x66\\xeb\\xd3\\x74\\\n\\x62\\x3f\\x59\\xd9\\x65\\x1f\\xef\\xf7\\xcf\\x77\\xbf\\xe1\\x86\\xc0\\x61\\x03\\\n\\x49\\xf1\\x7d\\xb5\\xa7\\xe6\\xac\\xd1\\x76\\xe2\\x96\\x24\\x8f\\xd1\\x2e\\x81\\\n\\x61\\xad\\xed\\x7b\\x5d\\x99\\xe2\\x3f\\x72\\x7d\\xd0\\xf8\\xed\\x6d\\x16\\x2f\\\n\\x78\\xb9\\x7d\\x68\\xb1\\xbd\\x5d\\x25\\x8d\\x6f\\xec\\x8a\\x1d\\x3a\\x7d\\xb4\\\n\\xdd\\x9f\\x05\\x4b\\x44\\xde\\xf6\\x1b\\xf6\\x26\\x4f\\xbf\\x5b\\xd3\\xd6\\x8d\\\n\\x0c\\xbf\\x3c\\x7e\\xf8\\xfc\\x0f\\x55\\x56\\x6f\\x0b\\x2e\\xfa\\xd4\\xee\\xcf\\\n\\xa3\\x2f\\xee\\x0c\\x79\\x56\\xef\\x79\\x84\\x78\\xc8\\x68\\x99\\xfb\\xf1\\xd7\\\n\\x79\\x2e\\x4e\\x2e\\x6c\\xbf\\xff\\xf1\\xd0\\x1d\\x6d\\x16\\x8d\\x5c\\xf1\\x7e\\\n\\x7d\\xab\\xf7\\xf5\\x42\\x2b\\xfe\\x1b\\xf2\\x47\\xf2\\x94\\x1f\\x0e\\x95\\x2b\\\n\\x05\\xee\\x5d\\xb4\\x20\\x6a\\xe5\\xf7\\x8d\\x1f\\xfe\\x39\\x12\\xee\\x73\\xbb\\\n\\xe3\\xc5\\x7d\\xb9\\x93\\x7e\\x29\\x68\\xfd\\xdf\\x67\\xbf\\xf9\\xcb\\xbc\\xde\\\n\\x46\\xef\\x96\\x9f\\x73\\x29\\x7d\\xbf\\xa2\\x7c\\xe6\\xb1\\x00\\xc7\\x59\\x5d\\\n\\xc7\\xae\\x18\\x37\\xe8\\x98\\xcd\\xe8\\xf7\\x11\\xe7\\xbb\\x4d\\xf5\\x94\\x77\\\n\\x5a\\x5d\\xf9\\x71\\x97\\x1c\\x5d\\x86\\xaf\\x18\\x37\\xea\\xdb\\x4a\\xbf\\xa4\\\n\\x43\\xad\\x2b\\x7b\\x4c\\x5e\\x3c\\x2e\\x3e\\x7b\\x95\\x8d\\xf7\\x86\\x8e\\x18\\\n\\x52\\x53\\xde\\xf2\\xf8\\xa1\\xdb\\xeb\\xbb\\x8c\\x6a\\xf8\\xdc\\xb1\\xf0\\x8e\\\n\\x72\\x7f\\x34\\x77\\xba\\xdf\\x7f\\xd3\\x2b\\xff\\x88\\xd9\\x0d\\x06\\x6f\\x3e\\\n\\xd9\\xe4\\xf0\\x9a\\x50\\x3b\\xbf\\xa2\\xcb\\x5f\\x4b\\x8b\\xf5\\x7f\\xf9\\x65\\\n\\x5e\\x97\\xd7\\xf5\\xce\\xe5\\xf2\\x1b\\xff\\x6a\\x48\\x81\\xdd\\xad\\x3f\\x6e\\\n\\x39\\x69\\x53\\xeb\\x6c\\xf9\\x8f\\x27\\x9b\\x7d\\xbc\\x7a\\x7a\\x51\\xfe\\xb3\\\n\\xf7\\xdd\\xb7\\x55\\xf8\\x6a\\xb5\\x6f\\xc3\\xd5\\x26\\xf3\\xe2\\x1c\\xce\\x1d\\\n\\x71\\x69\\x18\\xe4\\xfc\\xa8\\x55\\xfd\\x56\\xa1\\xf6\\x5f\\xf3\\x4e\\x5a\\xb2\\\n\\xd0\\xbd\\xc4\\xd7\\xce\\x27\\x1d\\xbc\\x6b\\x36\\x3b\\xb9\\xe0\\xcf\\x55\\x03\\\n\\x6f\\xee\\x6a\\x78\\xe7\\x49\\xde\\xa0\\x06\\x05\\x2b\\xff\\x92\\x7d\\xc2\\xe7\\\n\\x0a\\xf1\\x57\\xde\\x6d\\xbd\\xe3\\xbf\\xe3\\x72\\xd5\\x8a\\xd4\\x83\\x0f\\x03\\\n\\x5a\\xfc\\x3d\\xf3\\x8b\\xac\\x5f\\xb3\\xd5\\xfd\\x82\\x77\\x0c\\x2f\\xf5\\x67\\\n\\xce\\x05\\xb9\\xc9\\xb9\\x7f\\x3d\\xbb\\x8b\\xa6\\x57\\x9c\\x59\\x70\\xca\\xcc\\\n\\xa4\\x02\\xf7\\x57\\x3e\\xe9\\x12\\xd8\\x7f\\xfc\\xa7\\x3a\\xe7\\xee\\xfd\\x51\\\n\\x75\\x5b\\x8e\\x6e\\x83\\xf3\\xb7\\xae\\x70\\xcb\\xff\\xcb\\x54\\xea\\x59\\xb5\\\n\\x0e\\xa1\\x3b\\x97\\x7e\\x7d\\xbb\\xb4\\x77\\xc1\\x29\\xff\\x3c\\xdc\\x36\\x2b\\\n\\xc9\\xaa\\x71\\xe0\\x95\\xd0\\x26\\xeb\\x5d\\x3c\\xf3\\xf9\\xbb\\x34\\xec\\xdc\\\n\\xcf\\xfd\\xd7\\x11\\xcd\\xcb\\x4b\\x7d\\xdd\\x87\\x2d\\x75\\xab\\xf4\\x24\\x66\\\n\\xd3\\x9d\\xf5\\xd6\\xeb\\x56\\x87\\x27\\xff\\x9e\\x7c\\xf8\\x7a\\xc1\\xb0\\x0d\\\n\\xcd\\x83\\x07\\x15\\x95\\x4f\\x99\\xb3\\x6b\\x42\\xff\\x2e\\xbb\\xfc\\x7d\\xe7\\\n\\xc4\\xda\\x55\\x5b\\xe9\\xe2\\x19\\xf4\\xab\\xa3\\x74\\x51\\xee\\xb5\\x1d\\x7e\\\n\\x1d\\xb1\\x20\\x70\\xc2\\x92\\xed\\x31\\x1d\\x82\\x77\\x9e\\x8f\\x7f\\x74\\xaf\\\n\\xa3\\xdf\\x7b\\x59\\xdd\\x3e\\x8d\\xd6\\x95\\xe9\\x14\\xf4\\x66\\xed\\xe9\\x6f\\\n\\x97\\x63\\x37\\x6d\\x39\\xd1\\xb5\\xea\\xe3\\x04\\xe7\\xb1\\x1b\\x27\\x45\\xd4\\\n\\x8a\\xad\\x95\\xbc\\x74\\x57\\xfb\\x72\\xf3\\x6a\\x6d\\xcc\\x96\\x58\\xc2\\x77\\\n\\x7e\\x45\\xeb\\x82\\xf3\\x24\\x0e\\xe1\\xc3\\x7c\\x9b\\x5e\\xfa\\x71\\xea\\x64\\\n\\xa4\\x8b\\xd3\\x96\\x9c\\x9d\\xcb\\x14\\x8d\\x7b\\x5c\\x7a\\xcf\\xdd\\xa6\\xcf\\\n\\x48\\x78\\xb1\\x7e\\x5b\\xb7\\x8c\\x71\\x7e\\x1d\\x56\\x24\\x31\\x6a\\x71\\xe3\\\n\\x90\\x32\\xd7\\x03\\xa7\\xf8\\x27\\xdd\\x78\\x5b\\x75\\xcc\\x17\\xc7\\xf0\\x93\\\n\\x7f\\x56\\xf1\\x58\\x75\\x73\\x4a\\xbe\\xd8\\x3c\\xfd\\xda\\xe5\\xdf\\xea\\x5e\\\n\\x79\\xaa\\xcc\\xfe\\xe8\\x88\\xcf\\xed\\xbb\\x17\\x92\\x3e\\x7c\\xf7\\xa8\\xd6\\\n\\x80\\xc0\\x1b\\x43\\xf3\\xf5\\x5b\\x5f\\x6f\\x69\\x99\\x8b\\x76\\xef\\xce\\x4d\\\n\\xde\\xd4\\x76\\xc4\\x99\\x02\\x3b\\xd6\\x4d\\x1e\\x2b\\x5e\\x5f\\x6b\\xc0\\x8a\\\n\\xa7\\x77\\x5f\\x6d\\x9a\\x18\\x59\\xd2\\x65\\x8d\\xa7\\xb8\\x3b\\xa9\\x35\\xf6\\\n\\xe9\\xe2\\x1e\\x3e\\x4f\\x93\\xa7\\x26\\xb4\\xbd\\xed\\x3d\\xd2\\xea\\xb7\\x5a\\\n\\xa3\\x07\\xbf\\xeb\\xf3\\xf9\\x6b\\xa1\\xbb\\x7f\\x1f\\x71\\x94\\x4e\\x0a\\xae\\\n\\x96\\x34\\x55\\xb6\\xb5\\xc9\\xe1\\xa1\\x67\\x66\\x05\\xc4\\xf4\\x38\\x13\\x7f\\\n\\x61\\xb9\\x5b\\xf5\\xe3\\x25\\xce\\x76\\x3f\\x30\\x62\\x7c\\x87\\xd7\\x3b\\x57\\\n\\x7e\\x7c\\xbe\\xbc\\xd5\\x5a\\x9f\\x43\\x6e\\xb2\\x3c\\x7d\\xfe\\x57\\x60\\x93\\\n\\x7b\\x95\\x46\\xbd\\x9e\\x0c\\x8b\\x70\\x1f\\x6e\\x17\\xdb\\x2a\\x24\\xf8\\x4b\\\n\\xf9\\x3e\\xdf\\xf2\\x9f\\x89\\xbf\\x54\\x63\\x75\\x48\\xd9\\x3f\\x0b\\xf7\\x8b\\\n\\x7e\\xd1\\x25\\xb8\\x5a\\xcb\\x03\\xff\\x45\\x1d\\x19\\x7f\\xed\\xf4\\x05\\xf9\\\n\\xf7\\xd7\\x0d\\x4a\\xe7\\x91\\xd4\\x0f\\x4e\\xe8\\xe7\\xd7\\x3a\\xd4\\x3a\\xdf\\\n\\x88\\x00\\x7f\\x71\\x74\\xf1\\xdb\\x72\\xe7\\x6e\\xce\\x5d\\xa5\\xbb\\x27\\xf5\\\n\\x6c\\x97\\x7f\\xa3\\xfb\\xa4\\xbe\\x65\\x1b\\xc5\\x3e\\x68\\x57\\xe0\\xe9\\x8a\\\n\\xaf\\x8f\\x47\\x5d\\x0a\\x08\\x78\\xfd\\x78\\xda\\x94\\xe4\\xbf\\xbe\\x49\\xd6\\\n\\x06\\x93\\xaa\\xf5\\xf7\\x26\\x4d\\x09\\xab\\xe0\\x16\\xfc\\xb2\\xba\\x74\\xc7\\\n\\xd3\\x1f\\xdd\\xff\\x75\\x7d\\xd6\\x85\\x14\\x7f\\xf0\\x63\\x89\\xeb\\x8f\\x45\\\n\\xc3\\x3b\\x06\\xd4\\x8a\\xa9\\x5a\\xfc\\xf6\\xd4\\x4f\\x3d\\x2b\\x6f\\xcd\\x11\\\n\\x77\\xa1\\x77\\xcb\\x53\\x72\\x97\\xb7\\x1e\\xf9\\xc3\\x67\\xbc\\x98\\xb1\\xb1\\\n\\x70\\xdd\\x67\\x23\\xe4\\x75\\x67\\xac\\xcc\\x1f\\xe4\\xde\\xe8\\xc4\\xb0\\xf7\\\n\\x7e\\x3e\\xc1\\x64\\xfd\\xa9\\x4b\\x33\\x0a\\x56\\xb6\\x0b\\x1a\\x9a\\x70\\xf9\\\n\\xaf\\xf7\\xf1\\x8b\\x3b\\x58\\x49\\x56\\x47\\xcb\\xdf\\x22\\x96\\xfb\\x5e\\x25\\\n\\x6e\\x0f\\x3d\\x34\\xed\\x56\\xed\\x33\\x3b\\x2b\\xdb\\x4c\\xb8\\xe3\\x7f\\xbe\\\n\\xd5\\xd0\\x1c\\x5e\\xd6\\x83\\x0f\\x2e\\xdc\\xda\\xda\\xfb\\xe5\\xb9\\x95\\xf3\\\n\\x06\\x16\\x18\\x11\\x78\\xad\\xf3\\x9c\\xb8\\x16\\x25\\x3d\\x44\\xf5\\xcf\\x14\\\n\\xaa\\xe0\\x53\\xa2\\xa6\\x43\\x90\\xe3\\xd1\\xa2\\xde\\x0f\\x6b\\x55\\x5b\\xd3\\\n\\xc2\\x4a\\x52\\x3f\\x26\\x71\\x1c\\xc5\\xe4\\xbd\\xc7\\x73\\x9f\\xde\\x6b\\x5c\\\n\\xbf\\x00\\x39\\x51\\xfc\\x76\\x72\\x95\\x9e\\x05\\x5c\\xde\\x4b\\x97\\x3f\\xbd\\\n\\xd7\\x87\\x7a\\x70\\x70\\xe1\\xa8\\xc6\\x5b\\xd6\\xb8\\x17\\x9a\\x12\\x7c\\xa1\\\n\\x47\\x2d\\xab\\x46\\xd9\\xc4\\xef\\xa9\\x64\\xc3\\x22\\xfb\\x44\\x1d\\xba\\x3f\\\n\\xbe\\x02\\x39\\x6c\\xdb\\xf7\\x5b\\x61\\x6f\\x87\\x94\\x38\\x9f\\x1f\\x9d\\x54\\\n\\xce\\xdf\\xda\\x39\\x2c\\xfb\\x86\\x23\\x11\\xee\\xab\\xbc\\x6c\\xf6\\x5d\\xda\\\n\\x48\\x72\\xf4\\xb9\\xb3\\xc9\\xba\\x69\\x99\\x76\\xc3\\x3d\\xea\\xcf\\x2f\\xd7\\\n\\x74\\xb8\\x95\\xb4\\xde\\x48\\x2a\\xee\\x7c\\x89\\x07\\x2e\\xff\\x43\\xa4\\x13\\\n\\xac\\x03\\xdd\\xe7\\x8c\\xab\\x40\\x9a\\x4f\\x99\\x5a\\xb7\\xe5\\xe0\\x51\\x3d\\\n\\x3e\\x5b\\xcd\\xbe\\x9e\\x57\\xec\\x72\\xf3\\x4d\\xdd\\x1d\\xc4\\x21\\x68\\x64\\\n\\xe3\\x91\\x9d\\xac\\xf6\\xd7\\x9c\\x48\\x5c\\x2a\\x8f\\xaf\\x4b\\xc5\\x3b\\xe1\\\n\\x72\\x27\\xb7\\x4a\\x2b\\x5a\\x58\\x49\\xab\\xe1\\x51\\xcd\\xfc\\x53\\x07\\xe4\\\n\\xcd\\xd6\\x74\\xfb\\xb5\\x8a\\x91\\x2e\\x7d\\xea\\x96\\xf0\\x7e\\x38\\xab\\xb8\\\n\\x9d\\xa8\\x97\\xdf\\xed\\x11\\xe1\\x22\\xf7\\x55\\xd7\\x56\\x0e\\xd9\\xf4\\x83\\\n\\xfc\\x78\\xd5\\x88\\x04\\xed\\xf1\\xee\\xbb\\xac\\x47\\x01\\xb2\\xf7\\xf9\\xfc\\\n\\xff\\x36\\x3a\\x8c\\xb0\\xbd\\xfd\\xe9\\xc7\\xd6\\x82\\x64\\x7c\\xca\\x7d\\x87\\\n\\x92\\xdf\\x29\\x7e\\x25\\xdf\\x16\\x8e\\x9a\\xdc\\x7a\\x7e\\xf3\\xcd\\x25\\x1a\\\n\\x4d\\x79\\xd6\\x2d\\x6f\\x36\\xd1\\xb0\\x5c\\xa5\\xa3\\xb3\\x6f\\x74\\xe9\\x13\\\n\\x16\\xf5\\xd7\\x18\\xc7\\x5e\\xef\\xbe\\xe4\\x74\\xbd\\x2c\\x89\\x77\\xab\\x1e\\\n\\x58\\xeb\\xdc\\xca\\xd9\\x4e\\x07\\xd6\\x2c\\x58\\x33\\x3b\\xdb\\xa9\\xe6\\xb2\\\n\\x22\\xd6\\x2e\\x7d\\x62\\xca\\x27\\x2e\\x5e\\xf7\\xdb\\xe2\\x68\\xb7\\x0d\\xd7\\\n\\x22\\x73\\xff\\x90\\xed\\xac\\xe7\\xd2\\xe7\\x40\\xa1\\x97\\xa5\\x1a\\x1e\\x2b\\\n\\x40\\xfa\\xd5\\xdb\\x3b\\xbd\\x3a\\x55\\x8c\\x57\\x5e\\x34\\x19\\xd2\\x70\\xa5\\\n\\xb5\\x78\\xfc\\xce\\x1d\\x2f\\xcb\\x0c\\x08\\xaa\\xd2\\x63\\x42\\xef\\xb7\\x17\\\n\\xc6\\xff\\xe7\\x91\\xff\\x51\\x3e\\xef\\xaa\\x1d\\xff\\x76\\xa9\\xbf\\xe6\\xcc\\\n\\x8f\\xf3\\xcd\\x1b\\x92\\x83\\x6b\\xba\\x4e\\x9b\\x23\\x6d\\xde\\xdf\\x77\\x63\\\n\\xe1\\x96\\xe3\\x26\\x2e\\xb6\\xde\\x34\\xe2\\x58\\x2d\\x2b\\xd2\\x64\\x7c\\xef\\\n\\x84\\x4e\\xbb\\x9d\\xdd\\x8a\\xbe\\xd9\\xff\\xf4\\x5e\\xbf\\x56\\xf3\\x37\\xce\\\n\\x5e\\x99\\xb3\\xea\\xe9\\xf0\\x76\\x54\\x33\\xde\\xbb\\x37\\x46\\x5a\\xf4\\x73\\\n\\x81\\x5b\\x75\\x72\\x9e\\xca\\x79\\xc5\\xae\\x40\\xf5\\x84\\x1c\\xd1\\x75\\xbf\\\n\\xad\\x2e\\x5c\\xe9\\xf2\\x8e\\x9c\\xd2\\x1c\\xfd\\x6a\\x4a\\xbe\\xb8\\xff\\x15\\\n\\x50\\x6b\\x41\\xf9\\xaa\\x3e\\xff\\xfb\\xd7\\xff\\xdd\\xc9\\x96\\xde\\x6d\\x0e\\\n\\xaf\\xad\\xd0\\x2a\\x68\\xed\\xe7\\xfd\\x41\\xa1\\xd7\\x7c\\xe2\\x5b\\x05\\x57\\\n\\x8b\\xbc\\xec\\xd0\\x64\\xf9\\x5f\\x39\\x8a\\xbb\\x53\\x1f\\x66\\x9d\\xbc\\xf9\\\n\\xd7\\xf7\\xeb\\x16\\x7a\\x37\\xac\\x47\\xc3\\xb6\\xb2\\x3c\\xeb\\xda\\xe0\\x33\\\n\\xb9\\x4a\\x3d\\x6a\\x5f\\x3e\\xf0\\xbf\\xe7\\x79\\xce\\x78\\x0d\\x17\\x5d\\xcd\\\n\\xb5\\xf8\\xc3\\xbd\\x16\\xde\\x7d\\x8b\\x58\\xef\\xdb\\x9a\\x33\\x66\\x5b\\x07\\\n\\xd9\\xdf\\x5b\\x4b\\x49\\x9b\\x51\\x1f\\xcb\\x92\\x86\\x2d\\xbd\\x9b\\x1c\\x6b\\\n\\x3d\\xab\\xdb\\xf5\\x19\\x01\\x5e\\x9e\\xa5\\x27\\x14\\x1b\\x1c\\x74\\x78\\xd5\\\n\\xb9\\xba\\xa3\\x1f\\x6d\\x2f\\xb4\\xe5\\xc8\\xc8\\xf1\\x8d\\x3c\\x56\\xb9\\x5c\\\n\\x58\\xbb\\xf9\\xb9\\xc7\\xf3\\x5c\\xdb\\x1d\\x9d\\x3f\\x95\\x79\\x74\\x44\\x7e\\\n\\x97\\xfa\\xba\\xc7\\xff\\x72\\xd3\\xda\\x6d\\xfd\\xd9\\xf8\\xaf\\x4e\\x03\\x63\\\n\\xde\\x15\\xdb\\xe6\\xef\\x35\\x23\\xde\\xae\\x41\\x63\\xf7\\x7b\\x5e\\x79\\x63\\\n\\xef\\x47\\xfc\\xf7\\x76\\xe8\\xc2\\x27\\xbf\\xbd\\x5e\\xb1\\xc4\\xad\\x62\\xa7\\\n\\x90\\x0e\\xd2\\xe7\\xf3\\x5a\\xe5\\x4e\\x1a\\x73\\xb6\\x57\\xae\\xc2\\xd6\\xd1\\\n\\x65\\xe7\\x75\\x29\\x13\\x5e\\xe8\\xe3\\xf3\\x39\\xad\\x22\\x92\\xa2\\x16\\x3e\\\n\\x39\\xf1\\x3a\\x7a\\xc4\\x35\\xef\\x6d\\xee\\x1b\\x4a\\x86\\x7b\\x8c\\x9f\\x3b\\\n\\xb8\\x49\\x9c\\x6b\\x97\\xa0\\x9e\\xe2\\xd0\\x32\\x41\\x81\\x67\\xc7\\xaf\\xcd\\\n\\x1b\\x9e\\x14\\x95\\xf7\\xf1\\x89\\xef\\x05\\x8b\\xd6\\xfb\\x50\\xf1\\x80\\xdf\\\n\\x14\\x9f\\xf9\\xcf\\xe6\\xca\\xea\\xe4\\x18\\x33\\x3b\\x97\\xac\\x89\\x28\\x17\\\n\\xfa\\x9a\\x2e\\xf6\\xa3\\x6e\\x4d\\x5d\\x9f\\xd4\\x6a\\x61\\x82\\xd7\\x10\\xab\\\n\\x58\\xff\\x0d\\x5b\\x45\\x61\\xa7\\x73\\xfa\\x44\\x27\\x8a\\x1c\\x43\\x36\\xbe\\\n\\xef\\x51\\xba\\x5a\\x72\\xb5\\x5a\\x95\\x9c\\x3d\\xbe\\xb8\\x24\\xef\\x94\\x27\\\n\\xb4\\x71\\xd9\\x73\\xa1\\xd6\\xe1\\xfc\\x8b\\x5f\\xda\\x1c\\x6b\\x6f\\x53\\xa7\\\n\\x99\\x43\\x8f\\x61\\x73\\x07\\x46\\x4f\\x9d\\x94\\x90\\xd4\\xfd\\x7d\\xd7\\x44\\\n\\x0f\\xbf\\x0e\\x4b\\xdc\\x2a\\x75\\x6a\\x67\\x5f\\xcf\\x5f\\x5e\\xdf\\x75\\x95\\\n\\xcb\\x9d\\x02\\x57\\x25\\xf2\\x3f\\x1f\\xb5\\xfd\\x75\\x47\\x40\\xac\\xad\\x2c\\\n\\x24\\x6e\\x4b\\x99\\xa0\\x72\\x35\\x6c\\x1e\\x9c\\x96\\x97\\x3a\\xb5\\x04\\x7d\\\n\\xf9\\xed\\x8f\\xae\\xb7\\xeb\\xbe\\x96\\x8c\\xf4\\x8c\\x6e\\xe6\\xf2\\x34\\xcc\\\n\\xba\\xd1\\x52\\xaa\\xa3\\x26\\x55\\x25\\xbd\\x5e\\xd5\\x3c\\xdb\\x20\\x67\\xa1\\\n\\xfc\\x67\\x83\\xb3\\xc5\\x6d\\x17\\x3b\\xec\\xaa\\xff\\xae\\x9d\\xc3\\xae\\xf3\\\n\\x43\\x27\\x3d\\xbd\\xff\\x68\\xda\\xda\\x9e\\x0f\\xdf\\x46\\x2c\\xaf\\x98\\x18\\\n\\xbf\\xc9\\x5f\\x5c\\x3b\\x6c\\x82\\xe7\\xa7\\xea\\xf3\\x23\\xa2\\x7c\\x73\\xf4\\\n\\x6e\\xfe\\xb6\\xef\\xaa\\xc8\\x49\\xbf\\x7c\\x9a\\xe1\\x5d\\xe8\\x3f\\xe9\\x86\\\n\\xcd\\x75\\xe7\\x9f\\x5a\\x1c\\x78\\x63\\xf0\\x91\\xf2\\x01\\x75\\xdb\\xb6\\xfc\\\n\\x61\\xd3\\x25\\x87\\xfb\\xc8\\x96\\x35\\x7d\\xb7\\xdd\\x4f\\x2a\\x56\\x7f\\xa1\\\n\\x9d\\xd5\\x88\\x85\\x1b\\x57\\xfb\\x06\\x6c\\x3d\\xea\\x75\\xfe\\x44\\xaf\\x40\\\n\\x3b\\xab\\x36\\xff\\xb4\\x7b\\xd1\\xef\\x7f\\x0e\\x5e\\x83\\xda\\x0d\\x58\\x7d\\\n\\xec\\xbc\\xed\\xae\\x85\\xcd\\x76\\x44\\x56\\x09\\x1c\\x96\\x1c\\xbf\\x3d\\xc6\\\n\\xab\\x6d\\xcd\\x02\\x72\\xd1\\xbe\\x41\\x91\\xd5\\x5d\\xaa\\x53\\x63\\xdb\\x2f\\\n\\x87\\x4b\\xd5\\xb9\\xb7\\xa5\\xe7\\xc8\\x0d\\xf5\\x03\\x7d\\xaf\\x4d\\x16\\xbd\\\n\\x7c\\x6b\\xdf\\xa3\\xe7\\x07\\x12\\x5e\\x3a\\xae\\x5c\\x4c\\x8d\\x9d\\xeb\\x8e\\\n\\x5f\\xa1\\x86\\x46\\xcf\\x73\\x5b\\x07\\x07\\x76\\x79\\x1c\\x25\\x5b\\xf9\\xa5\\\n\\x7d\\xf8\\xe2\\x17\\x6f\\xed\\x8f\\x95\\xf8\\xda\\xe9\\xe4\\x8d\\x12\\x03\\x0f\\\n\\xee\\xbe\\xf1\\x62\\xc9\\xc6\\xa9\\xb2\\xbc\\xd2\\x2e\\x2f\\x16\\xf5\\x77\\x7d\\\n\\x6e\\xe7\\x37\\xde\\x33\\x62\\x66\\x40\\xd4\\xef\\xe7\\x1a\\x6e\\x5e\\xfe\\xfd\\\n\\xb7\\x6e\\x87\\x1d\\x3c\\xff\\x75\\x1c\\x19\\x30\\xbb\\x5e\\xd3\\x8f\\x2f\\x5e\\\n\\xd6\\x8b\\xaf\\x7a\\xa3\\xe4\\xc4\\x4b\\xef\\xff\\x79\\xb0\\xb2\\x06\\x79\\xb4\\\n\\xa7\\xf1\\xc8\\x11\\x4b\\x4a\\xd6\\x29\\xb5\\x67\\xf8\\xb4\\x7e\\x5e\\xc9\\xe7\\\n\\x5f\\x54\\x3c\\xfc\\x6a\\x60\\x8d\\x3e\\x64\\xd2\\x8d\\x12\\x47\\x07\\x7b\\xd5\\\n\\x4d\\x7e\\x38\\xed\\xf6\\xb6\\x51\\xc3\\x67\\xf8\\x4e\\x18\\x32\\x74\\xc0\\x82\\\n\\x18\\x3b\\xe9\\xa6\\xe3\\x36\\x2b\\x47\\x9f\\xf2\\x38\\x56\\xee\\x85\\x43\\xc3\\\n\\xf3\\x2d\\x5a\\x4c\\xaf\\xfd\\x7a\\xd0\\xc1\\x9d\\x17\\x7d\\x06\\xb4\\x18\\x2d\\\n\\x9f\\x78\\x33\\xfb\\xf1\\x51\\x85\\x92\\xe3\\x2b\\xad\\x5f\\x76\\x75\\x43\\x9b\\\n\\x26\\x87\\x7e\\x6b\\xe8\\x56\\xb3\\x47\\xb1\\x7a\\x73\\xe7\\xe6\\x3a\\x31\\xd8\\\n\\x6e\\xd4\\xdb\\x69\\x93\\xe3\\xa6\\x74\\xba\\xfe\\xc7\\xf8\\x81\\x71\\x7f\\xec\\\n\\x8d\\x19\\xba\\x76\\xef\\x86\\x22\\xb3\\xfb\\xfc\\x29\\xfa\\xe4\\x71\\xbe\\xd4\\\n\\xd7\\xcb\\xa7\\x7a\\x8c\\x7f\\x77\\xc0\\xaf\\xe5\\xc5\\x05\\x0e\\xed\\xb6\\x2e\\\n\\xea\\x78\\x70\\xc3\\x82\\x49\\x03\\x3c\\xc2\\x2b\\xad\\x0f\\x1a\\x32\\x7a\\x49\\\n\\xf0\\xe0\\xcd\\xef\\xce\\x2e\\xb8\\x10\\x16\\xd8\\xf5\\x7d\\x83\\x23\\x9d\\x47\\\n\\xe5\\xf2\\x18\\x34\\xad\\x43\\xb7\\x8e\\x6d\\x8b\\x0f\\x9c\\xde\\x21\\xd8\\x73\\\n\\xc5\\x8e\\x92\\xe7\\xbe\\x0e\\x8e\\xad\\xf0\\x30\\xea\\x5e\\x60\\xa5\\x1c\\xc1\\\n\\xc3\\x8a\\x26\\x7c\\x08\\x1c\\x5d\\xf7\\x48\\xc7\\xe5\\xf2\\x7a\\x23\\xe3\\xea\\\n\\x9e\\x69\\x76\\x31\\xba\\xd0\\xaa\\x76\\x93\\xf7\\x87\\xcf\\xbd\\xe5\\x74\\xff\\\n\\x86\\x75\\xd7\\x61\\x89\\xa5\\x0e\\x7b\\xc9\\x93\\x1b\\x78\\x35\\xbf\\xb8\\x66\\\n\\xab\\x2c\\x6f\\x8b\\x62\\x5b\\xa6\\xdd\\x89\\x3c\\xb4\\xe7\\xdf\\x84\\xc5\\xd5\\\n\\xee\\xef\\x1f\\xda\\x6b\\x79\\x11\\xdf\\x1c\\x6b\\x5b\\xb5\\xf0\\x59\\x30\\x69\\\n\\xd9\\x1b\\xa7\\xc0\\xae\\xa3\\x73\\x8c\\xeb\\x3e\\xfd\\x48\\xa9\\x62\\xde\\xd9\\\n\\xef\\x0f\\xdd\\x15\\x58\\xea\\xd4\\x97\\x39\\x49\\x41\\x45\\xe3\\x5a\\xb8\\x04\\\n\\x6f\\xf9\\x71\\x4f\\x5c\\x6f\\x9d\\xcd\\x0c\\xd1\\xbd\\xb9\\x13\\x83\\xad\\x67\\\n\\xb8\\xd7\\x5e\\xea\\xbd\\x7e\\xd9\\x8a\\x3f\\x5a\\xf7\\xfb\\xad\\xc4\\xc6\\x7b\\\n\\xe1\\x7e\\x17\\x26\\xd8\\x8e\\x2a\\xf9\\x6e\\xfb\\xfb\\xb1\\xc7\\x87\\x15\\xea\\\n\\x76\\xa5\\xea\\x38\\xeb\\x0e\\xee\\xc7\\xdb\\xf8\\xb7\\x7f\\xf5\\x7e\\x67\\x93\\\n\\xaf\\x0e\\x5d\\xfb\\x0c\\x59\\xdb\\xae\\x50\\x68\\x9f\\xc1\\xe1\\xdd\\x63\\x1a\\\n\\x1f\\xba\\x5b\\x67\\xb7\\x0d\\x66\\xaf\\xfb\\xba\\x4a\\x7e\\x79\\xf3\\xec\\xfd\\\n\\xb2\\xfa\\x3b\\xd7\\x14\\x3e\\xd0\\xb1\\x68\\xff\\xf8\\xb3\\xb1\\x6e\\x73\\xfc\\\n\\xa2\\xea\\xbc\\xab\\xd9\\xb0\\xc3\\xc4\\xa7\\xdf\\x8a\\x6d\\x59\\xf4\\x5f\\x8f\\\n\\xa5\\xeb\\x26\\x39\\xf4\\xba\\x50\\x30\\xbe\\x54\\xb1\\x42\\xd9\\x0b\\x85\\x1e\\\n\\x59\\x3d\\xa9\\x4a\\xf2\\xde\\x87\\x77\\x66\\xe4\\xe9\\xea\\xf1\\xe2\\x5e\\xa5\\\n\\x3e\\xcd\\x5b\\x4c\\xab\\x71\\x3d\\xb2\\x55\\xae\\xbd\\x9d\\xa3\\x23\\xeb\\x9e\\\n\\xbd\\xb7\\xa6\\xad\\xe7\\xb0\\x6e\\x85\\x46\\xd9\\xde\\xdf\\xbf\\xa0\\xd7\\xca\\\n\\xed\\x63\\x8b\\x4e\\x76\\x3f\\x9e\\xfd\\x64\\xcf\\xc8\\xa4\\x36\\x36\\x0b\\x72\\\n\\xcd\\x6c\\xe0\\x74\\xfe\\xaf\\xe3\\xd6\\x3e\\xb3\\xbb\\x4e\\x0f\\x99\\xe7\\x13\\\n\\x52\\xb1\\xd1\\xfc\\x2f\\xf3\\x7f\\xef\\x78\\x65\\x60\\x71\\xaf\\xe3\\x0b\\xa7\\\n\\x1f\\xd9\\x53\\x74\\xcf\\x94\\x4a\\x13\\x49\\xe5\\xda\\x73\\x1a\\xff\\x1e\\xb5\\\n\\x3f\\x7c\\x66\\x81\\x92\\x64\\x65\\xeb\\xd7\\x6f\\x5e\\xc5\\xee\\x13\\xb5\\x9e\\\n\\xf7\\x24\\xe7\\xcd\\xa8\\x9d\\xf1\\xd3\\x42\\xc7\\x3c\\x70\\x6c\\x55\\xf1\\xe6\\\n\\xe0\\xe0\\x7d\\x7e\\x11\\x56\\xc9\\xd9\\xbc\\xd7\\x56\\x98\\x3b\\xbc\\x0b\\x39\\\n\\x7b\\x33\\x72\\xe7\\xfc\\xb8\\xa0\\xe8\\x72\\x8b\\x8e\\x88\\x8a\\xbd\\xbd\\xde\\\n\\x47\\x52\\x47\\xea\\x1f\\x3c\\xf0\\x8e\\xdf\\x95\\x3d\\xab\\xce\\xd9\\x9d\\xff\\\n\\x2b\\xb8\\x7c\\x48\\xe5\\xd0\\x19\\xb3\\x86\\x24\\x86\\x6c\\xc9\\x5b\\xa6\\x5c\\\n\\x41\\xf2\\xa5\\x7e\\xc0\\x98\\x12\\x13\\x03\\x4e\\xee\\x0a\\x3a\\x12\\x6a\\xfd\\\n\\xb8\\x94\\xf4\\xfd\\x71\\xdf\\xa8\\xb1\\x63\\xa4\\xf2\\x0f\\x6b\\x65\\x53\\xa6\\\n\\x2e\\xfb\\x71\\x67\\xf3\\xaa\\x11\\xb7\\x6a\\x4c\\xdf\\x5b\\x72\\x50\\x91\\xe4\\\n\\x38\\x51\\xbf\\xb2\\x0b\\x5b\\xf6\\x1c\\xd9\\xb0\\xce\\x22\\xe7\\x96\\xae\\x7e\\\n\\xd7\\x97\\xc6\\x78\\xff\\xda\\xed\\xea\\x9c\\xa5\\x61\\x97\\x0b\\x48\\x8b\\xd6\\\n\\x29\\x58\\xef\\xab\\xe7\\xa1\\xeb\\x93\\x63\\xbc\\x17\\x9e\\xcb\\xf7\\x69\\x6f\\\n\\x50\\x1b\\xdb\\xcb\\x03\\x4b\\xcc\\x9d\\x78\\xb9\\xfc\\xab\\xa9\\xc7\\x67\\x5f\\\n\\xd9\\x72\\xad\\xf7\\xf4\\x1b\\xb6\\x8b\\x37\\x65\\x93\\x54\\xbb\\x35\\x65\\x55\\\n\\xdb\\xa8\\x01\\x31\\x7d\\xb2\\x27\\x97\\x90\\xd5\\xdd\\x1d\\xd3\\x79\\x73\\xbe\\\n\\x17\\x9e\\x6b\\x1e\\x6e\\x1d\\xda\\xdc\\x3b\\x78\\x6d\\xed\\xd5\\x97\\xb6\\x37\\\n\\x5f\\xd1\\xc5\\x66\\xf8\\xc2\\x11\\xa3\\xcb\\x3c\\x26\\xd2\\x1a\\xc1\\xbe\\xe1\\\n\\x8f\\xf2\\x48\\x56\\x8a\\xab\\xb6\\x92\\x37\\x79\\x90\\x38\\xce\\xaa\\x20\\xf1\\\n\\xa8\\xb3\\xe8\\x4a\\x4b\\x5f\\xab\\x3b\\xad\\xbf\\x5d\\x5d\\x9a\\x50\\xb4\\xd8\\\n\\xce\\x84\\xda\\xd2\\x22\\xc5\\xec\\x3d\\x2e\\x96\\xeb\\x42\\xc2\\xa2\\x72\\x77\\\n\\x73\\x6e\\x14\\x75\\xef\\xdd\\xb1\\xc3\\x5d\\x7c\\xbd\\x6c\\xfa\\xf5\\xaf\\x59\\\n\\x54\\x5e\\xec\\x92\\xd4\\xbe\\x53\\xf6\\x1b\\x8e\\x95\\xc8\\xbd\\x31\\xd9\\x7f\\\n\\xcb\\xb1\\xbe\\x6c\\xf4\\xdd\\x49\\x6f\\x1f\\xfe\\xfb\\xe8\\x5d\\xdd\\x56\\xf2\\\n\\x19\\x73\\x86\\xf8\\x0c\\xf9\\xea\\xde\\x85\\x4c\\x88\\x29\\x30\\x2a\\xdb\\xe9\\\n\\xdf\\xa5\\xd3\\x77\\x77\\x18\\xd0\\xa8\\xb3\\xd7\\x54\\x97\\xae\\x8f\\x4f\\xbb\\\n\\x15\\x8d\\xae\\x55\\xbc\\x43\\xe3\\xf0\\x4b\\xf7\\x3e\\x3f\\x7b\\x70\\xbb\\x62\\\n\\x58\\xfb\\xdb\\xb9\\x44\\x25\\x0f\\x4b\\x07\\x27\\x0e\\x5d\\x7b\\xa6\\x46\\xcb\\\n\\x45\\x87\\x2a\\xee\\x8f\\x1d\\x68\\xff\\x72\\x88\\x64\\x4d\\xad\\x01\\xe5\\x6a\\\n\\xf7\\x70\\xf8\\xdb\\x75\\xcd\\x95\\x46\\xff\\xd6\\xa8\\xbb\\x7b\\xc8\\xd4\\xa0\\\n\\xd1\\xa3\\x23\\x5f\\x3c\\x0b\\x39\\xe7\\xbb\\x39\\xde\\xe3\\xd6\\x2d\\xc9\\xa8\\\n\\x84\\xf2\\x41\\xd9\\xeb\\xb7\\x3b\\x14\\x33\\xb6\\xfb\\xb5\\x5b\\x8f\\x5c\\xee\\\n\\x4e\\x9b\\x23\\xeb\\x3c\\x3a\\x7a\\xc3\\x98\\xe3\\x6e\\x07\\x0e\\xd8\\x4c\\x7b\\\n\\x7a\\xbb\\x7e\\x42\\xbb\\x86\\x91\\x81\\x83\\x25\\xfe\\xb2\\xfb\\xdf\\xba\\x6e\\\n\\xf9\\x2d\\x6c\\x7c\\xdb\\x2a\\x41\\xef\\xbe\\xec\\x9f\\x34\\x25\\xf0\\xef\\x88\\\n\\x70\\x5f\\x89\\x7f\\x50\\x5c\\x57\\xb7\\x72\\x9f\\x43\\x0f\\x7b\\xbf\\xb9\\xec\\\n\\xba\\xfa\\xd1\\xbc\\xa9\\x51\\x2e\\xd6\\x77\\xd6\\x44\\xec\\x4d\\x92\\x9c\\x7a\\\n\\xed\\x79\\x36\\xc1\\xf1\\xf5\\xc9\\x92\\x1f\\xf3\\x7e\\xd8\\x5d\\xe9\\x54\\x91\\\n\\xf7\\x1f\\x5a\\x36\\xf8\\x30\\xfd\\xfa\\x30\\xe9\\x9e\\xeb\\xa4\\xd7\\xa1\\xf2\\\n\\x4b\\x96\\x6f\\xed\\x90\\x6d\\x46\\x4e\\x59\\xd8\\xb3\\xb8\\xa3\\x8d\\x7e\\x94\\\n\\x88\\x38\\xe7\\xb8\\xa1\\xd1\\x99\\x17\\xdb\\xa2\\x07\\xce\\x1f\\xf1\\x22\\xf4\\\n\\xf2\\xb4\\x80\\x71\\xf3\\x87\\x8f\\xb5\\xf1\\x9d\\xe7\\x51\\xd9\\x31\\x68\\xc9\\\n\\xd6\\x8a\\xe1\\x07\\x3f\\x90\\x35\\xd7\\x4f\\x44\\x7d\\xfc\\x36\\xf5\\x4e\\xab\\\n\\xe2\\x85\\xec\\x92\\xaf\\x94\\xba\\xd5\\xa6\\xa2\\x4b\\xc1\\x0a\\x0d\\x1e\\x4c\\\n\\xf6\\xfb\\xb4\\xed\\x4b\\xf1\\x33\\xb7\\xb2\\x15\\xf8\\x9e\\x50\\x75\\x79\\xe2\\\n\\x7d\\x97\\x75\\x47\\x44\\xbe\\xed\\xe5\\xe4\\x7e\\xbf\\x7d\\x95\\x62\\x0a\\x34\\\n\\x2c\\x99\\xd8\\xe0\\xde\\xdc\\x9e\\x9b\\x97\\x2d\\xfa\\x38\\x2c\\xb9\\x74\\xbe\\\n\\x27\\xaf\\xac\\x9c\\x1a\\x0c\\x2a\\x62\\xed\\x1a\\xe8\\x30\\xdf\\xbd\\xfc\\xe5\\\n\\xc7\\xbe\\x09\\x11\\x8e\\xf5\\xcb\\x79\\xf9\\x4d\\x28\\x3b\\xae\\x91\\xcb\\x9e\\\n\\x89\\xd6\\xfd\\x86\\x4e\\x8b\\x98\\xbb\\x6a\\xab\\x74\\x5f\\xbd\\x07\\xfd\\x5a\\\n\\xf4\\x76\\xd9\\x73\\xb0\\x9d\\x77\\xb9\\x13\\xad\\xa6\\xbf\\x7f\\x3f\\xc5\\xa7\\\n\\xf6\\xd2\\xce\\xb5\\xcf\\x95\\xbd\\x5e\\x34\\x41\\x7a\\x6a\\x48\\xa1\\x51\\x0b\\\n\\xe3\\x36\\x97\\x3e\\xdc\\xb0\\x76\\x54\\xb9\\xeb\\xde\\x71\\xbf\\xae\\x3f\\x5d\\\n\\xa5\\x5c\\x80\\x97\\xa3\\xe7\\xc4\\xb3\\xaf\\x56\\xfb\\x3b\\x77\\x3a\\xb6\\xad\\\n\\xb3\\xad\\x24\\xec\\xd5\\xd1\\xaf\\x4e\\x83\\xb2\\x85\\xce\\x3b\\x71\\xe7\\xfb\\\n\\xa7\\x7f\\xf2\\x9e\\xb5\\x73\\xdb\\xbc\\xa0\\xf9\\xb0\\xe4\\x3c\\xfb\\x9f\\x9f\\\n\\xae\\x58\\x3c\\xe7\\xdf\\x1d\\x93\\x88\\x4b\\xde\\xe9\\x67\\x6a\\xde\\x9a\\xe3\\\n\\x56\\x7d\\xa6\\x87\\xc3\\xc5\\x63\\xab\\x5d\\x3e\\xb5\\xf6\\x18\\x69\\xed\\xbd\\\n\\x35\\xae\\xef\\x02\\xc7\\x73\\xb7\\x4a\\x3a\\xcc\\x68\\xdf\\x67\\x6f\\xf9\\xcf\\\n\\xee\\xad\\x6b\\xed\\x20\\xd2\\xb5\\x9d\\xe2\\x4f\\x0c\\xef\\x38\\xfb\\x58\\x41\\\n\\xef\\x87\\xed\\x2e\\x3b\\xbb\\x1d\\xbe\\xbe\\xd9\\x5a\\x5c\\xfa\\xcb\\x7f\\xd7\\\n\\x26\\xdb\\xec\\x6b\\x7b\\xb3\\x43\\x29\\xeb\\xb0\\x23\\xc4\\xfd\\xfd\\x5f\\x6f\\\n\\x88\\x5b\\xf3\\xb0\\x43\\x44\\x76\\xf0\\xac\\xaf\\x6b\\xd8\\x98\\x90\\xe3\\x5b\\\n\\x5d\\x4a\\xdc\\xa6\\x02\\x8e\\x3f\\xff\\xcc\\x27\\xac\\xc2\\x99\\xcb\\xd9\\xfb\\\n\\x6e\\x7b\\xe8\\x57\\x66\\x07\\xf5\\x51\\x1d\\x29\\x7e\\xbb\\xca\\x59\\x3b\\x97\\\n\\xa6\\x21\\x52\\xeb\\x0a\\x61\\xfb\\x9a\\x96\\x09\\xa4\\x9e\\xd9\\xe7\\xf0\\x1d\\\n\\xf4\\xa1\\xf4\\xc3\\x7c\\x7d\\xd6\\x77\\x9d\\x51\\xd1\\xff\\xb7\\x96\\x45\\xbb\\\n\\x12\\xd1\\x18\\x49\\x91\\x81\\x76\\x0d\\x0b\\xd4\\xca\\x16\\x3d\\xaf\\x69\\x25\\\n\\xe2\\x56\\x7c\\x61\\xfe\\x26\\x97\\x3e\\xf8\\xcc\\x94\\x6d\\xfd\\xb8\\xae\\xcd\\\n\\xaa\\x03\\x3b\\x5c\\xae\\xd7\\x4b\\xf8\\x58\\xd9\\x76\\xc6\\xde\\x17\\xb2\\x46\\\n\\xd9\\x6e\\x24\\x05\\x0f\\xca\\x3f\\xe2\\x64\\xc9\\xf0\\x3d\\x62\\xd7\\x7d\\xd5\\\n\\x0f\\xaf\\x93\\xad\\xb0\\xae\\x7a\\xb3\\xf0\\x1a\\xf7\\x51\\x3e\\xa2\\x7d\\x8e\\\n\\x7f\\x3c\\x6f\\x2f\\x2e\\x56\\x71\\x5c\\x9d\\xc7\\x03\\xf3\\xfc\\x35\\x2f\\xec\\\n\\x6a\\x49\\x9f\\x22\\x63\\x9a\\x26\\xe6\\x6d\\x16\\x77\\x55\\x7c\\xbb\\x74\\x54\\\n\\xe9\\xeb\\x23\\x1f\\x0d\\x12\\x77\\x0f\\x98\\x5c\\xa7\\x5f\\xd0\\xc1\\x9c\\x8b\\\n\\x5a\\x05\\xb6\\xdc\\x9c\\xdf\\x51\\x3a\\xec\\xb8\\xd5\\xcd\\x0f\\x51\\xae\\xd9\\\n\\x7c\\xba\\x38\\x2f\\x1c\\x72\\xfd\\x4a\\x47\\x87\\x11\\x0b\\x62\\x64\\x35\\x63\\\n\\x1d\\xee\\x47\\xfa\\xf6\\xba\\x10\\x91\\xd4\\x28\\x79\\x8c\\x38\\xaa\\xe2\\xd7\\\n\\x22\\xd9\\x5c\\xd6\\x55\\x9b\\x95\\x67\\x4b\\xc1\\x0b\\xb3\\xbf\\x85\\x96\\x6a\\\n\\xe8\\xd5\\x4c\\x5a\\x3c\\xf9\\x45\\xd4\\xe0\\xff\\x55\\xaf\\xdb\\x6c\\xf3\\xa1\\\n\\xbe\\x9b\\xbc\\x87\\x16\\xaf\\x9b\\xeb\\xaa\\x4d\\x5c\\x7f\\xaf\\x2f\\x71\\x7b\\\n\\x12\\x92\\x62\\xa3\\x1a\\x38\\xc4\\x46\\xb5\\x8f\\xaf\\x18\\x7f\\xe4\\xc3\\x3f\\\n\\x25\\x44\\x65\\x6a\\x76\\xa8\\xbf\\x77\\xdd\\x99\\x49\\xa1\\x8d\\x03\\xbe\\x9c\\\n\\x8d\\x0e\\x3d\\xfc\\xcf\\xb9\\x16\\x92\\xec\\x75\\x0e\\x7d\\x59\\x29\\xf6\\xb5\\\n\\x5e\\xb4\\x33\\xd7\\xf8\\xce\\xdb\\x44\\x21\\x37\\x3e\\x1f\\xb9\\x28\\xfb\\x4d\\\n\\x12\\x73\\xa3\\x59\\x80\\xf7\\x98\\xc8\\xbc\\x27\\x8f\\xfa\\xef\\x0b\\x9c\\xbe\\\n\\xe4\\xd3\\x98\\xf7\\x0e\\x8d\\x47\\xe7\\xbf\\x56\\xc3\\xeb\\xe5\\x9d\\xd7\\x9e\\\n\\x61\\x27\\x0a\\xcd\\xdb\\xec\\xef\\xb1\\xf1\\xe3\\xe5\\xb1\\xbd\\x42\\xba\\xf9\\\n\\x7d\\x0b\\xf0\\x6d\\xd4\\xdd\\xe9\\x68\\x17\\x97\\xab\\xab\\x5e\\x0f\\xa6\\x3e\\\n\\x81\\x79\\x03\\x1d\\xe5\\x97\\x0f\\x5f\\xb9\\x5e\\x76\\x77\\xe3\\x12\\x9d\\x23\\\n\\x9e\\xac\\xda\\xe5\\x3e\\xb1\\x78\\xbb\\x4a\\x9d\\x76\\x3c\\x14\\x7b\\xec\\x8c\\\n\\xce\\x3d\\xb9\\x55\\x44\\xc3\\xad\\x4d\\x92\\x37\\x1d\\x1f\\xb4\\xd9\\x4a\\x3a\\\n\\xe9\\xd9\\xb4\\x82\\x3b\\x1e\\xfc\\xfe\\x57\\x0d\\xf9\\xe0\\x52\\xfb\\x0f\\xce\\\n\\x4d\\xf0\\xb6\\x8d\\x6d\\x73\\xaa\\xeb\\xd6\\x21\\x13\\x3e\\x1f\\xa9\\xf5\\x47\\\n\\x50\\xb6\\xca\\x2d\\xaf\\x97\\x7d\\x53\\xff\\xc0\\x34\\xab\\x5e\\x79\\x3c\\x87\\\n\\xbd\\x90\\xe7\\x88\\xfd\\x9e\\xcd\\xe5\\xae\\xf7\\xa2\\x1f\\x35\\x2e\\xce\\x0b\\\n\\xfe\\x90\\x53\\x52\\x79\\xf4\\x47\\x8f\\xcb\\x09\\xc7\\x44\\x63\\x5a\\x94\\xbb\\\n\\xee\\xfe\\x68\\xd0\\x9e\\x4b\\x5b\\xbb\\xfa\\xb4\\x9e\\xbe\\xfc\\x66\\xa4\\xa3\\\n\\xa4\\x4b\\xfd\\x4e\\xd5\\xc4\\x43\\xb3\\x55\\xb9\\x35\\xa9\\x90\\x4b\\xd0\\xda\\\n\\xcd\\x8f\\x76\\x7e\\x3a\\x7a\\x7c\\xed\\x99\\x92\\xbb\\xb3\\x7f\\xaa\\x9f\\x3c\\\n\\x63\\x66\\x41\\x49\\x71\\xe9\\xa0\\x09\\xbb\\x57\\x86\\x89\\x3b\\xdf\\xc9\\x1d\\\n\\xd1\\x50\\x76\\x7f\\xaf\\xbd\\x5f\\xd5\\x56\\xae\\x55\\x0b\\xc8\\xe4\\x4e\\x56\\\n\\xbe\\xed\\xef\\x45\\x56\\xff\\xe1\\xf9\\x6e\\x9a\\xa8\\x8f\\xe7\\xd6\\x0f\\x0b\\\n\\x92\\x4b\\x78\\xdd\\x9d\\x5e\\x4c\\x66\\xb7\\xe6\\xb5\\x77\\x91\\x75\\x3f\\x4a\\\n\\x57\\x1e\\x9f\\x23\\xb6\\x97\\xb4\\x64\\xb7\\x75\\xeb\\xdf\\x9d\\x7f\\x6b\\xe5\\\n\\x25\\xb9\\xbf\\x77\\x54\\x80\\x97\\x6d\\x9f\\x7c\\xf3\\xc4\\x9d\\x93\\x22\\xa2\\\n\\x5e\\xf8\\xf7\\xbd\\xfc\\xf8\\xb7\\x5f\\x3a\\xd5\\xb6\\x71\\x1b\\x7c\\xb6\\xe6\\\n\\xe7\\xc9\\xb5\\x24\\xdf\\x4e\\xbd\\x91\\x4d\\x5f\\xb9\\xf3\\x44\\x9e\\x7c\\x15\\\n\\x9f\\x94\\x7b\\xec\\x25\\xbf\\xf6\\x31\\xe1\\xb9\\x38\\x76\\xc7\\x9e\\xd0\\x96\\\n\\xbf\\x4e\\x0d\\x96\\xd6\\x7e\\xd3\\x3d\\x67\\x1c\\xc9\\xd5\\xf8\\x74\\xeb\\xa5\\\n\\x43\\xdd\\xa8\\x07\\x53\\x87\\x3e\\x9f\\xe7\\xbe\\xb5\\xf9\\x1a\\x32\\xd9\\x25\\\n\\xf1\\xea\\xf2\\xff\\x7d\\x68\\xea\\x66\\x37\\x25\\x58\\x5a\\x7a\\xe7\\x30\\xbf\\\n\\x48\\xab\\xdb\\xa7\\xdc\\x64\\x33\\x43\\x8a\\xf9\\xdd\\x9e\\xe7\\x5e\\x66\\x5b\\\n\\x8e\\xb8\\x43\\x11\\xb3\\x0a\\xfe\\x52\\xec\\xe3\\xde\\x72\\xbd\\x77\\x26\\x8e\\\n\\x75\\x3b\\x7b\\xee\\x44\\xe8\\x8b\\x1a\\x5f\\x57\\xf4\\x8b\\x23\\xc9\\x5b\\xce\\\n\\xb6\\x7e\\xfa\\x60\\x49\\xc0\\x6c\\x6f\\xbb\\x35\\x79\\xa7\\xd9\\xcb\\x07\\x14\\\n\\x3c\\x22\\x8b\\xd9\\x21\\x7e\\x74\\xae\\xf1\\x22\\x51\\x04\\x09\\x9f\\x98\\xec\\\n\\xeb\\xd2\\x29\\xd4\\xa5\\xfc\\x83\\x65\\x1e\\xdb\\x46\\x1d\\xab\\x99\\xef\\xee\\\n\\xf5\\xe2\\x5f\\x3e\\x6c\\xa8\\x29\\x76\\x94\\x04\\xb8\\x97\\x0b\\x2c\\x3e\\xae\\\n\\x47\\xad\\xe9\\x9e\\x31\\x8d\\xe7\\xb9\\x6f\\xa8\\x78\\x31\\x64\\x46\\xfe\\x25\\\n\\x7b\\x0f\\x4e\\xda\\x10\\x10\\x30\\x78\\x70\\xde\\x58\\x2b\\xe7\\x47\\x61\\x67\\\n\\x5e\\xec\\xca\\xd9\\xb2\\x4c\\x68\\xb6\\xc4\\xb7\\x3f\\x5a\\xd4\\x8c\\x98\\x74\\\n\\xa9\\xe0\\x08\\xd1\\x14\\x49\\xd1\\x9b\\xdd\\x12\\x6e\\xbe\\x2e\\x7f\\xdd\\x79\\\n\\xfa\\xee\\x83\\x7b\\x2f\\xbf\\x12\\xf7\\xff\\xdc\\xf0\\xc6\\x8b\\x42\\x23\\xb6\\\n\\x4f\\x19\\x7d\\xf9\\xd1\\xc1\\x51\\x52\\xd2\\xf0\\x9f\\x61\\xa5\\x9a\\x9d\\x74\\\n\\xf9\\xf5\\xfc\\xf8\\x46\\xb2\\xdc\\x87\\xef\\x47\\xcf\\x17\\xf7\\x1d\\xed\\xe4\\\n\\xf7\\x71\\x4d\\x52\\xbe\\x51\\x35\\x6d\\xe4\\xb9\\x64\\x45\\x82\\x1f\\x97\\x5f\\\n\\x72\\x4a\\x6e\\x1b\\xbc\\xfe\\x2f\\xf9\\xad\\x65\\xb7\\x7b\\x43\\xac\\xdc\\xa6\\\n\\x65\\x7b\\xb7\\xbd\\xcd\\xfb\\xcf\\xac\\x00\\xb1\\x32\\x2d\\x67\\x4e\\x11\\xf5\\\n\\xa6\\x20\\x87\\x15\\xd1\\x02\\x35\\x28\\x5a\\x43\\xd1\\x23\\x8a\\x12\\x29\\x4a\\\n\\x62\\xee\\xd7\\x52\\x54\\x5b\\x9b\\x08\\x2c\\xc8\\x94\\x80\\xf8\\x7f\\x1d\\x45\\\n\\xc9\\x14\\xc9\\xd5\\x10\\xfe\\xb6\\x9e\\xa2\\x5c\\x26\\xe2\\xd1\\x02\\xc3\\x00\\\n\\x3a\\x29\\x31\\x51\\x5f\\xef\\xaa\\x74\\x9e\\xd0\\xed\\xc5\\x82\\xac\\x81\\x55\\\n\\x44\\xfb\\xba\\x67\\x69\\xbd\\x49\\x38\\xb5\\x40\\x68\\x54\\x25\\x9a\\xfb\\x7c\\\n\\x4d\\x63\\x41\\x4d\\x13\\xf0\\x6b\\x81\\xb0\\x80\\x05\\x02\\x5f\\xfd\\x5e\\xa4\\\n\\x68\\x20\\x45\\x03\\x08\\xdd\\xdf\\xf3\\x85\\x09\\x36\\x01\\xbf\\x16\\x08\\x8b\\\n\\xdb\\x24\\x6d\\xbd\\x5e\\xa1\\x28\\x3b\\x27\\x0c\\xee\\x2f\\xf0\\x84\\xbb\\x6f\\\n\\x54\\x4e\\x2d\\x30\\x04\\xbe\\x91\\xb4\\xf5\\x3a\\x82\\x27\\xdc\\x60\\x9e\\x70\\\n\\x89\\x46\\xe2\\xd1\\x02\\xc3\\xe1\\x2b\\x49\\x5b\\xaf\\xa3\\x78\\xc2\\x0d\\xe1\\\n\\x09\\x97\\x60\\x24\\x1e\\x2d\\x30\\x1c\\x6e\\x90\\xb4\\xf5\\x7a\\x9d\\x28\\xaf\\\n\\xef\\xb0\\x3e\\xbc\\xc2\\x13\\xee\\xae\\x51\\x39\\xb5\\xc0\\x10\\x58\\x4c\\xf8\\\n\\xe7\\x76\\x68\\x03\\x63\\x28\\x1a\\x4d\\xd1\\x35\\x35\\x61\\x56\\x64\\x30\\x6d\\\n\\x1b\\x8a\\x2a\\x52\\xf4\\x3f\\x8a\\xba\\x51\\xd4\\x81\\xa2\\x3a\\x14\\xe5\\xcd\\\n\\x60\\xbc\\x16\\x68\\x0f\\x94\\x3f\\x64\\xbc\\xba\\xae\\xff\\xf0\\x4e\\x55\\x3d\\\n\\xd2\\x83\\x10\\x1a\\xf5\\xbd\\x8b\\x22\\xa9\\x9a\\xb8\\x31\\xaf\\x88\\xa2\\xc8\\\n\\x8b\\x22\\x07\\xfd\\xb2\\x65\\x81\\x0e\\x50\\xd7\\x07\\x68\\xa2\\x65\\x7a\\xa4\\\n\\xd3\\x98\\xa2\\x68\\x1d\\xd3\\x89\\xa3\\x68\\x02\\x45\\xbf\\xe8\\x95\\x33\\x0b\\\n\\xb4\\x01\\xd6\\x77\\xc7\\x88\\xf6\\x75\\x72\\x8a\\xa2\\x1c\\x3a\\xc4\\x8f\\x7e\\\n\\x7e\\x0e\\xd1\\x4f\\xce\\xc4\\xd2\\xbf\\x14\\x15\\xd5\\x3f\\x8b\\x16\\xa4\\x03\\\n\\xb4\\x81\\x45\\x44\\xf3\\x58\\x80\\xbf\\x2d\\x21\\xca\\xb2\\x81\\xf4\\x80\\xba\\\n\\xdf\\xaa\\x21\\x4e\\x5d\\xe8\\x31\\x45\\xa5\\xf5\\xcf\\xa2\\x05\\x5a\\x00\\xf3\\\n\\x01\\xb4\\x03\\xcc\\xff\\x3e\\x31\\x84\\xfb\\xc5\\xcc\\xdf\\x74\\x85\\x3a\\xf9\\\n\\xa2\\xbe\\xf4\\x80\\xa2\\x5f\\xf5\\xca\\x99\\x05\\xc6\\x06\\xe6\\xf4\\xea\\xea\\\n\\x11\\xb2\\x83\\xcd\\x84\\x9e\\x0b\\xb2\\xf5\\x89\\x7e\\xa5\\x16\\x45\\x7e\\x14\\\n\\xbd\\xd5\\xf0\\xee\\x7e\\xa3\\xe5\\xc0\\x02\\x7d\\x91\\x9b\\xa2\\x57\\x84\\xbf\\\n\\xfe\\x6e\\x91\\xf4\\xd7\\x0e\\x79\\x08\\x6d\\x73\\xa2\\xae\\x0d\\xfc\\x61\\x10\\\n\\xae\\x2d\\x10\\x0a\\x93\\x08\\x7f\\xbd\\x5d\\x25\\xba\\xad\\xef\\xe7\\x6a\\x88\\\n\\xc7\\x02\\xf3\\x04\\xd6\\xf8\\x18\\xa7\\x55\\xeb\\xec\\x23\\x45\\x25\\xf4\\x88\\\n\\xeb\\x30\\x4f\\x5c\\xa0\\xba\\x02\\xf1\\x6b\\x81\\xb0\\xa8\\x42\\xf8\\xeb\\x6b\\\n\\x9a\\x9e\\xf1\\x61\\xce\\x9f\\xc8\\x13\\x9f\\x7f\\x86\\x39\\xb5\\xc0\\x10\\x80\\\n\\xfe\\x90\\x6f\\xed\\xe8\\x98\\x81\\x38\\xf9\\xe4\\x13\\x67\\x32\\xc6\\xa6\\x05\\\n\\x06\\x02\\xd6\\x8f\\xaa\\x75\\x15\\x93\\xc1\\x38\\xbd\\x79\\xe2\\x7c\\x9d\\xc1\\\n\\x38\\x2d\\x30\\x0c\\x42\\x48\\xda\\xba\\x0a\\xcd\\x60\\x9c\\x9e\\x3c\\x71\\x5a\\\n\\xec\\x0f\\xcc\\x13\\x7c\\xf5\\x7f\\x20\\x83\\x71\\xf6\\xe0\\x89\\xd3\\x52\\xff\\\n\\xe6\\x89\\x85\\x24\\x6d\\x5d\\xdd\\xc8\\x60\\x9c\\xd3\\x78\\xe2\\x7c\\x95\\xc1\\\n\\x38\\x2d\\x30\\x0c\\x86\\x91\\xb4\\x75\\x05\\xdd\\x4f\\x46\\xf4\\x37\\xe1\\x3c\\\n\\x71\\x9e\\xce\\x18\\x9b\\x16\\x18\\x08\\xbf\\x11\\xfe\\xf5\\x9f\\x48\\xcf\\xf8\\\n\\xd4\\xd9\\x28\\xcc\\xce\\x28\\xa3\\x16\\x18\\x0c\\xb0\\x0d\\x53\\xad\\xaf\\x2f\\\n\\x14\\xb9\\xe8\\x18\\x8f\\x35\\x45\\x27\\x79\\xe2\\x02\\xd5\\x12\\x8a\\x59\\x0b\\\n\\x04\\xc7\\x5f\\x84\\xbf\\xce\\x30\\x0f\\x28\\xa8\\x65\\x1c\\x90\\xfd\\xf1\\xcd\\\n\\x25\\x40\\x97\\x05\\xe6\\xd7\\x02\\x61\\x01\\xfd\\xcf\\x33\\xc2\\x5f\\x77\\x90\\\n\\x0d\\xd7\\x4b\\xe7\\xfd\\xfc\\x14\\x6d\\x57\\xf3\\x3e\\xa8\\x8d\\x41\\xb8\\xb6\\\n\\x40\\x48\\xc0\\x9e\\x53\\x5d\\xfd\\x61\\x3e\\x88\\x35\\x61\\x57\\x8a\\x4a\\x12\\\n\\xda\\xde\\x18\\xfd\\x42\\x23\\x8a\\xe6\\x13\\xda\\xee\\x4b\\xdd\\xbb\\x3b\\x8c\\\n\\x99\\x09\\x0b\\x32\\x84\\x05\\x44\\x7d\\x3d\\xea\\x43\\xd8\\xaf\\x64\\xb1\\x0f\\\n\\xce\\x3c\\xc0\\x18\\xce\\x27\\x0f\\xd2\\x87\\xb0\\xdf\\xac\\xb8\\x71\\xd9\\xb7\\\n\\x40\\x00\\xa0\\x0d\\x40\\x7e\\xc3\\xa7\\xc3\\xd3\\x96\\xb0\\x06\\xd0\\x76\\xde\\\n\\x68\\x81\\x79\\x02\\xfe\\x63\\x60\\xc7\\xab\\x4b\\xbd\\xc3\\x0e\\x0c\\xfa\\x44\\\n\\x6b\\x13\\xf0\\x6b\\x81\\x61\\xd0\\x8c\\xd0\\x63\\x02\\xf4\\x77\\x7c\\x75\\x8e\\\n\\x3d\\xa9\\xb0\\x31\\xc7\\x9e\\x53\\x5d\\xec\\xcc\\x2d\\xc8\\x5c\\xc0\\xb8\\x80\\\n\\xb9\\x3f\\xf6\\x85\\xb4\\xa7\\xc8\\x8d\\xa2\\xdf\\x29\\xca\\x66\\x84\\xb4\\xd1\\\n\\x9f\\x38\\x11\\x7a\\x1d\\x8a\\x35\\x08\\xf6\\xbc\\x62\\x8c\\xc2\\xda\\x03\\x36\\\n\\xcb\\x21\\x2a\\xb4\\x82\\xf9\\xdb\\x34\\x26\\x6c\\x67\\xe6\\xdd\\x92\\xc4\\xd2\\\n\\x37\\x99\\x3b\\x8a\\x50\\xe4\\x41\\xd1\\x74\\x8a\\xf6\\x10\\x5a\\x06\\x25\\x23\\\n\\xc2\\xad\\x49\\x64\\x4c\\x9c\\xbb\\x29\\xf2\\xa1\\xa8\\x1d\\x45\\x85\\x8d\\x92\\\n\\x33\\x0b\\xf8\\x80\\xfa\\xee\\x43\\xd1\\x46\\x8a\\x1e\\x12\\x61\\xd7\\x9f\\xba\\\n\\x10\\xe4\\x5c\\xe8\\x3b\\xe0\\x9b\\xaf\\x90\\x41\\x73\\x6c\\x01\\x74\\x4e\\xf8\\\n\\xf6\\x60\\x17\\x9c\\x91\\x7d\\x66\\x86\\x22\\xf0\\x04\\x99\\xf5\\x54\\x8a\\xca\\\n\\x1b\\xa8\\x0c\\x7e\\x36\\xa0\\x8f\\x1d\\x47\\xd4\\xef\\x4f\\x37\\x67\\x42\\x3b\\\n\\xc5\\xfe\\xe6\\x8c\\xd8\\x44\\xfe\\xac\\x80\\x8c\\x78\\x1b\\x45\\xdf\\x89\\x70\\\n\\xf5\\x81\\x75\\xe6\\x3d\\x42\\xfb\\xbd\\x8a\\xa0\\xe8\\x08\\x45\\xfb\\x18\\x3a\\\n\\xc2\\x3c\\xbb\\xc4\\x84\\x79\\x2f\\x60\\xba\\xc8\\x03\\xf6\\x41\\xd5\\x17\\xb4\\\n\\x84\\xb2\\x1e\\x30\\xc7\\xee\\x48\\xd4\\xfb\\x22\\xd3\\xb6\\x8e\\x21\\x47\\x82\\\n\\x4e\\x11\\xa7\\x9a\\x35\\xa7\\xa8\\x14\\xd1\\x6d\\x3f\\x2b\\x0b\\x5b\\xe6\\x5d\\\n\\xc4\\x01\\x7b\\x17\\xd8\\xbc\\xc2\\x46\\x25\\x23\\x6d\\xe3\\x1c\\xa1\\xe7\\xa9\\\n\\x5a\\x39\\xea\\xfd\\x49\\x80\\xb2\\x80\\x1e\\xe9\\x3f\\xa2\\x7b\\x79\\xc6\\x12\\\n\\xda\\x47\\x5d\\x2f\\x62\\xdc\\x7d\\xc3\\x65\\x09\\x3d\\xff\\xc4\\xfe\\xb5\\xc7\\\n\\x7a\\xf0\\x8d\\xb1\\xe1\\x7f\\x46\\xe4\\xd7\\x5c\\x01\\x79\\xe1\\x59\\xa2\\x7d\\\n\\xb9\\x25\\x33\\xe1\\xe1\\x2f\\xa2\\xac\\x09\\xf8\\x55\\x07\\xcc\\xf7\\xb0\\x1f\\\n\\x0e\\x3e\\x4d\\x74\\x99\\x9b\\xc2\\xbe\\xad\\xba\\x09\\xf8\\x35\\x35\\xa0\\xfb\\\n\\x87\\x2f\\x6a\\x6d\\xfd\\xd2\\xc0\\xd6\\x08\\xfb\\x03\\x4a\\x9a\\x82\\x59\\x1d\\\n\\x81\\x31\\x03\\x32\\x24\\xbe\\xfd\\x71\\x7c\\x84\\x32\\x40\\x1f\\x96\\xcf\\x14\\\n\\xcc\\x9a\\x00\\xb0\\xf3\\x7e\\x43\\xb4\\x2b\\x97\\xbd\\x84\\x1e\\x7f\\x33\\xe3\\\n\\x78\\x89\\xf9\\x4c\\x4b\\x42\\xdb\\x40\\x68\\xd3\\xce\\x5f\\x52\\xd4\\xc5\\x24\\\n\\x9c\\x1a\\x07\\x68\\xdf\\x98\\xd3\\x6b\\x33\\x5f\\x86\\xbf\\x6a\\x73\\xea\\xdf\\\n\\x33\\x0a\\x8c\\x0f\\x21\\x84\\xf6\\x89\\x90\\x5e\\xfe\\x37\\x51\\x64\\x6f\\x1a\\\n\\x36\\x0d\\x06\\xec\\xe3\\x7d\\x42\\xd2\\xff\\xde\\xff\\x21\\x59\\xdb\\xff\\x0b\\\n\\xf2\\x86\\xb5\\x60\\x7a\\x73\\x04\\x9c\\xc7\\x91\\x55\\x6c\\x5f\\x47\\x92\\xf4\\\n\\xd7\\xf1\\xd8\\xe7\\xf9\\x33\\xcd\\x83\\xb4\\xd1\\x93\\x43\\xe7\\x30\\xd8\\x54\\\n\\x0c\\x0a\\x00\\xf8\\x85\\x5a\\x4e\\x34\\xe7\\xf1\\x1d\\xa1\\xfd\\x8f\\x67\\xc6\\\n\\xf1\\x3d\\xa3\\xc0\\xfc\\x00\\x32\\x0a\\x4d\\x76\\x90\\x20\\xc8\\x32\\x6c\\x4c\\\n\\xc4\\xa3\\xbe\\x80\\xad\\x67\\x18\\xd1\\x9c\\x2f\\xfc\\xdd\\xa2\\x33\\xa1\\xf7\\\n\\x4c\\x1d\\x25\\x9a\\xcb\\x0a\\x32\\x4a\\x5b\\x53\\x31\\xa8\\x23\\x30\\x77\\xc1\\\n\\xba\\x56\\x53\\xbf\\xc6\\xe7\\x7f\\xfa\\x67\\x06\\xfa\\x3f\\xe8\\x0a\\x34\\x8d\\\n\\x93\\xb0\\x97\\xc9\\x6d\\x2a\\x06\\xb5\\x04\\x7c\\x3a\\x69\\x92\\xdf\\x42\\x56\\\n\\x66\\x39\\x53\\x44\\x3d\\x30\\x4f\\x7e\\x4e\\x34\\xb7\\x01\\x73\\x3d\\x97\\x09\\\n\\x3e\\xc4\\xc1\\x9f\\x3a\\xde\\x21\\xfb\\xb6\\xe8\\xc2\\xd2\\x07\\x6c\\x1b\\xa0\\\n\\x47\\x56\\x57\\x8e\\xd0\\x6f\\xe8\\xa3\\xcf\\x30\\x24\\x30\\x97\\x81\\xbf\\x67\\\n\\x75\\x3c\\x43\\x06\\x92\\xd3\\x64\\xdc\\x65\\x3e\\xa0\\xac\\x34\\xcd\\x09\\xe0\\\n\\x6f\\xd5\\x9c\\xe6\\xcc\\x81\\x44\\x3d\\xaf\\x58\\xef\\x66\\xb6\\xf9\\xab\\x39\\\n\\x00\\xdf\\x38\\x7c\\xaa\\xa8\\x2b\\x57\\x73\\xd9\\x1b\\xad\\xc9\\x07\\xa8\\xa5\\\n\\xee\\x33\\x06\\x4d\\x6d\\x00\\x32\\x24\\x53\\xfb\\xc8\\x2c\\x47\\xd1\\x67\\xc2\\\n\\xcf\\x1f\\x6c\\x2a\\xcc\\x6d\\x9c\\xca\\x8c\\x40\\x19\\xaa\\x9b\\x57\\xc1\\x77\\\n\\xb3\\xae\\xfb\\xed\\x85\\x02\\x6c\\xb8\\x2f\\xa9\\xe1\\x0b\\x67\\x00\\x98\\xeb\\\n\\x3c\\x35\\x33\\x02\\xfb\\x21\\xf9\\xce\\xf1\\x01\\x41\\x8e\\x68\\x8a\\xb3\\x13\\\n\\x7c\\xd5\\xf0\\x03\\xdd\\x5e\\x66\\xd0\\xd3\\x66\\x36\\x40\\x77\\xa0\\xce\\xf6\\\n\\xc8\\xdb\\xc8\\xbc\\xe0\\xf8\\x71\\x3e\\xfb\\x7a\\x8c\\x49\\xad\\x8c\\xcc\\xcb\\\n\\xcf\\x04\\xd8\\x8e\\xf1\\xe9\\x8e\\x70\\xc6\\x9b\\x31\\xf5\\x66\\x27\\x78\\x78\\\n\\x00\\xfd\\x6d\\x44\\x1e\\x7e\\x56\\x2c\\x25\\xea\\xe5\\xe9\\xc6\\xc0\\xff\\xd4\\\n\\xa4\\x0f\\x1b\\x1d\\xcb\\x5e\\x3e\\xc3\\x03\\xf3\\x2a\\xe8\\x87\\xf9\\xea\\xa0\\\n\\x85\\x81\\xd3\\x86\\xcc\\xe1\\xaa\\x9a\\xb4\\x5d\\x0d\\x9c\\xb6\\x05\\x0a\\xc0\\\n\\xae\\x88\\xaf\\x0e\\x2e\\x1a\\x38\\x5d\\x75\\xfe\\x5e\\x76\\x1a\\x38\\x5d\\x0b\\\n\\xd2\\x42\\x9d\\x5c\\xa0\\xb5\\x01\\xd3\\xe4\\xb3\\xd5\\x85\\x4d\\x53\\x56\\xb6\\\n\\xd9\\x31\\x57\\xa8\\xf3\\x99\\x18\\x6e\\xa0\\xf4\\xaa\\xf2\\xa4\\x05\\x0a\\x31\\\n\\x50\\x7a\\x16\\xa4\\x0f\\x3e\\x7b\\x4a\\xac\\x0f\\x2a\\x19\\x20\\x2d\\xbe\\x73\\\n\\xbe\\x0c\\x95\\x96\\x05\\xda\\xa1\\x1a\\xe1\\xff\\x26\\x17\\x09\\x9c\\x0e\\x64\\\n\\x7d\\x7c\\xe7\\x75\\x9d\\x14\\x38\\x1d\\x0b\\x74\\x07\\x6c\\x27\\x55\\xeb\\xe5\\\n\\x05\\x11\\x56\\xef\\xd2\\x8a\\x27\\x0d\\x50\\x0f\\x01\\xd3\\xb0\\x40\\x3f\\xf4\\\n\\x27\\xfc\\x75\\xd3\\x54\\xc0\\x34\\x82\\x78\\xe2\\x8f\\x27\\x16\\x19\\xbf\\x39\\\n\\x00\\xba\\x01\\xc8\\xff\\x54\\xeb\\x67\\xbe\\x80\\x69\\xf0\\xf9\\x7a\\xde\\x27\\\n\\x60\\xfc\\x16\\x64\\x0c\\x87\\x48\\xda\\xfa\\xb9\\x2e\\x50\\xdc\\x8e\\x3c\\x71\\\n\\x83\\x32\\xb3\\x6d\\x7a\\x56\\xc3\\x68\\x92\\xb6\\x7e\\xb0\\x36\\x74\\x10\\x20\\\n\\xee\\x76\\x3c\\x71\\x83\\x2c\\x3e\\x4e\\xcc\\x07\\x95\\x09\\x7f\\x1d\\x09\\xa1\\\n\\x8b\\x9b\\xca\\x13\\xef\\x07\\x62\\x5e\\xf6\\x67\\x3f\\x3b\\x30\\xd7\\x87\\x2d\\\n\\x88\\x6a\\x3d\\x8d\\x13\\x20\\xee\\x7f\\x78\\xe2\\xb5\\x9c\\xcb\\x62\\x7e\\xe0\\\n\\xb3\\xbb\\x5f\\x2b\\x40\\xbc\\x91\\x3c\\xf1\\x06\\x0b\\x10\\xaf\\x05\\xc2\\x62\\\n\\x03\\x49\\x5b\\x4f\\x27\\x04\\x88\\xf7\\x1e\\x4f\\xbc\\x33\\x04\\x88\\xd7\\x02\\\n\\x61\\x31\\x87\\xa4\\xad\\xa7\\x9b\\x02\\xc4\\xcb\\xb7\\x3f\\x71\\xa8\\x00\\xf1\\\n\\x5a\\x20\\x2c\\xc6\\x90\\xb4\\xf5\\xf4\\x56\\x80\\x78\\x7f\\xf0\\xc4\\xdb\\x4f\\\n\\x80\\x78\\x2d\\x10\\x16\\xa8\\x13\\xd5\\x7a\\x8a\\x13\\x20\\x5e\\xbe\\x75\\x45\\\n\\x07\\x01\\xe2\\xb5\\x40\\x58\\xf0\\xd5\\x7f\\x92\\x00\\xf1\\x5a\\xe4\\xfe\\x99\\\n\\x03\\x7c\\xf5\\xff\\x59\\x80\\x78\\x3f\\xf2\\xc4\\xdb\\x5f\\x80\\x78\\x2d\\x10\\\n\\x16\\x98\\x93\\x19\\xa2\\xff\\xe7\\xdb\\x8f\\x3c\\x49\\x80\\x78\\x2d\\x10\\x16\\\n\\x7c\\x72\\xba\\x07\\x02\\xc4\\xcb\\xb7\\xc7\\x67\\xa1\\x00\\xf1\\x5a\\x20\\x2c\\\n\\xf8\\x7c\\xed\\xfc\\x2b\\x40\\xbc\\xfb\\x79\\xe2\\x0d\\x15\\x20\\x5e\\x0b\\x84\\\n\\xc5\\x71\\x92\\xb6\\x9e\\x84\\xb0\\xcb\\x9d\\xc7\\x13\\xef\\x43\\x01\\xe2\\xb5\\\n\\x40\\x58\\xf0\\xf9\\xd7\\xf3\\x13\\x20\\x5e\\xbe\\x79\\x25\\xec\\xfe\\xf2\\x0b\\\n\\x10\\xb7\\x05\\xc2\\x00\\x3e\\x43\\xf8\\xd6\\x69\\x9e\\x02\\xc4\\x5d\\x51\\x4d\\\n\\xdc\\xed\\x04\\x88\\xdb\\x02\\x61\\x80\\xb3\\xaa\\xf8\\xea\\x48\\x08\\xbb\\x7c\\\n\\xf8\\x76\\xf9\\xc0\\x13\\xf7\\x12\\x01\\xe2\\xb6\\x40\\x18\\xac\\x26\\x69\\xeb\\\n\\xe7\\xb5\\x80\\xf1\\xef\\xe1\\x89\\xff\\x91\\x80\\xf1\\x5b\\xa0\\x3f\\x60\\x87\\\n\\xf1\\x94\\xa4\\xad\\x9f\\xad\\x02\\xa6\\x31\\x88\\x27\\x7e\\x50\\x1d\\x01\\xd3\\\n\\xb0\\x40\\x3f\\xe0\\x6c\\x45\\xbe\\xba\\xe9\\x23\\x60\\x1a\\x38\\x97\\x97\\xef\\\n\\x6c\\xdf\\xe5\\x02\\xa6\\x61\\x81\\x7e\\x80\\x2d\\x86\\x6a\\xbd\\xc0\\x37\\xc3\\\n\\xaf\\x02\\xa7\\xc3\\xe7\\x8f\\x0c\\x36\\x47\\x96\\xb3\\xda\\x4d\\x07\\xd4\\x31\\\n\\x9f\\xff\\xa5\\x03\\x06\\x48\\xab\\x3b\\x4f\\x3a\\xa0\\xbf\\x0c\\x90\\x96\\x05\\\n\\xda\\x01\\x7e\\x5f\\x8c\\xa5\\x9f\\x85\\x1f\\xaa\\x57\\x3c\\x69\\x61\\xaf\\x91\\\n\\xc5\\xb7\\xa3\\xf1\\x01\\x5f\\xc0\\x7c\\x7b\\xf2\\x20\\x07\\x32\\x94\\x3f\\x28\\\n\\x1f\\x9e\\xf4\\x40\\x13\\x0c\\x94\\x9e\\x05\\xea\\x81\\x33\\x86\\xf8\\xea\\xc2\\\n\\x90\\xba\\x39\\xf8\\xf6\\xe6\\xd3\\x07\\x4b\\x89\\xc5\\x97\\xbb\\x31\\x01\\x9f\\\n\\xf1\\xd8\\x7f\\xa7\\x5a\\x0f\\xf0\\x0f\\x66\\x68\\x1f\\xe1\\xbe\\x3c\\xe9\\x82\\\n\\x36\\x19\\x38\\x5d\\x0b\\x14\\x80\\x5e\\x87\\xaf\\x0e\\x26\\x1b\\x21\\x6d\\xb4\\\n\\xaf\\x17\\x6a\\xd2\\xb7\\x9c\\x69\\x68\\x78\\xa8\\xf3\\xc1\\x83\\x71\\xdf\\x58\\\n\\xf3\\xb0\\x3e\\x6a\\x78\\xc0\\xfc\\xd0\\x32\\x0e\\x18\\x0e\\xe8\\xf7\\xf9\\xe6\\\n\\x7c\\xa0\\xae\\x46\\xe4\\x03\\x32\\xc7\\x93\\x6a\\xf8\\x80\\x1e\\xda\\xe2\\xf3\\\n\\x59\\x78\\x60\\x4e\\x2f\\x26\\xfc\\x65\\x7e\\xd8\\x04\\xfc\\xe0\\x9c\\x4b\\xbe\\\n\\x3d\\x67\\x20\\x8b\\x1f\\x48\\xe1\\x01\\x7d\\x1b\\x5f\\x59\\xc3\\xc6\\xaf\\xb8\\\n\\x89\\x78\\x1a\\xa0\\x86\\x27\\xd0\\x30\\x13\\xf1\\x94\\x15\\x31\\x96\\xa8\\x2f\\\n\\x67\\x53\\xdb\\x62\\xf3\\xed\\x0f\\x05\\x41\\x5f\\xd0\\xd1\\x84\\x7c\\x65\\x15\\\n\\xf4\\x24\\xea\\xcf\\x8f\\x5d\\x6d\\x42\\xbe\\x58\\x60\\xce\\x09\\x7f\\xef\\x7c\\\n\\xfc\\xe1\\x3c\\x2b\\x0f\\xd3\\xb1\\x96\\xe9\\x81\\xba\\xe7\\xd3\\xbb\\x81\\xe0\\\n\\xeb\\xd3\\x5c\\xce\\x84\\xc3\\xf8\\xa3\\xee\\xdc\\x2a\\xb4\\x81\\xee\\xa6\\x63\\\n\\x2d\\xd3\\xa2\\x2f\\x51\\x5f\\xf7\\x12\\x8a\\x0a\\x9b\\x8c\\x33\\x7e\\xe0\\xfc\\\n\\x56\\xc8\\x01\\xf9\\xf8\\x85\\xbd\\xe0\\x9f\\xa6\\x63\\x2d\\xd3\\x01\\x32\\x5c\\\n\\x75\\x67\\x04\\x43\\xc6\\x67\\xae\\x3e\\x17\\x1b\\x50\\xf4\\x85\\xa8\\x9f\\xab\\\n\\x60\\xbc\\xb2\\x9c\\x09\\xa3\\x1e\\xe8\\xcf\\x43\\x88\\xfa\\xf2\\xc3\\xf7\\x65\\\n\\xee\\x36\\x37\\xcd\\x08\\xbf\\x6c\\x9a\\x25\\xec\\x49\\x28\\x61\\x32\\xee\\xcc\\\n\\x17\\xce\\x14\\x5d\\x20\\x9a\\xeb\\xbe\\x9e\\xa9\\x98\\xd3\\x11\\x68\\xa3\\x7c\\\n\\x36\\xa3\\xdc\\x3e\\xac\\x8b\\xc9\\xb8\\x33\\x3f\\x60\\x9e\\xa7\\xa9\\xbc\\x70\\\n\\xa6\\x4e\\x66\\x3b\\x0f\\x1e\\x67\\xc4\\xc4\\x12\\xf5\\x79\\x02\\x6d\\x21\\xb4\\\n\\x6d\\xd9\\xcf\\x0a\\xc8\\xca\\xd5\\xe9\\x72\\x58\\x82\\xff\\x95\\xb2\\xa6\\x62\\\n\\x30\\x83\\x80\\xef\\x40\\x3e\\xff\\x41\\xaa\\x7d\\x01\\x7c\\x09\\x5a\\x9b\\x88\\\n\\x47\\x53\\x00\\xf2\\xf1\\xe1\\x24\\xfd\\xb3\\xdf\\xe1\\xcb\\x3d\\xb3\\xef\\xb3\\\n\\xc1\\x7c\\x4f\\xdd\\x99\\x35\\x5c\\xc2\\xb9\\x22\\xcd\\x4d\\xc4\\xa3\\x31\\xe1\\\n\\x46\\xd1\\x7f\\x44\\x73\\x59\\x60\\xee\\xbf\\x80\\x98\\xe6\\x5c\\x37\\x43\\xa1\\\n\\x13\\x51\\x7f\\x7e\\x19\\x97\\x22\\x28\\x6a\\x68\\x22\\x1e\\x0d\\x09\\x57\\x42\\\n\\xe7\\x2d\\xbd\\xfc\\x43\\xbf\\x97\\x55\\xf7\\x56\\x15\\x23\\xb4\\xae\\x2a\\xbd\\\n\\x32\\x00\\x61\\xdc\\x80\\xae\\x3b\\x33\\x8f\\x0b\\xe8\\xe7\\xb1\\x37\\x2b\\x8a\\\n\\x68\\x97\\x67\\xec\\xab\\x2e\\x62\\x12\\x4e\\x8d\\x8b\\x7e\\x44\\xbd\\x1e\\x5b\\\n\\x95\\x24\\x84\\xb6\\x3b\\x34\\x95\\x8e\\x4b\\x1f\\xe0\\xfc\\x4b\\x5f\\xc2\\xbf\\\n\\x27\\x97\\x8f\\x60\\x37\\x61\\x6a\\x3d\\x8e\\xb1\\x01\\xdf\\xc4\\xcb\\x08\\x7d\\\n\\x7e\\x90\\x36\\x65\\x04\\x1d\\x08\\xe6\\x43\\xf0\\x73\\x62\\x6e\\xb2\\x4f\\x00\\\n\\xb6\\x19\\xd0\\x79\\x8a\\x89\\x7a\\x7d\\x8d\\x2a\\x21\\xef\\x38\\xab\\xe3\\x67\\\n\\xde\\x43\\x81\\x75\\xe2\\x5e\\xa2\\x5d\\x79\\x71\\xdb\\x02\\xe4\\x48\\x22\\x42\\\n\\xcf\\x15\\x4c\\x21\\x53\\x84\\xac\\x0e\\x7b\\xaf\\xb0\\xc7\\xfe\\x02\\xd1\\xbe\\\n\\xce\\xd9\\xf9\\x1d\\xd6\\x7d\\x65\\x8c\\xce\\xb5\\xf9\\xa2\\x36\\xa1\\xcf\\x14\\\n\\x50\\x27\\xf7\\xd6\\x44\\xdf\\x08\\x7d\\x36\\x19\\xec\\x4e\\x7a\\x53\\x54\\x85\\\n\\x08\\x6b\\x0b\\x87\\xb8\\x70\\xfe\\x15\\x74\\x32\\x98\\x97\\x9f\\x63\\xd2\\xd4\\\n\\x95\\x4f\\xb4\\x91\\xdd\\x84\\x3e\\xb7\\xc7\\x02\\x7e\\xfc\\x4e\\xe8\\x3d\\x6d\\\n\\x7c\\x67\\x5a\\xe8\\x42\\x68\\x47\\x18\\x7f\\xe1\\xab\\x1a\\xe7\\x64\\xa1\\xde\\\n\\x60\\x33\\x3f\\x8a\\xd0\\xf3\\x0f\\xc8\\xdc\\x3a\\x30\\xd4\\x93\\x79\\x36\\x9a\\\n\\x09\\xb3\\x80\\x79\\x07\\x67\\xeb\\x3c\\x25\\xfa\\xb5\\x49\\x2e\\x61\\x8f\\xd6\\\n\\x4a\\x62\\xf1\\x99\\xaf\\x0b\\xb0\\xb7\\x0d\\x3a\\x43\\x9c\\x63\\x91\\x91\\xb2\\\n\\x37\\x25\\x41\\xa6\\x81\\x36\\x25\\xc4\\x39\\x0c\\x3f\\x33\\xa0\\x5b\\xf6\\x27\\\n\\xb4\\x3f\\x33\\x53\\xd7\\x69\\x7a\\xf4\\x80\\xe1\\xb5\\xb2\\x41\\x4a\\xc2\\x02\\\n\\x8c\\x0f\\xd8\\xe7\\x10\\x41\\xf4\\x1b\\x83\\x85\\x26\\xe8\\xbb\\x4f\\x11\\x7a\\\n\\x0f\\x9c\\xb9\\xea\\xe5\\xb3\\x2a\\x30\\x07\\x77\\x25\\x74\\x7b\\xd8\\x45\\x68\\\n\\x59\\x41\\x46\\xc7\\x6a\\x4d\\x84\\xb8\\xe1\\xfb\\x0c\\x73\\x77\\xd8\\x68\\x60\\\n\\xed\\x91\\xcd\\xd0\\x99\\xb4\\x40\\x27\\xe4\\x22\\xb4\\xae\\xb4\\x17\\xa1\\xe7\\\n\\x72\\x98\\x4b\\x86\\x11\\xfa\\x7c\\x0c\\xf4\\xcd\\x90\\x3b\\xf1\\xd9\\x27\\xc4\\\n\\x33\\x7f\\xbb\\xcf\\x84\\xc5\\x3b\\xb0\\x57\\x99\\xc2\\xc4\\x55\\x8b\\x89\\x3b\\\n\\x53\\x41\\x6a\\x2f\\x57\\x82\\xd8\\x46\\xf9\\xb7\\xc8\\x4a\\xf3\\x6f\\xaa\\x68\\\n\\x34\\xfe\\xb6\\x12\\x29\\xff\\xb6\\x11\\x6b\\xfe\\xad\\x1a\\x9e\\x8a\\x2f\\xd9\\\n\\x46\\xf9\\xb7\\x94\\xf8\\x2a\\xf1\\x23\\x21\\x4e\\x4a\\xbf\\x45\\x84\\x93\\x27\\\n\\x2a\\x3f\\x54\\x2f\\xa0\\xf8\\x4d\\xe5\\x97\\x10\\xa5\\x3c\\x26\\x13\\x67\\xa5\\\n\\xdf\\x89\\x56\\x89\\x4a\\x79\\x4c\\xb4\\x91\\x2b\\xfd\\x96\\xd9\\xca\\x95\\xf2\\\n\\x28\\xb3\\x97\\x8b\\x54\\x7e\\x2b\\xe5\\x49\\xe6\\x94\\xc1\\xdf\\xaa\\xf1\\xa9\\\n\\xa4\\x97\\xa8\\xc2\\x4f\\xa2\\x4d\\xb2\\x32\\xff\\x2a\\xf9\\x49\\x56\\xc9\\xbf\\\n\\x6a\\x79\\x28\\x97\\x17\\x05\\xa5\\xf2\\xa4\\xa0\\x54\\xde\\x60\\x88\\x5b\\x1f\\\n\\x48\\x80\\x8a\\x2e\\x91\\xea\\x76\\x95\\xe3\\x20\\x56\\x4a\\xaf\\x50\\xe0\\xc4\\\n\\x22\\xc6\\x6f\\x05\\x17\\xc9\\x74\\xdb\\xf4\\x55\\x0a\\xce\\x79\\x81\\x0a\\xee\\\n\\x9a\\xc8\\x79\\x21\\xe5\\x4f\\xb2\\xd4\\x14\\x92\\xe9\\x3b\\x11\\x1b\\x81\\x8c\\\n\\xce\\x80\\x94\\x8d\\x40\\x4a\\xf3\\x96\\xc8\\xe6\\x4b\\xcc\\xbc\\x28\\x62\\x22\\\n\\x14\\x31\\xf9\\x97\\x30\\xcf\\xd9\\xf7\\x64\\x74\\x39\\x27\\xb2\\x59\\x63\\x6e\\\n\\x64\\xa9\\xc5\\x4f\\x07\\x94\\xa6\\xf2\\x25\\x4a\\x49\\x40\\x92\\x5a\\x9c\\xf4\\\n\\x9d\\x38\\xb5\\x38\\xe9\\x90\\xa2\\xd4\\x7c\\xc9\\x68\\xbe\\x5d\\xd9\\xdf\\x74\\\n\\xc5\\x29\\xca\\x21\\x99\\xb0\\xff\\xb1\\x09\\xfa\\xb2\\x81\\x98\\x04\\x5d\\x53\\\n\\xda\\x6b\\x2a\\xc4\\xae\\x29\\xed\\x35\\x15\\x12\\xa7\\x94\\xf6\\x93\\x0a\\xa9\\\n\\x53\\xca\\x17\\xa1\\xf8\\x6d\\x4f\\x87\\x49\\x65\\x08\\xbf\\x5d\\x15\\xbf\\xa9\\\n\\xb6\\x96\\xe6\\xb7\\xd8\\x57\\xf1\\x1b\\x55\\xaf\\xfa\\x5b\\xa9\\xb1\\x5a\\xa5\\\n\\xff\\xdb\\x8f\\xfb\\xdb\\x4f\\xae\\xfc\\xf1\\x89\\xd2\\xff\\xad\\xd4\\x98\\xc5\\\n\\x99\\xef\\xb7\\x4e\\xf9\\xf5\\x53\\x29\\x2f\\x2d\\xca\\x37\\xbd\\xfa\\x42\\x9b\\\n\\x61\\x81\\xb6\\x94\\xa6\\xfe\\x9d\\x14\\xbf\\xd1\\xb6\\xa4\\xdc\\xdf\\xf6\\x69\\\n\\xdb\\x53\\x9a\\xf6\\xa7\\xd2\\x3e\\x55\\xdb\\x2b\\xb7\\xf7\\x12\\x81\\x37\\x6e\\\n\\x7b\\x4f\\xf9\\x2f\\x95\\x61\\xfa\\x53\\x50\\xfd\\x5e\\xc4\\xa9\\x0c\\xd1\\x49\\\n\\xa9\\x7e\\x7f\\x8a\\xef\\x93\\xfe\\x12\\x65\\xa9\\x09\\xd2\\x5f\\x62\\x22\\x9b\\\n\\x40\\x32\\xfd\\x7d\\x27\\x2b\\xbe\\x7f\\xfa\\x0f\\x6c\\xbf\\x21\\x65\\x38\\x63\\\n\\xc7\\x4c\\xf6\\x2a\\xa1\\xc3\\x25\\xb3\\xfd\\xa8\\x8c\\x8e\\x40\\xc6\\xc6\\x93\\\n\\x48\\xf7\\x5c\\xe2\\xd4\\x2e\\x32\\xa5\\xb3\\x4c\\x54\\x0c\\x9d\\x62\\x74\\x60\\\n\\x22\\x45\\xff\\x26\\xa5\\xfb\\xbf\\xd4\\x82\\x4d\\xa4\\x7f\\xa7\\xe6\\x1b\\xdd\\\n\\xab\\x52\\x07\\x2b\\x55\\x0a\\xce\\x74\\xa8\\xbe\\x72\\xa5\\x00\\xf4\\x9f\\x21\\\n\\x5c\\xef\\x4f\\x68\\xa5\\x84\\x55\\x8a\\x89\\x21\\x21\\xa2\\x65\\x1a\\xa7\\x0c\\\n\\x38\\xd3\\x77\\x3c\\x45\\xd7\\x08\\x7d\\xf6\\xcb\\x0f\\xe6\\x7e\\x22\\xb1\\x9c\\\n\\xf7\\x6b\\x68\\x40\\x6f\\xc8\\xca\\xbb\\x92\\x89\\x62\\x2d\\xc3\\xde\\xc7\\x50\\\n\\xe4\\x62\\x32\\xee\\xb2\\x36\\x72\\x10\\xba\\x9d\\xab\\x96\\xb9\\xea\\x3d\\xea\\\n\\xc0\\xf2\\x1d\\x08\\x0f\\xf8\\x11\\x53\\x5d\\x93\\x7d\\x67\\x48\\xf5\\xb9\\xc5\\\n\\xdf\\x90\\xf0\\xc0\\x39\\x0f\\xdc\\x76\\x0e\\x9f\\xaf\\x45\\x18\\xda\\x45\\x94\\\n\\xbf\\x85\\xab\\x26\\xe2\\x31\\x2b\\x03\\x72\\x44\\xb6\\xfc\\x31\\xe6\\x72\\xf7\\\n\\x48\\xc0\\xb6\\x80\\xfd\\x0e\\x92\\x99\\x7b\\x0b\\x84\\x05\\xd7\\x8f\\x22\\xec\\\n\\x32\\x9c\\x39\\x7f\\x83\\xed\\x11\\xf7\\x1c\\x3c\\x99\\xb1\\x99\\xfb\\x09\\x00\\\n\\x1b\\x39\\x6e\\xff\\x73\\x90\\xd0\\x75\\xe0\\x44\\xe8\\x33\\x48\\xb8\\xfd\\xcf\\\n\\x25\\x3d\\xd3\\xc8\\x49\\x2c\\xbe\\x0a\\xd5\\x01\\x7a\\x4a\\xd5\\x39\\x4f\\x02\\\n\\x43\\xaa\\xcf\\xb5\\xdd\\xcb\\x89\\x39\\x15\\x7c\\x05\\x61\\x2c\\x81\\x2e\\x3e\\\n\\x9e\\x21\\xe8\\xd4\\x61\\xeb\\xd1\\x8f\\x58\\xea\\x83\\x05\\x74\\x19\\x7c\\x67\\\n\\x2d\\xa9\\x12\\xc6\\xde\\x1c\\xe9\\xc4\\x05\\xff\\x3c\\xd8\\x73\\xfd\\x4c\\x8b\\\n\\xf8\\xb0\\x6f\\xbb\\x27\\xb1\\x9c\\xe7\\x0e\\xc0\\x3e\\x19\\xfb\\xea\\xd5\\xcd\\\n\\xff\\xaf\\x90\\xf4\\xed\\x50\\x61\\xb3\\x8f\\xfd\\x0e\\xac\\x3d\\x98\\xba\\x75\\\n\\x84\\xea\\x3d\\xec\\x43\\x2c\\x7e\\x93\\xe8\\xef\\x00\\x36\\x3a\\x18\\x0f\\x3e\\\n\\x32\\x84\\xfb\\xd1\\x44\\x3b\\x7f\\x07\\x9a\\xf6\\x9a\\x70\\xcb\\x9c\\x8f\\x56\\\n\\x08\\x98\\x8f\\x9f\\x11\\xdd\\x48\\xda\\x72\\xc6\\xbc\\x6a\\x3e\\xa1\\xed\\xe7\\\n\\xf0\\x6d\\xa0\\x8d\\x57\\x63\\x9e\\xc5\\x73\\xc2\\xb3\\xd7\\x9e\\x46\\xe7\\x3a\\\n\\x6b\\x00\\xe3\\x68\\x2c\\x51\\x2e\\x7f\\xfc\\xd6\\x64\\x87\\x02\\x7b\\x05\\x09\\\n\\x51\\x2e\\x7f\\x8c\\xd3\\x16\\xf9\\x86\\xee\\x40\\xbb\\xe5\\x96\\x23\\x6c\\x53\\\n\\x7e\\xd7\\xe2\\x3d\\x84\\x61\\xd7\\x1e\\x6c\\xbd\\x09\\x79\\x76\\xc3\\xcf\\x02\\\n\\xd5\\x7d\\xb4\\xba\\x9c\\x51\\x19\\xa8\\xf2\\xee\\x1e\\xc1\\xb9\\xcb\\xda\\xc0\\\n\\xdc\\x11\\xb6\\x15\\xdc\\xf6\\xaf\\xcb\\x7e\\xf5\\xea\\x44\\xd1\\xf6\\x41\\x8f\\\n\\x85\\x66\\x30\\x8b\\x03\\xf3\\x22\\xf8\\x0f\\x60\\xcb\\x1f\\xf2\\x21\\x5d\\xf6\\\n\\x94\\x20\\xec\\x57\\xa2\\x2c\\x7f\\xb2\\x40\\x7b\\xb0\\xe5\\xcf\\xf6\\x1f\\x28\\\n\\x3f\\x5d\\xca\\x1f\\x7e\\xd5\\xb9\\xf6\\xee\\x96\\xf2\\xd7\\x0d\\xe8\\x7f\\x60\\\n\\xb7\\xc5\\xed\\x7f\\x74\\xf1\\x93\\x53\\x93\\x28\\xf7\\x3f\\x12\\x81\\xf9\\xfb\\\n\\x19\\xb0\\x9d\\x28\\x97\\x7f\\x90\\x0e\\xef\\x2e\\x24\\xca\\xf3\\x9f\\x5d\\x82\\\n\\x73\\x97\\xf5\\x81\\xb5\\x17\\x77\\x6d\\x8b\\x31\\xa0\\xba\\x16\\xef\\x21\\x8c\\\n\\xea\\x5e\\x1b\\xcb\\x1a\\x4c\\x77\\x60\\x0c\\xc0\\x99\\x88\\xdc\\x76\\x0c\\x39\\\n\\x67\\x4d\\x0d\\xef\\xa0\\xec\\x9f\\x10\\xe5\\xef\\x46\\x42\\x2c\\x32\\x51\\x7d\\\n\\x01\\x7f\\xb3\\xaa\\xf2\\x07\\xac\\xc3\\x70\\x4e\\x1d\\x7c\\x67\\xe5\\x21\\xf4\\\n\\xf9\\x05\\x18\\x1b\\xe0\\x4f\\xf9\\x2b\\x51\\x96\\x3f\\x40\\x66\\x67\\x4c\\x3f\\\n\\xea\\x59\\x11\\xd8\\x83\\xa9\\xaf\\x0d\\xfe\\x22\\x13\\xf0\\x9b\\xd5\\x00\\xf9\\\n\\x1a\\xea\\x40\\x17\\xf9\\x33\\xc2\\xa2\\xec\\x33\\xb3\\xaf\\x0d\\x73\\xc3\\x1f\\\n\\x84\\x96\\xbf\\xa5\\x57\\xfe\\x12\\x42\\xfb\\xc6\\xb1\\x40\\x78\\x60\\x6f\\x0e\\\n\\xfa\\x73\\x9c\\x85\\x8b\\xf5\\x81\\x94\\x21\\xdc\\x63\\x7f\\x6f\\x77\\x62\\x98\\\n\\xfd\\x3b\\xf8\\x06\\x31\\x1f\\xc8\\xc1\\x90\\x2d\\xb1\\xe8\\x76\\x00\\x1b\\x22\\\n\\x4c\\x39\\xa0\\x9f\\x82\\xae\\xae\\x35\\x45\\x63\\x08\\x3d\\x96\\xc3\\x87\\x04\\\n\\xf6\\xed\\xc0\\x5f\\x1e\\x74\\x9a\\xf0\\x35\\x15\\xc7\\xd0\\x7b\\xe6\\x19\\xfe\\\n\\x06\\x5d\\x12\\xe4\\x7b\\x41\\xcc\\xbb\\xad\\x98\\xb8\\x2c\\xfa\\x4f\\xcd\\x80\\\n\\x9c\\x1a\\x36\\x7a\\x28\\x3b\\xe8\\x95\\xf9\\xec\\x02\\x34\\xdd\\x6b\\xfa\\x5b\\\n\\x02\\x13\\x27\\x7c\\x23\\x78\\x51\\xf4\\x9b\\x91\\xf2\\x64\\xce\\x80\\xae\\xcc\\\n\\x95\\xd0\\x6d\\x9b\\xef\\x7c\\x6f\\x43\\x13\\x64\\xb0\\xf8\\x46\\x1a\\x91\\xac\\\n\\xe5\\x87\\x2e\\x3d\\xc0\\xee\\xce\\x97\\xa4\\x95\\x67\\xeb\\x7a\\x8f\\x39\\x15\\\n\\xd6\\x1e\\x5f\\x99\\xfb\\x8c\\xc4\\x85\\xf1\\x6a\\x3a\\xa1\\xfb\\xa9\\xac\\x0a\\\n\\xe8\\x87\\xe1\\x0f\\x56\\xdb\\x3d\\xdd\\xd0\\x1d\\xc3\\x07\\x10\\xf6\\x77\\x62\\\n\\x2f\\x2e\\xc6\\x79\\xec\\xc7\\x85\\xaf\\x54\\xf8\\x1d\\x85\\x4c\\x35\\x17\\x43\\\n\\xf6\\xcc\\x33\\xfc\\xad\\x11\\x13\\x16\\xef\\xac\\x21\\xf4\\x98\\xc1\\x77\\x86\\\n\\x32\\x1f\\x81\\x37\\x9c\\x73\\xa8\\x8d\\x5e\\x2f\\xb3\\x00\\x79\\x41\\xbf\\xcb\\\n\\xb6\\x51\\x75\\x6d\\x10\\xf2\\x6d\\xd8\\xe1\\xc1\\x36\\x03\\x75\\x25\\xe4\\x7c\\\n\\x06\\x71\\x41\\x16\\x02\\x1b\\x0f\\xf8\\xc0\\x8b\\xd3\\xc0\\x07\\xfb\\x6d\\x41\\\n\\xdf\\x57\\x51\\x40\\x1e\\x8c\\x0d\\xf8\\x75\\x85\\xad\\x0a\\xe4\\x74\\xea\\xf2\\\n\\x8a\\x72\\xc0\\xf9\\x3a\\x6d\\x88\\x71\\x75\\xf2\\xf8\\x66\\xda\\x12\\xba\\xad\\\n\\x4b\\x35\\xf0\\x07\\x3b\\xd8\\xc5\\x44\\xf8\\xb3\\xe6\\x0d\\x0d\\x4f\\xa2\\xfe\\\n\\x0c\\x4b\\x10\\xf6\\x81\\xc0\\x27\\xb1\\x39\\xf8\\x65\\x43\\xdf\\x05\\xbf\\x72\\\n\\x9a\\xfc\\xe0\\x60\\xee\\x94\\x19\\xfc\\xa9\\xa3\\x9d\\x60\\x2d\\xa6\\xee\\xbb\\\n\\x86\\xbf\\xa5\\x96\\xc4\\x3c\\xe7\\xe2\\xe0\\x09\\xdf\\x21\\x7c\\x7f\\xa9\\x9b\\\n\\xd3\\xe2\\x7b\\x31\\x57\\x5f\\x3f\\xd0\\xc7\\xab\\xea\\xc8\\xd8\\x7b\\xb4\\x2d\\\n\\x7c\\xef\\xe6\\x58\\xee\\xaa\\x00\\x8f\\xed\\x29\\xba\\x49\\xf8\\xf3\\x72\\x97\\\n\\x98\\x9f\\x7f\\x35\\xcc\\x37\\xf8\\xe6\\x18\\x78\\x86\\xbd\\x4c\\x99\\xf1\\x4c\\\n\\x14\\xc8\\x34\\xbc\\x09\\xbf\\x9f\\x36\\xcc\\xcd\\xcc\\xe5\\xec\\xb7\\x71\\x24\\\n\\xad\\x2c\\x14\\x04\\x7f\\x81\\x99\\xd5\\xaf\\x3e\\x17\\xf0\\x29\\x87\\x79\\xb0\\\n\\xea\\xb7\\x80\\x5d\\xc4\\x5e\\x26\\xe4\\x0b\\x80\\x6f\\x4c\\xd5\\xb5\\x0f\\xf8\\\n\\x0a\\x20\\x99\\xb3\\xcd\\xab\\x03\\xbe\\x05\\xd8\\xb3\\xaa\\xce\\xa1\\xf1\\xdb\\\n\\xdb\\x44\\x3c\\xf1\\x9d\\x21\\x85\\xfe\\x26\\x2b\\x9f\\xc5\\x06\\xdf\\x9f\\xaa\\\n\\xfd\\x11\\xea\\x60\\xbc\\x91\\xf9\\xe8\\x4f\\xd2\\xf6\\x39\\xf0\\x2d\\x94\\x15\\\n\\xfd\\xda\\xab\\x02\\x32\\x2b\\xd6\\x16\\x8a\\xdb\\x17\\x19\\xcb\\xa6\\x15\\xeb\\\n\\xfb\\x6f\\x44\\xb9\\xcf\\x41\\xd9\\x6b\\x63\\x0b\\x91\\x55\\x50\\x9f\\x28\\xd6\\\n\\xd0\\x6c\\x39\\x7c\\x61\\x9e\\x1b\\x12\\x38\\xcb\\x47\\xf5\\x1c\\x48\\x9c\\x11\\\n\\x5d\\xd7\\xc0\\xe9\\x9a\\x23\\xd0\\x0e\\x55\\xfd\\x8c\\xc1\\xd6\\xc3\\x50\\xe7\\\n\\xb9\\x40\\x27\\x12\\x4a\\x94\\xbf\\x3b\\xd8\\x11\\xfe\\xcc\\xe7\\xaf\\x42\\xaf\\\n\\xca\\xfa\\x97\\x67\\xcb\\x04\\xfa\\x0b\\x43\\xac\\x73\\x7a\\x93\\xb4\\x73\\x30\\\n\\x1f\\x03\\xa4\\x93\\xd9\\x80\\x39\\xa0\\xea\\xdc\\xdb\\x53\\xe0\\x34\\xf2\\x51\\\n\\xf4\\x92\\x28\\x7f\\x6b\\xe1\\xc4\\x62\\xcf\\x00\\x40\\x77\\x03\\x1f\\xd8\\xaa\\\n\\xf2\\x22\\x21\\x65\\x5b\\xf3\\x88\\xf2\\x58\\x83\\x3d\\x7b\\xa5\\x04\\x8c\\x3f\\\n\\xb3\\x03\\xeb\\x4c\\x8c\\x05\\xdc\\xfe\\x61\\x8e\\x40\\x71\\xe3\\x0c\\xb9\\xcf\\\n\\x44\\xb9\\xfc\\x27\\x0b\\x14\\x77\\x56\\x02\\x7c\\x81\\x72\\xcb\\x1f\\x6d\\x54\\\n\\x88\\xb1\\x78\\x36\\x51\\xfe\\xb6\\x62\\x89\\xc5\\x7e\\x93\\x0f\\xd0\\x29\\xa8\\\n\\xea\\xb1\\x45\\x19\\x8c\\x13\\xe5\\xcc\\xf6\\xfb\\x6c\\xfb\\x1f\\x9e\\xc1\\x38\\\n\\xb3\\x32\\x60\\xef\\xc2\\x2d\\x2b\\x8c\\x03\\xe9\\xf9\\x12\\xd0\\x84\\x4e\\x24\\\n\\xed\\x3a\\xcb\\xd2\\xf6\\xd5\\x03\\xb6\\xc7\\xec\\x3e\\x2d\\xb6\\xdc\\x32\\x32\\\n\\x3f\\x57\\xdd\\xf3\\x68\\xb1\\x9f\\x4d\\x1f\\xf0\\x7e\\xc8\\x2d\\xb3\\x2d\\x7a\\\n\\xc6\\x83\\xef\\x06\\x76\\x65\\xdc\\xf6\\x9f\\xd9\\xce\\xe8\\x35\\x05\\x20\\x83\\\n\\xe0\\xb6\\x7f\\x9c\\x6d\\xac\\x8d\\x5f\\x07\\x55\\x34\\x50\\x89\\x07\\x6b\\xeb\\\n\\x9f\\xc9\\x4e\\x49\\x5f\\xc0\\xde\\x15\\x32\\x9a\\x8c\\xb6\\xdb\\x71\\x44\\xb9\\\n\\xfc\\x37\\x0b\\xc5\\xe0\\x4f\\x80\\x1d\\x44\\xb9\\xfc\\xc7\\xe8\\x11\\xc7\\x06\\\n\\xa2\\xdc\\x8f\\xe9\\x13\\xc7\\xcf\\x0a\\xb4\\x5d\\x6e\\xd9\\xad\\xd1\\x23\\x0e\\\n\\x56\\xe7\\xc6\\xd6\\xe3\\xcf\\x70\\x76\\xb1\\x50\\x80\\xdd\\x36\\xb7\\xfd\\x9f\\\n\\xd6\\x23\\x0e\\x09\\x51\\x96\\x29\\x95\\x16\\x8a\\xb9\\x9f\\x00\\xd0\\x19\\x73\\\n\\xcb\\xff\\x81\\x1e\\x71\\x70\\x65\\xdb\\xb0\\x03\\xcb\\x6c\\x36\\x60\\xa6\\x04\\\n\\xf4\\x24\\x5c\\xbf\\xb6\\x52\\x3d\\xe2\\xe0\\xb6\\x7d\\xe8\\x76\\x32\\xdd\\xd9\\\n\\x24\\x26\\x04\\x6c\\xb4\\x58\\x3b\\xe3\\x64\\xe6\\x5e\\x57\\x70\\xcb\\x1f\\xf2\\\n\\x37\\x4b\\xf9\\x6b\\x0f\\xd5\\xf2\\xd7\\xc7\\x9f\\xaa\\xa5\\xff\\xd1\\x1f\\x42\\\n\\xf4\\x3f\\xec\\xbe\\x75\\x96\\x2c\\x7e\\xe9\\xb5\\x47\\x39\\x92\\xf1\\xf1\\x57\\\n\\xd5\\x5f\\x6e\\x53\\xa1\\x98\\xfb\\x09\\x80\\x3d\\x7f\\xdc\\xf2\\x8f\\xd4\\x23\\\n\\x8e\\x7f\\x88\\xf2\\x1a\\x62\\xb4\\x60\\xdc\\x65\\x7d\\xc0\\x7f\\x30\\xb7\\xec\\\n\\xd6\\xea\\x11\\x07\\xec\\x66\\xb9\\xed\\x7f\\xa3\\x60\\xdc\\x65\\x7d\\x60\\xef\\\n\\x33\\xb7\\xfd\\x8f\\xd5\\x23\\x8e\\x86\\x44\\xb9\\xfc\\xa1\\xf7\\xb2\\xec\\x71\\\n\\x4e\\x1f\\x90\\xbf\\x41\\xef\\xc2\\x2d\\x7f\\x7d\\xec\\xa3\\xa0\\x67\\xe1\\xfa\\\n\\x1c\\x03\\xd5\\x10\\x88\\xc7\\xac\\x0c\\x94\\x35\\xb7\\xcc\\xa0\\xb3\\xd2\\x47\\\n\\xfe\\x0c\\x60\\xdf\\x1c\\xb7\\x1e\\xff\\x16\\x82\\xc1\\x2c\\x0e\\xec\\x17\\xe3\\\n\\xf6\\x1b\\xdb\\x33\\x10\\x17\\xd7\\xe7\\x15\\xae\\xaf\\x89\\xfe\\x75\\xf9\\x33\\\n\\x00\\x7b\\x08\\xd1\\xde\\xb9\\xe5\\x9f\\x91\\x7d\\x1a\\x88\\xef\\x35\\x51\\xfe\\\n\\x9e\\x86\\x64\\x90\\xc7\\xac\\x8c\\x91\\x44\\xb9\\xac\\xa0\\x87\\xc9\\x88\\xfe\\\n\\x1d\\x08\\x20\\xca\\x3a\\xfd\\xfb\\x02\\xc4\\x99\\x15\\xc1\\xe7\\x1f\\x7b\\x96\\\n\\x00\\xf1\\xe2\\x7c\\x24\\xd6\\xde\\x9c\\xfd\\xa6\\xc6\\x09\\x10\\x6f\\x56\\x03\\\n\\x6c\\xd2\\xb8\\x7d\\x35\\x64\\x66\\x05\\x05\\x8a\\x7b\\x01\\x51\\xfe\\xae\\x60\\\n\\xfb\\xee\\x24\\x50\\xdc\\x59\\x01\\x90\\xcd\\xc0\\xde\\x8d\\x5b\\x46\\xfe\\x02\\\n\\xc6\\x5f\\x80\\xd0\\x7a\\x7c\\x6e\\xfd\\x1e\\x25\\x16\\xfb\\x5b\\x00\\x6b\\xa2\\\n\\x93\\x44\\xb9\\x7f\\xc0\\xde\\xf3\\x7c\\x02\\xa7\\x33\\x90\\x28\\x97\\x3f\\x68\\\n\\xa2\\xc0\\x69\\x64\\x46\\x4c\\x25\\x69\\xed\\xcf\\x0d\\xb1\\x17\\x09\\x6d\\xfd\\\n\\x10\\x51\\xfe\\xc6\\xb0\\xf7\\xa0\\x8d\\x01\\xd2\\xca\\x2c\\x80\\x6d\\x1b\\xbb\\\n\\xff\\x82\\x25\\xf8\\x10\\x31\\xd4\\x3e\\x73\\x9c\\x93\\x07\\x7b\\x50\\xee\\xb7\\\n\\x86\\xb1\\x40\\x93\\x0f\\xd6\\xac\\x0a\\xac\\x73\\xd1\\xe7\\x73\\xfb\\x04\\xc8\\\n\\x1d\\x0a\\x19\\x38\\x5d\\xd8\\x41\\xa8\\xfa\\x34\\x79\\x45\\x7e\\x2e\\x9f\\x5e\\\n\\x68\\x6f\\xef\\x88\\x72\\x3b\\x84\\x8e\\xaa\\xb1\\x91\\xd2\\x1f\\x4a\\x14\\xfb\\\n\\x4f\\x59\\xc2\\x3a\\xad\\x9e\\x91\\xd2\\x37\\x25\\x60\\x17\\x88\\xb2\\xe7\\xe6\\\n\\x1d\\xfb\\x4f\\xfb\\x1b\\x99\\x8f\\x19\\x44\\x79\\xdc\\x61\\xf7\\xc5\\x64\\x65\\\n\\x5f\\x9f\\x90\\xc7\\x60\\xbf\\xa7\\xea\\x3c\\x64\\x8a\\x09\\x78\\xc1\\x18\\x13\\\n\\x40\\x94\\xcb\\x1f\\x57\\x8c\\x47\\x22\\x92\\xb5\\x64\\xd5\\xb0\\x7b\\xc5\\x5a\\\n\\x16\\xed\\x5c\\x35\\xbf\\xbe\\x26\\xe4\\x0b\\x40\\xdd\\x83\\x2f\\xb9\\x0a\\x45\\\n\\x90\\xac\\xa1\\x33\\x2e\\x43\\xd2\\xee\\xaf\\x63\\xfb\\x1c\\x73\\x99\\x7f\\xf7\\\n\\x25\\xca\\xe7\\xbb\\xb0\\x6d\\x03\\x73\\x23\\xd8\\x8d\\x66\\x46\\xbb\\x69\\xe8\\\n\\x51\\xa0\\x47\\x64\\xe7\\x38\\xdc\\x7c\\xc1\\x1e\\xaa\\x87\\xe9\\x58\\xe3\\x05\\\n\\xec\\xde\\x55\\x7d\\xfd\\xb3\\x84\\x73\\x25\\xdd\\x4c\\xc7\\x9a\\xce\\x80\\xfe\\\n\\x1c\\x3e\\xd2\\x54\\xf3\\xc2\\xea\\x01\\x75\\x39\\x7b\\xc5\\x98\\x80\\x9c\\x02\\\n\\xfb\\xbf\\x59\\x5e\\x55\\x09\\x7b\\x86\\x5d\\x89\\x79\\xca\\x2d\\xc0\\x13\\xe6\\\n\\xd6\\xe0\\x91\\x8f\\x77\\xe4\\x09\\xfb\\x81\\xcc\\xdd\\x0e\\x0a\\xe3\\x32\\xfa\\\n\\x23\\x56\\x0f\\x21\\x27\\x69\\xdb\\x11\\x7c\\x72\\x62\\x3f\\xbd\\x39\\xd8\\xd4\\\n\\x61\\xcf\\x56\\x3f\\x42\\x9f\\x0b\\xab\\xda\\xcf\\xb0\\xf7\\x98\\x5b\\xf7\\x22\\\n\\x99\\xc3\\x7f\\x1a\\x8b\\xc2\\x84\\xb6\\x7b\\x67\\xe7\\x0c\\xaa\\x79\\x62\\xf7\\\n\\xf3\\xc1\\xbf\\x2a\\xda\\x9d\\x31\\xc7\\x08\\xf4\\xed\\x2d\\x18\\xfe\\xd8\\x75\\\n\\x14\\x1f\\x7f\\xe0\\x1d\\xe7\\xe6\\x0a\\x25\\x47\\x36\\x05\\xe0\\x4b\\x15\\x72\\\n\\x23\\xbe\\x39\\x12\\x97\\x50\\x0e\\xd8\\x37\\x02\\xbf\\x94\\xf0\\x7b\\x2a\\xa4\\\n\\xdf\\xfa\\xec\\x4c\\x9c\\x43\\x98\\x34\\x54\\xed\\x0a\\xf8\\xe6\\x36\\xf0\\x35\\\n\\x92\\x95\\xfc\\xe0\\x62\\xcc\\x82\\x0f\\x79\\xd6\\x2e\\x52\\xdd\\xb7\\xce\\xde\\\n\\x43\\xde\\x8d\\x39\\x2c\\x7c\\xb8\\xc2\\x7e\\x06\\xb2\\x2e\\xec\\xa3\\x82\\xde\\\n\\x01\\xe3\\x0c\\xfc\\x76\\xb2\\xfe\\xff\\xed\\x99\\x67\\x4e\\x4c\\x18\\xf8\\x2f\\\n\\x84\\x6f\\x36\\xec\\x45\\x14\\x13\\x85\\xec\\x5c\\x53\\x7a\\xac\\x0c\\x61\\x27\\\n\\xc9\\xda\\xfb\\x0c\\xb1\\x8f\\x03\\xba\\x09\\xd5\\x3d\\x6a\\xda\\xde\\x83\\x50\\\n\\x87\\x98\\xef\\xb2\\xe7\\xcd\\x7f\\x25\\x0a\\x99\\x94\\x2e\\x71\\xb1\\xf7\\xd8\\\n\\xb7\\x8e\\x7d\\xfe\\xce\\x86\\xcb\\xb6\\xd9\\x01\\xfd\\x3d\\x7c\\xb1\\xa2\\xff\\\n\\xe7\\xd6\\x85\\x31\\x88\\x95\\x55\\x22\\x6d\\xcc\\x8b\\xb3\\xd2\\x5a\\x5d\\x1f\\\n\\xa0\\x2e\\xd0\\x3f\\x41\\x87\\x7a\\x98\\x28\\xcb\\xb8\\x75\\xf9\\x2e\\x34\\xfd\\\n\\x0d\\x71\\x1e\\x24\\xb4\\x5d\\x65\\x2d\\x92\\x39\\xd7\\x84\\xc6\\x02\\xca\\x06\\\n\\xb2\\x0b\\xf4\\xf9\\xf0\\xb3\\xb8\\x8a\\xa2\\x23\\x14\\x5d\\x25\\xf4\\x1a\\x0f\\\n\\xf6\\xf4\\x5c\\xbf\\x53\\x09\\xcc\\xb3\\xc7\\x4c\\x18\\xd4\\xe1\\x4a\\xe6\\x5d\\\n\\xc4\\xe1\\x4c\\x4c\\x5c\\xde\\x62\\x57\\x79\\x2a\\x44\\x4e\\x8a\\x7b\\x62\\x9f\\\n\\xfe\\x7d\\x76\\x35\\xf7\\x54\\x98\\x10\\xc5\\xbd\\xcc\\x4a\\x71\\x2f\\x21\\xbe\\\n\\xa9\\x69\\x89\\x09\\x9b\\xb4\\xd8\\x55\\x71\\x4f\\xfd\\x85\\x28\\xd8\\xb0\\x92\\\n\\x29\\xa2\\xb5\\x49\\x54\\xdc\\xdb\\x26\\xa7\\xde\\x27\\xeb\\x78\\xcf\\x7d\\x57\\\n\\x29\\x4e\\x6e\\x5a\\x5c\\x1e\\xb8\\xbc\\x71\\xef\\xa5\\x24\\xf5\\x56\\x8e\\x3c\\\n\\x4a\\xd8\\xac\\x85\\xc8\\x25\\x24\\x35\\x9f\\x68\\x08\\xf6\\xa9\\x6f\\x50\\x48\\\n\\x8d\\x89\\x82\\x6b\\x6a\\x10\\x36\\x50\\x22\\xb1\\x95\\x27\\x13\\x1b\\x26\\x38\\\n\\x15\\x89\\x84\\x7e\\x41\\x62\\x93\\xf2\\xc7\\x94\\x58\\x45\\x29\\x41\\x69\\x0e\\\n\\xe9\\x28\\xc4\\x78\\x92\\x4c\\x87\\x94\\xda\\x22\\x24\\x1d\\x43\\xca\\x45\\x66\\\n\\x4b\\x97\\x01\\xaa\\x41\\xca\\x64\\x4b\\x84\\x28\\x99\\xd4\\xc5\\xbe\\x34\\xc9\\\n\\x99\\x67\\x22\\x96\\x5b\\x2a\\x2c\\x5b\\x75\\x28\\x1a\\x1b\\xe6\\x9e\\x2a\\xb2\\\n\\xe4\\xd4\\x7b\\x8a\\x5b\\x5b\\xe6\\x9e\\xba\\x51\\x94\\xa6\\x8d\\xd2\\xbd\\xcc\\\n\\x89\\xbd\\xf7\\x53\\xbe\\x77\\x65\\xef\\x4f\\xcb\\xa5\\xa9\\xf7\\x62\\xe5\\x7b\\\n\\x5f\\xf6\\x5e\\x62\\x1e\\xf7\\x6a\\xf8\\xe4\\xe6\\x45\\xe6\\xc4\\xde\\x2b\\xe7\\\n\\x57\\x5d\\xf9\\x70\\xcb\\x90\\x5b\\xb6\\xdc\\x32\\x57\\xaa\\x0b\\x6e\\x1d\\x71\\\n\\xeb\\x8e\\x5b\\xa7\\xdc\\xba\\x96\\x72\\xda\\x00\\xb7\\x6d\\x70\\xdb\\x8c\\x9c\\\n\\x6e\\x5d\\x92\\x14\\xbe\\xb8\\x6d\\x4c\\x4c\\xb7\\xbd\\x94\\xa8\\xb9\\x6d\\x92\\\n\\xdb\\x56\\xb9\\x6d\\x58\\xa9\\x6d\\x73\\xdb\\x3c\\x3a\\x44\\x36\\xa7\\xec\\x37\\\n\\x52\\x81\\x7a\\xe6\\x4e\\x68\\xe3\\x50\\x2b\\x66\\x9a\\xd5\\x5f\\xbd\\x47\\x7b\\\n\\xc8\\x05\\xe0\\x3f\\x8b\\x95\\xa7\\xe1\\x3a\\x97\\x98\\x87\\xbc\\xc0\\xd4\\x80\\\n\\x4d\\x26\\xe4\\x27\\xc9\\x3c\\x74\\x89\\x58\\xca\\x08\\x7a\\x12\\x6e\\x99\\xc8\\\n\\x54\\x7e\\x0b\\xe5\\x97\\x2d\\xb3\\xe2\\x11\\x51\\x94\\x05\\xfc\\x26\\xa3\\xbd\\\n\\xfc\\xc5\\x79\\xf6\\xd8\\x74\\xac\\x99\\x05\\xe0\\x53\\x35\\x99\\xb9\\xda\\x33\\\n\\xcf\\x70\\xae\\x2c\\xbb\\xbe\\x4c\\x32\\x11\\x5f\\xe6\\x02\\xf6\\xdc\\x2c\\x56\\\n\\xef\\x8b\\xbd\\xbe\\x93\\x38\\xcf\\x62\\xb5\\x8c\\x07\\xb2\\x54\\x5b\\x92\\xb9\\\n\\x64\\xaa\\xda\\x00\\xfa\\x58\\x6e\\x7f\\xf3\\x43\\xe5\\xf7\\x4c\\x0d\\xef\\x42\\\n\\xe6\\x07\\xdb\\xb5\\x63\\x84\\x96\\x07\\x42\\xae\\x01\\x1f\\x54\\xc7\\x09\\x2d\\\n\\xa3\\x36\\xc4\\x59\\x96\\xc6\\x06\\xec\\xb4\\x71\\x36\\x03\\xdf\\xf8\\xf5\\x2f\\\n\\x51\\xef\\x5f\\x0e\\x3e\\x2d\\xa2\\x09\\xff\\xda\\x96\\x25\\xe8\\xac\\x2a\\x18\\\n\\x90\\x77\\x63\\x01\\x32\\x45\\xb4\\x23\\xd8\\xfa\\x7f\\x63\\xae\\xf8\\xad\\xa9\\\n\\x6c\\x54\\xf7\\x69\\x70\\xf5\\x2e\\x5c\\x82\\xcc\\x3f\\x2b\\x94\\x91\\xb6\\xc0\\\n\\xba\\x1b\\x6b\\x72\\xb6\\x8d\\x40\\x5e\\x88\\x7e\\xab\\x04\\xf3\\xf7\\x12\\xcc\\\n\\xef\\x4f\\x9c\\x30\\xff\\x91\\xac\\xf1\\xad\\x69\\x03\\xe8\\xb5\\xb8\\x65\\xa3\\\n\\x4e\\xb7\\x5b\\x9b\\x28\\x7c\\xdc\\x82\\xfa\\x1a\\x85\\x3b\\xd3\\x03\\xb2\\x1c\\\n\\x36\\xcf\\xd3\\xd2\\x09\\xeb\\xcd\\x09\\x7b\\xd4\\xc0\\x7c\\x99\\x03\\xa0\\xb3\\\n\\x86\\xed\\x27\\x9b\\xe7\\xf4\\x7c\\x42\\x43\\x3f\\xc2\\x9e\\xa1\\xf2\\xce\\xb0\\\n\\xac\\x99\\x05\\xa0\\x77\\x63\\xbf\\x19\\xcc\\x1f\\xd3\\xf3\\x9d\\x8a\\xbf\\xb3\\\n\\x7b\\x8d\\x7e\\x86\\x79\\x26\\xe6\\x7e\\x5c\\x59\\x77\\x7a\\xf6\\x62\\x68\\x5f\\\n\\x6c\\xfb\\x79\\x6b\\x58\\xd6\\xcc\\x06\\x61\\x44\\x51\\x3e\\x33\\xd2\\x09\\xeb\\\n\\xc3\\x09\\x7b\\xc4\\xc0\\x7c\\x99\\x0b\\x60\\x07\\xc6\\xe6\\x19\\x76\\x61\\x0d\\\n\\xd4\\x84\\x83\\x7d\\x16\\xd7\\x8f\\x7a\\x6f\\xa3\\x70\\x67\\x7a\\x60\\xfe\\x03\\\n\\xb9\\x10\\x3b\\xff\\xc3\\x9a\\x42\\x44\\x68\\x3d\\x2c\\xd6\\x5f\\xf8\\xe6\\xd0\\\n\\xae\\xbe\\x70\\xc2\\x5c\\x25\\x3f\\x97\\x7e\\x08\\x36\\x9e\\xaa\\xfb\\x4a\\xf8\\\n\\xd6\\x17\\xac\\x1e\\x2d\\x2b\\x9c\\x2b\\xa7\\x2b\\xd0\\x5e\\x58\\x1b\\x29\\x75\\\n\\xe5\\x83\\x76\\xf6\\x33\\x96\\x0d\\x0b\\xe8\\xb1\\x71\\xf6\\x09\\xf4\\xac\\x68\\\n\\x27\\x5f\\x98\\x2b\\xfa\\x70\\xf4\\x53\\x19\\xf9\\xa6\\x30\\x56\\x62\\x4d\\x92\\\n\\x9d\\xb9\\x66\\x05\\xb9\\x89\\xae\\xe5\\x81\\xf2\\x85\\x6f\\x2d\\x94\\x31\\xec\\\n\\x35\\xe0\\x5b\\x02\\xe7\\xb5\\x3e\\x24\\xb4\\x8d\\x0d\\xd6\\x70\\xf1\\xcc\\xf5\\\n\\x0d\\xf3\\xfc\\x1c\\x13\\x0e\\x72\\x61\\x9c\\x8d\\x57\\x96\\x64\\x2d\\x7b\\x03\\\n\\xd8\\xc6\\x0d\\x20\\xb4\\x5d\\x17\\x77\\x2e\\x9e\\x5e\\x3f\\xa6\\x29\\x1c\\xda\\\n\\x2c\\xca\\xac\\x1f\\xc9\\x9c\\xb6\\x77\\xf8\\x3e\\xb0\\x0f\\x07\\xdf\\x9d\\xaa\\\n\\x5d\\x90\\xa6\\x7c\\xc3\\xee\\x4d\\x46\\x94\\xf7\\x59\\xa4\\x57\\x8e\\x08\\x8f\\\n\\xef\\xbd\\x23\\x31\\x7f\\x99\\x01\\x74\\x47\\x90\\xf5\\x4b\\x88\\xfa\\x3c\\xb1\\\n\\x76\\x22\\xf8\\xbe\\x20\\x8b\\xc4\\x39\\x67\\xe8\\xfb\\x7f\\x65\\xde\\xcf\\xc1\\\n\\x5c\\xf1\\xbb\\x0c\\xf3\\x77\\x84\\x83\\x5e\\x05\\xe5\\xad\\xda\\x06\\xb9\\x65\\\n\\x08\\xd9\\xf0\\x58\\x62\\xdc\\xb3\\xce\\xb5\\x01\\xfa\\x03\\xec\\xa9\\x63\\xed\\\n\\xa0\\xb8\\x75\\x8e\\xb6\\x80\\xfd\\x1f\\x28\\xb7\\x4a\\x24\\xe3\\xb6\\xe3\\x78\\\n\\x1f\\x7b\\x25\\xe1\\x43\\xe2\\x0c\\xe1\\xb7\\xcf\\x85\\x3d\\xda\\x20\\x62\\x1e\\\n\\xfd\\x14\\xce\\x55\\xc4\\xb8\\xae\\x2a\\x4b\\x84\\xfd\\x16\\xe6\\x8d\\x25\\x0d\\\n\\x9c\\x3e\\x64\\x06\\x22\\x92\\xf6\\x3c\\x77\\xf0\\x73\\x81\\xd0\\xf6\\xb5\\xa6\\\n\\x00\\xea\\x11\\x72\\x43\\xd5\\xfe\\xe5\\x11\\xa1\\xf7\\xea\\x1b\\xfb\\xfc\\x5b\\\n\\xa4\\x07\\xfb\\xde\\x58\\x92\\xb6\\x7f\\x9a\\x44\\x8c\\xbb\\xe7\\x01\\x7a\\xb3\\\n\\x43\\x2a\\x7c\\x7c\\x62\\xf8\\x30\\xb5\\xff\\x26\\xf4\\x5f\\xa8\\x37\\xae\\x2c\\\n\\x13\\x74\\x80\\x08\\x7b\\x66\\x9a\\x3a\\x14\\xa7\\x28\\x46\\x25\\xed\\x53\\xc4\\\n\\xfc\\xce\\x53\\xc3\\xba\\x50\\x4c\\x94\\xf9\\x84\\x5c\\xbc\\xa8\\x01\\xd3\\x74\\\n\\x26\\xf4\\xf7\\xc3\\xed\\x7b\\xa1\\xf7\\x30\\x87\\x7e\\x90\\x0f\\xe0\\x0b\\xfa\\\n\\x3c\\x6e\\x1f\\x7e\\x8f\\x28\\x74\\x0b\\x42\\xc2\\x91\\xa2\\xbb\\x9c\\x74\\xb0\\\n\\x8e\\xef\\x6c\\x80\\x74\\x0c\\x01\\xcc\\xbb\\xb9\\xfe\\xa0\\xef\\x10\\x61\\xe7\\\n\\x95\\xe8\\x53\\xce\\x11\\x65\\x3d\\x46\\x33\\x01\\xe3\\x37\\x06\\x70\\x66\\x02\\\n\\x77\\x0f\\x27\\xe6\\x06\\x42\\x8d\\x21\\x4b\\x39\\xf1\\x62\\xbc\\x72\\x17\\x28\\\n\\x5e\\x63\\xa3\\x1d\\x51\\xd6\\xa7\\x2f\\x16\\x20\\x4e\\x94\\x05\\xf7\\x5c\\xf7\\\n\\x11\\x02\\xc4\\x69\\x4a\\x60\\xbf\\x2f\\x77\\x3d\\xd3\\x32\\x03\\x71\\x41\\x1f\\\n\\x81\\x35\\x34\\x3b\\xe7\\xda\\x9a\\x61\\xee\\xcc\\x03\\xdc\\x73\\xd5\\xd0\\x5f\\\n\\xeb\\xeb\\x4f\\x8f\\xf5\\x79\\xc6\\xae\\x9b\\x0c\\x75\\xf6\\xb3\\xb1\\x81\\xbd\\\n\\x4c\\xdc\\x75\\xdc\\x78\\x3d\\xe2\\xc0\\xbe\\x4a\\xee\\xbe\\xa7\\x81\\x82\\x71\\\n\\x67\\x1e\\xc0\\x7a\\x91\\x5b\\xf7\\xba\\xae\\x69\\x87\\x71\\xde\\xc7\\x78\\x98\\\n\\xd5\\xe4\\xed\\x18\\xbb\\x60\\xb7\\xc2\\xe6\\x71\\x90\\x8e\\xef\\x73\\x6d\\x5c\\\n\\x47\\x0a\\xcb\\x9a\\xd9\\x00\\xb2\\x10\\x36\\x8f\\x67\\x75\\x78\\x0f\\x6b\\x6e\\\n\\x76\\xcc\\x82\\x8c\\xd9\\xdc\\xf7\\x84\\xeb\\x0b\\xf4\\x43\\x5c\\x7d\\x78\\x31\\\n\\x2d\\xdf\\x1b\\x44\\x14\\xe5\\x7a\\xd8\\x30\\xac\\x99\\x0d\\x60\\x1b\\xc8\\xe6\\\n\\xb5\\x9f\\x96\\xef\\xac\\xe1\\xbc\\x33\\xc1\\x40\\x7c\\x99\\x0b\\xb8\\x36\\x39\\\n\\xab\\xb4\\x7c\\x87\\x7b\\xf6\\x46\\x66\\x5b\\x47\\xe8\\x0a\\xec\\xbf\\xe4\\xae\\\n\\x39\\xb4\\x01\\x57\\x4e\\x6a\\x88\\xb5\\xae\\x39\\xc1\\x99\\x28\\xf2\\xaa\\xad\\\n\\x6d\\x3c\\x64\\x6e\\x98\\x5b\\x62\\xad\\x95\\xc7\\x30\\x6c\\x99\\x0d\\x20\\x33\\\n\\xc3\\x9a\\x0c\\xf9\\xfd\\xac\\xe5\\x3b\\x6c\\x79\\x62\\xbd\\x6b\\x6a\\x79\\xa0\\\n\\xa1\\x81\\x79\\x30\\x2b\\x23\\x4e\\xd4\\xf2\\x1d\\x76\\xcf\\xca\\xcf\\xd4\\x7e\\\n\\x90\\x5f\\x6d\\xdb\\xcf\\x0b\\xf2\\x73\\xf6\\x3f\\x4f\\xb4\\x7c\\x87\\x3b\\x7e\\\n\\x35\\x35\\x08\\x57\\xe6\\x03\\xee\\xf8\\xa5\\xed\\x1c\\x7a\\x2d\\xe7\\x9d\\xac\\\n\\xee\\xcb\\x9d\\xbb\\x37\\x47\\xdb\\xf9\\xcf\\x60\\xce\\x3b\\x61\\x06\\xe2\\xcb\\\n\\x5c\\x00\\x3b\\x6d\\x36\\xaf\\x03\\xb4\\x7c\\xc7\\x89\\xf3\\x0e\\xfa\\x2c\\x07\\\n\\xc3\\xb0\\x66\\x72\\x60\\x5d\\xc9\\xca\\xa4\\xb1\\xfe\\x2a\\xae\\xc3\\xbb\\x5c\\\n\\x7f\\x5a\\xc3\\x85\\x67\\xcd\\x2c\\x30\\x8a\\x28\\xf2\\xf8\\xaf\\x8e\\xef\\x72\\\n\\xcf\\x0a\\xb9\\x45\\xb2\\x9e\\xfc\\x07\\xb6\\x30\\x90\\xad\\xb2\\x79\\xd4\\xf5\\\n\\xdc\\x18\\xcc\\x7b\\xb8\\x67\\xd9\\x68\\xbb\\xb6\\xcd\\x2c\\xe0\\xca\\x28\\xb0\\\n\\x77\\x2b\\xb7\\x1e\\x71\\x4c\\xe3\\xc4\\x81\\x35\\x99\\xd0\\x67\\x0e\\x98\\x0a\\\n\\x90\\xa3\\x73\\xed\\x71\\x27\\xe9\\x19\\x0f\\xf6\\x36\\x73\\xed\\x21\\xb2\\xca\\\n\\x19\\x82\\x5b\\x88\\x22\\x4f\\xd8\\x8f\\x9b\\xde\\xbe\\x12\\x4d\\x80\\x4e\\x8d\\\n\\xab\\xff\\xca\\xec\\xe7\\x3b\\x61\\xac\\x61\\xf3\\x82\\x7c\\x09\\xa1\\xeb\\x5c\\\n\\xc5\\x89\\x13\\x6b\\xb3\\x8c\\xe8\\xd4\\x4c\\x09\\x94\\x05\\xd7\\x5e\\x69\\xa9\\\n\\x40\\xf1\\xa2\\xfd\\x5d\\xe0\\xc4\\x0b\\x5b\\x1f\\x63\\xf9\\xc2\\x17\\x0a\\xf0\\\n\\x47\\xc9\\xdd\\x1f\\x02\\x7b\\x02\\x21\\x65\\x13\\x38\\x47\\xea\\x21\\x51\\xd8\\\n\\x6f\\x20\\xad\\xf6\\x02\\xc6\\x6f\\x48\\xc0\\xb6\\x95\\xdd\\x1f\\x02\\xfe\\x31\\\n\\xae\\x1b\\xe2\\x9c\\x09\\xd8\\x99\\x3e\\x26\\xca\\xf6\\x3f\\xb0\\xd5\\x32\\x57\\\n\\x5b\\x77\\xd8\\xd4\\x61\\xcf\\x15\\xd7\\xfe\\x07\\xf6\\x4b\\xce\\x06\\x4c\\x13\\\n\\x6b\\x8f\\x5b\\x44\\xd9\\x16\\x12\\xfe\\x02\\xcc\\x4d\\x0e\\x02\\x1d\\x15\\xce\\\n\\x45\\xe2\\xf2\\x79\\x83\\x18\\x87\\x4f\\xcc\\x83\\x50\\x26\\x5c\\xdb\\x35\\xb8\\\n\\x28\\x82\\x0d\\xaf\\xb1\\xed\\x32\\x55\\x81\\x3e\\x05\\xfa\\x74\\xee\\x7e\\x73\\\n\\x56\\x4f\\x65\\xcc\\x75\\x24\\x6c\\xd7\\x60\\x5b\\xa7\\xea\\x9f\\x02\\xdf\\x76\\\n\\x5f\\x62\\x7c\\x5b\\x76\\xd4\\x4b\\x7f\\xa2\\xac\\x33\\x66\\x65\\xa0\\xd3\\x88\\\n\\xe9\\x6c\\x00\\xb1\\x1f\\x9e\\xf5\\x85\\xce\\x25\\x09\\xa1\\x75\\x4b\\xda\\xea\\\n\\x24\\xf5\\x05\\xd6\\xdc\\x38\\xe3\\xea\\x31\\x0f\\x0f\\xf0\\x2b\\x6f\\x0e\\xbe\\\n\\x62\\xd1\\x56\\x70\\x3e\\x3a\\xd7\\x66\\x84\\xed\\xc3\\xd1\\xbe\\x4e\\x32\\x7f\\\n\\xc7\\xde\\x9b\\x8c\\xf6\\xe5\\x78\\x1f\\x7b\\x80\\x60\\xe7\\x74\\x8a\\x28\\xda\\\n\\x2f\\xd7\\x7e\\x1e\\xf2\\x61\\xd8\\x71\\x99\\xdb\\x9a\\x1a\\xb2\\x6e\\xac\\x65\\\n\\x60\\x3b\\xaf\\x6e\\xff\\x05\\x6c\\xff\\xe1\\xc3\\x7e\\x06\\xa1\\xed\\x26\\x71\\\n\\xce\\x13\\xfa\\x52\\xf4\\x0d\\xb0\\x31\\xc9\\xce\\x5c\\x1d\\x98\\xe7\\xf8\\x3b\\\n\\xf6\\x43\\xe1\\x5b\\xde\\xcb\\xbc\\xcf\\x17\\xaf\\x9c\\xf9\\x1b\\xf4\\xbd\\xe6\\\n\\xae\\x53\\x40\\x1f\\x89\\x3c\\x41\\xb7\\xad\\xda\\x3f\\xa9\\xe6\\x89\\xbd\\x87\\\n\\x0f\\x4e\\xcc\\xcd\\xbf\\x32\\xd7\\x04\\x35\\xe1\\x54\\x09\\xf1\\x43\\x06\\x88\\\n\\xb3\\x6d\\x4c\\x3d\\x36\\xe8\\x03\\xf8\\x79\\x87\\x2d\\x12\\xce\\x5d\\x83\\xaf\\\n\\x20\\x75\\xe5\\xa3\\x89\\x54\\xc3\\x41\\xee\\x82\\xb6\\x34\\x84\\x89\\x3f\\xab\\\n\\x00\\x63\\x08\\xf6\\xde\\x60\\x7c\\x9b\\x47\\xe8\\x3c\\x62\\x6f\\x0b\\xf4\\x2a\\\n\\x18\\x8f\\xd9\\x79\\x5c\\x22\\xf3\\xfb\\x09\\xf3\\xf7\\x3d\\x4c\\x78\\xec\\x73\\\n\\xaa\\x44\\x0c\\x38\\x16\\xb1\\x1e\\x1f\\x53\\x1c\\x2d\\xfa\\xa6\\x7f\\x9f\\x43\\\n\\xe9\\x79\\x94\\xe2\\x7e\\x06\\x51\\xdc\\xfb\\x30\\x6f\\x20\\x7e\\x19\\xe3\\xb1\\\n\\x91\\xba\\x97\\x4b\\x1d\\x9c\\x14\\xf7\\x3e\\x9c\\xfb\\x64\\xc5\\xbd\\x44\\x8b\\\n\\x7b\\x6e\\x78\\xa5\\x78\\x88\\xe2\\x9e\\x9b\\x6e\\xa2\\x82\\x1f\\xb8\\xa6\\x4c\\\n\\x74\\x62\\xee\\xe5\\x71\\xc9\\x29\\x0e\\x25\\x53\\xee\\xe1\\x52\\xd2\\x96\\xbd\\\n\\x17\\xa5\\x5c\\x52\\xfe\\x43\\xf5\\x50\\x81\\x52\\xee\\x65\\x54\\x44\\xc4\\x9e\\\n\\xbe\\x87\\x73\\x4b\\x8a\\x52\\xee\\xc5\\x54\\x8c\\x89\\x56\\xf4\\xbd\\x08\\x69\\\n\\xd1\\x13\\x50\\xda\\xb7\\xa6\\xd8\\x37\\x25\\xdd\\x14\\x87\\x96\\x12\\xd7\\x14\\\n\\x7e\\x52\\x1c\\x5a\\xca\\x9c\\x52\\xf8\\x4c\\x61\\x39\\xd1\\x3e\\xe5\\x3e\\x85\\\n\\xe5\\xe4\\x94\\x7b\\xc6\\x37\\xa8\\x6d\\x4a\\xde\\xe9\\xa2\\x9d\\xa5\\x7a\\x7f\\\n\\x9a\\xbe\\x3f\\xad\\x7a\\x1f\\x49\\xdf\\xa7\\x2c\\x6c\\x66\\xd1\\xf7\\x12\\xdc\\\n\\xfb\\xd3\\xf7\\x52\\x53\\xde\\x73\\xf9\\xe1\\xf2\\xa9\\x2e\\x2f\\xea\\xf2\\xce\\\n\\x2d\\x1f\\x6e\\xb9\\x71\\xcb\\x93\\x5b\\xce\\xdc\\xf2\\xe7\\xd6\\x8b\\x52\\x7d\\\n\\x71\\xeb\\x91\\x5b\\xbf\\xdc\\x7a\\xe7\\xb6\\x07\\x6e\\x3b\\x51\\x6a\\x3f\\xa9\\\n\\xed\\x0a\\x8e\\xaf\\x9a\\x12\\x7a\\x43\\x19\\xeb\\x87\\x34\\xe5\\xf4\\x0b\\x7e\\\n\\xe0\\xcc\\x04\\xec\\x0b\\xfa\\xca\\x10\\xf6\\x45\\x56\\x52\\x1b\\x3a\\x6b\\x01\\\n\\x45\\x85\\xf3\\xa3\\x54\\xfd\\x87\\xe1\\x3c\\xa6\\x9f\\xa1\\x0c\\x30\\x9e\\xb2\\\n\\x79\\x86\\x2e\\xeb\\x02\\xe7\\xf7\\x01\\x13\\xf2\\x65\\x2c\\x60\\x0f\\x0d\\xf2\\\n\\x8a\\x35\\x86\\x15\\x43\\x17\\x99\\x67\\x5f\\x4c\\xc8\\x97\\xb1\\x80\\xf1\\x1f\\\n\\x79\\x85\\xcf\\x41\\x6b\\x86\\x2e\\x13\\xdd\\xec\\x9c\\x32\\x33\\x30\\xe7\\x61\\\n\\xdb\\x3b\\xca\\xe0\\x2a\\xe7\\xf7\\x7e\\x0d\\xef\\x41\\x67\\x0c\\xdb\\x76\\xd8\\\n\\x58\\xc0\\x27\\xc1\\x22\\x42\\xfb\\xc0\\x37\\xb7\\xb5\\x58\\x7a\\xc0\\x5a\\x15\\\n\\xf3\\x69\\xd5\\xfe\\x0f\\x67\\xe7\\x94\\x57\\xf3\\x0e\\xce\\xab\\x8b\\xe7\\x79\\\n\\x07\\x04\\x1b\\xff\\xfa\\x86\\x65\\x59\\x70\\xa0\\x0c\\xd0\\x0e\\xa4\\x0c\\xe1\\\n\\xbe\\x9c\\x9a\\xb0\\xa8\\x67\\xbe\\x7c\\x73\\x09\\xb6\\xdc\\x99\\xe9\\x1c\\x3c\\\n\\x6d\\x01\\x5f\\x13\\x6c\\x1e\\xd1\\x37\\x40\\xbe\\x07\\xf9\\x38\\xfa\\xcc\\xca\\\n\\x84\\xd6\\xd7\\xb1\\x7f\\xc7\\xda\\xaa\\x80\\x69\\xd8\\x34\\x18\\x20\\xd7\\x45\\\n\\xde\\xb0\\xe6\\x6e\\xa2\\x26\\x0c\\xb7\\x7d\\xf8\\x19\\x89\\x2f\\x63\\x00\\xdf\\\n\\x03\\x9b\\xaf\\x4d\\x1a\\xc2\\x61\\x8f\\x19\\x7b\\x6e\\xf1\\x7f\\x46\\xe0\\xcb\\\n\\x58\\x68\\x4b\\x14\\xf9\\x4f\\xcf\\x7e\\xea\\x20\\x13\\x4e\\x66\\x68\\xa6\\x8c\\\n\\x08\\x5d\\xf2\\x1f\\x46\\xb2\\x5e\\xfe\\xe1\\x03\\x86\\xcd\\xff\\x16\\x0d\\xe1\\\n\\x20\\xb3\\x64\\xcf\\x9d\\xbb\\x66\\x04\\xbe\\x8c\\x89\\xeb\\x84\\xce\\x17\\xe4\\\n\\x46\\x2d\\xd4\\x84\\x59\\x4a\\x14\\xe5\\x24\\x32\\x0e\\x5b\\x46\\x43\\x07\\xa2\\\n\\xc8\\x1b\\xd6\\xc9\\xd0\\x57\\x40\\x6f\\x01\\x71\\x40\\x0d\\xa2\\xbc\\xdf\\x16\\\n\\xb6\\x4e\\x59\\x71\\xbf\\xda\\x7c\\x92\\xfe\\xfc\\x07\\x65\\xd3\\xd4\\x44\\xfc\\\n\\x19\\x03\\xb0\\x87\\x4c\\x11\\x2b\\xf1\\x10\\xe6\\x08\\xb5\\x4d\\xc7\\x9a\\xd1\\\n\\x00\\xbd\\x0c\\xf6\\x3a\\xaf\\xa0\\x68\\x33\\x45\\x81\\x84\\xb6\\xbb\\xd1\\xc5\\\n\\xff\\x0e\\xe6\\x0a\\xb0\\x85\\xa8\\xcf\\xbc\\xdb\\x81\\x21\\x77\\xe6\\x59\\x69\\\n\\xa2\\xff\\x9e\\x75\\x73\\x03\\x74\\x2e\\x4d\\x29\\x9a\\x4e\\x68\\xb9\\x4a\\x2c\\\n\\xa1\\xed\\xb6\\xd2\\xfb\\x96\\x92\\x98\\xb0\\x38\\xa7\\x14\\x36\\x18\\x10\\x25\\\n\\x9a\\xbb\\xff\\x35\\x16\\xc8\\xf3\\x1f\\x84\\x5e\\x1f\\xb3\\x72\\x06\\x21\\x08\\\n\\x71\\xc1\\x6f\\x1f\\xda\\x8a\\x39\\x96\\x05\\xd6\\x3d\\x98\\xfb\\xc3\\xb6\\x93\\\n\\x8f\\x7f\\xe8\\xe2\\x30\\x96\\xa2\\x5c\\xa0\\x6f\\x81\\xbd\\x06\\xbe\\xa5\\x1e\\\n\\x0c\\x0d\\x64\\x9e\\xe1\\x6f\\x3b\\x99\\xb0\\x3f\\xd4\\xc4\\x05\\x1d\\x30\\x44\\\n\\xca\\xe6\\xe0\\x93\\x01\\xfa\\x56\\xf8\\xc7\\x53\\x95\\x0d\\xb0\\x3a\\x7c\\x11\\\n\\xa1\\xed\\xe5\\xf4\\xf9\\xa6\\x61\\x7b\\x87\\x35\\x17\\xca\\x95\\x3d\\xe7\\x40\\\n\\xb5\\x4d\\xc0\\x47\\x91\\x3e\\xf6\\xc5\\x42\\xa0\\x2b\\x49\\xeb\\xbb\\x0d\\x7e\\\n\\x21\\x70\\x9e\\x97\\x21\\x7c\\xc5\\x42\\x36\\x13\\x40\\xe8\\x75\\x36\\x37\\x4d\\\n\\xd8\\x47\\x1b\\xd3\\x5f\\x12\\xea\\x7c\\xab\\x0a\\x0f\\x68\\xf7\\xb0\\x5b\\xc8\\\n\\x88\\xbd\\xae\\xb6\\x40\\x1a\\x38\\x83\\xf8\\x95\\x0a\\x0f\\x9b\\x88\\xe1\\xf5\\\n\\xff\\x58\\x13\\xdf\\x21\\xca\\xdf\\x35\\xea\\xc4\\x14\\x6d\\x10\\x79\\xc5\\xdc\\\n\\x8c\\x3d\\xaf\\x13\\x04\\xfb\\xb9\\x32\\x06\\x4a\\x0f\\xf6\\x42\\xec\\x3a\\x9f\\\n\\x95\\xfb\\xd5\\x34\\x50\\x5a\\xba\\x00\\x73\\x2f\\xf8\\x0f\\xe3\\xca\\xa1\\x84\\\n\\xb6\\x1d\\x42\\x7c\\x1f\\x39\\x69\\xec\\x23\\xa6\\xeb\\x77\\xf8\\x80\\xb6\\x80\\\n\\x39\\x06\\x57\\x96\\x2b\\x54\\xdd\\x60\\x4e\\xf6\\x86\\x13\\x37\\xe6\\x7f\\xc6\\\n\\xf4\\xb9\\xa8\\x2d\\xc0\\x13\\xfc\\x3f\\xb0\\x7c\\xa2\\x7f\\xc8\\xa8\\xef\\x41\\\n\\xf4\\x35\\xec\\x1a\\x18\\xa4\\xed\\x3e\\x43\\x53\\x01\\x72\\x59\\xe8\\x27\\x58\\\n\\x7e\\x21\\x8f\\xc8\\xc8\\x7c\\x9a\\xbb\\xb6\\x87\\xdf\\x4b\\x73\\xac\\x77\\x55\\\n\\xc0\\x86\\x05\\x36\\xb2\\x2c\\xdf\\xfa\\xfa\\x52\\xc3\\x7a\\x84\\x9d\\xaf\\xc3\\\n\\x5e\\x26\\x33\\xed\\x41\\xc2\\xdc\\x10\\x36\\x71\\xac\\xec\\x46\\xdd\\xd9\\x47\\\n\\x9a\\x70\\x8e\\x28\\xca\\x30\\x33\\xfa\\xd5\\xe3\\xca\\x2f\\x23\\x75\\x7c\\xb7\\\n\\x25\\xe7\\xdd\\xcc\\xac\\x13\\xc7\\x37\\xcb\\xe6\\x43\\x17\\x7f\\x2f\\xa1\\x44\\\n\\x31\\x8f\\xaf\\x61\\x00\\xbe\\x8c\\x05\\xb4\\x7b\\x36\\xff\\x7b\\xb4\\x7c\\x07\\\n\\x32\\x3c\\x76\\xed\\x75\\xce\\x40\\x7c\\x19\\x13\\xf0\\x37\\xc6\\xca\\xe6\\xb5\\\n\\xb1\\xc3\\xef\\x49\\x14\\x65\\x36\\xca\\x80\\x7c\\x19\\x0b\\xf0\\x45\\xc6\\xe6\\\n\\xa7\\xbb\\x16\\xe1\\x57\\x71\\xc2\\x97\\x36\\x20\\x5f\\xc6\\x02\\x57\\x8f\\xb7\\\n\\x4c\\x8b\\xf0\\xff\\x12\\xc5\\x3c\\x3a\\xab\\x80\\xd5\\xcf\\x68\\x33\\x0e\\xb0\\\n\\x6b\\xfa\\xac\\xf0\\xed\\xb3\\x60\\x6d\\xbc\\x9e\\x6a\\x11\\xf6\\x3b\\x13\\x36\\\n\\xd4\\xa0\\x1c\\x19\\x17\\xec\\xda\\xe8\\xab\\x16\\x61\\xd9\\x6f\\x65\\x87\\x41\\\n\\x39\\x32\\x2e\\xb0\\x5e\\x45\\x9e\\x12\\xb4\\x08\\xcb\\xee\\x87\\x3c\\x64\\x50\\\n\\x8e\\x8c\\x0b\\x9c\\x19\\xc7\\xca\\x0c\\xd3\\xc3\\x23\\x26\\x6c\\xb4\\x41\\x39\\\n\\x32\\x2e\\xe0\\x97\\x1f\\x79\\xba\\xaf\\x45\\x58\\x76\\xed\\x84\\x6f\\x25\\xb3\\\n\\xd9\\xb6\\xf1\\x01\\x3a\\x09\\xd6\\x47\\xbb\\x36\\x3e\\x33\\xe7\\x12\\x45\\x1f\\\n\\x50\\xd7\\x80\\x7c\\x19\\x0b\\x0d\\x89\\x22\\x3f\\xb3\\xb4\\x08\\xef\\xc6\\x09\\\n\\x3f\\xc7\\x80\\x7c\\x19\\x0b\\x90\\xcf\\xea\\xb2\\x06\\x82\\x7e\\x89\\x95\\x73\\\n\\x62\\xcb\\x80\\xb9\\x9e\\xd1\\xa0\\x0d\\xf0\\xfd\\xb2\\x72\\x80\\x37\\x44\\xfb\\\n\\xef\\x39\\x88\\x28\\xca\\xcc\\xd3\\x30\\xac\\x19\\x05\\x38\\x03\\x9a\\xcd\\xc7\\\n\\x02\\x1d\\xde\\xc3\\xbc\\x9f\\x95\\xab\\x43\\xce\\x6d\\x8e\\x3a\\xc7\\xf4\\xc0\\\n\\xfa\\xa9\\x66\\xf5\\x14\\xce\\x3a\\xbe\\xcf\\x95\\x23\\xa6\\x77\\x3e\\xb4\\x39\\\n\\x02\\xfb\\x4c\\x33\\x22\\xb7\\x85\\x9d\\x2b\\xbb\\x6e\\xc0\\x9c\\x38\\x33\\xd9\\\n\\x78\\x60\\xdc\\x62\\x65\\x18\\xe8\\xcb\\xf4\\x3d\\x93\\xa4\\x0f\\x51\\x94\\x21\\\n\\x64\\xa0\\x45\\x04\\xe1\\xce\\xb0\\xc0\\xbe\\x75\\xb6\\xcf\\x03\\xf5\\xc8\\x60\\\n\\x7c\\xeb\\x39\\x71\\xc1\\xbe\\xd5\\x1c\\xf4\\xee\\xea\\x80\\xb3\\x74\\x58\\x9b\\\n\\x65\\x50\\xb0\\x00\\x71\\xc2\\xd6\\xed\\x34\\x27\\x4e\\xcc\\x25\\x75\\xf1\\x97\\\n\\x67\\x2c\\xc0\\xff\\xc6\\x4d\\xa2\\xe0\\x13\\x7b\\xe8\\x85\\xda\\xf7\\x8c\\xfd\\\n\\xed\\xec\\x1e\\x21\\x56\\xe7\\xae\\xee\\x3c\\x66\\x53\\x00\\x67\\x15\\x72\\x6d\\\n\\x4f\\x20\\xbb\\x10\\x5a\\x17\\x8e\\xf8\\x4e\\x71\\xd2\\x40\\xff\\x82\\x3e\\xd6\\\n\\x94\\x63\\x23\\xd2\\xf6\\x23\\xca\\xb6\\x32\\xd8\\x5b\\x6f\\x28\\x3b\\x00\\xa4\\\n\\xb7\\x82\\x93\\x16\\xfb\\x3d\\x98\\x62\\xef\\x47\\x2b\\xa2\\xdc\\xde\\x59\\xbf\\\n\\x57\\xc6\\x58\\xb3\\xc1\\xa7\\x00\\xd7\\x16\\x00\\x14\\x4e\\x8c\\x53\\x0e\\xc8\\\n\\x77\\x84\\x4a\\xda\\x90\\x55\\x76\\x31\\x42\\xda\\x5c\\x60\\x7e\\x00\\x9b\\x13\\\n\\x55\\xbb\\x24\\xd8\\x60\\x4c\\x24\\xb4\\x3f\\x23\\xa1\\xe0\\x4c\\x68\\xff\\x1a\\\n\\xb7\\x55\\xd2\\x42\\xda\\xff\\x10\\xba\\xdf\\x37\\x15\\x30\\x2f\\x62\\x7d\\xcd\\\n\\xaa\\xf2\\x86\\xf1\\x72\\x21\\xa1\\xeb\\x06\\xe7\\xee\\x69\\xa3\\x3f\\x46\\x98\\\n\\xd2\\xcc\\x3b\\x78\\xf7\\xba\\x9a\\xb8\\xb1\\x96\\x37\\x07\\xfb\\x13\\x16\\x38\\\n\\x4f\\x14\\x73\\x05\\x75\\xfb\\xe4\\x40\\x90\\x43\\xc0\\x56\\x05\\xe3\\x29\\x64\\\n\\x92\\x3b\\x19\\x3a\\xc0\\x3c\\xbb\\x4b\\x14\\xb2\\x0a\\x3e\\x82\\xfc\\x0a\\xf3\\\n\\x72\\x53\\x9d\\x0d\\xaa\\x0d\\x60\\x17\\x83\\x35\\x23\\xec\\x35\\xf9\\xf6\\x19\\\n\\xea\\x4a\\xe8\\x67\\xb6\\x31\\x71\\xe6\\x32\\x62\\x3e\\x84\\x00\\xbb\\x4f\\x0e\\\n\\xf6\\x9d\\xd8\\x27\\x06\\x99\\x2a\\xc6\\x0b\\xd8\\xa6\\x70\\xeb\\xf9\\x1b\\xf3\\\n\\x0c\\x6d\\x3d\\x8c\\x09\\x8b\\x3d\\x37\\xbf\\x13\\x81\\x7d\\xc4\\xf9\\xd1\\xae\\\n\\x0d\\xe4\\x24\\xbd\\x6b\\xa2\\x2d\\x7d\\x95\\xa5\\xf8\\x33\\x90\\xfb\\x49\\xad\\\n\\x58\\x87\\x0a\\x8c\\x33\\x05\\x29\\x7d\\x8d\\x64\\xaf\\x32\\x95\\xab\\x54\\x39\\\n\\x1c\\xfb\\x1e\\x1b\\x0f\\x13\\xaf\\x3c\\xd1\\x36\\x99\\xf1\\x9a\\x21\\x26\\x29\\\n\\x8f\\xf0\\x69\\xe3\\x01\\xd4\\x95\\xf0\\xb1\\x20\\xb1\\x91\\x8b\\xc1\\x8b\\xd8\\\n\\x55\\x9e\\x68\\xc3\\x70\\x08\\xf7\\x08\\x36\\x29\\xae\\x15\\x68\\xdf\\x0b\\x52\\\n\\x57\\xda\\x1f\\x03\\xf5\\x9f\\xd4\\x35\\xc5\\x2d\\x03\\xed\\xc3\\x21\\xd9\\x96\\\n\\xf1\\xe5\\x60\\xcb\\xf8\\x7a\\x98\\xc5\\xf8\\x82\\x88\\x64\\x7c\\x45\\x3c\\x4e\\\n\\xbd\\xda\\xd3\\xdc\\xa5\\xb9\\x3a\\xd1\\xdc\\x6a\\x7d\\x55\\x17\\x0f\\x5d\\x9c\\\n\\x92\\xd4\\xf4\\x68\\xff\\x14\\xa7\\x53\\xf9\\x61\\xf9\\x63\\xf9\\x4d\\xf1\\x3b\\\n\\x91\\x6c\\x9f\\x9a\\x1f\\x36\\x7f\\x29\\xf5\\x22\\x71\\x4d\\xcd\\xbf\\x1c\\x9e\\\n\\x55\\x50\\xa6\\x62\\x27\\xba\\x4c\\xa5\\x04\\x2e\\x24\\xa8\\x77\\x08\\xa1\\x5d\\\n\\x93\\xa0\\x89\\xa5\\xa4\\x0d\\xb7\\x11\\x70\\x7e\\x50\\x8d\\xd0\\x0e\\xc9\\x58\\\n\\x3f\\x11\\x22\\x7e\\x6b\\x55\\xcc\\xfb\\x31\\x9f\\xf8\\xc4\\x10\\x74\\x87\\x99\\\n\\xc9\\x36\\x7f\\x09\\xa1\\xbf\\xad\\x24\\xa2\\xb0\\xe3\\xd1\\x46\\xff\\x69\\x2e\\\n\\x80\\x8f\\x0a\\xf0\\x0d\\x3b\\xa4\\xba\\xcc\\xfd\\x47\\x93\\x72\\xa4\\x1b\\x20\\\n\\x3b\\xc1\\xc7\\x0c\\xfb\\x6f\\xc8\\xa0\\xc1\\xbf\\x54\\x43\\x78\\xd6\\x17\\x81\\\n\\xb9\\x80\\xdd\\xd7\\xcb\\xf5\\x25\\x15\\xc4\\x13\\x0e\\x3e\\x44\\x71\\xbe\\xd0\\\n\\x17\\x86\\xa0\\x63\\xee\\x64\\x24\\x1e\\x35\\x01\\x6b\\x5f\\xe4\\xe1\\x3d\\x43\\\n\\xb8\\x57\\xf5\\xfb\\x8a\\x3d\\x3c\\xea\\x7c\\x67\\xfd\\x6d\\x34\\x4e\\xf5\\x03\\\n\\xbb\\x37\\x0f\\x63\\x27\\xec\\x54\\xf2\\x30\\x34\\x92\\x28\\xce\\x56\\xeb\\x68\\\n\\x32\\xee\\xd2\\x87\\x98\\xd0\\xfc\\x8f\\xe6\\xf9\\x1b\\xeb\\x43\\x5f\\xdb\\x73\\\n\\xab\\x8c\\x0d\\x7c\\xa7\\x18\\x13\\xf0\\x4d\\xf3\\xd9\\x14\\xc1\\x2d\\x12\\x06\\\n\\x20\\x6d\\xf4\\xed\\xa6\\x00\\xf8\\x47\\x5f\\x0a\\xfe\\xf9\\xec\\x3a\\x91\\x27\\\n\\x73\\xe6\\x1f\\x60\\xd7\\xc0\\x5e\\x3c\\x7f\\x1b\\xc3\\xfc\\xed\\xb4\\x51\\x39\\\n\\xd2\\x0d\\xf0\\x9d\\x02\\x1e\\x31\\xd1\\x83\\x7f\\x11\\xd4\\x03\\xca\\x1d\\xf6\\\n\\x5a\\xec\\xf7\\xdb\\xc1\\x64\\xdc\\x69\\x07\\xe8\\x8a\\xd5\\xf5\\x9f\\x01\\x26\\\n\\xe4\\x4b\\x17\\xa0\\x1e\\x20\\xbb\\x61\\xe7\\x79\\x68\\x57\\xba\\xf8\\xef\\xb6\\\n\\x21\\x99\\x43\\x47\\x8a\\xfd\\x53\\x38\\xff\\x67\\x25\\xa1\\xf3\\x08\\x9f\\xe5\\\n\\x98\\x63\\xb1\\x3e\\xd0\\x70\\xff\\x80\\xf9\\xdb\\x4a\\x26\\xac\\x3a\\x9f\\x30\\\n\\xc6\\x02\\xbb\\xe7\\x0b\\x7c\\x71\\x65\\x20\\xdc\\xfb\\x44\\x86\\x54\\x9f\\xb3\\\n\\xbf\\xf1\\x2e\\xda\\xa9\\x31\\xf3\\x02\\xbb\\x5b\\xac\\x63\\xb9\\xfb\\x5d\\x21\\\n\\x9f\\xc6\\xbe\\x31\\xf4\\x57\\x90\\x13\\x62\\x9f\\x12\\xe4\\xea\\xd9\\x19\\xb2\\\n\\x67\\x9e\\xe1\\x6f\\xe8\\x0f\\xb6\\x11\\x65\\x99\\x36\\xe2\\x82\\x9c\\xc4\\x90\\\n\\x7e\\x81\\x21\\x47\\xdb\\x44\\x14\\xe7\\x46\\x40\\x96\\x03\\xdd\\x21\\x64\\xfd\\\n\\xfa\\xcc\\x4d\\xf1\\x0e\\xe6\\xbe\\xab\\x99\\xb8\\x92\\x99\\xb8\\x21\\xb3\\xd3\\\n\\x57\\x27\\xa7\\x0e\\xb0\\xd1\\x67\\xfd\\x14\\xc3\\x57\\x0f\\x6c\\x3d\\x84\\xdc\\\n\\xb3\\x00\\xbb\\xe8\\xd9\\x44\\x71\\x96\\x00\\xd2\\x6a\\x25\\x50\\xdc\\xd8\\xfb\\\n\\xca\\xb6\\x61\\xd8\\x6a\\x95\\x14\\x28\\x5e\\x3e\\x38\\x13\\x5a\\x5e\\xc9\\x7e\\\n\\x3b\\x7c\\xe3\\xa7\\x2e\\xc0\\xfe\\x6e\\xd6\\xb7\\x2a\\xce\\x4d\\x37\\x86\\x4f\\\n\\x7f\\xa4\\x31\\x85\\x28\\xfc\\xba\\x4e\\xd5\\x33\\x9e\\x21\\x44\\xe1\\x2b\\xb8\\\n\\x9b\\x30\\xac\\xe9\\x04\\xe8\\x66\\x59\\x7f\\xc6\\xba\\x9e\\xa3\\x8d\\x7d\\x09\\\n\\x98\\x3b\\xe0\\x7b\\xea\\x23\\x30\\x5f\\xba\\xa0\\x3f\\xa1\\xf9\\xc7\\x9c\\xa5\\\n\\x9a\\x96\\xef\\x40\\x47\\xc3\\xfa\\x5e\\x5f\\x68\\x18\\xb6\\x74\\x02\\xd6\\xb5\\\n\\xe0\\x05\\xfb\\xac\\xb5\\x19\\xcb\\xd9\\x76\\x03\\x79\\xb5\\x39\\xc8\\x84\\xb0\\\n\\x4f\\x8f\\xf5\\xaf\\x3f\\x30\\x9d\\xb0\\xe8\\x93\\xef\\x31\\x61\\x8d\\xad\\x33\\\n\\xd2\\x04\\xec\\x4d\\x00\\x4f\\xb0\\x37\\xd2\\x34\\xd6\\xb8\\x32\\xe1\\x1e\\xa5\\\n\\x13\\xce\\xd8\\x40\\xbb\\x91\\x10\\x9a\\xb7\\x46\\x1a\\xc2\\xb1\\xfe\\x64\\xe6\\\n\\x1a\\x81\\x27\\x5d\\x01\\xff\\x0b\\x72\\xe6\\xaa\\x0e\\x67\\x99\\x30\\xe6\\xe8\\\n\\xef\\x0f\\xe3\\x71\\x7a\\xeb\\x3e\\xf8\\x29\\x42\\x1d\\x99\\xa3\\x2d\\x0f\\x6c\\\n\\x77\\xd8\\x73\\x0e\\xd4\\x01\\x63\\x1e\\xc6\\x2b\\x73\\x3c\\x5f\\x19\\xfd\\x10\\\n\\xc6\\xb3\\xef\\x1a\\xc2\\x64\\x76\\xfe\\xd9\\xf6\\x63\\x8e\\xfe\\xf3\\xd9\\xf6\\\n\\xf3\\x52\\x43\\x98\\xb3\\x4c\\x18\\x75\\xfe\\xcc\\x4c\\x09\\x7c\\xbf\\xe0\\x4d\\\n\\x93\\xdc\\x0f\\x72\\x59\\x73\\xb5\\xcd\\xf6\\x27\\x34\\x6f\\x81\\x1a\\xc2\\x34\\\n\\x65\\xc2\\x60\\x5d\\x6a\\x4e\\xe7\\x5f\\x61\\x2c\\x65\\xf7\\x7e\\xa8\\xf3\\xf5\\\n\\xc9\\x86\\x63\\xe7\\x1a\\xe6\\x20\\xe7\\x67\\x01\\x7f\\x34\\xec\\x9c\\x2c\\xbd\\\n\\x79\\xc1\\x30\\xa2\\x98\\x6b\\x98\\x43\\x3f\\x84\\x39\\x24\\xf8\\x06\\x4f\\x83\\\n\\xb5\\x08\\x0f\\x3b\\x2c\\xd6\\x2f\\xc3\\x7c\\x03\\xf2\\xa5\\x2d\\x30\\x87\\x07\\\n\\x2f\\x98\\xd3\\x6b\\x6b\\x7f\\x05\\x39\\x06\\x7b\\x66\\x61\\x2f\\x03\\xf1\\xa5\\\n\\x0d\\xfa\\x30\\x3c\\x60\\x2d\\xa5\\xeb\\x5e\\x6f\\xf6\\x4c\\x4a\\xe4\\xc3\\x98\\\n\\x3e\\x88\\x58\\x60\\xcd\\xca\\x9e\\xa3\\xa3\\xef\\xf9\\x9e\\x7e\\x44\\x71\\xce\\\n\\xce\\x78\\x81\\xf8\\x4a\\x0f\\xe8\\xf7\\x26\\x12\\xc5\\xda\\x77\\x7a\\x06\\xe3\\\n\\x43\\x5c\\xac\\x2c\\x00\\x72\\x37\\x43\\xda\\xe7\\xc2\\xce\\xf6\\x10\\x51\\xc8\\\n\\x3c\\x84\\x3a\\x67\\x1e\\xe7\\xb5\\xbe\\x61\\xe2\\x85\\x1c\\x5a\\x44\\x84\\x3d\\\n\\x37\\x0e\\xb2\\x30\\xd4\\x35\\x2b\\x87\\xc3\\x3c\\xa6\\x8d\\x80\\xf1\\x03\\x98\\\n\\x13\\x6d\\x23\\x0a\\x39\\x2c\\x74\\x4c\\xb0\\x39\\x80\\xfe\\x5e\\x9f\\xb1\\xce\\\n\\x8a\\x79\\x77\\x39\\x51\\xf8\\x1f\\x42\\xdc\\xf0\\x47\\x6b\\x88\\x73\\x2a\\x59\\\n\\xc0\\xe6\\x00\\x72\\x38\\xee\\xf9\\xb9\\x38\\xdb\\x0b\\xe7\\x0c\\x43\\xd7\\xda\\\n\\x94\\xd0\\x72\\x34\\xd8\\x7a\\xb1\\xf2\\xdb\\x3c\\xcc\\x33\\xfc\\x0d\\x3a\\x4d\\\n\\xc8\\x51\\x9f\\x73\\xde\\x47\\x5c\\x87\\x89\\x71\\xf7\\xd4\\xe1\\x3c\\x0f\\x8c\\\n\\x0f\\xb1\\x84\\x5f\\x7e\\x0e\\x9e\\x7e\\x30\\x94\\xa4\\x12\\x86\\x0d\\x87\\x77\\\n\\x31\\x9f\\xa9\\x68\\x44\\xbe\\x55\\x81\\x76\\x80\\xf3\\x9d\\xd0\\xdf\\xc2\\xc7\\\n\\x11\\x6c\\x0c\\x24\\x44\\xf9\\x5c\\xd7\\xcf\\xcc\\x33\\xcc\\x1d\\x61\\xf7\\x8f\\\n\\x31\\xbe\\x12\\xd1\\x73\\x8e\\x45\\x5b\\x67\\xf1\\x5c\\xe3\\x99\\xab\\x98\\xb9\\\n\\xd2\\xc7\\xda\\x50\\x85\\xe5\\x4a\\x5f\\x4b\\xd2\\xd7\\x64\\x95\\x2b\\xfb\\x3c\\\n\\x35\\x1c\\xfb\\x9e\\x58\\x1e\\x9d\\x72\\x95\\x4b\\x53\\x0e\\xbb\\xc1\\x51\\x37\\\n\\x38\\x0c\\x07\\x66\\x60\\x38\\x20\\x47\\x2e\\xb3\\xa5\\x82\\x52\\x57\\xa9\\x2b\\\n\\xf5\\x8f\\xa4\\x9c\\xcd\\x93\\xe8\\x44\\x52\\xce\\xee\\xc1\\x41\\x3c\\x29\\xf6\\\n\\x54\\xd4\\xac\\x33\\xc5\\xce\\x8a\\x2a\\x95\\x94\\x13\\x9b\\x1e\\x2b\\xae\\x89\\\n\\xae\\x29\\x26\\x51\\x8a\\x2b\\x92\\x95\\x65\\xe0\\xaa\\x12\\x9f\\x6a\\x7a\\x2c\\\n\\x1f\\xa9\\x7c\\x45\\x32\\x7c\\xb2\\x7c\\xb3\\xf9\\x60\\xf3\\xc5\\xe6\\x93\\xcd\\\n\\xb7\\x5c\\x42\\x9c\\xe4\\xf4\\x21\\x35\\xce\\x84\\xfe\\x98\\x52\\xed\\xb4\\xf8\\\n\\x7b\\x43\\xf8\\xdb\\x44\\x5f\\x86\\xbe\\xd3\\x14\\xf6\\x0e\\xd0\\x03\\x40\\xaf\\\n\\xb3\\x85\\xe1\\xc3\\xd8\\xc0\\x5a\\x0f\\xb6\\xa6\\xdb\\x18\\x5e\\xb8\\x80\\x1e\\\n\\x01\\x65\\xa2\\x6f\\xff\\xab\\x0d\\xa0\\x2b\\x7d\\xc1\\xf0\\xc1\\xd5\\x57\\x53\\\n\\xb5\\x9b\\xaa\\xd3\\x60\\x6d\\x39\\x8c\\xe5\\x43\\x0a\\xe3\\x1a\\xfa\\x04\\x9c\\\n\\x15\\x89\\xbe\\x19\\x73\\x4d\\xec\\x89\\x0a\\x31\\x52\\xfa\\xe8\\xa3\\xc4\\x2a\\\n\\xcf\\x60\\xd3\\xa2\\xcd\\xfe\\x7b\\xa1\\xd2\\x57\\x95\\x81\\x61\\xdc\\x32\\x96\\\n\\xfd\\x1c\\x74\\x71\\x28\\x7f\\x8c\\x83\\x90\\xa9\\xa0\\xfd\\x61\\xfc\\x5c\\x6f\\\n\\xa4\\xf4\\x01\\xcc\\x29\\xb9\\xbe\\x21\\xa1\\xd7\\x36\\xe6\\x39\\xbc\\x00\\xe6\\\n\\xa1\\xf8\\x3e\\x54\\x75\\xb6\\xf8\\x0e\\xe0\\x9f\\x0b\\x3a\\x2c\\xec\\xa7\\xd9\\\n\\xc2\\xd0\\x0a\\xe6\\x59\\x5b\\x22\\xfc\\xb7\\x82\\x35\\x23\\xd6\\x59\\xb0\\x75\\\n\\x40\\xb9\\x60\\xbc\\x7f\\xc4\\xfc\\xde\\xcb\\x50\\x38\\xf3\\x2c\\x89\\x09\\x83\\\n\\xfd\\x4e\\xf0\\x87\\x94\\xd1\\x3d\\x35\\x90\\x13\\xc0\\xde\\x00\\xeb\\x24\\xd8\\\n\\xfb\\x63\\xad\\xa4\\x29\\x7f\\xf8\\x1b\\x74\\x13\\xbb\\x08\\x3d\\x37\\x81\\xac\\\n\\x44\\x9f\\xbe\\x1d\\x6d\\x0f\\x73\\x36\\xe4\\x07\\x6d\\x4f\\x9f\\x33\\xaa\\xd1\\\n\\x87\\xa2\\xdf\\x60\\xf7\\x9a\\x68\\xeb\\xe3\\x15\\xf3\\x41\\xc8\\xda\\xb0\\x37\\\n\\x47\\x08\\x3d\\x71\\x6b\\x26\\x2e\\xcc\\x7d\\xd2\\xf3\\xbd\\x09\\xf9\\x07\\xe6\\\n\\xaf\\x98\\x7f\\x0a\\x69\\xf7\\x00\\x7b\\x0c\\xf4\\xf5\\x87\\x89\\x66\\x19\\x0b\\\n\\xd6\\x44\\xd0\\x07\\x1a\\xc2\\x77\\x1a\\xbe\\x25\\xd6\\x66\\x8a\\x0f\\x68\\x3b\\\n\\xb0\\xb3\\x9d\\x61\\x80\\xb4\\x59\\x88\\x98\\x34\\xf8\\xfa\\x13\\x2f\\xe6\\x6f\\\n\\x86\\xf4\\x8f\\x8a\\xb6\\x85\\xbe\\x7c\\x0c\\xcf\\xdf\\x70\\x26\\xb3\\xa6\\xf3\\\n\\x6a\\x84\\x02\\x7c\\xe0\\x1f\\xe7\\x79\\x8e\\x79\\x18\\x9f\\x4d\\xa7\\xd0\\x40\\\n\\xde\\xf9\\xe6\\x5b\\xf8\\xd6\\x8d\\xa1\\xcb\\xc7\\x7e\\x1c\\x3e\\x7f\\x42\\x58\\\n\\x87\\xa4\\x77\\x5e\\x8c\\x10\\x80\\x9e\\x37\\x9e\\xe7\\x39\\xfc\\xf6\\x18\\xc3\\\n\\x76\\x19\\x32\\xbf\\x2b\\x3c\\xcf\\xe1\\x67\\xe2\\xae\\x81\\xd3\\xc6\\x5c\\x16\\\n\\x3a\\x6c\\x3e\\xd9\\x27\\xf6\\x1b\\xa1\\xaf\\xf6\\x30\\x60\\xfa\\x98\\xe7\\xa2\\\n\\x9d\\xfd\\xa6\\xe6\\xef\\x98\\x8f\\x63\\xcc\\x32\\xc4\\x3e\\x5c\\xc4\\x89\\xb1\\\n\\x74\\xab\\x86\\x30\\x90\\x8d\\xa0\\x9f\\xc6\\xb9\\x4c\\x42\\xee\\x87\\xc5\\x1c\\\n\\x02\\xf2\\x35\\x8c\\x2b\\xe9\\xed\\xb9\\xc4\\xbe\\x48\\xf4\\x51\\x90\\x95\\xe5\\\n\\x15\\x20\\x6d\\xd8\\xc7\\x61\\xdc\\x41\\xdf\\xaa\\xad\\x0d\\x1c\\xc2\\x61\\xde\\\n\\x89\\xf2\\x6a\\x9d\\x81\\xb4\\x31\\x9f\\x7d\\xc4\\xc4\\xa5\\xeb\\x9e\\x4b\\xd8\\\n\\xb9\\xc1\\x97\\x1a\\xda\\xa4\\x98\\xd0\\x73\\x1f\\x6d\\x74\\x0e\\x39\\x98\\xb0\\\n\\xa7\\x99\\x77\\xb7\\x93\\x8c\\xd9\\xcc\\xc1\\x0e\\x0f\\xed\\x01\\x6b\\x32\\xf4\\\n\\x1b\\xb0\\x01\\x83\\x0d\\x02\\xce\\x18\\xef\\xce\\x10\\xee\\xfd\\x99\\xbf\\x21\\\n\\x0c\\xfa\\x37\\xd8\\x1c\\x0a\\xb9\\xd7\\x1f\\x7a\\x77\\xc8\\xaa\\x31\\x46\\x41\\\n\\x5f\\x80\\x7d\\x32\\xec\\x1e\\xa5\\x0f\\xcc\\xb3\\x4d\\x4c\\x98\\x74\\x75\\xf4\\\n\\x10\\x37\\x80\\xf2\\x3a\\xc9\\xe5\\xb9\\xa9\\x1b\\x19\\x45\\xdf\\xa3\\x69\\xc2\\\n\\x3d\\xb6\\xc7\\x25\\xd7\\xb3\\xc2\\xee\\x3a\\x57\\xb9\\x9f\\xcc\\x29\\xd9\\x5e\\\n\\x6e\\x9b\\xe8\\x2a\\x8f\\x94\\xf9\\xca\\x1f\\xcb\\xe4\\xf2\\x8f\\x1f\\xa9\\x60\\\n\\xa0\\x78\\x2a\\x28\\x0f\\xa5\\xfc\\x0d\\xe1\\x10\\x1e\\xef\\x25\\x3b\\xc9\\xfd\\\n\\xe5\\x36\\x54\\xac\\x88\\x4f\\x4a\\x52\\xf6\\x93\\x41\\xe8\\x09\\xc3\\x27\\x56\\\n\\x4e\\xd1\\x9f\\x7f\\x86\\x88\\xbe\\x0a\\x73\\x22\\x43\\xf5\\xcd\\xb0\\xe1\\x6d\\\n\\xc0\\xa4\\xc1\\x85\\x50\\xeb\\x7e\\xd8\\x84\\x7c\\x21\\x0a\\xdb\\x10\\xec\\x67\\\n\\xc6\\xfc\\xf6\\x07\\x73\\x15\\xda\\x57\\x28\\xe6\\xb9\\xd0\\x47\\x64\\x67\\xae\\\n\\x67\\x05\\x8c\\x1b\\x65\\x82\\x72\\x62\\x6d\\xb7\\x70\\xd5\\xa4\\xf3\\xd7\\x07\\\n\\x90\\x77\\x4c\\x64\\xe2\\x9e\\x40\\x74\\xf7\\xc1\\x9c\\x1e\\x4a\\x31\\x69\\xc8\\\n\\x98\\xab\\x0b\\x4f\\x18\\x21\\x65\\x3e\\x68\\xd5\\xb0\\x57\\xc4\\x7a\\x0a\\x7e\\\n\\x17\\x20\\xcb\\xf8\\xce\\x5c\\x6f\\x32\\xcf\\x3d\\x89\\xee\\x67\\x60\\x60\\x4c\\\n\\x41\\x39\\x41\\x76\\x85\\xb1\\x05\\x76\\x90\\xd8\\xf7\\x8b\\xf9\\xb3\\x0d\\x73\\\n\\xc5\\x98\\x3e\\x98\\xf9\\x3b\\xc2\\x4d\\x20\\xda\\xf9\\xdd\\xc0\\xfa\\xfb\\x12\\\n\\xa1\\xfb\\x30\\x6d\\xcf\\x24\\x41\\x38\\xf4\\x93\\xf0\\x77\\x52\\x4c\\x43\\x38\\\n\\xf4\\x4d\\x18\\x57\\xf4\\xd5\\xff\\x20\\x0f\\x98\\x23\\xf0\\xd9\\x91\\xa0\\xde\\\n\\xb0\\x16\\xd7\\xd7\\xae\\x95\\x05\\xce\\x4f\\x3a\\xc5\\xf3\\x1c\\x32\\x53\\xe4\\\n\\x2f\\xa3\\xf6\\x73\\xec\\xd9\\xc9\\xaa\\xfb\\x54\\x50\\xde\\x19\\xf5\\x3b\\xc4\\\n\\x02\\x32\\x0b\\x55\\x5f\\xac\\x58\\x63\\x08\\xa5\\xff\\x41\\xf9\\xab\\xae\\x23\\\n\\x30\\xee\\x09\\xb5\\xa7\\x03\\xf3\\xaf\\x1f\\x2a\\xcf\\xb0\\x8e\\x37\\x24\\xff\\\n\\x42\\x96\\x3f\\xe4\\x3f\\xaa\\xe5\\x0f\\x59\\x0c\\xda\\x4f\\x46\\xfb\\x17\\xb4\\\n\\x1f\\x7c\\x9f\\x7f\\xa8\\x3c\\x47\\xbc\\x90\\xd7\\x4d\\xc9\\x60\\xfc\\xf8\\x7e\\\n\\xc2\\x09\\x3f\\x9f\\x45\\x09\\x3d\\xa7\\x53\\x27\\x47\\x48\\x0f\\xf8\\xee\\xf1\\\n\\xfd\\x6b\\x9a\\xa3\\x40\\xde\\x84\\xef\\x03\\xe7\\x6a\\x6b\\x7b\\x2e\\x0d\\xc2\\\n\\xa1\\xbc\\x51\\x2e\\xda\\xe8\\xb1\\x31\\x3e\\xc2\\xee\\x1e\\x6d\\x00\\xf5\\x8e\\\n\\x75\\x21\\xd6\\x25\\xf0\\x15\\x61\\xc3\\x5c\\x7f\\x63\\x9e\\x1f\\x60\\xc2\\xc1\\\n\\x97\\x8a\\xae\\x7e\\x8b\\x70\\xce\\x27\\xbe\\x45\\xac\\xfb\\xe1\\x87\\x05\\xeb\\\n\\xdc\\x44\\xe6\\x0a\\x9f\\x2f\\x98\\xb3\\xf5\\x64\\xc2\\xa5\\x01\\x35\\x3d\\x23\\\n\\x25\\x28\\x72\\xf0\\x95\\x13\\x29\\x45\\x4f\\x98\\xab\\x74\\x9a\\x9c\\xc8\\x89\\\n\\x13\\x15\\x91\\x2d\\x91\\xf9\\x46\\x92\\x8f\\xf2\\x8f\\xe4\\xa9\\xfc\\x3b\\x45\\\n\\x32\\xf2\\x52\\x9e\\x98\\x86\\xf0\\x1c\\x84\\x70\\x08\\x8f\\xf7\\xf0\\x3e\\xe6\\\n\\x61\\x10\\xc6\\x38\\x13\\xc5\\x3c\\xac\\x29\\xff\\xca\\xe7\\x00\\xc9\\xd8\\x99\\\n\\x06\\xa1\\x44\\xf1\\x3d\\x60\\xbe\\x0c\\x99\\xa0\\x3e\\xbe\\xf1\\xa0\\x63\\x86\\\n\\x5e\\x15\\x6b\\xa3\\x23\\x7a\\xbe\\x8f\\x39\\x25\\xb2\\x7d\\x54\\x8f\\xf7\\x01\\\n\\xcc\\xb1\\x37\\x10\\x7a\\x9d\\x84\\xd2\\x82\\x0f\\x17\\xf6\\x4c\\xc2\\xea\\x44\\\n\\xbb\\xb5\\x23\\xce\\x7e\\x83\\x2c\\x00\\xf2\\x63\\xf8\\x49\\xec\\xc5\\xd0\\x34\\\n\\xe6\\xd9\\x02\\xa2\\xfe\\x5c\\x6c\\x76\\x9f\\x94\\x26\\x7f\\x2e\\x55\\x99\\x30\\\n\\xaa\\x67\\x78\\xe0\\xdb\\x42\\x3d\\x68\\x33\\xdf\\x40\\x18\\xd4\\x39\\xf7\\x7b\\\n\\xc2\\xbe\\x26\\xbe\\x39\\x93\\x3a\\x60\\x7e\\xbb\\x92\\xf3\\x5b\\xdb\\xf3\\x14\\\n\\xb8\\xe0\\xbe\\xb3\\x53\\x8f\\xf7\\xb9\\xef\\xec\\xd7\\xe3\\x7d\\xee\\x3b\\x98\\\n\\x7f\\xe8\\x22\\x23\\x81\\x1e\\x83\\x6b\\x1f\\x94\\x8d\\x89\\x4f\\x1b\\x19\\x2f\\\n\\xc2\\xec\\x23\\x69\\xfb\\x1c\\xc8\\x32\\x36\\x10\\xda\\x2e\\x85\\x4f\\x9e\\x80\\\n\\x31\\x72\\x26\\x13\\x46\\x93\\x3c\\x15\\x6b\\x5b\\xe8\\xbc\\x76\\x13\\x85\\x4f\\\n\\xa1\\xdd\\xcc\\xb3\\x86\\xdc\\x80\\xd0\\xb1\\x97\\xa6\\x28\\x92\\x21\\x89\\x3d\\\n\\x21\\x52\\xaa\\x97\\x7c\\xfa\\x91\\x90\\x28\\x6a\\x26\\x1d\\x4d\\xf5\\x68\\xb1\\\n\\xc9\\x0a\\xc2\\x6f\\x3c\\x7f\\xfc\\x98\\x9a\\x68\\x53\\xab\\xf6\\xff\\x03\\x98\\\n\\x9f\\x8b\\x13\\\n\\x00\\x00\\x2a\\x82\\\n\\x00\\\n\\x02\\x87\\x8f\\x78\\x9c\\xed\\x5d\\x07\\x5c\\x14\\xc7\\xf7\\x9f\\xbb\\x43\\xc0\\\n\\x06\\x24\\xff\\x88\\xdd\\x83\\x18\\x2c\\x58\\x62\\x2f\\x51\\x01\\x89\\x46\\x34\\\n\\x1a\\x8d\\x15\\x35\\x2a\\x11\\xbb\\xc6\\xde\\x62\\xe3\\x88\\x51\\x13\\x2b\\x62\\\n\\x94\\x58\\x89\\x11\\xbb\\x11\\x8d\\xbd\\x1f\\x31\\x58\\x62\\x4d\\xb0\\x43\\xe4\\\n\\xd4\\x9f\\xbd\\x70\\x36\\x38\\xe1\\xe0\\xfe\\xfb\\xd8\\xdd\\xb0\\x2c\\xbb\\x57\\\n\\x77\\x6f\\x0f\\x6e\\xbe\\x1f\\x9f\\x3b\\xc3\\xed\\xce\\xbc\\x32\\xf3\\x66\\x76\\\n\\x66\\x76\\x06\\x21\\x19\\x2a\\x8e\\x00\\x32\\xe4\\x83\\x9a\\x7b\\x22\\xb4\\x82\\\n\\x08\\xab\\x54\\x64\\xbc\\x86\\xbb\\x0c\\x5d\\x22\\xfe\\x16\\x16\\x46\\xc6\\xb7\\\n\\xfc\\x84\\x50\\x46\\x59\\x19\\x0a\\x09\\x21\\xe3\\x3f\\x74\\x47\\x28\\x76\\x87\\\n\\x0c\\x05\\x05\\x51\\xf7\\x07\\x23\\x54\\x5d\\x26\\x47\\xf5\\xea\\x51\\xf7\\xfb\\\n\\x21\\xd4\\xf9\\x53\\x39\\xf2\\xf1\\xa1\\xe2\\x5e\\xc4\\xf3\\xc3\\xe4\\xa8\\x5c\\\n\\x39\\xea\\x79\\x22\\xeb\\xd8\\x6f\\xe5\\xc8\\xcb\\x8b\\x8c\\x0f\\x73\\x21\\x9e\\\n\\x9f\\x2d\\x47\\x3f\\x76\\xf9\\xa2\\x5d\\xe9\\x12\\x15\\x4a\\x10\\xac\\x94\\x6e\\\n\\x1f\\xd2\\xa6\\x2b\\xfc\\x0a\\xe4\\xee\\x4a\\x5c\\xbe\\x1a\\xbf\\x65\\x08\\x71\\\n\\x29\\x3e\\x36\\xa4\\xf7\\x04\\x84\\x3c\\x4e\\x02\\xc9\\x4e\\x8f\\xd9\\x32\\x88\\\n\\x08\\x3c\\x6d\\xdf\\xa6\\x75\\xf7\\xa9\\x6b\\x9e\\xff\\xdb\\xe9\\x87\\x7e\\x0f\\\n\\x67\\x9e\\x7e\\x19\\x5f\\x7d\\xf6\\xca\\x39\\xde\\x65\\xfd\\xe7\\x7b\\x7f\\xd8\\\n\\xb8\\x8d\\x4f\\xe4\\x90\\xf5\\x4d\\xe4\\x15\\x9f\\xb5\\xfd\\xb7\\xdc\\xdd\\x81\\\n\\x65\\x57\\xdf\\x4a\\xa8\\xdb\\xe0\\xc6\\x91\\x26\\x5b\\x34\\x2e\\x75\\x3e\\xd0\\\n\\x06\\x27\\x0f\\xda\\x18\\x14\\x5c\\xa6\\x4b\\x42\\xcd\\x11\\x5d\\x7c\\x8a\\xb9\\\n\\xad\\x09\\xf6\\xee\\xf0\\x64\\x60\\xcc\\xfe\\x36\\x25\\x67\\x5f\\xf1\\x69\\x28\\\n\\x3f\\xb2\\xf5\\xeb\\x36\\x1b\\x1a\\xc8\\x8b\\x7d\\x54\\x2e\\x61\\xe2\\xcb\\xf3\\\n\\x83\\x3e\\xdb\\x70\\x68\\x42\\xec\\xc3\\xa3\\x29\\xaf\\x5f\\x19\\x66\\x69\\xbc\\\n\\x56\\xae\\x99\\x7e\\x71\\xc2\\xc5\\x35\\x86\\xb4\\x75\\x31\\x0f\\xd7\\x3d\\xac\\\n\\x7f\\x78\\xdc\\x07\\xcd\\x64\\x95\\x92\\xd7\\x2c\\x46\\x6e\\x4d\\x0d\\x27\\x4e\\\n\\xaa\\x07\\xb6\\x7b\\x1e\\x7d\\xeb\\x0d\\xd2\\xcd\\x78\\x9d\\x7a\\x20\\x72\\xb5\\\n\\x7a\\xd1\\x85\\xc7\\xe1\\x9a\\x65\\xdf\\x36\\x7d\\xb4\\xbb\\xf9\\x6f\\x0f\\x3d\\\n\\x55\\x65\\x23\\x1f\\x36\\xd9\\xfc\\xe9\\x84\\x3e\\xf1\\x8d\\x3e\\x3a\\xa0\\xaa\\\n\\xb5\\x3a\\xe9\\x92\\xca\\x30\\x72\\xfa\\x9c\\x6f\\x5c\\xd5\\x1f\\x6a\\xe5\\x5a\\\n\\x6f\\x6d\\xcb\\x5d\\x57\\xee\\x1e\\x8e\\xdb\\x7d\\xc8\\x53\\x5f\\x49\\xe7\\xab\\\n\\xbd\\x14\\xb7\\x67\\x5e\\xeb\\x50\\xf9\\x6d\\xd7\\x9e\\x91\\xa5\\xab\\x57\\xdf\\\n\\x7c\\x2b\\xc9\\x7f\\xeb\\xa6\\x69\\xd9\\x7e\\x87\\x7f\\x98\\x93\\xf6\\xbf\\x2b\\\n\\x0f\\xf6\\x96\\x58\\xb3\\x29\\x61\\xfa\\xa0\\x4e\\xfd\\xe4\\x2d\\x4b\\xeb\\x51\\\n\\xe8\\xe8\\x61\\xdf\\x46\\x6f\\x3a\\xe2\\xa1\\x2f\\xad\\x1d\\x33\\xa9\\xec\\xde\\\n\\x2e\\xaf\\x5f\\xbb\\xa9\\x16\\xa8\\xdb\\x85\\xea\\xff\\x39\\x5a\\x7b\\xd9\\x88\\\n\\x17\\x1f\\x6e\\x75\\xad\\xb5\\x7d\\x82\\xeb\\xd8\\x4a\\xba\\xfa\\xde\\xc7\\xaf\\\n\\x6c\\x7c\\xaa\\x7e\\xaa\\x8e\\xe8\\xf1\\x6e\\xec\\xd5\\x86\\xaa\\xa6\\x91\\x06\\\n\\xf5\\xdd\\x98\\xc3\\xfb\\x3b\\x6e\\x4b\\xec\\xd6\\x23\\x40\\x3f\\xa7\\x44\\x6c\\\n\\x73\\x85\\xbe\\xb2\\x76\\xea\\xf2\\x32\\x1d\\x46\\xa4\\xdc\\x53\\x0f\\x90\\x4f\\\n\\x51\\x19\\x6a\\xbf\\x0b\\x7b\\xec\\xa7\\xfe\\x56\\x53\\x71\\x4e\\xec\\xd9\\x71\\\n\\xb1\\x57\\x2a\\x3e\\xf1\\xf0\\xcc\\x58\\x11\\x7d\\x6a\\xd0\\xf6\\x98\\xa7\\xdf\\\n\\x5f\\x51\\xec\\x5f\\x74\\x7a\\x5a\\x6a\\xb1\\xe3\\x37\\xff\\x18\\xdf\\xbc\\xf3\\\n\\x84\\x25\\x0d\\x7b\\xaa\\x4a\\xc6\\x8d\\x8c\\xa9\\x7e\\x6b\\xd8\\x8e\\x46\\xa8\\\n\\x73\\xd4\\x08\\x8d\\x7c\\x6b\\xb5\\x55\\xdb\\xe2\\x5f\\x77\\x6a\\xfa\\xa6\\xa3\\\n\\x62\\x51\\x9f\\xe4\\x51\\x37\\xce\\x6e\\xaa\\x58\\x7d\\xd1\\x9f\\xed\\xbb\\x2e\\\n\\xda\\xf1\\xe5\\x89\\xdb\\xb7\\x47\\x6f\\xfb\\x72\\xcc\\xb5\\x51\\x67\\xfc\\xc7\\\n\\xae\\x98\\x78\\xab\\xea\\xf0\\xfd\\xc5\\xb5\\x1e\\x6f\\x5b\\x5c\\xed\\x71\\xb8\\\n\\xfe\\xc1\\xa4\\x71\\x9a\\xd1\\x89\\xcb\\xe3\\x15\\xa9\\x27\\xff\\x88\\xd9\\xb6\\\n\\x2a\\xaa\\xae\\xe7\\xb5\\xad\\x3d\\x67\\x4f\\x69\\xdf\\xf8\\xab\\xb3\\x32\\x4d\\\n\\x9f\\xc4\\x32\\x11\\x25\\x5a\\xf6\\x98\\x94\\x18\\x5d\\xe5\\xd5\\x07\\x5b\\x37\\\n\\x6d\\xbb\\x72\\xb7\\xb1\\xff\\x64\\xef\\xc3\\xa1\\xe3\\xe6\\xa4\\xdd\\x39\\x70\\\n\\xfc\\xca\\xde\\xe2\\xda\\x80\\xab\\x23\\x5e\\x0d\\x7c\\xfc\\xd7\\xba\\x9d\\x07\\\n\\x7f\\x3d\\x95\\x16\\xd0\\x61\\x5a\\xc8\\xd5\\xcd\\xe3\\x3a\\x3f\\xdc\\x19\\xb6\\\n\\x74\\xc4\\xe6\\x9c\\xa1\\x4f\\x47\\xaf\\x8c\\xab\\xfd\\x70\\xcb\\xe4\\x9a\\x51\\\n\\x6f\\x6b\\xfd\\x71\\xa0\\x56\\xed\\x94\\x31\\xb3\\x86\\x1f\\xdf\\xb6\\xa6\\xf8\\\n\\x9a\\x75\\xfb\\x2e\\xfb\\xfd\\xa5\\x6c\\x75\\xf4\\x7a\\x4a\\x93\\xf6\\xfe\\x5d\\\n\\xa6\\x75\\x0e\\x5b\\x5e\\xfe\\x98\\xe7\\xe7\\x27\\xb2\\x03\\x13\\x2b\\xce\\xea\\\n\\xda\\xab\\xda\\x4f\\x81\\x95\\x7f\\xbe\\xd5\\x7a\\xd8\\xd2\\xdf\\xc7\\x18\\x26\\\n\\xcd\\xb8\\x52\\x7d\\xd2\\xf3\\x9a\\x7f\\x65\\x16\\xd7\\x7b\\x76\\x7b\\x51\\xec\\\n\\x68\\xf7\\x5d\\x51\\xa5\\xbb\\x56\\x57\\xb6\\xff\\xf7\\x48\\x50\\xef\\xe7\\xc7\\\n\\xf7\\x5e\\x0f\\xbe\\x5d\\x2b\\x54\\xed\\xbf\\x2e\\xf3\\xf3\\x99\\xf5\\x65\\xb3\\\n\\x3e\\x9f\\x95\\x9d\\x33\\x28\\x43\\xee\\x21\\xcf\\x28\\xe1\\xad\\xa9\\x1a\\xb8\\\n\\x75\\xc0\\x6d\\xdf\\x13\\xb3\\xd2\\x76\\xb7\\xf2\\xf2\\xec\\x92\\x3e\\x3b\\xb6\\\n\\xb1\\x3e\\x3d\\x26\\x73\\x48\\xf0\\xcd\\x78\\xf7\\xd4\\xef\\x9f\\xf7\\xfa\\xae\\\n\\xd5\\x80\\x5d\\xbf\\x2a\\xa3\\xfb\\xa7\\xf8\\x6e\\x0d\\x7c\\x81\\x0c\\xa1\\xf5\\\n\\x0c\\x13\\x5a\\x18\\x36\\xfc\\xef\\xc5\\x89\\x13\\x0f\\x63\\x32\\x1f\\x7f\\x34\\\n\\x38\\xe3\\xa5\\xea\\xcd\\x88\\x5f\\x53\\x3c\\x7f\\x3b\\x3f\\xb4\\xc5\\x47\\x3d\\\n\\xba\\xbf\\x1a\\xb2\\x3e\\xbc\\x64\\xdc\\x97\\xd3\\x26\\xf4\\x1b\\xbe\\x77\\x6b\\\n\\xf4\\xaa\\x9e\\x5d\\x37\\x54\\xf7\\x0e\\xf9\\x74\\xd2\\xc3\\xcc\\xb6\\x5f\\x87\\\n\\x7f\\x74\\xe1\\xfa\\x09\\xef\\xf3\\xd3\\x27\\x46\\x4e\\x2c\\x1e\\xf5\\x74\\x04\\\n\\xc4\\x7b\\xb5\\x5f\\x54\\x45\\xa1\\x2b\\xf3\\xee\\x92\\x87\\xdf\\xdb\\x01\\xa3\\\n\\x63\\xd7\\x0d\\xa8\\xb3\\x6b\\xfb\\xa7\\xea\\x80\\xd1\\x8d\\x52\\xbf\\x68\\x5f\\\n\\xe7\\xe0\\xca\\xe6\\xa9\\x09\\xd1\\xeb\\x13\\x66\\xa4\\x7f\\x5c\\xfa\\xe4\\xf3\\\n\\x94\\xf2\\x65\\xcf\\x28\\x7f\\xbe\\xd7\\x7a\\xe3\\xa6\\x90\\x27\\xdb\\x4f\\xfa\\\n\\x0d\\x45\\x1e\\xd7\\xfd\\x4a\\x9f\\x1c\\xba\\xf2\\x75\\x9d\\x9e\\x95\\x2b\\x87\\\n\\xfe\\xe3\\x5e\\x0e\\x75\\x0d\\x73\\x55\\x7d\\xf0\\xb3\\xcc\\xa7\\xd8\\x10\\x14\\\n\\x12\\x59\\xbe\\x60\\x34\\xbc\\x84\\xea\\x9e\\xda\\x6f\\x7f\\xea\\x98\\xa9\\x8b\\\n\\xde\\x6c\\x1b\\x94\\x1a\\xb6\\x63\\x5b\\xb5\\xb8\\xa5\\x53\\xe3\\x97\\x7e\\x96\\\n\\xda\\xdb\\xaf\\x72\\xf8\\xe9\\x23\\xa3\\xba\\x27\\x8d\\x4f\\x55\\xa6\\x8f\\xee\\\n\\x55\\xfa\\xbc\\xb6\\x42\\xd2\\xbc\\x76\\x7d\\xd6\\x3f\\xfb\\xad\\xdd\\xfb\\x71\\\n\\xe1\\x43\\x6e\\x65\\xbd\\x7d\\x21\\x8b\\x9f\\x78\\x7d\\xef\\xca\\xdb\\x7e\\x27\\\n\\x76\\xba\\x29\\xd1\\xb9\\xf3\\x55\\x2a\\x7e\\x53\\xe6\\xd3\\xa0\\x77\\x8b\\x1b\\\n\\x64\\x75\\xba\\x99\\x11\\x72\\xba\\xbf\\x72\\xb0\\x9b\\xba\\x5c\\x5d\\xd9\\xc5\\\n\\x06\\x83\\x77\\x9d\\xac\\xec\\x21\\x53\\x86\\xb9\\x0f\\xdb\\xbf\\x21\\x2e\\xfc\\\n\\xfe\\xe5\\x85\\xef\\x56\\x94\\x4b\\x70\\xef\\x1d\\xee\\xae\\x4a\\x69\\xdd\\xa9\\\n\\x94\\xec\\x42\\x74\\x5f\\x7d\\xdf\\x75\\xc3\\xe3\\x6b\\xbe\\xae\\x3f\\x17\\x9d\\\n\\x99\\xb9\\xb1\\x7c\\x39\\xf9\\xaa\\x9d\\x7b\\x75\\x35\\xd7\\x1c\\x88\\x39\\xe5\\\n\\x85\\x36\\xa6\\xf9\\x37\\x72\\xd9\\xdb\\x77\\xf9\\xdd\\x79\\xfa\\x29\\x69\\x6f\\\n\\xaf\\x95\\x93\\x6b\\x36\\x97\\x09\\x08\\x77\\x1f\\xf6\\xf9\\xd5\\xbb\\x6e\\xba\\\n\\x71\\x7b\\x3a\\x3d\\x3e\\x75\\x39\\x56\\xde\\x51\\xd5\\xf9\\x6c\\xaa\\x47\\xac\\\n\\xc7\\xb0\\xcf\\x2f\\xfe\\x9b\\x33\\x3c\\xa9\\x44\\xf6\\xf3\\xf0\\xf7\\x9f\\xd4\\\n\\x54\\x57\\xd6\\x5c\\x8a\\xec\\x5b\\x26\\xe0\\xe9\\xca\\xa0\\xaf\\x26\\x1d\\x7f\\\n\\x37\\x46\\x16\\x91\\x10\\x72\\xfb\\xa7\\x56\\x6f\\x1a\\xaa\\xea\\x9c\\xde\\xb2\\\n\\xee\\xc1\\x37\\xb1\\xc5\\x2b\\xb9\\xf5\\x47\\xeb\\xaa\\xb5\\x0a\\xf8\\xe7\\xf6\\\n\\x8a\\x90\\xac\\x47\\xc5\\x6e\\x3d\\xff\\xa6\\xd7\\xc3\\xd5\\x11\\xcb\\x7f\\xff\\\n\\x7b\\xef\\xe1\\xa8\\x99\\xae\\x41\\x09\\x0b\\x67\\x7a\\xa2\\x47\\x03\\xdc\\x67\\\n\\x2c\\x6f\\x37\\x7d\\xd9\\x6f\\x4b\\xaf\\x4f\\xf1\\x8d\\x6e\\xfb\\x4f\\x40\\xef\\\n\\x7b\\x7f\\x27\\x3d\\x8b\\x6f\\x74\\x74\\xe7\\xee\\xb2\\x81\\x2e\\x1e\\xe8\\x51\\\n\\x67\\xf7\\x67\\xd7\\x5b\\x7d\\xab\\x38\\x98\\x72\\x79\\xda\\x29\\x4d\\x83\\xa4\\\n\\x8c\\xa4\\x4f\\xb4\\x5d\\x3f\\x7d\\xfa\\x63\\x17\\xbd\\x57\\x4b\\xf4\\x4b\\x96\\\n\\x57\\xb3\\x33\\x1b\\x52\\x87\\x4c\\xef\\xb4\\x79\\xc4\\xce\\xa1\\xa5\\xbe\\xa8\\\n\\x3f\\x3d\\xf0\\xb7\\x2f\\x0d\\x73\\xfb\\xfe\\x74\\xd7\\x4d\\x81\\x1e\\x35\\x71\\\n\\xf9\\x62\\xe8\\xce\\x87\\x27\\x2b\\x3c\\x2d\\xb7\\xc0\\xf3\\x6c\\x72\\xaf\\xcd\\\n\\x23\\x77\\x54\\xed\\xfa\\xf2\\xd3\\x5d\\x9b\\x51\\x52\\x0a\\x5a\\xb7\\x71\\xf5\\\n\\x66\\x45\\xf5\\x86\\x0f\\x5b\\x7c\\x39\\xee\\x5d\\x78\\xf4\\x11\\xcf\\xf1\\x19\\\n\\x8f\\x47\\x4f\\x4a\\x4b\\x0f\\x3c\\xf7\\x83\\xdb\\xa9\\xca\\x13\\x50\\xd0\\x01\\\n\\xdf\\xa8\\x7b\\x41\\x0b\\xce\\x55\\x99\\xdf\\x24\\x23\\x32\\x31\\xf0\\xe4\\x0d\\\n\\x05\\xca\\x54\\xca\\x47\\xcc\\x4b\\x8c\\xf5\\x0d\\x46\\x2a\\x5f\\xaf\\x45\\x89\\\n\\xb1\\x35\\x3b\\x40\\x60\\x4e\\xe2\\x00\\x9f\\xae\\x44\\xa0\\xde\\x64\\xef\\x88\\\n\\xf5\\xc3\\x64\\x68\\xae\\x3a\\xb4\\xb7\\xbe\\x4c\\x9b\\x52\\xa8\\x9e\\xcb\\xa9\\\n\\x53\\x77\\xe3\\x6b\\x8c\\x80\\xdf\\xbc\\xbd\\x23\\x4a\\x2f\\x55\\xa0\\x52\\x91\\\n\\xeb\\xf7\\xe8\\x46\\xce\\xaf\\x82\\xc2\\xdc\\x4b\\x2d\\x4f\\x4c\\x45\\x0a\\x9f\\\n\\xfa\\x2e\\x73\\x13\\xef\\x8e\\xf9\\x41\\xb6\\xeb\\x82\\x57\\x39\\xd7\\x05\\x27\\\n\\x5a\\xbb\\xaa\\x4f\\x96\\x8a\\x9c\\xb5\\x47\\x57\\x71\\x08\\x6a\\xb9\\xed\\x47\\\n\\x2f\\xdd\\xc0\\x65\\xa5\\xdf\\x8f\\x4a\\x7f\\xec\\x16\\xaa\\x5f\\x54\\xf1\\x69\\\n\\x16\\x7a\\xb2\\xed\\x75\\x40\\x64\\x74\\xcd\\xc3\\xfb\\x33\\xd2\\xbc\\x22\\x2e\\\n\\x0d\\x88\\x49\\x53\\x0c\\x0b\\x5a\\xdb\\x50\\xf6\\x76\\x76\\xaa\\xbe\\x61\\x39\\\n\\x94\\xd5\\xd0\\x65\\xee\\xb9\\xbb\\x97\\xc2\\xd0\\xf9\\x21\\xee\\xa5\\x96\\x24\\\n\\xc6\\x9e\\x45\\x67\\xc2\\xdd\\x4b\\xcd\\x4b\\x1c\\xa0\\x46\\x67\\x86\\xba\\xbf\\\n\\x89\\x4d\\x1c\\x70\\x06\\xd5\\x08\\x77\\x7f\\x13\\x93\\x38\\xa0\\xf5\\x95\\xbf\\\n\\x87\\x7b\\x44\\xbb\\xbe\\xd8\\x92\\xb9\\xe9\\xe6\\x80\\x86\\xdf\\xed\\xbe\\xd3\\\n\\xee\\xc1\\xf5\\xb8\\xbf\\xe7\\x6c\\x3b\\x58\\x42\\xff\\xc3\\xd2\\x85\\x6f\\x7b\\\n\\xf9\\xf7\\x09\\x54\\xf5\\x3a\\x53\\x71\\x6f\\x78\\xff\\x6e\\x13\\xfb\\xa5\\x19\\\n\\x7e\\x1b\\xbe\\xe8\\xc1\\x67\\x3e\\x4f\\x56\\x65\\xa3\\x4d\\x3a\\xff\\xe1\\x1d\\\n\\x33\\x8e\\x7b\\x3c\\xdd\\xf1\\xa2\\xa3\\x2a\\xe2\\xd7\\x77\\xbb\\xdd\\xa7\\xd7\\\n\\xe9\\x83\\x66\\xc4\\x1e\\x8c\\x69\\xb5\\xea\\x9b\\xf7\\x74\\xad\\xaf\\x2f\\xfa\\\n\\x79\\x73\\x88\\x6c\\xac\\xbc\\xd9\\x3f\\x93\\xaa\\x5e\\x99\\xde\\x4e\\x75\\x7f\\\n\\x67\\xc5\\xfa\\x1f\\x2f\\x95\\x6b\\xc6\\x5e\\x2f\\x7d\\x39\\xac\\xe5\\xdf\\x93\\\n\\x14\\x0f\\xfc\\xba\\xa2\\x37\\x2f\\x3d\\xe2\\x97\\xfc\\x5f\\xd6\\x21\\xcf\\xcc\\\n\\xa9\\x3b\\xf6\\x7e\\xd8\\x15\\x7d\\xb5\\x31\\x22\\xe2\\x46\\xad\\x7e\\x4d\\x7f\\\n\\x71\\xcb\\xdc\\xef\\xf9\\x22\\x6a\\xf1\\x72\\xaf\\x0f\\x8b\\xa9\\x67\\x6a\\x92\\\n\\xfb\\x35\\x1d\\x38\\xcf\\x4d\\x3d\\xe5\\xf0\\xe8\\x36\\x9e\\x33\\xe6\\xed\\xfd\\\n\\x38\\xf3\\x6e\\x72\\x5c\\xb8\\xdf\\xc2\\x90\\x6c\\xe4\\x1d\\x79\\x6e\\xa2\\xe1\\\n\\xfc\\xb7\\x95\\xa7\\xee\\xbb\\xff\\x4d\\xe5\\xe8\\x5e\\xed\\xb3\\xe2\\x9e\\x9e\\\n\\x38\\xe7\\x77\\xea\\xe5\\x4f\\x35\\x8e\\x28\\x51\\xb1\\x86\\x8b\\x7d\\xd1\\xfe\\\n\\xa3\\xb2\\x19\\xee\\x29\\x83\\x8f\\xbb\\xdd\\xf0\\x7f\\xec\\x53\\x72\\x42\\xcc\\\n\\x21\\x75\\x83\\xe1\\xa9\\xe7\\xef\\xf9\\xd5\\x6e\\xb1\\xf9\\x88\\xfa\\x04\\x8a\\\n\\x3f\\x70\\xe2\\xc7\\x09\\xe1\\x44\\x25\\x1d\\xec\\x16\\x14\\x37\\x1d\\x45\\x4f\\\n\\xae\\x8f\\xe2\\xd4\\xa5\\x50\\xcd\\x7a\\x8a\\xa0\\x12\\xe7\\x51\\x94\\xbc\\x61\\\n\\x51\\x8d\\xee\\xda\\x22\\x1b\\x5b\\x42\\xe7\\x75\\xb0\\xe4\\xa8\\xf3\\xe3\\xfa\\\n\\x14\\xab\\x2b\\x3b\\x9d\\x9c\\xfa\\x67\\x42\\xf3\\x2f\\x6e\\x35\\xdd\\x7e\\x3e\\\n\\x63\\xcc\\xf8\\x98\\x89\\xb5\\x8f\\x5e\\xcb\\xa9\\x96\\xde\\xed\\xc5\\xe2\\x69\\\n\\x07\\xb6\\xbb\\x36\\x19\\xf6\\xde\\xc1\\xf3\\x33\\x3c\\x77\\x1d\\xdb\\x34\\x49\\\n\\xb3\\x7c\\xc5\\x81\\x49\\x21\\xfd\\x7d\\x9f\\x2f\\xdb\\x69\\xa8\\x1b\\x13\\x72\\\n\\xfa\\xcc\\xe5\\x63\\x9f\\xe7\\x34\\x99\\x57\\x42\\xb5\\x67\\x62\\x44\\xd4\\xf3\\\n\\x52\\x91\\xf7\\x27\\x37\\x9d\\xe2\\xb5\\xe2\\x71\\xbb\\x97\\x63\\x3a\\x0d\\x4d\\\n\\xfe\\x37\\xe5\\xd0\\x19\\x0f\\x55\\x48\\x0c\\xfa\\x5c\\x7d\\xe0\\xf0\\xe8\\x3f\\\n\\x3d\\x16\\x2c\\xbc\\x17\\xb6\\xfd\\x69\\xed\\xec\\xcc\\x6b\\xd9\\xde\\x8f\\x43\\\n\\x8b\\xfb\\x76\\x45\\x6b\\x5c\\xaa\\x11\\xc6\\x8d\\x79\\x78\\x78\\x74\\x90\\xe7\\\n\\x9b\\x6f\\x94\\x1d\\x43\\x4e\\x77\\x70\\x5f\\x2a\\xff\\x65\\x4c\\xa2\\xe7\\xd8\\\n\\x2d\\x4f\\x5d\\xdf\\x04\\x29\\x33\\x5a\\x2b\\x97\\x2c\\xef\\xd9\\xa6\\x84\\xea\\\n\\xd2\\xe1\\xd1\\x2a\\xd7\\x7b\\x7b\\x76\\x56\\xac\\x07\\xc5\\xe8\\x93\\xb1\\x7b\\\n\\x9e\\x7e\\xb6\\x25\\x63\\x34\\x59\\x46\\x90\\xfa\\x7a\\xa4\\x5b\\xbf\\xa6\\xc1\\\n\\xc7\\xde\\xaa\\x26\\x2e\\xfc\\xfe\\xbd\\x3a\\x68\\x27\\x1a\\xa0\\x78\\x31\\xf1\\\n\\x5f\\xaf\\xb7\\x17\\x2b\\xff\\xb3\\xfb\\x65\\xeb\\xd3\\xcf\\x7f\\xde\\x1e\\xd0\\\n\\x6a\\xd6\\xca\\x98\\xd8\\xe8\\x9c\\x33\\x9b\\xb7\\xcc\\x3a\\x90\\xb1\\x40\\x1d\\\n\\xdb\\xf8\\xaa\\x4f\\xe3\\xbb\\x31\\xea\\x31\\xfe\\xb3\\xd2\\xfd\\xb5\\x55\\xbf\\\n\\x9b\\x55\\xbf\\xcd\\x13\\xf7\\x2b\\xdf\\x6f\\x68\\x94\\xdc\\xaf\\xf1\\xe1\\x4d\\\n\\xe9\\xf7\\xfc\\x1f\\x8f\\xa9\\xda\\x42\\xbe\\xef\\x41\\x8d\\xc7\\xcf\\xd6\\x2f\\\n\\x59\\xb2\\xf3\\xd7\\x16\\x6d\\x32\\x93\\xcb\\xc9\\x8b\\x95\\x52\\xcd\\xf0\\x8e\\\n\\x30\\x94\\x97\\xcf\\x29\\xa5\\x6a\\xe9\\x6d\\x18\\x9b\\xfb\\x97\\x9b\\xb5\\x73\\\n\\xee\\xd4\\x77\\x69\\x50\\x1e\\x65\\xed\\xd1\\xcd\\x3b\\xe7\\x75\\x26\\x0c\\x75\\\n\\x1c\\xfa\\xd2\\x33\\xd6\\xb7\\xde\\x6c\\xd9\\xae\\x03\\x9f\\x24\\x46\\x2c\\x78\\\n\\xd3\\xb1\\xcf\\x85\\x4c\\xbf\\xe1\\xa9\\x2b\\x1a\\xb8\\xa4\\x7f\\x4d\\x54\\xe8\\\n\\xd1\\x2f\\x03\\x3f\\x7f\\xeb\\x51\\x73\\xd5\\x8b\\xa6\\x71\\x33\\x47\\xba\\x37\\\n\\x3a\\x83\\xa6\\x86\\xfe\\x5f\\x62\\xc4\\x86\\xb3\\xae\\x8f\\x7d\\x9b\\xd6\\x73\\\n\\xa9\\x30\\x18\\x8d\\x22\\x12\\x4a\\xf0\\x1a\\x16\\x25\\x8b\\x0a\\xd5\\x9f\\x1c\\\n\\xe8\\xde\\xe8\\x4f\\xb4\\x4b\\x37\\xef\\x2f\\xaf\\x61\\x41\\x6f\\x20\\x70\\xc1\\\n\\x6b\\x4b\\xcd\\xf1\\x28\\x54\\x7f\\x2f\\xcc\\xfd\\x8a\\x57\\x63\\x54\\x3b\\x67\\\n\\x5c\\x7d\\x17\\xff\\xf9\\xe5\\x90\\xb7\\xa1\\x59\\x79\\x79\\x99\\x36\\x25\\xd1\\\n\\x82\\x88\\x94\\x52\\x91\\xc1\\x4b\\xe5\\xea\\xbb\\x4b\\x12\\xbc\\x6a\\x78\\xf9\\\n\\x11\\xb7\\x84\\x96\\x8a\\xec\\xf8\\x1e\\xfc\\xe1\\xac\\xd7\\x99\\x7a\\xe9\\xe8\\\n\\xd1\\xf4\\x97\\x86\\x9d\\x89\\x83\\x3d\\xdb\\xae\\xce\\x52\\x7b\\xfd\\xfc\\xf5\\\n\\x79\\xd9\\xe5\\xc1\\x2f\\x07\\x5c\\x58\\x93\\x76\\x6f\\xfe\\x39\\xe5\\xb2\\x94\\\n\\x99\\x51\\x47\\x3a\\x4f\\x69\\xe8\\x32\\xa4\\xdc\\xbd\\x91\\x09\\x4f\\x8f\\x1e\\\n\\x9e\\x5e\\xa6\\x59\\xcf\\x09\\xd9\\x6e\\x91\\xfb\\x16\\x4e\\x3a\\xf6\\xe5\\x84\\\n\\x56\\xe1\\x5a\\xd7\\x3d\\x19\\x49\\x15\\xde\\xba\\x3d\\x6b\\xf9\\xd9\\xb1\\xf0\\\n\\x81\\x21\\xbe\\x51\\xd9\\x7d\\xc6\\x96\\x18\\x52\\xa9\\x03\\x9a\\xd8\\x4f\\xdf\\\n\\xb7\\x7f\\xb1\\x6b\\x19\\xbd\\xaf\\xdf\\x9f\\x7b\\xad\\xa1\\x6b\\xcc\\xca\\xe3\\\n\\xb1\\xd7\\x22\\x63\\x2a\\xf6\\xe9\\xfc\\x93\\x97\\x7b\\x45\\x34\\xb3\\x66\\x4e\\\n\\x9d\\x4b\\xb2\\x5a\\x47\\xae\\xed\\x71\\x5d\\xe3\\xf7\\x60\\x4b\\xc7\\xa4\\xda\\\n\\xd1\\xe9\\x67\\x5f\\xec\\xd9\\x54\\xe6\\x9f\\x80\\x51\\x5d\\xbf\\xf7\\x72\\x2f\\\n\\x8f\\x66\\xd6\\xca\\x59\\xbb\\x22\\xb2\\x6c\\xe4\\x50\\xd5\\x46\\xef\\xeb\\x0d\\\n\\x27\\x7e\\x1e\\x37\\xf3\\xcd\\x87\\xc3\\x63\\xf7\\x0d\\x7e\\xe6\\xeb\\x55\\x17\\\n\\x65\\x7e\\xa5\\x7f\\xb2\\xb9\\xfe\\xbc\\xa0\\x2d\\xe8\\x67\\xed\\xa3\\xe1\\xfb\\\n\\x13\\xe3\\x2b\\x4d\\x0a\\x0e\\x9b\\x93\\xd9\\xb4\\x5a\\x72\\x74\\x65\\x14\\x3e\\\n\\xb5\\xd4\\x54\\xd7\\x66\\x5d\\xef\\x4c\\x98\\xfc\\xea\\xcb\\xb5\\xed\\xbe\\x6f\\\n\\xa7\\x4a\\xba\\xd0\\x64\\x68\\x0e\\xd1\\xac\\xf5\\x78\\xe1\\xd5\\x57\\x7f\\xab\\\n\\x6b\\x75\\x97\\xfe\\x63\\x0e\\xd6\\x99\\xd0\\x74\\x2e\\xaa\\x71\\xac\\xf7\\xa0\\\n\\x97\\x23\\x0f\\x6c\\xf3\\xed\\x72\\xff\\xfc\\x9e\\x5e\\xc4\\x1d\\x07\\x4a\\x3e\\\n\\xd8\\xa7\\x6b\\xdc\\x69\\xb9\\xd7\\x96\\xf1\\xd7\\x2e\\xd7\\x22\\x1a\\xcb\\x5a\\\n\\x2b\\x5f\\xf7\\xd6\\xaf\\xda\\xd8\\xc8\\x25\\x60\\xc4\\xee\\x3a\\x13\\x1a\\xbe\\\n\\xd9\\x8c\\xce\\x3d\\x4b\\xbd\\x77\\xf1\\x48\\xb6\\xff\\xf2\\xd7\\x13\\xc3\\xd6\\\n\\x4e\\xce\\xf2\\xbf\\xf2\\xde\\x93\\xfa\\x3e\\xea\\x91\\x1d\\x3d\\x23\\xcb\\xd4\\\n\\x9e\\xb5\\xbc\\xc5\\xa9\\x37\\xa7\\xcf\\x3d\\x8d\\xdb\\x79\\x7b\\x66\\x99\\xba\\\n\\xc8\\x67\\xe3\\x4b\\xbf\\xfd\\xcb\\xb2\\x2a\\x8c\\x5d\\x9c\\x13\\xb0\\xbd\\x87\\\n\\xa1\\x53\\xc8\\xe9\\xcb\\x8d\\xf7\\x5f\\xfa\\xe8\\xe3\\xbf\\x53\\xc7\\xe4\\xd4\\\n\\xf1\\x55\\x04\\x75\\x7d\\x7f\\x5b\\xd5\\xa8\\xb8\\xf9\\xa6\\xeb\\x67\\x31\\x4d\\\n\\xeb\\x07\\x47\\xe7\\x25\\x8f\\xfa\\x21\\xee\\x54\\xcb\\xa5\\xcd\\x53\\x67\\x17\\\n\\xd3\\xbc\\x3e\\xbf\\x72\\xe6\\x92\\x63\\x8d\\xea\\xc6\\xc6\\x7c\\x25\\xd7\\x6d\\\n\\xff\\x64\\x78\\x39\\x8f\\x07\\x17\\x0f\\x06\\xe5\\xd4\\xda\\xa7\\xef\\x74\\xac\\\n\\x51\\xa9\\x43\\x69\\xfe\\x47\\x8f\\xa1\\x94\\xf3\\x6b\\xbe\\xfd\\x51\\x3f\\xb2\\\n\\x64\\xfb\\x7f\\x9b\\x05\\xe7\\x3c\\xea\\xd6\\xb4\\x6c\\x8d\\xe9\\xed\\x6e\\xc7\\\n\\x9c\\x4b\\xae\\x3a\\x7c\\x71\\x87\\x11\\x6f\\x4e\\xc9\\xb5\\xed\\x13\\xdc\\x56\\\n\\x55\\xd9\\xf2\\x65\\xd7\\x3d\\x39\\x7b\\xc3\\x6e\\x77\\xf6\\xe9\\x97\\xfc\\xf0\\\n\\x78\\x99\\x61\\x1b\\x13\\xe6\\x76\\x18\\xd1\\xff\\x6c\\xbd\\x6f\\x4f\\x9c\\x88\\\n\\xef\\xd5\\x20\\xe0\\xd6\\xd9\\x77\\xa3\\xe6\\xc5\\x05\\x57\\x3f\\x1b\\x7f\\xaf\\\n\\xc7\\x8d\\x17\\xc5\\x75\\xad\\x13\\x3a\\x7c\\xd1\\x38\\xa9\\x67\\xfb\\xd2\\xd3\\\n\\xf7\\x84\\xdd\\x8e\\x4d\\xd3\\x2f\\x39\\x70\\xa6\\xf3\\xe2\\xc6\\xcf\\xfe\\xcf\\\n\\xe7\\xed\\x85\\xef\\xbb\\xaf\\x3e\\x34\\x49\\x7f\\xed\\xa2\\xa7\\xd2\\xe5\\x45\\\n\\x99\\x19\\xba\\x51\\xe7\\x2a\\x56\\xdd\\x7a\\xbe\\xf9\\xab\\xa7\\x19\\x55\\xa6\\\n\\x4f\\xf4\\x9e\\x16\\x1f\\x26\\xdb\\x3e\\xd5\\xdb\\xe7\\x6d\\xa2\\x8b\\xae\\xce\\\n\\xbb\\xb7\\x59\\xcb\\x8e\\x79\\xbf\\x1a\\x9f\\x20\\x6f\\xa2\\x4a\\xdb\\xb7\\xaf\\\n\\x71\\xf4\\xfc\\xaf\\x7e\\xd9\\x31\\x79\\xc0\\xed\\x91\\xbe\\x0b\\x7e\\x6a\\x55\\\n\\x3a\\xd4\\x6d\\xdd\\xa8\\xe1\\xb3\\x3f\\xba\\xff\\x6d\\xf4\\xcd\\xf0\\xf0\\x17\\\n\\x01\\xd3\\x63\\x33\\x4f\\x1e\\x3f\\x50\\xd2\\x7b\\xaf\\x6c\\xc6\\xfc\\x18\\x39\\\n\\xd1\\xdb\\x8c\\xab\\x50\\x7b\\xeb\\xcd\\x03\\x19\\x7d\\x35\\xef\\x0f\\x1e\\x2a\\\n\\xab\\xa8\\xce\\xba\\x30\\x7a\\x59\\x5c\\xc7\\xb4\\x6e\\x3d\\xb7\\x6f\\x1f\\xa4\\\n\\xff\\xe2\\x97\\x37\\xb5\\xc3\\x14\\xcd\\x52\\x89\\x7e\\xea\\x5f\\x63\\xd7\\xbd\\\n\\xfa\\xa4\\xd5\\xda\\x3d\\x9a\\xb6\\xfb\\xdb\\x7d\\x5a\\x67\\xe5\\xc5\\xc6\\xbf\\\n\\xf7\\x8e\\x1e\\xd2\\xbc\\xdd\\xb7\\x33\\xfb\\x6f\\xd0\\x6c\\x0c\\xb8\\xd4\\x3d\\\n\\x34\\x72\\xa8\\xbc\\x6b\\xd6\\xb6\\x19\\xaf\\xc7\\x44\\x8d\\x38\\x7c\\x26\\x71\\\n\\x7e\\xad\\x69\\xca\\x31\\xa5\\x3a\\x74\\x5a\\xdd\\x65\\xd6\\x85\\x13\\x8d\\xfb\\\n\\xed\\xf8\\xfd\\x0f\\x45\\xf7\\x23\\x1f\\xdc\\xf0\\xf9\\x77\\xe5\\x9b\\xf7\\xd6\\\n\\x5f\\x59\\x58\\xbd\\xe6\\x89\\xe4\\x13\\xaf\\xaf\\x18\\x82\\xae\\x96\\xf9\\x58\\\n\\x31\\xa5\\xd6\\xce\\xa9\\x6b\\xaf\\xb4\\x4e\\xd8\\x23\\xdb\\xba\\xaa\\xf8\\xd6\\\n\\xb9\\x1d\\xd6\\xbd\\x4e\\x5b\\xf3\\x22\\x7a\\xc4\\xc1\\x15\\x07\\xfc\\x77\\xce\\\n\\x18\\xd9\\xc7\\x2f\\x7b\\xb2\\xda\\x27\\xea\\x55\\x47\\xd5\\x94\\x1a\\x4f\\x6f\\\n\\x1f\\xb9\\xfe\\xe6\\xb3\\x6e\\xa5\\x3f\\xe9\\xb6\\xc7\\xb7\\x62\\xdc\\x00\\xff\\\n\\xb5\\xa7\\xaf\\xcf\\x6f\\x9f\\x34\\x63\\x65\\xf7\\xaa\\x7e\\x27\\x9e\\xac\\x6e\\\n\\xf2\\x3c\\xf9\\xce\\xe6\\xf9\\xdb\\xa6\\x28\\x33\\x56\\xf5\\x0c\\xd9\\xdc\\x24\\\n\\x5e\\x16\\x71\\x65\\xe2\\xa7\\x1b\\x23\\x75\\xef\\x6f\\x75\\xad\\xdb\\x25\\xbd\\\n\\x5a\\x6c\\xef\\x6e\\xe9\\x49\\x07\\x4f\\x97\\xa8\\x38\\xa3\\x8a\\xee\\xb3\\x3b\\\n\\x43\\xc7\\xa7\\x54\\x3f\\xb6\\xe6\\x8d\\xc7\\xf0\\xb8\\x5f\\x53\\x12\\x3a\\xc4\\\n\\xf9\\x36\\xef\\x38\\xcd\\x3b\\x22\\xea\\xf7\\x03\\x19\\x2b\\x74\\x75\\xb5\\x17\\\n\\xbc\\x57\\x64\\x4d\\xef\\xf4\\x95\\x47\\xb3\\xe6\\xcd\\x1b\\x07\\xae\\x5d\\x7f\\\n\\xb9\\x6c\\x87\\x40\\xa4\\x6f\\xa1\\x4d\\x8d\\x6b\\xea\\x12\\xd8\\xff\\xce\\xeb\\\n\\xe8\\x55\\x6f\\x5b\\x68\\xe2\\xdb\\xc7\\xbc\\xdf\\xb6\\xc3\\xc7\\xb2\\xc9\\x7d\\\n\\x5c\\xeb\\x26\\xa9\\xc3\\x5d\\xdb\\x2f\\xef\\xe7\\x96\\x33\\xe2\\x75\\xc4\\x82\\\n\\x1e\\xcd\\x15\\x37\\x5e\\x9d\\x50\\xfb\\x69\\x3c\\x23\\x03\\xb7\\xee\\xae\\xd4\\\n\\xfe\\xaa\\xbe\\x95\\xb6\\xf1\\x88\\x94\\x86\\xc4\\x8b\\xd1\\xae\\xa4\\x86\\x71\\\n\\x49\\x9e\\x97\\x5c\\xe3\\xd2\\xfb\\xb9\\x1d\\xf7\\x98\\xd1\\x7d\\x4a\\x6b\\xbf\\\n\\x0d\\x8a\\xb4\\x87\\x55\\x35\\x4b\\xda\\x77\\x76\\x1f\\xdd\\x78\\x6f\\xc7\\xf6\\\n\\x9e\\x47\\x8a\\xe9\\xeb\\x6c\\xbd\\x36\\xa2\\x6c\\x44\\xdf\\x15\\x21\\x6b\\xbd\\\n\\x3a\\x0c\\xa8\\x7d\\xf7\\x7f\\xff\\xdb\\x9b\\xb1\\xb7\\xc3\\xb6\\xad\\xa7\\x94\\\n\\x15\\x9b\\x4c\\x2a\\xbe\\x2b\\xa6\\xad\\xa6\\xed\\x3f\\x61\\xc5\\x2e\\x25\\x5d\\\n\\x6c\\xd8\\x79\\xf8\\x8e\\x17\\xcb\\x5c\\xd3\\x74\\x6e\\x9a\\xa1\\x71\\x39\\xf5\\\n\\x17\\x8d\\x6c\\x88\\x26\\x7f\\x12\\x52\\x62\\x76\\x7c\\x54\\x15\\x65\\x95\\x55\\\n\\x49\\xd3\\x36\\xfa\\x1e\\x2a\\xf6\\x95\\x6c\\x56\\x6b\\xff\\xcc\\xe4\\x6f\\xe2\\\n\\xc7\\xf6\\x97\\xed\\x4a\\xae\\xaf\\x71\\x19\\x3b\\xf1\\x75\\x6a\\xbb\\x1b\\x55\\\n\\xb6\\x84\\x6d\\x3f\\xf0\\x53\\xa3\\x26\\x2d\\xa6\\x1f\\xba\\xed\\x3a\\x3a\\x7a\\\n\\x9a\\x7a\\x96\\x7c\\xc6\\xd1\\x77\\x69\\x87\\x32\\x23\\xfe\\x37\\x3a\\xb0\\x72\\\n\\xed\\x4b\\x0b\\xbc\\xe1\\xe5\\xbd\\x7d\\xdb\\x2f\\xda\\xec\\x0c\\x0e\\xfb\\xae\\\n\\x06\\xbc\\xbc\\x93\\x6f\\xf3\\xb9\\x2f\\xd4\\xb9\\x70\\x97\\x21\\x01\\x50\\x8c\\\n\\x20\\xe2\\x35\\x1f\\xcd\\x26\\x68\\x1f\\x41\\x29\\x04\\xa5\\x11\\x94\\x43\\x90\\\n\\x01\\x93\\x5d\\x28\\x87\\xd2\\x79\\x0a\\x65\\x83\\xd9\\x94\\x4d\\x8a\\xf1\\x5a\\\n\\xcd\\x76\\x54\\x26\\x68\\x31\\x41\\x8f\\x25\\x92\\x19\\x93\\x69\\x7a\\x4c\\xd9\\\n\\xa8\\x32\\x8f\\x0d\\xad\\x81\\x27\\x41\\x4b\\x09\\x7a\\xe7\\x00\\xf2\\x61\\x32\\\n\\x8f\\xc0\\x56\\x51\\x94\\xed\\x6c\\x41\\x30\\x41\\x0f\\x1c\\x40\\x1e\\x4c\\xd6\\\n\\xd1\\x03\\xca\\x86\\xd6\\x60\\x22\\x41\\x7a\\x07\\x90\\x01\\x93\\x6d\\xa4\\xa7\\\n\\x6c\\x69\\x09\\xe6\\x99\\x91\\x6e\\x3a\\x41\\x47\\x08\\x9a\\x43\\x50\\x38\\x41\\\n\\x3d\\x09\\xea\\x8c\\xc9\\x2e\\x04\\xba\\x1e\\x44\\xd0\\x5c\\xca\\x06\\xe9\\x66\\\n\\xd8\\x6b\\x1e\\x32\\x0f\\x13\\x4d\\xa4\\x73\\x1d\\x91\\xf6\\x2e\\x65\\x66\\x7a\\\n\\x18\\xe2\\x03\\x6c\\x01\\x36\\xb9\\x89\\x8c\\xdb\\x6e\\xbc\\x89\\x74\\xa0\\xad\\\n\\xe0\\xf3\\xf9\\x19\\xd4\\xf3\\x2e\\xc2\\xb3\\x8f\\x21\\x10\\xc0\\x36\\x60\\x23\\\n\\xb0\\x15\\x5f\\x5b\\xc0\\xd7\\x1f\\x80\\xbe\\x22\\x5f\\x5f\\xef\\x1e\\x41\\xf5\\\n\\xc4\\x64\\x1c\\x43\\x50\\x80\\xad\\xc0\\x66\\x5c\\xb6\\x04\\x1b\\x73\\xbd\\x17\\\n\\x2c\\xe5\\xb9\\x1f\\xd2\\x51\\x8a\\xcf\\x32\\x86\\xc0\\x00\\x9b\\xf1\\x95\\x81\\\n\\x28\\xd6\\xbd\\x30\\x5e\\xc0\\xf5\\x7e\\x0f\\x7e\\x04\\xd7\\xfb\\xc2\\x0b\\xb0\\\n\\x1d\\x57\\x5b\\x00\\xb6\\x66\\x8e\\x11\\x2d\\xe6\\xb8\\x07\\x68\\x9c\\x3d\\x99\\\n\\xc5\\x10\\x05\\xd0\\x1f\\xe0\\xb2\\xed\\x62\\xea\\x77\\x18\\x33\\xe6\\x1a\\xd3\\\n\\x85\\x7e\\x3e\\xee\\xeb\\x15\\x7e\\x80\\x0d\\x6f\\xa1\\x82\\xf6\\x7d\\x84\\x48\\\n\\xdb\\xb7\\xe6\\xf8\\x0d\\x28\\x5c\\x0a\\x66\\x31\\x44\\x01\\x8c\\x15\\x70\\xd9\\\n\\x38\\x10\\x91\\x73\\x47\\x5c\\x63\\x3b\\xa5\\x25\\xe1\\x14\\x43\\x0c\\x80\\x2d\\\n\\xb9\\xc6\\x88\\xe8\\x39\\x5c\\xf6\\xdf\\x0f\\x4b\\xc3\\x26\\x86\\x88\\x80\\x71\\\n\\x42\\xb6\\x9d\\xe9\\xf9\\x7b\\xf6\\xdf\\xe7\\x48\\xc4\\x23\\x86\\x78\\x80\\xb1\\\n\\x62\\xb6\\x9d\\xe9\\xb5\\x1b\\xb8\\xed\\x2f\\xfa\\xe0\\xea\\x03\\xf0\\xad\\xdb\\\n\\xe9\\x29\\x11\\x8f\\x18\\xe2\\xa1\\x17\\x2a\\x68\\x67\\xbe\\x35\\x5b\\x9d\\x25\\\n\\xe2\\x11\\x43\\x3c\\x80\\x4d\\x8d\\xcd\\x0d\\x61\\xfb\\x17\\x6d\\x60\\xfb\\x3b\\\n\\x37\\xb0\\xfd\\x9d\\x1b\\xd8\\xfe\\xce\\x0d\\xa9\\xec\\x5f\\x86\\xa0\\xdf\\x11\\\n\\x39\\xe7\\x74\\x85\\xa0\\x36\\x02\\xa6\\x5d\\xd4\\x00\\xba\\x01\\x1d\\x81\\xae\\\n\\x40\\x67\\x65\\x04\\x4c\\x5b\\x2a\\xfb\\xef\\x61\\xa5\\x0d\\xb2\\x75\\x12\\x30\\\n\\xfd\\xa2\\x02\\xd0\\x09\\x7b\\x0e\\xfe\\x77\\x01\\xd3\\x97\\xca\\xfe\\x99\\x1c\\\n\\xe9\\xe3\\x32\\x90\\x1f\\x5c\\xb6\\x07\\x7a\\x2b\\x60\\x1e\\x52\\xd9\\xff\\x2a\\\n\\x4f\\x1e\\xb8\\x0c\\x90\\xe0\\xb3\\x3d\\x50\\x92\\x80\\xf9\\x48\\x65\\x7f\\x68\\\n\\xd3\\xf8\\xe4\\x73\\xf6\\x32\\x60\\xcc\\xf6\\xf0\\x77\\x21\\xfb\\x4a\\x52\\xf6\\\n\\xff\\x4d\\xc9\\x69\\x6e\\x19\\x78\\x8f\\xa0\\x48\\x82\\xd6\\x13\\xd4\\x17\\x91\\\n\\xbb\\x41\\x49\\x0d\\xe0\\x01\\x78\\x01\\x9e\\x80\\xb7\\xf7\\xcc\\x7c\\x4e\\x28\\\n\\x9d\\x98\\x0b\\xa9\\xdf\\xff\\x6c\\x95\\x17\\xd6\\xaa\\x5c\\x62\\x3d\\xa7\\x12\\\n\\x81\\x4f\\x4b\\xa1\\x42\\xf9\\x79\\xba\\x88\\x4c\\xaf\\x9b\\xb2\\xb7\\xed\\x01\\\n\\x52\\xdb\\x1f\\x60\\x8b\\xdc\\xc1\\x1c\\xcf\\x3c\\x17\\x89\\x4f\\x4b\\x00\\x3c\\\n\\xb0\\xf9\\x32\\xf6\\xcd\\x9d\\x14\\xb6\\x07\\x38\\x82\\xfd\\x01\\xd6\\xca\\xcf\\\n\\xc7\\xbf\\xd4\\xb0\\x44\\x7f\\x52\\xd9\\x1e\\x21\\xc7\\xb1\\x3f\\xc0\\x1a\\x3d\\\n\\x14\\x76\\xfb\\x4b\\x69\\x7b\\x84\\x1c\\xcb\\xfe\\x00\\x4b\\xf5\\x51\\x98\\xed\\\n\\x2f\\xb5\\xed\\x11\\x72\\x3c\\xfb\\x03\\x2c\\xd1\\x4b\\x61\\xb5\\xbf\\x23\\xd8\\\n\\x1e\\x21\\xc7\\xb4\\x3f\\xc0\\x5c\\xfd\\x14\\x46\\xfb\\x3b\\x8a\\xed\\x11\\x72\\\n\\x5c\\xfb\\x03\\xcc\\xd1\\x53\\x61\\xb3\\xbf\\x23\\xd9\\x1e\\x21\\xc7\\xb6\\x3f\\\n\\xc0\\x94\\xbe\\x56\\xf3\\xfc\\x26\\x35\\xb8\\x78\\x02\\x5e\\x1d\\xc9\\xf6\\x00\\\n\\x47\\xb7\\x3f\\xc0\\x58\\x19\\xe0\\x23\\xa9\\x61\\x09\\xaf\\x52\\x8e\\x77\\x17\\\n\\x06\\xfb\\x03\\x2c\\x2d\\x03\\x52\\xa3\\x30\\xd8\\x1e\\x50\\x58\\xec\\x0f\\xb0\\\n\\xa4\\x0c\\x48\\x8d\\xc2\\x60\\x7b\\x80\\xa3\\xd9\\x1f\\xc6\\xc8\\x83\\x11\\xff\\\n\\x1e\\x47\\xab\\xcc\\xe4\\x55\\x6a\\x98\\xc3\\x23\\xc8\\xc2\\x27\\x27\\xe8\\xc0\\\n\\x1e\\xdf\\x59\\x3b\\x92\\xfd\\x61\\x8e\\xec\\xa2\\x05\\xfc\\x14\\x76\\xfb\\x9b\\\n\\x22\\xd0\\x85\\x97\\xc8\\x7c\\x3a\\x92\\xfd\\x23\\x2d\\xe0\\xc5\\x19\\xec\\x0f\\\n\\xa4\\x12\\x99\\x4f\\x47\\xb2\\xff\\x7a\\x0b\\x78\\x31\\x46\\xef\\x44\\xe6\\xd3\\\n\\x1c\\x08\\xb5\\x2f\\xee\\x7a\\x91\\xf9\\x74\\x24\\xfb\\xf7\\xb5\\x80\\x17\\x63\\\n\\x24\\xe4\\xfa\\x48\\x6b\\x01\\x3c\\x08\\x21\\x4b\\x5f\\x91\\xf9\\x74\\x24\\xfb\\\n\\xc3\\x9a\\x19\\x15\\xe2\\x9e\\x3b\\x37\\xb7\\xde\\x83\\xde\\x3f\\x10\\x99\\x4f\\\n\\x73\\x00\\x3c\\xd0\\xeb\\xdb\\xad\\x91\\x05\\x74\\x30\\x0b\\x89\\xbf\\x96\\xc9\\\n\\x91\\xec\\x8f\\x61\\x7f\\x60\\xfb\\x3b\\x37\\xb0\\xfd\\x9d\\x1b\\xd8\\xfe\\xce\\\n\\x0d\\x6c\\x7f\\xe7\\x06\\xb6\\xbf\\x73\\x03\\xdb\\xdf\\xb9\\x81\\xed\\xef\\xdc\\\n\\xc0\\xf6\\x77\\x6e\\x60\\xfb\\x3b\\x37\\xb0\\xfd\\x9d\\x1b\\xd8\\xfe\\xce\\x0d\\\n\\x6c\\x7f\\xe7\\x06\\xb6\\xbf\\x73\\x03\\xdb\\xdf\\xb9\\x81\\xed\\xef\\xdc\\xc0\\\n\\xf6\\x77\\x6e\\x60\\xfb\\x3b\\x37\\xb0\\xfd\\x9d\\x1b\\xd8\\xfe\\xce\\x0d\\x6c\\\n\\x7f\\xe7\\x06\\xb6\\xbf\\x73\\x03\\xdb\\xdf\\xb9\\x81\\xed\\xef\\xdc\\xc0\\xf6\\\n\\x77\\x6e\\x60\\xfb\\x3b\\x37\\xb0\\xfd\\x9d\\x1b\\xd8\\xfe\\xce\\x0d\\x6c\\x7f\\\n\\xe7\\x06\\xb6\\xbf\\x73\\x03\\xdb\\xdf\\xb9\\x81\\xed\\xef\\xdc\\x70\\x24\\xfb\\\n\\x0b\\xb5\\xff\\x83\\x90\\xe7\\xe3\\x59\\x0b\\xe6\\xf9\\x86\\xd6\\xc8\\xf2\\x0c\\\n\\x39\\xdf\\xfe\\x0f\\x78\\xff\\x97\\x82\\xe4\\x4c\\xfb\\xbf\\xe0\\xfd\\x9f\\x0a\\\n\\x92\\x33\\xed\\xff\\xf4\\x9d\\x05\\xbc\\x98\\x22\\xa9\\x21\\x94\\x1c\\x91\\x22\\\n\\xf3\\xe9\\x48\\xf6\\x87\\xfd\\x1f\\x2f\\x59\\xc0\\x4f\\x51\\xb7\\xbf\\xb3\\xed\\\n\\xff\\x08\\x80\\xf3\\xdc\\xf0\\xfe\\xaf\\xce\\xb9\\xff\\xab\\x29\\xe0\\xfd\\x9f\\\n\\x85\\x47\\x61\\xb1\\x3f\\xde\\xff\\x5d\\x1c\\x14\\x06\\xfb\\xe3\\xf3\\x1f\\xc4\\\n\\x83\\xa3\\xdb\\xdf\\xd4\\xf9\\x2f\\x7c\\xfd\\x01\\xa9\\xc1\\xd7\\xde\\xe3\\xf3\\\n\\x5f\\xcc\\x07\\x3e\\xff\\x49\\x7c\\x38\\xaa\\xfd\\xf1\\xf9\\x6f\\xf6\\x81\\x23\\\n\\xda\\x1f\\x9f\\xff\\xe8\\xbc\\xe7\\x3f\\xe2\\xf3\\x5f\\xed\\x5b\\x06\\x1c\\xc9\\\n\\xfe\\xf8\\xfc\\x67\\xfb\\x97\\x01\\x47\\xb1\\x3f\\x3e\\xff\\x5d\\x9a\\x32\\xe0\\\n\\x08\\xf6\\xb7\\x45\\xfe\\x60\\x8e\\x67\\x9e\\x8b\\xc4\\xa7\\x25\\xe0\\x5a\\xc3\\\n\\x10\\x6c\\xe4\\x7e\\xa9\\xca\\x80\\xd4\\xf6\\xb7\\x55\\x6e\\x98\\x2f\\xb8\\xcc\\\n\\x7a\\x4e\\x25\\x02\\x9f\\x96\\x42\\x85\\xf2\\xf3\\x04\\x73\\x39\\xa6\\xc6\\xf3\\\n\\xa5\\x28\\x03\\x52\\xda\\x5f\\x28\\x79\\x61\\xde\\x10\\xe6\\x49\\x61\\xae\\x1c\\\n\\xd6\\x4b\\x88\\xbd\\x66\\xc6\\x1c\\x00\\x0f\\xc0\\x0b\\xf0\\x04\\xbc\\x99\\x3b\\\n\\x8f\\x67\\xef\\x32\\x20\\x95\\xfd\\xdb\\x22\\xe9\\xfb\\xbe\\x8e\\x0a\\x53\\x65\\\n\\xa0\\x8d\\x80\\x79\\x49\\x65\\xff\\xeb\\x3c\\x79\\x38\\xbb\\xed\\x69\\x18\\x2b\\\n\\x03\\x49\\x02\\xe6\\x23\\x95\\xfd\\x33\\x39\\xd2\\xc7\\xb6\\xcf\\x0f\\xbe\\x32\\\n\\xf0\\x56\\xc0\\x3c\\xa4\\xb2\\x3f\\x7b\\x7d\\x24\\xb6\\x3d\\x37\\xb8\\xca\\xc0\\\n\\x6e\\x01\\xd3\\x97\\xca\\xfe\\xcc\\xf5\\xd1\\xe0\\xcf\\x84\\x6c\\xd3\\x8a\\x1a\\\n\\x40\\x37\\x57\\x08\\xd2\\x21\\xd2\\xf6\\x42\\x9e\\x6f\\x28\\xf5\\xfb\\x1f\\x86\\\n\\xb4\\xc0\\xf6\\x77\\x6e\\x60\\xfb\\x3b\\x37\\xb0\\xfd\\x9d\\x1b\\xd8\\xfe\\xce\\\n\\x0d\\x4b\\xec\\xdf\\x53\\x22\\x1e\\x31\\xc4\\x43\\x2f\\x54\\xd0\\xce\\x39\\x04\\\n\\xa5\\x71\\xfc\\x3d\\x5c\\x22\\x1e\\x31\\xc4\\xc3\\x20\\x54\\xd0\\xce\\x60\\xfb\\\n\\x14\\x8e\\xbf\\xcf\\x91\\x88\\x47\\x0c\\xf1\\x30\\x17\\x15\\xb4\\x33\\xd8\\x7e\\\n\\x1f\\xc7\\xdf\\x0f\\x4b\\xc4\\x23\\x86\\x78\\x38\\x82\\x0a\\xda\\x19\\x6c\\x3f\\\n\\x9b\\xe3\\xef\\xe9\\x04\\x95\\x96\\x86\\x4d\\x0c\\x11\\x00\\xb6\\x04\\x9b\\xb2\\\n\\xed\\x0c\\xb6\\x6f\\xcd\\xf1\\x77\\xdc\\x07\\x28\\x5a\\xe0\\x6a\\xfb\\x81\\x82\\\n\\x10\\xb9\\xae\\xe6\\x31\\xc7\\x6f\\x30\\x6f\\x6b\\x8f\\xef\\x52\\x31\\xc4\\x05\\\n\\xd8\\xf0\\x26\\x2a\\x68\\xdf\\x47\\x88\\xb4\\x3d\\x60\\x31\\xc7\\xef\\x40\\xe3\\\n\\xec\\xcd\\x2c\\x86\\xe0\\x18\\x8f\\xb8\\x6d\\xbb\\x88\\x71\\x4f\\x65\\xc4\\x3d\\\n\\xff\\x9c\\x41\\xd0\\xc7\\xf6\\x64\\x16\\x43\\x50\\xd4\\x43\\xa4\\x0d\\xd9\\x76\\\n\\x05\\x5b\\x57\\x66\\xdd\\xbb\\x94\\xe3\\x3e\\xa0\\x7b\\x1c\\xf7\\x62\\x38\\x3e\\\n\\x94\\x88\\xb4\\x1d\\x97\\x4d\\xa3\\x38\\xee\\xf7\\x20\\xe8\\x01\\xcf\\xfd\\x90\\\n\\x0e\\xf6\\x03\\x85\\x07\\x50\\xef\\xf9\\x6c\\x0f\\x36\\xf6\\xe0\\x79\\x0e\\xd6\\\n\\xad\\xeb\\x79\\x9e\\x03\\x3f\\x02\\xfd\\x01\\xdc\\x27\\x74\\x5c\\x80\\x6d\\xa0\\\n\\xbd\\xe7\\xf2\\xf9\\x40\\x60\\x5b\\x63\\xdf\\x26\\x00\\x26\\xf2\\x3c\\xcb\\x7c\\\n\\x2f\\x80\\x77\\x43\\x3c\\x3e\\xe0\\x38\\x00\\x5b\\x80\\x4d\\x6e\\x20\\xe3\\xb6\\\n\\x1b\\x6f\\x66\\x7a\\xf3\\x4c\\xa4\\x43\\x8f\\x11\\xc1\\x98\\xd2\\x1c\\x2a\\x6f\\\n\\x98\\x33\\xe2\\xdb\\xe3\\x08\\x93\\xb0\\xd4\\x93\\xd2\\xf9\\x1c\\xca\\x06\\x5c\\\n\\x63\\x3b\\x6c\\x9a\\x87\\x2c\\x03\\xf8\\x01\\xbe\\xb6\\x00\\x53\\xe1\\x21\\xb0\\\n\\xa1\\xb9\\xf5\\x9e\\x0d\\x68\\x2b\\xf8\\xfa\\x84\\x98\\x1c\\x9f\\x1e\\x20\\xd3\\\n\\xed\\xbd\\x29\\x40\\x5f\\x11\\xde\\x0d\\x85\\xda\\xe7\\x14\\x93\\xf8\\x04\\xb6\\\n\\x8a\\x42\\xfc\\xfd\\x7c\\x6b\\x00\\x63\\x00\\x30\\x4e\\xc8\\x35\\x56\\x8c\\xc9\\\n\\x31\\xe8\\x31\\x65\\x23\\x31\\xc7\\x6b\\xe0\\x1d\\x23\\x08\\x91\\x73\\x47\\x30\\\n\\x7f\\x08\\x73\\xc8\\xb0\\x8e\\x20\\x47\\x22\\x99\\x9d\\x91\\xe8\\x75\\x3b\\xf4\\\n\\xfc\\xfd\\x6c\\xca\\x26\\x16\\xbf\\x9b\\x1b\\xb4\\xcc\\x98\\xa7\\xc1\\xa0\\x66\\\n\\xc6\\x15\\x06\\x03\\xeb\\xf6\\x9c\\xfc\\xf1\\x08\\x7d\\xfe\\x78\\xa0\\x2e\\x7f\\\n\\x5c\\xa9\\x95\\x19\\x18\\x50\\x79\\x6a\\xdc\\x98\\x71\\x8d\\x9b\\x5a\\xc9\\x8c\\\n\\xeb\\x14\\xea\\x40\\x66\\x5c\\xaf\\x50\\x45\\x30\\xe3\\x39\\x32\\x95\\x21\\x1f\\\n\\x64\\x28\\x7f\\x1c\\xc9\\xf2\\xc7\\x55\\xec\\xb8\\x22\\x7f\\x5c\\xed\\x00\\xf1\\\n\\xff\\x34\\xa2\\x21\\xe3\\xff\\xdd\\xa2\\x26\\xe3\\xff\\x89\\xa0\\x22\\xe3\\xff\\\n\\x89\\x8c\\xa8\\x78\\x04\\x19\\xcd\\xa1\\xe2\\xaa\\x40\\x0d\\x44\\xdd\\xf4\\x32\\\n\\x32\\xae\\x56\\xaa\\x21\\xae\\xd0\\x29\\xc8\\xb8\\xc6\\x93\\x8c\\x6b\\xdd\\xc8\\\n\\xb8\\xd6\\x8d\\x8c\\x6b\\x3c\\xc9\\x38\\x61\\x84\\xdc\\x38\\x98\\x06\\xe2\\x7a\\\n\\x19\\x19\\x57\\x05\\x92\\xf1\\x1c\\x44\\xc6\\x21\\xdf\\x5c\\x79\\x50\\x10\\xc4\\\n\\xe5\\x88\\x96\\x4f\\x95\\xcb\\x61\\xae\\x29\\x72\\xe3\\x6a\\x32\\xae\\xa0\\xe3\\\n\\x1a\\x32\\xee\\x46\\xc7\\xb5\\x64\\xdc\\x93\\x8e\\xeb\\xc8\\xb8\\x92\\x8a\\x13\\\n\\x45\\x2c\\x37\\x8e\\xa8\\xfc\\x75\\x74\\x5c\\x29\\x4c\\xdc\\x52\\x7b\\xe1\\x78\\\n\\xd1\\x8a\\x0b\\x5d\\x9e\\xd8\\xe5\\x95\\x5d\\x9e\\x0b\\x94\\x77\\x76\\x7d\\x60\\\n\\xd7\\x17\\x76\\x7d\\x62\\xd5\\x37\\x76\\x7d\\x64\\xd7\\x57\\x76\\x7d\\x66\\xd7\\\n\\x77\\xb6\\x3f\\x60\\xfb\\x0b\\xb6\\x3f\\x61\\xfb\\x1b\\xb6\\x3f\\x62\\xfb\\x2b\\\n\\xb6\\x3f\\x63\\xfb\\x3b\\x4b\\xed\\x25\\x6a\\xdc\\x54\\xfb\\xc1\\x6e\\x6f\\xd8\\\n\\xed\\x11\\xbb\\xbd\\x62\\xb7\\x67\\xec\\xf6\\x8e\\xdd\\x1e\\xb2\\xdb\\x4b\\x76\\\n\\x7b\\xca\\x6e\\x6f\\xd9\\xed\\x31\\xbb\\xbd\\x2e\\xd0\\x9e\\xb3\\xda\\xfb\\x1a\\\n\\xc4\\xff\\x61\\x04\\xc1\\x6d\\x32\\xe4\\x93\\xfb\\x57\\xd5\\x4f\\xc8\\x1a\\x28\\\n\\x08\\x0a\\x20\\xe8\\x47\\x82\\xfe\\x40\\xe4\\xfa\\x02\\x60\\x5f\\xea\\xbe\\x92\\\n\\xa3\\x91\\x8e\\xd2\\xcd\\x1f\\x94\\xae\\x02\\x28\\xdd\\x59\\x0b\\xe8\\xf3\\x7d\\\n\\x8d\\xf2\\xf6\\x59\\xc8\\x61\\x5c\\x73\\x38\\xe2\\xd6\\x86\\x85\\x48\\xc3\\x58\\\n\\xd8\\x1e\\x79\\xf0\\x85\\x41\\x77\\x61\\xc8\\xf2\\xfe\\xb3\\x1f\\x41\\xa7\\x4d\\\n\\xe8\\x0a\\xeb\\xdf\\xfc\\xf0\\x69\\x4a\\xa7\\xe6\\x20\\x84\\x20\\x2d\\xe2\\xaf\\\n\\x67\\xd9\\x88\\x1c\\x17\\x7f\\x45\\xd0\\x6b\\xea\\x6a\\x4b\\x58\\x88\\x34\\x8c\\\n\\x85\\xed\\x91\\xc7\\x6b\\x4a\\x27\\xd9\\x46\\xf4\\xa6\\xa5\\x74\\x6b\\x4a\\xf7\\\n\\x90\\x0e\\xdb\\x8e\\xf0\\xb7\\x38\\x82\\x7a\\x10\\xe4\\x8b\\xc8\\xf1\\x27\\x37\\\n\\x4c\\xf9\\xc8\\x83\\xd2\\x4d\\x0f\\x4a\\x57\\xf4\\xdc\\x0d\\xb3\\x2e\\xc0\\xdf\\\n\\xda\\xf1\\xe8\\x1e\\xea\\x87\\x16\\x15\\xac\\x3b\\xdb\\x11\\x5e\\xa7\\x63\\x0d\\\n\\xaa\\x20\\x52\\x77\\x6c\\x7d\\x82\\x8e\\xd9\\xbe\\x08\\xda\\x87\\xd3\\x28\\x7f\\\n\\x7d\\xc9\\x22\\xe8\\x1b\\x7b\\x31\\x5b\\x84\\x01\\x3a\\x04\\x5d\\x32\\x75\\x0b\\\n\\xba\\x66\\xb6\\xc9\\xd0\\xcf\\x61\\xfb\\x1c\\xac\\x7b\\xe1\\x00\\xba\\x64\\xf7\\\n\\x09\\xc2\\xa8\\xdf\\xa0\\x8f\\x7a\\x1d\\xe5\\xd7\\xff\\x36\\xfb\\xb3\\x58\\xe4\\\n\\xc1\\xf6\\x45\\xa0\\x73\\xfa\\xdd\\x8a\\x59\\x37\\xa0\\x8d\\xc0\\xfe\\x5e\\x78\\\n\\x28\\x51\\xc1\\xf5\\x14\\xad\\x08\\x9a\\x8f\\xf2\\xdb\\x25\\x4e\\x2a\\x06\\x9d\\\n\\x00\\x1b\\x51\\x7e\\x3f\\x43\\x8f\\x29\\x30\\x6d\\xd2\\x5d\\x32\\xee\\x8a\\x3e\\\n\\xa0\\x6f\\xca\\xd4\\x35\\x3d\\x9e\\x43\\x97\\x7f\\x78\\x7f\\xf0\\x95\\x8c\\xbb\\\n\\xa2\\x0f\\xd0\\x2d\\xfd\\x8e\\x06\\xfa\\xa6\\xc7\\xd2\\x98\\xef\\x59\\x42\\xce\\\n\\xed\\x63\\xe4\\x87\\x27\\xca\\xff\\x5e\\xa6\\x43\\xf9\\xfb\\x45\\xf0\\x1e\\xed\\\n\\x26\\x19\\x77\\x45\\x1f\\xee\\x88\\xd4\\x31\\xfb\\xbd\\x98\\x26\\xac\\x7f\\x71\\\n\\xc1\\xd4\\x3f\\x93\\x70\\xf9\\xb7\\x0f\\xf8\\xca\\x3f\\xd6\\xbf\\x7d\\x20\\xa6\\\n\\xff\\x81\\xf5\\xdb\\xb0\\x2e\\xf3\\x21\\x22\\xfb\\x59\\x45\\x0d\\x20\\x13\\xc8\\\n\\x06\\x32\\x5a\\xbb\\x8f\\x98\\x98\\xfe\\xe7\\x21\\x23\\x1d\\x58\\x27\\xd9\\xd7\\\n\\xca\\x74\\x1c\\x11\\x20\\x0b\\xbd\\x4e\\x17\\xe4\\xbb\\x6f\\x65\\x3a\\x62\\xfa\\\n\\x1f\\xa6\\xfe\\x0d\\x14\\xbf\\x7d\\xac\\x4c\\xcb\\x91\\x00\\x32\\x80\\x2c\\x4c\\\n\\x5d\\x09\\xad\\x7f\\x21\\xfc\\x4f\\x0f\\x54\\x70\\x2d\\x77\\x16\\x32\\xcf\\x06\\\n\\x2e\\xc8\\xbe\\xdf\\xff\\x99\\x9b\\x1f\\xf0\\xce\\x1e\\x3b\\x06\\x19\\xad\\x1d\\\n\\x23\\x10\\xbb\\xff\\x43\\x97\\x15\\x66\\x9a\\xa6\\x7c\\x11\\xf8\\xd2\\xbb\\x04\\\n\\xdd\\x41\\xf6\\xd9\\x9f\\xb1\\x0b\\x95\\x17\\xe4\\xf9\\x85\\x91\\xfb\\xd8\\x3e\\\n\\x87\\x96\\xc5\\x96\\x3a\\x6d\\x8f\\xfe\\x4f\\x6f\\x44\\x96\\x19\\x73\\x7c\\x11\\\n\\x8c\\xbf\\xde\\x63\\xdc\\xfb\\xd0\\xc6\\xbc\\xcd\\x01\\xd3\\x4f\\x42\\xde\\x72\\\n\\x8e\\x7b\\xb8\\x7c\\x0e\\xc8\\xd4\\xdb\\xc6\\xbc\\xed\\xf5\\xfe\\x05\\x7c\\x9a\\\n\\xe3\\x8b\\xb8\\xea\\xa3\\xd8\\x30\\x25\\x2f\\x9f\\xcf\\xb1\\x55\\xf7\\x00\\x7b\\\n\\xbe\\x7f\\x99\\xe3\\x8b\\x68\\x7e\\x98\\xf3\\x42\\x62\\xc3\\x98\\xbc\\x62\\xf8\\\n\\x1c\\x26\\xec\\xfd\\xfe\\x65\\xca\\x17\\x39\\x92\\xfe\\xc5\\xf2\\x39\\x4c\\x48\\\n\\x31\\xfe\\x63\\xcc\\x17\\x39\\x8a\\xff\\x11\\xd3\\xe7\\x30\\x21\\xd5\\xf8\\x0f\\\n\\x9f\\x2f\\x0a\\x47\\xd2\\x97\\xff\\x70\\x1e\\xde\\xc4\\x78\\x77\\x91\\x72\\xfc\\\n\\x87\\xcb\\x17\\xc1\\x19\\x4e\\xd9\\x48\\x3a\\xfd\\x67\\x53\\x3c\\x88\\xe9\\x73\\\n\\x98\\x90\\x7a\\xfc\\x99\\xcb\\x17\\xb1\\x49\\x6c\\x18\\xcb\\x5b\\x0c\\x9f\\xc3\\\n\\x84\\xbd\\xfd\\x8f\\x82\\xca\\x93\\x49\\x03\\x51\\xde\\xd9\\x65\\xec\\xfa\\x67\\\n\\xef\\xf2\\xcf\\x0c\\x67\\x52\\xbc\\xb1\\xf9\\xb5\\x65\\x0d\\x39\\x1b\\xf6\\x2c\\\n\\xff\\xf0\\x6e\\x79\\x8f\\x4a\\x93\\x4d\\xc6\\xd6\\xa9\\x8a\\x0d\\xbe\\x7c\\xb3\\\n\\x79\\x78\\xbd\\x87\\x8c\\xbf\\x27\\x5b\\x02\\x7b\\x95\\x7f\\x18\\x5b\\xb9\\x8b\\\n\\x0a\\x96\\x31\\xae\\xb0\\xa3\\x94\\x7f\\x63\\xe1\\xbb\\x48\\x98\\xf1\\x29\\x7b\\\n\\xb5\\xbf\\xc0\\xeb\\x1d\\x8e\\xf4\\x4d\\xe9\\xff\\x81\\x00\\x79\\x9b\\xc2\\x03\\\n\\x13\\xfc\\x70\\x85\\xef\\x20\\x71\\xf5\\x2f\\x86\\xff\\x81\\xb1\\xb4\\x87\\x1c\\\n\\x79\\xf1\\xe9\\xdf\\x96\\x79\\x0d\\x4b\\xf9\\xa2\\x6d\\x60\\x8e\\xfe\\x41\\x86\\\n\\xc2\\xe6\\x7f\\x30\\xb8\\x81\\xe7\\x7f\\xa5\\x85\\xd4\\xfd\\x7f\\x67\\x07\\xf6\\\n\\x3f\\xd2\\x02\\xfb\\x1f\\x69\\x81\\xfd\\x8f\\xb4\\xc0\\xfe\\x47\\x5a\\x60\\xff\\\n\\x23\\x2d\\xb0\\xff\\x91\\x16\\xd8\\xff\\x48\\x0b\\xec\\x7f\\xa4\\x05\\xf6\\x3f\\\n\\xd2\\x02\\xfb\\x1f\\x69\\x81\\xfd\\x8f\\xb4\\xc0\\xfe\\x47\\x5a\\x60\\xff\\x23\\\n\\x2d\\xb0\\xff\\x91\\x16\\xd8\\xff\\x48\\x0b\\xec\\x7f\\xa4\\x05\\xf6\\x3f\\xd2\\\n\\x02\\xeb\\x5f\\x5a\\x60\\xff\\x2f\\x2d\\xb0\\xff\\x97\\x16\\xd8\\xff\\x48\\x0b\\\n\\x7b\\xfa\\x1f\\xf8\\xce\\x90\\x5e\\x7f\\x65\\x0e\\xd9\\x7b\\xfd\\x95\\x14\\x7c\\\n\\xd9\\x73\\xfd\\x27\\x5e\\x7f\\x58\\x10\\xf6\\x5c\\xff\\x89\\xd7\\xdf\\x16\\x84\\\n\\xbd\\xd7\\x7f\\xd2\\xeb\\xcf\\xd9\\x7b\\x26\\x3b\\xea\\xfa\\x73\\xae\\xbd\\x9d\\\n\\x0b\\xe3\\xfa\\x73\\x1a\\x72\\x54\\x70\\x9f\\x64\\xf8\\xde\\xca\\x91\\xbf\\xbf\\\n\\x60\\xf3\\xcb\\xf5\\x7d\\xb6\\xb5\\x90\\xba\\xff\\xc3\\xf5\\x8d\\xa7\\xa3\\xe8\\\n\\xdf\\x80\\xc4\\xdf\\x33\\x44\\xca\\xf7\\x2f\\xae\\x6f\\x3c\\xe9\\xef\\xef\\xa4\\\n\\xf2\\x3f\\xf4\\xf7\\x77\\xcc\\xbf\\x99\\xbb\\x67\\x88\\x35\\x90\\xea\\xfd\\x8b\\\n\\xef\\xbb\\xf2\\x81\\x48\\xfa\\xef\\x4f\\x07\\xf2\\xf0\\x26\\xc6\\xfe\\x45\\x52\\\n\\xf8\\x1f\\x63\\xdf\\x95\\x3b\\xca\\xf7\\xef\\x96\\xec\\x19\\x62\\x0b\\xec\\xed\\\n\\x7f\\x4c\\x7d\\x57\\xee\\x28\\xdf\\xbf\\x23\\x64\\xfe\\x9e\\x21\\xb6\\xc0\\x9e\\\n\\xfe\\xc7\\x9c\\xbd\\x2c\\x1c\\xa5\\xfc\\xd3\\xb0\\x66\\xff\\x22\\x4b\\x60\\x2f\\\n\\xff\\x63\\xee\\x5e\\x16\\x8e\\xa6\\x7f\\x80\\x98\\xbe\\xc8\\x1e\\xfe\\xc7\\x92\\\n\\xbd\\x2c\\xe8\\xfd\\x97\\xe8\\xfb\\xec\\xb5\\xff\\x12\\x9d\\x1f\\xdf\\xfe\\x4b\\\n\\x62\\xf9\\x22\\xb1\\xfd\\x8f\\x35\\xfb\\xe7\\xc0\\x38\\x9d\\x3d\\xf7\\x1f\\xeb\\\n\\x8c\\xcc\\xdb\\x7f\\x4c\\x0c\\x5f\\x24\\xa6\\xff\\xa1\\xf7\\xdf\\x33\\xe5\\x73\\\n\\xb8\\xe0\\xa8\\xfb\\xef\\xf1\\xf9\\x22\\x6b\\xf7\\x37\\x15\\xd3\\xff\\x3c\\x42\\\n\\xe6\\xf9\\x9c\\xc2\\x06\\x2e\\x5f\\x24\\xc4\\xfe\\x93\\x42\\xfb\\x1f\\xf6\\xfe\\\n\\xab\\x45\\x61\\xef\\x4f\\x1a\\x6c\\x5f\\xe4\\x88\\xfb\\xaf\\xd2\\xf3\\x1a\\x40\\\n\\x45\\xf1\\x0c\\x0d\\x90\\x89\\x96\\xcf\\xda\\xf1\\x50\\x3c\\xff\\x2e\\x2d\\xf0\\\n\\xfc\\xbb\\xb4\\x90\\x7a\\xfc\\xd9\\xd9\\x81\\xfd\\x8f\\xb4\\xe0\\xf2\\x3f\\x74\\\n\\x9f\\x1d\\x08\\x9f\\xbf\\x23\\x2e\\xb8\\xce\\xdf\\xc1\\xe7\\x4f\\xd9\\x0f\\x5c\\\n\\xe7\\x4f\\xe1\\xf3\\xd7\\xec\\x07\\xae\\xf3\\xd7\\xf0\\xf9\\x83\\xf6\\x03\\xd7\\\n\\xf9\\x83\\x01\\x28\\xbf\\xfe\\xf1\\xf9\\x9b\\xe2\\x40\\x89\\x0a\\x9e\\x2d\\x0e\\\n\\xe7\\x6f\\xd2\\xe7\\xcf\\x32\\xeb\\xc5\\x76\\x89\\x78\\x2c\\xca\\x00\\x9d\\x32\\\n\\x75\\x4c\\x9f\\x3f\\x0b\\xe0\\x3a\\x7f\\x79\\x94\\x04\\x3c\\x16\\x55\\x18\\x3b\\\n\\x7f\\x19\\xc0\\x3c\\x7f\\x9c\\xb9\\x1e\\x09\\xdb\\xc0\\x76\\x30\\xcf\\x1f\\xa7\\\n\\x75\\xcb\\x3e\\x7f\\x1c\\x00\\x67\\xc2\\x6b\\x51\\xc1\\xb1\\x09\\xa8\\x37\\xb8\\\n\\x3d\\xb0\\x1c\\x55\\x50\\x41\\x9f\\x03\\x04\\x3a\\xf6\\xe3\\x79\\x26\\x04\\x15\\\n\\x6c\\x23\\xe8\\xf7\\x32\\xe8\\x17\\x41\\xff\\x09\\xfa\\xb0\\xf0\\x8e\\xc6\\xde\\\n\\x27\\xd9\\xd9\\xc9\\x83\\xd2\\x4d\\x0f\\x4a\\x57\\xcc\\xf7\\x2c\\x66\\xdf\\xa6\\\n\\x1d\\x8f\\xee\\x99\\x36\\xa0\\xeb\\x01\\x7b\\x8c\\x08\\xae\\xd9\\x54\\x3a\\x5c\\\n\\x7b\\x25\\x3b\\x33\\xa5\\xa3\\xfc\\xef\\x56\\xec\\x32\\xac\\x35\\x43\\xf7\\x34\\\n\\xa0\\x7e\\x9c\\x66\\xa4\\x81\\xc9\\x7a\\xa2\\xfd\\x3d\\x9f\\xcf\\xe1\\x03\\xb4\\\n\\x0f\\x61\\x28\\xaf\\x6f\\xca\\xb6\\x27\\x3b\\x6e\\x6d\\x58\\x88\\x34\\x8c\\x85\\\n\\xed\\x91\\x07\\x5f\\xf8\\x3a\\xa5\\x43\\x5b\\xe6\\xb6\\xa1\\x8f\\x0a\\xef\\x68\\\n\\xf4\\x59\\xf1\\x30\\x66\\x41\\x9f\\x99\\x8d\\xf5\\x9f\\x17\\xa6\\xc7\\xd2\\xfe\\\n\\x40\\x79\\xef\\xb5\\x26\\xcf\\x0e\\x30\\x30\\x82\\xfa\\xbc\\x70\\xa0\\x2e\\x2f\\\n\\xac\\xd4\\xe6\\x85\\x3d\\x35\\x79\\x61\\x37\\x75\\xa0\\x81\\x82\\x5e\\xa1\\x32\\\n\\xfc\\x07\\x59\\x64\\x5e\\x38\\x52\\x91\\x17\\x56\\x33\\xc3\\x6e\\x79\\x61\\x8d\\\n\\x38\\xe1\\x93\\x64\\xe8\\x24\\x84\\x13\\xc8\\xf0\\x6c\\x08\\xab\\xc9\\xb0\\x22\\\n\\x37\\x1c\\x11\\x6b\\x30\\xbc\\xcb\\xc9\\x0d\\x6b\\x02\\x3d\\x0d\\x06\\xad\\xde\\\n\\x0d\\xc2\\xda\\x2a\\x10\\x9e\\xea\\x09\\x61\\x9d\\x07\\x84\\xc7\\x2a\\x21\\xac\\\n\\x77\\x85\\x70\\x58\\x20\\x84\\x73\\xe4\\x10\\x0e\\x8a\\xc8\\xcd\\x17\\x41\\x18\\\n\\x91\\x3c\\xa8\\x20\\x2c\\x23\\xc3\\x6a\\x08\\x2b\\xc8\\xb0\\x06\\xc2\\x6e\\xb9\\\n\\xe1\\x1c\\xf2\\xfe\\xdc\\x67\\xf5\\x64\\x38\\x37\\x4d\\x1d\\x19\\x56\\xb2\\xc3\\\n\\xcc\\x7b\\xc4\\xd6\\x5b\\x61\\x0f\\x5b\\xaa\\x4f\\xa6\\x2d\\x98\\x36\\xca\\x67\\\n\\x3b\\xa6\\x4d\\x19\\xb6\\x66\\x96\\x01\\x66\\xd9\\x60\\x96\\x19\\x66\\x59\\x62\\\n\\x96\\x31\\x66\\xd9\\x63\\x96\\x49\\x66\\x59\\x65\\x96\\x61\\x71\\xf5\\xc6\\x57\\\n\\x4f\\x99\\x75\\x99\\x59\\xc7\\x99\\x75\\x9f\\xe9\\x13\\x98\\xbe\\x82\\xe9\\x43\\\n\\x98\\xbe\\x85\\xe9\\x73\\x6a\\x20\\xb2\\xc3\\x19\\x45\\x90\\x0c\\xf9\\xe4\\xfe\\\n\\x31\\xcc\\xb2\\x11\\xe8\\x06\\x04\\x2d\\x24\\xe8\\x1c\\x22\\xfb\\x58\\xc6\\xbe\\\n\\xed\\x2a\\x6c\\x94\\x4d\\xc9\\x74\\x8e\\x92\\xb1\\x81\\x05\\x7a\\x81\\xfe\\xce\\\n\\x3e\\xc4\\xdf\\x26\\x71\\x91\\x3d\\xef\\x11\\x2b\\xbf\\x7d\\xc8\\x74\\x5f\\xef\\\n\\x4b\\x82\\x5e\\x72\\xa4\\x01\\xc5\\x34\\x83\\xa0\\xb7\\x3c\\x94\\x6e\\xe4\\x37\\\n\\xa1\\xef\\x11\\x22\\xad\\x0c\\x4a\\x26\\xb6\\x0e\\x5f\\x52\\x3a\\xe0\\xd3\\x4d\\\n\\x26\\xe3\\x5e\\x98\\x1f\\xdd\\x80\\xc8\\x6a\\x5a\\x06\\x91\\xef\\x9a\\xc5\\x8a\\\n\\x08\\x81\\x2c\\xde\\x94\\x6c\\x1b\\x58\\x72\\x43\\xb8\\x0b\\x4b\\x37\\x7e\\x28\\\n\\x7f\\xb9\\xb9\\x81\\x2c\\xab\\x93\\x85\\x1d\\x20\\x2b\\xc8\\xcc\\x2c\\x47\\xcc\\\n\\xba\\xc6\\xf4\\x37\\x70\\x9f\\xb7\\xbd\\x19\\x74\\x00\\x80\\xcc\\x4c\\x1d\\xed\\\n\\xa3\\xfe\\xde\\x00\\xe5\\xaf\\x53\\xf5\\x25\\xe1\\xce\\x31\\x00\\xba\\x60\\xd6\\\n\\x35\\xba\\x0d\\xa7\\xe3\\x1b\\xa4\\x63\\xcd\\x61\\x00\\x63\\x78\\xb4\\x3e\\x16\\\n\\x20\\xb2\\x0f\\x40\\xf7\\x0b\\x42\\x24\\xe4\\xcb\\x51\\x00\\x3a\\xa0\\xf5\\x41\\\n\\xf7\\xfd\\x40\\x57\\xd0\\xde\\x95\\x91\\x90\\x2f\\x47\\x01\\xf8\\x21\\xd0\\x05\\\n\\xe8\\x84\\xee\\x17\\x43\\x18\\xfa\\x04\\xee\\x12\\xf2\\xe5\\x28\\x00\\x1d\\x80\\\n\\x2e\\x40\\x27\\xcc\\x71\\x5b\\xe8\\x4f\\x15\\x93\\x90\\x2f\\x47\\x81\\x2b\\xca\\\n\\x9b\\x8b\\x61\\xf6\\xb1\\xb1\\x7e\\x48\\x08\\xa1\\x1f\\xf8\\xf6\\x6c\\x00\\x45\\\n\\x42\\xee\\x33\\x21\\x34\\xac\\xe1\\x53\\x08\\xfd\\x0c\\x60\\x3c\\xbf\\xd6\\x82\\\n\\xbc\\xed\\x09\\xe0\\x09\\x78\\xa3\\xf9\\xec\\x6f\\xe6\\x73\\x42\\xeb\\xc7\\x11\\\n\\x75\\xc4\\xd6\\x8d\\xbd\\xf5\\x03\\xf9\\xaf\\x61\\xa5\\xc1\\xa7\\xa3\\x6a\\x04\\\n\\x4d\\x46\\x96\\xcf\\x13\\x19\\x83\\x1f\\x95\\x66\\x35\\x1e\\xde\\xd6\\xa2\\xfc\\\n\\xef\\xe6\\x6b\\x78\\x78\\xe3\\x02\\x97\\x7e\\x0c\\xc8\\x72\\xff\\xcc\\xe4\\x83\\\n\\x26\\xb6\\x8e\\x64\\x04\\xfd\\x4b\\xfd\\x96\\x6a\\x41\\xda\\xa6\\x90\\x4a\\xa5\\\n\\x99\\x42\\xe5\\x61\\x09\\x4f\\xa6\\x40\\xeb\\x87\\x99\\x86\\xb5\\xed\\x17\\x97\\\n\\xad\\x98\\xfc\\xb0\\x6d\\x21\\x14\\xb8\\x78\\x66\\xd7\\x29\\x6b\\x74\\x03\\x10\\\n\\xba\\x7d\\xe7\\xaa\\xeb\\x10\\x57\\x70\\xe4\\x25\\x14\\xd8\\x3c\\x2b\\x78\\x78\\\n\\xb0\\xc6\\x27\\x8a\\xd1\\xff\\xe1\\xd2\\x11\\xd4\\xf9\\xe2\\x48\\x7c\\xfd\\x14\\\n\\x47\\xf9\\x7d\\xa1\\xad\\xed\\x85\\x58\\xfd\\x43\\xb6\\xcf\\x06\\x5a\\x8f\\xf2\\\n\\xfa\\xea\\x62\\xe8\\x27\\x83\\xca\\x83\\x6d\\x17\\x5b\\xda\\x52\\x31\\xfb\\xcf\\\n\\x0a\\x54\\x50\\x47\\x4c\\x12\\x0a\\x7c\\x63\\xef\\x6b\\x90\\xed\\xe7\\xd2\\x8b\\\n\\xa1\\x1f\\x19\\x95\\x2e\\x10\\x94\\x77\\xb6\\x4d\\xed\\xa1\\x9f\\xf5\\x54\\xde\\\n\\x34\\x1f\\x32\\xde\\xa7\\x8d\\x43\\x68\\xfd\\x40\\x1f\\x24\\x85\\x7a\\x9e\\x26\\\n\\x66\\x9d\\xb2\\x97\\x7e\\x32\\x58\\x3c\\x00\\x4f\\xd6\\xf4\\xb9\\x84\\xd6\\xcf\\\n\\x64\\x1e\\x7e\\xd9\\x94\\x69\\x45\\xda\\x7c\\x60\\x8e\\x81\\xf2\\x91\\x81\\xe2\\\n\\xcd\\x52\\x08\\xd5\\x3f\\xa4\\x01\\x36\\x4a\\x35\\xc1\\x2b\\xc8\\xf3\\xa3\\x15\\\n\\x69\\xf3\\xe1\\x47\\x64\\x5a\\x47\\xb7\\x91\\x6d\\xe5\\x47\\x88\\xfe\\x61\\x51\\\n\\x04\\x1e\\xff\\x31\\x0e\\xac\\x1f\\xe3\\xc0\\xfa\\x31\\x0e\\xac\\x1f\\xe3\\xc0\\\n\\xfa\\x31\\x0e\\xac\\x1f\\xe3\\xc0\\xfa\\x31\\x0e\\xa1\\xfb\\x87\\x45\\x0d\\xb8\\\n\\x7f\\x68\\x1c\\xb8\\x7e\\x19\\x07\\xd6\\x8f\\x71\\x60\\xfd\\x18\\x07\\xd6\\x8f\\\n\\x71\\x60\\xfd\\x18\\x07\\xd6\\x8f\\x71\\x60\\xfd\\x18\\x07\\xd6\\x8f\\x71\\x88\\\n\\x35\\xbe\\x6a\\xec\\x7b\\x10\\xb1\\xc6\\x57\\x8d\\xe5\\xe9\\x28\\xe3\\xab\\xce\\\n\\x30\\x3e\\x6f\\xeb\\xfc\\x0e\\xac\\xd1\\x60\\x7f\\xff\\x21\\xc5\\xfc\\x0e\\x93\\\n\\x07\\x47\\x99\\xdf\\x01\\xc8\\x50\\xde\\xb7\\x1f\\x52\\xcf\\x0f\\xd2\\x7c\\x38\\\n\\xca\\xfc\\x20\\x13\\x78\\x7e\\x99\\x1f\\x5c\\x6b\\x38\\xa4\\x58\\x9f\\x60\\xeb\\\n\\x5a\\x3f\\xbc\\xbe\\xc5\\x38\\xec\\xb1\\x3e\\x8a\\x2e\\xe7\\xf6\\x5c\\x1f\\x25\\\n\\x94\\x8e\\x84\\xd4\\x8f\\xb3\\xac\\xaf\\xc3\\xeb\\x33\\xf3\\x20\\x44\\xff\\xd0\\\n\\x12\\x5b\\x89\\xb9\\xbe\\x97\\x2b\\x4d\\x53\\x65\\xda\\x14\\x84\\xa8\\x5f\\x61\\\n\\x48\\x98\\xba\\x2e\\x16\\xa4\\x5e\\x1f\\xce\\x5c\\x3f\\x6f\\xeb\\x7a\\x3f\\xb1\\\n\\xc0\\x5e\\x0f\\x69\\x4f\\xfd\\xd0\\xdf\\x7d\\xf4\\x47\\x8e\\xa9\\x1b\\x1a\\xc0\\\n\\x5b\\x7f\\x64\\x19\\x9f\\x78\\x7c\\xc3\\x38\\xb0\\x7e\\x8c\\x83\\xad\\x1f\\xfc\\\n\\x7d\\x65\\x7e\\xb0\\xbf\\xaf\\xc4\\xdf\\xe7\\xe6\\x07\\xfb\\xfb\\x5c\\xfc\\x7d\\\n\\x77\\x7e\\xb0\\xbf\\xef\\xc6\\xfb\\x03\\xe4\\x07\\x73\\x7f\\x00\\x7a\\x6f\\x20\\\n\\x3a\\x8e\\xf7\\x97\\xc8\\x3f\\x76\\x4b\\xeb\\x02\\xef\\x4f\\xc2\\xbf\\x3f\\x09\\\n\\x80\\x6b\\x7f\\x1b\\x67\\x2a\\x47\\xa6\\xf6\\xb7\\x01\\x98\\xb3\\x3f\\x92\\x6b\\\n\\x11\\x21\\x77\\x4a\\x26\\x90\\x2d\\x0e\\xe5\\x3f\\x2b\\x87\\x6b\\x7f\\x24\\xa6\\\n\\x8e\\x8c\\xed\\xaf\\x95\\x5e\\x44\\xc8\\xd8\\xfe\\x5a\\x7c\\xba\\xa1\\x81\\xf7\\\n\\x67\\x33\\x0f\\xf4\\xde\\x40\\x7f\\x11\\x94\\x86\\xf2\\xfa\\xd9\\x45\\x41\\x3f\\\n\\xd9\\x94\\x4c\\x7f\\x21\\x13\\xfb\\xfb\\xd1\\xfb\\x27\\x06\\x22\\xb2\\xb3\\x08\\\n\\x80\\xc3\\x94\\x34\\x54\\x18\\x0e\\x0d\\x53\\x53\\x61\\x18\\xe4\\xa5\\xf7\\x6d\\\n\\x8c\\x24\\xc2\\xb3\\xa9\\x70\\x02\\xdc\\x47\\x6f\\xf8\\x08\\xcf\\x53\\x61\\xad\\\n\\xad\\x61\\x5d\\x04\\x11\\xca\\x51\\x92\\x61\\xd8\\x18\\x52\\x4f\\x85\\x95\\x44\\\n\\x58\\x47\\x85\\x3d\\x95\\x06\\x9d\\x96\\x0c\\xeb\\x5d\\x89\\x70\\x58\\x60\\x6e\\\n\\x38\\x47\\x4e\\x84\\x83\\x22\\xc8\\x34\\x11\\x11\\x46\\x54\\xfa\\x2a\\x22\\x2c\\\n\\xa3\\xc2\\x6a\\x22\\xac\\xa0\\xc2\\x1a\\x22\\xec\\xc6\\x71\\x0f\\xf3\\x59\\xbe\\\n\\xb0\\x40\\xf2\\x3a\\x5c\\xd8\\x1c\\xd9\\x99\\xba\\x62\\xea\\x90\\xa9\\x5b\\x1e\\\n\\x7d\\x32\\x6d\\xc4\\xb4\\x1d\\xd3\\xa6\\xf9\\x6c\\xcd\\x2c\\x03\\x8c\\xb2\\x21\\\n\\x90\\xbc\\xcc\\x32\\xcc\\x2c\\xdb\\xcc\\x32\\xcf\\xac\\x0b\\xcc\\x3a\\xc2\\xac\\\n\\x3b\\xcc\\x3a\\x05\\xfb\\x90\\x06\\x11\\xa4\\x42\\x79\\xfb\\x90\\xa2\\x60\\x64\\\n\\x2e\\x6a\\x21\\x72\\x8f\\xae\\x0b\\x04\\xbd\\x42\\x79\\xf5\\xbe\\x30\\x51\\x0e\\\n\\xc5\\xfb\\x05\\x4a\\x96\\x5a\\x66\\xc8\\xed\\x85\\xc8\\x79\\xc9\\xa2\\xb4\\xe7\\\n\\x2a\\x4d\\xd9\\x94\\x6c\\x5e\\x3c\\xb2\\xc3\\x59\\x0b\\xc9\\xac\\x67\\x9e\\x12\\\n\\x74\\x88\\xa0\\xad\\x04\\x6d\\x2e\\x64\\x04\\x3c\\x1f\\xa6\\x64\\x60\\xca\\x94\\\n\\x8c\\x0a\\x9e\\xc9\\xe7\\xc5\\x92\\xfd\\x26\\x22\\xcf\\x1f\\xb6\\x75\\xce\\xde\\\n\\x11\\x00\\x32\\x40\\xdf\\x0d\\x64\\x62\\xea\\x80\\x59\\x0e\\xd6\\x33\\x7e\\x03\\\n\\x7b\\x97\\xb2\\x33\\x8f\\xf6\\x00\\xc8\\x04\\xb2\\xd1\\x72\\xae\\xa7\\xfe\\x0e\\\n\\x7e\\x81\\xae\\xef\\x37\\x51\\xd1\\x94\\x9d\\x06\\xc8\\x46\\x97\\x03\\x90\\x99\\\n\\xf6\\xf3\\xb4\\x4e\\x3a\\x4b\\xc7\\x9a\\xdd\\x00\\x75\\x81\\x96\\x97\\x6e\\xe3\\\n\\x68\\x5f\\x57\\x14\\xea\\xbb\\x29\\x80\\x8c\\xb4\\x4f\\xa4\\xdb\\x77\\xba\\xde\\\n\\x3b\\x0b\\xa0\\x5d\\x00\\x99\\x99\\x7d\\x9b\\xad\\x92\\x72\\x64\\x5f\\x80\\xac\\\n\\x74\\x1f\\x89\\xae\\x0b\\x9b\\x25\\xe5\\xc8\\xbe\\x00\\x59\\xd9\\xfd\\x23\\x2c\\\n\\xbf\\x79\\x58\\x87\\xc8\\x7a\\x33\\x50\\x1c\\xd6\\xac\\x02\\xf0\\x02\\x3c\\xad\\\n\\x33\\xf3\\x7e\\x5b\\xe4\\xa7\\xcf\\xdb\\x86\\xf6\\x73\\xb0\\x65\\x6c\\x8a\\x02\\\n\\xe0\\x81\\xee\\xbf\\xbc\\x34\\xf3\\x19\\x5b\\xe4\\x1f\\xc8\\xc8\\x8f\\x4f\\x07\\\n\\x70\\x3e\\x12\\x8c\\xb1\\x96\\x35\\x33\\x4d\\x63\\x28\\x4b\\xa5\\xc5\\x75\\xe6\\\n\\x12\\x53\\xf6\\x6c\\x64\\x7e\\x99\\xb4\\xb5\\xfe\\xb3\\xf3\\x65\\xeb\\x60\\x0e\\\n\\xf5\\xdb\\x2d\\x0b\\xd2\\xe4\\xc3\\x2d\\x2a\\xad\\x39\\x16\\xf2\\x60\\x0c\\x42\\\n\\xf8\\x3f\\x63\\xf9\\x33\\xd3\\xb7\\x15\\x5c\\xfc\\xd9\\x22\\x3b\\x9b\\x3f\\x5b\\\n\\xfc\\x3f\\x1f\\x1f\\x62\\xca\\x6f\\xab\\xec\\x6c\\xfe\\x6c\\x6d\\xff\\xb8\\xf8\\\n\\x11\\x4b\\x7e\\x21\\x64\\x47\\x48\\xf8\\xf6\\x9f\\xcd\\xd7\\x03\\x24\\xbc\\xfc\\\n\\x0f\\x90\\x30\\xb2\\x03\\xc4\\xe8\\xff\\x30\\x75\\xc0\\x24\\x5b\\xc1\\x35\\x8e\\\n\\x65\\x6b\\xbb\\x2b\\x84\\xfc\\xd0\\x1e\\xcd\\x41\\xf9\\xc7\\x9c\\xee\\x73\\xa4\\\n\\x6b\\x2b\\xd8\\xe9\\xdd\\x67\\xe5\\x39\\x07\\x59\\x7e\\x1e\\xa1\\x10\\xf2\\x33\\\n\\xd7\\xb3\\xf0\\x51\\xb6\\x85\\x69\\x72\\xc1\\x9c\\xb1\\x58\\x4b\\xd7\\x17\\x09\\\n\\x21\\x3f\\xf4\\x4b\\xe8\\xb6\\x99\\x4f\\x76\\x73\\xfb\\xa3\\xc6\\xb0\\x0e\\x19\\\n\\xd7\\xc1\\x2d\\x64\\x79\\x3f\\x0b\\xbf\\xff\\x60\\xf9\\xb1\\xfc\\x58\\x7e\\x2c\\\n\\x3f\\x96\\x1f\\xcb\\x8f\\xe5\\xc7\\xf2\\x63\\xf9\\xb1\\xfc\\xce\\x03\\x2c\\x3f\\\n\\x96\\x1f\\xcb\\x8f\\xe5\\xc7\\xe3\\x1f\\xd6\\xcb\\xdf\\xde\\x08\\x4f\\xce\\x30\\\n\\xfe\\xe5\\x28\\xe3\\x9f\\xdf\\x23\\x69\\xc6\\x3f\\xd9\\x70\\xb6\\xf1\\x6f\\x26\\\n\\xd8\\xf3\\x1f\\xcc\\x72\\x60\\x2b\\x98\\x76\\x77\\xc4\\xf9\\x0f\\x67\\x9e\\xff\\\n\\x72\\xe6\\xf9\\x4f\\x67\\x9e\\xff\\x76\\xe6\\xf5\\x0f\\xe1\\x66\\xe4\\x5b\\x94\\\n\\xd7\\xbf\\x38\\xfb\\xfa\\x27\\x47\\x5e\\xff\\xb6\\xd6\\xcc\\xfb\\xf1\\xfb\\x0f\\\n\\x96\\x9f\\x2d\\xbf\\xb3\\xae\\x7f\\x76\\xf6\\xf5\\xef\\xce\\xfe\\xfd\\x83\\xb3\\\n\\x7f\\xff\\xc2\\xfe\\xfe\\xa9\\xa4\\x74\\xac\\x89\\x0e\\xf6\\xf7\\x4f\\xfe\\xd4\\\n\\xdf\\x99\\xdf\\xbf\\x1d\\x44\\x45\\x53\\x07\\x7c\\xdf\\xbf\\x01\\x9c\\xfd\\xfb\\\n\\x47\\x40\\x51\\xfc\\xfe\\xf5\\x10\\x32\\xef\\xfb\\x57\\x1a\\xce\\xfc\\xfd\\x33\\\n\\x13\\x4e\\xf3\\xfd\\xbb\\x8e\\xbc\\x28\\x35\\xe4\\xd5\\x4d\\x4d\\x5e\\x15\\x2a\\\n\\x72\\xeb\\x01\\x19\\xb5\\x1f\\x41\\x02\\xb5\\x47\\x81\\x86\\xda\\xb7\\x40\\x4b\\\n\\x5f\\x95\\xe4\\x55\\xc7\\x7b\\x7d\\x09\\x97\\x25\\x3a\\xa5\\x16\\xae\\x9e\\xc4\\\n\\x75\\xaa\\xc1\\x50\\x85\\xb8\\xea\\x9a\\x19\\x0c\\x95\\x94\\x3a\\xa5\\xbe\\x9c\\\n\\xc1\\x50\\x2e\\x50\\xa7\\xcc\\x71\\x37\\x18\\xbc\\x22\\x88\\xe7\\x90\\x81\\xf8\\\n\\x47\\x5c\\x09\\x0e\\x64\\x70\\x55\\x1b\\x0c\\x0a\\xe2\\xaa\\x87\\xbf\\x07\\x16\\\n\\xbc\\x9a\\xca\\x5f\\xec\\x2b\\x2f\\x5f\\x14\\xdf\\xff\\xc9\\x41\\xc9\\x45\\xcb\\\n\\x49\\xcb\\x4d\\xeb\\x81\\xd6\\x0b\\xad\\x27\\x5a\\x6f\\x26\\xf2\\x67\\xdb\\x83\\\n\\xb6\\x13\\x6d\\x37\\xda\\x8e\\xb4\\x5d\\x69\\x3b\\xd3\\x76\\x87\\x7d\\x22\\xea\\\n\\x21\\x72\\x63\\x5d\\x7a\\x9f\\x08\\x95\\xe9\\xdd\\x6c\\xca\\x13\\x34\\x97\\xa0\\\n\\x7f\\x10\\xb9\\x67\\x10\\x5d\\xde\\xd8\\xe5\\x8f\\xfd\\x77\\x5b\\xc2\\xe6\\xdc\\\n\\x97\\x41\\xf1\\x34\\x97\\xe2\\x91\\x0b\\xbd\\x10\\x39\\x4e\\x40\\x3f\\x07\\xdb\\\n\\x66\\xc0\\x3e\\x50\\x3a\\xea\\xfa\\x8e\\x15\\xd7\\x71\\xfc\\xcd\\x9a\\xb0\\x39\\\n\\xf7\\xd1\\xfb\\x27\\x1a\\x28\\x1e\\x7b\\x71\\xf0\\x4e\\xdf\\x13\\x4f\\x50\\x00\\\n\\x22\\xfb\\x2a\\x0a\\x07\\xa1\\x52\\x14\\x4f\\xf1\\x0c\\xdd\\xd2\\x32\\x94\\x47\\\n\\x79\\x7b\\x68\\x4d\\xe2\\xb4\\x8c\\x63\\x01\\x78\\x04\\x5e\\x81\\x67\\xba\\xbc\\\n\\x83\\x5d\\xe2\\xa5\\x64\\xca\\x42\\xec\\x42\\x24\\xcf\\x74\\x5d\\x05\\x79\\x02\\\n\\x24\\xe5\\xc8\\x32\\x00\\xaf\\xc0\\x33\\xed\\x67\\xa0\\x3c\\x15\\xa6\\xbe\\x39\\\n\\xd4\\x07\\x7a\\x8f\\x38\\xb0\\x03\\xd4\\xf1\\xc2\\xd4\\xa7\\x86\\x31\\x67\\xe6\\\n\\x1e\\x79\\x85\\x99\\x7f\\x73\\xf4\\x7f\\x1a\\x91\\xfd\\x25\\x7b\\xec\\xa3\\xe9\\\n\\x4d\\xe5\\x75\\xca\\xc8\\x3d\\x96\\xf2\\x4f\\x8f\\xe5\\x24\\xa1\\x82\\x32\\xc8\\\n\\x90\\x75\\x67\\xf3\\x70\\x3d\\xe7\\x4d\\xe5\\x01\\x79\\x9d\\x37\\xf2\\xac\\xa5\\\n\\xfc\\x33\\xd3\\x65\\xcb\\x90\\x48\\x91\\xa5\\x00\\xfd\\xfe\\xc9\\x91\\x47\\x0e\\\n\\x47\\x1e\\x6c\\x58\\x53\\xfe\\xb9\\xd2\\x67\\xa6\\x63\\x29\\x98\\xf9\\x5a\\xc2\\\n\\x3b\\x9b\\x7f\\x4b\\xfc\\x0f\\xdb\\x0e\\x15\\x90\\xf5\\xfc\\xd3\\xf9\\x56\\x40\\\n\\xfc\\xb6\\xe5\\x83\\x2d\\xfe\\x87\\xa9\\xab\\xab\\x04\\x65\\x21\\xeb\\xf5\\x9f\\\n\\x45\\xa5\\x61\\xae\\xde\\x69\\x58\\xab\\x7f\\xfa\\xd9\\x0a\\x54\\xbe\\xcc\\x7e\\\n\\xae\\xa5\\x60\\xf6\\x9f\\xaf\\x52\\x69\\x9a\\xbb\\x5e\\xc6\\x1a\\xfe\\xc1\\x57\\\n\\xfc\\x89\\xf2\\xfa\\xb6\\x59\\x48\\x38\\xfe\\xb3\\x18\\xe9\\xfe\\x89\\x4c\\xfb\\\n\\x33\\x6b\\xca\\x0f\\xa4\\x99\\xc8\\x78\\x86\\x49\\xc6\\x7c\\x35\\x1f\\x4e\\xf1\\\n\\xa4\\x95\\x68\\x21\\xff\\x85\\xbd\\xff\\x50\\xd8\\xf9\\x77\\x86\\xfe\\x8f\\xa3\\\n\\xa1\\x28\\xf1\\x8f\\xcb\\x8f\\xfd\\x51\\x94\\xf8\\xc7\\xe5\\xc7\\xfe\\x28\\x4a\\\n\\xfc\\x3b\\x4b\\xf9\\x81\\x3e\\x15\\xdd\\xe7\\x62\\x8f\\x13\\x5b\\xdb\\x7f\\xe3\\\n\\x1a\\x73\\x16\\xab\\xff\\x46\\xf7\\x3f\\xe9\\x31\\x61\\x47\\xe9\\x3f\\x5b\\x5a\\\n\\xfe\\xe1\\x3e\\xb1\\xde\\x5f\\x2c\\x79\\x87\\x72\\xc6\\xf7\\x47\\x47\\x7c\\x7f\\\n\\x37\\x97\\x7f\\xa1\\xc7\\x4f\\x98\\xf9\\x1a\\x1b\\x5f\\x32\\xc5\\xbf\\x39\\xe5\\\n\\xc7\\xd8\\xf8\\x8c\\xb5\\xe3\\x57\\xf0\\x8c\\x10\\xe3\\x57\\xce\\x30\\x7e\\x78\\\n\\x9a\\x4a\\xcf\\x5e\\xe3\\xb7\\x90\\x97\\xb9\\xe3\\xb7\\xce\\xd2\\xfe\\x3a\\x12\\\n\\x98\\xfc\\x17\\xf6\\xf9\\xa3\\xc2\\x3e\\x7f\\x57\\x98\\xe7\\x4f\\xe1\\xdb\\x93\\\n\\xc2\\x3e\\x7f\\x0d\\xe0\\x5b\\x3f\\xe0\\xe2\\x20\\x54\\x12\\xf1\\xaf\\x1f\\xa0\\\n\\xc1\\xb7\\x7e\\xc3\\x11\\xc8\\xd4\\xfa\\x0d\\x1a\\xf4\\x7a\\x02\\x7a\\x5e\\x9b\\\n\\x6b\\x7c\\x58\\x0a\\xe2\\x5d\\x3f\\xa3\\x81\\xff\\xdc\\xa8\\x73\\x68\\x14\\xe4\\\n\\xb9\\x32\\xd0\\xaa\\xe7\\xae\\x3b\\xd2\\x22\\x94\\xbb\\x1e\\x49\\x67\\xc6\\x75\\\n\\x89\\xc1\\xf0\\x12\\xae\\xf3\\x02\\xf5\\x77\\xe0\\x3a\\x3b\\x50\\x9f\\x00\\x57\\\n\\x75\\xa0\\x5e\\x01\\x57\\x4d\\xa0\\x1e\\x16\\x27\\x29\\xb5\\x81\\x7a\\x4f\\xe6\\\n\\x95\\xfe\\x9d\\xbe\\x9a\\x9b\\x9f\\xb5\\x57\\x76\\x7e\\x6c\\x7e\\x68\\x3e\\xe9\\\n\\xdf\\x69\\x39\\x68\\xb9\\x68\\x39\\xcd\\xcc\\x8f\\xd6\\x23\\xad\\x57\\x5a\\xcf\\\n\\xb4\\xde\\x61\\x9d\\x96\\x0f\\x22\\xcf\\xf4\\xf9\\x6f\\x9d\\x16\\xff\\x4a\\x46\\\n\\xa8\\x4b\\xe3\\x51\\xde\\x7b\\x8b\\x58\\x6b\\x0c\\xe9\\xf7\\x9a\\xf1\\x28\\x6f\\\n\\x4e\\x09\\xae\\xfb\\x09\\x7a\\x4b\\xd0\\x12\\x82\\x42\\x09\\xea\\x26\\x12\\x85\\\n\\x52\\x79\\x40\\x5e\\xfb\\x18\\x72\\x43\\xbc\\x11\\xaf\\x76\\x84\\x47\\x23\\x2a\\\n\\x4f\\x5a\\xe7\\x4b\\xec\\x98\\x37\\x8d\\x25\\x28\\xcf\\xde\\xa1\\x12\\xe4\\x1f\\\n\\x8a\\xf2\\xca\\x5a\\x37\\x09\\xf2\\xef\\x86\\xf2\\xca\\x25\\x57\\xfe\\x1a\\x82\\\n\\xc6\\x09\\x90\\xcf\\x38\\x94\\x77\\x04\\x97\\x25\\xf9\\xc3\\x73\\x39\\x0c\\x1e\\\n\\x3e\\x24\\x68\\xb1\\x19\\xf9\\x2d\\xa6\\xee\\xe5\\x4a\\xc3\\x92\\xfc\\xd9\\xcf\\\n\\xd3\\xf7\\x9b\\x02\\x9d\\x9e\\xb1\\xbc\\xcd\\xcd\\x9f\\xc9\\xc3\\x51\\x0b\\xf2\\\n\\x3f\\x6a\\x22\\x6f\\x73\\xf3\\xff\\x90\\xfa\\xed\\x08\\xe3\\x5e\\x73\\xf2\\x37\\\n\\x50\\xcf\\x74\\x43\\x79\\xb6\\xb0\\x26\\xff\\xc5\\x28\\xbf\\xff\\x7c\\x60\\x46\\\n\\xfe\\xcc\\xbd\\xa4\\x0d\\x88\\xbf\\xcc\\x98\\xab\\x7f\\xb1\\x80\\xf3\\xc7\\xf9\\\n\\xe3\\xfc\\x1d\\x3b\\x7f\\xa9\\xfd\\x8f\\xd4\\xfe\\x17\\x40\\xb7\\x3f\\x34\\x0f\\\n\\xe6\\xe4\\x7f\\x04\\x09\\xd3\\xfe\\x48\\xd9\\xfe\\x4a\\xdd\\xff\\xd0\\xf0\\x3c\\\n\\x67\\x29\\xac\\xed\\x7f\\x89\\x0d\\x3a\\x7f\\xa9\\xfb\\xdf\\x52\\xbf\\x7f\\x48\\\n\\xfd\\xfe\\x25\\xf5\\xfb\\x27\\x42\\x12\\xbe\\x7f\\xab\\xa8\\xb9\\x16\\xa5\\xc1\\\n\\x00\\xa7\\x16\\xeb\\x69\\x6a\\x69\\x30\\xb4\\x6c\\xd9\\xf9\\x55\\xcb\\x00\\x4f\\\n\\xed\\x8c\\x40\\x4f\\xad\\x1e\\xae\\xb9\\x61\\xc6\\x3d\\x5c\\xf4\\xdf\\x7d\\xd4\\\n\\x33\\x90\\x06\\xa4\\xc5\\xbc\\x47\\x99\\x3b\\x82\\x41\\xe6\\x0d\\xe3\\x14\\xe5\\\n\\x10\\xf9\\x4d\\x19\\x3d\\x4e\\x11\\x56\\x9c\\xd7\\x6e\\xa1\\x0c\\x1d\\xd1\\xa4\\\n\\xe7\\x08\\xeb\\xcd\\xb8\\x87\\xd6\\x45\\x28\\x23\\xed\\x14\\x82\\x5a\\x20\\x72\\\n\\xce\\x42\\x66\\x23\\xb9\\x50\\x69\\xa5\\x30\\xf8\\x6e\\xc1\\x2b\\x99\\xf5\\x68\\\n\\x81\\xf2\\x74\\x22\\xc6\\x5c\\x8b\\x0b\\xca\\xd3\\x1b\\x73\\x5e\\xae\\x3e\\x41\\\n\\xcd\\xac\\x48\\xaf\\x19\\xf5\\x2c\\x0d\\x39\\x95\\x36\\x3b\\xfd\\xe6\\x04\\x3d\\\n\\x46\\xe4\\x10\\x16\\x20\\xdc\\x48\\x9a\\xf4\\x6f\\x41\\xd4\\x33\\x4c\\xbe\\xf8\\\n\\xd2\\x67\\xde\\x1f\\x8c\\xf2\\x8e\\xc3\\xe6\\x82\\x9e\\xba\\x87\\xc9\\x8f\\x39\\\n\\xe9\\x23\\xea\\xb9\\x27\\xc8\\xf8\\x5c\\x74\\x0e\\x75\\x0f\\xd7\\x89\\xdb\\xc6\\\n\\xd2\\x0f\\x47\\x79\\x63\\xc8\\x5a\\xc4\\x0f\\x2d\\xca\\x1b\\xfb\\x66\\xeb\\xd1\\\n\\x14\\xff\\xb6\\x02\\xa7\\xef\\xbc\\xe9\\x5b\\x5a\\x3e\\xb3\\x90\\xe5\\xe5\\x53\\\n\\xcc\\xfa\\x15\\x84\\xc4\\xf3\\x0f\\x62\\xfb\\x37\\xa1\\xfd\\xb3\\xd8\\xed\\x8b\\\n\\xd8\\xed\\x23\\xb4\\xc1\\xc9\\x28\\xaf\\x7d\\x97\\xdb\\x48\\x0a\\x94\\xbf\\x7d\\\n\\x47\\x28\\x7f\\xff\\x44\\x6f\\x23\\xe5\\xeb\\x9f\\xa8\\x28\\xd3\\x06\\x1a\\xf4\\\n\\xb9\\xd4\\xd0\\x70\\x1e\\xd5\\x9f\\xb5\\x10\\x35\\x9b\\x55\\x09\\xb5\\x9c\\xd5\\\n\\x32\\xf7\\x4a\\xff\\xc6\\x26\\xe6\\x3d\\xf0\\x0c\\x3c\\x4b\\xff\\x46\\xa7\\x0d\\\n\\xfd\\x30\\x98\\x1e\\xf2\\x41\\x79\\xfd\\xb0\\x20\\xee\\xaf\\x7e\\x3e\\x26\\x68\\\n\\x0f\\x22\\xf7\\x0b\\xb1\\x84\\xf6\\x30\\x9e\\x2d\\x6d\\xc4\\x5e\\x7c\\x28\\xcd\\\n\\xc8\\xd7\\x5a\\xd0\\xbc\\xd0\\x80\\xf9\\xfa\\x4a\\x04\\xd5\\xe6\\xb8\\xb7\\x36\\\n\\xf5\\xdb\\x2e\\x23\\xcf\\xc3\\xef\\xb0\\xff\\xcf\\x49\\x8e\\xe7\\x4f\\x52\\xbf\\\n\\x55\\x32\\xf2\\x7c\\x6d\\xea\\x3e\\x1d\\xc7\\xf3\\x3a\\xea\\x37\\x26\\x6f\\xec\\\n\\xe7\\x2d\\x45\\x51\\x7b\\xde\\x56\\xfd\\xd9\\x6a\\x3f\\x5b\\xcb\\x8f\\xa5\\xa0\\\n\\xeb\\x91\\x2d\\xf5\\xc7\\xd6\\xfa\\x8b\\x02\\x09\\xb7\\x11\\x41\\xb4\\xa8\\xe1\\\n\\xa7\\xf2\\x08\\xe2\\x4c\\x62\\xff\\x16\\x48\\xb5\\x9e\\xff\\x0f\\x73\\x06\\x75\\\n\\x60\\\n""\n\nqt_resource_name = b""\\\n\\x00\\x05\\\n\\x00\\x4f\\xa6\\x53\\\n\\x00\\x49\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\\n\\x00\\x05\\\n\\x00\\x4f\\xa6\\x18\\\n\\x00\\x49\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x38\\\n\\x00\\x06\\\n\\x05\\x03\\x7d\\xc3\\\n\\x00\\x49\\\n\\x00\\x6d\\x00\\x61\\x00\\x67\\x00\\x65\\x00\\x73\\\n\\x00\\x09\\\n\\x0d\\x5f\\x8f\\xd3\\\n\\x00\\x6e\\\n\\x00\\x65\\x00\\x77\\x00\\x5f\\x00\\x69\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\\n\\x00\\x0e\\\n\\x04\\x6c\\x9a\\xa7\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x69\\x00\\x73\\x00\\x6f\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x12\\\n\\x02\\xc2\\xc3\\xe7\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x70\\x00\\x68\\x00\\x79\\x00\\x73\\x00\\x69\\x00\\x63\\x00\\x73\\x00\\x2e\\x00\\x70\\x00\\x6e\\\n\\x00\\x67\\\n\\x00\\x0c\\\n\\x08\\x58\\xc8\\xe7\\\n\\x00\\x6c\\\n\\x00\\x69\\x00\\x6e\\x00\\x6b\\x00\\x47\\x00\\x65\\x00\\x4d\\x00\\x65\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x19\\\n\\x06\\xfc\\x30\\x27\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x73\\x00\\x61\\x00\\x76\\x00\\x65\\x00\\x2d\\x00\\x66\\x00\\x6c\\x00\\x6f\\x00\\x77\\x00\\x73\\\n\\x00\\x6f\\x00\\x6c\\x00\\x76\\x00\\x65\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x16\\\n\\x06\\x3d\\xc6\\xa7\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x75\\x00\\x73\\x00\\x65\\x00\\x72\\x00\\x2d\\x00\\x6d\\x00\\x61\\x00\\x6e\\x00\\x75\\x00\\x61\\\n\\x00\\x6c\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x12\\\n\\x0e\\x8d\\xdb\\xa7\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x73\\x00\\x61\\x00\\x76\\x00\\x65\\x00\\x5f\\x00\\x48\\x00\\x74\\x00\\x2e\\x00\\x70\\x00\\x6e\\\n\\x00\\x67\\\n\\x00\\x15\\\n\\x08\\x06\\x0a\\x07\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x6c\\x00\\x69\\x00\\x67\\x00\\x68\\x00\\x74\\x00\\x2d\\x00\\x6f\\x00\\x6e\\x00\\x2d\\x00\\x4e\\\n\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x18\\\n\\x0b\\x9a\\x63\\x87\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x67\\x00\\x61\\x00\\x72\\x00\\x64\\x00\\x65\\x00\\x6e\\x00\\x2d\\x00\\x73\\x00\\x68\\x00\\x65\\\n\\x00\\x61\\x00\\x72\\x00\\x73\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x17\\\n\\x04\\x68\\x5d\\x27\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x42\\x00\\x6f\\x00\\x42\\x00\\x2d\\x00\\x73\\x00\\x65\\x00\\x74\\x00\\x74\\x00\\x69\\x00\\x6e\\\n\\x00\\x67\\x00\\x73\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x16\\\n\\x09\\xcd\\x6f\\xe7\\\n\\x00\\x70\\\n\\x00\\x72\\x00\\x69\\x00\\x6f\\x00\\x72\\x00\\x69\\x00\\x74\\x00\\x79\\x00\\x5f\\x00\\x73\\x00\\x65\\x00\\x6e\\x00\\x69\\x00\\x6f\\x00\\x72\\x00\\x69\\x00\\x74\\\n\\x00\\x79\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x15\\\n\\x00\\x52\\xc9\\x87\\\n\\x00\\x61\\\n\\x00\\x63\\x00\\x74\\x00\\x69\\x00\\x76\\x00\\x61\\x00\\x74\\x00\\x69\\x00\\x6f\\x00\\x6e\\x00\\x5f\\x00\\x65\\x00\\x6e\\x00\\x65\\x00\\x72\\x00\\x67\\x00\\x79\\\n\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x14\\\n\\x08\\x37\\x44\\xc7\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x6d\\x00\\x6f\\x00\\x6e\\x00\\x65\\x00\\x79\\x00\\x2d\\x00\\x62\\x00\\x6f\\x00\\x78\\x00\\x2e\\\n\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x12\\\n\\x04\\x57\\xd1\\x27\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x76\\x00\\x69\\x00\\x73\\x00\\x69\\x00\\x62\\x00\\x6c\\x00\\x65\\x00\\x2e\\x00\\x70\\x00\\x6e\\\n\\x00\\x67\\\n\\x00\\x08\\\n\\x09\\x79\\x5c\\x67\\\n\\x00\\x54\\\n\\x00\\x54\\x00\\x53\\x00\\x46\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x20\\\n\\x0e\\xdc\\x02\\xe7\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x73\\x00\\x74\\x00\\x6f\\x00\\x70\\x00\\x2d\\x00\\x68\\x00\\x61\\x00\\x6e\\x00\\x64\\x00\\x2d\\\n\\x00\\x69\\x00\\x6e\\x00\\x2d\\x00\\x61\\x00\\x2d\\x00\\x63\\x00\\x69\\x00\\x72\\x00\\x63\\x00\\x6c\\x00\\x65\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x1b\\\n\\x05\\x6b\\x0d\\x87\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x63\\x00\\x69\\x00\\x72\\x00\\x63\\x00\\x6c\\x00\\x65\\x00\\x64\\x00\\x2d\\x00\\x67\\x00\\x2d\\\n\\x00\\x66\\x00\\x69\\x00\\x6c\\x00\\x6c\\x00\\x65\\x00\\x64\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x10\\\n\\x04\\xeb\\x2a\\x67\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x73\\x00\\x6f\\x00\\x63\\x00\\x6b\\x00\\x73\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x17\\\n\\x05\\xc7\\x19\\x47\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x73\\x00\\x61\\x00\\x76\\x00\\x65\\x00\\x2d\\x00\\x4d\\x00\\x61\\x00\\x78\\x00\\x77\\x00\\x65\\\n\\x00\\x6c\\x00\\x6c\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x17\\\n\\x0a\\xaa\\x15\\xe7\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x62\\x00\\x72\\x00\\x6f\\x00\\x61\\x00\\x64\\x00\\x63\\x00\\x61\\x00\\x73\\x00\\x74\\x00\\x69\\\n\\x00\\x6e\\x00\\x67\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x12\\\n\\x03\\x1c\\x68\\xa7\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x62\\x00\\x6f\\x00\\x62\\x00\\x2d\\x00\\x68\\x00\\x61\\x00\\x74\\x00\\x2e\\x00\\x70\\x00\\x6e\\\n\\x00\\x67\\\n\\x00\\x15\\\n\\x05\\x39\\x6b\\xe7\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x61\\x00\\x62\\x00\\x61\\x00\\x63\\x00\\x75\\x00\\x73\\x00\\x2d\\x00\\x65\\x00\\x72\\x00\\x72\\\n\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x17\\\n\\x07\\x97\\x3f\\xe7\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x66\\x00\\x6c\\x00\\x61\\x00\\x74\\x00\\x2d\\x00\\x74\\x00\\x69\\x00\\x72\\x00\\x65\\x00\\x2d\\\n\\x00\\x38\\x00\\x30\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x12\\\n\\x09\\xf1\\xdb\\xa7\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x73\\x00\\x61\\x00\\x76\\x00\\x65\\x00\\x5f\\x00\\x54\\x00\\x48\\x00\\x2e\\x00\\x70\\x00\\x6e\\\n\\x00\\x67\\\n\\x00\\x14\\\n\\x03\\x58\\xa4\\x87\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x73\\x00\\x74\\x00\\x6f\\x00\\x70\\x00\\x2d\\x00\\x73\\x00\\x69\\x00\\x67\\x00\\x6e\\x00\\x2e\\\n\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x16\\\n\\x00\\xb3\\x02\\x87\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x6e\\x00\\x6f\\x00\\x71\\x00\\x75\\x00\\x69\\x00\\x65\\x00\\x73\\x00\\x63\\x00\\x65\\x00\\x6e\\\n\\x00\\x74\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x13\\\n\\x0e\\x9d\\x8e\\xc7\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x73\\x00\\x61\\x00\\x76\\x00\\x65\\x00\\x2d\\x00\\x42\\x00\\x6f\\x00\\x42\\x00\\x2e\\x00\\x70\\\n\\x00\\x6e\\x00\\x67\\\n\\x00\\x1c\\\n\\x06\\xb5\\x33\\xe7\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x73\\x00\\x61\\x00\\x76\\x00\\x65\\x00\\x2d\\x00\\x53\\x00\\x68\\x00\\x69\\x00\\x66\\x00\\x74\\\n\\x00\\x46\\x00\\x61\\x00\\x63\\x00\\x74\\x00\\x6f\\x00\\x72\\x00\\x73\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x13\\\n\\x09\\x38\\x9e\\x47\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x69\\x00\\x6e\\x00\\x66\\x00\\x69\\x00\\x6e\\x00\\x69\\x00\\x74\\x00\\x65\\x00\\x2e\\x00\\x70\\\n\\x00\\x6e\\x00\\x67\\\n\\x00\\x11\\\n\\x06\\x1e\\x3e\\xe7\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x61\\x00\\x62\\x00\\x61\\x00\\x63\\x00\\x75\\x00\\x73\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\\n\\x00\\x15\\\n\\x0c\\x57\\xc9\\xc7\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x66\\x00\\x61\\x00\\x63\\x00\\x65\\x00\\x62\\x00\\x6f\\x00\\x6f\\x00\\x6b\\x00\\x2d\\x00\\x66\\\n\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x18\\\n\\x01\\x15\\xf5\\x67\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x6d\\x00\\x69\\x00\\x6e\\x00\\x69\\x00\\x6d\\x00\\x75\\x00\\x6d\\x00\\x2d\\x00\\x76\\x00\\x61\\\n\\x00\\x6c\\x00\\x75\\x00\\x65\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x19\\\n\\x03\\x29\\x1c\\x27\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x76\\x00\\x65\\x00\\x72\\x00\\x74\\x00\\x69\\x00\\x63\\x00\\x61\\x00\\x6c\\x00\\x2d\\x00\\x73\\\n\\x00\\x68\\x00\\x69\\x00\\x66\\x00\\x74\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x0f\\\n\\x04\\x6c\\x80\\xe7\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x73\\x00\\x61\\x00\\x76\\x00\\x65\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x13\\\n\\x02\\x28\\xbb\\xa7\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x65\\x00\\x69\\x00\\x6e\\x00\\x73\\x00\\x74\\x00\\x65\\x00\\x69\\x00\\x6e\\x00\\x2e\\x00\\x70\\\n\\x00\\x6e\\x00\\x67\\\n\\x00\\x1f\\\n\\x08\\x98\\x47\\x07\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x61\\x00\\x64\\x00\\x6d\\x00\\x69\\x00\\x6e\\x00\\x69\\x00\\x73\\x00\\x74\\x00\\x72\\x00\\x61\\\n\\x00\\x74\\x00\\x69\\x00\\x76\\x00\\x65\\x00\\x2d\\x00\\x74\\x00\\x6f\\x00\\x6f\\x00\\x6c\\x00\\x73\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x17\\\n\\x0d\\x90\\xab\\x27\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x73\\x00\\x63\\x00\\x61\\x00\\x74\\x00\\x74\\x00\\x65\\x00\\x72\\x00\\x2d\\x00\\x70\\x00\\x6c\\\n\\x00\\x6f\\x00\\x74\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x0e\\\n\\x0f\\x47\\xdf\\x67\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x2d\\x00\\x73\\x00\\x68\\x00\\x65\\x00\\x61\\x00\\x72\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x17\\\n\\x0b\\x67\\x5d\\x67\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x72\\x00\\x6f\\x00\\x61\\x00\\x64\\x00\\x2d\\x00\\x63\\x00\\x6c\\x00\\x6f\\x00\\x73\\x00\\x75\\\n\\x00\\x72\\x00\\x65\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x14\\\n\\x02\\xd5\\x2b\\xe7\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x65\\x00\\x64\\x00\\x69\\x00\\x74\\x00\\x2d\\x00\\x66\\x00\\x69\\x00\\x6c\\x00\\x65\\x00\\x2e\\\n\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x0d\\\n\\x03\\xbb\\x7f\\x87\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x2d\\x00\\x75\\x00\\x65\\x00\\x78\\x00\\x74\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x0c\\\n\\x08\\x58\\x50\\xa7\\\n\\x00\\x6c\\\n\\x00\\x76\\x00\\x65\\x00\\x2d\\x00\\x69\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x20\\\n\\x01\\x1e\\xe6\\xa7\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x6d\\x00\\x69\\x00\\x6e\\x00\\x69\\x00\\x6d\\x00\\x75\\x00\\x6d\\x00\\x2d\\x00\\x76\\x00\\x61\\\n\\x00\\x6c\\x00\\x75\\x00\\x65\\x00\\x2d\\x00\\x6f\\x00\\x70\\x00\\x74\\x00\\x69\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x18\\\n\\x01\\xe7\\xb8\\xc7\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x53\\x00\\x69\\x00\\x6e\\x00\\x67\\x00\\x6c\\x00\\x65\\x00\\x53\\x00\\x70\\x00\\x65\\x00\\x63\\\n\\x00\\x69\\x00\\x65\\x00\\x73\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x10\\\n\\x03\\x0a\\x2f\\x47\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x72\\x00\\x65\\x00\\x73\\x00\\x65\\x00\\x74\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x0b\\\n\\x0f\\x0c\\x4e\\xbf\\\n\\x00\\x50\\\n\\x00\\x68\\x00\\x79\\x00\\x73\\x00\\x69\\x00\\x63\\x00\\x73\\x00\\x2e\\x00\\x69\\x00\\x63\\x00\\x6f\\\n\\x00\\x0c\\\n\\x0f\\xdf\\x39\\x9f\\\n\\x00\\x53\\\n\\x00\\x65\\x00\\x74\\x00\\x74\\x00\\x69\\x00\\x6e\\x00\\x67\\x00\\x73\\x00\\x2e\\x00\\x69\\x00\\x63\\x00\\x6f\\\n\\x00\\x0a\\\n\\x09\\x31\\x78\\x9f\\\n\\x00\\x42\\\n\\x00\\x75\\x00\\x62\\x00\\x62\\x00\\x6c\\x00\\x65\\x00\\x2e\\x00\\x69\\x00\\x63\\x00\\x6f\\\n\\x00\\x0c\\\n\\x0b\\x88\\xef\\x1f\\\n\\x00\\x4d\\\n\\x00\\x69\\x00\\x6e\\x00\\x69\\x00\\x6d\\x00\\x69\\x00\\x7a\\x00\\x65\\x00\\x2e\\x00\\x69\\x00\\x63\\x00\\x6f\\\n""\n\nqt_resource_struct_v1 = b""\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\\n\\x00\\x00\\x00\\x10\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x08\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x03\\\n\\x00\\x00\\x00\\x20\\x00\\x02\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x04\\\n\\x00\\x00\\x08\\x9c\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x02\\xdc\\xb0\\\n\\x00\\x00\\x08\\xb6\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x03\\x24\\x48\\\n\\x00\\x00\\x08\\x62\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x02\\x4f\\xb2\\\n\\x00\\x00\\x08\\x7e\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x02\\x89\\xdd\\\n\\x00\\x00\\x00\\x20\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x09\\\n\\x00\\x00\\x00\\x32\\x00\\x02\\x00\\x00\\x00\\x2c\\x00\\x00\\x00\\x0a\\\n\\x00\\x00\\x02\\x14\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x84\\x6a\\\n\\x00\\x00\\x04\\xa8\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x2a\\x8c\\\n\\x00\\x00\\x05\\xc8\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x9f\\x6d\\\n\\x00\\x00\\x07\\xc0\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x02\\x0c\\x53\\\n\\x00\\x00\\x08\\x06\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x02\\x15\\x37\\\n\\x00\\x00\\x06\\x5a\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\xb9\\x28\\\n\\x00\\x00\\x00\\x6c\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x09\\x65\\\n\\x00\\x00\\x07\\x54\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\xf1\\x2e\\\n\\x00\\x00\\x08\\x3c\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x02\\x46\\x5d\\\n\\x00\\x00\\x03\\xc2\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\xf1\\xdb\\\n\\x00\\x00\\x05\\xfe\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\xa4\\x5d\\\n\\x00\\x00\\x04\\x7a\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x22\\xc0\\\n\\x00\\x00\\x07\\x82\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x02\\x00\\x93\\\n\\x00\\x00\\x02\\x72\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x99\\x20\\\n\\x00\\x00\\x01\\xae\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x60\\x02\\\n\\x00\\x00\\x06\\x36\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\xb6\\x11\\\n\\x00\\x00\\x00\\x4a\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x03\\x34\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\xcf\\x0b\\\n\\x00\\x00\\x03\\xec\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\xf8\\x1e\\\n\\x00\\x00\\x02\\xf8\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\xc2\\x63\\\n\\x00\\x00\\x03\\x5a\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\xdc\\xac\\\n\\x00\\x00\\x05\\x70\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x93\\x1e\\\n\\x00\\x00\\x00\\xec\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x32\\x9c\\\n\\x00\\x00\\x05\\x06\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x82\\x1d\\\n\\x00\\x00\\x00\\xb4\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x26\\xb9\\\n\\x00\\x00\\x04\\x1c\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x03\\xa9\\\n\\x00\\x00\\x01\\x48\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x3f\\x00\\\n\\x00\\x00\\x02\\x44\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x90\\xc0\\\n\\x00\\x00\\x07\\xa2\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x02\\x06\\x1e\\\n\\x00\\x00\\x00\\x96\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x18\\x3a\\\n\\x00\\x00\\x06\\x86\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\xc9\\x96\\\n\\x00\\x00\\x05\\x44\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x87\\xbc\\\n\\x00\\x00\\x02\\x9c\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\xa4\\x34\\\n\\x00\\x00\\x01\\xe2\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x76\\x04\\\n\\x00\\x00\\x04\\x50\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x1e\\x58\\\n\\x00\\x00\\x03\\x8e\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\xe3\\x1c\\\n\\x00\\x00\\x07\\x20\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\xeb\\x9a\\\n\\x00\\x00\\x01\\x78\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x4e\\xe6\\\n\\x00\\x00\\x05\\x98\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x9c\\x92\\\n\\x00\\x00\\x06\\xca\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\xd5\\x31\\\n\\x00\\x00\\x01\\x1e\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x39\\x1a\\\n\\x00\\x00\\x04\\xda\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x78\\x87\\\n\\x00\\x00\\x02\\xb2\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\xb8\\x5b\\\n\\x00\\x00\\x06\\xfe\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\xe0\\x50\\\n""\n\nqt_resource_struct_v2 = b""\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\x10\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x08\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x03\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\x20\\x00\\x02\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x04\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x08\\x9c\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x02\\xdc\\xb0\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x08\\xb6\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x03\\x24\\x48\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x08\\x62\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x02\\x4f\\xb2\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x08\\x7e\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x02\\x89\\xdd\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x00\\x20\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x09\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\x32\\x00\\x02\\x00\\x00\\x00\\x2c\\x00\\x00\\x00\\x0a\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x02\\x14\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x84\\x6a\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x04\\xa8\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x2a\\x8c\\\n\\x00\\x00\\x01\\x71\\x23\\xb7\\x8a\\x81\\\n\\x00\\x00\\x05\\xc8\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x9f\\x6d\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x07\\xc0\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x02\\x0c\\x53\\\n\\x00\\x00\\x01\\x71\\x25\\xbb\\x3f\\x54\\\n\\x00\\x00\\x08\\x06\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x02\\x15\\x37\\\n\\x00\\x00\\x01\\x71\\x23\\xb7\\x8a\\x80\\\n\\x00\\x00\\x06\\x5a\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\xb9\\x28\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x00\\x6c\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x09\\x65\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x07\\x54\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\xf1\\x2e\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x08\\x3c\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x02\\x46\\x5d\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x03\\xc2\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\xf1\\xdb\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x05\\xfe\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\xa4\\x5d\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x04\\x7a\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x22\\xc0\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x07\\x82\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x02\\x00\\x93\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x02\\x72\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x99\\x20\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x01\\xae\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x60\\x02\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x06\\x36\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\xb6\\x11\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x00\\x4a\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x03\\x34\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\xcf\\x0b\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x03\\xec\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\xf8\\x1e\\\n\\x00\\x00\\x01\\x71\\x25\\xbb\\x3f\\x4e\\\n\\x00\\x00\\x02\\xf8\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\xc2\\x63\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x03\\x5a\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\xdc\\xac\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x05\\x70\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x93\\x1e\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x00\\xec\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x32\\x9c\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x05\\x06\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x82\\x1d\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x00\\xb4\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x26\\xb9\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x04\\x1c\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x03\\xa9\\\n\\x00\\x00\\x01\\x71\\x25\\xbb\\x3f\\x52\\\n\\x00\\x00\\x01\\x48\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x3f\\x00\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x02\\x44\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x90\\xc0\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x07\\xa2\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x02\\x06\\x1e\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x00\\x96\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x18\\x3a\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x06\\x86\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\xc9\\x96\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x05\\x44\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x87\\xbc\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x02\\x9c\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\xa4\\x34\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x01\\xe2\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x76\\x04\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x04\\x50\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x1e\\x58\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x03\\x8e\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\xe3\\x1c\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x07\\x20\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\xeb\\x9a\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x01\\x78\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x4e\\xe6\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x05\\x98\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x9c\\x92\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x06\\xca\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\xd5\\x31\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x01\\x1e\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x39\\x1a\\\n\\x00\\x00\\x01\\x71\\x25\\xbb\\x3f\\x55\\\n\\x00\\x00\\x04\\xda\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x78\\x87\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x02\\xb2\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\xb8\\x5b\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x06\\xfe\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\xe0\\x50\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n""\n\nqt_version = [int(v) for v in QtCore.qVersion().split(\'.\')]\nif qt_version < [5, 8, 0]:\n    rcc_version = 1\n    qt_resource_struct = qt_resource_struct_v1\nelse:\n    rcc_version = 2\n    qt_resource_struct = qt_resource_struct_v2\n\ndef qInitResources():\n    QtCore.qRegisterResourceData(rcc_version, qt_resource_struct, qt_resource_name, qt_resource_data)\n\ndef qCleanupResources():\n    QtCore.qUnregisterResourceData(rcc_version, qt_resource_struct, qt_resource_name, qt_resource_data)\n\nqInitResources()\n'"
RepTate/gui/Tool_rc.py,0,"b'# -*- coding: utf-8 -*-\n\n# Resource object code\n#\n# Created by: The Resource Compiler for PyQt5 (Qt v5.14.0)\n#\n# WARNING! All changes made in this file will be lost!\n\nfrom PyQt5 import QtCore\n\nqt_resource_data = b""\\\n\\x00\\x00\\x05\\xc9\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x64\\x00\\x00\\x00\\x64\\x08\\x06\\x00\\x00\\x00\\x70\\xe2\\x95\\x54\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0e\\xc3\\x00\\x00\\x0e\\xc3\\x01\\xc7\\x6f\\\n\\xa8\\x64\\x00\\x00\\x05\\x5e\\x49\\x44\\x41\\x54\\x78\\x5e\\xed\\x9b\\xdd\\x6b\\\n\\x5c\\x45\\x18\\x87\\xa3\\x08\\x7e\\x81\\x5e\\x29\\x7a\\xa1\\x7f\\x84\\x57\\x5e\\\n\\x88\\x4b\\x37\\xd9\\x39\\x4b\\x6d\\xa0\\x42\\x6e\\x62\\x69\\xd5\\x2a\\x44\\xa9\\\n\\x34\\xd8\\x54\\x4a\\x4b\\xa1\\x51\\x9a\\x34\\x17\\xb6\\x9b\\xea\\x8d\\x69\\x69\\\n\\xce\\xe6\\x4b\\x69\\xad\\xf9\\x30\\x31\\xa1\\xa6\\x69\\x9a\\x34\\x4a\\x92\\x22\\\n\\x85\\xaa\\xa5\\x82\\xa5\\xa6\\x2a\\xe8\\x85\\x4a\\xad\\x31\\x4d\\x2b\\x1d\\x67\\\n\\xca\\xbb\\x12\\xcc\\xdb\\xcc\\xc9\\x9c\\xb3\\xc9\\xbc\\xb3\\xef\\x0f\\x1e\\x96\\\n\\x2c\\x9c\\xdd\\xec\\xef\\xc9\\xcc\\xec\\x39\\x73\\x52\\xc6\\xe1\\x70\\x38\\x1c\\\n\\x0e\\x87\\xc3\\x71\\x31\\x07\\x26\\xe7\\xd2\\xcd\\x53\\xf3\\xc3\\xf4\\xb8\\x7e\\\n\\x24\\x1c\\x95\\xf7\\xc1\\xc7\\xf0\\x27\\xea\\xc3\\xbd\\xd0\\x3c\\x3d\\x2f\\x29\\\n\\x92\\x9b\\x9e\\x1f\\xf2\\x4e\\x0a\\x65\\x21\\x1a\\xef\\xa4\\x50\\x13\\x92\\x3f\\\n\\x7f\\x63\\xd1\\x73\\x5e\\x49\\xa1\\x26\\x64\\xf4\\xc7\\x7f\\xe4\\xc9\\x2b\\x37\\\n\\x17\\x3d\\xef\\x8d\\x14\\x8a\\x42\\x66\\x66\\x6f\\xf9\\x2b\\x85\\xaa\\x10\\x6f\\\n\\xa5\\x50\\x16\\xe2\\xa5\\x14\\xea\\x42\\xbc\\x93\\xe2\\x83\\x10\\xaf\\xa4\\xf8\\\n\\x22\\x44\\xe3\\x85\\x14\\x9f\\x84\\x68\\xc8\\x4b\\xf1\\x4d\\x88\\x86\\xb4\\x14\\\n\\x1f\\x85\\x68\\xc8\\x4a\\xf1\\x55\\x88\\x86\\xa4\\x14\\x9f\\x85\\x68\\xc8\\x49\\\n\\xf1\\x5d\\x88\\x86\\x94\\x94\\x52\\x10\\xa2\\x21\\x23\\xa5\\x54\\x84\\x68\\x48\\\n\\x48\\x29\\x25\\x21\\x1a\\xe7\\xa5\\x94\\x9a\\x10\\x8d\\xd3\\x52\\x4a\\x51\\x88\\\n\\x06\\x95\\x72\\x76\\xbe\\x1a\\x6a\\x59\\xbd\\x94\\xaa\\x10\\xcd\\x22\\x29\\xaa\\\n\\x0b\\xa8\\x65\\xf5\\x42\\x4d\\x48\\xcb\\xb9\\x1b\\x32\\xff\\x75\\x72\\xbc\\x77\\\n\\x76\\xc1\\xeb\\xb3\\x10\\xc7\\x60\\x21\\x8e\\xc1\\x42\\x1c\\x83\\x85\\x38\\x06\\\n\\x0b\\x71\\x0c\\x16\\xe2\\x18\\x2c\\xc4\\x31\\x58\\x88\\x63\\xb0\\x10\\xc7\\x60\\\n\\x21\\x8e\\xc1\\x42\\x1c\\x83\\x85\\x38\\x06\\x0b\\x71\\x0c\\x16\\xe2\\x18\\x2c\\\n\\xc4\\x31\\x58\\x88\\x63\\xb0\\x10\\xc7\\x60\\x21\\x8e\\xc1\\x42\\x1c\\x83\\x85\\\n\\x38\\x06\\x0b\\x71\\x0c\\x16\\xe2\\x18\\x2c\\xc4\\x31\\x58\\x88\\x63\\xb0\\x10\\\n\\xc7\\x60\\x21\\x8e\\xc1\\x42\\x1c\\x83\\x85\\x38\\x06\\x0b\\x59\\x39\\x1a\\x27\\\n\\x66\\xe4\\x8e\\x93\\xa7\\xe4\\x96\\xc1\\x4e\\xf9\\x4a\\x5f\\xb3\\x7c\\xa9\\xb7\\\n\\x49\\x6e\\xec\\xde\\x2b\\x37\\xf7\\xe5\\x64\\xcd\\xc0\\x61\\x59\\x77\\x62\\x40\\\n\\xd6\\x0e\\x75\\xef\\x4e\\x8d\\xa6\\xee\\x81\\x6a\\x56\\x27\\x3e\\x0b\\xa9\\x1f\\\n\\xff\\x56\\xbe\\xfa\\xe9\\xfb\\xb2\\xb2\\x6b\\xa3\\x2c\\xcf\\x07\\x91\\x48\\x87\\\n\\xe2\\x6a\\x3a\\x2f\\x3e\\x51\\x8f\\xeb\\xb3\\x07\\xb3\\xf7\\x42\\x4d\\x2b\\x17\\\n\\x1f\\x85\\xec\\x3a\\xf5\\xa5\\xac\\x3a\\xf6\\x26\\x5a\\xf8\\xb2\\x08\\xc5\\x4f\\\n\\xe5\\x6d\\xc1\\xb6\\xa7\\x8f\\x56\\xdd\\x0f\\x75\\x15\\x3f\\x3e\\x09\\x69\\x50\\\n\\xd3\\x52\\xf5\\xf1\\x9d\\x78\\xb9\\xb1\\x10\\x97\\xd3\\xad\\x99\\x4a\\xa8\\xac\\\n\\xb8\\xf1\\x45\\xc8\\x5b\\xc3\\x27\\x64\\xd0\\xbe\\x1e\\x29\\x33\\x39\\xd2\\x61\\\n\\xd0\\x92\\x0a\\x53\\xc5\\xfd\\x3f\\x44\\xea\\x42\\x72\\xd3\\xd7\\x65\\x4d\\xff\\\n\\x07\\x68\\x81\\xc5\\x40\\xad\\x2f\\xd3\\xd9\\x23\\xd9\\x47\\xa0\\xbe\\xe4\\x43\\\n\\x59\\x88\\x96\\xf1\\x72\\xef\\xbb\\x68\\x71\\xc5\\x45\\x5c\\xcc\\xb4\\x67\\x1e\\\n\\x85\\x0a\\x93\\x0d\\x65\\x21\\x35\\xfd\\x87\\x90\\xb2\\x56\\x06\\x35\\x52\\xce\\\n\\x57\\xb4\\x54\\x3c\\x0c\\x35\\x26\\x17\\xaa\\x42\\xb6\\xab\\x35\\x03\\x2b\\x6a\\\n\\x29\\xde\\x39\\xbd\\x77\\x49\\xaa\\x3f\\x8e\\xfe\\xf5\\xf8\\x36\\xa1\\xe8\\x2e\\\n\\x93\\x65\\x77\\x41\\x95\\xc9\\x84\\xa2\\x90\\x86\\x89\\x1f\\xac\\x16\\x70\\x53\\\n\\x1a\\xc6\\x9b\\xd0\\xe3\\x96\\x42\\x2d\\xf4\\xaf\\x41\\x95\\xc9\\x84\\xa2\\x90\\\n\\xea\\xe3\\xbb\\xd0\\x72\\x4c\\x98\\x62\\x27\\x44\\x5c\\x4d\\x85\\x6b\\x1f\\x83\\\n\\x3a\\xe3\\x87\\x9a\\x10\\x7d\\xd2\\x87\\x15\\x13\\x05\\x53\\x6c\\x84\\xdc\\x26\\\n\\x14\\x87\\xa1\\xce\\xf8\\xa1\\x26\\x24\\xce\\x19\\xb8\\x29\\xb6\\x42\\xd4\\x28\\\n\\x99\\x17\\xad\\xe2\\x09\\xa8\\x34\\x5e\\x28\\x09\\x79\\x7b\\xec\\x02\\x5a\\x48\\\n\\x54\\x4c\\xb1\\x1e\\x21\\x9a\\x50\\x34\\x40\\xa5\\xf1\\x42\\x49\\x88\\xbe\\x50\\\n\\x88\\x96\\x11\\x11\\x53\\xe2\\x08\\x51\\x8b\\xfb\\xcc\\x9e\\x3d\\x7b\\xee\\x86\\\n\\x5a\\xed\\x43\\x49\\xc8\\x72\\xae\\xda\\x62\\x98\\x12\\x6b\\x84\\x28\\xd2\\xad\\\n\\xc1\\x53\\x50\\xab\\x7d\\xa8\\x08\\x69\\xfc\\xe2\\x0a\\x5a\\xc2\\x72\\x30\\x25\\\n\\xae\\x90\\x35\\x79\\xb1\\x1d\\x6a\\xb5\\x0f\\x15\\x21\\x7a\\x73\\x09\\x2b\\xa1\\\n\\x80\\x2e\\xb3\\xd8\\x19\\xb9\\xb4\\xf4\\xef\\xa0\\xd6\\x91\\x0f\\xa1\\x56\\xfb\\\n\\x50\\x11\\xb2\\x65\\xb0\\x03\\x2f\\x01\\x70\\x41\\x48\\x3a\\x1f\\x9c\\x83\\x5a\\\n\\xed\\x43\\x45\\xc8\\xe6\\xbe\\x83\\x68\\x09\\x05\\x9c\\x18\\x21\\xf9\\xe0\\x17\\\n\\xa8\\xd5\\x3e\\x54\\x84\\xbc\\xd8\\xb3\\x0f\\x2b\\xe0\\x3f\\x1c\\x99\\xb2\\xfe\\\n\\x86\\x5a\\xed\\x43\\x45\\xc8\\xa6\\x9e\\x46\\xbc\\x04\\xc0\\x0d\\x21\\xc1\\x4d\\\n\\xa8\\xd5\\x3e\\x74\\xa6\\xac\\x1c\\x5e\\x02\\xe0\\xc8\\x1a\\xf2\\x1b\\xd4\\x6a\\\n\\x1f\\x2a\\x42\\x4c\\x7b\\x1f\\x4e\\x08\\x09\\xc5\\x77\\x50\\xab\\x7d\\xa8\\x08\\\n\\xa9\\xfb\\x7c\\x10\\x2d\\xa1\\x80\\x1b\\x42\\x82\\x7e\\xa8\\xd5\\x3e\\x54\\x84\\\n\\xd4\\x8f\\x7d\\x83\\x96\\x50\\x40\\x6f\\x2e\\x61\\x9b\\x4e\\x0b\\x31\\xa5\\xfb\\\n\\x42\\x2f\\x7a\\x5c\\x81\\x37\\x06\\x6a\\xd1\\xf7\\x2e\\xa0\\xa6\\xac\\x7d\\x50\\\n\\xab\\x7d\\xa8\\x08\\xc9\\x4d\\xcf\\xc9\\xa0\\xfd\\x79\\xb4\\x88\\xa8\\x98\\xa2\\\n\\x47\\x19\\x76\\x5c\\x64\\x42\\x91\\x85\\x5a\\xed\\x43\\x45\\x88\\x66\\x43\\x77\\\n\\x3d\\x5e\\x44\\x44\\x4c\\x89\\x23\\x44\\x4d\\x57\\x7f\\x65\\xda\\x33\\x0f\\x42\\\n\\xad\\xf6\\xa1\\x24\\x64\\xc7\\xc8\\x18\\x5a\\x46\\x54\\x4c\\x89\\x35\\x42\\x42\\\n\\xd1\\x01\\x95\\xc6\\x0b\\x25\\x21\\xb9\\xa9\\x59\\xf9\\x5c\\x57\\x35\\x5e\\x48\\\n\\x04\\x4c\\x89\\x23\\xa4\\xa2\\x2d\\x9b\\x82\\x4a\\xe3\\x85\\x92\\x10\\xcd\\xd6\\\n\\xa1\\x63\\x68\\x21\\x51\\x30\\xc5\\x56\\x88\\xfa\\xba\\x7b\\x06\\xea\\x8c\\x1f\\\n\\x6a\\x42\\xf6\\x4f\\xfe\\x29\\x2b\\xbb\\x36\\xa1\\xc5\\x98\\x30\\xc5\\x4a\\x48\\\n\\x18\\xdc\\x52\\xa3\\xe3\\x19\\xa8\\x33\\x7e\\xa8\\x09\\xd1\\xec\\x1c\\x39\\x83\\\n\\x97\\x63\\xc0\\x14\\x4b\\x21\\xad\\x50\\x65\\x32\\xa1\\x28\\x44\\x63\\xba\\x94\\\n\\x82\\x71\\xfa\\xf2\\xf8\\x92\\xd4\\x0e\\x6e\\x43\\x8f\\xbb\\x13\\xea\\xbc\\xe3\\\n\\x52\\xe2\\x77\\x2f\\x52\\x15\\xb2\\x7f\\xea\\x9a\\xac\\x3a\\xba\\x15\\x2d\\x6a\\\n\\x25\\x48\\xe7\\xc5\\x6c\\x22\\x5b\\xb6\\xff\\xcf\\x81\\xc9\\xb9\\xb4\\x92\\x32\\\n\\x4c\\x91\\xa6\\x89\\x9f\\xc7\\xd6\\x76\\x6e\\x98\\xc5\\x0a\\x2b\\x26\\xfa\\xb6\\\n\\x9f\\x74\\xab\\xc8\\x40\\x85\\x9c\\x85\\xd1\\x77\\x0d\\xea\\x9d\\x3a\\xac\\xb8\\\n\\xa2\\x10\\x06\\xd7\\xd6\\xe4\\x33\\x02\\xde\\x9e\\x83\\x25\\xdb\\x91\\x7d\\x48\\\n\\x95\\xd5\\xb3\\xa8\\xbc\\xa4\\x09\\xc5\\xf7\\x45\\x99\\xa6\\x7c\\x4d\\x79\\x5e\\\n\\xbc\\xae\\x8a\\xfb\\x63\\x51\\x91\\x71\\x51\\x5f\\x6d\\xd5\\x6b\\x87\\x5a\\x3c\\\n\\xbc\\x15\\x27\\x6a\\x82\\x8e\\xe0\\x71\\x35\\x85\\x1d\\xd2\\xf3\\x3c\\x5a\\xee\\\n\\xb2\\x11\\xe3\\x89\\x9e\\x67\\x94\\x6a\\x2a\\xda\\x2a\\x9e\\x54\\x53\\x4c\\x83\\\n\\xbe\\xa3\\x10\\x2f\\xfa\\xce\\xe8\\x0b\\x85\\x4a\\x6a\\xa7\\x5a\\x2b\\x9e\\x85\\\n\\x97\\xe3\\x24\\x15\\x7d\\x7b\\xa7\\x9e\\xf7\\xd5\\x88\\xa9\\x53\\x7f\\xed\\x1f\\\n\\x29\\xbe\\x52\\x85\\xff\\xaa\\x6f\\x48\\xd0\\x7b\\xe0\\xea\\xf1\\x77\\xf5\\xdc\\\n\\x45\\xc5\\x67\\x7a\\x3f\\x43\\xfd\\x9c\\x5d\\xd7\\xb2\\xee\\x01\\x38\\x7c\\x99\\\n\\x29\\x2b\\xfb\\x17\\x19\\x57\\xad\\x09\\x7e\\x81\\xfa\\x22\\x00\\x00\\x00\\x00\\\n\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x04\\x4c\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x28\\x00\\x00\\x00\\x28\\x08\\x06\\x00\\x00\\x00\\x8c\\xfe\\xb8\\x6d\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x16\\x25\\x00\\x00\\x16\\x25\\x01\\x49\\x52\\\n\\x24\\xf0\\x00\\x00\\x03\\xe1\\x49\\x44\\x41\\x54\\x58\\x47\\xcd\\x99\\x5b\\x48\\\n\\x54\\x41\\x18\\xc7\\xff\\xab\\xa6\\xbb\\xea\\xae\\xba\\x17\\x75\\xd5\\xcc\\xc4\\\n\\xda\\x6e\\x84\\x95\\x52\\xbd\\x06\\x45\\x45\\x94\\x10\\x45\\x10\\x11\\x41\\x4f\\\n\\x3d\\x55\\x06\\x45\\xf5\\x58\\x74\\x91\\xa8\\x87\\x88\\x8a\\xa0\\xa0\\x32\\x28\\\n\\xe8\\x42\\x2f\\x99\\x50\\x41\\x45\\x05\\x41\\x90\\xa9\\x64\\x99\\x95\\xbb\\x4a\\\n\\x5e\\x56\\xf1\\xb2\\xda\\x56\\xda\\xcc\\x34\\x63\\x67\\xb3\\x73\\xe6\\xec\\xd9\\\n\\x73\\xa2\\x1f\\xac\\x3b\\xdf\\x77\\x8e\\x33\\xbf\\xf9\\xe6\\x9c\\xb3\\xb3\\x6a\\\n\\x1b\\x27\\xc0\\x00\\xe1\\xa9\\x33\\x78\\xeb\\x37\\xee\\xf6\\x77\\xbc\\x65\\x1e\\\n\\x49\\xf4\\xc7\\xb6\\x73\\xaf\\x58\\xa0\\x17\\xa5\\x9c\\x52\\xea\\x6f\\xd2\\x89\\\n\\xc2\\x04\\x3b\\xfb\\xbf\\xb2\\x20\\x5e\\x84\\x9c\\x15\\x95\\x13\\x30\\x41\\xa3\\\n\\x88\\x8a\\x59\\x51\\x39\\x81\\x21\\x41\\xb5\\x65\\xad\\x3e\\x78\\x1d\\xab\\x6b\\\n\\x5e\\xb0\\x4b\\x86\\xe6\\xcd\\x10\\x37\\x5c\\xc1\\x3f\\x97\\xf5\\x68\\xcd\\x5d\\\n\\x6c\\x5d\\x56\\x86\\x93\\xdb\\x16\\xe1\\xc4\\xa1\\x8d\\x3c\\x9b\\x78\\x75\\x13\\\n\\x5a\\x62\\xd7\\xc7\\x16\\x1c\\x39\\x7e\\x07\\xb5\\x97\\x1e\\x60\\xc7\\xaa\\x00\\\n\\x4a\\x72\\x33\\xe1\\x5b\\x30\\x9b\\x1d\\x1b\\x78\\xd3\\x82\\xda\\x8b\\x0f\\x59\\\n\\x3b\\x11\\xc9\\x84\\x04\\x2f\\x3c\\xfa\\x8c\\x9c\\xcc\\x54\\xac\\xa9\\x28\\xe2\\\n\\x99\\x58\\xd6\\x54\\x16\\xf2\\xd6\\x64\\xf4\\x5e\\x02\\x86\\x05\\x5b\\xbf\\x0c\\\n\\xe3\\xd9\\xfb\\x30\\xd6\\x2f\\x2d\\xe1\\x99\\x5f\\xd0\\xca\\x51\\x5c\\xf3\\x66\\\n\\xb2\\x17\\x65\\xd7\\xc1\\x1b\\x68\\xed\\x1a\\x66\\x6d\\x8a\\x52\\x4c\\x26\\x69\\\n\\x58\\xf0\\x74\\x7d\\x1b\\xaa\\x16\\x17\\x23\\x6d\\x4a\\x32\\xcf\\xfc\\x46\\x48\\\n\\x52\\x68\\x7b\\x2d\\xa9\\xf0\\xe9\\xfb\\x6d\\x2c\\x16\\x42\\xf4\\x1a\\x16\\xd7\\\n\\xb1\\x96\\xa4\\x21\\xc1\\xd7\\x9f\\x07\\x10\\xfd\\x01\\x94\\x4f\\x77\\xf3\\xcc\\\n\\x64\\xa8\\x98\\x10\\x5d\\x58\\xe6\\x41\\x24\\x3a\\x86\\x86\\xf6\\x01\\x16\\xc7\\\n\\x83\\x21\\xc1\\xab\\x4f\\x43\\x58\\x5e\\xee\\x87\\x8d\\xc7\\x32\\xe8\\x79\\x2b\\\n\\xca\\x0b\\x70\\xed\\x59\\x47\\x4c\\xd5\\x94\\xd5\\x54\\x23\\x6e\\xc1\\x60\\x78\\\n\\x84\\xbd\\xe6\\x17\\xe7\\xf0\\x8c\\x3e\\x16\\x90\\x6a\\x7f\\xea\\x89\\x20\\xd4\\\n\\x37\\x1a\\x23\\xa4\\x25\\x47\\x91\\x0a\\x8a\\x99\\x8a\\xd9\\xd6\\x35\\x74\\x63\\\n\\x49\\xc0\\x8b\\xa4\\x24\\xbd\\xf5\\xfb\\x05\\x3d\\x7f\\xf1\\x0c\\x0f\\xea\\x5e\\\n\\x77\\xb3\\x98\\x8a\\xc9\\xe4\\x28\\x9a\\x82\\x42\\x4a\\x40\\xe3\\x7a\\x32\\x40\\\n\\x65\\x99\\x97\\x67\\xe2\\xa3\\x82\\xfc\\x5e\\x7d\\x43\\x17\\xc6\\xe2\\xd8\\x40\\\n\\xa9\\x0a\\x2a\\xe5\\x94\\x33\\x3d\\x73\\x7c\\x13\\xf2\\x73\\x1c\\x3c\\x8a\\x8f\\\n\\x02\\x77\\x3a\\x1c\\x69\\xc9\\x68\\x0c\\x0e\\xf2\\x8c\\x1c\\xe9\\x12\\x0b\\x39\\\n\\x3d\\xcb\\xa1\\x07\\x5a\\xc5\\x27\\x6f\\x7b\\x79\\x24\\x47\\xd7\\x35\\xa8\\x7c\\\n\\x4f\\x94\\x8a\\x52\\x0f\\x1e\\xb7\\x84\\xa1\\x77\\x91\\x55\\x05\\x95\\x15\\x53\\\n\\xca\\x29\\x1f\\xc2\\x46\\xc8\\xcd\\xb6\\xc3\\x9e\\x92\\x82\\x4f\\xdd\\x11\\x9e\\\n\\xd1\\x86\\x6d\\xf9\\x57\\x1e\\x7b\\x8e\\x7b\\x7b\\x97\\x60\\xf7\\xe5\\x46\\xd8\\\n\\x88\\xf2\\x89\\xcd\\x73\\x27\\xda\\x07\\xf6\\x55\\xf1\\x53\\x81\\xf3\\x67\\xeb\\\n\\xd0\\xde\\x33\\x02\\x1b\\xb9\\x81\\xf7\\xac\\x9b\\x83\\x9a\\xdb\\x4d\\x86\\xda\\\n\\x85\\x6e\\x3b\\x9a\\xc9\\x43\\xdb\\xe7\\x4a\\x8d\\x19\\xeb\\xcf\\x36\\x25\\xa6\\\n\\x82\\x36\\x1b\\x29\\x3c\\xbf\\xc3\\x44\\x9b\\x56\\xf2\\xf0\\x91\\x5b\\xd8\\x5e\\\n\\x5d\\x8b\\x59\\x45\\x59\\xec\\x98\\xf2\\x26\\x34\\xd2\\x0e\\x14\\x66\\x63\\xe8\\\n\\xeb\\xf7\\x89\\x03\\x7f\\x1b\\x57\\x10\\x53\\x41\\x35\\xbe\\x8f\\x8d\\x63\\xc3\\\n\\xa9\\x97\\x38\\xbc\\xa5\\x1c\\xe9\\xa9\\x29\\x3c\\x6b\\x9c\\x61\\x22\\xb7\\xff\\\n\\xca\\x2b\\xdc\\xdc\\x59\\x89\\x64\\xc9\\xf3\\x34\\xa6\\x82\\x6a\\xd0\\x9d\\x4b\\\n\\x9e\\xdb\\x61\\x8a\\x1c\\x25\\x23\\x2d\\x05\\xfe\\x2c\\x07\\xde\\x93\\x7e\\x65\\\n\\xe8\\x12\\x6c\\x0e\\x0d\\x21\\x90\\x9f\\xc9\\x23\\x73\\x08\\x14\\x39\\x59\\xbf\\\n\\x32\\x74\\x09\\x36\\x75\\x0c\\xa2\\x24\\xdf\\xc9\\x23\\x73\\x98\\x96\\xeb\\x44\\\n\\x53\\x48\\xfe\\xc0\\xd6\\x25\\xd8\\xd8\\x3e\\x88\\xe9\\x64\\x3b\\x6f\\x26\\xd3\\\n\\x7c\\x19\\x68\\x26\\x13\\x97\\x21\\x15\\xec\\x19\\x8c\\xe2\\x1b\\xb9\\x49\\xb2\\\n\\x33\\x52\\x79\\xc6\\x1c\\x3c\\xce\\x34\\x8c\\x46\\xc7\\xd1\\x4b\\xfa\\xd7\\x42\\\n\\x2a\\xf8\\xb6\\x73\\x08\\xa5\\x64\\xb6\\x56\\x50\\x9a\\x97\\xc1\\xfa\\xd7\\x42\\\n\\x2a\\xf8\\xa1\\x2b\\x82\\xe2\\x3c\\x73\\x97\\x57\\x40\\x97\\xb9\\x4d\\xf2\\x89\\\n\\x22\\x15\\x6c\\xfd\\x12\\xc1\\x54\\x4f\\x3a\\x8f\\xcc\\xa5\\x88\\x08\\xb6\\x92\\\n\\x02\\x68\\x21\\x15\\xfc\\x48\\x66\\xe8\\x27\\xdb\\x24\\x2b\\xf0\\x67\\x3b\\xd0\\\n\\x96\\x88\\xe0\\xe8\\xb7\\x31\\xf4\\x45\\xa2\\xec\\x82\\xb6\\x02\\xaf\\xcb\\x8e\\\n\\xf0\\x70\\x94\\x8d\\xa3\\x86\\xa6\\x20\\xfd\\x0e\\x51\\x40\\x66\\xa9\\xfd\\x61\\\n\\x64\\x1c\\xba\\x71\\xa0\\x55\\xa4\\xe3\\xa8\\xa1\\x29\\x18\\x0c\\x8f\\xc2\\xef\\\n\\x35\\xb6\\x7b\\xd6\\x4b\\xa1\\xc7\\x81\\x10\\x19\\x47\\x0d\\x4d\\xc1\\x0e\\xf2\\\n\\x0d\\x2c\\x97\\x2c\\x83\\x95\\x78\\xb3\\xec\\x08\\x92\\x71\\xd4\\x90\\x56\\xd0\\\n\\xeb\\xb4\\x56\\xd0\\x47\\xfa\\xef\\xec\\x1d\\xe1\\xd1\\x64\\xa4\\x15\\xf4\\xb9\\\n\\xac\\xb9\\x41\\x04\\xb4\\xff\\x60\\x9f\\xfa\\x5f\\x78\\x25\\x82\\x23\\xf0\\x58\\\n\\xbc\\xc4\\xb4\\xff\\x8e\\x7e\\xf5\\x0a\\x4e\\x6c\\x58\\xff\\x47\\xe8\\x26\\xda\\\n\\xf0\\xbf\\x21\\xfe\\x0d\\xc0\\x4f\\x9e\\xff\\x93\\xb4\\x50\\xb3\\x30\\x8c\\x00\\\n\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x07\\x90\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x60\\x00\\x00\\x00\\x60\\x08\\x06\\x00\\x00\\x00\\xe2\\x98\\x77\\x38\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0e\\xc3\\x00\\x00\\x0e\\xc3\\x01\\xc7\\x6f\\\n\\xa8\\x64\\x00\\x00\\x07\\x25\\x49\\x44\\x41\\x54\\x78\\x5e\\xed\\x9b\\x5d\\xa8\\\n\\x54\\x55\\x00\\x85\\xd5\\xfe\\x28\\x2a\\xa3\\xe8\\x87\\x22\\x8b\\x12\\xaa\\x1b\\\n\\x5e\\xef\\xa8\\xe3\\x9d\\xac\\x10\\x22\\xa2\\x87\\x7a\\x88\\x32\\xc8\\x82\\x22\\\n\\xfa\\x21\\x8a\\x28\\xa8\\x07\\x21\\xfb\\x83\\x12\\x83\\x90\\x8a\\x82\\x1e\\x23\\\n\\x7b\\x28\\x08\\x09\\x8c\\xc4\\x20\\xb2\\xc2\\x0c\\x83\\x20\\xb1\\x87\\x34\\x89\\\n\\x92\\x20\\xfa\\xf3\\x41\\xec\\xa1\\xbc\\xb5\\xd6\\x69\\x8d\\xf7\\xde\\xbd\\xd7\\\n\\x78\\x67\\xee\\xcc\\x39\\x67\\x4f\\xec\\x0f\\x16\\xc8\\x59\\xeb\\xec\\xbd\\xf6\\\n\\x9e\\xb9\\x33\\xe7\\x5c\\xcf\\x9d\\x93\\xc9\\x64\\x32\\x99\\x4c\\x26\\x93\\xc9\\\n\\x64\\x32\\x99\\x4c\\x26\\x93\\xc9\\x74\\x62\\xe9\\xd2\\xa5\\xff\\x38\\xc9\\xce\\\n\\x94\\x8d\\xdb\\x7c\\x4a\\x76\\xa6\\x6c\\xdc\\xe6\\x53\\xb2\\x33\\x65\\xe3\\x36\\\n\\x9f\\x92\\x9d\\x29\\x1b\\xb7\\xf9\\x94\\xec\\x4c\\xd9\\xb8\\xcd\\xa7\\x64\\x67\\\n\\xca\\xc6\\x6d\\x3e\\x25\\x3b\\x53\\x36\\x6e\\xf3\\x29\\xd9\\x99\\xb2\\x71\\x9b\\\n\\x4f\\xc9\\xce\\x94\\x8d\\xdb\\x7c\\x4a\\x76\\x84\\xcb\\x52\\xb2\\x23\\x5c\\x96\\\n\\x92\\x1d\\xe1\\xb2\\x94\\xec\\x08\\x97\\xa5\\x64\\x47\\xb8\\x2c\\x25\\xbb\\x7a\\\n\\x5c\\x19\\x4a\\x76\\x84\\xcb\\x52\\xb2\\x23\\x5c\\x96\\x92\\x1d\\xe1\\xb2\\x94\\\n\\xec\\x08\\x97\\xa5\\x64\\x47\\xb8\\x2c\\x25\\xbb\\x7a\\x5c\\x19\\x4a\\x76\\x84\\\n\\xcb\\x52\\xb2\\x23\\x5c\\x96\\x92\\x1d\\xe1\\xb2\\x94\\xec\\x08\\x97\\xa5\\x64\\\n\\x47\\xb8\\x2c\\x25\\xbb\\x7a\\x5c\\x19\\x4a\\x76\\x84\\xcb\\x52\\xb2\\x23\\x5c\\\n\\x96\\x92\\x1d\\xe1\\xb2\\x94\\xec\\x08\\x97\\xa5\\x64\\x47\\xb8\\x2c\\x25\\xbb\\\n\\x7a\\x5c\\x19\\x4a\\x76\\x84\\xcb\\x52\\xb2\\x23\\x5c\\x96\\x92\\x1d\\xe1\\xb2\\\n\\x94\\xec\\x08\\x97\\xa5\\x64\\x47\\xb8\\x2c\\x25\\xbb\\x7a\\x5c\\x19\\x4a\\x76\\\n\\x84\\xcb\\x52\\xb2\\x23\\x5c\\x96\\x92\\x1d\\xe1\\xb2\\x94\\xec\\x08\\x97\\xa5\\\n\\x64\\x47\\xb8\\x2c\\x25\\xbb\\x7a\\x5c\\x19\\x4a\\x76\\x65\\x60\\xce\\x05\\x4b\\\n\\x96\\x2c\\x59\\x03\\xbd\\x0f\\xfd\\x08\\x1d\\x92\\x7e\\x80\\x36\\x43\\x6b\\x98\\\n\\x51\\xfc\\xff\\xc3\\xd4\\x4d\\x9f\\x2a\\xd9\\xa5\\x83\\x8d\\x5d\\x04\\xbd\\x87\\\n\\x39\\x27\\xc2\\x0e\\x46\\x87\\x91\\xdd\\xd4\\x6c\\x36\\x2f\\xd7\\xe9\\xc3\\x8f\\\n\\x59\\x64\\x21\\xd9\\xa5\\xb1\\x70\\xe1\\xc2\\x13\\x30\\xcf\\xf3\\xd8\\xd0\\xbf\\\n\\xc2\\xb9\\x67\\x92\\xce\\x79\\x6e\\x64\\x64\\xe4\\x78\\x0d\\x37\\xbc\\x84\\x8b\\\n\\x6b\\x4b\\x76\\x29\\xe0\\x1d\\x7c\\x0e\\xe6\\xd8\\x1e\\xce\\xd9\\xab\\xf0\\x42\\\n\\x7c\\x36\\x3e\\x3e\\x7e\\xb6\\x86\\x1d\\x4e\\xdc\\xc2\\x28\\xd9\\x03\\x67\\xf1\\\n\\xe2\\xc5\\xe7\\x61\\xfc\\x3d\\xe1\\x7c\\x7d\\x68\\x4f\\xa3\\xd1\\x38\\x57\\xc3\\\n\\x0f\\x1f\\x66\\x41\\x85\\x64\\x0f\\x94\\xb1\\xb1\\xb1\\x33\\xf1\\xae\\xdd\\xe5\\\n\\xe6\\xeb\\x47\\x18\\xf3\\x6b\\x8e\\xad\\x69\\x86\\x0b\\xb7\\x20\\x4a\\xf6\\xc0\\\n\\x58\\xb1\\x62\\xc5\\x29\\x18\\x77\\x67\\x38\\x4f\\xa0\\x3f\\xb0\\x99\\xeb\\xa1\\\n\\xf1\\x56\\xab\\x75\\x3a\\xc5\\x7f\\xe3\\xf8\\x0b\\xf4\\xa6\\xe4\\x9c\\x76\\x72\\\n\\x0e\\x4d\\x37\\x3c\\x98\\x85\\x14\\x92\\x3d\\x30\\x30\\xe6\\xc6\\x70\\x8e\\x40\\\n\\x1b\\x97\\x2f\\x5f\\x7e\\xaa\\xe2\\x11\\xf0\\xe7\\x43\\xef\\x4c\\xc9\\x3b\\x6d\\\n\\x54\\x7c\\x78\\x30\\x8b\\x28\\x24\\x7b\\x20\\xe0\\x5d\\x7c\\x97\\x9b\\x43\\x9a\\\n\\x80\\xff\\xa0\\xa2\\x33\\x82\\xec\\xc3\\x3c\\x27\\x18\\xe3\\x88\\x38\\x97\\xa2\\\n\\xc3\\x81\\x5b\\x04\\x25\\xbb\\x6f\\x96\\x2d\\x5b\\x76\\x09\\xc6\\x3b\\x18\\x8e\\\n\\xdf\\x16\\x36\\xec\\x11\\x45\\xbb\\x06\\xe7\\x3d\\x1a\\x8e\\x33\\x45\\x07\\x39\\\n\\xa7\\xa2\\xe9\\x63\\x16\\x50\\x48\\x76\\xbf\\xcc\\xc5\\x58\\xdb\\xc2\\xb1\\xdb\\\n\\xc2\\xe6\\xaf\\x57\\xae\\x67\\x78\\xae\\x1b\\x93\\x82\\xf7\\x91\\x62\\xe9\\xe3\\\n\\x16\\x40\\xc9\\xee\\x0b\\x6c\\xc4\\x6a\\x37\\xb6\\xf4\\xc9\\xaa\\x55\\xab\\x8e\\\n\\x51\\xb4\\x67\\x78\\x2e\\xc7\\x08\\xc6\\x9c\\xaa\\xdb\\x14\\x4d\\x1b\\x53\\xbc\\\n\\x90\\xec\\x59\\x83\\xbb\\xd4\\x93\\x31\\xce\\xfe\\x70\\x5c\\xe9\\x77\\xa8\\xef\\\n\\xdf\\xeb\\xe0\\xfa\\xff\\x02\\x8d\\xe5\\xe6\\xd8\\xcf\\x0e\\x8a\\xa6\\x8b\\x29\\\n\\x5e\\x48\\xf6\\xac\\xc1\\xbb\\xff\\x59\\x37\\x2e\\x85\\xcf\\xe8\\xbb\\x15\\xeb\\\n\\x1b\\xcc\\x73\\x8f\\x9b\\x83\\x62\\x07\\xc5\\xd2\\xc5\\x15\\xa7\\x64\\xcf\\x0a\\\n\\xdc\\xed\\x9e\\x86\\x31\\x0e\\x84\\x63\\x4a\\x3b\\x11\\x99\\xf7\\x5f\\x72\\x20\\\n\\xcc\\xe3\\x98\\xc1\\x1c\\x6d\\x1d\\x60\\x17\\xe5\\xd2\\xc4\\x94\\x2e\\x24\\x7b\\\n\\x56\\xe0\\xfc\\xa7\\xc3\\xf1\\x24\\x5e\\x72\\xb6\\x14\\x1b\\x18\\x1c\\x93\\x63\\\n\\x07\\x73\\x15\\x82\\xf7\\x94\\x62\\x69\\xe2\\x4a\\x53\\xb2\\x7b\\x06\\xe7\\xf2\\\n\\x86\\xa9\\xd3\\x5d\\xeb\\xdb\\x8a\\x0d\\x1c\\x8c\\xdd\\xe9\\x26\\x8d\\xdf\\x11\\\n\\xf3\\x15\\x4b\\x8f\\xa0\\xec\\x11\\xc9\\xee\\x19\\xbc\\xe3\\x1e\\x73\\xe3\\x41\\\n\\x7c\\xf7\\x2f\\x52\\x6c\\xe0\\xe0\\x0b\\x79\\x94\\x73\\x04\\x73\\x16\\x62\\x27\\\n\\xc5\\xd2\\xc3\\x15\\xa6\\x64\\xf7\\xca\\x3c\\x2c\\x76\\x9f\\x1b\\x0f\\x7a\\x57\\\n\\x99\\xd2\\xc0\\xdc\\x9b\\xcc\\xbc\\x7c\\x01\\xf6\\xc2\\x1e\\xe4\\xf7\\xce\\xe0\\\n\\x70\\x85\\x29\\xd9\\x3d\\x81\\x77\\xe1\\x8d\\x6e\\x2c\\x0a\\x57\\x3e\\x0d\\xc5\\\n\\x4a\\x03\\x1b\\x8d\\xa9\\xfc\\xfc\\xf0\\x6e\\x50\\x2c\\x2d\\x5c\\x59\\x4a\\x76\\\n\\x4f\\xe0\\xbc\\x2d\\xe1\\x38\\xd2\\x36\\x45\\x4a\\x07\\x1b\\xfd\\xa9\\x99\\x9f\\\n\\xda\\xa2\\x48\\x5a\\x98\\xa2\\x85\\x64\\x77\\x0d\\x2e\\xf7\\x2e\\xc4\\x79\\x9d\\\n\\x3e\\x83\\x6f\\x55\\xac\\x74\\x38\\x97\\xeb\\x00\\x4d\\xb0\\xa3\\x62\\xe9\\x60\\\n\\x8a\\x16\\x92\\xdd\\x35\\x58\\xf8\\x5a\\x37\\x0e\\x8e\\xff\\xb4\\x72\\xe5\\xca\\\n\\x63\\x15\\x2b\\x1d\\xcc\\x79\\x1c\\xe7\\x0c\\x7b\\x48\\x4f\\x28\\x96\\x0e\\xa6\\\n\\x64\\x21\\xd9\\xdd\\x32\\x17\\x8b\\xde\\xeb\\xc6\\xc1\\xf1\\xca\\xef\\x46\\x39\\\n\\xa7\\xeb\\x02\\x7d\\xab\\x48\\x3a\\x98\\x92\\x85\\x64\\x77\\x05\\xf2\\x57\\x85\\\n\\xe7\\xb7\\x55\\xc7\\xaf\\x86\\x31\\xef\\xa5\\x61\\x8f\\xb6\\x70\\xa1\\x70\\x85\\\n\\x62\\x69\\xe0\\x4a\\x52\\xb2\\xbb\\x02\\xf9\\x57\\xc3\\xf3\\xa5\\x2f\\x15\\xa9\\\n\\x1c\\xfc\\x14\\x7c\\x65\\xfa\\xf0\\x27\\xf2\\x25\\x45\\xd2\\xc0\\x95\\xa4\\x64\\\n\\x77\\x03\\xaf\\xfd\\xed\\x67\\x2e\\x8e\\x3f\\xae\\x4c\\xe5\\x70\\x6e\\xd7\\x09\\\n\\xda\\x0f\\x3b\\x9d\\x7b\\x02\\x53\\xb0\\x90\\xec\\x19\\xc1\\x42\\xaf\\x76\\xe7\\\n\\x43\\x87\\xf1\\xf1\\x73\\xbe\\x62\\x95\\xc3\\xb9\\xd9\\x21\\xe8\\xd4\\xd6\\x95\\\n\\x8a\\xd5\\x8f\\x29\\x57\\x48\\xf6\\x8c\\xf0\\x47\\xda\\x9d\\x8f\\xe3\\x1f\\x2b\\\n\\x52\\x1b\\xe8\\xd0\\xe9\\x9e\\x60\\x83\\x22\\xf5\\x63\\xca\\x15\\x92\\x3d\\x23\\\n\\x58\\xe4\\x77\\xee\\x7c\\x1c\\xbf\\x4f\\x91\\xda\\x40\\x87\\x07\\x3a\\x74\\xe3\\\n\\xaf\\x26\\xd2\\xc0\\x15\\xa4\\x64\\x1f\\x15\\xe4\\xec\\xd5\\x06\\x16\\xf8\\x77\\\n\\xb3\\xd9\\x3c\\x43\\xb1\\xda\\x18\\x1d\\x1d\\x3d\\x0b\\x7d\\xec\\xc7\\x10\\x3a\\\n\\x5e\\xac\\x58\\xbd\\xb8\\x72\\x94\\xec\\xa3\\x82\\x45\\xf0\\x11\\x11\\x77\\xfe\\\n\\x76\\x45\\x6a\\x07\\x1d\\x77\\x98\\x7e\\xd4\\x43\\x8a\\xd4\\x8b\\x29\\x56\\x48\\\n\\xf6\\x51\\x41\\xee\\x83\\xf0\\x3c\\x0a\\x8b\\x5e\\xab\\x48\\xed\\xa0\\xcf\\x33\\\n\\x61\\x3f\\x0a\\x1d\\x37\\x2b\\x52\\x2f\\xae\\x1c\\x25\\xbb\\x23\\xad\\x56\\xeb\\\n\\x44\\x2c\\xe2\\x90\\x3b\\x17\\x57\\x20\\x4d\\xc5\\x6a\\x07\\x1d\\xf9\\x68\\x63\\\n\\xd4\\x91\\xdd\\xf9\\x88\\xbc\\x62\\xf5\\xe1\\xca\\x51\\xb2\\x3b\\x82\\x3b\\xca\\\n\\xeb\\xdd\\x79\\xd0\\xcf\\xb0\\x53\\xfa\\xdd\\x3b\\xef\\x53\\x7e\\x35\\x3d\\xf9\\\n\\x22\\x5c\\xa7\\x4c\\x7d\\xb8\\x62\\x94\\xec\\x8e\\xa0\\xbc\\xbd\\xfc\\x84\\xde\\\n\\x54\\x24\\x19\\xd0\\xf5\\x2d\\xd3\\x93\\x2f\\xc0\\x8b\\x8a\\xd4\\x87\\x2b\\x46\\\n\\xc9\\xee\\x08\\x32\\xdf\\x84\\xe7\\x50\\x58\\xd4\\x6a\\x45\\x92\\x01\\x3f\\xad\\\n\\x77\\xb8\\xae\\xd0\\x6e\\x45\\xea\\xc3\\x94\\x2a\\x24\\xdb\\xc2\\xbf\\x4a\\x71\\\n\\xe7\\x40\\x13\\x29\\x5c\\x7e\\x86\\xe8\\x72\\xd4\\xfe\\x5f\\x45\\xed\\x7f\\x57\\\n\\xe0\\x4a\\x51\\xb2\\x2d\\xf8\\x92\\xbd\\xd9\\x9d\\x83\\x77\\xff\\x2e\\x45\\x92\\\n\\x03\\xfd\\x76\\x87\\x7d\\x29\\x74\\xbe\\x49\\x91\\x7a\\x70\\xa5\\x28\\xd9\\x16\\\n\\xf8\\x1b\\xc2\\x3c\\x85\\xc5\\xbc\\xa6\\x48\\x72\\xa0\\xdf\\xeb\\x61\\x5f\\xaa\\\n\\xf6\\xef\\x01\\x57\\x8a\\x92\\x6d\\x81\\xdf\\xe9\\x49\\xb4\\x64\\x1f\\x88\\xc5\\\n\\x46\\xdf\\x6e\\xfa\\xf2\\x05\\xf8\\x42\\x91\\x7a\\x70\\xa5\\x28\\xd9\\x11\\x7c\\\n\\xe0\\x15\\xa5\\xed\\x9f\\x96\\xd6\\xf9\\xdb\\xcf\\x99\\x40\\xbf\\x05\\x61\\x5f\\\n\\x4a\\x6b\\x39\\x49\\xb1\\xea\\x09\\x0b\\xb5\\x25\\x3b\\x02\\x9b\\x7c\\xad\\xcb\\\n\\x63\\x21\\xfb\\x14\\x49\\x16\\xf4\\xfc\\x3e\\xec\\x4d\\xa1\\xfb\\x35\\x8a\\x54\\\n\\x8f\\x2b\\x44\\xc9\\x8e\\x80\\x67\\x9f\\xfb\\xc4\\x22\\xde\\x50\\x24\\x59\\xd0\\\n\\xd3\\xfe\\x9d\\x1a\\xba\\x3f\\xa9\\x48\\xf5\\xb8\\x42\\x94\\xec\\x08\\x94\\xdd\\\n\\xea\\xf2\\x38\\x7e\\xaf\\x22\\xc9\\x82\\x9e\\xf7\\x87\\xbd\\xa5\\xfa\\x9e\\x19\\\n\\x32\\x65\\x0a\\xc9\\x8e\\xc0\\x46\\xdb\\xdb\\x7a\\x5c\\xff\\x8f\\x29\\x92\\x2c\\\n\\xe8\\xce\\x47\\xe7\\xa2\\xee\\x38\\xfc\\x8b\\x22\\xd5\\xe3\\x0a\\x51\\xb2\\xa7\\\n\\x81\\xcf\\xff\\x8b\\x5c\\x16\\x0b\\x38\\x54\\xe5\\xb3\\x3f\\xb3\\x05\\x5d\\xf9\\\n\\xcc\\xd0\\x9f\\x61\\x7f\\xaa\\xb6\\x87\\xb6\\x5c\\x19\\x4a\\xf6\\x34\\x70\\xfc\\\n\\x96\\x30\\x27\\x7d\\xae\\x48\\xf2\\xe0\\x05\\xb0\\xff\\x3f\\xc0\\x9b\\x4b\\x45\\\n\\xaa\\xc5\\x95\\xa1\\x64\\x4f\\x03\\xe5\\xd7\\xb9\\x2c\\x8e\\xbf\\xac\\x48\\xf2\\\n\\xa0\\xeb\\x2b\\x1d\\xd6\\xb0\\x4e\\x91\\x6a\\x71\\x65\\x28\\xd9\\xd3\\x40\\xc9\\\n\\x0f\\x5d\\x16\\xc7\\xef\\x54\\x24\\x79\\xd8\\xb5\\xc3\\x1a\\xb6\\x2a\\x52\\x2d\\\n\\xae\\x0c\\x25\\x7b\\x1a\\x28\\xf9\\x9b\\xcb\\x36\\x1a\\x8d\\xcb\\x14\\x49\\x9e\\\n\\xb1\\xb1\\xb1\\x11\\xb7\\x06\\xae\\x4d\\x91\\x6a\\x71\\x65\\xb2\\x26\\xa5\\x6d\\\n\\x2a\\x0f\\x37\\x69\\xd6\\xa4\\xb4\\x4d\\xe5\\xe1\\x26\\xcd\\x9a\\x94\\xb6\\xa9\\\n\\x3c\\xdc\\xa4\\x59\\x93\\xd2\\x36\\x95\\x87\\x9b\\x34\\x6b\\x52\\xda\\xa6\\xf2\\\n\\x70\\x93\\x66\\x4d\\x4a\\xdb\\x94\\xc9\\x64\\x32\\x99\\x4c\\x26\\x93\\xc9\\x64\\\n\\x32\\x99\\x4c\\x26\\x93\\xc9\\x04\\xcc\\x99\\xf3\\x2f\\xd5\\xb8\\xcd\\x8f\\x28\\\n\\x24\\x84\\x92\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x03\\x13\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x50\\x00\\x00\\x00\\x50\\x08\\x06\\x00\\x00\\x00\\x8e\\x11\\xf2\\xad\\\n\\x00\\x00\\x00\\x04\\x73\\x42\\x49\\x54\\x08\\x08\\x08\\x08\\x7c\\x08\\x64\\x88\\\n\\x00\\x00\\x00\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0d\\xd7\\x00\\x00\\x0d\\xd7\\\n\\x01\\x42\\x28\\x9b\\x78\\x00\\x00\\x00\\x19\\x74\\x45\\x58\\x74\\x53\\x6f\\x66\\\n\\x74\\x77\\x61\\x72\\x65\\x00\\x77\\x77\\x77\\x2e\\x69\\x6e\\x6b\\x73\\x63\\x61\\\n\\x70\\x65\\x2e\\x6f\\x72\\x67\\x9b\\xee\\x3c\\x1a\\x00\\x00\\x02\\x90\\x49\\x44\\\n\\x41\\x54\\x78\\x9c\\xed\\xdc\\xbd\\x6b\\x13\\x71\\x1c\\xc7\\xf1\\x6f\\x13\\x7b\\\n\\xbf\\x7b\\x30\\x22\\x2a\\xf5\\x09\\x8b\\x8b\\x1d\\x5d\\x3a\\x28\\x48\\xd3\\x2e\\\n\\xe2\\x53\\x97\\x82\\x38\\x14\\xc4\\x82\\x2e\\x2e\\xd6\\x82\\x45\\x92\\x82\\x83\\\n\\x62\\x3a\\x54\\x68\\x37\\x17\\x05\\x05\\xc9\\x20\\xba\\xf8\\x38\\x39\\x68\\x17\\\n\\xff\\x0c\\xa9\\x56\\xb4\\x20\\x8a\\x26\\xc4\\x92\\xb6\\xba\\x58\\xb5\\xe9\\x79\\\n\\xcd\\xef\\x3e\\xdf\\x90\\xd4\\xfb\\xbc\\xc6\\x5f\\xc8\\xf7\\xc2\\x9b\\xbb\\xe6\\\n\\x77\\x4d\\x88\\x08\\x11\\x51\\x72\\xb5\\xd5\\x2e\\x4c\\x8c\\xde\\xfd\\xa1\\x79\\\n\\x80\\x72\\xaa\\x2a\\x9f\\x9d\\xef\\x52\\x59\\xa8\\x6a\\x8e\\xb5\\xe6\\xb5\\x3b\\\n\\xb2\\x65\\xde\\x91\\x4d\\x69\\xf7\\xca\\x48\\xe1\\xf4\\x35\\xad\\xb9\\x1b\\xc2\\\n\\x16\\x07\\x86\\x06\\xac\\x07\\xcd\\xcd\\x96\\x42\\xd7\\x1f\\xbc\\x7e\\x22\\x27\\\n\\xfb\\x0f\\x4b\\xe7\\x9e\\x9d\\xd6\\x33\\x35\\xbd\\x99\\x79\\x2f\\x8f\\x9f\\x4f\\\n\\xcb\\xb6\\x45\\x37\\x37\\x35\\x56\\x6c\\xbb\\x78\\x7d\\xf0\\xaa\\xc6\\xdc\\x94\\\n\\xc6\\x90\\x28\\xa5\\x4a\\xb9\\xe9\\xf1\\x44\\x44\\xf6\\x76\\xee\\x92\\xaf\\xe5\\\n\\x92\\xf4\\xf5\\xf7\\x79\\x8e\\x31\\x97\\xa7\\xc6\\xee\\x8d\\x6b\\xcc\\x6d\\x78\\\n\\xc0\\x56\\x63\\x5c\\x23\\xbd\\x27\\xb2\\xbe\\x63\\xbc\\x0b\\x1a\\x11\\x13\\x17\\\n\\x50\\x64\\x65\\xc4\\xc9\\x7c\\xb1\\x80\\xcc\\x4a\\x64\\x40\\x91\\x3f\\x11\\x8d\\\n\\x6b\\x86\\x91\\x88\\xa1\\x6f\\x22\\xeb\\xc1\\xcd\\x3b\\xf7\\x43\\xd7\\xcf\\x0f\\\n\\x9d\\xaa\\x7b\\xc6\\x72\\xc4\\x97\\x4f\\x5f\\x0d\\x4f\\xe6\\x8b\\x32\\x52\\x18\\\n\\xcc\\xdb\\xbe\\x8e\\xc4\\x9e\\x81\\xcb\\xd0\\x33\\x31\\xf1\\x01\\x45\\xb0\\x88\\\n\\x0c\\xf8\\x4b\\xdc\\x88\\x0c\\xf8\\x97\\x38\\x11\\x19\\xb0\\x86\\x6d\\x44\\x06\\\n\\x0c\\x61\\x13\\x91\\x01\\xff\\xe1\\x77\\x44\\xdf\\x44\\x6e\\xb6\\x19\\x30\\x82\\\n\\x71\\x8d\\xf4\\x1e\\xcb\\x06\\x51\\x11\\x19\\x70\\x0d\\x6b\\x45\\x64\\xc0\\x3a\\\n\\x18\\xd7\\x48\\xf6\\x68\\x4f\\xb0\\x50\\xad\\xe6\\x6a\\x1f\\x63\\xc0\\x3a\\xb9\\\n\\x9e\\x1b\\xba\\xbe\\x6e\\xef\\x85\\x6d\\xee\\x79\\x1b\\x89\\x67\\x20\\x88\\x01\\\n\\x41\\x0c\\x08\\x52\\x0b\\x98\\x4a\\x87\\x8f\\x0a\\x3c\\x5f\\xde\\xce\\x7e\\xd4\\\n\\x3a\\x4c\\x6c\\x33\\xef\\x3e\\x48\\x26\\xd8\\xa8\\x3e\\x57\\xed\\x4d\\x24\\xb3\\\n\\xd9\\xc8\\xb7\\x2f\\xf3\\xb2\\xb4\\xb8\\xb4\\x62\\xfd\\xe0\\xbe\\x6e\\x79\\xf8\\\n\\xe8\\x85\\x94\\x2b\\x15\\xad\\x43\\xc5\\x92\\xf1\\x03\\x39\\x72\\xe0\\x90\\xfa\\\n\\x5c\\xb5\\x80\\xc6\\x4d\\x8b\\xd9\\xe1\\xaf\\x5a\\xef\\xd8\\xdd\\x25\\xdd\\xfb\\\n\\xbb\\xb4\\x0e\\xd3\\x72\\xf8\\x37\\x10\\xc4\\x80\\x20\\x06\\x04\\x31\\x20\\x88\\\n\\x01\\x41\\x0c\\x08\\x62\\x40\\x10\\x03\\x82\\x18\\x10\\x64\\x7d\\x27\\x72\\xeb\\\n\\x59\\xf8\\x77\\x52\\xfe\\x17\\xe7\\x8e\\xdb\\xfd\\x9f\\x31\\xd6\\xad\\xdc\\xf8\\\n\\xa5\\xb3\\x71\\x9e\\xd6\\xf2\\x72\\x37\\x6e\\x5b\\x3f\\x87\\x97\\x30\\x88\\x01\\\n\\x41\\x0c\\x08\\x62\\x40\\x10\\x03\\x82\\x18\\x10\\xc4\\x80\\x20\\x06\\x04\\x31\\\n\\x20\\x48\\xfd\\xab\\x1d\\xd3\\xcd\\xff\\x04\\x33\\x52\\xcf\\x76\\xdd\\x79\\xea\\\n\\x01\\xb5\\x5f\\x60\\xab\\xe3\\x25\\x0c\\x62\\x40\\x10\\x03\\x82\\x18\\x10\\xc4\\\n\\x80\\x20\\x06\\x04\\x71\\x1f\\x08\\xe2\\x3e\\x10\\xc4\\x4b\\x18\\xc4\\x80\\x20\\\n\\x06\\x04\\x31\\x20\\x88\\x01\\x41\\x0c\\x08\\xe2\\x3e\\x10\\xc4\\x7d\\x20\\x88\\\n\\x97\\x30\\x88\\x01\\x41\\x0c\\x08\\x62\\x40\\x10\\x03\\x82\\x18\\x10\\xc4\\x80\\\n\\x20\\x06\\x04\\x59\\xff\\x0c\\xf2\\xa7\\x8e\\xe6\\xfe\\x9c\\x71\\xa3\\x6d\\x9d\\\n\\x6b\\x8f\\x7c\\x7c\\x74\\xe2\\xcc\\xaa\\x66\\x44\\x44\\x49\\xf5\\x13\\xef\\xf0\\\n\\x8a\\xfe\\x73\\xbb\\x18\\x34\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\\n\\x60\\x82\\\n\\x00\\x00\\x05\\x4c\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x28\\x00\\x00\\x00\\x28\\x08\\x06\\x00\\x00\\x00\\x8c\\xfe\\xb8\\x6d\\\n\\x00\\x00\\x00\\x04\\x73\\x42\\x49\\x54\\x08\\x08\\x08\\x08\\x7c\\x08\\x64\\x88\\\n\\x00\\x00\\x00\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0d\\xd7\\x00\\x00\\x0d\\xd7\\\n\\x01\\x42\\x28\\x9b\\x78\\x00\\x00\\x00\\x19\\x74\\x45\\x58\\x74\\x53\\x6f\\x66\\\n\\x74\\x77\\x61\\x72\\x65\\x00\\x77\\x77\\x77\\x2e\\x69\\x6e\\x6b\\x73\\x63\\x61\\\n\\x70\\x65\\x2e\\x6f\\x72\\x67\\x9b\\xee\\x3c\\x1a\\x00\\x00\\x04\\xc9\\x49\\x44\\\n\\x41\\x54\\x58\\x85\\xcd\\x98\\xed\\x4f\\x53\\x57\\x1c\\xc7\\xbf\\xe7\\xa1\\x72\\\n\\x6f\\xcb\\x2d\\xd8\\x5a\\xaa\\x23\\xa2\\x09\\xcc\\x07\\xc8\\x24\\xcb\\x96\\x00\\\n\\x9a\\x18\\xa0\\x48\\xdc\\x8b\\xc5\\x2d\\x99\\xdb\\x92\\x65\\x2f\\xf6\\x66\\x2e\\\n\\xcb\\xb2\\x91\\xed\\xe5\\x12\\xdd\\x9f\\xe0\\x34\\x66\\x71\\x2f\\x7d\\xb1\\x64\\\n\\x33\\x4b\\x16\\x79\\x33\\x1e\\x8a\\xbc\\x10\\x05\\xb3\\x4c\\xd9\\x0b\\x99\\x82\\\n\\x0f\\x44\\x87\\x59\\x5b\\x28\\xe3\\xde\\xde\\x5e\\xe8\\x3d\\xe7\\xec\\x05\\x2d\\\n\\x2b\\x0c\\x51\\x91\\xb6\\x7c\\xde\\x9d\\xd3\\x73\\x7b\\x3f\\xfd\\x9d\\x73\\x7b\\\n\\xcf\\xf9\\x02\\x9b\\x1c\\xb2\\xde\\x0b\\x87\\xdb\\xda\\x5e\\x53\\x94\\x46\\x28\\\n\\x63\\x11\\x50\\xba\\x17\\x52\\x86\\xa0\\xd4\\xe2\\xf7\\x11\\xa2\\x40\\x69\\x9c\\\n\\x28\\xf5\\xa7\\x2b\\x44\\x94\\x48\\x19\\x6d\\x19\\x18\\xf8\\xbd\\xe0\\x82\\x97\\\n\\x5b\\x5b\\xcb\\x75\\x8f\\xe7\\x04\\xa5\\xb4\\x0b\\x94\\x06\\x2b\\xc3\\x61\\x52\\\n\\x1e\\x0a\\x69\\x9a\\xcf\\x87\\x2d\\xba\\xbe\\x6c\\xec\\x82\\x6d\\xc3\\x49\\xa5\\\n\\x60\\xc6\\xe3\\xce\\x3f\\xf1\\xb8\\x82\\x10\\x09\\xe1\\xba\\xa7\\xbd\\x8c\\x9d\\\n\\x6f\\xec\\xed\\x4d\\x6d\\xa8\\xe0\\xe5\\xd6\\x56\\xae\\x73\\xde\\x05\\x42\\x4e\\\n\\xf9\\x43\\x21\\x1a\\xaa\\xad\\xf5\\x96\\x07\\x02\\xcf\\xf3\\xdb\\x60\\x4d\\x4f\\\n\\x23\\x76\\xef\\x5e\\xca\\x8c\\xc7\\x15\\x21\\xe4\\xa4\\xbd\\xb0\\x70\\xb6\\x6d\\\n\\x70\\xd0\\x7d\\x61\\xc1\\xeb\\x6d\\x6d\\x0d\\xca\\xe3\\xb9\\xa4\\x57\\x54\\x6c\\\n\\xdf\\x79\\xe0\\x80\\x57\\x2b\\x2f\\x7f\\x2e\\xb1\\x95\\x38\\x96\\x85\\x87\\x37\\\n\\x6f\\xda\\x69\\xcb\\x9a\\x52\\xae\\x7b\\xac\\x39\\x1a\\xbd\\xb5\\x6e\\xc1\\xe1\\\n\\xce\\xce\\x77\\x88\\x52\\x17\\xaa\\x1b\\x1a\\xca\\x82\\x35\\x35\\x14\\x64\\xdd\\\n\\x4b\\x76\\x39\\x4a\\x21\\x31\\x39\\x29\\xff\\xba\\x75\\x6b\\x1e\\x94\\x7e\\xd8\\\n\\xdc\\xd3\\xf3\\xf3\\x73\\x0b\\x0e\\x77\\x74\\x7c\\x44\\x39\\x3f\\x57\\xd7\\xd4\\\n\\xa4\\xeb\\x95\\x95\\x1b\\x23\\xb6\\x02\\x3b\\x99\\xc4\\xc4\\xc8\\x88\\x03\\x21\\\n\\x4e\\x34\\xf5\\xf7\\x5f\\x78\\x66\\xc1\\xab\\x47\\x8e\\xbc\\xcd\\x29\\xfd\\xe1\\\n\\xe5\\x43\\x87\\x34\\xcd\\x30\\x0a\\x22\\x97\\x23\\x6d\\x9a\\x98\\x18\\x1a\\x72\\\n\\x84\\x94\\xef\\xb5\\xf4\\xf5\\x5d\\x7a\\xaa\\xe0\\xb5\\x8e\\x8e\\xfd\\x94\\xd2\\\n\\xdf\\xea\\x5a\\x5a\\xbc\\xde\\x02\\x55\\x6e\\x25\\xa9\\x99\\x19\\x4c\\x8c\\x8c\\\n\\xd8\\x44\\x88\\x57\\x9b\\xa2\\xd1\\x3b\\xf9\\x9f\\xd1\\xfc\\xc6\\xe5\\xd6\\x56\\\n\\x4e\\x19\\xbb\\x54\\x5d\\x5f\\xaf\\x15\\x4b\\x0e\\x00\\x7c\\x81\\x00\\x5e\\xda\\\n\\xb7\\x4f\\x03\\xe7\\xdd\\x3f\\x1d\\x3f\\xce\\x9e\\x28\\xe8\\xe3\\xbc\\x4b\\xf3\\\n\\xfb\\xab\\x83\\xbb\\x76\\x51\\x14\\x99\\xd0\\xee\\xdd\\x54\\x33\\x8c\\x9d\\x35\\\n\\xb3\\xb3\\x9f\\xe5\\xf7\\x2f\\x4d\\xf1\\x68\\x67\\xa7\\x2f\\x0d\\x3c\\xde\\x7b\\\n\\xf8\\xb0\\xa1\\xf9\\x7c\\xc5\\xf6\\x03\\xb0\\xb8\\x1e\\xc7\\xaf\\x5c\\x99\\x63\\\n\\x65\\x65\\x3b\\x5e\\xef\\xee\\xb6\\x81\\xbc\\x0a\\xda\\x42\\x9c\\xf0\\x57\\x55\\\n\\xd1\\x52\\xc9\\x01\\x80\\x6e\\x18\\x30\\x42\\x21\\xea\\xa6\\xd3\\x1f\\xe7\\xfa\\\n\\x28\\x00\\x28\\x80\\x10\\xce\\xbf\\xda\\x5e\\x57\\x57\\x3a\\xbb\\x2c\\xe1\\xda\\\n\\xda\\x72\\xc2\\xd8\\x97\\xb9\\x36\\x05\\x80\\x91\\x48\\xe4\\x15\\xce\\xb9\\x5f\\\n\\xaf\\xa8\\x28\\x9d\\x59\\x16\\x6f\\x65\\x25\\x18\\xa5\\x5b\\x87\\x23\\x91\\x7a\\\n\\x20\\x57\\x41\\x4a\\x8f\\x56\\x84\\xc3\\xbc\\xb4\\x6a\\x59\\x08\\x81\\x3f\\x1c\\\n\\x66\\x8a\\xd2\\xa3\\x40\\x56\\x90\\x31\\xd6\\xee\\x0b\\x04\\xb4\\xd2\\x9a\\xfd\\\n\\x47\\x79\\x30\\xa8\\x73\\xc6\\xda\\x01\\x80\\x03\\x80\\x02\\xea\\xd7\\x7a\\x63\\\n\\x68\\x5d\\x5d\\x05\\x11\\x71\\x4e\\x9f\\x5e\\xfd\\x7e\\x86\\x01\\x05\\x34\\x00\\\n\\xb9\\x29\\x16\\x22\\xb8\\x45\\xdb\\x34\\x05\\x84\\x47\\xd7\\x21\\xa5\\xdc\\x06\\\n\\xe4\\x04\\x95\\x2a\\xa3\\x1e\\x4f\\x69\\xad\\xf2\\xa0\\x9c\\x43\\x49\\xa9\\x03\\\n\\xf9\\x6f\\x12\\xa5\\x4a\\x26\\xb4\\x1a\\x04\\x50\\x40\\x56\\x90\\x10\\x32\\x2f\\\n\\xdd\\xa7\\x6e\\x6e\\x8b\\x86\\x74\\x5d\\x80\\x52\\x07\\xc8\\x0a\\x52\\xc6\\x62\\\n\\x0b\\x8e\\x53\\x5a\\xab\\x3c\\x32\\xe9\\x34\\x28\\xa5\\x31\\x20\\xfb\\x14\\x03\\\n\\xb8\\xed\\x98\\xe6\\x6e\\xdd\\xef\\x5f\\xf5\\x82\\x27\\x3d\\x6d\\x85\\xc2\\x31\\\n\\x4d\\x10\\x60\\x0c\\xc8\\x56\\x50\\xb8\\x6e\\x8f\\x95\\x48\\xa4\\x8b\\x6a\\xb1\\\n\\x06\\x73\\x89\\x84\\x9d\\x59\\x58\\xf8\\x15\\xc8\\xad\\x41\\xa5\\xa2\\x73\\xf1\\\n\\xb8\\xd8\\x14\\x0f\\x8a\\x52\\xb0\\x62\\x31\\x49\\x09\\x19\\x00\\xb2\\x82\\xcd\\\n\\xd1\\xe8\\x1f\\x42\\x88\\xe9\\x54\\x32\\x59\\x5a\\x39\\x00\\x56\\x32\\x09\\x21\\\n\\x65\\x3c\\x77\\xda\\x5b\\xfa\\x9b\\x91\\x99\\xcc\\x99\\xbf\\xef\\xde\\xb5\\x4b\\\n\\xa7\\xb6\\x48\\x6c\\x62\\x22\\xa5\\x84\\x38\\x93\\x6b\\x2f\\x09\\x7a\\x19\\x3b\\\n\\x6f\\x25\\x12\\xc2\\xb1\\xac\\xd2\\x98\\x61\\x71\\xc3\\x6a\\x4d\\x4f\\x0b\\xae\\\n\\xeb\\xdf\\xe7\\xfa\\x96\\x04\\x1b\\x7b\\x7b\\x53\\x90\\xf2\\xd4\\xc3\\xd1\\x51\\\n\\xb3\\x24\\x76\\x4a\\xe1\\xd1\\xe8\\xe8\\x9c\\x90\\xf2\\xeb\\xdc\\x6e\\x7a\\x99\\\n\\x20\\x00\\xd8\\xae\\x7b\\xd6\\x31\\xcd\\xc7\\x89\\x07\\x0f\\x44\\xb1\\xfd\\xe2\\\n\\xf7\\xef\\x0b\\xc7\\xb2\\xa6\\x1e\\x6d\\xdd\\xfa\\x5d\\x7e\\xff\\x32\\xc1\\xb6\\\n\\xc1\\x41\\x57\\x08\\xf1\\xd6\\xd4\\xd8\\xd8\\xbc\\x3d\\x3b\\x5b\\x34\\xb9\\xd4\\\n\\xcc\\x0c\\xa6\\x6e\\xdf\\x9e\\x57\\xae\\x7b\\xec\\xdd\\x8b\\x17\\x97\\x15\\xe7\\\n\\x7f\\xa7\\xb7\\x96\\xfe\\xfe\\x31\\x21\\xc4\\x07\\x77\\x87\\x87\\x6d\\xc7\\x2c\\\n\\xfc\\x6c\\xa7\\x4d\\x13\\xf7\\xae\\x5f\\xb7\\x95\\xeb\\xbe\\xbf\\xf2\\x4c\\xbc\\\n\\xaa\\x20\\x00\\x1c\\x8c\\x46\\x7f\\x51\\xae\\xfb\\xe9\\xf8\\xd0\\x90\\x9d\\x2e\\\n\\x60\\x25\\xed\\x64\\x12\\xe3\\x57\\xaf\\xa6\\xa5\\x94\\x9f\\xb4\\x0c\\x0c\\x74\\\n\\xaf\\x36\\x66\\xcd\\x34\\xe8\\x5a\\x7b\\xfb\\x1b\\xd4\\xe3\\xf9\\xb1\\x7a\\xff\\\n\\x7e\\x3d\\x58\\x53\\xc3\\x37\\x32\\x3c\\x8a\\x4f\\x4e\\xba\\x53\\x63\\x63\\x69\\\n\\x29\\xe5\\xf1\\x83\\xfd\\xfd\\x3d\\x4f\\x1a\\xfa\\xd4\\x3b\\x8e\\x44\\x22\\x7b\\\n\\xc0\\x79\\xb7\\x6e\\x18\\x3b\\x76\\x36\\x36\\x1a\\x1b\\x12\\xbf\\xdd\\xb8\\x61\\\n\\x3a\\x96\\x35\\x25\\x95\\x7a\\xb3\\xb9\\xaf\\x6f\\x7c\\xad\\xf1\\xcf\\x1c\\x60\\\n\\x6a\\x8c\\x7d\\x4e\\x18\\xfb\\xc6\\xd8\\xb6\\x8d\\x56\\xd5\\xd6\\xfa\\xd6\\x19\\\n\\x60\\x5a\\x56\\x22\\x21\\x95\\x52\\x27\\xd3\\x99\\xcc\\xb9\\x0d\\x09\\x30\\x57\\\n\\x88\\x2e\\x46\\xc0\\x84\\x7c\\x41\\x28\\x0d\\x18\\xe1\\x30\\xf1\\x57\\x55\\x79\\\n\\x73\\x11\\x30\\xcb\\xee\\xca\\x45\\x26\\x93\\x1f\\x01\\xa7\\xe6\\x62\\x31\\x28\\\n\\x21\\xa6\\x85\\x10\\xdf\\x16\\x24\\x02\\x5e\\x8d\\x5c\\x88\\xce\\x38\\x6f\\x57\\\n\\xc0\\x1e\\x48\\x59\\x25\\xa5\\xf4\\x01\\x50\\x94\\x52\\x1b\\x8b\\xfb\\xb9\\x3b\\\n\\xe2\\x05\\x43\\xf4\\x4d\\xcf\\xbf\\xac\\x71\\x17\\x05\\x65\\xd6\\x2b\\xf5\\x00\\\n\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x07\\x42\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x60\\x00\\x00\\x00\\x60\\x08\\x06\\x00\\x00\\x00\\xe2\\x98\\x77\\x38\\\n\\x00\\x00\\x00\\x06\\x62\\x4b\\x47\\x44\\x00\\xff\\x00\\xff\\x00\\xff\\xa0\\xbd\\\n\\xa7\\x93\\x00\\x00\\x06\\xf7\\x49\\x44\\x41\\x54\\x78\\x9c\\xed\\x9d\\x5b\\x6c\\\n\\x54\\x45\\x18\\xc7\\xff\\xb3\\xe7\\xec\\xb2\\xdd\\xb6\\x94\\xd6\\xde\\xb4\\x17\\\n\\x28\\x26\\xd2\\xfa\\x42\\xc2\\xf6\\x8a\\x2d\\x97\\x52\\x41\\x21\\x24\\x48\\x02\\\n\\xa8\\x04\\x13\\x8c\\x01\\x0c\\x68\\x48\\x54\\x40\\x13\\x4b\\x81\\x07\\x54\\x48\\\n\\x8c\\x86\\x92\\x82\\x89\\x24\\xc6\\x2a\\x4a\\x14\\x12\\x30\\x84\\x4b\\x4b\\x01\\\n\\x4b\\xef\\xf8\\x60\\x44\\xeb\\x03\\x20\\xa2\\x72\\x6b\\x4a\\xe9\\x6d\\xbb\\xbb\\\n\\x67\\xc7\\x87\\x65\\x49\\xbb\\xed\\xd9\\x99\\xd3\\xee\\xf6\\x70\\x4e\\xe7\\xf7\\\n\\xb6\\x7b\\xbe\\x99\\xf9\\xf6\\xfb\\xef\\x37\\x73\\xbe\\x99\\xd3\\x2e\\x20\\x10\\\n\\x08\\x04\\x02\\x81\\x40\\x20\\x10\\x08\\x04\\x02\\xc1\\x44\\x82\\xb0\\x0c\\xe6\\\n\\x2f\\x3f\\xb1\\xc4\\x47\\xc9\\x01\\x00\\x69\\xe3\\xe0\\xcf\\xe3\\xcc\\x4d\\x50\\\n\\xb2\\xee\\xfc\\xb1\\xc5\\x27\\xc3\\xd9\\xa9\\x85\\x65\\xe0\\xa3\\xa4\\x0a\\x22\\\n\\xf8\\x00\\x90\\x0e\\x42\\x0f\\x84\\xbb\\x53\\xa6\\x00\\x00\\xd2\\xc3\\x3d\\xa8\\\n\\x81\\xc9\\x08\\x77\\x87\\x3c\\x02\\x08\\x22\\x88\\x10\\x40\\x67\\x84\\x00\\x3a\\\n\\x23\\x04\\xd0\\x19\\x21\\x80\\xce\\x08\\x01\\x74\\x46\\x08\\xa0\\x33\\xcc\\x4a\\\n\\xf8\\xcc\\x55\\x0f\\x1d\\x0f\\x47\\x8c\\xc2\\xf3\\xd3\\xad\\xcc\\x98\\x69\\x41\\\n\\x64\\x80\\xce\\x08\\x01\\x74\\x46\\x08\\xa0\\x33\\x42\\x00\\x9d\\x11\\x02\\xe8\\\n\\x8c\\x10\\x40\\x67\\x84\\x00\\x3a\\x23\\x04\\xd0\\x19\\x21\\x80\\xce\\xc8\\x91\\\n\\xea\\xf8\\xb5\\xaa\\xdf\\x87\\xbc\\xfe\\x6a\\x43\\x4e\\xc8\\xeb\\xe3\\x4d\\xb0\\\n\\x3f\\x7a\\x21\\x32\\x40\\x67\\x84\\x00\\x3a\\x23\\x04\\xd0\\x19\\xb1\\x1b\\xaa\\\n\\x11\\xb1\\x1b\\x6a\\x32\\x84\\x00\\x3a\\x23\\x04\\xd0\\x19\\x51\\x07\\xe8\\x8c\\\n\\xc8\\x00\\x9d\\x11\\x02\\xe8\\x8c\\x10\\x40\\x67\\x44\\x1d\\xa0\\x11\\x51\\x07\\\n\\x98\\x0c\\x21\\x80\\xce\\x08\\x01\\x74\\xc6\\xd4\\x75\\xc0\\xf4\\x24\\x3b\\x5e\\\n\\x7d\\x2e\\x05\\xcf\\xa4\\x3a\\x22\\x3e\\xd6\\x68\\x89\\x98\\x00\\x7a\\x92\\x10\\\n\\x63\\xc5\\x2b\\x45\\xc9\\xc8\\x9f\\x3e\\x19\\x24\\xac\\x4b\\x66\\xf8\\x31\\x9d\\\n\\x00\\x33\\x9e\\x74\\x60\\xd3\\xc2\\x34\\xc4\\x45\\xa9\\x7f\\x34\\xe2\\xf3\\x21\\\n\\xe6\\xda\\x15\\xc4\\xb5\\x5f\\x46\\xf4\\xf5\\x76\\x44\\xdd\\xbe\\x0e\\x6b\\x57\\\n\\x07\\x24\\x57\\x3f\\x00\\x40\\xb1\\x47\\xc1\\x13\\x97\\x88\\xfe\\x94\\xa9\\xe8\\\n\\x9d\\x36\\x03\\x5d\\xd9\\x4e\\xf4\\x64\\xe5\\x80\\x92\\xf0\\xcf\\xd8\\xa6\\x12\\\n\\x60\\xfe\\xb3\\x53\\xb0\\xa6\\x38\\x15\\xb2\\x65\\xe4\\xaf\\xfd\\xa4\\xce\\xdb\\\n\\x48\\x39\\xf7\\x23\\x92\\x1a\\x4f\\xc1\\xd6\\x79\\x57\\xb5\\x1f\\xb9\\xb7\\x1b\\\n\\x72\\x6f\\x37\\xa2\\xfe\\xbd\\x86\\x84\\x5f\\xea\\x90\\x01\\xc0\\x1d\\x9f\\x8c\\\n\\xbb\\x05\\x8b\\xd0\\x37\\xaf\\x20\\xdd\\x51\\xd7\\x74\\x33\\x5c\\x3e\\x4f\\x88\\\n\\x3a\\xc0\\xda\\xd3\\x89\\x8c\\xa3\\x07\\x91\\x54\\x7f\\x12\\x16\\xc5\\x33\\xd6\\\n\\xee\\xdc\\x94\\xe0\\x4b\\xea\\x55\\x3e\\x9c\\x5c\\xd7\\x76\\x6f\\xac\\x9d\\x99\\\n\\x5e\\x80\\xc4\\xe6\\xd3\\xc8\\xfa\\xe6\\x53\\xc8\\xbd\\x0f\\xc2\\xdd\\x75\\x07\\\n\\x05\\xd9\\x14\\x5b\\xd3\\x74\\x78\\x2c\\x9d\\x98\\x56\\x00\\xa2\\x78\\x91\\x55\\\n\\xbd\\x17\\x29\\x17\\x8f\\x47\\x74\\x1c\\x0a\\x1c\\x88\\xb9\\xaf\\xbc\\x45\\xda\\\n\\xda\\x46\\x95\\x5a\\xa6\\xac\\x03\\x24\\xb7\\x0b\\xd9\\x95\\xdb\\x22\\x1e\\x7c\\\n\\x00\\x20\\xc0\\xfa\\xde\\x78\\xe9\\x18\\x5d\\xea\\x1c\\xd5\\xbd\\x6e\\xc4\\x32\\\n\\x60\\x3c\\xea\\x80\\x77\\x16\\x67\\x60\\x66\\x66\\xcc\\x90\\xf7\\x88\\xe2\\x45\\\n\\x76\\xe5\\x36\\x4c\\xf9\\xb5\\x61\\xcc\\xfd\\x6b\\x83\\x9c\\x8d\\x4e\\xe8\\x59\\\n\\x42\\x8e\\xfc\\xe6\\xd6\\xd2\\xca\\xb0\\x19\\x30\\x33\\x33\\x66\\x58\\xf0\\x01\\\n\\x20\\xab\\x7a\\xaf\\x0e\\xc1\\x07\\x00\\x5a\\xd6\\xd3\\x19\\xfd\\x99\\xd6\\x56\\\n\\x86\\x15\\x60\\x59\\x6e\\xe2\\xb0\\xf7\\x12\\x9b\\x4e\\x8d\\xcb\\xb4\\xa3\\x06\\\n\\xa1\\xd8\\xd0\\xbd\\x20\\x6f\\x95\\x96\\x36\\x86\\x14\\x20\\xe7\\x29\\x07\\x9e\\\n\\x4e\\x8e\\x1a\\xf2\\x9e\\xdc\\xd3\\x85\\xac\\xc3\\x9f\\x73\\xb5\\x97\\xe7\\x96\\\n\\x01\\x56\\x1b\\xff\\x80\\x36\\x9b\\xbf\\x0d\\x07\\x04\\x64\\xff\\x83\\x79\\xce\\\n\\xe1\\xdf\\x0e\\x35\\x5f\\xf8\\xbd\\xd0\\x06\\xeb\\xcc\\x35\\xdc\\x67\\xb2\\x99\\\n\\x47\\xab\\x20\\xf7\\xdc\\x67\\xda\\x59\\x57\\xae\\x86\\x6d\\xdd\\xdb\\x90\\x5b\\\n\\x1b\\xe1\\x2a\\x7f\\x0f\\x70\\x33\\xa6\\x6c\\xd9\\x0a\\x7b\\xf9\\x6e\\x48\\x85\\\n\\xc5\\x20\\xe9\\x19\\xf0\\x54\\x1f\\x62\\x0d\\x91\\x20\\x49\\xf2\\x0e\\x00\\x1b\\\n\\x79\\xfc\\x36\\x64\\x06\\x04\\x63\\xeb\\xbc\\x83\\xa4\\x7a\\xf6\\xff\\x51\\x0a\\\n\\x04\\x1f\\x00\\xa4\\xdc\\x42\\xd8\\x77\\xee\\x01\\x6c\\x21\\x32\\x41\\xb6\\xc2\\\n\\x5e\\xf1\\x11\\xa4\\xc2\\x62\\xff\\x38\\x6b\\x37\\xc0\\xba\\xfa\\x75\\xe6\\x38\\\n\\x14\\xf4\\x8d\\xfe\\x32\\x67\\x26\\x8f\\xef\\xa6\\x10\\x20\\xf5\\xdc\\x0f\\xcc\\\n\\x0a\\x77\\x70\\xf0\\x03\\x84\\x14\\x21\\x28\\xf8\\x01\\x6c\\x6b\\xd7\\xf3\\x88\\\n\\x60\\x53\\x7c\\xf2\\x9b\\x1c\\xae\\x1b\\x5f\\x00\\x42\\x7d\\x48\\x6a\\x3c\\x1d\\\n\\xd2\\x46\\x9e\\x5b\\x36\\x2c\\xf8\\x01\\xa4\\xdc\\x42\\xd8\\x2b\\x3e\\x1e\\xba\\\n\\x26\\xd8\\x6c\\xb0\\xef\\xda\\x33\\x2c\\xf8\\x8f\\x2e\\xaf\\x5d\\xcf\\x5e\\x13\\\n\\x08\\x5d\\x43\\x57\\xac\\x90\\x42\\x1b\\x19\\xf0\\x3c\\x60\\xf3\\x0b\\xe9\\x98\\\n\\x35\\x2d\\xf6\\xd1\\xeb\\x98\\xab\\x57\\x60\\xeb\\xbc\\x13\\xb2\\x8d\\xb7\\xfe\\\n\\x3c\\xe4\\x86\\x8b\\x90\\x8a\\x4a\\x46\\xbc\\x2e\\xe5\\xcf\\x86\\x7d\\xd7\\x1e\\\n\\xff\\x9a\\xe0\\xa3\\xfe\\x39\\x3f\\xaf\\x48\\xb5\\x3f\\xa5\\xb5\\x11\\xde\\x86\\\n\\x0b\\x2c\\x57\\xd3\\xfa\\x3b\\xae\\x39\\x01\\x34\\x87\\x32\\x32\\x5c\\x06\\xa4\\\n\\xc6\\x4d\\x1a\\xf2\\x3a\\xae\\xfd\\x32\\xbb\\x91\\xd7\\x03\\xd7\\x8e\\xf7\\xa1\\\n\\x34\\x5c\\x54\\x35\\x91\\x72\\x0b\\x61\\xdf\\xb5\\x17\\xf6\\x9d\\x9f\\xa8\\x7e\\\n\\xf3\\x01\\x7f\\xf0\\xb9\\x16\\x6f\\x00\\x3e\\x0b\\x29\\x65\\xd9\\x18\\x4e\\x80\\\n\\xb8\\xa8\\xa1\\x59\\xed\\xf8\\xeb\\x0f\\xbe\\x86\\x3c\\x22\\x38\\x0b\\x20\\xe5\\\n\\xcf\\x56\\xbd\\xae\\x25\\xf8\\x00\\x40\\x28\\x71\\xb2\\x6c\\x0c\\x27\\x80\\xdd\\\n\\x36\\xd4\\x65\\xc7\\xad\\x1b\\xfc\\x8d\\x39\\x44\\x50\\x43\\x6b\\xf0\\x01\\x80\\\n\\x82\\xce\\x60\\xd9\\x18\\x7e\\x37\\x34\\x6f\\xf3\\x8b\\xda\\xb7\\x9a\\x65\\x2b\\\n\\xec\\xdb\\x77\\xab\\xae\\x09\\xc1\\x8c\\x26\\xf8\\x0f\\xb9\\x17\\x53\\xd3\\x9c\\\n\\x14\\xca\\xc0\\x70\\x19\\x10\\x8c\\xe5\\xe1\\x31\\xa2\\x26\\x02\\x99\\xd0\\xf8\\\n\\x33\\xd3\\x54\\x69\\x6b\\x1e\\x6d\\xf0\\x01\\x20\\x96\\x65\\x60\\x78\\x01\\xc6\\\n\\x04\\xcf\\x19\\x6f\\x84\\x0f\\xf5\\x0d\\x2f\\x80\\xcf\\x1e\\xc5\\x36\\x0a\\x26\\\n\\x50\\x64\\x15\\xa8\\x2f\\xb8\\x01\\xa4\\x59\\xf9\\xec\\x8a\\x59\\x9d\\x6e\\x96\\\n\\x81\\xe1\\x05\\xf0\\xc4\\x3d\\xa1\\xad\\x81\\x4a\\x85\\x1b\\x0a\\xae\\x6d\\x8b\\\n\\x11\\xa1\\xff\\xb1\\x2c\\x0c\\x2f\\x40\\x5f\\x2a\\xd7\\x96\\x8b\\x9f\\x51\\x04\\\n\\x3f\\xc0\\x68\\x44\\x20\\x20\\xed\\x2c\\x1b\\xe3\\x0b\\x30\\x35\\x9b\\xcf\\x90\\\n\\x23\\xf8\\x4a\\x6b\\x13\\x94\\xa6\\x7a\\xd5\\xeb\\x5a\\x45\\xa0\\x14\\xad\\x2c\\\n\\x1b\\xc3\\x0b\\xd0\\x95\\xcd\\xac\\x75\\xf8\\x82\\xdf\\xd2\\x00\\x57\\xf9\\xbb\\\n\\x70\\x6d\\xdf\\xca\\xae\\x98\\x39\\x45\\x20\\x84\\xd6\\xb2\\x6c\\x0c\\x2f\\x40\\\n\\x4f\\x56\\x0e\\x06\\xe2\\x53\\x42\\xda\\xc8\\xc5\\xf3\\x42\\x07\\xbf\\xe9\\x12\\\n\\x5c\\xe5\\x5b\\xfc\\xb7\\x9a\\x5e\\x0f\\x5c\\x3b\\x3f\\x80\\xd2\\x7c\\x49\\xd5\\\n\\x5e\\xca\\x2d\\x84\\x5c\\x34\\x87\\xe5\\xda\\x0d\\x47\\x49\\x4b\\x1b\\xcb\\xc8\\\n\\xf0\\x02\\x50\\x62\\xc1\\xbd\\x82\\x85\\x21\\x6d\\xbc\\x75\\x67\\xe0\\x3e\\x38\\\n\\xf2\\x69\\x99\\xd2\\xd2\\x00\\xd7\\x8e\\xad\\x80\\x67\\xd0\\x7d\\xbe\\xc7\\x0d\\\n\\x57\\xf9\\x16\\xd5\\x4c\\x70\\x1f\\xaa\\x82\\xf7\\xfc\\x59\\x96\\x67\\xd5\\xa4\\\n\\x02\\x3e\\x86\\x91\\xf1\\x05\\x00\\x80\\x5b\\xa5\\xcb\\xe1\\x93\\xac\\x21\\x6d\\\n\\x3c\\xdf\\x57\\x0f\\x13\\x41\\x69\\x69\\x80\\x6b\\xfb\\x96\\x91\\x8b\\x2c\\x95\\\n\\x6d\\x0b\\xf7\\xa1\\x2a\\x9e\\x53\\xb1\\x01\\x0b\\x95\\x2b\\x39\\x5c\\x37\\x87\\\n\\x00\\xee\\xf8\\x64\\xdc\\x29\\x59\\xc2\\xb4\\x1b\\x2c\\x42\\xc8\\xe0\\x07\\x08\\\n\\x12\\x81\\x33\\xf8\\x20\\x04\\x5f\\x38\\x6a\\x1b\\xfe\\xe1\\xf1\\xfd\\x31\\x7f\\\n\\x78\\x9b\\x9f\\xae\\x45\\x45\\x09\\x92\\x57\\x69\\x07\\xc0\\x3c\\x10\\x97\\xe7\\\n\\x96\\xc1\\x7b\\xe9\\xc2\\xd0\\x69\\x27\\x14\\x56\\x1b\\xe4\\xd9\\x73\\x38\\xa6\\\n\\x1d\\x00\\x40\\x87\\x4f\\x51\\xb2\\x79\\x9f\\x1b\\x35\\x8d\\x00\\x00\\xd0\\xbd\\\n\\xa0\\xe0\\x65\\x02\\xfa\\xad\\x9e\\x3e\\x50\\x8a\\x95\\xb1\\xb5\\xcd\\x47\\x78\\\n\\xed\\x4d\\x31\\x05\\x05\\x88\\xad\\x69\\x3a\\x4c\\x81\\xb0\\xff\\xd0\\x0e\\x2f\\\n\\x04\\xb4\\x52\\x4b\\xf0\\x01\\x93\\x09\\x00\\x00\\x31\\x09\\x53\\x37\\x52\\xe0\\\n\\x98\\x0e\\x43\\xff\\xe4\\x50\\xa2\\x37\\x6b\\x6d\\x64\\xaa\\x29\\x28\\x00\\x5d\\\n\\xea\\x74\\xf4\\xf6\\x4b\\x47\\x40\\xb1\\x78\\x9c\\x86\\x3c\\x11\\xed\\x50\\x56\\\n\\x91\\xe3\\x6d\\x7d\\x5a\\x1b\\x9a\\x2e\\x03\\x00\\x80\\x1c\\x6f\\xeb\\x8b\\xee\\\n\\x54\\x96\\x51\\x82\\xaa\\x88\\x8f\\x05\\x5a\\x19\\xad\\x38\\x5e\\x1a\\x4d\\xf0\\\n\\xfd\\xed\\x4d\\x4e\\xf7\\x82\\xbc\\x55\\x04\\x64\\x1f\\x38\\xee\\x8e\\x34\\x41\\\n\\x71\\x97\\x02\\x1b\\xb5\\xce\\xf9\\xc1\\x98\\x32\\x03\\x06\\x13\\x5b\\xd3\\xf2\\\n\\x9d\\x0f\\xc8\\x26\\x20\\xfb\\x01\\x0c\\x84\\xa1\\xcb\\x01\\x42\\xb0\\x4f\\xb1\\\n\\x4a\\xd9\\x63\\x0d\\x3e\\x30\\x01\\x32\\x60\\x30\\x7d\\xa5\\x45\\x69\\x3e\\xf8\\\n\\x36\\x81\\xd0\\xd5\\xd0\\xfe\\xab\\x78\\x7f\\x03\\xf4\\x6b\\x0b\\x95\\x2b\\x79\\\n\\x8b\\x2c\\x1e\\x26\\x94\\x00\\x01\\x68\\x05\\x2c\\xfd\\x17\\x72\\x73\\x7d\\x16\\\n\\x52\\x4a\\x28\\x71\\xfa\\x9f\\x5e\\x20\\x69\\x00\\x02\\x7f\\x70\\xd0\\x03\\xe0\\\n\\x26\\x01\\xfe\\xa4\\x14\\xad\\x84\\xd0\\x5a\\x47\\x49\\x4b\\x1b\\xcf\\xde\\x8e\\\n\\x40\\x20\\x10\\x08\\x04\\x02\\x81\\x40\\x20\\x10\\xb0\\xf8\\x1f\\x6c\\x8f\\x63\\\n\\xc4\\x9c\\xcd\\x5a\\xe0\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\\n\\x82\\\n\\x00\\x00\\x07\\x8b\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x40\\x00\\x00\\x00\\x40\\x08\\x06\\x00\\x00\\x00\\xaa\\x69\\x71\\xde\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0e\\xc3\\x00\\x00\\x0e\\xc3\\x01\\xc7\\x6f\\\n\\xa8\\x64\\x00\\x00\\x07\\x20\\x49\\x44\\x41\\x54\\x78\\x5e\\xed\\x5b\\xdb\\x4f\\\n\\x14\\x57\\x18\\xa7\\x6d\\xd2\\xa4\\x4d\\x9f\\x9a\\x3e\\x35\\x4d\\x9a\\x36\\x4d\\\n\\xda\\xbe\\x35\\x69\\xfa\\xd2\\xbe\\xf5\\xf2\\xd2\\xdb\\x43\\xad\\x7f\\x41\\x53\\\n\\x5b\\x76\\x96\\x9b\\x05\\x6f\\x20\\x4b\\xad\\x1a\\x85\\xdd\\x05\\x14\\x50\\x90\\\n\\x9d\\xd9\\x0b\\xbb\\xe0\\xa2\\xcb\\x8a\\x22\\x08\\x02\\x82\\x57\\x5a\\x40\\x49\\\n\\x58\\x15\\x71\\xd1\\x0a\\x62\\x41\\x14\\x44\\x05\\x91\\xcb\\xd7\\xf3\\x9d\\x39\\\n\\x67\\x67\\x07\\xc6\\x28\\xca\\x6d\\x07\\x7e\\xc9\\x2f\\x4b\\x76\\xce\\x39\\xfb\\\n\\xfd\\x7e\\xe7\\x9c\\x6f\\xbe\\xb9\\x10\\xb5\\x14\\x60\\x32\\x99\\x5e\\x36\\x0b\\\n\\xd2\\x09\\x8b\\x20\\x8e\\x11\\x76\\x99\\x05\\xb1\\x30\\x23\\x5a\\xfc\\x8c\\x1d\\\n\\xd6\\x3f\\x2c\\x82\\xb4\\xca\\x62\\x94\\x40\\x45\\x41\\x9a\\xb4\\x18\\xc5\\x5d\\\n\\xde\\xd5\\xde\\x57\\x58\\x33\\xfd\\x82\\xcc\\xf8\\x59\\x14\\xdd\\x52\\xd3\\x0c\\\n\\xfd\\x57\\x3b\\xa0\\xd1\\x5b\\x0b\\x59\\x71\\x0e\\x6a\\x84\\xd9\\x28\\xd9\\x59\\\n\\x33\\x7d\\xc2\\x6a\\x94\\xbe\\x40\\xa1\\x79\\xeb\\xdd\\x30\\x3e\\x7c\\x17\\x60\\\n\\x64\\x08\\x1e\\x0f\\x5d\\x83\\x9b\\x81\\x36\\xc8\\x49\\x74\\x51\\x13\\x32\\x62\\\n\\x6c\\x3f\\xb3\\xe6\\xfa\\x03\\x99\\x61\\x3f\\x8a\\x3c\\xed\\x3f\\x0b\\x30\\x3a\\\n\\x44\\x39\\x3e\\x74\\x1d\\x1e\\x0f\\x76\\x41\\x5b\\xed\\x19\\xb6\\x0a\\xc4\\xf3\\\n\\xac\\xb9\\xbe\\x60\\x31\\xec\\xfb\\x80\\x2c\\xff\\xa9\\xec\\x04\\x07\\x8c\\x0c\\\n\\xf4\\x51\\xf1\\x53\\x23\\x83\\x54\\x3c\\x72\\xec\\x4e\\x10\\x72\\x93\\x8a\\xe4\\\n\\x55\\x60\\x28\\x7c\\x97\\x75\\xd3\\x0f\\x88\\xf8\\x02\\x14\\x57\\xed\\xaa\\x0f\\\n\\xcd\\xfe\\xe4\\xfd\\xff\\x42\\x06\\x20\\xbd\\x99\\x65\\xb2\\x01\\x46\\xf1\\x4b\\\n\\xd6\\x4d\\x1f\\x30\\xaf\\xc9\\x7f\\x8b\\x08\\x7b\\x64\\x8d\\xb1\\xc3\\xdd\\xee\\\n\\x1e\\x65\\xf9\\xdf\\xeb\\x56\\x19\\x50\\x92\\xe1\\x7b\\xac\\x4b\\x03\\xc8\\xf9\\\n\\x7e\\x0b\\x0a\\xf3\\xef\\xad\\x0a\\x89\\x87\\x51\\x5c\\xfe\\xd7\\x54\\x06\\xe4\\\n\\x26\\xb9\\xc6\\x64\\x03\\x9c\\xef\\xb1\\xae\\x91\\x0f\\x4b\\xc2\\xfe\\xd7\\x32\\\n\\xe3\\xec\\x43\\x28\\xec\\xe6\\xa5\\x60\\xc8\\x80\\xc9\\x07\\x7d\\x2a\\xf1\\xfd\\\n\\x9d\\xed\\x74\\xf9\\x93\\x7a\\xe0\\x16\\xeb\\xaa\\x0f\\x10\\x41\\x06\\x14\\xe6\\\n\\x49\\xf7\\x87\\xcd\\xfe\\x10\\x4c\\x4c\\x5b\\xfe\\xad\\xd5\\xa7\\xf8\\x59\\xa0\\\n\\x98\\x75\\x8d\\x7c\\x60\\xd9\\x9b\\x1d\\xef\\xec\\x41\\x61\\x1d\\x7f\\x07\\x14\\\n\\x03\\xe8\\xf9\\x5f\\x11\\x8f\\x2c\\xcf\\xaf\\x90\\x0d\\x30\\xd8\\xa2\\x59\\xf7\\\n\\xc8\\x07\\x49\\x66\\x3f\\xa1\\x28\\x5b\\x5a\\x29\\x3d\\xe5\\x71\\x03\\x26\\x1f\\\n\\xde\\x56\\x89\\x47\\xee\\xd9\\xe0\\xa6\\x06\\x64\\x46\\x3b\\x3e\\x66\\xdd\\x23\\\n\\x1f\\x39\\x89\\xce\\x00\\x8a\\x3a\\x7f\\xbc\\x45\\x99\\x7d\\xc2\\x89\\xe1\\x1e\\\n\\x95\\x78\\x5d\\xee\\x7f\\x73\\x8c\\xf8\\x39\\x8a\\xca\\x5b\\xef\\x91\\xcb\\xde\\\n\\x90\\x01\\x33\\xb3\\xbf\\x2e\\xf7\\xff\\xde\\x4d\\xee\\x53\\x28\\xea\\x54\\x99\\\n\\x52\\xf6\\x22\\xa7\\x34\\x96\\x3f\\xdf\\xff\\x56\\x41\\xfa\\x9d\\x75\\x8f\\x6c\\\n\\x60\\xd9\\x8b\\x82\\xc2\\xcb\\x5e\\xce\\x89\\xfb\\xbd\\x33\\x0c\\xd8\\xab\\xb7\\\n\\xfd\\x5f\\x98\\x5a\\x72\\x18\\x05\\x85\\x97\\xbd\\x9c\\xfc\\xe2\\x87\\xb3\\x8f\\\n\\xed\\x7f\\x6b\\x8c\\xd4\\xc7\\xba\\x47\\x36\\xb0\\xec\\xcd\\x8a\\xb5\\x4f\\xd2\\\n\\xb2\\xf7\\x46\\xb7\\x4a\\xfc\\xd4\\xc8\\x80\\x4a\\x3c\\x52\\x77\\xfb\\xdf\\xb5\\\n\\xad\\xd4\\x81\\x82\\xd4\\x65\\xaf\\xcc\\x89\\xe1\\x99\\xcb\\x9f\\xef\\x7f\\x72\\\n\\x06\\xf8\\x8d\\x0d\\x31\\xff\\xc8\\x30\\x4a\\xdf\\x11\\xc7\\x69\\x81\\xf2\\xc2\\\n\\x14\\xc4\\x07\\x16\\x41\\xaa\\xb5\\x18\\xc4\\x6f\\xb1\\xec\\xdd\\x9d\\xe8\\xa2\\\n\\x17\\x34\\x3d\\x17\\x95\\xb2\\x17\\x33\\xff\\xe4\\x03\\x92\\xfc\\x58\\xf1\\xe3\\\n\\xd9\\x79\\x50\\x7b\\xac\\xb9\\x24\\xc6\\x65\\x14\\xeb\\xcd\\x82\\xfd\\x47\\x26\\\n\\x5b\\x01\\x09\\xb8\\x5b\\xb3\\xd3\\x8b\\x52\\x90\\x4e\\xe3\\xa7\\x7b\\xc7\\xc1\\\n\\x19\\x33\\x1d\\xce\\xe2\\x0c\\x9f\\x76\\xff\\x79\\xa3\\xb8\\x95\\x49\\x97\\xc1\\\n\\x0f\\xa4\\x79\\x82\\x21\\x26\\x3b\\x3a\\x20\\x36\\xbb\\x75\\xd6\\x4c\\xb0\\x34\\\n\\xc1\\x66\\x53\\x15\\xd9\\xc3\\xf6\\xd0\\x0f\\x5e\\x6c\\x6c\\xd2\\x14\\xbe\\x90\\\n\\x1c\\xbc\\x71\\x09\\xce\\x1e\\x3a\\x01\\x99\\xb1\\xd2\\x14\\xc6\\x64\\x8d\\x11\\\n\\x7f\\x60\\xf2\\xb5\\x0d\\x48\\x73\\x07\\x35\\x05\\x3e\\x2b\\x53\\xd2\\xaa\\xe8\\\n\\x98\\xf9\\xc9\\x1e\\x18\\xbb\\x1b\\xd4\\x0c\\x6a\\x31\\x78\\xa6\\xbc\\x81\\xc6\\\n\\x65\\x16\\xc4\\x3a\\x26\\x7f\\xa6\\x01\\xe9\\x1b\\x95\\x3d\\xb9\\x2d\\xc9\\xab\\\n\\x29\\xf0\\x69\\xc4\\x95\\x80\\xfd\\xf3\\xd6\\x17\\x69\\x06\\xb2\\x58\\xc4\\x95\\\n\\x40\\xb5\\x09\\xd2\\x30\\x93\\xaf\\x61\\xc0\\x26\\x65\\x4f\\x6e\\x7f\\x4e\\x03\\\n\\x90\\x7c\\x0c\\xad\\x40\\x16\\x8b\\x0f\\xfb\\x3b\\x79\\x5c\\x63\\x4c\\xfe\\x13\\\n\\xb6\\x00\\xa1\\x96\\xa8\\xd9\\x90\\x8f\\xab\\x15\\xc8\\x62\\x31\\xd8\\x2c\\xc7\\\n\\x65\\x35\\xda\\x03\\x4c\\xfe\\xf2\\x31\\x60\\xb8\\xb7\\x03\\xec\\x7f\\x79\\x27\\\n\\x31\\x26\\x72\\xda\\x37\\x31\\xf9\\xfa\\x36\\x60\\xb0\\xfb\\x32\\x99\\xf5\\x16\\\n\\x38\\xe9\\xab\\x83\\x3d\\x1b\\xdd\\xb4\\x26\\x21\\xa7\\xc1\\x8e\\x1c\\x43\\xce\\\n\\x1b\\x4c\\xfe\\xfc\\x24\\x41\\x24\\x1f\\x43\\x2b\\xb0\\x85\\x20\\xbf\\xad\\xae\\\n\\xa2\\x20\\x5e\\xda\\x11\\x53\\xf0\\x0e\\x93\\x2e\\x83\\x1f\\x0c\\x19\\xa0\\x93\\\n\\x24\\xe8\\xb5\\x6a\\x18\\x60\\x14\\x47\\xc9\\xe7\\x6a\\x26\\x5d\\x06\\x3f\\xc8\\\n\\x0d\\xe0\\xd4\\x12\\x35\\x1b\\xf2\\x71\\xb5\\x82\\x5b\\x48\\x62\\x1d\\xd2\\xdf\\\n\\x19\\x80\\xf2\\x82\\xa3\\xb7\\xe4\\x98\\xc4\\x51\\xb3\\x51\\xfa\\x88\\xc9\\x5f\\\n\\x3e\\x49\\x10\\x59\\x29\\x55\\x92\\x6b\\x02\\x4c\\x82\\x61\\x4f\\x9e\\x97\\x93\\\n\\x01\\x03\\xc1\\x00\\x8d\\x29\\x2b\\xc1\\x7e\\x8f\\xc9\\xd7\\x6f\\x12\\xd4\\xe2\\\n\\xe8\\xed\\xab\\x34\\xa6\\xec\\x78\\xc7\\x93\\x0b\\x21\\x3d\\x57\\x82\\xd7\\x2f\\\n\\x9c\\xe7\\x71\\xb5\\x31\\xf9\\xcb\\x67\\x0b\\x0c\\xf7\\x5e\\x01\\xe7\\xf6\\x52\\\n\\xfa\\xbc\\x91\\x24\\xc2\\x14\\x26\\x5f\\xdf\\x06\\x0c\\x61\\x21\\xd4\\xd2\\x0a\\\n\\xa7\\xfd\\xf5\\xb0\\x2f\\xc5\\x43\\x2f\\x85\\xc9\\x85\\xd0\\x95\\xfc\\x35\\xf9\\\n\\xaf\\x33\\xf9\\xfa\\x35\\xc0\\x97\\x7b\\x38\\x14\\x03\\x27\\xb9\\x0c\\x6e\\xda\\\n\\x29\\x14\\xbe\\xcd\\xa4\\xcb\\xe0\\x07\\xb9\\x70\\xbd\\x24\\xc1\\xb2\\x3c\\xb5\\\n\\x01\\x59\\xf1\\x8e\\x3a\\x88\\x82\\x97\\x98\\x6c\\x05\\xbc\\x41\\xc8\\x00\\x1d\\\n\\x25\\x41\\x7e\\x27\\x28\\x2b\\x4e\\xbe\\x43\\x65\\x16\\x6c\\xdf\\x33\\xd9\\x0a\\\n\\x78\\xa0\\xdc\\x00\\x4e\\x2d\\x51\\xb3\\xe1\\x52\\x30\\x80\\x93\\xdf\\x09\\xc2\\\n\\x1b\\xb6\\x4c\\xb6\\x82\\xe5\\x60\\x00\\xbf\\x13\\x44\\x72\\x80\\x52\\x00\\x71\\\n\\x2c\\x07\\x03\\xf0\\x7a\\x80\\x1a\\x60\\x14\\xa7\\x98\\x6c\\x05\\xd3\\x0d\\xd0\\\n\\x63\\x25\\xc8\\x1f\\xb9\\xe3\\xf3\\x0f\\x26\\x5b\\x01\\x0f\\x34\\x64\\x80\\xce\\\n\\x2a\\x41\\x9c\\xfd\\xd2\\xec\\x43\\x7d\\x18\\x0b\\xd9\\x02\\x0e\\x26\\x5b\\x01\\\n\\x0f\\x94\\x1b\\xc0\\xa9\\x25\\x6a\\x36\\x5c\\x6c\\x03\\x06\\xba\\x2e\\x42\\xa0\\\n\\xf1\\x1c\\x94\\x98\\x7d\\xe3\\x34\\x16\\x41\\x1a\\xce\\x8c\\x2b\\xfc\\x90\\xc9\\\n\\x56\\xa0\\x37\\x03\\xf0\\x82\\xc7\\x96\\x56\\x12\\xfa\\x7d\\x24\\x59\\xfa\\x03\\\n\\x64\\xf6\\xbf\\x61\\x92\\xd5\\xe0\\x8d\\x9e\\xdd\\x80\\x16\\x48\\xdd\\x5c\\x01\\\n\\xe9\\xf1\\x45\\x94\\xa9\\xa9\\x15\\xf4\\xbb\\xe9\\xed\\xf8\\xb8\\x83\\x97\\xeb\\\n\\x16\\x94\\x03\\x81\\x5a\\x28\\x4c\\x96\\x5f\\xb3\\x0d\\xe3\\x39\\x93\\xc9\\xfb\\\n\\x2a\\x93\\xac\\x06\\x6f\\xc4\\x85\\x3f\\x2d\\x09\\x9a\\x88\\x78\\x3c\\x26\\xa6\\\n\\x39\\x29\\xf1\\x6f\\xfc\\x6e\\x7a\\x3b\\x3e\\x86\\x56\\x90\\x0b\\xc1\\xdb\\xed\\\n\\xb5\\xd0\\x7a\\xe4\\x08\\xe4\\xfc\\x21\\xbf\\x7e\\x4f\\xb6\\x40\\x2a\\x93\\xac\\\n\\x06\\x0f\\x34\\x64\\xc0\\x53\\x92\\x60\\x7a\\x9c\\x8b\\x0a\\x7f\\xf4\\xaf\\x8f\\\n\\xd2\\x66\\x72\\xd2\\x95\\x30\\xbd\\x1d\\x1f\\x43\\x2b\\xb8\\x85\\xe4\\x3f\\x7e\\\n\\xb9\\x24\\x36\\x1b\\xa5\\x20\\x93\\xac\\x06\\x0f\\x94\\x1b\\xc0\\x39\\x5d\\x10\\\n\\x27\\x1a\\x80\\xa2\\x23\\xc5\\x80\\x9e\\xe6\\x6a\\x66\\x80\\x38\\xc1\\x24\\xab\\\n\\x31\\x5b\\x03\\x22\\x65\\x0b\\x70\\xb6\\xd7\\x1c\\x95\\x63\\x11\\xa4\\x6e\\x26\\\n\\x59\\x0d\\x1e\\xe8\\xb3\\x1a\\x80\\x09\\x0f\\x05\\xf3\\x24\\x28\\x8b\\x5f\\x3a\\\n\\x49\\x30\\x9c\\x37\\x9a\\xaa\\xa1\\x20\\xd9\\x35\\x22\\xc7\\x22\\xee\\x62\\x92\\\n\\xd5\\x98\\x6e\\xc0\\x5c\\x57\\x82\\x5a\\x81\\x3d\\x0f\\x07\\x48\\x52\\xeb\\x6d\\\n\\xad\\x81\\xeb\\x67\\x8e\\xc1\\x95\\x86\\x4a\\x68\\x3f\\x56\\x01\\xad\\xe5\\x87\\\n\\xe1\\xdc\\x81\\x72\\x68\\x70\\xfb\\xa1\\x46\\xf2\\x41\\xc5\\x9e\\x52\\xf0\\x65\\\n\\xef\\x87\\x92\\x9d\\xc5\\x20\\xfd\\xe9\\x06\\x6b\\xac\\x1c\\x03\\xde\\x04\\xc1\\\n\\xf7\\x95\\x98\\x64\\x35\\x78\\xa0\\x21\\x03\\xe6\\xa0\\x12\\xe4\\x8f\\xc7\\x91\\\n\\x27\\x8b\\xfd\\xd0\\x56\\x59\\x01\\x9d\\x27\\xab\\x28\\xaf\\x69\\x0a\\x28\\x63\\\n\\x02\\x0e\\x40\\x59\\xb6\\x17\\xf6\\xa7\\x97\\x80\\x6b\\xab\\x07\\x0a\\x53\\x8a\\\n\\x20\\x2f\\xc9\\x19\\xba\\x9c\\x9d\\x35\\x05\\x69\\x9c\\x24\\x3f\\xf7\\x8c\\x9b\\\n\\x20\\xe1\\xe0\\x8d\\xb9\\x01\\x94\\x73\\xf4\\x82\\xc4\\x5c\\x32\\x33\\xc6\\x3e\\\n\\x92\\x95\\xe0\\xe8\\xdf\\xbd\\xd6\\xd1\\x95\\x93\\xe8\\xba\\x90\\xbb\\xae\\xa8\\\n\\x31\\x77\\x9d\\xdb\\x9f\\xb7\\xc1\\xe3\\xd8\\x9d\\xe8\\x32\\xe7\\xac\\x73\\x6d\\\n\\x26\\xed\\x7e\\xc5\\x7f\\xb4\\xb2\\x1a\\x6d\\x5f\\x67\\x1a\\xa4\\x4f\\x54\\xb7\\\n\\xbe\\x9e\\x04\\xfe\\x03\\xe1\\x06\\x24\\xdb\\x9f\\xff\\x15\\x19\\x14\\x4f\\x5c\\\n\\xc7\\xac\\x3b\\x45\\xb8\\x89\\xfc\\xbd\\x9d\\x7c\\xfa\\xc8\\x1e\\x3c\\x6e\\x11\\\n\\xc4\\x66\\x4a\\xa3\\xd8\\x40\\x78\\x88\\xd0\\x89\\x7b\\x93\\x7c\\xb7\\x85\\x54\\\n\\x6a\\x6b\\x49\\x1c\\xbf\\x90\\x59\\x5b\\x65\\x36\\x48\\x5f\\x99\\x63\\xed\\x9f\\\n\\x5a\\xa3\\x6d\\xef\\x5b\\x12\\xf6\\xbd\\x39\\xaf\\xff\\x43\\x88\\xd9\\x91\\x9b\\\n\\x30\\x57\\x94\\xc5\\x4b\\x1b\\xd8\\x4f\\x2c\\x6d\\xd0\\x57\\xda\\xe6\\xc8\\x04\\\n\\xb3\\x20\\xdd\\x21\\xb3\\x79\\x14\\x97\\x20\\x1b\\x7e\\x05\\x2b\\x58\\xc1\\x0a\\\n\\x96\\x20\\xa2\\xa2\\xfe\\x07\\xe0\\x15\\xf7\\xe8\\xf3\\x3e\\xc3\\x5f\\x00\\x00\\\n\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x11\\xb0\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x50\\x00\\x00\\x00\\x50\\x08\\x06\\x00\\x00\\x00\\x8e\\x11\\xf2\\xad\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x04\\x76\\x00\\x00\\x04\\x76\\x01\\xbd\\x3d\\\n\\xaa\\xc7\\x00\\x00\\x01\\xcb\\x69\\x54\\x58\\x74\\x58\\x4d\\x4c\\x3a\\x63\\x6f\\\n\\x6d\\x2e\\x61\\x64\\x6f\\x62\\x65\\x2e\\x78\\x6d\\x70\\x00\\x00\\x00\\x00\\x00\\\n\\x3c\\x78\\x3a\\x78\\x6d\\x70\\x6d\\x65\\x74\\x61\\x20\\x78\\x6d\\x6c\\x6e\\x73\\\n\\x3a\\x78\\x3d\\x22\\x61\\x64\\x6f\\x62\\x65\\x3a\\x6e\\x73\\x3a\\x6d\\x65\\x74\\\n\\x61\\x2f\\x22\\x20\\x78\\x3a\\x78\\x6d\\x70\\x74\\x6b\\x3d\\x22\\x58\\x4d\\x50\\\n\\x20\\x43\\x6f\\x72\\x65\\x20\\x35\\x2e\\x34\\x2e\\x30\\x22\\x3e\\x0a\\x20\\x20\\\n\\x20\\x3c\\x72\\x64\\x66\\x3a\\x52\\x44\\x46\\x20\\x78\\x6d\\x6c\\x6e\\x73\\x3a\\\n\\x72\\x64\\x66\\x3d\\x22\\x68\\x74\\x74\\x70\\x3a\\x2f\\x2f\\x77\\x77\\x77\\x2e\\\n\\x77\\x33\\x2e\\x6f\\x72\\x67\\x2f\\x31\\x39\\x39\\x39\\x2f\\x30\\x32\\x2f\\x32\\\n\\x32\\x2d\\x72\\x64\\x66\\x2d\\x73\\x79\\x6e\\x74\\x61\\x78\\x2d\\x6e\\x73\\x23\\\n\\x22\\x3e\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x3c\\x72\\x64\\x66\\x3a\\x44\\x65\\\n\\x73\\x63\\x72\\x69\\x70\\x74\\x69\\x6f\\x6e\\x20\\x72\\x64\\x66\\x3a\\x61\\x62\\\n\\x6f\\x75\\x74\\x3d\\x22\\x22\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\\n\\x20\\x20\\x20\\x78\\x6d\\x6c\\x6e\\x73\\x3a\\x78\\x6d\\x70\\x3d\\x22\\x68\\x74\\\n\\x74\\x70\\x3a\\x2f\\x2f\\x6e\\x73\\x2e\\x61\\x64\\x6f\\x62\\x65\\x2e\\x63\\x6f\\\n\\x6d\\x2f\\x78\\x61\\x70\\x2f\\x31\\x2e\\x30\\x2f\\x22\\x0a\\x20\\x20\\x20\\x20\\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x78\\x6d\\x6c\\x6e\\x73\\x3a\\x74\\x69\\\n\\x66\\x66\\x3d\\x22\\x68\\x74\\x74\\x70\\x3a\\x2f\\x2f\\x6e\\x73\\x2e\\x61\\x64\\\n\\x6f\\x62\\x65\\x2e\\x63\\x6f\\x6d\\x2f\\x74\\x69\\x66\\x66\\x2f\\x31\\x2e\\x30\\\n\\x2f\\x22\\x3e\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x3c\\x78\\x6d\\\n\\x70\\x3a\\x43\\x72\\x65\\x61\\x74\\x6f\\x72\\x54\\x6f\\x6f\\x6c\\x3e\\x77\\x77\\\n\\x77\\x2e\\x69\\x6e\\x6b\\x73\\x63\\x61\\x70\\x65\\x2e\\x6f\\x72\\x67\\x3c\\x2f\\\n\\x78\\x6d\\x70\\x3a\\x43\\x72\\x65\\x61\\x74\\x6f\\x72\\x54\\x6f\\x6f\\x6c\\x3e\\\n\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x3c\\x74\\x69\\x66\\x66\\x3a\\\n\\x4f\\x72\\x69\\x65\\x6e\\x74\\x61\\x74\\x69\\x6f\\x6e\\x3e\\x31\\x3c\\x2f\\x74\\\n\\x69\\x66\\x66\\x3a\\x4f\\x72\\x69\\x65\\x6e\\x74\\x61\\x74\\x69\\x6f\\x6e\\x3e\\\n\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x3c\\x2f\\x72\\x64\\x66\\x3a\\x44\\x65\\x73\\\n\\x63\\x72\\x69\\x70\\x74\\x69\\x6f\\x6e\\x3e\\x0a\\x20\\x20\\x20\\x3c\\x2f\\x72\\\n\\x64\\x66\\x3a\\x52\\x44\\x46\\x3e\\x0a\\x3c\\x2f\\x78\\x3a\\x78\\x6d\\x70\\x6d\\\n\\x65\\x74\\x61\\x3e\\x0a\\x18\\xcb\\x55\\x58\\x00\\x00\\x0f\\x7e\\x49\\x44\\x41\\\n\\x54\\x78\\x01\\xed\\x9c\\x09\\x74\\x55\\xc5\\x19\\xc7\\xef\\x7b\\xf7\\x66\\x07\\\n\\x02\\x09\\x92\\x84\\x40\\x02\\x61\\xb1\\x34\\xec\\x5b\\xc4\\x7a\\x00\\xa1\\x16\\\n\\xa5\\x2e\\x3d\\x6d\\xa9\\x0b\\x60\\x01\\xd9\\xa4\\x07\\xeb\\xd1\\x56\\x6d\\x8f\\\n\\xf6\\x50\\xeb\\x69\\x7b\\xb4\\x5a\\x2d\\xb2\\x25\\x80\\x58\\xe4\\xb8\\x70\\xa8\\\n\\x5a\\xad\\x14\\x81\\x82\\x0b\\x20\\x3b\\x84\\xb0\\x89\\x09\\x42\\x80\\x04\\x12\\\n\\xb6\\x08\\x59\\xdf\\xd2\\xdf\\xf7\\xcc\\xbd\\xe6\\xbd\\xbc\\xbc\\x77\\xdf\\x92\\\n\\x05\\xcd\\x9c\\x33\\x67\\xee\\x9d\\x99\\x6f\\xe6\\x9b\\xff\\xfd\\xe6\\x9b\\x6f\\\n\\xbe\\x99\\xf7\\x14\\xa5\\x35\\xb4\\x22\\xd0\\x8a\\x40\\x2b\\x02\\xad\\x08\\xb4\\\n\\x22\\xd0\\x8a\\x40\\x2b\\x02\\xad\\x08\\xb4\\x22\\xd0\\x8a\\x40\\xc0\\x08\\x58\\\n\\x02\\xa6\\x68\\x42\\x82\\xe1\\xc3\\x87\\x27\\xd6\\xd4\\xd4\\x3c\\x6c\\xb5\\x5a\\\n\\x6f\\x72\\x3a\\x9d\\x51\\x74\\xfd\\x1f\\x87\\xc3\\xb1\\x60\\xdf\\xbe\\x7d\\x97\\\n\\x9a\\x90\\x0d\\x9f\\x5d\\xb5\\x58\\x00\\x47\\x8c\\x18\\x91\\x5a\\x55\\x55\\xf5\\\n\\x16\\xe0\\x0d\\x05\\xbc\\x48\\x8b\\xc5\\xa2\\x90\\x56\\x31\\x9a\\x0d\\x36\\x9b\\\n\\x6d\\xd6\\xfe\\xfd\\xfb\\x4f\\x7b\\x8e\\x6c\\xe6\\xcc\\x99\\x69\\x36\\xcd\\x99\\\n\\x63\\x75\\x58\\x6e\\x94\\x32\\xa7\\xa6\\x6c\\x55\\x2a\\xec\\xbf\\x5a\\xb6\\x6c\\\n\\xd9\\x17\\x9e\\x75\\xc3\\xf5\\xde\\x22\\x01\\x04\\xbc\\x98\\xea\\xea\\xea\\x1c\\\n\\x40\\x9b\\x08\\x68\\x4e\\x06\\xfb\\x15\\xd1\\x41\\x6c\\x0f\\xa0\\x4e\\xa4\\x70\\\n\\x99\\xa6\\x69\\x8f\\x6e\\xdf\\xbe\\xbd\\x4c\\x07\\x42\\xc0\\xb3\\xab\\xca\\x81\\\n\\x93\\x3d\\xec\\x71\\x67\\x53\\x78\\x22\\x24\\x9d\\x51\\x6d\\x69\\xf9\\xd6\\x8a\\\n\\x28\\x6b\\x44\\xe6\\xc2\\x85\\x0b\\x0b\\xf5\\xba\\xe1\\x4c\\xad\\xe1\\x6c\\x2c\\\n\\x5c\\x6d\\x21\\x79\\x77\\xd3\\xd6\\xc4\\xda\\xf6\\x0e\\xd9\\xed\\xf6\\xdb\\x78\\\n\\x1e\\x09\\x96\\xc7\\x88\\xe0\\x6a\\x99\\x8e\\x14\\xfe\\x82\\x3c\\x43\\x00\\x6c\\\n\\x11\\xce\\xec\\x93\\x19\\xf6\\x58\\xa2\\x5a\\x15\\xa3\\x28\\x12\\x01\\x53\\x2b\\\n\\xec\\xe1\\x8c\\xa9\\x54\\x6a\\x96\\xd4\\xb6\\x15\\xf6\\xa4\\xc5\\x01\\x38\\x64\\\n\\xc8\\x90\\x7e\\x8c\\xf2\\x39\\x19\\x29\\x60\\x5d\\x40\\xda\\x9e\\x41\\xe7\\x6d\\\n\\xdd\\xbd\\x7b\\xf7\\x01\\xb2\\xfe\\x4c\\xde\\x45\\x29\\x23\\xbc\\x30\\x70\\xe0\\\n\\x40\\xd7\\x54\\x95\\x17\\xd5\\x6e\\x19\\x55\\x9c\\x6a\\xd7\\xe4\\xb9\\x6e\\x28\\\n\\x4e\\xb5\\x69\\xaa\\xc3\\x32\\xba\\x6e\\x5e\\x38\\x9f\\x5b\\x14\\x80\\x59\\x59\\\n\\x59\\xed\\x90\\xae\\x67\\x89\\x1d\\x19\\x24\\x58\\x39\\x5f\\xdf\\xbb\\x77\\xef\\\n\\x1b\\xfa\\x80\\xf7\\xec\\xd9\\xb3\\x82\\xb2\\xa5\\xbc\\xdb\\x48\\xdb\\x12\\x5f\\\n\\xcc\\xcc\\xcc\\x4c\\x76\\x95\\x3b\\x91\\x46\\xab\\x21\\x90\\x3a\\x89\\x22\\xf3\\\n\\x9f\\x76\\x1a\\x6d\\x9c\\x2e\\x5d\\x61\\xf4\\xd6\\xcc\\x0f\\x49\\x49\\x49\\x0f\\\n\\x01\\xca\\x54\\xa2\\x86\\xe4\\xed\\x41\\xcf\\xcd\\x3e\\x73\\xe6\\xcc\\x95\\xba\\\n\\x6c\\xb5\\x69\\xd3\\x66\\x6f\\x64\\x64\\xe4\\x10\\xea\\xf4\\x20\\xa6\\xa8\\xaa\\\n\\x1a\\x9b\\x90\\x90\\xb0\\xa1\\x73\\xb7\\xae\\x37\\x39\\x54\\x25\\xed\\x72\\x82\\\n\\x3b\\x58\\x5d\\x4e\\x68\\xb6\\x76\\x97\\x2d\\xdb\\x87\\x0d\\x1a\\x7a\\x05\\xe9\\\n\\xce\\x1c\\x3a\\x74\\x68\\x0a\\xe9\\x29\\x24\\x5a\\x74\\x6a\\xc8\\xa1\\xfe\\x27\\\n\\x0b\\xb9\\xc9\\xe0\\x1a\\x18\\x3c\\x78\\xf0\\x44\\x00\\x59\\x40\\x8c\\x47\\x62\\\n\\x8a\\x89\\xe3\\x90\\xb8\\x5c\\x6f\\xad\\x0d\\x1a\\x34\\x28\\x9d\\x7a\\xef\\xb2\\\n\\xa0\\x0c\\xa0\\x9e\\x9d\\x3a\\x7f\\x01\\x94\\x55\\x00\\xb8\\xe7\\x44\\x0f\\x7b\\\n\\x64\\x51\\x17\\xbb\\x6a\\x41\\x20\\x93\\x0b\\xad\\xb6\\xb4\\x02\\xb5\\x3c\\xca\\\n\\xa2\\xf5\\xd5\\x17\\x91\\xa9\\x53\\xa7\\x5e\\xc7\\x87\\xc9\\x82\\x3e\\x06\\x5a\\\n\\x1b\\xcf\\x9b\\x17\\x2d\\x5a\\xa4\\xab\\x05\\xb7\\xee\\xcc\\xac\\xea\\x2d\\x02\\\n\\xc0\\xfe\\xfd\\xfb\\xf7\\x65\\x20\\xaf\\x88\\xc9\\x22\\x23\\x40\\xfa\\x66\\x03\\\n\\x9e\\x4b\\xf1\\xf7\\xec\\xd9\\x33\\xaa\\x6d\\xdb\\xb6\\x93\\x28\\x1b\\x49\\xfe\\\n\\x1f\\x98\\xd2\\x27\\xa4\\xce\\xb0\\x61\\xc3\\x7e\\xc8\\xfb\\x3b\\x3c\\xc6\\x11\\\n\\x4b\\x3a\\x74\\xe8\\xb0\\x30\\x23\\x23\\xe3\\x23\\xcc\\x98\\x27\\xd0\\x79\\xb2\\\n\\xe0\\x60\\xc6\\x58\\x36\\x47\\x39\\xb5\\x99\\x3a\\x78\\x42\\x57\\x37\\x4c\\x99\\\n\\x32\\x25\\x1a\\x69\\x1e\\x01\\x98\\x5d\\xc9\\x8f\\x60\\xb1\\xda\\xb7\\x74\\xe9\\\n\\xd2\\xdd\\x52\\xc7\\xec\\xaa\\xde\\x28\\x00\\x9a\\xf9\\x72\\xfa\\x40\\x26\\x4c\\\n\\x98\\xa0\\x16\\x14\\x14\\x2c\\x07\\xa0\\xfb\\xc8\\xd3\\x18\\xc4\\xea\\xab\\x57\\\n\\xaf\\x3e\\x70\\xf4\\xe8\\x51\\x31\\x5d\\x14\\x24\\xf3\\x0e\\x06\\xf8\\x2a\\xb1\\\n\\x03\\xa0\\xac\\x00\\xb4\\xc7\\x00\\xb1\\x84\\x22\\x0b\\x20\\x3e\\x4a\\x9e\\x6b\\\n\\xc1\\xe1\\xfd\\x28\\x46\\xf7\\xbd\\xd8\\x87\\x7b\\x85\\x2e\\x98\\x30\\x63\\xc6\\\n\\x8c\\x4c\\xe8\\x32\\xe1\\x25\\xba\\x46\\x75\\xfe\\xba\\xb0\\xbb\\xbd\\xbf\\xac\\\n\\xe4\\x75\\xdb\\x4a\\xcf\\xd7\\x6c\\x5d\\x8e\\x5b\\xd6\\x2f\\x5f\\x98\\x33\\x5e\\\n\\xf2\\xc3\\x0e\\xa0\\xd9\\x2f\\xa7\\x33\\x05\\x40\\xe3\\x60\\xf8\\x6d\\xde\\x65\\\n\\x4a\\x15\\x60\\xff\\xfd\\xf8\\xc0\\x81\\x03\\x47\\xa4\\x9c\\x69\\xd9\\x83\\xe4\\\n\\x3d\\xca\\xfb\\x00\\x9c\\x42\\x5a\\x8d\\xf9\\xf2\\xbb\\xe4\\xe4\\xe4\\x05\\x6b\\\n\\xd7\\xae\\xad\\xa2\\x3c\\x1e\\xc9\\x7d\\xbd\\xd6\\xcc\\xa1\\x8a\\xe3\\x9d\\xa8\\\n\\xa8\\xa8\\x49\\xdb\\xb6\\x6d\\xab\\x10\\xfa\\x50\\xc2\\x8c\\xd9\\x33\\x2b\\x3f\\\n\\x1b\\x59\\x1d\\x55\\x1d\\xed\\xde\\x4a\\x54\\xa5\\xa2\\x64\\x7d\\x1c\\x59\\x91\\\n\\xb3\\x38\\x3b\\x56\\x4a\\xc2\\xbe\\x3a\\x05\\x62\\x8f\\x31\\x75\\xaf\\x07\\xb4\\\n\\x27\\xe0\\xc3\\xa5\\x8f\\x00\\xe0\\x71\\xc0\\x3b\\x2a\\x8c\\xb1\\xba\\xb6\\x41\\\n\\xea\\x7e\\xab\\x83\\x27\\x79\\x94\\x47\\xf2\\xfe\\x74\\x69\\x69\\xe9\\x4d\\xf2\\\n\\xde\\xaf\\x5f\\x3f\\x4b\\x5a\\x5a\\xda\\x3a\\xf2\\x05\\x70\\x2b\\xf5\\xef\\xaa\\\n\\xac\\xac\\x9c\\x20\\xcf\\x52\\x1e\\x52\\x90\\xe5\\xbb\\xe1\\x55\\xdd\\x10\\xbc\\\n\\xd0\\x3b\\xf2\\xe0\\xd2\\xac\\x3d\\x26\\x26\\x4b\\x44\\x44\\xc4\\x1c\\x56\\xd1\\\n\\xd1\\x0c\\xdc\\x0e\\x90\\x2f\\xc4\\xc6\\xc6\\xae\\xa3\\x39\\x61\\xdd\\x42\\xfe\\\n\\x1d\\xa4\\xb3\\x00\\xc7\\xad\\x07\\xea\\xc6\\x91\\x37\\x1f\\xfa\\x5e\\xd0\\xff\\\n\\x64\\xf5\\xea\\xd5\\xff\\xa0\\xee\\x5c\\xe8\\xcb\\x28\\x53\\x89\\x7f\\xc4\\x3e\\\n\\x1c\\x29\\x6d\\xb8\\x11\\x06\\xf8\\x62\\xb7\\x3a\\x3f\\x91\\x45\\xc8\\x93\\x2c\\\n\\xe5\\xb4\\x66\\x63\\xb1\\xda\\xa4\\xe7\\x87\\x1d\\x40\\x86\\xef\\xcb\\x1e\\xd3\\\n\\x07\\x65\\x45\\x5f\\xdd\\xc9\\xa0\\x1f\\x12\\x46\\x98\\x96\\x9b\\x50\\xe6\\x8b\\\n\\xb6\\x6c\\xd9\\xe2\\xd2\\x7b\\x4c\\xcd\\x0c\\xc0\\xf9\\x1b\\xe5\\x3a\\x9f\\x46\\\n\\x2a\\x79\\x80\\xd4\\x87\\xf2\\xe5\\xc7\\x8e\\x1d\\x93\\x45\\xc4\\x59\\x5e\\x5e\\\n\\xfe\\x31\\xe9\\x93\\xe4\\x57\\x00\\x66\\x37\\xa6\\xf5\\x93\\xe8\\xc7\\xee\\x06\\\n\\x51\\x10\\x0f\\x9a\\xdd\\x32\\x57\\xb6\\x81\\xac\\xe2\\xf6\\x88\\x6a\\x45\\x89\\\n\\xac\\xb6\\x28\\x69\\xf9\\xaa\\xad\\x6b\\x81\\xb5\\x3c\\x5a\\x89\\x98\\xa5\\x37\\\n\\x19\\x76\\x3b\\x70\\xe0\\xf0\\xc1\\xa3\\x1c\\xaa\\x33\\xbd\\x9e\\x3d\\x76\\x52\\\n\\xb5\\xb7\\xbb\\x64\\x3d\\x38\\x6c\\xf0\\x90\\x95\\x74\\x7e\\x3d\\x83\\xcd\\x61\\\n\\x3a\\xb6\\x47\\x9a\\xc4\\xce\\x9b\\xbd\\x6b\\xd7\\xae\\xfd\\xc2\\x94\\xac\\xba\\\n\\xd1\\xd1\\xd1\\x2f\\xf1\\x68\\xec\\x32\\x24\\xdf\\x33\\xa0\\xf7\\xd2\\x00\\x2e\\\n\\xbf\\xb8\\xb8\\x78\\x4f\\x49\\x49\\x89\\xbd\\x73\\xe7\\xce\\x05\\xb4\\x95\\x4c\\\n\\xbb\\x83\\x68\\x37\\x83\\x72\\x95\\xbc\\x8f\\x8a\\x8a\\x8a\\x6a\\x3c\\x69\\xcd\\\n\\xbc\\x63\\x27\\x96\\x0e\\x1b\\x3c\\x74\\x55\\xdb\\xcb\\x96\\xbe\\x69\\xc7\\xb5\\\n\\xd4\\xd4\\xe3\\x56\\x5b\\x7c\\x99\\xf5\\x7f\\x51\\x8a\\x76\\x5b\\xdd\\x55\\x5d\\\n\\x97\\x08\\x33\\x6d\\x9a\\xaa\\xc3\\x4a\\x76\\xbb\\x53\\xb5\\xbc\\x79\\xa2\\xa7\\\n\\x3d\\xca\\xd3\\x1e\\x8b\\x51\\x23\\x07\\x96\\x95\\x95\\x0d\\xcc\\xcf\\xcf\\x7f\\\n\\x0c\\x09\\xbc\\x81\\x01\\xdb\\x88\\xaf\\x31\\xe8\\x99\\x30\\xec\\x1a\\x28\\x86\\\n\\xee\\xfd\\x48\\xd9\\x72\\x3a\\x33\\xf3\\x71\\x8b\\xa8\\x7b\\xab\\x6e\\x2f\\x42\\\n\\x2b\\x3a\\xf5\\x43\\x00\\x4c\\xa3\\x5d\\xd1\\x99\\x0f\\xb0\\x62\\x4b\\x5b\\x8d\\\n\\x16\\xcc\\x30\\x69\\xba\\xf3\\x59\\xb3\\x66\\x8d\\x80\\xe9\\x72\\xab\\x62\\xf9\\\n\\xab\\xb7\\x2f\\xb7\\x60\\xc1\\x82\\x13\\x4c\\xbd\\x69\\x48\\xc7\\xdd\\x32\\x15\\\n\\x79\\xce\\x8b\\x8b\\x8b\\x7b\\x98\\x55\\xf3\\x9c\\x74\\x82\\x81\\x2c\\xba\\x6b\\\n\\x11\\x80\\xc6\\x9b\\xec\\x54\\xb6\\x73\\xc3\\xd3\\xd3\\xd3\\x3f\\x3c\\x75\\xea\\\n\\xd4\\x25\\x76\\x2d\\xe7\\x53\\x52\\x52\\x4e\\x42\\x3b\\x12\\x10\\xdb\\x92\\xde\\\n\\x9c\\x9a\\x9a\\x7a\\x88\\x7c\\xd7\\xc2\\x64\\xb2\\xcd\\x80\\xaa\\x85\\x4d\\x02\\\n\\x01\\x6f\\x2c\\xc0\\x94\\x60\\x88\\x7a\\xdd\\x3d\\x08\\x57\\x28\\xf7\\x5b\\xd0\\\n\\x51\\xab\\x05\\x20\\x80\\x3e\\x8d\\xc9\\x31\\x91\\x95\\x38\\x0e\\x30\\xdb\\x33\\\n\\xd5\\x3e\\x3d\\x7d\\xfa\\x74\\x36\\x65\\x3f\\xa2\\xaa\\x69\\xbe\\xa8\\xef\\x80\\\n\\xfe\\x15\\x24\\x78\\x06\\x74\\x4e\\xf4\\xa7\\x18\\xc4\\xf3\\xd0\\x83\\x8f\\x50\\\n\\x16\\x4d\\x3f\\x07\\xc9\\x1f\\x4f\\xb9\\x00\\x1b\\xf6\\x10\\x16\\x09\\x04\\xbc\\\n\\x7b\\x61\\x36\\x37\\x3b\\x3b\\xbb\\xc1\\x2f\\xdd\\xbb\\x77\\xef\\x8e\\x00\\xb6\\\n\\x02\\xc9\\x10\\xe5\\x5e\\xc9\\xc0\\x9e\\xdd\\xb9\\x73\\xe7\\x2a\\x06\\x76\\x8c\\\n\\x41\\x1f\\x01\\xbc\\xf9\\x2c\\x26\\x77\\x52\\x16\\xe8\\xc2\\x66\\x01\\xc0\\xeb\\\n\\x91\\xb4\\xcb\\x48\\xda\\x4e\\x3e\\x84\\x03\\xd3\\x66\\x3f\\xed\\xcb\\x36\\xaf\\\n\\x37\\x7c\\x75\\x22\\xed\\x42\\xfe\\xea\\xb0\\xa3\\x47\\x83\\x21\\x01\\x38\\x6f\\\n\\xde\\x3c\\x6b\\xaf\\x5e\\xbd\\x26\\xf0\\xc5\\xd7\\xe7\\xe4\\xe4\\x14\\xf9\\x62\\\n\\xb0\\x5b\\xb7\\x6e\\xcf\\x33\\x18\\x31\\x4d\\x24\\xac\\xc3\\xe7\\xf7\\x38\\xca\\\n\\x9f\\xf5\\x0d\\x71\\xb3\\x58\\x6e\\xc5\\x80\\x9e\\x4d\\x9a\\x20\\xef\\x81\\x06\\\n\\x3e\\x4a\\x24\\x20\\x65\\x00\\xe2\\x41\\x40\\xfc\\x92\\x8f\\x51\\xd1\\xbd\\x7b\\\n\\xf7\\xed\\x7c\\x10\\xf1\\x23\\x26\\x12\\x7b\\xe2\\xa8\\x70\\xb0\\xe0\\x7c\\x12\\\n\\x68\\xdb\\xfe\\xea\\x07\\x0d\\x20\\x3b\\x8e\\x88\\x2b\\x57\\xae\\xdc\\x0b\\x93\\\n\\xef\\x2f\\x5f\\xbe\\xfc\\xb2\\xaf\\x8e\\x30\\x29\\x26\\x31\\xc0\\x47\\xa9\\x13\\\n\\x4b\\x7a\\x12\\x9a\\x7b\\xf2\\xf2\\xf2\\x5c\\x7a\\x0f\\xe9\\x93\\xbc\\xe7\\x99\\\n\\xda\\xe2\\xba\\xf7\\xd5\\x8c\\xcf\\x32\\x40\\xec\\x88\\xd4\\x89\\x94\\xbf\\x7d\\\n\\xe9\\xd2\\x25\\x5b\\x61\\x61\\xe1\\x45\\x59\\x99\\x21\\xba\\x9d\\xb2\\x38\\x3e\\\n\\xce\\xf7\\xba\\x76\\xed\\x7a\\x14\\x70\\x8f\\xf9\\x6c\\x28\\xc0\\xc2\\x40\\xa7\\\n\\x8b\\xab\\xf9\\x69\\xd3\\xa6\\x89\\xf2\\x96\\x85\\xe0\\x4d\\xc0\\x73\\xd9\\x6e\\\n\\x0d\\xf5\\x0b\\x40\\xfd\\x18\\xd8\\x13\\xd4\\x17\\x49\\xa8\\x26\\xfd\\x7d\\x6e\\\n\\x6e\\xee\\x71\\xbd\\x3e\\xc0\\xe1\\x3b\\x56\\x64\\x1a\\x96\\x92\\x96\\xa2\\xbb\\\n\\x9c\\x4a\\xac\\xa6\\x38\\xe3\\x88\\x31\\x0d\\x7e\\x5f\\x39\\x54\\x72\\xd5\\xd7\\\n\\x53\\xe8\\xcf\\xf3\\xac\\xb1\\x88\\xb8\\xb6\\x58\\x3c\\x2b\\xa8\\x87\\x0f\\xe8\\\n\\x6f\\x3e\\x8f\\x76\\xd2\\x54\\x66\\xca\\x9f\\xc4\\x00\\x97\\xb2\\x70\\x05\\xd3\\\n\\xca\\x5a\\xef\\x70\\xce\\x9c\\x39\\x5d\\x61\\x64\\xe0\\x92\\x25\\x4b\\xde\\xd3\\\n\\xf3\\x1a\\x4a\\x65\\x81\\x00\\x90\\x7f\\xc2\\xfc\\x4f\\x89\\x52\\x2d\\x1b\\x7b\\\n\\xef\\x41\\x52\\x47\\x43\\x34\\xd3\\x1e\\x9c\\xb1\\xbe\\x30\\xc3\\x31\\x5a\\x36\\\n\\xf1\\x96\\xd2\\x4a\\xa5\\xdd\\xd2\\x02\\x85\\xfe\\x8c\\xea\\x00\\xae\\x30\\xfd\\\n\\xfb\\xe2\\x34\\x90\\xc5\\xc1\\x4c\\x88\\xe1\\x23\\xbe\\x4d\\xff\\xe3\\x44\\xc2\\\n\\x89\\xff\\xc2\\x59\\x31\\x45\\x77\\x56\\x98\\x69\\xc0\\x57\\x9d\\x80\\x24\\x50\\\n\\xbc\\x15\\x4c\\xbf\\x3e\\x66\\xc0\\x93\\x4e\\x31\\x53\\xee\\x87\\xf1\\x9b\\x05\\\n\\x3c\\xa4\\x30\\x17\\x3d\\xf7\\x14\\xd9\\x0d\\x82\\x27\\x34\\x9e\\x3b\\x00\\xc9\\\n\\xf3\\x0c\\x4c\\x49\\x37\\x0f\\x89\\x67\\xb9\\xc7\\x7b\\x05\\xfb\\xe3\\x99\\x00\\\n\\xf7\\xb9\\xf0\\x41\\x1c\\x83\\x53\\x76\\xb2\\x47\\x9d\\xa0\\x5f\\x4d\\x33\\x22\\\n\\x36\\x1e\\x92\\xe0\\x64\\xb1\\xf8\\xd0\\x6c\\x6f\\x80\\x36\\x18\\x09\\x14\\x37\\\n\\x94\\x90\\x6c\\x67\\xbb\\x36\\x16\\x5b\\x4f\\x57\\x74\\xb2\\xdf\\xad\\xa1\\xcc\\\n\\xcd\\x73\\xc2\\xb4\\x53\\x06\\x0c\\x18\\x30\\xb0\\x6b\\x81\\xba\\x28\\xe9\\x6a\\\n\\xc4\\xa8\\xcf\\x15\\x45\\xce\\x83\\xbd\\x06\\x24\\x2b\\x82\\x02\\x31\\x7b\\x7c\\\n\\x06\\xfa\\x10\\x15\\xb1\\x19\\xf0\\x7a\\x03\\x7e\\x7b\\x99\\x41\\x3e\\x09\\x02\\\n\\x28\\x74\\x03\\xb0\\x21\\x3f\\x1e\\x20\\xa4\\xd3\\xa9\\x4f\\x1b\\xcf\\x5b\\x9f\\\n\\x30\\x7b\\x06\\x10\\x1d\\x30\\x6e\\x05\\xac\\x19\\xa4\\x33\\xc8\\xf3\\x56\\xd5\\\n\\xc8\\xa3\\x8e\\xc2\\x02\\xd3\\x71\\xc7\\x8e\\x1d\\xe3\\x00\\x7b\\x00\\x52\\xbc\\\n\\xcf\\x28\\xf4\\x78\\xa0\\x4d\\x39\\x43\\x79\\xbf\\xf6\\x03\\x79\\x94\\xba\\xbf\\\n\\x4a\\x9d\\xda\\x28\\xfa\\xa0\\xde\\x99\\xb2\\x7b\\x6d\\xf3\\x6f\\x06\\x80\\xba\\\n\\x1f\\x0f\\xfd\\x53\\xf7\\x5c\\x75\\x4c\\x7a\\x81\\x9a\\xab\\x59\\xb5\\xb1\\x4c\\\n\\xdb\\x06\\x0d\\x64\\x1f\\xdd\\x2d\\xa6\\xac\\x3d\\x8c\\xcf\\x02\\xb8\\x06\\x25\\\n\\x49\\xe8\\xc1\\xd9\\x35\\x40\\x01\\x10\\xd0\\x74\\x29\\xf5\\xd1\\x34\\x36\\x98\\\n\\xaa\\x3a\\xd9\\x12\\x1a\\x74\\xbe\\x3e\\x8e\\xb4\\x4b\\x1f\\xd5\\xf0\\x22\\x3b\\\n\\x9d\\x6c\\x9f\\x0d\\x07\\x50\\x68\\x00\\x28\\x7e\\xbc\\xc2\\x6e\\x0e\\xd7\\xb9\\\n\\xaa\\x4e\\xef\\x52\\xe4\\x6c\\x0a\\xba\\x1c\\x77\\xe9\\xae\\xf1\\x7a\\xbe\\xd9\\\n\\x94\\xe9\\x58\\x84\\x14\\x3d\\x43\\xfd\\x35\\x30\\x1d\\xe7\\x8b\\x8e\\xc1\\x3d\\\n\\x0d\\x00\\x2e\\x97\\xbe\\xaf\\x7a\\xde\\xca\\x6a\\xc1\\xd9\\x45\\xd9\\x1f\\xbc\\\n\\x95\\xeb\\x79\\xf4\\x51\\xce\\xf3\\x21\\xf6\\xce\\x25\\x7a\\x5e\\xa8\\xa9\\x01\\\n\\xa0\\x2f\\x3f\\x5e\\x7a\\x7e\\xe4\\xe8\\x60\\x3b\\xaa\\x75\\xbf\\xfb\\x65\\x18\\\n\\xcf\\xf4\\x1c\\x01\\x42\\xa6\\x59\\xa0\\x41\\xe8\\x08\\xc5\\xac\\xf0\\x6b\\x03\\\n\\xa5\\x0d\\xb5\\xbe\\x01\\xe0\\x37\\x7e\\x3c\\xf7\\x01\\xc8\\x1b\\x83\\x0a\\xd8\\\n\\xdc\\x09\\x82\\xb1\\x06\\x8d\\x3e\\x93\\x6d\\x85\\x4a\\x5f\\xaf\\x1b\\xd7\\x9a\\\n\\xa0\\x46\\xe5\\xa8\\x4e\\xfb\\x8d\\x52\\xe8\\xb0\\x6a\\x5b\\x95\\xaa\\xab\\x6e\\\n\\x77\\x6d\\x0c\\x8d\\x6e\\xd6\\x03\\x5b\\xaf\\x97\\x6f\\x69\\x86\\x80\\xe7\\xb4\\\n\\x46\\x1c\\x38\\x97\\x34\\x7c\\xec\\xc1\\xef\\x4f\\x6b\\x23\\xf1\\x6c\\xa7\\x61\\\n\\x63\\x2c\\x5a\\xe4\\x1e\\xb1\\x85\\xf5\\x61\\x1b\\x00\\x7a\\xda\\x5f\\x0d\\x79\\\n\\x60\\x75\\xc2\\x6f\\x7b\\x6a\\x53\\xa3\\xb2\\x8b\\x92\\x47\\xc4\\x16\\x27\\xdf\\\n\\xa0\\x56\\x47\\xc6\\x2b\\x12\\x79\\xd6\\x8a\\x53\\x6e\\x8c\\xa9\\x74\\x5a\\x97\\\n\\xe8\\xe3\\x37\\x00\\xc4\\x93\\x72\\x84\\xf3\\xd4\\xbe\\xb8\\xac\\x37\\x8e\\xd8\\\n\\x1c\\x59\\x99\\xb5\\x49\\xab\\x4c\\xfb\\x52\\xdd\\x50\\xf7\\x50\\x5a\\x27\\xfa\\\n\\x2e\\xa4\\xaa\\xa3\\x66\\xd4\\xf9\\x84\\xcc\\x6f\\x54\\x5c\\xed\\xa0\\x25\\x8f\\\n\\x29\\x3d\\x5a\\xc7\\xc0\\xad\\x02\\x20\\x9e\\xa4\\x60\\x9c\\x5e\\x78\\xad\\xa6\\\n\\x66\\x74\\x57\\x43\\x63\\x13\\x0f\\x13\\x1e\\x9d\\x4c\\x74\\xbf\\xea\\xed\\x54\\\n\\x4e\\x5c\\x95\\x4e\\xc7\\x37\\x6b\\x82\\x1b\\x80\\x0d\\x35\\x7a\\x2d\\xe5\\xd7\\\n\\xd1\\x5d\\x71\\x17\\x12\\xfa\\xb8\\x16\\x96\\x84\\x0b\\x87\\xc7\\x24\\x17\\x6d\\\n\\x15\\xdd\\x55\\xef\\x9e\\xe0\\xec\\xd9\\xb3\\xbb\\xb1\\x48\\x66\\x11\\xc5\\xe0\\\n\\x8f\\x01\\xbc\\x32\\xb6\\xab\\x3b\\x94\\xa8\\xd8\\x8f\\x12\\x4b\\xf3\\x46\\x17\\\n\\x27\\x67\\xb9\\x61\\x94\\x78\\x21\\x8f\\x53\\x39\\x6d\\x93\\x8e\\x89\\x5b\\xa1\\\n\\x9e\\x79\\x2d\\xa7\\xa2\\xbb\\xce\\x25\\x65\\xa1\\xbb\\xb2\\x8c\\x55\\x59\\x74\\\n\\x17\\x63\\x8a\\xe9\\x74\\x76\\x7b\\x0e\\x00\\x3f\\x03\\x50\\xe2\\x91\\x91\\xa3\\\n\\xd4\\x0a\\x6c\\xc3\\xa2\\x8a\\x8a\\x8a\\xf7\\x57\\xae\\x5c\\x79\\xb5\\xee\\xb8\\\n\\xa9\\x37\\x17\\xd0\\x77\\x60\\x83\\xc4\\x96\\x26\\xf6\\xe7\\xb8\\x14\\xc7\\x62\\\n\\x69\\xae\\x2d\\xa5\\xf8\\xb3\\xf2\\x08\\xab\\x73\\x96\\x5e\\xf7\\x5b\\x07\\xa0\\\n\\x2f\\xdd\\x95\\x5c\\xb4\\xe5\\x66\\x8c\\xf5\\xdf\\x70\\xb3\\xe1\\x55\\xa6\\xaa\\\n\\x4f\\xa7\\x86\\xac\\x09\\x80\\xd8\\xb7\\xd3\\xd9\\x1d\\x39\\x29\\x45\\x5b\\xb8\\\n\\x6b\\x03\\x94\\x5a\\xe4\\x66\\xc0\\x73\\xbb\\x6b\\xd3\\x28\\x00\\xca\\x34\\x42\\\n\\x12\\x7c\\xda\\x4f\\xfa\\x17\\x6c\\x84\\xd4\\xeb\\xb9\\xb4\\xe8\\x2e\\x6c\\x5d\\\n\\xc7\\xe2\\x25\\x8b\\xf3\\xcc\\xf6\\x69\\x66\\x4d\\x30\\x56\\x61\\xb3\\x8d\\xfa\\\n\\xab\\x27\\xe0\\x99\\xb1\\x9f\\xfc\\xb5\\x13\\x6c\\xb9\\xdd\\xaa\\x7d\\xd2\\xf1\\\n\\xfc\\x01\\x71\\x18\\xb8\\x05\\x4f\\xdd\\xe5\\x56\\x18\\xc2\\x4b\\xd8\\x25\\xd0\\\n\\x8f\\x0e\\x12\\xfb\\x29\\xe0\\x3d\\xb5\\xd9\\xf1\\x4d\\x9e\\x3c\\x39\\x4e\\xb3\\\n\\x57\\xaf\\x4f\\x2a\\xda\\x76\\x03\\x53\\x2e\\xc6\\x97\\xee\\x32\\xdb\\xa6\\xbf\\\n\\x7a\\x61\\x07\\xd0\\x97\\x0e\\x4a\\x29\\xde\\x3a\\xda\\x1f\\x43\\xc1\\x96\\xe3\\\n\\x99\\xe1\\x6a\\x4d\\xac\\x5c\\x17\\xf9\\xbb\\xd5\\x61\\x7b\\xc3\\x9f\\xee\\x0a\\\n\\xb6\\x1f\\x4f\\xba\\xb0\\x03\\x48\\x07\\x0d\\xea\\xa0\\xba\\xf6\\x93\\x27\\x23\\\n\\xa1\\xbe\\xb3\\x38\\x44\\xe3\\x72\\x7b\\xbd\\xb6\\x9d\\x26\\xb3\\x67\\xc3\\xae\\\n\\x03\\x45\\x07\\x25\\x96\\xd6\\xd7\\x41\\x1d\\x2f\\x1c\\xb0\\x3b\\xad\\xda\\x61\\\n\\x74\\xa4\\x71\\xe8\\x13\\x2a\\x68\\x89\\x89\\x89\\x72\\x20\\xe5\\x0a\\xf8\\x05\\\n\\x2f\\xe8\\xcf\\x4d\\x99\\x86\\x1d\\x40\\xd5\\x56\\xf5\\x52\\x72\\xf1\\xb6\\xaa\\\n\\xe4\\xe2\\xcf\\xec\\x5a\\x4d\\xb9\\x12\\x61\\x2b\\x57\\x78\\xb6\\x25\\x17\\x6f\\\n\\xbf\\x1a\\xa3\\x29\\x3f\\x63\\x8a\\x8d\\xe2\\x78\\x60\\xd2\\xdc\\xb9\\x73\\xdb\\\n\\x85\\x32\\xd0\\xe9\\xd3\\xa7\\xf7\\xe1\\x72\\x79\\xb3\\xef\\x9a\\xc2\\x3a\\x85\\\n\\x6b\\xcf\\x4d\\x4a\\xd1\\x41\\x7d\\xbc\\xe9\\xa0\\x97\\x5f\\x5e\\x50\\x08\\x68\\\n\\xc7\\x91\\xc2\\x08\\x0e\\x98\\x6e\\xa1\\x7e\\x02\\xe7\\x24\\xff\\x9e\\x3f\\x7f\\\n\\x7e\\x59\\x20\\x60\\x72\\x80\\x3e\\x1c\\x63\\x78\\x5f\\xed\\xf5\\xb6\\x65\\x81\\\n\\xd0\\x86\\xbb\\x6e\\xd8\\xfc\\x7c\\x80\\xe1\\xf7\\x6e\\x8c\\x27\\xf3\\x02\\x24\\\n\\x40\\xdc\\xc2\\x6e\\xa0\\x03\\x8e\\xd7\\x5f\\xca\\x33\\x12\\xaa\\x70\\x59\\x68\\\n\\x40\\x7c\\xa7\\xce\\xcf\\x55\\x5f\\xfd\\xea\\xa6\\xcf\\x8f\\x1c\\x8a\\xf5\\x3c\\\n\\xd6\\xe4\\xd2\\xf9\\x98\\x8d\\x1b\\x37\\x6e\\xe2\\x27\\x61\\x09\\x4c\\xdd\\xf3\\\n\\xd0\\xc9\\xd1\\xe7\\x5a\\x3c\\xcd\\x8d\\xb6\\xc2\\x7b\\xf2\\xae\\xbf\\x87\\x45\\\n\\x02\\x01\\x4f\\xee\\xc6\\x6c\\xe3\\x62\\xd1\\x97\\x7a\\xc3\\x66\\x52\\x0c\\x55\\\n\\xb9\\xd2\\xf6\\x81\\x00\\x49\\x78\\x98\\x3d\\xa8\\x8b\\x2c\\xbe\\x43\\xc7\\x4f\\\n\\xf1\\xc3\\xc5\\x96\\x5a\\xe2\\x55\\xe5\\xc8\\xa1\\x7a\\x4d\\x5d\\x20\\xd4\\xcb\\\n\\x6c\\xa6\\x8c\\x90\\x00\\x14\\xcf\\x05\\x57\\x25\\x7e\\xce\\xc0\\xd7\\xf1\\x8b\\\n\\xc8\\xa0\\x07\\x25\\x40\\xe2\\xd2\\x2f\\xc1\\x14\\x71\\xc1\\x70\\x2e\\x79\\x98\\\n\\xcb\\x0f\\xe7\\xbc\\x50\\x18\\xda\\xe5\\x9d\\x26\\x00\\x35\\x68\\x00\\x45\\x6a\\\n\\xb8\\xf1\\x74\\x37\\x53\\xe7\\x5d\\x7f\\xd7\\x3b\\x02\\x1d\\xc7\\xf9\\xf6\\x5f\\\n\\x7b\\x51\\x02\\xa5\\x6b\\x8e\\xfa\\x41\\x01\\x58\\x7b\\x37\\xe6\\x2e\\xf4\\x95\\\n\\xdc\\x8d\\x71\\xdd\\x2c\\x0d\\x2b\\xf3\\x5e\\x6e\\xc7\\x87\\xb5\\xfd\\x30\\x36\\\n\\x16\\x30\\x80\\x75\\xee\\xc6\\xbc\\x16\\x46\\x3e\\xdc\\x9a\\x4a\\x38\\x7f\\xd8\\\n\\x76\\x36\\xf6\\xba\\x80\\x79\\x73\\x6b\\xa4\\x89\\x5e\\x02\\x62\\xb2\\xf6\\x6e\\\n\\x4c\\x2a\\x3a\\xcb\\xef\\xc5\\xa2\\x50\\xf8\\xc7\\x04\\xaa\\xb4\\x44\\x44\\xc6\\\n\\x94\\x58\\x13\\x55\\xbc\\x48\\x2d\\x3a\\x98\\x36\\xa4\\xc5\\xc6\\x63\\xca\\xb6\\\n\\x05\\x3c\\xd3\\x77\\x63\\x82\\x1d\\x79\\xd9\\xc5\\xd2\\x1f\\x00\\xe2\\xc6\\x5e\\\n\\x5f\\xbc\\x59\\x15\\x6c\\x1b\\x4d\\x45\\xe7\\x26\\x81\\x2c\\x0c\\x5e\\xfd\\x78\\\n\\xc1\\xde\\x8d\\x09\\x76\\x10\\xb8\\xd5\\x4f\\xad\\x59\\xb3\\xc6\\xef\\xdd\\x98\\\n\\x60\\xdb\\x0f\\x27\\x9d\\x01\\xa0\\x80\\x57\\xeb\\xc7\\x73\\x3b\\x4b\\x48\\x29\\\n\\xde\\x96\\xab\\xa9\\x96\\x60\\xef\\xc6\\x84\\x93\\xd7\\x16\\xd9\\x96\\x01\\xa0\\\n\\x0f\\x3f\\x9e\\xc2\\x59\\xc2\\x53\\x70\\xdf\\xe4\\x56\\x7e\\x8b\\x44\\xcc\\x83\\\n\\x29\\x43\\x07\\xfa\\xf2\\xe3\\xd5\\x3d\\x07\\xf5\\xa0\\xff\\xce\\xbf\\x1a\\x00\\\n\\x82\\x44\\xb3\\xf8\\xf1\\xae\\xf5\\x2f\\x60\\x00\\xf8\\xb5\\x1f\\x2f\\xaf\\xde\\\n\\xaf\\x13\\x1b\\xeb\\x2c\\xe1\\x5a\\x07\\x4e\\xe7\\xdf\\xd0\\x81\\x9c\\x25\\x98\\\n\\x3a\\x07\\xd5\\x09\\x5b\\xd3\\xaf\\x11\\x30\\x24\\x10\\xfb\\xee\\x88\\xd5\\x69\\\n\\x93\\x73\\xd0\\x8d\\xfd\\xf2\\x16\\x55\\x66\\xe6\\x2e\\xaa\\x4c\\x3a\\xb7\\x73\\\n\\x03\\xe7\\xa0\\xc6\\x1f\\x36\\xb4\\x82\\x56\\x1f\\x01\\x43\\x02\\xa5\\x08\\x10\\\n\\x4f\\x92\\x34\\xbb\\x97\\xb7\\x3e\\x9b\\x2d\\x37\\xc7\\x90\\xc0\\x96\\xcb\\x62\\\n\\xcb\\xe6\\xac\\x45\\x03\\xc8\\xd6\\xd1\\xab\\xc7\\xbc\\xa1\\xfc\\xe6\\x80\\xba\\\n\\x45\\x03\\x88\\x97\\xfb\\x22\\xfe\\xc6\\xc3\\x6c\\x25\\xe5\\x46\\xbe\\x22\\x29\\\n\\xce\\xdb\\x43\\x92\\xdf\\x1c\\x60\\x79\\xeb\\xd3\\x4d\\x07\\x7a\\xab\\xd0\\x9c\\\n\\x79\\x9c\\xf5\\x9e\\x01\\xac\\x89\\x9c\\x99\\x74\\x91\\x73\\x11\\x01\\x91\\xe7\\\n\\x42\\xd2\\x33\\xcd\\xc9\\x57\\xdd\\xbe\\x5b\\x0c\\x80\\x00\\x65\\x78\\xae\\xf8\\\n\\x15\\xa8\\xeb\\x99\\x9f\\x49\\x88\\xb3\\x56\\xfe\\x48\\x47\\x62\\xbd\\x20\\xf5\\\n\\xf8\\x75\\xa6\\x2b\\xbf\\x2e\\x7d\\xbd\\x8a\\x8d\\x98\\xd1\\x62\\xa6\\x30\\x7a\\\n\\xed\\x1c\\xd2\\xe5\\x1a\\x2a\\x92\\x27\\xff\\x1f\\xe8\\x37\\x30\\xa5\\xef\\x91\\\n\\x4a\\x42\\x07\\xfd\\x59\\xbf\\x04\\x8d\\x50\\xa1\\xc5\\x48\\x20\\x63\\xfb\\x2f\\\n\\x20\\x8c\\x47\\x92\\x3a\\x01\\xcc\\xf3\\xfc\\x0e\\xee\\x69\\xf2\\x0c\\xa9\\xf4\\\n\\x32\\x76\\x59\\x60\\x5c\\x3f\\xde\\x11\\xf0\\xa1\\x6b\\xf2\\xdf\\x88\\x08\\x4f\\\n\\x5e\\x57\\x39\\x2f\\xcc\\x36\\x45\\x96\\x05\\xd0\\x5e\\xa4\\xa3\\x29\\x44\\xf9\\\n\\x0d\\x9c\\xdf\\x3e\\x01\\x4e\\xea\\x5c\\x22\\x5d\\xc1\\x99\\xf0\\x23\\x3c\\xfb\\\n\\x02\\xdc\\x6f\\x7b\\xc1\\x54\\xf0\\xcf\\x65\\x30\\xad\\x86\\x40\\xc3\\x4f\\xc3\\\n\\xee\\x01\\xbc\\xfb\\x88\\x19\\x34\\xe3\\x8b\\x3f\\x70\\x73\\xe6\\xb3\\xa0\\xac\\\n\\xe2\\xbf\\x17\\xde\\x0a\\xa1\\xcb\\x90\\x48\\xff\\x0f\\x6f\\x11\\x8a\\x97\\x1a\\\n\\x5e\\x95\\xcf\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x05\\xbc\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x64\\x00\\x00\\x00\\x64\\x08\\x06\\x00\\x00\\x00\\x70\\xe2\\x95\\x54\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0e\\xc3\\x00\\x00\\x0e\\xc3\\x01\\xc7\\x6f\\\n\\xa8\\x64\\x00\\x00\\x05\\x51\\x49\\x44\\x41\\x54\\x78\\x5e\\xed\\x9b\\x7f\\x4c\\\n\\x94\\x75\\x1c\\xc7\\xaf\\x31\\x0f\\x6b\\x6d\\xb5\\x5a\\x35\\x37\\xff\\x28\\x66\\\n\\xad\\x5f\\x98\\x59\\x4b\\x9b\\x13\\x5a\\x73\\x59\\x6b\\x08\\x98\\x57\\x6d\\xa9\\\n\\xf5\\x9f\\xcd\\x32\\xf2\\x0e\\xa8\\x70\\xcb\\x95\\xf6\\x0f\\x2d\\x5d\\x89\\xee\\\n\\x8e\\x94\\xc9\\x26\\xd3\\xd5\\x9c\\x1e\\xdc\\x09\\xc7\\x8f\\x83\\x23\\x70\\xba\\\n\\x70\\x13\\x03\\x01\\x39\\x68\\x0d\\x2e\\x53\\xc0\\x64\\x13\\x93\\xbb\\xb8\\x6f\\\n\\xcf\\x97\\x3d\\x4f\\x3c\\x0f\\xf7\\x3d\\xb8\\xe7\\xe1\\xbe\\x0f\\xcf\\x71\\xef\\\n\\xd7\\xf6\\x1a\\xdb\\xb3\\x2f\\xcf\\x7d\\xf7\\x79\\x0d\\x9e\\x2f\\x07\\x98\\x00\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x90\\x68\\x64\\x66\\xbb\\x73\\x32\\x72\\\n\\x5d\\x07\\x32\\x73\\xdd\\x0e\\xe8\\x76\\x64\\xe4\\xb8\\x76\\xbf\\x9a\\xe5\\x7c\\\n\\x44\\x1c\\x8f\\xbe\\xac\\xcd\\x3d\\xf3\\x9e\\xb0\\x09\\x02\\x95\\x66\\xe4\\xb8\\\n\\xbb\\x2c\\x96\\x9f\\x52\\xc4\\x31\\xe9\\x47\\x66\\x8e\\xab\\x9c\\xb5\\x21\\x28\\\n\\x44\\xd9\\x58\\xf5\\xb8\\x38\\x26\\xfd\\x10\\x82\\x54\\xb0\\x36\\x03\\x85\\x20\\\n\\xd9\\xee\\x74\\x71\\x4c\\xfa\\x81\\x20\\xd1\\x45\\x10\\x83\\x89\\x20\\x06\\x13\\\n\\x41\\x0c\\x26\\x82\\x18\\x4c\\x04\\x31\\x98\\xf3\\x12\\xe4\\xed\\xed\\x3e\\xe7\\\n\\x3b\\x3b\\x7e\\x21\\x30\\xd2\\x77\\x3f\\x6a\\x79\\x51\\x1c\\x93\\x7e\\x94\\x7a\\\n\\xfe\\xfa\\xbd\\xae\\x3f\\x44\\x60\\xa4\\x5f\\x97\\xf5\\x6c\\x14\\xc7\\xa4\\x1f\\\n\\x08\\x12\\x5d\\x04\\x31\\x98\\x08\\x62\\x30\\x11\\xc4\\x60\\x22\\x88\\xc1\\x9c\\\n\\x97\\x20\\x47\\x1a\\xae\\xf5\\xb0\\x36\\x03\\x43\\xc4\\xee\\xf9\\x33\\x43\\x1c\\\n\\x93\\x7e\\x54\\x76\\xde\\x76\\xb2\\x36\\x03\\x43\\xa4\\xd6\\x3f\\xae\\xff\\x0f\\\n\\x86\\xb5\\xfd\\xc1\\x0a\\xd6\\x66\\x20\\x82\\x18\\xce\\x84\\x0a\\xe2\\xea\\x19\\\n\\x27\\xeb\\x7e\\xe8\\x53\\x48\\xaf\\xc9\\xd7\\x7c\\x70\\x6c\\x30\\x62\\x8d\\xde\\\n\\x16\\x38\\xaf\\x2b\\xf6\\xa4\\xc6\\x84\\x0a\\xe2\\xec\\xbe\\x43\\x96\\x14\\x5e\\\n\\x52\\x48\\xaf\\xc9\\xd7\\x64\\xee\\xf3\\x47\\xac\\xd1\\xdb\\xcd\\x47\\x07\\x14\\\n\\x7b\\x52\\x23\\x82\\x70\\x10\\x41\\x64\\x6b\\x10\\x44\\x03\\x5a\\x83\\xd4\\xf8\\\n\\x83\\xa4\\xc8\\x35\\xa4\\x90\\x5e\\x93\\xaf\\x29\\xf6\\xde\\x88\\x58\\xa3\\xb7\\\n\\x07\\xcf\\x8e\\x2a\\xf6\\xa4\\xc6\\x84\\x0a\\x92\\x0c\\x22\\x88\\xc1\\x44\\x10\\\n\\x83\\x89\\x67\\x08\\x07\\x93\\xe6\\x19\\x82\\x53\\x16\\x27\\x10\\x24\\xba\\x08\\\n\\xc2\\xc1\\xa4\\x09\\x82\\xf7\\xb2\\x38\\xa1\\x35\\x48\\x32\\x88\\x20\\x06\\x53\\\n\\x1e\\x84\\x58\\x2c\\x29\\x03\\x85\\x85\\x4b\\xe9\\x47\\xf1\\x12\\x1f\\x10\\x24\\\n\\xba\\x52\\x90\\x81\\xfc\\xfc\\xe5\\x01\\xab\\xd5\\x1f\\xb0\\xd9\\xc8\\xa0\\xcd\\\n\\xd6\\x37\\x98\\x9f\\xbf\\x62\\x72\\x78\\x3c\\xd0\\x1a\\xa4\\xb6\\x4f\\x78\\xb0\\\n\\x77\\xdd\\x51\\x48\\xaf\\xc9\\xd7\\x54\\x0a\\xcf\\x94\\xe9\\x6b\\xf4\\xd6\\x7d\\\n\\x45\\xf9\\x5c\\x53\\x23\\x0d\\x32\\xb0\\x73\\xe7\\x73\\x42\\x84\\x21\\x1a\\xe3\\\n\\x7f\\xad\\xd6\\xe1\\x41\\xab\\xf5\\x79\\x71\\x84\\xf1\\x45\\x6b\\x90\\x64\\x38\\\n\\x65\\xb5\\x1f\\x3d\\xb9\\x29\\x22\\x06\\xef\\x28\\x08\\xc2\\xd6\\xd3\\x3d\\x4a\\\n\\xce\\x97\\x1e\\x69\\x65\\xc6\\x98\\x72\\x24\\xee\\x51\\x10\\x24\\x52\\x1a\\xc3\\\n\\xe9\\x3b\\x4f\\x4e\\x35\\xb4\\x4e\\x5c\\x28\\x39\\xd4\\xc2\\x08\\x21\\x37\\xbe\\\n\\x51\\x10\\x44\\xa9\\x14\\xe3\\xb4\\xb7\\x55\\xf2\\xdf\\xb6\\x12\\xfb\\xac\\x51\\\n\\x02\\x05\\x05\\x2b\\xc5\\x91\\xce\\x0d\\x3c\\xd4\\xa7\\x64\\xc4\\x50\\x15\\xe5\\\n\\xaa\\xcd\\xf6\\x98\\x38\\x56\\xed\\x68\\x0d\\xb2\\xe0\\xec\\x1e\\x8e\\x16\\x43\\\n\\x72\\xd6\\x28\\xc2\\xb7\\xae\\xfd\\xe2\\x58\\xb5\\x83\\x20\\x21\\x72\\xee\\xe2\\\n\\xaf\\xe4\\x56\\xf9\\x32\\x52\\xdd\\xdc\\xcc\\x0a\\x21\\x77\\xe6\\x28\\x56\\xeb\\\n\\x3e\\x71\\xac\\xda\\x49\\xf6\\x20\\x34\\x46\\xb0\\xec\\x41\\x42\\xec\\x26\\x32\\\n\\x7e\\xf8\\x81\\x58\\xa3\\xb0\\x4e\\x5f\\x23\\x57\\xf3\\xf2\\x1e\\x15\\xc7\\xaa\\\n\\x1d\\xad\\x41\\x16\\xc2\\x9b\\x8b\\xf2\\x18\\x92\\x1a\\xa3\\xcc\\xff\\x43\\x3d\\\n\\x51\\x4e\\x59\\x5b\\xca\\xd9\\xa7\\x2c\\x56\\x0c\\x79\\x94\\x9a\\x58\\xa2\\x1c\\\n\\x74\\xd0\\x6f\\x5f\\xf1\\x8b\\x41\\x59\\xc8\\x41\\x96\\xef\\xed\\x22\\xc7\\xdb\\\n\\x6f\\x2b\\xf6\\x44\\x9d\\x29\\x86\\xe4\\xe4\\x57\\x4a\\x7d\\xf5\\x65\\x46\\x88\\\n\\x29\\x1b\\x5a\\xaf\\x77\\x14\\x17\\xc7\\xf7\\x7d\\xad\\x85\\x1a\\x24\\x7d\\x8f\\\n\\xf6\\x18\\x92\\x41\\xc7\\x3d\\xff\\x9c\\xa9\\x75\\x5d\\x60\\xc6\\xf0\\xb6\\x8c\\\n\\x54\\xd6\\x9f\\x8d\\xdf\\x57\\x86\\x84\\xd6\\x20\\x46\\xff\\x23\\x87\\x13\\x97\\\n\\xe6\\x16\\x43\\x32\\x64\\x5f\\x3c\\x16\\x19\\x85\\x53\\x0c\\x8a\\xd6\\x20\\x89\\\n\\xa6\\x96\\x18\\x92\\x93\\x51\\x3c\\x55\\x62\\x14\\x8e\\x31\\x28\\xc9\\x10\\x64\\\n\\x2e\\x31\\x24\\x69\\x94\\x1a\\xcf\\xc9\\x26\\xae\\x31\\x28\\x0b\\x3d\\xc8\\xb9\\\n\\xf6\\xb6\\x39\\xc7\\xa0\\x86\\xed\\xa6\\xe1\\xf0\\x21\\x13\\x9f\\xdf\\x81\\xc8\\\n\\xe1\\xf9\\x0c\\xf9\\xf0\\x44\\x80\\xbc\\xf5\\xe3\\x1f\\x9a\\xb4\\x9e\\xba\\x16\\\n\\x71\\xff\\x68\\xee\\xf7\\xdd\\x54\\xbc\\xae\\x64\\xc2\\xc5\\xa0\\x68\\x0d\\x12\\\n\\xcb\\x29\\x2b\\x6d\\x57\\x67\\xc4\\x9a\\x78\\x1b\\xf5\\x68\\x9b\\x88\\x31\\x28\\\n\\x89\\x1c\\x84\\x77\\x8c\\x09\\x47\\xca\\xdf\\xba\\xc6\\xa0\\x24\\x6a\\x10\\xde\\\n\\x31\\xe8\\x3d\\x06\\xab\\x3f\\xb6\\x88\\x63\\xd2\\x0f\\xad\\x41\\x62\\x79\\x2f\\\n\\x6b\\x75\\xf1\\x15\\xb2\\xec\\xcb\\x4e\\xd5\\x3e\\xfd\\xd5\\xe5\\x88\\x7b\\xcb\\\n\\x7d\\xa3\\xa4\\x9f\\x7b\\x0c\\x7a\\x32\\xc3\\xdf\\x65\\xcd\\xc1\\x78\\xc7\\xa0\\\n\\xf7\\x44\\x10\\x8d\\xf2\\x88\\x41\\x45\\x10\\x0d\\xf2\\x8a\\x41\\x45\\x10\\x95\\\n\\xf2\\x8c\\x41\\x45\\x10\\x15\\xc6\\x35\\x86\\x70\\x2f\\xd6\\x6b\\x20\\x48\\x8c\\\n\\xea\\x11\\x83\\x8a\\x20\\x31\\xa8\\x57\\x0c\\x2a\\x82\\xcc\\xa2\\x9e\\x31\\xa8\\\n\\x08\\x32\\x83\\x7a\\xc7\\xa0\\x22\\x48\\x14\\xe7\\x23\\x06\\x15\\x41\\x18\\x36\\\n\\xf7\\x06\\xc8\\xd8\\xf1\\x27\\x98\\x03\\x56\\xa3\\xda\\x18\\x54\\x04\\x61\\xf8\\\n\\x5b\\xc7\\x31\\x32\\xd6\\xf2\\x14\\x09\\x96\\x3f\\xc4\\x1c\\x74\\x2c\\x6a\\x89\\\n\\x41\\x9d\\x97\\x20\\x1e\\xff\\xf8\\xb3\\x75\\x7d\\xa1\\x75\\x46\\x75\\xac\\xf5\\\n\\x19\\x37\\xf1\\xa5\\x92\\x50\\xd3\\xfd\\x81\\x89\\x32\\xf3\\x4d\\xd6\\xc0\\x67\\\n\\x72\\xc2\\xb1\\x68\\xd4\\xef\\xfd\\x66\\x1b\\xeb\\xde\\xb3\\xd9\\xd8\\x41\\xee\\\n\\x15\\xc7\\x04\\x24\\xc2\\x3e\\x73\\x2f\\x0d\\x42\\x0d\\x7b\\xcd\\xbd\\xe1\\xc3\\\n\\x77\\x0d\\xb1\\x06\\xcf\\x92\\xfe\\x72\\x89\\x94\\x9a\\xf8\\xfd\\x3f\\x60\\xb2\\\n\\x11\\x6e\\xbc\\x7b\\xa9\\x14\\x43\\x6d\\x14\\xc4\\xe0\\x40\\xb8\\x79\\xf1\\xe6\\\n\\xe9\\x41\\x62\\x89\\x82\\x18\\x9c\\xb8\\x58\\xf1\\xf0\\xcf\\xac\\x20\\xd4\\x68\\\n\\x51\\x10\\x83\\x23\\x1b\\x2c\\xaf\\x05\\xab\\x0e\\xa4\\x31\\x83\\x50\\xa7\\x47\\\n\\x41\\x0c\\x8e\\x7c\\xbf\\x3b\\x7d\\xf5\\xaa\\xf5\\xd9\\xe4\\xe5\\xd7\\x37\\x90\\\n\\x58\\xa2\\x20\\x06\\x67\\xf6\\x14\\xbe\\xe0\\xa0\\x41\\x66\\x8b\\x12\\xf6\\xa5\\\n\\xde\\x0a\\xd7\\x9b\\xcb\\x11\\x83\\x33\\x3b\\xb6\\xad\\xe9\\x95\\x82\\xc8\\xa3\\\n\\x84\\x9b\\x52\\xc7\\x84\\xa3\\x70\\x5d\\xb8\\xc9\\xbc\\x4b\\x78\\xe8\\xaf\\x21\\\n\\x6d\\xa6\\x45\\xe2\\xa7\\x00\\x9e\\x64\\x6d\\x5a\\x1f\\xa2\\x21\\xd6\\xbe\\x99\\\n\\x45\\xb6\\xbe\\xff\\xca\\x8d\\xcf\\xf3\\x56\\x79\\xbf\\x2b\\x5a\\xb9\\x9d\\x74\\\n\\x98\\xcc\\xe2\\x12\\xa0\\x17\\xf6\\xbd\\x4f\\x2e\\xf9\\xe2\\xd3\\x97\\x1a\\xbf\\\n\\x2d\\x5a\\xf1\\x89\\xe3\\xb3\\xb4\\xfb\\xc4\\xcb\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x54\\x63\\x32\\xfd\\x07\\xaa\\x33\\xb9\\x0a\\x0e\\x50\\xbd\\x75\\x00\\\n\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x0f\\x56\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x50\\x00\\x00\\x00\\x50\\x08\\x06\\x00\\x00\\x00\\x8e\\x11\\xf2\\xad\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x16\\x25\\x00\\x00\\x16\\x25\\x01\\x49\\x52\\\n\\x24\\xf0\\x00\\x00\\x01\\xcb\\x69\\x54\\x58\\x74\\x58\\x4d\\x4c\\x3a\\x63\\x6f\\\n\\x6d\\x2e\\x61\\x64\\x6f\\x62\\x65\\x2e\\x78\\x6d\\x70\\x00\\x00\\x00\\x00\\x00\\\n\\x3c\\x78\\x3a\\x78\\x6d\\x70\\x6d\\x65\\x74\\x61\\x20\\x78\\x6d\\x6c\\x6e\\x73\\\n\\x3a\\x78\\x3d\\x22\\x61\\x64\\x6f\\x62\\x65\\x3a\\x6e\\x73\\x3a\\x6d\\x65\\x74\\\n\\x61\\x2f\\x22\\x20\\x78\\x3a\\x78\\x6d\\x70\\x74\\x6b\\x3d\\x22\\x58\\x4d\\x50\\\n\\x20\\x43\\x6f\\x72\\x65\\x20\\x35\\x2e\\x34\\x2e\\x30\\x22\\x3e\\x0a\\x20\\x20\\\n\\x20\\x3c\\x72\\x64\\x66\\x3a\\x52\\x44\\x46\\x20\\x78\\x6d\\x6c\\x6e\\x73\\x3a\\\n\\x72\\x64\\x66\\x3d\\x22\\x68\\x74\\x74\\x70\\x3a\\x2f\\x2f\\x77\\x77\\x77\\x2e\\\n\\x77\\x33\\x2e\\x6f\\x72\\x67\\x2f\\x31\\x39\\x39\\x39\\x2f\\x30\\x32\\x2f\\x32\\\n\\x32\\x2d\\x72\\x64\\x66\\x2d\\x73\\x79\\x6e\\x74\\x61\\x78\\x2d\\x6e\\x73\\x23\\\n\\x22\\x3e\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x3c\\x72\\x64\\x66\\x3a\\x44\\x65\\\n\\x73\\x63\\x72\\x69\\x70\\x74\\x69\\x6f\\x6e\\x20\\x72\\x64\\x66\\x3a\\x61\\x62\\\n\\x6f\\x75\\x74\\x3d\\x22\\x22\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\\n\\x20\\x20\\x20\\x78\\x6d\\x6c\\x6e\\x73\\x3a\\x78\\x6d\\x70\\x3d\\x22\\x68\\x74\\\n\\x74\\x70\\x3a\\x2f\\x2f\\x6e\\x73\\x2e\\x61\\x64\\x6f\\x62\\x65\\x2e\\x63\\x6f\\\n\\x6d\\x2f\\x78\\x61\\x70\\x2f\\x31\\x2e\\x30\\x2f\\x22\\x0a\\x20\\x20\\x20\\x20\\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x78\\x6d\\x6c\\x6e\\x73\\x3a\\x74\\x69\\\n\\x66\\x66\\x3d\\x22\\x68\\x74\\x74\\x70\\x3a\\x2f\\x2f\\x6e\\x73\\x2e\\x61\\x64\\\n\\x6f\\x62\\x65\\x2e\\x63\\x6f\\x6d\\x2f\\x74\\x69\\x66\\x66\\x2f\\x31\\x2e\\x30\\\n\\x2f\\x22\\x3e\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x3c\\x78\\x6d\\\n\\x70\\x3a\\x43\\x72\\x65\\x61\\x74\\x6f\\x72\\x54\\x6f\\x6f\\x6c\\x3e\\x77\\x77\\\n\\x77\\x2e\\x69\\x6e\\x6b\\x73\\x63\\x61\\x70\\x65\\x2e\\x6f\\x72\\x67\\x3c\\x2f\\\n\\x78\\x6d\\x70\\x3a\\x43\\x72\\x65\\x61\\x74\\x6f\\x72\\x54\\x6f\\x6f\\x6c\\x3e\\\n\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x3c\\x74\\x69\\x66\\x66\\x3a\\\n\\x4f\\x72\\x69\\x65\\x6e\\x74\\x61\\x74\\x69\\x6f\\x6e\\x3e\\x31\\x3c\\x2f\\x74\\\n\\x69\\x66\\x66\\x3a\\x4f\\x72\\x69\\x65\\x6e\\x74\\x61\\x74\\x69\\x6f\\x6e\\x3e\\\n\\x0a\\x20\\x20\\x20\\x20\\x20\\x20\\x3c\\x2f\\x72\\x64\\x66\\x3a\\x44\\x65\\x73\\\n\\x63\\x72\\x69\\x70\\x74\\x69\\x6f\\x6e\\x3e\\x0a\\x20\\x20\\x20\\x3c\\x2f\\x72\\\n\\x64\\x66\\x3a\\x52\\x44\\x46\\x3e\\x0a\\x3c\\x2f\\x78\\x3a\\x78\\x6d\\x70\\x6d\\\n\\x65\\x74\\x61\\x3e\\x0a\\x18\\xcb\\x55\\x58\\x00\\x00\\x0d\\x14\\x49\\x44\\x41\\\n\\x54\\x78\\x5e\\xed\\x9c\\x07\\x50\\x54\\x77\\x1e\\xc7\\x7f\\x48\\x11\\x2c\\xa8\\\n\\x20\\x28\\xc5\\x42\\x51\\x0c\\xb1\\xc6\\x5e\\x2f\\x8e\\xdd\\x53\\x93\\xe8\\x89\\\n\\x46\\xc6\\x71\\x2c\\xe3\\xa9\\xa8\\x41\\x13\\x8d\\x97\\xa8\\x87\\xd1\\xd8\\x2b\\\n\\x76\\x45\\x8d\\xe7\\xd8\\x66\\x62\\x4e\\xc7\\xb1\\xeb\\xe4\\x34\\xa7\\xb1\\x8b\\\n\\x2d\\x11\\xa5\\xd8\\x00\\x1b\\x60\\x57\\x8a\\x7a\\xfb\\xfd\\xf1\\xfe\\xcb\\x03\\\n\\xde\\xb2\\x6f\\x77\\xdf\\xea\\x2e\\xc7\\xc7\\x79\\xc3\\xbe\\xb2\\xeb\\x7b\\xdf\\\n\\xfd\\xb5\\xff\\xef\\xff\\xde\\x3a\\xbc\\xd3\\x41\\x25\\x98\\x4d\\x29\\xe9\\x6f\\\n\\x09\\x66\\x52\\x22\\xa0\\x85\\x94\\x08\\x68\\x21\\x25\\x02\\x5a\\x48\\x89\\x80\\\n\\x16\\x52\\x22\\xa0\\x85\\x94\\x08\\x68\\x21\\x25\\x02\\x5a\\x88\\x4d\\x17\\xd2\\\n\\x4f\\x9e\\x3c\\xa1\\xcd\\x9b\\x37\\xd3\\xc5\\x8b\\x17\\x29\\x2b\\x2b\\x8b\\xda\\\n\\xb4\\x69\\x43\\x61\\x61\\x61\\x54\\xbe\\x7c\\x79\\xe9\\x88\\x0f\\x8f\\xcd\\x0a\\\n\\xf8\\xf0\\xe1\\x43\\xfa\\xf6\\xdb\\x6f\\xe9\\xda\\xb5\\x6b\\x2c\\x9e\\x83\\x83\\\n\\x03\\x39\\x3b\\x3b\\x53\\xb3\\x66\\xcd\\xe8\\xbb\\xef\\xbe\\x23\\x6f\\x6f\\x6f\\\n\\xe9\\xc8\\x3c\\xd2\\xd3\\xd3\\xe9\\xa7\\x2d\\xff\\xa2\\xc4\\xf8\\x44\\x5e\\x0f\\\n\\xaa\\x15\\x44\\xe1\\x7d\\xbf\\x54\\x3c\\x56\\x2b\\x6c\\x52\\xc0\\xcc\\xcc\\x4c\\\n\\x9a\\x31\\x63\\x06\\xed\\xdf\\xbf\\x9f\\xd7\\xcb\\x94\\x29\\x43\\xa5\\x4a\\x95\\\n\\xa2\\x67\\xcf\\x9e\\x91\\xa3\\xa3\\x23\\xf5\\xec\\xd9\\x93\\xc6\\x8d\\x1b\\x47\\\n\\x65\\xcb\\x96\\xe5\\xfd\\x00\\xe2\\xfd\\x73\\xc6\\x34\\xba\\xe1\\xff\\x8a\\x52\\\n\\xab\\x66\\xf3\\x36\\xdf\\x7b\\xce\\x14\\x74\\xc7\\x95\\xa6\\x4f\\x9d\\x46\\x95\\\n\\x2a\\x55\\xe2\\x6d\\x5a\\x63\\x93\\x31\\xf0\\xe0\\xc1\\x83\\xb4\\x6f\\xdf\\x3e\\\n\\x7e\\x1d\\x10\\x10\\x40\\xd1\\xd1\\xd1\\xb4\\x76\\xed\\x5a\\xaa\\x56\\xad\\x1a\\\n\\xbd\\x7d\\xfb\\x96\\x76\\xed\\xda\\x45\\x87\\x0e\\x1d\\x22\\xf9\\x77\\xbf\\x71\\\n\\xeb\\x26\\x8a\\xd7\\x89\\x77\\x33\\x20\\x9b\\x32\\xdd\\x74\\x5f\\x82\\x6e\\x49\\\n\\xd2\\xbd\\x4e\\xac\\x96\\xc9\\xfb\\xac\\x85\\xcd\\x09\\x18\\x1f\\x1f\\x4f\\x8b\\\n\\x17\\x2f\\xe6\\xd7\\x88\\x75\\x43\\x87\\x0e\\xa5\\x06\\x0d\\x1a\\x50\\x70\\x70\\\n\\x30\\x0d\\x19\\x32\\x44\\x1f\\xff\\x16\\x2e\\x5c\\xc8\\xb1\\x51\\x10\\x1f\\x77\\\n\\x83\\x92\\x7d\\x72\\x2d\\x4f\\x4e\\xb2\\x4f\\x16\\xdd\\xb8\\x76\\x5d\\x5a\\xd3\\\n\\x1e\\x9b\\x12\\xf0\\xc5\\x8b\\x17\\x6c\\x6d\\x48\\x1e\\x88\\x79\\x5d\\xba\\x74\\\n\\xe1\\x45\\x00\\xd7\\xfd\\xfc\\xf3\\xcf\\xd9\\x8d\\x5f\\xbd\\x7a\\x45\\xf3\\xe7\\\n\\xcf\\xa7\\x47\\x8f\\x1e\\xf1\\xbe\\x77\\x6f\\x75\\xd6\\x58\\xca\\x81\\x5f\\xcb\\\n\\x81\\x8d\\xc2\\x6a\\xad\\x85\\x4d\\x09\\xb8\\x63\\xc7\\x0e\\x3a\\x77\\xee\\x1c\\\n\\x8b\\x57\\xbb\\x76\\x6d\\x1a\\x36\\x6c\\x98\\xb4\\x27\\x8f\\x81\\x03\\x07\\x52\\\n\\xe3\\xc6\\x8d\\xf9\\x75\\x5c\\x5c\\x1c\\xc5\\xc4\\xc4\\x50\\x76\\x76\\x36\\x05\\\n\\xd5\\x0e\\x26\\xbf\\x64\\x27\\xde\\x2e\\xc7\\x3f\\xd5\\x85\\x6a\\x06\\x05\\xf0\\\n\\xe7\\x62\\x41\\x52\\x7a\\xf3\\xe6\\x8d\\xb4\\xd7\\x72\\x6c\\x26\\x89\\x20\\xe6\\\n\\xcd\\x99\\x33\\x87\\xad\\xd0\\xc3\\xc3\\x83\\x96\\x2d\\x5b\\x46\\xb5\\x6a\\xd5\\\n\\x92\\xf6\\xe6\\x27\\x35\\x35\\x95\\xc6\\x8f\\x1f\\xcf\\xee\\x0e\\xb1\\x07\\x0f\\\n\\x1e\\x4c\\x5f\\x7c\\xf1\\x05\\xfd\\x30\\x6b\\x06\\x25\\xd6\\xc8\\xa2\\x64\\xbf\\\n\\x6c\\x72\\xd0\\xfd\\x83\\xa0\\xc1\\x77\\xdd\\xe8\\x87\\x29\\x51\\xfa\\x24\\x82\\\n\\x44\\x94\\x94\\x94\\xc4\\xa2\\x23\\x31\\x85\\x84\\x84\\x70\\x92\\x52\\x42\\x4d\\\n\\x56\\xb7\\x09\\x01\\x21\\xc4\\xb4\\x69\\xd3\\xd8\\x3a\\xc0\\xa4\\x49\\x93\\xa8\\\n\\x4f\\x9f\\x3e\\xfc\\x1a\\x25\\xcc\\xde\\xbd\\x7b\\xe9\\xc2\\x85\\x0b\\x34\\x62\\\n\\xc4\\x08\\xf2\\xf1\\xf1\\xe1\\xed\\xa7\\x4f\\x9f\\xa6\\xaf\\xbf\\xfe\\x9a\\x5d\\\n\\x19\\xe2\\xc0\\x32\\x9b\\x37\\x6f\\x4e\\x7b\\x0e\\xed\\xa3\\x84\\xeb\\xf1\\x9c\\\n\\x60\\x6a\\x7f\\x14\\x42\\x83\\xbe\\x1c\\x68\\x30\\x03\\x43\\xc4\\xc4\\xc4\\x44\\\n\\xca\\xc8\\xc8\\x60\\xab\\xf4\\xf7\\xf7\\xa7\\x1a\\x35\\x6a\\xf0\\x3e\\xb5\\x59\\\n\\xdd\\x2a\\x02\\x9a\\x52\\x8f\\x21\\x3e\\x41\\x3c\\x64\\x5e\\x5c\\x44\\xfb\\xf6\\\n\\xed\\x69\\xea\\xd4\\xa9\\xfa\\x12\\xe5\\xd8\\xb1\\x63\\x14\\x15\\x15\\xc5\\x96\\\n\\xd3\\xa3\\x47\\x0f\\x1a\\x3b\\x76\\x2c\\x9f\\x3c\\x4e\\x1b\\x45\\xf6\\x92\\x25\\\n\\x4b\\xf8\\x38\\x5c\\x38\\x4a\\x9f\\x3a\\x75\\xea\\xf0\\xba\\x39\\xa4\\xa4\\xa4\\\n\\xf0\\x92\\x93\\x93\\x43\\x07\\xff\\x73\\x84\\x7e\\x77\\xb9\\xc5\\x99\\x5c\\x4e\\\n\\x60\\x92\\x0b\\x75\\x76\\xfd\\x98\\x22\\x47\\x8d\\xe5\\x75\\xcd\\x63\\xa0\\xf8\\\n\\xe6\\x0e\\x66\\xfd\\x41\\xbf\\x35\\x7b\\xc6\\xcb\\xc1\\xcc\\xab\\xec\\x5e\\xf8\\\n\\xa6\\x0b\\x72\\xea\\xd4\\x29\\x3a\\x72\\xe4\\x08\\x9f\\x34\\xac\\x0b\\x56\\x26\\\n\\xc4\\xbb\\x7b\\xf7\\x2e\\x2d\\x5d\\xba\\x94\\x9e\\x3f\\x7f\\x4e\\x07\\xee\\x3d\\\n\\x66\\x91\\xf7\\xec\\xd9\\xc3\\x96\\x03\\xd7\\x45\\x42\\xc1\\xe8\\x04\\xdc\\xb9\\\n\\x73\\x87\\xd6\\xad\\x5b\\xc7\\x35\\xa4\\xb9\\xf8\\xfa\\xfa\\x52\\x93\\x26\\x4d\\\n\\xa8\\x45\\x8b\\x16\\x74\\x2f\\x39\\x45\\x55\\x56\\xd7\\x5c\\x40\\x53\\xea\\xb1\\\n\\x9b\\x37\\x6f\\xd2\\x86\\x0d\\x1b\\xf8\\xa2\\x11\\x8f\\xc6\\x8c\\x19\\x43\\x35\\\n\\x6b\\xd6\\xe4\\x7d\\x2f\\x5f\\xbe\\xa4\\x4d\\x9b\\x36\\xd1\\xad\\x5b\\xb7\\x68\\\n\\x7f\\x6a\\xae\\xf0\\xbb\\x6f\\x3f\\xa0\\xd5\\xab\\x57\\x53\\x6c\\x6c\\x2c\\xaf\\\n\\xe3\\x3d\\x9d\\x3a\\x75\\xa2\\xea\\xd5\\xab\\xb3\\x25\\x1f\\x3d\\x7a\\x94\\xeb\\\n\\x43\\x4d\\xb2\\x2e\\xfc\\xd2\\x40\\x56\\x97\\x3b\\xad\\xe6\\x02\\xaa\\xad\\xc7\\\n\\x90\\x2c\\x7e\\xfe\\xf9\\x67\\x8e\\x6d\\x28\\x4b\\xc2\\xc3\\xc3\\xa9\\x55\\xab\\\n\\x56\\x6c\\x59\\x38\\x41\\x88\\xf1\\xcb\\x2f\\xbf\\xe8\\xc5\\x13\\xbc\\x7e\\xfd\\\n\\x9a\\xe6\\xce\\x9d\\xcb\\x16\\x07\\x21\\xbb\\x75\\xeb\\xc6\\x43\\x3e\\x24\\x02\\\n\\xbc\\x0f\\x02\\x9f\\x3f\\x7f\\x3e\\xdf\\x45\\x9a\\x43\\x51\\x59\\x1d\\xb1\\x55\\\n\\xa0\\xb9\\x80\\x45\\xd5\\x63\\xe2\\xa2\\x84\\xb5\\x6c\\xdd\\xba\\x95\\xd7\\x1b\\\n\\x35\\x6a\\x44\\x7d\\xfb\\xf6\\xd5\\x67\\xc3\\xe4\\xe4\\x64\\xae\\x07\\xe1\\xb6\\\n\\x05\\xc1\\x36\\x58\\xee\\xec\\xd9\\xb3\\xa9\\x7e\\xfd\\xfa\\x2c\\x38\\xde\\x3f\\\n\\x6a\\xd4\\x28\\x72\\x75\\x75\\xa5\\xfb\\xf7\\xef\\xd3\\xfa\\xf5\\xeb\\x39\\x96\\\n\\x59\\x42\\x78\\xd8\\x97\\x9c\\x30\\x6a\\x26\\x39\\x93\\x73\\x16\\x91\\x4b\\x96\\\n\\x03\\x05\\xe8\\x5e\\x07\\xdd\\x75\\xe5\\xc4\\x24\\xd0\\x5c\\x40\\x7c\\x73\\xbe\\\n\\x77\\x1d\\xa5\\xb5\\x3c\\xfc\\x52\\x9d\\xa9\\xaa\\xaf\\x0f\\x67\\x55\\x64\\xbe\\\n\\x55\\xab\\x56\\xb1\\x0b\\xe2\\xa2\\x51\\xef\\x89\\xec\\x8a\\xfd\\x2b\\x57\\xae\\\n\\xa4\\xcd\\x57\\xe2\\x79\\x5d\\x09\\x88\\x88\\x2c\\x0c\\x77\\x05\\x68\\x32\\xa0\\\n\\xe0\\x86\\x3b\\xe3\\x4b\\x42\\xbd\\x87\\x04\\x03\\x6b\\x35\\x97\\xaa\\x55\\xab\\\n\\x72\\xf9\\xd3\\xd9\\x25\\x94\\xda\\x1d\\x2f\\x4b\\x6d\\xfe\\xeb\\x46\\x5d\\x5c\\\n\\xeb\\xe6\\x2b\\x89\\x80\\xe6\\x59\\xf8\\xd2\\xa5\\x4b\\xb4\\x7a\\xdd\\x5a\\x4a\\\n\\xa8\\x91\\x59\\xa8\\x1e\\x8b\\xfa\\x7e\\x2a\\x5b\\xcf\\x9a\\x35\\x6b\\xd8\\xfd\\\n\\x60\\x3d\\x5d\\xbb\\x76\\xa5\\xc9\\x93\\x27\\x93\\x93\\x53\\xae\\xbb\\x20\\x49\\\n\\x20\\x2b\\x17\\x74\\x5d\\x25\\x06\\x7c\\x1c\\xc4\\x49\\x46\\xd4\\x8b\\x88\\x97\\\n\\x11\\x11\\x11\\xf4\\xe0\\xc1\\x03\\xb6\\xf2\\x29\\x53\\xa6\\xd0\\x67\\x9f\\x7d\\\n\\xc6\\xfb\\xac\\x85\\xa3\\xae\\x44\\x88\\x92\\x5e\\x5b\\x0c\\x2c\\xcb\\xc5\\xc5\\\n\\x85\\xba\\x77\\xed\\x46\\xcf\\xfe\\x48\\x21\\xf7\\xd8\\xe7\\x54\\xfd\\xb6\\x13\\\n\\x35\\xf7\\x09\\xa5\\x71\\x11\\x5f\\x71\\x81\\x8c\\xb8\\x77\\xe0\\xc0\\x01\\xb6\\\n\\x14\\x94\\x1c\\xa8\\xe5\\xc4\\x37\\x8a\\xd8\\x35\\x6b\\xd6\\x2c\\xfa\\x77\\xa2\\\n\\x3a\\xf7\\xeb\\xf3\\x30\\x83\\xfe\\x71\\x2b\\x81\\x5a\\xb6\\x6c\\xc9\\x63\\xe4\\\n\\x8a\\x15\\x2b\\xb2\\xe5\\xe0\\x73\\x60\\x7d\\x67\\xcf\\x9e\\xa5\\xa0\\xa0\\x20\\\n\\x7d\\x6d\\x67\\x0d\\x34\\xb3\\x40\\x14\\xc1\\xe5\\xca\\x95\\xe3\\x62\\xd4\\x10\\\n\\x27\\x4f\\x9e\\xe4\\x22\\x19\\x09\\xa4\\x72\\xe5\\xca\\x34\\x73\\xe6\\x4c\\x76\\\n\\x3f\\x64\\x5c\\x74\\x5d\\x60\\x79\\x28\\x6b\\x94\\x62\\x9f\\x21\\xba\\xf9\\x7a\\\n\\x70\\x7d\\x08\\x2b\\x86\\x45\\xa3\\x1c\\x42\\x78\\x40\\x7c\\x45\\xb9\\x83\\xac\\\n\\x8e\\x78\\x0a\\x61\\xad\\x81\\x26\\x31\\xf0\\xcc\\x99\\x33\\xe4\\xe5\\xe5\\x55\\\n\\xa4\\x78\\xa8\\x01\\x31\\x3c\\x83\\x78\\xb0\\xd2\\x7e\\xfd\\xfa\\x71\\xf0\\xaf\\\n\\x5b\\xb7\\x2e\\x8f\\x6d\\x91\\x3d\\xf1\\x39\\xa6\\x88\\x07\\xf6\\xa5\\xa4\\xb3\\\n\\x45\\xc3\\xb2\\x01\\x42\\x01\\x46\\x25\\x4d\\x9b\\x36\\x65\\x37\\xc6\\xb0\\x6d\\\n\\xd1\\xa2\\x45\\xbc\\xcf\\x1a\\x58\\x24\\x20\\x8c\\x17\\x6e\\x12\\x1a\\x1a\\x4a\\\n\\x9e\\x9e\\x9e\\xd2\\x56\\x65\\x60\\x15\\x18\\xfc\\x03\\x74\\x95\\xd1\\x9a\\x17\\\n\\xc0\\x32\\x91\\x14\\xcc\\xad\\xdf\\x50\\x47\\x6e\\xdf\\xbe\\x9d\\x93\\x07\\xa8\\\n\\x50\\xa1\\x02\\x4d\\x98\\x30\\x81\\xfb\\x87\\x38\\x47\\x8c\\x66\\x50\\x64\\x5b\\\n\\x03\\xb3\\x05\\xc4\\xb0\\x0b\\x17\\x0d\\x0b\\x92\\x77\\x86\\x95\\x40\\xa3\\xe0\\\n\\xf0\\xe1\\xc3\\x7c\\x31\\x55\\xaa\\x54\\xa1\\x6f\\xbe\\xf9\\x46\\x5f\\xb2\\x20\\\n\\x56\\x6d\\xdb\\xb6\\x8d\\xee\\xdd\\xbb\\x67\\xb2\\xf5\\x09\\xf0\\xbe\\xdb\\xb7\\\n\\x6f\\x73\\xe1\\x2d\\x46\\x22\\x7e\\x7e\\x7e\\x1c\\x5f\\x71\\x6e\\x70\\x6b\\x74\\\n\\x7a\\x8e\\x1f\\x3f\\xce\\xfb\\xb4\\xc4\\x2c\\x01\\x45\\x80\\xc6\\xb0\\x07\\x65\\\n\\x48\\x51\\xa0\\x51\\x80\\xd1\\xc6\\xd3\\xa7\\x4f\\x39\\xde\\x8d\\x1e\\x3d\\x9a\\\n\\x2f\\x4e\\x80\\x0b\\x86\\xb0\\xb0\\x9a\\xb0\\x90\\x1a\\xf4\\x57\\xff\\xca\\xd4\\\n\\x39\\xc0\\x93\\x3a\\x05\\xea\\x96\\x9a\\x1e\\xd2\\x51\\xf9\\xe9\\x13\\xec\\xcf\\\n\\xc7\\xca\\x17\\x77\\x77\\x77\\xfe\\x52\\xe5\\x43\\xb9\\xd6\\xad\\x5b\\x53\\xff\\\n\\xfe\\xfd\\xb9\\x5c\\xc2\\x1c\\xcb\\x8a\\x15\\x2b\\xb8\\x00\\xd7\\x12\\x93\\x93\\\n\\x08\\x62\\x19\\x4e\\x02\\x45\\xac\\x31\\xd0\\x29\\x41\\x63\\xe0\\xd7\\x5f\\x7f\\\n\\xe5\\x00\\x8f\\x96\\x13\\x92\\x08\\x2e\\xc8\\x10\\x0b\\xa2\\x17\\xd1\\xe1\\x9c\\\n\\x3f\\x79\\xf8\\xe7\\xf0\\xe8\\x35\\xb9\\xc7\\x24\\x72\\x9c\\x13\\x20\\x69\\x6c\\\n\\xd9\\xb2\\x85\\xb3\\xab\\x1a\\x70\\x0e\\x13\\x27\\x4e\\xe4\\x30\\x81\\x4b\\x45\\\n\\xb3\\x02\\x85\\x87\\x31\\xaf\\x51\\x8b\\x49\\x16\\x88\\xea\\x1e\\xbd\\x38\\x35\\\n\\xe2\\x01\\xd4\\x74\\xa2\\x41\\x8a\\x0b\\x46\\xa3\\xa0\\x28\\xf1\\x40\\xc1\\x11\\\n\\x80\\x12\\xa6\\x34\\x44\\xdd\\xdc\\xdc\\x78\\x16\\x0f\\xf1\\x10\\xe7\\x01\\xcf\\\n\\x41\\x7b\\x4c\\x2b\\x54\\x5b\\x20\\x6a\\x3c\\x10\\x18\\x18\\xc8\\x7f\\xd5\\x30\\\n\\x7d\\xfa\\x74\\xda\\xbd\\x7b\\x37\\x7f\\xf3\\x28\\x68\\x91\\x19\\x05\\xd8\\x06\\\n\\x97\\x2e\\x5d\\xba\\xb4\\xb4\\x25\\x0f\\x34\\x39\\x37\\x6d\\xdf\\x4c\\x97\\x63\\\n\\x2f\\xd1\\x1f\\x97\\xaf\\x16\\xb2\\x40\\xc4\\x3a\\x74\\xac\\x11\\xdb\\x60\\x59\\\n\\xc6\\xc0\\xff\\x85\\x44\\xb2\\x73\\xe7\\x4e\\x16\\xb1\\x57\\xaf\\x5e\\x5c\\xf6\\\n\\x68\\x41\\x3e\\x01\\x0d\\xf5\\xf1\\xb0\\xdd\\x58\\x8d\\xa7\\x04\\x4a\\x13\\x64\\\n\\x3f\\xfc\\x17\\x38\\x71\\x2c\\xc6\\xc0\\x31\\x28\\x4b\\x10\\x13\\xaf\\x5f\\xbf\\\n\\xce\\x25\\x89\\x21\\x01\\x31\\x77\\x82\\x21\\x9c\\xec\\x12\\x0c\\x82\\x63\\xb0\\\n\\xc0\\x03\\x30\\x51\\x35\\x7c\\xf8\\x70\\x69\\x8f\\x65\\xe8\\xfd\\xc9\\x50\\x1f\\\n\\x2f\\xea\\xc7\\x1f\\xd8\\x4a\\x4c\\x15\\x0f\\xa0\\xab\\x8c\\x72\\x05\\x96\\x66\\\n\\x4c\\x3c\\x94\\x30\\x70\\x4d\\x2c\\x6a\\x84\\x06\\x38\\x4e\\xbc\\xc7\\x58\\x09\\\n\\x84\\x63\\x51\\x23\\xa2\\x69\\xd1\\xbb\\x77\\x6f\\x69\\xab\\xe5\\xe8\\x2d\\x70\\\n\\xd1\\xf2\\x25\\x2c\\x98\\xb1\\x0e\\xac\\xa9\\x20\\xe9\\xa0\\x98\\x35\\x36\\xb0\\\n\\x47\\x03\\x41\\xb4\\xf4\\xd1\\x60\\x45\\x56\\x35\\x66\\x81\\xc8\\xec\\x1d\\x3a\\\n\\x74\\xe0\\xed\\x18\\x16\\x8e\\x1c\\x39\\x92\\x5f\\x1b\\x02\\x86\\x80\\x10\\x64\\\n\\xa8\\xc5\\x6f\\x0e\\x7a\\x01\\x23\\xc6\\x8e\\xa6\\xdf\\x5a\\xbe\\xa0\\xac\\x02\\\n\\x55\\x49\\x69\\xdd\\x75\\xb7\\xf9\\xbd\\x2c\\x2d\\x8f\\x5e\\x26\\x6d\\xb1\\x0e\\\n\\x91\\x91\\x91\\x74\\xe2\\xc4\\x09\\x76\\x33\\x53\\x05\\x84\\x75\\xb5\\x6a\\xd5\\\n\\x4a\\x3f\\x9f\\xfc\\x3e\\xd1\\xbb\\xb0\\x9a\\x3e\\x9e\\x35\\x31\\x77\\x14\\x22\\\n\\xb0\\xf4\\xfd\\x4a\\x20\\xac\\x2d\\x5c\\xba\\x82\\xc6\\x44\\x8e\\xe7\\x65\\xd1\\\n\\xb2\\x95\\xdc\\xe9\\x91\\xa3\\x17\\x50\\x6d\\x07\\xf6\\xff\\x05\\x88\\x17\\x35\\\n\\x7d\\x26\\x1d\\xcd\\xa8\\x40\\xe7\\x83\\xc2\\x79\\x39\\x9a\\xe1\\x4e\\xd3\\x67\\\n\\xce\\xce\\x37\\xb7\\xa3\\x17\\x50\\x6d\\x07\\xd6\\x1e\\xc0\\x58\\x5b\\x2c\\xe6\\\n\\xb2\\x71\\xcb\\x76\\xba\\xed\\xf1\\x09\\xa5\\x54\\x69\\x4e\\x59\\x2e\\x15\\x78\\\n\\x49\\xf6\\x6e\\x4e\\x77\\x3c\\x1b\\xeb\\xf6\\x6d\\x93\\x8e\\x92\\x09\\xa8\\xb6\\\n\\x03\\x6b\\x6f\\x98\\x2b\\x62\\x7c\\xdc\\x9f\\xf4\\xa0\\x62\\xa8\\xb4\\x96\\x07\\\n\\xb6\\xdd\\x88\\xcb\\x4d\\x76\\x40\\x2f\\x20\\x40\\xc3\\x73\\xfc\\xe8\\x48\\x4e\\\n\\x18\\x2b\\x96\\x2e\\xe7\\xcc\\x6b\\xcf\\xe2\\x09\\x4c\\xb1\\x46\\xc4\\x7b\\xcc\\\n\\xc9\\x70\\x4c\\x55\\xc8\\x09\\xba\\xbc\\x9b\\x9b\\x2f\\x24\\xf2\\x09\\x58\\x1c\\\n\\x40\\xec\\x32\\x84\\x92\\x90\\x69\\x69\\x69\\x3c\\xbc\\xc3\\x90\\x13\\xa3\\x1a\\\n\\xdc\\xf1\\x85\\x71\\x72\\x70\\x48\\x1d\\xf2\\x4e\\xbf\\x2a\\x1d\\x95\\x87\\xf7\\\n\\xe3\\xab\\xba\\x9c\\xf0\\x91\\xb4\\x56\\x0c\\x05\\x44\\xec\\x92\\xf3\\x6e\\xe8\\\n\\x16\\xe9\\x55\\x1e\\x10\\x11\\x62\\x41\\x34\\x24\\x84\\x7a\\xf5\\xea\\x71\\x53\\\n\\x17\\x13\\xea\\x0d\\x1b\\x36\\xe4\\xa9\\x81\\xf0\\xb0\\xbf\\x51\\xb5\\xb4\\x73\\\n\\xe4\\x7b\\xff\\x14\\x39\\x65\\xbf\\x24\\xe7\\x9c\\x97\\xe4\\xf7\\xe0\\x14\\x55\\\n\\x4f\\xbf\\x40\\x83\\x06\\xf4\\x97\\x3e\\xa9\\x18\\x0a\\x88\\xd8\\x55\\x10\\x25\\\n\\x11\\x71\\x8b\\x08\\x0a\\x6f\\xdc\\x77\\xa8\\x34\\x1e\\x47\\x4e\\x98\\x36\\xf5\\\n\\x7b\\xfa\\x4b\\xa5\\x27\\xf4\\x49\\x5c\\x0c\\x35\\xfc\\x33\\x86\\x3e\\xf5\\x78\\\n\\xc6\\xdb\\xe4\\x61\\xcd\\x2a\\x02\\xaa\\xa9\\x9f\\xac\\x85\\xa1\\x9a\\xd5\\x69\\\n\\xe0\\x1a\\x6a\\xd2\\xac\\x85\\xb4\\x96\\x47\\x51\\xf1\\x91\\x73\\xc2\\x98\\x51\\\n\\xb4\\x7c\\x69\\x34\\xad\\x58\\x16\\x4d\\x91\\x11\\x23\\x0a\\xe5\\x04\\x55\\xdd\\\n\\x18\\x43\\xff\\x81\\x3d\\x00\\xeb\\x73\\x58\\x37\\x80\\x7c\\x7b\\x7e\\xa5\\xb3\\\n\\xa0\\xa7\\x3a\\x11\\x46\\x1a\\xbc\\x1e\\x74\\xd8\\x4d\\xa5\\xd8\\x0b\\xe8\\x34\\\n\\x28\\x86\\x72\\x36\\xe6\\xdd\\xa8\\x29\\x17\\x49\\x0b\\x21\\x8b\\xbd\\x80\\x70\\\n\\xdb\\xb3\\xa7\\x4f\\x52\\xda\\xe4\\x2a\\xbc\\xee\\x39\\xe3\\x7e\\x21\\x81\\x2c\\\n\\x11\\xd2\\x64\\x01\\x8d\\x7d\\xe8\\xa8\\xd1\\x63\\x28\\xf6\\xa3\\x61\\x94\\xed\\\n\\x94\\xbf\\x65\\xee\\x9c\\xf5\\x9c\\x1a\\xc6\\xad\\xe7\\x58\\xa2\\x04\\x82\\xba\\\n\\x68\\xbb\\x9b\\xd3\\x4c\\x40\\x26\\x35\\x34\\xf3\\x86\\xfd\\x81\\xbb\\x7a\\x48\\\n\\x6b\\xb9\\x22\\x02\\x2d\\xac\\x51\\xf3\\x24\\x12\\x54\\x3b\\x84\\xbc\\xd2\\xae\\\n\\x48\\x6b\\x79\\x78\\x67\\x5c\\xa1\\xaa\\xbe\\x7e\\x7c\\xef\\x8b\\xa5\\x40\\x3c\\\n\\x00\\x91\\x21\\x0e\\xb8\\x7c\\xf9\\x32\\xff\\x55\\x03\\xac\\x11\\x4b\\x41\\xc3\\\n\\x50\\x12\\x0b\\xc7\\x18\\x12\\x17\\x68\\x2e\\x60\\xa7\\x4f\\xdb\\x91\\x7f\\xda\\\n\\xd9\\xc2\\xf5\\x53\\x46\\x2c\\x45\\xfc\\x7d\\x18\\x5b\\x95\\x16\\x60\\x6e\\x06\\\n\\x6d\\x7a\\xe1\\x40\\xa8\\xe1\\x4c\\x45\\x88\\xa8\\x56\\x48\\x25\\x2c\\x72\\x61\\\n\\xf1\\xed\\xdb\\x03\\x72\\x17\\x56\\xc2\\xdc\\xd8\\x68\\xb1\\x80\\xc6\\x4e\\xcc\\\n\\x9e\\x50\\x8a\\x8d\\x40\\x49\\x48\\x71\\x4c\\xb1\\x1b\\x89\\x58\\x82\\x52\\x6c\\\n\\x04\\x10\\xcb\\x90\\xa8\\x25\\x02\\xca\\x80\\x05\\x1a\\x72\\x65\\x25\\x51\\x81\\\n\\xd9\\x2e\\x8c\\x99\\x30\\x71\\x53\\xa4\\x3d\\x60\\x53\\x31\\x10\\x33\\x6c\\x68\\\n\\xfb\\xe0\\xde\\x18\\xdc\\x20\\xae\\x05\\xf2\\x3a\\xd0\\x79\\x40\\x34\\x65\\x97\\\n\\xf1\\xa2\\x77\\xe9\\x77\\xc8\\x71\\xe7\\xa4\\x42\\x75\\x20\\xee\\x21\\x04\\xf2\\\n\\x3a\\x10\\x59\\x18\\xf7\\x01\\x2a\\x51\\x54\\xac\\x36\\x25\\xee\\x81\\x82\\xc7\\\n\\x99\\xec\\xc2\\x68\\xff\\xa0\\x14\\xc1\\x53\\x41\\x5a\\x89\\x57\\x10\\xaf\\x8c\\\n\\xdc\\xdb\\xe0\\x8c\\x21\\xaf\\x03\\xd5\\xdc\\xa1\\x50\\x10\\x61\\x75\\x72\\x51\\\n\\x20\\x9c\\x92\\x78\\x05\\x8f\\x13\\x98\\x2c\\xa0\\x29\\xf7\\xc6\\x98\\x8b\\x6f\\\n\\xfa\\x85\\xdc\\x3a\\x32\\x47\\x79\\x2e\\x59\\xd4\\x92\\xb0\\x40\\xe1\\x40\\x45\\\n\\xd5\\x81\\xf2\\x5b\\x4a\\x80\\x52\\xac\\x33\\x55\\x38\\x81\\xc9\\x2e\\x6c\\x6f\\\n\\xe0\\xe2\\x71\\xfe\\xc8\\xae\\xc0\\xdc\\x58\\x67\\x88\\x7c\\x02\\xa2\\x8f\\xf7\\\n\\xd3\\xe6\\x6d\\x94\\x94\\x90\\xfb\\x88\\x41\\x60\\x70\\x2d\\x0a\\x0f\\xeb\\xc3\\\n\\xf7\\x20\\xdb\\x2b\\x42\\x40\\x81\\x5c\\x14\\x4b\\x84\\x13\\xe8\\x05\\x14\\xf3\\\n\\xa0\\xb7\\x2a\\x35\\xa2\\x47\\x95\\x72\\x1f\\xd8\\xf3\\x7a\\x7c\\x8d\\xfc\\x1e\\\n\\x9e\\xa1\\x33\\x27\\x4f\\xf0\\xba\\x3d\\x22\\x04\\x2c\\x28\\x8a\\x92\\x78\\xa6\\\n\\x08\\x27\\xd0\\x0b\\x88\\xae\\x31\\x26\\x91\\x93\\xbd\\xf3\\x7f\\x30\\xc6\\xb1\\\n\\xa2\\x11\\x69\\x4d\\x2c\\xed\\xc6\\xc8\\xb3\\xb0\\x21\\x8b\\x03\\x5a\\x58\\x9d\\\n\\x1c\\x7d\\x12\\x51\\x3b\\x0f\\x6a\\xaf\\x40\\x38\\x43\\x56\\x67\\xae\\x78\\x40\\\n\\x2f\\x20\\x1b\\xa2\\x8a\\x79\\x50\\x7b\\xc4\\x1a\\xc2\\x09\\xf4\\x02\\xa2\\x8f\\\n\\xa7\\x66\\x1e\\xd4\\xde\\x30\\x24\\x9e\\x56\\xe8\\x05\\x54\\x3b\\x0f\\x6a\\xcf\\\n\\x68\\x65\\x75\\x72\\xf4\\x02\\xaa\\x9d\\x07\\xb5\\x47\\xac\\x21\\x9c\\x40\\x2f\\\n\\x20\\x50\\x33\\x0f\\x6a\\x6f\\x58\\x4b\\x38\\x41\\x3e\\x01\\x8b\\x0b\\xc2\\xe2\\\n\\xac\\x2d\\x1e\\xb0\\x69\\x01\\xa5\\x12\\xb5\\x10\\x86\\xb6\\x7f\\x08\\x6c\\x5a\\\n\\x40\\x14\\xd3\\xf8\\x41\\x89\\xee\\x7e\\x9e\\x5c\\x40\\xe3\\x2f\\xd6\\xb1\\xdd\\\n\\x56\\x50\\xd5\\x4c\\x78\\x1f\\x28\\x8d\\x44\\xf0\\x20\\x4d\\x42\\x42\\x02\\xdf\\\n\\x57\\x83\\xed\\x18\\x71\\xe0\\xb7\\x67\\xf0\\xd4\\x13\\x9a\\xb9\\x6a\\xfb\\x81\\\n\\xd6\\xc4\\x66\\x2c\\x50\\xf4\\xf5\\xe4\\x40\\x24\\x3c\\xb5\\xd4\\xb6\\x6d\\x5b\\\n\\x6a\\xd7\\xae\\x1d\\xff\\xc5\\xba\\x52\\x27\\x5c\\xe9\\xfd\\xef\\x03\\x9b\\x11\\\n\\x10\\xd9\\x5e\\xdc\\x69\\x8f\\x27\\x95\\xd4\\x20\\x8e\\xc3\\xfb\\x50\\x41\\x7c\\\n\\x08\\x6c\\xc6\\x85\\xf1\\xab\\x44\\xf3\\xe6\\xcd\\xa3\\xc7\\x8f\\x1f\\xf3\\xfd\\\n\\x7a\\x78\\x48\\xb0\\x28\\xab\\xc2\\x69\\xe3\\x49\\x4c\\x3c\\xde\\x8a\\x1b\\x22\\\n\\xf1\\xdb\\x31\\x1d\\x3b\\x76\\x94\\xf6\\xbe\\x3f\\x6c\\x46\\x40\\x9c\\xc6\\x82\\\n\\x05\\x0b\\xf8\\xe1\\x44\\xfc\\x2c\\x80\\x1a\\x97\\xc4\\x7b\\xf0\\x63\\x13\\xe8\\\n\\x57\\xe2\\xd7\\xdc\\x3e\\x84\\x1b\\xdb\\x8c\\x80\\x02\\xb8\\x25\\x7e\\x3b\\x15\\\n\\x37\\x7a\\x1b\\x03\\xcf\\xef\\x75\\xef\\xde\\xfd\\x83\\x58\\x5e\\x2e\\x44\\xff\\\n\\x03\\x85\\x0a\\xb6\\x9b\\xb5\\x70\\x8b\\xba\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\\n\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x09\\x61\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x60\\x00\\x00\\x00\\x60\\x08\\x06\\x00\\x00\\x00\\xe2\\x98\\x77\\x38\\\n\\x00\\x00\\x00\\x04\\x73\\x42\\x49\\x54\\x08\\x08\\x08\\x08\\x7c\\x08\\x64\\x88\\\n\\x00\\x00\\x00\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x05\\x46\\x00\\x00\\x05\\x46\\\n\\x01\\xc1\\xb4\\xfa\\x1a\\x00\\x00\\x00\\x19\\x74\\x45\\x58\\x74\\x53\\x6f\\x66\\\n\\x74\\x77\\x61\\x72\\x65\\x00\\x77\\x77\\x77\\x2e\\x69\\x6e\\x6b\\x73\\x63\\x61\\\n\\x70\\x65\\x2e\\x6f\\x72\\x67\\x9b\\xee\\x3c\\x1a\\x00\\x00\\x08\\xde\\x49\\x44\\\n\\x41\\x54\\x78\\x9c\\xed\\x9c\\x7b\\x50\\x54\\xd7\\x1d\\xc7\\xbf\\xf7\\xee\\x2e\\\n\\x8f\\x65\\xd9\\x05\\x96\\xe5\\xfd\\x30\\x2a\\x2f\\x01\\x11\\xdd\\x04\\x53\\xd0\\\n\\xd4\\x4a\\x90\\xd8\\xa2\\x8e\\xb5\\x4d\\xd3\\xd4\\x4c\\x89\\x36\\x0c\\xd3\\xa6\\\n\\xad\\x71\\x3a\\x76\\x3a\\x6d\\x27\\x7d\\xcc\\xa4\\x4d\\x3b\\x65\\x1c\\x99\\x9a\\\n\\x71\\x44\\x93\\x8e\\xcd\\x84\\x5a\\x4c\\xaa\\xc6\\x04\\x89\\x99\\xc6\\xa9\\x51\\\n\\x0c\\x28\\x28\\x02\\x06\\x82\\x91\\xf7\\xfb\\xb1\\xc8\\x63\\x79\\xec\\xed\\x1f\\\n\\x3b\\x64\\x88\\xf7\\x9c\\xcb\\x65\\x1f\\xb9\\xe8\\x9e\\xcf\\x7f\\x9c\\xd7\\xfd\\\n\\xdd\\xf3\\xbd\\xe7\\x77\\x7f\\xe7\\x77\\x2e\\x0b\\x30\\x18\\x0c\\x06\\x83\\xc1\\\n\\x60\\x30\\x18\\x0c\\x06\\x83\\xc1\\x60\\x30\\x18\\x0c\\x06\\x83\\xc1\\x78\\xd8\\\n\\xe1\\x64\\xb7\\x3c\\xf0\\x61\\x32\\x0f\\x61\\x0f\\x80\\x1c\\x00\\xa1\\x00\\x82\\\n\\xdd\\x65\\xd4\\x03\\x4a\\x3f\\x04\\x74\\x83\\xe3\\xce\\xdb\\x78\\x5b\\x09\\x5e\\\n\\xc9\\xae\\x97\\xd3\\x69\\x61\\x01\\x5e\\xa8\\xd2\\xf0\\x41\\x23\\x7f\\x83\\x80\\\n\\x42\\x00\\x2a\\x67\\xad\\xf4\\x10\\x66\\x01\\x14\\xdb\\x86\\x0c\\xbf\\xc0\\x11\\\n\\xf3\\xb4\\x54\\x43\\x69\\x01\\x5e\\xfe\\x97\\x17\\x37\\x61\\x3c\\xc3\\xd9\\x9f\\\n\\x7a\\xc6\\x22\\x11\\x04\\xee\\x7d\\x61\\x58\\xbf\\x4d\\x4a\\x04\\x5e\\x6a\\x00\\\n\\x7e\\xdc\\x78\\x90\\x4d\\xbe\\xe3\\x70\\x9c\\x90\\xcb\\x07\\x5a\\x8a\\x24\\xdb\\\n\\x50\\x6b\\xec\\x3e\\xbf\\x16\\xcc\\xed\\x38\\xcb\\xac\\x4d\\xb0\\xa5\\xe2\\xd5\\\n\\x27\\x1b\\x48\\x95\\xd4\\x15\\xc0\\x43\\x28\\x00\\x9b\\x7c\\x57\\xa0\\xe2\\x39\\\n\\xfe\\x05\\x5a\\xa5\\x94\\x0b\\xca\\x76\\x83\\x31\\x9e\\x89\\x40\\x9f\\x4b\\x29\\\n\\x01\\xa2\\xdd\\x60\\x8a\\x67\\xc2\\x21\\x96\\x56\\x25\\x25\\x80\\xce\\x0d\\xa6\\\n\\x78\\x2a\\xfe\\xb4\\x0a\\xc9\\x28\\x88\\xe1\\x7e\\x98\\x00\\x0a\\xc3\\x04\\x50\\\n\\x18\\x26\\x80\\xc2\\x30\\x01\\x14\\x86\\x09\\xa0\\x30\\x4c\\x00\\x85\\x51\\xbb\\\n\\x7a\\xc0\\xd9\\x3f\\x7d\\x83\\x58\\xae\\xfa\\xe5\\x87\\x0b\\xf6\\xe5\\x39\\x0e\\\n\\xdb\\x56\\x05\\x23\\x37\\xc1\\x88\\x47\\xa3\\xf4\\x30\\xe9\\x34\\xd0\\x6a\\x54\\\n\\x10\\x04\\x01\\xad\\xc3\\x56\\x5c\\xef\\x1c\\x45\\x69\\x6d\\x0f\\x3e\\x68\\x1e\\\n\\x84\\x20\\x38\\x66\\x5f\\xa4\\xde\\x1b\\x3b\\x52\\x4c\\xc8\\x4b\\x0a\\x46\\x94\\\n\\xc1\\x1b\\x26\\x3f\\x2f\\x00\\x40\\xdf\\xd8\\x14\\xda\\x86\\xad\\x38\\xd3\\xd0\\\n\\x8f\\x77\\x6e\\xf5\\xa1\\xd3\\x62\\x75\\xec\\x02\\x8b\\xc4\\xe5\\x02\\x38\\xca\\\n\\xa6\\x15\\x81\\x38\\xb4\\x3d\\x1e\\x49\\x21\\x7e\\xc4\\xfa\\x20\\xad\\x06\\x6b\\\n\\x22\\x74\\xc8\\x37\\x87\\xa3\\xaa\\x7d\\x14\\x05\\xa7\\x1a\\x50\\xd3\\x79\\x4f\\\n\\xf6\\xf8\\xfe\\xde\\x2a\\xfc\\x21\\x67\\x05\\x0a\\x1f\\x8f\\x84\\x9a\\x17\\xe7\\\n\\x20\\x83\\xfd\\x34\\x48\\x0a\\xf1\\x43\\x4e\\x7c\\x10\\x8a\\xf2\\xe2\\x70\\xf8\\\n\\x72\\x07\\x7e\\x73\\xfe\\x33\\x8c\\x5a\\x67\\x1d\\xbe\\x27\\x39\\x2c\\x09\\x17\\\n\\xf4\\xeb\\xcd\\xcb\\x50\\xb1\\x37\\x9d\\x3a\\xf9\\xf7\\x63\\x8e\\xf2\\xc7\\xff\\\n\\x0a\\xcd\\xd8\\x91\\x6c\\x92\\xd5\\x3e\\xd0\\x57\\x8d\\x8a\\x1f\\xa5\\xe3\\xc5\\\n\\xcc\\x28\\xe2\\xe4\\xdf\\x8f\\x9a\\xe7\\xf0\\x62\\x66\\x14\\xce\\xef\\x4d\\x47\\\n\\x80\\xaf\\x7b\\x9f\\x51\\xc5\\x05\\x28\\xc8\\x88\\xc4\\xef\\x9e\\x5c\\x0e\\x4e\\\n\\xfe\\xe1\\x28\\x00\\xc0\\x57\\xc3\\xe3\\xad\\xef\\xa7\\x60\\xd3\\x8a\\x40\\xc9\\\n\\x76\\x3a\\x2f\\x15\\xca\\xf7\\xa6\\xe3\\xd1\\x28\\xfd\\xa2\\x6d\\x7b\\x2c\\x5a\\\n\\x8f\\xf2\\x3d\\xe9\\xf0\\xf3\\x72\\x5f\\x52\\x58\\x51\\x01\\x22\\xf5\\xde\\xf8\\\n\\xcb\\x37\\x57\\x3a\\xdc\\x5f\\xa3\\xe2\\x70\\x74\\x57\\x12\\x34\\x2a\\xba\\x7a\\\n\\x45\\x79\\x71\\x58\\x17\\x49\\x4d\\xc5\\x2c\\x88\\x39\\xca\\x1f\\x45\\x79\\x71\\\n\\x0e\\xf7\\x5f\\x08\\x45\\xdf\\x01\\xfb\\x37\\xc6\\x10\\x9f\\xae\\xf1\\xe9\\x59\\\n\\xfc\\xf1\\xc2\\xe7\\x38\\x5d\\xdf\\x8f\\xee\\x51\\x2b\\x56\\x87\\xfb\\xa3\\x78\\\n\\x47\\x3c\\x56\\x11\\x5c\\xd4\\xb2\\x40\\x1f\\x7c\\x2d\\xd6\\x80\\x8f\\x5a\\x86\\\n\\x45\\x75\\x4f\\x2c\\x0f\\x40\\xbe\\x39\\x82\\x78\\xed\\xe9\\x59\\x01\\x65\\x75\\\n\\xbd\\xb8\\x7c\\x77\\x04\\x1c\\x07\\x3c\\x1e\\x63\\xc0\\xce\\x94\\x10\\xa2\\x98\\\n\\xcf\\x9b\\x23\\x70\\xe2\\x5a\\x37\\x2e\\xde\\x11\\x5f\\xc3\\x59\\x14\\x13\\x80\\\n\\xe3\\x80\\x9d\\xa9\\x64\\x1f\\xfe\\xcc\\x9b\\xb7\\x70\\xb6\\xa1\\xff\\x8b\\xbf\\\n\\x3f\\x6a\\x19\\x42\\xee\\xd1\\x1a\\xd4\\xed\\xcf\\x80\\xde\\x5b\\x6c\\xf2\\x96\\\n\\x78\\x23\\x51\\x80\\x9f\\x67\\xc5\\x10\\x5d\\xdb\\xf0\\xc4\\x0c\\x9e\\x3a\\x56\\\n\\x83\\xab\\x6d\\x96\\x2f\\xca\\x0e\\x5d\\x6a\\x47\\x46\\x74\\x1b\\xce\\x3d\\xbf\\\n\\x46\\xe4\\xf7\\x39\\xce\\xfe\\xb0\\xb8\\x43\\x00\\xc5\\x5c\\x50\\xb0\\x56\\x83\\\n\\x68\\x83\\x8f\\xa8\\xbc\\xb6\\xeb\\xde\\x97\\x26\\x7f\\x8e\\x0e\\x8b\\x15\\x27\\\n\\x6f\\xf4\\x12\\xc7\\xca\\x88\\x11\\xfb\\xf7\\x48\\xbd\\x37\\xb6\\x26\\x1a\\x89\\\n\\xed\\x7f\\x7a\\xfa\\xd3\\x2f\\x4d\\xfe\\x1c\\x95\\x6d\\x16\\xfc\\xec\\xcc\\xa7\\\n\\xc4\\x3e\\x4f\\x25\\x18\\x11\\x13\\x20\\xb6\\xd7\\x59\\x14\\x13\\x20\\x54\\xe7\\\n\\x45\\x2c\\x6f\\xec\\x1d\\xa3\\xf6\\xa9\\x6a\\x1f\\x25\\x96\\x47\\xe8\\xbd\\x45\\\n\\x65\\xd9\\x71\\x41\\xc4\\x88\\xa7\\xd3\\x62\\x45\\x69\\x6d\\x0f\\xf5\\x1a\\xa5\\\n\\xb5\\x3d\\xe8\\x1e\\x9d\\x12\\x95\\xab\\x78\\x0e\\xd9\\x71\\x41\\xd4\\x7e\\x8e\\\n\\xa2\\x98\\x00\\xd3\\x36\\xf2\\x4e\\x2a\\x51\\x22\\x14\\xbd\\x33\\x38\\x41\\x2c\\\n\\x0f\\xf3\\x17\\x8b\\xf9\\x58\\x34\\x39\\xea\\xa9\\x68\\x1a\\xc4\\x0c\\xe5\\xda\\\n\\x80\\xfd\\xdd\\x50\\xd1\\x34\\x48\\xac\\xa3\\x8d\\xe9\\x0c\\x8a\\xbd\\x03\\xba\\\n\\x2c\\x53\\xb0\\x09\\x02\\xf8\\xfb\\x9c\\x74\\x5a\\xb8\\x0e\\x5b\\x13\\x8d\\x38\\\n\\xd7\\x38\\x20\\xea\\x53\\xd1\\x34\\x28\\x6b\\x47\\x0d\\x00\\x6b\\x29\\x91\\x4f\\\n\\x75\\x07\\x79\\x15\\xcd\\xe7\\x5a\\xc7\\x28\\x76\\xaf\\x0d\\x13\\x95\\xaf\\x89\\\n\\x70\\xfd\\x21\\xa1\\x62\\x2b\\xc0\\x62\\x9d\\xc1\\x8d\\x2e\\xb2\\xbb\\x79\\xfd\\\n\\xbb\\xab\\xf0\\xad\\x24\\xe7\\xbe\\x7c\\x34\\xf9\\x69\\x88\\xe5\\x2d\\x03\\xe4\\\n\\x55\\x34\\x9f\\x3b\\x43\\xe4\\x36\\xc1\\x5a\\xf2\\x98\\xce\\xa0\\xe8\\x3e\\xe0\\\n\\x58\\x55\\x27\\xb1\\xdc\\xa8\\xd5\\xe0\\x9d\\xe7\\x56\\xe3\\xe4\\x0f\\x52\\x91\\\n\\x60\\xd2\\x3a\\x34\\x76\\x80\\x2f\\x79\\xb2\\xe4\\xa4\\x16\\x2c\\x93\\x33\\x8b\\\n\\x1a\\xd3\\x19\\x14\\x15\\xa0\\xe4\\x6a\\x27\\x6e\\x76\\x93\\xf3\\x39\\x1c\\x07\\\n\\xec\\x4c\\x31\\xe1\\xc6\\xbe\\x0c\\xbc\\xf9\\x4c\\x32\\xb2\\xe3\\x82\\x44\\xee\\\n\\x4a\\x0a\\xbd\\x37\\x79\\xf7\\x3a\\x39\\xb3\\xb0\\x00\\x13\\xd3\\x36\\x62\\xb9\\\n\\x3f\\x65\\x4c\\x67\\x50\\x54\\x80\\xc9\\x19\\x1b\\xbe\\x73\\xa2\\x0e\\x3d\\xf7\\\n\\xc4\\x51\\xc7\\x1c\\x6a\\x9e\\xc3\\xd3\\x69\\xa1\\x28\\xdf\\xb3\\x06\\x75\\x2f\\\n\\x65\\x60\\x57\\x6a\\x88\\xac\\xb4\\x85\\x4a\\x46\\xce\\x87\\x86\\x8d\\x92\\x6a\\\n\\x95\\x93\\x47\\x5a\\x2c\\x8a\\xe7\\x82\\x9a\\xfa\\xc7\\x91\\x7d\\xe4\\x3a\\x35\\\n\\xc2\\x99\\x4f\\x82\\x49\\x8b\\xd2\\x67\\x53\\x70\\xf6\\x87\\x69\\x54\\x1f\\xff\\\n\\xa0\\xa1\\xb8\\x00\\x00\\x50\\xdf\\x3b\\x86\\xb5\\x07\\x3f\\xc1\\xf1\\xaa\\x2e\\\n\\xea\\xd3\\x37\\x9f\\xdc\\x04\\x23\\x2e\\x16\\xae\\x7b\\x28\\x44\\x58\\x12\\x02\\\n\\x00\\xf6\\xa8\\x68\\xef\\xbf\\x1b\\xb0\\xbe\\xb8\\x0a\\x1f\\x50\\xe2\\xf0\\xf9\\\n\\xc4\\x07\\x6b\\x51\\xf6\\xdc\\x6a\\xb7\\xb8\\x85\\xaf\\x92\\x25\\x23\\xc0\\x1c\\\n\\xd5\\x1d\\xa3\\xd8\\x52\\x52\\x83\\xf5\\xc5\\x55\\x78\\xbb\\xae\\x4f\\x72\\x45\\\n\\x64\\xc6\\x1a\\xf0\\xd2\\x86\\x98\\xaf\\xcc\\x36\\x47\\x4f\\xe1\\xa4\\x58\\x72\\\n\\x02\\xcc\\xf1\\x49\\xbb\\x05\\xbb\\x4e\\xdc\\x44\\xd2\\x5f\\xaf\\xe0\\x1f\\xd5\\\n\\x5d\\xd4\\x76\\xfb\\x36\\x44\\xc3\\x47\\x2d\\xbe\\x0d\\xeb\\x0c\\x39\\x92\\x91\\\n\\xb3\\x62\\x68\\xd1\\xd6\\xd8\\xb4\\xeb\\x4f\\xc7\\x96\\xac\\x00\\x73\\x34\\x0f\\\n\\x4c\\x20\\xff\\x64\\x03\\x0a\\xdf\\xbe\\x4d\\x5c\\x0d\\x21\\x3a\\x2f\\xac\\x8f\\\n\\x35\\x88\\xca\\x87\\x29\\xb1\\xbc\\x8f\\x66\\xe1\\x50\\xd2\\x97\\xd2\\x66\\x78\\\n\\x82\\x3c\\xa6\\x33\\x2c\\x79\\x01\\xe6\\x38\\x52\\xd9\\x81\\x37\\xaa\\xbb\\x89\\\n\\x75\\x66\\x42\\xda\\x61\\x88\\x32\\x59\\x61\\x94\\x24\\xe0\\x7c\\x82\\xb4\\xe4\\\n\\x0c\\xcd\\xd0\\x84\\xe4\\xbf\\x7b\\x39\\x84\\x62\\xb9\\xa0\\x91\\xdf\\x3f\\x01\\\n\\x1d\\xe1\\x30\\x66\\xc3\\xe1\\x6a\\x7c\\x7c\\x77\\x84\\xd8\\xe7\\x74\\x7d\\x1f\\\n\\xf2\\xcd\\xe1\\xa2\\xf2\\x50\\x42\\x32\\xae\\xb9\\x7f\\x1c\\x89\\x84\\x5d\\xb4\\\n\\x9c\\x9d\\xf5\\x4a\\x23\\xb9\\xcd\\xad\\x1e\\x7a\\xa6\\xd6\\x51\\x14\\x5b\\x01\\\n\\xb4\\xcf\\x3e\\x48\\xa9\\xe5\\x39\\x06\\xc7\\xc9\\x4f\\xb5\\x97\\x4a\\x7c\\x1b\\\n\\x95\\x84\\x7c\\x3f\\x00\\x6c\\x7c\\x24\\x60\\x41\\xdb\\x32\\x09\\x2e\\x0d\\x00\\\n\\x2a\\x5b\\xc9\\x63\\x3a\\x83\\x62\\x02\\x74\\x8c\\x90\\x05\\xc8\\x89\\xa7\\xe7\\\n\\xdc\\x69\\xe2\\x0c\\x8c\\x8b\\x5d\\xc3\\xa5\\xcf\\xc9\\xa7\\x57\\x1b\\x1e\\x09\\\n\\x40\\x5c\\x30\\x7d\\x15\\x84\\xe8\\xbc\\xb0\\x39\\x8e\\x7c\\xd0\\xff\\xdf\\x96\\\n\\x21\\x6a\\x3f\\x47\\x51\\x4c\\x80\\x0b\\xcd\\xe4\\x9b\\x79\\x36\\x3d\\x0c\\x69\\\n\\xe1\\xe4\\xb4\\x2f\\x29\\x45\\x0c\\x00\\xb7\\xfb\\xc6\\x45\\x65\\x17\\xef\\x0c\\\n\\x13\\xcb\\x55\\x3c\\x87\\xa3\\xbb\\x12\\xe1\\xab\\x11\\xdf\\x3a\\xcf\\x71\\x28\\\n\\xca\\x8b\\x83\\x96\\xf0\\x12\\xbe\\xd2\\x6a\\xc1\\x8d\\x2e\\xf9\\xdf\\x21\\xc9\\\n\\x45\\x31\\x01\\x4e\\xd7\\xf7\\x11\\xcb\\x7d\\xd4\\x3c\\x2e\\x16\\xae\\xc3\\xab\\\n\\x5b\\x57\\x62\\xdb\\xaa\\x60\\x6c\\x5e\\x19\\x84\\xed\\xc9\\x26\\x9c\\xda\\x9d\\\n\\x4a\\x3c\\x62\\x9c\\xb1\\x09\\xc4\\x8d\\x9b\\x20\\x00\\xc5\\x1f\\xb7\\x13\\xaf\\\n\\x91\\xb5\\x2c\\x00\\x97\\x7f\\x6c\\xff\\xae\\xc8\\xe0\\xa3\\x86\\x8f\\x9a\\x47\\\n\\x66\\xac\\x01\\xef\\xe6\\xa7\\xe1\\x7b\\x69\\xa1\\xc4\\x3e\\x87\\x2e\\xb5\\x2d\\\n\\xe2\\xee\\xe4\\xa3\\xd8\\x4b\\xf8\\x56\\xcf\\x18\\x4a\\x6b\\x7b\\xf0\\x34\\xe1\\\n\\x86\\x75\\x5e\\x2a\\xec\\xdf\\x18\\x83\\xfd\\x1b\\x17\\xde\\x64\\x1d\\xaf\\xea\\\n\\x22\\xba\\x20\\x00\\x78\\xed\\x4a\\x07\\xbe\\x9d\\x6a\\xc2\\xd7\\x97\\x8b\\x5d\\\n\\x4a\\x6a\\x98\\x0e\\x65\\xbb\\x53\\x65\\xd9\\xfa\\xfe\\xed\\x01\\xbc\\x25\\x71\\\n\\x8c\\xe9\\x0c\\x8a\\x86\\xa1\\x05\\xa7\\x1a\\x71\\xbd\\x73\\xe1\\x13\\x2a\\x1a\\\n\\xad\\xc3\\x93\\xf8\\xed\\xf9\\x16\\x6a\\xbd\\x4d\\x10\\x50\\x50\\xd6\\x88\\x41\\\n\\x8a\\x40\\x72\\x18\\x1c\\x9f\\xc6\\x4f\\xfe\\x43\\x3e\\xa8\\x77\\x05\\x8a\\x0a\\\n\\x30\\x6a\\x9d\\x45\\x6e\\x49\\x8d\\x43\\x2f\\xb7\\x9e\\x7b\\x53\\xc8\\x3b\\x5e\\\n\\x8b\\x5e\\x89\\x54\\x36\\x60\\xdf\\xc8\\x65\\x14\\x57\\xa1\\x59\\xc6\\x49\\xd8\\\n\\xfd\\xb4\\x8d\\x4c\\x22\\xeb\\x70\\xb5\\xac\\x4c\\xad\\xa3\\x28\\xbe\\x11\\xeb\\\n\\x1f\\x9b\\x46\\xce\\xd1\\x1a\\xec\\x3b\\xd3\\x84\\x76\\x4a\\x64\\x34\\x9f\\x59\\\n\\x9b\\x80\\x53\\x75\\x7d\\x58\\x7b\\xf0\\x2a\\xea\\x64\\xc6\\xe5\\x2d\\x83\\x13\\\n\\xc8\\xfa\\x7b\\x15\\x5e\\xbb\\xd2\\x21\\x79\\x20\\x3f\\x87\\x4d\\x10\\xf0\\xcf\\\n\\xeb\\xdd\\xd8\\x78\\xf8\\x1a\\xf1\\x45\\xee\\x4a\\xa8\\x89\\x11\\xfe\\xc0\\x05\\\n\\x87\\x52\\x4f\\xce\\x7e\\x9e\\x9e\\xb5\\xcc\\x80\\xec\\xb8\\x20\\x24\\x98\\xb4\\\n\\x08\\x9c\\xf7\\x81\\x54\\x97\\x65\\x0a\\x95\\x6d\\x16\\xbc\\xdb\\xd8\\x8f\\xbb\\\n\\x43\\x93\\x8e\\x98\\x06\\xc0\\xfe\\x25\\xdd\\xf6\\x64\\x13\\xb6\\x26\\x18\\xb1\\\n\\xc2\\xe8\\x8b\\x08\\xbd\\x37\\xd4\\x3c\\x87\\xbe\\xb1\\x69\\xb4\\x0e\\x4f\\xe2\\\n\\x6c\\x43\\x3f\\xca\\x6e\\xf6\\xa2\\xd1\\xc5\\x13\\x6f\\xfb\\xf3\\x66\\xe2\\x5c\\\n\\xbb\\x5c\\x00\\x06\\x19\\x9a\\x00\\x8a\\xbb\\x20\\x4f\\x87\\x09\\xa0\\x30\\x4c\\\n\\x00\\x85\\x61\\x02\\x28\\x0c\\x13\\x40\\x61\\x98\\x00\\x0a\\xc3\\x04\\x50\\x18\\\n\\x29\\x01\\x5c\\x7f\\xfc\\xe3\\xb9\\x50\\x13\\x5e\\x52\\x02\\xb4\\xba\\xc1\\x10\\\n\\x4f\\x85\\x3a\\x97\\x12\\x02\\x70\\xef\\xb9\\xc3\\x12\\x8f\\x44\\x10\\xce\\xd1\\\n\\xaa\\xa8\\x02\\xd8\\x78\\x5b\\x09\\x00\\xd7\\x7f\\x87\\xe1\\x79\\xcc\\xd8\\x54\\\n\\xaa\\x63\\xb4\\x4a\\xfa\\x0a\\xb0\\xff\\xf6\\xf1\\x21\\x77\\x58\\xe4\\x51\\x08\\\n\\x42\\x11\\x5e\\xd9\\xd4\\x48\\xab\\x96\\x8c\\x82\\x6c\\x43\\x86\\x03\\x02\\x84\\\n\\x72\\xd7\\x5b\\xe5\\x19\\x08\\xc0\\x7b\\x36\\xad\\xea\\x57\\x52\\x6d\\xa4\\xc3\\\n\\xd0\\x23\\xe6\\x69\\x61\\x28\\x20\\x0f\\x1c\\x8a\\x61\\xff\\x41\\x6a\\x86\\x3c\\\n\\x66\\x01\\x1c\\x14\\x86\\x0c\\xdb\\xf1\\xf2\\x26\\x49\\x37\\xee\\xc8\\xcf\\xd7\\\n\\x6f\\x01\\xb0\\x1c\\x80\\xeb\\xff\\x69\\xf6\\xc1\\x66\\x12\\xc0\\x67\\x00\\x57\\\n\\xbe\\x98\\x9f\\xaf\\x67\\x30\\x18\\x0c\\x06\\x83\\xc1\\x60\\x30\\x18\\x0c\\x06\\\n\\x83\\xc1\\x60\\x30\\x18\\x0c\\x06\\x83\\xf1\\xf0\\xf3\\x7f\\x1d\\x32\\xb2\\xaf\\\n\\xed\\xb5\\x64\\x96\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\\n\\x00\\x00\\x07\\xae\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x60\\x00\\x00\\x00\\x60\\x08\\x06\\x00\\x00\\x00\\xe2\\x98\\x77\\x38\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0e\\xc3\\x00\\x00\\x0e\\xc3\\x01\\xc7\\x6f\\\n\\xa8\\x64\\x00\\x00\\x07\\x43\\x49\\x44\\x41\\x54\\x78\\x5e\\xed\\x9c\\x5d\\x88\\\n\\x55\\x55\\x00\\x85\\x4d\\xfa\\x95\\x42\\x28\\x28\\xa2\\xa0\\xa2\\x81\\xc8\\x68\\\n\\x66\\xee\\x38\\xa3\\x32\\x54\\xfe\\xa0\\xbd\\x68\\x45\\x0f\\x52\\x44\\x4f\\xf5\\\n\\x98\\xf4\\xf7\\x24\\xda\\x43\\x68\\x1a\\xd1\\x7b\\x49\\x0f\\x65\\x49\\x45\\x3e\\\n\\x94\\x52\\x0f\\xfd\\xd9\\xff\\x6b\\xd0\\x4b\\x61\\x85\\x25\\x84\\x85\\x29\\x11\\\n\\x95\\x96\\x4e\\x5a\\x6b\\x1d\\xd7\\x65\\xc6\\xbd\\xd7\\x99\\xb9\\x33\\xf7\\x9e\\\n\\x73\\xf6\\x85\\xfd\\xc1\\xe2\\xda\\x5d\\xeb\\xec\\xbd\\xf6\\xbe\\x77\\xee\\x39\\\n\\x73\\xef\\x9d\\xe6\\x65\\x32\\x99\\x4c\\x26\\x93\\xc9\\x64\\x32\\x99\\x4c\\x26\\\n\\x93\\xc9\\x64\\x32\\x65\\x2c\\x5e\\xbc\\xf8\\x3f\\x27\\xd9\\x99\\xaa\\x71\\x9b\\\n\\x4f\\xc9\\xce\\x54\\x8d\\xdb\\x7c\\x4a\\xf6\\xb4\\x20\\xb7\\x70\\x78\\x78\\x78\\\n\\x08\\xb7\\x77\\xe1\\x3f\\xe7\\x9f\\xb9\\x37\\x69\\xe6\\xb3\\xab\\x3a\\x2f\\xd4\\\n\\x7d\\xcd\\xc2\\xcd\\x76\\x92\\x1d\\x01\\x6f\\x37\\xf4\\x15\\xf4\\x7b\\x3b\\x4b\\\n\\xb5\\x5a\\xad\\x6b\\x14\\x49\\x16\\x76\\x9c\\xda\\x19\\xe2\\x1a\\xb8\\x96\\xdd\\\n\\x8a\\xd4\\xcf\\x94\\x32\\x67\\x49\\x76\\x04\\xbc\\x6f\\xc2\\x2c\\x35\\x32\\x32\\\n\\xb2\\x4a\\x91\\x64\\x19\\x1d\\x1d\\x5d\\xed\\xba\\x43\\x5f\\x2b\\x52\\x3f\\xa6\\\n\\x4c\\x21\\xd9\\x11\\xf0\\xde\\x0e\\xb3\\x14\\x1e\\x80\\x87\\x14\\x49\\x16\\xf4\\\n\\xdc\\x10\\xf6\\xa6\\xd0\\x7d\\x8f\\x22\\xf5\\xe3\\x0a\\x51\\xb2\\x23\\x50\\xf6\\\n\\x69\\x97\\xc7\\xfd\\xcf\\x29\\x92\\x2c\\xec\\xe8\\xba\\x43\\xdb\\x15\\xa9\\x1f\\\n\\x53\\xa6\\x90\\xec\\x08\\xbc\\x8e\\xde\\xef\\xf2\\xd0\\xa7\\x8a\\x24\\x0b\\x3a\\\n\\x7e\\x16\\x74\\x2e\\x84\\x07\\xe6\\x3e\\x45\\xea\\xc7\\x15\\xa2\\x64\\x47\\x8c\\\n\\x8d\\x8d\\x0d\\xbb\\x3c\\x16\\x71\\x44\\x91\\x64\\x41\\xc7\\xa3\\xae\\x3b\\xaf\\\n\\x8a\\x14\\xa9\\x1f\\x57\\x88\\x92\\x1d\\xb1\\x6c\\xd9\\xb2\\x8b\\xb0\\x90\\x7f\\\n\\xdd\\x31\\x83\\x83\\x83\\x97\\x2b\\x96\\x1c\\x4b\\x97\\x2e\\xbd\\xc2\\x75\\xc6\\\n\\x5a\\x26\\x06\\x06\\x06\\x2e\\x50\\xac\\x7e\\x5c\\x29\\x4a\\xb6\\x05\\xa5\\xbf\\\n\\x75\\xc7\\x40\\x6b\\x14\\x49\\x0e\\x74\\xbe\\xdd\\xf4\\xe5\\x03\\xb0\\x5f\\x91\\\n\\x66\\x70\\xa5\\x28\\xd9\\x16\\xf8\\x6f\\x84\\x79\\x69\\xb3\\x22\\xc9\\x81\\x6e\\\n\\x4f\\x04\\x5d\\x0b\\xe1\\x01\\x78\\x5d\\x91\\x66\\x70\\xa5\\x28\\xd9\\x16\\xf8\\\n\\x8f\\x87\\x79\\x0a\\x8b\\x79\\x4b\\x91\\xe4\\x40\\xb7\\xbd\\xae\\x33\\xf4\\x98\\\n\\x22\\xcd\\x60\\x0a\\x15\\x92\\x6d\\xc1\\x62\\x6e\\x75\\xc7\\xe0\\xfe\\x9f\\x15\\\n\\x49\\x0e\\x74\\xfb\\xc5\\x75\\xc6\\x2f\\x67\\xe3\\x8a\\x34\\x83\\x2b\\x45\\xc9\\\n\\xb6\\xc0\\x5f\\x80\\x05\\x4d\\x84\\xc7\\x50\\x43\\x43\\x43\\x57\\x29\\x96\\x0c\\\n\\x4b\\x96\\x2c\\xb9\\xda\\x75\\xd5\\x1a\\x16\\x28\\xd6\\x0c\\x61\\xa9\\xb6\\x64\\\n\\x97\\x82\\x0c\\xdf\\x43\\x89\\x8e\\xc3\\xa2\\xee\\x56\\x24\\x19\\xd8\\xa9\\xa4\\\n\\xeb\\x97\\x8a\\x34\\x87\\x2b\\x46\\xc9\\x2e\\x05\\x99\\x17\\xc2\\x63\\xa4\\x6d\\\n\\x8a\\x24\\x03\\x3a\\x6d\\x0f\\x3a\\x16\\xc2\\x03\\xb0\\x43\\x91\\xe6\\x70\\xc5\\\n\\x28\\xd9\\xa5\\x20\\xf3\\x60\\x78\\x0c\\x85\\x45\\x7d\\xa0\\x48\\x32\\xa0\\xd7\\\n\\x87\\x61\\x4f\\x0a\\xaf\\xff\\x0f\\x28\\xd2\\x1c\\xae\\x18\\x25\\xbb\\x14\\xbd\\\n\\xa7\\xee\\x8e\\xfd\\x0b\\x3a\\x4f\\xb1\\xc6\\x59\\xb4\\x68\\xd1\\xf9\\x78\\x52\\\n\\x1c\\x0b\\x3a\\x16\\xc2\\x6f\\xf5\\x37\\x29\\xd6\\x1c\\xae\\x18\\x25\\x7b\\x3a\\\n\\xf8\\xe1\\xc6\\x6f\\xe1\\x71\\x54\\xe3\\x57\\x16\\x53\\x40\\x9f\\x5b\\xc2\\x7e\\\n\\x14\\x1e\\x94\\xa3\\xb0\\x9b\\xff\\x10\\xc9\\x95\\xa3\\x64\\x4f\\x0b\\x16\\xb1\\\n\\xc7\\x1d\\x8b\\xfb\\x37\\x29\\xd2\\x38\\xe8\\x63\\x7f\\x01\\x83\\xde\\x54\\xa4\\\n\\x59\\x4c\\xb1\\x42\\xb2\\xa7\\x05\\x1b\\xfd\\x88\\x3b\\x16\\xf7\\xbf\\xaf\\x48\\\n\\xe3\\xa0\\xcf\\xbe\\xb0\\x9f\\xb4\\x41\\x91\\x66\\x31\\xc5\\x0a\\xc9\\x9e\\x96\\\n\\xb2\\xf3\\x00\\x1e\\x80\\xe3\\x7c\\xd3\\x4e\\xb1\\xc6\\xc0\\xeb\\xff\\xc5\\xe8\\\n\\xf3\\x4f\\xd8\\x8f\\x4a\\xe2\\xf5\\x9f\\xb8\\x72\\x94\\xec\\x99\\xe0\\x79\\xe0\\\n\\x70\\x78\\x2c\\x85\\x07\\x61\\xad\\x32\\x8d\\x81\\x0e\\xeb\\x5c\\x37\\xe8\\x10\\\n\\xec\\x73\\xce\\xa4\\x1a\\xc6\\x94\\x2b\\x24\\x7b\\x46\\x90\\xdd\\x19\\x1e\\x4b\\\n\\x61\\xf1\\x8d\\x7f\\x42\\xc6\\x0e\\xae\\x1b\\xb4\\x53\\x91\\xe6\\x31\\xe5\\x0a\\\n\\xc9\\x9e\\x11\\x64\\xd7\\x87\\xc7\\x4a\\x3f\\x2a\\xd2\\x18\\xe8\\x70\\x30\\xe8\\\n\\xd4\\xd6\\x7a\\x45\\x9a\\xc7\\x94\\x2b\\x24\\x7b\\x46\\x90\\x5d\\x88\\x67\\xda\\\n\\xc9\\xf0\\x78\\xaa\\xd5\\x6a\\x0d\\x2a\\x56\\x3b\\x9c\\xdb\\x75\\x52\\xd7\\x34\\\n\\xbe\\x13\\x44\\xc2\\x82\\x6d\\xc9\\xee\\x08\\xe4\\xcb\\x3e\\x6b\\xdd\\xaa\\x48\\\n\\xed\\x60\\xfe\\x6d\\x61\\x1f\\x0a\\x9d\\x3e\\x51\\x24\\x0d\\x5c\\x49\\x4a\\x76\\\n\\x47\\x60\\x51\\x8f\\xba\\x31\\xa0\\xef\\x14\\xa9\\x1d\\xcc\\xfd\\x7d\\xd0\\xa5\\\n\\x10\\xbb\\x2a\\x92\\x06\\xae\\x24\\x25\\xbb\\x23\\xf4\\x76\\xef\\xa9\\x70\\x0c\\\n\\x0a\\x0b\\x1e\\x51\\xac\\x36\\x30\\x25\\xa6\\x8e\\xbb\\x40\\xa7\\x92\\x7b\\xbb\\\n\\xdc\\x94\\x2c\\x24\\xbb\\x63\\xb0\\xe8\\x2f\\xdc\\x38\\xb8\\xff\\x19\\x45\\x6a\\\n\\x03\\xf3\\x3e\\x1b\\xf6\\xa0\\xd0\\xe5\\x73\\x45\\xd2\\xc1\\x15\\xa5\\x64\\x77\\\n\\x0c\\x16\\x57\\xf6\\x32\\x74\\x98\\x6f\\x88\\x29\\x56\\x39\\x9c\\x0b\\x73\\xfe\\\n\\x1a\\x74\\x28\\x84\\x8e\\x0f\\x2b\\x96\\x0e\\xae\\x28\\x25\\xbb\\x63\\xf8\\xa3\\\n\\x8d\\x05\\xda\\xaf\\xab\\xe0\\x8a\\xe4\\x1e\\xc5\\x2a\\x67\\x74\\x74\\xf4\\x5e\\\n\\xd7\\x01\\xdd\\x26\\xa0\\x2b\\x15\\x4b\\x07\\x57\\x96\\x92\\x3d\\x2b\\xb0\\xc0\\\n\\x77\\xdc\\x58\\xd0\\x3e\\x45\\x2a\\x07\\x1d\\x3e\\x36\\xf3\\xf3\\x01\\xd8\\xab\\\n\\x48\\x5a\\xb8\\xb2\\x94\\xec\\x59\\x81\\x67\\xdf\\x9d\\x6e\\x2c\\xe8\\x34\\xbc\\\n\\x1b\\x14\\xab\\x0c\\xfc\\xa4\\xdd\\xc8\\xb9\\x82\\xb9\\x0b\\xe1\\x01\\x58\\xa7\\\n\\x58\\x5a\\xb8\\xb2\\x94\\xec\\x59\\xb1\\x7c\\xf9\\xf2\\x73\\x71\\xec\\xa1\\x70\\\n\\x2c\\xe9\\x45\\xc5\\x2a\\x03\\x73\\xbc\\x14\\xcc\\x59\\x08\\x9b\\xff\\x13\\xbb\\\n\\x29\\x96\\x16\\xae\\x30\\x25\\x7b\\xd6\\x60\\xb1\\x4f\\xb9\\xf1\\x70\\xff\\x04\\\n\\xce\\x13\\xd7\\x2a\\xd6\\x73\\x70\\x29\\x7c\\x1d\\xe7\\x28\\x99\\x7b\\x8b\\x62\\\n\\xe9\\xe1\\x0a\\x53\\xb2\\x67\\x0d\\x4f\\xc6\\x38\\xde\\xbe\\x05\\x8c\\x8d\\x78\\\n\\x5e\\xb1\\x9e\\x83\\xb1\\x77\\x94\\xcc\\xf9\\x37\\x94\\xde\\xc9\\xb7\\x8d\\x2b\\\n\\x4d\\xc9\\x9e\\x13\\xdc\\x68\\x37\\x26\\x74\\xa2\\x8a\\x9f\\x02\\x3e\\xfb\\x39\\\n\\x76\\x30\\x57\\x21\\x74\\x49\\xfb\\xef\\x16\\x5c\\x69\\x4a\\xf6\\x9c\\x98\\xe1\\\n\\xe5\\xa0\\xe7\\x57\\x23\\x1c\\xb3\\x64\\xae\\x93\\x38\\x31\\xa7\\xfd\\xb7\\x6b\\\n\\xae\\x38\\x25\\x7b\\xce\\x60\\xf1\\x2f\\xbb\\x71\\x29\\x78\\x3d\\xbb\\x22\\xe1\\\n\\x58\\x6e\\x0e\\xa9\\xf2\\x13\\x7f\\xd7\\x98\\xd2\\x85\\x64\\xcf\\x19\\x3c\\xf3\\\n\\x06\\x30\\x4e\\xd9\\xb9\\xe0\\x07\\xdc\\x76\\xfd\\x95\\x40\\x8e\\xa1\\xb1\\xdc\\\n\\x1c\\x7c\\xed\\xbf\\x5e\\xd1\\x74\\x71\\xe5\\x29\\xd9\\x5d\\x81\\x0d\\xd8\\xea\\\n\\xc6\\xa6\\xe0\\xbd\\xa2\\xd8\\x9c\\xe1\\x18\\x6e\\x6c\\xe9\\x49\\xc5\\xd2\\xc6\\\n\\x14\\x2f\\x24\\xbb\\x2b\\x70\\xed\\x7d\\x21\\x36\\xc9\\x3e\\x43\\x29\\x78\\x73\\\n\\x7e\\x6f\\x06\\xc7\\xda\\x6f\\x64\\x50\\xf0\\x0e\\x70\\x6e\\x45\\xd3\\xc6\\x2d\\\n\\x80\\x92\\xdd\\x35\\xd8\\x8c\\xb5\\x6e\\x7c\\xe9\\x04\\x7e\\x43\\x5e\\xad\\x68\\\n\\xc7\\xe0\\xb8\\x35\\x18\\xd7\\x7e\\x0a\\x47\\x71\\x4e\\x45\\xd3\\xc7\\x2d\\x80\\\n\\x92\\xdd\\x13\\x30\\xde\\xae\\x70\\xfc\\xb6\\xb0\\x59\\xc7\\xa0\\x8e\\x4f\\xca\\\n\\x38\\xb7\\xdc\\x81\\xfc\\x71\\x37\\x96\\xb4\\x4b\\xd1\\xfe\\xc0\\x2c\\xa0\\x90\\\n\\xec\\x9e\\x30\\x3e\\x3e\\x7e\\x09\\x36\\xad\\xec\\xef\\xca\\xa8\\x53\\xf0\\xb7\\\n\\x4c\\xf7\\xb2\\xa1\\x3f\\x0e\\xe4\\x39\\xc5\\x7e\\xf0\\x43\\xc1\\xdf\\xcf\\xef\\\n\\x02\\xe9\\x90\\xfe\\xc0\\x2d\\x84\\x92\\xdd\\x33\\xb0\\x39\\x37\\x63\\xdc\\xb3\\\n\\xfe\\xff\\x12\\x46\\xfc\\x16\\xc3\\x46\\x65\\x17\\x50\\xfa\\xf7\\x46\\x79\\xee\\\n\\x98\\x42\\xc8\\x1d\\xe1\\x95\\x97\\xa6\\xeb\\x1f\\xdc\\x62\\x28\\xd9\\x3d\\x05\\\n\\x9b\\xb4\\x0a\\xb2\\xdf\\x54\\xee\\x46\\x1c\\x13\\x5a\\xa9\\x69\\xfa\\x0b\\xb7\\\n\\x20\\x4a\\x76\\xcf\\xc1\\xd8\\x2b\\xa0\\x3f\\xa7\\xce\\xd5\\x8d\\xb0\\xf1\\x7f\\\n\\xe0\\x99\\x7f\\x9b\\x86\\xef\\x3f\\xdc\\xa2\\x28\\xd9\\x95\\x80\\x4d\\x23\\xa5\\\n\\x97\\xa7\\x9d\\x8a\\x63\\xe0\\x2a\\xaa\\xa5\\x61\\xfb\\x13\\xb7\\x30\\x4a\\x76\\\n\\x65\\x8c\\x8d\\x8d\\x5d\\x86\\x0d\\x7c\\xcd\\xcd\\xdd\\x81\\x4e\\xe3\\xd8\\x57\\\n\\x71\\x62\\xbe\\x54\\xc3\\xf5\\x2f\\x66\\x71\\x85\\x64\\x57\\x0e\\x36\\x72\\x25\\\n\\x64\\x3f\\x46\\x74\\x42\\xf6\\x23\\xdc\\xae\\xd0\\xe1\\xfd\\x4f\\xb8\\xc0\\xb6\\\n\\x64\\xd7\\x06\\xbf\\x2e\\x8e\\x79\\x37\\x63\\x83\\xdf\\xc3\\xed\\x41\\xdc\\xf2\\\n\\xc4\\xca\\x13\\x36\\xaf\\x7e\\xde\\xc5\\xbf\\x37\\x25\\xf3\\x95\\xf2\\x5e\\xc2\\\n\\xcd\\x76\\x92\\x1d\\xe1\\xb2\\x94\\xec\\x08\\x97\\xa5\\x64\\x47\\xb8\\x2c\\x25\\\n\\x3b\\xc2\\x65\\x29\\xd9\\x11\\x2e\\x4b\\xc9\\xae\\x1f\\x57\\x86\\x92\\x1d\\xe1\\\n\\xb2\\x94\\xec\\x08\\x97\\xa5\\x64\\x47\\xb8\\x2c\\x25\\x3b\\xc2\\x65\\x29\\xd9\\\n\\x11\\x2e\\x4b\\xc9\\xae\\x1f\\x57\\x86\\x92\\x1d\\xe1\\xb2\\x94\\xec\\x08\\x97\\\n\\xa5\\x64\\x47\\xb8\\x2c\\x25\\x3b\\xc2\\x65\\x29\\xd9\\x11\\x2e\\x4b\\xc9\\xae\\\n\\x1f\\x57\\x86\\x92\\x1d\\xe1\\xb2\\x94\\xec\\x08\\x97\\xa5\\x64\\x47\\xb8\\x2c\\\n\\x25\\x3b\\xc2\\x65\\x29\\xd9\\x11\\x2e\\x4b\\xc9\\xae\\x1f\\x57\\x86\\x92\\x1d\\\n\\xe1\\xb2\\x94\\xec\\x08\\x97\\xa5\\x64\\x47\\xb8\\x2c\\x25\\x3b\\xc2\\x65\\x29\\\n\\xd9\\x11\\x2e\\x4b\\xc9\\xae\\x1f\\x57\\x86\\x92\\x1d\\xe1\\xb2\\x94\\xec\\x08\\\n\\x97\\xa5\\x64\\x47\\xb8\\x2c\\x25\\x3b\\xc2\\x65\\x29\\xd9\\x11\\x2e\\x4b\\xc9\\\n\\xae\\x1f\\x57\\x86\\x92\\x9d\\xa9\\x1a\\xb7\\xf9\\x94\\xec\\x4c\\xd5\\xb8\\xcd\\\n\\xa7\\x64\\x67\\xaa\\xc6\\x6d\\x3e\\x25\\x3b\\x53\\x35\\x6e\\xf3\\x29\\xd9\\x99\\\n\\xaa\\x71\\x9b\\x4f\\xc9\\xce\\x54\\x8d\\xdb\\xfc\\xac\\x49\\x69\\x9b\\xaa\\xc3\\\n\\x4d\\x9a\\x35\\x29\\x6d\\x53\\x75\\xb8\\x49\\xb3\\x26\\xa5\\x6d\\xaa\\x0e\\x37\\\n\\x69\\xd6\\xa4\\xb4\\x4d\\xd5\\xe1\\x26\\xcd\\x9a\\x94\\xb6\\xa9\\x3a\\xdc\\xa4\\\n\\x59\\x93\\xd2\\x36\\x65\\x32\\x99\\x4c\\x26\\x93\\xc9\\x64\\x32\\x99\\x4c\\x26\\\n\\x93\\xc9\\x64\\x32\\x01\\xf3\\xe6\\xfd\\x0f\\x73\\xc4\\xd2\\x7b\\x5b\\xe3\\xdc\\\n\\x36\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x08\\x93\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x60\\x00\\x00\\x00\\x60\\x08\\x06\\x00\\x00\\x00\\xe2\\x98\\x77\\x38\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0e\\xc3\\x00\\x00\\x0e\\xc3\\x01\\xc7\\x6f\\\n\\xa8\\x64\\x00\\x00\\x08\\x28\\x49\\x44\\x41\\x54\\x78\\x5e\\xed\\x9c\\x5b\\x6c\\\n\\x14\\x55\\x18\\xc7\\x8f\\x46\\x4d\\xf4\\x51\\xe3\\x2d\\x21\\xde\\x82\\xfa\\x22\\\n\\x08\\x8a\\x8a\\xd2\\x62\\x62\\x10\\x2f\\x51\\xc1\\x90\\x68\\x7c\\x50\\x78\\xd2\\\n\\x68\\x7c\\x35\\x10\\x7d\\x21\\x31\\x26\\x5e\\x82\\x0a\\xde\\xc3\\x83\\x94\\x9b\\\n\\x85\\x96\\xd2\\x2b\\xdb\\x16\\xdb\\xd2\\x76\\x67\\xbb\\xb3\\xdb\\x42\\x09\\x5d\\\n\\x42\\x29\\xdd\\xee\\x6e\\x4b\\xbb\\x5b\\xa1\\xc4\\x08\\xc6\\x1a\\xdd\\xe3\\xf9\\\n\\x86\\x19\\x38\\x73\\xfa\\x75\\x67\\x77\\x76\\xdb\\xce\\xd6\\xef\\x9f\\xfc\\xd2\\\n\\x65\\xd9\\x99\\xd9\\xf3\\x3f\\x67\\xce\\xf9\\xce\\x37\\xe7\\x2c\\x23\\x91\\x48\\\n\\x24\\x12\\x89\\x44\\x22\\x91\\x48\\x24\\x12\\x89\\x44\\x22\\x91\\x48\\x24\\x12\\\n\\x89\\x44\\x22\\x91\\x48\\x24\\x12\\x89\\x44\\x22\\x91\\x48\\x24\\x4c\\xed\\xe1\\\n\\xf1\\x3b\\xb5\\x70\\xf2\\x0d\\x2d\\x94\\xdc\\x26\\x68\\xf2\\xeb\\xc9\\x01\\xf1\\\n\\x77\\x42\\xfc\\xfd\\x1b\\x30\\x5f\\xc3\\x7b\\xe2\\xff\\x52\\x5f\\xc3\\x67\\x75\\\n\\x3d\\x75\\x87\\x79\\x38\\xc9\\x8d\\x74\\x7d\\xe4\\x96\\xce\\x70\\xea\\x7d\\x61\\\n\\x6a\\x58\\x0b\\xa5\\xb8\\x3b\\x92\\x61\\x38\\x47\\x20\\x90\\xb8\\xd9\\x3c\\x2d\\\n\\xc9\\x49\\xc1\\xe0\\xb9\\x05\\xd0\\x8a\\x05\\x97\\x70\\x53\\x73\\x47\\x6f\\x8d\\\n\\xf0\\xc1\\x0d\\xab\\xf9\\xd0\\xe2\\x6b\\xf9\\xe0\\x43\\x2c\\x6b\\x52\\x8f\\x30\\\n\\xce\\x4b\\x67\\x87\\x74\\x29\\x9b\\x14\\x4c\\xa4\\x4b\\xd8\\x49\\x41\\xb5\\x78\\\n\\xfd\\x49\\x7a\\x25\\x7b\\x96\\x3f\\xca\\x6e\\x32\\xad\\x99\\x59\\xf5\\xf5\\xf5\\\n\\xdd\\xa0\\xe9\\xa9\\x8d\\x85\\x34\\x5e\\x45\\x6f\\xee\\xe5\\xb1\\x75\\xcb\\x78\\\n\\x14\\x31\\x7b\\x3a\\x2e\\x3c\\x86\\x1b\\x36\\x5b\\x88\\x8a\\xf8\\x53\\x54\\xc8\\\n\\x6e\\xa8\\x0c\\xd3\\xaa\\xc2\\xcb\\x1f\\xfa\\xed\\x41\\xd1\\x87\\x1f\\xc5\\x4c\\\n\\x03\\x44\\xa5\\xf0\\x96\\x8e\\x51\\x5e\\xd7\\x9c\\xe0\\x15\\x75\\x43\\x7c\\x6f\\\n\\xd5\\x20\\x2f\\xdb\\x3f\\xc0\\x77\\xec\\x3b\\x6d\\xb0\\xab\\x62\\xc0\\x78\\xef\\\n\\x40\\xfd\\x10\\xaf\\x6f\\x1e\\xe6\\x6d\\xda\\x18\\x7a\\x1e\\x8b\\x13\\xdb\\xb6\\\n\\xf1\\xd8\\x92\\xeb\\x50\\xc3\\x31\\x2e\\x3d\\x81\\x9b\\x33\\x07\\x74\\xa7\\x57\\\n\\xb0\\x97\\x4d\\xdb\\x0a\\x23\\x7f\\x28\\xb5\\x4e\\xeb\\x1a\\x43\\x5b\\x7d\\x47\\\n\\x60\\x8c\\xd7\\x36\\xc5\\xf9\\xae\\xca\\x01\\xfe\\x73\\xf9\\xe9\\x9c\\xd8\\x73\\\n\\x60\\x50\\x54\\x46\\x82\\x77\\x06\\x93\\x53\\xce\\x0b\\xe8\\xcd\\xc7\\x78\\xe2\\\n\\xe9\\xdb\\x51\\xc3\\x55\\x62\\x8b\\x18\\xff\\x67\\x05\\x6a\\xc8\\x9c\\x20\\xee\\\n\\x8a\\x3a\\xfe\\x34\\xbb\\xc7\\xb4\\xd0\\xbd\\x02\\xe1\\xe4\\x3b\\x9a\\x3e\\xf6\\\n\\xaf\\x6a\\x0e\\x98\\x76\\xf0\\x50\\xdc\\x68\\xdd\\x98\\xb9\\xb9\\xf0\\xcb\\xc1\\\n\\x41\\xdb\\xb9\\x65\\xba\\x82\\xc3\\x3c\\xfe\\xdc\\x7d\\xa8\\xe9\\x2a\\xa3\\x4b\\\n\\x71\\x33\\xe6\\x0a\\xd1\\x2d\\x5d\\xe0\\x25\\x6c\\xad\\x69\\x65\\xee\\x12\\xdd\\\n\\xca\\xbb\\x98\\x29\\x4d\\x6d\\x23\\x7c\\xa7\\xe8\\x52\\x30\\x33\\xdd\\xd0\\xd8\\\n\\x3a\\x32\\xe5\\x1a\\x32\\x01\\x7d\\x94\\xc7\\x5f\\xb8\\x1f\\x35\\x5d\\xe5\\xe2\\\n\\x72\\xdc\\x8c\\xb9\\x42\\xdc\\x09\\x69\\x51\\x11\\x1f\\x99\\x96\\x66\\x2f\\x2d\\\n\\x98\\x5c\\xab\\x05\\x47\\xd3\\xaa\\x19\\xd0\\xea\\x31\\x13\\xdd\\xb2\\xa7\\xea\\\n\\x8c\\x31\\x7e\\xa8\\xd7\\x51\\x31\\xee\\x84\\xd2\\x5b\\x50\\xd3\\x65\\xe2\\x8b\\\n\\x8d\\x42\\xa3\\x66\\xcc\\x25\\xe2\\x3b\\x7d\\x69\\x5a\\xeb\\x2c\\x18\\x70\\x03\\\n\\xda\\xf0\\xa4\\x6c\\x00\\x98\\x04\\x83\\x2b\\x66\\x62\\x3e\\xc0\\xdd\\x24\\x5f\\\n\\x27\\x13\\xba\\xaf\\x9b\\xc7\\x96\\x3a\\x0f\\xcc\\x73\\x1d\\x15\\x65\\x60\\x93\\\n\\x69\\xf1\\xf4\\xea\\xee\\xe6\\xd7\\xeb\\xed\\xfd\\x43\\x6a\\xe1\\xf7\\xd7\\x45\\\n\\x51\\x03\\xf3\\x01\\xa2\\x22\\xf5\\x3a\\x4e\\x9c\\xf8\\xe6\\x5b\\xc7\\x10\\x35\\\n\\xe6\\xdd\\xbb\\x20\\xed\\x38\\x26\\x74\\x37\\x76\\x7f\\xa6\\x16\\xba\\xda\\x17\\\n\\x43\\x0d\\xcc\\x97\\x5c\\x5a\\xbf\\x4c\\x6c\\xcd\\x22\\xd4\\x78\\x99\\xdf\\x1f\\\n\\xc7\\x4d\\x98\\x6b\\x44\\x25\\x4c\\xf0\\x15\\xec\\x2e\\xd3\\x6e\\xbb\\x60\\x86\\\n\\x1b\\x08\\x24\\xfe\\x91\\x0b\\x0b\\x26\\x61\\xe6\\xe5\\x8b\\x9b\\xd6\\x6f\\xa1\\\n\\xfb\\x7a\\xc4\\x8c\\xf9\\x1a\\xd4\\x78\\x8b\\xe1\\x87\\x71\\x03\\xbc\\x80\\xa8\\\n\\x84\\x3a\\xd3\\x72\\xbb\\x8e\\x55\\xb5\\xd4\\xca\\x05\\x85\\x50\\xb3\\x90\\xd1\\\n\\x8e\\x4c\\x53\\xdb\\x59\\x9b\\xa9\\xb9\\x32\\xb4\\xe1\\x39\\xd4\\x78\\x99\\xc9\\\n\\xa7\\x70\\x03\\xbc\\x80\\x98\\x35\\xbf\\x68\\xda\\x7e\\x59\\x1d\\x1d\\xa7\\x6f\\\n\\x0d\\x68\\x71\\x5b\\xbc\\x7f\\xd0\\x57\\xd8\\x88\\xc7\\x22\\x53\\xdc\\x9f\\x2d\\\n\\xfa\\xe1\\xe3\\x3c\\xba\\x28\\xf3\\x5d\\x70\\x7e\\x19\\x5e\\x78\\x2f\\x20\\xee\\\n\\x82\\xb0\\x69\\xfd\\x65\\xf5\\xed\\xae\\xf8\\x4e\\x2e\\x20\\xcc\\x70\\x0b\\x31\\\n\\xc9\\xc2\\x68\\x3e\\x92\\x5f\\xeb\\xb7\\x88\\x3d\\xbf\\x10\\x35\\xde\\xc2\\xcb\\\n\\xdd\\x90\\x41\\x09\\x5b\\x65\\xda\\xcf\\x58\\x4f\\x43\\xd7\\x79\\xb9\\x70\\x35\\\n\\x4d\\xde\\x6d\\xfd\\x16\\x91\\x2d\\x5f\\xa0\\xc6\\xcb\\x78\\x29\\x3d\\xa1\\x02\\\n\\x09\\x3c\\xc3\\xfc\\x53\\x3b\\xf7\\xdd\\x2b\\x17\\x0c\\x62\\x7e\\x37\\xb9\\x9d\\\n\\x6c\\x38\\x7c\\xc4\\x5d\\xe4\\x73\\x44\\x1b\\xe5\\x0d\\x87\\x13\\xf6\\xf7\\xbb\\\n\\x46\\x1d\\x07\\x63\\xaf\\xcd\\x8c\\x65\\x44\\x05\\x5c\\x4c\\x2f\\x67\\x37\\xb2\\\n\\xfe\\x9f\\x7e\\xfa\\x54\\x2e\\x58\\x4b\\xe7\\x28\\x6a\\x5e\\xbe\\xe4\\xda\\xfa\\\n\\xdb\\x45\\x37\\x08\\x99\\x53\\x38\\xce\\x3a\\x47\\xab\\xdf\\x9e\\x45\\x8d\\xaf\\\n\\xcc\\x9c\\xac\\x9b\\xf0\\xee\\xa4\\xec\\x32\\xd0\\x0d\\x45\\x76\\xfd\\x62\\x7b\\\n\\xa2\\x05\\x29\\x65\\xd9\\xb8\\x42\\xd1\\xdc\\xee\\xdc\\xf7\\x43\\xe4\\xe5\\x6b\\\n\\x19\\xe1\\xfb\\x6a\\xa2\\xe8\\x18\\x04\\xdf\\x4d\\xfe\\x7c\\xf4\\xad\\x55\\xa8\\\n\\xf1\\x16\\xb3\\xf9\\xc0\\xc6\\x0d\\xe2\\x2e\\xf8\\x98\\x1d\\xaf\\xf4\\x8d\\xcb\\\n\\x85\\xaa\\xac\\x2f\\x7c\\xca\\xa1\\xbc\\x7a\\xfa\\xd6\\x0f\\x5d\\x1e\\xcc\\x37\\\n\\x2a\\x6a\\x87\\x1c\\x07\\x7e\\x48\\x87\\xc8\\xc7\\x9e\\xda\\xbc\\x09\\x35\\xde\\\n\\x62\\x64\\x09\\x5e\\x70\\xaf\\x20\\x2a\\xa0\\x9a\\x85\\x1b\\x7b\\xfe\\x96\\x0b\\\n\\xb5\\xb7\\xea\\x0c\\x5a\\xf8\\x7c\\x38\\xac\\xb4\\x7e\\x7f\\x28\\x69\\x44\\x43\\\n\\x07\\x1a\\x86\\x78\\xd9\\xbe\\xec\\xc7\\x1b\\x75\\x02\\xd7\\xbb\\xbd\\x0c\\x35\\\n\\xde\\x02\\x92\\x73\\x58\\xc1\\xbd\\x82\\x08\\x47\\x23\\x2c\\xd8\\xde\\x6f\\xcb\\\n\\x7a\\xee\\xdc\\x5f\\xd8\\x01\\xb8\\xbc\\x3a\\x7a\\xe5\\xdc\\xbf\\x76\\x9c\\x35\\\n\\xe6\\x17\\x6e\\x27\\x78\\xf0\\x94\\x4d\\xfe\\xae\\xe1\\x83\\x6d\\xa8\\xf1\\x16\\\n\\x90\\x17\\xc2\\x0a\\xee\\x15\\xc4\\x1d\\xf0\\x1b\\x0b\\x04\\xec\\x91\\x49\\xa1\\\n\\xe3\\x7f\\x88\\x5e\\x6a\\x1a\\x13\\x7c\\x77\\x65\\xfe\\x77\\xd6\\x0e\\x71\\xb7\\\n\\xc8\\xdf\\xb5\\xab\\xfd\\x0c\\x6a\\xbc\\x05\\x24\\xee\\xb0\\x82\\x7b\\x05\\x51\\\n\\x01\\x7f\\x4d\\xad\\x80\\xf2\\xfc\\xef\\x00\\x30\\x1b\\x4c\\x07\\xf3\\xb1\\xff\\\n\\x77\\x0b\\x34\\x0e\\xf9\\xbb\\xce\\x8b\\x0a\\x50\\xbb\\x20\\xb8\\xcd\\xb1\\xc2\\\n\\x3b\\x01\\xdd\\x0a\\x74\\x2f\\xd0\\xcd\\x58\\xe7\\x82\\xee\\x07\\xfb\\xac\\x5b\\\n\\xa0\\x7b\\x94\\xbf\\xeb\\xbc\\xe8\\x82\\xd4\\x41\\x18\\x9e\\x52\\x61\\x85\\xc7\\\n\\x80\\x01\\x14\\x06\\x52\\x18\\x50\\x61\\x60\\x95\\xcf\\x03\\x03\\x2f\\x76\\x4c\\\n\\x3e\\xcc\\xbb\\x41\\xb8\\x84\\x9d\\x64\\xc7\\x2b\\x1a\\x6c\\x61\\xa8\\xd3\\x93\\\n\\x2f\\xe8\\x06\\x20\\x64\\x84\\xd0\\x31\\xd3\\xe3\\x44\\x08\\x3d\\xb1\\xe3\\xf3\\\n\\x01\\x42\\x64\\xf9\\x1a\\xa7\\x36\\x6f\\x44\\x8d\\xb7\\x28\\x82\\x30\\xb4\\x86\\\n\\x45\\xca\\xf6\\xf4\\xc8\\x85\\x82\\xa5\\x22\\x6a\\xc1\\xc1\\x74\\x98\\x1c\\xc1\\\n\\x24\\x69\\xba\\x65\\x24\\x32\\x30\\xe9\\x52\\xcf\\x51\\x08\\xea\\x95\\x74\\x44\\\n\\xf4\\xcd\\x22\\x9f\\x88\\x95\\xb2\\x4f\\x58\\xff\\x0f\\xdf\\xdb\\x52\\x11\\xad\\\n\\xfe\\xab\\xa9\\x08\\x48\\x03\\x40\\x3a\\x00\\xd2\\x02\\xf2\\x67\\x9c\\x90\\xd3\\\n\\x07\\x85\\xa4\\xa5\\xd3\\x3e\\x9f\\x28\\xf6\\x54\\x84\\xa8\\x80\\xd5\\x6c\\x60\\\n\\xfb\\xf6\\x85\\x72\\xa1\\x00\\x88\\x5e\\x20\\x01\\xa6\\xbe\\x9f\\x0d\\x90\\x70\\\n\\xc3\\xcc\\xcb\\x97\\xdd\\x07\\x06\\xec\\x5d\\x5e\\xb1\\x27\\xe3\\x4a\\xd9\\x25\\\n\\x23\\x19\\x07\\xea\\x69\\x08\\x4c\\xc8\\x26\\xe6\\xc3\\x4c\\xb5\\xfe\\x9a\\xc6\\\n\\xb8\\xed\\x3a\\x91\\x2d\\x9f\\xa3\\xa6\\xcb\\x78\\x3a\\x1d\\x5d\\xca\\xf6\\x1a\\\n\\xe6\\x83\\x22\\x65\\x7b\\x7f\\x94\\x0b\\xe7\\x16\\x88\\x86\\x30\\xf3\\xf2\\x05\\\n\\xc6\\x20\\x78\\x48\\x24\\x5f\\xab\\xd8\\x1f\\xc8\\xd8\\x16\\xf3\\x1e\\x3d\\x74\\\n\\x74\\xca\\x23\\x49\\x37\\xcc\\x54\\xeb\\x87\\xf9\\x85\\x7c\\x9d\\x50\\x73\\x6f\\\n\\x51\\x3f\\x92\\x14\\x74\\x9b\\xd6\\x5f\\x55\\x6f\\x45\\x63\\x83\\x5c\\xc8\\x5c\\\n\\x81\\x07\\xed\\x98\\x79\\xf9\\x02\\x2b\\xab\\xd5\\xc8\\x2b\\xba\\xfe\\x59\\xd4\\\n\\x74\\x19\\x4f\\x3f\\x94\\x2f\\x61\\x2f\\x99\\xb6\\x5f\\x55\\xb0\\x6d\\x78\\x41\\\n\\x97\\x3f\\x66\\x5b\\x96\\x92\\x0b\\x30\\x49\\xc2\\x0c\\xcc\\x17\\x75\\xfd\\x50\\\n\\xc8\\xd7\\xcd\\x87\\x1c\\x5a\\x7f\\x51\\x2e\\x4b\\x01\\xf5\\xd4\\x05\\xbe\\x90\\\n\\x0b\\x9b\\x2d\\x33\\xb5\\x7e\\x08\\x16\\x85\\xa9\\xd7\\x8a\\xbd\\xf2\\x10\\x6a\\\n\\xba\\x8c\\x67\\x17\\x66\\x95\\xb0\\x0b\\xe9\\x27\\xd9\\xdd\\xa6\\xdd\\x53\\x65\\\n\\x2c\\x4d\\x6c\\x89\\xc4\\xd5\\x42\\x3b\\x31\\x13\\xad\\x1f\\x96\\x43\\xaa\\xd7\\\n\\xe9\\xdb\\xba\\x6d\\x7e\\x2f\\x4d\\x04\\x75\\xe8\\xe3\\x0f\\x04\\x02\\x09\\xdb\\\n\\xe2\\xdc\\x4c\\xcc\\x44\\xeb\\x87\\x74\\x88\\x9a\\xe6\\x08\\x1d\\x0a\\x65\\xb5\\\n\\x6b\\xa6\\xa8\\x17\\xe7\\x5a\\xf2\\x07\\xcf\\xae\\xc1\\x96\\xa7\\xab\\x80\\x49\\\n\\xb9\\x24\\xef\\xb2\\xa1\\x5a\\x89\\x78\\x80\\xff\\xd5\\xf2\\x74\\x4b\\x62\\xa6\\\n\\xf9\\x9e\\x6a\\x84\\x0a\\x6c\\xae\\xc0\\x4c\\x74\\x03\\x44\\x3b\\x4d\\xc8\\xb2\\\n\\x15\\x63\\x83\\x86\\x43\\xcc\\x6f\\xe1\\xd1\\x0d\\x1a\\x1f\\x9a\\x96\\xe6\\x2e\\\n\\x2d\\x94\\x7c\\x1b\\xdb\\xa2\\x64\\x51\\x88\\xb8\\x1f\\x26\\x59\\x30\\xd8\\x62\\\n\\x49\\x3e\\xa3\\xe5\\xaf\\xbe\\x17\\x35\\x5b\\x65\\x6c\\xbe\\x6d\\x51\\xb2\\xe4\\\n\\x0f\\x27\\xd7\\x68\\xfa\\xe8\\x1f\\xaa\\x39\\x00\\x98\\x06\\x4b\\x45\\x60\\xc3\\\n\\x1d\\x66\\x6e\\x26\\x60\\xf1\\x17\\x6c\\xf0\\x53\\x67\\xb8\\x16\\x7a\\xd3\\x51\\\n\\x9e\\x58\\x79\\x1b\\x6a\\xb6\\x8a\\x07\\x37\\xe9\\xd5\\x4e\\xbb\\x0c\\xdd\\x8d\\\n\\xba\\xba\\xc6\\xef\\xcf\\xb4\\x4d\\x15\\x80\\xad\\xa7\\x90\\x39\\x85\\xad\\xa8\\\n\\x10\\x15\\x41\\x97\\x02\\xad\\x1b\\x80\\x27\\x59\\xf0\\x5e\\xa5\\x18\\x5c\\xa1\\\n\\xc2\\x20\\xab\\x99\\xe9\\x59\\xc2\\x89\\xad\\x5b\\xb3\\xda\\x0d\\x63\\x71\\xc9\\\n\\x23\\x5d\\x8f\\x68\\xf5\\xa1\\x29\\x2b\\x9f\\x0b\\x25\\x08\\x51\\xfd\\xa1\\xd4\\\n\\x07\\x9a\\x9e\\x44\\xef\\x86\\x42\\x00\\x1b\\xb5\\xe3\\xaf\\x2e\\x2d\\xae\\x8d\\\n\\xda\\xb0\\xc4\\x10\\x36\\x6a\\x97\\xb2\\x67\\x4c\\xab\\x66\\x56\\xf0\\x23\\x1b\\\n\\xc2\\xac\\x2d\\x9a\\x9e\\xba\\xa8\\x1a\\xe8\\x16\\xf8\\xa9\\x82\\xe8\\xfa\\x55\\\n\\x8e\\xe9\\x65\\x95\\x59\\xff\\xa9\\x82\\x12\\x76\\x4e\\xfc\\x8d\\x08\\xaa\\xc4\\\n\\xeb\\x8f\\x61\\x69\\xe1\\x95\\x94\\xf2\\x6c\\x0b\\x7e\\x60\\xc3\\xf8\\xb1\\x0e\\\n\\x3d\\x15\\x14\\xdd\\x93\\x63\\xc8\\xaa\\x62\\x1e\\x13\\xa0\\x1f\\xeb\\x28\\x80\\\n\\x34\\x6d\\xec\\x36\\x7f\\x68\\xec\\x75\\xd1\\xaf\\x7f\\xe5\\x0f\\x25\\x7d\\xa2\\\n\\x9b\\x3a\\x25\\xba\\xab\\xf3\\xe2\\xdf\\x93\\x06\\xe2\\xf5\\xe5\\xf7\\x92\\x3e\\\n\\xf8\\x4c\\xa7\\x3e\\xfe\\x1a\\x1c\\x63\\x1e\\x4e\\x22\\x91\\x48\\x24\\x12\\x89\\\n\\x44\\x22\\x91\\x48\\x24\\x12\\x89\\x44\\x22\\x91\\x48\\x24\\x12\\x89\\x44\\x22\\\n\\x91\\x48\\x24\\x12\\x89\\x44\\x22\\x91\\x48\\xf3\\x48\\x8c\\xfd\\x07\\x77\\x34\\\n\\x8d\\x3f\\x12\\x58\\x25\\xd1\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\\n\\x60\\x82\\\n\\x00\\x00\\x09\\x1e\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x60\\x00\\x00\\x00\\x60\\x08\\x06\\x00\\x00\\x00\\xe2\\x98\\x77\\x38\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0e\\xc3\\x00\\x00\\x0e\\xc3\\x01\\xc7\\x6f\\\n\\xa8\\x64\\x00\\x00\\x08\\xb3\\x49\\x44\\x41\\x54\\x78\\x5e\\xed\\x9c\\xd9\\x6f\\\n\\x1b\\x55\\x14\\xc6\\x03\\x82\\x17\\x04\\x2f\\x20\\x21\\x10\\x02\\xf1\\x00\\x08\\\n\\xfe\\x83\\x52\\x28\\x7b\\xdb\\xd8\\x6d\\x83\\x40\\xa2\\x85\\x27\\x40\\x20\\x44\\\n\\x43\\x17\\x2a\\x4a\\xe9\\x4a\\x10\\x90\\x2e\\x76\\x4a\\x11\\xf0\\xc0\\x13\\x4d\\\n\\xd3\\x24\\xcd\\x1e\\xc7\\x71\\x9a\\xd5\\xf1\\x32\\xde\\xc6\\x69\\x91\\x10\\xa5\\\n\\x2d\\x4d\\xd3\\x25\\x4d\\x13\\xbb\\x94\\x45\\x2a\\xa0\\x16\\xd4\\x5e\\xee\\x71\\\n\\x66\\xe8\\xcc\\xf5\\x89\\xc7\\xe3\\x71\\xe2\\x51\\x75\\x3e\\xe9\\xa7\\x24\\x8e\\\n\\x3d\\xe3\\xf3\\xcd\\xf5\\xbd\\xe7\\x9e\\x7b\\xc7\\x65\\x24\\x12\\x89\\x44\\x22\\\n\\x91\\x48\\x24\\x12\\x89\\x44\\x22\\x91\\x48\\x24\\x12\\x89\\x44\\x22\\x91\\x48\\\n\\x24\\x12\\x89\\x44\\x22\\x91\\x48\\x24\\x12\\x89\\x74\\x23\\x2a\\x34\\x72\\xe1\\\n\\xde\\xe8\\x48\\xea\\xb5\\x68\\x32\\xf5\\x15\\xa7\\x3f\\x22\\xa7\\x46\\xf9\\xcf\\\n\\xdf\\xf8\\xcf\\x7f\\x00\\xe5\\x77\\x78\\x8c\\xff\\x2f\\xfd\\x25\\x3c\\x57\\x96\\\n\\xd3\\xf7\\x28\\x2f\\x27\\x15\\x22\\x59\\x9e\\xb8\\x4b\\x1a\\x49\\xaf\\xe2\\xa6\\\n\\x8e\\x44\\x93\\x69\\x56\\x18\\xa9\\x11\\x38\\x46\\x2c\\x36\\x7e\\xa7\\x72\\xd8\\\n\\xb9\\x55\\xd5\\xa1\\xa5\\xb7\\xb9\\x22\\xe5\\x8b\\x5c\\x61\\xe7\\x76\\x57\\xd8\\\n\\xd1\\xc5\\x39\\xe6\\x0e\\x3b\\x7e\\xe3\\x7f\\xff\\xe3\\x96\\x9c\\x6c\\xb6\\x71\\\n\\x71\\x3e\\x6c\\x7b\\x8a\\xbd\\xbb\\x77\\x5e\\xde\\xbc\\x57\\xf7\\x04\\xdb\\xed\\\n\\x5b\\xc7\\x86\\x13\\x27\\x11\\x43\\x0b\\x44\\x4e\\xff\\xc9\\x3f\\x19\\x7b\\x62\\\n\\xb1\\x8b\\xf7\\x29\\xd6\\xcc\\xae\\x6a\\x24\\xc7\\x42\\x6e\\x72\\x3d\\x37\\xfc\\\n\\x6f\\xcc\\x98\\xb9\\x62\\xb3\\xf7\\x39\\xd4\\x64\\x94\\xda\\x79\\x6c\\xbb\\xf7\\\n\\x6d\\xe6\\x8f\\xff\\x8c\\x9b\\x58\\x0c\\xe4\\xd4\\xa5\\x48\\x22\\xbd\\xe1\\xd0\\\n\\x21\\x76\\xab\\x62\\x55\\x71\\x55\\x13\\x59\\x52\\xe1\\x96\\x1c\\x87\\x31\\x33\\\n\\xe6\\x9a\\x4f\\xfa\\x16\\xb2\\x95\\x98\\xd1\\x08\\x6b\\xea\\x9f\\x62\\x4d\\x81\\\n\\x16\\xdc\\x34\\x0e\\x6f\\xbd\\xcc\\x1f\\x9e\\x64\\xdd\\x03\\xe3\\xac\\xb5\\xfb\\\n\\x34\\x6b\\xec\\x18\\x63\\xfb\\x5a\\x46\\x59\\x6d\\xf3\\x89\\x0c\\xfb\\x5b\\x47\\\n\\x33\\x8f\\xb5\\xfb\\x4e\\x33\\xdf\\xc0\\x39\\x16\\x88\\x4e\\xa1\\xc7\\x51\\xe1\\\n\\xe3\\xc5\\xf7\\xf1\\xf8\\x85\\x87\\x15\\xdb\\xac\\x6b\\x47\\x60\\xf1\\x83\\x2e\\\n\\xc9\\xe1\\xc3\\x8c\\x28\\x05\\x3b\\x03\\xe5\\xac\\xb2\\x6e\\x3e\\x6a\\xb6\\xc8\\\n\\xa6\\xd6\\x0a\\x36\\x1c\\x3f\\x8e\\x1a\\x15\\x8e\\x4d\\x31\\x6f\\xff\\x59\\xb6\\\n\\xbf\\x6d\\x94\\xed\\x6d\\x3a\\x61\\x8a\\x86\\xf6\\x31\\x7e\\x31\\xc6\\x99\\x94\\\n\\x48\\xa1\\xc7\\x8e\\xc8\\x93\\x97\\x62\\x72\\xea\\x25\\xc5\\xc2\\xc2\\xc5\\x03\\\n\\x7e\\x99\\x9b\\xff\\xbb\\x68\\x42\\xa9\\x80\\x7e\\x7f\\x5d\\xf3\\x02\\xd4\\x6c\\\n\\x91\\x6d\\xed\\xcb\\x59\\x24\\x79\\x3e\\xcb\\x1c\\x30\\xad\\xf3\\xe0\\xd9\\x4c\\\n\\xeb\\xc6\\xcc\\x35\\xc3\\x81\\xce\\xb1\\xac\\xe3\\x5f\\x67\\xea\\x2a\\x1f\\xa8\\\n\\xdf\\x51\\xac\\x34\\x2f\\xde\\xcf\\x6f\\xe1\\x5c\\xc3\\x8c\\x28\\x15\\x55\\x07\\\n\\x5f\\x40\\xcd\\x16\\xa9\\xea\\x78\\x95\\x9b\\x9f\\xdd\\x55\\xf4\\x07\\x26\\x58\\\n\\x1d\\xef\\x52\\x30\\x33\\x0b\\xa1\\x6f\\x78\\x22\\xeb\\x1c\\x22\\xbc\\x8b\\x5b\\\n\\xa9\\x58\\x9a\\xbf\\x78\\xab\\xff\\x02\\x33\\xa0\\x94\\xec\\x0a\\x39\\xd9\\xaa\\\n\\xfd\\xc6\\x5d\\xcf\\x47\\x2d\\x4b\\xd0\\x96\\x0f\\xad\\x1e\\x33\\xb1\\x50\\x1a\\\n\\x3a\\x4e\\x66\\xc6\\x0f\\xf1\\x3c\\x22\\xbc\\x3b\\xba\\x16\\x49\\xa6\\x2a\\x14\\\n\\x6b\\x8d\\xc5\\x83\\xdd\\x2a\\x06\\x6f\\x07\\x36\\x77\\x3d\\x8b\\x1a\\xae\\x65\\\n\\x75\\xfd\\x02\\x36\\x14\\xfd\\x51\\x30\\x20\\x9d\\x19\\x5c\\x31\\x13\\xad\\x00\\\n\\x9f\\x26\\xed\\x79\\x72\\x21\\x25\\xcf\\x5f\\x0e\\xcb\\x17\\x1e\\x51\\x2c\\x9e\\\n\\x59\\x3c\\xd0\\x97\\xc5\\xc0\\xed\\x00\\x4f\\x79\\x79\\x0e\\x6f\\xd0\\xfa\\x79\\\n\\xaa\\xd9\\x12\\xec\\xc8\\x0a\\xbe\\xa5\\xfb\\x14\\x6a\\xa0\\x15\\x20\\x2b\\x12\\\n\\xcf\\x63\\x44\\x50\\x1e\\x1b\\xcb\\x99\\xa2\\x42\\xb6\\xc3\\x83\\xfd\\x43\\x0c\\\n\\xde\\x0e\\x6c\\xed\\x7e\\x1e\\x37\\x5d\\xc3\\x67\\x9e\\xd7\\xb3\\x82\\xf6\\xf4\\\n\\x9e\\x41\\x0d\\xb4\\x8a\\x99\\xd6\\xaf\\xc5\\x2f\\x1f\\xad\\x56\\xec\\xce\\x96\\\n\\x3b\\xec\\xec\\xc1\\x82\\xb7\\x03\\x6b\\x1a\\x9f\\x40\\x4d\\x57\\x79\\x6f\\xdf\\\n\\x7c\\x36\\x14\\x3f\\xaa\\x0b\\x16\\x4c\\xc2\\xcc\\xb3\\x4a\\x21\\xad\\x5f\\x25\\\n\\x22\\x9f\\xfb\\x17\\xad\\x23\\xb9\\x42\\xce\\x17\\xb1\\xc0\\xed\\x40\\xf5\\xd0\\\n\\x62\\xd4\\x74\\x2d\\xbb\\x7b\\xd6\\xeb\\x02\\x85\\x54\\xb3\\x98\\xd9\\x8e\\x96\\\n\\xfe\\x40\\xf6\\x00\\x6f\\x86\\x81\\x78\\xb2\\x53\\xb1\\x7d\\x5a\\x8c\\x95\\xdd\\\n\\x64\\x97\\x19\\x2e\\xc6\\xc6\\xce\\x67\\x50\\xd3\\x55\\x2a\\x6b\\xe7\\x33\\x7f\\\n\\xe2\\x84\\x2e\\xc8\\xce\\xde\\xe2\\x66\\x3c\\x2a\\xb9\\xf3\\xfe\\xfc\\x90\\xe4\\\n\\x73\\x57\\xa1\\x18\\xa8\\xd8\\xcf\\x5b\\x7f\\xa4\\x7c\\x11\\x16\\xb8\\x5d\\x58\\\n\\xdb\\x90\\xbb\\xfb\\xf9\\x98\\xe7\\xfc\\xda\\x00\\x61\\x86\\x5b\\x8c\\x49\\x16\\\n\\xc6\\x40\\xd0\\x5a\\xeb\\x57\\xf1\\xc9\\xc1\\xaf\\x15\\xfb\\x33\\x39\\xff\\x01\\\n\\x2c\\x70\\x3b\\xb0\\x33\\x58\\x6e\\x58\\xf3\\x69\\x08\\x34\\xea\\x82\\xeb\\xea\\\n\\xb7\\x6f\\xeb\\x57\\x19\\x4a\\xfc\\xf0\\x4b\\xc6\\xfc\\x4c\\x49\\xb9\\xc4\\x55\\\n\\xcd\\x5c\\x7c\\xd2\\x97\\x7b\\xe6\\x0b\\xa9\\x29\\x9f\\xe4\\xfc\\x1f\\x18\\xe4\\\n\\xfc\\x85\\xd4\\x76\\xf2\\x61\\x30\\x58\\x58\\xe6\\x13\\x8c\\x4e\\xb2\\x9e\\xc1\\\n\\x71\\xe1\\xf1\\x14\\x1b\\x94\\xa4\\x07\\xca\\x6a\\x42\\x4b\\x16\\x63\\x81\\xdb\\\n\\x05\\xa3\\xc9\\xd7\\xc6\\x96\\x0a\\x5d\\x60\\x7e\\x69\\x12\\x35\\xcf\\x2a\\x66\\\n\\x5b\\x7f\\x88\\x77\\x83\\x50\\x39\\x85\\xd7\\xa9\\xc7\\x18\\x8e\\xe8\\x4b\\x23\\\n\\x9e\\xb8\\xb7\\x1a\\xea\\x3d\\xdb\\xb1\\xc0\\xed\\x82\\xd1\\x82\\x4b\\x8d\\x6f\\\n\\x9d\\x2e\\x28\\x28\\x29\\x6b\\x8d\\x2b\\x16\\x03\\x21\\xe3\\xbe\\x1f\\x32\\xaf\\\n\\x5e\\xff\\x04\\x6b\\xee\\x3a\\x85\\x8e\\x41\\xf0\\xde\\xb4\\xcf\\xf7\\xc6\\x07\\\n\\x65\\xb8\\x00\\x5e\\x2c\\x70\\xbb\\xb0\\xf6\\xc0\\x93\\xa8\\xf1\\x2a\\xb5\\x43\\\n\\xdf\\xea\\x82\\x6a\\xf3\\x15\\xbf\\xe4\\xd0\\xe4\\x99\\xb9\\xf5\\x43\\x97\\x07\\\n\\xf3\\x8d\\x56\\xef\\x69\\xc3\\x81\\x1f\\xca\\x21\\xda\\xd7\\xf6\\xc9\\xb1\\x14\\\n\\xbf\\x00\\x8e\\x63\\x58\\xe0\\x76\\xc1\\xa8\\xf8\\xd6\\x1e\\xea\\xd1\\x05\\xd5\\\n\\xd8\\x71\\x12\\x0d\\xde\\x0a\\x83\\x42\\xeb\\x87\\x31\\x07\\xb2\\xa1\\xf6\\x9e\\\n\\xd3\\x6c\\x5f\\x73\\xfe\\xe3\\x8d\\x38\\x81\\xf3\\x27\\x8e\\x5e\\xe1\\xb3\\x5f\\\n\\xc7\\x45\\x2c\\x70\\xbb\\x50\\xb9\\xef\\x71\\xd4\\x78\\x95\\xde\\xe8\\x88\\x2e\\\n\\xa8\\xba\\x96\\xe2\\x0e\\xc0\\x4d\\x9e\\x53\\xff\\x1f\\x7b\\x28\\x7c\\x3e\\x33\\\n\\xbf\\x28\\x74\\x82\\x07\\xab\\x6c\\xda\\xf7\\x1a\\x4c\\x8c\\x5d\\x83\\x0b\\x70\\\n\\x05\\x0b\\xdc\\x2e\\xac\\xac\\xcd\\x7d\\x01\\x82\\xf2\\x19\\x5d\\x50\\xc5\\xce\\\n\\xff\\x21\\x7b\\xe9\\xea\\x1b\\x67\\xf5\\x6d\\xd6\\x3f\\x59\\xb5\\xfc\\xd3\\xa2\\\n\\x7d\\xaf\\x92\\x3c\\xc9\\x6e\\xbc\\x0b\\xd0\\x64\\xfd\\x13\\x00\\x66\\x83\\xe9\\\n\\x60\\x3e\\xf6\\xff\\x42\\x81\\xc6\\xa1\\x7d\\xaf\\x99\\x0b\\xc0\\x07\\xe1\\x5f\\\n\\xb1\\xc0\\xed\\x82\\xd9\\x2e\\x08\\x3e\\xe6\\x58\\xf0\\x46\\x40\\xb7\\x02\\xdd\\\n\\x0b\\x74\\x33\\xea\\xb1\\xa0\\xfb\\xc1\\x9e\\x5b\\x28\\xd0\\x3d\\x6a\\xdf\\xab\\\n\\xd2\\x05\\x39\\x8f\\x63\\x81\\xdb\\x05\\xb3\\x83\\x30\\xac\\x52\\x61\\xc1\\x63\\\n\\xc0\\x00\\x0a\\x03\\x29\\x0c\\xa8\\xda\\xc9\\x1c\\x00\\x03\\x2f\\xf6\\x1a\\x2b\\\n\\x88\\x83\\xf0\\x70\\x66\\x10\\x96\\x9c\\xdd\\x62\\xd0\\x76\\xc2\\x28\\x0d\\xdd\\\n\\x2b\\xa4\\xa1\\x46\\x2b\\x5f\\xd0\\x0d\\x40\\xca\\x08\\xa9\\x63\\xae\\xe5\\x44\\\n\\x48\\x3d\\xb1\\xd7\\x5b\\x01\\x52\\x64\\xed\\x39\\xfa\\x12\\xd1\\x14\\x5c\\x80\\\n\\x5d\\x62\\xd0\\x76\\xc2\\xec\\x44\\x0c\\xb6\\x8a\\x88\\x81\\x83\\xe9\\x30\\x39\\\n\\x82\\x49\\xd2\\x4c\\xdb\\x48\\xb4\\xc0\\xa4\\x4b\\x3c\\x46\\x31\\xf0\\x09\\xe5\\\n\\x08\\x5f\\x82\\x4f\\xc4\\xdc\\x92\\xc3\\x81\\x05\\x6e\\x17\\x36\\x79\\x8d\\x4a\\\n\\x11\\xcb\\x74\\x41\\x0d\\x47\\xae\\x97\\x22\\xa0\\x0c\\x00\\xe5\\x00\\x28\\x0b\\\n\\x68\\x9f\\x63\\x84\\xb6\\x7c\\x50\\x4c\\xfc\\x92\\x7e\\x3e\\xe1\\x91\\x3d\\xd5\\\n\\x65\\xbb\\x22\\x15\\x77\\xb8\\x24\\xe7\\x65\\x2c\\x78\\x3b\\x50\\xd5\\x9b\\x47\\\n\\x31\\x4e\\xd6\\x1b\\x0c\\xd9\\x0b\\x14\\xc0\\xb4\\x8f\\xe5\\x0b\\x14\\xdc\\x30\\\n\\xf3\\xac\\x52\\xdf\\x3e\\x2a\\x74\\x79\\x29\\xd6\\x97\\x0c\\xdd\\x9f\\xa9\\x88\\\n\\xf2\\x40\\xdb\\xc4\\xc0\\xed\\x42\\x3e\\xe5\\xe8\\xc6\\x40\\x83\\x26\\x30\\x6b\\\n\\xcc\\x56\\xeb\\xef\\xea\\x3b\\xab\\x3b\\xcf\\x90\\xac\\x94\\xa3\\x41\\x6e\\xa9\\\n\\x7c\\x19\\x16\\xbc\\x5d\\x30\\xbb\\x20\\x53\\x28\\x90\\x0d\\x61\\xe6\\x59\\x05\\\n\\xc6\\x20\\x58\\x24\\xd2\\x9e\\xeb\\xa0\\x3c\\x7c\\x7d\\x41\\xa6\\x8a\\x55\\xdd\\\n\\xcc\\xbb\\xa1\\x9f\\xb0\\xe0\\xed\\x80\\xe1\\x92\\x24\\x9f\\x2b\\x14\\x63\\xd7\\\n\\xf3\\x6c\\xb5\\x7e\\x98\\x5f\\x68\\xcf\\x93\\xb5\\x24\\x09\\xda\\x15\\x71\\xac\\\n\\xc0\\x82\\xb7\\x03\\x9f\\x0f\\x2d\\x42\\x8d\\xd7\\xb2\\xbb\\xe7\\x03\\x5d\\x90\\\n\\x66\\x81\\x85\\x76\\xcc\\x3c\\xab\\xc0\\xce\\x6a\\x31\\xf3\\xea\\x97\\x85\\x45\\\n\\x79\\xd0\\xf4\\xc2\\xbc\\x33\\x28\\x06\\x6f\\x17\\x8c\\xba\\xa1\\x4a\\xd8\\x96\\\n\\x22\\xec\\x88\\x33\\x03\\x4c\\x92\\x30\\x03\\xad\\x22\\xee\\x1f\\x9a\\x71\\x5b\\\n\\x0a\\xa8\\x26\\xba\\xf4\\x51\\x77\\xd8\\xf1\\x17\\x66\\x40\\xa9\\xd9\\xe6\\x33\\\n\\xbe\\x19\\xe3\\xd3\\xce\\xec\\x8d\\x59\\xf9\\x30\\x5b\\xfb\\x87\\x60\\x53\\x98\\\n\\x78\\x2e\\x7f\\xe2\\xc8\\xe7\\x8a\\xdd\\xb8\\xf8\\x05\\x78\\x13\\x33\\xa0\\xd4\\\n\\xc0\\xd6\\xc4\\xca\\xba\\xdc\\x75\\x21\\xd8\\x9a\\xd8\\x1c\\x6c\\xcd\\x0a\\xda\\\n\\x88\\xd9\\x68\\xfd\\xb0\\x1d\\x52\\x3c\\x4f\\x48\\x1e\\x3b\\x99\\xd7\\xdd\\x33\\\n\\xfc\\x22\\xb8\\x31\\x13\\x4a\\x4d\\x3e\\xb7\\x24\\xad\\xde\\xbf\\x80\\x0d\\xc6\\\n\\xf2\\xef\\x8a\\x66\\xa3\\xf5\\x43\\x39\\x44\\x2c\\x73\\x48\\xf2\\xc4\\xe5\\xd8\\\n\\xe1\\xf4\\x43\\x8a\\xc5\\xb9\\x05\\xe3\\x01\\xcf\\x8a\\xbe\\xc3\\x4c\\x28\\x25\\\n\\xae\\x90\\x23\\xaf\\xed\\xe9\\x1b\\x5a\\x9c\\xe8\\xf6\\x74\\x11\\x30\\xc9\\x4c\\\n\\xf1\\x2e\\x1f\\x3c\\x42\\xc6\\x33\\x7d\\x1e\\x93\\xdb\\xd3\\x41\\x99\\x41\\x39\\\n\\xec\\xd8\\x83\\x19\\x51\\x4a\\x8c\\x66\\xc6\\x2a\\x33\\xdd\\xa0\\xa1\\x05\\x6e\\\n\\xae\\xc0\\x4c\\x2c\\x04\\xc8\\x76\\xfa\\x67\\xd8\\xb6\\xc2\\x2f\\xb4\\xf9\\x1b\\\n\\x34\\x54\\xb9\\x42\\xce\\x37\\xec\\x34\\x30\\x9b\\xb9\\x45\\x69\\x6b\\xfb\\x2b\\\n\\x39\\x3f\\x09\\xc5\\xc8\\xfb\\x61\\x92\\x05\\x83\\x2d\\x5e\\xe4\\xb3\\x78\\x8b\\\n\\x92\\xaa\\x9d\\x41\\xe7\\x63\\x3c\\x78\\xdb\\xa4\\xa8\\x3b\\x82\\xe5\\xc6\\xf7\\\n\\x0a\\x28\\x6c\\x6c\\x5d\\xc6\\x27\\x69\\xfa\\x5d\\xd3\\x2a\\x60\\x1a\\x6c\\x15\\\n\\x81\\x1b\\xee\\x30\\x73\\x73\\x01\\x9b\\xbf\\xe0\\x06\\x3f\\x71\\x86\\xab\\x02\\\n\\x37\\xe9\\x49\\xc9\\xa9\\x65\\x8a\\x85\\xd6\\x35\\xdd\\x25\\x2d\\x79\\xd5\\x1d\\\n\\x76\\x1e\\xc1\\x4c\\x99\\x6b\\x60\\xc7\\x5c\\xfe\\xb7\\xa9\\x2e\\x60\\x4d\\x81\\\n\\x66\\xd4\\x28\\x15\\xb8\\xf5\\x14\\x2a\\xa7\\x70\\x2b\\x2a\\x64\\x45\\xd0\\xa5\\\n\\x40\\xeb\\x06\\x60\\x25\\x0b\\x1e\\x6b\\xe3\\x83\\x2b\\x5c\\x30\\xa8\\x6a\\xe6\\\n\\x5a\\x4b\\x28\\xfa\\x6d\\xaa\\x5a\\x41\\xd9\\x42\\xa9\\x1d\\xb5\\x95\\xba\\x8a\\\n\\xba\\xc5\\xa0\\x54\\xad\\x83\\xa7\\xa8\\xd5\\xde\\xb7\\xd8\\x70\\xec\\x18\\x6a\\\n\\x5a\\x51\\x90\\x53\\x97\\xf8\\xcf\\xf5\\x81\\x00\\xbb\\x45\\xb1\\x6b\\x76\\xf5\\\n\\x4d\\xe0\\xe9\\xdb\\x5d\\x61\\x67\\x39\\x1f\\x23\\x76\\xb8\\x25\\x87\\x87\\x73\\\n\\x34\\xb3\\xc6\\x3c\\x47\\x0b\\xfd\\x30\\x1e\\x98\\xff\\xaa\\x82\\xf9\\xac\\xc6\\\n\\xf7\\x3e\\x0b\\xc4\\xf5\\x0b\\xe4\\x96\\x90\\xd3\\x7f\\xf2\\x9f\\xbb\\xe9\\x0b\\\n\\x3c\\x4c\\x08\\xbe\\x60\\x23\\xf3\\x65\\x1d\\x72\\x3a\\xc1\\xbb\\x8c\\x6b\\x59\\\n\\xa6\\x1a\\xa0\\xbc\\x26\\x56\\xd2\\x2f\\xeb\\xb8\\x51\\x14\\x8d\\x4e\\xdd\\xcd\\\n\\x53\\xd6\\x15\\xbc\\x5f\\xdf\\xc3\\xf3\\xf5\\x5e\\xde\\x95\\x1c\\x8f\\x24\\xd3\\\n\\xbf\\xf2\\xbf\\xaf\\x64\\xe0\\xbf\\x4f\\x3f\\x96\\xea\\x85\\xe7\\x48\\xf2\\x85\\\n\\xe5\\xf0\\x1a\\xe5\\xe5\\x24\\x12\\x89\\x44\\x22\\x91\\x48\\x24\\x12\\x89\\x44\\\n\\x22\\x91\\x48\\x24\\x12\\x89\\x44\\x22\\x91\\x48\\x24\\x12\\x89\\x44\\x22\\x91\\\n\\x48\\x24\\x12\\x89\\xa4\\x51\\x59\\xd9\\x7f\\x58\\x5f\\x5b\\x8c\\x81\\xa3\\x06\\\n\\xcb\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x02\\x56\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x60\\x00\\x00\\x00\\x60\\x08\\x06\\x00\\x00\\x00\\xe2\\x98\\x77\\x38\\\n\\x00\\x00\\x00\\x06\\x62\\x4b\\x47\\x44\\x00\\xff\\x00\\xff\\x00\\xff\\xa0\\xbd\\\n\\xa7\\x93\\x00\\x00\\x02\\x0b\\x49\\x44\\x41\\x54\\x78\\x9c\\xed\\xdc\\x3b\\x4a\\\n\\x43\\x51\\x14\\x85\\xe1\\x15\\x1f\\x08\\xda\\x0a\\x8e\\x20\\x5a\\x88\\xa5\\x85\\\n\\x9d\\x58\\x5a\\xa4\\xd2\\xca\\x49\\xd8\\xc5\\x21\\x98\\xce\\x49\\xa4\\x13\\x9c\\\n\\x81\\x58\\x6b\\x29\\x16\\x0e\\xc1\\x01\\x28\\x88\\x60\\x2c\\x0c\\x28\\x21\\xca\\\n\\x7d\\x9d\\xb3\\xdc\\xc7\\xff\\x2b\\x83\\xb9\\x1e\\xf2\\xb3\\xbd\\x6c\\x2e\\x46\\\n\\x02\\x00\\x00\\xf8\\x8f\\x7a\\x75\\xdf\\x70\\x30\\x7e\\x9e\\xa4\\x38\\x48\\x7d\\\n\\xbd\\xd1\\xf5\\xc9\\xea\\x99\\xfb\\x14\\x6d\\x2d\\xb8\\x0f\\xd0\\xdc\\x64\\x78\\\n\\x30\\x7e\\x39\\x77\\x9f\\xa2\\xad\\xc0\\x01\\xa4\\x12\\x22\\x84\\x0b\\x70\\xbc\\\n\\xbd\\x34\\xf3\\x4a\\xec\\x08\\xe1\\x02\\x1c\\xf6\\x97\\x8b\\x8a\\x10\\x2e\\x80\\\n\\x54\\x56\\x84\\x90\\x01\\xa4\\x72\\x22\\x84\\x0d\\x20\\x95\\x11\\x21\\x74\\x00\\\n\\x29\\x7e\\x84\\xf0\\x01\\xa4\\xd8\\x11\\x8a\\x08\\x20\\xc5\\x8d\\x50\\x4c\\x00\\\n\\x29\\x66\\x84\\xa2\\x02\\x48\\xf1\\x22\\x14\\x17\\x40\\x8a\\x15\\xa1\\xc8\\x00\\\n\\x52\\x9c\\x08\\xc5\\x06\\x90\\x62\\x44\\xf8\\x33\\xcf\\x03\\x06\\xfd\\xd9\\x0f\\\n\\xca\\xa4\\xa7\\xd1\\xe9\\xee\\x4a\\xb6\\xe7\\x0c\\x45\\x4f\\x40\\x23\\x13\\x0d\\\n\\x2f\\xee\\x5e\\xb3\\x4d\\x08\\x01\\xe6\\xc9\\x18\\x81\\x00\\x53\\xdb\\x1b\\x33\\\n\\x1f\\x45\\xa6\\x08\\x04\\x98\\xda\\x5c\\x5f\\xb4\\x44\\x20\\xc0\\x37\\x8e\\x08\\\n\\x04\\x98\\x91\\x3b\\x02\\x01\\xe6\\xc8\\x19\\x81\\x00\\x3f\\xc8\\x15\\x81\\x00\\\n\\xbf\\xc8\\x11\\x21\\xd9\\xfa\\x79\\x7f\\x73\\x57\\xeb\\xe7\\x07\\xfd\\xbd\\x44\\\n\\x27\\x69\\x67\\x73\\x7d\\x51\\x92\\xf4\\xf0\\xf4\\xfe\\xf5\\xe2\\x67\\x04\\x75\\\n\\xb1\\x31\\x33\\x01\\x15\\xa4\\x9c\\x04\\x02\\x54\\x94\\x2a\\x02\\x01\\x6a\\x48\\\n\\x11\\x21\\xd9\\x3d\\x60\\x67\\x7f\\x37\\xd5\\xa5\\xad\\xba\\xbe\\x27\\x30\\x01\\\n\\x0d\\x74\\x39\\x09\\x04\\x68\\xe8\\xa7\\x08\\x75\\xaf\\x43\\x80\\x16\\xe6\\x46\\\n\\xa8\\x89\\x3d\\x60\\xea\\xea\\xe1\\xcd\\xf2\\x7b\\x99\\x00\\x33\\x02\\x98\\x11\\\n\\xc0\\x8c\\x3d\\xc0\\x8c\\x09\\x30\\x23\\x80\\x19\\x01\\xcc\\xc2\\xed\\x01\\xa3\\\n\\xcb\\xc7\\x26\\xc7\\x69\\x6d\\x78\\xb4\\x95\\xe4\\xba\\x4c\\x80\\x19\\x01\\xcc\\\n\\x08\\x60\\x16\\x6e\\x0f\\x48\\xf5\\xb7\\xd8\\x85\\x09\\x30\\x23\\x80\\x19\\x01\\\n\\xcc\\xd8\\x03\\xa6\\x5c\\xf7\\x16\\x26\\xc0\\x8c\\x00\\x66\\x04\\x30\\x63\\x0f\\\n\\x30\\x63\\x02\\xcc\\x08\\x60\\x46\\x00\\xb3\\x3f\\xf2\\xef\\xe9\\xd5\\xf1\\x3c\\\n\\x00\\x9d\\x22\\x80\\x19\\x01\\xcc\\xc2\\xdd\\x03\\xd8\\x03\\xd0\\x29\\x02\\x98\\\n\\x11\\xc0\\xac\\xf6\\x3d\\xe0\\xfa\\x64\\xad\\xf6\\xb7\\x6c\\x55\\x31\\xb8\\x7d\\\n\\xad\\xf4\\x4d\\x5c\\x3c\\x0f\\x40\\xa7\\x08\\x60\\x46\\x00\\x33\\xf6\\x00\\x33\\\n\\x26\\xc0\\x8c\\x00\\x66\\x04\\x30\\x23\\x80\\x19\\x01\\xcc\\x08\\x60\\x46\\x00\\\n\\x33\\x02\\x98\\x11\\xc0\\x8c\\x00\\x66\\x04\\x00\\x00\\x00\\x00\\x80\\xcc\\x3e\\\n\\x00\\x96\\xba\\xc5\\x9e\\x3c\\x38\\xb7\\x15\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\\n\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x07\\xa1\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x40\\x00\\x00\\x00\\x40\\x08\\x06\\x00\\x00\\x00\\xaa\\x69\\x71\\xde\\\n\\x00\\x00\\x00\\x01\\x73\\x52\\x47\\x42\\x00\\xae\\xce\\x1c\\xe9\\x00\\x00\\x00\\\n\\x04\\x67\\x41\\x4d\\x41\\x00\\x00\\xb1\\x8f\\x0b\\xfc\\x61\\x05\\x00\\x00\\x00\\\n\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0e\\xc3\\x00\\x00\\x0e\\xc3\\x01\\xc7\\x6f\\\n\\xa8\\x64\\x00\\x00\\x07\\x36\\x49\\x44\\x41\\x54\\x78\\x5e\\xed\\x5b\\xdb\\x53\\\n\\x13\\x57\\x1c\\xa6\\xed\\x43\\xa7\\x9d\\x76\\xa6\\x0f\\x9d\\xe9\\xb4\\x0f\\x9d\\\n\\xe9\\x4c\\x67\\xda\\xbe\\x77\\xda\\x99\\xf6\\xad\\x33\\xed\\x74\\xec\\x5b\\x3b\\\n\\xb6\\xff\\x81\\xd5\\x6c\\x20\\xd8\\x42\\xa9\\x8a\\x84\\xb6\\xda\\x2a\\x6c\\x42\\\n\\xa2\\xa0\\x46\\xc2\\x6e\\x2e\\x10\\x85\\x08\\x52\\x35\\x95\\x52\\xa1\\xa0\\x02\\\n\\x22\\x57\\x8d\\x1a\\x6e\\xe1\\xa6\\x22\\x72\\x8d\\x50\\x0b\\x58\\xe5\\xf4\\xfc\\\n\\xce\\x9e\\xb3\\x61\\xc3\\x32\\x1a\\x0c\\xb7\\x85\\x6f\\xe6\\x9b\\x04\\xb2\\x39\\\n\\xf9\\xbe\\x2f\\x67\\x7f\\xfb\\x3b\\xbb\\x9b\\xb8\\x0d\\x6c\\x40\\x42\\xa6\\x5e\\\n\\xfc\\x82\\xd7\\x0b\\xb7\\x4c\\x7a\\x11\\x3d\\x2d\\x79\\x4e\\x1c\\xc5\\x63\\x9d\\\n\\xcd\\xd4\\x0b\\x9f\\xd0\\xe1\\x57\\x3f\\x4c\\x9c\\x78\\x53\\xcd\\xcc\\xd3\\x10\\\n\\x87\\x30\\xcb\\x73\\x42\\x12\\xfd\\x88\\xd5\\x0d\\x26\\x3a\\xdd\\x13\\x94\\xb9\\\n\\xcb\\xd9\\x8e\\x12\\xac\\xcd\\x51\\x73\\xbb\\xa9\\x1e\\xed\\x36\\x96\\xe1\\x00\\\n\\x1c\\x10\\xc2\\x43\\x93\\x5e\\x48\\xc5\\x41\\xf0\\x26\\x4e\\x38\\x83\\xff\\xae\\\n\\xc5\\x8f\\x8d\\x40\\xfa\\xfc\\x0f\\x1c\\xbe\\x07\\x7f\\xf6\\x21\\xfc\\xfc\\x37\\\n\\xcc\\x14\\x9e\\x73\\x6c\\x31\\xeb\\x1c\\x5f\\x9b\\xe3\\x1d\\x9f\\x65\\xea\\xf2\\\n\\x3e\\xcc\\x32\\xd8\\xdf\\xb1\\x24\\xe4\\xbe\\x66\\x8d\\xb7\\x3e\\x4f\\xe5\\xc6\\\n\\x1e\\x6a\\x01\\xa4\\x17\\x04\\x55\\x0d\\x3e\\x29\\x53\\xd3\\xcb\\x14\\x33\\x22\\\n\\x16\\x34\\xc7\\x8b\\x33\\x16\\x83\\x63\\xec\\xc0\\x76\\x67\\xff\\xc1\\xef\\xdc\\\n\\xfe\\xec\\x14\\x77\\xcd\\xc1\\x24\\xb7\\x2f\\xe7\\x87\\x7c\\x0f\\x7e\\xb4\\xe6\\\n\\x24\\xbb\\xd3\\xcd\\x09\\xe2\\x56\\x1c\\xee\\x37\\x26\\x9d\\xf8\\xb9\\x49\\xef\\\n\\xf8\\x20\\x5b\\x97\\xfd\\x12\\xb5\\xb9\\x30\\xd8\\x07\\x30\\xf3\\x19\\x3b\\x8a\\\n\\xe5\\x0f\\xdd\\x9b\\x5c\\xa4\\x6a\\xf0\\x71\\x84\\x99\\xc0\\xc6\\x68\\x28\\x6b\\\n\\x40\\x9d\\x8d\\x01\\x34\\xd8\\xd9\\x83\\x06\\xbb\\x7a\\x09\\x6f\\x07\\x82\\x28\\\n\\xd8\\xdc\\x86\\x6e\\xd4\\xfa\\x51\\xcb\\xb9\\x66\\x74\\xc9\\x57\\x8f\\xaa\\xbd\\\n\\x17\\x51\\xb9\\xfb\\x6f\\x74\\xfa\\x68\\x39\\xf2\\x5a\\x7d\\x28\\x7f\\x5f\\x29\\\n\\xca\\x4b\\xf7\\xa2\\x43\\x29\\x1e\\x94\\x95\\xe0\\x94\\xc7\\x8b\\x8a\\x9c\\xf8\\\n\\x08\\x07\\x72\\xcc\\x9c\\xe8\\x7e\\x9d\\xda\\x9d\\x0f\\xb6\\xb1\\x1c\\xc0\\xce\\\n\\x12\\x79\\x80\\x5f\\x17\\x19\\x00\\x90\\x8d\\x81\\xa6\\x42\\x31\\xe1\\x83\\xd0\\\n\\x08\\x9a\\x18\\xbc\\x83\\x86\\x7b\\xfa\\xe7\\x07\\x78\\x66\\x4e\\x80\\x36\\x29\\\n\\x40\\xc7\\x9e\\x13\\x78\\xd6\\x38\\x88\\x06\\x5c\\x9c\\xdb\\xb2\\x0c\\xe2\\x2b\\\n\\xd4\\xb2\\x12\\x4c\\x28\\x0b\\x80\\x51\\xcd\\x54\\x34\\x8c\\x75\\x00\\x8b\\xe1\\\n\\x68\\xef\\x4d\\x64\\xdb\\xe9\\x99\\xa6\\x5a\\x32\\xa9\\x65\\x25\\x98\\x50\\x2d\\\n\\x06\\x00\\x6c\\xaf\\xbf\\x4e\\x74\\xf0\\x7a\\xb1\\x93\\x5a\\x56\\x42\\xeb\\x01\\\n\\x0c\\x77\\xf7\\xb3\\x00\\x26\\xa9\\x65\\x25\\x22\\x03\\x88\\x45\\x11\\x04\\xb2\\\n\\x31\\xd4\\x44\\x2d\\x27\\x9b\\xca\\x9b\\x88\\x0e\\x5c\\x07\\x5a\\xa9\\x65\\x25\\\n\\x98\\x50\\x39\\x80\\x55\\x5a\\x04\\xa3\\x25\\x14\\xcd\\x6b\\x17\\xae\\xa2\\x03\\\n\\xdf\\xbb\\x89\\x0e\\xdc\\x8f\\x18\\xa8\\x65\\x25\\x98\\x50\\x16\\x00\\xa3\\x9a\\\n\\xa9\\x68\\xb8\\x52\\x01\\x3c\\x9c\\x1c\\x45\\x79\\xc6\\x22\\xf9\\xf3\\x09\\x39\\\n\\xb1\\xa2\\x68\\x73\\xd1\\x73\\xd4\\xb2\\x12\\x6c\\xa3\\xa5\\x0a\\xe0\\xc1\\x78\\\n\\xf7\\xb2\\x72\\x6a\\x24\\x88\\xfb\\x87\\xe3\\x61\\xf3\\x12\\x87\\xf1\\x0c\\xf8\\\n\\x94\\x5a\\x56\\x82\\x6d\\xa4\\x95\\x00\\x08\\xc7\\xba\\xd1\\x70\\xd7\\x75\\xe4\\\n\\xaf\\xaa\\x43\\x9e\\x8c\\xe2\\xff\\x40\\x07\\x14\\x41\\x68\\xad\\xa9\\xed\\x30\\\n\\x22\\x03\\x88\\x75\\x11\\x54\\x15\\xb8\\x8c\\x9c\\x19\\x0d\\xa2\\x42\\xcb\\xc9\\\n\\x21\\xd0\\x82\\x67\\x81\\x93\\xda\\x0e\\x83\\x09\\x95\\x03\\x88\\x71\\x11\\x54\\\n\\x13\\xb5\\xdc\\x1c\\xea\\xbc\\x26\\xe9\\xc1\\x2b\\x5f\\x6a\\x3b\\x0c\\x26\\x94\\\n\\x05\\xc0\\xa8\\x66\\x2a\\x1a\\xae\\xa6\\x00\\x66\\xc6\\x82\\x44\\x0b\\x5e\\x17\\\n\\xcc\\x52\\xdb\\x61\\xac\\x87\\x00\\xc6\\xfb\\x03\\x52\\x00\\x9c\\x70\\x8f\\xda\\\n\\x0e\\x63\\x3d\\x04\\x50\\x7b\\xaa\\x9a\\xea\\x11\\xce\\x51\\xdb\\x61\\x44\\x06\\\n\\xa0\\xa5\\x22\\x08\\xdf\\x3c\\x98\\xb7\\x18\\xa4\\x55\\x21\\x9c\\xfe\\xa3\\xb6\\\n\\xc3\\x60\\x42\\xe5\\x00\\x34\\x50\\x04\\xa7\\x71\\xe5\\x17\\xd2\\x0b\\x65\\x0d\\\n\\x40\\x4b\\xa2\\xb3\\x12\\xc5\\xa1\\x67\\xa8\\xed\\x30\\xd8\\x06\\x2c\\x00\\x46\\\n\\x35\\x53\\xd1\\x90\\x8d\\xab\\x26\\x70\\xa9\\x39\\x8d\\x9b\\xa1\\xc8\\x00\\x28\\\n\\x2f\\xef\\xe7\\xec\\x6f\\x50\\xeb\\x12\\xd8\\x8b\\x5a\\x0a\\x80\\x71\\xac\\x37\\\n\\x80\\xba\\x1a\\x9a\\xd0\\x79\\x6f\\x05\\x3a\\x94\\x92\\x3f\\x4b\\x34\\x71\\x62\\\n\\x87\\x6d\\x8b\\xed\\x45\\x6a\\x7f\\x7d\\x14\\x41\\xe0\\x78\\x5f\\x00\\xe5\\xa6\\\n\\x7a\\x48\\x57\\x88\\x43\\x48\\xa3\\xf6\\xb5\\x5d\\x04\\x23\\xe9\\xaf\\xbe\\xc4\\\n\\x74\\x5d\\xa1\\xf6\\xb5\\x59\\x04\\x17\\xe2\\x10\\x5e\\x1f\\x80\\x26\\x6b\\xa2\\\n\\x73\\x86\\xda\\x5f\\x3f\\xbb\\x00\\xb0\\xbb\\x59\\xd2\\x85\\x03\\x08\\x51\\xfb\\\n\\xeb\\x28\\x00\\xbc\\x42\\xf4\\x5a\\x4a\\xa7\\x40\\x13\\x5e\\x19\\x3a\\xa8\\xfd\\\n\\xc5\\x04\\xd0\\x84\\xd2\\x76\\xfb\\x50\\x46\\x62\\x3e\\x61\\x5a\\x9a\\x8f\\xfc\\\n\\x2f\\x72\\xbb\\xd5\\x12\\x00\\xac\\x06\\x07\\x02\\x57\\x51\\x91\\xa5\\x74\\x44\\\n\\xd2\\x24\\x4c\\xe1\\x00\\xde\\xa5\\xf6\\xa3\\x2f\\x82\\x46\\x6c\\x1e\\x5e\\xcb\\\n\\x33\\xba\\x50\\x5e\\x9a\\x8b\\x3c\\x87\\xff\\x45\\x6e\\xc7\\xc6\\x50\\x13\\xb5\\\n\\xd4\\x54\\x6b\\x84\\x24\\x0a\\x30\\x03\\x36\\x53\\xeb\\x12\\xd8\\x8b\\x72\\x00\\\n\\x8f\\x29\\x82\\x19\\x06\\x37\\x31\\x3e\\xdd\\x57\\x42\\x68\\xdf\\xed\\x22\\x33\\\n\\x21\\x72\\x3b\\x36\\x86\\x9a\\xc0\\xa5\\xe6\\x82\\x8d\\x10\\x27\\x04\\x2c\\x09\\\n\\xce\\x37\\xa9\\x75\\x09\\xec\\x45\\x16\\x00\\x63\\xa4\\x21\\xc6\\xb5\\x10\\x00\\\n\\x23\\x6b\\x84\\x2e\\x14\\x57\\xa2\\xc3\\x3b\\x0a\\x1e\\x80\\x1e\\xb8\\x3e\\xb0\\\n\\x3f\\xd9\\xfe\\x32\\xb5\\x1f\\x7d\\x00\\x6c\\x17\\xb0\\xe3\\x10\\xec\\x69\\xd2\\\n\\x35\\xbb\\xd5\\xb6\\x0b\\xa8\\x71\\x62\\xa0\\x1d\\x39\\x7e\\x29\\x7a\\x04\\x9a\\\n\\x78\\xbd\\x60\\xa4\\xf6\\x17\\x57\\x04\\xc1\\x30\\x2b\\x82\\x92\\xf9\\xd5\\x5b\\\n\\x04\\xe7\\x32\\xd8\\x48\\x75\\xc5\\x8b\\x37\\xa8\\xfd\\xe8\\x8b\\xe0\\x93\\x92\\\n\\x8d\\xa1\\x26\\x64\\xa5\\x78\\x7f\\xa8\\x93\\xe9\\x5a\\xb8\\x11\\x8a\\x45\\x27\\\n\\xc8\\x2e\\x8f\\xe3\\x05\\x88\\xaa\\x90\\x95\\x22\\x3b\\x33\\x84\\xd7\\x02\\x13\\\n\\xd4\\xfe\\x02\\xbb\\x40\\x8c\\x6e\\x90\\xb0\\xed\\xf2\\x90\\xf3\\x71\\x6a\\x62\\\n\\x56\\x82\\xec\\xcc\\x10\\xcf\\x09\\x95\\xd4\\xbe\\x7a\\x00\\xbb\\x1c\\x8b\\xbf\\\n\\x45\\x06\\xcc\\xe3\\x4a\\x2b\\x25\\x8d\\xd9\\x56\\x7b\\x59\\x55\\xcc\\x72\\x92\\\n\\x9d\\x19\\xca\\x4a\\x10\\xc9\\x92\\x58\\x71\\x66\\x08\\x4e\\x15\\x33\\xb1\\x31\\\n\\x25\\x27\\xd6\\xc0\\x63\\xc1\\xbe\\x62\\x55\\x51\\x8c\\x9e\\xfd\\xe1\\x9a\\xb3\\\n\\x1c\\xc4\\x47\\x80\\x9f\\xa8\\x75\\x09\\x26\\x9d\\xb0\\x29\\x66\\x21\\xe0\\x7d\\\n\\x0b\\x4e\\x3c\\x92\\x7b\\x74\\xb6\\x17\\xbe\\x70\\x30\\xc9\\x4d\\x8e\\xbd\\x1d\\\n\\xd5\\x67\\xd1\\x78\\x5b\\xa5\\xc4\\xf6\\x4a\\x34\\xd9\\x53\\x27\\xef\\x1a\\xc7\\\n\\x32\\xc3\\x35\\x67\\xc9\\x28\\xeb\\x12\\x36\\x51\\xdb\\xcb\\x03\\xf7\\x5e\\xaf\\\n\\x13\\x04\\x78\\xcd\\x85\\xe1\\x00\\x28\\xef\\xdf\\x6a\\x99\\x37\\x1b\\x4e\\xd9\\\n\\xa4\\x1e\\x03\\x8b\\xfd\\x96\\x0e\\xb1\\xb6\\xc1\\x6f\\xb1\\xbd\\x6a\\x49\\x70\\\n\\x3c\\x82\\x7b\\x75\\xfa\\xea\\xff\\x54\\x04\\x70\\x2f\\x58\\x33\\x2f\\x80\\xe6\\\n\\xf2\\x8b\\x24\\x00\\xb8\\xb1\\x89\\x0e\\xb1\\xf6\\x61\\x4f\\x3b\\x7e\\x1a\\x4c\\\n\\xf9\\x0e\\x9f\\x50\\x04\\x00\\x9c\\x19\\xed\\x54\\x04\\xc0\\x2e\\x61\\x99\\xe3\\\n\\xc5\\xbb\\xf4\\xed\\x6b\\x1f\\x26\\x5d\\xee\\xdb\\x60\\xca\\x92\\xe8\\x40\\x77\\\n\\x5a\\xfe\\x52\\x04\\x70\\xff\\x76\\xab\\x22\\x00\\xe0\\x91\\x1f\\x0b\\x48\\x08\\\n\\x59\\xdb\\x9c\\xef\\xd1\\x21\\xd6\\x3e\\x8e\\xec\\x2c\\xb8\\x08\\xa6\\x2a\\x5d\\\n\\x27\\x15\\x01\\x4c\\x74\\xd7\\xce\\x0b\\x80\\xd5\\x01\\x33\\x27\\x6e\\xa5\\x6f\\\n\\x5f\\xfb\\xe0\\xe3\\x85\\x8f\\xc0\\x54\\x4e\\xb2\\x0b\\x8d\\x5c\\xab\\x08\\x87\\\n\\x80\\x8f\\x08\\x91\\xbb\\x81\\x26\\xeb\\x00\\x20\\x3b\\xc9\\x75\\x1d\\x8c\\xd5\\\n\\x79\\x7f\\x57\\xcc\\x82\\x7f\\x07\\xae\\x2a\\x02\\x90\\x2f\\x65\\xeb\\x85\\x3b\\\n\\xf4\\xad\\xda\\x40\\xa6\\x5e\\xf8\\x12\\x8c\\xe5\\xa6\\xe6\\xa3\\xb1\\x40\\x38\\\n\\x80\\x89\\x9e\\x4b\\x8a\\x00\\x80\\x47\\x76\\x14\\x90\\x8e\\x4d\\x53\\x75\\xc0\\\n\\x68\\x34\\x3e\\x6b\\x4d\\x74\\x91\\xdf\\x25\\xb4\\xfa\\x7c\\x72\\x00\\xa1\\xb6\\\n\\xbf\\x71\\x53\\xd4\\xa5\\x08\\x80\\xd5\\x01\\x5e\\x97\\xb7\\x8d\\xbe\\x5d\\x1b\\\n\\xc0\\xd3\\x5a\\x07\\xc6\\xdc\\x7b\\x3c\\x72\\x00\\xc0\\xa9\\x41\\xbf\\x22\\x00\\\n\\xcd\\xd6\\x01\\x68\\x8f\\xb3\\x0c\\x8e\\x10\\x98\\xeb\\xa8\\x2a\\x93\\x03\\x98\\\n\\xec\\x55\\x2e\\x98\\x34\\x5b\\x07\\x00\\x26\\x4e\\xf8\\x19\\xcc\\xcd\\x6d\\x8f\\\n\\x43\\x1d\\x55\\xe4\\xbc\\xfd\\xdc\\x10\\x70\\xd1\\x9c\\x81\\xed\\x32\\xf5\\xae\\\n\\xb7\\xe8\\x5b\\xb5\\x01\\x68\\x8f\\xb1\\xb1\\xe9\\xc8\\xf6\\x78\\xea\\xee\\x0d\\\n\\x45\\x00\\xc7\\xf9\\x12\\xb2\\x90\\x5a\\x53\\xbf\\x3f\\x7a\\x52\\xf0\\x9c\\x70\\\n\\x14\\xcc\\xf9\\x0e\\x7b\\xe5\\x00\\xfe\\xe9\\x6b\\x50\\x04\\x50\\x94\\x75\\x92\\\n\\xec\\x06\\x9a\\x0c\\x00\\xda\\x63\\x1c\\xc2\\xac\\x75\\x4e\\x7b\\x1c\\xea\\x38\\\n\\x2f\\x9b\\x87\\x0b\\x1b\\x39\\xc9\\xf9\\x24\\x80\\x79\\xe7\\xf1\\xb5\\x02\\x5e\\\n\\x2f\\x96\\x82\\xc1\\x0a\\x67\\x89\\x3c\\x0b\\x66\\x46\\x3a\\x48\\x00\\xad\\x15\\\n\\xb5\\xec\\x28\\xd0\\x42\\x37\\xd7\\x1e\\xcc\\x7a\\xf1\\x63\\x30\\x99\\x93\\xec\\\n\\x26\\xed\\x71\\xa8\\xbd\\x8a\\xf4\\x03\\x37\\xfd\\x57\\x70\\x01\\x94\\xee\\xf0\\\n\\x36\\x71\\xe2\\x57\\x74\\x73\\x6d\\x02\\xef\\x06\\x75\\x60\\xb4\\xc6\\x7b\\x1a\\\n\\x0d\\xf8\\x1b\\x51\\x75\\xe1\\x39\\x64\\x31\\x48\\x17\\x5b\\x14\\x57\\x70\\xb5\\\n\\x0a\\xf8\\x86\\xc9\\x37\\x3d\\x97\\x9c\\x08\\x57\\x6f\\x2c\\x0b\\xde\\xde\\xae\\\n\\x25\\x40\\x7b\\xcc\\x73\\x62\\x15\\xe6\\x34\\xee\\x0f\\xba\\xe0\\xe8\\x60\\xe6\\\n\\xec\\xef\\xd3\\x97\\x37\\xb0\\x81\\x25\\x43\\x5c\\xdc\\xff\\x20\\x78\\x31\\xa2\\\n\\xe8\\x9e\\xb7\\x3a\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\\n\\x00\\x00\\x14\\xd9\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x60\\x00\\x00\\x00\\x60\\x08\\x06\\x00\\x00\\x00\\xe2\\x98\\x77\\x38\\\n\\x00\\x00\\x00\\x04\\x73\\x42\\x49\\x54\\x08\\x08\\x08\\x08\\x7c\\x08\\x64\\x88\\\n\\x00\\x00\\x00\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x05\\x46\\x00\\x00\\x05\\x46\\\n\\x01\\xc1\\xb4\\xfa\\x1a\\x00\\x00\\x00\\x19\\x74\\x45\\x58\\x74\\x53\\x6f\\x66\\\n\\x74\\x77\\x61\\x72\\x65\\x00\\x77\\x77\\x77\\x2e\\x69\\x6e\\x6b\\x73\\x63\\x61\\\n\\x70\\x65\\x2e\\x6f\\x72\\x67\\x9b\\xee\\x3c\\x1a\\x00\\x00\\x14\\x56\\x49\\x44\\\n\\x41\\x54\\x78\\x9c\\xed\\x9d\\x7b\\x74\\x55\\xd5\\x9d\\xc7\\xbf\\xbf\\x7d\\x5e\\\n\\xf7\\x9d\\x9b\\x9b\\x10\\x20\\x8a\\x40\\x48\\x48\\x00\\x27\\xe5\\x11\\x10\\x69\\\n\\x6d\\x01\\x11\\x1f\\x2d\\xb5\\x8a\\x88\\x3a\\x5a\\xb4\\xd6\\xd1\\x76\\x3a\\x0e\\\n\\x75\\x75\\xc6\\xae\\x3e\\x66\\xa8\\x75\\x4d\\x3b\\xd3\\xb5\\xa6\\x6a\\xad\\x63\\\n\\xab\\x8e\\xda\\x5a\\x87\\x25\\x58\\x3b\\x6a\\xab\\x40\\x10\\x29\\x54\\x02\\x84\\\n\\x04\\x64\\x30\\x21\\x09\\x88\\x4f\\x20\\x90\\x5c\\x72\\xef\\xcd\\xbd\\xf7\\xdc\\\n\\x7b\\xce\\xd9\\xf3\\x47\\x1e\\xe4\\x71\\x1f\\xe7\\x9c\\x7b\\x13\\xe8\\x22\\x9f\\\n\\xb5\\xb2\\xd6\\xbd\\xe7\\xfc\\xf6\\xde\\xbf\\xfc\\x7e\\x67\\xef\\xb3\\xf7\\x6f\\\n\\xff\\xce\\xb9\\xc0\\x18\\x63\\x8c\\x31\\xc6\\x18\\x63\\x8c\\x31\\xc6\\x18\\x63\\\n\\x8c\\x31\\xc6\\x18\\x63\\x8c\\x31\\xc6\\x18\\x17\\x0a\\x74\\xae\\x15\\x30\\xcb\\\n\\xab\\x6f\\xef\\x32\\x0c\\xc3\\x20\\x00\\x20\\x02\\x2e\\x99\\x38\\x3e\\x93\\x78\\\n\\xd7\\x9c\\xaa\\x72\\xff\\xe8\\x68\\x96\\x1b\\xec\\x5c\\x2b\\x60\\x16\\x41\\x60\\\n\\x31\\xf3\\xd2\\xf4\\xfe\\xc8\\x69\\x92\\x5f\\xc4\\x73\\xad\\xc0\\xee\\xa6\\xa6\\\n\\x22\\x99\\xe4\\x47\\x88\\x73\\x51\\xe3\\xe2\\x03\\x35\\x33\\xa7\\x1c\\x4f\\x25\\\n\\x27\\x32\\x21\\x98\\x84\\xe6\\x32\\x57\\x2b\\xff\\x20\\x9f\\x3a\\x8e\\x24\\xe7\\\n\\xb4\\x07\\x34\\x34\\x1d\\x59\\x29\\x33\\xe9\\x10\\xc0\\x6f\\xe7\\x84\\x5b\\x04\\\n\\xa6\\xed\\x6f\\x6c\\x6a\\x5d\\x9c\\x4a\\x96\\x18\\x7d\\xda\\xf7\\x99\\x51\\x56\\\n\\xb5\\x8f\\xe5\\x4f\\xcb\\x91\\xe5\\x9c\\x38\\xa0\\xbe\\xbe\\x5e\\xda\\xdf\\xdc\\\n\\xf6\\x28\\x11\\xdf\\x08\\x8e\\x81\\x83\\x79\\x09\\x88\\x36\\x1d\\x68\\x6a\\x5d\\\n\\x31\\xb4\\x8c\\x40\\x74\\xa4\\xef\\x33\\x51\\xb6\\x5b\\x17\\x1d\\x1b\\xf8\\x6d\\\n\\xcb\\xae\\x7d\\x2f\\xbf\\xb1\\x73\\xcf\\xe9\\xcd\\x75\\x8d\\x7f\\x9f\\x93\\xe2\\\n\\x23\\xc0\\xa8\\x3b\\xa0\\xfe\\xbd\\x63\\x13\\x05\\x8f\\x7f\\x1b\\x07\\xee\\x4f\\\n\\x23\\x22\\x1b\\x44\\x1b\\xf7\\x37\\x1d\\xf9\\xd2\\xc0\\x83\\x8c\\xe8\\xff\\xfa\\\n\\x3e\\x67\\xb7\\x3f\\x3f\\xd6\\xf7\\x71\\xdb\\x9e\\x86\\x9f\\x74\\xc7\\xe2\\x37\\\n\\xaa\\x89\\x64\\x51\\x34\\x1a\\x7d\\xfc\\xcd\\x9d\\x7b\\xde\\xaf\\xdd\\xbd\\x7f\\\n\\xba\\xed\\x7f\\x20\\xcf\\x8c\\xaa\\x03\\x0e\\xbc\\xd7\\x76\\xa9\\xc0\\xb4\\x3a\\\n\\x00\\x9f\\xcd\\x22\\x2a\\x73\\xe2\\x1b\\xf7\\x35\\xb5\\xcd\\xeb\\x3f\\xa0\\x88\\\n\\x7b\\xfb\\x3e\\x67\\xed\\x01\\x64\\x1c\\x03\\x80\\xda\\x7d\\xfb\\xaa\\x23\\x51\\\n\\xf5\\xc1\\x81\\xa7\\xe2\\x49\\x6d\\x8a\\x43\\x12\\xdf\\x69\\x68\\x6a\\xbd\\xdc\\\n\\xa2\\xfa\\x23\\xc2\\xa8\\x39\\xe0\\x40\\x73\\xdb\\x52\\x83\\x61\\x27\\x80\\x4b\\\n\\x4c\\x16\\x51\\x18\\xc3\\xfa\\xba\\xd6\\x56\\x1f\\x00\\xf8\\x25\\x7f\\x7d\\x9f\\\n\\xdd\\xb3\\xdd\\x03\\x84\\xb8\\xf2\\x01\\x00\\xe8\\x71\\xfe\\xba\\xde\\x3b\\x75\\\n\\xed\\xa3\\xd8\\xef\\x83\\xdb\\xe5\\x28\\x22\\xa2\\xed\\x0d\\xcd\\x6d\\xe9\\x7a\\\n\\xe1\\xa8\\x31\\x2a\\x0e\\xd8\\xdf\\xd4\\xba\\xdc\\x00\\x5e\\x07\\x50\\x60\\xa9\\\n\\x20\\x47\\xb9\\x43\\xa7\\xc7\\x01\\x60\\xd6\\xac\\x49\\x9d\\xa2\\x20\\x1a\\x00\\\n\\xc0\\x58\\xc6\\x1e\\xd0\\x55\\x5d\\x3d\\x39\\xb8\\x6d\\xf7\\xfe\\x6f\\xc5\\x54\\\n\\x75\\x52\\xff\\x51\\x22\\x8c\\x2b\\xf4\\xc3\\xed\\x74\\xf4\\x1d\\x91\\x08\\x78\\\n\\xb4\\xa1\\xb9\\xf5\\xa7\\x96\\x74\\xca\\x33\\x23\\xee\\x80\\xfd\\x4d\\xad\\xcb\\\n\\x41\\xf4\\xbf\\x00\\x9c\\x76\\xca\\x73\\xe0\\xf6\\x03\\x87\\x8f\\x5e\\x01\\x00\\\n\\x82\\xc0\\x22\\x00\\xc0\\x58\\x26\\xb5\\x7b\\xc6\\xff\\x58\\x32\\xf1\\xf0\\xc0\\\n\\xa3\\x01\\x9f\\x07\\x2e\\xa7\\x32\\x4c\\x9a\\x40\\x0f\\x36\\x36\\xb7\\xfd\\x87\\\n\\x1d\\xdd\\xf2\\xc1\\x88\\x3a\\xa0\\x76\\xf7\\x81\\xbb\\x83\\xe1\\xee\\xd7\\x39\\\n\\xe0\\xc8\\x2e\\x9d\\x16\\x32\\x38\\x7f\\x8c\\x73\\xce\\x18\\x63\\x9d\\x00\\x20\\\n\\x64\\x74\\x00\\x1d\\xdb\\x56\\xdf\\xb8\\x26\\x91\\x48\\xf6\\xf7\\x36\\xaf\\xdb\\\n\\x05\\xaf\\x3b\\xfd\\x12\\x82\\x80\\x09\\x39\\xe8\\x97\\x13\\x23\\xe6\\x80\\xcd\\\n\\xef\\x34\\x7c\\x21\\x1a\\x8b\\xfd\\xba\\x2b\\xd2\\x2d\\x85\\xc2\\xdd\\x39\\xd6\\\n\\xc6\\x67\\xef\\x6f\\x39\\xf2\\x65\\x22\\x9c\\x04\\xb2\\xf5\\x00\\x1c\\x8b\\xc7\\\n\\x93\\xeb\\xfa\\xbe\\x38\\x15\\x19\\x01\\x9f\\x27\\x93\\xfc\\xbb\\x5a\\xc4\\x75\\\n\\x5f\\x8e\\x0a\\xda\\x66\\x44\\x56\\xc2\\xb5\\x3b\\xde\\x2d\\x8b\\x6b\\xd1\\xcd\\\n\\x86\\xa1\\x33\\x00\\x08\\x86\\x23\\x20\\xc6\\xe0\\x75\\xdb\\x1a\\x85\\x7a\\xe0\\\n\\xf8\\x67\\x22\\xfa\\x10\\xc0\\x65\\x99\\x7a\\x40\\x22\\xa9\\x45\\x12\\x89\\xe4\\\n\\x14\\x00\\x10\\x05\\x01\\xc5\\x85\\x05\\x99\\xe6\\xad\\x5d\\x30\\xe8\\xa6\\x9a\\\n\\x9a\\xd2\\x68\\xdf\\x81\\xb7\\xea\\xeb\\x2f\\x4b\\xa8\\x7c\\x23\\x23\\x6a\\x5b\\\n\\xbe\\xa8\\x66\\x89\\x7d\\x85\\xcd\\x91\\xf7\\x1e\\x50\\x57\\x57\\xe7\\x4b\\x50\\\n\\xac\\x41\\xd3\\x74\\x79\\xe0\\xf1\\x60\\x28\\x84\\xee\\x58\\x3c\\x97\\xaa\\x2f\\\n\\x17\\x99\\xa0\\x01\\x80\\x20\\xa4\\x57\\x3b\\x12\\x8b\\x5d\\xc5\\xd1\\x13\\x65\\\n\\x1c\\x17\\x28\\xc8\\xd4\\x5b\\x38\\x08\\x77\\xce\\x99\\x39\\xad\\xb5\\xef\\xc0\\\n\\xe6\\x5d\\xf5\\xcf\\x45\\x22\\x89\\x5d\\x71\\x35\\x71\\x71\\x34\\xae\\x2e\\xde\\\n\\xbc\\xab\\x7e\\x77\\x2e\\x0a\\x9b\\x21\\xff\\x43\\x90\\xb3\\xe0\\x19\\x6e\\x0c\\\n\\x9f\\xed\\x70\\x0e\\x74\\x9c\\x09\\x41\\x4d\\x24\\x6d\\x57\\x2d\\x2b\\x62\\x39\\\n\\x90\\x79\\x16\\x14\\x8b\\xc7\\xab\\x01\\xa0\\xc0\\xeb\\x86\\x2c\\x49\\x99\\xaa\\\n\\xfb\\xd9\\x9c\\xca\\xf2\\x3f\\x00\\xc0\\xf6\\xbd\\xfb\\xe7\\xbc\\xb1\\x73\\x6f\\\n\\x7b\\x34\\xa6\\xae\\x31\\x0c\\xde\\x5f\\x79\\x34\\xa6\\x2e\\xa8\\xdd\\xdd\\xb8\\\n\\xc3\\xb6\\xc2\\x26\\xc8\\xab\\x03\\x1a\\x0e\\xb7\\xdd\\xa2\\x28\\xd2\\x4d\\x13\\\n\\x4b\\x8a\\x50\\xe8\\xf3\\x82\\x86\\x18\\x8a\\x73\\x8e\\xf6\\xce\\x33\\xd0\\x34\\\n\\xdd\\x56\\xfd\\xb2\\x20\\x4d\\x05\\x00\\x41\\x10\\x52\\x9e\\x4f\\x6a\\x1a\\x34\\\n\\xcd\\x70\\xc8\\x92\\x08\\x9f\\x37\\xfd\\xb8\\x4f\\xc0\\x3e\\x3d\\x72\\xe6\\x07\\\n\\x00\\xb0\\x75\\x57\\xe3\\x3d\\x5d\\xdd\\xb1\\x7a\\x35\\x91\\x18\\x97\\x4a\\x36\\\n\\xd2\\x1d\\xfd\\x5c\\xed\\xee\\x86\\x37\\x6d\\x29\\x6c\\x82\\xbc\\xed\\x07\\xec\\\n\\x6b\\x69\\x99\\xc1\\x0c\\x61\\x2f\\xc0\\xdd\\x7d\\xc7\\x0c\\xc3\\x40\\xc7\\x99\\\n\\x10\\xa2\\x71\\x75\\x90\\xac\\x28\\x8a\\x98\\x38\\xae\\xd0\\x4c\\x50\\x6d\\x18\\\n\\x1f\\x9e\\x68\\xc7\\x25\\x13\\x4a\\x52\\x9e\\x0b\\x45\\xba\\x11\\x0c\\x45\\x30\\\n\\x71\\x5c\\x20\\xd3\\xd5\\x1f\\xd1\\x05\\x3e\\xbb\\xa6\\xa2\\xe2\\xc8\\xd6\\xdd\\\n\\x8d\\x1b\\x22\\xd1\\xd8\\x4d\\x9c\\xf3\\x41\\x02\\x82\\xc0\\xe0\\x54\\x14\\x28\\\n\\x92\\x08\\x51\\x14\\x21\\x89\\x22\\x04\\x91\\xbe\\x35\\xa7\\xb2\\xe2\\x97\\x96\\\n\\x15\\xce\\x42\\x5e\\x1c\\x70\\xe8\\xd0\\x21\\x39\\x21\\x28\\x7f\\x01\\x50\\x93\\\n\\xea\\x7c\\x34\\xa6\\xa2\\xb3\\x2b\\x0c\\xdd\\x38\\x7b\\xe5\\x3b\\x14\\x19\\xe3\\\n\\x8b\\x0a\\x2d\\xb7\\x75\\xe2\\x74\\x27\\x26\\x14\\x07\\x52\\x9e\\x3b\\xd9\\x11\\\n\\x84\\x24\\x8a\\x08\\x14\\x78\\xd3\\x96\\x27\\xe2\\x0f\\x04\\x3f\\xfd\\xf8\\xbf\\\n\\x92\\x8a\\xe7\\x9d\\x68\\x3c\\x31\\xa7\\xef\\xb8\\x28\\x0a\\xf0\\x38\\x1d\\x70\\\n\\x3a\\x1d\\x90\\xc5\\x94\\x73\\x93\\x24\\x01\\x57\\xcf\\xae\\x2a\\xdf\\x66\\x59\\\n\\xe9\\x0c\\xe4\\x65\\x08\\x4a\\x08\\xca\\xc3\\x48\\x63\\x7c\\x00\\x70\\x39\\x15\\\n\\x94\\x8e\\x0f\\xc0\\xe3\\x3a\\x3b\\x0b\\x8a\\xab\\x09\\x04\\x43\\x11\\xcb\\x6d\\\n\\x49\\x69\\xae\\x6c\\xc3\\x30\\x90\\x4c\\xea\\xf0\\x7b\\xdd\\x29\\xcf\\xf7\\xb2\\\n\\x3d\\x18\\x8d\\x3c\\x1b\\x13\\xdd\\xef\\x47\\xe3\\x89\\x39\\x20\\x82\\xcb\\xa1\\\n\\x60\\x7c\\x51\\x21\\x2e\\x2a\\x29\\x46\\x81\\xd7\\x93\\xce\\xf8\\x00\\x20\\x71\\\n\\x60\\x7d\\x43\\x73\\x73\\xa9\\x65\\xa5\\x33\\x90\\x73\\x0f\\x68\\x3c\\x7c\\x64\\\n\\x3e\\x38\\xdf\\x05\\x20\\xf5\\xc0\\x3c\\x84\\x98\\x9a\\x40\\x47\\x30\\xd4\\xdf\\\n\\x1b\\x4a\\x02\\x7e\\x38\\x1d\\xc3\\x57\\xa8\\xe9\\x88\\xc4\\x62\\xf0\\x38\\x87\\\n\\x4f\\x67\\xbb\\xa3\\x71\\x70\\xf0\\x41\\x4e\\x1e\\x82\\xae\\x25\\x63\\xcb\\x4e\\\n\\x87\\x62\\x1b\\x13\\x09\\xad\\xc8\\xe3\\x72\\xc0\\xe7\\x71\\x43\\x4c\\x73\\x3f\\\n\\x49\\x07\\x07\\x76\\x74\\x1d\\xff\\x68\\xe9\\x92\\x25\\x4b\\x34\\x4b\\x05\\xd3\\\n\\x90\\x53\\x0f\\xa8\\xaf\\xaf\\x97\\xc0\\xf9\\xd3\\x30\\x69\\x7c\\xa0\\x67\\x61\\\n\\x54\\x5a\\x12\\xe8\\x37\\x7a\\xc7\\x99\\x10\\x0c\\xc3\\x30\\xdd\\xa6\\x24\\xa4\\\n\\xbe\\x42\\x0d\\x6e\\x64\\x32\\x3e\\x38\\xc7\\x0b\\x1d\\x5d\\xf1\\xdf\\xc9\\xa2\\\n\\x54\\x54\\x5a\\x52\\x84\\x40\\x81\\xcf\\xb2\\xf1\\x01\\x80\\x80\\x2b\\xfc\\x13\\\n\\x27\\xad\\xb3\\x5c\\x30\\x0d\\x39\\x39\\x40\\xf4\\xf8\\x7f\\x08\\xa0\\xda\\x72\\\n\\xa3\\x8c\\xa1\\x24\\xe0\\x87\\xdf\\xe7\\x81\\xc1\\x0d\\x74\\x74\\x85\\x4c\\x97\\\n\\x95\\xd2\\x0c\\x11\\x0e\\x45\\x4e\\x79\\xbc\\x8f\\xb8\\xaa\\xd6\\x14\\x15\\xfa\\\n\\x4a\\x03\\x05\\x5e\\x5b\\x86\\x1f\\xc2\\x77\\x07\\x86\\xca\\x73\\xc1\\xf6\\x10\\\n\\xf4\\x6e\\x4b\\x4b\\x99\\x6e\\xb0\\xf7\\x00\\x98\\x1f\\x3f\\x52\\x10\\x8b\\xab\\\n\\x38\\x75\\xa6\\x0b\\x25\\x85\\xfe\\xac\\x46\\x3c\\xbf\\xe0\\x7b\\x5a\\x2b\\xcb\\\n\\x17\\xdd\\x4c\\x64\\x6f\\x4e\\xdd\\x8b\\xed\\x1e\\xa0\\x1b\\xc2\\xbf\\x23\\x47\\\n\\xe3\\x03\\x80\\xd3\\xa1\\x60\\x62\\x71\\x00\\x5d\\x91\\x6e\\x0c\\x9d\\x0e\\x9e\\\n\\xdf\\xd0\\x82\\x8a\\x96\\xb6\\x7b\\x73\\xae\\xc5\\x4e\\xa1\\x86\\x96\\x23\\xcb\\\n\\xc8\\xe0\\x5b\\x72\\x6d\\x7c\\x20\\x09\\x4d\\x83\\xa6\\xe9\\x70\\x59\\xb8\\x21\\\n\\x9f\\x73\\x08\\x27\\xf5\\xb0\\xab\\x6c\\x60\\x2c\\xc9\\x2a\\xb6\\x7a\\x00\\x19\\\n\\xfc\\x47\\x76\\x1b\\x4c\\x87\\x2c\\x8a\\x90\\x25\\xeb\\xb1\\x41\\xa6\\xab\\x70\\\n\\x84\\x9b\\xe0\\x6d\\xdf\\x0a\\x77\\xe7\\x6e\\x48\\xf1\\x93\\xf9\\x56\\x2d\\x3d\\\n\\x1c\\xe3\\x45\\x77\\xf4\\x6b\\xb9\\x54\\x61\\xb9\\x07\\x1c\\x68\\x6e\\x5b\\x6a\\\n\\x00\\x5b\\x73\\x69\\x34\\x17\\x98\\x91\\x80\\xef\\xf8\\x6b\\xf0\\xb4\\xbf\\x05\\\n\\xb1\\xab\\x15\\x46\\x52\\x1d\\x2e\\x23\\x30\\x70\\xc7\\x38\\xc4\\x03\\x9f\\x41\\\n\\xe7\\xe4\\x3b\\x90\\x74\\x9a\\xdd\\x05\\xb5\\xc5\\xc7\\x7a\\xe4\\x4c\\x59\\x4d\\\n\\x4d\\x8d\\xad\\x20\\x97\\x65\\x07\\x34\\x36\\x1d\\xd9\\x0e\\xe2\\x9f\\xb7\\xd3\\\n\\x98\\x5d\\x1c\\xe1\\xc3\\x28\\xf8\\xe4\\x15\\x38\\x3a\\xeb\\x81\\x68\\x07\\x38\\\n\\x37\\x3f\\x6d\\x05\\x08\\xf0\\x8e\\x47\\x70\\xda\\xdf\\x21\\x3c\\xee\\xca\\x11\\\n\\xd1\\x8f\\x83\\x5f\\x3f\\xb7\\xaa\\xe2\\x55\\x3b\\x65\\x2d\\x3b\\xa0\\xa1\\xa9\\\n\\xf5\\x72\\x22\\x5a\\x0b\\x60\\x25\\x2c\\xcc\\xff\\xad\\xc0\\x92\\x61\\xf8\\x3f\\\n\\xfd\\x3d\\x5c\\xa7\\x76\\x42\\x08\\xbd\\x0f\\xae\\xdb\\x8f\\xa0\\x0e\\x84\\x5c\\\n\\xe3\\xd0\\x5e\\xfd\\x10\\x62\\xde\\x99\\x79\\xa9\\xef\\x2c\\xfc\\xd9\\x39\\x55\\\n\\x15\\xb6\\x86\\x22\\xdb\\xd3\\xd0\\x7d\\x87\\xda\\xca\\x99\\x80\\x9f\\x01\\xf8\\\n\\x8a\\xdd\\x3a\\x06\\x62\\xf7\\x2a\\x27\\x00\\x4c\\x64\\x20\\x10\\x0c\\xce\\x7b\\\n\\x16\\x75\\x19\\x26\\x53\\xc4\\x08\\xb1\\x29\\x2b\\xd1\\x3e\\xed\\x1f\\xf2\\xa1\\\n\\x76\\x1f\\x47\\xe7\\x54\\x95\\x4f\\xb3\\x53\\x30\\xe7\\x50\\xc4\\xfe\\xa6\\xd6\\\n\\xab\\x39\\xd1\\xa3\\x00\\x2a\\xed\\xd6\\xc1\\x8c\\x04\\x2e\\xde\\x7a\\x95\\x79\\\n\\x79\\x81\\x41\\x92\\x04\\xc8\\xb2\\x00\\x51\\x12\\x86\\x6d\\x78\\xe9\\xba\\x81\\\n\\x84\\xaa\\x41\\x8d\\xeb\\x69\\x57\\xd9\\x1f\\x2f\\xab\\x85\\x41\\x19\\xf7\\x0b\\\n\\x4c\\x40\\xdd\\x80\\xf1\\x12\\x38\\x3d\\x3d\\x67\\x46\\xf9\\x3b\\x76\\x6a\\xc8\\\n\\x79\\x4b\\x72\\xf6\\x8c\\x8a\\x4d\\x87\\x0e\\x1d\\xaa\\x4e\\x08\\xca\\x8f\\x01\\\n\\x7c\\x07\\x36\\x66\\x56\\x2c\\xd9\\x95\\x59\\x80\\x00\\x49\\x14\\x20\\xc9\\x3d\\\n\\x7f\\x99\\x76\\xc4\\x80\\xde\\x70\\xb2\\x4b\\x86\\xd3\\x09\\x44\\x63\\x09\\xc4\\\n\\xa3\\xc3\\x87\\x30\\xd2\\x22\\x80\\x64\\x3d\\x1a\\xdb\\xcb\\x5e\\xe2\\x78\\x3a\\\n\\x2e\\x1a\\xeb\\x17\\x56\\x54\\x98\\x5f\\xc6\\xa7\\x20\\x2f\\x7b\\xc2\\xb3\\x66\\\n\\xcd\\x4a\\x00\\x78\\xf0\\x40\\x73\\xdb\\x26\\x03\\xf8\\x0d\\x80\\x8b\\xac\\x94\\\n\\x17\\xf4\\xd4\\x51\\x51\\x41\\x60\\x70\\xb8\\x24\\xc8\\xb2\\x60\\x22\\x1f\\x34\\\n\\x05\\x04\\xb8\\x5c\\x32\\xb8\\xc1\\xa1\\xc6\\x07\\xc7\\xce\\x44\\x2d\\x0c\\xdd\\\n\\x9a\\x03\\x82\\x44\\x78\\xc1\\x00\\x7b\\x66\\x6e\\x65\\xd9\\x01\\xeb\\xca\\xa4\\\n\\x26\\xaf\\x9b\\xf2\\x9f\\xa9\\x2a\\x7f\\x6b\\x77\\x53\\xd3\\x67\\x24\\x26\\xfd\\\n\\x9a\\x38\\x6e\\x34\\x5b\\x8e\\x69\\xc3\\x1d\\x20\\x4a\\x0c\\x5e\\xaf\\x63\\xd8\\\n\\xae\\x9a\\x1d\\x5c\\x6e\\x19\\xaa\\xaa\\x0d\\xba\\x37\\xa4\\x6a\\x33\\x35\\xbc\\\n\\x13\\xa0\\x03\\x9c\\x53\\x23\\x80\\x49\\x04\\xe3\\xa9\\xc6\\xe6\\xb6\\x00\\x80\\\n\\xbe\\x4d\\x89\\x8f\\x38\\xd0\\x04\\x8e\\xbf\\x80\\xb3\\x57\\xe7\\xce\\x2c\\xb3\\\n\\x94\\x1a\\x9f\\x57\\x07\\x6c\\xdb\\x76\\xc8\\x13\\xea\\x8a\\xfe\\xd2\\x21\\x2b\\\n\\x7f\\xe3\\x71\\x99\\x4f\\x05\\x12\\x93\\xc1\\x41\\xdf\\x89\\x08\\x9e\\x3c\\x19\\\n\\xbf\\xaf\\x3e\\x49\\x14\\x90\\x4c\\x9e\\x0d\\xdb\\x08\\xc9\\x33\\x66\\x4b\\x07\\\n\\x00\\x2c\\x21\\xe2\\xe9\\x32\\x24\\x0a\\x09\\xa8\\x06\\x61\\x35\\xc8\\x78\\xac\\\n\\xa1\\xb9\\xf9\\xa2\\xb9\\x55\\x55\\x9f\\xa6\\x91\\x1d\\x46\\xde\\xf6\\x84\\xb7\\\n\\xd6\\xed\\x5b\\x1b\\x15\\xc2\\x9d\\x22\\x13\\x56\\x7b\\x5c\\x8e\\x0a\\x2b\\x65\\\n\\xe5\\x50\\xcb\\xe0\\xef\\xb2\\x90\\x2d\\xfd\\xd0\\x32\\x92\\x3c\\xf8\\x5a\\x53\\\n\\x42\\x87\\xf3\\x5a\\x7f\\x1f\\x44\\xe2\\x02\\x2b\\xf2\\x39\\xf7\\x80\\xd7\\xea\\\n\\xeb\\x5d\\x4a\\x82\\xb6\\x44\\x62\\xf1\\x45\\x3e\\xb7\\x1b\\xfe\\xcc\\x49\\x50\\\n\\x29\\x51\\xa2\\x47\\x07\\x7d\\x97\\x95\\xfc\\xa7\\x2b\\xc9\\x32\\x43\\x74\\x40\\\n\\x7e\\x98\\xdc\\x7d\\x34\\xbd\\x70\\x2e\\x70\\x9a\\x6c\\x45\\x3c\\xa7\\x1e\\xb0\\\n\\x7d\\xf7\\x81\\xa9\\x42\\x4c\\x3f\\x1e\\x8d\\xc7\\x17\\x39\\x15\\x87\\x2d\\xe3\\\n\\x03\\x80\\x10\\x3d\\xfb\\x54\\x12\\x13\\x18\\x24\\x39\\xff\\xeb\\xbb\\xa1\\xf5\\\n\\x8a\\x31\\xd3\\xa3\\x84\\x35\\xb8\\x61\\xf2\\x31\\xaa\\x1e\\x6c\\x3b\\xa0\\x76\\\n\\x4f\\xe3\\xfc\\x90\\x1a\\x6b\\x4e\\x24\\x35\\x9f\\x22\\x4b\\x18\\x57\\xe8\\xb3\\\n\\x5b\\x15\\x84\\x78\\x47\\xff\\x67\\x87\\x73\\xe4\\x1e\\x5b\\x73\\x3a\\xcf\\xce\\\n\\xfb\\xd9\\x80\\x36\\xf3\\x0b\\x59\\x5a\\xb6\\xdb\\x72\\x40\\x6d\\xdd\\xc1\\xea\\\n\\x78\\x5c\\xdd\\xa9\\x6b\\xba\\xcc\\x88\\x50\\xe4\\xcf\\x98\\xfe\\x97\\x19\\xae\\\n\\x83\\x27\\xc2\\x00\\x7a\\xa7\\x9d\\x4a\\xae\\x8b\\xa3\\xf4\\x88\\x92\\x00\\xb9\\\n\\xef\\x5e\\xa0\\x76\\x01\\xb0\\x12\\x53\\x32\\x09\\xe3\\x96\\x42\\xd3\\x96\\x1d\\\n\\x50\\x77\\xf0\\xe0\\x78\\x35\\x11\\xad\\xeb\\x4b\\x3d\\x0c\\xf8\\xbd\\x90\\x44\\\n\\xfb\\x43\\x86\\x3b\\xb8\\x0f\\xbc\\x77\\xb5\\xea\\x74\\x49\\x23\\xfe\\xe4\\x72\\\n\\x4f\\x1b\\x04\\x6e\\x18\\x70\\x9d\\x69\\xcc\\x7b\\xfd\\x64\\xa0\\xcd\\x8a\\xbc\\\n\\x25\\x07\\x70\\xce\\xd9\\x99\\x50\\xbc\\x3e\\xa9\\x69\\x4e\\x00\\x70\\x39\\x1c\\\n\\x70\\xa7\\xc8\\x50\\xb0\\x82\\xbb\\xa3\\x27\\xf3\\x4f\\x94\\xd8\\x88\\xdc\\x7c\\\n\\x87\\x22\\x88\\x0c\\x4a\\xef\\xbd\\xc0\\x7b\\x3a\\xff\\x59\\x87\\x24\\xe2\\x3d\\\n\\x4b\\xf2\\x56\\x84\\xb7\\xd4\\x35\\xfc\\xb1\\x3b\\x1a\\xbb\\x0e\\x00\\x18\\x11\\\n\\x4a\\x4b\\x8a\\xb3\\x86\\x05\\x86\\xe2\\x6a\\xdf\\x0e\\xef\\x87\\x2f\\x43\\x0a\\\n\\x1f\\x05\\x17\\x64\\x30\\x51\\x04\\xeb\\x3e\\x09\\x9f\\xdf\\x09\\x41\\x1c\\x9d\\\n\\x27\\xa6\\x38\\xe7\\xe8\\x0a\\xc6\\xa0\\x3b\\xc7\\xc3\\xd0\\x92\\x20\\x3d\\x81\\\n\\x84\\x77\\x2a\\xc2\\x97\\xac\\x42\\xac\\x24\\x75\\xa4\\x3d\\x91\\xd0\\x8e\\x86\\\n\\xa3\\xd1\\x76\\x30\\xfa\\xed\\x95\\xf3\\x67\\x3f\\x49\\x44\\x79\\x19\\xbf\\x4c\\\n\\x3b\\xe0\\xad\\xbd\\x0d\\x5f\\x0b\\x87\\x63\\xcf\\xf4\\x2d\\x26\\xfd\\x3e\\x0f\\\n\\x0a\\x3c\\x19\\x93\\xa0\\x86\\x51\\x78\\xf8\\x71\\x78\\x3f\\xdc\\x30\\x58\\x01\\\n\\x51\\x86\\x43\\xe6\\x70\\xba\\x46\\x77\\x43\\x5e\\x8d\\x6b\\x88\\xc6\\x01\\xae\\\n\\x0d\\xde\\xd0\\x09\\x4d\\x5e\\x8d\\x33\\xd3\\xbf\\x99\\xb2\\x8c\\xae\\x1b\\x38\\\n\\x1d\\xec\\x82\\xa6\\x6b\\x9a\\x2c\\x4b\\xf5\\xa2\\x28\\xff\\x78\\xe9\\xfc\\xea\\\n\\x3f\\xe5\\xa2\\x87\\x29\\x07\\x6c\\xdb\\x76\\xb8\\x38\\x2a\\x04\\x3f\\x4d\\x6a\\\n\\xba\\x04\\xf4\\xe4\\xdd\\x97\\x96\\x14\\x59\\x8a\\xcf\\xb8\\xda\\xb7\\xa3\\xf8\\\n\\xc0\\xbf\\x0c\\x3a\\xa6\\x2b\\x45\\x90\\xb5\\x20\\x0a\\x0a\\xd3\\x0f\\x63\\xcd\\\n\\x1f\\x6b\\x78\\x75\\xb7\\x0a\\x02\\xf0\\xe5\\x85\\x0a\\x2a\\x2f\\x12\\xd1\\x13\\\n\\x53\\x48\\xdd\\x76\\x6a\\xf9\\xd4\\x84\\xba\\x62\\x50\\x59\\x21\\x04\\x75\\xf0\\\n\\x8c\\xa8\\xbd\\xfa\\x61\\xb4\\xba\\x2f\\xc1\\xd1\\xf0\\x11\\x7c\\x14\\x39\\x86\\\n\\x93\\xb1\\x13\\xe8\\x52\\xcf\\xae\\xd6\\x39\\xe7\\x70\\x0b\\x3e\\x04\\xe4\\x62\\\n\\x8c\\x77\\x94\\x86\\xbd\\x8a\\xfb\\x91\\xf0\\x3b\\x27\\xd7\\xad\\x5b\\xb7\\xce\\\n\\x72\\xaf\\x30\\x65\\xc1\\x4d\\xbb\\xea\\xeb\\x63\\x31\\xb5\\x3f\\x0f\\xa6\\xa8\\\n\\xd0\\x97\\x32\\x3b\\x2d\\x13\\xe3\\xeb\\xef\\x87\\x12\\x1c\\x1c\\xc3\\xd2\\xbc\\\n\\x93\\x11\\x10\\xda\\x21\\x66\\x18\\x7a\\x7e\\xba\\x21\\x82\\xae\\xee\\x9e\\x7e\\\n\\xe7\\x77\\x33\\x3c\\xb8\\x2a\\x73\\xaf\\xb3\\x22\\xaf\\x6b\\x06\\x3a\\xf5\\xf1\\\n\\x10\\xc2\\xc7\\x00\\x00\\x41\\x12\\xf1\\x86\\x5c\\x84\\x3f\\x2b\\x25\\xe8\\xb4\\\n\\x98\\xa1\\xe1\\x11\\x7d\\xba\\x43\\x90\\x7f\\xdb\\x19\\x6d\\xff\\xfe\\x96\\xbb\\\n\\xb7\\x98\\x5e\\x64\\x64\\xbd\\xeb\\x6d\\xdd\\xb3\\x6f\\x45\\x38\\x12\\xef\\x37\\\n\\xbe\\x28\\x8a\\xf0\\x38\\xac\\x3f\\xf2\\x25\\xa7\\x58\\xfa\\x4b\\x92\\x04\\x31\\\n\\xf3\\xe3\\x46\\x18\\x68\\x07\\x9e\\x69\\xa7\\xc5\\x86\\xbc\\x20\\x32\\x88\\x82\\\n\\x82\\x08\\x31\\x6c\\x54\\xc6\\x63\\xb3\\x14\\x40\\x12\\x34\\xb8\\x12\\x93\\x44\\\n\\xb4\\x90\\x10\\xd1\\x70\\x27\\x13\\xa5\\xdb\\x97\\x3e\\x77\\xcd\\x2f\\x98\\xaa\\\n\\xfd\\xa8\\xf6\\xde\\xda\\x2c\\x71\\x76\\x13\\xb3\\xa0\\x44\\x42\\x7f\\x7a\\xe0\\\n\\xf7\\x02\\x8f\\xcb\\xd6\\x9c\\xdf\\x10\\x06\\x3b\\x8d\\x93\\x00\\xb7\\x98\\x7d\\\n\\xca\\x7c\\xc3\\x22\\x07\\x7c\\x2e\\x82\\xcf\\x45\\xb8\\x61\\x51\\x76\\xc7\\x5b\\\n\\x95\\x3f\\x00\\x15\\x6b\\xdd\\x95\\xf8\\xa3\\x54\\xd4\\x63\\xfc\\x1c\\x31\\xb8\\\n\\x2e\\x12\\xf8\\xb7\\xb9\\xcc\\x0e\\x5f\\xf9\\xec\\xf2\\xac\\xbb\\x85\\x59\\x5b\\\n\\x7c\\x63\\xc7\\xee\\x0e\\x35\\xa9\\x05\\x80\\x9e\\xa7\\x13\\x2f\\x1e\\x5f\\x6c\\\n\\xcb\\x01\\xe3\\x1a\\xfe\\x09\\xce\\x8e\\x3d\\xfd\\xdf\\x35\\x6f\\x19\\x4a\\x94\\\n\\x51\\x4c\\x21\\x19\\x82\\x01\\xc2\\x13\\x5a\\x00\\x7f\\xd0\\xed\\xaf\\xe0\\xcd\\\n\\xc1\\x1f\\x0b\\xb8\\x0a\\x1e\\xd8\\x70\\xf3\\x86\\x94\\x19\\x74\\x59\\x7b\\x80\\\n\\xe2\\x70\\xde\\xd1\\x67\\x6e\\xb7\\xcb\\x69\\x7b\\xc5\\x1b\\x9a\\x76\\x17\\x06\\\n\\xfa\\x9b\\xb9\\x8a\\x6c\\xd5\\x93\\x0f\\x34\\x10\\x7e\\x9c\\x1c\\x37\\x0a\\xc6\\\n\\x07\\x00\\xba\\xbf\\x33\\x1a\\x5e\\xbf\\xea\\xa5\\x55\\x29\\xa7\\x79\\x59\\x1d\\\n\\xb0\\x74\\x7e\\xf5\\x9f\\x9c\\x0e\\xe5\\x10\\x00\\x58\\x89\\xf1\\x0f\\x45\\x2d\\\n\\x98\\x89\\x33\\x15\\xf7\\xa0\\xcf\\x09\\x2e\\x66\\x36\\x1e\\x9f\\x5f\\x74\\x00\\\n\\xeb\\x92\\x25\\xd8\\x61\\x58\\x9b\\x42\\xe7\\x06\\xbf\\xa9\\x33\\x1a\\xde\\xb8\\\n\\x78\\xdb\\xe2\\x61\\xf7\\x5c\\x53\\x2b\\x1f\\x09\\xf4\\x15\\x87\\x22\\x27\\xd3\\\n\\x65\\x26\\x9b\\x25\\x34\\xe5\\x6f\\x71\\xb2\\xe6\\x11\\xc4\\x26\\x2c\\x81\\x2b\\\n\\x39\\x42\\xd1\\xc8\\x2c\\xfc\\x4a\\x2b\\x42\\x9d\\xb5\\x80\\x65\\x9e\\xe0\\x2b\\\n\\xd8\\x07\\x8e\\x61\\x4f\\xe4\\x9b\\x72\\xc0\\x92\\x45\\xf3\\xda\\x02\\x05\\xde\\\n\\x87\\xf2\\xa1\\x86\\x5a\\x38\\x1b\\x46\\xe9\\x65\\x96\\xcb\\x19\\xcc\\xfc\\x42\\\n\\x8d\\x53\\x6a\\xd9\\x1d\\x86\\x1b\\xbf\\x1f\\x95\\x61\\x27\\x35\\x04\\xbe\\x76\\\n\\xe9\\xf3\\xd7\\xdc\\x30\\xf0\\x98\\xe9\\xb5\\x7f\\xf7\\xa9\\xe3\\x3f\\x05\\xe1\\\n\\x50\\x3e\\x14\\x29\\xe8\\xaa\\x33\\x2d\\x6b\\x30\\x19\\x27\\x26\\xdc\\x8a\\xf7\\\n\\x66\\x3e\\x8b\\x98\\x73\\x6a\\x56\\xf9\\x98\\xab\\x0c\\x87\\x2e\\x7d\\x0e\\x27\\\n\\x27\\xdc\\x0a\\x3e\\x20\\xed\\xa4\\x0b\\x02\\xfe\\x53\\x2b\\xb6\\xa5\\x6f\\x1e\\\n\\x21\\xe2\\xfc\\xa9\\xc5\\x2f\\xae\\xe8\\x57\\xc4\\xb4\\x03\\x96\\x2c\\x59\\xa2\\\n\\x71\\xce\\xbf\\x67\\xa1\\xb1\\x30\\x08\\xcf\\x0f\\x3d\\xc8\\x8c\\x04\\x3c\\xa1\\\n\\x83\\xa6\\x2a\\x50\\x95\\x52\\x1c\\xae\\x7a\\x1c\\x27\\x26\\xde\\x01\\x4d\\x2a\\\n\\xc4\\xd1\\x69\\x0f\\x21\\xe6\\x4a\\x9f\\xff\\x14\\x73\\x96\\xe3\\x68\\xd9\\x43\\\n\\xd0\\x44\\x3f\\x8e\\x4f\\xbc\\x03\\x87\\xab\\x7e\\x01\\x55\\x99\\x08\\x00\\xf8\\\n\\x9d\\xe6\\x47\\x98\\x8f\\x7c\\xac\\x89\\x11\\x03\\xcb\\x3c\\x51\\x29\\x62\\x89\\\n\\x64\\xbf\\x1d\\x6d\\xe4\\x86\\xb6\\x6d\\x01\\x61\\x59\\x16\\xb1\\x16\\x5d\\xe0\\\n\\xd7\\x09\\x1a\\x3d\\x39\\x54\\xd6\\x13\\x79\\x17\\xe5\\xad\\xdf\\xcd\\xda\\x4e\\\n\\x52\\x2e\\x46\\x4b\\xe5\\xa3\\x48\\x8a\\x83\\x53\\x47\\x88\\x6b\\x28\\xea\\xd8\\\n\\x84\\x40\\xc7\\x66\\x38\\x63\\xc7\\x00\\x00\\x31\\xe7\\x54\\x74\\x14\\x2d\\x47\\\n\\x67\\xd1\\xd5\\xe0\\x34\\x38\\x34\\x2e\\x25\\x3b\\xe1\\x6f\\x5a\\x8b\\xbb\\xa3\\\n\\x5e\\xe4\\xe5\\xa1\\xae\\x0c\\x48\\x4c\\xc4\\xbd\\x35\\xb7\\x40\\x33\\x34\\x3c\\\n\\xd5\\xb0\\x61\\xd0\\x53\\xa1\\x43\\x50\\x39\\x49\\xd3\\xde\\x5a\\xf3\\xfa\\x27\\\n\\x96\\xef\\xaa\\x02\\xe8\\x01\\x1d\\xbc\\x11\\xe9\\xf3\\x42\\xeb\\xb9\\xc0\\xaf\\\n\\x53\\xe2\\x02\\xd3\\x24\\x63\\x58\\x26\\x81\\x27\\x9c\\xfd\\xea\\x37\\xc8\\x81\\\n\\xa3\\x65\\xeb\\x86\\x19\\x1f\\x00\\x38\\x89\\x38\\x5d\\xfc\\x45\\x9c\\x2e\\xfe\\\n\\xa2\\x29\\x7d\\x93\\x52\\x00\\x2f\\x7a\\x96\\x41\\x8b\\x8e\\xec\\x5b\\x07\\x24\\\n\\x26\\xe2\\xbe\\xf9\\xb7\\xe0\\xd2\\x92\\x9e\\x7c\\x84\\x7b\\xe6\\xae\\xca\\xe4\\\n\\x04\\x85\\xf1\\xe4\\x37\\x00\\xfc\\xc0\\x72\\x9f\\xac\\x9e\\x31\\xed\\x20\\x01\\\n\\x4f\\xa5\\x3e\\x4b\\xfb\\x85\\x84\\xb4\\x7c\\x6e\\x45\\xc5\\x29\\x5d\\xd2\\xbf\\\n\\x80\\x14\\x4e\\x72\\x45\\x9b\\xb3\\xb6\\x71\\xaa\\xe4\\x7a\\xc4\\x9c\\x65\\x56\\\n\\x55\\x4b\\x89\\x01\\x03\\xef\\x04\\x9b\\xf2\\x52\\x57\\x3a\\x64\\x26\\xe2\\x9b\\\n\\x0b\\x6e\\xed\\x37\\x3e\\x00\\xcc\\x99\\x38\\x03\\xf7\\xcc\\x5d\\x05\\x81\\xa5\\\n\\xbe\\x4e\\x39\\x70\\xd7\\xaa\\x97\\x56\\x59\\x0c\\xe6\\xf7\\xc2\\x12\\xd2\\xf7\\\n\\x00\\x0c\\xdd\\x54\\xad\\xd7\\x25\\x2c\\xae\\xae\\x9e\\x1c\\xec\\x69\\x80\\x52\\\n\\x3e\\xbc\\xa7\\xa8\\x27\\x32\\xd6\\xad\\x0b\\x1e\\xb4\\x97\\xac\\xb4\\xa3\\x56\\\n\\x4a\\x3e\\x8a\\x7c\\x80\\x70\\x32\\xa7\\xec\\xc1\\x8c\\x28\\x82\\x8c\\xfb\\x17\\\n\\x7e\\x15\\x33\\xc7\\x95\\x0f\\x3b\\x97\\xc5\\x09\\xa5\\x1d\\xb1\\xd0\\x3c\\x5b\\\n\\x0e\\xa8\\xae\\x9e\\x1c\\xe4\\x1c\\x3f\\x19\\x70\\xe8\\xc3\\xa4\\x2e\\xac\\xa8\\\n\\x99\\x36\\x6d\\x60\\xf0\\xe9\\xd2\\x54\\x65\\xa5\\x64\\xe6\\xcd\\xf0\\x60\\xe0\\\n\\x0b\\xd0\\x45\\x7b\\xd9\\x15\\xa9\\x68\\x1b\\x92\\x73\\x94\\x4f\\x64\\x26\\xe2\\\n\\xde\\x9a\\xd5\\xa8\\x28\\x4a\\x9f\\x89\\x22\\xb2\\xe1\\xc9\\xc3\\x03\\x58\\x62\\\n\\x7b\\x5a\\xa0\\x18\\xea\\x2f\\x00\\xb4\\x02\\x88\\x18\\x60\\x2b\\x16\\xcc\\x9a\\\n\\x3a\\xe8\\xd2\\x26\\xf0\\x94\\xd9\\xd2\\x06\\xcb\\xbc\\xe9\\x1e\\xf2\\x59\\x5f\\\n\\x23\\x64\\xe2\\xe3\\x88\\xf9\\x4c\\x41\\x46\\x84\\x80\\xd3\\xdc\\x2b\\xa7\\x65\\\n\\x41\\xc2\\x37\\x16\\xdc\\x86\\x59\\x25\\xc3\\xaf\\xfc\\x3e\\x0e\\x9e\\x6c\\xc1\\\n\\x93\\xfb\\xd6\\x43\\xd3\\x53\\xdf\\x8c\\x89\\x63\\xbe\\x6d\\x07\\xcc\\x9a\\x35\\\n\\x2b\\xc1\\xc1\\xbf\\x03\\x4e\\xf7\\xce\\xab\\x2a\\x7b\\x77\\xe8\\x79\\xde\\x93\\\n\\xd2\\x37\\x8c\\xb8\\x23\\xf3\\x5c\\x3e\\xea\\x4c\\xff\\x0f\\xd9\\xe1\\x54\\xec\\\n\\x94\\x29\\x39\\x46\\x0c\\xf7\\xcc\\xbb\\x19\\xdf\\xbf\\xe2\\x5e\\x5c\\xec\\xcb\\\n\\xf8\\x62\\x70\\x38\\x44\\x05\\x6b\\x17\\xae\\xc1\\xcc\\x71\\xe9\\xa7\\xc4\\x7b\\\n\\x3f\\x39\\x88\\x27\\xf6\\xbe\\x98\\xd6\\xf8\\x3d\\xf0\\xe9\\x23\\x96\\x83\\xd0\\\n\\xd8\\xdc\\xa6\\x02\\x18\\xb6\\x24\\xf5\\x9f\\xd9\\x89\\x29\\xef\\xff\\x9b\\xe9\\\n\\x7a\\x0c\\xdd\\x40\\x77\\x24\\x31\\x28\\xaf\\xd3\\x0c\\x92\\x24\\xc0\\xed\\x95\\\n\\xb1\\x52\\x9b\\x9a\\x75\\xfe\\x4f\\x44\\x58\\x33\\xfb\\x7a\\x5c\\x7e\\x71\\xcf\\\n\\xbb\\x3b\\x22\\x6a\\x14\\x3f\\xaf\\x7b\\x0e\\x1f\\x87\\x86\\x47\\x6b\\xdd\\xb2\\\n\\x13\\xff\\xb8\\xf0\\xab\\x98\\x5c\\x90\\xfe\\x95\\x11\\x7b\\x3f\\x39\\x88\\xff\\\n\\x6e\\x7c\\x19\\x46\\xf6\\x7d\\x85\\xd3\\x23\\xb9\\x32\\x49\\x19\\x0f\\xe8\\x2a\\\n\\xb8\\x1c\\x51\\x97\\xf9\\xd4\\x51\\x26\\x30\\x78\\x0b\\x1c\\xf0\\x17\\xba\\xe0\\\n\\xf6\\x28\\x90\\x15\\x11\\x82\\xc0\\x7a\\x72\\x47\\xa9\\xe7\\x8f\\x31\\x82\\x20\\\n\\xf4\\x64\\x55\\xb8\\x3d\\x0a\\xfc\\x01\\x17\\xbc\\x05\\x0e\\x30\\xc6\\x10\\xe3\\\n\\xd9\\xaf\\xb1\\xd5\\x97\\x5e\\xdb\\x6f\\x7c\\x00\\xf0\\x28\\x2e\\x7c\\x7b\\xe1\\\n\\x9d\\xc3\\x7a\\x82\\x5b\\x76\\x61\\xed\\xc2\\x35\\xf9\\x32\\x3e\\x00\\x78\\x47\\\n\\xac\\x07\\x1c\\x68\\x69\\xb9\\xcc\\x30\\xd8\\xad\\x04\\xac\\xe6\\x43\\xde\\x4a\\\n\\x28\\x25\\x4e\\x63\\x7a\\xcb\\x5a\\x48\\xc9\\xce\\x91\\x6a\\xbe\\x9f\\x6b\\xd4\\\n\\x29\\xd0\\x32\\xac\\x37\\xbf\\x32\\xe3\\x4a\\x5c\\x5b\\x9e\\x3a\\x13\\x62\\x60\\\n\\x4f\\xf0\\xf4\\x1a\\x7f\\x52\\x41\\xfa\\x17\\x2c\\x5a\\x34\\x3e\\x00\\xa8\\x23\\\n\\xfe\\x03\\x0e\\x2f\\x71\\x2e\\x54\\x36\\x1d\\x99\\xc1\\x19\\x2d\\x30\\xc0\\x17\\\n\\x10\\xa7\\x19\\x20\\x3e\\x51\\x4c\\x06\\x4b\\x26\\x7f\\xf0\\xb3\\x02\\x6f\\x78\\\n\\xff\\x88\\xb6\\x7f\\xa3\\x3a\\x19\\xa1\\x0c\\x11\\x97\\x1b\\x66\\x5c\\x85\\x6b\\\n\\xca\\x3f\\x97\\xf6\\x7c\\x97\\x1a\\xc1\\x93\\x7b\\xd7\\x63\\xf5\\xa5\\xd7\\x62\\\n\\x8a\\x3f\\xfd\\x73\\x27\\xd9\\x6e\\xb8\\x69\\x38\\x7d\\x4e\\x7f\\x41\\x83\\xbf\\\n\\x34\\x4b\\x86\\x91\\xfc\\x2e\\x38\\x3d\\x08\\xf0\\x11\\x89\\x11\\x7f\\x3d\\x71\\\n\\x31\\x8e\\xf1\\xcc\\x33\\xaf\\x2f\\x55\\x2e\\xc6\\x8a\\xe9\\xf6\\x5f\\x90\\x68\\\n\\xe3\\xca\\xef\\x85\\x1f\\x3c\\xa7\\xbf\\x1f\\x40\\x37\\x1f\\x4a\\xd0\\x2d\\x2d\\\n\\x0f\\x01\\x5a\\x15\\x88\\x7e\\x05\\x20\\xef\\x2b\\xa6\\x4b\\x4c\\xe4\\xca\\xbe\\\n\\x7e\\xf8\\x6d\\xbc\\xd6\\x62\\xef\\x45\\x58\\xf6\\x8d\\x0f\\x10\\x51\\xf3\\x79\\\n\\xf5\\x1b\\x32\\xfc\\xb5\\x52\\x17\\x22\\x9e\\x95\\x00\\xae\\x05\\xf0\\x79\\x58\\\n\\x7c\\xd6\\x2c\\x15\\xeb\\xb5\\x02\\x3c\\xad\\xa7\\x7e\\xc5\\xd9\\x50\\xac\\xf6\\\n\\x84\\x5c\\x8c\\xdf\\xcb\\x83\\xe7\\x95\\x03\\x86\\xc2\\x7f\\x37\\xbd\\x0c\\xc4\\\n\\xe7\\x80\\xa8\\x12\\x1c\\x95\\x20\\x7c\\x1e\\xc0\\x94\\x2c\\xc5\\x8e\\x81\\xe3\\\n\\xcf\\x00\\x9a\\x01\\xde\\xf2\\xb0\\x3a\\x41\\x7f\\x9b\\x5c\\xaf\\x98\\x6d\\xd3\\\n\\xac\\x13\\xf2\\x60\\x7c\\x70\\x03\\xf3\\xce\\x6b\\x07\\x0c\\x85\\xbf\\x38\\xbd\\\n\\x18\\x84\\x37\\x90\\xfe\\xfd\\x74\\x7b\\xc1\\x71\\x1d\\xdd\\xd6\\x72\\xfa\\x6c\\\n\\x21\\xd0\\x95\\xcf\\x5f\\xd3\\x06\\x70\\xd3\\xd1\\xbd\\x6c\\x4e\\xc8\\x87\\xf1\\\n\\x01\\xb4\\x6c\\xbd\\x73\\x53\\xe5\\x5f\\xcd\\xaf\\x28\\x01\\x00\\xdd\\xd6\\x72\\\n\\x1a\\x42\\xcb\\x42\\x80\\xbe\\x0e\\xe0\\x2f\\x00\\xba\\x7b\\xff\\x76\\x02\\xf4\\\n\\x75\\x08\\x2d\\x97\\x0f\\x32\\x3e\\x00\\x10\\x38\\x81\\xff\\x8f\\x95\\x76\\x32\\\n\\xdd\\x13\\xf2\\x64\\x7c\\x70\\xf0\\x97\\x7a\\xd4\\xbb\\x00\\x58\\xfe\\x9b\\xe5\\\n\\x25\\xba\\x41\\xef\\x03\\xb0\\x34\\xd3\\x1a\\xda\\x13\\xf2\\x65\\x7c\\x00\\x11\\\n\\x5d\\x96\\xa7\\xbe\\x7d\\xdb\\x6b\\xa7\\x47\\xe4\\x65\\x1b\\xe7\\x1b\\x47\\x5e\\\n\\x39\\xd2\\x5d\\x76\\x7d\\x79\\x09\\x08\\x0b\\xad\\x94\\x6b\\xe9\\x38\\x06\\x10\\\n\\x50\\x59\\x34\\x35\\x9f\\xc6\\x07\\x07\\xfd\\x72\\xdb\\x1d\\x7f\\x7a\\x05\\x38\\\n\\x0f\\x7e\\x47\\x6c\\xb4\\x88\\x1b\\xca\\x0f\\x1d\\x82\\xba\\x0a\\x80\\xa5\\xf7\\\n\\x7e\\xbe\\x7e\\xf8\\x6d\\x74\\x74\\x77\\x61\\xef\\xf1\\x77\\xf3\\x62\\x7c\\x80\\\n\\x7f\\xa2\\xea\\xca\\xbf\\xf6\\x7d\\xbb\\x20\\x86\\xa0\\x3e\\x96\\x3d\\x77\\xf5\\\n\\x4a\\x0e\\x6c\\x3c\\x87\\x2a\\x70\\x4e\\xb4\\xf2\\xad\\x35\\x6f\\xf6\\xcf\\xca\\\n\\xfe\\xaa\\x6e\\xc2\\xb9\\x52\\x7b\\xe7\\xa6\\x97\\xc1\\xf1\\xe8\\xb9\\x6a\\x9f\\\n\\x83\\x1e\\x19\\x68\\x7c\\xe0\\x02\\xeb\\x01\\x00\\x00\\x0e\\x5a\\xf6\\xfc\\xd5\\\n\\xcf\\x70\\xe0\\xae\\xd1\\x6c\\x96\\x80\\x67\\x6b\\xd7\\x6c\\xba\\x1b\\x34\\x38\\\n\\x67\\xfe\\x82\\xea\\x01\\x00\\x00\\x02\\x2f\\x74\\xf9\\xee\\x03\\xf0\\xf2\\x28\\\n\\x36\\xba\\xb1\\xd0\\xe5\\xbb\\x6f\\xa8\\xf1\\x81\\x0b\\xd1\\x01\\x00\\x36\\xdc\\\n\\xbc\\x21\\x11\\x70\\xf9\\x56\\x13\\xf0\\xf8\\xc8\\xb7\\xc6\\x1f\\x0b\\xb8\\xbc\\\n\\xb7\\x6c\\xb8\\x79\\x43\\x22\\xd5\\xd9\\x0b\\x6f\\x08\\x1a\\xc2\\xb2\\x67\\xaf\\\n\\xb9\\x91\\x13\\x7f\\x02\\x40\\xe6\\x7d\\x48\\xeb\\x9c\\x00\\xe7\\xdf\\xd8\\x7a\\\n\\xd7\\xe6\\x3f\\x64\\x12\\xba\\x20\\x7b\\xc0\\x40\\x6a\\xef\\x7a\\xf3\\xf7\\x3a\\\n\\x57\\xab\\x08\\x78\\x04\\x40\\x4e\\x3f\\x72\\xd3\\x4b\\x9c\\x83\\x7e\\x4e\\xaa\\\n\\x5e\\x95\\xcd\\xf8\\xc0\\x58\\x0f\\x18\\xc4\\x55\\xcf\\x5c\\x55\\x6a\\x08\\xf4\\\n\\x2d\\x80\\x6e\\x07\\x30\\x29\\x6b\\x81\\xc1\\x7c\\x04\\xf0\\x17\\x98\\xce\\x1f\\\n\\xb7\\xf2\\x90\\xde\\x98\\x03\\x52\\xb0\\x6e\\xdd\\x3a\\xb6\\x63\\x72\\xdd\\x3c\\\n\\x30\\x5c\\x01\\x83\\x2f\\x00\\x61\\x06\\x01\\x93\\x38\\x50\\x08\\x00\\x04\\x04\\\n\\x79\\x8f\\xc1\\xdf\\x03\\xb1\\xbd\\x8c\\xf4\\x3f\\x7f\\xf6\\xe8\\x67\\x1b\\xec\\\n\\x3c\\xa6\\xfa\\xff\\x04\\xd9\\x5d\\x5d\\xb4\\x5f\\x55\\xda\\x00\\x00\\x00\\x00\\\n\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x06\\x88\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x28\\x00\\x00\\x00\\x28\\x08\\x06\\x00\\x00\\x00\\x8c\\xfe\\xb8\\x6d\\\n\\x00\\x00\\x00\\x04\\x73\\x42\\x49\\x54\\x08\\x08\\x08\\x08\\x7c\\x08\\x64\\x88\\\n\\x00\\x00\\x00\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0d\\xd7\\x00\\x00\\x0d\\xd7\\\n\\x01\\x42\\x28\\x9b\\x78\\x00\\x00\\x00\\x19\\x74\\x45\\x58\\x74\\x53\\x6f\\x66\\\n\\x74\\x77\\x61\\x72\\x65\\x00\\x77\\x77\\x77\\x2e\\x69\\x6e\\x6b\\x73\\x63\\x61\\\n\\x70\\x65\\x2e\\x6f\\x72\\x67\\x9b\\xee\\x3c\\x1a\\x00\\x00\\x06\\x05\\x49\\x44\\\n\\x41\\x54\\x58\\x85\\xcd\\x98\\x5b\\x6c\\x14\\x55\\x18\\xc7\\xff\\x67\\x66\\xce\\\n\\xee\\x76\\x76\\xb6\\x2d\\xbb\\x6d\\x97\\xa6\\x0b\\x42\\x62\\xa9\\xad\\x28\\xf6\\\n\\x82\\x17\\xe2\\x03\\xc1\\x1b\\x9a\\x28\\x9a\\x88\\x9a\\x10\\x6a\\x90\\x08\\x3e\\\n\\x98\\x88\\x97\\xa0\\xc6\\x44\\xf7\\xc9\\x0b\\x60\\xa2\\x10\\xa3\\xa2\\x12\\x2c\\\n\\x6a\\xa2\\xc4\\xc4\\x94\\x07\\x25\\x11\\xe3\\x83\\x77\\xba\\x94\\x22\\xb6\\xb4\\\n\\x45\\x28\\x2d\\xa5\\xb7\\xdd\\xb2\\x9d\\xee\\xec\\x65\\x66\\xce\\x1c\\x1f\\xea\\\n\\x2e\\x5d\\xba\\x6d\\x97\\x76\\x17\\xfd\\xbf\\xcd\\x99\\xef\\x3b\\xf3\\x9b\\x73\\\n\\xce\\xf7\\x9d\\x73\\x3e\\xe0\\x7f\\x2e\\x32\\x57\\xc7\\xc7\\x3f\\x7a\\xa9\\xde\\\n\\x22\\xfc\\x0e\\x9b\\x24\\xdd\\x41\\x08\\xaa\\x18\\xb3\\x4a\\x41\\xf8\\x44\\x7f\\\n\\x9c\\x70\\x51\\x14\\x46\\x00\\x7e\\x4a\\x37\\xcd\\x23\\x16\\xe1\\x47\\x3e\\x7b\\\n\\x62\\xe7\\xb1\\xbc\\x03\\xae\\x7f\\xcf\\xaf\\xb8\\x1c\\xf1\\xad\\x44\\x22\\xdb\\\n\\x04\\x88\\x1e\\x5f\\x59\\x19\\x59\\xb8\\xc0\\xed\\x28\\x72\\x3a\\x21\\xdb\\x1d\\\n\\x10\\xc8\\x44\\x77\\x16\\xe7\\x88\\xc6\\xe3\\x50\\xa3\\x1a\\x06\\x46\\x43\\xf1\\\n\\xfe\\xe0\\x30\\x67\\x16\\x0f\\x1a\\x9c\\xbd\\xc3\\x45\\xf6\\xe1\\x81\\xc6\\x5d\\\n\\x5a\\x4e\\x01\\x57\\xfb\\xfd\\xd2\\xd2\\xc5\\x89\\x6d\\x44\\xc0\\x6b\\x0b\\x17\\\n\\xb8\\x85\\xea\\x6b\\x96\\xc8\\xde\\x22\\x77\\xf6\\xbf\\xc7\\x81\\xa1\\xf0\\x28\\\n\\x3a\\xfa\\x7a\\xb4\\xc1\\xe0\\x28\\xe7\\xe0\\xaf\\x9e\\xed\\x75\\xec\\xf9\\xd1\\\n\\xef\\x37\\xe7\\x0d\\xf8\\xf8\\xde\\x17\\xaf\\x17\\xa9\\xd0\\xec\\x76\\xb9\\x16\\\n\\xde\\x5a\\xb3\\x5c\\x2e\\x94\\x9d\\x59\\x52\\x65\\xd6\\x98\\xa6\\xe1\\xd7\\xf6\\\n\\x93\\xd1\\xb0\\x16\\xb9\\x90\\xb0\\x12\\xeb\\x3e\\x7f\\xe2\\xed\\xf6\\x39\\x03\\\n\\x6e\\xda\\xb7\\xfd\\x61\\x4e\\xc4\\xa6\\x86\\xca\\x2a\\x7b\\xa5\\xcf\\x27\\x90\\\n\\xb9\\x2f\\xd9\\x34\\x71\\x70\\x74\\x9e\\xef\\xb5\\x8e\\x75\\x77\\x25\\xb8\\x85\\\n\\x8d\\x9f\\x6e\\x7e\\xf3\\xeb\\xe9\\x6c\\xc5\\x69\\xe1\\xf6\\x6f\\xdf\\x24\\x09\\\n\\xd2\\xc7\\x77\\xd7\\xdd\\x5c\\xe0\\x2b\\x2d\\x23\\xb9\\x82\\x03\\x00\\x02\\x82\\\n\\x92\\xc2\\x62\\x52\\xee\\xf1\\xd0\\x73\\x43\\x83\\x0f\\xdc\\x78\\xff\\xaa\\xbe\\\n\\xb6\\xe6\\x9f\\xdb\\x32\\xdb\\x66\\x50\\xe3\\x27\\x2f\\x3d\\x64\\x13\\x85\\x2f\\\n\\xee\\x69\\xb8\\xc5\\x51\\xa4\\x28\\x39\\x03\\xcb\\xa4\\x70\\x24\\x82\\xc3\\x81\\\n\\x3f\\xe2\\xa6\\x69\\x3d\\xfa\\xe9\\xe6\\x37\\x9a\\x67\\x05\\xdc\\xf8\\xd1\\xf6\\\n\\x6a\\x2a\\x8a\\x2d\\x77\\x35\\xac\\x94\\x3d\\x85\\x45\\x79\\x85\\x4b\\x6a\\x24\\\n\\x1c\\xc6\\xf7\\xc7\\x8e\\x46\\x99\\x49\\x6a\\x9b\\xb6\\xbc\\xd1\\x35\\xf9\\x9d\\\n\\x30\\xf9\\x61\\xb5\\xdf\\x2f\\x51\\x2a\\x35\\xd7\\x2d\\xab\\x72\\x5c\\x2d\\x38\\\n\\x00\\x28\\x2d\\x2e\\xc6\\x4d\\xd7\\x56\\x3a\\x28\\x25\\x87\\xd6\\x7f\\xb5\\x3e\\\n\\x6d\\xd9\\xa5\\x01\\x2e\\x5d\\x1c\\xdb\\xb6\\x40\\x51\\x2a\\x96\\xf9\\x16\\x09\\\n\\xb8\\xca\\xba\\x6e\\xf1\\x35\\x42\\x91\\xd3\\xb9\\xc8\\xa9\\x56\\x3e\\x3d\\xb9\\\n\\x3d\\x35\\xc5\\x1b\\x9b\\x5e\\x70\\x52\\x26\\x0d\\xdc\\x77\\xf3\\x2a\\x57\\xa1\\\n\\x73\\x7e\\xa9\\x64\\xae\\x0a\\x47\\xc6\\xf1\\xed\\xd1\\xdf\\x55\\xaa\\xdb\\xcb\\\n\\xf7\\x6e\\xf5\\x47\\x81\\x49\\x23\\x28\\x32\\xba\\xb5\\xdc\\x53\\x2a\\xe4\\x1b\\\n\\xce\\x26\\x52\\xf8\\x5c\\x15\\x19\\xdf\\x15\\x2b\\x2e\\x54\\xb8\\x4b\\x04\\x5d\\\n\\x8a\\x6e\\x49\\xb6\\x4d\\x00\\x72\\x10\\x11\\x78\\x7e\\xf9\\x92\\xa5\\x79\\xa5\\\n\\xb3\\x89\\x14\\xf5\\xde\\x5a\\x54\\xbb\\xab\\xa6\\x85\\xac\\x59\\xba\\x44\\x11\\\n\\x05\\xe9\\xb9\\x34\\xc0\\xc6\\x8f\\x5f\\xb8\\x41\\x92\\xa4\\xc2\\x7c\\x06\\x86\\\n\\x5d\\xb4\\x63\\xa5\\xb7\\x1e\\x0a\\x55\\xa0\\xea\\x2a\\x06\\xb5\\xa1\\x8c\\x76\\\n\\x9e\\xc2\\x22\\x48\\x92\\xb8\\x60\\xc3\\xbe\\xe7\\x6b\\x52\\x80\\x44\\x14\\xd7\\\n\\x2e\\x2a\\xf5\\x4a\\xf9\\x84\\x6b\\xf0\\xd6\\x42\\xa6\\x32\\x54\\x5d\\x45\\x60\\\n\\xe8\\x38\\x4c\\x2b\\xf3\\x36\\x4c\\x40\\xe0\\x2b\\x29\\x15\\x29\\x97\\xd6\\xa6\\\n\\x00\\xa9\\x28\\xad\\x29\\x2b\\x2e\\x76\\xfc\\xd7\\x70\\x49\\x95\\x15\\xbb\\x0b\\\n\\x28\\x95\\xd6\\xa4\\x00\\x39\\xe7\\x35\\xf9\\xd8\\x31\\xe6\\x02\\x07\\x00\\x45\\\n\\x8a\\x13\\x96\\x85\\xeb\\x53\\x80\\x96\\xc5\\x3d\\xb2\\x3d\\xb7\\x03\\x98\\x0e\\\n\\x37\\x9e\\x35\\x1c\\x00\\x38\\x1d\\x0e\\x70\\xcb\\x2a\\xb9\\x04\\xc8\\x99\\x9d\\\n\\x4a\\xb3\\x2f\\x41\\x9f\\xab\\x02\\x36\\x91\\xce\\x6a\\x67\\x13\\x29\\xea\\xbc\\\n\\x2b\\x20\\x53\\x19\\x11\\x43\\x43\\xeb\\x70\\x5b\\xd6\\x70\\x00\\x40\\x45\\x09\\\n\\xcc\\x62\\x05\\x29\\xc0\\x89\\x7c\\xcd\\x67\\x74\\x5a\\xe4\\xaa\\x40\\xb5\\xbb\\\n\\x0a\\xf5\\xde\\xda\\x19\\x21\\x93\\xa9\\x44\\xa1\\x0a\\x22\\x86\\x86\\xc0\\x50\\\n\\x2b\\x74\\xa6\\x67\\x0d\\x97\\x14\\x27\\x84\\xa7\\x00\\x05\\x22\\x24\\x0c\\x93\\\n\\xcd\\xe8\\x30\\xa0\\x0d\\x41\\xd5\\x55\\x28\\x54\\xc1\\x4a\\x6f\\x3d\\xec\\xa2\\\n\\x7d\\x8a\\x4d\\x7a\\x2a\\x19\\xc7\\xd1\\xc1\\xc0\\x9c\\xe0\\x0c\\x66\\x42\\x22\\\n\\x42\\xfc\\x12\\xa0\\x20\\x0c\\x6b\\xf1\\xf8\\x8c\\x4e\\xa6\\x65\\x22\\x30\\x74\\\n\\x1c\\xaa\\x3e\\x0e\\x99\\xca\\x68\\xf0\\xd6\\xa6\\x41\\x4e\\x5d\\x73\\xad\\x57\\\n\\x34\\xad\\x93\\x15\\x89\\xc5\\x20\\x08\\x64\\x38\\x05\\x48\\x08\\x3a\\x55\\x2d\\\n\\x32\\xab\\xe3\\x04\\x64\\xeb\\x14\\xc8\\xcb\\xe1\\x8e\\xcd\\x03\\x0e\\x00\\x54\\\n\\x2d\\x0a\\x22\\x90\\x8e\\x14\\xa0\\xc1\\xd8\\xe1\\xc1\\x50\\x28\\x96\\x8d\\xb3\\\n\\x69\\x99\\x68\\x1d\\x6e\\x83\\x66\\x68\\x90\\xa9\\x8c\\x3a\\xef\\x8a\\x54\\x40\\\n\\x68\\xff\\x06\\x84\\x31\\x0f\\x38\\x00\\x18\\x18\\x0d\\x46\\x13\\xba\\xf1\\x5d\\\n\\x0a\\x90\\x33\\xf3\\x48\\xff\\x68\\x90\\xf1\\x59\\x02\\x25\\x29\\x9d\\xe9\\x68\\\n\\x19\\x6a\\x85\\x66\\x68\\x50\\xa8\\x02\\x85\\x2a\\xd0\\x0c\\x0d\\x2d\\x73\\x0c\\\n\\x88\\xc9\\xe2\\xe0\\x18\\x18\\x0d\\x59\\x4c\\x60\\x3f\\xa4\\x00\\x9b\\x9e\\xdc\\\n\\x75\\xc2\\xb4\\x58\\x68\\x24\\x3c\\x96\\x75\\x47\\x3a\\xd3\\x71\\x74\\x30\\x00\\\n\\x55\\x1f\\x9f\\x57\\x40\\x5c\\xae\\xe1\\xf0\\x45\\x98\\x8c\\x8d\\x24\\x6f\\x7b\\\n\\xa9\\xe3\\x16\\xb3\\xf8\\xee\\xf6\\x9e\\x33\\xd1\\x2b\\xe9\\xcc\\xf8\\x77\\xba\\\n\\x73\\x31\\xad\\x49\\xb5\\xf7\\xf4\\x68\\x8c\\x99\\xbb\\x93\\xcf\\x97\\x00\\x45\\\n\\xe3\\xc3\\xc1\\x8b\\xa3\\x6c\\x4c\\xcb\\xfa\\xd2\\x0f\\x60\\x62\\x24\\x73\\x31\\\n\\x72\\xc0\\xc4\\x81\\x75\\xf0\\xe2\\x28\\xb3\\x99\\xf2\\xde\\x29\\x80\\x07\\x1a\\\n\\x77\\x69\\x9c\\xf3\\xd7\\x7e\\xeb\\x38\\x39\\x9e\\x93\\xaf\\x5d\\xa1\\x38\\x38\\\n\\x7e\\x69\\x3f\\xa9\\x32\\xc6\\x5f\\x49\\x9e\\xa6\\xd3\\x00\\x01\\xe0\\x6c\\xaf\\\n\\x63\\x4f\\x38\\x12\\x19\\xe8\\xea\\xeb\\x9b\\x39\\x6b\\xe7\\x41\\x9d\\xbd\\xe7\\\n\\x98\\xaa\\x69\\x17\\x62\\x85\\x7f\\xbf\\x3f\\xb9\\x3d\\x0d\\xf0\\x47\\xbf\\xdf\\\n\\xd4\\x0d\\xf3\\xc1\\x40\\x77\\x67\\x22\\xa4\\x66\\x1f\\x30\\xf3\\xd5\\x48\\x38\\\n\\x8c\\xd6\\xd3\\xdd\\x09\\xd3\\xc0\\xba\\x83\\x8f\\x1c\\x4c\\x1b\\x9c\\x29\\xb7\\\n\\xb7\\x03\\x4f\\xee\\xe8\\x30\\x2c\\xb6\\xe1\\x48\\xa0\\x25\\x3a\\x16\\x99\\x3d\\\n\\x79\\xcf\\x57\\xe1\\x48\\x04\\x3f\\x1c\\x0f\\x44\\x4d\\x8b\\x3f\\x76\\xf9\\x9d\\\n\\x18\\x98\\xa6\\xf4\\x71\\xa2\\xf9\\xe7\\x53\\x2b\\xd6\\xdd\\xde\\x7f\\x66\\xa0\\\n\\xff\\xee\\x72\\x77\\x09\\x2d\\xb0\\x4f\\xdd\\x77\\x73\\xa1\\xa0\\x1a\\xc6\\xf7\\\n\\x81\\x3f\\x62\\x8c\\xb3\\xa7\\x9a\\x36\\xef\\x38\\x98\\xc9\\x66\\xc6\\x82\\x4b\\\n\\xe3\\x27\\x2f\\xde\\x2b\\x09\\xe4\\xcb\\xba\\xca\\xea\\x82\\x4a\\x5f\\x85\\x94\\\n\\xd3\\xe2\\x51\\xdf\\x39\\xf3\\x78\\x77\\x77\\xcc\\x30\\xf9\\xfa\\x03\\x5b\\xde\\\n\\x3a\\x3c\\x9d\\xed\\xac\\x5f\\x6c\\xdc\\xfb\\xf2\\x32\\x4a\\x71\\xa8\\xd8\\xa5\\\n\\x94\\xdf\\x56\\x73\\x83\\x2b\\x27\\xe5\\xb7\\xbf\\xfe\\x1c\\x0f\\x6b\\xda\\x05\\\n\\x0b\\xc6\\xfd\\xfb\\x37\\xed\\xec\\x9e\\xc9\\x7e\\xda\\xea\\x56\\x52\\x6d\\x87\\\n\\x7e\\x0a\\x15\\xd5\\xde\\xf9\\x01\\x2d\\xd0\\x62\\xa7\\xfb\\xcf\\xaf\\x0a\\x8e\\\n\\x8d\\x99\\xb2\\xc3\\x6e\\x53\\xec\\x05\\x57\\x5c\\xc0\\x6c\\xe9\\x3a\\x15\\x69\\\n\\x3d\\xdd\\x15\\x8f\\xc5\\xe3\\xaf\\x9e\\xed\\x73\\x6c\\xfa\\xe6\\xd9\\xd7\\x83\\\n\\xb3\\xb9\\xce\\xa9\\x04\\x0c\\x91\\x3c\\x23\\x10\\xc1\\xed\\x2b\\x29\\x23\\xe5\\\n\\x1e\\x8f\\x9c\\x2c\\x01\\xdb\\x6d\\x13\\x07\\xd9\\x84\\x6e\\x5c\\x2a\\x01\\x87\\\n\\x82\\xda\\xf9\\xe0\\x08\\x2c\\xce\\x43\\x06\\x67\\xef\\xe6\\xa5\\x04\\x9c\\x49\\\n\\xc9\\x22\\xba\\x9d\\x8a\\x6b\\x38\\x27\\xcb\\x98\\xc5\\xca\\x2c\\xcb\\x72\\x02\\\n\\xe0\\x82\\x20\\x44\\x45\\x41\\x18\\x26\\x1c\\x5d\\xba\\x35\\xbf\\x22\\xfa\\xff\\\n\\x5e\\xff\\x00\\x5b\\xa7\\xe1\\x56\\x96\\xfd\\x26\\xb0\\x00\\x00\\x00\\x00\\x49\\\n\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n\\x00\\x00\\x14\\xed\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x60\\x00\\x00\\x00\\x60\\x08\\x06\\x00\\x00\\x00\\xe2\\x98\\x77\\x38\\\n\\x00\\x00\\x00\\x04\\x73\\x42\\x49\\x54\\x08\\x08\\x08\\x08\\x7c\\x08\\x64\\x88\\\n\\x00\\x00\\x00\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x05\\x46\\x00\\x00\\x05\\x46\\\n\\x01\\xc1\\xb4\\xfa\\x1a\\x00\\x00\\x00\\x19\\x74\\x45\\x58\\x74\\x53\\x6f\\x66\\\n\\x74\\x77\\x61\\x72\\x65\\x00\\x77\\x77\\x77\\x2e\\x69\\x6e\\x6b\\x73\\x63\\x61\\\n\\x70\\x65\\x2e\\x6f\\x72\\x67\\x9b\\xee\\x3c\\x1a\\x00\\x00\\x14\\x6a\\x49\\x44\\\n\\x41\\x54\\x78\\x9c\\xed\\x9d\\x79\\x74\\x1c\\xc5\\x99\\xc0\\x7f\\xd5\\xe7\\xcc\\\n\\x48\\xa3\\xd3\\x96\\x0f\\x02\\xbe\\xb1\\x8d\\x13\\x05\\x83\\x31\\x60\\xc2\\x61\\\n\\x20\\x90\\x90\\x25\\x09\\x47\\x30\\x64\\x81\\x84\\x1c\\x9b\\x3b\\x4b\\x08\\x59\\\n\\x12\\x20\\x8b\\x03\\x2c\\x90\\xe5\\x6d\\xc2\\x99\\xcd\\x0b\\xf0\\x80\\x84\\x04\\\n\\x03\\x86\\x04\\x48\\x38\\x8c\\x8d\\x31\\x36\\x58\\xc6\\xb2\\x64\\xc3\\x1a\\xc9\\\n\\x92\\x6c\\x8b\\xd3\\xb6\\xb0\\x24\\x4b\\x1a\\xcd\\xdd\\x5d\\xfb\\xc7\\x48\\xf2\\\n\\x48\\x9a\\xa3\\xbb\\x35\\xb2\\xd9\\xb5\\x7e\\xef\\xe9\\xbd\\xe9\\xea\\xaf\\xaa\\\n\\x3e\\x7d\\x5f\\x57\\x75\\x1d\\x5f\\xcd\\xc0\\x18\\x63\\x8c\\x31\\xc6\\x18\\x63\\\n\\x8c\\x31\\xc6\\x18\\x63\\x8c\\x31\\xc6\\x18\\x63\\x8c\\x31\\xc6\\x18\\x87\\x0a\\\n\\xe2\\x60\\x2b\\xe0\\x94\\x67\\x5e\\x59\\x6f\\xdb\\xb6\\x2d\\x00\\x84\\x80\\x23\\\n\\x26\\x4d\\xc8\\x25\\xde\\x35\\x7f\\xce\\xcc\\xb2\\x03\\xa3\\xd9\\xc8\\x50\\x0e\\\n\\xb6\\x02\\x4e\\x51\\x55\\x25\\xe2\\x5c\\x5a\\xec\\x1c\\x3d\\x4d\\x0a\\x8b\\x76\\\n\\xb0\\x15\\xd8\\xd0\\xd0\\x50\\x69\\x08\\xe3\\x0e\\x21\\xa5\\x96\\x94\\xda\\x55\\\n\\x0b\\x8e\\x9a\\xba\\x2b\\x93\\x9c\\xa6\\xa8\\x9d\\x09\\x92\\x01\\x67\\xa5\\xca\\\n\\x77\\x0a\\xa9\\xe3\\x68\\x72\\x50\\x5b\\x40\\x5d\\xc3\\xf6\\x0b\\x0c\\x45\\xdf\\\n\\x0a\\xf2\\x52\\x29\\xb8\\x58\\x55\\x92\\x9b\\xeb\\x1b\\x9a\\x4f\\xcb\\x24\\x2b\\\n\\x14\\xf1\\x61\\xff\\x67\\x45\\xe4\\x55\\xbb\\xb5\\x70\\x5a\\x8e\\x2e\\x07\\xc5\\\n\\x01\\xb5\\xb5\\xb5\\xfa\\xe6\\xc6\\x96\\x3b\\x85\\x90\\xcb\\x91\\xa4\\x77\\xe6\\\n\\x55\\x08\\xf1\\xe2\\x96\\x86\\xe6\\x73\\x87\\xe6\\x51\\x85\\xd8\\xde\\xff\\x59\\\n\\x88\\x7c\\xaf\\x2e\\xd1\\x9a\\x7e\\xf5\\xd2\\xfa\\x4d\\x4f\\x3e\\xbf\\xee\\x8d\\\n\\xbd\\x2b\\x6a\\xea\\x7f\\x30\\x22\\xc5\\x47\\x81\\x03\\xee\\x80\\xda\\xb7\\x5b\\\n\\x27\\xa9\\xc5\\x65\\xab\\x25\\xfc\\x38\\x8b\\x88\\x61\\x0b\\xb1\\x7c\\x73\\xc3\\\n\\xf6\\x7f\\x4a\\x4f\\x54\\x84\\xf8\\x9f\\xfe\\xcf\\xf9\\xed\\x2f\\x5b\\xfb\\x3f\\\n\\xae\\x7e\\xa3\\xee\\xd6\\xde\\x48\\xf4\\xfc\\x58\\x3c\\x51\\x19\\x0e\\x87\\xef\\\n\\x79\\x61\\xdd\\x1b\\x3b\\x57\\x6e\\xd8\\x7c\\xa4\\xe7\\x7f\\xa0\\xc0\\x1c\\x50\\\n\\x07\\x6c\\x79\\xbb\\xe5\\x93\\xaa\\x92\\xac\\x01\\x4e\\xca\\x23\\x6a\\x48\\x21\\\n\\x97\\x6f\\x6a\\x68\\x39\\x76\\x20\\xc1\\xd4\\x36\\xf6\\x7f\\xce\\xdb\\x02\\x84\\\n\\xdd\\x0a\\xb0\\x72\\xd3\\xa6\\xea\\x50\\x38\\x76\\x4d\\xfa\\xad\\x68\\x22\\x39\\\n\\xd5\\xa7\\x6b\\xaf\\xd7\\x35\\x34\\x9f\\xe8\\x52\\xfd\\x51\\xe1\\x80\\x39\\x60\\\n\\x4b\\x63\\xcb\\xe9\\xb6\\xc2\\x3a\\xe0\\x08\\x87\\x59\\x4c\\x45\\x61\\x59\\x4d\\\n\\x73\\x73\\x09\\x40\\x99\\x5e\\x56\\xdb\\x6f\\xf7\\x7c\\xef\\x00\\x35\\x6a\\xbe\\\n\\x03\\x60\\x45\\xe5\\xdf\\xad\\xbe\\xa1\\x6b\\x3f\\xe3\\xca\\x4a\\x28\\x0a\\xf8\\\n\\x2a\\x85\\x10\\x6b\\xea\\x1a\\x5b\\xb2\\xb5\\xc2\\x03\\xc6\\x01\\x71\\xc0\\xe6\\\n\\x86\\xe6\\xb3\\x6c\\xf8\\x3b\\x50\\xea\\x2a\\xa3\\x64\\xa6\\xcf\\x12\\xf7\\x00\\\n\\xcc\\x9b\\x77\\x78\\x87\\xa6\\x6a\\x36\\x80\\xa2\\xe4\\x6c\\x01\\x5d\\xd5\\xd5\\\n\\x53\\x3a\\x57\\x6f\\xd8\\xfc\\xc3\\x48\\x2c\\x76\\xf8\\x40\\xaa\\x10\\x8c\\x2f\\\n\\x2f\\xa3\\xc8\\xef\\xeb\\x4f\\xd1\\x05\\xdc\\x59\\xd7\\xd8\\x7c\\x9b\\x2b\\x9d\\\n\\x0a\\xcc\\xa8\\x3b\\x60\\x73\\x43\\xf3\\x59\\x08\\xf1\\x34\\xe0\\xf7\\x92\\x5f\\\n\\xc2\\xa5\\x5b\\xb6\\xed\\x38\\x19\\x40\\x55\\x95\\x10\\x80\\xa2\\xe4\\x52\\x3b\\\n\\xd5\\xff\\x47\\x12\\xf1\\x9b\\xd3\\x53\\x2b\\x4a\\x8a\\x09\\xf8\\xcd\\x61\\xd2\\\n\\x02\\x71\\x4d\\x7d\\x63\\xcb\\x7f\\x7a\\xd1\\xad\\x10\\x8c\\xaa\\x03\\x56\\x6e\\\n\\xd8\\xf2\\xcd\\xce\\x9e\\xde\\xbf\\x4b\\xf0\\xe5\\x97\\xce\\x8a\\xb0\\xa5\\xbc\\\n\\x4b\\x4a\\xa9\\x28\\x8a\\xd2\\x01\\xa0\\xe6\\x74\\x80\\x68\\x5d\\x5d\\x5b\\xff\\\n\\xb5\\x78\\x3c\\x31\\xd0\\xda\\x82\\x45\\x01\\x82\\x45\\xd9\\xa7\\x10\\x02\\x26\\\n\\x8e\\x40\\xbf\\x11\\x31\\x6a\\x0e\\x58\\xf1\\x7a\\xdd\\xa9\\xe1\\x48\\xe4\\x0f\\\n\\x5d\\xa1\\x5e\\xbd\\xbb\\xa7\\x77\\x84\\xa5\\xc9\\xa3\\x37\\x37\\x6d\\xff\\xa2\\\n\\x10\\xec\\x81\\x7c\\x2d\\x80\\xd6\\x68\\x34\\xb1\\xb4\\xff\\xc2\\x6f\\x1a\\x54\\\n\\x94\\x14\\xe7\\x92\\x7f\\x33\\x19\\x0a\\x7c\\x77\\x84\\x0a\\x7a\\x66\\x54\\x66\\\n\\xc2\\x2b\\xd7\\xbe\\x39\\x3d\\x9a\\x0c\\xaf\\xb0\\x6d\\x4b\\x01\\xe8\\xec\\x09\\\n\\x21\\x14\\x85\\x60\\x91\\xa7\\x5e\\x28\\x85\\xe4\\xdf\\x84\\x10\\xef\\x02\\xc7\\\n\\xe7\\x6a\\x01\\xf1\\x44\\x32\\x14\\x8f\\x27\\xa6\\x02\\x68\\xaa\\xca\\xb8\\xf2\\\n\\xd2\\x5c\\xe3\\xd6\\x2e\\x6c\\x71\\xe1\\x82\\x05\\x93\\xc3\\xfd\\x09\\x2f\\xd7\\\n\\xd6\\x1e\\x1f\\x8f\\xc9\\xe5\\x8a\\x10\\x2d\\x67\\x2d\\x5a\\xb0\\xd8\\xbb\\xc2\\\n\\xce\\x28\\x78\\x0b\\xa8\\xa9\\xa9\\x29\\x89\\x8b\\x48\\x5d\\x32\\x69\\x19\\xe9\\\n\\xe9\\x9d\\xdd\\xdd\\xf4\\x46\\xa2\\x23\\x29\\xfa\\x44\\x4d\\x51\\x93\\x00\\xaa\\\n\\x9a\\x5d\\xed\\x50\\x24\\xf2\\x59\\x49\\x6a\\x95\\x71\\x7c\\x45\\x69\\xae\\xd6\\\n\\x22\\x11\\x7c\\x7d\\xfe\\x51\\x33\\x9a\\xfb\\x13\\x56\\xac\\xaf\\x7d\\x28\\x14\\\n\\x8a\\xaf\\x8f\\xc6\\xe2\\x9f\\x08\\x47\\x63\\xa7\\xad\\x58\\x5f\\xbb\\x61\\x24\\\n\\x0a\\x3b\\xa1\\xf0\\x5d\\x90\\xbf\\xf4\\x01\\x69\\x0f\\x1f\\xed\\x48\\x09\\xed\\\n\\xfb\\xba\\x89\\xc5\\x13\\x9e\\x8b\\x36\\x4c\\x6d\\x26\\xe4\\x1e\\x05\\x45\\xa2\\\n\\xd1\\x6a\\x80\\xd2\\x60\\x11\\x86\\xae\\xe7\\x2a\\xee\\xf6\\xf9\\xb3\\x67\\xfe\\\n\\x0d\\x60\\xcd\\xc6\\xcd\\xf3\\x9f\\x5f\\xb7\\xb1\\x2d\\x1c\\x89\\x7d\\xcd\\xb6\\\n\\xe5\\x40\\xe1\\xe1\\x48\\x6c\\xe1\\xca\\x0d\\xf5\\x6b\\x3d\\x2b\\xec\\x80\\x82\\\n\\x3a\\xa0\\x6e\\x5b\\xcb\\xc5\\xa6\\xa9\\x5f\\x38\\xa9\\xaa\\x92\\xf2\\x92\\x20\\\n\\x62\\x88\\xa1\\xa4\\x94\\xb4\\x75\\xec\\x23\\x99\\xb4\\x3c\\x95\\x6f\\xa8\\xfa\\\n\\x34\\x00\\x55\\x55\\x33\\xde\\x4f\\x24\\x93\\x24\\x93\\xb6\\xcf\\xd0\\x35\\x4a\\\n\\x82\\xd9\\xfb\\x7d\\x01\\x9b\\xac\\xd0\\xbe\\xeb\\x01\\x56\\xad\\xaf\\xff\\x76\\\n\\x57\\x6f\\xa4\\x36\\x16\\x8f\\x8f\\xcf\\x24\\x1b\\xea\\x0d\\x7f\\x66\\xe5\\x86\\\n\\xba\\x17\\x3c\\x29\\xec\\x80\\x82\\xed\\x07\\x6c\\x6a\\x6a\\x9a\\xab\\xd8\\xea\\\n\\x46\\x90\\x45\\xfd\\x69\\xb6\\x6d\\xd3\\xbe\\xaf\\x9b\\x70\\x34\\x36\\x48\\x56\\\n\\xd3\\x34\\x26\\x8d\\x2f\\x77\\xb2\\xa8\\x36\\x8c\\x77\\x77\\xb7\\x71\\xc4\\xc4\\\n\\xaa\\x8c\\xf7\\xba\\x43\\xbd\\x74\\x76\\x87\\x98\\x34\\xbe\\x22\\xd7\\xd3\\x1f\\\n\\xb2\\x54\\x79\\xf4\\x82\\x59\\xb3\\xb6\\xaf\\xda\\x50\\xff\\x44\\x28\\x1c\\xb9\\\n\\x50\\x4a\\x39\\x48\\x40\\x55\\x15\\xfc\\xa6\\x89\\xa9\\x6b\\x68\\x9a\\x86\\xae\\\n\\x69\\xa8\\x9a\\xf8\\xe1\\xfc\\xd9\\xb3\\xee\\x75\\xad\\x70\\x1e\\x0a\\xe2\\x80\\\n\\xad\\x5b\\xb7\\x1a\\x71\\xd5\\x7c\\x0d\\x58\\x90\\xe9\\x7e\\x38\\x12\\xa3\\xa3\\\n\\xab\\x07\\xcb\\xde\\xff\\xe4\\xfb\\x4c\\x83\\x09\\x95\\xe5\\xae\\xeb\\xda\\xbd\\\n\\xb7\\x83\\x89\\xe3\\x2a\\x32\\xde\\xdb\\xd3\\xde\\x89\\xae\\x69\\x54\\x94\\x06\\\n\\xb3\\xe6\\x17\\x42\\x5e\\xd5\\xf9\\xe1\\xfb\\xff\\x9d\\x30\\x8b\\x5f\\x0f\\x47\\\n\\xe3\\xf3\\xfb\\xd3\\x35\\x4d\\xa5\\xd8\\xef\\xc3\\xef\\xf7\\x61\\x68\\x19\\xc7\\\n\\x26\\x09\\x01\\x67\\x1f\\x3d\\x67\\xe6\\x6a\\xd7\\x4a\\xe7\\xa0\\x20\\x5d\\x50\\\n\\x5c\\x35\\x6f\\x26\\x8b\\xf1\\x01\\x02\\x7e\\x93\\xc9\\x13\\x2a\\x28\\x0e\\xec\\\n\\x1f\\x05\\x45\\x63\\x71\\x3a\\xbb\\x43\\xae\\xeb\\xd2\\xb3\\x3c\\xd9\\xb6\\x6d\\\n\\x93\\x48\\x58\\x94\\x05\\x8b\\x32\\xde\\xef\\x63\\x4d\\x67\\x38\\xf4\\x60\\x44\\\n\\x2b\\xda\\x19\\x8e\\xc6\\xe7\\x23\\x04\\x01\\x9f\\xc9\\x84\\xca\\x72\\x0e\\xab\\\n\\x1a\\x47\\x69\\xb0\\x38\\x9b\\xf1\\x01\\x74\\x09\\xcb\\xea\\x1a\\x1b\\x27\\xbb\\\n\\x56\\x3a\\x07\\x23\\x6e\\x01\\xf5\\xdb\\xb6\\x1f\\x87\\x94\\xeb\\x81\\xcc\\x1d\\\n\\xf3\\x10\\x22\\xb1\\x38\\xed\\x9d\\xdd\\x03\\xad\\xa1\\xaa\\xa2\\x0c\\xbf\\x6f\\\n\\xf8\\x0c\\x35\\x1b\\xa1\\x48\\x84\\x62\\xff\\xf0\\xe1\\x6c\\x6f\\x38\\x8a\\x44\\\n\\x0e\\x72\\xf2\\x10\\xac\\x64\\x22\\x72\\xe6\\xde\\xee\\xc8\\xf2\\x78\\x3c\\x59\\\n\\x59\\x1c\\xf0\\x51\\x52\\x5c\\x84\\x96\\xe5\\x7d\\x92\\x0d\\x09\\x6b\\xbb\\x76\\\n\\xbd\\x77\\xfa\\xe2\\xc5\\x8b\\x93\\xae\\x32\\x66\\x61\\x44\\x2d\\xa0\\xb6\\xb6\\\n\\x56\\x47\\xca\\xfb\\x71\\x68\\x7c\\x48\\x4d\\x8c\\x26\\x57\\x55\\x0c\\x18\\xbd\\\n\\x7d\\x5f\\x37\\xb6\\x6d\\x3b\\xae\\x53\\x57\\x33\\x3f\\xa1\\xb6\\xb4\\x73\\x19\\\n\\x1f\\x29\\x79\\xa4\\xbd\\x2b\\xfa\\x67\\x43\\xd3\\x2b\\x27\\x57\\x55\\x52\\x51\\\n\\x5a\\xe2\\xda\\xf8\\x00\\x02\\x4e\\x2e\\x9b\\x74\\xf8\\x52\\xd7\\x19\\xb3\\x30\\\n\\x22\\x07\\x68\\xc5\\x65\\xbf\\x04\\xaa\\x5d\\x57\\xaa\\x28\\x54\\x55\\x94\\x51\\\n\\x56\\x52\\x8c\\x2d\\x6d\\xda\\xbb\\xba\\x1d\\xe7\\xd5\\xb3\\x74\\x11\\x3e\\xd3\\\n\\xc8\\x98\\xde\\x4f\\x34\\x16\\x5b\\x50\\x59\\x5e\\x32\\xb9\\xa2\\x34\\xe8\\xc9\\\n\\xf0\\x43\\xf8\\x79\\xfa\\x52\\xf9\\x48\\xf0\\xdc\\x05\\xbd\\xd9\\xd4\\x34\\xdd\\\n\\xb2\\x95\\xb7\\x01\\xe7\\xfd\\x47\\x06\\x22\\xd1\\x18\\x1f\\xed\\xeb\\xa2\\xaa\\\n\\xbc\\x2c\\xaf\\x11\\x3f\\x5e\\xc8\\x37\\x9a\\x67\\xcf\\x5c\\x74\\x91\\x10\\xde\\\n\\xc6\\xd4\\x7d\\x78\\x6e\\x01\\x96\\xad\\xfe\\x9a\\x11\\x1a\\x1f\\xc0\\xef\\x33\\\n\\x99\\x34\\xae\\x82\\xae\\x50\\x2f\\x43\\x87\\x83\\x1f\\x6f\\xc4\\xc2\\x59\\x4d\\\n\\x2d\\xdf\\x19\\x71\\x29\\x5e\\x32\\xd5\\x35\\x6d\\x3f\\x53\\xd8\\xf2\\xa5\\x91\\\n\\x56\\x9e\\x4e\\x3c\\x99\\x24\\x99\\xb4\\x08\\xb8\\x78\\x21\\x1f\\x74\\x04\\x7b\\\n\\xac\\x9e\\xc0\\xf4\\xf4\\xb5\\x24\\xb7\\x78\\x6a\\x01\\xc2\\x96\\xbf\\xf2\\x5a\\\n\\x61\\x36\\x0c\\x4d\\xc3\\xd0\\xdd\\xaf\\x0d\\x2a\\x56\\x0c\\x5f\\x4f\\x03\\xc1\\\n\\xb6\\x55\\x14\\x75\\x6c\\x40\\x8f\\xee\\x29\\xb4\\x6a\\xd9\\x91\\x4c\\xd0\\x8a\\\n\\xc2\\xdf\\x18\\x49\\x11\\xae\\x5b\\xc0\\x96\\xc6\\x96\\xd3\\x6d\\x58\\x35\\x92\\\n\\x4a\\x47\\x82\\x62\\xc7\\x29\\xd9\\xf5\\x2c\\xc5\\x6d\\x2f\\xa3\\x75\\x35\\x63\\\n\\x27\\x62\\xc3\\x65\\x54\\x05\\xe9\\x1b\\x4f\\xb4\\xe2\\xd3\\x74\\x4c\\xb9\\x8c\\\n\\x84\\xdf\\xe9\\x2e\\xa8\\x27\\xde\\xb7\\x42\\xfb\\xa6\\x2f\\x58\\xb0\\xc0\\xd3\\\n\\x22\\x97\\x6b\\x07\\xd4\\x37\\x6c\\x5f\\x83\\x90\\xa7\\x78\\xa9\\xcc\\x2b\\xbe\\\n\\x9e\\x6d\\x94\\x7e\\xf0\\x57\\x7c\\x1d\\xb5\\x10\\x6e\\x47\\x4a\\xe7\\xc3\\x56\\\n\\x10\\x10\\x9c\\x40\\xe7\\x8c\\x7f\\xa1\\x67\\xfc\\x19\\xa3\\xa2\\x9f\\x44\\x7e\\\n\\xe9\\x98\\x39\\xb3\\x9e\\xf1\\x92\\xd7\\xb5\\x03\\xea\\x1a\\x9a\\x4f\\x14\\x42\\\n\\x5c\\x09\\x5c\\x80\\x8b\\xf1\\xbf\\x1b\\x94\\x44\\x0f\\x65\\x1f\\x3e\\x45\\xe0\\\n\\xa3\\x75\\xa8\\xdd\\x3b\\x91\\x96\\xf7\\x15\\xd4\\x74\\x44\\x60\\x3c\\x6d\\xd5\\\n\\x37\\x12\\x09\\x1e\\x55\\x90\\xf2\\xf6\\x23\\x1f\\x9c\\x3f\\x67\\x96\\xa7\\xae\\\n\\xc8\\xf3\\x30\\x74\\xd3\\xd6\\x96\\x99\\x8a\\xca\\xed\\xc0\\x97\\xbd\\x96\\x91\\\n\\x8e\\xd7\\xa7\\x5c\\x00\\x8a\\xa6\\x20\\x10\\xd8\\x52\\xa6\\x26\\x75\\x39\\x06\\\n\\x53\\x42\\x11\\x44\\xa6\\x5e\\x40\\xdb\\x8c\\x1f\\x15\\x42\\xed\\x7e\\x76\\xcc\\\n\\x9f\\x33\\x73\\x86\\x97\\x8c\\x23\\x5e\\x8a\\xd8\\xdc\\xd0\\x7c\\xb6\\x14\\xe2\\\n\\x4e\\x60\\xb6\\xd7\\x32\\x14\\x3b\\xce\\x27\\x56\\x7d\\xd6\\xb9\\xbc\\xaa\\xa0\\\n\\xeb\\x2a\\x86\\xa1\\xa2\\xe9\\xea\\xb0\\x0d\\x2f\\xcb\\xb2\\x89\\xc7\\x92\\xc4\\\n\\xa2\\x56\\xd6\\x59\\xf6\\xfb\\x67\\xae\\xc4\\x16\\x39\\xf7\\x0b\\x1c\\x20\\x7a\\\n\\xc1\\x7e\\x1c\\x29\\xee\\x9f\\x3f\\x77\\xe6\\xeb\\x5e\\x4a\\x18\\xf1\\x96\\xe4\\\n\\xd1\\x73\\x67\\xbd\\xb8\\x75\\xeb\\xd6\\xea\\xb8\\x6a\\xde\\x04\\x5c\\x8d\\x87\\\n\\x91\\x95\\x92\\xe8\\xca\\x2d\\x20\\x40\\xd7\\x54\\x74\\x23\\xf5\\x97\\x6b\\x47\\\n\\x0c\\xfa\\x96\\x93\\x03\\x06\\x7e\\x3f\\x84\\x23\\x71\\xa2\\xe1\\xe1\\x5d\\x98\\\n\\x48\\x86\\x40\\x77\\xbf\\x1a\\xdb\\xc7\\x46\\x21\\xb9\\x3f\\xaa\\xd9\\xcb\\x4e\\\n\\x98\\x35\\xcb\\xf9\\x34\\x3e\\x03\\x05\\xd9\\x13\\x9e\\x37\\x6f\\x5e\\x1c\\xb8\\\n\\x66\\x4b\\x63\\xcb\\x8b\\x36\\xfc\\x11\\x38\\xcc\\x4d\\x7e\\xd5\\xca\\xbc\\x2a\\\n\\xaa\\xaa\\x0a\\xbe\\x80\\x8e\\x61\\xa8\\x0e\\xe2\\x41\\x33\\x20\\x20\\x10\\x30\\\n\\x90\\xb6\\x24\\x16\\x1d\\xbc\\x76\\xa6\\x25\\x7b\\xb0\\xdc\\x39\\xa0\\x53\\x08\\\n\\x1e\\xb1\\x51\\x1e\\x38\\x66\\xf6\\xf4\\x2d\\xee\\x95\\xc9\\x4c\\x41\\x37\\xe5\\\n\\x3f\\x3d\\x67\\xe6\\xcb\\x1b\\x1a\\x1a\\x3e\\xad\\x2b\\xfa\\x1f\\x84\\xe4\\x7c\\\n\\xa7\\xf9\\x94\\xe4\\x70\\x07\\x68\\xba\\x42\\x30\\xe8\\x1b\\xb6\\xab\\xe6\\x85\\\n\\x40\\x91\\x41\\x2c\\x96\\x1c\\xf4\\x6e\\xc8\\x54\\x67\\x66\\x64\\x07\\x88\\x2d\\\n\\x52\\x8a\\x7a\\xe0\\x70\\x81\\x7d\\x5f\\x7d\\x63\\x4b\\x05\\xd0\\xbf\\x29\\xf1\\\n\\x9e\\x84\\x06\\x24\\xaf\\x21\\x95\\x67\\x8e\\x39\\x6a\\xba\\xab\\xd0\\xf8\\x82\\\n\\x3a\\x60\\xf5\\xea\\xad\\xc5\\xdd\\x5d\\xe1\\x7b\\x7d\\x86\\xf9\\xa9\\xe2\\x80\\\n\\xf3\\x50\\x20\\x2d\\xd1\\x39\\xe8\\x5a\\x08\\x41\\x71\\x81\\x8c\\xdf\\x5f\\x9e\\\n\\xae\\xa9\\x24\\x12\\xfb\\x97\\x6d\\xd4\\xc4\\x3e\\xa7\\xb9\\x2b\\x80\\xc5\\x42\\\n\\xc8\\x6c\\x11\\x12\\xe5\\x02\\xaa\\x11\\x2c\\x41\\xd8\\x77\\xd5\\x35\\x36\\x1e\\\n\\x76\\xcc\\x9c\\x39\\x1f\\x66\\x91\\x1d\\x46\\xc1\\xf6\\x84\\x57\\xd5\\x6c\\xba\\\n\\x32\\xac\\xf6\\x74\\x68\\x8a\\xba\\xa4\\x38\\xe0\\x9b\\xe5\\x26\\xaf\\xd1\\xdd\\\n\\x34\\xf8\\xda\\x50\\xf3\\x85\\x1f\\xba\\x46\\x37\\x06\\x3f\\x6b\\x66\\xf7\\xb6\\\n\\x82\\x96\\xdf\\x8f\\x10\\xda\\x42\\x37\\xf2\\x23\\x6e\\x01\\xcf\\xd6\\xd6\\x06\\\n\\xcc\\xb8\\x78\\x29\\x14\\x89\\x2e\\x2a\\x29\\x2a\\xa2\\x2c\\x77\\x10\\x54\\x46\\\n\\xcc\\xf0\\x8e\\x41\\xd7\\x86\\x59\\xf8\\x70\\x25\\xc3\\x50\\x08\\xa7\\xc5\\x87\\\n\\x19\\xbd\\x3b\\xb2\\x0b\\x8f\\x04\\x29\\xa6\\xb8\\x11\\x1f\\x51\\x0b\\x58\\xb3\\\n\\x61\\xcb\\x34\\x35\\x62\\xed\\x0a\\x47\\xa3\\x8b\\xfc\\xa6\\xcf\\x93\\xf1\\x01\\\n\\xd4\\xf0\\xfe\\x53\\x49\\x8a\\xaa\\xa0\\x1b\\x85\\x9f\\xdf\\x0d\\x2d\\x57\\x8b\\\n\\x38\\xee\\x25\\xdc\\x21\\x6d\\x87\\xc7\\xa8\\x52\\x78\\x76\\xc0\\xca\\x37\\xea\\\n\\x8f\\xeb\\x8e\\x45\\x1a\\xe3\\x89\\x64\\x89\\x69\\xe8\\x8c\\x2f\\x2f\\xf1\\x5a\\\n\\x14\\x6a\\xb4\\x7d\\xe0\\xb3\\xcf\\x3f\\x7a\\xc7\\xd6\\xfc\\xfe\\xfd\\xe3\\x7e\\\n\\x25\\xad\\xce\\xc2\\x22\\x5c\\x4d\\xdb\\x3d\\x39\\x60\\x65\\xcd\\x5b\\xd5\\xd1\\\n\\x68\\x6c\\x9d\\x95\\xb4\\x0c\\x45\\x08\\x2a\\xcb\\x72\\x86\\xff\\xe5\\x46\\x5a\\\n\\xc8\\x78\\x0f\\xd0\\x37\\xec\\x34\\x47\\x3a\\x39\\xca\\x8e\\xa6\\xab\\x18\\xfd\\\n\\xef\\x82\\x58\\x17\\xe0\\x66\\x4d\\xc9\\x21\\x8a\\x74\\xb5\\x34\\xed\\xda\\x01\\\n\\x35\\x6f\\xbd\\x35\\x21\\x16\\x0f\\xd7\\xf4\\x87\\x1e\\x56\\x94\\x05\\xd1\\x35\\\n\\xef\\x5d\\x46\\x51\\xe7\\x26\\x64\\xdf\\x6c\\xd5\\x1f\\xd0\\x47\\xfd\\xe4\\x72\\\n\\xaa\\x0e\\x81\\xb4\\x6d\\x02\\xfb\\xea\\x0b\\x5e\\xbe\\xb0\\x69\\x71\\x23\\xef\\\n\\xca\\x01\\x52\\x4a\\x65\\x5f\\x77\\xb4\\x36\\x91\\x4c\\xfa\\x01\\x02\\x3e\\x1f\\\n\\x45\\x19\\x22\\x14\\xdc\\x50\\xd4\\x9e\\x8a\\xfc\\xd3\\x74\\x65\\x54\\x5e\\xbe\\\n\\x43\\x51\\x35\\x05\\xb3\\xef\\x5d\\x10\\xdc\\x5b\\xf8\\xa8\\x43\\xa1\\xf1\\xb6\\\n\\x2b\\x79\\x37\\xc2\\x2f\\xd5\\xd4\\xfd\\xa3\\x37\\x1c\\x39\\x07\\x40\\x11\\x82\\\n\\xc9\\x55\\xe3\\xf2\\x2e\\x0b\\x0c\\x25\\xd0\\xb6\\x86\\xe0\\xbb\\x4f\\xa2\\xf7\\\n\\xec\\x40\\xaa\\x06\\x8a\\xa6\\xa1\\xf4\\xee\\xa1\\xa4\\xcc\\x8f\\xaa\\x1d\\x98\\\n\\x13\\x53\\x52\\x4a\\xba\\x3a\\x23\\x58\\xfe\\x09\\xd8\\xc9\\x04\\xc2\\x8a\\x13\\\n\\x0f\\x4e\\xa3\\xe7\\x88\\xaf\\x10\\xa9\\xca\\xbc\\xd2\\x1e\\x8f\\x27\\x77\\xf4\\\n\\x84\\xc3\\x6d\\x28\\xe2\\x4f\\x67\\x1c\\x77\\xf4\\xef\\x85\\x10\\x05\\xe9\\xbf\\\n\\x1c\\x3b\\xe0\\xe5\\x8d\\x75\\xdf\\xe8\\xe9\\x89\\x3c\\xd0\\x3f\\x99\\x2c\\x2b\\\n\\x29\\xa6\\xb4\\x38\\x67\\x10\\xd4\\x30\\xca\\xb7\\xdd\\x43\\xf0\\xdd\\x27\\x06\\\n\\x2b\\xa0\\x19\\xf8\\x0c\\x89\\x3f\\x70\\x60\\x37\\xe4\\x63\\xd1\\x24\\xe1\\x28\\\n\\xc8\\xe4\\xe0\\x0d\\x9d\\xee\\x29\\x4b\\xd8\\x77\\xe4\\xf7\\x33\\xe6\\xb1\\x2c\\\n\\x9b\\xbd\\x9d\\x5d\\x24\\xad\\x64\\xd2\\x30\\xf4\\x5a\\x4d\\x33\\x6e\\x3a\\xfd\\\n\\xb8\\xea\\xe7\\x46\\xa2\\x87\\x23\\x07\\xac\\x5e\\xbd\\x6d\\x5c\\x58\\xed\\xfc\\\n\\x30\\x91\\xb4\\x74\\x48\\xc5\\xdd\\x4f\\xae\\xaa\\x74\\xb5\\x3e\\x13\\x68\\x5b\\\n\\xc3\\xb8\\x2d\\xff\\x3e\\x28\\xcd\\x32\\x2b\\x31\\x92\\x9d\\x94\\x96\\x67\\xef\\\n\\xc6\\x1a\\xdf\\x4f\\xf2\\xcc\\x86\\x18\\x02\\xf8\\xe2\\x09\\x26\\xb3\\x0f\\xd3\\\n\\x48\\xad\\x29\\x64\\xae\\x3b\\xb3\\x7c\\x66\\xba\\xbb\\x22\\xc4\\x94\\x72\\xd4\\\n\\xd8\\xe0\\x11\\xd1\\x47\\x9f\\xba\\x09\\x11\\x2d\\xa3\\xa8\\xa9\\x96\\xa2\\xd6\\\n\\x2d\\x98\\xbb\\xb6\\x63\\x74\\xec\\x1f\\x2a\\x4b\\x29\\x09\\x97\\x54\\xd1\\x53\\\n\\x35\\x95\\xd0\\xe4\\x23\\x7b\\x08\\x56\\xdc\\x31\\xfb\\x5f\\x6f\\x5e\\x2a\\x3c\\\n\\xbc\\xd5\\x1d\\x59\\xf0\\xc5\\xf5\\xb5\\xb5\\x91\\x48\\x6c\\x20\\x0e\\xa6\\xb2\\\n\\xbc\\x24\\x63\\x74\\x5a\\x2e\\x26\\xd4\\xfe\\x18\\xb3\\x73\\xf0\\x1a\\x56\\x32\\\n\\x38\\x85\\x0a\\xb5\\x0d\\x2d\\x47\\xd7\\x73\\xdb\\x13\\x21\\xba\\x7a\\x53\\xed\\\n\\xae\\xac\\x48\\xe1\\x9a\\xaf\\xe4\\x6e\\x75\\x6e\\xe4\\xad\\xa4\\x4d\\x87\\x35\\\n\\x01\\xb5\\xa7\\x15\\x00\\x25\\x62\\x61\\xb6\\xf4\\x62\\xbc\\x97\\x44\\x0d\\xb9\\\n\\xf8\\x6a\\x0a\\x20\\x56\\x32\\xde\\xb2\\x7c\\x45\\x7f\\x0a\\xec\\x6e\\xbd\\x4e\\\n\\xbc\\x46\\xe1\\x96\\x22\\x56\\xbd\\xb1\\xe9\\xdc\\x74\\xe3\\x6b\\x9a\\x46\\xb1\\\n\\xcf\\xfd\\x91\\x2f\\x23\\xc3\\xd4\\x5f\\xd7\\xf5\\x9c\\xc6\\x87\\xd4\\xb9\\x82\\\n\\x81\\xcf\\xb9\\x76\\x5a\\x3c\\xc8\\xab\\x9a\\x82\\x66\\x98\\x88\\x84\\x4d\\x60\\\n\\x73\\x17\\xa5\\xcf\\xed\\xc1\\xdf\\xd0\\xe3\\xda\\xf8\\x00\\x66\\xf7\\x47\\x6a\\\n\\xa0\\xad\\xf5\\xeb\\x52\\xd3\\xde\\x91\\x27\\xf3\\x1b\\x79\\xa6\\xb3\\x13\\xa1\\\n\\x79\\x1d\\x10\\x8f\\x5b\\xf7\\xa7\\x5f\\x97\\x16\\x07\\x3c\\x8d\\xf9\\x6d\\x75\\\n\\xb0\\xd3\\xa4\\x50\\x29\\xd2\\xf2\\x0f\\x99\\xcf\\x5b\\xe4\\xa3\\x24\\x20\\x28\\\n\\x09\\x08\\xce\\x5b\\x94\\xdf\\xf1\\x6e\\xe5\\x83\\xef\\xbc\\x4b\\xe9\\x73\\x6d\\\n\\xf8\\x9a\\x42\\x08\\x6b\\xe4\\x71\\x49\\xc2\\x4e\\x6a\\xc0\\x4f\\x64\\x94\\x6d\\\n\\xf2\\xe4\\xfc\\xbb\\x85\\x79\\x2d\\xf9\\xfc\\xda\\x0d\\xed\\xb1\\x44\\xb2\\x02\\\n\\x52\\xa7\\x13\\x3f\\x31\\x61\\x9c\\x27\\x07\\x8c\\xaf\\xfb\\x19\\xfe\\xf6\\x37\\\n\\x06\\xae\\x93\\xc1\\xe9\\x54\\x99\\x07\\x30\\x84\\x64\\x28\\x12\\x58\\xd7\\x06\\\n\\x6f\\x39\\x5d\\x15\\xf5\\x88\\xe0\\x2e\\x26\\x70\\x95\\x78\\x82\\x8c\\x11\\x74\\\n\\x79\\x5b\\x80\\xe9\\xf3\\x5f\\xd6\\x6f\\xee\\xa2\\x80\\xdf\\xf3\\x8c\\xb7\\x7b\\\n\\xc6\\x15\\xa4\\xfb\\x5b\\x09\\x54\\x7a\\x2a\\xa7\\x20\\x58\\x12\\x5e\\xfc\\x70\\\n\\xf4\\x8d\\x0f\\x20\\xf9\\x31\\xbb\\x59\\x26\\xe7\\x91\\x71\\x98\\x97\\xd7\\x01\\\n\\xa7\\x1f\\x57\\xfd\\x9c\\xdf\\x67\\x6e\\x05\\x70\\xb3\\xc6\\x3f\\x94\\x58\\xe9\\\n\\x51\\xec\\x9b\\xf5\\x6d\\xfa\\x9d\\x10\\x50\\x0e\\xc0\\x3f\\x9f\\x09\\xbb\\xcf\\\n\\xf8\\x3b\\xdc\\x9f\\x4d\\x18\\x01\\x17\\x52\\xc9\\x72\\x79\\xda\\xf0\\xd5\\x67\\\n\\x47\\x33\\x1f\\x1d\\xf1\\x65\\x9f\\x69\\x24\\xb2\\x45\\x26\\x3b\\xa5\\x7b\\xea\\\n\\x3f\\xb3\\x67\\xc1\\x1d\\x44\\x26\\x2e\\x26\\x90\\x18\\xa5\\xd5\\xc8\\x7c\\xbc\\\n\\xbe\\x17\\x5a\\x47\\x7a\\x6e\\xd9\\x03\\x92\\x73\\xb1\\x18\\x76\\x22\\xdf\\x91\\\n\\x03\\x16\\x2f\\x3a\\xb6\\xa5\\xa2\\x34\\x78\\x63\\x21\\xf4\\x88\\x95\\x1f\\x8d\\\n\\x3d\\xf9\\x78\\xd7\\xf9\\x6c\\xc5\\xf9\\x44\\x4d\\x8a\\x2c\\xb2\\x3b\\x42\\xf0\\\n\\x66\\x67\\xe6\\x7b\\x07\\x86\\x2b\\xe5\\x67\\x38\\x2f\\x3d\\xc1\\xf1\\xdc\\xbf\\\n\\xf7\\xa3\\x5d\\xb7\\x21\\xd8\\x5a\\x08\\x2d\\x4a\\xbb\\x6a\\x1c\\xcb\\xda\\x8a\\\n\\xc1\\xee\\x89\\x97\\xf0\\xf6\\x51\\x0f\\x12\\xf1\\x4f\\xcb\\x2b\\x1f\\x09\\x4c\\\n\\x67\\xeb\\x27\\x1f\\x62\\xcf\\xc4\\x4b\\x90\\xe9\\x61\\x27\\x51\\x0b\\x5e\\x71\\\n\\xf8\\xd2\\xff\\xdc\\xe5\\xa0\\xbb\\x08\\x12\\xd6\\xcd\\x54\\x9e\\xfc\\x08\\x04\\\n\\xf7\\xc9\\xd3\\x18\\xd7\\x9f\\xe0\\xd8\\x01\\x8b\\x17\\x2f\\x4e\\x4a\\x29\\xaf\\\n\\x75\\xae\\x15\\x3d\\x08\\x1e\\x1e\\x9a\\xa8\\xd8\\x71\\x8a\\xbb\\xdf\\x72\\x54\\\n\\x40\\xcc\\x9c\\xcc\\xb6\\x39\\xf7\\xb0\\x7b\\xd2\\x65\\x24\\xf5\\x72\\x76\\xcc\\\n\\xb8\\x91\\x48\\x20\\x7b\\xfc\\x53\\xc4\\x3f\\x93\\x1d\\xd3\\x6f\\x24\\xa9\\x95\\\n\\xb1\\x6b\\xd2\\x65\\x6c\\x9b\\x73\\x37\\x31\\x73\\x52\\xea\\x66\\x6d\\x47\\xca\\\n\\x09\\xf9\\xf8\\xd1\\x6f\\xe1\\xda\\x87\\xe1\\xd7\\xcf\\x82\\xe9\\x60\\xb2\\x69\\\n\\xfa\\x53\\xb2\\xd7\\x3e\\x9c\\xca\\x9b\\x9f\\x4a\\x2c\\x06\\xec\\xe8\\x21\\x36\\\n\\xb4\\xe5\\x25\\x04\\x67\\xe6\\x11\\x6b\\xb2\\x54\\x79\\x8e\\x9a\\x14\\xbf\\x1f\\\n\\x2a\\x5b\\x1c\\x7a\\x93\\x99\\xcd\\x3f\\xcf\\x5b\\x4f\\xc2\\x18\\x47\\xd3\\xec\\\n\\x3b\\x49\\x68\\x83\\x43\\x47\\x84\\x4c\\x52\\xd9\\xfe\\x22\\x15\\xed\\x2b\\xf0\\\n\\x47\\x5a\\x01\\x88\\xf8\\xa7\\xd1\\x5e\\x79\\x16\\x1d\\x95\\x67\\x23\\xc5\\xe0\\\n\\xa5\\x71\\x3d\\xd1\\xc1\\xec\\x8d\\xdf\\x41\\x7b\\x78\\x73\\xea\\x05\\x9c\\x8b\\\n\\x1f\\xfc\\x17\\x2c\\xb9\\x6a\\xff\\xf5\\xc6\\x15\\xf0\\x8b\\x2f\\x41\\x3c\\xcb\\\n\\x09\\x7f\\xc3\\x07\\xb7\\x3e\\x0d\\xc7\\x9d\\xb5\\x3f\\xed\\xb1\\xdf\\xc0\\xbd\\\n\\x3f\\xcd\\xf7\\xef\\xc5\\x48\\x32\\x43\\xac\\xe7\\x03\\xd7\\x6f\\x55\\x15\\x71\\\n\\x95\\x85\\xac\\x27\\x7b\\x5c\\x68\\xad\\x54\\xe5\\x39\\x66\\x54\\x55\\x92\\xba\\\n\\x3d\\x2c\\x92\\xa0\\xb8\\x27\\xff\\xd3\\x6f\\x0b\\x1f\\x3b\\xa6\\x2f\\x1d\\x66\\\n\\x7c\\x00\\x29\\x34\\xf6\\x8e\\xfb\\x02\\x7b\\xc7\\x7d\\xc1\\x91\\xbe\\x09\\xbd\\\n\\x82\\xae\\x0f\\xe6\\x50\\x69\\xe7\\x59\\xfb\\xff\\xfe\\xed\\x83\\x8d\\x0f\\x29\\\n\\xc3\\xde\\xf2\\x37\\xb8\\xf6\\xcb\\xc3\\x9d\\x60\\xf8\\x52\\xf7\\xd2\\x8d\\x0f\\\n\\xa9\\x32\\xa4\\x0d\\xbf\\xfb\\x59\\xae\\xda\\x4c\\x74\\xbe\\x07\\x5c\\xef\\x7a\\\n\\xfd\\xb7\\x7a\\xee\\x8c\\xb7\\x04\\xdc\\x97\\xf9\\xae\\xd8\\xac\\xc6\\xf5\\xb3\\\n\\x8e\\x99\\x35\\xeb\\x23\\x4b\\xb7\\x4e\\x25\\x83\\x93\\x02\\xe1\\xc6\\xbc\\x75\\\n\\x7c\\x54\\xf5\\x25\\x22\\xfe\\xe9\\x6e\\x55\\xcb\\xac\\x91\\x6d\\x51\\xba\\x3e\\\n\\xcf\\x59\\x92\\xd3\\x97\\xc0\\xc5\\x57\\x67\\xbe\\xb7\\xf0\\x6c\\xb8\\xfe\\x4f\\\n\\x90\\x7e\\x38\\x50\\xd3\\xe1\\x97\\x8f\\xa4\\xee\\x65\\xe2\\xe2\\xab\\x61\\xf1\\\n\\x45\\xb9\\xeb\\x94\\x5c\\x21\\xbf\\x82\\xcb\\xc5\\xfc\\x3e\\x94\\xb8\\x7e\\x2d\\\n\\x30\\x74\\x53\\xb5\\xd6\\xd2\\x39\\xad\\xba\\x7a\\x4a\\x67\\xaa\\x7c\\x91\\xf1\\\n\\xf0\\x9e\\x19\\xdb\\x9d\\xb3\\x6c\\x4b\\x2d\\xa6\\xad\\xea\\x02\\x2f\\x6a\\x65\\\n\\x24\\xd0\\xfa\\x26\\x5a\\xcf\\xde\\xdc\\x42\\xaf\\x3e\\x05\\xaf\\xfe\\x35\\xfb\\\n\\xfd\\xd3\\x2e\\x84\\x5b\\x9f\\x49\\xbd\\x6c\\x75\\x13\\x6e\\x79\\x1a\\x4e\\xcd\\\n\\xa1\\xe3\\xaa\\x65\\xb0\\xe6\\xc9\\x7c\\xaa\\x4d\\x66\\x37\\xc7\\x7a\\x72\\x40\\\n\\x75\\xf5\\x94\\x4e\\x29\\xb9\\x35\\x2d\\xe9\\xdd\\x84\\xa5\\x9e\\xbb\\x60\\xc6\\\n\\x8c\\xf4\\x20\\xcf\\x4f\\x66\\xca\\xab\\x27\\x72\\x6f\\x86\\x77\\x56\\x9c\\x8a\\\n\\xa5\\x79\\x8b\\xae\\xc8\\x44\\x71\\xa3\\x83\\x11\\x57\\x32\\x01\\xbf\\xba\\x04\\\n\\x6a\\x72\\x2c\\xed\\x9f\\xf0\\x79\\xb8\\xf6\\x21\\xb8\\xee\\xe1\\xd4\\xe7\\x6c\\\n\\xac\\xff\\x07\\xdc\\xf2\\x75\\xb0\\x1d\\xbc\\xf0\\x25\\x8b\\x3d\\x6f\\x41\\x99\\\n\\x76\\xec\\x6e\\xa0\\x19\\x08\\xd9\\x28\\xe7\\x2e\\x9c\\x37\\x6d\\xd0\\xa3\\x2d\\\n\\x90\\x19\\xa3\\xa5\\x6d\\x25\\xf7\\xa6\\x7b\\x77\\x89\\xfb\\x39\\x42\\x2e\\x02\\\n\\xef\\x38\\x1b\\x71\\x91\\x88\\xa5\\xfa\\xfa\\x5c\\x2d\\xe1\\x8c\\x8b\\x53\\xdd\\\n\\x55\\x36\\x56\\x2d\\x4b\\xbd\\xb4\\x33\\x9c\\xda\\xc9\\x88\\xe0\\x38\\xcf\\x0e\\\n\\x98\\x37\\x6f\\x5e\\x5c\\x22\\xaf\\x46\\x8a\\xef\\x1c\\x3b\\x67\\xfa\\x9b\\x43\\\n\\xef\\xcb\\x54\\x48\\xdf\\x30\\xa2\\xbe\\xdc\\x63\\xf9\\xb0\\x7f\\xa6\\x57\\x95\\\n\\x32\\x62\\xee\\x6e\\x75\\x2e\\x9c\\x4c\\xc0\\xd2\\x25\\xb9\\x9d\\x90\\x8d\\x55\\\n\\xcb\\xe0\\xa6\\x4b\\x9d\\x3d\\xf9\\xfb\\x39\\x72\\xd4\\x62\\x10\\xea\\x1b\\x5b\\\n\\x62\\x30\\x7c\\x01\\xaa\\x6c\\xdf\\x3a\\xa6\\xee\\xbc\\xc5\\x71\\x39\\xb6\\x65\\\n\\xd3\\x1b\\x8a\\x0f\\x8a\\xeb\\x74\\x82\\xae\\xab\\x14\\x05\\x0d\\x94\\x87\\x76\\\n\\x3a\\x1b\\xff\\xa7\\xa3\\xe9\\xb0\\xf4\\x31\\x38\\xe5\\xbc\\xfc\\xb2\\xe0\\xd5\\\n\\xf8\\x00\\x7b\\x47\\x73\\x17\\x3c\\xe3\\x7a\\x40\\x57\\xe9\\x89\\x84\\x03\\xce\\\n\\x43\\x47\\x15\\x55\\x21\\x58\\xea\\xa3\\xac\\x3c\\x40\\x51\\xb1\\x89\\x61\\x6a\\\n\\xa8\\xaa\\x92\\x8a\\x1d\\x15\\xa9\\x3f\\x45\\x11\\xa8\\x6a\\x2a\\xaa\\xa2\\xa8\\\n\\xd8\\xa4\\xac\\x22\\x40\\xb0\\xd4\\x97\\xfa\\xb6\\xac\\x84\\x87\\xbd\\xf3\\x81\\\n\\x96\\xf0\\x54\\x7e\\x59\\xef\\xc6\\x07\\x08\\x8e\\x5a\\x1c\\x88\\xa2\\xd8\\x27\\\n\\xd8\\xb6\\x72\\x89\\x80\\x25\\x32\\xed\\x5b\\x09\\xa5\\x50\\xd9\\x39\\xed\\x97\\\n\\x1c\\xd9\\x74\\x25\\x7a\\xa2\\xc3\\x79\\x79\\xaa\\xc0\\x54\\x35\\x4c\\xdf\\x01\\\n\\xfa\\xc2\\x77\\x29\\x53\\x8e\\x70\\x82\\xd7\\xa0\\x34\\x0e\\xc0\\x0f\\x38\\x3c\\\n\\x2e\\xa5\\x3a\\xbb\\x61\\xfb\\x5c\\xa9\\x88\\x85\\x36\\x72\\xa1\\x90\\x62\\x2e\\\n\\x42\\x4e\\xd2\\x12\\x9d\\x55\\x53\\xde\\xb9\\xbd\\x34\\xd8\\xb3\\x79\\x74\\x15\\\n\\x78\\x60\\x3b\\xc4\\x5c\\x3e\\x9d\\x86\\x0f\\x6e\\x7e\\x12\\x4e\\x38\\xc7\\x99\\\n\\x7c\\xcd\\x73\\x70\\xdd\\xf9\\xce\\x5f\\xbe\\xfb\\xd9\\x7b\\x50\\x7f\\x41\\x43\\\n\\x3e\\x3e\\xcf\\xc0\\x4e\\xfc\\x1c\\x29\\xae\\x01\\xe9\\x2a\\xa8\\xd5\\x31\\xcb\\\n\\xde\\x81\\x0e\\x17\\x86\\x31\\x7c\\x70\\xf3\\x53\\xb9\\x87\\x9a\\x99\\xa8\\x79\\\n\\x1e\\xae\\x3f\\x3f\\xfb\\xb2\\x45\\x66\\xde\\xfa\\x58\\xfc\\x84\\x89\\x7c\\x74\\\n\\xc6\\xe1\\x08\\xed\\x3a\\xa4\\xbc\\x04\\xf0\\x1e\\xe5\\x9b\\x89\\x17\\x77\\xc1\\\n\\xf6\\x1e\\x67\\xb2\\x86\\x0f\\xfe\\xe3\\xaf\\x70\\xfc\\xe7\\xbc\\xd5\\xb5\\xe1\\\n\\x05\\xb8\\xee\\x3c\\xe7\\x4e\\x10\\x3c\\xf1\\xb1\\x70\\x40\\x3f\\xf2\\xd9\\xc9\\\n\\x01\\x42\\xc5\\x17\\x00\\x9f\\x07\\x4e\\xc1\\xe5\\x59\\xb3\\x8c\\xd4\\x75\\x40\\\n\\x4d\\x9e\\x99\\x30\\x80\\x6e\\xc0\\x8d\\x4f\\xc0\\x49\\x5f\\xcc\\x2e\\xb3\\x6a\\\n\\x59\\xaa\\xbf\\xcf\\x35\\x17\\x58\\xf7\\x34\\xdc\\x70\\x11\\x24\\xe2\\x4e\\xb4\\\n\\xbb\\xe6\\x63\\xe5\\x80\\xa1\\xc8\\x3f\\x1f\\x39\\x1d\\x21\\xe7\\x23\\xc4\\x6c\\\n\\x24\\xb3\\x11\\x9c\\x02\\x4c\\xcd\\x93\\xad\\x15\\xc9\\xab\\x40\\x23\\xc8\\x26\\\n\\x56\\xec\\xb6\\xd8\\xde\\x93\\x7b\\x60\\x6f\\xfa\\x33\\x2f\\xac\\xa5\\xf3\\xc2\\\n\\x1f\\xe1\\xb6\\x2b\\x52\\x9f\\x7f\\xf1\\x10\\x9c\\x7d\\x59\\x76\\xd9\\x8d\\x2b\\\n\\x52\\x93\\xba\\x58\\xde\\xf0\\x96\\x63\\x3f\\xd6\\x0e\\x18\\x8a\\xfc\\xcb\\x91\\\n\\xe3\\x10\\x3c\\x4f\\xf6\\xef\\xa7\\xdb\\x88\\xe4\\x1c\\xf1\\xd5\\xa6\\x81\\x47\\\n\\x5e\\x82\\xe0\\x64\\x5a\\x80\\xec\\xab\\x7b\\x8b\\x2f\\x82\\x5f\\x3d\\x96\\xbd\\\n\\xe2\\x57\\x96\\xa7\\x96\\x2a\\xac\\xbe\\x93\\x96\\x9a\\x0e\\x37\\x3c\\x9a\\x7b\\\n\\x3d\\xe8\\x86\\x8b\\x60\\xf5\\x13\\xd9\\xef\\x43\\x93\\x58\\xcb\\xec\\xff\\x33\\\n\\xbf\\xa2\\x04\\x20\\xbe\\xda\\xb4\\x17\\xb5\\xe9\\x04\\x10\\xdf\\x02\\x5e\\x03\\\n\\x7a\\xfb\\xfe\\xd6\\x81\\xf8\\x16\\x6a\\xd3\\x89\\xe9\\xc6\\x07\\x10\\xa9\\x6f\\\n\\xc8\\x7d\\x34\\x67\\xc1\\xab\\x1f\\x87\\xbb\\x7f\\x92\\xf9\\xde\\x8a\\x47\\x60\\\n\\xe9\\xc5\\xfb\\x8d\\x0f\\xa9\\xe1\\xe9\\x0d\\x4b\\xe0\\xa5\\x3f\\x67\\xce\\x73\\\n\\xf7\\x4f\\xf2\\x19\\x1f\\x24\\x8f\\xf7\\xe9\\xf7\\xff\\x1f\\xb9\\x88\\x2a\\x54\\\n\\x76\\x02\\xb9\\x47\\x5a\\x4b\\xae\\x4a\\x6d\\xca\\xf4\\xb3\\xf2\\x2f\\x70\\xf3\\\n\\xe5\\xd9\\x27\\x59\\x8a\\x0a\\xd7\\xff\\x11\\xce\\xfc\\xea\\xfe\\xb4\\x7b\\x7f\\\n\\x9a\\xda\\x94\\xc9\\x4d\\x08\\x95\\x69\\xe2\\x95\\xd1\\x9d\\x09\\x7f\\x6c\\x10\\\n\\xaf\\xd3\\x86\\xcc\\xb6\\x87\\x91\\xc6\\x63\\xbf\\xd9\\xbf\\x91\\xb2\\xf2\\xd1\\\n\\xdc\\xc6\\x87\\xd4\\xbd\\x9b\\x2f\\x4f\\xc9\\x42\\x2a\\x6f\\x7e\\xe3\\x03\\xdc\\\n\\x27\\x5e\\x61\\x2f\\x1c\\x22\\x2d\\x00\\x40\\x9e\\x44\\x10\\x85\\x46\\x20\\xff\\\n\\xf7\\x7e\\x7e\\xee\\x72\\x58\\xf5\\x98\\xf3\\x89\\x95\\x6e\\xc2\\x19\\x4b\\x52\\\n\\x2f\\xea\\x7c\\x08\\x3e\\xc0\\x62\\xae\\x78\\x8d\\x9e\\xd4\\xe5\\x21\\x84\\x3c\\\n\\x99\\x0b\\x80\\xe5\\x07\\x53\\x05\\x24\\x17\\x88\\x75\\x0c\\x8c\\xca\\x0e\\x89\\\n\\x2e\\xa8\\x1f\\xb1\\x96\\x27\\x91\\xdc\\x79\\x10\\x55\\xb8\\x23\\xdd\\xf8\\x70\\\n\\x88\\xb5\\x00\\x18\\x18\\x96\\x3e\\x00\\x5c\\x71\\x80\\xab\\x7e\\x90\\xb5\\x7c\\\n\\x53\\x0c\\xf9\\x36\\xa3\\x43\\xaa\\x05\\x40\\xdf\\xb0\\xb4\\x83\\xef\\x02\\x79\\\n\\x37\\x6d\\x0b\\xc8\\x72\\x3a\\xf8\\xee\\x50\\xe3\\xc3\\x21\\xe8\\x00\\x00\\xb1\\\n\\x95\\x38\\x13\\x59\\x02\\xdc\\x33\\xfa\\x95\\x71\\x17\\x13\\xb9\\x58\\x6c\\x25\\\n\\xe3\\xda\\xc4\\x21\\xd7\\x05\\x0d\\x45\\x9e\\xc2\\xf9\\xd8\\xfc\\x0e\\x41\\xce\\\n\\x1f\\x28\\xf6\\xc0\\x6e\\xe0\\x7b\\x62\\x2d\\x7f\\xcb\\x25\\x74\\x48\\xb6\\x80\\\n\\x74\\xc4\\xab\\x3c\\x85\\xc6\\x1c\\xe0\\x0e\\x60\\x44\\x3f\\x72\\xd3\\x47\\x14\\\n\\xf8\\x2d\\x26\\x73\\xf2\\x19\\x1f\\xc6\\x5a\\xc0\\x20\\xe4\\x49\\x4c\\x46\\xe1\\\n\\x87\\xc0\\xa5\\xc0\\xe1\\xf9\\xe4\\x87\\xf0\\x1e\\xf0\\x08\\x36\\xf7\\xb8\\x39\\\n\\xa4\\x37\\xe6\\x80\\x0c\\x48\\x50\\x38\\x95\\x63\\xb1\\x38\\x19\\xc1\\x42\\x60\\\n\\x2e\\x29\\x87\\xf4\\xc7\\x4a\\x76\\x92\\x32\\xf8\\xdb\\x48\\x36\\x22\\x79\\x95\\\n\\xd7\\xa8\\xf3\\x72\\x4c\\xf5\\x7f\\x01\\xf3\\x93\\x09\\x81\\x60\\xc5\\x14\\x0a\\\n\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82\\\n""\n\nqt_resource_name = b""\\\n\\x00\\x05\\\n\\x00\\x4f\\xa6\\x18\\\n\\x00\\x49\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x38\\\n\\x00\\x06\\\n\\x05\\x03\\x7d\\xc3\\\n\\x00\\x49\\\n\\x00\\x6d\\x00\\x61\\x00\\x67\\x00\\x65\\x00\\x73\\\n\\x00\\x09\\\n\\x0d\\x5f\\x8f\\xd3\\\n\\x00\\x6e\\\n\\x00\\x65\\x00\\x77\\x00\\x5f\\x00\\x69\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\\n\\x00\\x13\\\n\\x08\\x4d\\xe9\\x67\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x61\\x00\\x64\\x00\\x64\\x00\\x2d\\x00\\x66\\x00\\x69\\x00\\x6c\\x00\\x65\\x00\\x2e\\x00\\x70\\\n\\x00\\x6e\\x00\\x67\\\n\\x00\\x15\\\n\\x08\\xc3\\x91\\xe7\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x62\\x00\\x65\\x00\\x6c\\x00\\x6c\\x00\\x2d\\x00\\x63\\x00\\x75\\x00\\x72\\x00\\x76\\x00\\x65\\\n\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x17\\\n\\x02\\x97\\xd5\\x87\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x70\\x00\\x65\\x00\\x61\\x00\\x6b\\x00\\x2d\\x00\\x6d\\x00\\x61\\x00\\x78\\x00\\x69\\x00\\x6d\\\n\\x00\\x75\\x00\\x6d\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x0f\\\n\\x04\\x6c\\x80\\xe7\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x73\\x00\\x61\\x00\\x76\\x00\\x65\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x19\\\n\\x01\\x09\\xe4\\xc7\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x64\\x00\\x6f\\x00\\x2d\\x00\\x6e\\x00\\x6f\\x00\\x74\\x00\\x2d\\x00\\x64\\x00\\x69\\x00\\x73\\\n\\x00\\x74\\x00\\x75\\x00\\x72\\x00\\x62\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x1d\\\n\\x07\\x48\\x74\\xc7\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x64\\x00\\x65\\x00\\x6c\\x00\\x65\\x00\\x74\\x00\\x65\\x00\\x2d\\x00\\x64\\x00\\x6f\\x00\\x63\\\n\\x00\\x75\\x00\\x6d\\x00\\x65\\x00\\x6e\\x00\\x74\\x00\\x2d\\x00\\x39\\x00\\x36\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x14\\\n\\x08\\xa6\\xbf\\xe7\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x74\\x00\\x68\\x00\\x75\\x00\\x6d\\x00\\x62\\x00\\x73\\x00\\x2d\\x00\\x75\\x00\\x70\\x00\\x2e\\\n\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x19\\\n\\x03\\x29\\x1c\\x27\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x76\\x00\\x65\\x00\\x72\\x00\\x74\\x00\\x69\\x00\\x63\\x00\\x61\\x00\\x6c\\x00\\x2d\\x00\\x73\\\n\\x00\\x68\\x00\\x69\\x00\\x66\\x00\\x74\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x18\\\n\\x0a\\x77\\x70\\x27\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x65\\x00\\x64\\x00\\x69\\x00\\x74\\x00\\x2d\\x00\\x70\\x00\\x72\\x00\\x6f\\x00\\x70\\x00\\x65\\\n\\x00\\x72\\x00\\x74\\x00\\x79\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x1e\\\n\\x0e\\xc9\\x79\\x67\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x76\\x00\\x65\\x00\\x72\\x00\\x74\\x00\\x69\\x00\\x63\\x00\\x61\\x00\\x6c\\x00\\x2d\\x00\\x73\\\n\\x00\\x68\\x00\\x69\\x00\\x66\\x00\\x74\\x00\\x2d\\x00\\x64\\x00\\x61\\x00\\x74\\x00\\x61\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x0e\\\n\\x04\\x6c\\x9a\\xa7\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x69\\x00\\x73\\x00\\x6f\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x17\\\n\\x02\\x97\\xc1\\x87\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x70\\x00\\x65\\x00\\x61\\x00\\x6b\\x00\\x2d\\x00\\x6d\\x00\\x69\\x00\\x6e\\x00\\x69\\x00\\x6d\\\n\\x00\\x75\\x00\\x6d\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x15\\\n\\x07\\x2c\\xb0\\xa7\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x74\\x00\\x6f\\x00\\x67\\x00\\x67\\x00\\x6c\\x00\\x65\\x00\\x2d\\x00\\x6f\\x00\\x66\\x00\\x66\\\n\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x14\\\n\\x0f\\x8f\\x09\\x27\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x74\\x00\\x6f\\x00\\x67\\x00\\x67\\x00\\x6c\\x00\\x65\\x00\\x2d\\x00\\x6f\\x00\\x6e\\x00\\x2e\\\n\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x12\\\n\\x0d\\x54\\x0c\\x47\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x63\\x00\\x6f\\x00\\x70\\x00\\x79\\x00\\x2d\\x00\\x39\\x00\\x36\\x00\\x2e\\x00\\x70\\x00\\x6e\\\n\\x00\\x67\\\n\\x00\\x16\\\n\\x03\\x49\\xe8\\xe7\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x74\\x00\\x68\\x00\\x75\\x00\\x6d\\x00\\x62\\x00\\x73\\x00\\x2d\\x00\\x64\\x00\\x6f\\x00\\x77\\\n\\x00\\x6e\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x17\\\n\\x03\\x22\\x06\\x07\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x65\\x00\\x69\\x00\\x6e\\x00\\x73\\x00\\x74\\x00\\x65\\x00\\x69\\x00\\x6e\\x00\\x2d\\x00\\x79\\\n\\x00\\x65\\x00\\x73\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x0d\\\n\\x0f\\x12\\xfb\\x87\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x6f\\x00\\x6b\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n\\x00\\x16\\\n\\x0e\\xa0\\x12\\x47\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x38\\x00\\x2d\\x00\\x65\\x00\\x69\\x00\\x6e\\x00\\x73\\x00\\x74\\x00\\x65\\x00\\x69\\x00\\x6e\\x00\\x2d\\x00\\x6e\\\n\\x00\\x6f\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\\n""\n\nqt_resource_struct_v1 = b""\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\\\n\\x00\\x00\\x00\\x10\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x03\\\n\\x00\\x00\\x00\\x22\\x00\\x02\\x00\\x00\\x00\\x13\\x00\\x00\\x00\\x04\\\n\\x00\\x00\\x00\\xee\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x14\\xc8\\\n\\x00\\x00\\x02\\x66\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x59\\x20\\\n\\x00\\x00\\x00\\x96\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x0a\\x1d\\\n\\x00\\x00\\x03\\x54\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x7c\\x8a\\\n\\x00\\x00\\x01\\x94\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x28\\xed\\\n\\x00\\x00\\x03\\x22\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x74\\xe5\\\n\\x00\\x00\\x00\\xca\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x11\\xb1\\\n\\x00\\x00\\x02\\x44\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x4f\\xbb\\\n\\x00\\x00\\x02\\x9a\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x60\\xd2\\\n\\x00\\x00\\x01\\x26\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x1a\\x18\\\n\\x00\\x00\\x00\\x3a\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x01\\x66\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x21\\x5e\\\n\\x00\\x00\\x00\\x66\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x05\\xcd\\\n\\x00\\x00\\x01\\xcc\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x3a\\xa1\\\n\\x00\\x00\\x02\\xf8\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x72\\x8b\\\n\\x00\\x00\\x03\\xa8\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x97\\xf3\\\n\\x00\\x00\\x02\\x02\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x40\\x61\\\n\\x00\\x00\\x03\\x88\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x91\\x67\\\n\\x00\\x00\\x02\\xca\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x69\\x69\\\n""\n\nqt_resource_struct_v2 = b""\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\x10\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x03\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\x22\\x00\\x02\\x00\\x00\\x00\\x13\\x00\\x00\\x00\\x04\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\xee\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x14\\xc8\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x02\\x66\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x59\\x20\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x00\\x96\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x0a\\x1d\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x03\\x54\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x7c\\x8a\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x01\\x94\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x28\\xed\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x03\\x22\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x74\\xe5\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x00\\xca\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x11\\xb1\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x02\\x44\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x4f\\xbb\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x02\\x9a\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x60\\xd2\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x01\\x26\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x1a\\x18\\\n\\x00\\x00\\x01\\x71\\x25\\xbb\\x3f\\x50\\\n\\x00\\x00\\x00\\x3a\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x01\\x66\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x21\\x5e\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x00\\x66\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x05\\xcd\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x01\\xcc\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x3a\\xa1\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x02\\xf8\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x72\\x8b\\\n\\x00\\x00\\x01\\x71\\x25\\xbb\\x3f\\x4f\\\n\\x00\\x00\\x03\\xa8\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x97\\xf3\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x02\\x02\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x40\\x61\\\n\\x00\\x00\\x01\\x72\\x27\\xa8\\xed\\x0d\\\n\\x00\\x00\\x03\\x88\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x91\\x67\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n\\x00\\x00\\x02\\xca\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x69\\x69\\\n\\x00\\x00\\x01\\x6f\\xf1\\x7c\\x3d\\xe8\\\n""\n\nqt_version = [int(v) for v in QtCore.qVersion().split(\'.\')]\nif qt_version < [5, 8, 0]:\n    rcc_version = 1\n    qt_resource_struct = qt_resource_struct_v1\nelse:\n    rcc_version = 2\n    qt_resource_struct = qt_resource_struct_v2\n\ndef qInitResources():\n    QtCore.qRegisterResourceData(rcc_version, qt_resource_struct, qt_resource_name, qt_resource_data)\n\ndef qCleanupResources():\n    QtCore.qUnregisterResourceData(rcc_version, qt_resource_struct, qt_resource_name, qt_resource_data)\n\nqInitResources()\n'"
RepTate/gui/__init__.py,0,b''
RepTate/gui/bob_LVE.py,0,"b'# -*- coding: utf-8 -*-\n\n# Form implementation generated from reading ui file \'gui/bob_LVE.ui\'\n#\n# Created by: PyQt5 UI code generator 5.10\n#\n# WARNING! All changes made in this file will be lost!\n\nfrom PyQt5 import QtCore, QtGui, QtWidgets\n\nclass Ui_Dialog(object):\n    def setupUi(self, Dialog):\n        Dialog.setObjectName(""Dialog"")\n        Dialog.resize(272, 474)\n        self.verticalLayout_2 = QtWidgets.QVBoxLayout(Dialog)\n        self.verticalLayout_2.setObjectName(""verticalLayout_2"")\n        self.gridLayout = QtWidgets.QGridLayout()\n        self.gridLayout.setObjectName(""gridLayout"")\n        self.label_11 = QtWidgets.QLabel(Dialog)\n        self.label_11.setObjectName(""label_11"")\n        self.gridLayout.addWidget(self.label_11, 0, 2, 1, 1)\n        self.label_9 = QtWidgets.QLabel(Dialog)\n        self.label_9.setObjectName(""label_9"")\n        self.gridLayout.addWidget(self.label_9, 0, 0, 1, 1)\n        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)\n        self.gridLayout.addItem(spacerItem, 0, 4, 1, 1)\n        self.pb_pick_file = QtWidgets.QToolButton(Dialog)\n        self.pb_pick_file.setObjectName(""pb_pick_file"")\n        self.gridLayout.addWidget(self.pb_pick_file, 0, 1, 1, 1)\n        self.selected_file = QtWidgets.QLabel(Dialog)\n        self.selected_file.setText("""")\n        self.selected_file.setObjectName(""selected_file"")\n        self.gridLayout.addWidget(self.selected_file, 0, 3, 1, 1)\n        self.verticalLayout_2.addLayout(self.gridLayout)\n        self.inp_param_widget = QtWidgets.QWidget(Dialog)\n        self.inp_param_widget.setObjectName(""inp_param_widget"")\n        self.verticalLayout = QtWidgets.QVBoxLayout(self.inp_param_widget)\n        self.verticalLayout.setObjectName(""verticalLayout"")\n        self.scrollArea = QtWidgets.QScrollArea(self.inp_param_widget)\n        self.scrollArea.setWidgetResizable(True)\n        self.scrollArea.setObjectName(""scrollArea"")\n        self.scrollAreaWidgetContents = QtWidgets.QWidget()\n        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 222, 349))\n        self.scrollAreaWidgetContents.setObjectName(""scrollAreaWidgetContents"")\n        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)\n        self.verticalLayout_3.setObjectName(""verticalLayout_3"")\n        self.groupBox_3 = QtWidgets.QGroupBox(self.scrollAreaWidgetContents)\n        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Preferred)\n        sizePolicy.setHorizontalStretch(0)\n        sizePolicy.setVerticalStretch(0)\n        sizePolicy.setHeightForWidth(self.groupBox_3.sizePolicy().hasHeightForWidth())\n        self.groupBox_3.setSizePolicy(sizePolicy)\n        self.groupBox_3.setObjectName(""groupBox_3"")\n        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.groupBox_3)\n        self.verticalLayout_4.setObjectName(""verticalLayout_4"")\n        self.formLayout_4 = QtWidgets.QFormLayout()\n        self.formLayout_4.setObjectName(""formLayout_4"")\n        self.n_polymers = QtWidgets.QLineEdit(self.groupBox_3)\n        self.n_polymers.setObjectName(""n_polymers"")\n        self.formLayout_4.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.n_polymers)\n        self.label_6 = QtWidgets.QLabel(self.groupBox_3)\n        self.label_6.setObjectName(""label_6"")\n        self.formLayout_4.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_6)\n        self.label_7 = QtWidgets.QLabel(self.groupBox_3)\n        self.label_7.setObjectName(""label_7"")\n        self.formLayout_4.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label_7)\n        self.n_segments = QtWidgets.QLineEdit(self.groupBox_3)\n        self.n_segments.setObjectName(""n_segments"")\n        self.formLayout_4.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.n_segments)\n        self.verticalLayout_4.addLayout(self.formLayout_4)\n        self.verticalLayout_3.addWidget(self.groupBox_3)\n        self.groupBox_2 = QtWidgets.QGroupBox(self.scrollAreaWidgetContents)\n        self.groupBox_2.setObjectName(""groupBox_2"")\n        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.groupBox_2)\n        self.verticalLayout_7.setObjectName(""verticalLayout_7"")\n        self.formLayout = QtWidgets.QFormLayout()\n        self.formLayout.setFieldGrowthPolicy(QtWidgets.QFormLayout.FieldsStayAtSizeHint)\n        self.formLayout.setObjectName(""formLayout"")\n        self.label_2 = QtWidgets.QLabel(self.groupBox_2)\n        self.label_2.setObjectName(""label_2"")\n        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label_2)\n        self.alpha = QtWidgets.QLineEdit(self.groupBox_2)\n        self.alpha.setObjectName(""alpha"")\n        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.alpha)\n        self.label = QtWidgets.QLabel(self.groupBox_2)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.label.setFont(font)\n        self.label.setObjectName(""label"")\n        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.label)\n        self.m0 = QtWidgets.QLineEdit(self.groupBox_2)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.m0.setFont(font)\n        self.m0.setInputMethodHints(QtCore.Qt.ImhDigitsOnly)\n        self.m0.setObjectName(""m0"")\n        self.formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.m0)\n        self.label_4 = QtWidgets.QLabel(self.groupBox_2)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.label_4.setFont(font)\n        self.label_4.setObjectName(""label_4"")\n        self.formLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.label_4)\n        self.ne = QtWidgets.QLineEdit(self.groupBox_2)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.ne.setFont(font)\n        self.ne.setInputMethodHints(QtCore.Qt.ImhDigitsOnly)\n        self.ne.setObjectName(""ne"")\n        self.formLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.ne)\n        self.label_3 = QtWidgets.QLabel(self.groupBox_2)\n        self.label_3.setObjectName(""label_3"")\n        self.formLayout.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.label_3)\n        self.density = QtWidgets.QLineEdit(self.groupBox_2)\n        self.density.setObjectName(""density"")\n        self.formLayout.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.density)\n        self.label_5 = QtWidgets.QLabel(self.groupBox_2)\n        self.label_5.setObjectName(""label_5"")\n        self.formLayout.setWidget(5, QtWidgets.QFormLayout.LabelRole, self.label_5)\n        self.taue = QtWidgets.QLineEdit(self.groupBox_2)\n        self.taue.setObjectName(""taue"")\n        self.formLayout.setWidget(5, QtWidgets.QFormLayout.FieldRole, self.taue)\n        self.label_8 = QtWidgets.QLabel(self.groupBox_2)\n        self.label_8.setObjectName(""label_8"")\n        self.formLayout.setWidget(6, QtWidgets.QFormLayout.LabelRole, self.label_8)\n        self.temperature = QtWidgets.QLineEdit(self.groupBox_2)\n        self.temperature.setObjectName(""temperature"")\n        self.formLayout.setWidget(6, QtWidgets.QFormLayout.FieldRole, self.temperature)\n        self.verticalLayout_7.addLayout(self.formLayout)\n        self.verticalLayout_3.addWidget(self.groupBox_2)\n        self.scrollArea.setWidget(self.scrollAreaWidgetContents)\n        self.verticalLayout.addWidget(self.scrollArea)\n        self.verticalLayout_2.addWidget(self.inp_param_widget)\n        self.horizontalLayout = QtWidgets.QHBoxLayout()\n        self.horizontalLayout.setObjectName(""horizontalLayout"")\n        self.pb_help = QtWidgets.QPushButton(Dialog)\n        self.pb_help.setObjectName(""pb_help"")\n        self.horizontalLayout.addWidget(self.pb_help)\n        self.pb_cancel = QtWidgets.QPushButton(Dialog)\n        self.pb_cancel.setObjectName(""pb_cancel"")\n        self.horizontalLayout.addWidget(self.pb_cancel)\n        self.pb_ok = QtWidgets.QPushButton(Dialog)\n        self.pb_ok.setObjectName(""pb_ok"")\n        self.horizontalLayout.addWidget(self.pb_ok)\n        self.verticalLayout_2.addLayout(self.horizontalLayout)\n\n        self.retranslateUi(Dialog)\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\n\n    def retranslateUi(self, Dialog):\n        _translate = QtCore.QCoreApplication.translate\n        Dialog.setWindowTitle(_translate(""Dialog"", ""Simulation Parameters""))\n        self.label_11.setText(_translate(""Dialog"", ""Selected:""))\n        self.label_9.setText(_translate(""Dialog"", ""Input polyconf""))\n        self.pb_pick_file.setText(_translate(""Dialog"", ""...""))\n        self.groupBox_3.setTitle(_translate(""Dialog"", ""Memory""))\n        self.n_polymers.setToolTip(_translate(""Dialog"", ""Maximum number of polymer""))\n        self.n_polymers.setText(_translate(""Dialog"", ""1e4""))\n        self.label_6.setToolTip(_translate(""Dialog"", ""Maximum number of polymer""))\n        self.label_6.setText(_translate(""Dialog"", ""Num. polymers""))\n        self.label_7.setToolTip(_translate(""Dialog"", ""Maximum total number of arms""))\n        self.label_7.setText(_translate(""Dialog"", ""Num. segments""))\n        self.n_segments.setToolTip(_translate(""Dialog"", ""Maximum total number of arms""))\n        self.n_segments.setText(_translate(""Dialog"", ""1e5""))\n        self.groupBox_2.setTitle(_translate(""Dialog"", ""Parameters""))\n        self.label_2.setToolTip(_translate(""Dialog"", ""Tube dilation exponent""))\n        self.label_2.setText(_translate(""Dialog"", ""alpha""))\n        self.alpha.setToolTip(_translate(""Dialog"", ""Tube dilation exponent""))\n        self.alpha.setText(_translate(""Dialog"", ""1""))\n        self.label.setToolTip(_translate(""Dialog"", ""Mass of a monomer""))\n        self.label.setText(_translate(""Dialog"", ""M0 (g/mol)""))\n        self.m0.setToolTip(_translate(""Dialog"", ""Mass of a monomer""))\n        self.m0.setText(_translate(""Dialog"", ""28""))\n        self.label_4.setToolTip(_translate(""Dialog"", ""Number of monomers in an entanglement length""))\n        self.label_4.setText(_translate(""Dialog"", ""Ne""))\n        self.ne.setToolTip(_translate(""Dialog"", ""Number of monomers in an entanglement length""))\n        self.ne.setText(_translate(""Dialog"", ""40""))\n        self.label_3.setToolTip(_translate(""Dialog"", ""Mass-density of the polymer (g/cc accepted)""))\n        self.label_3.setText(_translate(""Dialog"", ""<html><head/><body><p>density (kg/m<span style=\\"" vertical-align:super;\\"">3</span>)</p></body></html>""))\n        self.density.setToolTip(_translate(""Dialog"", ""Mass-density of the polymer (g/cc accepted)""))\n        self.density.setText(_translate(""Dialog"", ""1e3""))\n        self.label_5.setToolTip(_translate(""Dialog"", ""Entanglement time""))\n        self.label_5.setText(_translate(""Dialog"", ""tau_e (s)""))\n        self.taue.setToolTip(_translate(""Dialog"", ""Entanglement time""))\n        self.taue.setText(_translate(""Dialog"", ""1e-2""))\n        self.label_8.setToolTip(_translate(""Dialog"", ""Temperature""))\n        self.label_8.setText(_translate(""Dialog"", ""T (K)""))\n        self.temperature.setToolTip(_translate(""Dialog"", ""Temperature""))\n        self.temperature.setText(_translate(""Dialog"", ""300""))\n        self.pb_help.setToolTip(_translate(""Dialog"", ""Show BoB documentation""))\n        self.pb_help.setText(_translate(""Dialog"", ""Help""))\n        self.pb_cancel.setText(_translate(""Dialog"", ""Cancel""))\n        self.pb_ok.setText(_translate(""Dialog"", ""OK""))\n\n'"
RepTate/gui/bob_gen_poly.py,0,"b'# -*- coding: utf-8 -*-\n\n# Form implementation generated from reading ui file \'gui/bob_gen_poly.ui\'\n#\n# Created by: PyQt5 UI code generator 5.10\n#\n# WARNING! All changes made in this file will be lost!\n\nfrom PyQt5 import QtCore, QtGui, QtWidgets\n\nclass Ui_Dialog(object):\n    def setupUi(self, Dialog):\n        Dialog.setObjectName(""Dialog"")\n        Dialog.resize(360, 658)\n        self.verticalLayout = QtWidgets.QVBoxLayout(Dialog)\n        self.verticalLayout.setObjectName(""verticalLayout"")\n        self.verticalLayout_9 = QtWidgets.QVBoxLayout()\n        self.verticalLayout_9.setObjectName(""verticalLayout_9"")\n        self.horizontalLayout = QtWidgets.QHBoxLayout()\n        self.horizontalLayout.setObjectName(""horizontalLayout"")\n        self.label_8 = QtWidgets.QLabel(Dialog)\n        self.label_8.setObjectName(""label_8"")\n        self.horizontalLayout.addWidget(self.label_8)\n        self.pb_pick_file = QtWidgets.QToolButton(Dialog)\n        self.pb_pick_file.setObjectName(""pb_pick_file"")\n        self.horizontalLayout.addWidget(self.pb_pick_file)\n        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)\n        self.horizontalLayout.addItem(spacerItem)\n        self.verticalLayout_9.addLayout(self.horizontalLayout)\n        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()\n        self.horizontalLayout_2.setObjectName(""horizontalLayout_2"")\n        self.label_9 = QtWidgets.QLabel(Dialog)\n        self.label_9.setObjectName(""label_9"")\n        self.horizontalLayout_2.addWidget(self.label_9)\n        self.selected_file = QtWidgets.QLabel(Dialog)\n        self.selected_file.setText("""")\n        self.selected_file.setObjectName(""selected_file"")\n        self.horizontalLayout_2.addWidget(self.selected_file)\n        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)\n        self.horizontalLayout_2.addItem(spacerItem1)\n        self.verticalLayout_9.addLayout(self.horizontalLayout_2)\n        self.verticalLayout.addLayout(self.verticalLayout_9)\n        self.inp_param_widget = QtWidgets.QWidget(Dialog)\n        self.inp_param_widget.setObjectName(""inp_param_widget"")\n        self.verticalLayout_13 = QtWidgets.QVBoxLayout(self.inp_param_widget)\n        self.verticalLayout_13.setObjectName(""verticalLayout_13"")\n        self.tabWidget = QtWidgets.QTabWidget(self.inp_param_widget)\n        self.tabWidget.setObjectName(""tabWidget"")\n        self.Chemistry = QtWidgets.QWidget()\n        self.Chemistry.setObjectName(""Chemistry"")\n        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.Chemistry)\n        self.verticalLayout_8.setObjectName(""verticalLayout_8"")\n        self.scrollArea = QtWidgets.QScrollArea(self.Chemistry)\n        self.scrollArea.setWidgetResizable(True)\n        self.scrollArea.setObjectName(""scrollArea"")\n        self.scrollAreaWidgetContents = QtWidgets.QWidget()\n        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 277, 423))\n        self.scrollAreaWidgetContents.setObjectName(""scrollAreaWidgetContents"")\n        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)\n        self.verticalLayout_6.setObjectName(""verticalLayout_6"")\n        self.groupBox_2 = QtWidgets.QGroupBox(self.scrollAreaWidgetContents)\n        self.groupBox_2.setObjectName(""groupBox_2"")\n        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.groupBox_2)\n        self.verticalLayout_7.setObjectName(""verticalLayout_7"")\n        self.formLayout = QtWidgets.QFormLayout()\n        self.formLayout.setFieldGrowthPolicy(QtWidgets.QFormLayout.FieldsStayAtSizeHint)\n        self.formLayout.setObjectName(""formLayout"")\n        self.label = QtWidgets.QLabel(self.groupBox_2)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.label.setFont(font)\n        self.label.setObjectName(""label"")\n        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label)\n        self.m0 = QtWidgets.QLineEdit(self.groupBox_2)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.m0.setFont(font)\n        self.m0.setInputMethodHints(QtCore.Qt.ImhDigitsOnly)\n        self.m0.setObjectName(""m0"")\n        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.m0)\n        self.label_4 = QtWidgets.QLabel(self.groupBox_2)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.label_4.setFont(font)\n        self.label_4.setObjectName(""label_4"")\n        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label_4)\n        self.ne = QtWidgets.QLineEdit(self.groupBox_2)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.ne.setFont(font)\n        self.ne.setInputMethodHints(QtCore.Qt.ImhDigitsOnly)\n        self.ne.setObjectName(""ne"")\n        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.ne)\n        self.verticalLayout_7.addLayout(self.formLayout)\n        self.verticalLayout_6.addWidget(self.groupBox_2)\n        self.groupBox_3 = QtWidgets.QGroupBox(self.scrollAreaWidgetContents)\n        self.groupBox_3.setObjectName(""groupBox_3"")\n        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.groupBox_3)\n        self.verticalLayout_3.setObjectName(""verticalLayout_3"")\n        self.verticalLayout_2 = QtWidgets.QVBoxLayout()\n        self.verticalLayout_2.setObjectName(""verticalLayout_2"")\n        self.component = QtWidgets.QFormLayout()\n        self.component.setFieldGrowthPolicy(QtWidgets.QFormLayout.FieldsStayAtSizeHint)\n        self.component.setObjectName(""component"")\n        self.label_2 = QtWidgets.QLabel(self.groupBox_3)\n        self.label_2.setObjectName(""label_2"")\n        self.component.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_2)\n        self.ratio = QtWidgets.QLineEdit(self.groupBox_3)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.ratio.setFont(font)\n        self.ratio.setInputMethodHints(QtCore.Qt.ImhDigitsOnly)\n        self.ratio.setObjectName(""ratio"")\n        self.component.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.ratio)\n        self.label_3 = QtWidgets.QLabel(self.groupBox_3)\n        self.label_3.setObjectName(""label_3"")\n        self.component.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label_3)\n        self.cb_type = QtWidgets.QComboBox(self.groupBox_3)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.cb_type.setFont(font)\n        self.cb_type.setObjectName(""cb_type"")\n        self.component.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.cb_type)\n        self.label_5 = QtWidgets.QLabel(self.groupBox_3)\n        self.label_5.setWordWrap(True)\n        self.label_5.setObjectName(""label_5"")\n        self.component.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.label_5)\n        self.number = QtWidgets.QLineEdit(self.groupBox_3)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.number.setFont(font)\n        self.number.setInputMethodHints(QtCore.Qt.ImhDigitsOnly)\n        self.number.setObjectName(""number"")\n        self.component.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.number)\n        self.ngeneration_label = QtWidgets.QLabel(self.groupBox_3)\n        self.ngeneration_label.setEnabled(False)\n        self.ngeneration_label.setObjectName(""ngeneration_label"")\n        self.component.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.ngeneration_label)\n        self.sb_ngeneration = QtWidgets.QSpinBox(self.groupBox_3)\n        self.sb_ngeneration.setEnabled(False)\n        self.sb_ngeneration.setMinimum(0)\n        self.sb_ngeneration.setProperty(""value"", 2)\n        self.sb_ngeneration.setObjectName(""sb_ngeneration"")\n        self.component.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.sb_ngeneration)\n        self.verticalLayout_2.addLayout(self.component)\n        self.add_button = QtWidgets.QPushButton(self.groupBox_3)\n        self.add_button.setObjectName(""add_button"")\n        self.verticalLayout_2.addWidget(self.add_button)\n        self.verticalLayout_3.addLayout(self.verticalLayout_2)\n        self.verticalLayout_6.addWidget(self.groupBox_3)\n        self.groupBox = QtWidgets.QGroupBox(self.scrollAreaWidgetContents)\n        self.groupBox.setObjectName(""groupBox"")\n        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.groupBox)\n        self.verticalLayout_4.setObjectName(""verticalLayout_4"")\n        self.polymer_tab = QtWidgets.QTabWidget(self.groupBox)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.polymer_tab.setFont(font)\n        self.polymer_tab.setUsesScrollButtons(True)\n        self.polymer_tab.setTabsClosable(True)\n        self.polymer_tab.setObjectName(""polymer_tab"")\n        self.verticalLayout_4.addWidget(self.polymer_tab)\n        self.verticalLayout_6.addWidget(self.groupBox)\n        self.scrollArea.setWidget(self.scrollAreaWidgetContents)\n        self.verticalLayout_8.addWidget(self.scrollArea)\n        self.tabWidget.addTab(self.Chemistry, """")\n        self.Memory = QtWidgets.QWidget()\n        self.Memory.setObjectName(""Memory"")\n        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.Memory)\n        self.verticalLayout_5.setObjectName(""verticalLayout_5"")\n        self.formLayout_2 = QtWidgets.QFormLayout()\n        self.formLayout_2.setFieldGrowthPolicy(QtWidgets.QFormLayout.FieldsStayAtSizeHint)\n        self.formLayout_2.setObjectName(""formLayout_2"")\n        self.label_6 = QtWidgets.QLabel(self.Memory)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.label_6.setFont(font)\n        self.label_6.setWordWrap(False)\n        self.label_6.setObjectName(""label_6"")\n        self.formLayout_2.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_6)\n        self.n_polymers = QtWidgets.QLineEdit(self.Memory)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.n_polymers.setFont(font)\n        self.n_polymers.setInputMethodHints(QtCore.Qt.ImhDigitsOnly)\n        self.n_polymers.setObjectName(""n_polymers"")\n        self.formLayout_2.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.n_polymers)\n        self.label_7 = QtWidgets.QLabel(self.Memory)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.label_7.setFont(font)\n        self.label_7.setWordWrap(False)\n        self.label_7.setObjectName(""label_7"")\n        self.formLayout_2.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label_7)\n        self.n_segments = QtWidgets.QLineEdit(self.Memory)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.n_segments.setFont(font)\n        self.n_segments.setInputMethodHints(QtCore.Qt.ImhDigitsOnly)\n        self.n_segments.setObjectName(""n_segments"")\n        self.formLayout_2.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.n_segments)\n        self.verticalLayout_5.addLayout(self.formLayout_2)\n        self.tabWidget.addTab(self.Memory, """")\n        self.Result = QtWidgets.QWidget()\n        self.Result.setObjectName(""Result"")\n        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.Result)\n        self.verticalLayout_12.setObjectName(""verticalLayout_12"")\n        self.splitter = QtWidgets.QSplitter(self.Result)\n        self.splitter.setOrientation(QtCore.Qt.Vertical)\n        self.splitter.setObjectName(""splitter"")\n        self.text_box = QtWidgets.QTextBrowser(self.splitter)\n        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)\n        sizePolicy.setHorizontalStretch(0)\n        sizePolicy.setVerticalStretch(3)\n        sizePolicy.setHeightForWidth(self.text_box.sizePolicy().hasHeightForWidth())\n        self.text_box.setSizePolicy(sizePolicy)\n        self.text_box.setAcceptRichText(False)\n        self.text_box.setObjectName(""text_box"")\n        self.proto_widget = QtWidgets.QWidget(self.splitter)\n        self.proto_widget.setEnabled(True)\n        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)\n        sizePolicy.setHorizontalStretch(0)\n        sizePolicy.setVerticalStretch(2)\n        sizePolicy.setHeightForWidth(self.proto_widget.sizePolicy().hasHeightForWidth())\n        self.proto_widget.setSizePolicy(sizePolicy)\n        self.proto_widget.setObjectName(""proto_widget"")\n        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.proto_widget)\n        self.verticalLayout_11.setContentsMargins(0, 0, 0, 0)\n        self.verticalLayout_11.setObjectName(""verticalLayout_11"")\n        self.verticalLayout_10 = QtWidgets.QVBoxLayout()\n        self.verticalLayout_10.setObjectName(""verticalLayout_10"")\n        self.proto_label = QtWidgets.QLabel(self.proto_widget)\n        self.proto_label.setEnabled(False)\n        self.proto_label.setObjectName(""proto_label"")\n        self.verticalLayout_10.addWidget(self.proto_label)\n        self.proto_text = QtWidgets.QTextBrowser(self.proto_widget)\n        self.proto_text.setEnabled(False)\n        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)\n        sizePolicy.setHorizontalStretch(0)\n        sizePolicy.setVerticalStretch(2)\n        sizePolicy.setHeightForWidth(self.proto_text.sizePolicy().hasHeightForWidth())\n        self.proto_text.setSizePolicy(sizePolicy)\n        self.proto_text.setReadOnly(False)\n        self.proto_text.setAcceptRichText(False)\n        self.proto_text.setObjectName(""proto_text"")\n        self.verticalLayout_10.addWidget(self.proto_text)\n        self.verticalLayout_11.addLayout(self.verticalLayout_10)\n        self.verticalLayout_12.addWidget(self.splitter)\n        self.tabWidget.addTab(self.Result, """")\n        self.verticalLayout_13.addWidget(self.tabWidget)\n        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()\n        self.horizontalLayout_3.setObjectName(""horizontalLayout_3"")\n        self.pb_help = QtWidgets.QPushButton(self.inp_param_widget)\n        self.pb_help.setObjectName(""pb_help"")\n        self.horizontalLayout_3.addWidget(self.pb_help)\n        self.pb_apply = QtWidgets.QPushButton(self.inp_param_widget)\n        self.pb_apply.setObjectName(""pb_apply"")\n        self.horizontalLayout_3.addWidget(self.pb_apply)\n        self.pb_ok = QtWidgets.QPushButton(self.inp_param_widget)\n        self.pb_ok.setObjectName(""pb_ok"")\n        self.horizontalLayout_3.addWidget(self.pb_ok)\n        self.pb_cancel = QtWidgets.QPushButton(self.inp_param_widget)\n        self.pb_cancel.setObjectName(""pb_cancel"")\n        self.horizontalLayout_3.addWidget(self.pb_cancel)\n        self.verticalLayout_13.addLayout(self.horizontalLayout_3)\n        self.verticalLayout.addWidget(self.inp_param_widget)\n\n        self.retranslateUi(Dialog)\n        self.tabWidget.setCurrentIndex(0)\n        self.polymer_tab.setCurrentIndex(-1)\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\n\n    def retranslateUi(self, Dialog):\n        _translate = QtCore.QCoreApplication.translate\n        Dialog.setWindowTitle(_translate(""Dialog"", ""Create Polymer Configuration""))\n        self.label_8.setText(_translate(""Dialog"", ""Pick Output Polyconf File""))\n        self.pb_pick_file.setToolTip(_translate(""Dialog"", ""Select File...""))\n        self.pb_pick_file.setText(_translate(""Dialog"", ""...""))\n        self.label_9.setText(_translate(""Dialog"", ""Selected file:""))\n        self.groupBox_2.setTitle(_translate(""Dialog"", ""Polymer""))\n        self.label.setToolTip(_translate(""Dialog"", ""Mass of a monomer""))\n        self.label.setText(_translate(""Dialog"", ""M0 (g/mol)""))\n        self.m0.setToolTip(_translate(""Dialog"", ""Mass of a monomer""))\n        self.m0.setText(_translate(""Dialog"", ""28""))\n        self.label_4.setToolTip(_translate(""Dialog"", ""Number of monomers in an entanglement length""))\n        self.label_4.setText(_translate(""Dialog"", ""Ne""))\n        self.ne.setToolTip(_translate(""Dialog"", ""Number of monomers in an entanglement length""))\n        self.ne.setText(_translate(""Dialog"", ""40""))\n        self.groupBox_3.setTitle(_translate(""Dialog"", ""Add Component""))\n        self.label_2.setToolTip(_translate(""Dialog"", ""Ratio weight fraction occupied by component""))\n        self.label_2.setText(_translate(""Dialog"", ""Ratio""))\n        self.ratio.setToolTip(_translate(""Dialog"", ""Ratio weight fraction occupied by component""))\n        self.ratio.setText(_translate(""Dialog"", ""1""))\n        self.label_3.setToolTip(_translate(""Dialog"", ""Polymer architecture type""))\n        self.label_3.setText(_translate(""Dialog"", ""Architecture""))\n        self.cb_type.setToolTip(_translate(""Dialog"", ""Polymer architecture type""))\n        self.label_5.setToolTip(_translate(""Dialog"", ""Number of polymers in current type""))\n        self.label_5.setText(_translate(""Dialog"", ""Num. of polymers""))\n        self.number.setToolTip(_translate(""Dialog"", ""Number of polymers in current type""))\n        self.number.setText(_translate(""Dialog"", ""1000""))\n        self.ngeneration_label.setToolTip(_translate(""Dialog"", ""Number of generations (Cayley type only)""))\n        self.ngeneration_label.setText(_translate(""Dialog"", ""Num. generations""))\n        self.sb_ngeneration.setToolTip(_translate(""Dialog"", ""Number of generations (Cayley type only)""))\n        self.add_button.setToolTip(_translate(""Dialog"", ""Add component to mix""))\n        self.add_button.setText(_translate(""Dialog"", ""Add""))\n        self.groupBox.setTitle(_translate(""Dialog"", ""Components""))\n        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Chemistry), _translate(""Dialog"", ""Chemistry""))\n        self.label_6.setToolTip(_translate(""Dialog"", ""Maximum number of polymer""))\n        self.label_6.setText(_translate(""Dialog"", ""Max. num. of polymers""))\n        self.n_polymers.setToolTip(_translate(""Dialog"", ""Maximum number of polymer""))\n        self.n_polymers.setText(_translate(""Dialog"", ""1e4""))\n        self.label_7.setText(_translate(""Dialog"", ""Max. num. of segments""))\n        self.n_segments.setToolTip(_translate(""Dialog"", ""Maximum total number of arms""))\n        self.n_segments.setText(_translate(""Dialog"", ""1e5""))\n        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Memory), _translate(""Dialog"", ""Memory""))\n        self.proto_label.setText(_translate(""Dialog"", ""Enter Polymer Prototype:""))\n        self.proto_text.setHtml(_translate(""Dialog"", ""<!DOCTYPE HTML PUBLIC \\""-//W3C//DTD HTML 4.0//EN\\"" \\""http://www.w3.org/TR/REC-html40/strict.dtd\\"">\\n""\n""<html><head><meta name=\\""qrichtext\\"" content=\\""1\\"" /><style type=\\""text/css\\"">\\n""\n""p, li { white-space: pre-wrap; }\\n""\n""</style></head><body style=\\"" font-family:\\\'.SF NS Text\\\'; font-size:13pt; font-weight:400; font-style:normal;\\"">\\n""\n""<p style=\\""-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\\""><br /></p></body></html>""))\n        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Result), _translate(""Dialog"", ""Result""))\n        self.pb_help.setText(_translate(""Dialog"", ""Help""))\n        self.pb_apply.setText(_translate(""Dialog"", ""Apply""))\n        self.pb_ok.setText(_translate(""Dialog"", ""OK""))\n        self.pb_cancel.setText(_translate(""Dialog"", ""Cancel""))\n\n'"
RepTate/gui/errorcalculationoptions.py,0,"b'# -*- coding: utf-8 -*-\n\n# Form implementation generated from reading ui file \'errorcalculationoptions.ui\'\n#\n# Created by: PyQt5 UI code generator 5.14.0\n#\n# WARNING! All changes made in this file will be lost!\n\n\nfrom PyQt5 import QtCore, QtGui, QtWidgets\n\n\nclass Ui_Dialog(object):\n    def setupUi(self, Dialog):\n        Dialog.setObjectName(""Dialog"")\n        Dialog.resize(275, 213)\n        icon = QtGui.QIcon()\n        icon.addPixmap(QtGui.QPixmap("":/Images/Images/new_icons/icons8-abacus.png""), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n        Dialog.setWindowIcon(icon)\n        Dialog.setLayoutDirection(QtCore.Qt.RightToLeft)\n        self.verticalLayout = QtWidgets.QVBoxLayout(Dialog)\n        self.verticalLayout.setObjectName(""verticalLayout"")\n        self.groupBox_3 = QtWidgets.QGroupBox(Dialog)\n        self.groupBox_3.setObjectName(""groupBox_3"")\n        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.groupBox_3)\n        self.verticalLayout_2.setObjectName(""verticalLayout_2"")\n        self.View1radioButton = QtWidgets.QRadioButton(self.groupBox_3)\n        self.View1radioButton.setObjectName(""View1radioButton"")\n        self.verticalLayout_2.addWidget(self.View1radioButton)\n        self.AllViewsradioButton = QtWidgets.QRadioButton(self.groupBox_3)\n        self.AllViewsradioButton.setCheckable(False)\n        self.AllViewsradioButton.setObjectName(""AllViewsradioButton"")\n        self.verticalLayout_2.addWidget(self.AllViewsradioButton)\n        self.RawDataradioButton = QtWidgets.QRadioButton(self.groupBox_3)\n        self.RawDataradioButton.setCheckable(False)\n        self.RawDataradioButton.setObjectName(""RawDataradioButton"")\n        self.verticalLayout_2.addWidget(self.RawDataradioButton)\n        self.verticalLayout.addWidget(self.groupBox_3)\n        self.NormalizecheckBox = QtWidgets.QCheckBox(Dialog)\n        self.NormalizecheckBox.setObjectName(""NormalizecheckBox"")\n        self.verticalLayout.addWidget(self.NormalizecheckBox)\n        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()\n        self.horizontalLayout_5.setObjectName(""horizontalLayout_5"")\n        self.pushCancel = QtWidgets.QPushButton(Dialog)\n        self.pushCancel.setObjectName(""pushCancel"")\n        self.horizontalLayout_5.addWidget(self.pushCancel)\n        self.pushOK = QtWidgets.QPushButton(Dialog)\n        self.pushOK.setObjectName(""pushOK"")\n        self.horizontalLayout_5.addWidget(self.pushOK)\n        self.verticalLayout.addLayout(self.horizontalLayout_5)\n\n        self.retranslateUi(Dialog)\n        self.pushOK.clicked.connect(Dialog.accept)\n        self.pushCancel.clicked.connect(Dialog.reject)\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\n\n    def retranslateUi(self, Dialog):\n        _translate = QtCore.QCoreApplication.translate\n        Dialog.setWindowTitle(_translate(""Dialog"", ""Error Calculation Options""))\n        self.groupBox_3.setTitle(_translate(""Dialog"", ""Calculate error with respect to""))\n        self.View1radioButton.setText(_translate(""Dialog"", ""View number 1""))\n        self.AllViewsradioButton.setText(_translate(""Dialog"", ""All active views""))\n        self.RawDataradioButton.setText(_translate(""Dialog"", ""Raw data table""))\n        self.NormalizecheckBox.setText(_translate(""Dialog"", ""Normalize by experimental data""))\n        self.pushCancel.setText(_translate(""Dialog"", ""Cancel""))\n        self.pushOK.setText(_translate(""Dialog"", ""OK""))\nimport Reptate_rc\n'"
RepTate/gui/fittingoptions.py,6,"b'# -*- coding: utf-8 -*-\n\n# Form implementation generated from reading ui file \'RepTate/gui/fittingoptions.ui\'\n#\n# Created by: PyQt5 UI code generator 5.14.2\n#\n# WARNING! All changes made in this file will be lost!\n\n\nfrom PyQt5 import QtCore, QtGui, QtWidgets\n\n\nclass Ui_Dialog(object):\n    def setupUi(self, Dialog):\n        Dialog.setObjectName(""Dialog"")\n        Dialog.resize(419, 780)\n        icon = QtGui.QIcon()\n        icon.addPixmap(QtGui.QPixmap("":/Images/Images/new_icons/icons8-minimum-value.png""), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n        Dialog.setWindowIcon(icon)\n        Dialog.setLayoutDirection(QtCore.Qt.RightToLeft)\n        self.verticalLayout = QtWidgets.QVBoxLayout(Dialog)\n        self.verticalLayout.setObjectName(""verticalLayout"")\n        self.tabWidget = QtWidgets.QTabWidget(Dialog)\n        self.tabWidget.setEnabled(True)\n        self.tabWidget.setLayoutDirection(QtCore.Qt.LeftToRight)\n        self.tabWidget.setStyleSheet("""")\n        self.tabWidget.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedStates))\n        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.North)\n        self.tabWidget.setTabShape(QtWidgets.QTabWidget.Triangular)\n        self.tabWidget.setUsesScrollButtons(True)\n        self.tabWidget.setDocumentMode(False)\n        self.tabWidget.setTabsClosable(False)\n        self.tabWidget.setTabBarAutoHide(False)\n        self.tabWidget.setObjectName(""tabWidget"")\n        self.ls = QtWidgets.QWidget()\n        self.ls.setObjectName(""ls"")\n        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.ls)\n        self.verticalLayout_6.setObjectName(""verticalLayout_6"")\n        self.groupBox = QtWidgets.QGroupBox(self.ls)\n        self.groupBox.setObjectName(""groupBox"")\n        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.groupBox)\n        self.verticalLayout_2.setContentsMargins(-1, 2, -1, 2)\n        self.verticalLayout_2.setSpacing(3)\n        self.verticalLayout_2.setObjectName(""verticalLayout_2"")\n        self.label_4 = QtWidgets.QLabel(self.groupBox)\n        self.label_4.setScaledContents(False)\n        self.label_4.setWordWrap(True)\n        self.label_4.setObjectName(""label_4"")\n        self.verticalLayout_2.addWidget(self.label_4)\n        self.label_5 = QtWidgets.QLabel(self.groupBox)\n        font = QtGui.QFont()\n        font.setBold(True)\n        font.setWeight(75)\n        self.label_5.setFont(font)\n        self.label_5.setObjectName(""label_5"")\n        self.verticalLayout_2.addWidget(self.label_5)\n        self.frame_50 = QtWidgets.QFrame(self.groupBox)\n        self.frame_50.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_50.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_50.setObjectName(""frame_50"")\n        self.horizontalLayout_49 = QtWidgets.QHBoxLayout(self.frame_50)\n        self.horizontalLayout_49.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_49.setObjectName(""horizontalLayout_49"")\n        self.label_3 = QtWidgets.QLabel(self.frame_50)\n        self.label_3.setObjectName(""label_3"")\n        self.horizontalLayout_49.addWidget(self.label_3)\n        self.LSmethodcomboBox = QtWidgets.QComboBox(self.frame_50)\n        self.LSmethodcomboBox.setObjectName(""LSmethodcomboBox"")\n        self.LSmethodcomboBox.addItem("""")\n        self.LSmethodcomboBox.addItem("""")\n        self.LSmethodcomboBox.addItem("""")\n        self.horizontalLayout_49.addWidget(self.LSmethodcomboBox)\n        self.verticalLayout_2.addWidget(self.frame_50)\n        self.frame_29 = QtWidgets.QFrame(self.groupBox)\n        self.frame_29.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_29.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_29.setObjectName(""frame_29"")\n        self.horizontalLayout_30 = QtWidgets.QHBoxLayout(self.frame_29)\n        self.horizontalLayout_30.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_30.setObjectName(""horizontalLayout_30"")\n        self.label_16 = QtWidgets.QLabel(self.frame_29)\n        self.label_16.setObjectName(""label_16"")\n        self.horizontalLayout_30.addWidget(self.label_16)\n        self.LSjaccomboBox = QtWidgets.QComboBox(self.frame_29)\n        self.LSjaccomboBox.setObjectName(""LSjaccomboBox"")\n        self.LSjaccomboBox.addItem("""")\n        self.LSjaccomboBox.addItem("""")\n        self.LSjaccomboBox.addItem("""")\n        self.horizontalLayout_30.addWidget(self.LSjaccomboBox)\n        self.verticalLayout_2.addWidget(self.frame_29)\n        self.frame = QtWidgets.QFrame(self.groupBox)\n        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame.setObjectName(""frame"")\n        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame)\n        self.horizontalLayout_2.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_2.setObjectName(""horizontalLayout_2"")\n        self.LSftolcheckBox = QtWidgets.QCheckBox(self.frame)\n        self.LSftolcheckBox.setChecked(True)\n        self.LSftolcheckBox.setObjectName(""LSftolcheckBox"")\n        self.horizontalLayout_2.addWidget(self.LSftolcheckBox)\n        self.LSftollineEdit = QtWidgets.QLineEdit(self.frame)\n        self.LSftollineEdit.setObjectName(""LSftollineEdit"")\n        self.horizontalLayout_2.addWidget(self.LSftollineEdit)\n        self.verticalLayout_2.addWidget(self.frame)\n        self.frame_2 = QtWidgets.QFrame(self.groupBox)\n        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_2.setObjectName(""frame_2"")\n        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_2)\n        self.horizontalLayout_3.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_3.setObjectName(""horizontalLayout_3"")\n        self.LSxtolcheckBox = QtWidgets.QCheckBox(self.frame_2)\n        self.LSxtolcheckBox.setChecked(True)\n        self.LSxtolcheckBox.setObjectName(""LSxtolcheckBox"")\n        self.horizontalLayout_3.addWidget(self.LSxtolcheckBox)\n        self.LSxtollineEdit = QtWidgets.QLineEdit(self.frame_2)\n        self.LSxtollineEdit.setObjectName(""LSxtollineEdit"")\n        self.horizontalLayout_3.addWidget(self.LSxtollineEdit)\n        self.verticalLayout_2.addWidget(self.frame_2)\n        self.frame_45 = QtWidgets.QFrame(self.groupBox)\n        self.frame_45.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_45.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_45.setObjectName(""frame_45"")\n        self.horizontalLayout_46 = QtWidgets.QHBoxLayout(self.frame_45)\n        self.horizontalLayout_46.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_46.setObjectName(""horizontalLayout_46"")\n        self.LSgtolcheckBox = QtWidgets.QCheckBox(self.frame_45)\n        self.LSgtolcheckBox.setChecked(True)\n        self.LSgtolcheckBox.setObjectName(""LSgtolcheckBox"")\n        self.horizontalLayout_46.addWidget(self.LSgtolcheckBox)\n        self.LSgtollineEdit = QtWidgets.QLineEdit(self.frame_45)\n        self.LSgtollineEdit.setObjectName(""LSgtollineEdit"")\n        self.horizontalLayout_46.addWidget(self.LSgtollineEdit)\n        self.verticalLayout_2.addWidget(self.frame_45)\n        self.frame_46 = QtWidgets.QFrame(self.groupBox)\n        self.frame_46.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_46.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_46.setObjectName(""frame_46"")\n        self.horizontalLayout_47 = QtWidgets.QHBoxLayout(self.frame_46)\n        self.horizontalLayout_47.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_47.setObjectName(""horizontalLayout_47"")\n        self.label = QtWidgets.QLabel(self.frame_46)\n        self.label.setObjectName(""label"")\n        self.horizontalLayout_47.addWidget(self.label)\n        self.LSlosscomboBox = QtWidgets.QComboBox(self.frame_46)\n        self.LSlosscomboBox.setObjectName(""LSlosscomboBox"")\n        self.LSlosscomboBox.addItem("""")\n        self.LSlosscomboBox.addItem("""")\n        self.LSlosscomboBox.addItem("""")\n        self.LSlosscomboBox.addItem("""")\n        self.LSlosscomboBox.addItem("""")\n        self.horizontalLayout_47.addWidget(self.LSlosscomboBox)\n        self.verticalLayout_2.addWidget(self.frame_46)\n        self.frame_47 = QtWidgets.QFrame(self.groupBox)\n        self.frame_47.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_47.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_47.setObjectName(""frame_47"")\n        self.horizontalLayout_48 = QtWidgets.QHBoxLayout(self.frame_47)\n        self.horizontalLayout_48.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_48.setObjectName(""horizontalLayout_48"")\n        self.label_2 = QtWidgets.QLabel(self.frame_47)\n        self.label_2.setObjectName(""label_2"")\n        self.horizontalLayout_48.addWidget(self.label_2)\n        self.LSf_scalelineEdit = QtWidgets.QLineEdit(self.frame_47)\n        self.LSf_scalelineEdit.setObjectName(""LSf_scalelineEdit"")\n        self.horizontalLayout_48.addWidget(self.LSf_scalelineEdit)\n        self.verticalLayout_2.addWidget(self.frame_47)\n        self.frame_3 = QtWidgets.QFrame(self.groupBox)\n        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_3.setObjectName(""frame_3"")\n        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame_3)\n        self.horizontalLayout.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout.setObjectName(""horizontalLayout"")\n        self.LSmax_nfevcheckBox = QtWidgets.QCheckBox(self.frame_3)\n        self.LSmax_nfevcheckBox.setObjectName(""LSmax_nfevcheckBox"")\n        self.horizontalLayout.addWidget(self.LSmax_nfevcheckBox)\n        self.LSmax_nfevlineEdit = QtWidgets.QLineEdit(self.frame_3)\n        self.LSmax_nfevlineEdit.setEnabled(False)\n        self.LSmax_nfevlineEdit.setObjectName(""LSmax_nfevlineEdit"")\n        self.horizontalLayout.addWidget(self.LSmax_nfevlineEdit)\n        self.verticalLayout_2.addWidget(self.frame_3)\n        self.frame_48 = QtWidgets.QFrame(self.groupBox)\n        self.frame_48.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_48.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_48.setObjectName(""frame_48"")\n        self.horizontalLayout_50 = QtWidgets.QHBoxLayout(self.frame_48)\n        self.horizontalLayout_50.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_50.setObjectName(""horizontalLayout_50"")\n        self.LStr_solvercheckBox = QtWidgets.QCheckBox(self.frame_48)\n        self.LStr_solvercheckBox.setObjectName(""LStr_solvercheckBox"")\n        self.horizontalLayout_50.addWidget(self.LStr_solvercheckBox)\n        self.LStr_solvercomboBox = QtWidgets.QComboBox(self.frame_48)\n        self.LStr_solvercomboBox.setEnabled(False)\n        self.LStr_solvercomboBox.setObjectName(""LStr_solvercomboBox"")\n        self.LStr_solvercomboBox.addItem("""")\n        self.LStr_solvercomboBox.addItem("""")\n        self.horizontalLayout_50.addWidget(self.LStr_solvercomboBox)\n        self.verticalLayout_2.addWidget(self.frame_48)\n        self.verticalLayout_6.addWidget(self.groupBox)\n        self.tabWidget.addTab(self.ls, """")\n        self.basinhopping = QtWidgets.QWidget()\n        self.basinhopping.setObjectName(""basinhopping"")\n        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.basinhopping)\n        self.verticalLayout_10.setObjectName(""verticalLayout_10"")\n        self.groupBox_8 = QtWidgets.QGroupBox(self.basinhopping)\n        self.groupBox_8.setObjectName(""groupBox_8"")\n        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.groupBox_8)\n        self.verticalLayout_7.setObjectName(""verticalLayout_7"")\n        self.label_6 = QtWidgets.QLabel(self.groupBox_8)\n        self.label_6.setWordWrap(True)\n        self.label_6.setObjectName(""label_6"")\n        self.verticalLayout_7.addWidget(self.label_6)\n        self.label_7 = QtWidgets.QLabel(self.groupBox_8)\n        font = QtGui.QFont()\n        font.setBold(True)\n        font.setWeight(75)\n        self.label_7.setFont(font)\n        self.label_7.setObjectName(""label_7"")\n        self.verticalLayout_7.addWidget(self.label_7)\n        self.frame_5 = QtWidgets.QFrame(self.groupBox_8)\n        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_5.setObjectName(""frame_5"")\n        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.frame_5)\n        self.horizontalLayout_4.setObjectName(""horizontalLayout_4"")\n        self.label_17 = QtWidgets.QLabel(self.frame_5)\n        self.label_17.setObjectName(""label_17"")\n        self.horizontalLayout_4.addWidget(self.label_17)\n        self.basinniterlineEdit = QtWidgets.QLineEdit(self.frame_5)\n        self.basinniterlineEdit.setObjectName(""basinniterlineEdit"")\n        self.horizontalLayout_4.addWidget(self.basinniterlineEdit)\n        self.verticalLayout_7.addWidget(self.frame_5)\n        self.frame_4 = QtWidgets.QFrame(self.groupBox_8)\n        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_4.setObjectName(""frame_4"")\n        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.frame_4)\n        self.horizontalLayout_6.setObjectName(""horizontalLayout_6"")\n        self.label_18 = QtWidgets.QLabel(self.frame_4)\n        self.label_18.setObjectName(""label_18"")\n        self.horizontalLayout_6.addWidget(self.label_18)\n        self.basinTlineEdit = QtWidgets.QLineEdit(self.frame_4)\n        self.basinTlineEdit.setObjectName(""basinTlineEdit"")\n        self.horizontalLayout_6.addWidget(self.basinTlineEdit)\n        self.verticalLayout_7.addWidget(self.frame_4)\n        self.frame_6 = QtWidgets.QFrame(self.groupBox_8)\n        self.frame_6.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_6.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_6.setObjectName(""frame_6"")\n        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.frame_6)\n        self.horizontalLayout_7.setObjectName(""horizontalLayout_7"")\n        self.label_19 = QtWidgets.QLabel(self.frame_6)\n        self.label_19.setObjectName(""label_19"")\n        self.horizontalLayout_7.addWidget(self.label_19)\n        self.basinstepsizelineEdit = QtWidgets.QLineEdit(self.frame_6)\n        self.basinstepsizelineEdit.setObjectName(""basinstepsizelineEdit"")\n        self.horizontalLayout_7.addWidget(self.basinstepsizelineEdit)\n        self.verticalLayout_7.addWidget(self.frame_6)\n        self.frame_7 = QtWidgets.QFrame(self.groupBox_8)\n        self.frame_7.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_7.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_7.setObjectName(""frame_7"")\n        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.frame_7)\n        self.horizontalLayout_8.setObjectName(""horizontalLayout_8"")\n        self.label_20 = QtWidgets.QLabel(self.frame_7)\n        self.label_20.setObjectName(""label_20"")\n        self.horizontalLayout_8.addWidget(self.label_20)\n        self.basinintervallineEdit = QtWidgets.QLineEdit(self.frame_7)\n        self.basinintervallineEdit.setObjectName(""basinintervallineEdit"")\n        self.horizontalLayout_8.addWidget(self.basinintervallineEdit)\n        self.verticalLayout_7.addWidget(self.frame_7)\n        self.frame_8 = QtWidgets.QFrame(self.groupBox_8)\n        self.frame_8.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_8.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_8.setObjectName(""frame_8"")\n        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.frame_8)\n        self.horizontalLayout_9.setObjectName(""horizontalLayout_9"")\n        self.basinniter_successcheckBox = QtWidgets.QCheckBox(self.frame_8)\n        self.basinniter_successcheckBox.setObjectName(""basinniter_successcheckBox"")\n        self.horizontalLayout_9.addWidget(self.basinniter_successcheckBox)\n        self.basinniter_successlineEdit = QtWidgets.QLineEdit(self.frame_8)\n        self.basinniter_successlineEdit.setEnabled(False)\n        self.basinniter_successlineEdit.setObjectName(""basinniter_successlineEdit"")\n        self.horizontalLayout_9.addWidget(self.basinniter_successlineEdit)\n        self.verticalLayout_7.addWidget(self.frame_8)\n        self.frame_9 = QtWidgets.QFrame(self.groupBox_8)\n        self.frame_9.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_9.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_9.setObjectName(""frame_9"")\n        self.horizontalLayout_10 = QtWidgets.QHBoxLayout(self.frame_9)\n        self.horizontalLayout_10.setObjectName(""horizontalLayout_10"")\n        self.basinseedcheckBox = QtWidgets.QCheckBox(self.frame_9)\n        self.basinseedcheckBox.setObjectName(""basinseedcheckBox"")\n        self.horizontalLayout_10.addWidget(self.basinseedcheckBox)\n        self.basinseedlineEdit = QtWidgets.QLineEdit(self.frame_9)\n        self.basinseedlineEdit.setEnabled(False)\n        self.basinseedlineEdit.setObjectName(""basinseedlineEdit"")\n        self.horizontalLayout_10.addWidget(self.basinseedlineEdit)\n        self.verticalLayout_7.addWidget(self.frame_9)\n        self.verticalLayout_10.addWidget(self.groupBox_8)\n        self.tabWidget.addTab(self.basinhopping, """")\n        self.dualannealing = QtWidgets.QWidget()\n        self.dualannealing.setObjectName(""dualannealing"")\n        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.dualannealing)\n        self.verticalLayout_9.setObjectName(""verticalLayout_9"")\n        self.groupBox_7 = QtWidgets.QGroupBox(self.dualannealing)\n        self.groupBox_7.setObjectName(""groupBox_7"")\n        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.groupBox_7)\n        self.verticalLayout_11.setContentsMargins(-1, 0, -1, 0)\n        self.verticalLayout_11.setSpacing(0)\n        self.verticalLayout_11.setObjectName(""verticalLayout_11"")\n        self.label_8 = QtWidgets.QLabel(self.groupBox_7)\n        self.label_8.setWordWrap(True)\n        self.label_8.setObjectName(""label_8"")\n        self.verticalLayout_11.addWidget(self.label_8)\n        self.label_9 = QtWidgets.QLabel(self.groupBox_7)\n        font = QtGui.QFont()\n        font.setBold(True)\n        font.setWeight(75)\n        self.label_9.setFont(font)\n        self.label_9.setObjectName(""label_9"")\n        self.verticalLayout_11.addWidget(self.label_9)\n        self.frame_17 = QtWidgets.QFrame(self.groupBox_7)\n        self.frame_17.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_17.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_17.setObjectName(""frame_17"")\n        self.horizontalLayout_11 = QtWidgets.QHBoxLayout(self.frame_17)\n        self.horizontalLayout_11.setObjectName(""horizontalLayout_11"")\n        self.label_21 = QtWidgets.QLabel(self.frame_17)\n        self.label_21.setObjectName(""label_21"")\n        self.horizontalLayout_11.addWidget(self.label_21)\n        self.annealmaxiterlineEdit = QtWidgets.QLineEdit(self.frame_17)\n        self.annealmaxiterlineEdit.setObjectName(""annealmaxiterlineEdit"")\n        self.horizontalLayout_11.addWidget(self.annealmaxiterlineEdit)\n        self.verticalLayout_11.addWidget(self.frame_17)\n        self.frame_16 = QtWidgets.QFrame(self.groupBox_7)\n        self.frame_16.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_16.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_16.setObjectName(""frame_16"")\n        self.horizontalLayout_12 = QtWidgets.QHBoxLayout(self.frame_16)\n        self.horizontalLayout_12.setObjectName(""horizontalLayout_12"")\n        self.label_22 = QtWidgets.QLabel(self.frame_16)\n        self.label_22.setObjectName(""label_22"")\n        self.horizontalLayout_12.addWidget(self.label_22)\n        self.annealinitial_templineEdit = QtWidgets.QLineEdit(self.frame_16)\n        self.annealinitial_templineEdit.setObjectName(""annealinitial_templineEdit"")\n        self.horizontalLayout_12.addWidget(self.annealinitial_templineEdit)\n        self.verticalLayout_11.addWidget(self.frame_16)\n        self.frame_15 = QtWidgets.QFrame(self.groupBox_7)\n        self.frame_15.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_15.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_15.setObjectName(""frame_15"")\n        self.horizontalLayout_13 = QtWidgets.QHBoxLayout(self.frame_15)\n        self.horizontalLayout_13.setObjectName(""horizontalLayout_13"")\n        self.label_23 = QtWidgets.QLabel(self.frame_15)\n        self.label_23.setObjectName(""label_23"")\n        self.horizontalLayout_13.addWidget(self.label_23)\n        self.annealrestart_temp_ratiolineEdit = QtWidgets.QLineEdit(self.frame_15)\n        self.annealrestart_temp_ratiolineEdit.setObjectName(""annealrestart_temp_ratiolineEdit"")\n        self.horizontalLayout_13.addWidget(self.annealrestart_temp_ratiolineEdit)\n        self.verticalLayout_11.addWidget(self.frame_15)\n        self.frame_14 = QtWidgets.QFrame(self.groupBox_7)\n        self.frame_14.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_14.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_14.setObjectName(""frame_14"")\n        self.horizontalLayout_14 = QtWidgets.QHBoxLayout(self.frame_14)\n        self.horizontalLayout_14.setObjectName(""horizontalLayout_14"")\n        self.label_24 = QtWidgets.QLabel(self.frame_14)\n        self.label_24.setObjectName(""label_24"")\n        self.horizontalLayout_14.addWidget(self.label_24)\n        self.annealvisitlineEdit = QtWidgets.QLineEdit(self.frame_14)\n        self.annealvisitlineEdit.setObjectName(""annealvisitlineEdit"")\n        self.horizontalLayout_14.addWidget(self.annealvisitlineEdit)\n        self.verticalLayout_11.addWidget(self.frame_14)\n        self.frame_13 = QtWidgets.QFrame(self.groupBox_7)\n        self.frame_13.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_13.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_13.setObjectName(""frame_13"")\n        self.horizontalLayout_15 = QtWidgets.QHBoxLayout(self.frame_13)\n        self.horizontalLayout_15.setObjectName(""horizontalLayout_15"")\n        self.label_25 = QtWidgets.QLabel(self.frame_13)\n        self.label_25.setObjectName(""label_25"")\n        self.horizontalLayout_15.addWidget(self.label_25)\n        self.annealacceptlineEdit = QtWidgets.QLineEdit(self.frame_13)\n        self.annealacceptlineEdit.setObjectName(""annealacceptlineEdit"")\n        self.horizontalLayout_15.addWidget(self.annealacceptlineEdit)\n        self.verticalLayout_11.addWidget(self.frame_13)\n        self.frame_12 = QtWidgets.QFrame(self.groupBox_7)\n        self.frame_12.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_12.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_12.setObjectName(""frame_12"")\n        self.horizontalLayout_16 = QtWidgets.QHBoxLayout(self.frame_12)\n        self.horizontalLayout_16.setObjectName(""horizontalLayout_16"")\n        self.label_26 = QtWidgets.QLabel(self.frame_12)\n        self.label_26.setObjectName(""label_26"")\n        self.horizontalLayout_16.addWidget(self.label_26)\n        self.annealmaxfunlineEdit = QtWidgets.QLineEdit(self.frame_12)\n        self.annealmaxfunlineEdit.setObjectName(""annealmaxfunlineEdit"")\n        self.horizontalLayout_16.addWidget(self.annealmaxfunlineEdit)\n        self.verticalLayout_11.addWidget(self.frame_12)\n        self.frame_11 = QtWidgets.QFrame(self.groupBox_7)\n        self.frame_11.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_11.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_11.setObjectName(""frame_11"")\n        self.horizontalLayout_17 = QtWidgets.QHBoxLayout(self.frame_11)\n        self.horizontalLayout_17.setObjectName(""horizontalLayout_17"")\n        self.annealseedcheckBox = QtWidgets.QCheckBox(self.frame_11)\n        self.annealseedcheckBox.setObjectName(""annealseedcheckBox"")\n        self.horizontalLayout_17.addWidget(self.annealseedcheckBox)\n        self.annealseedlineEdit = QtWidgets.QLineEdit(self.frame_11)\n        self.annealseedlineEdit.setEnabled(False)\n        self.annealseedlineEdit.setObjectName(""annealseedlineEdit"")\n        self.horizontalLayout_17.addWidget(self.annealseedlineEdit)\n        self.verticalLayout_11.addWidget(self.frame_11)\n        self.frame_10 = QtWidgets.QFrame(self.groupBox_7)\n        self.frame_10.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_10.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_10.setObjectName(""frame_10"")\n        self.horizontalLayout_18 = QtWidgets.QHBoxLayout(self.frame_10)\n        self.horizontalLayout_18.setObjectName(""horizontalLayout_18"")\n        self.annealno_local_searchcheckBox = QtWidgets.QCheckBox(self.frame_10)\n        self.annealno_local_searchcheckBox.setObjectName(""annealno_local_searchcheckBox"")\n        self.horizontalLayout_18.addWidget(self.annealno_local_searchcheckBox)\n        self.verticalLayout_11.addWidget(self.frame_10)\n        self.verticalLayout_9.addWidget(self.groupBox_7)\n        self.tabWidget.addTab(self.dualannealing, """")\n        self.differentialevolution = QtWidgets.QWidget()\n        self.differentialevolution.setObjectName(""differentialevolution"")\n        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.differentialevolution)\n        self.verticalLayout_12.setObjectName(""verticalLayout_12"")\n        self.groupBox_9 = QtWidgets.QGroupBox(self.differentialevolution)\n        self.groupBox_9.setObjectName(""groupBox_9"")\n        self.verticalLayout_14 = QtWidgets.QVBoxLayout(self.groupBox_9)\n        self.verticalLayout_14.setContentsMargins(-1, 0, -1, 0)\n        self.verticalLayout_14.setSpacing(0)\n        self.verticalLayout_14.setObjectName(""verticalLayout_14"")\n        self.label_10 = QtWidgets.QLabel(self.groupBox_9)\n        self.label_10.setWordWrap(True)\n        self.label_10.setObjectName(""label_10"")\n        self.verticalLayout_14.addWidget(self.label_10)\n        self.label_11 = QtWidgets.QLabel(self.groupBox_9)\n        font = QtGui.QFont()\n        font.setBold(True)\n        font.setWeight(75)\n        self.label_11.setFont(font)\n        self.label_11.setObjectName(""label_11"")\n        self.verticalLayout_14.addWidget(self.label_11)\n        self.frame_18 = QtWidgets.QFrame(self.groupBox_9)\n        self.frame_18.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_18.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_18.setObjectName(""frame_18"")\n        self.horizontalLayout_19 = QtWidgets.QHBoxLayout(self.frame_18)\n        self.horizontalLayout_19.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_19.setSpacing(6)\n        self.horizontalLayout_19.setObjectName(""horizontalLayout_19"")\n        self.label_27 = QtWidgets.QLabel(self.frame_18)\n        self.label_27.setObjectName(""label_27"")\n        self.horizontalLayout_19.addWidget(self.label_27)\n        self.diffevolstrategycomboBox = QtWidgets.QComboBox(self.frame_18)\n        self.diffevolstrategycomboBox.setObjectName(""diffevolstrategycomboBox"")\n        self.diffevolstrategycomboBox.addItem("""")\n        self.diffevolstrategycomboBox.addItem("""")\n        self.diffevolstrategycomboBox.addItem("""")\n        self.diffevolstrategycomboBox.addItem("""")\n        self.diffevolstrategycomboBox.addItem("""")\n        self.diffevolstrategycomboBox.addItem("""")\n        self.diffevolstrategycomboBox.addItem("""")\n        self.diffevolstrategycomboBox.addItem("""")\n        self.diffevolstrategycomboBox.addItem("""")\n        self.diffevolstrategycomboBox.addItem("""")\n        self.diffevolstrategycomboBox.addItem("""")\n        self.diffevolstrategycomboBox.addItem("""")\n        self.horizontalLayout_19.addWidget(self.diffevolstrategycomboBox)\n        self.verticalLayout_14.addWidget(self.frame_18)\n        self.frame_19 = QtWidgets.QFrame(self.groupBox_9)\n        self.frame_19.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_19.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_19.setObjectName(""frame_19"")\n        self.horizontalLayout_20 = QtWidgets.QHBoxLayout(self.frame_19)\n        self.horizontalLayout_20.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_20.setObjectName(""horizontalLayout_20"")\n        self.label_28 = QtWidgets.QLabel(self.frame_19)\n        self.label_28.setObjectName(""label_28"")\n        self.horizontalLayout_20.addWidget(self.label_28)\n        self.diffevolmaxiterlineEdit = QtWidgets.QLineEdit(self.frame_19)\n        self.diffevolmaxiterlineEdit.setObjectName(""diffevolmaxiterlineEdit"")\n        self.horizontalLayout_20.addWidget(self.diffevolmaxiterlineEdit)\n        self.verticalLayout_14.addWidget(self.frame_19)\n        self.frame_20 = QtWidgets.QFrame(self.groupBox_9)\n        self.frame_20.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_20.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_20.setObjectName(""frame_20"")\n        self.horizontalLayout_21 = QtWidgets.QHBoxLayout(self.frame_20)\n        self.horizontalLayout_21.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_21.setObjectName(""horizontalLayout_21"")\n        self.label_29 = QtWidgets.QLabel(self.frame_20)\n        self.label_29.setObjectName(""label_29"")\n        self.horizontalLayout_21.addWidget(self.label_29)\n        self.diffevolpopsizelineEdit = QtWidgets.QLineEdit(self.frame_20)\n        self.diffevolpopsizelineEdit.setObjectName(""diffevolpopsizelineEdit"")\n        self.horizontalLayout_21.addWidget(self.diffevolpopsizelineEdit)\n        self.verticalLayout_14.addWidget(self.frame_20)\n        self.frame_21 = QtWidgets.QFrame(self.groupBox_9)\n        self.frame_21.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_21.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_21.setObjectName(""frame_21"")\n        self.horizontalLayout_22 = QtWidgets.QHBoxLayout(self.frame_21)\n        self.horizontalLayout_22.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_22.setObjectName(""horizontalLayout_22"")\n        self.label_30 = QtWidgets.QLabel(self.frame_21)\n        self.label_30.setObjectName(""label_30"")\n        self.horizontalLayout_22.addWidget(self.label_30)\n        self.diffevoltollineEdit = QtWidgets.QLineEdit(self.frame_21)\n        self.diffevoltollineEdit.setObjectName(""diffevoltollineEdit"")\n        self.horizontalLayout_22.addWidget(self.diffevoltollineEdit)\n        self.verticalLayout_14.addWidget(self.frame_21)\n        self.frame_22 = QtWidgets.QFrame(self.groupBox_9)\n        self.frame_22.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_22.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_22.setObjectName(""frame_22"")\n        self.horizontalLayout_23 = QtWidgets.QHBoxLayout(self.frame_22)\n        self.horizontalLayout_23.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_23.setObjectName(""horizontalLayout_23"")\n        self.label_31 = QtWidgets.QLabel(self.frame_22)\n        self.label_31.setObjectName(""label_31"")\n        self.horizontalLayout_23.addWidget(self.label_31)\n        self.diffevolmutationAlineEdit = QtWidgets.QLineEdit(self.frame_22)\n        self.diffevolmutationAlineEdit.setObjectName(""diffevolmutationAlineEdit"")\n        self.horizontalLayout_23.addWidget(self.diffevolmutationAlineEdit)\n        self.diffevolmutationBlineEdit = QtWidgets.QLineEdit(self.frame_22)\n        self.diffevolmutationBlineEdit.setObjectName(""diffevolmutationBlineEdit"")\n        self.horizontalLayout_23.addWidget(self.diffevolmutationBlineEdit)\n        self.verticalLayout_14.addWidget(self.frame_22)\n        self.frame_23 = QtWidgets.QFrame(self.groupBox_9)\n        self.frame_23.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_23.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_23.setObjectName(""frame_23"")\n        self.horizontalLayout_24 = QtWidgets.QHBoxLayout(self.frame_23)\n        self.horizontalLayout_24.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_24.setObjectName(""horizontalLayout_24"")\n        self.label_32 = QtWidgets.QLabel(self.frame_23)\n        self.label_32.setObjectName(""label_32"")\n        self.horizontalLayout_24.addWidget(self.label_32)\n        self.diffevolrecombinationlineEdit = QtWidgets.QLineEdit(self.frame_23)\n        self.diffevolrecombinationlineEdit.setObjectName(""diffevolrecombinationlineEdit"")\n        self.horizontalLayout_24.addWidget(self.diffevolrecombinationlineEdit)\n        self.verticalLayout_14.addWidget(self.frame_23)\n        self.frame_24 = QtWidgets.QFrame(self.groupBox_9)\n        self.frame_24.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_24.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_24.setObjectName(""frame_24"")\n        self.horizontalLayout_25 = QtWidgets.QHBoxLayout(self.frame_24)\n        self.horizontalLayout_25.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_25.setObjectName(""horizontalLayout_25"")\n        self.diffevolseedcheckBox = QtWidgets.QCheckBox(self.frame_24)\n        self.diffevolseedcheckBox.setObjectName(""diffevolseedcheckBox"")\n        self.horizontalLayout_25.addWidget(self.diffevolseedcheckBox)\n        self.diffevolseedlineEdit = QtWidgets.QLineEdit(self.frame_24)\n        self.diffevolseedlineEdit.setEnabled(False)\n        self.diffevolseedlineEdit.setObjectName(""diffevolseedlineEdit"")\n        self.horizontalLayout_25.addWidget(self.diffevolseedlineEdit)\n        self.verticalLayout_14.addWidget(self.frame_24)\n        self.frame_25 = QtWidgets.QFrame(self.groupBox_9)\n        self.frame_25.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_25.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_25.setObjectName(""frame_25"")\n        self.horizontalLayout_26 = QtWidgets.QHBoxLayout(self.frame_25)\n        self.horizontalLayout_26.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_26.setObjectName(""horizontalLayout_26"")\n        self.diffevolpolishcheckBox = QtWidgets.QCheckBox(self.frame_25)\n        self.diffevolpolishcheckBox.setChecked(True)\n        self.diffevolpolishcheckBox.setObjectName(""diffevolpolishcheckBox"")\n        self.horizontalLayout_26.addWidget(self.diffevolpolishcheckBox)\n        self.verticalLayout_14.addWidget(self.frame_25)\n        self.frame_26 = QtWidgets.QFrame(self.groupBox_9)\n        self.frame_26.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_26.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_26.setObjectName(""frame_26"")\n        self.horizontalLayout_27 = QtWidgets.QHBoxLayout(self.frame_26)\n        self.horizontalLayout_27.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_27.setObjectName(""horizontalLayout_27"")\n        self.label_33 = QtWidgets.QLabel(self.frame_26)\n        self.label_33.setObjectName(""label_33"")\n        self.horizontalLayout_27.addWidget(self.label_33)\n        self.diffevolinitcomboBox = QtWidgets.QComboBox(self.frame_26)\n        self.diffevolinitcomboBox.setObjectName(""diffevolinitcomboBox"")\n        self.diffevolinitcomboBox.addItem("""")\n        self.diffevolinitcomboBox.addItem("""")\n        self.horizontalLayout_27.addWidget(self.diffevolinitcomboBox)\n        self.verticalLayout_14.addWidget(self.frame_26)\n        self.frame_27 = QtWidgets.QFrame(self.groupBox_9)\n        self.frame_27.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_27.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_27.setObjectName(""frame_27"")\n        self.horizontalLayout_28 = QtWidgets.QHBoxLayout(self.frame_27)\n        self.horizontalLayout_28.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_28.setObjectName(""horizontalLayout_28"")\n        self.label_34 = QtWidgets.QLabel(self.frame_27)\n        self.label_34.setObjectName(""label_34"")\n        self.horizontalLayout_28.addWidget(self.label_34)\n        self.diffevolatollineEdit = QtWidgets.QLineEdit(self.frame_27)\n        self.diffevolatollineEdit.setObjectName(""diffevolatollineEdit"")\n        self.horizontalLayout_28.addWidget(self.diffevolatollineEdit)\n        self.verticalLayout_14.addWidget(self.frame_27)\n        self.frame_28 = QtWidgets.QFrame(self.groupBox_9)\n        self.frame_28.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_28.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_28.setObjectName(""frame_28"")\n        self.horizontalLayout_29 = QtWidgets.QHBoxLayout(self.frame_28)\n        self.horizontalLayout_29.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_29.setObjectName(""horizontalLayout_29"")\n        self.label_35 = QtWidgets.QLabel(self.frame_28)\n        self.label_35.setObjectName(""label_35"")\n        self.horizontalLayout_29.addWidget(self.label_35)\n        self.diffevolupdatingcomboBox = QtWidgets.QComboBox(self.frame_28)\n        self.diffevolupdatingcomboBox.setObjectName(""diffevolupdatingcomboBox"")\n        self.diffevolupdatingcomboBox.addItem("""")\n        self.diffevolupdatingcomboBox.addItem("""")\n        self.horizontalLayout_29.addWidget(self.diffevolupdatingcomboBox)\n        self.verticalLayout_14.addWidget(self.frame_28)\n        self.verticalLayout_12.addWidget(self.groupBox_9)\n        self.tabWidget.addTab(self.differentialevolution, """")\n        self.shgo = QtWidgets.QWidget()\n        self.shgo.setObjectName(""shgo"")\n        self.verticalLayout_20 = QtWidgets.QVBoxLayout(self.shgo)\n        self.verticalLayout_20.setObjectName(""verticalLayout_20"")\n        self.groupBox_12 = QtWidgets.QGroupBox(self.shgo)\n        self.groupBox_12.setObjectName(""groupBox_12"")\n        self.verticalLayout_17 = QtWidgets.QVBoxLayout(self.groupBox_12)\n        self.verticalLayout_17.setObjectName(""verticalLayout_17"")\n        self.label_12 = QtWidgets.QLabel(self.groupBox_12)\n        self.label_12.setWordWrap(True)\n        self.label_12.setObjectName(""label_12"")\n        self.verticalLayout_17.addWidget(self.label_12)\n        self.label_13 = QtWidgets.QLabel(self.groupBox_12)\n        font = QtGui.QFont()\n        font.setBold(True)\n        font.setWeight(75)\n        self.label_13.setFont(font)\n        self.label_13.setObjectName(""label_13"")\n        self.verticalLayout_17.addWidget(self.label_13)\n        self.frame_30 = QtWidgets.QFrame(self.groupBox_12)\n        self.frame_30.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_30.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_30.setObjectName(""frame_30"")\n        self.horizontalLayout_31 = QtWidgets.QHBoxLayout(self.frame_30)\n        self.horizontalLayout_31.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_31.setObjectName(""horizontalLayout_31"")\n        self.label_36 = QtWidgets.QLabel(self.frame_30)\n        self.label_36.setObjectName(""label_36"")\n        self.horizontalLayout_31.addWidget(self.label_36)\n        self.SHGOnlineEdit = QtWidgets.QLineEdit(self.frame_30)\n        self.SHGOnlineEdit.setObjectName(""SHGOnlineEdit"")\n        self.horizontalLayout_31.addWidget(self.SHGOnlineEdit)\n        self.verticalLayout_17.addWidget(self.frame_30)\n        self.frame_31 = QtWidgets.QFrame(self.groupBox_12)\n        self.frame_31.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_31.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_31.setObjectName(""frame_31"")\n        self.horizontalLayout_32 = QtWidgets.QHBoxLayout(self.frame_31)\n        self.horizontalLayout_32.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_32.setObjectName(""horizontalLayout_32"")\n        self.label_37 = QtWidgets.QLabel(self.frame_31)\n        self.label_37.setObjectName(""label_37"")\n        self.horizontalLayout_32.addWidget(self.label_37)\n        self.SHGOiterslineEdit = QtWidgets.QLineEdit(self.frame_31)\n        self.SHGOiterslineEdit.setObjectName(""SHGOiterslineEdit"")\n        self.horizontalLayout_32.addWidget(self.SHGOiterslineEdit)\n        self.verticalLayout_17.addWidget(self.frame_31)\n        self.frame_32 = QtWidgets.QFrame(self.groupBox_12)\n        self.frame_32.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_32.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_32.setObjectName(""frame_32"")\n        self.horizontalLayout_33 = QtWidgets.QHBoxLayout(self.frame_32)\n        self.horizontalLayout_33.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_33.setObjectName(""horizontalLayout_33"")\n        self.SHGOmaxfevcheckBox = QtWidgets.QCheckBox(self.frame_32)\n        self.SHGOmaxfevcheckBox.setObjectName(""SHGOmaxfevcheckBox"")\n        self.horizontalLayout_33.addWidget(self.SHGOmaxfevcheckBox)\n        self.SHGOmaxfevlineEdit = QtWidgets.QLineEdit(self.frame_32)\n        self.SHGOmaxfevlineEdit.setEnabled(False)\n        self.SHGOmaxfevlineEdit.setObjectName(""SHGOmaxfevlineEdit"")\n        self.horizontalLayout_33.addWidget(self.SHGOmaxfevlineEdit)\n        self.verticalLayout_17.addWidget(self.frame_32)\n        self.frame_33 = QtWidgets.QFrame(self.groupBox_12)\n        self.frame_33.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_33.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_33.setObjectName(""frame_33"")\n        self.horizontalLayout_34 = QtWidgets.QHBoxLayout(self.frame_33)\n        self.horizontalLayout_34.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_34.setObjectName(""horizontalLayout_34"")\n        self.SHGOf_mincheckBox = QtWidgets.QCheckBox(self.frame_33)\n        self.SHGOf_mincheckBox.setObjectName(""SHGOf_mincheckBox"")\n        self.horizontalLayout_34.addWidget(self.SHGOf_mincheckBox)\n        self.SHGOf_minlineEdit = QtWidgets.QLineEdit(self.frame_33)\n        self.SHGOf_minlineEdit.setEnabled(False)\n        self.SHGOf_minlineEdit.setObjectName(""SHGOf_minlineEdit"")\n        self.horizontalLayout_34.addWidget(self.SHGOf_minlineEdit)\n        self.verticalLayout_17.addWidget(self.frame_33)\n        self.frame_34 = QtWidgets.QFrame(self.groupBox_12)\n        self.frame_34.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_34.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_34.setObjectName(""frame_34"")\n        self.horizontalLayout_35 = QtWidgets.QHBoxLayout(self.frame_34)\n        self.horizontalLayout_35.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_35.setObjectName(""horizontalLayout_35"")\n        self.label_39 = QtWidgets.QLabel(self.frame_34)\n        self.label_39.setObjectName(""label_39"")\n        self.horizontalLayout_35.addWidget(self.label_39)\n        self.SHGOf_tollineEdit = QtWidgets.QLineEdit(self.frame_34)\n        self.SHGOf_tollineEdit.setObjectName(""SHGOf_tollineEdit"")\n        self.horizontalLayout_35.addWidget(self.SHGOf_tollineEdit)\n        self.verticalLayout_17.addWidget(self.frame_34)\n        self.frame_35 = QtWidgets.QFrame(self.groupBox_12)\n        self.frame_35.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_35.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_35.setObjectName(""frame_35"")\n        self.horizontalLayout_36 = QtWidgets.QHBoxLayout(self.frame_35)\n        self.horizontalLayout_36.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_36.setObjectName(""horizontalLayout_36"")\n        self.SHGOmaxitercheckBox = QtWidgets.QCheckBox(self.frame_35)\n        self.SHGOmaxitercheckBox.setObjectName(""SHGOmaxitercheckBox"")\n        self.horizontalLayout_36.addWidget(self.SHGOmaxitercheckBox)\n        self.SHGOmaxiterlineEdit = QtWidgets.QLineEdit(self.frame_35)\n        self.SHGOmaxiterlineEdit.setEnabled(False)\n        self.SHGOmaxiterlineEdit.setObjectName(""SHGOmaxiterlineEdit"")\n        self.horizontalLayout_36.addWidget(self.SHGOmaxiterlineEdit)\n        self.verticalLayout_17.addWidget(self.frame_35)\n        self.frame_36 = QtWidgets.QFrame(self.groupBox_12)\n        self.frame_36.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_36.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_36.setObjectName(""frame_36"")\n        self.horizontalLayout_37 = QtWidgets.QHBoxLayout(self.frame_36)\n        self.horizontalLayout_37.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_37.setObjectName(""horizontalLayout_37"")\n        self.SHGOmaxevcheckBox = QtWidgets.QCheckBox(self.frame_36)\n        self.SHGOmaxevcheckBox.setObjectName(""SHGOmaxevcheckBox"")\n        self.horizontalLayout_37.addWidget(self.SHGOmaxevcheckBox)\n        self.SHGOmaxevlineEdit = QtWidgets.QLineEdit(self.frame_36)\n        self.SHGOmaxevlineEdit.setEnabled(False)\n        self.SHGOmaxevlineEdit.setObjectName(""SHGOmaxevlineEdit"")\n        self.horizontalLayout_37.addWidget(self.SHGOmaxevlineEdit)\n        self.verticalLayout_17.addWidget(self.frame_36)\n        self.frame_37 = QtWidgets.QFrame(self.groupBox_12)\n        self.frame_37.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_37.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_37.setObjectName(""frame_37"")\n        self.horizontalLayout_38 = QtWidgets.QHBoxLayout(self.frame_37)\n        self.horizontalLayout_38.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_38.setObjectName(""horizontalLayout_38"")\n        self.SHGOmaxtimecheckBox = QtWidgets.QCheckBox(self.frame_37)\n        self.SHGOmaxtimecheckBox.setObjectName(""SHGOmaxtimecheckBox"")\n        self.horizontalLayout_38.addWidget(self.SHGOmaxtimecheckBox)\n        self.SHGOmaxtimelineEdit = QtWidgets.QLineEdit(self.frame_37)\n        self.SHGOmaxtimelineEdit.setEnabled(False)\n        self.SHGOmaxtimelineEdit.setObjectName(""SHGOmaxtimelineEdit"")\n        self.horizontalLayout_38.addWidget(self.SHGOmaxtimelineEdit)\n        self.verticalLayout_17.addWidget(self.frame_37)\n        self.frame_38 = QtWidgets.QFrame(self.groupBox_12)\n        self.frame_38.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_38.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_38.setObjectName(""frame_38"")\n        self.horizontalLayout_39 = QtWidgets.QHBoxLayout(self.frame_38)\n        self.horizontalLayout_39.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_39.setObjectName(""horizontalLayout_39"")\n        self.SHGOminhgrdcheckBox = QtWidgets.QCheckBox(self.frame_38)\n        self.SHGOminhgrdcheckBox.setObjectName(""SHGOminhgrdcheckBox"")\n        self.horizontalLayout_39.addWidget(self.SHGOminhgrdcheckBox)\n        self.SHGOminhgrdlineEdit = QtWidgets.QLineEdit(self.frame_38)\n        self.SHGOminhgrdlineEdit.setEnabled(False)\n        self.SHGOminhgrdlineEdit.setObjectName(""SHGOminhgrdlineEdit"")\n        self.horizontalLayout_39.addWidget(self.SHGOminhgrdlineEdit)\n        self.verticalLayout_17.addWidget(self.frame_38)\n        self.frame_40 = QtWidgets.QFrame(self.groupBox_12)\n        self.frame_40.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_40.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_40.setObjectName(""frame_40"")\n        self.horizontalLayout_41 = QtWidgets.QHBoxLayout(self.frame_40)\n        self.horizontalLayout_41.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_41.setObjectName(""horizontalLayout_41"")\n        self.SHGOminimize_every_itercheckBox = QtWidgets.QCheckBox(self.frame_40)\n        self.SHGOminimize_every_itercheckBox.setObjectName(""SHGOminimize_every_itercheckBox"")\n        self.horizontalLayout_41.addWidget(self.SHGOminimize_every_itercheckBox)\n        self.verticalLayout_17.addWidget(self.frame_40)\n        self.frame_41 = QtWidgets.QFrame(self.groupBox_12)\n        self.frame_41.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_41.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_41.setObjectName(""frame_41"")\n        self.horizontalLayout_42 = QtWidgets.QHBoxLayout(self.frame_41)\n        self.horizontalLayout_42.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_42.setObjectName(""horizontalLayout_42"")\n        self.SHGOlocal_itercheckBox = QtWidgets.QCheckBox(self.frame_41)\n        self.SHGOlocal_itercheckBox.setObjectName(""SHGOlocal_itercheckBox"")\n        self.horizontalLayout_42.addWidget(self.SHGOlocal_itercheckBox)\n        self.verticalLayout_17.addWidget(self.frame_41)\n        self.frame_42 = QtWidgets.QFrame(self.groupBox_12)\n        self.frame_42.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_42.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_42.setObjectName(""frame_42"")\n        self.horizontalLayout_43 = QtWidgets.QHBoxLayout(self.frame_42)\n        self.horizontalLayout_43.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_43.setObjectName(""horizontalLayout_43"")\n        self.SHGOinfty_constraintscheckBox = QtWidgets.QCheckBox(self.frame_42)\n        self.SHGOinfty_constraintscheckBox.setChecked(True)\n        self.SHGOinfty_constraintscheckBox.setObjectName(""SHGOinfty_constraintscheckBox"")\n        self.horizontalLayout_43.addWidget(self.SHGOinfty_constraintscheckBox)\n        self.verticalLayout_17.addWidget(self.frame_42)\n        self.frame_43 = QtWidgets.QFrame(self.groupBox_12)\n        self.frame_43.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_43.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_43.setObjectName(""frame_43"")\n        self.horizontalLayout_44 = QtWidgets.QHBoxLayout(self.frame_43)\n        self.horizontalLayout_44.setContentsMargins(-1, 2, -1, 2)\n        self.horizontalLayout_44.setObjectName(""horizontalLayout_44"")\n        self.label_38 = QtWidgets.QLabel(self.frame_43)\n        self.label_38.setObjectName(""label_38"")\n        self.horizontalLayout_44.addWidget(self.label_38)\n        self.SHGOsampling_methodcomboBox = QtWidgets.QComboBox(self.frame_43)\n        self.SHGOsampling_methodcomboBox.setObjectName(""SHGOsampling_methodcomboBox"")\n        self.SHGOsampling_methodcomboBox.addItem("""")\n        self.SHGOsampling_methodcomboBox.addItem("""")\n        self.horizontalLayout_44.addWidget(self.SHGOsampling_methodcomboBox)\n        self.verticalLayout_17.addWidget(self.frame_43)\n        self.verticalLayout_20.addWidget(self.groupBox_12)\n        self.tabWidget.addTab(self.shgo, """")\n        self.brute = QtWidgets.QWidget()\n        self.brute.setObjectName(""brute"")\n        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.brute)\n        self.verticalLayout_5.setObjectName(""verticalLayout_5"")\n        self.groupBox_2 = QtWidgets.QGroupBox(self.brute)\n        self.groupBox_2.setObjectName(""groupBox_2"")\n        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.groupBox_2)\n        self.verticalLayout_3.setObjectName(""verticalLayout_3"")\n        self.label_14 = QtWidgets.QLabel(self.groupBox_2)\n        self.label_14.setWordWrap(True)\n        self.label_14.setObjectName(""label_14"")\n        self.verticalLayout_3.addWidget(self.label_14)\n        self.label_15 = QtWidgets.QLabel(self.groupBox_2)\n        font = QtGui.QFont()\n        font.setBold(True)\n        font.setWeight(75)\n        self.label_15.setFont(font)\n        self.label_15.setObjectName(""label_15"")\n        self.verticalLayout_3.addWidget(self.label_15)\n        self.frame_44 = QtWidgets.QFrame(self.groupBox_2)\n        self.frame_44.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_44.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_44.setObjectName(""frame_44"")\n        self.horizontalLayout_45 = QtWidgets.QHBoxLayout(self.frame_44)\n        self.horizontalLayout_45.setObjectName(""horizontalLayout_45"")\n        self.label_40 = QtWidgets.QLabel(self.frame_44)\n        self.label_40.setObjectName(""label_40"")\n        self.horizontalLayout_45.addWidget(self.label_40)\n        self.BruteNslineEdit = QtWidgets.QLineEdit(self.frame_44)\n        self.BruteNslineEdit.setObjectName(""BruteNslineEdit"")\n        self.horizontalLayout_45.addWidget(self.BruteNslineEdit)\n        self.verticalLayout_3.addWidget(self.frame_44)\n        self.verticalLayout_5.addWidget(self.groupBox_2)\n        self.tabWidget.addTab(self.brute, """")\n        self.verticalLayout.addWidget(self.tabWidget)\n        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()\n        self.horizontalLayout_5.setObjectName(""horizontalLayout_5"")\n        self.pushCancel = QtWidgets.QPushButton(Dialog)\n        self.pushCancel.setObjectName(""pushCancel"")\n        self.horizontalLayout_5.addWidget(self.pushCancel)\n        self.pushOK = QtWidgets.QPushButton(Dialog)\n        self.pushOK.setObjectName(""pushOK"")\n        self.horizontalLayout_5.addWidget(self.pushOK)\n        self.verticalLayout.addLayout(self.horizontalLayout_5)\n\n        self.retranslateUi(Dialog)\n        self.tabWidget.setCurrentIndex(5)\n        self.pushOK.clicked.connect(Dialog.accept)\n        self.pushCancel.clicked.connect(Dialog.reject)\n        self.LSftolcheckBox.toggled[\'bool\'].connect(self.LSftollineEdit.setEnabled)\n        self.LSxtolcheckBox.toggled[\'bool\'].connect(self.LSxtollineEdit.setEnabled)\n        self.LSgtolcheckBox.toggled[\'bool\'].connect(self.LSgtollineEdit.setEnabled)\n        self.LSmax_nfevcheckBox.toggled[\'bool\'].connect(self.LSmax_nfevlineEdit.setEnabled)\n        self.LStr_solvercheckBox.toggled[\'bool\'].connect(self.LStr_solvercomboBox.setEnabled)\n        self.basinniter_successcheckBox.toggled[\'bool\'].connect(self.basinniter_successlineEdit.setEnabled)\n        self.annealseedcheckBox.toggled[\'bool\'].connect(self.annealseedlineEdit.setEnabled)\n        self.diffevolseedcheckBox.toggled[\'bool\'].connect(self.diffevolseedlineEdit.setEnabled)\n        self.SHGOmaxevcheckBox.toggled[\'bool\'].connect(self.SHGOmaxfevlineEdit.setEnabled)\n        self.SHGOf_mincheckBox.toggled[\'bool\'].connect(self.SHGOf_minlineEdit.setEnabled)\n        self.SHGOmaxitercheckBox.toggled[\'bool\'].connect(self.SHGOmaxiterlineEdit.setEnabled)\n        self.SHGOmaxevcheckBox.toggled[\'bool\'].connect(self.SHGOmaxevlineEdit.setEnabled)\n        self.SHGOmaxtimecheckBox.toggled[\'bool\'].connect(self.SHGOmaxtimelineEdit.setEnabled)\n        self.SHGOminhgrdcheckBox.toggled[\'bool\'].connect(self.SHGOminhgrdlineEdit.setEnabled)\n        self.basinseedcheckBox.toggled[\'bool\'].connect(self.basinseedlineEdit.setEnabled)\n        self.SHGOmaxfevcheckBox.toggled[\'bool\'].connect(self.SHGOmaxfevlineEdit.setEnabled)\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\n\n    def retranslateUi(self, Dialog):\n        _translate = QtCore.QCoreApplication.translate\n        Dialog.setWindowTitle(_translate(""Dialog"", ""Fitting Options""))\n        self.groupBox.setTitle(_translate(""Dialog"", ""Least Squares Minimization""))\n        self.label_4.setText(_translate(""Dialog"", ""Available methods are:\\n""\n""- Trust Region Reflective algorithm, particularly suitable for large sparse problems with bounds. Generally robust method (DEFAULT).\\n""\n""- \xe2\x80\x98dogbox\xe2\x80\x99 : dogleg algorithm with rectangular trust regions, typical use case is small problems with bounds. Not recommended for problems with rank-deficient Jacobian.\\n""\n""- \xe2\x80\x98lm\xe2\x80\x99 : Levenberg-Marquardt algorithm as implemented in MINPACK. Doesn\xe2\x80\x99t handle bounds and sparse Jacobians. Usually the most efficient method for small unconstrained problems.""))\n        self.label_5.setText(_translate(""Dialog"", ""Local Method""))\n        self.label_3.setText(_translate(""Dialog"", ""method""))\n        self.LSmethodcomboBox.setToolTip(_translate(""Dialog"", ""- Trust Region Reflective algorithm, particularly suitable for large sparse problems with bounds. Generally robust method (DEFAULT).\\n""\n""- \xe2\x80\x98dogbox\xe2\x80\x99 : dogleg algorithm with rectangular trust regions, typical use case is small problems with bounds. Not recommended for problems with rank-deficient Jacobian.\\n""\n""- \xe2\x80\x98lm\xe2\x80\x99 : Levenberg-Marquardt algorithm as implemented in MINPACK. Doesn\xe2\x80\x99t handle bounds and sparse Jacobians. Usually the most efficient method for small unconstrained problems.""))\n        self.LSmethodcomboBox.setItemText(0, _translate(""Dialog"", ""trf""))\n        self.LSmethodcomboBox.setItemText(1, _translate(""Dialog"", ""dogbox""))\n        self.LSmethodcomboBox.setItemText(2, _translate(""Dialog"", ""lm""))\n        self.label_16.setToolTip(_translate(""Dialog"", ""Finite difference scheme for numerical estimation of the Jacobian matrix: \\n""\n""- \xe2\x80\x982-point\xe2\x80\x99 (default)\\n""\n""- \xe2\x80\x983-point\xe2\x80\x99: more accurate, but requires twice as many operations as 2-point. \\n""\n""- \xe2\x80\x98cs\xe2\x80\x99 uses complex steps, and while potentially the most accurate, it is applicable only when fun correctly handles complex inputs and can be analytically continued to the complex plane. \\n""\n""Method \xe2\x80\x98lm\xe2\x80\x99 always uses the \xe2\x80\x982-point\xe2\x80\x99 scheme.""))\n        self.label_16.setText(_translate(""Dialog"", ""jac""))\n        self.LSjaccomboBox.setToolTip(_translate(""Dialog"", ""Finite difference scheme for numerical estimation of the Jacobian matrix: \\n""\n""- \xe2\x80\x982-point\xe2\x80\x99 (default)\\n""\n""- \xe2\x80\x983-point\xe2\x80\x99: more accurate, but requires twice as many operations as 2-point. \\n""\n""- \xe2\x80\x98cs\xe2\x80\x99 uses complex steps, and while potentially the most accurate, it is applicable only when fun correctly handles complex inputs and can be analytically continued to the complex plane. \\n""\n""Method \xe2\x80\x98lm\xe2\x80\x99 always uses the \xe2\x80\x982-point\xe2\x80\x99 scheme.""))\n        self.LSjaccomboBox.setItemText(0, _translate(""Dialog"", ""2-point""))\n        self.LSjaccomboBox.setItemText(1, _translate(""Dialog"", ""3-point""))\n        self.LSjaccomboBox.setItemText(2, _translate(""Dialog"", ""cs""))\n        self.LSftolcheckBox.setToolTip(_translate(""Dialog"", ""Tolerance for termination by the change of the cost function. Default is 1e-8. The optimization process is stopped when dF < ftol * F, and there was an adequate agreement between a local quadratic model and the true model in the last step.""))\n        self.LSftolcheckBox.setText(_translate(""Dialog"", ""ftol""))\n        self.LSftollineEdit.setToolTip(_translate(""Dialog"", ""Tolerance for termination by the change of the cost function. Default is 1e-8. The optimization process is stopped when dF < ftol * F, and there was an adequate agreement between a local quadratic model and the true model in the last step.""))\n        self.LSxtolcheckBox.setToolTip(_translate(""Dialog"", ""Tolerance for termination by the change of the independent variables. Default is 1e-8. The exact condition depends on the method used:\\n""\n""\\n""\n""For \xe2\x80\x98trf\xe2\x80\x99 and \xe2\x80\x98dogbox\xe2\x80\x99 : norm(dx) < xtol * (xtol + norm(x))\\n""\n""\\n""\n""For \xe2\x80\x98lm\xe2\x80\x99 : Delta < xtol * norm(xs), where Delta is a trust-region radius and xs is the value of x scaled according to x_scale parameter (see below).""))\n        self.LSxtolcheckBox.setText(_translate(""Dialog"", ""xtol""))\n        self.LSxtollineEdit.setToolTip(_translate(""Dialog"", ""Tolerance for termination by the change of the independent variables. Default is 1e-8. The exact condition depends on the method used:\\n""\n""\\n""\n""For \xe2\x80\x98trf\xe2\x80\x99 and \xe2\x80\x98dogbox\xe2\x80\x99 : norm(dx) < xtol * (xtol + norm(x))\\n""\n""\\n""\n""For \xe2\x80\x98lm\xe2\x80\x99 : Delta < xtol * norm(xs), where Delta is a trust-region radius and xs is the value of x scaled according to x_scale parameter (see below).""))\n        self.LSgtolcheckBox.setToolTip(_translate(""Dialog"", ""Tolerance for termination by the norm of the gradient. Default is 1e-8. The exact condition depends on a method used:\\n""\n""\\n""\n""For \xe2\x80\x98trf\xe2\x80\x99 : norm(g_scaled, ord=np.inf) < gtol, where g_scaled is the value of the gradient scaled to account for the presence of the bounds [STIR].\\n""\n""\\n""\n""For \xe2\x80\x98dogbox\xe2\x80\x99 : norm(g_free, ord=np.inf) < gtol, where g_free is the gradient with respect to the variables which are not in the optimal state on the boundary.\\n""\n""\\n""\n""For \xe2\x80\x98lm\xe2\x80\x99 : the maximum absolute value of the cosine of angles between columns of the Jacobian and the residual vector is less than gtol, or the residual vector is zero.""))\n        self.LSgtolcheckBox.setText(_translate(""Dialog"", ""gtol""))\n        self.LSgtollineEdit.setToolTip(_translate(""Dialog"", ""Tolerance for termination by the norm of the gradient. Default is 1e-8. The exact condition depends on a method used:\\n""\n""\\n""\n""For \xe2\x80\x98trf\xe2\x80\x99 : norm(g_scaled, ord=np.inf) < gtol, where g_scaled is the value of the gradient scaled to account for the presence of the bounds [STIR].\\n""\n""\\n""\n""For \xe2\x80\x98dogbox\xe2\x80\x99 : norm(g_free, ord=np.inf) < gtol, where g_free is the gradient with respect to the variables which are not in the optimal state on the boundary.\\n""\n""\\n""\n""For \xe2\x80\x98lm\xe2\x80\x99 : the maximum absolute value of the cosine of angles between columns of the Jacobian and the residual vector is less than gtol, or the residual vector is zero.""))\n        self.label.setText(_translate(""Dialog"", ""loss""))\n        self.LSlosscomboBox.setToolTip(_translate(""Dialog"", ""Determines the loss function. The following keyword values are allowed:\\n""\n""- \xe2\x80\x98linear\xe2\x80\x99 (default) : rho(z) = z. Gives a standard least-squares problem.\\n""\n""- \xe2\x80\x98soft_l1\xe2\x80\x99 : rho(z) = 2 * ((1 + z)**0.5 - 1). The smooth approximation of l1 (absolute value) loss. Usually a good choice for robust least squares.\\n""\n""- \xe2\x80\x98huber\xe2\x80\x99 : rho(z) = z if z <= 1 else 2*z^0.5 - 1. Works similarly to \xe2\x80\x98soft_l1\xe2\x80\x99. \\n""\n""- \xe2\x80\x98cauchy\xe2\x80\x99 : rho(z) = ln(1 + z). Severely weakens outliers influence, but may cause difficulties in optimization process.\\n""\n""- \xe2\x80\x98arctan\xe2\x80\x99 : rho(z) = arctan(z). Limits a maximum loss on a single residual, has properties similar to \xe2\x80\x98cauchy\xe2\x80\x99.\\n""\n"" Method \xe2\x80\x98lm\xe2\x80\x99 supports only \xe2\x80\x98linear\xe2\x80\x99 loss.""))\n        self.LSlosscomboBox.setItemText(0, _translate(""Dialog"", ""linear""))\n        self.LSlosscomboBox.setItemText(1, _translate(""Dialog"", ""soft_l1""))\n        self.LSlosscomboBox.setItemText(2, _translate(""Dialog"", ""huber""))\n        self.LSlosscomboBox.setItemText(3, _translate(""Dialog"", ""cauchy""))\n        self.LSlosscomboBox.setItemText(4, _translate(""Dialog"", ""arctan""))\n        self.label_2.setText(_translate(""Dialog"", ""f_scale""))\n        self.LSf_scalelineEdit.setToolTip(_translate(""Dialog"", ""Value of soft margin between inlier and outlier residuals, default is 1.0. The loss function is evaluated as follows rho_(f**2) = C**2 * rho(f**2 / C**2), where C is f_scale, and rho is determined by loss parameter. This parameter has no effect with loss=\\\'linear\\\', but for other loss values it is of crucial importance.""))\n        self.LSmax_nfevcheckBox.setToolTip(_translate(""Dialog"", ""Maximum number of function evaluations before the termination. If None (default), the value is chosen automatically:\\n""\n""\\n""\n""For \xe2\x80\x98trf\xe2\x80\x99 and \xe2\x80\x98dogbox\xe2\x80\x99 : 100 * n.\\n""\n""\\n""\n""For \xe2\x80\x98lm\xe2\x80\x99 : 100 * n if jac is callable and 100 * n * (n + 1) otherwise (because \xe2\x80\x98lm\xe2\x80\x99 counts function calls in Jacobian estimation).""))\n        self.LSmax_nfevcheckBox.setText(_translate(""Dialog"", ""max_nfev""))\n        self.LSmax_nfevlineEdit.setToolTip(_translate(""Dialog"", ""Maximum number of function evaluations before the termination. If None (default), the value is chosen automatically:\\n""\n""\\n""\n""For \xe2\x80\x98trf\xe2\x80\x99 and \xe2\x80\x98dogbox\xe2\x80\x99 : 100 * n.\\n""\n""\\n""\n""For \xe2\x80\x98lm\xe2\x80\x99 : 100 * n if jac is callable and 100 * n * (n + 1) otherwise (because \xe2\x80\x98lm\xe2\x80\x99 counts function calls in Jacobian estimation).""))\n        self.LStr_solvercheckBox.setText(_translate(""Dialog"", ""tr_solver""))\n        self.LStr_solvercomboBox.setToolTip(_translate(""Dialog"", ""Method for solving trust-region subproblems, relevant only for \xe2\x80\x98trf\xe2\x80\x99 and \xe2\x80\x98dogbox\xe2\x80\x99 methods.\\n""\n""\\n""\n""\xe2\x80\x98exact\xe2\x80\x99 is suitable for not very large problems with dense Jacobian matrices. The computational complexity per iteration is comparable to a singular value decomposition of the Jacobian matrix.\\n""\n""\\n""\n""\xe2\x80\x98lsmr\xe2\x80\x99 is suitable for problems with sparse and large Jacobian matrices. It uses the iterative procedure scipy.sparse.linalg.lsmr for finding a solution of a linear least-squares problem and only requires matrix-vector product evaluations.\\n""\n""\\n""\n""If None (default) the solver is chosen based on the type of Jacobian returned on the first iteration.""))\n        self.LStr_solvercomboBox.setItemText(0, _translate(""Dialog"", ""exact""))\n        self.LStr_solvercomboBox.setItemText(1, _translate(""Dialog"", ""lsmr""))\n        self.tabWidget.setTabText(self.tabWidget.indexOf(self.ls), _translate(""Dialog"", ""LS""))\n        self.groupBox_8.setTitle(_translate(""Dialog"", ""Basin Hopping""))\n        self.label_6.setText(_translate(""Dialog"", ""Basin-hopping is a two-phase method that combines a global stepping algorithm with local minimization at each step.""))\n        self.label_7.setText(_translate(""Dialog"", ""Global Method""))\n        self.label_17.setText(_translate(""Dialog"", ""niter""))\n        self.basinniterlineEdit.setToolTip(_translate(""Dialog"", ""number of basin-hopping iterations""))\n        self.label_18.setText(_translate(""Dialog"", ""T""))\n        self.basinTlineEdit.setToolTip(_translate(""Dialog"", ""\xe2\x80\x9ctemperature\xe2\x80\x9d parameter for the accept or reject criterion""))\n        self.label_19.setText(_translate(""Dialog"", ""stepsize""))\n        self.basinstepsizelineEdit.setToolTip(_translate(""Dialog"", ""Maximum step size for use in the random displacement""))\n        self.label_20.setText(_translate(""Dialog"", ""interval""))\n        self.basinintervallineEdit.setToolTip(_translate(""Dialog"", ""interval for how often to update the stepsize""))\n        self.basinniter_successcheckBox.setToolTip(_translate(""Dialog"", ""Stop the run if the global minimum candidate remains the same for this number of iterations""))\n        self.basinniter_successcheckBox.setText(_translate(""Dialog"", ""niter_success""))\n        self.basinniter_successlineEdit.setToolTip(_translate(""Dialog"", ""Stop the run if the global minimum candidate remains the same for this number of iterations""))\n        self.basinseedcheckBox.setToolTip(_translate(""Dialog"", ""seed for random numbers""))\n        self.basinseedcheckBox.setText(_translate(""Dialog"", ""seed""))\n        self.basinseedlineEdit.setToolTip(_translate(""Dialog"", ""seed for random numbers""))\n        self.tabWidget.setTabText(self.tabWidget.indexOf(self.basinhopping), _translate(""Dialog"", ""Basin""))\n        self.groupBox_7.setTitle(_translate(""Dialog"", ""Dual Annealing""))\n        self.label_8.setText(_translate(""Dialog"", ""Find the global minimum of a function using Dual Annealing.\\n""\n""\\n""\n""""))\n        self.label_9.setText(_translate(""Dialog"", ""Global Method""))\n        self.label_21.setText(_translate(""Dialog"", ""maxiter""))\n        self.annealmaxiterlineEdit.setToolTip(_translate(""Dialog"", ""The maximum number of global search iterations. Default value is 1000""))\n        self.label_22.setText(_translate(""Dialog"", ""initial_temp""))\n        self.annealinitial_templineEdit.setToolTip(_translate(""Dialog"", ""initial temperature, use higher values to facilitates a wider search of the energy landscape, allowing dual_annealing to escape local minima that it is trapped in. Default value is 5230. Range is (0.01, 5.e4]""))\n        self.label_23.setText(_translate(""Dialog"", ""restart_temp_ratio""))\n        self.annealrestart_temp_ratiolineEdit.setToolTip(_translate(""Dialog"", ""During the annealing process, temperature is decreasing, when it reaches initial_temp * restart_temp_ratio, the reannealing process is triggered. Default value of the ratio is 2e-5. Range is (0, 1).""))\n        self.label_24.setText(_translate(""Dialog"", ""visit""))\n        self.annealvisitlineEdit.setToolTip(_translate(""Dialog"", ""Parameter for visiting distribution. Default value is 2.62. Higher values give the visiting distribution a heavier tail, this makes the algorithm jump to a more distant region. The value range is (0, 3].""))\n        self.label_25.setText(_translate(""Dialog"", ""accept""))\n        self.annealacceptlineEdit.setToolTip(_translate(""Dialog"", ""Parameter for acceptance distribution. It is used to control the probability of acceptance. The lower the acceptance parameter, the smaller the probability of acceptance. Default value is -5.0 with a range (-1e4, -5].""))\n        self.label_26.setText(_translate(""Dialog"", ""maxfun""))\n        self.annealmaxfunlineEdit.setToolTip(_translate(""Dialog"", ""Soft limit for the number of objective function calls. If the algorithm is in the middle of a local search, this number will be exceeded, the algorithm will stop just after the local search is done. Default value is 1e7.""))\n        self.annealseedcheckBox.setToolTip(_translate(""Dialog"", ""seed for random numbers""))\n        self.annealseedcheckBox.setText(_translate(""Dialog"", ""seed""))\n        self.annealseedlineEdit.setToolTip(_translate(""Dialog"", ""seed for random numbers""))\n        self.annealno_local_searchcheckBox.setToolTip(_translate(""Dialog"", ""a traditional Generalized Simulated Annealing will be performed with no local search strategy applied""))\n        self.annealno_local_searchcheckBox.setText(_translate(""Dialog"", ""no_local_search""))\n        self.tabWidget.setTabText(self.tabWidget.indexOf(self.dualannealing), _translate(""Dialog"", ""Annealing""))\n        self.groupBox_9.setTitle(_translate(""Dialog"", ""Differential Evolution""))\n        self.label_10.setText(_translate(""Dialog"", ""Stochastic method to find the minimum, and can search large areas of candidate space, but often requires larger numbers of function evaluations than conventional gradient based techniques.""))\n        self.label_11.setText(_translate(""Dialog"", ""Global Method""))\n        self.label_27.setText(_translate(""Dialog"", ""strategy""))\n        self.diffevolstrategycomboBox.setToolTip(_translate(""Dialog"", ""The differential evolution strategy to use. The default is \xe2\x80\x98best1bin\xe2\x80\x99.""))\n        self.diffevolstrategycomboBox.setItemText(0, _translate(""Dialog"", ""best1bin""))\n        self.diffevolstrategycomboBox.setItemText(1, _translate(""Dialog"", ""best1exp""))\n        self.diffevolstrategycomboBox.setItemText(2, _translate(""Dialog"", ""rand1exp""))\n        self.diffevolstrategycomboBox.setItemText(3, _translate(""Dialog"", ""randtobest1exp""))\n        self.diffevolstrategycomboBox.setItemText(4, _translate(""Dialog"", ""currenttobest1exp""))\n        self.diffevolstrategycomboBox.setItemText(5, _translate(""Dialog"", ""best2exp""))\n        self.diffevolstrategycomboBox.setItemText(6, _translate(""Dialog"", ""rand2exp""))\n        self.diffevolstrategycomboBox.setItemText(7, _translate(""Dialog"", ""randtobest1bin""))\n        self.diffevolstrategycomboBox.setItemText(8, _translate(""Dialog"", ""currenttobest1bin""))\n        self.diffevolstrategycomboBox.setItemText(9, _translate(""Dialog"", ""best2bin""))\n        self.diffevolstrategycomboBox.setItemText(10, _translate(""Dialog"", ""rand2bin""))\n        self.diffevolstrategycomboBox.setItemText(11, _translate(""Dialog"", ""rand1bin""))\n        self.label_28.setText(_translate(""Dialog"", ""maxiter""))\n        self.diffevolmaxiterlineEdit.setToolTip(_translate(""Dialog"", ""The maximum number of generations over which the entire population is evolved. The maximum number of function evaluations (with no polishing) is: (maxiter + 1) * popsize * len(x)""))\n        self.label_29.setText(_translate(""Dialog"", ""popsize""))\n        self.diffevolpopsizelineEdit.setToolTip(_translate(""Dialog"", ""A multiplier for setting the total population size. The population has popsize * len(x) individuals""))\n        self.label_30.setText(_translate(""Dialog"", ""tol""))\n        self.diffevoltollineEdit.setToolTip(_translate(""Dialog"", ""Relative tolerance for convergence, the solving stops when np.std(pop) <= atol + tol * np.abs(np.mean(population_energies)), where and atol and tol are the absolute and relative tolerance respectively.""))\n        self.label_31.setText(_translate(""Dialog"", ""mutation""))\n        self.diffevolmutationAlineEdit.setToolTip(_translate(""Dialog"", ""The mutation constant, also known as differential weight.If specified as a tuple (min, max) dithering is employed. Dithering randomly changes the mutation constant on a generation by generation basis. The mutation constant for that generation is taken from U[min, max). Dithering can help speed convergence significantly. Increasing the mutation constant increases the search radius, but will slow down convergence.""))\n        self.diffevolmutationBlineEdit.setToolTip(_translate(""Dialog"", ""The mutation constant, also known as differential weight.If specified as a tuple (min, max) dithering is employed. Dithering randomly changes the mutation constant on a generation by generation basis. The mutation constant for that generation is taken from U[min, max). Dithering can help speed convergence significantly. Increasing the mutation constant increases the search radius, but will slow down convergence.""))\n        self.label_32.setText(_translate(""Dialog"", ""recombination""))\n        self.diffevolrecombinationlineEdit.setToolTip(_translate(""Dialog"", ""The recombination constant, also known as the crossover probability, in the range [0, 1]. Increasing this value allows a larger number of mutants to progress into the next generation, but at the risk of population stability.""))\n        self.diffevolseedcheckBox.setToolTip(_translate(""Dialog"", ""Seed for random numbers""))\n        self.diffevolseedcheckBox.setText(_translate(""Dialog"", ""seed""))\n        self.diffevolseedlineEdit.setToolTip(_translate(""Dialog"", ""Seed for random numbers""))\n        self.diffevolpolishcheckBox.setToolTip(_translate(""Dialog"", ""If True (default), then scipy.optimize.minimize with the L-BFGS-B method is used to polish the best population member at the end, which can improve the minimization slightly. If a constrained problem is being studied then the trust-constr method is used instead.""))\n        self.diffevolpolishcheckBox.setText(_translate(""Dialog"", ""polish""))\n        self.label_33.setText(_translate(""Dialog"", ""init""))\n        self.diffevolinitcomboBox.setToolTip(_translate(""Dialog"", ""Specify which type of population initialization is performed. The default is \xe2\x80\x98latinhypercube\xe2\x80\x99. Latin Hypercube sampling tries to maximize coverage of the available parameter space. \xe2\x80\x98random\xe2\x80\x99 initializes the population randomly - this has the drawback that clustering can occur, preventing the whole of parameter space being covered.""))\n        self.diffevolinitcomboBox.setItemText(0, _translate(""Dialog"", ""latinhypercube""))\n        self.diffevolinitcomboBox.setItemText(1, _translate(""Dialog"", ""random""))\n        self.label_34.setText(_translate(""Dialog"", ""atol""))\n        self.diffevolatollineEdit.setToolTip(_translate(""Dialog"", ""Absolute tolerance for convergence, the solving stops when np.std(pop) <= atol + tol * np.abs(np.mean(population_energies)), where and atol and tol are the absolute and relative tolerance respectively.""))\n        self.label_35.setText(_translate(""Dialog"", ""updating""))\n        self.diffevolupdatingcomboBox.setToolTip(_translate(""Dialog"", ""If \\\'immediate\\\', the best solution vector is continuously updated within a single generation. This can lead to faster convergence as trial vectors can take advantage of continuous improvements in the best solution. With \\\'deferred\\\', the best solution vector is updated once per generation.""))\n        self.diffevolupdatingcomboBox.setItemText(0, _translate(""Dialog"", ""immediate""))\n        self.diffevolupdatingcomboBox.setItemText(1, _translate(""Dialog"", ""deferred""))\n        self.tabWidget.setTabText(self.tabWidget.indexOf(self.differentialevolution), _translate(""Dialog"", ""Evolution""))\n        self.groupBox_12.setTitle(_translate(""Dialog"", ""SHGO""))\n        self.label_12.setText(_translate(""Dialog"", ""Finds the global minimum of a function using simplicial homology global optimization.""))\n        self.label_13.setText(_translate(""Dialog"", ""Global Method""))\n        self.label_36.setText(_translate(""Dialog"", ""n""))\n        self.SHGOnlineEdit.setToolTip(_translate(""Dialog"", ""Number of sampling points used in the construction of the simplicial complex. Note that this argument is only used for sobol""))\n        self.label_37.setText(_translate(""Dialog"", ""iters""))\n        self.SHGOiterslineEdit.setToolTip(_translate(""Dialog"", ""Number of iterations used in the construction of the simplicial complex.""))\n        self.SHGOmaxfevcheckBox.setText(_translate(""Dialog"", ""maxfev""))\n        self.SHGOmaxfevlineEdit.setToolTip(_translate(""Dialog"", ""Maximum number of function evaluations in the feasible domain.""))\n        self.SHGOf_mincheckBox.setToolTip(_translate(""Dialog"", ""Specify the minimum objective function value, if it is known.""))\n        self.SHGOf_mincheckBox.setText(_translate(""Dialog"", ""f_min""))\n        self.SHGOf_minlineEdit.setToolTip(_translate(""Dialog"", ""Specify the minimum objective function value, if it is known.""))\n        self.label_39.setText(_translate(""Dialog"", ""f_tol""))\n        self.SHGOf_tollineEdit.setToolTip(_translate(""Dialog"", ""Precision goal for the value of f in the stopping criterion. Note that the global routine will also terminate if a sampling point in the global routine is within this tolerance.\\n""\n""\\n""\n""""))\n        self.SHGOmaxitercheckBox.setText(_translate(""Dialog"", ""maxiter""))\n        self.SHGOmaxiterlineEdit.setToolTip(_translate(""Dialog"", ""Maximum number of iterations to perform.""))\n        self.SHGOmaxevcheckBox.setToolTip(_translate(""Dialog"", ""Maximum number of sampling evaluations to perform (includes searching in infeasible points).""))\n        self.SHGOmaxevcheckBox.setText(_translate(""Dialog"", ""maxev""))\n        self.SHGOmaxevlineEdit.setToolTip(_translate(""Dialog"", ""Maximum number of sampling evaluations to perform (includes searching in infeasible points).""))\n        self.SHGOmaxtimecheckBox.setToolTip(_translate(""Dialog"", ""Maximum processing runtime allowed""))\n        self.SHGOmaxtimecheckBox.setText(_translate(""Dialog"", ""maxtime""))\n        self.SHGOmaxtimelineEdit.setToolTip(_translate(""Dialog"", ""Maximum processing runtime allowed""))\n        self.SHGOminhgrdcheckBox.setToolTip(_translate(""Dialog"", ""Minimum homology group rank differential. The homology group of the objective function is calculated (approximately) during every iteration. The rank of this group has a one-to-one correspondence with the number of locally convex subdomains in the objective function (after adequate sampling points each of these subdomains contain a unique global minimum). If the difference in the hgr is 0 between iterations for maxhgrd specified iterations the algorithm will terminate.""))\n        self.SHGOminhgrdcheckBox.setText(_translate(""Dialog"", ""minhgrd""))\n        self.SHGOminhgrdlineEdit.setToolTip(_translate(""Dialog"", ""Minimum homology group rank differential. The homology group of the objective function is calculated (approximately) during every iteration. The rank of this group has a one-to-one correspondence with the number of locally convex subdomains in the objective function (after adequate sampling points each of these subdomains contain a unique global minimum). If the difference in the hgr is 0 between iterations for maxhgrd specified iterations the algorithm will terminate.""))\n        self.SHGOminimize_every_itercheckBox.setToolTip(_translate(""Dialog"", ""If True then promising global sampling points will be passed to a local minimisation routine every iteration. If False then only the final minimiser pool will be run.""))\n        self.SHGOminimize_every_itercheckBox.setText(_translate(""Dialog"", ""minimize_every_iter""))\n        self.SHGOlocal_itercheckBox.setToolTip(_translate(""Dialog"", ""Only evaluate a few of the best minimiser pool candidates every iteration. If False all potential points are passed to the local minimisation routine.""))\n        self.SHGOlocal_itercheckBox.setText(_translate(""Dialog"", ""local_iter""))\n        self.SHGOinfty_constraintscheckBox.setToolTip(_translate(""Dialog"", ""If True then any sampling points generated which are outside will the feasible domain will be saved and given an objective function value of inf. If False then these points will be discarded. Using this functionality could lead to higher performance with respect to function evaluations before the global minimum is found, specifying False will use less memory at the cost of a slight decrease in performance. Defaults to True.""))\n        self.SHGOinfty_constraintscheckBox.setText(_translate(""Dialog"", ""infty_constraints""))\n        self.label_38.setText(_translate(""Dialog"", ""sampling_method""))\n        self.SHGOsampling_methodcomboBox.setToolTip(_translate(""Dialog"", ""The default simplicial uses less memory and provides the theoretical guarantee of convergence to the global minimum in finite time. The sobol method is faster in terms of sampling point generation at the cost of higher memory resources and the loss of guaranteed convergence. It is more appropriate for most \xe2\x80\x9ceasier\xe2\x80\x9d problems where the convergence is relatively fast. ""))\n        self.SHGOsampling_methodcomboBox.setItemText(0, _translate(""Dialog"", ""simplicial""))\n        self.SHGOsampling_methodcomboBox.setItemText(1, _translate(""Dialog"", ""sobol""))\n        self.tabWidget.setTabText(self.tabWidget.indexOf(self.shgo), _translate(""Dialog"", ""SHGO""))\n        self.groupBox_2.setTitle(_translate(""Dialog"", ""Brute Force""))\n        self.label_14.setText(_translate(""Dialog"", ""Minimize a function over a given range by brute force, i.e. it computes the function\xe2\x80\x99s value at each point of a multidimensional grid of points, to find the global minimum of the function. It is inefficient because the number of grid points increases exponentially - the number of grid points to evaluate is Ns ** len(x). Consequently, even with coarse grid spacing, even moderately sized problems can take a long time to run, and/or run into memory limitations.\\n""\n""\\n""\n""The program finds the gridpoint at which the lowest value of the objective function occurs. When the global minimum occurs within (or not very far outside) the grid\xe2\x80\x99s boundaries, and the grid is fine enough, that point will be in the neighborhood of the global minimum.""))\n        self.label_15.setText(_translate(""Dialog"", ""Global Method""))\n        self.label_40.setText(_translate(""Dialog"", ""Ns""))\n        self.BruteNslineEdit.setToolTip(_translate(""Dialog"", ""Number of grid points along the axes""))\n        self.tabWidget.setTabText(self.tabWidget.indexOf(self.brute), _translate(""Dialog"", ""Brute""))\n        self.pushCancel.setText(_translate(""Dialog"", ""Cancel""))\n        self.pushOK.setText(_translate(""Dialog"", ""OK""))\nimport Reptate_rc\n'"
RepTate/gui/markerSettings.py,0,"b'# -*- coding: utf-8 -*-\n\n# Form implementation generated from reading ui file \'markerSettings.ui\'\n#\n# Created by: PyQt5 UI code generator 5.14.0\n#\n# WARNING! All changes made in this file will be lost!\n\n\nfrom PyQt5 import QtCore, QtGui, QtWidgets\n\n\nclass Ui_Dialog(object):\n    def setupUi(self, Dialog):\n        Dialog.setObjectName(""Dialog"")\n        Dialog.resize(451, 582)\n        icon = QtGui.QIcon()\n        icon.addPixmap(QtGui.QPixmap("":/Images/Images/new_icons/icons8-color-wheel-2.png""), QtGui.QIcon.Normal, QtGui.QIcon.Off)\n        Dialog.setWindowIcon(icon)\n        Dialog.setLayoutDirection(QtCore.Qt.RightToLeft)\n        self.verticalLayout = QtWidgets.QVBoxLayout(Dialog)\n        self.verticalLayout.setObjectName(""verticalLayout"")\n        self.tabWidget = QtWidgets.QTabWidget(Dialog)\n        font = QtGui.QFont()\n        font.setBold(True)\n        font.setWeight(75)\n        self.tabWidget.setFont(font)\n        self.tabWidget.setLayoutDirection(QtCore.Qt.LeftToRight)\n        self.tabWidget.setObjectName(""tabWidget"")\n        self.data = QtWidgets.QWidget()\n        self.data.setObjectName(""data"")\n        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.data)\n        self.verticalLayout_6.setObjectName(""verticalLayout_6"")\n        self.groupBox = QtWidgets.QGroupBox(self.data)\n        font = QtGui.QFont()\n        font.setPointSize(13)\n        font.setBold(True)\n        font.setWeight(75)\n        self.groupBox.setFont(font)\n        self.groupBox.setLayoutDirection(QtCore.Qt.LeftToRight)\n        self.groupBox.setObjectName(""groupBox"")\n        self.horizontalLayout = QtWidgets.QHBoxLayout(self.groupBox)\n        self.horizontalLayout.setObjectName(""horizontalLayout"")\n        self.groupBox_3 = QtWidgets.QGroupBox(self.groupBox)\n        self.groupBox_3.setObjectName(""groupBox_3"")\n        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.groupBox_3)\n        self.verticalLayout_2.setObjectName(""verticalLayout_2"")\n        self.cbSymbolType = QtWidgets.QComboBox(self.groupBox_3)\n        self.cbSymbolType.setEnabled(True)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.cbSymbolType.setFont(font)\n        self.cbSymbolType.setObjectName(""cbSymbolType"")\n        self.verticalLayout_2.addWidget(self.cbSymbolType)\n        self.rbFixedSymbol = QtWidgets.QRadioButton(self.groupBox_3)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.rbFixedSymbol.setFont(font)\n        self.rbFixedSymbol.setChecked(True)\n        self.rbFixedSymbol.setObjectName(""rbFixedSymbol"")\n        self.verticalLayout_2.addWidget(self.rbFixedSymbol)\n        self.rbVariableSymbol = QtWidgets.QRadioButton(self.groupBox_3)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.rbVariableSymbol.setFont(font)\n        self.rbVariableSymbol.setChecked(False)\n        self.rbVariableSymbol.setObjectName(""rbVariableSymbol"")\n        self.verticalLayout_2.addWidget(self.rbVariableSymbol)\n        self.spinBoxLineW = QtWidgets.QDoubleSpinBox(self.groupBox_3)\n        font = QtGui.QFont()\n        font.setPointSize(13)\n        font.setBold(False)\n        font.setWeight(50)\n        self.spinBoxLineW.setFont(font)\n        self.spinBoxLineW.setDecimals(1)\n        self.spinBoxLineW.setMinimum(0.1)\n        self.spinBoxLineW.setMaximum(10.0)\n        self.spinBoxLineW.setSingleStep(0.1)\n        self.spinBoxLineW.setProperty(""value"", 1.0)\n        self.spinBoxLineW.setObjectName(""spinBoxLineW"")\n        self.verticalLayout_2.addWidget(self.spinBoxLineW)\n        self.horizontalLayout.addWidget(self.groupBox_3)\n        self.groupBox_4 = QtWidgets.QGroupBox(self.groupBox)\n        self.groupBox_4.setObjectName(""groupBox_4"")\n        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.groupBox_4)\n        self.verticalLayout_3.setObjectName(""verticalLayout_3"")\n        self.spinBox = QtWidgets.QSpinBox(self.groupBox_4)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.spinBox.setFont(font)\n        self.spinBox.setMaximum(40)\n        self.spinBox.setSingleStep(3)\n        self.spinBox.setProperty(""value"", 12)\n        self.spinBox.setObjectName(""spinBox"")\n        self.verticalLayout_3.addWidget(self.spinBox)\n        self.rbEmpty = QtWidgets.QRadioButton(self.groupBox_4)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.rbEmpty.setFont(font)\n        self.rbEmpty.setChecked(True)\n        self.rbEmpty.setObjectName(""rbEmpty"")\n        self.verticalLayout_3.addWidget(self.rbEmpty)\n        self.rbFilled = QtWidgets.QRadioButton(self.groupBox_4)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.rbFilled.setFont(font)\n        self.rbFilled.setObjectName(""rbFilled"")\n        self.verticalLayout_3.addWidget(self.rbFilled)\n        self.horizontalLayout.addWidget(self.groupBox_4)\n        self.verticalLayout_6.addWidget(self.groupBox)\n        self.groupBox_2 = QtWidgets.QGroupBox(self.data)\n        font = QtGui.QFont()\n        font.setPointSize(13)\n        font.setBold(True)\n        font.setWeight(75)\n        self.groupBox_2.setFont(font)\n        self.groupBox_2.setLayoutDirection(QtCore.Qt.LeftToRight)\n        self.groupBox_2.setObjectName(""groupBox_2"")\n        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.groupBox_2)\n        self.horizontalLayout_3.setObjectName(""horizontalLayout_3"")\n        self.groupBox_5 = QtWidgets.QGroupBox(self.groupBox_2)\n        self.groupBox_5.setObjectName(""groupBox_5"")\n        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.groupBox_5)\n        self.verticalLayout_5.setObjectName(""verticalLayout_5"")\n        self.rbFixedColor = QtWidgets.QRadioButton(self.groupBox_5)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.rbFixedColor.setFont(font)\n        self.rbFixedColor.setObjectName(""rbFixedColor"")\n        self.verticalLayout_5.addWidget(self.rbFixedColor)\n        self.rbGradientColor = QtWidgets.QRadioButton(self.groupBox_5)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.rbGradientColor.setFont(font)\n        self.rbGradientColor.setObjectName(""rbGradientColor"")\n        self.verticalLayout_5.addWidget(self.rbGradientColor)\n        self.rbPalette = QtWidgets.QRadioButton(self.groupBox_5)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.rbPalette.setFont(font)\n        self.rbPalette.setChecked(True)\n        self.rbPalette.setObjectName(""rbPalette"")\n        self.verticalLayout_5.addWidget(self.rbPalette)\n        self.horizontalLayout_3.addWidget(self.groupBox_5)\n        self.groupBox_6 = QtWidgets.QGroupBox(self.groupBox_2)\n        self.groupBox_6.setObjectName(""groupBox_6"")\n        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.groupBox_6)\n        self.verticalLayout_4.setObjectName(""verticalLayout_4"")\n        self.gridLayout = QtWidgets.QGridLayout()\n        self.gridLayout.setObjectName(""gridLayout"")\n        self.pickColor1 = QtWidgets.QToolButton(self.groupBox_6)\n        self.pickColor1.setEnabled(False)\n        self.pickColor1.setObjectName(""pickColor1"")\n        self.gridLayout.addWidget(self.pickColor1, 0, 2, 1, 1)\n        self.labelPickedColor1 = QtWidgets.QLabel(self.groupBox_6)\n        self.labelPickedColor1.setEnabled(False)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.labelPickedColor1.setFont(font)\n        self.labelPickedColor1.setText("""")\n        self.labelPickedColor1.setObjectName(""labelPickedColor1"")\n        self.gridLayout.addWidget(self.labelPickedColor1, 0, 1, 1, 1)\n        self.label_4 = QtWidgets.QLabel(self.groupBox_6)\n        self.label_4.setEnabled(False)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.label_4.setFont(font)\n        self.label_4.setObjectName(""label_4"")\n        self.gridLayout.addWidget(self.label_4, 0, 0, 1, 1)\n        self.verticalLayout_4.addLayout(self.gridLayout)\n        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()\n        self.horizontalLayout_4.setObjectName(""horizontalLayout_4"")\n        self.label_5 = QtWidgets.QLabel(self.groupBox_6)\n        self.label_5.setEnabled(False)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.label_5.setFont(font)\n        self.label_5.setObjectName(""label_5"")\n        self.horizontalLayout_4.addWidget(self.label_5)\n        self.labelPickedColor2 = QtWidgets.QLabel(self.groupBox_6)\n        self.labelPickedColor2.setEnabled(False)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.labelPickedColor2.setFont(font)\n        self.labelPickedColor2.setText("""")\n        self.labelPickedColor2.setObjectName(""labelPickedColor2"")\n        self.horizontalLayout_4.addWidget(self.labelPickedColor2)\n        self.pickColor2 = QtWidgets.QToolButton(self.groupBox_6)\n        self.pickColor2.setEnabled(False)\n        self.pickColor2.setObjectName(""pickColor2"")\n        self.horizontalLayout_4.addWidget(self.pickColor2)\n        self.verticalLayout_4.addLayout(self.horizontalLayout_4)\n        self.cbPalette = QtWidgets.QComboBox(self.groupBox_6)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.cbPalette.setFont(font)\n        self.cbPalette.setObjectName(""cbPalette"")\n        self.verticalLayout_4.addWidget(self.cbPalette)\n        self.horizontalLayout_3.addWidget(self.groupBox_6)\n        self.verticalLayout_6.addWidget(self.groupBox_2)\n        self.tabWidget.addTab(self.data, """")\n        self.theory = QtWidgets.QWidget()\n        self.theory.setObjectName(""theory"")\n        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.theory)\n        self.verticalLayout_10.setObjectName(""verticalLayout_10"")\n        self.groupBox_8 = QtWidgets.QGroupBox(self.theory)\n        self.groupBox_8.setObjectName(""groupBox_8"")\n        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.groupBox_8)\n        self.verticalLayout_7.setObjectName(""verticalLayout_7"")\n        self.cbTheoryLine = QtWidgets.QComboBox(self.groupBox_8)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.cbTheoryLine.setFont(font)\n        self.cbTheoryLine.setObjectName(""cbTheoryLine"")\n        self.verticalLayout_7.addWidget(self.cbTheoryLine)\n        self.sbThLineWidth = QtWidgets.QDoubleSpinBox(self.groupBox_8)\n        font = QtGui.QFont()\n        font.setPointSize(13)\n        font.setBold(False)\n        font.setWeight(50)\n        self.sbThLineWidth.setFont(font)\n        self.sbThLineWidth.setDecimals(1)\n        self.sbThLineWidth.setMinimum(0.1)\n        self.sbThLineWidth.setMaximum(10.0)\n        self.sbThLineWidth.setSingleStep(0.1)\n        self.sbThLineWidth.setProperty(""value"", 1.0)\n        self.sbThLineWidth.setObjectName(""sbThLineWidth"")\n        self.verticalLayout_7.addWidget(self.sbThLineWidth)\n        self.verticalLayout_10.addWidget(self.groupBox_8)\n        self.groupBox_10 = QtWidgets.QGroupBox(self.theory)\n        self.groupBox_10.setObjectName(""groupBox_10"")\n        self.verticalLayout_13 = QtWidgets.QVBoxLayout(self.groupBox_10)\n        self.verticalLayout_13.setObjectName(""verticalLayout_13"")\n        self.verticalLayout_8 = QtWidgets.QVBoxLayout()\n        self.verticalLayout_8.setObjectName(""verticalLayout_8"")\n        self.rbThSameColor = QtWidgets.QRadioButton(self.groupBox_10)\n        font = QtGui.QFont()\n        font.setPointSize(13)\n        font.setBold(False)\n        font.setWeight(50)\n        self.rbThSameColor.setFont(font)\n        self.rbThSameColor.setObjectName(""rbThSameColor"")\n        self.verticalLayout_8.addWidget(self.rbThSameColor)\n        self.rbThFixedColor = QtWidgets.QRadioButton(self.groupBox_10)\n        font = QtGui.QFont()\n        font.setPointSize(13)\n        font.setBold(False)\n        font.setWeight(50)\n        self.rbThFixedColor.setFont(font)\n        self.rbThFixedColor.setObjectName(""rbThFixedColor"")\n        self.verticalLayout_8.addWidget(self.rbThFixedColor)\n        self.verticalLayout_13.addLayout(self.verticalLayout_8)\n        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()\n        self.horizontalLayout_6.setObjectName(""horizontalLayout_6"")\n        self.labelThcol = QtWidgets.QLabel(self.groupBox_10)\n        self.labelThcol.setObjectName(""labelThcol"")\n        self.horizontalLayout_6.addWidget(self.labelThcol)\n        self.labelThPickedColor = QtWidgets.QLabel(self.groupBox_10)\n        self.labelThPickedColor.setText("""")\n        self.labelThPickedColor.setObjectName(""labelThPickedColor"")\n        self.horizontalLayout_6.addWidget(self.labelThPickedColor)\n        self.pickThColor = QtWidgets.QToolButton(self.groupBox_10)\n        self.pickThColor.setObjectName(""pickThColor"")\n        self.horizontalLayout_6.addWidget(self.pickThColor)\n        self.verticalLayout_13.addLayout(self.horizontalLayout_6)\n        self.verticalLayout_10.addWidget(self.groupBox_10)\n        self.tabWidget.addTab(self.theory, """")\n        self.legend = QtWidgets.QWidget()\n        self.legend.setObjectName(""legend"")\n        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.legend)\n        self.verticalLayout_9.setObjectName(""verticalLayout_9"")\n        self.cb_show_legend = QtWidgets.QCheckBox(self.legend)\n        self.cb_show_legend.setChecked(False)\n        self.cb_show_legend.setTristate(False)\n        self.cb_show_legend.setObjectName(""cb_show_legend"")\n        self.verticalLayout_9.addWidget(self.cb_show_legend)\n        self.groupBox_7 = QtWidgets.QGroupBox(self.legend)\n        self.groupBox_7.setObjectName(""groupBox_7"")\n        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.groupBox_7)\n        self.verticalLayout_11.setContentsMargins(-1, 0, -1, 0)\n        self.verticalLayout_11.setSpacing(0)\n        self.verticalLayout_11.setObjectName(""verticalLayout_11"")\n        self.frameLocation = QtWidgets.QFrame(self.groupBox_7)\n        self.frameLocation.setFrameShape(QtWidgets.QFrame.NoFrame)\n        self.frameLocation.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frameLocation.setObjectName(""frameLocation"")\n        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frameLocation)\n        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout_2.setSpacing(0)\n        self.horizontalLayout_2.setObjectName(""horizontalLayout_2"")\n        self.label = QtWidgets.QLabel(self.frameLocation)\n        self.label.setObjectName(""label"")\n        self.horizontalLayout_2.addWidget(self.label)\n        self.locationComboBox = QtWidgets.QComboBox(self.frameLocation)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.locationComboBox.setFont(font)\n        self.locationComboBox.setObjectName(""locationComboBox"")\n        self.locationComboBox.addItem("""")\n        self.locationComboBox.addItem("""")\n        self.locationComboBox.addItem("""")\n        self.locationComboBox.addItem("""")\n        self.locationComboBox.addItem("""")\n        self.locationComboBox.addItem("""")\n        self.locationComboBox.addItem("""")\n        self.locationComboBox.addItem("""")\n        self.locationComboBox.addItem("""")\n        self.locationComboBox.addItem("""")\n        self.locationComboBox.addItem("""")\n        self.horizontalLayout_2.addWidget(self.locationComboBox)\n        self.verticalLayout_11.addWidget(self.frameLocation)\n        self.frameColumns = QtWidgets.QFrame(self.groupBox_7)\n        self.frameColumns.setFrameShape(QtWidgets.QFrame.NoFrame)\n        self.frameColumns.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frameColumns.setObjectName(""frameColumns"")\n        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.frameColumns)\n        self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout_7.setSpacing(0)\n        self.horizontalLayout_7.setObjectName(""horizontalLayout_7"")\n        self.label_2 = QtWidgets.QLabel(self.frameColumns)\n        self.label_2.setObjectName(""label_2"")\n        self.horizontalLayout_7.addWidget(self.label_2)\n        self.colSpinBox = QtWidgets.QSpinBox(self.frameColumns)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.colSpinBox.setFont(font)\n        self.colSpinBox.setMinimum(1)\n        self.colSpinBox.setMaximum(10)\n        self.colSpinBox.setObjectName(""colSpinBox"")\n        self.horizontalLayout_7.addWidget(self.colSpinBox)\n        self.verticalLayout_11.addWidget(self.frameColumns)\n        self.frameFont = QtWidgets.QFrame(self.groupBox_7)\n        self.frameFont.setFrameShape(QtWidgets.QFrame.NoFrame)\n        self.frameFont.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frameFont.setObjectName(""frameFont"")\n        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.frameFont)\n        self.horizontalLayout_8.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout_8.setSpacing(0)\n        self.horizontalLayout_8.setObjectName(""horizontalLayout_8"")\n        self.label_3 = QtWidgets.QLabel(self.frameFont)\n        self.label_3.setObjectName(""label_3"")\n        self.horizontalLayout_8.addWidget(self.label_3)\n        self.fontsizeSpinBox = QtWidgets.QSpinBox(self.frameFont)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.fontsizeSpinBox.setFont(font)\n        self.fontsizeSpinBox.setMinimum(1)\n        self.fontsizeSpinBox.setObjectName(""fontsizeSpinBox"")\n        self.horizontalLayout_8.addWidget(self.fontsizeSpinBox)\n        self.verticalLayout_11.addWidget(self.frameFont)\n        self.frameBoolean = QtWidgets.QFrame(self.groupBox_7)\n        self.frameBoolean.setFrameShape(QtWidgets.QFrame.NoFrame)\n        self.frameBoolean.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frameBoolean.setObjectName(""frameBoolean"")\n        self.gridLayout_2 = QtWidgets.QGridLayout(self.frameBoolean)\n        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)\n        self.gridLayout_2.setSpacing(0)\n        self.gridLayout_2.setObjectName(""gridLayout_2"")\n        self.fancyboxCheckBox = QtWidgets.QCheckBox(self.frameBoolean)\n        self.fancyboxCheckBox.setObjectName(""fancyboxCheckBox"")\n        self.gridLayout_2.addWidget(self.fancyboxCheckBox, 2, 0, 1, 1)\n        self.markerfirstCheckBox = QtWidgets.QCheckBox(self.frameBoolean)\n        self.markerfirstCheckBox.setObjectName(""markerfirstCheckBox"")\n        self.gridLayout_2.addWidget(self.markerfirstCheckBox, 0, 0, 1, 1)\n        self.modeCheckBox = QtWidgets.QCheckBox(self.frameBoolean)\n        self.modeCheckBox.setObjectName(""modeCheckBox"")\n        self.gridLayout_2.addWidget(self.modeCheckBox, 9, 0, 1, 1)\n        self.shadowCheckBox = QtWidgets.QCheckBox(self.frameBoolean)\n        self.shadowCheckBox.setObjectName(""shadowCheckBox"")\n        self.gridLayout_2.addWidget(self.shadowCheckBox, 3, 0, 1, 1)\n        self.frameColors = QtWidgets.QFrame(self.frameBoolean)\n        self.frameColors.setFrameShape(QtWidgets.QFrame.NoFrame)\n        self.frameColors.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frameColors.setObjectName(""frameColors"")\n        self.horizontalLayout_10 = QtWidgets.QHBoxLayout(self.frameColors)\n        self.horizontalLayout_10.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout_10.setSpacing(20)\n        self.horizontalLayout_10.setObjectName(""horizontalLayout_10"")\n        self.horizontalLayout_17 = QtWidgets.QHBoxLayout()\n        self.horizontalLayout_17.setSpacing(0)\n        self.horizontalLayout_17.setObjectName(""horizontalLayout_17"")\n        self.facecolorCheckBox = QtWidgets.QCheckBox(self.frameColors)\n        self.facecolorCheckBox.setObjectName(""facecolorCheckBox"")\n        self.horizontalLayout_17.addWidget(self.facecolorCheckBox)\n        self.labelFaceColor = QtWidgets.QLabel(self.frameColors)\n        self.labelFaceColor.setEnabled(False)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.labelFaceColor.setFont(font)\n        self.labelFaceColor.setText("""")\n        self.labelFaceColor.setObjectName(""labelFaceColor"")\n        self.horizontalLayout_17.addWidget(self.labelFaceColor)\n        self.pickFaceColor = QtWidgets.QToolButton(self.frameColors)\n        self.pickFaceColor.setEnabled(False)\n        self.pickFaceColor.setObjectName(""pickFaceColor"")\n        self.horizontalLayout_17.addWidget(self.pickFaceColor)\n        self.horizontalLayout_10.addLayout(self.horizontalLayout_17)\n        self.horizontalLayout_18 = QtWidgets.QHBoxLayout()\n        self.horizontalLayout_18.setSpacing(0)\n        self.horizontalLayout_18.setObjectName(""horizontalLayout_18"")\n        self.edgecolorCheckBox = QtWidgets.QCheckBox(self.frameColors)\n        self.edgecolorCheckBox.setObjectName(""edgecolorCheckBox"")\n        self.horizontalLayout_18.addWidget(self.edgecolorCheckBox)\n        self.labelEdgeColor = QtWidgets.QLabel(self.frameColors)\n        self.labelEdgeColor.setEnabled(False)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.labelEdgeColor.setFont(font)\n        self.labelEdgeColor.setText("""")\n        self.labelEdgeColor.setObjectName(""labelEdgeColor"")\n        self.horizontalLayout_18.addWidget(self.labelEdgeColor)\n        self.pickEdgeColor = QtWidgets.QToolButton(self.frameColors)\n        self.pickEdgeColor.setEnabled(False)\n        self.pickEdgeColor.setObjectName(""pickEdgeColor"")\n        self.horizontalLayout_18.addWidget(self.pickEdgeColor)\n        self.horizontalLayout_10.addLayout(self.horizontalLayout_18)\n        self.gridLayout_2.addWidget(self.frameColors, 7, 0, 1, 1)\n        self.frameTransparency = QtWidgets.QFrame(self.frameBoolean)\n        self.frameTransparency.setFrameShape(QtWidgets.QFrame.NoFrame)\n        self.frameTransparency.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frameTransparency.setObjectName(""frameTransparency"")\n        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.frameTransparency)\n        self.horizontalLayout_9.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout_9.setSpacing(0)\n        self.horizontalLayout_9.setObjectName(""horizontalLayout_9"")\n        self.framealphaCheckBox = QtWidgets.QCheckBox(self.frameTransparency)\n        self.framealphaCheckBox.setObjectName(""framealphaCheckBox"")\n        self.horizontalLayout_9.addWidget(self.framealphaCheckBox)\n        self.framealphaSpinBox = QtWidgets.QDoubleSpinBox(self.frameTransparency)\n        self.framealphaSpinBox.setEnabled(False)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.framealphaSpinBox.setFont(font)\n        self.framealphaSpinBox.setMaximum(1.0)\n        self.framealphaSpinBox.setSingleStep(0.05)\n        self.framealphaSpinBox.setObjectName(""framealphaSpinBox"")\n        self.horizontalLayout_9.addWidget(self.framealphaSpinBox)\n        self.gridLayout_2.addWidget(self.frameTransparency, 4, 0, 1, 1)\n        self.frameonCheckBox = QtWidgets.QCheckBox(self.frameBoolean)\n        self.frameonCheckBox.setObjectName(""frameonCheckBox"")\n        self.gridLayout_2.addWidget(self.frameonCheckBox, 1, 0, 1, 1)\n        self.verticalLayout_11.addWidget(self.frameBoolean)\n        self.frameTitle = QtWidgets.QFrame(self.groupBox_7)\n        self.frameTitle.setFrameShape(QtWidgets.QFrame.NoFrame)\n        self.frameTitle.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frameTitle.setObjectName(""frameTitle"")\n        self.horizontalLayout_11 = QtWidgets.QHBoxLayout(self.frameTitle)\n        self.horizontalLayout_11.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout_11.setObjectName(""horizontalLayout_11"")\n        self.legendtitleCheckBox = QtWidgets.QCheckBox(self.frameTitle)\n        self.legendtitleCheckBox.setObjectName(""legendtitleCheckBox"")\n        self.horizontalLayout_11.addWidget(self.legendtitleCheckBox)\n        self.legendtitleStr = QtWidgets.QLineEdit(self.frameTitle)\n        self.legendtitleStr.setEnabled(False)\n        self.legendtitleStr.setObjectName(""legendtitleStr"")\n        self.horizontalLayout_11.addWidget(self.legendtitleStr)\n        self.verticalLayout_11.addWidget(self.frameTitle)\n        self.borderpadframe = QtWidgets.QFrame(self.groupBox_7)\n        self.borderpadframe.setFrameShape(QtWidgets.QFrame.NoFrame)\n        self.borderpadframe.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.borderpadframe.setObjectName(""borderpadframe"")\n        self.horizontalLayout_13 = QtWidgets.QHBoxLayout(self.borderpadframe)\n        self.horizontalLayout_13.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout_13.setSpacing(0)\n        self.horizontalLayout_13.setObjectName(""horizontalLayout_13"")\n        self.borderpadCheckBox = QtWidgets.QCheckBox(self.borderpadframe)\n        self.borderpadCheckBox.setObjectName(""borderpadCheckBox"")\n        self.horizontalLayout_13.addWidget(self.borderpadCheckBox)\n        self.borderpadSpinBox = QtWidgets.QDoubleSpinBox(self.borderpadframe)\n        self.borderpadSpinBox.setEnabled(False)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.borderpadSpinBox.setFont(font)\n        self.borderpadSpinBox.setMaximum(1.0)\n        self.borderpadSpinBox.setSingleStep(0.05)\n        self.borderpadSpinBox.setObjectName(""borderpadSpinBox"")\n        self.horizontalLayout_13.addWidget(self.borderpadSpinBox)\n        self.verticalLayout_11.addWidget(self.borderpadframe)\n        self.frame = QtWidgets.QFrame(self.groupBox_7)\n        self.frame.setFrameShape(QtWidgets.QFrame.NoFrame)\n        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame.setObjectName(""frame"")\n        self.horizontalLayout_14 = QtWidgets.QHBoxLayout(self.frame)\n        self.horizontalLayout_14.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout_14.setSpacing(0)\n        self.horizontalLayout_14.setObjectName(""horizontalLayout_14"")\n        self.labelspacingCheckBox = QtWidgets.QCheckBox(self.frame)\n        self.labelspacingCheckBox.setObjectName(""labelspacingCheckBox"")\n        self.horizontalLayout_14.addWidget(self.labelspacingCheckBox)\n        self.labelspacingSpinBox = QtWidgets.QDoubleSpinBox(self.frame)\n        self.labelspacingSpinBox.setEnabled(False)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.labelspacingSpinBox.setFont(font)\n        self.labelspacingSpinBox.setMaximum(2.0)\n        self.labelspacingSpinBox.setSingleStep(0.1)\n        self.labelspacingSpinBox.setObjectName(""labelspacingSpinBox"")\n        self.horizontalLayout_14.addWidget(self.labelspacingSpinBox)\n        self.verticalLayout_11.addWidget(self.frame)\n        self.frame_2 = QtWidgets.QFrame(self.groupBox_7)\n        self.frame_2.setFrameShape(QtWidgets.QFrame.NoFrame)\n        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_2.setObjectName(""frame_2"")\n        self.horizontalLayout_15 = QtWidgets.QHBoxLayout(self.frame_2)\n        self.horizontalLayout_15.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout_15.setSpacing(0)\n        self.horizontalLayout_15.setObjectName(""horizontalLayout_15"")\n        self.handletextpadCheckBox = QtWidgets.QCheckBox(self.frame_2)\n        self.handletextpadCheckBox.setObjectName(""handletextpadCheckBox"")\n        self.horizontalLayout_15.addWidget(self.handletextpadCheckBox)\n        self.handletextpadSpinBox = QtWidgets.QDoubleSpinBox(self.frame_2)\n        self.handletextpadSpinBox.setEnabled(False)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.handletextpadSpinBox.setFont(font)\n        self.handletextpadSpinBox.setMaximum(4.0)\n        self.handletextpadSpinBox.setSingleStep(0.1)\n        self.handletextpadSpinBox.setObjectName(""handletextpadSpinBox"")\n        self.horizontalLayout_15.addWidget(self.handletextpadSpinBox)\n        self.verticalLayout_11.addWidget(self.frame_2)\n        self.frame_3 = QtWidgets.QFrame(self.groupBox_7)\n        self.frame_3.setFrameShape(QtWidgets.QFrame.NoFrame)\n        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_3.setObjectName(""frame_3"")\n        self.horizontalLayout_16 = QtWidgets.QHBoxLayout(self.frame_3)\n        self.horizontalLayout_16.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout_16.setSpacing(0)\n        self.horizontalLayout_16.setObjectName(""horizontalLayout_16"")\n        self.columnspacingCheckBox = QtWidgets.QCheckBox(self.frame_3)\n        self.columnspacingCheckBox.setObjectName(""columnspacingCheckBox"")\n        self.horizontalLayout_16.addWidget(self.columnspacingCheckBox)\n        self.columnspacingSpinBox = QtWidgets.QDoubleSpinBox(self.frame_3)\n        self.columnspacingSpinBox.setEnabled(False)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.columnspacingSpinBox.setFont(font)\n        self.columnspacingSpinBox.setMaximum(10.0)\n        self.columnspacingSpinBox.setSingleStep(0.25)\n        self.columnspacingSpinBox.setObjectName(""columnspacingSpinBox"")\n        self.horizontalLayout_16.addWidget(self.columnspacingSpinBox)\n        self.verticalLayout_11.addWidget(self.frame_3)\n        self.frameLabelString = QtWidgets.QFrame(self.groupBox_7)\n        self.frameLabelString.setFrameShape(QtWidgets.QFrame.NoFrame)\n        self.frameLabelString.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frameLabelString.setObjectName(""frameLabelString"")\n        self.horizontalLayout_12 = QtWidgets.QHBoxLayout(self.frameLabelString)\n        self.horizontalLayout_12.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout_12.setObjectName(""horizontalLayout_12"")\n        self.legendlabelCheckBox = QtWidgets.QCheckBox(self.frameLabelString)\n        self.legendlabelCheckBox.setObjectName(""legendlabelCheckBox"")\n        self.horizontalLayout_12.addWidget(self.legendlabelCheckBox)\n        self.legendlabelStr = QtWidgets.QLineEdit(self.frameLabelString)\n        self.legendlabelStr.setEnabled(False)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.legendlabelStr.setFont(font)\n        self.legendlabelStr.setObjectName(""legendlabelStr"")\n        self.horizontalLayout_12.addWidget(self.legendlabelStr)\n        self.verticalLayout_11.addWidget(self.frameLabelString)\n        self.draggableCheckBox = QtWidgets.QCheckBox(self.groupBox_7)\n        self.draggableCheckBox.setObjectName(""draggableCheckBox"")\n        self.verticalLayout_11.addWidget(self.draggableCheckBox)\n        self.verticalLayout_9.addWidget(self.groupBox_7)\n        self.tabWidget.addTab(self.legend, """")\n        self.annotations = QtWidgets.QWidget()\n        self.annotations.setObjectName(""annotations"")\n        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.annotations)\n        self.verticalLayout_12.setObjectName(""verticalLayout_12"")\n        self.groupBox_9 = QtWidgets.QGroupBox(self.annotations)\n        self.groupBox_9.setObjectName(""groupBox_9"")\n        self.verticalLayout_14 = QtWidgets.QVBoxLayout(self.groupBox_9)\n        self.verticalLayout_14.setContentsMargins(-1, 0, -1, 0)\n        self.verticalLayout_14.setSpacing(0)\n        self.verticalLayout_14.setObjectName(""verticalLayout_14"")\n        self.frame_5 = QtWidgets.QFrame(self.groupBox_9)\n        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_5.setObjectName(""frame_5"")\n        self.verticalLayout_15 = QtWidgets.QVBoxLayout(self.frame_5)\n        self.verticalLayout_15.setObjectName(""verticalLayout_15"")\n        self.frame_7 = QtWidgets.QFrame(self.frame_5)\n        self.frame_7.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_7.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_7.setObjectName(""frame_7"")\n        self.horizontalLayout_21 = QtWidgets.QHBoxLayout(self.frame_7)\n        self.horizontalLayout_21.setObjectName(""horizontalLayout_21"")\n        self.label_10 = QtWidgets.QLabel(self.frame_7)\n        self.label_10.setObjectName(""label_10"")\n        self.horizontalLayout_21.addWidget(self.label_10)\n        self.rotationSpinBox = QtWidgets.QDoubleSpinBox(self.frame_7)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.rotationSpinBox.setFont(font)\n        self.rotationSpinBox.setDecimals(1)\n        self.rotationSpinBox.setMaximum(360.0)\n        self.rotationSpinBox.setObjectName(""rotationSpinBox"")\n        self.horizontalLayout_21.addWidget(self.rotationSpinBox)\n        self.verticalLayout_15.addWidget(self.frame_7)\n        self.verticalLayout_14.addWidget(self.frame_5)\n        self.frame_8 = QtWidgets.QFrame(self.groupBox_9)\n        self.frame_8.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_8.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_8.setObjectName(""frame_8"")\n        self.verticalLayout_16 = QtWidgets.QVBoxLayout(self.frame_8)\n        self.verticalLayout_16.setObjectName(""verticalLayout_16"")\n        self.label_11 = QtWidgets.QLabel(self.frame_8)\n        self.label_11.setObjectName(""label_11"")\n        self.verticalLayout_16.addWidget(self.label_11)\n        self.frame_9 = QtWidgets.QFrame(self.frame_8)\n        self.frame_9.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_9.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_9.setObjectName(""frame_9"")\n        self.horizontalLayout_22 = QtWidgets.QHBoxLayout(self.frame_9)\n        self.horizontalLayout_22.setObjectName(""horizontalLayout_22"")\n        self.label_12 = QtWidgets.QLabel(self.frame_9)\n        self.label_12.setObjectName(""label_12"")\n        self.horizontalLayout_22.addWidget(self.label_12)\n        self.hacomboBox = QtWidgets.QComboBox(self.frame_9)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.hacomboBox.setFont(font)\n        self.hacomboBox.setObjectName(""hacomboBox"")\n        self.hacomboBox.addItem("""")\n        self.hacomboBox.addItem("""")\n        self.hacomboBox.addItem("""")\n        self.horizontalLayout_22.addWidget(self.hacomboBox)\n        self.label_13 = QtWidgets.QLabel(self.frame_9)\n        self.label_13.setObjectName(""label_13"")\n        self.horizontalLayout_22.addWidget(self.label_13)\n        self.vacomboBox = QtWidgets.QComboBox(self.frame_9)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.vacomboBox.setFont(font)\n        self.vacomboBox.setObjectName(""vacomboBox"")\n        self.vacomboBox.addItem("""")\n        self.vacomboBox.addItem("""")\n        self.vacomboBox.addItem("""")\n        self.vacomboBox.addItem("""")\n        self.horizontalLayout_22.addWidget(self.vacomboBox)\n        self.verticalLayout_16.addWidget(self.frame_9)\n        self.verticalLayout_14.addWidget(self.frame_8)\n        self.frame_10 = QtWidgets.QFrame(self.groupBox_9)\n        self.frame_10.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_10.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_10.setObjectName(""frame_10"")\n        self.horizontalLayout_25 = QtWidgets.QHBoxLayout(self.frame_10)\n        self.horizontalLayout_25.setObjectName(""horizontalLayout_25"")\n        self.horizontalLayout_23 = QtWidgets.QHBoxLayout()\n        self.horizontalLayout_23.setSpacing(0)\n        self.horizontalLayout_23.setObjectName(""horizontalLayout_23"")\n        self.label_7 = QtWidgets.QLabel(self.frame_10)\n        self.label_7.setObjectName(""label_7"")\n        self.horizontalLayout_23.addWidget(self.label_7)\n        self.labelFontColor = QtWidgets.QLabel(self.frame_10)\n        self.labelFontColor.setEnabled(False)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.labelFontColor.setFont(font)\n        self.labelFontColor.setText("""")\n        self.labelFontColor.setObjectName(""labelFontColor"")\n        self.horizontalLayout_23.addWidget(self.labelFontColor)\n        self.pickFontColor = QtWidgets.QToolButton(self.frame_10)\n        self.pickFontColor.setEnabled(True)\n        self.pickFontColor.setObjectName(""pickFontColor"")\n        self.horizontalLayout_23.addWidget(self.pickFontColor)\n        self.horizontalLayout_25.addLayout(self.horizontalLayout_23)\n        self.verticalLayout_14.addWidget(self.frame_10)\n        self.frame_11 = QtWidgets.QFrame(self.groupBox_9)\n        self.frame_11.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_11.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_11.setObjectName(""frame_11"")\n        self.horizontalLayout_26 = QtWidgets.QHBoxLayout(self.frame_11)\n        self.horizontalLayout_26.setObjectName(""horizontalLayout_26"")\n        self.label_14 = QtWidgets.QLabel(self.frame_11)\n        self.label_14.setObjectName(""label_14"")\n        self.horizontalLayout_26.addWidget(self.label_14)\n        self.fontweightComboBox = QtWidgets.QComboBox(self.frame_11)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.fontweightComboBox.setFont(font)\n        self.fontweightComboBox.setObjectName(""fontweightComboBox"")\n        self.fontweightComboBox.addItem("""")\n        self.fontweightComboBox.addItem("""")\n        self.fontweightComboBox.addItem("""")\n        self.fontweightComboBox.addItem("""")\n        self.fontweightComboBox.addItem("""")\n        self.fontweightComboBox.addItem("""")\n        self.fontweightComboBox.addItem("""")\n        self.fontweightComboBox.addItem("""")\n        self.fontweightComboBox.addItem("""")\n        self.fontweightComboBox.addItem("""")\n        self.fontweightComboBox.addItem("""")\n        self.fontweightComboBox.addItem("""")\n        self.fontweightComboBox.addItem("""")\n        self.fontweightComboBox.addItem("""")\n        self.horizontalLayout_26.addWidget(self.fontweightComboBox)\n        self.label_15 = QtWidgets.QLabel(self.frame_11)\n        self.label_15.setObjectName(""label_15"")\n        self.horizontalLayout_26.addWidget(self.label_15)\n        self.fontstyleComboBox = QtWidgets.QComboBox(self.frame_11)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.fontstyleComboBox.setFont(font)\n        self.fontstyleComboBox.setObjectName(""fontstyleComboBox"")\n        self.fontstyleComboBox.addItem("""")\n        self.fontstyleComboBox.addItem("""")\n        self.fontstyleComboBox.addItem("""")\n        self.horizontalLayout_26.addWidget(self.fontstyleComboBox)\n        self.verticalLayout_14.addWidget(self.frame_11)\n        self.frame_12 = QtWidgets.QFrame(self.groupBox_9)\n        self.frame_12.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_12.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_12.setObjectName(""frame_12"")\n        self.horizontalLayout_27 = QtWidgets.QHBoxLayout(self.frame_12)\n        self.horizontalLayout_27.setObjectName(""horizontalLayout_27"")\n        self.label_16 = QtWidgets.QLabel(self.frame_12)\n        self.label_16.setObjectName(""label_16"")\n        self.horizontalLayout_27.addWidget(self.label_16)\n        self.fontsizeannotationSpinBox = QtWidgets.QSpinBox(self.frame_12)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.fontsizeannotationSpinBox.setFont(font)\n        self.fontsizeannotationSpinBox.setMinimum(1)\n        self.fontsizeannotationSpinBox.setObjectName(""fontsizeannotationSpinBox"")\n        self.horizontalLayout_27.addWidget(self.fontsizeannotationSpinBox)\n        self.verticalLayout_14.addWidget(self.frame_12)\n        self.frame_13 = QtWidgets.QFrame(self.groupBox_9)\n        self.frame_13.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_13.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_13.setObjectName(""frame_13"")\n        self.horizontalLayout_28 = QtWidgets.QHBoxLayout(self.frame_13)\n        self.horizontalLayout_28.setObjectName(""horizontalLayout_28"")\n        self.label_6 = QtWidgets.QLabel(self.frame_13)\n        self.label_6.setObjectName(""label_6"")\n        self.horizontalLayout_28.addWidget(self.label_6)\n        self.framealphaannotationSpinBox = QtWidgets.QDoubleSpinBox(self.frame_13)\n        self.framealphaannotationSpinBox.setEnabled(True)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.framealphaannotationSpinBox.setFont(font)\n        self.framealphaannotationSpinBox.setMaximum(1.0)\n        self.framealphaannotationSpinBox.setSingleStep(0.05)\n        self.framealphaannotationSpinBox.setObjectName(""framealphaannotationSpinBox"")\n        self.horizontalLayout_28.addWidget(self.framealphaannotationSpinBox)\n        self.verticalLayout_14.addWidget(self.frame_13)\n        self.frame_14 = QtWidgets.QFrame(self.groupBox_9)\n        self.frame_14.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.frame_14.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.frame_14.setObjectName(""frame_14"")\n        self.horizontalLayout_29 = QtWidgets.QHBoxLayout(self.frame_14)\n        self.horizontalLayout_29.setObjectName(""horizontalLayout_29"")\n        self.label_17 = QtWidgets.QLabel(self.frame_14)\n        self.label_17.setObjectName(""label_17"")\n        self.horizontalLayout_29.addWidget(self.label_17)\n        self.fontfamilyComboBox = QtWidgets.QComboBox(self.frame_14)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.fontfamilyComboBox.setFont(font)\n        self.fontfamilyComboBox.setObjectName(""fontfamilyComboBox"")\n        self.fontfamilyComboBox.addItem("""")\n        self.fontfamilyComboBox.addItem("""")\n        self.fontfamilyComboBox.addItem("""")\n        self.fontfamilyComboBox.addItem("""")\n        self.fontfamilyComboBox.addItem("""")\n        self.horizontalLayout_29.addWidget(self.fontfamilyComboBox)\n        self.verticalLayout_14.addWidget(self.frame_14)\n        self.verticalLayout_12.addWidget(self.groupBox_9)\n        self.tabWidget.addTab(self.annotations, """")\n        self.tab = QtWidgets.QWidget()\n        self.tab.setObjectName(""tab"")\n        self.verticalLayout_20 = QtWidgets.QVBoxLayout(self.tab)\n        self.verticalLayout_20.setObjectName(""verticalLayout_20"")\n        self.groupBox_12 = QtWidgets.QGroupBox(self.tab)\n        self.groupBox_12.setObjectName(""groupBox_12"")\n        self.verticalLayout_17 = QtWidgets.QVBoxLayout(self.groupBox_12)\n        self.verticalLayout_17.setObjectName(""verticalLayout_17"")\n        self.gridLayout_3 = QtWidgets.QGridLayout()\n        self.gridLayout_3.setObjectName(""gridLayout_3"")\n        self.labelFontColor_label = QtWidgets.QLabel(self.groupBox_12)\n        self.labelFontColor_label.setText("""")\n        self.labelFontColor_label.setObjectName(""labelFontColor_label"")\n        self.gridLayout_3.addWidget(self.labelFontColor_label, 0, 1, 1, 1)\n        self.pickFontColor_label = QtWidgets.QToolButton(self.groupBox_12)\n        self.pickFontColor_label.setEnabled(True)\n        self.pickFontColor_label.setObjectName(""pickFontColor_label"")\n        self.gridLayout_3.addWidget(self.pickFontColor_label, 0, 2, 1, 1)\n        self.label_22 = QtWidgets.QLabel(self.groupBox_12)\n        self.label_22.setObjectName(""label_22"")\n        self.gridLayout_3.addWidget(self.label_22, 1, 0, 1, 1)\n        self.fontweightComboBox_ax = QtWidgets.QComboBox(self.groupBox_12)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.fontweightComboBox_ax.setFont(font)\n        self.fontweightComboBox_ax.setObjectName(""fontweightComboBox_ax"")\n        self.fontweightComboBox_ax.addItem("""")\n        self.fontweightComboBox_ax.addItem("""")\n        self.fontweightComboBox_ax.addItem("""")\n        self.fontweightComboBox_ax.addItem("""")\n        self.fontweightComboBox_ax.addItem("""")\n        self.fontweightComboBox_ax.addItem("""")\n        self.fontweightComboBox_ax.addItem("""")\n        self.fontweightComboBox_ax.addItem("""")\n        self.fontweightComboBox_ax.addItem("""")\n        self.fontweightComboBox_ax.addItem("""")\n        self.fontweightComboBox_ax.addItem("""")\n        self.fontweightComboBox_ax.addItem("""")\n        self.fontweightComboBox_ax.addItem("""")\n        self.fontweightComboBox_ax.addItem("""")\n        self.gridLayout_3.addWidget(self.fontweightComboBox_ax, 1, 1, 1, 1)\n        self.label_25 = QtWidgets.QLabel(self.groupBox_12)\n        self.label_25.setObjectName(""label_25"")\n        self.gridLayout_3.addWidget(self.label_25, 4, 0, 1, 1)\n        self.fontsizeSpinBox_ax = QtWidgets.QSpinBox(self.groupBox_12)\n        self.fontsizeSpinBox_ax.setEnabled(False)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.fontsizeSpinBox_ax.setFont(font)\n        self.fontsizeSpinBox_ax.setMinimum(1)\n        self.fontsizeSpinBox_ax.setObjectName(""fontsizeSpinBox_ax"")\n        self.gridLayout_3.addWidget(self.fontsizeSpinBox_ax, 3, 1, 1, 1)\n        self.label_23 = QtWidgets.QLabel(self.groupBox_12)\n        self.label_23.setObjectName(""label_23"")\n        self.gridLayout_3.addWidget(self.label_23, 2, 0, 1, 1)\n        self.label_8 = QtWidgets.QLabel(self.groupBox_12)\n        self.label_8.setObjectName(""label_8"")\n        self.gridLayout_3.addWidget(self.label_8, 0, 0, 1, 1)\n        self.fontstyleComboBox_ax = QtWidgets.QComboBox(self.groupBox_12)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.fontstyleComboBox_ax.setFont(font)\n        self.fontstyleComboBox_ax.setObjectName(""fontstyleComboBox_ax"")\n        self.fontstyleComboBox_ax.addItem("""")\n        self.fontstyleComboBox_ax.addItem("""")\n        self.fontstyleComboBox_ax.addItem("""")\n        self.gridLayout_3.addWidget(self.fontstyleComboBox_ax, 2, 1, 1, 1)\n        self.label_size_auto_cb = QtWidgets.QCheckBox(self.groupBox_12)\n        self.label_size_auto_cb.setChecked(True)\n        self.label_size_auto_cb.setObjectName(""label_size_auto_cb"")\n        self.gridLayout_3.addWidget(self.label_size_auto_cb, 3, 0, 1, 1)\n        self.fontfamilyComboBox_ax = QtWidgets.QComboBox(self.groupBox_12)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.fontfamilyComboBox_ax.setFont(font)\n        self.fontfamilyComboBox_ax.setObjectName(""fontfamilyComboBox_ax"")\n        self.fontfamilyComboBox_ax.addItem("""")\n        self.fontfamilyComboBox_ax.addItem("""")\n        self.fontfamilyComboBox_ax.addItem("""")\n        self.fontfamilyComboBox_ax.addItem("""")\n        self.fontfamilyComboBox_ax.addItem("""")\n        self.gridLayout_3.addWidget(self.fontfamilyComboBox_ax, 4, 1, 1, 1)\n        self.verticalLayout_17.addLayout(self.gridLayout_3)\n        self.verticalLayout_20.addWidget(self.groupBox_12)\n        self.groupBox_11 = QtWidgets.QGroupBox(self.tab)\n        self.groupBox_11.setObjectName(""groupBox_11"")\n        self.verticalLayout_18 = QtWidgets.QVBoxLayout(self.groupBox_11)\n        self.verticalLayout_18.setObjectName(""verticalLayout_18"")\n        self.gridLayout_4 = QtWidgets.QGridLayout()\n        self.gridLayout_4.setObjectName(""gridLayout_4"")\n        self.pickFontColor_ax = QtWidgets.QToolButton(self.groupBox_11)\n        self.pickFontColor_ax.setObjectName(""pickFontColor_ax"")\n        self.gridLayout_4.addWidget(self.pickFontColor_ax, 2, 2, 1, 1)\n        self.label_20 = QtWidgets.QLabel(self.groupBox_11)\n        self.label_20.setObjectName(""label_20"")\n        self.gridLayout_4.addWidget(self.label_20, 1, 0, 1, 1)\n        self.grid_cb = QtWidgets.QCheckBox(self.groupBox_11)\n        self.grid_cb.setObjectName(""grid_cb"")\n        self.gridLayout_4.addWidget(self.grid_cb, 3, 0, 1, 1)\n        self.label_9 = QtWidgets.QLabel(self.groupBox_11)\n        self.label_9.setObjectName(""label_9"")\n        self.gridLayout_4.addWidget(self.label_9, 2, 0, 1, 1)\n        self.axis_thickness_cb = QtWidgets.QDoubleSpinBox(self.groupBox_11)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.axis_thickness_cb.setFont(font)\n        self.axis_thickness_cb.setDecimals(1)\n        self.axis_thickness_cb.setSingleStep(0.5)\n        self.axis_thickness_cb.setProperty(""value"", 1.0)\n        self.axis_thickness_cb.setObjectName(""axis_thickness_cb"")\n        self.gridLayout_4.addWidget(self.axis_thickness_cb, 1, 1, 1, 1)\n        self.labelFontColor_ax = QtWidgets.QLabel(self.groupBox_11)\n        self.labelFontColor_ax.setText("""")\n        self.labelFontColor_ax.setObjectName(""labelFontColor_ax"")\n        self.gridLayout_4.addWidget(self.labelFontColor_ax, 2, 1, 1, 1)\n        self.tick_label_size_cb = QtWidgets.QSpinBox(self.groupBox_11)\n        self.tick_label_size_cb.setEnabled(False)\n        font = QtGui.QFont()\n        font.setBold(False)\n        font.setWeight(50)\n        self.tick_label_size_cb.setFont(font)\n        self.tick_label_size_cb.setObjectName(""tick_label_size_cb"")\n        self.gridLayout_4.addWidget(self.tick_label_size_cb, 0, 1, 1, 1)\n        self.tick_label_size_auto_cb = QtWidgets.QCheckBox(self.groupBox_11)\n        self.tick_label_size_auto_cb.setChecked(True)\n        self.tick_label_size_auto_cb.setObjectName(""tick_label_size_auto_cb"")\n        self.gridLayout_4.addWidget(self.tick_label_size_auto_cb, 0, 0, 1, 1)\n        self.verticalLayout_18.addLayout(self.gridLayout_4)\n        self.verticalLayout_20.addWidget(self.groupBox_11)\n        self.reset_all_pb = QtWidgets.QPushButton(self.tab)\n        self.reset_all_pb.setObjectName(""reset_all_pb"")\n        self.verticalLayout_20.addWidget(self.reset_all_pb)\n        self.tabWidget.addTab(self.tab, """")\n        self.verticalLayout.addWidget(self.tabWidget)\n        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)\n        self.verticalLayout.addItem(spacerItem)\n        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()\n        self.horizontalLayout_5.setObjectName(""horizontalLayout_5"")\n        self.pushOK = QtWidgets.QPushButton(Dialog)\n        self.pushOK.setObjectName(""pushOK"")\n        self.horizontalLayout_5.addWidget(self.pushOK)\n        self.pushCancel = QtWidgets.QPushButton(Dialog)\n        self.pushCancel.setObjectName(""pushCancel"")\n        self.horizontalLayout_5.addWidget(self.pushCancel)\n        self.pushApply = QtWidgets.QPushButton(Dialog)\n        self.pushApply.setObjectName(""pushApply"")\n        self.horizontalLayout_5.addWidget(self.pushApply)\n        self.verticalLayout.addLayout(self.horizontalLayout_5)\n\n        self.retranslateUi(Dialog)\n        self.tabWidget.setCurrentIndex(0)\n        self.pushOK.clicked.connect(Dialog.accept)\n        self.pushCancel.clicked.connect(Dialog.reject)\n        self.rbThFixedColor.clicked[\'bool\'].connect(self.pickThColor.setEnabled)\n        self.rbFixedSymbol.clicked[\'bool\'].connect(self.cbSymbolType.setEnabled)\n        self.rbGradientColor.clicked[\'bool\'].connect(self.cbPalette.setDisabled)\n        self.rbPalette.clicked[\'bool\'].connect(self.pickColor1.setDisabled)\n        self.rbPalette.clicked[\'bool\'].connect(self.pickColor2.setDisabled)\n        self.rbThFixedColor.clicked[\'bool\'].connect(self.labelThcol.setEnabled)\n        self.rbThSameColor.clicked[\'bool\'].connect(self.labelThcol.setDisabled)\n        self.rbPalette.clicked[\'bool\'].connect(self.label_5.setDisabled)\n        self.rbThFixedColor.clicked[\'bool\'].connect(self.labelThPickedColor.setEnabled)\n        self.rbThSameColor.clicked[\'bool\'].connect(self.pickThColor.setDisabled)\n        self.rbVariableSymbol.clicked[\'bool\'].connect(self.cbSymbolType.setDisabled)\n        self.rbThSameColor.clicked[\'bool\'].connect(self.labelThPickedColor.setDisabled)\n        self.rbFixedColor.clicked[\'bool\'].connect(self.pickColor2.setDisabled)\n        self.rbFixedColor.clicked[\'bool\'].connect(self.cbPalette.setDisabled)\n        self.rbFixedColor.clicked[\'bool\'].connect(self.pickColor1.setEnabled)\n        self.rbGradientColor.clicked[\'bool\'].connect(self.pickColor1.setEnabled)\n        self.rbFixedColor.clicked[\'bool\'].connect(self.labelPickedColor2.setDisabled)\n        self.rbGradientColor.clicked[\'bool\'].connect(self.pickColor2.setEnabled)\n        self.rbGradientColor.clicked[\'bool\'].connect(self.labelPickedColor2.setEnabled)\n        self.rbGradientColor.clicked[\'bool\'].connect(self.labelPickedColor1.setEnabled)\n        self.rbGradientColor.clicked[\'bool\'].connect(self.label_4.setEnabled)\n        self.rbPalette.clicked[\'bool\'].connect(self.label_4.setDisabled)\n        self.rbPalette.clicked[\'bool\'].connect(self.labelPickedColor1.setDisabled)\n        self.rbFixedColor.clicked[\'bool\'].connect(self.label_4.setEnabled)\n        self.rbPalette.clicked[\'bool\'].connect(self.cbPalette.setEnabled)\n        self.rbFixedColor.clicked[\'bool\'].connect(self.label_5.setDisabled)\n        self.rbPalette.clicked[\'bool\'].connect(self.labelPickedColor2.setDisabled)\n        self.rbGradientColor.clicked[\'bool\'].connect(self.label_5.setEnabled)\n        self.rbFixedColor.clicked[\'bool\'].connect(self.labelPickedColor1.setEnabled)\n        self.facecolorCheckBox.clicked[\'bool\'].connect(self.labelFaceColor.setEnabled)\n        self.facecolorCheckBox.clicked[\'bool\'].connect(self.pickFaceColor.setEnabled)\n        self.edgecolorCheckBox.clicked[\'bool\'].connect(self.labelEdgeColor.setEnabled)\n        self.edgecolorCheckBox.clicked[\'bool\'].connect(self.pickEdgeColor.setEnabled)\n        self.framealphaCheckBox.clicked[\'bool\'].connect(self.framealphaSpinBox.setEnabled)\n        self.borderpadCheckBox.clicked[\'bool\'].connect(self.borderpadSpinBox.setEnabled)\n        self.labelspacingCheckBox.clicked[\'bool\'].connect(self.labelspacingSpinBox.setEnabled)\n        self.handletextpadCheckBox.clicked[\'bool\'].connect(self.handletextpadSpinBox.setEnabled)\n        self.columnspacingCheckBox.clicked[\'bool\'].connect(self.columnspacingSpinBox.setEnabled)\n        self.legendtitleCheckBox.clicked[\'bool\'].connect(self.legendtitleStr.setEnabled)\n        self.legendlabelCheckBox.clicked[\'bool\'].connect(self.legendlabelStr.setEnabled)\n        self.label_size_auto_cb.toggled[\'bool\'].connect(self.fontsizeSpinBox_ax.setDisabled)\n        self.tick_label_size_auto_cb.toggled[\'bool\'].connect(self.tick_label_size_cb.setDisabled)\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\n\n    def retranslateUi(self, Dialog):\n        _translate = QtCore.QCoreApplication.translate\n        Dialog.setWindowTitle(_translate(""Dialog"", ""Plot Style""))\n        self.groupBox.setTitle(_translate(""Dialog"", ""Symbol""))\n        self.groupBox_3.setTitle(_translate(""Dialog"", ""Type""))\n        self.cbSymbolType.setToolTip(_translate(""Dialog"", ""Empty symbol""))\n        self.rbFixedSymbol.setToolTip(_translate(""Dialog"", ""Fixed symbol shape""))\n        self.rbFixedSymbol.setText(_translate(""Dialog"", ""Fixed""))\n        self.rbVariableSymbol.setToolTip(_translate(""Dialog"", ""Variable symbol shape""))\n        self.rbVariableSymbol.setText(_translate(""Dialog"", ""Variable""))\n        self.spinBoxLineW.setPrefix(_translate(""Dialog"", ""Line width: ""))\n        self.groupBox_4.setTitle(_translate(""Dialog"", ""Size""))\n        self.rbEmpty.setText(_translate(""Dialog"", ""Empty""))\n        self.rbFilled.setToolTip(_translate(""Dialog"", ""Filled symbol""))\n        self.rbFilled.setText(_translate(""Dialog"", ""Filled""))\n        self.groupBox_2.setTitle(_translate(""Dialog"", ""Color""))\n        self.groupBox_5.setTitle(_translate(""Dialog"", ""Type""))\n        self.rbFixedColor.setToolTip(_translate(""Dialog"", ""Fixed color""))\n        self.rbFixedColor.setText(_translate(""Dialog"", ""Fixed""))\n        self.rbGradientColor.setToolTip(_translate(""Dialog"", ""Gradient color between Color1 and Color2""))\n        self.rbGradientColor.setText(_translate(""Dialog"", ""Gradient""))\n        self.rbPalette.setText(_translate(""Dialog"", ""Palette""))\n        self.groupBox_6.setTitle(_translate(""Dialog"", ""Selection""))\n        self.pickColor1.setText(_translate(""Dialog"", ""...""))\n        self.label_4.setText(_translate(""Dialog"", ""Color 1""))\n        self.label_5.setText(_translate(""Dialog"", ""Color 2""))\n        self.pickColor2.setText(_translate(""Dialog"", ""...""))\n        self.cbPalette.setToolTip(_translate(""Dialog"", ""Choose color palette""))\n        self.tabWidget.setTabText(self.tabWidget.indexOf(self.data), _translate(""Dialog"", ""Data""))\n        self.groupBox_8.setTitle(_translate(""Dialog"", ""Line Type""))\n        self.sbThLineWidth.setPrefix(_translate(""Dialog"", ""Line width: ""))\n        self.groupBox_10.setTitle(_translate(""Dialog"", ""Color""))\n        self.rbThSameColor.setToolTip(_translate(""Dialog"", ""Same color as the data points""))\n        self.rbThSameColor.setText(_translate(""Dialog"", ""Same as Data""))\n        self.rbThFixedColor.setToolTip(_translate(""Dialog"", ""Theory in fixed color""))\n        self.rbThFixedColor.setText(_translate(""Dialog"", ""Fixed""))\n        self.labelThcol.setText(_translate(""Dialog"", ""Color""))\n        self.pickThColor.setText(_translate(""Dialog"", ""...""))\n        self.tabWidget.setTabText(self.tabWidget.indexOf(self.theory), _translate(""Dialog"", ""Theory""))\n        self.cb_show_legend.setToolTip(_translate(""Dialog"", ""Show Legend on Figure""))\n        self.cb_show_legend.setText(_translate(""Dialog"", ""Show Legend""))\n        self.groupBox_7.setTitle(_translate(""Dialog"", ""Legend Properties""))\n        self.label.setToolTip(_translate(""Dialog"", ""The location of the legend""))\n        self.label.setText(_translate(""Dialog"", ""Location""))\n        self.locationComboBox.setItemText(0, _translate(""Dialog"", ""best""))\n        self.locationComboBox.setItemText(1, _translate(""Dialog"", ""upper right""))\n        self.locationComboBox.setItemText(2, _translate(""Dialog"", ""upper left""))\n        self.locationComboBox.setItemText(3, _translate(""Dialog"", ""lower left""))\n        self.locationComboBox.setItemText(4, _translate(""Dialog"", ""lower right""))\n        self.locationComboBox.setItemText(5, _translate(""Dialog"", ""right""))\n        self.locationComboBox.setItemText(6, _translate(""Dialog"", ""center left""))\n        self.locationComboBox.setItemText(7, _translate(""Dialog"", ""center right""))\n        self.locationComboBox.setItemText(8, _translate(""Dialog"", ""lower center""))\n        self.locationComboBox.setItemText(9, _translate(""Dialog"", ""upper center""))\n        self.locationComboBox.setItemText(10, _translate(""Dialog"", ""center""))\n        self.label_2.setToolTip(_translate(""Dialog"", ""Number of columns in the legend""))\n        self.label_2.setText(_translate(""Dialog"", ""Number of columns""))\n        self.label_3.setToolTip(_translate(""Dialog"", ""Legend font size""))\n        self.label_3.setText(_translate(""Dialog"", ""Font Size""))\n        self.fancyboxCheckBox.setToolTip(_translate(""Dialog"", ""Draw legend frame with round edges""))\n        self.fancyboxCheckBox.setText(_translate(""Dialog"", ""Fancy Box""))\n        self.markerfirstCheckBox.setToolTip(_translate(""Dialog"", ""Place legend marker to the left of the legend label""))\n        self.markerfirstCheckBox.setText(_translate(""Dialog"", ""Marker First""))\n        self.modeCheckBox.setToolTip(_translate(""Dialog"", ""Expand the legend horizontally to fill the axes area""))\n        self.modeCheckBox.setText(_translate(""Dialog"", ""Expand Mode""))\n        self.shadowCheckBox.setToolTip(_translate(""Dialog"", ""Draw a shadow behind the legend""))\n        self.shadowCheckBox.setText(_translate(""Dialog"", ""Shadow""))\n        self.facecolorCheckBox.setToolTip(_translate(""Dialog"", ""Legend\xe2\x80\x99s background color""))\n        self.facecolorCheckBox.setText(_translate(""Dialog"", ""Face Color""))\n        self.pickFaceColor.setText(_translate(""Dialog"", ""...""))\n        self.edgecolorCheckBox.setToolTip(_translate(""Dialog"", ""Legend\xe2\x80\x99s background patch edge color""))\n        self.edgecolorCheckBox.setText(_translate(""Dialog"", ""Edge Color""))\n        self.pickEdgeColor.setText(_translate(""Dialog"", ""...""))\n        self.framealphaCheckBox.setToolTip(_translate(""Dialog"", ""Alpha transparency of the legend\xe2\x80\x99s background""))\n        self.framealphaCheckBox.setText(_translate(""Dialog"", ""Transparency""))\n        self.frameonCheckBox.setToolTip(_translate(""Dialog"", ""Draw the legend inside a patch (frame)""))\n        self.frameonCheckBox.setText(_translate(""Dialog"", ""Draw Frame""))\n        self.legendtitleCheckBox.setToolTip(_translate(""Dialog"", ""Set Legend Title (default None)""))\n        self.legendtitleCheckBox.setText(_translate(""Dialog"", ""Legend Title""))\n        self.legendtitleStr.setToolTip(_translate(""Dialog"", ""Legend\xe2\x80\x99s title (none if left empty)""))\n        self.borderpadCheckBox.setToolTip(_translate(""Dialog"", ""Fractional whitespace inside the legend border""))\n        self.borderpadCheckBox.setText(_translate(""Dialog"", ""Legend Border Pad""))\n        self.labelspacingCheckBox.setText(_translate(""Dialog"", ""Space Between Entries""))\n        self.handletextpadCheckBox.setText(_translate(""Dialog"", ""Space Handle-Label""))\n        self.columnspacingCheckBox.setText(_translate(""Dialog"", ""Space Between Columns""))\n        self.legendlabelCheckBox.setToolTip(_translate(""Dialog"", ""Set Legend label (default = all basic file parameters with values)""))\n        self.legendlabelCheckBox.setText(_translate(""Dialog"", ""Legend Labels""))\n        self.legendlabelStr.setToolTip(_translate(""Dialog"", ""default = all basic file parameters with values""))\n        self.legendlabelStr.setText(_translate(""Dialog"", ""default""))\n        self.draggableCheckBox.setToolTip(_translate(""Dialog"", ""Can the user move the legend with the mouse""))\n        self.draggableCheckBox.setText(_translate(""Dialog"", ""Draggable Legend""))\n        self.tabWidget.setTabText(self.tabWidget.indexOf(self.legend), _translate(""Dialog"", ""Legend""))\n        self.groupBox_9.setTitle(_translate(""Dialog"", ""Default Annotation Properties""))\n        self.label_10.setText(_translate(""Dialog"", ""Rotation""))\n        self.label_11.setText(_translate(""Dialog"", ""Alignment""))\n        self.label_12.setText(_translate(""Dialog"", ""Horizontal""))\n        self.hacomboBox.setItemText(0, _translate(""Dialog"", ""center""))\n        self.hacomboBox.setItemText(1, _translate(""Dialog"", ""right""))\n        self.hacomboBox.setItemText(2, _translate(""Dialog"", ""left""))\n        self.label_13.setText(_translate(""Dialog"", ""Vertical""))\n        self.vacomboBox.setItemText(0, _translate(""Dialog"", ""center""))\n        self.vacomboBox.setItemText(1, _translate(""Dialog"", ""top""))\n        self.vacomboBox.setItemText(2, _translate(""Dialog"", ""bottom""))\n        self.vacomboBox.setItemText(3, _translate(""Dialog"", ""baseline""))\n        self.label_7.setText(_translate(""Dialog"", ""Font Color""))\n        self.pickFontColor.setText(_translate(""Dialog"", ""...""))\n        self.label_14.setText(_translate(""Dialog"", ""Font weight""))\n        self.fontweightComboBox.setItemText(0, _translate(""Dialog"", ""ultralight""))\n        self.fontweightComboBox.setItemText(1, _translate(""Dialog"", ""light""))\n        self.fontweightComboBox.setItemText(2, _translate(""Dialog"", ""normal""))\n        self.fontweightComboBox.setItemText(3, _translate(""Dialog"", ""regular""))\n        self.fontweightComboBox.setItemText(4, _translate(""Dialog"", ""book""))\n        self.fontweightComboBox.setItemText(5, _translate(""Dialog"", ""medium""))\n        self.fontweightComboBox.setItemText(6, _translate(""Dialog"", ""roman""))\n        self.fontweightComboBox.setItemText(7, _translate(""Dialog"", ""semibold""))\n        self.fontweightComboBox.setItemText(8, _translate(""Dialog"", ""demibold""))\n        self.fontweightComboBox.setItemText(9, _translate(""Dialog"", ""demi""))\n        self.fontweightComboBox.setItemText(10, _translate(""Dialog"", ""bold""))\n        self.fontweightComboBox.setItemText(11, _translate(""Dialog"", ""heavy""))\n        self.fontweightComboBox.setItemText(12, _translate(""Dialog"", ""extra bold""))\n        self.fontweightComboBox.setItemText(13, _translate(""Dialog"", ""black""))\n        self.label_15.setText(_translate(""Dialog"", ""Font Style""))\n        self.fontstyleComboBox.setItemText(0, _translate(""Dialog"", ""normal""))\n        self.fontstyleComboBox.setItemText(1, _translate(""Dialog"", ""italic""))\n        self.fontstyleComboBox.setItemText(2, _translate(""Dialog"", ""oblique""))\n        self.label_16.setToolTip(_translate(""Dialog"", ""Legend font size""))\n        self.label_16.setText(_translate(""Dialog"", ""Font Size""))\n        self.label_6.setText(_translate(""Dialog"", ""Opacity""))\n        self.label_17.setText(_translate(""Dialog"", ""Font Family""))\n        self.fontfamilyComboBox.setItemText(0, _translate(""Dialog"", ""serif""))\n        self.fontfamilyComboBox.setItemText(1, _translate(""Dialog"", ""sans-serif""))\n        self.fontfamilyComboBox.setItemText(2, _translate(""Dialog"", ""cursive""))\n        self.fontfamilyComboBox.setItemText(3, _translate(""Dialog"", ""fantasy""))\n        self.fontfamilyComboBox.setItemText(4, _translate(""Dialog"", ""monospace""))\n        self.tabWidget.setTabText(self.tabWidget.indexOf(self.annotations), _translate(""Dialog"", ""Annotations""))\n        self.groupBox_12.setTitle(_translate(""Dialog"", ""Labels""))\n        self.pickFontColor_label.setText(_translate(""Dialog"", ""...""))\n        self.label_22.setText(_translate(""Dialog"", ""Font Weight""))\n        self.fontweightComboBox_ax.setItemText(0, _translate(""Dialog"", ""ultralight""))\n        self.fontweightComboBox_ax.setItemText(1, _translate(""Dialog"", ""light""))\n        self.fontweightComboBox_ax.setItemText(2, _translate(""Dialog"", ""normal""))\n        self.fontweightComboBox_ax.setItemText(3, _translate(""Dialog"", ""regular""))\n        self.fontweightComboBox_ax.setItemText(4, _translate(""Dialog"", ""book""))\n        self.fontweightComboBox_ax.setItemText(5, _translate(""Dialog"", ""medium""))\n        self.fontweightComboBox_ax.setItemText(6, _translate(""Dialog"", ""roman""))\n        self.fontweightComboBox_ax.setItemText(7, _translate(""Dialog"", ""semibold""))\n        self.fontweightComboBox_ax.setItemText(8, _translate(""Dialog"", ""demibold""))\n        self.fontweightComboBox_ax.setItemText(9, _translate(""Dialog"", ""demi""))\n        self.fontweightComboBox_ax.setItemText(10, _translate(""Dialog"", ""bold""))\n        self.fontweightComboBox_ax.setItemText(11, _translate(""Dialog"", ""heavy""))\n        self.fontweightComboBox_ax.setItemText(12, _translate(""Dialog"", ""extra bold""))\n        self.fontweightComboBox_ax.setItemText(13, _translate(""Dialog"", ""black""))\n        self.label_25.setText(_translate(""Dialog"", ""Font Family""))\n        self.label_23.setText(_translate(""Dialog"", ""Font Style""))\n        self.label_8.setText(_translate(""Dialog"", ""Font Color""))\n        self.fontstyleComboBox_ax.setItemText(0, _translate(""Dialog"", ""normal""))\n        self.fontstyleComboBox_ax.setItemText(1, _translate(""Dialog"", ""italic""))\n        self.fontstyleComboBox_ax.setItemText(2, _translate(""Dialog"", ""oblique""))\n        self.label_size_auto_cb.setText(_translate(""Dialog"", ""Autoscale Label Size""))\n        self.fontfamilyComboBox_ax.setItemText(0, _translate(""Dialog"", ""serif""))\n        self.fontfamilyComboBox_ax.setItemText(1, _translate(""Dialog"", ""sans-serif""))\n        self.fontfamilyComboBox_ax.setItemText(2, _translate(""Dialog"", ""cursive""))\n        self.fontfamilyComboBox_ax.setItemText(3, _translate(""Dialog"", ""fantasy""))\n        self.fontfamilyComboBox_ax.setItemText(4, _translate(""Dialog"", ""monospace""))\n        self.groupBox_11.setTitle(_translate(""Dialog"", ""Axes""))\n        self.pickFontColor_ax.setText(_translate(""Dialog"", ""...""))\n        self.label_20.setText(_translate(""Dialog"", ""Axes Thickness""))\n        self.grid_cb.setText(_translate(""Dialog"", ""Grid""))\n        self.label_9.setText(_translate(""Dialog"", ""Color""))\n        self.tick_label_size_auto_cb.setText(_translate(""Dialog"", ""Autoscale Tick Label Size""))\n        self.reset_all_pb.setText(_translate(""Dialog"", ""Default""))\n        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate(""Dialog"", ""Axes""))\n        self.pushOK.setText(_translate(""Dialog"", ""OK""))\n        self.pushCancel.setText(_translate(""Dialog"", ""Cancel""))\n        self.pushApply.setText(_translate(""Dialog"", ""Apply""))\nimport Reptate_rc\n'"
RepTate/theories/BobCtypesHelper.py,0,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""\nDefine the C-variables and functions from the C-files that are needed in Python\n""""""\nfrom ctypes import (\n    CFUNCTYPE,\n    CDLL,\n    c_double,\n    c_int,\n    c_char_p,\n    byref,\n    c_bool,\n    c_void_p,\n    POINTER,\n    c_char,\n)\nimport sys\nimport os\n\nif sys.platform == ""darwin"" or sys.platform == ""linux"":\n    CHARCODE = ""utf-8""\nelse:\n    CHARCODE = ""latin-1""\n\nclass BobError(Exception):\n    """"""Class for BoB exceptions""""""\n\n    pass\n\n\nclass BobCtypesHelper:\n    """"""Wrapper class to call BoB C++ functions""""""\n\n    CB_FTYPE_NONE_PCHAR = CFUNCTYPE(\n        None, POINTER(c_char), c_int\n    )  # callback [return type, [args types]]\n\n    CB_FTYPE_NONE_CHAR = CFUNCTYPE(\n        None, c_char_p\n    )  # callback [return type, [args types]]\n\n    CB_FTYPE_DOUBLE_NONE = CFUNCTYPE(\n        c_double, c_void_p\n    )  # callback [return type, [args types]]\n\n    def __init__(self, parent_theory):\n\n        self.parent_theory = parent_theory\n        # get the directory path of current file\n        dir_path = os.path.dirname(os.path.realpath(__file__))\n        # load the sharedlibrary\n        if sys.maxsize > 2 ** 32:\n            # 64-bit system\n            self.lib_path = os.path.join(dir_path, ""bob2p5_lib_%s.so"" % (sys.platform))\n        else:\n            # 32-bit system\n            self.lib_path = os.path.join(dir_path, ""bob2p5_lib_%s_i686.so"" % (sys.platform))\n        try:\n            self.bob_lib = CDLL(self.lib_path)\n        except:\n            print(\'Could not load shared library ""%s""\' % (self.lib_path))\n        # link the C function to Python\n        self.link_c_functions()\n\n    def send_string(self, pointer_to_str, case):\n        """"""BoB calls this function to send a string to C\n        case 0: send filename containing polyconf input \n        case 1: send polymer name (max 9 caracters)\n        """"""\n        if case == 0:\n            s = self.parent_theory.from_file_filename[\n                self.parent_theory.from_file_filename_counter\n            ]\n            for i, c in enumerate(s):\n                pointer_to_str[i] = c.encode(CHARCODE)\n            self.parent_theory.from_file_filename_counter += 1\n        elif case == 1:\n            s = self.parent_theory.protoname[self.parent_theory.protoname_counter]\n            for i, c in enumerate(s):\n                pointer_to_str[i] = c.encode(CHARCODE)\n            self.parent_theory.protoname_counter += 1\n\n    def get_next_item_from_inp_file(self, *arg):\n        """"""BoB calls this function to read the \'virtual\' inp file""""""\n        val = self.parent_theory.virtual_input_file[self.parent_theory.inp_counter]\n        self.parent_theory.inp_counter += 1\n        return val\n\n    def get_next_item_from_proto_file(self, *arg):\n        """"""BoB calls this function to read the \'virtual\' inp file""""""\n        val = self.parent_theory.virtual_proto_file[self.parent_theory.proto_counter]\n        self.parent_theory.proto_counter += 1\n        return val\n\n    def get_freqmin(self, *arg):\n        """"""BoB LVE calls this function to get the min frequency""""""\n        return self.parent_theory.freqmin\n\n    def get_freqmax(self, *arg):\n        """"""BoB LVE calls this function to get the max frequency""""""\n        return self.parent_theory.freqmax\n\n    def get_freqint(self, *arg):\n        """"""BoB LVE calls this function to get the max frequency""""""\n        return self.parent_theory.freqint\n\n    def print_err_from_c(self, char):\n        """"""Function called by BoB from the C++ code. \n        Called when error occured during BoB execution\n        """"""\n        err_msg = ""<b>ERROR encountered in BoB:</b><br>%s<hr>"" % (char.decode())\n        self.parent_theory.Qprint(err_msg)\n\n    def print_from_c(self, char):\n        """"""Function called by BoB from the C++ code. \n        Called during normal BoB execution\n        """"""\n        msg = ""%s"" % (char.decode())\n        self.parent_theory.Qprint(msg)\n\n    def link_c_functions(self):\n        """"""Declare the Python functions equivalents to the C functions""""""\n        self.bob_save_polyconf_and_return_gpc = (\n            self.bob_lib.reptate_save_polyconf_and_return_gpc\n        )\n        self.bob_save_polyconf_and_return_gpc.restype = c_bool\n\n        self.run_bob_lve = self.bob_lib.run_bob_lve\n        self.run_bob_lve.restype = c_bool\n\n        self.get_bob_lve = self.bob_lib.get_bob_lve\n        self.get_bob_lve.restype = c_bool\n\n        self.run_bob_nlve = self.bob_lib.run_bob_nlve\n        self.run_bob_nlve.restype = c_bool\n\n        self.get_bob_nlve_results = self.bob_lib.get_bob_nlve_results\n        self.get_bob_nlve_results.restype = c_bool\n\n        # ask BoB to stop calculations\n        self.set_flag_stop_bob = self.bob_lib.set_flag_stop_bob\n        self.set_flag_stop_bob.restype = None\n\n        # are priority and seniority calculated\n        self.set_do_priority_seniority = self.bob_lib.set_do_priority_seniority\n        self.set_do_priority_seniority.restype = None\n\n        self.link_c_callback()\n\n    def link_c_callback(self):\n        """"""Callback C function from Python function.\n        Must call it before each run to make sure the prints and calls are directed\n        towards the correct theory.\n        """"""\n        self.cb_err_func = self.CB_FTYPE_NONE_CHAR(self.print_err_from_c)\n        self.bob_lib.def_pyprint_err_func(self.cb_err_func)\n\n        self.cb_func = self.CB_FTYPE_NONE_CHAR(self.print_from_c)\n        self.bob_lib.def_pyprint_func(self.cb_func)\n\n        self.cb_get_freqmin = self.CB_FTYPE_DOUBLE_NONE(self.get_freqmin)\n        self.bob_lib.def_get_freqmin(self.cb_get_freqmin)\n\n        self.cb_get_freqmax = self.CB_FTYPE_DOUBLE_NONE(self.get_freqmax)\n        self.bob_lib.def_get_freqmax(self.cb_get_freqmax)\n\n        self.cb_get_freqint = self.CB_FTYPE_DOUBLE_NONE(self.get_freqint)\n        self.bob_lib.def_get_freqint(self.cb_get_freqint)\n\n        self.cb_get_next_item_from_inp_file = self.CB_FTYPE_DOUBLE_NONE(\n            self.get_next_item_from_inp_file\n        )\n        self.bob_lib.def_get_next_item_from_inp_file(\n            self.cb_get_next_item_from_inp_file\n        )\n\n        self.cb_get_next_item_from_proto_file = self.CB_FTYPE_DOUBLE_NONE(\n            self.get_next_item_from_proto_file\n        )\n        self.bob_lib.def_get_next_item_from_proto_file(\n            self.cb_get_next_item_from_proto_file\n        )\n\n        self.cb_send_string = self.CB_FTYPE_NONE_PCHAR(self.send_string)\n        self.bob_lib.def_get_string(self.cb_send_string)\n\n    def save_polyconf_and_return_gpc(self, arg_list, npol_tot):\n        """"""Run BoB asking for a polyconf file only (no relaxation etc) and\n        output the characteristics of the polymer configuration""""""\n        # prepare the arguments for bob_main function\n        n_arg = len(arg_list)\n        argv = (c_char_p * n_arg)()\n        for i in range(n_arg):\n            argv[i] = arg_list[i].encode(CHARCODE)\n\n        # virtual inp and proto file\n        self.parent_theory.inp_counter = 0\n        self.parent_theory.proto_counter = 0\n        self.parent_theory.from_file_filename_counter = 0\n        self.parent_theory.protoname_counter = 0\n\n        # prepare the arguments for GPC\n        nbin = self.parent_theory.parameters[\n            ""nbin""\n        ].value  # set the number of bins from param\n        ncomp = c_int(-1)  # -1: all components\n        ni = c_int(0)\n        nf = c_int(npol_tot)  # all polymers\n        lgmid_arr = (c_double * nbin)()\n        wtbin_arr = (c_double * nbin)()\n        brbin_arr = (c_double * nbin)()\n        gbin_arr = (c_double * nbin)()\n        mn = c_double()\n        mw = c_double()\n\n        # call C function, return False if error in BoB\n        if self.bob_save_polyconf_and_return_gpc(\n            c_int(n_arg),\n            argv,\n            c_int(nbin),\n            ncomp,\n            ni,\n            nf,\n            byref(mn),\n            byref(mw),\n            lgmid_arr,\n            wtbin_arr,\n            brbin_arr,\n            gbin_arr,\n        ):\n\n            # return results\n            arrs = [lgmid_arr[:], wtbin_arr[:], brbin_arr[:], gbin_arr[:]]\n            return [mn.value, mw.value, arrs]\n\n        # BoB encountered error\n        raise BobError\n\n    def return_bob_lve(self, arg_list):\n        """"""Run BoB LVE and copy results to arrays""""""\n        # virtual inp file\n        self.parent_theory.inp_counter = 0\n        # prepare the arguments for bob_main function\n        n_arg = len(arg_list)\n        argv = (c_char_p * n_arg)()\n        for i in range(n_arg):\n            argv[i] = arg_list[i].encode(CHARCODE)\n\n        # run bob LVE and get size of results\n        # call C function, return False if error in BoB\n        out_size = c_int()\n        if self.run_bob_lve(c_int(n_arg), argv, byref(out_size)):\n            # allocate Python memory for results and copy bob results\n            omega = (c_double * out_size.value)()\n            g_p = (c_double * out_size.value)()\n            g_pp = (c_double * out_size.value)()\n\n            if self.get_bob_lve(omega, g_p, g_pp):\n                return [omega[:], g_p[:], g_pp[:]]\n\n        # BoB encountered error\n        raise BobError\n\n    def return_bob_nlve(self, arg_list, flowrate, tmin, tmax, is_shear):\n        """"""Run BoB NLVE and copy results to arrays""""""\n        # virtual inp file\n        self.parent_theory.inp_counter = 0\n        # prepare the arguments for bob_main function\n        n_arg = len(arg_list)\n        argv = (c_char_p * n_arg)()\n        for i in range(n_arg):\n            argv[i] = arg_list[i].encode(CHARCODE)\n\n        # run bob and get size of results\n        # call C function, return False if error in BoB\n        out_size = c_int()\n        if self.run_bob_nlve(\n            c_int(n_arg),\n            argv,\n            c_double(flowrate),\n            c_double(tmin),\n            c_double(tmax),\n            c_bool(is_shear),\n            byref(out_size),\n        ):\n            # allocate Python memory for results and copy bob results\n            time_arr = (c_double * out_size.value)()\n            stress_arr = (c_double * out_size.value)()\n            N1_arr = (c_double * out_size.value)()\n\n            if self.get_bob_nlve_results(\n                time_arr, stress_arr, N1_arr, c_bool(is_shear)\n            ):\n                return [time_arr[:], stress_arr[:]]\n\n        # BoB encountered error\n        raise BobError\n'"
RepTate/theories/GOpolySTRAND.py,0,"b'# -*- coding: utf-8 -*-\n""""""\nCreated on Fri Nov 30 13:15:57 2018\n\n@author: phydjr\n""""""\n\nimport math\nimport scipy\n\n# import matplotlib.pyplot as plt\nfrom scipy import optimize\n\n# import pandas as pa\n\ndef afun(A, LL):\n    sum1 = 0.0\n    sum2 = 0.0\n    for i in range(numc):\n        tem = 1.0 - A * edf[i]\n        sum1 += phi[i] * edf[i] / tem\n        sum2 += phi[i] * edf[i] / tem ** 2\n    tem = LL * sum1 / sum2 - 1.0\n    return tem\n\n\ndef Free2(NS, NT):\n    LL = NT / NS\n    A = scipy.optimize.brenth(afun, 0, iedfmax, args=(LL))\n    sum1 = 0.0\n    for i in range(numc):\n        tem = 1.0 - A * edf[i]\n        sum1 += phi[i] * edf[i] / tem\n    AB = 1.0 / sum1\n    w = []\n    v = []\n    for i in range(numc):\n        tem = 1.0 - A * edf[i]\n        w.append(AB * phi[i] * edf[i] / tem)\n        v.append(w[i] / tem / LL)\n    # now, put together free energy terms\n    sum1 = 0.0\n    for i in range(numc):\n        logw = math.log(w[i])\n        logv = math.log(v[i])\n        logc = math.log(v[i] - w[i] / LL)\n        sum1 += (\n            w[i] * (2 * logw - logphi[i]) / LL\n            - v[i] * logv\n            + (v[i] - w[i] / LL) * logc\n            - v[i] * df[i]\n        )\n    FF = NT * sum1 - NS * math.log(LL) - NT * E0\n    # surface terms\n    aspect = NS ** 3 / NT ** 2 / arsq\n    if aspect < 1:\n        ep = math.sqrt(1.0 - aspect)\n        Stil = 2.0 * NS + 2.0 * ar * NT * math.asin(ep) / ep / math.sqrt(NS)\n    elif aspect > 1:\n        eps0 = math.sqrt(1.0 - 1.0 / aspect)\n        Stil = (\n            2.0 * NS\n            + arsq * NT ** 2 * math.log((1.0 + eps0) / (1.0 - eps0)) / eps0 / NS ** 2\n        )\n    else:\n        Stil = 2.0 * NS + 2.0 * ar * NT / math.sqrt(NS)\n    FF += mus * Stil\n    return FF\n\n\ndef Freequi(NS, NT):\n    LL = NT / NS\n    FF = -NS * math.log(LL) - NT * E0 + (NT - NS) * math.log(1.0 - 1.0 / LL)\n    # surface terms\n    aspect = NS ** 3 / NT ** 2 / arsq\n    if aspect < 1:\n        ep = math.sqrt(1.0 - aspect)\n        Stil = 2.0 * NS + 2.0 * ar * NT * math.asin(ep) / ep / math.sqrt(NS)\n    elif aspect > 1:\n        eps0 = math.sqrt(1.0 - 1.0 / aspect)\n        Stil = (\n            2.0 * NS\n            + arsq * NT ** 2 * math.log((1.0 + eps0) / (1.0 - eps0)) / eps0 / NS ** 2\n        )\n    else:\n        Stil = 2.0 * NS + 2.0 * ar * NT / math.sqrt(NS)\n    FF += mus * Stil\n    return FF\n\n\ndef Free1(NT):\n    res = scipy.optimize.minimize_scalar(\n        Free2, bounds=(1, 0.999999 * NT), args=(NT), method=""bounded""\n    )\n    return res.fun\n\n\ndef Freefluc(NT):\n    res = scipy.optimize.minimize_scalar(\n        Free2, bounds=(1, 0.999999 * NT), args=(NT), method=""bounded""\n    )\n    nsmid = res.x\n    ##second derivative\n    d2fdn2 = (\n        Free2(nsmid + 0.1, NT) + Free2(nsmid - 0.1, NT) - 2 * Free2(nsmid, NT)\n    ) / 0.01\n    fNT = res.fun + math.log(d2fdn2 / 2 / math.pi)\n    return fNT\n\n\ndef Free1qui(NT):\n    res = scipy.optimize.minimize_scalar(\n        Freequi, bounds=(1, 0.999999 * NT), args=(NT), method=""bounded""\n    )\n    return res.fun\n\n\ndef Freeflucqui(NT):\n    res = scipy.optimize.minimize_scalar(\n        Freequi, bounds=(1, 0.999999 * NT), args=(NT), method=""bounded""\n    )\n    nsmid = res.x\n    ##second derivative\n    d2fdn2 = (\n        Freequi(nsmid + 0.1, NT) + Freequi(nsmid - 0.1, NT) - 2 * Freequi(nsmid, NT)\n    ) / 0.01\n    fNT = res.fun + math.log(d2fdn2 / 2 / math.pi)\n    return fNT\n\n\ndef Freesum(NT):\n    sum = 0.0\n    NS = 1\n    while NS < NT:\n        sum = sum + math.exp(-Free2(NS, NT))\n        NS = NS + 1\n    fren = -math.log(sum)\n    return fren\n\n\ndef Freesumqui(NT):\n    sum = 0.0\n    NS = 1\n    while NS < NT:\n        sum = sum + math.exp(-Freequi(NS, NT))\n        NS = NS + 1\n    fren = -math.log(sum)\n    return fren\n\n\ndef findDfStar(params):\n    # Extract params\n    global E0, mus, phi, df, edf, edfmax, logphi, iedfmax, arsq, ar, numc\n\n    trueQuiescent = params[""landscape""]\n    phi = params[""phi""]\n    df = params[""df""]\n    numc = phi.size\n    E0 = params[""epsilonB""]\n    mus = params[""muS""]\n    maxNT = trueQuiescent.size\n\n    # a_r\n    arsq = 9.0 / 16.0 * math.pi\n    ar = math.sqrt(arsq)\n\n    # setting up some parameters\n    edf = [0] * numc\n    edfmax = 0\n    logphi = []\n\n    for i in range(numc):\n        edf[i] = math.exp(df[i])\n        logphi.append(math.log(phi[i]))\n        edfmax = max(edfmax, edf[i])\n    iedfmax = 0.999999999999999 / edfmax\n\n    NTlist = []\n    Flist = []\n    Fluclist = []\n    Barrierlist = []\n\n    for i in range(int((maxNT - 1) / 2)):\n        NT = (i + 1) * 2\n        Barrierlist.append(trueQuiescent[NT] + Freefluc(NT) - Freeflucqui(NT))\n\n        # if( i % 100 == 0):\n        #  print (i,str(NT)+ "" / ""+  str((maxNT-1)/2 ))#!3, Freefluc(NT)-Freeflucqui(NT))\n\n    return max(Barrierlist)\n'"
RepTate/theories/GOpolySTRAND_initialGuess.py,0,"b'# -*- coding: utf-8 -*-\n""""""\nCreated on Fri Nov 30 13:15:57 2018\n\n@author: phydjr\n""""""\n\nimport math\nimport scipy\n\n# import matplotlib.pyplot as plt\nfrom scipy import optimize\n\n# import pandas as pa\n\n\ndef afun(A, LL):\n    sum1 = 0.0\n    sum2 = 0.0\n    for i in range(numc):\n        tem = 1.0 - A * edf[i]\n        sum1 += phi[i] * edf[i] / tem\n        sum2 += phi[i] * edf[i] / tem ** 2\n    tem = LL * sum1 / sum2 - 1.0\n    return tem\n\n\ndef Free2(NS, NT):\n    LL = NT / NS\n    A = scipy.optimize.brenth(afun, 0, iedfmax, args=(LL))\n    sum1 = 0.0\n    for i in range(numc):\n        tem = 1.0 - A * edf[i]\n        sum1 += phi[i] * edf[i] / tem\n    AB = 1.0 / sum1\n    w = []\n    v = []\n    for i in range(numc):\n        tem = 1.0 - A * edf[i]\n        w.append(AB * phi[i] * edf[i] / tem)\n        v.append(w[i] / tem / LL)\n    # now, put together free energy terms\n    sum1 = 0.0\n    for i in range(numc):\n        logw = math.log(w[i])\n        logv = math.log(v[i])\n        logc = math.log(v[i] - w[i] / LL)\n        sum1 += (\n            w[i] * (2 * logw - logphi[i]) / LL\n            - v[i] * logv\n            + (v[i] - w[i] / LL) * logc\n            - v[i] * df[i]\n        )\n    FF = NT * sum1 - NS * math.log(LL) - NT * E0\n    # surface terms\n    aspect = NS ** 3 / NT ** 2 / arsq\n    if aspect < 1:\n        ep = math.sqrt(1.0 - aspect)\n        Stil = 2.0 * NS + 2.0 * ar * NT * math.asin(ep) / ep / math.sqrt(NS)\n    elif aspect > 1:\n        eps0 = math.sqrt(1.0 - 1.0 / aspect)\n        Stil = (\n            2.0 * NS\n            + arsq * NT ** 2 * math.log((1.0 + eps0) / (1.0 - eps0)) / eps0 / NS ** 2\n        )\n    else:\n        Stil = 2.0 * NS + 2.0 * ar * NT / math.sqrt(NS)\n    FF += mus * Stil\n    return FF\n\n\ndef Freequi(NS, NT):\n    LL = NT / NS\n    FF = -NS * math.log(LL) - NT * E0 + (NT - NS) * math.log(1.0 - 1.0 / LL)\n    # surface terms\n    aspect = NS ** 3 / NT ** 2 / arsq\n    if aspect < 1:\n        ep = math.sqrt(1.0 - aspect)\n        Stil = 2.0 * NS + 2.0 * ar * NT * math.asin(ep) / ep / math.sqrt(NS)\n    elif aspect > 1:\n        eps0 = math.sqrt(1.0 - 1.0 / aspect)\n        Stil = (\n            2.0 * NS\n            + arsq * NT ** 2 * math.log((1.0 + eps0) / (1.0 - eps0)) / eps0 / NS ** 2\n        )\n    else:\n        Stil = 2.0 * NS + 2.0 * ar * NT / math.sqrt(NS)\n    FF += mus * Stil\n    return FF\n\n\ndef Free1(NT):\n    res = scipy.optimize.minimize_scalar(\n        Free2, bounds=(1, 0.999999 * NT), args=(NT), method=""bounded""\n    )\n    return res.fun\n\n\ndef Freefluc(NT):\n    res = scipy.optimize.minimize_scalar(\n        Free2, bounds=(1, 0.999999 * NT), args=(NT), method=""bounded""\n    )\n    nsmid = res.x\n    ##second derivative\n    d2fdn2 = (\n        Free2(nsmid + 0.1, NT) + Free2(nsmid - 0.1, NT) - 2 * Free2(nsmid, NT)\n    ) / 0.01\n    fNT = res.fun + math.log(d2fdn2 / 2 / math.pi)\n    return fNT\n\n\ndef Free1qui(NT):\n    res = scipy.optimize.minimize_scalar(\n        Freequi, bounds=(1, 0.999999 * NT), args=(NT), method=""bounded""\n    )\n    return res.fun\n\n\ndef Freeflucqui(NT):\n    res = scipy.optimize.minimize_scalar(\n        Freequi, bounds=(1, 0.999999 * NT), args=(NT), method=""bounded""\n    )\n    nsmid = res.x\n    ##second derivative\n    d2fdn2 = (\n        Freequi(nsmid + 0.1, NT) + Freequi(nsmid - 0.1, NT) - 2 * Freequi(nsmid, NT)\n    ) / 0.01\n    fNT = res.fun + math.log(d2fdn2 / 2 / math.pi)\n    return fNT\n\n\ndef Freesum(NT):\n    sum = 0.0\n    NS = 1\n    while NS < NT:\n        sum = sum + math.exp(-Free2(NS, NT))\n        NS = NS + 1\n    fren = -math.log(sum)\n    return fren\n\n\ndef Freesumqui(NT):\n    sum = 0.0\n    NS = 1\n    while NS < NT:\n        sum = sum + math.exp(-Freequi(NS, NT))\n        NS = NS + 1\n    fren = -math.log(sum)\n    return fren\n\n\ndef findDfStar(params):\n    # Extract params\n    global E0, mus, phi, df, edf, edfmax, logphi, iedfmax, arsq, ar, numc, trueQuiescent\n\n    trueQuiescent = params[""landscape""]\n    phi = params[""phi""]\n    df = params[""df""]\n    numc = phi.size\n    E0 = params[""epsilonB""]\n    mus = params[""muS""]\n    maxNT = trueQuiescent.size\n\n    # a_r\n    arsq = 9.0 / 16.0 * math.pi\n    ar = math.sqrt(arsq)\n\n    # setting up some parameters\n    edf = [0] * numc\n    edfmax = 0\n    logphi = []\n\n    for i in range(numc):\n        edf[i] = math.exp(df[i])\n        logphi.append(math.log(phi[i]))\n        edfmax = max(edfmax, edf[i])\n    iedfmax = 0.999999999999999 / edfmax\n\n    res = scipy.optimize.minimize_scalar(\n        FreeTrue, bounds=(3.0, maxNT), method=""bounded""\n    )\n    return -res.fun\n\n\ndef FreeTrue(NT):\n    NTlow = math.floor(NT)\n    NThigh = NTlow + 1\n    trueQ = trueQuiescent[NTlow] + (trueQuiescent[NThigh] - trueQuiescent[NTlow]) * (\n        NT - NTlow\n    )\n    #!3return -(Freefluc(NT)-Freeflucqui(NT))\n    return -(trueQ + Freefluc(NT) - Freeflucqui(NT))\n'"
RepTate/theories/QuiescentSmoothStrand.py,0,"b'# -*- coding: utf-8 -*-\n""""""\nCreated on Fri Nov 30 13:15:57 2018\n\n@author: phydjr\n""""""\n\nimport math\nimport scipy\nfrom scipy import optimize\n\n\ndef wholeLandscape(NT, E0_param, mus_param, Kappa0_param):\n    global E0, mus, Kappa0, thetaMin, arsq, ar\n\n    E0 = E0_param\n    mus = mus_param\n    Kappa0 = Kappa0_param\n\n    thetaMin = 1e-300\n\n    # a_r\n    arsq = 9.0 / 16.0 * math.pi\n    ar = math.sqrt(arsq)\n\n    return Freeflucqui(NT)\n\n\ndef Freequi(NS, NT):\n    LL = NT / NS\n    kappa = Kappa0 + 1.0 / LL ** 2\n\n    FF = (\n        -0.5 * (NS - 1) * math.log(2.0 * math.pi / kappa) + 0.5 * math.log(NS) - NT * E0\n    )\n    # surface terms\n    aspect = NS ** 3 / NT ** 2 / arsq\n    if aspect < 1:\n        ep = math.sqrt(1.0 - aspect)\n        Stil = 2.0 * NS + 2.0 * ar * NT * math.asin(ep) / ep / math.sqrt(NS)\n    elif aspect > 1:\n        eps0 = math.sqrt(1.0 - 1.0 / aspect)\n        Stil = (\n            2.0 * NS\n            + arsq * NT ** 2 * math.log((1.0 + eps0) / (1.0 - eps0)) / eps0 / NS ** 2\n        )\n    else:\n        Stil = 2.0 * NS + 2.0 * ar * NT / math.sqrt(NS)\n    FF += mus * Stil\n    return FF\n\n\ndef Free1qui(NT):\n    res = scipy.optimize.minimize_scalar(\n        Freequi, bounds=(0.00001, 0.999999 * NT), args=(NT), method=""bounded""\n    )\n    # print res\n    return res.fun\n\n\ndef Freeflucqui(NT):\n    res = scipy.optimize.minimize_scalar(\n        Freequi, bounds=(0.0000001, 0.999999 * NT), args=(NT), method=""bounded""\n    )\n    nsmid = res.x\n    ##second derivative\n    d2fdn2 = (\n        Freequi(nsmid + 0.1, NT) + Freequi(nsmid - 0.1, NT) - 2 * Freequi(nsmid, NT)\n    ) / 0.01\n    fNT = res.fun + math.log(d2fdn2 / 2 / math.pi)\n    return fNT\n'"
RepTate/theories/SchneiderRate.py,7,"b'from scipy.integrate import odeint\nimport numpy as np\nfrom scipy.interpolate import interp1d\n\n\ndef intSchneider(t, Ndot, Ndot0, N_0, G_C):\n    global N_dot_func\n\n    N_scale = N_0 + Ndot0 * t[-1]\n    Ndot = Ndot / N_scale\n\n    # Prepend an initial datapoint at t=0\n    t = np.append([0], t)\n    Ndot = np.append(Ndot0, Ndot)\n\n    # Append a final data point\n    t2 = np.append(t, t[-1] * 5.0)\n    Ndot = np.append(Ndot, Ndot[-1])\n\n    N_dot_func = interp1d(t2, Ndot, kind=""cubic"")  # Spline to interpolate Ndot\n\n    # Solve Schneider ODEs\n    phiSc0 = [0.0, 0.0, 0.0, 8 * np.pi * N_0 / N_scale]\n    sol = odeint(Schneider, phiSc0, t, args=(G_C,))\n\n    sol = np.delete(sol, 0, 0)  # Remove row containing t=0\n    sol = sol * N_scale\n    return sol\n\ndef Schneider(phiSc, t, G_C):\n    return (\n        G_C * phiSc[1],\n        G_C * phiSc[2],\n        G_C * phiSc[3],\n        8 * np.pi * abs(N_dot_func(t)),\n    )  # When Ndot is small interpolation is sometimes negative!!\n\n'"
RepTate/theories/SmoothPolySTRAND.py,10,"b'# -*- coding: utf-8 -*-\n""""""\nCreated on Fri Nov 30 13:15:57 2018\n\n@author: phydjr\n""""""\n\nimport math\nimport scipy\nfrom scipy import optimize\nimport numpy as np\n\ndef wfun(phi, Df, P, B, NS):\n    return (\n        Qs\n        * phi\n        / (\n            NS\n            + (Qs - NS) * B * np.exp(-LL * Df - Df ** 2 / 2.0 / kappa + Df / kappa * P)\n        )\n    )\n\n\ndef afun(x, NS):\n    P = x[0]\n    B = x[1]\n    sum1 = 0.0\n    sum2 = 0.0\n    for i in range(numc):\n        wi = wfun(phi[i], df[i], P, B, NS)\n        sum1 += wi\n        sum2 += wi * df[i]\n    return np.array([sum1 - 1.0, sum2 - P])\n\n\ndef Free2(Ns, NT):\n    global LL, Qs, kappa, Pprevious, Bprevious\n    NS = Ns[0]\n    LL = NT / NS\n    Qs = Qs0 * NS\n    kappa = Kappa0 + 1.0 / LL ** 2\n\n    sol = scipy.optimize.root(\n        afun,\n        np.array([max(0.00001, Pprevious), Bprevious]),\n        args=(NS),\n        method=""hybr"",\n        jac=False,\n    )\n    P = sol.x[0]\n    B = sol.x[1]\n    Pprevious = P\n    Bprevious = B\n\n    w = np.zeros(numc)\n    theta = np.zeros(numc)\n    sum1 = 0\n    sum2 = 0\n    sum3 = 0\n    sum4 = 0\n    sum5 = 0\n    for i in range(numc):\n        w[i] = wfun(phi[i], df[i], P, B, NS)\n        theta[i] = max(thetaMin, Qs / (Qs - NS) * phi[i] - NS / (Qs - NS) * w[i])\n        sum1 += theta[i] * np.log(theta[i])\n        sum2 += phi[i] * np.log(phi[i])\n        sum3 += w[i] * np.log(w[i])\n        sum4 += w[i] * df[i]\n        sum5 += w[i] * df[i] ** 2\n\n    # print w\n    # print theta\n\n    FF = (\n        (Qs - NS) * sum1\n        - Qs * sum2\n        + NS * sum3\n        - 0.5 * (NS - 1) * np.log(2.0 * math.pi / kappa)\n        + 0.5 * np.log(NS)\n        - NT * sum4\n        - 0.5 * NS / kappa * (sum5 - sum4 ** 2)\n        - E0 * NT\n    )\n    # surface terms\n    aspect = NS ** 3 / NT ** 2 / arsq\n    if aspect < 1:\n        ep = math.sqrt(1.0 - aspect)\n        Stil = 2.0 * NS + 2.0 * ar * NT * math.asin(ep) / ep / math.sqrt(NS)\n    elif aspect > 1:\n        eps0 = math.sqrt(1.0 - 1.0 / aspect)\n        Stil = (\n            2.0 * NS\n            + arsq * NT ** 2 * math.log((1.0 + eps0) / (1.0 - eps0)) / eps0 / NS ** 2\n        )\n    else:\n        Stil = 2.0 * NS + 2.0 * ar * NT / math.sqrt(NS)\n    FF += mus * Stil\n    return FF\n\n\ndef Free1(NT):\n    x0 = NSprevious\n    res = scipy.optimize.minimize(Free2, x0, method=""Nelder-Mead"", args=(NT))\n    # res=scipy.optimize.minimize_scalar(Free2, bounds=(1,0.999999*NT), args=(NT), method=\'bounded\')\n    print(res)\n    return res.fun\n\n\ndef Freefluc(NT):\n    global NSprevious\n    x0 = NSprevious\n    res = scipy.optimize.minimize(Free2, x0, method=""Nelder-Mead"", args=(NT))\n    # print res\n    # res=scipy.optimize.minimize_scalar(Free2, bounds=(1,0.999999*NT), args=(NT), method=\'bounded\')\n    nsmid = res.x[0]\n    NSprevious = nsmid\n    ##second derivative\n    d2fdn2 = (\n        Free2([nsmid + 0.1], NT) + Free2([nsmid - 0.1], NT) - 2 * Free2([nsmid], NT)\n    ) / 0.01\n    fNT = res.fun + math.log(d2fdn2 / 2 / math.pi)\n    return fNT\n\n\ndef findDfStar(params):\n    global E0, mus, Kappa0, Qs0, maxNT, phi, df, arsq, ar, numc, NSprevious, Pprevious, Bprevious, thetaMin\n\n    # Extract params\n    phi = params[""phi""]\n    df = params[""df""]\n    numc = phi.size\n    E0 = params[""epsilonB""]\n    mus = params[""muS""]\n    Kappa0 = params[""Kappa0""]\n    Qs0 = params[""Qs0""]\n    maxNT = params[""maxNT""]\n\n    # Initialise variables\n    # a_r\n    arsq = 9.0 / 16.0 * math.pi\n    thetaMin = 1e-300\n    ar = math.sqrt(arsq)\n\n    # March up the barrier\n    NTlist = []\n    Flist = []\n    Fluclist = []\n    Barrierlist = []\n\n    BestBarrier = -10000.0\n    NTlist = []\n    Flist = []\n    Fluclist = []\n    Barrierlist = []\n    NSprevious = 1.1\n    Pprevious = 0.5 * (max(df) - min(df))\n    Bprevious = 1.0\n\n    ratio = 2.0\n    for i in range(int((maxNT - 1) / ratio)):\n        NT = 2.0 + i * ratio\n        NTlist.append(NT)\n        ans = Freefluc(1.0 * NT)\n        Fluclist.append(ans)\n\n        if ans > BestBarrier:\n            BestBarrier = ans\n            nStar = NT\n\n        if BestBarrier - ans > 1.0:\n            break\n\n    return BestBarrier, NT\n\n    # res=scipy.optimize.minimize_scalar(FreeTrue, bounds=(3.0,maxNT), method=\'bounded\')\n    # return -res.fun\n\n\ndef findDfStar_Direct(params):\n    global E0, mus, Kappa0, Qs0, maxNT, phi, df, arsq, ar, numc, NSprevious, Pprevious, Bprevious, thetaMin\n\n    # Extract params\n    phi = params[""phi""]\n    df = params[""df""]\n    numc = phi.size\n    E0 = params[""epsilonB""]\n    mus = params[""muS""]\n    Kappa0 = params[""Kappa0""]\n    Qs0 = params[""Qs0""]\n    NTprevious = params[""NTprevious""]\n    NSprevious = params[""NSprevious""]\n    Pprevious = params[""Pprevious""]\n    Bprevious = params[""Bprevious""]\n\n    # Initialise variables\n    # a_r\n    arsq = 9.0 / 16.0 * math.pi\n    thetaMin = 1e-300\n    ar = math.sqrt(arsq)\n\n    search_frac = 0.1\n    upper = NTprevious * (1 + search_frac / 100.0)\n    lower = NTprevious * (1 - search_frac)\n    res = scipy.optimize.minimize_scalar(\n        FreeTrue, bounds=(lower, upper), method=""bounded""\n    )\n    return -res.fun, res.x, NSprevious, Pprevious, Bprevious\n\n\ndef FreeTrue(NT):\n    return -Freefluc(1.0 * NT)\n\n'"
RepTate/theories/TheoryArrhenius.py,2,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryArrhenius\n""""""\nimport numpy as np\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\n\n\nclass TheoryArrhenius(CmdBase):\n    """"""Arrhenius Equation\n\n    * **Function**\n        .. math::\n            a_T = \\\\exp\\\\left(\\\\frac{E_a}{R} \\\\left(\\\\frac{1}{T} - \\\\frac{1}{T_{ref}}\\\\right) \\\\right)\n    \n    * **Parameters**\n       - :math:`E_a`: Activation Energy\n       - :math:`T_{ref}`: Reference Temperature for the shift factors\n       - :math:`R`: Gas Constant\n    """"""\n\n    thname = ""ArrheniusTheory""\n    description = ""Arrhenius Theory""\n    citations = []\n\n    def __new__(cls, name="""", parent_dataset=None, axarr=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryArrhenius(name, parent_dataset, axarr)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryArrhenius(name, parent_dataset, axarr)\n        )\n\n\nclass BaseTheoryArrhenius:\n    """"""Base class for both GUI and CL""""""\n\n    # html_help_file = \'\'\n    single_file = (\n        True  # False if the theory can be applied to multiple files simultaneously\n    )\n    thname = TheoryArrhenius.thname\n    citations = TheoryArrhenius.citations\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        self.function = self.calculate  # main theory function\n        self.has_modes = False  # True if the theory has modes\n        self.parameters[""Tref""] = Parameter(\n            name=""Tref"",\n            value=0,\n            description=""Reference Temperature (\xc2\xb0C)"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""Ea""] = Parameter(\n            name=""Ea"",\n            value=100,\n            description=""Activation Energy"",\n            type=ParameterType.real,\n            opt_type=OptType.opt,\n        )\n\n    def calculate(self, f=None):\n        """"""Arrhenius function""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        tt.data[:, 0] = ft.data[:, 0]\n        tt.data[:, 1] = np.exp(\n            self.parameters[""Ea""].value\n            / 8.314\n            * (\n                1 / (ft.data[:, 0] + 273.15)\n                - 1 / (self.parameters[""Tref""].value + 273.15)\n            )\n        )\n\n\nclass CLTheoryArrhenius(BaseTheoryArrhenius, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # This class usually stays empty\n\n\nclass GUITheoryArrhenius(BaseTheoryArrhenius, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # add widgets specific to the theory here:\n'"
RepTate/theories/TheoryBasic.py,9,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryBasic\n\nModule that defines the basic theories that should be available for all Applications.\n\n""""""\nfrom numpy import *\nimport numpy as np\nimport re\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom PyQt5.QtWidgets import QToolBar, QSpinBox, QComboBox\nfrom PyQt5.QtCore import QSize\n\n""""""\n             _                             _       _ \n _ __   ___ | |_   _ _ __   ___  _ __ ___ (_) __ _| |\n| \'_ \\ / _ \\| | | | | \'_ \\ / _ \\| \'_ ` _ \\| |/ _` | |\n| |_) | (_) | | |_| | | | | (_) | | | | | | | (_| | |\n| .__/ \\___/|_|\\__, |_| |_|\\___/|_| |_| |_|_|\\__,_|_|\n|_|            |___/                                 \n""""""\n\nclass TheoryPolynomial(CmdBase):\n    """"""Fit a polynomial of degree :math:`n` to the data\n\n    * **Function**\n        .. math::\n            y(x) = \\\\sum_{i=0}^n A_i x^i\n\n    * **Parameters**\n       - :math:`n`: degree of the polynomial function.\n       - :math:`A_i`: polynomial coefficeints.\n    """"""\n    thname = ""Polynomial""\n    description = ""Fit a polynomial of degree n""\n\n    def __new__(cls, name="""", parent_dataset=None, ax=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return GUITheoryPolynomial(\n            name, parent_dataset,\n            ax) if (CmdBase.mode == CmdMode.GUI) else CLTheoryPolynomial(\n                name, parent_dataset, ax)\n\n\nclass BaseTheoryPolynomial:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = \'http://reptate.readthedocs.io/manual/All_Theories/basic_theories.html#polynomial\'\n    single_file = True\n    thname = TheoryPolynomial.thname\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**\n\n        Keyword Arguments:\n            - name {str} -- Name of the theory (default: {""""})\n            - parent_dataset {DataSet} -- DataSet that contains this theory (default: {None})\n            - ax {Axes array} -- Matplotlib axes where the theory will plot the data (default: {None})\n        """"""\n        super().__init__(name, parent_dataset, ax)\n        self.MAX_DEGREE = 10\n        self.function = self.polynomial\n        self.parameters[""n""] = Parameter(\n            name=""n"",\n            value=1,\n            description=""Degree of Polynomial"",\n            type=ParameterType.integer,\n            opt_type=OptType.const,\n            display_flag=False)\n        for i in range(self.parameters[""n""].value + 1):\n            self.parameters[""A%d"" % i] = Parameter(\n                ""A%d"" % i,\n                1.0,\n                ""Coefficient order %d"" % i,\n                ParameterType.real,\n                opt_type=OptType.opt)\n        self.Qprint(""%s: A0 + A1*x + A2*x^2 + ..."" % self.thname)\n\n    def set_param_value(self, name, value):\n        """"""Change a parameter value, in particular *n*\n        """"""\n        if name == \'n\':\n            nold = self.parameters[""n""].value\n            Aold = np.zeros(nold + 1)\n            for i in range(nold + 1):\n                Aold[i] = self.parameters[""A%d"" % i].value\n                del self.parameters[""A%d"" % i]\n\n            nnew = value\n            message, success = super().set_param_value(""n"", nnew)\n            for i in range(nnew + 1):\n                if i <= nold:\n                    Aval = Aold[i]\n                else:\n                    Aval = 1.0\n                self.parameters[""A%d"" % i] = Parameter(\n                    ""A%d"" % i,\n                    Aval,\n                    ""Coefficient degree %d"" % i,\n                    ParameterType.real,\n                    opt_type=OptType.opt)\n        else:\n            message, success = super().set_param_value(name, value)\n\n        if self.autocalculate:\n            self.parent_dataset.handle_actionCalculate_Theory()\n        self.update_parameter_table()\n        return message, success\n\n    def polynomial(self, f=None):\n        """"""Actual polynomial function.\n\n        .. math::\n            y(x) = \\\\sum_{i=0}^n A_i x^i\n        """"""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        tt.data[:, 0] = ft.data[:, 0]\n        for i in range(self.parameters[""n""].value + 1):\n            a = self.parameters[""A%d"" % i].value\n            for j in range(1, tt.num_columns):\n                tt.data[:, j] += a * tt.data[:, 0]**i\n\n\nclass CLTheoryPolynomial(BaseTheoryPolynomial, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n\nclass GUITheoryPolynomial(BaseTheoryPolynomial, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n        # add widgets specific to the theory\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n        self.spinbox = QSpinBox()\n        self.spinbox.setRange(1, self.MAX_DEGREE) # min and max number of modes\n        self.spinbox.setPrefix(""degree "")\n        self.spinbox.setValue(self.parameters[""n""].value)  #initial value\n        tb.addWidget(self.spinbox)\n        self.thToolsLayout.insertWidget(0, tb)\n        connection_id = self.spinbox.valueChanged.connect(\n            self.handle_spinboxValueChanged)\n\n    def handle_spinboxValueChanged(self, value):\n        """"""Handle a change of the parameter \'nmode\'""""""\n        self.set_param_value(""n"", value)\n\n""""""\n _ __   _____      _____ _ __  | | __ ___      __\n| \'_ \\ / _ \\ \\ /\\ / / _ \\ \'__| | |/ _` \\ \\ /\\ / /\n| |_) | (_) \\ V  V /  __/ |    | | (_| |\\ V  V / \n| .__/ \\___/ \\_/\\_/ \\___|_|    |_|\\__,_| \\_/\\_/  \n|_|                                              \n""""""\n\nclass TheoryPowerLaw(CmdBase):\n    """"""Fit a power law to the data\n\n    * **Function**\n        .. math::\n            y(x) = a x^b\n\n    * **Parameters**\n       - :math:`a`: prefactor.\n       - :math:`b`: exponent.\n    """"""\n    thname = ""Power Law""\n    description = ""Fit Power Law""\n\n    def __new__(cls, name="""", parent_dataset=None, ax=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return GUITheoryPowerLaw(\n            name, parent_dataset,\n            ax) if (CmdBase.mode == CmdMode.GUI) else CLTheoryPowerLaw(\n                name, parent_dataset, ax)\n\n\nclass BaseTheoryPowerLaw:\n    """"""Base class for both GUI and CL""""""\n    html_help_file = \'http://reptate.readthedocs.io/manual/All_Theories/basic_theories.html#power-law\'\n    single_file = True\n    thname = TheoryPowerLaw.thname\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n        self.function = self.powerlaw\n        self.parameters[""a""] = Parameter(\n            ""a"", 1.0, ""Prefactor"", ParameterType.real, opt_type=OptType.opt)\n        self.parameters[""b""] = Parameter(\n            ""b"", 1.0, ""Exponent"", ParameterType.real, opt_type=OptType.opt)\n        self.Qprint(""%s: a*x^b"" % self.thname)\n\n    def powerlaw(self, f=None):\n        """"""Actual function\n\n    * **Function**\n        .. math::\n            y(x) = a x^b\n        """"""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        tt.data[:, 0] = ft.data[:, 0]\n        for j in range(1, tt.num_columns):\n            tt.data[:, j] = self.parameters[\n                ""a""].value * tt.data[:, 0]**self.parameters[""b""].value\n\n\nclass CLTheoryPowerLaw(BaseTheoryPowerLaw, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n\nclass GUITheoryPowerLaw(BaseTheoryPowerLaw, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n""""""\n                                        _   _       _ \n  _____  ___ __   ___  _ __   ___ _ __ | |_(_) __ _| |\n / _ \\ \\/ / \'_ \\ / _ \\| \'_ \\ / _ \\ \'_ \\| __| |/ _` | |\n|  __/>  <| |_) | (_) | | | |  __/ | | | |_| | (_| | |\n \\___/_/\\_\\ .__/ \\___/|_| |_|\\___|_| |_|\\__|_|\\__,_|_|\n          |_|                                         \n""""""\n\nclass TheoryExponential(CmdBase):\n    """"""Fit a single exponential decay to the data\n\n    * **Function**\n        .. math::\n            y(x) = a \\\\exp(-x/T)\n\n    * **Parameters**\n       - :math:`a`: prefactor.\n       - :math:`T`: exponential ""time"" constant.\n\n    """"""\n    thname = ""Exponential""\n    description = ""Fit Exponential""\n\n    def __new__(cls, name="""", parent_dataset=None, ax=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return GUITheoryExponential(\n            name, parent_dataset,\n            ax) if (CmdBase.mode == CmdMode.GUI) else CLTheoryExponential(\n                name, parent_dataset, ax)\n\nclass BaseTheoryExponential:\n    """"""Base class for both GUI and CL""""""\n    html_help_file = \'http://reptate.readthedocs.io/manual/All_Theories/basic_theories.html#exponential\'\n    single_file = True\n    thname = TheoryExponential.thname\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n        self.function = self.exponential\n        self.parameters[""a""] = Parameter(\n            ""a"", 1.0, ""Prefactor"", ParameterType.real, opt_type=OptType.opt)\n        self.parameters[""T""] = Parameter(\n            ""T"",\n            1.0,\n            ""Exponential time constant"",\n            ParameterType.real,\n            opt_type=OptType.opt)\n        self.Qprint(""%s: a*exp(-x/T)"" % self.thname)\n\n    def exponential(self, f=None):\n        """"""**Function** :math:`y(x) = a \\\\exp(-x/T)`""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        tt.data[:, 0] = ft.data[:, 0]\n        for j in range(1, tt.num_columns):\n            tt.data[:, j] = self.parameters[""a""].value * np.exp(\n                -tt.data[:, 0] / self.parameters[""T""].value)\n\nclass CLTheoryExponential(BaseTheoryExponential, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n\nclass GUITheoryExponential(BaseTheoryExponential, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n""""""\n ____                                           _   _       _     \n|___ \\    _____  ___ __   ___  _ __   ___ _ __ | |_(_) __ _| |___ \n  __) |  / _ \\ \\/ / \'_ \\ / _ \\| \'_ \\ / _ \\ \'_ \\| __| |/ _` | / __|\n / __/  |  __/>  <| |_) | (_) | | | |  __/ | | | |_| | (_| | \\__ \\\n|_____|  \\___/_/\\_\\ .__/ \\___/|_| |_|\\___|_| |_|\\__|_|\\__,_|_|___/\n                  |_|                                             \n""""""\n\nclass TheoryTwoExponentials(CmdBase):\n    """"""Fit **two** single exponential decay to the data\n\n    * **Function**\n        .. math::\n            y(x) = a_1 \\\\exp(x/T_1) + a_2 \\\\exp(-x/T_2)\n\n    * **Parameters**\n       - :math:`a_1`, :math:`a_2`: prefactors.\n       - :math:`T_1`, :math:`T_2`: exponential ""time"" constants.\n    """"""\n    thname = ""Two Exponentials""\n    description = ""Fit two exponentials""\n\n    def __new__(cls, name="""", parent_dataset=None, ax=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return GUITheoryTwoExponentials(\n            name, parent_dataset,\n            ax) if (CmdBase.mode == CmdMode.GUI) else CLTheoryTwoExponentials(\n                name, parent_dataset, ax)\n\nclass BaseTheoryTwoExponentials:\n    """"""Base class for both GUI and CL""""""\n    html_help_file = \'http://reptate.readthedocs.io/manual/All_Theories/basic_theories.html#double-exponential\'\n    single_file = True\n    thname = TheoryTwoExponentials.thname\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n        self.function = self.two_exponentials\n        self.parameters[""a1""] = Parameter(\n            ""a1"", 0.9, ""Prefactor 1"", ParameterType.real, opt_type=OptType.opt)\n        self.parameters[""T1""] = Parameter(\n            ""T1"",\n            1.0,\n            ""Exponential time constant 1"",\n            ParameterType.real,\n            opt_type=OptType.opt)\n        self.parameters[""a2""] = Parameter(\n            ""a2"", 0.1, ""Prefactor 2"", ParameterType.real, opt_type=OptType.opt)\n        self.parameters[""T2""] = Parameter(\n            ""T2"",\n            10.0,\n            ""Exponential time constant 2"",\n            ParameterType.real,\n            opt_type=OptType.opt)\n        self.Qprint(""%s: a1*exp(-x/T1) + a2*exp(-x/T2)"" % self.thname)\n\n    def two_exponentials(self, f=None):\n        """"""Actual function\n\n    * **Function**\n        .. math::\n            y(x) = a_1 \\\\exp(x/T_1) + a_2 \\\\exp(-x/T_2)\n        """"""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        tt.data[:, 0] = ft.data[:, 0]\n        a1 = self.parameters[""a1""].value\n        a2 = self.parameters[""a2""].value\n        T1 = self.parameters[""T1""].value\n        T2 = self.parameters[""T2""].value\n        for j in range(1, tt.num_columns):\n            tt.data[:, j] = a1 * np.exp(-tt.data[:, 0] / T1) + a2 * np.exp(\n                -tt.data[:, 0] / T2)\n\nclass CLTheoryTwoExponentials(BaseTheoryTwoExponentials, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n\nclass GUITheoryTwoExponentials(BaseTheoryTwoExponentials, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n""""""\n       _            _               _      \n  __ _| | __ _  ___| |__  _ __ __ _(_) ___ \n / _` | |/ _` |/ _ \\ \'_ \\| \'__/ _` | |/ __|\n| (_| | | (_| |  __/ |_) | | | (_| | | (__ \n \\__,_|_|\\__, |\\___|_.__/|_|  \\__,_|_|\\___|\n         |___/                             \n                                   _             \n  _____  ___ __  _ __ ___  ___ ___(_) ___  _ __  \n / _ \\ \\/ / \'_ \\| \'__/ _ \\/ __/ __| |/ _ \\| \'_ \\ \n|  __/>  <| |_) | | |  __/\\__ \\__ \\ | (_) | | | |\n \\___/_/\\_\\ .__/|_|  \\___||___/___/_|\\___/|_| |_|\n          |_|                                    \n""""""\n\nclass TheoryAlgebraicExpression(CmdBase):\n    """"""Fit a user algebraic expression with :math:`n` parameters. \n    \n    The expression can contain any of the following mathematical functions: sin, cos, tan, arccos, arcsin, arctan, arctan2, deg2rad, rad2deg, sinh, cosh, tanh, arcsinh, arccosh, arctanh, around, round, rint, floor, ceil,trunc, exp, log, log10, fabs, mod, e, pi, power, sqrt\n\n    It is the responsability of the user to input functions that make mathematical sense.\n\n    * **Function**\n        .. math::\n            y(x) = f({A_i}, x, F_{params})\n\n    * **Parameters**\n       - :math:`n`: number of parameters.\n       - :math:`A_i`: coefficeints of the algebraic expression\n    """"""\n    thname = ""Algebraic Expression""\n    description = ""Fit an algebraic expression with n parameters""\n\n    def __new__(cls, name="""", parent_dataset=None, ax=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return GUITheoryAlgebraicExpression(\n            name, parent_dataset,\n            ax) if (CmdBase.mode == CmdMode.GUI) else CLTheoryAlgebraicExpression(\n                name, parent_dataset, ax)\n\n\nclass BaseTheoryAlgebraicExpression:\n    """"""Base class for both GUI and CL""""""\n    html_help_file = \'http://reptate.readthedocs.io/manual/All_Theories/basic_theories.html#algebraic-expression\'\n    single_file = False\n    thname = TheoryAlgebraicExpression.thname\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n        self.MAX_DEGREE = 10\n        self.function = self.algebraicexpression\n        self.parameters[""n""] = Parameter(\n            name=""n"",\n            value=2,\n            description=""Number of Parameters"",\n            type=ParameterType.integer,\n            opt_type=OptType.const,\n            display_flag=False)\n        self.parameters[""expression""] = Parameter(\n            name=""expression"",\n            value=""A0+A1*x"",\n            description=""Algebraic Expression"",\n            type=ParameterType.string,\n            opt_type=OptType.const,\n            display_flag=False)\n        for i in range(self.parameters[""n""].value):\n            self.parameters[""A%d"" % i] = Parameter(\n                ""A%d"" % i,\n                1.0,\n                ""Parameter %d"" % i,\n                ParameterType.real,\n                opt_type=OptType.opt)\n\n        safe_list = [\'sin\', \'cos\', \'tan\', \'arccos\', \'arcsin\', \'arctan\', \'arctan2\', \'deg2rad\', \'rad2deg\', \'sinh\', \'cosh\', \'tanh\', \'arcsinh\', \'arccosh\', \'arctanh\', \'around\', \'round_\', \'rint\', \'floor\', \'ceil\',\'trunc\', \'exp\', \'log\', \'log10\', \'fabs\', \'mod\', \'e\', \'pi\', \'power\', \'sqrt\']\n        self.safe_dict = {}\n        for k in safe_list:\n            self.safe_dict[k] = globals().get(k, None)\n        \n\n    def set_param_value(self, name, value):\n        """"""Change a parameter value, in particular *n*\n        """"""\n        if name == \'n\':\n            nold = self.parameters[""n""].value\n            Aold = np.zeros(nold)\n            for i in range(nold):\n                Aold[i] = self.parameters[""A%d"" % i].value\n                del self.parameters[""A%d"" % i]\n\n            nnew = value\n            message, success = super().set_param_value(""n"", nnew)\n            for i in range(nnew):\n                if i < nold:\n                    Aval = Aold[i]\n                else:\n                    Aval = 1.0\n                self.parameters[""A%d"" % i] = Parameter(\n                    ""A%d"" % i,\n                    Aval,\n                    ""Parameter %d"" % i,\n                    ParameterType.real,\n                    opt_type=OptType.opt)\n        else:\n            message, success = super().set_param_value(name, value)\n\n        if self.autocalculate:\n            self.parent_dataset.handle_actionCalculate_Theory()\n        self.update_parameter_table()\n        return message, success\n\n    def algebraicexpression(self, f=None):\n        """"""Actual function.\n\n    * **Function**\n        .. math::\n            y(x) = f({A_i}, x)\n        """"""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        tt.data[:, 0] = ft.data[:, 0]\n\n        expression = self.parameters[""expression""].value\n        params = set(re.findall( ""A\\d{1,2}"", expression))\n        nparams=len(params)\n        maxparamindex=-1;\n        for p in params:\n            paramindex=int(p.split(\'A\')[1])\n            if paramindex>maxparamindex:\n                maxparamindex = paramindex\n        n = self.parameters[""n""].value\n        if (maxparamindex!=n-1) or (nparams!=n):\n            self.logger.warning(""Wrong expression or number of parameters. Review your theory"")\n            self.Qprint(""<b><font color=red>Wrong expression or number of parameters</font></b>. Review your theory"")\n        else:\n            # Find FILE PARAMETERS IN THE EXPRESSION\n            fparams = re.findall(""\\[(.*?)\\]"",expression)\n            for fp in fparams:\n                if fp in f.file_parameters:\n                    self.safe_dict[fp]=float(f.file_parameters[fp])\n                else:\n                    self.logger.warning(""File parameter not found. Review your theory"")\n                    self.Qprint(""<b><font color=red>File parameter not found</font></b>. Review your theory"")\n                    self.safe_dict[fp]=0.0\n            expression = expression.replace(""["","""").replace(""]"","""")\n\n            self.safe_dict[\'x\']=tt.data[:, 0]\n            for i in range(n):\n                self.safe_dict[\'A%d\'%i]=self.parameters[""A%d"" % i].value\n            \n            try:\n                y = eval(expression, {""__builtins__"":None}, self.safe_dict)\n                for j in range(1, tt.num_columns):\n                    tt.data[:, j] = y\n            except NameError as e:\n                self.Qprint(""<b>Error in algebraic expression <b>"")\n                self.logger.exception(""Error in Algebraic Expression"")\n            except TypeError as e:\n                self.Qprint(""<b>Error in algebraic expression <b>"")\n                self.logger.exception(""Error in Algebraic Expression"")\n            except Exception as e:\n                self.Qprint(""<b>Error in algebraic expression <b>"")\n                self.logger.exception(""Error in Algebraic Expression"")\n                #print (e.__class__, "":"", e)\n\n\n    def do_error(self, line):\n        super().do_error(line)\n        self.Qprint(""%s: <b>%s</b>"" % (self.thname, self.parameters[""expression""].value))\n\nclass CLTheoryAlgebraicExpression(BaseTheoryAlgebraicExpression, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n\nclass GUITheoryAlgebraicExpression(BaseTheoryAlgebraicExpression, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n        # add widgets specific to the theory\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n        self.spinbox = QSpinBox()\n        self.spinbox.setRange(1, self.MAX_DEGREE)  # min and max number of modes\n        self.spinbox.setToolTip(""Number of parameters"")\n        self.spinbox.setValue(self.parameters[""n""].value)  #initial value\n        tb.addWidget(self.spinbox)\n        self.expressionCB = QComboBox()\n        self.expressionCB.setToolTip(""Algebraic expression"")\n        self.expressionCB.addItem(""A0+A1*x"")\n        self.expressionCB.addItem(""A0*sin(A1*x)"")\n        self.expressionCB.addItem(""A0*sin(A1*x+A2)"")\n        self.expressionCB.setEditable(True)\n        self.expressionCB.setMinimumWidth(self.parent_dataset.width()-75)\n        tb.addWidget(self.expressionCB)\n\n        self.thToolsLayout.insertWidget(0, tb)\n        connection_id = self.spinbox.valueChanged.connect(\n            self.handle_spinboxValueChanged)\n        connection_id = self.expressionCB.currentIndexChanged.connect(\n            self.handle_expressionChanged)\n\n    def handle_spinboxValueChanged(self, value):\n        """"""Handle a change of the parameter \'n\'""""""\n        self.set_param_value(""n"", value)\n\n    def handle_expressionChanged(self, item):\n        """"""Handle a change in the algebraic expression""""""\n        self.set_param_value(""expression"", self.expressionCB.itemText(item))'"
RepTate/theories/TheoryBobLVE.py,2,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryBobLVE\n\nBobLVE file calculates the LVE of a given polymer configuration\nby Chinmay Das et al.\n""""""\nimport os\nimport numpy as np\nimport RepTate\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom RepTate.gui import bob_LVE\nimport time\n\nimport ctypes\nfrom RepTate.theories.BobCtypesHelper import BobCtypesHelper, BobError\nfrom PyQt5.QtWidgets import QApplication, QToolBar\nfrom PyQt5.QtWidgets import QDialog, QFormLayout, QWidget, QLineEdit, QLabel, QComboBox, QDialogButtonBox, QFileDialog, QMessageBox, QTextEdit\nfrom PyQt5.QtGui import QDesktopServices, QIcon\nfrom PyQt5.QtCore import QUrl, pyqtSignal, QSize\n\n\nclass TheoryBobLVE(CmdBase):\n    """"""Analyse the relaxation of polymers read from a polymer configuration file\n    using BoB v2.5 (Chinmay Das and Daniel Read).\n    These files can be generated from the React application in RepTate.\n\n    The original documentation of BoB can be found here: `<https://sourceforge.net/projects/bob-rheology/files/bob-rheology/bob2.3/bob2.3.pdf/download>`_.\n    """"""\n    thname = \'BOB\'\n    description = \'Branch-On-Branch rheology\'\n    citations = [\'Das C. et al., J. Rheol. 2006, 50, 207-234\']\n    doi = [""http://dx.doi.org/10.1122/1.2167487""]\n\n    def __new__(cls, name=\'\', parent_dataset=None, axarr=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return GUITheoryBobLVE(\n            name, parent_dataset,\n            axarr) if (CmdBase.mode == CmdMode.GUI) else CLTheoryBobLVE(\n                name, parent_dataset, axarr)\n\n\nclass BaseTheoryBobLVE:\n    """"""Base class for both GUI and CL""""""\n    html_help_file = \'https://reptate.readthedocs.io/manual/Applications/LVE/Theory/theory.html#bob-lve\'\n    single_file = True  # False if the theory can be applied to multiple files simultaneously\n    thname = TheoryBobLVE.thname\n    citations = TheoryBobLVE.citations\n    doi = TheoryBobLVE.doi \n\n    signal_param_dialog = pyqtSignal(object)\n\n    def __init__(self, name=\'ThBobLVE\', parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        self.function = self.calculate  # main theory function\n        self.has_modes = False  # True if the theory has modes\n        self.signal_param_dialog.connect(self.launch_param_dialog)\n        self.polyconf_file_out = None  # full path of target polyconf file\n        self.bch = BobCtypesHelper(self)\n        self.autocalculate = False\n        self.freqint = 1.1 #\xc2\xa0BoB theory points spaced by log10(freqint)\n        self.do_priority_seniority = False\n        self.inp_counter = 0 # counter for the \'virtual\' input file for BoB\n        self.virtual_input_file = [] # \'virtual\' input file for BoB\n\n    def request_stop_computations(self):\n        """"""Called when user wants to terminate the current computation""""""\n        self.Qprint(\'<font color=red><b>Stop current calculation requested</b></font>\')\n        self.bch.set_flag_stop_bob(ctypes.c_bool(True))\n\n    def do_error(self, line=""""):\n        """"""This theory calculate the error by interpolating the theory solution""""""\n        self.do_error_interpolated(line="""")\n\n    def calculate(self, f=None):\n        """"""Create polymer configuration file and calculate distribution characteristics""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        self.freqmin = f.data_table.mincol(0)\n        self.freqmax = f.data_table.maxcol(0)\n        #show form\n        self.success_dialog = None\n        self.argv = None\n\n        self.signal_param_dialog.emit(self)\n        while self.success_dialog is None:  # wait for the end of QDialog\n            # TODO: find a better way to wait for the dialog thread to finish\n            time.sleep(0.5)\n        if not self.success_dialog:\n            self.Qprint(\'Operation cancelled\')\n            return\n        QApplication.processEvents()\n        self.bch.link_c_callback()\n        self.bch.set_do_priority_seniority(ctypes.c_bool(self.do_priority_seniority))\n        # Run BoB C++ code\n        self.start_time_cal = time.time()\n        try:\n            omega, gp, gpp = self.bch.return_bob_lve(self.argv)\n        except BobError:\n            self.Qprint(\'Operation cancelled\')\n            return\n\n        #copy results to RepTate data file\n        if omega:\n            tt.num_columns = ft.num_columns\n            tt.num_rows = len(omega)\n            tt.data = np.zeros((tt.num_rows, tt.num_columns))\n            tt.data[:, 0] = omega[:]\n            tt.data[:, 1] = gp[:]\n            tt.data[:, 2] = gpp[:]\n\n    def do_fit(self, line=\'\'):\n        self.Qprint(""Fitting not allowed in this theory"")\n\nclass CLTheoryBobLVE(BaseTheoryBobLVE, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name=\'\', parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # This class usually stays empty\n\n\nclass GUITheoryBobLVE(BaseTheoryBobLVE, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name=\'\', parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        # temp_dir = os.path.join(\'theories\', \'temp\')\n        # #create temp folder if does not exist\n        # if not os.path.exists(temp_dir):\n        #     os.makedirs(temp_dir)\n        self.selected_file = None\n        self.setup_dialog()\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n        self.btn_prio_senio = tb.addAction(QIcon(\':/Icon8/Images/new_icons/priority_seniority.png\'), \'Calculate Priority and Seniority (can take some time)\')\n        self.btn_prio_senio.setCheckable(True)\n        self.btn_prio_senio.setChecked(self.do_priority_seniority)\n\n        # BoB LVE do not calculate priority & seniority (leave it to React)\n        # uncomment below for the possiblity to calculate priority & seniority in BoB LVE\n        \n        # self.thToolsLayout.insertWidget(0, tb)\n        self.btn_prio_senio.triggered.connect(self.handle_btn_prio_senio)\n\n    def handle_btn_prio_senio(self, checked):\n        """"""Change do_priority_seniority""""""\n        self.do_priority_seniority = checked\n\n    def get_file_name(self):\n        """"""Open a dialog to choose a file containing the polymer configuration for BoB""""""\n        # file browser window\n        options = QFileDialog.Options()\n        dir_start = os.path.join(RepTate.root_dir, ""data"", ""React"")\n        dilogue_name = ""Select a Polymer Configuration File""\n        ext_filter = ""Data Files (*.dat)""\n        selected_file, _ = QFileDialog.getOpenFileName(\n            self, dilogue_name, dir_start, ext_filter, options=options)\n        self.selected_file = selected_file\n        self.d.selected_file.setText(os.path.basename(selected_file))\n\n    def num_file_lines(self, fname):\n        """"""Return the number of lines in the file `fname`""""""\n        with open(fname) as f:\n            i = 0\n            for _, l in enumerate(f):\n                i += 1 \n            return i + 1\n\n    def setup_dialog(self):\n        """"""Load the form dialog from bob_LVE.py""""""\n        self.dialog = QDialog(self)\n        self.dialog.ui = bob_LVE.Ui_Dialog()\n        self.dialog.ui.setupUi(self.dialog)\n        self.d = self.dialog.ui\n        self.d.pb_pick_file.clicked.connect(self.get_file_name)\n        self.d.selected_file.setStyleSheet(""color : blue ;"")\n        # connect button OK\n        self.d.pb_ok.clicked.connect(self.handle_pb_ok)\n        self.d.pb_ok.setDefault(True)\n        # connect button Cancel\n        self.d.pb_cancel.clicked.connect(self.dialog.reject)\n        # connect button Help\n        self.d.pb_help.clicked.connect(\n            self.handle_help_button)\n\n    def handle_pb_ok(self):\n        """"""Define the OK button role. If something is wrong, keep the dialog open""""""\n        if self.selected_file is None:\n            QMessageBox.warning(\n                self, \'Select Input Polyconf\',\n                \'Please select a file for BoB to read the polymer configuration\')\n        else:    \n            self.dialog.accept()\n\n    def handle_help_button(self):\n        """"""When Help button of dialog box is clicked, show BoB manual (pdf)""""""\n        bob_manual_pdf = \'docs%ssource%smanual%sApplications%sReact%sbob2.3.pdf\' % (\n            (os.sep, ) * 5)\n        QDesktopServices.openUrl(QUrl.fromLocalFile(bob_manual_pdf))\n\n    def create_bob_input_file(self, nlines, inpf):\n        """"""Create a file containing the input BoB parameters from the form dialog""""""\n        # with open(inpf, \'w\') as tmp:\n        #     #1 memory\n        #     npol = max(nlines, float(self.d.n_polymers.text()))\n        #     nseg = max(nlines, float(self.d.n_segments.text()))\n\n        #     tmp.write(\'%d %d\\n\' % (npol, nseg))\n        #     #2 alpha\n        #     tmp.write(\'%.6g\\n\' % float(self.d.alpha.text()))\n        #     #3 dummy ""1""\n        #     tmp.write(\'1\\n\')\n        #     # 4 M0, Ne, density\n        #     M0 = float(self.d.m0.text())\n        #     Ne = float(self.d.ne.text())\n        #     density = float(self.d.density.text())\n        #     tmp.write(\'%.6g %.6g %.6g\\n\' % (M0, Ne, density))\n        #     #5 tau_e, T\n        #     taue = float(self.d.taue.text())\n        #     temperature = float(self.d.temperature.text())\n        #     tmp.write(\'%.6g %.6g\\n\' % (taue, temperature))\n        #     #6 write ""0"" so BoB reads a polyconf file\n        #     tmp.write(\'0\\n\')\n        tmp = []\n        #1 memory\n        npol = max(nlines, float(self.d.n_polymers.text()))\n        nseg = max(nlines, float(self.d.n_segments.text()))\n        tmp.append(npol)\n        tmp.append(nseg)\n        #2 alpha\n        tmp.append(float(self.d.alpha.text()))\n        #3 dummy ""1""\n        tmp.append(1)\n        # 4 M0, Ne, density\n        M0 = float(self.d.m0.text())\n        Ne = float(self.d.ne.text())\n        density = float(self.d.density.text())\n        tmp.append(M0)\n        tmp.append(Ne)\n        tmp.append(density)\n        #5 tau_e, T\n        taue = float(self.d.taue.text())\n        temperature = float(self.d.temperature.text())\n        tmp.append(taue)\n        tmp.append(temperature)\n        #6 write ""0"" so BoB reads a polyconf file\n        tmp.append(0)\n        self.virtual_input_file = tmp\n\n    def launch_param_dialog(self):\n        """"""Show a dialog to get the filename of the polymer configuration.\n        This function is called via a pyqtSignal for multithread compatibility""""""\n        if not self.dialog.exec_():\n            self.success_dialog = False\n            return\n        conffile = self.selected_file\n        if not self.is_ascii(conffile):\n            # ok_path = os.path.join(\'theories\', \'temp\', \'target_polyconf.dat\')\n            # copy2(conffile, ok_path)\n            # conffile = ok_path\n            self.Qprint(""<font color=orange><b>\\""%s\\"" contains non-ascii characters. BoB might not like it...</b></font>"" % conffile)\n            print(""\\""%s\\"" contains non-ascii characters. BoB might not like it..."" % conffile)\n        if conffile == \'\' or os.path.splitext(conffile)[1] == \'\':\n            self.Qprint(""<font color=red><b>Set the output filepath to write the polyconf file</b></font>"")\n            return\n        nlines = self.num_file_lines(conffile)\n        # inpf = os.path.join(\'theories\', \'temp\', \'temp_inpf.dat\') \n        inpf = \'inpf.dat\' # dummy name, use virtual files now\n        self.create_bob_input_file(nlines, inpf)\n\n        # BoB main arguments\n        self.argv = [""./bob"", ""-i"", inpf, ""-c"", conffile]\n        self.success_dialog = True\n\n    def is_ascii(self, s):\n        """"""Check if `s` contains non ASCII characters""""""\n        try:\n            s.encode(\'ascii\')\n            return True\n        except UnicodeEncodeError:\n            return False'"
RepTate/theories/TheoryBobNLVE.py,2,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryBobNLVE\n\nBobLVE file calculates the LVE of a given polymer configuration\nby Chinmay Das et al.\n""""""\nimport os\nimport numpy as np\nimport RepTate\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nimport time\n\nimport ctypes\nfrom RepTate.theories.BobCtypesHelper import BobCtypesHelper, BobError\nfrom PyQt5.QtWidgets import QApplication, QToolBar, QToolButton, QMenu\nfrom PyQt5.QtWidgets import QDialog, QFormLayout, QWidget, QLineEdit, QLabel, QComboBox, QDialogButtonBox, QFileDialog, QMessageBox, QTextEdit\nfrom PyQt5.QtGui import QDesktopServices, QIcon\nfrom PyQt5.QtCore import QUrl, pyqtSignal, QSize\nfrom RepTate.theories.theory_helpers import FlowMode\nfrom RepTate.gui import bob_LVE\n\nclass TheoryBobNLVE(CmdBase):\n    """"""Predict the nonlinear rheology of ""branch-on-branch"" polymers, read from a polymer configuration file,\n    using BoB v2.5 (Chinmay Das and Daniel Read).\n    Polymer configuration files can be generated from the React application in RepTate.\n\n    The original documentation of BoB can be found here: `<https://sourceforge.net/projects/bob-rheology/files/bob-rheology/bob2.3/bob2.3.pdf/download>`_.\n    """"""\n    thname = \'BOB\'\n    description = \'Branch-On-Branch rheology\'\n    citations = [\'Das C. et al., J. Rheol. 2006, 50, 207-234\']\n    doi = [""http://dx.doi.org/10.1122/1.2167487""]\n\n    def __new__(cls, name=\'\', parent_dataset=None, axarr=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return GUITheoryBobNLVE(\n            name, parent_dataset,\n            axarr) if (CmdBase.mode == CmdMode.GUI) else CLTheoryBobNLVE(\n                name, parent_dataset, axarr)\n\n\nclass BaseTheoryBobNLVE:\n    """"""Base class for both GUI and CL""""""\n    html_help_file = \'https://reptate.readthedocs.io/manual/Applications/NLVE/Theory/theory.html#bob-nlve\'\n    single_file = False  # False if the theory can be applied to multiple files simultaneously\n    thname = TheoryBobNLVE.thname\n    citations = TheoryBobNLVE.citations\n    doi = TheoryBobNLVE.doi \n\n    signal_param_dialog = pyqtSignal(object)\n\n    def __init__(self, name=\'ThBobLVE\', parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        self.function = self.calculate  # main theory function\n        self.has_modes = False  # True if the theory has modes\n        self.signal_param_dialog.connect(self.launch_param_dialog)\n        self.polyconf_file_out = None  # full path of target polyconf file\n        self.bch = BobCtypesHelper(self)\n        self.autocalculate = False\n        self.freqint = 1.1 #\xc2\xa0BoB theory points spaced by log10(freqint)\n        self.do_priority_seniority = False\n        self.init_flow_mode()\n        self.success_dialog = False\n        self.argv = None\n        self.inp_counter = 0 # counter for the \'virtual\' input file for BoB\n        self.virtual_input_file = [] # \'virtual\' input file for BoB\n\n    def init_flow_mode(self):\n        """"""Find if data files are shear or extension""""""\n        try:\n            f = self.theory_files()[0]\n            if f.file_type.extension == \'shear\':\n                self.flow_mode = FlowMode.shear\n            else:\n                self.flow_mode = FlowMode.uext\n        except Exception as e:\n            print(""in RP init:"", e)\n            self.flow_mode = FlowMode.shear  #default mode: shear\n\n    def request_stop_computations(self):\n        """"""Called when user wants to terminate the current computation""""""\n        self.Qprint(\'<font color=red><b>Stop current calculation requested</b></font>\')\n        self.bch.set_flag_stop_bob(ctypes.c_bool(True))\n\n    def do_error(self, line=""""):\n        """"""This theory does not calculate the error""""""\n        pass\n\n\n    def calculate(self, f=None):\n        """"""Create polymer configuration file and calculate distribution characteristics""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        self.freqmax = 1.0 / f.data_table.mincol(0)\n        self.freqmin = 1.0 / f.data_table.maxcol(0)\n        \n        #show form if not filled yet\n        if not self.success_dialog:\n            self.signal_param_dialog.emit(self)\n            self.success_dialog = None\n            while self.success_dialog is None:  # wait for the end of QDialog\n                # TODO: find a better way to wait for the dialog thread to finish\n                time.sleep(0.5)\n        if not self.success_dialog:\n            self.Qprint(\'Operation cancelled\')\n            return\n        QApplication.processEvents()\n        self.bch.link_c_callback()\n        self.bch.set_do_priority_seniority(ctypes.c_bool(self.do_priority_seniority))\n        \n        # Run BoB C++ code\n        self.start_time_cal = time.time()\n        flowrate = float(f.file_parameters[""gdot""])\n        tmin = ft.data[0, 0]\n        tmax = ft.data[-1, 0]\n        is_shear = self.flow_mode == FlowMode.shear\n        self.Qprint(""<hr><h3>rate %.3g s<sup>-1</sup></h3>"" % flowrate)\n        try:\n            time_arr, stress_arr = self.bch.return_bob_nlve(self.argv, flowrate, tmin, tmax, is_shear)\n        except BobError:\n            self.Qprint(\'Operation cancelled\')\n            return\n\n        #copy results to RepTate data file\n        if time:\n            tt.num_columns = ft.num_columns\n            tt.num_rows = len(time_arr)\n            tt.data = np.zeros((tt.num_rows, tt.num_columns))\n            tt.data[:, 0] = time_arr[:]\n            tt.data[:, 1] = stress_arr[:]\n            # tt.data[:, 2] =\n\n    def do_fit(self, line=\'\'):\n        self.Qprint(""Fitting not allowed in this theory"")\n\nclass CLTheoryBobNLVE(BaseTheoryBobNLVE, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name=\'\', parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # This class usually stays empty\n\n\nclass GUITheoryBobNLVE(BaseTheoryBobNLVE, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name=\'\', parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        # temp_dir = os.path.join(\'theories\', \'temp\')\n        # #create temp folder if does not exist\n        # if not os.path.exists(temp_dir):\n        #     os.makedirs(temp_dir)\n        self.selected_file = None\n        self.setup_dialog()\n\n        # add widgets specific to the theory\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n\n        self.tbutflow = QToolButton()\n        self.tbutflow.setPopupMode(QToolButton.MenuButtonPopup)\n        menu = QMenu()\n        self.shear_flow_action = menu.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icon-shear.png\'), ""Shear Flow"")\n        self.extensional_flow_action = menu.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icon-uext.png\'),\n            ""Extensional Flow"")\n        if self.flow_mode == FlowMode.shear:\n            self.tbutflow.setDefaultAction(self.shear_flow_action)\n        else:\n            self.tbutflow.setDefaultAction(self.extensional_flow_action)\n        self.tbutflow.setMenu(menu)\n        tb.addWidget(self.tbutflow)\n\n        #BOB settings buttons\n        self.bob_settings_button = tb.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-BoB-settings.png\'),\n            ""Edit BoB\'s input polyconf. file and material parameters"")\n\n        self.thToolsLayout.insertWidget(0, tb)\n\n        connection_id = self.shear_flow_action.triggered.connect(\n            self.select_shear_flow)\n        connection_id = self.extensional_flow_action.triggered.connect(\n            self.select_extensional_flow)\n        connection_id = self.bob_settings_button.triggered.connect(\n            self.launch_param_dialog)\n\n    def select_shear_flow(self):\n        self.flow_mode = FlowMode.shear\n        self.tbutflow.setDefaultAction(self.shear_flow_action)\n\n    def select_extensional_flow(self):\n        self.flow_mode = FlowMode.uext\n        self.tbutflow.setDefaultAction(self.extensional_flow_action)\n\n    def get_file_name(self):\n        """"""Open a dialog to choose a file containing the polymer configuration for BoB""""""\n        # file browser window\n        options = QFileDialog.Options()\n        dir_start = os.path.join(RepTate.root_dir, ""data"", ""React"")\n        dilogue_name = ""Select a Polymer Configuration File""\n        ext_filter = ""Data Files (*.dat)""\n        selected_file, _ = QFileDialog.getOpenFileName(\n            self, dilogue_name, dir_start, ext_filter, options=options)\n        self.selected_file = selected_file\n        self.d.selected_file.setText(os.path.basename(selected_file))\n\n    def num_file_lines(self, fname):\n        """"""Return the number of lines in the file `fname`""""""\n        with open(fname) as f:\n            i = 0\n            for _, l in enumerate(f):\n                i += 1 \n            return i + 1\n\n    def setup_dialog(self):\n        """"""Load the form dialog from bob_LVE.py""""""\n        self.dialog = QDialog(self)\n        self.dialog.ui = bob_LVE.Ui_Dialog()\n        self.dialog.ui.setupUi(self.dialog)\n        self.d = self.dialog.ui\n        self.d.pb_pick_file.clicked.connect(self.get_file_name)\n        self.d.selected_file.setStyleSheet(""color : blue ;"")\n        # connect button OK\n        self.d.pb_ok.clicked.connect(self.handle_pb_ok)\n        self.d.pb_ok.setDefault(True)\n        # connect button Cancel\n        self.d.pb_cancel.clicked.connect(self.dialog.reject)\n        # connect button Help\n        self.d.pb_help.clicked.connect(\n            self.handle_help_button)\n\n    def handle_pb_ok(self):\n        """"""Define the OK button role. If something is wrong, keep the dialog open""""""\n        if self.selected_file is None:\n            QMessageBox.warning(\n                self, \'Select Input Polyconf\',\n                \'Please select a file for BoB to read the polymer configuration\')\n        else:    \n            self.dialog.accept()\n\n    def handle_help_button(self):\n        """"""When Help button of dialog box is clicked, show BoB manual (pdf)""""""\n        bob_manual_pdf = \'docs%ssource%smanual%sApplications%sReact%sbob2.3.pdf\' % (\n            (os.sep, ) * 5)\n        QDesktopServices.openUrl(QUrl.fromLocalFile(bob_manual_pdf))\n\n    def create_bob_input_file(self, nlines, inpf):\n        """"""Create a file containing the input BoB parameters from the form dialog""""""\n        # with open(inpf, \'w\') as tmp:\n        #     #1 memory\n        #     npol = max(nlines, float(self.d.n_polymers.text()))\n        #     nseg = max(nlines, float(self.d.n_segments.text()))\n\n        #     tmp.write(\'%d %d\\n\' % (npol, nseg))\n        #     #2 alpha\n        #     tmp.write(\'%.6g\\n\' % float(self.d.alpha.text()))\n        #     #3 dummy ""1""\n        #     tmp.write(\'1\\n\')\n        #     # 4 M0, Ne, density\n        #     M0 = float(self.d.m0.text())\n        #     Ne = float(self.d.ne.text())\n        #     density = float(self.d.density.text())\n        #     tmp.write(\'%.6g %.6g %.6g\\n\' % (M0, Ne, density))\n        #     #5 tau_e, T\n        #     taue = float(self.d.taue.text())\n        #     temperature = float(self.d.temperature.text())\n        #     tmp.write(\'%.6g %.6g\\n\' % (taue, temperature))\n        #     #6 write ""0"" so BoB reads a polyconf file\n        #     tmp.write(\'0\\n\')\n        tmp = []\n        #1 memory\n        npol = max(nlines, float(self.d.n_polymers.text()))\n        nseg = max(nlines, float(self.d.n_segments.text()))\n        tmp.append(npol)\n        tmp.append(nseg)\n        #2 alpha\n        tmp.append(float(self.d.alpha.text()))\n        #3 dummy ""1""\n        tmp.append(1)\n        # 4 M0, Ne, density\n        M0 = float(self.d.m0.text())\n        Ne = float(self.d.ne.text())\n        density = float(self.d.density.text())\n        tmp.append(M0)\n        tmp.append(Ne)\n        tmp.append(density)\n        #5 tau_e, T\n        taue = float(self.d.taue.text())\n        temperature = float(self.d.temperature.text())\n        tmp.append(taue)\n        tmp.append(temperature)\n        #6 write ""0"" so BoB reads a polyconf file\n        tmp.append(0)\n        self.virtual_input_file = tmp + tmp # twice, for the two NLVE passes in bob\n\n    def launch_param_dialog(self):\n        """"""Show a dialog to get the filename of the polymer configuration.\n        This function is called via a pyqtSignal for multithread compatibility""""""\n        if not self.dialog.exec_():\n            self.success_dialog = False\n            return\n        conffile = self.selected_file\n        if not self.is_ascii(conffile):\n            # ok_path = os.path.join(\'theories\', \'temp\', \'target_polyconf.dat\')\n            # copy2(conffile, ok_path)\n            # conffile = ok_path\n            self.Qprint(""<font color=orange><b>\\""%s\\"" contains non-ascii characters. BoB might not like it...</b></font>"" % conffile)\n            print(""\\""%s\\"" contains non-ascii characters. BoB might not like it..."" % conffile)\n        if conffile == \'\' or os.path.splitext(conffile)[1] == \'\':\n            self.Qprint(""<font color=red><b>Set the output filepath to write the polyconf file</b></font>"")\n            return\n        nlines = self.num_file_lines(conffile)\n        # inpf = os.path.join(\'theories\', \'temp\', \'temp_inpf.dat\')\n        inpf = \'inpf.dat\' # dummy name\n        self.create_bob_input_file(nlines, inpf)\n\n        # BoB main arguments\n        self.argv = [""./bob"", ""-i"", inpf, ""-c"", conffile]\n        self.success_dialog = True\n\n    def is_ascii(self, s):\n        """"""Check if `s` contains non ASCII characters""""""\n        try:\n            s.encode(\'ascii\')\n            return True\n        except UnicodeEncodeError:\n            return False'"
RepTate/theories/TheoryCarreauYasuda.py,9,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryCarreauYasuda\n\nCarreau-Yasuda equation for the complex viscosity\n""""""\nimport numpy as np\nfrom math import sqrt\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\n\nfrom PyQt5.QtWidgets import QToolBar\nfrom PyQt5.QtCore import QSize\n\n\nclass TheoryCarreauYasuda(CmdBase):\n    """"""Fit the complex viscosity with the Carreau-Yasuda equation.\n    \n    * **Function**\n        .. math::\n            \\\\eta^*(\\\\omega) = \\\\eta_\\\\infty + (\\\\eta_0-\\\\eta_\\\\infty)\\\\left( 1 + (\\\\lambda\\\\omega)^a \\\\right)^{(n-1)/a}\n\n    * **Parameters**\n        - :math:`\\\\eta_0`: Viscosity at zero shear rate.\n        - :math:`\\\\eta_\\\\infty`: Viscosity at infinite shear rate.\n        - :math:`\\\\lambda`: Relaxation time.\n        - :math:`n`: Power law index.\n        - :math:`a`: Dimensionless parameter (2 in most cases)\n\n    """"""\n\n    thname = ""Carreau-Yasuda""\n    description = ""Carreau-Yasuda equation""\n    citations = []\n    doi = []\n\n    def __new__(cls, name="""", parent_dataset=None, ax=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryCarreauYasuda(name, parent_dataset, ax)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryCarreauYasuda(name, parent_dataset, ax)\n        )\n\n\nclass BaseTheoryCarreauYasuda:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/LVE/Theory/theory.html#carreau-yasuda-equation""\n    single_file = (\n        False  # False if the theory can be applied to multiple files simultaneously\n    )\n    thname = TheoryCarreauYasuda.thname\n    citations = TheoryCarreauYasuda.citations\n    doi = TheoryCarreauYasuda.doi\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n        self.function = self.function_CarreauYasuda  # main theory function\n        self.has_modes = False  # True if the theory has modes\n\n        self.parameters[""eta0""] = Parameter(\n            name=""eta0"",\n            value=1000,\n            description=""Zero shear rate viscosity"",\n            type=ParameterType.real,\n            opt_type=OptType.opt,\n        )\n        self.parameters[""etainf""] = Parameter(\n            name=""etainf"",\n            value=0,\n            description=""Infinite shear rate viscosity"",\n            type=ParameterType.real,\n            opt_type=OptType.opt,\n        )\n        self.parameters[""lambda""] = Parameter(\n            name=""lambda"",\n            value=100,\n            description=""Characteristic time"",\n            type=ParameterType.real,\n            opt_type=OptType.opt,\n        )\n        self.parameters[""n""] = Parameter(\n            name=""n"",\n            value=0.2,\n            description=""Characteristic exponent"",\n            type=ParameterType.real,\n            opt_type=OptType.opt,\n        )\n        self.parameters[""a""] = Parameter(\n            name=""a"",\n            value=1.0,\n            description=""Exponent a"",\n            type=ParameterType.real,\n            opt_type=OptType.opt,\n        )\n\n        # Estimate initial values of fitting parameters\n        w0 = self.parent_dataset.files[0].data_table.data[0, 0]\n        Gp0 = self.parent_dataset.files[0].data_table.data[0, 1]\n        Gpp0 = self.parent_dataset.files[0].data_table.data[0, 2]\n        eta0 = np.sqrt(Gp0 ** 2 + Gpp0 ** 2) / w0\n        self.set_param_value(""eta0"", eta0)\n\n        winf = self.parent_dataset.files[0].data_table.data[-1, 0]\n        Gpinf = self.parent_dataset.files[0].data_table.data[-1, 1]\n        Gppinf = self.parent_dataset.files[0].data_table.data[-1, 2]\n        etainf = np.sqrt(Gpinf ** 2 + Gppinf ** 2) / winf\n        self.set_param_value(""etainf"", etainf)\n\n        w = self.parent_dataset.files[0].data_table.data[:, 0]\n        Gp = self.parent_dataset.files[0].data_table.data[:, 1]\n        Gpp = self.parent_dataset.files[0].data_table.data[:, 2]\n        etastar = np.sqrt(Gp ** 2 + Gpp ** 2) / w\n\n        ind0 = np.argmax(etastar < 0.5 * eta0)\n        ind1 = len(etastar) - 1 - np.argmax(np.flipud(etastar) > 2.0 * etainf)\n        wa = w[ind0]\n        wb = w[ind1]\n        etaa = etastar[ind0]\n        etab = etastar[ind1]\n        n = (np.log10(etab) - np.log10(etaa)) / (np.log10(wb) - np.log10(wa)) + 1\n        self.set_param_value(""n"", n)\n\n        # eta = K*w^(n-1)\n        # K = etaa/wa^(n-1)\n        # eta0 = K*w0^(n-1) = etaa*(w0/wa)^(n-1)\n        # w0 = (eta0/K)^(1/(n-1)) = wa*(eta0/etaa)^(1/(n-1))\n        # lambda = 1/w0 = 1/wa*(etaa/eta0)^(1/(n-1))\n        lamda = 1.0 / wa * np.power(etaa / eta0, 1.0 / (n - 1))\n        self.set_param_value(""lambda"", lamda)\n\n    def function_CarreauYasuda(self, f=None):\n        """"""Carreau-Yasuda equation for the complex viscosity""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        tt.data[:, 0] = ft.data[:, 0]\n\n        eta0 = self.parameters[""eta0""].value\n        etainf = self.parameters[""etainf""].value\n        lamda = self.parameters[""lambda""].value\n        n = self.parameters[""n""].value\n        a = self.parameters[""a""].value\n\n        tt.data[:, 1] = tt.data[:, 2] = (\n            (\n                etainf\n                + (eta0 - etainf)\n                * np.power(1.0 + np.power(lamda * tt.data[:, 0], a), (n - 1.0) / a)\n            )\n            * tt.data[:, 0]\n            / sqrt(2)\n        )\n\n\nclass CLTheoryCarreauYasuda(BaseTheoryCarreauYasuda, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n\nclass GUITheoryCarreauYasuda(BaseTheoryCarreauYasuda, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n        # add widgets specific to the theory\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n'"
RepTate/theories/TheoryCreatePolyconf.py,23,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryCreatePolyconf\n\nCreatePolyconf file for creating a polymer configuration file using BoB version 2.5\nby Chinmay Das et al.\n""""""\nimport os\nimport numpy as np\nimport enum\nimport RepTate\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom collections import OrderedDict\nimport time\n\nimport ctypes\nfrom RepTate.theories.BobCtypesHelper import BobCtypesHelper, BobError\nfrom RepTate.gui import bob_gen_poly # dialog\nfrom PyQt5.QtWidgets import (\n    QDialog,\n    QFormLayout,\n    QWidget,\n    QLineEdit,\n    QLabel,\n    QComboBox,\n    QFileDialog,\n    QMessageBox,\n    QApplication,\n    QToolBar,\n)\nfrom PyQt5.QtGui import QIntValidator, QDoubleValidator, QDesktopServices, QIcon\nfrom PyQt5.QtCore import QUrl, pyqtSignal, QSize, Qt, QVariant\n\n\nclass DistributionType(enum.Enum):\n    """"""Type of molecular weight distribution""""""\n\n    Monodisperse = 0\n    Gaussian = 1\n    LogNormal = 2\n    Poisson = 3\n    Flory = 4\n\n\nclass ArchitectureType(enum.Enum):\n    """"""Type of polymer architecture and expected parameters as input for BoB""""""\n\n    Linear = {\n        ""name"": ""Linear Polymer"",\n        ""def"": [0, ""Distr."", ""Mw (g/mol)"", ""PDI""],\n        ""descr"": ""Linear polymer"",\n    }\n    Star = {\n        ""name"": ""Star Polymer"",\n        ""def"": [1, ""Distr."", ""Mw (g/mol)"", ""PDI"", """", ""Num. arm""],\n        ""descr"": ""Star polymer"",\n    }\n    AsymStar = {\n        ""name"": ""Asymetric Star"",\n        ""def"": [\n            2,\n            ""Distr. long"",\n            ""Mw long (g/mol)"",\n            ""PDI long"",\n            """",\n            ""Distr. short"",\n            ""Mw short"",\n            ""PDI short"",\n        ],\n        ""descr"": ""Star with two arms of equal length and the third arm having a different length. Only 3 arm stars are created"",\n    }\n    H = {\n        ""name"": ""H Polymer"",\n        ""def"": [\n            3,\n            ""Distr. side"",\n            ""Mw side (g/mol)"",\n            ""PDI side"",\n            """",\n            ""Distr. cross"",\n            ""Mw cross"",\n            ""PDI cross"",\n        ],\n        ""descr"": ""H polymers have one cross-bar and four segments attached to the crossbar"",\n    }\n    PoissComb = {\n        ""name"": ""Poisson Comb"",\n        ""def"": [\n            4,\n            ""Distr. backbone"",\n            ""Mw backbone (g/mol)"",\n            ""PDI backbone"",\n            """",\n            ""Distr. side"",\n            ""Mw side (g/mol)"",\n            ""PDI side"",\n            """",\n            ""Num. arm"",\n        ],\n        ""descr"": ""Comb having Poisson distr.ributed number of side arms connected at random places on the backbone"",\n    }\n    FixComb = {\n        ""name"": ""Fixed Comb"",\n        ""def"": [\n            5,\n            ""Distr. backbone"",\n            ""Mw backbone (g/mol)"",\n            ""PDI backbone"",\n            """",\n            ""Distr. side"",\n            ""Mw side (g/mol)"",\n            ""PDI side"",\n            """",\n            ""Num. arm"",\n        ],\n        ""descr"": ""Comb having fixed number of side arms connected at random places on the backbone"",\n    }\n    CouplComb = {\n        ""name"": ""Coupled Comb"",\n        ""def"": [\n            6,\n            ""Distr. backbone"",\n            ""Mw backbone (g/mol)"",\n            ""PDI backbone"",\n            """",\n            ""Distr. side"",\n            ""Mw side (g/mol)"",\n            ""PDI side"",\n            """",\n            ""Num. arm"",\n        ],\n        ""descr"": \'Attach two ""Poisson combs"" at some random point along the two backbones\',\n    }\n    ##########################\n    # Caylay type is handled in a special way. The strings below are not actually used.\n    Cayley3Arm = {\n        ""name"": ""Cayley 3-arm Core"",\n        ""def"": [\n            10,\n            ""Num. generation"",\n            """",\n            ""Distr. gen0"",\n            ""Mw gen0 (g/mol)"",\n            ""PDI gen0"",\n        ],\n        ""descr"": ""Cayley trees with 3 arm star inner core"",\n    }\n    CayleyLin = {\n        ""name"": ""Cayley Linear Core"",\n        ""def"": [\n            11,\n            ""Num. generation"",\n            """",\n            ""Distr. gen0"",\n            ""Mw gen0 (g/mol)"",\n            ""PDI gen0"",\n        ],\n        ""descr"": ""Cayley trees with linear inner core"",\n    }\n    Cayley4Arm = {\n        ""name"": ""Cayley 4-arm Core"",\n        ""def"": [\n            12,\n            ""Num. generation"",\n            """",\n            ""Distr. gen0"",\n            ""Mw gen0 (g/mol)"",\n            ""PDI gen0"",\n        ],\n        ""descr"": ""Cayley trees with 4 arm star inner core"",\n    }\n    ###########################\n    MpeNum = {\n        ""name"": ""MPE num-average"",\n        ""def"": [20, ""Mw (g/mol)"", ""Branch/molecule""],\n        ""descr"": ""Metallocene catalyzed polyethylene with number-based sampling"",\n    }\n    MpeWt = {\n        ""name"": ""MPE weight-average"",\n        ""def"": [21, ""Mw (g/mol)"", ""Branch/molecule""],\n        ""descr"": ""Metallocene catalyzed polyethylene with weight-based sampling"",\n    }\n    Gel = {\n        ""name"": ""Gel"",\n        ""def"": [25, ""Mn (g/mol)"", ""Up Branch. proba.""],\n        ""descr"": ""Gelation ensemble"",\n    }\n    Proto = {\n        ""name"": ""Prototype"",\n        ""def"": [40, \'Go to ""Result"" tab\'],\n        ""descr"": ""Polymer prototype from file (user defined)"",\n    }\n    FromFile = {\n        ""name"": ""From File"",\n        ""def"": [60, ""From file""],\n        ""descr"": ""User supplied pre-generated polymers file"",\n    }\n\n\nclass TheoryCreatePolyconf(CmdBase):\n    """"""Create polymer configuration files using BoB v2.5 (Chinmay Das and Daniel Read).\n    The configuration file created with this theory can then be analysed\n    in the BoB LVE theory, in the LVE application of RepTate.\n\n    The original documentation of BoB can be found here: `<https://sourceforge.net/projects/bob-rheology/files/bob-rheology/bob2.3/bob2.3.pdf/download>`_.\n    \n    * **Parameters**\n       - ``M0`` : Mass of a Monomer\n       - ``Ne`` : Number of monomers in an entanglement length\n       - ``Ratio`` : Ratio weight fraction occupied by component\n       - ``Architecture`` : Polymer architecture type (e.g. Linear, Star, Comb, etc.)\n       - ``Num. of polymer`` : Number of polymers to generate of the above architecture type\n       - ``Num. generations`` : Number of generations (for Cayley architecture type only)\n       - ``Distr.`` : Molecular weight distribution (e.g. Monodisperse, LogNormal, etc.)\n       - ``Mw`` : Weight-average molecular weight\n       - ``PDI`` : Polydispersity index (PDI :math:`=M_w/M_n`)\n    """"""\n\n    thname = ""BOB Architecture""\n    description = ""Create and Save Polymer Configuration with BOB""\n    citations = [""Das C. et al, J. Rheol. 2006, 50, 207-234""]\n    doi = [""http://dx.doi.org/10.1122/1.2167487""]\n\n    def __new__(cls, name="""", parent_dataset=None, axarr=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryCreatePolyconf(name, parent_dataset, axarr)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryCreatePolyconf(name, parent_dataset, axarr)\n        )\n\n\nclass BaseTheoryCreatePolyconf:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = ""https://reptate.readthedocs.io/manual/Applications/React/Theory/BoB_polyconf.html""\n    single_file = (\n        True  # False if the theory can be applied to multiple files simultaneously\n    )\n    thname = TheoryCreatePolyconf.thname\n    citations = TheoryCreatePolyconf.citations\n    doi = TheoryCreatePolyconf.doi\n\n    signal_param_dialog = pyqtSignal(object)\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        self.reactname = ""CreatePolyconf""\n        self.function = self.calculate  # main theory function\n        self.has_modes = False  # True if the theory has modes\n        self.signal_param_dialog.connect(self.launch_param_dialog)\n        self.parameters[""nbin""] = Parameter(\n            name=""nbin"",\n            value=50,\n            description=""Number of molecular weight bins"",\n            type=ParameterType.integer,\n            opt_type=OptType.const,\n            min_value=1,\n        )\n        self.polyconf_file_out = None  # full path of target polyconf file\n        self.autocalculate = False\n        self.bch = BobCtypesHelper(self)\n        self.do_priority_seniority = False\n        self.inp_counter = 0  # counter for the \'virtual\' input file for BoB\n        self.virtual_input_file = []  # \'virtual\' input file for BoB\n        self.proto_counter = 0  # counter for the \'virtual\' proto file for BoB\n        self.virtual_proto_file = []  # \'virtual\' proto file for BoB\n        self.from_file_filename = []  # file names of the ""from file"" type\n        self.from_file_filename_counter = 0  # counter\n        self.protoname = []  # list of proto/polycode names\n\n    def request_stop_computations(self):\n        """"""Called when user wants to terminate the current computation""""""\n        self.Qprint(""<font color=red><b>Stop current calculation requested</b></font>"")\n        self.bch.set_flag_stop_bob(ctypes.c_bool(True))\n\n    def do_error(self, line=""""):\n        """"""This theory does not calculate the error""""""\n        pass\n\n    def calculate(self, f=None):\n        """"""Create polymer configuration file and calculate distribution characteristics""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        # show form\n        self.success_dialog = None\n        self.signal_param_dialog.emit(self)\n        while self.success_dialog is None:  # wait for the end of QDialog\n            time.sleep(\n                0.5\n            )  # TODO: find a better way to wait for the dialog thread to finish\n        if not self.success_dialog:\n            self.Qprint(""Operation cancelled"")\n            return\n\n        # Run BoB C++ code\n        gpc_out = []\n        QApplication.processEvents()\n        self.bch.link_c_callback()\n        self.bch.set_do_priority_seniority(ctypes.c_bool(self.do_priority_seniority))\n        self.start_time_cal = time.time()\n        try:\n            mn, mw, gpc_out = self.bch.save_polyconf_and_return_gpc(\n                self.argv, self.npol_tot\n            )\n        except BobError:\n            self.Qprint(""Operation cancelled"")\n            return\n\n        # copy results to RepTate data file\n        if gpc_out:\n            if not self.is_ascii(self.polyconf_file_out):\n                pass\n                # #copy file to selected loaction\n                # temp_polyconf = os.path.join(\'theories\', \'temp\',\n                #                              \'temp_polyconf.dat\')\n                # copy2(temp_polyconf, self.polyconf_file_out)\n\n            try:\n                self.Qprint(""<br><b>Mn=%.3g, Mw=%.3g, PDI=%.3g</b>"" % (mn, mw, mw / mn))\n            except ZeroDivisionError:\n                self.Qprint(""<br><b>Mn=%.3g, Mw=%.3g</b>"" % (mn, mw))\n            self.Qprint(\n                \'<br><b>Polymer configuration written in</b><i>""%s""</i><br>\'\n                % self.polyconf_file_out\n            )\n\n            # copy results to data series\n            lgmid_out, wtbin_out, brbin_out, gbin_out = gpc_out\n            tt.num_columns = ft.num_columns\n            tt.num_rows = len(lgmid_out)\n            tt.data = np.zeros((tt.num_rows, tt.num_columns))\n            tt.data[:, 0] = lgmid_out[:]\n            tt.data[:, 1] = wtbin_out[:]\n            tt.data[:, 2] = gbin_out[:]\n            tt.data[:, 3] = brbin_out[:]\n\n\nclass CLTheoryCreatePolyconf(BaseTheoryCreatePolyconf, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # This class usually stays empty\n\n\nclass GUITheoryCreatePolyconf(BaseTheoryCreatePolyconf, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        self.ncomponent = 1\n        self.trash_indices = []\n        self.dict_component = OrderedDict()\n        self.setup_dialog()\n        self.flag_prototype = 0\n\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n        self.btn_prio_senio = tb.addAction(\n            QIcon("":/Icon8/Images/new_icons/priority_seniority.png""),\n            ""Calculate Priority and Seniority (can take some time)"",\n        )\n        self.btn_prio_senio.setCheckable(True)\n        self.btn_prio_senio.setChecked(self.do_priority_seniority)\n        self.thToolsLayout.insertWidget(0, tb)\n\n        self.btn_prio_senio.triggered.connect(self.handle_btn_prio_senio)\n\n    def handle_btn_prio_senio(self, checked):\n        """"""Change do_priority_seniority""""""\n        self.do_priority_seniority = checked\n\n    def setup_dialog(self):\n        """"""Create the dialog to setup the polymer configuration""""""\n        # create form\n        self.dialog = QDialog(self)\n        self.dialog.ui = bob_gen_poly.Ui_Dialog()\n        self.dialog.ui.setupUi(self.dialog)\n        self.d = self.dialog.ui\n        self.d.pb_pick_file.clicked.connect(self.get_file_name)\n        self.d.selected_file.setStyleSheet(""color : blue ;"")\n        self.d.polymer_tab.setTabsClosable(True)\n        # connect close tab\n        self.d.polymer_tab.tabCloseRequested.connect(self.handle_close_polymer_tab)\n        # connect button Apply\n        self.d.pb_apply.clicked.connect(self.handle_apply_button)\n        # connect button Help\n        self.d.pb_help.clicked.connect(self.handle_help_button)\n        # connect button OK\n        self.d.pb_ok.clicked.connect(self.handle_pb_ok)\n        # connect button Cancel\n        self.d.pb_cancel.clicked.connect(self.dialog.reject)\n        # connect button Add component\n        self.d.add_button.clicked.connect(self.handle_add_component)\n        # connect combobox architecture type\n        self.d.cb_type.currentTextChanged.connect(self.handle_architecture_type_changed)\n        # fill combobox\n        i = 0\n        for e in ArchitectureType:\n            self.d.cb_type.addItem(e.value[""name""], QVariant(e.name))\n            self.d.cb_type.setItemData(i, e.value[""descr""], Qt.ToolTipRole)\n            i += 1\n        # pre-fill the prototype text box\n        self.d.proto_text.append(\n            """"""FunStar\n3\n-1 -1 1 2 0 10000 1.0\n0 2 -1 -1 2 12000 1.4\n0 1 -1 -1 4 18000 2.0\nFunH\n5\n-1 -1 1 2 2 10000 1.2\n-1 -1 0 2 2 12000 1.01\n0 1 3 4   2 25000 1.4\n2 4 -1 -1 2 11000 1.1\n2 3 -1 -1 2 13000 1.05\n""""""\n        )\n\n    def handle_pb_ok(self):\n        """"""Define the OK button role. If something is wrong, keep the dialog open""""""\n        if self.handle_apply_button():\n            self.dialog.accept()\n\n    def handle_apply_button(self):\n        """"""When Apply button of dialog box is clicked,\n        fill the ""Result"" widget with the data expected by BoB""""""\n        if self.polyconf_file_out is None:\n            QMessageBox.warning(\n                self,\n                ""Select Output Polyconf"",\n                ""Please select a file for BoB to save the polymer configuration"",\n            )\n            return False\n        ncomponents = self.d.polymer_tab.count()\n        if ncomponents < 1:\n            QMessageBox.warning(\n                self,\n                ""No polymers in the mix"",\n                \'At least one component is needed\\nSelect a polymer architecture and click ""Add""\',\n            )\n            return False\n        self.from_file_filename_counter\n        self.npol_tot = 0  # total number of polymers\n        tb = self.d.text_box\n        vinp = []  # self.virtual_input_file\n        # remove all current text\n        tb.clear()\n\n        # 1 memory line\n        tb.append(\n            ""%d %d"" % (float(self.d.n_polymers.text()), float(self.d.n_segments.text()))\n        )\n        vinp.append(float(self.d.n_polymers.text()))\n        vinp.append(float(self.d.n_segments.text()))\n        # 2 alpha (not used)\n        tb.append(""1.0"")\n        vinp.append(1.0)\n        # 3 ""1"" for BoB \'compatibility\'\n        tb.append(""1"")\n        vinp.append(1)\n        # 4 M0, Ne, (density not used)\n        tb.append(""%.6g %.6g 0"" % (float(self.d.m0.text()), float(self.d.ne.text())))\n        vinp.append(float(self.d.m0.text()))\n        vinp.append(float(self.d.ne.text()))\n        vinp.append(0)\n        # 5 tau_e, T (not used)\n        tb.append(""0 0"")\n        vinp.append(0)\n        vinp.append(0)\n        # 6 number of component(s) in blend\n        tb.append(""%d"" % len(self.dict_component))\n        vinp.append(len(self.dict_component))\n\n        # 7.. the rest of the lines is specific to the architecture\n        tot_ratio = self.sum_ratios()  # summ all components ratios to define weights\n\n        for pol_dict in self.dict_component.values():\n            pol_type_list = ArchitectureType[pol_dict[""type""]].value[\n                ""def""\n            ]  # architecture type value\n            # 8.. weight\n            try:\n                w = float(pol_dict[""Ratio""].text()) / tot_ratio\n            except:\n                w = ""ERROR""\n            tb.append(""%.6g"" % w)\n            vinp.append(w)\n            # 9.. num. polymer and type\n            # float -> int conversion needed for e.g. ""1e6""\n            npol = int(float(pol_dict[""Num. of polymers""].text()))\n            type_number = pol_type_list[0]\n            tb.append(""%d %d"" % (npol, type_number))\n            vinp.append(npol)\n            vinp.append(type_number)\n            self.npol_tot += npol\n\n            if type_number in [10, 11, 12]:\n                # Cayley tree type: handle varible number of generations\n                ngen = pol_dict[""Num. generation""]\n                text = ""%s\\n"" % ngen\n                vinp.append(ngen)\n                for i in range(ngen + 1):\n                    text += self.poly_param_text(pol_dict, ""Distr. gen%d"" % i)\n                    vinp.append(self.poly_param_text(pol_dict, ""Distr. gen%d"" % i))\n                    text += self.poly_param_text(pol_dict, ""Mw gen%d (g/mol)"" % i)\n                    vinp.append(self.poly_param_text(pol_dict, ""Mw gen%d (g/mol)"" % i))\n                    text += self.poly_param_text(\n                        pol_dict, ""PDI gen%d"" % i\n                    ).rstrip()  # remove whitespace on right side\n                    vinp.append(self.poly_param_text(pol_dict, ""PDI gen%d"" % i))\n                    if i < ngen:\n                        text += ""\\n""\n            elif type_number == 40:\n                # prototype polymer\n                continue\n            else:\n                text = """"\n                for attr in pol_type_list[\n                    1:\n                ]:  # go over all attributes of the architecture type\n                    text += self.poly_param_text(pol_dict, attr)\n                    vinp.append(self.poly_param_text(pol_dict, attr))\n                if type_number == 60:\n                    # from file: remove the sting from virtual file\n                    self.from_file_filename.append(vinp[-1])\n                    vinp = vinp[:-1]\n            text = text.rstrip()\n            tb.append(text)  # remove whitespace on right side\n        tb.append(""\\n"")\n        # set current tab to the Text box ""result""\n        self.d.tabWidget.setCurrentIndex(2)\n        vinp = [float(y) for y in vinp if y != ""\\n""]\n        self.virtual_input_file = vinp\n        return True\n\n    def poly_param_text(self, pol_dict, attr):\n        """"""Return a string containing the value of the parameter ``attr``\n        or a  new line if ``attr`` is an empty string\n        """"""\n        if attr == """":\n            text = ""\\n""\n        else:\n            try:\n                val = pol_dict[attr].text()  # for QLineEdit (Mw, PDI, narm)\n            except:\n                val = DistributionType[\n                    pol_dict[attr].currentText()\n                ].value  # for Dist QComboBox\n            text = ""%s "" % val\n        return text\n\n    def sum_ratios(self):\n        """"""Return the (float) sum of the ratio of all polymer components\n        or 1 if there are none""""""\n        s = 0.0\n        for pol_dict in self.dict_component.values():\n            try:\n                s += float(pol_dict[""Ratio""].text())\n            except ValueError:\n                print(""ERROR in Ratio conversion"")\n        if s == 0.0:\n            s = 1.0\n        return s\n\n    def handle_help_button(self):\n        """"""When Help button of dialog box is clicked, show BoB manual (pdf)""""""\n        bob_manual_pdf = ""docs%ssource%smanual%sApplications%sReact%sbob2.3.pdf"" % (\n            (os.sep,) * 5\n        )\n        QDesktopServices.openUrl(QUrl.fromLocalFile(bob_manual_pdf))\n\n    def handle_architecture_type_changed(self, current_name):\n        """"""Activate/Desactivate the \'ngeneration\' widgets\n        specific to the Cayley types.\n        Called when the combobox \'Architecture\' is changed""""""\n        is_cayley = ""Cayley"" in current_name\n        self.d.ngeneration_label.setDisabled(not is_cayley)\n        self.d.sb_ngeneration.setDisabled(not is_cayley)\n\n    def handle_add_component(self):\n        """"""Add a tab with new polymer component in the dialog box""""""\n        pol_type = self.d.cb_type.currentData()  # enum type name\n        # re-use numbering of closed tabs (if any)\n        if self.trash_indices:\n            ind = min(self.trash_indices)\n            self.trash_indices.remove(ind)\n            pol_id = ""%s.%s"" % (pol_type, ind)\n        else:\n            pol_id = ""%s.%s"" % (pol_type, self.ncomponent)\n            self.ncomponent += 1\n        # define a new tab widget\n        tab_widget, success = self.create_new_tab(pol_id, pol_type)\n        index = self.d.polymer_tab.addTab(tab_widget, pol_id)\n        if success:\n            # if success, set new tab as active one\n            self.d.polymer_tab.setCurrentIndex(index)\n            tip = ArchitectureType[pol_type].value[""descr""]\n            self.d.polymer_tab.setTabToolTip(index, tip)\n        else:\n            self.handle_close_polymer_tab(index)\n\n    def create_new_tab(self, pol_id, pol_type):\n        """"""Return a new widget containing a form with all the parameters\n        specific to the polymer type ``pol_type``\n        """"""\n        widget = QWidget(self)\n        layout = QFormLayout()\n        pol_dict = OrderedDict([(""type"", pol_type),])  # Arch. enum type number\n\n        val_double = QDoubleValidator()\n        val_double.setBottom(0)  # set smallest double allowed in the form\n\n        e1 = QLineEdit()\n        e1.setValidator(val_double)\n        e1.setMaxLength(6)\n        e1.setText(self.d.ratio.text())\n        e1.setToolTip(""Ratio weight fraction occupied by this polymer type"")\n        label = QLabel(""Ratio"")\n        label.setToolTip(""Ratio weight fraction occupied by this polymer type"")\n        layout.addRow(label, e1)\n        pol_dict[""Ratio""] = e1\n\n        e2 = QLineEdit()\n        e2.setValidator(val_double)\n        e2.setText(self.d.number.text())\n        e2.setToolTip(""Number of polymers of this type"")\n        label2 = QLabel(""Num. of polymers"")\n        label2.setToolTip(""Number of polymers of this type"")\n        layout.addRow(label2, e2)\n        pol_dict[""Num. of polymers""] = e2\n        success = self.set_extra_lines(pol_type, layout, pol_dict)\n\n        self.dict_component[pol_id] = pol_dict\n        widget.setLayout(layout)\n        if success:\n            return widget, True\n        else:\n            return widget, False\n\n    def set_extra_lines(self, pol_type, layout, pol_dict):\n        """"""Add extra parameter lines related to the polymer architecture ``pol_type``\n        to the form layout\n        """"""\n        # return a list with the expected input parameters\n        pol_attr = ArchitectureType[pol_type].value[""def""]\n\n        if pol_attr[0] in [10, 11, 12]:\n            # handle the Cayley tree types\n            ngen = self.d.sb_ngeneration.value()\n            pol_dict[""Num. generation""] = ngen\n            for i in range(ngen + 1):\n                self.add_new_qline(\n                    ""Mw gen%d (g/mol)"" % i,\n                    ""1e4"",\n                    layout,\n                    pol_dict,\n                    tip=""Molecular weight of generation %d"" % i,\n                )\n                self.add_new_qline(\n                    ""PDI gen%d"" % i,\n                    ""1.2"",\n                    layout,\n                    pol_dict,\n                    tip=""Polydispersity index of generation %d"" % i,\n                )\n                self.add_cb_distribution(\n                    ""Distr. gen%d"" % i,\n                    layout,\n                    pol_dict,\n                    tip=""Molecular weight distribution of generation %d"" % i,\n                )\n\n        elif pol_attr[0] == 40:\n            # type 40: give a text box that must be saved to a temp file\n            label = pol_attr[1]\n            layout.addRow(QLabel(""""), QLabel(label))\n            pol_dict[label] = label\n            self.flag_prototype += 1\n            self.d.proto_text.setDisabled(False)\n            self.d.proto_label.setDisabled(False)\n\n        elif pol_attr[0] == 60:\n            # handle the ""from file"" type\n            attr = pol_attr[1]\n            fpath = self.get_file_path()\n            if fpath == """":\n                return False\n            if not self.is_ascii(fpath):\n                # # copy file\n                # ok_path = os.path.join(\'theories\', \'temp\', \'my_polyconf.dat\')\n                # copy2(fpath, ok_path)\n                # fpath = ok_path\n                self.Qprint(\n                    \'<font color=orange><b>""%s"" contains non-ascii characters. BoB might not like it...</b></font>\'\n                    % fpath\n                )\n                print(\n                    \'""%s"" contains non-ascii characters. BoB might not like it...\'\n                    % fpath\n                )\n            self.add_new_qline(attr, fpath, layout, pol_dict, editable=False)\n        else:\n            for attr in pol_attr[1:]:\n                if ""arm"" in attr:\n                    if pol_attr[0] in [4, 6]:\n                        # comb Poisson distribution (double)\n                        self.add_new_qline(\n                            attr,\n                            ""4.2"",\n                            layout,\n                            pol_dict,\n                            tip=""Average number of arms per molecules"",\n                        )\n                    else:\n                        # star or comb with fixed number of arms (integer)\n                        self.add_new_qline(\n                            attr,\n                            ""3"",\n                            layout,\n                            pol_dict,\n                            QIntValidator(),\n                            tip=""Number of arms per molecule (integer)"",\n                        )\n                if ""Mw"" in attr:\n                    # add Mw line\n                    self.add_new_qline(\n                        attr,\n                        ""1e4"",\n                        layout,\n                        pol_dict,\n                        tip=""Weight-average molecular weight"",\n                    )\n                elif ""Mn"" in attr:\n                    # add Mn line\n                    self.add_new_qline(\n                        attr,\n                        ""1e4"",\n                        layout,\n                        pol_dict,\n                        tip=""Number-average molecular weight"",\n                    )\n                elif ""PDI"" in attr:\n                    # add PDI line\n                    self.add_new_qline(\n                        attr, ""1.2"", layout, pol_dict, tip=""Polydispersity index""\n                    )\n                elif ""Dist"" in attr:\n                    # add distribution combobox\n                    self.add_cb_distribution(\n                        attr, layout, pol_dict, tip=""Molecular weight distribution""\n                    )\n                elif ""/mol"" in attr:\n                    # add branch/molecule line\n                    self.add_new_qline(\n                        attr,\n                        ""0.1"",\n                        layout,\n                        pol_dict,\n                        tip=""Number of branch per molecule"",\n                    )\n                elif ""proba"" in attr:\n                    # add branching proba line\n                    self.add_new_qline(\n                        attr, ""0.2"", layout, pol_dict, tip=""Branching probability""\n                    )\n                elif attr == """":\n                    continue\n        return True  # success\n\n    def get_file_path(self):\n        """"""Select a polyconf file for BoB to read""""""\n        # file browser window\n        options = QFileDialog.Options()\n        dir_start = os.path.join(RepTate.root_dir, ""data"", ""React"")\n        dilogue_name = ""Select a Polymer Configuration File""\n        ext_filter = ""Data Files (*.dat)""\n        selected_file, _ = QFileDialog.getOpenFileName(\n            self, dilogue_name, dir_start, ext_filter, options=options\n        )\n        return selected_file\n\n    def add_new_qline(\n        self,\n        name,\n        default_val,\n        layout,\n        pol_dict,\n        validator=QDoubleValidator(),\n        tip="""",\n        editable=True,\n    ):\n        """"""Add a new line to the form layout containing a QLabel widget\n        for the parameter name and a QLineEdit to change the parameter value""""""\n        validator.setBottom(0)  # set smallest double allowed in the form\n        e = QLineEdit()\n        e.setValidator(validator)\n        e.setText(""%s"" % default_val)\n        e.setToolTip(tip)\n        e.setReadOnly(not editable)\n        label = QLabel(name)\n        label.setToolTip(tip)\n        layout.addRow(label, e)\n        pol_dict[name] = e\n\n    def add_cb_distribution(self, name, layout, pol_dict, tip=""""):\n        """"""Add a new line to the form layout containing a QLabel widget\n        for the parameter name and a QComboBox to change the parameter value""""""\n        cb = QComboBox()\n        for dtype in DistributionType:  # list the distribution names\n            cb.addItem(dtype.name)\n        cb.setCurrentIndex(2)  # log-normal by default\n        cb.setToolTip(tip)\n        label = QLabel(name)\n        label.setToolTip(tip)\n        layout.addRow(label, cb)\n        pol_dict[name] = cb\n\n    def handle_close_polymer_tab(self, index):\n        """"""Close a tab and delete dictionary entry\n        Called when the close-tab button is clicked""""""\n        name = self.d.polymer_tab.tabText(index)\n        ind = int("""".join(c for c in name if c.isdigit()))  # get the tab number\n        del self.dict_component[name]\n        self.d.polymer_tab.removeTab(index)\n        self.trash_indices.append(ind)\n        if ""Prototype"" in name:\n            self.flag_prototype -= 1\n            if self.flag_prototype == 0:\n                self.d.proto_text.setDisabled(True)\n                self.d.proto_label.setDisabled(True)\n\n    def launch_param_dialog(self):\n        """"""Show the dialog to set-up number of the polymer components in the mix\n        and all the relevant parameters for each component.\n        This function is called via a pyqtSignal for multithread compatibility""""""\n        if self.dialog.exec_():\n            # # create temporary file for BoB input\n            # temp_dir = os.path.join(\'theories\', \'temp\')\n            # #create temp folder if does not exist\n            # if not os.path.exists(temp_dir):\n            #     os.makedirs(temp_dir)\n\n            # # path to \'bob_inp.dat\'\n            # temp_inp = os.path.join(temp_dir, \'bob_inp.dat\')\n            temp_inp = ""bob_inp.dat""  # dummy name, virtual files used now\n            self.dump_text_to_file(temp_inp, self.d.text_box)\n\n            if self.flag_prototype > 0:\n                # path to \'poly.proto\'\n                temp_proto = os.path.join(temp_dir, ""poly.proto"")\n                self.dump_text_to_file(temp_proto, self.d.proto_text)\n                tmp = self.d.proto_text.toPlainText().split()\n                self.protoname = []\n                self.virtual_proto_file = []\n                for x in tmp:\n                    try:\n                        self.virtual_proto_file.append(float(x))\n                    except ValueError:\n                        self.protoname.append(x)\n                if len(self.protoname) < self.flag_prototype:\n                    # weak check on length of protofile\n                    self.Qprint(""Error in the prototype file"")\n                    return\n\n            # ask where to save the polymer config file\n            out_file = self.polyconf_file_out\n            tmp1, tmp2 = os.path.splitext(out_file)\n            if tmp2 == """":\n                self.Qprint(\n                    ""<font color=red><b>Set the output filepath to write the polyconf file</b></font>""\n                )\n            else:\n                if self.polyconf_file_out is not None:\n                    if not self.is_ascii(self.polyconf_file_out):\n                        # to avoid path name troubles\n                        # out_file = os.path.join(temp_dir, \'temp_polyconf.dat\') # commented: avoid create files\n                        self.Qprint(\n                            \'<font color=orange><b>""%s"" contains non-ascii characters. BoB might not like it...</b></font>\'\n                            % out_file\n                        )\n                        print(\n                            \'""%s"" contains non-ascii characters. BoB might not like it...\'\n                            % out_file\n                        )\n                    # BoB main arguments\n                    self.argv = [""./bob"", ""-i"", temp_inp, ""-c"", out_file, ""-p""]\n                    if self.flag_prototype > 0:\n                        self.argv.append(""-x"")\n                        self.argv.append(temp_proto)\n                    self.success_dialog = True\n                    return\n        self.success_dialog = False\n\n    def dump_text_to_file(self, temp_file, text_widget):\n        """"""NOT USED ANYMORE. Use virtual files only.\n        Dump the content of the ""result"" tab of the dialog box\n        into a file ``temp_file``""""""\n        pass\n        # with open(temp_file, \'w\') as tmp:\n        #     tmp.write(str(text_widget.toPlainText()))\n\n    def get_file_name(self):\n        """"""Launch a dialog for selecting a file where to save the\n        result of the polymer configuration created by BoB.\n        Return a string with a filename""""""\n        options = QFileDialog.Options()\n        options |= QFileDialog.DontConfirmOverwrite\n        dir_start = os.path.join(RepTate.root_dir, ""data"", ""React"", ""BoB_polyconf.dat"")\n        dilogue_name = ""Save BoB Polymer Configuration""\n        ext_filter = ""Data Files (*.dat)""\n        out_file = QFileDialog.getSaveFileName(\n            self, dilogue_name, dir_start, ext_filter, options=options\n        )\n        self.polyconf_file_out = out_file[0]\n        self.d.selected_file.setText(os.path.basename(out_file[0]))\n\n    def is_ascii(self, s):\n        """"""Check if `s` contains non ASCII characters""""""\n        try:\n            s.encode(""ascii"")\n            return True\n        except UnicodeEncodeError:\n            return False\n'"
RepTate/theories/TheoryDSMLinear.py,4,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryDSMLinear""""""\nimport numpy as np\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom scipy import special, optimize\n\n\nclass TheoryDSMLinear(CmdBase):\n    """"""Calculate the Discrete Slip Link theory for the linear rheology of linear entangled polymers.\n        \n    * **Parameters**""""""\n\n    thname = ""CFSM+Rouse""\n    description = ""Clustered Fixed Slip Link theory for linear entangled polymers""\n    citations = [\n        ""Katzarova, M. et al, Rheol Acta 2015, 54(3), 169-183."",\n        ""Andreev, M. et al., J. Rheol. 2014, 58(3), 723-736"",\n    ]\n    doi = [\n        ""https://doi.org/10.1007/s00397-015-0836-0"",\n        ""https://doi.org/10.1122%2F1.4869252"",\n    ]\n\n    def __new__(cls, name="""", parent_dataset=None, axarr=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryDSMLinear(name, parent_dataset, axarr)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryDSMLinear(name, parent_dataset, axarr)\n        )\n\n\nclass BaseTheoryDSMLinear:\n    """"""Base class for both GUI and CL""""""\n\n    # html_help_file = \'\'\n    single_file = (\n        False  # False if the theory can be applied to multiple files simultaneously\n    )\n    thname = TheoryDSMLinear.thname\n    citations = TheoryDSMLinear.citations\n    doi = TheoryDSMLinear.doi\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        self.function = self.calculate  # main theory function\n        self.has_modes = False  # True if the theory has modes\n\n        # Declare theory parameters and Material parameters\n        self.parameters[""MK""] = Parameter(\n            name=r""MK"",\n            value=300,\n            description=""Molecular weight of Kuhn step (Da)"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n            display_flag=True,\n        )\n\n        self.parameters[""rho0""] = Parameter(\n            name=r""rho0"",\n            value=1.0,\n            description=""Density (g/cc)"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n            display_flag=True,\n        )\n\n        self.parameters[""Mc""] = Parameter(\n            name=r""Mc"",\n            value=2000,\n            description=""Molecular weight of a cluster in Da"",\n            type=ParameterType.real,\n            opt_type=OptType.opt,\n            display_flag=True,\n        )\n\n        self.parameters[""tau_c""] = Parameter(\n            name=r""tau_c"",\n            value=0.1,\n            description=""Time constant used to fit CFSM results (beta = 1) to experimental data"",\n            type=ParameterType.real,\n            opt_type=OptType.opt,\n            display_flag=True,\n        )\n\n        # self.parameters[""beta""] = Parameter(\n        # name=r\'beta\',\n        # value=30,\n        # description=""Entanglement activity parameter for input to DSM simulations"",\n        # type=ParameterType.real,\n        # opt_type=OptType.opt,\n        # display_flag=True)\n\n        # self.parameters[""tau_K""] = Parameter(\n        #     name=r\'tau_K\',\n        #     value=tau_K,\n        #     description=""Time constant for comparing DSM results to experimental data"",\n        #     type=ParameterType.real,\n        #     opt_type=OptType.const,\n        #     display_flag=True)\n\n        # self.parameters[""Nc""] = Parameter(\n        #     name=r\'N_c\',\n        #     value=Nc,\n        #     description=""Number of entanglement clusters"",\n        #     type=ParameterType.real,\n        #     opt_type=OptType.const,\n        #     display_flag=True)\n\n        self.get_material_parameters()\n\n        ft = self.parent_dataset.files[0].data_table\n        Mw = (\n            float(parent_dataset.files[0].file_parameters[""Mw""]) * 1000.0\n        )  # units of Da\n        T = (\n            float(parent_dataset.files[0].file_parameters[""T""]) + 273.15\n        )  # In units of K\n        R = 8.314462 * 10 ** 3  # units of L Pa K^-1 mol^-1\n        rho0 = self.parameters[""rho0""].value\n        MK = self.parameters[""MK""].value\n        # ---------------------------------------------\n        # CALCULATE DSM PARAMETERS FROM CROSSOVER FREQUENCY\n        crossover_limits = self.find_crossover_limits(data=ft.data)\n        [omega_x, Gx] = self.Gslfx(crossover_limits, data=ft.data)\n        solNc = optimize.brentq(self.solveNc, a=1, b=1000, args=(Gx, Mw, rho0, R, T))\n        if solNc > 0:\n            self.Nc = solNc\n            self.Mc = Mw / self.Nc\n            self.set_param_value(""Mc"", self.Mc)\n            self.tau_c = 151.148 / (omega_x * self.Nc ** 3.50)\n            self.set_param_value(""tau_c"", self.tau_c)\n            self.beta = Mw / (0.56 * self.Nc * MK) - 1\n            # self.set_param_value(""beta"", self.beta)\n            self.tau_K = self.tau_c / (0.265 * self.beta ** (8.0 / 3.0))\n            self.N_K = Mw / MK\n\n    def tandelta(self, omega, data):\n        """"""Calculate the interpolated tan(delta)""""""\n\n        wGp = data[:, 0]\n        wGdp = data[:, 0]\n        Gp = data[:, 1]\n        Gdp = data[:, 2]\n\n        return np.interp(omega, wGdp, Gdp) / np.interp(omega, wGp, Gp) - 1\n\n    def solveNc(self, x, Gx, Mw, rho, R, T):\n        """"""Function to solve for Nc from frequency crossover data (linear chains only)""""""\n\n        GxGN0 = [9.191488, 2336.3116, 14232.0515, 33.81303697, 13102.47993, 1068.7744]\n\n        G0 = (\n            rho * R * T / (2 * Mw) * (x - 3)\n        )  # from our definition of R, G0 will have units of kPa\n\n        func = (GxGN0[0] + GxGN0[1] * (1 / x) + GxGN0[2] * ((1 / x) ** 2)) / (\n            GxGN0[3] + GxGN0[4] * (1 / x) + GxGN0[5] * ((1 / x) ** 2)\n        )\n\n        return func * G0 - Gx / 1000  # Gx has units of Pa\n\n    def Gslfx(self, crossover_limits, data):\n        """"""Function to find crossover frequency from limits""""""\n\n        sol = optimize.brentq(\n            self.tandelta, crossover_limits[0], crossover_limits[1], args=(data)\n        )\n        return sol, np.interp(sol, data[:, 0], data[:, 1])\n\n    def find_crossover_limits(self, data):\n        """"""Find the lower and upper limits of the crossover frequency""""""\n\n        omega = data[:, 0]\n        Gp = data[:, 1]\n        Gdp = data[:, 2]\n\n        for j in range(0, len(omega)):\n            if Gdp[j] - Gp[j] < 0:\n                if j < 10:\n                    ind1 = 0\n                else:\n                    ind1 = j - 10\n                if j + 10 >= len(omega):\n                    ind2 = len(omega) - 1\n                else:\n                    ind2 = j + 10\n\n                omega_range = [omega[ind1], omega[ind2]]\n\n                break\n\n        return omega_range\n\n    def set_linear_params(self, Nc):\n        """"""Returns fixed parameters for calculating linear chain G* data""""""\n\n        alpha1 = [-0.00051, -0.0205]\n        alpha2 = [0.00029, 0.109957]\n        alpha3 = [17.69589, 1.04026, -0.00095677]\n        tau1 = [0.6288876, 0.119458]\n        tau2 = [1.52508156, 0.02996758796795]\n        tau3 = [3.110954, 0.022615]\n        tau4 = [3.4840295, 0.0142809]\n\n        alpha = [\n            alpha1[0] * Nc + alpha1[1],\n            alpha2[0] * Nc + alpha2[1],\n            alpha3[0] / Nc + alpha3[1] + alpha3[2] * Nc,\n        ]\n        tau = [\n            tau1[1] * Nc ** tau1[0],\n            tau2[1] * Nc ** tau2[0],\n            tau3[1] * Nc ** tau3[0],\n            tau4[1] * Nc ** tau4[0],\n        ]\n\n        alphaR = [0.64635, -0.4959, -1.2716]\n        tauR = [\n            6.313268381616272 * (10 ** -9),\n            2.181509372282138 * (10 ** -7),\n            0.797317365925168,\n            18.201382525250114,\n        ]\n\n        GR = 1942.29\n\n        return [alpha, tau, alphaR, tauR, GR]\n\n    def supp_prod(self, tau, alpha, i):\n        """"""Returns the product operator used in the G* calculation""""""\n        result = 1\n        for j in range(1, i + 1):\n            result *= tau[j] ** (alpha[j - 1] - alpha[j])\n\n        return result\n\n    def Gstar(self, omega, params, Rouse=False):\n        """"""Calculates G* using DSM or Rouse parameters""""""\n\n        if Rouse:\n            alpha = params[2]\n            tau = params[3]\n            G0 = params[4]\n        else:\n            alpha = params[0]\n            tau = params[1]\n            G0 = params[5]\n\n        sumGp1 = 0\n        sumGp2 = 0\n        sumGdp1 = 0\n        sumGdp2 = 0\n        for i in range(0, len(alpha)):\n\n            sumGp1 += (self.supp_prod(tau, alpha, i) / (alpha[i] + 2)) * (\n                tau[i + 1] ** (alpha[i] + 2)\n                * special.hyp2f1(\n                    1,\n                    (alpha[i] + 2) / 2,\n                    (alpha[i] + 4) / 2,\n                    -(omega ** 2) * tau[i + 1] ** 2,\n                )\n                - tau[i] ** (alpha[i] + 2)\n                * special.hyp2f1(\n                    1,\n                    (alpha[i] + 2) / 2,\n                    (alpha[i] + 4) / 2,\n                    -(omega ** 2) * tau[i] ** 2,\n                )\n            )\n\n            sumGp2 += (\n                self.supp_prod(tau, alpha, i)\n                * (tau[i + 1] ** alpha[i] - tau[i] ** alpha[i])\n                / alpha[i]\n            )\n\n            sumGdp1 += (self.supp_prod(tau, alpha, i) / (alpha[i] + 1)) * (\n                tau[i + 1] ** (alpha[i] + 1)\n                * special.hyp2f1(\n                    1,\n                    (alpha[i] + 1) / 2,\n                    (alpha[i] + 3) / 2,\n                    -(omega ** 2) * tau[i + 1] ** 2,\n                )\n                - tau[i] ** (alpha[i] + 1)\n                * special.hyp2f1(\n                    1,\n                    (alpha[i] + 1) / 2,\n                    (alpha[i] + 3) / 2,\n                    -(omega ** 2) * tau[i] ** 2,\n                )\n            )\n\n            sumGdp2 += (\n                self.supp_prod(tau, alpha, i)\n                * (tau[i + 1] ** alpha[i] - tau[i] ** alpha[i])\n                / alpha[i]\n            )\n\n        return G0 * omega ** 2 * sumGp1 / sumGp2 + 1j * (G0 * omega * sumGdp1 / sumGdp2)\n\n    def do_error(self, line):\n        """"""Report the error of the current theory\n\nReport the error of the current theory on all the files, taking into account the current selected xrange and yrange.\n\nFile error is calculated as the mean square of the residual, averaged over all points in the file. Total error is the mean square of the residual, averaged over all points in all files.""""""\n        super().do_error(line)\n        self.print_DSM_params()\n\n    def print_DSM_params(self):\n        """"""Print out parameters for DSM simulations""""""\n\n        Mc = self.parameters[""Mc""].value\n        tau_c = self.parameters[""tau_c""].value\n        # beta = self.parameters[""beta""].value\n        MK = self.parameters[""MK""].value\n        beta = Mc / 0.56 / MK - 1.0\n        tau_K = tau_c / (0.265 * beta ** (8.0 / 3.0))\n\n        self.Qprint(""<b>Additional FSM Parameters:</b>"")\n        tab_data = [[""%-18s"" % ""Name"", ""%-18s"" % ""Value""]]\n        tab_data.append([""%-18s"" % ""<b>tau_K</b>"", ""%18.4g"" % tau_K])\n        tab_data.append([""%-18s"" % ""<b>beta</b>"", ""%18.4g"" % beta])\n        self.Qprint(tab_data)\n\n        tab_data = [[""%-18s"" % ""File"", ""%-18s"" % ""NK"", ""%-18s"" % ""Nc""]]\n        for f in self.theory_files():\n            Mw = float(f.file_parameters[""Mw""]) * 1000\n            NK = Mw / MK\n            Nc = Mw / Mc\n            tab_data.append([""%-18s"" % f.file_name_short, ""%18.4g"" % NK, ""%18.4g"" % Nc])\n        self.Qprint(tab_data)\n\n    def calculate(self, f=None):\n        """""" \n        CLUSTERED FIXED SLIP-LINK (CFSM) + ROUSE MODEL FOR LINEAR VISCOELASTICITY\n\n          PARAMETERS:\n          > Mc    - molecular weight of cluster\n          > Nc    - number of clusters\n          > tau_c - time constant to compare CFSM results to experimental data\n          > beta  - entanglement activity parameter for input to DSM simulations\n          > NK    - number of Kuhn steps for input into DSM simulation\n          > tau_K - time constant to compare DSM results to experimental data\n        """"""\n\n        # ---------------------------------------------\n        # FUNCTION INPUT\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        tt.data[:, 0] = ft.data[:, 0]\n\n        MK = self.parameters[""MK""].value\n        rho0 = self.parameters[""rho0""].value\n        Mw = float(f.file_parameters[""Mw""]) * 1000.0  # units of Da\n        T = float(f.file_parameters[""T""]) + 273.15  # units of K\n        R = 8.314462 * 10 ** 3  # units of L Pa K^-1 mol^-1\n\n        Mc = self.parameters[""Mc""].value\n        tau_c = self.parameters[""tau_c""].value\n        # beta = self.parameters[""beta""].value\n        beta = Mc / 0.56 / MK - 1.0\n        Nc = Mw / Mc\n        tau_K = tau_c / (0.265 * beta ** (8.0 / 3.0))\n        N_K = Mw / MK\n        # END FUNCTION INPUT\n        # ---------------------------------------------\n\n        # #---------------------------------------------\n        # # CALCULATE DSM PARAMETERS FROM CROSSOVER FREQUENCY\n        # crossover_limits = self.find_crossover_limits(data=ft.data)\n        # [omega_x, Gx] = self.Gslfx(crossover_limits,data=ft.data)\n        # solNc = optimize.brentq(self.solveNc,a=1,b=1000,args=(Gx,Mw,rho0,R,T))\n        # if solNc>0:\n        #     self.Nc = solNc\n        #     self.Mc = Mw/self.Nc\n        # self.tau_c = 151.148/(omega_x*self.Nc**3.50)\n        # self.beta = Mw/(0.56*self.Nc*MK) - 1\n        # self.tau_K = self.tau_c/(0.265*self.beta**(8.0/3.0))\n        # self.N_K = Mw/MK\n\n        # - - - - - - - - - - - - - - - - - - - - - - -\n        # CALCULATE CFSM AND HIGH FREQUENCY ROUSE RELAXATION MODULUS\n        params = self.set_linear_params(Nc)\n\n        G0 = rho0 * R * T / Mw\n        params.append(G0)\n\n        Gstar_vec = np.vectorize(self.Gstar, excluded=[""Rouse"", ""params""])\n\n        CFSM = (\n            0.5\n            * (Nc - 3)\n            * Gstar_vec(omega=tt.data[:, 0] * tau_c, params=params, Rouse=False)\n        )\n        prefactor = G0 * ((N_K + beta) / (beta + 1))\n        Rouse = prefactor * Gstar_vec(\n            omega=(tt.data[:, 0] * tau_K * (beta ** 2)), params=params, Rouse=True\n        )\n\n        Gstar = CFSM + Rouse  # G* has units of kPa\n\n        tt.data[:, 1] = Gstar.real * 1000  # convert to Pa\n        tt.data[:, 2] = Gstar.imag * 1000\n\n\nclass CLTheoryDSMLinear(BaseTheoryDSMLinear, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # This class usually stays empty\n\n\nclass GUITheoryDSMLinear(BaseTheoryDSMLinear, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # add widgets specific to the theory here:\n'"
RepTate/theories/TheoryDTDStars.py,4,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryDTDStars\n\nDynamics Tube Dilution for Stars\n""""""\nimport numpy as np\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\n\nimport RepTate.theories.dtd_ctypes_helper as dtdh\n\n\nclass TheoryDTDStarsFreq(CmdBase):\n    """"""Fit DTD Theory for stars.\n    Theory of stress relaxation in star polymer melts with no adjustable parameters beyond those measurable in linear melts\n    \n    * **Function**\n        See `Milner-McLeish (1997) <http://www.che.psu.edu/faculty/milner/group/eprints/1997/Macromolecules1997Milner.pdf>`_\n        and\n        `Larson et al. (2003) <http://www.personal.reading.ac.uk/~sms06al2/papers/definit.pdf>`_ for details.\n\n    * **Parameters**\n       - ``G0`` :math:`\\\\equiv G_N^0`: Plateau modulus\n       - ``tau_e`` :math:`\\\\equiv \\\\tau_\\\\mathrm e = \\\\left(\\\\dfrac{M_\\mathrm e^\\\\mathrm G}{M_0}\\\\right)^2  \\\\dfrac{\\\\zeta b^2}{3\\\\pi^2k_\\\\mathrm B T}`: \n         Entanglement equilibration time\n       - ``Me`` :math:`\\\\equiv M_\\mathrm e^\\mathrm G = \\\\dfrac 4 5 \\\\dfrac{\\\\rho R T} {G_N^0}`: Entanglement molecular weight\n       - ``alpha``: Dilution exponent\n\n       where:\n         - :math:`\\\\rho`: polymer density\n         - :math:`\\\\zeta`: monomeric friction coefficient\n         - :math:`b`: monomer-based segment length\n         - :math:`k_\\\\mathrm B T`: thermal energy\n         - :math:`M_0`: molar mass of an elementary segment\n    """"""\n\n    thname = ""DTD Stars""\n    description = ""Dynamic Tube Dilution for stars, frequency domain""\n    citations = [""Milner S.T. and McLeish T.C.B., Macromolecules 1997, 30, 2159-2166""]\n    doi = [""http://dx.doi.org/10.1021/ma961559f""]\n\n    def __new__(cls, name="""", parent_dataset=None, axarr=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryDTDStarsFreq(name, parent_dataset, axarr)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryDTDStarsFreq(name, parent_dataset, axarr)\n        )\n\n\nclass BaseTheoryDTDStarsFreq:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/LVE/Theory/theory.html#dynamic-dilution-equation-for-stars""\n    single_file = (\n        False  # False if the theory can be applied to multiple files simultaneously\n    )\n    thname = TheoryDTDStarsFreq.thname\n    citations = TheoryDTDStarsFreq.citations\n    doi = TheoryDTDStarsFreq.doi\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        self.function = self.calculate\n        self.has_modes = False\n        self.parameters[""G0""] = Parameter(\n            ""G0"",\n            1e1,\n            ""Modulus c*kB*T/N"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=0,\n        )\n        self.parameters[""tau_e""] = Parameter(\n            ""tau_e"",\n            2e-6,\n            ""Entanglement relaxation time"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=0,\n        )\n        self.parameters[""Me""] = Parameter(\n            ""Me"",\n            5.0,\n            ""Entanglement Molecular Weight"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=0,\n        )\n        self.parameters[""alpha""] = Parameter(\n            ""alpha"",\n            1.0,\n            ""Dilution parameter"",\n            ParameterType.real,\n            opt_type=OptType.const,\n            min_value=0,\n        )\n\n        self.get_material_parameters()\n\n        self.G0 = self.parameters[""G0""].value\n        self.tau_e = self.parameters[""tau_e""].value\n        self.Me = self.parameters[""Me""].value\n        self.alpha = self.parameters[""alpha""].value\n        self.Z = 1\n        self.w = 0\n\n    def calculate(self, f=None):\n        """"""DTDStarsFreq function""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        self.G0 = self.parameters[""G0""].value\n        self.tau_e = self.parameters[""tau_e""].value\n        self.Me = self.parameters[""Me""].value\n        self.alpha = self.parameters[""alpha""].value\n        try:\n            Mw = float(f.file_parameters[""Mw""])\n        except (ValueError, KeyError):\n            self.Qprint(""Invalid Mw value"")\n            return\n        # self.Z = int(np.rint(Mw / self.Me))\n        omega = ft.data[:, 0]\n        params = [self.G0, self.alpha, self.tau_e, Mw / self.Me, omega]\n        gp, gpp, success = dtdh.calculate_dtd_freq(params, self.eps)\n        if not success:\n            self.Qprint(""Too many steps in routine qtrap"")\n            return\n        tt.data[:, 0] = omega\n        tt.data[:, 1] = gp[:]\n        tt.data[:, 2] = gpp[:]\n\n\nclass CLTheoryDTDStarsFreq(BaseTheoryDTDStarsFreq, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # This class usually stays empty\n\n\nclass GUITheoryDTDStarsFreq(BaseTheoryDTDStarsFreq, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # add widgets specific to the theory here:\n\n\n#############################################################################################\n#############################################################################################\n\n\nclass TheoryDTDStarsTime(CmdBase):\n    """"""Fit DTD Theory for stars\n    \n    * **Function**\n        See `Milner-McLeish (1997) <http://www.che.psu.edu/faculty/milner/group/eprints/1997/Macromolecules1997Milner.pdf>`_\n        and\n        `Larson et al. (2003) <http://www.personal.reading.ac.uk/~sms06al2/papers/definit.pdf>`_ for details.\n\n    * **Parameters**\n       - ``G0`` :math:`\\\\equiv G_N^0`: Plateau modulus\n       - ``tau_e`` :math:`\\\\equiv \\\\tau_\\\\mathrm e = \\\\left(\\\\dfrac{M_\\mathrm e^\\\\mathrm G}{M_0}\\\\right)^2  \\\\dfrac{\\\\zeta b^2}{3\\\\pi^2k_\\\\mathrm B T}`: \n         Entanglement equilibration time\n       - ``Me`` :math:`\\\\equiv M_\\mathrm e^\\mathrm G = \\\\dfrac 4 5 \\\\dfrac{\\\\rho R T} {G_N^0}`: Entanglement molecular weight\n       - ``alpha``: Dilution exponent\n       \n       where:\n         - :math:`\\\\rho`: polymer density\n         - :math:`\\\\zeta`: monomeric friction coefficient\n         - :math:`b`: monomer-based segment length\n         - :math:`k_\\\\mathrm B T`: thermal energy\n         - :math:`M_0`: molar mass of an elementary segment\n    """"""\n\n    thname = ""DTD Stars""\n    description = ""Dynamic Tube Dilution for stars, time domain""\n    citations = [""Milner S.T. and McLeish T.C.B., Macromolecules 1997, 30, 2159-2166""]\n    doi = [""http://dx.doi.org/10.1021/ma961559f""]\n\n    def __new__(cls, name="""", parent_dataset=None, axarr=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryDTDStarsTime(name, parent_dataset, axarr)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryDTDStarsTime(name, parent_dataset, axarr)\n        )\n\n\nclass BaseTheoryDTDStarsTime:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/Gt/Theory/theory.html#dtd-stars-time""\n    single_file = (\n        False  # False if the theory can be applied to multiple files simultaneously\n    )\n    thname = TheoryDTDStarsTime.thname\n    citations = TheoryDTDStarsTime.citations\n    doi = TheoryDTDStarsTime.doi\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        self.function = self.calculate\n        self.has_modes = False\n        self.parameters[""G0""] = Parameter(\n            ""G0"",\n            1e1,\n            ""Modulus c*kB*T/N"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=0,\n        )\n        self.parameters[""tau_e""] = Parameter(\n            ""tau_e"",\n            2e-6,\n            ""Entanglement relaxation time"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=0,\n        )\n        self.parameters[""Me""] = Parameter(\n            ""Me"",\n            5.0,\n            ""Entanglement Molecular Weight"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=0,\n        )\n        self.parameters[""alpha""] = Parameter(\n            ""alpha"",\n            1.0,\n            ""Dilution parameter"",\n            ParameterType.real,\n            opt_type=OptType.const,\n            min_value=0,\n        )\n\n        self.get_material_parameters()\n\n        self.G0 = self.parameters[""G0""].value\n        self.tau_e = self.parameters[""tau_e""].value\n        self.Me = self.parameters[""Me""].value\n        self.alpha = self.parameters[""alpha""].value\n\n    def calculate(self, f=None):\n        """"""DTDStarsTime function""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        self.G0 = self.parameters[""G0""].value\n        self.tau_e = self.parameters[""tau_e""].value\n        self.Me = self.parameters[""Me""].value\n        self.alpha = self.parameters[""alpha""].value\n        try:\n            Mw = float(f.file_parameters[""Mw""])\n        except (ValueError, KeyError):\n            self.Qprint(""Invalid Mw value"")\n            return\n        try:\n            gamma = float(f.file_parameters[""gamma""])\n            if gamma == 0:\n                gamma = 1\n        except:\n            gamma = 1\n        # self.Z = int(np.rint(Mw / self.Me))\n        times = ft.data[:, 0]\n        params = [self.G0, self.alpha, self.tau_e, Mw / self.Me, times]\n        gt, success = dtdh.calculate_dtd_time(params, self.eps)\n        if not success:\n            self.Qprint(""Too many steps in routine qtrap"")\n            return\n        tt.data[:, 0] = times\n        tt.data[:, 1] = gamma * gt[:]\n\n\nclass CLTheoryDTDStarsTime(BaseTheoryDTDStarsTime, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # This class usually stays empty\n\n\nclass GUITheoryDTDStarsTime(BaseTheoryDTDStarsTime, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # add widgets specific to the theory here:\n'"
RepTate/theories/TheoryDebye.py,5,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryDebye\n\nDebye theory for neutron scattering from ideal polymer chains\n""""""\nimport numpy as np\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom PyQt5.QtWidgets import QToolBar\nfrom PyQt5.QtCore import QSize\nfrom PyQt5.QtGui import QIcon\n\n\nclass TheoryDebye(CmdBase):\n    """"""Fit a Debye function to the small angle neutron scattering data of ideal polymer chains. \n    \n    * **Function**\n        .. math::\n            I(q) = \\\\frac {(b_H-b_D)^2}{V} N \\\\phi(1-\\\\phi) g_D(R_g,q) + \\\\mathrm{Bckgrnd}\n        \n        where:\n          - :math:`N=M_w/M_\\\\mathrm{mono}` is the degree of polymerization of the chain (:math:`M_w` is a parameter of the experimental data)\n          - :math:`\\\\phi` is the volume fraction of deuterated chains (read from the file)\n          - :math:`g_D(R_g,q)` is the Debye function, given by\n          \n          .. math::\n              g_D(R_g,q) = \\\\frac{2}{(q^2R_g^2)^2}\\\\left( q^2R_g^2 + exp(-q^2R_g^2) -1 \\\\right)\n    \n    * **Parameters**\n       - Contrast: This sets the magnitude of the scattering and is equal to :math:`(b_H-b_D)^2/V` where :math:`b_{H/D}` is the scattering cross-section of the hydrogenous/deuterated monomer and :math:`V` is the monomer volume. \n       - :math:`C_{gyr}`: This sets the scale of the radius of gyration of the chain. For a given molecular weight, the radius of gyration is :math:`R_g^2=C_{gyr}M_w`. For many polymers, this value is available in the literature, but small adjustments may still be necessary to optimize the agreement with the experimental data.\n       - :math:`M_\\\\mathrm{mono}`: The molecular weight of a single monomer (should be known from the chain chemistry).\n       - Bckgrnd: This sets the level of the background scattering. It can, in principle, be computed from known incoherent scattering cross sections but, in practice, there are often many other unknown contributions and therefore fitting is necessary.\n       - :math:`\\\\lambda`: It applies a simple strain measure by shifting the radius of gyration by a constant factor for all :math:`q` values, :math:`R_g\\\\to \\\\lambda R_g` (the **Stretched** button must be checked). This can be used to compare the microscopic deformation with the effect of a fully affine bulk deformation or to fit to the low :math:`q` data to produce an effective radius of gyration under flow. Compression perpendicular to the flow direction can be modelled by setting :math:`\\\\lambda<1`.\n       - :math:`\\\\chi`: Parameter to model the effect of a weak interaction between the hydrogenous and the deuterated monomers on the scattering, modelled within the random phase approximation [3] (the **Non-Ideal Mix** button must be checked). The scattered intensity is calculated according to the function below, in which :math:`\\\\chi` is independent of :math:`M_w` and :math:`\\\\phi` but is expected to change with temperature. Typically, the effect of :math:`\\\\chi` is small, but this depends upon the temperature, degree of polymerization and deuterated fraction. For deuterated/hydrogenated polystyrene :math:`\\\\chi\\\\approx 1.7\\cdot 10^{-4}` at 160 degrees C, and it is expected to be smaller with increasing temperature.\n         \n         .. math::\n             I(q) = \\\\frac {(b_H-b_D)^2}{V} \\\\left( \\\\frac{1}{N \\\\phi(1-\\\\phi) g_D(R_g,q)}-2\\\\chi \\\\right)^{-1} + \\\\mathrm{Bckgrnd}     \n    \n    """"""\n\n    thname = ""Debye""\n    description = ""Debye theory for neutron scattering from ideal polymer chains""\n    citations = [""Debye P., J. Phys. Chem. 1947, 51, 18-32""]\n    doi = [""http://dx.doi.org/10.1021/j150451a002""]\n\n    def __new__(cls, name="""", parent_dataset=None, axarr=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryDebye(name, parent_dataset, axarr)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryDebye(name, parent_dataset, axarr)\n        )\n\n\nclass BaseTheoryDebye:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/SANS/Theory/theory.html#debye-function""\n    single_file = (\n        False  # False if the theory can be applied to multiple files simultaneously\n    )\n    thname = TheoryDebye.thname\n    citations = TheoryDebye.citations\n    doi = TheoryDebye.doi\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        self.function = self.calculateDebye  # main theory function\n        self.has_modes = False  # True if the theory has modes\n        self.parameters[""Contrast""] = Parameter(\n            name=""Contrast"",\n            value=0.4203,\n            description=""Magnitude of the scattering"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""C_gyr""] = Parameter(\n            name=""C_gyr"",\n            value=62.3,\n            description=""Scale the radius of gyration"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""M_mono""] = Parameter(\n            name=""M_mono"",\n            value=0.104,\n            description=""Molecular weight of a monomer"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""Bckgrnd""] = Parameter(\n            name=""Bckgrnd"",\n            value=0.26,\n            description=""Level of background scattering"",\n            type=ParameterType.real,\n            opt_type=OptType.opt,\n        )\n        self.parameters[""Chi""] = Parameter(\n            name=""Chi"",\n            value=1e-4,\n            description=\'Effect of weak interaction between ""<sup>2</sup>H and H""\',\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""Lambda""] = Parameter(\n            name=""Lambda"",\n            value=1,\n            description=""Shift of the radius of gyration"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""stretched""] = Parameter(\n            name=""stretched"",\n            value=False,\n            description=""Is shifting the radius of gyration applied"",\n            type=ParameterType.boolean,\n            opt_type=OptType.const,\n            display_flag=False,\n        )\n        self.parameters[""non-ideal""] = Parameter(\n            name=""non-ideal"",\n            value=False,\n            description=""Is non-ideal mix"",\n            type=ParameterType.boolean,\n            opt_type=OptType.const,\n            display_flag=False,\n        )\n\n    def calculateDebye(self, f=None):\n        """"""Debye function""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n\n        try:\n            Mw = float(f.file_parameters[""Mw""])\n            Phi = float(f.file_parameters[""Phi""])\n        except (ValueError, KeyError):\n            self.Qprint(""Invalid Mw or Phi value"")\n            return\n\n        Contr = self.parameters[""Contrast""].value\n        CRg = self.parameters[""C_gyr""].value\n        Mmono = self.parameters[""M_mono""].value\n        Bck = self.parameters[""Bckgrnd""].value\n        Chi = self.parameters[""Chi""].value\n        Lambda = self.parameters[""Lambda""].value\n        stretched = self.parameters[""stretched""].value\n        nonideal = self.parameters[""non-ideal""].value\n\n        tt.data[:, 0] = ft.data[:, 0]\n\n        Rg = np.sqrt(CRg * Mw)\n        if stretched:\n            Rg *= Lambda\n        RgQsq = Rg * Rg * ft.data[:, 0] * ft.data[:, 0]\n        debFn = 2.0 / RgQsq / RgQsq * (RgQsq + np.exp(-RgQsq) - 1.0)\n        if nonideal:\n            tt.data[:, 1] = (\n                Contr * 1 / (1 / (Mw / Mmono * Phi * (1.0 - Phi) * debFn) - 2 * Chi)\n                + Bck\n            )\n        else:\n            tt.data[:, 1] = Contr * Mw / Mmono * Phi * (1.0 - Phi) * debFn + Bck\n\n    def do_error(self, line):\n        """"""Report the error of the current theory\n\nReport the error of the current theory on all the files, taking into account the current selected xrange and yrange.\n\nFile error is calculated as the mean square of the residual, averaged over all points in the file. Total error is the mean square of the residual, averaged over all points in all files.""""""\n        super().do_error(line)\n        if line == """":\n            self.Qprint("""")\n            self.Qprint(""%12s %8s %8s"" % (""File"", ""Mw"", ""Rg""))\n            CRg = self.parameters[""C_gyr""].value\n            Lambda = self.parameters[""Lambda""].value\n            stretched = self.parameters[""stretched""].value\n            nfiles = len(self.parent_dataset.files)\n            for i in range(nfiles):\n                f = self.parent_dataset.files[i]\n                if f.active:\n                    Mw = float(f.file_parameters[""Mw""])\n                    if stretched:\n                        self.Qprint(\n                            ""%12s %8.4g %8.4g""\n                            % (f.file_name_short, Mw, Lambda * np.sqrt(CRg * Mw))\n                        )\n                    else:\n                        self.Qprint(\n                            ""%12s %8.4g %8.4g""\n                            % (f.file_name_short, Mw, np.sqrt(CRg * Mw))\n                        )\n\n\nclass CLTheoryDebye(BaseTheoryDebye, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # This class usually stays empty\n\n\nclass GUITheoryDebye(BaseTheoryDebye, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n        # add widgets specific to the theory here:\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n        self.tbutstretched = tb.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-socks.png""), ""Stretched""\n        )\n        self.tbutstretched.setCheckable(True)\n        self.tbutstretched.setChecked(False)\n        self.tbutnonideal = tb.addAction(\n            QIcon("":/Images/Images/new_icons/icons8-broom.png""), ""Non-Ideal Mix""\n        )\n        self.tbutnonideal.setCheckable(True)\n        self.tbutnonideal.setChecked(False)\n        self.thToolsLayout.insertWidget(0, tb)\n\n        # connections signal and slots\n        connection_id = self.tbutstretched.triggered.connect(\n            self.handle_tbutstretched_triggered\n        )\n        connection_id = self.tbutnonideal.triggered.connect(\n            self.handle_tbutnonideal_triggered\n        )\n\n    def handle_tbutstretched_triggered(self, checked):\n        """"""Check Streched""""""\n        self.set_param_value(""stretched"", checked)\n\n    def handle_tbutnonideal_triggered(self, checked):\n        """"""Handle Non-ideal""""""\n        self.set_param_value(""non-ideal"", checked)\n'"
RepTate/theories/TheoryDebyeModes.py,26,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryDebyeModes\n\nModule that defines theories related to Debye modes, in the frequency and time domains.\n\n""""""\nimport numpy as np\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.DataTable import DataTable\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom PyQt5.QtWidgets import QToolBar, QSpinBox\nfrom PyQt5.QtCore import QSize\nfrom PyQt5.QtGui import QIcon\nfrom RepTate.core.DraggableArtists import DragType, DraggableModesSeries\n\n\nclass TheoryDebyeModesFrequency(CmdBase):\n    """"""Fit a generalized Debye model to a frequency dependent relaxation function. \n    \n    * **Function**\n        .. math::\n            \\\\begin{eqnarray}\n            \\\\epsilon\'(\\\\omega) & = & \\\\epsilon_\\\\infty + \\\\sum_{1}^{n_{modes}} \\\\Delta\\\\epsilon_i \\\\frac{1}{1+(\\\\omega\\\\tau_i)^2} \\\\\\\\\n            \\\\epsilon\'\'(\\\\omega) & = & \\\\sum_{1}^{n_{modes}} \\\\Delta\\\\epsilon_i \\\\frac{\\\\omega\\\\tau_i}{1+(\\\\omega\\\\tau_i)^2}\n            \\\\end{eqnarray}\n    \n    * **Parameters**\n       - einf = :math:`\\\\epsilon_{\\\\infty}`: Unrelaxed permitivity\n       - :math:`n_{modes}`: number of Debye modes equally distributed in logarithmic scale between :math:`\\\\omega_{min}` and :math:`\\\\omega_{max}`.\n       - logwmin = :math:`\\\\log(\\\\omega_{min})`: decimal logarithm of the minimum frequency.\n       - logwmax = :math:`\\\\log(\\\\omega_{max})`: decimal logarithm of the maximum frequency.\n       - logDei = :math:`\\\\log(\\\\Delta\\\\epsilon_{i})`, where :math:`\\\\Delta\\\\epsilon_{i}=\\\\epsilon_{s,i}-\\\\epsilon_\\\\infty`: decimal logarithm of the relaxation strength of Debye mode :math:`i`, where :math:`\\\\epsilon_{s,i}` is the static permitivity of mode :math:`i`.\n    \n    """"""\n\n    thname = ""Debye modes""\n    description = ""Fit Debye modes""\n    citations = []\n    doi = []\n\n    def __new__(cls, name="""", parent_dataset=None, ax=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryDebyeModesFrequency(name, parent_dataset, ax)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryDebyeModesFrequency(name, parent_dataset, ax)\n        )\n\n\nclass BaseTheoryDebyeModesFrequency:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/Dielectric/Theory/theory.html#debye-modes""\n    single_file = True\n    thname = TheoryDebyeModesFrequency.thname\n    citations = TheoryDebyeModesFrequency.citations\n    doi = TheoryDebyeModesFrequency.doi\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n        self.function = self.DebyeModesFrequency\n        self.has_modes = False\n        self.MAX_MODES = 40\n        self.view_modes = True\n        wmin = self.parent_dataset.minpositivecol(0)\n        wmax = self.parent_dataset.maxcol(0)\n        nmodes = int(np.round(np.log10(wmax / wmin)))\n\n        self.parameters[""einf""] = Parameter(\n            ""einf"",\n            0.0,\n            ""Unrelaxed permittivity"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=0,\n        )\n        self.parameters[""logwmin""] = Parameter(\n            ""logwmin"",\n            np.log10(wmin),\n            ""Log of frequency range minimum"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n        )\n        self.parameters[""logwmax""] = Parameter(\n            ""logwmax"",\n            np.log10(wmax),\n            ""Log of frequency range maximum"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n        )\n        self.parameters[""nmodes""] = Parameter(\n            name=""nmodes"",\n            value=nmodes,\n            description=""Number of Debye modes"",\n            type=ParameterType.integer,\n            opt_type=OptType.const,\n            display_flag=False,\n        )\n        # Interpolate modes from data\n        w = np.logspace(np.log10(wmin), np.log10(wmax), nmodes)\n        eps = np.abs(\n            np.interp(\n                w,\n                self.parent_dataset.files[0].data_table.data[:, 0],\n                self.parent_dataset.files[0].data_table.data[:, 1],\n            )\n        )\n        for i in range(self.parameters[""nmodes""].value):\n            self.parameters[""logDe%02d"" % i] = Parameter(\n                ""logDe%02d"" % i,\n                np.log10(eps[i]),\n                ""Log of Mode %d amplitude"" % i,\n                ParameterType.real,\n                opt_type=OptType.opt,\n            )\n\n        # GRAPHIC MODES\n        self.graphicmodes = []\n        self.artistmodes = []\n        self.setup_graphic_modes()\n\n    def drag_mode(self, dx, dy):\n        """"""Move around modes""""""\n        nmodes = self.parameters[""nmodes""].value\n        if self.parent_dataset.parent_application.current_view.log_x:\n            self.set_param_value(""logwmin"", np.log10(dx[0]))\n            self.set_param_value(""logwmax"", np.log10(dx[nmodes - 1]))\n        else:\n            self.set_param_value(""logwmin"", dx[0])\n            self.set_param_value(""logwmax"", dx[nmodes - 1])\n\n        if self.parent_dataset.parent_application.current_view.log_y:\n            for i in range(nmodes):\n                self.set_param_value(""logDe%02d"" % i, np.log10(dy[i]))\n        else:\n            for i in range(nmodes):\n                self.set_param_value(""logDe%02d"" % i, dy[i])\n\n        self.do_calculate("""")\n        self.update_parameter_table()\n\n    def update_modes(self):\n        """"""Do nothing""""""\n        pass\n\n    def setup_graphic_modes(self):\n        """"""Setup graphic representation of modes""""""\n        nmodes = self.parameters[""nmodes""].value\n        w = np.logspace(\n            self.parameters[""logwmin""].value, self.parameters[""logwmax""].value, nmodes\n        )\n        eps = np.zeros(nmodes)\n        for i in range(nmodes):\n            eps[i] = np.power(10, self.parameters[""logDe%02d"" % i].value)\n\n        self.graphicmodes = self.ax.plot(w, eps)[0]\n        self.graphicmodes.set_marker(""D"")\n        self.graphicmodes.set_linestyle("""")\n        self.graphicmodes.set_visible(self.view_modes)\n        self.graphicmodes.set_markerfacecolor(""yellow"")\n        self.graphicmodes.set_markeredgecolor(""black"")\n        self.graphicmodes.set_markeredgewidth(3)\n        self.graphicmodes.set_markersize(8)\n        self.graphicmodes.set_alpha(0.5)\n        self.artistmodes = DraggableModesSeries(\n            self.graphicmodes,\n            DragType.special,\n            self.parent_dataset.parent_application,\n            self.drag_mode,\n        )\n        self.plot_theory_stuff()\n\n    def destructor(self):\n        """"""Called when the theory tab is closed""""""\n        self.graphicmodes_visible(False)\n        self.ax.lines.remove(self.graphicmodes)\n\n    def show_theory_extras(self, show=False):\n        """"""Called when the active theory is changed""""""\n        if CmdBase.mode == CmdMode.GUI:\n            self.Qhide_theory_extras(show)\n        self.graphicmodes_visible(show)\n\n    def graphicmodes_visible(self, state):\n        """"""Set visibility of graphic modes""""""\n        self.view_modes = state\n        self.graphicmodes.set_visible(self.view_modes)\n        if self.view_modes:\n            self.artistmodes.connect()\n        else:\n            self.artistmodes.disconnect()\n        # self.do_calculate("""")\n        self.parent_dataset.parent_application.update_plot()\n\n    def get_modes(self):\n        """"""Get the values of Maxwell Modes from this theory""""""\n        nmodes = self.parameters[""nmodes""].value\n        freq = np.logspace(\n            self.parameters[""logwmin""].value, self.parameters[""logwmax""].value, nmodes\n        )\n        tau = 1.0 / freq\n        eps = np.zeros(nmodes)\n        for i in range(nmodes):\n            eps[i] = np.power(10, self.parameters[""logDe%02d"" % i].value)\n        return tau, eps, True\n\n    def DebyeModesFrequency(self, f=None):\n        """"""Actual function that calculates the thoery""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        tt.data[:, 0] = ft.data[:, 0]\n\n        einf = self.parameters[""einf""].value\n        nmodes = self.parameters[""nmodes""].value\n        freq = np.logspace(\n            self.parameters[""logwmin""].value, self.parameters[""logwmax""].value, nmodes\n        )\n        tau = 1.0 / freq\n\n        tt.data[:, 1] += einf\n        for i in range(nmodes):\n            if self.stop_theory_flag:\n                break\n            wT = tt.data[:, 0] * tau[i]\n            wTsq = wT ** 2\n            eps = np.power(10, self.parameters[""logDe%02d"" % i].value)\n            tt.data[:, 1] += eps * 1 / (1 + wTsq)\n            tt.data[:, 2] += eps * wT / (1 + wTsq)\n\n    def plot_theory_stuff(self):\n        """"""Plot theory graphic modes""""""\n        # if not self.view_modes:\n        #     return\n        data_table_tmp = DataTable(self.axarr)\n        data_table_tmp.num_columns = 3\n        nmodes = self.parameters[""nmodes""].value\n        data_table_tmp.num_rows = nmodes\n        data_table_tmp.data = np.zeros((nmodes, 3))\n        freq = np.logspace(\n            self.parameters[""logwmin""].value, self.parameters[""logwmax""].value, nmodes\n        )\n        data_table_tmp.data[:, 0] = freq\n        for i in range(nmodes):\n            if self.stop_theory_flag:\n                break\n            data_table_tmp.data[i, 1] = data_table_tmp.data[i, 2] = np.power(\n                10, self.parameters[""logDe%02d"" % i].value\n            )\n        view = self.parent_dataset.parent_application.current_view\n        try:\n            x, y, success = view.view_proc(data_table_tmp, None)\n        except TypeError as e:\n            print(e)\n            return\n        self.graphicmodes.set_data(x, y)\n        for i in range(data_table_tmp.MAX_NUM_SERIES):\n            for nx in range(len(self.axarr)):\n                self.axarr[nx].lines.remove(data_table_tmp.series[nx][i])\n\n\nclass CLTheoryDebyeModesFrequency(BaseTheoryDebyeModesFrequency, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n\nclass GUITheoryDebyeModesFrequency(BaseTheoryDebyeModesFrequency, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n        # add widgets specific to the theory\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n        self.spinbox = QSpinBox()\n        self.spinbox.setRange(1, self.MAX_MODES)  # min and max number of modes\n        self.spinbox.setSuffix("" modes"")\n        self.spinbox.setValue(self.parameters[""nmodes""].value)  # initial value\n        tb.addWidget(self.spinbox)\n        self.modesaction = tb.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-visible.png""), ""View modes""\n        )\n        self.modesaction.setCheckable(True)\n        self.modesaction.setChecked(True)\n        self.thToolsLayout.insertWidget(0, tb)\n\n        connection_id = self.spinbox.valueChanged.connect(\n            self.handle_spinboxValueChanged\n        )\n        connection_id = self.modesaction.triggered.connect(self.modesaction_change)\n\n    def Qhide_theory_extras(self, state):\n        """"""Uncheck the modeaction button. Called when curent theory is changed""""""\n        self.modesaction.setChecked(state)\n\n    def modesaction_change(self, checked):\n        """"""Change visibility of modes""""""\n        self.graphicmodes_visible(checked)\n        # self.view_modes = self.modesaction.isChecked()\n        # self.graphicmodes.set_visible(self.view_modes)\n        # self.do_calculate("""")\n\n    def handle_spinboxValueChanged(self, value):\n        """"""Handle a change of the parameter \'nmode\'""""""\n        nmodesold = self.parameters[""nmodes""].value\n        wminold = self.parameters[""logwmin""].value\n        wmaxold = self.parameters[""logwmax""].value\n        wold = np.logspace(wminold, wmaxold, nmodesold)\n        Gold = np.zeros(nmodesold)\n        for i in range(nmodesold):\n            Gold[i] = self.parameters[""logDe%02d"" % i].value\n            del self.parameters[""logDe%02d"" % i]\n\n        nmodesnew = value\n        self.set_param_value(""nmodes"", nmodesnew)\n        wnew = np.logspace(wminold, wmaxold, nmodesnew)\n\n        Gnew = np.interp(wnew, wold, Gold)\n\n        for i in range(nmodesnew):\n            self.parameters[""logDe%02d"" % i] = Parameter(\n                ""logDe%02d"" % i,\n                Gnew[i],\n                ""Log of Mode %d amplitude"" % i,\n                ParameterType.real,\n                opt_type=OptType.opt,\n            )\n\n        if self.autocalculate:\n            self.parent_dataset.handle_actionCalculate_Theory()\n        self.update_parameter_table()\n'"
RepTate/theories/TheoryDieneCSTR.py,6,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#     Daniel Read, d.j.read@leeds.ac.uk\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryDieneCSTR\n\n""""""\nimport numpy as np\nimport time\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom PyQt5.QtWidgets import QApplication\nfrom PyQt5.QtCore import pyqtSignal\n\nimport ctypes as ct\nimport RepTate.theories.react_ctypes_helper as rch\nimport RepTate.theories.react_gui_tools as rgt\n\n\nclass TheoryDieneCSTR(CmdBase):\n    """"""DieneCSTR reaction theory""""""\n\n    thname = ""Diene CSTR""\n    description = ""The Diene CSTR reaction theory""\n    citations = [""Das C. et al., Macromol. Theory Simul., 26, 1700006 (2017)""]\n    doi = [""https://doi.org/10.1002/mats.201700006""]\n\n    def __new__(cls, name="""", parent_dataset=None, ax=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryDieneCSTR(name, parent_dataset, ax)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryDieneCSTR(name, parent_dataset, ax)\n        )\n\n\nclass BaseTheoryDieneCSTR:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = (\n        ""http://reptate.readthedocs.io/manual/Applications/React/Theory/dieneCSTR.html""\n    )\n    single_file = (\n        True  # False if the theory can be applied to multiple files simultaneously\n    )\n    thname = TheoryDieneCSTR.thname\n    citations = TheoryDieneCSTR.citations\n    doi = TheoryDieneCSTR.doi\n    signal_request_dist = pyqtSignal(object)\n    signal_request_polymer = pyqtSignal(object)\n    signal_request_arm = pyqtSignal(object)\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n        self.reactname = ""Diene CSTR %d"" % (rch.dCSTR_global.dieneCSTRnumber)\n        rch.dCSTR_global.dieneCSTRnumber += 1\n        self.function = self.Calc\n        self.simexists = False\n        self.dist_exists = False\n        self.ndist = 0\n        self.has_modes = False  # True if the theory has modes\n        self.autocalculate = False\n        self.do_priority_seniority = False\n        self.M_diene = 138\n\n        self.parameters[""col_time""] = Parameter(\n            name=""col_time"",\n            value=1e3,\n            min_value=0,\n            description=""Collection time"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""tau""] = Parameter(\n            name=""tau"",\n            value=200,\n            description=""Reactor time constant"",\n            type=ParameterType.real,\n            min_value=0,\n            opt_type=OptType.const,\n        )\n        self.parameters[""D0""] = Parameter(\n            name=""D0"",\n            value=1e-4,\n            min_value=0,\n            description=""Rate of diene feed to the reactor"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""C0""] = Parameter(\n            name=""C0"",\n            value=2e-3,\n            min_value=0,\n            description=""Rate of catalyst feed to the reactor"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""kpM""] = Parameter(\n            name=""kpM"",\n            value=150,\n            min_value=0,\n            description=""Polymerisation rate times Monomer conc."",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""k=""] = Parameter(\n            name=""k="",\n            value=0.2,\n            min_value=0,\n            description=""Rate of termination leaving double bond behind"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""ks""] = Parameter(\n            name=""ks"",\n            value=0.005,\n            min_value=0,\n            description=""Rate of termination leaving saturated chain behind"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""kpD""] = Parameter(\n            name=""kpD"",\n            value=30,\n            min_value=0,\n            description=""Rate of free-diene incorporation"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""kDLCB""] = Parameter(\n            name=""kDLCB"",\n            value=0.2,\n            min_value=0,\n            description=""Rate of long-chain branching by addition of a pendant diene"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""kpLCB""] = Parameter(\n            name=""kpLCB"",\n            value=1,\n            min_value=0,\n            description=""Rate of long-chain branching by macromer incorporation"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""num_to_make""] = Parameter(\n            name=""num_to_make"",\n            value=1000,\n            min_value=0,\n            description=""Number of molecules made in the simulation"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""mon_mass""] = Parameter(\n            name=""mon_mass"",\n            value=28,\n            min_value=0,\n            description=""Mass, in a.m.u., of a monomer (usually set to 28 for PE)"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""Me""] = Parameter(\n            name=""Me"",\n            value=1000,\n            min_value=0,\n            description=""Entanglement molecular weight"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""nbin""] = Parameter(\n            name=""nbin"",\n            value=100,\n            min_value=1,\n            description=""Number of molecular weight bins"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n\n        self.signal_request_dist.connect(rgt.request_more_dist)\n        self.signal_request_polymer.connect(rgt.request_more_polymer)\n        self.signal_request_arm.connect(rgt.request_more_arm)\n        self.do_xrange("""", visible=self.xrange.get_visible())\n\n    def request_stop_computations(self):\n        """"""Called when user wants to terminate the current computation""""""\n        rch.set_flag_stop_all(ct.c_bool(True))\n        super().request_stop_computations()\n\n    def do_error(self, line):\n        """"""This theory does not calculate the error""""""\n        pass\n\n    def Calc(self, f=None):\n        """"""Calculate the theory""""""\n\n        # get parameters\n        col_time = self.parameters[""col_time""].value\n        tau = self.parameters[""tau""].value\n        kpM = self.parameters[""kpM""].value\n        kDLCB = self.parameters[""kDLCB""].value\n        kpLCB = self.parameters[""kpLCB""].value\n        kpD = self.parameters[""kpD""].value\n        keq = self.parameters[""k=""].value\n        ks = self.parameters[""ks""].value\n        D0 = self.parameters[""D0""].value\n        C0 = self.parameters[""C0""].value\n        numtomake = np.round(self.parameters[""num_to_make""].value)\n        monmass = self.parameters[""mon_mass""].value\n        Me = self.parameters[""Me""].value\n        nbins = int(np.round(self.parameters[""nbin""].value))\n        rch.set_do_prio_senio(ct.c_bool(self.do_priority_seniority))\n        rch.set_flag_stop_all(ct.c_bool(False))\n\n        c_ndist = ct.c_int()\n\n        # resize theory datatable\n        ft = f.data_table\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = 1\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n\n        if not self.dist_exists:\n            success = rch.request_dist(ct.byref(c_ndist))\n            self.ndist = c_ndist.value\n            if not success:\n                # launch dialog asking for more dist\n                self.signal_request_dist.emit(\n                    self\n                )  # use signal to open QDialog in the main GUI window\n                return\n            else:\n                self.dist_exists = True\n        ndist = self.ndist\n        # rch.react_dist[ndist].contents.name = self.reactname #TODO: set the dist name in the C library\n        rch.react_dist[ndist].contents.M_e = Me\n        rch.react_dist[ndist].contents.monmass = monmass\n        rch.react_dist[ndist].contents.nummwdbins = nbins\n        rch.react_dist[ndist].contents.polysaved = False\n        rch.react_dist[ndist].contents.nsaved_arch = 0\n        rch.react_dist[ndist].contents.arch_minwt = self.xmin\n        rch.react_dist[ndist].contents.arch_maxwt = self.xmax\n        rch.init_bin_prio_vs_senio(ndist)\n\n        if self.simexists:\n            rch.return_dist_polys(ct.c_int(ndist))\n\n        # initialise diene batch\n        ldiene = self.M_diene / monmass\n        rch.dieneCSTRstart(\n            ct.c_double(tau),\n            ct.c_double(kpM),\n            ct.c_double(kDLCB),\n            ct.c_double(kpLCB),\n            ct.c_double(kpD),\n            ct.c_double(keq),\n            ct.c_double(ks),\n            ct.c_double(D0),\n            ct.c_double(C0),\n            ct.c_double(ldiene),\n            ct.c_double(col_time),\n            ct.c_int(ndist),\n        )\n        rch.react_dist[ndist].contents.npoly = 0\n\n        c_m = ct.c_int()\n\n        # make numtomake polymers\n        i = 0\n        n_gel = 0\n        rate_print = np.trunc(numtomake / 20)\n        self.Qprint(""Making polymers:"")\n        self.Qprint(""0% "", end="""")\n        while i < numtomake:\n            if self.stop_theory_flag:\n                self.Qprint(\n                    ""<br><big><font color=red><b>Polymer creation stopped by user</b></font></big>""\n                )\n                break\n            # get a polymer\n            success = rch.request_poly(ct.byref(c_m))\n            m = c_m.value\n            if success:  # check availability of polymers\n                # put it in list\n                # case of first polymer made\n                if rch.react_dist[ndist].contents.npoly == 0:\n                    rch.react_dist[ndist].contents.first_poly = m\n                    # br_poly[m].contents.nextpoly = 0\n                    rch.set_br_poly_nextpoly(ct.c_int(m), ct.c_int(0))\n                else:  # next polymer, put to top of list\n                    # br_poly[m].contents.nextpoly = rch.react_dist[ndist].contents.first_poly\n                    rch.set_br_poly_nextpoly(\n                        ct.c_int(m), ct.c_int(rch.react_dist[ndist].contents.first_poly)\n                    )\n                    rch.react_dist[ndist].contents.first_poly = m\n\n                # make a polymer\n                # routine returns false if arms ran out\n                if rch.dieneCSTR(ct.c_int(m), ct.c_int(ndist)):\n                    rch.react_dist[ndist].contents.npoly += 1\n                    i += 1\n                    # check for error\n                    if rch.dCSTR_global.dieneCSTRerrorflag:\n                        n_gel += 1\n                        rch.dCSTR_global.dieneCSTRerrorflag = False\n                        # self.Qprint(\n                        #     \'<br><big><font color=red><b>Polymers too large: gelation occurs for these parameters</b></font></big>\'\n                        # )\n                        # i = numtomake\n                else:  # error message if we ran out of arms\n                    self.success_increase_memory = None\n                    self.signal_request_arm.emit(self)\n                    # wait for the end of QDialog\n                    while self.success_increase_memory is None:\n                        # TODO: find a better way to wait for the dialog thread to finish\n                        time.sleep(0.5)\n                    if self.success_increase_memory:\n                        continue  # back to the start of while loop\n                    else:\n                        i = numtomake\n                        rch.dCSTR_global.dieneCSTRerrorflag = True\n\n                # update on number made\n                if i % rate_print == 0:\n                    self.Qprint(""-"", end="""")\n                    # needed to use Qprint if in single-thread\n                    QApplication.processEvents()\n\n            else:  # polymer wasn\'t available\n                self.success_increase_memory = None\n                self.signal_request_polymer.emit(self)\n                while self.success_increase_memory is None:\n                    # TODO: find a better way to wait for the dialog thread to finish\n                    time.sleep(0.5)\n                if self.success_increase_memory:\n                    continue\n                else:\n                    i = numtomake\n        # end make polymers loop\n        if not rch.dCSTR_global.dieneCSTRerrorflag:\n            self.Qprint(""&nbsp;100%"")\n\n        calc = 0\n        # do analysis of polymers made\n        if rch.react_dist[ndist].contents.npoly:\n            rch.molbin(ndist)\n            ft = f.data_table\n\n            # resize theory data table\n            ft = f.data_table\n            tt = self.tables[f.file_name_short]\n            tt.num_columns = ft.num_columns + 2\n            tt.num_rows = rch.react_dist[ndist].contents.nummwdbins\n            tt.data = np.zeros((tt.num_rows, tt.num_columns))\n\n            for i in range(1, rch.react_dist[ndist].contents.nummwdbins + 1):\n                tt.data[i - 1, 0] = np.power(\n                    10, rch.react_dist[ndist].contents.lgmid[i]\n                )\n                tt.data[i - 1, 1] = rch.react_dist[ndist].contents.wt[i]\n                tt.data[i - 1, 2] = rch.react_dist[ndist].contents.avg[i]\n                tt.data[i - 1, 3] = rch.react_dist[ndist].contents.avbr[i]\n            rch.end_print(self, ndist, self.do_priority_seniority)\n            rch.prio_and_senio(self, f, ndist, self.do_priority_seniority)\n\n            calc = rch.react_dist[ndist].contents.nummwdbins - 1\n            rch.react_dist[ndist].contents.polysaved = True\n        self.simexists = True\n        if n_gel != 0:\n            self.Qprint(\n                ""<br><big><font color=red><b>Gelation might occurs for these parameters.<br>%.3g%% of the molecules exceeded the maximum recursion level</b></font></big>""\n                % (n_gel / numtomake * 100.0)\n            )\n        return calc\n\n    def show_theory_extras(self, checked):\n        rgt.show_theory_extras(self, checked)\n\n    def destructor(self):\n        """"""Return arms to pool""""""\n        rch.return_dist(ct.c_int(self.ndist))\n\n    def do_fit(self, line=""""):\n        """"""No fitting allowed in this theory""""""\n        if self.xrange.get_visible():\n            if self.xmin > self.xmax:\n                temp = self.xmin\n                self.xmin = self.xmax\n                self.xmax = temp\n            self.Qprint(""<b>xrange</b>=[%0.3g, %0.3g]"" % (self.xmin, self.xmax))\n        if self.yrange.get_visible():\n            if self.ymin > self.ymax:\n                temp = self.ymin\n                self.ymin = self.ymax\n                self.ymax = temp\n            self.Qprint(""<b>yrange</b>=[%.03g, %0.3g]"" % (self.ymin, self.ymax))\n\n\nclass CLTheoryDieneCSTR(BaseTheoryDieneCSTR, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n    # This class usually stays empty\n\n\nclass GUITheoryDieneCSTR(BaseTheoryDieneCSTR, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n        rgt.initialise_tool_bar(self)\n\n    def theory_buttons_disabled(self, state):\n        """"""Disable/Enable some theory buttons before/after calculation start.""""""\n        rgt.theory_buttons_disabled(self, state)\n\n    def handle_save_bob_configuration(self):\n        """"""Save polymer configuraions to a file""""""\n        rgt.handle_save_bob_configuration(self)\n\n    def handle_edit_bob_settings(self):\n        """"""Open the BoB binnig settings dialog""""""\n        rgt.handle_edit_bob_settings(self)\n\n    def handle_btn_prio_senio(self, checked):\n        """"""Change do_priority_seniority""""""\n        rgt.handle_btn_prio_senio(self, checked)\n\n    def set_extra_data(self, extra_data):\n        """"""set extra data""""""\n        rgt.set_extra_data(self, extra_data)\n\n    def get_extra_data(self):\n        """"""set extra data""""""\n        rgt.get_extra_data(self)\n'"
RepTate/theories/TheoryDiscrMWD.py,50,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryDiscrMWD\n\nModule that defines the theory to discretize a molecular weight distribution.\n\n""""""\nimport os\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nimport numpy as np\nfrom PyQt5.QtCore import QSize\nfrom PyQt5.QtWidgets import QToolBar, QSpinBox, QMessageBox\nfrom PyQt5.QtGui import QIcon\nfrom RepTate.core.DraggableArtists import DragType, DraggableBinSeries\n\n\nclass TheoryDiscrMWD(CmdBase):\n    """"""Discretize a Molecular Weight Distribution""""""\n\n    thname = ""Discretize MWD""\n    description = ""Discretize a Molecular Weight Distribution""\n    citations = []\n    doi = []\n\n    def __new__(cls, name="""", parent_dataset=None, ax=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryDiscrMWD(name, parent_dataset, ax)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryDiscrMWD(name, parent_dataset, ax)\n        )\n\n\nclass BaseTheoryDiscrMWD:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/MWD/Theory/theory.html#mwd-discretization""\n    single_file = True\n    thname = TheoryDiscrMWD.thname\n    citations = TheoryDiscrMWD.citations\n    doi = TheoryDiscrMWD.doi\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n        self.function = self.discretise_mwd\n        self.has_modes = False\n        self.view_bins = True\n        self.bins = None\n        self.current_file = None\n        self.NBIN_MIN = 1\n        self.NBIN_MAX = 100\n\n        self.parameters[""Mn""] = Parameter(\n            ""Mn"",\n            1000,\n            ""Number-average molecular mass"",\n            ParameterType.real,\n            opt_type=OptType.const,\n            display_flag=False,\n        )\n        self.parameters[""Mw""] = Parameter(\n            ""Mw"",\n            1000,\n            ""Weight-average molecular mass"",\n            ParameterType.real,\n            opt_type=OptType.const,\n            display_flag=False,\n        )\n        self.parameters[""Mz""] = Parameter(\n            ""Mz"",\n            1,\n            ""z-average molecular mass"",\n            ParameterType.real,\n            opt_type=OptType.const,\n            display_flag=False,\n        )\n        self.parameters[""PDI""] = Parameter(\n            ""PDI"",\n            1,\n            ""Polydispersity index"",\n            ParameterType.real,\n            opt_type=OptType.const,\n            display_flag=False,\n        )\n\n        mmin = self.parent_dataset.minpositivecol(0)\n        mmax = self.parent_dataset.maxcol(0)\n        nbin = int(np.round(3 * np.log10(mmax / mmin)))  # default: 3 bins per decade\n        self.parameters[""logmmin""] = Parameter(\n            ""logmmin"",\n            np.log10(mmin),\n            ""Log of minimum molecular mass"",\n            ParameterType.real,\n            opt_type=OptType.const,\n            display_flag=False,\n        )\n        self.parameters[""logmmax""] = Parameter(\n            ""logmmax"",\n            np.log10(mmax),\n            ""Log of maximum molecular mass"",\n            ParameterType.real,\n            opt_type=OptType.const,\n            display_flag=False,\n        )\n        self.parameters[""nbin""] = Parameter(\n            name=""nbin"",\n            value=nbin,\n            description=""Number of molecular weight bins"",\n            type=ParameterType.integer,\n            min_value=self.NBIN_MIN,\n            max_value=self.NBIN_MAX,\n            opt_type=OptType.const,\n            display_flag=False,\n        )\n\n        self.set_equally_spaced_bins()\n        self.setup_graphic_bins()\n\n    def set_equally_spaced_bins(self):\n        """"""Find the first active file in the dataset and setup the bins""""""\n        for f in self.theory_files():\n            ft = f.data_table.data\n            m_arr = ft[:, 0]\n            w_arr = ft[:, 1]\n            try:\n                mmin = min(m_arr[np.nonzero(w_arr)])\n                mmax = max(m_arr[np.nonzero(w_arr)])\n            except:\n                mmin = m_arr[0]\n                mmax = m_arr[-1]\n            self.parameters[""logmmin""].value = np.log10(mmin)\n            self.parameters[""logmmax""].value = np.log10(mmax)\n            nbin = self.parameters[""nbin""].value\n            bins_edges = np.logspace(np.log10(mmin), np.log10(mmax), nbin + 1)\n            for i in range(nbin + 1):\n                self.parameters[""logM%02d"" % i] = Parameter(\n                    ""logM%02d"" % i,\n                    np.log10(bins_edges[i]),\n                    ""Log of molecular mass"",\n                    ParameterType.real,\n                    opt_type=OptType.const,\n                    display_flag=False,\n                )\n            self.current_file = f\n\n    def set_param_value(self, name, new_value):\n        """"""Set value of theory parameter""""""\n        if name == ""nbin"":\n            nbinold = self.parameters[""nbin""].value\n        message, success = super().set_param_value(name, new_value)\n        if not success:\n            return message, success\n        if name == ""nbin"":\n            new_nbin = self.parameters[""nbin""].value\n            mminold = self.parameters[""logmmin""].value\n            mmaxold = self.parameters[""logmmax""].value\n            for i in range(nbinold + 1):\n                del self.parameters[""logM%02d"" % i]\n            mnew = np.logspace(mminold, mmaxold, new_nbin + 1)\n            for i in range(new_nbin + 1):\n                self.parameters[""logM%02d"" % i] = Parameter(\n                    ""logM%02d"" % i,\n                    np.log10(mnew[i]),\n                    ""Log molecular mass %d"" % i,\n                    ParameterType.real,\n                    opt_type=OptType.const,\n                    display_flag=False,\n                )\n            if self.autocalculate:\n                self.do_calculate("""")\n        elif (name == ""logmmin"") or (\n            name == ""logmmax""\n        ):  # make bins equally spaced again\n            nbin = self.parameters[""nbin""].value\n            mmin = self.parameters[""logmmin""].value\n            mmax = self.parameters[""logmmax""].value\n            mnew = np.logspace(mmin, mmax, nbin + 1)\n            for i in range(nbin + 1):\n                self.parameters[""logM%02d"" % i].value = np.log10(mnew[i])\n            if self.autocalculate:\n                self.do_calculate("""")\n        return """", True\n\n    def setup_graphic_bins(self):\n        """"""Setup graphic helpers for the theory""""""\n        nbin = self.parameters[""nbin""].value\n        # marker at the Mw value of the bin\n        self.Mw_bin = self.ax.plot(np.zeros(nbin), np.zeros(nbin))[0]\n        self.Mw_bin.set_marker(""|"")\n        self.Mw_bin.set_linestyle("""")\n        self.Mw_bin.set_visible(False)\n        # self.Mw_bin.set_markerfacecolor(\'yellow\')\n        self.Mw_bin.set_markeredgecolor(""black"")\n        self.Mw_bin.set_markeredgewidth(4)\n        self.Mw_bin.set_markersize(18)\n        self.Mw_bin.set_alpha(1)\n\n        # setup the movable edge bins\n        self.bins = np.logspace(\n            self.parameters[""logmmin""].value, self.parameters[""logmmax""].value, nbin + 1\n        )\n        self.graphic_bins = self.ax.plot(self.bins, np.zeros(nbin + 1), picker=10)[0]\n        self.graphic_bins.set_marker(""d"")\n        self.graphic_bins.set_linestyle("""")\n        self.graphic_bins.set_visible(self.view_bins)\n        self.graphic_bins.set_markerfacecolor(""yellow"")\n        self.graphic_bins.set_markeredgecolor(""red"")\n        self.graphic_bins.set_markeredgewidth(3)\n        self.graphic_bins.set_markersize(18)\n        self.graphic_bins.set_alpha(0.75)\n        self.artist_bins = DraggableBinSeries(\n            self.graphic_bins,\n            DragType.horizontal,\n            self.parent_dataset.parent_application.current_view.log_x,\n            self.parent_dataset.parent_application.current_view.log_y,\n            self.drag_bin,\n        )\n\n        self.extra_data[""bin_height""] = np.zeros(nbin)\n        self.extra_data[""bin_edges""] = np.zeros(nbin + 1)\n        for i in range(nbin + 1):\n            self.extra_data[""bin_edges""][i] = np.power(\n                10, self.parameters[""logM%02d"" % i].value\n            )\n\n    def set_extra_data(self, extra_data):\n        """"""Define the extra_data dict and set the bin number\n        Redefinition of the QTheory function""""""\n        self.extra_data = extra_data\n        nbin = len(self.extra_data[""bin_height""])\n        try:\n            self.spinbox.blockSignals(True)\n            self.spinbox.setValue(nbin)\n            self.spinbox.blockSignals(False)\n        except:\n            # in CL mode\n            pass\n\n    def destructor(self):\n        """"""Called when the theory tab is closed""""""\n        self.graphic_bins_visible(False)\n        self.ax.lines.remove(self.graphic_bins)\n\n    def show_theory_extras(self, show=False):\n        """"""Called when the active theory is changed""""""\n        if CmdBase.mode == CmdMode.GUI:\n            self.Qhide_theory_extras(show)\n        self.graphic_bins_visible(show)\n\n    def graphic_bins_visible(self, state):\n        """"""Set visibility of graphic helpers""""""\n        self.view_bins = state\n        self.graphic_bins.set_visible(state)  # movable edge bins\n        self.Mw_bin.set_visible(state)  # Mw tick marks\n        self.set_bar_plot(state)  # bar plot\n\n        if self.view_bins:\n            self.artist_bins.connect()\n        else:\n            self.artist_bins.disconnect()\n        # self.do_calculate("""")\n        self.parent_dataset.parent_application.update_plot()\n\n    def drag_bin(self, newx, newy):\n        """"""Move edges of the bins""""""\n        nbin = self.parameters[""nbin""].value\n        newx = np.sort(newx)\n        self.parameters[""logmmin""].value = np.log10(newx[0])\n        self.parameters[""logmmax""].value = np.log10(newx[nbin])\n        for i in range(nbin + 1):\n            self.set_param_value(""logM%02d"" % i, np.log10(newx[i]))\n        self.do_calculate("""")\n        self.update_parameter_table()\n\n    def do_error(self, line):\n        """"""This theory does not calculate the error""""""\n        pass\n\n    def do_fit(self, line=""""):\n        """"""Fit not allowed in this theory""""""\n        pass\n\n    def calculate_moments(self, f, line=""""):\n        """"""Calculate the moments Mn, Mw, and Mz of a molecular mass distribution""""""\n        n = f[:, 0].size\n        Mw = 0\n        tempMn = 0\n        tempM2 = 0\n        tempM3 = 0\n\n        for i in range(n):\n            M = f[i, 0]\n            w = f[i, 1]\n            # M = np.power(10, (np.log10(f[i + 1, 0]) + np.log10(f[i, 0])) / 2 )\n            Mw += w * M\n            tempM3 += w * M ** 3  # w*M^3\n            tempM2 += w * M * M  # w*M^2\n            tempMn += w / M  # w/M\n\n        if tempMn * Mw * tempM2 != 0:\n            Mn = 1 / tempMn\n            Mz = tempM2 / Mw\n            Mzp1 = tempM3 / tempM2\n            PDI = Mw / Mn\n        else:\n            PDI = Mzp1 = Mz = Mw = Mn = np.nan\n            self.Qprint(""Could not determine moments"")\n\n        # if line == ""input"" and CmdBase.mode == CmdMode.GUI:\n        #     file_table = self.parent_dataset.DataSettreeWidget.topLevelItem(0)\n        #     self.parent_dataset.DataSettreeWidget.blockSignals(True)\n        #     file_table.setText(1, ""%0.3g"" % (Mn / 1000))\n        #     file_table.setText(2, ""%0.3g"" % (Mw / 1000))\n        #     file_table.setText(3, ""%0.3g"" % PDI)\n        #     self.parent_dataset.DataSettreeWidget.blockSignals(False)\n\n        if line == ""discretized"":\n            self.set_param_value(""Mn"", Mn / 1000)\n            self.set_param_value(""Mw"", Mw / 1000)\n            self.set_param_value(""Mz"", Mz / 1000)\n            self.set_param_value(""PDI"", PDI)\n\n        if line == """":\n            return Mn / 1000, Mw / 1000, PDI, Mz / Mw\n        else:\n            self.Qprint(""""""<h3>Characteristics of the %s MWD<br></h3>"""""" % line, end="""")\n            # table=\'\'\'<table border=""1"" width=""100%"">\'\'\'\n            # table+=\'\'\'<tr><th>Mn (kg/mol)</th><th>Mw (kg/mol)</th><th>Mw/Mn</th><th>Mz/Mw</th><th>Mz+1/Mz</th></tr>\'\'\'\n            # table+=\'\'\'<tr><td>%.3g</td><td>%.3g</td><td>%.3g</td><td>%.3g</td><td>%.3g</td></tr>\'\'\'%(Mn / 1000, Mw / 1000, PDI, Mz / Mw, Mzp1/Mz)\n            # table+=\'\'\'</table><br>\'\'\'\n            table = [\n                [\n                    ""%-12s"" % ""Mn (kg/mol)"",\n                    ""%-12s"" % ""Mw (kg/mol)"",\n                    ""%-9s"" % ""Mw/Mn"",\n                    ""%-9s"" % ""Mz/Mw"",\n                    ""%-9s"" % ""Mz+1/Mz"",\n                ],\n            ]\n            table.append(\n                [\n                    ""%-12.3g"" % (Mn / 1000),\n                    ""%-12.3g"" % (Mw / 1000),\n                    ""%-9.3g"" % PDI,\n                    ""%-9.3g"" % (Mz / Mw),\n                    ""%-9.3g"" % (Mzp1 / Mz),\n                ]\n            )\n            self.Qprint(table)\n\n    def discretise_mwd(self, f=None):\n        """"""Discretize a molecular weight distribution""""""\n        self.extra_data[""current_fname""] = f.file_name_short\n        # sort M, w with M increasing in ft\n        f.data_table.data = f.data_table.data[np.argsort(f.data_table.data[:, 0])]\n        ft = f.data_table.data\n\n        if f != self.current_file:\n            self.set_equally_spaced_bins()\n\n        # normalize area under the data points to compute the moments\n        n = ft[:, 0].size\n        temp_area = 0\n        temp = np.zeros((n - 1, 2))\n        for i in range(n - 1):\n            dlogM = np.log10(ft[i + 1, 0]) - np.log10(ft[i, 0])\n            mean_w = (ft[i, 1] + ft[i + 1, 1]) / 2\n            temp_area += mean_w * dlogM\n            temp[i, 0] = np.power(10, (np.log10(ft[i + 1, 0]) + np.log10(ft[i, 0])) / 2)\n            temp[i, 1] = mean_w * dlogM\n        if temp_area != 0:\n            temp[:, 1] /= temp_area\n        self.calculate_moments(temp, ""input"")\n\n        nbin = self.parameters[""nbin""].value\n        edge_bins = np.zeros(nbin + 1)\n        for i in range(nbin + 1):\n            edge_bins[i] = np.power(10, self.parameters[""logM%02d"" % i].value)\n\n        # each M-bin is the Mw value of along the bin width\n        out_mbins = np.zeros(nbin)  # output M bins\n        for i in range(nbin):\n            x = []  # list of M containing bin edges and data point in between\n            y = (\n                []\n            )  # list of weight containg interpolated values at bin edges and data points\n            w_interp = np.interp(\n                [edge_bins[i], edge_bins[i + 1]], ft[:, 0], ft[:, 1], left=0, right=0\n            )  # interpolate out of range values to zero\n            x.append(edge_bins[i])\n            y.append(w_interp[0])\n            for j in range(n):\n                if edge_bins[i] <= ft[j, 0] and ft[j, 0] < edge_bins[i + 1]:\n                    x.append(ft[j, 0])\n                    y.append(ft[j, 1])\n            x.append(edge_bins[i + 1])\n            y.append(w_interp[1])\n            tempM = 0\n            for j in range(len(x)):\n                tempM += x[j] * y[j]  # w * M(w)\n            out_mbins[i] = tempM\n            s = np.sum(y)\n            if s != 0:\n                out_mbins[i] /= s\n\n        # add area inder the curve to w_out and normalize by bin width\n        w_out = np.zeros(nbin)\n        for i in range(nbin):\n            x = []\n            y = []\n            w_interp = np.interp(\n                [edge_bins[i], edge_bins[i + 1]], ft[:, 0], ft[:, 1], left=0, right=0\n            )\n            x.append(edge_bins[i])\n            y.append(w_interp[0])\n            for j in range(n):\n                if edge_bins[i] <= ft[j, 0] and ft[j, 0] < edge_bins[i + 1]:\n                    x.append(ft[j, 0])\n                    y.append(ft[j, 1])\n            x.append(edge_bins[i + 1])\n            y.append(w_interp[1])\n            w_out[i] = np.trapz(y, x=np.log10(x)) / (\n                np.log10(edge_bins[i + 1]) - np.log10(edge_bins[i])\n            )\n\n        # copy weights and M into theory table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = 2\n        tt.num_rows = len(w_out)\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n\n        # save into extra_data\n        self.extra_data[""bin_height""] = w_out\n        self.extra_data[""bin_edges""] = edge_bins\n\n        # compute moments of discretized distribution\n        arg_nonzero = np.flatnonzero(w_out)\n        nbin_out = len(arg_nonzero)\n        saved_th = np.zeros((nbin_out, 2))\n        saved_th[:, 0] = out_mbins[arg_nonzero]\n        for i, arg in enumerate(arg_nonzero):\n            saved_th[i, 1] = (\n                np.log10(edge_bins[arg + 1]) - np.log10(edge_bins[arg])\n            ) * w_out[arg]\n        saved_th[:, 1] /= np.sum(saved_th[:, 1])\n        self.calculate_moments(saved_th, ""discretized"")\n        self.extra_data[""saved_th""] = saved_th\n\n    def plot_theory_stuff(self):\n        """"""Plot theory graphic helpers""""""\n        nbin = self.parameters[""nbin""].value\n        x = np.zeros(nbin + 1)\n        y = np.zeros(nbin + 1)\n        for i in range(nbin + 1):\n            x[i] = self.parameters[""logM%02d"" % i].value\n        self.graphic_bins.set_data(np.power(10, x), y)\n\n        # set the bar plot\n        self.set_bar_plot(True)\n\n        # set the tick marks of for each bin Mw value\n        self.Mw_bin.set_data(\n            self.extra_data[""saved_th""][:, 0],\n            np.zeros(len(self.extra_data[""saved_th""][:, 0])),\n        )\n        self.Mw_bin.set_visible(True)\n\n    def set_bar_plot(self, visible=True):\n        """"""Hide/Show the bar plot""""""\n        try:\n            self.bar_bins.remove()  # remove existing bars, if any\n        except:\n            pass  # no bar plot to remove\n        if visible:\n            bin_e = self.extra_data[""bin_edges""]\n            edges = bin_e[:-1]  # remove last bin\n            nbin = len(edges)\n            width = np.zeros(nbin)\n            for i in range(nbin):\n                width[i] = bin_e[i + 1] - bin_e[i]\n            self.bar_bins = self.ax.bar(\n                edges,\n                self.extra_data[""bin_height""],\n                width,\n                align=""edge"",\n                color=""grey"",\n                edgecolor=""black"",\n                alpha=0.5,\n            )\n\n    def get_mwd(self):\n        m = np.copy(self.extra_data[""saved_th""][:, 0])\n        phi = np.copy(self.extra_data[""saved_th""][:, 1])\n        return m, phi\n\n\nclass CLTheoryDiscrMWD(BaseTheoryDiscrMWD, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n\nclass GUITheoryDiscrMWD(BaseTheoryDiscrMWD, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n        # add widgets specific to the theory\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n        self.spinbox = QSpinBox()\n        self.spinbox.setRange(\n            self.NBIN_MIN, self.NBIN_MAX\n        )  # min and max number of modes\n        self.spinbox.setSuffix("" bins"")\n        self.spinbox.setValue(self.parameters[""nbin""].value)  # initial value\n        tb.addWidget(self.spinbox)\n        self.thToolsLayout.insertWidget(0, tb)\n        # view bins button\n        self.view_bins_button = tb.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-visible.png""), ""View modes""\n        )\n        self.view_bins_button.setCheckable(True)\n        self.view_bins_button.setChecked(True)\n        self.thToolsLayout.insertWidget(0, tb)\n        self.thToolsLayout.insertWidget(0, tb)\n\n        # connections signal and slots\n        connection_id = self.view_bins_button.triggered.connect(\n            self.handle_view_bins_button_triggered\n        )\n        connection_id = self.spinbox.valueChanged.connect(\n            self.handle_spinboxValueChanged\n        )\n\n        # disable useless buttons for this theory\n        self.parent_dataset.actionMinimize_Error.setDisabled(True)\n        self.parent_dataset.actionShow_Limits.setDisabled(True)\n        self.parent_dataset.actionVertical_Limits.setDisabled(True)\n        self.parent_dataset.actionHorizontal_Limits.setDisabled(True)\n\n    def handle_spinboxValueChanged(self, value):\n        """"""Handle a change of the parameter \'nbin\'""""""\n        self.spinbox.setValue(value)\n        self.set_param_value(""nbin"", value)\n        self.update_parameter_table()\n\n    def Qhide_theory_extras(self, state):\n        """"""Uncheck the view_bins_button button and change button activation state.\n        Called when curent theory is changed""""""\n        self.view_bins_button.setChecked(state)\n        self.parent_dataset.actionMinimize_Error.setDisabled(state)\n        self.parent_dataset.actionShow_Limits.setDisabled(state)\n        self.parent_dataset.actionVertical_Limits.setDisabled(state)\n        self.parent_dataset.actionHorizontal_Limits.setDisabled(state)\n\n    def handle_view_bins_button_triggered(self, checked):\n        """"""Set visibility of bins""""""\n        self.graphic_bins_visible(checked)\n        self.set_bar_plot(True)  # leave the bar plot on\n        self.parent_dataset.parent_application.update_plot()\n\n    def do_save(self, dir, extra_txt=""""):\n        """"""Save discrete MWD""""""\n        nbin = self.parameters[""nbin""].value\n        file_out = os.path.join(\n            dir,\n            ""%s_TH_%dbins%s.txt"" % (self.extra_data[""current_fname""], nbin, extra_txt),\n        )\n        fout = open(file_out, ""w"")\n        # output polymers\n        Mn, Mw, PDI, Mz_Mw = self.calculate_moments(self.extra_data[""saved_th""], """")\n        fout.write(""Mn=%.3g;Mw=%.3g;PDI=%.3g;Mz/Mw=%.3g\\n"" % (Mn, Mw, PDI, Mz_Mw))\n        fout.write(""%-10s %12s\\n"" % (""M"", ""phi(M)""))\n        nbin_out = len(self.extra_data[""saved_th""][:, 0])\n        for i in range(nbin_out):\n            fout.write(\n                ""%-10.3e %12.6e\\n""\n                % (self.extra_data[""saved_th""][i, 0], self.extra_data[""saved_th""][i, 1])\n            )\n\n        # print information\n        msg = \'Saved %d bins to ""%s""\' % (nbin_out, file_out)\n        if CmdBase.mode == CmdMode.GUI:\n            QMessageBox.information(self, ""Saved discretized MWD"", msg)\n        else:\n            print(msg)\n'"
RepTate/theories/TheoryGEX.py,6,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2018): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryGEX\n\nGEX file for creating a new theory\n""""""\nimport numpy as np\nfrom math import gamma\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\n\n\nclass TheoryGEX(CmdBase):\n    """"""Generalized Exponential Function (GEX) for experimental molecular weight distributions.\n    \n    * **Function**\n        .. math::\n            W(M) = W_0 \\\\frac{b}{M_0 \\\\Gamma\\\\left(\\\\frac{a}{b}\\\\right)} \\\\left(\\\\frac{M}{M_0}\\\\right)^{a-1} \\\\exp\\\\left[ -\\\\left(\\\\frac{M}{M_0}\\\\right)^b \\\\right]\n    \n    * **Parameters**\n       - ``logW0`` :math:`\\\\equiv\\\\log_{10}(W_0)`: Normalization constant.\n       - ``logM0`` :math:`\\\\equiv\\\\log_{10}(M_0)`: Proportional to :math:`M_n` and :math:`M_w`.\n       - ``a`` : Parameter related to polydispersity and skewness\n       - ``b`` : Parameter related to polydispersity and skewness\n    """"""\n\n    thname = ""GEX""\n    description = ""Generalized Exponential Function distribution""\n    citations = []\n    doi = []\n\n    def __new__(cls, name="""", parent_dataset=None, axarr=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryGEX(name, parent_dataset, axarr)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryGEX(name, parent_dataset, axarr)\n        )\n\n\nclass BaseTheoryGEX:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/MWD/Theory/theory.html#generalized-exponential-function""\n    single_file = (\n        False  # False if the theory can be applied to multiple files simultaneously\n    )\n    thname = TheoryGEX.thname\n    citations = TheoryGEX.citations\n    doi = TheoryGEX.doi\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        self.function = self.GEX  # main theory function\n        self.has_modes = False  # True if the theory has modes\n        self.parameters[""logW0""] = Parameter(\n            name=""logW0"",\n            value=5,\n            description=""Log Normalization constant"",\n            type=ParameterType.real,\n            opt_type=OptType.opt,\n        )\n        self.parameters[""logM0""] = Parameter(\n            name=""logM0"",\n            value=5,\n            description=""Log molecular weight"",\n            type=ParameterType.real,\n            opt_type=OptType.opt,\n        )\n        self.parameters[""a""] = Parameter(\n            name=""a"",\n            value=1,\n            description=""Exponent parameter"",\n            type=ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=0,\n        )\n        self.parameters[""b""] = Parameter(\n            name=""b"",\n            value=0.5,\n            description=""Exponent parameter"",\n            type=ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=0,\n        )\n\n    def GEX(self, f=None):\n        """"""GEX function""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        W0 = np.power(10.0, self.parameters[""logW0""].value)\n        M0 = np.power(10.0, self.parameters[""logM0""].value)\n        a = self.parameters[""a""].value\n        b = self.parameters[""b""].value\n\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        tt.data[:, 0] = ft.data[:, 0]\n        tt.data[:, 1] = (\n            W0\n            * b\n            / M0\n            / gamma((a + 1) / b)\n            * np.power(tt.data[:, 0] / M0, a)\n            * np.exp(-np.power(tt.data[:, 0] / M0, b))\n        )\n\n    def do_error(self, line):\n        """"""Report the error of the current theory\n\nReport the error of the current theory on all the files, taking into account the current selected xrange and yrange.\n\nFile error is calculated as the mean square of the residual, averaged over all points in the file. Total error is the mean square of the residual, averaged over all points in all files.""""""\n        super().do_error(line)\n        if line == """":\n            self.Qprint(""""""<h3>Characteristics of the fitted MWD</h3>"""""")\n            M0 = np.power(10.0, self.parameters[""logM0""].value)\n            a = self.parameters[""a""].value\n            b = self.parameters[""b""].value\n            Mn = M0 * gamma((a + 1) / b) / gamma(a / b)\n            Mw = M0 * gamma((a + 2) / b) / gamma((a + 1) / b)\n            Mz = M0 * gamma((a + 3) / b) / gamma((a + 2) / b)\n            # table=\'\'\'<table border=""1"" width=""100%"">\'\'\'\n            # table+=\'\'\'<tr><th>Mn</th><th>Mw</th><th>Mz</th><th>D</th></tr>\'\'\'\n            # table+=\'\'\'<tr><td>%6.3gk</td><td>%6.3gk</td><td>%6.3gk</td><td>%7.3g</td></tr>\'\'\'%(Mn / 1000, Mw / 1000, Mz/1000 , Mw/Mn)\n            # table+=\'\'\'</table><br>\'\'\'\n            table = [\n                [\n                    ""%-12s"" % ""Mn (kg/mol)"",\n                    ""%-12s"" % ""Mw (kg/mol)"",\n                    ""%-9s"" % ""Mw/Mn"",\n                    ""%-9s"" % ""Mz/Mw"",\n                ],\n            ]\n            table.append(\n                [\n                    ""%-12.3g"" % (Mn / 1000),\n                    ""%-12.3g"" % (Mw / 1000),\n                    ""%-9.3g"" % (Mw / Mn),\n                    ""%-9.3g"" % (Mz / Mw),\n                ]\n            )\n            self.Qprint(table)\n\n\nclass CLTheoryGEX(BaseTheoryGEX, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # This class usually stays empty\n\n\nclass GUITheoryGEX(BaseTheoryGEX, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # add widgets specific to the theory here:\n'"
RepTate/theories/TheoryGiesekus.py,18,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryGiesekus\n\nModule for the Giesekus model for the non-linear flow of entangled polymers.\n\n""""""\nimport numpy as np\nfrom scipy.integrate import odeint\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom PyQt5.QtWidgets import QToolBar, QToolButton, QMenu, QSpinBox, QMessageBox\nfrom PyQt5.QtCore import QSize\nfrom PyQt5.QtGui import QIcon\nfrom PyQt5.QtCore import Qt\nfrom RepTate.gui.Theory_rc import *\nfrom RepTate.core.Theory import EndComputationRequested\nfrom RepTate.applications.ApplicationLAOS import GUIApplicationLAOS, CLApplicationLAOS\nfrom RepTate.theories.theory_helpers import FlowMode, EditModesDialog\n\nclass TheoryGiesekus(CmdBase):\n    """"""Multi-mode Giesekus Model (see Chapter 6 of :cite:`NLVE-Larson1988`):\n    \n    .. math::\n        \\\\boldsymbol \\\\sigma &= \\\\sum_{i=1}^n G_i \\\\boldsymbol  {A_i},\\\\\\\\\n        \\\\dfrac {\\\\mathrm D \\\\boldsymbol  A_i} {\\\\mathrm D t} &=  \\\\boldsymbol \\\\kappa \\\\cdot \\\\boldsymbol A_i\n        + \\\\boldsymbol A_i\\\\cdot \\\\boldsymbol \\\\kappa ^T \n        - \\dfrac {1} {\\\\tau_i}  (\\\\boldsymbol A_i - \\\\boldsymbol I)\n        -  \\dfrac {\\\\alpha_i} {\\\\tau_i} (\\\\boldsymbol A_i - \\\\boldsymbol I)^2,\n\n    where for each mode :math:`i`:\n        - :math:`G_i`: weight of mode :math:`i`\n        - :math:`\\\\tau_i`: relaxation time of mode :math:`i`\n        - :math:`\\\\alpha_i`: constant of proportionality mode :math:`i`\n   \n   * **Parameters**\n        - ``alpha_i`` :math:`\\\\equiv \\\\alpha_i`\n\n    """"""\n    thname = ""Giesekus""\n    description = ""Giesekus constitutive equation""\n    citations = [""Giesekus H., Rheol. Acta 1966, 5, 29""]\n    doi = [""http://dx.doi.org/10.1007/BF01973575""]\n\n    def __new__(cls, name="""", parent_dataset=None, ax=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return GUITheoryGiesekus(\n            name, parent_dataset,\n            ax) if (CmdBase.mode == CmdMode.GUI) else CLTheoryGiesekus(\n                name, parent_dataset, ax)\n\n\nclass BaseTheoryGiesekus:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = \'http://reptate.readthedocs.io/manual/Applications/NLVE/Theory/theory.html#multi-mode-giesekus-model\'\n    single_file = False\n    thname = TheoryGiesekus.thname\n    citations = TheoryGiesekus.citations\n    doi = TheoryGiesekus.doi\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        self.function = self.calculate_giesekus\n        self.has_modes = True\n        self.parameters[""nmodes""] = Parameter(\n            name=""nmodes"",\n            value=2,\n            description=""Number of modes"",\n            type=ParameterType.integer,\n            opt_type=OptType.const,\n            display_flag=False)\n        self.parameters[""nstretch""] = Parameter(\n            name=""nstretch"",\n            value=2,\n            description=""Number of strecthing modes"",\n            type=ParameterType.integer,\n            opt_type=OptType.const,\n            display_flag=False)\n\n        for i in range(self.parameters[""nmodes""].value):\n            self.parameters[""G%02d"" % i] = Parameter(\n                name=""G%02d"" % i,\n                value=1000.0,\n                description=""Modulus of mode %02d"" % i,\n                type=ParameterType.real,\n                opt_type=OptType.nopt,\n                display_flag=False,\n                min_value=0)\n            self.parameters[""tauD%02d"" % i] = Parameter(\n                name=""tauD%02d"" % i,\n                value=10.0,\n                description=""Terminal time of mode %02d"" % i,\n                type=ParameterType.real,\n                opt_type=OptType.nopt,\n                display_flag=False,\n                min_value=0)\n            self.parameters[""alpha%02d"" % i] = Parameter(\n                name=""alpha%02d"" % i,\n                value=0.5,\n                description=""Dimensionless mobility factor of mode %02d"" % i,\n                type=ParameterType.real,\n                opt_type=OptType.opt,\n                min_value=0,\n                max_value=1)\n\n        self.MAX_MODES = 40\n        self.init_flow_mode()\n\n    def init_flow_mode(self):\n        """"""Find if data files are shear or extension""""""\n        try:\n            f = self.theory_files()[0]\n            if f.file_type.extension == \'shear\':\n                self.flow_mode = FlowMode.shear\n            else:\n                self.flow_mode = FlowMode.uext\n        except Exception as e:\n            print(""in RP init:"", e)\n            self.flow_mode = FlowMode.shear  #default mode: shear\n\n    def get_modes(self):\n        """"""Get the values of Maxwell Modes from this theory""""""\n        nmodes = self.parameters[""nmodes""].value\n        tau = np.zeros(nmodes)\n        G = np.zeros(nmodes)\n        for i in range(nmodes):\n            tau[i] = self.parameters[""tauD%02d"" % i].value\n            G[i] = self.parameters[""G%02d"" % i].value\n        return tau, G, True\n\n    def set_modes(self, tau, G):\n        """"""Set the values of Maxwell Modes from another theory""""""\n        nmodes = len(tau)\n        self.set_param_value(""nmodes"", nmodes)\n        self.set_param_value(""nstretch"", nmodes)\n\n        for i in range(nmodes):\n            self.set_param_value(""tauD%02d"" % i, tau[i])\n            self.set_param_value(""G%02d"" % i, G[i])\n        return True\n\n    def n1_uext(self, p, times):\n        """"""Upper Convected Maxwell model in uniaxial extension.\n        Returns N1 = (XX -YY) component of stress tensor""""""\n        _, G, tauD, ed = p\n        w = tauD * ed\n        sxx = (1 - 2 * w * np.exp(-(1 - 2 * w) * times / tauD)) / (1 - 2 * w)\n        syy = (1 + w * np.exp(-(1 + w) * times / tauD)) / (1 + w)\n\n        return G * (sxx - syy)\n\n    def sigma_xy_shear(self, p, times):\n        """"""Upper Convected Maxwell model in shear.\n        Returns XY component of stress tensor""""""\n        _, G, tauD, gd = p\n\n        return G * gd * tauD * (1 - np.exp(-times / tauD))\n\n    def sigma_xy_shearLAOS(self, p, times):\n        """"""Giesekus model in LAOS""""""        \n        _, G, tauD, g0, w = p\n        eta = G*tauD\n\n        return eta*g0*w*(tauD*w*np.sin(w*times)\n                        -np.exp(-times/tauD)\n                        +np.cos(w*times))/(1+w**2*tauD**2)\n\n    def sigmadot_shear(self, sigma, times, p):\n        """"""Giesekus model in shear""""""\n        if self.stop_theory_flag:\n            raise EndComputationRequested\n        alpha, _, tau, gdot = p\n        sxx, syy, sxy = sigma\n\n        dsxx = 2 * gdot * sxy + (alpha - 1) * (sxx - 1) / tau - alpha / tau * (\n            sxx * sxx + sxy * sxy - sxx)\n\n        dsyy = (alpha - 1) * (syy - 1) / tau - alpha / tau * (\n            sxy * sxy + syy * syy - syy)\n\n        dsxy = gdot * syy + (alpha - 1) * sxy / tau - alpha / tau * (\n            sxx * sxy + sxy * syy - sxy)\n\n        return [dsxx, dsyy, dsxy]\n\n    def sigmadot_uext(self, sigma, times, p):\n        """"""Giesekus model in uniaxial extension""""""\n        if self.stop_theory_flag:\n            raise EndComputationRequested\n        alpha, _, tau, edot = p\n        sxx, syy = sigma\n\n        dsxx = 2 * edot * sxx + (alpha - 1) * (sxx - 1) / tau - alpha / tau * (\n            sxx * sxx - sxx)\n\n        dsyy = -edot * syy + (alpha - 1) * (syy - 1) / tau - alpha / tau * (\n            syy * syy - syy)\n\n        return [dsxx, dsyy]\n\n    # def sigmadot_uext(self, sigma, times, p):\n    #     """"""Giesekus model in uniaxial extension""""""\n    #     alpha, _, tau, gdot = p\n    #     sxx, syy = sigma\n\n    #     dsxx = 2 * gdot * sxx - (sxx - 1) / tau - alpha / tau * sxx * (sxx - 1)\n    #     dsyy = -gdot * syy - (syy - 1) / tau - alpha / tau * syy * (syy - 1)\n    #     return [dsxx, dsyy]\n\n    def sigmadot_shearLAOS(self, sigma, times, p):\n        """"""Giesekus model in shear""""""\n        if self.stop_theory_flag:\n            raise EndComputationRequested\n        alpha, _, tau, g0, w = p\n        sxx, syy, sxy = sigma\n        gdot = g0*w*np.cos(w*times)\n\n        dsxx = 2 * gdot * sxy + (alpha - 1) * (sxx - 1) / tau - alpha / tau * (\n            sxx * sxx + sxy * sxy - sxx)\n\n        dsyy = (alpha - 1) * (syy - 1) / tau - alpha / tau * (\n            sxy * sxy + syy * syy - syy)\n\n        dsxy = gdot * syy + (alpha - 1) * sxy / tau - alpha / tau * (\n            sxx * sxy + sxy * syy - sxy)\n\n        return [dsxx, dsyy, dsxy]\n\n    def calculate_giesekus(self, f=None):\n        """"""Calculate Giesekus""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        tt.data[:, 0] = ft.data[:, 0]\n\n        #flow geometry\n        if self.flow_mode == FlowMode.shear:\n            sigma0 = [1.0, 1.0, 0.0]  # sxx, syy, sxy\n            pde_stretch = self.sigmadot_shear\n        elif self.flow_mode == FlowMode.uext:\n            sigma0 = [1.0, 1.0]  # sxx, syy\n            pde_stretch = self.sigmadot_uext\n        else:\n            return\n\n        # ODE solver parameters\n        abserr = 1.0e-8\n        relerr = 1.0e-6\n        t = ft.data[:, 0]\n        t = np.concatenate([[0], t])\n        # sigma0 = [1.0, 1.0, 0.0]  # sxx, syy, sxy\n        flow_rate = float(f.file_parameters[""gdot""])\n        nmodes = self.parameters[""nmodes""].value\n        nstretch = self.parameters[""nstretch""].value\n        for i in range(nmodes):\n            if self.stop_theory_flag:\n                break\n            G = self.parameters[""G%02d"" % i].value\n            tauD = self.parameters[""tauD%02d"" % i].value\n            alpha = self.parameters[""alpha%02d"" % i].value\n            p = [alpha, G, tauD, flow_rate]\n            if i < nstretch:\n                try:\n                    sig = odeint(\n                        pde_stretch,\n                        sigma0,\n                        t,\n                        args=(p, ),\n                        atol=abserr,\n                        rtol=relerr)\n                except EndComputationRequested:\n                    break\n                if self.flow_mode == FlowMode.shear:\n                    sxy = np.delete(sig[:, 2], [0])\n                    tt.data[:, 1] += G * sxy\n                elif self.flow_mode == FlowMode.uext:\n                    sxx = np.delete(sig[:, 0], [0])\n                    syy = np.delete(sig[:, 1], [0])\n                    tt.data[:, 1] += G * (sxx - syy)\n            else:\n                # use UCM for non stretching modes\n                if self.flow_mode == FlowMode.shear:\n                    tt.data[:, 1] += self.sigma_xy_shear(p, ft.data[:, 0])\n                elif self.flow_mode == FlowMode.uext:\n                    tt.data[:, 1] += self.n1_uext(p, ft.data[:, 0])\n\n    def calculate_giesekusLAOS(self, f=None):\n        """"""Calculate Giesekus for LAOS""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        tt.data[:, 0] = ft.data[:, 0]\n\n        sigma0 = [1.0, 1.0, 0.0]  # sxx, syy, sxy\n        pde_stretchLAOS = self.sigmadot_shearLAOS\n\n        # ODE solver parameters\n        abserr = 1.0e-8\n        relerr = 1.0e-6\n        g0 = float(f.file_parameters[""gamma""])\n        w = float(f.file_parameters[""omega""])\n        nmodes = self.parameters[""nmodes""].value\n        nstretch = self.parameters[""nstretch""].value\n        t = ft.data[:, 0]\n        tt.data[:, 1] = g0*np.sin(w*t)\n        t = np.concatenate([[0], t])\n        for i in range(nmodes):\n            if self.stop_theory_flag:\n                break\n            G = self.parameters[""G%02d"" % i].value\n            tauD = self.parameters[""tauD%02d"" % i].value\n            alpha = self.parameters[""alpha%02d"" % i].value\n            p = [alpha, G, tauD, g0, w]\n            if i < nstretch:\n                try:\n                    sig = odeint(\n                        pde_stretchLAOS,\n                        sigma0,\n                        t,\n                        args=(p, ),\n                        atol=abserr,\n                        rtol=relerr)\n                except EndComputationRequested:\n                    break\n                sxy = np.delete(sig[:, 2], [0])\n                tt.data[:, 2] += G * sxy\n            else:\n                # use UCM for non stretching modes\n                tt.data[:, 1] += self.sigma_xy_shearLAOS(p, ft.data[:, 0])\n \n    def set_param_value(self, name, value):\n        """"""Set value of a theory parameter""""""\n        if (name == ""nmodes""):\n            oldn = self.parameters[""nmodes""].value\n            if CmdBase.mode==CmdMode.GUI:\n                self.spinbox.setMaximum(int(value))\n        message, success = super(BaseTheoryGiesekus, self).set_param_value(\n            name, value)\n        if not success:\n            return message, success\n        if (name == ""nmodes""):\n            for i in range(self.parameters[""nmodes""].value):\n                self.parameters[""G%02d"" % i] = Parameter(\n                    name=""G%02d"" % i,\n                    value=1000.0,\n                    description=""Modulus of mode %02d"" % i,\n                    type=ParameterType.real,\n                    opt_type=OptType.nopt,\n                    display_flag=False,\n                    min_value=0)\n                self.parameters[""tauD%02d"" % i] = Parameter(\n                    name=""tauD%02d"" % i,\n                    value=10.0,\n                    description=""Terminal time of mode %02d"" % i,\n                    type=ParameterType.real,\n                    opt_type=OptType.nopt,\n                    display_flag=False,\n                    min_value=0)\n                self.parameters[""alpha%02d"" % i] = Parameter(\n                    name=""alpha%02d"" % i,\n                    value=0.5,\n                    description=""Constant of proportionality of mode %02d"" % i,\n                    type=ParameterType.real,\n                    opt_type=OptType.opt,\n                    display_flag=True,\n                    min_value=0,\n                    max_value=1)\n            if (oldn > self.parameters[""nmodes""].value):\n                for i in range(self.parameters[""nmodes""].value, oldn):\n                    del self.parameters[""G%02d"" % i]\n                    del self.parameters[""tauD%02d"" % i]\n                    del self.parameters[""alpha%02d"" % i]\n        return \'\', True\n\n\nclass CLTheoryGiesekus(BaseTheoryGiesekus, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n        if isinstance(parent_dataset.parent_application, CLApplicationLAOS):\n            self.function = self.calculate_giesekusLAOS\n\n\nclass GUITheoryGiesekus(BaseTheoryGiesekus, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n        # add widgets specific to the theory\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n\n        if not isinstance(parent_dataset.parent_application, GUIApplicationLAOS):\n            self.tbutflow = QToolButton()\n            self.tbutflow.setPopupMode(QToolButton.MenuButtonPopup)\n            menu = QMenu()\n            self.shear_flow_action = menu.addAction(\n                QIcon(\':/Icon8/Images/new_icons/icon-shear.png\'),\n                ""Shear Flow"")\n            self.extensional_flow_action = menu.addAction(\n                QIcon(\':/Icon8/Images/new_icons/icon-uext.png\'),\n                ""Extensional Flow"")\n            if self.flow_mode == FlowMode.shear:\n                self.tbutflow.setDefaultAction(self.shear_flow_action)\n            else:\n                self.tbutflow.setDefaultAction(self.extensional_flow_action)\n            self.tbutflow.setMenu(menu)\n            tb.addWidget(self.tbutflow)\n            connection_id = self.shear_flow_action.triggered.connect(\n                self.select_shear_flow)\n            connection_id = self.extensional_flow_action.triggered.connect(\n                self.select_extensional_flow)\n        else:\n            self.function = self.calculate_giesekusLAOS\n\n        self.tbutmodes = QToolButton()\n        self.tbutmodes.setPopupMode(QToolButton.MenuButtonPopup)\n        menu = QMenu()\n        self.get_modes_action = menu.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-broadcasting.png\'),\n            ""Get Modes"")\n        self.edit_modes_action = menu.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-edit-file.png\'),\n            ""Edit Modes"")\n        self.plot_modes_action = menu.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-scatter-plot.png\'),\n            ""Plot Modes"")\n        self.save_modes_action = menu.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-save-Maxwell.png\'),\n            ""Save Modes"")\n        self.tbutmodes.setDefaultAction(self.get_modes_action)\n        self.tbutmodes.setMenu(menu)\n        tb.addWidget(self.tbutmodes)\n\n        #SpinBox ""n-stretch modes""\n        self.spinbox = QSpinBox()\n        self.spinbox.setRange(\n            0, self.parameters[""nmodes""].value)  # min and max number of modes\n        self.spinbox.setSuffix("" stretch"")\n        self.spinbox.setToolTip(""Number of stretching modes"")\n        self.spinbox.setValue(self.parameters[""nmodes""].value)  #initial value\n        tb.addWidget(self.spinbox)\n\n        self.thToolsLayout.insertWidget(0, tb)\n\n        connection_id = self.get_modes_action.triggered.connect(\n            self.get_modes_reptate)\n        connection_id = self.edit_modes_action.triggered.connect(\n            self.edit_modes_window)\n        connection_id = self.plot_modes_action.triggered.connect(\n            self.plot_modes_graph)\n        connection_id = self.save_modes_action.triggered.connect(\n            self.save_modes)\n        connection_id = self.spinbox.valueChanged.connect(\n            self.handle_spinboxValueChanged)\n\n    def handle_spinboxValueChanged(self, value):\n        nmodes = self.parameters[""nmodes""].value\n        self.set_param_value(""nstretch"", min(nmodes, value))\n        if self.autocalculate:\n            self.parent_dataset.handle_actionCalculate_Theory()\n\n    def select_shear_flow(self):\n        self.flow_mode = FlowMode.shear\n        self.tbutflow.setDefaultAction(self.shear_flow_action)\n\n    def select_extensional_flow(self):\n        self.flow_mode = FlowMode.uext\n        self.tbutflow.setDefaultAction(self.extensional_flow_action)\n\n    def get_modes_reptate(self):\n        self.Qcopy_modes()\n\n    def edit_modes_window(self):\n        times, G, success = self.get_modes()\n        if not success:\n            self.logger.warning(""Could not get modes successfully"")\n            return\n        d = EditModesDialog(self, times, G, self.MAX_MODES)\n        if d.exec_():\n            nmodes = d.table.rowCount()\n            self.set_param_value(""nmodes"", nmodes)\n            self.set_param_value(""nstretch"", nmodes)\n            success = True\n            for i in range(nmodes):\n                msg, success1 = self.set_param_value(""tauD%02d"" % i,\n                                                     d.table.item(i, 0).text())\n                msg, success2 = self.set_param_value(""G%02d"" % i,\n                                                     d.table.item(i, 1).text())\n                success *= success1 * success2\n            if not success:\n                QMessageBox.warning(\n                    self, \'Error\',\n                    \'Some parameter(s) could not be updated.\\nPlease try again.\'\n                )\n            else:\n                self.handle_actionCalculate_Theory()\n\n    def plot_modes_graph(self):\n        pass\n'"
RepTate/theories/TheoryGoPolyStrand.py,38,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryGoPolyStrand\n\nModule for the GO-polyStrand model of flow-induced crystallisation in polymers.\n\n""""""\nimport numpy as np\nfrom scipy.integrate import odeint\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom RepTate.core.DataTable import DataTable\nfrom PyQt5.QtWidgets import QToolBar, QToolButton, QMenu, QMessageBox, QFileDialog\nfrom PyQt5.QtCore import QSize\nfrom PyQt5.QtGui import QIcon\nfrom PyQt5.QtCore import Qt\nfrom RepTate.gui.Theory_rc import *\nfrom math import sqrt\nimport time\nimport RepTate\n\nimport RepTate.theories.rp_blend_ctypes_helper as rpch\nimport RepTate.theories.goLandscape_ctypes_helper as goL\nfrom RepTate.core.Theory import EndComputationRequested\nfrom collections import OrderedDict\n\nimport RepTate.theories.GOpolySTRAND_initialGuess as GOpolySTRAND_initialGuess\nimport RepTate.theories.SchneiderRate as SchneiderRate\nimport RepTate.theories.timeArraySplit as timeArraySplit\nfrom RepTate.theories.theory_helpers import FlowMode, EditModesVolFractionsDialog, FeneMode, GcorrMode, NoquMode, SingleSpeciesMode, Dilution, GetMwdRepTate, EditMWDDialog\n\nclass TheoryGoPolyStrand(CmdBase):\n    """"""GO-polyStrand model for flow-induced crystallisation in polydisperse melts of entangled linear polymers\n\n    * **Rheological model: The Rolie-Double-Poly model**\n    Evolution of chain structure under flow is computed by the Rolie-Double-Poly model. Implementation and parameters are the same as in the NVLE application.\n        .. math::\n            \\\\boldsymbol \\\\sigma = G_N^0 \\\\sum_i g(Z_{\\\\text{eff},i}) \\\\text{fene}(\\\\lambda_i) \\\\phi_i \\\\boldsymbol A_i\n\n        where\n            .. math::\n                \\\\boldsymbol A_i &= \\\\sum_j \\\\phi_j \\\\boldsymbol A_{ij}\\\\\\\\\n                \\\\lambda_i &= \\\\left( \\\\dfrac{\\\\text{Tr}  \\\\boldsymbol A_i}{3}  \\\\right)^{1/2}\\\\\\\\\n                \\\\stackrel{\\\\nabla}{\\\\boldsymbol  A_{ij}} &=\n                -\\\\dfrac{1}{\\\\tau_{\\\\mathrm d,i}} (\\\\boldsymbol A_{ij} - \\\\boldsymbol I)\n                -\\\\dfrac{2}{\\\\tau_{\\\\mathrm s,i}} \\\\dfrac{\\\\lambda_i - 1}{\\\\lambda_i} \\\\boldsymbol A_{ij}\n                -\\\\left( \\\\dfrac{\\\\beta_\\\\text{th}}{\\\\tau_{\\\\mathrm d,j}} \n                + \\\\beta_\\\\text{CCR}\\\\dfrac{2}{\\\\tau_{\\\\mathrm s,j}} \\\\dfrac{\\\\lambda_j - 1}{\\\\lambda_j}\\\\lambda_i^{2\\\\delta} \\\\right)\n                (\\\\boldsymbol A_{ij} - \\\\boldsymbol I)\\\\\\\\\n                \\\\text{fene}(\\\\lambda) &= \\\\dfrac{1-1/\\\\lambda_\\\\text{max}^2}{1-\\\\lambda^2/\\\\lambda_\\\\text{max}^2}\n        \n        with :math:`\\\\beta_\\\\text{th}` the thermal constrain release parameter, set to 1. If the ""modulus correction"" button\n        is pressed, :math:`g(z) = 1- \\\\dfrac{c_1}{z^{1/2}} + \\\\dfrac{c_2}{z} + \\\\dfrac{c_3}{z^{3/2}}` is the Likhtman-McLeish\n        CLF correction function to the modulus (:math:`c_1=1.69`, :math:`c_2=2`, :math:`c_3=-1.24`), :math:`g(z) = 1` otherwise;\n        :math:`Z_{\\\\text{eff},i}=Z_i\\\\phi_{\\\\text{dil},i}` is the\n        effective entanglement number of the molecular weight component :math:`i`, and :math:`\\\\phi_{\\\\text{dil},i}` the\n        dilution factor (:math:`\\\\phi_{\\\\text{dil},i}\\\\leq \\\\phi_i`).\n    * **Nucleation model: The GO-polyStrand model**\n    This model takes the stress output from the Rolie-Double-Poly model for each mode, computes the flow-induced nucleation rate, using the Kuhn segment nematic order as the order parameter.\n\n       -Neglect quiescent nucleation button: this subtracts the quiescent nucleation rate and assumes all quiescent nucleation occurs from hetrogeneous nuclei.\n\n       -Average to single species button: this preaverages the chain configuration over all species in the melt and computes the nucleation rate with a single species based on this average.\n       \n    * **Crystal evolution model: The Schneider rate equations**\n    From the computed nucleation rate and the crystal growth rate, the model computes the evolution of total crystallinity using the Schneider rate equations [W. Schneider, A. Koppl, and J. Berger, Int. Polym. Proc.II 3, 151 (1988)]. This calculatiom uses the Avrami expression to account approximately for impingement. \n\n    * **Parameters**\n        Rheological\n       - ``GN0`` :math:`\\\\equiv G_N^0`: Plateau modulus\n       - ``beta`` :math:`\\\\equiv\\\\beta_\\\\text{CCR}`: Rolie-Poly CCR parameter\n       - ``delta`` :math:`\\\\equiv\\\\delta`: Rolie-Poly CCR exponent\n       - ``phi_i`` :math:`\\\\equiv\\\\phi_i`: Volume fraction of species :math:`i`\n       - ``tauD_i`` :math:`\\\\equiv\\\\tau_{\\\\mathrm d,i}`: Reptation time of species :math:`i` (including CLF)\n       - ``tauR_i`` :math:`\\\\equiv\\\\tau_{\\\\mathrm s,i}`: Stretch relaxation time of species :math:`i`\n       - ``lmax`` :math:`\\\\equiv\\\\lambda_\\\\text{max}`: Maximum stretch ratio (active only when the ""fene button"" is pressed)\n       - ``Ne`` :math:`\\\\equiv N_e`: Number of Kuhn steps between entanglements\n        Quiescient Crystallisation\n       - ``epsilonB`` :math:`\\\\equiv \\epsilon_B`: Bulk free energy gain of crystallisation per Kuhn step [dimensionless]\n       - ``muS`` :math:`\\\\equiv \\mu_S`: Nucleus surface area cost [dimensionless]\n       - ``tau0`` :math:`\\\\equiv \\\\tau_0`: Kuhn step nucleation timescale [sec]\n       - ``rhoK`` :math:`\\\\equiv \\\\rho_K`: Kuhn step density [:math:`\\mu\\mathrm{m}^{-3}`]\n       - ``G_C`` :math:`\\\\equiv G_C`: Crystal growth rate [:math:`\\\\mu\\mathrm{m/sec}`]\n       - ``N_0`` :math:`\\\\equiv N_0`: Heterogeneous nucleation density [:math:`\\mu\\mathrm{m}^{-3}`]\n\n\n        Flow-induced crystallisation       \n       - ``Gamma`` :math:`\\\\equiv \\Gamma`: Prefactor connecting the Kuhn segment nematic order and the monomer entropy loss [dimensionless].\n\n    """"""\n    thname = ""GO-polySTRAND""\n    description = ""GO-polySTRAND model for flow-induced nucleation""\n    citations = [""D.J. Read et al., Phys. Rev. Lett. 124, 147802 (2020)""]\n    doi = [""http://dx.doi.org/10.1103/PhysRevLett.124.147802""]\n\n    def __new__(cls, name="""", parent_dataset=None, ax=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return GUITheoryGoPolyStrand(\n            name, parent_dataset,\n            ax) if (CmdBase.mode == CmdMode.GUI) else CLTheoryGoPolyStrand(\n                name, parent_dataset, ax)\n\n\nclass BaseTheoryGoPolyStrand:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = \'http://reptate.readthedocs.io/manual/Applications/Crystal/Theory/theory.html\'\n    single_file = False\n    thname = TheoryGoPolyStrand.thname\n    citations = TheoryGoPolyStrand.citations\n    doi = TheoryGoPolyStrand.doi\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        self.function = self.RolieDoublePoly_Crystal\n        self.has_modes = True\n        self.autocalculate = False\n        self.parameters[\'Gamma\'] = Parameter(\n            name=\'Gamma\',\n            value=1,\n            description=\'Order parameter prefactor\',\n            type=ParameterType.real,\n            opt_type=OptType.opt)\n        self.parameters[\'Ne\'] = Parameter(\n            name=\'Ne\',\n            value=25,\n            description=\'Monomers between entanglements\',\n            type=ParameterType.real,\n            opt_type=OptType.opt)\n        self.parameters[\'epsilonB\'] = Parameter(\n            name=\'epsilonB\',\n            value=-0.117,\n            description=\'Bulk free energy per monomer\',\n            type=ParameterType.real,\n            opt_type=OptType.opt)\n        self.parameters[\'muS\'] = Parameter(\n            name=\'muS\',\n            value=0.85,\n            description=\'Surface area energy\',\n            type=ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=0.0,\n            max_value=1.125)\n        self.parameters[\'tau0\'] = Parameter(\n            name=\'tau0\',\n            value=0.38E-9,\n            description=\'Monomer attachment time\',\n            type=ParameterType.real,\n            opt_type=OptType.opt)\n        self.parameters[\'rhoK\'] = Parameter(\n            name=\'rhoK\',\n            value=2.7E9,\n            description=\'Kuhn step density\',\n            type=ParameterType.real,\n            opt_type=OptType.opt)\n        self.parameters[\'G_C\'] = Parameter(\n            name=\'G_C\',\n            value=0.063,\n            description=\'Crystal growth rate\',\n            type=ParameterType.real,\n            opt_type=OptType.opt)\n        self.parameters[\'N_0\'] = Parameter(\n            name=\'N_0\',\n            value=0.0,\n            description=\'Hetrogeneous nucleation density\',\n            type=ParameterType.real,\n            opt_type=OptType.opt)        \n        self.parameters[""beta""] = Parameter(\n            name=""beta"",\n            value=1,\n            description=""CCR coefficient"",\n            type=ParameterType.real,\n            opt_type=OptType.nopt)\n        self.parameters[""delta""] = Parameter(\n            name=""delta"",\n            value=-0.5,\n            description=""CCR exponent"",\n            type=ParameterType.real,\n            opt_type=OptType.nopt)\n        self.parameters[""lmax""] = Parameter(\n            name=""lmax"",\n            value=10.0,\n            description=""Maximum extensibility"",\n            type=ParameterType.real,\n            opt_type=OptType.nopt,\n            display_flag=False,\n            min_value=1.01)\n        self.parameters[""nmodes""] = Parameter(\n            name=""nmodes"",\n            value=2,\n            description=""Number of modes"",\n            type=ParameterType.integer,\n            opt_type=OptType.const,\n            display_flag=False)\n        self.parameters[""GN0""] = Parameter(\n            name=""GN0"",\n            value=1000.0,\n            description=""Plateau modulus"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n            min_value=0)\n        self.parameters[""Me""] = Parameter(\n            name=""Me"",\n            value=1e4,\n            description=""Entanglement molecular mass"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n            min_value=0,\n            display_flag=False)\n        self.parameters[""tau_e""] = Parameter(\n            name=""tau_e"",\n            value=0.01,\n            description=""Entanglement relaxation time"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n            min_value=0,\n            display_flag=False)\n        nmode = self.parameters[""nmodes""].value\n        for i in range(nmode):\n            self.parameters[""phi%02d"" % i] = Parameter(\n                name=""phi%02d"" % i,\n                value=1. / nmode,\n                description=""Volume fraction of mode %02d"" % i,\n                type=ParameterType.real,\n                opt_type=OptType.nopt,\n                display_flag=False,\n                min_value=0)\n            self.parameters[""tauD%02d"" % i] = Parameter(\n                name=""tauD%02d"" % i,\n                value=100.0,\n                description=""Terminal time of mode %02d"" % i,\n                type=ParameterType.real,\n                opt_type=OptType.nopt,\n                display_flag=False,\n                min_value=0)\n            self.parameters[""tauR%02d"" % i] = Parameter(\n                name=""tauR%02d"" % i,\n                value=1,\n                description=""Rouse time of mode %02d"" % i,\n                type=ParameterType.real,\n                opt_type=OptType.opt,\n                min_value=0)\n\n        self.view_LVEenvelope = False\n        auxseries = self.ax.plot([], [], label=\'\')\n        self.LVEenvelopeseries = auxseries[0]\n        self.LVEenvelopeseries.set_marker(\'\')\n        self.LVEenvelopeseries.set_linestyle(\'--\')\n        self.LVEenvelopeseries.set_visible(self.view_LVEenvelope)\n        self.LVEenvelopeseries.set_color(\'green\')\n        self.LVEenvelopeseries.set_linewidth(5)\n        self.LVEenvelopeseries.set_label(\'\')\n\n        self.MAX_MODES = 40\n        self.with_fene = FeneMode.none\n        self.with_gcorr = GcorrMode.none\n        self.with_noqu = NoquMode.none\n        self.with_single = SingleSpeciesMode.none\n        self.Zeff = []\n        self.MWD_m = [100, 1000]\n        self.MWD_phi = [0.5, 0.5]\n        self.init_flow_mode()\n\n    def set_extra_data(self, extra_data):\n        """"""Set extra data when loading project""""""\n        self.MWD_m = extra_data[\'MWD_m\']\n        self.MWD_phi = extra_data[\'MWD_phi\']\n        self.Zeff = extra_data[\'Zeff\']\n\n        # FENE button\n        self.handle_with_fene_button(extra_data[\'with_fene\'])\n\n        # noqu button\n        self.handle_with_noqu_button(extra_data[\'with_noqu\'])\n\n        # single species button\n        self.handle_with_single_button(extra_data[\'with_single\'])\n\n        \n        # G button\n        if extra_data[\'with_gcorr\']:\n            self.with_gcorr == GcorrMode.with_gcorr\n            self.with_gcorr_button.setChecked(True)\n\n    def get_extra_data(self):\n        """"""Set extra_data when saving project""""""\n        self.extra_data[\'MWD_m\'] = self.MWD_m\n        self.extra_data[\'MWD_phi\'] = self.MWD_phi\n        self.extra_data[\'Zeff\'] = self.Zeff\n        self.extra_data[\'with_fene\'] = self.with_fene == FeneMode.with_fene\n        self.extra_data[\'with_gcorr\'] = self.with_gcorr == GcorrMode.with_gcorr\n        self.extra_data[\'with_noqu\'] = self.with_noqu == NoquMode.with_noqu\n        self.extra_data[\'with_single\'] = self.with_single == SingleSpeciesMode.with_single\n\n    def init_flow_mode(self):\n        """"""Find if data files are shear or extension""""""\n        try:\n            f = self.theory_files()[0]\n            if f.file_type.extension == \'shear\' or f.file_type.extension == \'shearxs\':\n                self.flow_mode = FlowMode.shear\n            else:\n                self.flow_mode = FlowMode.uext\n        except Exception as e:\n            print(""in RP init:"", e)\n            self.flow_mode = FlowMode.shear  #default mode: shear\n\n    def destructor(self):\n        """"""Called when the theory tab is closed""""""\n        self.show_theory_extras(False)\n        self.ax.lines.remove(self.LVEenvelopeseries)\n\n    def show_theory_extras(self, show=False):\n        """"""Called when the active theory is changed""""""\n        if CmdBase.mode == CmdMode.GUI:\n            self.Qhide_theory_extras(show)\n        # self.extra_graphic_visible(show)\n\n    def extra_graphic_visible(self, state):\n        """"""Show extra graphics""""""\n        self.view_LVEenvelope = state\n        self.LVEenvelopeseries.set_visible(state)\n        self.parent_dataset.parent_application.update_plot()\n\n    def get_modes(self):\n        """"""Get the values of Maxwell Modes from this theory""""""\n        nmodes = self.parameters[""nmodes""].value\n        tau = np.zeros(nmodes)\n        G = np.zeros(nmodes)\n        GN0 = self.parameters[""GN0""].value\n        for i in range(nmodes):\n            tau[i] = self.parameters[""tauD%02d"" % i].value\n            G[i] = GN0 * self.parameters[""phi%02d"" % i].value\n        return tau, G, True\n\n    def set_modes_from_mwd(self, m, phi):\n        """"""Set Modes from MWD""""""\n        Me = self.parameters[""Me""].value\n        taue = self.parameters[""tau_e""].value\n        res = Dilution(m, phi, taue, Me, self).res\n        if res[0] == False:\n            self.Qprint(""Could not set modes from MDW"")\n            return\n        _, phi, taus, taud = res\n        nmodes = len(phi)\n        self.set_param_value(""nmodes"", nmodes)\n        for i in range(nmodes):\n            self.set_param_value(""phi%02d"" % i, phi[i])\n            self.set_param_value(""tauR%02d"" % i, taus[i])\n            self.set_param_value(""tauD%02d"" % i, taud[i])\n        self.Qprint(""Got %d modes from MWD"" % nmodes)\n        self.update_parameter_table()\n        self.Qprint(\n            \'<font color=green><b>Press ""Calculate"" to update theory</b></font>\'\n        )\n\n    def set_modes(self, tau, G):\n        """"""Set the values of Maxwell Modes from another theory""""""\n        nmodes = len(tau)\n        self.set_param_value(""nmodes"", nmodes)\n        sum_G = G.sum()\n\n        for i in range(nmodes):\n            self.set_param_value(""tauD%02d"" % i, tau[i])\n            self.set_param_value(""phi%02d"" % i, G[i] / sum_G)\n        self.update_parameter_table()\n        return True\n\n    def fZ(self, z):\n        """"""CLF correction function Likthman-McLeish (2002)""""""\n        return 1 - 2 * 1.69 / sqrt(z) + 4.17 / z - 1.55 / (z * sqrt(z))\n\n    def gZ(self, z):\n        """"""CLF correction function for modulus Likthman-McLeish (2002)""""""\n        return 1 - 1.69 / sqrt(z) + 2.0 / z - 1.24 / (z * sqrt(z))\n\n    def sigmadot_shear(self, sigma, t, p):\n        """"""Rolie-Poly differential equation under *shear* flow\n        with stretching and finite extensibility if selected""""""\n        if self.stop_theory_flag:\n            raise EndComputationRequested\n        tmax = p[-1]\n        if t >= tmax * self.count:\n            self.Qprint(""--"", end=\'\')\n            self.count += 0.2\n\n        # Calling C function:\n        if self.with_fene == FeneMode.with_fene:\n            wfene = 1\n        else:\n            wfene = 0\n        return rpch.compute_derivs_shear(sigma, p, t, wfene)\n\n    def sigmadot_uext(self, sigma, t, p):\n        """"""Rolie-Poly differential equation under *uniaxial elongational* flow\n        with stretching and finite extensibility if selecter""""""\n        if self.stop_theory_flag:\n            raise EndComputationRequested\n        tmax = p[-1]\n        if t >= tmax * self.count:\n            self.Qprint(""--"", end=\'\')\n            # self.Qprint(""%4d%% done"" % (self.count*100))\n            self.count += 0.2\n\n        # Calling C function:\n        if self.with_fene == FeneMode.with_fene:\n            wfene = 1\n        else:\n            wfene = 0\n        return rpch.compute_derivs_uext(sigma, p, t, wfene)\n\n    def calculate_fene(self, l_square, lmax):\n        """"""calculate finite extensibility function value""""""\n        ilm2 = 1.0 / (lmax * lmax)  # 1/lambda_max^2\n        l2_lm2 = l_square * ilm2  # (lambda/lambda_max)^2\n        return (3.0 - l2_lm2) / (1.0 - l2_lm2) * (1.0 - ilm2) / (3.0 - ilm2)\n\n    def computeFel( self, Fxx, Fyy, Fxy):\n        """"""Converts RDP configurations into a free energy change (via nematic order parameter""""""\n        Gamma = self.parameters[\'Gamma\'].value\n        Ne = self.parameters[\'Ne\'].value\n\n        tmp= Fxx/2 + Fyy/2 + np.sqrt( ((Fxx-Fyy)/2.0)**2 + Fxy**2 ) - 1\n\t\t    \n        return Gamma* tmp/Ne\n\n    def computeQuiescentBarrier( self ):\n        """"""Calculates the GO model quiescent barrier and nucleation rate""""""\n        epsilonB = self.parameters[\'epsilonB\'].value\n        muS = self.parameters[\'muS\'].value\n        rhoK = self.parameters[\'rhoK\'].value\n        tau0 = self.parameters[\'tau0\'].value\n        dN=1\n        curvature_skip=5\n        alpha=0.8\n\n        #Calculate quiescent barrier\n        landscape = []\n        landscape.append( 0.0) #0\n        landscape.append( 0.0) #1\n        landscape.append( 0.0) #2\n        NT=2\n        while( landscape[NT]>landscape[NT-1]-0.005):\n            NT += 1\n            landscape.append(goL.GO_Landscape(NT, epsilonB,muS) )\n            if( NT> 10000):\n                self.Qprint(\n                    \'<font color=green><b>Quiescent barrier does not have \\\n                    a maximum below 10,000 monomers - change epsilonB \\\n                    and/or muS</b></font>\')\n                break\n\n        #Compute barrier peak and curvature\n        quiescent_height = max(landscape)\n        nStar = landscape.index( quiescent_height)\n\n        d2Fqstar=(landscape[nStar-curvature_skip]-2*landscape[nStar]+landscape[nStar+curvature_skip]) \\\n          /(curvature_skip**2*dN**2)\n\n        #Calculate initial slope\n        sumDFq=0.0\n        for i in range(1, nStar+1):\n            sumDFq += np.exp(-landscape[i])\n\n        #Compute the nucleation rate\n        xqtime = (sumDFq*np.exp(quiescent_height)/(2*nStar**0.66666666)) \\\n          *(1+np.sqrt(-2*np.pi/d2Fqstar) \\\n            *np.exp(-(alpha**2)/(2*d2Fqstar*nStar**2)+alpha/nStar))\n        NqRate = rhoK/tau0/xqtime\n\n        self.Qprint(\'Quiescent barrier height=%.3g k<sub>B</sub>T\' % quiescent_height) # HTML syntax\n\n        self.Qprint(\'Quiescent nucleation rate=%.3g &mu;m<sup>-3</sup>s<sup>-1</sup><br>\' % NqRate) # HTML syntax\n\n        return landscape, NqRate, quiescent_height\n\n\n    def RolieDoublePoly_Crystal(self, f=None):\n        """"""Theory RDP for Crystal module""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        fel = np.zeros((tt.num_rows, self.parameters[""nmodes""].value))\n        felAve = np.zeros((tt.num_rows,1))\n        Gamma = self.parameters[\'Gamma\'].value\n        epsilonB = self.parameters[\'epsilonB\'].value\n        muS = self.parameters[\'muS\'].value\n        G_C = self.parameters[\'G_C\'].value\n        N_0 = self.parameters[\'N_0\'].value\n        tt.data[:, 0] = ft.data[:, 0] #time\n                \n        # ODE solver parameters\n        abserr = 1.0e-8\n        relerr = 1.0e-8\n        t = ft.data[:, 0]\n        t = np.concatenate([[0], t])\n        # sigma0 = [1.0, 1.0, 0.0]  # sxx, syy, sxy\n        beta = self.parameters[""beta""].value\n        delta = self.parameters[""delta""].value\n        lmax = self.parameters[""lmax""].value\n        flow_rate = float(f.file_parameters[""gdot""])\n        tstop = float(f.file_parameters[""tstop""])\n        nmodes = self.parameters[""nmodes""].value\n\n        #flow geometry\n        if self.flow_mode == FlowMode.shear:\n            sigma0 = ([1.0, 1.0, 0.0] *\n                      (nmodes * nmodes))  # sxx_ij, syy_ij, sxy_ij\n            pde_stretch = self.sigmadot_shear\n        elif self.flow_mode == FlowMode.uext:\n            sigma0 = ([1.0, 1.0] * (nmodes * nmodes))  # sxx_ij, syy_ij\n            pde_stretch = self.sigmadot_uext\n        else:\n            return\n\n        taud_arr = []\n        taus_arr = []\n        phi_arr = []\n        for i in range(nmodes):\n            taud_arr.append(self.parameters[""tauD%02d"" % i].value)\n            taus_arr.append(self.parameters[""tauR%02d"" % i].value)\n            phi_arr.append(self.parameters[""phi%02d"" % i].value)\n        tmax = t[-1]\n        p = [\n            nmodes, lmax, phi_arr, taud_arr, taus_arr, beta, delta, flow_rate,\n            tmax\n        ]\n        self.count = 0.2\n        self.Qprint(\'Rate %.3g<br>  0%% \' % flow_rate, end=\'\')\n\n        if t[-1] < tstop:\n            try:\n                sig = odeint(\n                    pde_stretch, sigma0, t, args=(p, ), atol=abserr, rtol=relerr)\n            except EndComputationRequested:\n                return\n        else: #tstop must happen during computation\n            t1,t2=timeArraySplit.timeArraySplit(t,tstop)\n            #solve for t < tmax\n            tmax = t1[-1]\n            p = [ nmodes, lmax, phi_arr, taud_arr, taus_arr, beta, delta,\n                  flow_rate,  tmax]\n            sig1 = odeint( pde_stretch, sigma0, t1, args=(p, ),\n                               atol=abserr, rtol=relerr)\n            #solve for t > tmax\n            tmax = t2[-1]\n            p = [ nmodes, lmax, phi_arr, taud_arr, taus_arr, beta, delta,\n                  0.0,  tmax]\n            sig2 = odeint( pde_stretch, sig1[-1], t2, args=(p, ),\n                               atol=abserr, rtol=relerr)\n            #Merge two solutions\n            sig=np.concatenate((sig1[:-1],sig2[1:]),0)\n            \n        \n        self.Qprint(\' 100%\')\n        # sig.shape is (len(t), 3*n^2) in shear\n        if self.flow_mode == FlowMode.shear:\n            c = 3\n            sig = sig[1:, :]\n            nt = len(sig)\n            lsq = np.zeros((nt, nmodes))\n            if self.with_fene == FeneMode.with_fene:\n                #calculate lambda^2\n                for i in range(nmodes):\n                    if self.stop_theory_flag:\n                        break\n                    I = c * nmodes * i\n                    trace_arr = np.zeros(nt)\n                    for j in range(nmodes):\n                        # trace_arr += phi_arr[j] * (sxx_t[:, I + j] + 2 * syy_t[:, I + j])\n                        trace_arr += phi_arr[j] * (\n                            sig[:, I + c * j] + 2 * sig[:, I + c * j + 1])\n                    lsq[:, i] = trace_arr / 3.0  # len(t) rows and n cols\n\n            for i in range(nmodes):\n                if self.stop_theory_flag:\n                    break\n                I = c * nmodes * i\n                sig_i = np.zeros(nt)\n                for j in range(nmodes):\n                    sig_i += phi_arr[j] * sig[:, I + c * j + 2]\n\n                if self.with_fene == FeneMode.with_fene:\n                    sig_i *= self.calculate_fene(lsq[:, i], lmax)\n                if self.with_gcorr == GcorrMode.with_gcorr:\n                    sig_i *= self.gZ(self.Zeff[i])\n                tt.data[:, 1] += phi_arr[i] * sig_i\n            tt.data[:, 1] *= self.parameters[""GN0""].value\n\n        if self.flow_mode == FlowMode.uext:\n            # every 2 component we find xx, yy, starting at 0, or 1; and remove t=0\n            # sxx_t = sig[1:, 0::2] # len(t) - 1 rows and n^2 cols\n            # syy_t = sig[1:, 1::2] # len(t) - 1 rows and n^2 cols\n\n            # nt = len(sxx_t)\n            c = 2\n            sig = sig[1:, :]\n            nt = len(sig)\n            lsq = np.zeros((nt, nmodes))\n            if self.with_fene == FeneMode.with_fene:\n                for i in range(nmodes):\n                    if self.stop_theory_flag:\n                        break\n                    I = c * nmodes * i\n                    trace_arr = np.zeros(nt)\n                    for j in range(nmodes):\n                        trace_arr += phi_arr[j] * (\n                            sig[:, I + c * j] + 2 * sig[:, I + c * j + 1])\n                    lsq[:, i] = trace_arr / 3.0  # len(t) rows and n cols\n\n            for i in range(nmodes):\n                if self.stop_theory_flag:\n                    break\n                I = c * nmodes * i\n                sig_i = np.zeros(nt)\n                for j in range(nmodes):\n                    sig_i += phi_arr[j] * (\n                        sig[:, I + c * j] - sig[:, I + c * j + 1])\n\n                if self.with_fene == FeneMode.with_fene:\n                    sig_i *= self.calculate_fene(lsq[:, i], lmax)\n                if self.with_gcorr == GcorrMode.with_gcorr:\n                    sig_i *= self.gZ(self.Zeff[i])\n                tt.data[:, 1] += phi_arr[i] * sig_i\n\n            tt.data[:, 1] *= self.parameters[""GN0""].value\n\n        #Extract the configuration of each mode\n        for time in range(nt):\n            total_sss_xx=0.0\n            total_sss_yy=0.0\n            total_sss_xy=0.0\n            for i in range(nmodes):\n                I = c * nmodes * i\n                sss_xx = 0.0\n                sss_yy = 0.0\n                sss_xy = 0.0\n                for j in range(nmodes):\n                    sss_xx += phi_arr[j] * sig[time, I + c * j ]\n                    sss_yy += phi_arr[j] * sig[time, I + c * j + 1]\n                    sss_xy += phi_arr[j] * sig[time, I + c * j + 2]\n                fel[time,i] = self.computeFel(sss_xx , sss_yy , sss_xy)\n                #Compute the total stress for the average stress model\n                total_sss_xx += phi_arr[i] * sss_xx\n                total_sss_yy += phi_arr[i] * sss_yy\n                total_sss_xy += phi_arr[i] * sss_xy\n            felAve[time,0] = self.computeFel(total_sss_xx , total_sss_yy , total_sss_xy)\n                \n                \n        #Compute the quiescent free energy barrier\n        q_barrier, NdotQ, DfStarQ = self.computeQuiescentBarrier()\n        if self.with_noqu == NoquMode.with_noqu:\n            NdotInitial = 0.0\n        else:\n            NdotInitial = NdotQ\n\n        #Compute the flow-induced barrier\n        q_barrier=np.asarray(q_barrier)\n        if self.with_single == SingleSpeciesMode.with_single:\n            phi = np.asarray([1.0])\n        else:   \n            phi = np.asarray(phi_arr)\n        nspecies=phi.size\n\n            \n        sumdf=1e5\n        for i in range(tt.num_rows):\n            #See how much change there is from last time\n            if(i>0):\n                \n                sumdf=0.0\n                for j in range(nspecies):\n                    sumdf += (df[j]-fel[i,j])**2\n                \n            if(sumdf>1e-12): #Otherwise assume no change from last timestep\n                if self.with_single == SingleSpeciesMode.with_single:\n                    df=felAve[i,:]\n                else:\n                    df= fel[i,:]\n\n                params={\'landscape\':q_barrier, \'phi\':phi, \'df\':df, \\\n                            \'epsilonB\':epsilonB, \'muS\':muS}\n                DfStarFlow = GOpolySTRAND_initialGuess.findDfStar(params)\n                nucRate=NdotQ*np.exp( DfStarQ - DfStarFlow)\n\n            if self.with_noqu == NoquMode.with_noqu:\n                tt.data[i,2]=nucRate - NdotQ\n                if(tt.data[i,2]<0):\n                    if(tt.data[i,2]/(NdotQ+1e-20)<-0.01):\n                        self.Qprint(""<font color=red><b>Warning: nucleation rate < 0 !!!</b></font>"")\n                    tt.data[i,2]=0.0\n            else:\n                tt.data[i,2]=nucRate\n            \n\n            \n        #Now use a spline to interpolate the N_dot data and solve for crystal\n        t = tt.data[:,0]\n        Ndot = tt.data[:,2]\n        Cry_Evol = SchneiderRate.intSchneider(t, Ndot,NdotInitial,N_0,G_C)\n        tt.data[:, 3] = 1.0-np.exp(-Cry_Evol[:,0])#Cry_Evol[:,0] #Phi_X\n        tt.data[:, 4] = Cry_Evol[:,3]/8/np.pi #Number of nuclei\n\n\n        \n    def set_param_value(self, name, value):\n        """"""Set the value of theory parameters""""""\n        if (name == ""nmodes""):\n            oldn = self.parameters[""nmodes""].value\n            # self.spinbox.setMaximum(int(value))\n        message, success = super(BaseTheoryGoPolyStrand,\n                                 self).set_param_value(name, value)\n        if not success:\n            return message, success\n        if (name == ""nmodes""):\n            for i in range(self.parameters[""nmodes""].value):\n                self.parameters[""phi%02d"" % i] = Parameter(\n                    name=""phi%02d"" % i,\n                    value=0.0,\n                    description=""Volume fraction of mode %02d"" % i,\n                    type=ParameterType.real,\n                    opt_type=OptType.nopt,\n                    display_flag=False,\n                    min_value=0)\n                self.parameters[""tauD%02d"" % i] = Parameter(\n                    name=""tauD%02d"" % i,\n                    value=100.0,\n                    description=""Terminal time of mode %02d"" % i,\n                    type=ParameterType.real,\n                    opt_type=OptType.nopt,\n                    display_flag=False,\n                    min_value=0)\n                self.parameters[""tauR%02d"" % i] = Parameter(\n                    name=""tauR%02d"" % i,\n                    value=1,\n                    description=""Rouse time of mode %02d"" % i,\n                    type=ParameterType.real,\n                    opt_type=OptType.opt,\n                    display_flag=True,\n                    min_value=0)\n            if (oldn > self.parameters[""nmodes""].value):\n                for i in range(self.parameters[""nmodes""].value, oldn):\n                    del self.parameters[""phi%02d"" % i]\n                    del self.parameters[""tauD%02d"" % i]\n                    del self.parameters[""tauR%02d"" % i]\n        return \'\', True\n\n  \n\n    \n    def do_fit(self, line):\n        """"""Minimisation procedure disabled in this theory""""""\n        self.Qprint(\n            ""<font color=red><b>Minimisation procedure disabled in this theory</b></font>""\n        )\n\n\nclass CLTheoryGoPolyStrand(BaseTheoryGoPolyStrand, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n\nclass GUITheoryGoPolyStrand(BaseTheoryGoPolyStrand, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n        # add widgets specific to the theory\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n\n        self.tbutflow = QToolButton()\n        self.tbutflow.setPopupMode(QToolButton.MenuButtonPopup)\n        menu = QMenu()\n        self.shear_flow_action = menu.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icon-shear.png\'), ""Shear Flow"")\n        self.extensional_flow_action = menu.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icon-uext.png\'),\n            ""Extensional Flow"")\n        if self.flow_mode == FlowMode.shear:\n            self.tbutflow.setDefaultAction(self.shear_flow_action)\n        else:\n            self.tbutflow.setDefaultAction(self.extensional_flow_action)\n        self.tbutflow.setMenu(menu)\n        tb.addWidget(self.tbutflow)\n\n        self.tbutmodes = QToolButton()\n        self.tbutmodes.setPopupMode(QToolButton.MenuButtonPopup)\n        menu = QMenu()\n        self.get_modes_action = menu.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-broadcasting.png\'),\n            ""Get Modes (MWD app)"")\n        self.get_modes_data_action = menu.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-broadcasting.png\'),\n            ""Get Modes (MWD data)"")\n        self.edit_modes_action = menu.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-edit-file.png\'),\n            ""Edit Modes"")\n        # self.plot_modes_action = menu.addAction(\n        #     QIcon(\':/Icon8/Images/new_icons/icons8-scatter-plot.png\'),\n        #     ""Plot Modes"")\n        self.save_modes_action = menu.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-save-Maxwell.png\'),\n            ""Save Modes"")\n        self.tbutmodes.setDefaultAction(self.get_modes_action)\n        self.tbutmodes.setMenu(menu)\n        tb.addWidget(self.tbutmodes)\n        # #Show LVE button\n        self.linearenvelope = tb.addAction(\n            QIcon(\':/Icon8/Images/new_icons/lve-icon.png\'),\n            \'Show Linear Envelope\')\n        self.linearenvelope.setCheckable(True)\n        self.linearenvelope.setChecked(False)\n        #Finite extensibility button\n        self.with_fene_button = tb.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-infinite.png\'),\n            \'Finite Extensibility\')\n        self.with_fene_button.setCheckable(True)\n        #Modulus correction button\n        self.with_gcorr_button = tb.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-circled-g-filled.png\'),\n            \'Modulus Correction\')\n        self.with_gcorr_button.setCheckable(True)\n        #Ignore quiescent button\n        self.with_noqu_button = tb.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-noquiescent.png\'),\n            \'Neglect quiescent nucleation\')\n        self.with_noqu_button.setCheckable(True)\n        #Single species button\n        self.with_single_button = tb.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-SingleSpecies.png\'),\n            \'Average to single species for nucleation\')\n        self.with_single_button.setCheckable(True)\n\n\n        #Save to flowsolve button\n        self.flowsolve_btn = tb.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-save-flowsolve.png\'),\n            \'Save Parameters To FlowSolve\')\n        self.flowsolve_btn.setCheckable(False)\n\n        self.thToolsLayout.insertWidget(0, tb)\n\n        connection_id = self.shear_flow_action.triggered.connect(\n            self.select_shear_flow)\n        connection_id = self.extensional_flow_action.triggered.connect(\n            self.select_extensional_flow)\n        connection_id = self.get_modes_action.triggered.connect(\n            self.get_modes_reptate)\n        connection_id = self.get_modes_data_action.triggered.connect(\n            self.edit_mwd_modes)\n        connection_id = self.edit_modes_action.triggered.connect(\n            self.edit_modes_window)\n        # connection_id = self.plot_modes_action.triggered.connect(\n        #     self.plot_modes_graph)\n        connection_id = self.linearenvelope.triggered.connect(\n            self.show_linear_envelope)\n        connection_id = self.save_modes_action.triggered.connect(\n            self.save_modes)\n        connection_id = self.with_fene_button.triggered.connect(\n            self.handle_with_fene_button)\n        connection_id = self.with_gcorr_button.triggered.connect(\n            self.handle_with_gcorr_button)\n        connection_id = self.with_noqu_button.triggered.connect(\n            self.handle_with_noqu_button)\n        connection_id = self.with_single_button.triggered.connect(\n            self.handle_with_single_button)\n\n#!3        connection_id = self.noqu_button.triggered.connect(\n#!3            self.handle_with_gcorr_button)\n        connection_id = self.flowsolve_btn.triggered.connect(\n            self.handle_flowsolve_btn)\n\n    def handle_flowsolve_btn(self):\n        """"""Save theory parameters in FlowSolve format""""""\n\n        #Get filename of RepTate project to open\n        fpath, _ = QFileDialog.getSaveFileName(self,\n                                               ""Save Parameters to FowSolve"",\n                                               os.path.join(RepTate.root_dir, ""data""), ""FlowSolve (*.fsrep)"")\n        if fpath == \'\':\n            return\n\n        with open(fpath, \'w\') as f:\n            header = \'#flowGen input\\n\'\n\n            verdata = RepTate._version.get_versions()\n            version = verdata[\'version\'].split(\'+\')[0]\n            date = verdata[\'date\'].split(\'T\')[0]\n            build = verdata[\'version\']\n\n            header += \'# Generated with RepTate %s %s (build %s)\\n\' % (version, date, build)\n            header += \'# At %s on %s\\n\' % (time.strftime(""%X""),\n                                           time.strftime(""%a %b %d, %Y""))\n            f.write(header)\n\n            f.write(\'\\n#param global\\n\')\n            f.write(\'constit polydisperse\\n\')\n            # f.write(\'# or multip (for pompom) or polydisperse (for polydisperse Rolie-Poly)\\n\')\n\n            f.write(\'\\n#param constitutive\\n\')\n\n            n = self.parameters[\'nmodes\'].value\n\n            td = np.zeros(n)\n            for i in range(n):\n                td[i] = self.parameters[""tauD%02d"" % i].value\n            # sort taud ascending order\n            args = np.argsort(td)\n\n            fraction = \'fraction\'\n            taud = \'taud\'\n            tauR = \'tauR\'\n            lmax = \'lambdaMax\'\n            for i, arg in enumerate(args):\n                fraction += \' %.6g\' % self.parameters[""phi%02d"" % arg].value\n                taud += \' %.6g\' % self.parameters[""tauD%02d"" % arg].value\n                tauR += \' %.6g\' % self.parameters[""tauR%02d"" % arg].value\n                lmax += \' %.6g\' % self.parameters[""lmax""].value\n            f.write(\'%s\\n%s\\n%s\\n\' % (taud, tauR, fraction))\n            if self.with_fene == FeneMode.with_fene:  # don\'t output lmax at all for infinite ex\n                f.write(\'%s\\n\' % lmax)\n            f.write(\'modulus %.6g\\n\' % self.parameters[""GN0""].value)\n            f.write(\'beta %.6gn\' % self.parameters[""beta""].value)\n            f.write(\'delta %.6g\\n\' % self.parameters[""delta""].value)\n\n            f.write(\'\\n#end\')\n\n        QMessageBox.information(self, \'Success\',\n                                \'Wrote FlowSolve parameters in \\""%s\\""\' % fpath)\n\n    def handle_with_gcorr_button(self, checked):\n        if checked:\n            if len(self.Zeff) > 0:\n                # if Zeff contains something\n                self.with_gcorr = GcorrMode.with_gcorr\n            else:\n                self.Qprint(\n                    \'<font color=orange><b>Modulus correction needs Z from MWD</b></font>\'\n                )\n                self.with_gcorr_button.setChecked(False)\n                return\n        else:\n            self.with_gcorr = GcorrMode.none\n        self.Qprint(\n            \'<font color=green><b>Press ""Calculate"" to update theory</b></font>\'\n        )\n\n    def handle_with_noqu_button(self, checked):\n        if checked:\n            \n            self.with_noqu = NoquMode.with_noqu\n            self.with_noqu_button.setChecked(True)\n        else:\n            self.with_noqu = NoquMode.none\n\n        self.Qprint(\n            \'<font color=green><b>Ignore quiescent: Press ""Calculate"" to update theory</b></font>\'\n        )\n\n        \n    def handle_with_single_button(self, checked):\n        if checked:\n            \n            self.with_single = SingleSpeciesMode.with_single\n            self.with_single_button.setChecked(True)\n        else:\n            self.with_single= SingleSpeciesMode.none\n\n        self.Qprint(\n            \'<font color=green><b>Single species: Press ""Calculate"" to update theory</b></font>\'\n        )\n\n    def handle_with_fene_button(self, checked):\n        if checked:\n            self.with_fene = FeneMode.with_fene\n            self.with_fene_button.setChecked(True)\n            self.with_fene_button.setIcon(\n                QIcon(\':/Icon8/Images/new_icons/icons8-facebook-f.png\'))\n            self.parameters[""lmax""].display_flag = True\n            self.parameters[""lmax""].opt_type = OptType.nopt\n        else:\n            self.with_fene = FeneMode.none\n            self.with_fene_button.setChecked(False)\n            self.with_fene_button.setIcon(\n                QIcon(\':/Icon8/Images/new_icons/icons8-infinite.png\'))\n            self.parameters[""lmax""].display_flag = False\n            self.parameters[""lmax""].opt_type = OptType.const\n        self.update_parameter_table()\n        self.Qprint(\n            \'<font color=green><b>Press ""Calculate"" to update theory</b></font>\'\n        )\n\n    def Qhide_theory_extras(self, show):\n        """"""Uncheck the LVE button. Called when curent theory is changed""""""\n        if show:\n            self.LVEenvelopeseries.set_visible(self.linearenvelope.isChecked())\n        else:\n            self.LVEenvelopeseries.set_visible(False)\n        self.parent_dataset.actionMinimize_Error.setDisabled(show)\n        self.parent_dataset.actionShow_Limits.setDisabled(show)\n        self.parent_dataset.actionVertical_Limits.setDisabled(show)\n        self.parent_dataset.actionHorizontal_Limits.setDisabled(show)\n\n    def show_linear_envelope(self, state):\n        self.plot_theory_stuff()\n        self.extra_graphic_visible(state)\n        # self.LVEenvelopeseries.set_visible(self.linearenvelope.isChecked())\n        # self.plot_theory_stuff()\n        # self.parent_dataset.parent_application.update_plot()\n\n    def select_shear_flow(self):\n        self.flow_mode = FlowMode.shear\n        self.tbutflow.setDefaultAction(self.shear_flow_action)\n\n    def select_extensional_flow(self):\n        self.flow_mode = FlowMode.uext\n        self.tbutflow.setDefaultAction(self.extensional_flow_action)\n\n    def get_modes_reptate(self):\n        apmng = self.parent_dataset.parent_application.parent_manager\n        get_dict = {}\n        for app in apmng.applications.values():\n            app_index = apmng.ApplicationtabWidget.indexOf(app)\n            app_tab_name = apmng.ApplicationtabWidget.tabText(app_index)\n            for ds in app.datasets.values():\n                ds_index = app.DataSettabWidget.indexOf(ds)\n                ds_tab_name = app.DataSettabWidget.tabText(ds_index)\n                for th in ds.theories.values():\n                    th_index = ds.TheorytabWidget.indexOf(th)\n                    th_tab_name = ds.TheorytabWidget.tabText(th_index)\n                    if th.thname == \'Discretize MWD\':\n                        get_dict[""%s.%s.%s"" % (app_tab_name, ds_tab_name,\n                                               th_tab_name)] = th.get_mwd\n\n        if get_dict:\n            d = GetMwdRepTate(self, get_dict, \'Select Discretized MWD\')\n            if (d.exec_() and d.btngrp.checkedButton() != None):\n                _, success1 = self.set_param_value(""tau_e"", d.taue_text.text())\n                _, success2 = self.set_param_value(""Me"", d.Me_text.text())\n                if not success1 * success2:\n                    self.Qprint(""Could not understand Me or taue, try again"")\n                    return\n                item = d.btngrp.checkedButton().text()\n                m, phi = get_dict[item]()\n\n                self.MWD_m = np.copy(m)\n                self.MWD_phi = np.copy(phi)\n                self.set_modes_from_mwd(m, phi)\n        else:\n            # no theory Discretise MWD found\n            QMessageBox.warning(self, \'Get MW distribution\',\n                                \'No \\""Discretize MWD\\"" theory found\')\n        # self.parent_dataset.handle_actionCalculate_Theory()\n\n    def edit_modes_window(self):\n        nmodes = self.parameters[""nmodes""].value\n        phi = np.zeros(nmodes)\n        taud = np.zeros(nmodes)\n        taur = np.zeros(nmodes)\n        for i in range(nmodes):\n            phi[i] = self.parameters[""phi%02d"" % i].value\n            taud[i] = self.parameters[""tauD%02d"" % i].value\n            taur[i] = self.parameters[""tauR%02d"" % i].value\n        param_dic = OrderedDict()\n        param_dic[""phi""] = phi\n        param_dic[""tauD""] = taud\n        param_dic[""tauR""] = taur\n        d = EditModesVolFractionsDialog(self, param_dic, self.MAX_MODES)\n        if d.exec_():\n            nmodes = d.table.rowCount()\n            self.set_param_value(""nmodes"", nmodes)\n            # self.set_param_value(""nstretch"", nmodes)\n            success = True\n            for i in range(nmodes):\n                msg, success1 = self.set_param_value(""phi%02d"" % i,\n                                                     d.table.item(i, 0).text())\n                msg, success2 = self.set_param_value(""tauD%02d"" % i,\n                                                     d.table.item(i, 1).text())\n                msg, success3 = self.set_param_value(""tauR%02d"" % i,\n                                                     d.table.item(i, 2).text())\n                success *= success1 * success2 * success3\n            if not success:\n                QMessageBox.warning(\n                    self, \'Error\',\n                    \'Some parameter(s) could not be updated.\\nPlease try again.\'\n                )\n            else:\n                self.handle_actionCalculate_Theory()\n\n    def edit_mwd_modes(self):\n        d = EditMWDDialog(self, self.MWD_m, self.MWD_phi, 200)\n        if d.exec_():\n            nmodes = d.table.rowCount()\n            m = []\n            phi = []\n            _, success1 = self.set_param_value(""tau_e"", d.taue_text.text())\n            _, success2 = self.set_param_value(""Me"", d.Me_text.text())\n            if not success1 * success2:\n                self.Qprint(""Could not understand Me or taue, try again"")\n                return\n            for i in range(nmodes):\n                try:\n                    m.append(float(d.table.item(i, 0).text()))\n                    phi.append(float(d.table.item(i, 1).text()))\n                except ValueError:\n                    self.Qprint(""Could not understand line %d, try again"" %\n                                (i + 1))\n                    return\n            self.MWD_m = np.copy(m)\n            self.MWD_phi = np.copy(phi)\n            self.set_modes_from_mwd(m, phi)\n\n    # def plot_modes_graph(self):\n    #     pass\n\n    def plot_theory_stuff(self):\n        """"""Plot theory graphical helpers""""""\n        logtmin = np.log10(self.parent_dataset.minpositivecol(0))\n        logtmax = np.log10(self.parent_dataset.maxcol(0)) + 1\n        ntimes = int((logtmax - logtmin) * 20)\n        data_table_tmp = DataTable(self.axarr)\n        data_table_tmp.num_columns = 5\n        data_table_tmp.num_rows = ntimes\n        data_table_tmp.data = np.zeros((ntimes, 5))\n\n        times = np.logspace(logtmin, logtmax, ntimes)\n        data_table_tmp.data[:, 0] = times\n        nmodes = self.parameters[""nmodes""].value\n        data_table_tmp.data[:, 1] = 0\n        fparamaux = {""gdot"": 1e-8}\n\n        phi = []\n        taud = []\n        for i in range(nmodes):\n            phi.append(self.parameters[""phi%02d"" % i].value)\n            taud.append(self.parameters[""tauD%02d"" % i].value)\n\n        for i in range(nmodes):\n            if self.stop_theory_flag:\n                break\n            G = self.parameters[\'GN0\'].value\n            if self.with_gcorr == GcorrMode.with_gcorr:\n                G = G * self.gZ(self.Zeff[i])\n            for j in range(nmodes):\n                # TODO: use symetry to reduce number of loops\n                tau = 1. / (1. / taud[i] + 1. / taud[j])\n                data_table_tmp.data[:, 1] += G * phi[i] * phi[j] * fparamaux[\n                    ""gdot""] * tau * (1 - np.exp(-times / tau))\n        if self.flow_mode == FlowMode.uext:\n            data_table_tmp.data[:, 1] *= 3.0\n        view = self.parent_dataset.parent_application.current_view\n        try:\n            x, y, success = view.view_proc(data_table_tmp, fparamaux)\n        except TypeError as e:\n            print(e)\n            return\n        self.LVEenvelopeseries.set_data(x[:, 0], y[:, 0])\n        # remove tmp artist form ax\n        for i in range(data_table_tmp.MAX_NUM_SERIES):\n            for nx in range(len(self.axarr)):\n                self.axarr[nx].lines.remove(data_table_tmp.series[nx][i])\n\n\n'"
RepTate/theories/TheoryHavriliakNegamiModes.py,31,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryHavriliakNegamiModes\n\nModule that defines theories related to Havriliak-Negami modes, in the frequency and time domains.\n\n""""""\nimport numpy as np\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.DataTable import DataTable\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom PyQt5.QtWidgets import QToolBar, QSpinBox\nfrom PyQt5.QtCore import QSize\nfrom PyQt5.QtGui import QIcon\nfrom RepTate.core.DraggableArtists import DragType, DraggableModesSeries\n\n\nclass TheoryHavriliakNegamiModesFrequency(CmdBase):\n    """"""Fit a generalized Havriliak-Negami model to a frequency dependent relaxation function. \n    \n    * **Function**\n        .. math::\n            \\\\epsilon^* (\\\\omega) = \\\\epsilon_\\\\infty + \\\\frac{\\\\Delta\\\\epsilon}{\\\\left[ 1 + \\\\left( i\\\\omega\\\\tau\\\\right)^\\\\alpha\\\\right]^\\\\gamma}\n    \n    * **Parameters**\n       - einf = :math:`\\\\epsilon_{\\\\infty}`: Unrelaxed permitivity\n       - :math:`n_{modes}`: number of Havriliak-Negami modes equally distributed in logarithmic scale between :math:`\\\\omega_{min}` and :math:`\\\\omega_{max}`.\n       - logwmin = :math:`\\\\log(\\\\omega_{min})`: decimal logarithm of the minimum frequency.\n       - logwmax = :math:`\\\\log(\\\\omega_{max})`: decimal logarithm of the maximum frequency.\n       - logDei = :math:`\\\\log(\\\\Delta\\\\epsilon_{i})`, where :math:`\\\\Delta\\\\epsilon_{i}=\\\\epsilon_{s,i}-\\\\epsilon_\\\\infty`: decimal logarithm of the relaxation strength of Debye mode :math:`i`, where :math:`\\\\epsilon_{s,i}` is the static permitivity of mode :math:`i`.\n       - :math:`\\\\alpha`: Asymmetry parameter\n       - :math:`\\\\gamma`: Broadness parameter\n    \n    """"""\n\n    thname = ""Havriliak-Negami modes""\n    description = ""Fit Havriliak-Negami modes""\n    citations = [""Havriliak S. and Negami S., Polymer 1967, 8, 161-210""]\n    doi = [""http://dx.doi.org/10.1016/0032-3861(67)90021-3""]\n\n    def __new__(cls, name="""", parent_dataset=None, ax=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryHavriliakNegamiModesFrequency(name, parent_dataset, ax)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryHavriliakNegamiModesFrequency(name, parent_dataset, ax)\n        )\n\n\nclass BaseTheoryHavriliakNegamiModesFrequency:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/Dielectric/Theory/theory.html#havriliak-negami-modes""\n    single_file = True\n    thname = TheoryHavriliakNegamiModesFrequency.thname\n    citations = TheoryHavriliakNegamiModesFrequency.citations\n    doi = TheoryHavriliakNegamiModesFrequency.doi\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n        self.function = self.HavriliakNegamiModesFrequency\n        self.has_modes = False\n        self.MAX_MODES = 40\n        self.view_modes = True\n        wmin = self.parent_dataset.minpositivecol(0)\n        wmax = self.parent_dataset.maxcol(0)\n        nmodes = int(np.round(np.log10(wmax / wmin)))\n\n        self.parameters[""einf""] = Parameter(\n            ""einf"",\n            0.0,\n            ""Unrelaxed permittivity"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=0,\n        )\n        self.parameters[""alpha""] = Parameter(\n            ""alpha"",\n            1.0,\n            ""Asymmetry parameter"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=0,\n        )\n        self.parameters[""gamma""] = Parameter(\n            ""gamma"",\n            1.0,\n            ""Broadness parameter"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=0,\n        )\n        self.parameters[""logwmin""] = Parameter(\n            ""logwmin"",\n            np.log10(wmin),\n            ""Log of frequency range minimum"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n        )\n        self.parameters[""logwmax""] = Parameter(\n            ""logwmax"",\n            np.log10(wmax),\n            ""Log of frequency range maximum"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n        )\n        self.parameters[""nmodes""] = Parameter(\n            name=""nmodes"",\n            value=nmodes,\n            description=""Number of Havriliak-Negami modes"",\n            type=ParameterType.integer,\n            opt_type=OptType.const,\n            display_flag=False,\n        )\n        # Interpolate modes from data\n        w = np.logspace(np.log10(wmin), np.log10(wmax), nmodes)\n        eps = np.abs(\n            np.interp(\n                w,\n                self.parent_dataset.files[0].data_table.data[:, 0],\n                self.parent_dataset.files[0].data_table.data[:, 1],\n            )\n        )\n        for i in range(self.parameters[""nmodes""].value):\n            self.parameters[""logDe%02d"" % i] = Parameter(\n                ""logDe%02d"" % i,\n                np.log10(eps[i]),\n                ""Log of Mode %d amplitude"" % i,\n                ParameterType.real,\n                opt_type=OptType.opt,\n            )\n\n        # GRAPHIC MODES\n        self.graphicmodes = []\n        self.artistmodes = []\n        self.setup_graphic_modes()\n\n    def drag_mode(self, dx, dy):\n        """"""Drag graphical modes""""""\n        nmodes = self.parameters[""nmodes""].value\n        if self.parent_dataset.parent_application.current_view.log_x:\n            self.set_param_value(""logwmin"", np.log10(dx[0]))\n            self.set_param_value(""logwmax"", np.log10(dx[nmodes - 1]))\n        else:\n            self.set_param_value(""logwmin"", dx[0])\n            self.set_param_value(""logwmax"", dx[nmodes - 1])\n\n        if self.parent_dataset.parent_application.current_view.log_y:\n            for i in range(nmodes):\n                self.set_param_value(""logDe%02d"" % i, np.log10(dy[i]))\n        else:\n            for i in range(nmodes):\n                self.set_param_value(""logDe%02d"" % i, dy[i])\n\n        self.do_calculate("""")\n        self.update_parameter_table()\n\n    def update_modes(self):\n        """"""Do nothing""""""\n        pass\n\n    def setup_graphic_modes(self):\n        """"""Setup graphical helpers""""""\n        nmodes = self.parameters[""nmodes""].value\n        w = np.logspace(\n            self.parameters[""logwmin""].value, self.parameters[""logwmax""].value, nmodes\n        )\n        eps = np.zeros(nmodes)\n        for i in range(nmodes):\n            eps[i] = np.power(10, self.parameters[""logDe%02d"" % i].value)\n\n        self.graphicmodes = self.ax.plot(w, eps)[0]\n        self.graphicmodes.set_marker(""D"")\n        self.graphicmodes.set_linestyle("""")\n        self.graphicmodes.set_visible(self.view_modes)\n        self.graphicmodes.set_markerfacecolor(""yellow"")\n        self.graphicmodes.set_markeredgecolor(""black"")\n        self.graphicmodes.set_markeredgewidth(3)\n        self.graphicmodes.set_markersize(8)\n        self.graphicmodes.set_alpha(0.5)\n        self.artistmodes = DraggableModesSeries(\n            self.graphicmodes,\n            DragType.special,\n            self.parent_dataset.parent_application,\n            self.drag_mode,\n        )\n        self.plot_theory_stuff()\n\n    def destructor(self):\n        """"""Called when the theory tab is closed""""""\n        self.graphicmodes_visible(False)\n        self.ax.lines.remove(self.graphicmodes)\n\n    def show_theory_extras(self, show=False):\n        """"""Called when the active theory is changed""""""\n        if CmdBase.mode == CmdMode.GUI:\n            self.Qhide_theory_extras(show)\n        self.graphicmodes_visible(show)\n\n    def graphicmodes_visible(self, state):\n        """"""Change visibility of modes""""""\n        self.view_modes = state\n        self.graphicmodes.set_visible(self.view_modes)\n        if self.view_modes:\n            self.artistmodes.connect()\n        else:\n            self.artistmodes.disconnect()\n        # self.do_calculate("""")\n        self.parent_dataset.parent_application.update_plot()\n\n    def get_modes(self):\n        """"""Get the values of Maxwell Modes from this theory""""""\n        nmodes = self.parameters[""nmodes""].value\n        freq = np.logspace(\n            self.parameters[""logwmin""].value, self.parameters[""logwmax""].value, nmodes\n        )\n        tau = 1.0 / freq\n        eps = np.zeros(nmodes)\n        for i in range(nmodes):\n            eps[i] = np.power(10, self.parameters[""logDe%02d"" % i].value)\n        return tau, eps, True\n\n    def HavriliakNegamiModesFrequency(self, f=None):\n        """"""Calculate the theory""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        tt.data[:, 0] = ft.data[:, 0]\n\n        einf = self.parameters[""einf""].value\n        alpha = self.parameters[""alpha""].value\n        gamma = self.parameters[""gamma""].value\n        nmodes = self.parameters[""nmodes""].value\n        freq = np.logspace(\n            self.parameters[""logwmin""].value, self.parameters[""logwmax""].value, nmodes\n        )\n        tau = 1.0 / freq\n\n        sol = np.zeros(tt.num_rows, dtype=""complex128"")\n        sol += einf\n        for i in range(nmodes):\n            if self.stop_theory_flag:\n                break\n            eps = np.power(10, self.parameters[""logDe%02d"" % i].value)\n            sol += eps / np.power(\n                1.0 + np.power(1j * tt.data[:, 0] * tau[i], alpha), gamma\n            )\n\n        tt.data[:, 1] = np.real(sol)\n        tt.data[:, 2] = -np.imag(sol)\n\n    def plot_theory_stuff(self):\n        """"""Plot graphical helpers""""""\n        # if not self.view_modes:\n        #     return\n        data_table_tmp = DataTable(self.axarr)\n        data_table_tmp.num_columns = 3\n        nmodes = self.parameters[""nmodes""].value\n        data_table_tmp.num_rows = nmodes\n        data_table_tmp.data = np.zeros((nmodes, 3))\n        freq = np.logspace(\n            self.parameters[""logwmin""].value, self.parameters[""logwmax""].value, nmodes\n        )\n        data_table_tmp.data[:, 0] = freq\n        for i in range(nmodes):\n            if self.stop_theory_flag:\n                break\n            data_table_tmp.data[i, 1] = data_table_tmp.data[i, 2] = np.power(\n                10, self.parameters[""logDe%02d"" % i].value\n            )\n        view = self.parent_dataset.parent_application.current_view\n        try:\n            x, y, success = view.view_proc(data_table_tmp, None)\n        except TypeError as e:\n            print(e)\n            return\n        self.graphicmodes.set_data(x, y)\n        for i in range(data_table_tmp.MAX_NUM_SERIES):\n            for nx in range(len(self.axarr)):\n                self.axarr[nx].lines.remove(data_table_tmp.series[nx][i])\n\n\nclass CLTheoryHavriliakNegamiModesFrequency(\n    BaseTheoryHavriliakNegamiModesFrequency, Theory\n):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n\nclass GUITheoryHavriliakNegamiModesFrequency(\n    BaseTheoryHavriliakNegamiModesFrequency, QTheory\n):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n        # add widgets specific to the theory\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n        self.spinbox = QSpinBox()\n        self.spinbox.setRange(1, self.MAX_MODES)  # min and max number of modes\n        self.spinbox.setSuffix("" modes"")\n        self.spinbox.setValue(self.parameters[""nmodes""].value)  # initial value\n        tb.addWidget(self.spinbox)\n        self.modesaction = tb.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-visible.png""), ""View modes""\n        )\n        self.modesaction.setCheckable(True)\n        self.modesaction.setChecked(True)\n        self.thToolsLayout.insertWidget(0, tb)\n\n        connection_id = self.spinbox.valueChanged.connect(\n            self.handle_spinboxValueChanged\n        )\n        connection_id = self.modesaction.triggered.connect(self.modesaction_change)\n\n    def Qhide_theory_extras(self, state):\n        """"""Uncheck the modeaction button. Called when curent theory is changed""""""\n        self.modesaction.setChecked(state)\n\n    def modesaction_change(self, checked):\n        """"""Change visibility of modes""""""\n        self.graphicmodes_visible(checked)\n        # self.view_modes = self.modesaction.isChecked()\n        # self.graphicmodes.set_visible(self.view_modes)\n        # self.do_calculate("""")\n\n    def handle_spinboxValueChanged(self, value):\n        """"""Handle a change of the parameter \'nmode\'""""""\n        nmodesold = self.parameters[""nmodes""].value\n        wminold = self.parameters[""logwmin""].value\n        wmaxold = self.parameters[""logwmax""].value\n        wold = np.logspace(wminold, wmaxold, nmodesold)\n        Gold = np.zeros(nmodesold)\n        for i in range(nmodesold):\n            Gold[i] = self.parameters[""logDe%02d"" % i].value\n            del self.parameters[""logDe%02d"" % i]\n\n        nmodesnew = value\n        self.set_param_value(""nmodes"", nmodesnew)\n        wnew = np.logspace(wminold, wmaxold, nmodesnew)\n\n        Gnew = np.interp(wnew, wold, Gold)\n\n        for i in range(nmodesnew):\n            self.parameters[""logDe%02d"" % i] = Parameter(\n                ""logDe%02d"" % i,\n                Gnew[i],\n                ""Log of Mode %d amplitude"" % i,\n                ParameterType.real,\n                opt_type=OptType.opt,\n            )\n\n        if self.autocalculate:\n            self.parent_dataset.handle_actionCalculate_Theory()\n        self.update_parameter_table()\n'"
RepTate/theories/TheoryKWWModes.py,26,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryKWWModes\n\nModule that defines theories related to Havriliak-Negami modes, in the frequency and time domains.\n\n""""""\nimport numpy as np\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.DataTable import DataTable\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom PyQt5.QtWidgets import QToolBar, QSpinBox\nfrom PyQt5.QtCore import QSize\nfrom PyQt5.QtGui import QIcon\nfrom RepTate.core.DraggableArtists import DragType, DraggableModesSeries\n\nfrom RepTate.theories.kww_ctypes_helper import kwwc, kwws\n\n\nclass TheoryKWWModesFrequency(CmdBase):\n    """"""Fit a Kohlrausch-Williams-Watts (KWW, stretched exponential) model to a frequency dependent relaxation function. \n    \n    * **Function**\n        .. math::\n            \\\\epsilon (t) - \\\\epsilon_\\\\infty =  \\\\Delta\\\\epsilon \\\\left[ 1 - \\\\exp \\\\left( - \\\\frac{t}{\\\\tau} \\\\right)^\\\\beta\\\\right]\n    \n    * **Parameters**\n       - einf = :math:`\\\\epsilon_{\\\\infty}`: Unrelaxed permitivity\n       - :math:`n_{modes}`: number of Havriliak-Negami modes equally distributed in logarithmic scale between :math:`\\\\omega_{min}` and :math:`\\\\omega_{max}`.\n       - logwmin = :math:`\\\\log(\\\\omega_{min})`: decimal logarithm of the minimum frequency.\n       - logwmax = :math:`\\\\log(\\\\omega_{max})`: decimal logarithm of the maximum frequency.\n       - logDei = :math:`\\\\log(\\\\Delta\\\\epsilon_{i})`, where :math:`\\\\Delta\\\\epsilon_{i}=\\\\epsilon_{s,i}-\\\\epsilon_\\\\infty`: decimal logarithm of the relaxation strength of Debye mode :math:`i`, where :math:`\\\\epsilon_{s,i}` is the static permitivity of mode :math:`i`.\n       - :math:`\\\\beta`: stretched exponential parameter\n       \n    .. note::\n        It makes use of the libkww code, by Joachim Wuttke, CITE: doi:10.3390/a5040604\n    \n    """"""\n\n    thname = ""KWW modes""\n    description = ""Fit Kohlrausch-Williams-Watts modes""\n    citations = [\n        ""Kohlrausch, R. Annalen der Physik und Chemie 1854, 91, 56-82"",\n        ""Williams G. and Watts D.C., Trans. Faraday Soc. 1970, 66, 80-85"",\n    ]\n    doi = [\n        ""http://dx.doi.org/10.1002/andp.18541670203"",\n        ""http://dx.doi.org/10.1039/TF9706600080"",\n    ]\n\n    def __new__(cls, name="""", parent_dataset=None, ax=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryKWWModesFrequency(name, parent_dataset, ax)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryKWWModesFrequency(name, parent_dataset, ax)\n        )\n\n\nclass BaseTheoryKWWModesFrequency:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/Dielectric/Theory/theory.html#kolhrauch-williams-watts-kww-modes""\n    single_file = True\n    thname = TheoryKWWModesFrequency.thname\n    citations = TheoryKWWModesFrequency.citations\n    doi = TheoryKWWModesFrequency.doi\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n        self.function = self.KWWModesFrequency\n        self.has_modes = False\n        self.MAX_MODES = 40\n        self.view_modes = True\n        wmin = self.parent_dataset.minpositivecol(0)\n        wmax = self.parent_dataset.maxcol(0)\n        nmodes = int(np.round(np.log10(wmax / wmin)))\n\n        self.parameters[""einf""] = Parameter(\n            ""einf"",\n            0.0,\n            ""Unrelaxed permittivity"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=0,\n        )\n        self.parameters[""beta""] = Parameter(\n            ""beta"",\n            0.5,\n            ""Stretched exponential parameter"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=0.1,\n            max_value=2.0,\n        )\n        self.parameters[""logwmin""] = Parameter(\n            ""logwmin"",\n            np.log10(wmin),\n            ""Log of frequency range minimum"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n        )\n        self.parameters[""logwmax""] = Parameter(\n            ""logwmax"",\n            np.log10(wmax),\n            ""Log of frequency range maximum"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n        )\n        self.parameters[""nmodes""] = Parameter(\n            name=""nmodes"",\n            value=nmodes,\n            description=""Number of KWW modes"",\n            type=ParameterType.integer,\n            opt_type=OptType.const,\n            display_flag=False,\n        )\n        # Interpolate modes from data\n        w = np.logspace(np.log10(wmin), np.log10(wmax), nmodes)\n        eps = np.abs(\n            np.interp(\n                w,\n                self.parent_dataset.files[0].data_table.data[:, 0],\n                self.parent_dataset.files[0].data_table.data[:, 1],\n            )\n        )\n        for i in range(self.parameters[""nmodes""].value):\n            self.parameters[""logDe%02d"" % i] = Parameter(\n                ""logDe%02d"" % i,\n                np.log10(eps[i]),\n                ""Log of Mode %d amplitude"" % i,\n                ParameterType.real,\n                opt_type=OptType.opt,\n            )\n\n        # GRAPHIC MODES\n        self.graphicmodes = []\n        self.artistmodes = []\n        self.setup_graphic_modes()\n\n    def drag_mode(self, dx, dy):\n        """"""Drag modes""""""\n        nmodes = self.parameters[""nmodes""].value\n        if self.parent_dataset.parent_application.current_view.log_x:\n            self.set_param_value(""logwmin"", np.log10(dx[0]))\n            self.set_param_value(""logwmax"", np.log10(dx[nmodes - 1]))\n        else:\n            self.set_param_value(""logwmin"", dx[0])\n            self.set_param_value(""logwmax"", dx[nmodes - 1])\n\n        if self.parent_dataset.parent_application.current_view.log_y:\n            for i in range(nmodes):\n                self.set_param_value(""logDe%02d"" % i, np.log10(dy[i]))\n        else:\n            for i in range(nmodes):\n                self.set_param_value(""logDe%02d"" % i, dy[i])\n\n        self.do_calculate("""")\n        self.update_parameter_table()\n\n    def update_modes(self):\n        """"""Do nothing""""""\n        pass\n\n    def setup_graphic_modes(self):\n        """"""Setup graphical helpers""""""\n        nmodes = self.parameters[""nmodes""].value\n        w = np.logspace(\n            self.parameters[""logwmin""].value, self.parameters[""logwmax""].value, nmodes\n        )\n        eps = np.zeros(nmodes)\n        for i in range(nmodes):\n            eps[i] = np.power(10, self.parameters[""logDe%02d"" % i].value)\n\n        self.graphicmodes = self.ax.plot(w, eps)[0]\n        self.graphicmodes.set_marker(""D"")\n        self.graphicmodes.set_linestyle("""")\n        self.graphicmodes.set_visible(self.view_modes)\n        self.graphicmodes.set_markerfacecolor(""yellow"")\n        self.graphicmodes.set_markeredgecolor(""black"")\n        self.graphicmodes.set_markeredgewidth(3)\n        self.graphicmodes.set_markersize(8)\n        self.graphicmodes.set_alpha(0.5)\n        self.artistmodes = DraggableModesSeries(\n            self.graphicmodes,\n            DragType.special,\n            self.parent_dataset.parent_application,\n            self.drag_mode,\n        )\n        self.plot_theory_stuff()\n\n    def destructor(self):\n        """"""Called when the theory tab is closed""""""\n        self.graphicmodes_visible(False)\n        self.ax.lines.remove(self.graphicmodes)\n\n    def show_theory_extras(self, show=False):\n        """"""Called when the active theory is changed""""""\n        if CmdBase.mode == CmdMode.GUI:\n            self.Qhide_theory_extras(show)\n        self.graphicmodes_visible(show)\n\n    def graphicmodes_visible(self, state):\n        """"""Change visibility of modes""""""\n        self.view_modes = state\n        self.graphicmodes.set_visible(self.view_modes)\n        if self.view_modes:\n            self.artistmodes.connect()\n        else:\n            self.artistmodes.disconnect()\n        # self.do_calculate("""")\n        self.parent_dataset.parent_application.update_plot()\n\n    def get_modes(self):\n        """"""Get the values of Maxwell Modes from this theory""""""\n        nmodes = self.parameters[""nmodes""].value\n        freq = np.logspace(\n            self.parameters[""logwmin""].value, self.parameters[""logwmax""].value, nmodes\n        )\n        tau = 1.0 / freq\n        eps = np.zeros(nmodes)\n        for i in range(nmodes):\n            eps[i] = np.power(10, self.parameters[""logDe%02d"" % i].value)\n        return tau, eps, True\n\n    def KWWModesFrequency(self, f=None):\n        """"""Calculate theory""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        tt.data[:, 0] = ft.data[:, 0]\n\n        einf = self.parameters[""einf""].value\n        beta = self.parameters[""beta""].value\n        nmodes = self.parameters[""nmodes""].value\n        freq = np.logspace(\n            self.parameters[""logwmin""].value, self.parameters[""logwmax""].value, nmodes\n        )\n        tau = 1.0 / freq\n\n        tt.data[:, 1] += einf\n        for i in range(nmodes):\n            if self.stop_theory_flag:\n                break\n            eps = np.power(10, self.parameters[""logDe%02d"" % i].value)\n            for j, w in enumerate(tt.data[:, 0]):\n                tt.data[j, 1] += eps * kwwc(w * tau[i], beta)\n                tt.data[j, 2] += eps * kwws(w * tau[i], beta)\n\n    def plot_theory_stuff(self):\n        """"""Plot theory helpers""""""\n        # if not self.view_modes:\n        #     return\n        data_table_tmp = DataTable(self.axarr)\n        data_table_tmp.num_columns = 3\n        nmodes = self.parameters[""nmodes""].value\n        data_table_tmp.num_rows = nmodes\n        data_table_tmp.data = np.zeros((nmodes, 3))\n        freq = np.logspace(\n            self.parameters[""logwmin""].value, self.parameters[""logwmax""].value, nmodes\n        )\n        data_table_tmp.data[:, 0] = freq\n        for i in range(nmodes):\n            if self.stop_theory_flag:\n                break\n            data_table_tmp.data[i, 1] = data_table_tmp.data[i, 2] = np.power(\n                10, self.parameters[""logDe%02d"" % i].value\n            )\n        view = self.parent_dataset.parent_application.current_view\n        try:\n            x, y, success = view.view_proc(data_table_tmp, None)\n        except TypeError as e:\n            print(e)\n            return\n        self.graphicmodes.set_data(x, y)\n        for i in range(data_table_tmp.MAX_NUM_SERIES):\n            for nx in range(len(self.axarr)):\n                self.axarr[nx].lines.remove(data_table_tmp.series[nx][i])\n\n\nclass CLTheoryKWWModesFrequency(BaseTheoryKWWModesFrequency, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n\nclass GUITheoryKWWModesFrequency(BaseTheoryKWWModesFrequency, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n        # add widgets specific to the theory\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n        self.spinbox = QSpinBox()\n        self.spinbox.setRange(1, self.MAX_MODES)  # min and max number of modes\n        self.spinbox.setSuffix("" modes"")\n        self.spinbox.setValue(self.parameters[""nmodes""].value)  # initial value\n        tb.addWidget(self.spinbox)\n        self.modesaction = tb.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-visible.png""), ""View modes""\n        )\n        self.modesaction.setCheckable(True)\n        self.modesaction.setChecked(True)\n        self.thToolsLayout.insertWidget(0, tb)\n\n        connection_id = self.spinbox.valueChanged.connect(\n            self.handle_spinboxValueChanged\n        )\n        connection_id = self.modesaction.triggered.connect(self.modesaction_change)\n\n    def Qhide_theory_extras(self, state):\n        """"""Uncheck the modeaction button. Called when curent theory is changed""""""\n        self.modesaction.setChecked(state)\n\n    def modesaction_change(self, checked):\n        """"""Change mode visibility""""""\n        self.graphicmodes_visible(checked)\n        # self.view_modes = self.modesaction.isChecked()\n        # self.graphicmodes.set_visible(self.view_modes)\n        # self.do_calculate("""")\n\n    def handle_spinboxValueChanged(self, value):\n        """"""Handle a change of the parameter \'nmode\'""""""\n        nmodesold = self.parameters[""nmodes""].value\n        wminold = self.parameters[""logwmin""].value\n        wmaxold = self.parameters[""logwmax""].value\n        wold = np.logspace(wminold, wmaxold, nmodesold)\n        Gold = np.zeros(nmodesold)\n        for i in range(nmodesold):\n            Gold[i] = self.parameters[""logDe%02d"" % i].value\n            del self.parameters[""logDe%02d"" % i]\n\n        nmodesnew = value\n        self.set_param_value(""nmodes"", nmodesnew)\n        wnew = np.logspace(wminold, wmaxold, nmodesnew)\n\n        Gnew = np.interp(wnew, wold, Gold)\n\n        for i in range(nmodesnew):\n            self.parameters[""logDe%02d"" % i] = Parameter(\n                ""logDe%02d"" % i,\n                Gnew[i],\n                ""Log of Mode %d amplitude"" % i,\n                ParameterType.real,\n                opt_type=OptType.opt,\n            )\n\n        if self.autocalculate:\n            self.parent_dataset.handle_actionCalculate_Theory()\n        self.update_parameter_table()\n'"
RepTate/theories/TheoryLDPEBatch.py,6,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#     Daniel Read, d.j.read@leeds.ac.uk\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryTobitaBatch\n\nTobitaBatch file for creating a new theory\n""""""\nimport numpy as np\nimport time\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom PyQt5.QtCore import pyqtSignal\nfrom PyQt5.QtWidgets import QApplication\n\nimport ctypes as ct\nimport RepTate.theories.react_ctypes_helper as rch\nimport RepTate.theories.react_gui_tools as rgt\n\n\nclass TheoryTobitaBatch(CmdBase):\n    """"""LDPE batch reaction theory\n    \n    The LDPE batch reaction theory uses an algorithm described in the paper by H.\n    Tobita (J. Pol. Sci. Part B, 39, 391-403 (2001)). It is designed for a batch\n    reaction - in which the reagents are well mixed at the beginning and monomer\n    is consumed as the reaction proceeds. It is equivalent to the ""plug-flow""\n    approximation for a tubular reactor. One possibility when modelling a real\n    tubular reactor is to mix several batch reactions with different conversions.\n    """"""\n\n    thname = ""Tobita Batch""\n    description = ""The LDPE batch reaction theory""\n    citations = [""Tobita H., J. Pol. Sci. Part B 2001, 39, 391-403""]\n    doi = [\n        ""http://dx.doi.org/10.1002/1099-0488(20010115)39:4<391::AID-POLB1011>3.0.CO;2-3""\n    ]\n\n    def __new__(cls, name="""", parent_dataset=None, axarr=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryTobitaBatch(name, parent_dataset, axarr)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryTobitaBatch(name, parent_dataset, axarr)\n        )\n\n\nclass BaseTheoryTobitaBatch:\n    """"""Base class for both GUI and CL""""""\n\n    # html_help_file = \'docs%sbuild%shtml%smanual%sTheories%sReact%stobitaLDPE.html\' % ((os.sep, )*6)\n    html_help_file = (\n        ""http://reptate.readthedocs.io/manual/Applications/React/Theory/tobitaLDPE.html""\n    )\n    single_file = (\n        True  # False if the theory can be applied to multiple files simultaneously\n    )\n    thname = TheoryTobitaBatch.thname\n    citations = TheoryTobitaBatch.citations\n    doi = TheoryTobitaBatch.doi\n\n    signal_request_dist = pyqtSignal(object)\n    signal_request_polymer = pyqtSignal(object)\n    signal_request_arm = pyqtSignal(object)\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n        self.reactname = ""LDPE batch %d"" % (rch.tb_global.tobbatchnumber)\n        rch.tb_global.tobbatchnumber += 1\n        self.function = self.Calc\n        self.simexists = False\n        self.dist_exists = False\n        self.ndist = 0\n        self.has_modes = False  # True if the theory has modes\n        self.autocalculate = False\n        self.do_priority_seniority = False\n\n        self.parameters[""tau""] = Parameter(\n            name=""tau"",\n            value=0.002,\n            description=""Ratio (term. by dispropor. + chain transf. to small mol.) to polym. rates"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""beta""] = Parameter(\n            name=""beta"",\n            value=0.0,\n            description=""Ratio term. by combin. to polym. rates"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""Cb""] = Parameter(\n            name=""Cb"",\n            value=0.02,\n            description=""Ratio long-chain-branch. to polym. rates"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""Cs""] = Parameter(\n            name=""Cs"",\n            value=0.0005,\n            description=""Ratio scission to polym. rates"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""fin_conv""] = Parameter(\n            name=""fin_conv"",\n            value=0.4,\n            description=""Monomer conversion at the end of the reaction"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""num_to_make""] = Parameter(\n            name=""num_to_make"",\n            value=1000,\n            description=""Number of molecules made in the simulation"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""mon_mass""] = Parameter(\n            name=""mon_mass"",\n            value=28,\n            description=""Mass, in a.m.u., of a monomer (usually set to 28 for PE)"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""Me""] = Parameter(\n            name=""Me"",\n            value=1000,\n            description=""Entanglement molecular weight"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""nbin""] = Parameter(\n            name=""nbin"",\n            value=100,\n            description=""Number of molecular weight bins"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n\n        self.signal_request_dist.connect(rgt.request_more_dist)\n        self.signal_request_polymer.connect(rgt.request_more_polymer)\n        self.signal_request_arm.connect(rgt.request_more_arm)\n        self.do_xrange("""", visible=self.xrange.get_visible())\n\n    def request_stop_computations(self):\n        """"""Called when user wants to terminate the current computation""""""\n        rch.set_flag_stop_all(ct.c_bool(True))\n        super().request_stop_computations()\n\n    def Calc(self, f=None):\n        # var\n        # i,nbins,numtomake,m:integer\n        # fin_conv, tau, beta, Cb, Cs, monmass, Me:double\n\n        # get parameters\n        tau = self.parameters[""tau""].value\n        beta = self.parameters[""beta""].value\n        Cb = self.parameters[""Cb""].value\n        Cs = self.parameters[""Cs""].value\n        fin_conv = self.parameters[""fin_conv""].value\n        numtomake = np.round(self.parameters[""num_to_make""].value)\n        monmass = self.parameters[""mon_mass""].value\n        Me = self.parameters[""Me""].value\n        nbins = int(np.round(self.parameters[""nbin""].value))\n        rch.set_do_prio_senio(ct.c_bool(self.do_priority_seniority))\n        rch.set_flag_stop_all(ct.c_bool(False))\n\n        c_ndist = ct.c_int()\n\n        # resize theory datatable\n        ft = f.data_table\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = 1\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n\n        if not self.dist_exists:\n            success = rch.request_dist(ct.byref(c_ndist))\n            self.ndist = c_ndist.value\n            if not success:  # no dist available\n                # launch dialog asking for more dist\n                self.signal_request_dist.emit(\n                    self\n                )  # use signal to open QDialog in the main GUI window\n                return\n            else:\n                self.dist_exists = True\n        ndist = self.ndist\n        # rch.react_dist[ndist].name = self.reactname #TODO: set the dist name in the C library\n        rch.react_dist[ndist].contents.M_e = Me\n        rch.react_dist[ndist].contents.monmass = monmass\n        rch.react_dist[ndist].contents.nummwdbins = nbins\n        rch.react_dist[ndist].contents.polysaved = False\n        rch.react_dist[ndist].contents.nsaved_arch = 0\n        rch.react_dist[ndist].contents.arch_minwt = self.xmin\n        rch.react_dist[ndist].contents.arch_maxwt = self.xmax\n        rch.init_bin_prio_vs_senio(ndist)\n\n        if self.simexists:\n            rch.return_dist_polys(ct.c_int(ndist))\n        # initialise tobita batch\n        rch.tobbatchstart(\n            ct.c_double(fin_conv),\n            ct.c_double(tau),\n            ct.c_double(beta),\n            ct.c_double(Cs),\n            ct.c_double(Cb),\n            ct.c_int(ndist),\n        )\n        rch.react_dist[ndist].contents.npoly = 0\n\n        c_m = ct.c_int()\n\n        # make numtomake polymers\n        i = 0\n        rate_print = np.trunc(numtomake / 20)\n        self.Qprint(""Making polymers:"")\n        self.Qprint(""0% "", end="""")\n        while i < numtomake:\n            if self.stop_theory_flag:\n                self.Qprint(\n                    ""<br><big><font color=red><b>Polymer creation stopped by user</b></font></big>""\n                )\n                break\n            # get a polymer\n            success = rch.request_poly(ct.byref(c_m))\n            m = c_m.value\n            if success:  # check availability of polymers\n                # put it in list\n\n                if (\n                    rch.react_dist[ndist].contents.npoly == 0\n                ):  # case of first polymer made\n                    rch.react_dist[ndist].contents.first_poly = m\n                    rch.set_br_poly_nextpoly(\n                        ct.c_int(m), ct.c_int(0)\n                    )  # br_poly[m].contents.nextpoly = 0\n                else:  # next polymer, put to top of list\n                    rch.set_br_poly_nextpoly(\n                        ct.c_int(m), ct.c_int(rch.react_dist[ndist].contents.first_poly)\n                    )  # br_poly[m].contents.nextpoly = rch.react_dist[ndist].contents.first_poly\n                    rch.react_dist[ndist].contents.first_poly = m\n\n                # make a polymer\n                if rch.tobbatch(\n                    ct.c_int(m), ct.c_int(ndist)\n                ):  # routine returns false if arms ran out\n                    rch.react_dist[ndist].contents.npoly += 1\n                    i += 1\n                    # check for error\n                    if rch.tb_global.tobitabatcherrorflag:\n                        self.Qprint(\n                            ""<br><big><font color=red><b>Polymers too large: gelation occurs for these parameters</b></font></big>""\n                        )\n                        i = numtomake\n                else:  # error message if we ran out of arms\n                    self.success_increase_memory = None\n                    self.signal_request_arm.emit(self)\n                    while (\n                        self.success_increase_memory is None\n                    ):  # wait for the end of QDialog\n                        time.sleep(\n                            0.5\n                        )  # TODO: find a better way to wait for the dialog thread to finish\n                    if self.success_increase_memory:\n                        continue  # back to the start of while loop\n                    else:\n                        i = numtomake\n                        rch.tb_global.tobitabatcherrorflag = True\n\n                # update on number made\n                if i % rate_print == 0:\n                    self.Qprint(""-"", end="""")\n                    # needed to use Qprint if in single-thread\n                    QApplication.processEvents()\n\n            else:  # polymer wasn\'t available\n                self.success_increase_memory = None\n                self.signal_request_polymer.emit(self)\n                while self.success_increase_memory is None:\n                    time.sleep(\n                        0.5\n                    )  # TODO: find a better way to wait for the dialog thread to finish\n                if self.success_increase_memory:\n                    continue\n                else:\n                    i = numtomake\n        # end make polymers loop\n        if not rch.tb_global.tobitabatcherrorflag:\n            self.Qprint(""&nbsp;100%"")\n\n        calc = 0\n        # do analysis of polymers made\n        if (rch.react_dist[ndist].contents.npoly >= 100) and (\n            not rch.tb_global.tobitabatcherrorflag\n        ):\n            rch.molbin(ndist)\n            # resize theory datatable\n            ft = f.data_table\n            ft = f.data_table\n            tt = self.tables[f.file_name_short]\n            tt.num_columns = ft.num_columns + 2\n            tt.num_rows = rch.react_dist[ndist].contents.nummwdbins\n            tt.data = np.zeros((tt.num_rows, tt.num_columns))\n\n            for i in range(1, rch.react_dist[ndist].contents.nummwdbins + 1):\n                tt.data[i - 1, 0] = np.power(\n                    10, rch.react_dist[ndist].contents.lgmid[i]\n                )\n                tt.data[i - 1, 1] = rch.react_dist[ndist].contents.wt[i]\n                tt.data[i - 1, 2] = rch.react_dist[ndist].contents.avg[i]\n                tt.data[i - 1, 3] = rch.react_dist[ndist].contents.avbr[i]\n\n            rch.end_print(self, ndist, self.do_priority_seniority)\n            rch.prio_and_senio(self, f, ndist, self.do_priority_seniority)\n\n            calc = rch.react_dist[ndist].contents.nummwdbins - 1\n            rch.react_dist[ndist].contents.polysaved = True\n\n        self.simexists = True\n        # self.Qprint(\n        # \'%d arm records left in memory\' % rch.pb_global.arms_left)\n        return calc\n\n    def show_theory_extras(self, checked):\n        rgt.show_theory_extras(self, checked)\n\n    def destructor(self):\n        """"""Return arms to pool""""""\n        rch.return_dist(ct.c_int(self.ndist))\n\n    def do_fit(self, line=""""):\n        """"""No fitting allowed in this theory""""""\n        if self.xrange.get_visible():\n            if self.xmin > self.xmax:\n                temp = self.xmin\n                self.xmin = self.xmax\n                self.xmax = temp\n            self.Qprint(""<b>xrange</b>=[%0.3g, %0.3g]"" % (self.xmin, self.xmax))\n        if self.yrange.get_visible():\n            if self.ymin > self.ymax:\n                temp = self.ymin\n                self.ymin = self.ymax\n                self.ymax = temp\n            self.Qprint(""<b>yrange</b>=[%.03g, %0.3g]"" % (self.ymin, self.ymax))\n\n    def do_error(self, line):\n        """"""This theory does not calculate the error""""""\n        pass\n\n\nclass CLTheoryTobitaBatch(BaseTheoryTobitaBatch, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # This class usually stays empty\n\n\nclass GUITheoryTobitaBatch(BaseTheoryTobitaBatch, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        rgt.initialise_tool_bar(self)\n\n    def theory_buttons_disabled(self, state):\n        """"""Disable/Enable some theory buttons before/after calculation start.""""""\n        rgt.theory_buttons_disabled(self, state)\n\n    def handle_save_bob_configuration(self):\n        """"""Save polymer configuraions to a file""""""\n        rgt.handle_save_bob_configuration(self)\n\n    def handle_edit_bob_settings(self):\n        """"""Open the BoB binnig settings dialog""""""\n        rgt.handle_edit_bob_settings(self)\n\n    def handle_btn_prio_senio(self, checked):\n        """"""Change do_priority_seniority""""""\n        rgt.handle_btn_prio_senio(self, checked)\n\n    def set_extra_data(self, extra_data):\n        """"""set extra data""""""\n        rgt.set_extra_data(self, extra_data)\n\n    def get_extra_data(self):\n        """"""set extra data""""""\n        rgt.get_extra_data(self)\n'"
RepTate/theories/TheoryLikhtmanMcLeish2002.py,11,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryLikhtmanMcLeish2002\n\nModule that defines the Likhtman-McLeish theory for melts of linear monodisperse entangled\npolymers.\n\n""""""\nimport os\nimport numpy as np\nfrom scipy import interp\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom PyQt5.QtWidgets import QToolBar, QLabel, QLineEdit, QMessageBox\nfrom PyQt5.QtGui import QIcon, QDoubleValidator\nfrom PyQt5.QtCore import QSize\n\n\nclass TheoryLikhtmanMcLeish2002(CmdBase):\n    """"""Fit Likhtman-McLeish theory for linear rheology of linear entangled polymers\n        \n    * **Parameters**\n       - ``tau_e`` : Rouse time of one entanglement segment (of length :math:`M_e`).\n       - ``Ge`` : Entanglement modulus.\n       - ``Me`` : Entanglement molecular weight.\n       - ``c_nu`` : Constraint release parameter.\n    """"""\n\n    thname = ""Likhtman-McLeish""\n    description = ""Likhtman-McLeish theory for linear entangled polymers""\n    citations = [""Likhtman A.E. and McLeish T.C.B., Macromolecules 2002, 35, 6332-6343""]\n    doi = [""http://dx.doi.org/10.1021/ma0200219""]\n\n    def __new__(cls, name="""", parent_dataset=None, ax=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryLikhtmanMcLeish2002(name, parent_dataset, ax)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryLikhtmanMcLeish2002(name, parent_dataset, ax)\n        )\n\n\nclass BaseTheoryLikhtmanMcLeish2002:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/LVE/Theory/theory.html#likhtman-mcleish-theory""\n    single_file = False\n    thname = TheoryLikhtmanMcLeish2002.thname\n    citations = TheoryLikhtmanMcLeish2002.citations\n    doi = TheoryLikhtmanMcLeish2002.doi\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n        self.function = self.LikhtmanMcLeish2002\n\n        self.parameters[""tau_e""] = Parameter(\n            ""tau_e"",\n            2e-6,\n            ""Rouse time of one Entanglement"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=1e-7,\n            max_value=1e2,\n        )\n        self.parameters[""Ge""] = Parameter(\n            ""Ge"",\n            1e6,\n            ""Entanglement modulus"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=1e3,\n            max_value=1e7,\n        )\n        self.parameters[""Me""] = Parameter(\n            ""Me"",\n            5,\n            ""Entanglement molecular weight"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=0.4,\n            max_value=50.0,\n        )\n        self.parameters[""c_nu""] = Parameter(\n            name=""c_nu"",\n            value=0.1,\n            description=""Constraint Release parameter"",\n            type=ParameterType.discrete_real,\n            opt_type=OptType.const,\n            discrete_values=[0, 0.01, 0.03, 0.1, 0.3, 1, 3, 10],\n        )\n        self.parameters[""linkMeGe""] = Parameter(\n            name=""linkMeGe"",\n            value=False,\n            description=""Link values of Ge & Me through rho and T"",\n            type=ParameterType.boolean,\n            opt_type=OptType.const,\n            display_flag=False,\n        )\n        self.parameters[""rho0""] = Parameter(\n            name=""rho0"",\n            value=1.0,\n            description=""Density of the polymer melt (kg/m3)"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n            display_flag=False,\n        )\n\n        dir_path = os.path.dirname(os.path.realpath(__file__))\n        f = np.load(os.path.join(dir_path, ""linlin.npz""), allow_pickle=True)\n        self.Zarray = f[""Z""]\n        self.cnuarray = f[""cnu""]\n        self.data = f[""data""]\n\n        if not self.get_material_parameters():\n            # Estimate initial values of the theory\n            w = self.parent_dataset.files[0].data_table.data[:, 0]\n            Gp = self.parent_dataset.files[0].data_table.data[:, 1]\n            Gpp = self.parent_dataset.files[0].data_table.data[:, 2]\n\n            Gpp_Gp = Gpp / Gp\n            ind = len(Gpp_Gp) - np.argmax(np.flipud(Gpp_Gp) < 0.8)\n            if ind < len(w):\n                taue = 1.0 / w[ind]\n                Ge = Gp[ind]\n                self.set_param_value(""tau_e"", taue)\n                self.set_param_value(""Ge"", Ge)\n\n    def LikhtmanMcLeish2002(self, f=None):\n        """"""Get the theory results from precalculated data""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        tt.data[:, 0] = ft.data[:, 0]\n\n        taue = self.parameters[""tau_e""].value\n        Ge = self.parameters[""Ge""].value\n        Me = self.parameters[""Me""].value\n        cnu = self.parameters[""c_nu""].value\n        rho0 = self.parameters[""rho0""].value\n        linkMeGe = self.parameters[""linkMeGe""].value\n        Mw = float(f.file_parameters[""Mw""])\n        T = float(f.file_parameters[""T""]) + 273.15\n        if linkMeGe:\n            Ge = (\n                1000.0 * rho0 * T * 8.314 / Me\n            )  # *5/4 (Pity... With this factor it works much better)\n\n        indcnu = (np.where(self.cnuarray == cnu))[0][0]\n        indcnu1 = 1 + indcnu * 2\n        indcnu2 = indcnu1 + 1\n\n        Z = Mw / Me\n        if Z < 3:\n            # self.Qprint(""WARNING: Mw of %s is too small""%(f.file_name_short))\n            Z = 3\n        if Z < self.Zarray[0]:\n            indZ0 = 0\n        else:\n            indZ0 = (np.where(self.Zarray < Z))[0][-1]\n        if Z > self.Zarray[-1]:\n            indZ1 = len(self.Zarray) - 1\n        else:\n            indZ1 = (np.where(self.Zarray > Z))[0][0]\n        table0 = self.data[indZ0]\n        table1 = self.data[indZ1]\n\n        vec = np.append(table0[:, 0], table1[:, 0])\n        vec = np.sort(vec)\n        vec = np.unique(vec)\n        table = np.zeros((len(vec), 3))\n        table[:, 0] = vec\n        w1 = (Z - self.Zarray[indZ0]) / (self.Zarray[indZ1] - self.Zarray[indZ0])\n        table[:, 1] = (1.0 - w1) * interp(\n            vec, table0[:, 0], table0[:, indcnu1]\n        ) + w1 * interp(vec, table1[:, 0], table1[:, indcnu1])\n        table[:, 2] = (1.0 - w1) * interp(\n            vec, table0[:, 0], table0[:, indcnu2]\n        ) + w1 * interp(vec, table1[:, 0], table1[:, indcnu2])\n\n        tt.data[:, 1] = interp(tt.data[:, 0], table[:, 0] / taue, Ge * table[:, 1])\n        tt.data[:, 2] = interp(tt.data[:, 0], table[:, 0] / taue, Ge * table[:, 2])\n\n    def do_error(self, line):\n        """"""Report the error of the current theory\n\nReport the error of the current theory on all the files, taking into account the current selected xrange and yrange.\n\nFile error is calculated as the mean square of the residual, averaged over all points in the file. Total error is the mean square of the residual, averaged over all points in all files.""""""\n        super().do_error(line)\n        taue = self.parameters[""tau_e""].value\n        Me = self.parameters[""Me""].value\n        tab_data = [\n            [""%-18s"" % ""File"", ""%-18s"" % ""Z"", ""%-18s"" % ""tauR"", ""%-18s"" % ""tauD""],\n        ]\n        C1 = 1.69\n        C2 = 4.17\n        C3 = -1.55\n        for f in self.theory_files():\n            Z = float(f.file_parameters[""Mw""]) / Me\n            tauR = taue * Z ** 2\n            if Z != 0:\n                tauD = (\n                    3\n                    * taue\n                    * Z ** 3\n                    * (1.0 - 2 * C1 / np.sqrt(Z) + C2 / Z + C3 / np.power(Z, 1.5))\n                )\n            else:\n                tauD = 0\n            tab_data.append(\n                [\n                    ""%-18s"" % f.file_name_short,\n                    ""%18.4g"" % Z,\n                    ""%18.4g"" % tauR,\n                    ""%    18.4g"" % tauD,\n                ]\n            )\n        self.Qprint(tab_data)\n\n\nclass CLTheoryLikhtmanMcLeish2002(BaseTheoryLikhtmanMcLeish2002, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n\nclass GUITheoryLikhtmanMcLeish2002(BaseTheoryLikhtmanMcLeish2002, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n        # add widgets specific to the theory\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n        self.linkMeGeaction = tb.addAction(\n            QIcon("":/Icon8/Images/new_icons/linkGeMe.png""), ""Link Me-Ge""\n        )\n        self.linkMeGeaction.setCheckable(True)\n        self.linkMeGeaction.setChecked(False)\n        lbl = QLabel(""<P><b>rho</b> (g/cm<sup>3</sup>)</P></br>"", self)\n        tb.addWidget(lbl)\n        self.txtrho = QLineEdit(""%.4g"" % self.parameters[""rho0""].value)\n        self.txtrho.setReadOnly(True)\n        self.txtrho.setDisabled(True)\n        dvalidator = QDoubleValidator()  # prevent letters etc.\n        dvalidator.setBottom(0)  # minimum allowed value\n        dvalidator.setTop(10)  # maximum allowed value\n        self.txtrho.setValidator(dvalidator)\n        tb.addWidget(self.txtrho)\n        self.thToolsLayout.insertWidget(0, tb)\n\n        connection_id = self.linkMeGeaction.triggered.connect(\n            self.linkMeGeaction_change\n        )\n        connection_id = self.txtrho.textEdited.connect(self.handle_txtrho_edited)\n\n    def linkMeGeaction_change(self, checked):\n        self.set_param_value(""linkMeGe"", checked)\n        if checked:\n            self.txtrho.setReadOnly(False)\n            self.txtrho.setDisabled(False)\n            p = self.parameters[""Ge""]\n            p.opt_type = OptType.const\n        else:\n            self.txtrho.setReadOnly(True)\n            self.txtrho.setDisabled(True)\n            p = self.parameters[""Ge""]\n            p.opt_type = OptType.opt\n        self.update_parameter_table()\n        if self.autocalculate:\n            self.handle_actionCalculate_Theory()\n\n    def handle_txtrho_edited(self, new_text):\n        try:\n            val = float(new_text)\n        except ValueError:\n            QMessageBox.warning(\n                self, ""Error"", \'Could not convert ""%s"" to float\' % new_text\n            )\n            self.txtrho.setText(""%.4g"" % self.parameters[""rho0""].value)\n        else:\n            self.set_param_value(""rho0"", val)\n            if self.autocalculate:\n                self.handle_actionCalculate_Theory()\n\n    def set_extra_data(self, _):\n        """"""Restore the check state of button and text value""""""\n        self.txtrho.setText(""%.4g"" % self.parameters[""rho0""].value)\n        checked = self.parameters[""linkMeGe""].value\n        self.linkMeGeaction.setChecked(checked)\n        self.linkMeGeaction_change(checked)\n'"
RepTate/theories/TheoryLogNormal.py,9,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2018): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryLogNormal\n""""""\nimport numpy as np\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\n\n\nclass TheoryLogNormal(CmdBase):\n    """"""Log-Normal distribution: the logarithm of the molecular weight is normally distributed\n    \n    * **Function**\n        .. math::\n            W(M) = W_0 \\\\frac{1}{\\\\sqrt{2\\\\pi\\\\sigma^2}} \\\\frac{1}{M} \\\\exp\\\\left[ - \\\\frac{\\\\left(\\\\ln{M}-\\\\ln{M_0}\\\\right)^2}{2\\\\sigma^2} \\\\right]\n    \n    * **Parameters**\n       - ``logW0`` :math:`\\\\equiv\\\\log_{10}(W_0)`: Normalization constant.\n       - ``logM0`` :math:`\\\\equiv\\\\log_{10}(M_0)`\n       - ``sigma`` :math:`\\\\equiv\\\\sigma`\n    """"""\n\n    thname = ""LogNormal""\n    description = ""LogNormal distribution""\n    citations = []\n    doi = []\n\n    def __new__(cls, name="""", parent_dataset=None, axarr=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryLogNormal(name, parent_dataset, axarr)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryLogNormal(name, parent_dataset, axarr)\n        )\n\n\nclass BaseTheoryLogNormal:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/MWD/Theory/theory.html#log-normal-distribution""\n    single_file = (\n        False  # False if the theory can be applied to multiple files simultaneously\n    )\n    thname = TheoryLogNormal.thname\n    citations = TheoryLogNormal.citations\n    doi = TheoryLogNormal.doi\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        self.function = self.LogNormal  # main theory function\n        self.has_modes = False  # True if the theory has modes\n        self.parameters[""logW0""] = Parameter(\n            name=""logW0"",\n            value=5,\n            description=""Normalization constant"",\n            type=ParameterType.real,\n            opt_type=OptType.opt,\n        )\n        self.parameters[""logM0""] = Parameter(\n            name=""logM0"",\n            value=5,\n            description=""Log mean molecular weight"",\n            type=ParameterType.real,\n            opt_type=OptType.opt,\n        )\n        self.parameters[""sigma""] = Parameter(\n            name=""sigma"",\n            value=1,\n            description=""Standard deviation"",\n            type=ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=0,\n        )\n\n    def LogNormal(self, f=None):\n        """"""LogNormal function""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        W0 = np.power(10.0, self.parameters[""logW0""].value)\n        M0 = np.power(10.0, self.parameters[""logM0""].value)\n        sigma = self.parameters[""sigma""].value\n\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        tt.data[:, 0] = ft.data[:, 0]\n        tt.data[:, 1] = (\n            W0\n            / sigma\n            / np.sqrt(2 * np.pi)\n            / tt.data[:, 0]\n            * np.exp(-((np.log(tt.data[:, 0]) - np.log(M0)) ** 2) / 2 / sigma ** 2)\n        )\n\n    def do_error(self, line):\n        """"""Report the error of the current theory\n\nReport the error of the current theory on all the files, taking into account the current selected xrange and yrange.\n\nFile error is calculated as the mean square of the residual, averaged over all points in the file. Total error is the mean square of the residual, averaged over all points in all files.""""""\n        super().do_error(line)\n        if line == """":\n            self.Qprint(""""""<h3>Characteristics of the fitted MWD</h3>"""""")\n            M0 = np.power(10.0, self.parameters[""logM0""].value)\n            sigma = self.parameters[""sigma""].value\n            Mn = M0 * np.exp(sigma ** 2 / 2)\n            Mw = M0 * np.exp(3 * sigma ** 2 / 2)\n            Mz = M0 * np.exp(5 * sigma ** 2 / 2)\n            # table=\'\'\'<table border=""1"" width=""100%"">\'\'\'\n            # table+=\'\'\'<tr><th>Mn</th><th>Mw</th><th>Mz</th><th>D</th></tr>\'\'\'\n            # table+=\'\'\'<tr><td>%6.3gk</td><td>%6.3gk</td><td>%6.3gk</td><td>%7.3g</td></tr>\'\'\'%(Mn / 1000, Mw / 1000, Mz/1000 , Mw/Mn)\n            # table+=\'\'\'</table><br>\'\'\'\n            table = [\n                [\n                    ""%-12s"" % ""Mn (kg/mol)"",\n                    ""%-12s"" % ""Mw (kg/mol)"",\n                    ""%-9s"" % ""Mw/Mn"",\n                    ""%-9s"" % ""Mz/Mw"",\n                ],\n            ]\n            table.append(\n                [\n                    ""%-12.3g"" % (Mn / 1000),\n                    ""%-12.3g"" % (Mw / 1000),\n                    ""%-9.3g"" % (Mw / Mn),\n                    ""%-9.3g"" % (Mz / Mw),\n                ]\n            )\n            self.Qprint(table)\n\n\nclass CLTheoryLogNormal(BaseTheoryLogNormal, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # This class usually stays empty\n\n\nclass GUITheoryLogNormal(BaseTheoryLogNormal, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # add widgets specific to the theory here:\n'"
RepTate/theories/TheoryMaxwellModes.py,64,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryMaxwellModes\n\nModule that defines theories related to Maxwell modes, in the frequency and time domains.\n\n""""""\nimport numpy as np\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.DataTable import DataTable\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom PyQt5.QtWidgets import QToolBar, QSpinBox\nfrom PyQt5.QtCore import QSize\nfrom PyQt5.QtGui import QIcon\nfrom RepTate.core.DraggableArtists import DragType, DraggableModesSeries\n\n\nclass TheoryMaxwellModesFrequency(CmdBase):\n    """"""Fit a generalized Maxwell model to a frequency dependent relaxation function. \n    \n    * **Function**\n        .. math::\n            \\\\begin{eqnarray}\n            G\'(\\\\omega) & = & \\\\sum_{1}^{n_{modes}} G_i \\\\frac{(\\\\omega\\\\tau_i)^2}{1+(\\\\omega\\\\tau_i)^2} \\\\\\\\\n            G\'\'(\\\\omega) & = & \\\\sum_{1}^{n_{modes}} G_i \\\\frac{\\\\omega\\\\tau_i}{1+(\\\\omega\\\\tau_i)^2}\n            \\\\end{eqnarray}\n    \n    * **Parameters**\n       - :math:`n_{modes}`: number of Maxwell modes equally distributed in logarithmic scale between :math:`\\\\omega_{min}` and :math:`\\\\omega_{max}`.\n       - logwmin = :math:`\\\\log(\\\\omega_{min})`: decimal logarithm of the minimum frequency.\n       - logwmax = :math:`\\\\log(\\\\omega_{max})`: decimal logarithm of the maximum frequency.\n       - logGi = :math:`\\\\log(G_{i})`: decimal logarithm of the amplitude of Maxwell mode :math:`i`.\n    \n    """"""\n    thname = ""Maxwell Modes""\n    description = ""Maxwell modes, frequency dependent""\n    citations = []\n    doi = []\n    \n    def __new__(cls, name="""", parent_dataset=None, ax=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return GUITheoryMaxwellModesFrequency(name, parent_dataset, ax) if (\n            CmdBase.mode == CmdMode.GUI) else CLTheoryMaxwellModesFrequency(\n                name, parent_dataset, ax)\n\n\nclass BaseTheoryMaxwellModesFrequency:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = \'http://reptate.readthedocs.io/manual/Applications/LVE/Theory/theory.html#maxwell-modes\'\n    single_file = True\n    thname = TheoryMaxwellModesFrequency.thname\n    citations = TheoryMaxwellModesFrequency.citations\n    doi = TheoryMaxwellModesFrequency.doi \n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n        self.function = self.MaxwellModesFrequency\n        self.has_modes = True\n        self.MAX_MODES = 40\n        self.view_modes = True\n        wmin = self.parent_dataset.minpositivecol(0)\n        wmax = self.parent_dataset.maxcol(0)\n        nmodes = int(np.round(np.log10(wmax / wmin)))\n\n        self.parameters[""logwmin""] = Parameter(\n            ""logwmin"",\n            np.log10(wmin),\n            ""Log of frequency range minimum"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=-10,\n            max_value=10)\n        self.parameters[""logwmax""] = Parameter(\n            ""logwmax"",\n            np.log10(wmax),\n            ""Log of frequency range maximum"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=-10,\n            max_value=10)\n        self.parameters[""nmodes""] = Parameter(\n            name=""nmodes"",\n            value=nmodes,\n            description=""Number of Maxwell modes"",\n            type=ParameterType.integer,\n            opt_type=OptType.const,\n            display_flag=False,\n            min_value=1,\n            max_value=self.MAX_MODES)\n        # Interpolate modes from data\n        if nmodes>1:\n            w = np.logspace(np.log10(wmin), np.log10(wmax), nmodes)\n        else:\n            w = np.logspace(np.log10(wmin), np.log10(wmin), nmodes)\n            self.parameters[""logwmax""].opt_type = OptType.const\n        G = np.abs(\n            np.interp(w, self.parent_dataset.files[0].data_table.data[:, 0],\n                      self.parent_dataset.files[0].data_table.data[:, 1]))\n        for i in range(self.parameters[""nmodes""].value):\n            self.parameters[""logG%02d"" % i] = Parameter(\n                ""logG%02d"" % i,\n                np.log10(G[i]),\n                ""Log of Mode %d amplitude"" % i,\n                ParameterType.real,\n                opt_type=OptType.opt,\n                min_value=-10,\n                max_value=10)\n\n        # GRAPHIC MODES\n        self.graphicmodes = []\n        self.artistmodes = []\n        self.setup_graphic_modes()\n\n    def set_param_value(self, name, value):\n        """"""Change other parameters when nmodes is changed, else call parent function""""""\n        if name == \'nmodes\':\n            nmodesold = self.parameters[""nmodes""].value\n            wminold = self.parameters[""logwmin""].value\n            wmaxold = self.parameters[""logwmax""].value\n            wold = np.logspace(wminold, wmaxold, nmodesold)\n            Gold = np.zeros(nmodesold)\n            for i in range(nmodesold):\n                Gold[i] = self.parameters[""logG%02d"" % i].value\n                del self.parameters[""logG%02d"" % i]\n\n            nmodesnew = int(value)\n            message, success = super().set_param_value(""nmodes"", nmodesnew)\n            if nmodesnew>1 and nmodesold==1:\n                if wminold>wmaxold:\n                    wminold, wmaxold = wmaxold, wminold\n                self.parameters[""logwmax""].opt_type = OptType.opt\n            if nmodesnew>1:\n                wnew = np.logspace(wminold, wmaxold, nmodesnew)\n                Gnew = np.interp(wnew, wold, Gold)\n            else:\n                wnew = np.logspace(wminold, wminold, nmodesnew)\n                Gnew = np.array([Gold[0]])\n                self.parameters[""logwmax""].opt_type = OptType.const\n\n            for i in range(nmodesnew):\n                self.parameters[""logG%02d"" % i] = Parameter(\n                    ""logG%02d"" % i,\n                    Gnew[i],\n                    ""Log of Mode %d amplitude"" % i,\n                    ParameterType.real,\n                    opt_type=OptType.opt,\n                    min_value=-10,\n                    max_value=10)\n            if CmdBase.mode == CmdMode.GUI:\n                self.spinbox.blockSignals(True)\n                self.spinbox.setValue(nmodesnew)\n                self.spinbox.blockSignals(False)\n        else:\n            message, success = super().set_param_value(name, value)\n        \n        return message, success\n\n    def drag_mode(self, dx, dy):\n        """"""Drag modes around""""""\n        nmodes = self.parameters[""nmodes""].value\n        if self.parent_dataset.parent_application.current_view.log_x:\n            self.set_param_value(""logwmin"", np.log10(dx[0]))\n            self.set_param_value(""logwmax"", np.log10(dx[nmodes - 1]))\n        else:\n            self.set_param_value(""logwmin"", dx[0])\n            self.set_param_value(""logwmax"", dx[nmodes - 1])\n\n        if self.parent_dataset.parent_application.current_view.log_y:\n            for i in range(nmodes):\n                self.set_param_value(""logG%02d"" % i, np.log10(dy[i]))\n        else:\n            for i in range(nmodes):\n                self.set_param_value(""logG%02d"" % i, dy[i])\n\n        self.do_calculate("""")\n        self.update_parameter_table()\n\n    def update_modes(self):\n        """"""Do nothing""""""\n        pass\n\n    def setup_graphic_modes(self):\n        """"""Setup graphic helpers""""""\n        nmodes = self.parameters[""nmodes""].value\n        if nmodes>1:\n            w = np.logspace(self.parameters[""logwmin""].value,\n                            self.parameters[""logwmax""].value, nmodes)\n        else:\n            w = np.logspace(self.parameters[""logwmin""].value,\n                            self.parameters[""logwmin""].value, nmodes)\n        G = np.zeros(nmodes)\n        for i in range(nmodes):\n            G[i] = np.power(10, self.parameters[""logG%02d"" % i].value)\n\n        self.graphicmodes = self.ax.plot(w, G)[0]\n        self.graphicmodes.set_marker(\'D\')\n        self.graphicmodes.set_linestyle(\'\')\n        self.graphicmodes.set_visible(self.view_modes)\n        self.graphicmodes.set_markerfacecolor(\'yellow\')\n        self.graphicmodes.set_markeredgecolor(\'black\')\n        self.graphicmodes.set_markeredgewidth(3)\n        self.graphicmodes.set_markersize(8)\n        self.graphicmodes.set_alpha(0.5)\n        self.artistmodes = DraggableModesSeries(\n            self.graphicmodes, DragType.special,\n            self.parent_dataset.parent_application, self.drag_mode)\n        self.plot_theory_stuff()\n\n    def destructor(self):\n        """"""Called when the theory tab is closed""""""\n        self.graphicmodes_visible(False)\n        self.ax.lines.remove(self.graphicmodes)\n\n    def show_theory_extras(self, show=False):\n        """"""Called when the active theory is changed""""""\n        if CmdBase.mode == CmdMode.GUI:\n            self.Qhide_theory_extras(show)\n        self.graphicmodes_visible(show)\n\n    def graphicmodes_visible(self, state):\n        """"""Change visibility of modes""""""\n        self.view_modes = state\n        self.graphicmodes.set_visible(self.view_modes)\n        if self.view_modes:\n            self.artistmodes.connect()\n        else:\n            self.artistmodes.disconnect()\n        # self.do_calculate("""")\n        self.parent_dataset.parent_application.update_plot()\n\n    def get_modes(self):\n        """"""Get the values of Maxwell Modes from this theory""""""\n        nmodes = self.parameters[""nmodes""].value\n        if nmodes>1:\n            freq = np.logspace(self.parameters[""logwmin""].value,\n                            self.parameters[""logwmax""].value, nmodes)\n        else:\n            freq = np.logspace(self.parameters[""logwmin""].value,\n                            self.parameters[""logwmin""].value, nmodes)\n        tau = 1.0 / freq\n        G = np.zeros(nmodes)\n        for i in range(nmodes):\n            G[i] = np.power(10, self.parameters[""logG%02d"" % i].value)\n        return tau, G, True\n\n    def MaxwellModesFrequency(self, f=None):\n        """"""Calculate the theory""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        tt.data[:, 0] = ft.data[:, 0]\n\n        nmodes = self.parameters[""nmodes""].value\n        if nmodes>1:\n            freq = np.logspace(self.parameters[""logwmin""].value,\n                               self.parameters[""logwmax""].value, nmodes)\n        else:\n            freq = np.logspace(self.parameters[""logwmin""].value,\n                               self.parameters[""logwmin""].value, nmodes)\n        tau = 1.0 / freq\n\n        for i in range(nmodes):\n            if self.stop_theory_flag:\n                break\n            wT = tt.data[:, 0] * tau[i]\n            wTsq = wT**2\n            G = np.power(10, self.parameters[""logG%02d"" % i].value)\n            tt.data[:, 1] += G * wTsq / (1 + wTsq)\n            tt.data[:, 2] += G * wT / (1 + wTsq)\n\n    def plot_theory_stuff(self):\n        """"""Plot theory helpers""""""\n        # if not self.view_modes:\n        #     return\n        data_table_tmp = DataTable(self.axarr)\n        data_table_tmp.num_columns = 3\n        nmodes = self.parameters[""nmodes""].value\n        data_table_tmp.num_rows = nmodes\n        data_table_tmp.data = np.zeros((nmodes, 3))\n        if nmodes>1:\n            freq = np.logspace(self.parameters[""logwmin""].value,\n                              self.parameters[""logwmax""].value, nmodes)\n        else:\n            freq = np.logspace(self.parameters[""logwmin""].value,\n                              self.parameters[""logwmin""].value, nmodes)\n        data_table_tmp.data[:, 0] = freq\n        for i in range(nmodes):\n            if self.stop_theory_flag:\n                break\n            data_table_tmp.data[i, 1] = data_table_tmp.data[i, 2] = np.power(\n                10, self.parameters[""logG%02d"" % i].value)\n        view = self.parent_dataset.parent_application.current_view\n        try:\n            x, y, success = view.view_proc(data_table_tmp, None)\n        except TypeError as e:\n            print(e)\n            return\n        self.graphicmodes.set_data(x, y)\n        for i in range(data_table_tmp.MAX_NUM_SERIES):\n            for nx in range(len(self.axarr)):\n                self.axarr[nx].lines.remove(data_table_tmp.series[nx][i])\n\n\nclass CLTheoryMaxwellModesFrequency(BaseTheoryMaxwellModesFrequency, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n\nclass GUITheoryMaxwellModesFrequency(BaseTheoryMaxwellModesFrequency, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n        # add widgets specific to the theory\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n        self.spinbox = QSpinBox()\n        self.spinbox.setRange(1, self.MAX_MODES)  # min and max number of modes\n        self.spinbox.setSuffix("" modes"")\n        self.spinbox.setValue(self.parameters[""nmodes""].value)  #initial value\n        tb.addWidget(self.spinbox)\n        self.modesaction = tb.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-visible.png\'), \'View modes\')\n        self.save_modes_action = tb.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-save-Maxwell.png\'),\n            ""Save Modes"")            \n        self.modesaction.setCheckable(True)\n        self.modesaction.setChecked(True)\n        self.thToolsLayout.insertWidget(0, tb)\n\n        connection_id = self.spinbox.valueChanged.connect(\n            self.handle_spinboxValueChanged)\n        connection_id = self.modesaction.triggered.connect(\n            self.modesaction_change)\n        connection_id = self.save_modes_action.triggered.connect(\n            self.save_modes)\n\n    def Qhide_theory_extras(self, state):\n        """"""Uncheck the modeaction button. Called when curent theory is changed""""""\n        self.modesaction.setChecked(state)\n\n    def modesaction_change(self, checked):\n        """"""Change visibility of modes""""""\n        self.graphicmodes_visible(checked)\n        # self.view_modes = self.modesaction.isChecked()\n        # self.graphicmodes.set_visible(self.view_modes)\n        # self.do_calculate("""")\n\n    def handle_spinboxValueChanged(self, value):\n        """"""Handle a change of the parameter \'nmodes\'""""""\n        self.set_param_value(\'nmodes\', value)\n        if self.autocalculate:\n            self.parent_dataset.handle_actionCalculate_Theory()\n        self.update_parameter_table()\n\n\n##################################################################################\n#   MAXWELL MODES TIME\n##################################################################################\n\n\nclass TheoryMaxwellModesTime(CmdBase):\n    """"""Fit a generalized Maxwell model to a time dependent relaxation function. \n    \n    * **Function**\n        .. math::\n            \\\\begin{eqnarray}\n            G(t) & = & \\\\sum_{i=1}^{n_{modes}} G_i \\\\exp (-t/\\\\tau_i)\n            \\\\end{eqnarray}\n    \n    * **Parameters**\n       - :math:`n_{modes}`: number of Maxwell modes equally distributed in logarithmic scale between :math:`\\\\omega_{min}` and :math:`\\\\omega_{max}`.\n       - logtmin = :math:`\\\\log(t_{min})`: decimal logarithm of the minimum time.\n       - logtmax = :math:`\\\\log(t_{max})`: decimal logarithm of the maximum time.\n       - logGi = :math:`\\\\log(G_{i})`: decimal logarithm of the amplitude of Maxwell mode :math:`i`.\n    \n    """"""\n    thname = ""Maxwell Modes""\n    description = ""Maxwell modes, time dependent""\n    citations = []\n\n    def __new__(cls, name="""", parent_dataset=None, ax=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return GUITheoryMaxwellModesTime(\n            name, parent_dataset,\n            ax) if (CmdBase.mode == CmdMode.GUI) else CLTheoryMaxwellModesTime(\n                name, parent_dataset, ax)\n\n\nclass BaseTheoryMaxwellModesTime:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = \'http://reptate.readthedocs.io/manual/Applications/Gt/Theory/theory.html#maxwell-modes\'\n    single_file = True\n    thname = TheoryMaxwellModesTime.thname\n    citations = TheoryMaxwellModesTime.citations\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n        self.function = self.MaxwellModesTime\n        self.has_modes = True\n        self.MAX_MODES = 40\n        self.view_modes = True\n        tmin = self.parent_dataset.minpositivecol(0)\n        tmax = self.parent_dataset.maxcol(0)\n        nmodes = int(np.round(np.log10(tmax / tmin)))\n\n        self.parameters[""logtmin""] = Parameter(\n            ""logtmin"",\n            np.log10(tmin),\n            ""Log of time range minimum"",\n            ParameterType.real,\n            opt_type=OptType.opt)\n        self.parameters[""logtmax""] = Parameter(\n            ""logtmax"",\n            np.log10(tmax),\n            ""Log of time range maximum"",\n            ParameterType.real,\n            opt_type=OptType.opt)\n        self.parameters[""nmodes""] = Parameter(\n            name=""nmodes"",\n            value=nmodes,\n            description=""Number of Maxwell modes"",\n            type=ParameterType.integer,\n            opt_type=OptType.const,\n            display_flag=False)\n        # Interpolate modes from data\n        if nmodes>1:\n            tau = np.logspace(np.log10(tmin), np.log10(tmax), nmodes)\n        else:\n            tau = np.logspace(np.log10(tmax), np.log10(tmax), nmodes)\n            self.parameters[""logtmin""].opt_type = OptType.const\n        G = np.abs(\n            np.interp(tau, self.parent_dataset.files[0].data_table.data[:, 0],\n                      self.parent_dataset.files[0].data_table.data[:, 1]))\n        for i in range(self.parameters[""nmodes""].value):\n            self.parameters[""logG%02d"" % i] = Parameter(\n                ""logG%02d"" % i,\n                np.log10(G[i]),\n                ""Log of Mode %d amplitude"" % i,\n                ParameterType.real,\n                opt_type=OptType.opt)\n\n        # GRAPHIC MODES\n        self.graphicmodes = None\n        self.artistmodes = None\n        self.setup_graphic_modes()\n\n    def set_param_value(self, name, value):\n        """"""Change other parameters when nmodes is changed, else call parent function""""""\n        if name == \'nmodes\':\n            nmodesold = self.parameters[""nmodes""].value\n            tminold = self.parameters[""logtmin""].value\n            tmaxold = self.parameters[""logtmax""].value\n            tauold = np.logspace(tminold, tmaxold, nmodesold)\n            Gold = np.zeros(nmodesold)\n            for i in range(nmodesold):\n                Gold[i] = self.parameters[""logG%02d"" % i].value\n                del self.parameters[""logG%02d"" % i]\n\n            nmodesnew = value\n            message, success = super().set_param_value(""nmodes"", nmodesnew)\n            if nmodesnew>1 and nmodesold==1:\n                if tauminold>taumaxold:\n                    tauminold, taumaxold = taumaxold, tauminold\n                self.parameters[""logtmin""].opt_type = OptType.opt\n            if (nmodesnew > 1):\n                taunew = np.logspace(tminold, tmaxold, nmodesnew)\n                Gnew = np.interp(taunew, tauold, Gold)\n            else:\n                taunew = 10.0**np.array([tmaxold])\n                Gnew = np.array([Gold[-1]])\n                self.parameters[""logtmin""].opt_type = OptType.const\n\n            for i in range(nmodesnew):\n                self.parameters[""logG%02d"" % i] = Parameter(\n                    ""logG%02d"" % i,\n                    Gnew[i],\n                    ""Log of Mode %d amplitude"" % i,\n                    ParameterType.real,\n                    opt_type=OptType.opt,\n                    min_value=-10,\n                    max_value=10)\n            if CmdBase.mode == CmdMode.GUI:\n                self.spinbox.setValue(value)\n        else:\n            message, success = super().set_param_value(name, value)\n        \n        return message, success\n\n    def drag_mode(self, dx, dy):\n        """"""Drag modes around""""""\n        nmodes = self.parameters[""nmodes""].value\n        self.set_param_value(""logtmin"", dx[0])\n        self.set_param_value(""logtmax"", dx[nmodes - 1])\n        for i in range(nmodes):\n            self.set_param_value(""logG%02d"" % i, dy[i])\n        self.do_calculate("""")\n        self.update_parameter_table()\n\n    def update_modes(self):\n        """"""Do nothing""""""\n        pass\n\n    def setup_graphic_modes(self):\n        """"""setup graphic helpers""""""\n        nmodes = self.parameters[""nmodes""].value\n        if nmodes>1:\n            tau = np.logspace(self.parameters[""logtmin""].value,\n                              self.parameters[""logtmax""].value, nmodes)\n        else:\n            tau = np.logspace(self.parameters[""logtmax""].value,\n                              self.parameters[""logtmax""].value, nmodes)\n        G = np.zeros(nmodes)\n        for i in range(nmodes):\n            G[i] = np.power(10, self.parameters[""logG%02d"" % i].value)\n\n        self.graphicmodes = self.ax.plot(tau, G)[0]\n        self.graphicmodes.set_marker(\'D\')\n        self.graphicmodes.set_linestyle(\'\')\n        self.graphicmodes.set_visible(self.view_modes)\n        self.graphicmodes.set_markerfacecolor(\'yellow\')\n        self.graphicmodes.set_markeredgecolor(\'black\')\n        self.graphicmodes.set_markeredgewidth(3)\n        self.graphicmodes.set_markersize(8)\n        self.graphicmodes.set_alpha(0.5)\n        self.artistmodes = DraggableModesSeries(\n            self.graphicmodes, DragType.special,\n            self.parent_dataset.parent_application, self.drag_mode)\n        self.plot_theory_stuff()\n\n    def destructor(self):\n        """"""Called when the theory tab is closed""""""\n        self.graphicmodes_visible(False)\n        self.ax.lines.remove(self.graphicmodes)\n\n    def show_theory_extras(self, show=False):\n        """"""Called when the active theory is changed""""""\n        if CmdBase.mode == CmdMode.GUI:\n            self.Qhide_theory_extras(show)\n        self.graphicmodes_visible(show)\n\n    def graphicmodes_visible(self, state):\n        """"""Change visibility of modes""""""\n        self.view_modes = state\n        self.graphicmodes.set_visible(self.view_modes)\n        if self.view_modes:\n            self.artistmodes.connect()\n        else:\n            self.artistmodes.disconnect()\n        # self.do_calculate("""")\n        self.parent_dataset.parent_application.update_plot()\n\n    def get_modes(self):\n        """"""Get the values of Maxwell Modes from this theory""""""\n        nmodes = self.parameters[""nmodes""].value\n        if nmodes>1:\n            tau = np.logspace(self.parameters[""logtmin""].value,\n                              self.parameters[""logtmax""].value, nmodes)\n        else:\n            tau = np.logspace(self.parameters[""logtmax""].value,\n                              self.parameters[""logtmax""].value, nmodes)\n        G = np.zeros(nmodes)\n        for i in range(nmodes):\n            G[i] = np.power(10, self.parameters[""logG%02d"" % i].value)\n        return tau, G, True\n\n    def MaxwellModesTime(self, f=None):\n        """"""Calculate the theory""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        tt.data[:, 0] = ft.data[:, 0]\n\n        try:\n            gamma = float(f.file_parameters[""gamma""])\n            if (gamma==0):\n                gamma=1\n        except:\n            gamma = 1\n\n        nmodes = self.parameters[""nmodes""].value\n        if nmodes>1:\n            tau = np.logspace(self.parameters[""logtmin""].value,\n                              self.parameters[""logtmax""].value, nmodes)\n        else:\n            tau = np.logspace(self.parameters[""logtmax""].value,\n                              self.parameters[""logtmax""].value, nmodes)\n\n        for i in range(nmodes):\n            if self.stop_theory_flag:\n                break\n            expT_tau = np.exp(-tt.data[:, 0] / tau[i])\n            G = np.power(10, self.parameters[""logG%02d"" % i].value)\n            tt.data[:, 1] += G * expT_tau * gamma\n\n    def plot_theory_stuff(self):\n        """"""Plot theory helpers""""""\n        if not self.view_modes:\n            return\n        data_table_tmp = DataTable(self.axarr)\n        data_table_tmp.num_columns = 2\n        nmodes = self.parameters[""nmodes""].value\n        data_table_tmp.num_rows = nmodes\n        data_table_tmp.data = np.zeros((nmodes, 2))\n        if nmodes>1:\n            tau = np.logspace(self.parameters[""logtmin""].value,\n                            self.parameters[""logtmax""].value, nmodes)\n        else:\n            tau = np.logspace(self.parameters[""logtmax""].value,\n                            self.parameters[""logtmax""].value, nmodes)\n        data_table_tmp.data[:, 0] = tau\n        for i in range(nmodes):\n            if self.stop_theory_flag:\n                break\n            data_table_tmp.data[i, 1] = np.power(\n                10, self.parameters[""logG%02d"" % i].value)\n        view = self.parent_dataset.parent_application.current_view\n        try:\n            x, y, success = view.view_proc(data_table_tmp, None)\n        except TypeError as e:\n            print(e)\n            return\n        self.graphicmodes.set_data(x, y)\n        for i in range(data_table_tmp.MAX_NUM_SERIES):\n            for nx in range(len(self.axarr)):\n                self.axarr[nx].lines.remove(data_table_tmp.series[nx][i])\n\n\nclass CLTheoryMaxwellModesTime(BaseTheoryMaxwellModesTime, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n\nclass GUITheoryMaxwellModesTime(BaseTheoryMaxwellModesTime, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n        # add widgets specific to the theory\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n        self.spinbox = QSpinBox()\n        self.spinbox.setRange(1, self.MAX_MODES)  # min and max number of modes\n        self.spinbox.setSuffix("" modes"")\n        self.spinbox.setValue(self.parameters[""nmodes""].value)  #initial value\n        tb.addWidget(self.spinbox)\n        self.modesaction = tb.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-visible.png\'), \'View modes\')\n        self.save_modes_action = tb.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-save-Maxwell.png\'),\n            ""Save Modes"")            \n        self.modesaction.setCheckable(True)\n        self.modesaction.setChecked(True)\n        self.thToolsLayout.insertWidget(0, tb)\n\n        connection_id = self.spinbox.valueChanged.connect(\n            self.handle_spinboxValueChanged)\n        connection_id = self.modesaction.triggered.connect(\n            self.modesaction_change)\n        connection_id = self.save_modes_action.triggered.connect(\n            self.save_modes)\n\n    def Qhide_theory_extras(self, state):\n        """"""Uncheck the modeaction button. Called when curent theory is changed""""""\n        self.modesaction.setChecked(state)\n\n    def modesaction_change(self, checked):\n        """"""Change visibility of modes""""""\n        self.graphicmodes_visible(checked)\n        # self.view_modes = self.modesaction.isChecked()\n        # self.graphicmodes.set_visible(self.view_modes)\n        # if self.view_modes:\n        #     self.artistmodes.connect()\n        # else:\n        #     self.artistmodes.disconnect()\n        # self.do_calculate("""")\n\n    def handle_spinboxValueChanged(self, value):\n        """"""Handle a change of the parameter \'nmodes\'""""""\n        self.set_param_value(\'nmodes\', value)\n        if self.autocalculate:\n            self.parent_dataset.handle_actionCalculate_Theory()\n        self.update_parameter_table()\n'"
RepTate/theories/TheoryMultiMetCSTR.py,6,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#     Daniel Read, d.j.read@leeds.ac.uk\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryMultiMetCSTR\n\n""""""\nimport numpy as np\nimport time\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom PyQt5.QtCore import pyqtSignal\nfrom PyQt5.QtWidgets import QApplication\n\nimport ctypes as ct\nimport RepTate.theories.react_ctypes_helper as rch\nimport RepTate.theories.react_gui_tools as rgt\n\n\nclass TheoryMultiMetCSTR(CmdBase):\n    """"""THEORY DOCUMENTATION IS MISSING""""""\n\n    thname = ""Multi-Met CSTR""\n    description = ""Multiple Metallocene CSTR Reaction Theory""\n    citations = [""Read D.J. and Soares J.B.P., Macromolecules 2003, 36, 10037\xe2\x80\x9310051""]\n    doi = [""http://dx.doi.org/10.1021/ma030354l""]\n\n    def __new__(cls, name="""", parent_dataset=None, axarr=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryMultiMetCSTR(name, parent_dataset, axarr)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryMultiMetCSTR(name, parent_dataset, axarr)\n        )\n\n\nclass BaseTheoryMultiMetCSTR:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/React/Theory/MetalloceneCSTR.html""\n    single_file = (\n        True  # False if the theory can be applied to multiple files simultaneously\n    )\n    thname = TheoryMultiMetCSTR.thname\n    citations = TheoryMultiMetCSTR.citations\n    doi = TheoryMultiMetCSTR.doi\n\n    signal_request_dist = pyqtSignal(object)\n    signal_request_polymer = pyqtSignal(object)\n    signal_request_arm = pyqtSignal(object)\n    signal_mulmet_dialog = pyqtSignal(object)\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        self.reactname = ""MultiMetCSTR %d"" % (rch.MMCSTR_global.mulmetCSTRnumber)\n        rch.MMCSTR_global.mulmetCSTRnumber += 1\n        self.function = self.Calc\n        self.simexists = False\n        self.dist_exists = False\n        self.ndist = 0\n        self.has_modes = False  # True if the theory has modes\n        self.autocalculate = False\n        self.do_priority_seniority = False\n\n        self.parameters[""num_to_make""] = Parameter(\n            name=""num_to_make"",\n            value=1000,\n            description=""Number of molecules made in the simulation"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""mon_mass""] = Parameter(\n            name=""mon_mass"",\n            value=28,\n            description=""Mass, in a.m.u., of a monomer (usually set to 28 for PE)"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""Me""] = Parameter(\n            name=""Me"",\n            value=1000,\n            description=""Entanglement molecular weight"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""nbin""] = Parameter(\n            name=""nbin"",\n            value=50,\n            description=""Number of molecular weight bins"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.NUMCAT_MAX = 30\n        # default parameters value\n        self.init_param_values()\n\n        self.signal_request_dist.connect(rgt.request_more_dist)\n        self.signal_request_polymer.connect(rgt.request_more_polymer)\n        self.signal_request_arm.connect(rgt.request_more_arm)\n        self.signal_mulmet_dialog.connect(rgt.launch_mulmet_dialog)\n        self.do_xrange("""", visible=self.xrange.get_visible())\n\n    def request_stop_computations(self):\n        """"""Called when user wants to terminate the current computation""""""\n        rch.set_flag_stop_all(ct.c_bool(True))\n        super().request_stop_computations()\n\n    def set_extra_data(self, extra_data):\n        """"""Called when loading a project, set saved parameter values""""""\n        self.numcat = extra_data[""numcat""]\n        self.time_const = extra_data[""time_const""]\n        self.monomer_conc = extra_data[""monomer_conc""]\n        self.pvalues = extra_data[""pvalues""]\n        rgt.set_extra_data(self, extra_data)\n\n    def get_extra_data(self):\n        """"""Called when saving project. Save parameters in extra_data dict""""""\n        self.extra_data[""numcat""] = self.numcat\n        self.extra_data[""time_const""] = self.time_const\n        self.extra_data[""monomer_conc""] = self.monomer_conc\n        self.extra_data[""pvalues""] = self.pvalues\n        rgt.get_extra_data(self)\n\n    def init_param_values(self):\n        """"""Initialise parameters with default values""""""\n        self.numcat = 2\n        self.time_const = 300.0\n        self.monomer_conc = 2.0\n\n        self.pvalues = [\n            [""0"" for j in range(5)] for i in range(self.NUMCAT_MAX)\n        ]  # initially self.numcat=2 lines of parameters\n        self.pvalues[0][0] = ""4e-4""  # cat conc\n        self.pvalues[0][1] = ""101.1""  # Kp\n        self.pvalues[0][2] = ""0.1""  # K=\n        self.pvalues[0][3] = ""0.2""  # Ks\n        self.pvalues[0][4] = ""5""  # KpLCB\n\n        self.pvalues[1][0] = ""1e-3""\n        self.pvalues[1][1] = ""90.17""\n        self.pvalues[1][2] = ""1.5""\n        self.pvalues[1][3] = ""0.3""\n\n    def Calc(self, f=None):\n        """"""MultiMetCSTR function that returns the square of y""""""\n\n        # get parameters\n        numtomake = np.round(self.parameters[""num_to_make""].value)\n        monmass = self.parameters[""mon_mass""].value\n        Me = self.parameters[""Me""].value\n        nbins = int(np.round(self.parameters[""nbin""].value))\n        rch.set_do_prio_senio(ct.c_bool(self.do_priority_seniority))\n        rch.set_flag_stop_all(ct.c_bool(False))\n\n        c_ndist = ct.c_int()\n\n        # resize theory datatable\n        ft = f.data_table\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = 1\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n\n        # request a dist\n        if not self.dist_exists:\n            success = rch.request_dist(ct.byref(c_ndist))\n            self.ndist = c_ndist.value\n            if not success:\n                # launch dialog asking for more dist\n                self.signal_request_dist.emit(\n                    self\n                )  # use signal to open QDialog in the main GUI window\n                return\n            else:\n                self.dist_exists = True\n        ndist = self.ndist\n        # rch.react_dist[ndist].contents.name = self.reactname #TODO: set the dist name in the C library\n        rch.react_dist[ndist].contents.npoly = 0\n        rch.react_dist[ndist].contents.M_e = Me\n        rch.react_dist[ndist].contents.monmass = monmass\n        rch.react_dist[ndist].contents.nummwdbins = nbins\n        rch.react_dist[ndist].contents.polysaved = False\n        rch.react_dist[ndist].contents.nsaved_arch = 0\n        rch.react_dist[ndist].contents.arch_minwt = self.xmin\n        rch.react_dist[ndist].contents.arch_maxwt = self.xmax\n        rch.init_bin_prio_vs_senio(ndist)\n\n        if self.simexists:\n            rch.return_dist_polys(ct.c_int(ndist))\n        self.simexists = False\n\n        # launch form\n        self.success_dialog = None\n        self.signal_mulmet_dialog.emit(self)\n        while self.success_dialog is None:  # wait for the end of QDialog\n            time.sleep(\n                0.5\n            )  # TODO: find a better way to wait for the dialog thread to finish\n        if not self.success_dialog:\n            return\n\n        conc = (ct.c_double * self.numcat)()\n        kp = (ct.c_double * self.numcat)()\n        kdb = (ct.c_double * self.numcat)()\n        ks = (ct.c_double * self.numcat)()\n        kplcb = (ct.c_double * self.numcat)()\n        for i in range(self.numcat):\n            conc[i] = ct.c_double(float(self.pvalues[i][0]))\n            kp[i] = ct.c_double(float(self.pvalues[i][1]))\n            kdb[i] = ct.c_double(float(self.pvalues[i][2]))\n            ks[i] = ct.c_double(float(self.pvalues[i][3]))\n            kplcb[i] = ct.c_double(float(self.pvalues[i][4]))\n\n        # initialise metallocene CSTR\n        rch.mulmetCSTRstart(\n            kp,\n            kdb,\n            ks,\n            kplcb,\n            conc,\n            ct.c_double(self.time_const),\n            ct.c_double(self.monomer_conc),\n            ct.c_int(self.numcat),\n            ct.c_int(ndist),\n            ct.c_int(self.NUMCAT_MAX),\n        )\n\n        c_m = ct.c_int()\n\n        # make numtomake polymers\n        i = 0\n        rate_print = np.trunc(numtomake / 20)\n        self.Qprint(""Making polymers:"")\n        self.Qprint(""0% "", end="""")\n        while i < numtomake:\n            if self.stop_theory_flag:\n                self.Qprint(\n                    ""<br><big><font color=red><b>Polymer creation stopped by user</b></font></big>""\n                )\n                break\n            # get a polymer\n            success = rch.request_poly(ct.byref(c_m))\n            m = c_m.value\n            if success:  # check availability of polymers\n                # put it in list\n                if (\n                    rch.react_dist[ndist].contents.npoly == 0\n                ):  # case of first polymer made\n                    rch.react_dist[ndist].contents.first_poly = m\n                    rch.set_br_poly_nextpoly(\n                        ct.c_int(m), ct.c_int(0)\n                    )  # br_poly[m].contents.nextpoly = 0\n                else:  # next polymer, put to top of list\n                    rch.set_br_poly_nextpoly(\n                        ct.c_int(m), ct.c_int(rch.react_dist[ndist].contents.first_poly)\n                    )  # br_poly[m].contents.nextpoly = rch.react_dist[ndist].contents.first_poly\n                    rch.react_dist[ndist].contents.first_poly = m\n\n                # make a polymer\n                if rch.mulmetCSTR(\n                    ct.c_int(m), ct.c_int(ndist)\n                ):  # routine returns false if arms ran out\n                    rch.react_dist[ndist].contents.npoly += 1\n                    i += 1\n                    # check for error\n                    if rch.MMCSTR_global.mulmetCSTRerrorflag:\n                        self.Qprint(\n                            ""<br><big><font color=red><b>Polymers too large: gelation occurs for these parameters</b></font></big>""\n                        )\n                        i = numtomake\n                else:  # error message if we ran out of arms\n                    self.success_increase_memory = None\n                    self.signal_request_arm.emit(self)\n                    while (\n                        self.success_increase_memory is None\n                    ):  # wait for the end of QDialog\n                        time.sleep(\n                            0.5\n                        )  # TODO: find a better way to wait for the dialog thread to finish\n                    if self.success_increase_memory:\n                        continue  # back to the start of while loop\n                    else:\n                        i = numtomake\n                        rch.MMCSTR_global.mulmetCSTRerrorflag = True\n\n                # update on number made\n                if i % rate_print == 0:\n                    self.Qprint(""-"", end="""")\n                    # needed to use Qprint if in single-thread\n                    QApplication.processEvents()\n\n            else:  # polymer wasn\'t available\n                self.success_increase_memory = None\n                self.signal_request_polymer.emit(self)\n                while self.success_increase_memory is None:\n                    time.sleep(\n                        0.5\n                    )  # TODO: find a better way to wait for the dialog thread to finish\n                if self.success_increase_memory:\n                    continue\n                else:\n                    i = numtomake\n        # end make polymers loop\n        if not rch.MMCSTR_global.mulmetCSTRerrorflag:\n            self.Qprint(""&nbsp;100%"")\n\n        calc = 0\n        # do analysis of polymers made\n        if (rch.react_dist[ndist].contents.npoly >= 100) and (\n            not rch.MMCSTR_global.mulmetCSTRerrorflag\n        ):\n            rch.molbin(ndist)\n            ft = f.data_table\n\n            # resize theory data table\n            ft = f.data_table\n            tt = self.tables[f.file_name_short]\n            tt.num_columns = ft.num_columns + 2\n            tt.num_rows = rch.react_dist[ndist].contents.nummwdbins\n            tt.data = np.zeros((tt.num_rows, tt.num_columns))\n\n            for i in range(1, rch.react_dist[ndist].contents.nummwdbins + 1):\n                tt.data[i - 1, 0] = np.power(\n                    10, rch.react_dist[ndist].contents.lgmid[i]\n                )\n                tt.data[i - 1, 1] = rch.react_dist[ndist].contents.wt[i]\n                tt.data[i - 1, 2] = rch.react_dist[ndist].contents.avg[i]\n                tt.data[i - 1, 3] = rch.react_dist[ndist].contents.avbr[i]\n\n            rch.end_print(self, ndist, self.do_priority_seniority)\n            rch.prio_and_senio(self, f, ndist, self.do_priority_seniority)\n\n            calc = rch.react_dist[ndist].contents.nummwdbins - 1\n            rch.react_dist[ndist].contents.polysaved = True\n\n        self.simexists = True\n        # self.Qprint(\'%d arm records left in memory\' % rch.pb_global.arms_left)\n        return calc\n\n    def show_theory_extras(self, checked):\n        rgt.show_theory_extras(self, checked)\n\n    def destructor(self):\n        """"""Return arms to pool""""""\n        rch.return_dist(ct.c_int(self.ndist))\n\n    def do_fit(self, line=""""):\n        """"""No fitting allowed in this theory""""""\n        if self.xrange.get_visible():\n            if self.xmin > self.xmax:\n                temp = self.xmin\n                self.xmin = self.xmax\n                self.xmax = temp\n            self.Qprint(""<b>xrange</b>=[%0.3g, %0.3g]"" % (self.xmin, self.xmax))\n        if self.yrange.get_visible():\n            if self.ymin > self.ymax:\n                temp = self.ymin\n                self.ymin = self.ymax\n                self.ymax = temp\n            self.Qprint(""<b>yrange</b>=[%.03g, %0.3g]"" % (self.ymin, self.ymax))\n\n    def do_error(self, line):\n        """"""This theory does not calculate the error""""""\n        pass\n\n\nclass CLTheoryMultiMetCSTR(BaseTheoryMultiMetCSTR, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # This class usually stays empty\n\n\nclass GUITheoryMultiMetCSTR(BaseTheoryMultiMetCSTR, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        rgt.initialise_tool_bar(self)\n\n    def theory_buttons_disabled(self, state):\n        """"""Disable/Enable some theory buttons before/after calculation start.""""""\n        rgt.theory_buttons_disabled(self, state)\n\n    def handle_save_bob_configuration(self):\n        """"""Save polymer configuraions to a file""""""\n        rgt.handle_save_bob_configuration(self)\n\n    def handle_edit_bob_settings(self):\n        """"""Open the BoB binnig settings dialog""""""\n        rgt.handle_edit_bob_settings(self)\n\n    def handle_btn_prio_senio(self, checked):\n        """"""Change do_priority_seniority""""""\n        rgt.handle_btn_prio_senio(self, checked)\n'"
RepTate/theories/TheoryPETS.py,20,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryPETS\n\nModule for the PETS theory for the non-linear flow of entangled polymers.\n\n""""""\nimport numpy as np\nfrom scipy.integrate import odeint\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom RepTate.core.DataTable import DataTable\nfrom PyQt5.QtWidgets import QToolBar, QToolButton, QMenu\nfrom PyQt5.QtCore import QSize\nfrom PyQt5.QtGui import QIcon\nfrom PyQt5.QtCore import Qt\nfrom RepTate.gui.Theory_rc import *\nfrom RepTate.core.Theory import EndComputationRequested\nfrom RepTate.theories.theory_helpers import FlowMode\n\n\nclass TheoryPETS(CmdBase):\n    """"""Preaveraged model for Entangled Telechelic Star polymers: This theory is intended for the prediction of non-linear transient flows of \nentangled telechelic (with sticky functional groups at the chain-ends) star polymers. \n\n    * **Parameters**\n       - ``G`` : Plateau Modulus\n       - ``tauD`` : Orientation relaxation time\n       - ``tauS`` : Stretch Relxation time\n       - ``tau_as`` : Typical time the sticker spends associated\n       - ``tau_free`` : Typical time the sticker spends free\n       - ``lmax`` : Maximum extensibility\n       - ``beta`` : CCR coefficient\n       - ``delta`` : CCR exponent\n       - ``Z`` : Entanglement number\n       - ``r_a`` : Ratio of sticker size to tube diameter\n    """"""\n\n    thname = ""PETS""\n    description = ""Preaveraged model for entangled telechelic star polymers""\n    citations = [""Boudara, V.A.H, and D.J. Read, J. Rheol., 61, 339-362 (2017)""]\n    doi = [""http://dx.doi.org/10.1122/1.4974908""]\n\n    def __new__(cls, name="""", parent_dataset=None, ax=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryPETS(name, parent_dataset, ax)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryPETS(name, parent_dataset, ax)\n        )\n\n\nclass BaseTheoryPETS:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/NLVE/Theory/theory.html#PETS-equation""\n    single_file = False\n    thname = TheoryPETS.thname\n    citations = TheoryPETS.citations\n    doi = TheoryPETS.doi\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        self.function = self.PETS\n        self.has_modes = True\n        EPSILON = np.finfo(float).resolution\n        self.parameters[""G""] = Parameter(\n            name=""G"",\n            value=1000.0,\n            description=""Plateau Modulus"",\n            type=ParameterType.real,\n            opt_type=OptType.nopt,\n            min_value=0,\n        )\n        self.parameters[""tauD""] = Parameter(\n            name=""tauD"",\n            value=100.0,\n            description=""Orientation relaxation time"",\n            type=ParameterType.real,\n            opt_type=OptType.nopt,\n            min_value=EPSILON,\n        )\n        self.parameters[""tauS""] = Parameter(\n            name=""tauS"",\n            value=1,\n            description=""Stretch Relxation time"",\n            type=ParameterType.real,\n            opt_type=OptType.nopt,\n            min_value=EPSILON,\n        )\n        self.parameters[""tau_as""] = Parameter(\n            name=""tau_as"",\n            value=1e2,\n            description=""Typical time the sticker spends associated"",\n            type=ParameterType.real,\n            opt_type=OptType.nopt,\n            min_value=EPSILON,\n        )\n        self.parameters[""tau_free""] = Parameter(\n            name=""tau_free"",\n            value=1e-2,\n            description=""Typical time the sticker spends free"",\n            type=ParameterType.real,\n            opt_type=OptType.nopt,\n            min_value=EPSILON,\n        )\n        self.parameters[""lmax""] = Parameter(\n            name=""lmax"",\n            value=10.0,\n            description=""Maximum extensibility"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n            display_flag=True,\n            min_value=1.01,\n        )\n        self.parameters[""beta""] = Parameter(\n            name=""beta"",\n            value=1,\n            description=""CCR coefficient"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n            min_value=0,\n            max_value=2,\n        )\n        self.parameters[""delta""] = Parameter(\n            name=""delta"",\n            value=-0.5,\n            description=""CCR exponent"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""Z""] = Parameter(\n            name=""Z"",\n            value=10,\n            description=""Entanglement number"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n            min_value=1,\n        )\n        self.parameters[""r_a""] = Parameter(\n            name=""r_a"",\n            value=0.01,\n            description=""Ratio of sticker size to tube diameter"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n            min_value=EPSILON,\n        )\n\n        self.view_LVEenvelope = False\n        auxseries = self.ax.plot([], [], label="""")\n        self.LVEenvelopeseries = auxseries[0]\n        self.LVEenvelopeseries.set_marker("""")\n        self.LVEenvelopeseries.set_linestyle(""--"")\n        self.LVEenvelopeseries.set_visible(self.view_LVEenvelope)\n        self.LVEenvelopeseries.set_color(""green"")\n        self.LVEenvelopeseries.set_linewidth(5)\n        self.LVEenvelopeseries.set_label("""")\n\n        self.MAX_MODES = 40\n        self.init_flow_mode()\n\n    def set_extra_data(self, extra_data):\n        """"""Set extra data when loading project""""""\n        pass\n\n    def get_extra_data(self):\n        """"""Set extra_data when saving project""""""\n        pass\n\n    def init_flow_mode(self):\n        """"""Find if data files are shear or extension""""""\n        try:\n            f = self.theory_files()[0]\n            if f.file_type.extension == ""shear"":\n                self.flow_mode = FlowMode.shear\n            else:\n                self.flow_mode = FlowMode.uext\n        except Exception as e:\n            print(""in RP init:"", e)\n            self.flow_mode = FlowMode.shear  # default mode: shear\n\n    def destructor(self):\n        """"""Called when the theory tab is closed""""""\n        self.extra_graphic_visible(False)\n        self.ax.lines.remove(self.LVEenvelopeseries)\n\n    def show_theory_extras(self, show=False):\n        """"""Called when the active theory is changed""""""\n        if CmdBase.mode == CmdMode.GUI:\n            self.Qhide_theory_extras(show)\n        # self.extra_graphic_visible(self.linearenvelope.isChecked())\n\n    def extra_graphic_visible(self, state):\n        """"""Change visibility of graphic helpers""""""\n        self.LVEenvelopeseries.set_visible(state)\n        self.parent_dataset.parent_application.update_plot()\n\n    def get_modes(self):\n        """"""Get the values of Maxwell Modes from this theory""""""\n        tau = np.zeros(1)\n        G = np.zeros(1)\n        tau[0] = self.parameters[""tauD""].value\n        G[0] = self.parameters[""G""].value\n        return tau, G, True\n\n    def sigmadot_shear(self, vec, t, p):\n        """"""PETS differential equation under *shear* flow\n        with stretching and finite extensibility if selected""""""\n        if self.stop_theory_flag:\n            raise EndComputationRequested\n        f, ldeq, QAxx, QAyy, QAxy, QDxx, QDyy, QDxy = vec\n        Z, r_a, lmax, tauD, tauS, tau_as, tau_free, beta, delta, gammadot = p\n\n        # Create the vector with the time derivative of sigma\n\n        lm2 = lmax ** 2\n        trQA = QAxx + 2 * QAyy\n        trQD = QDxx + 2 * QDyy\n        la = ((lm2 * trQA) / (3 * lm2 - 3 + trQA)) ** 0.5\n        ld = ((lm2 * trQD) / (3 * lm2 - 3 + trQD)) ** 0.5\n        fenela = (3 * lm2 - 3 + trQA) / (3 * lm2)\n        feneld = (3 * lm2 - 3 + trQD) / (3 * lm2)\n        feneEq = (1 - 1 / lm2) / (1 - ldeq ** 2 / lm2)\n\n        r_freeas = 1 / tau_free\n        r_asfree = (\n            1\n            / tau_as\n            * (\n                (1 - la ** 2 / lm2)\n                / (1 - 1 / lm2 * (la - r_a / Z) ** 2)\n                * (1 - (1 - r_a / Z) / lm2)\n                / (1 - 1 / lm2)\n            )\n            ** (-1.5 * Z * lm2 * (1 - 1 / lm2))\n        )\n        if r_asfree > self.RD_MAX:\n            r_asfree = self.RD_MAX\n        nu = 2 * (1 - f) * (1 - 1 / ldeq) / tauS * feneEq + f * r_asfree * 2 * (\n            la - ld\n        ) / (la + ld)\n        ###\n        gxx = 2 * gammadot * QAxy - beta * nu * (QAxx - fenela) / la\n        gyy = -beta * nu * (QAyy - fenela) / la\n        gxy = gammadot * QAyy - beta * nu * QAyy / la\n        trg_lm = (gxx + 2 * gyy) / (3 * lm2 - 3)\n\n        dQAxx = gxx + trg_lm * QAxx + r_freeas * (1 - f) / f * (QDxx - QAxx)\n        dQAyy = gyy + trg_lm * QAyy + r_freeas * (1 - f) / f * (QDyy - QAyy)\n        dQAxy = gxy + trg_lm * QAxy + r_freeas * (1 - f) / f * (QDxy - QAxy)\n\n        #####\n        hxx = (\n            2 * gammadot * QDxy\n            - beta * nu * (QDxx - feneld) / ld\n            - (QDxx - feneld) / tauD\n            - 2 * (1 - 1 / ld) / tauS * feneld * QDxx\n        )\n        hyy = (\n            -beta * nu * (QDyy - feneld) / ld\n            - (QDyy - feneld) / tauD\n            - 2 * (1 - 1 / ld) / tauS * feneld * QDyy\n        )\n        hxy = (\n            gammadot * QDyy\n            - beta * nu * QDxy / ld\n            - QDxy / tauD\n            - 2 * (1 - 1 / ld) / tauS * feneld * QDxy\n        )\n        trh_lm = (hxx + 2 * hyy) / (3 * lm2 - 3)\n\n        dQDxx = hxx + trh_lm * QDxx + r_asfree * f / (1 - f) * (QAxx - QDxx)\n        dQDyy = hyy + trh_lm * QDyy + r_asfree * f / (1 - f) * (QAyy - QDyy)\n        dQDxy = hxy + trh_lm * QDxy + r_asfree * f / (1 - f) * (QAxy - QDxy)\n\n        ###\n        dldeq = (\n            gammadot * QDxy / trQD * ldeq\n            - (ldeq - 1) / tauS * feneEq\n            + f * r_asfree * (la - ldeq)\n        )\n        ###\n        df = r_freeas * (1 - f) - r_asfree * f\n\n        return [df, dldeq, dQAxx, dQAyy, dQAxy, dQDxx, dQDyy, dQDxy]\n\n    def sigmadot_uext(self, vec, t, p):\n        """"""PETS differential equation under *uext* flow\n        with stretching and finite extensibility if selected""""""\n        if self.stop_theory_flag:\n            raise EndComputationRequested\n        f, ldeq, QAxx, QAyy, QDxx, QDyy = vec\n\n        Z, r_a, lmax, tauD, tauS, tau_as, tau_free, beta, delta, epsilon_dot = p\n\n        # Create the vector with the time derivative of sigma\n\n        lm2 = lmax ** 2\n        trQA = QAxx + 2 * QAyy\n        trQD = QDxx + 2 * QDyy\n        la = ((lm2 * trQA) / (3 * lm2 - 3 + trQA)) ** 0.5\n        ld = ((lm2 * trQD) / (3 * lm2 - 3 + trQD)) ** 0.5\n        fenela = (3 * lm2 - 3 + trQA) / (3 * lm2)\n        feneld = (3 * lm2 - 3 + trQD) / (3 * lm2)\n        feneEq = (1 - 1 / lm2) / (1 - ldeq ** 2 / lm2)\n\n        r_freeas = 1 / tau_free\n        r_asfree = (\n            1\n            / tau_as\n            * (\n                (1 - la ** 2 / lm2)\n                / (\n                    1\n                    - 1\n                    / lm2\n                    * (la - r_a / Z) ** 2\n                    * (1 - (1 - r_a / Z) / lm2)\n                    / (1 - 1 / lm2)\n                )\n            )\n            ** (-1.5 * Z * lm2)\n        )\n        if r_asfree > self.RD_MAX:\n            r_asfree = self.RD_MAX\n        nu = 2 * (1 - f) * (1 - 1 / ldeq) / tauS * feneEq + f * r_asfree * 2 * (\n            la - ld\n        ) / (la + ld)\n        ###\n        gxx = 2.0 * epsilon_dot * QAxx - beta * nu * (QAxx - fenela) / la\n        gyy = -epsilon_dot * QAyy - beta * nu * (QAyy - fenela) / la\n        trg_lm = (gxx + 2 * gyy) / (3 * lm2 - 3)\n\n        dQAxx = gxx + trg_lm * QAxx + r_freeas * (1 - f) / f * (QDxx - QAxx)\n        dQAyy = gyy + trg_lm * QAyy + r_freeas * (1 - f) / f * (QDyy - QAyy)\n\n        #####\n        hxx = (\n            2.0 * epsilon_dot * QDxx\n            - beta * nu * (QDxx - feneld) / ld\n            - (QDxx - feneld) / tauD\n            - 2 * (1 - 1 / ld) / tauS * feneld * QDxx\n        )\n        hyy = (\n            -epsilon_dot * QDyy\n            - beta * nu * (QDyy - feneld) / ld\n            - (QDyy - feneld) / tauD\n            - 2 * (1 - 1 / ld) / tauS * feneld * QDyy\n        )\n        trh_lm = (hxx + 2 * hyy) / (3 * lm2 - 3)\n\n        dQDxx = hxx + trh_lm * QDxx + r_asfree * f / (1 - f) * (QAxx - QDxx)\n        dQDyy = hyy + trh_lm * QDyy + r_asfree * f / (1 - f) * (QAyy - QDyy)\n\n        ###\n        dldeq = (\n            epsilon_dot * (QDxx - QDyy) / trQD * ldeq\n            - (ldeq - 1) / tauS * feneEq\n            + f * r_asfree * (la - ldeq)\n        )\n        ###\n        df = r_freeas * (1 - f) - r_asfree * f\n\n        # if (t< .1):\n        #     print(""\\n time=%.3g"" % t)\n        #     print(""f"", vec[0])\n        #     print(""ldeq"", vec[1])\n        #     print(""QAxx"", vec[2])\n        #     print(""QAyy"", vec[3])\n        #     print(""QDxx"", vec[4])\n        #     print(""QDyy"", vec[5])\n        #     print(""r_freeas"", r_freeas)\n        #     print(""r_asfree"", r_asfree)\n        #     print(""df"", df)\n\n        return [df, dldeq, dQAxx, dQAyy, dQDxx, dQDyy]\n\n    def PETS(self, f=None):\n        """"""Calculates the theory""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        tt.data[:, 0] = ft.data[:, 0]\n\n        # ODE solver parameters\n        abserr = 1.0e-8\n        relerr = 1.0e-6\n        t = ft.data[:, 0]\n        t = np.concatenate([[0], t])\n\n        flow_rate = float(f.file_parameters[""gdot""])\n        delta = self.parameters[""delta""].value\n        beta = self.parameters[""beta""].value\n        tau_free = self.parameters[""tau_free""].value\n        tau_as = self.parameters[""tau_as""].value\n        tauS = self.parameters[""tauS""].value\n        tauD = self.parameters[""tauD""].value\n        lmax = self.parameters[""lmax""].value\n        r_a = self.parameters[""r_a""].value\n        Z = self.parameters[""Z""].value\n        self.RD_MAX = 1 / (\n            0.01 * min(tau_free, min(tauS, min(tauS, 0.0001 / flow_rate)))\n        )\n        # flow geometry and finite extensibility\n        phi0 = 1 / (1 + tau_free / tau_as)\n\n        if self.flow_mode == FlowMode.shear:\n            vec_0 = [\n                phi0,\n                1.0,\n                1.0,\n                1.0,\n                0,\n                1.0,\n                1.0,\n                0,\n            ]  # f, ldeq, QAxx, QAyy, QAxy QDxx, QDyy, QDxy\n            pde = self.sigmadot_shear\n        elif self.flow_mode == FlowMode.uext:\n            vec_0 = [phi0, 1.0, 1.0, 1.0, 1.0, 1.0]  # f, ldeq, QAxx, QAyy, QDxx, QDyy\n            pde = self.sigmadot_uext\n        else:\n            return\n\n        p = [Z, r_a, lmax, tauD, tauS, tau_as, tau_free, beta, delta, flow_rate]\n        try:\n            res_vec = odeint(pde, vec_0, t, args=(p,), atol=abserr, rtol=relerr)\n        except EndComputationRequested:\n            pass\n\n        G = self.parameters[""G""].value\n        if self.flow_mode == FlowMode.shear:\n            # res_vec = [f, ldeq, QAxx, QAyy, QAxy, QDxx, QDyy, QDxy]\n            f = np.delete(res_vec[:, 0], [0])\n            # QAxx = np.delete(res_vec[:, 2], [0])\n            # QAyy = np.delete(res_vec[:, 3], [0])\n            QAxy = np.delete(res_vec[:, 4], [0])\n            # QDxx = np.delete(res_vec[:, 5], [0])\n            # QDyy = np.delete(res_vec[:, 6], [0])\n            QDxy = np.delete(res_vec[:, 7], [0])\n            # \xc2\xa0build stress array\n            tt.data[:, 1] = G * (f * QAxy + (1 - f) * QDxy)\n\n        elif self.flow_mode == FlowMode.uext:\n            # res_vec = [f, ldeq, QAxx, QAyy, QDxx, QDyy]\n            f = np.delete(res_vec[:, 0], [0])\n            QAxx = np.delete(res_vec[:, 2], [0])\n            QAyy = np.delete(res_vec[:, 3], [0])\n            QDxx = np.delete(res_vec[:, 4], [0])\n            QDyy = np.delete(res_vec[:, 5], [0])\n            # \xc2\xa0build stress array\n            tt.data[:, 1] = G * (f * (QAxx - QAyy) + (1 - f) * (QDxx - QDyy))\n\n\nclass CLTheoryPETS(BaseTheoryPETS, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n\nclass GUITheoryPETS(BaseTheoryPETS, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n        # add widgets specific to the theory\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n\n        self.tbutflow = QToolButton()\n        self.tbutflow.setPopupMode(QToolButton.MenuButtonPopup)\n        menu = QMenu()\n        self.shear_flow_action = menu.addAction(\n            QIcon("":/Icon8/Images/new_icons/icon-shear.png""), ""Shear Flow""\n        )\n        self.extensional_flow_action = menu.addAction(\n            QIcon("":/Icon8/Images/new_icons/icon-uext.png""), ""Extensional Flow""\n        )\n        if self.flow_mode == FlowMode.shear:\n            self.tbutflow.setDefaultAction(self.shear_flow_action)\n        else:\n            self.tbutflow.setDefaultAction(self.extensional_flow_action)\n        self.tbutflow.setMenu(menu)\n        tb.addWidget(self.tbutflow)\n\n        # Show LVE button\n        self.linearenvelope = tb.addAction(\n            QIcon("":/Icon8/Images/new_icons/lve-icon.png""), ""Show Linear Envelope""\n        )\n        self.linearenvelope.setCheckable(True)\n        self.linearenvelope.setChecked(False)\n\n        self.thToolsLayout.insertWidget(0, tb)\n\n        connection_id = self.shear_flow_action.triggered.connect(self.select_shear_flow)\n        connection_id = self.extensional_flow_action.triggered.connect(\n            self.select_extensional_flow\n        )\n        connection_id = self.linearenvelope.triggered.connect(self.show_linear_envelope)\n\n    def Qhide_theory_extras(self, show):\n        """"""Uncheck the LVE button. Called when curent theory is changed""""""\n        if show:\n            self.LVEenvelopeseries.set_visible(self.linearenvelope.isChecked())\n        else:\n            self.LVEenvelopeseries.set_visible(False)\n\n    def show_linear_envelope(self, state):\n        self.extra_graphic_visible(state)\n        # self.LVEenvelopeseries.set_visible(self.linearenvelope.isChecked())\n        # self.plot_theory_stuff()\n        # self.parent_dataset.parent_application.update_plot()\n\n    def plot_theory_stuff(self):\n        """"""Plot theory helpers""""""\n        data_table_tmp = DataTable(self.axarr)\n        data_table_tmp.num_columns = 2\n        data_table_tmp.num_rows = 100\n        data_table_tmp.data = np.zeros((100, 2))\n\n        times = np.logspace(-2, 3, 100)\n        data_table_tmp.data[:, 0] = times\n        data_table_tmp.data[:, 1] = 0\n        fparamaux = {}\n        fparamaux[""gdot""] = 1e-8\n\n        G = self.parameters[""G""].value\n        tauD = self.parameters[""tauD""].value\n        data_table_tmp.data[:, 1] += (\n            G * fparamaux[""gdot""] * tauD * (1 - np.exp(-times / tauD))\n        )\n        if self.flow_mode == FlowMode.uext:\n            data_table_tmp.data[:, 1] *= 3.0\n        view = self.parent_dataset.parent_application.current_view\n        try:\n            x, y, success = view.view_proc(data_table_tmp, fparamaux)\n        except TypeError as e:\n            print(e)\n            return\n        self.LVEenvelopeseries.set_data(x[:, 0], y[:, 0])\n\n    def select_shear_flow(self):\n        self.flow_mode = FlowMode.shear\n        self.tbutflow.setDefaultAction(self.shear_flow_action)\n\n    def select_extensional_flow(self):\n        self.flow_mode = FlowMode.uext\n        self.tbutflow.setDefaultAction(self.extensional_flow_action)\n'"
RepTate/theories/TheoryPomPom.py,36,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryPomPom\n\nModule for the Pom-Pom model for the non-linear flow of entangled polymers.\n\n""""""\nimport os\nimport numpy as np\nfrom math import exp  # faster than np for scalar\nfrom scipy.integrate import odeint\nimport RepTate\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom PyQt5.QtWidgets import QToolBar, QToolButton, QMenu, QMessageBox, QFileDialog\nfrom PyQt5.QtCore import QSize\nfrom PyQt5.QtGui import QIcon\nfrom PyQt5.QtCore import Qt\nfrom RepTate.gui.Theory_rc import *\nfrom RepTate.core.Theory import EndComputationRequested\nfrom RepTate.applications.ApplicationLAOS import GUIApplicationLAOS, CLApplicationLAOS\nimport RepTate\nimport time\nfrom RepTate.theories.theory_helpers import FlowMode, EditModesDialog\n\n\nclass TheoryPomPom(CmdBase):\n    """"""Multi-mode PomPom Model based on :cite:`NLVE-Blackwell2000`:\n    \n    .. math::\n        \\\\boldsymbol \\\\sigma &= 3 \\\\sum_{i=1}^n G_i  \\\\lambda_i^2(t) \\\\boldsymbol S_i (t),\\\\\\\\\n        \\\\boldsymbol S_i &= \\\\dfrac{\\\\boldsymbol A_i } {\\\\mathrm{Tr} \\\\boldsymbol A_i}\\\\\\\\\n        \\\\dfrac {\\\\mathrm D \\\\boldsymbol A_i} {\\\\mathrm D t} &= \\\\boldsymbol \\\\kappa \\\\cdot \\\\boldsymbol A_i\n        + \\\\boldsymbol A_i\\\\cdot \\\\boldsymbol \\\\kappa ^T \n        - \\\\dfrac {1} {\\\\tau_{\\\\mathrm b, i}}  (\\\\boldsymbol A_i - \\\\boldsymbol I), \\\\\\\\\n        \\\\dfrac {\\\\mathrm D  \\\\lambda_i} {\\\\mathrm D t} &=\n        \\\\lambda_i (\\\\boldsymbol \\\\kappa : \\\\boldsymbol S_i)\n        - \\\\dfrac {1} {\\\\tau_{\\\\mathrm s, i}}  (\\\\lambda_i - 1)\n        \\\\exp\\\\left( \\\\nu^* (\\\\lambda_i - 1) \\\\right),\n        \n    where, for each mode :math:`i`:\n        - :math:`G_i`: weight of mode :math:`i`\n        - :math:`\\\\tau_{\\\\mathrm b, i}`: backbone orientation relaxation time of mode :math:`i`\n        - :math:`\\\\tau_{\\\\mathrm s, i}`: backbone stretch relaxation time of mode :math:`i`\n        - :math:`\\\\nu_i^* = \\\\dfrac{2}{q_i - 1}`\n        - :math:`q_i`: the number of dangling arms of each mode\n\n   * **Parameters**\n            - ``q_i`` :math:`\\\\equiv q_i`: the number of dangling arms of each mode\n            - ``ratio_i`` :math:`\\\\equiv \\\\dfrac{\\\\tau_{\\\\mathrm b, i}}{\\\\tau_{\\\\mathrm s, i}}`:\n            the ratio of orientation to stretch relaxation times of each mode\n\n    """"""\n\n    thname = ""Pom-Pom""\n    description = ""Pom-Pom constitutive equation""\n    citations = [""McLeish T.C.B. and Larson R.G., J. Rheol. 1998, 42, 81-110""]\n    doi = [""http://dx.doi.org/10.1122/1.550933""]\n\n    def __new__(cls, name="""", parent_dataset=None, ax=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryPomPom(name, parent_dataset, ax)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryPomPom(name, parent_dataset, ax)\n        )\n\n\nclass BaseTheoryPomPom:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/NLVE/Theory/theory.html#multi-mode-pom-pom-model""\n    single_file = False\n    thname = TheoryPomPom.thname\n    citations = TheoryPomPom.citations\n    doi = TheoryPomPom.doi\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        self.function = self.calculate_PomPom\n        self.has_modes = True\n        self.parameters[""nmodes""] = Parameter(\n            name=""nmodes"",\n            value=2,\n            description=""Number of modes"",\n            type=ParameterType.integer,\n            opt_type=OptType.const,\n            display_flag=False,\n        )\n\n        for i in range(self.parameters[""nmodes""].value):\n            self.parameters[""G%02d"" % i] = Parameter(\n                name=""G%02d"" % i,\n                value=1000.0,\n                description=""Modulus of mode %02d"" % i,\n                type=ParameterType.real,\n                opt_type=OptType.nopt,\n                display_flag=False,\n                min_value=0,\n            )\n            self.parameters[""tauB%02d"" % i] = Parameter(\n                name=""tauB%02d"" % i,\n                value=10.0,\n                description=""Backbone relaxation time of mode %02d"" % i,\n                type=ParameterType.real,\n                opt_type=OptType.nopt,\n                display_flag=False,\n                min_value=0,\n            )\n            self.parameters[""q%02d"" % i] = Parameter(\n                name=""q%02d"" % i,\n                value=1,\n                description=""Number of dangling arms of mode %02d"" % i,\n                type=ParameterType.integer,\n                opt_type=OptType.opt,\n                min_value=1,\n                max_value=100,\n            )\n            self.parameters[""ratio%02d"" % i] = Parameter(\n                name=""ratio%02d"" % i,\n                value=2,\n                description=""Ratio of orientation to stretch relaxation times of mode %02d""\n                % i,\n                type=ParameterType.real,\n                opt_type=OptType.const,\n                min_value=1,\n                max_value=5,\n            )\n\n        self.MAX_MODES = 40\n        self.init_flow_mode()\n\n    def init_flow_mode(self):\n        """"""Find if data files are shear or extension""""""\n        try:\n            f = self.theory_files()[0]\n            if f.file_type.extension == ""shear"":\n                self.flow_mode = FlowMode.shear\n            else:\n                self.flow_mode = FlowMode.uext\n        except Exception as e:\n            print(""in RP init:"", e)\n            self.flow_mode = FlowMode.shear  # default mode: shear\n\n    def get_modes(self):\n        """"""Get the values of Maxwell Modes from this theory""""""\n        nmodes = self.parameters[""nmodes""].value\n        tau = np.zeros(nmodes)\n        G = np.zeros(nmodes)\n        for i in range(nmodes):\n            tau[i] = self.parameters[""tauB%02d"" % i].value\n            G[i] = self.parameters[""G%02d"" % i].value\n        return tau, G, True\n\n    def set_modes(self, tau, G):\n        """"""Set the values of Maxwell Modes from another theory""""""\n        nmodes = len(tau)\n        self.set_param_value(""nmodes"", nmodes)\n        for i in range(nmodes):\n            self.set_param_value(""tauB%02d"" % i, tau[i])\n            self.set_param_value(""G%02d"" % i, G[i])\n        return True\n\n    def sigmadot_shear(self, l, t, p):\n        """"""PomPom model in shear""""""\n        if self.stop_theory_flag:\n            raise EndComputationRequested\n        q, tauB, tauS, gdot = p\n        if (l >= q) or (q == 1):\n            l = q\n            dydx = 0\n        elif l < 1:\n            l = 1\n            dydx = 0\n        else:\n            nustar = 2.0 / (q - 1)\n            Axy = gdot * tauB * (1 - exp(-t / tauB))\n            Axx = (\n                2 * gdot * gdot * tauB * tauB * (1 - exp(-t / tauB))\n                + 1\n                - 2 * gdot * gdot * tauB * t * exp(-t / tauB)\n            )\n            Trace = Axx + 2\n            # For very fast modes, avoid integrating\n            aux = tauS / exp(nustar * (l - 1))\n            if aux * gdot < 1e-3:\n                dydx = 0\n            else:\n                dydx = l * gdot * Axy / Trace - (l - 1) / tauS * exp(nustar * (l - 1))\n        return dydx\n\n    def sigmadot_uext(self, l, t, p):\n        """"""PomPom model in uniaxial extension""""""\n        if self.stop_theory_flag:\n            raise EndComputationRequested\n        q, tauB, tauS, edot = p\n\n        if (l >= q) or (q == 1):\n            l = q\n            dydx = 0\n        else:\n            nustar = 2.0 / (q - 1.0)\n            Axx = (1 - 2 * edot * tauB * exp((2 * edot * tauB - 1) * t / tauB)) / (\n                1 - 2 * edot * tauB\n            )\n            Ayy = (1 + edot * tauB * exp(-(1 + edot * tauB) * t / tauB)) / (\n                1 + edot * tauB\n            )\n            Trace = Axx + 2 * Ayy\n            # For very fast modes, avoid integrating\n            aux = tauS / exp(nustar * (l - 1))\n            if Axx > 1e240:  # To avoid floating point overflow\n                firstterm = l * edot\n            else:\n                firstterm = l * edot * (Axx - Ayy) / Trace\n\n            if aux * edot < 1e-3:\n                dydx = 0\n            else:\n                dydx = firstterm - (l - 1) / tauS * exp(nustar * (l - 1))\n        return dydx\n\n    def sigmadot_shearLAOS(self, l, t, p):\n        """"""PomPom model in shear LAOS""""""\n        if self.stop_theory_flag:\n            raise EndComputationRequested\n        q, tauB, tauS, g0, w = p\n        gdot = g0 * w * np.cos(w * t)\n        if (l >= q) or (q == 1):\n            l = q\n            dydx = 0\n        elif l < 1:\n            l = 1\n            dydx = 0\n        else:\n            nustar = 2.0 / (q - 1)\n            Axy = (\n                tauB\n                * g0\n                * w\n                * (tauB * w * np.sin(w * t) - np.exp(-t / tauB) + np.cos(w * t))\n                / (1 + w ** 2 * tauB ** 2)\n            )\n            Axx = 1 - tauB * g0 ** 2 * w * (\n                2 * np.cos(2 * w * t) * tauB ** 3 * w ** 3\n                + 2 * np.exp(-t / tauB) * tauB ** 3 * w ** 3\n                + 8 * np.exp(-t / tauB) * tauB ** 2 * w ** 2 * np.sin(w * t)\n                - 4 * tauB ** 3 * w ** 3\n                - 3 * np.sin(2 * w * t) * tauB ** 2 * w ** 2\n                - np.cos(2 * w * t) * tauB * w\n                + 2 * tauB * np.exp(-t / tauB) * w\n                + 2 * np.exp(-t / tauB) * np.sin(w * t)\n                - tauB * w\n            ) / (4 * tauB ** 4 * w ** 4 + 5 * tauB ** 2 * w ** 2 + 1)\n            Trace = Axx + 2\n            # For very fast modes, avoid integrating\n            aux = tauS / exp(nustar * (l - 1))\n            if aux * gdot < 1e-3:\n                dydx = 0\n            else:\n                dydx = l * gdot * Axy / Trace - (l - 1) / tauS * exp(nustar * (l - 1))\n        return dydx\n\n    def calculate_PomPom(self, f=None):\n        """"""Calculate the theory""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        tt.data[:, 0] = ft.data[:, 0]\n\n        # flow geometry\n        if self.flow_mode == FlowMode.shear:\n            pde_stretch = self.sigmadot_shear\n        elif self.flow_mode == FlowMode.uext:\n            pde_stretch = self.sigmadot_uext\n        else:\n            return\n\n        # ODE solver parameters\n        abserr = 1.0e-8\n        relerr = 1.0e-6\n        times = ft.data[:, 0]\n        times = np.concatenate([[0], times])\n\n        # create parameters list\n        flow_rate = float(f.file_parameters[""gdot""])\n        nmodes = self.parameters[""nmodes""].value\n        for i in range(nmodes):\n            if self.stop_theory_flag:\n                break\n            G = self.parameters[""G%02d"" % i].value\n            q = self.parameters[""q%02d"" % i].value\n            tauB = self.parameters[""tauB%02d"" % i].value\n            tauS = tauB / self.parameters[""ratio%02d"" % i].value\n            p = [q, tauB, tauS, flow_rate]\n\n            # solve ODEs\n            stretch_ini = 1\n            try:\n                l = odeint(\n                    pde_stretch, stretch_ini, times, args=(p,), atol=abserr, rtol=relerr\n                )\n            except EndComputationRequested:\n                break\n            # write results in table\n            l = np.delete(l, [0])  # delete the t=0 value\n            t = np.delete(times, [0])  # delete the t=0 value\n            if self.flow_mode == FlowMode.shear:\n                Axy_arr = flow_rate * tauB * (1 - np.exp(-t / tauB))\n                Axx_arr = (\n                    2 * flow_rate * flow_rate * tauB * tauB * (1 - np.exp(-t / tauB))\n                    + 1\n                    - 2 * flow_rate * flow_rate * tauB * t * np.exp(-t / tauB)\n                )\n                tt.data[:, 1] += 3 * G * l * l * Axy_arr / (Axx_arr + 2.0)\n\n            elif self.flow_mode == FlowMode.uext:\n                Axx_arr = (\n                    1\n                    - 2\n                    * flow_rate\n                    * tauB\n                    * np.exp((2 * flow_rate * tauB - 1) * t / tauB)\n                ) / (1 - 2 * flow_rate * tauB)\n                Ayy_arr = (\n                    1 + flow_rate * tauB * np.exp(-(1 + flow_rate * tauB) * t / tauB)\n                ) / (1 + flow_rate * tauB)\n\n                k = np.ones(len(t))\n                k[Axx_arr < 1e240] = (Axx_arr - Ayy_arr) / (\n                    Axx_arr + 2 * Ayy_arr\n                )  # k=1 if Axx > 1e240\n\n                tt.data[:, 1] += 3 * G * l * l * k\n\n    def calculate_PomPomLAOS(self, f=None):\n        """"""Calculate the theory in LAOS""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        tt.data[:, 0] = ft.data[:, 0]\n\n        pde_stretchLAOS = self.sigmadot_shearLAOS\n\n        # ODE solver parameters\n        abserr = 1.0e-8\n        relerr = 1.0e-6\n\n        # create parameters list\n        g0 = float(f.file_parameters[""gamma""])\n        w = float(f.file_parameters[""omega""])\n        nmodes = self.parameters[""nmodes""].value\n        times = ft.data[:, 0]\n        tt.data[:, 1] = g0 * np.sin(w * times)\n        times = np.concatenate([[0], times])\n        for i in range(nmodes):\n            if self.stop_theory_flag:\n                break\n            G = self.parameters[""G%02d"" % i].value\n            q = self.parameters[""q%02d"" % i].value\n            tauB = self.parameters[""tauB%02d"" % i].value\n            tauS = tauB / self.parameters[""ratio%02d"" % i].value\n            p = [q, tauB, tauS, g0, w]\n\n            # solve ODEs\n            stretch_ini = 1\n            try:\n                l = odeint(\n                    pde_stretchLAOS,\n                    stretch_ini,\n                    times,\n                    args=(p,),\n                    atol=abserr,\n                    rtol=relerr,\n                )\n            except EndComputationRequested:\n                break\n            # write results in table\n            l = np.delete(l, [0])  # delete the t=0 value\n            t = np.delete(times, [0])  # delete the t=0 value\n            Axy_arr = (\n                tauB\n                * g0\n                * w\n                * (tauB * w * np.sin(w * t) - np.exp(-t / tauB) + np.cos(w * t))\n                / (1 + w ** 2 * tauB ** 2)\n            )\n            Axx_arr = 1 - tauB * g0 ** 2 * w * (\n                2 * np.cos(2 * w * t) * tauB ** 3 * w ** 3\n                + 2 * np.exp(-t / tauB) * tauB ** 3 * w ** 3\n                + 8 * np.exp(-t / tauB) * tauB ** 2 * w ** 2 * np.sin(w * t)\n                - 4 * tauB ** 3 * w ** 3\n                - 3 * np.sin(2 * w * t) * tauB ** 2 * w ** 2\n                - np.cos(2 * w * t) * tauB * w\n                + 2 * tauB * np.exp(-t / tauB) * w\n                + 2 * np.exp(-t / tauB) * np.sin(w * t)\n                - tauB * w\n            ) / (4 * tauB ** 4 * w ** 4 + 5 * tauB ** 2 * w ** 2 + 1)\n            tt.data[:, 2] += 3 * G * l * l * Axy_arr / (Axx_arr + 2.0)\n\n    def set_param_value(self, name, value):\n        """"""Set the value of theory parameters""""""\n        if name == ""nmodes"":\n            oldn = self.parameters[""nmodes""].value\n        message, success = super(BaseTheoryPomPom, self).set_param_value(name, value)\n        if not success:\n            return message, success\n        if name == ""nmodes"":\n            for i in range(self.parameters[""nmodes""].value):\n                self.parameters[""G%02d"" % i] = Parameter(\n                    name=""G%02d"" % i,\n                    value=1000.0,\n                    description=""Modulus of mode %02d"" % i,\n                    type=ParameterType.real,\n                    opt_type=OptType.nopt,\n                    display_flag=False,\n                    min_value=0,\n                )\n                self.parameters[""tauB%02d"" % i] = Parameter(\n                    name=""tauB%02d"" % i,\n                    value=10.0,\n                    description=""Backbone relaxation time of mode %02d"" % i,\n                    type=ParameterType.real,\n                    opt_type=OptType.nopt,\n                    display_flag=False,\n                    min_value=0,\n                )\n                self.parameters[""q%02d"" % i] = Parameter(\n                    name=""q%02d"" % i,\n                    value=1,\n                    description=""Number of dangling arms of mode %02d"" % i,\n                    type=ParameterType.integer,\n                    opt_type=OptType.opt,\n                    min_value=1,\n                    max_value=100,\n                )\n                self.parameters[""ratio%02d"" % i] = Parameter(\n                    name=""ratio%02d"" % i,\n                    value=2,\n                    description=""Ratio of orientation to stretch relaxation times of mode %02d""\n                    % i,\n                    type=ParameterType.real,\n                    opt_type=OptType.const,\n                    min_value=1,\n                    max_value=5,\n                )\n            if oldn > self.parameters[""nmodes""].value:\n                for i in range(self.parameters[""nmodes""].value, oldn):\n                    del self.parameters[""G%02d"" % i]\n                    del self.parameters[""tauB%02d"" % i]\n                    del self.parameters[""ratio%02d"" % i]\n                    del self.parameters[""q%02d"" % i]\n        return """", True\n\n\nclass CLTheoryPomPom(BaseTheoryPomPom, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n        if isinstance(parent_dataset.parent_application, CLApplicationLAOS):\n            self.function = self.calculate_PomPomLAOS\n\n\nclass GUITheoryPomPom(BaseTheoryPomPom, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n        # add widgets specific to the theory\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n\n        if not isinstance(parent_dataset.parent_application, GUIApplicationLAOS):\n            self.tbutflow = QToolButton()\n            self.tbutflow.setPopupMode(QToolButton.MenuButtonPopup)\n            menu = QMenu()\n            self.shear_flow_action = menu.addAction(\n                QIcon("":/Icon8/Images/new_icons/icon-shear.png""), ""Shear Flow""\n            )\n            self.extensional_flow_action = menu.addAction(\n                QIcon("":/Icon8/Images/new_icons/icon-uext.png""), ""Extensional Flow""\n            )\n            if self.flow_mode == FlowMode.shear:\n                self.tbutflow.setDefaultAction(self.shear_flow_action)\n            else:\n                self.tbutflow.setDefaultAction(self.extensional_flow_action)\n            self.tbutflow.setMenu(menu)\n            tb.addWidget(self.tbutflow)\n            connection_id = self.shear_flow_action.triggered.connect(\n                self.select_shear_flow\n            )\n            connection_id = self.extensional_flow_action.triggered.connect(\n                self.select_extensional_flow\n            )\n        else:\n            self.function = self.calculate_PomPomLAOS\n\n        self.tbutmodes = QToolButton()\n        self.tbutmodes.setPopupMode(QToolButton.MenuButtonPopup)\n        menu = QMenu()\n        self.get_modes_action = menu.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-broadcasting.png""), ""Get Modes""\n        )\n        self.edit_modes_action = menu.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-edit-file.png""), ""Edit Modes""\n        )\n        self.plot_modes_action = menu.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-scatter-plot.png""), ""Plot Modes""\n        )\n        self.save_modes_action = menu.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-save-Maxwell.png""), ""Save Modes""\n        )\n        self.tbutmodes.setDefaultAction(self.get_modes_action)\n        self.tbutmodes.setMenu(menu)\n        tb.addWidget(self.tbutmodes)\n\n        # Save to flowsolve button\n        self.flowsolve_btn = tb.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-save-flowsolve.png""),\n            ""Save Parameters To FlowSolve"",\n        )\n        self.flowsolve_btn.setCheckable(False)\n\n        self.thToolsLayout.insertWidget(0, tb)\n\n        connection_id = self.get_modes_action.triggered.connect(self.get_modes_reptate)\n        connection_id = self.edit_modes_action.triggered.connect(self.edit_modes_window)\n        connection_id = self.plot_modes_action.triggered.connect(self.plot_modes_graph)\n        connection_id = self.save_modes_action.triggered.connect(self.save_modes)\n        connection_id = self.flowsolve_btn.triggered.connect(self.handle_flowsolve_btn)\n\n    def handle_flowsolve_btn(self):\n        """"""Save theory parameters in FlowSolve format""""""\n\n        # Get filename of RepTate project to open\n        fpath, _ = QFileDialog.getSaveFileName(\n            self, ""Save Parameters to FowSolve"", os.path.join(RepTate.root_dir, ""data""), ""FlowSolve (*.fsrep)""\n        )\n        if fpath == """":\n            return\n\n        with open(fpath, ""w"") as f:\n            verdata = RepTate._version.get_versions()\n            version = verdata[""version""].split(""+"")[0]\n            date = verdata[""date""].split(""T"")[0]\n            build = verdata[""version""]\n            header = ""#flowGen input\\n""\n            header += ""# Generated with RepTate %s %s (build %s)\\n"" % (\n                version,\n                date,\n                build,\n            )\n            header += ""# At %s on %s\\n"" % (\n                time.strftime(""%X""),\n                time.strftime(""%a %b %d, %Y""),\n            )\n            f.write(header)\n\n            f.write(""\\n#param global\\n"")\n            f.write(""constit multip\\n"")\n            # f.write(\'# or multip (for pompom) or polydisperse (for polydisperse Rolie-Poly)\\n\')\n\n            f.write(""\\n#param constitutive\\n"")\n\n            n = self.parameters[""nmodes""].value\n            td = np.zeros(n)\n            for i in range(n):\n                td[i] = self.parameters[""tauB%02d"" % i].value\n            # sort taud ascending order\n            args = np.argsort(td)\n\n            modulus = ""modulus""\n            taub = ""taub""\n            ratio = ""ratio""\n            qarms = ""qarms""\n            for i, arg in enumerate(args):\n                modulus += "" %.6g"" % self.parameters[""G%02d"" % arg].value\n                taub += "" %.6g"" % self.parameters[""tauB%02d"" % arg].value\n                ratio += "" %.6g"" % self.parameters[""ratio%02d"" % arg].value\n                qarms += "" %.6g"" % self.parameters[""q%02d"" % arg].value\n            f.write(""%s\\n%s\\n%s\\n%s\\n"" % (modulus, taub, ratio, qarms))\n\n            f.write(""nustar 2\\n"")\n\n            f.write(""\\n#end"")\n\n        QMessageBox.information(\n            self, ""Success"", \'Wrote FlowSolve parameters in ""%s""\' % fpath\n        )\n\n    def select_shear_flow(self):\n        self.flow_mode = FlowMode.shear\n        self.tbutflow.setDefaultAction(self.shear_flow_action)\n\n    def select_extensional_flow(self):\n        self.flow_mode = FlowMode.uext\n        self.tbutflow.setDefaultAction(self.extensional_flow_action)\n\n    def get_modes_reptate(self):\n        self.Qcopy_modes()\n\n    def edit_modes_window(self):\n        times, G, success = self.get_modes()\n        if not success:\n            self.logger.warning(""Could not get modes successfully"")\n            return\n        d = EditModesDialog(self, times, G, self.MAX_MODES)\n        if d.exec_():\n            nmodes = d.table.rowCount()\n            self.set_param_value(""nmodes"", nmodes)\n            success = True\n            for i in range(nmodes):\n                msg, success1 = self.set_param_value(\n                    ""tauB%02d"" % i, d.table.item(i, 0).text()\n                )\n                msg, success2 = self.set_param_value(\n                    ""G%02d"" % i, d.table.item(i, 1).text()\n                )\n                success *= success1 * success2\n            if not success:\n                QMessageBox.warning(\n                    self,\n                    ""Error"",\n                    ""Some parameter(s) could not be updated.\\nPlease try again."",\n                )\n            else:\n                self.handle_actionCalculate_Theory()\n\n    def plot_modes_graph(self):\n        pass\n'"
RepTate/theories/TheoryRDPLVE.py,9,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryRDPLVE\n\nTemplate file for creating a new theory\n""""""\nimport numpy as np\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom PyQt5.QtWidgets import QToolBar, QToolButton, QMenu, QMessageBox\nfrom PyQt5.QtCore import QSize\nfrom PyQt5.QtGui import QIcon\nfrom PyQt5.QtCore import Qt\nfrom math import sqrt\nfrom collections import OrderedDict\nfrom RepTate.theories.theory_helpers import (\n    Dilution,\n    GcorrMode,\n    GetMwdRepTate,\n    EditMWDDialog,\n    EditModesDialog,\n)\n\n\nclass TheoryRDPLVE(CmdBase):\n    """"""Rolie-Double-Poly equation for the linear predictions of polydispere entangled linear polymers\n\n    * **Function**\n        .. math::\n            \\\\begin{eqnarray}\n            G\'(\\\\omega) & = & \\\\sum_{i=1}^{n_{modes}}\\\\sum_{j=1}^{n_{modes}} G \\\\phi_i \\\\phi_j \\\\frac{(\\\\omega\\\\tau)^2}{1+(\\\\omega\\\\tau)^2} \\\\\\\\\n            G\'\'(\\\\omega) & = & \\\\sum_{i=1}^{n_{modes}}\\\\sum_{j=1}^{n_{modes}} G \\\\phi_i \\\\phi_j \\\\frac{\\\\omega\\\\tau}{1+(\\\\omega\\\\tau)^2}\n            \\\\end{eqnarray}\n        \n        where, :math:`\\\\tau = (\\\\tau_{\\\\text D,i}^{-1} + \\\\tau_{\\\\text D, j}^{-1})^{-1}`, and,\n        if the ""modulus correction"" button is clicked, :math:`G=G_N^0 \\\\times g(Z_\\\\text{eff})`, with :math:`g` the Likthman-McLeish CLF correction function,\n        otherwise :math:`G=G_N^0`\n\n    * **Parameters**\n       - ``nmodes`` : number of molecular mass components.\n       - ``G_N^0`` : Plateau modulus\n       - ``phi0i`` : Volume fraction of component :math:`i`\n       - ``tauD0i`` : Reptation time of component :math:`i`\n\n    """"""\n\n    thname = ""RDP LVE""\n    description = ""Linear ViscoElastic predictions of the Rolie-Double-Poly model""\n    citations = []\n\n    def __new__(cls, name="""", parent_dataset=None, axarr=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryRDPLVE(name, parent_dataset, axarr)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryRDPLVE(name, parent_dataset, axarr)\n        )\n\n\nclass BaseTheoryRDPLVE:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/LVE/Theory/theory.html#rolie-double-poly-lve""\n    single_file = (\n        True  # False if the theory can be applied to multiple files simultaneously\n    )\n    thname = TheoryRDPLVE.thname\n    citations = TheoryRDPLVE.citations\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        self.function = self.calculate  # main theory function\n        self.has_modes = False  # True if the theory has modes\n        self.parameters[""GN0""] = Parameter(\n            name=""GN0"",\n            value=1000.0,\n            description=""Plateau modulus"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n            min_value=0,\n        )\n        self.parameters[""Me""] = Parameter(\n            name=""Me"",\n            value=1e4,\n            description=""Entanglement molecular mass"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n            min_value=0,\n            display_flag=False,\n        )\n        self.parameters[""tau_e""] = Parameter(\n            name=""tau_e"",\n            value=0.01,\n            description=""Entanglement relaxation time"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n            min_value=0,\n            display_flag=False,\n        )\n        self.parameters[""nmodes""] = Parameter(\n            name=""nmodes"",\n            value=2,\n            description=""Number of Maxwell modes"",\n            type=ParameterType.integer,\n            opt_type=OptType.const,\n            display_flag=False,\n            min_value=1,\n        )\n        nmode = self.parameters[""nmodes""].value\n        for i in range(nmode):\n            self.parameters[""phi%02d"" % i] = Parameter(\n                name=""phi%02d"" % i,\n                value=1.0 / nmode,\n                description=""Volume fraction of mode %02d"" % i,\n                type=ParameterType.real,\n                opt_type=OptType.nopt,\n                display_flag=False,\n                min_value=0,\n                max_value=1,\n            )\n            self.parameters[""tauD%02d"" % i] = Parameter(\n                name=""tauD%02d"" % i,\n                value=100.0,\n                description=""Terminal time of mode %02d"" % i,\n                type=ParameterType.real,\n                opt_type=OptType.nopt,\n                display_flag=False,\n                min_value=0,\n            )\n        self.with_gcorr = GcorrMode.none\n        self.MWD_m = [100, 1000]\n        self.MWD_phi = [0.5, 0.5]\n        self.Zeff = []\n        self.MAX_MODES = 200\n\n    def set_extra_data(self, extra_data):\n        """"""Set extra data when loading project""""""\n        self.MWD_m = extra_data[""MWD_m""]\n        self.MWD_phi = extra_data[""MWD_phi""]\n        self.Zeff = extra_data[""Zeff""]\n\n        # G button\n        if extra_data[""with_gcorr""]:\n            self.with_gcorr == GcorrMode.with_gcorr\n            self.with_gcorr_button.setChecked(True)\n\n    def get_extra_data(self):\n        """"""Set extra_data when saving project""""""\n        self.extra_data[""MWD_m""] = self.MWD_m\n        self.extra_data[""MWD_phi""] = self.MWD_phi\n        self.extra_data[""Zeff""] = self.Zeff\n        self.extra_data[""with_gcorr""] = self.with_gcorr == GcorrMode.with_gcorr\n\n    def get_modes(self):\n        """"""Get the values of Maxwell Modes from this theory""""""\n        nmodes = self.parameters[""nmodes""].value\n        tau = np.zeros(nmodes)\n        G = np.zeros(nmodes)\n        GN0 = self.parameters[""GN0""].value\n        for i in range(nmodes):\n            tau[i] = self.parameters[""tauD%02d"" % i].value\n            G[i] = GN0 * self.parameters[""phi%02d"" % i].value\n        return tau, G, True\n\n    def fZ(self, z):\n        """"""CLF correction function Likthman-McLeish (2002)""""""\n        return 1 - 2 * 1.69 / sqrt(z) + 4.17 / z - 1.55 / (z * sqrt(z))\n\n    def gZ(self, z):\n        """"""CLF correction function for modulus Likthman-McLeish (2002)""""""\n        return 1 - 1.69 / sqrt(z) + 2.0 / z - 1.24 / (z * sqrt(z))\n\n    def set_modes_from_mwd(self, m, phi):\n        """"""Set modes from MWD""""""\n        Me = self.parameters[""Me""].value\n        taue = self.parameters[""tau_e""].value\n        res = Dilution(m, phi, taue, Me, self).res\n        if res[0] == False:\n            self.Qprint(""Could not set modes from MDW"")\n            return\n        _, phi, taus, taud = res\n        nmodes = len(phi)\n        self.set_param_value(""nmodes"", nmodes)\n        for i in range(nmodes):\n            self.set_param_value(""phi%02d"" % i, phi[i])\n            self.set_param_value(""tauD%02d"" % i, taud[i])\n        self.Qprint(""Got %d modes from MWD"" % nmodes)\n        self.update_parameter_table()\n        self.Qprint(\n            \'<font color=green><b>Press ""Calculate"" to update theory</b></font>\'\n        )\n        self.parent_dataset.handle_actionCalculate_Theory()\n\n    def set_param_value(self, name, value):\n        """"""Set the value of a theory parameter""""""\n        if name == ""nmodes"":\n            oldn = self.parameters[""nmodes""].value\n        message, success = super().set_param_value(name, value)\n        if not success:\n            return message, success\n        if name == ""nmodes"":\n            for i in range(self.parameters[""nmodes""].value):\n                self.parameters[""phi%02d"" % i] = Parameter(\n                    name=""phi%02d"" % i,\n                    value=0.0,\n                    description=""Volume fraction of mode %02d"" % i,\n                    type=ParameterType.real,\n                    opt_type=OptType.nopt,\n                    display_flag=False,\n                    min_value=0,\n                )\n                self.parameters[""tauD%02d"" % i] = Parameter(\n                    name=""tauD%02d"" % i,\n                    value=100.0,\n                    description=""Terminal time of mode %02d"" % i,\n                    type=ParameterType.real,\n                    opt_type=OptType.nopt,\n                    display_flag=False,\n                    min_value=0,\n                )\n            if oldn > self.parameters[""nmodes""].value:\n                for i in range(self.parameters[""nmodes""].value, oldn):\n                    del self.parameters[""phi%02d"" % i]\n                    del self.parameters[""tauD%02d"" % i]\n        return """", True\n\n    def calculate(self, f=None):\n        """"""Calculate the theory""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        tt.data[:, 0] = ft.data[:, 0]\n\n        nmodes = self.parameters[""nmodes""].value\n        taud = []\n        phi = []\n        for i in range(nmodes):\n            taud.append(self.parameters[""tauD%02d"" % i].value)\n            phi.append(self.parameters[""phi%02d"" % i].value)\n\n        for i in range(nmodes):\n            if self.stop_theory_flag:\n                break\n            G = self.parameters[""GN0""].value\n            if self.with_gcorr == GcorrMode.with_gcorr:\n                # G = G * sqrt(self.fZ(self.Zeff[i]))\n                G = G * self.gZ(self.Zeff[i])\n            for j in range(nmodes):\n                tau = 1.0 / (1.0 / taud[i] + 1.0 / taud[j])\n                wT = tt.data[:, 0] * tau\n                wTsq = wT ** 2\n                tt.data[:, 1] += G * phi[i] * phi[j] * wTsq / (1 + wTsq)\n                tt.data[:, 2] += G * phi[i] * phi[j] * wT / (1 + wTsq)\n\n\nclass CLTheoryRDPLVE(BaseTheoryRDPLVE, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # This class usually stays empty\n\n\nclass GUITheoryRDPLVE(BaseTheoryRDPLVE, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        # add widgets specific to the theory\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n\n        self.tbutmodes = QToolButton()\n        self.tbutmodes.setPopupMode(QToolButton.MenuButtonPopup)\n        menu = QMenu()\n        self.get_modes_action = menu.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-broadcasting.png""),\n            ""Get Modes (MWD app)"",\n        )\n        self.get_modes_data_action = menu.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-broadcasting.png""),\n            ""Get Modes (MWD data)"",\n        )\n        self.edit_modes_action = menu.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-edit-file.png""), ""Edit Modes""\n        )\n        # self.plot_modes_action = menu.addAction(\n        #     QIcon(\':/Icon8/Images/new_icons/icons8-scatter-plot.png\'),\n        #     ""Plot Modes"")\n        self.save_modes_action = menu.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-save-Maxwell.png""), ""Save Modes""\n        )\n        self.tbutmodes.setDefaultAction(self.get_modes_action)\n        self.tbutmodes.setMenu(menu)\n        tb.addWidget(self.tbutmodes)\n        # Modulus correction button\n        self.with_gcorr_button = tb.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-circled-g-filled.png""),\n            ""Modulus Correction"",\n        )\n        self.with_gcorr_button.setCheckable(True)\n\n        self.thToolsLayout.insertWidget(0, tb)\n\n        connection_id = self.get_modes_action.triggered.connect(self.get_modes_reptate)\n        connection_id = self.get_modes_data_action.triggered.connect(\n            self.edit_mwd_modes\n        )\n        connection_id = self.edit_modes_action.triggered.connect(self.edit_modes_window)\n        connection_id = self.with_gcorr_button.triggered.connect(\n            self.handle_with_gcorr_button\n        )\n        connection_id = self.save_modes_action.triggered.connect(self.save_modes)\n\n    def handle_with_gcorr_button(self, checked):\n        if checked:\n            if len(self.Zeff) > 0:\n                # if Zeff contains something\n                self.with_gcorr = GcorrMode.with_gcorr\n            else:\n                self.Qprint(\n                    ""<font color=orange><b>Modulus correction needs Z from MWD</b></font>""\n                )\n                self.with_gcorr_button.setChecked(False)\n                return\n        else:\n            self.with_gcorr = GcorrMode.none\n        self.parent_dataset.handle_actionCalculate_Theory()\n\n    def Qhide_theory_extras(self, show):\n        """"""Called when current theory is changed""""""\n        self.parent_dataset.actionMinimize_Error.setDisabled(show)\n        self.parent_dataset.actionShow_Limits.setDisabled(show)\n        self.parent_dataset.actionVertical_Limits.setDisabled(show)\n        self.parent_dataset.actionHorizontal_Limits.setDisabled(show)\n\n    def get_modes_reptate(self):\n        apmng = self.parent_dataset.parent_application.parent_manager\n        get_dict = {}\n        for app in apmng.applications.values():\n            app_index = apmng.ApplicationtabWidget.indexOf(app)\n            app_tab_name = apmng.ApplicationtabWidget.tabText(app_index)\n            for ds in app.datasets.values():\n                ds_index = app.DataSettabWidget.indexOf(ds)\n                ds_tab_name = app.DataSettabWidget.tabText(ds_index)\n                for th in ds.theories.values():\n                    th_index = ds.TheorytabWidget.indexOf(th)\n                    th_tab_name = ds.TheorytabWidget.tabText(th_index)\n                    if th.thname == ""Discretize MWD"":\n                        get_dict[\n                            ""%s.%s.%s"" % (app_tab_name, ds_tab_name, th_tab_name)\n                        ] = th.get_mwd\n\n        if get_dict:\n            d = GetMwdRepTate(self, get_dict, ""Select Discretized MWD"")\n            if d.exec_() and d.btngrp.checkedButton() != None:\n                _, success1 = self.set_param_value(""tau_e"", d.taue_text.text())\n                _, success2 = self.set_param_value(""Me"", d.Me_text.text())\n                if not success1 * success2:\n                    self.Qprint(""Could not understand Me or taue, try again"")\n                    return\n                item = d.btngrp.checkedButton().text()\n                m, phi = get_dict[item]()\n\n                self.MWD_m = np.copy(m)\n                self.MWD_phi = np.copy(phi)\n                self.set_modes_from_mwd(m, phi)\n        else:\n            # no theory Discretise MWD found\n            QMessageBox.warning(\n                self, ""Get MW distribution"", \'No ""Discretize MWD"" theory found\'\n            )\n        # self.parent_dataset.handle_actionCalculate_Theory()\n\n    def edit_modes_window(self):\n        nmodes = self.parameters[""nmodes""].value\n        phi = np.zeros(nmodes)\n        taud = np.zeros(nmodes)\n        for i in range(nmodes):\n            phi[i] = self.parameters[""phi%02d"" % i].value\n            taud[i] = self.parameters[""tauD%02d"" % i].value\n        param_dic = OrderedDict()\n        param_dic[""phi""] = phi\n        param_dic[""tauD""] = taud\n        d = EditModesDialog(self, param_dic, self.MAX_MODES)\n        if d.exec_():\n            nmodes = d.table.rowCount()\n            self.set_param_value(""nmodes"", nmodes)\n            # self.set_param_value(""nstretch"", nmodes)\n            success = True\n            for i in range(nmodes):\n                msg, success1 = self.set_param_value(\n                    ""phi%02d"" % i, d.table.item(i, 0).text()\n                )\n                msg, success2 = self.set_param_value(\n                    ""tauD%02d"" % i, d.table.item(i, 1).text()\n                )\n                success *= success1 * success2\n            if not success:\n                QMessageBox.warning(\n                    self,\n                    ""Error"",\n                    ""Some parameter(s) could not be updated.\\nPlease try again."",\n                )\n            else:\n                self.handle_actionCalculate_Theory()\n\n    def edit_mwd_modes(self):\n        d = EditMWDDialog(self, self.MWD_m, self.MWD_phi, 200)\n        if d.exec_():\n            nmodes = d.table.rowCount()\n            m = []\n            phi = []\n            _, success1 = self.set_param_value(""tau_e"", d.taue_text.text())\n            _, success2 = self.set_param_value(""Me"", d.Me_text.text())\n            if not success1 * success2:\n                self.Qprint(""Could not understand Me or taue, try again"")\n                return\n            for i in range(nmodes):\n                try:\n                    m.append(float(d.table.item(i, 0).text()))\n                    phi.append(float(d.table.item(i, 1).text()))\n                except ValueError:\n                    self.Qprint(""Could not understand line %d, try again"" % (i + 1))\n                    return\n            self.MWD_m = np.copy(m)\n            self.MWD_phi = np.copy(phi)\n            self.set_modes_from_mwd(m, phi)\n'"
RepTate/theories/TheoryReactMix.py,4,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#     Daniel Read, d.j.read@leeds.ac.uk\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryReactMix\n\n""""""\nimport numpy as np\nimport time\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom PyQt5.QtCore import pyqtSignal\n\nimport ctypes as ct\nimport RepTate.theories.react_ctypes_helper as rch\nimport RepTate.theories.react_gui_tools as rgt\n\n\nclass TheoryReactMix(CmdBase):\n    """"""BASIC THEORY DOCUMENTATION IS MISSING IN PYTHON FILE""""""\n\n    thname = ""React Mix""\n    description = ""Combine other active React theories""\n    citations = []\n    doi = []\n\n    def __new__(cls, name="""", parent_dataset=None, axarr=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryReactMix(name, parent_dataset, axarr)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryReactMix(name, parent_dataset, axarr)\n        )\n\n\nclass BaseTheoryReactMix:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = (\n        ""http://reptate.readthedocs.io/manual/Applications/React/Theory/mixture.html""\n    )\n    single_file = (\n        True  # False if the theory can be applied to multiple files simultaneously\n    )\n    thname = TheoryReactMix.thname\n    citations = TheoryReactMix.citations\n    doi = TheoryReactMix.doi\n\n    signal_mix_dialog = pyqtSignal(object)\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        self.function = self.Calc\n        self.simexists = False\n        self.calc_exists = False\n        self.has_modes = False  # True if the theory has modes\n\n        self.parameters[""nbin""] = Parameter(\n            name=""nbin"",\n            value=100,\n            description=""Number of molecular weight bins"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.reactname = ""ReactMix""\n        self.dists = []  # index of the react_dist array used in mix\n        self.weights = []  # weight of the dist\n        self.n_inmix = 0  # number of theories in mix\n        self.theory_names = []  # names of theories in mix\n        self.theory_simnumber = []  # \'react_dist[].simnumber\' of theories in mix\n        self.calcexists = False\n        self.do_priority_seniority = False\n        self.signal_mix_dialog.connect(rgt.launch_mix_dialog)\n        self.ratios = []  # list of ratios in dialog\n        self.include = []  # list of (0 or 1) include in dialog\n\n    def Calc(self, f=None):\n        """"""ReactMix function""""""\n        self.calcexists = False\n        nbins = int(np.round(self.parameters[""nbin""].value))\n        rch.set_do_prio_senio(ct.c_bool(self.do_priority_seniority))\n\n        # init theory data table - in case of error and \'return\'\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = 0\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n\n        # first check that some distributions have polymers in\n        distscheck = False\n        for i in range(rch.pb_global_const.maxreact):\n            distscheck = distscheck or rch.react_dist[i].contents.polysaved\n        if not distscheck:  # no distributions have polymers in\n            self.Qprint(""No polymers made in other theories yet!  Make some polymers."")\n            return\n\n        # show form\n        self.success_dialog = None\n        self.signal_mix_dialog.emit(self)\n        while self.success_dialog is None:  # wait for the end of QDialog\n            time.sleep(\n                0.5\n            )  # TODO: find a better way to wait for the dialog thread to finish\n        if not self.success_dialog:\n            self.Qprint(""Mixture cancelled"")\n            return\n\n        # check mix settings\n        if self.n_inmix == 0:\n            self.Qprint(""Mixture not defined"")\n            return\n\n        # do multiple binning based on form results\n        c_weights = (ct.c_double * self.n_inmix)()\n        c_dists = (ct.c_int * self.n_inmix)()\n        for i in range(self.n_inmix):\n            c_weights[i] = ct.c_double(float(self.weights[i]))\n            c_dists[i] = ct.c_int(int(self.dists[i]))\n        rch.multimolbin(ct.c_int(nbins), c_weights, c_dists, ct.c_int(self.n_inmix))\n\n        # resize theory data table\n        tt.num_rows = rch.bab_global.multi_nummwdbins\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n\n        for i in range(1, rch.bab_global.multi_nummwdbins + 1):\n            c_i = ct.c_int(i)\n            tt.data[i - 1, 0] = np.power(10, rch.return_binsandbob_multi_lgmid(c_i))\n            tt.data[i - 1, 1] = rch.return_binsandbob_multi_wt(c_i)\n            tt.data[i - 1, 2] = rch.return_binsandbob_multi_avg(c_i)\n            tt.data[i - 1, 3] = rch.return_binsandbob_multi_avbr(c_i)\n\n        totpoly = 0\n        totsaved = 0\n        self.Qprint(""<b>Mixture calculation results:</b>"")\n        # for i in range (1, rch.pb_global_const.maxreact):\n        #     if mixtureform.inmix[i]:\n        table = []\n        table.append([""Distribution"", ""#Polymer"", ""#Saved""])\n        for i, dist in enumerate(self.dists):\n            totpoly = totpoly + rch.react_dist[dist].contents.npoly\n            totsaved = totsaved + rch.react_dist[dist].contents.nsaved\n            table.append(\n                [\n                    str(self.theory_names[i]),\n                    str(rch.react_dist[dist].contents.npoly),\n                    str(rch.react_dist[dist].contents.nsaved),\n                ]\n            )\n            # self.Qprint(\'Used distribution %s\' % self.theory_names[i])\n            # self.Qprint(\n            #     \'Containing %d polymers\' % rch.react_dist[dist].contents.npoly)\n            # self.Qprint(\'Including %d saved polymers\' %\n            #             rch.react_dist[dist].contents.nsaved)\n        self.Qprint(table)\n        table = []\n        table.append(["""", """"])  # no header\n        table.append([""Total polymers"", ""%d"" % totpoly])\n        table.append([""Total saved polymers"", ""%d"" % totsaved])\n        table.append([""Mn"", ""%.3g"" % rch.bab_global.multi_m_n])\n        table.append([""Mw"", ""%.3g"" % rch.bab_global.multi_m_w])\n        table.append([""br/1000C"", ""%.3g"" % rch.bab_global.multi_brav])\n        self.Qprint(table)\n        self.calcexists = True\n        return rch.bab_global.multi_nummwdbins - 1\n\n    def do_error(self, line):\n        """"""This theory does not calculate the error""""""\n        pass\n\n    def set_extra_data(self, extra_data):\n        """"""Called when loading a project, set saved parameter values""""""\n        self.ratios = extra_data[""ratios""]\n        self.include = extra_data[""include""]\n        rgt.set_extra_data(self, extra_data)\n\n    def get_extra_data(self):\n        """"""Called when saving project. Save parameters in extra_data dict""""""\n        self.extra_data[""ratios""] = self.ratios\n        self.extra_data[""include""] = self.include\n        rgt.get_extra_data(self)\n\n\nclass CLTheoryReactMix(BaseTheoryReactMix, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # This class usually stays empty\n\n\nclass GUITheoryReactMix(BaseTheoryReactMix, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        rgt.initialise_tool_bar(self)\n        self.bob_settings_button.setDisabled(True)\n        self.btn_prio_senio.setDisabled(True)\n\n    def theory_buttons_disabled(self, state):\n        """"""\n        Enable/Disable theory buttons, typically called at the start and stop of a calculation.\n        This is relevant in multithread mode only.\n        """"""\n        self.save_bob_configuration_button.setDisabled(state)\n\n    def handle_save_bob_configuration(self):\n        """"""Save polymer configuraions to a file""""""\n        rgt.handle_save_mix_configuration(self)\n\n    def handle_edit_bob_settings(self):\n        """"""Open the BoB binnig settings dialog""""""\n        rgt.handle_edit_bob_settings(self)\n\n    def handle_btn_prio_senio(self, checked):\n        """"""Change do_priority_seniority""""""\n        # rgt.handle_btn_prio_senio(self, checked)\n'"
RepTate/theories/TheoryRetardationModes.py,26,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryRetardationModes\n\nModule that defines theories related to Retardation modes, in the frequency and time domains.\n\n""""""\nimport numpy as np\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.DataTable import DataTable\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom PyQt5.QtWidgets import QToolBar, QSpinBox\nfrom PyQt5.QtCore import QSize\nfrom PyQt5.QtGui import QIcon\nfrom RepTate.core.DraggableArtists import DragType, DraggableModesSeries\n\n\nclass TheoryRetardationModesTime(CmdBase):\n    """"""Fit a discrete Retardation spectrum to time dependent creep data\n    \n    * **Function**\n        .. math::\n            \\\\gamma(t) = \\\\sigma_0 \\\\left( J_0 + \\\\sum_{1}^{n_{modes}} J_i \\\\left[ 1 - \\\\exp\\\\left(\\\\frac{-t}{\\\\tau_i}\\\\right) \\\\right] + \\\\frac{t}{\\\\eta_0} \\\\right)\n    \n        where:\n          - :math:`\\\\sigma_0`: constant stress applied during the creep experiment.\n    \n    * **Parameters**\n       - :math:`J_0`: Instantaneous compliance (``logJini``, in logarithmic scale).\n       - :math:`\\\\eta_0`: Terminal viscosity (``logeta0``, in logarithmic scale).\n       - :math:`n_{modes}`: number of Retardation modes equally distributed in logarithmic scale between :math:`t_{min}` and :math:`t_{max}`.\n       - logtmin = :math:`\\\\log(t_{min})`: decimal logarithm of the minimum time range for the modes.\n       - logtmax = :math:`\\\\log(t_{max})`: decimal logarithm of the maximum time.\n       - logJi = :math:`\\\\log(J_{i})`: decimal logarithm of the compliance of Retardation mode :math:`i`.\n    \n    """"""\n\n    thname = ""Retardation Modes""\n    description = ""Fit Retardation modes to time dependent creep data""\n    citations = []\n    doi = []\n\n    def __new__(cls, name="""", parent_dataset=None, ax=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryRetardationModesTime(name, parent_dataset, ax)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryRetardationModesTime(name, parent_dataset, ax)\n        )\n\n\nclass BaseTheoryRetardationModesTime:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/Creep/Theory/theory.html#retardation-modes""\n    single_file = True\n    thname = TheoryRetardationModesTime.thname\n    citations = TheoryRetardationModesTime.citations\n    doi = TheoryRetardationModesTime.doi\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n        self.function = self.RetardationModesTime\n        self.has_modes = True\n        self.MAX_MODES = 40\n        self.view_modes = True\n        tmin = self.parent_dataset.minpositivecol(0)\n        tmax = self.parent_dataset.maxcol(0)\n        nmodes = int(np.round(np.log10(tmax / tmin)))\n\n        self.parameters[""logJini""] = Parameter(\n            ""logJini"",\n            -4.0,\n            ""Log of Instantaneous Compliance"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n        )\n        self.parameters[""logeta0""] = Parameter(\n            ""logeta0"",\n            0.0,\n            ""Log of Terminal Viscosity"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n        )\n        self.parameters[""logtmin""] = Parameter(\n            ""logtmin"",\n            np.log10(tmin),\n            ""Log of time range minimum"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n        )\n        self.parameters[""logtmax""] = Parameter(\n            ""logtmax"",\n            np.log10(tmax),\n            ""Log of time range maximum"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n        )\n        self.parameters[""nmodes""] = Parameter(\n            name=""nmodes"",\n            value=nmodes,\n            description=""Number of Retardation modes"",\n            type=ParameterType.integer,\n            opt_type=OptType.const,\n            display_flag=False,\n        )\n        # Interpolate modes from data\n        try:\n            sigma = float(self.parent_dataset.files[0].file_parameters[""stress""])\n        except (ValueError, KeyError):\n            self.Qprint(""Invalid stress value"")\n            return\n        tau = np.logspace(np.log10(tmin), np.log10(tmax), nmodes)\n        J = (\n            np.abs(\n                np.interp(\n                    tau,\n                    self.parent_dataset.files[0].data_table.data[:, 0],\n                    self.parent_dataset.files[0].data_table.data[:, 1],\n                )\n            )\n            / sigma\n        )\n        for i in range(self.parameters[""nmodes""].value):\n            self.parameters[""logJ%02d"" % i] = Parameter(\n                ""logJ%02d"" % i,\n                np.log10(J[i]),\n                ""Log of Mode %d amplitude"" % i,\n                ParameterType.real,\n                opt_type=OptType.opt,\n            )\n\n        # GRAPHIC MODES\n        self.graphicmodes = None\n        self.artistmodes = None\n        self.setup_graphic_modes()\n\n    def drag_mode(self, dx, dy):\n        """"""Drag modes around""""""\n        nmodes = self.parameters[""nmodes""].value\n        self.set_param_value(""logtmin"", dx[0])\n        self.set_param_value(""logtmax"", dx[nmodes - 1])\n        for i in range(nmodes):\n            self.set_param_value(""logJ%02d"" % i, dy[i])\n        self.do_calculate("""")\n        self.update_parameter_table()\n\n    def update_modes(self):\n        """"""Do nothing""""""\n        pass\n\n    def setup_graphic_modes(self):\n        """"""Setup graphic helpers""""""\n        nmodes = self.parameters[""nmodes""].value\n        tau = np.logspace(\n            self.parameters[""logtmin""].value, self.parameters[""logtmax""].value, nmodes\n        )\n        J = np.zeros(nmodes)\n        for i in range(nmodes):\n            J[i] = np.power(10, self.parameters[""logJ%02d"" % i].value)\n\n        self.graphicmodes = self.ax.plot(tau, J)[0]\n        self.graphicmodes.set_marker(""D"")\n        self.graphicmodes.set_linestyle("""")\n        self.graphicmodes.set_visible(self.view_modes)\n        self.graphicmodes.set_markerfacecolor(""yellow"")\n        self.graphicmodes.set_markeredgecolor(""black"")\n        self.graphicmodes.set_markeredgewidth(3)\n        self.graphicmodes.set_markersize(8)\n        self.graphicmodes.set_alpha(0.5)\n        self.artistmodes = DraggableModesSeries(\n            self.graphicmodes,\n            DragType.special,\n            self.parent_dataset.parent_application,\n            self.drag_mode,\n        )\n        self.plot_theory_stuff()\n\n    def destructor(self):\n        """"""Called when the theory tab is closed""""""\n        self.graphicmodes_visible(False)\n        self.ax.lines.remove(self.graphicmodes)\n\n    def show_theory_extras(self, show=False):\n        """"""Called when the active theory is changed""""""\n        if CmdBase.mode == CmdMode.GUI:\n            self.Qhide_theory_extras(show)\n        self.graphicmodes_visible(show)\n\n    def graphicmodes_visible(self, state):\n        """"""Change visibility of modes""""""\n        self.view_modes = state\n        self.graphicmodes.set_visible(self.view_modes)\n        if self.view_modes:\n            self.artistmodes.connect()\n        else:\n            self.artistmodes.disconnect()\n        # self.do_calculate("""")\n        self.parent_dataset.parent_application.update_plot()\n\n    def get_modes(self):\n        """"""Get the values of Maxwell Modes from this theory""""""\n        nmodes = self.parameters[""nmodes""].value\n        tau = np.logspace(\n            self.parameters[""logtmin""].value, self.parameters[""logtmax""].value, nmodes\n        )\n        J = np.zeros(nmodes)\n        for i in range(nmodes):\n            J[i] = 1.0 / np.power(10, self.parameters[""logJ%02d"" % i].value)\n        return tau, J, True\n\n    def RetardationModesTime(self, f=None):\n        """"""Calculate the theory""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        tt.data[:, 0] = ft.data[:, 0]\n\n        try:\n            stress = float(f.file_parameters[""stress""])\n        except (ValueError, KeyError):\n            self.Qprint(""Invalid stress value"")\n            return\n        nmodes = self.parameters[""nmodes""].value\n        J0 = np.power(10, self.parameters[""logJini""].value)\n        eta0 = np.power(10, self.parameters[""logeta0""].value)\n        tau = np.logspace(\n            self.parameters[""logtmin""].value, self.parameters[""logtmax""].value, nmodes\n        )\n\n        for i in range(nmodes):\n            if self.stop_theory_flag:\n                break\n            expT_tau = 1.0 - np.exp(-tt.data[:, 0] / tau[i])\n            J = np.power(10, self.parameters[""logJ%02d"" % i].value)\n            tt.data[:, 1] += stress * J * expT_tau\n        tt.data[:, 1] += stress * (J0 + tt.data[:, 0] / eta0)\n\n    def plot_theory_stuff(self):\n        """"""Plot theory helpers""""""\n        if not self.view_modes:\n            return\n        data_table_tmp = DataTable(self.axarr)\n        data_table_tmp.num_columns = 2\n        nmodes = self.parameters[""nmodes""].value\n        data_table_tmp.num_rows = nmodes\n        data_table_tmp.data = np.zeros((nmodes, 2))\n        tau = np.logspace(\n            self.parameters[""logtmin""].value, self.parameters[""logtmax""].value, nmodes\n        )\n        data_table_tmp.data[:, 0] = tau\n        for i in range(nmodes):\n            if self.stop_theory_flag:\n                break\n            data_table_tmp.data[i, 1] = np.power(\n                10, self.parameters[""logJ%02d"" % i].value\n            )\n        view = self.parent_dataset.parent_application.current_view\n        try:\n            x, y, success = view.view_proc(data_table_tmp, None)\n        except TypeError as e:\n            print(e)\n            return\n        self.graphicmodes.set_data(x, y)\n        for i in range(data_table_tmp.MAX_NUM_SERIES):\n            for nx in range(len(self.axarr)):\n                self.axarr[nx].lines.remove(data_table_tmp.series[nx][i])\n\n\nclass CLTheoryRetardationModesTime(BaseTheoryRetardationModesTime, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n\nclass GUITheoryRetardationModesTime(BaseTheoryRetardationModesTime, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n        # add widgets specific to the theory\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n        self.spinbox = QSpinBox()\n        self.spinbox.setRange(1, self.MAX_MODES)  # min and max number of modes\n        self.spinbox.setSuffix("" modes"")\n        self.spinbox.setValue(self.parameters[""nmodes""].value)  # initial value\n        tb.addWidget(self.spinbox)\n        self.modesaction = tb.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-visible.png""), ""View modes""\n        )\n        self.modesaction.setCheckable(True)\n        self.modesaction.setChecked(True)\n        self.thToolsLayout.insertWidget(0, tb)\n\n        connection_id = self.spinbox.valueChanged.connect(\n            self.handle_spinboxValueChanged\n        )\n        connection_id = self.modesaction.triggered.connect(self.modesaction_change)\n\n    def Qhide_theory_extras(self, state):\n        """"""Uncheck the modeaction button. Called when curent theory is changed""""""\n        self.modesaction.setChecked(state)\n\n    def modesaction_change(self, checked):\n        """"""Change visibility of modes""""""\n        self.graphicmodes_visible(checked)\n        # self.view_modes = self.modesaction.isChecked()\n        # self.graphicmodes.set_visible(self.view_modes)\n        # if self.view_modes:\n        #     self.artistmodes.connect()\n        # else:\n        #     self.artistmodes.disconnect()\n        # self.do_calculate("""")\n\n    def handle_spinboxValueChanged(self, value):\n        """"""Handle a change of the parameter \'nmode\'""""""\n        nmodesold = self.parameters[""nmodes""].value\n        tminold = self.parameters[""logtmin""].value\n        tmaxold = self.parameters[""logtmax""].value\n        tauold = np.logspace(tminold, tmaxold, nmodesold)\n        Gold = np.zeros(nmodesold)\n        for i in range(nmodesold):\n            Gold[i] = self.parameters[""logJ%02d"" % i].value\n            del self.parameters[""logJ%02d"" % i]\n\n        nmodesnew = value\n        self.set_param_value(""nmodes"", nmodesnew)\n        taunew = np.logspace(tminold, tmaxold, nmodesnew)\n\n        Gnew = np.interp(taunew, tauold, Gold)\n\n        for i in range(nmodesnew):\n            self.parameters[""logJ%02d"" % i] = Parameter(\n                ""logJ%02d"" % i,\n                Gnew[i],\n                ""Log of Mode %d compliance"" % i,\n                ParameterType.real,\n                opt_type=OptType.opt,\n            )\n\n        if self.autocalculate:\n            self.parent_dataset.handle_actionCalculate_Theory()\n        self.update_parameter_table()\n'"
RepTate/theories/TheoryRolieDoublePoly.py,24,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryRolieDoublePoly\n\nModule for the Rolie-Double-Poly theory for the non-linear flow of entangled polymers.\n\n""""""\nimport os\nimport numpy as np\nfrom scipy.integrate import odeint\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom RepTate.core.DataTable import DataTable\nfrom PyQt5.QtWidgets import QToolBar, QToolButton, QMenu, QMessageBox, QFileDialog\nfrom PyQt5.QtCore import QSize\nfrom PyQt5.QtGui import QIcon\nfrom PyQt5.QtCore import Qt\nfrom RepTate.gui.Theory_rc import *\nfrom math import sqrt\nimport time\nimport RepTate\n\nimport RepTate.theories.rp_blend_ctypes_helper as rpch\nfrom RepTate.core.Theory import EndComputationRequested\nfrom collections import OrderedDict\nfrom RepTate.theories.theory_helpers import (\n    FlowMode,\n    EditModesVolFractionsDialog,\n    FeneMode,\n    GcorrMode,\n    Dilution,\n    EditMWDDialog,\n    GetMwdRepTate\n)\n\n\nclass TheoryRolieDoublePoly(CmdBase):\n    """"""Rolie-Double-Poly equations for the nonlinear predictions of polydisperse melts of entangled linear polymers\n\n    * **Function**\n        .. math::\n            \\\\boldsymbol \\\\sigma = G_N^0 \\\\sum_i g(Z_{\\\\text{eff},i}) \\\\text{fene}(\\\\lambda_i) \\\\phi_i \\\\boldsymbol A_i\n\n        where\n            .. math::\n                \\\\boldsymbol A_i &= \\\\sum_j \\\\phi_j \\\\boldsymbol A_{ij}\\\\\\\\\n                \\\\lambda_i &= \\\\left( \\\\dfrac{\\\\text{Tr}  \\\\boldsymbol A_i}{3}  \\\\right)^{1/2}\\\\\\\\\n                \\\\stackrel{\\\\nabla}{\\\\boldsymbol  A_{ij}} &=\n                -\\\\dfrac{1}{\\\\tau_{\\\\mathrm d,i}} (\\\\boldsymbol A_{ij} - \\\\boldsymbol I)\n                -\\\\dfrac{2}{\\\\tau_{\\\\mathrm s,i}} \\\\dfrac{\\\\lambda_i - 1}{\\\\lambda_i} \\\\boldsymbol A_{ij}\n                -\\\\left( \\\\dfrac{\\\\beta_\\\\text{th}}{\\\\tau_{\\\\mathrm d,j}} \n                + \\\\beta_\\\\text{CCR}\\\\dfrac{2}{\\\\tau_{\\\\mathrm s,j}} \\\\dfrac{\\\\lambda_j - 1}{\\\\lambda_j}\\\\lambda_i^{2\\\\delta} \\\\right)\n                (\\\\boldsymbol A_{ij} - \\\\boldsymbol I)\\\\\\\\\n                \\\\text{fene}(\\\\lambda) &= \\\\dfrac{1-1/\\\\lambda_\\\\text{max}^2}{1-\\\\lambda^2/\\\\lambda_\\\\text{max}^2}\n        \n        with :math:`\\\\beta_\\\\text{th}` the thermal constrain release parameter, set to 1. If the ""modulus correction"" button\n        is pressed, :math:`g(z) = 1- \\\\dfrac{c_1}{z^{1/2}} + \\\\dfrac{c_2}{z} + \\\\dfrac{c_3}{z^{3/2}}` is the Likhtman-McLeish\n        CLF correction function to the modulus (:math:`c_1=1.69`, :math:`c_2=2`, :math:`c_3=-1.24`), :math:`g(z) = 1` otherwise;\n        :math:`Z_{\\\\text{eff},i}=Z_i\\\\phi_{\\\\text{dil},i}` is the\n        effective entanglement number of the molecular weight component :math:`i`, and :math:`\\\\phi_{\\\\text{dil},i}` the\n        dilution factor (:math:`\\\\phi_{\\\\text{dil},i}\\\\leq \\\\phi_i`).\n\n    * **Parameters**\n       - ``GN0`` :math:`\\\\equiv G_N^0`: Plateau modulus\n       - ``beta`` :math:`\\\\equiv\\\\beta_\\\\text{CCR}`: Rolie-Poly CCR parameter\n       - ``delta`` :math:`\\\\equiv\\\\delta`: Rolie-Poly CCR exponent\n       - ``phi_i`` :math:`\\\\equiv\\\\phi_i`: Volume fraction of species :math:`i`\n       - ``tauD_i`` :math:`\\\\equiv\\\\tau_{\\\\mathrm d,i}`: Reptation time of species :math:`i` (including CLF)\n       - ``tauR_i`` :math:`\\\\equiv\\\\tau_{\\\\mathrm s,i}`: Stretch relaxation time of species :math:`i`\n       - ``lmax`` :math:`\\\\equiv\\\\lambda_\\\\text{max}`: Maximum stretch ratio (active only when the ""fene button"" is pressed)\n    """"""\n\n    thname = ""Rolie-Double-Poly""\n    description = ""Rolie-Double-Poly const. eq. for polydisperse melts of entangled linear polymers""\n    citations = [""Boudara V.A.H. et al., J. Rheol. 63, 71-91 (2019)""]\n    doi = [""http://dx.doi.org/10.1122/1.5052320""]\n\n    def __new__(cls, name="""", parent_dataset=None, ax=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryRolieDoublePoly(name, parent_dataset, ax)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryRolieDoublePoly(name, parent_dataset, ax)\n        )\n\n\nclass BaseTheoryRolieDoublePoly:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/NLVE/Theory/theory.html#rolie-double-poly-equations""\n    single_file = False\n    thname = TheoryRolieDoublePoly.thname\n    citations = TheoryRolieDoublePoly.citations\n    doi = TheoryRolieDoublePoly.doi\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        self.function = self.RolieDoublePoly\n        self.has_modes = True\n        self.autocalculate = False\n        self.parameters[""beta""] = Parameter(\n            name=""beta"",\n            value=1,\n            description=""CCR coefficient"",\n            type=ParameterType.real,\n            opt_type=OptType.nopt,\n        )\n        self.parameters[""delta""] = Parameter(\n            name=""delta"",\n            value=-0.5,\n            description=""CCR exponent"",\n            type=ParameterType.real,\n            opt_type=OptType.nopt,\n        )\n        self.parameters[""lmax""] = Parameter(\n            name=""lmax"",\n            value=10.0,\n            description=""Maximum extensibility"",\n            type=ParameterType.real,\n            opt_type=OptType.nopt,\n            display_flag=False,\n            min_value=1.01,\n        )\n        self.parameters[""nmodes""] = Parameter(\n            name=""nmodes"",\n            value=2,\n            description=""Number of modes"",\n            type=ParameterType.integer,\n            opt_type=OptType.const,\n            display_flag=False,\n        )\n        self.parameters[""GN0""] = Parameter(\n            name=""GN0"",\n            value=1000.0,\n            description=""Plateau modulus"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n            min_value=0,\n        )\n        self.parameters[""Me""] = Parameter(\n            name=""Me"",\n            value=1e4,\n            description=""Entanglement molecular mass"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n            min_value=0,\n            display_flag=False,\n        )\n        self.parameters[""tau_e""] = Parameter(\n            name=""tau_e"",\n            value=0.01,\n            description=""Entanglement relaxation time"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n            min_value=0,\n            display_flag=False,\n        )\n        nmode = self.parameters[""nmodes""].value\n        for i in range(nmode):\n            self.parameters[""phi%02d"" % i] = Parameter(\n                name=""phi%02d"" % i,\n                value=1.0 / nmode,\n                description=""Volume fraction of mode %02d"" % i,\n                type=ParameterType.real,\n                opt_type=OptType.nopt,\n                display_flag=False,\n                min_value=0,\n            )\n            self.parameters[""tauD%02d"" % i] = Parameter(\n                name=""tauD%02d"" % i,\n                value=100.0,\n                description=""Terminal time of mode %02d"" % i,\n                type=ParameterType.real,\n                opt_type=OptType.nopt,\n                display_flag=False,\n                min_value=0,\n            )\n            self.parameters[""tauR%02d"" % i] = Parameter(\n                name=""tauR%02d"" % i,\n                value=1,\n                description=""Rouse time of mode %02d"" % i,\n                type=ParameterType.real,\n                opt_type=OptType.opt,\n                min_value=0,\n            )\n\n        self.view_LVEenvelope = False\n        auxseries = self.ax.plot([], [], label="""")\n        self.LVEenvelopeseries = auxseries[0]\n        self.LVEenvelopeseries.set_marker("""")\n        self.LVEenvelopeseries.set_linestyle(""--"")\n        self.LVEenvelopeseries.set_visible(self.view_LVEenvelope)\n        self.LVEenvelopeseries.set_color(""green"")\n        self.LVEenvelopeseries.set_linewidth(5)\n        self.LVEenvelopeseries.set_label("""")\n\n        self.MAX_MODES = 40\n        self.with_fene = FeneMode.none\n        self.with_gcorr = GcorrMode.none\n        self.Zeff = []\n        self.MWD_m = [100, 1000]\n        self.MWD_phi = [0.5, 0.5]\n        self.init_flow_mode()\n\n    def set_extra_data(self, extra_data):\n        """"""Set extra data when loading project""""""\n        self.MWD_m = extra_data[""MWD_m""]\n        self.MWD_phi = extra_data[""MWD_phi""]\n        self.Zeff = extra_data[""Zeff""]\n\n        # FENE button\n        self.handle_with_fene_button(extra_data[""with_fene""])\n\n        # G button\n        if extra_data[""with_gcorr""]:\n            self.with_gcorr == GcorrMode.with_gcorr\n            self.with_gcorr_button.setChecked(True)\n\n    def get_extra_data(self):\n        """"""Set extra_data when saving project""""""\n        self.extra_data[""MWD_m""] = self.MWD_m\n        self.extra_data[""MWD_phi""] = self.MWD_phi\n        self.extra_data[""Zeff""] = self.Zeff\n        self.extra_data[""with_fene""] = self.with_fene == FeneMode.with_fene\n        self.extra_data[""with_gcorr""] = self.with_gcorr == GcorrMode.with_gcorr\n\n    def init_flow_mode(self):\n        """"""Find if data files are shear or extension""""""\n        try:\n            f = self.theory_files()[0]\n            if f.file_type.extension == ""shear"":\n                self.flow_mode = FlowMode.shear\n            else:\n                self.flow_mode = FlowMode.uext\n        except Exception as e:\n            print(""in RP init:"", e)\n            self.flow_mode = FlowMode.shear  # default mode: shear\n\n    def destructor(self):\n        """"""Called when the theory tab is closed""""""\n        self.show_theory_extras(False)\n        self.ax.lines.remove(self.LVEenvelopeseries)\n\n    def show_theory_extras(self, show=False):\n        """"""Called when the active theory is changed""""""\n        if CmdBase.mode == CmdMode.GUI:\n            self.Qhide_theory_extras(show)\n        # self.extra_graphic_visible(show)\n\n    def extra_graphic_visible(self, state):\n        """"""Change visibility of graphic helpers""""""\n        self.view_LVEenvelope = state\n        self.LVEenvelopeseries.set_visible(state)\n        self.parent_dataset.parent_application.update_plot()\n\n    def get_modes(self):\n        """"""Get the values of Maxwell Modes from this theory""""""\n        nmodes = self.parameters[""nmodes""].value\n        tau = np.zeros(nmodes)\n        G = np.zeros(nmodes)\n        GN0 = self.parameters[""GN0""].value\n        for i in range(nmodes):\n            tau[i] = self.parameters[""tauD%02d"" % i].value\n            G[i] = GN0 * self.parameters[""phi%02d"" % i].value\n        return tau, G, True\n\n    def set_modes_from_mwd(self, m, phi):\n        """"""Set modes from MWD""""""\n        Me = self.parameters[""Me""].value\n        taue = self.parameters[""tau_e""].value\n        res = Dilution(m, phi, taue, Me, self).res\n        if res[0] == False:\n            self.Qprint(""Could not set modes from MDW"")\n            return\n        _, phi, taus, taud = res\n        nmodes = len(phi)\n        self.set_param_value(""nmodes"", nmodes)\n        for i in range(nmodes):\n            self.set_param_value(""phi%02d"" % i, phi[i])\n            self.set_param_value(""tauR%02d"" % i, taus[i])\n            self.set_param_value(""tauD%02d"" % i, taud[i])\n        self.Qprint(""Got %d modes from MWD"" % nmodes)\n        self.update_parameter_table()\n        self.Qprint(\n            \'<font color=green><b>Press ""Calculate"" to update theory</b></font>\'\n        )\n\n    def set_modes(self, tau, G):\n        """"""Set the values of Maxwell Modes from another theory""""""\n        nmodes = len(tau)\n        self.set_param_value(""nmodes"", nmodes)\n        sum_G = G.sum()\n\n        for i in range(nmodes):\n            self.set_param_value(""tauD%02d"" % i, tau[i])\n            self.set_param_value(""phi%02d"" % i, G[i] / sum_G)\n        self.update_parameter_table()\n        return True\n\n    def fZ(self, z):\n        """"""CLF correction function Likthman-McLeish (2002)""""""\n        return 1 - 2 * 1.69 / sqrt(z) + 4.17 / z - 1.55 / (z * sqrt(z))\n\n    def gZ(self, z):\n        """"""CLF correction function for modulus Likthman-McLeish (2002)""""""\n        return 1 - 1.69 / sqrt(z) + 2.0 / z - 1.24 / (z * sqrt(z))\n\n    def sigmadot_shear(self, sigma, t, p):\n        """"""Rolie-Poly differential equation under *shear* flow\n        with stretching and finite extensibility if selected""""""\n        if self.stop_theory_flag:\n            raise EndComputationRequested\n        tmax = p[-1]\n        if t >= tmax * self.count:\n            self.Qprint(""--"", end="""")\n            self.count += 0.2\n\n        # Calling C function:\n        if self.with_fene == FeneMode.with_fene:\n            wfene = 1\n        else:\n            wfene = 0\n        return rpch.compute_derivs_shear(sigma, p, t, wfene)\n\n    def sigmadot_uext(self, sigma, t, p):\n        """"""Rolie-Poly differential equation under *uniaxial elongational* flow\n        with stretching and finite extensibility if selecter""""""\n        if self.stop_theory_flag:\n            raise EndComputationRequested\n        tmax = p[-1]\n        if t >= tmax * self.count:\n            self.Qprint(""--"", end="""")\n            # self.Qprint(""%4d%% done"" % (self.count*100))\n            self.count += 0.2\n\n        # Calling C function:\n        if self.with_fene == FeneMode.with_fene:\n            wfene = 1\n        else:\n            wfene = 0\n        return rpch.compute_derivs_uext(sigma, p, t, wfene)\n\n    def calculate_fene(self, l_square, lmax):\n        """"""calculate finite extensibility function value""""""\n        ilm2 = 1.0 / (lmax * lmax)  # 1/lambda_max^2\n        l2_lm2 = l_square * ilm2  # (lambda/lambda_max)^2\n        return (3.0 - l2_lm2) / (1.0 - l2_lm2) * (1.0 - ilm2) / (3.0 - ilm2)\n\n    def RolieDoublePoly(self, f=None):\n        """"""Calculate the theory""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        tt.data[:, 0] = ft.data[:, 0]\n\n        # ODE solver parameters\n        abserr = 1.0e-8\n        relerr = 1.0e-8\n        t = ft.data[:, 0]\n        t = np.concatenate([[0], t])\n        # sigma0 = [1.0, 1.0, 0.0]  # sxx, syy, sxy\n        beta = self.parameters[""beta""].value\n        delta = self.parameters[""delta""].value\n        lmax = self.parameters[""lmax""].value\n        flow_rate = float(f.file_parameters[""gdot""])\n        nmodes = self.parameters[""nmodes""].value\n\n        # flow geometry\n        if self.flow_mode == FlowMode.shear:\n            sigma0 = [1.0, 1.0, 0.0] * (nmodes * nmodes)  # sxx_ij, syy_ij, sxy_ij\n            pde_stretch = self.sigmadot_shear\n        elif self.flow_mode == FlowMode.uext:\n            sigma0 = [1.0, 1.0] * (nmodes * nmodes)  # sxx_ij, syy_ij\n            pde_stretch = self.sigmadot_uext\n        else:\n            return\n\n        taud_arr = []\n        taus_arr = []\n        phi_arr = []\n        for i in range(nmodes):\n            taud_arr.append(self.parameters[""tauD%02d"" % i].value)\n            taus_arr.append(self.parameters[""tauR%02d"" % i].value)\n            phi_arr.append(self.parameters[""phi%02d"" % i].value)\n        tmax = t[-1]\n        p = [nmodes, lmax, phi_arr, taud_arr, taus_arr, beta, delta, flow_rate, tmax]\n        self.count = 0.2\n        self.Qprint(""Rate %.3g<br>  0%% "" % flow_rate, end="""")\n        try:\n            sig = odeint(pde_stretch, sigma0, t, args=(p,), atol=abserr, rtol=relerr)\n        except EndComputationRequested:\n            return\n        self.Qprint("" 100%"")\n        # sig.shape is (len(t), 3*n^2) in shear\n        if self.flow_mode == FlowMode.shear:\n            c = 3\n            sig = sig[1:, :]\n            nt = len(sig)\n            lsq = np.zeros((nt, nmodes))\n            if self.with_fene == FeneMode.with_fene:\n                # calculate lambda^2\n                for i in range(nmodes):\n                    if self.stop_theory_flag:\n                        break\n                    I = c * nmodes * i\n                    trace_arr = np.zeros(nt)\n                    for j in range(nmodes):\n                        # trace_arr += phi_arr[j] * (sxx_t[:, I + j] + 2 * syy_t[:, I + j])\n                        trace_arr += phi_arr[j] * (\n                            sig[:, I + c * j] + 2 * sig[:, I + c * j + 1]\n                        )\n                    lsq[:, i] = trace_arr / 3.0  # len(t) rows and n cols\n\n            for i in range(nmodes):\n                if self.stop_theory_flag:\n                    break\n                I = c * nmodes * i\n                sig_i = np.zeros(nt)\n                for j in range(nmodes):\n                    sig_i += phi_arr[j] * sig[:, I + c * j + 2]\n\n                if self.with_fene == FeneMode.with_fene:\n                    sig_i *= self.calculate_fene(lsq[:, i], lmax)\n                if self.with_gcorr == GcorrMode.with_gcorr:\n                    sig_i *= self.gZ(self.Zeff[i])\n                tt.data[:, 1] += phi_arr[i] * sig_i\n            tt.data[:, 1] *= self.parameters[""GN0""].value\n\n        if self.flow_mode == FlowMode.uext:\n            # every 2 component we find xx, yy, starting at 0, or 1; and remove t=0\n            # sxx_t = sig[1:, 0::2] # len(t) - 1 rows and n^2 cols\n            # syy_t = sig[1:, 1::2] # len(t) - 1 rows and n^2 cols\n\n            # nt = len(sxx_t)\n            c = 2\n            sig = sig[1:, :]\n            nt = len(sig)\n            lsq = np.zeros((nt, nmodes))\n            if self.with_fene == FeneMode.with_fene:\n                for i in range(nmodes):\n                    if self.stop_theory_flag:\n                        break\n                    I = c * nmodes * i\n                    trace_arr = np.zeros(nt)\n                    for j in range(nmodes):\n                        trace_arr += phi_arr[j] * (\n                            sig[:, I + c * j] + 2 * sig[:, I + c * j + 1]\n                        )\n                    lsq[:, i] = trace_arr / 3.0  # len(t) rows and n cols\n\n            for i in range(nmodes):\n                if self.stop_theory_flag:\n                    break\n                I = c * nmodes * i\n                sig_i = np.zeros(nt)\n                for j in range(nmodes):\n                    sig_i += phi_arr[j] * (sig[:, I + c * j] - sig[:, I + c * j + 1])\n\n                if self.with_fene == FeneMode.with_fene:\n                    sig_i *= self.calculate_fene(lsq[:, i], lmax)\n                if self.with_gcorr == GcorrMode.with_gcorr:\n                    sig_i *= self.gZ(self.Zeff[i])\n                tt.data[:, 1] += phi_arr[i] * sig_i\n\n            tt.data[:, 1] *= self.parameters[""GN0""].value\n\n    def set_param_value(self, name, value):\n        """"""Set the value of theory parameters""""""\n        if name == ""nmodes"":\n            oldn = self.parameters[""nmodes""].value\n            # self.spinbox.setMaximum(int(value))\n        message, success = super(BaseTheoryRolieDoublePoly, self).set_param_value(\n            name, value\n        )\n        if not success:\n            return message, success\n        if name == ""nmodes"":\n            for i in range(self.parameters[""nmodes""].value):\n                self.parameters[""phi%02d"" % i] = Parameter(\n                    name=""phi%02d"" % i,\n                    value=0.0,\n                    description=""Volume fraction of mode %02d"" % i,\n                    type=ParameterType.real,\n                    opt_type=OptType.nopt,\n                    display_flag=False,\n                    min_value=0,\n                )\n                self.parameters[""tauD%02d"" % i] = Parameter(\n                    name=""tauD%02d"" % i,\n                    value=100.0,\n                    description=""Terminal time of mode %02d"" % i,\n                    type=ParameterType.real,\n                    opt_type=OptType.nopt,\n                    display_flag=False,\n                    min_value=0,\n                )\n                self.parameters[""tauR%02d"" % i] = Parameter(\n                    name=""tauR%02d"" % i,\n                    value=1,\n                    description=""Rouse time of mode %02d"" % i,\n                    type=ParameterType.real,\n                    opt_type=OptType.opt,\n                    display_flag=True,\n                    min_value=0,\n                )\n            if oldn > self.parameters[""nmodes""].value:\n                for i in range(self.parameters[""nmodes""].value, oldn):\n                    del self.parameters[""phi%02d"" % i]\n                    del self.parameters[""tauD%02d"" % i]\n                    del self.parameters[""tauR%02d"" % i]\n        return """", True\n\n    def do_fit(self, line):\n        """"""Minimisation procedure disabled in this theory""""""\n        self.Qprint(\n            ""<font color=red><b>Minimisation procedure disabled in this theory</b></font>""\n        )\n\n\nclass CLTheoryRolieDoublePoly(BaseTheoryRolieDoublePoly, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n\nclass GUITheoryRolieDoublePoly(BaseTheoryRolieDoublePoly, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n        # add widgets specific to the theory\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n\n        self.tbutflow = QToolButton()\n        self.tbutflow.setPopupMode(QToolButton.MenuButtonPopup)\n        menu = QMenu()\n        self.shear_flow_action = menu.addAction(\n            QIcon("":/Icon8/Images/new_icons/icon-shear.png""), ""Shear Flow""\n        )\n        self.extensional_flow_action = menu.addAction(\n            QIcon("":/Icon8/Images/new_icons/icon-uext.png""), ""Extensional Flow""\n        )\n        if self.flow_mode == FlowMode.shear:\n            self.tbutflow.setDefaultAction(self.shear_flow_action)\n        else:\n            self.tbutflow.setDefaultAction(self.extensional_flow_action)\n        self.tbutflow.setMenu(menu)\n        tb.addWidget(self.tbutflow)\n\n        self.tbutmodes = QToolButton()\n        self.tbutmodes.setPopupMode(QToolButton.MenuButtonPopup)\n        menu = QMenu()\n        self.get_modes_action = menu.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-broadcasting.png""),\n            ""Get Modes (MWD app)"",\n        )\n        self.get_modes_data_action = menu.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-broadcasting.png""),\n            ""Get Modes (MWD data)"",\n        )\n        self.edit_modes_action = menu.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-edit-file.png""), ""Edit Modes""\n        )\n        # self.plot_modes_action = menu.addAction(\n        #     QIcon(\':/Icon8/Images/new_icons/icons8-scatter-plot.png\'),\n        #     ""Plot Modes"")\n        self.save_modes_action = menu.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-save-Maxwell.png""), ""Save Modes""\n        )\n        self.tbutmodes.setDefaultAction(self.get_modes_action)\n        self.tbutmodes.setMenu(menu)\n        tb.addWidget(self.tbutmodes)\n        # #Show LVE button\n        self.linearenvelope = tb.addAction(\n            QIcon("":/Icon8/Images/new_icons/lve-icon.png""), ""Show Linear Envelope""\n        )\n        self.linearenvelope.setCheckable(True)\n        self.linearenvelope.setChecked(False)\n        # Finite extensibility button\n        self.with_fene_button = tb.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-infinite.png""),\n            ""Finite Extensibility"",\n        )\n        self.with_fene_button.setCheckable(True)\n        # Modulus correction button\n        self.with_gcorr_button = tb.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-circled-g-filled.png""),\n            ""Modulus Correction"",\n        )\n        self.with_gcorr_button.setCheckable(True)\n\n        # Save to flowsolve button\n        self.flowsolve_btn = tb.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-save-flowsolve.png""),\n            ""Save Parameters To FlowSolve"",\n        )\n        self.flowsolve_btn.setCheckable(False)\n\n        self.thToolsLayout.insertWidget(0, tb)\n\n        connection_id = self.shear_flow_action.triggered.connect(self.select_shear_flow)\n        connection_id = self.extensional_flow_action.triggered.connect(\n            self.select_extensional_flow\n        )\n        connection_id = self.get_modes_action.triggered.connect(self.get_modes_reptate)\n        connection_id = self.get_modes_data_action.triggered.connect(\n            self.edit_mwd_modes\n        )\n        connection_id = self.edit_modes_action.triggered.connect(self.edit_modes_window)\n        # connection_id = self.plot_modes_action.triggered.connect(\n        #     self.plot_modes_graph)\n        connection_id = self.linearenvelope.triggered.connect(self.show_linear_envelope)\n        connection_id = self.save_modes_action.triggered.connect(self.save_modes)\n        connection_id = self.with_fene_button.triggered.connect(\n            self.handle_with_fene_button\n        )\n        connection_id = self.with_gcorr_button.triggered.connect(\n            self.handle_with_gcorr_button\n        )\n        connection_id = self.flowsolve_btn.triggered.connect(self.handle_flowsolve_btn)\n\n    def handle_flowsolve_btn(self):\n        """"""Save theory parameters in FlowSolve format""""""\n\n        # Get filename of RepTate project to open\n        fpath, _ = QFileDialog.getSaveFileName(\n            self, ""Save Parameters to FowSolve"", os.path.join(RepTate.root_dir, ""data""), ""FlowSolve (*.fsrep)""\n        )\n        if fpath == """":\n            return\n\n        with open(fpath, ""w"") as f:\n            verdata = RepTate._version.get_versions()\n            version = verdata[""version""].split(""+"")[0]\n            date = verdata[""date""].split(""T"")[0]\n            build = verdata[""version""]\n            header = ""#flowGen input\\n""\n            header += ""# Generated with RepTate %s %s (build %s)\\n"" % (\n                version,\n                date,\n                build,\n            )\n            header += ""# At %s on %s\\n"" % (\n                time.strftime(""%X""),\n                time.strftime(""%a %b %d, %Y""),\n            )\n            f.write(header)\n\n            f.write(""\\n#param global\\n"")\n            f.write(""constit polydisperse\\n"")\n            # f.write(\'# or multip (for pompom) or polydisperse (for polydisperse Rolie-Poly)\\n\')\n\n            f.write(""\\n#param constitutive\\n"")\n\n            n = self.parameters[""nmodes""].value\n\n            td = np.zeros(n)\n            for i in range(n):\n                td[i] = self.parameters[""tauD%02d"" % i].value\n            # sort taud ascending order\n            args = np.argsort(td)\n\n            fraction = ""fraction""\n            taud = ""taud""\n            tauR = ""tauR""\n            lmax = ""lambdaMax""\n            for i, arg in enumerate(args):\n                fraction += "" %.6g"" % self.parameters[""phi%02d"" % arg].value\n                taud += "" %.6g"" % self.parameters[""tauD%02d"" % arg].value\n                tauR += "" %.6g"" % self.parameters[""tauR%02d"" % arg].value\n                lmax += "" %.6g"" % self.parameters[""lmax""].value\n            f.write(""%s\\n%s\\n%s\\n"" % (taud, tauR, fraction))\n            if (\n                self.with_fene == FeneMode.with_fene\n            ):  # don\'t output lmax at all for infinite ex\n                f.write(""%s\\n"" % lmax)\n            f.write(""modulus %.6g\\n"" % self.parameters[""GN0""].value)\n            f.write(""beta %.6gn"" % self.parameters[""beta""].value)\n            f.write(""delta %.6g\\n"" % self.parameters[""delta""].value)\n\n            f.write(""\\n#end"")\n\n        QMessageBox.information(\n            self, ""Success"", \'Wrote FlowSolve parameters in ""%s""\' % fpath\n        )\n\n    def handle_with_gcorr_button(self, checked):\n        if checked:\n            if len(self.Zeff) > 0:\n                # if Zeff contains something\n                self.with_gcorr = GcorrMode.with_gcorr\n            else:\n                self.Qprint(\n                    ""<font color=orange><b>Modulus correction needs Z from MWD</b></font>""\n                )\n                self.with_gcorr_button.setChecked(False)\n                return\n        else:\n            self.with_gcorr = GcorrMode.none\n        self.Qprint(\n            \'<font color=green><b>Press ""Calculate"" to update theory</b></font>\'\n        )\n\n    def handle_with_fene_button(self, checked):\n        if checked:\n            self.with_fene = FeneMode.with_fene\n            self.with_fene_button.setChecked(True)\n            self.with_fene_button.setIcon(\n                QIcon("":/Icon8/Images/new_icons/icons8-facebook-f.png"")\n            )\n            self.parameters[""lmax""].display_flag = True\n            self.parameters[""lmax""].opt_type = OptType.nopt\n        else:\n            self.with_fene = FeneMode.none\n            self.with_fene_button.setChecked(False)\n            self.with_fene_button.setIcon(\n                QIcon("":/Icon8/Images/new_icons/icons8-infinite.png"")\n            )\n            self.parameters[""lmax""].display_flag = False\n            self.parameters[""lmax""].opt_type = OptType.const\n        self.update_parameter_table()\n        self.Qprint(\n            \'<font color=green><b>Press ""Calculate"" to update theory</b></font>\'\n        )\n\n    def Qhide_theory_extras(self, show):\n        """"""Uncheck the LVE button. Called when curent theory is changed""""""\n        if show:\n            self.LVEenvelopeseries.set_visible(self.linearenvelope.isChecked())\n        else:\n            self.LVEenvelopeseries.set_visible(False)\n        self.parent_dataset.actionMinimize_Error.setDisabled(show)\n        self.parent_dataset.actionShow_Limits.setDisabled(show)\n        self.parent_dataset.actionVertical_Limits.setDisabled(show)\n        self.parent_dataset.actionHorizontal_Limits.setDisabled(show)\n\n    def show_linear_envelope(self, state):\n        self.plot_theory_stuff()\n        self.extra_graphic_visible(state)\n        # self.LVEenvelopeseries.set_visible(self.linearenvelope.isChecked())\n        # self.plot_theory_stuff()\n        # self.parent_dataset.parent_application.update_plot()\n\n    def select_shear_flow(self):\n        self.flow_mode = FlowMode.shear\n        self.tbutflow.setDefaultAction(self.shear_flow_action)\n\n    def select_extensional_flow(self):\n        self.flow_mode = FlowMode.uext\n        self.tbutflow.setDefaultAction(self.extensional_flow_action)\n\n    def get_modes_reptate(self):\n        apmng = self.parent_dataset.parent_application.parent_manager\n        get_dict = {}\n        for app in apmng.applications.values():\n            app_index = apmng.ApplicationtabWidget.indexOf(app)\n            app_tab_name = apmng.ApplicationtabWidget.tabText(app_index)\n            for ds in app.datasets.values():\n                ds_index = app.DataSettabWidget.indexOf(ds)\n                ds_tab_name = app.DataSettabWidget.tabText(ds_index)\n                for th in ds.theories.values():\n                    th_index = ds.TheorytabWidget.indexOf(th)\n                    th_tab_name = ds.TheorytabWidget.tabText(th_index)\n                    if th.thname == ""Discretize MWD"":\n                        get_dict[\n                            ""%s.%s.%s"" % (app_tab_name, ds_tab_name, th_tab_name)\n                        ] = th.get_mwd\n\n        if get_dict:\n            d = GetMwdRepTate(self, get_dict, ""Select Discretized MWD"")\n            if d.exec_() and d.btngrp.checkedButton() != None:\n                _, success1 = self.set_param_value(""tau_e"", d.taue_text.text())\n                _, success2 = self.set_param_value(""Me"", d.Me_text.text())\n                if not success1 * success2:\n                    self.Qprint(""Could not understand Me or taue, try again"")\n                    return\n                item = d.btngrp.checkedButton().text()\n                m, phi = get_dict[item]()\n\n                self.MWD_m = np.copy(m)\n                self.MWD_phi = np.copy(phi)\n                self.set_modes_from_mwd(m, phi)\n        else:\n            # no theory Discretise MWD found\n            QMessageBox.warning(\n                self, ""Get MW distribution"", \'No ""Discretize MWD"" theory found\'\n            )\n        # self.parent_dataset.handle_actionCalculate_Theory()\n\n    def edit_modes_window(self):\n        nmodes = self.parameters[""nmodes""].value\n        phi = np.zeros(nmodes)\n        taud = np.zeros(nmodes)\n        taur = np.zeros(nmodes)\n        for i in range(nmodes):\n            phi[i] = self.parameters[""phi%02d"" % i].value\n            taud[i] = self.parameters[""tauD%02d"" % i].value\n            taur[i] = self.parameters[""tauR%02d"" % i].value\n        param_dic = OrderedDict()\n        param_dic[""phi""] = phi\n        param_dic[""tauD""] = taud\n        param_dic[""tauR""] = taur\n        d = EditModesVolFractionsDialog(self, param_dic, self.MAX_MODES)\n        if d.exec_():\n            nmodes = d.table.rowCount()\n            self.set_param_value(""nmodes"", nmodes)\n            # self.set_param_value(""nstretch"", nmodes)\n            success = True\n            for i in range(nmodes):\n                msg, success1 = self.set_param_value(\n                    ""phi%02d"" % i, d.table.item(i, 0).text()\n                )\n                msg, success2 = self.set_param_value(\n                    ""tauD%02d"" % i, d.table.item(i, 1).text()\n                )\n                msg, success3 = self.set_param_value(\n                    ""tauR%02d"" % i, d.table.item(i, 2).text()\n                )\n                success *= success1 * success2 * success3\n            if not success:\n                QMessageBox.warning(\n                    self,\n                    ""Error"",\n                    ""Some parameter(s) could not be updated.\\nPlease try again."",\n                )\n            else:\n                self.handle_actionCalculate_Theory()\n\n    def edit_mwd_modes(self):\n        d = EditMWDDialog(self, self.MWD_m, self.MWD_phi, 200)\n        if d.exec_():\n            nmodes = d.table.rowCount()\n            m = []\n            phi = []\n            _, success1 = self.set_param_value(""tau_e"", d.taue_text.text())\n            _, success2 = self.set_param_value(""Me"", d.Me_text.text())\n            if not success1 * success2:\n                self.Qprint(""Could not understand Me or taue, try again"")\n                return\n            for i in range(nmodes):\n                try:\n                    m.append(float(d.table.item(i, 0).text()))\n                    phi.append(float(d.table.item(i, 1).text()))\n                except ValueError:\n                    self.Qprint(""Could not understand line %d, try again"" % (i + 1))\n                    return\n            self.MWD_m = np.copy(m)\n            self.MWD_phi = np.copy(phi)\n            self.set_modes_from_mwd(m, phi)\n\n    # def plot_modes_graph(self):\n    #     pass\n\n    def plot_theory_stuff(self):\n        """"""Plot theory helpers""""""\n        logtmin = np.log10(self.parent_dataset.minpositivecol(0))\n        logtmax = np.log10(self.parent_dataset.maxcol(0)) + 1\n        ntimes = int((logtmax - logtmin) * 20)\n        data_table_tmp = DataTable(self.axarr)\n        data_table_tmp.num_columns = 2\n        data_table_tmp.num_rows = ntimes\n        data_table_tmp.data = np.zeros((ntimes, 2))\n\n        times = np.logspace(logtmin, logtmax, ntimes)\n        data_table_tmp.data[:, 0] = times\n        nmodes = self.parameters[""nmodes""].value\n        data_table_tmp.data[:, 1] = 0\n        fparamaux = {""gdot"": 1e-8}\n\n        phi = []\n        taud = []\n        for i in range(nmodes):\n            phi.append(self.parameters[""phi%02d"" % i].value)\n            taud.append(self.parameters[""tauD%02d"" % i].value)\n\n        for i in range(nmodes):\n            if self.stop_theory_flag:\n                break\n            G = self.parameters[""GN0""].value\n            if self.with_gcorr == GcorrMode.with_gcorr:\n                G = G * self.gZ(self.Zeff[i])\n            for j in range(nmodes):\n                # TODO: use symetry to reduce number of loops\n                tau = 1.0 / (1.0 / taud[i] + 1.0 / taud[j])\n                data_table_tmp.data[:, 1] += (\n                    G\n                    * phi[i]\n                    * phi[j]\n                    * fparamaux[""gdot""]\n                    * tau\n                    * (1 - np.exp(-times / tau))\n                )\n        if self.flow_mode == FlowMode.uext:\n            data_table_tmp.data[:, 1] *= 3.0\n        view = self.parent_dataset.parent_application.current_view\n        try:\n            x, y, success = view.view_proc(data_table_tmp, fparamaux)\n        except TypeError as e:\n            print(e)\n            return\n        self.LVEenvelopeseries.set_data(x[:, 0], y[:, 0])\n        # remove tmp artist form ax\n        for i in range(data_table_tmp.MAX_NUM_SERIES):\n            for nx in range(len(self.axarr)):\n                self.axarr[nx].lines.remove(data_table_tmp.series[nx][i])\n'"
RepTate/theories/TheoryRoliePoly.py,20,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryRoliePoly\n\nModule for the Rolie-Poly theory for the non-linear flow of entangled polymers.\n\n""""""\nimport os\nimport numpy as np\nfrom scipy.integrate import odeint\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom RepTate.core.DataTable import DataTable\nfrom PyQt5.QtWidgets import (\n    QToolBar,\n    QToolButton,\n    QMenu,\n    QSpinBox,\n    QMessageBox,\n    QFileDialog,\n)\nfrom PyQt5.QtCore import QSize\nfrom PyQt5.QtGui import QIcon\nfrom PyQt5.QtCore import Qt\nfrom RepTate.gui.Theory_rc import *\nfrom math import sqrt\nimport RepTate\nimport time\nfrom RepTate.core.Theory import EndComputationRequested\nfrom RepTate.applications.ApplicationLAOS import GUIApplicationLAOS, CLApplicationLAOS\nfrom RepTate.theories.theory_helpers import FlowMode, EditModesDialog, FeneMode\n\n\nclass TheoryRoliePoly(CmdBase):\n    """"""Rolie-Poly theory\n    MORE DETAILED DOCUMENTATION IS MISSING\n    """"""\n\n    thname = ""Rolie-Poly""\n    description = ""Rolie-Poly constitutive equation""\n    citations = [\n        ""Likhtman, A.E. & Graham, R.S., J. Non-Newtonian Fluid Mech., 2003, 114, 1-12""\n    ]\n    doi = [""http://dx.doi.org/10.1016/S0377-0257(03)00114-9""]\n\n    def __new__(cls, name="""", parent_dataset=None, ax=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryRoliePoly(name, parent_dataset, ax)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryRoliePoly(name, parent_dataset, ax)\n        )\n\n\nclass BaseTheoryRoliePoly:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/NLVE/Theory/theory.html#rolie-poly-equation""\n    single_file = False\n    thname = TheoryRoliePoly.thname\n    citations = TheoryRoliePoly.citations\n    doi = TheoryRoliePoly.doi\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        self.function = self.RoliePoly\n        self.has_modes = True\n        self.parameters[""beta""] = Parameter(\n            name=""beta"",\n            value=0.5,\n            description=""CCR coefficient"",\n            type=ParameterType.real,\n            opt_type=OptType.nopt,\n        )\n        self.parameters[""delta""] = Parameter(\n            name=""delta"",\n            value=-0.5,\n            description=""CCR exponent"",\n            type=ParameterType.real,\n            opt_type=OptType.nopt,\n        )\n        self.parameters[""lmax""] = Parameter(\n            name=""lmax"",\n            value=10.0,\n            description=""Maximum extensibility"",\n            type=ParameterType.real,\n            opt_type=OptType.nopt,\n            display_flag=False,\n            min_value=1.01,\n        )\n        self.parameters[""nmodes""] = Parameter(\n            name=""nmodes"",\n            value=2,\n            description=""Number of modes"",\n            type=ParameterType.integer,\n            opt_type=OptType.const,\n            display_flag=False,\n        )\n        self.parameters[""nstretch""] = Parameter(\n            name=""nstretch"",\n            value=2,\n            description=""Number of strecthing modes"",\n            type=ParameterType.integer,\n            opt_type=OptType.const,\n            display_flag=False,\n        )\n\n        for i in range(self.parameters[""nmodes""].value):\n            self.parameters[""G%02d"" % i] = Parameter(\n                name=""G%02d"" % i,\n                value=1000.0,\n                description=""Modulus of mode %02d"" % i,\n                type=ParameterType.real,\n                opt_type=OptType.nopt,\n                display_flag=False,\n                min_value=0,\n            )\n            self.parameters[""tauD%02d"" % i] = Parameter(\n                name=""tauD%02d"" % i,\n                value=10.0,\n                description=""Terminal time of mode %02d"" % i,\n                type=ParameterType.real,\n                opt_type=OptType.nopt,\n                display_flag=False,\n                min_value=0,\n            )\n            self.parameters[""tauR%02d"" % i] = Parameter(\n                name=""tauR%02d"" % i,\n                value=0.5,\n                description=""Rouse time of mode %02d"" % i,\n                type=ParameterType.real,\n                opt_type=OptType.opt,\n                min_value=1e-12,\n            )\n\n        self.view_LVEenvelope = False\n        auxseries = self.ax.plot([], [], label="""")\n        self.LVEenvelopeseries = auxseries[0]\n        self.LVEenvelopeseries.set_marker("""")\n        self.LVEenvelopeseries.set_linestyle(""--"")\n        self.LVEenvelopeseries.set_visible(self.view_LVEenvelope)\n        self.LVEenvelopeseries.set_color(""green"")\n        self.LVEenvelopeseries.set_linewidth(5)\n        self.LVEenvelopeseries.set_label("""")\n\n        self.MAX_MODES = 40\n        self.with_fene = FeneMode.none\n        self.init_flow_mode()\n\n    def set_extra_data(self, extra_data):\n        """"""Set extra data when loading project""""""\n        self.handle_with_fene_button(extra_data[""with_fene""])\n        self.spinbox.setValue(self.parameters[""nstretch""].value)\n\n    def get_extra_data(self):\n        """"""Set extra_data when saving project""""""\n        self.extra_data[""with_fene""] = self.with_fene == FeneMode.with_fene\n\n    def init_flow_mode(self):\n        """"""Find if data files are shear or extension""""""\n        try:\n            f = self.theory_files()[0]\n            if f.file_type.extension == ""shear"":\n                self.flow_mode = FlowMode.shear\n            else:\n                self.flow_mode = FlowMode.uext\n        except Exception as e:\n            print(""in RP init:"", e)\n            self.flow_mode = FlowMode.shear  # default mode: shear\n\n    def destructor(self):\n        """"""Called when the theory tab is closed""""""\n        self.extra_graphic_visible(False)\n        self.ax.lines.remove(self.LVEenvelopeseries)\n\n    def show_theory_extras(self, show=False):\n        """"""Called when the active theory is changed""""""\n        if CmdBase.mode == CmdMode.GUI:\n            self.Qhide_theory_extras(show)\n        # self.extra_graphic_visible(self.linearenvelope.isChecked())\n\n    def extra_graphic_visible(self, state):\n        """"""Change visibility of theory helpers""""""\n        self.LVEenvelopeseries.set_visible(state)\n        self.parent_dataset.parent_application.update_plot()\n\n    def get_modes(self):\n        """"""Get the values of Maxwell Modes from this theory""""""\n        nmodes = self.parameters[""nmodes""].value\n        tau = np.zeros(nmodes)\n        G = np.zeros(nmodes)\n        for i in range(nmodes):\n            tau[i] = self.parameters[""tauD%02d"" % i].value\n            G[i] = self.parameters[""G%02d"" % i].value\n        return tau, G, True\n\n    def set_modes(self, tau, G):\n        """"""Set the values of Maxwell Modes from another theory""""""\n        nmodes = len(tau)\n        self.set_param_value(""nmodes"", nmodes)\n        self.set_param_value(""nstretch"", nmodes)\n\n        for i in range(nmodes):\n            self.set_param_value(""tauD%02d"" % i, tau[i])\n            self.set_param_value(""G%02d"" % i, G[i])\n        return True\n\n    def sigmadot_shear(self, sigma, t, p):\n        """"""Rolie-Poly differential equation under *shear* flow\n        with stretching and finite extensibility if selected""""""\n        if self.stop_theory_flag:\n            raise EndComputationRequested\n        sxx, syy, sxy = sigma\n        lmax, tauD, tauR, beta, delta, gammadot = p\n\n        # Create the vector with the time derivative of sigma\n        trace_sigma = sxx + 2 * syy\n        l_sq = trace_sigma / 3.0  # stretch^2\n        if self.with_fene == FeneMode.with_fene:\n            fene = self.calculate_fene(l_sq, lmax)\n            aux1 = 2.0 * (1.0 - 1.0 / sqrt(l_sq)) / tauR * fene\n        else:\n            aux1 = 2.0 * (1.0 - 1.0 / sqrt(l_sq)) / tauR\n        aux2 = beta * (l_sq ** delta)\n\n        return [\n            2 * gammadot * sxy - (sxx - 1.0) / tauD - aux1 * (sxx + aux2 * (sxx - 1.0)),\n            -1.0 * (syy - 1.0) / tauD - aux1 * (syy + aux2 * (syy - 1.0)),\n            gammadot * syy - sxy / tauD - aux1 * (sxy + aux2 * sxy),\n        ]\n\n    def sigmadot_shear_nostretch(self, sigma, t, p):\n        """"""Rolie-Poly differential equation under shear flow, without stretching""""""\n        if self.stop_theory_flag:\n            raise EndComputationRequested\n        sxx, syy, sxy = sigma\n        _, tauD, _, beta, _, gammadot = p\n\n        # Create the vector with the time derivative of sigma\n        return [\n            2.0 * gammadot * sxy\n            - (sxx - 1.0) / tauD\n            - 2.0 / 3.0 * gammadot * sxy * (sxx + beta * (sxx - 1)),\n            -(syy - 1.0) / tauD - 2.0 / 3.0 * gammadot * sxy * (syy + beta * (syy - 1)),\n            gammadot * syy\n            - sxy / tauD\n            - 2.0 / 3.0 * gammadot * sxy * (sxy + beta * sxy),\n        ]\n\n    def sigmadot_uext(self, sigma, t, p):\n        """"""Rolie-Poly differential equation under *uniaxial elongational* flow\n        with stretching and finite extensibility if selecter""""""\n        if self.stop_theory_flag:\n            raise EndComputationRequested\n        sxx, syy = sigma\n        lmax, tauD, tauR, beta, delta, epsilon_dot = p\n\n        # Create the vector with the time derivative of sigma\n        trace_sigma = sxx + 2 * syy\n        l_sq = trace_sigma / 3.0  # stretch^2\n        if self.with_fene == FeneMode.with_fene:\n            fene = self.calculate_fene(l_sq, lmax)\n            aux1 = 2.0 * (1.0 - 1.0 / sqrt(l_sq)) / tauR * fene\n        else:\n            aux1 = 2.0 * (1.0 - 1.0 / sqrt(l_sq)) / tauR\n        aux2 = beta * (l_sq ** delta)\n\n        dsxx = (\n            2.0 * epsilon_dot * sxx\n            - (sxx - 1.0) / tauD\n            - aux1 * (sxx + aux2 * (sxx - 1.0))\n        )\n        dsyy = (\n            -epsilon_dot * syy - (syy - 1.0) / tauD - aux1 * (syy + aux2 * (syy - 1.0))\n        )\n        return [dsxx, dsyy]\n\n    def sigmadot_uext_nostretch(self, sigma, t, p):\n        """"""Rolie-Poly differential equation under elongation flow, wihtout stretching""""""\n        if self.stop_theory_flag:\n            raise EndComputationRequested\n        sxx, syy = sigma\n        _, tauD, tauR, beta, delta, epsilon_dot = p\n\n        # Create the vector with the time derivative of sigma\n        trace_k_sigma = epsilon_dot * (sxx - syy)\n        aux1 = 2.0 / 3.0 * trace_k_sigma\n        return [\n            2.0 * epsilon_dot * sxx\n            - (sxx - 1.0) / tauD\n            - aux1 * (sxx + beta * (sxx - 1.0)),\n            -epsilon_dot * syy - (syy - 1.0) / tauD - aux1 * (syy + beta * (syy - 1.0)),\n        ]\n\n    def sigmadot_shearLAOS(self, sigma, t, p):\n        """"""Rolie-Poly differential equation under *shear* flow\n        with stretching and finite extensibility if selected""""""\n        if self.stop_theory_flag:\n            raise EndComputationRequested\n        sxx, syy, sxy = sigma\n        lmax, tauD, tauR, beta, delta, g0, w = p\n        gammadot = g0 * w * np.cos(w * t)\n\n        # Create the vector with the time derivative of sigma\n        trace_sigma = sxx + 2 * syy\n        l_sq = trace_sigma / 3.0  # stretch^2\n        if self.with_fene == FeneMode.with_fene:\n            fene = self.calculate_fene(l_sq, lmax)\n            aux1 = 2.0 * (1.0 - 1.0 / sqrt(l_sq)) / tauR * fene\n        else:\n            aux1 = 2.0 * (1.0 - 1.0 / sqrt(l_sq)) / tauR\n        aux2 = beta * (l_sq ** delta)\n\n        return [\n            2 * gammadot * sxy - (sxx - 1.0) / tauD - aux1 * (sxx + aux2 * (sxx - 1.0)),\n            -1.0 * (syy - 1.0) / tauD - aux1 * (syy + aux2 * (syy - 1.0)),\n            gammadot * syy - sxy / tauD - aux1 * (sxy + aux2 * sxy),\n        ]\n\n    def sigmadot_shear_nostretchLAOS(self, sigma, t, p):\n        """"""Rolie-Poly differential equation under shear flow, without stretching""""""\n        if self.stop_theory_flag:\n            raise EndComputationRequested\n        sxx, syy, sxy = sigma\n        _, tauD, _, beta, _, g0, w = p\n        gammadot = g0 * w * np.cos(w * t)\n\n        # Create the vector with the time derivative of sigma\n        return [\n            2.0 * gammadot * sxy\n            - (sxx - 1.0) / tauD\n            - 2.0 / 3.0 * gammadot * sxy * (sxx + beta * (sxx - 1)),\n            -(syy - 1.0) / tauD - 2.0 / 3.0 * gammadot * sxy * (syy + beta * (syy - 1)),\n            gammadot * syy\n            - sxy / tauD\n            - 2.0 / 3.0 * gammadot * sxy * (sxy + beta * sxy),\n        ]\n\n    def calculate_fene(self, l_square, lmax):\n        """"""calculate finite extensibility function value""""""\n        ilm2 = 1.0 / (lmax * lmax)  # 1/lambda_max^2\n        l2_lm2 = l_square * ilm2  # (lambda/lambda_max)^2\n        return (3.0 - l2_lm2) / (1.0 - l2_lm2) * (1.0 - ilm2) / (3.0 - ilm2)\n\n    def RoliePoly(self, f=None):\n        """"""Calculate the theory""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        tt.data[:, 0] = ft.data[:, 0]\n\n        # flow geometry and finite extensibility\n        if self.flow_mode == FlowMode.shear:\n            sigma0 = [1.0, 1.0, 0.0]  # sxx, syy, sxy\n            pde_nostretch = self.sigmadot_shear_nostretch\n            pde_stretch = self.sigmadot_shear\n        elif self.flow_mode == FlowMode.uext:\n            sigma0 = [1.0, 1.0]  # sxx, syy\n            pde_nostretch = self.sigmadot_uext_nostretch\n            pde_stretch = self.sigmadot_uext\n        else:\n            return\n\n        # ODE solver parameters\n        abserr = 1.0e-8\n        relerr = 1.0e-6\n        t = ft.data[:, 0]\n        t = np.concatenate([[0], t])\n        # sigma0 = [1.0, 1.0, 0.0]  # sxx, syy, sxy\n        beta = self.parameters[""beta""].value\n        delta = self.parameters[""delta""].value\n        lmax = self.parameters[""lmax""].value\n        flow_rate = float(f.file_parameters[""gdot""])\n        nmodes = self.parameters[""nmodes""].value\n        nstretch = self.parameters[""nstretch""].value\n        for i in range(nmodes):\n            if self.stop_theory_flag:\n                break\n            tauD = self.parameters[""tauD%02d"" % i].value\n            tauR = self.parameters[""tauR%02d"" % i].value\n            p = [lmax, tauD, tauR, beta, delta, flow_rate]\n            if i < nstretch:\n                try:\n                    sig = odeint(\n                        pde_stretch, sigma0, t, args=(p,), atol=abserr, rtol=relerr\n                    )\n                except EndComputationRequested:\n                    break\n            else:\n                try:\n                    sig = odeint(\n                        pde_nostretch, sigma0, t, args=(p,), atol=abserr, rtol=relerr\n                    )\n                except EndComputationRequested:\n                    break\n\n            sxx = np.delete(sig[:, 0], [0])\n            syy = np.delete(sig[:, 1], [0])\n            if self.flow_mode == FlowMode.shear:\n                sxy = np.delete(sig[:, 2], [0])\n                tt.data[:, 1] += self.parameters[""G%02d"" % i].value * sxy\n            elif self.flow_mode == FlowMode.uext:\n                tt.data[:, 1] += self.parameters[""G%02d"" % i].value * (sxx - syy)\n\n            if self.with_fene == FeneMode.with_fene:\n                ilm2 = 1.0 / (lmax * lmax)  # 1/lambda_max^2\n                l_sq_arr = (sxx + 2.0 * syy) / 3.0  # array lambda^2\n                l2_lm2_arr = l_sq_arr * ilm2  # array (lambda/lambda_max)^2\n                fene_arr = (\n                    (3.0 - l2_lm2_arr)\n                    / (1.0 - l2_lm2_arr)\n                    * (1.0 - ilm2)\n                    / (3.0 - ilm2)\n                )  # fene array\n                tt.data[:, 1] *= fene_arr\n\n    def RoliePolyLAOS(self, f=None):\n        """"""Calculate the theory for LAOS""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        tt.data[:, 0] = ft.data[:, 0]\n\n        # flow geometry and finite extensibility\n        sigma0 = [1.0, 1.0, 0.0]  # sxx, syy, sxy\n        pde_nostretchLAOS = self.sigmadot_shear_nostretchLAOS\n        pde_stretchLAOS = self.sigmadot_shearLAOS\n\n        # ODE solver parameters\n        abserr = 1.0e-8\n        relerr = 1.0e-6\n        beta = self.parameters[""beta""].value\n        delta = self.parameters[""delta""].value\n        lmax = self.parameters[""lmax""].value\n        g0 = float(f.file_parameters[""gamma""])\n        w = float(f.file_parameters[""omega""])\n        nmodes = self.parameters[""nmodes""].value\n        nstretch = self.parameters[""nstretch""].value\n        t = ft.data[:, 0]\n        tt.data[:, 1] = g0 * np.sin(w * t)\n        t = np.concatenate([[0], t])\n        for i in range(nmodes):\n            if self.stop_theory_flag:\n                break\n            tauD = self.parameters[""tauD%02d"" % i].value\n            tauR = self.parameters[""tauR%02d"" % i].value\n            p = [lmax, tauD, tauR, beta, delta, g0, w]\n            if i < nstretch:\n                try:\n                    sig = odeint(\n                        pde_stretchLAOS, sigma0, t, args=(p,), atol=abserr, rtol=relerr\n                    )\n                except EndComputationRequested:\n                    break\n            else:\n                try:\n                    sig = odeint(\n                        pde_nostretchLAOS,\n                        sigma0,\n                        t,\n                        args=(p,),\n                        atol=abserr,\n                        rtol=relerr,\n                    )\n                except EndComputationRequested:\n                    break\n\n            sxx = np.delete(sig[:, 0], [0])\n            syy = np.delete(sig[:, 1], [0])\n            sxy = np.delete(sig[:, 2], [0])\n            tt.data[:, 2] += self.parameters[""G%02d"" % i].value * sxy\n\n            if self.with_fene == FeneMode.with_fene:\n                ilm2 = 1.0 / (lmax * lmax)  # 1/lambda_max^2\n                l_sq_arr = (sxx + 2.0 * syy) / 3.0  # array lambda^2\n                l2_lm2_arr = l_sq_arr * ilm2  # array (lambda/lambda_max)^2\n                fene_arr = (\n                    (3.0 - l2_lm2_arr)\n                    / (1.0 - l2_lm2_arr)\n                    * (1.0 - ilm2)\n                    / (3.0 - ilm2)\n                )  # fene array\n                tt.data[:, 2] *= fene_arr\n\n    def set_param_value(self, name, value):\n        """"""Set the value of a theory parameter""""""\n        if name == ""nmodes"":\n            oldn = self.parameters[""nmodes""].value\n            if CmdBase.mode == CmdMode.GUI:\n                self.spinbox.setMaximum(int(value))\n        message, success = super(BaseTheoryRoliePoly, self).set_param_value(name, value)\n        if not success:\n            return message, success\n        if name == ""nmodes"":\n            for i in range(self.parameters[""nmodes""].value):\n                self.parameters[""G%02d"" % i] = Parameter(\n                    name=""G%02d"" % i,\n                    value=1000.0,\n                    description=""Modulus of mode %02d"" % i,\n                    type=ParameterType.real,\n                    opt_type=OptType.nopt,\n                    display_flag=False,\n                    min_value=0,\n                )\n                self.parameters[""tauD%02d"" % i] = Parameter(\n                    name=""tauD%02d"" % i,\n                    value=10.0,\n                    description=""Terminal time of mode %02d"" % i,\n                    type=ParameterType.real,\n                    opt_type=OptType.nopt,\n                    display_flag=False,\n                    min_value=0,\n                )\n                self.parameters[""tauR%02d"" % i] = Parameter(\n                    name=""tauR%02d"" % i,\n                    value=0.5,\n                    description=""Rouse time of mode %02d"" % i,\n                    type=ParameterType.real,\n                    opt_type=OptType.opt,\n                    display_flag=True,\n                    min_value=0,\n                )\n            if oldn > self.parameters[""nmodes""].value:\n                for i in range(self.parameters[""nmodes""].value, oldn):\n                    del self.parameters[""G%02d"" % i]\n                    del self.parameters[""tauD%02d"" % i]\n                    del self.parameters[""tauR%02d"" % i]\n        return """", True\n\n\nclass CLTheoryRoliePoly(BaseTheoryRoliePoly, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n        if isinstance(parent_dataset.parent_application, CLApplicationLAOS):\n            self.function = self.RoliePolyLAOS\n\n\nclass GUITheoryRoliePoly(BaseTheoryRoliePoly, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n        # add widgets specific to the theory\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n\n        if not isinstance(parent_dataset.parent_application, GUIApplicationLAOS):\n            self.tbutflow = QToolButton()\n            self.tbutflow.setPopupMode(QToolButton.MenuButtonPopup)\n            menu = QMenu()\n            self.shear_flow_action = menu.addAction(\n                QIcon("":/Icon8/Images/new_icons/icon-shear.png""), ""Shear Flow""\n            )\n            self.extensional_flow_action = menu.addAction(\n                QIcon("":/Icon8/Images/new_icons/icon-uext.png""), ""Extensional Flow""\n            )\n            if self.flow_mode == FlowMode.shear:\n                self.tbutflow.setDefaultAction(self.shear_flow_action)\n            else:\n                self.tbutflow.setDefaultAction(self.extensional_flow_action)\n            self.tbutflow.setMenu(menu)\n            tb.addWidget(self.tbutflow)\n            connection_id = self.shear_flow_action.triggered.connect(\n                self.select_shear_flow\n            )\n            connection_id = self.extensional_flow_action.triggered.connect(\n                self.select_extensional_flow\n            )\n        else:\n            self.function = self.RoliePolyLAOS\n\n        self.tbutmodes = QToolButton()\n        self.tbutmodes.setPopupMode(QToolButton.MenuButtonPopup)\n        menu = QMenu()\n        self.get_modes_action = menu.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-broadcasting.png""), ""Get Modes""\n        )\n        self.edit_modes_action = menu.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-edit-file.png""), ""Edit Modes""\n        )\n        # self.plot_modes_action = menu.addAction(\n        #     QIcon(\':/Icon8/Images/new_icons/icons8-scatter-plot.png\'),\n        #     ""Plot Modes"")\n        self.save_modes_action = menu.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-save-Maxwell.png""), ""Save Modes""\n        )\n        self.tbutmodes.setDefaultAction(self.get_modes_action)\n        self.tbutmodes.setMenu(menu)\n        tb.addWidget(self.tbutmodes)\n        # Show LVE button\n        self.linearenvelope = tb.addAction(\n            QIcon("":/Icon8/Images/new_icons/lve-icon.png""), ""Show Linear Envelope""\n        )\n        self.linearenvelope.setCheckable(True)\n        self.linearenvelope.setChecked(False)\n        # Finite extensibility button\n        self.with_fene_button = tb.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-infinite.png""),\n            ""Finite Extensibility"",\n        )\n        self.with_fene_button.setCheckable(True)\n        # SpinBox ""nmodes""\n        self.spinbox = QSpinBox()\n        self.spinbox.setRange(\n            0, self.parameters[""nmodes""].value\n        )  # min and max number of modes\n        self.spinbox.setSuffix("" stretch"")\n        self.spinbox.setToolTip(""Number of stretching modes"")\n        self.spinbox.setValue(self.parameters[""nmodes""].value)  # initial value\n        tb.addWidget(self.spinbox)\n\n        # Save to flowsolve button\n        self.flowsolve_btn = tb.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-save-flowsolve.png""),\n            ""Save Parameters To FlowSolve"",\n        )\n        self.flowsolve_btn.setCheckable(False)\n\n        self.thToolsLayout.insertWidget(0, tb)\n\n        connection_id = self.get_modes_action.triggered.connect(self.get_modes_reptate)\n        connection_id = self.edit_modes_action.triggered.connect(self.edit_modes_window)\n        # connection_id = self.plot_modes_action.triggered.connect(\n        #     self.plot_modes_graph)\n        connection_id = self.save_modes_action.triggered.connect(self.save_modes)\n        connection_id = self.linearenvelope.triggered.connect(self.show_linear_envelope)\n        connection_id = self.spinbox.valueChanged.connect(\n            self.handle_spinboxValueChanged\n        )\n        connection_id = self.with_fene_button.triggered.connect(\n            self.handle_with_fene_button\n        )\n        connection_id = self.flowsolve_btn.triggered.connect(self.handle_flowsolve_btn)\n\n    def handle_flowsolve_btn(self):\n        """"""Save theory parameters in FlowSolve format""""""\n\n        # Get filename of RepTate project to open\n        fpath, _ = QFileDialog.getSaveFileName(\n            self, ""Save Parameters to FowSolve"", os.path.join(RepTate.root_dir, ""data""), ""FlowSolve (*.fsrep)""\n        )\n        if fpath == """":\n            return\n\n        with open(fpath, ""w"") as f:\n            verdata = RepTate._version.get_versions()\n            version = verdata[""version""].split(""+"")[0]\n            date = verdata[""date""].split(""T"")[0]\n            build = verdata[""version""]\n            header = ""#flowGen input\\n""\n            header += ""# Generated with RepTate %s %s (build %s)\\n"" % (\n                version,\n                date,\n                build,\n            )\n            header += ""# At %s on %s\\n"" % (\n                time.strftime(""%X""),\n                time.strftime(""%a %b %d, %Y""),\n            )\n            f.write(header)\n\n            f.write(""\\n#param global\\n"")\n            f.write(""constit roliepoly\\n"")\n            # f.write(\'# or multip (for pompom) or polydisperse (for polydisperse Rolie-Poly)\\n\')\n\n            f.write(""\\n#param constitutive\\n"")\n            n = self.parameters[""nmodes""].value\n            nR = self.parameters[""nstretch""].value\n\n            # sort taud ascending order\n            td = np.zeros(n)\n            for i in range(n):\n                td[i] = self.parameters[""tauD%02d"" % i].value\n            args = np.argsort(td)\n\n            modulus = ""modulus""\n            taud = ""taud""\n            tauR = ""tauR""\n            lmax = ""lambdaMax""\n            for i, arg in enumerate(args):\n                modulus += "" %.6g"" % self.parameters[""G%02d"" % arg].value\n                taud += "" %.6g"" % self.parameters[""tauD%02d"" % arg].value\n                if n - i <= nR:\n                    tauR += "" %.6g"" % self.parameters[""tauR%02d"" % arg].value\n                    lmax += "" %.6g"" % self.parameters[""lmax""].value\n            f.write(""%s\\n%s\\n%s\\n"" % (modulus, taud, tauR))\n            if (\n                self.with_fene == FeneMode.with_fene\n            ):  # don\'t output lmax at all for infinite ex\n                f.write(""%s\\n"" % lmax)\n            f.write(""beta %.6g\\n"" % self.parameters[""beta""].value)\n            f.write(""delta %.6g\\n"" % self.parameters[""delta""].value)\n            f.write(\n                ""firstStretch %d\\n"" % (1 + n - nR)\n            )  # +1 as flowsolve uses 1-n index not 0-n-1\n\n            f.write(""\\n#end"")\n\n        QMessageBox.information(\n            self, ""Success"", \'Wrote FlowSolve parameters in ""%s""\' % fpath\n        )\n\n    def handle_with_fene_button(self, checked):\n        if checked:\n            self.with_fene = FeneMode.with_fene\n            self.with_fene_button.setChecked(True)\n            self.with_fene_button.setIcon(\n                QIcon("":/Icon8/Images/new_icons/icons8-facebook-f.png"")\n            )\n            self.parameters[""lmax""].display_flag = True\n            self.parameters[""lmax""].opt_type = OptType.nopt\n        else:\n            self.with_fene = FeneMode.none\n            self.with_fene_button.setChecked(False)\n            self.with_fene_button.setIcon(\n                QIcon("":/Icon8/Images/new_icons/icons8-infinite.png"")\n            )\n            self.parameters[""lmax""].display_flag = False\n            self.parameters[""lmax""].opt_type = OptType.const\n        self.update_parameter_table()\n        self.parent_dataset.handle_actionCalculate_Theory()\n\n    def handle_spinboxValueChanged(self, value):\n        nmodes = self.parameters[""nmodes""].value\n        self.set_param_value(""nstretch"", min(nmodes, value))\n        if self.autocalculate:\n            self.parent_dataset.handle_actionCalculate_Theory()\n\n    def Qhide_theory_extras(self, show):\n        """"""Uncheck the LVE button. Called when curent theory is changed""""""\n        if show:\n            self.LVEenvelopeseries.set_visible(self.linearenvelope.isChecked())\n        else:\n            self.LVEenvelopeseries.set_visible(False)\n\n    def show_linear_envelope(self, state):\n        self.extra_graphic_visible(state)\n        # self.LVEenvelopeseries.set_visible(self.linearenvelope.isChecked())\n        # self.plot_theory_stuff()\n        # self.parent_dataset.parent_application.update_plot()\n\n    def plot_theory_stuff(self):\n        """"""Plot theory helpers""""""\n        if not isinstance(self.parent_dataset.parent_application, GUIApplicationLAOS):\n            data_table_tmp = DataTable(self.axarr)\n            data_table_tmp.num_columns = 2\n            data_table_tmp.num_rows = 100\n            data_table_tmp.data = np.zeros((100, 2))\n\n            times = np.logspace(-2, 3, 100)\n            data_table_tmp.data[:, 0] = times\n            nmodes = self.parameters[""nmodes""].value\n            data_table_tmp.data[:, 1] = 0\n            fparamaux = {}\n            fparamaux[""gdot""] = 1e-8\n            for i in range(nmodes):\n                if self.stop_theory_flag:\n                    break\n                G = self.parameters[""G%02d"" % i].value\n                tauD = self.parameters[""tauD%02d"" % i].value\n                data_table_tmp.data[:, 1] += (\n                    G * fparamaux[""gdot""] * tauD * (1 - np.exp(-times / tauD))\n                )\n            if self.flow_mode == FlowMode.uext:\n                data_table_tmp.data[:, 1] *= 3.0\n            view = self.parent_dataset.parent_application.current_view\n            try:\n                x, y, success = view.view_proc(data_table_tmp, fparamaux)\n            except TypeError as e:\n                print(e)\n                return\n            self.LVEenvelopeseries.set_data(x[:, 0], y[:, 0])\n\n    def select_shear_flow(self):\n        self.flow_mode = FlowMode.shear\n        self.tbutflow.setDefaultAction(self.shear_flow_action)\n\n    def select_extensional_flow(self):\n        self.flow_mode = FlowMode.uext\n        self.tbutflow.setDefaultAction(self.extensional_flow_action)\n\n    def get_modes_reptate(self):\n        self.Qcopy_modes()\n\n    def edit_modes_window(self):\n        times, G, success = self.get_modes()\n        if not success:\n            self.logger.warning(""Could not get modes successfully"")\n            return\n        d = EditModesDialog(self, times, G, self.MAX_MODES)\n        if d.exec_():\n            nmodes = d.table.rowCount()\n            self.set_param_value(""nmodes"", nmodes)\n            self.set_param_value(""nstretch"", nmodes)\n            success = True\n            for i in range(nmodes):\n                msg, success1 = self.set_param_value(\n                    ""tauD%02d"" % i, d.table.item(i, 0).text()\n                )\n                msg, success2 = self.set_param_value(\n                    ""G%02d"" % i, d.table.item(i, 1).text()\n                )\n                success *= success1 * success2\n            if not success:\n                QMessageBox.warning(\n                    self,\n                    ""Error"",\n                    ""Some parameter(s) could not be updated.\\nPlease try again."",\n                )\n            else:\n                self.handle_actionCalculate_Theory()\n\n    # def plot_modes_graph(self):\n    #     pass\n'"
RepTate/theories/TheoryRouse.py,6,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryRouseTime\n\nRouseTime file for creating a new theory\n""""""\nimport numpy as np\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nimport RepTate.theories.rouse_ctypes_helper as rh\n\n\nclass TheoryRouseTime(CmdBase):\n    """"""Fit Rouse modes to a time dependent relaxation function\n    \n    * **Function**\n        Continuous Rouse model (valid for ""large"" :math:`N`):\n        \n        .. math::\n            G(t) = G_0 \\\\dfrac 1 N \\\\sum_{p=1}^N \\\\exp\\\\left(\\\\dfrac{-2p^2t}{N^2\\\\tau_0}\\\\right)\n    \n    * **Parameters**\n        - :math:`G_0 = ck_\\\\mathrm  B T`: ""modulus""\n        - :math:`\\\\tau_0`: relaxation time of an elementary segment\n        - :math:`M_0`: molar mass of an elementary segment\n        \n        where\n            - :math:`c`: number of segments per unit volume\n            - :math:`k_\\\\mathrm  B`: Boltzmann constant\n            - :math:`T`: temperature\n            - :math:`N=M_w/M_0`: number of segments par chain\n            - :math:`M_w`: weight-average molecular mass\n    """"""\n\n    thname = ""Rouse""\n    description = ""Rouse model""\n    citations = [""Rouse P.E. Jr, J. Chem. Phys. 1953, 21, 1272""]\n    doi = [""http://dx.doi.org/10.1063/1.1699180""]\n\n    def __new__(cls, name="""", parent_dataset=None, axarr=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryRouseTime(name, parent_dataset, axarr)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryRouseTime(name, parent_dataset, axarr)\n        )\n\n\nclass BaseTheoryRouseTime:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/Gt/Theory/theory.html#rouse-time""\n    single_file = (\n        False  # False if the theory can be applied to multiple files simultaneously\n    )\n    thname = TheoryRouseTime.thname\n    citations = TheoryRouseTime.citations\n    doi = TheoryRouseTime.doi\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        self.function = self.calculate  # main theory function\n        self.has_modes = False  # True if the theory has modes\n        self.parameters[""G0""] = Parameter(\n            ""G0"",\n            1e6,\n            ""Modulus c*kB*T/N"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=0,\n        )\n        self.parameters[""tau0""] = Parameter(\n            ""tau0"",\n            1e-3,\n            ""segment relaxation time"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=0,\n        )\n        self.parameters[""M0""] = Parameter(\n            ""M0"",\n            0.2,\n            ""segment molar mass"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=0.01,\n        )\n\n        # f = self.theory_files()[0]\n        # t_data = f.data_table.data[:, 0]\n        # tmin = min(t_data[np.nonzero(t_data)])\n        # tmax = max(t_data)\n        # self.parameters[""logtmin""] = Parameter(\n        #     ""logtmin"",\n        #     np.log10(tmin),\n        #     ""Log of time range minimum"",\n        #     ParameterType.real,\n        #     opt_type=OptType.const)\n        # self.parameters[""logtmax""] = Parameter(\n        #     ""logtmax"",\n        #     np.log10(tmax),\n        #     ""Log of time range maximum"",\n        #     ParameterType.real,\n        #     opt_type=OptType.const)\n        # self.parameters[""points""] = Parameter(\n        #     ""points"",\n        #     20,\n        #     ""number of theory points per decade"",\n        #     ParameterType.real,\n        #     opt_type=OptType.const)\n\n    def calculate(self, f=None):\n        """"""RouseTime function""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        # logtmin = self.parameters[""logtmin""].value\n        # logtmax = self.parameters[""logtmax""].value\n        # points = self.parameters[""points""].value\n        # t = np.logspace(logtmin, logtmax, points*(logtmax - logtmin))\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        G0 = self.parameters[""G0""].value\n        tau0 = self.parameters[""tau0""].value\n        M0 = self.parameters[""M0""].value\n        try:\n            Mw = float(f.file_parameters[""Mw""])\n        except (ValueError, KeyError):\n            self.Qprint(""Invalid Mw value"")\n            return\n        try:\n            gamma = float(f.file_parameters[""gamma""])\n            if gamma == 0:\n                gamma = 1\n        except:\n            gamma = 1\n\n        t = ft.data[:, 0]\n        params = [G0, tau0, Mw / M0, t]\n\n        tt.data[:, 0] = t\n        tt.data[:, 1] = gamma * rh.approx_rouse_time(params)\n\n\nclass CLTheoryRouseTime(BaseTheoryRouseTime, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # This class usually stays empty\n\n\nclass GUITheoryRouseTime(BaseTheoryRouseTime, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # add widgets specific to the theory here:\n\n\n####################################################################\n####################################################################\n\n\nclass TheoryRouseFrequency(CmdBase):\n    """"""Fit Rouse modes to a frequency dependent relaxation function\n    \n    * **Function**\n        Continuous Rouse model (valid for ""large"" :math:`N`):\n        \n        .. math::\n          G\'(\\\\omega) &= G_0 \\\\dfrac 1 N \\\\sum_{p=1}^N \\\\dfrac{(\\\\omega\\\\tau_p)^2} {1 +  (\\\\omega\\\\tau_p)^2}\\\\\\\\\n          G\'\'(\\\\omega) &= G_0 \\\\dfrac 1 N \\\\sum_{p=1}^N \\\\dfrac{\\\\omega\\\\tau_p} {1 +  (\\\\omega\\\\tau_p)^2}\\\\\\\\\n          \\\\tau_p &= \\\\dfrac{N^2 \\\\tau_0 }{ 2 p^2}\n\n    * **Parameters**\n        - :math:`G_0 = ck_\\\\mathrm  B T`: ""modulus""\n        - :math:`\\\\tau_0`: relaxation time of an elementary segment\n        - :math:`M_0`: molar mass of an elementary segment\n        \n        where\n            - :math:`c`: number of segments per unit volume\n            - :math:`k_\\\\mathrm  B`: Boltzmann constant\n            - :math:`T`: temperature\n            - :math:`N=M_w/M_0`: number of segments par chain\n            - :math:`M_w`: weight-average molecular mass\n    """"""\n\n    thname = ""Rouse""\n    description = ""Rouse model""\n    citations = [""Rouse P.E. Jr, J. Chem. Phys. 1953, 21, 1272""]\n    doi = [""http://dx.doi.org/10.1063/1.1699180""]\n\n    def __new__(cls, name="""", parent_dataset=None, axarr=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryRouseFrequency(name, parent_dataset, axarr)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryRouseFrequency(name, parent_dataset, axarr)\n        )\n\n\nclass BaseTheoryRouseFrequency:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/LVE/Theory/theory.html#rouse-frequency""\n    single_file = (\n        False  # False if the theory can be applied to multiple files simultaneously\n    )\n    thname = TheoryRouseFrequency.thname\n    citations = TheoryRouseFrequency.citations\n    doi = TheoryRouseFrequency.doi\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        self.function = self.calculate\n        self.has_modes = False\n        # self.parameters[""logwmin""] = Parameter(\n        #     ""logwmin"",\n        #     -5,\n        #     ""Log of frequency range minimum"",\n        #     ParameterType.real,\n        #     opt_type=OptType.nopt)\n        # self.parameters[""logwmax""] = Parameter(\n        #     ""logwmax"",\n        #     4,\n        #     ""Log of frequency range maximum"",\n        #     ParameterType.real,\n        #     opt_type=OptType.nopt)\n        self.parameters[""G0""] = Parameter(\n            ""G0"",\n            1e6,\n            ""Modulus c*kB*T/N"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=0,\n        )\n        self.parameters[""tau0""] = Parameter(\n            ""tau0"",\n            1e-3,\n            ""Segment relaxation time"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=0,\n        )\n        self.parameters[""M0""] = Parameter(\n            ""M0"",\n            0.2,\n            ""Segment molar mass"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=0,\n        )\n\n    def calculate(self, f=None):\n        """"""RouseFrequency function""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        G0 = self.parameters[""G0""].value\n        tau0 = self.parameters[""tau0""].value\n        M0 = self.parameters[""M0""].value\n        try:\n            Mw = float(f.file_parameters[""Mw""])\n        except (ValueError, KeyError):\n            self.Qprint(""Invalid Mw value"")\n            return\n\n        omega = ft.data[:, 0]\n        params = [G0, tau0, Mw / M0, omega]\n        gp, gpp = rh.approx_rouse_frequency(params)\n\n        tt.data[:, 0] = omega\n        tt.data[:, 1] = gp\n        tt.data[:, 2] = gpp\n\n\nclass CLTheoryRouseFrequency(BaseTheoryRouseFrequency, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # This class usually stays empty\n\n\nclass GUITheoryRouseFrequency(BaseTheoryRouseFrequency, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # add widgets specific to the theory here:\n'"
RepTate/theories/TheorySCCR.py,14,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheorySCCR\n\nModule for the SCCR theory for the non-linear flow of entangled polymers.\n\n""""""\nimport numpy as np\nfrom scipy.integrate import odeint\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom PyQt5.QtWidgets import QToolBar, QToolButton, QMenu, QSpinBox, QInputDialog\nfrom PyQt5.QtCore import QSize\nfrom PyQt5.QtGui import QIcon\nfrom PyQt5.QtCore import Qt\nfrom RepTate.gui.Theory_rc import *\nfrom math import sqrt, exp, pow\nimport time\nfrom RepTate.core.Theory import EndComputationRequested\nimport RepTate.theories.sccr_ctypes_helper as sch\nfrom ctypes import c_int, c_double\nfrom PyQt5.QtCore import pyqtSignal\nfrom RepTate.theories.theory_helpers import FlowMode\n\n\nclass TheorySCCR(CmdBase):\n    """"""Full SCCR theory for the Non-linear transient flow of linear entangled polymers.\n        \n    * **Parameters**\n       - ``tau_e`` : Rouse time of one entanglement segment (of length :math:`M_e`.\n       - ``Ge`` : Entanglement modulus.\n       - ``Me`` : Entanglement molecular weight.\n       - ``c_nu`` : Constraint release parameter.\n       - ``R_S`` : Retraction rate parameter\n    """"""\n\n    thname = ""GLaMM""\n    description = ""SCCR theory for linear entangled polymers""\n    citations = [""Graham, R.S. et al., J. Rheol., 2003, 47, 1171-1200""]\n    doi = [""http://dx.doi.org/10.1122/1.1595099""]\n\n    def __new__(cls, name="""", parent_dataset=None, ax=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheorySCCR(name, parent_dataset, ax)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheorySCCR(name, parent_dataset, ax)\n        )\n\n\nclass BaseTheorySCCR:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/NLVE/Theory/theory.html#sccr-theory""\n    single_file = False\n    thname = TheorySCCR.thname\n    citations = TheorySCCR.citations\n    doi = TheorySCCR.doi\n\n    signal_get_MW = pyqtSignal(object)\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        self.function = self.SCCR\n        self.has_modes = False\n        if CmdBase.mode == CmdMode.GUI:\n            self.signal_get_MW.connect(self.launch_get_MW_dialog)\n\n        self.parameters[""tau_e""] = Parameter(\n            ""tau_e"",\n            1,\n            ""Rouse time of one Entanglement"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=0.0,\n            max_value=np.inf,\n        )\n        self.parameters[""Ge""] = Parameter(\n            ""Ge"",\n            1,\n            ""Entanglement modulus"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=0.0,\n            max_value=np.inf,\n        )\n        self.parameters[""Me""] = Parameter(\n            ""Me"",\n            1,\n            ""Entanglement molecular weight"",\n            ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=0.0,\n            max_value=np.inf,\n        )\n        self.parameters[""c_nu""] = Parameter(\n            name=""c_nu"",\n            value=0.1,\n            description=""Constraint Release parameter"",\n            type=ParameterType.discrete_real,\n            opt_type=OptType.const,\n            discrete_values=[0, 0.01, 0.03, 0.1, 0.3, 1, 3, 10],\n        )\n        self.parameters[""Rs""] = Parameter(\n            name=""Rs"",\n            value=2.0,\n            description=""Retraction rate parameter"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n            min_value=0.0,\n            max_value=4.0,\n        )\n        self.parameters[""N""] = Parameter(\n            name=""N"",\n            value=1,\n            description=""npoints=N*Z Precision of SCCR (odd number)"",\n            type=ParameterType.integer,\n            opt_type=OptType.const,\n            display_flag=False,\n        )\n        self.parameters[""recommendedN""] = Parameter(\n            name=""recommendedN"",\n            value=False,\n            description=""Get Optimal value of N, depending on Z"",\n            type=ParameterType.boolean,\n            opt_type=OptType.const,\n            display_flag=False,\n        )\n\n        self.init_flow_mode()\n        self.get_material_parameters()\n        self.autocalculate = False\n\n    def launch_get_MW_dialog(self):\n        title = \'Missing ""Mw"" value\'\n        msg = \'Set ""Mw"" value for file ""%s""\' % self.fname_missing_mw\n        def_val = 10\n        min_val = 0\n        val, success = QInputDialog.getDouble(self, title, msg, def_val, min_val)\n        self.success_MW = success\n        self.new_MW_val = val\n\n    def init_flow_mode(self):\n        """"""Find if data files are shear or extension""""""\n        try:\n            f = self.theory_files()[0]\n            if f.file_type.extension == ""shear"":\n                self.flow_mode = FlowMode.shear\n            else:\n                self.flow_mode = FlowMode.uext\n        except Exception as e:\n            print(""in SCCR init:"", e)\n            self.flow_mode = FlowMode.shear  # default mode: shear\n\n    def do_fit(self, line):\n        """"""Minimisation procedure disabled in this theory""""""\n        self.Qprint(\n            ""<font color=red><b>Minimisation procedure disabled in this theory</b></font>""\n        )\n\n    def show_theory_extras(self, show=False):\n        """"""Called when the active theory is changed""""""\n        pass\n\n    def extra_graphic_visible(self, state):\n        """"""Do nothing""""""\n        pass\n\n    def Get_Recommended_N(self, cnu, z):\n        n = 0\n        if cnu > 0.1:\n            if z < 5:\n                n = 5 * z\n            elif z < 10:\n                n = 3 * z\n            else:\n                n = z\n        elif cnu > 0.03:\n            if z < 5:\n                n = 5 * z\n            elif z < 13:\n                n = 3 * z\n            else:\n                n = z\n        elif cnu > 0.01:\n            if z < 5:\n                n = 5 * z\n            elif z < 20:\n                n = 3 * z\n            else:\n                n = z\n        else:\n            if z < 5:\n                n = 5 * z\n            elif z < 25:\n                n = 3 * z\n            else:\n                n = z\n        return n\n\n    def Set_beta_rcr(self, z, cnu):\n        beta_rcr = 1\n        if cnu > 0:\n            logcnu = np.log10(cnu)\n            Zeq = z * (1.0923 - 0.38008 * logcnu - 0.041605 * logcnu * logcnu)\n            fZ = (\n                0.65237\n                - 0.4223 / sqrt(Zeq)\n                + 2.1586 / Zeq\n                - 17.581 / pow(Zeq, 1.5)\n                + 25.071 / Zeq / Zeq\n            )\n            gcnu = 1.2065 + 0.65493 * logcnu + 0.073027 * logcnu * logcnu\n            beta_rcr = fZ * gcnu\n        return beta_rcr\n\n    def ind(self, k, i, j):\n        """"""\n        Convert k,i,j (3D array) indices to ind (1D array), considering the symmetry of the problem\n         \\  1 /  (j=i diagonal)\n          \\  /\n         2 \\/ 4\n           /\\\n          /  \\\n         /  3 \\ (j=self.N-i diagonal)\n        """"""\n        if j >= i and j >= (self.N - i):  # 1st Quadrant\n            ind0 = k * self.SIZE\n            if i <= self.N / 2:\n                return ind0 + i * (i + 3) // 2 + j - self.N\n            else:\n                if self.N % 2 == 0:\n                    return (\n                        ind0\n                        - i * i // 2\n                        + (2 * self.N + 1) * i // 2\n                        + j\n                        - self.N * (2 + self.N) // 4\n                    )\n                else:\n                    return (\n                        ind0\n                        - i * i // 2\n                        + (2 * self.N + 1) * i // 2\n                        + j\n                        - ((self.N + 1) // 2) ** 2\n                    )\n        elif j >= i and j < (self.N - i):  # 2nd Quadrant\n            # Reflection of point on J=self.N-I line\n            auxi = self.N - j\n            auxj = self.N - i\n            return self.ind(k, auxi, auxj)\n        elif j < i and j < (self.N - i):  # 3rd Quadrant\n            # INVERSION OF THE POINT WITH RESPECT TO THE POINT (self.N/2, self.N/2)\n            auxi = self.N - i\n            auxj = self.N - j\n            return self.ind(k, auxi, auxj)\n        elif j < i and j >= (self.N - i):  # 4th Quadrant\n            # Reflection of point on K=I line\n            auxi = j\n            auxj = i\n            return self.ind(k, auxi, auxj)\n\n    def set_yeq(self):\n        aux = self.N / self.Z / 2.0\n        ind = 0\n        for k in range(3):\n            for i in range(self.N + 1):\n                mm = max(self.N - i, i)\n                for j in range(mm, self.N + 1):\n                    if (k != 1) and (abs(i - j) < aux):\n                        self.yeq[ind] = 1.0 / 3.0\n                    ind += 1\n\n    def pde_shear(self, y, t):\n        if self.stop_theory_flag:\n            raise EndComputationRequested\n        if t >= self.tmax * self.count:\n            self.Qprint(""-"", end="""")\n            self.count += 0.1\n        n = len(y)\n        y_arr = (c_double * n)(*y[:])\n        dy_arr = (c_double * n)(*np.zeros(n))\n        sch.sccr_dy(y_arr, dy_arr, c_double(t))\n        return dy_arr[:]\n\n    def SCCR(self, f=None):\n        """"""Calculates the theory""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        tt.data[:, 0] = ft.data[:, 0]\n\n        self.taue = self.parameters[""tau_e""].value\n        Ge = self.parameters[""Ge""].value\n        Me = self.parameters[""Me""].value\n        self.cnu = self.parameters[""c_nu""].value\n        self.Rs = self.parameters[""Rs""].value\n        try:\n            Mw = float(f.file_parameters[""Mw""])\n        except KeyError:\n            self.success_MW = None\n            self.fname_missing_mw = f.file_name_short\n            if CmdBase.mode == CmdMode.GUI:\n                self.signal_get_MW.emit(self)\n                while self.success_MW is None:\n                    time.sleep(0.5)\n            if self.success_MW:\n                f.file_parameters[""Mw""] = self.new_MW_val\n                Mw = self.new_MW_val\n            else:\n                self.Qprint(\n                    \'<big><font color=red><b>Mw value is missing in file ""%s""</b></font></big>\'\n                    % f.file_name_short\n                )\n                return\n        gdot = float(f.file_parameters[""gdot""])\n        gdot = gdot * self.taue\n\n        self.Z = int(np.round(Mw / Me))\n        if self.Z < 1:\n            # self.Qprint(""WARNING: Mw of %s is too small""%(f.file_name_short))\n            self.Z = 1\n        if self.parameters[""recommendedN""].value:\n            self.N = self.Get_Recommended_N(self.cnu, self.Z)\n            self.Qprint(""recommend N=%d"" % self.N)\n        else:\n            self.N = self.Z * self.parameters[""N""].value\n\n        # Setup stuff\n        if self.N % 2 == 0:\n            self.SIZE = ((self.N + 1) * (self.N + 3) + 1) // 4\n        else:\n            self.SIZE = (self.N + 1) * (self.N + 3) // 4\n\n        self.yeq = np.zeros(\n            3 * self.SIZE\n        )  # Integer division (NEED TO STORE 3 COMPONENTS f(0)=fxx f(1)=fxy f(2)=fyy)\n        self.beta_rcr = self.Set_beta_rcr(self.Z, self.cnu)\n        self.prevt = 0\n        self.prevtlog = 1e-12\n        self.dt = 0\n        self.NMAXROUSE = 50  # To calculate fast Rouse modes inside the tube\n        self.relerr = 1.0e-3\n\n        # send value of N, Z, and SIZE to C code\n        is_shear = c_int(self.flow_mode == FlowMode.shear)\n        sch.set_static_int(c_int(self.N), c_int(self.Z), c_int(self.SIZE), is_shear)\n        # initialise gdot, prevt, dt, beta_rcr, and cnu in C code\n        sch.set_static_double(\n            c_double(gdot),\n            c_double(self.prevt),\n            c_double(self.dt),\n            c_double(self.beta_rcr),\n            c_double(self.cnu),\n            c_double(self.Rs),\n        )\n\n        # Initialize the equilibrium function yeq\n        t = ft.data[:, 0] / self.taue\n        t = np.concatenate([[0], t])  # integration starts at t=0\n        self.set_yeq()\n        sch.set_yeq_static(self.yeq)\n        # p = [] # parameters are static in the C code\n        dt0 = (self.Z / self.N) ** 2.5\n\n        ## SOLUTION WITH SCIPY.ODEINT\n        self.Qprint(""<b>SCCR</b> - File: %s"" % f.file_name_short)\n        self.tmax = t[-1]\n        self.count = 0.1\n        self.Qprint(""Rate %.3g<br>  0%% "" % gdot, end="""")\n        try:\n            sig = odeint(\n                self.pde_shear,\n                self.yeq,\n                t,\n                args=(),\n                full_output=1,\n                h0=dt0,\n                rtol=self.relerr,\n            )\n        except EndComputationRequested:\n            return\n        else:\n            self.Qprint(""&nbsp;100%"")\n        Sint = np.linspace(0, self.Z, self.N + 1)\n        Fint = np.zeros(self.N + 1)\n        t = t[1:]\n        sigma = sig[0][1:]\n        if self.flow_mode == FlowMode.shear:\n            tmp = self.Z * self.Z / 2.0\n            for i in range(len(t)):\n                # Stress from tube theory\n                Fint = [sigma[i][self.ind(1, j, j)] for j in range(self.N + 1)]\n                stressTube = np.trapz(Fint, Sint) * 3.0 / self.Z  # *3.0/self.N\n                # Fast modes inside the tube\n                stressRouse = 0\n                for j in range(self.Z, self.NMAXROUSE * self.Z + 1):\n                    jsq = j * j\n                    # stressRouse+=self.Z*self.Z/2.0/j/j*(1-np.exp(-2.0*j*j*t[i]/self.Z/self.Z))/self.Z*gdot\n                    stressRouse += (1 - exp(-jsq * t[i] / tmp)) / jsq\n                tt.data[i, 1] = (\n                    stressTube * 4.0 / 5.0 + stressRouse * tmp / self.Z * gdot\n                ) * Ge\n        else:\n            # extensional flow\n            Zsq = self.Z * self.Z\n            for i in range(len(t)):\n                # Stress from tube theory\n                Fint = [\n                    (sigma[i][self.ind(0, j, j)] - sigma[i][self.ind(2, j, j)])\n                    for j in range(self.N + 1)\n                ]\n                stressTube = np.trapz(Fint, Sint) * 3.0 / self.Z\n                tt.data[i, 1] = stressTube * 4.0 / 5.0 * Ge\n\n\nclass CLTheorySCCR(BaseTheorySCCR, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n\nclass GUITheorySCCR(BaseTheorySCCR, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n        # add widgets specific to the theory\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n\n        self.tbutflow = QToolButton()\n        self.tbutflow.setPopupMode(QToolButton.MenuButtonPopup)\n        menu = QMenu()\n        self.shear_flow_action = menu.addAction(\n            QIcon("":/Icon8/Images/new_icons/icon-shear.png""), ""Shear Flow""\n        )\n        self.extensional_flow_action = menu.addAction(\n            QIcon("":/Icon8/Images/new_icons/icon-uext.png""), ""Extensional Flow""\n        )\n        if self.flow_mode == FlowMode.shear:\n            self.tbutflow.setDefaultAction(self.shear_flow_action)\n        else:\n            self.tbutflow.setDefaultAction(self.extensional_flow_action)\n        self.tbutflow.setMenu(menu)\n        tb.addWidget(self.tbutflow)\n\n        self.spinbox = QSpinBox()\n        self.spinbox.setRange(1, 5)  # min and max number of modes\n        self.spinbox.setPrefix(""N="")\n        self.spinbox.setSuffix(""*Z"")\n        self.spinbox.setToolTip(""Precision of SCCR Calculation"")\n        self.spinbox.setValue(self.parameters[""N""].value)\n        self.spinbox.setSingleStep(2)\n        tb.addWidget(self.spinbox)\n\n        self.recommendedN = tb.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-light-on-N.png""),\n            ""Recommended N value"",\n        )\n        self.recommendedN.setCheckable(True)\n\n        self.thToolsLayout.insertWidget(0, tb)\n\n        connection_id = self.shear_flow_action.triggered.connect(self.select_shear_flow)\n        connection_id = self.extensional_flow_action.triggered.connect(\n            self.select_extensional_flow\n        )\n        connection_id = self.spinbox.valueChanged.connect(\n            self.handle_spinboxValueChanged\n        )\n        connection_id = self.recommendedN.triggered.connect(self.handle_recommendedN)\n\n    def select_shear_flow(self):\n        self.flow_mode = FlowMode.shear\n        self.tbutflow.setDefaultAction(self.shear_flow_action)\n\n    def select_extensional_flow(self):\n        self.flow_mode = FlowMode.uext\n        self.tbutflow.setDefaultAction(self.extensional_flow_action)\n\n    def handle_recommendedN(self, checked):\n        self.spinbox.setEnabled(not checked)\n        self.set_param_value(""recommendedN"", checked)\n\n    def handle_spinboxValueChanged(self, value):\n        self.set_param_value(""N"", value)\n\n    def set_extra_data(self, extra_data):\n        """"""Set extra data when loading project""""""\n        self.spinbox.setValue(self.parameters[""N""].value)\n        self.recommendedN.setChecked(self.parameters[""recommendedN""].value)\n        self.handle_recommendedN(self.parameters[""recommendedN""].value)\n'"
RepTate/theories/TheoryShanbhagMaxwellModes.py,310,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryShanbhagMaxwellModes\n\nModule that defines theories related to Maxwell modes, in the frequency and time domains \nbased on the codes pyRespect-time (10.1002/mats.201900005) and pyRespect-frequency (10.3933/ApplRheol-23-24628)\n\n""""""\nimport sys\nimport os\nimport numpy as np\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.DataTable import DataTable\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom PyQt5.QtWidgets import QToolBar, QToolButton, QMenu, QMessageBox, QFileDialog\nfrom PyQt5.QtCore import QSize\nfrom PyQt5.QtGui import QIcon\nfrom scipy.optimize import nnls, minimize, least_squares\nfrom scipy.interpolate import interp1d\nfrom scipy.integrate import cumtrapz, quad\nimport enum\nimport RepTate\nimport time\n\nclass PredictionMode(enum.Enum):\n    """"""Define which prediction we want to see\n    \n    Parameters can be:\n        - cont: Prediction from Continuous spectrum\n        - disc: Prediction from Discrete spectrum\n    """"""\n    cont = 0\n    disc = 1\n\n\nclass TheoryShanbhagMaxwellModesFrequency(CmdBase):\n    """"""Extract continuous and discrete relaxation spectra from complex modulus G*(w)\n        \n    * **Parameters**\n       - plateau : is there a residual plateau in the data (default False).\n       - ns : Number of grid points to represent the continuous spectrum (typical 50-100)\n       - lamC : Specify lambda_C instead of using the one inferred from the L-curve (default 0, use the L-curve).\n       - SmFacLam = Smoothing Factor.\n       - MaxNumModes = Max Number of Modes (default 0, automatically determine the optimal number of modes).\n       - lam_min = lower limit of lambda for lcurve calculation (default 1e-10).\n       - lam_max = higher limit of lambda for lcurve calculation (default 1e3).\n       - lamDensity = lambda density per decade (default 3, use 2 or more).\n       - rho_cutoff = Threshold to avoid picking too small lambda for L-curve without (default 0).\n       - deltaBaseWeightDist = how finely to sample BaseWeightDist (default 0.2).\n       - minTauSpacing = how close do successive modes (tau2/tau1) have to be before we try to mege them (default 1.25).\n    \n    """"""\n    thname = ""ReSpect""\n    description = ""Relaxation spectra from dynamic moduli""\n    citations = [""Takeh, A. and Shanbhag, S., Appl. Rheol. 2013, 23, 24628""]\n    doi = [\'http://dx.doi.org/10.3933/ApplRheol-23-24628\']\n    \n    def __new__(cls, name="""", parent_dataset=None, ax=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return GUITheoryShanbhagMaxwellModesFrequency(name, parent_dataset, ax) if (\n            CmdBase.mode == CmdMode.GUI) else CLTheoryShanbhagMaxwellModesFrequency(\n                name, parent_dataset, ax)\n\n\nclass BaseTheoryShanbhagMaxwellModesFrequency:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = \'http://reptate.readthedocs.io/manual/Applications/LVE/Theory/theory.html#shanbhag-maxwell-modes\'\n    single_file = True\n    thname = TheoryShanbhagMaxwellModesFrequency.thname\n    citations = TheoryShanbhagMaxwellModesFrequency.citations\n    doi = TheoryShanbhagMaxwellModesFrequency.doi \n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n        self.function = self.ShanBhagMaxwellModesFrequency\n        self.has_modes = True\n        self.view_modes = True\n        wmin = self.parent_dataset.minpositivecol(0)\n        wmax = self.parent_dataset.maxcol(0)\n        nmodes = int(np.round(np.log10(wmax / wmin)))\n\n        self.parameters[""plateau""] = Parameter(\n            ""plateau"",\n            False,\n            ""is there a residual plateau?"",\n            ParameterType.boolean,\n            opt_type=OptType.const,\n            display_flag=False)\n        self.parameters[""ns""] = Parameter(\n            ""ns"",\n            100,\n            ""Number of grid points to represent the continuous spectrum (typical 50-100)"",\n            ParameterType.integer,\n            opt_type=OptType.const)\n        self.parameters[""lamC""] = Parameter(\n            ""lamC"",\n            0,\n            ""Specify lambda_C"",\n            ParameterType.real,\n            opt_type=OptType.nopt)\n        self.parameters[""SmFacLam""] = Parameter(\n            name=""SmFacLam"",\n            value=0,\n            description=""Smoothing Factor (between -1 and 1)"",\n            type=ParameterType.discrete_integer,\n            opt_type=OptType.const,\n            discrete_values=[-1,0,1])\n        self.parameters[""FreqEnd""] = Parameter(\n            name=""FreqEnd"",\n            value=1,\n            description=""Treatment of Frequency Window ends (1, 2 or 3)"",\n            type=ParameterType.discrete_integer,\n            opt_type=OptType.const,\n            discrete_values=[1,2,3])\n        self.parameters[""MaxNumModes""] = Parameter(\n            ""MaxNumModes"",\n            0,\n            ""Max Number of Modes"",\n            ParameterType.integer,\n            opt_type=OptType.opt)\n        self.parameters[""lam_min""] = Parameter(\n            ""lam_min"",\n            1e-10,\n            ""lower limit of lambda for lcurve calculation"",\n            ParameterType.real,\n            opt_type=OptType.nopt)\n        self.parameters[""lam_max""] = Parameter(\n            ""lam_max"",\n            1e3,\n            ""higher limit of lambda for lcurve calculation"",\n            ParameterType.real,\n            opt_type=OptType.nopt)\n        self.parameters[""lamDensity""] = Parameter(\n            ""lamDensity"",\n            3,\n            ""lambda density per decade"",\n            ParameterType.integer,\n            opt_type=OptType.nopt)\n        self.parameters[""rho_cutoff""] = Parameter(\n            ""rho_cutoff"",\n            0,\n            ""Threshold to avoid picking too small lambda"",\n            ParameterType.real,\n            opt_type=OptType.nopt)\n        self.parameters[""deltaBaseWeightDist""] = Parameter(\n            ""deltaBaseWeightDist"",\n            0.2,\n            ""how finely to sample BaseWeightDist"",\n            ParameterType.real,\n            opt_type=OptType.nopt)\n        self.parameters[""minTauSpacing""] = Parameter(\n            ""minTauSpacing"",\n            1.25,\n            ""how close modes (tau2/tau1) for merge"",\n            ParameterType.real,\n            opt_type=OptType.nopt)\n\n        self.autocalculate = False\n\n        # GRAPHIC MODES\n        self.graphicmodes = []\n        self.spectrum = []\n        ns = self.parameters[\'ns\'].value\n        self.scont = np.zeros(ns)\n        self.Hcont = np.zeros(ns)\n        self.sdisc = np.zeros(ns)\n        self.Hdisc = np.zeros(ns)\n        self.setup_graphic_modes()\n\n        self.prediction_mode = PredictionMode.cont \n\n        self.GstM = None\n        self.K = None\n        self.n = 0\n\n    def setup_graphic_modes(self):\n        """"""Setup graphic helpers""""""\n        self.contspectrum = self.ax.plot([], [])[0]\n        self.contspectrum.set_marker(\'*\')\n        self.contspectrum.set_linestyle(\'--\')\n        self.contspectrum.set_visible(self.view_modes)\n        self.contspectrum.set_color(\'green\')\n        self.contspectrum.set_linewidth(5)\n        self.contspectrum.set_label(\'\')\n        #self.contspectrum.set_markerfacecolor(\'yellow\')\n        self.contspectrum.set_markeredgecolor(\'black\')\n        self.contspectrum.set_markeredgewidth(3)\n        self.contspectrum.set_markersize(6)\n        self.contspectrum.set_alpha(0.5)\n\n        self.discspectrum = self.ax.plot([], [])[0]\n        self.discspectrum.set_marker(\'D\')\n        self.discspectrum.set_visible(self.view_modes)\n        self.discspectrum.set_label(\'\')\n        self.discspectrum.set_markerfacecolor(\'yellow\')\n        self.discspectrum.set_markeredgecolor(\'black\')\n        self.discspectrum.set_markeredgewidth(3)\n        self.discspectrum.set_markersize(8)\n        self.discspectrum.set_alpha(0.5)\n\n        self.plot_theory_stuff()\n\n    def destructor(self):\n        """"""Called when the theory tab is closed""""""\n        self.graphicmodes_visible(False)\n        self.ax.lines.remove(self.contspectrum)\n        self.ax.lines.remove(self.discspectrum)\n\n    def show_theory_extras(self, show=False):\n        """"""Called when the active theory is changed""""""\n        if CmdBase.mode == CmdMode.GUI:\n            self.Qhide_theory_extras(show)\n        self.graphicmodes_visible(show)\n\n    def graphicmodes_visible(self, state):\n        """"""Change visibility of modes""""""\n        self.view_modes = state\n        self.contspectrum.set_visible(self.view_modes)\n        self.discspectrum.set_visible(self.view_modes)\n        self.parent_dataset.parent_application.update_plot()\n\n    def get_modes(self):\n        """"""Get the values of Maxwell Modes from this theory""""""\n        nmodes = len(self.sdisc)\n        tau = self.sdisc\n        G = self.Hdisc\n        return tau, G, True\n\n    def kernel_prestore(self, H, kernMat, *argv):\n        """"""\n            turbocharging kernel function evaluation by prestoring kernel matrix\n            Date    : 8/17/2018\n            Function: kernel_prestore(input) returns K*h, where h = exp(H)\n            \n            Same as kernel, except prestoring hs, S, and W to improve speed 3x.\n            \n            outputs the 2n*1 dimensional vector K(H)(w) which is comparable to G* = [G\'|G""]\'\n            3/11/2019: returning Kh + G0\n                    \n            Input: H = substituted CRS,\n                    kernMat = 2n*ns matrix [(ws^2/1+ws^2) | (ws/1+ws)]\'*hs\n                        \n        """"""\n        if len(argv) > 0:\n            n = int(kernMat.shape[0]/2)\n            G0v = np.zeros(2*n)\n            G0v[:n] = argv[0]\n        else:\n            G0v = 0.\n        \n        return np.dot(kernMat, np.exp(H)) + G0v\n\n    def residualLM(self, H, lam, Gexp, kernMat):\n        """"""\n        %\n        % HELPER FUNCTION: Gets Residuals r\n        %""""""\n\n        n   = int(kernMat.shape[0]/2)\n        ns  = kernMat.shape[1]\n        \n        nl  = ns - 2\n        r   = np.zeros(2*n + nl)\n\n        # if plateau then unfurl G0\n        if len(H) > ns:\n            G0       = H[-1]\n            H        = H[:-1]\n            r[0:2*n] = (1. - self.kernel_prestore(H, kernMat, G0)/Gexp)\n        else:\n            r[0:2*n] = (1. - self.kernel_prestore(H,kernMat)/Gexp)\n        \n        # the curvature constraint is not affected by G0\t\n        r[2*n:2*n+nl] = np.sqrt(lam) * np.diff(H, n=2)  # second derivative\n        \n        return r\n        \n    def jacobianLM(self, H, lam, Gexp, kernMat):\n        """"""\n        \n        HELPER FUNCTION: Gets Jacobian J\n            returns a (n+nl * ns) matrix Jr; (ns + 1) if G0 is also supplied.\n            \n            Jr_(i, j) = dr_i/dH_j\n            \n            It uses kernelD, which approximates dK_i/dH_j, where K is the kernel\t\n        \n        """"""\n        \n        n   = int(kernMat.shape[0]/2)\n        ns  = kernMat.shape[1]\n        nl  = ns - 2\n\n        # L is a nl*ns tridiagonal matrix with 1 -2 and 1 on its diagonal.\n        L  = np.diag(np.ones(ns-1), 1) + np.diag(np.ones(ns-1),-1) + np.diag(-2. * np.ones(ns))\t     \n        L  = L[1:nl+1,:]\n\n\n        Jr  = np.zeros((2*n + nl,ns))\t\n            \n        #\n        # Furnish the Jacobian Jr - (2n+nl)*ns matrix\n        # Kmatrix is 2*n * ns matrix\n        #\n        Kmatrix = np.dot((1./Gexp).reshape(2*n,1), np.ones((1,ns)))\n\n        if len(H) > ns:\n\n            G0     = H[-1]\n            H      = H[:-1]\n\n            Jr  = np.zeros((2*n + nl,ns+1))\t\n            \n            Jr[0:2*n, 0:ns]   = -self.kernelD(H, kernMat) * Kmatrix;\n            Jr[0:n, ns]       = -1./Gexp[:n]\t\t\t\t\t\t# nonzero dr_i/dG0 only for G\'\n\n\n            Jr[2*n:2*n+nl,0:ns] = np.sqrt(lam) * L;\n            Jr[2*n:2*n+nl, ns]  = np.zeros(nl)\t\t\t\t\t\t# column for dr_i/dG0 = 0\n            \n        else:\n\n            Jr  = np.zeros((2*n + nl,ns))\t\n\n            Jr[0:2*n, 0:ns]     = -self.kernelD(H, kernMat) * Kmatrix;\n            Jr[2*n:2*n+nl,0:ns] = np.sqrt(lam) * L;\n        \n        return\tJr\n\n    def kernelD(self, H, kernMat):\n        """"""\n        Function: kernelD(input)\n            \n        outputs the 2n*ns dimensional vector DK(H)(w)\n        It approximates dK_i/dH_j = K * e(H_j):\n            \n        Input: H       = substituted CRS,\n                kernMat = matrix for faster kernel evaluation\n        Output: DK     = Jacobian of H\n            \n        """"""\n\n        n   = int(kernMat.shape[0]/2)\n        ns  = kernMat.shape[1]\n            \n        Hsuper  = np.dot(np.ones((2*n,1)), np.exp(H).reshape(1, ns))       \n        DK      = kernMat * Hsuper\n        \n        return DK\n\n\n    def getKernMat(self, s, w):\n        """"""furnish kerMat() which helps faster kernel evaluation, given s, w\n        Generates a 2n*ns matrix [(ws^2/1+ws^2) | (ws/1+ws)]\'*hs, which can be \n        multiplied with exp(H) to get predicted G*""""""\n        \n        ns          = len(s)\n        hsv         = np.zeros(ns)\n\n        hsv[0]      = 0.5 * np.log(s[1]/s[0])\n        hsv[ns-1]   = 0.5 * np.log(s[ns-1]/s[ns-2])\n        hsv[1:ns-1] = 0.5 * (np.log(s[2:ns]) - np.log(s[0:ns-2]))\n\n        S, W        = np.meshgrid(s, w)\n        ws          = S*W\n        ws2         = ws**2\n        \n        return np.vstack((ws2/(1+ws2), ws/(1+ws2))) *hsv\n\n    def getH(self, lam, Gexp, H, kernMat, G0=0):\n        """"""\n        minimize_H  V(lambda) := ||Gexp - kernel(H)||^2 +  lambda * ||L H||^2\n\n        Input  : lambda  = regularization parameter ,\n                Gexp    = experimental data,\n                H       = guessed H,\n                kernMat = matrix for faster kernel evaluation\n                G0      = optional\n        \n        Output : H_lam, [G0]\n                Default uses Trust-Region Method with Jacobian supplied by jacobianLM\n        """"""\n        # send Hplus = [H, G0], on return unpack H and G0\n        if G0>0:\n            Hplus= np.append(H, G0)\n            res_lsq = least_squares(self.residualLM, Hplus, jac=self.jacobianLM, args=(lam, Gexp, kernMat))\n            return res_lsq.x[:-1], res_lsq.x[-1]\n            \n        # send normal H, and collect optimized H back\n        else:\n            res_lsq = least_squares(self.residualLM, H, jac=self.jacobianLM, args=(lam, Gexp, kernMat))\t\t\t\n            return res_lsq.x\n\n\n    def InitializeH(self, Gexp, s, kernMat,  G0=0):\n        """"""\n        Function: InitializeH(input)\n            \n        Input:  Gexp    = 2n*1 vector [G\';G""],\n                s       = relaxation modes,\n                kernMat = matrix for faster kernel evaluation\n                G0      = optional; if plateau is nonzero\t\n            \n        Output: H = guessed H\n                G0 = optional guess if *argv is nonempty\t\n        """"""\n        \n        #\n        # To guess spectrum, pick a negative Hgs and a large value of lambda to get a\n        # solution that is most determined by the regularization\n        # March 2019; a single guess is good enough now, because going from large lambda to small\n        #             lambda in lcurve.\n\n        H    = -5.0 * np.ones(len(s)) + np.sin(np.pi * s)\n        lam  = 1e0\n        \n        if G0>0:\n            Hlam, G0 = self.getH(lam, Gexp, H, kernMat, G0)\t\t\n            return Hlam, G0\n        else:\n            Hlam     = self.getH(lam, Gexp, H, kernMat)\n            return Hlam\n\n    def getAmatrix(self, ns):\n        """"""Generate symmetric matrix A = L\' * L required for error analysis:\n        helper function for lcurve in error determination""""""\n        # L is a ns*ns tridiagonal matrix with 1 -2 and 1 on its diagonal;\n        nl = ns - 2\n        L  = np.diag(np.ones(ns-1), 1) + np.diag(np.ones(ns-1),-1) + np.diag(-2. * np.ones(ns))\n        L  = L[1:nl+1,:]\n                \n        return np.dot(L.T, L)\n\n    def getBmatrix(self, H, kernMat, Gexp, *argv):\n        """"""get the Bmatrix required for error analysis; helper for lcurve()\n        not explicitly accounting for G0 in Jr because otherwise I get underflow problems""""""\n        n   = int(len(Gexp)/2)\n        ns  = len(H)\n        nl  = ns - 2\n        r   = np.zeros(n)   \t  # vector of size (n);\n\n        # furnish relevant portion of Jacobian and residual\n        Kmatrix = np.dot((1./Gexp).reshape(2*n,1), np.ones((1,ns)))\n        Jr      = -self.kernelD(H, kernMat) * Kmatrix;    \n\n        # if plateau then unfurl G0\n        if len(argv) > 0:\n            G0 = argv[0]\n            r  = (1. - self.kernel_prestore(H, kernMat, G0)/Gexp)\n        else:\n            r = (1. - self.kernel_prestore(H, kernMat)/Gexp)\n        \n        B = np.dot(Jr.T, Jr) + np.diag(np.dot(r.T, Jr))\n\n        return B\n\n    def oldLamC(self, lam, rho, eta):\n\n        #\n        # 8/1/2018: Making newer strategy more accurate and robust: dividing by minimum rho/eta\n        # which is not as sensitive to lam_min, lam_max. This makes lamC robust to range of lam explored\n        #\n        #er = rho/np.amin(rho) + eta/np.amin(eta);\n        er    = rho/np.amin(rho) + eta/(np.sqrt(np.amax(eta)*np.amin(eta)))\n\n        #\n        # Since rho v/s lambda is smooth, we can interpolate the coarse mesh to find minimum\n        #\n        # change 3/20/2019: Scipy 0.17 has a bug with extrapolation: so making lami tad smaller \n        lami = np.logspace(np.log10(min(lam)+1e-15), np.log10(max(lam)-1e-15), 1000)\n        erri = np.exp(interp1d(np.log(lam), np.log(er), kind=\'cubic\', bounds_error=False,\n                        fill_value=(np.log(er[0]), np.log(er[-1])))(np.log(lami)))\n\n\n        ermin = np.amin(erri)\n        eridx = np.argmin(erri)\t\n        lamC  = lami[eridx]\n            \n        #\n        # 2/2: Copying 12/18 edit from pyReSpect-time;\n        #      for rough data have cutoff at rho = rho_cutoff?\n        #\n        rhoF  = interp1d(lam, rho, bounds_error=False, fill_value=(rho[0], rho[-1]))\n\n        if  rhoF(lamC) <= self.parameters[\'rho_cutoff\'].value:\n            try:\n                eridx = (np.abs(rhoF(lami) - self.parameters[\'rho_cutoff\'].value)).argmin()\n                if lami[eridx] > lamC:\n                    lamC = lami[eridx]\t\t\t\t\n            except:\n                pass\n\n        return lamC\n\n\n    def lcurve(self, Gexp, Hgs, kernMat, *argv):\n        """"""\n        Function: lcurve(input)\n        \n        Input: Gexp    = 2n*1 vector [Gt],\n                Hgs     = guessed H,\n                kernMat = matrix for faster kernel evaluation\n                G0      = optionally\n                \n        \n        Output: lamC and 3 vectors of size npoints*1 contains a range of lambda, rho\n                and eta. ""Elbow""  = lamC is estimated using a *NEW* heuristic AND by Hansen method\n\n        \n            March 2019: starting from large lambda to small cuts calculation time by a lot\n                    also gives an error estimate \n        """"""\n\n        plateau = self.parameters[\'plateau\'].value\n        if plateau:\n            G0 = argv[0]\n\n        lamDensity = self.parameters[\'lamDensity\'].value\n        lam_max = self.parameters[\'lam_max\'].value\n        lam_min = self.parameters[\'lam_min\'].value\n        npoints = int(lamDensity * (np.log10(lam_max) - np.log10(lam_min)))\n        hlam    = (lam_max/lam_min)**(1./(npoints-1.))\t\n        lam     = lam_min * hlam**np.arange(npoints)\n        eta     = np.zeros(npoints)\n        rho     = np.zeros(npoints)\n        logP    = np.zeros(npoints)\n        H       = Hgs.copy()\n        n       = len(Gexp)\n        ns      = len(H)\n        nl      = ns - 2\n        logPmax = -np.inf\t\t\t\t\t# so nothing surprises me!\n        Hlambda = np.zeros((ns, npoints))\n\n        # Error Analysis: Furnish A_matrix\n        Amat       = self.getAmatrix(len(H))\n        _, LogDetN = np.linalg.slogdet(Amat)\n                \n        #\n        # This is the costliest step\n        #\n        for i in reversed(range(len(lam))):\n            \n            self.Qprint(""."", end=\'\')\n            lamb    = lam[i]\n            \n            if plateau:\n                H, G0   = self.getH(lamb, Gexp, H, kernMat, G0)\t\t\t\n                rho[i]  = np.linalg.norm((1. - self.kernel_prestore(H, kernMat, G0)/Gexp))\n                Bmat    = self.getBmatrix(H, kernMat, Gexp, G0)\t\t\t\n            else:\n                H       = self.getH(lamb, Gexp, H, kernMat)\n                rho[i]  = np.linalg.norm((1. - self.kernel_prestore(H,kernMat)/Gexp))\n                Bmat    = self.getBmatrix(H, kernMat, Gexp)\n\n            eta[i]       = np.linalg.norm(np.diff(H, n=2))\n            Hlambda[:,i] = H\n\n            _, LogDetC = np.linalg.slogdet(lamb*Amat + Bmat)\n            V          =  rho[i]**2 + lamb * eta[i]**2\t\t\n                        \n            # this assumes a prior exp(-lam)\n            logP[i]    = -V + 0.5 * (LogDetN + ns*np.log(lamb) - LogDetC) - lamb\n            \n            if(logP[i] > logPmax):\n                logPmax = logP[i]\n            elif(logP[i] < logPmax - 18):\n                break\t\t\n\n        # truncate all to significant lambda\n        lam  = lam[i:]\n        logP = logP[i:]\n        eta  = eta[i:]\n        rho  = rho[i:]\n        logP = logP - max(logP)\n\n        Hlambda = Hlambda[:,i:]\n\n        #\n        # currently using both schemes to get optimal lamC\n        # new lamM works better with actual experimental data  \n        #\n        lamC = self.oldLamC(lam, rho, eta)\n        plam = np.exp(logP); plam = plam/np.sum(plam)\n        lamM = np.exp(np.sum(plam*np.log(lam)))\n\n        #\n        # Dialling in the Smoothness Factor\n        #\n        SmFacLam = self.parameters[\'SmFacLam\'].value\n        if SmFacLam > 0:\n            lamM = np.exp(np.log(lamM) + SmFacLam*(max(np.log(lam)) - np.log(lamM)))\n        elif SmFacLam < 0:\n            lamM = np.exp(np.log(lamM) + SmFacLam*(np.log(lamM) - min(np.log(lam))))\n\n        return lamM, lam, rho, eta, logP, Hlambda\n\n    def MaxwellModes(self, z, w, Gexp, isPlateau):\n        """"""\n        \n        Function: MaxwellModes(input)\n        \n        Solves the linear least squares problem to obtain the DRS\n        \n        Input: z = points distributed according to the density,\n                t    = n*1 vector contains times,\n                Gexp = 2n*1 vector contains Gp and Gpp\n                isPlateau = True if G0 \\neq 0\t\n        \n        Output: g, tau = spectrum  (array)\n                error = relative error between the input data and the G(t) inferred from the DRS\n                condKp = condition number\n        \n        """"""\n\n        N      = len(z)\n        tau    = np.exp(z)\n        n      = len(w)\n\n        #\n        # Prune small -ve weights g(i)\n        #\n        g, error, condKp = self.nnLLS(w, tau, Gexp, isPlateau)\n\n        # first remove runaway modes outside window with potentially large weight\n        izero = np.where(np.logical_or(max(w)*min(tau) < 0.02, min(w)*max(tau) > 50.))\n        tau   = np.delete(tau, izero)\n        g     = np.delete(g, izero)\n\n        # search for small weights (gi) \n        if isPlateau:\n            izero = np.where(g[:-1]/np.max(g[:-1]) < 1e-8)\n        else:\n            izero = np.where(g/np.max(g) < 1e-8)\n\n        tau   = np.delete(tau, izero);\n        g     = np.delete(g, izero)\n            \n        return g, tau, error, condKp\n\n    def nnLLS(self, w, tau, Gexp, isPlateau):\n        """"""\n        #\n        # Helper subfunction which does the actual LLS problem\n        # helps MaxwellModes\n        #\n        """"""\t\n        n       = int(len(Gexp)/2)\n        ntau    = len(tau)\n        S, W    = np.meshgrid(tau, w)\n        ws      = S*W\n        ws2     = ws**2\n        K       = np.vstack((ws2/(1+ws2), ws/(1+ws2)))   # 2n * nmodes\n\n        # K is n*ns [or ns+1]\n        if isPlateau:\n            K   = np.hstack(( K, np.ones((len(Gexp), 1)) ))  # G\' needs some G0\n            K[n:, ntau] = 0.\t\t\t\t\t\t\t\t # G"" doesn\'t have G0 contrib\n        #\n        # gets (Gst/GstE - 1)^2, instead of  (Gst -  GstE)^2\n        #\n        Kp      = np.dot(np.diag((1./Gexp)), K)\n        condKp  = np.linalg.cond(Kp)\n        g       = nnls(Kp, np.ones(len(Gexp)))[0]\n            \n        GstM   \t= np.dot(K, g)\n        error \t= np.sum((GstM/Gexp - 1.)**2)\n\n        return g, error, condKp\n\n    def GetWeights(self, H, w, s, wb):\n\n        """"""\n        %\n        % Function: GetWeights(input)\n        %\n        % Finds the weight of ""each"" mode by taking a weighted average of its contribution\n        % to Gp and Gpp, mixed with an even distribution given by `wb`\n        %\n        % Input: H = CRS (ns * 1)\n        %        w = n*1 vector contains times\n        %        s = relaxation modes (ns * 1)\n        %       wb = weightBaseDist\n        %\n        % Output: wt = weight of each mode\n        %\n        """"""\n    \n        ns         = len(s)\n        n          = len(w)\n\n        hs         = np.zeros(ns)\n        wt         = hs\n        \n        hs[0]      = 0.5 * np.log(s[1]/s[0])\n        hs[ns-1]   = 0.5 * np.log(s[ns-1]/s[ns-2])\n        hs[1:ns-1] = 0.5 * (np.log(s[2:ns]) - np.log(s[0:ns-2]))\n\n        S, W       = np.meshgrid(s, w)\n        ws         = S*W\n        ws2        = ws**2\n\n        kern       = np.vstack((ws2/(1+ws2), ws/(1+ws2)))\n        wij        = np.dot(kern, np.diag(hs * np.exp(H)))  # 2n * ns\n        K          = np.dot(kern, hs * np.exp(H)) # 2n * 1, comparable with Gexp\n\n        for i in np.arange(n):\n            wij[i,:] = wij[i,:]/K[i]\n\n        for j in np.arange(ns):\n            wt[j] = np.sum(wij[:,j])\n\n        wt  = wt/np.trapz(wt, np.log(s))\n        wt  = (1. - wb) * wt + (wb * np.mean(wt)) * np.ones(len(wt))\n\n        return wt\n\n    def GridDensity(self, x, px, N):\n\n        """"""#\n        #  PROGRAM: GridDensity(input)\n        #\n        #\tTakes in a PDF or density function, and spits out a bunch of points in\n        #       accordance with the PDF\n        #\n        #  Input:\n        #       x  = vector of points. It need *not* be equispaced,\n        #       px = vector of same size as x: probability distribution or\n        #            density function. It need not be normalized but has to be positive.\n        #  \t    N  = Number of points >= 3. The end points of ""x"" are included\n        #  \t     necessarily,\n        # \n        #  Output:\n        #       z  = Points distributed according to the density\n        #       hz = width of the ""intervals"" - useful to apportion domain to points\n        #            if you are doing quadrature with the results, for example.\n        #\n        #  (c) Sachin Shanbhag, November 11, 2015\n        #""""""\n\n        npts = 100;                              # can potentially change\n        xi   = np.linspace(min(x),max(x),npts)   # reinterpolate on equi-spaced axis\n        fint = interp1d(x,px,\'cubic\')\t         # smoothen using cubic splines\n        pint = fint(xi)        \t\t\t\t\t # interpolation\n        ci   = cumtrapz(pint, xi, initial=0)                \n        pint = pint/ci[npts-1]\n        ci   = ci/ci[npts-1]                     # normalize ci\n\n        alfa = 1./(N-1)                          # alfa/2 + (N-1)*alfa + alfa/2\n        zij  = np.zeros(N+1)                     # quadrature interval end marker\n        z    = np.zeros(N)                       # quadrature point\n\n        z[0]    = min(x);  \n        z[N-1]  = max(x); \n\n        #\n        # ci(Z_j,j+1) = (j - 0.5) * alfa\n        #\n        beta       = np.arange(0.5, N-0.5) * alfa\n        zij[0]     = z[0]\n        zij[N]     = z[N-1]\n        fint       = interp1d(ci, xi, \'cubic\')\n        zij[1:N]   = fint(beta)\n        h          = np.diff(zij)\n\n        #\n        # Quadrature points are not the centroids, but rather the center of masses\n        # of the quadrature intervals\n        #\n\n        beta     = np.arange(1, N-1) * alfa\n        z[1:N-1] = fint(beta)\n\n        return z, h\n\n    def mergeModes_magic(self, g, tau, imode):\n        """"""merge modes imode and imode+1 into a single mode\n        return gp and taup corresponding to this new mode\n        used only when magic = True""""""\n\n        iniGuess = [g[imode] + g[imode+1], 0.5*(tau[imode] + tau[imode+1])]\n        res = minimize(self.costFcn_magic, iniGuess, args=(g, tau, imode))\n\n        newtau        = np.delete(tau, imode+1)\n        newtau[imode] = res.x[1]\n\n        newg          = np.delete(g, imode+1)\n        newg[imode]   = res.x[0]\n            \n        return newg, newtau\n            \n    def normKern_magic(self, w, gn, taun, g1, tau1, g2, tau2):\n        """"""helper function: for costFcn and mergeModes\n        used only when magic = True""""""\n        wt   = w*taun\n        Gnp  = gn * (wt**2)/(1. + wt**2)\n        Gnpp = gn *  wt/(1. + wt**2)\n\n        wt   = w*tau1\n        Gop  = g1 * (wt**2)/(1. + wt**2)\n        Gopp = g1 *  wt/(1. + wt**2)\n        \n        wt    = w*tau2\n        Gop  += g2 * (wt**2)/(1. + wt**2)\n        Gopp += g2 *  wt/(1. + wt**2)\n        \n        return (Gnp/Gop - 1.)**2 + (Gnpp/Gopp - 1.)**2\n\n    def costFcn_magic(self, par, g, tau, imode):\n        """"""""helper function for mergeModes; establishes cost function to minimize\n            used only when magic = True""""""\n\n        gn   = par[0]\n        taun = par[1]\n\n        g1   = g[imode]\n        g2   = g[imode+1]\n        tau1 = tau[imode]\n        tau2 = tau[imode+1]\n\n        wmin = min(1./tau1, 1./tau2)/10.\n        wmax = max(1./tau1, 1./tau2)*10.\n\n        return quad(self.normKern_magic, wmin, wmax, args=(gn, taun, g1, tau1, g2, tau2))[0]\n\n    def FineTuneSolution(self, tau, w, Gexp, isPlateau):\n        """"""Given a spacing of modes tau, tries to do NLLS to fine tune it further\n        If it fails, then it returns the old tau back\t   \n        Uses helper function: res_wG which computes residuals\n        """"""\t   \n\n        success   = False\n        initError = np.linalg.norm(self.res_wG(tau, w, Gexp, isPlateau))\n\n        try:\n            res     = least_squares(self.res_wG, tau, bounds=(0.02/max(w), 50/min(w)),\n                                args=(w, Gexp, isPlateau))\t\t\n            tau     = res.x\t\t\n            tau0    = tau.copy()\n            success = True\n        except:\n            pass\n\n        g, tau, _, _ = self.MaxwellModes(np.log(tau), w, Gexp, isPlateau)   # Get g_i, taui\n        finalError   = np.linalg.norm(self.res_wG(tau, w, Gexp, isPlateau))\n\n        # keep fine tuned solution, only if it improves things\n        if finalError > initError:\n            success = False\n\n        return success, g, tau\n\n    def res_wG(self, tau, wexp, Gexp, isPlateau):\n        """"""\n            Helper function for final optimization problem\n        """"""\n        g, _, _ = self.nnLLS(wexp, tau, Gexp, isPlateau)\n        Gmodel  = np.zeros(len(Gexp))\n\n            \n        S, W    = np.meshgrid(tau, wexp)\n        ws      = S*W\n        ws2     = ws**2\n        K       = np.vstack((ws2/(1+ws2), ws/(1+ws2)))   # 2n * nmodes\n\n        # add G0\n        if isPlateau:\n            Gmodel \t= np.dot(K, g[:-1])\n            n = int(len(Gexp)/2)\n            Gmodel[:n] += g[-1]\t\n        else:\n            Gmodel \t= np.dot(K, g)\n                    \n        residual = Gmodel/Gexp - 1.\n            \n        return residual\n\n\n    def ShanBhagMaxwellModesFrequency(self, f=None):\n        """"""Function that calculates the spectrum""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n\n        # CALCULATE THE CONTINUOUS SPECTRUM FIRST\n        self.Qprint(""<b>CONTINUOUS SPECTRUM</b>"")\n        w = ft.data[:, 0]\n        Gp = ft.data[:, 1]\n        Gpp = ft.data[:, 2]\n\n        # Remove points with w<=0\n        filt=w>0\n        w=w[filt]\n        Gp=Gp[filt]\n        Gpp=Gpp[filt]\n\n        # Sanitize the input: remove repeated values and space data homogeneously. Using linear interpolation\n        w, indices = np.unique(w, return_index = True)\t\n        Gp         = Gp[indices]\n        Gpp        = Gpp[indices]\n        fp  =  interp1d(w, Gp, fill_value=""extrapolate"")\n        fpp =  interp1d(w, Gpp, fill_value=""extrapolate"")\n        w  =  np.logspace(np.log10(np.min(w)), np.log10(np.max(w)), max(len(w),200))\n        Gp =  fp(w)\n        Gpp = fpp(w)\n        Gexp = np.append(Gp, Gpp)\n\n        n = len(w)\n        self.n = n\n        self.wfit = np.copy(w)\n        tt.num_rows = len(w)\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        tt.data[:, 0] = w\n\n        ns = self.parameters[\'ns\'].value\n        wmin = w[0]\n        wmax = w[n-1]\n\n    \t# determine frequency window\n        if self.parameters[\'FreqEnd\'].value == 1:\n            smin = np.exp(-np.pi/2)/wmax; smax = np.exp(np.pi/2)/wmin\t\t\n        elif self.parameters[\'FreqEnd\'].value == 2:\n            smin = 1./wmax; smax = 1./wmin\t\t\t\t\n        elif self.parameters[\'FreqEnd\'].value == 3:\n            smin = np.exp(+np.pi/2)/wmax; smax = np.exp(-np.pi/2)/wmin\n\n        hs   = (smax/smin)**(1./(ns-1))\n        s    = smin * hs**np.arange(ns)\n\n        kernMat = self.getKernMat(s, w)\n\n        self.Qprint(\'Initial Set up...\',end=\'\')\n        tic  = time.time()\n        plateau = self.parameters[""plateau""].value\n        if plateau:\n            Hgs, G0  = self.InitializeH(Gexp, s, kernMat, np.min(Gexp))\n        else:\n            Hgs      = self.InitializeH(Gexp, s, kernMat)\n\n\n        te   = time.time() - tic\n        self.Qprint(\'({0:.1f} s)\'.format(te))\n        tic  = time.time()\n\n        # Find Optimum Lambda with \'lcurve\'\n        self.Qprint(\'Building the L-curve ...\',end=\'\')\n        if self.parameters[\'lamC\'].value == 0:\n            if plateau:\n                lamC, lam, rho, eta, logP, Hlam = self.lcurve(Gexp, Hgs, kernMat, G0)\n            else:\n                lamC, lam, rho, eta, logP, Hlam = self.lcurve(Gexp, Hgs, kernMat)\n        else:\n            lamC = self.parameters[\'lamC\'].value\n\n        te = time.time() - tic\n        self.Qprint(\'({0:.1f} s)\'.format(te))\n        tic = time.time()\n        self.Qprint(\'lamC = {0:0.3e}\'.format(lamC))\n\n        # Get the best spectrum\t\n        self.Qprint(\'Extracting CRS...\',end=\'\')\n        if plateau:\n            H, G0  = self.getH(lamC, Gexp, Hgs, kernMat, G0)\n            self.Qprint(\'G0 = {0:0.3e} ...\'.format(G0))\n        else:\n            H  = self.getH(lamC, Gexp, Hgs, kernMat)\n\n        te = time.time() - tic\n        self.Qprint(\'done ({0:.1f} s)\'.format(te))\n\n\t\t# Save inferred H(s) and Gw\n        if self.parameters[\'lamC\'].value != 0:\n            if plateau:\n                self.K   = self.kernel_prestore(H, kernMat, G0);\t\n                #np.savetxt(\'output/H.dat\', np.c_[s, H], fmt=\'%e\', header=\'G0 = {0:0.3e}\'.format(G0))\n            else:\n                self.K   = self.kernel_prestore(H, kernMat)\n                #np.savetxt(\'output/H.dat\', np.c_[s, H], fmt=\'%e\')\n             \n        else:\n            plam = np.exp(logP); plam = plam/np.sum(plam)\t\t\t\n            Hm   = np.zeros(len(s))\n            Hm2  = np.zeros(len(s))\n            cnt  = 0\n            for i in range(len(lam)):\t\n                #~ Hm   += plam[i]*Hlam[:,i]\n                #~ Hm2  += plam[i]*Hlam[:,i]**2\n                # count all spectra within a threshold\n                if plam[i] > 0.1:\n                    Hm   += Hlam[:,i]\n                    Hm2  += Hlam[:,i]**2\n                    cnt  += 1\n\n            Hm = Hm/cnt\n            dH = np.sqrt(Hm2/cnt - Hm**2)\n\n            if plateau:\n                self.K   = self.kernel_prestore(Hm, kernMat, G0);\t\n            else:\n                self.K   = self.kernel_prestore(Hm, kernMat);\t\n\n        #np.savetxt(\'output/Gfit.dat\', np.c_[w, K[:n], K[n:]], fmt=\'%e\')\n        if self.prediction_mode == PredictionMode.cont:\n            tt.data[:, 1] = self.K[:n]\n            tt.data[:, 2] = self.K[n:]\n\n        # Spectrum\n        self.scont = s\n        self.Hcont = H\n\n        # GET DISCRETE SPECTRUM\n        self.Qprint(""<b>DISCRETE SPECTRUM</b>"")\n\n        # range of N scanned\n        MaxNumModes=self.parameters[\'MaxNumModes\'].value\n        if(MaxNumModes == 0):\n            Nmax  = min(np.floor(3.0 * np.log10(max(w)/min(w))),n/4); # maximum N\n            Nmin  = max(np.floor(0.5 * np.log10(max(w)/min(w))),3);   # minimum N\n            Nv    = np.arange(Nmin, Nmax + 1).astype(int)\n        else:\n            Nv    = np.arange(MaxNumModes, MaxNumModes + 1).astype(int)\n\n        Cerror  = 1./(np.std(self.K/Gexp - 1.))  #\tCerror = 1.?\n        npts = len(Nv)\n\n        # range of wtBaseDist scanned\n        deltaBaseWeightDist = self.parameters[\'deltaBaseWeightDist\'].value\n        wtBase = deltaBaseWeightDist * np.arange(1, int(1./deltaBaseWeightDist))\n        AICbst = np.zeros(len(wtBase))\n        Nbst   = np.zeros(len(wtBase))  # nominal number of modes\n        nzNbst = np.zeros(len(wtBase))  # actual number of nonzero modes\n\n        # main loop over wtBaseDist\n        for ib, wb in enumerate(wtBase):\n            \n            # Find the distribution of nodes you need\n            wt  = self.GetWeights(H, w, s, wb)\n\n            # Scan the range of number of Maxwell modes N = (Nmin, Nmax) \n            ev    = np.zeros(npts)\n            nzNv  = np.zeros(npts)  # number of nonzero modes \n\n            for i, N in enumerate(Nv):\n                z, hz  = self.GridDensity(np.log(s), wt, N)         # select ""tau"" Points\n                g, tau, ev[i], _ = self.MaxwellModes(z, w, Gexp, plateau)    # get g_i\n                nzNv[i]                 = len(g)\n\n            # store the best solution for this particular wb\n            AIC        = 2. * Nv + 2. * Cerror * ev\n\n            AICbst[ib] = min(AIC)\n            Nbst[ib]   = Nv[np.argmin(AIC)]\n            nzNbst[ib] = nzNv[np.argmin(AIC)]\n\n        # global best settings of wb and Nopt; note this is nominal Nopt (!= len(g) due to NNLS)\n        Nopt  = int(Nbst[np.argmin(AICbst)])\n        wbopt = wtBase[np.argmin(AICbst)]\n\n        #\n        # Recompute the best data-set stats\n        #\n        wt                   = self.GetWeights(H, w, s, wbopt)\n        z, hz                = self.GridDensity(np.log(s), wt, Nopt)             # Select ""tau"" Points\n        g, tau, error, cKp = self.MaxwellModes(z, w, Gexp, plateau)   # Get g_i, taui\n        succ, gf, tauf = self.FineTuneSolution(tau, w, Gexp, plateau)\n        if succ:\n            g   = gf.copy(); tau = tauf.copy()\n\n        #\n        # Check if modes are close enough to merge\n        #\n        indx       = np.argsort(tau)\n        tau        = tau[indx]\n        tauSpacing = tau[1:]/tau[:-1]\n        itry       = 0\n\n        if plateau:\n            g[:-1] = g[indx]\n        else:\n            g      = g[indx]\n\n        minTauSpacing = self.parameters[\'minTauSpacing\'].value\n        while min(tauSpacing) < minTauSpacing and itry < 3:\n            self.Qprint(""Tau Spacing < minTauSpacing"")\n            \n            imode      = np.argmin(tauSpacing)      # merge modes imode and imode + 1\n            g, tau     = self.mergeModes_magic(g, tau, imode)\n\n            succ, g, tau = self.FineTuneSolution(tau, w, Gexp, plateau)\n            if succ:\n                g   = gf.copy(); tau = tauf.copy()\n                    \n            tauSpacing = tau[1:]/tau[:-1]\n            itry      += 1\n\n        if plateau:\n            G0 = g[-1]\n            g  = g[:-1]\n\n        self.Qprint(\'Number of optimum nodes = {0:d}\'.format(len(g)))\n\n        # Spectrum\n        self.sdisc = tau\n        self.Hdisc = g\n\n        S, W    = np.meshgrid(tau, w)\n        ws\t\t= S*W\n        ws2     = ws**2\n        K = np.vstack((ws2/(1+ws2), ws/(1+ws2)))\n        self.GstM   \t= np.dot(K, g)\n\n        if plateau:\n            self.GstM[:n] += G0\n\n        # TODO: DECIDE IF WE PLOT THE CONTINUOUS OR DISCRETE FIT TO G*(omega)\n        if self.prediction_mode == PredictionMode.disc:\n            tt.data[:, 1] = self.GstM[:n]\n            tt.data[:, 2] = self.GstM[n:]\n            self.Qprint(\'<b>Fit from discrete spectrum</b>\')\n        else:\n            self.Qprint(\'<b>Fit from continuous spectrum</b>\')\n\n    def do_fit(self, line=\'\'):\n        self.Qprint(""Fitting not allowed in this theory"")\n\n    def do_error(self, line):\n        """"""Report the error of the current theory\n\nReport the error of the current theory on all the files, taking into account the current selected xrange and yrange.\n\nFile error is calculated as the mean square of the residual, averaged over all points in the file. Total error is the mean square of the residual, averaged over all points in all files.""""""\n        total_error = 0\n        npoints = 0\n        view = self.parent_dataset.parent_application.current_view\n        tools = self.parent_dataset.parent_application.tools       \n        # table=\'\'\'<table border=""1"" width=""100%"">\'\'\'\n        # table+=\'\'\'<tr><th>File</th><th>Error (RSS)</th><th># Pts</th></tr>\'\'\'\n        tab_data = [[\'%-18s\' % \'File\', \'%-18s\' % \'Error (RSS)\', \'%-18s\' % \'# Pts\'],]\n        for f in self.theory_files():\n            if self.stop_theory_flag:\n                break\n            xexp, yexp, success = view.view_proc(f.data_table,\n                                                 f.file_parameters)\n            tmp_dt = self.get_non_extended_th_table(f)\n            xth, yth, success = view.view_proc(tmp_dt,\n                                               f.file_parameters)\n\n            yth2=np.copy(yexp)\n            for i in range(xexp.shape[1]):\n                fint = interp1d(xth[:,i],yth[:,i],\'linear\') # Get the theory at the same points as the data\n                yth2[:,i] = np.copy(fint(xexp[:,i]))\n            xth = np.copy(xexp)\n            yth = np.copy(yth2)\n\n            if (self.xrange.get_visible()):\n                conditionx = (xexp > self.xmin) * (xexp < self.xmax)\n            else:\n                conditionx = np.ones_like(xexp, dtype=np.bool)\n            if (self.yrange.get_visible()):\n                conditiony = (yexp > self.ymin) * (yexp < self.ymax)\n            else:\n                conditiony = np.ones_like(yexp, dtype=np.bool)\n            conditionnaninf = (~np.isnan(xexp)) * (~np.isnan(yexp)) * (\n                ~np.isnan(xth)) * (~np.isnan(yth)) * (~np.isinf(xexp)) * (\n                    ~np.isinf(yexp)) * (~np.isinf(xth)) * (~np.isinf(yth))\n            yexp = np.extract(conditionx * conditiony * conditionnaninf, yexp)\n            yth = np.extract(conditionx * conditiony * conditionnaninf, yth)\n            f_error = np.mean((yth - yexp)**2)\n            npt = len(yth)\n            total_error += f_error * npt\n            npoints += npt\n            # table+= \'\'\'<tr><td>%-18s</td><td>%-18.4g</td><td>%-18d</td></tr>\'\'\'% (f.file_name_short, f_error, npt)\n            tab_data.append([\'%-18s\'% f.file_name_short, \'%-18.4g\' % f_error, \'%-18d\' %npt])\n        # table+=\'\'\'</table><br>\'\'\'\n        # self.Qprint(table)\n        self.Qprint(tab_data)\n\n    def plot_theory_stuff(self):\n        """"""Plot theory helpers""""""\n        if not self.view_modes:\n             return\n\n        # PLOT CONTINUOUS SPECTRUM\n        view = self.parent_dataset.parent_application.current_view\n        data_table_tmp = DataTable(self.axarr)\n        data_table_tmp.num_columns = 3\n        ns = self.parameters[\'ns\'].value\n        data_table_tmp.num_rows = ns\n        data_table_tmp.data = np.zeros((ns, 3))\n        data_table_tmp.data[:, 0] = np.reciprocal(self.scont)\n        data_table_tmp.data[:, 1] = np.exp(self.Hcont)\n        data_table_tmp.data[:, 2] = np.exp(self.Hcont)\n        try:\n            x, y, success = view.view_proc(data_table_tmp, None)\n        except TypeError as e:\n            print(e)\n            return\n        self.contspectrum.set_data(x[:,0], y[:,0])\n\n        data_table_tmp.num_columns = 3\n        nmodes = len(self.sdisc)\n        data_table_tmp.num_rows = nmodes\n        data_table_tmp.data = np.zeros((nmodes, 3))\n        data_table_tmp.data[:, 0] = np.reciprocal(self.sdisc)\n        data_table_tmp.data[:, 1] = self.Hdisc\n        data_table_tmp.data[:, 2] = self.Hdisc\n        try:\n            x, y, success = view.view_proc(data_table_tmp, None)\n        except TypeError as e:\n            print(e)\n            return\n        self.discspectrum.set_data(x[:,0], y[:,0])\n\n\nclass CLTheoryShanbhagMaxwellModesFrequency(BaseTheoryShanbhagMaxwellModesFrequency, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n\nclass GUITheoryShanbhagMaxwellModesFrequency(BaseTheoryShanbhagMaxwellModesFrequency, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n        # add widgets specific to the theory\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n\n        self.tbutpredmode = QToolButton()\n        self.tbutpredmode.setPopupMode(QToolButton.MenuButtonPopup)\n        menu = QMenu()\n        self.cont_pred_action = menu.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-minimum-value.png\'),\n            ""Fit from Spectrum"")\n        self.disc_pred_action = menu.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-scatter-plot.png\'),\n            ""Fit from Discrete"")\n        if self.prediction_mode == PredictionMode.cont:\n            self.tbutpredmode.setDefaultAction(self.cont_pred_action)\n        else:\n            self.tbutpredmode.setDefaultAction(self.disc_pred_action)\n        self.tbutpredmode.setMenu(menu)\n        tb.addWidget(self.tbutpredmode)\n\n        self.modesaction = tb.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-visible.png\'), \'View modes/spectrum\')\n        self.plateauaction = tb.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-flat-tire-80.png\'), \'is there a residual plateau?\')\n        self.save_modes_action = tb.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-save-Maxwell.png\'),\n            ""Save Modes"")            \n        self.save_spectrum_action = tb.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-save_Ht.png\'),\n            ""Save Spectrum"")                      \n        self.modesaction.setCheckable(True)\n        self.modesaction.setChecked(True)\n        self.plateauaction.setCheckable(True)\n        self.plateauaction.setChecked(False)\n        self.thToolsLayout.insertWidget(0, tb)\n\n        connection_id = self.modesaction.triggered.connect(\n            self.modesaction_change)\n        connection_id = self.plateauaction.triggered.connect(\n            self.plateauaction_change)\n        connection_id = self.save_modes_action.triggered.connect(\n            self.save_modes)\n        connection_id = self.save_spectrum_action.triggered.connect(\n            self.save_spectrum)\n        connection_id = self.cont_pred_action.triggered.connect(\n            self.select_cont_pred)\n        connection_id = self.disc_pred_action.triggered.connect(\n            self.select_disc_pred)\n\n    def select_cont_pred(self):\n        self.prediction_mode = PredictionMode.cont\n        self.tbutpredmode.setDefaultAction(self.cont_pred_action)\n\n        if self.n > 0:\n            th_files = self.theory_files()\n            for f in self.parent_dataset.files:\n                if f in th_files:\n                    tt = self.tables[f.file_name_short]\n                    tt.data[:, 1] = self.K[:self.n]\n                    tt.data[:, 2] = self.K[self.n:]\n\n            self.Qprint(\'<b>Fit from continuous spectrum</b>\')\n            self.do_error(\'\')\n            self.do_plot(\'\')\n\n    def select_disc_pred(self):\n        self.prediction_mode = PredictionMode.disc\n        self.tbutpredmode.setDefaultAction(self.disc_pred_action)\n\n        if self.n > 0:\n            th_files = self.theory_files()\n            for f in self.parent_dataset.files:\n                if f in th_files:\n                    tt = self.tables[f.file_name_short]\n                    tt.data[:, 1] = self.GstM[:self.n]\n                    tt.data[:, 2] = self.GstM[self.n:]\n\n            self.Qprint(\'<b>Fit from discrete spectrum</b>\')\n            self.do_error(\'\')\n            self.do_plot(\'\')\n\n\n    def save_spectrum(self):\n        """"""Save Spectrum to a text file""""""\n        fpath, _ = QFileDialog.getSaveFileName(self,\n                                               ""Save spectrum to a text file"",\n                                               os.path.join(RepTate.root_dir, ""data""), ""Text (*.txt)"")\n        if fpath == \'\':\n            return\n            \n        with open(fpath, \'w\') as f:\n            verdata = RepTate._version.get_versions()\n            version = verdata[\'version\'].split(\'+\')[0]\n            date = verdata[\'date\'].split(\'T\')[0]\n            build = verdata[\'version\']\n\n            header = \'# Continuous spectrum\\n\'\n            header += \'# Generated with RepTate %s %s (build %s)\\n\' % (version, date, build)\n            header += \'# At %s on %s\\n\' % (time.strftime(""%X""),\n                                           time.strftime(""%a %b %d, %Y""))\n            f.write(header)\n\n            f.write(\'\\n#%15s\\t%15s\\n\'%(\'tau_i\',\'G_i\'))\n\n            n = len(self.scont)\n            for i in range(n):\n                f.write(\'%15g\\t%15g\\n\'%(self.scont[i],np.exp(self.Hcont[i])))\n            \n            f.write(\'\\n#end\')\n\n        QMessageBox.information(self, \'Success\',\n                                \'Wrote spectrum \\""%s\\""\' % fpath)\n\n\n    def Qhide_theory_extras(self, state):\n        """"""Uncheck the modeaction button. Called when curent theory is changed""""""\n        self.modesaction.setChecked(state)\n\n    def modesaction_change(self, checked):\n        """"""Change visibility of modes""""""\n        self.graphicmodes_visible(checked)\n        # self.view_modes = self.modesaction.isChecked()\n        # self.graphicmodes.set_visible(self.view_modes)\n        # self.do_calculate("""")\n\n    def plateauaction_change(self, checked):\n        self.set_param_value(""plateau"", checked)\n\n    def handle_spinboxValueChanged(self, value):\n        """"""Handle a change of the parameter \'nmodes\'""""""\n        self.set_param_value(\'nmodes\', value)\n        if self.autocalculate:\n            self.parent_dataset.handle_actionCalculate_Theory()\n        self.update_parameter_table()\n\n\n##################################################################################\n#   MAXWELL MODES TIME\n##################################################################################\n\n\nclass TheoryShanbhagMaxwellModesTime(CmdBase):\n    """"""Extract continuous and discrete relaxation spectra from relaxation modulus G(t)\n        \n    * **Parameters**\n       - plateau : is there a residual plateau in the data (default False).\n       - ns : Number of grid points to represent the continuous spectrum (typical 50-100)\n       - lamC : Specify lambda_C instead of using the one inferred from the L-curve (default 0, use the L-curve).\n       - SmFacLam = Smoothing Factor.\n       - MaxNumModes = Max Number of Modes (default 0, automatically determine the optimal number of modes).\n       - lam_min = lower limit of lambda for lcurve calculation (default 1e-10).\n       - lam_max = higher limit of lambda for lcurve calculation (default 1e3).\n       - lamDensity = lambda density per decade (default 3, use 2 or more).\n       - rho_cutoff = Threshold to avoid picking too small lambda for L-curve without (default 0).\n       - deltaBaseWeightDist = how finely to sample BaseWeightDist (default 0.2).\n       - minTauSpacing = how close do successive modes (tau2/tau1) have to be before we try to mege them (default 1.25).\n    \n    """"""\n    thname = ""ReSpect""\n    description = ""Relaxation spectra from relaxation modulus""\n    citations = [""Shanbhag, S., Macromolecular Theory and Simulations, 2019, 1900005""]\n    doi = [\'http://dx.doi.org/10.1002/mats.201900005\']\n\n    def __new__(cls, name="""", parent_dataset=None, ax=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return GUITheoryShanbhagMaxwellModesTime(\n            name, parent_dataset,\n            ax) if (CmdBase.mode == CmdMode.GUI) else CLTheoryShanbhagMaxwellModesTime(\n                name, parent_dataset, ax)\n\n\nclass BaseTheoryShanbhagMaxwellModesTime:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = \'http://reptate.readthedocs.io/manual/Applications/Gt/Theory/theory.html#shanbhag-maxwell-modes\'\n    single_file = True\n    thname = TheoryShanbhagMaxwellModesTime.thname\n    citations = TheoryShanbhagMaxwellModesTime.citations\n    doi = TheoryShanbhagMaxwellModesTime.doi\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n        self.function = self.MaxwellModesTime\n        self.has_modes = True\n        self.view_modes = True\n\n        self.parameters[""plateau""] = Parameter(\n            ""plateau"",\n            False,\n            ""is there a residual plateau?"",\n            ParameterType.boolean,\n            opt_type=OptType.const,\n            display_flag=False)\n        self.parameters[""ns""] = Parameter(\n            ""ns"",\n            100,\n            ""Number of grid points to represent the continuous spectrum (typical 50-100)"",\n            ParameterType.integer,\n            opt_type=OptType.const)\n        self.parameters[""lamC""] = Parameter(\n            ""lamC"",\n            0,\n            ""Specify lambda_C"",\n            ParameterType.real,\n            opt_type=OptType.nopt)\n        self.parameters[""SmFacLam""] = Parameter(\n            name=""SmFacLam"",\n            value=0,\n            description=""Smoothing Factor (between -1 and 1)"",\n            type=ParameterType.discrete_integer,\n            opt_type=OptType.const,\n            discrete_values=[-1,0,1])\n        self.parameters[""FreqEnd""] = Parameter(\n            name=""FreqEnd"",\n            value=1,\n            description=""Treatment of Frequency Window ends (1, 2 or 3)"",\n            type=ParameterType.discrete_integer,\n            opt_type=OptType.const,\n            discrete_values=[1,2,3])\n        self.parameters[""MaxNumModes""] = Parameter(\n            ""MaxNumModes"",\n            0,\n            ""Max Number of Modes"",\n            ParameterType.integer,\n            opt_type=OptType.opt)\n        self.parameters[""lam_min""] = Parameter(\n            ""lam_min"",\n            1e-10,\n            ""lower limit of lambda for lcurve calculation"",\n            ParameterType.real,\n            opt_type=OptType.nopt)\n        self.parameters[""lam_max""] = Parameter(\n            ""lam_max"",\n            1e3,\n            ""higher limit of lambda for lcurve calculation"",\n            ParameterType.real,\n            opt_type=OptType.nopt)\n        self.parameters[""lamDensity""] = Parameter(\n            ""lamDensity"",\n            2,\n            ""lambda density per decade"",\n            ParameterType.integer,\n            opt_type=OptType.nopt)\n        self.parameters[""rho_cutoff""] = Parameter(\n            ""rho_cutoff"",\n            0,\n            ""Threshold to avoid picking too small lambda"",\n            ParameterType.real,\n            opt_type=OptType.nopt)\n        self.parameters[""deltaBaseWeightDist""] = Parameter(\n            ""deltaBaseWeightDist"",\n            0.2,\n            ""how finely to sample BaseWeightDist"",\n            ParameterType.real,\n            opt_type=OptType.nopt)\n        self.parameters[""minTauSpacing""] = Parameter(\n            ""minTauSpacing"",\n            1.25,\n            ""how close modes (tau2/tau1) for merge"",\n            ParameterType.real,\n            opt_type=OptType.nopt)\n\n        self.autocalculate = False\n\n        # GRAPHIC MODES\n        self.graphicmodes = []\n        self.spectrum = []\n        ns = self.parameters[\'ns\'].value\n        self.scont = np.zeros(ns)\n        self.Hcont = np.zeros(ns)\n        self.sdisc = np.zeros(ns)\n        self.Hdisc = np.zeros(ns)\n        self.setup_graphic_modes()\n\n        self.prediction_mode = PredictionMode.cont \n\n        self.GtM = None\n        self.K = None\n        self.tfit = None\n\n    def setup_graphic_modes(self):\n        """"""Setup graphic helpers""""""\n        self.contspectrum = self.ax.plot([], [])[0]\n        self.contspectrum.set_marker(\'*\')\n        self.contspectrum.set_linestyle(\'--\')\n        self.contspectrum.set_visible(self.view_modes)\n        self.contspectrum.set_color(\'green\')\n        self.contspectrum.set_linewidth(5)\n        self.contspectrum.set_label(\'\')\n        #self.contspectrum.set_markerfacecolor(\'yellow\')\n        self.contspectrum.set_markeredgecolor(\'black\')\n        self.contspectrum.set_markeredgewidth(3)\n        self.contspectrum.set_markersize(6)\n        self.contspectrum.set_alpha(0.5)\n\n        self.discspectrum = self.ax.plot([], [])[0]\n        self.discspectrum.set_marker(\'D\')\n        self.discspectrum.set_visible(self.view_modes)\n        self.discspectrum.set_label(\'\')\n        self.discspectrum.set_markerfacecolor(\'yellow\')\n        self.discspectrum.set_markeredgecolor(\'black\')\n        self.discspectrum.set_markeredgewidth(3)\n        self.discspectrum.set_markersize(8)\n        self.discspectrum.set_alpha(0.5)\n\n        self.plot_theory_stuff()\n\n    def destructor(self):\n        """"""Called when the theory tab is closed""""""\n        self.graphicmodes_visible(False)\n        self.ax.lines.remove(self.contspectrum)\n        self.ax.lines.remove(self.discspectrum)\n\n    def show_theory_extras(self, show=False):\n        """"""Called when the active theory is changed""""""\n        if CmdBase.mode == CmdMode.GUI:\n            self.Qhide_theory_extras(show)\n        self.graphicmodes_visible(show)\n\n    def graphicmodes_visible(self, state):\n        """"""Change visibility of modes""""""\n        self.view_modes = state\n        self.contspectrum.set_visible(self.view_modes)\n        self.discspectrum.set_visible(self.view_modes)\n        self.parent_dataset.parent_application.update_plot()\n\n    def get_modes(self):\n        """"""Get the values of Maxwell Modes from this theory""""""\n        nmodes = len(self.sdisc)\n        tau = self.sdisc\n        G = self.Hdisc\n        return tau, G, True\n\n    def getKernMat(self, s, t):\n        """"""furnish kerMat() which helps faster kernel evaluation\n        given s, t generates hs * exp(-T/S) [n * ns matrix], where hs = wi = weights\n        for trapezoidal rule integration.\n        \n        This matrix (K) times h = exp(H), Kh, is comparable with Gexp""""""\t   \n        ns          = len(s)\n        hsv         = np.zeros(ns);\n        hsv[0]      = 0.5 * np.log(s[1]/s[0])\n        hsv[ns-1]   = 0.5 * np.log(s[ns-1]/s[ns-2])\n        hsv[1:ns-1] = 0.5 * (np.log(s[2:ns]) - np.log(s[0:ns-2]))\n        S, T        = np.meshgrid(s, t);\n        \n        return np.exp(-T/S) * hsv;\n        \n    def kernel_prestore(self, H, kernMat, *argv):\n        """"""\n            turbocharging kernel function evaluation by prestoring kernel matrix\n            Function: kernel_prestore(input) returns K*h, where h = exp(H)\n            \n            Same as kernel, except prestoring hs, S, and T to improve speed 3x.\n            \n            outputs the n*1 dimensional vector K(H)(t) which is comparable to Gexp = Gt\n            \n            3/11/2019: returning Kh + G0\n            \n            Input: H = substituted CRS,\n                    kernMat = n*ns matrix [w * exp(-T/S)]\n                        \n        """"""\n        \n        if len(argv) > 0:\n            G0 = argv[0]\n        else:\n            G0 = 0. \n        \n        return np.dot(kernMat, np.exp(H)) + G0\n\n    def InitializeH(self, Gexp, s, kernMat, *argv):\n        """"""\n        Function: InitializeH(input)\n        \n        Input:  Gexp       = n*1 vector [Gt],\n                s       = relaxation modes,\n                kernMat = matrix for faster kernel evaluation\n                G0      = optional; if plateau is nonzero\n                \n        Output:   H = guessed H\n                G0 = optional guess if *argv is nonempty\n        """"""\n        #\n        # To guess spectrum, pick a negative Hgs and a large value of lambda to get a\n        # solution that is most determined by the regularization\n        # March 2019; a single guess is good enough now, because going from large lambda to small\n        #             lambda in lcurve.\n\n        H    = -5.0 * np.ones(len(s)) + np.sin(np.pi * s)\n        lam  = 1e0\n        \n        if len(argv) > 0:\n            G0       = argv[0]\n            Hlam, G0 = self.getH(lam, Gexp, H, kernMat, G0)\t\t\n            return Hlam, G0\n        else:\n            Hlam     = self.getH(lam, Gexp, H, kernMat)\n            return Hlam\n\n    def getAmatrix(self, ns):\n        """"""Generate symmetric matrix A = L\' * L required for error analysis:\n        helper function for lcurve in error determination""""""\n        # L is a ns*ns tridiagonal matrix with 1 -2 and 1 on its diagonal;\n        nl = ns - 2\n        L  = np.diag(np.ones(ns-1), 1) + np.diag(np.ones(ns-1),-1) + np.diag(-2. * np.ones(ns))\n        L  = L[1:nl+1,:]\n                \n        return np.dot(L.T, L)\n        \n    def getBmatrix(self, H, kernMat, Gexp, *argv):\n        """"""get the Bmatrix required for error analysis; helper for lcurve()\n        not explicitly accounting for G0 in Jr because otherwise I get underflow problems""""""\n        n   = kernMat.shape[0];\n        ns  = kernMat.shape[1];\n        nl  = ns - 2;\n        r   = np.zeros(n);   \t  # vector of size (n);\n\n        # furnish relevant portion of Jacobian and residual\n\n        Kmatrix = np.dot((1./Gexp).reshape(n,1), np.ones((1,ns)));\n        Jr      = -self.kernelD(H, kernMat) * Kmatrix;    \n\n        # if plateau then unfurl G0\n        if len(argv) > 0:\n            G0 = argv[0]\n            r  = (1. - self.kernel_prestore(H, kernMat, G0)/Gexp)\n        else:\n            r = (1. - self.kernel_prestore(H, kernMat)/Gexp)\n        \n        B = np.dot(Jr.T, Jr) + np.diag(np.dot(r.T, Jr))\n\n        return B\n\n\n    def oldLamC(self, lam, rho, eta):\n\n        #\n        # 8/1/2018: Making newer strategy more accurate and robust: dividing by minimum rho/eta\n        # which is not as sensitive to lam_min, lam_max. This makes lamC robust to range of lam explored\n        #\n        #er = rho/np.amin(rho) + eta/np.amin(eta);\n        er    = rho/np.amin(rho) + eta/(np.sqrt(np.amax(eta)*np.amin(eta)));\n\n        #\n        # Since rho v/s lambda is smooth, we can interpolate the coarse mesh to find minimum\n        #\n        # change 3/20/2019: Scipy 0.17 has a bug with extrapolation: so making lami tad smaller \n        lami = np.logspace(np.log10(min(lam)+1e-15), np.log10(max(lam)-1e-15), 1000)\n        erri = np.exp(interp1d(np.log(lam), np.log(er), kind=\'cubic\', bounds_error=False,\n                        fill_value=(np.log(er[0]), np.log(er[-1])))(np.log(lami)))\n\n\n        ermin = np.amin(erri)\n        eridx = np.argmin(erri)\t\n        lamC  = lami[eridx]\n        \n        #\n        # 2/2: Copying 12/18 edit from pyReSpect-time;\n        #      for rough data have cutoff at rho = rho_cutoff?\n        #\n        rhoF  = interp1d(lam, rho)\n\n        rho_cutoff = self.parameters[\'rho_cutoff\'].value\n        if  rhoF(lamC) <= rho_cutoff:\n            try:\n                eridx = (np.abs(rhoF(lami) - rho_cutoff)).argmin()\n                if lami[eridx] > lamC:\n                    lamC = lami[eridx]\t\t\t\t\n            except:\n                pass\n\n        return lamC\n\n\n    def lcurve(self, Gexp, Hgs, kernMat, *argv):\n\n        """""" \n        Function: lcurve(input)\n        \n        Input: Gexp    = n*1 vector [Gt],\n                Hgs     = guessed H,\n                kernMat = matrix for faster kernel evaluation\n                par     = parameter dictionary\n                G0      = optionally\n\n        Output: lamC and 3 vectors of size npoints*1 contains a range of lambda, rho\n                and eta. ""Elbow""  = lamC is estimated using a *NEW* heuristic AND by Hansen method\n                \n                \n        March 2019: starting from large lambda to small cuts calculation time by a lot\n                    also gives an error estimate \n                \n        """"""\n        plateau = self.parameters[\'plateau\'].value\n        if plateau:\n            G0 = argv[0]\n            \n        lamDensity = self.parameters[\'lamDensity\'].value\n        lam_max = self.parameters[\'lam_max\'].value\n        lam_min = self.parameters[\'lam_min\'].value\n        npoints = int(lamDensity * (np.log10(lam_max) - np.log10(lam_min)))\n        hlam    = (lam_max/lam_min)**(1./(npoints-1.))\t\n        lam     = lam_min * hlam**np.arange(npoints)\n        eta     = np.zeros(npoints)\n        rho     = np.zeros(npoints)\n        logP    = np.zeros(npoints)\n        H       = Hgs.copy()\n        n       = len(Gexp)\n        ns      = len(H)\n        nl      = ns - 2\n        logPmax = -np.inf\t\t\t\t\t# so nothing surprises me!\n        Hlambda = np.zeros((ns, npoints))\n\n        # Error Analysis: Furnish A_matrix\n        Amat       = self.getAmatrix(len(H))\n        _, LogDetN = np.linalg.slogdet(Amat)\n            \n        #\n        # This is the costliest step\n        #\n        for i in reversed(range(len(lam))):\n            \n            self.Qprint(""."", end=\'\')\n            lamb    = lam[i]\n            \n            if plateau:\n                H, G0   = self.getH(lamb, Gexp, H, kernMat, G0)\t\t\t\n                rho[i]  = np.linalg.norm((1. - self.kernel_prestore(H, kernMat, G0)/Gexp))\n                Bmat    = self.getBmatrix(H, kernMat, Gexp, G0)\t\t\t\n            else:\n                H       = self.getH(lamb, Gexp, H, kernMat)\n                rho[i]  = np.linalg.norm((1. - self.kernel_prestore(H,kernMat)/Gexp))\n                Bmat    = self.getBmatrix(H, kernMat, Gexp)\n\n            eta[i]       = np.linalg.norm(np.diff(H, n=2))\n            Hlambda[:,i] = H\n\n\n            _, LogDetC = np.linalg.slogdet(lamb*Amat + Bmat)\n            V          =  rho[i]**2 + lamb * eta[i]**2\t\t\n                        \n            # this assumes a prior exp(-lam)\n            logP[i]    = -V + 0.5 * (LogDetN + ns*np.log(lamb) - LogDetC) - lamb\n            \n            if(logP[i] > logPmax):\n                logPmax = logP[i]\n            elif(logP[i] < logPmax - 18):\n                break\n\n        # truncate all to significant lambda\n        lam  = lam[i:]\n        logP = logP[i:]\n        eta  = eta[i:]\n        rho  = rho[i:]\n        logP = logP - max(logP)\n\n        Hlambda = Hlambda[:,i:]\n        \n        #\n        # currently using both schemes to get optimal lamC\n        # new lamM works better with actual experimental data  \n        #\n        lamC = self.oldLamC(lam, rho, eta)\n        plam = np.exp(logP); plam = plam/np.sum(plam)\n        lamM = np.exp(np.sum(plam*np.log(lam)))\n\n        #\n        # Dialling in the Smoothness Factor\n        #\n        SmFacLam = self.parameters[\'SmFacLam\'].value\n        if SmFacLam > 0:\n            lamM = np.exp(np.log(lamM) + SmFacLam*(max(np.log(lam)) - np.log(lamM)));\n        elif SmFacLam < 0:\n            lamM = np.exp(np.log(lamM) + SmFacLam*(np.log(lamM) - min(np.log(lam))));\n\n        return lamM, lam, rho, eta, logP, Hlambda\n\n\n    def getH(self, lam, Gexp, H, kernMat, *argv):\n\n        """"""Purpose: Given a lambda, this function finds the H_lambda(s) that minimizes V(lambda)\n        \n                V(lambda) := ||Gexp - kernel(H)||^2 +  lambda * ||L H||^2\n        \n        Input  : lambda  = regularization parameter ,\n                Gexp    = experimental data,\n                H       = guessed H,\n                kernMat = matrix for faster kernel evaluation\n                G0      = optional\n        \n        Output : H_lam, [G0]\n                Default uses Trust-Region Method with Jacobian supplied by jacobianLM\n        """"""\n\n        # send Hplus = [H, G0], on return unpack H and G0\n        if len(argv) > 0:\n            Hplus= np.append(H, argv[0])\n            res_lsq = least_squares(self.residualLM, Hplus, jac=self.jacobianLM, args=(lam, Gexp, kernMat))\n            return res_lsq.x[:-1], res_lsq.x[-1]\n            \n        # send normal H, and collect optimized H back\n        else:\n            res_lsq = least_squares(self.residualLM, H, jac=self.jacobianLM, args=(lam, Gexp, kernMat))\t\t\t\n            return res_lsq.x\n\n\n    def residualLM(self, H, lam, Gexp, kernMat):\n        """"""\n        %\n        % HELPER FUNCTION: Gets Residuals r\n        Input  : H       = guessed H,\n                lambda  = regularization parameter ,\n                Gexp    = experimental data,\n                kernMat = matrix for faster kernel evaluation\n                G0      = plateau\n        \n        Output : a set of n+nl residuals,\n                the first n correspond to the kernel\n                the last  nl correspond to the smoothness criterion\n        %""""""\n\n\n        n   = kernMat.shape[0];\n        ns  = kernMat.shape[1];\n        nl  = ns - 2;\n\n        r   = np.zeros(n + nl);\n        \n        # if plateau then unfurl G0\n        if len(H) > ns:\n            G0     = H[-1]\n            H      = H[:-1]\n            r[0:n] = (1. - self.kernel_prestore(H, kernMat, G0)/Gexp)  # the Gt and\n        else:\n            r[0:n] = (1. - self.kernel_prestore(H, kernMat)/Gexp)  # the Gt and\n        \n        # the curvature constraint is not affected by G0\n        r[n:n+nl] = np.sqrt(lam) * np.diff(H, n=2)  # second derivative\n\n            \n        return r\n            \n    def jacobianLM(self, H, lam, Gexp, kernMat):\n        """"""\n        HELPER FUNCTION for optimization: Get Jacobian J\n        \n        returns a (n+nl * ns) matrix Jr; (ns + 1) if G0 is also supplied.\n        \n        Jr_(i, j) = dr_i/dH_j\n        \n        It uses kernelD, which approximates dK_i/dH_j, where K is the kernel\n        \n        """"""\n        n   = kernMat.shape[0];\n        ns  = kernMat.shape[1];\n        nl  = ns - 2;\n\n        # L is a ns*ns tridiagonal matrix with 1 -2 and 1 on its diagonal;\n        L  = np.diag(np.ones(ns-1), 1) + np.diag(np.ones(ns-1),-1) + np.diag(-2. * np.ones(ns))\n        L  = L[1:nl+1,:]\t\n        \n        # Furnish the Jacobian Jr (n+ns)*ns matrix\n        Kmatrix         = np.dot((1./Gexp).reshape(n,1), np.ones((1,ns)));\n\n        if len(H) > ns:\n\n            G0     = H[-1]\n            H      = H[:-1]\n            \n            Jr  = np.zeros((n + nl, ns+1))\n\n            Jr[0:n, 0:ns]   = -self.kernelD(H, kernMat) * Kmatrix;\n            Jr[0:n, ns]     = -1./Gexp\t\t\t\t\t\t\t# column for dr_i/dG0\n\n            Jr[n:n+nl,0:ns] = np.sqrt(lam) * L;\n            Jr[n:n+nl, ns]  = np.zeros(nl)\t\t\t\t\t\t# column for dr_i/dG0 = 0\n            \n        else:\n\n            Jr  = np.zeros((n + nl, ns))\n\n            Jr[0:n, 0:ns]   = -self.kernelD(H, kernMat) * Kmatrix;\n            Jr[n:n+nl,0:ns] = np.sqrt(lam) * L;        \n            \n        return\tJr\n\n    def kernelD(self, H, kernMat):\n        """"""\n        Function: kernelD(input)\n        \n        outputs the (n*ns) dimensional matrix DK(H)(t)\n        It approximates dK_i/dH_j = K * e(H_j):\n        \n        Input: H       = substituted CRS,\n                kernMat = matrix for faster kernel evaluation\n        \n        Output: DK = Jacobian of H\n        """"""\n        \n        n   = kernMat.shape[0];\n        ns  = kernMat.shape[1];\n\n\n        # A n*ns matrix with all the rows = H\'\n        Hsuper  = np.dot(np.ones((n,1)), np.exp(H).reshape(1, ns))  \n        DK      = kernMat  * Hsuper\n            \n        return DK\n\n\n    def MaxwellModes(self, z, t, Gt, isPlateau):\n        """"""\n        \n        Function: MaxwellModes(input)\n        \n        Solves the linear least squares problem to obtain the DRS\n\n        Input: z  = points distributed according to the density, [z = log(tau)]\n                t  = n*1 vector contains times,\n                Gt = n*1 vector contains G(t),\n                isPlateau = True if G0 \\neq 0\n        \n        Output: g, tau = spectrum  (array)\n                error = relative error between the input data and the G(t) inferred from the DRS\n                condKp = condition number\n        """"""\n        N      = len(z)\n        tau    = np.exp(z)\n        n      = len(t)\n        Gexp   = Gt\n\n        #\n        # Prune small and -ve weights g(i)\n        #\n        g, error, condKp = self.nnLLS(t, tau, Gexp, isPlateau)\n\n\n        # search for small \n        if isPlateau:\n            izero = np.where(g[:-1]/max(g[:-1]) < 1e-7)\n        else:\n            izero = np.where(g/max(g) < 1e-7)\n        \n        tau   = np.delete(tau, izero)\n        g     = np.delete(g, izero)\n\n        return g, tau, error, condKp\n\n    def nnLLS(self, t, tau, Gexp, isPlateau):\n        """"""\n        #\n        # Helper subfunction which does the actual LLS problem\n        # helps MaxwellModes; relies on nnls\n        #\n        """"""\n        n       = len(Gexp)\n        S, T    = np.meshgrid(tau, t)\n        K\t\t= np.exp(-T/S)\t\t# n * nmodes\n        \n        # K is n*ns [or ns+1]\n        if isPlateau:\n            K = np.hstack(( K, np.ones((len(Gexp), 1)) ))\n            \n        #\n        # gets (Gt/GtE - 1)^2, instead of  (Gt -  GtE)^2\n        #\n        Kp      = np.dot(np.diag((1./Gexp)), K)\n        condKp  = np.linalg.cond(Kp)\n        g       = nnls(Kp, np.ones(len(Gexp)))[0]\t\n\n        GtM   \t= np.dot(K, g)\n        error \t= np.sum((GtM/Gexp - 1.)**2)\n\n        return g, error, condKp\n\n    def GetWeights(self, H, t, s, wb):\n        """"""\n        %\n        % Function: GetWeights(input)\n        %\n        % Finds the weight of ""each"" mode by taking a weighted average of its contribution\n        % to G(t)\n        %\n        % Input: H = CRS (ns * 1)\n        %        t = n*1 vector contains times\n        %        s = relaxation modes (ns * 1)\n        %       wb = weightBaseDist\n        %\n        % Output: wt = weight of each mode\n        %\n        """"""\n    \n        ns         = len(s)\n        n          = len(t)\n\n        hs         = np.zeros(ns)\n        wt         = hs\n        \n        hs[0]      = 0.5 * np.log(s[1]/s[0])\n        hs[ns-1]   = 0.5 * np.log(s[ns-1]/s[ns-2])\n        hs[1:ns-1] = 0.5 * (np.log(s[2:ns]) - np.log(s[0:ns-2]))\n\n        S, T    = np.meshgrid(s, t)\n        kern    = np.exp(-T/S)\t\t# n * ns\n        wij     =  np.dot(kern, np.diag(hs * np.exp(H)))  # n * ns\n        K       = np.dot(kern, hs * np.exp(H))         # n * 1, comparable with Gexp\n\n        for i in np.arange(n):\n            wij[i,:] = wij[i,:]/K[i]\n\n        for j in np.arange(ns):\n            wt[j] = np.sum(wij[:,j])\n\n        wt  = wt/np.trapz(wt, np.log(s))\n        wt  = (1. - wb) * wt + (wb * np.mean(wt)) * np.ones(len(wt))\n\n        return wt\n\n    def GridDensity(self, x, px, N):\n\n        """"""#\n        #  PROGRAM: GridDensity(input)\n        #\n        #\tTakes in a PDF or density function, and spits out a bunch of points in\n        #       accordance with the PDF\n        #\n        #  Input:\n        #       x  = vector of points. It need *not* be equispaced,\n        #       px = vector of same size as x: probability distribution or\n        #            density function. It need not be normalized but has to be positive.\n        #  \t    N  = Number of points >= 3. The end points of ""x"" are included\n        #  \t     necessarily,\n        # \n        #  Output:\n        #       z  = Points distributed according to the density\n        #       hz = width of the ""intervals"" - useful to apportion domain to points\n        #            if you are doing quadrature with the results, for example.\n        #\n        #  (c) Sachin Shanbhag, November 11, 2015\n        #""""""\n\n        npts = 100;                              # can potentially change\n        xi   = np.linspace(min(x),max(x),npts)   # reinterpolate on equi-spaced axis\n        fint = interp1d(x,px,\'cubic\')\t         # smoothen using cubic splines\n        pint = fint(xi)        \t\t\t\t\t # interpolation\n        ci   = cumtrapz(pint, xi, initial=0)                \n        pint = pint/ci[npts-1]\n        ci   = ci/ci[npts-1]                     # normalize ci\n\n        alfa = 1./(N-1)                          # alfa/2 + (N-1)*alfa + alfa/2\n        zij  = np.zeros(N+1)                     # quadrature interval end marker\n        z    = np.zeros(N)                       # quadrature point\n\n        z[0]    = min(x);  \n        z[N-1]  = max(x); \n\n        # ci(Z_j,j+1) = (j - 0.5) * alfa\n        beta       = np.arange(0.5, N-0.5) * alfa\n        zij[0]     = z[0]\n        zij[N]     = z[N-1]\n        fint       = interp1d(ci, xi, \'cubic\')\n        zij[1:N]   = fint(beta)\n        h          = np.diff(zij)\n\n        # Quadrature points are not the centroids, but rather the center of masses\n        # of the quadrature intervals\n        beta     = np.arange(1, N-1) * alfa\n        z[1:N-1] = fint(beta)\n\n        return z, h\n\n    def mergeModes_magic(self, g, tau, imode):\n        """"""merge modes imode and imode+1 into a single mode\n        return gp and taup corresponding to this new mode;\n        12/2018 - also tries finetuning before returning\n        \n        uses helper functions:\n        - normKern_magic()\n        - costFcn_magic()   \n        """"""\n        \n        iniGuess = [g[imode] + g[imode+1], 0.5*(tau[imode] + tau[imode+1])]\n        res      = minimize(self.costFcn_magic, iniGuess, args=(g, tau, imode))\n\n        newtau   = np.delete(tau, imode+1)\n        newtau[imode] = res.x[1]\n            \n        return newtau\n\n    def normKern_magic(self, t, gn, taun, g1, tau1, g2, tau2):\n        """"""helper function: for costFcn and mergeModes""""""\n        Gn = gn * np.exp(-t/taun)\n        Go = g1 * np.exp(-t/tau1) + g2 * np.exp(-t/tau2)\n        return (Gn/Go - 1.)**2\n\n    def costFcn_magic(self, par, g, tau, imode):\n        """"""""helper function for mergeModes; establishes cost function to minimize""""""\n        gn   = par[0]\n        taun = par[1]\n\n        g1   = g[imode]\n        g2   = g[imode+1]\n        tau1 = tau[imode]\n        tau2 = tau[imode+1]\n\n        tmin = min(tau1, tau2)/10.\n        tmax = max(tau1, tau2)*10.\n\n        return quad(self.normKern_magic, tmin, tmax, args=(gn, taun, g1, tau1, g2, tau2))[0]\n\n    def FineTuneSolution(self, tau, t, Gexp, isPlateau, estimateError=False):\n        """"""Given a spacing of modes tau, tries to do NLLS to fine tune it further\n        If it fails, then it returns the old tau back\n        \n        Uses helper function: res_tG which computes residuals\n        """"""\n        success = False\n            \n        try:\n            res  = least_squares(self.res_tG, tau, bounds=(0., np.inf),\targs=(t, Gexp, isPlateau))\n            tau  = res.x\n            tau0 = tau.copy()\n\n            # Error Estimate\t\n            if estimateError:\n                J = res.jac\n                cov = np.linalg.pinv(J.T.dot(J)) * (res.fun**2).mean()\n                dtau = np.sqrt(np.diag(cov))\n\n            success = True\t\t\t\n        except:\t\n            e = sys.exc_info()[0]\n            self.Qprint( ""<p>Error: %s</p>"" % e )            \n            #pass\n\n        \n        g, tau, _, _ = self.MaxwellModes(np.log(tau), t, Gexp, isPlateau)   # Get g_i, taui\n\n        #\n        # if mode has dropped out, then need to delete corresponding dtau mode\n        #\n        if estimateError and success:\n            if len(tau) < len(tau0):\t\t\n                nkill = 0\n                for i in range(len(tau0)):\n                    if np.min(np.abs(tau0[i] - tau)) > 1e-12 * tau0[i]:\n                        dtau = np.delete(dtau, i-nkill)\n                        nkill += 1\n            return g, tau, dtau\n        elif estimateError:\n            return g, tau, -1*np.ones(len(tau))\n        else:\n            return g, tau\n\n    def res_tG(self, tau, texp, Gexp, isPlateau):\n        """"""\n            Helper function for final optimization problem\n        """"""\n        g, _, _ = self.nnLLS(texp, tau, Gexp, isPlateau)\n        Gmodel  = np.zeros(len(texp))\n\n        for j in range(len(tau)):\n            Gmodel += g[j] * np.exp(-texp/tau[j])\n        \n        # add G0\n        if isPlateau:\n            Gmodel += g[-1]\n            \n        residual = Gmodel/Gexp - 1.\n            \n        return residual\n\n\n    def MaxwellModesTime(self, f=None):\n        """"""Calculate the theory""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n\n        # CALCULATE THE CONTINUOUS SPECTRUM FIRST\n        self.Qprint(""<b>CONTINUOUS SPECTRUM</b>"")\n\n        t = ft.data[:, 0]\n        Gexp =  ft.data[:, 1]\n        # Remove points with t<=0\n        filt=t>0\n        t=t[filt]\n        Gexp=Gexp[filt]\n\n        # Sanitize the input: remove repeated values and space data homogeneously\n        t, indices = np.unique(t, return_index = True)\t\n        Gexp         = Gexp[indices]\n        f  =  interp1d(t, Gexp, fill_value=""extrapolate"")\n        t  =  np.logspace(np.log10(np.min(t)), np.log10(np.max(t)), max(len(t),100))\t\t\n        Gexp =  f(t)\n        self.tfit = np.copy(t)\n\n        n = len(t)\n        ns = self.parameters[\'ns\'].value\n        tmin = t[0]\n        tmax = t[n-1]\n\n        # determine frequency window\n        if self.parameters[\'FreqEnd\'].value == 1:\n            smin = np.exp(-np.pi/2) * tmin; smax = np.exp(np.pi/2) * tmax\t\t\n        elif self.parameters[\'FreqEnd\'].value == 2:\n            smin = tmin; smax = tmax\t\t\t\t\n        elif self.parameters[\'FreqEnd\'].value == 3:\n            smin = np.exp(+np.pi/2) * tmin; smax = np.exp(-np.pi/2) * tmax\t\t\n\n        hs   = (smax/smin)**(1./(ns-1))\n        s    = smin * hs**np.arange(ns)\n        \n        kernMat = self.getKernMat(s, t)\n        tic     = time.time()\n        plateau = self.parameters[""plateau""].value\n\n        self.Qprint(\'Initial Set up...\',end=\'\')\n        if plateau:\n            Hgs, G0  = self.InitializeH(Gexp, s, kernMat, np.min(Gexp))\n        else:\n            Hgs      = self.InitializeH(Gexp, s, kernMat)\n        \n        te   = time.time() - tic\n        self.Qprint(\'({0:.1f} s)\'.format(te))\n        tic  = time.time()\n\n        # Find Optimum Lambda with \'lcurve\'\n        lamC = self.parameters[\'lamC\'].value\n        self.Qprint(\'Building the L-curve ...\',end=\'\')\n        if lamC == 0:\n            if plateau:\n                lamC, lam, rho, eta, logP, Hlam = self.lcurve(Gexp, Hgs, kernMat, G0)\n            else:\n                lamC, lam, rho, eta, logP, Hlam = self.lcurve(Gexp, Hgs, kernMat)\n\n        te = time.time() - tic\n        self.Qprint(\'({0:.1f} s)\'.format(te))\n        tic = time.time()\n        self.Qprint(\'lamC = {0:0.3e}\'.format(lamC))\n\n        # Get the best spectrum\t\n        self.Qprint(\'Extracting CRS...\',end=\'\')\n        if plateau:\n            H, G0  = self.getH(lamC, Gexp, Hgs, kernMat, G0)\n            self.Qprint(\'G0 = {0:0.3e} ...\'.format(G0))\n        else:\n            H  = self.getH(lamC, Gexp, Hgs, kernMat)\n\n        te = time.time() - tic\n        self.Qprint(\'done ({0:.1f} s)\'.format(te))\n\n\t\t# Save inferred H(s) and Gw\n        if lamC != 0:\n            if plateau:\n                self.K   = self.kernel_prestore(H, kernMat, G0);\t\n                #np.savetxt(\'output/H.dat\', np.c_[s, H], fmt=\'%e\', header=\'G0 = {0:0.3e}\'.format(G0))\n            else:\n                self.K   = self.kernel_prestore(H, kernMat)\n                #np.savetxt(\'output/H.dat\', np.c_[s, H], fmt=\'%e\')\n             \n            #np.savetxt(\'output/Gfit.dat\', np.c_[w, K[:n], K[n:]], fmt=\'%e\')\n            if self.prediction_mode == PredictionMode.cont:\n                tt.num_rows = len(t)\n                tt.data = np.zeros((tt.num_rows, tt.num_columns))\n                tt.data[:, 0] = t\n                tt.data[:, 1] = self.K\n\n        # Spectrum\n        self.scont = s\n        self.Hcont = H\n\n        # GET DISCRETE SPECTRUM\n        self.Qprint(""<b>DISCRETE SPECTRUM</b>"")\n\n        # range of N scanned\n        MaxNumModes=self.parameters[\'MaxNumModes\'].value\n\n        if(MaxNumModes == 0):\n            Nmax  = min(np.floor(3.0 * np.log10(max(t)/min(t))),n/4); # maximum N\n            Nmin  = max(np.floor(0.5 * np.log10(max(t)/min(t))),2);   # minimum N\n            Nv    = np.arange(Nmin, Nmax + 1).astype(int)\n        else:\n            Nv    = np.arange(MaxNumModes, MaxNumModes + 1).astype(int)\n\n        Cerror  = 1./(np.std(self.K/Gexp - 1.))  #\tCerror = 1.?\n        npts = len(Nv)\n\n        # range of wtBaseDist scanned\n        deltaBaseWeightDist = self.parameters[\'deltaBaseWeightDist\'].value\n        wtBase = deltaBaseWeightDist * np.arange(1, int(1./deltaBaseWeightDist))\n        AICbst = np.zeros(len(wtBase))\n        Nbst   = np.zeros(len(wtBase))  # nominal number of modes\n        nzNbst = np.zeros(len(wtBase))  # actual number of nonzero modes\n\n        # main loop over wtBaseDist\n        for ib, wb in enumerate(wtBase):\n            \n            # Find the distribution of nodes you need\n            wt  = self.GetWeights(H, t, s, wb)\n\n            # Scan the range of number of Maxwell modes N = (Nmin, Nmax) \n            ev    = np.zeros(npts)\n            nzNv  = np.zeros(npts)  # number of nonzero modes \n\n            for i, N in enumerate(Nv):\n                z, hz  = self.GridDensity(np.log(s), wt, N)         # select ""tau"" Points\n                g, tau, ev[i], _ = self.MaxwellModes(z, t, Gexp, plateau)    # get g_i\n                nzNv[i]                 = len(g)\n\n            # store the best solution for this particular wb\n            AIC        = 2. * Nv + 2. * Cerror * ev\n\n            # Fine-Tune the best in class-fit further by trying an NLLS optimization on it.\n            #\t\t\n            N      = Nv[np.argmin(AIC)]\n            z, hz  = self.GridDensity(np.log(s), wt, N)     \t\t# Select ""tau"" Points\n\n            g, tau, error, cKp = self.MaxwellModes(z, t, Gexp, plateau)   # Get g_i, taui\n\n            AICbst[ib] = min(AIC)\n            Nbst[ib]   = Nv[np.argmin(AIC)]\n            nzNbst[ib] = nzNv[np.argmin(AIC)]\n\n        # global best settings of wb and Nopt; note this is nominal Nopt (!= len(g) due to NNLS)\n        Nopt  = int(Nbst[np.argmin(AICbst)])\n        wbopt = wtBase[np.argmin(AICbst)]\n\n        #\n        # Recompute the best data-set stats\n        #\n        wt                   = self.GetWeights(H, t, s, wbopt)\n        z, hz                = self.GridDensity(np.log(s), wt, Nopt)             # Select ""tau"" Points\n        g, tau, _, _   = self.MaxwellModes(z, t, Gexp, plateau)     # Get g_i, taui\t\n        g, tau, dtau       = self.FineTuneSolution(tau, t, Gexp, plateau, estimateError=True)\n        \n        #\n        # Check if modes are close enough to merge\n        #\n        indx       = np.argsort(tau)\n        tau        = tau[indx]\n        tauSpacing = tau[1:]/tau[:-1]\n        itry       = 0\n\n        if plateau:\n            g[:-1] = g[indx]\n        else:\n            g      = g[indx]\n\n        minTauSpacing = self.parameters[\'minTauSpacing\'].value\n        while min(tauSpacing) < minTauSpacing and itry < 3:\n            self.Qprint(""Tau Spacing < minTauSpacing"")\n            \n            imode      = np.argmin(tauSpacing)      # merge modes imode and imode + 1\n            tau     = self.mergeModes_magic(g, tau, imode)\n\n            g, tau, dtau  = self.FineTuneSolution(tau, t, Gexp, plateau, estimateError=True)\t\t\n\n            if len(tau)==1:\n                break        \n            tauSpacing = tau[1:]/tau[:-1]\n            itry      += 1\n\n        if plateau:\n            G0 = g[-1]\n            g  = g[:-1]\n\n        self.Qprint(\'Number of optimum nodes = {0:d}\'.format(len(g)))\n        self.Qprint(\'log10(Condition number) of matrix equation: {0:.2f}\'.format(np.log10(cKp)))\n\n        # Spectrum\n        self.sdisc = tau\n        self.Hdisc = g\n\n        S, T    = np.meshgrid(tau, t)\n        K      = np.exp(-T/S)\n        self.GtM   \t= np.dot(K, g)\n\n        if plateau:\n            self.GtM += G0\n\n        # TODO: DECIDE IF WE PLOT THE CONTINUOUS OR DISCRETE FIT TO G*(omega)\n        if self.prediction_mode == PredictionMode.disc:\n            self.Qprint(\'<b>Fit from discrete spectrum</b>\')\n            tt.num_rows = len(t)\n            tt.data = np.zeros((tt.num_rows, tt.num_columns))\n            tt.data[:, 0] = t\n            tt.data[:, 1] = self.GtM\n        else:\n            self.Qprint(\'<b>Fit from continuous spectrum</b>\')\n\n        try:\n            gamma = float(f.file_parameters[""gamma""])\n            if (gamma==0):\n                gamma=1\n        except:\n            gamma = 1\n\n    def do_fit(self, line=\'\'):\n        self.Qprint(""Fitting not allowed in this theory"")\n\n    def do_error(self, line):\n        """"""Report the error of the current theory\n\nReport the error of the current theory on all the files, taking into account the current selected xrange and yrange.\n\nFile error is calculated as the mean square of the residual, averaged over all points in the file. Total error is the mean square of the residual, averaged over all points in all files.""""""\n        total_error = 0\n        npoints = 0\n        view = self.parent_dataset.parent_application.current_view\n        tools = self.parent_dataset.parent_application.tools       \n        # table=\'\'\'<table border=""1"" width=""100%"">\'\'\'\n        # table+=\'\'\'<tr><th>File</th><th>Error (RSS)</th><th># Pts</th></tr>\'\'\'\n        tab_data = [[\'%-18s\' % \'File\', \'%-18s\' % \'Error (RSS)\', \'%-18s\' % \'# Pts\'],]\n        for f in self.theory_files():\n            if self.stop_theory_flag:\n                break\n            xexp, yexp, success = view.view_proc(f.data_table,\n                                                 f.file_parameters)\n            tmp_dt = self.get_non_extended_th_table(f)\n            xth, yth, success = view.view_proc(tmp_dt,\n                                               f.file_parameters)\n\n            yth2=np.copy(yexp)\n            for i in range(xexp.shape[1]):\n                fint = interp1d(xth[:,i],yth[:,i],\'cubic\') # Get the theory at the same points as the data\n                yth2[:,i] = np.copy(fint(xexp[:,i]))\n            xth = np.copy(xexp)\n            yth = np.copy(yth2)\n\n            if (self.xrange.get_visible()):\n                conditionx = (xexp > self.xmin) * (xexp < self.xmax)\n            else:\n                conditionx = np.ones_like(xexp, dtype=np.bool)\n            if (self.yrange.get_visible()):\n                conditiony = (yexp > self.ymin) * (yexp < self.ymax)\n            else:\n                conditiony = np.ones_like(yexp, dtype=np.bool)\n            conditionnaninf = (~np.isnan(xexp)) * (~np.isnan(yexp)) * (\n                ~np.isnan(xth)) * (~np.isnan(yth)) * (~np.isinf(xexp)) * (\n                    ~np.isinf(yexp)) * (~np.isinf(xth)) * (~np.isinf(yth))\n            yexp = np.extract(conditionx * conditiony * conditionnaninf, yexp)\n            yth = np.extract(conditionx * conditiony * conditionnaninf, yth)\n            f_error = np.mean((yth - yexp)**2)\n            npt = len(yth)\n            total_error += f_error * npt\n            npoints += npt\n            # table+= \'\'\'<tr><td>%-18s</td><td>%-18.4g</td><td>%-18d</td></tr>\'\'\'% (f.file_name_short, f_error, npt)\n            tab_data.append([\'%-18s\'% f.file_name_short, \'%-18.4g\' % f_error, \'%-18d\' %npt])\n        # table+=\'\'\'</table><br>\'\'\'\n        # self.Qprint(table)\n        self.Qprint(tab_data)\n\n    def plot_theory_stuff(self):\n        """"""Plot theory helpers""""""\n        if not self.view_modes:\n            return\n\n        # PLOT CONTINUOUS SPECTRUM\n        view = self.parent_dataset.parent_application.current_view\n        data_table_tmp = DataTable(self.axarr)\n        data_table_tmp.num_columns = 2\n        ns = self.parameters[\'ns\'].value\n        data_table_tmp.num_rows = ns\n        data_table_tmp.data = np.zeros((ns, 2))\n        data_table_tmp.data[:, 0] = self.scont\n        data_table_tmp.data[:, 1] = np.exp(self.Hcont)\n        try:\n            x, y, success = view.view_proc(data_table_tmp, None)\n        except TypeError as e:\n            print(e)\n            return\n        self.contspectrum.set_data(x, y)\n\n        data_table_tmp.num_columns = 2\n        nmodes = len(self.sdisc)\n        data_table_tmp.num_rows = nmodes\n        data_table_tmp.data = np.zeros((nmodes, 2))\n        data_table_tmp.data[:, 0] = self.sdisc\n        data_table_tmp.data[:, 1] = self.Hdisc\n        try:\n            x, y, success = view.view_proc(data_table_tmp, None)\n        except TypeError as e:\n            print(e)\n            return\n        self.discspectrum.set_data(x, y)\n\n\nclass CLTheoryShanbhagMaxwellModesTime(BaseTheoryShanbhagMaxwellModesTime, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n\nclass GUITheoryShanbhagMaxwellModesTime(BaseTheoryShanbhagMaxwellModesTime, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n        # add widgets specific to the theory\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n\n        self.tbutpredmode = QToolButton()\n        self.tbutpredmode.setPopupMode(QToolButton.MenuButtonPopup)\n        menu = QMenu()\n        self.cont_pred_action = menu.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-minimum-value.png\'),\n            ""Fit from Spectrum"")\n        self.disc_pred_action = menu.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-scatter-plot.png\'),\n            ""Fit from Discrete"")\n        if self.prediction_mode == PredictionMode.cont:\n            self.tbutpredmode.setDefaultAction(self.cont_pred_action)\n        else:\n            self.tbutpredmode.setDefaultAction(self.disc_pred_action)\n        self.tbutpredmode.setMenu(menu)\n        tb.addWidget(self.tbutpredmode)\n    \n        self.modesaction = tb.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-visible.png\'), \'View modes\')\n        self.plateauaction = tb.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-flat-tire-80.png\'), \'is there a residual plateau?\')\n        self.save_modes_action = tb.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-save-Maxwell.png\'),\n            ""Save Modes"")            \n        self.save_spectrum_action = tb.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-save_Ht.png\'),\n            ""Save Spectrum"")            \n        self.modesaction.setCheckable(True)\n        self.modesaction.setChecked(True)\n        self.plateauaction.setCheckable(True)\n        self.plateauaction.setChecked(False)\n        self.thToolsLayout.insertWidget(0, tb)\n\n        connection_id = self.modesaction.triggered.connect(\n            self.modesaction_change)\n        connection_id = self.plateauaction.triggered.connect(\n            self.plateauaction_change)\n        connection_id = self.save_modes_action.triggered.connect(\n            self.save_modes)\n        connection_id = self.save_spectrum_action.triggered.connect(\n            self.save_spectrum)\n        connection_id = self.cont_pred_action.triggered.connect(\n            self.select_cont_pred)\n        connection_id = self.disc_pred_action.triggered.connect(\n            self.select_disc_pred)\n\n    def select_cont_pred(self):\n        self.prediction_mode = PredictionMode.cont\n        self.tbutpredmode.setDefaultAction(self.cont_pred_action)\n\n        if len(self.tfit) > 0:\n            th_files = self.theory_files()\n            for f in self.parent_dataset.files:\n                if f in th_files:\n                    tt = self.tables[f.file_name_short]\n                    tt.num_rows = len(self.tfit)\n                    tt.data = np.zeros((tt.num_rows, tt.num_columns))\n                    tt.data[:, 0] = self.tfit\n                    tt.data[:, 1] = self.K\n\n            self.Qprint(\'<b>Fit from continuous spectrum</b>\')\n            self.do_error(\'\')\n            self.do_plot(\'\')\n\n    def select_disc_pred(self):\n        self.prediction_mode = PredictionMode.disc\n        self.tbutpredmode.setDefaultAction(self.disc_pred_action)\n\n        if len(self.tfit) > 0:\n            th_files = self.theory_files()\n            for f in self.parent_dataset.files:\n                if f in th_files:\n                    tt = self.tables[f.file_name_short]\n                    tt.num_rows = len(self.tfit)\n                    tt.data = np.zeros((tt.num_rows, tt.num_columns))\n                    tt.data[:, 0] = self.tfit\n                    tt.data[:, 1] = self.GtM\n\n            self.Qprint(\'<b>Fit from discrete spectrum</b>\')\n            self.do_error(\'\')\n            self.do_plot(\'\')\n\n    def plateauaction_change(self, checked):\n        self.set_param_value(""plateau"", checked)\n\n    def save_spectrum(self):\n        """"""Save Spectrum to a text file""""""\n        fpath, _ = QFileDialog.getSaveFileName(self,\n                                               ""Save spectrum to a text file"",\n                                               os.path.join(RepTate.root_dir, ""data""), ""Text (*.txt)"")\n        if fpath == \'\':\n            return\n            \n        with open(fpath, \'w\') as f:\n            verdata = RepTate._version.get_versions()\n            version = verdata[\'version\'].split(\'+\')[0]\n            date = verdata[\'date\'].split(\'T\')[0]\n            build = verdata[\'version\']\n\n            header = \'# Continuous spectrum\\n\'\n            header += \'# Generated with RepTate %s %s (build %s)\\n\' % (version, date, build)\n\n            header += \'# At %s on %s\\n\' % (time.strftime(""%X""),\n                                           time.strftime(""%a %b %d, %Y""))\n            f.write(header)\n\n            f.write(\'\\n#%15s\\t%15s\\n\'%(\'tau_i\',\'G_i\'))\n\n            n = len(self.scont)\n            for i in range(n):\n                f.write(\'%15g\\t%15g\\n\'%(self.scont[i],np.exp(self.Hcont[i])))\n            \n            f.write(\'\\n#end\')\n\n        QMessageBox.information(self, \'Success\',\n                                \'Wrote spectrum \\""%s\\""\' % fpath)\n\n    def Qhide_theory_extras(self, state):\n        """"""Uncheck the modeaction button. Called when curent theory is changed""""""\n        self.modesaction.setChecked(state)\n\n    def modesaction_change(self, checked):\n        """"""Change visibility of modes""""""\n        self.graphicmodes_visible(checked)\n'"
RepTate/theories/TheorySmoothPolyStrand.py,38,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheorySmoothPolyStrand\n\nModule for the Smooth Poly STRAND model of polymer FIC (uses the Rolie-Double-Poly theory for the non-linear flow of entangled polymers).\n\n""""""\nimport os\nimport numpy as np\nfrom scipy.integrate import odeint\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom RepTate.core.DataTable import DataTable\nfrom PyQt5.QtWidgets import QToolBar, QToolButton, QMenu, QMessageBox, QFileDialog\nfrom PyQt5.QtCore import QSize\nfrom PyQt5.QtGui import QIcon\nfrom PyQt5.QtCore import Qt\nfrom RepTate.gui.Theory_rc import *\nfrom math import sqrt\nimport time\nimport RepTate\n\nimport RepTate.theories.rp_blend_ctypes_helper as rpch\nimport RepTate.theories.QuiescentSmoothStrand as QuiescentSmoothStrand\nfrom RepTate.core.Theory import EndComputationRequested\nfrom collections import OrderedDict\n\nimport RepTate.theories.SmoothPolySTRAND as SmoothPolySTRAND\nimport RepTate.theories.SchneiderRate as SchneiderRate\nimport RepTate.theories.timeArraySplit as timeArraySplit\nfrom RepTate.theories.theory_helpers import FlowMode, EditModesVolFractionsDialog, FeneMode, GcorrMode, NoquMode, SingleSpeciesMode, Dilution, EditMWDDialog, GetMwdRepTate\n\nclass TheorySmoothPolyStrand(CmdBase):\n    """"""Smooth-polyStrand model for flow-induced crystallisation in polydisperse melts of entangled linear polymers\n\n    * **Rheological model: The Rolie-Double-Poly model**\n    Evolution of chain structure under flow is computed by the Rolie-Double-Poly model. Implementation and parameters are the same as in the NVLE application.\n        .. math::\n            \\\\boldsymbol \\\\sigma = G_N^0 \\\\sum_i g(Z_{\\\\text{eff},i}) \\\\text{fene}(\\\\lambda_i) \\\\phi_i \\\\boldsymbol A_i\n\n        where\n            .. math::\n                \\\\boldsymbol A_i &= \\\\sum_j \\\\phi_j \\\\boldsymbol A_{ij}\\\\\\\\\n                \\\\lambda_i &= \\\\left( \\\\dfrac{\\\\text{Tr}  \\\\boldsymbol A_i}{3}  \\\\right)^{1/2}\\\\\\\\\n                \\\\stackrel{\\\\nabla}{\\\\boldsymbol  A_{ij}} &=\n                -\\\\dfrac{1}{\\\\tau_{\\\\mathrm d,i}} (\\\\boldsymbol A_{ij} - \\\\boldsymbol I)\n                -\\\\dfrac{2}{\\\\tau_{\\\\mathrm s,i}} \\\\dfrac{\\\\lambda_i - 1}{\\\\lambda_i} \\\\boldsymbol A_{ij}\n                -\\\\left( \\\\dfrac{\\\\beta_\\\\text{th}}{\\\\tau_{\\\\mathrm d,j}} \n                + \\\\beta_\\\\text{CCR}\\\\dfrac{2}{\\\\tau_{\\\\mathrm s,j}} \\\\dfrac{\\\\lambda_j - 1}{\\\\lambda_j}\\\\lambda_i^{2\\\\delta} \\\\right)\n                (\\\\boldsymbol A_{ij} - \\\\boldsymbol I)\\\\\\\\\n                \\\\text{fene}(\\\\lambda) &= \\\\dfrac{1-1/\\\\lambda_\\\\text{max}^2}{1-\\\\lambda^2/\\\\lambda_\\\\text{max}^2}\n        \n        with :math:`\\\\beta_\\\\text{th}` the thermal constrain release parameter, set to 1. If the ""modulus correction"" button\n        is pressed, :math:`g(z) = 1- \\\\dfrac{c_1}{z^{1/2}} + \\\\dfrac{c_2}{z} + \\\\dfrac{c_3}{z^{3/2}}` is the Likhtman-McLeish\n        CLF correction function to the modulus (:math:`c_1=1.69`, :math:`c_2=2`, :math:`c_3=-1.24`), :math:`g(z) = 1` otherwise;\n        :math:`Z_{\\\\text{eff},i}=Z_i\\\\phi_{\\\\text{dil},i}` is the\n        effective entanglement number of the molecular weight component :math:`i`, and :math:`\\\\phi_{\\\\text{dil},i}` the\n        dilution factor (:math:`\\\\phi_{\\\\text{dil},i}\\\\leq \\\\phi_i`).\n    * **Nucleation model: The smooth-polyStrand model**\n    This model takes the stress output from the Rolie-Double-Poly model for each mode, computes the flow-induced nucleation rate, using the Kuhn segment nematic order as the order parameter.\n\n       -Neglect quiescent nucleation button: this subtracts the quiescent nucleation rate and assumes all quiescent nucleation occurs from hetrogeneous nuclei.\n\n       -Average to single species button: this preaverages the chain configuration over all species in the melt and computes the nucleation rate with a single species based on this average.\n       \n    * **Crystal evolution model: The Schneider rate equations**\n    From the computed nucleation rate and the crystal growth rate, the model computes the evolution of total crystallinity using the Schneider rate equations [W. Schneider, A. Koppl, and J. Berger, Int. Polym. Proc.II 3, 151 (1988)]. This calculatiom uses the Avrami expression to account approximately for impingement. \n\n    * **Parameters**\n        Rheological\n       - ``GN0`` :math:`\\\\equiv G_N^0`: Plateau modulus\n       - ``beta`` :math:`\\\\equiv\\\\beta_\\\\text{CCR}`: Rolie-Poly CCR parameter\n       - ``delta`` :math:`\\\\equiv\\\\delta`: Rolie-Poly CCR exponent\n       - ``phi_i`` :math:`\\\\equiv\\\\phi_i`: Volume fraction of species :math:`i`\n       - ``tauD_i`` :math:`\\\\equiv\\\\tau_{\\\\mathrm d,i}`: Reptation time of species :math:`i` (including CLF)\n       - ``tauR_i`` :math:`\\\\equiv\\\\tau_{\\\\mathrm s,i}`: Stretch relaxation time of species :math:`i`\n       - ``lmax`` :math:`\\\\equiv\\\\lambda_\\\\text{max}`: Maximum stretch ratio (active only when the ""fene button"" is pressed)\n       - ``Ne`` :math:`\\\\equiv N_e`: Number of Kuhn steps between entanglements\n        Quiescient Crystallisation\n       - ``epsilonB`` :math:`\\\\equiv \\epsilon_B`: Bulk free energy gain of crystallisation per Kuhn step [dimensionless]\n       - ``muS`` :math:`\\\\equiv \\mu_S`: Nucleus surface area cost [dimensionless]\n       - ``tau0`` :math:`\\\\equiv \\\\tau_0`: Kuhn step nucleation timescale [sec]\n       - ``rhoK`` :math:`\\\\equiv \\\\rho_K`: Kuhn step density [:math:`\\mu\\mathrm{m}^{-3}`]\n       - ``G_C`` :math:`\\\\equiv G_C`: Crystal growth rate [:math:`\\\\mu\\mathrm{m/sec}`]\n       - ``N_0`` :math:`\\\\equiv N_0`: Heterogeneous nucleation density [:math:`\\mu\\mathrm{m}^{-3}`]\n\n\n        Flow-induced crystallisation       \n       - ``Gamma`` :math:`\\\\equiv \\Gamma`: Prefactor connecting the Kuhn segment nematic order and the monomer entropy loss [dimensionless].\n       - ``Kappa0`` :math:`\\\\equiv \\kappa _0`: Free energy penalty for the nucleus surface roughness [dimensionless].\n       - ``Qs0`` :math:`\\\\equiv Q_{s0}`: Parameter setting the volume of the search region for new stems joining the nucleus [dimensionless].\n\n    """"""\n\n    thname = ""Smooth-polySTRAND""\n    description = ""Smooth-polySTRAND model for flow-induced nucleation""\n    citations = [""D.J. Read et al., Phys. Rev. Lett. 124, 147802 (2020)""]\n    doi = [""http://dx.doi.org/10.1103/PhysRevLett.124.147802""]\n\n    def __new__(cls, name="""", parent_dataset=None, ax=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return GUITheorySmoothPolyStrand(\n            name, parent_dataset,\n            ax) if (CmdBase.mode == CmdMode.GUI) else CLTheorySmoothPolyStrand(\n                name, parent_dataset, ax)\n\n\nclass BaseTheorySmoothPolyStrand:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = \'http://reptate.readthedocs.io/manual/Applications/Crystal/Theory/theory.html\'\n    single_file = False\n    thname = TheorySmoothPolyStrand.thname\n    citations = TheorySmoothPolyStrand.citations\n    doi = TheorySmoothPolyStrand.doi\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        self.function = self.RolieDoublePoly_Crystal\n        self.has_modes = True\n        self.autocalculate = False\n        self.parameters[\'Gamma\'] = Parameter(\n            name=\'Gamma\',\n            value=1,\n            description=\'Order parameter prefactor\',\n            type=ParameterType.real,\n            opt_type=OptType.opt)\n        self.parameters[\'Kappa0\'] = Parameter(\n            name=\'Kappa0\',\n            value=0.1,\n            description=\'Nucleus roughness penalty\',\n            type=ParameterType.real,\n            opt_type=OptType.opt)\n        self.parameters[\'Qs0\'] = Parameter(\n            name=\'Qs0\',\n            value=30,\n            description=\'Stem search volume parameter\',\n            type=ParameterType.real,\n            opt_type=OptType.opt)\n        self.parameters[\'Ne\'] = Parameter(\n            name=\'Ne\',\n            value=25,\n            description=\'Monomers between entanglements\',\n            type=ParameterType.real,\n            opt_type=OptType.opt)\n        self.parameters[\'epsilonB\'] = Parameter(\n            name=\'epsilonB\',\n            value=0.044,\n            description=\'Bulk free energy per monomer\',\n            type=ParameterType.real,\n            opt_type=OptType.opt)\n        self.parameters[\'muS\'] = Parameter(\n            name=\'muS\',\n            value=0.94,\n            description=\'Surface area energy\',\n            type=ParameterType.real,\n            opt_type=OptType.opt)\n        self.parameters[\'tau0\'] = Parameter(\n            name=\'tau0\',\n            value=0.74E-9,\n            description=\'Monomer attachment time\',\n            type=ParameterType.real,\n            opt_type=OptType.opt)\n        self.parameters[\'rhoK\'] = Parameter(\n            name=\'rhoK\',\n            value=2.7E9,\n            description=\'Kuhn step density\',\n            type=ParameterType.real,\n            opt_type=OptType.opt)\n        self.parameters[\'G_C\'] = Parameter(\n            name=\'G_C\',\n            value=0.063,\n            description=\'Crystal growth rate\',\n            type=ParameterType.real,\n            opt_type=OptType.opt)\n        self.parameters[\'N_0\'] = Parameter(\n            name=\'N_0\',\n            value=0.0,\n            description=\'Hetrogeneous nucleation density\',\n            type=ParameterType.real,\n            opt_type=OptType.opt)        \n        self.parameters[""beta""] = Parameter(\n            name=""beta"",\n            value=1,\n            description=""CCR coefficient"",\n            type=ParameterType.real,\n            opt_type=OptType.nopt)\n        self.parameters[""delta""] = Parameter(\n            name=""delta"",\n            value=-0.5,\n            description=""CCR exponent"",\n            type=ParameterType.real,\n            opt_type=OptType.nopt)\n        self.parameters[""lmax""] = Parameter(\n            name=""lmax"",\n            value=10.0,\n            description=""Maximum extensibility"",\n            type=ParameterType.real,\n            opt_type=OptType.nopt,\n            display_flag=False,\n            min_value=1.01)\n        self.parameters[""nmodes""] = Parameter(\n            name=""nmodes"",\n            value=2,\n            description=""Number of modes"",\n            type=ParameterType.integer,\n            opt_type=OptType.const,\n            display_flag=False)\n        self.parameters[""GN0""] = Parameter(\n            name=""GN0"",\n            value=1000.0,\n            description=""Plateau modulus"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n            min_value=0)\n        self.parameters[""Me""] = Parameter(\n            name=""Me"",\n            value=1e4,\n            description=""Entanglement molecular mass"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n            min_value=0,\n            display_flag=False)\n        self.parameters[""tau_e""] = Parameter(\n            name=""tau_e"",\n            value=0.01,\n            description=""Entanglement relaxation time"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n            min_value=0,\n            display_flag=False)\n        nmode = self.parameters[""nmodes""].value\n        for i in range(nmode):\n            self.parameters[""phi%02d"" % i] = Parameter(\n                name=""phi%02d"" % i,\n                value=1. / nmode,\n                description=""Volume fraction of mode %02d"" % i,\n                type=ParameterType.real,\n                opt_type=OptType.nopt,\n                display_flag=False,\n                min_value=0)\n            self.parameters[""tauD%02d"" % i] = Parameter(\n                name=""tauD%02d"" % i,\n                value=100.0,\n                description=""Terminal time of mode %02d"" % i,\n                type=ParameterType.real,\n                opt_type=OptType.nopt,\n                display_flag=False,\n                min_value=0)\n            self.parameters[""tauR%02d"" % i] = Parameter(\n                name=""tauR%02d"" % i,\n                value=1,\n                description=""Rouse time of mode %02d"" % i,\n                type=ParameterType.real,\n                opt_type=OptType.opt,\n                min_value=0)\n\n        self.view_LVEenvelope = False\n        auxseries = self.ax.plot([], [], label=\'\')\n        self.LVEenvelopeseries = auxseries[0]\n        self.LVEenvelopeseries.set_marker(\'\')\n        self.LVEenvelopeseries.set_linestyle(\'--\')\n        self.LVEenvelopeseries.set_visible(self.view_LVEenvelope)\n        self.LVEenvelopeseries.set_color(\'green\')\n        self.LVEenvelopeseries.set_linewidth(5)\n        self.LVEenvelopeseries.set_label(\'\')\n\n        self.MAX_MODES = 40\n        self.with_fene = FeneMode.none\n        self.with_gcorr = GcorrMode.none\n        self.with_noqu = NoquMode.none\n        self.with_single = SingleSpeciesMode.none\n        self.Zeff = []\n        self.MWD_m = [100, 1000]\n        self.MWD_phi = [0.5, 0.5]\n        self.init_flow_mode()\n\n    def set_extra_data(self, extra_data):\n        """"""Set extra data when loading project""""""\n        self.MWD_m = extra_data[\'MWD_m\']\n        self.MWD_phi = extra_data[\'MWD_phi\']\n        self.Zeff = extra_data[\'Zeff\']\n\n        # FENE button\n        self.handle_with_fene_button(extra_data[\'with_fene\'])\n\n        # noqu button\n        self.handle_with_noqu_button(extra_data[\'with_noqu\'])\n\n        # single species button\n        self.handle_with_single_button(extra_data[\'with_single\'])\n\n        \n        # G button\n        if extra_data[\'with_gcorr\']:\n            self.with_gcorr == GcorrMode.with_gcorr\n            self.with_gcorr_button.setChecked(True)\n\n    def get_extra_data(self):\n        """"""Set extra_data when saving project""""""\n        self.extra_data[\'MWD_m\'] = self.MWD_m\n        self.extra_data[\'MWD_phi\'] = self.MWD_phi\n        self.extra_data[\'Zeff\'] = self.Zeff\n        self.extra_data[\'with_fene\'] = self.with_fene == FeneMode.with_fene\n        self.extra_data[\'with_gcorr\'] = self.with_gcorr == GcorrMode.with_gcorr\n        self.extra_data[\'with_noqu\'] = self.with_noqu == NoquMode.with_noqu\n        self.extra_data[\'with_single\'] = self.with_single == SingleSpeciesMode.with_single\n\n    def init_flow_mode(self):\n        """"""Find if data files are shear or extension""""""\n        try:\n            f = self.theory_files()[0]\n            if f.file_type.extension == \'shear\' or f.file_type.extension == \'shearxs\':\n                self.flow_mode = FlowMode.shear\n            else:\n                self.flow_mode = FlowMode.uext\n        except Exception as e:\n            print(""in RP init:"", e)\n            self.flow_mode = FlowMode.shear  #default mode: shear\n\n    def destructor(self):\n        """"""Called when the theory tab is closed""""""\n        self.show_theory_extras(False)\n        self.ax.lines.remove(self.LVEenvelopeseries)\n\n    def show_theory_extras(self, show=False):\n        """"""Called when the active theory is changed""""""\n        if CmdBase.mode == CmdMode.GUI:\n            self.Qhide_theory_extras(show)\n        # self.extra_graphic_visible(show)\n\n    def extra_graphic_visible(self, state):\n        """"""Change visibility of theory helpers""""""\n        self.view_LVEenvelope = state\n        self.LVEenvelopeseries.set_visible(state)\n        self.parent_dataset.parent_application.update_plot()\n\n    def get_modes(self):\n        """"""Get the values of Maxwell Modes from this theory""""""\n        nmodes = self.parameters[""nmodes""].value\n        tau = np.zeros(nmodes)\n        G = np.zeros(nmodes)\n        GN0 = self.parameters[""GN0""].value\n        for i in range(nmodes):\n            tau[i] = self.parameters[""tauD%02d"" % i].value\n            G[i] = GN0 * self.parameters[""phi%02d"" % i].value\n        return tau, G, True\n\n    def set_modes_from_mwd(self, m, phi):\n        """"""Set modes from MWD""""""\n        Me = self.parameters[""Me""].value\n        taue = self.parameters[""tau_e""].value\n        res = Dilution(m, phi, taue, Me, self).res\n        if res[0] == False:\n            self.Qprint(""Could not set modes from MDW"")\n            return\n        _, phi, taus, taud = res\n        nmodes = len(phi)\n        self.set_param_value(""nmodes"", nmodes)\n        for i in range(nmodes):\n            self.set_param_value(""phi%02d"" % i, phi[i])\n            self.set_param_value(""tauR%02d"" % i, taus[i])\n            self.set_param_value(""tauD%02d"" % i, taud[i])\n        self.Qprint(""Got %d modes from MWD"" % nmodes)\n        self.update_parameter_table()\n        self.Qprint(\n            \'<font color=green><b>Press ""Calculate"" to update theory</b></font>\'\n        )\n\n    def set_modes(self, tau, G):\n        """"""Set the values of Maxwell Modes from another theory""""""\n        nmodes = len(tau)\n        self.set_param_value(""nmodes"", nmodes)\n        sum_G = G.sum()\n\n        for i in range(nmodes):\n            self.set_param_value(""tauD%02d"" % i, tau[i])\n            self.set_param_value(""phi%02d"" % i, G[i] / sum_G)\n        self.update_parameter_table()\n        return True\n\n    def fZ(self, z):\n        """"""CLF correction function Likthman-McLeish (2002)""""""\n        return 1 - 2 * 1.69 / sqrt(z) + 4.17 / z - 1.55 / (z * sqrt(z))\n\n    def gZ(self, z):\n        """"""CLF correction function for modulus Likthman-McLeish (2002)""""""\n        return 1 - 1.69 / sqrt(z) + 2.0 / z - 1.24 / (z * sqrt(z))\n\n    def sigmadot_shear(self, sigma, t, p):\n        """"""Rolie-Poly differential equation under *shear* flow\n        with stretching and finite extensibility if selected""""""\n        if self.stop_theory_flag:\n            raise EndComputationRequested\n        tmax = p[-1]\n        if t >= tmax * self.count:\n            self.Qprint(""--"", end=\'\')\n            self.count += 0.2\n\n        # Calling C function:\n        if self.with_fene == FeneMode.with_fene:\n            wfene = 1\n        else:\n            wfene = 0\n        return rpch.compute_derivs_shear(sigma, p, t, wfene)\n\n    def sigmadot_uext(self, sigma, t, p):\n        """"""Rolie-Poly differential equation under *uniaxial elongational* flow\n        with stretching and finite extensibility if selected""""""\n        if self.stop_theory_flag:\n            raise EndComputationRequested\n        tmax = p[-1]\n        if t >= tmax * self.count:\n            self.Qprint(""--"", end=\'\')\n            # self.Qprint(""%4d%% done"" % (self.count*100))\n            self.count += 0.2\n\n        # Calling C function:\n        if self.with_fene == FeneMode.with_fene:\n            wfene = 1\n        else:\n            wfene = 0\n        return rpch.compute_derivs_uext(sigma, p, t, wfene)\n\n    def calculate_fene(self, l_square, lmax):\n        """"""calculate finite extensibility function value""""""\n        ilm2 = 1.0 / (lmax * lmax)  # 1/lambda_max^2\n        l2_lm2 = l_square * ilm2  # (lambda/lambda_max)^2\n        return (3.0 - l2_lm2) / (1.0 - l2_lm2) * (1.0 - ilm2) / (3.0 - ilm2)\n\n    def computeFel( self, Fxx, Fyy, Fxy):\n        """"""Converts RDP configurations into a free energy change (via nematic order parameter""""""\n        Gamma = self.parameters[\'Gamma\'].value\n        Ne = self.parameters[\'Ne\'].value\n\n        tmp= Fxx/2 + Fyy/2 + np.sqrt( ((Fxx-Fyy)/2.0)**2 + Fxy**2 ) - 1\n\t\t    \n        return Gamma* tmp/Ne\n\n    def computeQuiescentBarrier( self ):\n        """"""Calculates the GO model quiescent barrier and nucleation rate""""""\n        epsilonB = self.parameters[\'epsilonB\'].value\n        muS = self.parameters[\'muS\'].value\n        rhoK = self.parameters[\'rhoK\'].value\n        tau0 = self.parameters[\'tau0\'].value\n        Kappa0 = self.parameters[\'Kappa0\'].value\n        dN=1\n        curvature_skip=5\n        alpha=0.8\n\n        #Calculate quiescent barrier\n        landscape = []\n        landscape.append( 0.0) #0\n        NT=0\n        while( landscape[NT]>landscape[NT-1]-0.005):\n            NT += 1\n            landscape.append(QuiescentSmoothStrand.wholeLandscape(NT, epsilonB,muS, Kappa0) )\n            if( NT> 10000):\n                self.Qprint(\n                    \'<font color=green><b>Quiescent barrier does not have \\\n                    a maximum below 10,000 monomers - change epsilonB \\\n                    and/or muS</b></font>\')\n                break\n\n        #Compute barrier peak and curvature\n        quiescent_height = max(landscape)\n        nStar = landscape.index( quiescent_height)\n\n        d2Fqstar=(landscape[nStar-curvature_skip]-2*landscape[nStar]+landscape[nStar+curvature_skip]) \\\n          /(curvature_skip**2*dN**2)\n\n        #Calculate initial slope\n        sumDFq=0.0\n        for i in range(0, nStar+1):\n            sumDFq += np.exp(-landscape[i])\n\n        #Compute the nucleation rate\n        xqtime = (sumDFq*np.exp(quiescent_height)/(2*nStar**0.66666666)) \\\n          *(1+np.sqrt(-2*np.pi/d2Fqstar) \\\n            *np.exp(-(alpha**2)/(2*d2Fqstar*nStar**2)+alpha/nStar))\n        NqRate = rhoK/tau0/xqtime\n\n        self.Qprint(\'Quiescent barrier height=%.3g k<sub>B</sub>T\' % quiescent_height) # HTML syntax\n\n        self.Qprint(\'Quiescent nucleation rate=%.3g &mu;m<sup>-3</sup>s<sup>-1</sup><br>\' % NqRate) # HTML syntax\n\n        return landscape, NqRate, quiescent_height, nStar\n\n\n    def RolieDoublePoly_Crystal(self, f=None):\n        """"""Calculate the theory""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        fel = np.zeros((tt.num_rows, self.parameters[""nmodes""].value))\n        felAve = np.zeros((tt.num_rows,1))\n        Gamma = self.parameters[\'Gamma\'].value\n        epsilonB = self.parameters[\'epsilonB\'].value\n        muS = self.parameters[\'muS\'].value\n        G_C = self.parameters[\'G_C\'].value\n        N_0 = self.parameters[\'N_0\'].value\n        Kappa0 = self.parameters[\'Kappa0\'].value\n        Qs0 = self.parameters[\'Qs0\'].value\n\n        tt.data[:, 0] = ft.data[:, 0] #time\n                \n        # ODE solver parameters\n        abserr = 1.0e-8\n        relerr = 1.0e-8\n        t = ft.data[:, 0]\n        t = np.concatenate([[0], t])\n        # sigma0 = [1.0, 1.0, 0.0]  # sxx, syy, sxy\n        beta = self.parameters[""beta""].value\n        delta = self.parameters[""delta""].value\n        lmax = self.parameters[""lmax""].value\n        flow_rate = float(f.file_parameters[""gdot""])\n        tstop = float(f.file_parameters[""tstop""])\n        nmodes = self.parameters[""nmodes""].value\n\n        #flow geometry\n        if self.flow_mode == FlowMode.shear:\n            sigma0 = ([1.0, 1.0, 0.0] *\n                      (nmodes * nmodes))  # sxx_ij, syy_ij, sxy_ij\n            pde_stretch = self.sigmadot_shear\n        elif self.flow_mode == FlowMode.uext:\n            sigma0 = ([1.0, 1.0] * (nmodes * nmodes))  # sxx_ij, syy_ij\n            pde_stretch = self.sigmadot_uext\n        else:\n            return\n\n        taud_arr = []\n        taus_arr = []\n        phi_arr = []\n        for i in range(nmodes):\n            taud_arr.append(self.parameters[""tauD%02d"" % i].value)\n            taus_arr.append(self.parameters[""tauR%02d"" % i].value)\n            phi_arr.append(self.parameters[""phi%02d"" % i].value)\n        tmax = t[-1]\n        p = [\n            nmodes, lmax, phi_arr, taud_arr, taus_arr, beta, delta, flow_rate,\n            tmax\n        ]\n        self.count = 0.2\n        self.Qprint(\'Rate %.3g<br>  0%% \' % flow_rate, end=\'\')\n\n        if t[-1] < tstop:\n            try:\n                sig = odeint(\n                    pde_stretch, sigma0, t, args=(p, ), atol=abserr, rtol=relerr)\n            except EndComputationRequested:\n                return\n        else: #tstop must happen during computation\n            t1,t2=timeArraySplit.timeArraySplit(t,tstop)\n            #solve for t < tmax\n            tmax = t1[-1]\n            p = [ nmodes, lmax, phi_arr, taud_arr, taus_arr, beta, delta,\n                  flow_rate,  tmax]\n            sig1 = odeint( pde_stretch, sigma0, t1, args=(p, ),\n                               atol=abserr, rtol=relerr)\n            #solve for t > tmax\n            tmax = t2[-1]\n            p = [ nmodes, lmax, phi_arr, taud_arr, taus_arr, beta, delta,\n                  0.0,  tmax]\n            sig2 = odeint( pde_stretch, sig1[-1], t2, args=(p, ),\n                               atol=abserr, rtol=relerr)\n            #Merge two solutions\n            sig=np.concatenate((sig1[:-1],sig2[1:]),0)\n            \n        \n        self.Qprint(\' 100%\')\n        # sig.shape is (len(t), 3*n^2) in shear\n        if self.flow_mode == FlowMode.shear:\n            c = 3\n            sig = sig[1:, :]\n            nt = len(sig)\n            lsq = np.zeros((nt, nmodes))\n            if self.with_fene == FeneMode.with_fene:\n                #calculate lambda^2\n                for i in range(nmodes):\n                    if self.stop_theory_flag:\n                        break\n                    I = c * nmodes * i\n                    trace_arr = np.zeros(nt)\n                    for j in range(nmodes):\n                        # trace_arr += phi_arr[j] * (sxx_t[:, I + j] + 2 * syy_t[:, I + j])\n                        trace_arr += phi_arr[j] * (\n                            sig[:, I + c * j] + 2 * sig[:, I + c * j + 1])\n                    lsq[:, i] = trace_arr / 3.0  # len(t) rows and n cols\n\n            for i in range(nmodes):\n                if self.stop_theory_flag:\n                    break\n                I = c * nmodes * i\n                sig_i = np.zeros(nt)\n                for j in range(nmodes):\n                    sig_i += phi_arr[j] * sig[:, I + c * j + 2]\n\n                if self.with_fene == FeneMode.with_fene:\n                    sig_i *= self.calculate_fene(lsq[:, i], lmax)\n                if self.with_gcorr == GcorrMode.with_gcorr:\n                    sig_i *= self.gZ(self.Zeff[i])\n                tt.data[:, 1] += phi_arr[i] * sig_i\n            tt.data[:, 1] *= self.parameters[""GN0""].value\n\n        if self.flow_mode == FlowMode.uext:\n            # every 2 component we find xx, yy, starting at 0, or 1; and remove t=0\n            # sxx_t = sig[1:, 0::2] # len(t) - 1 rows and n^2 cols\n            # syy_t = sig[1:, 1::2] # len(t) - 1 rows and n^2 cols\n\n            # nt = len(sxx_t)\n            c = 2\n            sig = sig[1:, :]\n            nt = len(sig)\n            lsq = np.zeros((nt, nmodes))\n            if self.with_fene == FeneMode.with_fene:\n                for i in range(nmodes):\n                    if self.stop_theory_flag:\n                        break\n                    I = c * nmodes * i\n                    trace_arr = np.zeros(nt)\n                    for j in range(nmodes):\n                        trace_arr += phi_arr[j] * (\n                            sig[:, I + c * j] + 2 * sig[:, I + c * j + 1])\n                    lsq[:, i] = trace_arr / 3.0  # len(t) rows and n cols\n\n            for i in range(nmodes):\n                if self.stop_theory_flag:\n                    break\n                I = c * nmodes * i\n                sig_i = np.zeros(nt)\n                for j in range(nmodes):\n                    sig_i += phi_arr[j] * (\n                        sig[:, I + c * j] - sig[:, I + c * j + 1])\n\n                if self.with_fene == FeneMode.with_fene:\n                    sig_i *= self.calculate_fene(lsq[:, i], lmax)\n                if self.with_gcorr == GcorrMode.with_gcorr:\n                    sig_i *= self.gZ(self.Zeff[i])\n                tt.data[:, 1] += phi_arr[i] * sig_i\n\n            tt.data[:, 1] *= self.parameters[""GN0""].value\n\n        #Extract the configuration of each mode\n        for time in range(nt):\n            total_sss_xx=0.0\n            total_sss_yy=0.0\n            total_sss_xy=0.0\n            for i in range(nmodes):\n                I = c * nmodes * i\n                sss_xx = 0.0\n                sss_yy = 0.0\n                sss_xy = 0.0\n                for j in range(nmodes):\n                    sss_xx += phi_arr[j] * sig[time, I + c * j ]\n                    sss_yy += phi_arr[j] * sig[time, I + c * j + 1]\n                    sss_xy += phi_arr[j] * sig[time, I + c * j + 2]\n                fel[time,i] = self.computeFel(sss_xx , sss_yy , sss_xy)\n                #Compute the total stress for the average stress model\n                total_sss_xx += phi_arr[i] * sss_xx\n                total_sss_yy += phi_arr[i] * sss_yy\n                total_sss_xy += phi_arr[i] * sss_xy\n            felAve[time,0] = self.computeFel(total_sss_xx , total_sss_yy , total_sss_xy)\n                \n                \n        #Compute the quiescent free energy barrier\n        q_barrier, NdotQ, DfStarQ, nStarQ = self.computeQuiescentBarrier()\n        if self.with_noqu == NoquMode.with_noqu:\n            NdotInitial = 0.0\n        else:\n            NdotInitial = NdotQ\n\n        #====Compute the flow-induced barrier====\n        #First setup the concentration\n        q_barrier=np.asarray(q_barrier)\n        if self.with_single == SingleSpeciesMode.with_single:\n            phi = np.asarray([1.0])\n        else:   \n            phi = np.asarray(phi_arr)\n        nspecies=phi.size\n\n        nStarPrevious = nStarQ+2 #Use the quiescent nstar as an initial guess\n        NSprevious=1.1\n        Pprevious=0.0\n        Bprevious=1.0   \n        sumdf=1e5\n        for i in range(tt.num_rows):\n            #See how much change there is from last time\n            if(i>0):\n                \n                sumdf=0.0\n                for j in range(nspecies):\n                    sumdf += (df[j]-fel[i,j])**2\n                \n            if(sumdf>1e-12): #Otherwise assume no change from last timestep\n                if self.with_single == SingleSpeciesMode.with_single:\n                    df=felAve[i,:]\n                else:\n                    df= fel[i,:]\n\n                    params={\'NTprevious\':nStarPrevious, \'phi\':phi, \'df\':df, \\\n                            \'epsilonB\':epsilonB, \'muS\':muS, \\\n                            \'Kappa0\':Kappa0, \'Qs0\':Qs0,\\\n                            \'NSprevious\':NSprevious,\\\n                            \'Pprevious\':Pprevious,\\\n                            \'Bprevious\':Bprevious}\n                #DfStarFlow = SmoothPolySTRAND.findDfStar(params)\n                DfStarFlow , nStarPrevious, NSprevious, Pprevious, Bprevious\\\n                  = SmoothPolySTRAND.findDfStar_Direct(params)\n                nucRate=NdotQ*np.exp( DfStarQ - DfStarFlow)\n\n            if self.with_noqu == NoquMode.with_noqu:\n                tt.data[i,2]=nucRate - NdotQ\n                if(tt.data[i,2]<0):\n                    if(tt.data[i,2]/(NdotQ+1e-20)<-0.01):\n                        self.Qprint(""<font color=red><b>Warning: nucleation rate < 0 !!!</b></font>"")\n                    tt.data[i,2]=0.0\n            else:\n                tt.data[i,2]=nucRate\n            \n\n            \n        #Now use a spline to interpolate the N_dot data and solve for crystal\n        t = tt.data[:,0]\n        Ndot = tt.data[:,2]\n        Cry_Evol = SchneiderRate.intSchneider(t, Ndot,NdotInitial,N_0,G_C)\n        tt.data[:, 3] = 1.0-np.exp(-Cry_Evol[:,0])#Cry_Evol[:,0] #Phi_X\n        tt.data[:, 4] = Cry_Evol[:,3]/8/np.pi #Number of nuclei\n\n\n        \n    def set_param_value(self, name, value):\n        """"""Set the value of theory parameters""""""\n        if (name == ""nmodes""):\n            oldn = self.parameters[""nmodes""].value\n            # self.spinbox.setMaximum(int(value))\n        message, success = super(BaseTheorySmoothPolyStrand,\n                                 self).set_param_value(name, value)\n        if not success:\n            return message, success\n        if (name == ""nmodes""):\n            for i in range(self.parameters[""nmodes""].value):\n                self.parameters[""phi%02d"" % i] = Parameter(\n                    name=""phi%02d"" % i,\n                    value=0.0,\n                    description=""Volume fraction of mode %02d"" % i,\n                    type=ParameterType.real,\n                    opt_type=OptType.nopt,\n                    display_flag=False,\n                    min_value=0)\n                self.parameters[""tauD%02d"" % i] = Parameter(\n                    name=""tauD%02d"" % i,\n                    value=100.0,\n                    description=""Terminal time of mode %02d"" % i,\n                    type=ParameterType.real,\n                    opt_type=OptType.nopt,\n                    display_flag=False,\n                    min_value=0)\n                self.parameters[""tauR%02d"" % i] = Parameter(\n                    name=""tauR%02d"" % i,\n                    value=1,\n                    description=""Rouse time of mode %02d"" % i,\n                    type=ParameterType.real,\n                    opt_type=OptType.opt,\n                    display_flag=True,\n                    min_value=0)\n            if (oldn > self.parameters[""nmodes""].value):\n                for i in range(self.parameters[""nmodes""].value, oldn):\n                    del self.parameters[""phi%02d"" % i]\n                    del self.parameters[""tauD%02d"" % i]\n                    del self.parameters[""tauR%02d"" % i]\n        return \'\', True\n\n  \n\n    \n    def do_fit(self, line):\n        """"""Minimisation procedure disabled in this theory""""""\n        self.Qprint(\n            ""<font color=red><b>Minimisation procedure disabled in this theory</b></font>""\n        )\n\n\nclass CLTheorySmoothPolyStrand(BaseTheorySmoothPolyStrand, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n\nclass GUITheorySmoothPolyStrand(BaseTheorySmoothPolyStrand, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n        # add widgets specific to the theory\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n\n        self.tbutflow = QToolButton()\n        self.tbutflow.setPopupMode(QToolButton.MenuButtonPopup)\n        menu = QMenu()\n        self.shear_flow_action = menu.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icon-shear.png\'), ""Shear Flow"")\n        self.extensional_flow_action = menu.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icon-uext.png\'),\n            ""Extensional Flow"")\n        if self.flow_mode == FlowMode.shear:\n            self.tbutflow.setDefaultAction(self.shear_flow_action)\n        else:\n            self.tbutflow.setDefaultAction(self.extensional_flow_action)\n        self.tbutflow.setMenu(menu)\n        tb.addWidget(self.tbutflow)\n\n        self.tbutmodes = QToolButton()\n        self.tbutmodes.setPopupMode(QToolButton.MenuButtonPopup)\n        menu = QMenu()\n        self.get_modes_action = menu.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-broadcasting.png\'),\n            ""Get Modes (MWD app)"")\n        self.get_modes_data_action = menu.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-broadcasting.png\'),\n            ""Get Modes (MWD data)"")\n        self.edit_modes_action = menu.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-edit-file.png\'),\n            ""Edit Modes"")\n        # self.plot_modes_action = menu.addAction(\n        #     QIcon(\':/Icon8/Images/new_icons/icons8-scatter-plot.png\'),\n        #     ""Plot Modes"")\n        self.save_modes_action = menu.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-save-Maxwell.png\'),\n            ""Save Modes"")\n        self.tbutmodes.setDefaultAction(self.get_modes_action)\n        self.tbutmodes.setMenu(menu)\n        tb.addWidget(self.tbutmodes)\n        # #Show LVE button\n        self.linearenvelope = tb.addAction(\n            QIcon(\':/Icon8/Images/new_icons/lve-icon.png\'),\n            \'Show Linear Envelope\')\n        self.linearenvelope.setCheckable(True)\n        self.linearenvelope.setChecked(False)\n        #Finite extensibility button\n        self.with_fene_button = tb.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-infinite.png\'),\n            \'Finite Extensibility\')\n        self.with_fene_button.setCheckable(True)\n        #Modulus correction button\n        self.with_gcorr_button = tb.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-circled-g-filled.png\'),\n            \'Modulus Correction\')\n        self.with_gcorr_button.setCheckable(True)\n        #Ignore quiescent button\n        self.with_noqu_button = tb.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-noquiescent.png\'),\n            \'Neglect quiescent nucleation\')\n        self.with_noqu_button.setCheckable(True)\n        #Single species button\n        self.with_single_button = tb.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-SingleSpecies.png\'),\n            \'Average to single species for nucleation\')\n        self.with_single_button.setCheckable(True)\n\n\n        #Save to flowsolve button\n        self.flowsolve_btn = tb.addAction(\n            QIcon(\':/Icon8/Images/new_icons/icons8-save-flowsolve.png\'),\n            \'Save Parameters To FlowSolve\')\n        self.flowsolve_btn.setCheckable(False)\n\n        self.thToolsLayout.insertWidget(0, tb)\n\n        connection_id = self.shear_flow_action.triggered.connect(\n            self.select_shear_flow)\n        connection_id = self.extensional_flow_action.triggered.connect(\n            self.select_extensional_flow)\n        connection_id = self.get_modes_action.triggered.connect(\n            self.get_modes_reptate)\n        connection_id = self.get_modes_data_action.triggered.connect(\n            self.edit_mwd_modes)\n        connection_id = self.edit_modes_action.triggered.connect(\n            self.edit_modes_window)\n        # connection_id = self.plot_modes_action.triggered.connect(\n        #     self.plot_modes_graph)\n        connection_id = self.linearenvelope.triggered.connect(\n            self.show_linear_envelope)\n        connection_id = self.save_modes_action.triggered.connect(\n            self.save_modes)\n        connection_id = self.with_fene_button.triggered.connect(\n            self.handle_with_fene_button)\n        connection_id = self.with_gcorr_button.triggered.connect(\n            self.handle_with_gcorr_button)\n        connection_id = self.with_noqu_button.triggered.connect(\n            self.handle_with_noqu_button)\n        connection_id = self.with_single_button.triggered.connect(\n            self.handle_with_single_button)\n\n#        connection_id = self.noqu_button.triggered.connect(\n#            self.handle_with_gcorr_button)\n        connection_id = self.flowsolve_btn.triggered.connect(\n            self.handle_flowsolve_btn)\n\n    def handle_flowsolve_btn(self):\n        """"""Save theory parameters in FlowSolve format""""""\n\n        #Get filename of RepTate project to open\n        fpath, _ = QFileDialog.getSaveFileName(self,\n                                               ""Save Parameters to FowSolve"",\n                                               os.path.join(RepTate.root_dir, ""data""), ""FlowSolve (*.fsrep)"")\n        if fpath == \'\':\n            return\n\n        with open(fpath, \'w\') as f:\n            verdata = RepTate._version.get_versions()\n            version = verdata[\'version\'].split(\'+\')[0]\n            date = verdata[\'date\'].split(\'T\')[0]\n            build = verdata[\'version\']\n            header = \'#flowGen input\\n\'\n            header += \'# Generated with RepTate %s %s (build %s)\\n\' % (version, date, build)\n            header += \'# At %s on %s\\n\' % (time.strftime(""%X""),\n                                           time.strftime(""%a %b %d, %Y""))\n            f.write(header)\n\n            f.write(\'\\n#param global\\n\')\n            f.write(\'constit polydisperse\\n\')\n            # f.write(\'# or multip (for pompom) or polydisperse (for polydisperse Rolie-Poly)\\n\')\n\n            f.write(\'\\n#param constitutive\\n\')\n\n            n = self.parameters[\'nmodes\'].value\n\n            td = np.zeros(n)\n            for i in range(n):\n                td[i] = self.parameters[""tauD%02d"" % i].value\n            # sort taud ascending order\n            args = np.argsort(td)\n\n            fraction = \'fraction\'\n            taud = \'taud\'\n            tauR = \'tauR\'\n            lmax = \'lambdaMax\'\n            for i, arg in enumerate(args):\n                fraction += \' %.6g\' % self.parameters[""phi%02d"" % arg].value\n                taud += \' %.6g\' % self.parameters[""tauD%02d"" % arg].value\n                tauR += \' %.6g\' % self.parameters[""tauR%02d"" % arg].value\n                lmax += \' %.6g\' % self.parameters[""lmax""].value\n            f.write(\'%s\\n%s\\n%s\\n\' % (taud, tauR, fraction))\n            if self.with_fene == FeneMode.with_fene:  # don\'t output lmax at all for infinite ex\n                f.write(\'%s\\n\' % lmax)\n            f.write(\'modulus %.6g\\n\' % self.parameters[""GN0""].value)\n            f.write(\'beta %.6gn\' % self.parameters[""beta""].value)\n            f.write(\'delta %.6g\\n\' % self.parameters[""delta""].value)\n\n            f.write(\'\\n#end\')\n\n        QMessageBox.information(self, \'Success\',\n                                \'Wrote FlowSolve parameters in \\""%s\\""\' % fpath)\n\n    def handle_with_gcorr_button(self, checked):\n        if checked:\n            if len(self.Zeff) > 0:\n                # if Zeff contains something\n                self.with_gcorr = GcorrMode.with_gcorr\n            else:\n                self.Qprint(\n                    \'<font color=orange><b>Modulus correction needs Z from MWD</b></font>\'\n                )\n                self.with_gcorr_button.setChecked(False)\n                return\n        else:\n            self.with_gcorr = GcorrMode.none\n        self.Qprint(\n            \'<font color=green><b>Press ""Calculate"" to update theory</b></font>\'\n        )\n\n    def handle_with_noqu_button(self, checked):\n        if checked:\n            \n            self.with_noqu = NoquMode.with_noqu\n            self.with_noqu_button.setChecked(True)\n        else:\n            self.with_noqu = NoquMode.none\n\n        self.Qprint(\n            \'<font color=green><b>Ignore quiescent: Press ""Calculate"" to update theory</b></font>\'\n        )\n\n        \n    def handle_with_single_button(self, checked):\n        if checked:\n            \n            self.with_single = SingleSpeciesMode.with_single\n            self.with_single_button.setChecked(True)\n        else:\n            self.with_single= SingleSpeciesMode.none\n\n        self.Qprint(\n            \'<font color=green><b>Single species: Press ""Calculate"" to update theory</b></font>\'\n        )\n\n    def handle_with_fene_button(self, checked):\n        if checked:\n            self.with_fene = FeneMode.with_fene\n            self.with_fene_button.setChecked(True)\n            self.with_fene_button.setIcon(\n                QIcon(\':/Icon8/Images/new_icons/icons8-facebook-f.png\'))\n            self.parameters[""lmax""].display_flag = True\n            self.parameters[""lmax""].opt_type = OptType.nopt\n        else:\n            self.with_fene = FeneMode.none\n            self.with_fene_button.setChecked(False)\n            self.with_fene_button.setIcon(\n                QIcon(\':/Icon8/Images/new_icons/icons8-infinite.png\'))\n            self.parameters[""lmax""].display_flag = False\n            self.parameters[""lmax""].opt_type = OptType.const\n        self.update_parameter_table()\n        self.Qprint(\n            \'<font color=green><b>Press ""Calculate"" to update theory</b></font>\'\n        )\n\n    def Qhide_theory_extras(self, show):\n        """"""Uncheck the LVE button. Called when curent theory is changed""""""\n        if show:\n            self.LVEenvelopeseries.set_visible(self.linearenvelope.isChecked())\n        else:\n            self.LVEenvelopeseries.set_visible(False)\n        self.parent_dataset.actionMinimize_Error.setDisabled(show)\n        self.parent_dataset.actionShow_Limits.setDisabled(show)\n        self.parent_dataset.actionVertical_Limits.setDisabled(show)\n        self.parent_dataset.actionHorizontal_Limits.setDisabled(show)\n\n    def show_linear_envelope(self, state):\n        self.plot_theory_stuff()\n        self.extra_graphic_visible(state)\n        # self.LVEenvelopeseries.set_visible(self.linearenvelope.isChecked())\n        # self.plot_theory_stuff()\n        # self.parent_dataset.parent_application.update_plot()\n\n    def select_shear_flow(self):\n        self.flow_mode = FlowMode.shear\n        self.tbutflow.setDefaultAction(self.shear_flow_action)\n\n    def select_extensional_flow(self):\n        self.flow_mode = FlowMode.uext\n        self.tbutflow.setDefaultAction(self.extensional_flow_action)\n\n    def get_modes_reptate(self):\n        apmng = self.parent_dataset.parent_application.parent_manager\n        get_dict = {}\n        for app in apmng.applications.values():\n            app_index = apmng.ApplicationtabWidget.indexOf(app)\n            app_tab_name = apmng.ApplicationtabWidget.tabText(app_index)\n            for ds in app.datasets.values():\n                ds_index = app.DataSettabWidget.indexOf(ds)\n                ds_tab_name = app.DataSettabWidget.tabText(ds_index)\n                for th in ds.theories.values():\n                    th_index = ds.TheorytabWidget.indexOf(th)\n                    th_tab_name = ds.TheorytabWidget.tabText(th_index)\n                    if th.thname == \'Discretize MWD\':\n                        get_dict[""%s.%s.%s"" % (app_tab_name, ds_tab_name,\n                                               th_tab_name)] = th.get_mwd\n\n        if get_dict:\n            d = GetMwdRepTate(self, get_dict, \'Select Discretized MWD\')\n            if (d.exec_() and d.btngrp.checkedButton() != None):\n                _, success1 = self.set_param_value(""tau_e"", d.taue_text.text())\n                _, success2 = self.set_param_value(""Me"", d.Me_text.text())\n                if not success1 * success2:\n                    self.Qprint(""Could not understand Me or taue, try again"")\n                    return\n                item = d.btngrp.checkedButton().text()\n                m, phi = get_dict[item]()\n\n                self.MWD_m = np.copy(m)\n                self.MWD_phi = np.copy(phi)\n                self.set_modes_from_mwd(m, phi)\n        else:\n            # no theory Discretise MWD found\n            QMessageBox.warning(self, \'Get MW distribution\',\n                                \'No \\""Discretize MWD\\"" theory found\')\n        # self.parent_dataset.handle_actionCalculate_Theory()\n\n    def edit_modes_window(self):\n        nmodes = self.parameters[""nmodes""].value\n        phi = np.zeros(nmodes)\n        taud = np.zeros(nmodes)\n        taur = np.zeros(nmodes)\n        for i in range(nmodes):\n            phi[i] = self.parameters[""phi%02d"" % i].value\n            taud[i] = self.parameters[""tauD%02d"" % i].value\n            taur[i] = self.parameters[""tauR%02d"" % i].value\n        param_dic = OrderedDict()\n        param_dic[""phi""] = phi\n        param_dic[""tauD""] = taud\n        param_dic[""tauR""] = taur\n        d = EditModesVolFractionsDialog(self, param_dic, self.MAX_MODES)\n        if d.exec_():\n            nmodes = d.table.rowCount()\n            self.set_param_value(""nmodes"", nmodes)\n            # self.set_param_value(""nstretch"", nmodes)\n            success = True\n            for i in range(nmodes):\n                msg, success1 = self.set_param_value(""phi%02d"" % i,\n                                                     d.table.item(i, 0).text())\n                msg, success2 = self.set_param_value(""tauD%02d"" % i,\n                                                     d.table.item(i, 1).text())\n                msg, success3 = self.set_param_value(""tauR%02d"" % i,\n                                                     d.table.item(i, 2).text())\n                success *= success1 * success2 * success3\n            if not success:\n                QMessageBox.warning(\n                    self, \'Error\',\n                    \'Some parameter(s) could not be updated.\\nPlease try again.\'\n                )\n            else:\n                self.handle_actionCalculate_Theory()\n\n    def edit_mwd_modes(self):\n        d = EditMWDDialog(self, self.MWD_m, self.MWD_phi, 200)\n        if d.exec_():\n            nmodes = d.table.rowCount()\n            m = []\n            phi = []\n            _, success1 = self.set_param_value(""tau_e"", d.taue_text.text())\n            _, success2 = self.set_param_value(""Me"", d.Me_text.text())\n            if not success1 * success2:\n                self.Qprint(""Could not understand Me or taue, try again"")\n                return\n            for i in range(nmodes):\n                try:\n                    m.append(float(d.table.item(i, 0).text()))\n                    phi.append(float(d.table.item(i, 1).text()))\n                except ValueError:\n                    self.Qprint(""Could not understand line %d, try again"" %\n                                (i + 1))\n                    return\n            self.MWD_m = np.copy(m)\n            self.MWD_phi = np.copy(phi)\n            self.set_modes_from_mwd(m, phi)\n\n    # def plot_modes_graph(self):\n    #     pass\n\n    def plot_theory_stuff(self):\n        """"""Plot theory helpers""""""\n        logtmin = np.log10(self.parent_dataset.minpositivecol(0))\n        logtmax = np.log10(self.parent_dataset.maxcol(0)) + 1\n        ntimes = int((logtmax - logtmin) * 20)\n        data_table_tmp = DataTable(self.axarr)\n        data_table_tmp.num_columns = 5\n        data_table_tmp.num_rows = ntimes\n        data_table_tmp.data = np.zeros((ntimes, 5))\n\n        times = np.logspace(logtmin, logtmax, ntimes)\n        data_table_tmp.data[:, 0] = times\n        nmodes = self.parameters[""nmodes""].value\n        data_table_tmp.data[:, 1] = 0\n        fparamaux = {""gdot"": 1e-8}\n\n        phi = []\n        taud = []\n        for i in range(nmodes):\n            phi.append(self.parameters[""phi%02d"" % i].value)\n            taud.append(self.parameters[""tauD%02d"" % i].value)\n\n        for i in range(nmodes):\n            if self.stop_theory_flag:\n                break\n            G = self.parameters[\'GN0\'].value\n            if self.with_gcorr == GcorrMode.with_gcorr:\n                G = G * self.gZ(self.Zeff[i])\n            for j in range(nmodes):\n                # TODO: use symetry to reduce number of loops\n                tau = 1. / (1. / taud[i] + 1. / taud[j])\n                data_table_tmp.data[:, 1] += G * phi[i] * phi[j] * fparamaux[\n                    ""gdot""] * tau * (1 - np.exp(-times / tau))\n        if self.flow_mode == FlowMode.uext:\n            data_table_tmp.data[:, 1] *= 3.0\n        view = self.parent_dataset.parent_application.current_view\n        try:\n            x, y, success = view.view_proc(data_table_tmp, fparamaux)\n        except TypeError as e:\n            print(e)\n            return\n        self.LVEenvelopeseries.set_data(x[:, 0], y[:, 0])\n        # remove tmp artist form ax\n        for i in range(data_table_tmp.MAX_NUM_SERIES):\n            for nx in range(len(self.axarr)):\n                self.axarr[nx].lines.remove(data_table_tmp.series[nx][i])\n\n\n'"
RepTate/theories/TheoryStickyReptation.py,17,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryStickyReptation\n\nTemplate file for creating a new theory\n""""""\nimport numpy as np\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom scipy import interpolate\n\n\nclass TheoryStickyReptation(CmdBase):\n    """"""Fit the Sticky Reptation theory for the linear rheology of linear entangled polymers with a number of stickers that can form reversible intramolecular crosslinks.\n        \n    * **Parameters**\n       - ``Ge`` : elastic plateau modulus.\n       - ``Ze`` : number of entanglements per chain.\n       - ``Zs`` : number of stickers per chain.\n       - ``tau_s`` : sticker dissociation time.\n       - ``alpha`` : dimensionless constant.\n    """"""\n\n    thname = ""Sticky Reptation""\n    description = ""Sticky Reptation""\n    citations = [""L. Leibler et al., Macromolecules, 1991, 24, 4701-4704""]\n    doi = [""http://dx.doi.org/10.1021/ma00016a034""]\n\n    def __new__(cls, name="""", parent_dataset=None, axarr=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryStickyReptation(name, parent_dataset, axarr)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryStickyReptation(name, parent_dataset, axarr)\n        )\n\n\nclass BaseTheoryStickyReptation:\n    """"""Base class for both GUI and CL""""""\n\n    # html_help_file = \'\'\n    single_file = (\n        False  # False if the theory can be applied to multiple files simultaneously\n    )\n    thname = TheoryStickyReptation.thname\n    citations = TheoryStickyReptation.citations\n    doi = TheoryStickyReptation.doi\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        self.function = self.calculate  # main theory function\n        self.has_modes = False  # True if the theory has modes\n        self.autocalculate = False\n        self.parameters[""Ge""] = Parameter(\n            name=""Ge"",\n            value=10605.97,\n            description=""Entanglement modulus"",\n            type=ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=1,\n            max_value=1e8,\n        )\n        self.parameters[""tau_s""] = Parameter(\n            name=""tau_s"",\n            value=0.01435800,\n            description=""sticker time"",\n            type=ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=1e-5,\n            max_value=1e2,\n        )\n        self.parameters[""Zs""] = Parameter(\n            name=""Zs"",\n            value=4.022881,\n            description=""Number of stickers per chain"",\n            type=ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=0,\n            max_value=100,\n        )\n        self.parameters[""Ze""] = Parameter(\n            name=""Ze"",\n            value=10.49686,\n            description=""Number of entanglements"",\n            type=ParameterType.real,\n            opt_type=OptType.opt,\n            min_value=0,\n            max_value=100,\n        )\n        self.parameters[""alpha""] = Parameter(\n            name=""alpha"",\n            value=10,\n            description=""CLF parameter"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n\n    def g_descloizeaux(self, x, tol):\n        N = len(x)\n        gx = np.zeros(len(x))  # output array\n        for n in range(0, N):\n            err = 2 * tol  # initialise error\n            m = 0\n            while err > tol:\n                m += 1\n                m2 = m * m\n                dgx = (1 - np.exp(-m2 * x[n])) / m2\n                gx[n] += dgx\n                err = dgx / gx[n]\n        return gx\n\n    def calculate(self, f=None):\n        """"""\n \n        STICKY-REPTATION MODEL FOR LINEAR VISCOELASTICITY\n\n          PARAMETERS:\n          > Ge    - elastic modulus\n          > tau_s - sticker dissociation time\n          > Zs    - number of stickers per chain\n          > Ze    - number of entanglements per chain\n          > alpha - magnitude of the contour-length fluctuations in the\n                    double-reptation model. This is principle a universal\n                    dimensionless number with a value around ~10.\n          IMPORTANT: \n          I. This sticky-reptation model assumes high Rouse frequencies\n             not to affect the rheology at times of the order of the \n             sticker time, due to which the rheology is independent \n             of both the elementary (non-sticky) Rouse time, tau0, \n             and the degree of polymerisation, N. See below.\n          II. The results may be affected by numerical approximations,\n             see below.\n\n          I. MODEL APPROXIMATION:\n          1: The reptation time and Rouse relaxation after sticker \n             dissociation are approximate. After sticker dissociation \n             a strand of length N/Zs relaxes (a factor of two, to \n             represent a strand of twice that length relaxes) is \n             ignored. The reptation time is taken tau_rep=tau_s Zs^2*Ze,\n             with the prefactor 3 ignored.\n          2. The model assumes that the sticker dissociation time tau_s\n             is much larger than tau0*(N/Zs)^2. The shape of the sticker\n             plateau in G\' and G\'\' is therefore not affected by the \n             early-time Rouse relaxation, and is independent of tau0 and\n             N: Including the high frequencies requires tau0 and N as\n             additional parameters.\n\n          II. NUMERICAL SETTINGS:\n          Some numerical \n          1. The infinite sums in the double-reptation model are\n             truncated using a numerical tolerance level.\n          2. To transform G(t) to G\'(w) and G\'\'(w) a time range with\n             a finite number of samples is defined. The time range\n             and number of samples may affect the results. """"""\n\n        # ---------------------------------------------\n        # FUNCTION INPUT\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        w = ft.data[:, 0]  # angular frequency [rad/s]\n\n        Ge = self.parameters[""Ge""].value\n        tau_s = self.parameters[""tau_s""].value\n        Zs = self.parameters[""Zs""].value\n        Ze = self.parameters[""Ze""].value\n        alpha = self.parameters[""alpha""].value\n        # END FUNCTION INPUT\n        # ---------------------------------------------\n\n        # ---------------------------------------------\n        # NUMERICAL SETTINGS\n        # 1. Double reptation\n        tol = 1e-3  # tolerance to truncate infinite sums\n        # 2. Transform of G(t) to G\'(w) and G\'\'(w)\n        tmin = 0.1 / max(w)  # shortest time outside omega interval\n        tmax = 10 / min(w)  # largest  time outside omega interval\n        ntime = 100  # number of time points\n        # END NUMERICAL SETTINGS\n        # ---------------------------------------------\n\n        # ---------------------------------------------\n        # CALCULATE RELAXATION MODULUS\n        # time range [s] to calculate relaxation modulus G(t)\n        t = np.logspace(np.log10(tmin), np.log10(tmax), ntime)\n\n        # - - - - - - - - - - - - - - - - - - - - - - -\n        # CALCULATE STICKY-ROUSE RELAXATION MODULUS\n        GSR = 0  # initialise output\n        tau_srouse = (\n            tau_s * (Zs) ** 2\n        )  # Sticky-Rouse time of the strand that relaxes after sticker dissociation.\n        tS = t / tau_srouse\n        dsum = 0.0\n        for q in range(1, int(Zs) + 1):\n            if q < Ze:\n                GSR += 0.2 * np.exp(-tS * q ** 2)\n                dsum += 0.2\n            else:\n                GSR += np.exp(-tS * q ** 2)\n                dsum += 1\n\n            # Normalise (verified using the asymptotic value of G(t)\n            #            for short times, t->0.)\n        GSR *= Zs / (dsum * Ze)\n\n        # - - - - - - - - - - - - - - - - - - - - - - -\n        # CALCULATE DOUBLE-REPTATION RELAXATION MODULUS\n        GREP = np.zeros(len(t))  # initialise output\n        tau_rep = Ze * tau_srouse  # sticky-reptation time\n        tR = t / tau_rep  # Time in units of reptation time\n        H = Ze / alpha  # Prefactor in des Cloizeaux model\n        Ut = tR + self.g_descloizeaux(H * tR, tol) / H\n\n        for n in range(0, len(Ut)):\n            err = 2 * tol\n            q = -1\n            while err > tol:  # truncate infinite sum when tolerance is met\n                q += 2  # sum only over odd values of q\n                q2 = q * q\n                dGrep = np.exp(-q2 * Ut[n]) / q2\n                GREP[n] += dGrep\n                err = dGrep / GREP[n]\n        GREP = (GREP * 8 / np.pi ** 2) ** 2\n\n        # Relaxation modulus G(t) = sum of Sticky Rouse and Reptation\n        G = Ge * (GSR + GREP)\n        # END CALCULATE RELAXATION MODULUS\n        # ---------------------------------------------\n\n        # ---------------------------------------------\n        # GET DYNAMIC MODULI G(w) from G(t)\n        f = interpolate.interp1d(\n            t, G, kind=""cubic"", assume_sorted=True, fill_value=""extrapolate""\n        )\n        g0 = f(0)\n        ind1 = np.argmax(t > 0)\n        t1 = t[ind1]\n        g1 = G[ind1]\n        tinf = np.max(t)\n        wp = np.logspace(np.log10(1 / tinf), np.log10(1 / t1), ntime)\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ntime\n        G1G2 = np.zeros((ntime, 3))\n        G1G2[:, 0] = wp[:]\n\n        coeff = (G[ind1 + 1 :] - G[ind1:-1]) / (t[ind1 + 1 :] - t[ind1:-1])\n        for i, w in enumerate(wp):\n\n            G1G2[i, 1] = (\n                g0\n                + np.sin(w * t1) * (g1 - g0) / w / t1\n                + np.dot(coeff, -np.sin(w * t[ind1:-1]) + np.sin(w * t[ind1 + 1 :])) / w\n            )\n\n            G1G2[i, 2] = (\n                -(1 - np.cos(w * t1)) * (g1 - g0) / w / t1\n                - np.dot(coeff, np.cos(w * t[ind1:-1]) - np.cos(w * t[ind1 + 1 :])) / w\n            )\n\n        # STORE THE FUNCTION IN SOME OTHER TEMPORARY ARRAY\n        # INTERPOLATE IT SO THAT THE OMEGA RANGE AND POINTS ARE THE SAME AS IN THE EXPERIMENTAL DATA\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((ft.num_rows, ft.num_columns))\n        f1 = interpolate.interp1d(\n            wp, G1G2[:, 1], kind=""cubic"", assume_sorted=True, fill_value=""extrapolate""\n        )\n        f2 = interpolate.interp1d(\n            wp, G1G2[:, 2], kind=""cubic"", assume_sorted=True, fill_value=""extrapolate""\n        )\n        tt.data[:, 0] = ft.data[:, 0]\n        tt.data[:, 1] = f1(ft.data[:, 0])\n        tt.data[:, 2] = f2(ft.data[:, 0])\n\n\nclass CLTheoryStickyReptation(BaseTheoryStickyReptation, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # This class usually stays empty\n\n\nclass GUITheoryStickyReptation(BaseTheoryStickyReptation, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # add widgets specific to the theory here:\n'"
RepTate/theories/TheoryTTS.py,19,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryTTS\n\nModule for the pseudo theory for Time-Temperature superposition shift of LVE data.\n\n""""""\nimport os\nimport time\nimport getpass\nimport numpy as np\nfrom scipy import interp\nfrom scipy.optimize import minimize, curve_fit\nfrom scipy.stats import distributions\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom PyQt5.QtWidgets import QToolBar, QFileDialog, QMessageBox\nfrom PyQt5.QtCore import QSize\nfrom PyQt5.QtGui import QIcon\nimport RepTate\n\nclass TheoryWLFShift(CmdBase):\n    """"""Time-temperature superposition based on a Williams-Landel-Ferry (WLF) equation with two parameters.\n\n    * **Function**\n        .. math::\n            \\\\begin{eqnarray}\n            \\\\omega(T_r) &= & a_T \\\\omega(T) \\\\\\\\\n            G(T_r) &= & b_T G(T) \\\\\\\\\n            \\\\log_{10} a_T &= & \\\\frac{-B_1 (T-T_r)}{(B_2+T_r)(B_2+T)} \\\\\\\\\n            b_T &= & \\\\frac{\\\\rho(T_r)T_r}{\\\\rho(T)T} = \\\\frac{(1+\\\\alpha T)(T_r+273.15)}{(1+\\\\alpha T_r)(T+273.15)} \\\\\\\\\n            T_g &= &T_g^\\\\infty - \\\\frac{C_{T_g}}{M_w}\n            \\\\end{eqnarray}\n\n    * **Parameters**\n       - :math:`T_r`: Reference temperature to which the experimental data will be shifted.\n       - :math:`B_1`: Material parameter, corresponding to :math:`C_1\\cdot C_2`, with :math:`C_1` and :math:`C_2` being the standard WLF material parameters.\n       - :math:`B_2`: Material parameter, corresponding to :math:`C_2-T_r`, :math:`C_2` being the standard WLF material parameter.\n       - logalpha: Decimal logarithm of the thermal expansion coefficient of the polymer at 0 \xc2\xb0C.\n       - :math:`C_{T_g}`: Material parameter that describes the dependence of :math:`T_g` with :math:`M_w`.\n       - dx12: Fraction of 1-2 (vynil) units (valid for polybutadiene).\n\n    """"""\n\n    thname = ""WLF Shift""\n    description = ""TTS shift based on the WLF equation""\n    citations = []\n    doi = []\n\n    def __new__(cls, name="""", parent_dataset=None, ax=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryWLFShift(name, parent_dataset, ax)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryWLFShift(name, parent_dataset, ax)\n        )\n\n\nclass BaseTheoryWLFShift:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/TTS/Theory/theory.html#williams-landel-ferry-tts-shift""\n    single_file = False\n    thname = TheoryWLFShift.thname\n    citations = TheoryWLFShift.citations\n    doi = TheoryWLFShift.doi\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n        self.function = self.TheoryWLFShift\n        self.parameters[""Tr""] = Parameter(\n            name=""Tr"",\n            value=25,\n            description=""Reference T to WLF shift the data to"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""B1""] = Parameter(\n            name=""B1"",\n            value=850,\n            description=""Material parameter B1 for WLF Shift"",\n            type=ParameterType.real,\n            opt_type=OptType.opt,\n        )\n        self.parameters[""B2""] = Parameter(\n            name=""B2"",\n            value=126,\n            description=""Material parameter B2 for WLF Shift"",\n            type=ParameterType.real,\n            opt_type=OptType.opt,\n        )\n        self.parameters[""logalpha""] = Parameter(\n            name=""logalpha"",\n            value=-3.18,\n            description=""Log_10 of the thermal expansion coefficient at 0 \xc2\xb0C"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""CTg""] = Parameter(\n            name=""CTg"",\n            value=14.65,\n            description=""Molecular weight dependence of Tg"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""dx12""] = Parameter(\n            name=""dx12"",\n            value=0,\n            description=""Fraction 1,2 vinyl units (for PBd)"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""vert""] = Parameter(\n            name=""vert"",\n            value=True,\n            description=""Shift vertically"",\n            type=ParameterType.boolean,\n            opt_type=OptType.const,\n            display_flag=False,\n        )\n        self.parameters[""iso""] = Parameter(\n            name=""iso"",\n            value=True,\n            description=""Isofrictional state"",\n            type=ParameterType.boolean,\n            opt_type=OptType.const,\n            display_flag=False,\n        )\n\n        self.get_material_parameters()\n        self.shift_factor_dic = {}\n\n    def TheoryWLFShift(self, f=None):\n        """"""Calculate the theory""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n\n        Tr = self.parameters[""Tr""].value\n        B1 = self.parameters[""B1""].value\n        B2 = self.parameters[""B2""].value\n        alpha = np.power(10.0, self.parameters[""logalpha""].value)\n        CTg = self.parameters[""CTg""].value\n        dx12 = self.parameters[""dx12""].value\n        iso = self.parameters[""iso""].value\n        vert = self.parameters[""vert""].value\n\n        Tf = f.file_parameters[""T""]\n        Mw = f.file_parameters[""Mw""]\n\n        # Trying a new expression for the shift\n        if iso:\n            B2 += CTg / Mw - 68.7 * dx12\n            Trcorrected = Tr - CTg / Mw + 68.7 * dx12\n        else:\n            Trcorrected = Tr\n        aT = np.power(10.0, -B1 * (Tf - Trcorrected) / (B2 + Trcorrected) / (B2 + Tf))\n        tt.data[:, 0] = ft.data[:, 0] * aT\n\n        if vert:\n            bT = (1 + alpha * Tf) * (Tr + 273.15) / (1 + alpha * Tr) / (Tf + 273.15)\n        else:\n            bT = 1\n        tt.data[:, 1] = ft.data[:, 1] * bT\n        tt.data[:, 2] = ft.data[:, 2] * bT\n        self.shift_factor_dic[f.file_name_short] = [Tf, aT, bT, Mw]\n\n    def do_error(self, line):\n        """"""Override the error calculation for TTS\n\n        The error is calculated as the vertical distance between theory points, in the current view,\\\n        calculated over all possible pairs of theory tables, when the theories overlap in the horizontal direction and\\\n        they correspond to files with the same Mw (if the parameters Mw2 and phi exist, their values are also\n        used to classify the error). 1/2 of the error is added to each file.\n        Report the error of the current theory on all the files.\\n\\\n        File error is calculated as the mean square of the residual, averaged over all calculated points in the shifted tables.\\n\\\n        Total error is the mean square of the residual, averaged over all points considered in all files.\n\n        """"""\n        total_error = 0\n        npoints = 0\n        view = self.parent_dataset.parent_application.current_view\n        nfiles = len(self.parent_dataset.files)\n        file_error = np.zeros(nfiles)\n        file_points = np.zeros(nfiles, dtype=np.int)\n        xth = []\n        yth = []\n        Mw = []\n        xmin = np.zeros((nfiles, view.n))\n        xmax = np.zeros((nfiles, view.n))\n        for i in range(nfiles):\n            Filei = self.parent_dataset.files[i]\n            Mwi = Filei.file_parameters[""Mw""]\n            if ""Mw2"" in Filei.file_parameters:\n                Mw2i = Filei.file_parameters[""Mw2""]\n            else:\n                Mw2i = 0\n            if ""phi"" in Filei.file_parameters:\n                phii = Filei.file_parameters[""phi""]\n            else:\n                phii = 0\n            if ""phi2"" in Filei.file_parameters:\n                phi2i = Filei.file_parameters[""phi2""]\n            else:\n                phi2i = 0\n            xthi, ythi, success = view.view_proc(\n                self.tables[Filei.file_name_short], Filei.file_parameters\n            )\n            # We need to sort arrays\n            for k in range(view.n):\n                x = xthi[:, k]\n                p = x.argsort()\n                xthi[:, k] = xthi[p, k]\n                ythi[:, k] = ythi[p, k]\n            xth.append(xthi)\n            yth.append(ythi)\n            Mw.append((Mwi, Mw2i, phii, phi2i))\n\n            xmin[i, :] = np.amin(xthi, 0)\n            xmax[i, :] = np.amax(xthi, 0)\n\n        MwUnique = {}\n        p = list(set(Mw))\n        for o in p:\n            MwUnique[o] = [0.0, 0]\n\n        for i in range(nfiles):\n            for j in range(i + 1, nfiles):\n                if Mw[i] != Mw[j]:\n                    continue\n                for k in range(view.n):\n                    condition = (xth[j][:, k] > xmin[i, k]) * (\n                        xth[j][:, k] < xmax[i, k]\n                    )\n                    x = np.extract(condition, xth[j][:, k])\n                    y = np.extract(condition, yth[j][:, k])\n                    yinterp = interp(x, xth[i][:, k], yth[i][:, k])\n                    error = np.sum((yinterp - y) ** 2)\n                    npt = len(y)\n                    total_error += error\n                    npoints += npt\n                    MwUnique[Mw[i]][0] += error\n                    MwUnique[Mw[i]][1] += npt\n\n        if line == """":\n            # table=\'\'\'<table border=""1"" width=""100%"">\'\'\'\n            # table+=\'\'\'<tr><th>Mw</th><th>Mw2</th><th>phi</th><th>phi2</th><th>Error</th><th># Pts.</th></tr>\'\'\'\n            table = [\n                [\n                    ""%-12s"" % ""Mw"",\n                    ""%-12s"" % ""Mw2"",\n                    ""%-12s"" % ""phi"",\n                    ""%-12s"" % ""phi2"",\n                    ""%-12s"" % ""Error"",\n                    ""%-12s"" % ""# Pts."",\n                ],\n            ]\n            p = list(MwUnique.keys())\n            p.sort()\n            for o in p:\n                if MwUnique[o][1] > 0:\n                    # table+=\'\'\'<tr><td>%4g</td><td>%4g</td><td>%4g</td><td>%4g</td><td>%8.3g</td><td>(%5d)</td></tr>\'\'\'%(o[0], o[1], o[2], o[3], MwUnique[o][0] / MwUnique[o][1], MwUnique[o][1])\n                    table.append(\n                        [\n                            ""%-12.4g"" % o[0],\n                            ""%-12.4g"" % o[1],\n                            ""%-12.4g"" % o[2],\n                            ""%-12.4g"" % o[3],\n                            ""%-12.3g"" % (MwUnique[o][0] / MwUnique[o][1]),\n                            ""%-12d"" % MwUnique[o][1],\n                        ]\n                    )\n                else:\n                    # table+=\'\'\'<tr><td>%4g</td><td>%4g</td><td>%4g</td><td>%4g</td><td>%s</td><td>(%5d)</td></tr>\'\'\'%(o[0], o[1], o[2], o[3], ""-"", MwUnique[o][1])\n                    table.append(\n                        [\n                            ""%-12.4g"" % o[0],\n                            ""%-12.4g"" % o[1],\n                            ""%-12.4g"" % o[2],\n                            ""%-12.4g"" % o[3],\n                            ""%-12s"" % ""-"",\n                            ""%-12d"" % MwUnique[o][1],\n                        ]\n                    )\n            # table+=\'\'\'</table><br>\'\'\'\n            self.Qprint(table)\n\n        if npoints > 0:\n            total_error /= npoints\n        else:\n            total_error = 1e10\n        if line == """":\n            self.Qprint(""<b>TOTAL ERROR</b>: %12.5g (%6d)<br>"" % (total_error, npoints))\n        if line == """":\n            self.Qprint("""")\n            B1 = self.parameters[""B1""].value\n            B2 = self.parameters[""B2""].value\n            Tr = self.parameters[""Tr""].value\n            self.Qprint(""<h3>WLF Params @ Tr = %g</h3>"" % Tr)\n            self.Qprint(""<b>C1</b> = %g"" % (B1 / (B2 + Tr)))\n            self.Qprint(""<b>C2</b> = %g<br>"" % (B2 + Tr))\n\n        return total_error\n\n    def func_fitTTS(self, *param_in):\n        """"""Override the fit function""""""\n        ind = 0\n        k = list(self.parameters.keys())\n        k.sort()\n        for p in k:\n            par = self.parameters[p]\n            if par.opt_type == OptType.opt:\n                par.value = param_in[0][ind]\n                ind += 1\n        self.do_calculate("""", timing=False)\n        error = self.do_error(""none"")\n        return error\n\n    def do_fit(self, line):\n        """"""Minimize the error""""""\n        self.is_fitting = True\n        start_time = time.time()\n        # view = self.parent_dataset.parent_application.current_view\n        self.Qprint(""""""<hr><h2>Parameter Fitting</h2>"""""")\n        self.shift_factor_dic = {}\n        # Mount the vector of parameters (Active ones only)\n        initial_guess = []\n        k = list(self.parameters.keys())\n        k.sort()\n        for p in k:\n            par = self.parameters[p]\n            if par.opt_type == OptType.opt:\n                initial_guess.append(par.value)\n        if not initial_guess:\n            self.Qprint(""No parameter to minimize"")\n            return\n        opt = dict(return_full=True)\n        self.nfev = 0\n\n        res = minimize(self.func_fitTTS, initial_guess, method=""Nelder-Mead"")\n\n        if not res[""success""]:\n            self.Qprint(""Solution not found: %s"" % res[""message""])\n            return\n\n        self.Qprint(""<b>%g</b> function evaluations"" % (res[""nfev""]))\n\n        ind = 0\n        # table=\'\'\'<table border=""1"" width=""100%"">\'\'\'\n        # table+=\'\'\'<tr><th>Parameter</th><th>Value</th></tr>\'\'\'\n        table = [\n            [""%-18s"" % ""Parameter"", ""%-18s"" % ""Value""],\n        ]\n\n        for p in k:\n            par = self.parameters[p]\n            if par.opt_type == OptType.opt:\n                ind += 1\n                # table+=\'\'\'<tr><td>%s</td><td>%10.4g</td></tr>\'\'\'%(par.name, par.value)\n                table.append([""%-18s"" % par.name, ""%-18.4g"" % par.value])\n            else:\n                # table+=\'\'\'<tr><td>%s</td><td>%10.4g</td></tr>\'\'\'%(par.name, par.value)\n                pass\n        # table+=\'\'\'</table><br>\'\'\'\n        self.Qprint(table)\n        self.is_fitting = False\n        self.do_calculate(line, timing=False)\n        self.Qprint(\n            """"""<i>---Fitted in %.3g seconds---</i><br>"""""" % (time.time() - start_time)\n        )\n\n    def do_print(self, line):\n        """"""Print the theory table associated with the given file name""""""\n        if line in self.tables:\n            print(self.tables[line].data)\n        else:\n            print(\'Theory table for ""%s"" not found\' % line)\n\n    def complete_print(self, text, line, begidx, endidx):\n        """"""Complete the print command""""""\n        file_names = list(self.tables.keys())\n        if not text:\n            completions = file_names[:]\n        else:\n            completions = [f for f in file_names if f.startswith(text)]\n        return completions\n\n    def do_save(self, line, extra_txt=""""):\n        """"""Save the results from WLFShift theory predictions to a TTS file""""""\n        nfiles = len(self.parent_dataset.files)\n        Mw = []\n        for i in range(nfiles):\n            Filei = self.parent_dataset.files[i]\n            Mwi = Filei.file_parameters[""Mw""]\n            if ""Mw2"" in Filei.file_parameters:\n                Mw2i = Filei.file_parameters[""Mw2""]\n            else:\n                Mw2i = 0\n            if ""phi"" in Filei.file_parameters:\n                phii = Filei.file_parameters[""phi""]\n            else:\n                phii = 0\n            if ""phi2"" in Filei.file_parameters:\n                phi2i = Filei.file_parameters[""phi2""]\n            else:\n                phi2i = 0\n            Mw.append((Mwi, Mw2i, phii, phi2i))\n        MwUnique = list(set(Mw))\n        MwUnique.sort()\n\n        counter = 0\n        for m in MwUnique:\n            data = np.zeros(0)\n            fparam = {}\n            for i in range(nfiles):\n                if Mw[i] == m:\n                    Filei = self.parent_dataset.files[i]\n                    ttable = self.tables[Filei.file_name_short]\n                    T_array = np.full((ttable.num_rows, 1), Filei.file_parameters[""T""])\n                    data = np.append(data, np.append(ttable.data, T_array, axis=1))\n                    data = np.reshape(data, (-1, ttable.num_columns + 1))\n                    fparam.update(Filei.file_parameters)\n            data = data[data[:, 0].argsort()]\n            fparam[""T""] = self.parameters[""Tr""].value\n\n            try:\n                chem_name = ""%s_"" % fparam[""chem""]\n            except KeyError:\n                chem_name = """"\n\n            if line == """":\n                ofilename = (\n                    os.path.dirname(self.parent_dataset.files[0].file_full_path)\n                    + os.sep\n                    + chem_name\n                    + ""Mw""\n                    + str(m[0])\n                    + ""k""\n                    + ""_Mw2""\n                    + str(m[1])\n                    + ""_phi""\n                    + str(m[2])\n                    + ""_phiB""\n                    + str(m[3])\n                    + str(fparam[""T""])\n                    + "".tts""\n                )\n            else:\n                ofilename = (\n                    line\n                    + os.sep\n                    + chem_name\n                    + ""Mw""\n                    + str(m[0])\n                    + ""k""\n                    + ""_Mw2""\n                    + str(m[1])\n                    + ""_phi""\n                    + str(m[2])\n                    + ""_phiB""\n                    + str(m[3])\n                    + str(fparam[""T""])\n                    + extra_txt\n                    + "".tts""\n                )\n            fout = open(ofilename, ""w"")\n            for i in sorted(fparam):\n                fout.write(i + ""="" + str(fparam[i]) + "";"")\n            k = list(self.parameters.keys())\n            k.sort()\n            for i in k:\n                fout.write(i + ""="" + str(self.parameters[i].value) + "";"")\n            fout.write(""\\n"")\n            fout.write(""# Master curve predicted with WLF Theory\\n"")\n            fout.write(\n                ""# Date: ""\n                + time.strftime(""%Y-%m-%d %H:%M:%S"")\n                + "" - User: ""\n                + getpass.getuser()\n                + ""\\n""\n            )\n            k = Filei.file_type.col_names\n            for i in k:\n                fout.write(i + ""\\t"")\n            fout.write(""T \\t\\n"")\n            for i in range(data.shape[0]):\n                for j in range(data.shape[1]):\n                    fout.write(str(data[i, j]) + ""\\t"")\n                fout.write(""\\n"")\n            fout.close()\n            counter += 1\n\n        # print information\n        msg = \'Saved %d TTS file(s) in ""%s""\' % (counter, line)\n        if CmdBase.mode == CmdMode.GUI:\n            QMessageBox.information(self, ""Save TTS"", msg)\n        else:\n            print(msg)\n\n\nclass CLTheoryWLFShift(BaseTheoryWLFShift, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n\nclass GUITheoryWLFShift(BaseTheoryWLFShift, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n        # add widgets specific to the theory\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n        self.verticalshift = tb.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-vertical-shift.png""),\n            ""Vertical shift"",\n        )\n        self.verticalshift.setCheckable(True)\n        self.verticalshift.setChecked(True)\n        self.isofrictional = tb.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-iso.png""),\n            ""Shift to isofrictional state"",\n        )\n        self.isofrictional.setCheckable(True)\n        self.isofrictional.setChecked(True)\n        self.saveShiftFactors = tb.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-save-ShiftFactors.png""),\n            ""Save shift factors"",\n        )\n        self.arrhe_tb = tb.addAction(\n            QIcon("":/Icon8/Images/new_icons/activation_energy.png""),\n            ""Print Arrhenius activation energy"",\n        )\n        # self.savemaster = tb.addAction(self.style().standardIcon(\n        #     getattr(QStyle, \'SP_DialogSaveButton\')), \'Save Master Curve\')\n        self.thToolsLayout.insertWidget(0, tb)\n        connection_id = self.verticalshift.triggered.connect(self.do_vertical_shift)\n        connection_id = self.isofrictional.triggered.connect(self.do_isofrictional)\n        connection_id = self.saveShiftFactors.triggered.connect(self.save_shift_factors)\n        connection_id = self.arrhe_tb.triggered.connect(self.print_activation_energy)\n        # connection_id = self.savemaster.triggered.connect(self.do_save_dialog)\n        self.dir_start = os.path.join(RepTate.root_dir, ""data"")\n\n    def print_activation_energy(self):\n        # Evaluate activation ennergy from Arrhenius fit\n        M_set = list(set([l[-1] for l in self.shift_factor_dic.values()]))\n\n        def f(invT, Ea):\n            return Ea / 8.314 * (invT - 1 / (273.15 + self.parameters[""Tr""].value))\n\n        Ea_list = []\n        for M in M_set:\n            invT = []\n            lnaT = []\n            for s in self.shift_factor_dic.values():\n                if s[-1] == M:\n                    invT.append(1 / (273.15 + s[0]))\n                    lnaT.append(np.log(s[1]))\n            popt, pcov = curve_fit(f, invT, lnaT, p0=[1e3])\n            alpha = 0.05  # 95% confidence interval = 100*(1-alpha)\n            n = len(invT)  # number of data points\n            p = 1  # number of parameters\n            dof = max(0, n - p)  # number of degrees of freedom\n            # student-t value for the dof and confidence level\n            tval = distributions.t.ppf(1.0 - alpha / 2.0, dof)\n            Ea_list.append((M, popt[0] / 1e3, np.sqrt(np.diag(pcov))[0] * tval / 1e3))\n        if len(M_set) == 1:\n            self.Qprint(\n                ""<h3>Arrhenius Ea = %.3g \xc2\xb1 %.3g kJ/mol</h3>""\n                % (popt[0] / 1e3, np.sqrt(np.diag(pcov))[0] * tval / 1e3)\n            )\n        else:\n            table = [\n                [""Mw"", ""Ea (kJ/mol)""],\n            ]\n            for items in Ea_list:\n                table.append([""%s"" % items[0], ""%.3g \xc2\xb1 %.3g"" % (items[1], items[2])])\n            self.Qprint(table)\n\n    def do_vertical_shift(self):\n        self.set_param_value(""vert"", self.verticalshift.isChecked())\n\n    def do_isofrictional(self):\n        self.set_param_value(""iso"", self.isofrictional.isChecked())\n\n    # def do_save_dialog(self):\n    #     folder = str(\n    #         QFileDialog.getExistingDirectory(\n    #             self, ""Select Directory to save Master curves""))\n    #     self.do_save(folder)\n    def save_shift_factors(self):\n        dilogue_name = ""Select Folder for Saving Shift Factors""\n        folder = QFileDialog.getExistingDirectory(self, dilogue_name, self.dir_start)\n        if not os.path.isdir(folder):\n            return\n        self.dir_start = folder\n        nsaved = 0\n        Mw_list = []\n        for f in self.parent_dataset.files:\n            if f.active:\n                Mw_list.append(f.file_parameters[""Mw""])\n        Mw_list = set(Mw_list)\n        for Mw in Mw_list:\n            flag_first = True\n            list_out = []\n            with open(\n                os.path.join(folder, ""shift_factors_Mw%s.ttsf"" % Mw), ""w""\n            ) as fout:\n                for f in self.parent_dataset.files:\n                    if f.active and f.file_parameters[""Mw""] == Mw:\n                        if flag_first:\n                            # write file header\n                            for pname in f.file_parameters:\n                                if pname != ""T"":\n                                    fout.write(\n                                        ""%s=%s;"" % (pname, f.file_parameters[pname])\n                                    )\n                            fout.write(""\\n"")\n                            fout.write(""%-12s %-12s %-12s\\n"" % (""T"", ""aT"", ""bT""))\n                            fout.write(""%-12s %-12s %-12s\\n"" % (""[\xc2\xb0C]"", ""[-]"", ""[-]""))\n                            nsaved += 1\n                            flag_first = False\n                        T, aT, bT, _ = self.shift_factor_dic[f.file_name_short]\n                        list_out.append((T, aT, bT))\n                list_out.sort()\n                for (T, aT, bT) in list_out:\n                    fout.write(""%-12g %-12g %-12g\\n"" % (T, aT, bT))\n\n        msg = \'Saved %d shift parameter file(s) in ""%s""\' % (nsaved, folder)\n        if CmdBase.mode == CmdMode.GUI:\n            QMessageBox.information(self, ""Saved Files"", msg)\n        else:\n            print(msg)\n'"
RepTate/theories/TheoryTTS_Automatic.py,45,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryTTS_Automatic\n\nModule for the pseudo theory for Time-Temperature superposition shift of LVE data.\n\n""""""\nimport os\nimport time\nimport getpass\nimport numpy as np\nfrom os.path import join, isdir\nfrom scipy import interp\nfrom scipy.optimize import minimize, curve_fit\nfrom scipy.stats import distributions\nimport RepTate\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom PyQt5.QtWidgets import QToolBar, QFileDialog, QComboBox, QMessageBox\nfrom PyQt5.QtCore import QSize\nfrom PyQt5.QtGui import QIcon\n\n\nclass TheoryTTSShiftAutomatic(CmdBase):\n    """"""Automatic Time-temperature superposition of experimental data.\n\n    * **Parameters**\n       - This theory has no parameters.\n\n    """"""\n\n    thname = ""Automatic TTS Shift""\n    description = ""Shift data automatically for best overlap""\n    citations = []\n    doi = []\n\n    def __new__(cls, name="""", parent_dataset=None, ax=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryTTSShiftAutomatic(name, parent_dataset, ax)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryTTSShiftAutomatic(name, parent_dataset, ax)\n        )\n\n\nclass BaseTheoryTTSShiftAutomatic:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/TTS/Theory/theory.html#automatic-tts-shift""\n    single_file = False\n    thname = TheoryTTSShiftAutomatic.thname\n    citations = TheoryTTSShiftAutomatic.citations\n    doi = TheoryTTSShiftAutomatic.doi\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n        self.function = self.TheoryTTSShiftAutomatic\n\n        self.parameters[""T""] = Parameter(\n            name=""T"",\n            value=25,\n            description=""Temperature to shift to, in \xc2\xb0C"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n            display_flag=False,\n        )\n        self.parameters[""vert""] = Parameter(\n            name=""vert"",\n            value=True,\n            description=""Shift vertically"",\n            type=ParameterType.boolean,\n            opt_type=OptType.const,\n            display_flag=False,\n        )\n        self.Mwset, self.Mw, self.Tdict = self.get_cases()\n        self.current_master_curve = None\n        self.current_table = None\n        self.current_file_min = None\n        self.shiftParameters = {}\n        self.aT_vs_T = {}\n        for k in self.tables.keys():\n            self.shiftParameters[k] = (0.0, 0.0)  # log10 of horizontal, then vertical\n\n    def TheoryTTSShiftAutomatic(self, f=None):\n        """"""Calculate the theory""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n\n        try:\n            H, V = self.shiftParameters[f.file_name_short]\n        except KeyError:\n            # table did not exixt when the TH was opened\n            H, V = self.shiftParameters[f.file_name_short] = (0, 0)\n\n        tt.data[:, 0] = ft.data[:, 0] * np.power(10.0, H)\n        tt.data[:, 1] = ft.data[:, 1] * np.power(10.0, V)\n        tt.data[:, 2] = ft.data[:, 2] * np.power(10.0, V)\n\n    def get_cases(self):\n        """"""Get all different samples in the dataset\n\n           Samples are different if Mw, Mw2, phi, phi2 are different\n        """"""\n        nfiles = len(self.parent_dataset.files)\n        Mw = []\n        Tlist = []\n\n        for i in range(nfiles):\n            Filei = self.parent_dataset.files[i]\n            Mwi = Filei.file_parameters[""Mw""]\n            if ""Mw2"" in Filei.file_parameters:\n                Mw2i = Filei.file_parameters[""Mw2""]\n            else:\n                Mw2i = 0\n            if ""phi"" in Filei.file_parameters:\n                phii = Filei.file_parameters[""phi""]\n            else:\n                phii = 0\n            if ""phi2"" in Filei.file_parameters:\n                phi2i = Filei.file_parameters[""phi2""]\n            else:\n                phi2i = 0\n            Ti = Filei.file_parameters[""T""]\n            Mw.append((Mwi, Mw2i, phii, phi2i))\n            Tlist.append(Ti)\n\n        p = list(set(Mw))\n        Tdict = {}\n        for c in p:\n            Tdict[c] = []\n        for i in range(nfiles):\n            Filei = self.parent_dataset.files[i]\n            Tdict[Mw[i]].append([Tlist[i], i, Filei.file_name_short, Filei])\n        return p, Mw, Tdict\n\n    def do_error(self, line):\n        """"""Override the error calculation for TTS\n\n        The error is calculated as the vertical distance between theory points, in the current view,\\\n        calculated over all possible pairs of theory tables, when the theories overlap in the horizontal direction and\\\n        they correspond to files with the same Mw (if the parameters Mw2 and phi exist, their values are also\n        used to classify the error). 1/2 of the error is added to each file.\n        Report the error of the current theory on all the files.\\n\\\n        File error is calculated as the mean square of the residual, averaged over all calculated points in the shifted tables.\\n\\\n        Total error is the mean square of the residual, averaged over all points considered in all files.\n\n        """"""\n        total_error = 0\n        npoints = 0\n        view = self.parent_dataset.parent_application.current_view\n        nfiles = len(self.parent_dataset.files)\n        file_error = np.zeros(nfiles)\n        file_points = np.zeros(nfiles, dtype=np.int)\n        xth = []\n        yth = []\n        xmin = np.zeros((nfiles, view.n))\n        xmax = np.zeros((nfiles, view.n))\n        for i in range(nfiles):\n            Filei = self.parent_dataset.files[i]\n            xthi, ythi, success = view.view_proc(\n                self.tables[Filei.file_name_short], Filei.file_parameters\n            )\n            # We need to sort arrays\n            for k in range(view.n):\n                x = xthi[:, k]\n                p = x.argsort()\n                xthi[:, k] = xthi[p, k]\n                ythi[:, k] = ythi[p, k]\n            xth.append(xthi)\n            yth.append(ythi)\n\n            xmin[i, :] = np.amin(xthi, 0)\n            xmax[i, :] = np.amax(xthi, 0)\n\n        # Mwset, Mw, Tdict = self.get_cases()\n        MwUnique = {}\n        for o in self.Mwset:\n            MwUnique[o] = [0.0, 0]\n\n        for i in range(nfiles):\n            for j in range(i + 1, nfiles):\n                if self.Mw[i] != self.Mw[j]:\n                    continue\n                for k in range(view.n):\n                    condition = (xth[j][:, k] > xmin[i, k]) * (\n                        xth[j][:, k] < xmax[i, k]\n                    )\n                    x = np.extract(condition, xth[j][:, k])\n                    y = np.extract(condition, yth[j][:, k])\n                    yinterp = interp(x, xth[i][:, k], yth[i][:, k])\n                    error = np.sum((yinterp - y) ** 2)\n                    npt = len(y)\n                    total_error += error\n                    npoints += npt\n                    MwUnique[self.Mw[i]][0] += error\n                    MwUnique[self.Mw[i]][1] += npt\n\n        if line == """":\n            # table=\'\'\'<table border=""1"" width=""100%"">\'\'\'\n            # table+=\'\'\'<tr><th>Mw</th><th>Mw2</th><th>phi</th><th>phi2</th><th>Error</th><th># Pts.</th></tr>\'\'\'\n            table = [\n                [\n                    ""%-12s"" % ""Mw"",\n                    ""%-12s"" % ""Mw2"",\n                    ""%-12s"" % ""phi"",\n                    ""%-12s"" % ""phi2"",\n                    ""%-12s"" % ""Error"",\n                    ""%-12s"" % ""# Pts."",\n                ],\n            ]\n            p = list(MwUnique.keys())\n            p.sort()\n            for o in p:\n                if MwUnique[o][1] > 0:\n                    # table+=\'\'\'<tr><td>%4g</td><td>%4g</td><td>%4g</td><td>%4g</td><td>%8.3g</td><td>(%5d)</td></tr>\'\'\'%(o[0], o[1], o[2], o[3], MwUnique[o][0] / MwUnique[o][1], MwUnique[o][1])\n                    table.append(\n                        [\n                            ""%-12.4g"" % o[0],\n                            ""%-12.4g"" % o[1],\n                            ""%-12.4g"" % o[2],\n                            ""%-12.4g"" % o[3],\n                            ""%-12.3g"" % (MwUnique[o][0] / MwUnique[o][1]),\n                            ""%-12d"" % MwUnique[o][1],\n                        ]\n                    )\n                else:\n                    # table+=\'\'\'<tr><td>%4g</td><td>%4g</td><td>%4g</td><td>%4g</td><td>%s</td><td>(%5d)</td></tr>\'\'\'%(o[0], o[1], o[2], o[3], ""-"", MwUnique[o][1])\n                    table.append(\n                        [\n                            ""%-12.4g"" % o[0],\n                            ""%-12.4g"" % o[1],\n                            ""%-12.4g"" % o[2],\n                            ""%-12.4g"" % o[3],\n                            ""%-12s"" % ""-"",\n                            ""%-12d"" % MwUnique[o][1],\n                        ]\n                    )\n            # table+=\'\'\'</table><br>\'\'\'\n            self.Qprint(table)\n        if npoints > 0:\n            total_error /= npoints\n        else:\n            total_error = 1e10\n        if line == """":\n            self.Qprint(""<b>TOTAL ERROR</b>: %12.5g (%6d)<br>"" % (total_error, npoints))\n        return total_error\n\n    def func_fitTTS(self, *param_in):\n        """"""Overload the fit function""""""\n        ind = 0\n        k = list(self.parameters.keys())\n        k.sort()\n        for p in k:\n            par = self.parameters[p]\n            if par.opt_type == OptType.opt:\n                par.value = param_in[0][ind]\n                ind += 1\n        self.do_calculate("""")\n        error = self.do_error(""none"")\n        return error\n\n    def func_fitTTS_one(self, *param_in):\n        """"""fit one Mw and phi""""""\n        H = param_in[0][0]\n        V = 0\n        if self.parameters[""vert""].value:\n            V = param_in[0][1]\n        tt = np.array(self.current_table, copy=True)\n        tt[:, 0] = tt[:, 0] * np.power(10.0, H)\n        tt[:, 1] = tt[:, 1] * np.power(10.0, V)\n        tt[:, 2] = tt[:, 2] * np.power(10.0, V)\n        xmin = self.current_master_curve[0, 0]\n        xmax = self.current_master_curve[-1, 0]\n        condition = (tt[:, 0] > xmin) * (tt[:, 0] < xmax)\n        x0 = np.extract(condition, tt[:, 0])\n        x1 = np.extract(condition, tt[:, 1])\n        x2 = np.extract(condition, tt[:, 2])\n        tt = np.array([x0, x1, x2])\n        tt = np.transpose(tt)\n\n        yinterp1 = interp(\n            tt[:, 0], self.current_master_curve[:, 0], self.current_master_curve[:, 1]\n        )\n        # print(H)\n        # print(tt[:,1]-yinterp1)\n        yinterp2 = interp(\n            tt[:, 0], self.current_master_curve[:, 0], self.current_master_curve[:, 2]\n        )\n        error = np.sum((np.log10(yinterp1) - np.log10(tt[:, 1])) ** 2) + np.sum(\n            (np.log10(yinterp2) - np.log10(tt[:, 2])) ** 2\n        )\n        # error=np.sum((yinterp1-tt[:,1])**2)\n        npt = len(yinterp1) * 2\n        # npt=len(yinterp1)\n        # print(H, V, error/npt)\n        # input(""HELLO"")\n        return error / npt\n\n    def do_fit(self, line):\n        """"""Minimize the error""""""\n        self.fitting = True\n        start_time = time.time()\n        # view = self.parent_dataset.parent_application.current_view\n        self.Qprint(""""""<hr><h2>Parameter Fitting</h2>"""""")\n        self.Mwset, self.Mw, self.Tdict = self.get_cases()\n        # Case by case, T by T, we optimize the overlap of all files with the\n        # corresponding cases at the selected temperature\n        Tdesired = self.parameters[""T""].value\n        # print (self.Tdict)\n        self.aT_vs_T = {}\n        for case in self.Tdict.keys():\n            self.Qprint(\n                ""<h3>Mw=%g Mw2=%g phi=%g phi2=%g</h3>""\n                % (case[0], case[1], case[2], case[3])\n            )\n            Temps0 = [x[0] for x in self.Tdict[case]]\n            Temps = np.abs(np.array([x[0] for x in self.Tdict[case]]) - Tdesired)\n            Filenames = [x[2] for x in self.Tdict[case]]\n            Files = [x[3] for x in self.Tdict[case]]\n            indices = np.argsort(Temps)\n\n            # first master curve is built from first file in indices list\n            fname = Filenames[indices[0]]\n            self.parent_dataset\n\n            self.current_master_curve = np.array(\n                Files[indices[0]].data_table.data, copy=True\n            )\n            self.current_master_curve.view(""i8,i8,i8"").sort(order=[""f1""], axis=0)\n            self.shiftParameters[fname] = (0.0, 0.0)\n\n            # table=\'\'\'<table border=""1"" width=""100%"">\'\'\'\n            # table+=\'\'\'<tr><th>T</th><th>log(Hshift)</th><th>log(Vshift)</th></tr>\'\'\'\n            table = [\n                [""%-12s"" % ""T"", ""%-12s"" % ""log(Hshift)"", ""%-12s"" % ""log(Vshift)""],\n            ]\n            # self.Qprint(\'%6s %11s %11s\' % (\'T\', \'log(Hshift)\', \'log(Vshift)\'))\n            indices = np.delete(indices, 0, None)\n\n            for i in indices:\n                XSHIFT = 0.0\n                YSHIFT = 0.0\n                if Temps[i] == 0:\n                    # Add to current_master_curve\n                    fname = Filenames[i]\n\n                    tt = np.array(Files[i].data_table.data, copy=True)\n                    self.current_master_curve = np.concatenate(\n                        (self.current_master_curve, tt), axis=0\n                    )\n                    self.current_master_curve = self.current_master_curve[\n                        self.current_master_curve[:, 0].argsort()\n                    ]\n                    self.shiftParameters[fname] = (XSHIFT, YSHIFT)\n\n                else:\n                    fname = Filenames[i]\n                    tt = np.array(Files[i].data_table.data, copy=True)\n                    # Calculate preliminary shift factors (horizontal and vertical)\n                    if any(Files[i].isshifted):\n                        initial_guess = [Files[i].xshift[0], Files[i].yshift[0]]\n                    else:\n                        # Calculate mid-point of tt\n                        indmiddle = int(len(tt[:, 0]) / 2)\n                        xmid = tt[indmiddle, 0]\n                        ymid = tt[indmiddle, 1]\n                        xmidinterp = interp(\n                            ymid,\n                            self.current_master_curve[:, 1],\n                            self.current_master_curve[:, 0],\n                        )\n                        xshift = np.log10(xmidinterp / xmid)\n\n                        # minimize shift factors so the overlap is maximum\n                        initial_guess = [xshift]\n                        if self.parameters[""vert""].value:\n                            initial_guess.append(0)\n\n                    self.current_table = tt\n                    self.current_file_min = fname\n                    res = minimize(\n                        self.func_fitTTS_one, initial_guess, method=""Nelder-Mead""\n                    )\n                    if not res[""success""]:\n                        self.Qprint(""Solution not found: %s"" % res[""message""])\n                        return\n                    XSHIFT = res.x[0]\n                    if self.parameters[""vert""].value:\n                        YSHIFT = res.x[1]\n                    else:\n                        YSHIFT = 0.0\n\n                    # Add to current_master_curve\n                    # Set the theory file for that particular file\n                    ttcopy = np.array(tt, copy=True)\n                    ttcopy[:, 0] = ttcopy[:, 0] * np.power(10.0, XSHIFT)\n                    ttcopy[:, 1] = ttcopy[:, 1] * np.power(10.0, YSHIFT)\n                    ttcopy[:, 2] = ttcopy[:, 2] * np.power(10.0, YSHIFT)\n                    self.current_master_curve = np.concatenate(\n                        (self.current_master_curve, ttcopy), axis=0\n                    )\n                    self.current_master_curve = self.current_master_curve[\n                        self.current_master_curve[:, 0].argsort()\n                    ]\n                    self.shiftParameters[fname] = (XSHIFT, YSHIFT)\n\n            # Print final table of T and shift factors\n            indTsorted = sorted(range(len(Temps0)), key=lambda k: Temps0[k])\n            self.aT_vs_T[case[0]] = []  # for Arrhenius activaiton Energy\n            for i in indTsorted:\n                fname = Filenames[i]\n                sparam = self.shiftParameters[fname]\n                # table+=\'\'\'<tr><td>%6.3g</td><td>%11.3g</td><td>%11.3g</td></tr>\'\'\'%(Temps0[i], sparam[0], sparam[1])\n                table.append(\n                    [\n                        ""%-12.3g"" % Temps0[i],\n                        ""%-12.3g"" % sparam[0],\n                        ""%-12.3g"" % sparam[1],\n                    ]\n                )\n                # self.Qprint(\'%6.3g %11.3g %11.3g\' % (Temps0[i], sparam[0], sparam[1]))\n                self.aT_vs_T[case[0]].append((sparam[0], Temps0[i]))\n            self.Qprint(table)\n        self.fitting = False\n        self.do_calculate(line, timing=False)\n        self.Qprint(\n            """"""<i>---Fitted in %.3g seconds---</i><br>"""""" % (time.time() - start_time)\n        )\n\n    def do_print(self, line):\n        """"""Print the theory table associated with the given file name""""""\n        if line in self.tables:\n            print(self.tables[line].data)\n        else:\n            print(\'Theory table for ""%s"" not found\' % line)\n\n    def complete_print(self, text, line, begidx, endidx):\n        """"""Complete the print command for the CL version""""""\n        file_names = list(self.tables.keys())\n        if not text:\n            completions = file_names[:]\n        else:\n            completions = [f for f in file_names if f.startswith(text)]\n        return completions\n\n    def do_save(self, line, extra_txt=""""):\n        """"""Save the results from TTSShiftAutomatic theory predictions to a TTS file""""""\n        nfiles = len(self.parent_dataset.files)\n        MwUnique = list(set(self.Mw))\n        MwUnique.sort()\n\n        counter = 0\n        for m in MwUnique:\n            data = np.zeros(0)\n            fparam = {}\n            for i in range(nfiles):\n                if self.Mw[i] == m:\n                    Filei = self.parent_dataset.files[i]\n                    ttable = self.tables[Filei.file_name_short]\n                    T_array = np.full((ttable.num_rows, 1), Filei.file_parameters[""T""])\n                    data = np.append(data, np.append(ttable.data, T_array, axis=1))\n                    data = np.reshape(data, (-1, ttable.num_columns + 1))\n                    fparam.update(Filei.file_parameters)\n            data = data[data[:, 0].argsort()]\n            fparam[""T""] = self.parameters[""T""].value\n\n            try:\n                chem_name = ""%s_"" % fparam[""chem""]\n            except KeyError:\n                chem_name = """"\n\n            if line == """":\n                ofilename = (\n                    os.path.dirname(self.parent_dataset.files[0].file_full_path)\n                    + os.sep\n                    + chem_name\n                    + ""Mw""\n                    + str(m[0])\n                    + ""k""\n                    + ""_Mw2""\n                    + str(m[1])\n                    + ""_phi""\n                    + str(m[2])\n                    + ""_phiB""\n                    + str(m[3])\n                    + str(fparam[""T""])\n                    + "".tts""\n                )\n            else:\n                ofilename = (\n                    line\n                    + os.sep\n                    + chem_name\n                    + ""Mw""\n                    + str(m[0])\n                    + ""k""\n                    + ""_Mw2""\n                    + str(m[1])\n                    + ""_phi""\n                    + str(m[2])\n                    + ""_phiB""\n                    + str(m[3])\n                    + str(fparam[""T""])\n                    + extra_txt\n                    + "".tts""\n                )\n            fout = open(ofilename, ""w"")\n            for i in sorted(fparam):\n                fout.write(i + ""="" + str(fparam[i]) + "";"")\n            k = list(self.parameters.keys())\n            k.sort()\n            for i in k:\n                fout.write(i + ""="" + str(self.parameters[i].value) + "";"")\n            fout.write(""\\n"")\n            fout.write(""# Master curve predicted with WLF Theory\\n"")\n            fout.write(\n                ""# Date: ""\n                + time.strftime(""%Y-%m-%d %H:%M:%S"")\n                + "" - User: ""\n                + getpass.getuser()\n                + ""\\n""\n            )\n            k = Filei.file_type.col_names\n            for i in k:\n                fout.write(i + ""\\t"")\n            fout.write(""T \\t\\n"")\n            for i in range(data.shape[0]):\n                for j in range(data.shape[1]):\n                    fout.write(str(data[i, j]) + ""\\t"")\n                fout.write(""\\n"")\n            fout.close()\n            counter += 1\n\n        # print information\n        msg = \'Saved %d TTS file(s) in ""%s""\' % (counter, line)\n        if CmdBase.mode == CmdMode.GUI:\n            QMessageBox.information(self, ""Save TTS"", msg)\n        else:\n            print(msg)\n\n\nclass CLTheoryTTSShiftAutomatic(BaseTheoryTTSShiftAutomatic, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n\nclass GUITheoryTTSShiftAutomatic(BaseTheoryTTSShiftAutomatic, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n        # add widgets specific to the theory\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n        self.verticalshift = tb.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-vertical-shift.png""),\n            ""Vertical shift"",\n        )\n        self.verticalshift.setCheckable(True)\n        self.verticalshift.setChecked(True)\n        # self.savemaster = tb.addAction(self.style().standardIcon(\n        #     getattr(QStyle, \'SP_DialogSaveButton\')), \'Save Master Curve\')\n        self.cbTemp = QComboBox()\n        self.populate_TempComboBox()\n        self.cbTemp.setToolTip(""Select a goal Temperature"")\n        tb.addWidget(self.cbTemp)\n        self.refreshT = tb.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-reset.png""), ""Refresh T list""\n        )\n        self.saveShiftFactors = tb.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-save-ShiftFactors.png""),\n            ""Save shift factors"",\n        )\n        self.arrhe_tb = tb.addAction(\n            QIcon("":/Icon8/Images/new_icons/activation_energy.png""),\n            ""Print Arrhenius activation energy"",\n        )\n\n        self.thToolsLayout.insertWidget(0, tb)\n        connection_id = self.verticalshift.triggered.connect(self.do_vertical_shift)\n        # connection_id = self.savemaster.triggered.connect(self.do_save_dialog)\n        connection_id = self.cbTemp.currentIndexChanged.connect(self.change_temperature)\n        connection_id = self.refreshT.triggered.connect(self.refresh_temperatures)\n        connection_id = self.saveShiftFactors.triggered.connect(self.save_shift_factors)\n        connection_id = self.arrhe_tb.triggered.connect(self.print_activation_energy)\n\n        self.dir_start = os.path.join(RepTate.root_dir, ""data"")\n\n    def print_activation_energy(self):\n        # Evaluate activation ennergy from Arrhenius fit\n        if self.aT_vs_T == []:\n            self.Qprint(""<h3>Apply TTS first</h3>"")\n            return\n\n        def f(invT, Ea):\n            return Ea / 8.314 * (invT - 1 / (273.15 + self.parameters[""T""].value))\n\n        Ea_list = []\n        for case in self.aT_vs_T:\n            lnaT = [np.log(10) * aT for aT, _ in self.aT_vs_T[case]]\n            invT = [1 / (273.15 + T) for _, T in self.aT_vs_T[case]]\n            popt, pcov = curve_fit(f, invT, lnaT, p0=[1e3])\n            alpha = 0.05  # 95% confidence interval = 100*(1-alpha)\n            n = len(invT)  # number of data points\n            p = 1  # number of parameters\n            dof = max(0, n - p)  # number of degrees of freedom\n            # student-t value for the dof and confidence level\n            tval = distributions.t.ppf(1.0 - alpha / 2.0, dof)\n            Ea_list.append(\n                (case, popt[0] / 1e3, np.sqrt(np.diag(pcov))[0] * tval / 1e3)\n            )\n        if len(Ea_list) == 1:\n            self.Qprint(\n                ""<h3>Arrhenius Ea = %.3g \xc2\xb1 %.3g kJ/mol</h3>""\n                % (popt[0] / 1e3, np.sqrt(np.diag(pcov))[0] * tval / 1e3)\n            )\n        else:\n            table = [\n                [""Mw"", ""Ea (kJ/mol)""],\n            ]\n            for items in Ea_list:\n                table.append([""%s"" % items[0], ""%.3g \xc2\xb1 %.3g"" % (items[1], items[2])])\n            self.Qprint(table)\n\n    def populate_TempComboBox(self):\n        k = list(self.Tdict.keys())\n        a = sorted(list(set([x[0] for x in self.Tdict[k[0]]])))\n        for i in range(1, len(k)):\n            b = sorted([x[0] for x in self.Tdict[k[i]]])\n            a = sorted(list(set(a) & set(b)))\n        self.cbTemp.clear()\n        for t in a:\n            self.cbTemp.addItem(str(t))\n        if self.cbTemp.count() > 0:\n            self.set_param_value(""T"", float(self.cbTemp.currentText()))\n        self.update_parameter_table()\n\n    def do_vertical_shift(self):\n        self.set_param_value(""vert"", self.verticalshift.isChecked())\n\n    # def do_save_dialog(self):\n    #     folder = str(\n    #         QFileDialog.getExistingDirectory(\n    #             self, ""Select Directory to save Master curves""))\n    #     self.do_save(folder)\n\n    def change_temperature(self):\n        try:\n            self.set_param_value(""T"", float(self.cbTemp.currentText()))\n            self.update_parameter_table()\n        except:\n            pass\n\n    def refresh_temperatures(self):\n        self.Mwset, self.Mw, self.Tdict = self.get_cases()\n        self.populate_TempComboBox()\n\n    def save_shift_factors(self):\n        dilogue_name = ""Select Folder for Saving Shift Factors""\n        folder = QFileDialog.getExistingDirectory(self, dilogue_name, self.dir_start)\n        if not isdir(folder):\n            return\n        self.dir_start = folder\n        nsaved = 0\n        for case in self.Tdict.keys():\n            fname = """"\n            if case[0] > 0:\n                fname += ""Mw%g"" % case[0]\n            if case[1] > 0:\n                fname += ""MwB%g"" % case[1]\n            if case[2] > 0:\n                fname += ""phi%g"" % case[2]\n            if case[3] > 0:\n                fname += ""phiB%g"" % case[3]\n            with open(join(folder, fname + "".ttsf""), ""w"") as fout:\n                Temps0 = [x[0] for x in self.Tdict[case]]\n                Filenames = [x[2] for x in self.Tdict[case]]\n                Files = [x[3] for x in self.Tdict[case]]\n                indTsorted = sorted(range(len(Temps0)), key=lambda k: Temps0[k])\n\n                f0 = Files[0]\n                for pname in f0.file_parameters:\n                    if pname != ""T"":\n                        fout.write(""%s=%s;"" % (pname, f0.file_parameters[pname]))\n                fout.write(""\\n"")\n                fout.write(""%-12s %-12s %-12s\\n"" % (""T"", ""aT"", ""bT""))\n                fout.write(""%-12s %-12s %-12s\\n"" % (""[\xc2\xb0C]"", ""[-]"", ""[-]""))\n\n                for i in indTsorted:\n                    fname = Filenames[i]\n                    sparam = self.shiftParameters[fname]\n                    fout.write(\n                        ""%-12g %-12g %-12g\\n""\n                        % (Temps0[i], 10.0 ** sparam[0], 10.0 ** sparam[1])\n                    )\n                nsaved += 1\n        msg = \'Saved %d shift parameter file(s) in ""%s""\' % (nsaved, folder)\n        if CmdBase.mode == CmdMode.GUI:\n            QMessageBox.information(self, ""Saved Files"", msg)\n        else:\n            print(msg)\n'"
RepTate/theories/TheoryTemplate.py,3,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryTemplate\n\nTemplate file for creating a new theory\n""""""\nimport numpy as np\nfrom CmdBase import CmdBase, CmdMode\nfrom Parameter import Parameter, ParameterType, OptType\nfrom Theory import Theory\nfrom QTheory import QTheory\n\n\nclass TheoryTemplate(CmdBase):\n    """"""The basic documentation of the theory goes here. Please, add as much information as possible \n    (references, equations, qualitative descriptions, etc. """"""\n\n    thname = ""TemplateTheory""\n    description = ""Template Theory""\n    citations = []\n    doi = []\n\n    def __new__(cls, name="""", parent_dataset=None, axarr=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryTemplate(name, parent_dataset, axarr)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryTemplate(name, parent_dataset, axarr)\n        )\n\n\nclass BaseTheoryTemplate:\n    """"""Base class for both GUI and CL""""""\n\n    # html_help_file = \'\'\n    single_file = (\n        False  # False if the theory can be applied to multiple files simultaneously\n    )\n    thname = TheoryTemplate.thname\n    citations = TheoryTemplate.citations\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        self.function = self.calculate  # main theory function\n        self.has_modes = False  # True if the theory has modes\n        self.parameters[""param1""] = Parameter(\n            name=""param1"",\n            value=1,\n            description=""parameter 1"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n\n    def get_modes(self):\n        """"""If the theory provides Maxwell modes, fill this up (see examples in TheoryMaxwellModes.\nIf the theory does not provide modes, simply delete this function.""""""\n        tau = np.ones(1)\n        G = np.ones(1)\n        return tau, G, False\n\n    def set_modes(self):\n        """"""If the theory provides Maxwell modes, fill this up (see examples in TheoryMaxwellModes.\nIf the theory does not provide modes, simply delete this function.""""""\n        self.logger.info(""set_modes not allowed in this theory (%s)"" % elf.thname)\n        return False\n\n    def destructor(self):\n        """"""If the theory needs to clear up memory in a very special way, fill up the contents of this function.\nIf not, you can safely delete it.""""""\n        pass\n\n    def calculate(self, f=None):\n        """"""THIS IS THE FUNCTION THAT CALCULATES THE THEORY""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        tt.data[:, 0] = ft.data[:, 0]\n        tt.data[:, 1] = ft.data[:, 1] * ft.data[:, 1]\n\n\nclass CLTheoryTemplate(BaseTheoryTemplate, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # This class usually stays empty\n\n\nclass GUITheoryTemplate(BaseTheoryTemplate, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # add widgets specific to the theory here:\n'"
RepTate/theories/TheoryTobitaCSTR.py,6,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#     Daniel Read, d.j.read@leeds.ac.uk\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryTobitaCSTR\n\n""""""\nimport numpy as np\nimport time\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom PyQt5.QtWidgets import QApplication\nfrom PyQt5.QtCore import pyqtSignal\n\nimport ctypes as ct\nimport RepTate.theories.react_ctypes_helper as rch\nimport RepTate.theories.react_gui_tools as rgt\n\n\nclass TheoryTobitaCSTR(CmdBase):\n    """"""LDPE CSTR reaction theory\n    \n    The LDPE CSTR reaction theory uses an algorithm based on the one described in\nthe paper by H. Tobita (J. Pol. Sci. Part B, 39, 391-403 (2001)) for batch\nreactions. The algorithm is based upon a set of processes occuring in the\nreactor during free-radical polymerisation.\n""""""\n\n    thname = ""Tobita CSTR""\n    description = ""Tobita LDPE CSTR reaction theory""\n    citations = [""Tobita H., J. Pol. Sci. Part B 2001, 39, 391-403""]\n    doi = [\n        ""http://dx.doi.org/10.1002/1099-0488(20010115)39:4<391::AID-POLB1011>3.0.CO;2-3""\n    ]\n\n    def __new__(cls, name="""", parent_dataset=None, ax=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryTobitaCSTR(name, parent_dataset, ax)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryTobitaCSTR(name, parent_dataset, ax)\n        )\n\n\nclass BaseTheoryTobitaCSTR:\n    """"""Base class for both GUI and CL""""""\n\n    # html_help_file = \'docs%sbuild%shtml%smanual%sTheories%sReact%stobitaCSTR.html\' % ((os.sep, )*6)\n    html_help_file = (\n        ""http://reptate.readthedocs.io/manual/Applications/React/Theory/tobitaCSTR.html""\n    )\n    single_file = (\n        True  # False if the theory can be applied to multiple files simultaneously\n    )\n    thname = TheoryTobitaCSTR.thname\n    citations = TheoryTobitaCSTR.citations\n    doi = TheoryTobitaCSTR.doi\n\n    signal_request_dist = pyqtSignal(object)\n    signal_request_polymer = pyqtSignal(object)\n    signal_request_arm = pyqtSignal(object)\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n        self.reactname = ""LDPE CSTR %d"" % (rch.tCSTR_global.tobCSTRnumber)\n        rch.tCSTR_global.tobCSTRnumber += 1\n        self.function = self.Calc\n        self.simexists = False\n        self.dist_exists = False\n        self.ndist = 0\n        self.has_modes = False  # True if the theory has modes\n        self.autocalculate = False\n        self.do_priority_seniority = False\n\n        self.parameters[""tau""] = Parameter(\n            name=""tau"",\n            value=1.11e-3,\n            description=""Ratio (term. by dispropor. + chain transf. to small mol.) to polym. rates"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""beta""] = Parameter(\n            name=""beta"",\n            value=9.75e-6,\n            description=""Ratio term. by combin. to polym. rates"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""lambda""] = Parameter(\n            name=""lambda"",\n            value=2e-3,\n            description=""Ratio long-chain-branch. to polym. rates"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""sigma""] = Parameter(\n            name=""sigma"",\n            value=1.8e-4,\n            description=""Ratio scission to polym. rates"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""num_to_make""] = Parameter(\n            name=""num_to_make"",\n            value=1000,\n            description=""Number of molecules made in the simulation"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""mon_mass""] = Parameter(\n            name=""mon_mass"",\n            value=28,\n            description=""Mass, in a.m.u., of a monomer (usually set to 28 for PE)"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""Me""] = Parameter(\n            name=""Me"",\n            value=1000,\n            description=""Entanglement molecular weight"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""nbin""] = Parameter(\n            name=""nbin"",\n            value=100,\n            description=""Number of molecular weight bins"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n\n        self.signal_request_dist.connect(rgt.request_more_dist)\n        self.signal_request_polymer.connect(rgt.request_more_polymer)\n        self.signal_request_arm.connect(rgt.request_more_arm)\n        self.do_xrange("""", visible=self.xrange.get_visible())\n\n    def request_stop_computations(self):\n        """"""Called when user wants to terminate the current computation""""""\n        rch.set_flag_stop_all(ct.c_bool(True))\n        super().request_stop_computations()\n\n    def do_error(self, line):\n        """"""This theory does not calculate the error""""""\n        pass\n\n    def Calc(self, f=None):\n        """"""Calculate the theory""""""\n\n        # get parameters\n        tau = self.parameters[""tau""].value\n        beta = self.parameters[""beta""].value\n        lambda_ = self.parameters[""lambda""].value\n        sigma = self.parameters[""sigma""].value\n        numtomake = np.round(self.parameters[""num_to_make""].value)\n        monmass = self.parameters[""mon_mass""].value\n        Me = self.parameters[""Me""].value\n        nbins = int(np.round(self.parameters[""nbin""].value))\n        rch.set_do_prio_senio(ct.c_bool(self.do_priority_seniority))\n        rch.set_flag_stop_all(ct.c_bool(False))\n\n        c_ndist = ct.c_int()\n\n        # resize theory datatable\n        ft = f.data_table\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = 1\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n\n        if not self.dist_exists:\n            success = rch.request_dist(ct.byref(c_ndist))\n            self.ndist = c_ndist.value\n            if not success:\n                # launch dialog asking for more dist\n                self.signal_request_dist.emit(\n                    self\n                )  # use signal to open QDialog in the main GUI window\n                return\n            else:\n                self.dist_exists = True\n        ndist = self.ndist\n        # rch.react_dist[ndist].contents.name = self.reactname #TODO: set the dist name in the C library\n        rch.react_dist[ndist].contents.M_e = Me\n        rch.react_dist[ndist].contents.monmass = monmass\n        rch.react_dist[ndist].contents.nummwdbins = nbins\n        rch.react_dist[ndist].contents.polysaved = False\n        rch.react_dist[ndist].contents.nsaved_arch = 0\n        rch.react_dist[ndist].contents.arch_minwt = self.xmin\n        rch.react_dist[ndist].contents.arch_maxwt = self.xmax\n        rch.init_bin_prio_vs_senio(ndist)\n\n        if self.simexists:\n            rch.return_dist_polys(ct.c_int(ndist))\n\n        # initialise tobita batch\n        rch.tobCSTRstart(\n            ct.c_double(tau),\n            ct.c_double(beta),\n            ct.c_double(sigma),\n            ct.c_double(lambda_),\n            ct.c_int(ndist),\n        )\n        rch.react_dist[ndist].contents.npoly = 0\n\n        c_m = ct.c_int()\n\n        # make numtomake polymers\n        i = 0\n        rate_print = np.trunc(numtomake / 20)\n        self.Qprint(""Making polymers:"")\n        self.Qprint(""0% "", end="""")\n        while i < numtomake:\n            if self.stop_theory_flag:\n                self.Qprint(\n                    ""<br><big><font color=red><b>Polymer creation stopped by user</b></font></big>""\n                )\n                break\n            # get a polymer\n            success = rch.request_poly(ct.byref(c_m))\n            m = c_m.value\n            if success:  # check availability of polymers\n                # put it in list\n                if (\n                    rch.react_dist[ndist].contents.npoly == 0\n                ):  # case of first polymer made\n                    rch.react_dist[ndist].contents.first_poly = m\n                    rch.set_br_poly_nextpoly(\n                        ct.c_int(m), ct.c_int(0)\n                    )  # br_poly[m].contents.nextpoly = 0\n                else:  # next polymer, put to top of list\n                    rch.set_br_poly_nextpoly(\n                        ct.c_int(m), ct.c_int(rch.react_dist[ndist].contents.first_poly)\n                    )  # br_poly[m].contents.nextpoly = rch.react_dist[ndist].contents.first_poly\n                    rch.react_dist[ndist].contents.first_poly = m\n\n                # make a polymer\n                if rch.tobCSTR(\n                    ct.c_int(m), ct.c_int(ndist)\n                ):  # routine returns false if arms ran out\n                    rch.react_dist[ndist].contents.npoly += 1\n                    i += 1\n                    # check for error\n                    if rch.tCSTR_global.tobitaCSTRerrorflag:\n                        self.Qprint(\n                            ""<br><big><font color=red><b>Polymers too large: gelation occurs for these parameters</b></font></big>""\n                        )\n                        i = numtomake\n                else:  # error message if we ran out of arms\n                    self.success_increase_memory = None\n                    self.signal_request_arm.emit(self)\n                    while (\n                        self.success_increase_memory is None\n                    ):  # wait for the end of QDialog\n                        time.sleep(\n                            0.5\n                        )  # TODO: find a better way to wait for the dialog thread to finish\n                    if self.success_increase_memory:\n                        continue  # back to the start of while loop\n                    else:\n                        i = numtomake\n                        rch.tCSTR_global.tobitaCSTRerrorflag = True\n\n                # update on number made\n                if i % rate_print == 0:\n                    self.Qprint(""-"", end="""")\n                    # needed to use Qprint if in single-thread\n                    QApplication.processEvents()\n\n            else:  # polymer wasn\'t available\n                self.success_increase_memory = None\n                self.signal_request_polymer.emit(self)\n                while self.success_increase_memory is None:\n                    time.sleep(\n                        0.5\n                    )  # TODO: find a better way to wait for the dialog thread to finish\n                if self.success_increase_memory:\n                    continue\n                else:\n                    i = numtomake\n        # end make polymers loop\n        if not rch.tCSTR_global.tobitaCSTRerrorflag:\n            self.Qprint(""&nbsp;100%"")\n\n        calc = 0\n        # do analysis of polymers made\n        if (rch.react_dist[ndist].contents.npoly >= 100) and (\n            not rch.tCSTR_global.tobitaCSTRerrorflag\n        ):\n            rch.molbin(ndist)\n            ft = f.data_table\n\n            # resize theory data table\n            ft = f.data_table\n            tt = self.tables[f.file_name_short]\n            tt.num_columns = ft.num_columns + 2\n            tt.num_rows = rch.react_dist[ndist].contents.nummwdbins\n            tt.data = np.zeros((tt.num_rows, tt.num_columns))\n\n            for i in range(1, rch.react_dist[ndist].contents.nummwdbins + 1):\n                tt.data[i - 1, 0] = np.power(\n                    10, rch.react_dist[ndist].contents.lgmid[i]\n                )\n                tt.data[i - 1, 1] = rch.react_dist[ndist].contents.wt[i]\n                tt.data[i - 1, 2] = rch.react_dist[ndist].contents.avg[i]\n                tt.data[i - 1, 3] = rch.react_dist[ndist].contents.avbr[i]\n            rch.end_print(self, ndist, self.do_priority_seniority)\n            rch.prio_and_senio(self, f, ndist, self.do_priority_seniority)\n\n            calc = rch.react_dist[ndist].contents.nummwdbins - 1\n            rch.react_dist[ndist].contents.polysaved = True\n\n        self.simexists = True\n        # self.Qprint(\'%d arm records left in memory\' % rch.pb_global.arms_left)\n        # rch.print_arch_stats(ct.c_int(ndist))\n        return calc\n\n    def show_theory_extras(self, checked):\n        rgt.show_theory_extras(self, checked)\n\n    def destructor(self):\n        """"""Return arms to pool""""""\n        rch.return_dist(ct.c_int(self.ndist))\n\n    def do_fit(self, line=""""):\n        """"""No fitting allowed in this theory""""""\n        if self.xrange.get_visible():\n            if self.xmin > self.xmax:\n                temp = self.xmin\n                self.xmin = self.xmax\n                self.xmax = temp\n            self.Qprint(""<b>xrange</b>=[%0.3g, %0.3g]"" % (self.xmin, self.xmax))\n        if self.yrange.get_visible():\n            if self.ymin > self.ymax:\n                temp = self.ymin\n                self.ymin = self.ymax\n                self.ymax = temp\n            self.Qprint(""<b>yrange</b>=[%.03g, %0.3g]"" % (self.ymin, self.ymax))\n\n\nclass CLTheoryTobitaCSTR(BaseTheoryTobitaCSTR, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n    # This class usually stays empty\n\n\nclass GUITheoryTobitaCSTR(BaseTheoryTobitaCSTR, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n        rgt.initialise_tool_bar(self)\n\n    def theory_buttons_disabled(self, state):\n        """"""Disable/Enable some theory buttons before/after calculation start.""""""\n        rgt.theory_buttons_disabled(self, state)\n\n    def handle_save_bob_configuration(self):\n        """"""Save polymer configuraions to a file""""""\n        rgt.handle_save_bob_configuration(self)\n\n    def handle_edit_bob_settings(self):\n        """"""Open the BoB binnig settings dialog""""""\n        rgt.handle_edit_bob_settings(self)\n\n    def handle_btn_prio_senio(self, checked):\n        """"""Change do_priority_seniority""""""\n        rgt.handle_btn_prio_senio(self, checked)\n\n    def set_extra_data(self, extra_data):\n        """"""set extra data""""""\n        rgt.set_extra_data(self, extra_data)\n\n    def get_extra_data(self):\n        """"""set extra data""""""\n        rgt.get_extra_data(self)\n'"
RepTate/theories/TheoryUCM.py,11,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryUCM\n\nModule for the Upper Convected Maxwell model\n\n""""""\nimport numpy as np\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\nfrom PyQt5.QtWidgets import QToolBar, QToolButton, QMenu, QMessageBox\nfrom PyQt5.QtCore import QSize\nfrom PyQt5.QtGui import QIcon\nfrom PyQt5.QtCore import Qt\nfrom RepTate.gui.Theory_rc import *\nfrom RepTate.applications.ApplicationLAOS import CLApplicationLAOS, GUIApplicationLAOS\nfrom RepTate.theories.theory_helpers import FlowMode, EditModesDialog\n\n\nclass TheoryUCM(CmdBase):\n    """"""Multi-mode Upper Convected Maxwell model (see Chapter 1 of :cite:`NLVE-Larson1988`):\n    \n    .. math::\n        \\\\boldsymbol \\\\sigma &= \\\\sum_{i=1}^n G_i \\\\boldsymbol A_i\\\\\\\\\n        \\\\dfrac {\\\\mathrm D \\\\boldsymbol  A_i} {\\\\mathrm D t} &=  \\\\boldsymbol \\\\kappa \\\\cdot \\\\boldsymbol A_i\n        + \\\\boldsymbol A_i\\\\cdot \\\\boldsymbol \\\\kappa ^T \n         - \\dfrac 1 {\\\\tau_i} (\\\\boldsymbol A_i - \\\\boldsymbol I)\n    \n    * **Functions**\n        - Analytical solution in shear\n        \n          .. math::\n            \\\\eta^+(t) = \\\\sum_{i=1}^n G_i \\\\tau_i (1 - \\\\exp(-t/\\\\tau_i))\n        \n        - Analytical solution in uniaxial extension\n        \n          .. math::\n            \\\\eta^+_\\\\mathrm E (t) = \\\\dfrac 1 {\\\\dot\\\\varepsilon}\n            \\\\sum_{i=1}^n G_i (A_{xx, i}(t) - A_{yy, i}(t))\n        \n          with\n\n            .. math::\n                A_{xx, i}(t) &= \\\\dfrac{ 1 - 2 \\\\dot\\\\varepsilon\\\\tau_i \n                \\\\exp(-(1 - 2 \\\\dot\\\\varepsilon\\\\tau_i) t / \\\\tau_i) } {1 - 2 \\\\dot\\\\varepsilon\\\\tau_i }\\\\\\\\\n                A_{yy, i}(t) &= \\\\dfrac{ 1 + \\\\dot\\\\varepsilon\\\\tau_i \n                \\\\exp(-(1 + \\\\dot\\\\varepsilon\\\\tau_i)t/\\\\tau_i) } { 1+ \\\\dot\\\\varepsilon\\\\tau_i}\n\n        where for each mode :math:`i`:\n            - :math:`G_i`: weight of mode :math:`i`\n            - :math:`\\\\tau_i`: relaxation time of mode :math:`i`\n\n    * **Parameters**\n        [none]\n\n    """"""\n\n    thname = ""UCM""\n    description = ""Upper-convected Maxwell constitutive equation""\n    citations = [""Oldroyd J.G., Proc. Roy. Soc. 1950, 200, 523-541""]\n    doi = [""http://dx.doi.org/10.1098/rspa.1950.0035""]\n\n    def __new__(cls, name="""", parent_dataset=None, ax=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryUCM(name, parent_dataset, ax)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryUCM(name, parent_dataset, ax)\n        )\n\n\nclass BaseTheoryUCM:\n    """"""Base class for both GUI and CL""""""\n\n    html_help_file = ""http://reptate.readthedocs.io/manual/Applications/NLVE/Theory/theory.html#multi-mode-upper-convected-maxwell-model""\n    single_file = False\n    thname = TheoryUCM.thname\n    citations = TheoryUCM.citations\n    doi = TheoryUCM.doi\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        self.function = self.calculate_UCM\n        self.has_modes = True\n        self.parameters[""nmodes""] = Parameter(\n            name=""nmodes"",\n            value=2,\n            description=""Number of modes"",\n            type=ParameterType.integer,\n            opt_type=OptType.const,\n            display_flag=False,\n        )\n\n        for i in range(self.parameters[""nmodes""].value):\n            self.parameters[""G%02d"" % i] = Parameter(\n                name=""G%02d"" % i,\n                value=1000.0,\n                description=""Modulus of mode %02d"" % i,\n                type=ParameterType.real,\n                opt_type=OptType.nopt,\n                display_flag=False,\n                min_value=0,\n            )\n            self.parameters[""tauD%02d"" % i] = Parameter(\n                name=""tauD%02d"" % i,\n                value=10.0,\n                description=""Terminal time of mode %02d"" % i,\n                type=ParameterType.real,\n                opt_type=OptType.nopt,\n                display_flag=False,\n                min_value=0,\n            )\n\n        self.MAX_MODES = 40\n        self.init_flow_mode()\n\n    def init_flow_mode(self):\n        """"""Find if data files are shear or extension""""""\n        try:\n            f = self.theory_files()[0]\n            if f.file_type.extension == ""shear"":\n                self.flow_mode = FlowMode.shear\n            else:\n                self.flow_mode = FlowMode.uext\n        except Exception as e:\n            print(""in UCM init:"", e)\n            self.flow_mode = FlowMode.shear  # default mode: shear\n\n    def get_modes(self):\n        """"""Get the values of Maxwell Modes from this theory""""""\n        nmodes = self.parameters[""nmodes""].value\n        tau = np.zeros(nmodes)\n        G = np.zeros(nmodes)\n        for i in range(nmodes):\n            tau[i] = self.parameters[""tauD%02d"" % i].value\n            G[i] = self.parameters[""G%02d"" % i].value\n        return tau, G, True\n\n    def set_modes(self, tau, G):\n        """"""Set the values of Maxwell Modes from another theory""""""\n        nmodes = len(tau)\n        self.set_param_value(""nmodes"", nmodes)\n        for i in range(nmodes):\n            self.set_param_value(""tauD%02d"" % i, tau[i])\n            self.set_param_value(""G%02d"" % i, G[i])\n        return True\n\n    def sigma_xy_shear(self, p, times):\n        """"""Upper Convected Maxwell model in shear.\n        Returns XY component of stress tensor""""""\n        G, tauD, gd = p\n\n        return G * gd * tauD * (1 - np.exp(-times / tauD))\n\n    def n1_uext(self, p, times):\n        """"""Upper Convected Maxwell model in uniaxial extension.\n        Returns N1 = (XX -YY) component of stress tensor""""""\n        G, tauD, ed = p\n        w = tauD * ed\n        sxx = (1 - 2 * w * np.exp(-(1 - 2 * w) * times / tauD)) / (1 - 2 * w)\n        syy = (1 + w * np.exp(-(1 + w) * times / tauD)) / (1 + w)\n\n        return G * (sxx - syy)\n\n    def calculate_UCM(self, f=None):\n        """"""Calculate the theory""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        times = ft.data[:, 0]\n\n        tt.data[:, 0] = times\n\n        flow_rate = float(f.file_parameters[""gdot""])\n        nmodes = self.parameters[""nmodes""].value\n        for i in range(nmodes):\n            if self.stop_theory_flag:\n                break\n            G = self.parameters[""G%02d"" % i].value\n            tauD = self.parameters[""tauD%02d"" % i].value\n\n            p = [G, tauD, flow_rate]\n\n            if self.flow_mode == FlowMode.shear:\n                tt.data[:, 1] += self.sigma_xy_shear(p, times)\n            elif self.flow_mode == FlowMode.uext:\n                tt.data[:, 1] += self.n1_uext(p, times)\n\n    def calculate_UCMLAOS(self, f=None):\n        """"""Calculate the theory for LAOS""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n        times = ft.data[:, 0]\n\n        g0 = float(f.file_parameters[""gamma""])\n        w = float(f.file_parameters[""omega""])\n        tt.data[:, 0] = times\n        tt.data[:, 1] = g0 * np.sin(w * times)\n\n        nmodes = self.parameters[""nmodes""].value\n        for i in range(nmodes):\n            if self.stop_theory_flag:\n                break\n            G = self.parameters[""G%02d"" % i].value\n            tauD = self.parameters[""tauD%02d"" % i].value\n            eta = G * tauD\n            tt.data[:, 2] += (\n                eta\n                * g0\n                * w\n                * (\n                    tauD * w * np.sin(w * times)\n                    - np.exp(-times / tauD)\n                    + np.cos(w * times)\n                )\n                / (1 + w ** 2 * tauD ** 2)\n            )\n\n    def set_param_value(self, name, value):\n        """"""Set the value of a theory parameter""""""\n        if name == ""nmodes"":\n            oldn = self.parameters[""nmodes""].value\n        message, success = super(BaseTheoryUCM, self).set_param_value(name, value)\n        if not success:\n            return message, success\n        if name == ""nmodes"":\n            for i in range(self.parameters[""nmodes""].value):\n                self.parameters[""G%02d"" % i] = Parameter(\n                    name=""G%02d"" % i,\n                    value=1000.0,\n                    description=""Modulus of mode %02d"" % i,\n                    type=ParameterType.real,\n                    opt_type=OptType.nopt,\n                    display_flag=False,\n                    min_value=0,\n                )\n                self.parameters[""tauD%02d"" % i] = Parameter(\n                    name=""tauD%02d"" % i,\n                    value=10.0,\n                    description=""Terminal time of mode %02d"" % i,\n                    type=ParameterType.real,\n                    opt_type=OptType.nopt,\n                    display_flag=False,\n                    min_value=0,\n                )\n\n            if oldn > self.parameters[""nmodes""].value:\n                for i in range(self.parameters[""nmodes""].value, oldn):\n                    del self.parameters[""G%02d"" % i]\n                    del self.parameters[""tauD%02d"" % i]\n        return """", True\n\n\nclass CLTheoryUCM(BaseTheoryUCM, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n        if isinstance(parent_dataset.parent_application, CLApplicationLAOS):\n            self.function = self.calculate_UCMLAOS\n\n\nclass GUITheoryUCM(BaseTheoryUCM, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, ax=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, ax)\n\n        # add widgets specific to the theory\n        tb = QToolBar()\n        tb.setIconSize(QSize(24, 24))\n\n        if not isinstance(parent_dataset.parent_application, GUIApplicationLAOS):\n            self.tbutflow = QToolButton()\n            self.tbutflow.setPopupMode(QToolButton.MenuButtonPopup)\n            menu = QMenu()\n            self.shear_flow_action = menu.addAction(\n                QIcon("":/Icon8/Images/new_icons/icon-shear.png""), ""Shear Flow""\n            )\n            self.extensional_flow_action = menu.addAction(\n                QIcon("":/Icon8/Images/new_icons/icon-uext.png""), ""Extensional Flow""\n            )\n            if self.flow_mode == FlowMode.shear:\n                self.tbutflow.setDefaultAction(self.shear_flow_action)\n            else:\n                self.tbutflow.setDefaultAction(self.extensional_flow_action)\n            self.tbutflow.setMenu(menu)\n            tb.addWidget(self.tbutflow)\n\n            connection_id = self.shear_flow_action.triggered.connect(\n                self.select_shear_flow\n            )\n            connection_id = self.extensional_flow_action.triggered.connect(\n                self.select_extensional_flow\n            )\n        else:\n            self.function = self.calculate_UCMLAOS\n\n        self.tbutmodes = QToolButton()\n        self.tbutmodes.setPopupMode(QToolButton.MenuButtonPopup)\n        menu = QMenu()\n        self.get_modes_action = menu.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-broadcasting.png""), ""Get Modes""\n        )\n        self.edit_modes_action = menu.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-edit-file.png""), ""Edit Modes""\n        )\n        self.plot_modes_action = menu.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-scatter-plot.png""), ""Plot Modes""\n        )\n        self.save_modes_action = menu.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-save-Maxwell.png""), ""Save Modes""\n        )\n        self.tbutmodes.setDefaultAction(self.get_modes_action)\n        self.tbutmodes.setMenu(menu)\n        tb.addWidget(self.tbutmodes)\n\n        self.thToolsLayout.insertWidget(0, tb)\n\n        connection_id = self.get_modes_action.triggered.connect(self.get_modes_reptate)\n        connection_id = self.edit_modes_action.triggered.connect(self.edit_modes_window)\n        connection_id = self.plot_modes_action.triggered.connect(self.plot_modes_graph)\n        connection_id = self.save_modes_action.triggered.connect(self.save_modes)\n\n    def select_shear_flow(self):\n        self.flow_mode = FlowMode.shear\n        self.tbutflow.setDefaultAction(self.shear_flow_action)\n\n    def select_extensional_flow(self):\n        self.flow_mode = FlowMode.uext\n        self.tbutflow.setDefaultAction(self.extensional_flow_action)\n\n    def get_modes_reptate(self):\n        self.Qcopy_modes()\n\n    def edit_modes_window(self):\n        times, G, success = self.get_modes()\n        if not success:\n            self.logger.warning(""Could not get modes successfully"")\n            return\n        d = EditModesDialog(self, times, G, self.MAX_MODES)\n        if d.exec_():\n            nmodes = d.table.rowCount()\n            self.set_param_value(""nmodes"", nmodes)\n            success = True\n            for i in range(nmodes):\n                msg, success1 = self.set_param_value(\n                    ""tauD%02d"" % i, d.table.item(i, 0).text()\n                )\n                msg, success2 = self.set_param_value(\n                    ""G%02d"" % i, d.table.item(i, 1).text()\n                )\n                success *= success1 * success2\n            if not success:\n                QMessageBox.warning(\n                    self,\n                    ""Error"",\n                    ""Some parameter(s) could not be updated.\\nPlease try again."",\n                )\n            else:\n                self.handle_actionCalculate_Theory()\n\n    def plot_modes_graph(self):\n        pass\n'"
RepTate/theories/TheoryWLF.py,3,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2018): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module TheoryWLF\n\nWLF file for creating a new theory\n""""""\nimport numpy as np\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Theory import Theory\nfrom RepTate.gui.QTheory import QTheory\n\n\nclass TheoryWLF(CmdBase):\n    """"""Time-temperature superposition based on a Williams-Landel-Ferry (WLF) equation with two parameters.\n    \n    * **Function**\n        .. math::\n            \\\\begin{eqnarray}\n            \\\\omega(T_r) &= & a_T \\\\omega(T) \\\\\\\\\n            G(T_r) &= & b_T G(T) \\\\\\\\\n            \\\\log_{10} a_T &= & \\\\frac{-B_1 (T-T_r)}{(B_2+T_r)(B_2+T)} \\\\\\\\\n            b_T &= & \\\\frac{\\\\rho(T_r)T_r}{\\\\rho(T)T} = \\\\frac{(1+\\\\alpha T)(T_r+273.15)}{(1+\\\\alpha T_r)(T+273.15)} \\\\\\\\\n            T_g &= &T_g^\\\\infty - \\\\frac{C_{T_g}}{M_w}\n            \\\\end{eqnarray}\n    \n    * **Parameters**\n       - :math:`T_r`: Reference temperature to which the experimental data will be shifted.\n       - :math:`B_1`: Material parameter, corresponding to :math:`C_1\\cdot C_2`, with :math:`C_1` and :math:`C_2` being the standard WLF material parameters.\n       - :math:`B_2`: Material parameter, corresponding to :math:`C_2-T_r`, :math:`C_2` being the standard WLF material parameter.\n       - logalpha: Decimal logarithm of the thermal expansion coefficient of the polymer at 0 \xc2\xb0C.\n       - :math:`C_{T_g}`: Material parameter that describes the dependence of :math:`T_g` with :math:`M_w`.\n       - dx12: Fraction of 1-2 (vynil) units (valid for polybutadiene).\n    """"""\n\n    thname = ""WLF""\n    description = ""Williams-Landel-Ferry""\n    citations = []\n    doi = []\n\n    def __new__(cls, name="""", parent_dataset=None, axarr=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUITheoryWLF(name, parent_dataset, axarr)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLTheoryWLF(name, parent_dataset, axarr)\n        )\n\n\nclass BaseTheoryWLF:\n    """"""Base class for both GUI and CL""""""\n\n    # html_help_file = \'\'\n    single_file = (\n        False  # False if the theory can be applied to multiple files simultaneously\n    )\n    thname = TheoryWLF.thname\n    citations = TheoryWLF.citations\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n        self.function = self.WLF\n        self.parameters[""Tr""] = Parameter(\n            name=""Tr"",\n            value=25,\n            description=""Reference T to WLF shift the data to"",\n            type=ParameterType.real,\n            opt_type=OptType.opt,\n        )\n        self.parameters[""B1""] = Parameter(\n            name=""B1"",\n            value=850,\n            description=""Material parameter B1 for WLF Shift"",\n            type=ParameterType.real,\n            opt_type=OptType.opt,\n        )\n        self.parameters[""B2""] = Parameter(\n            name=""B2"",\n            value=126,\n            description=""Material parameter B2 for WLF Shift"",\n            type=ParameterType.real,\n            opt_type=OptType.opt,\n        )\n        self.parameters[""logalpha""] = Parameter(\n            name=""logalpha"",\n            value=-3.18,\n            description=""Log_10 of the thermal expansion coefficient at 0 \xc2\xb0C"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""CTg""] = Parameter(\n            name=""CTg"",\n            value=14.65,\n            description=""Molecular weight dependence of Tg"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""dx12""] = Parameter(\n            name=""dx12"",\n            value=0,\n            description=""Fraction 1,2 vinyl units (for PBd)"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n        self.parameters[""vert""] = Parameter(\n            name=""vert"",\n            value=True,\n            description=""Shift vertically"",\n            type=ParameterType.boolean,\n            opt_type=OptType.const,\n            display_flag=False,\n        )\n        self.parameters[""iso""] = Parameter(\n            name=""iso"",\n            value=True,\n            description=""Isofrictional state"",\n            type=ParameterType.boolean,\n            opt_type=OptType.const,\n            display_flag=False,\n        )\n\n        self.get_material_parameters()\n\n    def WLF(self, f=None):\n        """"""WLF function""""""\n        ft = f.data_table\n        tt = self.tables[f.file_name_short]\n        tt.num_columns = ft.num_columns\n        tt.num_rows = ft.num_rows\n        tt.data = np.zeros((tt.num_rows, tt.num_columns))\n\n        Tr = self.parameters[""Tr""].value\n        B1 = self.parameters[""B1""].value\n        B2 = self.parameters[""B2""].value\n        alpha = np.power(10.0, self.parameters[""logalpha""].value)\n        CTg = self.parameters[""CTg""].value\n        iso = self.parameters[""iso""].value\n        vert = self.parameters[""vert""].value\n\n        Mw = f.file_parameters[""Mw""]\n\n        tt.data[:, 0] = ft.data[:, 0]\n\n        if iso:\n            B2 += CTg / Mw  # - 68.7 * dx12\n            Trcorrected = Tr - CTg / Mw  # + 68.7 * dx12\n        else:\n            Trcorrected = Tr\n        tt.data[:, 1] = np.power(\n            10.0,\n            -B1\n            * (ft.data[:, 0] - Trcorrected)\n            / (B2 + Trcorrected)\n            / (B2 + ft.data[:, 0]),\n        )\n        tt.data[:, 2] = (\n            (1 + alpha * ft.data[:, 0])\n            * (Tr + 273.15)\n            / (1 + alpha * Tr)\n            / (ft.data[:, 0] + 273.15)\n        )\n\n\nclass CLTheoryWLF(BaseTheoryWLF, Theory):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # This class usually stays empty\n\n\nclass GUITheoryWLF(BaseTheoryWLF, QTheory):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_dataset=None, axarr=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_dataset, axarr)\n\n    # add widgets specific to the theory here:\n'"
RepTate/theories/__init__.py,0,b''
RepTate/theories/dtd_ctypes_helper.py,5,"b'""""""\nDefine the C-variables and functions from the C-files that are needed in Python\n""""""\nimport numpy as np\nfrom ctypes import c_double, c_int, c_bool, CDLL\nimport sys\nimport os\n\ndir_path = os.path.dirname(\n    os.path.realpath(__file__)\n)  # get the directory path of current file\nif sys.maxsize > 2 ** 32:\n    # 64-bit system\n    lib_path = os.path.join(dir_path, ""dtd_lib_%s.so"" % (sys.platform))\nelse:\n    # 32-bit system\n    lib_path = os.path.join(dir_path, ""dtd_lib_%s_i686.so"" % (sys.platform))\ntry:\n    dtd_lib = CDLL(lib_path)\nexcept:\n    print(""OS %s not recognized in DTD CH"" % (sys.platform))\n\ndynamic_tube_dilution_freq = dtd_lib.dynamic_tube_dilution_freq\ndynamic_tube_dilution_freq.restype = c_bool\n\ndynamic_tube_dilution_time = dtd_lib.dynamic_tube_dilution_time\ndynamic_tube_dilution_time.restype = c_bool\n\n\ndef calculate_dtd_freq(params, EPS):\n    """"""Calculate dynamic tube dilution in frequency domain""""""\n    G0, a, tau_e, z, w = params\n    n = len(w)\n\n    w_arr = (c_double * n)()\n    gp_arr = (c_double * n)()\n    gpp_arr = (c_double * n)()\n    w_arr[:] = w[:]\n    gp_arr[:] = np.zeros(n)[:]\n    gpp_arr[:] = np.zeros(n)[:]\n\n    success = dynamic_tube_dilution_freq(\n        c_double(G0),\n        c_double(a),\n        c_double(tau_e),\n        c_double(z),\n        c_int(n),\n        w_arr,\n        gp_arr,\n        gpp_arr,\n        c_double(EPS),\n    )\n\n    # convert ctypes array to numpy\n    return (np.asarray(gp_arr[:]), np.asarray(gpp_arr[:]), success)\n\n\ndef calculate_dtd_time(params, EPS):\n    """"""Calculate dynamic tube dilution in time domain""""""\n    G0, a, tau_e, z, t = params\n    n = len(t)\n\n    t_arr = (c_double * n)()\n    gt_arr = (c_double * n)()\n    t_arr[:] = t[:]\n    gt_arr[:] = np.zeros(n)[:]\n\n    success = dynamic_tube_dilution_time(\n        c_double(G0),\n        c_double(a),\n        c_double(tau_e),\n        c_double(z),\n        c_int(n),\n        t_arr,\n        gt_arr,\n        c_double(EPS),\n    )\n\n    # convert ctypes array to numpy\n    return (np.asarray(gt_arr[:]), success)\n'"
RepTate/theories/goLandscape_ctypes_helper.py,0,"b'""""""\nDefine the C-variables and functions from the C-files that are needed in Python\n""""""\n\nfrom ctypes import c_double, CDLL\nimport sys\nimport os\n\ndir_path = os.path.dirname(\n    os.path.realpath(__file__)\n)  # get the directory path of current file\nif sys.maxsize > 2 ** 32:\n    # 64-bit system\n    lib_path = os.path.join(dir_path, ""landscape_%s.so"" % (sys.platform))\nelse:\n    # 32-bit system\n    lib_path = os.path.join(dir_path, ""landscape_%s_i686.so"" % (sys.platform))\n\ntry:\n    landscape_function_lib = CDLL(lib_path)\nexcept:\n    print(""OS %s not recognized"" % (sys.platform))\n\npython_c_landscape = landscape_function_lib.landscape\npython_c_landscape.restype = c_double\n\ndef GO_Landscape(NT, epsilon, mu):\n    """"""Wrapper functions to call c code to compute quiescent landscape""""""\n    c_doub_NT = (c_double)(NT)\n    c_doub_mu = (c_double)(mu)\n    c_doub_epsilon = (c_double)(epsilon)\n    return python_c_landscape(c_doub_NT, c_doub_mu, c_doub_epsilon)\n\n'"
RepTate/theories/kww_ctypes_helper.py,0,"b'""""""\nDefine the C-variables and functions from the C-files that are needed in Python\n""""""\nfrom ctypes import c_double, CDLL\nimport sys\nimport os\n\ndir_path = os.path.dirname(\n    os.path.realpath(__file__)\n)  # get the directory path of current file\nif sys.maxsize > 2 ** 32:\n    # 64-bit system\n    lib_path = os.path.join(dir_path, ""kww_lib_%s.so"" % (sys.platform))\nelse:\n    # 32-bit system\n    lib_path = os.path.join(dir_path, ""kww_lib_%s_i686.so"" % (sys.platform))\ntry:\n    kww_lib = CDLL(lib_path)\nexcept:\n    print(""OS %s not recognized in DTD CH"" % (sys.platform))\n\nkwwc = kww_lib.kwwc\nkwwc.argtypes = [c_double, c_double]\nkwwc.restype = c_double\nkwws = kww_lib.kwws\nkwws.argtypes = [c_double, c_double]\nkwws.restype = c_double\n\n'"
RepTate/theories/react_ctypes_helper.py,24,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""\nDefine the C-variables and functions from the C-files that are needed in Python\n""""""\nimport numpy as np\nimport ctypes as ct\nimport sys\nimport os\n\ndir_path = os.path.dirname(\n    os.path.realpath(__file__)\n)  # get the directory path of current file\nif sys.maxsize > 2 ** 32:\n    # 64-bit system\n    lib_path = os.path.join(dir_path, ""react_lib_%s.so"" % (sys.platform))\nelse:\n    # 32-bit system\n    lib_path = os.path.join(dir_path, ""react_lib_%s_i686.so"" % (sys.platform))\ntry:\n    react_lib = ct.CDLL(lib_path)\nexcept:\n    print(""OS %s not recognized in React CH module"" % (sys.platform))\n\n###############\n# polybits.c\n###############\n\n\n# struct\nclass polybits_global_const(ct.Structure):\n    _fields_ = [\n        (""maxbobbins"", ct.c_int),\n        (""maxmwdbins"", ct.c_int),\n        (""maxarm"", ct.c_int),\n        (""maxpol"", ct.c_int),\n        (""maxreact"", ct.c_int),\n        (""MAX_RLEVEL"", ct.c_int),\n        (""MAX_NBR"", ct.c_int),\n    ]\n\n\nclass polybits_global(ct.Structure):\n    _fields_ = [\n        (""first_in_pool"", ct.c_int),\n        (""first_poly_in_pool"", ct.c_int),\n        (""first_dist_in_pool"", ct.c_int),\n        (""mmax"", ct.c_int),\n        (""num_react"", ct.c_int),\n        (""arms_left"", ct.c_int),\n        (""react_pool_initialised"", ct.c_bool),\n        (""react_pool_declared"", ct.c_bool),\n        (""arms_avail"", ct.c_bool),\n        (""polys_avail"", ct.c_bool),\n        (""dists_avail"", ct.c_bool),\n    ]\n\n\nclass arm(ct.Structure):\n    _fields_ = [\n        (""arm_len"", ct.c_double),\n        (""arm_conv"", ct.c_double),\n        (""arm_time"", ct.c_double),\n        (""arm_tm"", ct.c_double),\n        (""arm_tddb"", ct.c_double),\n        (""L1"", ct.c_int),\n        (""L2"", ct.c_int),\n        (""R1"", ct.c_int),\n        (""R2"", ct.c_int),\n        (""up"", ct.c_int),\n        (""down"", ct.c_int),\n        (""armnum"", ct.c_int),\n        (""armcat"", ct.c_int),\n        (""ended"", ct.c_int),\n        (""endfin"", ct.c_int),\n        (""scission"", ct.c_int),\n        (""senio"", ct.c_int),\n        (""prio"", ct.c_int),\n    ]\n\n\nclass polymer(ct.Structure):\n    _fields_ = [\n        (""first_end"", ct.c_int),\n        (""num_br"", ct.c_int),\n        (""bin"", ct.c_int),\n        (""num_sat"", ct.c_int),\n        (""num_unsat"", ct.c_int),\n        (""armnum"", ct.c_int),\n        (""nextpoly"", ct.c_int),\n        (""tot_len"", ct.c_double),\n        (""gfactor"", ct.c_double),\n        (""saved"", ct.c_bool),\n        (""max_senio"", ct.c_int),\n        (""max_prio"", ct.c_int),\n    ]\n\n\nclass reactresults(ct.Structure):\n    _fields_ = [\n        (""wt"", ct.POINTER(ct.c_double)),\n        (""avbr"", ct.POINTER(ct.c_double)),\n        (""wmass"", ct.POINTER(ct.c_double)),\n        (""avg"", ct.POINTER(ct.c_double)),\n        (""lgmid"", ct.POINTER(ct.c_double)),\n        (""numinbin"", ct.POINTER(ct.c_int)),\n        (""numin_armwt_bin"", ct.POINTER(ct.c_int)),\n        (""numin_num_br_bin"", ct.POINTER(ct.c_int)),\n        (""num_armwt_bin"", ct.c_int),\n        (""max_num_br"", ct.c_int),\n        (""monmass"", ct.c_double),\n        (""M_e"", ct.c_double),\n        (""N_e"", ct.c_double),\n        (""boblgmin"", ct.c_double),\n        (""boblgmax"", ct.c_double),\n        (""m_w"", ct.c_double),\n        (""m_n"", ct.c_double),\n        (""brav"", ct.c_double),\n        (""m_z"", ct.c_double),\n        (""m_zp1"", ct.c_double),\n        (""m_zp2"", ct.c_double),\n        (""first_poly"", ct.c_int),\n        (""next"", ct.c_int),\n        (""nummwdbins"", ct.c_int),\n        (""numbobbins"", ct.c_int),\n        (""bobbinmax"", ct.c_int),\n        (""nsaved"", ct.c_int),\n        (""npoly"", ct.c_int),\n        (""simnumber"", ct.c_int),\n        (""polysaved"", ct.c_bool),\n        (""name"", ct.c_char_p),\n        (""wlin"", ct.c_double),\n        (""wstar"", ct.c_double),\n        (""wH"", ct.c_double),\n        (""w7arm"", ct.c_double),\n        (""wcomb"", ct.c_double),\n        (""wother"", ct.c_double),\n        (""nlin"", ct.c_int),\n        (""nstar"", ct.c_int),\n        (""nH"", ct.c_int),\n        (""n7arm"", ct.c_int),\n        (""ncomb"", ct.c_int),\n        (""nother"", ct.c_int),\n        (""nsaved_arch"", ct.c_int),\n        (""arch_minwt"", ct.c_double),\n        (""arch_maxwt"", ct.c_double),\n    ]\n\n\n# global variable\npb_global_const = polybits_global_const.in_dll(react_lib, ""pb_global_const"")\npb_global = polybits_global.in_dll(react_lib, ""pb_global"")\n\n# pointer\narm_pointer = ct.POINTER(arm)\narm_pointers = arm_pointer * (pb_global_const.maxarm + 1)\n\npolymer_pointer = ct.POINTER(polymer)\npolymer_pointers = polymer_pointer * (pb_global_const.maxpol + 1)\n\nreactresults_pointer = ct.POINTER(reactresults)\nreactresults_pointers = reactresults_pointer * (pb_global_const.maxreact + 1)\n\n# function\nreact_pool_init = react_lib.react_pool_init\nreact_pool_init.restype = None\n\nrequest_dist = react_lib.request_dist\nrequest_dist.restype = ct.c_bool\n\nreturn_dist_polys = react_lib.return_dist_polys\nreturn_dist_polys.restype = None\n\nreturn_dist = react_lib.return_dist\nreturn_dist.restype = None\n\nrequest_poly = react_lib.request_poly\nrequest_poly.restype = ct.c_bool\n\n# return_arm_pool = react_lib.return_arm_pool\n# return_arm_pool.restype = arm_pointer\n\n# return_br_poly = react_lib.return_br_poly\n# return_br_poly.restype = polymer_pointer\n\nreturn_react_dist = react_lib.return_react_dist\nreturn_react_dist.restype = reactresults_pointer\n\nset_br_poly_nextpoly = react_lib.set_br_poly_nextpoly\nset_br_poly_nextpoly.restype = None\n\nincrease_arm_records_in_arm_pool = react_lib.increase_arm_records_in_arm_pool\nincrease_arm_records_in_arm_pool.restype = ct.c_bool\n\nincrease_polymer_records_in_br_poly = react_lib.increase_polymer_records_in_br_poly\nincrease_polymer_records_in_br_poly.restype = ct.c_bool\n\nincrease_dist_records_in_react_dist = react_lib.increase_dist_records_in_react_dist\nincrease_dist_records_in_react_dist.restype = ct.c_bool\n\nset_do_prio_senio = react_lib.set_do_prio_senio\nset_do_prio_senio.restype = None\n\nset_flag_stop_all = react_lib.set_flag_stop_all\nset_flag_stop_all.restype = None\n\ninit_bin_prio_vs_senio = react_lib.init_bin_prio_vs_senio\ninit_bin_prio_vs_senio.restype = None\ninit_bin_prio_vs_senio.argtypes = [ct.c_int]\n\nreturn_avarmlen_v_senio = react_lib.return_avarmlen_v_senio\nreturn_avarmlen_v_senio.restype = ct.c_double\n\nreturn_avarmlen_v_prio = react_lib.return_avarmlen_v_prio\nreturn_avarmlen_v_prio.restype = ct.c_double\n\nreturn_avprio_v_senio = react_lib.return_avprio_v_senio\nreturn_avprio_v_senio.restype = ct.c_double\n\nreturn_avsenio_v_prio = react_lib.return_avsenio_v_prio\nreturn_avsenio_v_prio.restype = ct.c_double\n\nreturn_proba_prio = react_lib.return_proba_prio\nreturn_proba_prio.restype = ct.c_double\n\nreturn_max_prio = react_lib.return_max_prio\nreturn_max_prio.restype = ct.c_int\n\nreturn_proba_senio = react_lib.return_proba_senio\nreturn_proba_senio.restype = ct.c_double\n\nreturn_max_senio = react_lib.return_max_senio\nreturn_max_senio.restype = ct.c_int\n\n# initialise lists\nreact_dist = None\n\n\ndef link_react_dist():\n    """"""link the Python list react_dist with the C array react_dist""""""\n    global reactresults_pointers\n    global react_dist\n    reactresults_pointers = reactresults_pointer * (pb_global_const.maxreact + 1)\n    react_dist = reactresults_pointers(\n        *list(\n            [\n                return_react_dist(ct.c_int(i))\n                for i in range(pb_global_const.maxreact + 1)\n            ]\n        )\n    )\n\n\nreact_pool_init()\nlink_react_dist()\n\n###############\n# tobitabatch.c\n###############\n\n\n# struct\nclass tobitabatch_global(ct.Structure):\n    _fields_ = [(""tobbatchnumber"", ct.c_int), (""tobitabatcherrorflag"", ct.c_bool)]\n\n\n# global variable\ntb_global = tobitabatch_global.in_dll(react_lib, ""tb_global"")\n\n# function\ntobbatchstart = react_lib.tobbatchstart\ntobbatchstart.restype = None\n\ntobbatch = react_lib.tobbatch\ntobbatch.restype = ct.c_bool\n\n###############\n# binsandbob.c\n###############\n\n\n# struct\nclass binsandbob_global(ct.Structure):\n    _fields_ = [\n        (""multi_m_w"", ct.c_double),\n        (""multi_m_n"", ct.c_double),\n        (""multi_brav"", ct.c_double),\n        (""multi_nummwdbins"", ct.c_int),\n    ]\n\n\n# global variable\nbab_global = binsandbob_global.in_dll(react_lib, ""bab_global"")\n\n# function\nmolbin = react_lib.molbin\nmolbin.restype = None\n\npolyconfwrite = react_lib.polyconfwrite\npolyconfwrite.restype = None\n\nmultipolyconfwrite = react_lib.multipolyconfwrite\nmultipolyconfwrite.restype = ct.c_ulonglong\n\nmultimolbin = react_lib.multimolbin\nmultimolbin.restype = None\n\nreturn_binsandbob_multi_avbr = react_lib.return_binsandbob_multi_avbr\nreturn_binsandbob_multi_avbr.restype = ct.c_double\n\nreturn_binsandbob_multi_avg = react_lib.return_binsandbob_multi_avg\nreturn_binsandbob_multi_avg.restype = ct.c_double\n\nreturn_binsandbob_multi_lgmid = react_lib.return_binsandbob_multi_lgmid\nreturn_binsandbob_multi_lgmid.restype = ct.c_double\n\nreturn_binsandbob_multi_wmass = react_lib.return_binsandbob_multi_wmass\nreturn_binsandbob_multi_wmass.restype = ct.c_double\n\nreturn_binsandbob_multi_wt = react_lib.return_binsandbob_multi_wt\nreturn_binsandbob_multi_wt.restype = ct.c_double\n\nset_react_dist_monmass = react_lib.set_react_dist_monmass\nset_react_dist_monmass.restype = ct.c_double\n\nset_react_dist_M_e = react_lib.set_react_dist_M_e\nset_react_dist_M_e.restype = ct.c_double\n\n###############\n# tobitaCSTR.c\n###############\n\n\n# struct\nclass tobitaCSTR_global(ct.Structure):\n    _fields_ = [(""tobCSTRnumber"", ct.c_int), (""tobitaCSTRerrorflag"", ct.c_bool)]\n\n\n# global variable\ntCSTR_global = tobitaCSTR_global.in_dll(react_lib, ""tCSTR_global"")\n\n# function\ntobCSTRstart = react_lib.tobCSTRstart\ntobCSTRstart.restype = None\n\ntobCSTR = react_lib.tobCSTR\ntobCSTR.restype = ct.c_bool\n\n###############\n# dieneCSTR.c\n###############\n\n\n# struct\nclass dieneCSTR_global(ct.Structure):\n    _fields_ = [(""dieneCSTRnumber"", ct.c_int), (""dieneCSTRerrorflag"", ct.c_bool)]\n\n\n# global variable\ndCSTR_global = dieneCSTR_global.in_dll(react_lib, ""dCSTR_global"")\n\n# function\ndieneCSTRstart = react_lib.dieneCSTRstart\ndieneCSTRstart.restype = None\n\ndieneCSTR = react_lib.dieneCSTR\ndieneCSTR.restype = ct.c_bool\n\n################\n# MultiMetCSTR.c\n################\n\n\n# struct\nclass mulmetCSTR_global(ct.Structure):\n    _fields_ = [(""mulmetCSTRnumber"", ct.c_int), (""mulmetCSTRerrorflag"", ct.c_bool)]\n\n\n# global variable\nMMCSTR_global = mulmetCSTR_global.in_dll(react_lib, ""MMCSTR_global"")\n\n# function\nmulmetCSTRstart = react_lib.mulmetCSTRstart\nmulmetCSTRstart.restype = None\n\nmulmetCSTR = react_lib.mulmetCSTR\nmulmetCSTR.restype = ct.c_bool\n\n#############\n# Other\n############\n\n\ndef end_print(parent_theory, ndist, do_architecture):\n    """"""Print the simulation information at the end of the run. \n    Print priority and seniority information if needed""""""\n    parent_theory.Qprint(""<b>Simulation Results:</b>"")\n\n    table = []\n    table.append(["""", """"])  # no header\n    table.append([""Polymer made"", ""%d"" % react_dist[ndist].contents.npoly])\n    table.append([""Polymer saved"", ""%d"" % react_dist[ndist].contents.nsaved])\n    table.append([""Arm left in memory"", ""%d"" % pb_global.arms_left])\n    table.append([""Mn (g/mol)"", ""%.3g"" % react_dist[ndist].contents.m_n])\n    table.append([""Mw (g/mol)"", ""%.3g"" % react_dist[ndist].contents.m_w])\n    table.append([""Mz (g/mol)"", ""%.3g"" % react_dist[ndist].contents.m_z])\n    table.append([""Mz+1 (g/mol)"", ""%.3g"" % react_dist[ndist].contents.m_zp1])\n    table.append([""Mz+2 (g/mol)"", ""%.3g"" % react_dist[ndist].contents.m_zp2])\n    table.append([""Br/1000C"", ""%.3g"" % react_dist[ndist].contents.brav])\n    table.append([""Max br"", ""%d"" % react_dist[ndist].contents.max_num_br])\n    parent_theory.Qprint(table)\n\n    if do_architecture:\n        nlin = react_dist[ndist].contents.nlin\n        nstar = react_dist[ndist].contents.nstar\n        nH = react_dist[ndist].contents.nH\n        n7arm = react_dist[ndist].contents.n7arm\n        ncomb = react_dist[ndist].contents.ncomb\n        nother = react_dist[ndist].contents.nother\n        #\n        wlin = react_dist[ndist].contents.wlin\n        wstar = react_dist[ndist].contents.wstar\n        wH = react_dist[ndist].contents.wH\n        w7arm = react_dist[ndist].contents.w7arm\n        wcomb = react_dist[ndist].contents.wcomb\n        wother = react_dist[ndist].contents.wother\n\n        name_list = [""Linear"", ""Star"", ""H"", ""7-arm"", ""Comb"", ""Other""]\n        nlist = [nlin, nstar, nH, n7arm, ncomb, nother]\n        wlist = [wlin, wstar, wH, w7arm, wcomb, wother]\n        for i, n in enumerate(nlist):\n            if n != 0:\n                wlist[i] = wlist[i] / n\n\n        norm = react_dist[ndist].contents.nsaved_arch / 100\n        if norm != 0:\n            parent_theory.Qprint(\n                ""<b>Architecture of %d Polymers: %.3g &lt; M &lt; %.3g g/mol:</b>""\n                % (\n                    react_dist[ndist].contents.nsaved_arch,\n                    parent_theory.xmin,\n                    parent_theory.xmax,\n                )\n            )\n            table = """"""<table border=""1"" width=""100%"">""""""\n            table += (\n                """"""<tr><th>Type</th><th>Prop.</th><th>&lt;Mw&gt; (g/mol)</th></tr>""""""\n            )\n            for i in range(len(nlist)):\n                table += """"""<tr><td>%s</td><td>%.3g%%</td><td>%.3g</td></tr>"""""" % (\n                    name_list[i],\n                    nlist[i] / norm,\n                    wlist[i],\n                )\n            table += """"""</table><br>""""""\n            parent_theory.Qprint(table)\n\n\ndef prio_and_senio(parent_theory, f, ndist, do_architecture):\n    """"""Get the arm length prob. distr. and priority vs seniority form C and save it in the\n    theory DataTable""""""\n    tt = parent_theory.tables[f.file_name_short]\n    # arm length\n    lgmax = np.log10(react_dist[ndist].contents.arch_maxwt * 1.01)\n    lgmin = np.log10(react_dist[ndist].contents.monmass / 1.01)\n    num_armwt_bin = react_dist[ndist].contents.num_armwt_bin\n    lgstep = (lgmax - lgmin) / (1.0 * num_armwt_bin)\n    tmp_x = np.power(\n        10,\n        [lgmin + ibin * lgstep - 0.5 * lgstep for ibin in range(1, num_armwt_bin + 1)],\n    )\n    tmp_y = [\n        react_dist[ndist].contents.numin_armwt_bin[ibin]\n        for ibin in range(1, num_armwt_bin + 1)\n    ]\n    # trim right zeros\n    tmp_y = np.trim_zeros(tmp_y, ""b"")\n    new_len = len(tmp_y)\n    tmp_x = tmp_x[:new_len]\n    # trim left zeros\n    tmp_y = np.trim_zeros(tmp_y, ""f"")\n    new_len = len(tmp_y)\n    tmp_x = tmp_x[-new_len:]\n\n    tt.extra_tables[""proba_arm_wt""] = np.zeros((new_len, 2))\n    tt.extra_tables[""proba_arm_wt""][:, 0] = tmp_x\n    tt.extra_tables[""proba_arm_wt""][:, 1] = tmp_y\n    # normalize\n    try:\n        tt.extra_tables[""proba_arm_wt""][:, 1] /= tt.extra_tables[""proba_arm_wt""][\n            :, 1\n        ].sum()\n    except ZeroDivisionError:\n        pass\n\n    # number of branch points branch point\n    max_num_br = react_dist[ndist].contents.max_num_br\n\n    # if max_num_br < 100:\n    rmax = min(max_num_br + 1, pb_global_const.MAX_NBR)\n    tt.extra_tables[""proba_br_pt""] = np.zeros((max_num_br + 1, 2))\n    tt.extra_tables[""proba_br_pt""][:, 0] = np.arange(max_num_br + 1)\n    tt.extra_tables[""proba_br_pt""][:, 1] = [\n        react_dist[ndist].contents.numin_num_br_bin[i] for i in range(max_num_br + 1)\n    ]\n    try:\n        tt.extra_tables[""proba_br_pt""][:, 1] /= tt.extra_tables[""proba_br_pt""][\n            :, 1\n        ].sum()\n    except ZeroDivisionError:\n        pass\n    # else:\n    #     # bin the data\n    #     tmp_x = list(np.arange(max_num_br + 1))\n    #     tmp_y = [react_dist[ndist].contents.numin_num_br_bin[i] for i in range(max_num_br + 1)]\n    #     hist, bin_edge = np.histogram(tmp_x, bins=20, weights=tmp_y, density=True)\n    #     tt.extra_tables[\'proba_br_pt\'] = np.zeros((len(hist), 2))\n    #     tt.extra_tables[\'proba_br_pt\'][:, 0] = np.diff(bin_edge) / 2 + bin_edge[:-1]\n    #     tt.extra_tables[\'proba_br_pt\'][:, 1] = hist\n\n    if not do_architecture:\n        return\n    # P&S\n    max_prio = return_max_prio()\n    max_senio = return_max_senio()\n\n    avarmlen_v_senio = [\n        return_avarmlen_v_senio(ct.c_int(s), ct.c_int(ndist))\n        for s in range(1, max_senio + 1)\n    ]\n    avarmlen_v_prio = [\n        return_avarmlen_v_prio(ct.c_int(p), ct.c_int(ndist))\n        for p in range(1, max_prio + 1)\n    ]\n\n    avprio_v_senio = [\n        return_avprio_v_senio(ct.c_int(s)) for s in range(1, max_senio + 1)\n    ]\n    avsenio_v_prio = [\n        return_avsenio_v_prio(ct.c_int(p)) for p in range(1, max_prio + 1)\n    ]\n\n    proba_senio = [return_proba_senio(ct.c_int(s)) for s in range(1, max_senio + 1)]\n    proba_prio = [return_proba_prio(ct.c_int(p)) for p in range(1, max_prio + 1)]\n\n    tt.extra_tables[""avarmlen_v_senio""] = np.zeros((max_senio, 2))\n    tt.extra_tables[""avarmlen_v_senio""][:, 0] = np.arange(1, max_senio + 1)\n    tt.extra_tables[""avarmlen_v_senio""][:, 1] = avarmlen_v_senio[:]\n\n    tt.extra_tables[""avarmlen_v_prio""] = np.zeros((max_prio, 2))\n    tt.extra_tables[""avarmlen_v_prio""][:, 0] = np.arange(1, max_prio + 1)\n    tt.extra_tables[""avarmlen_v_prio""][:, 1] = avarmlen_v_prio[:]\n\n    tt.extra_tables[""avprio_v_senio""] = np.zeros((max_senio, 2))\n    tt.extra_tables[""avprio_v_senio""][:, 0] = np.arange(1, max_senio + 1)\n    tt.extra_tables[""avprio_v_senio""][:, 1] = avprio_v_senio[:]\n\n    tt.extra_tables[""avsenio_v_prio""] = np.zeros((max_prio, 2))\n    tt.extra_tables[""avsenio_v_prio""][:, 0] = np.arange(1, max_prio + 1)\n    tt.extra_tables[""avsenio_v_prio""][:, 1] = avsenio_v_prio[:]\n\n    tt.extra_tables[""proba_senio""] = np.zeros((max_senio, 2))\n    tt.extra_tables[""proba_senio""][:, 0] = np.arange(1, max_senio + 1)\n    tt.extra_tables[""proba_senio""][:, 1] = proba_senio[:]\n\n    tt.extra_tables[""proba_prio""] = np.zeros((max_prio, 2))\n    tt.extra_tables[""proba_prio""][:, 0] = np.arange(1, max_prio + 1)\n    tt.extra_tables[""proba_prio""][:, 1] = proba_prio[:]\n\n'"
RepTate/theories/react_gui_tools.py,7,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\nimport sys\nimport os\nimport numpy as np\nimport ctypes as ct\nimport RepTate\nimport RepTate.theories.react_ctypes_helper as rch\n\n# BoB form\nfrom PyQt5.QtWidgets import (\n    QDialog,\n    QToolBar,\n    QVBoxLayout,\n    QHBoxLayout,\n    QDialogButtonBox,\n    QLineEdit,\n    QGroupBox,\n    QFormLayout,\n    QLabel,\n    QFileDialog,\n    QRadioButton,\n    QSpinBox,\n    QGridLayout,\n    QSizePolicy,\n    QScrollArea,\n    QWidget,\n    QCheckBox,\n    QMessageBox,\n    QFrame,\n)\nfrom PyQt5.QtGui import QIntValidator, QDoubleValidator, QIcon\nfrom PyQt5.QtCore import QSize, Qt\nimport psutil\n\nif sys.platform == ""darwin"" or sys.platform == ""linux"":\n    CHARCODE = ""utf-8""\nelse:\n    CHARCODE = ""latin-1""\n\ndef launch_mix_dialog(parent_theory):\n    """"""Launch a dialog box to select the React-Mix theory parameters""""""\n    dialog = ParameterReactMix(parent_theory)\n    if dialog.exec_():\n        parent_theory.success_dialog = True\n    else:\n        parent_theory.success_dialog = False\n\n\ndef launch_mulmet_dialog(parent_theory):\n    """"""Launch a dialog box to select the Multi-Metallocene theory parameters""""""\n    dialog = ParameterMultiMetCSTR(parent_theory)\n    if dialog.exec_():\n        parent_theory.success_dialog = True\n    else:\n        parent_theory.success_dialog = False\n\n\ndef request_more_polymer(parent_theory):\n    """"""Generic function called when run out of polymers""""""\n    success_increase_memory = None\n    new_max, success_increase_memory = handle_increase_records(parent_theory, ""polymer"")\n    if not success_increase_memory:\n        message = ""<b>Ran out of storage for polymer records.</b> Options to avoid this are:<br>""\n        message += ""(1) Reduce number of polymers requested</b>""\n        message += ""(2) Close some other theories""\n        parent_theory.Qprint(message)\n    else:\n        parent_theory.Qprint(""Number of polymers was increased to %.4g"" % new_max)\n\n    parent_theory.success_increase_memory = success_increase_memory\n\n\ndef request_more_arm(parent_theory):\n    """"""Generic function called when run out of arms""""""\n    success_increase_memory = None\n    new_max, success_increase_memory = handle_increase_records(parent_theory, ""arm"")\n    if not success_increase_memory:\n        message = (\n            ""<b>Ran out of storage for arm records.</b> Options to avoid this are:<br>""\n        )\n        message += ""(1) Reduce number of polymers requested<br>""\n        message += ""(2) Adjust BoB parameters so that fewer polymers are saved<br>""\n        message += ""(3) Close some other theories<br>""\n        message += ""(4) Adjust parameters to avoid gelation""\n        parent_theory.Qprint(message)\n        # i = numtomake\n        # rch.tCSTR_global.tobitaCSTRerrorflag = True\n    else:\n        parent_theory.Qprint(""Number of arms was increased to %.4g"" % new_max)\n    parent_theory.success_increase_memory = success_increase_memory\n\n\ndef request_more_dist(parent_theory):\n    """"""Generic function called when run out of distributions""""""\n    success_increase_memory = None\n    new_max, success_increase_memory = handle_increase_records(parent_theory, ""dist"")\n    if success_increase_memory:\n        rch.link_react_dist()  # re-link the python array with the C array\n        parent_theory.Qprint(""Number of dist. was increased to %.4g"" % new_max)\n        parent_theory.handle_actionCalculate_Theory()\n    else:\n        parent_theory.Qprint(\n            \'<b>Too many theories open for internal storage.<b> Please close a theory or increase records""\'\n        )\n\n\ndef set_extra_data(parent_theory, extra_data):\n    try:\n        if extra_data[""prio_senio_checked""] == 1:\n            handle_btn_prio_senio(parent_theory, True)\n    except Exception as e:\n        print(""set_extra_data"", e)\n\n\ndef get_extra_data(parent_theory):\n    try:\n        parent_theory.extra_data[""prio_senio_checked""] = int(\n            parent_theory.do_priority_seniority\n        )\n    except Exception as e:\n        print(""get_extra_data"", e)\n\n\ndef initialise_tool_bar(parent_theory):\n    """"""Add icons in theory toolbar""""""\n    # disable buttons\n    parent_theory.parent_dataset.actionMinimize_Error.setDisabled(True)\n    # parent_theory.parent_dataset.actionCalculate_Theory.setDisabled(True)\n    # parent_theory.parent_dataset.actionShow_Limits.setDisabled(True)\n    # parent_theory.parent_dataset.actionVertical_Limits.setDisabled(True)\n    parent_theory.parent_dataset.actionHorizontal_Limits.setDisabled(True)\n\n    ######toolbar\n    tb = QToolBar()\n    tb.setIconSize(QSize(24, 24))\n    parent_theory.thToolsLayout.insertWidget(0, tb)\n\n    # BOB settings buttons\n    parent_theory.bob_settings_button = tb.addAction(\n        QIcon("":/Icon8/Images/new_icons/icons8-BoB-settings.png""),\n        ""Edit BoB Binning Settings"",\n    )\n    parent_theory.save_bob_configuration_button = tb.addAction(\n        QIcon("":/Icon8/Images/new_icons/icons8-save-BoB.png""),\n        ""Save Polymer Configuration for BoB"",\n    )\n\n    # seniority priority\n    parent_theory.btn_prio_senio = tb.addAction(\n        QIcon("":/Icon8/Images/new_icons/priority_seniority.png""),\n        ""Calculate Priority and Seniority (can take some time)"",\n    )\n    parent_theory.btn_prio_senio.setCheckable(True)\n    parent_theory.btn_prio_senio.setChecked(parent_theory.do_priority_seniority)\n    parent_theory.old_views = []\n\n    # signals\n    connection_id = parent_theory.bob_settings_button.triggered.connect(\n        parent_theory.handle_edit_bob_settings\n    )\n    connection_id = parent_theory.save_bob_configuration_button.triggered.connect(\n        parent_theory.handle_save_bob_configuration\n    )\n    parent_theory.btn_prio_senio.triggered.connect(parent_theory.handle_btn_prio_senio)\n\n\ndef handle_btn_prio_senio(parent_theory, checked):\n    """"""Change do_priority_seniority""""""\n    parent_theory.do_priority_seniority = checked\n    app = parent_theory.parent_dataset.parent_application\n    app.viewComboBox.blockSignals(True)\n    if checked and (app.viewComboBox.count() < len(app.views)):\n        app.nplots = min(app.nplot_max, app.nplots + 1)\n        app.multiviews[app.nplots - 1] = app.views[app.extra_view_names[0]]\n        for view_name in app.extra_view_names:\n            app.viewComboBox.addItems(\n                [app.views[view_name].name,]\n            )\n            app.viewComboBox.setItemData(\n                app.viewComboBox.count() - 1,\n                app.views[view_name].description,\n                Qt.ToolTipRole,\n            )\n        app.multiplots.reorg_fig(app.nplots)\n    elif (not checked) and (app.viewComboBox.count() == len(app.views)):\n        ps_view = False\n        for i, view in enumerate(app.multiviews):\n            if view.name in app.extra_view_names:\n                app.multiviews[i] = app.views[app.viewComboBox.itemText(i)]\n                ps_view = True\n        if ps_view:\n            app.nplots = max(1, app.nplots - 1)\n            app.multiplots.reorg_fig(app.nplots)\n        for _ in app.extra_view_names:\n            app.viewComboBox.removeItem(app.viewComboBox.count() - 1)\n    parent_theory.parent_dataset.toggle_vertical_limits(checked)\n    app.viewComboBox.blockSignals(False)\n\n\ndef show_theory_extras(parent_theory, show):\n    """"""Change the number of plots when current theory is changed\n    Show/Hide the extra plot""""""\n    app = parent_theory.parent_dataset.parent_application\n    app.viewComboBox.blockSignals(True)\n    hide = not show\n    if show and parent_theory.do_priority_seniority:\n        # show extra figure\n        app.nplots = min(app.nplot_max, app.nplots + 1)\n        if parent_theory.old_views:\n            app.multiviews = parent_theory.old_views\n        else:\n            app.multiviews[app.nplots - 1] = app.views[app.extra_view_names[0]]\n        if app.viewComboBox.count() < len(app.views):\n            for view_name in app.extra_view_names:\n                app.viewComboBox.addItems(\n                    [app.views[view_name].name,]\n                )\n                app.viewComboBox.setItemData(\n                    app.viewComboBox.count() - 1,\n                    app.views[view_name].description,\n                    Qt.ToolTipRole,\n                )\n        app.multiplots.reorg_fig(app.nplots)\n    elif hide and parent_theory.do_priority_seniority and parent_theory.active:\n        # remove extra figure\n        app.nplots = max(1, app.nplots - 1)\n        app.multiplots.reorg_fig(app.nplots)\n        parent_theory.old_views = [v for v in app.multiviews]\n        new_multiviews = [v for v in app.multiviews]\n\n        current_view_name = app.viewComboBox.currentText()\n        for i, view in enumerate(app.multiviews):\n            # remove extra view names from viewcombobox\n            if view.name in app.extra_view_names:\n                new_multiviews[i] = app.views[app.viewComboBox.itemText(i)]\n                if view.name == current_view_name:\n                    app.current_view = new_multiviews[i]\n                    app.viewComboBox.setCurrentIndex(i)\n                    current_view_name = """"\n\n        app.multiviews = [v for v in new_multiviews]\n        if app.viewComboBox.count() == len(app.views):\n            for _ in range(len(app.extra_view_names)):\n                app.viewComboBox.removeItem(app.viewComboBox.count() - 1)\n    app.viewComboBox.blockSignals(False)\n\n\ndef theory_buttons_disabled(parent_theory, state):\n    """"""\n    Enable/Disable theory buttons, typically called at the start and stop of a calculation.\n    This is relevant in multithread mode only.\n    """"""\n    parent_theory.bob_settings_button.setDisabled(state)\n    parent_theory.save_bob_configuration_button.setDisabled(state)\n\n\ndef handle_save_mix_configuration(parent_theory):\n    """"""\n    Launch a dialog to select a filename where to save the polymer configurations.\n    Then call the C routine \'multipolyconfwrite\' that the data into the selected file\n    """"""\n    if not parent_theory.calcexists:\n        msg = \'<font color=green><b>No simulation performed yet. Press ""Calculate""</b></font>\'\n        parent_theory.Qprint(msg)\n        return\n\n    dist_state_check = False\n    for i in range(parent_theory.n_inmix):\n        dist = parent_theory.dists[i]\n        dist_state_check = dist_state_check or (\n            parent_theory.theory_simnumber[i] != rch.react_dist[dist].contents.simnumber\n        )\n    if dist_state_check:\n        message = (\n            ""Simulations have changed since last calculation. Redo calculation first""\n        )\n        msgbox = QMessageBox()\n        msgbox.setWindowTitle(""Error"")\n        msgbox.setText(message)\n        msgbox.exec_()\n        return\n\n    dialog = EditMixSaveParamDialog(parent_theory)\n    if not dialog.exec_():\n        return\n    dir_start = os.path.join(RepTate.root_dir, ""data"", ""React"", ""multipolyconf.dat"")\n    dilogue_name = ""Save""\n    out_file = QFileDialog.getSaveFileName(\n        parent_theory, dilogue_name, dir_start)\n    if out_file[0] == """":\n        parent_theory.Qprint(""Invalid filename"")\n        return\n    # output polymers\n    b_out_file = out_file[0].encode(CHARCODE)\n\n    c_weights = (ct.c_double * parent_theory.n_inmix)()\n    c_dists = (ct.c_int * parent_theory.n_inmix)()\n    for i in range(parent_theory.n_inmix):\n        c_weights[i] = ct.c_double(float(parent_theory.weights[i]))\n        c_dists[i] = ct.c_int(int(parent_theory.dists[i]))\n    n_out = rch.multipolyconfwrite(\n        ct.c_char_p(b_out_file), c_weights, c_dists, ct.c_int(parent_theory.n_inmix)\n    )\n\n    message = ""<hr>Saved %d polymers in %s"" % (n_out, out_file[0])\n    parent_theory.Qprint(message)\n\n\ndef handle_save_bob_configuration(parent_theory):\n    """"""\n    Launch a dialog to select a filename where to save the polymer configurations.\n    Then call the C routine \'polyconfwrite\' that the data into the selected file\n    """"""\n    if parent_theory.simexists:\n        ndist = parent_theory.ndist\n        rch.react_dist[ndist].contents.M_e = parent_theory.parameters[""Me""].value\n        rch.react_dist[ndist].contents.monmass = parent_theory.parameters[\n            ""mon_mass""\n        ].value\n\n        dir_start = os.path.join(RepTate.root_dir, ""data"", ""React"", ""polyconf.dat"")\n        dilogue_name = ""Save""\n        out_file = QFileDialog.getSaveFileName(\n            parent_theory, dilogue_name, dir_start)\n        if out_file[0] == """":\n            return\n        # output polymers\n        b_out_file = out_file[0].encode(CHARCODE)\n\n        rch.polyconfwrite(ct.c_int(ndist), ct.c_char_p(b_out_file))\n        message = ""<hr>Saved %d polymers in %s"" % (\n            rch.react_dist[ndist].contents.nsaved,\n            out_file[0],\n        )\n    else:\n        message = \'<font color=green><b>No simulation performed yet. Press ""Calculate""</b></font>\'\n    parent_theory.Qprint(message)\n\n\ndef handle_edit_bob_settings(parent_theory):\n    """"""Launch a dialog and modify the BoB binning settings if the user press ""OK"", else nothing happend.""""""\n    if parent_theory.simexists:\n        ndist = parent_theory.ndist\n        numbobbins = rch.react_dist[ndist].contents.numbobbins\n        bobmax = np.power(10, rch.react_dist[ndist].contents.boblgmax)\n        bobmin = np.power(10, rch.react_dist[ndist].contents.boblgmin)\n        bobbinmax = rch.react_dist[ndist].contents.bobbinmax\n\n        d = EditBobSettingsDialog(parent_theory, numbobbins, bobmax, bobmin, bobbinmax)\n        if d.exec_():\n            try:\n                numbobbins = int(d.e1.text())\n                bobmax = float(d.e2.text())\n                bobmin = float(d.e3.text())\n                bobbinmax = int(d.e4.text())\n            except ValueError:\n                pass\n            rch.react_dist[ndist].contents.numbobbins = ct.c_int(numbobbins)\n            rch.react_dist[ndist].contents.boblgmax = ct.c_double(np.log10(bobmax))\n            rch.react_dist[ndist].contents.boblgmin = ct.c_double(np.log10(bobmin))\n            rch.react_dist[ndist].contents.bobbinmax = ct.c_int(bobbinmax)\n    else:\n        message = \'<font color=green><b>No simulation performed yet. Press ""Calculate""</b></font>\'\n        parent_theory.Qprint(message)\n\n\ndef handle_increase_records(parent_theory, name):\n    """"""Launch a dialog asking if the user what to allocate more memory for arms, polymers, or distribution.\n        \'name\' should be ""arm"", ""polymer"", or ""dist"".\n        Return the new max value or zero if max value not changed\n    """"""\n    if name == ""arm"":\n        current_max = rch.pb_global_const.maxarm\n        f = rch.increase_arm_records_in_arm_pool\n        size_of = 75e-6  # size of an \'arm\' structure (MB) in C\n    elif name == ""polymer"":\n        current_max = rch.pb_global_const.maxpol\n        f = rch.increase_polymer_records_in_br_poly\n        size_of = 45e-6  # size of a \'polymer\' structure (MB) in C\n    elif name == ""dist"":\n        current_max = rch.pb_global_const.maxreact\n        f = rch.increase_dist_records_in_react_dist\n        size_of = 60097e-6  # size of a \'dist\' structure (MB) in C\n    else:\n        return 0, False\n    d = IncreaseRecordsDialog(\n        parent_theory, current_max, name, size_of\n    )  # create the dialog\n    if d.exec_():\n        if d.r1.isChecked():\n            new_max = int(np.ceil(current_max * 1.5))\n        if d.r2.isChecked():\n            new_max = int(current_max * 2)\n        if d.r3.isChecked():\n            new_max = int(current_max * 5)\n        success = f(\n            ct.c_int(new_max)\n        )  # call C routine to allocate more memory (using \'realloc\')\n        if not success:\n            parent_theory.Qprint(\n                ""Allocation of new memory failed. %d %s records in memory""\n                % (current_max, name)\n            )\n        return new_max, success\n    else:\n        return 0, False\n\n\n###################\n\n\nclass ParameterReactMix(QDialog):\n    """"""Create form to input the Mix parameters""""""\n\n    def __init__(self, parent_theory):\n        super().__init__(parent_theory)\n        self.parent_theory = parent_theory\n        self.opened_react_theories = []\n        self.list_all_open_react_theories()\n        self.make_lines()\n        self.createFormGroupBox(self.opened_react_theories)\n        buttonBox = QDialogButtonBox(\n            QDialogButtonBox.Apply | QDialogButtonBox.Ok | QDialogButtonBox.Cancel\n        )\n        buttonBox.accepted.connect(self.accept_)\n        buttonBox.rejected.connect(self.reject)\n        apply_button = buttonBox.button(QDialogButtonBox.Apply)\n        apply_button.clicked.connect(self.handle_apply)\n\n        # insert widgets\n        self.mainLayout = QVBoxLayout()\n        self.mainLayout.addWidget(self.scroll)\n        self.mainLayout.addWidget(buttonBox)\n        self.setLayout(self.mainLayout)\n        self.setWindowTitle(""Enter Mix Parameters"")\n\n    def accept_(self):\n        """"""\n        Triggered when \'OK\' button is pushed. Call \'get_lines()\'\n        \n        """"""\n        self.compute_weights()\n        self.get_lines()\n        self.accept()\n\n    def compute_weights(self):\n        """"""Update the \'weight\' column based on the \'ratio\' values""""""\n        sum_ratio = 0\n        self.parent_theory.ratios = []\n        self.parent_theory.include = []\n        for i in range(len(self.opened_react_theories)):\n            # IF \'is included?\' is checked and Ratio > 0\n            is_checked = self.lines[i][3].isChecked()\n            ratio = float(self.lines[i][4].text())\n            self.parent_theory.ratios.append(ratio)\n            self.parent_theory.include.append(int(is_checked))\n            if is_checked and ratio > 0:\n                sum_ratio += ratio\n\n        for i in range(len(self.opened_react_theories)):\n            is_checked = self.lines[i][3].isChecked()\n            ratio = float(self.lines[i][4].text())\n            if is_checked and ratio > 0:\n                weight = ratio / sum_ratio\n                self.lines[i][5].setText(""%.7g"" % weight)\n            else:\n                self.lines[i][3].setChecked(False)\n                self.lines[i][5].setText(""0"")\n\n    def handle_apply(self):\n        """"""\n        Update the values of \'is checked?\' and \'weight\' columns.\n        Triggered when \'Apply\' button is pushed.\n        \n        """"""\n        self.compute_weights()\n\n    def make_lines(self):\n        """"""Create the input-parameter-form lines with default parameter values""""""\n        dvalidator = QDoubleValidator()  # prevent letters etc.\n        dvalidator.setBottom(0)  # minimum allowed value\n        self.lines = []\n        for i, th in enumerate(self.opened_react_theories):\n            line = []\n            ndist = th.ndist\n            ds = th.parent_dataset\n            app = ds.parent_application\n            manager = app.parent_manager\n\n            # find application tab-name\n            app_index = manager.ApplicationtabWidget.indexOf(app)\n            app_tab_name = manager.ApplicationtabWidget.tabText(app_index)\n            # find dataset tab-name\n            ds_index = app.DataSettabWidget.indexOf(ds)\n            ds_tab_name = app.DataSettabWidget.tabText(ds_index)\n            # find theory tab-name\n            th_index = ds.TheorytabWidget.indexOf(th)\n            th_tab_name = ds.TheorytabWidget.tabText(th_index)\n\n            label = QLabel(""%s/%s/%s"" % (app_tab_name, ds_tab_name, th_tab_name))\n            label.setWordWrap(True)\n            line.append(label)\n            line.append(\n                QLabel(""%.4g"" % rch.react_dist[ndist].contents.npoly)\n            )  # no. generated\n            line.append(\n                QLabel(""%.4g"" % rch.react_dist[ndist].contents.nsaved)\n            )  # no. saved\n            checkbox = QCheckBox()\n            try:\n                checkbox.setChecked(bool(self.parent_theory.include[i]))\n            except IndexError:\n                checkbox.setChecked(True)\n            line.append(checkbox)  # is included? - checked by default\n            qledit = QLineEdit()\n            qledit.setValidator(dvalidator)\n            try:\n                qledit.setText(""%s"" % self.parent_theory.ratios[i])\n            except IndexError:\n                qledit.setText(""1"")\n            line.append(qledit)  # ratio\n            line.append(QLabel(""-""))  # weight\n            self.lines.append(line)\n\n    def get_lines(self):\n        """"""Called when \'OK\' is pressed""""""\n        self.parent_theory.dists = []\n        self.parent_theory.weights = []\n        self.parent_theory.theory_names = []\n        self.parent_theory.theory_simnumber = []\n\n        for i in range(len(self.opened_react_theories)):\n            if self.lines[i][3].isChecked():\n                ndist = self.opened_react_theories[i].ndist\n                self.parent_theory.dists.append(ndist)  # get ndist\n                self.parent_theory.weights.append(self.lines[i][5].text())  # get weight\n                self.parent_theory.theory_names.append(\n                    self.lines[i][0].text()\n                )  # get theory name\n                simnumber = rch.react_dist[ndist].contents.simnumber\n                self.parent_theory.theory_simnumber.append(\n                    simnumber\n                )  # get theory simulation number\n        self.parent_theory.n_inmix = len(\n            self.parent_theory.weights\n        )  # get number of included theories in mix\n\n    def createFormGroupBox(self, theory_list):\n        """"""Create a form to set the new values of mix parameters""""""\n        inner = QWidget()\n        layout = QGridLayout()\n        layout.setSpacing(10)\n\n        label = QLabel(""<b>App/Dataset/Theory</b>"")\n        label.setWordWrap(True)\n        layout.addWidget(label, 0, 1)\n\n        label = QLabel(""<b>No. generated</b>"")\n        label.setWordWrap(True)\n        layout.addWidget(label, 0, 2)\n\n        label = QLabel(""<b>No. saved</b>"")\n        label.setWordWrap(True)\n        layout.addWidget(label, 0, 3)\n\n        label = QLabel(""<b>Include?<</b>"")\n        label.setWordWrap(True)\n        layout.addWidget(label, 0, 4)\n\n        label = QLabel(""<b>Ratio<</b>"")\n        label.setWordWrap(True)\n        layout.addWidget(label, 0, 5)\n\n        label = QLabel(""<b>Weight fraction<</b>"")\n        label.setWordWrap(True)\n        layout.addWidget(label, 0, 6)\n\n        for i in range(len(theory_list)):\n            layout.addWidget(QLabel(""<b>%d</b>"" % (i + 1)), i + 1, 0)\n            for j in range(len(self.lines[0])):\n                layout.addWidget(self.lines[i][j], i + 1, j + 1)\n        inner.setLayout(layout)\n\n        # Scroll Area Properties\n        self.scroll = QScrollArea()\n        self.scroll.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)\n        self.scroll.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)\n        self.scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)\n        self.scroll.setWidgetResizable(True)\n        self.scroll.setWidget(inner)\n\n    def list_all_open_react_theories(self):\n        """"""List all opened React theories in RepTate, excluding the Mix theories""""""\n        self.opened_react_theories = []\n        current_manager = (\n            self.parent_theory.parent_dataset.parent_application.parent_manager\n        )\n\n        for app in current_manager.applications.values():\n            # list all opened apps\n            if app.appname == ""React"":\n                # select only React application\n                for ds in app.datasets.values():  # loop over datasets\n                    for th in ds.theories.values():  # loop over theories\n                        if (\n                            th.reactname not in [""ReactMix"", ""CreatePolyconf""]\n                            and th.simexists\n                        ):  # exclude React Mix and CreatePolyconf theories\n                            self.opened_react_theories.append(th)\n\n\n###################\n\n\nclass EditMixSaveParamDialog(QDialog):\n    """"""Create the form used to set distribution parameters of mix when saving""""""\n\n    def __init__(self, parent_theory):\n        super().__init__(parent_theory)\n        self.parent_theory = parent_theory\n        self.createFormGroupBox(parent_theory)\n\n        buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n        buttonBox.accepted.connect(self.accept_)\n        buttonBox.rejected.connect(self.reject)\n\n        mainLayout = QVBoxLayout()\n        mainLayout.addWidget(self.scroll)\n        mainLayout.addWidget(buttonBox)\n        self.setLayout(mainLayout)\n        self.setWindowTitle(""Distribution parameters check"")\n\n    def accept_(self):\n        self.get_lines()\n        self.accept()\n\n    def get_lines(self):\n        for i, dist in enumerate(\n            self.parent_theory.dists\n        ):  # loop over the distributions in mix\n            monmass = float(self.lines[i][1].text())\n            Me = float(self.lines[i][2].text())\n            rch.set_react_dist_monmass(ct.c_int(dist), ct.c_double(monmass))\n            rch.set_react_dist_M_e(ct.c_int(dist), ct.c_double(Me))\n\n    def createFormGroupBox(self, parent_theory):\n        """"""Create a form to set the new values of the parameters""""""\n\n        inner = QWidget()\n        layout = QGridLayout()\n        layout.setSpacing(10)\n\n        vlayout = QVBoxLayout()\n        qmessage = QLabel(\n            ""<p>Please check the values of monomer mass and Me used for each distribution in the mix.</p>\\\n<p>Note that BoB is not yet able to deal with mixtures of polymers with different Me.</p>""\n        )\n        qmessage.setWordWrap(True)\n        vlayout.addWidget(qmessage)\n        hline = QFrame()\n        hline.setFrameShape(QFrame.HLine)\n        hline.setFrameShadow(QFrame.Sunken)\n        vlayout.addWidget(hline)\n        layout.addLayout(vlayout, 0, 0, 1, -1)  # span all the columns\n\n        layout.addWidget(QLabel(""<b>App/Theory</b>""), 1, 1)\n        layout.addWidget(QLabel(""<b>Monomer Mass</b>""), 1, 2)\n        label = QLabel(""<b>M<sub>e</sub></b>"")\n        label.setMinimumWidth(\n            100\n        )  # prevent too small size of the QLineEdit when resizing\n        layout.addWidget(label, 1, 3)\n\n        self.lines = []\n        dvalidator = QDoubleValidator()  # prevent letters etc.\n        dvalidator.setBottom(0)  # minimum allowed value\n        for i, dist in enumerate(\n            parent_theory.dists\n        ):  # loop over the distributions in mix\n            layout.addWidget(QLabel(""<b>%d</b>"" % (i + 1)), i + 2, 0)\n            line = []\n\n            line.append(QLabel(parent_theory.theory_names[i]))\n\n            qline = QLineEdit()\n            qline.setValidator(dvalidator)\n            qline.setText(""%.4g"" % rch.react_dist[dist].contents.monmass)\n            line.append(qline)\n\n            qline = QLineEdit()\n            qline.setValidator(dvalidator)\n            qline.setText(""%.4g"" % rch.react_dist[dist].contents.M_e)\n            line.append(qline)\n\n            self.lines.append(line)  # save lines\n            for j in range(3):\n                layout.addWidget(self.lines[i][j], i + 2, j + 1)\n        inner.setLayout(layout)\n\n        # Scroll Area Properties\n        self.scroll = QScrollArea()\n        # self.scroll.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Maximum)\n        self.scroll.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)\n        self.scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)\n        self.scroll.setWidgetResizable(True)\n        self.scroll.setWidget(inner)\n\n\n###########################\n\n\nclass ParameterMultiMetCSTR(QDialog):\n    """"""Create form to input the MultiMetCSTR parameters""""""\n\n    def __init__(self, parent_theory):\n        super().__init__(parent_theory)\n        self.parent_theory = parent_theory\n        self.NUMCAT_MAX = parent_theory.NUMCAT_MAX  # maximum number of catalysts\n        self.make_lines(parent_theory.pvalues)\n        self.createFormGroupBox(parent_theory.numcat)\n        buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n        buttonBox.accepted.connect(self.accept_)\n        buttonBox.rejected.connect(self.reject)\n\n        hwidget = QWidget()\n        hlayout = QHBoxLayout()\n        # set spinBox ncatalyst\n        hlayout.addWidget(QLabel(""<b>No. of catalysts</b>""))\n        self.sb_ncatalyst = QSpinBox()\n        self.sb_ncatalyst.setMinimum(1)\n        self.sb_ncatalyst.setMaximum(self.NUMCAT_MAX)\n        self.sb_ncatalyst.setValue(parent_theory.numcat)\n        self.sb_ncatalyst.valueChanged.connect(self.handle_sb_ncatalyst_valueChanged)\n        hlayout.addWidget(self.sb_ncatalyst)\n        # set time const box\n        hlayout.addStretch()\n        hlayout.addWidget(QLabel(""<b>Time constant</b>""))\n        dvalidator = QDoubleValidator()  # prevent letters etc.\n        dvalidator.setBottom(0)  # minimum allowed value\n        self.time_const = QLineEdit()\n        self.time_const.setValidator(dvalidator)\n        self.time_const.setText(""%s"" % parent_theory.time_const)\n        hlayout.addWidget(self.time_const)\n        # set monomer concentration box\n        hlayout.addStretch()\n        hlayout.addWidget(QLabel(""<b>Monomer conc.</b>""))\n        dvalidator = QDoubleValidator()  # prevent letters etc.\n        dvalidator.setBottom(0)  # minimum allowed value\n        self.monomer_conc = QLineEdit()\n        self.monomer_conc.setValidator(dvalidator)\n        self.monomer_conc.setText(""%s"" % parent_theory.monomer_conc)\n        hlayout.addWidget(self.monomer_conc)\n        # set horizontal layout\n        hwidget.setLayout(hlayout)\n\n        # insert widgets\n        self.mainLayout = QVBoxLayout()\n        self.mainLayout.addWidget(hwidget)\n        self.mainLayout.addWidget(self.scroll)\n        self.mainLayout.addStretch()\n        self.mainLayout.addWidget(buttonBox)\n        self.setLayout(self.mainLayout)\n        self.setWindowTitle(""Enter Metallocene Polymerisation Parameters"")\n\n    def accept_(self):\n        """"""\n        Triggered when \'OK\' button is pushed. Call \'get_lines()\'\n        \n        """"""\n        self.get_lines()\n        self.accept()\n\n    def make_lines(self, source):\n        """"""Create the input-parameter-form lines with default parameter values""""""\n        dvalidator = QDoubleValidator()  # prevent letters etc.\n        dvalidator.setBottom(0)  # minimum allowed value\n        qledit = QLineEdit()\n        qledit.setValidator(dvalidator)\n        qledit.setText(""0.0"")  # new lines contain zeros\n        self.lines = []\n        for i in range(self.NUMCAT_MAX):\n            line = []\n            for j in range(5):\n                qledit = QLineEdit()\n                qledit.setValidator(dvalidator)\n                qledit.setText(source[i][j])\n                line.append(qledit)\n            self.lines.append(line)\n\n    def save_lines(self):\n        """"""Save the current form values.\n        Called when the number of lines in the form is changed.\n        """"""\n        self.lines_saved = [[""0"" for j in range(5)] for i in range(self.NUMCAT_MAX)]\n        for i in range(self.NUMCAT_MAX):\n            for j in range(5):\n                self.lines_saved[i][j] = self.lines[i][j].text()\n\n    def get_lines(self):\n        """"""Save input parameters. Called when \'OK\' is pressed""""""\n        self.parent_theory.numcat = self.sb_ncatalyst.value()\n        self.parent_theory.time_const = float(self.time_const.text())\n        self.parent_theory.monomer_conc = float(self.monomer_conc.text())\n        for i in range(self.NUMCAT_MAX):\n            for j in range(5):\n                self.parent_theory.pvalues[i][j] = self.lines[i][j].text()\n\n    def handle_sb_ncatalyst_valueChanged(self, ncatalyst):\n        """"""Handle a change of the number of catalysts.\n        Destroy the form and create new one with the selected number of line\n        Keep the values previously entered\n        """"""\n        self.save_lines()\n        self.mainLayout.removeWidget(self.scroll)\n        self.scroll.deleteLater()\n        self.scroll = None\n        self.make_lines(self.lines_saved)\n        self.createFormGroupBox(ncatalyst)\n        self.mainLayout.insertWidget(1, self.scroll)  # insert above OK/Cancel buttons\n\n    def createFormGroupBox(self, ncatalyst):\n        """"""Create a form to set the new values of polymerisation parameters""""""\n        inner = QWidget()\n\n        layout = QGridLayout()\n        layout.setSpacing(10)\n\n        layout.addWidget(QLabel(""<center><b>Catalyst conc.</center></b>""), 0, 1)\n        layout.addWidget(QLabel(""<center><b>K<sub>p</sub></b></center>""), 0, 2)\n        layout.addWidget(QLabel(""<center><b>K<sup>=</sup></b></center>""), 0, 3)\n        layout.addWidget(QLabel(""<center><b>K<sup>s</sup></b></center>""), 0, 4)\n        layout.addWidget(QLabel(""<center><b>K<sub>pLCB</sub></b></center>""), 0, 5)\n        for i in range(ncatalyst):\n            layout.addWidget(QLabel(""<b>%d</b>"" % (i + 1)), i + 1, 0)\n            for j in range(5):\n                layout.addWidget(self.lines[i][j], i + 1, j + 1)\n        inner.setLayout(layout)\n\n        # Scroll Area Properties\n        self.scroll = QScrollArea()\n        self.scroll.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)\n        self.scroll.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)\n        self.scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)\n        self.scroll.setWidgetResizable(True)\n        self.scroll.setWidget(inner)\n\n\n###############################################\n\n\nclass EditBobSettingsDialog(QDialog):\n    """"""Create the form that is used to modify the BoB binning settings""""""\n\n    def __init__(self, parent_theory, numbobbins, bobmax, bobmin, bobbinmax):\n        super().__init__(parent_theory)\n        self.createFormGroupBox(numbobbins, bobmax, bobmin, bobbinmax)\n\n        buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n        buttonBox.accepted.connect(self.accept)\n        buttonBox.rejected.connect(self.reject)\n\n        mainLayout = QVBoxLayout()\n        mainLayout.addWidget(self.formGroupBox)\n        mainLayout.addWidget(buttonBox)\n        self.setLayout(mainLayout)\n        self.setWindowTitle(""Edit"")\n\n    def createFormGroupBox(self, numbobbins, bobmax, bobmin, bobbinmax):\n        """"""Create a form to set the new values of the BoB binning parameters""""""\n        self.formGroupBox = QGroupBox(""Edit BoB Binning Settings"")\n        layout = QFormLayout()\n\n        val_double = QDoubleValidator()\n        val_double.setBottom(1)  # set smalled double allowed in the form\n        val_int = QIntValidator()\n        val_int.setBottom(0)  # set smalled int allowed in the form\n        val_int.setTop(\n            rch.pb_global_const.maxbobbins\n        )  # set largest int allowed in the form\n\n        self.e1 = QLineEdit()\n        self.e1.setValidator(val_int)\n        self.e1.setMaxLength(6)\n        self.e1.setText(""%d"" % numbobbins)\n\n        self.e2 = QLineEdit()\n        self.e2.setValidator(val_double)\n        self.e2.setText(""%.2e"" % bobmax)\n\n        self.e3 = QLineEdit()\n        self.e3.setValidator(val_double)\n        self.e3.setText(""%.2e"" % bobmin)\n\n        self.e4 = QLineEdit()\n        self.e4.setValidator(val_int)\n        self.e4.setMaxLength(6)\n        self.e4.setText(""%d"" % bobbinmax)\n\n        layout.addRow(QLabel(""Number of bins for Bob:""), self.e1)\n        layout.addRow(QLabel(""Maximum bin Mw (g/mol):""), self.e2)\n        layout.addRow(QLabel(""Minimum bin Mw (g/mol):""), self.e3)\n        layout.addRow(QLabel(""Maximum no. of polymers per bin:""), self.e4)\n        self.formGroupBox.setLayout(layout)\n\n\n###########################\n\n\nclass IncreaseRecordsDialog(QDialog):\n    """"""\n    Dialog containing radio buttons to choose a new memory size for the records of ""name"" \n    """"""\n\n    def __init__(self, parent_theory, current_max, name, size_of):\n        super().__init__()\n        self.createExclusiveGroup(current_max, name, size_of)\n        buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n        buttonBox.accepted.connect(self.accept)\n        buttonBox.rejected.connect(self.reject)\n\n        mainLayout = QVBoxLayout()\n        mainLayout.addWidget(self.formGroupBox)\n        mainLayout.addWidget(buttonBox)\n        self.setLayout(mainLayout)\n        self.setWindowTitle(""More %s records?"" % name)\n\n    def createExclusiveGroup(self, current_max, name, size_of):\n        """"""Create the radio buttons choices""""""\n        self.formGroupBox = QWidget()\n        size = int(size_of * np.ceil(0.5 * current_max))\n        if size < 1:\n            size = 1\n            char = ""<""\n        else:\n            char = """"\n        self.r1 = QRadioButton(\n            ""%.4g (1.5x) requests %s%dMB of RAM""\n            % (np.ceil(1.5 * current_max), char, size)\n        )\n        size = int(size_of * current_max)\n        if size < 1:\n            size = 1\n            char = ""<""\n        else:\n            char = """"\n        self.r2 = QRadioButton(\n            ""%.4g (2x) requests %s%dMB of RAM"" % (2 * current_max, char, size)\n        )\n        size = int(size_of * 4 * current_max)\n        if size < 1:\n            size = 1\n            char = ""<""\n        else:\n            char = """"\n        self.r3 = QRadioButton(\n            ""%.4g (5x) requests %s%dMB of RAM"" % (5 * current_max, char, size)\n        )\n        self.r1.setChecked(True)\n\n        layout = QVBoxLayout()\n        layout.addWidget(\n            QLabel(""<b>Current number of %s records: %.4g</b>"" % (name, current_max))\n        )\n        layout.addWidget(QLabel(""Increase to:""))\n        layout.addWidget(self.r1)\n        layout.addWidget(self.r2)\n        layout.addWidget(self.r3)\n        layout.addWidget(\n            QLabel(""(%dMB of RAM available)"" % (psutil.virtual_memory()[1] / 2.0 ** 20))\n        )  # size of free RAM avaliable\n        layout.addWidget(QLabel(""Or press Cancel.""))\n        self.formGroupBox.setLayout(layout)\n'"
RepTate/theories/rouse_ctypes_helper.py,5,"b'""""""\nDefine the C-variables and functions from the C-files that are needed in Python\n""""""\nimport numpy as np\nfrom ctypes import c_double, c_int, CDLL\nimport sys\nimport os\n\ndir_path = os.path.dirname(\n    os.path.realpath(__file__)\n)  # get the directory path of current file\nif sys.maxsize > 2 ** 32:\n    # 64-bit system\n    lib_path = os.path.join(dir_path, ""rouse_lib_%s.so"" % (sys.platform))\nelse:\n    # 32-bit system\n    lib_path = os.path.join(dir_path, ""rouse_lib_%s_i686.so"" % (sys.platform))\ntry:\n    rouse_lib = CDLL(lib_path)\nexcept:\n    print(""OS %s not recognized in Rouse CH module"" % (sys.platform))\n\ncontinuous_rouse_freq_interp = rouse_lib.continuous_rouse_freq_interp\ncontinuous_rouse_freq_interp.restype = None\n\ncontinuous_rouse_time_interp = rouse_lib.continuous_rouse_time_interp\ncontinuous_rouse_time_interp.restype = None\n\n\ndef approx_rouse_frequency(params):\n    """"""Continuous Rouse frequency with interpolation for N""""""\n    G0, tau0, N, w = params\n    n = len(w)\n\n    w_arr = (c_double * n)()\n    gp_arr = (c_double * n)()\n    gpp_arr = (c_double * n)()\n    w_arr[:] = w[:]\n    gp_arr[:] = np.zeros(n)[:]\n    gpp_arr[:] = np.zeros(n)[:]\n\n    continuous_rouse_freq_interp(\n        c_int(n), c_double(G0), c_double(tau0), c_double(N), w_arr, gp_arr, gpp_arr\n    )\n\n    # convert ctypes array to numpy\n    return (np.asarray(gp_arr[:]), np.asarray(gpp_arr[:]))\n\n\ndef approx_rouse_time(params):\n    """"""Continuous Rouse time with interpolation for N""""""\n    G0, tau0, N, t = params\n    n = len(t)\n\n    t_arr = (c_double * n)()\n    gt_arr = (c_double * n)()\n    t_arr[:] = t[:]\n    gt_arr[:] = np.zeros(n)[:]\n\n    continuous_rouse_time_interp(\n        c_int(n), c_double(G0), c_double(tau0), c_double(N), t_arr, gt_arr\n    )\n\n    # convert ctypes array to numpy\n    return np.asarray(gt_arr[:])\n'"
RepTate/theories/rp_blend_ctypes_helper.py,4,"b'""""""\nDefine the C-variables and functions from the C-files that are needed in Python\n""""""\nimport numpy as np\nfrom ctypes import c_double, CDLL\nimport sys\nimport os\n\ndir_path = os.path.dirname(\n    os.path.realpath(__file__)\n)  # get the directory path of current file\nif sys.maxsize > 2 ** 32:\n    # 64-bit system\n    lib_path = os.path.join(dir_path, ""rp_blend_lib_%s.so"" % (sys.platform))\nelse:\n    # 32-bit system\n    lib_path = os.path.join(dir_path, ""rp_blend_lib_%s_i686.so"" % (sys.platform))\ntry:\n    rp_blend_lib = CDLL(lib_path)\nexcept:\n    print(""OS %s not recognized in Rouse CH module"" % (sys.platform))\n\nderivs_rp_blend_shear = rp_blend_lib.derivs_rp_blend_shear\nderivs_rp_blend_shear.restype = None\n\nderivs_rp_blend_uext = rp_blend_lib.derivs_rp_blend_uext\nderivs_rp_blend_uext.restype = None\n\n\ndef compute_derivs_shear(sigma, p, t, with_fene):\n    """"""Derivatives at time t""""""\n    c = 3\n    n, lmax, phi, taud, taus, beta, delta, gamma_dot, _ = p\n    # void derivs_rp_blend_shear(double *deriv, double *sigma, double *phi, double *taus, double *taud, double *p, double t)\n    # n = p[0];\n    # lmax = p[1];\n    # beta = p[2];\n    # delta = p[3];\n    # gamma_dot = p[4];\n    # with_fene = p[5];\n\n    p_arr = (c_double * 6)()\n    p_arr[:] = [n, lmax, beta, delta, gamma_dot, with_fene]\n    deriv_arr = (c_double * (c * n * n))(*np.zeros(c * n * n))\n    sigma_arr = (c_double * (c * n * n))(*sigma[:])\n    phi_arr = (c_double * n)(*phi[:])\n    taud_arr = (c_double * n)(*np.array(taud) / 2.0)  # hard coded factor 2 in C routine\n    taus_arr = (c_double * n)(*taus[:])\n\n    derivs_rp_blend_shear(\n        deriv_arr, sigma_arr, phi_arr, taus_arr, taud_arr, p_arr, c_double(t)\n    )\n\n    # return results as numpy array\n    return deriv_arr[:]\n\n\ndef compute_derivs_uext(sigma, p, t, with_fene):\n    """"""Derivatives at time t""""""\n    c = 2\n    n, lmax, phi, taud, taus, beta, delta, gamma_dot, _ = p\n    # void derivs_rp_blend_shear(double *deriv, double *sigma, double *phi, double *taus, double *taud, double *p, double t)\n    # n = p[0];\n    # lmax = p[1];\n    # beta = p[2];\n    # delta = p[3];\n    # gamma_dot = p[4];\n    # with_fene = p[5];\n\n    p_arr = (c_double * 6)()\n    p_arr[:] = [n, lmax, beta, delta, gamma_dot, with_fene]\n\n    deriv_arr = (c_double * (c * n * n))(*np.zeros(c * n * n))\n    sigma_arr = (c_double * (c * n * n))(*sigma[:])\n    phi_arr = (c_double * n)(*phi[:])\n    taud_arr = (c_double * n)(*np.array(taud) / 2.0)  # hard coded factor 2 in C routine\n    taus_arr = (c_double * n)(*taus[:])\n\n    derivs_rp_blend_uext(\n        deriv_arr, sigma_arr, phi_arr, taus_arr, taud_arr, p_arr, c_double(t)\n    )\n\n    # return results as numpy array\n    return deriv_arr[:]\n'"
RepTate/theories/sccr_ctypes_helper.py,0,"b'""""""\nDefine the C-variables and functions from the C-files that are needed in Python\n""""""\nfrom ctypes import c_double, c_int, CDLL\nimport sys\nimport os\n\ndir_path = os.path.dirname(\n    os.path.realpath(__file__)\n)  # get the directory path of current file\nif sys.maxsize > 2 ** 32:\n    # 64-bit system\n    lib_path = os.path.join(dir_path, ""sccr_lib_%s.so"" % (sys.platform))\nelse:\n    # 32-bit system\n    lib_path = os.path.join(dir_path, ""sccr_lib_%s_i686.so"" % (sys.platform))\ntry:\n    sccr_lib = CDLL(lib_path)\nexcept:\n    print(""OS %s not recognized in SCCR CH"" % (sys.platform))\n\nset_static_int = sccr_lib.set_static_int\nset_static_int.restype = None\n\nset_static_double = sccr_lib.set_static_double\nset_static_double.restype = None\n\nset_yeq_static_in_C = sccr_lib.set_yeq_static_in_C\nset_yeq_static_in_C.restype = None\n\nsccr_dy = sccr_lib.sccr_dy\nsccr_dy.restype = None\n\n\ndef set_yeq_static(yeq):\n    n = len(yeq)\n    arr = (c_double * n)(*yeq[:])\n    set_yeq_static_in_C(arr, c_int(n))\n'"
RepTate/theories/schwarzl_ctypes_helper.py,0,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""\nDefine the C-variables and functions from the C-files that are needed in Python\n""""""\nfrom ctypes import *\nimport sys\nimport os\n\ndir_path = os.path.dirname(\n    os.path.realpath(__file__)\n)  # get the directory path of current file\nif sys.maxsize > 2 ** 32:\n    # 64-bit system\n    lib_path = os.path.join(dir_path, ""schwarzl_lib_%s.so"" % (sys.platform))\nelse:\n    # 32-bit system\n    lib_path = os.path.join(dir_path, ""schwarzl_lib_%s_i686.so"" % (sys.platform))\ntry:\n    schwarzl_lib = CDLL(lib_path)\nexcept:\n    print(""OS %s not recognized in Schwarzl CH module"" % (sys.platform))\n\nschwarzl_gt = schwarzl_lib.schwarzl_gt\nschwarzl_gt.restype = None\n\n\ndef do_schwarzl_gt(n_data, value_g_of_t, time_g_of_t):\n\n    c_gt = (c_double * n_data)()\n    c_time = (c_double * n_data)()\n    out_wp = (c_double * n_data)()\n    out_Gp = (c_double * n_data)()\n    out_wpp = (c_double * n_data)()\n    out_Gpp = (c_double * n_data)()\n\n    for i in range(n_data):\n        c_gt[i] = c_double(value_g_of_t[i])\n        c_time[i] = c_double(time_g_of_t[i])\n\n    schwarzl_gt(c_int(n_data), c_gt, c_time, out_wp, out_Gp, out_wpp, out_Gpp)\n\n    return out_wp, out_Gp, out_wpp, out_Gpp\n'"
RepTate/theories/theory_helpers.py,4,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module theory_helpers\n\nModule that contains classes that are used in several theories\n\n""""""\nimport enum\nimport numpy as np\nfrom PyQt5.QtWidgets import (\n    QSpinBox,\n    QDialog,\n    QVBoxLayout,\n    QHBoxLayout,\n    QDialogButtonBox,\n    QTableWidgetItem,\n    QMessageBox,\n    QLabel,\n    QLineEdit,\n    QButtonGroup,\n    QRadioButton,\n)\nfrom PyQt5.QtGui import QDoubleValidator\nfrom PyQt5.QtCore import Qt\nfrom RepTate.gui.SpreadsheetWidget import SpreadsheetWidget\n\n""""""\n _____                           \n| ____|_ __  _   _ _ __ ___  ___ \n|  _| | \'_ \\| | | | \'_ ` _ \\/ __|\n| |___| | | | |_| | | | | | \\__ \\\n|_____|_| |_|\\__,_|_| |_| |_|___/\n\nDiverse Enumerations to set calculation modes\n""""""\n\n\nclass FlowMode(enum.Enum):\n    """"""Defines the flow geometry used\n    \n    Parameters can be:\n        - shear: Shear flow\n        - uext: Uniaxial extension flow\n    """"""\n\n    shear = 0\n    uext = 1\n\n\nclass FeneMode(enum.Enum):\n    """"""Defines the finite extensibility function\n    \n    Parameters can be:\n        - none: No finite extensibility\n        - with_fene: With finite extensibility\n    """"""\n\n    none = 0\n    with_fene = 1\n\n\nclass GcorrMode(enum.Enum):\n    """"""Primitive path fluctuations reduce the terminal modulus due to shortened tube.\n    Defines if we include that correction.\n\n    Parameters can be:\n        - none: No finite extensibility\n        - with_gcorr: With finite extensibility\n    """"""\n\n    none = 0\n    with_gcorr = 1\n\n\nclass NoquMode(enum.Enum):\n    """"""Primitive path fluctuations reduce the terminal modulus due to shortened tube.\n    Defines if we include that correction.\n\n    Parameters can be:\n        - none: No primitive path fluctuations\n        - with_noqu: With primitive path fluctuation\n    """"""\n\n    none = 0\n    with_noqu = 1\n\n\nclass SingleSpeciesMode(enum.Enum):\n    """"""Uses a single average species to compute the nucleation rate.\n    Defines if we include that approximation.\n\n    Parameters can be:\n        - none: use all modes\n        - with_single: Just use a single mode\n    """"""\n\n    none = 0\n    with_single = 1\n\n\n""""""\n ____  _       _                 \n|  _ \\(_) __ _| | ___   __ _ ___ \n| | | | |/ _` | |/ _ \\ / _` / __|\n| |_| | | (_| | | (_) | (_| \\__ \\\n|____/|_|\\__,_|_|\\___/ \\__, |___/\n                       |___/     \n\nDiverse dialogs to set/get/edit Maxwell modes, volume fractions, etc\n""""""\n\n\nclass EditModesDialog(QDialog):\n    """"""\n    Dialog to edit the amplitudes and relaxation times of a set of Maxwell modes\n    """"""\n\n    def __init__(self, parent=None, times=0, G=0, MAX_MODES=0):\n        super(EditModesDialog, self).__init__(parent)\n\n        self.setWindowTitle(""Edit Maxwell modes"")\n        layout = QVBoxLayout(self)\n        nmodes = len(times)\n\n        self.spinbox = QSpinBox()\n        self.spinbox.setRange(1, MAX_MODES)  # min and max number of modes\n        self.spinbox.setSuffix("" modes"")\n        self.spinbox.setValue(nmodes)  # initial value\n        layout.addWidget(self.spinbox)\n\n        self.table = SpreadsheetWidget()  # allows copy/paste\n        self.table.setRowCount(nmodes)\n        self.table.setColumnCount(2)\n        self.table.setHorizontalHeaderLabels([""tauD"", ""G""])\n        for i in range(nmodes):\n            tau = ""%g"" % times[i]\n            mod = ""%g"" % G[i]\n            self.table.setItem(i, 0, QTableWidgetItem(tau))\n            self.table.setItem(i, 1, QTableWidgetItem(mod))\n\n        layout.addWidget(self.table)\n\n        # OK and Cancel buttons\n        buttons = QDialogButtonBox(\n            QDialogButtonBox.Ok | QDialogButtonBox.Cancel, Qt.Horizontal, self\n        )\n        buttons.accepted.connect(self.accept)\n        buttons.rejected.connect(self.reject)\n        layout.addWidget(buttons)\n        connection_id = self.spinbox.valueChanged.connect(\n            self.handle_spinboxValueChanged\n        )\n\n    def handle_spinboxValueChanged(self, value):\n        nrow_old = self.table.rowCount()\n        self.table.setRowCount(value)\n        for i in range(nrow_old, value):  # create extra rows with defaut values\n            self.table.setItem(i, 0, QTableWidgetItem(""10""))\n            self.table.setItem(i, 1, QTableWidgetItem(""1000""))\n\n\nclass EditModesVolFractionsDialog(QDialog):\n    """"""\n    Dialog to edit the volume fractions and relaxation times for a polydisperse sample\n    """"""\n\n    def __init__(self, parent=None, param_dic={}, MAX_MODES=0):\n        super().__init__(parent)\n\n        self.setWindowTitle(""Edit volume fractions and relaxation times"")\n        layout = QVBoxLayout(self)\n        self.nparam = len(param_dic)\n        pnames = list(param_dic.keys())\n        nmodes = len(param_dic[pnames[0]])\n\n        self.spinbox = QSpinBox()\n        self.spinbox.setRange(1, MAX_MODES)  # min and max number of modes\n        self.spinbox.setSuffix("" modes"")\n        self.spinbox.setValue(nmodes)  # initial value\n        layout.addWidget(self.spinbox)\n\n        self.table = SpreadsheetWidget()  # allows copy/paste\n        self.table.setRowCount(nmodes)\n        self.table.setColumnCount(self.nparam)\n        self.table.setHorizontalHeaderLabels(pnames)\n        for i in range(nmodes):\n            for j in range(self.nparam):\n                self.table.setItem(\n                    i, j, QTableWidgetItem(""%g"" % param_dic[pnames[j]][i])\n                )\n        layout.addWidget(self.table)\n\n        # OK and Cancel buttons\n        buttons = QDialogButtonBox(\n            QDialogButtonBox.Ok | QDialogButtonBox.Cancel, Qt.Horizontal, self\n        )\n        buttons.accepted.connect(self.accept_)\n        buttons.rejected.connect(self.reject)\n        layout.addWidget(buttons)\n        connection_id = self.spinbox.valueChanged.connect(\n            self.handle_spinboxValueChanged\n        )\n\n    def accept_(self):\n        sum = 0\n        for i in range(self.table.rowCount()):\n            sum += float(self.table.item(i, 0).text())\n        if abs(sum - 1) < 0.02:\n            self.accept()\n        else:\n            QMessageBox.warning(self, ""Error"", ""phi must add up to 1"")\n\n    def handle_spinboxValueChanged(self, value):\n        nrow_old = self.table.rowCount()\n        self.table.setRowCount(value)\n        for i in range(nrow_old, value):  # create extra rows with defaut values\n            for j in range(self.nparam):\n                self.table.setItem(i, j, QTableWidgetItem(""0""))\n\n\nclass GetMwdRepTate(QDialog):\n    """"""\n    Dialog to get the MWD from RepTate\n    """"""\n\n    def __init__(self, parent=None, th_dict={}, title=""title""):\n        super().__init__(parent)\n\n        self.setWindowTitle(title)\n        layout = QVBoxLayout(self)\n\n        validator = QDoubleValidator()\n        hlayout = QHBoxLayout()\n        hlayout.addWidget(QLabel(""Me""))\n        self.Me_text = QLineEdit(""%.3g"" % parent.parameters[""Me""].value)\n        self.Me_text.setValidator(validator)\n        hlayout.addWidget(self.Me_text)\n\n        hlayout.addWidget(QLabel(""taue""))\n        self.taue_text = QLineEdit(""%.3g"" % parent.parameters[""tau_e""].value)\n        self.taue_text.setValidator(validator)\n        hlayout.addWidget(self.taue_text)\n\n        layout.addLayout(hlayout)\n\n        self.btngrp = QButtonGroup()\n\n        for item in th_dict.keys():\n            rb = QRadioButton(item, self)\n            layout.addWidget(rb)\n            self.btngrp.addButton(rb)\n        # default button selection\n        rb = self.btngrp.buttons()[0]\n        rb.setChecked(True)\n\n        # OK and Cancel buttons\n        buttons = QDialogButtonBox(\n            QDialogButtonBox.Ok | QDialogButtonBox.Cancel, Qt.Horizontal, self\n        )\n        buttons.accepted.connect(self.accept)\n        buttons.rejected.connect(self.reject)\n        layout.addWidget(buttons)\n\n\nclass EditMWDDialog(QDialog):\n    """"""\n    Dialog to edit the MWD\n    """"""\n\n    def __init__(self, parent=None, m=None, phi=None, MAX_MODES=0):\n        super().__init__(parent)\n\n        self.setWindowTitle(""Input Molecular weight distribution"")\n        layout = QVBoxLayout(self)\n\n        validator = QDoubleValidator()\n        hlayout = QHBoxLayout()\n        hlayout.addWidget(QLabel(""Me""))\n        self.Me_text = QLineEdit(""%.4g"" % parent.parameters[""Me""].value)\n        self.Me_text.setValidator(validator)\n        hlayout.addWidget(self.Me_text)\n\n        hlayout.addWidget(QLabel(""taue""))\n        self.taue_text = QLineEdit(""%.4g"" % parent.parameters[""tau_e""].value)\n        self.taue_text.setValidator(validator)\n        hlayout.addWidget(self.taue_text)\n\n        layout.addLayout(hlayout)\n        nmodes = len(phi)\n\n        self.spinbox = QSpinBox()\n        self.spinbox.setRange(1, MAX_MODES)  # min and max number of modes\n        self.spinbox.setSuffix("" modes"")\n        self.spinbox.setValue(nmodes)  # initial value\n        layout.addWidget(self.spinbox)\n\n        self.table = SpreadsheetWidget()  # allows copy/paste\n        self.table.setRowCount(nmodes)\n        self.table.setColumnCount(2)\n        self.table.setHorizontalHeaderLabels([""M"", ""phi""])\n        for i in range(nmodes):\n            self.table.setItem(i, 0, QTableWidgetItem(""%g"" % m[i]))\n            self.table.setItem(i, 1, QTableWidgetItem(""%g"" % phi[i]))\n\n        layout.addWidget(self.table)\n\n        # OK and Cancel buttons\n        buttons = QDialogButtonBox(\n            QDialogButtonBox.Ok | QDialogButtonBox.Cancel, Qt.Horizontal, self\n        )\n        buttons.accepted.connect(self.accept_)\n        buttons.rejected.connect(self.reject)\n        layout.addWidget(buttons)\n        connection_id = self.spinbox.valueChanged.connect(\n            self.handle_spinboxValueChanged\n        )\n\n    def accept_(self):\n        sum = 0\n        for i in range(self.table.rowCount()):\n            sum += float(self.table.item(i, 1).text())\n        if abs(sum - 1) < 0.02:\n            self.accept()\n        else:\n            QMessageBox.warning(self, ""Error"", ""phi must add up to 1"")\n\n    def handle_spinboxValueChanged(self, value):\n        nrow_old = self.table.rowCount()\n        self.table.setRowCount(value)\n        for i in range(nrow_old, value):  # create extra rows with defaut values\n            self.table.setItem(i, 0, QTableWidgetItem(""0""))\n            self.table.setItem(i, 1, QTableWidgetItem(""1000""))\n\n\n""""""\n  ___  _   _                   \n / _ \\| |_| |__   ___ _ __ ___ \n| | | | __| \'_ \\ / _ \\ \'__/ __|\n| |_| | |_| | | |  __/ |  \\__ \\\n \\___/ \\__|_| |_|\\___|_|  |___/\n\n Classes that are used by several theories to help calculate the results.\n""""""\n\n\nclass Dilution:\n    """"""\n    Dilution effects\n    """"""\n\n    def __init__(self, m, phi, taue, Me, parent_theory):\n        super().__init__()\n        self.parent_theory = parent_theory\n        self.res = self.relax_times_from_mwd(m, phi, taue, Me)\n\n    def find_down_indx(self, tauseff, taud):\n        """"""Find index i such that taud[i] < tauseff < taud[i+1]\n        or returns -1 if tauseff < taud[0]\n        or returns n-1 if tauseff > taud[n-1] (should not happen)\n        """"""\n        n = len(taud)\n        down = n - 1\n        while tauseff < taud[down]:\n            if down == 0:\n                down = -1\n                break\n            down -= 1\n        return down\n\n    def find_dilution(self, phi, taud, taus, interp=True):\n        """"""Find the dilution factor phi_dil for a chain with bare stretch relax time `taus`""""""\n        n = len(phi)\n        temp = -1\n        phi_dil = 1\n        tauseff = taus / phi_dil\n        # m[0] < m[1] <  ... < m[n]\n        while True:\n            down = self.find_down_indx(tauseff, taud)\n            if down == -1:\n                # case tauseff < taud[0]\n                phi_dil = 1\n                break\n            elif down == n - 1:\n                # (just in case) tauseff > taud[n-1]\n                phi_dil = phi[n - 1]\n                break\n            else:\n                # change tauseff and check if \'down\' is still the same\n                if temp == down:\n                    break\n                temp = down\n                phi_dil = 1.0\n                for k in range(down):\n                    phi_dil -= phi[k]\n                if interp:\n                    # x=0 if tauseff close to td[down], x=1 if tauseff close to td[down+1]\n                    x = (tauseff - taud[down]) / (taud[down + 1] - taud[down])\n                    # linear interpolation of phi_dil\n                    phi_dil = phi_dil - x * phi[down]\n                else:\n                    phi_dil -= phi[down]\n            tauseff = taus / phi_dil\n        return phi_dil\n\n    def sort_list(self, m, phi):\n        """"""Ensure m[0] <= m[1] <=  ... <= m[n]""""""\n        if all(m[i] <= m[i + 1] for i in range(len(m) - 1)):\n            # list aready sorted\n            return m, phi\n        args = np.argsort(m)\n        m = list(np.array(m)[args])\n        phi = list(np.array(phi)[args])\n        return m, phi\n\n    def relax_times_from_mwd(self, m, phi, taue, Me):\n        """"""Guess relaxation times of linear rheology (taud) from molecular weight distribution.\n        (i) Count short chains (M < 2*Me) as solvent\n        (ii) The effective dilution at a given timescale t is equal to the sum of\n        the volume fractions of all chains with relaxation time greater than t\n        (iii) CLF makes use of the most diluted tube available at the CLF timescale\n        """"""\n        # m[0] < m[1] <  ... < m[n]\n        m, phi = self.sort_list(m, phi)\n\n        taus = []\n        taus_short = []\n        taud = []\n        phi_short = []\n        m_short = []\n        phi_u = 0\n        nshort = 0\n\n        n = len(m)\n        for i in range(n):\n            z = m[i] / Me\n            ts = z * z * taue\n            if m[i] < 2.0 * Me:\n                # short chains not entangled: use upper-convected Maxwell model\n                nshort += 1\n                phi_u += phi[i]\n                taus_short.append(ts)\n                phi_short.append(phi[i])\n                m_short.append(m[i])\n            else:\n                taus.append(ts)\n\n        # remove the short chains from the list of M and phi\n        m = m[nshort:]\n        phi = phi[nshort:]\n\n        n = len(m)  # new size\n        if n == 0:\n            self.parent_theory.Qprint(""All chains as solvent"")\n            return [False]\n        if n == 1:\n            return [True, phi, taus, [3 * z * ts,]]\n\n        Zeff = [0] * n\n        # renormalize the fraction of entangled chains\n        Me /= 1 - phi_u\n        taue /= (1 - phi_u) * (1 - phi_u)\n        for i in range(n):\n            phi[i] /= 1 - phi_u\n            z = m[i] / Me\n            taud.append(3.0 * z * z * z * taue)\n\n        vphi = []\n        interp = n > 2  # true if more than two species\n        for i in range(n):\n            # find dilution for the entangled chains\n            if i == 0:\n                phi_dil = 1\n            else:\n                phi_dil = self.find_dilution(phi, taud, taus[i], interp=interp)\n            vphi.append(phi_dil)\n\n        for i in range(n):\n            z = m[i] / Me\n            if z * vphi[i] < 1 and z > 1:\n                # case where long chains are effectively untentangled\n                # CR-Rouse approximated as last taud having z*vphi > 1\n                taud_sticky_rep = taud[i - 1]\n                for j in range(i, n):\n                    taud[j] = taud_sticky_rep\n                    Zeff[j] = 1.0\n                break\n            taud[i] = taud[i] * self.parent_theory.fZ(z * vphi[i])\n            Zeff[i] = z * vphi[i]\n        self.parent_theory.Zeff = np.array(Zeff)\n\n        return [True, phi, taus, taud]\n'"
RepTate/theories/timeArraySplit.py,4,"b'import numpy as np\n\ndef timeArraySplit( t, Tend):\n    lastPoint= np.nonzero(t >= Tend)[0][0]\n\n    t1=t[:lastPoint]\n    #t1=np.append([0],t[:lastPoint])\n    t1=np.append(t1,[Tend])\n\n    t2=np.append([Tend],t[lastPoint:])\n\n    return t1,t2\n    \n'"
RepTate/tools/CreateMaterialsDatabaseFile.py,2,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module CreateMaterialsDatabaseFile\n\nModule that creates the basic Materials database data.\n\n""""""\nimport numpy as np\nimport os\nfrom polymer_data import polymer\n\npolymerdict = {}\npolymerdict[""PEP""] = polymer(\n    name=""PEP"",\n    long=""Polyethylene-propylene"",\n    author=""Alexei Likhtman"",\n    date=""17/03/2006"",\n    source="""",\n    comment=""Recommended"",\n    B1=917.338632,\n    B2=125.96,\n    logalpha=-2.5897,\n    CTg=0,\n    tau_e=3.9636e-6,\n    Ge=1.5503e6,\n    Me=1.4306,\n    c_nu=0.1,\n    rho0=0.95,\n    chem="""",\n    Te=25,\n    M0=0,\n    MK=0,\n)\npolymerdict[""PS""] = polymer(\n    name=""PS"",\n    long=""Polystyrene"",\n    author=""Alexei Likhtman"",\n    date=""17/03/2006"",\n    source="""",\n    comment=""Recommended"",\n    B1=651.8653,\n    B2=-52.237,\n    logalpha=-3.161,\n    CTg=0,\n    tau_e=0.0010423,\n    Ge=3.0555e5,\n    Me=16.518,\n    c_nu=0.1,\n    rho0=0.95,\n    chem=""C8H8"",\n    Te=170,\n    M0=104,\n    MK=727,\n)\npolymerdict[""PI""] = polymer(\n    name=""PI"",\n    long=""Polyisoprene"",\n    author=""Alexei Likhtman"",\n    date=""17/03/2006"",\n    source="""",\n    comment=""Recommended"",\n    B1=691.6245,\n    B2=114.3,\n    logalpha=-3.2147,\n    CTg=14.65,\n    tau_e=1.3213e-5,\n    Ge=5.9535e5,\n    Me=4.8158,\n    c_nu=0.1,\n    rho0=0.928,\n    chem=""C5H8"",\n    Te=25,\n    M0=68,\n    MK=140.5,\n)\npolymerdict[""PBd""] = polymer(\n    name=""PBd"",\n    long=""Polybutadiene"",\n    author=""Alexei Likhtman"",\n    date=""17/03/2006"",\n    source="""",\n    comment=""Recommended"",\n    B1=606.626,\n    B2=142.11,\n    logalpha=-3.161,\n    CTg=13.0,\n    tau_e=3.3965e-7,\n    Ge=1.6154e6,\n    Me=1.8136,\n    c_nu=0.1,\n    rho0=0.95,\n    chem=""CH2CH=CHCH2"",\n    Te=25,\n    M0=54,\n    MK=103.9,\n)\npolymerdict[""hPBd""] = polymer(\n    name=""hPBd"",\n    long=""Hydrogenated Polybutadiene"",\n    author=""Richard Graham"",\n    date=""21/06/2006"",\n    source="""",\n    comment=""Parameters for linear hydrogentated polybutadiene"",\n    B1=432,\n    B2=70,\n    logalpha=-3.161,\n    CTg=0.01,\n    tau_e=1.1885e-8,\n    Ge=2.81e6,\n    Me=1.26,\n    c_nu=1,\n    rho0=0.95,\n    chem=""CH2CH2-CH2CH2"",\n    Te=170,\n    M0=56,\n    MK=0,\n)\n\npolymeruserdict = {}\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nnp.save(os.path.join(dir_path, ""materials_database.npy""), polymerdict)\nnp.save(os.path.join(dir_path, ""user_database.npy""), polymeruserdict)\n'"
RepTate/tools/ReadMaterialsDataBaseFile.py,1,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module ReadMaterialsDataBaseFile\n\nModule to read the contents of the materials database file.\n\n""""""\nimport numpy as np\nimport os\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nread_dictionary = np.load(\n    os.path.join(dir_path, ""materials_database.npy""), allow_pickle=True\n).item()\nfor k in read_dictionary.keys():\n    print(k, "": "", read_dictionary[k].data, ""\\n"")\n'"
RepTate/tools/ToolBounds.py,6,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Tool and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2018): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module ToolBounds\n\nRemove data ouside Bounds\n""""""\nimport numpy as np\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType\nfrom RepTate.core.Tool import Tool\nfrom RepTate.gui.QTool import QTool\n\n\nclass ToolBounds(CmdBase):\n    """"""Remove points in the current view \xc3\xaff :math:`x \\\\notin [x_{min}, x_{max}]` or :math:`y \\\\notin [y_{min}, y_{max}]`\n    """"""\n\n    toolname = ""Bounds""\n    description = ""Bounds Tool""\n    citations = []\n\n    def __new__(cls, name="""", parent_app=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUIToolBounds(name, parent_app)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLToolBounds(name, parent_app)\n        )\n\n\nclass BaseToolBounds:\n    """"""Base class for both GUI and CL""""""\n\n    # html_help_file = \'http://reptate.readthedocs.io/manual/Tools/template.html\'\n    toolname = ToolBounds.toolname\n    citations = ToolBounds.citations\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_app)\n        self.parameters[""xmin""] = Parameter(\n            name=""xmin"",\n            value=-np.Infinity,\n            description=""Minimum x"",\n            type=ParameterType.real,\n        )\n        self.parameters[""xmax""] = Parameter(\n            name=""xmax"",\n            value=np.Infinity,\n            description=""Maximum x"",\n            type=ParameterType.real,\n        )\n        self.parameters[""ymin""] = Parameter(\n            name=""ymin"",\n            value=-np.Infinity,\n            description=""Minimum y"",\n            type=ParameterType.real,\n        )\n        self.parameters[""ymax""] = Parameter(\n            name=""ymax"",\n            value=np.Infinity,\n            description=""Maximum y"",\n            type=ParameterType.real,\n        )\n\n    def calculate(self, x, y, ax=None, color=None, file_parameters=[]):\n        """"""Bounds function limits the data shown in the view""""""\n        xmin = self.parameters[""xmin""].value\n        xmax = self.parameters[""xmax""].value\n        ymin = self.parameters[""ymin""].value\n        ymax = self.parameters[""ymax""].value\n        conditionx = (x > xmin) * (x < xmax)\n        conditiony = (y > ymin) * (y < ymax)\n        x2 = np.extract(conditionx * conditiony, x)\n        y2 = np.extract(conditionx * conditiony, y)\n        return x2, y2\n\n\nclass CLToolBounds(BaseToolBounds, Tool):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_app)\n\n    # This class usually stays empty\n\n\nclass GUIToolBounds(BaseToolBounds, QTool):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_app)\n        self.update_parameter_table()\n        self.parent_application.update_all_ds_plots()\n\n    # add widgets specific to the Tool here:\n\n    def set_param_value(self, name, value):\n        p = self.parameters[name]\n        old_value = p.value\n        try:\n            new_value = float(value)\n        except ValueError:\n            return ""Value must be a float"", False\n        message, success = super().set_param_value(name, value)\n        if success:\n            if name == ""xmax"":\n                xmin = self.parameters[""xmin""].value\n                if new_value <= xmin:\n                    p.value = old_value\n                    message = ""xmax must be > xmin""\n                    success = False\n            elif name == ""xmin"":\n                xmax = self.parameters[""xmax""].value\n                if new_value >= xmax:\n                    p.value = old_value\n                    message = ""xmin must be < xmax""\n                    success = False\n            elif name == ""ymax"":\n                ymin = self.parameters[""ymin""].value\n                if new_value <= ymin:\n                    p.value = old_value\n                    message = ""ymax must be > ymin""\n                    success = False\n            elif name == ""ymin"":\n                ymax = self.parameters[""ymax""].value\n                if new_value >= ymax:\n                    p.value = old_value\n                    message = ""ymin must be < ymax""\n                    success = False\n\n        return message, success\n'"
RepTate/tools/ToolEvaluate.py,0,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Tool and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2018): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module ToolEvaluate\n\nEvaluate algebraic expressions in the current view\n""""""\nimport traceback\nfrom numpy import *\nimport numpy as np\nimport re\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType\nfrom RepTate.core.Tool import Tool\nfrom RepTate.gui.QTool import QTool\n\n\nclass ToolEvaluate(CmdBase):\n    """"""Create new abcissa and ordinate data by evaluating an expression as a function of x and y (the abcissa and ordinate of the current view data). Standard algebraic expressions and mathematical functions (``sin, cos, tan, arccos, arcsin, arctan, arctan2, deg2rad, rad2deg, sinh, cosh, tanh, arcsinh, arccosh, arctanh, around, round_, rint, floor, ceil, trunc, exp, log, log10, fabs, mod, e, pi, power, sqrt``) are understood by the expression parser.""""""\n\n    toolname = ""Eval Exp""\n    description = ""Evaluate Expression Tool""\n    citations = []\n\n    def __new__(cls, name="""", parent_app=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUIToolEvaluate(name, parent_app)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLToolEvaluate(name, parent_app)\n        )\n\n\nclass BaseToolEvaluate:\n    """"""Base Class for Evaluation of expressions""""""\n\n    # html_help_file = \'http://reptate.readthedocs.io/manual/Tools/template.html\'\n    toolname = ToolEvaluate.toolname\n    citations = ToolEvaluate.citations\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_app)\n        self.parameters[""x""] = Parameter(\n            name=""x"",\n            value=""x"",\n            description=""Expression for abscissa"",\n            type=ParameterType.string,\n        )\n        self.parameters[""y""] = Parameter(\n            name=""y"",\n            value=""y"",\n            description=""Expression for ordinate"",\n            type=ParameterType.string,\n        )\n\n        safe_list = [\n            ""sin"",\n            ""cos"",\n            ""tan"",\n            ""arccos"",\n            ""arcsin"",\n            ""arctan"",\n            ""arctan2"",\n            ""deg2rad"",\n            ""rad2deg"",\n            ""sinh"",\n            ""cosh"",\n            ""tanh"",\n            ""arcsinh"",\n            ""arccosh"",\n            ""arctanh"",\n            ""around"",\n            ""round_"",\n            ""rint"",\n            ""floor"",\n            ""ceil"",\n            ""trunc"",\n            ""exp"",\n            ""log"",\n            ""log10"",\n            ""fabs"",\n            ""mod"",\n            ""e"",\n            ""pi"",\n            ""power"",\n            ""sqrt"",\n        ]\n        self.safe_dict = {}\n        for k in safe_list:\n            self.safe_dict[k] = globals().get(k, None)\n\n    def calculate(self, x, y, ax=None, color=None, file_parameters=[]):\n        """"""Evaluate function that returns the square of the y, according to the view""""""\n        xexpr = self.parameters[""x""].value\n        yexpr = self.parameters[""y""].value\n        self.safe_dict[""x""] = x\n        self.safe_dict[""y""] = y\n\n        # Find FILE PARAMETERS IN THE EXPRESSION\n        fparams = re.findall(""\\[(.*?)\\]"", xexpr)\n        for fp in fparams:\n            if fp in file_parameters:\n                self.safe_dict[fp] = float(file_parameters[fp])\n            else:\n                self.logger.warning(\n                    ""File parameter not found. Review your Tool expression for x""\n                )\n                self.Qprint(\n                    ""<b><font color=red>File parameter not found</font></b>. Review your Tool expression for x""\n                )\n                self.safe_dict[fp] = 0.0\n        xexpr = xexpr.replace(""["", """").replace(""]"", """")\n\n        fparams = re.findall(""\\[(.*?)\\]"", yexpr)\n        for fp in fparams:\n            if fp in file_parameters:\n                self.safe_dict[fp] = float(file_parameters[fp])\n            else:\n                self.logger.warning(\n                    ""File parameter not found. Review your Tool expression for y""\n                )\n                self.Qprint(\n                    ""<b><font color=red>File parameter not found</font></b>. Review your Tool expression for y""\n                )\n                self.safe_dict[fp] = 0.0\n        yexpr = yexpr.replace(""["", """").replace(""]"", """")\n\n        try:\n            x2 = eval(xexpr, {""__builtins__"": None}, self.safe_dict)\n            # x2 = eval(xexpr, var)\n            y2 = eval(yexpr, {""__builtins__"": None}, self.safe_dict)\n            # y2 = eval(yexpr, var)\n            return x2, y2\n        except Exception as e:\n            self.Qprint(""in ToolEvaluate.calculate(): %s"" % traceback.format_exc())\n            return x, y\n\n\nclass CLToolEvaluate(BaseToolEvaluate, Tool):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_app)\n\n    # This class usually stays empty\n\n\nclass GUIToolEvaluate(BaseToolEvaluate, QTool):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_app)\n        self.update_parameter_table()\n        self.parent_application.update_all_ds_plots()\n\n    # add widgets specific to the Tool here:\n'"
RepTate/tools/ToolFindPeaks.py,17,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Tool and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2018): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module ToolFindPeaks\n\nFindPeaks file for creating a new Tool\n""""""\nimport numpy as np\nfrom scipy.optimize import curve_fit\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType\nfrom RepTate.core.Tool import Tool\nfrom RepTate.gui.QTool import QTool\nfrom PyQt5.QtGui import QIcon\n\n\nclass ToolFindPeaks(CmdBase):\n    """"""Find peaks (maxima or minima) in the data, as represented by the current view. The option to find the maxima or the minima is specified by the min/max check button (the minpeaks parameter in the command line version). The **threshold** controls the relative height that a peak must have (with respect to the data span) in order to be detected. The **minimum_distance** parameter controls how far from each other the peaks must be in order to be distinguished. The returned peaks correspond to the maximum/minimum data point in the current view. Alternatively, the user can select to fit a parabola to the peaks and find the analytical maximum or minimum of the parabola. The parameter **minimum_distance** also controls the number of points around the maximum data point used to fit the parabola. The peaks are returned in the Tool information area and shown as symbols in the chart.\n\n    The algorithm used to find the peaks can be very inaccurate and slow if the data is noisy and has many local peaks. It is recommended to smooth the data first before finding the peaks.\n    """"""\n\n    toolname = ""Find Peaks""\n    description = ""Find Peaks in current data/view""\n    citations = []\n\n    def __new__(cls, name="""", parent_app=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUIToolFindPeaks(name, parent_app)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLToolFindPeaks(name, parent_app)\n        )\n\n\nclass BaseToolFindPeaks:\n    """"""Base class for both GUI and CL""""""\n\n    # html_help_file = \'http://reptate.readthedocs.io/manual/Tools/FindPeaks.html\'\n    toolname = ToolFindPeaks.toolname\n    citations = ToolFindPeaks.citations\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_app)\n        # self.function = self.findpeaks  # main Tool function\n        self.parameters[""threshold""] = Parameter(\n            name=""threshold"",\n            value=0.3,\n            description=""threshold for peak detection"",\n            type=ParameterType.real,\n        )\n        self.parameters[""minimum_distance""] = Parameter(\n            name=""minimum_distance"",\n            value=5,\n            description=""minimum distance (in datapoints) between peaks"",\n            type=ParameterType.integer,\n        )\n        self.parameters[""minpeaks""] = Parameter(\n            name=""minpeaks"",\n            value=False,\n            description=""Find minimum peaks"",\n            type=ParameterType.boolean,\n            display_flag=False,\n        )\n        self.parameters[""parabola""] = Parameter(\n            name=""parabola"",\n            value=False,\n            description=""Fit Parabola to peak"",\n            type=ParameterType.boolean,\n            display_flag=False,\n        )\n        self.seriesarray = []\n        self.axarray = []\n\n    def clean_graphic_stuff(self):\n        for s, a in zip(self.seriesarray, self.axarray):\n            a.lines.remove(s)\n        self.seriesarray.clear()\n        self.axarray.clear()\n\n    def destructor(self):\n        """"""This is called when the Tool tab is closed""""""\n        self.clean_graphic_stuff()\n\n    def calculate(self, x, y, ax=None, color=None, file_parameters=[]):\n        threshold = self.parameters[""threshold""].value\n        minimum_distance = self.parameters[""minimum_distance""].value\n        minpeaks = self.parameters[""minpeaks""].value\n        parabola = self.parameters[""parabola""].value\n        if minpeaks:\n            y = -y\n        thresholdnow = threshold * (np.max(y) - np.min(y)) + np.min(y)\n        dy = np.diff(y)\n        (zeros,) = np.where(dy == 0)\n        if len(zeros) == len(y) - 1:\n            print("""", end="""")\n            if minpeaks:\n                y = -y\n            return x, y\n        while len(zeros):\n            zerosr = np.hstack([dy[1:], 0.0])\n            zerosl = np.hstack([0.0, dy[:-1]])\n            dy[zeros] = zerosr[zeros]\n            (zeros,) = np.where(dy == 0)\n            dy[zeros] = zerosl[zeros]\n            (zeros,) = np.where(dy == 0)\n        peaks = np.where(\n            (np.hstack([dy, 0.0]) < 0.0)\n            & (np.hstack([0.0, dy]) > 0.0)\n            & (y > thresholdnow)\n        )[0]\n        if peaks.size > 1 and minimum_distance > 1:\n            highest = peaks[np.argsort(y[peaks])][::-1]\n            rem = np.ones(y.size, dtype=bool)\n            rem[peaks] = False\n\n            for peak in highest:\n                if not rem[peak]:\n                    sl = slice(\n                        max(0, peak - minimum_distance), peak + minimum_distance + 1\n                    )\n                    rem[sl] = True\n                    rem[peak] = False\n            peaks = np.arange(y.size)[~rem]\n\n        xp = np.zeros(len(peaks))\n        yp = np.zeros(len(peaks))\n        if minpeaks:\n            self.Qprint(""<b>%d</b> Minimum(s) found"" % len(peaks))\n        else:\n            self.Qprint(""<b>%d</b> Maximum(s) found"" % len(peaks))\n        if minpeaks:\n            y = -y\n        # table=\'\'\'<table border=""1"" width=""100%"">\'\'\'\n        # table+=\'\'\'<tr><th>x</th><th>y</th></tr>\'\'\'\n        table = [\n            [""%-10s"" % ""x"", ""%-10s"" % ""y""],\n        ]\n        if parabola:\n            ################################################################\n            # Fit parabola to each peak and find analytical position of peak\n            func = lambda xx, a, tau, c: a * ((xx - tau) ** 2) + c\n            for i, d in enumerate(peaks):\n                x_data = x[d - minimum_distance // 2 : d + minimum_distance // 2 + 1]\n                y_data = y[d - minimum_distance // 2 : d + minimum_distance // 2 + 1]\n                tau = x[d]  # approximation of tau (peak position in x)\n                c = y[d]  # approximation of peak amplitude\n                a = (\n                    np.sign(c)\n                    * (-1)\n                    * (np.sqrt(abs(c)) / (x_data[-1] - x_data[0])) ** 2\n                )\n                p0 = (a, tau, c)\n                popt, pcov = curve_fit(func, x_data, y_data, p0, maxfev=5000)\n                xp[i], yp[i] = popt[1:3]\n                # table+=\'\'\'<tr><td>%.4e</td><td>%.4e</td></tr>\'\'\'%(xp[i],yp[i])\n                table.append([""%-10.4e"" % xp[i], ""%-10.4e"" % yp[i]])\n            #################################################################\n        else:\n            for i, d in enumerate(peaks):\n                xp[i] = x[d]\n                yp[i] = y[d]\n                # table+=\'\'\'<tr><td>%.4e</td><td>%.4e</td></tr>\'\'\'%(xp[i],yp[i])\n                table.append([""%-10.4e"" % xp[i], ""%-10.4e"" % yp[i]])\n        # table+=\'\'\'</table><br>\'\'\'\n        if len(peaks) > 0:\n            self.Qprint(table)\n        s = ax.plot(xp, yp)[0]\n        s.set_marker(""D"")\n        s.set_linestyle("""")\n        s.set_markerfacecolor(color)\n        s.set_markeredgecolor(""black"")\n        s.set_markeredgewidth(3)\n        s.set_markersize(12)\n        s.set_alpha(0.5)\n        self.seriesarray.append(s)\n        self.axarray.append(ax)\n        return x, y\n\n\nclass CLToolFindPeaks(BaseToolFindPeaks, Tool):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_app)\n\n    # This class usually stays empty\n\n\nclass GUIToolFindPeaks(BaseToolFindPeaks, QTool):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_app)\n        self.update_parameter_table()\n        self.tb.addSeparator()\n        self.minpeaks = self.tb.addAction(""Minimum peaks"")\n        self.minpeaks.setCheckable(True)\n        self.handle_minpeaks_button(checked=False)\n        connection_id = self.minpeaks.triggered.connect(self.handle_minpeaks_button)\n        self.parabola = self.tb.addAction(""Fit Parabola"")\n        self.parabola.setIcon(QIcon("":/Icon8/Images/new_icons/icons8-bell-curve.png""))\n        self.parabola.setCheckable(True)\n        self.parabola.setChecked(False)\n        connection_id = self.parabola.triggered.connect(self.handle_parabola_button)\n        self.parent_application.update_all_ds_plots()\n\n    # add widgets specific to the Tool here:\n\n    def handle_minpeaks_button(self, checked):\n        if checked:\n            self.minpeaks.setIcon(\n                QIcon("":/Icon8/Images/new_icons/icons8-peak-minimum.png"")\n            )\n        else:\n            self.minpeaks.setIcon(\n                QIcon("":/Icon8/Images/new_icons/icons8-peak-maximum.png"")\n            )\n        self.minpeaks.setChecked(checked)\n        self.set_param_value(""minpeaks"", checked)\n        self.parent_application.update_all_ds_plots()\n\n    def handle_parabola_button(self, checked):\n        self.parabola.setChecked(checked)\n        self.set_param_value(""parabola"", checked)\n        self.parent_application.update_all_ds_plots()\n'"
RepTate/tools/ToolGradient.py,1,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Tool and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2018): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module ToolGradient\n\nGradient file for creating a new Tool\n""""""\nimport numpy as np\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Tool import Tool\nfrom RepTate.gui.QTool import QTool\n\n\nclass ToolGradient(CmdBase):\n    """"""Calculate the derivative of y with respect to x, where y is the ordinate and x is the abcissa in the current view. The gradient function from numpy is used, where the derivative is computed using second order accurate central differences in the interior points and first order accurate one-sides (forward or backwards) differences at the boundaries.\n    """"""\n\n    toolname = ""Gradient""\n    description = ""Take derivative of current data/view""\n    citations = []\n\n    def __new__(cls, name="""", parent_app=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUIToolGradient(name, parent_app)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLToolGradient(name, parent_app)\n        )\n\n\nclass BaseToolGradient:\n    """"""Base class for both GUI and CL""""""\n\n    # html_help_file = \'http://reptate.readthedocs.io/manual/Tools/Gradient.html\'\n    toolname = ToolGradient.toolname\n    citations = ToolGradient.citations\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_app)\n        # self.function = self.gradient  # main Tool function\n        # self.parameters[\'param1\'] = Parameter(\n        # name=\'param1\',\n        # value=1,\n        # description=\'parameter 1\',\n        # type=ParameterType.real,\n        # opt_type=OptType.const)\n\n    def calculate(self, x, y, ax=None, color=None, file_parameters=[]):\n        try:\n            y2 = np.gradient(y, x)\n            return x, y2\n\n        except TypeError as e:\n            print(""in ToolGradient.Gradient() "", e)\n            return x, y\n\n\nclass CLToolGradient(BaseToolGradient, Tool):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_app)\n\n    # This class usually stays empty\n\n\nclass GUIToolGradient(BaseToolGradient, QTool):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_app)\n        self.update_parameter_table()\n        self.parent_application.update_all_ds_plots()\n\n    # add widgets specific to the Tool here:\n'"
RepTate/tools/ToolIntegral.py,2,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Tool and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2018): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module ToolIntegral\n\nIntegral file for creating a new Tool\n""""""\nimport traceback\nimport numpy as np\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Tool import Tool\nfrom RepTate.gui.QTool import QTool\nfrom scipy.integrate import odeint\nfrom scipy.interpolate import interp1d\n\n\nclass ToolIntegral(CmdBase):\n    """"""Calculate the integral of y with respect to x, where y is the ordinate and x is the abcissa in the current view. Repeated points in the data are removed before the integral is performed. The data between the point is interpolated with a cubic spline. The total value of the definite integral is shown in the Tool output region.\n    If a different integration interval is needed, the Bounds tool can be used before the Integral tool.\n    """"""\n\n    toolname = ""Integral""\n    description = ""Integral of current data/view""\n    citations = []\n\n    def __new__(cls, name="""", parent_app=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUIToolIntegral(name, parent_app)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLToolIntegral(name, parent_app)\n        )\n\n\nclass BaseToolIntegral:\n    """"""Base class for both GUI and CL""""""\n\n    # html_help_file = \'http://reptate.readthedocs.io/manual/Tools/Integral.html\'\n    toolname = ToolIntegral.toolname\n    citations = ToolIntegral.citations\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_app)\n\n        # self.function = self.integral  # main Tool function\n        # self.parameters[\'param1\'] = Parameter(\n        # name=\'param1\',\n        # value=1,\n        # description=\'parameter 1\',\n        # type=ParameterType.real,\n        # opt_type=OptType.const)\n\n    def calculate(self, x, y, ax=None, color=None, file_parameters=[]):\n        """"""Integral function that returns the square of the y, according to the view""""""\n        xunique, indunique = np.unique(x, return_index=True)\n        num_rows = len(xunique)\n        yunique = y[indunique]\n        try:\n            ff = interp1d(\n                xunique,\n                yunique,\n                bounds_error=False,\n                kind=""cubic"",\n                fill_value=""extrapolate"",\n                assume_sorted=True,\n            )\n\n            func = lambda y0, t: ff(t)\n            y2 = odeint(func, [0], xunique)\n\n            y2 = np.reshape(y2, num_rows, 1)\n            self.Qprint(""<b>I</b> = %g"" % y2[-1])\n            return xunique, y2\n        except Exception as e:\n            self.Qprint(""in ToolIntegral.calculate(): %s"" % traceback.format_exc())\n            return x, y\n\n\nclass CLToolIntegral(BaseToolIntegral, Tool):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_app)\n\n    # This class usually stays empty\n\n\nclass GUIToolIntegral(BaseToolIntegral, QTool):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_app)\n        self.update_parameter_table()\n        self.parent_application.update_all_ds_plots()\n\n    # add widgets specific to the Tool here:\n'"
RepTate/tools/ToolInterpolate.py,1,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Tool and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2018): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module InterpolateExtrapolate\n\nInterpolate/Extrapolate data\n""""""\nimport traceback\nimport numpy as np\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Tool import Tool\nfrom RepTate.gui.QTool import QTool\nfrom scipy.interpolate import interp1d\n\n\nclass ToolInterpolateExtrapolate(CmdBase):\n    """"""Interpolates data""""""\n\n    toolname = ""Interpolate/Extrapolate""\n    description = ""Interpolate/Extrapolate from view""\n    citations = []\n\n    def __new__(cls, name="""", parent_app=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUIToolInterpolateExtrapolate(name, parent_app)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLToolInterpolateExtrapolate(name, parent_app)\n        )\n\n\nclass BaseToolInterpolateExtrapolate:\n    """"""Base class for both GUI and CL""""""\n\n    # html_help_file = \'http://reptate.readthedocs.io/manual/Tools/template.html\'\n    toolname = ToolInterpolateExtrapolate.toolname\n    citations = ToolInterpolateExtrapolate.citations\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_app)\n        self.parameters[""x""] = Parameter(\n            name=""x"",\n            value=1,\n            description=""x"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n\n    def calculate(self, x, y, ax=None, color=None, file_parameters=[]):\n        """"""InterpolateExtrapolate function that returns the square of the y, according to the view""""""\n        xval = self.parameters[""x""].value\n        xunique, indunique = np.unique(x, return_index=True)\n        yunique = y[indunique]\n        try:\n            # table=\'\'\'<table border=""1"" width=""100%"">\'\'\'\n            # table+=\'\'\'<tr><th>x</th><th>y</th></tr>\'\'\'\n            table = [\n                [""%-10s"" % ""x"", ""%-10s"" % ""y""],\n            ]\n            ff = interp1d(\n                xunique,\n                yunique,\n                bounds_error=False,\n                kind=""cubic"",\n                fill_value=""extrapolate"",\n                assume_sorted=True,\n            )\n            func = lambda t: ff(t)\n            yval = func(xval)\n            # table+=\'\'\'<tr><td>%.4e</td><td>%.4e</td></tr>\'\'\'%(xval,yval)\n            table.append([""%-10.4e"" % xval, ""%-10.4e"" % yval])\n            # table+=\'\'\'</table><br>\'\'\'\n            self.Qprint(table)\n        except Exception as e:\n            self.Qprint(\n                ""in ToolInterpolateExtrapolate.calculate(): %s"" % traceback.format_exc()\n            )\n        return x, y\n\n\nclass CLToolInterpolateExtrapolate(BaseToolInterpolateExtrapolate, Tool):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_app)\n\n    # This class usually stays empty\n\n\nclass GUIToolInterpolateExtrapolate(BaseToolInterpolateExtrapolate, QTool):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_app)\n        self.update_parameter_table()\n        self.parent_application.update_all_ds_plots()\n\n    # add widgets specific to the Tool here:\n'"
RepTate/tools/ToolMaterialsDatabase.py,19,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Tool and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2018): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module ToolMaterialsDatabase\n\nMaterialsDatabase Viewer\n""""""\nimport sys\nimport os\nimport numpy as np\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType\nfrom RepTate.core.Tool import Tool\nfrom RepTate.gui.QTool import QTool\nfrom PyQt5.QtWidgets import (\n    QComboBox,\n    QLabel,\n    QToolBar,\n    QLineEdit,\n    QAction,\n    QMessageBox,\n    QDialog,\n    QDialogButtonBox,\n    QVBoxLayout,\n    QGroupBox,\n    QFormLayout,\n    QInputDialog,\n    QTreeWidgetItemIterator\n)\nfrom PyQt5.QtCore import QSize, QStandardPaths\nfrom PyQt5.QtGui import QStandardItem, QFont, QIcon, QColor, QDoubleValidator\nfrom pathlib import Path\nimport RepTate.tools.polymer_data as polymer_data\nfrom colorama import Fore\n\nif getattr(sys, \'frozen\', False):\n    # If the application is run as a bundle, the PyInstaller bootloader\n    # extends the sys module by a flag frozen=True and sets the app \n    # path into variable _MEIPASS\'.\n    PATH = sys._MEIPASS\nelse:\n    PATH = os.path.dirname(os.path.abspath(__file__))\n\n# The following two lines are temporary. They can be removed after the database is pickeld with RepTate.ttols.polymer_data instead of polymer_data\n# sys.path.append(os.path.dirname(os.path.realpath(__file__)))\n# dir_path = os.path.dirname(os.path.realpath(__file__))\nsys.path.append(PATH)\nmaterials_database = np.load(\n    os.path.join(PATH, ""materials_database.npy""), allow_pickle=True\n).item()\n\n# search user material database in the (old) location ""HOME""\nhome_path = str(Path.home())\nfile_user_database_old = os.path.join(home_path, ""user_database.npy"")\nif os.path.exists(file_user_database_old):\n    materials_user_database_old = np.load(file_user_database_old, allow_pickle=True).item()\nelse:\n    materials_user_database_old = {}\n\n# search user material database in the (new) location ""AppData""\nAppData_path = QStandardPaths.writableLocation(QStandardPaths.AppDataLocation)\nfile_user_database = os.path.join(AppData_path, ""user_database.npy"")\nif os.path.exists(file_user_database):\n    materials_user_database = np.load(file_user_database, allow_pickle=True).item()\nelse:\n    materials_user_database = {}\n\nmaterials_user_database.update(materials_user_database_old)\nmaterials_db = [materials_user_database, materials_database]\n\n\nclass EditMaterialParametersDialog(QDialog):\n    """"""Create the form that is used to edit/modify the material parameters""""""\n\n    def __init__(self, parent, material, parameterdata):\n        super().__init__(parent)\n        self.parent_dataset = parent\n        self.material = material\n        self.createFormGroupBox(material, parameterdata)\n\n        buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n        buttonBox.accepted.connect(self.accept)\n        buttonBox.rejected.connect(self.reject)\n\n        mainLayout = QVBoxLayout()\n        mainLayout.addWidget(self.formGroupBox)\n        mainLayout.addWidget(buttonBox)\n        self.setLayout(mainLayout)\n        self.setWindowTitle(""Edit Material Parameters"")\n\n    def createFormGroupBox(self, material, parameterdata):\n        """"""Create a form to set the new values of the material parameters""""""\n        self.formGroupBox = QGroupBox(\n            \'Parameters of material ""%s""\' % material.data[""name""]\n        )\n        layout = QFormLayout()\n\n        parameters = material.data\n        self.param_dict = {}\n        self.p_new = []\n        for i, pname in enumerate(material.data.keys()):\n            self.p_new.append(QLineEdit())\n            if isinstance(material.data[pname], str):  # the parameter is a string\n                self.p_new[i].setText(""%s"" % material.data[pname])\n            else:  # parameter is a number:\n                self.p_new[i].setValidator(QDoubleValidator())  # prevent letters\n                self.p_new[i].setText(""%.4g"" % material.data[pname])\n            self.p_new[i].setToolTip(parameterdata[pname].description)\n            if pname == ""name"":\n                self.p_new[i].setReadOnly(True)\n            layout.addRow(""%s:"" % pname, self.p_new[i])\n            self.param_dict[pname] = self.p_new[i]\n        self.formGroupBox.setLayout(layout)\n\n\ndef check_chemistry(chem):\n    """"""Check if the file contains chemistry. If so, check if the chemistry appears in\n    the user or general materials database.\n        Arguments:\n            - chem {str} -- Chemistry\n        Returns:\n            - code {integer} -- -1 (not found) 0 (found in user\'s) 1 (found in general database)\n    """"""\n    if chem in materials_user_database.keys():\n        return 0\n    elif chem in materials_database.keys():\n        return 1\n    else:\n        return -1\n\n\ndef get_all_parameters(chem, theory, fparam, dbindex):\n    """"""Gets all possible parameters from the corresponding materials database.\n    The function check_chemistry must be involed before this one, to get chem and dbindex.\n        Arguments:\n            - chem {str} -- Chemistry\n            - theory {Theory} -- A given theory\n            - file_parameters {dict} -- Parameters of the file\n            - dbindex {int} -- Index of the database to use (0 user, 1 general)\n        Returns:\n            - nothing\n    """"""\n    for p in theory.parameters.keys():\n        if p in materials_db[dbindex][chem].data.keys():\n            value, success = get_single_parameter(chem, p, fparam, dbindex)\n            if success:\n                theory.set_param_value(p, value)\n\n\ndef get_single_parameter(chem, param, fparam, dbindex):\n    """"""Returns the parameter \'param\' of the chemistry \'chem\' using the database\n    given by dbindex (0 user, 1 general) and taking into account the parameters\n    of fparam (for example, T and Mw).\n    The parameter \'param\' must exist in the database. This is done when this function\n    is invoked from get_all_parameters. If this function is invoked directly, the\n    condition must be chedked beforehand.\n        Arguments:\n            - chem {str} -- Chemistry\n            - param -- The theory parameter that we want to set\n            - file_parameters {dict} -- Parameters of the file\n            - dbindex {int} -- Index of the database to use (0 user, 1 general)\n        Returns:\n            - value -- The value of the parameter\n            - success {bool} -- A success flag\n    """"""\n    if param == ""tau_e"":\n        try:\n            T = float(fparam[""T""])\n        except:  # T was not found in the file parameters\n            return 0, False\n\n        tau_e = materials_db[dbindex][chem].data[""tau_e""]\n        B1 = materials_db[dbindex][chem].data[""B1""]\n        B2 = materials_db[dbindex][chem].data[""B2""]\n        Te = materials_db[dbindex][chem].data[""Te""]\n        aT = np.power(10.0, -B1 * (Te - T) / (B2 + T) / (B2 + Te))\n        tau_e /= aT\n        # We don\xc2\xb4t consider the effect of Tg in this estimate\n        return tau_e, True\n    elif param == ""Ge"":\n        try:\n            T = float(fparam[""T""])\n        except:  # T was not found in the file parameters\n            return 0, False\n        logalpha = materials_db[dbindex][chem].data[""logalpha""]\n        Ge = materials_db[dbindex][chem].data[""Ge""]\n        Te = materials_db[dbindex][chem].data[""Te""]\n        alpha = np.power(10.0, logalpha)\n        bT = (1 + alpha * Te) * (T + 273.15) / (1 + alpha * T) / (Te + 273.15)\n        Ge /= bT\n        return Ge, True\n    elif param == ""rho0"":\n        try:\n            T = float(fparam[""T""])\n        except:  # T was not found in the file parameters\n            return 0, False\n        rho0 = materials_db[dbindex][chem].data[""rho0""]\n        logalpha = materials_db[dbindex][chem].data[""logalpha""]\n        alpha = np.power(10.0, logalpha)\n        rho = rho0 / (1.0 + alpha * T)\n        return rho, True\n    else:\n        value = materials_db[dbindex][chem].data[param]\n        return value, True\n\n\nclass ToolMaterialsDatabase(CmdBase):\n    """"""A special Tool to store the material parameters. Many apps and theories rely on the\n    parameters stored in this database. There are two copies of the database: i) a general one\n    that is distributed with RepTate, is stored in the software installation folder and contains\n    well established values of the parameters and ii) a user database that contains material\n    parameters introduced by the user and is stored in the user HOME folder.\n    """"""\n\n    toolname = ""Materials Database""\n    description = ""Materials Database Explorer""\n    citations = []\n\n    def __new__(cls, name="""", parent_app=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUIToolMaterialsDatabase(name, parent_app)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLToolMaterialsDatabase(name, parent_app)\n        )\n\n\nclass BaseToolMaterialsDatabase:\n    """"""Base class for both GUI and CL""""""\n\n    # html_help_file = \'http://reptate.readthedocs.io/manual/Tools/MaterialsDatabase.html\'\n    toolname = ToolMaterialsDatabase.toolname\n    citations = ToolMaterialsDatabase.citations\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**\n        \n        """"""\n        super().__init__(name, parent_app)\n        self.parameters[""name""] = Parameter(\n            name=""name"",\n            description=""Name of polymer"",\n            type=ParameterType.string,\n            display_flag=False,\n        )\n        self.parameters[""long""] = Parameter(\n            name=""long"",\n            description=""Long name of polymer"",\n            type=ParameterType.string,\n            display_flag=False,\n        )\n        self.parameters[""author""] = Parameter(\n            name=""author"",\n            description=""Who added the data to the database?"",\n            type=ParameterType.string,\n            display_flag=False,\n        )\n        self.parameters[""date""] = Parameter(\n            name=""date"",\n            description=""Date when the data was added"",\n            type=ParameterType.string,\n            display_flag=False,\n        )\n        self.parameters[""source""] = Parameter(\n            name=""source"",\n            description=""Source of the data"",\n            type=ParameterType.string,\n            display_flag=False,\n        )\n        self.parameters[""comment""] = Parameter(\n            name=""comment"",\n            description=""Additional comments"",\n            type=ParameterType.string,\n            display_flag=False,\n        )\n        self.parameters[""B1""] = Parameter(name=""B1"", description=""WLF TTS parameter 1"")\n        self.parameters[""B2""] = Parameter(name=""B2"", description=""WLF TTS parameter 2"")\n        self.parameters[""logalpha""] = Parameter(\n            name=""logalpha"",\n            description=""Log_10 of the thermal expansion coefficient at 0 \xc2\xb0C"",\n        )\n        self.parameters[""CTg""] = Parameter(\n            name=""CTg"", description=""Molecular weight dependence of Tg""\n        )\n        self.parameters[""tau_e""] = Parameter(\n            name=""tau_e"", description=""Entanglement time (s)""\n        )\n        self.parameters[""Ge""] = Parameter(\n            name=""Ge"", description=""Entanglement modulus (Pa)""\n        )\n        self.parameters[""Me""] = Parameter(\n            name=""Me"", description=""Entanglement molecular weight (kDa)""\n        )\n        self.parameters[""c_nu""] = Parameter(\n            name=""c_nu"", description=""Constraint release parameter""\n        )\n        self.parameters[""rho0""] = Parameter(\n            name=""rho0"", description=""Density of the polymer melt (g/cm3) at 0 \xc2\xb0C""\n        )\n        self.parameters[""chem""] = Parameter(\n            name=""chem"", description=""Repeating unit"", type=ParameterType.string\n        )\n        self.parameters[""Te""] = Parameter(\n            name=""Te"",\n            description=""Temperature at which the tube parameters have been determined (\xc2\xb0C)"",\n        )\n        self.parameters[""M0""] = Parameter(\n            name=""M0"", description=""Mass of Repeating unit (g/mol)""\n        )\n        self.parameters[""MK""] = Parameter(\n            name=""MK"", description=""Molecular weight of Kuhn step (Da)""\n        )\n        self.parameters[""C_inf""] = Parameter(\n            name=""C_inf"", description=""Characteristic ratio""\n        )\n\n        # Search for the chemistry in the first file of the first dataset (OR CURRENT DATASET?)\n        self.init_chem = None\n        if len(parent_app.datasets)>0:\n            ds = parent_app.datasets[list(parent_app.datasets)[0]]\n            if len(ds.files)>0:\n                f = ds.files[0]\n                if \'chem\' in f.file_parameters:\n                    self.init_chem=f.file_parameters[\'chem\']\n\n    def calculate(self, x, y, ax=None, color=None, file_parameters=[]):\n        """"""Calculate some results related to the selected material or the file material""""""\n        if (CmdBase.mode == CmdMode.GUI):\n            self.calculate_stuff("""", file_parameters)\n        return x, y\n\n    def do_calculate_stuff(self, line=""""):\n        """"""Given the values of Mw (in kDa) and T (in \xc2\xb0C), as well as a flag for isofrictional state and vertical shift, it returns some calculations for the current chemistry.\nExample:\n    calculate_stuff 35.4 240 1 1\n\n    Mw=35.4 T=240 isofrictional=True verticalshift=True""""""\n        items = line.split()\n        if len(items) == 4:\n            Mw = float(items[0])\n            T = float(items[1])\n            iso = bool(items[2])\n            vert = bool(items[3])\n            B1 = self.parameters[""B1""].value\n            B2 = self.parameters[""B2""].value\n            logalpha = self.parameters[""logalpha""].value\n            alpha = np.power(10.0, logalpha)\n            CTg = self.parameters[""CTg""].value\n            tau_e = self.parameters[""tau_e""].value\n            Ge = self.parameters[""Ge""].value\n            Me = self.parameters[""Me""].value\n            c_nu = self.parameters[""c_nu""].value\n            rho0 = self.parameters[""rho0""].value\n            Te = self.parameters[""Te""].value\n\n            if iso:\n                B2 += CTg / Mw  # - 68.7 * dx12\n                Trcorrected = T - CTg / Mw  # + 68.7 * dx12\n            else:\n                Trcorrected = T\n\n            aT = np.power(\n                10.0, -B1 * (Te - Trcorrected) / (B2 + Trcorrected) / (B2 + Te)\n            )\n            if vert:\n                bT = (1 + alpha * Te) * (T + 273.15) / (1 + alpha * T) / (Te + 273.15)\n            else:\n                bT = 1\n\n            self.Qprint(""<hr><h3>WLF TTS Shift Factors</h3>"")\n            # Need T1 (to shift from) and T2 (to shift to), if we want to report aT and bT\n            self.Qprint(""<b>C1</b> = %g"" % (B1 / (B2 + T)))\n            self.Qprint(""<b>C2</b> = %g<br>"" % (B2 + T))\n\n            self.Qprint(""<h3>Tube Theory parameters</h3>"")\n            Ge /= bT\n            tau_e /= aT\n            self.Qprint(""<b>tau_e</b> = %g"" % tau_e)\n            self.Qprint(""<b>Ge</b> = %g<br>"" % Ge)\n\n            self.Qprint(""<h3>Other Results</h3>"")\n            CC1 = 1.69\n            CC2 = 4.17\n            CC3 = -1.55\n            Z = Mw / Me\n            tR = tau_e * Z * Z\n            tD = (\n                3\n                * tau_e\n                * Z ** 3\n                * (1 - 2 * CC1 / np.sqrt(Z) + CC2 / Z + CC3 / Z ** 1.5)\n            )\n            self.Qprint(""<b>Z</b> = %g"" % Z)\n            self.Qprint(""<b>tau_R</b> = %g"" % tR)\n            self.Qprint(""<b>tau_D</b> = %g<br>"" % tD)\n        else:\n            print(""Wrong number of parameters."")\n            print(""   Usage: calculate_stuff Mw T isofrictional verticalshift"")\n\n    def calculate_all(self, n, x, y, ax=None, color=None, file_parameters=[]):\n        """"""Calculate the tool for all views - In MatDB, only first view is needed """"""\n        newxy = []\n        lenx = 1e9\n        for i in range(n):\n            self.Qprint(""<b>Series %d</b>"" % (i + 1))\n            xcopy = x[:, i]\n            ycopy = y[:, i]\n            if i == 0:\n                xcopy, ycopy = self.calculate(xcopy, ycopy, ax, color, file_parameters)\n            newxy.append([xcopy, ycopy])\n            lenx = min(lenx, len(xcopy))\n        x = np.resize(x, (lenx, n))\n        y = np.resize(y, (lenx, n))\n        for i in range(n):\n            x[:, i] = np.resize(newxy[i][0], lenx)\n            y[:, i] = np.resize(newxy[i][1], lenx)\n        return x, y\n\n\nclass CLToolMaterialsDatabase(BaseToolMaterialsDatabase, Tool):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_app)\n        if self.init_chem is not None:\n            self.do_material(self.init_chem)\n\n    def do_database(self, line):\n        """"""Print information about the location of the Material database files""""""\n        print(\n            Fore.RED\n            + ""RepTate Material database: ""\n            + Fore.RESET\n            + os.path.join(dir_path, ""materials_database.npy"")\n        )\n        print(\n            Fore.RED + ""User\'s material database:  "" + Fore.RESET + file_user_database\n        )\n\n    def do_material(self, line):\n        """"""Change/View the selected material""""""\n        db = check_chemistry(line)\n        if line == """":\n            print(""Current Material: "" + Fore.RED + self.parameters[""name""].value)\n        elif db < 0:\n            print(""Material "" + Fore.RED + line + Fore.RESET + "" not found."")\n        else:\n            for k in materials_db[db][line].data.keys():\n                self.set_param_value(k, materials_db[db][line].data[k])\n\n    def complete_material(self, text, line, begidx, endidx):\n        chems = list(materials_db[0].keys()) + list(materials_db[1].keys())\n        if not text:\n            completions = chems[:]\n        else:\n            completions = [f for f in chems if f.startswith(text)]\n        return completions\n\n\nclass GUIToolMaterialsDatabase(BaseToolMaterialsDatabase, QTool):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_app)\n        self.update_parameter_table()\n        # self.parent_application.update_all_ds_plots()\n\n        # add widgets specific to the Tool here:\n        self.active = True\n        self.applytotheory = False\n        self.actionActive.setVisible(True)\n        self.actionApplyToTheory.setVisible(False)\n        self.cbmaterial = QComboBox()\n        self.cbmaterial.setToolTip(""Choose a Material from the database"")\n        self.model = self.cbmaterial.model()\n        i = 0\n        for polymer in materials_database.keys():\n            item = QStandardItem(polymer)\n            item.setToolTip(materials_database[polymer].data[""long""])\n            self.model.appendRow(item)\n            i += 1\n        self.num_materials_base = i\n        # self.cbmaterial.insertSeparator(i)\n        for polymer in materials_user_database.keys():\n            item = QStandardItem(polymer)\n            item.setToolTip(materials_user_database[polymer].data[""long""])\n            item.setForeground(QColor(""red""))\n            self.model.appendRow(item)\n        self.tb.addWidget(self.cbmaterial)\n        connection_id = self.cbmaterial.currentIndexChanged.connect(\n            self.change_material\n        )\n\n        self.actionCalculate = QAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-ok.png""),\n            ""Calculate stuff with selected Mw/T"",\n            self,\n        )\n        self.tb.addAction(self.actionCalculate)\n        self.actionNew = QAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-add-file.png""), ""New Material"", self\n        )\n        self.tb.addAction(self.actionNew)\n        self.actionEdit = QAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-edit-property.png""),\n            ""Edit/View Material Properties"",\n            self,\n        )\n        self.tb.addAction(self.actionEdit)\n        self.actionCopy = QAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-copy-96.png""),\n            ""Duplicate Material"",\n            self,\n        )\n        self.tb.addAction(self.actionCopy)\n        self.actionDelete = QAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-delete-document-96.png""),\n            ""Delete Material"",\n            self,\n        )\n        self.tb.addAction(self.actionDelete)\n        self.actionSave = QAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-save.png""),\n            ""Save User Material Database"",\n            self,\n        )\n        self.tb.addAction(self.actionSave)\n        connection_id = self.actionCalculate.triggered.connect(self.calculate_stuff)\n        connection_id = self.actionNew.triggered.connect(self.new_material)\n        connection_id = self.actionEdit.triggered.connect(self.edit_material)\n        connection_id = self.actionCopy.triggered.connect(self.copy_material)\n        connection_id = self.actionDelete.triggered.connect(self.delete_material)\n        connection_id = self.actionSave.triggered.connect(self.save_usermaterials)\n\n        self.labelPolymer = QLabel(""None"")\n        self.labelPolymer.setFont(QFont(""Times"", weight=QFont.Bold))\n        self.verticalLayout.insertWidget(1, self.labelPolymer)\n\n        self.tbMwT = QToolBar()\n        self.tbMwT.setIconSize(QSize(24, 24))\n        lbl1 = QLabel(""Mw (kDa)"")\n        lbl1.setFont(QFont(""Times"", weight=QFont.Bold))\n        self.tbMwT.addWidget(lbl1)\n        self.editMw = QLineEdit(""1"")\n        self.editMw.setStyleSheet(""QLineEdit { background: rgb(255, 255, 205);}"")\n        self.editMw.setFixedWidth(40)\n        self.tbMwT.addWidget(self.editMw)\n        lbl2 = QLabel(""T (\xc2\xb0C)"")\n        lbl2.setFont(QFont(""Times"", weight=QFont.Bold))\n        self.tbMwT.addWidget(lbl2)\n        self.editT = QLineEdit(""0"")\n        self.editT.setStyleSheet(""QLineEdit { background: rgb(255, 255, 205);}"")\n        self.editT.setFixedWidth(40)\n        self.tbMwT.addWidget(self.editT)\n        self.verticalshift = self.tbMwT.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-vertical-shift.png""),\n            ""Vertical shift"",\n        )\n        self.verticalshift.setCheckable(True)\n        self.verticalshift.setChecked(True)\n        self.isofrictional = self.tbMwT.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-iso.png""),\n            ""Shift to isofrictional state"",\n        )\n        self.isofrictional.setCheckable(True)\n        self.isofrictional.setChecked(True)\n        self.shiftdata = self.tbMwT.addAction(\n            QIcon("":/Icon8/Images/new_icons/icons8-vertical-shift-data.png""),\n            ""Shift all Files in the current Application""\n        )\n        self.verticalLayout.insertWidget(2, self.tbMwT)\n        connection_id = self.isofrictional.triggered.connect(self.handle_vert_and_iso)\n        connection_id = self.verticalshift.triggered.connect(self.handle_vert_and_iso)\n        connection_id = self.shiftdata.triggered.connect(self.handle_shift_data)\n\n        init_chem_index = self.cbmaterial.findText(self.init_chem)\n        if init_chem_index>-1:\n            self.cbmaterial.setCurrentIndex(init_chem_index)\n        self.change_material()\n\n    def handle_vert_and_iso(self):\n        self.do_plot()\n\n    def handle_shift_data(self):\n        Tr = float(self.editT.text())\n        chem = self.cbmaterial.currentText()\n        msg = ""Selected T=%g\\nSelected material=%s\\n""%(Tr, chem)\n        msg += ""Do you want to shift all Tables in the current Dataset ""\n        msg += ""to the chosen temperature using the WLF parameters for the chosen material?""\n        ans = QMessageBox.question(\n            self,\n            ""Shift all data"",\n            msg,\n            buttons=(QMessageBox.Yes | QMessageBox.No),\n        )\n        if ans != QMessageBox.Yes:\n            return\n        \n        # Calculate shift factors \n\n        B1 = self.parameters[""B1""].value\n        B2 = self.parameters[""B2""].value\n        logalpha = self.parameters[""logalpha""].value\n        alpha = np.power(10.0, logalpha)\n        CTg = self.parameters[""CTg""].value\n        iso = self.isofrictional.isChecked()\n        vert = self.verticalshift.isChecked()\n\n        # Get current dataset\n        ds = self.parent_application.DataSettabWidget.currentWidget()\n        if not ds:\n            return\n\n        # Loop over files\n        for f in ds.files:\n            # Get file Current Temperature\n            Tf = f.file_parameters[""T""]\n            Mw = f.file_parameters[""Mw""]\n            if ""iso"" in f.file_parameters:\n                iso_file = (f.file_parameters[""iso""].upper() == ""TRUE"")\n            elif ""isof"" in f.file_parameters:\n                iso_file = (f.file_parameters[""isof""].upper() == ""TRUE"")\n            else:\n                iso_file=False\n\n            if iso and not iso_file:\n                B2corrected = B2 + CTg / Mw  # - 68.7 * dx12\n                Trcorrected = Tr - CTg / Mw  # + 68.7 * dx12\n            else:\n                B2corrected = B2\n                Trcorrected = Tr\n\n            aT = np.power(10.0, -B1 * (Tf - Trcorrected) / (B2corrected + Trcorrected) / (B2corrected + Tf))\n            if vert:\n                bT = (1 + alpha * Tf) * (Tr + 273.15) / (1 + alpha * Tr) / (Tf + 273.15)\n            else:\n                bT = 1\n\n            # Loop over file type columns\n            for i, c in enumerate(f.file_type.col_names):\n                if c in [""t"", ""time""]: # Shift horizontally to the left\n                    f.data_table.data[:, i] = f.data_table.data[:, i]/aT\n                elif c in [""w""]: # Shift horizontally to the right\n                    f.data_table.data[:, i] = f.data_table.data[:, i]*aT\n                elif c in [""G\'"", ""G\'\'"", ""Gt"", ""sigma_xy"", ""N1"", ""sigma""]: # Shift vertically up\n                    f.data_table.data[:, i] = f.data_table.data[:, i]*bT\n        \n            # Change file parameter T to target Temperature\n            f.file_parameters[""T""] = Tr\n\n            it = QTreeWidgetItemIterator(ds.DataSettreeWidget)\n            while it.value():\n                if (it.value().text(0)==f.file_name_short):\n                    for i in range(ds.DataSettreeWidget.columnCount()):\n                        if ""T"" == ds.DataSettreeWidget.headerItem().text(i):\n                            it.value().setText(i, str(f.file_parameters[""T""]))\n                it+=1;\n\n        self.do_plot()\n        \n\n\n    def change_material(self):\n        selected_material_name = self.cbmaterial.currentText()\n        if self.cbmaterial.currentIndex() < self.num_materials_base:\n            dbindex = 1\n        else:\n            dbindex = 0\n        self.labelPolymer.setText(\n            materials_db[dbindex][selected_material_name].data[""long""]\n        )\n        for k in materials_db[dbindex][selected_material_name].data.keys():\n            self.set_param_value(\n                k, materials_db[dbindex][selected_material_name].data[k]\n            )\n        self.update_parameter_table()\n        self.do_plot()\n\n    def new_material(self):\n        # Dialog to ask for short name. Repeat until the name is not in the user\'s database or CANCEL\n        ok = False\n        while not ok:\n            name, ok = QInputDialog.getText(\n                self, ""New name"", ""Enter the short name of the new material:""\n            )\n            if not ok:\n                return\n            if name in materials_user_database:\n                QMessageBox.warning(\n                    self, ""New name"", ""Error: The name already exists in your database""\n                )\n                ok = False\n\n        # Create new material with empty  parameters and open the edit dialog\n        newmaterial = polymer_data.polymer(\n            name=name,\n            long=""Long Name"",\n            author=""Author"",\n            date=""dd/mm/yyyy"",\n            source=""lab"",\n            comment=""comment"",\n            B1=900,\n            B2=100,\n            logalpha=-3,\n            CTg=0,\n            tau_e=1.0e-6,\n            Ge=1.0e6,\n            Me=1.6,\n            c_nu=0.1,\n            rho0=1.0,\n            chem=""C6H6"",\n            Te=25,\n            M0=0,\n        )\n        newmaterial.data[""name""] = name\n        materials_user_database[name] = newmaterial\n        item = QStandardItem(name)\n        item.setToolTip(materials_user_database[name].data[""long""])\n        item.setForeground(QColor(""red""))\n        self.model.appendRow(item)\n        self.cbmaterial.setCurrentText(name)\n        self.edit_material()\n\n    """"""\n    Edit the parameters of a user material.\n        - dbindex {int} -- Index of the database to use (0 user, 1 general)\n    """"""\n\n    def edit_material(self):\n        selected_material_name = self.cbmaterial.currentText()\n        if self.cbmaterial.currentIndex() < self.num_materials_base:\n            QMessageBox.warning(\n                self,\n                ""Edit material parameters"",\n                ""Error: Only user materials can be edited."",\n            )\n            return\n        material = materials_user_database[selected_material_name]\n        d = EditMaterialParametersDialog(self, material, self.parameters)\n        if d.exec_():\n            for p in d.param_dict:\n                if isinstance(material.data[p], str):\n                    material.data[p] = d.param_dict[p].text()\n                else:\n                    try:\n                        material.data[p] = float(d.param_dict[p].text())\n                    except Exception as e:\n                        print(e)\n                self.set_param_value(p, material.data[p])\n            self.change_material()\n\n    def save_usermaterials(self):\n        AppData_path = QStandardPaths.writableLocation(QStandardPaths.AppDataLocation)\n        file_user_database = os.path.join(AppData_path, ""user_database.npy"")\n        np.save(file_user_database, materials_user_database)\n        msg = ""Saved user database in \'%s\'"" % file_user_database\n        QMessageBox.information(self, \'Saved\', msg)\n\n    def copy_material(self):\n        # Dialog to ask for short name. Repeat until the name is not in the user\'s database or CANCEL\n        name = """"\n        ok = False\n        while not ok:\n            name, ok = QInputDialog.getText(\n                self, ""New name"", ""Enter the name of the new parameter:""\n            )\n            if not ok:\n                return\n            if name in materials_user_database:\n                QMessageBox.warning(\n                    self, ""New name"", ""Error: The name already exists in your database""\n                )\n                ok = False\n        # Create new user material with same parameters as source material and new NAME\n        # newpar=\n        selected_material_name = self.cbmaterial.currentText()\n        if self.cbmaterial.currentIndex() < self.num_materials_base:\n            dbindex = 1\n        else:\n            dbindex = 0\n        aux = materials_db[dbindex][selected_material_name].data\n        newmaterial = polymer_data.polymer(\n            name=name,\n            long=aux[""long""],\n            author=""Alexei Likhtman"",\n            date=""17/03/2006"",\n            source=aux[""source""],\n            comment=aux[""comment""],\n            B1=aux[""B1""],\n            B2=aux[""B2""],\n            logalpha=aux[""logalpha""],\n            CTg=aux[""CTg""],\n            tau_e=aux[""tau_e""],\n            Ge=aux[""Ge""],\n            Me=aux[""Me""],\n            c_nu=aux[""c_nu""],\n            rho0=aux[""rho0""],\n            chem=aux[""chem""],\n            Te=aux[""Te""],\n            M0=aux[""M0""],\n        )\n        materials_user_database[name] = newmaterial\n        item = QStandardItem(name)\n        item.setToolTip(materials_user_database[name].data[""long""])\n        item.setForeground(QColor(""red""))\n        self.model.appendRow(item)\n\n    def delete_material(self):\n        # Check that the material is in the user database\n        selected_material_name = self.cbmaterial.currentText()\n        if self.cbmaterial.currentIndex() < self.num_materials_base:\n            QMessageBox.warning(\n                self,\n                ""Dekete material parameters"",\n                ""Error: Only user materials can be deleted."",\n            )\n            return\n        # Dialog to ask for confimarion\n        ans = QMessageBox.question(\n            self,\n            ""Delete material parameters"",\n            ""Do you want to delete the material %s?"" % selected_material_name,\n            buttons=(QMessageBox.Yes | QMessageBox.No),\n        )\n        # Delete from ComboBox and User Material dictionary\n        if ans == QMessageBox.Yes:\n            self.cbmaterial.removeItem(self.cbmaterial.currentIndex())\n            materials_user_database.pop(selected_material_name)\n\n    def calculate_stuff(self, line="""", file_parameters=[]):\n        if ""Mw"" in file_parameters:\n            Mw = float(file_parameters[""Mw""])\n        else:\n            Mw = float(self.editMw.text())\n        if Mw == 0:\n            Mw = 1\n        if ""T"" in file_parameters:\n            T = float(file_parameters[""T""])\n        else:\n            T = float(self.editT.text())\n        B1 = self.parameters[""B1""].value\n        B2 = self.parameters[""B2""].value\n        logalpha = self.parameters[""logalpha""].value\n        alpha = np.power(10.0, logalpha)\n        CTg = self.parameters[""CTg""].value\n        tau_e = self.parameters[""tau_e""].value\n        Ge = self.parameters[""Ge""].value\n        Me = self.parameters[""Me""].value\n        c_nu = self.parameters[""c_nu""].value\n        rho0 = self.parameters[""rho0""].value\n        Te = self.parameters[""Te""].value\n        iso = self.isofrictional.isChecked()\n        vert = self.verticalshift.isChecked()\n\n        if iso:\n            B2 += CTg / Mw  # - 68.7 * dx12\n            Trcorrected = T - CTg / Mw  # + 68.7 * dx12\n        else:\n            Trcorrected = T\n\n        aT = np.power(10.0, -B1 * (Te - Trcorrected) / (B2 + Trcorrected) / (B2 + Te))\n        if vert:\n            bT = (1 + alpha * Te) * (T + 273.15) / (1 + alpha * T) / (Te + 273.15)\n        else:\n            bT = 1\n\n        tab_data = [\n            [""<b>Material &</b>"", ""<b>Temperature</b>""],\n        ]\n        tab_data.append([""<b>Chemistry</b>"", self.parameters[""long""].value])\n        tab_data.append([""<b>Mw</b>"", ""%g"" % Mw])\n        tab_data.append([""<b>T</b>"", ""%g"" % T])\n        tab_data.append([""<b>WLF Shift</b>"", ""<b>Factors</b>""])\n        tab_data.append([""<b>C1</b>"", ""%g"" % (B1 / (B2 + T))])\n        tab_data.append([""<b>C2</b>"", ""%g"" % (B2 + T)])\n        tab_data.append([""<b>Polymer &</b>"", ""<b>Tube dynamics</b>""])\n        Ge /= bT\n        tau_e /= aT\n        tab_data.append([""<b>tau_e</b>"", ""%g"" % tau_e])\n        tab_data.append([""<b>Ge</b>"", ""%g"" % Ge])\n        CC1 = 1.69\n        CC2 = 4.17\n        CC3 = -1.55\n        Z = Mw / Me\n        tR = tau_e * Z * Z\n        tD = 3 * tau_e * Z ** 3 * (1 - 2 * CC1 / np.sqrt(Z) + CC2 / Z + CC3 / Z ** 1.5)\n        tab_data.append([""<b>Z</b>"", ""%g"" % Z])\n        tab_data.append([""<b>tau_R</b>"", ""%g"" % tR])\n        tab_data.append([""<b>tau_D</b>"", ""%g"" % tD])\n        self.Qprint(tab_data)\n'"
RepTate/tools/ToolPowerLaw.py,0,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Tool and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2018): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module ToolPowerLaw\n\nTool to check the power law of some data\n""""""\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType, OptType\nfrom RepTate.core.Tool import Tool\nfrom RepTate.gui.QTool import QTool\n\n\nclass ToolPowerLaw(CmdBase):\n    """"""Check the power law of the data (or some part of it) by dividing the y coordinate by the x coordinate \nraised to n.\n    """"""\n\n    toolname = ""PowerLaw""\n    description = ""Check the power law of the data""\n    citations = []\n\n    def __new__(cls, name="""", parent_app=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUIToolPowerLaw(name, parent_app)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLToolPowerLaw(name, parent_app)\n        )\n\n\nclass BaseToolPowerLaw:\n    """"""Basic class for both GUI and CL""""""\n\n    # html_help_file = \'http://reptate.readthedocs.io/manual/Tools/template.html\'\n    toolname = ToolPowerLaw.toolname\n    citations = ToolPowerLaw.citations\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_app)\n        self.parameters[""n""] = Parameter(\n            name=""n"",\n            value=1,\n            description=""Power law exponent"",\n            type=ParameterType.real,\n            opt_type=OptType.const,\n        )\n\n    def destructor(self):\n        """"""If the tool needs to clear up memory in a very special way, fill up the contents of this function.\nIf not, you can safely delete it.""""""\n        pass\n\n    def calculate(self, x, y, ax=None, color=None, file_parameters=[]):\n        """"""Returns y divided by x^n, according to the view""""""\n        n = self.parameters[""n""].value\n        return x, y / x ** n\n\n\nclass CLToolPowerLaw(BaseToolPowerLaw, Tool):\n    """"""CL version""""""\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_app)\n\n    # This class usually stays empty\n\n\nclass GUIToolPowerLaw(BaseToolPowerLaw, QTool):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_app)\n        self.update_parameter_table()\n        self.parent_application.update_all_ds_plots()\n\n    # add widgets specific to the Tool here:\n'"
RepTate/tools/ToolSmooth.py,0,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Tool and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2018): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module ToolSmooth\n\nSmooth data by applying a Savitzky-Golay filter\n""""""\nimport traceback\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType\nfrom RepTate.core.Tool import Tool\nfrom RepTate.gui.QTool import QTool\nfrom scipy.signal import savgol_filter\n\n\nclass ToolSmooth(CmdBase):\n    """"""Smooths the current view data by applying a Savitzky-Golay filter. The smoothing procedure is controlled by means of two parameters: the **window** length (a positive, odd integer), which represents the number of convolution coefficients of the filter, and the **order** of the polynomial used to fit the samples (must be smaller than the window length).\n    """"""\n\n    toolname = ""Smooth""\n    description = ""Smooth Tool""\n    citations = []\n\n    def __new__(cls, name="""", parent_app=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUIToolSmooth(name, parent_app)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLToolSmooth(name, parent_app)\n        )\n\n\nclass BaseToolSmooth:\n    """"""Base class for both GUI and CL""""""\n\n    # html_help_file = \'http://reptate.readthedocs.io/manual/Tools/template.html\'\n    toolname = ToolSmooth.toolname\n    citations = ToolSmooth.citations\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_app)\n        self.parameters[""window""] = Parameter(\n            name=""window"",\n            value=11,\n            description=""Length of filter window. Positive odd integer, smaller than the size of y and larger than order"",\n            type=ParameterType.integer,\n        )\n        self.parameters[""order""] = Parameter(\n            name=""order"",\n            value=3,\n            description=""Order of smoothing polynomial (must be smaller than window)"",\n            type=ParameterType.integer,\n        )\n\n    def calculate(self, x, y, ax=None, color=None, file_parameters=[]):\n        """"""Smooth the x, y data""""""\n        window = self.parameters[""window""].value\n        order = self.parameters[""order""].value\n        if window % 2 == 0:\n            self.Qprint(""Invalid window (must be an odd number)"")\n            return x, y\n        if window >= len(y):\n            self.Qprint(""Invalid window (must be smaller than the length of the data)"")\n            return x, y\n        if window <= order:\n            self.Qprint(""Invalid order (must be smaller than the window)"")\n            return x, y\n\n        try:\n            y2 = savgol_filter(y, window, order)\n            return x, y2\n        except Exception as e:\n            self.Qprint(""in ToolSmooth.calculate(): %s"" % traceback.format_exc())\n            return x, y\n\n\nclass CLToolSmooth(BaseToolSmooth, Tool):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_app)\n\n    # This class usually stays empty\n\n\nclass GUIToolSmooth(BaseToolSmooth, QTool):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_app)\n        self.update_parameter_table()\n        self.parent_application.update_all_ds_plots()\n\n    # add widgets specific to the Tool here:\n\n    def set_param_value(self, name, value):\n        p = self.parameters[name]\n        old_value = p.value\n        try:\n            new_value = int(value)\n        except ValueError:\n            return ""Value must be a integer"", False\n        message, success = super().set_param_value(name, value)\n        if success:\n            if name == ""window"":\n                order = self.parameters[""order""].value\n                if new_value <= order or new_value < 0 or new_value % 2 == 0:\n                    p.value = old_value\n                    message = (\n                        ""window must be a positive, odd integer, larger than order""\n                    )\n                    success = False\n            elif name == ""order"":\n                window = self.parameters[""window""].value\n                if new_value >= window or new_value < 0:\n                    p.value = old_value\n                    message = ""order must be >=0 and smaller than window""\n                    success = False\n\n        return message, success\n'"
RepTate/tools/ToolTemplate.py,0,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Tool and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2018): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module ToolTemplate\n\nTemplate file for creating a new Tool\n""""""\nfrom RepTate.core.CmdBase import CmdBase, CmdMode\nfrom RepTate.core.Parameter import Parameter, ParameterType\nfrom RepTate.core.Tool import Tool\nfrom RepTate.gui.QTool import QTool\n\n\nclass ToolTemplate(CmdBase):\n    """"""TEMPLATE FOR NEW TOOLS. HERE IS WHERE THE BASIC INFORMATION OF THE TOOL SHOULD APPEAR.\n    """"""\n\n    toolname = ""TemplateTool""\n    description = ""Template Tool""\n    citations = []\n\n    def __new__(cls, name="""", parent_app=None):\n        """"""Create an instance of the GUI or CL class""""""\n        return (\n            GUIToolTemplate(name, parent_app)\n            if (CmdBase.mode == CmdMode.GUI)\n            else CLToolTemplate(name, parent_app)\n        )\n\n\nclass BaseToolTemplate:\n    """"""Base class for both GUI and CL""""""\n\n    # html_help_file = \'http://reptate.readthedocs.io/manual/Tools/template.html\'\n    toolname = ToolTemplate.toolname\n    citations = ToolTemplate.citations\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_app)\n        # self.parameters[\'param1\'] = Parameter(\n        # name=\'param1\',\n        # value=1,\n        # description=\'parameter 1\',\n        # type=ParameterType.real,\n        # opt_type=OptType.const)\n\n    def destructor(self):\n        """"""If the tool needs to clear up memory in a very special way, fill up the contents of this function.\nIf not, you can safely delete it.""""""\n        pass\n\n    def calculate(self, x, y, ax=None, color=None, file_parameters=[]):\n        """"""Template function that returns the square of the y, according to the view\n        """"""\n        return x, y * y\n\n\nclass CLToolTemplate(BaseToolTemplate, Tool):\n    """"""CL Version""""""\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_app)\n\n    # This class usually stays empty\n\n\nclass GUIToolTemplate(BaseToolTemplate, QTool):\n    """"""GUI Version""""""\n\n    def __init__(self, name="""", parent_app=None):\n        """"""**Constructor**""""""\n        super().__init__(name, parent_app)\n        self.update_parameter_table()\n        self.parent_application.update_all_ds_plots()\n\n    # add widgets specific to the Tool here:\n'"
RepTate/tools/__init__.py,0,b''
RepTate/tools/get_palettes.py,0,"b'import seaborn as sns\n\n# Palette names = pastel, bright,\nNCOLORS = 16\nPALETTE = ""Paired""\np = sns.color_palette(PALETTE, NCOLORS)\nnewp = []\nfor i in range(len(p)):\n    x = (round(p[i][0], 3), round(p[i][1], 3), round(p[i][2], 3))\n    newp.append(x)\nprint(newp)\n'"
RepTate/tools/linlin2npz.py,4,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module linlin2npz\n\nReads all the files of the precalculated linlin theory and saves them \nin a more compact *.npz format\n\n""""""\nimport numpy as np\nimport glob\n\nfiles = glob.glob(""g*.dat"")\nflist = {}\nfor file in glob.glob(""g*.dat""):\n    n = file.split(""."")\n    m = int(n[0][1:])\n    flist[m] = file\n\n\np = list(flist.keys())\np.sort()\nZ = np.asarray(p)\ncnu = np.asarray([0, 0.01, 0.03, 0.1, 0.3, 1, 3, 10])\n\ndata = []\nfor k in p:\n    data.append(np.loadtxt(flist[k]))\n\nnp.savez_compressed(""linlin.npz"", Z=Z, cnu=cnu, data=data)\n'"
RepTate/tools/polymer_data.py,0,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module polymer_data\n\nModule to define the basic information about a polymer for the materials database.\n\n""""""\n\n\nclass polymer:\n    """"""Defines the basic information held by the materials database""""""\n\n    def __init__(self, **kwargs):\n        """"""**Constructor**""""""\n        self.data = {\n            # Basic info\n            ""name"": """",  # Short name\n            ""long"": """",  # Full name\n            ""author"": """",  # Who added/Modified the parameters\n            ""date"": """",  # Date of parameter modification\n            ""source"": """",  # Source/paper from where the data was obtained\n            ""comment"": """",  # Additional comments about the parameters\n            ""chem"": """",  # Short hand Chemistry\n            # WLF Parameters\n            ""B1"": 0,  # Material parameter B1 for WLF Shift\n            ""B2"": 0,  # Material parameter B2 for WLF Shift\n            ""logalpha"": 0,  # Log_10 of the thermal expansion coefficient at 0 \xc2\xb0C\n            ""CTg"": 0,  # Molecular weight dependence of Tg\n            # Likhtman-McLeish parameters\n            ""tau_e"": 0,  # Rouse time of one entanglement\n            ""Ge"": 0,  # Entanglement modulus\n            ""Me"": 0,  # Entanglemnet molecular while\n            ""c_nu"": 0,  # Constraint release parameter\n            ""rho0"": 0,  # Density of polymer at 0 \xc2\xb0C\n            ""Te"": 0,  # Temperature at which the tube parameters have been determined\n            ""M0"": 0,  # Molecular weight of repeating unit\n        }\n\n        self.data.update(kwargs)\n\n    # def __init__ (self, oldpolymer):\n    #     self.data={}\n    #     for k in oldpolymer.data.keys():\n    #         self.data[k] = oldpolymer.data[k]\n'"
RepTate/tools/readlinlin.py,3,"b'# RepTate: Rheology of Entangled Polymers: Toolkit for the Analysis of Theory and Experiments\n# --------------------------------------------------------------------------------------------------------\n#\n# Authors:\n#     Jorge Ramirez, jorge.ramirez@upm.es\n#     Victor Boudara, victor.boudara@gmail.com\n#\n# Useful links:\n#     http://blogs.upm.es/compsoftmatter/software/reptate/\n#     https://github.com/jorge-ramirez-upm/RepTate\n#     http://reptate.readthedocs.io\n#\n# --------------------------------------------------------------------------------------------------------\n#\n# Copyright (2017-2020): Jorge Ramirez, Victor Boudara, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\n#\n# This file is part of RepTate.\n#\n# RepTate is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# RepTate is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with RepTate.  If not, see <http://www.gnu.org/licenses/>.\n#\n# --------------------------------------------------------------------------------------------------------\n""""""Module readlinlin\n\nReads the linlin data from the compact *.npz file\n\n""""""\nimport os\nimport numpy as np\n\ndir_path = os.path.dirname(os.path.realpath(__file__))\nf = np.load(os.path.join(dir_path, "".."", ""theories"", ""linlin.npz""), allow_pickle=True)\nZ = f[""Z""]\ncnu = f[""cnu""]\ndata = f[""data""]\n\nZ0 = 100\ncnu0 = 1.0\nindZ = (np.where(Z == Z0))[0][0]\nindcnu = (np.where(cnu == cnu0))[0][0]\n\ntable = data[indZ]\nind1 = 1 + indcnu * 2\nind2 = ind1 + 1\nfor i in range(len(table)):\n    print(table[i][0], table[i][ind1], table[i][ind2])\n'"
RepTate/tools/standard_pyQt5_icons.py,0,"b'import sys\nfrom PyQt5.QtCore import *\nfrom PyQt5.QtGui import *\nfrom PyQt5.QtWidgets import *\n\n\nclass Widget(QWidget):\n    def __init__(self, parent=None):\n        super(Widget, self).__init__()\n\n        icons = [\n            ""SP_ArrowBack"",\n            ""SP_ArrowDown"",\n            ""SP_ArrowForward"",\n            ""SP_ArrowLeft"",\n            ""SP_ArrowRight"",\n            ""SP_ArrowUp"",\n            ""SP_BrowserReload"",\n            ""SP_BrowserStop"",\n            ""SP_CommandLink"",\n            ""SP_ComputerIcon"",\n            ""SP_CustomBase"",\n            ""SP_DesktopIcon"",\n            ""SP_DialogApplyButton"",\n            ""SP_DialogCancelButton"",\n            ""SP_DialogCloseButton"",\n            ""SP_DialogDiscardButton"",\n            ""SP_DialogHelpButton"",\n            ""SP_DialogNoButton"",\n            ""SP_DialogOkButton"",\n            ""SP_DialogOpenButton"",\n            ""SP_DialogResetButton"",\n            ""SP_DialogSaveButton"",\n            ""SP_DialogYesButton"",\n            ""SP_DirClosedIcon"",\n            ""SP_DirHomeIcon"",\n            ""SP_DirIcon"",\n            ""SP_DirLinkIcon"",\n            ""SP_DirOpenIcon"",\n            ""SP_DockWidgetCloseButton"",\n            ""SP_DriveCDIcon"",\n            ""SP_DriveDVDIcon"",\n            ""SP_DriveFDIcon"",\n            ""SP_DriveHDIcon"",\n            ""SP_DriveNetIcon"",\n            ""SP_FileDialogBack"",\n            ""SP_FileDialogContentsView"",\n            ""SP_FileDialogDetailedView"",\n            ""SP_FileDialogEnd"",\n            ""SP_FileDialogInfoView"",\n            ""SP_FileDialogListView"",\n            ""SP_FileDialogNewFolder"",\n            ""SP_FileDialogStart"",\n            ""SP_FileDialogToParent"",\n            ""SP_FileIcon"",\n            ""SP_FileLinkIcon"",\n            ""SP_MediaPause"",\n            ""SP_MediaPlay"",\n            ""SP_MediaSeekBackward"",\n            ""SP_MediaSeekForward"",\n            ""SP_MediaSkipBackward"",\n            ""SP_MediaSkipForward"",\n            ""SP_MediaStop"",\n            ""SP_MediaVolume"",\n            ""SP_MediaVolumeMuted"",\n            ""SP_MessageBoxCritical"",\n            ""SP_MessageBoxInformation"",\n            ""SP_MessageBoxQuestion"",\n            ""SP_MessageBoxWarning"",\n            ""SP_TitleBarCloseButton"",\n            ""SP_TitleBarContextHelpButton"",\n            ""SP_TitleBarMaxButton"",\n            ""SP_TitleBarMenuButton"",\n            ""SP_TitleBarMinButton"",\n            ""SP_TitleBarNormalButton"",\n            ""SP_TitleBarShadeButton"",\n            ""SP_TitleBarUnshadeButton"",\n            ""SP_ToolBarHorizontalExtensionButton"",\n            ""SP_ToolBarVerticalExtensionButton"",\n            ""SP_TrashIcon"",\n            ""SP_VistaShield"",\n        ]\n\n        colSize = 4\n\n        layout = QGridLayout()\n\n        count = 0\n        for i in icons:\n            btn = QPushButton(i)\n            btn.setIcon(self.style().standardIcon(getattr(QStyle, i)))\n\n            layout.addWidget(btn, count / colSize, count % colSize)\n            count += 1\n\n        self.setLayout(layout)\n\n\nif __name__ == ""__main__"":\n    app = QApplication(sys.argv)\n\n    dialog = Widget()\n    dialog.show()\n\n    app.exec_()\n'"
docs/source/conf.py,0,"b'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n#\n# RepTate documentation build configuration file, created by\n# sphinx-quickstart on Mon Oct 17 10:58:50 2016.\n#\n# This file is execfile()d with the current directory set to its\n# containing dir.\n#\n# Note that not all possible configuration values are present in this\n# autogenerated file.\n#\n# All configuration values have a default; values that are commented out\n# serve to show the default.\n\nimport sys\nimport os\nimport shlex\n\n# If extensions (or modules to document with autodoc) are in another directory,\n# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\nsys.path.insert(0, os.path.abspath(\'../..\'))\nsys.path.insert(0, os.path.abspath(\'.\'))\n\nimport RepTate\n\n# -- General configuration ------------------------------------------------\n\n# If your documentation needs a minimal Sphinx version, state it here.\n#needs_sphinx = \'1.0\'\n\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named \'sphinx.ext.*\') or your custom\n# ones.\nextensions = [\n    \'sphinx.ext.autodoc\',\n    \'sphinx.ext.doctest\',\n    \'sphinx.ext.todo\',\n    \'sphinx.ext.coverage\',\n    \'sphinx.ext.mathjax\',\n    \'sphinx.ext.ifconfig\',\n    \'sphinx.ext.viewcode\',\n    \'sphinxcontrib.bibtex\',\n    \'sphinx.ext.graphviz\'\n]\n\n# -- Options for graphviz extension ---------------------------------------\ngraphviz_output_format = \'svg\'\n\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = [\'_templates\']\n\n# The suffix(es) of source filenames.\n# You can specify multiple suffix as a list of string:\n# source_suffix = [\'.rst\', \'.md\']\nsource_suffix = \'.rst\'\n\n# The encoding of source files.\n#source_encoding = \'utf-8-sig\'\n\n# The master toctree document.\nmaster_doc = \'index\'\n\n# General information about the project.\nproject = \'RepTate\'\ncopyright = \'2017-2020, Universidad Polit\xc3\xa9cnica de Madrid, University of Leeds\'\nauthor = \'Jorge Ramirez, Victor Boudara\'\n\n# The version info for the project you\'re documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nverdata = RepTate._version.get_versions()\nversion = verdata[\'version\'].split(\'+\')[0]\ndate = verdata[\'date\'].split(\'T\')[0]\n# The full version, including alpha/beta/rc tags.\nrelease = version + \' \' + date\n\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#\n# This is also used if you do content translation via gettext catalogs.\n# Usually you set ""language"" from the command line for these cases.\nlanguage = None\n\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = \'\'\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = \'%B %d, %Y\'\n\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\nexclude_patterns = []\n\n# The reST default role (used for this markup: `text`) to use for all\n# documents.\n#default_role = None\n\n# If true, \'()\' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\nshow_authors = True\n\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = \'sphinx\'\n\n# A list of ignored prefixes for module index sorting.\n#modindex_common_prefix = []\n\n# If true, keep warnings as ""system message"" paragraphs in the built documents.\n#keep_warnings = False\n\n# If true, `todo` and `todoList` produce output, else they produce nothing.\ntodo_include_todos = True\n\n\n# -- Options for HTML output ----------------------------------------------\n\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\nhtml_theme = \'bizstyle\'\n\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#html_theme_options = {}\n\n# Add any paths that contain custom themes here, relative to this directory.\n#html_theme_path = []\n\n# The name for this set of Sphinx documents.  If None, it defaults to\n# ""<project> v<release> documentation"".\n#html_title = None\n\n# A shorter title for the navigation bar.  Default is the same as html_title.\n#html_short_title = None\n\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\nhtml_logo = \'images/RepTatelogo.jpg\'\n\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\nhtml_favicon = \'images/Reptate64.ico\'\n\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named ""default.css"" will overwrite the builtin ""default.css"".\nhtml_static_path = [\'_static\']\n\n# Add any extra paths that contain custom files (such as robots.txt or\n# .htaccess) here, relative to this directory. These files are copied\n# directly to the root of the documentation.\n#html_extra_path = []\n\n# If not \'\', a \'Last updated on:\' timestamp is inserted at every page bottom,\n# using the given strftime format.\n#html_last_updated_fmt = \'%b %d, %Y\'\n\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\n#html_use_smartypants = True\n\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n\n# If false, no module index is generated.\n#html_domain_indices = True\n\n# If false, no index is generated.\n#html_use_index = True\n\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n\n# If true, ""Created using Sphinx"" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n\n# If true, ""(C) Copyright ..."" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = \'\'\n\n# This is the file name suffix for HTML files (e.g. "".xhtml"").\n#html_file_suffix = None\n\n# Language to be used for generating the HTML full-text search index.\n# Sphinx supports the following languages:\n#   \'da\', \'de\', \'en\', \'es\', \'fi\', \'fr\', \'h\', \'it\', \'ja\'\n#   \'nl\', \'no\', \'pt\', \'ro\', \'r\', \'sv\', \'tr\'\n#html_search_language = \'en\'\n\n# A dictionary with options for the search language support, empty by default.\n# Now only \'ja\' uses this config value\n#html_search_options = {\'type\': \'default\'}\n\n# The name of a javascript file (relative to the configuration directory) that\n# implements a search results scorer. If empty, the default will be used.\n#html_search_scorer = \'scorer.js\'\n\n# Output file base name for HTML help builder.\nhtmlhelp_basename = \'RepTatedoc\'\n\n# -- Options for LaTeX output ---------------------------------------------\n\nlatex_elements = {\n# The paper size (\'letterpaper\' or \'a4paper\').\n#\'papersize\': \'letterpaper\',\n\n# The font size (\'10pt\', \'11pt\' or \'12pt\').\n#\'pointsize\': \'10pt\',\n\n# Additional stuff for the LaTeX preamble.\n#\'preamble\': \'\',\n\n# Latex figure (float) alignment\n#\'figure_align\': \'htbp\',\n}\n\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title,\n#  author, documentclass [howto, manual, or own class]).\nlatex_documents = [\n  (master_doc, \'RepTate.tex\', \'RepTate Documentation\',\n   \'Jorge Ram\xc3\xadrez\', \'manual\'),\n]\n\n# The name of an image file (relative to this directory) to place at the top of\n# the title page.\n#latex_logo = None\n\n# For ""manual"" documents, if this is true, then toplevel headings are parts,\n# not chapters.\n#latex_use_parts = False\n\n# If true, show page references after internal links.\n#latex_show_pagerefs = False\n\n# If true, show URL addresses after external links.\n#latex_show_urls = False\n\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n\n# If false, no module index is generated.\n#latex_domain_indices = True\n\n\n# -- Options for manual page output ---------------------------------------\n\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    (master_doc, \'reptate\', \'RepTate Documentation\',\n     [author], 1)\n]\n\n# If true, show URL addresses after external links.\n#man_show_urls = False\n\n\n# -- Options for Texinfo output -------------------------------------------\n\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [\n  (master_doc, \'RepTate\', \'RepTate Documentation\',\n   author, \'RepTate\', \'One line description of project.\',\n   \'Miscellaneous\'),\n]\n\n# Documents to append as an appendix to all manuals.\n#texinfo_appendices = []\n\n# If false, no module index is generated.\n#texinfo_domain_indices = True\n\n# How to display URL addresses: \'footnote\', \'no\', or \'inline\'.\n#texinfo_show_urls = \'footnote\'\n\n# If true, do not generate a @detailmenu in the ""Top"" node\'s menu.\n#texinfo_no_detailmenu = False\n\n\n#graphviz_dot=\'c:\\\\Miniconda3\\\\Library\\\\bin\\\\graphviz\\\\dot.exe\'\n\nnumfig = True'"
RepTate/core/mplcursors/__init__.py,0,"b'try:\n    import setuptools_scm\n\n    __version__ = setuptools_scm.get_version(  # xref setup.py\n        root=""../.."",\n        relative_to=__file__,\n        version_scheme=""post-release"",\n        local_scheme=""node-and-date"",\n    )\nexcept (ImportError, LookupError):\n    try:\n        from ._version import version as __version__\n    except ImportError:\n        pass\n\n\nfrom ._mplcursors import Cursor, cursor\nfrom ._pick_info import Selection, compute_pick, get_ann_text, make_highlight\n\n\n__all__ = [\n    ""Cursor"",\n    ""cursor"",\n    ""Selection"",\n    ""compute_pick"",\n    ""get_ann_text"",\n    ""make_highlight"",\n]\n'"
RepTate/core/mplcursors/_mplcursors.py,4,"b'from collections import ChainMap, Counter\nfrom collections.abc import Iterable\nfrom contextlib import suppress\nimport copy\nfrom functools import partial\nimport sys\nimport weakref\nfrom weakref import WeakKeyDictionary\n\nfrom matplotlib.artist import Artist\nfrom matplotlib.axes import Axes\nfrom matplotlib.cbook import CallbackRegistry\nfrom matplotlib.container import Container\nfrom matplotlib.figure import Figure\nimport numpy as np\n\nfrom . import _pick_info\n\n\n_default_bindings = dict(\n    select=1,\n    deselect=3,\n    left=""shift+left"",\n    right=""shift+right"",\n    up=""shift+up"",\n    down=""shift+down"",\n    toggle_enabled=""e"",\n    toggle_visible=""v"",\n)\n_default_annotation_kwargs = dict(\n    textcoords=""offset points"",\n    bbox=dict(boxstyle=""round,pad=.5"", fc=""yellow"", alpha=0.5, ec=""k"",),\n    arrowprops=dict(arrowstyle=""->"", connectionstyle=""arc3"", shrinkB=0, ec=""k"",),\n)\n_default_annotation_positions = [\n    dict(position=(-15, 15), ha=""right"", va=""bottom""),\n    dict(position=(15, 15), ha=""left"", va=""bottom""),\n    dict(position=(15, -15), ha=""left"", va=""top""),\n    dict(position=(-15, -15), ha=""right"", va=""top""),\n]\n_default_highlight_kwargs = dict(\n    # Only the kwargs corresponding to properties of the artist will be passed.\n    # Line2D.\n    color=""yellow"",\n    markeredgecolor=""yellow"",\n    linewidth=3,\n    markeredgewidth=3,\n    # PathCollection.\n    facecolor=""yellow"",\n    edgecolor=""yellow"",\n)\n\n\nclass _MarkedStr(str):\n    """"""A string subclass solely for marking purposes.\n    """"""\n\n\ndef _get_rounded_intersection_area(bbox_1, bbox_2):\n    """"""Compute the intersection area between two bboxes, rounded to 8 digits.\n    """"""\n    # The rounding allows sorting areas without floating point issues.\n    bbox = bbox_1.intersection(bbox_1, bbox_2)\n    return round(bbox.width * bbox.height / 1e-8) * 1e-8 if bbox else 0\n\n\ndef _is_alive(artist):\n    """"""Check whether an artist is still present on an axes.\n    """"""\n    return bool(\n        artist\n        and artist.axes\n        and (\n            artist.container in artist.axes.containers\n            if isinstance(artist, _pick_info.ContainerArtist)\n            else artist.axes.findobj(lambda obj: obj is artist)\n        )\n    )\n\n\ndef _reassigned_axes_event(event, ax):\n    """"""Reassign *event* to *ax*.\n    """"""\n    event = copy.copy(event)\n    event.xdata, event.ydata = ax.transData.inverted().transform_point(\n        (event.x, event.y)\n    )\n    return event\n\n\nclass Cursor:\n    """"""A cursor for selecting Matplotlib artists.\n\n    Attributes\n    ----------\n    bindings : dict\n        See the *bindings* keyword argument to the constructor.\n    annotation_kwargs : dict\n        See the *annotation_kwargs* keyword argument to the constructor.\n    annotation_positions : dict\n        See the *annotation_positions* keyword argument to the constructor.\n    highlight_kwargs : dict\n        See the *highlight_kwargs* keyword argument to the constructor.\n    """"""\n\n    _keep_alive = WeakKeyDictionary()\n\n    def __init__(\n        self,\n        artists,\n        *,\n        multiple=False,\n        highlight=False,\n        hover=False,\n        bindings=None,\n        annotation_kwargs=None,\n        annotation_positions=None,\n        highlight_kwargs=None\n    ):\n        """"""Construct a cursor.\n\n        Parameters\n        ----------\n\n        artists : List[Artist]\n            A list of artists that can be selected by this cursor.\n\n        multiple : bool, optional\n            Whether multiple artists can be ""on"" at the same time (defaults to\n            False).\n\n        highlight : bool, optional\n            Whether to also highlight the selected artist.  If so,\n            ""highlighter"" artists will be placed as the first item in the\n            :attr:`extras` attribute of the `Selection`.\n\n        hover : bool, optional\n            Whether to select artists upon hovering instead of by clicking.\n            (Hovering over an artist while a button is pressed will not trigger\n            a selection; right clicking on an annotation will still remove it.)\n\n        bindings : dict, optional\n            A mapping of button and keybindings to actions.  Valid entries are:\n\n            ================ ==================================================\n            \'select\'         mouse button to select an artist\n                             (default: 1)\n            \'deselect\'       mouse button to deselect an artist\n                             (default: 3)\n            \'left\'           move to the previous point in the selected path,\n                             or to the left in the selected image\n                             (default: shift+left)\n            \'right\'          move to the next point in the selected path, or to\n                             the right in the selected image\n                             (default: shift+right)\n            \'up\'             move up in the selected image\n                             (default: shift+up)\n            \'down\'           move down in the selected image\n                             (default: shift+down)\n            \'toggle_enabled\' toggle whether the cursor is active\n                             (default: e)\n            \'toggle_visible\' toggle default cursor visibility and apply it to\n                             all cursors (default: v)\n            ================ ==================================================\n\n            Missing entries will be set to the defaults.  In order to not\n            assign any binding to an action, set it to ``None``.\n\n        annotation_kwargs : dict, optional\n            Keyword argments passed to the `annotate\n            <matplotlib.axes.Axes.annotate>` call.\n\n        annotation_positions : List[dict], optional\n            List of positions tried by the annotation positioning algorithm.\n\n        highlight_kwargs : dict, optional\n            Keyword arguments used to create a highlighted artist.\n        """"""\n\n        artists = list(artists)\n        # Be careful with GC.\n        self._artists = [weakref.ref(artist) for artist in artists]\n\n        for artist in artists:\n            type(self)._keep_alive.setdefault(artist, set()).add(self)\n\n        self._multiple = multiple\n        self._highlight = highlight\n\n        self._visible = True\n        self._enabled = True\n        self._selections = []\n        self._last_auto_position = None\n        self._callbacks = CallbackRegistry()\n\n        connect_pairs = [(""key_press_event"", self._on_key_press)]\n        if hover:\n            if multiple:\n                raise ValueError(""\'hover\' and \'multiple\' are incompatible"")\n            connect_pairs += [\n                (""motion_notify_event"", self._hover_handler),\n                (""button_press_event"", self._hover_handler),\n            ]\n        else:\n            connect_pairs += [(""button_press_event"", self._nonhover_handler)]\n        self._disconnectors = [\n            partial(canvas.mpl_disconnect, canvas.mpl_connect(*pair))\n            for pair in connect_pairs\n            for canvas in {artist.figure.canvas for artist in artists}\n        ]\n\n        bindings = dict(\n            ChainMap(bindings if bindings is not None else {}, _default_bindings)\n        )\n        unknown_bindings = set(bindings) - set(_default_bindings)\n        if unknown_bindings:\n            raise ValueError(\n                ""Unknown binding(s): {}"".format("", "".join(sorted(unknown_bindings)))\n            )\n        duplicate_bindings = [\n            k for k, v in Counter(list(bindings.values())).items() if v > 1\n        ]\n        if duplicate_bindings:\n            raise ValueError(\n                ""Duplicate binding(s): {}"".format(\n                    "", "".join(sorted(map(str, duplicate_bindings)))\n                )\n            )\n        self.bindings = bindings\n\n        self.annotation_kwargs = (\n            annotation_kwargs\n            if annotation_kwargs is not None\n            else copy.deepcopy(_default_annotation_kwargs)\n        )\n        self.annotation_positions = (\n            annotation_positions\n            if annotation_positions is not None\n            else copy.deepcopy(_default_annotation_positions)\n        )\n        self.highlight_kwargs = (\n            highlight_kwargs\n            if highlight_kwargs is not None\n            else copy.deepcopy(_default_highlight_kwargs)\n        )\n\n    @property\n    def artists(self):\n        """"""The tuple of selectable artists.\n        """"""\n        # Work around matplotlib/matplotlib#6982: `cla()` does not clear\n        # `.axes`.\n        return tuple(filter(_is_alive, (ref() for ref in self._artists)))\n\n    @property\n    def enabled(self):\n        """"""Whether clicks are registered for picking and unpicking events.\n        """"""\n        return self._enabled\n\n    @enabled.setter\n    def enabled(self, value):\n        self._enabled = value\n\n    @property\n    def selections(self):\n        """"""The tuple of current `Selection`\\\\s.\n        """"""\n        for sel in self._selections:\n            if sel.annotation.axes is None:\n                raise RuntimeError(\n                    ""Annotation unexpectedly removed; ""\n                    ""use \'cursor.remove_selection\' instead""\n                )\n        return tuple(self._selections)\n\n    @property\n    def visible(self):\n        """"""Whether selections are visible by default.\n\n        Setting this property also updates the visibility status of current\n        selections.\n        """"""\n        return self._visible\n\n    @visible.setter\n    def visible(self, value):\n        self._visible = value\n        for sel in self.selections:\n            sel.annotation.set_visible(value)\n            sel.annotation.figure.canvas.draw_idle()\n\n    def add_selection(self, pi):\n        """"""Create an annotation for a `Selection` and register it.\n\n        Returns a new `Selection`, that has been registered by the `Cursor`,\n        with the added annotation set in the :attr:`annotation` field and, if\n        applicable, the highlighting artist in the :attr:`extras` field.\n\n        Emits the ``""add""`` event with the new `Selection` as argument.  When\n        the event is emitted, the position of the annotation is temporarily\n        set to ``(nan, nan)``; if this position is not explicitly set by a\n        callback, then a suitable position will be automatically computed.\n\n        Likewise, if the text alignment is not explicitly set but the position\n        is, then a suitable alignment will be automatically computed.\n        """"""\n        # pi: ""pick_info"", i.e. an incomplete selection.\n        # Pre-fetch the figure and axes, as callbacks may actually unset them.\n        figure = pi.artist.figure\n        axes = pi.artist.axes\n        if axes.get_renderer_cache() is None:\n            figure.canvas.draw()  # Needed by draw_artist below anyways.\n        renderer = pi.artist.axes.get_renderer_cache()\n        ann = pi.artist.axes.annotate(\n            _pick_info.get_ann_text(*pi),\n            xy=pi.target,\n            xytext=(np.nan, np.nan),\n            ha=_MarkedStr(""center""),\n            va=_MarkedStr(""center""),\n            visible=self.visible,\n            **self.annotation_kwargs\n        )\n        ann.draggable(use_blit=True)\n        extras = []\n        if self._highlight:\n            hl = self.add_highlight(*pi)\n            if hl:\n                extras.append(hl)\n        sel = pi._replace(annotation=ann, extras=extras)\n        self._selections.append(sel)\n        self._callbacks.process(""add"", sel)\n\n        # Check that `ann.axes` is still set, as callbacks may have removed the\n        # annotation.\n        if ann.axes and ann.xyann == (np.nan, np.nan):\n            fig_bbox = figure.get_window_extent()\n            ax_bbox = axes.get_window_extent()\n            overlaps = []\n            for idx, annotation_position in enumerate(self.annotation_positions):\n                ann.set(**annotation_position)\n                # Work around matplotlib/matplotlib#7614: position update is\n                # missing.\n                ann.update_positions(renderer)\n                bbox = ann.get_window_extent(renderer)\n                overlaps.append(\n                    (\n                        _get_rounded_intersection_area(fig_bbox, bbox),\n                        _get_rounded_intersection_area(ax_bbox, bbox),\n                        # Avoid needlessly jumping around by breaking ties using\n                        # the last used position as default.\n                        idx == self._last_auto_position,\n                    )\n                )\n            auto_position = max(range(len(overlaps)), key=overlaps.__getitem__)\n            ann.set(**self.annotation_positions[auto_position])\n            self._last_auto_position = auto_position\n        else:\n            if isinstance(ann.get_ha(), _MarkedStr):\n                ann.set_ha(\n                    {-1: ""right"", 0: ""center"", 1: ""left""}[\n                        np.sign(np.nan_to_num(ann.xyann[0]))\n                    ]\n                )\n            if isinstance(ann.get_va(), _MarkedStr):\n                ann.set_va(\n                    {-1: ""top"", 0: ""center"", 1: ""bottom""}[\n                        np.sign(np.nan_to_num(ann.xyann[1]))\n                    ]\n                )\n\n        if (\n            extras\n            or len(self.selections) > 1\n            and not self._multiple\n            or not figure.canvas.supports_blit\n        ):\n            # Either:\n            #  - there may be more things to draw, or\n            #  - annotation removal will make a full redraw necessary, or\n            #  - blitting is not (yet) supported.\n            figure.canvas.draw_idle()\n        elif ann.axes:\n            # Fast path, only needed if the annotation has not been immediately\n            # removed.\n            figure.draw_artist(ann)\n            # Explicit argument needed on MacOSX backend.\n            figure.canvas.blit(figure.bbox)\n        # Removal comes after addition so that the fast blitting path works.\n        if not self._multiple:\n            for sel in self.selections[:-1]:\n                self.remove_selection(sel)\n        return sel\n\n    def add_highlight(self, artist, *args, **kwargs):\n        """"""Create, add and return a highlighting artist.\n\n        This method is should be called with an ""unpacked"" `Selection`,\n        possibly with some fields set to None.\n\n        It is up to the caller to register the artist with the proper\n        `Selection` in order to ensure cleanup upon deselection.\n        """"""\n        hl = _pick_info.make_highlight(\n            artist,\n            *args,\n            **ChainMap({""highlight_kwargs"": self.highlight_kwargs}, kwargs)\n        )\n        if hl:\n            artist.axes.add_artist(hl)\n            return hl\n\n    def connect(self, event, func=None):\n        """"""Connect a callback to a `Cursor` event; return the callback id.\n\n        Two classes of event can be emitted, both with a `Selection` as single\n        argument:\n\n            - ``""add""`` when a `Selection` is added, and\n            - ``""remove""`` when a `Selection` is removed.\n\n        The callback registry relies on Matplotlib\'s implementation; in\n        particular, only weak references are kept for bound methods.\n\n        This method is can also be used as a decorator::\n\n            @cursor.connect(""add"")\n            def on_add(sel):\n                ...\n\n        Examples of callbacks::\n\n            # Change the annotation text and alignment:\n            lambda sel: sel.annotation.set(\n                text=sel.artist.get_label(),  # or use e.g. sel.target.index\n                ha=""center"", va=""bottom"")\n\n            # Make label non-draggable:\n            lambda sel: sel.draggable(False)\n        """"""\n        if event not in [""add"", ""remove""]:\n            raise ValueError(""Invalid cursor event: {}"".format(event))\n        if func is None:\n            return partial(self.connect, event)\n        return self._callbacks.connect(event, func)\n\n    def disconnect(self, cid):\n        """"""Disconnect a previously connected callback id.\n        """"""\n        self._callbacks.disconnect(cid)\n\n    def remove(self):\n        """"""Remove a cursor.\n\n        Remove all `Selection`\\\\s, disconnect all callbacks, and allow the\n        cursor to be garbage collected.\n        """"""\n        for disconnectors in self._disconnectors:\n            disconnectors()\n        for sel in self.selections:\n            self.remove_selection(sel)\n        for s in type(self)._keep_alive.values():\n            with suppress(KeyError):\n                s.remove(self)\n\n    def _nonhover_handler(self, event):\n        if event.name == ""button_press_event"":\n            if event.button == self.bindings[""select""]:\n                self._on_select_button_press(event)\n            if event.button == self.bindings[""deselect""]:\n                self._on_deselect_button_press(event)\n\n    def _hover_handler(self, event):\n        if event.name == ""motion_notify_event"" and event.button is None:\n            # Filter away events where the mouse is pressed, in particular to\n            # avoid conflicts between hover and draggable.\n            self._on_select_button_press(event)\n        elif (\n            event.name == ""button_press_event""\n            and event.button == self.bindings[""deselect""]\n        ):\n            # Still allow removing the annotation by right clicking.\n            self._on_deselect_button_press(event)\n\n    def _filter_mouse_event(self, event):\n        # Accept the event iff we are enabled, and either\n        #   - no other widget is active, and this is not the second click of a\n        #     double click (to prevent double selection), or\n        #   - another widget is active, and this is a double click (to bypass\n        #     the widget lock).\n        return self.enabled and event.canvas.widgetlock.locked() == event.dblclick\n\n    def _on_select_button_press(self, event):\n        if not self._filter_mouse_event(event):\n            return\n        # Work around lack of support for twinned axes.\n        per_axes_event = {\n            ax: _reassigned_axes_event(event, ax)\n            for ax in {artist.axes for artist in self.artists}\n        }\n        pis = []\n        for artist in self.artists:\n            if (\n                artist.axes is None  # Removed or figure-level artist.\n                or event.canvas is not artist.figure.canvas\n                or not artist.axes.contains(event)[0]\n            ):  # Cropped by axes.\n                continue\n            pi = _pick_info.compute_pick(artist, per_axes_event[artist.axes])\n            if pi:\n                pis.append(pi)\n        if not pis:\n            return\n        self.add_selection(min(pis, key=lambda pi: pi.dist))\n\n    def _on_deselect_button_press(self, event):\n        if not self._filter_mouse_event(event):\n            return\n        for sel in self.selections:\n            ann = sel.annotation\n            if event.canvas is not ann.figure.canvas:\n                continue\n            contained, _ = ann.contains(event)\n            if contained:\n                self.remove_selection(sel)\n\n    def _on_key_press(self, event):\n        if event.key == self.bindings[""toggle_enabled""]:\n            self.enabled = not self.enabled\n        elif event.key == self.bindings[""toggle_visible""]:\n            self.visible = not self.visible\n        try:\n            sel = self.selections[-1]\n        except IndexError:\n            return\n        for key in [""left"", ""right"", ""up"", ""down""]:\n            if event.key == self.bindings[key]:\n                self.remove_selection(sel)\n                self.add_selection(_pick_info.move(*sel, key=key))\n                break\n\n    def remove_selection(self, sel):\n        """"""Remove a `Selection`.\n        """"""\n        self._selections.remove(sel)\n        # <artist>.figure will be unset so we save them first.\n        figures = {artist.figure for artist in [sel.annotation] + sel.extras}\n        # ValueError is raised if the artist has already been removed.\n        with suppress(ValueError):\n            sel.annotation.remove()\n        for artist in sel.extras:\n            with suppress(ValueError):\n                artist.remove()\n        self._callbacks.process(""remove"", sel)\n        for figure in figures:\n            figure.canvas.draw_idle()\n\n\ndef cursor(pickables=None, **kwargs):\n    """"""Create a `Cursor` for a list of artists, containers, and axes.\n\n    Parameters\n    ----------\n\n    pickables : Optional[List[Union[Artist, Container, Axes, Figure]]]\n        All artists and containers in the list or on any of the axes or\n        figures passed in the list are selectable by the constructed `Cursor`.\n        Defaults to all artists and containers on any of the figures that\n        :mod:`~matplotlib.pyplot` is tracking.  Note that the latter will only\n        work when relying on pyplot, not when figures are directly instantiated\n        (e.g., when manually embedding Matplotlib in a GUI toolkit).\n\n    **kwargs\n        Keyword arguments are passed to the `Cursor` constructor.\n    """"""\n\n    if pickables is None:\n        # Do not import pyplot ourselves to avoid forcing the backend.\n        plt = sys.modules.get(""matplotlib.pyplot"")\n        pickables = [plt.figure(num) for num in plt.get_fignums()] if plt else []\n    elif isinstance(pickables, Container) or not isinstance(pickables, Iterable):\n        pickables = [pickables]\n\n    def iter_unpack_figures(pickables):\n        for entry in pickables:\n            if isinstance(entry, Figure):\n                yield from entry.axes\n            else:\n                yield entry\n\n    def iter_unpack_axes(pickables):\n        for entry in pickables:\n            if isinstance(entry, Axes):\n                for artists in [\n                    entry.collections,\n                    entry.images,\n                    entry.lines,\n                    entry.patches,\n                    entry.texts,\n                ]:\n                    yield from artists\n                containers.extend(entry.containers)\n            elif isinstance(entry, Container):\n                containers.append(entry)\n            else:\n                yield entry\n\n    containers = []\n    artists = list(iter_unpack_axes(iter_unpack_figures(pickables)))\n    for container in containers:\n        contained = list(filter(None, container.get_children()))\n        for artist in contained:\n            with suppress(ValueError):\n                artists.remove(artist)\n        if contained:\n            artists.append(_pick_info.ContainerArtist(container))\n\n    return Cursor(artists, **kwargs)\n'"
RepTate/core/mplcursors/_pick_info.py,26,"b'# Unsupported Artist classes: subclasses of AxesImage, QuadMesh (upstream could\n# have a `format_coord`-like method); PolyCollection (picking is not well\n# defined).\n\nfrom collections import ChainMap, namedtuple\nfrom contextlib import suppress\nimport copy\nimport functools\nimport inspect\nfrom inspect import Signature\nimport itertools\nfrom numbers import Integral\nimport re\nimport warnings\nfrom weakref import WeakSet\n\nfrom matplotlib import cbook\nfrom matplotlib.axes import Axes\nfrom matplotlib.collections import LineCollection, PathCollection\nfrom matplotlib.container import BarContainer, ErrorbarContainer, StemContainer\nfrom matplotlib.image import AxesImage\nfrom matplotlib.lines import Line2D\nfrom matplotlib.patches import Patch, PathPatch, Polygon, Rectangle\nfrom matplotlib.path import Path as MPath\nfrom matplotlib.quiver import Barbs, Quiver\nfrom matplotlib.text import Text\nfrom matplotlib.transforms import Affine2D\nimport numpy as np\n\n\nIntegral.register(np.integer)  # Back-compatibility for numpy 1.7, 1.8.\n\n\ndef _register_scatter():\n    """"""Patch `PathCollection` and `scatter` to register their return values.\n\n    This registration allows us to distinguish `PathCollection`s created by\n    `Axes.scatter`, which should use point-like picking, from others, which\n    should use path-like picking.  The former is more common, so we store the\n    latter instead; this also lets us guess the type better if this module is\n    imported late.\n    """"""\n\n    @functools.wraps(PathCollection.__init__)\n    def __init__(self, *args, **kwargs):\n        _nonscatter_pathcollections.add(self)\n        return __init__.__wrapped__(self, *args, **kwargs)\n    PathCollection.__init__ = __init__\n\n    @functools.wraps(Axes.scatter)\n    def scatter(*args, **kwargs):\n        paths = scatter.__wrapped__(*args, **kwargs)\n        with suppress(KeyError):\n            _nonscatter_pathcollections.remove(paths)\n        return paths\n    Axes.scatter = scatter\n\n\n_nonscatter_pathcollections = WeakSet()\n_is_scatter = lambda artist: (isinstance(artist, PathCollection)\n                              and artist not in _nonscatter_pathcollections)\n_register_scatter()\n\n\ndef _artist_in_container(container):\n    return next(filter(None, container.get_children()))\n\n\nclass ContainerArtist:\n    """"""Workaround to make containers behave more like artists.\n    """"""\n\n    def __init__(self, container):\n        self.container = container  # Guaranteed to be nonempty.\n        # We can\'t weakref the Container (which subclasses tuple), so\n        # we instead create a reference cycle between the Container and\n        # the ContainerArtist; as no one else strongly references the\n        # ContainerArtist, it will get GC\'d whenever the Container is.\n        vars(container).setdefault(\n            ""_{}__keep_alive"".format(__class__.__name__), []).append(self)\n\n    def __str__(self):\n        return ""<{}({})>"".format(type(self).__name__, self.container)\n\n    def __repr__(self):\n        return ""<{}({!r})>"".format(type(self).__name__, self.container)\n\n    figure = property(lambda self: _artist_in_container(self.container).figure)\n    axes = property(lambda self: _artist_in_container(self.container).axes)\n\n\nclass AttrArray(np.ndarray):\n    """"""An array subclass that can store additional attributes.\n    """"""\n\n    def __new__(cls, array):\n        return np.asarray(array).view(cls)\n\n\ndef with_attrs(array, **kwargs):\n    array = AttrArray(array)\n    for k, v in kwargs.items():\n        setattr(array, k, v)\n    return array\n\n\nSelection = namedtuple(""Selection"", ""artist target dist annotation extras"")\n# Override equality to identity: Selections should be considered immutable\n# (with mutable fields though) and we don\'t want to trigger casts of array\n# equality checks to booleans.  We don\'t need to override comparisons because\n# artists are already non-comparable.\nSelection.__eq__ = lambda self, other: self is other\nSelection.__ne__ = lambda self, other: self is not other\ntry:\n    Selection.artist.__doc__ = (\n        ""The selected artist."")\n    Selection.target.__doc__ = (\n        ""The point picked within the artist, in data coordinates."")\n    Selection.dist.__doc__ = (\n        ""The distance from the click to the target, in pixels."")\n    Selection.annotation.__doc__ = (\n        ""The instantiated `matplotlib.text.Annotation`."")\n    Selection.extras.__doc__ = (\n        ""An additional list of artists (e.g., highlighters) that will be ""\n        ""cleared at the same time as the annotation."")\nexcept AttributeError:  # Read-only in Py3.4.\n    pass\n\n\n@functools.singledispatch\ndef compute_pick(artist, event):\n    """"""Find whether *artist* has been picked by *event*.\n\n    If it has, return the appropriate `Selection`; otherwise return ``None``.\n\n    This is a single-dispatch function; implementations for various artist\n    classes follow.\n    """"""\n    warnings.warn(""Pick support for {} is missing."".format(type(artist)))\n\n\nclass Index:\n    def __init__(self, i, x, y):\n        self.int = i\n        self.x = x\n        self.y = y\n\n    def floor(self):\n        return self.int\n\n    def ceil(self):\n        return self.int if max(self.x, self.y) == 0 else self.int + 1\n\n    def __format__(self, fmt):\n        return ""{0.int}.(x={0.x:{1}}, y={0.y:{1}})"".format(self, fmt)\n\n    def __str__(self):\n        return format(self, """")\n\n    @classmethod\n    def pre_index(cls, n_pts, index):\n        i, frac = divmod(index, 1)\n        i, odd = divmod(i, 2)\n        x, y = (0, frac) if not odd else (frac, 1)\n        return cls(i, x, y)\n\n    @classmethod\n    def post_index(cls, n_pts, index):\n        i, frac = divmod(index, 1)\n        i, odd = divmod(i, 2)\n        x, y = (frac, 0) if not odd else (1, frac)\n        return cls(i, x, y)\n\n    @classmethod\n    def mid_index(cls, n_pts, index):\n        i, frac = divmod(index, 1)\n        if i == 0:\n            frac = .5 + frac / 2\n        elif i == 2 * n_pts - 2:  # One less line than points.\n            frac = frac / 2\n        quot, odd = divmod(i, 2)\n        if not odd:\n            if frac < .5:\n                i = quot - 1\n                x, y = frac + .5, 1\n            else:\n                i = quot\n                x, y = frac - .5, 0\n        else:\n            i = quot\n            x, y = .5, frac\n        return cls(i, x, y)\n\n\ndef _compute_projection_pick(artist, path, xy):\n    """"""Project *xy* on *path* to obtain a `Selection` for *artist*.\n\n    *path* is first transformed to screen coordinates using the artist\n    transform, and the target of the returned `Selection` is transformed\n    back to data coordinates using the artist *axes* inverse transform.  The\n    `Selection` `index` is returned as a float.  This function returns ``None``\n    for degenerate inputs.\n\n    The caller is responsible for converting the index to the proper class if\n    needed.\n    """"""\n    transform = artist.get_transform().frozen()\n    tpath = (path.cleaned(transform) if transform.is_affine\n             # `cleaned` only handles affine transforms.\n             else transform.transform_path(path).cleaned())\n    # `cleaned` should return a path where the first element is `MOVETO`, the\n    # following are `LINETO` or `CLOSEPOLY`, and the last one is `STOP`, i.e.\n    #     codes = path.codes\n    #     assert (codes[0], codes[-1]) == (path.MOVETO, path.STOP)\n    #     assert np.in1d(codes[1:-1], [path.LINETO, path.CLOSEPOLY]).all()\n    vertices = tpath.vertices[:-1]\n    codes = tpath.codes[:-1]\n    vertices[codes == tpath.CLOSEPOLY] = vertices[0]\n    # Unit vectors for each segment.\n    us = vertices[1:] - vertices[:-1]\n    ls = np.hypot(*us.T)\n    with np.errstate(invalid=""ignore""):\n        # Results in 0/0 for repeated consecutive points.\n        us /= ls[:, None]\n    # Vectors from each vertex to the event (overwritten below).\n    vs = xy - vertices[:-1]\n    # Clipped dot products -- `einsum` cannot be done in place, `clip` can.\n    # `clip` can trigger invalid comparisons if there are nan points.\n    with np.errstate(invalid=""ignore""):\n        dot = np.clip(np.einsum(""ij,ij->i"", vs, us), 0, ls, out=vs[:, 0])\n    # Projections.\n    projs = vertices[:-1] + dot[:, None] * us\n    ds = np.hypot(*(xy - projs).T, out=vs[:, 1])\n    try:\n        argmin = np.nanargmin(ds)\n        dmin = ds[argmin]\n    except (ValueError, IndexError):  # See above re: exceptions caught.\n        return\n    else:\n        target = AttrArray(\n            artist.axes.transData.inverted().transform_point(projs[argmin]))\n        target.index = (\n            (argmin + dot[argmin] / ls[argmin])\n            / (path._interpolation_steps / tpath._interpolation_steps))\n        return Selection(artist, target, dmin, None, None)\n\n\n@compute_pick.register(Line2D)\ndef _(artist, event):\n    # No need to call `line.contains` as we\'re going to redo the work anyways\n    # (also see matplotlib/matplotlib#6645, though that\'s fixed in mpl2.1).\n\n    # Always work in screen coordinates, as this is how we need to compute\n    # distances.  Note that the artist transform may be different from the axes\n    # transform (e.g., for axvline).\n    xy = event.x, event.y\n    data_xy = artist.get_xydata()\n    sels = []\n    # If markers are visible, find the closest vertex.\n    if artist.get_marker() not in [""None"", ""none"", "" "", """", None]:\n        ds = np.hypot(*(xy - artist.get_transform().transform(data_xy)).T)\n        try:\n            argmin = np.nanargmin(ds)\n            dmin = ds[argmin]\n        except (ValueError, IndexError):\n            # numpy 1.7.0\'s `nanargmin([nan])` returns nan, so\n            # `ds[argmin]` raises IndexError.  In later versions of numpy,\n            # `nanargmin([nan])` raises ValueError (the release notes for 1.8.0\n            # are incorrect on this topic).\n            pass\n        else:\n            # More precise than transforming back.\n            target = with_attrs(artist.get_xydata()[argmin], index=argmin)\n            sels.append(Selection(artist, target, dmin, None, None))\n    # If lines are visible, find the closest projection.\n    if (artist.get_linestyle() not in [""None"", ""none"", "" "", """", None]\n            and len(artist.get_xydata()) > 1):\n        sel = _compute_projection_pick(artist, artist.get_path(), xy)\n        if sel is not None:\n            sel.target.index = {\n                ""_draw_lines"": lambda _, index: index,\n                ""_draw_steps_pre"": Index.pre_index,\n                ""_draw_steps_mid"": Index.mid_index,\n                ""_draw_steps_post"": Index.post_index}[\n                    Line2D.drawStyles[artist.get_drawstyle()]](\n                        len(data_xy), sel.target.index)\n            sels.append(sel)\n    sel = min(sels, key=lambda sel: sel.dist, default=None)\n    return sel if sel and sel.dist < artist.get_pickradius() else None\n\n\n@compute_pick.register(PathPatch)\n@compute_pick.register(Polygon)\n@compute_pick.register(Rectangle)\ndef _(artist, event):\n    sel = _compute_projection_pick(\n        artist, artist.get_path(), (event.x, event.y))\n    if sel and sel.dist < 5:  # FIXME Patches do not provide `pickradius`.\n        return sel\n\n\n@compute_pick.register(LineCollection)\ndef _(artist, event):\n    contains, info = artist.contains(event)\n    paths = artist.get_paths()\n    sels = [_compute_projection_pick(artist, paths[ind], (event.x, event.y))\n            for ind in info[""ind""]]\n    sel, index = min(\n        ((sel, info[""ind""][idx]) for idx, sel in enumerate(sels) if sel),\n        key=lambda sel_idx: sel_idx[0].dist, default=(None, None))\n    if sel:\n        sel = sel._replace(artist=artist)\n        sel.target.index = (index, sel.target.index)\n    return sel\n\n\n@compute_pick.register(PathCollection)\ndef _(artist, event):\n    # Use the C implementation to prune the list of segments.\n    contains, info = artist.contains(event)\n    if not contains:\n        return\n    offsets = artist.get_offsets()\n    paths = artist.get_paths()\n    if _is_scatter(artist):\n        ax = artist.axes\n        inds = info[""ind""]\n        offsets = offsets[inds]\n        ds = np.hypot(*(ax.transData.transform(offsets)\n                        - [event.x, event.y]).T)\n        argmin = ds.argmin()\n        target = with_attrs(offsets[argmin], index=inds[argmin])\n        return Selection(artist, target, ds[argmin], None, None)\n    else:\n        # Note that this won\'t select implicitly closed paths.\n        sels = [\n            _compute_projection_pick(\n                artist,\n                Affine2D().translate(*offsets[ind % len(offsets)])\n                .transform_path(paths[ind % len(paths)]),\n                (event.x, event.y))\n            for ind in info[""ind""]]\n        sel, index = min(((sel, idx) for idx, sel in enumerate(sels) if sel),\n                         key=lambda sel_idx: sel_idx[0].dist,\n                         default=(None, None))\n        if sel:\n            sel = sel._replace(artist=artist)\n            sel.target.index = (index, sel.target.index)\n        return sel\n\n\n@compute_pick.register(AxesImage)\ndef _(artist, event):\n    if type(artist) != AxesImage:\n        # Skip and warn on subclasses (`NonUniformImage`, `PcolorImage`) as\n        # they do not implement `contains` correctly.  Even if they did, they\n        # would not support moving as we do not know where a given index maps\n        # back physically.\n        return compute_pick.dispatch(object)(artist, event)\n    contains, _ = artist.contains(event)\n    if not contains:\n        return\n    ns = np.asarray(artist.get_array().shape)[::-1]  # (y, x) -> (x, y)\n    xy = np.array([event.xdata, event.ydata])\n    xmin, xmax, ymin, ymax = artist.get_extent()\n    # Handling of ""upper"" origin copied from AxesImage.get_cursor_data.\n    if artist.origin == ""upper"":\n        ymin, ymax = ymax, ymin\n    low, high = np.array([[xmin, ymin], [xmax, ymax]])\n    idxs = ((xy - low) / (high - low) * ns).astype(int)[::-1]\n    target = with_attrs(xy, index=tuple(idxs))\n    return Selection(artist, target, 0, None, None)\n\n\n@compute_pick.register(Barbs)\n@compute_pick.register(Quiver)\ndef _(artist, event):\n    offsets = artist.get_offsets()\n    ds = np.hypot(\n        *(artist.axes.transData.transform(offsets) - [event.x, event.y]).T)\n    argmin = np.nanargmin(ds)\n    if ds[argmin] < artist.get_pickradius():\n        target = with_attrs(offsets[argmin], index=argmin)\n        return Selection(artist, target, ds[argmin], None, None)\n    else:\n        return None\n\n\n@compute_pick.register(Text)\ndef _(artist, event):\n    return\n\n\n@compute_pick.register(ContainerArtist)\ndef _(artist, event):\n    sel = compute_pick(artist.container, event)\n    if sel:\n        sel = sel._replace(artist=artist)\n    return sel\n\n\n@compute_pick.register(BarContainer)\ndef _(container, event):\n    try:\n        (idx, patch), = {\n            (idx, patch) for idx, patch in enumerate(container.patches)\n            if patch.contains(event)[0]}\n    except ValueError:\n        return\n    target = with_attrs([event.xdata, event.ydata], index=idx)\n    if patch.sticky_edges.x:\n        target[0], = (\n            x for x in [patch.get_x(), patch.get_x() + patch.get_width()]\n            if x not in patch.sticky_edges.x)\n    if patch.sticky_edges.y:\n        target[1], = (\n            y for y in [patch.get_y(), patch.get_y() + patch.get_height()]\n            if y not in patch.sticky_edges.y)\n    return Selection(None, target, 0, None, None)\n\n\n@compute_pick.register(ErrorbarContainer)\ndef _(container, event):\n    data_line, cap_lines, err_lcs = container\n    sel_data = compute_pick(data_line, event) if data_line else None\n    sel_err = min(\n        filter(None, (compute_pick(err_lc, event) for err_lc in err_lcs)),\n        key=lambda sel: sel.dist, default=None)\n    if (sel_data and sel_data.dist < getattr(sel_err, ""dist"", np.inf)):\n        return sel_data\n    elif sel_err:\n        idx, _ = sel_err.target.index\n        if data_line:\n            target = with_attrs(data_line.get_xydata()[idx], index=idx)\n        else:  # We can\'t guess the original data in that case!\n            return\n        return Selection(None, target, 0, None, None)\n    else:\n        return\n\n\n@compute_pick.register(StemContainer)\ndef _(container, event):\n    sel = compute_pick(container.markerline, event)\n    if sel:\n        return sel\n    idx_sel = min(filter(lambda idx_sel: idx_sel[1] is not None,\n                         ((idx, compute_pick(line, event))\n                          for idx, line in enumerate(container.stemlines))),\n                  key=lambda idx_sel: idx_sel[1].dist, default=None)\n    if idx_sel:\n        idx, _ = idx_sel\n        target = with_attrs(\n            container.stemlines[idx].get_xydata()[-1], index=idx)\n        return Selection(None, target, 0, None, None)\n\n\ndef _call_with_selection(func):\n    """"""Decorator that passes a `Selection` built from the non-kwonly args.\n    """"""\n    wrapped_kwonly_params = [\n        param for param in inspect.signature(func).parameters.values()\n        if param.kind == param.KEYWORD_ONLY]\n    sel_sig = inspect.signature(Selection)\n    default_sel_sig = sel_sig.replace(\n        parameters=[param.replace(default=None) if param.default is param.empty\n                    else param\n                    for param in sel_sig.parameters.values()])\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        extra_kw = {param.name: kwargs.pop(param.name)\n                    for param in wrapped_kwonly_params if param.name in kwargs}\n        ba = default_sel_sig.bind(*args, **kwargs)\n        # apply_defaults\n        ba.arguments = ChainMap(\n            ba.arguments,\n            {name: param.default\n             for name, param in default_sel_sig.parameters.items()\n             if param.default is not param.empty})\n        sel = Selection(*ba.args, **ba.kwargs)\n        return func(sel, **extra_kw)\n    wrapper.__signature__ = Signature(\n        list(sel_sig.parameters.values()) + wrapped_kwonly_params)\n    return wrapper\n\n\ndef _format_coord_unspaced(ax, xy):\n    # Un-space-pad, remove empty coordinates from the output of\n    # `format_{x,y}data`, and rejoin with newlines.\n    return ""\\n"".join(\n        line for line, empty in zip(\n            re.split("",? +"", ax.format_coord(*xy)),\n            itertools.chain([""x="", ""y="", ""z=""], itertools.repeat(None)))\n        if line != empty).rstrip()\n\n\n@functools.singledispatch\n@_call_with_selection\ndef get_ann_text(sel):\n    """"""Compute an annotating text for a `Selection` (passed **unpacked**).\n\n    This is a single-dispatch function; implementations for various artist\n    classes follow.\n    """"""\n    warnings.warn(\n        ""Annotation support for {} is missing"".format(type(sel.artist)))\n    return """"\n\n\n@get_ann_text.register(Line2D)\n@get_ann_text.register(LineCollection)\n@get_ann_text.register(PathCollection)\n@get_ann_text.register(Patch)\n@_call_with_selection\ndef _(sel):\n    artist = sel.artist\n    label = artist.get_label() or """"\n    text = _format_coord_unspaced(artist.axes, sel.target)\n    if re.match(""[^_]"", label):\n        text = ""{}\\n{}"".format(label, text)\n    return text\n\n\n_Event = namedtuple(""_Event"", ""xdata ydata"")\n\n\n@get_ann_text.register(AxesImage)\n@_call_with_selection\ndef _(sel):\n    artist = sel.artist\n    text = _format_coord_unspaced(artist.axes, sel.target)\n    cursor_text = artist.format_cursor_data(\n        artist.get_cursor_data(_Event(*sel.target)))\n    # get_cursor_data changed in Matplotlib 3.\n    if not re.match(r""\\A\\[.*\\]\\Z"", cursor_text):\n        cursor_text = ""[{}]"".format(cursor_text)\n    return ""{}\\n{}"".format(text, cursor_text)\n\n\n@get_ann_text.register(Barbs)\n@_call_with_selection\ndef _(sel):\n    artist = sel.artist\n    text = ""{}\\n{}"".format(\n        _format_coord_unspaced(artist.axes, sel.target),\n        (artist.u[sel.target.index], artist.v[sel.target.index]))\n    return text\n\n\n@get_ann_text.register(Quiver)\n@_call_with_selection\ndef _(sel):\n    artist = sel.artist\n    text = ""{}\\n{}"".format(\n        _format_coord_unspaced(artist.axes, sel.target),\n        (artist.U[sel.target.index], artist.V[sel.target.index]))\n    return text\n\n\n@get_ann_text.register(ContainerArtist)\n@_call_with_selection\ndef _(sel):\n    return get_ann_text(*sel._replace(artist=sel.artist.container))\n\n\n@get_ann_text.register(BarContainer)\n@_call_with_selection\ndef _(sel):\n    return _format_coord_unspaced(\n        _artist_in_container(sel.artist).axes, sel.target)\n\n\n@get_ann_text.register(ErrorbarContainer)\n@_call_with_selection\ndef _(sel):\n    data_line, cap_lines, err_lcs = sel.artist\n    ann_text = get_ann_text(*sel._replace(artist=data_line))\n    if isinstance(sel.target.index, Integral):\n        err_lcs = iter(err_lcs)\n        for idx, (dir, has) in enumerate(\n                zip(""xy"", [sel.artist.has_xerr, sel.artist.has_yerr])):\n            if has:\n                err = (next(err_lcs).get_paths()[sel.target.index].vertices\n                       - data_line.get_xydata()[sel.target.index])[:, idx]\n                err_s = [getattr(_artist_in_container(sel.artist).axes,\n                                 ""format_{}data"".format(dir))(e).rstrip()\n                         for e in err]\n                # We\'d normally want to check err.sum() == 0, but that can run\n                # into fp inaccuracies.\n                if len({s.lstrip(""+-"") for s in err_s}) == 1:\n                    repl = r""\\1=$\\2\\\\pm{}$\\3"".format(err_s[1])\n                else:\n                    err_s = [(""+"" if not s.startswith((""+"", ""-"")) else """") + s\n                             for s in err_s]\n                    repl = r""\\1=$\\2_{{{}}}^{{{}}}$\\3"".format(*err_s)\n                ann_text = re.sub(""({})=(.*)(\\n?)"".format(dir), repl, ann_text)\n    return ann_text\n\n\n@get_ann_text.register(StemContainer)\n@_call_with_selection\ndef _(sel):\n    return get_ann_text(*sel._replace(artist=sel.artist.markerline))\n\n\n@functools.singledispatch\n@_call_with_selection\ndef move(sel, *, key):\n    """"""Move a `Selection` (passed **unpacked**) following a keypress.\n\n    This function is used to implement annotation displacement through the\n    keyboard.\n\n    This is a single-dispatch function; implementations for various artist\n    classes follow.\n    """"""\n    return sel\n\n\ndef _move_within_points(sel, xys, *, key):\n    # Avoid infinite loop in case everything became nan at some point.\n    for _ in range(len(xys)):\n        if key == ""left"":\n            new_idx = int(np.ceil(sel.target.index) - 1) % len(xys)\n        elif key == ""right"":\n            new_idx = int(np.floor(sel.target.index) + 1) % len(xys)\n        else:\n            return sel\n        target = with_attrs(xys[new_idx], index=new_idx)\n        sel = sel._replace(target=target, dist=0)\n        if np.isfinite(target).all():\n            return sel\n\n\n@move.register(Line2D)\n@_call_with_selection\ndef _(sel, *, key):\n    return _move_within_points(sel, sel.artist.get_xydata(), key=key)\n\n\n@move.register(PathCollection)\n@_call_with_selection\ndef _(sel, *, key):\n    if _is_scatter(sel.artist):\n        return _move_within_points(sel, sel.artist.get_offsets(), key=key)\n    else:\n        return sel\n\n\n@move.register(AxesImage)\n@_call_with_selection\ndef _(sel, *, key):\n    ns = sel.artist.get_array().shape\n    idxs = (np.asarray(sel.target.index)\n            + {""left"": [0, -1],\n               ""right"": [0, 1],\n               ""up"": {""lower"": [1, 0], ""upper"": [-1, 0]}[sel.artist.origin],\n               ""down"": {""lower"": [-1, 0], ""upper"": [1, 0]}[sel.artist.origin]}[\n                   key]) % ns\n    xmin, xmax, ymin, ymax = sel.artist.get_extent()\n    if sel.artist.origin == ""upper"":\n        ymin, ymax = ymax, ymin\n    low, high = np.array([[xmin, ymin], [xmax, ymax]])\n    target = with_attrs(((idxs + .5) / ns)[::-1] * (high - low) + low,\n                        index=tuple(idxs))\n    return sel._replace(target=target)\n\n\n@move.register(ContainerArtist)\n@_call_with_selection\ndef _(sel, *, key):\n    return (move(*sel._replace(artist=sel.artist.container), key=key)\n            ._replace(artist=sel.artist))\n\n\n@move.register(ErrorbarContainer)\n@_call_with_selection\ndef _(sel, *, key):\n    data_line, cap_lines, err_lcs = sel.artist\n    return _move_within_points(sel, data_line.get_xydata(), key=key)\n\n\n@functools.singledispatch\n@_call_with_selection\ndef make_highlight(sel, *, highlight_kwargs):\n    """"""Create a highlight for a `Selection`.\n\n    This is a single-dispatch function; implementations for various artist\n    classes follow.\n    """"""\n    warnings.warn(\n        ""Highlight support for {} is missing"".format(type(sel.artist)))\n\n\ndef _set_valid_props(artist, kwargs):\n    """"""Set valid properties for the artist, dropping the others.\n    """"""\n    artist.set(**{k: kwargs[k] for k in kwargs if hasattr(artist, ""set_"" + k)})\n    return artist\n\n\n@make_highlight.register(Line2D)\n@_call_with_selection\ndef _(sel, *, highlight_kwargs):\n    hl = copy.copy(sel.artist)\n    _set_valid_props(hl, highlight_kwargs)\n    return hl\n\n\n@make_highlight.register(PathCollection)\n@_call_with_selection\ndef _(sel, *, highlight_kwargs):\n    hl = copy.copy(sel.artist)\n    offsets = hl.get_offsets()\n    hl.set_offsets(np.where(\n        np.arange(len(offsets))[:, None] == sel.target.index, offsets, np.nan))\n    _set_valid_props(hl, highlight_kwargs)\n    return hl\n'"
RepTate/core/mplcursors/_version.py,0,"b'# coding: utf-8\n# file generated by setuptools_scm\n# don\'t change, don\'t track in version control\nversion = ""0.2.1""\n'"
RepTate/gui/Images/Matplotlib_markers/markers.py,0,"b'""""""Generate plenty of Matplotlib markers to later use as icons""""""\n\nimport matplotlib.pyplot as plt\n# To make a figure without the frame :\nmarkers=[\'.\',\',\',\'o\',\'v\',\'^\',\'<\',\'>\',\'1\',\'2\',\'3\',\'4\',\'8\',\'s\',\'p\',\'P\',\'*\',\'h\',\'H\',\'+\',\'x\',\'X\',\'D\',\'d\',\'|\',\'_\']\ndescriptions=[\'point\', \'pixel\', \'circle\', \'triangle_down\', \'triangle_up\',\'triangle_left\', \'triangle_right\', \'tri_down\', \'tri_up\', \'tri_left\',\'tri_right\', \'octagon\', \'square\', \'pentagon\', \'plus (filled)\',\'star\', \'hexagon1\', \'hexagon2\', \'plus\', \'x\', \'x (filled)\',\'diamond\', \'thin_diamond\', \'vline\', \'hline\']\ndic = {}\nfor m,d in zip(markers,descriptions):\n    dic[d]=m\n    markersize=8\n    if d == ""diamond"":\n        markersize=5\n    if d == ""thin_diamond"":\n        markersize=5\n    fig = plt.figure(frameon=False)\n    fig.set_size_inches(0.52,0.52)\n    ax = plt.Axes(fig, [0, 0, .24, .24])\n    ax.set_axis_off()\n    fig.add_axes(ax) \n    plt.plot([0], [0],color=\'black\', marker=m, markersize=markersize, markerfacecolor=\'none\')\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\n    # lim = 0.05\n    # ax.set_xlim([-lim,lim])\n    # ax.set_ylim([-lim,lim])\n    plt.savefig(""marker_%s.png""%d, dpi=1000, pad_inches = 0, bbox_inches=\'tight\', transparent=True)\n\nprint(dic)'"
