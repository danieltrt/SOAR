file_path,api_count,code
setup.py,0,"b'"""""" Setup script for installing Alyn """"""\n\nfrom setuptools import setup\n\nsetup(\n    name=""alyn"",\n    version=""0.1.1"",\n    author=""Kakul Chandra"",\n    description=""Fix skew in images"",\n    author_email=""kakulchandra911@gmail.com"",\n    url=\'https://github.com/kakul/Alyn.git\',\n    download_url=\'https://github.com\',\n    keywords=[\'image-processing\', \'image-deskew\', \'deskew\', \'rotate\', \'text\'],\n    packages=[\'alyn\'],\n    classifiers=[],\n    license=\'MIT\',\n    install_requires=[\'numpy\', \'scikit-image\', \'scipy\', \'matplotlib\'])\n'"
alyn/__init__.py,0,"b'"""""" Import required modules""""""\nfrom deskew import *\nfrom skew_detect import *\n'"
alyn/deskew.py,1,"b'"""""" Deskews file after getting skew angle """"""\nimport optparse\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom skew_detect import SkewDetect\nfrom skimage import io\nfrom skimage.transform import rotate\n\n\nclass Deskew:\n\n    def __init__(self, input_file, display_image, output_file, r_angle):\n\n        self.input_file = input_file\n        self.display_image = display_image\n        self.output_file = output_file\n        self.r_angle = r_angle\n        self.skew_obj = SkewDetect(self.input_file)\n\n    def deskew(self):\n\n        img = io.imread(self.input_file)\n        res = self.skew_obj.process_single_file()\n        angle = res[\'Estimated Angle\']\n\n        if angle >= 0 and angle <= 90:\n            rot_angle = angle - 90 + self.r_angle\n        if angle >= -45 and angle < 0:\n            rot_angle = angle - 90 + self.r_angle\n        if angle >= -90 and angle < -45:\n            rot_angle = 90 + angle + self.r_angle\n\n        rotated = rotate(img, rot_angle, resize=True)\n\n        if self.display_image:\n            self.display(rotated)\n\n        if self.output_file:\n            self.saveImage(rotated*255)\n\n    def saveImage(self, img):\n        path = self.skew_obj.check_path(self.output_file)\n        io.imsave(path, img.astype(np.uint8))\n\n    def display(self, img):\n\n        plt.imshow(img)\n        plt.show()\n\n    def run(self):\n\n        if self.input_file:\n            self.deskew()\n\n\nif __name__ == \'__main__\':\n\n    parser = optparse.OptionParser()\n\n    parser.add_option(\n        \'-i\',\n        \'--input\',\n        default=None,\n        dest=\'input_file\',\n        help=\'Input file name\')\n    parser.add_option(\n        \'-d\', \'--display\',\n        default=None,\n        dest=\'display_image\',\n        help=""display the rotated image"")\n    parser.add_option(\n        \'-o\', \'--output\',\n        default=None,\n        dest=\'output_file\',\n        help=\'Output file name\')\n    parser.add_option(\n        \'-r\', \'--rotate\',\n        default=0,\n        dest=\'r_angle\',\n        help=\'Rotate the image to desired axis\',\n        type=int)\n    options, args = parser.parse_args()\n    deskew_obj = Deskew(\n        options.input_file,\n        options.display_image,\n        options.output_file,\n        options.r_angle)\n\n    deskew_obj.run()\n'"
alyn/skew_detect.py,9,"b'"""""" Calculates skew angle """"""\nimport os\nimport imghdr\nimport optparse\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom skimage import io\nfrom skimage.feature import canny\nfrom skimage.color import rgb2gray\nfrom skimage.transform import hough_line, hough_line_peaks\n\n\nclass SkewDetect:\n\n    piby4 = np.pi / 4\n\n    def __init__(\n        self,\n        input_file=None,\n        batch_path=None,\n        output_file=None,\n        sigma=3.0,\n        display_output=None,\n        num_peaks=20,\n        plot_hough=None\n    ):\n\n        self.sigma = sigma\n        self.input_file = input_file\n        self.batch_path = batch_path\n        self.output_file = output_file\n        self.display_output = display_output\n        self.num_peaks = num_peaks\n        self.plot_hough = plot_hough\n\n    def write_to_file(self, wfile, data):\n\n        for d in data:\n            wfile.write(d + \': \' + str(data[d]) + \'\\n\')\n        wfile.write(\'\\n\')\n\n    def get_max_freq_elem(self, arr):\n\n        max_arr = []\n        freqs = {}\n        for i in arr:\n            if i in freqs:\n                freqs[i] += 1\n            else:\n                freqs[i] = 1\n\n        sorted_keys = sorted(freqs, key=freqs.get, reverse=True)\n        max_freq = freqs[sorted_keys[0]]\n\n        for k in sorted_keys:\n            if freqs[k] == max_freq:\n                max_arr.append(k)\n\n        return max_arr\n\n    def display_hough(self, h, a, d):\n\n        plt.imshow(\n            np.log(1 + h),\n            extent=[np.rad2deg(a[-1]), np.rad2deg(a[0]), d[-1], d[0]],\n            cmap=plt.cm.gray,\n            aspect=1.0 / 90)\n        plt.show()\n\n    def compare_sum(self, value):\n        if value >= 44 and value <= 46:\n            return True\n        else:\n            return False\n\n    def display(self, data):\n\n        for i in data:\n            print i + "": "" + str(data[i])\n\n    def calculate_deviation(self, angle):\n\n        angle_in_degrees = np.abs(angle)\n        deviation = np.abs(SkewDetect.piby4 - angle_in_degrees)\n\n        return deviation\n\n    def run(self):\n\n        if self.display_output:\n            if self.display_output.lower() == \'yes\':\n                self.display_output = True\n            else:\n                self.display_output = False\n\n        if self.plot_hough:\n            if self.plot_hough.lower() == \'yes\':\n                self.plot_hough = True\n            else:\n                self.plot_hough = False\n\n        if self.input_file is None:\n            if self.batch_path:\n                self.batch_process()\n            else:\n                print ""Invalid input, nothing to process.""\n        else:\n            self.process_single_file()\n\n    def check_path(self, path):\n\n        if os.path.isabs(path):\n            full_path = path\n        else:\n            full_path = os.getcwd() + \'/\' + str(path)\n        return full_path\n\n    def process_single_file(self):\n\n        file_path = self.check_path(self.input_file)\n        res = self.determine_skew(file_path)\n\n        if self.output_file:\n            output_path = self.check_path(self.output_file)\n            wfile = open(output_path, \'w\')\n            self.write_to_file(wfile, res)\n            wfile.close()\n\n        return res\n\n    def batch_process(self):\n\n        wfile = None\n\n        if self.batch_path == \'.\':\n            self.batch_path = \'\'\n\n        abs_path = self.check_path(self.batch_path)\n        files = os.listdir(abs_path)\n\n        if self.output_file:\n            out_path = self.check_path(self.output_file)\n            wfile = open(file_path, \'w\')\n\n        for f in files:\n            file_path = abs_path + \'/\' + f\n            if os.path.isdir(file_path):\n                continue\n            if imghdr.what(file_path):\n                res = self.determine_skew(file_path)\n                if wfile:\n                    self.write_to_file(wfile, res)\n        if wfile:\n            wfile.close()\n\n    def determine_skew(self, img_file):\n\n        img = io.imread(img_file, as_grey=True)\n        edges = canny(img, sigma=self.sigma)\n        h, a, d = hough_line(edges)\n        _, ap, _ = hough_line_peaks(h, a, d, num_peaks=self.num_peaks)\n\n        if len(ap) == 0:\n            return {""Image File"": img_file, ""Message"": ""Bad Quality""}\n\n        absolute_deviations = [self.calculate_deviation(k) for k in ap]\n        average_deviation = np.mean(np.rad2deg(absolute_deviations))\n        ap_deg = [np.rad2deg(x) for x in ap]\n\n        bin_0_45 = []\n        bin_45_90 = []\n        bin_0_45n = []\n        bin_45_90n = []\n\n        for ang in ap_deg:\n\n            deviation_sum = int(90 - ang + average_deviation)\n            if self.compare_sum(deviation_sum):\n                bin_45_90.append(ang)\n                continue\n\n            deviation_sum = int(ang + average_deviation)\n            if self.compare_sum(deviation_sum):\n                bin_0_45.append(ang)\n                continue\n\n            deviation_sum = int(-ang + average_deviation)\n            if self.compare_sum(deviation_sum):\n                bin_0_45n.append(ang)\n                continue\n\n            deviation_sum = int(90 + ang + average_deviation)\n            if self.compare_sum(deviation_sum):\n                bin_45_90n.append(ang)\n\n        angles = [bin_0_45, bin_45_90, bin_0_45n, bin_45_90n]\n        lmax = 0\n\n        for j in range(len(angles)):\n            l = len(angles[j])\n            if l > lmax:\n                lmax = l\n                maxi = j\n\n        if lmax:\n            ans_arr = self.get_max_freq_elem(angles[maxi])\n            ans_res = np.mean(ans_arr)\n\n        else:\n            ans_arr = self.get_max_freq_elem(ap_deg)\n            ans_res = np.mean(ans_arr)\n\n        data = {\n            ""Image File"": img_file,\n            ""Average Deviation from pi/4"": average_deviation,\n            ""Estimated Angle"": ans_res,\n            ""Angle bins"": angles}\n\n        if self.display_output:\n            self.display(data)\n\n        if self.plot_hough:\n            self.display_hough(h, a, d)\n        return data\n\nif __name__ == \'__main__\':\n\n    parser = optparse.OptionParser()\n\n    parser.add_option(\n        \'-b\', \'--batch\',\n        default=None,\n        dest=\'batch_path\',\n        help=\'Path for batch processing\')\n    parser.add_option(\n        \'-d\', \'--display\',\n        default=None,\n        dest=\'display_output\',\n        help=\'Display logs\')\n    parser.add_option(\n        \'-i\', \'--input\',\n        default=None,\n        dest=\'input_file\',\n        help=\'Input file name\')\n    parser.add_option(\n        \'-n\', \'--num\',\n        default=20,\n        dest=\'num_peaks\',\n        help=\'Number of Hough Transform peaks\',\n        type=int)\n    parser.add_option(\n        \'-o\', \'--output\',\n        default=None,\n        dest=\'output_file\',\n        help=\'Output file name\')\n    parser.add_option(\n        \'-p\', \'--plot\',\n        default=None,\n        dest=\'plot_hough\',\n        help=\'Plot the Hough Transform\')\n    parser.add_option(\n        \'-s\', \'--sigma\',\n        default=3.0,\n        dest=\'sigma\',\n        help=\'Sigma for Canny Edge Detection\',\n        type=float)\n    options, args = parser.parse_args()\n    skew_obj = SkewDetect(\n        options.input_file,\n        options.batch_path,\n        options.output_file,\n        options.sigma,\n        options.display_output,\n        options.num_peaks,\n        options.plot_hough)\n    skew_obj.run()\n'"
test_data/test_img_gen.py,1,"b""#!/usr/bin/env python\nimport numpy as np\n\nfrom skimage import io\nfrom skimage.draw import line_aa\nfrom skimage.transform import rotate\n\nimg = io.imread('line.jpg',as_grey=True)\n#img = 1-img\nfor i in range(1,180):\n\tf1 = rotate(img, i, resize=False) * 255\n\tio.imsave(str(i)+'.jpg',f1.astype(np.uint8))\n"""
