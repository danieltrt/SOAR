file_path,api_count,code
Example1.py,2,"b'import cv2\nimport numpy as np\nimport math\nfrom vcam import vcam,meshGen\n\n# Reading the input image. Pass the path of image you would like to use as input image.\nimg = cv2.imread(""chess.png"")\nH,W = img.shape[:2]\n\n# Creating the virtual camera object\nc1 = vcam(H=H,W=W)\n\n# Creating the surface object\nplane = meshGen(H,W)\n\n# We generate a mirror where for each 3D point, its Z coordinate is defined as Z = 20*exp^((x/w)^2 / 2*0.1*sqrt(2*pi))\n\nplane.Z += 20*np.exp(-0.5*((plane.X*1.0/plane.W)/0.1)**2)/(0.1*np.sqrt(2*np.pi))\npts3d = plane.getPlane()\n\npts2d = c1.project(pts3d)\nmap_x,map_y = c1.getMaps(pts2d)\n\noutput = cv2.remap(img,map_x,map_y,interpolation=cv2.INTER_LINEAR)\n\ncv2.imshow(""Funny Mirror"",output)\ncv2.imshow(""Input and output"",np.hstack((img,output)))\ncv2.waitKey(0)\n'"
Example2.py,2,"b'import cv2\nimport numpy as np\nimport math\nfrom vcam import vcam,meshGen\nimport sys\n\n\ncap = cv2.VideoCapture(0)\n\nret, img = cap.read()\n\nH,W = img.shape[:2]\nfps = 30\n\n# Creating the virtual camera object\nc1 = vcam(H=H,W=W)\n\n# Creating the surface object\nplane = meshGen(H,W)\n\n# Defining the plane by Z = F(X,Y) \nplane.Z += 20*np.exp(-0.5*((plane.X*1.0/plane.W)/0.1)**2)/(0.1*np.sqrt(2*np.pi))\n\n# Extracting the generated 3D plane\npts3d = plane.getPlane()\n\n# Projecting (Capturing) the plane in the virtual camera\npts2d = c1.project(pts3d)\n\n# Deriving mapping functions for mesh based warping.\nmap_x,map_y = c1.getMaps(pts2d)\n\nret, img = cap.read()\n\nwhile 1:\n\tret, img = cap.read()\n\tif ret:\n\t\toutput = cv2.remap(img,map_x,map_y,interpolation=cv2.INTER_LINEAR,borderMode=0)\n\t\toutput = cv2.flip(output,1)\n\t\tout1 = np.hstack((img,output))\n\t\tout1 = cv2.resize(out1,(700,350))\n\t\tcv2.imshow(""output"",out1)\n\t\tif cv2.waitKey(1)&0xFF == 27:\n\t\t\tbreak\n\telse:\n\t\tbreak'"
