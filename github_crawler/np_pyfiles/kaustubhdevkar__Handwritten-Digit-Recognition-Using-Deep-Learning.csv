file_path,api_count,code
test.py,2,"b'import numpy as np\nfrom sklearn.metrics import classification_report\nfrom sklearn.externals import joblib\nfrom sklearn import datasets\n\n\n#getting MNIST of size 70k images\ndataset = datasets.fetch_mldata(""MNIST Original"")\nX = np.array(dataset.data)  #Our Features\ny = np.array(dataset.target) #Our labels\n\nX =  X.astype(\'float32\') \n\n#getting Our Test Data\nX_test,y_test = X[60000:], y[60000:]\n \n\n\n#Normalizing Our Features in range 0 and 1\n\nX_test = X_test /255\n\n#loading out saved model\nmodel = joblib.load(\'model.pkl\')\n\n#predicting Now\ny_pred = model.predict(X_test)\n\nprint(classification_report(y_pred,y_test))\n\n\n\n\n\n\n\n\n'"
test_on_image.py,3,"b'\'\'\'\nAuthor:Kaustubh Devkar\n(kdevkar1998@gmail.com)\n\'\'\'\n#importing required modules\nimport numpy as np,cv2,imutils\nfrom sklearn.externals import joblib\n\n#reading image\nimg = cv2.imread(\'sample_image2.jpg\')\n#resizing image\nimg = imutils.resize(img,width=300)\n#showing original image\ncv2.imshow(""Original"",img)\n#converting image to grayscale\ngray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n#showing grayscale image\ncv2.imshow(""Gray Image"",gray)\n\n#creating a kernel\nkernel = np.ones((40,40),np.uint8)\n\n#applying blackhat thresholding\nblackhat = cv2.morphologyEx(gray,cv2.MORPH_BLACKHAT,kernel)\n\n\n#applying OTSU\'s thresholding\nret,thresh = cv2.threshold(blackhat,0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)\n\n#performing erosion and dilation\nopening = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel)\n\n#finding countours in image\nret,cnts,hie = cv2.findContours(thresh.copy(),cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\n\n#loading our ANN model\nmodel = joblib.load(\'model.pkl\')\nfor c in cnts:\n    try:\n        #creating a mask\n        mask = np.zeros(gray.shape,dtype=""uint8"")\n        \n    \n        (x,y,w,h) = cv2.boundingRect(c)\n        \n        hull = cv2.convexHull(c)\n        cv2.drawContours(mask,[hull],-1,255,-1)    \n        mask = cv2.bitwise_and(thresh,thresh,mask=mask)\n\n        \n        #Getting Region of interest\n        roi = mask[y-7:y+h+7,x-7:x+w+7]       \n        roi = cv2.resize(roi,(28,28))\n        roi = np.array(roi)\n        #reshaping roi to feed image to our model\n        roi = roi.reshape(1,784)\n\n        #predicting\n        prediction = model.predict(roi)\n    \n        cv2.rectangle(img,(x,y),(x+w,y+h),(0,255,0),1)\n        cv2.putText(img,str(int(prediction)),(x,y),cv2.FONT_HERSHEY_SIMPLEX,0.8,(255,0,0),1)\n        \n    except Exception as e:\n        print(e)\n        \nimg = imutils.resize(img,width=500)\n\n#showing the output\ncv2.imshow(\'Detection\',img)\ncv2.imwrite(\'result2.jpg\',img)\n               \n'"
train.py,2,"b'\'\'\'\nAuthor :Kaustubh Devkar\n(kdevkar1998@gmail.com)\n\'\'\'\n#importing required modules\n\nfrom sklearn.externals import joblib\nfrom sklearn import datasets\nimport numpy as np\n#for creating Neural Network  I am using  MLPClassifier from sklearn\n\nfrom sklearn.neural_network.multilayer_perceptron import  MLPClassifier\n\n#getting MNIST of size 70k images\ndataset = datasets.fetch_mldata(""MNIST Original"")\nX = np.array(dataset.data)  #Our Features\ny = np.array(dataset.target) #Our labels\n\nX =  X.astype(\'float32\') \n\n#splitting Dataset into Training and Testing dataset\n#First 60k instances are for Training and last 10k are for testing\nX_train, X_test = X[:60000], X[60000:]\ny_train, y_test = y[:60000], y[60000:]\n\n\n#Normalizing Our Features in range 0 and 1\nX_train = X_train /255\nX_test = X_test /255\n\n#creating Neural Network\n# Neural Network has one hidden layer with 240 units\n# Neural NetWork is of size 784-240-10\n\nmlp = MLPClassifier(hidden_layer_sizes=(240), max_iter=500, verbose=True)\n\n#fitting our model\nmlp.fit(X_train, y_train)\n\n\'\'\'\nFinal Output:\nIteration 33, loss = 0.00299869\n\'\'\'\n\nprint(""Training set score: %f"" % mlp.score(X_train, y_train)) #output : 0.99\nprint(""Test set score: %f"" % mlp.score(X_test, y_test))     #output :0.98\n\n#saving our model\njoblib.dump(mlp, ""model.pkl"")\n'"
