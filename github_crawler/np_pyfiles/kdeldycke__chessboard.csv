file_path,api_count,code
setup.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2015-2017 Kevin Deldycke <kevin@deldycke.com>\n#                         and contributors.\n# All Rights Reserved.\n#\n# This program is Free Software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n\nfrom __future__ import (\n    absolute_import,\n    division,\n    print_function,\n    unicode_literals\n)\n\nimport io\nimport re\nfrom os import path\n\nfrom setuptools import find_packages, setup\n\nMODULE_NAME = \'chessboard\'\nPACKAGE_NAME = MODULE_NAME.replace(\'_\', \'-\')\nREPOSITORY_URL = \'https://github.com/kdeldycke/{}\'.format(PACKAGE_NAME)\nDOCUMENTATION_URL = \'https://{}.readthedocs.io\'.format(PACKAGE_NAME)\n\nDEPENDENCIES = [\n    \'bprofile\',\n    \'click >= 5.0\',\n    \'click_log\',\n    \'numpy\',\n    \'pandas\',\n    \'py-cpuinfo\',\n    \'seaborn\']\n\nEXTRA_DEPENDENCIES = {\n    # Extra dependencies are made available through the\n    # `$ pip install .[keyword]` command.\n    \'docs\': [\n        \'sphinx >= 1.4\',\n        \'sphinx_rtd_theme\'],\n    \'tests\': [\n        \'pipdeptree[graphviz]\',\n        \'pycodestyle >= 2.1.0\',\n        \'pylint\',\n        \'pytest\',\n        # More pytest plugins at: http://plugincompat.herokuapp.com .\n        \'pytest-cov\'],\n    \'develop\': [\n        \'bumpversion\',\n        \'isort\',\n        \'readme_renderer >= 16.0\',\n        \'setuptools >= 38.3.0\',\n        \'twine\',\n        \'wheel\']}\n\n\ndef read_file(*relative_path_elements):\n    """""" Return content of a file relative to this ``setup.py``. """"""\n    file_path = path.join(path.dirname(__file__), *relative_path_elements)\n    return io.open(file_path, encoding=\'utf8\').read().strip()\n\n\n# Cache fetched version.\n_version = None  # noqa\n\n\ndef version():\n    """""" Extract version from the ``__init__.py`` file at the module\'s root.\n\n    Inspired by: https://packaging.python.org/single_source_version/\n    """"""\n    global _version\n    if _version:\n        return _version\n    init_file = read_file(MODULE_NAME, \'__init__.py\')\n    matches = re.search(\n        r\'^__version__\\s*=\\s*[\\\'""]([^\\\'""]*)[\\\'""]\', init_file, re.M)\n    if not matches:\n        raise RuntimeError(""Unable to find version string in __init__.py ."")\n    _version = matches.group(1)  # noqa\n    return _version\n\n\ndef latest_changes():\n    """""" Extract part of changelog pertaining to version. """"""\n    lines = []\n    for line in read_file(\'CHANGES.rst\').splitlines():\n        if line.startswith(\'-------\'):\n            if len(lines) > 1:\n                lines = lines[:-1]\n                break\n        if lines:\n            lines.append(line)\n        elif line.startswith(""`{} ("".format(version())):\n            lines.append(line)\n    if not lines:\n        raise RuntimeError(\n            ""Unable to find changelog for the {} release."".format(version()))\n    # Renormalize and clean lines.\n    return \'\\n\'.join(lines).strip().split(\'\\n\')\n\n\ndef long_description():\n    """""" Collates project README and latest changes. """"""\n    changes = latest_changes()\n    changes[0] = ""`Changes for v{}"".format(changes[0][1:])\n    changes[1] = \'-\' * len(changes[0])\n    return ""\\n\\n\\n"".join([\n        read_file(\'README.rst\'),\n        \'\\n\'.join(changes),\n        ""`Full changelog <{}/en/develop/changelog.html#changelog>`_."".format(\n            DOCUMENTATION_URL)])\n\n\nsetup(\n    name=PACKAGE_NAME,\n    version=version(),\n    description=""CLI to solve combinatoric chess puzzles."",\n    long_description=long_description(),\n    keywords=[\'chess\', \'puzzle\', \'CLI\', \'solver\'],\n\n    author=\'Kevin Deldycke\',\n    author_email=\'kevin@deldycke.com\',\n    url=REPOSITORY_URL,\n    project_urls={\n        \'Source Code\': REPOSITORY_URL,\n        \'Documentation\': DOCUMENTATION_URL,\n        \'Bug Tracker\': \'{}/issues\'.format(REPOSITORY_URL),\n    },\n    license=\'GPLv2+\',\n\n    packages=find_packages(),\n    # https://www.python.org/dev/peps/pep-0345/#version-specifiers\n    python_requires=\'>= 2.7, != 3.0.*, != 3.1.*, != 3.2.*, != 3.3.*\',\n    install_requires=DEPENDENCIES,\n    tests_require=DEPENDENCIES + EXTRA_DEPENDENCIES[\'tests\'],\n    extras_require=EXTRA_DEPENDENCIES,\n    dependency_links=[],\n    test_suite=\'{}.tests\'.format(MODULE_NAME),\n\n    classifiers=[\n        # See: https://pypi.python.org/pypi?:action=list_classifiers\n        \'Development Status :: 5 - Production/Stable\',\n        \'Environment :: Console\',\n        \'Intended Audience :: Developers\',\n        \'Intended Audience :: Science/Research\',\n        \'License :: OSI Approved :: \'\n        \'GNU General Public License v2 or later (GPLv2+)\',\n        \'Operating System :: OS Independent\',\n        # List of python versions and their support status:\n        # https://en.wikipedia.org/wiki/CPython#Version_history\n        \'Programming Language :: Python\',\n        \'Programming Language :: Python :: 2\',\n        \'Programming Language :: Python :: 2.7\',\n        \'Programming Language :: Python :: 3\',\n        \'Programming Language :: Python :: 3.4\',\n        \'Programming Language :: Python :: 3.5\',\n        \'Programming Language :: Python :: 3.6\',\n        \'Programming Language :: Python :: Implementation :: CPython\',\n        \'Topic :: Education\',\n        \'Topic :: Games/Entertainment :: Board Games\'],\n\n    entry_points={\n        \'console_scripts\': [\n            \'chessboard={}.cli:cli\'.format(MODULE_NAME)]}\n)\n'"
chessboard/__init__.py,0,"b'# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2015-2017 Kevin Deldycke <kevin@deldycke.com>\n#                         and contributors.\n# All Rights Reserved.\n#\n# This program is Free Software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n\n"""""" Expose package-wide elements. """"""\n\n\n# Examples of valid version strings\n# __version__ = \'1.2.3.dev1\'  # Development release 1\n# __version__ = \'1.2.3a1\'     # Alpha Release 1\n# __version__ = \'1.2.3b1\'     # Beta Release 1\n# __version__ = \'1.2.3rc1\'    # RC Release 1\n# __version__ = \'1.2.3\'       # Final Release\n# __version__ = \'1.2.3.post1\' # Post Release 1\n__version__ = \'1.6.0\'\n\n\nimport sys\n\nPY2 = sys.version_info[0] == 2\nPY3 = sys.version_info[0] == 3\n\n\n# Defines custom exception first to avoid circular imports.\n\nclass ForbiddenCoordinates(Exception):\n\n    """""" A position given as 2D coordinates are out of board\'s bounds. """"""\n\n\nclass ForbiddenIndex(Exception):\n\n    """""" A position given as an index is out of board\'s bounds. """"""\n\n\nclass OccupiedPosition(Exception):\n\n    """""" A piece is added to a position already occupied by another. """"""\n\n\nclass VulnerablePosition(Exception):\n\n    """""" A piece is added to a position reachable by another. """"""\n\n\nclass AttackablePiece(Exception):\n\n    """""" A piece is added to a position from which it can attack another. """"""\n\n\n# Expose important classes to the root of the module. These are not\n# lexicographically sorted to avoid cyclic imports.\nfrom chessboard.pieces import (\n    Piece,\n    King, Queen, Rook, Bishop, Knight,\n    PIECE_LABELS, PIECE_CLASSES)\nfrom chessboard.board import Board\nfrom chessboard.solver import Permutations, SolverContext\nfrom chessboard.benchmark import Benchmark\n\nimport logging\n\nlogger = logging.getLogger(__name__)\n'"
chessboard/benchmark.py,0,"b'# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2015-2017 Kevin Deldycke <kevin@deldycke.com>\n#                         and contributors.\n# All Rights Reserved.\n#\n# This program is Free Software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n\n"""""" Benchmarking tools. """"""\n\nfrom __future__ import (\n    absolute_import,\n    division,\n    print_function,\n    unicode_literals\n)\n\nimport platform\nimport time\nfrom collections import OrderedDict\nfrom os import path\n\nimport pandas\nimport seaborn\nfrom cpuinfo import get_cpu_info\nfrom numpy import median\n\nfrom chessboard import PIECE_LABELS, SolverContext, __version__\n\n\ndef run_scenario(params):\n    """""" Run one scenario and returns execution time and number of solutions.\n\n    Also returns initial parameters in the response to keep the results\n    associated with the initial context.\n    """"""\n    solver = SolverContext(**params)\n    start = time.time()\n    count = sum(1 for _ in solver.solve())\n    execution_time = time.time() - start\n    params.update({\n        \'solutions\': count,\n        \'execution_time\': execution_time})\n    return params\n\n\nclass Benchmark(object):\n\n    """""" Defines benchmark suite and utility to save and render the results. """"""\n\n    scenarii = [\n        # Tiny boards\n        {\'length\': 3, \'height\': 3, \'king\': 2, \'rook\': 1},\n        {\'length\': 4, \'height\': 4, \'rook\': 2, \'knight\': 4},\n        # n queens problems.\n        {\'length\': 1, \'height\': 1, \'queen\': 1},\n        {\'length\': 2, \'height\': 2, \'queen\': 2},\n        {\'length\': 3, \'height\': 3, \'queen\': 3},\n        {\'length\': 4, \'height\': 4, \'queen\': 4},\n        {\'length\': 5, \'height\': 5, \'queen\': 5},\n        {\'length\': 6, \'height\': 6, \'queen\': 6},\n        {\'length\': 7, \'height\': 7, \'queen\': 7},\n        {\'length\': 8, \'height\': 8, \'queen\': 8},\n        # {\'length\': 9, \'height\': 9, \'queen\': 9},\n        # Big family.\n        {\'length\': 5, \'height\': 5,\n         \'king\': 2, \'queen\': 2, \'bishop\': 2, \'knight\': 1},\n        {\'length\': 6, \'height\': 6,\n         \'king\': 2, \'queen\': 2, \'bishop\': 2, \'knight\': 1},\n        # {\'length\': 7, \'height\': 7,\n        #  \'king\': 2, \'queen\': 2, \'bishop\': 2, \'knight\': 1},\n    ]\n\n    # Data are going in a CSV file along this file.\n    csv_filepath = path.join(path.dirname(__file__), \'benchmark.csv\')\n\n    # Gather software and hardware metadata.\n    cpu_info = get_cpu_info()\n    context = OrderedDict([\n        # Solver.\n        (\'chessboard\', __version__),\n        # Python interpreter.\n        (\'implementation\', platform.python_implementation()),\n        (\'python\', platform.python_version()),\n        # Underlaying OS.\n        (\'system\', platform.system()),\n        (\'macos\', platform.mac_ver()[0]),\n        (\'linux\', \' \'.join(platform.linux_distribution()).strip()),\n        (\'windows\', platform.win32_ver()[1]),\n        (\'java\', platform.java_ver()[0]),\n        # Hardware.\n        (\'architecture\', platform.architecture()[0]),\n        (\'machine\', platform.machine()),\n        # CPU.\n        (\'cpu_vendor\', cpu_info[\'vendor_id\']),\n        (\'cpu_model\', cpu_info[\'brand\']),\n        (\'cpu_freq_actual\', cpu_info[\'hz_actual\'][0]),\n        (\'cpu_freq_advertised\', cpu_info[\'hz_advertised\'][0]),\n        (\'cpu_l2_cache\', cpu_info.get(\'l2_cache_size\', None)),\n    ])\n\n    # Sorted column IDs.\n    column_ids = [\'length\', \'height\'] + list(PIECE_LABELS) + [\n        \'solutions\', \'execution_time\'] + list(context)\n\n    def __init__(self):\n        """""" Initialize the result database. """"""\n        self.results = pandas.DataFrame(columns=self.column_ids)\n\n    def load_csv(self):\n        """""" Load old benchmark results from CSV. """"""\n        if path.exists(self.csv_filepath):\n            self.results = self.results.append(\n                pandas.read_csv(self.csv_filepath))\n\n    def add(self, new_results):\n        """""" Add new benchmark results. """"""\n        for result in new_results:\n            result.update(self.context)\n            self.results = self.results.append(result, ignore_index=True)\n\n    def save_csv(self):\n        """""" Dump all results to CSV. """"""\n        # Sort results so we can start to see patterns right in the raw CSV.\n        self.results.sort_values(by=self.column_ids, inplace=True)\n        # Gotcha: integers seems to be promoted to float64 because of\n        # reindexation. See: https://pandas.pydata.org/pandas-docs/stable\n        # /gotchas.html#na-type-promotions\n        self.results.reindex(columns=self.column_ids).to_csv(\n            self.csv_filepath, index=False)\n\n    def nqueen_graph(self):\n        """""" Graph n-queens problem for the current version and context. """"""\n        # Filters out boards with pieces other than queens.\n        nqueens = self.results\n        for piece_label in set(PIECE_LABELS).difference([\'queen\']):\n            nqueens = nqueens[nqueens[piece_label].map(pandas.isnull)]\n\n        # Filters out non-square boards whose dimension are not aligned to the\n        # number of queens.\n        nqueens = nqueens[nqueens[\'length\'] == nqueens[\'queen\']]\n        nqueens = nqueens[nqueens[\'height\'] == nqueens[\'queen\']]\n\n        # Filters out results not obtained from this system.\n        for label, value in self.context.items():\n            if not value:\n                nqueens = nqueens[nqueens[label].map(pandas.isnull)]\n            else:\n                nqueens = nqueens[nqueens[label] == value]\n\n        plot = seaborn.factorplot(\n            x=\'queen\',\n            y=\'execution_time\',\n            data=nqueens.sort(columns=\'queen\'),\n            estimator=median,\n            kind=\'bar\',\n            palette=\'BuGn_d\',\n            aspect=1.5)\n        plot.set_xlabels(\'Number of queens\')\n        plot.set_ylabels(\'Solving time in seconds (log scale)\')\n        plot.fig.get_axes()[0].set_yscale(\'log\')\n\n        plot.savefig(\'nqueens-performances.png\')\n'"
chessboard/board.py,0,"b'# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2015-2017 Kevin Deldycke <kevin@deldycke.com>\n#                         and contributors.\n# All Rights Reserved.\n#\n# This program is Free Software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n\n"""""" Board repesentation and utilities. """"""\n\nfrom __future__ import (\n    absolute_import,\n    division,\n    print_function,\n    unicode_literals\n)\n\nfrom operator import or_\n\nfrom chessboard import (\n    PIECE_CLASSES,\n    AttackablePiece,\n    ForbiddenCoordinates,\n    ForbiddenIndex,\n    OccupiedPosition,\n    VulnerablePosition\n)\n\n\nclass Board(object):\n    """""" Chessboard of arbitrary dimensions with placed pieces.\n\n    This kind of chessboard only accept new pieces which are not overlapping\n    squares:\n\n    * occupied by another piece;\n    * directly reachable by another piece.\n\n    Internal states of the board are materialized by a vector. A vector is a\n    simple iterable for which each element represent a square.\n\n    For :class:`.Piece` we use a :keyword:`bytearray` so we can pack a lot of\n    states in memory for caching. But here for boards, we prefer a common\n    :keyword:`list` of :keyword:`bool` as it seems Python is a little bit\n    faster dealing with these.\n\n    2D positions on the board are noted ``(x, y)``::\n\n          0 1 2 3 4 \xe2\x80\xa6\n        0 . . . . .\n        1 . . . . .\n        2 . . . . .\n        3 . . . . .\n        4 . . . . .\n        \xe2\x80\xa6\n\n    * horizontal range ``x`` goes from ``0`` to ``m-1``.\n    * vertical range ``y`` goes from ``0`` to ``n-1``.\n    * top-left position is ``(0, 0)``.\n    * top-right position is ``(0, m-1)``.\n    * bottom-left position is ``(n-1, 0)``.\n    * bottom-right position is ``(n-1, m-1)``.\n    """"""\n\n    def __init__(self, length, height):\n        """""" Initialize board dimensions. """"""\n        self.length = length\n        self.height = height\n\n        # Number of squares in the board.\n        self.size = self.length * self.height\n\n        # Ordered list of linear indexes of all squares.\n        self.indexes = range(self.size)\n\n        # Call reset() to initialize internal states.\n        self.reset()\n\n    def __repr__(self):\n        """""" Display all relevant object internals. """"""\n        return \'<{}: length={}, height={}, size={}, pieces={}>\'.format(\n            self.__class__.__name__,\n            self.length, self.height, self.size, self.pieces)\n\n    def __str__(self):\n        """""" Render the board with pieces in Unicode-art. """"""\n        lines = []\n        # Draw top line.\n        lines.append(((\'\xe2\x94\xac\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\' * self.length) + \'\xe2\x94\x90\').replace(\'\xe2\x94\xac\', \'\xe2\x94\x8c\', 1))\n        # Draw each line.\n        for y in range(self.height):\n            # Draw line with the pieces.\n            line = \'\'\n            for x in range(self.length):\n                piece = self.get(x, y)\n                line += \'\xe2\x94\x82 {} \'.format(piece.symbol if piece else \' \')\n            lines.append(line + \'\xe2\x94\x82\')\n            # Draw line separator but the last one.\n            if y < (self.height - 1):\n                lines.append(\n                    ((\'\xe2\x94\xbc\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\' * self.length) + \'\xe2\x94\xa4\').replace(\'\xe2\x94\xbc\', \'\xe2\x94\x9c\', 1))\n        # Draw bottom line.\n        lines.append(((\'\xe2\x94\xb4\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\' * self.length) + \'\xe2\x94\x98\').replace(\'\xe2\x94\xb4\', \'\xe2\x94\x94\', 1))\n        return \'\\n\'.join(lines)\n\n    def reset(self):\n        """""" Empty board, remove all pieces and reset internal states. """"""\n        # Store positionned pieces on the board.\n        self.pieces = set()\n\n        # Squares on the board already occupied by a piece.\n        self.occupancy = self.new_vector()\n\n        # Territory susceptible to attacke, i.e. squares reachable by at least\n        # a piece.\n        self.exposed_territory = self.new_vector()\n\n    @property\n    def positions(self):\n        """""" Generator producing all 2D positions of all squares. """"""\n        for y in range(self.height):\n            for x in range(self.length):\n                yield x, y\n\n    def new_vector(self):\n        """""" Returns a list of boolean flags of squares indexed linearly.\n\n        All states are initialized to :keyword:`False`.\n        """"""\n        return [False] * self.size\n\n    def validate_index(self, index):\n        """""" Check that a linear index of a square is within board\'s bounds. """"""\n        if index < 0 or index >= self.size:\n            raise ForbiddenIndex(""Linear index {} not in {}x{} board."".format(\n                index, self.length, self.height))\n\n    def validate_coordinates(self, x, y):\n        """""" Check if the piece lie within the board. """"""\n        if not(0 <= x < self.length and 0 <= y < self.height):\n            raise ForbiddenCoordinates(\n                ""x={}, y={} outside of {}x{} board."".format(\n                    x, y, self.length, self.height))\n\n    def index_to_coordinates(self, index):\n        """""" Return a set of 2D ``(x, y)`` coordinates from a linear index. """"""\n        self.validate_index(index)\n        x = int(index % self.length)\n        y = int((index - x) / self.length)\n        return x, y\n\n    def coordinates_to_index(self, x, y, x_shift=0, y_shift=0):\n        """""" Return a linear index from a set of 2D coordinates.\n\n        Optionnal vertical and horizontal shifts might be applied.\n        """"""\n        target_x = x + x_shift\n        target_y = y + y_shift\n        self.validate_coordinates(target_x, target_y)\n        index = (target_y * self.length) + target_x\n        return index\n\n    def add(self, piece_uid, index):\n        """""" Add a piece to the board at the provided linear position. """"""\n        # Square already occupied by another piece.\n        if self.occupancy[index]:\n            raise OccupiedPosition\n\n        # Square reachable by another piece.\n        if self.exposed_territory[index]:\n            raise VulnerablePosition\n\n        # Create a new instance of the piece.\n        klass = PIECE_CLASSES[piece_uid]\n        piece = klass(self, index)\n\n        # Check if a piece can attack another one from its position.\n        territory = piece.territory\n        for i in self.indexes:\n            if self.occupancy[i] and territory[i]:\n                raise AttackablePiece\n\n        # Mark the territory covered by the piece as exposed and secure its\n        # position on the board.\n        self.pieces.add(piece)\n        self.occupancy[index] = True\n        self.exposed_territory = list(\n            map(or_, self.exposed_territory, territory))\n\n    def get(self, x, y):\n        """""" Return piece placed at the provided coordinates. """"""\n        for piece in self.pieces:\n            if (piece.x, piece.y) == (x, y):\n                return piece\n'"
chessboard/cli.py,0,"b'# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2015-2017 Kevin Deldycke <kevin@deldycke.com>\n#                         and contributors.\n# All Rights Reserved.\n#\n# This program is Free Software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n\nfrom __future__ import absolute_import, division, print_function\n\nimport logging\nimport multiprocessing\nimport time\n\nimport click\nimport click_log\nfrom bprofile import BProfile\nfrom click.exceptions import BadParameter\n\nfrom chessboard.benchmark import run_scenario\n\nfrom . import PIECE_LABELS, Benchmark, SolverContext, __version__, logger\n\n\nclass PositiveInt(click.types.IntParamType):\n    """""" Custom type class for click to validate positive integers. """"""\n\n    def __init__(self, allow_zero=True):\n        """""" Validator can be customized to consider 0 as allowed or not. """"""\n        self.allow_zero = allow_zero\n\n    def convert(self, value, param, ctx):\n        """""" Reuse standard integer validator but add checks on sign and zero.\n        """"""\n        value = super(PositiveInt, self).convert(value, param, ctx)\n        if value < 0:\n            self.fail(\'%s is not positive\' % value, param, ctx)\n        if not self.allow_zero and not value:\n            self.fail(\'%s is not greater than 0\' % value, param, ctx)\n        return value\n\n\n# Shortcut to pre-configured validators.\nPOSITIVE_INT = PositiveInt(allow_zero=False)\nPOSITIVE_OR_ZERO_INT = PositiveInt(allow_zero=True)\n\n\nclass Solve(click.Command):\n    """""" Manage the solve command. """"""\n\n    def __init__(self, *args, **kwargs):\n        """""" Override default constructor to dynamiccaly add pieces options. """"""\n        for label in PIECE_LABELS:\n            kwargs[\'params\'].append(click.Option(\n                (\'--{}\'.format(label), ),\n                default=0,\n                type=POSITIVE_OR_ZERO_INT,\n                help=\'Number of {}s.\'.format(label)))\n        super(Solve, self).__init__(*args, **kwargs)\n\n\n@click.group(invoke_without_command=True)\n@click_log.init(logger)\n@click_log.simple_verbosity_option(\n    default=\'INFO\', metavar=\'LEVEL\',\n    help=\'Either CRITICAL, ERROR, WARNING, INFO or DEBUG. Defaults to INFO.\')\n@click.version_option(__version__)\n@click.pass_context\ndef cli(ctx):\n    """""" CLI to solve combinatoric chess puzzles. """"""\n    level = click_log.get_level()\n    try:\n        level_to_name = logging._levelToName\n    # Fallback to pre-Python 3.4 internals.\n    except AttributeError:\n        level_to_name = logging._levelNames\n    level_name = level_to_name.get(level, level)\n    logger.debug(\'Verbosity set to {}.\'.format(level_name))\n\n    # Print help screen and exit if no sub-commands provided.\n    if ctx.invoked_subcommand is None:\n        click.echo(ctx.get_help())\n        ctx.exit()\n\n\n@cli.command(cls=Solve, short_help=\'Solve a chess puzzle.\')\n@click.option(\n    \'-l\', \'--length\', required=True, type=POSITIVE_INT,\n    help=\'Length of the board.\')\n@click.option(\n    \'-h\', \'--height\', required=True, type=POSITIVE_INT,\n    help=\'Height of the board.\')\n@click.option(\n    \'-s\', \'--silent\', is_flag=True, default=False,\n    help=\'Do not render result boards in ASCII-art.\')\n@click.option(\n    \'-p\', \'--profile\', is_flag=True, default=False,\n    help=\'Produce a profiling graph.\')\n@click.pass_context\ndef solve(ctx, length, height, silent, profile, **pieces):\n    """""" Solve a puzzle constrained by board dimensions and pieces. """"""\n    # Check that at least one piece is provided.\n    if not sum(pieces.values()):\n        context = click.get_current_context()\n        raise BadParameter(\'No piece provided.\', ctx=context, param_hint=[\n            \'--{}\'.format(label) for label in PIECE_LABELS])\n\n    # Setup the optionnal profiler.\n    profiler = BProfile(\'solver-profile.png\', enabled=profile)\n\n    solver = SolverContext(length, height, **pieces)\n    logger.info(repr(solver))\n\n    logger.info(\'Searching positions...\')\n    with profiler:\n        start = time.time()\n        for result in solver.solve():\n            if not silent:\n                click.echo(u\'{}\'.format(result))\n        processing_time = time.time() - start\n\n    logger.info(\'{} results found in {:.2f} seconds.\'.format(\n        solver.result_counter, processing_time))\n\n    if profile:\n        logger.info(\'Execution profile saved at {}\'.format(\n            profiler.output_path))\n\n\n@cli.command(short_help=\'Benchmark the solver.\')\ndef benchmark():\n    """""" Run a benchmarking suite and measure time taken by the solver.\n\n    Each scenario is run in an isolated process, and results are appended to\n    CSV file.\n    """"""\n    # Use all cores but one on multi-core CPUs.\n    pool_size = multiprocessing.cpu_count() - 1\n    if pool_size < 1:\n        pool_size = 1\n\n    # Start a pool of workers. Only allow 1 task per child, to force flushing\n    # of solver\'s internal caches.\n    pool = multiprocessing.Pool(processes=pool_size, maxtasksperchild=1)\n    results = pool.imap_unordered(run_scenario, Benchmark.scenarii)\n    pool.close()\n    pool.join()\n\n    # Update CSV database with the new results.\n    benchmark = Benchmark()\n    benchmark.load_csv()\n    benchmark.add(results)\n    benchmark.save_csv()\n\n\n@cli.command(short_help=\'Plot solver performances.\')\ndef graph():\n    """""" Update all kind of performance graphs from the benchmark data.\n\n    All data come from CSV database.\n    """"""\n    benchmark = Benchmark()\n    benchmark.load_csv()\n    benchmark.nqueen_graph()\n'"
chessboard/pieces.py,0,"b'# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2015-2017 Kevin Deldycke <kevin@deldycke.com>\n#                         and contributors.\n# All Rights Reserved.\n#\n# This program is Free Software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n\n"""""" Definition of chess pieces and their behavioural properties. """"""\n\nfrom __future__ import (\n    absolute_import,\n    division,\n    print_function,\n    unicode_literals\n)\n\nfrom collections import OrderedDict\nfrom itertools import chain\nfrom operator import attrgetter\n\nfrom chessboard import ForbiddenCoordinates\n\nfrom . import PY2\n\nif PY2:\n    from itertools import izip_longest\nelse:\n    from itertools import zip_longest as izip_longest\n\n\nclass Piece(object):\n    """""" A generic piece.\n\n    x: horizontal position of the piece.\n    y: vertical position of the piece.\n    """"""\n    # Simple ASCII string identifying the kind of piece.\n    label = None\n\n    # Single unicode character used to represent the piece on a board.\n    symbol = None\n\n    # Integer uniquely identifying the type/kind of the piece. Used as a\n    # shortcut to the class itself. Also serves as a ranking weight of the\n    # territory coverage (see #5).\n    uid = None\n\n    # Cache territory occupied by pieces at a given position for a fixed board.\n    territory_cache = {}\n\n    def __init__(self, board, index):\n        """""" Place the piece on a board at the provided linear position. """"""\n        self.board = board\n        self.index = index\n        self._x, self._y = None, None\n\n    def __repr__(self):\n        """""" Display all relevant object internals. """"""\n        return (\n            \'<{}: uid={}; label={}, symbol={}; x={}, y={}; index={}>\'.format(\n                self.__class__.__name__,\n                self.uid, self.label, self.symbol,\n                self.x, self.y, self.index))\n\n    def compute_coordinates(self):\n        """""" Compute 2D coordinates of the piece. """"""\n        self._x, self._y = self.board.index_to_coordinates(self.index)\n\n    @property\n    def x(self):\n        """""" Return the piece\'s horizontal position.\n\n        Property is used here so we only compute position once when needed.\n        """"""\n        if self._x is None:\n            self.compute_coordinates()\n        return self._x\n\n    @property\n    def y(self):\n        """""" Return the piece\'s vertical position.\n\n        Property is used here so we only compute position once when needed.\n        """"""\n        if self._y is None:\n            self.compute_coordinates()\n        return self._y\n\n    @property\n    def bottom_distance(self):\n        """""" Number of squares separating the piece from board\'s bottom edge.\n        """"""\n        return self.board.height - 1 - self.y\n\n    @property\n    def right_distance(self):\n        """""" Number of squares separating the piece from board\'s right edge. """"""\n        return self.board.length - 1 - self.x\n\n    @property\n    def top_distance(self):\n        """""" Number of squares separating the piece from board\'s top edge. """"""\n        return self.y\n\n    @property\n    def left_distance(self):\n        """""" Number of squares separating the piece from board\'s left edge. """"""\n        return self.x\n\n    @property\n    def horizontals(self):\n        """""" All horizontal squares from the piece\'s point of view.\n\n        Returns a list of relative movements up to the board\'s bound.\n        """"""\n        horizontal_shifts = set(izip_longest(map(\n            lambda i: i - self.x, range(self.board.length)), [], fillvalue=0))\n        horizontal_shifts.discard((0, 0))\n        return horizontal_shifts\n\n    @property\n    def verticals(self):\n        """""" All vertical squares from the piece\'s point of view.\n\n        Returns a list of relative movements up to the board\'s bound.\n        """"""\n        vertical_shifts = set(izip_longest([], map(\n            lambda i: i - self.y, range(self.board.height)), fillvalue=0))\n        vertical_shifts.discard((0, 0))\n        return vertical_shifts\n\n    @property\n    def diagonals(self):\n        """""" All diagonal squares from the piece\'s point of view.\n\n        Returns a list of relative movements up to the board\'s bound.\n        """"""\n        left_top_shifts = map(lambda i: (-(i + 1), -(i + 1)), range(min(\n            self.left_distance, self.top_distance)))\n        left_bottom_shifts = map(lambda i: (-(i + 1), +(i + 1)), range(min(\n            self.left_distance, self.bottom_distance)))\n        right_top_shifts = map(lambda i: (+(i + 1), -(i + 1)), range(min(\n            self.right_distance, self.top_distance)))\n        right_bottom_shifts = map(lambda i: (+(i + 1), +(i + 1)), range(min(\n            self.right_distance, self.bottom_distance)))\n        return set(chain(\n            left_top_shifts, left_bottom_shifts,\n            right_top_shifts, right_bottom_shifts))\n\n    @property\n    def movements(self):\n        """""" Return list of relative movements allowed. """"""\n        raise NotImplementedError\n\n    @property\n    def territory(self):\n        """""" Return the cached territory occupied by the piece. """"""\n        cache_key = (\n            self.board.length, self.board.height, self.uid, self.index)\n        if cache_key not in self.territory_cache:\n            vector = self.compute_territory()\n            self.territory_cache[cache_key] = vector\n        else:\n            vector = self.territory_cache[cache_key]\n        return vector\n\n    def compute_territory(self):\n        """""" Compute territory reachable by the piece from its current position.\n\n        Returns a list of boolean flags of squares indexed linearly, for which\n        a True means the square is reachable.\n        """"""\n        # Initialize the square occupancy vector of the board.\n        vector = self.board.new_vector()\n\n        # Mark current position as reachable.\n        vector[self.index] = True\n\n        # List all places reacheable by the piece from its current position.\n        for x_shift, y_shift in self.movements:\n            # Mark side positions as reachable if in the limit of the board.\n            try:\n                reachable_index = self.board.coordinates_to_index(\n                    self.x, self.y, x_shift, y_shift)\n            except ForbiddenCoordinates:\n                continue\n            vector[reachable_index] = True\n\n        return vector\n\n\nclass King(Piece):\n    """""" King model. """"""\n\n    symbol = \'\xe2\x99\x9a\'\n\n    @property\n    def movements(self):\n        """""" King moves one square in any direction.\n\n        Don\'t mind out-of-bounds relative positions: forbidden ones will be\n        silently discarded within the ``Piece.territory()`` method above.\n        """"""\n        return set([\n            # Horizontal movements.\n            (+1, 0), (-1, 0),\n            # Vertical movements.\n            (0, +1), (0, -1),\n            # Diagonal movements.\n            (+1, +1), (-1, -1), (-1, +1), (+1, -1),\n        ])\n\n\nclass Queen(Piece):\n    """""" Queen model. """"""\n\n    symbol = \'\xe2\x99\x9b\'\n\n    @property\n    def movements(self):\n        """""" Queen moves unrestricted horizontally, vertically and diagonally.\n        """"""\n        return self.horizontals | self.verticals | self.diagonals\n\n\nclass Rook(Piece):\n    """""" Rook model. """"""\n\n    symbol = \'\xe2\x99\x9c\'\n\n    @property\n    def movements(self):\n        """""" Rook moves unrestricted horizontally and vertically. """"""\n        return self.horizontals | self.verticals\n\n\nclass Bishop(Piece):\n    """""" Bishop model. """"""\n\n    symbol = \'\xe2\x99\x9d\'\n\n    @property\n    def movements(self):\n        """""" Bishop moves unrestricted diagonally. """"""\n        return self.diagonals\n\n\nclass Knight(Piece):\n    """""" Knight model. """"""\n\n    symbol = \'\xe2\x99\x9e\'\n\n    @property\n    def movements(self):\n        """""" Knight moves in L shapes in all 8 directions.\n\n        Don\'t mind out-of-bounds relative positions: forbidden ones will be\n        silently discarded within the ``Piece.territory()`` method above.\n        """"""\n        return set([\n            # Top-right movements.\n            (+2, +1), (+1, +2),\n            # Top-left movements.\n            (-2, +1), (-1, +2),\n            # Bottom-right movements.\n            (+2, -1), (+1, -2),\n            # Bottom-left movements.\n            (-2, -1), (-1, -2),\n        ])\n\n\n# Initialize territory coverage ranking.\nQueen.uid, Rook.uid, Bishop.uid, King.uid, Knight.uid = range(5)\n\n# Keep pieces sorted by rank.\nPIECES = sorted([Queen, Rook, Bishop, King, Knight], key=attrgetter(\'uid\'))\n\n# Initialize piece labels.\nfor klass in PIECES:\n    klass.label = klass.__name__.lower()\n\n# Map labels to UIDs.\nPIECE_LABELS = OrderedDict([(klass.label, klass.uid) for klass in PIECES])\n\n# Map piece UIDs to their class.\nPIECE_CLASSES = OrderedDict([(klass.uid, klass) for klass in PIECES])\n'"
chessboard/solver.py,0,"b'# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2015-2017 Kevin Deldycke <kevin@deldycke.com>\n#                         and contributors.\n# All Rights Reserved.\n#\n# This program is Free Software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n\n"""""" Utilities to search for valid set of positions. """"""\n\nfrom __future__ import (\n    absolute_import,\n    division,\n    print_function,\n    unicode_literals\n)\n\nfrom itertools import chain\n\nfrom chessboard import (\n    PIECE_LABELS,\n    AttackablePiece,\n    Board,\n    OccupiedPosition,\n    VulnerablePosition\n)\n\n\nclass Permutations(object):\n    """""" Produce permutations of pieces iteratively. """"""\n\n    def __init__(self, pieces, range_size=None):\n        # Transform the description of pieces population into a linear vector\n        # sorted by UID. Piece symbols are represented by an integer whose\n        # weight indicate the priority in the permutation tree, so that pieces\n        # covering the widest area are tested first. See #5.\n        self.pieces = tuple(chain.from_iterable([\n            [symbol] * quantity\n            for symbol, quantity in sorted(pieces.items())]))\n\n        # Maximal depth of the tree.\n        self.depth = len(self.pieces)\n\n        # Range of permutations.\n        self.range_size = range_size if range_size else self.depth\n        # Because we\'re using bytearray to store permutations states, we can\'t\n        # keep track of pieces above the 255 position.\n        assert self.range_size < 256\n\n        # Keep track of our current progression in search space. This variable\n        # always holds the last permutation we returned.\n        self.indexes = None\n\n        # Compute the terminal iteration the generator may reach.\n        self.terminal_iteration = bytearray([self.range_size - 1] * self.depth)\n\n    def increment(self):\n        """""" Increment the last permutation we returned to the next. """"""\n        # Increment position from the deepest place of the tree first.\n        for index in reversed(range(self.depth)):\n            self.indexes[index] += 1\n            # We haven\'t reached the end of board, no need to adjust upper\n            # level.\n            if self.indexes[index] < self.range_size:\n                break\n            # We\'ve reached the end of board. Reset current level and increment\n            # the upper level.\n            self.indexes[index] = 0\n\n        # Now that we incremented our indexes, we need to deduplicate positions\n        # shering the same UIDs, by aligning piece\'s indexes to their parents.\n        # This works thanks to the sort performed on self.pieces\n        # initialization. See #7.\n        for i in range(self.depth - 1):\n            if (self.pieces[i] == self.pieces[i + 1]) and (\n                    self.indexes[i] > self.indexes[i + 1]):\n                self.indexes[i + 1] = self.indexes[i]\n\n    def __iter__(self):\n        """""" Return the generator itself, not its results. """"""\n        return self\n\n    def __next__(self):\n        """""" Return next valid permutation.\n\n        Raise iteration exception when we explored all permutations.\n        """"""\n        if self.indexes is None:\n            self.indexes = bytearray(self.depth)\n        elif self.indexes == self.terminal_iteration:\n            raise StopIteration\n        else:\n            self.increment()\n        return zip(self.pieces, self.indexes)\n\n    next = __next__\n\n    def skip_branch(self, level):\n        """""" Abandon the branch at the provided level and skip to the next.\n\n        When we call out to skip to the next branch of the search space, we\n        push sublevel pieces to the maximum positions of the board. So that the\n        next time the permutation iterator is called, it can produce the vector\n        state of the next adjacent branch. See #3.\n        """"""\n        for i in range(level + 1, self.depth):\n            self.indexes[i] = self.range_size - 1\n\n\nclass SolverContext(object):\n    """""" Initialize a chessboard context and search for all possible positions.\n\n    The search space is constrained by board dimensions and piece population.\n    """"""\n\n    def __init__(self, length, height, **pieces):\n        """""" Initialize board dimensions and piece population.""""""\n        self.length = length\n        self.height = height\n        assert isinstance(self.length, int)\n        assert isinstance(self.height, int)\n        assert self.length > 0\n        assert self.height > 0\n\n        # Store the number of pieces on the board by their UIDs.\n        self.pieces = {}\n        for label, quantity in pieces.items():\n            assert isinstance(quantity, int)\n            assert quantity >= 0\n            self.pieces[PIECE_LABELS[label]] = quantity\n        assert sum(self.pieces.values()) > 0\n\n        # Solver metadata.\n        self.result_counter = 0\n\n    def __repr__(self):\n        """""" Display all relevant object internals. """"""\n        uids_to_labels = {uid: label for label, uid in PIECE_LABELS.items()}\n        return \'<SolverContext: length={}, height={}, pieces={}>\'.format(\n            self.length, self.height, {\n                uids_to_labels[uid]: quantity\n                for uid, quantity in self.pieces.items()})\n\n    @property\n    def vector_size(self):\n        return self.length * self.height\n\n    def solve(self):\n        """""" Solve all possible positions of pieces within the context.\n\n        Depth-first, tree-traversal of the product space.\n        """"""\n        # Create a new, empty board.\n        board = Board(self.length, self.height)\n\n        # Iterate through all combinations of positions.\n        permutations = Permutations(self.pieces, self.vector_size)\n        for positions in permutations:\n\n            # Reuse board but flush all pieces.\n            board.reset()\n\n            for level, (piece_uid, linear_position) in enumerate(positions):\n                # Try to place the piece on the board.\n                try:\n                    board.add(piece_uid, linear_position)\n                # If one of the piece can\'t be added, throw the whole set, skip\n                # the rotten branch and proceed to the next.\n                except (OccupiedPosition, VulnerablePosition, AttackablePiece):\n                    permutations.skip_branch(level)\n                    break\n\n            else:\n                # All pieces fits, save solution and proceeed to the next\n                # permutation.\n                self.result_counter += 1\n                yield board\n'"
docs/conf.py,0,"b'# -*- coding: utf-8 -*-\n\nfrom __future__ import (\n    absolute_import,\n    division,\n    print_function,\n    unicode_literals\n)\n\nimport os\nimport subprocess\nimport sys\nimport time\n\n# Fetch general information about the project.\n# Source: https://github.com/jaraco/skeleton/blob/skeleton/docs/conf.py\nroot = os.path.join(os.path.dirname(__file__), \'..\')\nsetup_script = os.path.join(root, \'setup.py\')\nfields = [\'--name\', \'--version\', \'--url\', \'--author\']\ndist_info_cmd = [sys.executable, setup_script] + fields\noutput_bytes = subprocess.check_output(dist_info_cmd, cwd=root)\nproject_id, version, url, author = output_bytes.decode(\n    \'utf-8\').strip().split(\'\\n\')\n\n# Title-case each word of the project ID.\nproject = \' \'.join([word.title() for word in project_id.split(\'-\')])\nhtmlhelp_basename = project_id\n\nrelease = version\n\n# Addons.\nextensions = [\n    \'sphinx.ext.autodoc\',\n    \'sphinx.ext.todo\',\n    \'sphinx.ext.viewcode\']\n\nmaster_doc = \'index\'\n\n# We use our own copyright template instead of the default as the latter strip\n# HTML content.\nhtml_show_copyright = False\ncopyright = (\n    ""2015-{}, <a href=\'https://kevin.deldycke.com\'>{}</a> and <a href=\'{}""\n    ""/graphs/contributors\'>contributors</a>"").format(\n        time.strftime(\'%Y\'), author, url)\n\nexclude_patterns = [\'_build\', \'Thumbs.db\', \'.DS_Store\']\n\nnitpicky = True\n\n# We need a recent sphinx because of the last update format.\nneeds_sphinx = \'1.4\'\nhtml_last_updated_fmt = \'YYYY-MM-dd\'\ntemplates_path = [\'templates\']\n\n# Keep the same ordering as in original source code.\nautodoc_member_order = \'bysource\'\n\n# If true, `todo` and `todoList` produce output, else they produce nothing.\ntodo_include_todos = True\n\n# Use RTD theme both locally and online. Source: https://github.com/snide\n# /sphinx_rtd_theme#using-this-theme-locally-then-building-on-read-the-docs\non_rtd = os.environ.get(\'READTHEDOCS\', None) == \'True\'\nif not on_rtd:\n    import sphinx_rtd_theme\n    html_theme = \'sphinx_rtd_theme\'\n    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\n'"
chessboard/tests/__init__.py,0,"b'# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2015-2017 Kevin Deldycke <kevin@deldycke.com>\n#                         and contributors.\n# All Rights Reserved.\n#\n# This program is Free Software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n'"
chessboard/tests/test_board.py,0,"b'# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2015-2017 Kevin Deldycke <kevin@deldycke.com>\n#                         and contributors.\n# All Rights Reserved.\n#\n# This program is Free Software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n\nfrom __future__ import (\n    absolute_import,\n    division,\n    print_function,\n    unicode_literals\n)\n\nimport unittest\n\nimport pytest\nfrom chessboard import Board, ForbiddenCoordinates, ForbiddenIndex\n\n\nclass TestBoard(unittest.TestCase):\n\n    def test_all_positions(self):\n        assert list(Board(3, 3).positions) == [\n            (0, 0), (1, 0), (2, 0),\n            (0, 1), (1, 1), (2, 1),\n            (0, 2), (1, 2), (2, 2)]\n\n    def test_coord_to_index(self):\n        assert Board(3, 3).coordinates_to_index(0, 0) == 0\n        assert Board(3, 3).coordinates_to_index(1, 1) == 4\n        assert Board(3, 3).coordinates_to_index(2, 2) == 8\n\n    def test_translate_error(self):\n        with pytest.raises(ForbiddenCoordinates):\n            Board(3, 3).coordinates_to_index(-1, 0)\n        with pytest.raises(ForbiddenCoordinates):\n            Board(3, 3).coordinates_to_index(0, -1)\n        with pytest.raises(ForbiddenCoordinates):\n            Board(3, 3).coordinates_to_index(0, 3)\n        with pytest.raises(ForbiddenCoordinates):\n            Board(3, 3).coordinates_to_index(3, 0)\n\n    def test_index_to_coord(self):\n        assert Board(3, 3).index_to_coordinates(0) == (0, 0)\n        assert Board(3, 3).index_to_coordinates(1) == (1, 0)\n        assert Board(3, 3).index_to_coordinates(2) == (2, 0)\n        assert Board(3, 3).index_to_coordinates(3) == (0, 1)\n        assert Board(3, 3).index_to_coordinates(4) == (1, 1)\n        assert Board(3, 3).index_to_coordinates(5) == (2, 1)\n        assert Board(3, 3).index_to_coordinates(6) == (0, 2)\n        assert Board(3, 3).index_to_coordinates(7) == (1, 2)\n        assert Board(3, 3).index_to_coordinates(8) == (2, 2)\n\n    def test_wide_index_to_coord(self):\n        assert Board(1, 4).index_to_coordinates(0) == (0, 0)\n        assert Board(1, 4).index_to_coordinates(1) == (0, 1)\n        assert Board(1, 4).index_to_coordinates(2) == (0, 2)\n        assert Board(1, 4).index_to_coordinates(3) == (0, 3)\n\n    def test_long_index_to_coord(self):\n        assert Board(4, 1).index_to_coordinates(0) == (0, 0)\n        assert Board(4, 1).index_to_coordinates(1) == (1, 0)\n        assert Board(4, 1).index_to_coordinates(2) == (2, 0)\n        assert Board(4, 1).index_to_coordinates(3) == (3, 0)\n\n    def test_index_to_coord_error(self):\n        with pytest.raises(ForbiddenIndex):\n            Board(3, 3).index_to_coordinates(-1)\n        with pytest.raises(ForbiddenIndex):\n            Board(3, 3).index_to_coordinates(9)\n'"
chessboard/tests/test_pieces.py,0,"b'# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2015-2017 Kevin Deldycke <kevin@deldycke.com>\n#                         and contributors.\n# All Rights Reserved.\n#\n# This program is Free Software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n\nfrom __future__ import (\n    absolute_import,\n    division,\n    print_function,\n    unicode_literals\n)\n\nimport unittest\n\nfrom chessboard import Bishop, Board, King, Knight, Queen, Rook\n\n\nclass TestKing(unittest.TestCase):\n\n    def test_territory(self):\n        """""" Test computation of territory at each positions of a 3x3 board. """"""\n        board = Board(3, 3)\n        c2i = board.coordinates_to_index\n        assert King(board, c2i(1, 1)).territory == [\n            True, True, True,\n            True, True, True,\n            True, True, True,\n        ]\n        assert King(board, c2i(0, 0)).territory == [\n            True, True, False,\n            True, True, False,\n            False, False, False,\n        ]\n        assert King(board, c2i(1, 0)).territory == [\n            True, True, True,\n            True, True, True,\n            False, False, False,\n        ]\n        assert King(board, c2i(2, 0)).territory == [\n            False, True, True,\n            False, True, True,\n            False, False, False,\n        ]\n        assert King(board, c2i(2, 1)).territory == [\n            False, True, True,\n            False, True, True,\n            False, True, True,\n        ]\n        assert King(board, c2i(2, 2)).territory == [\n            False, False, False,\n            False, True, True,\n            False, True, True,\n        ]\n        assert King(board, c2i(1, 2)).territory == [\n            False, False, False,\n            True, True, True,\n            True, True, True,\n        ]\n        assert King(board, c2i(0, 2)).territory == [\n            False, False, False,\n            True, True, False,\n            True, True, False,\n        ]\n        assert King(board, c2i(0, 1)).territory == [\n            True, True, False,\n            True, True, False,\n            True, True, False,\n        ]\n\n\nclass TestQueen(unittest.TestCase):\n\n    def test_territory(self):\n        """""" Test computation of territory at each positions of a 3x3 board. """"""\n        board = Board(3, 3)\n        c2i = board.coordinates_to_index\n        assert Queen(board, c2i(1, 1)).territory == [\n            True, True, True,\n            True, True, True,\n            True, True, True,\n        ]\n        assert Queen(board, c2i(0, 0)).territory == [\n            True, True, True,\n            True, True, False,\n            True, False, True,\n        ]\n        assert Queen(board, c2i(1, 0)).territory == [\n            True, True, True,\n            True, True, True,\n            False, True, False,\n        ]\n        assert Queen(board, c2i(2, 0)).territory == [\n            True, True, True,\n            False, True, True,\n            True, False, True,\n        ]\n        assert Queen(board, c2i(2, 1)).territory == [\n            False, True, True,\n            True, True, True,\n            False, True, True,\n        ]\n        assert Queen(board, c2i(2, 2)).territory == [\n            True, False, True,\n            False, True, True,\n            True, True, True,\n        ]\n        assert Queen(board, c2i(1, 2)).territory == [\n            False, True, False,\n            True, True, True,\n            True, True, True,\n        ]\n        assert Queen(board, c2i(0, 2)).territory == [\n            True, False, True,\n            True, True, False,\n            True, True, True,\n        ]\n        assert Queen(board, c2i(0, 1)).territory == [\n            True, True, False,\n            True, True, True,\n            True, True, False,\n        ]\n\n\nclass TestRook(unittest.TestCase):\n\n    def test_territory(self):\n        """""" Test computation of territory at each positions of a 3x3 board. """"""\n        board = Board(3, 3)\n        c2i = board.coordinates_to_index\n        assert Rook(board, c2i(1, 1)).territory == [\n            False, True, False,\n            True, True, True,\n            False, True, False,\n        ]\n        assert Rook(board, c2i(0, 0)).territory == [\n            True, True, True,\n            True, False, False,\n            True, False, False,\n        ]\n        assert Rook(board, c2i(1, 0)).territory == [\n            True, True, True,\n            False, True, False,\n            False, True, False,\n        ]\n        assert Rook(board, c2i(2, 0)).territory == [\n            True, True, True,\n            False, False, True,\n            False, False, True,\n        ]\n        assert Rook(board, c2i(2, 1)).territory == [\n            False, False, True,\n            True, True, True,\n            False, False, True,\n        ]\n        assert Rook(board, c2i(2, 2)).territory == [\n            False, False, True,\n            False, False, True,\n            True, True, True,\n        ]\n        assert Rook(board, c2i(1, 2)).territory == [\n            False, True, False,\n            False, True, False,\n            True, True, True,\n        ]\n        assert Rook(board, c2i(0, 2)).territory == [\n            True, False, False,\n            True, False, False,\n            True, True, True,\n        ]\n        assert Rook(board, c2i(0, 1)).territory == [\n            True, False, False,\n            True, True, True,\n            True, False, False,\n        ]\n\n\nclass TestBishop(unittest.TestCase):\n\n    def test_territory(self):\n        """""" Test computation of territory at each positions of a 3x3 board. """"""\n        board = Board(3, 3)\n        c2i = board.coordinates_to_index\n        assert Bishop(board, c2i(1, 1)).territory == [\n            True, False, True,\n            False, True, False,\n            True, False, True,\n        ]\n        assert Bishop(board, c2i(0, 0)).territory == [\n            True, False, False,\n            False, True, False,\n            False, False, True,\n        ]\n        assert Bishop(board, c2i(1, 0)).territory == [\n            False, True, False,\n            True, False, True,\n            False, False, False,\n        ]\n        assert Bishop(board, c2i(2, 0)).territory == [\n            False, False, True,\n            False, True, False,\n            True, False, False,\n        ]\n        assert Bishop(board, c2i(2, 1)).territory == [\n            False, True, False,\n            False, False, True,\n            False, True, False,\n        ]\n        assert Bishop(board, c2i(2, 2)).territory == [\n            True, False, False,\n            False, True, False,\n            False, False, True,\n        ]\n        assert Bishop(board, c2i(1, 2)).territory == [\n            False, False, False,\n            True, False, True,\n            False, True, False,\n        ]\n        assert Bishop(board, c2i(0, 2)).territory == [\n            False, False, True,\n            False, True, False,\n            True, False, False,\n        ]\n        assert Bishop(board, c2i(0, 1)).territory == [\n            False, True, False,\n            True, False, False,\n            False, True, False,\n        ]\n\n\nclass TestKnight(unittest.TestCase):\n\n    def test_territory(self):\n        """""" Test computation of territory at each positions of a 3x3 board. """"""\n        board = Board(3, 3)\n        c2i = board.coordinates_to_index\n        assert Knight(board, c2i(1, 1)).territory == [\n            False, False, False,\n            False, True, False,\n            False, False, False,\n        ]\n        assert Knight(board, c2i(0, 0)).territory == [\n            True, False, False,\n            False, False, True,\n            False, True, False,\n        ]\n        assert Knight(board, c2i(1, 0)).territory == [\n            False, True, False,\n            False, False, False,\n            True, False, True,\n        ]\n        assert Knight(board, c2i(2, 0)).territory == [\n            False, False, True,\n            True, False, False,\n            False, True, False,\n        ]\n        assert Knight(board, c2i(2, 1)).territory == [\n            True, False, False,\n            False, False, True,\n            True, False, False,\n        ]\n        assert Knight(board, c2i(2, 2)).territory == [\n            False, True, False,\n            True, False, False,\n            False, False, True,\n        ]\n        assert Knight(board, c2i(1, 2)).territory == [\n            True, False, True,\n            False, False, False,\n            False, True, False,\n        ]\n        assert Knight(board, c2i(0, 2)).territory == [\n            False, True, False,\n            False, False, True,\n            True, False, False,\n        ]\n        assert Knight(board, c2i(0, 1)).territory == [\n            False, False, True,\n            True, False, False,\n            False, False, True,\n        ]\n'"
chessboard/tests/test_solver.py,0,"b'# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2015-2017 Kevin Deldycke <kevin@deldycke.com>\n#                         and contributors.\n# All Rights Reserved.\n#\n# This program is Free Software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n\nfrom __future__ import (\n    absolute_import,\n    division,\n    print_function,\n    unicode_literals\n)\n\nimport unittest\nfrom itertools import product, repeat\nfrom operator import itemgetter\n\nfrom chessboard import King, Permutations, Queen, SolverContext\n\nfrom .. import PY2\n\nif PY2:\n    from itertools import izip\nelse:\n    izip = zip\n\n\nclass TestPermutations(unittest.TestCase):\n\n    def test_cartesian_product(self):\n        assert set(map(frozenset, Permutations({\'a\': 1, \'b\': 1, \'c\': 1}))) == \\\n            set([frozenset(zip(*x)) for x in izip(\n                repeat(list(\'abc\')), product([0, 1, 2], repeat=3))])\n\n    def test_generator(self):\n        gen = Permutations({\'a\': 1}, 3)\n        assert [list(perm) for perm in gen] == \\\n            [[(\'a\', 0)], [(\'a\', 1)], [(\'a\', 2)]]\n\n    def test_skip_branch(self):\n        gen = Permutations({\'a\': 1, \'b\': 1, \'c\': 2}, 5)\n\n        results = []\n        for perm in gen:\n            perm = list(perm)\n            for level, (_, position) in enumerate(perm):\n                try:\n                    if level == 1 and position == 2:\n                        raise ValueError\n                except ValueError:\n                    gen.skip_branch(level)\n                    break\n            else:\n                results.append(perm)\n\n        assert results == [\n            [(\'a\', 0), (\'b\', 0), (\'c\', 0), (\'c\', 0)],\n            [(\'a\', 0), (\'b\', 0), (\'c\', 0), (\'c\', 1)],\n            [(\'a\', 0), (\'b\', 0), (\'c\', 0), (\'c\', 2)],\n            [(\'a\', 0), (\'b\', 0), (\'c\', 0), (\'c\', 3)],\n            [(\'a\', 0), (\'b\', 0), (\'c\', 0), (\'c\', 4)],\n            [(\'a\', 0), (\'b\', 0), (\'c\', 1), (\'c\', 1)],\n            [(\'a\', 0), (\'b\', 0), (\'c\', 1), (\'c\', 2)],\n            [(\'a\', 0), (\'b\', 0), (\'c\', 1), (\'c\', 3)],\n            [(\'a\', 0), (\'b\', 0), (\'c\', 1), (\'c\', 4)],\n            [(\'a\', 0), (\'b\', 0), (\'c\', 2), (\'c\', 2)],\n            [(\'a\', 0), (\'b\', 0), (\'c\', 2), (\'c\', 3)],\n            [(\'a\', 0), (\'b\', 0), (\'c\', 2), (\'c\', 4)],\n            [(\'a\', 0), (\'b\', 0), (\'c\', 3), (\'c\', 3)],\n            [(\'a\', 0), (\'b\', 0), (\'c\', 3), (\'c\', 4)],\n            [(\'a\', 0), (\'b\', 0), (\'c\', 4), (\'c\', 4)],\n            [(\'a\', 0), (\'b\', 1), (\'c\', 0), (\'c\', 0)],\n            [(\'a\', 0), (\'b\', 1), (\'c\', 0), (\'c\', 1)],\n            [(\'a\', 0), (\'b\', 1), (\'c\', 0), (\'c\', 2)],\n            [(\'a\', 0), (\'b\', 1), (\'c\', 0), (\'c\', 3)],\n            [(\'a\', 0), (\'b\', 1), (\'c\', 0), (\'c\', 4)],\n            [(\'a\', 0), (\'b\', 1), (\'c\', 1), (\'c\', 1)],\n            [(\'a\', 0), (\'b\', 1), (\'c\', 1), (\'c\', 2)],\n            [(\'a\', 0), (\'b\', 1), (\'c\', 1), (\'c\', 3)],\n            [(\'a\', 0), (\'b\', 1), (\'c\', 1), (\'c\', 4)],\n            [(\'a\', 0), (\'b\', 1), (\'c\', 2), (\'c\', 2)],\n            [(\'a\', 0), (\'b\', 1), (\'c\', 2), (\'c\', 3)],\n            [(\'a\', 0), (\'b\', 1), (\'c\', 2), (\'c\', 4)],\n            [(\'a\', 0), (\'b\', 1), (\'c\', 3), (\'c\', 3)],\n            [(\'a\', 0), (\'b\', 1), (\'c\', 3), (\'c\', 4)],\n            [(\'a\', 0), (\'b\', 1), (\'c\', 4), (\'c\', 4)],\n            [(\'a\', 0), (\'b\', 3), (\'c\', 0), (\'c\', 0)],\n            [(\'a\', 0), (\'b\', 3), (\'c\', 0), (\'c\', 1)],\n            [(\'a\', 0), (\'b\', 3), (\'c\', 0), (\'c\', 2)],\n            [(\'a\', 0), (\'b\', 3), (\'c\', 0), (\'c\', 3)],\n            [(\'a\', 0), (\'b\', 3), (\'c\', 0), (\'c\', 4)],\n            [(\'a\', 0), (\'b\', 3), (\'c\', 1), (\'c\', 1)],\n            [(\'a\', 0), (\'b\', 3), (\'c\', 1), (\'c\', 2)],\n            [(\'a\', 0), (\'b\', 3), (\'c\', 1), (\'c\', 3)],\n            [(\'a\', 0), (\'b\', 3), (\'c\', 1), (\'c\', 4)],\n            [(\'a\', 0), (\'b\', 3), (\'c\', 2), (\'c\', 2)],\n            [(\'a\', 0), (\'b\', 3), (\'c\', 2), (\'c\', 3)],\n            [(\'a\', 0), (\'b\', 3), (\'c\', 2), (\'c\', 4)],\n            [(\'a\', 0), (\'b\', 3), (\'c\', 3), (\'c\', 3)],\n            [(\'a\', 0), (\'b\', 3), (\'c\', 3), (\'c\', 4)],\n            [(\'a\', 0), (\'b\', 3), (\'c\', 4), (\'c\', 4)],\n            [(\'a\', 0), (\'b\', 4), (\'c\', 0), (\'c\', 0)],\n            [(\'a\', 0), (\'b\', 4), (\'c\', 0), (\'c\', 1)],\n            [(\'a\', 0), (\'b\', 4), (\'c\', 0), (\'c\', 2)],\n            [(\'a\', 0), (\'b\', 4), (\'c\', 0), (\'c\', 3)],\n            [(\'a\', 0), (\'b\', 4), (\'c\', 0), (\'c\', 4)],\n            [(\'a\', 0), (\'b\', 4), (\'c\', 1), (\'c\', 1)],\n            [(\'a\', 0), (\'b\', 4), (\'c\', 1), (\'c\', 2)],\n            [(\'a\', 0), (\'b\', 4), (\'c\', 1), (\'c\', 3)],\n            [(\'a\', 0), (\'b\', 4), (\'c\', 1), (\'c\', 4)],\n            [(\'a\', 0), (\'b\', 4), (\'c\', 2), (\'c\', 2)],\n            [(\'a\', 0), (\'b\', 4), (\'c\', 2), (\'c\', 3)],\n            [(\'a\', 0), (\'b\', 4), (\'c\', 2), (\'c\', 4)],\n            [(\'a\', 0), (\'b\', 4), (\'c\', 3), (\'c\', 3)],\n            [(\'a\', 0), (\'b\', 4), (\'c\', 3), (\'c\', 4)],\n            [(\'a\', 0), (\'b\', 4), (\'c\', 4), (\'c\', 4)],\n            [(\'a\', 1), (\'b\', 0), (\'c\', 0), (\'c\', 0)],\n            [(\'a\', 1), (\'b\', 0), (\'c\', 0), (\'c\', 1)],\n            [(\'a\', 1), (\'b\', 0), (\'c\', 0), (\'c\', 2)],\n            [(\'a\', 1), (\'b\', 0), (\'c\', 0), (\'c\', 3)],\n            [(\'a\', 1), (\'b\', 0), (\'c\', 0), (\'c\', 4)],\n            [(\'a\', 1), (\'b\', 0), (\'c\', 1), (\'c\', 1)],\n            [(\'a\', 1), (\'b\', 0), (\'c\', 1), (\'c\', 2)],\n            [(\'a\', 1), (\'b\', 0), (\'c\', 1), (\'c\', 3)],\n            [(\'a\', 1), (\'b\', 0), (\'c\', 1), (\'c\', 4)],\n            [(\'a\', 1), (\'b\', 0), (\'c\', 2), (\'c\', 2)],\n            [(\'a\', 1), (\'b\', 0), (\'c\', 2), (\'c\', 3)],\n            [(\'a\', 1), (\'b\', 0), (\'c\', 2), (\'c\', 4)],\n            [(\'a\', 1), (\'b\', 0), (\'c\', 3), (\'c\', 3)],\n            [(\'a\', 1), (\'b\', 0), (\'c\', 3), (\'c\', 4)],\n            [(\'a\', 1), (\'b\', 0), (\'c\', 4), (\'c\', 4)],\n            [(\'a\', 1), (\'b\', 1), (\'c\', 0), (\'c\', 0)],\n            [(\'a\', 1), (\'b\', 1), (\'c\', 0), (\'c\', 1)],\n            [(\'a\', 1), (\'b\', 1), (\'c\', 0), (\'c\', 2)],\n            [(\'a\', 1), (\'b\', 1), (\'c\', 0), (\'c\', 3)],\n            [(\'a\', 1), (\'b\', 1), (\'c\', 0), (\'c\', 4)],\n            [(\'a\', 1), (\'b\', 1), (\'c\', 1), (\'c\', 1)],\n            [(\'a\', 1), (\'b\', 1), (\'c\', 1), (\'c\', 2)],\n            [(\'a\', 1), (\'b\', 1), (\'c\', 1), (\'c\', 3)],\n            [(\'a\', 1), (\'b\', 1), (\'c\', 1), (\'c\', 4)],\n            [(\'a\', 1), (\'b\', 1), (\'c\', 2), (\'c\', 2)],\n            [(\'a\', 1), (\'b\', 1), (\'c\', 2), (\'c\', 3)],\n            [(\'a\', 1), (\'b\', 1), (\'c\', 2), (\'c\', 4)],\n            [(\'a\', 1), (\'b\', 1), (\'c\', 3), (\'c\', 3)],\n            [(\'a\', 1), (\'b\', 1), (\'c\', 3), (\'c\', 4)],\n            [(\'a\', 1), (\'b\', 1), (\'c\', 4), (\'c\', 4)],\n            [(\'a\', 1), (\'b\', 3), (\'c\', 0), (\'c\', 0)],\n            [(\'a\', 1), (\'b\', 3), (\'c\', 0), (\'c\', 1)],\n            [(\'a\', 1), (\'b\', 3), (\'c\', 0), (\'c\', 2)],\n            [(\'a\', 1), (\'b\', 3), (\'c\', 0), (\'c\', 3)],\n            [(\'a\', 1), (\'b\', 3), (\'c\', 0), (\'c\', 4)],\n            [(\'a\', 1), (\'b\', 3), (\'c\', 1), (\'c\', 1)],\n            [(\'a\', 1), (\'b\', 3), (\'c\', 1), (\'c\', 2)],\n            [(\'a\', 1), (\'b\', 3), (\'c\', 1), (\'c\', 3)],\n            [(\'a\', 1), (\'b\', 3), (\'c\', 1), (\'c\', 4)],\n            [(\'a\', 1), (\'b\', 3), (\'c\', 2), (\'c\', 2)],\n            [(\'a\', 1), (\'b\', 3), (\'c\', 2), (\'c\', 3)],\n            [(\'a\', 1), (\'b\', 3), (\'c\', 2), (\'c\', 4)],\n            [(\'a\', 1), (\'b\', 3), (\'c\', 3), (\'c\', 3)],\n            [(\'a\', 1), (\'b\', 3), (\'c\', 3), (\'c\', 4)],\n            [(\'a\', 1), (\'b\', 3), (\'c\', 4), (\'c\', 4)],\n            [(\'a\', 1), (\'b\', 4), (\'c\', 0), (\'c\', 0)],\n            [(\'a\', 1), (\'b\', 4), (\'c\', 0), (\'c\', 1)],\n            [(\'a\', 1), (\'b\', 4), (\'c\', 0), (\'c\', 2)],\n            [(\'a\', 1), (\'b\', 4), (\'c\', 0), (\'c\', 3)],\n            [(\'a\', 1), (\'b\', 4), (\'c\', 0), (\'c\', 4)],\n            [(\'a\', 1), (\'b\', 4), (\'c\', 1), (\'c\', 1)],\n            [(\'a\', 1), (\'b\', 4), (\'c\', 1), (\'c\', 2)],\n            [(\'a\', 1), (\'b\', 4), (\'c\', 1), (\'c\', 3)],\n            [(\'a\', 1), (\'b\', 4), (\'c\', 1), (\'c\', 4)],\n            [(\'a\', 1), (\'b\', 4), (\'c\', 2), (\'c\', 2)],\n            [(\'a\', 1), (\'b\', 4), (\'c\', 2), (\'c\', 3)],\n            [(\'a\', 1), (\'b\', 4), (\'c\', 2), (\'c\', 4)],\n            [(\'a\', 1), (\'b\', 4), (\'c\', 3), (\'c\', 3)],\n            [(\'a\', 1), (\'b\', 4), (\'c\', 3), (\'c\', 4)],\n            [(\'a\', 1), (\'b\', 4), (\'c\', 4), (\'c\', 4)],\n            [(\'a\', 2), (\'b\', 0), (\'c\', 0), (\'c\', 0)],\n            [(\'a\', 2), (\'b\', 0), (\'c\', 0), (\'c\', 1)],\n            [(\'a\', 2), (\'b\', 0), (\'c\', 0), (\'c\', 2)],\n            [(\'a\', 2), (\'b\', 0), (\'c\', 0), (\'c\', 3)],\n            [(\'a\', 2), (\'b\', 0), (\'c\', 0), (\'c\', 4)],\n            [(\'a\', 2), (\'b\', 0), (\'c\', 1), (\'c\', 1)],\n            [(\'a\', 2), (\'b\', 0), (\'c\', 1), (\'c\', 2)],\n            [(\'a\', 2), (\'b\', 0), (\'c\', 1), (\'c\', 3)],\n            [(\'a\', 2), (\'b\', 0), (\'c\', 1), (\'c\', 4)],\n            [(\'a\', 2), (\'b\', 0), (\'c\', 2), (\'c\', 2)],\n            [(\'a\', 2), (\'b\', 0), (\'c\', 2), (\'c\', 3)],\n            [(\'a\', 2), (\'b\', 0), (\'c\', 2), (\'c\', 4)],\n            [(\'a\', 2), (\'b\', 0), (\'c\', 3), (\'c\', 3)],\n            [(\'a\', 2), (\'b\', 0), (\'c\', 3), (\'c\', 4)],\n            [(\'a\', 2), (\'b\', 0), (\'c\', 4), (\'c\', 4)],\n            [(\'a\', 2), (\'b\', 1), (\'c\', 0), (\'c\', 0)],\n            [(\'a\', 2), (\'b\', 1), (\'c\', 0), (\'c\', 1)],\n            [(\'a\', 2), (\'b\', 1), (\'c\', 0), (\'c\', 2)],\n            [(\'a\', 2), (\'b\', 1), (\'c\', 0), (\'c\', 3)],\n            [(\'a\', 2), (\'b\', 1), (\'c\', 0), (\'c\', 4)],\n            [(\'a\', 2), (\'b\', 1), (\'c\', 1), (\'c\', 1)],\n            [(\'a\', 2), (\'b\', 1), (\'c\', 1), (\'c\', 2)],\n            [(\'a\', 2), (\'b\', 1), (\'c\', 1), (\'c\', 3)],\n            [(\'a\', 2), (\'b\', 1), (\'c\', 1), (\'c\', 4)],\n            [(\'a\', 2), (\'b\', 1), (\'c\', 2), (\'c\', 2)],\n            [(\'a\', 2), (\'b\', 1), (\'c\', 2), (\'c\', 3)],\n            [(\'a\', 2), (\'b\', 1), (\'c\', 2), (\'c\', 4)],\n            [(\'a\', 2), (\'b\', 1), (\'c\', 3), (\'c\', 3)],\n            [(\'a\', 2), (\'b\', 1), (\'c\', 3), (\'c\', 4)],\n            [(\'a\', 2), (\'b\', 1), (\'c\', 4), (\'c\', 4)],\n            [(\'a\', 2), (\'b\', 3), (\'c\', 0), (\'c\', 0)],\n            [(\'a\', 2), (\'b\', 3), (\'c\', 0), (\'c\', 1)],\n            [(\'a\', 2), (\'b\', 3), (\'c\', 0), (\'c\', 2)],\n            [(\'a\', 2), (\'b\', 3), (\'c\', 0), (\'c\', 3)],\n            [(\'a\', 2), (\'b\', 3), (\'c\', 0), (\'c\', 4)],\n            [(\'a\', 2), (\'b\', 3), (\'c\', 1), (\'c\', 1)],\n            [(\'a\', 2), (\'b\', 3), (\'c\', 1), (\'c\', 2)],\n            [(\'a\', 2), (\'b\', 3), (\'c\', 1), (\'c\', 3)],\n            [(\'a\', 2), (\'b\', 3), (\'c\', 1), (\'c\', 4)],\n            [(\'a\', 2), (\'b\', 3), (\'c\', 2), (\'c\', 2)],\n            [(\'a\', 2), (\'b\', 3), (\'c\', 2), (\'c\', 3)],\n            [(\'a\', 2), (\'b\', 3), (\'c\', 2), (\'c\', 4)],\n            [(\'a\', 2), (\'b\', 3), (\'c\', 3), (\'c\', 3)],\n            [(\'a\', 2), (\'b\', 3), (\'c\', 3), (\'c\', 4)],\n            [(\'a\', 2), (\'b\', 3), (\'c\', 4), (\'c\', 4)],\n            [(\'a\', 2), (\'b\', 4), (\'c\', 0), (\'c\', 0)],\n            [(\'a\', 2), (\'b\', 4), (\'c\', 0), (\'c\', 1)],\n            [(\'a\', 2), (\'b\', 4), (\'c\', 0), (\'c\', 2)],\n            [(\'a\', 2), (\'b\', 4), (\'c\', 0), (\'c\', 3)],\n            [(\'a\', 2), (\'b\', 4), (\'c\', 0), (\'c\', 4)],\n            [(\'a\', 2), (\'b\', 4), (\'c\', 1), (\'c\', 1)],\n            [(\'a\', 2), (\'b\', 4), (\'c\', 1), (\'c\', 2)],\n            [(\'a\', 2), (\'b\', 4), (\'c\', 1), (\'c\', 3)],\n            [(\'a\', 2), (\'b\', 4), (\'c\', 1), (\'c\', 4)],\n            [(\'a\', 2), (\'b\', 4), (\'c\', 2), (\'c\', 2)],\n            [(\'a\', 2), (\'b\', 4), (\'c\', 2), (\'c\', 3)],\n            [(\'a\', 2), (\'b\', 4), (\'c\', 2), (\'c\', 4)],\n            [(\'a\', 2), (\'b\', 4), (\'c\', 3), (\'c\', 3)],\n            [(\'a\', 2), (\'b\', 4), (\'c\', 3), (\'c\', 4)],\n            [(\'a\', 2), (\'b\', 4), (\'c\', 4), (\'c\', 4)],\n            [(\'a\', 3), (\'b\', 0), (\'c\', 0), (\'c\', 0)],\n            [(\'a\', 3), (\'b\', 0), (\'c\', 0), (\'c\', 1)],\n            [(\'a\', 3), (\'b\', 0), (\'c\', 0), (\'c\', 2)],\n            [(\'a\', 3), (\'b\', 0), (\'c\', 0), (\'c\', 3)],\n            [(\'a\', 3), (\'b\', 0), (\'c\', 0), (\'c\', 4)],\n            [(\'a\', 3), (\'b\', 0), (\'c\', 1), (\'c\', 1)],\n            [(\'a\', 3), (\'b\', 0), (\'c\', 1), (\'c\', 2)],\n            [(\'a\', 3), (\'b\', 0), (\'c\', 1), (\'c\', 3)],\n            [(\'a\', 3), (\'b\', 0), (\'c\', 1), (\'c\', 4)],\n            [(\'a\', 3), (\'b\', 0), (\'c\', 2), (\'c\', 2)],\n            [(\'a\', 3), (\'b\', 0), (\'c\', 2), (\'c\', 3)],\n            [(\'a\', 3), (\'b\', 0), (\'c\', 2), (\'c\', 4)],\n            [(\'a\', 3), (\'b\', 0), (\'c\', 3), (\'c\', 3)],\n            [(\'a\', 3), (\'b\', 0), (\'c\', 3), (\'c\', 4)],\n            [(\'a\', 3), (\'b\', 0), (\'c\', 4), (\'c\', 4)],\n            [(\'a\', 3), (\'b\', 1), (\'c\', 0), (\'c\', 0)],\n            [(\'a\', 3), (\'b\', 1), (\'c\', 0), (\'c\', 1)],\n            [(\'a\', 3), (\'b\', 1), (\'c\', 0), (\'c\', 2)],\n            [(\'a\', 3), (\'b\', 1), (\'c\', 0), (\'c\', 3)],\n            [(\'a\', 3), (\'b\', 1), (\'c\', 0), (\'c\', 4)],\n            [(\'a\', 3), (\'b\', 1), (\'c\', 1), (\'c\', 1)],\n            [(\'a\', 3), (\'b\', 1), (\'c\', 1), (\'c\', 2)],\n            [(\'a\', 3), (\'b\', 1), (\'c\', 1), (\'c\', 3)],\n            [(\'a\', 3), (\'b\', 1), (\'c\', 1), (\'c\', 4)],\n            [(\'a\', 3), (\'b\', 1), (\'c\', 2), (\'c\', 2)],\n            [(\'a\', 3), (\'b\', 1), (\'c\', 2), (\'c\', 3)],\n            [(\'a\', 3), (\'b\', 1), (\'c\', 2), (\'c\', 4)],\n            [(\'a\', 3), (\'b\', 1), (\'c\', 3), (\'c\', 3)],\n            [(\'a\', 3), (\'b\', 1), (\'c\', 3), (\'c\', 4)],\n            [(\'a\', 3), (\'b\', 1), (\'c\', 4), (\'c\', 4)],\n            [(\'a\', 3), (\'b\', 3), (\'c\', 0), (\'c\', 0)],\n            [(\'a\', 3), (\'b\', 3), (\'c\', 0), (\'c\', 1)],\n            [(\'a\', 3), (\'b\', 3), (\'c\', 0), (\'c\', 2)],\n            [(\'a\', 3), (\'b\', 3), (\'c\', 0), (\'c\', 3)],\n            [(\'a\', 3), (\'b\', 3), (\'c\', 0), (\'c\', 4)],\n            [(\'a\', 3), (\'b\', 3), (\'c\', 1), (\'c\', 1)],\n            [(\'a\', 3), (\'b\', 3), (\'c\', 1), (\'c\', 2)],\n            [(\'a\', 3), (\'b\', 3), (\'c\', 1), (\'c\', 3)],\n            [(\'a\', 3), (\'b\', 3), (\'c\', 1), (\'c\', 4)],\n            [(\'a\', 3), (\'b\', 3), (\'c\', 2), (\'c\', 2)],\n            [(\'a\', 3), (\'b\', 3), (\'c\', 2), (\'c\', 3)],\n            [(\'a\', 3), (\'b\', 3), (\'c\', 2), (\'c\', 4)],\n            [(\'a\', 3), (\'b\', 3), (\'c\', 3), (\'c\', 3)],\n            [(\'a\', 3), (\'b\', 3), (\'c\', 3), (\'c\', 4)],\n            [(\'a\', 3), (\'b\', 3), (\'c\', 4), (\'c\', 4)],\n            [(\'a\', 3), (\'b\', 4), (\'c\', 0), (\'c\', 0)],\n            [(\'a\', 3), (\'b\', 4), (\'c\', 0), (\'c\', 1)],\n            [(\'a\', 3), (\'b\', 4), (\'c\', 0), (\'c\', 2)],\n            [(\'a\', 3), (\'b\', 4), (\'c\', 0), (\'c\', 3)],\n            [(\'a\', 3), (\'b\', 4), (\'c\', 0), (\'c\', 4)],\n            [(\'a\', 3), (\'b\', 4), (\'c\', 1), (\'c\', 1)],\n            [(\'a\', 3), (\'b\', 4), (\'c\', 1), (\'c\', 2)],\n            [(\'a\', 3), (\'b\', 4), (\'c\', 1), (\'c\', 3)],\n            [(\'a\', 3), (\'b\', 4), (\'c\', 1), (\'c\', 4)],\n            [(\'a\', 3), (\'b\', 4), (\'c\', 2), (\'c\', 2)],\n            [(\'a\', 3), (\'b\', 4), (\'c\', 2), (\'c\', 3)],\n            [(\'a\', 3), (\'b\', 4), (\'c\', 2), (\'c\', 4)],\n            [(\'a\', 3), (\'b\', 4), (\'c\', 3), (\'c\', 3)],\n            [(\'a\', 3), (\'b\', 4), (\'c\', 3), (\'c\', 4)],\n            [(\'a\', 3), (\'b\', 4), (\'c\', 4), (\'c\', 4)],\n            [(\'a\', 4), (\'b\', 0), (\'c\', 0), (\'c\', 0)],\n            [(\'a\', 4), (\'b\', 0), (\'c\', 0), (\'c\', 1)],\n            [(\'a\', 4), (\'b\', 0), (\'c\', 0), (\'c\', 2)],\n            [(\'a\', 4), (\'b\', 0), (\'c\', 0), (\'c\', 3)],\n            [(\'a\', 4), (\'b\', 0), (\'c\', 0), (\'c\', 4)],\n            [(\'a\', 4), (\'b\', 0), (\'c\', 1), (\'c\', 1)],\n            [(\'a\', 4), (\'b\', 0), (\'c\', 1), (\'c\', 2)],\n            [(\'a\', 4), (\'b\', 0), (\'c\', 1), (\'c\', 3)],\n            [(\'a\', 4), (\'b\', 0), (\'c\', 1), (\'c\', 4)],\n            [(\'a\', 4), (\'b\', 0), (\'c\', 2), (\'c\', 2)],\n            [(\'a\', 4), (\'b\', 0), (\'c\', 2), (\'c\', 3)],\n            [(\'a\', 4), (\'b\', 0), (\'c\', 2), (\'c\', 4)],\n            [(\'a\', 4), (\'b\', 0), (\'c\', 3), (\'c\', 3)],\n            [(\'a\', 4), (\'b\', 0), (\'c\', 3), (\'c\', 4)],\n            [(\'a\', 4), (\'b\', 0), (\'c\', 4), (\'c\', 4)],\n            [(\'a\', 4), (\'b\', 1), (\'c\', 0), (\'c\', 0)],\n            [(\'a\', 4), (\'b\', 1), (\'c\', 0), (\'c\', 1)],\n            [(\'a\', 4), (\'b\', 1), (\'c\', 0), (\'c\', 2)],\n            [(\'a\', 4), (\'b\', 1), (\'c\', 0), (\'c\', 3)],\n            [(\'a\', 4), (\'b\', 1), (\'c\', 0), (\'c\', 4)],\n            [(\'a\', 4), (\'b\', 1), (\'c\', 1), (\'c\', 1)],\n            [(\'a\', 4), (\'b\', 1), (\'c\', 1), (\'c\', 2)],\n            [(\'a\', 4), (\'b\', 1), (\'c\', 1), (\'c\', 3)],\n            [(\'a\', 4), (\'b\', 1), (\'c\', 1), (\'c\', 4)],\n            [(\'a\', 4), (\'b\', 1), (\'c\', 2), (\'c\', 2)],\n            [(\'a\', 4), (\'b\', 1), (\'c\', 2), (\'c\', 3)],\n            [(\'a\', 4), (\'b\', 1), (\'c\', 2), (\'c\', 4)],\n            [(\'a\', 4), (\'b\', 1), (\'c\', 3), (\'c\', 3)],\n            [(\'a\', 4), (\'b\', 1), (\'c\', 3), (\'c\', 4)],\n            [(\'a\', 4), (\'b\', 1), (\'c\', 4), (\'c\', 4)],\n            [(\'a\', 4), (\'b\', 3), (\'c\', 0), (\'c\', 0)],\n            [(\'a\', 4), (\'b\', 3), (\'c\', 0), (\'c\', 1)],\n            [(\'a\', 4), (\'b\', 3), (\'c\', 0), (\'c\', 2)],\n            [(\'a\', 4), (\'b\', 3), (\'c\', 0), (\'c\', 3)],\n            [(\'a\', 4), (\'b\', 3), (\'c\', 0), (\'c\', 4)],\n            [(\'a\', 4), (\'b\', 3), (\'c\', 1), (\'c\', 1)],\n            [(\'a\', 4), (\'b\', 3), (\'c\', 1), (\'c\', 2)],\n            [(\'a\', 4), (\'b\', 3), (\'c\', 1), (\'c\', 3)],\n            [(\'a\', 4), (\'b\', 3), (\'c\', 1), (\'c\', 4)],\n            [(\'a\', 4), (\'b\', 3), (\'c\', 2), (\'c\', 2)],\n            [(\'a\', 4), (\'b\', 3), (\'c\', 2), (\'c\', 3)],\n            [(\'a\', 4), (\'b\', 3), (\'c\', 2), (\'c\', 4)],\n            [(\'a\', 4), (\'b\', 3), (\'c\', 3), (\'c\', 3)],\n            [(\'a\', 4), (\'b\', 3), (\'c\', 3), (\'c\', 4)],\n            [(\'a\', 4), (\'b\', 3), (\'c\', 4), (\'c\', 4)],\n            [(\'a\', 4), (\'b\', 4), (\'c\', 0), (\'c\', 0)],\n            [(\'a\', 4), (\'b\', 4), (\'c\', 0), (\'c\', 1)],\n            [(\'a\', 4), (\'b\', 4), (\'c\', 0), (\'c\', 2)],\n            [(\'a\', 4), (\'b\', 4), (\'c\', 0), (\'c\', 3)],\n            [(\'a\', 4), (\'b\', 4), (\'c\', 0), (\'c\', 4)],\n            [(\'a\', 4), (\'b\', 4), (\'c\', 1), (\'c\', 1)],\n            [(\'a\', 4), (\'b\', 4), (\'c\', 1), (\'c\', 2)],\n            [(\'a\', 4), (\'b\', 4), (\'c\', 1), (\'c\', 3)],\n            [(\'a\', 4), (\'b\', 4), (\'c\', 1), (\'c\', 4)],\n            [(\'a\', 4), (\'b\', 4), (\'c\', 2), (\'c\', 2)],\n            [(\'a\', 4), (\'b\', 4), (\'c\', 2), (\'c\', 3)],\n            [(\'a\', 4), (\'b\', 4), (\'c\', 2), (\'c\', 4)],\n            [(\'a\', 4), (\'b\', 4), (\'c\', 3), (\'c\', 3)],\n            [(\'a\', 4), (\'b\', 4), (\'c\', 3), (\'c\', 4)],\n            [(\'a\', 4), (\'b\', 4), (\'c\', 4), (\'c\', 4)]]\n\n\nclass TestSolverContext(unittest.TestCase):\n\n    def test_instanciation(self):\n        solver = SolverContext(3, 3, king=2, queen=7)\n        assert solver.length == 3\n        assert solver.height == 3\n        self.assertDictContainsSubset(\n            {King.uid: 2, Queen.uid: 7}, solver.pieces)\n\n    def check_results(self, results, expected):\n        """""" Check found results.\n\n        Normalize result sets into hashable sets so we can make them easily\n        comparable.\n        """"""\n        normalized_expected = set([tuple(sorted(\n            r,\n            key=itemgetter(0, 1, 2)))\n            for r in expected])\n        normalized_results = set([tuple(sorted([\n            (p.__class__.__name__, p.x, p.y) for p in r.pieces],\n            key=itemgetter(0, 1, 2)))\n            for r in results])\n        assert len(normalized_results) == len(expected)\n        assert normalized_results == normalized_expected\n\n    def test_tinyest_board(self):\n        solver = SolverContext(1, 1, king=1)\n        results = solver.solve()\n        self.check_results(results, [\n            [(\'King\', 0, 0)],\n        ])\n        assert solver.result_counter == 1\n\n    def test_single_king(self):\n        solver = SolverContext(3, 3, king=1)\n        results = solver.solve()\n        self.check_results(results, [\n            [(\'King\', 0, 0)],\n            [(\'King\', 0, 1)],\n            [(\'King\', 0, 2)],\n            [(\'King\', 1, 0)],\n            [(\'King\', 1, 1)],\n            [(\'King\', 1, 2)],\n            [(\'King\', 2, 0)],\n            [(\'King\', 2, 1)],\n            [(\'King\', 2, 2)],\n        ])\n        assert solver.result_counter == 9\n\n    def test_wide_board(self):\n        solver = SolverContext(4, 1, king=1)\n        results = solver.solve()\n        self.check_results(results, [\n            [(\'King\', 0, 0)],\n            [(\'King\', 1, 0)],\n            [(\'King\', 2, 0)],\n            [(\'King\', 3, 0)],\n        ])\n        assert solver.result_counter == 4\n\n    def test_long_board(self):\n        solver = SolverContext(1, 4, king=1)\n        results = solver.solve()\n        self.check_results(results, [\n            [(\'King\', 0, 0)],\n            [(\'King\', 0, 1)],\n            [(\'King\', 0, 2)],\n            [(\'King\', 0, 3)],\n        ])\n        assert solver.result_counter == 4\n\n    def test_single_queen(self):\n        solver = SolverContext(3, 3, queen=1)\n        results = solver.solve()\n        self.check_results(results, [\n            [(\'Queen\', 0, 0)],\n            [(\'Queen\', 0, 1)],\n            [(\'Queen\', 0, 2)],\n            [(\'Queen\', 1, 0)],\n            [(\'Queen\', 1, 1)],\n            [(\'Queen\', 1, 2)],\n            [(\'Queen\', 2, 0)],\n            [(\'Queen\', 2, 1)],\n            [(\'Queen\', 2, 2)],\n        ])\n        assert solver.result_counter == 9\n\n    def test_no_queen_solutions(self):\n        solver = SolverContext(3, 3, queen=3)\n        results = solver.solve()\n        self.check_results(results, [])\n        assert solver.result_counter == 0\n\n    def test_two_kings_one_rook(self):\n        solver = SolverContext(3, 3, king=2, rook=1)\n        results = solver.solve()\n        self.check_results(results, [\n            [(\'King\', 0, 0), (\'King\', 2, 0), (\'Rook\', 1, 2)],\n            [(\'King\', 0, 0), (\'King\', 0, 2), (\'Rook\', 2, 1)],\n            [(\'King\', 2, 0), (\'King\', 2, 2), (\'Rook\', 0, 1)],\n            [(\'King\', 0, 2), (\'King\', 2, 2), (\'Rook\', 1, 0)],\n        ])\n        assert solver.result_counter == 4\n\n    def test_two_rooks_four_knights(self):\n        solver = SolverContext(4, 4, rook=2, knight=4)\n        results = solver.solve()\n        self.check_results(results, [\n            [(\'Rook\', 0, 3), (\'Rook\', 2, 1),\n             (\'Knight\', 1, 0), (\'Knight\', 3, 0),\n             (\'Knight\', 1, 2), (\'Knight\', 3, 2)],\n            [(\'Rook\', 0, 1), (\'Rook\', 2, 3),\n             (\'Knight\', 1, 0), (\'Knight\', 3, 0),\n             (\'Knight\', 1, 2), (\'Knight\', 3, 2)],\n            [(\'Rook\', 0, 0), (\'Rook\', 2, 2),\n             (\'Knight\', 1, 1), (\'Knight\', 3, 1),\n             (\'Knight\', 1, 3), (\'Knight\', 3, 3)],\n            [(\'Rook\', 0, 2), (\'Rook\', 2, 0),\n             (\'Knight\', 1, 1), (\'Knight\', 3, 1),\n             (\'Knight\', 1, 3), (\'Knight\', 3, 3)],\n            [(\'Rook\', 1, 0), (\'Rook\', 3, 2),\n             (\'Knight\', 0, 1), (\'Knight\', 2, 1),\n             (\'Knight\', 0, 3), (\'Knight\', 2, 3)],\n            [(\'Rook\', 3, 0), (\'Rook\', 1, 2),\n             (\'Knight\', 0, 1), (\'Knight\', 2, 1),\n             (\'Knight\', 0, 3), (\'Knight\', 2, 3)],\n            [(\'Rook\', 1, 3), (\'Rook\', 3, 1),\n             (\'Knight\', 0, 0), (\'Knight\', 2, 0),\n             (\'Knight\', 0, 2), (\'Knight\', 2, 2)],\n            [(\'Rook\', 1, 1), (\'Rook\', 3, 3),\n             (\'Knight\', 0, 0), (\'Knight\', 2, 0),\n             (\'Knight\', 0, 2), (\'Knight\', 2, 2)],\n        ])\n        assert solver.result_counter == 8\n\n    @unittest.skip(""Solver too slow"")\n    def test_eight_queens(self):\n        solver = SolverContext(8, 8, queen=8)\n        for _ in solver.solve():\n            pass\n        assert solver.result_counter == 92\n\n    @unittest.skip(""Solver too slow"")\n    def test_big_family(self):\n        solver = SolverContext(7, 7, king=2, queen=2, bishop=2, knight=1)\n        for _ in solver.solve():\n            pass\n        assert solver.result_counter == 1000000\n'"
