file_path,api_count,code
image_comp.py,9,"b'""""""\nimage_comp\n\nCalculates differences between images using OpenCV and numpy\n\nNicholas Bochenski & Franciszek Madej\n""""""\n\nimport cv2\nimport numpy as np\n\n\ndef magn(v):\n    """"""Returns length of vector""""""\n    return np.sum(v**2)**.5\n\n\ndef dist(a, b):\n    """"""Return distance between two points""""""\n    return magn(a-b)\n\n\ndef lerp(a, b, t):\n    """"""Linear interpolation""""""\n    return a + (b-a) * np.stack([t, t], axis=-1)\n\n\ndef line(a, b):\n    """"""Returns set of points from line""""""\n    distance = dist(a, b)\n    point_set = np.arange(0, distance + 1)\n    return lerp(a, b, point_set / distance)\n\n\ndef color_at(img, pos):\n    """"""Returns color at given position""""""\n    try:\n        return img[int(pos[1])][int(pos[0])]\n    except:  # noqa\n        return img[0][0]\n\n\ndef color_line(img, a, b):\n    """"""Returns line of colors (point set)""""""\n    return [color_at(img, pos) for pos in line(a, b)]\n\n\ndef variance(img, a, b):\n    """"""Self describing!""""""\n    line = color_line(img, a, b)\n    avg = np.average(line)\n    return np.sum((line - avg)**2)\n\n\ndef img_size(img):\n    """"""Returns OpenCV image size""""""\n    return np.array([len(img[0]), len(img)])\n\n\ndef img_center(img):\n    """"""Returns image center""""""\n    return img_size(img) / 2\n\n\ndef perpendicular_pos(pos):\n    """"""Given point (x, y) return (-y, x)""""""\n    return np.array([-pos[1], pos[0]])\n\n\ndef perpendicular(img, a, b):\n    """"""\n    Calculates and returns points in perpendicular position to the point\n    provided\n    """"""\n    center = img_center(img)\n    a_recentered = a - center\n    b_recentered = b - center\n    return (perpendicular_pos(a_recentered) + center,\n            perpendicular_pos(b_recentered) + center)\n\n\ndef angle_line(img, theta):\n    """"""\n    Calculates points for line given the theta (tg(theta) = a in a*x + b =0)\n    """"""\n    a_norm = np.array([np.cos(theta), np.sin(theta)])\n    radius = img_size(img)[0] / 2\n    a = a_norm * radius + img_center(img)\n    b = -a_norm * radius + img_center(img)\n    return a, b\n\n\ndef min_variance(img):\n    """"""\n    Calculates minimal variance for a given image\n    """"""\n    min_var = float(\'inf\')\n    result = (0, 0)\n    for theta in np.arange(0, 2 * np.pi, 0.01):\n        a, b = angle_line(img, theta)\n        var = variance(img, a, b)\n        if var < min_var:\n            min_var = var\n            result = (a, b)\n    return result[0], result[1]\n\n\ndef draw(img, point_set):\n    """"""\n    Draws point set on image\n    """"""\n    result = img.copy()\n    for point in point_set:\n        result[int(point[1])][int(point[0])] = 0\n    return result\n\n\ndef load_img(fname):\n    """"""\n    Loads image in greyscale\n    """"""\n    return cv2.imread(fname, cv2.IMREAD_GRAYSCALE)\n\n\ndef preview(img):\n    """"""\n    Spawns window to preview changes\n    """"""\n    cv2.imshow(\'img\', img)\n    cv2.waitKey(100000)\n    cv2.waitKey(100000)\n    cv2.destroyWindow(\'img\')\n'"
main.py,3,"b'""""""\nmain.py\n\nExample use of image_comp on samples provided\n\nNicholas Bochenski & Franciszek Madej\n""""""\nimport numpy as np\n\nfrom image_comp import color_line, load_img, min_variance, perpendicular\n\n\nprint(""which image compare to? 0-8"")\nindex = int(input(""> ""))\n# for i in range(9):\nfilename = \'samples/image\' + str(index) + \'.png\'\nimg = load_img(filename)\nbest_perp_data = perpendicular(img, *min_variance(img))\ncolor_lines = best_perp_data\n\nx = np.array(color_line(img, *best_perp_data))\nmax_diff = (255**2) * len(x)\n\nfor i in range(9):\n    filename = \'samples/image\' + str(i) + \'.png\'\n    img = load_img(filename)\n    y = np.array(color_line(img, *best_perp_data))\n    diff = x - y\n    diff_sq = diff ** 2\n    total_diff = np.sum(diff_sq)\n    percentage_diff = str((1 - total_diff / max_diff) * 100) + ""%""\n    print(""similarity of image"", i, ""to image"", index,\n          ""is"", percentage_diff)\n'"
