file_path,api_count,code
neo.py,4,"b""import numpy as np\nimport timeit\n\nx = [2,5,10,394,420,50000,12309203920,5e+15]\ny = np.array([2,5,10,394,420,50000,12309203920,5e+15])\n\ndef hellaMath(items):\n    return (np.tan(items*np.sin(items)*np.cos(items)))**25\n\n# print('x: '+ str(x))\n# print('y: '+str(y))\n\na1 = np.array([10,20,30])\n\na2 = np.array([[10,20,30],[40,50,60],[70,80,90],[100,110,120]])\n\n# print(a1[1])\n# print(a2[[0,1,2,3],[0,1,0,1]])\n# print(a2[0,1])\n# print(a2[2,2])\n# print(a2[0,0],a2[1,1],a2[2,2])\n\nprint(a2*a2)\n"""
sequence.py,1,"b'# This is the RNA sequence that codes for the Beta subunit of Haemoglobin in Humans.\n# This sequence is transcribed into an mRNA transcript, which is then translated into a subunit to form the beta subunit\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import MultipleLocator, FormatStrFormatter\nimport numpy as np\n\n\nsequence=""acauuugcuucugacacaacuguguucacuagcaaccucaaacagacaccauggugcaucugacuccugaggagaagucugccguuacugcccuguggggcaaggugaacguggaugaaguugguggugaggcccugggcaggcugcugguggucuacccuuggacccagagguucuuugaguccuuuggggaucuguccacuccugaugcuguuaugggcaacccuaaggugaaggcucauggcaagaaagugcucggugccuuuagugauggccuggcucaccuggacaaccucaagggcaccuuugccacacugagugagcugcacugugacaagcugcacguggauccugagaacuucaggcuccugggcaacgugcuggucugugugcuggcccaucacuuuggcaaagaauucaccccaccagugcaggcugccuaucagaaagugguggcugguguggcuaaugcccuggcccacaaguaucacuaagcucgcuuucuugcuguccaauuucuauuaaagguuccuuuguucccuaaguccaacuacuaaacugggggauauuaugaagggccuugagcaucuggauucugccuaauaaaaaacauuuauuuucauugc""\n\nmyoglobin=""aaaccccagcuguuggggccaggacacccagugagcccauacuugcucuuuuugucuucuucagacugcgccauggggcucagcgacggggaauggcaguuggugcugaacgucugggggaaguccucaucaggcucuuuaagggucacccagagacucuggagaaguuugacaaguucaagcaccugaagucagaggacgagaugaaggcaucugaggacuuaaagaagcauggugccacugugcucaccgcccuggguggcauccuuaagaagaaggggcaucaugaggcagagauuaagccccuggcacagucgcaugccaccaagcacaagauccccgugaaguaccuggaguucaucucggaaugcaucauccagguucugcagagcaagcaucccggggacuuuggugcugaugcccagggggccaugaacaaggcccuggagcuguuccggaaggacauggccuccaacuacaaggagcugggcuuccagggcuaggccccugccgcucccacccccacccaucugggccccggguucaagagagagcggggucugaucucguguagccauauagaguuugcuucugagugucugcuuuguuuaguagaggugggcaggaggagcugaggggcuggggcugggguguugaaguuggcuuugcaugcccagcgaugcgccucccugugggaugucaucacccugggaaccgggaguggcccuuggcucacuguguucugcaugguuuggaucugaauuaauuguccuuucuucuaaaucccaaccgaacuucuuccaaccuccaaacuggcuguaaccccaaauccaagccauuaacuacaccugacaguagcaauugucugauuaaucacuggccccuugaagacagcagaaugucccuuugcaaugaggaggagaucugggcugggcgggccagcuggggaagcauuugacuaucuggaacuugugugugccuccucaggt""\n\n#print(\'Number of Base Pairs: \'+str(len(sequence)))\n\n\n# Digestion by RNAse T1 - cleaves after Guanine Residues\n\ndef bp_analysis(seq):\n\n    counter = [0,0,0,0]\n    x_ax = np.arange(4)\n\n    for x in seq:\n        if x == \'a\':\n            counter[0] += 1\n        elif x == \'u\':\n            counter[1] += 1\n        elif x == \'g\':\n            counter[2] += 1\n        else:\n            counter[3] += 1\n\n    plt.bar(x_ax, counter)\n    plt.xticks(x_ax, (\'Adenine\', \'Uracil\', \'Guanine\', \'Cytosine\'))\n    plt.xlabel(\'Nitrogenous Bases\')\n    plt.ylabel(\'Frequency\')\n    plt.title(\'Base Pair Composition\')\n    plt.grid(True)\n    plt.show()\n\ndef t1_digestion(seq):\n    t1_pre_digested = seq.split(\'g\')\n    t1_digested = []\n    for x in t1_pre_digested:\n        if x == \'\':\n            x = \'g\'\n            t1_digested.append(x)\n        else:\n            t1_digested.append(x)\n\n    print(\'Digested fragments: \'+ str(t1_digested))\n    print(\'Number of Fragments: \'+str(len(t1_digested)))\n\n    plotme = []\n\n    #getting fragment sizes\n    for x in t1_digested:\n        plotme.append(len(x))\n\n    #plotting and formatting graph\n    plt.xlabel(\'Fragment Sizes (no of b.p)\')\n    plt.ylabel(\'Frequency\')\n    plt.title(\'Fragments generated on digestion with T1 RNAse\')\n\n    minorLocator = MultipleLocator(2)\n    majorLocator = MultipleLocator(2)\n    majorFormatter = FormatStrFormatter(\'%d\')\n\n    ax = plt.subplot(111)\n\n    ax.xaxis.set_major_locator(majorLocator)\n    ax.xaxis.set_major_formatter(majorFormatter)\n\n    ax.xaxis.set_minor_locator(minorLocator)\n    plt.grid(True)\n    plt.hist(plotme)\n    plt.show()\n\n    # plot shows that most fragments are between 1-8 base pairs long. This shows that there is a frequent occurence of Guanine residues in the sequence.\n\ndef h_comparison(seq1, seq2):\n    t1_pre_digested1 = seq1.split(\'g\')\n    t1_digested1 = []\n    for x in t1_pre_digested1:\n        if x == \'\':\n            x = \'g\'\n            t1_digested1.append(x)\n        else:\n            t1_digested1.append(x)\n\n    plotme1 = []\n\n    for x in t1_digested1:\n        plotme1.append(len(x))\n\n    t1_pre_digested2 = seq2.split(\'g\')\n    t1_digested2 = []\n    for x in t1_pre_digested2:\n        if x == \'\':\n            x = \'g\'\n            t1_digested2.append(x)\n        else:\n            t1_digested2.append(x)\n\n\n    plotme2 = []\n\n\n    for x in t1_digested2:\n        plotme2.append(len(x))\n\n    #plotting and formatting graph\n    plt.xlabel(\'Fragment Sizes (no of b.p)\')\n    plt.ylabel(\'Frequency\')\n    plt.title(\'Fragment Comparison with Haemoglobin\')\n\n    minorLocator = MultipleLocator(2)\n    majorLocator = MultipleLocator(2)\n    majorFormatter = FormatStrFormatter(\'%d\')\n\n    ax = plt.subplot(111)\n\n    ax.xaxis.set_major_locator(majorLocator)\n    ax.xaxis.set_major_formatter(majorFormatter)\n\n    ax.xaxis.set_minor_locator(minorLocator)\n    plt.grid(True)\n    plt.hist(plotme1, alpha=0.5, label=\'Haemoglobin\')\n    plt.hist(plotme2, alpha=0.5, label=\'Myoglobin\')\n    plt.legend(loc=\'upper right\')\n\n    plt.show()\n\nh_comparison(sequence, myoglobin)\n'"
sim.py,1,"b""import math\nimport sympy\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# x = math.sqrt(24)\ny = sympy.sqrt(24)\n\n# print(x)\n# print(y)\n\na, b = sympy.symbols('a b')\ne = 2*a + 4*a*b + 6*b**2\nprint(e)\nprint(e-a)\n#\n# d = sympy.symbols('d')\n# solution1 = sympy.solve(d**2 + 6*d + 9)\n# print(solution1)\n#\n# solution2 = sympy.solve(2*d**2 - 6*d + 9)\n# print(solution2)\n\ndef graph(formula, data_range):\n    x = np.array(data_range)\n    y = eval(formula)\n    ax = plt.gca()\n    ax.spines['right'].set_color('none')\n    ax.spines['top'].set_color('none')\n    ax.xaxis.set_ticks_position('bottom')\n    ax.spines['bottom'].set_position(('data',0))\n    ax.yaxis.set_ticks_position('left')\n    ax.spines['left'].set_position(('data',0))\n    plt.plot(x, y)\n    plt.show()\n\ngraph('2*x**2 - 6*x + 9', range(-20,20))\n"""
