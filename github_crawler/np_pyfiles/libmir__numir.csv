file_path,api_count,code
test/test_npy_fileio.py,0,"b'import numpy\n\na = numpy.arange(6)\nfor t in [""f"", ""i""]:\n    for word in [""4"", ""8""]:\n        dtype = t + word\n        numpy.save(""a1_"" + dtype + "".npy"", a.astype(dtype))\n        numpy.save(""a2_"" + dtype + "".npy"", a.reshape(2, 3).astype(dtype))\n'"
example/char_rnn/rnn.py,32,"b'""""""\nMinimal character-level Vanilla RNN model. Written by Andrej Karpathy (@karpathy)\nBSD License\n""""""\nimport numpy as np\nimport time\n\n# data I/O\ndata = open(\'input.txt\', \'r\').read() # should be simple plain text file\nchars = list(set(data))\ndata_size, vocab_size = len(data), len(chars)\nprint(\'data has %d characters, %d unique.\' % (data_size, vocab_size))\nchar_to_ix = { ch:i for i,ch in enumerate(chars) }\nix_to_char = { i:ch for i,ch in enumerate(chars) }\n\n# hyperparameters\nhidden_size = 100 # size of hidden layer of neurons\nseq_length = 25 # number of steps to unroll the RNN for\nlearning_rate = 1e-1\n\n# model parameters\nWxh = np.random.randn(hidden_size, vocab_size)*0.01 # input to hidden\nWhh = np.random.randn(hidden_size, hidden_size)*0.01 # hidden to hidden\nWhy = np.random.randn(vocab_size, hidden_size)*0.01 # hidden to output\nbh = np.zeros((hidden_size, 1)) # hidden bias\nby = np.zeros((vocab_size, 1)) # output bias\n\n# gradient checking\nfrom random import uniform\ndef gradCheck(inputs, target, hprev):\n  global Wxh, Whh, Why, bh, by\n  num_checks, delta = 10, 1e-5\n  _, dWxh, dWhh, dWhy, dbh, dby, _ = lossFun(inputs, targets, hprev)\n  for param,dparam,name in zip([Wxh, Whh, Why, bh, by], [dWxh, dWhh, dWhy, dbh, dby], [\'Wxh\', \'Whh\', \'Why\', \'bh\', \'by\']):\n    s0 = dparam.shape\n    s1 = param.shape\n    assert s0 == s1, \'Error dims dont match: %s and %s.\' % (s0, s1)\n    print(name)\n    for i in range(num_checks):\n      ri = int(uniform(0,param.size))\n      # evaluate cost at [x + delta] and [x - delta]\n      old_val = param.flat[ri]\n      param.flat[ri] = old_val + delta\n      cg0, _, _, _, _, _, _ = lossFun(inputs, targets, hprev)\n      param.flat[ri] = old_val - delta\n      cg1, _, _, _, _, _, _ = lossFun(inputs, targets, hprev)\n      param.flat[ri] = old_val # reset old value for this parameter\n      # fetch both numerical and analytic gradient\n      grad_analytic = dparam.flat[ri]\n      grad_numerical = (cg0 - cg1) / ( 2 * delta )\n      rel_error = abs(grad_analytic - grad_numerical) / abs(grad_numerical + grad_analytic)\n      print(\'%f, %f => %e \' % (grad_numerical, grad_analytic, rel_error))\n      # rel_error should be on order of 1e-7 or less\n\ndef lossFun(inputs, targets, hprev):\n  """"""\n  inputs,targets are both list of integers.\n  hprev is Hx1 array of initial hidden state\n  returns the loss, gradients on model parameters, and last hidden state\n  """"""\n  xs, hs, ys, ps = {}, {}, {}, {}\n  hs[-1] = np.copy(hprev)\n  loss = 0\n  # forward pass\n  for t in range(len(inputs)):\n    xs[t] = np.zeros((vocab_size,1)) # encode in 1-of-k representation\n    xs[t][inputs[t]] = 1\n    hs[t] = np.tanh(np.dot(Wxh, xs[t]) + np.dot(Whh, hs[t-1]) + bh) # hidden state\n    ys[t] = np.dot(Why, hs[t]) + by # unnormalized log probabilities for next chars\n    ps[t] = np.exp(ys[t]) / np.sum(np.exp(ys[t])) # probabilities for next chars\n    loss += -np.log(ps[t][targets[t],0]) # softmax (cross-entropy loss)\n  # backward pass: compute gradients going backwards\n  dWxh, dWhh, dWhy = np.zeros_like(Wxh), np.zeros_like(Whh), np.zeros_like(Why)\n  dbh, dby = np.zeros_like(bh), np.zeros_like(by)\n  dhnext = np.zeros_like(hs[0])\n  for t in reversed(range(len(inputs))):\n    dy = np.copy(ps[t])\n    dy[targets[t]] -= 1 # backprop into y. see http://cs231n.github.io/neural-networks-case-study/#grad if confused here\n    dWhy += np.dot(dy, hs[t].T)\n    dby += dy\n    dh = np.dot(Why.T, dy) + dhnext # backprop into h\n    dhraw = (1 - hs[t] * hs[t]) * dh # backprop through tanh nonlinearity\n    dbh += dhraw\n    dWxh += np.dot(dhraw, xs[t].T)\n    dWhh += np.dot(dhraw, hs[t-1].T)\n    dhnext = np.dot(Whh.T, dhraw)\n  for dparam in [dWxh, dWhh, dWhy, dbh, dby]:\n    np.clip(dparam, -5, 5, out=dparam) # clip to mitigate exploding gradients\n  return loss, dWxh, dWhh, dWhy, dbh, dby, hs[len(inputs)-1]\n\ndef sample(h, seed_ix, n):\n  """""" \n  sample a sequence of integers from the model \n  h is memory state, seed_ix is seed letter for first time step\n  """"""\n  x = np.zeros((vocab_size, 1))\n  x[seed_ix] = 1\n  ixes = []\n  for t in range(n):\n    h = np.tanh(np.dot(Wxh, x) + np.dot(Whh, h) + bh)\n    y = np.dot(Why, h) + by\n    p = np.exp(y) / np.sum(np.exp(y))\n    ix = np.random.choice(range(vocab_size), p=p.ravel())\n    x = np.zeros((vocab_size, 1))\n    x[ix] = 1\n    ixes.append(ix)\n  return ixes\n\nn, p = 0, 0\nmWxh, mWhh, mWhy = np.zeros_like(Wxh), np.zeros_like(Whh), np.zeros_like(Why)\nmbh, mby = np.zeros_like(bh), np.zeros_like(by) # memory variables for Adagrad\nsmooth_loss = -np.log(1.0/vocab_size)*seq_length # loss at iteration 0\ntested = False\nmax_iter = 10000\nlog_iter = max_iter // 100\nstarttime = time.time()\nwhile True:\n  # prepare inputs (we\'re sweeping from left to right in steps seq_length long)\n  if p+seq_length+1 >= len(data) or n == 0: \n    hprev = np.zeros((hidden_size,1)) # reset RNN memory\n    p = 0 # go from start of data\n  inputs = [char_to_ix[ch] for ch in data[p:p+seq_length]]\n  targets = [char_to_ix[ch] for ch in data[p+1:p+seq_length+1]]\n  # if not tested:\n  #   gradCheck(inputs, targets, hprev)\n  #   tested = True\n\n  # sample from the model now and then\n  if n % log_iter == 0:\n    sample_ix = sample(hprev, inputs[0], 200)\n    txt = \'\'.join(ix_to_char[ix] for ix in sample_ix)\n    print(\'----\\n %s \\n----\' % (txt, ))\n\n  # forward seq_length characters through the net and fetch gradient\n  loss, dWxh, dWhh, dWhy, dbh, dby, hprev = lossFun(inputs, targets, hprev)\n  smooth_loss = smooth_loss * 0.999 + loss * 0.001\n  if n % log_iter == 0:\n    now = time.time()\n    print(\'iter %d, loss: %f, iter/sec %f\' % (n, smooth_loss, log_iter / (now - starttime))) # print progress\n    starttime = time.time()\n  \n  # perform parameter update with Adagrad\n  for param, dparam, mem in zip([Wxh, Whh, Why, bh, by], \n                                [dWxh, dWhh, dWhy, dbh, dby], \n                                [mWxh, mWhh, mWhy, mbh, mby]):\n    mem += dparam * dparam\n    param += -learning_rate * dparam / np.sqrt(mem + 1e-8) # adagrad update\n\n  p += seq_length # move data pointer\n  n += 1 # iteration counter \n  if n == max_iter:\n    break\n\n\n'"
