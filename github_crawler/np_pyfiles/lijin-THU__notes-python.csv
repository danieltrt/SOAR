file_path,api_count,code
generate_static_files.py,0,"b'\n# coding: utf-8\n\n# # \xe5\xb0\x86\xe7\xac\x94\xe8\xae\xb0\xe8\xbd\xac\xe5\x8c\x96\xe4\xb8\xba\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe6\xa0\xbc\xe5\xbc\x8f\n\n# In[ ]:\n\n\nimport os\nimport os.path\nimport nbconvert\nimport glob\n\n\n# \xe6\xa3\x80\xe6\x9f\xa5\xe8\xb7\xaf\xe5\xbe\x84\xe6\x98\xaf\xe5\x90\xa6\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x8c\xe5\x88\xa0\xe9\x99\xa4\xe6\x97\xa7\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xef\xbc\x9a\n\n# In[ ]:\n\n\nif not os.path.exists(\'static-files\'):\n    os.mkdir(\'static-files\')\n    \nfor n in glob.glob(\'static-files/*/*/*\'):\n    os.remove(n)\n\n\n# \xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xef\xbc\x9a\n\n# In[ ]:\n\n\nfolders = [\'01-python-tools\', \n           \'02-python-essentials\',\n           \'03-numpy\',\n           \'04-scipy\',\n           \'05-advanced-python\',\n           \'06-matplotlib\',\n           \'07-interfacing-with-other-languages\',\n           \'08-object-oriented-programming\',\n           \'09-theano\',\n           \'10-something-interesting\',\n           \'11-useful-tools\',\n           \'12-pandas\'\n          ]\n\n\n# \xe9\x81\x8d\xe5\x8e\x86\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe5\xbe\x97\xe5\x88\xb0\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xef\xbc\x9a\n\n# In[ ]:\n\n\nfile_names = []\n\nfor folder in folders:\n    files = sorted(os.listdir(folder))\n    file_names += [os.path.join(folder, file_name) for file_name in files if file_name.endswith(\'.ipynb\')]\n\n\n# In[ ]:\n\n\ndef convert_to_files(names, to_format):\n    target_dir = os.path.join(""static-files"", to_format)\n    for folder in folders:\n        if not os.path.exists(os.path.join(target_dir, folder)):\n            os.makedirs(os.path.join(target_dir, folder))\n    \n    for file_name in names:\n        p = nbconvert.export(nbconvert.get_exporter(to_format), file_name)\n        with open(os.path.join(target_dir, file_name[:-6] + p[1][""output_extension""]), \'w\') as f:\n            f.write(p[0].encode(""utf-8""))\n        print file_name\n\n\n# \xe8\xbd\xac\xe5\x8c\x96 HTML \xe6\x96\x87\xe4\xbb\xb6\xef\xbc\x9a\n\n# In[ ]:\n\n\nconvert_to_files(file_names, ""html"")\n\n\n# \xe4\xba\xa7\xe7\x94\x9f\xe6\x96\xb0\xe7\x9b\xae\xe5\xbd\x95\xef\xbc\x9a\n\n# In[ ]:\n\n\nwith open(\'index.md\') as f:\n    text = f.read()\n    with open(os.path.join(""static-files"", ""html"", ""README.md""), ""w"") as g:\n        g.write(text.replace("".ipynb"", "".html""))\n\n'"
09-theano/download_mnist.py,0,"b""import os\nimport os.path\nimport urllib\nimport gzip\nimport shutil\n\nif not os.path.exists('mnist'):\n    os.mkdir('mnist')\n\ndef download_and_gzip(name):\n    if not os.path.exists(name + '.gz'):\n        urllib.urlretrieve('http://yann.lecun.com/exdb/' + name + '.gz', name + '.gz')\n    if not os.path.exists(name):\n        with gzip.open(name + '.gz', 'rb') as f_in, open(name, 'wb') as f_out:\n            shutil.copyfileobj(f_in, f_out)\n            \ndownload_and_gzip('mnist/train-images-idx3-ubyte')\ndownload_and_gzip('mnist/train-labels-idx1-ubyte')\ndownload_and_gzip('mnist/t10k-images-idx3-ubyte')\ndownload_and_gzip('mnist/t10k-labels-idx1-ubyte')"""
09-theano/load.py,9,"b""import numpy as np\nimport os\n\ndatasets_dir = './'\n\ndef one_hot(x,n):\n\tif type(x) == list:\n\t\tx = np.array(x)\n\tx = x.flatten()\n\to_h = np.zeros((len(x),n))\n\to_h[np.arange(len(x)),x] = 1\n\treturn o_h\n\ndef mnist(ntrain=60000,ntest=10000,onehot=True):\n\tdata_dir = os.path.join(datasets_dir,'mnist/')\n\tfd = open(os.path.join(data_dir,'train-images-idx3-ubyte'))\n\tloaded = np.fromfile(file=fd,dtype=np.uint8)\n\ttrX = loaded[16:].reshape((60000,28*28)).astype(float)\n\n\tfd = open(os.path.join(data_dir,'train-labels-idx1-ubyte'))\n\tloaded = np.fromfile(file=fd,dtype=np.uint8)\n\ttrY = loaded[8:].reshape((60000))\n\n\tfd = open(os.path.join(data_dir,'t10k-images-idx3-ubyte'))\n\tloaded = np.fromfile(file=fd,dtype=np.uint8)\n\tteX = loaded[16:].reshape((10000,28*28)).astype(float)\n\n\tfd = open(os.path.join(data_dir,'t10k-labels-idx1-ubyte'))\n\tloaded = np.fromfile(file=fd,dtype=np.uint8)\n\tteY = loaded[8:].reshape((10000))\n\n\ttrX = trX/255.\n\tteX = teX/255.\n\n\ttrX = trX[:ntrain]\n\ttrY = trY[:ntrain]\n\n\tteX = teX[:ntest]\n\tteY = teY[:ntest]\n\n\tif onehot:\n\t\ttrY = one_hot(trY, 10)\n\t\tteY = one_hot(teY, 10)\n\telse:\n\t\ttrY = np.asarray(trY)\n\t\tteY = np.asarray(teY)\n\n\treturn trX,teX,trY,teY"""
10-something-interesting/_Player.py,0,"b'import requests as _requests\nfrom goldsberry._apiFunc import *\n\nmy_headers = {\n    \'Accept-Encoding\': \'gzip, deflate, sdch\',\n    \'Accept-Language\': \'en-US,en;q=0.8\',\n    \'Upgrade-Insecure-Requests\': \'1\',\n    \'User-Agent\': \'Mozilla/5.0 (Windows NT 10.0; WOW64)\'\\\n    \' AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.82 \'\\\n    \'Safari/537.36\',\n    \'Accept\': \'text/html,application/xhtml+xml,application/xml;q=0.9\'\\\n    \',image/webp,*/*;q=0.8\',\n    \'Cache-Control\': \'max-age=0\',\n    \'Connection\': \'keep-alive\'\n}\n\nclass demographics:\n    def __init__(self, playerid):\n        self._url = \'http://stats.nba.com/stats/commonplayerinfo?\'\n        self._api_param = {\'PlayerID\':playerid}\n        self._pull = _requests.get(self._url, params=self._api_param, headers=my_headers)\n    def player_info(self):\n        _headers = self._pull.json()[\'resultSets\'][0][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][0][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def headline_stats(self):\n        _headers = self._pull.json()[\'resultSets\'][1][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][1][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\nclass career_stats:\n    def __init__(self, playerid, league=\'NBA\',permode=1):\n        self._url = ""http://stats.nba.com/stats/playerprofilev2?""\n        self._api_param = {\'PlayerID\':playerid,\n                           \'LeagueID\':_nbaLeague(league),\n                           \'PerMode\':_PerModeSmall36(permode)}\n        self._pull = _requests.get(self._url, params=self._api_param, headers=my_headers)\n    def season_totals_regular(self):\n        _headers = self._pull.json()[\'resultSets\'][0][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][0][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def career_totals_regular(self):\n        _headers = self._pull.json()[\'resultSets\'][1][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][1][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def season_totals_post(self):\n        _headers = self._pull.json()[\'resultSets\'][2][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][2][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def career_totals_post(self):\n        _headers = self._pull.json()[\'resultSets\'][3][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][3][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def season_totals_allstar(self):\n        _headers = self._pull.json()[\'resultSets\'][4][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][4][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def career_totals_allstar(self):\n        _headers = self._pull.json()[\'resultSets\'][5][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][5][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def season_totals_college(self):\n        _headers = self._pull.json()[\'resultSets\'][6][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][6][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def career_totals_college(self):\n        _headers = self._pull.json()[\'resultSets\'][7][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][7][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def season_rankings_regular(self):\n        _headers = self._pull.json()[\'resultSets\'][8][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][8][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def season_rankings_post(self):\n        _headers = self._pull.json()[\'resultSets\'][9][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][9][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def season_high(self):\n        _headers = self._pull.json()[\'resultSets\'][10][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][10][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def career_high(self):\n        _headers = self._pull.json()[\'resultSets\'][11][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][11][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def next_game(self):\n        _headers = self._pull.json()[\'resultSets\'][12][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][12][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\nclass general_splits:\n    def __init__(self, playerid, season=\'2015\',seasontype=1, league=\'NBA\',\n        dateto=\'\', datefrom=\'\', gamesegment=1, lastngames=0, location=1, measuretype=1,\n        month=0, opponentteamid=0, outcome=1, paceadjust=1, permode=1, period=0,\n        plusminus=1, rank=1, seasonsegment=1, vsconf=1, vsdiv=1):\n        self._url = ""http://stats.nba.com/stats/playerdashboardbygeneralsplits?""\n        self._api_param = {\'PlayerID\':playerid,\n                           \'SeasonType\': _SeasonType(seasontype),\n                           \'Season\': _nbaSeason(season),\n                           \'LeagueID\': _nbaLeague(league),\n                           \'DateTo\':_valiDate(dateto),\n                           \'DateFrom\':_valiDate(datefrom),\n                           \'GameSegment\':_GameSegment(gamesegment),\n                           \'LastNGames\':lastngames,\n                           \'Location\':_Location(location),\n                           \'MeasureType\':_measureType(measuretype),\n                           \'Month\':month,\n                           \'OpponentTeamID\':opponentteamid,\n                           \'Outcome\':_Outcome(outcome),\n                           \'PaceAdjust\':_PaceAdjust(paceadjust),\n                           \'PerMode\':_PerModeLarge(permode),\n                           \'Period\':period,\n                           \'PlusMinus\':_PlusMinus(plusminus),\n                           \'Rank\':_Rank(rank),\n                           \'SeasonSegment\':_SeasonSegment(seasonsegment),\n                           \'VsConference\':_VsConference(vsconf),\n                           \'VsDivision\':_VsDivision(vsdiv)}\n        self._pull = _requests.get(self._url, params=self._api_param, headers=my_headers)\n    def overall(self):\n        _headers = self._pull.json()[\'resultSets\'][0][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][0][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def location(self):\n        _headers = self._pull.json()[\'resultSets\'][1][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][1][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def wins_losses(self):\n        _headers = self._pull.json()[\'resultSets\'][2][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][2][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def month(self):\n        _headers = self._pull.json()[\'resultSets\'][3][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][3][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def pre_post_allstar(self):\n        _headers = self._pull.json()[\'resultSets\'][4][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][4][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def starting_position(self):\n        _headers = self._pull.json()[\'resultSets\'][5][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][5][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def days_rest(self):\n        _headers = self._pull.json()[\'resultSets\'][6][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][6][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\nclass game_logs:\n    def __init__(self, playerid, season=\'2015\',seasontype=1, league=\'NBA\'):\n        self._url = ""http://stats.nba.com/stats/playergamelog?""\n        self._api_param = {\'PlayerID\':playerid,\n                            \'SeasonType\': _SeasonType(seasontype),\n                            \'Season\': _nbaSeason(season),\n                            }\n        self._pull = _requests.get(self._url, params=self._api_param, headers=my_headers)\n    def logs(self):\n        _headers = self._pull.json()[\'resultSets\'][0][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][0][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\nclass shot_dashboard:\n    def __init__(self,playerid,league=\'NBA\',season=\'2015\', seasontype=1,teamid=0,\n                             outcome=1,location=1,month=0,seasonsegment=1,datefrom=\'\',\n                             dateto=\'\',opponentteamid=0,vsconf=1,vsdiv=1,gamesegment=1,\n                             period=0,lastngames=0, permode=1):\n        self._url = ""http://stats.nba.com/stats/playerdashptshots?""\n        self._api_param = {\'PlayerID\' : playerid,\n                           \'LeagueID\': _nbaLeague(league),\n                           \'Season\' :  _nbaSeason(season),\n                           \'SeasonType\' : _SeasonType(seasontype),\n                           \'TeamID\' : teamid,\n                           \'Outcome\' : _Outcome(outcome),\n                           \'Location\' : _Location(location),\n                           \'Month\' : month,\n                           \'SeasonSegment\' : _SeasonSegment(seasonsegment),\n                           \'DateFrom\' :  _valiDate(datefrom),\n                           \'DateTo\' : _valiDate(dateto),\n                           \'OpponentTeamID\' : opponentteamid,\n                           \'VsConference\' : _VsConference(vsconf),\n                           \'VsDivision\' : _VsDivision(vsdiv),\n                           \'GameSegment\' : _GameSegment(gamesegment),\n                           \'Period\' :  period,\n                           \'LastNGames\' : lastngames,\n                           \'PerMode\' : _PerModeMini(permode)\n                           }\n        self._pull = _requests.get(self._url, params=self._api_param, headers=my_headers)\n    def overall(self):\n        _headers = self._pull.json()[\'resultSets\'][0][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][0][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def general(self):\n        _headers = self._pull.json()[\'resultSets\'][1][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][1][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def shot_clock(self):\n        _headers = self._pull.json()[\'resultSets\'][2][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][2][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def dribble(self):\n        _headers = self._pull.json()[\'resultSets\'][3][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][3][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def closest_defender(self):\n        _headers = self._pull.json()[\'resultSets\'][4][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][4][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def closest_defender_10ft(self):\n        _headers = self._pull.json()[\'resultSets\'][5][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][5][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def touch_time(self):\n        _headers = self._pull.json()[\'resultSets\'][6][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][6][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\nclass rebound_dashboard:\n    def __init__(self,playerid,league=\'NBA\',season=\'2015\', seasontype=1,teamid=0,\n                outcome=1,location=1,month=0,seasonsegment=1,datefrom=\'\',\n                dateto=\'\',opponentteamid=0,vsconf=1,vsdiv=1,gamesegment=1,\n                period=0,lastngames=0,permode=1):\n        self._url = ""http://stats.nba.com/stats/playerdashptreb?""\n        self._api_param = {\'PlayerID\' : playerid,\n                           \'LeagueID\': _nbaLeague(league),\n                           \'Season\' :  _nbaSeason(season),\n                           \'SeasonType\' : _SeasonType(seasontype),\n                           \'TeamID\' : teamid,\n                           \'Outcome\' : _Outcome(outcome),\n                           \'Location\' : _Location(location),\n                           \'Month\' : month,\n                           \'SeasonSegment\' : _SeasonSegment(seasonsegment),\n                           \'DateFrom\' :  _valiDate(datefrom),\n                           \'DateTo\' : _valiDate(dateto),\n                           \'OpponentTeamID\' : opponentteamid,\n                           \'VsConference\' : _VsConference(vsconf),\n                           \'VsDivision\' : _VsDivision(vsdiv),\n                           \'GameSegment\' : _GameSegment(gamesegment),\n                           \'Period\' :  period,\n                           \'LastNGames\' : lastngames,\n                           \'PerMode\' : _PerModeMini(permode)\n                           }\n        self._pull = _requests.get(self._url, params=self._api_param, headers=my_headers)\n    def overall(self):\n        _headers = self._pull.json()[\'resultSets\'][0][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][0][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def shot_type(self):\n        _headers = self._pull.json()[\'resultSets\'][1][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][1][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def contesting_rebounders(self):\n        _headers = self._pull.json()[\'resultSets\'][2][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][2][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def shot_distance(self):\n        _headers = self._pull.json()[\'resultSets\'][3][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][3][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def rebound_distance(self):\n        _headers = self._pull.json()[\'resultSets\'][4][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][4][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\nclass passing_dashboard:\n    def __init__(self,playerid,league=\'NBA\',season=\'2015\', seasontype=1,teamid=0,\n                 outcome=1,location=1,month=0,seasonsegment=1,datefrom=\'\',\n                 dateto=\'\',opponentteamid=0,vsconf=1,vsdiv=1,gamesegment=1,\n                 period=0,lastngames=0,permode=1):\n        self._url = ""http://stats.nba.com/stats/playerdashptpass?""\n        self._api_param = {\'PlayerID\' : playerid,\n                           \'LeagueID\': _nbaLeague(league),\n                           \'Season\' :  _nbaSeason(season),\n                           \'SeasonType\' : _SeasonType(seasontype),\n                           \'TeamID\' : teamid,\n                           \'Outcome\' : _Outcome(outcome),\n                           \'Location\' : _Location(location),\n                           \'Month\' : month,\n                           \'SeasonSegment\' : _SeasonSegment(seasonsegment),\n                           \'DateFrom\' :  _valiDate(datefrom),\n                           \'DateTo\' : _valiDate(dateto),\n                           \'OpponentTeamID\' : opponentteamid,\n                           \'VsConference\' : _VsConference(vsconf),\n                           \'VsDivision\' : _VsDivision(vsdiv),\n                           \'GameSegment\' : _GameSegment(gamesegment),\n                           \'Period\' :  period,\n                           \'LastNGames\' : lastngames,\n                           \'PerMode\' : _PerModeMini(permode)\n                           }\n        self._pull = _requests.get(self._url, params=self._api_param, headers=my_headers)\n    def passes_made(self):\n        _headers = self._pull.json()[\'resultSets\'][0][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][0][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def passes_received(self):\n        _headers = self._pull.json()[\'resultSets\'][1][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][1][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\nclass defense_dashboard:\n    def __init__(self,playerid,league=\'NBA\',season=\'2015\', seasontype=1,teamid=0,\n                 outcome=1,location=1,month=0,seasonsegment=1,datefrom=\'\',\n                 dateto=\'\',opponentteamid=0,vsconf=1,vsdiv=1,gamesegment=1,\n                 period=0,lastngames=0,permode=1):\n        self._url = ""http://stats.nba.com/stats/playerdashptreb?""\n        self._api_param = {\'PlayerID\' : playerid,\n                           \'LeagueID\': _nbaLeague(league),\n                           \'Season\' :  _nbaSeason(season),\n                           \'SeasonType\' : _SeasonType(seasontype),\n                           \'TeamID\' : teamid,\n                           \'Outcome\' : _Outcome(outcome),\n                           \'Location\' : _Location(location),\n                           \'Month\' : month,\n                           \'SeasonSegment\' : _SeasonSegment(seasonsegment),\n                           \'DateFrom\' :  _valiDate(datefrom),\n                           \'DateTo\' : _valiDate(dateto),\n                           \'OpponentTeamID\' : opponentteamid,\n                           \'VsConference\' : _VsConference(vsconf),\n                           \'VsDivision\' : _VsDivision(vsdiv),\n                           \'GameSegment\' : _GameSegment(gamesegment),\n                           \'Period\' :  period,\n                           \'LastNGames\' : lastngames,\n                           \'PerMode\' : _PerModeMini(permode)\n                           }\n        self._pull = _requests.get(self._url, params=self._api_param, headers=my_headers)\n    def defending_shot(self):\n        _headers = self._pull.json()[\'resultSets\'][0][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][0][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\nclass shot_log:\n    def __init__(self,playerid,league=\'NBA\',season=\'2015\',seasontype=1,teamid=0,\n                 outcome=1,location=1,month=0,seasonsegment=1,datefrom=\'\',\n                 dateto=\'\',opponentteamid=0,vsconf=1,vsdiv=1,gamesegment=1,\n                 period=0,lastngames=0):\n        self._url = ""http://stats.nba.com/stats/playerdashptshotlog?""\n        self._api_param = {\'PlayerID\' : playerid,\n                           \'LeagueID\': _nbaLeague(league),\n                           \'Season\' :  _nbaSeason(season),\n                           \'SeasonType\' : _SeasonType(seasontype),\n                           \'TeamID\' : teamid,\n                           \'Outcome\' : _Outcome(outcome),\n                           \'Location\' : _Location(location),\n                           \'Month\' : month,\n                           \'SeasonSegment\' : _SeasonSegment(seasonsegment),\n                           \'DateFrom\' :  _valiDate(datefrom),\n                           \'DateTo\' : _valiDate(dateto),\n                           \'OpponentTeamID\' : opponentteamid,\n                           \'VsConference\' : _VsConference(vsconf),\n                           \'VsDivision\' : _VsDivision(vsdiv),\n                           \'GameSegment\' : _GameSegment(gamesegment),\n                           \'Period\' :  period,\n                           \'LastNGames\' : lastngames\n                           }\n        self._pull = _requests.get(self._url, params=self._api_param, headers=my_headers)\n    def log(self):\n        _headers = self._pull.json()[\'resultSets\'][0][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][0][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\nclass rebound_log:\n    def __init__(self,playerid,league=\'NBA\',season=\'2015\',seasontype=1,teamid=0,\n                 outcome=1,location=1,month=0,seasonsegment=1,datefrom=\'\',\n                 dateto=\'\',opponentteamid=0,vsconf=1,vsdiv=1,gamesegment=1,\n                 period=0,lastngames=0):\n        self._url = ""http://stats.nba.com/stats/playerdashptreboundlogs?""\n        self._api_param = {\'PlayerID\' : playerid,\n                           \'LeagueID\': _nbaLeague(league),\n                           \'Season\' :  _nbaSeason(season),\n                           \'SeasonType\' : _SeasonType(seasontype),\n                           \'TeamID\' : teamid,\n                           \'Outcome\' : _Outcome(outcome),\n                           \'Location\' : _Location(location),\n                           \'Month\' : month,\n                           \'SeasonSegment\' : _SeasonSegment(seasonsegment),\n                           \'DateFrom\' :  _valiDate(datefrom),\n                           \'DateTo\' : _valiDate(dateto),\n                           \'OpponentTeamID\' : opponentteamid,\n                           \'VsConference\' : _VsConference(vsconf),\n                           \'VsDivision\' : _VsDivision(vsdiv),\n                           \'GameSegment\' : _GameSegment(gamesegment),\n                           \'Period\' :  period,\n                           \'LastNGames\' : lastngames\n                           }\n        self._pull = _requests.get(self._url, params=self._api_param, headers=my_headers)\n    def log(self):\n        _headers = self._pull.json()[\'resultSets\'][0][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][0][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\nclass shot_chart:\n    def __init__(self,playerid,leagueid=\'\',season=\'2015\', seasontype=1,teamid=0,\n                 gameid=\'\',outcome=1,location=1,month=0,seasonsegment=1,\n                 datefrom=\'\',dateto=\'\',opponentteamid=0,vsconf=1,vsdiv=1,\n                 position=1,period=0,lastngames=0,aheadbehind=1,\n                 contextmeasure=1,clutchtime=7,rookieyear=\'\',\n                 contextfilter=\'\',startperiod=\'1\',endperiod=\'10\',startrange=\'0\',\n                 endrange=\'28800\', gamesegment=1, rangetype=\'2\'):\n        if not rookieyear == \'\':\n            rookieyear = _nbaSeason(rookieyear)\n        self._url = ""http://stats.nba.com/stats/shotchartdetail?""\n        self._api_param = {\'LeagueID\': leagueid,\n                           \'Season\' :  _nbaSeason(season),\n                           \'SeasonType\' : _SeasonType(seasontype),\n                           \'TeamID\' : teamid,\n                           \'PlayerID\' : playerid,\n                           \'GameID\' : gameid,\n                           \'Outcome\' : _Outcome(outcome),\n                           \'Location\' : _Location(location),\n                           \'Month\' : month,\n                           \'SeasonSegment\' : _SeasonSegment(seasonsegment),\n                           \'DateFrom\' :  _valiDate(datefrom),\n                           \'DateTo\' : _valiDate(dateto),\n                           \'OpponentTeamID\' : opponentteamid,\n                           \'VsConference\' : _VsConference(vsconf),\n                           \'VsDivision\' : _VsDivision(vsdiv),\n                           \'Position\' : _Position(position),\n                           \'GameSegment\' : _GameSegment(gamesegment),\n                           \'Period\' :  period,\n                           \'LastNGames\' : lastngames,\n                           \'AheadBehind\' : _AheadBehind(aheadbehind),\n                           \'ContextMeasure\' : _ContextMeasure(contextmeasure),\n                           \'ClutchTime\' : _ClutchTime(clutchtime),\n                           \'RookieYear\' : rookieyear,\n                           \'ContextFilter\':contextfilter,\n                           \'StartPeriod\':startperiod,\n                           \'EndPeriod\':endperiod,\n                           \'StartRange\':startrange,\n                           \'EndRange\':endrange,\n                           \'RangeType\':rangetype,\n                           }\n        self._pull = _requests.get(self._url, params=self._api_param, headers=my_headers)\n    def chart(self):\n        _headers = self._pull.json()[\'resultSets\'][0][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][0][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    def leagueaverage(self):\n        _headers = self._pull.json()[\'resultSets\'][1][\'headers\']\n        _values = self._pull.json()[\'resultSets\'][1][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n\ndef PlayerList(season=\'2015\', AllTime=False, league=\'NBA\'):\n    if AllTime:\n        _url = ""http://stats.nba.com/stats/commonallplayers?""\n        _api_param = {\'IsOnlyCurrentSeason\':""0"",\n                      \'LeagueID\':_nbaLeague(league),\n                      \'Season\': ""2015-16""}\n        _pull = _requests.get(_url, params=_api_param, headers=my_headers)\n        _headers = _pull.json()[\'resultSets\'][0][\'headers\']\n        _values = _pull.json()[\'resultSets\'][0][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n    else:\n        _url = ""http://stats.nba.com/stats/commonallplayers?""\n        _api_param = {\'IsOnlyCurrentSeason\':""0"",\n                      \'LeagueID\': _nbaLeague(league),\n                      \'Season\': _nbaSeason(season)}\n        _pull = _requests.get(_url, params=_api_param, headers=my_headers)\n        _headers = _pull.json()[\'resultSets\'][0][\'headers\']\n        _values = _pull.json()[\'resultSets\'][0][\'rowSet\']\n        return [dict(zip(_headers, value)) for value in _values]\n\n__all__ = [""demographics"", ""career_stats"", ""general_splits"",\n           ""game_logs"", ""shot_dashboard"", ""rebound_dashboard"",\n           ""passing_dashboard"", ""defense_dashboard"", ""shot_log"",\n           ""rebound_log"", ""shot_chart""]\n'"
