file_path,api_count,code
npy_3d_array_viewer.py,37,"b'#!/usr/bin/env python3\n""""""\nThis script plots a 3D array as a scatter plot with point size depending on array values.\nIt also gives statistics about the array.\n\nIf multiple files are in parameters, then you can switch between files with the arrows of the figure,\nor with the left/right, up/down keys.\n""""""\n\nimport os\nimport sys\nprint(""Python version:"",sys.version)\nprint(""Python interpreter:"",sys.executable)\ntry:\n    import matplotlib.pyplot as plt\n    import numpy as np\n    import time\n    from mpl_toolkits.mplot3d import Axes3D\n    import cv2\n\nexcept ImportError as error:\n    print(error)\n    input(""Press any key to exit"")\n    exit()\n\n# Recommended because the Tk backend is shaky when replotting.\nplt.switch_backend(""Qt4Agg"")\n# plt.switch_backend(""TkAgg"")\n\nnum_files = len(sys.argv)-1\nf_index = 1\n# fig = plt.figure(figsize=(9,6))\nfig = plt.figure()\nfile = sys.argv[1]\ndata = None\nn = N = 0\ncolorspaces = [""RGB"",""LAB""]\ncolorspace = ""RGB""\ndisp_mode = 1   # 0: data on size and no color, 1: data on size and color, 2: data on color, size constant\nthreshold_enabled = True\nthreshold = 0\nthreshold_factor = 2\n[r, g, b] = [None]*3\ncolors = None\ncb = None\nget_minmax_from_array = False\nminmax = (0, 1)\n\n\n# isdigit() doesn\'t work for decimal numbers\ndef is_number(n):\n    try:\n        float(n)   # Type-casting the string to `float`.\n                   # If string is not a valid `float`,\n                   # it\'ll raise `ValueError` exception\n    except ValueError:\n        return False\n    return True\n\nscale0 = 5000\nscale = 1\n\n\ndef hit_enter_to_quit():\n    input(""Hit Enter to quit ..."")\n    exit(0)\n\n\ndef print_info(A,file):\n\n    print(os.path.basename(file), "" :\\n"")\n    print(A)\n    print(""shape \\t="", A.shape)\n    print(""min \\t="", np.min(A))\n    print(""max \\t="", np.max(A))\n    print(""abs_min\\t="", np.min(np.abs(A)))\n    print(""mean \\t="", np.mean(A))\n    print(""median \\t="", np.median(A))\n    print(""std_dev\\t="", np.std(A))\n    print("""")   # Jumps one line\n    # print(""\\n"") # Jumps two lines\n\n\n# Makes the graph so that it really displays those exact limits\ndef get_fix_mins_maxs(mins, maxs):\n    deltas = (maxs - mins) / 12.\n    mins = mins + deltas / 4.\n    maxs = maxs - deltas / 4.\n    return [mins, maxs]\n\n# Makes the graph so that it displays extra border like in the default behavior\ndef get_fix_mins_maxs_default(min, max):\n    delta = (max - min) / 20\n    return [min - delta, max + delta]\n\n\ndef plot_array(A,fig,file):\n    # fig.clf()\n    global data\n    global n, N\n    global threshold\n    global r,g,b\n    global colors\n    global colorspace\n\n    if len(A.shape) != 3:\n        print(""ERROR: The array should be 3-dimensional ([n1,n2,n3])"")\n        hit_enter_to_quit()\n    n0,n1,n2 = A.shape\n    N = n0*n1*n2\n    n = np.cbrt(n0*n1*n2)\n    t0 = np.linspace(0,1,n0)\n    t1 = np.linspace(0,1,n1)\n    t2 = np.linspace(0,1,n2)\n    [r, g, b] = np.meshgrid(t0, t1, t2, indexing=""ij"")\n\n    # Guess from the filename if the histogram is Lab or RGB\n    if ""-lab-"" in os.path.basename(file): colorspace = ""LAB""\n    else: colorspace = ""RGB""\n\n    ax = fig.add_subplot(111, projection=\'3d\')\n    if colorspace == ""RGB"":  ax.set_xlabel(\'R (slow index)\'); ax.set_ylabel(\'G (medium index)\'); ax.set_zlabel(\'B (fast index)\');\n    elif colorspace == ""LAB"":  ax.set_xlabel(\'L (slow index)\'); ax.set_ylabel(\'A (medium index)\'); ax.set_zlabel(\'B (fast index)\');\n\n    time0 = time.time()\n\n    scat_r = scat_g = scat_b = None\n    scat_colors = None\n    scat_scale = None\n    scat_cmap = None\n    if disp_mode == 0:\n        scat_scale = (scale * scale0 / n) * A / np.max(A)\n        scat_colors = None\n        fig.set_size_inches(8, 6)\n    elif disp_mode == 1:\n        scat_scale = (scale * scale0 / n) * A / np.max(A)\n        if colorspace == ""RGB"":\n            scat_colors = np.vstack((r.flatten(), g.flatten(), b.flatten())).T\n        elif colorspace == ""LAB"":\n            C = (np.vstack((r.flatten(), g.flatten(), b.flatten())).T).astype(np.float32)\n            C[:,0] *= 100; C[:,1:] = C[:,1:]*255 - 128  # Put in the good range\n            scat_colors = cv2.cvtColor(np.expand_dims(C,0), cv2.COLOR_LAB2RGB)[0]\n        fig.set_size_inches(8, 6)\n    elif disp_mode == 2:\n        scat_scale = (scale * scale0 / n)\n        scat_colors = A.flatten()\n        scat_cmap = \'coolwarm\'\n        fig.set_size_inches(9, 6)\n\n    # If there is a treshold, apply it on everything\n    if threshold_enabled:\n        threshold = 1/N    # mean for a uniform distribution\n        # Only keep values higher than threshold\n        T = A >= threshold\n        scat_r = r[T]; scat_g = g[T]; scat_b = b[T]\n        if scat_colors is not None: scat_colors = scat_colors[T.flatten()]\n        if disp_mode != 2: scat_scale = scat_scale[T]\n        suptitle = ""%s\\n scale=%.2g, max=%e, threshold=%.2g, disp_ratio=%.2g"" % (os.path.basename(file), scale, np.max(A), threshold, np.count_nonzero(T)/np.size(A))\n    else:\n        suptitle = ""%s\\n scale=%.2g, max=%e"" % (os.path.basename(file), scale, np.max(A))\n\n    data = ax.scatter(scat_r, scat_g, scat_b, s=scat_scale, c=scat_colors, cmap=scat_cmap)\n    plt.suptitle(suptitle)\n    if not get_minmax_from_array:\n        data.axes.set_xlim(minmax); data.axes.set_ylim(minmax); data.axes.set_zlim(minmax)\n    if disp_mode == 2:\n        global cb\n        cb = plt.colorbar(data)\n\n    print(""Time = "",time.time() - time0)\n\n\ndef callback_button(event, change_file=None):\n    """""" this function gets called if we hit the left button""""""\n    global f_index\n    if change_file == ""previous"":\n        # print(\'Left button pressed\')\n        if f_index == 1:\n            return\n        else:\n            f_index -= 1\n    if change_file == ""next"":\n        # print(\'Right button pressed\')\n        if f_index == num_files:\n            return\n        else:\n            f_index += 1\n\n    file = sys.argv[f_index]\n    A = np.load(file)\n    if A.ndim != 3:\n        print(""Error: Array must be of dimension 3"")\n        exit(-1)\n\n    global data\n    global r, g, b\n    global n, N\n    global colors\n    global colorspace\n    # If points have changed\n    if A.shape != r.shape:\n        n0,n1,n2 = A.shape\n        N = n0*n1*n2\n        n = np.cbrt(n0*n1*n2)\n        t0 = np.linspace(0,1,n0)\n        t1 = np.linspace(0,1,n1)\n        t2 = np.linspace(0,1,n2)\n        [r, g, b] = np.meshgrid(t0, t1, t2, indexing=""ij"")\n\n    # Choose color depending on filename, but only when switching files.\n    # If I don\'t add this condition, I can never visualize an RGB file in LAB,\n    # which can be useful if the file doesn\'t have -lab- in it, but is still LAB.\n    if change_file:\n        # Guess from the filename if the histogram is Lab or RGB\n        if ""-lab-"" in os.path.basename(file): colorspace = ""LAB""\n        else: colorspace = ""RGB""\n\n    scat_r = r\n    scat_g = g\n    scat_b = b\n    scat_colors = None\n    scat_scale = None\n    scat_cmap = None\n    # Remove the colorbar if there is one\n    if data.colorbar:\n        data.colorbar.remove()\n        fig.subplots_adjust()\n\n    if disp_mode == 0:\n        scat_scale = (scale * scale0 / n) * A / np.max(A)\n        scat_colors = None\n        fig.set_size_inches(8, 6)\n    elif disp_mode == 1:\n        scat_scale = (scale * scale0 / n) * A / np.max(A)\n        if colorspace == ""RGB"":\n            scat_colors = np.vstack((r.flatten(), g.flatten(), b.flatten())).T\n        elif colorspace == ""LAB"":\n            C = (np.vstack((r.flatten(), g.flatten(), b.flatten())).T).astype(np.float32)\n            C[:,0] *= 100; C[:,1:] = C[:,1:]*255 - 128  # Put in the good range\n            scat_colors = cv2.cvtColor(np.expand_dims(C,0), cv2.COLOR_LAB2RGB)[0]\n        fig.set_size_inches(8, 6)\n    elif disp_mode == 2:\n        scat_scale = (scale * scale0 / n)\n        scat_colors = A.flatten()\n        scat_cmap = \'coolwarm\'\n        fig.set_size_inches(10, 6)\n\n\n    # If there is a treshold, apply it on everything\n    if threshold_enabled:\n        # threshold = 1/N\n        # Only keep values higher than threshold\n        T = A >= threshold\n        scat_r = r[T]; scat_g = g[T]; scat_b = b[T]\n        if scat_colors is not None: scat_colors = scat_colors[T.flatten()]\n        if disp_mode != 2: scat_scale = scat_scale[T]\n        suptitle = ""%s\\n scale=%.2g, max=%e, threshold=%.2g, disp_ratio=%.2g"" % (os.path.basename(file), scale, np.max(A), threshold, np.count_nonzero(T)/np.size(A))\n    else:\n        suptitle = ""%s\\n scale=%.2g, max=%e"" % (os.path.basename(file), scale, np.max(A))\n\n    # print(""scat_r.shape:"",scat_r.shape)\n    # print(""scat_g.shape:"",scat_g.shape)\n    # print(""scat_b.shape:"",scat_b.shape)\n    # print(""scat_scale.shape:"",scat_scale.shape)\n    # print(""scat_colors.shape:"",scat_colors.shape)\n    data.axes.cla()\n    # fig.clf()\n    data = data.axes.scatter(scat_r, scat_g, scat_b, s=scat_scale, c=scat_colors, cmap=scat_cmap)\n    # data.axes.scatter(scat_r, scat_g, scat_b, s=scat_scale, c=scat_colors)\n    if colorspace == ""RGB"":  data.axes.set_xlabel(\'R (slow index)\'); data.axes.set_ylabel(\'G (medium index)\'); data.axes.set_zlabel(\'B (fast index)\')\n    elif colorspace == ""LAB"":  data.axes.set_xlabel(\'L (slow index)\'); data.axes.set_ylabel(\'A (medium index)\'); data.axes.set_zlabel(\'B (fast index)\')\n\n    plt.suptitle(suptitle)\n    if not get_minmax_from_array:\n        data.axes.set_xlim(minmax); data.axes.set_ylim(minmax); data.axes.set_zlim(minmax)\n    if disp_mode == 2:\n        global cb\n        plt.colorbar(data)\n\n\n    # # Compute colors\n    # colors = (np.vstack((r.flatten(), g.flatten(), b.flatten())).T if disp_mode == 1 else None)\n    #\n    # # Modify plot\n    # if disp_threshold:\n    #     T = A > threshold\n    #     data.axes.cla()\n    #     if colors is not None: colors = colors[T.flatten()]\n    #     data.axes.scatter(r[T], g[T], b[T], s=(scale * scale0 / n) * A[T] / np.max(A), c=colors)\n    #     if not get_minmax_from_array:\n    #         data.axes.set_xlim(minmax); data.axes.set_ylim(minmax); data.axes.set_zlim(minmax)\n    #     plt.suptitle(""%s\\n scale=%.2g, threshold=%.2g, disp_ratio=%.2g"" % (os.path.basename(file), scale, threshold, np.count_nonzero(T)/np.size(A)))\n    #     data.axes.set_xlabel(\'R (slow index)\'); data.axes.set_ylabel(\'G (medium index)\'); data.axes.set_zlabel(\'B (fast index)\')\n    # else:\n    #     data.set_sizes((scale*scale0/n) * A.flatten() / np.max(A))\n\n    # plt.suptitle(""%s\\n scale=%g, max=%e""%(os.path.basename(file),scale,np.max(A)))\n    # Redraw\n    fig.canvas.draw()\n    fig.canvas.flush_events()\n    # Print image information if file has changed\n    if change_file:\n        print_info(A,file)\n\n\ndef callback_left_button(event):\n    callback_button(event, ""previous"")\n\n\ndef callback_right_button(event):\n    callback_button(event, ""next"")\n\n\n# See shorcuts already taken :\n# https://matplotlib.org/users/navigation_toolbar.html#navigation-keyboard-shortcuts\ndef callback_disp_help(event):\n    print(""NPY 3D Viewer"")\n    print(""-------------"")\n    print(""Valid keystrokes:"")\n    print(""\'\\u2192\',\'\\u2193\': Next file"")\n    print(""\'\\u2190\',\'\\u2191\': Previous file"")\n    print(""\'d\': Switch between data display modes"")\n    print(""\'c\': Switch between color spaces"")\n    print(""\'/\': Decrease point size"")\n    print(""\'*\': Increase point size"")\n    print(""\'p\': Enter new point size"")\n    print(""\'-\': Increase display value threshold (decrease number of points)"")\n    print(""\'+\': Decrease display value threshold (increase number of points)"")\n    print(""\'T\': Toggle threshold use"")\n    print(""\'t\': Enter new threshold"")\n    print(""\'m\': Enter new threshold (multiplying) factor when increasing/decreasing"")\n    print(""\'h\': Display this help"")\n    print(""Matplotlib defaults"")\n    print(""\'f\': Enter fullscreen"")\n    print(""\'s\': Save figure"")\n    print(""\'q\': Quit window"")\n\n\n\ndef callback_scale_button(event):\n    global scale\n    if event.key == \'/\':    scale /= 1.5\n    if event.key == \'*\':    scale *= 1.5\n    if event.key == \'p\':\n        print(""Scale for point size : %03f"" % scale)\n        key = input(""Enter new scale ? (just hit enter if not) : "")\n        if is_number(key):\n            scale = float(key)\n\n    # Refresh\n    callback_button(event)\n\ndef callback_disp_threshold_button(event):\n    global threshold\n    global threshold_factor\n    global threshold_enabled\n    if event.key == \'-\':    threshold *= threshold_factor\n    if event.key == \'+\':    threshold /= threshold_factor\n    if event.key == \'T\':    threshold_enabled = not threshold_enabled\n    if event.key == \'t\':\n        print(""Threshold for point display: %g"" % threshold)\n        key = input(""Enter new threshold ? (just hit enter if not) : "")\n        if is_number(key):\n            threshold = float(key)\n    if event.key == \'m\':\n        print(""Multiplying factor when increasing and decreasing threshold: %g"" % threshold)\n        key = input(""Enter new threshold factor ? (just hit enter if not) : "")\n        if is_number(key):\n            threshold_factor = float(key)\n\n    # Refresh\n    callback_button(event)\n\ndef callback_disp_mode(event):\n\n    global disp_mode\n    disp_mode = (disp_mode+1) % 3     # Switch between 0, 1, and 2\n\n    # Refresh\n    callback_button(event)\n\n\ndef callback_colorspace(event):\n\n    global colorspace\n    colorspace = colorspaces[(colorspaces.index(colorspace)+1)%len(colorspaces)]     # Switch between colorspaces\n\n    # Refresh\n    callback_button(event)\n\n\ndef on_keyboard(event):\n    # print(\'You pressed\', event.key, event.xdata, event.ydata)\n    if event.key in {\'left\', \'up\'}:\n        callback_left_button(event)\n    elif event.key in {\'right\', \'down\'}:\n        callback_right_button(event)\n    elif event.key in {\'/\', \'*\', \'p\'}:\n        callback_scale_button(event)\n    elif event.key in {\'+\', \'-\', \'t\', \'T\', \'m\'}:\n        callback_disp_threshold_button(event)\n    elif event.key in {\'d\'}:\n        callback_disp_mode(event)\n    elif event.key in {\'h\'}:\n        callback_disp_help(event)\n    elif event.key in {\'c\'}:\n        callback_colorspace(event)\n\n\n# Initialize variables\n# minmax = get_fix_mins_maxs(minmax[0], minmax[1])\nminmax = get_fix_mins_maxs_default(minmax[0], minmax[1])\n# minmax = (minmax[0], minmax[1])\n\n# Display first image (avoid duplicating code)\nim = np.load(file)\nplot_array(im,fig,file)\n\n# Print image information\nprint_info(im, file)\n\n# Rewire keyboard events\nplt.gcf().canvas.mpl_connect(\'key_press_event\', on_keyboard)\n\n# Rewire actions for toolbar arrow buttons\n# if plt.get_backend() == ""Qt4Agg"":\n#     toolbar_elements = fig.canvas.toolbar.children()\n#     left_button = toolbar_elements[6]\n#     right_button = toolbar_elements[8]\n#     left_button.clicked.connect(callback_left_button)\n#     right_button.clicked.connect(callback_right_button)\n\n# # This doesn\'t work yet.\n# if(plt.get_backend() == ""TkAgg""):\n#     toolbar_elements = fig.canvas.toolbar.winfo_children() # With tkinter backend\n#     left_button = toolbar_elements[6]\n#     right_button = toolbar_elements[8]\n#     left_button.config(command=callback_left_button)  # Doesn\'t work while debugging, but works if not debugging\n#     right_button.config(command=callback_right_button)\n\n\n# GUI main loop\nplt.show()\n'"
npy_copy_as_csv.py,1,"b'#!/usr/bin/env python3\n\n""""""\nThis script copies the content of the NPY file\nin the clipboard in a CSV.\nThis is intended to be pasted into a spreadsheet program.\n\nIf multiple files are selected, they will all be copied one\nbelow the other, with a blank line separating them.\n""""""\n\nimport sys\nimport io\nprint(""Python version:"",sys.version)\nprint(""Python interpreter:"",sys.executable)\ntry:\n    import numpy as np\n    import time\n    import pyperclip\n    import csv\n\nexcept ImportError as error:\n    print(error)\n    input(""Press any key to exit"")\n    exit()\n\n\ns = io.StringIO()\ncsvWriter = csv.writer(s)\n\nfor i in range(1,len(sys.argv)):\n    file = sys.argv[i]\n    A = np.load(file)\n    if( A.ndim == 1):\n        A = A.reshape([A.size,1])\n    csvWriter.writerows(A)\n    if i != len(sys.argv):\n        csvWriter.writerows(\' \')\npyperclip.copy(s.getvalue())\n\nif sys.platform.startswith(\'linux\'):\n    input(""Hit Enter to quit ..."")\n'"
npy_file_compare.py,19,"b'#!/usr/bin/env python3\n""""""\nThis script compares the content of two NPY files\nIt gives statistics about the difference array A-B\nIf the arrays are 2D, a visual difference is plotted.\n""""""\n\nimport os\nimport sys\nprint(""Python version:"",sys.version)\nprint(""Python interpreter:"",sys.executable)\ntry:\n    import matplotlib.pyplot as plt\n    import numpy as np\n\nexcept ImportError as error:\n    print(error)\n    input(""Press any key to exit"")\n    exit()\n\n\ndef hit_enter_to_quit():\n    if sys.platform.startswith(\'linux\'):\n        input(""Hit Enter to quit ..."")\n\n\nif len(sys.argv) != 3:\n    print(""ERROR: Exactly two files must be selected for comparison"")\n    hit_enter_to_quit()\n    exit(0)\n\nf1 = sys.argv[1]\nf2 = sys.argv[2]\nA1 = np.load(f1)\nA2 = np.load(f2)\n\nprint(""Comparing the 2 files:\\n"")\nprint(""f1: "",os.path.basename(f1),""\\n"")\nprint(A1)\nprint(""\\n"")\nprint(""f2: "",os.path.basename(f2),""\\n"")\nprint(A2)\nprint(""\\n"")\n\nif A1.shape != A2.shape:\n    print(""The two files have different shapes:"")\n    print(os.path.basename(f1),"" has shape "",A1.shape)\n    print(os.path.basename(f2),"" has shape "",A2.shape)\n    print(""The two files must be of same shape for further comparison."")\n    hit_enter_to_quit()\n    exit(0)\n\nabs_err = np.abs(A2-A1)\nif np.sum(abs_err != 0) == 0:\n    print(""The two files are identical.\\n"")\n    hit_enter_to_quit()\n    exit(0)\n\nprint(""The two files have the same shape: "",A1.shape,""\\n"")\n\nprint(""Distance functions :"")\nprint(""0-norm = "",np.sum(abs_err != 0))\nprint(""Total Variation = "",np.sum(abs_err))\nprint(""Quadratic Loss = "",np.sum((A2-A1)**2))\nprint(""KL(A1|A2) = "",np.sum(A1*np.log(A1/A2)-A1+A2))\nprint(""KL(A2|A1) = "",np.sum(A2*np.log(A2/A1)-A2+A1))\nprint(""\\n"")\n\nprint(""Stats on the absolute difference : \\n"")\nprint(""min \\t="",np.min(abs_err))\nprint(""max \\t="",np.max(abs_err))\nprint(""mean \\t="",np.mean(abs_err))\nprint(""median \\t="",np.median(abs_err))\nprint(""std_dev\\t="",np.std(abs_err))\nprint(""\\n"")\n\nprint(""Number of equal values: "",np.sum(abs_err == 0))\nprint(""Stats on the absolute difference without equal values: \\n"")\nprint(""min \\t="",np.min(abs_err[abs_err > 0]))\nprint(""mean \\t="",np.mean(abs_err[abs_err > 0]))\nprint(""std_dev\\t="",np.std(abs_err[abs_err > 0]))\nprint(""\\n"")\n\nif len(A1.shape) == 2:\n    plt.figure(figsize=(8,8))\n    plt.subplot(221)\n    plt.imshow(A1,cmap=\'gray\')\n    plt.title(""f1"")\n    plt.colorbar()\n    plt.subplot(222)\n    plt.imshow(A2,cmap=\'gray\')\n    plt.title(""f2"")\n    plt.colorbar()\n    plt.subplot(223)\n    plt.imshow(A1-A2,cmap=\'gray\')\n    plt.title(""f1-f2"")\n    plt.colorbar()\n    plt.subplot(224)\n    plt.imshow(np.abs(A1-A2),cmap=\'gray\')\n    plt.title(""abs(f1-f2)"")\n    plt.colorbar()\n    plt.show()\n\nhit_enter_to_quit()\n'"
npy_file_viewer.py,7,"b'#!/usr/bin/env python3\n""""""\nThis script gives statistics about the array in the NPY file\n""""""\n\n\nimport os\nimport sys\nprint(""Python version:"",sys.version)\nprint(""Python interpreter:"",sys.executable)\ntry:\n    import numpy as np\n\nexcept ImportError as error:\n    print(error)\n    input(""Press any key to exit"")\n    exit()\n\n\nfor i in range(1,len(sys.argv)):\n    file = sys.argv[i]\n    A = np.load(file)\n    print(os.path.basename(file),"" :\\n"")\n    print(A)\n    print(""shape \\t="",A.shape)\n    print(""min \\t="",np.min(A))\n    print(""max \\t="",np.max(A))\n    print(""abs_min\\t="",np.min(np.abs(A)))\n    print(""mean \\t="",np.mean(A))\n    print(""median \\t="",np.median(A))\n    print(""std_dev\\t="",np.std(A))\n    print(""\\n"")\n\nif sys.platform.startswith(\'linux\'):\n    input(""Hit Enter to quit ..."")\n'"
npy_image_viewer.py,9,"b'#!/usr/bin/env python3\n""""""\nThis script plots a 2D array as an image.\nIt also gives statistics about the array.\n\nIf multiple files are in parameters, then you can switch between files with the arrows of the figure,\nor with the left/right, up/down keys.\n""""""\n\nimport os\nimport sys\nprint(""Python version:"",sys.version)\nprint(""Python interpreter:"",sys.executable)\ntry:\n    import matplotlib.pyplot as plt\n    import numpy as np\n\nexcept ImportError as error:\n    print(error)\n    input(""Press any key to exit"")\n    exit()\n\n# Choose your backend\n# plt.switch_backend(""Qt4Agg"")\n# plt.switch_backend(""TkAgg"")\n\n\nnum_files = len(sys.argv)-1\nf_index = 0\nfig = plt.figure()\ndata = plt.imshow(np.load(sys.argv[1]),cmap=\'gray\')\n\n\ndef print_info(A,file):\n\n    print(os.path.basename(file), "" :\\n"")\n    print(A)\n    print(""shape \\t="", A.shape)\n    print(""min \\t="", np.min(A))\n    print(""max \\t="", np.max(A))\n    print(""abs_min\\t="", np.min(np.abs(A)))\n    print(""mean \\t="", np.mean(A))\n    print(""median \\t="", np.median(A))\n    print(""std_dev\\t="", np.std(A))\n    print("""")   # Jumps one line\n    # print(""\\n"") # Jumps two lines\n\n\ndef callback_left_button(event):\n    """""" this function gets called if we hit the left button""""""\n    # print(\'Left button pressed\')\n    global f_index\n    if f_index == 1:\n        return\n    else:\n        f_index -= 1\n\n    file = sys.argv[f_index]\n    A = np.load(file)\n    data.set_data(A)\n    plt.title(os.path.basename(file))\n    # Redraw\n    fig.canvas.draw()\n    fig.canvas.flush_events()\n    # Print image information\n    print_info(A,file)\n\n\ndef callback_right_button(event):\n    """""" this function gets called if we hit the left button""""""\n    # print(\'Right button pressed\')\n    global f_index\n    global data\n    if f_index == num_files:\n        return\n    else:\n        f_index += 1\n\n    file = sys.argv[f_index]\n    A = np.load(file)\n    data.set_data(A)\n    plt.title(os.path.basename(file))\n    # Redraw\n    fig.canvas.draw()\n    fig.canvas.flush_events()\n    # Print image information\n    print_info(A,file)\n\n\n# Display first image (avoid duplicating code)\ncallback_right_button(None)\n\n\n# Rewire keyboard events\ndef on_keyboard(event):\n    if event.key == \'left\' or event.key == \'up\':\n        callback_left_button(event)\n    elif event.key == \'right\' or event.key == \'down\':\n        callback_right_button(event)\n\nplt.gcf().canvas.mpl_connect(\'key_press_event\', on_keyboard)\n\n\n# Rewire button actions\nif(plt.get_backend() == ""Qt4Agg""):\n    toolbar_elements = fig.canvas.toolbar.children()\n    left_button = toolbar_elements[6]\n    right_button = toolbar_elements[8]\n    left_button.clicked.connect(callback_left_button)\n    right_button.clicked.connect(callback_right_button)\n\n# # This doesn\'t work yet.\n# if(plt.get_backend() == ""TkAgg""):\n#     toolbar_elements = fig.canvas.toolbar.winfo_children() # With tkinter backend\n#     left_button = toolbar_elements[6]\n#     right_button = toolbar_elements[8]\n#     left_button.config(command=callback_left_button)  # Doesn\'t work while debugging, but works if not debugging\n#     right_button.config(command=callback_right_button)\n\n# GUI main loop\nplt.show()\n\nif sys.platform.startswith(\'linux\'):\n    input(""Hit Enter to quit ..."")\n'"
npy_load_in_shell.py,7,"b'#!/usr/bin/env python3\n""""""\nThis script opens an interactive shell with the NPY file loaded as the array A.\nIf multiple files are passed, then it builds a dictionary of arrays,\nwhere each array can be accessed in order : A[0], A[1], etc.\nIt also displays the array(s) and gives some statistics.\nPyPlot is preloaded so that you don\'t have to type it.\n""""""\n\nimport os\nimport sys\nprint(""Python version:"",sys.version)\nprint(""Python interpreter:"",sys.executable)\ntry:\n    import numpy as np\n\nexcept ImportError as error:\n    print(error)\n    input(""Press any key to exit"")\n    exit()\n\n\nA = []\n\nfor i in range(0,len(sys.argv)-1):\n    file = sys.argv[i+1]\n    A.append(np.load(file))\n    print(os.path.basename(file),"" :\\n"")\n    print(A[i])\n    print(""shape \\t="",A[i].shape)\n    print(""min \\t="",np.min(A[i]))\n    print(""max \\t="",np.max(A[i]))\n    print(""abs_min\\t="",np.min(np.abs(A[i])))\n    print(""mean \\t="",np.mean(A[i]))\n    print(""median \\t="",np.median(A[i]))\n    print(""std_dev\\t="",np.std(A[i]))\n    print(""\\n"")\n\n# If only one array is passed, don\'t use a dictionary\nif len(sys.argv) == 2:\n    A = A[0]'"
