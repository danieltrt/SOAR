file_path,api_count,code
setup.py,0,"b'from setuptools import setup, Extension\nimport numpy\nfrom fastgrab import metadata\n\nmodule_info = Extension(\n    ""fastgrab._linux_x11"",\n    include_dirs=[numpy.get_include()],\n    libraries=[\'X11\', \'gomp\'],\n    extra_compile_args=[\n        \'-fno-strict-aliasing\',\n        # \'-fopenmp\',\n        \'-std=c11\',\n        \'-mtune=native\'\n    ],\n    sources=[""fastgrab/linux_x11/screenshot.c""]\n)\n\nsetup(\n    name=metadata.package,\n    version=metadata.version,\n    description=metadata.description,\n    author=metadata.authors,\n    url=metadata.url,\n    packages=[metadata.package],\n    ext_modules=[module_info]\n)\n'"
examples/benchmark.py,0,"b'""""""\ntake a single full-screen screenshot\n""""""\nimport time\nfrom fastgrab import screenshot\n\n# the resolutions to be benchmarked\nbenchmark_resolutions = {\n    \'360p\': (480, 360),\n    \'720p\': (1280, 720),\n    \'1080p\': (1920, 1080),\n    \'4K\': (1920*2, 1080*2),\n    \'8K\': (1920*4, 1080*4)\n}\n\n# the number of frames to be captured for each benchmark resolution\nn_frames = 800\n\n# run the benchmark\ngrab = screenshot.Screenshot()\n\nprint(\'benchmark capture frame rate using frames\')\nprint(f\'the benchmark will capture {n_frames} frames\\n\')\nprint(\'resolution standard | resolution    |  measured fps\')\nprint(\'--------------------+---------------+--------------\')\n\nfor resolution_standard, resolution in benchmark_resolutions.items():\n\n    print(\'{:<8s}            |  {:<10s}   |\'.format(\n        resolution_standard,\n        \'{:d}x{:d}\'.format(resolution[0], resolution[1])\n    ), end=\'\')\n    try:\n        t0 = time.time()\n        for i in range(n_frames):\n            img = grab.capture(bbox=(0, 0, resolution[0], resolution[1]))\n        tf = time.time()\n        fps = n_frames / (tf - t0)\n        print(\'  {:.1f}   \'.format(fps))\n    except ValueError as exc:\n        print(f\'  failed\')\n'"
examples/low_level_api_screenshot.py,0,"b'""""""\nexample script that uses the C api call to take a screenshot.\n\nThis is handy to avoid the overhead of high-level python wrapper\n""""""\nimport numpy\nfrom fastgrab._linux_x11 import screenshot\n\n# a full HD screen\nx, y, width, height = 0, 0, 1920, 1080\nimg = numpy.zeros((height, width, 4), \'uint8\')\nscreenshot(x, y, img)\n\n# (optional) view the screenshot\n# import pylab\n# pylab.imshow(img[:, :, 0:3], interpolation=\'none\', cmap=\'Greys_r\')\n# pylab.show()\n'"
examples/single_screenshot.py,0,"b'""""""\ntake a single full-screen screenshot\n""""""\nfrom fastgrab import screenshot\nimg = screenshot.Screenshot().capture()\n\n# import pylab\n# pylab.imshow(img[:, :, 0:3], interpolation=\'none\', cmap=\'Greys_r\')\n# pylab.show()\n\n'"
fastgrab/__init__.py,0,b'from . import metadata\n\n__version__ = metadata.version\n__author__ = metadata.authors[0]\n__license__ = metadata.license\n__copyright__ = metadata.copyright\n'
fastgrab/metadata.py,0,"b'# -*- coding: utf-8 -*-\n""""""\nProject metadata that describe it\n""""""\npackage = \'fastgrab\'\nproject = \'fastgrab\'\nproject_no_spaces = project.replace(\' \', \'\')\nversion = \'0.3.0-dev\'\ndescription = \'Low level screen capture package with a numpy interface\'\nauthors = [\'Mher Kazandjian\']\nauthors_string = \', \'.join(authors)\nemails = [\'mherkazandjian@gmail.com\']\nlicense = \'GPL v3\'\ncopyright = \'2019 \' + authors_string\nurl = \'https://github.com/mherkazandjian/fastgrab\'\n'"
fastgrab/screenshot.py,0,"b'""""""\nModule that implements the object for taking screenshots\n""""""\nimport numpy\nfrom fastgrab._linux_x11 import screenshot, resolution, bytes_per_pixel\n\n\nclass Screenshot(object):\n    """"""\n    Main object that captures screenshots and provides other utilities\n    """"""\n    def __init__(self):\n        """"""\n        Constructor\n        """"""\n\n        self._screensize = None\n        """"""tuple, (width, height), backing variable for self.screensize""""""\n\n        self._img = None\n        """"""The buffer where the captured image is stored""""""\n\n    @property\n    def screensize(self) -> tuple:\n        """"""\n        return the screensize/resolution\n        """"""\n        if self._screensize is None:\n            self._screensize = resolution()\n            return self._screensize\n        else:\n            return self._screensize\n\n    def check_bbox(self, bbox):\n        """"""\n        Raise an exception of the bounding box is outside the screen bounds\n        """"""\n        x, y, w, h = bbox\n        if (x + w) > self.screensize[0] or (y + h) > self.screensize[1]:\n            msg = (\n                \'bbox is outside the screen boarders.\\n\'\n                \'bbox={} screen size={}\'\n            ).format(bbox, self.screensize)\n            raise ValueError(msg)\n\n    def capture(self, bbox: tuple=None) -> numpy.zeros:\n        """"""\n        Take a screenshot and return the image\n\n        The captured image is a height x width for each R, G, B cannel, the\n        alpha channel is zeroed out.\n\n        # in this example, a full screen screenshot is taken and displayed with\n        # matplotlib. Matplotlib is not required and is used for demonstration\n        # porposes. Once the image is captured in img that is a numpy array\n        # other third party libraries such as opencv can be used to display it\n        # quickly with high refresh rates\n        .. code-block:: python\n\n            from fastgrab import screenshot\n            grab = screenshot.Screenshot()\n            img = grab.capture()\n\n            from matplotlib import pyplot as plt\n            plt.imshow(img[:, :, 0:3], interpolation=\'none\', cmap=\'Greys_r\')\n            plt.show()\n\n        :param bbox: the upper left corner of the screenshot and the width\n         and heigh (x0, y0, width, height).\n        :return: The image as a numpy array of share (height, width, 4). The\n         last layer is zeros out.\n        """"""\n\n        # check/set the dimensions of the image that will be captured\n        if bbox is None:\n            width, height = self.screensize\n            bbox = (0, 0, width, height)\n        else:\n            _, _, width, height = bbox\n\n        self.check_bbox(bbox)\n\n        # declare the img array only when the image size changes\n        if self._img is None:\n            self._img = numpy.zeros(\n                (height, width, bytes_per_pixel()), \'uint8\'\n            )\n            # print(\'image buffer not allocated, allocating it\')\n        else:\n            img_h, img_w = self._img.shape[0:2]\n            if img_h != height or img_w != width:\n                self._img = numpy.zeros(\n                    (height, width, bytes_per_pixel()), \'uint8\'\n                )\n                # print(\'image buffer size changed\')\n\n        screenshot(bbox[0], bbox[1], self._img)\n\n        return self._img\n'"
tests/test_screenshot.py,0,b'import unittest\nimport pytest\nfrom fastgrab import screenshot\n\ndef test_that_screenshot_instance_can_be_created():\n    screenshot.Screenshot()\n'
