file_path,api_count,code
demo.py,0,"b'""""""\npyrsb demo\n""""""\n\nimport numpy\nimport scipy\nfrom scipy.sparse import csr_matrix\nfrom rsb import rsb_matrix\n\nV = [11.0, 12.0, 22.0]\nI = [0, 0, 1]\nJ = [0, 1, 1]\nc = csr_matrix((V, (I, J)))\nprint(c)\n# several constructor forms, as with csr_matrix:\na = rsb_matrix((V, (I, J)))\na = rsb_matrix((V, (I, J)), [3, 3])\na = rsb_matrix((V, I, J))\na = rsb_matrix((V, I, J), sym=""S"")  # symmetric example\nprint(a)\na = rsb_matrix((4, 4))\na = rsb_matrix(c)\nnrhs = 1  # set to nrhs>1 to multiply by multiple vectors at once\nnr = a.shape[0]\nnc = a.shape[1]\norder = ""F""\nx = numpy.empty([nc, nrhs], dtype=scipy.double, order=order)\ny = numpy.empty([nr, nrhs], dtype=scipy.double, order=order)\nx[:, :] = 1.0\ny[:, :] = 0.0\nprint(a)\nprint(x)\nprint(y)\n# import rsb # import operators\n# a.autotune() # makes only sense for large matrices\ny = y + a * x\n# equivalent to y=y+c*x\nprint(y)\ndel a\n'"
setup.py,0,"b'""""""setuptools installer script for PyRSB.""""""\nimport os\nimport setuptools\nfrom setuptools import setup, Extension\nfrom setuptools.command.build_ext import build_ext\nfrom time import gmtime, strftime\n\nif os.environ.get(\'PYRSB_VERSION\'):\n    VERSION = os.environ.get(\'PYRSB_VERSION\')\nelse:\n    VERSION = strftime(""0.2.%Y%m%d%H%M%S"", gmtime())\n\nwith open(""README.md"", ""r"") as fh:\n    LONG_DESCRIPTION = fh.read()\n\nfrom numpy import get_include\n\nINCLUDE_DIRS = [get_include()]\n\nsetup(\n    # name=""rsb-michele.martone"", version = \'0.2.202005072047\',\n    name=""rsb"",\n    version=VERSION,\n    # name=""rsb"",\n    author=""Michele Martone"",\n    author_email=""michelemartone@users.sourceforge.net"",\n    description=""PyRSB: a Cython-based Python interface to librsb"",\n    long_description=LONG_DESCRIPTION,\n    long_description_content_type=""text/markdown"",\n    url=""https://github.com/michelemartone/pyrsb"",\n    packages=setuptools.find_packages(),  # rsb\n        project_urls={\n        ""Bug Tracker"": ""https://github.com/michelemartone/pyrsb/issues"",\n        ""Source Code"": ""https://github.com/michelemartone/pyrsb"",\n    },\n    classifiers=[\n        ""Programming Language :: Python :: 3"",\n        ""License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)"",\n        ""Operating System :: OS Independent"",\n        #""Operating System :: POSIX :: Linux"",\n    ],\n    ext_modules=[\n        Extension(\n            ""rsb"",\n            [""rsb.pyx"", ""librsb.pxd""],\n            libraries=[""rsb"", ""z"", ""hwloc"", ""gfortran""],\n            include_dirs=INCLUDE_DIRS,\n        )\n    ],\n    setup_requires=[""numpy"", ""scipy""],\n    install_requires=[""numpy"", ""scipy""],\n    cmdclass={""build_ext"": build_ext},\n    # package_data = { \'\': [\'rsb.pyx\',\'*.py\'] },\n    include_package_data=True,\n    python_requires="">=3.7"",\n)\n'"
test.py,2,"b'""""""\nlibrsb for python\nProof of concept, very limited interface code.\nAuthor: Michele Martone\nLicense: GPLv3+\n""""""\nimport math\nimport sys\nimport numpy as np\nimport scipy as sp\nimport rsb\n\n\ndef printf(format, *args):\n    """"""\n    Printf-like shorthand.\n    """"""\n    sys.stdout.write(format % args)\n\n\ndef bench(timeout, a, x, y):\n    """"""\n    Benchmark multiplication operation.\n    :param timeout: benchmark time\n    :param a: matrix\n    :param x: right hand side vector\n    :param y: result vector\n    :return: a tuple with operation time, benchmark time, performed iterations\n    """"""\n    iterations = 0\n    dt = -rsb.rsb_time()\n    while dt + rsb.rsb_time() < timeout:\n        iterations = iterations + 1\n        y += a * x  # See __mul__\n        # a.spmm(x,y) # This form avoids the copy of y.\n    dt = dt + rsb.rsb_time()\n    op_dt = dt / iterations\n    return (op_dt, dt, iterations)\n\n\nWANT_VERBOSE = 0\nWANT_AUTOTUNE = 0\nWANT_VERBOSE_TUNING = False\nWANT_PSF = ""csr""\nWANT_NRHS = [1, 2, 3, 4, 5, 6, 7, 8]\nWANT_NRA = [10, 30, 100, 300, 1000, 3000, 10000]\n\n\ndef bench_both(a, c, psf, nrhs=1):\n    """"""\n    Perform comparative benchmark: rsb vs csr.\n    :param a: rsb matrix\n    :param c: csr matrix\n    :param psf: format string for matrix c\n    :param nrhs: number of right-hand-side vectors\n    """"""\n    timeout = 0.2\n    # timeout=2.0\n    if WANT_AUTOTUNE:\n        a.autotune(verbose=WANT_VERBOSE_TUNING)\n    if WANT_VERBOSE:\n        print(""Benchmarking SPMV on matrix "", a)\n    if WANT_VERBOSE:\n        a.mini_self_print_test()\n    x = np.ones([a.shape[1], nrhs], dtype=sp.double)\n    y = np.ones([a.shape[0], nrhs], dtype=sp.double)\n    nnz = a.nnz()\n    if WANT_VERBOSE:\n        a.do_print()\n        print(""x="", x)\n        print(""y="", y)\n        print(""Benchmarking y<-A*x+y ... "")\n    (psf_dt, dt, iterations) = bench(timeout, c, x, y)\n    psf_mflops = (2 * nrhs * nnz) / (psf_dt * 1e6)\n    if WANT_VERBOSE:\n        print(\n            ""Done "",\n            iterations,\n            "" "",\n            psf,\n            "" SPMV iterations in "",\n            dt,\n            "" s: "",\n            psf_dt,\n            ""s per iteration, "",\n            psf_mflops,\n            "" MFLOPS"",\n        )\n    (rsb_dt, dt, iterations) = bench(timeout, a, x, y)\n    rsb_mflops = (2 * nrhs * nnz) / (rsb_dt * 1e6)\n    if WANT_VERBOSE:\n        print(\n            ""Done "",\n            iterations,\n            "" rsb SPMV iterations in "",\n            dt,\n            "" s: "",\n            rsb_dt,\n            ""s per iteration, "",\n            rsb_mflops,\n            "" MFLOPS"",\n        )\n    su = psf_dt / rsb_dt\n    if WANT_VERBOSE:\n        print(""Speedup of RSB over "", psf, "" is "", su, ""x"")\n    printf(\n        ""PYRSB: nr: %d  nc: %d  nnz: %d  speedup: %.1e  nrhs: %d""\n        ""  psf_mflops: %.2e  rsb_mflops: %.2e  rsb_nsubm: %d\\n"",\n        a.shape[0],\n        a.shape[1],\n        nnz,\n        su,\n        nrhs,\n        psf_mflops,\n        rsb_mflops,\n        a.nsubm(),\n    )\n    if WANT_VERBOSE:\n        print(""y="", y)\n\n\ndef bench_matrix(a, c):\n    """"""\n    Perform comparative benchmark: rsb vs csr.\n    :param a: rsb matrix\n    :param c: csr matrix\n    """"""\n    for nrhs in WANT_NRHS:\n        bench_both(a, c, WANT_PSF, nrhs)\n    del a\n    del c\n\n\ndef bench_random_files():\n    """"""\n    Perform comparative benchmark on randomly generated matrices.\n    """"""\n    for nrA in WANT_NRA:\n        ncA = nrA\n        dnst = (math.sqrt(1.0 * nrA)) / nrA\n        # print(""# generating "",nrA,""x"",ncA,"" with density "",dnst)\n        printf(""# generating %d x %d with with density %.1e\\n"", nrA, ncA, dnst)\n        c = sp.sparse.rand(nrA, ncA, density=dnst, format=WANT_PSF, dtype=sp.double)\n        (I, J, V) = sp.sparse.find(c)\n        a = rsb.rsb_matrix((V, (I, J)), [nrA, ncA])\n        bench_matrix(a, c)\n\n\ndef bench_file(filename):\n    """"""\n    Perform comparative benchmark on matrices loaded from Matrix Market files.\n    :param filename: a Matrix Market file\n    """"""\n    print(""# loading from file "", filename)\n    a = rsb.rsb_file_mtx_load(bytes(filename, encoding=""utf-8""))\n    if a is not None:\n        (I, J, V) = a.find()\n        c = sp.sparse.csr_matrix((V, (I, J)))\n        bench_matrix(a, c)\n\n\nif len(sys.argv) > 1:\n    for arg in sys.argv[1:]:\n        bench_file(arg)\nelse:\n    # bench_file(""venkat50.mtx.gz"")\n    bench_random_files()\n    # a.save(""file.mtx"")\nrsb.rsb_lib_exit()\n'"
