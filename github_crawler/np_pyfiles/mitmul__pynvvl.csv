file_path,api_count,code
setup.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport argparse\nimport os\nimport re\nimport shutil\nimport subprocess\nimport sys\nimport sysconfig\n\nfrom Cython.Distutils import build_ext\nfrom pkg_resources import get_distribution\nfrom setuptools import Extension\nfrom setuptools import setup\n\n\nCUDA_VERSION = subprocess.check_output(\n    \'nvcc -V | grep -oP ""release\\s([0-9\\.]+)"" | grep -oP ""([0-9\\.]+)""\',\n    shell=True).decode(\'utf-8\').strip()\n\n\ndef create_extensions():\n    sourcefiles = [\n        \'pynvvl/_nvvl.pyx\',\n    ]\n\n    # List up include paths\n    include_dirs = [\n        os.path.join(os.getcwd(), \'docker/include\'),\n        \'/usr/local/cuda/include\',\n        sysconfig.get_config_var(\'INCLUDEPY\'),\n    ]\n    if \'CPATH\' in os.environ:\n        include_dirs.insert(1, os.environ[\'CPATH\'])\n\n    # List up library paths\n    library_dirs = [\n        os.path.join(os.getcwd(), \'docker/lib/cuda-{}\'.format(CUDA_VERSION)),\n    ]\n    if \'LD_LIBRARY_PATH\' in os.environ:\n        library_dirs.append(os.environ[\'LD_LIBRARY_PATH\'])\n    if \'LIBRARY_PATH\' in os.environ:\n        library_dirs.append(os.environ[\'LIBRARY_PATH\'])\n\n    # List up libraries\n    libraries = [\n        \'nvvl\',\n    ]\n\n    # RPATH which will be set to pynvvl.so\n    rpath = [\n        \'$ORIGIN/_lib\',\n    ]\n\n    extensions = [\n        Extension(\n            \'pynvvl._nvvl\',\n            sourcefiles,\n            include_dirs=include_dirs,\n            library_dirs=library_dirs,\n            libraries=libraries,\n            language=\'c++\',\n            extra_compile_args=[\'-std=c++11\'],\n            extra_link_args=[\'-std=c++11\'],\n            runtime_library_dirs=rpath,\n        )\n    ]\n    return extensions\n\n\ndef find_lib_from_pathlist(libname, pathlists, **kwargs):\n    """"""Find library file from a list of paths""""""\n    \n    include_ver_variants = kwargs.pop(\'include_ver_variants\', True)\n    include_library_path = kwargs.pop(\'include_library_path\', True)\n\n    # pathlists is a list of strings (e.g. LIBRARY_PATH) or lists of paths\n    # so path_lists is a flattened list of directory paths\n    path_list = []\n    for lst in pathlists:\n        if type(lst) is str:\n            lst = re.split(r\':\', lst)\n        path_list += lst\n\n    if include_library_path:\n        path_list += re.split(r\':\', os.environ.get(\'LIBRARY_PATH\') or """")\n\n    for path in path_list:\n        try:\n            files = os.listdir(path)\n        except IOError:\n            continue\n\n        if libname in files:\n            return os.path.join(path, libname)\n\n        if include_ver_variants:\n            regexp = re.escape(libname) + r\'\\.\\d+$\'\n            libs = [f for f in files if re.match(regexp, f)]\n            if len(libs) > 0:\n                return os.path.join(path, libs[0])\n\n    raise RuntimeError(""Cannot find a library \'{}\' ""\n                       ""in the specified paths"".format(libname))\n\n\ndef prepare_package_data():\n    lib_names = [\n        \'libnvvl.so\',\n        \'libavformat.so.57\',\n        \'libavfilter.so.6\',\n        \'libavcodec.so.57\',\n        \'libavutil.so.55\',\n    ]\n    docker_lib_dir = \'docker/lib/cuda-{}\'.format(CUDA_VERSION)\n    wheel_libs = [find_lib_from_pathlist(l, [docker_lib_dir]) for l in lib_names]\n\n    lib_dir = \'pynvvl/_lib\'\n    if not os.path.exists(lib_dir):\n        os.makedirs(lib_dir)\n    libs = []\n    for lib in wheel_libs:\n        libname = os.path.basename(lib)\n        libpath = os.path.join(lib_dir, libname)\n        shutil.copy2(lib, libpath)\n        libs.append(os.path.join(\'_lib\', libname))\n\n    package_data = {\n        \'pynvvl\': libs\n    }\n\n    return package_data\n\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\'--package-name\', type=str, default=\'pynvvl\')\nargs, sys.argv = parser.parse_known_args(sys.argv)\n\npackage_data = prepare_package_data()\nextensions = create_extensions()\n\ncupy_package_name = None\ntry:\n    cupy_package_name = get_distribution(\n        \'cupy-cuda{}\'.format(CUDA_VERSION.replace(\'.\', \'\')))\n    cupy_package_name = cupy_package_name.project_name\nexcept Exception:\n    cupy_package_name = \'cupy\'\n\nprint(\'=\' * 30)\nprint(\'CuPy Package Name:\', cupy_package_name)\nprint(\'=\' * 30)\n\ndescription = \\\n    \'PyNVVL: A Python wrapper for NVIDIA Video Loader (NVVL) with CuPy\'\n\nsetup(\n    name=args.package_name,\n    url=\'https://github.com/mitmul/pynvvl\',\n    version=\'0.0.3a2\',\n    author=\'Shunta Saito\',\n    author_email=\'shunta.saito@gmail.com\',\n    description=description,\n    long_description=open(\'README.md\').read(),\n    long_description_content_type=\'text/markdown\',\n    license=\'MIT License\',\n    packages=[\'pynvvl\'],\n    package_data=package_data,\n    install_requires=[\n        \'{}>=4.5.0\'.format(cupy_package_name),\n    ],\n    setup_requires=[\n        \'cython>=0.28.0\',\n    ],\n    ext_modules=extensions,\n    cmdclass={\'build_ext\': build_ext},\n)\n'"
docker/build_wheels.py,0,"b'import os\nimport subprocess\n\n\nCYTHON_VERSION = \'0.28.0\'\nCUPY_VERSION = \'4.5.0\'\nPYNVVL_VERSION = \'0.0.3a2\'\n\nWHEEL_CONFIGS = {\n    \'8.0\': {\n        \'lib\': \'docker/lib/cuda-8.0\',\n        \'tag\': \'mitmul/pynvvl:cuda-8.0-wheels\',\n        \'test\': \'mitmul/pynvvl:cuda-8.0-test\',\n    },\n    \'9.0\': {\n        \'lib\': \'docker/lib/cuda-9.0\',\n        \'tag\': \'mitmul/pynvvl:cuda-9.0-wheels\',\n        \'test\': \'mitmul/pynvvl:cuda-9.0-test\',\n    },\n    \'9.1\': {\n        \'lib\': \'docker/lib/cuda-9.1\',\n        \'tag\': \'mitmul/pynvvl:cuda-9.1-wheels\',\n        \'test\': \'mitmul/pynvvl:cuda-9.1-test\',\n    },\n    \'9.2\': {\n        \'lib\': \'docker/lib/cuda-9.2\',\n        \'tag\': \'mitmul/pynvvl:cuda-9.2-wheels\',\n        \'test\': \'mitmul/pynvvl:cuda-9.2-test\',\n    },\n}\n\nPYTHON_VERSIONS = {\n    \'2.7.6\': {\n        \'python_tag\': \'cp27\',\n        \'linux_abi_tag\': \'cp27mu\',\n    },\n    \'3.4.7\': {\n        \'python_tag\': \'cp34\',\n        \'linux_abi_tag\': \'cp34m\',\n    },\n    \'3.5.1\': {\n        \'python_tag\': \'cp35\',\n        \'linux_abi_tag\': \'cp35m\',\n    },\n    \'3.6.0\': {\n        \'python_tag\': \'cp36\',\n        \'linux_abi_tag\': \'cp36m\',\n    },\n}\n\n\ndef build_docker_image(cuda_version, tag, test):\n    python_versions = \' \'.join(PYTHON_VERSIONS.keys())\n    cudda_version_no_dot = cuda_version.replace(\'.\', \'\')\n    subprocess.call([\n        \'docker\', \'build\',\n        \'--build-arg\', \'cuda_version={}\'.format(cuda_version),\n        \'--build-arg\', \'python_versions={}\'.format(python_versions),\n        \'--build-arg\', \'cython_version={}\'.format(CYTHON_VERSION),\n        \'--build-arg\', \'cupy_version={}\'.format(CUPY_VERSION),\n        \'--build-arg\', \'cupy_package_name=cupy-cuda{}\'.format(\n            cudda_version_no_dot),\n        \'-t\', tag,\n        \'-f\', \'docker/Dockerfile.wheels\', \'docker\'\n    ])\n    subprocess.call([\n        \'docker\', \'build\',\n        \'--build-arg\', \'cuda_version={}\'.format(cuda_version),\n        \'--build-arg\', \'python_versions={}\'.format(python_versions),\n        \'--build-arg\', \'cython_version={}\'.format(CYTHON_VERSION),\n        \'--build-arg\', \'cupy_version={}\'.format(CUPY_VERSION),\n        \'--build-arg\', \'pynvvl_version={}\'.format(PYNVVL_VERSION),\n        \'--build-arg\', \'cupy_package_name=cupy-cuda{}\'.format(\n            cudda_version_no_dot),\n        \'-t\', test,\n        \'-f\', \'docker/Dockerfile.test\', \'docker\'\n    ])\n\n\ndef build_wheels(cuda_version):\n    for python_version in PYTHON_VERSIONS.keys():\n        print(\'-\' * 10,\n              \'Building for Python {}\'.format(python_version),\n              \'-\' * 10)\n        subprocess.call(\n            \'nvidia-docker run\'\n            \' --rm\'\n            \' -v {source_dir}:/pynvvl\'\n            \' -t {tag}\'\n            \' bash -c\'\n            \' "" \\\n            ln -s /usr/local/nvidia/lib/libnvcuvid.so.1 /usr/local/lib/libnvcuvid.so && \\\n            pyenv global {python_version} && pyenv rehash && \\\n            cd /pynvvl && python setup.py bdist_wheel \\\n            -d dist/cuda-{cuda_version} \\\n            --package-name {package_name} \\\n            ""\'.format(\n                source_dir=os.getcwd(),\n                tag=WHEEL_CONFIGS[cuda_version][\'tag\'],\n                python_version=python_version,\n                cuda_version=cuda_version,\n                package_name=\'pynvvl_cuda{}\'.format(\n                    cuda_version.replace(\'.\', \'\')),\n            ), shell=True)\n\n    subprocess.call(\n        \'nvidia-docker run\'\n        \' --rm\'\n        \' -v {source_dir}:/pynvvl\'\n        \' -t {tag}\'\n        \' bash -c\'\n        \' "" \\\n        for file in \\$(ls /pynvvl/dist/cuda-{cuda_version}/*.whl); \\\n        do \\\n            echo \\$file | \\\n            sed --expression=\\""s/linux/manylinux1/g\\"" | \\\n            xargs -IXXX mv \\$file XXX; \\\n        done; \\\n        ""\'.format(\n            source_dir=os.getcwd(),\n            tag=WHEEL_CONFIGS[cuda_version][\'tag\'],\n            cuda_version=cuda_version,\n        ), shell=True)\n\n    for python_version, tags in PYTHON_VERSIONS.items():\n        print(\'-\' * 10,\n              \'Testing wheel for Python {}\'.format(python_version),\n              \'-\' * 10)\n        package_python = \'{}-{}\'.format(\n            tags[\'python_tag\'], tags[\'linux_abi_tag\'])\n\n        # Test the wheel\n        wheel_name = \'{}-{}-{}-manylinux1_x86_64.whl\'.format(\n            \'pynvvl_cuda{}\'.format(cuda_version.replace(\'.\', \'\')),\n            PYNVVL_VERSION,\n            package_python\n        )\n        subprocess.call(\n            \'nvidia-docker run\'\n            \' --rm\'\n            \' -v {source_dir}/examples:/examples\'\n            \' -v {source_dir}/dist/cuda-{cuda_version}:/wheels\'\n            \' -t {tag}\'\n            \' bash -c\'\n            \' "" \\\n            pyenv global {python_version} && pyenv rehash && \\\n            pip install /wheels/{wheel_name} && \\\n            cd / && python examples/simple_load.py \\\n            > /examples/cuda-{cuda_version}_python-{python_version}.txt && \\\n            mv /examples/sample.png \\\n            /examples/sample_cuda-{cuda_version}_python-{python_version}.png \\\n            ""\'.format(\n                source_dir=os.getcwd(),\n                tag=WHEEL_CONFIGS[cuda_version][\'test\'],\n                cuda_version=cuda_version,\n                python_version=python_version,\n                wheel_name=wheel_name,\n            ), shell=True)\n\n\n# Build Docker images\nfor cuda_version, wheel_config in WHEEL_CONFIGS.items():\n    build_docker_image(cuda_version, wheel_config[\'tag\'], wheel_config[\'test\'])\n\n# Build wheels\nfor cuda_version, wheel_config in WHEEL_CONFIGS.items():\n    print(\'-\' * 10, \'Building for CUDA {}\'.format(cuda_version), \'-\' * 10)\n    build_wheels(cuda_version)\n    print(\'=\' * 30)\n\n'"
examples/check_performance.py,2,"b""#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport glob\nimport os\nimport time\n\nimport imageio\nimport numpy as np\n\nimport cupy as cp\nimport pynvvl\n\nvideo_fn = 'examples/sample.mp4'\nN = 100\n\nloader = pynvvl.NVVLVideoLoader(0)\n\ntime_pynvvl = []\nfor _ in range(N):\n    st = time.time()\n    video = loader.read_sequence(video_fn)\n    time_pynvvl.append(time.time() - st)\nprint('PyNVVL: {} sec'.format(np.mean(time_pynvvl)))\n\ncp.get_default_memory_pool().free_all_blocks()\n\ntime_imageio = []\nfor _ in range(N):\n    st = time.time()\n    video = imageio.mimread(video_fn)\n    with cp.cuda.Device(0) as d:\n        video = cp.array(video)\n        d.synchronize()\n    time_imageio.append(time.time() - st)\nprint('ImageIO: {} sec'.format(np.mean(time_imageio)))\n"""
examples/load_to_array.py,0,"b""#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport pynvvl\nimport matplotlib.pyplot as plt\nimport cupy as cp\n\n\n# Create NVVLVideoLoader object\nloader = pynvvl.NVVLVideoLoader(device_id=0, log_level='error')\n\n# Show the number of frames in the video\nn_frames = loader.frame_count('examples/sample.mp4')\nprint('Number of frames:', n_frames)\n\n# Prepare an output array\nvideo = cp.empty((91, 3, 385, 512), dtype=cp.float32)\n\n# Load a video and return it as a CuPy array\nloader.read_sequence(\n    'examples/sample.mp4',\n    horiz_flip=True,\n    scale_height=512,\n    scale_width=512,\n    crop_y=60,\n    crop_height=385,\n    crop_width=512,\n    scale_method='Linear',\n    normalized=True,\n    out=video\n)\n\nprint(video.shape)  # => (91, 3, 385, 512): (n_frames, channels, height, width)\nprint(video.dtype)  # => float32\n\n# Get the first frame as numpy array\nframe = video[0].get()\nframe = frame.transpose(1, 2, 0)\n\nplt.imshow(frame)\nplt.savefig('examples/sample.png')\n"""
examples/simple_load.py,0,"b""#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport pynvvl\nimport matplotlib.pyplot as plt\n\n# Create NVVLVideoLoader object\nloader = pynvvl.NVVLVideoLoader(device_id=0, log_level='error')\n\n# Show the number of frames in the video\nn_frames = loader.frame_count('examples/sample.mp4')\nprint('Number of frames:', n_frames)\n\n# Load a video and return it as a CuPy array\nvideo = loader.read_sequence(\n    'examples/sample.mp4',\n    horiz_flip=True,\n    scale_height=512,\n    scale_width=512,\n    crop_y=60,\n    crop_height=385,\n    crop_width=512,\n    scale_method='Linear',\n    normalized=True\n)\n\nprint(video.shape)  # => (91, 3, 385, 512): (n_frames, channels, height, width)\nprint(video.dtype)  # => float32\n\n# Get the first frame as numpy array\nframe = video[0].get()\nframe = frame.transpose(1, 2, 0)\n\nplt.imshow(frame)\nplt.savefig('examples/sample.png')\n"""
pynvvl/__init__.py,0,"b""from pynvvl._nvvl import NVVLVideoLoader  # NOQA\n\n\n__copyright__    = 'Copyright (C) 2018 Shunta Saito'\n__version__      = '0.0.2a5'\n__license__      = 'MIT License'\n__author__       = 'Shunta Saito'\n__author_email__ = 'shunta.saito@gmail.com'\n__url__          = 'http://github.com/mitmul/pynvvl'\n"""
