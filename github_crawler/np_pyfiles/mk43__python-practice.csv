file_path,api_count,code
matplotlib/3D.py,5,"b""import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure()\nax = Axes3D(fig)\n\nX = np.arange(-4, 4, 0.25)\nY = np.arange(-4, 4, 0.25)\nX, Y = np.meshgrid(X, Y)\nR = np.sqrt(X ** 2 + Y ** 2)\nZ = np.sin(R)\n\nax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=plt.get_cmap('rainbow'))\n\nax.contourf(X, Y, Z, zdir='x', offset=-5, cmap=plt.get_cmap('rainbow'))\n\nplt.show()"""
matplotlib/__init__.py,0,b''
matplotlib/annotatesetting.py,3,"b'import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(-10, 10, 40)\ny = x + 5\n\nplt.figure()\nplt.plot(x, y, \'b-\')\n\nplt.xticks(np.linspace(-10, 10, 6))\nplt.yticks(np.linspace(-6, 14, 6))\n\nax = plt.gca()\nax.spines[\'right\'].set_color(\'none\')\nax.spines[\'top\'].set_color(\'none\')\n\nax.xaxis.set_ticks_position(\'bottom\')\nax.spines[\'bottom\'].set_position(\'zero\')\n\nax.yaxis.set_ticks_position(\'left\')\nax.spines[\'left\'].set_position(\'zero\')\n\nx0 = 4\ny0 = x0 + 5\nplt.plot([x0, x0], [0, y0], \'k--\', linewidth=2.5)\nplt.scatter([x0], [y0], color=\'k\')\n\nplt.annotate(r\'$(%s,\\ %s)$\' % (x0, y0), xy=(x0, y0),\n             xycoords=\'data\', xytext=(+30, -30),\n             textcoords=\'offset points\', fontsize=16,\n             arrowprops=dict(arrowstyle=\'->\', connectionstyle=""arc3,rad=.1""))\n\nplt.text(2, 14, r\'$y\\ =\\ x\\ +\\ 5$\', fontdict={\'size\': 16, \'color\': \'r\'})\n\nplt.show()'"
matplotlib/axessetting.py,2,"b""import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(-10, 10, 40)\ny1 = 10 * x + 50\ny2 = x**2\n\nplt.figure()\nplt.plot(x, y1, 'b-')\nplt.plot(x, y2, 'b--')\nplt.xlim((-20, 20))\nplt.ylim((-60, 160))\nplt.xlabel('I am x')\nplt.ylabel('I am y')\n\nplt.xticks(np.linspace(-20, 20, 5))\nplt.yticks([0, 50, 100], [r'$bad$', r'$normal$', r'$good$'])\n\nboderparameter = plt.gca()\nboderparameter.spines['right'].set_color('none')\nboderparameter.spines['top'].set_color('none')\n\nboderparameter.xaxis.set_ticks_position('top')\n\nboderparameter.spines['left'].set_position(('data',0))\nboderparameter.spines['bottom'].set_position(('data',0))\nboderparameter.xaxis.set_ticks_position('bottom')\nboderparameter.set_xlabel('')\nboderparameter.set_ylabel('')\n\nplt.show()"""
matplotlib/barchart.py,3,"b""import matplotlib.pyplot as plt\nimport numpy as np\n\nn = 12\nX = np.arange(n)\nY1 = np.random.uniform(0.1, 1.0, n)\nY2 = np.random.uniform(0.1, 1.0, n)\n\nplt.bar(X, +Y1)\nplt.bar(X, -Y2)\n\nplt.xlim(-.5, n)\nplt.xticks(())\nplt.ylim(-1.25, 1.25)\nplt.yticks(())\n\nfor x, y in zip(X, Y1):\n    plt.text(x, y + 0.02, '%.2f' % y, ha='center', va='bottom')\n\nfor x, y in zip(X, Y2):\n    plt.text(x, -y - 0.02, '%.2f' % y, ha='center', va='top')\n\nplt.show()\n"""
matplotlib/contours.py,4,"b""import matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef f(x, y):\n    return (1 - x / 2 + x ** 5 + y ** 3) * np.exp(-x ** 2 - y ** 2)\n\n\nn = 256\nx = np.linspace(-3, 3, n)\ny = np.linspace(-3, 3, n)\nX, Y = np.meshgrid(x, y)\n\nplt.contourf(X, Y, f(X, Y), 12, alpha=.9, cmap=plt.cm.coolwarm)\n\nC = plt.contour(X, Y, f(X, Y), 12, colors='black')\n\nplt.clabel(C, inline=True, fontsize=10)\nplt.xticks(())\nplt.yticks(())\n\nplt.show()\n"""
matplotlib/gridsubplot.py,0,"b""import matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\n\n# method 1: subplot2grid\n##########################\nplt.figure()\nax1 = plt.subplot2grid((3, 3), (0, 0), colspan=3)  # stands for axes\nax1.plot([1, 2], [1, 2])\nax1.set_title('ax1_title')\nax2 = plt.subplot2grid((3, 3), (1, 0), colspan=2)\nax3 = plt.subplot2grid((3, 3), (1, 2), rowspan=2)\nax4 = plt.subplot2grid((3, 3), (2, 0))\nax4.scatter([1, 2], [2, 2])\nax4.set_xlabel('ax4_x')\nax4.set_ylabel('ax4_y')\nax5 = plt.subplot2grid((3, 3), (2, 1))\n\n# method 2: gridspec\n#########################\nplt.figure()\ngs = gridspec.GridSpec(3, 3)\n# use index from 0\nax6 = plt.subplot(gs[0, :])\nax7 = plt.subplot(gs[1, :2])\nax8 = plt.subplot(gs[1:, 2])\nax9 = plt.subplot(gs[-1, 0])\nax10 = plt.subplot(gs[-1, -2])\n\n# method 3: easy to define structure\n####################################\nf, ((ax11, ax12), (ax13, ax14)) = plt.subplots(2, 2, sharex=True, sharey=True)\nax11.scatter([1,2], [1,2])\n\nplt.tight_layout()\nplt.show()"""
matplotlib/image.py,1,"b""import matplotlib.pyplot as plt\nimport numpy as np\n\na = np.random.normal(2, 1, 16).reshape(4, 4)\n\nplt.imshow(a, interpolation='nearest', cmap='coolwarm', origin='lower')\n\nplt.colorbar(shrink=.98)\n\nplt.xticks(())\nplt.yticks(())\nplt.show()\n"""
matplotlib/knowfigure.py,3,"b'import matplotlib.pyplot as plt\nimport numpy as np\n\n# example 1\n# x = np.linspace(0, 10, 20)\n# y = x + 1\n#\n# plt.plot(x, y)\n# plt.show()\n\n# example 2\n# x = np.linspace(0, 10, 20)\n# y1 = x + 1\n# y2 = -x + 1\n#\n# plt.plot(x, y1)\n# plt.plot(x, y2)\n# plt.show()\n\n# example 3\nx = np.linspace(0, 10, 20)\ny1 = x + 1\ny2 = -x - 10\nplt.figure()\nplt.plot(x, y1)\nplt.figure(figsize=(9, 6))\nplt.plot(x, y2)\nplt.show()\n\n'"
matplotlib/legendsetting.py,1,"b""import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(-10, 10, 40)\ny1 = 10 * x + 50\ny2 = x**2\n\nplt.figure()\nl1, = plt.plot(x, y1, 'b-')\nl2, = plt.plot(x, y2, 'b--')\n\nplt.legend(handles=[l1, l2], labels=[r'$line\\ 1$', r'$line\\ 2$'],  loc='best')\n\nplt.show()"""
matplotlib/linestyle.py,1,"b""import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 20)\ny1 = x + 1\ny2 = x + 2\ny3 = x + 3\ny4 = x + 4\ny5 = x + 5\ny6 = x + 6\ny7 = x + 7\n\nplt.figure()\nplt.plot(x, y1, 'bo')\nplt.plot(x, y2, 'r-')\nplt.plot(x, y3, 'g--')\nplt.plot(x, y4, 'y.-')\nplt.plot(x, y5, 'm^', x, y6, 'm-')\nplt.plot(x, y7, 'c-', linewidth=6)\n\nplt.show()"""
matplotlib/myanimation.py,4,"b""import numpy as np\nfrom matplotlib import pyplot as plt\nfrom matplotlib import animation\n\nfig, ax = plt.subplots()\n\nx = np.arange(0, 2*np.pi, 0.01)\nline, = ax.plot(x, np.sin(x))\n\n\ndef animate(i):\n    line.set_ydata(np.sin(x + i/10.0))  # update the data\n    return line,\n\n\n# Init only required for blitting to give a clean slate.\ndef init():\n    line.set_ydata(np.sin(x))\n    return line,\n\n# call the animator.  blit=True means only re-draw the parts that have changed.\n# blit=True dose not work on Mac, set blit=False\n# interval= update frequency\nani = animation.FuncAnimation(fig=fig, func=animate, frames=100, init_func=init,\n                              interval=20, blit=False)\n\n# save the animation as an mp4.  This requires ffmpeg or mencoder to be\n# installed.  The extra_args ensure that the x264 codec is used, so that\n# the video can be embedded in html5.  You may need to adjust this for\n# your system: for more information, see\n# http://matplotlib.sourceforge.net/api/animation_api.html\n# anim.save('basic_animation.mp4', fps=30, extra_args=['-vcodec', 'libx264'])\n\nani.save('myanimation.gif', writer='imagemagick')\n\nplt.show()"""
matplotlib/piechart.py,0,"b""import matplotlib.pyplot as plt\n\nlabels = 'Frogs', 'Hogs', 'Dogs', 'Logs'\nsizes = [15, 30, 45, 10]\nexplode = (0, 0.1, 0, 0)\ncolors = ['y', 'g', 'c', 'm']\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, colors=colors, explode=explode, labels=labels, autopct='%1.f%%', shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()"""
matplotlib/plotinplot.py,0,"b""import matplotlib.pyplot as plt\n\nfig = plt.figure()\nx = [1, 2, 3, 4, 5, 6, 7]\ny = [1, 3, 4, 2, 5, 8, 6]\n\n# below are all percentage\nleft, bottom, width, height = 0.1, 0.1, 0.8, 0.8\nax1 = fig.add_axes([left, bottom, width, height])  # main axes\nax1.plot(x, y, 'r')\nax1.set_xlabel('x')\nax1.set_ylabel('y')\nax1.set_title('title')\n\nax2 = fig.add_axes([0.2, 0.6, 0.25, 0.25])  # inside axes\nax2.plot(y, x, 'b')\nax2.set_xlabel('x')\nax2.set_ylabel('y')\nax2.set_title('title inside 1')\n\n\n# different method to add axes\n####################################\nplt.axes([0.6, 0.2, 0.25, 0.25])\nplt.plot(y[::-1], x, 'g')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('title inside 2')\n\nplt.show()\n"""
matplotlib/scattergraph.py,3,"b'import matplotlib.pyplot as plt\nimport numpy as np\n\nn = 1024\nX = np.random.normal(0, 1, n)\nY = np.random.normal(0, 1, n)\nT = np.arctan2(Y, X)\n\nplt.scatter(X, Y, s=50, c=T, alpha=.5)\n\nplt.xlim(-2.5, 2.5)\nplt.xticks(())\nplt.ylim(-2.5, 2.5)\nplt.yticks(())\n\nplt.show()\n'"
matplotlib/secondyaxis.py,1,"b""import matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(0, 10, 0.1)\ny1 = 0.05 * x**2\ny2 = -1 *y1\n\nfig, ax1 = plt.subplots()\n\nax2 = ax1.twinx()    # mirror the ax1\nax1.plot(x, y1, 'g-')\nax2.plot(x, y2, 'b-')\n\nax1.set_xlabel('X data')\nax1.set_ylabel('Y1 data', color='g')\nax2.set_ylabel('Y2 data', color='b')\n\nplt.show()"""
matplotlib/subplot.py,0,"b'import matplotlib.pyplot as plt\n\n# example 1:\n###############################\nplt.figure(figsize=(6, 4))\n# plt.subplot(n_rows, n_cols, plot_num)\nplt.subplot(2, 2, 1)\nplt.plot([0, 1], [0, 1])\n\nplt.subplot(222)\nplt.plot([0, 1], [0, 2])\n\nplt.subplot(223)\nplt.plot([0, 1], [0, 3])\n\nplt.subplot(224)\nplt.plot([0, 1], [0, 4])\n\nplt.tight_layout()\n\n# example 2:\n###############################\nplt.figure(figsize=(6, 4))\n# plt.subplot(n_rows, n_cols, plot_num)\nplt.subplot(2, 1, 1)\n# figure splits into 2 rows, 1 col, plot to the 1st sub-fig\nplt.plot([0, 1], [0, 1])\n\nplt.subplot(234)\n# figure splits into 2 rows, 3 col, plot to the 4th sub-fig\nplt.plot([0, 1], [0, 2])\n\nplt.subplot(235)\n# figure splits into 2 rows, 3 col, plot to the 5th sub-fig\nplt.plot([0, 1], [0, 3])\n\nplt.subplot(236)\n# figure splits into 2 rows, 3 col, plot to the 6th sub-fig\nplt.plot([0, 1], [0, 4])\n\n\nplt.tight_layout()\nplt.show()'"
matplotlib/generateGIF/linerregression.py,4,"b'# coding: utf-8\nfrom __future__ import print_function\nimport tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\nfrom scipy.interpolate import spline\n\ntrain_X = np.linspace(0, 10, 50)\nnoise = np.random.normal(0, 1, train_X.shape)\ntrain_Y = train_X * 1 - 2 + noise\n\nX = tf.placeholder(tf.float32)\nY = tf.placeholder(tf.float32)\n\nW = tf.Variable(-1., name=""weight"")\nb = tf.Variable(1., name=""bias"")\n\nactivation = tf.add(tf.multiply(X, W), b)\n\nlearning_rate = 0.0001\n\ncost = tf.reduce_sum(tf.pow(activation - Y, 2))\noptimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(cost)\n\ntraining_epochs = 1000\ndisplay_step = 40\n\nc_trace = []\nW_trace = []\nb_trace = []\nactivation_trace = []\n\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n    for epoch in range(training_epochs):\n        for (x, y) in zip(train_X, train_Y):\n            sess.run(optimizer, feed_dict={X: x, Y: y})\n        if epoch < 10 or epoch % display_step == 0:\n            c_tmp = sess.run(cost, feed_dict={X: train_X, Y: train_Y})\n            W_tmp = sess.run(W)\n            b_tmp = sess.run(b)\n            activation_tmp = sess.run(activation, feed_dict={X: train_X})\n            print(""Epoch: %04d"" % (epoch + 1), ""cost="", ""{:.9f}"".format(c_tmp), ""W="", W_tmp, ""b="", b_tmp)\n            c_trace.append(c_tmp)\n            W_trace.append(W_tmp)\n            b_trace.append(b_tmp)\n            activation_trace.append(activation_tmp)\n    print(""Optimization Finished!"")\n    print(""cost="", sess.run(cost, feed_dict={X: train_X, Y: train_Y}), ""W="", sess.run(W), ""b="", sess.run(b))\n\nfig, ax = plt.subplots()\nl1 = ax.scatter(train_X, train_Y, color=\'red\', label=r\'$Original\\ data$\')\nax.set_xlabel(r\'$X\\ data$\')\nax.set_ylabel(r\'$Y\\ data$\')\n\n\ndef update(i):\n    try:\n        ax.lines.pop(0)\n    except Exception:\n        pass\n    line, = ax.plot(train_X, activation_trace[i], \'g--\', label=r\'$Fitting\\ line$\', lw=2)\n    plt.legend(handles=[l1, line], loc=\'upper center\')\n    if i == len(activation_trace) - 1:\n        ax.text(6, -2, \'Cost: %s\' % c_trace[i], fontdict={\'size\': 16, \'color\': \'r\'})\n        xnew = np.linspace(0, 10, np.max(c_trace) - np.min(c_trace))\n        smooth = spline(np.linspace(0, 10, np.size(c_trace)), c_trace, xnew)\n        twinax = ax.twinx()\n        twinax.set_ylabel(r\'Cost\')\n        costline, = twinax.plot(xnew, smooth, \'b\', label=r\'$Cost\\ line$\', lw=2)\n        plt.legend(handles=[l1, line, costline], loc=\'upper center\')\n    return line,\n\n\nani = animation.FuncAnimation(fig, update, frames=len(activation_trace), interval=100)\nani.save(\'linearregression.gif\', writer=\'imagemagick\')\n\nplt.show()\n'"
matplotlib/generateGIF/redraw.py,4,"b""import numpy as np\nfrom matplotlib import pyplot as plt\nfrom matplotlib import animation\n\nfig, ax = plt.subplots()\n\nx = np.arange(0, 2 * np.pi, 0.01)\nax.plot(x, np.cos(x))\n\n\ndef init():\n    return ax.plot(x, np.sin(x))\n\n\ndef animate(i):\n    try:\n        ax.lines.pop(1)\n    except Exception:\n        pass\n    line = ax.plot(x, np.sin(x + i / 10.0), 'r')\n    return line,\n\n\nanimation = animation.FuncAnimation(fig=fig, func=animate, frames=100, init_func=init, interval=20, blit=False)\n\nanimation.save('redraw.gif', writer='imagemagick')\n\nplt.show()\n"""
matplotlib/generateGIF/resetvalue.py,5,"b""import numpy as np\nfrom matplotlib import pyplot as plt\nfrom matplotlib import animation\n\nfig, ax = plt.subplots()\n\nx = np.arange(0, 2 * np.pi, 0.01)\nline0 = ax.plot(x, np.cos(x))\nline, = ax.plot(x, np.sin(x))\n\n\ndef init():\n    line.set_ydata(np.sin(x))\n    return line,\n\n\ndef animate(i):\n    line.set_ydata(np.sin(x + i / 10.0))\n    return line,\n\n\nanimation = animation.FuncAnimation(fig=fig, func=animate, frames=100, init_func=init, interval=20, blit=False)\n\nanimation.save('resetvalue.gif', writer='imagemagick')\n\nplt.show()\n"""
