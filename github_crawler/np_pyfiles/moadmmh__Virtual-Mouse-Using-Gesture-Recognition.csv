file_path,api_count,code
Virtual_mouse.py,7,"b'import cv2\r\nimport numpy as np\r\nfrom pynput.mouse import Button ,Controller\r\nimport wx\r\n\r\nmouse=Controller()\r\n\r\napp=wx.App(False)\r\n(sx,sy)=wx.GetDisplaySize()\r\n(camx,camy)=(320,240)\r\ncap=cv2.VideoCapture(0)\r\ncap.set(3,camx)\r\ncap.set(4,camy)\r\n\r\n#range for HSV (green color)\r\nlower_g=np.array([33,70,30])\r\nupper_g=np.array([102,255,255])\r\n\r\n#Kerenel\r\nkernelOpen=np.ones((5,5))\r\nkernelClose=np.ones((20,20))\r\n\r\nmLocOld=np.array([0,0])\r\nmouseLoc=np.array([0,0])\r\n\r\nDampingFactor=2 #Damping factor must be greater than 1\r\n\r\nisPressed=0\r\nopenx,openy,openw,openh=(0,0,0,0)\r\n\r\nwhile True:\r\n\r\n    ret,img=cap.read()\r\n\r\n    img=cv2.resize(img,(340,220))\r\n    imgHSV=cv2.cvtColor(img,cv2.COLOR_BGR2HSV)\r\n    mask=cv2.inRange(imgHSV,lower_g,upper_g)\r\n\r\n    #using morphology to erase noise as maximum as possible \r\n    new_mask=cv2.morphologyEx(mask,cv2.MORPH_OPEN,kernelOpen)\r\n    another_mask=cv2.morphologyEx(new_mask,cv2.MORPH_CLOSE,kernelClose)\r\n    final_mask=another_mask\r\n    \r\n    im2,conts,h=cv2.findContours(final_mask,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)\r\n\r\n    # Once 2 objects are detected the center of there distance will be the reference on controlling the mouse\r\n    if(len(conts)==2):\r\n\r\n        #if the button is pressed we need to release it first\r\n        if(isPressed==1):\r\n            isPressed=0\r\n            mouse.release(Button.left)\r\n\r\n        #drawing the rectagle around both objects\r\n        x1,y1,w1,h1=cv2.boundingRect(conts[0])\r\n        x2,y2,w2,h2=cv2.boundingRect(conts[1])\r\n        cv2.rectangle(img,(x1,y1),(x1+w1,y1+h1),(255,0,0),2)\r\n        cv2.rectangle(img,(x2,y2),(x2+w2,y2+h2),(255,0,0),2)\r\n\r\n        #the line between the center of the previous rectangles\r\n        cx1=int(x1+w1/2)\r\n        cy1=int(y1+h1/2)\r\n        cx2=int(x2+w2/2)\r\n        cy2=int(y2+h2/2)\r\n        cv2.line(img,(cx1,cy1),(cx2,cy2),(255,0,0),2)\r\n\r\n        #the center of that line (reference point)\r\n        clx=int((cx1+cx2)/2)\r\n        cly=int((cy1+cy2)/2)\r\n        cv2.circle(img,(clx,cly),2,(0,0,255),2)\r\n\r\n        #adding the damping factor so that the movement of the mouse is smoother\r\n        mouseLoc=mLocOld+((clx,cly)-mLocOld)/DampingFactor\r\n        mouse.position=(sx-int((mouseLoc[0]*sx)/camx),int((mouseLoc[1]*sy)/camy))\r\n        while mouse.position!=(sx-int((mouseLoc[0]*sx)/camx),int((mouseLoc[1]*sy)/camy)):\r\n            pass\r\n\r\n        #setting the old location to the current mouse location\r\n        mLocOld=mouseLoc\r\n\r\n        #these variables were added so that we get the outer rectangle that combines both objects \r\n        openx,openy,openw,openh=cv2.boundingRect(np.array([[[x1,y1],[x1+w1,y1+h1],[x2,y2],[x2+w2,y2+h2]]]))\r\n\r\n    #when there\'s only when object detected it will act as a left click mouse    \r\n    elif(len(conts)==1):\r\n        x,y,w,h=cv2.boundingRect(conts[0])\r\n\r\n        # we check first and we allow the press fct if it\'s not pressed yet\r\n        #we did that to avoid the continues pressing \r\n        if(isPressed==0):\r\n\r\n            if(abs((w*h-openw*openh)*100/(w*h))<30): #the difference between th combined rectangle for both objct and the \r\n                isPressed=1                          #the outer rectangle is not more than 30%\r\n                mouse.press(Button.left)\r\n                openx,openy,openw,openh=(0,0,0,0)\r\n\r\n        #this else was added so that if there\'s only one object detected it will not act as a mouse  \r\n        else:\r\n            #getting rectangle coordinates and drawing it \r\n            x,y,w,h=cv2.boundingRect(conts[0])\r\n            cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)\r\n\r\n            #getting the center of the circle that will be inside the outer rectangle\r\n            cx=int(x+w/2)\r\n            cy=int(y+h/2)\r\n            cv2.circle(img,(cx,cy),int((w+h)/4),(0,0,255),2)#drawing that circle\r\n\r\n            mouseLoc=mLocOld+((cx,cy)-mLocOld)/DampingFactor\r\n            mouse.position=(sx-int((mouseLoc[0]*sx)/camx),int((mouseLoc[1]*sy)/camy))\r\n            while mouse.position!=(sx-int((mouseLoc[0]*sx)/camx),int((mouseLoc[1]*sy)/camy)):\r\n                pass\r\n            mLocOld=mouseLoc\r\n\r\n        \r\n        \r\n    #showing the results \r\n    cv2.imshow(""Virtual mouse"",img)\r\n\r\n    #waiting for \'W\' to be pressed to quit \r\n    if cv2.waitKey(1) & 0xFF==ord(\'w\'):\r\n        break\r\n\r\ncap.release()\r\ncv2.destroyAllWindows()\r\n'"
