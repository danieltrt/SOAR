file_path,api_count,code
Layers.py,0,"b'# import Neuron\n\n\nclass Layers:\n    def __init__(self, neurons):\n        self.neurons = neurons\n\n    def activate(self, inputs):\n        outputs = list()\n        for neuron in self.neurons:\n            outputs.append(neuron.activate(inputs))\n        return outputs\n'"
NeuralNetwork.py,1,"b'from Layers import Layers\nfrom Neuron import Neuron\nimport numpy as np\nimport random\n\n\nclass NeuralNetwork:\n    def __init__(self, n, m, k):\n        self.layers = [start_layer(n, 1), start_layer(m, n), start_layer(k, m)]\n\n    def activate(self, inputs):\n        outputs = list()\n\n        for layer in self.layers:\n            outputs = layer.activate(inputs)\n        return outputs\n\n\ndef start_layer(neurons_count, weights_count):\n    neurons = list()\n    for i in range(neurons_count):\n        neuron = Neuron(np.random.rand(weights_count), random.random())\n        neurons.append(neuron)\n    return Layers(neurons)\n\n\nNeuralNetwork(1, 2, 1)'"
Neuron.py,1,"b'import numpy as np\nimport math as math\n\n\nclass Neuron:\n    def __init__(self, weights, bias):\n        self.weights = weights\n        self.bias = bias\n\n    def activate(self, inputs):\n        return 1 / (1 + math.exp(-dot_product(inputs, self.weights)) - self.bias)\n\n\ndef dot_product(inputs, weight):\n    return sum((np.multiply(inputs, weight)))\n\n'"
