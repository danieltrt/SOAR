file_path,api_count,code
qwiklabs/deploying_a_python_flask_web_application_to_app_engine_flexible/flex_and_vision/main.py,0,"b'# Copyright 2017 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom datetime import datetime\nimport logging\nimport os\n\nfrom flask import Flask, redirect, render_template, request\n\n# import our Google Cloud client libraries for Datastore, Storage, and Vision\nfrom google.cloud import datastore\nfrom google.cloud import storage\nfrom google.cloud import vision\n\n\nCLOUD_STORAGE_BUCKET = os.environ.get(\'CLOUD_STORAGE_BUCKET\')\n\n\nAPP = Flask(__name__)\n\n\n@APP.route(\'/\')\ndef homepage():\n    """"""homepage""""""\n    # Create a Cloud Datastore client.\n    datastore_client = datastore.Client()\n\n    # Use the Cloud Datastore client to fetch information from Datastore about\n    # each photo.\n    query = datastore_client.query(kind=\'Faces\')\n    image_entities = list(query.fetch())\n\n    # Return a Jinja2 HTML template and pass in image_entities as a parameter.\n    return render_template(\'homepage.html\', image_entities=image_entities)\n\n\n@APP.route(\'/upload_photo\', methods=[\'GET\', \'POST\'])\ndef upload_photo():\n    """"""upload_photo""""""\n    photo = request.files[\'file\']\n\n    # Create a Cloud Storage client.\n    storage_client = storage.Client()\n\n    # Get the bucket that the file will be uploaded to.\n    bucket = storage_client.get_bucket(CLOUD_STORAGE_BUCKET)\n\n    # Create a new blob and upload the file\'s content.\n    blob = bucket.blob(photo.filename)\n    blob.upload_from_string(\n        photo.read(), content_type=photo.content_type)\n\n    # Make the blob publicly viewable.\n    blob.make_public()\n\n    # Create a Cloud Vision client.\n    vision_client = vision.ImageAnnotatorClient()\n\n    # Use the Cloud Vision client to detect a face for our image.\n    source_uri = \'gs://{}/{}\'.format(CLOUD_STORAGE_BUCKET, blob.name)\n    image = vision.types.Image(\n        source=vision.types.ImageSource(gcs_image_uri=source_uri))\n    faces = vision_client.face_detection(image).face_annotations\n\n    # If a face is detected, save to Datastore the likelihood that the face\n    # displays \'joy,\' as determined by Google\'s Machine Learning algorithm.\n    if len(faces) > 0:\n        face = faces[0]\n\n        # Convert the likelihood string.\n        likelihoods = [\n            \'Unknown\', \'Very Unlikely\', \'Unlikely\', \'Possible\', \'Likely\',\n            \'Very Likely\']\n        face_joy = likelihoods[face.joy_likelihood]\n    else:\n        face_joy = \'Unknown\'\n\n    ##\n    # Create a Cloud Datastore client.\n    #   Datastore is Google Cloud\'s NoSQL database solution.\n    #   Data is stored in objects called entities.\n    #   Each entity is assigned a unique identifying key, which can be created using a kind and a key name string.\n    #   A kind is an organizational bucket for what type of entity it is.\n    datastore_client = datastore.Client()\n\n    # Fetch the current date / time.\n    current_datetime = datetime.now()\n\n    # The kind for the new entity.\n    kind = \'Faces\'\n\n    # The name/ID for the new entity.\n    name = blob.name\n\n    # Create the Cloud Datastore key for the new entity.\n    key = datastore_client.key(kind, name)\n\n    # Construct the new entity using the key. Set dictionary values for entity\n    # keys blob_name, storage_public_url, timestamp, and joy.\n    entity = datastore.Entity(key)\n    entity[\'blob_name\'] = blob.name\n    entity[\'image_public_url\'] = blob.public_url\n    entity[\'timestamp\'] = current_datetime\n    entity[\'joy\'] = face_joy\n\n    # Save the new entity to Datastore.\n    datastore_client.put(entity)\n\n    # Redirect to the home page.\n    return redirect(\'/\')\n\n\n@APP.errorhandler(500)\ndef server_error(err):\n    """"""server_error""""""\n    logging.exception(\'An error occurred during a request.\')\n    return """"""\n    An internal error occurred: <pre>{}</pre>\n    See logs for full stacktrace.\n    """""".format(err), 500\n\n\nif __name__ == \'__main__\':\n    # This is used when running locally. Gunicorn is used to run the\n    # application on Google App Engine. See entrypoint in app.yaml.\n    APP.run(host=\'127.0.0.1\', port=8080, debug=True)\n'"
qwiklabs/deploying_a_python_flask_web_application_to_app_engine_flexible/flex_and_vision/main_test.py,0,"b'# Copyright 2017 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport pytest\nimport requests\nimport six\n\nimport main\n\nTEST_PHOTO_URL = (\n    \'https://upload.wikimedia.org/wikipedia/commons/5/5e/\'\n    \'John_F._Kennedy%2C_White_House_photo_portrait%2C_looking_up.jpg\')\n\n\n@pytest.fixture\ndef app():\n    main.app.testing = True\n    client = main.app.test_client()\n    return client\n\n\ndef test_index(app):\n    r = app.get(\'/\')\n    assert r.status_code == 200\n\n\ndef test_upload_photo(app):\n    test_photo_data = requests.get(TEST_PHOTO_URL).content\n\n    r = app.post(\n        \'/upload_photo\',\n        data={\n            \'file\': (six.BytesIO(test_photo_data), \'flex_and_vision.jpg\')\n        }\n    )\n\n    assert r.status_code == 302\n'"
