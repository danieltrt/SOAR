file_path,api_count,code
homography.py,16,"b'#!/usr/bin/python\n# -*- coding: utf-8 -*-\n""""""\n\xe3\x83\x9b\xe3\x83\xa2\xe3\x82\xb0\xe3\x83\xa9\xe3\x83\x95\xe3\x82\xa3\xe5\xa4\x89\xe6\x8f\x9b\xe3\x81\xae\xe3\x83\xa2\xe3\x82\xb8\xe3\x83\xa5\xe3\x83\xbc\xe3\x83\xab\n\xe4\xbb\xa5\xe4\xb8\x8b\xe3\x81\xae2\xe7\x82\xb9\xe3\x81\x8b\xe3\x82\x89\xe3\x80\x81\xe6\x8c\x87\xe5\xae\x9a\xe3\x81\x97\xe3\x81\x9f\xe5\x88\x87\xe3\x82\x8a\xe5\x87\xba\xe3\x81\x97\xe7\xaf\x84\xe5\x9b\xb2\xe3\x81\xae\xe6\x8f\x8f\xe7\x94\xbb\xe5\x86\x85\xe5\xae\xb9\xe3\x82\x92\xe5\xbc\x95\xe3\x81\x8d\xe4\xbc\xb8\xe3\x81\xb0\xe3\x81\x97\xe3\x81\x9f\xe3\x80\x81\xe5\xa4\x89\xe6\x8f\x9b\xe5\x85\x83\xe7\x94\xbb\xe5\x83\x8f\xe3\x81\xa8\xe5\x90\x8c\xe3\x82\xb5\xe3\x82\xa4\xe3\x82\xba\xe3\x81\xae\xe7\x94\xbb\xe5\x83\x8f\xe3\x82\x92\xe7\x94\x9f\xe6\x88\x90\xe3\x81\x99\xe3\x82\x8b\xe3\x80\x82\n1. \xe5\xa4\x89\xe6\x8f\x9b\xe5\x85\x83\xe7\x94\xbb\xe5\x83\x8f\n2. \xe5\xa4\x89\xe6\x8f\x9b\xe5\x85\x83\xe7\x94\xbb\xe5\x83\x8f\xe4\xb8\xad\xe3\x81\xae\xe5\x88\x87\xe3\x82\x8a\xe5\x87\xba\xe3\x81\x97\xe5\xaf\xbe\xe8\xb1\xa1\xe7\x89\xa9\xe3\x81\xae\xe5\x9b\x9b\xe9\x9a\x85(\xe9\xa0\x82\xe7\x82\xb9)\xe3\x81\xae\xe5\xba\xa7\xe6\xa8\x99\xe3\x81\xa8\xe3\x80\x81\xe5\x90\x84\xe5\xba\xa7\xe6\xa8\x99\xe3\x81\xae\xe7\xa7\xbb\xe5\x8b\x95\xe5\x85\x88\xe3\x81\xa8\xe3\x81\xaa\xe3\x82\x8b\xe5\xba\xa7\xe6\xa8\x99\xe3\x81\xae\xe3\x83\x9a\xe3\x82\xa2\n""""""\n\nimport numpy as np\nfrom PIL import Image\n\n\ndef transform(img, origin_corner_list, destination_corner_list=None):\n    # type: (Image.Image, list, list) -> Image.Image\n    """"""\n    :param img: base image object\n    :param origin_corner_list: crop corner list for the area [[x1, y1], [x2, y2], [x3, y3], [x4, y4]]\n    :param destination_corner_list: destination corner list for the area [[x1, y1], [x2, y2], [x3, y3], [x4, y4]]\n    :return: transformed image object\n    """"""\n    assert len(origin_corner_list) == 4\n\n    if destination_corner_list is None:\n        width, height = img.size\n        destination_corner_list = [[0, 0], [0, height], [width, height], [width, 0]]\n\n    # \xe3\x83\x9b\xe3\x83\xa2\xe3\x82\xb0\xe3\x83\xa9\xe3\x83\x95\xe3\x82\xa3\xe5\xa4\x89\xe6\x8f\x9b\xe3\x81\xab\xe5\xbf\x85\xe8\xa6\x81\xe3\x81\xaa\xe5\x88\x87\xe3\x82\x8a\xe5\x87\xba\xe3\x81\x97\xe5\xba\xa7\xe6\xa8\x99\xe3\x83\xbb\xe5\xa4\x89\xe6\x8f\x9b\xe5\x85\x88\xe5\xba\xa7\xe6\xa8\x99\xe3\x81\xae\xe3\x83\x91\xe3\x83\xa9\xe3\x83\xa1\xe3\x83\xbc\xe3\x82\xbf\xe3\x82\x92\xe7\x94\x9f\xe6\x88\x90\xe3\x80\x82\n    origin_corner_list = np.array(origin_corner_list)\n    origin = __convert_corner_list_to_homography_param(origin_corner_list.T)\n    destination_corner_list = np.array(destination_corner_list)\n    dest = __convert_corner_list_to_homography_param(destination_corner_list.T)\n\n    # \xe3\x83\x9b\xe3\x83\xa2\xe3\x82\xb0\xe3\x83\xa9\xe3\x83\x95\xe3\x82\xa3\xe5\xa4\x89\xe6\x8f\x9b\xe8\xa1\x8c\xe5\x88\x97(\xe5\xa4\x89\xe6\x8f\x9b\xe5\x85\x88 -> \xe5\xa4\x89\xe6\x8f\x9b\xe5\x85\x83 \xe3\x81\xae\xe5\xa4\x89\xe6\x8f\x9b\xe7\x94\xa8)\xe3\x82\x92\xe5\x8f\x96\xe5\xbe\x97\n    # \xe3\x81\x84\xe3\x81\x9a\xe3\x82\x8c\xe3\x81\xae\xe5\x88\x87\xe3\x82\x8a\xe5\x87\xba\xe3\x81\x97\xe5\xba\xa7\xe6\xa8\x99\xe3\x81\xab\xe3\x82\x82\xe9\x80\x9a\xe3\x81\x98\xe3\x82\x8b\xe3\x80\x81\xe5\xa4\x89\xe6\x8f\x9b\xe5\xbe\x8c\xe3\x81\xae\xe5\xba\xa7\xe6\xa8\x99\xe3\x81\xa8\xe3\x81\xae\xe9\x96\xa2\xe4\xbf\x82\xe3\x82\x92\xe7\xa4\xba\xe3\x81\x99\xe6\x95\xb0\xe5\xbc\x8f(\xe8\xa1\x8c\xe5\x88\x97)\xe3\x82\x92\xe6\xb1\x82\xe3\x82\x81\xe3\x82\x8b\xe3\x82\xa4\xe3\x83\xa1\xe3\x83\xbc\xe3\x82\xb8\xe3\x80\x82\n    homography_matrix = __calculate_homography_matrix(origin, dest)\n    # \xe9\x80\x86\xe8\xa1\x8c\xe5\x88\x97\xe3\x82\x92\xe4\xbd\x9c\xe3\x82\x8b(\xe5\xa4\x89\xe6\x8f\x9b\xe5\x85\x83 -> \xe5\xa4\x89\xe6\x8f\x9b\xe5\x85\x88 \xe3\x81\xae\xe5\xa4\x89\xe6\x8f\x9b\xe7\x94\xa8)\n    inv_homography_matrix = np.linalg.inv(homography_matrix)\n    inv_homography_matrix /= inv_homography_matrix[2, 2]\n    homography_param = inv_homography_matrix.ravel()\n\n    # \xe5\x87\xba\xe5\x8a\x9b\xe3\x81\x99\xe3\x82\x8b\xe7\x94\xbb\xe5\x83\x8f\xe3\x82\xb5\xe3\x82\xa4\xe3\x82\xba\xe3\x82\x92\xe8\xa8\x88\xe7\xae\x97\xe3\x81\x99\xe3\x82\x8b\xe3\x80\x82\xe5\xa4\x89\xe6\x8f\x9b\xe5\xbe\x8c\xe3\x81\xae\xe7\x94\xbb\xe5\x83\x8f\xe3\x81\x8c\xe3\x81\x99\xe3\x81\xa3\xe3\x81\xbd\xe3\x82\x8a\xe3\x81\xa8\xe5\x8f\x8e\xe3\x81\xbe\xe3\x82\x8b\xe3\x82\xb5\xe3\x82\xa4\xe3\x82\xba\xe3\x81\xb8\xe3\x81\xa8\xe5\xa4\x89\xe6\x8f\x9b\xe3\x81\x99\xe3\x82\x8b\xe3\x80\x82\n    x_list = destination_corner_list[:, 0]\n    y_list = destination_corner_list[:, 1]\n    new_width = np.max(x_list) - np.min(x_list)\n    new_height = np.max(y_list) - np.min(y_list)\n\n    # \xe7\xb2\xbe\xe5\xba\xa6\xe3\x81\xa8\xe8\xb2\xa0\xe8\x8d\xb7\xe3\x81\xae\xe3\x83\x90\xe3\x83\xa9\xe3\x83\xb3\xe3\x82\xb9\xe3\x81\x8b\xe3\x82\x89\xe3\x80\x81BICUBIC\xe3\x82\x92\xe6\x8e\xa1\xe7\x94\xa8(\xe3\x82\xb1\xe3\x83\xbc\xe3\x82\xb9\xe3\x83\x90\xe3\x82\xa4\xe3\x82\xb1\xe3\x83\xbc\xe3\x82\xb9)\n    # BILINEAR \xe3\x81\xa0\xe3\x81\xa8 \xe6\x95\xb0\xe7\x99\xbex\xe6\x95\xb0\xe7\x99\xbepx \xe3\x81\xae\xe7\x94\xbb\xe5\x83\x8f\xe5\x87\xa6\xe7\x90\x86\xe3\x81\xa7\xe3\x80\x81\xe6\x95\xb0\xe5\x8d\x81ms\xe7\xa8\x8b\xe5\xba\xa6\xe9\xab\x98\xe9\x80\x9f\xe3\x81\xab\xe3\x81\xaf\xe3\x81\xaa\xe3\x82\x8b\xe3\x80\x82\n    transformed_img = img.transform(\n        size=(new_width, new_height),\n        method=Image.PERSPECTIVE,\n        data=homography_param,\n        resample=Image.BICUBIC\n    )\n    return transformed_img\n\n\ndef __calculate_homography_matrix(origin, dest):\n    # type: (np.ndarray, np.ndarray) -> np.ndarray\n    """"""\n\xe3\x80\x80\xe3\x80\x80\xe7\xb7\x9a\xe5\xbd\xa2DLT\xe6\xb3\x95\xe3\x81\xab\xe3\x81\xa6\xe3\x80\x81 \xe5\xa4\x89\xe6\x8f\x9b\xe5\x85\x83\xe3\x82\x92\xe5\xa4\x89\xe6\x8f\x9b\xe5\x85\x88\xe3\x81\xab\xe5\xaf\xbe\xe5\xbf\x9c\xe3\x81\xa5\xe3\x81\x91\xe3\x82\x8b\xe3\x83\x9b\xe3\x83\xa2\xe3\x82\xb0\xe3\x83\xa9\xe3\x83\x95\xe3\x82\xa3\xe8\xa1\x8c\xe5\x88\x97\xe3\x82\x92\xe6\xb1\x82\xe3\x82\x81\xe3\x82\x8b\n    :param origin: start points for homography\n    :param dest: destination points for homography\n    :return: calculated homography matrix(3 x 3)\n    """"""\n    assert origin.shape == dest.shape\n\n    # \xe7\x82\xb9\xe3\x82\x92\xe8\xaa\xbf\xe6\x95\xb4\xe3\x81\x99\xe3\x82\x8b\xef\xbc\x88\xe6\x95\xb0\xe5\x80\xa4\xe8\xa8\x88\xe7\xae\x97\xe4\xb8\x8a\xe9\x87\x8d\xe8\xa6\x81\xef\xbc\x89\n    origin, c1 = __normalize(origin)  # \xe5\xa4\x89\xe6\x8f\x9b\xe5\x85\x83\n    dest, c2 = __normalize(dest)      # \xe5\xa4\x89\xe6\x8f\x9b\xe5\x85\x88\n    # \xe7\xb7\x9a\xe5\xbd\xa2\xe6\xb3\x95\xe3\x81\xae\xe3\x81\x9f\xe3\x82\x81\xe3\x81\xae\xe8\xa1\x8c\xe5\x88\x97\xe3\x82\x92\xe4\xbd\x9c\xe3\x82\x8b\xe3\x80\x82\xe5\xaf\xbe\xe5\xbf\x9c\xe3\x81\x94\xe3\x81\xa8\xe3\x81\xab2\xe3\x81\xa4\xe3\x81\xae\xe8\xa1\x8c\xe3\x81\xab\xe3\x81\xaa\xe3\x82\x8b\xe3\x80\x82\n    nbr_correspondences = origin.shape[1]\n    a = np.zeros((2 * nbr_correspondences, 9))\n    for i in range(nbr_correspondences):\n        a[2 * i] = [-origin[0][i], -origin[1][i], -1, 0, 0, 0, dest[0][i] * origin[0][i], dest[0][i] * origin[1][i],\n                    dest[0][i]]\n        a[2 * i + 1] = [0, 0, 0, -origin[0][i], -origin[1][i], -1, dest[1][i] * origin[0][i], dest[1][i] * origin[1][i],\n                        dest[1][i]]\n    u, s, v = np.linalg.svd(a)\n    homography_matrix = v[8].reshape((3, 3))\n    homography_matrix = np.dot(np.linalg.inv(c2), np.dot(homography_matrix, c1))\n    homography_matrix = homography_matrix / homography_matrix[2, 2]\n    return homography_matrix\n\n\ndef __normalize(point_list):\n    # type: (np.ndarray) -> (np.ndarray, np.ndarray)\n    """"""\n    \xe6\xad\xa3\xe8\xa6\x8f\xe5\x8c\x96\xe5\x87\xa6\xe7\x90\x86\n    :param point_list: point list to be normalized\n    :return: normalization results\n    """"""\n    m = np.mean(point_list[:2], axis=1)\n    max_std = max(np.std(point_list[:2], axis=1)) + 1e-9\n    c = np.diag([1 / max_std, 1 / max_std, 1])\n    c[0][2] = -m[0] / max_std\n    c[1][2] = -m[1] / max_std\n    return np.dot(c, point_list), c\n\n\ndef __convert_corner_list_to_homography_param(point_list):\n    # type: (np.ndarray) -> np.ndarray\n    """""" \xe7\x82\xb9\xe3\x81\xae\xe9\x9b\x86\xe5\x90\x88\xef\xbc\x88dim * n \xe3\x81\xae\xe9\x85\x8d\xe5\x88\x97\xef\xbc\x89\xe3\x82\x92\xe5\x90\x8c\xe6\xac\xa1\xe5\xba\xa7\xe6\xa8\x99\xe7\xb3\xbb\xe3\x81\xab\xe5\xa4\x89\xe6\x8f\x9b\xe3\x81\x99\xe3\x82\x8b\n    :param point_list: point list to be converted to homography parameters\n    :return: matrix of homography param (3 x N). N = width x height.\n    """"""\n    return np.vstack((point_list, np.ones((1, point_list.shape[1]))))\n\n'"
main.py,2,"b'#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nfrom homography import transform\nimport numpy as np\nfrom PIL import Image\nfrom argparse import ArgumentParser\n\n\nif __name__ == \'__main__\':\n    usage = \'python {} [--input file_path] [--corner_list list]\' \\\n        \' [--dest_list list] [--output file_path] [--gray_scale] [--help]\'.format(__file__)\n    argparser = ArgumentParser(usage=usage)\n    argparser.add_argument(\'-i\', \'--input\', type=str, help=\'input image file path\', required=True)\n    argparser.add_argument(\'-c\', \'--corner_list\', type=str, help=\'corner list for the crop area\\n""[x1, y1, x2, y2, x3, y3, x4, y4]""\', required=True)\n    argparser.add_argument(\'-d\', \'--dest_list\', type=str, help=\'destination rectangle\\\'s corner list(optional)\')\n    argparser.add_argument(\'-o\', \'--output\', type=str, help=\'output image file path\')\n    argparser.add_argument(\'-L\', \'--gray_scale\', action=\'store_true\', help=\'output image file path\')\n    args = argparser.parse_args()\n\n    img = Image.open(args.input)\n    corner_list = np.array(args.corner_list.split(\',\')).reshape((4,2)).astype(int).tolist()\n    if args.dest_list is not None:\n        dest_list = np.array(args.dest_list.split(\',\')).reshape((4,2)).astype(int).tolist()\n    else:\n        dest_list = None\n    if args.gray_scale is not None and args.gray_scale == True:\n        img = img.convert(\'L\')\n    transformed_img = transform(img, corner_list, dest_list)\n    if args.output is not None:\n        transformed_img.save(args.output)\n    else:\n        transformed_img.show()\n'"
