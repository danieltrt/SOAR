file_path,api_count,code
setup.py,0,"b'#!/usr/bin/env python\n#-*- coding: utf-8 -*-\n\nimport os\nimport sys\n\ntry:\n    from setuptools import setup\n    has_setuptools = True\nexcept ImportError:\n    from distutils.core import setup\n    has_setuptools = False\n\nfrom util import commands\n\nif sys.platform == ""darwin"":\n    # Don\'t create resource files on OS X tar.\n    os.environ[""COPY_EXTENDED_ATTRIBUTES_DISABLE""] = ""true""\n    os.environ[""COPYFILE_DISABLE""] = ""true""\n\ndwt = commands.Extension(""pywt._pywt"",\n    sources=[""src/_pywt.pyx"", ""src/common.c"", ""src/convolution.c"",\n             ""src/wavelets.c"", ""src/wt.c""],\n    include_dirs=[""src""],\n    define_macros=[(""PY_EXTENSION"", None)],\n)\n\next_modules = [dwt]\npackages = [""pywt""]\npackage_dir = {""pywt"": ""src/pywt""}\n\ncmdclass = {\n    ""build_ext"": commands.BuildExtCommand,\n    ""sdist"": commands.SdistCommand,\n    ""clean_build"": commands.CleanCommand,\n}\nsetup_args = {}\n\nif has_setuptools:\n    setup_args[""zip_safe""] = False\n    setup_args[""test_suite""] = ""tests.test_doc.suite""\n    if not os.path.exists(os.path.join(""src"", ""_pywt.c"")):\n        setup_args[""setup_requires""] = [""Cython>=0.16""]\nelse:\n    cmdclass[""test""] = commands.TestCommand\n\nsetup(\n    name=""PyWavelets"",\n    version=""0.2.2"",\n    author=""Filip Wasilewski"",\n    author_email=""en@ig.ma"",\n    url=""http://www.pybytes.com/pywavelets/"",\n    download_url=""http://pypi.python.org/pypi/PyWavelets/"",\n    license=""MIT"",\n    description=""PyWavelets, wavelet transform module"",\n    long_description=""""""\\\n    PyWavelets is a Python wavelet transforms module that includes:\n\n    * 1D and 2D Forward and Inverse Discrete Wavelet Transform (DWT and IDWT)\n    * 1D and 2D Stationary Wavelet Transform (Undecimated Wavelet Transform)\n    * 1D and 2D Wavelet Packet decomposition and reconstruction\n    * Computing Approximations of wavelet and scaling functions\n    * Over seventy built-in wavelet filters and support for custom wavelets\n    * Single and double precision calculations\n    * Results compatibility with Matlab Wavelet Toolbox (tm)\n    """""",\n    keywords=[""wavelets"", ""wavelet transform"", ""DWT"", ""SWT"", ""scientific"",\n              ""NumPy""],\n    classifiers=[\n        ""Development Status :: 5 - Production/Stable"",\n        ""Intended Audience :: Developers"",\n        ""Intended Audience :: Education"",\n        ""Intended Audience :: Science/Research"",\n        ""License :: OSI Approved :: MIT License"",\n        ""Operating System :: OS Independent"",\n        ""Programming Language :: C"",\n        ""Programming Language :: Python"",\n        ""Programming Language :: Python :: 2.6"",\n        ""Programming Language :: Python :: 2.7"",\n        ""Topic :: Software Development :: Libraries :: Python Modules""\n    ],\n    ext_modules=ext_modules,\n    packages=packages,\n    package_dir=package_dir,\n    cmdclass=cmdclass,\n    **setup_args\n)\n'"
demo/benchmark.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport gc\nimport sys\nimport time\n\nimport numpy\nimport pylab\n\nimport pywt\n\nif sys.platform == \'win32\':\n    clock = time.clock\nelse:\n    clock = time.time\n\nsizes = [20, 50, 100, 120, 150, 200, 250, 300, 400, 500, 600, 750,\n         1000, 2000, 3000, 4000, 5000, 6000, 7500,\n         10000, 15000, 20000, 25000, 30000, 40000, 50000, 75000,\n         100000, 150000, 200000, 250000, 300000, 400000, 500000,\n         600000, 750000, 1000000, 2000000, 5000000][:-4]\n\nwavelet_names = [\'db1\', \'db2\', \'db3\', \'db4\', \'db5\', \'db6\', \'db7\',\n                 \'db8\', \'db9\', \'db10\', \'sym10\', \'coif1\', \'coif2\',\n                 \'coif3\', \'coif4\', \'coif5\']\n\ndtype = numpy.float64\n\nwavelets = [pywt.Wavelet(n) for n in wavelet_names]\nmode = pywt.MODES.zpd\n\ntimes_dwt = [[] for i in range(len(wavelets))]\ntimes_idwt = [[] for i in range(len(wavelets))]\n\nrepeat = 5\n\nfor j, size in enumerate(sizes):\n    #if size > 500000:\n    #    warnings.warn(""Warning, too big data size may cause page swapping."")\n\n    data = numpy.ones((size,), dtype)\n\n    print (""%d/%d"" % (j + 1, len(sizes))).rjust(6), str(size).rjust(9),\n    for i, w in enumerate(wavelets):\n        min_t1, min_t2 = 9999., 9999.\n        for _ in xrange(repeat):\n            t1 = clock()\n            (a, d) = pywt.dwt(data, w, mode)\n            t1 = clock() - t1\n            min_t1 = min(t1, min_t1)\n\n            t2 = clock()\n            a0 = pywt.idwt(a, d, w, mode)\n            t2 = clock() - t2\n            min_t2 = min(t2, min_t2)\n\n        times_dwt[i].append(min_t1)\n        times_idwt[i].append(min_t2)\n        print \'.\',\n    print\n    gc.collect()\n\nfor j, (times, name) in enumerate([(times_dwt, \'dwt\'), (times_idwt, \'idwt\')]):\n    pylab.figure(j)\n    pylab.title(name)\n\n    for i, n in enumerate(wavelet_names):\n        pylab.loglog(sizes, times[i], label=n)\n\n    pylab.legend(loc=\'best\')\n    pylab.xlabel(\'len(x)\')\n    pylab.ylabel(\'time [s]\')\n\npylab.show()\n'"
demo/dwt_multidim.py,0,"b""#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport pprint\n\nimport numpy\n\nimport pywt\n\ndata = numpy.ones((4, 4, 4, 4))  # 4D array\nresult = pywt.dwtn(data, 'db1')  # sixteen 4D coefficient arrays\npprint.pprint(result)\n"""
demo/dwt_signal_decomposition.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport pylab\n\nimport pywt\n\ndata1 = pylab.array(range(1, 400) + range(398, 600) + range(601, 1024))\nx = pylab.arange(612 - 80, 20, -0.5) / 250.\ndata2 = pylab.sin(40 * pylab.log(x)) * pylab.sign((pylab.log(x)))\n\nfrom sample_data import ecg as data3\n\nmode = pywt.MODES.sp1\n\n\ndef plot(data, w, title):\n    print title\n    w = pywt.Wavelet(w)\n    a = data\n    ca = []\n    cd = []\n    for i in xrange(5):\n        (a, d) = pywt.dwt(a, w, mode)\n        ca.append(a)\n        cd.append(d)\n\n    rec_a = []\n    rec_d = []\n\n    for i, coeff in enumerate(ca):\n        coeff_list = [coeff, None] + [None] * i\n        rec_a.append(pywt.waverec(coeff_list, w))\n\n    for i, coeff in enumerate(cd):\n        coeff_list = [None, coeff] + [None] * i\n        rec_d.append(pywt.waverec(coeff_list, w))\n\n    pylab.figure()\n    ax_main = pylab.subplot(len(rec_a) + 1, 1, 1)\n    pylab.title(title)\n    ax_main.plot(data)\n    pylab.xlim(0, len(data) - 1)\n\n    for i, y in enumerate(rec_a):\n        #print len(data), len(x), len(data) / (2**(i+1))\n        ax = pylab.subplot(len(rec_a) + 1, 2, 3 + i * 2)\n        ax.plot(y, \'r\')\n        pylab.xlim(0, len(y) - 1)\n        pylab.ylabel(""A%d"" % (i + 1))\n\n    for i, y in enumerate(rec_d):\n        ax = pylab.subplot(len(rec_d) + 1, 2, 4 + i * 2)\n        ax.plot(y, \'g\')\n        pylab.xlim(0, len(y) - 1)\n        #pylab.ylim(min(0,1.4*min(x)), max(0,1.4*max(x)))\n        pylab.ylabel(""D%d"" % (i + 1))\n\n\nprint ""Signal decomposition (S = An + Dn + Dn-1 + ... + D1)""\nplot(data1, \'coif5\', ""DWT: Signal irregularity"")\nplot(data2, \'sym5\', ""DWT: Frequency and phase change - Symmlets5"")\nplot(data3, \'sym5\', ""DWT: Ecg sample - Symmlets5"")\n\npylab.show()\n'"
demo/dwt_swt_show_coeffs.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport pywt\nimport pylab\n\ndata1 = pylab.array(range(1, 400) + range(398, 600) + range(601, 1024)) / 1024.\ndata2 = pylab.arange(612 - 80, 20, -0.5) / 250.\ndata2 = pylab.sin(40 * pylab.log(data2)) * pylab.sign((pylab.log(data2)))\nfrom sample_data import ecg as data3\n\nmode = pywt.MODES.sp1\nDWT = 1\n\n\ndef plot(data, w, title):\n    w = pywt.Wavelet(w)\n    a = data\n    ca = []\n    cd = []\n\n    if DWT:\n        for i in xrange(5):\n            (a, d) = pywt.dwt(a, w, mode)\n            ca.append(a)\n            cd.append(d)\n    else:\n        coeffs = pywt.swt(data, w, 5)  # [(cA5, cD5), ..., (cA1, cD1)]\n        for a, d in reversed(coeffs):\n            ca.append(a)\n            cd.append(d)\n\n    pylab.figure()\n    ax_main = pylab.subplot(len(ca) + 1, 1, 1)\n    pylab.title(title)\n    ax_main.plot(data)\n    pylab.xlim(0, len(data) - 1)\n\n    for i, x in enumerate(ca):\n        ax = pylab.subplot(len(ca) + 1, 2, 3 + i * 2)\n        ax.plot(x, \'r\')\n        if DWT:\n            pylab.xlim(0, len(x) - 1)\n        else:\n            pylab.xlim(w.dec_len * i, len(x) - 1 - w.dec_len * i)\n        pylab.ylabel(""A%d"" % (i + 1))\n\n    for i, x in enumerate(cd):\n        ax = pylab.subplot(len(cd) + 1, 2, 4 + i * 2)\n        ax.plot(x, \'g\')\n        pylab.xlim(0, len(x) - 1)\n        if DWT:\n            pylab.ylim(min(0, 1.4 * min(x)), max(0, 1.4 * max(x)))\n        else:  # SWT\n            pylab.ylim(\n                min(0, 2 * min(\n                    x[w.dec_len * (1 + i):len(x) - w.dec_len * (1 + i)])),\n                max(0, 2 * max(\n                    x[w.dec_len * (1 + i):len(x) - w.dec_len * (1 + i)]))\n            )\n        pylab.ylabel(""D%d"" % (i + 1))\n\n\nDWT = 1\nplot(data1, \'db1\', ""DWT: Signal irregularity shown in D1 - Haar wavelet"")\nplot(data2, \'sym5\', ""DWT: Frequency and phase change - Symmlets5"")\nplot(data3, \'sym5\', ""DWT: Ecg sample - Symmlets5"")\n\nDWT = 0  # SWT\nplot(data1, \'db1\', ""SWT: Signal irregularity detection - Haar wavelet"")\nplot(data2, \'sym5\', ""SWT: Frequency and phase change - Symmlets5"")\nplot(data3, \'sym5\', ""SWT: Ecg sample - simple QRS detection - Symmlets5"")\n\npylab.show()\n'"
demo/image_blender.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Copyright (c) 2006-2012 Filip Wasilewski <http://en.ig.ma/>\n# See COPYING for license details.\n\n""""""\nWavelet Image Blender.\n\nBlend image A with texture extracted from image B by selecting\ndetail coefficients:\n\n    -----------------     -----------------\n    |               |     |               |\n    |               |     |               |\n    |               |     |               |\n    |       A       |     |       B       |\n    |               |     |               |\n    |               |     |               |\n    |               |     |               |\n    -----------------     -----------------\n\n            |                     |\n     2D DWT |              2D DWT |\n            V                     V\n\n    -----------------             ---------          -----------------\n    |       |       |             |       |          |               |\n    | A(LL) | H(LH) |             | H(LH) |          |               |\n    |       |       |             |       |   IDWT   |               |\n    -----------------  +  -----------------  ----->  |       C       |\n    |       |       |     |       |       |          |               |\n    | V(HL) | D(HH) |     | V(HL) | D(HH) |          |               |\n    |       |       |     |       |       |          |               |\n    -----------------     -----------------          -----------------\n                            (details only)\n""""""\n\nimport optparse\nimport os\nimport sys\nif os.name == \'nt\':\n    from time import clock  # noqa\nelse:\n    from time import time as clock  # noqa\n\nimport Image  # PIL\nimport numpy  # http://www.scipy.org\n\nimport pywt\n\n\ndef image2array(image):\n    """"""PIL Image to NumPy array""""""\n    assert image.mode in (\'L\', \'RGB\', \'CMYK\')\n    arr = numpy.fromstring(image.tostring(), numpy.uint8)\n    arr.shape = (image.size[1], image.size[0], len(image.getbands()))\n    return arr.swapaxes(0, 2).swapaxes(1, 2).astype(numpy.float32)\n\n\ndef array2image(arr, mode):\n    """"""NumPy array to PIL Image""""""\n    arr = arr.swapaxes(1, 2).swapaxes(0, 2)\n    arr[arr < 0] = 0\n    arr[arr > 255] = 255\n    arr = numpy.fix(arr).astype(numpy.uint8)\n    return Image.fromstring(mode, arr.shape[1::-1], arr.tostring())\n\n\ndef load_image(path, mode=None, size=None):\n    """"""Load image""""""\n    im = Image.open(path)\n\n    if im.mode not in (\'L\', \'P\', \'RGB\', \'CMYK\'):\n        raise TypeError(""Image mode must be \'L\', \'P\', \'RGB\' or \'CMYK\'"")\n\n    if mode is not None:\n        if mode == \'P\':\n            raise ValueError(""Mode must be \'L\', \'RGB\' or \'CMYK\'"")\n        im = im.convert(mode)\n    elif im.mode == \'P\':\n        im = im.convert(\'RGB\')\n\n    if size is not None and im.size != size:\n        im = im.resize(size, Image.ANTIALIAS)\n    return im\n\n\ndef blend_images(base, texture, wavelet, level, mode=\'sp1\', base_gain=None,\n                 texture_gain=None):\n    """"""Blend loaded images at `level` of granularity using `wavelet`""""""\n\n    base_data = image2array(base)\n    texture_data = image2array(texture)\n    output_data = []\n\n    # process color bands\n    for base_band, texture_band in zip(base_data, texture_data):\n        # multilevel dwt\n        base_band_coeffs = pywt.wavedec2(base_band, wavelet, mode, level)\n        texture_band_coeffs = pywt.wavedec2(texture_band, wavelet, mode, level)\n\n        # average coefficients of base image\n        output_band_coeffs = [base_band_coeffs[0]]  # cA\n        del base_band_coeffs[0], texture_band_coeffs[0]\n\n        # blend details coefficients\n        for n, (base_band_details, texture_band_details) in enumerate(\n            zip(base_band_coeffs, texture_band_coeffs)):\n            blended_details = []\n            for (base_detail, texture_detail) in zip(base_band_details,\n                texture_band_details):\n                if base_gain is not None:\n                    base_detail *= base_gain\n                if texture_gain is not None:\n                    texture_detail *= texture_gain\n\n                # select coeffs with greater energy\n                blended = numpy.where(abs(base_detail) > abs(texture_detail),\n                    base_detail, texture_detail)\n                blended_details.append(blended)\n\n            base_band_coeffs[n] = texture_band_coeffs[n] = None\n            output_band_coeffs.append(blended_details)\n\n        # multilevel idwt\n        new_band = pywt.waverec2(output_band_coeffs, wavelet, mode)\n        output_data.append(new_band)\n        del new_band, base_band_coeffs, texture_band_coeffs\n\n    del base_data, texture_data\n    output_data = numpy.array(output_data)\n\n    return array2image(output_data, base.mode)\n\n\ndef main():\n    usage = ""usage: %prog -b BASE -t TEXTURE -o OUTPUT ""\\\n            ""[-w WAVELET] [-l LEVEL] [-m MODE]""\n    parser = optparse.OptionParser(usage=usage)\n    parser.add_option(""-b"", ""--base"", dest=""base"", metavar=""BASE"",\n                      help=""base image name"")\n    parser.add_option(""-t"", ""--texture"", dest=""texture"", metavar=""TEXTURE"",\n                      help=""texture image name"")\n    parser.add_option(""-o"", ""--output"", dest=""output"", metavar=""OUTPUT"",\n                      help=""output image name"")\n    parser.add_option(""-w"", ""--wavelet"", dest=""wavelet"", metavar=""WAVELET"",\n                      default=\'db2\', help=""wavelet name [default: %default]"")\n    parser.add_option(""-l"", ""--level"", dest=""level"", metavar=""LEVEL"",\n                      type=""int"", default=4,\n                      help=""decomposition level [default: %default]"")\n    parser.add_option(""-m"", ""--mode"", dest=""mode"", metavar=""MODE"",\n                      default=\'sym\', help=""decomposition mode. Adjust this if""\n                      "" getting edge artifacts [default: %default]"")\n    parser.add_option(""-x"", ""--base_gain"", dest=""base_gain"", metavar=""BG"",\n                      type=""float"", default=None,\n                      help=""Base image gain [default: %default]"")\n    parser.add_option(""-y"", ""--texture_gain"", dest=""texture_gain"",\n                      metavar=""TG"", type=""float"", default=None,\n                      help=""Texture image gain [default: %default]"")\n    parser.add_option(""--timeit"", dest=""timeit"", action=""store_true"",\n                      default=False, help=""time blending operations"")\n\n    (options, args) = parser.parse_args()\n\n    if None in (options.base, options.texture, options.output):\n        parser.print_help()\n        sys.exit(-1)\n\n    base = load_image(options.base)\n    texture = load_image(options.texture, base.mode, base.size)\n\n    if options.timeit:\n        t = clock()\n\n    im = blend_images(base, texture, options.wavelet, options.level,\n        options.mode, options.base_gain, options.texture_gain)\n\n    if options.timeit:\n        print ""%.3fs"" % (clock() - t)\n\n    im.save(options.output)\n\nif __name__ == \'__main__\':\n    main()\n'"
demo/plot_wavelets.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Plot scaling and wavelet functions for db, sym, coif, bior and rbio families\n\nimport itertools\n\nimport pylab\n\nimport pywt\n\niterations = 5\n\nplot_data = [\n    (\'db\', (4, 3)),\n    (\'sym\', (4, 3)),\n    (\'coif\', (3, 2))\n]\n\nfor family, (rows, cols) in plot_data:\n    f = pylab.figure()\n    f.subplots_adjust(\n        hspace=0.2, wspace=0.2, bottom=.02, left=.06, right=.97, top=.94\n    )\n    colors = itertools.cycle(\'bgrcmyk\')\n\n    wnames = pywt.wavelist(family)\n    print wnames\n    i = iter(wnames)\n    for col in xrange(cols):\n        for row in xrange(rows):\n            try:\n                wavelet = pywt.Wavelet(i.next())\n            except StopIteration:\n                break\n            phi, psi, x = wavelet.wavefun(iterations)\n\n            color = colors.next()\n            ax = pylab.subplot(rows, 2 * cols, 1 + 2 * (col + row * cols))\n            pylab.title(wavelet.name + "" phi"")\n            pylab.plot(x, phi, color)\n            pylab.xlim(min(x), max(x))\n\n            ax = pylab.subplot(rows, 2 * cols, 1 + 2 * (col + row * cols) + 1)\n            pylab.title(wavelet.name + "" psi"")\n            pylab.plot(x, psi, color)\n            pylab.xlim(min(x), max(x))\n\nfor family, (rows, cols) in [(\'bior\', (4, 3)), (\'rbio\', (4, 3))]:\n    f = pylab.figure()\n    f.subplots_adjust(hspace=0.5, wspace=0.2, bottom=.02, left=.06, right=.97,\n        top=.94)\n\n    colors = itertools.cycle(\'bgrcmyk\')\n    wnames = pywt.wavelist(family)\n    i = iter(wnames)\n    for col in xrange(cols):\n        for row in xrange(rows):\n            try:\n                wavelet = pywt.Wavelet(i.next())\n            except StopIteration:\n                break\n            phi, psi, phi_r, psi_r, x = wavelet.wavefun(iterations)\n            row *= 2\n\n            color = colors.next()\n            ax = pylab.subplot(2 * rows, 2 * cols, 1 + 2 * (col + row * cols))\n            pylab.title(wavelet.name + "" phi"")\n            pylab.plot(x, phi, color)\n            pylab.xlim(min(x), max(x))\n\n            ax = pylab.subplot(2 * rows, 2 * cols,\n                1 + 2 * (col + row * cols) + 1)\n            pylab.title(wavelet.name + "" psi"")\n            pylab.plot(x, psi, color)\n            pylab.xlim(min(x), max(x))\n\n            row += 1\n            ax = pylab.subplot(2 * rows, 2 * cols, 1 + 2 * (col + row * cols))\n            pylab.title(wavelet.name + "" phi_r"")\n            pylab.plot(x, phi_r, color)\n            pylab.xlim(min(x), max(x))\n\n            ax = pylab.subplot(2 * rows, 2 * cols,\n                1 + 2 * (col + row * cols) + 1)\n            pylab.title(wavelet.name + "" psi_r"")\n            pylab.plot(x, psi_r, color)\n            pylab.xlim(min(x), max(x))\n\npylab.show()\n'"
demo/sample_data.py,0,"b'# -*- coding: utf-8 -*-\n# flake8: noqa\n\necg = [-86, -87, -87, -89, -89, -90, -91, -93, -96, -97, -97, -94, -93, -95, -97, -97, -95, -94, -95, -93,\n-97, -97, -94, -91, -92, -93, -93, -95, -92, -88, -87, -90, -90, -88, -90, -87, -91, -88, -89, -88,\n-85, -84, -83, -84, -83, -81, -80, -79, -78, -81, -81, -80, -76, -74, -77, -74, -75, -75, -73, -70,\n-71, -69, -72, -73, -72, -68, -69, -68, -69, -72, -70, -69, -69, -67, -70, -71, -67, -67, -65, -64,\n-66, -65, -63, -61, -62, -62, -68, -70, -65, -63, -63, -68, -66, -66, -62, -62, -63, -66, -65, -63,\n-60, -60, -58, -61, -64, -64, -60, -56, -57, -59, -59, -57, -57, -55, -57, -59, -58, -59, -55, -53,\n-53, -52, -56, -53, -52, -50, -48, -48, -51, -52, -49, -44, -37, -33, -25, -22, -18, -19, -23, -24,\n-25, -25, -26, -26, -29, -32, -35, -37, -34, -29, -32, -36, -41, -45, -45, -44, -46, -45, -50, -53,\n-51, -49, -51, -53, -55, -51, -51, -48, -48, -51, -55, -54, -52, -48, -50, -52, -53, -51, -51, -57,\n-64, -70, -73, -64, -39, -3, 44, 98, 162, 220, 250, 231, 178, 121, 69, 26, 9, 8, 2, -8,\n-17, -19, -23, -30, -38, -44, -50, -54, -52, -52, -57, -60, -66, -68, -65, -62, -66, -65, -68, -66,\n-65, -64, -64, -65, -65, -65, -63, -64, -65, -64, -67, -67, -66, -64, -63, -66, -67, -69, -64, -61,\n-64, -66, -68, -67, -67, -62, -62, -64, -67, -66, -63, -61, -60, -61, -63, -63, -62, -59, -56, -56,\n-58, -57, -53, -51, -52, -52, -53, -52, -49, -46, -46, -47, -45, -43, -39, -33, -34, -36, -38, -40,\n-36, -28, -24, -22, -23, -23, -19, -17, -16, -14, -13, -14, -14, -14, -13, -14, -12, -10, -8, -8,\n-14, -15, -16, -14, -15, -18, -25, -28, -32, -36, -34, -34, -33, -37, -40, -42, -41, -42, -44, -45,\n-47, -49, -49, -50, -49, -51, -54, -55, -53, -51, -53, -54, -56, -59, -56, -55, -55, -54, -54, -57,\n-54, -52, -53, -55, -57, -55, -50, -49, -49, -50, -52, -54, -52, -50, -52, -53, -54, -52, -51, -50,\n-51, -52, -52, -51, -47, -47, -47, -48, -49, -53, -49, -49, -47, -48, -49, -53, -50, -48, -50, -48,\n-48, -48, -45, -43, -43, -45, -48, -51, -46, -42, -42, -46, -49, -48, -47, -44, -45, -46, -49, -52,\n-49, -48, -47, -48, -49, -48, -46, -45, -44, -46, -51, -48, -46, -44, -48, -50, -49, -51, -50, -48,\n-47, -49, -49, -50, -49, -46, -48, -49, -50, -51, -49, -43, -46, -47, -50, -49, -48, -46, -47, -50,\n-55, -54, -53, -47, -48, -49, -49, -47, -46, -45, -46, -50, -48, -47, -46, -47, -45, -45, -45, -41,\n-33, -23, -18, -17, -20, -25, -25, -24, -24, -26, -30, -32, -31, -30, -31, -32, -35, -39, -38, -37,\n-38, -45, -50, -52, -52, -51, -53, -52, -53, -54, -55, -56, -57, -57, -58, -59, -57, -56, -57, -57,\n-60, -63, -60, -56, -56, -61, -65, -72, -77, -80, -81, -68, -42, -3, 46, 99, 162, 214, 236, 208,\n155, 101, 53, 15, 2, 0, -5, -12, -20, -24, -33, -45, -53, -58, -65, -72, -75, -75, -77, -77,\n-78, -78, -81, -83, -84, -80, -79, -82, -82, -84, -82, -80, -79, -84, -84, -84, -79, -80, -78, -80,\n-82, -80, -78, -76, -74, -78, -81, -82, -83, -79, -80, -82, -79, -82, -80, -81, -81, -81, -81, -81,\n-78, -73, -73, -76, -74, -78, -80, -74, -75, -74, -73, -74, -74, -74, -68, -69, -68, -67, -64, -62,\n-61, -59, -59, -58, -57, -54, -51, -52, -52, -52, -50, -47, -45, -45, -42, -39, -34, -31, -30, -30,\n-32, -31, -29, -28, -25, -25, -25, -25, -26, -25, -22, -24, -29, -32, -29, -32, -33, -39, -41, -44,\n-44, -46, -45, -47, -51, -54, -57, -53, -57, -60, -63, -62, -62, -61, -62, -62, -66, -69, -66, -65,\n-66, -65, -66, -65, -64, -63, -62, -65, -65, -66, -62, -62, -62, -66, -66, -67, -66, -63, -64, -65,\n-67, -67, -64, -63, -61, -63, -64, -66, -66, -62, -60, -61, -64, -64, -62, -58, -57, -59, -63, -65,\n-64, -61, -61, -62, -64, -63, -64, -60, -57, -59, -62, -65, -64, -61, -59, -59, -61, -62, -62, -61,\n-63, -66, -66, -64, -61, -62, -61, -63, -68, -69, -62, -62, -62, -62, -64, -66, -63, -63, -62, -65,\n-64, -66, -68, -66, -65, -66, -67, -69, -66, -65, -67, -64, -69, -68, -65, -61, -62, -64, -67, -69,\n-68, -67, -62, -64, -67, -69, -68, -64, -63, -64, -64, -66, -63, -62, -60, -61, -61, -61, -58, -54,\n-54, -56, -55, -56, -51, -49, -48, -47, -40, -37, -29, -22, -21, -23, -28, -35, -37, -35, -36, -39,\n-43, -44, -44, -43, -44, -47, -50, -53, -53, -53, -55, -65, -71, -71, -69, -64, -66, -73, -77, -77,\n-74, -73, -72, -73, -74, -77, -77, -79, -81, -82, -80, -79, -81, -79, -81, -87, -88, -87, -87, -85,\n-86, -81, -57, -22, 15, 63, 124, 173, 188, 157, 108, 60, 18, -20, -36, -35, -36, -42, -47, -55,\n-64, -74, -80, -86, -95, -100, -106, -107, -103, -101, -103, -107, -112, -110, -107, -103, -106, -109, -111, -111,\n-108, -109, -107, -107, -108, -111, -108, -108, -104, -105, -110, -111, -110, -106, -104, -101, -104, -110, -112, -109,\n-106, -107, -107, -110, -111, -108, -108, -108, -109, -110, -107, -106, -105, -101, -101, -105, -111, -108, -102, -99,\n-105, -104, -103, -100, -97, -98, -99, -99, -97, -94, -93, -95, -94, -94, -89, -87, -89, -92, -93, -88,\n-85, -80, -79, -79, -77, -80, -75, -72, -69, -69, -70, -70, -68, -65, -63, -63, -61, -64, -61, -60,\n-56, -56, -58, -61, -59, -58, -59, -62, -64, -66, -65, -66, -69, -73, -77, -80, -78, -77, -77, -79,\n-83, -86, -87, -86, -88, -86, -89, -91, -88, -85, -88, -91, -93, -94, -93, -89, -91, -90, -90, -90,\n-85, -86, -86, -85, -88, -90, -89, -88, -85, -84, -82, -84, -86, -82, -82, -81, -80, -81, -76, -77,\n-78, -78, -77, -77]\n\nlinchirp = [0, 0.003007789412462, 0.012030885542102, 0.027066839515219, 0.048106129281366, 0.075124006784604, 0.108069113512866, 0.146848925110512, 0.191312147402591, 0.241228280520665, \n0.296264701084096, 0.355961789675225, 0.419706855423681, 0.486707881942386, 0.555968435887277, 0.626265432713923, 0.696131828968589, 0.763846683976808, 0.82743537420671, 0.884683008925023, \n0.933164233701382, 0.970292556867448, 0.993392023663801, 0.999793420325824, 0.986956145048419, 0.952615374980599, 0.894952150788503, 0.812781491509984, 0.705750692485855, 0.574536665787567, \n0.421027756062461, 0.248472199216997, 0.061572679028293, -0.133495238861992, -0.329163101888728, -0.516668214388185, -0.686386342544783, -0.828305932074378, -0.93263996730272, -0.99055704542942, \n-0.994996041954672, -0.941510051663342, -0.829066874497464, -0.660717560775538, -0.444034327185417, -0.191217674909295, 0.081217132200812, 0.353239444899625, 0.602613457301855, 0.806689034834258, \n0.944575638222878, 0.999528498021659, 0.961305642337046, 0.828198064248627, 0.608406215467166, 0.320446938831618, -0.007663783956311, -0.340590216902079, -0.639187173046, -0.865101540529076, \n-0.986001962087278, -0.98077016758071, -0.843845892474875, -0.587880635778275, -0.243959475905188, 0.141086507386538, 0.510339755936402, 0.804964964717352, 0.973864883128874, 0.983313086717526, \n0.824757326451456, 0.518994309678417, 0.115302418631075, -0.315108218023617, -0.690887837733301, -0.935925481837174, -0.995560979505258, -0.850189751082604, -0.522804483786186, -0.077835087987199, \n0.389717982673669, 0.773649044254975, 0.980863977199349, 0.955235881052187, 0.69480913588233, 0.256923320269021, -0.251757153158149, -0.699604484559958, -0.963880555700505, -0.965668714430766, \n-0.695855382208126, -0.223300876338161, 0.319523651733479, 0.771800971287656, 0.991988047350842, 0.903982300390476, 0.526522416779907, -0.025996441861555, -0.57493048975597, -0.933858744785214, \n-0.973022104007406, -0.669414580263825, -0.122529614843967, 0.47393964475098, 0.898514217859748, 0.984864572634968, 0.690330955701561, 0.120989140916909, -0.501549937299872, -0.923873201703852, \n-0.964832409232622, -0.597261703988869, 0.030650634702746, 0.649866725970937, 0.983732859871792, 0.873637973297635, 0.359590626946923, -0.32686726755435, -0.862312298638843, -0.983507319724421, \n-0.621036388993986, 0.054786592177384, 0.707325810893941, 0.998839624003306, 0.76821616743586, 0.126767368668748, -0.587403636650311, -0.983487729430966, -0.833706615082649, -0.21118131567117, \n0.536458691582764, 0.976000595639809, 0.841078161551973, 0.200832803849381, -0.565362786444526, -0.987095230891039, -0.793483020168012, -0.09523859561211, 0.668180237830748, 0.999982729137159, \n0.672438927998671, -0.107483019790964, -0.81855832918071, -0.970059246843464, -0.44595215659396, 0.395869653925674, 0.958667853036656, 0.829396364456606, 0.090602679258111, -0.719156559099523, \n-0.991415850262974, -0.509263322307567, 0.368163480701134, 0.962047858572686, 0.797891820680314, -0.00561852953288, -0.808172501819752, -0.951817993328794, -0.306634879849315, 0.598650343796439, \n0.999534757157283, 0.543658064358031, -0.386402571569084, -0.980749029112303, -0.705963750811116, 0.204331970224732, 0.932531401389244, 0.806753021345791, -0.068920052446454, -0.883180883830367, \n-0.862074603682435, -0.013691050294019, 0.851050054276467, 0.884733483395059, 0.04220485622906, -0.845500985243741, -0.881180941260047, -0.016602259802215, 0.86800172552536, 0.850348065871984, \n-0.063109673935873, -0.91234077209578, -0.783822825254756, 0.1957739370718, 0.963800404054001, 0.667472792269088, -0.375634987941533, -0.997965002207168, -0.485277869486638, 0.586926433374445, \n0.980772515589603, 0.226430930196504, -0.797761258757288, -0.872364660372197, 0.103810121157782, 0.956286912258399, 0.637705575240652, -0.471108568928953, -0.99419203963459, -0.26564482447642, \n0.802358888929423, 0.84374904239818, -0.206416094144662, -0.989545022777934, -0.471819446740209, 0.673426772658605, 0.919400999527474, -0.075591888442919, -0.969675261169321, -0.534101009336765, \n0.641783493150144, 0.924029671131513, -0.093669558075651, -0.980328594817346, -0.466336749692476, 0.720968191249656, 0.862421939974378, -0.259340993903744, -0.999999997810668, -0.253654583909526, \n0.874286997761573, 0.682509369062787, -0.549079279755086, -0.939737647982861, 0.12231468262737, 0.995233578638254, 0.306921155988811, -0.867708838181503, -0.661241198846356, 0.606848681593158, \n0.895220381594734, -0.274113242859365, -0.995055966272873, -0.072628361118346, 0.971610946646356, 0.388487764190577, -0.850892081163336, -0.645154173347606, 0.664987495767338, 0.830161817311356, \n-0.445144331226082, -0.943655615223423, 0.217503639118775, 0.994255312169993, -0.001239210789212, -0.995128586313374, -0.191524704031216, 0.960870262543869, 0.354713484094358, -0.905376671263346, \n-0.486812978534854, 0.84064186395626, 0.589310406617329, -0.776272350581364, -0.665310912739198, 0.719482513654431, 0.718437228095735, -0.675354493807571, -0.752028013326076, 0.647192593375348, \n0.768601140657162, -0.636852586123355, -0.769531624597661, 0.644970305693952, 0.754899466833597, -0.671048579078468, -0.723481267669396, 0.713388849673593, 0.672884051612055, -0.768878149162665, \n-0.599844677273556, 0.832668728951804, 0.500737852370257, -0.897821288889963, -0.372343347968301, 0.955025637805672, 0.212909680318833, -0.992562572559796, -0.02350675211209, 0.996718381014581, \n-0.190426398319839, -0.952889458093786, 0.417565328619077, 0.847588809241178, -0.639612694287848, -0.671449884074441, 0.8312134369803, 0.42307829330607, -0.961563741979182, -0.113210751323426, \n0.998360957790126, -0.231864847166881, -0.914412623015836, 0.569177379760813, 0.696503141812804, -0.842052965384104, -0.354994689274675, 0.988758685758624, -0.068704004609831, -0.957203948526187, \n0.500769094564612, 0.723888118783702, -0.843774871772299, -0.312286521452547, 0.998037230209524, -0.196989017639507, -0.893708721585214, 0.672981946135073, 0.525724366781548, -0.964155611386101, \n0.022472344500788, 0.949386944267424, -0.583130799737229, -0.596508775315835, 0.947952462592463, 0.002947633800233, -0.947914147038181, 0.610990553137596, 0.543274289342276, -0.973856684638996, \n0.121717618625319, 0.887354942807036, -0.746266156159974, -0.351460429060313, 0.999870143950804, -0.387001712703918, -0.707631913378545, 0.923822546142534, -0.00646069645302, -0.91640782918101, \n0.733274145049837, 0.324341896632107, -0.995673494848172, 0.498997675840113, 0.575284817484261, -0.985323998229759, 0.272411973491043, 0.745609094117083, -0.927926970795255, 0.083399376008871, \n0.849904590645142, -0.858585137523649, -0.054738539689989, 0.906964156379934, -0.801820009150568, -0.138441802760526, 0.932796153986849, -0.772206274623122, -0.168068119824462, 0.937031017807682, \n-0.776075117546607, -0.144206439065604, 0.92146089302551, -0.812641288261539, -0.066363281979973, 0.879817846878146, -0.873848638493203, 0.065979128162421, 0.798616483111959, -0.94302083584857, \n0.249928650984943, 0.65966027755724, -0.993218297212283, 0.473558211267036, 0.445381330928634, -0.987181783414458, 0.709075602836928, 0.148145979670684, -0.881749112308792, 0.907455098295476, \n-0.216622814924958, -0.639973308845486, 0.999535857370176, -0.596827386211022, -0.252467348366443, 0.910290122102447, -0.897853074842369, 0.235900477502348, 0.59121389961637, -0.997297111348492, \n0.707291791314841, 0.066951498430183, -0.791737114077559, 0.9832144498671, -0.524987294298176, -0.27241197349112, 0.890517976231411, -0.941327469080368, 0.404095637561218, 0.378843956814167, \n-0.92727526810864, 0.917607538936552, -0.36676480002647, -0.39396849844327, 0.92437886719816, -0.929754427942781, 0.418068140814679, 0.319398243643488, -0.879823565364815, 0.969140753082378, \n-0.550827697360913, -0.148443433410814, 0.767753832627102, -0.999691244858676, 0.739039192343206, -0.123043040748215, -0.547116987151303, 0.956620523918928, -0.923144051072733, 0.472349752830586, \n0.185179612108834, -0.756829365038174, 0.998934371619658, -0.817354024319495, 0.298056781494948, 0.338643850167449, -0.834701812992799, 0.998601382226614, -0.775695609826866, 0.26070022257577, \n0.346939644819448, -0.822813492457072, 0.999998767442799, -0.824444240474272, 0.366484964248623, 0.211146036027027, -0.713658590966142, 0.980037835066951, -0.932405359238416, 0.594865957694851, \n-0.079118453488785, -0.455274802086685, 0.851346835282425, -0.999923144212249, 0.86710418030813, -0.498215503531722, -0.000264685864417, 0.493451188157445, -0.855142763005385, 0.999150873056802, \n-0.897588048961239, 0.583101477759743, -0.136403991076604, -0.336186191720132, 0.728783622347976, -0.959213788714999, 0.984716156245967, -0.807619460584113, 0.4710555060656, -0.046868316276309, \n-0.380836130546249, 0.732693069567416, -0.948296685045895, 0.995340910591606, -0.87269970122153, 0.607728067739101, -0.249054847545116, -0.143277752832045, 0.50832078878453, -0.793585518059977, \n0.961965738141971, -0.995516707911454, 0.895996418614088, -0.682579712363604, 0.387500872213148, -0.050545484410759, -0.286689467364439, 0.58598116424353, -0.816542218722874, 0.957638115101449, \n-0.999683423282931, 0.943941926716108, -0.801100487305297, 0.589067378274099, -0.330367069722875, 0.049476049700072, 0.229617196501077, -0.485425136704242, 0.700429295156167, -0.861964834300311, \n0.962548539089114, -0.999725231413226, 0.975537287331277, -0.895734476545692, 0.768839684383215, -0.605173884920053, 0.415924835938838, -0.212321875650761, 0.004956824127001, 0.196729511210397, \n-0.384792960422066, 0.552974739097688, -0.696753456854978, 0.813285833491081, -0.901263597153819, 0.960713475730172, -0.992764766914828, 0.999405369753964, -0.98324297456094, 0.947283814644567, \n-0.894737332960303, 0.828851541845386, -0.75278088360661, 0.669486079791591, -0.581663771061605, 0.491702638897941, -0.401662080954083, 0.313269288722543, -0.227930653778528, 0.146753718470378, \n-0.070576311062217, -0.00000000000008]\n\ncuspamax = [0, 0.000723421611629, 0.001448120652737, 0.002174103883227, 0.002901378337898, 0.003629951342623, 0.004359830531396, 0.00509102386433, 0.005823539646617, 0.006557386548511, \n0.007292573626374, 0.008029110344847, 0.008767006600178, 0.009506272744778, 0.010246919613045, 0.010988958548519, 0.011732401432433, 0.012477260713697, 0.013223549440406, 0.013971281292916, \n0.01472047061856, 0.015471132468069, 0.016223282633771, 0.016976937689637, 0.017732115033251, 0.018488832929767, 0.019247110557953, 0.020006968058372, 0.020768426583803, 0.021531508351983, \n0.022296236700736, 0.023062636145597, 0.023830732440006, 0.024600552638163, 0.02537212516064, 0.026145479862841, 0.026920648106389, 0.027697662833564, 0.028476558644863, 0.029257371879786, \n0.030040140700957, 0.030824905181662, 0.031611707396913, 0.032400591518147, 0.033191603911638, 0.033984793240739, 0.034780210572061, 0.035577909485668, 0.036377946189406, 0.037180379637459, \n0.037985271653225, 0.038792687056629, 0.039602693795939, 0.040415363084205, 0.0412307695404, 0.042048991335356, 0.042870110342583, 0.043694212294049, 0.044521386941014, 0.045351728219978, \n0.046185334423836, 0.047022308378278, 0.047862757623537, 0.048706794601504, 0.049554536848287, 0.050406107192244, 0.051261633957541, 0.052121251173254, 0.052985098788046, 0.053853322890432, \n0.05472607593463, 0.055603516972006, 0.056485811888098, 0.057373133645174, 0.058265662530319, 0.059163586408982, 0.060067100983924, 0.060976410059507, 0.061891725811219, 0.062813269060352, \n0.063741269553695, 0.064675966248136, 0.0656176076, 0.066566451858977, 0.067522767366445, 0.068486832857996, 0.069458937769938, 0.070439382549539, 0.07142847896876, 0.072426550441182, \n0.073433932341843, 0.074450972329657, 0.075478030672064, 0.076515480571554, 0.077563708493674, 0.078623114496097, 0.079694112558319, 0.080777130911524, 0.081872612368118, 0.08298101465044, \n0.084102810718083, 0.085238489093286, 0.086388554183792, 0.087553526602549, 0.088733943483627, 0.089930358793672, 0.091143343638191, 0.092373486561957, 0.093621393842779, 0.094887689777858, \n0.096173016961927, 0.097478036556351, 0.098803428548322, 0.100149891999287, 0.101518145281688, 0.102908926303091, 0.104322992716765, 0.105761122117725, 0.107224112223243, 0.108712781036826, \n0.110227966994614, 0.111770529093145, 0.113341346997426, 0.11494132112821, 0.116571372727401, 0.118232443900441, 0.119925497634584, 0.121651517791911, 0.123411509075942, 0.125206496970698, \n0.127037527651075, 0.128905667863347, 0.13081200477469, 0.132757645790529, 0.134743718338611, 0.136771369618628, 0.138841766316292, 0.140956094280743, 0.143115558164189, 0.145321381022705, \n0.147574803877137, 0.149877085233085, 0.152229500558951, 0.154633341721096, 0.157089916375163, 0.159600547312664, 0.162166571761988, 0.164789340642999, 0.167470217774476, 0.170210579033673, \n0.173011811467347, 0.175875312353646, 0.17880248821433, 0.181794753776849, 0.184853530885874, 0.18798024736395, 0.19117633582102, 0.194443232412648, 0.197782375546836, 0.201195204539455, \n0.204683158218338, 0.208247673476242, 0.211890183772944, 0.215612117586825, 0.219414896816436, 0.223299935132614, 0.227268636281826, 0.231322392341545, 0.235462581928553, 0.239690568361198, \n0.244007697776734, 0.248415297205002, 0.252914672599809, 0.257507106829532, 0.262193857628509, 0.266976155511009, 0.271855201649599, 0.276832165719921, 0.281908183713966, 0.287084355724095, \n0.292361743700152, 0.29774136918215, 0.30322421101113, 0.308811203020925, 0.314503231713648, 0.320301133921881, 0.326205694460626, 0.332217643772207, 0.33833765556742, 0.344566344466317, \n0.350904263642149, 0.357351902472049, 0.363909684198163, 0.37057796360301, 0.37735702470295, 0.384247078463696, 0.39124826054191, 0.398360629056973, 0.40558416239708, 0.41291875706388, \n0.420364225559913, 0.427920294323151, 0.43558660171299, 0.443362696052034, 0.451248033728075, 0.45924197736065, 0.467343794036582, 0.475552653618878, 0.48386762713337, 0.49228768523745, \n0.500811696775198, 0.509438427423202, 0.518166538431263, 0.526994585462167, 0.535921017534588, 0.544944176073149, 0.554062294069536, 0.563273495358488, 0.572575794012354, 0.581967093857808, \n0.591445188118165, 0.601007759184594, 0.610652378519407, 0.620376506694407, 0.630177493567124, 0.640052578597593, 0.649998891308135, 0.660013451888405, 0.670093171947766, 0.680234855416844, \n0.690435199599888, 0.700690796379324, 0.710998133573686, 0.72135359644982, 0.731753469390056, 0.742193937714739, 0.752671089660295, 0.76318091851271, 0.773719324896044, 0.78428211921532, \n0.794865024252861, 0.805463677916856, 0.816073636140656, 0.826690375931023, 0.837309298563247, 0.847925732920791, 0.858534938976817, 0.869132111414642, 0.879712383383943, 0.890270830389177, \n0.900802474306462, 0.911302287524857, 0.921765197207692, 0.932186089669377, 0.942559814862812, 0.952881190972279, 0.963145009106448, 0.973346038085884, 0.983479029319196, 0.993538721761763, \n1.00351984695073, 1.013417134109775, 1.023225315316938, 1.032939130728625, 1.042553333852724, 1.052062696863592, 1.061462015951531, 1.070746116699244, 1.079909859477599, 1.088948144852968, \n1.097855918998256, 1.1066281790997, 1.11525997875142, 1.123746433329644, 1.13208272533854, 1.140264109719487, 1.14828591911569, 1.156143569084, 1.163832563245839, 1.171348498369182, \n1.178687069373597, 1.185844074250416, 1.192815418890195, 1.199597121809748, 1.206185318771131, 1.212576267285119, 1.218766350991841, 1.224752083911443, 1.230530114557793, 1.236097229908466, \n1.241450359224455, 1.246586577713268, 1.251503110029324, 1.256197333605803, 1.260666781812386, 1.264909146933564, 1.268922282962534, 1.272704208205953, 1.276253107695146, 1.279567335399705, \n1.2826454162397, 1.285486047893108, 1.288088102395357, 1.290450627528292, 1.292572847996166, 1.294454166386664, 1.296094163915318, 1.29749260095204, 1.298649417328862, 1.299564732428379, \n1.300238845052729, 1.300672233073334, 1.300865552862017, 1.300819638504456, 1.300535500797324, 1.300014326030841, 1.299257474558798, 1.298266479158512, 1.297043043183498, 1.295589038512009, \n1.293906503294913, 1.291997639506761, 1.289864810304157, 1.287510537195918, 1.28493749702979, 1.282148518800781, 1.279146580286481, 1.275934804514982, 1.272516456071297, 1.268894937248434, \n1.265073784049465, 1.261056662047243, 1.256847362108536, 1.252449795989598, 1.247867991810369, 1.243106089414651, 1.238168335623747, 1.233059079391217, 1.227782766866494, 1.222343936375207, \n1.216747213324174, 1.210997305039049, 1.205098995542711, 1.199057140282491, 1.192876660814355, 1.186562539452189, 1.180119813890293, 1.173553571807194, 1.166868945458817, 1.160071106269028, \n1.153165259425458, 1.146156638488474, 1.139050500020992, 1.131852118246816, 1.124566779744943, 1.117199778187226, 1.109756409126572, 1.102241964842725, 1.094661729252478, 1.087020972890983, \n1.079324947970618, 1.07157888352368, 1.06378798063491, 1.05595740776969, 1.048092296203442, 1.040197735557581, 1.032278769447075, 1.024340391244419, 1.016387539964583, 1.008425096275202, \n1.000457878636006, 0.992490639571221, 0.984528062078385, 0.976574756176724, 0.968635255597982, 0.960714014622277, 0.952815405061291, 0.944943713390802, 0.937103138034288, 0.929297786799046, \n0.921531674465975, 0.913808720533922, 0.906132747119166, 0.898507477010388, 0.890936531879175, 0.883423430645853, 0.87597158800018, 0.868584313076188, 0.861264808280185, 0.854016168270734, \n0.846841379089138, 0.839743317438785, 0.832724750111439, 0.82578833355839, 0.818936613604151, 0.812172025300208, 0.805496892916133, 0.798913430065189, 0.792423739961426, 0.78602981580504, \n0.779733541292699, 0.773536691249328, 0.767440932377774, 0.761447824122615, 0.755558819644279, 0.749775266899554, 0.744098409824454, 0.738529389615349, 0.733069246104182, 0.727718919223549, \n0.722479250557358, 0.717350984972736, 0.712334772328842, 0.707431169258208, 0.702640641016206, 0.697963563394256, 0.693400224692385, 0.688950827746752, 0.684615492007784, 0.680394255664593, \n0.676287077811373, 0.672293840651548, 0.668414351735437, 0.664648346227321, 0.66099548919782, 0.657455377937571, 0.654027544288272, 0.650711456987241, 0.647506524021719, 0.644412094989246, \n0.641427463460516, 0.638551869341249, 0.635784501229683, 0.63312449876643, 0.630570954973519, 0.628122918579594, 0.625779396328324, 0.623539355267214, 0.621401725014109, 0.619365399998845, \n0.617429241677558, 0.615592080717345, 0.61385271914906, 0.612209932486178, 0.610662471807738, 0.609209065803567, 0.607848422780048, 0.606579232624854, 0.605400168729179, 0.604309889866121, \n0.603307042023989, 0.602390260193428, 0.601558170107352, 0.600809389932831, 0.600142531914135, 0.5995562039663, 0.599049011218641, 0.59861955750777, 0.59826644681978, 0.597988284681328, \n0.59778367949947, 0.597651243850183, 0.597589595715604, 0.597597359670089, 0.597673168015284, 0.597815661864494, 0.59802349217668, 0.598295320740513, 0.598629821108975, 0.599025679485045, \n0.599481595559102, 0.599996283298712, 0.600568471691505, 0.601196905441956, 0.601880345622858, 0.602617570282385, 0.603407375007626, 0.604248573445562, 0.605139997782448, 0.606080499182626, \n0.607068948187781, 0.608104235077743, 0.609185270193881, 0.610310984226216, 0.611480328465359, 0.612692275020413, 0.613945817003972, 0.615239968685379, 0.616573765613382, 0.617946264709359, \n0.619356544332251, 0.620803704316384, 0.622286865983306, 0.6238051721288, 0.625357786986205, 0.626943896167168, 0.62856270658096, 0.630213446333437, 0.631895364606747, 0.633607731520865, \n0.635349837977987, 0.637120995490845, 0.638920535995942, 0.640747811652719, 0.64260219462962, 0.64448307687801, 0.646389869894875, 0.648322004475218, 0.650278930455023, 0.652260116445649, \n0.654265049560485, 0.656293235134675, 0.658344196438686, 0.660417474386485, 0.662512627239036, 0.664629230303845, 0.666766875631191, 0.668925171707733, 0.671103743148085, 0.673302230384971, \n0.67552028935853, 0.677757591205308, 0.68001382194747, 0.68228868218272, 0.684581886775398, 0.686893164549205, 0.689222257981986, 0.691568922902953, 0.693932928192741, 0.696314055486646, \n0.698712098881382, 0.701126864645664, 0.703558170934918, 0.706005847510375, 0.708469735462826, 0.710949686941248, 0.713445564886529, 0.715957242770504, 0.718484604340455, 0.721027543369269, \n0.723585963411396, 0.726159777564738, 0.728748908238608, 0.731353286927847, 0.733972853993219, 0.736607558448156, 0.739257357751925, 0.741922217609294, 0.744602111776738, 0.747297021875233, \n0.750006937209679, 0.752731854594966, 0.755471778188724, 0.758226719330746, 0.760996696389113, 0.763781734613003, 0.7665818659922, 0.769397129123273, 0.77222756908243, 0.775073237305026, \n0.7779341914717, 0.780810495401126, 0.783702218949357, 0.786609437915733, 0.789532233955328, 0.792470694497908, 0.795424912673387, 0.79839498724374, 0.801381022541354, 0.804383128413802, \n0.807401420175008, 0.810436018562792, 0.813487049702783, 0.816554645078666, 0.819638941508788, 0.822740081129092, 0.825858211382388, 0.828993485013962, 0.832146060073551, 0.835316099923664, \n0.838503773254312, 0.841709254104148, 0.844932721888065, 0.848174361431292, 0.851434363010045, 0.854712922398787, 0.858010240924174, 0.861326525525764, 0.864661988823569, 0.868016849192578, \n0.871391330844328, 0.874785663915678, 0.878200084564903, 0.881634835075271, 0.885090163966263, 0.888566326112615, 0.89206358287138, 0.895582202217228, 0.899122458886202, 0.902684634528195, \n0.906269017868402, 0.909875904878055, 0.913505598954734, 0.91715841111261, 0.920834660182965, 0.924534673025392, 0.928258784750083, 0.932007338951655, 0.93578068795499, 0.939579193073612, \n0.943403224881137, 0.947253163496406, 0.951129398882906, 0.95503233116318, 0.958962370948931, 0.962919939687605, 0.966905470026282, 0.970919406193763, 0.974962204401795, 0.979034333266476, \n0.983136274250912, 0.98726852213031, 0.991431585480765, 0.995625987193085, 0.999852265013103, 1.004110972110041, 1.008402677674592, 1.01272796754851, 1.017087444887667, 1.021481730860639, \n1.025911465385063, 1.030377307904215, 1.034879938206376, 1.039420057289851, 1.043998388276645, 1.04861567737812, 1.053272694916184, 1.05797023640388, 1.062709123689559, 1.067490206169182, \n1.0723143620717, 1.077182499822861, 1.082095559493312, 1.087054514337344, 1.092060372429249, 1.097114178404867, 1.102217015316616, 1.107370006611109, 1.112574318239294, 1.117831160910061, \n1.123141792499316, 1.128507520627748, 1.133929705421837, 1.139409762474191, 1.144949166020966, 1.150549452356019, 1.156212223503613, 1.161939151173854, 1.167731981027793, 1.173592537282182, \n1.179522727687384, 1.18552454891585, 1.191600092403162, 1.197751550688716, 1.203981224309059, 1.210291529303631, 1.216685005400429, 1.223164324958067, 1.229732302751051, 1.236391906697077, \n1.243146269639108, 1.249998702311229, 1.256952707636314, 1.26401199652582, 1.271180505378341, 1.278462415504581, 1.285862174743275, 1.293384521576461, 1.301034512105013, 1.308817550308363, \n1.31673942208848, 1.324806333690333, 1.333024955203561, 1.341402469987695, 1.34994663103295, 1.358665825478794, 1.367569148774645, 1.376666490296053, 1.385968632645737, 1.395487367398629, \n1.405235630730335, 1.415227663249329, 1.4254791995044, 1.436007694158328, 1.446832593845461, 1.457975666465506, 1.469461403401526, 1.481317515323001, 1.49357554950367, 1.506271666964623, \n1.519447632843708, 1.533152095765629, 1.547442265892134, 1.562386153987974, 1.578065617910626, 1.594580601456246, 1.612055187140309, 1.630646506095119, 1.650558337432524, 1.672062796528318, \n1.695536856355687, 1.721528259336128, 1.750885897625138, 1.785052960922653, 1.826867642862437, 1.883656531202128, 2.003113773641998, 1.897224722022021, 1.833848195286854, 1.788431217471175, \n1.751571052359035, 1.719932844172534, 1.691887496216384, 1.666499150444455, 1.643173387588666, 1.621505706826002, 1.601206599473202, 1.582060701127153, 1.563902834986805, 1.546603138455315, \n1.53005739705292, 1.514180521970883, 1.498902008223558, 1.484162686262906, 1.469912344592903, 1.456107954634836, 1.442712321750881, 1.429693044020747, 1.417021697315719, 1.404673189482892, \n1.392625242752841, 1.380857974654678, 1.369353555517855, 1.358095926170321, 1.347070563425184, 1.336264283855696, 1.325665078508226, 1.315261972810994, 1.305044907152312, 1.295004634530687, \n1.285132632395009, 1.275421026349593, 1.265862523835242, 1.256450356242073, 1.247178228184039, 1.238040272884682, 1.229031012800592, 1.220145324752582, 1.211378408951572, 1.20272576140211, \n1.194183149245498, 1.185746588669924, 1.177412325069435, 1.169176815179062, 1.161036710951555, 1.152988844973298, 1.145030217244173, 1.137157983169156, 1.129369442629076, 1.121662030014728, \n1.114033305122908, 1.106480944825285, 1.099002735431697, 1.09159656567864, 1.084260420281747, 1.076992373997959, 1.069790586149176, 1.062653295564445, 1.055578815902379, 1.048565531319562, \n1.041611892454288, 1.034716412698119, 1.027877664730524, 1.02109427729436, 1.014364932192113, 1.007688361484757, 1.001063344876854, 0.994488707273022, 0.987963316492285, 0.981486081128074, \n0.975055948542723, 0.968671902986306, 0.962332963830568, 0.956038183909473, 0.949786647958644, 0.943577471146618, 0.937409797691407, 0.931282799556419, 0.925195675220267, 0.919147648515423, \n0.91313796753109, 0.907165903576017, 0.901230750197314, 0.895331822251644, 0.889468455025394, 0.883640003400763, 0.877845841064836, 0.872085359759012, 0.866357968566283, 0.86066309323408, \n0.855000175530539, 0.849368672632212, 0.843768056541358, 0.838197813531098, 0.832657443616842, 0.827146460052463, 0.821664388849846, 0.816210768320491, 0.81078514863795, 0.805387091419969, \n0.80001616932925, 0.794671965691838, 0.7893540741322, 0.784062098224109, 0.778795651156507, 0.773554355413581, 0.768337842468308, 0.763145752488802, 0.757977734056799, 0.752833443897694, \n0.747712546621541, 0.742614714474493, 0.737539627100159, 0.73248697131042, 0.72745644086523, 0.72244773626099, 0.717460564527097, 0.712494639030265, 0.707549679286287, 0.702625410778874, \n0.697721564785263, 0.69283787820828, 0.687974093414581, 0.68312995807878, 0.678305225033221, 0.673499652123139, 0.668713002066975, 0.663945042321631, 0.659195544952445, 0.654464286507696, \n0.649751047897435, 0.645055614276479, 0.640377774931376, 0.635717323171199, 0.63107405622199, 0.62644777512473, 0.621838284636665, 0.617245393135886, 0.612668912529008, 0.608108658161836, \n0.603564448732907, 0.59903610620978, 0.594523455747989, 0.590026325612537, 0.585544547101851, 0.58107795447409, 0.576626384875733, 0.572189678272344, 0.567767677381456, 0.563360227607473, \n0.55896717697853, 0.554588376085241, 0.550223678021254, 0.545872938325566, 0.541536014926517, 0.53721276808742, 0.532903060353757, 0.528606756501896, 0.524323723489265, 0.520053830405945, \n0.515796948427626, 0.511552950769878, 0.507321712643699, 0.50310311121229, 0.498897025549026, 0.494703336596564, 0.490521927127076, 0.486352681703552, 0.482195486642136, 0.478050229975478, \n0.473916801417058, 0.469795092326441, 0.465684995675464, 0.461586406015285, 0.457499219444301, 0.453423333576891, 0.449358647512958, 0.445305061808254, 0.441262478445452, 0.437230800805952, \n0.433209933642399, 0.429199783051879, 0.425200256449785, 0.421211262544329, 0.417232711311681, 0.413264513971712, 0.40930658296433, 0.40535883192639, 0.401421175669152, 0.397493530156289, \n0.393575812482407, 0.389667940852088, 0.385769834559411, 0.381881413967964, 0.37800260049132, 0.374133316573967, 0.370273485672671, 0.366423032238279, 0.362581881697928, 0.358749960437665, \n0.354927195785457, 0.351113515994586, 0.347308850227414, 0.343513128539512, 0.339726281864142, 0.335948241997076, 0.332178941581762, 0.328418314094795, 0.324666293831725, 0.320922815893158, \n0.317187816171164, 0.313461231335974, 0.309742998822962, 0.306033056819905, 0.302331344254513, 0.29863780078222, 0.294952366774229, 0.291274983305818, 0.287605592144872, 0.283944135740668, \n0.280290557212882, 0.276644800340824, 0.273006809552894, 0.269376529916252, 0.265753907126695, 0.262138887498742, 0.258531417955912, 0.254931446021206, 0.251338919807766, 0.24775378800973, \n0.24417599989326, 0.240605505287752, 0.237042254577212, 0.233486198691803, 0.22993728909956, 0.226395477798255, 0.222860717307429, 0.21933296066057, 0.215812161397442, 0.212298273556558, \n0.208791251667803, 0.205291050745184, 0.201797626279722, 0.198310934232484, 0.19483093102773, 0.191357573546197, 0.187890819118508, 0.184430625518691, 0.180976950957834, 0.177529754077839, \n0.174088993945298, 0.170654630045482, 0.167226622276431, 0.163804930943155, 0.160389516751938, 0.156980340804743, 0.153577364593717, 0.150180549995791, 0.146789859267378, 0.143405255039162, \n0.140026700310981, 0.13665415844679, 0.133287593169729, 0.129926968557255, 0.126572249036376, 0.123223399378954, 0.119880384697095, 0.116543170438616, 0.11321172238259, 0.109886006634959, \n0.106565989624237, 0.103251638097264, 0.099942919115049, 0.096639800048673, 0.093342248575262, 0.090050232674024, 0.086763720622361, 0.083482680992029, 0.080207082645378, 0.076936894731636, \n0.073672086683271, 0.070412628212396, 0.067158489307246, 0.063909640228698, 0.060666051506856, 0.057427693937692, 0.054194538579729, 0.05096655675079, 0.047743720024788, 0.044526000228575, \n0.041313369438834, 0.038105799979022, 0.03490326441636, 0.031705735558873, 0.02851318645247, 0.025325590378071, 0.022142920848786, 0.018965151607124, 0.015792256622252, 0.012624210087298, \n0.009460986416691, 0.006302560243538, 0.003148906417051, 0]\n'"
demo/swt2.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport pylab\nimport numpy\nimport Image  # PIL\n\nimport pywt\n\nim = Image.open(""data/aero.png"").convert(\'L\')\narr = numpy.fromstring(im.tostring(), numpy.uint8)\narr.shape = (im.size[1], im.size[0])\n\npylab.imshow(arr, interpolation=""nearest"", cmap=pylab.cm.gray)\n\nfor LL, (LH, HL, HH) in pywt.swt2(arr, \'bior1.3\', level=3, start_level=0):\n    pylab.figure()\n    for i, a in enumerate([LL, LH, HL, HH]):\n        pylab.subplot(2, 2, i + 1)\n        pylab.imshow(a, origin=\'image\', interpolation=""nearest"",\n            cmap=pylab.cm.gray)\n\npylab.show()\n'"
demo/user_filter_banks.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport pywt\n\n\nclass FilterBank(object):\n    """"""Sample filter bank with Quadrature Mirror Filters for Haar wavelet""""""\n    dec_lo = [0.70710678118654757, 0.70710678118654757]\n    dec_hi = [-0.70710678118654757, 0.70710678118654757]\n    rec_lo = [0.70710678118654757, 0.70710678118654757]\n    rec_hi = [0.70710678118654757, -0.70710678118654757]\n\n    def __init__(self):\n        self.filter_bank = self.dec_lo, self.dec_hi, self.rec_lo, self.rec_hi\n\ndata = [1, 2, 3, 4, 5, 6]\n\n############################################################################\nprint ""Case 1 (custom filter bank - Haar wavelet)""\n\nmyBank = FilterBank()\n# pass the user supplied filter bank as argument\nmyWavelet = pywt.Wavelet(name=""UserSuppliedWavelet"", filter_bank=myBank)\n#print myWavelet.get_filters_coeffs()\n\nprint ""data:"", data\na, d = pywt.dwt(data, myWavelet)\nprint ""a:"", a\nprint ""d:"", d\nprint ""rec:"", pywt.idwt(a, d, myWavelet)\n\n############################################################################\nprint ""-"" * 75\nprint ""Case 2 (Wavelet object as filter bank - db2 wavelet)""\n\n# builtin wavelets can also be treated as filter banks with theirs\n# filter_bank attribute\n\nbuiltinWavelet = pywt.Wavelet(\'db2\')\nmyWavelet = pywt.Wavelet(\n    name=""UserSuppliedWavelet"",\n    filter_bank=builtinWavelet\n)\n\nprint ""data:"", data\na, d = pywt.dwt(data, myWavelet)\nprint ""a:"", a\nprint ""d:"", d\nprint ""rec:"", pywt.idwt(a, d, myWavelet)\n'"
demo/wavedec.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport pywt\n\ndata = range(16)\nwavelet = \'db4\'\nlevel = 2\nmode = \'cpd\'\n\nprint ""original data:""\nprint data\nprint\n\n# dec = [cA(n-1) cD(n-1) cD(n-2) ... cD(2) cD(1)]\ndec = pywt.wavedec(data, wavelet, mode, level)\n\nprint ""decomposition:""\n\nprint ""cA%d:"" % (len(dec) - 1)\nprint \' \'.join([(""%.3f"" % val) for val in dec[0]])\n\nfor i, d in enumerate(dec[1:]):\n    print ""cD%d:"" % (len(dec) - 1 - i)\n    print \' \'.join([(""%.3f"" % val) for val in d])\n\nprint\nprint ""reconstruction:""\n\nprint \' \'.join([(""%.3f"" % val) for val in pywt.waverec(dec, wavelet, mode)])\n'"
demo/waveinfo.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport sys\n\nimport pylab\n\nimport pywt\n\nusage = """"""Usage:\\n %s wavelet [refinement level]"""""" % os.path.basename(\n    sys.argv[0])\n\ntry:\n    wavelet = pywt.Wavelet(sys.argv[1])\n    try:\n        level = int(sys.argv[2])\n    except IndexError, e:\n        level = 10\nexcept ValueError, e:\n    print ""Unknown wavelet""\n    raise SystemExit\nexcept IndexError, e:\n    print usage\n    raise SystemExit\n\nprint wavelet\n\ndata = wavelet.wavefun(level)\nfuncs, x = data[:-1], data[-1]\n\nn = (len(data) - 1) // 2\nlabels = [\n    ""scaling function (phi)"", ""wavelet function (psi)"",\n    ""r. scaling function (phi)"", ""r. wavelet function (psi)""\n]\ncolours = (""r"", ""g"", ""r"", ""g"")\nfor i, (d, label, colour) in enumerate(zip(funcs, labels, colours)):\n    mi, ma = d.min(), d.max()\n    margin = (ma - mi) * 0.05\n    ax = pylab.subplot(n, 2, 1 + i)\n\n    pylab.plot(x, d, colour)\n    pylab.title(label)\n    pylab.ylim(mi - margin, ma + margin)\n    pylab.xlim(x[0], x[-1])\n\npylab.show()\n'"
demo/wp_2d.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport Image  # PIL\nimport numpy\nimport pylab\n\nfrom pywt import WaveletPacket2D\n\nim = Image.open(""data/aero.png"").convert(\'L\')\narr = numpy.fromstring(im.tostring(), numpy.uint8)\narr.shape = (im.size[1], im.size[0])\n\nwp2 = WaveletPacket2D(arr, \'db2\', \'sym\', maxlevel=2)\n\npylab.imshow(arr, interpolation=""nearest"", cmap=pylab.cm.gray)\n\npath = [\'d\', \'v\', \'h\', \'a\']\n\n#mod = lambda x: x\n#mod = lambda x: abs(x)\nmod = lambda x: numpy.sqrt(abs(x))\n\npylab.figure()\nfor i, p2 in enumerate(path):\n    pylab.subplot(2, 2, i + 1)\n    p1p2 = p2\n    pylab.imshow(mod(wp2[p1p2].data), origin=\'image\', interpolation=""nearest"",\n        cmap=pylab.cm.gray)\n    pylab.title(p1p2)\n\nfor p1 in path:\n    pylab.figure()\n    for i, p2 in enumerate(path):\n        pylab.subplot(2, 2, i + 1)\n        p1p2 = p1 + p2\n        pylab.imshow(mod(wp2[p1p2].data), origin=\'image\',\n            interpolation=""nearest"", cmap=pylab.cm.gray)\n        pylab.title(p1p2)\n\npylab.figure()\ni = 1\nfor row in wp2.get_level(2, \'freq\'):\n    for node in row:\n        pylab.subplot(len(row), len(row), i)\n        pylab.title(""%s=(%s row, %s col)"" % (\n        (node.path,) + wp2.expand_2d_path(node.path)))\n        pylab.imshow(mod(node.data), origin=\'image\', interpolation=""nearest"",\n            cmap=pylab.cm.gray)\n        i += 1\n\npylab.show()\n'"
demo/wp_scalogram.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport matplotlib.cm as cm\nimport pylab\n\nimport pywt\n\nx = pylab.arange(0, 1, 1. / 512)\ndata = pylab.sin((5 * 50 * pylab.pi * x ** 2))\n\nwavelet = \'db2\'\nlevel = 4\norder = ""freq""  # ""normal""\ninterpolation = \'nearest\'\ncmap = cm.cool\n\nwp = pywt.WaveletPacket(data, wavelet, \'sym\', maxlevel=level)\nnodes = wp.get_level(level, order=order)\nlabels = [n.path for n in nodes]\nvalues = pylab.array([n.data for n in nodes], \'d\')\nvalues = abs(values)\n\nf = pylab.figure()\nf.subplots_adjust(hspace=0.2, bottom=.03, left=.07, right=.97, top=.92)\npylab.subplot(2, 1, 1)\npylab.title(""linchirp signal"")\npylab.plot(x, data, \'b\')\npylab.xlim(0, x[-1])\n\nax = pylab.subplot(2, 1, 2)\npylab.title(""Wavelet packet coefficients at level %d"" % level)\npylab.imshow(values, interpolation=interpolation, cmap=cmap, aspect=""auto"",\n    origin=""lower"", extent=[0, 1, 0, len(values)])\npylab.yticks(pylab.arange(0.5, len(labels) + 0.5), labels)\n#pylab.setp(ax.get_xticklabels(), visible=False)\n\n#pylab.figure(2)\n#pylab.specgram(data, NFFT=64, noverlap=32, cmap=cmap)\n#pylab.imshow(values, origin=\'upper\', extent=[-1,1,-1,1],\n# interpolation=\'nearest\')\n\npylab.show()\n'"
demo/wp_tree.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom pywt import WaveletPacket\n\nwp = WaveletPacket(range(16), \'db2\', maxlevel=3)\nprint [node.path for node in wp.get_leaf_nodes(decompose=False)]\nprint [node.path for node in wp.get_leaf_nodes(decompose=True)]\ncoeffs = [(node.path, node.data) for node in wp.get_leaf_nodes(decompose=True)]\nprint coeffs\n\nwp2 = WaveletPacket(None, \'db2\', maxlevel=3)\nfor path, data in coeffs:\n    wp2[path] = data\n#print wp[""a""]\nprint [node.path for node in wp2.get_leaf_nodes(decompose=False)]\nprint wp2.reconstruct()\n'"
demo/wp_visualize_coeffs_distribution.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport numpy\nimport pylab\n\nfrom pywt import WaveletPacket\n\nx = numpy.arange(612 - 80, 20, -0.5) / 150.\ndata = numpy.sin(20 * pylab.log(x)) * numpy.sign((pylab.log(x)))\nfrom sample_data import ecg as data\n\nwp = WaveletPacket(data, \'sym5\', maxlevel=4)\n\npylab.bone()\npylab.subplot(wp.maxlevel + 1, 1, 1)\npylab.plot(data, \'k\')\npylab.xlim(0, len(data) - 1)\npylab.title(""Wavelet packet coefficients"")\n\nfor i in range(1, wp.maxlevel + 1):\n    ax = pylab.subplot(wp.maxlevel + 1, 1, i + 1)\n    nodes = wp.get_level(i, ""freq"")\n    nodes.reverse()\n    labels = [n.path for n in nodes]\n    values = -abs(numpy.array([n.data for n in nodes]))\n    pylab.imshow(values, interpolation=\'nearest\', aspect=\'auto\')\n    pylab.yticks(numpy.arange(len(labels) - 0.5, -0.5, -1), labels)\n    pylab.setp(ax.get_xticklabels(), visible=False)\n\npylab.show()\n'"
tests/__init__.py,0,b''
tests/test_doc.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport doctest\nimport glob\nimport os\nimport unittest\n\ndocs_base = os.path.abspath(\n    os.path.join(os.path.dirname(__file__), os.path.pardir, ""doc"", ""source""))\n\nfiles = glob.glob(os.path.join(docs_base, ""*.rst""))\\\n        + glob.glob(os.path.join(docs_base, ""*"", ""*.rst""))\n\nassert files\n\nsuite = doctest.DocFileSuite(*files, module_relative=False, encoding=""utf-8"")\n\nif __name__ == ""__main__"":\n    unittest.TextTestRunner().run(suite)\n'"
tests/test_matlab_compatibility.py,0,"b'#!/usr/bin/env python\n\n""""""\nTest used to verify PyWavelets Discrete Wavelet Transform computation\naccuracy against MathWorks Wavelet Toolbox.\n\nThis way you can be perfectly sure about PyWavelets\' results quality\nand reproducibility.\n""""""\n\nimport math\n\nimport numpy\nfrom numpy import asarray, float64\n\ntry:\n    from mlabwrap import mlab\nexcept:\n    print ""To run this test you need to have MathWorks MATLAB, MathWorks "" \\\n           ""Wavelet Toolbox and mlabwrap Python extension installed.""\n    raise SystemExit\n\nimport pywt\n\n\ndef mse(ar1, ar2):\n    """"""Mean squared error""""""\n    ar1 = asarray(ar1, dtype=float64)\n    ar2 = asarray(ar2, dtype=float64)\n    dif = ar1 - ar2\n    dif *= dif\n    return dif.sum() / len(ar1)\n\n\ndef rms(ar1, ar2):\n    """"""Root mean squared error""""""\n    return math.sqrt(mse(ar1, ar2))\n\n\ndef test_accuracy(families, wavelets, modes, epsilon=1.0e-10):\n    print ""Testing decomposition"".upper()\n\n    for pmode, mmode in modes:\n        for wavelet in wavelets:\n            print ""Wavelet: %-8s Mode: %s"" % (wavelet, pmode)\n\n            w = pywt.Wavelet(wavelet)\n            data_size = range(w.dec_len, 40) + [100, 200, 500, 1000, 50000]\n\n            for N in data_size:\n                data = numpy.random.random(N)\n\n                # PyWavelets result\n                pa, pd = pywt.dwt(data, wavelet, pmode)\n\n                # Matlab result\n                ma, md = mlab.dwt(data, wavelet, \'mode\', mmode, nout=2)\n                ma = ma.flat\n                md = md.flat\n\n                # calculate error measures\n                mse_a, mse_d = mse(pa, ma), mse(pd, md)\n                rms_a, rms_d = math.sqrt(mse_a), math.sqrt(mse_d)\n\n                if rms_a > epsilon:\n                    print \'[RMS_A > EPSILON] for Mode: %s, Wavelet: %s, \'\\\n                    \'Length: %d, rms=%.3g\' % (pmode, wavelet, len(data), rms_a)\n\n                if rms_d > epsilon:\n                    print \'[RMS_D > EPSILON] for Mode: %s, Wavelet: %s, \'\\\n                    \'Length: %d, rms=%.3g\' % (pmode, wavelet, len(data), rms_d)\n\n\nif __name__ == \'__main__\':\n\n    families = (\'db\', \'sym\', \'coif\', \'bior\', \'rbio\')\n    wavelets = sum([pywt.wavelist(name) for name in families], [])\n    # list of mode names in pywt and matlab\n    modes = [(\'zpd\', \'zpd\'), (\'cpd\', \'sp0\'), (\'sym\', \'sym\'),\n             (\'ppd\', \'ppd\'), (\'sp1\', \'sp1\'), (\'per\', \'per\')]\n    # max RMSE\n    epsilon = 1.0e-10\n\n    test_accuracy(families, wavelets, modes, epsilon)\n'"
tests/test_perfect_reconstruction.py,0,"b'#!/usr/bin/env python\n\n""""""\nVerify DWT perfect reconstruction.\n""""""\n\nimport math\n\nimport numpy\nfrom numpy import asarray, float64, float32\n\nimport pywt\n\n\ndef mse(ar1, ar2):\n    """"""Mean squared error""""""\n    ar1 = asarray(ar1, dtype=float64)\n    ar2 = asarray(ar2, dtype=float64)\n    dif = ar1 - ar2\n    dif *= dif\n    return dif.sum() / len(ar1)\n\n\ndef rms(ar1, ar2):\n    """"""Root mean squared error""""""\n    return math.sqrt(mse(ar1, ar2))\n\n\ndef test_perfect_reconstruction(families, wavelets, modes, epsilon, dtype):\n    for wavelet in wavelets:\n        for pmode, mmode in modes:\n            print ""Wavelet: %-8s Mode: %s"" % (wavelet, pmode),\n\n            data_size = range(2, 40) + [100, 200, 500, 1000, 2000, 10000,\n                                        50000, 100000]\n\n            ok, over = 0, 0\n            for N in data_size:\n                data = numpy.asarray(numpy.random.random(N), dtype)\n\n                # compute dwt coefficients\n                pa, pd = pywt.dwt(data, wavelet, pmode)\n\n                # compute reconstruction\n                rec = pywt.idwt(pa, pd, wavelet, pmode)\n\n                if len(data) % 2:\n                    rec = rec[:len(data)]\n\n                rms_rec = rms(data, rec)\n                if rms_rec > epsilon:\n                    if not over:\n                        print\n                    print \'[RMS_REC > EPSILON] for Mode: %s, Wavelet: %s, \' \\\n                        \'Length: %d, rms=%.3g\' % (\n                        pmode, wavelet, len(data), rms_rec)\n                    over += 1\n                else:\n                    ok += 1\n            if not over:\n                print ""- RMSE for all %d cases was under %s"" % (\n                len(data_size), epsilon)\n\nif __name__ == \'__main__\':\n\n    families = (\'db\', \'sym\', \'coif\', \'bior\', \'rbio\')\n    wavelets = sum([pywt.wavelist(name) for name in families], [])\n    # list of mode names in pywt and matlab\n    modes = [(\'zpd\', \'zpd\'), (\'cpd\', \'sp0\'), (\'sym\', \'sym\'),\n             (\'ppd\', \'ppd\'), (\'sp1\', \'sp1\'), (\'per\', \'per\')]\n\n    print ""Testing perfect reconstruction"".upper()\n    for dtype, name, epsilon in [\n        (float32, ""float32"", 1.0e-7),\n        (float64, ""float64"", 0.5e-10)\n    ][::-1]:\n        print ""#"" * 80\n        print ""Precision: %s, max RMSE: %s"" % (name, epsilon)\n        print ""#"" * 80 + ""\\n""\n        test_perfect_reconstruction(families, wavelets, modes, epsilon=epsilon,\n            dtype=dtype)\n        print\n'"
tests/test_regression.py,0,b'#!/usr/bin/env python\n\n# tests moved to test_doc.py\n'
util/__init__.py,0,b''
util/commands.py,0,"b'#-*- coding: utf-8 -*-\n# Copyright Filip Wasilewski <en@ig.ma>. All rights reserved.\n\nfrom __future__ import print_function\n\nimport os\nimport sys\n\ntry:\n    from setuptools import Command\n    from setuptools.command.build_ext import build_ext as _build_ext\n    from setuptools.command.sdist import sdist as _sdist\n    from setuptools.extension import Extension as _Extension\n    has_setuptools = True\nexcept ImportError:\n    from distutils.cmd import Command # noqa\n    from distutils.command.build_ext import build_ext as _build_ext\n    from distutils.command.sdist import sdist as _sdist\n    from distutils.core import Extension\n    has_setuptools = False\n\nfrom distutils import dir_util\nfrom distutils.errors import DistutilsClassError\n\nimport templating\n\nbase_dir = os.path.join(os.path.abspath(os.path.dirname(__file__)), "".."")\n\nif has_setuptools:\n    # Remove special handling of .pyx files from class patched by setuptools\n    class Extension(_Extension):\n        def __init__(self, name, sources, *args, **kwargs):\n            _Extension.__init__(self, name, sources, *args, **kwargs)\n            self.sources = sources\n\n\ndef replace_extension(path, newext):\n    return os.path.splitext(path)[0] + newext\n\n\ndef is_newer(file, than_file):\n    return os.path.getmtime(file) > os.path.getmtime(than_file)\n\n\nclass CleanCommand(Command):\n    user_options = []\n\n    def initialize_options(self):\n        self.base_roots = [""demo"", ""doc"", ""pywt"", ""src"", ""tests"", ""util""]\n        self.dirty = ["".pyc"", "".so"", "".o"", "".pyd""]\n        self.files = []\n        self.dirs = [""build"", ""dist""]\n\n    def finalize_options(self):\n        for base_root in self.base_roots:\n            if os.path.exists(base_root):\n                for root, dirs, files in os.walk(base_root):\n                    for f in files:\n                        if os.path.splitext(f)[-1] in self.dirty:\n                            self.files.append(os.path.join(root, f))\n\n                    for d in dirs:\n                        if d == ""__pycache__"":\n                            self.dirs.append(os.path.join(root, d))\n\n    def run(self):\n        for path in self.files:\n            print(""removing \'{0}\'"".format(path))\n            if not self.dry_run:\n                os.remove(path)\n\n        for d in self.dirs:\n            if os.path.exists(d):\n                dir_util.remove_tree(d, dry_run=self.dry_run)\n\n\nclass SdistCommand(_sdist):\n\n    def initialize_options(self):\n        _sdist.initialize_options(self)\n        self._pyx = []\n        self._templates = []\n        for root, dirs, files in os.walk(""src""):\n            for f in files:\n                if f.endswith("".pyx""):\n                    self._pyx.append(os.path.join(root, f))\n                elif "".template"" in f:\n                    self._templates.append(os.path.join(root, f))\n\n    def validate_templates_expanded(self):\n        for template_file in self._templates:\n            destination_file = templating.get_destination_filepath(\n                template_file)\n\n            if not os.path.exists(destination_file):\n                raise DistutilsClassError(\n                    ""Expanded file \'{0}\' not found. ""\n                    ""Run build first."".format(destination_file))\n\n            if templating.needs_update(template_file, destination_file):\n                raise DistutilsClassError(\n                    ""Expanded file \'{0}\' seems out of date compared to \'{1}\'. ""\n                    ""Run build first."".format(destination_file, template_file))\n\n    def validate_pyx_expanded(self):\n        for pyx_file in self._pyx:\n            c_file = replace_extension(pyx_file, "".c"")\n\n            if not os.path.exists(c_file):\n                raise DistutilsClassError(\n                    ""C-source file \'{0}\' not found. ""\n                    ""Run build first."".format(c_file))\n\n            if is_newer(pyx_file, c_file):\n                raise DistutilsClassError(\n                    ""C-source file \'{0}\' seems out of date compared to \'{1}\'. ""\n                    ""Run build first."".format(c_file, pyx_file))\n\n    def run(self):\n        self.force_manifest = 1\n        self.validate_templates_expanded()\n        self.validate_pyx_expanded()\n        _sdist.run(self)\n\n\nclass BuildExtCommand(_build_ext):\n    templates_glob = os.path.join(base_dir, ""src"", ""*.template.*"")\n\n    extra_compile_flags = {\n        #""msvc"": [""/W4"", ""/wd4127"", ""/wd4702"", ""/wd4100""]\n    }\n\n    user_options = _build_ext.user_options + [\n        (""force-pyx-compile"", None, ""always compile Cython files""),\n        (""force-template-update"", None, ""always expand templates""),\n    ]\n\n    boolean_options = _build_ext.boolean_options + [\n        ""force-pyx-compile"", ""force-template-update""\n    ]\n\n    def initialize_options(self):\n        _build_ext.initialize_options(self)\n        self.pyx_compile = True\n        self.force_pyx_compile = False\n        self.force_template_update = False\n\n    def finalize_options(self):\n        _build_ext.finalize_options(self)\n\n        self.set_undefined_options(""build"",\n            (""force_pyx_compile"", ""force_pyx_compile""),\n            (""force_template_update"", ""force_template_update"")\n        )\n\n    def get_extra_compile_args(self):\n        compiler_type = self.compiler.compiler_type\n        return self.extra_compile_flags.get(compiler_type, [])\n\n    def should_compile(self, source_file, compiled_file):\n        if self.force_pyx_compile:\n            return True\n        if not os.path.exists(compiled_file):\n            return True\n        if is_newer(source_file, compiled_file):\n            return True\n        return False\n\n    def compile_cython_file(self, extension, pyx_source_file):\n        c_source_file = replace_extension(pyx_source_file, "".c"")\n\n        if not self.pyx_compile:\n            print(""Cython compilation disabled. Using compiled file:"",\n                c_source_file)\n            return c_source_file\n\n        try:\n            from Cython.Compiler.Main import compile\n        except ImportError:\n            print(""Cython is not installed. Using compiled file:"",\n                pyx_source_file)\n            return c_source_file\n\n        if not self.should_compile(pyx_source_file, c_source_file):\n            print(""Generated Cython file is up-to-date."")\n            return c_source_file\n\n        print(""Compiling Cython file:"", pyx_source_file)\n        result = compile(pyx_source_file, full_module_name=extension.name)\n\n        if result.c_file:\n            c_source_file = result.c_file\n            # Py2 distutils can\'t handle unicode file paths\n            if sys.version_info[0] < 3:\n                filename_encoding = sys.getfilesystemencoding()\n                if filename_encoding is None:\n                    filename_encoding = sys.getdefaultencoding()\n                c_source_file = c_source_file.encode(filename_encoding)\n        else:\n            print(""Compilation failed:"", pyx_source_file)\n        return c_source_file\n\n    def compile_sources(self, extension, sources):\n        for i, source in enumerate(sources):\n            base, ext = os.path.splitext(source)\n            if ext == "".pyx"":\n                c_source_file = self.compile_cython_file(extension, source)\n                # substitute .pyx file with compiled .c file\n                sources[i] = c_source_file\n\n    def build_extensions(self):\n        templating.expand_files(self.templates_glob,\n            force_update=self.force_template_update)\n        _build_ext.build_extensions(self)\n\n    def build_extension(self, ext):\n        ext.extra_compile_args += self.get_extra_compile_args()\n        self.compile_sources(ext, ext.sources)\n        _build_ext.build_extension(self, ext)\n\n\nclass TestCommand(Command):\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        import subprocess\n        raise SystemExit(\n            subprocess.call([sys.executable, ""tests/test_doc.py""]))\n'"
util/templating.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Author: Filip Wasilewski\n# Date: $Date$\n\n# Ok, not really a full-featured templating language, but good enough\n# to keep the code easier to maintain.\n# PS. For internal use only ;)\n\nimport glob\nimport os\nimport re\n\npattern_for = re.compile(r""""""(?P<for>\n                                ^\\s*\n                                    (?:/{2,})?  # optional C comment\n                                    \\s*\n                                    \\#{2}       # two hashes\n                                    \\s*\n\n                                    (FOR)\n                                        \\s+ (?P<variable>[\\w$][\\d\\w$]*) \\s+\n                                    (IN)\n                                        \\s+ \\(\n                                        (?P<values>\n                                            (?:\n                                                \\s* [^,\\s]+ , \\s*\n                                            )+\n                                            (?:\n                                                [^,\\s]+\n                                            ){0,1}\n                                            \\s*\n                                        )\n                                        \\)\n                                    \\s* : \\s*\n                             )\n                             ^(?P<body>.*?)\n                             (?P<endfor>\n                                ^\n                                    \\s*\n                                    (?:/{2,})?  # optional C comment\n                                    \\s*\n                                    \\#{2}       # two hashes\n                                    \\s*\n                                    (ENDFOR)\n                                        \\s+ (?P=variable) \\s*?\\n\n                             )\n"""""", re.X | re.M | re.S | re.I)\n\n\ndef expand_template(s):\n    """"""\n    Currently it only does a simple repeat-and-replace in a loop:\n\n    FOR $variable$ IN (value1, value2, ...):\n        ... start block ...\n        $variable$\n        ... end block ...\n    ENDFOR $variable$\n\n    The above will repeat the block for every value from the list each time\n    substituting the $variable$ with the current value.\n\n        >>> s = \\\n        ... \'\'\'\n        ... w = 9\n        ... ## FOR $x$ IN (7, w):\n        ...   ## FOR $y$ IN (""{"", 1):\n        ... print $x$, $y$, ""$x$_$y$""\n        ...   ## ENDFOR $y$\n        ... ## ENDFOR $x$\'\'\'\n        >>> print expand_template(s)\n\n        w = 9\n        print 7, ""{""\n        print 7, 1\n        print w, ""{""\n        print w, 1\n    """"""\n    while True:\n        m = pattern_for.search(s)\n        if not m:\n            break\n\n        new_body = \'\'\n        for value in [\n            v.strip() for v in m.group(\'values\').split(\',\') if v.strip()\n        ]:\n            new_body += m.group(\'body\').replace(m.group(\'variable\'), value)\n\n        s = s[:m.start()] + new_body + s[m.end():]\n\n    return s\n\n\ndef get_destination_filepath(source):\n    root, template_name = os.path.split(source)\n\n    # main extension\n    destination_name, base_ext = os.path.splitext(template_name)\n\n    while os.path.extsep in destination_name:\n        # remove .template extension for files like file.template.c\n        destination_name = os.path.splitext(destination_name)[0]\n    return os.path.join(root, destination_name + base_ext)\n\n\ndef needs_update(template_path, destination_path):\n    if not os.path.exists(destination_path):\n        return True\n    if os.path.getmtime(destination_path) < os.path.getmtime(template_path):\n        return True\n    return False\n\n\ndef expand_files(glob_pattern, force_update=False):\n    files = glob.glob(glob_pattern)\n    for template_path in files:\n        destination_path = get_destination_filepath(template_path)\n        if force_update or needs_update(template_path, destination_path):\n            print ""expanding template: %s -> %s"" % (\n                template_path, destination_path)\n            content = expand_template(open(template_path, ""rb"").read())\n            new_file = open(destination_path, ""wb"")\n            new_file.write(content)\n            new_file.close()\n'"
doc/source/conf.py,0,"b'# -*- coding: utf-8 -*-\n#\n# PyWavelets documentation build configuration file, created by\n# sphinx-quickstart on Sun Mar 14 10:46:18 2010.\n#\n# This file is execfile()d with the current directory set to its containing dir.\n#\n# Note that not all possible configuration values are present in this\n# autogenerated file.\n#\n# All configuration values have a default; values that are commented out\n# serve to show the default.\n\nimport sys, os\nimport datetime\nimport jinja2.filters\n\n# If extensions (or modules to document with autodoc) are in another directory,\n# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\n#sys.path.append(os.path.abspath(\'.\'))\n\n# -- General configuration -----------------------------------------------------\n\n# Add any Sphinx extension module names here, as strings. They can be extensions\n# coming with Sphinx (named \'sphinx.ext.*\') or your custom ones.\nextensions = [\'sphinx.ext.doctest\', \'sphinx.ext.autodoc\', \'sphinx.ext.todo\', \'sphinx.ext.extlinks\']\n\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = [\'_templates\']\n\n# The suffix of source filenames.\nsource_suffix = \'.rst\'\n\n# The encoding of source files.\n#source_encoding = \'utf-8\'\n\n# The master toctree document.\nmaster_doc = \'index\'\n\n# General information about the project.\nproject = \'PyWavelets\'\ncopyright = jinja2.filters.do_mark_safe(\'2006-%s, <a href=""http://en.ig.ma/"">Filip Wasilewski</a>\' % datetime.date.today().year)\n\n# The version info for the project you\'re documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = \'0.2.2\'\n# The full version, including alpha/beta/rc tags.\nrelease = \'0.2.2\'\n\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#language = None\n\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = \'\'\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = \'%B %d, %Y\'\n\n# List of documents that shouldn\'t be included in the build.\nunused_docs = [\'substitutions\', \'overview\']\n\n# List of directories, relative to source directory, that shouldn\'t be searched\n# for source files.\nexclude_trees = [\'_build\']\n\n# The reST default role (used for this markup: `text`) to use for all documents.\n#default_role = None\n\n# If true, \'()\' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\n#show_authors = False\n\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = \'sphinx\'\n\n# A list of ignored prefixes for module index sorting.\nmodindex_common_prefix = [\'pywt.\']\n\n\n# -- Options for HTML output ---------------------------------------------------\n\n# The theme to use for HTML and HTML Help pages.  Major themes that come with\n# Sphinx are currently \'default\' and \'sphinxdoc\'.\nhtml_theme = \'nature\'\n\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#html_theme_options = {}\n\n# Add any paths that contain custom themes here, relative to this directory.\n#html_theme_path = []\n\n# The name for this set of Sphinx documents.  If None, it defaults to\n# ""<project> v<release> documentation"".\nhtml_title = \'PyWavelets Documentation\'\n\n# A shorter title for the navigation bar.  Default is the same as html_title.\n#html_short_title = None\n\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n#html_logo = None\n\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\nhtml_favicon = \'favicon.ico\'\n\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named ""default.css"" will overwrite the builtin ""default.css"".\nhtml_static_path = [\'_static\']\n\n# If not \'\', a \'Last updated on:\' timestamp is inserted at every page bottom,\n# using the given strftime format.\nhtml_last_updated_fmt = \'%b %d, %Y\'\n\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\n#html_use_smartypants = True\n\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\nhtml_sidebars = {\n   \'**\': [\'localtoc.html\', ""relations.html"", \'quicklinks.html\', \'searchbox.html\', \'editdocument.html\'],\n}\n\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n\n# If false, no module index is generated.\n#html_use_modindex = True\n\n# If false, no index is generated.\n#html_use_index = True\n\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n\n# If true, links to the reST sources are added to the pages.\nhtml_show_sourcelink = False\n\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\nhtml_use_opensearch = \'http://pybytes.com/pywavelets\'\n\n# If nonempty, this is the file name suffix for HTML files (e.g. "".xhtml"").\n#html_file_suffix = \'\'\n\n# Output file base name for HTML help builder.\nhtmlhelp_basename = \'PyWaveletsdoc\'\n\n\n# -- Options for LaTeX output --------------------------------------------------\n\n# The paper size (\'letter\' or \'a4\').\n#latex_paper_size = \'letter\'\n\n# The font size (\'10pt\', \'11pt\' or \'12pt\').\n#latex_font_size = \'10pt\'\n\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title, author, documentclass [howto/manual]).\nlatex_documents = [\n  (\'index\', \'PyWavelets.tex\', \'PyWavelets Documentation\',\n   \'Filip Wasilewski\', \'manual\'),\n]\n\n# The name of an image file (relative to this directory) to place at the top of\n# the title page.\n#latex_logo = None\n\n# For ""manual"" documents, if this is true, then toplevel headings are parts,\n# not chapters.\n#latex_use_parts = False\n\n# Additional stuff for the LaTeX preamble.\n#latex_preamble = \'\'\n\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n\n# If false, no module index is generated.\n#latex_use_modindex = True\n'"
src/pywt/__init__.py,0,"b'# -*- coding: utf-8 -*-\n# flake8: noqa\n\n# Copyright (c) 2006-2012 Filip Wasilewski <http://en.ig.ma/>\n# See COPYING for license details.\n\n""""""\nDiscrete forward and inverse wavelet transform, stationary wavelet transform,\nwavelet packets signal decomposition and reconstruction module.\n""""""\n\nimport _pywt, multilevel, multidim, wavelet_packets, functions\nfrom _pywt import *\nfrom multilevel import *\nfrom multidim import *\nfrom wavelet_packets import *\nfrom functions import *\nimport thresholding\n\n__all__ = []\n__all__ += _pywt.__all__\n__all__ += wavelet_packets.__all__\n__all__ += multilevel.__all__\n__all__ += multidim.__all__\n__all__ += functions.__all__\n__all__ += [\'thresholding\']\n\ndel multilevel, multidim, wavelet_packets, functions\n'"
src/pywt/functions.py,0,"b'# -*- coding: utf-8 -*-\n\n# Copyright (c) 2006-2012 Filip Wasilewski <http://en.ig.ma/>\n# See COPYING for license details.\n\n""""""\nOther wavelet related functions.\n""""""\n\n__all__ = [""intwave"", ""centfrq"", ""scal2frq"", ""qmf"", ""orthfilt""]\n\nfrom math import sqrt\n\nfrom _pywt import Wavelet\n\nfrom numerix import asarray, array, float64\nfrom numerix import integrate\nfrom numerix import argmax\nfrom numerix import fft\n\nWAVELET_CLASSES = (Wavelet)\n\n\ndef wavelet_for_name(name):\n    if not isinstance(name, basestring):\n        raise TypeError(\n            ""Wavelet name must be of string type, not %s"" % type(name))\n    try:\n        wavelet = Wavelet(name)\n    except ValueError:\n        raise\n        #raise ValueError(""Invalid wavelet name - %s."" % name)\n    return wavelet\n\n\ndef intwave(wavelet, precision=8):\n    """"""\n    intwave(wavelet, precision=8) -> [int_psi, x]\n        - for orthogonal wavelets\n\n    intwave(wavelet, precision=8) -> [int_psi_d, int_psi_r, x]\n        - for other wavelets\n\n    intwave((function_approx, x), precision=8) -> [int_function, x]\n        - for (function approx., x grid) pair\n\n    Integrate *psi* wavelet function from -Inf to x using the rectangle\n    integration method.\n\n    wavelet         - Wavelet to integrate (Wavelet object, wavelet name string\n                      or (wavelet function approx., x grid) pair)\n\n    precision = 8   - Precision that will be used for wavelet function\n                      approximation computed with the wavefun(level=precision)\n                      Wavelet\'s method.\n\n    (function_approx, x) - Function to integrate on the x grid. Used instead\n                           of Wavelet object to allow custom wavelet functions.\n    """"""\n\n    if isinstance(wavelet, tuple):\n        psi, x = asarray(wavelet[0]), asarray(wavelet[1])\n        step = x[1] - x[0]\n        return integrate(psi, step), x\n\n    else:\n        if not isinstance(wavelet, WAVELET_CLASSES):\n            wavelet = wavelet_for_name(wavelet)\n\n        functions_approximations = wavelet.wavefun(precision)\n        if len(functions_approximations) == 2:      # continuous wavelet\n            psi, x = functions_approximations\n            step = x[1] - x[0]\n            return integrate(psi, step), x\n        elif len(functions_approximations) == 3:    # orthogonal wavelet\n            phi, psi, x = functions_approximations\n            step = x[1] - x[0]\n            return integrate(psi, step), x\n        else:                                       # biorthogonal wavelet\n            phi_d, psi_d, phi_r, psi_r, x = functions_approximations\n            step = x[1] - x[0]\n            return integrate(psi_d, step), integrate(psi_r, step), x\n\n\ndef centfrq(wavelet, precision=8):\n    """"""\n    centfrq(wavelet, precision=8) -> float\n        - for orthogonal wavelets\n\n    centfrq((function_approx, x), precision=8) -> float\n        - for (function approx., x grid) pair\n\n    Computes the central frequency of the *psi* wavelet function.\n\n    wavelet         - Wavelet (Wavelet object, wavelet name string\n                      or (wavelet function approx., x grid) pair)\n    precision = 8   - Precision that will be used for wavelet function\n                      approximation computed with the wavefun(level=precision)\n                      Wavelet\'s method.\n\n    (function_approx, xgrid) - Function defined on xgrid. Used instead\n                      of Wavelet object to allow custom wavelet functions.\n    """"""\n\n    if isinstance(wavelet, tuple):\n        psi, x = asarray(wavelet[0]), asarray(wavelet[1])\n    else:\n        if not isinstance(wavelet, WAVELET_CLASSES):\n            wavelet = wavelet_for_name(wavelet)\n        functions_approximations = wavelet.wavefun(precision)\n\n        if len(functions_approximations) == 2:\n            psi, x = functions_approximations\n        else:\n            # (psi, x)   for (phi, psi, x)\n            # (psi_d, x) for (phi_d, psi_d, phi_r, psi_r, x)\n            psi, x = functions_approximations[1], functions_approximations[-1]\n\n    domain = float(x[-1] - x[0])\n    assert domain > 0\n\n    index = argmax(abs(fft(psi)[1:])) + 2\n    if index > len(psi) / 2:\n        index = len(psi) - index + 2\n\n    return 1.0 / (domain / (index - 1))\n\n\ndef scal2frq(wavelet, scale, delta, precision=8):\n    """"""\n    scal2frq(wavelet, scale, delta, precision=8) -> float\n        - for orthogonal wavelets\n\n    scal2frq(wavelet, scale, delta, precision=8) -> float\n        - for (function approx., x grid) pair\n\n    wavelet\n    scale\n    delta   - sampling\n    """"""\n    return centfrq(wavelet, precision=precision) / (scale * delta)\n\n\ndef qmf(filter):\n    filter = array(filter)[::-1]\n    filter[1::2] = -filter[1::2]\n    return filter\n\n\ndef orthfilt(scaling_filter):\n    assert len(scaling_filter) % 2 == 0\n\n    scaling_filter = asarray(scaling_filter, dtype=float64)\n\n    rec_lo = sqrt(2) * scaling_filter / sum(scaling_filter)\n    dec_lo = rec_lo[::-1]\n\n    rec_hi = qmf(rec_lo)\n    dec_hi = rec_hi[::-1]\n\n    return (dec_lo, dec_hi, rec_lo, rec_hi)\n'"
src/pywt/multidim.py,0,"b'# -*- coding: utf-8 -*-\n\n# Copyright (c) 2006-2012 Filip Wasilewski <http://en.ig.ma/>\n# See COPYING for license details.\n\n""""""\n2D Discrete Wavelet Transform and Inverse Discrete Wavelet Transform.\n""""""\n\n__all__ = [\'dwt2\', \'idwt2\', \'swt2\', \'dwtn\']\n\nfrom itertools import izip, cycle\n\nfrom _pywt import Wavelet, MODES\nfrom _pywt import dwt, idwt, swt, downcoef\nfrom numerix import transpose, array, as_float_array, default_dtype,\\\n    apply_along_axis\n\n\ndef dwt2(data, wavelet, mode=\'sym\'):\n    """"""\n    2D Discrete Wavelet Transform.\n\n    data    - 2D array with input data\n    wavelet - wavelet to use (Wavelet object or name string)\n    mode    - signal extension mode, see MODES\n\n    Returns approximation and three details 2D coefficients arrays.\n\n    The result form four 2D coefficients arrays organized in tuples:\n\n        (approximation,\n                (horizontal details,\n                vertical details,\n                diagonal details)\n        )\n\n    which sometimes is also interpreted as laid out in one 2D array\n    of coefficients, where:\n\n                                -----------------\n                                |       |       |\n                                | A(LL) | H(LH) |\n                                |       |       |\n        (A, (H, V, D))  <--->   -----------------\n                                |       |       |\n                                | V(HL) | D(HH) |\n                                |       |       |\n                                -----------------\n    """"""\n\n    data = as_float_array(data)\n    if len(data.shape) != 2:\n        raise ValueError(""Expected 2D data array"")\n\n    if not isinstance(wavelet, Wavelet):\n        wavelet = Wavelet(wavelet)\n\n    mode = MODES.from_object(mode)\n\n    # filter rows\n    H, L = [], []\n    for row in data:\n        cA, cD = dwt(row, wavelet, mode)\n        L.append(cA)\n        H.append(cD)\n    del data\n\n    # filter columns\n    H = transpose(H)\n    L = transpose(L)\n\n    LL, LH = [], []\n    for row in L:\n        cA, cD = dwt(array(row, default_dtype), wavelet, mode)\n        LL.append(cA)\n        LH.append(cD)\n    del L\n\n    HL, HH = [], []\n    for row in H:\n        cA, cD = dwt(array(row, default_dtype), wavelet, mode)\n        HL.append(cA)\n        HH.append(cD)\n    del H\n\n    # build result structure\n    #     (approx.,        (horizontal,    vertical,       diagonal))\n    ret = (transpose(LL), (transpose(LH), transpose(HL), transpose(HH)))\n\n    return ret\n\n\ndef idwt2(coeffs, wavelet, mode=\'sym\'):\n    """"""\n    2D Inverse Discrete Wavelet Transform. Reconstruct data from coefficients\n    arrays.\n\n    coeffs  - four 2D coefficients arrays arranged as follows (in the same way\n              as dwt2 output -- see dwt2 description for details):\n\n        (approximation,\n                (horizontal details,\n                vertical details,\n                diagonal details)\n        )\n\n    wavelet - wavelet to use (Wavelet object or name string)\n    mode    - signal extension mode, see MODES\n    """"""\n\n    if len(coeffs) != 2 or len(coeffs[1]) != 3:\n        raise ValueError(""Invalid coeffs param"")\n\n    # L -low-pass data, H - high-pass data\n    LL, (LH, HL, HH) = coeffs\n\n    if LL is not None:\n        LL = transpose(LL)\n    if LH is not None:\n        LH = transpose(LH)\n    if HL is not None:\n        HL = transpose(HL)\n    if HH is not None:\n        HH = transpose(HH)\n\n    all_none = True\n    for arr in (LL, LH, HL, HH):\n        if arr is not None:\n            all_none = False\n            if len(arr.shape) != 2:\n                raise TypeError(""All input coefficients arrays must be 2D."")\n    del arr\n    if all_none:\n        raise ValueError(\n            ""At least one input coefficients array must not be None."")\n\n    if not isinstance(wavelet, Wavelet):\n        wavelet = Wavelet(wavelet)\n\n    mode = MODES.from_object(mode)\n\n    # idwt columns\n    L = []\n    if LL is None and LH is None:\n        L = None\n    else:\n        if LL is None:\n            # IDWT can handle None input values - equals to zero-array\n            LL = cycle([None])\n        if LH is None:\n            # IDWT can handle None input values - equals to zero-array\n            LH = cycle([None])\n        for rowL, rowH in izip(LL, LH):\n            L.append(idwt(rowL, rowH, wavelet, mode, 1))\n    del LL, LH\n\n    H = []\n    if HL is None and HH is None:\n        H = None\n    else:\n        if HL is None:\n            # IDWT can handle None input values - equals to zero-array\n            HL = cycle([None])\n        if HH is None:\n            # IDWT can handle None input values - equals to zero-array\n            HH = cycle([None])\n        for rowL, rowH in izip(HL, HH):\n            H.append(idwt(rowL, rowH, wavelet, mode, 1))\n    del HL, HH\n\n    if L is not None:\n        L = transpose(L)\n    if H is not None:\n        H = transpose(H)\n\n    # idwt rows\n    data = []\n    if L is None:\n        # IDWT can handle None input values - equals to zero-array\n        L = cycle([None])\n    if H is None:\n        # IDWT can handle None input values - equals to zero-array\n        H = cycle([None])\n    for rowL, rowH in izip(L, H):\n        data.append(idwt(rowL, rowH, wavelet, mode, 1))\n\n    return array(data, default_dtype)\n\n\ndef _downcoef(data, wavelet, mode, type):\n    """"""Adapts pywt.downcoef call for apply_along_axis""""""\n    return downcoef(type, data, wavelet, mode, level=1)\n\n\ndef dwtn(data, wavelet, mode=\'sym\'):\n    """"""\n    Single-level n-dimensional Discrete Wavelet Transform.\n\n    data     - n-dimensional array\n    wavelet - wavelet to use (Wavelet object or name string)\n    mode    - signal extension mode, see MODES\n\n    Results are arranged in a dictionary, where key specifies\n    the transform type on each dimension and value is a n-dimensional\n    coefficients array.\n\n    For example, for a 2D case the result will look something like this:\n        {\n            \'aa\': <coeffs>  # A(LL) - approx. on 1st dim, approx. on 2nd dim\n            \'ad\': <coeffs>  # H(LH) - approx. on 1st dim, det. on 2nd dim\n            \'da\': <coeffs>  # V(HL) - det. on 1st dim, approx. on 2nd dim\n            \'dd\': <coeffs>  # D(HH) - det. on 1st dim, det. on 2nd dim\n        }\n    """"""\n    data = as_float_array(data)\n    dim = len(data.shape)\n    coeffs = [(\'\', data)]\n    for axis in range(dim):\n        new_coeffs = []\n        for subband, x in coeffs:\n            new_coeffs.extend([\n                (subband + \'a\', apply_along_axis(_downcoef, axis,\n                    x, wavelet, mode, \'a\')),\n                (subband + \'d\', apply_along_axis(_downcoef, axis,\n                    x, wavelet, mode, \'d\'))\n            ])\n        coeffs = new_coeffs\n    return dict(coeffs)\n\n\ndef swt2(data, wavelet, level, start_level=0):\n    """"""\n    2D Stationary Wavelet Transform.\n\n    data    - 2D array with input data\n    wavelet - wavelet to use (Wavelet object or name string)\n    level   - how many decomposition steps to perform\n    start_level - the level at which the decomposition will start\n\n    Returns list of approximation and details coefficients:\n\n        [\n            (cA_n,\n                (cH_n, cV_n, cD_n)\n            ),\n            (cA_n+1,\n                (cH_n+1, cV_n+1, cD_n+1)\n            ),\n            ...,\n            (cA_n+level,\n                (cH_n+level, cV_n+level, cD_n+level)\n            )\n        ]\n\n    where cA is approximation, cH is horizontal details, cV is\n    vertical details, cD is diagonal details and n is start_level.\n    """"""\n\n    data = as_float_array(data)\n    if len(data.shape) != 2:\n        raise ValueError(""Expected 2D data array"")\n\n    if not isinstance(wavelet, Wavelet):\n        wavelet = Wavelet(wavelet)\n\n    ret = []\n    for i in range(start_level, start_level + level):\n        # filter rows\n        H, L = [], []\n        for row in data:\n            cA, cD = swt(row, wavelet, level=1, start_level=i)[0]\n            L.append(cA)\n            H.append(cD)\n        del data\n\n        # filter columns\n        H = transpose(H)\n        L = transpose(L)\n\n        LL, LH = [], []\n        for row in L:\n            cA, cD = swt(\n                array(row, default_dtype), wavelet, level=1, start_level=i\n            )[0]\n            LL.append(cA)\n            LH.append(cD)\n        del L\n\n        HL, HH = [], []\n        for row in H:\n            cA, cD = swt(\n                array(row, default_dtype), wavelet, level=1, start_level=i\n            )[0]\n            HL.append(cA)\n            HH.append(cD)\n        del H\n\n        # build result structure\n        #     (approx.,        (horizontal,    vertical,       diagonal))\n        approx = transpose(LL)\n        ret.append((approx, (transpose(LH), transpose(HL), transpose(HH))))\n\n        # for next iteration\n        data = approx  # noqa\n\n    return ret\n'"
src/pywt/multilevel.py,0,"b'# -*- coding: utf-8 -*-\n\n# Copyright (c) 2006-2012 Filip Wasilewski <http://en.ig.ma/>\n# See COPYING for license details.\n\n""""""\nMultilevel 1D and 2D Discrete Wavelet Transform\nand Inverse Discrete Wavelet Transform.\n""""""\n\n__all__ = [\'wavedec\', \'waverec\', \'wavedec2\', \'waverec2\']\n\nfrom _pywt import Wavelet\nfrom _pywt import dwt, idwt, dwt_max_level\nfrom multidim import dwt2, idwt2\nfrom numerix import as_float_array\n\n\ndef wavedec(data, wavelet, mode=\'sym\', level=None):\n    """"""\n    Multilevel 1D Discrete Wavelet Transform of data.\n    Returns coefficients list - [cAn, cDn, cDn-1, ..., cD2, cD1]\n\n    data    - input data\n    wavelet - wavelet to use (Wavelet object or name string)\n    mode    - signal extension mode, see MODES\n    level   - decomposition level. If level is None then it will be\n              calculated using `dwt_max_level` function.\n    """"""\n\n    if not isinstance(wavelet, Wavelet):\n        wavelet = Wavelet(wavelet)\n\n    if level is None:\n        level = dwt_max_level(len(data), wavelet.dec_len)\n    elif level < 0:\n        raise ValueError(\n            ""Level value of %d is too low . Minimum level is 0."" % level)\n\n    coeffs_list = []\n\n    a = data\n    for i in xrange(level):\n        a, d = dwt(a, wavelet, mode)\n        coeffs_list.append(d)\n\n    coeffs_list.append(a)\n    coeffs_list.reverse()\n\n    return coeffs_list\n\n\ndef waverec(coeffs, wavelet, mode=\'sym\'):\n    """"""\n    Multilevel 1D Inverse Discrete Wavelet Transform.\n\n    coeffs  - coefficients list [cAn, cDn, cDn-1, ..., cD2, cD1]\n    wavelet - wavelet to use (Wavelet object or name string)\n    mode    - signal extension mode, see MODES\n    """"""\n\n    if not isinstance(coeffs, (list, tuple)):\n        raise ValueError(""Expected sequence of coefficient arrays."")\n\n    if len(coeffs) < 2:\n        raise ValueError(\n            ""Coefficient list too short (minimum 2 arrays required)."")\n\n    a, ds = coeffs[0], coeffs[1:]\n\n    for d in ds:\n        a = idwt(a, d, wavelet, mode, 1)\n\n    return a\n\n\ndef wavedec2(data, wavelet, mode=\'sym\', level=None):\n    """"""\n    Multilevel 2D Discrete Wavelet Transform.\n\n    data    - 2D input data\n    wavelet - wavelet to use (Wavelet object or name string)\n    mode    - signal extension mode, see MODES\n    level   - decomposition level. If level is None then it will be\n              calculated using `dwt_max_level` function .\n\n    Returns coefficients list - [cAn, (cHn, cVn, cDn), ... (cH1, cV1, cD1)]\n    """"""\n\n    data = as_float_array(data)\n\n    if len(data.shape) != 2:\n        raise ValueError(""Expected 2D input data."")\n\n    if not isinstance(wavelet, Wavelet):\n        wavelet = Wavelet(wavelet)\n\n    if level is None:\n        size = min(data.shape)\n        level = dwt_max_level(size, wavelet.dec_len)\n    elif level < 0:\n        raise ValueError(\n            ""Level value of %d is too low . Minimum level is 0."" % level)\n\n    coeffs_list = []\n\n    a = data\n    for i in xrange(level):\n        a, ds = dwt2(a, wavelet, mode)\n        coeffs_list.append(ds)\n\n    coeffs_list.append(a)\n    coeffs_list.reverse()\n\n    return coeffs_list\n\n\ndef waverec2(coeffs, wavelet, mode=\'sym\'):\n    """"""\n    Multilevel 2D Inverse Discrete Wavelet Transform.\n\n    coeffs  - coefficients list [cAn, (cHn, cVn, cDn), ... (cH1, cV1, cD1)]\n    wavelet - wavelet to use (Wavelet object or name string)\n    mode    - signal extension mode, see MODES\n\n    Returns 2D array of reconstructed data.\n    """"""\n\n    if not isinstance(coeffs, (list, tuple)):\n        raise ValueError(""Expected sequence of coefficient arrays."")\n\n    if len(coeffs) < 2:\n        raise ValueError(\n            ""Coefficient list too short (minimum 2 arrays required)."")\n\n    a, ds = coeffs[0], coeffs[1:]\n\n    for d in ds:\n        a = idwt2((a, d), wavelet, mode)\n\n    return a\n'"
src/pywt/numerix.py,0,"b'# -*- coding: utf-8 -*-\n\n# Copyright (c) 2006-2012 Filip Wasilewski <http://en.ig.ma/>\n# See COPYING for license details.\n\n""""""\nThin wrapper for NumPy module. Modify this to use wavelets with libraries\nother than NumPy.\n\nProvides efficient numeric functions and array datatypes.\n""""""\n\nfrom numpy import (  # noqa\n    ndarray, array, asarray,\n    empty, zeros, linspace, arange,\n    intp, float64, float32,\n    transpose, concatenate,\n    cumsum, cos, diff, exp, sinc, argmax, mean,\n    convolve,\n    where, less, greater,\n    apply_along_axis\n)\nfrom numpy.fft import fft # noqa\n\ndefault_dtype = float64\n\n\ndef as_float_array(source):\n    if isinstance(source, ndarray) and source.dtype in [float64, float32]:\n        return source\n    return array(source, default_dtype)\n\n\ndef contiguous_float64_array_from_any(source):\n    return array(source, float64)\n\n\ndef contiguous_float32_array_from_any(source):\n    return array(source, float32)\n\n\ndef astype(source, dtype):\n    return asarray(source, dtype)\n\n\ndef float64_memory_buffer_object(size):\n    return zeros((size,), float64)\n\n\ndef float32_memory_buffer_object(size):\n    return zeros((size,), float32)\n\n\ndef is_array_type(arr, typ):\n    return isinstance(arr, ndarray) and arr.dtype == typ\n\n\ndef keep(arr, keep_length):\n    length = len(arr)\n    if keep_length < length:\n        left_bound = (length - keep_length) / 2\n        return arr[left_bound:left_bound + keep_length]\n    return arr\n\n\ndef integrate(arr, step):\n    integral = cumsum(arr)\n    integral *= step\n    return integral\n'"
src/pywt/thresholding.py,0,"b'# -*- coding: utf-8 -*-\n\n# Copyright (c) 2006-2012 Filip Wasilewski <http://en.ig.ma/>\n# See COPYING for license details.\n\n""""""Thresholding routines""""""\n\n__all__ = [\'soft\', \'hard\', \'greater\', \'less\', \'zero\', \'copy\']\n\nimport numerix\n\n\ndef soft(data, value, substitute=0):\n    mvalue = -value\n\n    cond_less = numerix.less(data, value)\n    cond_greater = numerix.greater(data, mvalue)\n\n    data = numerix.where(cond_less & cond_greater, substitute, data)\n    data = numerix.where(cond_less, data + value, data)\n    data = numerix.where(cond_greater, data - value, data)\n\n    return data\n\n\ndef hard(data, value, substitute=0):\n    mvalue = -value\n\n    cond = numerix.less(data, value)\n    cond &= numerix.greater(data, mvalue)\n\n    return numerix.where(cond, substitute, data)\n\n\ndef greater(data, value, substitute=0):\n    return numerix.where(numerix.less(data, value), substitute, data)\n\n\ndef less(data, value, substitute=0):\n    return numerix.where(numerix.greater(data, value), substitute, data)\n\n\ndef zero(data, *args):\n    if isinstance(data, numerix.ndarray):\n        return numerix.zeros(data.shape, data.dtype)\n    return numerix.zeros(len(data))\n\n\ndef copy(data, *args):\n    return numerix.array(data)\n'"
src/pywt/wavelet_packets.py,0,"b'# -*- coding: utf-8 -*-\n\n# Copyright (c) 2006-2012 Filip Wasilewski <http://en.ig.ma/>\n# See COPYING for license details.\n\n""""""1D and 2D Wavelet packet transform module.""""""\n\n__all__ = [""BaseNode"", ""Node"", ""WaveletPacket"", ""Node2D"", ""WaveletPacket2D""]\n\nimport numerix\nfrom _pywt import Wavelet, dwt, idwt, dwt_max_level\nfrom multidim import dwt2, idwt2\n\n\ndef get_graycode_order(level, x=\'a\', y=\'d\'):\n    graycode_order = [x, y]\n    for i in range(level - 1):\n        graycode_order = [x + path for path in graycode_order] + \\\n                         [y + path for path in graycode_order[::-1]]\n    return graycode_order\n\n\nclass BaseNode(object):\n    """"""\n    BaseNode for wavelet packet 1D and 2D tree nodes.\n    """"""\n\n    # PART_LEN and PARTS attributes that define path tokens for node[] lookup\n    # must be defined in subclasses.\n    PART_LEN = None\n    PARTS = None\n\n    def __init__(self, parent, data, node_name):\n        self.parent = parent\n        if parent is not None:\n            self.wavelet = parent.wavelet\n            self.mode = parent.mode\n            self.level = parent.level + 1\n            self._maxlevel = parent.maxlevel\n            self.path = parent.path + node_name\n        else:\n            self.wavelet = None\n            self.mode = None\n            self.path = """"\n            self.level = 0\n\n        # data - signal on level 0, coeffs on higher levels\n        self.data = data\n\n        self._init_subnodes()\n\n    def _init_subnodes(self):\n        for part in self.PARTS:\n            self._set_node(part, None)\n\n    def _create_subnode(self, part, data=None, overwrite=True):\n        raise NotImplementedError()\n\n    def _create_subnode_base(self, node_cls, part, data=None, overwrite=True):\n        self._validate_node_name(part)\n        if not overwrite and self._get_node(part) is not None:\n            return self._get_node(part)\n        node = node_cls(self, data, part)\n        self._set_node(part, node)\n        return node\n\n    def _get_node(self, part):\n        return getattr(self, part)\n\n    def _set_node(self, part, node):\n        setattr(self, part, node)\n\n    def _delete_node(self, part):\n        self._set_node(part, None)\n\n    def _validate_node_name(self, part):\n        if part not in self.PARTS:\n            raise ValueError(""Subnode name must be in [%s], not \'%s\'."" %\n                             (\', \'.join(""\'%s\'"" % p for p in self.PARTS), part))\n\n    def _evaluate_maxlevel(self, evaluate_from=\'parent\'):\n        """"""\n        Try to find the value of maximum decomposition level if it is not\n        specified explicitly.\n        """"""\n        assert evaluate_from in (\'parent\', \'subnodes\')\n\n        if self._maxlevel is not None:\n            return self._maxlevel\n        elif self.data is not None:\n            return self.level + dwt_max_level(\n                min(self.data.shape), self.wavelet)\n\n        if evaluate_from == \'parent\':\n            if self.parent is not None:\n                return self.parent._evaluate_maxlevel(evaluate_from)\n        elif evaluate_from == \'subnodes\':\n            for node_name in self.PARTS:\n                node = getattr(self, node_name, None)\n                if node is not None:\n                    level = node._evaluate_maxlevel(evaluate_from)\n                    if level is not None:\n                        return level\n        return None\n\n    @property\n    def maxlevel(self):\n        if self._maxlevel is not None:\n            return self._maxlevel\n\n        # Try getting the maxlevel from parents first\n        self._maxlevel = self._evaluate_maxlevel(evaluate_from=\'parent\')\n\n        # If not found, check whether it can be evaluated from subnodes\n        if self._maxlevel is None:\n            self._maxlevel = self._evaluate_maxlevel(evaluate_from=\'subnodes\')\n        return self._maxlevel\n\n    @property\n    def node_name(self):\n        return self.path[-self.PART_LEN:]\n\n    def decompose(self):\n        """"""\n        Decompose node data creating DWT coefficients subnodes.""\n        """"""\n        if self.level < self.maxlevel:\n            return self._decompose()\n        else:\n            raise ValueError(""Maximum decomposition level reached."")\n\n    def _decompose(self):\n        raise NotImplementedError()\n\n    def reconstruct(self, update=False):\n        """"""\n        Reconstruct node from subnodes.\n        If update param is True, then reconstructed data replaces the current\n        node data.\n\n        Returns:\n            - original node data if subnodes do not exist\n            - IDWT of subnodes otherwise.\n        """"""\n        if not self.has_any_subnode:\n            return self.data\n        return self._reconstruct(update)\n\n    def _reconstruct(self):\n        raise NotImplementedError()  # override this in subclasses\n\n    def get_subnode(self, part, decompose=True):\n        """"""\n        Returns subnode.\n\n        part      - subnode name\n        decompose - if the param is True and corresponding subnode does not\n                    exist, the subnode will be created using coefficients\n                    from the DWT decomposition of the current node.\n        """"""\n        self._validate_node_name(part)\n        subnode = self._get_node(part)\n        if subnode is None and decompose and not self.is_empty:\n            self.decompose()\n            subnode = self._get_node(part)\n        return subnode\n\n    def __getitem__(self, path):\n        """"""\n        Find node represented by the given path.\n\n        path - string composed of node names.\n\n        If node does not exist yet, it will be created by decomposition of its\n        parent node.\n        """"""\n        if isinstance(path, basestring):\n            if (self.maxlevel is not None\n                and len(path) > self.maxlevel * self.PART_LEN):\n                raise IndexError(""Path length is out of range."")\n            if path:\n                return self.get_subnode(path[0:self.PART_LEN], True)[\n                       path[self.PART_LEN:]]\n            else:\n                return self\n        else:\n            raise TypeError(""Invalid path parameter type - expected string but""\n                            "" got %s."" % type(path))\n\n    def __setitem__(self, path, data):\n        """"""\n        Set node represented by the given path with a new value.\n\n        path - string composed of node names.\n        data - array or BaseNode subclass.\n        """"""\n\n        if isinstance(path, basestring):\n            if (\n                self.maxlevel is not None\n                and len(self.path) + len(path) > self.maxlevel * self.PART_LEN\n            ):\n                raise IndexError(""Path length out of range."")\n            if path:\n                subnode = self.get_subnode(path[0:self.PART_LEN], False)\n                if subnode is None:\n                    self._create_subnode(path[0:self.PART_LEN], None)\n                    subnode = self.get_subnode(path[0:self.PART_LEN], False)\n                subnode[path[self.PART_LEN:]] = data\n            else:\n                if isinstance(data, BaseNode):\n                    self.data = numerix.as_float_array(data.data)\n                else:\n                    self.data = numerix.as_float_array(data)\n        else:\n            raise TypeError(""Invalid path parameter type - expected string but""\n                            "" got %s."" % type(path))\n\n    def __delitem__(self, path):\n        """"""\n        Remove node from the tree.\n        """"""\n        node = self[path]\n        # don\'t clear node value and subnodes (node may still exist outside\n        # the tree)\n        ## node._init_subnodes()\n        ## node.data = None\n        parent = node.parent\n        node.parent = None  # TODO\n        if parent and node.node_name:\n            parent._delete_node(node.node_name)\n\n    def is_empty(self):\n        return self.data is None\n    is_empty = property(is_empty)\n\n    def has_any_subnode(self):\n        for part in self.PARTS:\n            if self._get_node(part) is not None:  # and not .is_empty\n                return True\n        return False\n    has_any_subnode = property(has_any_subnode)\n\n    def get_leaf_nodes(self, decompose=False):\n        """"""\n        Returns leaf nodes.\n        """"""\n        result = []\n\n        def collect(node):\n            if node.level == node.maxlevel and not node.is_empty:\n                result.append(node)\n                return False\n            if not decompose and not node.has_any_subnode:\n                result.append(node)\n                return False\n            return True\n        self.walk(collect, decompose=decompose)\n        return result\n\n    def walk(self, func, args=(), kwargs=None, decompose=True):\n        """"""\n        Walk tree and call func on every node -> func(node, *args)\n        If func returns True, descending to subnodes will continue.\n\n        func - callable\n        args - func params\n        kwargs - func keyword params\n        """"""\n        if kwargs is None:\n            kwargs = {}\n        if func(self, *args, **kwargs) and self.level < self.maxlevel:\n            for part in self.PARTS:\n                subnode = self.get_subnode(part, decompose)\n                if subnode is not None:\n                    subnode.walk(func, args, kwargs, decompose)\n\n    def walk_depth(self, func, args=(), kwargs=None, decompose=False):\n        """"""\n        Walk tree and call func on every node starting from the bottom-most\n        nodes.\n\n        func - callable\n        args - func params\n        kwargs - func keyword params\n        """"""\n        if kwargs is None:\n            kwargs = {}\n        if self.level < self.maxlevel:\n            for part in self.PARTS:\n                subnode = self.get_subnode(part, decompose)\n                if subnode is not None:\n                    subnode.walk_depth(func, args, kwargs, decompose)\n        func(self, *args, **kwargs)\n\n    def __str__(self):\n        return self.path + "": "" + str(self.data)\n\n\nclass Node(BaseNode):\n    """"""\n    WaveletPacket tree node.\n\n    Subnodes are called ``a`` and ``d``, just like approximation\n    and detail coefficients in the Discrete Wavelet Transform.\n    """"""\n\n    A = \'a\'\n    D = \'d\'\n    PARTS = A, D\n    PART_LEN = 1\n\n    def _create_subnode(self, part, data=None, overwrite=True):\n        return self._create_subnode_base(node_cls=Node, part=part, data=data,\n            overwrite=overwrite)\n\n    def _decompose(self):\n        if self.is_empty:\n            data_a, data_d = None, None\n            if self._get_node(self.A) is None:\n                self._create_subnode(self.A, data_a)\n            if self._get_node(self.D) is None:\n                self._create_subnode(self.D, data_d)\n        else:\n            data_a, data_d = dwt(self.data, self.wavelet, self.mode)\n            self._create_subnode(self.A, data_a)\n            self._create_subnode(self.D, data_d)\n        return self._get_node(self.A), self._get_node(self.D)\n\n    def _reconstruct(self, update):\n        data_a, data_d = None, None\n        node_a, node_d = self._get_node(self.A), self._get_node(self.D)\n\n        if node_a is not None:\n            data_a = node_a.reconstruct()  # TODO: (update) ???\n        if node_d is not None:\n            data_d = node_d.reconstruct()  # TODO: (update) ???\n\n        if data_a is None and data_d is None:\n            raise ValueError(""Node is a leaf node and cannot be reconstructed""\n                             "" from subnodes."")\n        else:\n            rec = idwt(data_a, data_d, self.wavelet, self.mode,\n                       correct_size=True)\n            if update:\n                self.data = rec\n            return rec\n\n\nclass Node2D(BaseNode):\n    """"""\n    WaveletPacket tree node.\n\n    Subnodes are called \'a\' (LL), \'h\' (LH), \'v\' (HL) and  \'d\' (HH), like\n    approximation and detail coefficients in the 2D Discrete Wavelet Transform\n    """"""\n\n    LL = \'a\'\n    LH = \'h\'\n    HL = \'v\'\n    HH = \'d\'\n\n    PARTS = LL, LH, HL, HH\n    PART_LEN = 1\n\n    def _create_subnode(self, part, data=None, overwrite=True):\n        return self._create_subnode_base(node_cls=Node2D, part=part, data=data,\n            overwrite=overwrite)\n\n    def _decompose(self):\n        if self.is_empty:\n            data_ll, data_lh, data_hl, data_hh = None, None, None, None\n        else:\n            data_ll, (data_lh, data_hl, data_hh) =\\\n                dwt2(self.data, self.wavelet, self.mode)\n        self._create_subnode(self.LL, data_ll)\n        self._create_subnode(self.LH, data_lh)\n        self._create_subnode(self.HL, data_hl)\n        self._create_subnode(self.HH, data_hh)\n        return self._get_node(self.LL), self._get_node(self.LH),\\\n               self._get_node(self.HL), self._get_node(self.HH)\n\n    def _reconstruct(self, update):\n        data_ll, data_lh, data_hl, data_hh = None, None, None, None\n\n        node_ll, node_lh, node_hl, node_hh =\\\n            self._get_node(self.LL), self._get_node(self.LH),\\\n            self._get_node(self.HL), self._get_node(self.HH)\n\n        if node_ll is not None:\n            data_ll = node_ll.reconstruct()\n        if node_lh is not None:\n            data_lh = node_lh.reconstruct()\n        if node_hl is not None:\n            data_hl = node_hl.reconstruct()\n        if node_hh is not None:\n            data_hh = node_hh.reconstruct()\n\n        if (data_ll is None and data_lh is None\n            and data_hl is None and data_hh is None):\n            raise ValueError(\n                ""Tree is missing data - all subnodes of `%s` node ""\n                ""are None. Cannot reconstruct node."" % self.path\n            )\n        else:\n            coeffs = data_ll, (data_lh, data_hl, data_hh)\n            rec = idwt2(coeffs, self.wavelet, self.mode)\n            if update:\n                self.data = rec\n            return rec\n\n    def expand_2d_path(self, path):\n        expanded_paths = {\n            self.HH: \'hh\',\n            self.HL: \'hl\',\n            self.LH: \'lh\',\n            self.LL: \'ll\'\n        }\n        return (\'\'.join([expanded_paths[p][0] for p in path]),\n                \'\'.join([expanded_paths[p][1] for p in path]))\n\n\nclass WaveletPacket(Node):\n    """"""\n    Data structure representing Wavelet Packet decomposition of signal.\n\n    data     - original data (signal)\n    wavelet  - wavelet used in DWT decomposition and reconstruction\n    mode     - signal extension mode - see MODES\n    maxlevel - maximum level of decomposition (will be computed if not\n               specified)\n    """"""\n    def __init__(self, data, wavelet, mode=\'sym\', maxlevel=None):\n        super(WaveletPacket, self).__init__(None, data, """")\n\n        if not isinstance(wavelet, Wavelet):\n            wavelet = Wavelet(wavelet)\n        self.wavelet = wavelet\n        self.mode = mode\n\n        if data is not None:\n            data = numerix.as_float_array(data)\n            assert len(data.shape) == 1\n            self.data_size = data.shape[0]\n            if maxlevel is None:\n                maxlevel = dwt_max_level(self.data_size, self.wavelet)\n        else:\n            self.data_size = None\n\n        self._maxlevel = maxlevel\n\n    def reconstruct(self, update=True):\n        """"""\n        Reconstruct data value using coefficients from subnodes.\n\n        If update is True, then data values will be replaced by\n        reconstruction values, also in subnodes.\n        """"""\n        if self.has_any_subnode:\n            data = super(WaveletPacket, self).reconstruct(update)\n            if self.data_size is not None and len(data) > self.data_size:\n                data = data[:self.data_size]\n            if update:\n                self.data = data\n            return data\n        return self.data  # return original data\n\n    def get_level(self, level, order=""natural"", decompose=True):\n        """"""\n        Returns all nodes on the specified level.\n\n        order - ""natural"" - left to right in tree\n              - ""freq"" - band ordered\n        """"""\n        assert order in [""natural"", ""freq""]\n        if level > self.maxlevel:\n            raise ValueError(""The level cannot be greater than the maximum""\n                             "" decomposition level value (%d)"" % self.maxlevel)\n\n        result = []\n\n        def collect(node):\n            if node.level == level:\n                result.append(node)\n                return False\n            return True\n\n        self.walk(collect, decompose=decompose)\n        if order == ""natural"":\n            return result\n        elif order == ""freq"":\n            result = dict((node.path, node) for node in result)\n            graycode_order = get_graycode_order(level)\n            return [result[path] for path in graycode_order if path in result]\n        else:\n            raise ValueError(""Invalid order name - %s."" % order)\n\n\nclass WaveletPacket2D(Node2D):\n    """"""\n    Data structure representing 2D Wavelet Packet decomposition of signal.\n\n    data     - original data (signal)\n    wavelet  - wavelet used in DWT decomposition and reconstruction\n    mode     - signal extension mode - see MODES\n    maxlevel - maximum level of decomposition (will be computed if not\n               specified)\n    """"""\n    def __init__(self, data, wavelet, mode=\'sp1\', maxlevel=None):\n        super(WaveletPacket2D, self).__init__(None, data, """")\n\n        if not isinstance(wavelet, Wavelet):\n            wavelet = Wavelet(wavelet)\n        self.wavelet = wavelet\n        self.mode = mode\n\n        if data is not None:\n            data = numerix.as_float_array(data)\n            assert len(data.shape) == 2\n            self.data_size = data.shape\n            if maxlevel is None:\n                maxlevel = dwt_max_level(min(self.data_size), self.wavelet)\n        else:\n            self.data_size = None\n        self._maxlevel = maxlevel\n\n    def reconstruct(self, update=True):\n        """"""\n        Reconstruct data using coefficients from subnodes.\n\n        If update is set to True then the coefficients of the current node\n        and its subnodes will be replaced with values from reconstruction.\n        """"""\n        if self.has_any_subnode:\n            data = super(WaveletPacket2D, self).reconstruct(update)\n            if self.data_size is not None and (data.shape != self.data_size):\n                data = data[:self.data_size[0], :self.data_size[1]]\n            if update:\n                self.data = data\n            return data\n        return self.data  # return original data\n\n    def get_level(self, level, order=""natural"", decompose=True):\n        """"""\n        Returns all nodes from specified level.\n\n        If order is `natural`, a flat list is returned.\n\n        If order is `freq`, a 2d structure with rows and cols\n        sorted by corresponding dimension frequency of 2d\n        coefficient array (adapted from 1d case).\n        """"""\n        assert order in [""natural"", ""freq""]\n        if level > self.maxlevel:\n            raise ValueError(""The level cannot be greater than the maximum""\n                             "" decomposition level value (%d)"" % self.maxlevel)\n\n        result = []\n\n        def collect(node):\n            if node.level == level:\n                result.append(node)\n                return False\n            return True\n\n        self.walk(collect, decompose=decompose)\n\n        if order == ""freq"":\n            nodes = {}\n            for (row_path, col_path), node in [\n                (self.expand_2d_path(node.path), node) for node in result\n            ]:\n                nodes.setdefault(row_path, {})[col_path] = node\n            graycode_order = get_graycode_order(level, x=\'l\', y=\'h\')\n            nodes = [nodes[path] for path in graycode_order if path in nodes]\n            result = []\n            for row in nodes:\n                result.append(\n                    [row[path] for path in graycode_order if path in row]\n                )\n        return result\n'"
