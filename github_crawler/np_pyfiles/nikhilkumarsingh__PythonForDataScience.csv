file_path,api_count,code
codes/3d_bars.py,3,"b""# importing required modules\r\nfrom mpl_toolkits.mplot3d import axes3d\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib import style\r\nimport numpy as np\r\n \r\n# setting a custom style to use\r\nstyle.use('ggplot')\r\n \r\n# create a new figure for plotting\r\nfig = plt.figure()\r\n \r\n# create a new subplot on our figure\r\nax1 = fig.add_subplot(111, projection='3d')\r\n \r\n# defining x, y, z co-ordinates for bar position\r\nx = [1,2,3,4,5,6,7,8,9,10]\r\ny = [4,3,1,6,5,3,7,5,3,7]\r\nz = np.zeros(10)\r\n \r\n# size of bars\r\ndx = np.ones(10)              # length along x-axis\r\ndy = np.ones(10)              # length along y-axs\r\ndz = [1,3,4,2,6,7,5,5,10,9]   # height of bar\r\n \r\n# setting color scheme\r\ncolor = []\r\nfor h in dz:\r\n    if h > 5:\r\n        color.append('r')\r\n    else:\r\n        color.append('b')\r\n \r\n# plotting the bars\r\nax1.bar3d(x, y, z, dx, dy, dz, color = color)\r\n \r\n# setting axes labels\r\nax1.set_xlabel('x-axis')\r\nax1.set_ylabel('y-axis')\r\nax1.set_zlabel('z-axis')\r\n \r\nplt.show()\r\n"""
codes/3d_curves.py,4,"b""# importing required modules\r\nfrom mpl_toolkits.mplot3d import axes3d\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib import style\r\nimport numpy as np\r\n \r\n# setting a custom style to use\r\nstyle.use('ggplot')\r\n \r\n# create a new figure for plotting\r\nfig = plt.figure()\r\n \r\n# create a new subplot on our figure\r\nax1 = fig.add_subplot(111, projection='3d')\r\n \r\n# get points for a mesh grid\r\nu, v = np.mgrid[0:2*np.pi:200j, 0:np.pi:100j]\r\n \r\n# setting x, y, z co-ordinates\r\nx=np.cos(u)*np.sin(v)\r\ny=np.sin(u)*np.sin(v)\r\nz=np.cos(v)\r\n \r\n# plotting the curve\r\nax1.plot_wireframe(x, y, z, rstride = 5, cstride = 5, linewidth = 1)\r\n \r\nplt.show()\r\n"""
codes/3d_lines.py,3,"b""# importing required modules\r\nfrom mpl_toolkits.mplot3d import axes3d\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib import style\r\nimport numpy as np\r\n \r\n# setting a custom style to use\r\nstyle.use('ggplot')\r\n \r\n# create a new figure for plotting\r\nfig = plt.figure()\r\n \r\n# create a new subplot on our figure\r\nax1 = fig.add_subplot(111, projection='3d')\r\n \r\n# defining x, y, z co-ordinates\r\nx = np.random.randint(0, 10, size = 5)\r\ny = np.random.randint(0, 10, size = 5)\r\nz = np.random.randint(0, 10, size = 5)\r\n \r\n# plotting the points on subplot\r\nax1.plot_wireframe(x,y,z)\r\n \r\n# setting the labels\r\nax1.set_xlabel('x-axis')\r\nax1.set_ylabel('y-axis')\r\nax1.set_zlabel('z-axis')\r\n \r\nplt.show()\r\n"""
codes/3d_points.py,3,"b""from mpl_toolkits.mplot3d import axes3d\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib import style\r\nimport numpy as np\r\n \r\n# setting a custom style to use\r\nstyle.use('ggplot')\r\n \r\n# create a new figure for plotting\r\nfig = plt.figure()\r\n \r\n# create a new subplot on our figure\r\n# and set projection as 3d\r\nax1 = fig.add_subplot(111, projection='3d')\r\n \r\n# defining x, y, z co-ordinates\r\nx = np.random.randint(0, 10, size = 20)\r\ny = np.random.randint(0, 10, size = 20)\r\nz = np.random.randint(0, 10, size = 20)\r\n \r\n# plotting the points on subplot\r\n \r\n# setting labels for the axes\r\nax1.set_xlabel('x-axis')\r\nax1.set_ylabel('y-axis')\r\nax1.set_zlabel('z-axis')\r\n \r\n# function to show the plot\r\nplt.show()\r\n"""
codes/bar_graph.py,0,"b""import matplotlib.pyplot as plt\r\n \r\n# x-coordinates of left sides of bars \r\nleft = [1, 2, 3, 4, 5]\r\n \r\n# heights of bars\r\nheight = [10, 24, 36, 40, 5]\r\n \r\n# labels for bars\r\ntick_label = ['one', 'two', 'three', 'four', 'five']\r\n \r\n# plotting a bar chart\r\nplt.bar(left, height, tick_label = tick_label,\r\n        width = 0.8, color = ['red', 'blue'])\r\n \r\n# naming the x-axis\r\nplt.xlabel('x - axis')\r\n# naming the y-axis\r\nplt.ylabel('y - axis')\r\n# plot title\r\nplt.title('My bar chart!')\r\n \r\n# function to show the plot\r\nplt.show()\r\n"""
codes/curve_equation.py,2,"b'# importing the required modules\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n \r\n# setting the x - coordinates\r\nx = np.arange(0, 2*(np.pi), 0.1)\r\n# setting the corresponding y - coordinates\r\ny = np.sin(x)\r\n \r\n# potting the points\r\nplt.plot(x, y)\r\n \r\n# function to show the plot\r\nplt.show()\r\n'"
codes/customizations.py,0,"b""import matplotlib.pyplot as plt\r\n \r\n# x axis values\r\nx = [1,2,3,4,5,6]\r\n# corresponding y axis values\r\ny = [2,4,1,5,2,6]\r\n \r\n# plotting the points \r\nplt.plot(x, y, color='green', linestyle='dashed', linewidth = 3,\r\n         marker='o', markerfacecolor='blue', markersize=12)\r\n \r\n# setting x and y axis range\r\nplt.ylim(1,8)\r\nplt.xlim(1,8)\r\n \r\n# naming the x axis\r\nplt.xlabel('x - axis')\r\n# naming the y axis\r\nplt.ylabel('y - axis')\r\n \r\n# giving a title to my graph\r\nplt.title('Some cool customizations!')\r\n \r\n# function to show the plot\r\nplt.show()\r\n"""
codes/histogram.py,0,"b""import matplotlib.pyplot as plt\r\n \r\n# frequencies\r\nages = [2,5,70,40,30,45,50,45,43,40,44,\r\n        60,7,13,57,18,90,77,32,21,20,40]\r\n \r\n# setting the ranges and no. of intervals\r\nrange = (0, 100)\r\nbins = 10 \r\n \r\n# plotting a histogram\r\nplt.hist(ages, bins, range, color = 'red',\r\n        histtype = 'bar', rwidth = 0.8)\r\n \r\n# x-axis label\r\nplt.xlabel('age')\r\n# frequency label\r\nplt.ylabel('No. of people')\r\n# plot title\r\nplt.title('My histogram')\r\n \r\n# function to show the plot\r\nplt.show()\r\n"""
codes/line.py,0,"b""# importing the required module\r\nimport matplotlib.pyplot as plt\r\n \r\n# x axis values\r\nx = [1,2,3]\r\n# corresponding y axis values\r\ny = [2,4,1]\r\n \r\n# plotting the points \r\nplt.plot(x, y)\r\n \r\n# naming the x axis\r\nplt.xlabel('x - axis')\r\n# naming the y axis\r\nplt.ylabel('y - axis')\r\n \r\n# giving a title to my graph\r\nplt.title('My first graph!')\r\n \r\n# function to show the plot\r\nplt.show()\r\n"""
codes/lines.py,0,"b'import matplotlib.pyplot as plt\r\n \r\n# line 1 points\r\nx1 = [1,2,3]\r\ny1 = [2,4,1]\r\n# plotting the line 1 points \r\nplt.plot(x1, y1, label = ""line 1"")\r\n \r\n# line 2 points\r\nx2 = [1,2,3]\r\ny2 = [4,1,3]\r\n# plotting the line 2 points \r\nplt.plot(x2, y2, label = ""line 2"")\r\n \r\n# naming the x axis\r\nplt.xlabel(\'x - axis\')\r\n# naming the y axis\r\nplt.ylabel(\'y - axis\')\r\n# giving a title to my graph\r\nplt.title(\'Two lines on same graph!\')\r\n \r\n# show a legend on the plot\r\nplt.legend()\r\n \r\n# function to show the plot\r\nplt.show()\r\n'"
codes/pie_chart.py,0,"b""import matplotlib.pyplot as plt\r\n \r\n# defining labels\r\nactivities = ['eat', 'sleep', 'work', 'play']\r\n \r\n# portion covered by each label\r\nslices = [3, 7, 8, 6]\r\n \r\n# color for each label\r\ncolors = ['r', 'm', 'g', 'b']\r\n \r\n# plotting the pie chart\r\nplt.pie(slices, labels = activities, colors=colors, \r\n        startangle=90, shadow = True, explode = (0, 0, 0.1, 0),\r\n        radius = 1.2, autopct = '%1.1f%%')\r\n \r\n# plotting legend\r\nplt.legend()\r\n \r\n# showing the plot\r\nplt.show()\r\n"""
codes/scatter_plot.py,0,"b'import matplotlib.pyplot as plt\r\n \r\n# x-axis values\r\nx = [1,2,3,4,5,6,7,8,9,10]\r\n# y-axis values\r\ny = [2,4,5,7,6,8,9,11,12,12]\r\n \r\n# plotting points as a scatter plot\r\nplt.scatter(x, y, label= ""stars"", color= ""m"", \r\n            marker= ""*"", s=30)\r\n \r\n# x-axis label\r\nplt.xlabel(\'x - axis\')\r\n# frequency label\r\nplt.ylabel(\'y - axis\')\r\n# plot title\r\nplt.title(\'My scatter plot!\')\r\n# showing legend\r\nplt.legend()\r\n \r\n# function to show the plot\r\nplt.show()\r\n'"
codes/subplot1.py,1,"b""# importing required modules\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n \r\n# function to generate coordinates\r\ndef create_plot(ptype):\r\n    # setting the x-axis vaues\r\n    x = np.arange(-10, 10, 0.01)\r\n \r\n    # setting the y-axis values\r\n    if ptype == 'linear':\r\n        y = x\r\n    elif ptype == 'quadratic':\r\n        y = x**2\r\n    elif ptype == 'cubic':\r\n        y = x**3\r\n    elif ptype == 'quartic':\r\n        y = x**4\r\n \r\n    return(x, y)\r\n \r\n# setting a style to use\r\nplt.style.use('fivethirtyeight')\r\n \r\n# create a figure\r\nfig = plt.figure()\r\n \r\n# define subplots and their positions in figure\r\nplt1 = fig.add_subplot(221)\r\nplt2 = fig.add_subplot(222)\r\nplt3 = fig.add_subplot(223)\r\nplt4 = fig.add_subplot(224)\r\n \r\n# plotting points on each subplot\r\nx, y = create_plot('linear')\r\nplt1.plot(x, y, color ='r')\r\nplt1.set_title('$y_1 = x$')\r\n \r\nx, y = create_plot('quadratic')\r\nplt2.plot(x, y, color ='b')\r\nplt2.set_title('$y_2 = x^2$')\r\n \r\nx, y = create_plot('cubic')\r\nplt3.plot(x, y, color ='g')\r\nplt3.set_title('$y_3 = x^3$')\r\n \r\nx, y = create_plot('quartic')\r\nplt4.plot(x, y, color ='k')\r\nplt4.set_title('$y_4 = x^4$')\r\n \r\n# adjusting space between subplots\r\nfig.subplots_adjust(hspace=.5,wspace=0.5)\r\n \r\n# function to show the plot\r\nplt.show()\r\n"""
codes/subplot2.py,4,"b""# importing required modules\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n \r\n# function to generate coordinates\r\ndef create_plot(ptype):\r\n    # setting the x-axis vaues\r\n    x = np.arange(0, 5, 0.01)\r\n \r\n    # setting y-axis values\r\n    if ptype == 'sin':\r\n        # a sine wave\r\n        y = np.sin(2*np.pi*x)\r\n    elif ptype == 'exp':\r\n        # negative exponential function\r\n        y = np.exp(-x)\r\n    elif ptype == 'hybrid':\r\n        # a damped sine wave\r\n        y = (np.sin(2*np.pi*x))*(np.exp(-x))\r\n \r\n    return(x, y)\r\n \r\n# setting a style to use\r\nplt.style.use('ggplot')\r\n \r\n# defining subplots and their positions\r\nplt1 = plt.subplot2grid((11,1), (0,0), rowspan = 3, colspan = 1)\r\nplt2 = plt.subplot2grid((11,1), (4,0), rowspan = 3, colspan = 1)\r\nplt3 = plt.subplot2grid((11,1), (8,0), rowspan = 3, colspan = 1)\r\n \r\n# plotting points on each subplot\r\nx, y = create_plot('sin')\r\nplt1.plot(x, y, label = 'sine wave', color ='b')\r\nx, y = create_plot('exp')\r\nplt2.plot(x, y, label = 'negative exponential', color = 'r')\r\nx, y = create_plot('hybrid')\r\nplt3.plot(x, y, label = 'damped sine wave', color = 'g')\r\n \r\n# show legends of each subplot\r\nplt1.legend()\r\nplt2.legend()\r\nplt3.legend()\r\n \r\n# function to show plot\r\nplt.show()\r\n"""
