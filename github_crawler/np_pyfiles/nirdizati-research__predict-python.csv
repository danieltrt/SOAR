file_path,api_count,code
manage.py,0,"b'#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef manage(sys_argv=None):\n    os.environ.setdefault(""DJANGO_SETTINGS_MODULE"", ""nirdizati-research.settings"")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError:\n        # The above import may fail for some other reason. Ensure that the\n        # issue is really that Django is missing to avoid masking other\n        # exceptions on Python 2.\n        try:\n            import django\n        except ImportError:\n            raise ImportError(\n                ""Couldn\'t import Django. Are you sure it\'s installed and ""\n                ""available on your PYTHONPATH environment variable? Did you ""\n                ""forget to activate a virtual environment?""\n            )\n        raise\n    if sys_argv is not None:\n        execute_from_command_line(sys_argv)\n\n\nif __name__ == ""__main__"":\n    manage(sys.argv)\n\n'"
nirdizati-research/__init__.py,0,b''
nirdizati-research/settings.py,0,"b'""""""\nDjango settings for nirdizati-research project.\n\nGenerated by \'django-admin startproject\' using Django 1.11.7.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/1.11/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/1.11/ref/settings/\n""""""\n\nimport os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = \'mt-0m%5!@ef9lcoga)nu@c9=ai@2_9l!*6v@u(^*zi-9w=882-\'\n\n# SECURITY WARNING: don\'t run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = [\'*\']\n\n# Application definition\n\nINSTALLED_APPS = [\n    \'src.common.apps.CommonConfig\',\n    \'src.logs.apps.LogsConfig\',\n    \'src.explanation.apps.ExplanationConfig\',\n    \'src.split.apps.SplitConfig\',\n    \'src.encoding.apps.EncodingConfig\',\n    \'src.labelling.apps.LabellingConfig\',\n    \'src.cache.apps.CacheConfig\',\n    \'src.clustering.apps.ClusteringConfig\',\n    \'src.predictive_model.apps.PredictiveModelConfig\',\n    \'src.predictive_model.classification.apps.ClassificationConfig\',\n    \'src.predictive_model.regression.apps.RegressionConfig\',\n    \'src.predictive_model.time_series_prediction.apps.TimeSeriesPredictionConfig\',\n    \'src.evaluation.apps.EvaluationConfig\',\n    \'src.jobs.apps.JobsConfig\',\n    \'src.hyperparameter_optimization.apps.HyperparameterOptimizationConfig\',\n    \'src.runtime.apps.RuntimeConfig\',\n\n    \'rest_framework\',\n    \'django.contrib.admin\',\n    \'django.contrib.auth\',\n    \'django.contrib.contenttypes\',\n    \'django.contrib.messages\',\n    \'django.contrib.sessions\',\n    \'django.contrib.staticfiles\',\n    ""django_rq"",\n    \'corsheaders\',\n    \'ws4redis\',\n    \'django_extensions\'\n]\n\nLOGGING = {\n    \'version\': 1,\n    \'disable_existing_loggers\': False,\n    \'formatters\': {\n        \'verbose\': {\n            \'format\': \'[%(asctime)s] %(levelname)s %(module)s %(message)s\'\n        }\n    },\n    \'handlers\': {\n        \'console\': {\n            \'level\': \'INFO\',\n            \'class\': \'logging.StreamHandler\',\n            \'formatter\': \'verbose\'\n        }\n    },\n    \'loggers\': {\n        \'logs\': {\n            \'handlers\': [\'console\'],\n            \'level\': \'INFO\'\n        }\n    }\n}\n\nMIDDLEWARE = [\n    \'django.middleware.security.SecurityMiddleware\',\n    \'django.contrib.sessions.middleware.SessionMiddleware\',\n    \'django.middleware.common.CommonMiddleware\',\n    \'django.middleware.csrf.CsrfViewMiddleware\',\n    \'django.contrib.auth.middleware.AuthenticationMiddleware\',\n    \'django.contrib.messages.middleware.MessageMiddleware\',\n    \'django.middleware.clickjacking.XFrameOptionsMiddleware\',\n    \'corsheaders.middleware.CorsMiddleware\',\n]\n\nROOT_URLCONF = \'nirdizati-research.urls\'\nCORS_ORIGIN_ALLOW_ALL = True\n\nREST_FRAMEWORK = {\n    # Use Django\'s standard `django.contrib.auth` permissions,\n    # or allow read-only access for unauthenticated users.\n    \'DEFAULT_PERMISSION_CLASSES\': [\n        # \'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly\'\n    ],\n    \'DEFAULT_RENDERER_CLASSES\': (\n        \'src.jobs.json_renderer.PalJSONRenderer\',\n        \'rest_framework.renderers.BrowsableAPIRenderer\',\n    )\n}\n\nTEMPLATES = [\n    {\n        \'BACKEND\': \'django.template.backends.django.DjangoTemplates\',\n        \'DIRS\': [],\n        \'APP_DIRS\': True,\n        \'OPTIONS\': {\n            \'context_processors\': [\n                \'django.template.context_processors.debug\',\n                \'django.template.context_processors.request\',\n                \'django.contrib.auth.context_processors.auth\',\n                \'django.contrib.messages.context_processors.messages\',\n                \'ws4redis.context_processors.default\'\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = \'ws4redis.django_runserver.application\'\n\n# Database\n# https://docs.djangoproject.com/en/1.11/ref/settings/#databases\n\nDATABASES = {\n    \'default\': {\n        \'ENGINE\': \'django.db.backends.postgresql_psycopg2\',\n        \'NAME\': os.environ[""DB_NAME""],\n        \'USER\': os.environ[""DB_USER""],\n        \'PASSWORD\': os.environ[""DB_PASSWORD""],\n        \'HOST\': os.environ.get(""DB_HOST"", ""localhost""),\n        \'PORT\': os.environ.get(""DB_PORT"", """"),\n        \'TEST\': {\n            \'NAME\': os.environ.get(""DB_NAME_TEST"", """"),\n        }\n    }\n}\n\n\n\n\n# Password validation\n# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \'NAME\': \'django.contrib.auth.password_validation.UserAttributeSimilarityValidator\',\n    },\n    {\n        \'NAME\': \'django.contrib.auth.password_validation.MinimumLengthValidator\',\n    },\n    {\n        \'NAME\': \'django.contrib.auth.password_validation.CommonPasswordValidator\',\n    },\n    {\n        \'NAME\': \'django.contrib.auth.password_validation.NumericPasswordValidator\',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/1.11/topics/i18n/\n\nLANGUAGE_CODE = \'en-us\'\n\nTIME_ZONE = \'UTC\'\n\nUSE_I18N = False\n\nUSE_L10N = False\n\nUSE_TZ = True\n\nSTATIC_URL = \'/static/\'\n\nRQ_QUEUES = {\n    \'default\': {\n        \'HOST\': os.environ[""REDIS_HOST""],\n        \'PORT\': os.environ[""REDIS_PORT""],\n        \'DB\': 0,\n        \'DEFAULT_TIMEOUT\': 7200,\n    }\n}\n\nWS4REDIS_CONNECTION = {\n    \'host\': os.environ[""REDIS_HOST""],\n    \'port\': os.environ[""REDIS_PORT""],\n    \'db\': 0,\n    \'password\': None,\n}\n\nWEBSOCKET_URL = \'/ws/\'\nWS4REDIS_PREFIX = \'ws\'\n'"
nirdizati-research/urls.py,0,"b""from django.conf.urls import url, include\nfrom django.contrib import admin\n\nfrom src.split.urls import urlpatterns\n\nurlpatterns = [\n    url(r'^jobs/', include('src.jobs.urls')),\n    url(r'^logs/', include('src.logs.urls')),\n    url(r'^explanation/', include('src.explanation.urls')),\n    url(r'^splits/', include(urlpatterns)),\n    url(r'^admin/', admin.site.urls),\n    url(r'^runtime/', include('src.runtime.urls')),\n    url(r'^django-rq/', include('django_rq.urls')),\n]\n"""
nirdizati-research/wsgi.py,0,"b'""""""\nWSGI config for nirdizati-research project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/1.11/howto/deployment/wsgi/\n""""""\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault(""DJANGO_SETTINGS_MODULE"", ""nirdizati-research.settings"")\n\napplication = get_wsgi_application()\n'"
scripts/__init__.py,0,b''
src/__init__.py,0,b''
tests/__init__.py,0,b''
tests/test_manage.py,0,"b""import sys\n\nimport mock\nfrom django.test.testcases import TestCase\n\nfrom manage import manage\n\n\nclass TestManage(TestCase):\n    def test_raise_import_error(self):\n        with mock.patch.dict(sys.modules, {'django.core.management': None, 'django': None}):\n            self.assertRaises(ImportError, manage)\n\n    def test_no_raise_import_error(self):\n        with mock.patch.dict(sys.modules, {'django.core.management': None}):\n            self.assertRaises(ImportError, manage)\n\n"""
docs/source/conf.py,0,"b'# -*- coding: utf-8 -*-\n#\n# Configuration file for the Sphinx documentation builder.\n#\n# This file does only contain a selection of the most common options. For a\n# full list see the documentation:\n# http://www.sphinx-doc.org/en/master/config\n\n# -- Path setup --------------------------------------------------------------\n\n# If extensions (or modules to document with autodoc) are in another directory,\n# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\n\nimport os\nimport sys\n\nsys.path.insert(0, os.path.abspath(\'../..\'))\n\nos.environ[\'DJANGO_SETTINGS_MODULE\'] = \'nirdizati-research.settings\'\nos.environ[\'REDIS_HOST\'] = \'localhost\'\nos.environ[\'REDIS_PORT\'] = \'6379\'\n\nimport django\n\ndjango.setup()\n\n# -- Project information -----------------------------------------------------\n\nproject = \'Nirdizati Research\'\ncopyright = \'2019, Stefano Branchi, Chiara Di Francescomarino, T\xc3\xb5nis Kasekamp, Santosh Kumar, Fabrizio Maggi, \' \\\n            \'Williams Rizzi, Luca Simonetto\'\nauthor = \'Stefano Branchi, Chiara Di Francescomarino, T\xc3\xb5nis Kasekamp, Santosh Kumar, Fabrizio Maggi, \' \\\n         \'Williams Rizzi, Luca Simonetto\'\n\n# The short X.Y version\nversion = \'\'\n# The full version, including alpha/beta/rc tags\nrelease = \'\'\n\n# -- General configuration ---------------------------------------------------\n\n# If your documentation needs a minimal Sphinx version, state it here.\n#\n# needs_sphinx = \'1.0\'\n\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named \'sphinx.ext.*\') or your custom\n# ones.\nextensions = [\n    \'sphinx.ext.autodoc\',\n    \'sphinx_autodoc_typehints\'\n]\n\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = [\'_templates\']\n\n# The suffix(es) of source filenames.\n# You can specify multiple suffix as a list of string:\n#\n# source_suffix = [\'.rst\', \'.md\']\nsource_suffix = \'.rst\'\n\n# The master toctree document.\nmaster_doc = \'index\'\n\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#\n# This is also used if you do content translation via gettext catalogs.\n# Usually you set ""language"" from the command line for these cases.\nlanguage = None\n\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This pattern also affects html_static_path and html_extra_path.\nexclude_patterns = [\'**/*.migrations.rst\', \'**/*.tests.rst\']\n\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = None\n\n# -- Options for HTML output -------------------------------------------------\n\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\nhtml_theme = \'sphinx_rtd_theme\'\n\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#\nhtml_theme_options = {\n    \'logo_only\': True\n}\n\nhtml_logo = \'_static/nirdizati-logo.png\'\nhtml_favicon = \'_static/favicon.ico\'\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named ""default.css"" will overwrite the builtin ""default.css"".\nhtml_static_path = [\'_static\']\n\n# Custom sidebar templates, must be a dictionary that maps document names\n# to template names.\n#\n# The default sidebars (for documents that don\'t match any pattern) are\n# defined by theme itself.  Builtin themes are using these templates by\n# default: ``[\'localtoc.html\', \'relations.html\', \'sourcelink.html\',\n# \'searchbox.html\']``.\n#\n# html_sidebars = {}\n\n\n# -- Options for HTMLHelp output ---------------------------------------------\n\n# Output file base name for HTML help builder.\nhtmlhelp_basename = \'NirdizatiResearchdoc\'\n\n# -- Options for LaTeX output ------------------------------------------------\n\nlatex_elements = {\n    # The paper size (\'letterpaper\' or \'a4paper\').\n    #\n    # \'papersize\': \'letterpaper\',\n\n    # The font size (\'10pt\', \'11pt\' or \'12pt\').\n    #\n    # \'pointsize\': \'10pt\',\n\n    # Additional stuff for the LaTeX preamble.\n    #\n    # \'preamble\': \'\',\n\n    # Latex figure (float) alignment\n    #\n    # \'figure_align\': \'htbp\',\n}\n\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title,\n#  author, documentclass [howto, manual, or own class]).\nlatex_documents = [\n    (master_doc, \'NirdizatiResearch.tex\', \'Nirdizati Research Documentation\',\n     \'Stefano Branchi, Chiara Di Francescomarino, T\xc3\xb5nis Kasekamp, Santosh Kumar, Fabrizio Maggi, Williams Rizzi, \'\n     \'Luca Simonetto\', \'manual\'),\n]\n\n# -- Options for manual page output ------------------------------------------\n\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    (master_doc, \'nirdizatiresearch\', \'Nirdizati Research Documentation\',\n     [author], 1)\n]\n\n# -- Options for Texinfo output ----------------------------------------------\n\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [\n    (master_doc, \'NirdizatiResearch\', \'Nirdizati Research Documentation\',\n     author, \'NirdizatiResearch\', \'One line description of project.\',\n     \'Miscellaneous\'),\n]\n\n# -- Options for Epub output -------------------------------------------------\n\n# Bibliographic Dublin Core info.\nepub_title = project\n\n# The unique identifier of the text. This can be a ISBN number\n# or the project homepage.\n#\n# epub_identifier = \'\'\n\n# A unique identification for the text.\n#\n# epub_uid = \'\'\n\n# A list of files that should not be packed into the epub file.\nepub_exclude_files = [\'search.html\']\n\n# -- Extension configuration -------------------------------------------------\n'"
scripts/incremental/incremental_experiments.py,0,"b'import django\ndjango.setup()\n\nimport json\nimport time\n\nfrom enum import Enum\n\nfrom src.encoding.models import ValueEncodings, TaskGenerationTypes\nfrom src.hyperparameter_optimization.models import HyperOptLosses, HyperOptAlgorithms, HyperparameterOptimizationMethods\nfrom src.labelling.models import LabelTypes\nfrom src.predictive_model.classification.models import ClassificationMethods\nfrom src.clustering.models import ClusteringMethods\nfrom src.jobs.models import JobStatuses, JobTypes\nfrom src.utils.experiments_utils import upload_split, send_job_request, create_classification_payload, retrieve_job\n\n\ndef retrieve_predictive_model_configuration(config):\n    if len(config) == 1:\n        config = config[0][\'config\']\n    elif len(config) > 1:\n        print(\'duplicate config\')\n        config = config[0][\'config\']\n    else:\n        print(\'missing conf\')\n        return {}\n    predictive_model_config = config[\'predictive_model\']\n    del predictive_model_config[\'model_path\']\n    predictive_model = predictive_model_config[\'predictive_model\']\n    del predictive_model_config[\'predictive_model\']\n    prediction_method = predictive_model_config[\'prediction_method\']\n    del predictive_model_config[\'prediction_method\']\n    return {predictive_model + \'.\' + prediction_method: predictive_model_config}\n\n\ndef init_database(experimentation_type, splits, dataset, base_folder):\n    if dataset not in splits:\n        splits[dataset] = {}\n\n    if experimentation_type == ExperimentationType.STD.value:\n        splits[dataset][\'0-40_80-100\'] = upload_split(train=base_folder + dataset + \'0-40.xes\',\n                                                      test=base_folder + dataset + \'80-100.xes\', server_name=\'ashkin\', server_port=\'50401\')\n\n        splits[dataset][\'0-80_80-100\'] = upload_split(train=base_folder + dataset + \'0-80.xes\',\n                                                      test=base_folder + dataset + \'80-100.xes\', server_name=\'ashkin\', server_port=\'50401\')\n\n    elif experimentation_type == ExperimentationType.INCREMENTAL.value:\n        splits[dataset][\'40-80_80-100\'] = upload_split(train=base_folder + dataset + \'40-80.xes\',\n                                                       test=base_folder + dataset + \'80-100.xes\', server_name=\'ashkin\', server_port=\'50401\')\n\n    elif experimentation_type == ExperimentationType.DRIFT_SIZE.value:\n        splits[dataset][\'40-55_80-100\'] = upload_split(train=base_folder + dataset + \'40-55.xes\',\n                                                       test=base_folder + dataset + \'80-100.xes\', server_name=\'ashkin\', server_port=\'50401\')\n        splits[dataset][\'0-55_80-100\'] = upload_split(train=base_folder + dataset + \'0-55.xes\',\n                                                      test=base_folder + dataset + \'80-100.xes\', server_name=\'ashkin\', server_port=\'50401\')\n\n\ndef get_pretrained_model_id(config):\n    if len(config) == 1:\n        model_id = config[0][\'id\']\n    elif len(config) > 1:\n        print(\'duplicate model\')\n        model_id = config[0][\'id\']\n    else:\n        print(\'missing model\')\n        return {}\n    return model_id\n\n\ndef std_experiments(dataset, prefix_length, models, splits, classification_method, encoding_method):\n    models[dataset][\'0-40_80-100\'] = send_job_request(\n        payload=create_classification_payload(\n            split=splits[dataset][\'0-40_80-100\'],\n            encodings=[encoding_method],\n            encoding={""padding"": ""zero_padding"",\n                      ""generation_type"": TaskGenerationTypes.ALL_IN_ONE.value,\n                      ""prefix_length"": prefix_length,\n                      ""features"": []},\n            labeling={""type"": LabelTypes.ATTRIBUTE_STRING.value,\n                      ""attribute_name"": ""label"",\n                      ""add_remaining_time"": False,\n                      ""add_elapsed_time"": False,\n                      ""add_executed_events"": False,\n                      ""add_resources_used"": False,\n                      ""add_new_traces"": False},\n            hyperparameter_optimization={""type"": HyperparameterOptimizationMethods.HYPEROPT.value,\n                                         ""max_evaluations"": 1000,\n                                         ""performance_metric"": HyperOptLosses.AUC.value,\n                                         ""algorithm_type"": HyperOptAlgorithms.TPE.value},\n            classification=[classification_method]\n        ), server_port=\'50401\', server_name=\'ashkin\'\n    )[0][\'id\']\n\n    models[dataset][\'0-80_80-100\'] = send_job_request(\n        payload=create_classification_payload(\n            split=splits[dataset][\'0-80_80-100\'],\n            encodings=[encoding_method],\n            encoding={""padding"": ""zero_padding"",\n                      ""generation_type"": TaskGenerationTypes.ALL_IN_ONE.value,\n                      ""prefix_length"": prefix_length,\n                      ""features"": []},\n            labeling={""type"": LabelTypes.ATTRIBUTE_STRING.value,\n                      ""attribute_name"": ""label"",\n                      ""add_remaining_time"": False,\n                      ""add_elapsed_time"": False,\n                      ""add_executed_events"": False,\n                      ""add_resources_used"": False,\n                      ""add_new_traces"": False},\n            hyperparameter_optimization={""type"": HyperparameterOptimizationMethods.HYPEROPT.value,\n                                         ""max_evaluations"": 1000,\n                                         ""performance_metric"": HyperOptLosses.AUC.value,\n                                         ""algorithm_type"": HyperOptAlgorithms.TPE.value},\n            classification=[classification_method]\n        ), server_port=\'50401\', server_name=\'ashkin\'\n    )[0][\'id\']\n\n\ndef incremental_experiments(dataset, prefix_length, models, splits, classification_method, encoding_method):\n    pretrained_model_parameters = retrieve_predictive_model_configuration(\n        retrieve_job(config={\n            \'type\': JobTypes.PREDICTION.value,\n            # \'status\': JobStatuses.COMPLETED.value, # TODO sometimes some jobs hang in running while they are actually finished\n            \'create_models\': True,\n            \'split\': splits[dataset][\'0-40_80-100\'],\n            \'encoding\': {""value_encoding"": encoding_method,\n                         ""padding"": True,\n                         ""task_generation_type"": TaskGenerationTypes.ALL_IN_ONE.value,\n                         ""prefix_length"": prefix_length},\n            \'labelling\': {""type"": LabelTypes.ATTRIBUTE_STRING.value,\n                          ""attribute_name"": ""label"",\n                          ""add_remaining_time"": False,\n                          ""add_elapsed_time"": False,\n                          ""add_executed_events"": False,\n                          ""add_resources_used"": False,\n                          ""add_new_traces"": False},\n            \'hyperparameter_optimization\': {""optimization_method"": HyperparameterOptimizationMethods.HYPEROPT.value},\n                                            # ""max_evaluations"": 1000, #TODO not yet supported\n                                            # ""performance_metric"": HyperOptLosses.AUC.value,\n                                            # ""algorithm_type"": HyperOptAlgorithms.TPE.value},\n            \'predictive_model\': {\'predictive_model\': \'classification\',\n                                 \'prediction_method\': classification_method},\n            \'clustering\': {\'clustering_method\': ClusteringMethods.NO_CLUSTER.value}\n        }, server_name=\'ashkin\', server_port=\'50401\')\n    )\n\n    payload = create_classification_payload(\n        split=splits[dataset][\'0-80_80-100\'],\n        encodings=[encoding_method],\n        encoding={""padding"": ""zero_padding"",\n                  ""generation_type"": TaskGenerationTypes.ALL_IN_ONE.value,\n                  ""prefix_length"": prefix_length,\n                  ""features"": []},\n        labeling={""type"": LabelTypes.ATTRIBUTE_STRING.value,\n                  ""attribute_name"": ""label"",\n                  ""add_remaining_time"": False,\n                  ""add_elapsed_time"": False,\n                  ""add_executed_events"": False,\n                  ""add_resources_used"": False,\n                  ""add_new_traces"": False},\n        hyperparameter_optimization={""type"": HyperparameterOptimizationMethods.NONE.value},\n        classification=[classification_method]\n    )\n    payload.update(pretrained_model_parameters)\n    models[dataset][\'0-80_80-100\'] = send_job_request(payload=payload, server_port=\'50401\', server_name=\'ashkin\')[0][\'id\']\n\n    if classification_method != ClassificationMethods.RANDOM_FOREST.value:\n        payload = create_classification_payload(\n                split=splits[dataset][\'40-80_80-100\'],\n                encodings=[encoding_method],\n                encoding={""padding"": ""zero_padding"",\n                          ""generation_type"": TaskGenerationTypes.ALL_IN_ONE.value,\n                          ""prefix_length"": prefix_length,\n                          ""features"": []},\n                labeling={""type"": LabelTypes.ATTRIBUTE_STRING.value,\n                          ""attribute_name"": ""label"",\n                          ""add_remaining_time"": False,\n                          ""add_elapsed_time"": False,\n                          ""add_executed_events"": False,\n                          ""add_resources_used"": False,\n                          ""add_new_traces"": False},\n                classification=[classification_method],\n                hyperparameter_optimization={""type"": HyperparameterOptimizationMethods.NONE.value},\n                incremental_train=[\n                    get_pretrained_model_id(\n                        config=retrieve_job(config={\n                            \'type\': JobTypes.PREDICTION.value,\n                            # \'status\': JobStatuses.COMPLETED.value, # TODO sometimes some jobs hang in running while they are actually finished\n                            \'create_models\': True,\n                            \'split\': splits[dataset][\'0-40_80-100\'],\n                            \'encoding\': {""value_encoding"": encoding_method,\n                                         ""padding"": True,\n                                         ""task_generation_type"": TaskGenerationTypes.ALL_IN_ONE.value,\n                                         ""prefix_length"": prefix_length},\n                            \'labelling\': {""type"": LabelTypes.ATTRIBUTE_STRING.value,\n                                          ""attribute_name"": ""label"",\n                                          ""add_remaining_time"": False,\n                                          ""add_elapsed_time"": False,\n                                          ""add_executed_events"": False,\n                                          ""add_resources_used"": False,\n                                          ""add_new_traces"": False},\n                            \'hyperparameter_optimization\': {\n                                ""optimization_method"": HyperparameterOptimizationMethods.HYPEROPT.value},\n                            # ""max_evaluations"": 1000, #TODO not yet supported\n                            # ""performance_metric"": HyperOptLosses.AUC.value,\n                            # ""algorithm_type"": HyperOptAlgorithms.TPE.value},\n                            \'predictive_model\': {\'predictive_model\': \'classification\',\n                                                 \'prediction_method\': classification_method},\n                            \'clustering\': {\'clustering_method\': ClusteringMethods.NO_CLUSTER.value}\n                        }, server_name=\'ashkin\', server_port=\'50401\')\n                    )\n                ]\n        )\n        payload.update(pretrained_model_parameters)\n        models[dataset][\'40-80_80-100\'] = send_job_request(payload=payload, server_port=\'50401\', server_name=\'ashkin\')[0][\'id\']\n\n\ndef drift_size_experimentation(dataset, prefix_length, models, splits, classification_method, encoding_method):\n    if classification_method != ""randomForest"":\n        models[dataset][\'40-55_80-100\'] = send_job_request(\n            payload=create_classification_payload(\n                split=splits[dataset][\'40-55_80-100\'],\n                encodings=[encoding_method],\n                encoding={""padding"": ""zero_padding"",\n                          ""generation_type"": TaskGenerationTypes.ALL_IN_ONE.value,\n                          ""prefix_length"": prefix_length,\n                          ""features"": []},\n                labeling={""type"": LabelTypes.ATTRIBUTE_STRING.value,\n                          ""attribute_name"": ""label"",\n                          ""add_remaining_time"": False,\n                          ""add_elapsed_time"": False,\n                          ""add_executed_events"": False,\n                          ""add_resources_used"": False,\n                          ""add_new_traces"": False},\n                classification=[classification_method],\n                hyperparameter_optimization={""type"": HyperparameterOptimizationMethods.NONE.value},\n                incremental_train=[\n                    get_pretrained_model_id(\n                        config=retrieve_job(config={\n                            \'type\': JobTypes.PREDICTION.value,\n                            # \'status\': JobStatuses.COMPLETED.value, # TODO sometimes some jobs hang in running while they are actually finished\n                            \'create_models\': True,\n                            \'split\': splits[dataset][\'0-40_80-100\'],\n                            \'encoding\': {""value_encoding"": encoding_method,\n                                         ""padding"": True,\n                                         ""task_generation_type"": TaskGenerationTypes.ALL_IN_ONE.value,\n                                         ""prefix_length"": prefix_length},\n                            \'labelling\': {""type"": LabelTypes.ATTRIBUTE_STRING.value,\n                                          ""attribute_name"": ""label"",\n                                          ""add_remaining_time"": False,\n                                          ""add_elapsed_time"": False,\n                                          ""add_executed_events"": False,\n                                          ""add_resources_used"": False,\n                                          ""add_new_traces"": False},\n                            \'hyperparameter_optimization\': {""optimization_method"": HyperparameterOptimizationMethods.HYPEROPT.value},\n                                                            # ""max_evaluations"": 1000, #TODO not yet supported\n                                                            # ""performance_metric"": HyperOptLosses.AUC.value,\n                                                            # ""algorithm_type"": HyperOptAlgorithms.TPE.value},\n                            \'predictive_model\': {\'predictive_model\': \'classification\',\n                                                 \'prediction_method\': classification_method},\n                            \'clustering\': {\'clustering_method\': ClusteringMethods.NO_CLUSTER.value}\n                        }, server_name=\'ashkin\', server_port=\'50401\')\n                    )\n                ]\n            ), server_port=\'50401\', server_name=\'ashkin\'\n        )[0][\'id\']\n\n    models[dataset][\'0-55_80-100\'] = send_job_request(\n        payload=create_classification_payload(\n            split=splits[dataset][\'0-55_80-100\'],\n            encodings=[encoding_method],\n            encoding={""padding"": ""zero_padding"",\n                      ""generation_type"": TaskGenerationTypes.ALL_IN_ONE.value,\n                      ""prefix_length"": prefix_length,\n                      ""features"": []},\n            labeling={""type"": LabelTypes.ATTRIBUTE_STRING.value,\n                      ""attribute_name"": ""label"",\n                      ""add_remaining_time"": False,\n                      ""add_elapsed_time"": False,\n                      ""add_executed_events"": False,\n                      ""add_resources_used"": False,\n                      ""add_new_traces"": False},\n            classification=[classification_method],\n            hyperparameter_optimization={""type"": HyperparameterOptimizationMethods.HYPEROPT.value,\n                                         ""max_evaluations"": 1000,\n                                         ""performance_metric"": HyperOptLosses.AUC.value,\n                                         ""algorithm_type"": HyperOptAlgorithms.TPE.value},\n        ), server_port=\'50401\', server_name=\'ashkin\'\n    )[0][\'id\']\n\n\nclass ExperimentationType(Enum):\n    STD = \'std\'\n    INCREMENTAL = \'incremental\'\n    DRIFT_SIZE = \'drift_size\'\n\n\ndef launch_experimentation(experimentation_type, datasets, splits, base_folder, models, prefixes=[10, 30, 50, 70],\n                           classification_methods=[ClassificationMethods.MULTINOMIAL_NAIVE_BAYES.value],\n                           encodings=[ValueEncodings.SIMPLE_INDEX.value]):\n    for dataset in datasets:\n        init_database(experimentation_type, splits, dataset, base_folder)\n\n        print(dataset, \'[:::] Batch of logs uploaded\')\n        if dataset not in models:\n            models[dataset] = {}\n\n        for prefix_length in prefixes:  # NB: if you add something the splits and models are overwritten\n            for classification_method in classification_methods:  # NB: if you add something the models are overwritten\n                for encoding_method in encodings:  # NB: if you add something the models are overwritten\n                    if experimentation_type == ExperimentationType.STD.value:\n                        std_experiments(dataset, prefix_length, models, splits, classification_method, encoding_method)\n                    elif experimentation_type == ExperimentationType.INCREMENTAL.value:\n                        incremental_experiments(dataset, prefix_length, models, splits, classification_method,\n                                                encoding_method)\n                    elif experimentation_type == ExperimentationType.DRIFT_SIZE.value:\n                        drift_size_experimentation(dataset, prefix_length, models, splits, classification_method,\n                                                   encoding_method)\n            print(dataset, \'[:::] Batch of tasks created\')\n        time.sleep(180)\n\n\nif __name__ == \'__main__\':\n    print(""Starting experiments"")\n\n    base_folder = \'/home/wrizzi/Documents/datasets/\'\n    # base_folder = \'/Users/Brisingr/Desktop/TEMP/dataset/prom_labeled_data/CAiSE18/\'\n\n    experimentation = ExperimentationType.DRIFT_SIZE.value\n\n    datasets1 = [\n        \'BPI11/f1/\',\n        \'BPI11/f2/\',\n        \'BPI11/f3/\',\n        \'BPI11/f4/\',\n        \'BPI15/f1/\',\n        \'BPI15/f2/\',\n        \'BPI15/f3/\'\n    ]\n\n    datasets2 = [\n        \'Drift1/f1/\',\n        \'Drift2/f1/\'\n    ]\n\n    split_sizes = [\n        \'0-40.xes\',\n        \'0-60.xes\',\n        \'0-55.xes\',\n        \'0-80.xes\',\n        \'40-80.xes\',\n        \'40-60.xes\',\n        \'40-55.xes\',\n        \'80-100.xes\'\n    ]\n\n    # TODO load from memory\n    splits = {\n        \'BPI11/f1/\': {\n            \'0-40_80-100\': 55,\n            \'0-80_80-100\': 56,\n            \'40-80_80-100\': 38,\n        },\n        \'BPI11/f2/\': {\n            \'0-40_80-100\': 57,\n            \'0-80_80-100\': 58,\n            \'40-80_80-100\': 39,\n        },\n        \'BPI11/f3/\': {\n            \'0-40_80-100\': 59,\n            \'0-80_80-100\': 60,\n            \'40-80_80-100\': 40,\n        },\n        \'BPI11/f4/\': {\n            \'0-40_80-100\': 61,\n            \'0-80_80-100\': 62,\n            \'40-80_80-100\': 41,\n        },\n        \'BPI15/f1/\': {\n            \'0-40_80-100\': 63,\n            \'0-80_80-100\': 64,\n            \'40-80_80-100\': 42,\n        },\n        \'BPI15/f2/\': {\n            \'0-40_80-100\': 65,\n            \'0-80_80-100\': 66,\n            \'40-80_80-100\': 43,\n        },\n        \'BPI15/f3/\': {\n            \'0-40_80-100\': 67,\n            \'0-80_80-100\': 68,\n            \'40-80_80-100\': 44,\n        },\n        \'Drift1/f1/\': {\n            \'0-40_80-100\': 69,\n            \'0-80_80-100\': 70,\n            \'40-80_80-100\': 45,\n\n            \'40-60_80-100\': 1111,\n            \'0-60_80-100\': 1111,\n            \'40-55_80-100\': 36,  # +TANTO perche\' uno e\' stato ciccato\n            \'0-55_80-100\': 1111\n        },\n        \'Drift2/f1/\': {\n            \'0-40_80-100\': 71,\n            \'0-80_80-100\': 72,\n            \'40-80_80-100\': 46,\n\n            \'40-60_80-100\': 1111,\n            \'0-60_80-100\': 1111,\n            \'40-55_80-100\': 1111,\n            \'0-55_80-100\': 1111\n        }\n    }\n\n    models = {}\n    if experimentation == ExperimentationType.STD.value:\n        launch_experimentation(\n            ExperimentationType.STD.value,\n            datasets1,\n            splits,\n            base_folder,\n            models,\n            prefixes=[30, 50, 70],\n            classification_methods=[\n                ClassificationMethods.MULTINOMIAL_NAIVE_BAYES.value,\n                ClassificationMethods.SGDCLASSIFIER.value,\n                ClassificationMethods.PERCEPTRON.value,\n                ClassificationMethods.RANDOM_FOREST.value],\n            encodings=[\n                ValueEncodings.SIMPLE_INDEX.value,\n                ValueEncodings.COMPLEX.value]\n        )\n\n        launch_experimentation(\n            ExperimentationType.STD.value,\n            datasets2,\n            splits,\n            base_folder,\n            models,\n            prefixes=[3, 5, 7],\n            classification_methods=[\n                ClassificationMethods.MULTINOMIAL_NAIVE_BAYES.value,\n                ClassificationMethods.SGDCLASSIFIER.value,\n                ClassificationMethods.PERCEPTRON.value,\n                ClassificationMethods.RANDOM_FOREST.value],\n            encodings=[\n                ValueEncodings.SIMPLE_INDEX.value,\n                ValueEncodings.COMPLEX.value]\n        )\n        json.dump(splits, open(""splits_1.json"", \'w\'))\n        json.dump(models, open(""models_1.json"", \'w\'))\n    elif experimentation == ExperimentationType.DRIFT_SIZE.value:\n        launch_experimentation(\n            ExperimentationType.DRIFT_SIZE.value,\n            datasets2,\n            splits,\n            base_folder,\n            models,\n            prefixes=[3, 5, 7],\n            classification_methods=[\n                ClassificationMethods.MULTINOMIAL_NAIVE_BAYES.value,\n                ClassificationMethods.SGDCLASSIFIER.value,\n                ClassificationMethods.PERCEPTRON.value,\n                ClassificationMethods.RANDOM_FOREST.value],\n            encodings=[\n                ValueEncodings.SIMPLE_INDEX.value,\n                ValueEncodings.COMPLEX.value]\n        )\n        json.dump(splits, open(""splits_2.json"", \'w\'))\n        json.dump(models, open(""models_2.json"", \'w\'))\n    elif experimentation == ExperimentationType.INCREMENTAL.value:\n        # splits = json.load(open(""../splits.json"", \'r\'))\n        # models = json.load(open(""../models.json"", \'r\'))\n\n        launch_experimentation(\n            ExperimentationType.INCREMENTAL.value,\n            datasets1,\n            splits,\n            base_folder,\n            models,\n            prefixes=[30, 50, 70],\n            classification_methods=[\n                ClassificationMethods.MULTINOMIAL_NAIVE_BAYES.value,\n                ClassificationMethods.SGDCLASSIFIER.value,\n                ClassificationMethods.PERCEPTRON.value,\n                ClassificationMethods.RANDOM_FOREST.value],\n            encodings=[\n                ValueEncodings.SIMPLE_INDEX.value,\n                ValueEncodings.COMPLEX.value]\n        )\n\n        launch_experimentation(\n            ExperimentationType.INCREMENTAL.value,\n            datasets2,\n            splits,\n            base_folder,\n            models,\n            prefixes=[3, 5, 7],\n            classification_methods=[\n                ClassificationMethods.MULTINOMIAL_NAIVE_BAYES.value,\n                ClassificationMethods.SGDCLASSIFIER.value,\n                ClassificationMethods.PERCEPTRON.value,\n                ClassificationMethods.RANDOM_FOREST.value],\n            encodings=[\n                ValueEncodings.SIMPLE_INDEX.value,\n                ValueEncodings.COMPLEX.value]\n        )\n\n        json.dump(splits, open(""splits_3.json"", \'w\'))\n        json.dump(models, open(""models_3.json"", \'w\'))\n\n    print(""End of the experiments"")\n'"
scripts/incremental/incremental_experiments_plots.py,10,"b'import itertools\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndatasets = [\n    \'BPI11/f1/\',\n    \'BPI11/f2/\',\n    \'BPI11/f3/\',\n    \'BPI11/f4/\',\n\n    \'BPI15/f1/\',\n    \'BPI15/f2/\',\n    \'BPI15/f3/\',\n\n    \'Drift1/f1/\',\n\n    \'Drift2/f1/\'\n]\n\nsplit_sizes = [\n    \'0-40_80-100\',\n    \'0-60_80-100\',\n    \'0-80_80-100\',\n    \'40-60_80-100\',\n    \'60-80_80-100\',\n    \'40-55_80-100\',\n    \'0-55_80-100\'\n]\n\nsplits = {\n    \'BPI11/f1/\': {\n        \'0-40_80-100\': 138,\n        \'0-80_80-100\': 139,\n        \'40-80_80-100\': 140,\n    },\n    \'BPI11/f2/\': {\n        \'0-40_80-100\': 141,\n        \'0-80_80-100\': 142,\n        \'40-80_80-100\': 143,\n    },\n    \'BPI11/f3/\': {\n        \'0-40_80-100\': 144,\n        \'0-80_80-100\': 145,\n        \'40-80_80-100\': 146,\n    },\n    \'BPI11/f4/\': {\n        \'0-40_80-100\': 147,\n        \'0-80_80-100\': 148,\n        \'40-80_80-100\': 149,\n    },\n    \'BPI15/f1/\': {\n        \'0-40_80-100\': 150,\n        \'0-80_80-100\': 151,\n        \'40-80_80-100\': 152,\n    },\n    \'BPI15/f2/\': {\n        \'0-40_80-100\': 153,\n        \'0-80_80-100\': 154,\n        \'40-80_80-100\': 155,\n    },\n    \'BPI15/f3/\': {\n        \'0-40_80-100\': 156,\n        \'0-80_80-100\': 157,\n        \'40-80_80-100\': 158,\n    },\n    \'Drift1/f1/\': {\n        \'0-40_80-100\': 159,\n        \'0-80_80-100\': 160,\n        \'40-80_80-100\': 161,\n\n        \'40-60_80-100\': 1111,\n        \'0-60_80-100\': 1111,\n        \'40-55_80-100\': 1111,\n        \'0-55_80-100\': 1111\n    },\n    \'Drift2/f1/\': {\n        \'0-40_80-100\': 162,\n        \'0-80_80-100\': 163,\n        \'40-80_80-100\': 164,\n\n        \'40-60_80-100\': 1111,\n        \'0-60_80-100\': 1111,\n        \'40-55_80-100\': 1111,\n        \'0-55_80-100\': 1111\n    }\n}\n# }\n# splits = {\n#     \'BPI11/f1/\': {\n#         \'0-40_80-100\': 101,\n#         \'0-80_80-100\': 102,\n#         \'40-80_80-100\': 103,\n#     },\n#     \'BPI11/f2/\': {\n#         \'0-40_80-100\': 104,\n#         \'0-80_80-100\': 105,\n#         \'40-80_80-100\': 106,\n#     },\n#     \'BPI11/f3/\': {\n#         \'0-40_80-100\': 107,\n#         \'0-80_80-100\': 108,\n#         \'40-80_80-100\': 109,\n#     },\n#     \'BPI11/f4/\': {\n#         \'0-40_80-100\': 110,\n#         \'0-80_80-100\': 111,\n#         \'40-80_80-100\': 112,\n#     },\n#     \'BPI15/f1/\': {\n#         \'0-40_80-100\': 113,\n#         \'0-80_80-100\': 114,\n#         \'40-80_80-100\': 115,\n#     },\n#     \'BPI15/f2/\': {\n#         \'0-40_80-100\': 116,\n#         \'0-80_80-100\': 117,\n#         \'40-80_80-100\': 118,\n#     },\n#     \'BPI15/f3/\': {\n#         \'0-40_80-100\': 119,\n#         \'0-80_80-100\': 120,\n#         \'40-80_80-100\': 121,\n#     },\n#     \'Drift1/f1/\': {\n#         \'0-40_80-100\': 122,\n#         \'0-80_80-100\': 123,\n#         \'40-80_80-100\': 124,\n#\n#         \'40-60_80-100\': 1111,\n#         \'0-60_80-100\': 1111,\n#         \'40-55_80-100\': 1111,\n#         \'0-55_80-100\': 1111\n#     },\n#     \'Drift2/f1/\': {\n#         \'0-40_80-100\': 125,\n#         \'0-80_80-100\': 126,\n#         \'40-80_80-100\': 127,\n#\n#         \'40-60_80-100\': 1111,\n#         \'0-60_80-100\': 1111,\n#         \'40-55_80-100\': 1111,\n#         \'0-55_80-100\': 1111\n#     }\n# }\n\n# splits = {\n#     \'BPI11/f1/\': {\n#         \'0-40_80-100\': 55,\n#         \'0-80_80-100\': 56,\n#         \'40-80_80-100\': 73,\n#     },\n#     \'BPI11/f2/\': {\n#         \'0-40_80-100\': 57,\n#         \'0-80_80-100\': 58,\n#         \'40-80_80-100\': 74,\n#     },\n#     \'BPI11/f3/\': {\n#         \'0-40_80-100\': 59,\n#         \'0-80_80-100\': 60,\n#         \'40-80_80-100\': 75,\n#     },\n#     \'BPI11/f4/\': {\n#         \'0-40_80-100\': 61,\n#         \'0-80_80-100\': 62,\n#         \'40-80_80-100\': 76,\n#     },\n#     \'BPI15/f1/\': {\n#         \'0-40_80-100\': 63,\n#         \'0-80_80-100\': 64,\n#         \'40-80_80-100\': 77,\n#     },\n#     \'BPI15/f2/\': {\n#         \'0-40_80-100\': 65,\n#         \'0-80_80-100\': 66,\n#         \'40-80_80-100\': 78,\n#     },\n#     \'BPI15/f3/\': {\n#         \'0-40_80-100\': 67,\n#         \'0-80_80-100\': 68,\n#         \'40-80_80-100\': 79,\n#     },\n#     \'Drift1/f1/\': {\n#         \'0-40_80-100\': 69,\n#         \'0-80_80-100\': 70,\n#         \'40-80_80-100\': 80,\n#\n#         \'40-60_80-100\': 1111,\n#         \'0-60_80-100\': 1111,\n#         \'40-55_80-100\': 1111,\n#         \'0-55_80-100\': 1111\n#     },\n#     \'Drift2/f1/\': {\n#         \'0-40_80-100\': 90,#71,\n#         \'0-80_80-100\': 91,#72,\n#         \'40-80_80-100\': 92,#81,\n#\n#         \'40-60_80-100\': 1111,\n#         \'0-60_80-100\': 1111,\n#         \'40-55_80-100\': 1111,\n#         \'0-55_80-100\': 1111\n#     }\n# }\n\n\ndef get_row_metrics(table):\n    curr_row = table[\'evaluation_f1_score\']\n    f1_score_mean, f1_score_std, f1_score_max = curr_row.mean(), curr_row.std(), curr_row.max()\n\n    curr_row = table[\'evaluation_accuracy\']\n    accuracy_mean, accuracy_std, accuracy_max = curr_row.mean(), curr_row.std(), curr_row.max()\n\n    curr_row = table[\'evaluation_precision\']\n    precision_mean, precision_std, precision_max = curr_row.mean(), curr_row.std(), curr_row.max()\n\n    curr_row = table[\'evaluation_recall\']\n    recall_mean, recall_std, recall_max = curr_row.mean(), curr_row.std(), curr_row.max()\n\n    curr_row = table[\'evaluation_auc\']\n    auc_mean, auc_std, auc_max = curr_row.mean(), curr_row.std(), curr_row.max()\n\n    curr_row = pd.to_timedelta(table[\'evaluation_elapsed_time\'])\n    elapsed_time_mean, elapsed_time_std, elapsed_time_max, elapsed_time_min = curr_row.mean(), curr_row.std(), curr_row.max(), curr_row.min()\n\n    return f1_score_mean, f1_score_std, f1_score_max, \\\n           accuracy_mean, accuracy_std, accuracy_max, \\\n           precision_mean, precision_std, precision_max, \\\n           recall_mean, recall_std, recall_max, \\\n           auc_mean, auc_std, auc_max, \\\n           elapsed_time_mean, elapsed_time_std, elapsed_time_max, elapsed_time_min\n\n\ndef quantitative_scores(experiments_df_path=\'../DUMP_INCREMENTAL_hyper_last_train.csv\', where_save=\'quantitative_scores.csv\'):\n    pd.set_option(""display.precision"", 4)\n    experiments_df = pd.read_csv(experiments_df_path)\n\n    splits_scores = {}\n\n    for split_id in list(set(experiments_df[\'split_id\'].unique()) & set(splits[dataset][\'0-40_80-100\'] for dataset in datasets)):\n        table = experiments_df[(experiments_df[\'split_id\'] == split_id) &\n                               (experiments_df[\'incremental_model_id\'].isnull()) &\n                               ((experiments_df[\'hyperparameter_optimizer_performance_metric\'].notnull()) |\n                                (experiments_df[\'hyperparameter_optimizer_max_evaluations\'].notnull()) |\n                                (experiments_df[\'hyperparameter_optimizer_elapsed_time\'].notnull()))&\n                                (experiments_df[\'predictive_model\'] != \'randomForest\')]  # M0\n        m_dataset = [dataset for dataset in datasets if splits[dataset][\'0-40_80-100\'] == split_id][0]\n        if not table.empty:\n            table[\'model\'] = \'M0\'\n            table[\'dataset\'] = m_dataset\n            table[\'size\'] = \'0-40_80-100\'\n            if m_dataset not in splits_scores:\n                splits_scores[m_dataset] = table\n            else:\n                splits_scores[m_dataset] = pd.concat([splits_scores[m_dataset], table])\n\n    for split_id in list(set(experiments_df[\'split_id\'].unique()) & set(splits[dataset][\'0-80_80-100\'] for dataset in datasets)):\n        table = experiments_df[(experiments_df[\'split_id\'] == split_id) &\n                               (experiments_df[\'incremental_model_id\'].isnull()) &\n                               ((experiments_df[\'hyperparameter_optimizer_performance_metric\'].isnull()) &\n                                (experiments_df[\'hyperparameter_optimizer_max_evaluations\'].isnull()) &\n                                (experiments_df[\'hyperparameter_optimizer_elapsed_time\'].isnull()))]# &\n                               # (experiments_df[\'predictive_model\'] != \'randomForest\')]  # M1\n        m_dataset = [dataset for dataset in datasets if splits[dataset][\'0-80_80-100\'] == split_id][0]\n        if not table.empty:\n            table[\'model\'] = \'M1\'\n            table[\'dataset\'] = m_dataset\n            table[\'size\'] = \'0-80_80-100\'\n            if m_dataset not in splits_scores:\n                splits_scores[m_dataset] = table\n            else:\n                splits_scores[m_dataset] = pd.concat([splits_scores[m_dataset], table])\n\n    for split_id in list(set(experiments_df[\'split_id\'].unique()) & set(splits[dataset][\'0-80_80-100\'] for dataset in datasets)):\n        table = experiments_df[(experiments_df[\'split_id\'] == split_id) &\n                               (experiments_df[\'incremental_model_id\'].isnull()) &\n                               ((experiments_df[\'hyperparameter_optimizer_performance_metric\'].notnull()) |\n                                (experiments_df[\'hyperparameter_optimizer_max_evaluations\'].notnull()) |\n                                (experiments_df[\'hyperparameter_optimizer_elapsed_time\'].notnull()))]# &\n                               # (experiments_df[\'predictive_model\'] != \'randomForest\')]  # M2\n        m_dataset = [dataset for dataset in datasets if splits[dataset][\'0-80_80-100\'] == split_id][0]\n        if not table.empty:\n            table[\'model\'] = \'M2\'\n            table[\'dataset\'] = m_dataset\n            table[\'size\'] = \'0-80_80-100\'\n            if m_dataset not in splits_scores:\n                splits_scores[m_dataset] = table\n            else:\n                splits_scores[m_dataset] = pd.concat([splits_scores[m_dataset], table])\n\n    for split_id in list(set(experiments_df[\'split_id\'].unique()) & set( splits[dataset][\'40-80_80-100\'] for dataset in datasets )):\n        table = experiments_df[(experiments_df[\'split_id\'] == split_id) &\n                               (experiments_df[\'incremental_model_id\'].notnull()) &\n                               ((experiments_df[\'hyperparameter_optimizer_performance_metric\'].isnull()) &\n                               (experiments_df[\'hyperparameter_optimizer_max_evaluations\'].isnull()) &\n                               (experiments_df[\'hyperparameter_optimizer_elapsed_time\'].isnull()))]# &\n                                # (experiments_df[\'predictive_model\'] != \'randomForest\')]  # M3\n        m_dataset = [dataset for dataset in datasets if splits[dataset][\'40-80_80-100\'] == split_id][0]\n        if not table.empty:\n            table[\'model\'] = \'M3\'\n            table[\'dataset\'] = m_dataset\n            table[\'size\'] = \'40-80_80-100\'\n            if m_dataset not in splits_scores:\n                splits_scores[m_dataset] = table\n            else:\n                splits_scores[m_dataset] = pd.concat([splits_scores[m_dataset], table])\n\n    quantitative_scores = {}\n    for dataset in datasets:\n        for encoding, prefix, predictive_model in itertools.product(*[\n            splits_scores[dataset][\'encoding_value_encoding\'].unique(),\n            splits_scores[dataset][\'encoding_prefix_length\'].unique(),\n            splits_scores[dataset][\'predictive_model\'].unique()\n        ]):\n            table = splits_scores[dataset][\n                (splits_scores[dataset][\'encoding_value_encoding\'] == encoding) &\n                (splits_scores[dataset][\'encoding_prefix_length\'] == prefix) &\n                (splits_scores[dataset][\'predictive_model\'] == predictive_model)\n            ]\n            if len(table) == 4:\n                max_conf = table.loc[table[\'evaluation_auc\'].idxmax()]\n                if dataset not in quantitative_scores:\n                    quantitative_scores[dataset] = pd.DataFrame([max_conf])\n                else:\n                    quantitative_scores[dataset] = pd.concat([quantitative_scores[dataset], pd.DataFrame([max_conf])])\n\n    if where_save is not None:\n        for dataset in datasets:\n            splits_scores[dataset].sort_values(by=[\'evaluation_auc\'], inplace=True, ascending=False)\n            splits_scores[dataset].to_csv(dataset.replace(\'/\', \'_\') + \'_\' + where_save)\n\n            quantitative_scores[dataset].to_csv(dataset.replace(\'/\', \'_\') + \'models\' + \'_\' + where_save)\n    # return aggregates_df\n\n\ndef create_macro_table(experiments_df_path=\'../DUMP_INCREMENTAL_hyper_last_train.csv\', where_save=\'macro_table_avg_std_max_NO_rf.csv\'):\n    pd.set_option(""display.precision"", 4)\n    experiments_df = pd.read_csv(experiments_df_path)\n    aggregates_list = []\n    for split_id in list(set(experiments_df[\'split_id\'].unique()) & set( splits[dataset][\'0-40_80-100\'] for dataset in datasets )):\n        table = experiments_df[(experiments_df[\'split_id\'] == split_id) &\n                               (experiments_df[\'incremental_model_id\'].isnull()) &\n                               ((experiments_df[\'hyperparameter_optimizer_performance_metric\'].notnull()) |\n                               (experiments_df[\'hyperparameter_optimizer_max_evaluations\'].notnull()) |\n                               (experiments_df[\'hyperparameter_optimizer_elapsed_time\'].notnull())) &\n                                (experiments_df[\'predictive_model\'] != \'randomForest\')]  # M0\n\n        f1_score_mean, f1_score_std, f1_score_max, \\\n        accuracy_mean, accuracy_std, accuracy_max, \\\n        precision_mean, precision_std, precision_max, \\\n        recall_mean, recall_std, recall_max, \\\n        auc_mean, auc_std, auc_max, \\\n        elapsed_time_mean, elapsed_time_std, elapsed_time_max, elapsed_time_min = get_row_metrics(table)\n\n        m_dataset = [dataset for dataset in datasets if splits[dataset][\'0-40_80-100\'] == split_id][0]\n\n        if not table.empty:\n            aggregates_list += [[\n                m_dataset, \'0-40_80-100\', \'M0\',\n                split_id, f1_score_max, accuracy_max, precision_max, recall_max, auc_max,\n                elapsed_time_mean, elapsed_time_std, elapsed_time_max, elapsed_time_min,\n                f1_score_mean, f1_score_std,\n                accuracy_mean, accuracy_std,\n                precision_mean, precision_std,\n                recall_mean, recall_std,\n                auc_mean, auc_std\n            ]]\n\n    for split_id in list(set(experiments_df[\'split_id\'].unique()) & set( splits[dataset][\'40-80_80-100\'] for dataset in datasets )):\n        table = experiments_df[(experiments_df[\'split_id\'] == split_id) &\n                               (experiments_df[\'incremental_model_id\'].notnull()) &\n                               ((experiments_df[\'hyperparameter_optimizer_performance_metric\'].isnull()) &\n                               (experiments_df[\'hyperparameter_optimizer_max_evaluations\'].isnull()) &\n                               (experiments_df[\'hyperparameter_optimizer_elapsed_time\'].isnull())) &\n                                (experiments_df[\'predictive_model\'] != \'randomForest\')]  # M3\n\n        f1_score_mean, f1_score_std, f1_score_max, \\\n        accuracy_mean, accuracy_std, accuracy_max, \\\n        precision_mean, precision_std, precision_max, \\\n        recall_mean, recall_std, recall_max, \\\n        auc_mean, auc_std, auc_max, \\\n        elapsed_time_mean, elapsed_time_std, elapsed_time_max, elapsed_time_min = get_row_metrics(table)\n\n        m_dataset = [dataset for dataset in datasets if splits[dataset][\'40-80_80-100\'] == split_id][0]\n\n        custom_split_id = splits[m_dataset][\'0-80_80-100\']\n\n        if not table.empty:\n            aggregates_list += [[\n                m_dataset, \'40-80_80-100\', \'M3\',\n                custom_split_id + .3, f1_score_max, accuracy_max, precision_max, recall_max, auc_max,\n                elapsed_time_mean, elapsed_time_std, elapsed_time_max, elapsed_time_min,\n                f1_score_mean, f1_score_std,\n                accuracy_mean, accuracy_std,\n                precision_mean, precision_std,\n                recall_mean, recall_std,\n                auc_mean, auc_std\n            ]]\n\n    for split_id in list(set(experiments_df[\'split_id\'].unique()) & set( splits[dataset][\'0-80_80-100\'] for dataset in datasets )):\n        table = experiments_df[(experiments_df[\'split_id\'] == split_id) &\n                               (experiments_df[\'incremental_model_id\'].isnull()) &\n                               ((experiments_df[\'hyperparameter_optimizer_performance_metric\'].isnull()) &\n                                (experiments_df[\'hyperparameter_optimizer_max_evaluations\'].isnull()) &\n                                (experiments_df[\'hyperparameter_optimizer_elapsed_time\'].isnull())) &\n                                (experiments_df[\'predictive_model\'] != \'randomForest\')]  # M1\n\n        f1_score_mean, f1_score_std, f1_score_max, \\\n        accuracy_mean, accuracy_std, accuracy_max, \\\n        precision_mean, precision_std, precision_max, \\\n        recall_mean, recall_std, recall_max, \\\n        auc_mean, auc_std, auc_max, \\\n        elapsed_time_mean, elapsed_time_std, elapsed_time_max, elapsed_time_min = get_row_metrics(table)\n\n        m_dataset = [dataset for dataset in datasets if splits[dataset][\'0-80_80-100\'] == split_id][0]\n\n        if not table.empty:\n            aggregates_list += [[\n                m_dataset, \'0-80_80-100\', \'M1\',\n                split_id + .1, f1_score_max, accuracy_max, precision_max, recall_max, auc_max,\n                elapsed_time_mean, elapsed_time_std, elapsed_time_max, elapsed_time_min,\n                f1_score_mean, f1_score_std,\n                accuracy_mean, accuracy_std,\n                precision_mean, precision_std,\n                recall_mean, recall_std,\n                auc_mean, auc_std\n            ]]\n\n    for split_id in list(set(experiments_df[\'split_id\'].unique()) & set(splits[dataset][\'0-80_80-100\'] for dataset in datasets)):\n        table = experiments_df[(experiments_df[\'split_id\'] == split_id) &\n                               (experiments_df[\'incremental_model_id\'].isnull()) &\n                               ((experiments_df[\'hyperparameter_optimizer_performance_metric\'].notnull()) |\n                               (experiments_df[\'hyperparameter_optimizer_max_evaluations\'].notnull()) |\n                               (experiments_df[\'hyperparameter_optimizer_elapsed_time\'].notnull())) &\n                                (experiments_df[\'predictive_model\'] != \'randomForest\')]  # M2\n\n        f1_score_mean, f1_score_std, f1_score_max, \\\n        accuracy_mean, accuracy_std, accuracy_max, \\\n        precision_mean, precision_std, precision_max, \\\n        recall_mean, recall_std, recall_max, \\\n        auc_mean, auc_std, auc_max, \\\n        elapsed_time_mean, elapsed_time_std, elapsed_time_max, elapsed_time_min = get_row_metrics(table)\n\n        m_dataset = [dataset for dataset in datasets if splits[dataset][\'0-80_80-100\'] == split_id][0]\n\n        if not table.empty:\n            aggregates_list += [[\n                m_dataset, \'0-80_80-100\', \'M2\',\n                split_id + .2, f1_score_max, accuracy_max, precision_max, recall_max, auc_max,\n                elapsed_time_mean, elapsed_time_std, elapsed_time_max, elapsed_time_min,\n                f1_score_mean, f1_score_std,\n                accuracy_mean, accuracy_std,\n                precision_mean, precision_std,\n                recall_mean, recall_std,\n                auc_mean, auc_std\n            ]]\n\n    aggregates_df = pd.DataFrame(aggregates_list, columns=[\n        \'dataset\', \'size\', \'model\',\n        \'split_id\', \'f1_score_max\', \'accuracy_max\', \'precision_max\', \'recall_max\', \'auc_max\',\n        \'elapsed_time_mean\', \'elapsed_time_std\', \'elapsed_time_max\', \'elapsed_time_min\',\n        \'f1_score_mean\', \'f1_score_std\',\n        \'accuracy_mean\', \'accuracy_std\',\n        \'precision_mean\', \'precision_std\',\n        \'recall_mean\', \'recall_std\',\n        \'auc_mean\', \'auc_std\'\n    ])\n\n    aggregates_df.sort_values(by=[\'split_id\'], inplace=True)\n    if where_save is not None:\n        aggregates_df.to_csv(where_save)\n    return aggregates_df\n\n\ndef create_macro_obj_table(objective,\n                           experiments_df_path=\'../DUMP_INCREMENTAL_hyper_last_train.csv\',\n                           where_save=\'macro_table_avg_std_NO_rf.csv\'):\n    pd.set_option(""display.precision"", 4)\n    experiments_df = pd.read_csv(experiments_df_path)\n    aggregates_list = []\n    for split_id in list(set(experiments_df[\'split_id\'].unique()) & set( splits[dataset][\'0-40_80-100\'] for dataset in datasets )):\n        for objective_id in experiments_df[experiments_df[\'split_id\'] == split_id][objective].unique():\n            table = experiments_df[(experiments_df[\'split_id\'] == split_id) &\n                                   (experiments_df[\'incremental_model_id\'].isnull()) &\n                                   ((experiments_df[\'hyperparameter_optimizer_performance_metric\'].notnull()) |\n                                    (experiments_df[\'hyperparameter_optimizer_max_evaluations\'].notnull()) |\n                                    (experiments_df[\'hyperparameter_optimizer_elapsed_time\'].notnull())) &\n                                   (experiments_df[objective] == objective_id) &\n                                    (experiments_df[\'predictive_model\'] != \'randomForest\')]  # M0\n\n            f1_score_mean, f1_score_std, f1_score_max, \\\n            accuracy_mean, accuracy_std, accuracy_max, \\\n            precision_mean, precision_std, precision_max, \\\n            recall_mean, recall_std, recall_max, \\\n            auc_mean, auc_std, auc_max, \\\n            elapsed_time_mean, elapsed_time_std, elapsed_time_max, elapsed_time_min = get_row_metrics(table)\n\n            m_dataset = [dataset for dataset in datasets if splits[dataset][\'0-40_80-100\'] == split_id][0]\n\n            if not table.empty:\n                aggregates_list += [[\n                    m_dataset, \'0-40_80-100\', \'M0\',\n                    split_id, objective_id,\n                    f1_score_mean, f1_score_std,\n                    accuracy_mean, accuracy_std,\n                    precision_mean, precision_std,\n                    recall_mean, recall_std,\n                    auc_mean, auc_std,\n                    elapsed_time_mean, elapsed_time_std\n                ]]\n    for split_id in list(set(experiments_df[\'split_id\'].unique()) & set( splits[dataset][\'40-80_80-100\'] for dataset in datasets )):\n        for objective_id in experiments_df[experiments_df[\'split_id\'] == split_id][objective].unique():\n            table = experiments_df[(experiments_df[\'split_id\'] == split_id) &\n                                   (experiments_df[\'incremental_model_id\'].notnull()) &\n                                   ((experiments_df[\'hyperparameter_optimizer_performance_metric\'].isnull()) &\n                                    (experiments_df[\'hyperparameter_optimizer_max_evaluations\'].isnull()) &\n                                    (experiments_df[\'hyperparameter_optimizer_elapsed_time\'].isnull())) &\n                                   (experiments_df[objective] == objective_id) &\n                                    (experiments_df[\'predictive_model\'] != \'randomForest\')]  # M3\n\n            f1_score_mean, f1_score_std, f1_score_max, \\\n            accuracy_mean, accuracy_std, accuracy_max, \\\n            precision_mean, precision_std, precision_max, \\\n            recall_mean, recall_std, recall_max, \\\n            auc_mean, auc_std, auc_max, \\\n            elapsed_time_mean, elapsed_time_std, elapsed_time_max, elapsed_time_min = get_row_metrics(table)\n\n            m_dataset = [dataset for dataset in datasets if splits[dataset][\'40-80_80-100\'] == split_id][0]\n\n            custom_split_id = splits[m_dataset][\'0-80_80-100\']\n\n            if not table.empty:\n                aggregates_list += [[\n                    m_dataset, \'40-80_80-100\', \'M3\',\n                    custom_split_id + .3, objective_id,\n                    f1_score_mean, f1_score_std,\n                    accuracy_mean, accuracy_std,\n                    precision_mean, precision_std,\n                    recall_mean, recall_std,\n                    auc_mean, auc_std,\n                    elapsed_time_mean, elapsed_time_std\n                ]]\n    for split_id in list(set(experiments_df[\'split_id\'].unique()) & set( splits[dataset][\'0-80_80-100\'] for dataset in datasets )):\n        for objective_id in experiments_df[experiments_df[\'split_id\'] == split_id][objective].unique():\n            table = experiments_df[(experiments_df[\'split_id\'] == split_id) &\n                                   (experiments_df[\'incremental_model_id\'].isnull()) &\n                                   ((experiments_df[\'hyperparameter_optimizer_performance_metric\'].isnull()) &\n                                    (experiments_df[\'hyperparameter_optimizer_max_evaluations\'].isnull()) &\n                                    (experiments_df[\'hyperparameter_optimizer_elapsed_time\'].isnull())) &\n                                   (experiments_df[objective] == objective_id) &\n                                    (experiments_df[\'predictive_model\'] != \'randomForest\')]  # M1\n\n            f1_score_mean, f1_score_std, f1_score_max, \\\n            accuracy_mean, accuracy_std, accuracy_max, \\\n            precision_mean, precision_std, precision_max, \\\n            recall_mean, recall_std, recall_max, \\\n            auc_mean, auc_std, auc_max, \\\n            elapsed_time_mean, elapsed_time_std, elapsed_time_max, elapsed_time_min = get_row_metrics(table)\n\n            m_dataset = [dataset for dataset in datasets if splits[dataset][\'0-80_80-100\'] == split_id][0]\n\n            if not table.empty:\n                aggregates_list += [[\n                    m_dataset, \'0-80_80-100\', \'M1\',\n                    split_id + .1, objective_id,\n                    f1_score_mean, f1_score_std,\n                    accuracy_mean, accuracy_std,\n                    precision_mean, precision_std,\n                    recall_mean, recall_std,\n                    auc_mean, auc_std,\n                    elapsed_time_mean, elapsed_time_std\n                ]]\n    for split_id in list(set(experiments_df[\'split_id\'].unique()) & set( splits[dataset][\'0-80_80-100\'] for dataset in datasets )):\n        for objective_id in experiments_df[experiments_df[\'split_id\'] == split_id][objective].unique():\n            table = experiments_df[(experiments_df[\'split_id\'] == split_id) &\n                                   (experiments_df[\'incremental_model_id\'].isnull()) &\n                                   ((experiments_df[\'hyperparameter_optimizer_performance_metric\'].notnull()) |\n                                    (experiments_df[\'hyperparameter_optimizer_max_evaluations\'].notnull()) |\n                                    (experiments_df[\'hyperparameter_optimizer_elapsed_time\'].notnull())) &\n                                   (experiments_df[objective] == objective_id) ]  # M2\n\n            f1_score_mean, f1_score_std, f1_score_max, \\\n            accuracy_mean, accuracy_std, accuracy_max, \\\n            precision_mean, precision_std, precision_max, \\\n            recall_mean, recall_std, recall_max, \\\n            auc_mean, auc_std, auc_max, \\\n            elapsed_time_mean, elapsed_time_std, elapsed_time_max, elapsed_time_min = get_row_metrics(table)\n\n            m_dataset = [dataset for dataset in datasets if splits[dataset][\'0-80_80-100\'] == split_id][0]\n\n            if not table.empty:\n                aggregates_list += [[\n                    m_dataset, \'0-80_80-100\', \'M2\',\n                    split_id + .2, objective_id,\n                    f1_score_mean, f1_score_std,\n                    accuracy_mean, accuracy_std,\n                    precision_mean, precision_std,\n                    recall_mean, recall_std,\n                    auc_mean, auc_std,\n                    elapsed_time_mean, elapsed_time_std\n                ]]\n    aggregates_df = pd.DataFrame(aggregates_list, columns=[\n        \'dataset\', \'size\', \'model\',\n        \'split_id\', objective,\n        \'f1_score_mean\',  \'f1_score_std\',\n        \'accuracy_mean\',  \'accuracy_std\',\n        \'precision_mean\', \'precision_std\',\n        \'recall_mean\',    \'recall_std\',\n        \'auc_mean\',       \'auc_std\',\n        \'elapsed_time_mean\', \'elapsed_time_std\'\n    ])\n\n    aggregates_df.sort_values(by=[\'split_id\', objective], inplace=True)\n    if where_save is not None:\n        aggregates_df.to_csv(where_save)\n    return aggregates_df\n\n\nif __name__ == \'__main__\':\n\n    #TODO: read in the model object in memory to ease the analysis\n    # models = json.load(open(""created_jobs.txt""))\n\n    aggregates_dfs = []\n    aggregates_dfs += [create_macro_table(experiments_df_path=\'../DUMP_INCREMENTAL_hyper_last_train.csv\', where_save=\'macro_table_avg_std_max_NO_rf.csv\')]\n    aggregates_dfs += [\n        create_macro_obj_table(\n            objective=obj,\n            experiments_df_path=\'../DUMP_INCREMENTAL_hyper_last_train.csv\',\n            where_save=\'macro_table_\' + obj + \'_avg_std_NO_rf.csv\')\n        for obj in [ \'predictive_model\', \'encoding_prefix_length\', \'encoding_value_encoding\' ]\n    ]\n    quantitative_scores(experiments_df_path=\'../DUMP_INCREMENTAL_hyper_last_train.csv\', where_save=\'macro_table_avg_std_max_NO_rf.csv\')\n\n\n\ndef plot_unit():\n    plt.figure(figsize=(9, 3))\n\n    plt.subplot(131)\n    plt.plot([1, 2, 3, 4], [1, 4, 9, 16], \'ro\')\n    plt.axis([0, 6, 0, 20])\n    plt.xlabel(\'entry a\')\n    plt.ylabel(\'some numbers\')\n\n    plt.subplot(132)\n    plt.plot([1, 2, 3, 4, 5, 6, 7])\n    plt.plot([5, 6, 7])\n    plt.plot([1,6,89])\n    plt.axis([0, 6, 0, 20])\n    plt.xlabel(\'entry a\')\n    plt.ylabel(\'some numbers\')\n\n    plt.subplot(133)\n    plt.plot([1, 2, 3, 4], [1, 4, 9, 16], \'ro\')\n    plt.axis([0, 6, 0, 20])\n    plt.xlabel(\'entry a\')\n    plt.ylabel(\'some numbers\')\n\n    plt.suptitle(\'Categorical Plotting\')\n    plt.show()\n\n    plt.suptitle(\'Categorical Plotting\')\n    plt.show()\n\n\ndef avg_std_plot():\n    plt.clf()\n    plt.hold(1)\n\n    x = np.linspace(0, 30, 30)\n    y = np.sin(x / 6 * np.pi)\n    error = np.random.normal(0.1, 0.02, size=y.shape) + .1\n    y += np.random.normal(0, 0.1, size=y.shape)\n\n    plt.plot(x, y, \'k\', color=\'#CC4F1B\')\n    plt.fill_between(x, y - error, y + error,\n                     alpha=0.5, edgecolor=\'#CC4F1B\', facecolor=\'#FF9848\')\n\n    y = np.cos(x / 6 * np.pi)\n    error = np.random.rand(len(y)) * 0.5\n    y += np.random.normal(0, 0.1, size=y.shape)\n    plt.plot(x, y, \'k\', color=\'#1B2ACC\')\n    plt.fill_between(x, y - error, y + error,\n                     alpha=0.2, edgecolor=\'#1B2ACC\', facecolor=\'#089FFF\',\n                     linewidth=4, linestyle=\'dashdot\', antialiased=True)\n\n    y = np.cos(x / 6 * np.pi) + np.sin(x / 3 * np.pi)\n    error = np.random.rand(len(y)) * 0.5\n    y += np.random.normal(0, 0.1, size=y.shape)\n    plt.plot(x, y, \'k\', color=\'#3F7F4C\')\n    plt.fill_between(x, y - error, y + error,\n                     alpha=1, edgecolor=\'#3F7F4C\', facecolor=\'#7EFF99\',\n                     linewidth=0)\n\n    plt.show()\n'"
scripts/progetto_padova/progetto_padova.py,0,"b""from pm4py.objects.log.importer.xes.factory import import_log\n\nfrom src.clustering.models import Clustering, ClusteringMethods\nfrom src.core.core import _init_clusterer, MODEL, ModelActions\nfrom src.encoding.common import encode_label_logs, LabelTypes\nfrom src.encoding.models import Encoding, TaskGenerationTypes, ValueEncodings, DataEncodings\nfrom src.explanation.explanation import explanation\nfrom src.explanation.models import Explanation, ExplanationTypes\nfrom src.hyperparameter_optimization.models import HyperparameterOptimization, HyperparameterOptimizationMethods, \\\n    HyperOptAlgorithms, HyperOptLosses\nfrom src.jobs.job_creator import get_prediction_method_config\nfrom src.jobs.models import Job, JobStatuses, JobTypes\nfrom src.jobs.tasks import save_models\nfrom src.labelling.models import Labelling\nfrom src.logs.log_service import create_log\nfrom src.predictive_model.classification.models import ClassificationMethods\nfrom src.predictive_model.models import PredictiveModel, PredictiveModels\nfrom src.split.models import Split, SplitTypes\nfrom src.split.splitting import get_train_test_log\n\nimport pandas as pd\n\nBASE_DIR = 'cache/log_cache/'\nRELATIVE_TRAIN_PATH = 'train_set.xes'\nRELATIVE_VALIDATION_PATH = 'validation_set.xes'\nEXPLANATION_TARGET = 1\n\n\ndef progetto_padova():\n    JOB = Job.objects.get_or_create(\n        status=JobStatuses.CREATED.value,\n        type=JobTypes.PREDICTION.value,\n        split=Split.objects.get_or_create(  # this creates the split of the log\n            type=SplitTypes.SPLIT_DOUBLE.value,\n            train_log=create_log(  # this imports the log\n                import_log(BASE_DIR + RELATIVE_TRAIN_PATH),\n                RELATIVE_TRAIN_PATH,\n                BASE_DIR,\n                import_in_cache=False\n            ),\n            test_log=create_log(  # this imports the log\n                import_log(BASE_DIR + RELATIVE_VALIDATION_PATH),\n                RELATIVE_VALIDATION_PATH,\n                BASE_DIR,\n                import_in_cache=False\n            )\n        )[0],\n        encoding=Encoding.objects.get_or_create(  # this defines the encoding method\n            data_encoding=DataEncodings.LABEL_ENCODER.value,\n            value_encoding=ValueEncodings.SIMPLE_INDEX.value,\n            add_elapsed_time=False,\n            add_remaining_time=False,\n            add_executed_events=False,\n            add_resources_used=False,\n            add_new_traces=False,\n            prefix_length=5,\n            padding=True,\n            task_generation_type=TaskGenerationTypes.ALL_IN_ONE.value,\n            features=[]\n        )[0],\n        labelling=Labelling.objects.get_or_create(  # this defines the label\n            type=LabelTypes.ATTRIBUTE_STRING.value,\n            attribute_name='label',\n            threshold_type=None,\n            threshold=None\n        )[0],\n        clustering=Clustering.init(ClusteringMethods.NO_CLUSTER.value, configuration={}),\n        predictive_model=PredictiveModel.init(  # this defines the predictive model\n            get_prediction_method_config(\n                PredictiveModels.CLASSIFICATION.value,\n                ClassificationMethods.DECISION_TREE.value,\n                payload={\n                    'max_depth': 2,\n                    'min_samples_split': 2,\n                    'min_samples_leaf': 2\n                }\n            )\n        ),\n        hyperparameter_optimizer=HyperparameterOptimization.init({  # this defines the hyperparameter optimisation procedure\n            'type': HyperparameterOptimizationMethods.HYPEROPT.value,\n            'max_evaluations': 10,\n            'performance_metric': HyperOptAlgorithms.TPE.value,\n            'algorithm_type': HyperOptLosses.AUC.value\n        }),\n        create_models=True\n    )[0]\n\n    # load log\n    train_log, test_log, additional_columns = get_train_test_log(JOB.split)\n\n    # encode\n    train_df, test_df = encode_label_logs(train_log, test_log, JOB)\n\n    # train + evaluate\n    results, model_split = MODEL[JOB.predictive_model.predictive_model][ModelActions.BUILD_MODEL_AND_TEST.value](\n        train_df,\n        test_df,\n        _init_clusterer(JOB.clustering, train_df),\n        JOB\n    )\n\n    if JOB.create_models:\n        save_models(model_split, JOB)\n\n    # predict\n    data_df = pd.concat([train_df, test_df])\n    results = MODEL[JOB.predictive_model.predictive_model][ModelActions.PREDICT.value](JOB, data_df)\n    results = MODEL[JOB.predictive_model.predictive_model][ModelActions.PREDICT_PROBA.value](JOB, data_df)\n\n    # lime\n    exp = Explanation.objects.get_or_create(\n        type=ExplanationTypes.LIME.value,\n        split=JOB.split,  # this defines the analysed log, you can use a different one from the training one\n        predictive_model=JOB.predictive_model,\n        job=JOB\n    )[0]\n    error, result = explanation(exp.id, int(EXPLANATION_TARGET))\n\n"""
src/cache/__init__.py,0,b''
src/cache/apps.py,0,"b""from django.apps import AppConfig\n\n\nclass CacheConfig(AppConfig):\n    name = 'src.cache'\n"""
src/cache/cache.py,0,"b'import hashlib\nimport logging\nimport pickle\n\nfrom pandas import DataFrame\n\nfrom src.cache.models import LabelledLog, LoadedLog\nfrom src.jobs.models import Job\nfrom src.split.models import Split\n\nlogger = logging.getLogger(__name__)\n\n\ndef get_digested(candidate_path: str) -> str:\n    return hashlib.sha256(candidate_path.encode(\'utf-8\')).hexdigest()\n\n\ndef load_from_cache(path: str, prefix: str = \'\'):\n    if path is not None:  # TODO: what if the file is not there?\n        with open(prefix + get_digested(path) + \'.pickle\', \'rb\') as f:\n            return pickle.load(f)\n\n\ndef dump_to_cache(path: str, obj, prefix: str = \'\'):\n    if path is not None:\n        with open(prefix + get_digested(path) + \'.pickle\', ""wb"") as f:\n            pickle.dump(obj, f)\n\n\ndef put_loaded_logs(split: Split, train_df, test_df, additional_columns):\n    [dump_to_cache(path, data, \'cache/loaded_log_cache/\') for (path, data) in [\n        (split.train_log.name, train_df),\n        (split.test_log.name, test_df),\n        (split.additional_columns, additional_columns)\n    ]]\n    LoadedLog.objects.create(train_log_path=split.train_log.name,\n                             test_log_path=split.test_log.name,\n                             additional_columns_path=split.additional_columns,\n                             split=split)\n\n\ndef put_labelled_logs(job: Job, train_df, test_df):\n    train_df_path = ""encoding{}-label{}-splitTR{}"".format(job.encoding.id, job.labelling.id, job.split.train_log.name)\n    test_df_path = ""encoding{}-label{}-splitTE{}"".format(job.encoding.id, job.labelling.id, job.split.train_log.name)\n    [dump_to_cache(path, data, \'cache/labeled_log_cache/\') for (path, data) in [\n        (train_df_path, train_df),\n        (test_df_path, test_df)\n    ]]\n    LabelledLog.objects.create(split=job.split,\n                               encoding=job.encoding,\n                               labelling=job.labelling,\n                               train_log_path=train_df_path,\n                               test_log_path=test_df_path)\n\n\ndef get_loaded_logs(split: Split) -> (DataFrame, DataFrame, DataFrame):\n    logger.info(\'\\t\\tFound pre-loaded Dataset in cache, loading..\')\n    cache = LoadedLog.objects.filter(split=split)[0]\n    return (\n        load_from_cache(path=cache.train_log_path, prefix=\'cache/loaded_log_cache/\'),\n        load_from_cache(path=cache.test_log_path, prefix=\'cache/loaded_log_cache/\'),\n        load_from_cache(path=cache.additional_columns_path, prefix=\'cache/loaded_log_cache/\')\n    )\n\n\ndef get_labelled_logs(job: Job) -> (DataFrame, DataFrame):\n    logger.info(\'\\t\\tFound pre-labeled Dataset in cache, loading..\')\n    cache = LabelledLog.objects.filter(split=job.split,\n                                       encoding=job.encoding,\n                                       labelling=job.labelling)[0]\n    return (\n        load_from_cache(path=cache.train_log_path, prefix=\'cache/labeled_log_cache/\'),\n        load_from_cache(path=cache.test_log_path, prefix=\'cache/labeled_log_cache/\')\n    )\n'"
src/cache/models.py,0,"b""from django.db import models\n\nfrom src.clustering.models import Clustering\nfrom src.common.models import CommonModel\nfrom src.encoding.models import Encoding\nfrom src.labelling.models import Labelling\nfrom src.split.models import Split\n\n\nclass Cache(CommonModel):\n    pass\n\n\nclass LoadedLog(Cache):\n    train_log_path = models.FilePathField(path='cache/loaded_log_cache/')\n    test_log_path = models.FilePathField(path='cache/loaded_log_cache/')\n    additional_columns_path = models.FilePathField(path='cache/loaded_log_cache/', null=True, max_length=500)\n    split = models.ForeignKey(Split, on_delete=models.DO_NOTHING, null=True)\n\n\nclass LabelledLog(Cache):\n    train_log_path = models.FilePathField(path='cache/labeled_log_cache/')\n    test_log_path = models.FilePathField(path='cache/labeled_log_cache/')\n    split = models.ForeignKey(Split, on_delete=models.DO_NOTHING, null=True)\n    encoding = models.ForeignKey(Encoding, on_delete=models.DO_NOTHING, null=True)\n    labelling = models.ForeignKey(Labelling, on_delete=models.DO_NOTHING, null=True)\n"""
src/clustering/__init__.py,0,b''
src/clustering/apps.py,0,"b""from django.apps import AppConfig\n\n\nclass ClusteringConfig(AppConfig):\n    name = 'src.clustering'\n"""
src/clustering/clustering.py,1,"b'""""""\nclustering methods and functionalities\n""""""\n\nimport numpy as np\nfrom pandas import Series, DataFrame\nfrom sklearn.cluster import KMeans\nfrom sklearn.externals import joblib\n\nimport src\nfrom src.clustering.models import ClusteringMethods\nfrom src.jobs.models import Job\n\n\nclass Clustering:\n    """"""\n    clustering related tasks, stores both the clustered data and the models trained on each cluster\n    """"""\n\n    def __init__(self, clustering: src.clustering.models.Clustering):\n        """"""initializes the clustering class\n\n        by default the number of clusters is set to 1, meaning no clustering\n\n        :param job: job configuration\n\n        """"""\n        self.config = clustering.__getattribute__(\n            clustering.clustering_method.lower()\n        ).to_dict()\n        self._choose_clusterer(\n            clustering.__getattribute__(clustering.clustering_method.lower())\n        )\n        self.n_clusters = 1\n        self.labels = [0]\n\n    def fit(self, training_df: DataFrame) -> None:\n        """"""clusters the input DataFrame\n\n        :param training_df: training DataFrame\n\n        """"""\n        if hasattr(self.clusterer, \'fit\'):\n            self.clusterer.fit(training_df)\n            self.labels = self.clusterer.labels_\n            self.n_clusters = self.clusterer.n_clusters\n\n    def predict(self, test_df: DataFrame) -> Series:  # TODO: check type hint\n        """"""TODO: complete\n\n        :param test_df: testing DataFrame\n        :return: TODO: complete\n\n        """"""\n        if hasattr(self.clusterer, \'predict\'):\n            return self.clusterer.predict(\n                test_df.drop([col for col in [\'trace_id\', \'label\'] if col in test_df.columns], 1))\n        return Series([0] * len(test_df))\n\n    def cluster_data(self, input_df: DataFrame) -> dict:\n        """"""clusters the input DataFrame\n\n        :param input_df: input DataFrame\n        :return: dictionary containing the clustered data\n        """"""\n        return {\n            cluster: input_df.iloc[np.where(self.predict(input_df) == cluster)]\n            for cluster in range(self.n_clusters)\n        }\n\n    def _choose_clusterer(self, clustering: src.clustering.models.Clustering):\n        self.config.pop(\'clustering_method\', None)\n        if clustering.clustering_method == ClusteringMethods.KMEANS.value:\n            self.clusterer = KMeans(**self.config)\n        elif clustering.clustering_method == ClusteringMethods.NO_CLUSTER.value:\n            self.clusterer = None\n        else:\n            raise ValueError(""Unexpected clustering method {}"".format(clustering.clustering_method))\n\n    @classmethod\n    def load_model(cls, job: Job):\n        if job.clustering.clustering_method == ClusteringMethods.KMEANS.value:\n            clusterer = joblib.load(job.clustering.model_path)\n        elif job.clustering.clustering_method == ClusteringMethods.NO_CLUSTER.value:\n            clusterer = Clustering(job.clustering)\n        else:\n            raise ValueError(""Unexpected clustering method {}"".format(job.clustering.clustering_method))\n        return clusterer\n'"
src/clustering/methods_default_config.py,0,"b""def clustering_kmeans():\n    return {\n        'n_clusters': 3,\n        'init': 'k-means++',\n        'n_init': 10,\n        'max_iter': 300,\n        'tol': 1e-4,\n        'precompute_distances': 'auto',\n        'random_state': 1,  # use a fixed int to make the init deterministic\n        'copy_x': None,\n        'algorithm': 'full'\n    }\n"""
src/clustering/models.py,0,"b'from enum import Enum\n\nfrom django.db import models\nfrom model_utils.managers import InheritanceManager\n\nfrom src.common.models import CommonModel\n\n\nclass ClusteringMethods(Enum):\n    KMEANS = \'kmeans\'\n    NO_CLUSTER = \'noCluster\'\n\n\nCLUSTERING_METHOD_MAPPINGS = (\n    (ClusteringMethods.KMEANS.value, \'kmeans\'),\n    (ClusteringMethods.NO_CLUSTER.value, \'noCluster\')\n)\n\n\nclass Clustering(CommonModel):\n    """"""Container of Classification to be shown in frontend""""""\n    model_path = models.FilePathField(path=\'cache/model_cache/\')\n    clustering_method = models.CharField(choices=CLUSTERING_METHOD_MAPPINGS, max_length=20)\n    objects = InheritanceManager()\n\n    @staticmethod\n    def init(clustering: str = ClusteringMethods.NO_CLUSTER.value, configuration: dict = {}):\n        if clustering == ClusteringMethods.NO_CLUSTER.value:\n            return NoCluster.objects.get_or_create(\n                pk=1,\n                clustering_method=clustering\n            )[0]\n        elif clustering == ClusteringMethods.KMEANS.value:\n            from src.clustering.methods_default_config import clustering_kmeans  # TODO fixme\n            default_configuration = clustering_kmeans()\n            return KMeans.objects.get_or_create(\n                clustering_method=clustering,\n                n_clusters=configuration.get(\'n_clusters\', default_configuration[\'n_clusters\']),\n                init=configuration.get(\'init\', default_configuration[\'init\']),\n                n_init=configuration.get(\'n_init\', default_configuration[\'n_init\']),\n                max_iter=configuration.get(\'max_iter\', default_configuration[\'max_iter\']),\n                tol=configuration.get(\'tol\', default_configuration[\'tol\']),\n                precompute_distances=configuration.get(\'precompute_distances\',\n                                                       default_configuration[\'precompute_distances\']),\n                random_state=configuration.get(\'random_state\', default_configuration[\'random_state\']),\n                copy_x=configuration.get(\'copy_x\', default_configuration[\'copy_x\']),\n                algorithm=configuration.get(\'algorithm\', default_configuration[\'algorithm\'])\n            )[0]\n        else:\n            raise ValueError(\'configuration {} not recognized\'.format(clustering))\n\n    def to_dict(self):\n        return {\n            \'clustering_method\': self.clustering_method\n        }\n\n\nclass NoCluster(Clustering):\n    pass\n\n\nKMEANS_INIT_MAPPINGS = (\n    (\'k-means++\', \'k-means++\'),\n    (\'random\', \'random\')\n)\n\nKMEANS_PRECOMPUTE_DISTANCES_MAPPINGS = (\n    (True, \'True\'),\n    (False, \'False\'),\n    (\'auto\', \'auto\')\n)\n\nKMEANS_ALGORITHM_MAPPINGS = (\n    (\'auto\', \'auto\'),\n    (\'full\', \'full\'),\n    (\'elkan\', \'elkan\')\n)\n\n\nclass KMeans(Clustering):\n    n_clusters = models.PositiveIntegerField()\n    init = models.CharField(choices=KMEANS_INIT_MAPPINGS, default=\'k-means++\', max_length=max(len(el[1]) for el in KMEANS_INIT_MAPPINGS)+1)\n    n_init = models.PositiveIntegerField(blank=True, null=True)\n    max_iter = models.PositiveIntegerField(blank=True, null=True)\n    tol = models.FloatField(blank=True, null=True)\n    precompute_distances = models.CharField(choices=KMEANS_PRECOMPUTE_DISTANCES_MAPPINGS, default=\'auto\', max_length=max(len(el[1]) for el in KMEANS_PRECOMPUTE_DISTANCES_MAPPINGS)+1)\n    random_state = models.PositiveIntegerField(blank=True, null=True)\n    copy_x = models.BooleanField(blank=True, null=True)\n    algorithm = models.CharField(choices=KMEANS_ALGORITHM_MAPPINGS, default=\'auto\', max_length=max(len(el[1]) for el in KMEANS_ALGORITHM_MAPPINGS)+1)\n\n    def to_dict(self) -> dict:\n        return {\n            \'clustering_method\': ClusteringMethods.KMEANS.value,\n            \'n_clusters\': self.n_clusters,\n            \'init\': self.init,\n            \'n_init\': self.n_init,\n            \'max_iter\': self.max_iter,\n            \'tol\': self.tol,\n            \'precompute_distances\': self.precompute_distances,\n            \'random_state\': self.random_state,\n            \'copy_x\': self.copy_x,\n            \'algorithm\': self.algorithm\n        }\n'"
src/common/__init__.py,0,b''
src/common/apps.py,0,"b""from django.apps import AppConfig\n\n\nclass CommonConfig(AppConfig):\n    name = 'src.common'\n"""
src/common/models.py,0,"b""from django.db import models\n\n\nclass CommonModel(models.Model):\n    def to_dict(self) -> dict:\n        return {}\n\n    def get_full_dict(self):\n        if self.__class__.__name__ != 'CommonModel':  # TODO: improve on this\n            return {**super(self.__class__, self).to_dict(), **self.to_dict()}\n        return {}\n\n    def __str__(self):\n        full_dict = self.get_full_dict()\n        return '{' + ', '.join(['{key}: {value}'.format(key=key, value=full_dict.get(key)) for key in full_dict]) + '}'\n\n    class Meta:\n        abstract = True\n"""
src/core/__init__.py,0,b''
src/core/common.py,0,"b'""""""\ncommon methods used in the core package\n""""""\nfrom src.jobs.models import Job\nfrom src.predictive_model.classification.methods_default_config import classification_random_forest, classification_knn, \\\n    classification_decision_tree, classification_xgboost, classification_incremental_adaptive_tree, \\\n    classification_incremental_hoeffding_tree, classification_incremental_sgd_classifier, \\\n    classification_incremental_perceptron, classification_nn, _update_incremental_naive_bayes, \\\n    _update_incremental_adaptive_tree, _update_incremental_hoeffding_tree, classification_incremental_naive_bayes\nfrom src.predictive_model.classification.models import CLASSIFICATION_RANDOM_FOREST, CLASSIFICATION_KNN, \\\n    CLASSIFICATION_DECISION_TREE, CLASSIFICATION_XGBOOST, CLASSIFICATION_MULTINOMIAL_NAIVE_BAYES, \\\n    CLASSIFICATION_ADAPTIVE_TREE, CLASSIFICATION_HOEFFDING_TREE, CLASSIFICATION_SGDC, CLASSIFICATION_PERCEPTRON, \\\n    CLASSIFICATION_NN, UPDATE_INCREMENTAL_NAIVE_BAYES, UPDATE_INCREMENTAL_ADAPTIVE_TREE, \\\n    UPDATE_INCREMENTAL_HOEFFDING_TREE\nfrom src.predictive_model.models import PredictiveModel\nfrom src.predictive_model.regression.methods_default_config import regression_random_forest, regression_xgboost, \\\n    regression_lasso, regression_linear, regression_nn\nfrom src.predictive_model.regression.models import REGRESSION_RANDOM_FOREST, REGRESSION_XGBOOST, REGRESSION_LASSO, \\\n    REGRESSION_LINEAR, REGRESSION_NN\nfrom src.predictive_model.time_series_prediction.methods_default_config import time_series_prediction_rnn\nfrom src.predictive_model.time_series_prediction.models import TIME_SERIES_PREDICTION_RNN\n\n\ndef get_method_config(job: Job) -> (str, dict):\n    """"""returns the method configuration dictionary\n\n    :param job: job configuration\n    :return: method string and method configuration dict\n\n    """"""\n    method = PredictiveModel.objects.filter(pk=job.predictive_model.pk).select_subclasses()[0]\n    config = method.get_full_dict()  # pretty cash money method https://i.imgur.com/vKam04R.png\n    config.pop(\'model_path\')\n    config.pop(\'predictive_model\')\n    method = config[\'prediction_method\']\n    config.pop(\'prediction_method\')\n    return method, config\n\n\nALL_CONFIGS = [\n    CLASSIFICATION_RANDOM_FOREST,\n    CLASSIFICATION_KNN,\n    CLASSIFICATION_DECISION_TREE,\n    CLASSIFICATION_XGBOOST,\n    CLASSIFICATION_MULTINOMIAL_NAIVE_BAYES,\n    CLASSIFICATION_ADAPTIVE_TREE,\n    CLASSIFICATION_HOEFFDING_TREE,\n    CLASSIFICATION_SGDC,\n    CLASSIFICATION_PERCEPTRON,\n    CLASSIFICATION_NN,\n\n    REGRESSION_RANDOM_FOREST,\n    REGRESSION_LASSO,\n    REGRESSION_LINEAR,\n    REGRESSION_XGBOOST,\n    REGRESSION_NN,\n\n    TIME_SERIES_PREDICTION_RNN,\n\n    UPDATE_INCREMENTAL_NAIVE_BAYES,\n    UPDATE_INCREMENTAL_ADAPTIVE_TREE,\n    UPDATE_INCREMENTAL_HOEFFDING_TREE\n]\n\nCONF_MAP = {\n    CLASSIFICATION_RANDOM_FOREST: classification_random_forest,\n    CLASSIFICATION_KNN: classification_knn,\n    CLASSIFICATION_DECISION_TREE: classification_decision_tree,\n    CLASSIFICATION_XGBOOST: classification_xgboost,\n    CLASSIFICATION_MULTINOMIAL_NAIVE_BAYES: classification_incremental_naive_bayes,\n    CLASSIFICATION_ADAPTIVE_TREE: classification_incremental_adaptive_tree,\n    CLASSIFICATION_HOEFFDING_TREE: classification_incremental_hoeffding_tree,\n    CLASSIFICATION_SGDC: classification_incremental_sgd_classifier,\n    CLASSIFICATION_PERCEPTRON: classification_incremental_perceptron,\n    CLASSIFICATION_NN: classification_nn,\n\n    REGRESSION_RANDOM_FOREST: regression_random_forest,\n    REGRESSION_XGBOOST: regression_xgboost,\n    REGRESSION_LASSO: regression_lasso,\n    REGRESSION_LINEAR: regression_linear,\n    REGRESSION_NN: regression_nn,\n\n    TIME_SERIES_PREDICTION_RNN: time_series_prediction_rnn,\n\n    UPDATE_INCREMENTAL_NAIVE_BAYES: _update_incremental_naive_bayes,\n    UPDATE_INCREMENTAL_ADAPTIVE_TREE: _update_incremental_adaptive_tree,\n    UPDATE_INCREMENTAL_HOEFFDING_TREE: _update_incremental_hoeffding_tree\n}\n'"
src/core/core.py,0,"b'import json\nimport logging\nimport time\nimport pandas as pd\nfrom datetime import timedelta\nfrom enum import Enum\n\nfrom pandas import DataFrame\nfrom pm4py.objects.log.log import EventLog\nfrom sklearn.model_selection import train_test_split\n\nfrom src.cache.cache import get_labelled_logs, get_loaded_logs, \\\n    put_loaded_logs, put_labelled_logs\nfrom src.cache.models import LabelledLog, LoadedLog\nfrom src.clustering.clustering import Clustering\nfrom src.encoding.common import encode_label_logs, data_encoder_decoder\nfrom src.evaluation.models import Evaluation\nfrom src.jobs.models import JobTypes, Job\nfrom src.logs.log_service import create_log\nfrom src.predictive_model.classification import classification\nfrom src.predictive_model.models import PredictiveModels\nfrom src.predictive_model.regression import regression\nfrom src.predictive_model.time_series_prediction import time_series_prediction\nfrom src.split.models import SplitTypes, Split\nfrom src.split.splitting import get_train_test_log\nfrom src.utils.django_orm import duplicate_orm_row\nfrom src.utils.event_attributes import get_additional_columns\n\nlogger = logging.getLogger(__name__)\n\n\nclass ModelActions (Enum):\n    PREDICT = \'predict\'\n    PREDICT_PROBA = \'predict_proba\'\n    UPDATE_AND_TEST = \'update_and_test\'\n    BUILD_MODEL_AND_TEST = \'build_model_and_test\'\n\n\nMODEL = {\n    PredictiveModels.CLASSIFICATION.value: {\n        ModelActions.PREDICT.value: classification.predict,\n        ModelActions.PREDICT_PROBA.value: classification.predict_proba,\n        ModelActions.UPDATE_AND_TEST.value: classification.update_and_test,\n        ModelActions.BUILD_MODEL_AND_TEST.value: classification.classification\n    },\n    PredictiveModels.REGRESSION.value: {\n        ModelActions.PREDICT.value: regression.predict,\n        ModelActions.BUILD_MODEL_AND_TEST.value: regression.regression\n    },\n    PredictiveModels.TIME_SERIES_PREDICTION.value: {\n        ModelActions.PREDICT.value: time_series_prediction.predict,\n        ModelActions.BUILD_MODEL_AND_TEST.value: time_series_prediction.time_series_prediction\n    }\n}\n\n\ndef calculate(job: Job) -> (dict, dict): #TODO dd filter for \'valid\' configurations\n    """"""main entry point for calculations\n\n    encodes the logs based on the given configuration and runs the selected task\n    :param job: job configuration\n    :return: results and predictive_model split\n\n    """"""\n    logger.info(""Start job {} with {}"".format(job.type, get_run(job)))\n    training_df, test_df = get_encoded_logs(job)\n    results, model_split = run_by_type(training_df, test_df, job)\n    return results, model_split\n\n\ndef get_encoded_logs(job: Job, use_cache: bool = True) -> (DataFrame, DataFrame):\n    """"""returns the encoded logs\n\n    returns the training and test DataFrames encoded using the given job configuration, loading from cache if possible\n    :param job: job configuration\n    :param use_cache: load or not saved datasets from cache\n    :return: training and testing DataFrame\n\n    """"""\n    logger.info(\'\\tGetting Dataset\')\n\n    if use_cache and \\\n        (job.predictive_model is not None and\n         job.predictive_model.predictive_model != PredictiveModels.TIME_SERIES_PREDICTION.value):\n\n        if LabelledLog.objects.filter(split=job.split,\n                                      encoding=job.encoding,\n                                      labelling=job.labelling).exists():\n            try:\n                training_df, test_df = get_labelled_logs(job)\n            except FileNotFoundError: #cache invalidation\n                LabelledLog.objects.filter(split=job.split,\n                                           encoding=job.encoding,\n                                           labelling=job.labelling).delete()\n                logger.info(\'\\t\\tError pre-labeled cache invalidated!\')\n                return get_encoded_logs(job, use_cache)\n        else:\n            if job.split.train_log is not None and \\\n               job.split.test_log is not None and \\\n               LoadedLog.objects.filter(split=job.split).exists():\n                try:\n                    training_log, test_log, additional_columns = get_loaded_logs(job.split)\n                except FileNotFoundError:  # cache invalidation\n                    LoadedLog.objects.filter(split=job.split).delete()\n                    logger.info(\'\\t\\tError pre-loaded cache invalidated!\')\n                    return get_encoded_logs(job, use_cache)\n            else:\n                training_log, test_log, additional_columns = get_train_test_log(job.split)\n                if job.split.type == SplitTypes.SPLIT_SINGLE.value:\n                    search_for_already_existing_split = Split.objects.filter(\n                        type=SplitTypes.SPLIT_DOUBLE.value,\n                        original_log=job.split.original_log,\n                        test_size=job.split.test_size,\n                        splitting_method=job.split.splitting_method\n                    )\n                    if len(search_for_already_existing_split) >= 1:\n                        job.split = search_for_already_existing_split[0]\n                        job.split.save()\n                        job.save()\n                        return get_encoded_logs(job, use_cache=use_cache)\n                    else:\n                        job.split = duplicate_orm_row(Split.objects.filter(pk=job.split.pk)[0])\n                        job.split.type = SplitTypes.SPLIT_DOUBLE.value\n                        train_name = \'SPLITTED_\' + job.split.original_log.name.split(\'.\')[0] + \'_0-\' + str(int(100 - (job.split.test_size * 100)))\n                        job.split.train_log = create_log(\n                            EventLog(training_log),\n                            train_name + \'.xes\'\n                        )\n                        test_name = \'SPLITTED_\' + job.split.original_log.name.split(\'.\')[0] + \'_\' + str(int(100 - (job.split.test_size * 100))) + \'-100\'\n                        job.split.test_log = create_log(\n                            EventLog(test_log),\n                            test_name + \'.xes\'\n                        )\n                        job.split.additional_columns = str(train_name + test_name)  # TODO: find better naming policy\n                        job.split.save()\n\n                put_loaded_logs(job.split, training_log, test_log, additional_columns)\n\n            training_df, test_df = encode_label_logs(\n                training_log,\n                test_log,\n                job,\n                additional_columns=additional_columns)\n            put_labelled_logs(job, training_df, test_df)\n    else:\n        training_log, test_log, additional_columns = get_train_test_log(job.split)\n        training_df, test_df = encode_label_logs(training_log, test_log, job, additional_columns=additional_columns)\n    return training_df, test_df\n\n\ndef run_by_type(training_df: DataFrame, test_df: DataFrame, job: Job) -> (dict, dict):\n    """"""runs the specified training/evaluation run\n\n    :param training_df: training DataFrame\n    :param test_df: testing DataFrame\n    :param job: job configuration\n    :return: results and predictive_model split\n\n    """"""\n    model_split = None\n\n    start_time = time.time()\n    if job.type == JobTypes.PREDICTION.value:\n        clusterer = _init_clusterer(job.clustering, training_df)\n        results, model_split = MODEL[job.predictive_model.predictive_model][ModelActions.BUILD_MODEL_AND_TEST.value](training_df, test_df, clusterer, job)\n    elif job.type == JobTypes.LABELLING.value:\n        results = _label_task(training_df)\n    elif job.type == JobTypes.UPDATE.value:\n        results, model_split = MODEL[job.predictive_model.predictive_model][ModelActions.UPDATE_AND_TEST.value](training_df, test_df, job)\n    else:\n        raise ValueError(""Type {} not supported"".format(job.type))\n\n    # TODO: integrateme\n    if job.type != JobTypes.LABELLING.value:\n        results[\'elapsed_time\'] = timedelta(seconds=time.time() - start_time) #todo find better place for this\n        if job.predictive_model.predictive_model == PredictiveModels.REGRESSION.value:\n            job.evaluation = Evaluation.init(\n                job.predictive_model.predictive_model,\n                results\n            )\n        elif job.predictive_model.predictive_model == PredictiveModels.CLASSIFICATION.value:\n            job.evaluation = Evaluation.init(\n                job.predictive_model.predictive_model,\n                results,\n                len(set(test_df[\'label\'])) <= 2\n            )\n        elif job.predictive_model.predictive_model == PredictiveModels.TIME_SERIES_PREDICTION.value:\n            job.evaluation = Evaluation.init(\n                job.predictive_model.predictive_model,\n                results\n            )\n        job.evaluation.save()\n    elif job.type == JobTypes.LABELLING.value:\n        job.labelling.results = results\n        job.labelling.save()\n\n    # if job.type == PredictiveModels.CLASSIFICATION.value: #todo this is an old workaround I should remove this\n    #     save_result(results, job, start_time)\n\n    logger.info(""End job {}, {} ."".format(job.type, get_run(job)))\n    logger.info(""\\tResults {} ."".format(results))\n    return results, model_split\n\n\ndef _init_clusterer(clustering: Clustering, train_data: DataFrame):\n    clusterer = Clustering(clustering)\n    clusterer.fit(train_data.drop([\'trace_id\', \'label\'], 1))\n    return clusterer\n\n\ndef runtime_calculate(job: Job) -> dict:\n    """"""calculate the prediction for traces in the uncompleted logs\n\n    :param job: job idctionary\n    :return: runtime results\n    """"""\n\n    training_df, test_df = get_encoded_logs(job)\n    data_df = pd.concat([training_df,test_df])\n    results = MODEL[job.predictive_model.predictive_model][ModelActions.PREDICT.value](job, data_df)\n    logger.info(""End {} job {}, {} . Results {}"".format(\'runtime\', job.predictive_model.predictive_model, get_run(job), results))\n    return results\n\n\ndef replay_prediction_calculate(job: Job, log) -> (dict, dict):\n    """"""calculate the prediction for the log coming from replayers\n\n    :param job: job dictionary\n    :param log: log model\n    :return: runtime results\n    """"""\n    additional_columns = get_additional_columns(log)\n    data_df, _ = train_test_split(log, test_size=0, shuffle=False)\n    data_df, _ = encode_label_logs(data_df, EventLog(), job, additional_columns)\n    results = MODEL[job.predictive_model.predictive_model][ModelActions.PREDICT.value](job, data_df)\n    logger.info(""End {} job {}, {} . Results {}"".format(\'runtime\', job.predictive_model.predictive_model, get_run(job), results))\n    results_dict = dict(zip(data_df[\'trace_id\'], list(map(int, results))))\n    events_for_trace = dict()\n    data_encoder_decoder(job, data_df, EventLog())\n    return results_dict, events_for_trace\n\n\ndef get_run(job: Job) -> str:\n    """"""defines the job\'s identity\n\n    returns a string indicating the job configuration in an unique way\n\n    :param job: job configuration\n    :return: job\'s identity string\n    """"""\n    if job.labelling.type == JobTypes.LABELLING.value:\n        return job.encoding.data_encoding + \'_\' + job.labelling.type\n    return \'_\'.join([job.type, job.encoding.data_encoding, job.clustering.__class__.__name__, job.labelling.type])\n\n\ndef _label_task(input_dataframe: DataFrame) -> dict:\n    """"""calculates the distribution of labels in the data frame\n\n    :return: Dict of string and int {\'label1\': label1_count, \'label2\': label2_count}\n\n    """"""\n    # Stupid but it works\n    # True must be turned into \'true\'\n    json_value = input_dataframe.label.value_counts().to_json()\n    return json.loads(json_value)\n'"
src/encoding/__init__.py,0,b''
src/encoding/apps.py,0,"b""from django.apps import AppConfig\n\n\nclass EncodingConfig(AppConfig):\n    name = 'src.encoding'\n"""
src/encoding/boolean_frequency.py,1,"b'import numpy as np\nimport pandas as pd\nfrom pandas import DataFrame\nfrom pm4py.objects.log.log import Trace, EventLog\n\nfrom src.encoding.models import Encoding, TaskGenerationTypes, ValueEncodings\nfrom src.encoding.simple_index import compute_label_columns, add_labels, get_intercase_attributes\nfrom src.labelling.models import Labelling\n\n\ndef boolean(log: EventLog, event_names: list, label: Labelling, encoding: Encoding) -> DataFrame:\n    return _encode_boolean_frequency(log, event_names, label, encoding)\n\n\ndef frequency(log: EventLog, event_names: list, label: Labelling, encoding: Encoding) -> DataFrame:\n    return _encode_boolean_frequency(log, event_names, label, encoding)\n\n\ndef _encode_boolean_frequency(log: EventLog, event_names: list, labelling: Labelling,\n                              encoding: Encoding) -> DataFrame:\n    """"""Encodes the log by boolean or frequency\n\n    trace_id, event_nr, event_names, label stuff\n    :return pandas DataFrame\n    """"""\n    columns = _create_columns(event_names, encoding, labelling)\n    encoded_data = []\n\n    kwargs = get_intercase_attributes(log, encoding)\n    for trace in log:\n        if len(trace) <= encoding.prefix_length - 1 and not encoding.padding:\n            # trace too short and no zero padding\n            continue\n        if encoding.task_generation_type == TaskGenerationTypes.ALL_IN_ONE.value:\n            for i in range(1, min(encoding.prefix_length + 1, len(trace) + 1)):\n                encoded_data.append(\n                    _trace_to_row(trace, encoding, i, labelling, event_names=event_names,\n                                  atr_classifier=labelling.attribute_name,\n                                  **kwargs))\n        else:\n            encoded_data.append(\n                _trace_to_row(trace, encoding, encoding.prefix_length, labelling, event_names=event_names,\n                              atr_classifier=labelling.attribute_name, **kwargs))\n\n    return pd.DataFrame(columns=columns, data=encoded_data)\n\n\ndef _create_event_happened(event_names: list, encoding: Encoding) -> list:\n    """"""Creates list of event happened placeholders""""""\n    if encoding.value_encoding == ValueEncodings.BOOLEAN.value:\n        return [False] * len(event_names)\n    return [0] * len(event_names)\n\n\ndef _update_event_happened(event, event_names: list, event_happened: list, encoding: Encoding) -> None:\n    """"""Updates the event_happened list at event index\n\n    For boolean set happened to True.\n    For frequency updates happened count.\n    """"""\n    event_name = event[\'concept:name\']\n    if event_name in event_names:\n        event_index = event_names.index(event_name)\n        if encoding.value_encoding == ValueEncodings.BOOLEAN.value:\n            event_happened[event_index] = True\n        else:\n            event_happened[event_index] += 1\n\n\ndef _create_columns(event_names: list, encoding: Encoding, labelling: Labelling) -> list:\n    columns = [""trace_id""]\n    columns = list(np.append(columns, event_names).tolist())\n    return compute_label_columns(columns, encoding, labelling)\n\n\ndef _trace_to_row(trace: Trace, encoding: Encoding, event_index: int, labelling: Labelling = None, executed_events=None,\n                  resources_used=None, new_traces=None, event_names=None, atr_classifier=None):\n    # starts with all False, changes to event\n    event_happened = _create_event_happened(event_names, encoding)\n    trace_row = []\n    trace_name = trace.attributes[\'concept:name\']\n    trace_row.append(trace_name)\n    for index, event in enumerate(trace):\n        if index >= event_index:\n            pass\n        else:\n            _update_event_happened(event, event_names, event_happened, encoding)\n    trace_row += event_happened\n    trace_row += add_labels(encoding, labelling, event_index, trace, attribute_classifier=atr_classifier,\n                            executed_events=executed_events, resources_used=resources_used, new_traces=new_traces)\n    # if trace_row[-1] in event_names:\n    #     trace_row[-1] = event_names.index(trace_row[-1])\n    return trace_row\n'"
src/encoding/common.py,0,"b'import hashlib\nimport logging\n\nfrom pandas import DataFrame\nfrom pm4py.objects.log.log import EventLog\n\nfrom src.encoding.boolean_frequency import frequency, boolean\nfrom src.encoding.complex_last_payload import complex, last_payload\n# from src.encoding.declare.sequence import sequences\nfrom src.encoding.declare.declare import declare_encoding\nfrom src.encoding.encoder import Encoder\nfrom src.encoding.models import Encoding, ValueEncodings\nfrom src.jobs.models import JobTypes, Job\nfrom src.labelling.label_container import *\nfrom src.labelling.models import Labelling\nfrom src.predictive_model.models import PredictiveModels\nfrom src.split.splitting import get_train_test_log\nfrom src.utils.event_attributes import unique_events\nfrom .simple_index import simple_index\n\nlogger = logging.getLogger(__name__)\n\n\ndef encode_label_logs(training_log: EventLog, test_log: EventLog, job: Job, additional_columns=None, encode=True):\n    logger.info(\'\\tDataset not found in cache, building..\')\n    training_log, cols = _eventlog_to_dataframe(training_log, job.encoding, job.labelling, additional_columns=additional_columns, cols=None)\n    test_log, _ = _eventlog_to_dataframe(test_log, job.encoding, job.labelling, additional_columns=additional_columns, cols=cols)\n\n    labelling = job.labelling\n    if (labelling.threshold_type in [ThresholdTypes.THRESHOLD_MEAN.value, ThresholdTypes.THRESHOLD_CUSTOM.value]) and (\n        labelling.type in [LabelTypes.ATTRIBUTE_NUMBER.value, LabelTypes.DURATION.value,\n                           LabelTypes.REMAINING_TIME.value]):\n        if labelling.threshold_type == ThresholdTypes.THRESHOLD_MEAN.value:\n            threshold = training_log[\'label\'].astype(float).mean()\n\n        elif labelling.threshold_type == ThresholdTypes.THRESHOLD_CUSTOM.value:\n            threshold = float(labelling.threshold)\n        else:\n            threshold = -1\n        training_log[\'label\'] = training_log[\'label\'].astype(float) < threshold\n        test_log[\'label\'] = test_log[\'label\'].astype(float) < threshold\n    elif (labelling.threshold_type == ThresholdTypes.NONE.value) and (\n          labelling.type in [LabelTypes.ATTRIBUTE_NUMBER.value, LabelTypes.DURATION.value,\n                             LabelTypes.REMAINING_TIME.value]):\n        mask = training_log.applymap(type) != bool\n        d = {True: \'TRUE\', False: \'FALSE\'}\n\n        df = training_log.where(mask, training_log.replace(d))\n        training_log[\'label\'] = training_log[\'label\'].astype(float)\n        test_log[\'label\'] = test_log[\'label\'].astype(float)\n\n    if encode:\n        _data_encoder_encoder(job, training_log, test_log)\n\n    return training_log, test_log\n\n\ndef _eventlog_to_dataframe(log: EventLog, encoding: Encoding, labelling: Labelling, additional_columns=None, cols=None):\n    if encoding.prefix_length < 1:\n        raise ValueError(""Prefix length must be greater than 1"")\n    if encoding.value_encoding == ValueEncodings.SIMPLE_INDEX.value:\n        run_df = simple_index(log, labelling, encoding)\n    elif encoding.value_encoding == ValueEncodings.BOOLEAN.value:\n        if cols is None:\n            cols = unique_events(log)\n        run_df = boolean(log, cols, labelling, encoding)\n    elif encoding.value_encoding == ValueEncodings.FREQUENCY.value:\n        if cols is None:\n            cols = unique_events(log)\n        run_df = frequency(log, cols, labelling, encoding)\n    elif encoding.value_encoding == ValueEncodings.COMPLEX.value:\n        run_df = complex(log, labelling, encoding, additional_columns)\n    elif encoding.value_encoding == ValueEncodings.LAST_PAYLOAD.value:\n        run_df = last_payload(log, labelling, encoding, additional_columns)\n    # elif encoding.value_encoding == ValueEncodings.SEQUENCES.value: #TODO JONAS\n    #     run_df = sequences(log, labelling, encoding, additional_columns)\n    elif encoding.value_encoding == ValueEncodings.DECLARE.value:\n        run_df = declare_encoding(log, labelling, encoding, additional_columns, cols=cols)\n        if cols is None:\n            cols = list(run_df.columns)\n    else:\n        raise ValueError(""Unknown value encoding method {}"".format(encoding.value_encoding))\n    return run_df, cols\n\n\ndef _data_encoder_encoder(job: Job, training_log, test_log) -> Encoder:\n    if job.type != JobTypes.LABELLING.value and \\\n       job.encoding.value_encoding != ValueEncodings.BOOLEAN.value and \\\n       job.predictive_model.predictive_model != PredictiveModels.TIME_SERIES_PREDICTION.value:\n        if job.incremental_train is not None:\n            encoder = retrieve_proper_encoder(job.incremental_train)\n        else:\n            if job.predictive_model.predictive_model != PredictiveModels.TIME_SERIES_PREDICTION.value and \\\n               job.predictive_model.predictive_model != PredictiveModels.REGRESSION.value:\n                encoder = Encoder(training_log, job.encoding)\n            elif job.predictive_model.predictive_model == PredictiveModels.REGRESSION.value:\n                encoder = Encoder(training_log.drop(\'label\', axis=1), job.encoding)\n\n        encoder.encode(training_log, job.encoding)\n        encoder.encode(test_log, job.encoding)\n\n        return encoder\n\n\ndef data_encoder_decoder(job: Job, training_log, test_log) -> None:\n    encoder = retrieve_proper_encoder(job)\n    encoder.decode(training_log, job.encoding), encoder.decode(test_log, job.encoding)\n\n\ndef retrieve_proper_encoder(job: Job) -> Encoder:\n    if job.incremental_train is not None:\n        return retrieve_proper_encoder(job.incremental_train)\n    else:\n        training_log, test_log, additional_columns = get_train_test_log(job.split)\n        training_df, _ = encode_label_logs(training_log, test_log, job, additional_columns=additional_columns,\n                                           encode=False)\n    return Encoder(training_df, job.encoding)\n\n\ndef _label_boolean(df: DataFrame, label: LabelContainer) -> DataFrame:\n    """"""Label a numeric attribute as True or False based on threshold\n\n    This is essentially a Fast/Slow classification without string labels. By default use mean of label value True if 7\n    under threshold value\n    :param df:\n    :param label:\n    :return:\n    """"""\n    if df[\'label\'].dtype == bool:\n        return df\n    if label.threshold_type == ThresholdTypes.THRESHOLD_MEAN.value:\n        threshold = df[\'label\'].mean()\n    else:\n        threshold = float(label.threshold)\n    df[\'label\'] = df[\'label\'] < threshold\n    return df\n\n\ndef _categorical_encode(df: DataFrame) -> DataFrame:\n    """"""Encodes every column except trace_id and label as int\n\n    Encoders module puts event name in cell, which can\'t be used by machine learning methods directly.\n    """"""\n    for column in df.columns:\n        if column == \'trace_id\':\n            continue\n        elif df[column].dtype == type(str):\n            df[column] = df[column].map(lambda s: _convert(s))\n    return df\n\n\ndef _convert(s):\n    if isinstance(s, float) or isinstance(s, int):\n        return s\n    if s is None:\n        # Next activity resources\n        s = \'0\'\n    # TODO this potentially generates collisions and in general is a clever solution for another problem\n    # see https://stackoverflow.com/questions/16008670/how-to-hash-a-string-into-8-digits\n    return int(hashlib.sha256(s.encode(\'utf-8\')).hexdigest(), 16) % 10 ** 8\n'"
src/encoding/complex_last_payload.py,0,"b'from typing import Callable\n\nimport pandas as pd\nfrom pandas import DataFrame\nfrom pm4py.objects.log.log import Trace, EventLog\n\nfrom src.encoding.encoder import PREFIX_\nfrom src.encoding.models import Encoding, TaskGenerationTypes\nfrom src.encoding.simple_index import compute_label_columns, add_labels, get_intercase_attributes\nfrom src.labelling.models import Labelling\n\nATTRIBUTE_CLASSIFIER = None\n\n\ndef complex(log: EventLog, labelling: Labelling, encoding: Encoding, additional_columns: dict) -> DataFrame:\n    return _encode_complex_latest(log, labelling, encoding, additional_columns, _columns_complex, _data_complex)\n\n\ndef last_payload(log: EventLog, labelling: Labelling, encoding: Encoding, additional_columns: dict) -> DataFrame:\n    return _encode_complex_latest(log, labelling, encoding, additional_columns, _columns_last_payload,\n                                  _data_last_payload)\n\n\ndef _encode_complex_latest(log: EventLog, labelling: Labelling, encoding: Encoding, additional_columns: dict,\n                           column_fun: Callable, data_fun: Callable) -> DataFrame:\n    columns = column_fun(encoding.prefix_length, additional_columns)\n    normal_columns_number = len(columns)\n    columns = compute_label_columns(columns, encoding, labelling)\n    encoded_data = []\n\n    kwargs = get_intercase_attributes(log, encoding)\n    for trace in log:\n        if len(trace) <= encoding.prefix_length - 1 and not encoding.padding:\n            # trace too short and no zero padding\n            continue\n        if encoding.task_generation_type == TaskGenerationTypes.ALL_IN_ONE.value:\n            for i in range(1, min(encoding.prefix_length + 1, len(trace) + 1)):\n                encoded_data.append(\n                    _trace_to_row(trace, encoding, labelling, i, data_fun, normal_columns_number,\n                                  additional_columns=additional_columns,\n                                  atr_classifier=labelling.attribute_name, **kwargs))\n        else:\n            encoded_data.append(\n                _trace_to_row(trace, encoding, labelling, encoding.prefix_length, data_fun, normal_columns_number,\n                              additional_columns=additional_columns,\n                              atr_classifier=labelling.attribute_name, **kwargs))\n    return pd.DataFrame(columns=columns, data=encoded_data)\n\n\ndef _columns_complex(prefix_length: int, additional_columns: dict) -> list:\n    columns = [\'trace_id\']\n    columns += additional_columns[\'trace_attributes\']\n    for i in range(1, prefix_length + 1):\n        columns.append(PREFIX_ + str(i))\n        for additional_column in additional_columns[\'event_attributes\']:\n            columns.append(additional_column + ""_"" + str(i))\n    return columns\n\n\ndef _columns_last_payload(prefix_length: int, additional_columns: dict) -> list:\n    columns = [\'trace_id\']\n    i = 0\n    for i in range(1, prefix_length + 1):\n        columns.append(PREFIX_ + str(i))\n    for additional_column in additional_columns[\'event_attributes\']:\n        columns.append(additional_column + ""_"" + str(i))\n    return columns\n\n\ndef _data_complex(trace: Trace, prefix_length: int, additional_columns: dict) -> list:\n    """"""Creates list in form [1, value1, value2, 2, ...]\n\n    Appends values in additional_columns\n    """"""\n    data = [trace.attributes.get(att, 0) for att in additional_columns[\'trace_attributes\']]\n    for idx, event in enumerate(trace):\n        if idx == prefix_length:\n            break\n        event_name = event[""concept:name""]\n        data.append(event_name)\n\n        for att in additional_columns[\'event_attributes\']:\n            data.append(event.get(att, \'0\'))\n\n    return data\n\n\ndef _data_last_payload(trace: list, prefix_length: int, additional_columns: dict) -> list:\n    """"""Creates list in form [1, 2, value1, value2,]\n\n    Event name index of the position they are in event_names\n    Appends values in additional_columns\n    """"""\n    data = list()\n    for idx, event in enumerate(trace):\n        if idx == prefix_length:\n            break\n        event_name = event[\'concept:name\']\n        data.append(event_name)\n\n    # Attributes of last event\n    for att in additional_columns[\'event_attributes\']:\n        if prefix_length - 1 >= len(trace):\n            value = 0\n        else:\n            value = trace[prefix_length - 1][att]\n        data.append(value)\n    return data\n\n\ndef _trace_to_row(trace: Trace, encoding: Encoding, labelling: Labelling, event_index: int, data_fun: Callable,\n                  columns_len: int,\n                  atr_classifier=None, executed_events=None, resources_used=None, new_traces=None,\n                  additional_columns: dict = None) -> list:\n    trace_row = [trace.attributes[""concept:name""]]\n    # prefix_length - 1 == index\n    trace_row += data_fun(trace, event_index, additional_columns)\n    if encoding.padding or encoding.task_generation_type == TaskGenerationTypes.ALL_IN_ONE.value:\n        trace_row += [0 for _ in range(len(trace_row), columns_len)]\n    trace_row += add_labels(encoding, labelling, event_index, trace, attribute_classifier=atr_classifier,\n                            executed_events=executed_events, resources_used=resources_used, new_traces=new_traces)\n    return trace_row\n'"
src/encoding/encoder.py,1,"b""import numpy as np\nimport pandas as pd\nfrom pandas import DataFrame\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom src.encoding.models import Encoding, DataEncodings\n\nUP_TO = 'up_to'\nONLY_THIS = 'only'\nALL_IN_ONE = 'all_in_one'\n\n# padding\nZERO_PADDING = 'zero_padding'\nNO_PADDING = 'no_padding'\nPADDING_VALUE = 0\n\nPREFIX_ = 'prefix_'\n\n\nclass Encoder:\n    def __init__(self, df: DataFrame, encoding: Encoding):\n        self._encoder = {}\n        self._label_dict = {}\n        self._label_dict_decoder = {}\n        self._init_encoder(df, encoding)\n\n    def _init_encoder(self, df: DataFrame, encoding: Encoding):\n        for column in df:\n            if column != 'trace_id':\n                if df[column].dtype != int or (df[column].dtype == int and np.any(df[column] < 0)):\n                    if encoding.data_encoding == DataEncodings.LABEL_ENCODER.value:\n                        self._encoder[column] = LabelEncoder().fit(\n                            sorted(pd.concat([pd.Series([str(PADDING_VALUE)]), df[column].apply(lambda x: str(x))])))\n                        classes = self._encoder[column].classes_\n                        transforms = self._encoder[column].transform(classes)\n                        self._label_dict[column] = dict(zip(classes, transforms))\n                        self._label_dict_decoder[column] = dict(zip(transforms, classes))\n                    elif encoding.data_encoding == DataEncodings.ONE_HOT_ENCODER.value:\n                        raise NotImplementedError('Onehot encoder not yet implemented')\n                    else:\n                        raise ValueError('Please set the encoding technique!')\n\n    def encode(self, df: DataFrame, encoding: Encoding) -> None:\n        for column in df:\n            if column in self._encoder:\n                if encoding.data_encoding == DataEncodings.LABEL_ENCODER.value:\n                    df[column] = df[column].apply(lambda x: self._label_dict[column].get(str(x), PADDING_VALUE))\n                elif encoding.data_encoding == DataEncodings.ONE_HOT_ENCODER.value:\n                    raise NotImplementedError('Onehot encoder not yet implemented')\n                else:\n                    raise ValueError('Please set the encoding technique!')\n\n    def decode(self, df: DataFrame, encoding: Encoding) -> None:\n        for column in df:\n            if column in self._encoder:\n                if encoding.data_encoding == DataEncodings.LABEL_ENCODER.value:\n                    df[column] = df[column].apply(lambda x: self._label_dict_decoder[column].get(x, PADDING_VALUE))\n                elif encoding.data_encoding == DataEncodings.ONE_HOT_ENCODER.value:\n                    raise NotImplementedError('Onehot encoder not yet implemented')\n                else:\n                    raise ValueError('Please set the encoding technique!')\n"""
src/encoding/encoding_container.py,3,"b'from collections import namedtuple\n\nimport pandas as pd\nfrom pandas import DataFrame\nfrom sklearn.preprocessing import LabelEncoder\n\n# Generation types\nfrom src.encoding.models import ValueEncodings, DataEncodings\n\nUP_TO = \'up_to\'\nONLY_THIS = \'only\'\nALL_IN_ONE = \'all_in_one\'\n\n# padding\nZERO_PADDING = \'zero_padding\'\nNO_PADDING = \'no_padding\'\nPADDING_VALUE = 0\n\n# Encoding methods\n\nlabel_encoder = {}\nencoder = {}\nlabel_dict = {}\n\nENCODING = DataEncodings.LABEL_ENCODER\n\nPADDINGS = [ZERO_PADDING, NO_PADDING]\n\nTIME_SERIES_PREDICTION_PADDINGS = [ZERO_PADDING]\n\n\nclass EncodingContainer(namedtuple(\'EncodingContainer\', [\'method\', \'prefix_length\', \'padding\', \'generation_type\'])):\n    """"""Inner object describing encoding configuration.\n    """"""\n\n    def __new__(cls, method: str = ValueEncodings.SIMPLE_INDEX.value, prefix_length: int = 1,\n                padding: str = NO_PADDING,\n                generation_type: str = ONLY_THIS):\n        # noinspection PyArgumentList\n        return super(EncodingContainer, cls).__new__(cls, method, prefix_length, padding, generation_type)\n\n    def is_zero_padding(self) -> bool:\n        return self.padding == ZERO_PADDING\n\n    def is_all_in_one(self) -> bool:\n        return self.generation_type == ALL_IN_ONE\n\n    def is_boolean(self) -> bool:\n        return self.method == ValueEncodings.BOOLEAN.value\n\n    def is_complex(self) -> bool:\n        return self.method == ValueEncodings.COMPLEX.value\n\n    @staticmethod\n    def encode(df: DataFrame) -> None:\n        for column in df:\n            if column in encoder:\n                if ENCODING == DataEncodings.LABEL_ENCODER.value:\n                    df[column] = df[column].apply(lambda x: label_dict[column].get(x, PADDING_VALUE))\n                elif ENCODING == DataEncodings.ONE_HOT_ENCODER.value:\n                    raise NotImplementedError(\'Onehot encoder not yet implemented\')\n                    # values = np.array([ label_dict[column].get(x, label_dict[column][PADDING_VALUE]) for\n                    # x in df[column] ])\n                    # df[column] = np.array(encoder[column].transform(values.reshape(len(values), 1)).toarray())\n                else:\n                    raise ValueError(\'Please set the encoding technique!\')\n\n    @staticmethod\n    def init_label_encoder(df: DataFrame) -> None:\n        for column in df:\n            if column != \'trace_id\':\n                if df[column].dtype != int or (df[column].dtype == int and pd.np.any(df[column] < 0)):\n                    if ENCODING == DataEncodings.LABEL_ENCODER.value:\n                        encoder[column] = LabelEncoder().fit(\n                            sorted(pd.concat([pd.Series([str(PADDING_VALUE)]), df[column].apply(lambda x: str(x))])))\n                        classes = encoder[column].classes_\n                        transforms = encoder[column].transform(classes)\n                        label_dict[column] = dict(zip(classes, transforms))\n                    elif ENCODING == DataEncodings.ONE_HOT_ENCODER.value:\n                        raise NotImplementedError(\'Onehot encoder not yet implemented\')\n                        # label_encoder[column] = LabelEncoder().fit(df[column])\n                        # classes = label_encoder[column].classes_\n                        # transforms = label_encoder[column].transform(label_encoder[column].classes_)\n                        # label_dict[column] = dict(zip(classes, transforms))\n                        # label_dict[column][PADDING_VALUE] = -1\n                        # if min(transforms) < label_dict[column][PADDING_VALUE]:\n                        #     print(\'-1 is not a proper value as padding, switching to min-1\')\n                        #     label_dict[column][PADDING_VALUE] = min(transforms) - 1\n                        # encoder[column] = OneHotEncoder(handle_unknown=\'ignore\').fit(\n                        #     label_encoder[column].transform(df[column]).reshape(len(df[column]), 1))\n                    else:\n                        raise ValueError(\'Please set the encoding technique!\')\n'"
src/encoding/encoding_parser.py,13,"b'import bisect\nimport re\nfrom enum import Enum\nfrom typing import Dict, Callable\n\nimport numpy as np\nfrom keras.utils import to_categorical\nfrom numpy import ndarray\nfrom pandas import DataFrame\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom src.predictive_model.models import PredictiveModels\n\n\nclass DataEncoder:\n    """"""\n    support class for EncodingParser, tasked with actual parsing/one-hot encoding\n    """"""\n\n    class DataTypes(Enum):\n        """"""\n        possible data types for each column\n        """"""\n        CATEGORICAL = \'categorical\'\n        NUMERIC = \'numeric\'\n\n    _unknown_token = \'<unknown>\'\n\n    def __init__(self, task: PredictiveModels, is_targets_dataset: bool = False):\n        """"""initializes the DataEncoder\n\n        :param task: task type (class, reg, time_series_pred.)\n        :param is_targets_dataset: flag that indicates wether this DataEncoder is working with the targets dataset\n\n        """"""\n        self._data_encoders = {}\n        self._task = task\n        self._is_targets_dataset = is_targets_dataset\n        self._base_headers = None\n        self._numerical_headers = []\n        self._categorical_headers = []\n\n    def build_encoders(self, data: DataFrame) -> None:\n        """"""builds an encoder for each column\n\n        first the base headers are extracted (prefix_1 -> prefix, org:resources:Amount_1 -> org_resources:Amount) and\n        then a dictionary of LabelEncoders is built. Numerical data stores min and max instead of a LabelEncoder.\n\n        :param data: input dataframe\n\n        """"""\n        self._base_headers = self._extract_base_headers(data)\n\n        for base_header in self._base_headers:\n            relevant_data = self._get_relevant_columns(data, base_header)\n            data_type = self._get_data_type(relevant_data)\n\n            if data_type == DataEncoder.DataTypes.NUMERIC.value:\n                self._numerical_headers.append(base_header)\n\n                data_min = np.min(relevant_data.values.astype(np.float32))\n                data_max = np.max(relevant_data.values.astype(np.float32))\n\n                self._data_encoders[base_header] = {\'data_type\': data_type,\n                                                    \'label_encoder\': {\n                                                        \'min\': data_min,\n                                                        \'max\': data_max}}\n            else:\n                self._categorical_headers.append(base_header)\n\n                label_encoder = LabelEncoder()\n                label_encoder.fit(relevant_data.values.flatten().tolist())\n                if base_header != \'label\':\n                    label_encoder_classes = label_encoder.classes_.tolist()\n                    bisect.insort_left(label_encoder_classes, self._unknown_token)\n                    label_encoder.classes_ = label_encoder_classes\n                self._data_encoders[base_header] = {\'data_type\': data_type,\n                                                    \'label_encoder\': label_encoder}\n\n    def encode_data(self, data: DataFrame, train: bool = True) -> None:\n        """"""encodes the input data\n\n        actual data encoding, using the built encoders. For each column type the right encoding is done\n        (to class/normalization)\n\n        :param data: input dataframe\n        :param train: flag indicating whether the input is a train dataframe or a test one\n\n        """"""\n        for base_header in self._base_headers:\n            relevant_data = self._get_relevant_columns(data, base_header)\n            for column in relevant_data:\n                if self._data_encoders[base_header][\'data_type\'] == DataEncoder.DataTypes.NUMERIC.value:\n                    data_min = self._data_encoders[base_header][\'label_encoder\'][\'min\']\n                    data_max = self._data_encoders[base_header][\'label_encoder\'][\'max\']\n                    if data_min != data_max:\n                        data[column] = EncodingParser._normalize(data[column].values.astype(np.float32), data_min,\n                                                                 data_max)\n                    else:\n                        data[column] = data[column] * 0\n\n                    data[column] = np.clip(data[column], 0.0, 1.0)\n                else:\n                    label_encoder = self._data_encoders[base_header][\'label_encoder\']\n\n                    if not train:\n                        data[column] = data[column].map(\n                            lambda s: self._unknown_token if s not in label_encoder.classes_ else s)\n                    data[column] = label_encoder.transform(data[column].values.tolist())\n\n    def to_one_hot(self, data: DataFrame) -> ndarray:\n        """"""one hot encoding\n\n        transforms the encoded data into the one-hot representation\n\n        :param data: input dataframe\n        :return: one-hot encoded array\n\n        """"""\n        n_classes = self._get_highest_class_number()\n\n        if not self._is_targets_dataset:\n            n_classes += 1\n\n        dataset = np.zeros((data.shape[0], data.shape[1], n_classes))\n\n        for index, header in enumerate(data):\n            base_header = self._extract_base_header(header)\n            data_type = self._data_encoders[base_header][\'data_type\']\n            if data_type == DataEncoder.DataTypes.CATEGORICAL.value:\n                dataset[:, index, :] = to_categorical(data[header], n_classes)\n            elif data_type == DataEncoder.DataTypes.NUMERIC.value:\n                dataset[:, index, -1] = data[header]\n        return dataset\n\n    def _get_highest_class_number(self):\n        """"""returns the highest class number for the used dataframe\n\n        returns the highest class number from all the stored LabelEncoders\n\n        :return: highest class number\n\n        """"""\n        n_classes_max = 0\n\n        for header in self._categorical_headers:\n            header_max = len(self._data_encoders[header][\'label_encoder\'].classes_)\n            if header_max > n_classes_max:\n                n_classes_max = header_max\n\n        return n_classes_max\n\n    def get_n_classes_x(self):\n        """"""returns the number of training/test classes\n\n        returns the highest number of classes for the encoded dataframe, adding 1 if there are numerical values.\n        The structure is [one-hot encoding, normalized_value] for each variable, such that a categorical variable\n        becomes [0 0 0 1 0.0] where a numerical value becomes [0 0 0 0 0 0.263]\n\n        :return: number of training/test classes + 1 (for numerical values)\n\n        """"""\n        n_classes = self._get_highest_class_number()\n\n        if not self._is_targets_dataset:\n            n_classes += 1\n        return n_classes\n\n    def _get_data_type(self, data: DataFrame) -> str:\n        """"""returns the type for the input dataframe\n\n        tries to cast the dataframe to float, to decide wether the input contains a string or a number. Returns the\n        appropriate type\n\n        :param data: selected columns of the dataframe\n        :return: data type\n\n        """"""\n        if len(data.columns) == 1 and \'label\' in data:\n            if self._task == PredictiveModels.CLASSIFICATION.value:\n                return DataEncoder.DataTypes.CATEGORICAL.value\n\n            if self._task == PredictiveModels.REGRESSION.value:\n                return DataEncoder.DataTypes.NUMERIC.value\n\n        try:\n            data.values.astype(np.float32)\n            return DataEncoder.DataTypes.NUMERIC.value\n        except:\n            return DataEncoder.DataTypes.CATEGORICAL.value\n\n    def get_numerical_limits(self, header=\'label\'):\n        """"""returns the numerical limits for the input header\n\n        returns the min and max value from the stored LabelEncoders, using header as index\n\n        :param header: label associated with the data we want to extract min and max from\n        :return: min and max values associated with the column _header_\n\n        """"""\n        min_value = self._data_encoders[header][\'label_encoder\'][\'min\']\n        max_value = self._data_encoders[header][\'label_encoder\'][\'max\']\n        return min_value, max_value\n\n    @staticmethod\n    def _get_relevant_columns(data: DataFrame, header: str) -> DataFrame:\n        """"""returns the columns associated with the base header\n\n        filters the input dataframe in order to extract all the columns matching the regex ""header + (_[0-9]+)*""\n\n        :param data: input dataframe\n        :param header: base header to match\n        :return: matched columns\n\n        """"""\n        return data.filter(regex=header + \'(\\_[0-9]+)?$\')\n\n    @staticmethod\n    def _extract_base_headers(data: DataFrame) -> set:\n        """"""extract the base headers\n\n        extract the base headers from the headers of the input dataframe\n        (prefix_1, prefix_2, org:resource_2 -> [prefix, org:resource])\n\n        :param data: input dataframe\n        :return: base headers\n\n        """"""\n        headers = data.columns.tolist()\n        base_headers = set([DataEncoder._extract_base_header(header) for header in headers])\n        return base_headers\n\n    @staticmethod\n    def _extract_base_header(header: str) -> str:\n        """"""extracts the base header\n\n        applies a regex expression to remove trailing _[0-9]* values from the input header\n\n        :param header: header to extract base header from\n        :return: base header\n\n        """"""\n        return re.sub(r\'\\_[0-9]+$\', \'\', header)\n\n\nclass EncodingParser:\n    """"""\n    parses the encoded datasets into a suitable format for the keras models (0-1 float range, one-hot encodable classes\n    etc.), plus minor utils\n    """"""\n\n    def __init__(self, encoding: str, binary_target: bool, task: PredictiveModels):\n        """"""initializes the EncodingParser\n\n        :param encoding: encoding type\n        :param binary_target: if the target is True/False or categorical\n        :param task: the task type\n\n        """"""\n\n        self._encoding = encoding\n        self._task = task\n        self._binary_target = binary_target\n        self.n_events = 0\n        self.n_event_features = 1\n        self._x_min, self._x_max = -1, -1\n\n        self._training_data_encoder = DataEncoder(self._task)\n        self._target_data_encoder = DataEncoder(self._task, True)\n\n        self._training_parsing_functions: Dict[str, Callable] = {\n            \'simpleIndex\': self._parse_train_data_simple_index,\n            \'boolean\': self._parse_train_data_boolean,\n            \'frequency\': self._parse_train_data_frequency,\n            \'complex\': self._parse_train_data_complex,\n            \'lastPayload\': self._parse_train_data_simple_index,\n        }\n\n        self._testing_parsing_functions: Dict[str, Callable] = {\n            \'simpleIndex\': self._parse_test_data_simple_index,\n            \'boolean\': self._parse_test_data_boolean,\n            \'frequency\': self._parse_test_data_frequency,\n            \'complex\': self._parse_test_data_complex,\n            \'lastPayload\': self._parse_test_data_simple_index,\n        }\n\n    def parse_training_dataset(self, train_data: DataFrame) -> ndarray:\n        """"""parses the training dataset\n\n        encodes the training dataset based on the encoding given in the init method\n        :param train_data: input dataset\n        :return: parsed input dataset\n\n        """"""\n        if self._encoding in self._training_parsing_functions:\n            parsing_function = self._training_parsing_functions[self._encoding]\n            parsed_dataset = parsing_function(train_data)\n            return parsed_dataset\n        raise NotImplementedError(\'encoding method not parsable yet.\')\n\n    def parse_targets(self, targets: DataFrame) -> ndarray:\n        """"""parses the target dataset\n\n        encodes the target dataset based on the encoding given in the init method. Stores min and max value/classes\n        number based on the encoding\n        :param targets: input dataset\n        :return: parsed input dataset\n\n        """"""\n\n        self._target_data_encoder.build_encoders(targets)\n        self._target_data_encoder.encode_data(targets)\n\n        if self._task == PredictiveModels.CLASSIFICATION.value:\n            targets = self._target_data_encoder.to_one_hot(targets)\n            targets = np.squeeze(targets, 1)\n        else:\n            targets = targets.values\n        return targets\n\n    def parse_testing_dataset(self, test_data: DataFrame) -> ndarray:\n        """"""parses the test dataset\n\n        encodes the test dataset based on the encoding given in the init method\n        :param test_data: input dataset\n        :return: parsed input dataset\n\n        """"""\n        if self._encoding in self._testing_parsing_functions:\n            parsing_function = self._testing_parsing_functions[self._encoding]\n            return parsing_function(test_data)\n        raise NotImplementedError(\'encoding method not parsable yet.\')\n\n    def _parse_train_data_simple_index(self, train_data: DataFrame) -> ndarray:\n        """"""parses the train dataset encoded with simple_index encoding\n\n        in this case it just stores the total amount of classes in the dataset\n\n        :param train_data: input dataset\n        :return: parsed dataset\n\n        """"""\n\n        self._training_data_encoder.build_encoders(train_data)\n        self._training_data_encoder.encode_data(train_data)\n        train_data = self._training_data_encoder.to_one_hot(train_data)\n\n        if self._task == PredictiveModels.TIME_SERIES_PREDICTION.value:\n            train_data = np.expand_dims(train_data, -2)\n\n        return train_data\n\n    def _parse_train_data_complex(self, train_data: DataFrame) -> ndarray:\n        """"""parses the train dataset encoded with complex encoding\n\n        the parsing is similar to simple_index, but for time series prediction some reshaping and column dropping is\n        needed\n\n        :param train_data: input dataset\n        :return: parsed dataset\n\n        """"""\n\n        train_data = self._remove_trace_attributes(train_data)\n        self.n_events = self._extract_n_events(train_data)\n        self._training_data_encoder.build_encoders(train_data)\n        self._training_data_encoder.encode_data(train_data)\n\n        self.n_event_features = int(train_data.shape[-1] / self.n_events)\n        train_data = self._training_data_encoder.to_one_hot(train_data)\n\n        if self._task == PredictiveModels.TIME_SERIES_PREDICTION.value:\n            train_data = np.reshape(train_data, (train_data.shape[0], self.n_events, self.n_event_features, -1))\n\n        return train_data\n\n    def _parse_train_data_boolean(self, train_data: DataFrame) -> ndarray:\n        """"""parses the train dataset encoded with boolean encoding\n\n        casts each boolean to int, and stores the number of classes as the width of the dataset\n\n        :param train_data: input dataset\n        :return: parsed dataset\n\n        """"""\n\n        train_data = train_data.values\n        train_data = train_data.astype(int)\n        return train_data\n\n    def _parse_train_data_frequency(self, train_data: DataFrame) -> ndarray:\n        """"""parses the train dataset encoded with frequency encoding\n\n        stores min and max values, then normalizes all the values in the 0-1 range\n\n        :param train_data: input dataset\n        :return: parsed dataset\n\n        """"""\n\n        train_data = train_data.values\n        self._x_min, self._x_max = np.min(train_data), np.max(train_data)\n        train_data = self._normalize(train_data, self._x_min, self._x_max)\n        return train_data\n\n    def _parse_test_data_simple_index(self, test_data: DataFrame) -> ndarray:\n        """"""parses the test dataset encoded with simple_index encoding\n\n        clips the dataset in the 0, classes+1 range, to obtain out_of_vocabulary classes corresponding to classes + 1\n\n        :param test_data: input dataset\n        :return: parsed dataset\n\n        """"""\n\n        self._training_data_encoder.encode_data(test_data, train=False)\n        test_data = self._training_data_encoder.to_one_hot(test_data)\n\n        if self._task == PredictiveModels.TIME_SERIES_PREDICTION.value:\n            test_data = np.expand_dims(test_data, -2)\n        return test_data\n\n    def _parse_test_data_complex(self, test_data: DataFrame) -> ndarray:\n        """"""parses the test dataset encoded with complex encoding\n\n        same steps as simple_encoding parsing, but with the addition of reshaping and column dropping in the time\n        series prediction case\n\n        :param test_data: input dataset\n        :return: parsed dataset\n\n        """"""\n        test_data = self._remove_trace_attributes(test_data)\n\n        self._training_data_encoder.encode_data(test_data, train=False)\n        test_data = self._training_data_encoder.to_one_hot(test_data)\n\n        if self._task == PredictiveModels.TIME_SERIES_PREDICTION.value:\n            test_data = np.reshape(test_data, (test_data.shape[0], self.n_events, self.n_event_features, -1))\n        return test_data\n\n    @staticmethod\n    def _parse_test_data_boolean(test_data: DataFrame) -> ndarray:\n        """"""parses the test dataset encoded with boolean encoding\n\n        casts each boolean to int\n\n        :param test_data: input dataset\n        :return: parsed dataset\n\n        """"""\n        test_data = test_data.values\n        test_data = test_data.astype(int)\n        return test_data\n\n    def _parse_test_data_frequency(self, test_data: DataFrame) -> ndarray:\n        """"""parses the test dataset encoded with frequency encoding\n\n        normalizes the values using the stored min and max, then clips them in the 0-1 range\n\n        :param test_data: input dataset\n        :return: parsed dataset\n\n        """"""\n        test_data = test_data.values\n        test_data = self._normalize(test_data, self._x_min, self._x_max)\n        test_data = np.clip(test_data, 0, 1)\n        return test_data\n\n    def denormalize_predictions(self, predictions: ndarray) -> ndarray:\n        """"""denormalizes the predictive_model predictions\n\n        denormalizes the predictions using the stored y min and max\n\n        :param predictions: predictive_model predictions\n        :return: denormalized predictions\n\n        """"""\n        y_min, y_max = self._target_data_encoder.get_numerical_limits()\n        return (predictions * (y_max - y_min)) + y_min\n\n    @staticmethod\n    def _normalize(data: ndarray, data_min: float, data_max: float) -> ndarray:\n        """"""normalizes the input dataset\n\n        normalizes the dataset using the given data min and max\n\n        :type data: input dataset\n        :type data_min: minimum\n        :type data_max: maximum\n        :return: normalized dataset\n\n        """"""\n        return (data - data_min) / (data_max - data_min)\n\n    @staticmethod\n    def _remove_trace_attributes(data: DataFrame) -> DataFrame:\n        """"""removes the unnecessary traces attributes (used in the time series prediction case) using keyword matching\n\n        :param data: input dataframe\n        :return: dataframe with trace attributes removed\n\n        """"""\n        headers = data.columns.tolist()\n        # this is required in oder to remove the first n trace attributes trace attributes\n        # TODO: improve trace attribute removal\n        trace_attribute_last_index = headers.index(\'prefix_1\')\n        return data.iloc[:, trace_attribute_last_index:]\n\n    def get_n_classes_x(self):\n        return self._training_data_encoder.get_n_classes_x()\n\n    @staticmethod\n    def _extract_n_events(data: DataFrame) -> int:\n        """"""returns the number of events in a trace\n\n        simple regular expression returns the number in the last column header, indicating the last event number\n\n        :param data: input dataframe\n        :return: number of events\n\n        """"""\n        headers = data.columns.tolist()\n        return int(re.findall(\'\\d+\', headers[-1])[0])\n'"
src/encoding/models.py,0,"b""from enum import Enum\n\nfrom django.db import models\nfrom django.contrib.postgres.fields import JSONField\n\nfrom src.clustering.models import Clustering\nfrom src.common.models import CommonModel\nfrom src.labelling.models import Labelling\nfrom src.predictive_model.models import PredictiveModel\nfrom src.split.models import Split\n\n\nclass DataEncodings(Enum):\n    LABEL_ENCODER = 'label_encoder'\n    ONE_HOT_ENCODER = 'one_hot'\n\n\nclass ValueEncodings(Enum):\n    SIMPLE_INDEX = 'simpleIndex'\n    BOOLEAN = 'boolean'\n    FREQUENCY = 'frequency'\n    COMPLEX = 'complex'\n    LAST_PAYLOAD = 'lastPayload'\n    # SEQUENCES = 'sequences' #TODO JONAS\n    DECLARE = 'declare'\n\n\nclass TaskGenerationTypes(Enum):\n    UP_TO = 'up_to'\n    ONLY_THIS = 'only'\n    ALL_IN_ONE = 'all_in_one'\n\n\nDATA_ENCODING_MAPPINGS = (\n    (DataEncodings.LABEL_ENCODER.value, 'label_encoder'),\n    (DataEncodings.ONE_HOT_ENCODER.value, 'one_hot')\n)\n\nVALUE_ENCODING_MAPPINGS = (\n    (ValueEncodings.SIMPLE_INDEX.value, 'simpleIndex'),\n    (ValueEncodings.BOOLEAN.value, 'boolean'),\n    (ValueEncodings.FREQUENCY.value, 'frequency'),\n    (ValueEncodings.COMPLEX.value, 'complex'),\n    (ValueEncodings.LAST_PAYLOAD.value, 'lastPayload'),\n    # (ValueEncodings.SEQUENCES.value, 'sequences'), #TODO JONAS\n    (ValueEncodings.DECLARE.value, 'declare')\n)\n\nTASK_GENERATION_TYPE_MAPPINGS = (\n    (TaskGenerationTypes.UP_TO.value, 'up_to'),\n    (TaskGenerationTypes.ONLY_THIS.value, 'only_this'),\n    (TaskGenerationTypes.ALL_IN_ONE.value, 'all_in_one')\n)\n\n\nclass Encoding(CommonModel):\n    data_encoding = models.CharField(choices=DATA_ENCODING_MAPPINGS, default='label_encoder', max_length=max(len(el[1]) for el in DATA_ENCODING_MAPPINGS)+1)\n    value_encoding = models.CharField(choices=VALUE_ENCODING_MAPPINGS, default='simpleIndex', max_length=max(len(el[1]) for el in VALUE_ENCODING_MAPPINGS)+1)\n    add_elapsed_time = models.BooleanField(default=False)\n    add_remaining_time = models.BooleanField(default=False)\n    add_executed_events = models.BooleanField(default=False)\n    add_resources_used = models.BooleanField(default=False)\n    add_new_traces = models.BooleanField(default=False)\n    features = JSONField(default=dict)\n    prefix_length = models.PositiveIntegerField()\n    padding = models.BooleanField(default=False)\n    task_generation_type = models.CharField(choices=TASK_GENERATION_TYPE_MAPPINGS, default='only_this', max_length=max(len(el[1]) for el in TASK_GENERATION_TYPE_MAPPINGS)+1)\n\n    def to_dict(self) -> dict:\n        return {\n            'data_encoding': self.data_encoding,\n            'value_encoding': self.value_encoding,\n            'add_elapsed_time': self.add_elapsed_time,\n            'add_remaining_time': self.add_remaining_time,\n            'add_executed_events': self.add_executed_events,\n            'add_resources_used': self.add_resources_used,\n            'add_new_traces': self.add_new_traces,\n            'features': self.features,\n            'prefix_length': self.prefix_length,\n            'padding': self.padding,\n            'task_generation_type': self.task_generation_type\n        }\n"""
src/encoding/simple_index.py,0,"b'import pandas as pd\nfrom pandas import DataFrame\nfrom pm4py.objects.log.log import Trace, EventLog\n\nfrom src.encoding.encoder import PREFIX_\nfrom src.encoding.models import Encoding, TaskGenerationTypes\nfrom src.labelling.common import compute_label_columns, get_intercase_attributes, add_labels\nfrom src.labelling.models import Labelling\n\nATTRIBUTE_CLASSIFIER = None\n\n\ndef simple_index(log: EventLog, labelling: Labelling, encoding: Encoding) -> DataFrame:\n    columns = _compute_columns(encoding.prefix_length)\n    normal_columns_number = len(columns)\n    columns = compute_label_columns(columns, encoding, labelling)\n    encoded_data = []\n    kwargs = get_intercase_attributes(log, encoding)\n    for trace in log:\n        if len(trace) <= encoding.prefix_length - 1 and not encoding.padding:\n            # trace too short and no zero padding\n            continue\n        if encoding.task_generation_type == TaskGenerationTypes.ALL_IN_ONE.value:\n            for event_index in range(1, min(encoding.prefix_length + 1, len(trace) + 1)):\n                encoded_data.append(add_trace_row(trace, encoding, labelling, event_index, normal_columns_number,\n                                                  labelling.attribute_name, **kwargs))\n        else:\n            encoded_data.append(add_trace_row(trace, encoding, labelling, encoding.prefix_length, normal_columns_number,\n                                              labelling.attribute_name, **kwargs))\n\n    return pd.DataFrame(columns=columns, data=encoded_data)\n\n\ndef add_trace_row(trace: Trace, encoding: Encoding, labelling: Labelling, event_index: int, column_len: int,\n                  attribute_classifier=None, executed_events=None, resources_used=None, new_traces=None):\n    """"""Row in data frame""""""\n    trace_row = [trace.attributes[\'concept:name\']]\n    trace_row += _trace_prefixes(trace, event_index)\n    if encoding.padding or encoding.task_generation_type == TaskGenerationTypes.ALL_IN_ONE.value:\n        trace_row += [0 for _ in range(len(trace_row), column_len)]\n    trace_row += add_labels(encoding, labelling, event_index, trace, attribute_classifier=attribute_classifier,\n                            executed_events=executed_events, resources_used=resources_used, new_traces=new_traces)\n    return trace_row\n\n\ndef _trace_prefixes(trace: Trace, prefix_length: int) -> list:\n    """"""List of indexes of the position they are in event_names\n\n    """"""\n    prefixes = []\n    for idx, event in enumerate(trace):\n        if idx == prefix_length:\n            break\n        event_name = event[\'concept:name\']\n        prefixes.append(event_name)\n    return prefixes\n\n\ndef _compute_columns(prefix_length: int) -> list:\n    """"""trace_id, prefixes, any other columns, label\n\n    """"""\n    return [""trace_id""] + [PREFIX_ + str(i + 1) for i in range(0, prefix_length)]\n'"
src/evaluation/__init__.py,0,b''
src/evaluation/apps.py,0,"b""from django.apps import AppConfig\n\n\nclass EvaluationConfig(AppConfig):\n    name = 'src.evaluation'\n"""
src/evaluation/models.py,0,"b""from django.db import models\nfrom model_utils.managers import InheritanceManager\n\nfrom src.common.models import CommonModel\nfrom src.predictive_model.models import PredictiveModels\n\n\nclass Evaluation(CommonModel):\n    elapsed_time = models.DurationField()\n    objects = InheritanceManager()\n\n    @staticmethod\n    def init(prediction_type, results, binary=False):\n        if prediction_type == PredictiveModels.CLASSIFICATION.value:\n            if binary:\n                return BinaryClassificationMetrics.objects.get_or_create(\n                    elapsed_time=results['elapsed_time'] if results['elapsed_time'] != '--' else None,\n                    f1_score=results['f1score'] if results['f1score'] != '--' else None,\n                    auc=results['auc'] if results['auc'] != '--' else None,\n                    accuracy=results['acc'] if results['acc'] != '--' else None,\n                    precision=results['precision'] if results['precision'] != '--' else None,\n                    recall=results['recall'] if results['recall'] != '--' else None,\n                    true_positive=results['true_positive'] if results['true_positive'] != '--' else None,\n                    true_negative=results['true_negative'] if results['true_negative'] != '--' else None,\n                    false_negative=results['false_negative'] if results['false_negative'] != '--' else None,\n                    false_positive=results['false_positive'] if results['false_positive'] != '--' else None,\n                )[0]\n            else:\n                return MulticlassClassificationMetrics.objects.get_or_create(\n                    elapsed_time=results['elapsed_time'] if results['elapsed_time'] != '--' else None,\n                    f1_score=results['f1score'] if results['f1score'] != '--' else None,\n                    accuracy=results['acc'] if results['acc'] != '--' else None,\n                    precision=results['precision'] if results['precision'] != '--' else None,\n                    recall=results['recall'] if results['recall'] != '--' else None\n                )[0]\n        elif prediction_type == PredictiveModels.REGRESSION.value:\n            return RegressionMetrics.objects.get_or_create(\n                elapsed_time=results['elapsed_time'] if results['elapsed_time'] != '--' else None,\n                rmse=results['rmse'] if results['rmse'] != '--' else None,\n                rscore=results['rscore'] if results['rscore'] != '--' else None,\n                mae=results['mae'] if results['mae'] != '--' else None,\n                mape=results['mape'] if results['mape'] != '--' else None\n            )[0]\n        elif prediction_type == PredictiveModels.TIME_SERIES_PREDICTION.value:\n            return TimeSeriesPredictionMetrics.objects.get_or_create(\n                elapsed_time=results['elapsed_time'] if results['elapsed_time'] != '--' else None,\n                nlevenshtein=results['nlevenshtein'] if results['nlevenshtein'] != '--' else None\n            )[0]\n        else:\n            raise ValueError('evaluation model type {} not recognized'.format(prediction_type))\n\n    def to_dict(self) -> dict:\n        return {\n            'elapsed_time': self.elapsed_time\n        }\n\n\nclass ClassificationMetrics(Evaluation):\n    f1_score = models.FloatField(blank=True, null=True)\n    accuracy = models.FloatField(blank=True, null=True)\n    precision = models.FloatField(blank=True, null=True)\n    recall = models.FloatField(blank=True, null=True)\n    objects = InheritanceManager()\n\n    def to_dict(self) -> dict:\n        return {\n            'elapsed_time': self.elapsed_time,\n            'f1_score': self.f1_score,\n            'accuracy': self.accuracy,\n            'precision': self.precision,\n            'recall': self.recall\n        }\n\n\nclass BinaryClassificationMetrics(ClassificationMetrics):\n    true_positive = models.FloatField(blank=True, null=True)\n    true_negative = models.FloatField(blank=True, null=True)\n    false_negative = models.FloatField(blank=True, null=True)\n    false_positive = models.FloatField(blank=True, null=True)\n    auc = models.FloatField(blank=True, null=True)\n\n    def to_dict(self) -> dict:\n        return {\n            'true_positive': self.true_positive,\n            'true_negative': self.true_negative,\n            'false_negative': self.false_negative,\n            'false_positive': self.false_positive,\n            'auc': self.auc\n        }\n\n\nclass MulticlassClassificationMetrics(ClassificationMetrics):\n    pass\n\n\nclass RegressionMetrics(Evaluation):\n    rmse = models.FloatField(blank=True, null=True)\n    mae = models.FloatField(blank=True, null=True)\n    rscore = models.FloatField(blank=True, null=True)\n    mape = models.FloatField(blank=True, null=True)\n\n    def to_dict(self) -> dict:\n        return {\n            'rmse': self.rmse,\n            'mae': self.mae,\n            'mape': self.mape,\n            'rscore': self.rscore\n        }\n\n\nclass TimeSeriesPredictionMetrics(Evaluation):\n    nlevenshtein = models.FloatField(blank=True, null=True)\n\n    def to_dict(self) -> dict:\n        return {\n            'nlevenshtein': self.nlevenshtein\n        }\n"""
src/explanation/__init__.py,0,b''
src/explanation/anchor_wrapper.py,3,"b'import numpy as np\n\nfrom anchor import anchor_tabular\n\nfrom src.core.core import MODEL, ModelActions\nfrom src.explanation.models import Explanation\nfrom src.jobs.models import Job\n\n\ndef explain(anchor_exp: Explanation, training_df, test_df, explanation_target):\n    job = Job.objects.filter(pk=anchor_exp.job.id)[0]\n\n    explainer = anchor_tabular.AnchorTabularExplainer(\n        [True, False],  # dataset.class_names\n        job.encoding.features,  # = dataset.feature_names\n        training_df.drop([\'trace_id\'], 1),  # dataset.data\n        {\n            item: list(range(max(training_df[item])))\n            for item in job.encoding.features\n        }\n    )\n    explainer.fit(\n        training_df,  # dataset.train\n        [True, False],  # dataset.labels_train\n        test_df,  # dataset.validation\n        [True, False]  # dataset.labels_validation\n    )\n\n    # show plot\n    idx = 0\n    np.random.seed(1)\n    print(\'Prediction: \', explainer.class_names[\n        MODEL[job.predictive_model.predictive_model][ModelActions.PREDICT.value](job, test_df)[0]])\n    exp = explainer.explain_instance(test_df[idx],\n                                     MODEL[job.predictive_model.predictive_model][ModelActions.PREDICT.value],\n                                     threshold=0.95)\n    print(\'Anchor: %s\' % (\' AND \'.join(exp.names())))\n    print(\'Precision: %.2f\' % exp.precision())\n    print(\'Coverage: %.2f\' % exp.coverage())\n    """"""\n\tfit_anchor = np.where(np.all(dataset.test[:, exp.features()] == dataset.test[idx][exp.features()], axis=1))[0]\n\tprint(\'Anchor test coverage: %.2f\' % (fit_anchor.shape[0] / float(dataset.test.shape[0])))\n\tprint(\'Anchor test precision: %.2f\' % (\n\t\tnp.mean(predict_fn(dataset.test[fit_anchor]) == predict_fn(dataset.test[idx].reshape(1, -1))))\n\t\t  )\n\t""""""\n    return dict(exp.names(), exp.precision(), exp.coverage())\n'"
src/explanation/apps.py,0,"b""from django.apps import AppConfig\n\n\nclass ExplanationConfig(AppConfig):\n    name = 'src.explanation'\n"""
src/explanation/cm_feedback_wrapper.py,0,"b'import collections\n\nfrom pymining import seqmining, itemmining\n\nfrom src.encoding.common import retrieve_proper_encoder\nfrom src.encoding.encoder import PREFIX_\nfrom src.explanation.lime_wrapper import lime_temporal_stability\nfrom src.explanation.models import Explanation, ExplanationTypes\nfrom src.explanation.temporal_stability import temporal_stability\n\nfrom ansible.module_utils.parsing.convert_bool import boolean\n\n\ndef retrieve_temporal_stability(training_df, test_df, job_obj, split_obj):\n    ts_exp_job, _ = Explanation.objects.get_or_create(\n        type=ExplanationTypes.TEMPORAL_STABILITY.value,\n        split=split_obj,\n        predictive_model=job_obj.predictive_model,\n        job=job_obj\n    )\n    ts = temporal_stability(ts_exp_job, training_df, test_df, explanation_target=None)\n    ts = {\n        trace_id: {\n            element + \'1\' if element[-1:] == \'_\' else element: ts[trace_id][element]\n            for element in ts[trace_id]\n        }\n        for trace_id in ts\n    }\n    return ts\n\n\ndef retrieve_lime_ts(training_df, test_df, job_obj, split_obj):\n    limets_exp_job, _ = Explanation.objects.get_or_create(\n        type=ExplanationTypes.LIME.value,\n        split=split_obj,\n        predictive_model=job_obj.predictive_model,\n        job=job_obj\n    )\n    lime_ts = lime_temporal_stability(limets_exp_job, training_df, test_df, explanation_target=None)\n    lime_ts = {\n        trace_id: {\n            element + \'1\' if element[-1:] == \'_\' else element: lime_ts[trace_id][element]\n            for element in lime_ts[trace_id]\n        }\n        for trace_id in lime_ts\n    }\n    return lime_ts\n\n\ndef compute_confusion_matrix(ts, gold, job_obj):\n    encoder = retrieve_proper_encoder(job_obj)\n    encoder.decode(df=gold, encoding=job_obj.encoding)\n    trace_ids = set(gold[\'trace_id\'])\n    confusion_matrix = {\n        \'tp\': [\n            str(trace_id)\n            for trace_id in trace_ids\n            if (str(trace_id) in ts) and\n               (ts[str(trace_id)][PREFIX_ + str(len(ts[str(trace_id)]))][\'predicted\'] == \'true\') and\n               (ts[str(trace_id)][PREFIX_ + str(len(ts[str(trace_id)]))][\'predicted\'] ==\n                (\'true\' if boolean(gold[gold[\'trace_id\'] == trace_id][\'label\'].values[0]) else \'false\'))\n        ],\n        \'tn\': [\n            str(trace_id)\n            for trace_id in trace_ids\n            if (str(trace_id) in ts) and\n               (ts[str(trace_id)][PREFIX_ + str(len(ts[str(trace_id)]))][\'predicted\'] == \'false\') and\n               (ts[str(trace_id)][PREFIX_ + str(len(ts[str(trace_id)]))][\'predicted\'] ==\n                (\'true\' if boolean(gold[gold[\'trace_id\'] == trace_id][\'label\'].values[0]) else \'false\'))\n        ],\n        \'fp\': [\n            str(trace_id)\n            for trace_id in trace_ids\n            if (str(trace_id) in ts) and\n               (ts[str(trace_id)][PREFIX_ + str(len(ts[str(trace_id)]))][\'predicted\'] == \'true\') and\n               (ts[str(trace_id)][PREFIX_ + str(len(ts[str(trace_id)]))][\'predicted\'] !=\n                (\'true\' if boolean(gold[gold[\'trace_id\'] == trace_id][\'label\'].values[0]) else \'false\'))\n        ],\n        \'fn\': [\n            str(trace_id)\n            for trace_id in trace_ids\n            if (str(trace_id) in ts) and\n               (ts[str(trace_id)][PREFIX_ + str(len(ts[str(trace_id)]))][\'predicted\'] == \'false\') and\n               (ts[str(trace_id)][PREFIX_ + str(len(ts[str(trace_id)]))][\'predicted\'] !=\n                (\'true\' if boolean(gold[gold[\'trace_id\'] == trace_id][\'label\'].values[0]) else \'false\'))\n        ]\n    }\n    return confusion_matrix\n\n\ndef tassellate_numbers(element):  # todo: not futureproof\n    element = str(element)\n    return element.split(\'.\')[0][0] + \'0\' if \'.\' in element and len(element) <= 5 \\\n        else \\\n        element.split(\'.\')[0][0:4] if \'.\' in element and len(element) >= 10 \\\n            else \\\n            element\n\n\n# def retrieve_right_len(element, available_values):\n#     if \'_\' in element:\n#         return len(available_values[element.split(\'_\')[0]])\n#     else:\n#         retval = []\n#         for attribute in available_values:\n#             if any([str(element) == str(tassellate_numbers(value)) for value in available_values[attribute]]):\n#                 retval += [len(available_values[attribute])]\n#         return max(retval)\n\n\ndef weight_freq_seqs(KEY, element, limefeats, available_values):\n    return (\n               element[1]  # *\n               # len([el for el in element[0] if \'absence\' not in el]) *\n               # sum([retrieve_right_len(el, available_values[KEY]) for el in element[0] if \'absence\' not in el])\n    ) / len(limefeats[KEY])\n\n\ndef mine_patterns(data, MINING_METHOD, CONFUSION_MATRIX):\n    if (MINING_METHOD == \'seq_mining\'):\n        mined_patterns = {\n            KEY: sorted(seqmining.freq_seq_enum([data[KEY][trace_id] for trace_id in data[KEY]], min_support=2))\n            for KEY in CONFUSION_MATRIX\n        }\n    if (MINING_METHOD == \'item_mining\'):\n        mined_patterns_to_be_preprocessed = {\n            KEY: itemmining.relim(itemmining.get_relim_input([data[KEY][trace_id] for trace_id in data[KEY]]), min_support=2)\n            for KEY in CONFUSION_MATRIX\n        }\n\n        mined_patterns = {\n            KEY: [\n                (tuple(element), mined_patterns_to_be_preprocessed[KEY][element])\n                for element in mined_patterns_to_be_preprocessed[KEY]]\n            for KEY in CONFUSION_MATRIX\n        }\n    return mined_patterns\n\n\ndef filter_lime_features(limefeats, LIMEFEATS, CONFUSION_MATRIX):\n    filtered_limefeats = {\n        KEY: {\n            trace_id: [\n                event\n                for event in limefeats[KEY][trace_id]\n                if (\n                       (not LIMEFEATS[\'abs_lime\']) and\n                       ((KEY in [\'tp\', \'fp\'] and event[2] >= LIMEFEATS[KEY]) or\n                        (KEY in [\'tn\', \'fn\'] and event[2] <= -LIMEFEATS[KEY]))\n                   ) or (\n                       LIMEFEATS[\'abs_lime\'] and abs(event[2]) >= LIMEFEATS[KEY]\n                   )\n            ]\n            for trace_id in limefeats[KEY]\n        }\n        for KEY in CONFUSION_MATRIX\n    }\n\n    for KEY in CONFUSION_MATRIX:\n        for trace_id in list(filtered_limefeats[KEY]):\n            if len(filtered_limefeats[KEY][trace_id]) == 0:\n                del filtered_limefeats[KEY][trace_id]\n\n    return filtered_limefeats\n\n\ndef compute_attributes(CONFUSION_MATRIX, limefeats):\n\n    attributes_occurrences = {\n        KEY: collections.Counter([\n            tassellate_numbers(event[1])\n            for trace_id in limefeats[KEY]\n            for event in limefeats[KEY][trace_id]\n        ])\n        for KEY in CONFUSION_MATRIX\n    }\n\n    attributes = {}\n    for KEY in CONFUSION_MATRIX:\n        for trace_id in limefeats[KEY]:\n            for event in limefeats[KEY][trace_id]:\n                attribute_name = event[0]\n                if attribute_name not in attributes:\n                    attributes[attribute_name] = set()\n                attributes[attribute_name].add(event[1])\n\n    characterised_attributes_occurrences = {}\n    for KEY in CONFUSION_MATRIX:\n        characterised_attributes_occurrences[KEY] = {}\n        for attribute in attributes:\n            if attribute not in characterised_attributes_occurrences[KEY]:\n                characterised_attributes_occurrences[KEY][attribute] = dict()\n            for attr in attributes[attribute]:\n                characterised_attributes_occurrences[KEY][attribute][tassellate_numbers(attr)] = 0\n    for KEY in CONFUSION_MATRIX:\n        for occ in attributes_occurrences[KEY]:\n            for attr in characterised_attributes_occurrences[KEY]:\n                if occ in characterised_attributes_occurrences[KEY][attr]:\n                    characterised_attributes_occurrences[KEY][attr][occ] = attributes_occurrences[KEY][occ]\n        for attr in characterised_attributes_occurrences[KEY]:\n            characterised_attributes_occurrences[KEY][attr][\'Total\'] = sum([\n                characterised_attributes_occurrences[KEY][attr][element]\n                for element in characterised_attributes_occurrences[KEY][attr]\n            ])\n    return attributes, attributes_occurrences, characterised_attributes_occurrences\n\n\ndef compute_data(CONFUSION_MATRIX, limefeats, filtered_limefeats):\n    static_attr = [  # todo: find a way to compute auto-magically\n        #    \'Age\',\n        #    \'ClaimValue\',\n        #    \'CType\',\n        #    \'ClType\',\n        #    \'PClaims\',\n    ]\n    limefeats_static_dinamic = {}\n    for KEY in CONFUSION_MATRIX:\n        limefeats_static_dinamic[KEY] = {}\n        for trace_id in filtered_limefeats[KEY]:\n            limefeats_static_dinamic[KEY][trace_id] = {\n                \'static\': [],\n                \'dynamic\': [\n                    att\n                    for att in filtered_limefeats[KEY][trace_id]\n                    if not any([att[0].startswith(static_att) for static_att in static_attr])\n                ]\n            }\n            current_static_attributes = [\n                att\n                for att in filtered_limefeats[KEY][trace_id]\n                if any([att[0].startswith(static_att) for static_att in static_attr])\n            ]\n            for s_attr in static_attr:\n                curr_attributes = [\n                    att\n                    for att in current_static_attributes\n                    if att[0].startswith(s_attr)\n                ]\n                if len(curr_attributes) > 0:\n                    if KEY in [\'tp\', \'fp\']:\n                        limefeats_static_dinamic[KEY][trace_id][\'static\'] += [max(curr_attributes, key=lambda x: x[2])]\n                    elif KEY in [\'tn\', \'fn\']:\n                        limefeats_static_dinamic[KEY][trace_id][\'static\'] += [max(curr_attributes, key=lambda x: x[2])]\n                    else:\n                        print(\'Something bad happened\')\n\n    dynamic_data = {\n        KEY: {\n            trace_id: [\n                # (element[0].split(\'_\')[0] + \'_\' +  element[1])\n                (element[0] + \'_\' + element[1])\n                for element in sorted(\n                    [k for k in limefeats_static_dinamic[KEY][trace_id][\'dynamic\']],\n                    # key=lambda x: (x[0].split(\'_\')[1], x[0].split(\'_\')[0])\n                    key=lambda x: x[0]\n                )\n            ]\n            for trace_id in limefeats_static_dinamic[KEY]\n            if len(limefeats_static_dinamic[KEY][trace_id][\'dynamic\']) > 0\n        }\n        for KEY in CONFUSION_MATRIX\n    }\n\n    static_data = {\n        KEY: {\n            trace_id: [\n                (element[0].split(\'_\')[0] + \'_\' + tassellate_numbers(element[1]))\n                # (element[0] + \'_\' + tassellate_numbers(element[1]))\n                for element in sorted(\n                    [k for k in limefeats_static_dinamic[KEY][trace_id][\'static\']],\n                    key=lambda x: (x[0].split(\'_\')[1], x[0].split(\'_\')[0])\n                )\n            ]\n            for trace_id in limefeats_static_dinamic[KEY]\n            if len(limefeats_static_dinamic[KEY][trace_id][\'static\']) > 0\n        }\n        for KEY in CONFUSION_MATRIX\n    }\n\n    return {\n        KEY: {\n            trace_id: static_data[KEY].get(trace_id, []) + dynamic_data[KEY].get(trace_id, [])\n            for trace_id in limefeats[KEY]\n        }\n        for KEY in CONFUSION_MATRIX\n    }\n\n\ndef process_lime_features(lime_ts, confusion_matrix, CONFUSION_MATRIX, prefix_length):\n    return {\n        KEY: {\n            trace_id: [\n                element\n                for element in sorted([\n                        (\n                            pref,\n                            lime_ts[trace_id][PREFIX_ + str(prefix_length)][pref][\'value\'],\n                            lime_ts[trace_id][PREFIX_ + str(prefix_length)][pref][\'importance\']\n                        )\n                        for pref in lime_ts[trace_id][PREFIX_ + str(prefix_length)]\n                    ],\n                    key=lambda x: (x[2], x[1]),\n                    reverse=True if KEY in [\'tp\', \'fp\'] else False\n                    # reverse order of lime values if the prediction is negative\n                )\n            ]\n            for trace_id in confusion_matrix[KEY]\n            if PREFIX_ + str(prefix_length) in lime_ts[trace_id]\n        }\n        for KEY in CONFUSION_MATRIX\n    }\n\n\ndef explain(cffeedback_exp: Explanation, training_df, test_df, top_k):\n\n    LIMEFEATS = {\n        \'abs_lime\': False,\n        \'tp\': 0.2,\n        \'tn\': 0.2,\n        \'fp\': 0.2,\n        \'fn\': 0.2\n    }\n    FREQ_SEQS = {\n        \'tp\': 0.1,\n        \'tn\': 0.1,\n        \'fp\': 0.1,\n        \'fn\': 0.1\n    }\n\n    MINING_METHOD = \'item_mining\' # \'seq_mining\'\n\n    CONFUSION_MATRIX = [\'tp\', \'tn\', \'fp\', \'fn\']\n\n    job_obj = cffeedback_exp.job\n    split_obj = job_obj.split\n\n    # todo: retrieve confusion matrix\n    ts = retrieve_temporal_stability(training_df, test_df.copy(), job_obj, split_obj)\n    confusion_matrix = compute_confusion_matrix(ts, gold=test_df[[\'trace_id\', \'label\']], job_obj=job_obj)\n\n    lime_ts = retrieve_lime_ts(training_df, test_df.copy(), job_obj, split_obj)\n    limefeats = process_lime_features(lime_ts, confusion_matrix, CONFUSION_MATRIX, job_obj.encoding.prefix_length)\n    filtered_limefeats = filter_lime_features(limefeats, LIMEFEATS, CONFUSION_MATRIX)\n\n    #todo MAYBE I SHOULD RETURN ALSO THIS? (it is pretty fitted on the bpi and drift data)\n    # attributes, attributes_occurrences, characterised_attributes_occurrences = compute_attributes(CONFUSION_MATRIX, limefeats)\n\n    data = compute_data(CONFUSION_MATRIX, limefeats, filtered_limefeats)\n    frequent_patterns = mine_patterns(data, MINING_METHOD, CONFUSION_MATRIX)\n\n    available_values = {}\n    for KEY in CONFUSION_MATRIX:\n        available_values[KEY] = {}\n        for trace_id in limefeats[KEY]:\n            for event in limefeats[KEY][trace_id]:\n                if event[0].split(\'_\')[0] not in available_values[KEY]:\n                    available_values[KEY][event[0].split(\'_\')[0]] = set()\n                available_values[KEY][event[0].split(\'_\')[0]].add(event[1])\n\n    frequent_patterns_ordered = {\n        KEY: sorted([\n            [element[0], weight_freq_seqs(KEY, element, limefeats, available_values)]\n            for element in frequent_patterns[KEY]\n            if weight_freq_seqs(KEY, element, limefeats, available_values) >= FREQ_SEQS[KEY]\n        ], key=lambda x: x[1], reverse=True)\n        for KEY in CONFUSION_MATRIX\n    }\n\n    topK_frequent_patterns = {\n        KEY: frequent_patterns_ordered[KEY][0:top_k]\n        for KEY in CONFUSION_MATRIX\n    }\n\n    return {""confusion_matrix"": confusion_matrix, ""data"": data,\n            ""freq_seqs_after_filter"": frequent_patterns, ""filtered_freq_seqs_after_filter"": topK_frequent_patterns}\n'"
src/explanation/explanation.py,0,"b""from src.core.core import get_encoded_logs\nfrom src.explanation import lime_wrapper, shap_wrapper, anchor_wrapper, temporal_stability, \\\n    ice_wrapper, skater_wrapper, cm_feedback_wrapper, retrain_wrapper\nfrom src.explanation.models import Explanation, ExplanationTypes\n\nEXPLAIN = 'explain'\nTEMPORAL_STABILITY = 'temporal_stability'\n\nEXPLANATION = {\n    ExplanationTypes.LIME.value: {\n        'explain': lime_wrapper.explain,\n        'temporal_stability': lime_wrapper.lime_temporal_stability\n    },\n    ExplanationTypes.SHAP.value: {\n        'explain': shap_wrapper.explain\n    },\n    ExplanationTypes.ICE.value: {\n        'explain': ice_wrapper.explain\n    },\n    ExplanationTypes.SKATER.value: {\n        'explain': skater_wrapper.explain\n    },\n    ExplanationTypes.CMFEEDBACK.value: {\n        'explain': cm_feedback_wrapper.explain\n    },\n    ExplanationTypes.RETRAIN.value: {\n        'explain': retrain_wrapper.explain\n    },\n    ExplanationTypes.ANCHOR.value: {\n        'explain': anchor_wrapper.explain\n    },\n    ExplanationTypes.TEMPORAL_STABILITY.value:{\n        'temporal_stability': temporal_stability.temporal_stability\n    }\n}\n\n\ndef explanation(exp_id: int, explanation_target: str = None):\n    exp = Explanation.objects.filter(pk=exp_id)[0]\n    job = exp.job\n    # load data\n    training_df, test_df = get_encoded_logs(job)\n\n    result = EXPLANATION[exp.type][EXPLAIN](exp, training_df, test_df, explanation_target)\n\n    return 'False', result\n\n\ndef explanation_temporal_stability(exp_id: int, explanation_target: str = None):\n    exp = Explanation.objects.filter(pk=exp_id)[0]\n    job = exp.job\n    # load data\n    training_df, test_df = get_encoded_logs(job)\n\n    result = EXPLANATION[exp.type][TEMPORAL_STABILITY](exp, training_df, test_df, explanation_target)\n\n    return 'False', result\n\n"""
src/explanation/ice_wrapper.py,0,"b""from pdpbox import info_plots\nfrom pdpbox.utils import _get_grids\n\nfrom src.encoding.common import retrieve_proper_encoder\nfrom src.encoding.models import ValueEncodings\nfrom src.explanation.models import Explanation\n\n\ndef explain(ice_exp: Explanation, training_df, test_df, explanation_target):\n    job = ice_exp.job\n    training_df = training_df.drop(['trace_id'], 1)\n    if job.encoding.value_encoding == ValueEncodings.BOOLEAN.value:\n        training_df['label'] = training_df['label'].astype(bool).astype(int) + 1\n\n    feature_grids, percentile_info = _get_grids(\n        feature_values=training_df[explanation_target].values, num_grid_points=10, grid_type=None,\n        percentile_range='percentile', grid_range=None)\n    custom_grids = [x for x in range(int(feature_grids.min()), int(feature_grids.max() - 1))]\n\n    fig, axes, summary_df = info_plots.target_plot(\n        df = training_df,\n        feature = explanation_target,\n        feature_name = 'feature value',\n        cust_grid_points = custom_grids,\n        target = 'label',\n        show_percentile = False\n    )\n    lists = list(training_df[explanation_target].values)\n    indexs = [lists.index(x) for x in range(int(feature_grids.min()), int(feature_grids.max() - 1))]\n    encoder = retrieve_proper_encoder(job)\n    encoder.decode(training_df, job.encoding)\n    values = training_df[explanation_target].values\n    lst = []\n    if job.encoding.value_encoding != ValueEncodings.BOOLEAN.value:\n        for x in range(len(indexs) - 1):\n            lst.append({'value': values[indexs[x]],\n                        'label': summary_df['label'][x],\n                        'count': summary_df['count'][x],\n                        })\n    else:\n        for x in range(summary_df.shape[0]):\n            lst.append({'value': summary_df['display_column'][x],\n                        'label': summary_df['label'][x],\n                        'count': summary_df['count'][x],\n                        })\n    return lst\n"""
src/explanation/lime_wrapper.py,0,"b""import lime\nfrom sklearn.externals import joblib\n\nfrom src.encoding.common import retrieve_proper_encoder\nfrom src.encoding.models import ValueEncodings\nfrom src.explanation.models import Explanation\n\n\ndef _init_explainer(df, features, columns, mode):\n    return lime.lime_tabular.LimeTabularExplainer(\n        df,\n        feature_names=features,\n        categorical_features=[i for i in range(len(columns))],\n        verbose=True,\n        mode=mode,\n    )\n\n\ndef _get_explanation(explainer, explanation_target_vector, model, features):\n    return explainer.explain_instance(\n        explanation_target_vector,\n        # TODO probably the opposite would be way less computationally intesive\n        model[0].predict if explainer.mode == 'regression' else model[0].predict_proba,  # TODO if we have clustering this is using only first model\n        num_features=len(features)\n    )\n\ndef explain(lime_exp: Explanation, training_df, test_df, explanation_target=1):\n    model = joblib.load(lime_exp.predictive_model.model_path)\n    if len(model) > 1:\n        raise NotImplementedError('Models with cluster-based approach are not yet supported')\n\n    # get the actual explanation\n    features = list(training_df.drop(['trace_id', 'label'], 1).columns.values)\n    explainer = _init_explainer(\n        df=training_df.drop(['trace_id', 'label'], 1).as_matrix(),\n        features=features,\n        columns=list(training_df.drop(['trace_id', 'label'], 1).columns.values),\n        mode=getModeType(model[0])\n    )\n\n    explanation_target_vector = test_df[test_df['trace_id'] == explanation_target].drop(['trace_id', 'label'], 1).tail(\n        1).squeeze()\n    exp = _get_explanation(\n        explainer=explainer,\n        explanation_target_vector=explanation_target_vector,\n        model=model,\n        features=features\n    )\n\n    # show plot\n    # exp.show_in_notebook(show_table=True)\n    # exp.as_pyplot_figure().show()\n    # exp.save_to_file('/tmp/oi.html')\n\n    # alternative visualisation\n    # exp.as_map()\n\n    encoder = retrieve_proper_encoder(lime_exp.job)\n\n    exp_list = exp.as_list()\n\n    explanation_target_df = explanation_target_vector.to_frame().T\n    encoder.decode(df=explanation_target_df, encoding=lime_exp.job.encoding)\n\n    return {\n        e[0].split('=')[0]:\n            (str(explanation_target_df[e[0].split('=')[0]].values[0]), e[1])\n        for e in exp_list\n    }\n\n\ndef _multi_trace_lime_temporal_stability(lime_exp: Explanation, training_df, test_df):\n    model = joblib.load(lime_exp.predictive_model.model_path)\n    if len(model) > 1:\n        raise NotImplementedError('Models with cluster-based approach are not yet supported')\n\n    features = list(training_df.drop(['trace_id', 'label'], 1).columns.values)\n    explainer = _init_explainer(\n        df=training_df.drop(['trace_id', 'label'], 1).as_matrix(),\n        features=features,\n        columns=list(training_df.drop(['trace_id', 'label'], 1).columns.values),\n        mode=getModeType(model[0])\n    )\n\n    #TODO: FILTER TO BE REMOVED BEFORE DEPLOY\n    # test_df = test_df.head(100)\n\n    exp = {}\n    for trace_id in set(test_df['trace_id']):\n        df = test_df[test_df['trace_id'] == trace_id].drop(['trace_id', 'label'], 1)\n        # filterded_df = pd.DataFrame()\n        # try:\n        #     filterded_df = filterded_df.append(df.head(30).tail(1))\n        # except:\n        #     pass\n        # try:\n        #     filterded_df = filterded_df.append(df.head(60).tail(1))\n        # except:\n        #     pass\n        # try:\n        #     filterded_df = filterded_df.append(df.head(90).tail(1))\n        # except:\n        #     pass\n        #\n        # df = filterded_df\n        df = df.reset_index(drop=True)\n\n        if not any([feat.startswith('prefix_') for feat in features]) and len(df) == 1:\n            exp[trace_id] = {\n                'prefix_':\n                    _get_explanation(\n                        explainer,\n                        explanation_target_vector=row,\n                        model=model,\n                        features=features\n                    ).as_list()\n                for position, row in df.iterrows()\n            }\n        else:\n            exp[trace_id] = {\n                row.index[max([feat for feat in range(len(features)) if\n                               row.index[feat].startswith('prefix') and row[feat] != 0])]:\n                    _get_explanation(\n                        explainer,\n                        explanation_target_vector=row,\n                        model=model,\n                        features=features\n                    ).as_list()\n                for position, row in df.iterrows()\n            }\n\n        # exp[trace_id] = {\n        #     row.index[max([ feat for feat in range(len(features)) if row.index[feat].startswith('prefix') and row[feat] != 0 ])]:\n        #         _get_explanation(\n        #         explainer,\n        #         explanation_target_vector=row,\n        #         model=model,\n        #         features=features\n        #     ).as_list()\n        #     for position, row in df.iterrows()\n        # }\n\n    encoder = retrieve_proper_encoder(lime_exp.job)\n\n    encoder.decode(df=test_df, encoding=lime_exp.job.encoding)\n\n    if lime_exp.job.encoding.value_encoding == ValueEncodings.BOOLEAN.value:\n        for col in test_df:\n            test_df[col] = test_df[col].apply(lambda x: 'False' if x == '0' else x)\n\n    return {\n        trace_id: {\n            index: {\n                el[0].split('=')[0]: {\n                    'value': str(test_df[test_df['trace_id'] == trace_id].tail(1)[el[0].split('=')[0]].values[0]) if el[0].split('=')[1] != '0' else '',\n                    'importance': el[1]}\n                for el in exp[trace_id][index]\n            }\n            for index in exp[trace_id]\n        }\n        for trace_id in set(test_df['trace_id'])\n    }\n\n\ndef lime_temporal_stability(lime_exp: Explanation, training_df, test_df, explanation_target):\n    if explanation_target is None:\n        return _multi_trace_lime_temporal_stability(lime_exp, training_df, test_df)\n    else:\n        model = joblib.load(lime_exp.predictive_model.model_path)\n        if len(model) > 1:\n            raise NotImplementedError('Models with cluster-based approach are not yet supported')\n\n        features = list(training_df.drop(['trace_id', 'label'], 1).columns.values)\n        explainer = _init_explainer(\n            df=training_df.drop(['trace_id', 'label'], 1).as_matrix(),\n            features=features,\n            columns=list(training_df.drop(['trace_id', 'label'], 1).columns.values),\n            mode=getModeType(model[0])\n        )\n\n        explanation_target_df = test_df[test_df['trace_id'] == explanation_target].drop(['trace_id', 'label'], 1)\n\n        explanation_target_df = explanation_target_df.reset_index(drop=True)\n\n        exp = {\n            row.index[max([ feat for feat in range(len(features)) if row.index[feat].startswith('prefix') and row[feat] != 0 ])]: _get_explanation(\n                explainer,\n                explanation_target_vector=row,\n                model=model,\n                features=features\n            ).as_list()\n            for position, row in explanation_target_df.iterrows()\n        }\n\n        encoder = retrieve_proper_encoder(lime_exp.job)\n\n        encoder.decode(df=explanation_target_df, encoding=lime_exp.job.encoding)\n\n        return {\n            explanation_target: {\n                index: {el[0].split('=')[0]: {\n                    'value': explanation_target_df.tail(1)[el[0].split('=')[0]].values[0] if el[0].split('=')[\n                                                                                                 1] != '0' else '',\n                    'importance': el[1]}\n                    for el in exp[index]\n                }\n                for index in exp\n            }\n        }\n\n\ndef getModeType(model):\n    return 'regression' if model._estimator_type == 'regressor' else 'classification'\n"""
src/explanation/models.py,0,"b""from enum import Enum\n\nfrom django.contrib.postgres.fields import JSONField\nfrom django.db import models\n\nfrom src.common.models import CommonModel\nfrom src.jobs.models import Job\nfrom src.predictive_model.models import PredictiveModel\nfrom src.split.models import Split\n\n\nclass ExplanationTypes(Enum):\n    SHAP = 'shap'\n    LIME = 'lime'\n    TEMPORAL_STABILITY = 'temporal_stability'\n    ANCHOR = 'anchor'\n    ICE = 'ice'\n    SKATER = 'skater'\n    CMFEEDBACK = 'cffeedback'\n    RETRAIN = 'retrain'\n\n\nEXPLANATION_TYPE_MAPPINGS = (\n    (ExplanationTypes.SHAP.value, 'shap'),\n    (ExplanationTypes.LIME.value, 'lime'),\n    (ExplanationTypes.TEMPORAL_STABILITY.value, 'temporal_stability'),\n    (ExplanationTypes.ANCHOR.value, 'anchor'),\n    (ExplanationTypes.SKATER.value, 'skater'),\n    (ExplanationTypes.ICE.value, 'ice'),\n    (ExplanationTypes.CMFEEDBACK.value, 'cmfeedback'),\n    (ExplanationTypes.RETRAIN.value, 'retrain'),\n\n)\n\n\nclass Explanation(CommonModel):\n    type = models.CharField(choices=EXPLANATION_TYPE_MAPPINGS, default='lime',\n                            max_length=max(len(el[1]) for el in EXPLANATION_TYPE_MAPPINGS) + 1, null=True, blank=True)\n    split = models.ForeignKey(Split, on_delete=models.DO_NOTHING, null=True)\n    predictive_model = models.ForeignKey(PredictiveModel, on_delete=models.DO_NOTHING, null=True)\n    job = models.ForeignKey(Job, on_delete=models.DO_NOTHING, null=True, default=None)\n    results = JSONField(default=dict)\n\n    def to_dict(self):\n        return {\n            'type': self.type,\n            'split': self.split,\n            'predictive_model': self.predictive_model,\n            'results': self.results\n        }\n"""
src/explanation/retrain_wrapper.py,0,"b'import random\n\nfrom pandas import Series\n\nfrom src.cache.cache import put_labelled_logs\nfrom src.explanation.models import Explanation\nfrom src.jobs.tasks import prediction_task\nfrom src.logs.models import Log\nfrom src.runtime.tasks import create_prediction_job\nfrom src.utils.django_orm import duplicate_orm_row\n\n\ndef randomise_features(train_df, test_df, explanation_target):\n    TARGETS = explanation_target\n    for target in TARGETS:\n        if len(target) == 1:\n            target = target[0]\n            for df in [train_df, test_df]:\n                m_col = df[target[0]]\n                del df[target[0]]\n                target_values1 = list(set(m_col.values))\n                df[target[0]] = m_col.apply(\n                    lambda x:\n                    x\n                    if (x != target[1]) else\n                    random.choice(target_values1)\n                )\n        elif len(target) > 1:\n            for df in [train_df, test_df]:\n                m_col = df[[column for column, _ in target]]\n                possible_values = {}\n                for column, value in target:\n                    possible_values[column] = list(set(df[column]))\n                    del df[column]\n                df[[column for column, _ in target]] = m_col.apply(\n                    lambda x:\n                    x if any([x[column] != value for column, value in target])\n                    else Series({\n                        column: random.choice(possible_values[column])\n                        for column, value in target\n                    }),\n                    axis=1)\n        else:\n            raise Exception(\'target list with unexpected value\')\n    return train_df, test_df\n\n\ndef save_randomised_set(initial_split_obj):\n    # todo: save new dataset in memory and create split to use it\n    new_split = duplicate_orm_row(initial_split_obj)\n\n    # TODO future bug creates shadows,\n    train_log = Log.objects.get_or_create(\n        name=\'RETRAIN\' + new_split.train_log.name,\n        path=\'cache/log_cache/\' + \'RETRAIN\' + new_split.train_log.name,\n        properties={}\n    )[0]\n    test_log = Log.objects.get_or_create(\n        name=\'RETRAIN\' + new_split.test_log.name,\n        path=\'cache/log_cache/\' + \'RETRAIN\' + new_split.test_log.name,\n        properties={}\n    )[0]\n\n    new_split.train_log = train_log\n    new_split.test_log = test_log\n    new_split.additional_columns = None\n    new_split.save()\n    return new_split\n\n\ndef explain(retrain_exp: Explanation, training_df_old, test_df_old, explanation_target):\n    initial_job_obj = retrain_exp.job\n    # todo: return performances\n    inital_result = dict(initial_job_obj.evaluation.classificationmetrics.to_dict())  # TODO future bug\n\n    train_df,test_df = randomise_features(training_df_old.copy(), test_df_old.copy(), explanation_target)\n    assert not train_df.equals(training_df_old)\n    assert not test_df.equals(test_df_old)\n\n    new_split = save_randomised_set(initial_job_obj.split)\n\n    prediction_job = create_prediction_job(initial_job_obj, initial_job_obj.encoding.prefix_length)\n    prediction_job.split = new_split\n    prediction_job.split.save()\n    prediction_job.evaluation = None\n    prediction_job.save()\n    # assert prediction_job.split.id != initial_job_obj.split.id\n\n    put_labelled_logs(prediction_job, train_df, test_df)\n\n    # todo: build model\n    prediction_task(prediction_job.id, do_publish_result=False)\n    prediction_job.refresh_from_db()\n\n    # todo: return performances\n    return {""Initial result"": inital_result, ""Retrain result"": prediction_job.evaluation.classificationmetrics.to_dict()}\n'"
src/explanation/shap_wrapper.py,0,"b'import os\n\nimport pandas as pd\nimport shap\nfrom sklearn.externals import joblib\n\nfrom src.encoding.common import retrieve_proper_encoder\nfrom src.explanation.models import Explanation\nfrom src.utils.file_service import create_unique_name\n\n\ndef explain(shap_exp: Explanation, training_df, test_df, explanation_target):\n    job = shap_exp.job\n    model = joblib.load(job.predictive_model.model_path)\n    model = model[0]\n    shap.initjs()\n\n    explainer = shap.TreeExplainer(model)\n    merged_df = pd.concat([training_df, test_df])\n    shap_values = explainer.shap_values(merged_df.drop([\'trace_id\', \'label\'], 1))\n\n    encoder = retrieve_proper_encoder(job)\n    encoder.decode(merged_df, job.encoding)\n    encoder.decode(test_df, job.encoding)\n\n    explanation_target_int = merged_df[merged_df[\'trace_id\'] == explanation_target].index.item() + \\\n                             training_df.drop([\'trace_id\', \'label\'], 1).shape[0]\n\n    explanation_target_vector = test_df[test_df[\'trace_id\'] == explanation_target].drop([\'trace_id\', \'label\'], 1)\n    expected_value = explainer.expected_value[0] if len(explainer.expected_value) > 1 else explainer.expected_value\n    shap_value = shap_values[explanation_target_int, :] if hasattr(shap_values, ""size"") else shap_values[0][\n                                                                                             explanation_target_int, :]\n    name = create_unique_name(""temporal_shap.svg"")\n    shap.force_plot(expected_value, shap_value, explanation_target_vector,\n                    show=False, matplotlib=True).savefig(name)\n    f = open(name, ""r"")\n    response = f.read()\n    os.remove(name)\n    if os.path.isfile(name.split(\'.svg\')[0]):\n        os.remove(name.split(\'.svg\')[0])\n\n    return response\n'"
src/explanation/skater_wrapper.py,0,"b'import os\n\nfrom dtreeviz.trees import dtreeviz\nfrom skater.core.explanations import Interpretation\nfrom skater.model import InMemoryModel\nfrom sklearn.externals import joblib\n\nfrom src.explanation.models import Explanation\nfrom src.utils.file_service import create_unique_name\n\n\ndef explain(skater_exp: Explanation, training_df, test_df, explanation_target):\n    job = skater_exp.job\n    model = joblib.load(job.predictive_model.model_path)\n    model = model[0]\n\n    features = list(training_df.drop([\'trace_id\', \'label\'], 1).columns.values)\n    interpreter = Interpretation(training_df, feature_names=features)\n    X_train = training_df.drop([\'trace_id\', \'label\'], 1)\n    Y_train = training_df[\'label\'].values\n\n    model_inst = InMemoryModel(model.predict, examples=X_train, model_type=model._estimator_type, unique_values=[1, 2],\n                               feature_names=features, target_names=[\'label\'])\n    surrogate_explainer = interpreter.tree_surrogate(model_inst, seed=5)\n\n    surrogate_explainer.fit(X_train, Y_train, use_oracle=True, prune=\'post\', scorer_type=\'default\')\n    surrogate_explainer.class_names = features\n\n    viz = dtreeviz(surrogate_explainer.estimator_,\n                   X_train,\n                   Y_train,\n                   target_name=\'label\',\n                   feature_names=features,\n                   orientation=""TD"",\n                   class_names=list(surrogate_explainer.class_names),\n                   fancy=True,\n                   X=None,\n                   label_fontsize=12,\n                   ticks_fontsize=8,\n                   fontname=""Arial"")\n    name = create_unique_name(""skater_plot.svg"");\n    viz.save(name)\n    if os.path.getsize(name) > 15000000:\n        return \'The file size is too big\';\n    f = open(name, ""r"")\n    response = f.read()\n    os.remove(name)\n    if os.path.isfile(name.split(\'.svg\')[0]):\n        os.remove(name.split(\'.svg\')[0])\n\n    return response\n'"
src/explanation/temporal_stability.py,0,"b""from pandas import DataFrame\n\nfrom src.clustering.models import ClusteringMethods\nfrom src.core.core import MODEL, ModelActions\nfrom src.encoding.common import retrieve_proper_encoder\nfrom src.explanation.models import Explanation\nfrom src.predictive_model.models import PredictiveModels\n\n\ndef _multi_trace_temporal_stability(temporal_stability_exp: Explanation, training_df, test_df):\n    if temporal_stability_exp.job.clustering.clustering_method != ClusteringMethods.NO_CLUSTER.value:\n        raise NotImplementedError('Models with cluster-based approach are not yet supported')\n\n    test_df['predicted'] = MODEL[PredictiveModels.CLASSIFICATION.value][ModelActions.PREDICT.value](temporal_stability_exp.job, test_df)\n\n    encoder = retrieve_proper_encoder(temporal_stability_exp.job)\n\n    encoder.decode(df=test_df, encoding=temporal_stability_exp.job.encoding)\n\n    temp_df = DataFrame()\n    temp_df['label'] = test_df['predicted']\n    encoder.decode(df=temp_df, encoding=temporal_stability_exp.job.encoding)\n    test_df['predicted'] = temp_df['label']\n\n    exp_list = {}\n    for trace_id in set(test_df['trace_id']):\n        df = test_df[test_df['trace_id'] == trace_id].drop(['trace_id', 'label'], 1)\n        exp = list(df['predicted'])\n        last_row = df.tail(1)\n        exp_list_1 = [(feat, str(last_row[feat].values[0])) for feat in last_row if feat.startswith('prefix')]\n        exp_list[trace_id] = {\n            exp_list_1[index][0]: {'value': exp_list_1[index][1], 'predicted': exp[index] if len(exp) > index else exp[0]} #TODO: BAD WORKAROUND if len(exp) > index else exp[0]\n            for index in range(len(exp_list_1))\n        }\n\n        if len(exp_list[trace_id]) == 0 and len(exp_list_1) == 0 and last_row['predicted'] is not None:\n            exp_list[trace_id] = {'prefix_': {'value': 'prefix_', 'predicted': exp[0]}}\n\n    return exp_list\n\n\ndef temporal_stability(temporal_stability_exp: Explanation, training_df, test_df, explanation_target):\n    if temporal_stability_exp.job.clustering.clustering_method != ClusteringMethods.NO_CLUSTER.value:\n        raise NotImplementedError('Models with cluster-based approach are not yet supported')\n\n    if explanation_target is None:\n        return _multi_trace_temporal_stability(temporal_stability_exp, training_df, test_df)\n    else:\n        explanation_target_df = test_df[test_df['trace_id'] == explanation_target]\n        exp = MODEL[PredictiveModels.CLASSIFICATION.value][ModelActions.PREDICT.value](temporal_stability_exp.job, explanation_target_df)\n\n        encoder = retrieve_proper_encoder(temporal_stability_exp.job)\n\n        encoder.decode(df=explanation_target_df, encoding=temporal_stability_exp.job.encoding)\n\n        last_row = explanation_target_df.drop(['trace_id', 'label'], 1).tail(1)\n        exp_list_1 = [(feat, str(last_row[feat].values[0])) for feat in last_row]\n        exp = exp.tolist()\n        temp_df = DataFrame()\n        temp_df['label'] = exp\n        encoder.decode(df=temp_df, encoding=temporal_stability_exp.job.encoding)\n        exp = list(temp_df['label'])\n        return {\n            explanation_target: {\n                    exp_list_1[index][0]: {'value': exp_list_1[index][1], 'predicted': exp[index]}\n                    for index in range(len(exp))\n            }\n        }\n"""
src/explanation/urls.py,0,"b""from django.conf.urls import url\n\nfrom . import views\n\nurlpatterns = [\n    url(r'^temporal_stability/(?P<pk>[0-9]+)&(?P<explanation_target>[0-9_]+)', views.get_temporal_stability),\n    url(r'^temporal_stability/(?P<pk>[0-9]+)', views.get_temporal_stability),\n    url(r'^lime_temporal_stability/(?P<pk>[0-9]+)&(?P<explanation_target>[0-9_]+)', views.get_lime_temporal_stability),\n    url(r'^lime_temporal_stability/(?P<pk>[0-9_]+)', views.get_lime_temporal_stability),\n    url(r'^lime/(?P<pk>[0-9]+)&(?P<explanation_target>[0-9_]+)', views.get_lime),\n    url(r'^shap/(?P<pk>[0-9]+)&(?P<explanation_target>[0-9_]+)', views.get_shap),\n    url(r'^skater/(?P<pk>[0-9]+)', views.get_skater),\n    url(r'^ice/(?P<pk>[0-9]+)&(?P<explanation_target>[^/]+)', views.get_ice),\n    url(r'^cffeedback/(?P<pk>[0-9]+)&(?P<top_k>[0-9]+)', views.get_cffeedback),\n    url(r'^retrain/(?P<pk>[0-9]+)', views.get_retrain),\n\n    url(r'^anchor/(?P<pk>[0-9]+)', views.get_anchor),\n]\n"""
src/explanation/views.py,0,"b""from rest_framework import status\nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\n\nfrom src.explanation.explanation import explanation, explanation_temporal_stability\nfrom src.explanation.models import Explanation, ExplanationTypes\nfrom src.jobs.models import Job\n\n\n@api_view(['GET'])\ndef get_lime(request, pk, explanation_target):\n    job = Job.objects.filter(pk=pk)[0]\n    exp, _ = Explanation.objects.get_or_create(type=ExplanationTypes.LIME.value, split=job.split,\n                                               predictive_model=job.predictive_model, job=job)\n    exp.save()\n\n    error, result = explanation(exp.id, explanation_target)\n\n    if error == 'True':\n        return Response({'error': 'Explanation Target cannot be greater than ' + str(result)},\n                        status=status.HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE)\n    else:\n        return Response(result, status=200)\n\n\n@api_view(['GET'])\ndef get_lime_temporal_stability(request, pk, explanation_target=None):\n    job = Job.objects.filter(pk=pk)[0]\n    exp, _ = Explanation.objects.get_or_create(type=ExplanationTypes.LIME.value, split=job.split,\n                                               predictive_model=job.predictive_model, job=job)\n    exp.save()\n\n    error, result = explanation_temporal_stability(exp.id, explanation_target=explanation_target)\n\n    if error == 'True':\n        return Response({'error': 'Explanation Target cannot be greater than ' + str(result)},\n                        status=status.HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE)\n    else:\n        return Response(result, status=200)\n\n\n@api_view(['GET'])\ndef get_temporal_stability(request, pk, explanation_target=None):\n    job = Job.objects.filter(pk=pk)[0]\n    exp, _ = Explanation.objects.get_or_create(type=ExplanationTypes.TEMPORAL_STABILITY.value, split=job.split,\n                                               predictive_model=job.predictive_model, job=job)\n    exp.save()\n\n    error, result = explanation_temporal_stability(exp.id, explanation_target=explanation_target)\n\n    if error == 'True':\n        return Response({'error': 'Explanation Target cannot be greater than ' + str(result)},\n                        status=status.HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE)\n    else:\n        return Response(result, status=200)\n\n\n@api_view(['GET'])\ndef get_shap(request, pk, explanation_target):\n    job = Job.objects.filter(pk=pk)[0]\n    exp, _ = Explanation.objects.get_or_create(type=ExplanationTypes.SHAP.value, split=job.split,\n                                               predictive_model=job.predictive_model, job=job)\n    exp.save()\n    result = explanation(exp.id, explanation_target)\n    return Response(result, status=200)\n\n\n@api_view(['GET'])\ndef get_skater(request, pk):\n    job = Job.objects.filter(pk=pk)[0]\n    exp, _ = Explanation.objects.get_or_create(type=ExplanationTypes.SKATER.value, split=job.split,\n                                               predictive_model=job.predictive_model, job=job)\n    exp.save()\n    result = explanation(exp.id, explanation_target = None)\n    return Response(result, status=200)\n\n\n@api_view(['GET'])\ndef get_ice(request, pk, explanation_target):\n    job = Job.objects.filter(pk=pk)[0]\n    exp, _ = Explanation.objects.get_or_create(type=ExplanationTypes.ICE.value, split=job.split,\n                                               predictive_model=job.predictive_model, job=job)\n    exp.save()\n    result = explanation(exp.id, explanation_target)\n    return Response(result, status=200)\n\n\n@api_view(['GET'])\ndef get_cffeedback(request, pk, top_k):\n    job = Job.objects.filter(pk=pk)[0]\n    exp, _ = Explanation.objects.get_or_create(type=ExplanationTypes.CMFEEDBACK.value, split=job.split,\n                                               predictive_model=job.predictive_model, job=job)\n    exp.save()\n    result = explanation(exp.id, int(top_k))\n    return Response(result, status=200)\n\n\n@api_view(['POST'])\ndef get_retrain(request, pk):\n    job = Job.objects.filter(pk=pk)[0]\n    exp, _ = Explanation.objects.get_or_create(type=ExplanationTypes.RETRAIN.value, split=job.split,\n                                               predictive_model=job.predictive_model, job=job)\n    exp.save()\n    target = request.data\n    result = explanation(exp.id, target)\n    return Response(result, status=200)\n\n\n@api_view(['GET'])\ndef get_anchor(request, pk):\n    job = Job.objects.filter(pk=pk)[0]\n    exp, _ = Explanation.objects.get_or_create(type=ExplanationTypes.ANCHOR.value, split=job.split,\n                                               predictive_model=job.predictive_model, job=job)\n    exp.save()\n    result = explanation(exp.id, explanation_target=None)\n    return Response(result, status=200)\n"""
src/hyperparameter_optimization/__init__.py,0,b''
src/hyperparameter_optimization/apps.py,0,"b""from django.apps import AppConfig\n\n\nclass HyperparameterOptimizationConfig(AppConfig):\n    name = 'src.hyperparameter_optimization'\n"""
src/hyperparameter_optimization/hyperopt_spaces.py,7,"b'""""""\nhyperopt search spaces for each prediction method\n""""""\n\nimport numpy as np\nfrom hyperopt import hp\nfrom hyperopt.pyll.base import scope\n\nfrom src.jobs.models import Job\nfrom src.predictive_model.classification.models import CLASSIFICATION_RANDOM_FOREST, CLASSIFICATION_KNN, \\\n    CLASSIFICATION_XGBOOST, CLASSIFICATION_MULTINOMIAL_NAIVE_BAYES, CLASSIFICATION_DECISION_TREE, \\\n    CLASSIFICATION_ADAPTIVE_TREE, \\\n    CLASSIFICATION_HOEFFDING_TREE, CLASSIFICATION_SGDC, CLASSIFICATION_PERCEPTRON, CLASSIFICATION_NN\nfrom src.predictive_model.regression.models import REGRESSION_RANDOM_FOREST, REGRESSION_XGBOOST, REGRESSION_LASSO, \\\n    REGRESSION_LINEAR, REGRESSION_NN\nfrom src.predictive_model.time_series_prediction.models import TIME_SERIES_PREDICTION_RNN\n\n\ndef _get_space(job: Job) -> dict:\n    method_conf_name = ""{}.{}"".format(job.predictive_model.predictive_model, job.predictive_model.prediction_method)\n    return HYPEROPT_SPACE_MAP[method_conf_name]()\n\n\ndef _classification_random_forest() -> dict:\n    return {\n        \'n_estimators\': hp.choice(\'n_estimators\', np.arange(150, 1000, dtype=int)),\n        \'max_depth\': scope.int(hp.quniform(\'max_depth\', 4, 30, 1)),\n        \'max_features\': hp.choice(\'max_features\', [\'sqrt\', \'log2\', \'auto\', None])\n    }\n\n\ndef _classification_knn() -> dict:\n    return {\n        \'n_neighbors\': hp.choice(\'n_neighbors\', np.arange(1, 20, dtype=int)),\n        \'weights\': hp.choice(\'weights\', [\'uniform\', \'distance\']),\n    }\n\n\ndef _classification_decision_tree() -> dict:\n    return {\n        \'max_depth\': scope.int(hp.quniform(\'max_depth\', 4, 30, 1)),\n        \'min_samples_split\': hp.choice(\'min_samples_split\', np.arange(2, 10, dtype=int)),\n        \'min_samples_leaf\': hp.choice(\'min_samples_leaf\', np.arange(1, 10, dtype=int)),\n    }\n\n\ndef _classification_xgboost() -> dict:\n    return {\n        \'n_estimators\': hp.choice(\'n_estimators\', np.arange(150, 1000, dtype=int)),\n        \'max_depth\': scope.int(hp.quniform(\'max_depth\', 3, 30, 1)),\n    }\n\n\ndef _classification_incremental_naive_bayes() -> dict:\n    return {\n        \'alpha\': hp.uniform(\'alpha\', 0, 10),\n        \'fit_prior\': True\n    }\n\n\ndef _classification_incremental_adaptive_tree() -> dict:\n    return {\n        \'grace_period\': hp.uniform(\'grace_period\', 1, 5),\n        \'split_criterion\': hp.choice(\'split_criterion\', [\'gini\', \'info_gain\']),\n        \'split_confidence\': hp.uniform(\'split_confidence\', .0000005, .000001),\n        \'tie_threshold\': hp.uniform(\'tie_threshold\', .1, .6),\n        # \'binary_split\': hp.choice(\'binary_split\', [ True, False ]),\n        # \'stop_mem_management\': hp.choice(\'stop_mem_management\', [ True, False ]),\n        \'remove_poor_atts\': hp.choice(\'remove_poor_atts\', [True, False]),\n        # \'no_preprune\': hp.choice(\'no_preprune\', [ True, False ]),\n        \'leaf_prediction\': hp.choice(\'leaf_prediction\', [\'mc\', \'nb\', \'nba\']),\n        \'nb_threshold\': hp.uniform(\'nb_threshold\', 0.2, 0.6)\n    }\n\n\ndef _classification_incremental_hoeffding_tree() -> dict:\n    return {\n        \'grace_period\': hp.uniform(\'grace_period\', 3, 8),\n        \'split_criterion\': hp.choice(\'split_criterion\', [\'gini\', \'info_gain\']),\n        \'split_confidence\': hp.uniform(\'split_confidence\', .0000005, .0000009),\n        \'tie_threshold\': hp.uniform(\'tie_threshold\', .4, .8),\n        # \'binary_split\': hp.choice(\'binary_split\', [ True, False ]),\n        # \'stop_mem_management\': hp.choice(\'stop_mem_management\', [ True, False ]),\n        \'remove_poor_atts\': hp.choice(\'remove_poor_atts\', [True, False]),\n        # \'no_preprune\': hp.choice(\'no_preprune\', [ True, False ]),\n        \'leaf_prediction\': hp.choice(\'leaf_prediction\', [\'mc\', \'nb\', \'nba\']),\n        \'nb_threshold\': hp.uniform(\'nb_threshold\', 0.1, 0.5)\n    }\n\n\ndef _classification_incremental_sgd_classifier() -> dict:\n    return {\n        \'loss\': hp.choice(\'loss\', [\'hinge\', \'log\', \'modified_huber\', \'squared_hinge\', \'perceptron\', \'squared_loss\',\n                                   \'huber\', \'epsilon_insensitive\', \'squared_epsilon_insensitive\']),\n        \'penalty\': hp.choice(\'penalty\', [None, \'l1\', \'l2\', \'elasticnet\']),\n        \'alpha\': hp.uniform(\'alpha\', 0.0001, 0.5),\n        \'l1_ratio\': hp.uniform(\'l1_ratio\', 0.15, 1.0),\n        \'fit_intercept\': hp.choice(\'fit_intercept\', [True, False]),\n        \'tol\': hp.uniform(\'tol\', 1e-3, 0.5),\n        \'epsilon\': hp.uniform(\'epsilon\', 1e-3, 0.5),\n        \'learning_rate\': hp.choice(\'learning_rate\', [\'constant\', \'optimal\', \'invscaling\', \'adaptive\']),\n        \'eta0\': scope.int(hp.quniform(\'eta0\', 4, 30, 1)),\n        \'power_t\': hp.uniform(\'power_t\', 0.3, 0.7),\n        # \'early_stopping\': hp.choice(\'early_stopping\', [True, False]), #needs to be false with partial_fit\n        \'n_iter_no_change\': scope.int(hp.quniform(\'n_iter_no_change\', 5, 30, 5)),\n        \'validation_fraction\': 0.1,\n        \'average\': hp.choice(\'average\', [True, False])\n    }\n\n\ndef _classification_incremental_perceptron() -> dict:\n    return {\n        \'penalty\': hp.choice(\'penalty\', [None, \'l1\', \'l2\', \'elasticnet\']),\n        \'alpha\': hp.uniform(\'alpha\', 0.0001, 0.5),\n        \'fit_intercept\': hp.choice(\'fit_intercept\', [True, False]),\n        \'tol\': hp.uniform(\'tol\', 1e-3, 0.5),\n        \'shuffle\': hp.choice(\'shuffle\', [True, False]),\n        \'eta0\': scope.int(hp.quniform(\'eta0\', 4, 30, 1)),\n        # \'early_stopping\': hp.choice(\'early_stopping\', [True, False]), #needs to be false with partial_fit\n        \'validation_fraction\': 0.1,\n        \'n_iter_no_change\': scope.int(hp.quniform(\'n_iter_no_change\', 5, 30, 5))\n    }\n\n\ndef _classification_nn() -> dict:\n    return {\n        \'hidden_layers\': hp.quniform(\'hidden_layers\', 1, 10, 1),\n        \'hidden_units\': hp.quniform(\'hidden_units\', 1, 100, 1),\n        \'activation_function\': hp.choice(\'activation_function\', [\'sigmoid\', \'tanh\', \'relu\']),\n        \'epochs\': hp.quniform(\'epochs\', 1, 50, 1),\n        \'dropout_rate\': hp.uniform(\'dropout_rate\', 0, 1)\n    }\n\n\ndef _regression_random_forest() -> dict:\n    return {\n        \'n_estimators\': hp.choice(\'n_estimators\', np.arange(150, 1000, dtype=int)),\n        \'max_features\': hp.choice(\'max_features\', [\'sqrt\', \'log2\', \'auto\', None]),\n        \'max_depth\': scope.int(hp.quniform(\'max_depth\', 4, 30, 1)),\n    }\n\n\ndef _regression_lasso() -> dict:\n    return {\n        \'alpha\': hp.uniform(\'alpha\', 0.01, 2.0),\n        \'fit_intercept\': hp.choice(\'fit_intercept\', [True, False]),\n        \'normalize\': hp.choice(\'normalize\', [True, False])\n    }\n\n\ndef _regression_linear() -> dict:\n    return {\n        \'fit_intercept\': hp.choice(\'fit_intercept\', [True, False]),\n        \'normalize\': hp.choice(\'normalize\', [True, False])\n    }\n\n\ndef _regression_xgboost() -> dict:\n    return {\n        \'max_depth\': scope.int(hp.quniform(\'max_depth\', 3, 100, 1)),\n        \'n_estimators\': hp.choice(\'n_estimators\', np.arange(150, 1000, dtype=int)),\n    }\n\n\ndef _regression_nn() -> dict:\n    return {\n        \'hidden_layers\': hp.quniform(\'hidden_layers\', 1, 10, 1),\n        \'hidden_units\': hp.quniform(\'hidden_units\', 1, 100, 1),\n        \'activation_function\': hp.choice(\'activation_function\', [\'sigmoid\', \'tanh\', \'relu\']),\n        \'epochs\': hp.quniform(\'epochs\', 1, 50, 1),\n        \'dropout_rate\': hp.uniform(\'dropout_rate\', 0, 1)\n    }\n\n\ndef _time_series_prediction_rnn() -> dict:\n    raise NotImplementedError\n\n\nHYPEROPT_SPACE_MAP = {\n    CLASSIFICATION_RANDOM_FOREST: _classification_random_forest,\n    CLASSIFICATION_KNN: _classification_knn,\n    CLASSIFICATION_XGBOOST: _classification_xgboost,\n    CLASSIFICATION_DECISION_TREE: _classification_decision_tree,\n    CLASSIFICATION_MULTINOMIAL_NAIVE_BAYES: _classification_incremental_naive_bayes,\n    CLASSIFICATION_ADAPTIVE_TREE: _classification_incremental_adaptive_tree,\n    CLASSIFICATION_HOEFFDING_TREE: _classification_incremental_hoeffding_tree,\n    CLASSIFICATION_SGDC: _classification_incremental_sgd_classifier,\n    CLASSIFICATION_PERCEPTRON: _classification_incremental_perceptron,\n    CLASSIFICATION_NN: _classification_nn,\n\n    REGRESSION_RANDOM_FOREST: _regression_random_forest,\n    REGRESSION_XGBOOST: _regression_xgboost,\n    REGRESSION_LASSO: _regression_lasso,\n    REGRESSION_LINEAR: _regression_linear,\n    REGRESSION_NN: _regression_nn,\n\n    TIME_SERIES_PREDICTION_RNN: _time_series_prediction_rnn\n}\n'"
src/hyperparameter_optimization/hyperopt_wrapper.py,0,"b'""""""\nhyperopt methods and functionalities\n""""""\nimport logging\nimport time\nfrom datetime import timedelta\n\nimport hyperopt\nfrom hyperopt import Trials, STATUS_OK, fmin, STATUS_FAIL\n\nfrom src.core.core import get_encoded_logs, get_run, run_by_type\nfrom src.evaluation.models import Evaluation\nfrom src.hyperparameter_optimization.hyperopt_spaces import _get_space\nfrom src.hyperparameter_optimization.models import HyperOptAlgorithms, HyperOptLosses\nfrom src.jobs.models import Job\nfrom src.predictive_model.classification.classification import _test, _check_is_binary_classifier, _prepare_results\nfrom src.predictive_model.models import PredictiveModel\nfrom src.utils.django_orm import duplicate_orm_row\n\nlogger = logging.getLogger(__name__)\n\ntrial_number = 0\n\nholdout = False #TODO evaluate on validation set\n\n\ndef calculate_hyperopt(job: Job) -> (dict, dict, dict):\n    """"""main entry method for hyperopt calculations\n    returns the predictive_model for the best trial\n\n    :param job: job configuration\n    :return: tuple containing the results, config and predictive_model split from the search\n    """"""\n\n    logger.info(""Start hyperopt job {} with {}, performance_metric {}"".format(\n        job.type, get_run(job),\n        job.hyperparameter_optimizer.__getattribute__(\n            job.hyperparameter_optimizer.optimization_method.lower()\n        ).performance_metric) #Todo: WHY DO I NEED TO GET HYPEROPT?\n    )\n\n    global training_df, test_df, global_job\n    global_job = job\n    training_df, test_df = get_encoded_logs(job)\n    #TODO evaluate on validation set\n    if holdout:\n        validation_df = test_df\n        # test_df = training_df.sample(frac=.2)\n        test_df = training_df.tail(int(len(training_df) * 20 / 100))\n        training_df = training_df.drop(test_df.index)\n\n    train_start_time = time.time()\n\n    space = _get_space(job)\n\n    max_evaluations = job.hyperparameter_optimizer.__getattribute__(\n            job.hyperparameter_optimizer.optimization_method.lower()\n        ).max_evaluations #Todo: WHY DO I NEED TO GET HYPEROPT?\n    trials = Trials()\n\n    algorithm = _choose_algorithm(job)\n\n    try:\n        fmin(_calculate_and_evaluate, space, algo=algorithm.suggest, max_evals=max_evaluations, trials=trials)\n    except ValueError:\n        raise ValueError(""All jobs failed, cannot find best configuration"")\n    current_best = {\'loss\': 100, \'results\': {}, \'predictive_model_id\': {}, \'model_split\': {}, \'config\': {}}\n    for trial in trials:\n        a = trial[\'result\']\n        if current_best[\'loss\'] > a[\'loss\']:\n            current_best = a\n\n    job.predictive_model = PredictiveModel.objects.filter(pk=current_best[\'predictive_model_id\'])[0]\n    job.predictive_model.save()\n    job.save()\n\n    current_best[\'results\'][\'elapsed_time\'] = timedelta(seconds=time.time() - train_start_time)  # todo find better place for this\n    job.evaluation.elapsed_time = current_best[\'results\'][\'elapsed_time\']\n    job.evaluation.save()\n\n    #TODO evaluate on validation set\n    if holdout:\n        results_df, auc = _test(\n            current_best[\'model_split\'],\n            validation_df.drop([\'trace_id\'], 1),\n            evaluation=True,\n            is_binary_classifier=_check_is_binary_classifier(job.labelling.type)\n        )\n        results = _prepare_results(results_df, auc)\n        results[\'elapsed_time\'] = job.evaluation.elapsed_time\n        job.evaluation = Evaluation.init(\n            job.predictive_model.predictive_model,\n            results,\n            len(set(test_df[\'label\'])) <= 2\n        )\n        job.evaluation.save()\n        job.save()\n\n    if holdout:\n        logger.info(""End hyperopt job {}, {}. \\n\\tResults on test {}. \\n\\tResults on validation {}."".format(job.type, get_run(job), current_best[\'results\'], results))\n        return results, current_best[\'config\'], current_best[\'model_split\']\n    else:\n        logger.info(""End hyperopt job {}, {}. \\n\\tResults on test {}."".format(job.type, get_run(job), current_best[\'results\']))\n        return current_best[\'results\'], current_best[\'config\'], current_best[\'model_split\']\n\n\ndef _get_metric_multiplier(performance_metric: int) -> int:\n    """"""returns the multiplier to be used for each metric\n\n    :param performance_metric: metric used\n    :return: metric multiplier associated\n    """"""\n    metric_map = {HyperOptLosses.RMSE.value: -1,\n                  HyperOptLosses.MAE.value: -1,\n                  HyperOptLosses.RSCORE.value: 1,\n                  HyperOptLosses.ACC.value: 1,\n                  HyperOptLosses.F1SCORE.value: 1,\n                  HyperOptLosses.AUC.value: 1,\n                  HyperOptLosses.PRECISION.value: 1,\n                  HyperOptLosses.RECALL.value: 1,\n                  HyperOptLosses.TRUE_POSITIVE.value: 1,\n                  HyperOptLosses.TRUE_NEGATIVE.value: 1,\n                  HyperOptLosses.FALSE_POSITIVE.value: 1,\n                  HyperOptLosses.FALSE_NEGATIVE.value: 1,\n                  HyperOptLosses.MAPE.value: -1}\n    return metric_map[performance_metric]\n\n\ndef _choose_algorithm(job: Job):\n    job_algorithm = job.hyperparameter_optimizer.__getattribute__(\n            job.hyperparameter_optimizer.optimization_method.lower()\n        ).algorithm_type\n\n    if job_algorithm == HyperOptAlgorithms.RANDOM_SEARCH.value:\n        return hyperopt.rand\n    elif job_algorithm == HyperOptAlgorithms.TPE.value:\n        return hyperopt.tpe\n\n\ndef _calculate_and_evaluate(args) -> dict:\n    global trial_number\n    if trial_number % 20 == 0:\n        logger.info(""Trial {}"".format(trial_number))\n    trial_number += 1\n    local_job = global_job\n\n    predictive_model = local_job.predictive_model.predictive_model\n    prediction_method = local_job.predictive_model.prediction_method\n\n    model_config = {\'predictive_model\': predictive_model, \'prediction_method\': prediction_method, **args}\n\n    new_predictive_model = PredictiveModel.init(model_config)\n    local_job.predictive_model = duplicate_orm_row(new_predictive_model)\n    local_job.predictive_model.save()\n    local_job.save()\n    # local_job = duplicate_orm_row(local_job) #TODO not sure it is ok to have this here.\n\n    performance_metric = local_job.hyperparameter_optimizer.__getattribute__(\n        local_job.hyperparameter_optimizer.optimization_method.lower()\n    ).performance_metric\n    multiplier = _get_metric_multiplier(performance_metric)\n\n    try:\n        results, model_split = run_by_type(training_df.copy(), test_df.copy(), local_job)\n        return {\n            \'loss\': -results[performance_metric] * multiplier,\n            \'status\': STATUS_OK,\n            \'results\': results,\n            \'predictive_model_id\': local_job.predictive_model.pk,\n            \'model_split\': model_split,\n            \'config\': model_config}\n    except Exception as e:\n        logger.error(e)\n        return {\n            \'loss\': 100,\n            \'status\': STATUS_FAIL,\n            \'results\': {},\n            \'predictive_model_id\': {},\n            \'model_split\': {},\n            \'config\': {}}\n'"
src/hyperparameter_optimization/methods_default_config.py,0,"b""def hyperparameter_optimization_hyperopt():\n    from src.hyperparameter_optimization.models import HyperOptAlgorithms, HyperOptLosses\n\n    return {\n        'max_evaluations': 2,\n        'performance_metric': HyperOptLosses.ACC.value,\n        'algorithm_type': HyperOptAlgorithms.RANDOM_SEARCH.value\n    }\n"""
src/hyperparameter_optimization/models.py,0,"b""from enum import Enum\n\nfrom django.db import models\nfrom model_utils.managers import InheritanceManager\n\nfrom src.common.models import CommonModel\nfrom src.hyperparameter_optimization.methods_default_config import hyperparameter_optimization_hyperopt\n\n\nclass HyperparameterOptimizationMethods(Enum):\n    HYPEROPT = 'hyperopt'\n    NONE = 'none'\n\n\nHYPERPARAMETER_OPTIMIZATION_METHOD = (\n    (HyperparameterOptimizationMethods.HYPEROPT.value, 'hyperopt'),\n    (HyperparameterOptimizationMethods.NONE.value, 'none'),\n)\n\n\nclass HyperparameterOptimization(CommonModel):\n    optimization_method = models.CharField(choices=HYPERPARAMETER_OPTIMIZATION_METHOD,\n                                           default='hyperopt',\n                                           max_length=max(len(el[1]) for el in HYPERPARAMETER_OPTIMIZATION_METHOD)+1)\n    objects = InheritanceManager()\n\n    @staticmethod\n    def init(configuration: dict = {'type': HyperparameterOptimizationMethods.HYPEROPT.value}):\n        hyperparameter_optimizer_type = configuration.get('type', HyperparameterOptimizationMethods.NONE.value)\n        if hyperparameter_optimizer_type == HyperparameterOptimizationMethods.HYPEROPT.value:\n            default_configuration = hyperparameter_optimization_hyperopt()\n            return HyperOpt.objects.get_or_create(\n                optimization_method=hyperparameter_optimizer_type,\n                max_evaluations=configuration.get('max_evaluations', default_configuration['max_evaluations']),\n                performance_metric=configuration.get('performance_metric', default_configuration['performance_metric']),\n                algorithm_type=configuration.get('algorithm_type', default_configuration['algorithm_type'])\n            )[0]\n        elif hyperparameter_optimizer_type == HyperparameterOptimizationMethods.NONE.value:\n            return HyperparameterOptimization.objects.get_or_create(\n                optimization_method=HyperparameterOptimizationMethods.NONE.value)[0]\n        else:\n            raise ValueError('hyperparameter optimizer type {} not recognized'.format(hyperparameter_optimizer_type))\n\n    def to_dict(self) -> dict:\n        return {\n            'optimization_method': self.optimization_method\n        }\n\n\nclass HyperOptAlgorithms(Enum):\n    RANDOM_SEARCH = 'random_search'\n    TPE = 'tpe'\n\n\nclass HyperOptLosses(Enum):\n    RMSE = 'rmse'\n    MAE = 'mae'\n    RSCORE = 'rscore'\n    ACC = 'acc'\n    F1SCORE = 'f1score'\n    AUC = 'auc'\n    PRECISION = 'precision'\n    RECALL = 'recall'\n    TRUE_POSITIVE = 'true_positive'\n    TRUE_NEGATIVE = 'true_negative'\n    FALSE_POSITIVE = 'false_positive'\n    FALSE_NEGATIVE = 'false_negative'\n    MAPE = 'mape'\n\n\nHYPEROPT_ALGORITHM_MAPPINGS = (\n    (HyperOptAlgorithms.RANDOM_SEARCH.value, 'random_search'),\n    (HyperOptAlgorithms.TPE.value, 'tpe')\n)\n\nHYPEROPT_LOSS_MAPPINGS = (\n    (HyperOptLosses.RMSE.value, 'rmse'),\n    (HyperOptLosses.MAE.value, 'mae'),\n    (HyperOptLosses.RSCORE.value, 'rscore'),\n    (HyperOptLosses.ACC.value, 'acc'),\n    (HyperOptLosses.F1SCORE.value, 'f1score'),\n    (HyperOptLosses.AUC.value, 'auc'),\n    (HyperOptLosses.PRECISION.value, 'precision'),\n    (HyperOptLosses.RECALL.value, 'recall'),\n    (HyperOptLosses.TRUE_POSITIVE.value, 'true_positive'),\n    (HyperOptLosses.TRUE_NEGATIVE.value, 'true_negative'),\n    (HyperOptLosses.FALSE_POSITIVE.value, 'false_positive'),\n    (HyperOptLosses.FALSE_NEGATIVE.value, 'false_negative'),\n    (HyperOptLosses.MAPE.value, 'mape')\n)\n\n\nclass HyperOpt(HyperparameterOptimization):\n    max_evaluations = models.PositiveIntegerField()\n    performance_metric = models.CharField(choices=HYPEROPT_LOSS_MAPPINGS, default='acc', max_length=max(len(el[1]) for el in HYPEROPT_LOSS_MAPPINGS)+1)\n    algorithm_type = models.CharField(choices=HYPEROPT_ALGORITHM_MAPPINGS, default='tpe', max_length=max(len(el[1]) for el in HYPEROPT_ALGORITHM_MAPPINGS)+1)\n\n    def to_dict(self):\n        return {\n            'max_evaluations': self.max_evaluations,\n            'performance_metric': self.performance_metric,\n            'algorithm_type': self.algorithm_type\n        }\n"""
src/jobs/__init__.py,0,b''
src/jobs/admin.py,0,b'from django.contrib import admin\n\nfrom src.jobs.models import Job\n\nadmin.site.register(Job)\n'
src/jobs/apps.py,0,"b""from django.apps import AppConfig\n\n\nclass JobsConfig(AppConfig):\n    name = 'src.jobs'\n"""
src/jobs/job_creator.py,0,"b""import time\n\nfrom src.clustering.models import Clustering, ClusteringMethods\nfrom src.encoding.encoding_container import UP_TO\nfrom src.encoding.models import Encoding, ValueEncodings, DataEncodings\nfrom src.hyperparameter_optimization.models import HyperparameterOptimization, HyperparameterOptimizationMethods\nfrom src.jobs.models import Job, JobStatuses, JobTypes\nfrom src.labelling.models import Labelling\nfrom src.predictive_model.models import PredictiveModel\nfrom src.predictive_model.models import PredictiveModels\nfrom src.utils.django_orm import duplicate_orm_row\n\n\ndef generate(split, payload):\n    jobs = []\n\n    config = payload['config']\n    labelling_config = config['labelling'] if 'labelling' in config else {}\n    job_type = JobTypes.PREDICTION.value\n    prediction_type = payload['type']\n\n    for method in config['methods']:\n        for clustering in config['clusterings']:\n            for encMethod in config['encodings']:\n                encoding_dict = config['encoding']\n                if encoding_dict['generation_type'] == UP_TO:\n                    for i in range(1, encoding_dict['prefix_length'] + 1):\n\n                        predictive_model = PredictiveModel.init(\n                            get_prediction_method_config(prediction_type, method, config))\n\n                        job = Job.objects.get_or_create(\n                            status=JobStatuses.CREATED.value,\n                            type=job_type,\n                            split=split,\n                            encoding=Encoding.objects.get_or_create(\n                                data_encoding=DataEncodings.LABEL_ENCODER.value,\n                                value_encoding=encMethod,\n                                add_elapsed_time=encoding_dict.get('add_elapsed_time', False),\n                                add_remaining_time=encoding_dict.get('add_remaining_time', False),\n                                add_executed_events=encoding_dict.get('add_executed_events', False),\n                                add_resources_used=encoding_dict.get('add_resources_used', False),\n                                add_new_traces=encoding_dict.get('add_new_traces', False),\n                                prefix_length=i,\n                                # TODO static check?\n                                padding=True if config['encoding']['padding'] == 'zero_padding' else False,\n                                task_generation_type=config['encoding'].get('generation_type', 'only_this'),\n                                features=config['encoding'].get('features', [])\n                            )[0],\n                            labelling=Labelling.objects.get_or_create(\n                                type=labelling_config.get('type', None),\n                                # TODO static check?\n                                attribute_name=labelling_config.get('attribute_name', None),\n                                threshold_type=labelling_config.get('threshold_type', None),\n                                threshold=labelling_config.get('threshold', None)\n                            )[0] if labelling_config != {} else None,\n                            clustering=Clustering.init(clustering, configuration=config.get(clustering, {}))\n                            if predictive_model.predictive_model != PredictiveModels.TIME_SERIES_PREDICTION.value\n                            else Clustering.init(ClusteringMethods.NO_CLUSTER.value, configuration={}),\n                            # TODO TEMPORARY workaround,\n                            hyperparameter_optimizer=HyperparameterOptimization.init(\n                                config.get('hyperparameter_optimizer', {\n                                    'type': None}) if predictive_model.predictive_model != PredictiveModels.TIME_SERIES_PREDICTION.value else {\n                                    'type': None}),\n                            # TODO TEMPORARY workaround\n                            predictive_model=predictive_model,\n                            create_models=config.get('create_models', False)\n                        )[0]\n\n                        check_predictive_model_not_overwrite(job)\n\n                        jobs.append(job)\n                else:\n                    predictive_model = PredictiveModel.init(\n                        get_prediction_method_config(prediction_type, method, config))\n\n                    job = Job.objects.get_or_create(\n                        status=JobStatuses.CREATED.value,\n                        type=job_type,\n                        split=split,\n                        encoding=Encoding.objects.get_or_create(\n                            data_encoding=DataEncodings.LABEL_ENCODER.value,\n                            value_encoding=encMethod,\n                            add_elapsed_time=encoding_dict.get('add_elapsed_time', False),\n                            add_remaining_time=encoding_dict.get('add_remaining_time', False),\n                            add_executed_events=encoding_dict.get('add_executed_events', False),\n                            add_resources_used=encoding_dict.get('add_resources_used', False),\n                            add_new_traces=encoding_dict.get('add_new_traces', False),\n                            prefix_length=config['encoding']['prefix_length'],\n                            # TODO static check?\n                            padding=True if config['encoding']['padding'] == 'zero_padding' else False,\n                            task_generation_type=config['encoding'].get('generation_type', 'only_this'),\n                            features=config['encoding'].get('features', [])\n                        )[0],\n                        labelling=Labelling.objects.get_or_create(\n                            type=labelling_config.get('type', None),\n                            # TODO static check?\n                            attribute_name=labelling_config.get('attribute_name', None),\n                            threshold_type=labelling_config.get('threshold_type', None),\n                            threshold=labelling_config.get('threshold', None)\n                        )[0] if labelling_config != {} else None,\n                        clustering=Clustering.init(clustering, configuration=config.get(clustering, {}))\n                        if predictive_model.predictive_model != PredictiveModels.TIME_SERIES_PREDICTION.value\n                        else Clustering.init(ClusteringMethods.NO_CLUSTER.value, configuration={}),\n                        hyperparameter_optimizer=HyperparameterOptimization.init(\n                            config.get('hyperparameter_optimizer', {\n                                'type': 'none'}) if predictive_model.predictive_model != PredictiveModels.TIME_SERIES_PREDICTION.value else {\n                                'type': 'none'}),\n                        # TODO TEMPORARY workaround\n                        predictive_model=predictive_model,\n                        create_models=config.get('create_models', False)\n                    )[0]\n\n                    check_predictive_model_not_overwrite(job)\n\n                    jobs.append(job)\n\n    return jobs\n\n\ndef check_predictive_model_not_overwrite(job: Job) -> None:\n    if job.hyperparameter_optimizer.optimization_method != HyperparameterOptimizationMethods.NONE.value:\n        job.predictive_model = duplicate_orm_row(PredictiveModel.objects.filter(pk=job.predictive_model.pk)[0])\n        job.predictive_model.save()\n        job.save()\n\n\ndef get_prediction_method_config(predictive_model, prediction_method, payload):\n    return {\n        'predictive_model': predictive_model,\n        'prediction_method': prediction_method,\n        **payload.get(predictive_model + '.' + prediction_method, {})\n    }\n\n\ndef set_model_name(job: Job) -> None:\n    if job.create_models:\n        if job.predictive_model.model_path != '':\n            job.predictive_model = duplicate_orm_row(PredictiveModel.objects.filter(pk=job.predictive_model.pk)[0])\n            job.predictive_model.save()\n            job.save()\n\n        if job.clustering.clustering_method != ClusteringMethods.NO_CLUSTER.value:\n            job.clustering.model_path = 'cache/model_cache/job_{}-split_{}-clusterer-{}-v0.sav'.format(\n                job.id,\n                job.split.id,\n                job.type)\n            job.clustering.save()\n\n        if job.type == JobTypes.UPDATE.value:\n            job.type = JobTypes.PREDICTION.value #TODO: Y am I doing this?\n            predictive_model_filename = 'cache/model_cache/job_{}-split_{}-predictive_model-{}-v{}.sav'.format(\n                job.id,\n                job.split.id,\n                job.type,\n                str(time.time()))\n        else:\n            predictive_model_filename = 'cache/model_cache/job_{}-split_{}-predictive_model-{}-v0.sav'.format(\n                job.id,\n                job.split.id,\n                job.type)\n        job.predictive_model.model_path = predictive_model_filename\n        job.predictive_model.save()\n        job.save()\n\n\ndef generate_labelling(split, payload):\n    jobs = []\n\n    encoding = payload['config']['encoding']\n    config = payload['config']\n    labelling_config = config['labelling'] if 'labelling' in config else {}\n\n    if encoding['generation_type'] == UP_TO:\n        for i in range(1, encoding['prefix_length'] + 1):\n            item, _ = Job.objects.get_or_create(\n                status=JobStatuses.CREATED.value,\n                type=JobTypes.LABELLING.value,\n\n                split=split,\n                encoding=Encoding.objects.get_or_create(  # TODO fixme\n                    data_encoding=DataEncodings.LABEL_ENCODER.value,\n                    value_encoding=encoding.get('encodings', ValueEncodings.SIMPLE_INDEX.value),\n                    add_elapsed_time=encoding.get('add_elapsed_time', False),\n                    add_remaining_time=encoding.get('add_remaining_time', False),\n                    add_executed_events=encoding.get('add_executed_events', False),\n                    add_resources_used=encoding.get('add_resources_used', False),\n                    add_new_traces=encoding.get('add_new_traces', False),\n                    prefix_length=i,\n                    # TODO static check?\n                    padding=True if config['encoding']['padding'] == 'zero_padding' else False,\n                    task_generation_type=config['encoding'].get('generation_type', 'only_this'),\n                    features=config['encoding'].get('features', [])\n                )[0],\n                labelling=Labelling.objects.get_or_create(\n                    type=labelling_config.get('type', None),\n                    # TODO static check?\n                    attribute_name=labelling_config.get('attribute_name', None),\n                    threshold_type=labelling_config.get('threshold_type', None),\n                    threshold=labelling_config.get('threshold', None)\n                )[0] if labelling_config != {} else None\n            )\n            jobs.append(item)\n    else:\n        item, _ = Job.objects.get_or_create(\n            status=JobStatuses.CREATED.value,\n            type=JobTypes.LABELLING.value,\n\n            split=split,\n            encoding=Encoding.objects.get_or_create(  # TODO fixme\n                data_encoding=DataEncodings.LABEL_ENCODER.value,\n                value_encoding=encoding.get('encodings', ValueEncodings.SIMPLE_INDEX.value),\n                add_elapsed_time=encoding.get('add_elapsed_time', False),\n                add_remaining_time=encoding.get('add_remaining_time', False),\n                add_executed_events=encoding.get('add_executed_events', False),\n                add_resources_used=encoding.get('add_resources_used', False),\n                add_new_traces=encoding.get('add_new_traces', False),\n                prefix_length=config['encoding']['prefix_length'],\n                # TODO static check?\n                padding=True if config['encoding']['padding'] == 'zero_padding' else False,\n                task_generation_type=config['encoding'].get('generation_type', 'only_this'),\n                features=config['encoding'].get('features', [])\n            )[0],\n            labelling=Labelling.objects.get_or_create(\n                type=labelling_config.get('type', None),\n                # TODO static check?\n                attribute_name=labelling_config.get('attribute_name', None),\n                threshold_type=labelling_config.get('threshold_type', None),\n                threshold=labelling_config.get('threshold', None)\n            )[0] if labelling_config != {} else None\n        )\n        jobs.append(item)\n\n    return jobs\n\n\ndef update(split, payload, generation_type=PredictiveModels.CLASSIFICATION.value):  # TODO adapt to allow selecting the predictive_model to update\n    jobs = []\n\n    config = payload['config']\n    labelling_config = config['labelling'] if 'labelling' in config else {}\n\n    for method in payload['config']['methods']:\n        for clustering in payload['config']['clusterings']:\n            for incremental_base_model in payload['config']['incremental_train']:\n                for encMethod in payload['config']['encodings']:\n                    encoding = payload['config']['encoding']\n                    if encoding['generation_type'] == UP_TO:\n                        for i in range(1, encoding['prefix_length'] + 1):\n                            job, _ = Job.objects.get_or_create(\n                                status=JobStatuses.CREATED.value,\n                                type=JobTypes.UPDATE.value,\n                                split=split,\n                                encoding=Encoding.objects.get_or_create(  # TODO fixme\n                                    data_encoding=DataEncodings.LABEL_ENCODER.value,\n                                    value_encoding=encMethod,\n                                    add_elapsed_time=encoding.get('add_elapsed_time', False),\n                                    add_remaining_time=encoding.get('add_remaining_time', False),\n                                    add_executed_events=encoding.get('add_executed_events', False),\n                                    add_resources_used=encoding.get('add_resources_used', False),\n                                    add_new_traces=encoding.get('add_new_traces', False),\n                                    prefix_length=i,\n                                    # TODO static check?\n                                    padding=True if config['encoding']['padding'] == 'zero_padding' else False,\n                                    task_generation_type=config['encoding'].get('generation_type', 'only_this'),\n                                    features=config['encoding'].get('features', [])\n                                )[0],\n                                labelling=Labelling.objects.get_or_create(\n                                    type=labelling_config.get('type', None),\n                                    # TODO static check?\n                                    attribute_name=labelling_config.get('attribute_name', None),\n                                    threshold_type=labelling_config.get('threshold_type', None),\n                                    threshold=labelling_config.get('threshold', None)\n                                )[0] if labelling_config != {} else None,\n                                clustering=Clustering.init(clustering, configuration=config.get(clustering, {})),\n                                predictive_model=PredictiveModel.init(\n                                    get_prediction_method_config(generation_type, method, payload)\n                                ),\n                                hyperparameter_optimizer=HyperparameterOptimization.init(\n                                    config.get('hyperparameter_optimizer', None)),\n                                create_models=config.get('create_models', False),\n                                incremental_train=Job.objects.filter(\n                                    pk=incremental_base_model\n                                )[0]\n                            )\n\n                            check_predictive_model_not_overwrite(job)\n\n\n                            jobs.append(job)\n                    else:\n                        job, _ = Job.objects.get_or_create(\n                            status=JobStatuses.CREATED.value,\n                            type=JobTypes.UPDATE.value,\n\n                            split=split,\n                            encoding=Encoding.objects.get_or_create(  # TODO fixme\n                                data_encoding=DataEncodings.LABEL_ENCODER.value,\n                                value_encoding=encMethod,\n                                add_elapsed_time=encoding.get('add_elapsed_time', False),\n                                add_remaining_time=encoding.get('add_remaining_time', False),\n                                add_executed_events=encoding.get('add_executed_events', False),\n                                add_resources_used=encoding.get('add_resources_used', False),\n                                add_new_traces=encoding.get('add_new_traces', False),\n                                prefix_length=config['encoding']['prefix_length'],\n                                # TODO static check?\n                                padding=True if config['encoding']['padding'] == 'zero_padding' else False,\n                                task_generation_type=config['encoding'].get('generation_type', 'only_this'),\n                                features=config['encoding'].get('features', [])\n                            )[0],\n                            labelling=Labelling.objects.get_or_create(\n                                type=labelling_config.get('type', None),\n                                # TODO static check?\n                                attribute_name=labelling_config.get('attribute_name', None),\n                                threshold_type=labelling_config.get('threshold_type', None),\n                                threshold=labelling_config.get('threshold', None)\n                            )[0] if labelling_config != {} else None,\n                            clustering=Clustering.init(clustering, configuration=config.get(clustering, {})),\n                            predictive_model=PredictiveModel.init(\n                                get_prediction_method_config(generation_type, method, payload)\n                            ),\n                            hyperparameter_optimizer=HyperparameterOptimization.init(\n                                config.get('hyperparameter_optimizer', None)),\n                            create_models=config.get('create_models', False),\n                            incremental_train=Job.objects.filter(\n                                pk=incremental_base_model\n                            )[0]\n                        )\n\n                        check_predictive_model_not_overwrite(job)\n\n\n                        jobs.append(job)\n    return jobs\n"""
src/jobs/json_renderer.py,0,"b'from json.encoder import encode_basestring_ascii, encode_basestring, INFINITY, _make_iterencode\n\nfrom rest_framework.renderers import JSONRenderer\nfrom rest_framework.utils.encoders import JSONEncoder\n\n\n# default renderer cannot handle JSON inf values\n# https://stackoverflow.com/questions/35939464/django-rest-framework-json-data-monkey-patching\nclass CustomJSONEncoder(JSONEncoder):\n\n    def iterencode(self, o, _one_shot=False):\n        """"""Encode the given object and yield each string\n        representation as available.\n\n        For example::\n\n            for chunk in JSONEncoder().iterencode(bigobject):\n                mysocket.write(chunk)\n\n        """"""\n        # Hack to enforce\n        c_make_encoder = None\n        if self.check_circular:\n            markers = {}\n        else:\n            markers = None\n        if self.ensure_ascii:\n            _encoder = encode_basestring_ascii\n        else:\n            _encoder = encode_basestring\n\n        def floatstr(o, allow_nan=True, _repr=lambda o: format(o, \'.4f\'), _inf=INFINITY, _neginf=-INFINITY):\n            # Check for specials.  Note that this type of test is processor\n            # and/or platform-specific, so do tests which don\'t depend on the\n            # internals.\n\n            if o != o:\n                text = \'0\'\n            elif o == _inf:\n                text = \'1000000\'  # infinity is 1000000\n            elif o == _neginf:\n                text = \'-1000000\'\n            else:\n                return _repr(o)\n\n            if not allow_nan:\n                raise ValueError(\n                    ""Out of range float values are not JSON compliant: "" +\n                    repr(o))\n\n            return text\n\n        if _one_shot and c_make_encoder is not None and self.indent is None:\n            _iterencode = c_make_encoder(\n                markers, self.default, _encoder, self.indent,\n                self.key_separator, self.item_separator, self.sort_keys,\n                self.skipkeys, self.allow_nan)  # TODO: fix call to non-callable object\n        else:\n            _iterencode = _make_iterencode(\n                markers, self.default, _encoder, self.indent, floatstr,\n                self.key_separator, self.item_separator, self.sort_keys,\n                self.skipkeys, _one_shot)\n        return _iterencode(o, 0)\n\n\nclass PalJSONRenderer(JSONRenderer):\n    encoder_class = CustomJSONEncoder\n'"
src/jobs/models.py,0,"b""from enum import Enum\n\nfrom django.db import models\nfrom django.contrib.postgres.fields import JSONField\n\nfrom src.clustering.models import Clustering\nfrom src.common.models import CommonModel\nfrom src.encoding.models import Encoding\nfrom src.evaluation.models import Evaluation\nfrom src.hyperparameter_optimization.models import HyperparameterOptimization\nfrom src.labelling.models import Labelling\nfrom src.predictive_model.models import PredictiveModel, PredictiveModel\nfrom src.split.models import Split\n\n\nclass ModelType(Enum):\n    CLUSTERER = 'clusterer'\n    CLASSIFIER = 'classification'\n    REGRESSOR = 'regression'\n    TIME_SERIES_PREDICTOR = 'time_series_prediction'\n\n\nclass JobStatuses(Enum):\n    CREATED = 'created'\n    COMPLETED = 'completed'\n    ERROR = 'error'\n    RUNNING = 'running'\n\n\nclass JobTypes(Enum):\n    PREDICTION = 'prediction'\n    LABELLING = 'labelling'\n    UPDATE = 'update'\n    RUNTIME = 'runtime'\n    REPLAY = 'replay'\n    REPLAY_PREDICT = 'replay_predict'\n\n\nJOB_STATUS_MAPPINGS = (\n    (JobStatuses.CREATED.value, 'created'),\n    (JobStatuses.COMPLETED.value, 'completed'),\n    (JobStatuses.ERROR.value, 'error'),\n    (JobStatuses.RUNNING.value, 'running')\n)\n\nJOB_TYPE_MAPPINGS = (\n    (JobTypes.PREDICTION.value, 'prediction'),\n    (JobTypes.LABELLING.value, 'labelling'),\n    (JobTypes.UPDATE.value, 'update'),\n    (JobTypes.RUNTIME.value, 'runtime'),\n    (JobTypes.REPLAY.value, 'replay'),\n    (JobTypes.REPLAY_PREDICT.value, 'replay_predict')\n)\n\n\nclass Job(CommonModel):\n    created_date = models.DateTimeField(auto_now_add=True)\n    modified_date = models.DateTimeField(auto_now=True)\n\n    error = models.CharField(default='', max_length=500)\n    status = models.CharField(choices=JOB_STATUS_MAPPINGS, default=JobStatuses.CREATED.value, max_length=max(len(el[1]) for el in JOB_STATUS_MAPPINGS)+1)\n    type = models.CharField(choices=JOB_TYPE_MAPPINGS, default=JobTypes.PREDICTION.value, max_length=max(len(el[1]) for el in JOB_TYPE_MAPPINGS)+1)\n    create_models = models.BooleanField(default=False)\n    case_id = JSONField(default=dict)\n    event_number = JSONField(default=dict)\n    gold_value = JSONField(default=dict)\n    results = JSONField(default=dict)\n\n    parent_job = models.ForeignKey('self', on_delete=models.DO_NOTHING, related_name='replay_job', null=True)\n    split = models.ForeignKey(Split, on_delete=models.DO_NOTHING, null=True)\n    encoding = models.ForeignKey(Encoding, on_delete=models.DO_NOTHING, null=True)\n    labelling = models.ForeignKey(Labelling, on_delete=models.DO_NOTHING, null=True)\n    clustering = models.ForeignKey(Clustering, on_delete=models.DO_NOTHING, null=True)\n    predictive_model = models.ForeignKey(PredictiveModel, on_delete=models.DO_NOTHING, null=True)\n    evaluation = models.ForeignKey(Evaluation, on_delete=models.DO_NOTHING, null=True)\n    hyperparameter_optimizer = models.ForeignKey(HyperparameterOptimization, on_delete=models.DO_NOTHING, null=True)\n    incremental_train = models.ForeignKey('self', on_delete=models.DO_NOTHING, related_name='base_model',\n                                          null=True)  # self-reference\n\n    def to_dict(self) -> dict:\n        return {\n            'id': self.pk,\n            'created_date': self.created_date,\n            'modified_date': self.modified_date,\n            'error': self.error,\n            'status': self.status,\n            'type': self.type,\n            'create_models': self.create_models,\n            'split': self.split.to_dict(),\n            'encoding': self.encoding.to_dict(),\n            'labelling': self.labelling.to_dict(),\n            'clustering': self.clustering.to_dict(),\n            'predictive_model': self.predictive_model.to_dict(),\n            'evaluation': [self.evaluation.to_dict() if self.evaluation is not None else None],\n            'hyperparameter_optimizer': [\n                self.hyperparameter_optimizer.to_dict() if self.hyperparameter_optimizer is not None else None],\n            'incremental_train': [self.incremental_train.to_dict() if self.incremental_train is not None else None]\n        }\n"""
src/jobs/serializers.py,0,"b""from rest_framework import serializers\n\nfrom src.evaluation.models import Evaluation\nfrom src.hyperparameter_optimization.models import HyperparameterOptimization\nfrom src.predictive_model.models import PredictiveModel\nfrom .models import Job\n\n\nclass JobSerializer(serializers.ModelSerializer):\n    config = serializers.SerializerMethodField()\n\n    def get_config(self, job):\n        evaluation = Evaluation.objects.filter(pk=job.evaluation.pk).select_subclasses()[\n            0] if job.evaluation is not None else None\n        hyperparameter_optimizer = \\\n            HyperparameterOptimization.objects.filter(pk=job.hyperparameter_optimizer.pk).select_subclasses()[\n                0] if job.hyperparameter_optimizer is not None else None\n        predictive_model = PredictiveModel.objects.filter(pk=job.predictive_model.pk).select_subclasses()[\n            0] if job.predictive_model is not None else None\n        return {\n            'split': job.split.to_dict() if job.split is not None else None,\n            'encoding': job.encoding.to_dict() if job.encoding is not None else None,\n            'labelling': job.labelling.to_dict() if job.labelling is not None else None,\n            'clustering': job.clustering.to_dict() if job.clustering is not None else None,\n            'predictive_model': predictive_model.get_full_dict() if job.predictive_model is not None else None,\n            'evaluation': evaluation.get_full_dict() if job.evaluation is not None else None,\n            'results': job.results if job.results is not None else None,\n            'hyperparameter_optimizer': hyperparameter_optimizer.get_full_dict() if job.hyperparameter_optimizer is not None else None,\n            'incremental_train': job.incremental_train.to_dict() if job.incremental_train is not None else None,\n            'parent_job': job.parent_job.id if job.parent_job is not None else None\n        }\n\n    class Meta:\n        model = Job\n        fields = (\n            'id',\n            'created_date',\n            'modified_date',\n            'error',\n            'status',\n            'type',\n            'results',\n            'case_id',\n            'gold_value',\n            'event_number',\n            'config')\n"""
src/jobs/tasks.py,0,"b'import logging\nimport time\nfrom datetime import timedelta\n\nimport django_rq\nfrom django_rq.decorators import job\nfrom sklearn.externals import joblib\n\nfrom src.clustering.models import ClusteringMethods\nfrom src.core.core import calculate\nfrom src.hyperparameter_optimization.hyperopt_wrapper import calculate_hyperopt\nfrom src.hyperparameter_optimization.models import HyperparameterOptimizationMethods, HyperparameterOptimization\nfrom src.jobs.job_creator import set_model_name\nfrom src.jobs.models import Job, JobStatuses, JobTypes, ModelType\nfrom src.jobs.ws_publisher import publish\nfrom src.utils.django_orm import duplicate_orm_row\n\nlogger = logging.getLogger(__name__)\n\n\n@job(""default"", timeout=\'100h\')\ndef prediction_task(job_id, do_publish_result=True):\n    logger.info(""Start prediction task ID {}"".format(job_id))\n    job = Job.objects.get(id=job_id)\n\n    try:\n        if (job.status == JobStatuses.CREATED.value and job.type != JobTypes.UPDATE.value) or \\\n           (job.status == JobStatuses.CREATED.value and job.type == JobTypes.UPDATE.value and\n            job.incremental_train.status == JobStatuses.COMPLETED.value):\n\n            job.status = JobStatuses.RUNNING.value\n            job.save()\n            job_start_time = time.time()\n            if job.hyperparameter_optimizer is not None and \\\n                job.hyperparameter_optimizer.optimization_method != HyperparameterOptimizationMethods.NONE.value:\n                result, model_split = hyperopt_task(job)\n            else:\n                result, model_split = calculate(job)\n            job_elapsed_time = time.time() - job_start_time\n            logger.info(\'\\tJob took: {} in HH:MM:ss\'.format(time.strftime(""%H:%M:%S"", time.gmtime(job_elapsed_time))))\n            if job.create_models:\n                save_models(model_split, job)\n            job.result = result\n            job.status = JobStatuses.COMPLETED.value\n        elif job.status in [JobStatuses.COMPLETED.value, JobStatuses.ERROR.value, JobStatuses.RUNNING.value]:\n            django_rq.enqueue(prediction_task, job.id)\n    except Exception as e:\n        logger.error(e)\n        job.status = JobStatuses.ERROR.value\n        job.error = str(e.__repr__())\n        raise e\n    finally:\n        job.save()\n        if do_publish_result:\n            publish(job)\n\n\ndef save_models(models: dict, job: Job):\n    set_model_name(job)\n\n    logger.info(""\\tStart saving models of JOB {}"".format(job.id))\n    if job.clustering.clustering_method != ClusteringMethods.NO_CLUSTER.value:\n        joblib.dump(models[ModelType.CLUSTERER.value], job.clustering.model_path)\n        job.clustering.save()\n        job.save()\n\n    joblib.dump(models[job.predictive_model.predictive_model], job.predictive_model.model_path)\n    job.predictive_model.save()\n    job.save()\n\n\ndef hyperopt_task(job):\n    # job_dict = job.to_dict()\n    results, config, model_split = calculate_hyperopt(job)\n    # method_conf_name = ""{}.{}"".format(job_dict[\'type\'], job_dict[\'method\'])\n    # job.config[method_conf_name] = config\n    return results, model_split\n'"
src/jobs/urls.py,0,"b""from django.conf.urls import url\n\nfrom . import views\n\nurlpatterns = [\n    url(r'^$', views.JobList.as_view()),\n    url(r'^(?P<pk>[0-9]+)$', views.JobDetail.as_view()),\n    url(r'multiple$', views.create_multiple),\n    url(r'^decode/(?P<pk>[0-9]+)', views.get_decoded_df),\n    url(r'^unique-values/(?P<pk>[0-9]+)', views.get_unique_values)\n\n]\n"""
src/jobs/views.py,0,"b'import json\n\nimport django_rq\nfrom rest_framework import status\nfrom rest_framework.decorators import api_view\nfrom rest_framework.generics import ListAPIView, GenericAPIView\nfrom rest_framework.mixins import RetrieveModelMixin\nfrom rest_framework.response import Response\n\nfrom src.clustering.models import Clustering\nfrom src.core.core import get_encoded_logs\nfrom src.encoding.common import retrieve_proper_encoder\nfrom src.encoding.models import Encoding\nfrom src.hyperparameter_optimization.models import HyperparameterOptimization\nfrom src.jobs import tasks\nfrom src.jobs.job_creator import generate, generate_labelling, update\nfrom src.jobs.models import Job, JobTypes\nfrom src.jobs.serializers import JobSerializer\nfrom src.labelling.models import Labelling\nfrom src.predictive_model.models import PredictiveModel, PredictiveModels\nfrom src.split.models import Split\n\n\nclass JobList(ListAPIView):\n    """"""\n    List all jobs, or create a new job.\n    """"""\n    serializer_class = JobSerializer\n\n    def get_queryset(self):\n        jobs = Job.objects.all()\n\n        type = self.request.data.get(\'type\', None)\n        status = self.request.data.get(\'status\', None)\n        create_models = self.request.data.get(\'create_models\', None)\n        split = self.request.data.get(\'split\', None)\n\n        encoding_config = self.request.data.get(\'encoding\', None)\n        labelling_config = self.request.data.get(\'labelling\', None)\n        clustering_config = self.request.data.get(\'clustering\', None)\n        predictive_model_config = self.request.data.get(\'predictive_model\', None)\n        hyperparameter_optimization_config = self.request.data.get(\'hyperparameter_optimization\', None)\n        # incremental_train_config = self.request.data.get(\'incremental_train\', None)\n\n        if type is not None:\n            jobs = jobs.filter(type=type)\n        if status is not None:\n            jobs = jobs.filter(status=status)\n        if create_models is not None:\n            jobs = jobs.filter(create_models=create_models)\n        if split is not None:\n            jobs = jobs.filter(split=split)\n        if encoding_config is not None:\n            encodings = Encoding.objects.all()\n            if \'data_encoding\' in encoding_config:\n                encodings = encodings.filter(data_encoding=encoding_config[\'data_encoding\'])\n            if \'value_encoding\' in encoding_config:\n                encodings = encodings.filter(value_encoding=encoding_config[\'value_encoding\'])\n            if \'add_elapsed_time\' in encoding_config:\n                encodings = encodings.filter(add_elapsed_time=encoding_config[\'add_elapsed_time\'])\n            if \'add_remaining_time\' in encoding_config:\n                encodings = encodings.filter(add_remaining_time=encoding_config[\'add_remaining_time\'])\n            if \'add_executed_events\' in encoding_config:\n                encodings = encodings.filter(add_executed_events=encoding_config[\'add_executed_events\'])\n            if \'add_resources_used\' in encoding_config:\n                encodings = encodings.filter(add_resources_used=encoding_config[\'add_resources_used\'])\n            if \'add_new_traces\' in encoding_config:\n                encodings = encodings.filter(add_new_traces=encoding_config[\'add_new_traces\'])\n            if \'features\' in encoding_config:\n                encodings = encodings.filter(features=encoding_config[\'features\'])\n            if \'prefix_length\' in encoding_config:\n                encodings = encodings.filter(prefix_length=encoding_config[\'prefix_length\'])\n            if \'padding\' in encoding_config:\n                encodings = encodings.filter(padding=encoding_config[\'padding\'])\n            if \'task_generation_type\' in encoding_config:\n                encodings = encodings.filter(task_generation_type=encoding_config[\'task_generation_type\'])\n            jobs = jobs.filter(encoding__in=[element.id for element in encodings])\n        if labelling_config is not None:\n            labellings = Labelling.objects.all()\n            if \'type\' in labelling_config:\n                labellings = labellings.filter(type=labelling_config[\'type\'])\n            if \'attribute_name\' in labelling_config:\n                labellings = labellings.filter(attribute_name=labelling_config[\'attribute_name\'])\n            if \'threshold_type\' in labelling_config:\n                labellings = labellings.filter(threshold_type=labelling_config[\'threshold_type\'])\n            if \'threshold\' in labelling_config:\n                labellings = labellings.filter(threshold=labelling_config[\'threshold\'])\n            jobs = jobs.filter(labelling__in=[element.id for element in labellings])\n        if clustering_config is not None:\n            clusterings = Clustering.objects.all()\n            if \'clustering_method\' in clustering_config:\n                clusterings = clusterings.filter(clustering_method=clustering_config[\'clustering_method\'])\n            jobs = jobs.filter(clustering__in=[element.id for element in clusterings])\n        if predictive_model_config is not None:\n            predictive_models = PredictiveModel.objects.all()\n            if \'predictive_model\' in predictive_model_config:\n                predictive_models = predictive_models.filter(predictive_model=predictive_model_config[\'predictive_model\'])\n            if \'prediction_method\' in predictive_model_config:\n                predictive_models = predictive_models.filter(prediction_method=predictive_model_config[\'prediction_method\'])\n            jobs = jobs.filter(predictive_model__in=[element.id for element in predictive_models])\n        if hyperparameter_optimization_config is not None:\n            hyperparameter_optimizations = HyperparameterOptimization.objects.all()\n            if \'optimization_method\' in hyperparameter_optimization_config:\n                hyperparameter_optimizations = hyperparameter_optimizations.filter(optimization_method=hyperparameter_optimization_config[\'optimization_method\'])\n\n            # if \'max_evaluations\' in hyperparameter_optimization_config: #TODO add support for inner parameters of hyperopt\n            #     hyperparameter_optimizations.filter(max_evaluations=hyperparameter_optimization_config[\'max_evaluations\'])\n            # if \'performance_metric\' in hyperparameter_optimization_config:\n            #     hyperparameter_optimizations.filter(performance_metric=hyperparameter_optimization_config[\'performance_metric\'])\n            # if \'algorithm_type\' in hyperparameter_optimization_config:\n            #     hyperparameter_optimizations.filter(algorithm_type=hyperparameter_optimization_config[\'algorithm_type\'])\n            jobs = jobs.filter(hyperparameter_optimizer__in=[element.id for element in hyperparameter_optimizations])\n        # elif incremental_train_config is not None:\n        #     incremental_train = # TODO ADD RECURSION TO THIS FUNCTION\n        #     jobs = jobs.filter(incremental_train=incremental_train)\n\n        return jobs\n\n    # TODO remove?\n    @staticmethod\n    def post(request):\n        serializer = JobSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=201)\n        return Response(serializer.errors, status=400)\n\n\nclass JobDetail(RetrieveModelMixin, GenericAPIView):\n    queryset = Job.objects.all()\n    serializer_class = JobSerializer\n\n    def get(self, request, *args, **kwargs):\n        return self.retrieve(request, *args, **kwargs)\n\n    def delete(self, request, *args, **kwargs):\n        job = self.queryset.get(pk=kwargs[\'pk\'])\n        job.delete()\n        return Response(status=status.HTTP_204_NO_CONTENT)\n\n\n@api_view([\'POST\'])\ndef create_multiple(request):\n    """"""No request validation""""""\n    payload = json.loads(request.body.decode(\'utf-8\'))\n    try:\n        split = Split.objects.get(pk=payload[\'split_id\'])\n    except Split.DoesNotExist:\n        return Response({\'error\': \'split_id \' + str(payload[\'split_id\']) + \' not in database\'}, status=status.HTTP_404_NOT_FOUND)\n\n    # detect either or not a predictive_model to update has been specified otherwise train a new one.\n    if \'incremental_train\' in payload[\'config\'] and len(payload[\'config\'][\'incremental_train\']) > 0:\n        jobs = update(split, payload)\n    elif payload[\'type\'] in [e.value for e in PredictiveModels]:\n        jobs = generate(split, payload)\n    elif payload[\'type\'] == JobTypes.LABELLING.value:\n        jobs = generate_labelling(split, payload)\n    else:\n        return Response({\'error\': \'type not supported\'.format(payload[\'type\'])},\n                        status=status.HTTP_422_UNPROCESSABLE_ENTITY)\n    for job in jobs:\n        # TODO add support for \'depends_on\' parameter\n        django_rq.enqueue(tasks.prediction_task, job.id)\n    serializer = JobSerializer(jobs, many=True)\n    return Response(serializer.data, status=201)\n\n\n@api_view([\'GET\'])\ndef get_decoded_df(request, pk):\n    job = Job.objects.filter(pk=pk)[0]\n    training_df, test_df = get_encoded_logs(job)\n    training_df = training_df.drop([\'trace_id\'], 1)\n    encoder = retrieve_proper_encoder(job)\n    encoder.decode(training_df, job.encoding)\n    return Response(training_df, status=200)\n\n\n@api_view([\'GET\'])\ndef get_unique_values(request, pk):\n    job = Job.objects.filter(pk=pk)[0]\n    training_df, test_df = get_encoded_logs(job)\n    decoded_training_df = training_df.copy()\n    decoded_testing_df = test_df.copy()\n    training_df = training_df.drop([\'trace_id\',\'label\'], 1)\n\n    encoder = retrieve_proper_encoder(job)\n    encoder.decode(df=decoded_training_df, encoding=job.encoding)\n    encoder.decode(df=decoded_testing_df, encoding=job.encoding)\n\n    result_df = {}\n    for key in training_df.keys():\n        result_decoded_df = list(set(list(training_df[key]) + list(test_df[key])))\n        result_encoded_df= list(set(list(decoded_training_df[key]) + list(decoded_testing_df[key])))\n\n        result_df[key] = {}\n        for k in range(len(result_decoded_df)):\n            result_df[key][result_encoded_df[k]] = result_decoded_df[k]\n    return Response(result_df, status=200)\n'"
src/jobs/ws_publisher.py,0,"b'from ws4redis.publisher import RedisPublisher\nfrom ws4redis.redis_store import RedisMessage\n\nfrom src.jobs.serializers import JobSerializer\nfrom src.logs.serializers import LogSerializer\n\nredis_publisher = RedisPublisher(facility=\'default\', broadcast=True)\nfrom rest_framework.renderers import JSONRenderer  # TODO: check module import not at top level\n\n\ndef publish(object):\n    """"""\n    Publish an object to websocket listeners\n    :param object: A Django predictive_model\n    :return: {type: object class name, data: OBJECT}\n    """"""\n    message = RedisMessage(_serializer(object))\n    redis_publisher.publish_message(message)\n\n\ndef _serializer(object):\n    """"""Assumed to be Django models""""""\n    name = object.__class__.__name__\n    if name == \'Log\':\n        data = LogSerializer(object).data\n    elif name == \'Job\':\n        data = JobSerializer(object).data\n    #elif name == \'XTrace\':\n     #   data = TraceSerializer(object).data\n    else:\n        raise NotImplementedError(""Websocket not implemented for class "".format(name))\n    return JSONRenderer().render({\'type\': name, \'data\': data})\n'"
src/labelling/__init__.py,0,b''
src/labelling/apps.py,0,"b""from django.apps import AppConfig\n\n\nclass LabellingConfig(AppConfig):\n    name = 'src.labelling'\n"""
src/labelling/common.py,0,"b'from pm4py.objects.log.log import EventLog\n\nfrom src.encoding.models import Encoding\nfrom src.labelling.models import LabelTypes, Labelling\nfrom src.utils.log_metrics import events_by_date, resources_by_date, new_trace_start\nfrom src.utils.time_metrics import elapsed_time_id, remaining_time_id, count_on_event_day, duration\n\n\ndef get_intercase_attributes(log: EventLog, encoding: Encoding):\n    """"""Dict of kwargs\n    These intercase attributes are expensive operations!!!\n    """"""\n    # Expensive operations\n    executed_events = events_by_date(log) if encoding.add_executed_events else None\n    resources_used = resources_by_date(log) if encoding.add_resources_used else None\n    new_traces = new_trace_start(log) if encoding.add_new_traces else None\n    kwargs = {\'executed_events\': executed_events, \'resources_used\': resources_used, \'new_traces\': new_traces}\n    # \'label\': label}  TODO: is it really necessary to add this field in the dict?\n    return kwargs\n\n\ndef compute_label_columns(columns: list, encoding: Encoding, labelling: Labelling) -> list:\n    if labelling.type == LabelTypes.NO_LABEL.value:\n        return columns\n    if encoding.add_elapsed_time:\n        columns.append(\'elapsed_time\')\n    if encoding.add_remaining_time and labelling.type != LabelTypes.REMAINING_TIME.value:\n        columns.append(\'remaining_time\')\n    if encoding.add_executed_events:\n        columns.append(\'executed_events\')\n    if encoding.add_resources_used:\n        columns.append(\'resources_used\')\n    if encoding.add_new_traces:\n        columns.append(\'new_traces\')\n    columns.append(\'label\')\n    return columns\n\n\ndef add_labels(encoding: Encoding, labelling: Labelling, prefix_length: int, trace, attribute_classifier=None,\n               executed_events=None, resources_used=None, new_traces=None):\n    """"""\n    Adds any number of label cells with last as label\n    """"""\n    labels = []\n    if labelling.type == LabelTypes.NO_LABEL.value:\n        return labels\n    # Values that can just be there\n    if encoding.add_elapsed_time:\n        labels.append(elapsed_time_id(trace, prefix_length - 1))\n    if encoding.add_remaining_time and labelling.type != LabelTypes.REMAINING_TIME.value:\n        labels.append(remaining_time_id(trace, prefix_length - 1))\n    if encoding.add_executed_events:\n        labels.append(count_on_event_day(trace, executed_events, prefix_length - 1))\n    if encoding.add_resources_used:\n        labels.append(count_on_event_day(trace, resources_used, prefix_length - 1))\n    if encoding.add_new_traces:\n        labels.append(count_on_event_day(trace, new_traces, prefix_length - 1))\n    # Label\n    if labelling.type == LabelTypes.REMAINING_TIME.value:\n        labels.append(remaining_time_id(trace, prefix_length - 1))\n    elif labelling.type == LabelTypes.NEXT_ACTIVITY.value:\n        labels.append(next_event_name(trace, prefix_length))\n    elif labelling.type == LabelTypes.ATTRIBUTE_STRING.value or labelling.type == LabelTypes.ATTRIBUTE_NUMBER.value:\n        labels.append(trace.attributes[attribute_classifier])\n    elif labelling.type == LabelTypes.DURATION.value:\n        labels.append(duration(trace))\n    return labels\n\n\ndef next_event_name(trace: list, prefix_length: int):\n    """"""Return the event event name at prefix length or 0 if out of range.\n\n    """"""\n    if prefix_length < len(trace):\n        next_event = trace[prefix_length]\n        name = next_event[\'concept:name\']\n        return name\n    else:\n        return 0\n'"
src/labelling/label_container.py,0,"b'from collections import namedtuple\n\nfrom src.labelling.models import LabelTypes, ThresholdTypes\n\n\nclass LabelContainer(namedtuple(\'LabelContainer\', [\'type\', \'attribute_name\', \'threshold_type\', \'threshold\',\n                                                   \'add_remaining_time\', \'add_elapsed_time\', \'add_executed_events\',\n                                                   \'add_resources_used\', \'add_new_traces\'])):\n    """"""Inner object describing labelling state.\n    For no labelling use NO_LABEL\n\n    This is a horrible hack and should be split into a label container and a container for encoding options, like\n    what to add to the encoded log.\n    """"""\n\n    def __new__(cls, type: str = LabelTypes.REMAINING_TIME.value, attribute_name: str = None,\n                threshold_type: str = ThresholdTypes.THRESHOLD_MEAN.value,\n                threshold: int = 0, add_remaining_time: bool = False, add_elapsed_time: bool = False,\n                add_executed_events: bool = False, add_resources_used: bool = False, add_new_traces: bool = False):\n        # noinspection PyArgumentList\n        return super(LabelContainer, cls).__new__(cls, type, attribute_name, threshold_type, threshold,\n                                                  add_remaining_time, add_elapsed_time, add_executed_events,\n                                                  add_resources_used, add_new_traces)\n'"
src/labelling/models.py,0,"b""from enum import Enum\n\nfrom django.db import models\nfrom django.contrib.postgres.fields import JSONField\n\nfrom src.common.models import CommonModel\n\n\nclass LabelTypes(Enum):\n    NEXT_ACTIVITY = 'next_activity'\n    ATTRIBUTE_STRING = 'attribute_string'\n    ATTRIBUTE_NUMBER = 'attribute_number'\n    REMAINING_TIME = 'remaining_time'\n    DURATION = 'duration'\n    NO_LABEL = 'no_label'\n\n\nclass ThresholdTypes(Enum):\n    THRESHOLD_MEAN = 'threshold_mean'\n    THRESHOLD_CUSTOM = 'threshold_custom'\n    NONE = 'none'\n\n\n#\n# CLASSIFICATION_LABELS = [NEXT_ACTIVITY, ATTRIBUTE_STRING, ATTRIBUTE_NUMBER, THRESHOLD_MEAN, THRESHOLD_CUSTOM]\n#\n# REGRESSION_LABELS = [REMAINING_TIME, ATTRIBUTE_NUMBER]\n#\n# TIME_SERIES_PREDICTION_LABELS = [NEXT_ACTIVITY]  # TODO: check for using NO_LABEL\n\n\nLABELLING_TYPE_MAPPINGS = (\n    (LabelTypes.NEXT_ACTIVITY.value, 'next_activity'),\n    (LabelTypes.ATTRIBUTE_STRING.value, 'attribute_string'),\n    (LabelTypes.ATTRIBUTE_NUMBER.value, 'attribute_number'),\n    (LabelTypes.REMAINING_TIME.value, 'remaining_time'),\n    (LabelTypes.DURATION.value, 'duration'),\n    (LabelTypes.NO_LABEL.value, 'no_label')\n)\n\nTHRESHOLD_TYPE_MAPPINGS = (\n    (ThresholdTypes.THRESHOLD_MEAN.value, 'threshold_mean'),\n    (ThresholdTypes.THRESHOLD_CUSTOM.value, 'threshold_custom'),\n    (ThresholdTypes.NONE.value, 'none')\n)\n\n\nclass Labelling(CommonModel):\n    type = models.CharField(choices=LABELLING_TYPE_MAPPINGS, default='attribute_string', max_length=max(len(el[1]) for el in LABELLING_TYPE_MAPPINGS)+1, null=True, blank=True)\n    attribute_name = models.CharField(default=None, max_length=20, null=True, blank=True)\n    threshold_type = models.CharField(choices=THRESHOLD_TYPE_MAPPINGS, default='none', max_length=max(len(el[1]) for el in THRESHOLD_TYPE_MAPPINGS) + 1, null=True, blank=True)\n    threshold = models.IntegerField(default=0, null=True, blank=True)\n    results = JSONField(default=dict)\n\n    def to_dict(self):\n        return {\n            'type': self.type,\n            'attribute_name': self.attribute_name,\n            'threshold_type': self.threshold_type,\n            'threshold': self.threshold,\n            'results': self.results\n        }\n"""
src/logs/__init__.py,0,b''
src/logs/admin.py,0,b'from django.contrib import admin\n\nfrom src.split.models import Split\nfrom .models import Log\n\nadmin.site.register(Log)\nadmin.site.register(Split)\n'
src/logs/apps.py,0,"b""from django.apps import AppConfig\n\n\nclass LogsConfig(AppConfig):\n    name = 'src.logs'\n"""
src/logs/log_service.py,0,"b'import logging\n\nfrom django.core.files.base import ContentFile\nfrom django.core.files.storage import default_storage\nfrom pm4py.objects.log.exporter.xes.factory import export_log\nfrom pm4py.objects.log.importer.xes.factory import import_log\nfrom pm4py.objects.log.log import EventLog\n\nfrom src.logs.models import Log\nfrom src.utils.file_service import create_unique_name\nfrom src.utils.log_metrics import events_by_date, resources_by_date, max_events_in_log, trace_attributes, \\\n    new_trace_start, avg_events_in_log, std_var_events_in_log, trace_ids_in_log, traces_in_log\n\nlogger = logging.getLogger(__name__)\n\n\ndef create_log(log, name: str, folder=\'cache/log_cache/\', import_in_cache=True):\n    logger.info(\'\\tCreating new file (\' + name + \') in memory\')\n    if import_in_cache:\n        name = create_unique_name(name)\n    path = folder + name\n    if import_in_cache:\n        if isinstance(log, EventLog):\n            export_log(log, path)\n        else:\n            default_storage.save(path, ContentFile(log.read()))\n            log = import_log(path)\n    else:  # TODO: this might be risky\n        if not isinstance(log, EventLog):\n            log = import_log(path)\n    properties = create_properties(log)\n    return Log.objects.create(name=name, path=path, properties=properties)\n\n\ndef create_properties(log: EventLog) -> dict:\n    """"""Create read-only dict with methods in this class""""""\n    return {\n        \'events\': events_by_date(log),\n        \'resources\': resources_by_date(log),\n        \'maxEventsInLog\': max_events_in_log(log),\n        \'avgEventsInLog\': avg_events_in_log(log),\n        \'stdVarEventsInLog\': std_var_events_in_log(log) if len(log) > 1 else -1,\n        \'traceAttributes\': trace_attributes(log),\n        \'newTraces\': new_trace_start(log),\n        \'trace_IDs\': trace_ids_in_log(log)\n        # \'alpha_miner_result\': vis_factory.apply(*alpha_miner.apply(log)) #TODO ADD alpha miner\n    }\n\n\ndef get_log_trace_attributes(log: EventLog) -> list:\n    return traces_in_log(log)\n'"
src/logs/models.py,0,"b'from django.db import models\nfrom django.contrib.postgres.fields import JSONField\n\nfrom src.common.models import CommonModel\n\n\nclass Log(CommonModel):\n    """"""A XES log file on disk""""""\n    name = models.CharField(max_length=200)\n    path = models.FilePathField(path=\'cache/log_cache/\')\n    properties = JSONField(default=dict)\n\n    def to_dict(self):\n        return {\n            \'name\': self.name,\n            \'path\': self.path,\n            \'properties\': self.properties\n        }\n'"
src/logs/serializers.py,0,"b""from rest_framework import serializers\n\nfrom .models import Log\n\n\nclass LogSerializer(serializers.ModelSerializer):\n    properties = serializers.JSONField()\n\n    class Meta:\n        model = Log\n        fields = ('id', 'name', 'properties')\n"""
src/logs/urls.py,0,"b""from django.conf.urls import url\n\nfrom . import views\n\nurlpatterns = [\n    url(r'^$', views.LogList.as_view()),\n    url(r'^(?P<pk>[0-9]+)$', views.LogDetail.as_view()),\n    url(r'^(?P<pk>[0-9]+)/traces', views.get_log_traces_attributes),\n    # url(r'^(?P<pk>[0-9]+)/(?P<stat>events|resources|executions|traceAttributes|eventsInTrace|newTraces)$',\n    #     views.get_log_stats),\n]\n"""
src/logs/views.py,0,"b'import logging\n\n# from pm4py.algo.discovery.alpha import factory as alpha_miner\nfrom django.http import HttpResponse\nfrom rest_framework import status, mixins, generics\nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\n\nfrom src.logs.log_service import create_log\nfrom src.split.models import Split\nfrom src.split.serializers import SplitSerializer\nfrom .models import Log\nfrom .serializers import LogSerializer\nfrom src.logs.log_service import create_log, get_log_trace_attributes\nfrom ..utils.file_service import get_log\nfrom pm4py.objects.log.importer.xes import factory as xes_importer\n\nlogger = logging.getLogger(__name__)\n\n\nclass LogList(mixins.ListModelMixin, generics.GenericAPIView):\n    queryset = Log.objects.all()\n    serializer_class = LogSerializer\n\n    def get(self, request, *args, **kwargs):\n        return self.list(request, *args, **kwargs)\n\n    def post(self, request):\n        log = create_log(self.request.FILES[\'single\'], self.request.FILES[\'single\'].name)\n        serializer = LogSerializer(log)\n        return Response(serializer.data, status=status.HTTP_201_CREATED)\n\n\nclass LogDetail(mixins.RetrieveModelMixin, generics.GenericAPIView):\n    queryset = Log.objects.all()\n    serializer_class = LogSerializer\n\n    def get(self, request, *args, **kwargs):\n        return self.retrieve(request, *args, **kwargs)\n\n\n# @api_view([\'GET\'])\n# def get_log_stats(request, pk, stat):\n#     """"""Get log statistics\n#\n#     DEPRECATED ENDPOINT. LOGS HAVE PROPERTIES.\n#\n#     End URL with\n#     * events for event_by_date\n#     * resources for resources_by_date\n#     * executions for event_executions\n#     * traceAttributes for trace_attributes\n#     * eventsInTrace for events_in_trace\n#     * newTraces for new_trace_start\n#     """"""\n#     try:\n#         log = Log.objects.get(pk=pk)\n#     except Log.DoesNotExist:\n#         return Response({\'error\': \'not in database\'}, status=status.HTTP_404_NOT_FOUND)\n#     try:\n#         log_file = log.get_file()\n#     except FileNotFoundError:\n#         logger.error(""Log id: %s, path %s not found"", log.id, log.path)\n#         return Response({\'error\': \'log file not found\'}, status=status.HTTP_404_NOT_FOUND)\n#\n#     if stat == \'events\':\n#         data = events_by_date(log_file)\n#     elif stat == \'resources\':\n#         data = resources_by_date(log_file)\n#     elif stat == \'traceAttributes\':\n#         data = trace_attributes(log_file)\n#     elif stat == \'eventsInTrace\':\n#         data = events_in_trace(log_file)\n#     elif stat == \'executions\':\n#         data = event_executions(log_file)\n#     elif stat == \'newTraces\':\n#         data = new_trace_start(log_file)\n#     elif stat == \'alpha_miner\':\n#         data = alpha_miner.apply(log)\n#     else:\n#         logger.info(\'stats error in get_log_stats, setting data to None\')\n#         data = None\n#     return Response(data)\n\n\n@api_view([\'GET\'])\ndef get_log_traces_attributes(request, pk):\n    log = Log.objects.get(pk=pk)\n    try:\n        log_file = get_log(log)\n\n    except FileNotFoundError:\n        logger.error(""Log id: %s, path %s not found"", log.id, log.path)\n        return Response({\'error\': \'log file not found\'}, status=status.HTTP_404_NOT_FOUND)\n    value = get_log_trace_attributes(log_file)\n    return Response(value, status=status.HTTP_200_OK)\n\n\n@api_view([\'POST\'])\ndef upload_multiple(request):\n    logger.info(\'Double upload request received.\')\n    test_log = create_log(request.FILES[\'testSet\'], request.FILES[\'testSet\'].name)\n    train_log = create_log(request.FILES[\'trainingSet\'], request.FILES[\'trainingSet\'].name)\n\n    item = Split.objects.create(\n        type=\'double\',\n        train_log=train_log,\n        test_log=test_log)\n    serializer = SplitSerializer(item)\n    return Response(serializer.data, status=status.HTTP_201_CREATED)\n\n\n@api_view([\'GET\'])\ndef get_split_train_logs(request, pk):\n    try:\n        value = Split.objects.get(pk=pk)\n    except:\n        return Response(""No file found by the given id"", status=status.HTTP_404_NOT_FOUND)\n    with open(value.train_log.path, \'r\') as f:\n        data = f.read()\n    response = HttpResponse(data, content_type=\'application/xes\')\n    response[\'Content-Disposition\'] = \'attachment; filename=\' + value.train_log.name\n    return response\n\n\n@api_view([\'GET\'])\ndef get_split_test_logs(request, pk):\n    try:\n        value = Split.objects.get(pk=pk)\n    except:\n        return Response(""No file found by the given id"", status=status.HTTP_404_NOT_FOUND)\n    with open(value.test_log.path, \'r\') as f:\n        data = f.read()\n    response = HttpResponse(data, content_type=\'application/xes\')\n    response[\'Content-Disposition\'] = \'attachment; filename=\' + value.test_log.name\n    return response\n\n\nclass SplitDetail(mixins.RetrieveModelMixin, generics.GenericAPIView):\n    queryset = Split.objects.all()\n    serializer_class = SplitSerializer\n\n    def get(self, request, *args, **kwargs):\n        return self.retrieve(request, *args, **kwargs)\n'"
src/predictive_model/__init__.py,0,b''
src/predictive_model/apps.py,0,"b""from django.apps import AppConfig\n\n\nclass PredictiveModelConfig(AppConfig):\n    name = 'src.predictive_model'\n"""
src/predictive_model/models.py,0,"b'from enum import Enum\n\nfrom django.db import models\nfrom model_utils.managers import InheritanceManager\nfrom polymorphic.models import PolymorphicModel\n\nfrom src.common.models import CommonModel\n\n\nclass PredictiveModels(Enum):\n    CLASSIFICATION = \'classification\'\n    REGRESSION = \'regression\'\n    TIME_SERIES_PREDICTION = \'time_series_prediction\'\n\n\nPREDICTIVE_MODEL_MAPPINGS = (\n    (PredictiveModels.CLASSIFICATION.value, \'classification\'),\n    (PredictiveModels.REGRESSION.value, \'regression\'),\n    (PredictiveModels.TIME_SERIES_PREDICTION.value, \'time_series_prediction\')\n)\n\n\nclass PredictiveModel(CommonModel):\n    """"""Container of Classification to be shown in frontend""""""\n    model_path = models.FilePathField(path=\'cache/model_cache/\')\n    predictive_model = models.CharField(choices=PREDICTIVE_MODEL_MAPPINGS, max_length=max(len(el[1]) for el in PREDICTIVE_MODEL_MAPPINGS)+1)\n    prediction_method = models.CharField(max_length=50)\n    objects = InheritanceManager()\n\n    @staticmethod\n    def init(configuration: dict):\n        prediction_type = configuration[\'predictive_model\']\n        if prediction_type == PredictiveModels.CLASSIFICATION.value:\n            from src.predictive_model.classification.models import Classification\n            return Classification.init(configuration)\n        elif prediction_type == PredictiveModels.REGRESSION.value:\n            from src.predictive_model.regression.models import Regression\n            return Regression.init(configuration)\n        elif prediction_type == PredictiveModels.TIME_SERIES_PREDICTION.value:\n            from src.predictive_model.time_series_prediction.models import TimeSeriesPrediction\n            return TimeSeriesPrediction.init(configuration)\n        else:\n            raise ValueError(\'predictive model type {} not recognized\'.format(prediction_type))\n\n    def to_dict(self):\n        return {\n            \'model_path\': self.model_path,\n            \'predictive_model\': self.predictive_model,\n            \'prediction_method\': self.prediction_method\n        }\n'"
src/runtime/__init__.py,0,b''
src/runtime/apps.py,0,"b""from django.apps import AppConfig\n\n\nclass RuntimeConfig(AppConfig):\n    name = 'src.runtime'\n"""
src/runtime/replay.py,0,"b'import json\nimport logging\nimport requests\n\nfrom pm4py.objects.log.exporter.xes.factory import export_log_as_string\nfrom pm4py.objects.log.log import EventLog, Trace\nfrom pm4py.algo.filtering.log.timestamp import timestamp_filter\n\nfrom src.encoding.common import encode_label_logs\nfrom src.jobs.models import Job, JobTypes\nfrom src.split.splitting import get_train_test_log\nfrom src.utils.django_orm import duplicate_orm_row\nfrom src.utils.file_service import get_log\n\nlogger = logging.getLogger(__name__)\n\n\ndef replay_core(replay_job: Job, training_initial_job: Job) -> list:\n    """"""The function create a set with timestamps of events, then create a list of requests\n        simulating the log in the time passing\n\n        :param replay_job: job dictionary\n        :param training_initial_job: job dictionary\n        :return: List of requests\n    """"""\n\n    split = replay_job.split\n    log = get_log(split.train_log)\n    requests_list = list()\n\n    eventlog = EventLog()\n    for key in log.attributes.keys():\n        eventlog.attributes[key] = log.attributes[key]\n    for trace in log:\n        new_trace = Trace(trace)\n        for key in trace.attributes:\n            new_trace.attributes[key] = trace.attributes[key]\n        eventlog.append(new_trace)\n\n    times = sorted(set([event[\'time:timestamp\'] for trace in eventlog for event in trace]))\n\n    for t in times[2::5]:\n        filtered_eventlog = timestamp_filter.apply_events(eventlog, times[0].replace(tzinfo=None),\n                                                          t.replace(tzinfo=None))\n        trace_list = list()\n        event_number = dict()\n        for trace in filtered_eventlog:\n            trace_list.append(trace.attributes[\'concept:name\'])\n            event_number[trace.attributes[\'concept:name\']] = len(trace)\n        replay_job.case_id = trace_list\n        replay_job.event_number = event_number\n        replay_job.save()\n        try: #TODO check logger usage\n            logger.info(""Sending request for replay_prediction task."")\n            r = requests.post(\n                url=""http://server:8000/runtime/replay_prediction/"",\n                data=export_log_as_string(filtered_eventlog),\n                params={\'jobId\': replay_job.id, \'training_job\': training_initial_job.id},\n                headers={\'Content-Type\': \'text/plain\', \'charset\': \'UTF-8\'}\n            )\n            requests_list.append(str(r))\n        except Exception as e:\n            requests_list.append(str(e))\n            logger.warning(str(e))\n\n    training_log, test_log, additional_columns = get_train_test_log(replay_job.split)\n    training_df, _ = encode_label_logs(training_log, test_log, replay_job, additional_columns=additional_columns)\n\n    gold_values = dict(zip(training_df[\'trace_id\'], training_df[\'label\']))\n    parent_id = replay_job.id\n    final_job = duplicate_orm_row(replay_job)\n    final_job.parent_job = Job.objects.filter(pk=parent_id)[0]\n    final_job.gold_value = gold_values\n    final_job.type = JobTypes.REPLAY_PREDICT.value\n    final_job.save()\n    return requests_list\n\n\ndef replay_prediction(replay_job: Job, training_initial_job: Job, trace_id) -> list:\n    """"""The function create a set with timestamps of events, then create a list of requests\n        simulating the log in the time passing\n        :param trace_id:\n        :param replay_job: job dictionary\n        :param training_initial_job: job dictionary\n        :return: List of requests\n    """"""\n\n    split = replay_job.split\n    log = get_log(split.train_log)\n    requests_list = list()\n    eventlog = EventLog()\n    trace = log[int(trace_id)]\n    for key in log.attributes.keys():\n        eventlog.attributes[key] = log.attributes[key]\n    for index in range(len(trace)):\n        new_trace = Trace(trace[0:index])\n        for key in trace.attributes:\n            new_trace.attributes[key] = trace.attributes[key]\n        eventlog.append(new_trace)\n    replay_job.case_id = trace_id\n    replay_job.event_number = len(trace)\n    replay_job.save()\n    try:\n        logger.error(""Sending request for replay_prediction task."")\n        r = requests.post(\n            url=""http://127.0.0.1:8000/runtime/replay_prediction/"",\n            data=export_log_as_string(eventlog),\n            params={\'jobId\': replay_job.id, \'training_job\': training_initial_job.id},\n            headers={\'Content-Type\': \'text/plain\', \'charset\': \'UTF-8\'}\n        )\n        requests_list.append(str(r))\n    except Exception as e:\n        requests_list.append(str(e))\n        logger.warning(str(e))\n\n    return requests_list\n'"
src/runtime/tasks.py,0,"b'import json\nimport logging\n\nimport numpy\nfrom django_rq.decorators import job\nfrom rest_framework import status\n\nfrom src.core.core import runtime_calculate, replay_prediction_calculate\nfrom src.encoding.models import Encoding\nfrom src.jobs.models import JobStatuses, JobTypes, Job\nfrom src.jobs.tasks import prediction_task\nfrom src.jobs.ws_publisher import publish\nfrom src.logs.models import Log\nfrom src.split.models import Split\nfrom src.utils.django_orm import duplicate_orm_row\nfrom .replay import replay_core\n\nlogger = logging.getLogger(__name__)\n\n\n@job(""default"", timeout=\'100h\')\ndef runtime_task(job: Job):\n    """""" The function create a runtime task to ask a single prediction to the server\n\n        :param job: job dictionary\n    """"""\n    logger.info(""Start runtime task ID {}"".format(job.id))\n    try:\n        job.status = JobStatuses.RUNNING.value\n        job.save()\n        result = runtime_calculate(job)\n        job.results = {\'result\': str(result)}\n        job.status = JobStatuses.COMPLETED.value\n        job.error = \'\'\n    except Exception as e:\n        logger.error(e)\n        job.status = JobStatuses.ERROR.value\n        job.error = str(e.__repr__())\n        raise e\n    finally:\n        job.save()\n        publish(job)\n\n\n@job(""default"", timeout=\'100h\')\ndef replay_prediction_task(replay_prediction_job: Job, training_initial_job: Job, log: Log):\n    """""" The function create a replat prediction task to ask a single prediction to the server for a portion of a trace\n\n        :param replay_prediction_job: job dictionary\n        :param training_initial_job: job dictionary\n        :param log: job dictionary\n    """"""\n    logger.info(""Start replay_prediction task ID {}"".format(replay_prediction_job.id))\n    try:\n        replay_prediction_job.status = JobStatuses.RUNNING.value\n        replay_prediction_job.save()\n        max_len = max(len(trace) for trace in log)\n        if replay_prediction_job.encoding.prefix_length != max_len:\n            prediction_job = create_prediction_job(training_initial_job, max_len)\n            prediction_task(prediction_job.id)\n            prediction_job.refresh_from_db()\n            new_replay_prediction_job = duplicate_orm_row(prediction_job)\n            new_replay_prediction_job.split = Split.objects.filter(pk=replay_prediction_job.split.id)[0]\n            new_replay_prediction_job.type = JobTypes.REPLAY_PREDICT.value\n            new_replay_prediction_job.parent_job = replay_prediction_job.parent_job\n            new_replay_prediction_job.status = JobStatuses.CREATED.value\n            replay_prediction_task(new_replay_prediction_job, prediction_job, log)\n            return\n        result_dict, events_for_trace = replay_prediction_calculate(replay_prediction_job, log)\n        replay_prediction_job.results = dict(result_dict)\n        replay_prediction_job.event_number = dict(events_for_trace)\n        replay_prediction_job.status = JobStatuses.COMPLETED.value\n        replay_prediction_job.error = \'\'\n    except Exception as e:\n        logger.error(e)\n        replay_prediction_job.status = JobStatuses.ERROR.value\n        replay_prediction_job.error = str(e.__repr__())\n        raise e\n    finally:\n        replay_prediction_job.save()\n        publish(replay_prediction_job)\n\n\n@job(""default"", timeout=\'100h\')\ndef replay_task(replay_job: Job, training_initial_job: Job) -> list:\n    """""" The function create a replay task to ask the server to demo the arriving of events\n\n        :param replay_job: job dictionary\n        :param training_initial_job: job dictionary\n        :return: List of requests\n    """"""\n    logger.error(""Start replay task ID {}"".format(replay_job.id))\n    requests = list()\n    try:\n        replay_job.status = JobStatuses.RUNNING.value\n        replay_job.error = \'\'\n        replay_job.save()\n        requests = replay_core(replay_job, training_initial_job)\n        replay_job.status = JobStatuses.COMPLETED.value\n        for r in requests:\n            if r.status_code != status.HTTP_201_CREATED:\n                replay_job.error += [r]\n    except Exception as e:\n        logger.error(e)\n        replay_job.status = JobStatuses.ERROR.value\n        replay_job.error += [str(e.__repr__())]\n        raise e\n    finally:\n        replay_job.save()\n        publish(replay_job)\n        return requests\n\n\ndef create_prediction_job(job: Job, max_len: int) -> Job:\n    """""" The function create a new prediction job to create a model when it isn\'t in the database\n\n        :param job: job dictionary\n        :param max_len: job dictionary\n        :return: Job\n    """"""\n    new_job = duplicate_orm_row(job)\n    new_job.type = JobTypes.PREDICTION.value\n    new_job.status = JobStatuses.CREATED.value\n    new_encoding = duplicate_orm_row(Encoding.objects.filter(pk=job.encoding.id)[0])\n    new_encoding.prefix_length = max_len\n    new_encoding.save()\n    new_job.encoding = new_encoding\n    new_job.create_models = True\n    new_job.save()\n    return new_job\n'"
src/runtime/urls.py,0,"b""from django.conf.urls import url\n\nfrom . import views\n\nurlpatterns = [\n    url(r'^prediction/', views.post_prediction),\n    url(r'^replay/', views.post_replay),\n    url(r'^replay_prediction/', views.post_replay_prediction),\n    url(r'^predictions/(?P<pk>[0-9]+)&(?P<explanation_target>[0-9]+)', views.get_prediction),\n\n]\n"""
src/runtime/views.py,0,"b'import logging\nimport django_rq\nfrom pm4py.objects.log.importer.xes.factory import import_log_from_string\nfrom rest_framework import status\nfrom rest_framework.decorators import api_view, parser_classes\nfrom rest_framework.response import Response\n\nfrom src.jobs.models import Job, JobTypes, JobStatuses\nfrom src.jobs.serializers import JobSerializer\nfrom src.runtime.tasks import runtime_task, replay_prediction_task, replay_task\nfrom src.split.models import Split\nfrom src.utils.custom_parser import CustomXMLParser\nfrom src.utils.django_orm import duplicate_orm_row\n\nlogger = logging.getLogger(__name__)\n\n\n@api_view([\'POST\'])\ndef post_prediction(request):\n    """""" Post request to have a single static prediction\n\n        :param request: json\n        :return: Response\n    """"""\n    jobs = []\n    data = request.data\n    job_id = int(data[\'jobId\'])\n    split_id = int(data[\'splitId\'])\n    split = Split.objects.get(pk=split_id)\n\n    try:\n        job = Job.objects.get(pk=job_id)\n        new_job = duplicate_orm_row(job)\n        new_job.type = JobTypes.RUNTIME.value\n        new_job.status = JobStatuses.CREATED.value\n        new_job.split = split\n        new_job.save()\n    except Job.DoesNotExist:\n        return Response({\'error\': \'Job \' + str(job_id) + \' not in database\'}, status=status.HTTP_404_NOT_FOUND)\n\n    django_rq.enqueue(runtime_task, new_job)\n    serializer = JobSerializer(jobs, many=True)\n    return Response(serializer.data, status=status.HTTP_201_CREATED)\n\n\n@api_view([\'POST\'])\n@parser_classes([CustomXMLParser])\ndef post_replay_prediction(request):\n    """""" Post request to have a single prediction during the replay of a log\n\n        :param request: json\n        :return: Response\n    """"""\n    jobs = []\n    job_id = int(request.query_params[\'jobId\'])\n    training_initial_job_id = int(request.query_params[\'training_job\'])\n    logger.info(""Creating replay_prediction task"")\n\n    try:\n        training_initial_job = Job.objects.get(pk=training_initial_job_id)\n        replay_job = Job.objects.filter(pk=job_id)[0]\n        replay_prediction_job = duplicate_orm_row(replay_job)\n        replay_prediction_job.parent_job = Job.objects.filter(pk=job_id)[0]\n        replay_prediction_job.type = JobTypes.REPLAY_PREDICT.value\n        replay_prediction_job.status = JobStatuses.CREATED.value\n        replay_prediction_job.save()\n    except Job.DoesNotExist:\n        return Response({\'error\': \'Job \' + str(job_id) + \' not in database\'}, status=status.HTTP_404_NOT_FOUND)\n\n    logger.info(""Enqueuing replay_prediction task ID {}"".format(replay_prediction_job.id))\n    log = import_log_from_string(request.data.decode(\'utf-8\'))\n    django_rq.enqueue(replay_prediction_task, replay_prediction_job, training_initial_job,  log)\n    serializer = JobSerializer(jobs, many=True)\n    return Response(serializer.data, status=status.HTTP_201_CREATED)\n\n\n@api_view([\'POST\'])\ndef post_replay(request):\n    """""" Post request to start a demo of a log arriving to server\n\n        :param request: json\n        :return: Response\n    """"""\n    jobs = []\n    data = request.data\n    split_id = int(data[\'splitId\'])\n    job_id = int(data[\'jobId\'])\n\n    split = Split.objects.get(pk=split_id)\n\n    try:\n        training_initial_job = Job.objects.get(pk=job_id)\n        new_job = duplicate_orm_row(training_initial_job)\n        new_job.type = JobTypes.REPLAY.value\n        new_job.status = JobStatuses.CREATED.value\n        new_job.split = split\n        new_job.save()\n    except Job.DoesNotExist:\n        return Response({\'error\': \'Job \' + str(job_id) + \' not in database\'}, status=status.HTTP_404_NOT_FOUND)\n\n    django_rq.enqueue(replay_task, new_job, training_initial_job)\n    serializer = JobSerializer(jobs, many=True)\n    return Response(serializer.data, status=status.HTTP_201_CREATED)\n\n\n@api_view([\'GET\'])\ndef get_prediction(request, pk, explanation_target):\n    """""" Post request to start a demo of a log arriving to server\n\n        :param pk:\n        :param explanation_target:\n        :param request: json\n        :return: Response\n    """"""\n    try:\n        training_initial_job = Job.objects.get(pk=pk)\n        new_job = duplicate_orm_row(training_initial_job)\n        new_job.type = JobTypes.REPLAY.value\n        new_job.status = JobStatuses.CREATED.value\n        new_job.save()\n    except Job.DoesNotExist:\n        return Response({\'error\': \'Job \' + str(pk) + \' not in database\'}, status=status.HTTP_404_NOT_FOUND)\n    return Response(replay_predictions(new_job, Job.objects.get(pk=pk), explanation_target), status=status.HTTP_200_OK)\n\n'"
src/split/__init__.py,0,b''
src/split/apps.py,0,"b""from django.apps import AppConfig\n\n\nclass SplitConfig(AppConfig):\n    name = 'src.split'\n"""
src/split/models.py,0,"b'from enum import Enum\n\nfrom django.core.validators import MinValueValidator, MaxValueValidator\nfrom django.db import models\n\nfrom src.common.models import CommonModel\nfrom src.logs.models import Log\n\n\nclass SplitTypes(Enum):\n    SPLIT_SINGLE = \'single\'\n    SPLIT_DOUBLE = \'double\'\n\n\nSPLIT_TYPE_MAPPINGS = (\n    (SplitTypes.SPLIT_SINGLE.value, \'single\'),\n    (SplitTypes.SPLIT_DOUBLE.value, \'double\'),\n)\n\n\nclass SplitOrderingMethods(Enum):\n    SPLIT_SEQUENTIAL = \'sequential\'\n    SPLIT_TEMPORAL = \'temporal\'\n    SPLIT_RANDOM = \'random\'\n    SPLIT_STRICT_TEMPORAL = \'strict_temporal\'\n\n\nSPLIT_ORDERING_METHOD_MAPPINGS = (\n    (SplitOrderingMethods.SPLIT_SEQUENTIAL.value, \'sequential\'),\n    (SplitOrderingMethods.SPLIT_TEMPORAL.value, \'temporal\'),\n    (SplitOrderingMethods.SPLIT_RANDOM.value, \'random\'),\n    (SplitOrderingMethods.SPLIT_STRICT_TEMPORAL.value, \'strict_temporal\')\n)\n\n\nclass Split(CommonModel):\n    """"""Container of Split to be shown in frontend""""""\n    type = models.CharField(choices=SPLIT_TYPE_MAPPINGS, default=\'single\', max_length=max(len(el[1]) for el in SPLIT_TYPE_MAPPINGS)+1)\n    original_log = models.ForeignKey(Log, on_delete=models.DO_NOTHING, related_name=\'original_log\', blank=True, null=True)\n    test_size = models.FloatField(default=0.2, validators=[MinValueValidator(0.0), MaxValueValidator(1.0)], blank=True, null=True)\n    splitting_method = models.CharField(choices=SPLIT_ORDERING_METHOD_MAPPINGS, default=\'sequential\', max_length=max(len(el[1]) for el in SPLIT_ORDERING_METHOD_MAPPINGS)+1)\n    train_log = models.ForeignKey(Log, on_delete=models.CASCADE, related_name=\'training_log\', blank=True, null=True)\n    test_log = models.ForeignKey(Log, on_delete=models.CASCADE, related_name=\'test_log\', blank=True, null=True)\n    additional_columns = models.FilePathField(path=\'cache/loaded_log_cache/\', blank=True, null=True, max_length=500)\n\n    def to_dict(self) -> dict:\n        temp = {\n            \'id\': self.pk,\n            \'type\': self.type,\n            \'test_size\': self.test_size,\n            \'splitting_method\': self.splitting_method,\n        }\n        if self.type == \'single\':\n            temp[\'original_log_path\'] = self.original_log.path\n        else:\n            temp[\'original_log\'] = self.original_log.id if self.original_log is not None else None\n            temp[\'test_log_path\'] = self.test_log.path\n            temp[\'train_log_path\'] = self.train_log.path\n        return temp\n'"
src/split/serializers.py,0,"b""from rest_framework import serializers\n\nfrom src.split.models import Split\n\n\nclass CreateSplitSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Split\n        fields = ('original_log', 'splitting_method', 'test_size')\n\n\nclass SplitSerializer(serializers.ModelSerializer):\n    training_log = serializers.SerializerMethodField()\n\n    def get_training_log(self, split):\n        return split.train_log.pk if split.train_log is not None else None\n\n    class Meta:\n        model = Split\n        fields = ('id', 'original_log', 'type', 'splitting_method', 'test_log', 'training_log', 'test_size')\n"""
src/split/splitting.py,0,"b'import functools\nimport logging\nfrom typing import Union\n\nfrom pm4py.objects.log.log import EventLog\nfrom sklearn.model_selection import train_test_split\n\nfrom src.logs.log_service import create_log\nfrom src.split.models import Split, SplitTypes, SplitOrderingMethods\nfrom src.utils.event_attributes import get_additional_columns\nfrom src.utils.file_service import get_log\n\nlogger = logging.getLogger(__name__)\n\n\ndef get_train_test_log(split: Split):\n    """"""Returns training_log and test_log""""""\n    if split.type == SplitTypes.SPLIT_SINGLE.value and Split.objects.filter(\n        type=SplitTypes.SPLIT_DOUBLE.value,\n        original_log=split.original_log,\n        test_size=split.test_size,\n        splitting_method=split.splitting_method\n    ).exists() and split.splitting_method != SplitOrderingMethods.SPLIT_RANDOM.value:\n        return get_train_test_log(Split.objects.filter(\n            type=SplitTypes.SPLIT_DOUBLE.value,\n            original_log=split.original_log,\n            test_size=split.test_size,\n            splitting_method=split.splitting_method\n        )[0])\n    elif split.original_log is not None and (not Split.objects.filter(\n        type=SplitTypes.SPLIT_DOUBLE.value,\n        original_log=split.original_log,\n        test_size=split.test_size,\n        splitting_method=split.splitting_method\n    ).exists() or split.splitting_method == SplitOrderingMethods.SPLIT_RANDOM.value):\n        training_log, test_log = _split_single_log(split)\n        additional_columns = get_additional_columns(get_log(split.original_log))\n\n        if split.splitting_method != SplitOrderingMethods.SPLIT_RANDOM.value:\n            _ = Split.objects.get_or_create(\n                type=SplitTypes.SPLIT_DOUBLE.value,\n                original_log=split.original_log,\n                test_size=split.test_size,\n                splitting_method=split.splitting_method,\n                train_log=create_log(EventLog(training_log), \'0-\' + str(100 - int(split.test_size * 100)) + \'.xes\'),\n                test_log=create_log(EventLog(test_log), str(100 - int(split.test_size * 100)) + \'-100.xes\'),\n                additional_columns=split.additional_columns\n            )[0]\n\n        logger.info(""\\t\\tLoaded single log from {}"".format(split.original_log.path))\n    else:\n        # Have to use sklearn to convert some internal data types\n        training_log = get_log(split.train_log)\n        additional_columns = get_additional_columns(training_log)\n        if split.additional_columns is None:\n            split.additional_columns = split.train_log.name + split.test_log.name + \'_ac.xes\'\n            split.save()\n        training_log, train_log_to_append = train_test_split(training_log, test_size=0, shuffle=False)\n        test_log, test_log_to_append = train_test_split(get_log(split.test_log), test_size=0, shuffle=False)\n        logger.info(""\\t\\tLoaded double logs from {} and {}."".format(split.train_log.path, split.test_log.path))\n    if len(training_log) == 0:\n        raise TypeError(""Training log is empty. Create a new Split with better parameters"")\n    return training_log, test_log, additional_columns\n\n\ndef _split_single_log(split: Split):\n    log = get_log(split.original_log)\n    logger.info(""\\t\\tExecute single split ID {}, split_type {}, test_size {}"".format(split.id, split.type, split.test_size))\n    if split.splitting_method == SplitOrderingMethods.SPLIT_TEMPORAL.value:\n        return _temporal_split(log, split.test_size)\n    elif split.splitting_method == SplitOrderingMethods.SPLIT_STRICT_TEMPORAL.value:\n        return _temporal_split_strict(log, split.test_size)\n    elif split.splitting_method == SplitOrderingMethods.SPLIT_SEQUENTIAL.value:\n        return _split_log(log, split.test_size, shuffle=False)\n    elif split.splitting_method == SplitOrderingMethods.SPLIT_RANDOM.value:\n        return _split_log(log, split.test_size, random_state=None)\n    else:\n        raise ValueError(\'splitting method {} not recognized\'.format(split.splitting_method))\n\n\ndef _temporal_split(log: EventLog, test_size: float):\n    """"""sort log by first event timestamp to enforce temporal order""""""\n    log = sorted(log, key=functools.cmp_to_key(_compare_trace_starts))\n    training_log, test_log = train_test_split(log, test_size=test_size, shuffle=False)\n    return training_log, test_log\n\n\ndef _temporal_split_strict(log: EventLog, test_size: float):\n    """"""Includes only training traces where it\'s last event ends before the first in test trace""""""\n    training_log, test_log = _temporal_split(log, test_size)\n    test_first_time = _trace_event_time(test_log[0])\n    training_log = filter(lambda x: _trace_event_time(x, event_index=-1) < test_first_time, training_log)\n    return list(training_log), test_log\n\n\ndef _split_log(log: EventLog, test_size: float, random_state: Union[int, None] = 4, shuffle=True):\n    training_log, test_log = train_test_split(log, test_size=test_size, random_state=random_state, shuffle=shuffle)\n    return training_log, test_log\n\n\ndef _compare_trace_starts(item1, item2):\n    first = _trace_event_time(item1)\n    second = _trace_event_time(item2)\n    if first < second:\n        return -1\n    elif first > second:\n        return 1\n    else:\n        return 0\n\n\ndef _trace_event_time(trace, event_index=0):\n    """"""Event time as Date. By default first event.""""""\n    return trace[event_index][\'time:timestamp\']\n'"
src/split/urls.py,0,"b""from django.conf.urls import url\n\nfrom src.logs.views import SplitDetail, upload_multiple, get_split_train_logs, get_split_test_logs\nfrom src.split.views import SplitList\n\nurlpatterns = [\n    url(r'^$', SplitList.as_view()),\n    url(r'^(?P<pk>[0-9]+)$', SplitDetail.as_view()),\n    url(r'multiple$', upload_multiple),\n    url(r'^(?P<pk>[0-9]+)/logs/train', get_split_train_logs),\n    url(r'^(?P<pk>[0-9]+)/logs/test', get_split_test_logs)\n\n]\n"""
src/split/views.py,0,"b""from rest_framework import mixins, generics, status\nfrom rest_framework.response import Response\n\nfrom src.split.models import Split\nfrom src.split.serializers import CreateSplitSerializer, SplitSerializer\n\n\nclass SplitList(mixins.ListModelMixin, generics.GenericAPIView):\n    queryset = Split.objects.all()\n    serializer_class = SplitSerializer\n\n    def get(self, request, *args, **kwargs):\n        return self.list(request, *args, **kwargs)\n\n    @staticmethod\n    def post(request):\n        serializer = CreateSplitSerializer(data=request.data)\n        if not serializer.is_valid():\n            return Response(serializer.errors, status=400)\n\n        try:\n            if Split.objects.filter(\n                original_log=serializer.validated_data['original_log'],\n                test_size=serializer.validated_data['test_size'],\n                splitting_method=serializer.validated_data['splitting_method']\n            ).exists():\n                return Response(Split.objects.filter(\n                    original_log=serializer.validated_data['original_log'],\n                    test_size=serializer.validated_data['test_size'],\n                    splitting_method=serializer.validated_data['splitting_method']\n                )[0].to_dict(), status=status.HTTP_200_OK)  # TODO: Use better code, like 304\n            else:\n                # Other serializer for data\n                split = serializer.save()\n        except:\n            # Other serializer for data\n            split = serializer.save()\n\n        result = SplitSerializer(split)\n        return Response(result.data, status=status.HTTP_201_CREATED)\n"""
src/utils/__init__.py,0,b''
src/utils/custom_parser.py,0,"b'from rest_framework.parsers import BaseParser\n\n\nclass CustomXMLParser(BaseParser):\n    """"""\n    Plain text parser.\n    """"""\n    media_type = \'text/plain\'\n\n    def parse(self, stream, media_type=None, parser_context=None):\n        """"""\n        Simply return a string representing the body of the request.\n        """"""\n        return stream.read()\n'"
src/utils/django_orm.py,0,"b""import copy\n\nfrom django.db import models\n\n\ndef duplicate_orm_row(obj: models.Model):\n    cloned = copy.deepcopy(obj)\n    cloned.id = None\n    cloned.pk = None\n    try:\n        delattr(cloned, '_prefetched_objects_cache')\n    except AttributeError:\n        pass\n    cloned.save()\n    return cloned\n"""
src/utils/event_attributes.py,0,"b'from functools import reduce\n\nfrom pm4py.objects.log.log import EventLog\n\n\ndef unique_events(log: EventLog):\n    """"""List of unique events using event concept:name\n\n    Adds all events into a list and removes duplicates while keeping order.\n    """"""\n\n    event_list = [event[\'concept:name\'] for trace in log for event in trace]\n    # TODO: this is very strange\n    return sorted(set(event_list), key=lambda x: event_list.index(x))\n\n\ndef unique_events2(training_log: EventLog, test_log: EventLog):\n    """""" Combines unique events from two logs into one list.\n\n    Renamed to 2 because Python doesn\'t allow functions with same names.\n    Python is objectively the worst language.\n    """"""\n    event_list = unique_events(training_log) + unique_events(test_log)\n    return sorted(set(event_list), key=lambda x: event_list.index(x))\n\n\ndef get_event_attributes(log: EventLog):\n    """"""Get log event attributes that are not name or time\n\n    As log file is a list, it has no global event attributes. Getting from first event of first trace. This may be bad.\n    """"""\n    event_attributes = []\n    for attribute in log[0][0]._dict.keys():\n        if attribute not in [""concept:name"", ""time:timestamp""]:\n            event_attributes.append(attribute)\n    return sorted(event_attributes)\n\n\ndef get_additional_columns(log: EventLog):\n    return {\'trace_attributes\': get_global_trace_attributes(log),\n            \'event_attributes\': get_global_event_attributes(log)}\n\n\ndef get_global_trace_attributes(log: EventLog):\n    # retrieves all traces in the log and returns their intersection\n    attributes = list(reduce(set.intersection, [set(trace._get_attributes().keys()) for trace in log]))\n    trace_attributes = [attr for attr in attributes if attr not in [""concept:name"", ""time:timestamp"", ""label""]]\n    return sorted(trace_attributes)\n\n\ndef get_global_event_attributes(log):\n    """"""Get log event attributes that are not name or time\n    """"""\n    # retrieves all events in the log and returns their intersection\n    attributes = list(reduce(set.intersection, [set(event._dict.keys()) for trace in log for event in trace]))\n    event_attributes = [attr for attr in attributes if attr not in [""concept:name"", ""time:timestamp""]]\n    return sorted(event_attributes)\n'"
src/utils/experiments_utils.py,0,"b'import json\n\nimport requests\n\nfrom src.clustering.models import ClusteringMethods\nfrom src.encoding.models import ValueEncodings, TaskGenerationTypes\nfrom src.hyperparameter_optimization.models import HyperOptAlgorithms, HyperOptLosses, HyperparameterOptimizationMethods\nfrom src.labelling.models import LabelTypes, ThresholdTypes\nfrom src.predictive_model.classification.models import ClassificationMethods\nfrom src.predictive_model.regression.models import RegressionMethods\n\n\ndef create_classification_payload(\n    split=1,\n    encodings=[ValueEncodings.SIMPLE_INDEX.value],\n    encoding={\n        ""padding"": ""zero_padding"",\n        ""generation_type"": TaskGenerationTypes.ALL_IN_ONE.value,\n        ""prefix_length"": 5,\n        ""features"": []\n    },\n    labeling={\n        ""type"": LabelTypes.ATTRIBUTE_STRING.value,\n        ""attribute_name"": ""creator"",\n        ""threshold_type"": ThresholdTypes.THRESHOLD_MEAN.value,\n        ""threshold"": 0,\n        ""add_remaining_time"": False,\n        ""add_elapsed_time"": False,\n        ""add_executed_events"": False,\n        ""add_resources_used"": False,\n        ""add_new_traces"": False\n    },\n    clustering=[ClusteringMethods.NO_CLUSTER.value],\n    classification=[ClassificationMethods.MULTINOMIAL_NAIVE_BAYES.value],\n    hyperparameter_optimization={\n        ""type"": HyperparameterOptimizationMethods.HYPEROPT.value,\n        ""max_evaluations"": 3,\n        ""performance_metric"": HyperOptLosses.AUC.value,\n        ""algorithm_type"": HyperOptAlgorithms.TPE.value\n    },\n    incremental_train=[],\n    model_hyperparameters={}):\n\n    config = {\n        ""clusterings"": clustering,\n        ""labelling"": labeling,\n        ""encodings"": encodings,\n        ""encoding"": encoding,\n        ""hyperparameter_optimizer"": hyperparameter_optimization,\n        ""methods"": classification,\n        ""incremental_train"": incremental_train,\n        ""create_models"": True,\n        }\n    config.update(model_hyperparameters)\n\n    return {""type"": ""classification"", ""split_id"": split, ""config"": config}\n\n\ndef create_regression_payload(\n    split=1,\n    encodings=[ValueEncodings.SIMPLE_INDEX.value],\n    encoding={\n        ""padding"": ""zero_padding"",\n        ""generation_type"": TaskGenerationTypes.ALL_IN_ONE.value,\n        ""prefix_length"": 5,\n        ""features"": []\n    },\n    labeling={\n        ""type"": LabelTypes.ATTRIBUTE_STRING.value,\n        ""attribute_name"": ""creator"",\n        ""threshold_type"": ThresholdTypes.THRESHOLD_MEAN.value,\n        ""threshold"": 0,\n        ""add_remaining_time"": False,\n        ""add_elapsed_time"": False,\n        ""add_executed_events"": False,\n        ""add_resources_used"": False,\n        ""add_new_traces"": False\n    },\n    clustering=[ClusteringMethods.NO_CLUSTER.value],\n    regression=[RegressionMethods.RANDOM_FOREST.value],\n    hyperparameter_optimization={\n        ""type"": HyperparameterOptimizationMethods.HYPEROPT.value,\n        ""max_evaluations"": 3,\n        ""performance_metric"": HyperOptLosses.RMSE.value,\n        ""algorithm_type"": HyperOptAlgorithms.TPE.value\n    },\n    incremental_train=[],\n    model_hyperparameters={}):\n\n    config = {\n        ""clusterings"": clustering,\n        ""labelling"": labeling,\n        ""encodings"": encodings,\n        ""encoding"": encoding,\n        ""hyperparameter_optimizer"": hyperparameter_optimization,\n        ""methods"": regression,\n        ""incremental_train"": incremental_train,\n        ""create_models"": True,\n        }\n    config.update(model_hyperparameters)\n\n    return {""type"": ""regression"", ""split_id"": split, ""config"": config}\n\n\ndef upload_split(\n    train=\'cache/log_cache/test_logs/general_example_train.xes\',\n    test=\'cache/log_cache/test_logs/general_example_test.xes\',\n    server_name=""0.0.0.0"",\n    server_port=\'8000\'\n):\n    r = requests.post(\n        \'http://\' + server_name + \':\' + server_port + \'/splits/multiple\',\n        files={\'trainingSet\': open(train, \'r+\'), \'testSet\': open(test, \'r+\')}\n    )\n    return json.loads(r.text)[\'id\']\n\n\ndef send_job_request(\n    payload,\n    server_name=""0.0.0.0"",\n    server_port=\'8000\'\n):\n    r = requests.post(\n        \'http://\' + server_name + \':\' + server_port + \'/jobs/multiple\',\n        json=payload,\n        headers={\'Content-type\': \'application/json\'}\n    )\n    return json.loads(r.text)\n\n\ndef retrieve_job(\n    config,\n    server_name=""0.0.0.0"",\n    server_port=\'8000\'\n):\n    r = requests.get(\n        \'http://\' + server_name + \':\' + server_port + \'/jobs/\',\n        headers={\'Content-type\': \'application/json\'},\n        json=config\n    )\n    return json.loads(r.text)\n'"
src/utils/file_service.py,0,"b'import logging\nimport time\n\nfrom pm4py.objects.log.importer.xes import factory as xes_importer\nfrom pm4py.objects.log.log import EventLog\n\nfrom src.logs.models import Log\n\nlogger = logging.getLogger(__name__)\n\n\ndef get_log(log: Log) -> EventLog:\n    """"""Read in event log from disk\n\n    Uses xes_importer to parse log.\n    """"""\n    filepath = log.path\n    logger.info(""\\t\\tReading in log from {}"".format(filepath))\n    return xes_importer.import_log(filepath)\n\n\ndef create_unique_name(name: str) -> str:\n    return name.replace(\'.\', \'_\' + str(time.time()).replace(\'.\', \'\') + \'.\')\n\n\n# def save_file(file, path):\n#     print(""Saving uploaded file to {} "".format(path))\n#     with open(path, \'wb+\') as destination:\n#         for chunk in file.chunks():\n#             destination.write(chunk)\n\n\n# def save_result(results: dict, job, start_time: float):\n#     result = [\n#         results[\'f1score\'],\n#         results[\'acc\'],\n#         results[\'true_positive\'],\n#         results[\'true_negative\'],\n#         results[\'false_negative\'],\n#         results[\'false_positive\'],\n#         results[\'precision\'],\n#         results[\'recall\'],\n#         results[\'auc\']\n#     ]\n#     result += [job[\'encoding\'][index] for index in range(len(job[\'encoding\']))]\n#     result += [job[\'labelling\'][index] for index in range(len(job[\'labelling\']))]\n#     if \'incremental_train\' in job:\n#         result += [job[\'incremental_train\'][index] for index in job[\'incremental_train\'].keys()]\n#     if \'hyperopt\' in job:\n#         result += [job[\'hyperopt\'][index] for index in job[\'hyperopt\'].keys()]\n#     result += [job[\'clustering\']]\n#     result += [job[\'split\'][index] for index in job[\'split\'].keys()]\n#     result += [job[\'type\']]\n#     result += [job[job[\'type\'] + \'.\' + job[\'method\']][index] for index in job[job[\'type\'] + \'.\' + job[\'method\']].keys()]\n#     result += [str(time.time() - start_time)]\n#\n#     with open(\'results/\' + job[\'type\'] + \'-\' + job[\'method\'] + \'_result.csv\', \'a+\') as log_result_file:\n#         writer = csv.writer(log_result_file)\n#         if sum(1 for _ in open(\'results/\' + job[\'type\'] + \'-\' + job[\'method\'] + \'_result.csv\')) == 0:\n#             writer.writerow([\'f1score\',\n#                              \'acc\',\n#                              \'true_positive\',\n#                              \'true_negative\',\n#                              \'false_negative\',\n#                              \'false_positive\',\n#                              \'precision\',\n#                              \'recall\',\n#                              \'auc\'] +\n#                             list(job[\'encoding\']._fields) +\n#                             list(job[\'labelling\']._fields) +\n#                             (list(job[\'incremental_train\'].keys()) if \'incremental_train\' in job else []) +\n#                             (list(job[\'hyperopt\'].keys()) if \'hyperopt\' in job else []) +\n#                             [\'clustering\'] +\n#                             list(job[\'split\'].keys()) +\n#                             [\'type\'] +\n#                             list(job[job[\'type\'] + \'.\' + job[\'method\']].keys()) +\n#                             [\'time_elapsed(s)\']\n#                             )\n#         writer.writerow(result)\n'"
src/utils/log_metrics.py,0,"b'import statistics\nfrom collections import defaultdict, OrderedDict\n\nfrom pm4py.objects.log.log import EventLog\n\nTIMESTAMP_CLASSIFIER = ""time:timestamp""\nNAME_CLASSIFIER = ""concept:name""\n\n\ndef events_by_date(log: EventLog) -> OrderedDict:\n    """"""Creates dict of events by date ordered by date\n\n    :return {\'2010-12-30\': 7, \'2011-01-06\': 8}\n    :rtype: OrderedDict\n    """"""\n\n    stamp_dict = defaultdict(lambda: 0)\n    for trace in log:\n        for event in trace:\n            timestamp = event[TIMESTAMP_CLASSIFIER]\n            stamp_dict[str(timestamp.date())] += 1\n    return OrderedDict(sorted(stamp_dict.items()))\n\n\ndef resources_by_date(log: EventLog) -> OrderedDict:\n    """"""Creates dict of used unique resources ordered by date\n\n    Resource and timestamp delimited by &&. If this is in resources name, bad stuff will happen.\n    Returns a dict with a date and the number of unique resources used on that day.\n    :return {\'2010-12-30\': 7, \'2011-01-06\': 8}\n    """"""\n    stamp_dict = defaultdict(lambda: [])\n    for trace in log:\n        for event in trace:\n            resource = event.get(""Resource"", event.get(""org:resource"", """"))\n            timestamp = event[TIMESTAMP_CLASSIFIER]\n            stamp_dict[str(timestamp.date())].append(resource)\n\n    for key, value in stamp_dict.items():\n        stamp_dict[key] = len(set(value))\n\n    return OrderedDict(sorted(stamp_dict.items()))\n\n\ndef event_executions(log: EventLog) -> OrderedDict:\n    """"""Creates dict of event execution count\n\n    :return {\'Event A\': 7, \'2011-01-06\': 8}\n    """"""\n    executions = defaultdict(lambda: 0)\n    for trace in log:\n        for event in trace:\n            executions[event[NAME_CLASSIFIER]] += 1\n    return OrderedDict(sorted(executions.items()))\n\n\ndef new_trace_start(log: EventLog) -> OrderedDict:\n    """"""Creates dict of new traces by date\n\n    :return {\'2010-12-30\': 1, \'2011-01-06\': 2}\n    """"""\n    executions = defaultdict(lambda: 0)\n    for trace in log:\n        timestamp = trace[0][TIMESTAMP_CLASSIFIER]\n        executions[str(timestamp.date())] += 1\n    return OrderedDict(sorted(executions.items()))\n\n\ndef trace_attributes(log: EventLog) -> list:\n    """"""Creates an array of dicts that describe trace attributes.\n    Only looks at first trace. Filters out `concept:name`.\n\n    :return [{name: \'name\', type: \'string\', example: 34}]\n    """"""\n    values = []\n    trace = log[0]  # TODO: this might be a bug if first trace has different events then others\n    for attribute in trace.attributes:\n        if attribute != ""concept:name"":\n            atr_type = _is_number(trace.attributes[attribute])\n            atr = {\'name\': attribute, \'type\': atr_type, \'example\': str(trace.attributes[attribute])}\n            values.append(atr)\n    values = sorted(values, key=lambda k: k[\'name\'])\n    return values\n\n\ndef _is_number(s) -> str:\n    if (isinstance(s, (float, int)) or (s.isdigit() if hasattr(s, \'isdigit\') else False)) and not isinstance(s, bool):\n        return \'number\'\n    return \'string\'\n\n\ndef events_in_trace(log: EventLog) -> OrderedDict:\n    """"""Creates dict of number of events in trace\n\n    :return {\'4\': 11, \'3\': 8}\n    """"""\n    stamp_dict = defaultdict(lambda: 0)\n    for trace in log:\n        stamp_dict[trace.attributes[NAME_CLASSIFIER]] = len(trace)\n    return OrderedDict(sorted(stamp_dict.items()))\n\n\ndef max_events_in_log(log: EventLog) -> int:\n    """"""Returns the maximum number of events in any trace\n\n    :return 3\n    """"""\n    return max([len(trace) for trace in log])\n\n\ndef avg_events_in_log(log: EventLog) -> int:\n    """"""Returns the average number of events in any trace\n\n    :return 3\n    """"""\n    return statistics.mean([len(trace) for trace in log])\n\n\ndef std_var_events_in_log(log: EventLog) -> int:\n    """"""Returns the standard variation of the average number of events in any trace\n\n    :return 3\n    """"""\n    return statistics.stdev([len(trace) for trace in log])\n\n\ndef trace_ids_in_log(log: EventLog) -> list:\n    return [trace.attributes[NAME_CLASSIFIER] for trace in log]\n\n\ndef traces_in_log(log: EventLog) -> list:\n    return [{\'attributes\': trace.attributes, \'events\': [event for event in trace]} for trace in log]\n\n\n'"
src/utils/result_metrics.py,5,"b""from math import sqrt\n\nimport numpy as np\nfrom distance import nlevenshtein\nfrom numpy import ndarray\nfrom pandas import DataFrame\nfrom sklearn.metrics import confusion_matrix, precision_score, recall_score, f1_score, accuracy_score, \\\n    mean_squared_error, mean_absolute_error, r2_score, roc_auc_score\n\nfrom src.labelling.models import LabelTypes, Labelling\n\n\ndef calculate_results_classification(actual: list, predicted: list) -> dict:\n    return {**{'f1score': _get_f1(actual, predicted),\n               'acc': accuracy_score(actual, predicted),\n               'precision': _get_precision(actual, predicted),\n               'recall': _get_recall(actual, predicted)},\n            **get_confusion_matrix(actual, predicted)}\n\n\ndef calculate_results_time_series_prediction(actual: ndarray, predicted: ndarray) -> dict:\n    return {}\n\n\ndef get_confusion_matrix(actual, predicted) -> dict:\n    true_negatives, false_positives, false_negatives, true_positives = '--', '--', '--', '--'\n    actual_set = list(sorted(set(actual)))\n    if len(actual_set) <= 2:\n        if not isinstance(actual_set[0], bool) and not isinstance(actual_set[0], np.bool_):\n            actual = [el == actual_set[0] for el in actual]\n            predicted = [el == actual_set[0] for el in predicted]\n\n        true_negatives, false_positives, false_negatives, true_positives = confusion_matrix(actual, predicted,\n                                                                                            labels=[False,\n                                                                                                    True]).ravel()\n\n    return {'true_positive': true_positives,\n            'true_negative': true_negatives,\n            'false_negative': false_negatives,\n            'false_positive': false_positives}\n\n\ndef _get_f1(actual, predicted) -> float:\n    try:\n        f1score = f1_score(actual, predicted, average='macro')\n    except ZeroDivisionError:\n        f1score = 0\n    return f1score\n\n\ndef _get_recall(actual, predicted) -> float:\n    try:\n        recall = recall_score(actual, predicted, average='macro')\n    except ZeroDivisionError:\n        recall = 0\n    return recall\n\n\ndef _get_precision(actual, predicted) -> float:\n    try:\n        precision = precision_score(actual, predicted, average='macro')\n    except ZeroDivisionError:\n        precision = 0\n    return precision\n\n\ndef calculate_nlevenshtein(actual: ndarray, predicted: ndarray) -> float:\n    distances = []\n\n    for row in range(actual.shape[0]):\n        distances.append(nlevenshtein(np.array2string(actual[row]), np.array2string(predicted[row])))\n\n    return float(np.mean(distances))\n\n\ndef get_auc(actual, scores) -> float:\n    try:\n        auc = roc_auc_score(actual, scores)\n    except ValueError:\n        auc = 0\n    return auc\n\n\ndef calculate_auc(actual, scores, auc: int) -> float:\n    if scores.shape[1] == 1:\n        auc += 0\n    else:\n        try:\n            auc += roc_auc_score(actual, scores[:, 1])\n        except Exception:\n            pass\n    return auc\n\n\ndef calculate_results_regression(input_df: DataFrame, label: Labelling) -> dict:\n    if label.type == LabelTypes.REMAINING_TIME.value:\n        # TODO is the remaining time in seconds or hours?\n        input_df['label'] = input_df['label'] / 3600\n        input_df['predicted'] = input_df['predicted'] / 3600\n    rmse = sqrt(mean_squared_error(input_df['label'], input_df['predicted']))\n    mae = mean_absolute_error(input_df['label'], input_df['predicted'])\n    rscore = r2_score(input_df['label'], input_df['predicted'])\n    mape = _mean_absolute_percentage_error(input_df['label'], input_df['predicted'])\n\n    row = {'rmse': rmse, 'mae': mae, 'rscore': rscore, 'mape': mape}\n    return row\n\n\ndef _mean_absolute_percentage_error(y_true, y_pred):\n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    if 0 in y_true:\n        return -1\n    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100\n"""
src/utils/tests_utils.py,0,"b'from src.clustering.models import Clustering, ClusteringMethods\nfrom src.encoding.models import Encoding, DataEncodings, TaskGenerationTypes\nfrom src.encoding.models import ValueEncodings\nfrom src.hyperparameter_optimization.models import HyperparameterOptimizationMethods, HyperparameterOptimization, \\\n    HyperOptLosses\nfrom src.jobs.job_creator import get_prediction_method_config, set_model_name\nfrom src.jobs.models import Job, JobStatuses, JobTypes\nfrom src.labelling.models import Labelling, LabelTypes, ThresholdTypes\nfrom src.logs.models import Log\nfrom src.predictive_model.classification.models import ClassificationMethods\nfrom src.predictive_model.models import PredictiveModel, PredictiveModels\nfrom src.split.models import Split, SplitTypes, SplitOrderingMethods\n\nbpi_log_filepath = ""cache/log_cache/test_logs/BPI Challenge 2017.xes.gz""\ngeneral_example_filepath = \'cache/log_cache/test_logs/general_example.xes\'\ngeneral_example_filename = \'general_example.xes\'\ngeneral_example_train_filepath = \'cache/log_cache/test_logs/general_example_train.xes\'\ngeneral_example_train_filename = \'general_example_train.xes\'\ngeneral_example_test_filepath = \'cache/log_cache/test_logs/general_example_test.xes\'\ngeneral_example_test_filename = \'general_example_test.xes\'\nfinancial_log_filepath = \'cache/log_cache/test_logs/financial_log.xes.gz\'\nfinancial_log_filename = \'financial_log.xes.gz\'\nrepair_example_filepath = \'cache/log_cache/test_logs/repair_example.xes\'\n\n\ndef create_test_log(log_name: str = \'general_example.xes\',\n                    log_path: str = \'cache/log_cache/test_logs/general_example.xes\') -> Log:\n    log = Log.objects.get_or_create(name=log_name, path=log_path)[0]\n    return log\n\n\ndef create_test_split(split_type: str = SplitTypes.SPLIT_SINGLE.value,\n                      split_ordering_method: str = SplitOrderingMethods.SPLIT_SEQUENTIAL.value,\n                      test_size: float = 0.2,\n                      original_log: Log = None,\n                      train_log: Log = None,\n                      test_log: Log = None):\n    if split_type == SplitTypes.SPLIT_SINGLE.value:\n        if original_log is None:\n            original_log = create_test_log()\n        split = Split.objects.get_or_create(type=split_type,\n                                            original_log=original_log,\n                                            test_size=test_size,\n                                            splitting_method=split_ordering_method)[0]\n    elif split_type == SplitTypes.SPLIT_DOUBLE.value:\n        if train_log is None:\n            train_log = create_test_log()\n        if test_log is None:\n            test_log = create_test_log()\n        split = Split.objects.get_or_create(type=split_type,\n                                            train_log=train_log,\n                                            test_log=test_log)[0]\n    else:\n        raise ValueError(\'split_type {} not recognized\'.format(split_type))\n    return split\n\n\ndef create_test_encoding(prefix_length: int = 1,\n                         padding: bool = False,\n                         value_encoding: str = ValueEncodings.SIMPLE_INDEX.value,\n                         add_elapsed_time: bool = False,\n                         add_remaining_time: bool = False,\n                         add_resources_used: bool = False,\n                         add_new_traces: bool = False,\n                         add_executed_events: bool = False,\n                         task_generation_type: str = TaskGenerationTypes.ONLY_THIS.value) -> Encoding:\n    encoding = Encoding.objects.get_or_create(\n        data_encoding=DataEncodings.LABEL_ENCODER.value,\n        value_encoding=value_encoding,\n        prefix_length=prefix_length,\n        padding=padding,\n        add_elapsed_time=add_elapsed_time,\n        add_executed_events=add_executed_events,\n        add_remaining_time=add_remaining_time,\n        add_new_traces=add_new_traces,\n        add_resources_used=add_resources_used,\n        task_generation_type=task_generation_type)[0]\n    return encoding\n\n\ndef create_test_labelling(label_type: str = LabelTypes.NEXT_ACTIVITY.value,\n                          attribute_name: str = None,\n                          threshold_type: str = ThresholdTypes.THRESHOLD_MEAN.value,\n                          threshold: float = 0.0) -> Labelling:\n    labelling = Labelling.objects.get_or_create(\n        type=label_type,\n        attribute_name=attribute_name,\n        threshold_type=threshold_type,\n        threshold=threshold\n    )[0]\n    return labelling\n\n\ndef create_test_clustering(clustering_type: str = ClusteringMethods.NO_CLUSTER.value,\n                           configuration: dict = {}) -> Clustering:\n    clustering = Clustering.init(clustering_type, configuration)\n    return clustering\n\n\ndef create_test_predictive_model(predictive_model: str = PredictiveModels.CLASSIFICATION.value,\n                                 prediction_method: str = ClassificationMethods.RANDOM_FOREST.value,\n                                 configuration: dict = {}) -> PredictiveModel:\n    pred_model = PredictiveModel.init(get_prediction_method_config(predictive_model, prediction_method, configuration))\n    return pred_model\n\n\ndef create_test_hyperparameter_optimizer(hyperoptim_type: str = HyperparameterOptimizationMethods.HYPEROPT.value,\n                                         performance_metric: HyperOptLosses = HyperOptLosses.ACC.value,\n                                         max_evals: int = 10):\n    hyperparameter_optimization = HyperparameterOptimization.init({\'type\': hyperoptim_type,\n                                                                   \'performance_metric\': performance_metric,\n                                                                   \'max_evals\': max_evals})\n    return hyperparameter_optimization\n\n\ndef create_test_job(split: Split = None,\n                    encoding: Encoding = None,\n                    labelling: Labelling = None,\n                    clustering: Clustering = None,\n                    create_models: bool = False,\n                    predictive_model: PredictiveModel = None,\n                    job_type=JobTypes.PREDICTION.value,\n                    hyperparameter_optimizer: HyperparameterOptimization = None,\n                    incremental_train : Job = None):\n    job, _ = Job.objects.get_or_create(\n        status=JobStatuses.CREATED.value,\n        type=job_type,\n        split=split if split is not None else create_test_split(),\n        encoding=encoding if encoding is not None else create_test_encoding(),\n        labelling=labelling if labelling is not None else create_test_labelling(),\n        clustering=clustering if clustering is not None else create_test_clustering(),\n        create_models=create_models,\n        case_id=[1, 2, 3],\n        predictive_model=predictive_model if predictive_model is not None else create_test_predictive_model(),\n        evaluation=None,\n        hyperparameter_optimizer=hyperparameter_optimizer,\n        incremental_train=incremental_train\n    )\n    set_model_name(job)\n    return job\n'"
src/utils/time_metrics.py,0,"b'from datetime import datetime as dt\n\nTIME_FORMAT = ""%Y-%m-%dT%H:%M:%S""\n\n\ndef duration(trace):\n    """"""Calculate the duration of a trace""""""\n    return remaining_time_id(trace, 0)\n\n\ndef elapsed_time_id(trace, event_index: int):\n    """"""Calculate elapsed time by event index in trace""""""\n    try:\n        event = trace[event_index]\n    except IndexError:\n        # catch for 0 padding.\n        # calculate using the last event in trace\n        event = trace[-1]\n    return elapsed_time(trace, event)\n\n\ndef elapsed_time(trace, event):\n    """"""Calculate elapsed time by event in trace""""""\n    # FIXME using no timezone info for calculation\n    event_time = event[\'time:timestamp\'].strftime(""%Y-%m-%dT%H:%M:%S"")\n    first_time = trace[0][\'time:timestamp\'].strftime(""%Y-%m-%dT%H:%M:%S"")\n    try:\n        delta = dt.strptime(event_time, TIME_FORMAT) - dt.strptime(first_time, TIME_FORMAT)\n    except ValueError:\n        # Log has no timestamps\n        return 0\n    return delta.total_seconds()\n\n\ndef remaining_time_id(trace, event_index: int):\n    """"""Calculate remaining time by event index in trace""""""\n    try:\n        event = trace[event_index]\n        return remaining_time(trace, event)\n    except IndexError:\n        # catch for 0 padding.\n        # cant calculate remaining time if there are no more events\n        return 0\n\n\ndef remaining_time(trace, event):\n    """"""Calculate remaining time by event in trace""""""\n    # FIXME using no timezone info for calculation\n    event_time = event[\'time:timestamp\'].strftime(""%Y-%m-%dT%H:%M:%S"")\n    last_time = trace[-1][\'time:timestamp\'].strftime(""%Y-%m-%dT%H:%M:%S"")\n    try:\n        delta = dt.strptime(last_time, TIME_FORMAT) - dt.strptime(event_time, TIME_FORMAT)\n    except ValueError:\n        # Log has no timestamps\n        return 0\n    return delta.total_seconds()\n\n\ndef count_on_event_day(trace, date_dict: dict, event_id):\n    """"""Finds the date of event and returns the value from date_dict\n    :param date_dict one of the dicts from log_metrics.py\n    :param event_id Event id\n    :param trace Log trace\n    """"""\n    try:\n        event = trace[event_id]\n        date = str(event[\'time:timestamp\'].date())\n        return date_dict.get(date, 0)\n    except IndexError:\n        return 0\n'"
src/cache/migrations/__init__.py,0,b''
src/cache/tests/__init__.py,0,b''
src/cache/tests/test_cache.py,0,"b'from django.test.testcases import TestCase\nfrom pandas.util.testing import assert_frame_equal\n\nfrom src.cache.cache import get_labelled_logs\nfrom src.core.core import get_encoded_logs\nfrom src.utils.tests_utils import create_test_job\n\n\nclass TestViews(TestCase):\n    def test_get_labelled_logs(self):\n        job = create_test_job()\n        labelled_logs = get_encoded_logs(job)\n\n        cached_labelled_logs = get_labelled_logs(job)\n\n        assert_frame_equal(labelled_logs[0], cached_labelled_logs[0])\n        assert_frame_equal(labelled_logs[1], cached_labelled_logs[1])\n'"
src/clustering/migrations/__init__.py,0,b''
src/common/migrations/__init__.py,0,b''
src/common/tests/test_models.py,0,"b'\nfrom django.test import TestCase\n\nfrom src.predictive_model.classification.models import ClassificationMethods\nfrom src.predictive_model.models import PredictiveModels\nfrom src.utils.tests_utils import create_test_job, create_test_predictive_model\n\n\nclass TestCommon(TestCase):\n    def test_str(self):\n        job = create_test_job(\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value,\n                prediction_method=ClassificationMethods.RANDOM_FOREST.value\n            )\n        )\n\n        self.assertEqual(len(job.__str__()), len(""{created_date: 2019-10-01 09:38:35.245361+00:00, modified_date: 2019-10-01 09:38:35.245655+00:00, error: , status: created, type: prediction, create_models: False, split: {\'id\': 1, \'type\': \'single\', \'test_size\': 0.2, \'splitting_method\': \'sequential\', \'original_log_path\': \'cache/log_cache/test_logs/general_example.xes\'}, encoding: {\'data_encoding\': \'label_encoder\', \'value_encoding\': \'simpleIndex\', \'add_elapsed_time\': False, \'add_remaining_time\': False, \'add_executed_events\': False, \'add_resources_used\': False, \'add_new_traces\': False, \'features\': {}, \'prefix_length\': 1, \'padding\': False, \'task_generation_type\': \'only\'}, labelling: {\'type\': \'next_activity\', \'attribute_name\': None, \'threshold_type\': \'threshold_mean\', \'threshold\': 0.0, \'results\': {}}, clustering: {\'clustering_method\': \'noCluster\'}, predictive_model: {\'n_estimators\': 10, \'max_depth\': None, \'max_features\': \'auto\'}, evaluation: [None], hyperparameter_optimizer: [None], incremental_train: [None]}""))\n'"
src/core/tests/__init__.py,0,b''
src/core/tests/test_common.py,0,"b'""""""\ncommon tests\n""""""\n\nfrom django.test import TestCase\n\nfrom src.core.common import get_method_config\nfrom src.predictive_model.classification.models import ClassificationMethods\nfrom src.predictive_model.models import PredictiveModels\nfrom src.utils.tests_utils import create_test_job, create_test_predictive_model\n\n\nclass TestCommon(TestCase):\n    def test_get_method_config(self):\n        job = create_test_job(\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value,\n                prediction_method=ClassificationMethods.RANDOM_FOREST.value\n            )\n        )\n\n        method, config = get_method_config(job)\n\n        self.assertEqual(ClassificationMethods.RANDOM_FOREST.value, method)\n        self.assertEqual({\n            \'max_depth\': None,\n            \'max_features\': \'auto\',\n            \'n_estimators\': 10,\n            \'random_state\': 123\n        }, config)\n'"
src/core/tests/test_core.py,0,"b""import os\n\nfrom django.test.testcases import TestCase\nfrom pandas.util.testing import assert_frame_equal\n\nfrom src.cache.cache import get_digested\nfrom src.cache.models import LabelledLog, LoadedLog\nfrom src.core.core import get_encoded_logs\nfrom src.utils.tests_utils import create_test_job\n\n\nclass TestCore(TestCase):\n    def test_get_encoded_logs_cache(self):\n        job = create_test_job()\n\n        w_cache = get_encoded_logs(job, True)\n        wout_cache = get_encoded_logs(job, False)\n\n        assert_frame_equal(w_cache[0], wout_cache[0])\n        assert_frame_equal(w_cache[1], wout_cache[1])\n\n        loaded_from_cache = get_encoded_logs(job, True)\n\n        assert_frame_equal(w_cache[0], loaded_from_cache[0])\n        assert_frame_equal(w_cache[1], loaded_from_cache[1])\n\n    def test_get_encoded_logs_labeled_cache(self):\n        job = create_test_job()\n\n        w_cache = get_encoded_logs(job, True)\n\n        cached_labelled_log = LabelledLog.objects.filter(split=job.split,\n                                      encoding=job.encoding,\n                                      labelling=job.labelling)[0]\n\n        cached_train = cached_labelled_log.train_log_path\n        cached_test = cached_labelled_log.test_log_path\n\n        os.remove('cache/labeled_log_cache/' + get_digested(cached_train) + '.pickle')\n\n        loaded_from_cache = get_encoded_logs(job, True)\n\n        assert_frame_equal(w_cache[0], loaded_from_cache[0])\n        assert_frame_equal(w_cache[1], loaded_from_cache[1])\n\n        os.remove('cache/labeled_log_cache/' + get_digested(cached_test) + '.pickle')\n\n        loaded_from_cache = get_encoded_logs(job, True)\n\n        assert_frame_equal(w_cache[0], loaded_from_cache[0])\n        assert_frame_equal(w_cache[1], loaded_from_cache[1])\n\n        os.remove('cache/labeled_log_cache/' + get_digested(cached_train) + '.pickle')\n        os.remove('cache/labeled_log_cache/' + get_digested(cached_test) + '.pickle')\n\n        loaded_from_cache = get_encoded_logs(job, True)\n\n        assert_frame_equal(w_cache[0], loaded_from_cache[0])\n        assert_frame_equal(w_cache[1], loaded_from_cache[1])\n\n    def test_get_encoded_logs_Loaded_cache(self):\n        job = create_test_job()\n\n        w_cache = get_encoded_logs(job, True)\n\n        cached_loaded_log = LoadedLog.objects.filter(split=job.split)[0]\n\n        cached_train = cached_loaded_log.train_log_path\n        cached_test = cached_loaded_log.test_log_path\n\n        os.remove('cache/loaded_log_cache/' + get_digested(cached_train) + '.pickle')\n\n        loaded_from_cache = get_encoded_logs(job, True)\n\n        assert_frame_equal(w_cache[0], loaded_from_cache[0])\n        assert_frame_equal(w_cache[1], loaded_from_cache[1])\n\n        os.remove('cache/loaded_log_cache/' + get_digested(cached_test) + '.pickle')\n\n        loaded_from_cache = get_encoded_logs(job, True)\n\n        assert_frame_equal(w_cache[0], loaded_from_cache[0])\n        assert_frame_equal(w_cache[1], loaded_from_cache[1])\n"""
src/core/tests/test_label_calc.py,0,"b'""""""\nlabel calculation tests\n""""""\n\nfrom django.test import TestCase\n\nfrom src.core.core import calculate\nfrom src.core.tests.test_utils import repair_example\nfrom src.jobs.models import JobTypes\nfrom src.labelling.models import LabelTypes, ThresholdTypes\nfrom src.utils.tests_utils import create_test_job, create_test_encoding, create_test_labelling\n\n\nclass Labelling(TestCase):\n    @staticmethod\n    def get_job():\n        return create_test_job(split=repair_example(),\n                               encoding=create_test_encoding(prefix_length=5,\n                                                             padding=True),\n                               job_type=JobTypes.LABELLING.value)\n\n    def test_remaining_time(self):\n        job = self.get_job()\n        job.labelling = create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value)\n        job.save()\n        result, _ = calculate(job)\n        self.assertEqual(result, {\'true\': 529, \'false\': 354})\n\n    def test_next_activity(self):\n        job = self.get_job()\n        job.labelling = create_test_labelling(label_type=LabelTypes.NEXT_ACTIVITY.value)\n        job.save()\n        result, _ = calculate(job)\n        self.assertEqual(result, {\'0\': 2, \'Repair (Complex)\': 306, \'Test Repair\': 432, \'Inform User\': 5,\n                                  \'Repair (Simple)\': 138})\n\n    def test_remaining_custom_threshold(self):\n        job = self.get_job()\n        job.labelling = create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value,\n                                              threshold_type=ThresholdTypes.THRESHOLD_CUSTOM.value,\n                                              threshold=1600)\n        job.save()\n        result, _ = calculate(job)\n        self.assertEqual(result, {\'true\': 444, \'false\': 439})\n\n    def test_atr_string(self):\n        job = self.get_job()\n        job.labelling = create_test_labelling(label_type=LabelTypes.ATTRIBUTE_STRING.value,\n                                              attribute_name=\'description\')\n        job.save()\n        result, _ = calculate(job)\n        self.assertEqual(result, {\'Simulated process instance\': 883})\n\n    def test_duration(self):\n        """"""Trace atr, zero padding means prefix length has no effect""""""\n        job = self.get_job()\n        job.labelling = create_test_labelling(label_type=LabelTypes.DURATION.value)\n        job.save()\n        result1, _ = calculate(job)\n        job.encoding = create_test_encoding(prefix_length=22, padding=True)\n        job.save()\n        result2, _ = calculate(job)\n        self.assertEqual(result1, result2)\n'"
src/core/tests/test_performance.py,0,"b'""""""\nperformance tests\n""""""\n\nimport time\nimport unittest\n\nfrom django.test import TestCase\n\nfrom src.core.core import calculate\nfrom src.core.tests.test_utils import split_single, add_default_config\nfrom src.encoding.encoding_container import EncodingContainer\nfrom src.encoding.models import ValueEncodings\nfrom src.hyperparameter_optimization.hyperopt_wrapper import calculate_hyperopt\nfrom src.labelling.label_container import LabelContainer\nfrom src.labelling.models import LabelTypes\nfrom src.utils.tests_utils import bpi_log_filepath\n\n\n@unittest.skip(\'performance test not needed normally\')\nclass TestClassPerf(TestCase):\n    @staticmethod\n    def get_job():\n        json = dict()\n        json[\'clustering\'] = \'noCluster\'\n        json[\'split\'] = split_single()\n        json[\'split\'][\'original_log_path\'] = bpi_log_filepath\n        json[\'method\'] = \'randomForest\'\n        json[\'encoding\'] = EncodingContainer(ValueEncodings.BOOLEAN.value, prefix_length=20)\n        json[\'type\'] = \'classification\'\n        json[\'labelling\'] = LabelContainer(LabelTypes.DURATION.value)\n        json[\'incremental_train\'] = {\'base_model\': None}\n        return json\n\n    @staticmethod\n    def calculate_helper(job):\n        start_time = time.time()\n        calculate(job)\n        print(\'Total for %s %s seconds\' % (job[\'method\'], time.time() - start_time))\n\n    @staticmethod\n    def calculate_helper_hyperopt(job):\n        start_time = time.time()\n        calculate_hyperopt(job)\n        print(\'Total for %s %s seconds\' % (job[\'method\'], time.time() - start_time))\n\n    def test_class_randomForest(self):\n        job = self.get_job()\n        add_default_config(job)\n        self.calculate_helper(job)\n\n    def test_next_activity_randomForest(self):\n        job = self.get_job()\n        job[\'labelling\'] = LabelContainer(LabelTypes.NEXT_ACTIVITY.value)\n        add_default_config(job)\n        self.calculate_helper(job)\n\n    def test_class_knn(self):\n        job = self.get_job()\n        job[\'method\'] = \'knn\'\n        add_default_config(job)\n        self.calculate_helper(job)\n\n    def test_class_decision(self):\n        job = self.get_job()\n        job[\'method\'] = \'decisionTree\'\n        add_default_config(job)\n        self.calculate_helper(job)\n\n    def test_class_hyperopt(self):\n        job = self.get_job()\n        job[\'labelling\'] = LabelContainer(LabelTypes.NEXT_ACTIVITY.value)\n        job[\'hyperopt\'] = {\'use_hyperopt\': True, \'max_evals\': 10, \'performance_metric\': \'f1score\'}\n        add_default_config(job)\n        self.calculate_helper_hyperopt(job)\n\n\n@unittest.skip(\'performance test not needed normally\')\nclass RegPerf(TestCase):\n    @staticmethod\n    def get_job():\n        json = dict()\n        json[\'clustering\'] = \'noCluster\'\n        json[\'split\'] = split_single()\n        json[\'split\'][\'original_log_path\'] = bpi_log_filepath\n        json[\'method\'] = \'randomForest\'\n        json[\'encoding\'] = EncodingContainer(ValueEncodings.BOOLEAN.value, prefix_length=20)\n        json[\'prefix_length\'] = 20\n        json[\'type\'] = \'regression\'\n        json[\'padding\'] = \'no_padding\'\n        json[\'labelling\'] = LabelContainer(LabelTypes.REMAINING_TIME.value)\n        return json\n\n    @staticmethod\n    def calculate_helper(job):\n        start_time = time.time()\n        calculate(job)\n        print(\'Total for %s %s seconds\' % (job[\'method\'], time.time() - start_time))\n\n    @staticmethod\n    def calculate_helper_hyperopt(job):\n        start_time = time.time()\n        calculate_hyperopt(job)\n        print(\'Total for %s %s seconds\' % (job[\'method\'], time.time() - start_time))\n\n    def test_reg_randomForest(self):\n        job = self.get_job()\n        add_default_config(job)\n        self.calculate_helper(job)\n\n    def test_reg_linear(self):\n        job = self.get_job()\n        job[\'method\'] = \'linear\'\n        add_default_config(job)\n        self.calculate_helper(job)\n\n    def test_reg_lasso(self):\n        job = self.get_job()\n        job[\'method\'] = \'lasso\'\n        add_default_config(job)\n        self.calculate_helper(job)\n\n    def test_reg_hyperopt(self):\n        job = self.get_job()\n        job[\'hyperopt\'] = {\'use_hyperopt\': True, \'max_evals\': 10, \'performance_metric\': \'rmse\'}\n        add_default_config(job)\n        self.calculate_helper_hyperopt(job)\n'"
src/core/tests/test_refactoring.py,0,"b'""""""\nrefactoring tests\n""""""\n\nfrom django.test import TestCase\n\nfrom src.clustering.models import ClusteringMethods\nfrom src.core.core import calculate\nfrom src.core.tests.test_utils import repair_example\nfrom src.labelling.models import LabelTypes\nfrom src.predictive_model.classification.models import ClassificationMethods\nfrom src.predictive_model.models import PredictiveModels\nfrom src.predictive_model.regression.models import RegressionMethods\nfrom src.utils.tests_utils import create_test_clustering, create_test_job, create_test_encoding, \\\n    create_test_predictive_model, create_test_labelling\nimport random\n\n\nclass RefactorProof(TestCase):\n\n    def test_class_kmeans(self):\n        self.max_diff = None\n        random.seed(10)\n        job = create_test_job(\n            clustering=create_test_clustering(clustering_type=ClusteringMethods.KMEANS.value),\n            split=repair_example(),\n            encoding=create_test_encoding(prefix_length=5, padding=True, add_elapsed_time=True),\n            predictive_model=create_test_predictive_model(predictive_model=PredictiveModels.CLASSIFICATION.value,\n                                                          prediction_method=ClassificationMethods.RANDOM_FOREST.value)\n        )\n        result, _ = calculate(job)\n        del result[\'elapsed_time\']\n        print(result)\n        self.assertDictEqual(result, {\'f1score\': 1.0, \'acc\': 1.0, \'true_positive\': \'--\',\n                                      \'true_negative\': \'--\', \'false_negative\': \'--\', \'false_positive\': \'--\',\n                                      \'precision\': 1.0, \'recall\': 1.0,\n                                      \'auc\': 0.0})\n # self.assertDictEqual(result, {\'f1score\': 0.67690058479532156, \'acc\': 0.68325791855203621, \'true_positive\': 91,\n #                                      \'true_negative\': 60, \'false_negative\': 36, \'false_positive\': 34,\n #                                      \'precision\': 0.67649999999999999, \'recall\': 0.67741665270564577,\n #                                      \'auc\': 0.5913497814050234})\n\n    def test_class_no_cluster(self):\n        self.max_diff = None\n        random.seed(10)\n        job = create_test_job(\n            clustering=create_test_clustering(clustering_type=ClusteringMethods.NO_CLUSTER.value),\n            split=repair_example(),\n            encoding=create_test_encoding(prefix_length=5, padding=True, add_elapsed_time=True),\n            predictive_model=create_test_predictive_model(predictive_model=PredictiveModels.CLASSIFICATION.value,\n                                                          prediction_method=ClassificationMethods.RANDOM_FOREST.value)\n        )\n        result, _ = calculate(job)\n        del result[\'elapsed_time\']\n        print(result)\n        self.assertDictEqual(result, {\'f1score\': 0.748898678414097, \'acc\': 0.995475113122172, \'true_positive\': \'--\',\n                                      \'true_negative\': \'--\', \'false_negative\': \'--\', \'false_positive\': \'--\',\n                                      \'precision\': 0.75, \'recall\': 0.7478070175438596,\n                                      \'auc\': 0})\n# self.assertDictEqual(result, {\'f1score\': 1.0, \'acc\': 1.0, \'true_positive\': 91,\n#                                       \'true_negative\': 60, \'false_negative\': 36, \'false_positive\': \'--\',\n#                                       \'precision\': 1.0, \'recall\': 0.67741665270564577,\n#                                       \'auc\': 0.71720556207069863})\n\n    def test_next_activity_kmeans(self):\n        self.max_diff = None\n        job = create_test_job(\n            clustering=create_test_clustering(clustering_type=ClusteringMethods.KMEANS.value),\n            split=repair_example(),\n            encoding=create_test_encoding(prefix_length=8, padding=True),\n            labelling=create_test_labelling(label_type=LabelTypes.NEXT_ACTIVITY.value),\n            predictive_model=create_test_predictive_model(predictive_model=PredictiveModels.CLASSIFICATION.value,\n                                                          prediction_method=ClassificationMethods.RANDOM_FOREST.value)\n        )\n        result, _ = calculate(job)\n        del result[\'elapsed_time\']\n        self.assertDictEqual(result, {\'f1score\': 0.54239884582595577, \'acc\': 0.80995475113122173, \'true_positive\': \'--\',\n                                      \'true_negative\': \'--\', \'false_negative\': \'--\', \'false_positive\': \'--\',\n                                      \'precision\': 0.62344720496894401, \'recall\': 0.5224945442336747,\n                                      \'auc\': 0.4730604801339352})\n\n    def test_next_activity_no_cluster(self):\n        self.max_diff = None\n        job = create_test_job(\n            clustering=create_test_clustering(clustering_type=ClusteringMethods.NO_CLUSTER.value),\n            split=repair_example(),\n            encoding=create_test_encoding(prefix_length=8, padding=True),\n            labelling=create_test_labelling(label_type=LabelTypes.NEXT_ACTIVITY.value),\n            predictive_model=create_test_predictive_model(predictive_model=PredictiveModels.CLASSIFICATION.value,\n                                                          prediction_method=ClassificationMethods.RANDOM_FOREST.value)\n        )\n        result, _ = calculate(job)\n\n        self.assertAlmostEqual(result[\'f1score\'], 0.542398845)\n        self.assertAlmostEqual(result[\'acc\'], 0.809954751)\n        self.assertAlmostEqual(result[\'precision\'], 0.623447204)\n        self.assertAlmostEqual(result[\'recall\'], 0.52249454423)\n        self.assertAlmostEqual(result[\'auc\'], 0)\n\n    def test_regression_kmeans(self):\n        self.max_diff = None\n        job = create_test_job(\n            clustering=create_test_clustering(clustering_type=ClusteringMethods.KMEANS.value),\n            split=repair_example(),\n            encoding=create_test_encoding(prefix_length=5, padding=True),\n            labelling=create_test_labelling(label_type=LabelTypes.DURATION.value),\n            predictive_model=create_test_predictive_model(predictive_model=PredictiveModels.REGRESSION.value,\n                                                          prediction_method=RegressionMethods.RANDOM_FOREST.value)\n        )\n        result, _ = calculate(job)\n        self.assertAlmostEqual(result[\'rmse\'], 0.48841552839653984)\n        self.assertAlmostEqual(result[\'mae\'], 0.44282462605873457)\n        self.assertAlmostEqual(result[\'rscore\'], 0.015130407121517586)\n        self.assertAlmostEqual(result[\'mape\'], -1)\n\n    def test_regression_no_cluster(self):\n        self.max_diff = None\n        job = create_test_job(\n            clustering=create_test_clustering(clustering_type=ClusteringMethods.NO_CLUSTER.value),\n            split=repair_example(),\n            encoding=create_test_encoding(prefix_length=5, padding=True),\n            labelling=create_test_labelling(label_type=LabelTypes.DURATION.value),\n            predictive_model=create_test_predictive_model(predictive_model=PredictiveModels.REGRESSION.value,\n                                                          prediction_method=RegressionMethods.RANDOM_FOREST.value)\n        )\n        result, _ = calculate(job)\n        self.assertAlmostEqual(result[\'rmse\'], 0.4868515876868242)\n        self.assertAlmostEqual(result[\'mae\'], 0.44340838774645464)\n        self.assertAlmostEqual(result[\'rscore\'], 0.02142755175443678)\n        self.assertAlmostEqual(result[\'mape\'], -1)\n'"
src/core/tests/test_utils.py,0,"b'""""""\ncommon methods and functionalities for the core tests\n""""""\n\nimport os\nimport sys\n\nfrom src.clustering.methods_default_config import clustering_kmeans\nfrom src.core.common import CONF_MAP\nfrom src.jobs.models import Job\nfrom src.split.models import SplitTypes\nfrom src.utils.tests_utils import general_example_filepath, repair_example_filepath, general_example_test_filepath, \\\n    general_example_train_filepath, create_test_log, create_test_split, general_example_test_filename, \\\n    general_example_train_filename, general_example_filename\n\n\nclass HidePrints:\n    """"""\n    hides prints during tests for easier output reading\n    """"""\n\n    def __init__(self):\n        self._original_stdout = sys.stdout\n\n    def __enter__(self):\n        """"""\n        hides the following prints by redirecting sys.stdout\n        """"""\n        sys.stdout = open(os.devnull, \'w\')\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        """"""restores the original print behavior\n\n        :param exc_type: TODO: complete\n        :param exc_val: TODO: complete\n        :param exc_tb: TODO: complete\n        """"""\n        sys.stdout.close()\n        sys.stdout = self._original_stdout\n\n\ndef split_single():\n    return create_test_split(\n        split_type=SplitTypes.SPLIT_SINGLE.value,\n        original_log=create_test_log(log_name=general_example_filename, log_path=general_example_filepath)\n    )\n\n\ndef split_double():\n    return create_test_split(\n        split_type=SplitTypes.SPLIT_DOUBLE.value,\n        train_log=create_test_log(log_name=general_example_train_filename, log_path=general_example_train_filepath),\n        test_log=create_test_log(log_name=general_example_test_filename, log_path=general_example_test_filepath)\n    )\n\n\ndef repair_example():\n    return create_test_split(split_type=SplitTypes.SPLIT_SINGLE.value,\n                             original_log=create_test_log(log_name=\'repair_example.xes\',\n                                                          log_path=repair_example_filepath\n                                                          )\n                             )\n\n\ndef add_default_config(job: Job, prediction_method=""""):  # TODO is this needed?\n    """"""Map to job method default config""""""\n    if prediction_method == """":\n        prediction_method = job.predictive_model.prediction_method\n    method_conf_name = ""{}.{}"".format(job.predictive_model.predictive_model, prediction_method)\n    method_conf = CONF_MAP[method_conf_name]()\n    job[method_conf_name] = method_conf\n    job[\'kmeans\'] = clustering_kmeans()\n    return job\n'"
src/encoding/declare/__init__.py,0,b''
src/encoding/declare/declare.py,0,"b'from itertools import groupby\n\nimport pandas as pd\nfrom ast import literal_eval as make_tuple\n\nfrom pm4py.objects.log.log import Trace\n\nfrom src.encoding.declare.declare_mining import filter_candidates_by_support, generate_train_candidate_constraints, transform_results_to_numpy\nfrom src.encoding.declare.declare_templates import template_sizes\n\n\ndef xes_to_positional(log, label=True):\n    """"""\n    [\n        {tracename:name, tracelabel:label,\n         events:{event_a : [1,2,3], event_b : [4,5,6], event_c : [7,8,9]} }\n    ]\n\n    :param log:\n    :return:\n    """"""\n    return {\n        trace.attributes[\'concept:name\']: {\n            key: [item[0] for item in group]\n            for key, group in groupby(sorted(enumerate([event[\'concept:name\'] for event in trace]), key=lambda x: x[1]), lambda x: x[1])\n        }\n        for trace in log\n    }\n\n\ndef declare_encoding(log, labelling, encoding, additional_columns, cols=None): #TODO JONAS\n    filter_t = True\n    print(""Filter_t"", filter_t)\n    templates = template_sizes.keys()\n\n    constraint_threshold = 0.1\n    candidate_threshold = 0.1\n\n    #apply prefix\n    log = [Trace(trace[:encoding.prefix_length], attributes=trace.attributes) for trace in log]\n\n    # Read into suitable data structure\n    transformed_log = xes_to_positional(log)\n    labels = {trace.attributes[\'concept:name\']: trace.attributes[\'label\'] for trace in log}\n\n    # Extract unique activities from log\n    events_set = {event_label for tid in transformed_log for event_label in transformed_log[tid]}\n\n    # Brute force all possible candidates\n    if cols is None:\n        candidates = [(event,) for event in events_set] + [(e1, e2) for e1 in events_set for e2 in events_set if e1 != e2]\n    else:\n        candidates = list({\n            make_tuple(c.split(\':\')[1]) if len(c.split(\':\')) > 1 else c\n            for c in cols\n            if c not in [\'label\', \'trace_id\']\n        })\n    print(""Start candidates:"", len(candidates))\n\n    # Count by class\n    true_count = len([trace.attributes[\'concept:name\'] for trace in log if trace.attributes[\'label\'] == \'true\'])\n    false_count = len(log) - true_count\n    print(""{} deviant and {} normal traces in set"".format(false_count, true_count))\n    ev_support_true = int(true_count * candidate_threshold)\n    ev_support_false = int(false_count * candidate_threshold)\n\n    if filter_t and cols is None:\n        print(filter_t)\n        print(""Filtering candidates by support"")\n        candidates = filter_candidates_by_support(candidates, transformed_log, labels, ev_support_true, ev_support_false)\n        print(""Support filtered candidates:"", len(candidates))\n\n    constraint_support_false = int(false_count * constraint_threshold)\n    constraint_support_true = int(true_count * constraint_threshold)\n\n    train_results = generate_train_candidate_constraints(candidates, templates, transformed_log, labels, constraint_support_true, constraint_support_false, filter_t=filter_t)\n\n    print(""Candidate constraints generated"")\n\n    # transform to numpy\n    # get trace names\n    data, labels, featurenames, train_names = transform_results_to_numpy(train_results, labels, transformed_log, cols)\n\n    df = pd.DataFrame(data, columns=featurenames)\n\n    df[""trace_id""] = train_names\n    df[""label""] = labels.tolist()\n    return df\n'"
src/encoding/declare/declare_mining.py,3,"b'""""""\nMain file for deviance mining\n""""""\nimport numpy as np\nfrom src.encoding.declare.declare_templates import *\n\n\ndef apply_template_to_log(template, candidate, log):\n    results = []\n    for trace in log:\n        result, vacuity = apply_template(template, log[trace], candidate)\n\n        results.append(result)\n\n    return results\n\n\ndef find_if_satisfied_by_class(constraint_result, transformed_log, labels, support_true, support_false):\n    fulfill_true = 0\n    fulfill_false = 0\n    for i, trace in enumerate(transformed_log):\n        ## TODO: Find if it is better to have > 0 or != 0.\n        if constraint_result[i] > 0:\n        #if constraint_result[i] != 0:\n            if labels[trace] == \'false\':\n                fulfill_false += 1\n            else:\n                fulfill_true += 1\n\n    true_pass = fulfill_true >= support_true\n    false_pass = fulfill_false >= support_false\n\n    return true_pass, false_pass\n\n\ndef generate_train_candidate_constraints(candidates, templates, transformed_log, labels, constraint_support_true,\n                                         constraint_support_false, filter_t=True):\n    all_results = {}\n    for template in templates:\n        print(""Started working on {}"".format(template))\n        for candidate in candidates:\n            if len(candidate) == template_sizes[template]:\n                candidate_name = template + "":"" + str(candidate)\n                constraint_result = apply_template_to_log(template, candidate, transformed_log)\n                satis_true, satis_false = find_if_satisfied_by_class(constraint_result, transformed_log, labels,\n                                                                     constraint_support_true,\n                                                                     constraint_support_false)\n\n                if not filter_t or (satis_true or satis_false):\n                    all_results[candidate_name] = constraint_result\n\n    return all_results\n\n\ndef transform_results_to_numpy(results, labels, transformed_log, cols):\n    """"""\n    Transforms results structure into numpy arrays\n    :param results:\n    :param transformed_log:\n    :return:\n    """"""\n    labels = [labels[trace] for trace in transformed_log]\n    trace_names = [trace for trace in transformed_log]\n    matrix = []\n    featurenames = []\n\n    if cols is None:\n        for feature, result in results.items():\n            matrix.append(result)\n            featurenames.append(feature)\n    else:\n        for c in cols:\n            if c not in [\'trace_id\', \'label\']:\n                if c in results:\n                    matrix.append(results[c])\n                else:\n                    matrix.append([0 for _ in range(len(transformed_log))])\n                featurenames.append(c)\n\n    nparray_data = np.array(matrix).T\n    nparray_labels = np.array(labels)\n    nparray_names = np.array(trace_names)\n    return nparray_data, nparray_labels, featurenames, nparray_names\n\n\ndef filter_candidates_by_support(candidates, transformed_log, labels, support_true, support_false): #TODO JONAS, no idea what this does\n    filtered_candidates = []\n    for candidate in candidates:\n        count_false = 0\n        count_true = 0\n        for trace in transformed_log:\n            ev_ct = 0\n            for event in candidate:\n                if event in [event for event in transformed_log[trace]]:\n                    ev_ct += 1\n                else:\n                    break\n            if ev_ct == len(candidate):  # all candidate events in trace\n                if labels[trace] == \'false\':\n                    count_false += 1\n                else:\n                    count_true += 1\n\n            if count_false >= support_false or count_true >= support_true:\n                filtered_candidates.append(candidate)\n                break\n\n    return filtered_candidates\n\n'"
src/encoding/declare/declare_templates.py,0,"b'""""""\nSecond version of declare templates.\nIn this case, if constraint is violated, then returns -1.\n""""""\n\nfrom typing import Tuple\n\n\ndef template_absence1(trace, event_set):\n    assert (len(event_set) == 1)\n    event = event_set[0]\n    if event in trace:\n        return -1, False\n\n    return 1, False\n\n\ndef template_absence2(trace, event_set):\n    assert (len(event_set) == 1)\n    event = event_set[0]\n\n    if event in trace and len(trace[event]) > 1:\n        return -1, False\n\n    return 1, False\n\n\ndef template_absence3(trace, event_set):\n    assert (len(event_set) == 1)\n    event = event_set[0]\n\n    if event in trace and len(trace[event]) > 2:\n        return -1, False\n\n    return 1, False\n\n\ndef template_init(trace, event_set):\n    # If event is in the first position\n    assert (len(event_set) == 1)\n\n    event = event_set[0]\n\n    if event in trace and trace[event][0] == 0:\n        return 1, False\n\n    return -1, False\n\n\ndef template_exist(trace, event_set):\n    # if event exists in trace\n    assert (len(event_set) == 1)\n    event = event_set[0]\n\n    if event in trace:\n        return len(trace[event]), False\n\n    return -1, False\n\n\ndef template_choice(trace, event_set):\n    # at least one, but not both XOR operation\n\n    assert (len(event_set) == 2)\n\n    event_1 = event_set[0]\n    event_2 = event_set[1]\n\n    if (event_1 in trace) != (event_2 in trace):\n        if event_1 in trace:\n            return len(trace[event_1]), False\n        else:\n            return len(trace[event_2]), False\n\n    return -1, False\n\n\ndef template_coexistence(trace, event_set):\n    # both must exist or not exist at the same time\n\n    assert (len(event_set) == 2)\n\n    event_1 = event_set[0]\n    event_2 = event_set[1]\n\n    if event_1 in trace and event_2 in trace:\n        # return minimum of both existence count\n        return min(len(trace[event_1]), len(trace[event_2])), False\n\n    elif event_1 not in trace and event_2 not in trace:\n        return 0, True\n\n    # Only one exists, violation\n    return -1, False\n\n\ndef template_alternate_precedence(trace, event_set):\n    """"""\n      precedence(A, B) template indicates that event B\n      should occur only if event A has occurred before.\n\n      Alternate condition:\n      ""events must alternate without repetitions of these events in between""\n\n      :param trace:\n      :param event_set:\n      :return:\n      """"""\n\n    # exactly 2 event\n    assert (len(event_set) == 2)\n\n    event_1 = event_set[0]\n    event_2 = event_set[1]\n    if event_2 in trace:\n        if event_1 in trace:\n            # Go through two lists, one by one\n            # first events pos must be before 2nd lists first pos etc...\n            # A -> A -> B -> A -> B\n\n            # efficiency check\n            event_1_count = len(trace[event_1])\n            event_2_count = len(trace[event_2])\n\n            # There has to be more or same amount of event A\'s compared to B\'s\n            if event_2_count > event_1_count:\n                return 0, False\n\n            event_1_positions = trace[event_1]\n            event_2_positions = trace[event_2]\n\n            # Go through all event 2\'s, check that there is respective event 1.\n            # Find largest event 1 position, which is smaller than event 2 position\n\n            # implementation\n            # Check 1-forward, the 1-forward has to be greater than event 2 and current one has to be smaller than event2\n\n            event_1_ind = 0\n            for i, pos2 in enumerate(event_2_positions):\n                # find first in event_2_positions, it has to be before next in event_1_positions\n\n                while True:\n                    if event_1_ind >= len(event_1_positions):\n                        # out of preceding events, but there are still event 2\'s remaining.\n                        return -1, False\n\n                    next_event_1_pos = None\n\n                    if event_1_ind < len(event_1_positions) - 1:\n                        next_event_1_pos = event_1_positions[event_1_ind + 1]\n\n                    event_1_pos = event_1_positions[event_1_ind]\n\n                    if next_event_1_pos:\n                        if event_1_pos < pos2 and next_event_1_pos > pos2:\n                            # found the largest preceding event\n                            event_1_ind += 1\n                            break\n                        elif event_1_pos > pos2 and next_event_1_pos > pos2:\n                            # no event larger\n                            return -1, False\n                        else:\n                            event_1_ind += 1\n\n\n                    else:\n                        # if no next event, check if current is smaller\n                        if event_1_pos < pos2:\n                            event_1_ind += 1\n                            break\n                        else:\n                            return -1, False  # since there is no smaller remaining event\n\n            count = len(event_2_positions)\n            return count, False\n\n\n        else:\n            # impossible because there has to be at least one event1 with event2\n            return -1, False\n\n    return 0, True  # todo: vacuity condition!!\n\n\ndef template_alternate_response(trace, event_set):\n    """"""\n    If there is A, it has to be eventually followed by B.\n    Alternate: there cant be any further A until first next B\n    :param trace:\n    :param event_set:\n    :return:\n    """"""\n    # exactly 2 event\n    assert (len(event_set) == 2)\n\n    event_1 = event_set[0]\n    event_2 = event_set[1]\n\n    if event_1 in trace:\n        if event_2 in trace:\n\n            event_2_ind = 0\n\n            event_1_positions = trace[event_1]\n            event_2_positions = trace[event_2]\n\n            for i, pos1 in enumerate(event_1_positions):\n                # find first in event_2_positions, it has to be before next in event_1_positions\n                next_event_1_pos = None\n                if i < len(event_1_positions) - 1:\n                    next_event_1_pos = event_1_positions[i + 1]\n\n                while True:\n                    if event_2_ind >= len(event_2_positions):\n                        # out of response events\n                        return -1, False\n\n                    if event_2_positions[event_2_ind] > pos1:\n                        # found first greater than event 1 pos\n                        # check if it is smaller than next event 1\n                        if next_event_1_pos and event_2_positions[event_2_ind] > next_event_1_pos:\n                            # next event 2 is after next event 1..\n                            return -1, False\n                        else:\n                            # consume event 2 and break out to next event 1\n                            event_2_ind += 1\n                            break\n\n                    event_2_ind += 1\n\n            count = len(event_1_positions)\n            return count, False\n            # every event 2 position has to be after respective event 1 position and before next event 2 position\n\n\n\n        else:\n            return -1, False\n\n    # Vacuously\n    return 0, True\n\n\ndef template_alternate_succession(trace, event_set):\n    """"""\n    A-B-A-B - ... always in pair\n    # TODO: is zipping and just checking respective one okay? Not likely?\n    :param trace:\n    :param event_set:\n    :return:\n    """"""\n\n    assert (len(event_set) == 2)\n\n    event_1 = event_set[0]\n    event_2 = event_set[1]\n\n    if (event_1 in trace) != (event_2 in trace):\n        return -1, False\n\n    if event_1 in trace and event_2 in trace:\n        event_1_positions = trace[event_1]\n        event_2_positions = trace[event_2]\n\n        if len(event_1_positions) != len(event_2_positions):\n            return -1, False  # impossible if not same length\n\n        pos = -1\n        current_ind = 0\n        switch = False\n        while current_ind < len(event_1_positions):\n\n            # Use switch to know from which array to get next..\n            if switch:\n                next_pos = event_2_positions[current_ind]\n                current_ind += 1\n            else:\n                next_pos = event_1_positions[current_ind]\n\n            if next_pos <= pos:\n                return -1, False  # next one is smaller than current\n\n            pos = next_pos  # go to next one.\n            switch = not switch  # swap array\n\n        count = len(event_1_positions)\n        return count, False\n\n    return 0, True  # vacuity condition\n\n\ndef template_chain_precedence(trace, event_set):  # exactly 2 event\n    assert (len(event_set) == 2)\n\n    event_1 = event_set[0]\n    event_2 = event_set[1]\n\n    if event_2 in trace:\n        if event_1 in trace:\n            # Each event1 must instantly be followed by event2\n            event_1_positions = trace[event_1]\n            event_2_positions = trace[event_2]\n\n            if len(event_1_positions) < len(event_2_positions):\n                return -1, False  # impossible to fulfill\n\n            event_1_ind = 0\n\n            for i, pos2 in enumerate(event_2_positions):\n                # find first event 2 which is after each event 1\n                while True:\n                    if event_1_ind >= len(event_1_positions):\n                        return -1, False  # not enough response\n\n                    if pos2 < event_1_positions[event_1_ind]:\n                        return -1, False  # passed, no event before pos2\n\n                    if pos2 - 1 == event_1_positions[event_1_ind]:\n                        event_1_ind += 1\n                        break  # found right one! Move to next B event\n\n                    event_1_ind += 1\n\n            count = len(event_2_positions)\n            return count, False\n        else:\n            return -1, False  # no response for event1\n\n    return 0, True  # todo, vacuity\n\n\ndef template_chain_response(trace, event_set):\n    # exactly 2 event\n    assert (len(event_set) == 2)\n\n    event_1 = event_set[0]\n    event_2 = event_set[1]\n\n    if event_1 in trace:\n        if event_2 in trace:\n            # Each event1 must instantly be followed by event2\n            event_1_positions = trace[event_1]\n            event_2_positions = trace[event_2]\n\n            if len(event_1_positions) > len(event_2_positions):\n                return -1, False  # impossible to fulfill\n\n            event_2_ind = 0\n\n            for i, pos1 in enumerate(event_1_positions):\n                # find first event 2 which is after each event 1\n                while True:\n                    if event_2_ind >= len(event_2_positions):\n                        return -1, False  # not enough response\n\n                    if pos1 < event_2_positions[event_2_ind]:\n                        if pos1 + 1 != event_2_positions[event_2_ind]:\n                            return -1, False  # next one is not straight after\n                        else:\n                            event_2_ind += 1\n                            break  # next one is straight after move to next event1\n                    event_2_ind += 1\n\n            count = len(event_1_positions), False\n            return count\n\n        else:\n            return -1, False  # no response for event1\n\n    return 0, True  # todo, vacuity\n\n\ndef template_chain_succession(trace, event_set):\n    """"""\n    Everytime there is A, it has to be instantly followed by B, everytime there is B\n    it has to be preceded by A\n    :param trace:\n    :param event_set:\n    :return:\n    """"""\n\n    assert (len(event_set) == 2)\n\n    event_1 = event_set[0]\n    event_2 = event_set[1]\n\n    if (event_1 in trace) != (event_2 in trace):\n        return -1, False\n\n    if event_1 in trace and event_2 in trace:\n        event_1_positions = trace[event_1]\n        event_2_positions = trace[event_2]\n\n        if len(event_1_positions) != len(event_2_positions):\n            # has to be same number of events\n            return -1, False\n\n        # They have to appear together, with event1 always before event2\n        for i in range(len(event_1_positions)):\n            if event_1_positions[i] + 1 != event_2_positions[i]:\n                return -1, False\n\n        count = len(event_1_positions)\n        return count, False\n\n    return 0, True  # todo vacuity\n\n\ndef template_exactly1(trace, event_set):\n    # exactly 1 event\n\n    event = event_set[0]\n\n    if event in trace and len(trace[event]) == 1:\n        return 1, False\n\n    return -1, False\n\n\ndef template_exactly2(trace, event_set):\n    # exactly 2 events\n    assert (len(event_set) == 1)\n\n    event = event_set[0]\n\n    if event in trace and len(trace[event]) == 2:\n        return 1, False\n\n    return -1, False\n\n\ndef template_exactly3(trace, event_set):\n    # exactly 3 event\n    assert (len(event_set) == 1)\n\n    event = event_set[0]\n\n    if event in trace and len(trace[event]) == 3:\n        return 1, False\n\n    return -1, False\n\n\ndef template_not_chain_succession(trace, event_set):\n    """"""\n    TODO: check vacuity conditions for not templates.\n    :param trace:\n    :param event_set:\n    :return:\n    """"""\n    assert (len(event_set) == 2)\n\n    event_1 = event_set[0]\n    event_2 = event_set[1]\n\n    if event_1 in trace and event_2 in trace:\n        # Find a place, where A and B are next\n        event_1_positions = trace[event_1]\n        event_2_positions = trace[event_2]\n\n        e1_ind = 0\n        e2_ind = 0\n        while True:\n            if e1_ind >= len(event_1_positions) or e2_ind >= len(event_2_positions):\n                return 1, False  # no more choices\n\n            current_e1 = event_1_positions[e1_ind]\n            current_e2 = event_2_positions[e2_ind]\n\n            if current_e1 > current_e2:\n                e2_ind += 1\n            else:\n                if current_e1 + 1 == current_e2:\n                    return -1, False  # found a place, where they are together\n                e1_ind += 1\n\n    # How to do vacuity here? 1 by default most likely\n    return 0, True  # TODO, this condition?\n\n\ndef template_not_coexistence(trace, event_set):\n    # exactly 2 event\n    assert (len(event_set) == 2)\n\n    event_1 = event_set[0]\n    event_2 = event_set[1]\n\n    if event_1 in trace and event_2 in trace:\n        return -1, False  # if both in trace, then they exist together.\n    elif event_1 in trace or event_2 in trace: # only one exists in trace\n        return 1, False\n\n    # if neither in trace, vacuously fulfilled\n    return 0, True\n\n\ndef template_not_succession(trace, event_set):\n    # exactly 2 event\n    assert (len(event_set) == 2)\n\n    event_1 = event_set[0]\n    event_2 = event_set[1]\n\n    if event_1 in trace:\n        if event_2 in trace:\n\n            # for this to be true, last event 2 has to be before first event 1\n            first_event_1 = trace[event_1][0]\n            last_event_2 = trace[event_2][-1]\n\n            if first_event_1 < last_event_2:\n                return -1, False  # in this case there is an event 2, which appears after first event\n            else:\n                return 1, False\n        else:\n            return 1, False  # not possible\n\n    # if not, then impossible and template fulfilled\n    return 0, True  # vacuity\n\n\ndef template_precedence(trace, event_set):\n    """"""\n    precedence(A, B) template indicates that event B\n    should occur only if event A has occurred before.\n    :param trace:\n    :param event_set:\n    :return:\n    """"""\n\n    # exactly 2 event\n    assert (len(event_set) == 2)\n\n    event_1 = event_set[0]\n    event_2 = event_set[1]\n\n    if event_2 in trace:\n        if event_1 in trace:\n            first_pos_event_1 = trace[event_1][0]\n            first_pos_event_2 = trace[event_2][0]\n            if first_pos_event_1 < first_pos_event_2:\n                # todo: check frequency condition\n                count = min(len(trace[event_1]), len(trace[event_2]))\n                return count, False\n            else:\n                # first position of event 2 is before first event 1\n                return -1, False\n\n        else:\n            # impossible because there has to be at least one event1 with event2\n            return -1, False\n\n    # Vacuously fulfilled\n    return 0, True\n\n\ndef template_response(trace, event_set):\n    """"""\n    If event B is the response of event A, then when event\n    A occurs, event B should eventually occur after A.\n    :param trace:\n    :param event_set:\n    :return:\n    """"""\n    # exactly 2 event\n    assert (len(event_set) == 2)\n\n    event_1 = event_set[0]\n    event_2 = event_set[1]\n\n    if event_1 in trace:\n        if event_2 in trace:\n            last_pos_event_1 = trace[event_1][-1]\n            last_pos_event_2 = trace[event_2][-1]\n            if last_pos_event_2 > last_pos_event_1:\n                # todo: check frequency counting How to count fulfillments? min of A and B?\n                count = min(len(trace[event_1]), len(trace[event_2]))\n                return count, False\n\n            else:\n                # last event2 is before event1\n                return -1, False\n        else:\n            # impossible for event 2 to be after event 1 if there is no event 2\n            return -1, False\n\n    return 0, True  # not vacuity atm..\n\n\ndef template_responded_existence(trace, event_set):\n    """"""\n    The responded existence(A, B) template specifies that\n    if event A occurs, event B should also occur (either\n        before or after event A).\n    :return:\n    """"""\n\n    # exactly 2 event\n    assert (len(event_set) == 2)\n\n    event_1 = event_set[0]\n    event_2 = event_set[1]\n\n    if event_1 in trace:\n        if event_2 in trace:\n            return min(len(trace[event_1]), len(trace[event_2])), False\n        else:\n            return -1, False\n\n    return 0, True  # 0, if vacuity condition\n\n\ndef template_succession(trace, event_set) -> Tuple[int, bool]:\n    """"""\n    succession(A, B) template requires that both response and\n    precedence relations hold between the events A and B.\n    :return:\n\n    If A appears, then eventually there has to be B\n    If B appears, then it has to be preceded by A\n    """"""\n    # exactly 2 event\n    assert (len(event_set) == 2)\n\n    event_1 = event_set[0]\n    event_2 = event_set[1]\n\n    if event_1 in trace and not event_2 in trace:\n        return -1, False\n\n    if event_2 in trace and not event_1 in trace:\n        return -1, False\n\n    if event_1 in trace and event_2 in trace:\n        # First position of A\n        first_pos_event_1 = trace[event_1][0]\n\n        # First position of B\n        first_pos_event_2 = trace[event_2][0]\n\n        # Last position A\n        last_pos_event_1 = trace[event_1][-1]\n\n        # Last position B\n        last_pos_event_2 = trace[event_2][-1]\n\n        if first_pos_event_1 < first_pos_event_2 and last_pos_event_1 < last_pos_event_2:\n            # todo: check frequency!\n            count = min(len(trace[event_1]), len(trace[event_2]))\n            return count, False\n        else:\n            return -1, False\n\n    # todo: vacuity condition!\n    return 0, True\n\n\n# Does order matter in template?\ntemplate_order = {\n    ""choice"": False,\n    ""coexistence"": False,\n    ""alternate_precedence"": True,\n    ""alternate_succession"": True,\n    ""alternate_response"": True,\n    ""chain_precedence"": True,\n    ""chain_response"": True,\n    ""chain_succession"": True,\n    ""not_chain_succession"": True,\n    ""not_coexistence"": False,\n    ""not_succession"": True,\n    ""responded_existence"": True,\n    ""response"": True,\n    ""succession"": True,\n    ""precedence"": True\n}\n\ntemplate_sizes = {\n                  ""init"": 1,\n                  ""exist"": 1,\n                  ""absence1"": 1,\n                  ""absence2"": 1,\n                  ""absence3"": 1,\n                  ""choice"": 2,\n                  ""coexistence"": 2,\n                  ""exactly1"": 1,\n                  ""exactly2"": 1,\n                  ""exactly3"": 1,\n                  ""alternate_precedence"": 2,\n                  ""alternate_succession"": 2,\n                  ""alternate_response"": 2,\n                  ""chain_precedence"": 2,\n                  ""chain_response"": 2,\n                  ""chain_succession"": 2,\n                  ""not_chain_succession"": 2,\n                  ""not_coexistence"": 2,\n                  ""not_succession"": 2,\n                  ""responded_existence"": 2,\n                  ""response"": 2,\n                  ""succession"": 2,\n                  ""precedence"": 2\n                  }\n\n\ndef apply_template(template_str, trace, event_set):\n    template_map = {\n        ""init"": template_init,\n        ""exist"": template_exist,\n        ""absence1"": template_absence1,\n        ""absence2"": template_absence2,\n        ""absence3"": template_absence3,\n        ""choice"": template_choice,\n        ""coexistence"": template_coexistence,\n        ""exactly1"": template_exactly1,\n        ""exactly2"": template_exactly2,\n        ""exactly3"": template_exactly3,\n        ""alternate_precedence"": template_alternate_precedence,\n        ""alternate_succession"": template_alternate_succession,\n        ""alternate_response"": template_alternate_response,\n        ""chain_precedence"": template_chain_precedence,\n        ""chain_response"": template_chain_response,\n        ""chain_succession"": template_chain_succession,\n        ""not_chain_succession"": template_not_chain_succession,\n        ""not_coexistence"": template_not_coexistence,\n        ""not_succession"": template_not_succession,\n        ""responded_existence"": template_responded_existence,\n        ""response"": template_response,\n        ""succession"": template_succession,\n        ""precedence"": template_precedence\n    }\n\n    lower = template_str.lower()\n\n    if lower in template_map:\n        return template_map[lower](trace, event_set)\n    else:\n        raise Exception(""Template not found"")\n'"
src/encoding/migrations/__init__.py,0,b''
src/encoding/tests/__init__.py,0,b''
src/encoding/tests/test_boolean.py,0,"b'from django.test import TestCase\n\nfrom src.encoding.boolean_frequency import boolean\nfrom src.encoding.common import encode_label_logs, LabelTypes\nfrom src.encoding.encoding_container import ALL_IN_ONE\nfrom src.encoding.models import ValueEncodings, TaskGenerationTypes\nfrom src.predictive_model.models import PredictiveModels\nfrom src.utils.event_attributes import unique_events\nfrom src.utils.file_service import get_log\nfrom src.utils.tests_utils import general_example_test_filepath, general_example_train_filepath, create_test_log, \\\n    general_example_test_filename, general_example_train_filename, create_test_job, create_test_encoding, \\\n    create_test_predictive_model, create_test_labelling\n\n\nclass TestBooleanSplit(TestCase):\n    def setUp(self):\n        test_log = get_log(create_test_log(log_name=general_example_test_filename,\n                                           log_path=general_example_test_filepath))\n        training_log = get_log(create_test_log(log_name=general_example_train_filename,\n                                               log_path=general_example_train_filepath))\n        self.training_df, self.test_df = encode_label_logs(training_log,\n                                                           test_log,\n                                                           create_test_job(\n                                                               encoding=create_test_encoding(\n                                                                   value_encoding=ValueEncodings.BOOLEAN.value,\n                                                                   add_elapsed_time=True\n                                                               ),\n                                                               predictive_model=create_test_predictive_model(\n                                                                   predictive_model=PredictiveModels.CLASSIFICATION.value\n                                                               )\n                                                           ))\n\n    def test_shape(self):\n        self.assert_shape(self.training_df, (4, 11))\n        self.assert_shape(self.test_df, (2, 11))\n\n    def assert_shape(self, df, shape: tuple):\n        names = [\'register request\', \'examine casually\', \'check ticket\', \'decide\',\n                 \'reinitiate request\', \'examine thoroughly\', \'pay compensation\',\n                 \'reject request\', \'trace_id\', \'label\', \'elapsed_time\']\n        for name in names:\n            self.assertIn(name, df.columns.values.tolist())\n        self.assertEqual(shape, df.shape)\n\n\nclass TestGeneralTest(TestCase):\n    """"""Making sure it actually works""""""\n\n    def setUp(self):\n        self.log = get_log(create_test_log(log_name=general_example_test_filename,\n                                           log_path=general_example_test_filepath))\n        self.event_names = unique_events(self.log)\n        self.encoding = create_test_encoding(\n            value_encoding=ValueEncodings.BOOLEAN.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=1\n        )\n        self.labelling = create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value)\n\n    def test_header(self):\n        df = boolean(self.log, self.event_names, self.labelling, self.encoding)\n        names = [\'register request\', \'examine casually\', \'check ticket\', \'decide\',\n                 \'reinitiate request\', \'examine thoroughly\',\n                 \'reject request\', \'trace_id\', \'label\', \'elapsed_time\']\n        for name in names:\n            self.assertIn(name, df.columns.values.tolist())\n\n    def test_prefix1(self):\n        df = boolean(self.log, self.event_names, self.labelling, self.encoding)\n\n        self.assertEqual(df.shape, (2, 10))\n        row1 = df[df.trace_id == \'5\'].iloc[0]\n        self.assertTrue(row1[\'register request\'])\n        self.assertFalse(row1[\'examine casually\'])\n        self.assertEqual(1576440.0, row1.label)\n        row2 = df[df.trace_id == \'4\'].iloc[0]\n        self.assertTrue(row2[\'register request\'])\n        self.assertFalse(row2[\'examine casually\'])\n        self.assertEqual(520920.0, row2.label)\n\n    def test_prefix1_no_label(self):\n        labelling = create_test_labelling(label_type=LabelTypes.NO_LABEL.value)\n        df = boolean(self.log, self.event_names, labelling, self.encoding)\n\n        self.assertEqual(df.shape, (2, 8))\n        self.assertNotIn(\'label\', df.columns.values.tolist())\n\n    def test_prefix1_no_elapsed_time(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.BOOLEAN.value,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=1\n        )\n        df = boolean(self.log, self.event_names, self.labelling, encoding)\n\n        self.assertEqual(df.shape, (2, 9))\n        self.assertNotIn(\'elapsed_time\', df.columns.values.tolist())\n\n    def test_prefix2(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.BOOLEAN.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=2)\n        df = boolean(self.log, self.event_names, self.labelling, encoding)\n\n        self.assertEqual(df.shape, (2, 10))\n        row1 = df[df.trace_id == \'5\'].iloc[0]\n        self.assertTrue(row1[\'register request\'])\n        self.assertTrue(row1[\'examine casually\'])\n        self.assertEqual(1485600.0, row1.label)\n        row2 = df[df.trace_id == \'4\'].iloc[0]\n        self.assertTrue(row2[\'register request\'])\n        self.assertFalse(row2[\'examine casually\'])\n        self.assertTrue(row2[\'check ticket\'])\n        self.assertEqual(445080.0, row2.label)\n\n    def test_prefix5(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.BOOLEAN.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=5)\n        df = boolean(self.log, self.event_names, self.labelling, encoding)\n\n        self.assertEqual(df.shape, (2, 10))\n        row1 = df[df.trace_id == \'5\'].iloc[0]\n        self.assertListEqual([\'5\', True, True, True, True, True, False, False, 458160.0, 1118280.0],\n                             row1.values.tolist())\n\n    def test_prefix10(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.BOOLEAN.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=10)\n        df = boolean(self.log, self.event_names, self.labelling, encoding)\n\n        self.assertEqual(df.shape, (1, 10))\n        row1 = df[df.trace_id == \'5\'].iloc[0]\n        self.assertListEqual([\'5\', True, True, True, True, True, False, False, 1296240.0, 280200.0],\n                             row1.values.tolist())\n\n    def test_prefix10_padding(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.BOOLEAN.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=10,\n            padding=True)\n        df = boolean(self.log, self.event_names, self.labelling, encoding)\n\n        self.assertEqual(df.shape, (2, 10))\n        row1 = df[df.trace_id == \'4\'].iloc[0]\n        self.assertListEqual([\'4\', True, False, True, True, False, True, True, 520920.0, 0.0], row1.values.tolist())\n\n    def test_prefix10_all_in_one(self):\n        encoding = create_test_encoding(value_encoding=ValueEncodings.BOOLEAN.value,\n                                        prefix_length=10,\n                                        add_elapsed_time=True,\n                                        task_generation_type=ALL_IN_ONE)\n        df = boolean(self.log, self.event_names, self.labelling, encoding)\n\n        self.assertEqual(df.shape, (10, 10))\n        row1 = df[df.trace_id == \'5\'].iloc[9]\n        self.assertListEqual([\'5\', True, True, True, True, True, False, False, 1296240.0, 280200.0],\n                             row1.values.tolist())\n        self.assertFalse(df.isnull().values.any())\n\n    def test_prefix10_padding_all_in_one(self):\n        encoding = create_test_encoding(value_encoding=ValueEncodings.BOOLEAN.value,\n                                        prefix_length=10,\n                                        add_elapsed_time=True,\n                                        padding=True,\n                                        task_generation_type=ALL_IN_ONE)\n        df = boolean(self.log, self.event_names, self.labelling, encoding)\n\n        self.assertEqual(df.shape, (15, 10))\n        row1 = df[df.trace_id == \'4\'].iloc[4]\n        self.assertListEqual([\'4\', True, False, True, True, False, True, True, 520920.0, 0.0], row1.values.tolist())\n        self.assertFalse(df.isnull().values.any())\n'"
src/encoding/tests/test_complex.py,0,"b""from django.test import TestCase\n\nfrom src.encoding.complex_last_payload import complex\nfrom src.encoding.models import ValueEncodings, TaskGenerationTypes\nfrom src.labelling.label_container import LabelContainer\nfrom src.labelling.models import LabelTypes\nfrom src.utils.event_attributes import unique_events, get_additional_columns\nfrom src.utils.file_service import get_log\nfrom src.utils.tests_utils import general_example_test_filepath, create_test_log, general_example_test_filename, \\\n    create_test_encoding, create_test_labelling\n\n\nclass Complex(TestCase):\n    def setUp(self):\n        self.log = get_log(create_test_log(log_name=general_example_test_filename,\n                                           log_path=general_example_test_filepath))\n        self.event_names = unique_events(self.log)\n        self.add_col = get_additional_columns(self.log)\n        self.encoding = create_test_encoding(\n            value_encoding=ValueEncodings.COMPLEX.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=1)\n        self.labelling = create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value)\n\n    def test_shape(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.COMPLEX.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=2)\n        df = complex(self.log, self.labelling, encoding, self.add_col)\n\n        self.assertEqual((2, 15), df.shape)\n        headers = ['trace_id', 'AMOUNT', 'creator', 'prefix_1', 'Activity_1', 'Costs_1', 'Resource_1',\n                   'org:resource_1', 'prefix_2', 'Activity_2', 'Costs_2', 'Resource_2', 'org:resource_2',\n                   'elapsed_time', 'label']\n        self.assertListEqual(headers, df.columns.values.tolist())\n\n    def test_prefix1(self):\n        df = complex(self.log, self.labelling, self.encoding, self.add_col)\n\n        row1 = df[(df.trace_id == '5')].iloc[0].tolist()\n        self.assertListEqual(row1,\n                             ['5', '300', 'Fluxicon Nitro', 'register request', 'register request', '50', 'Ellen',\n                              'Ellen', 0.0, 1576440.0])\n        row2 = df[(df.trace_id == '4')].iloc[0].tolist()\n        self.assertListEqual(row2,\n                             ['4', '100', 'Fluxicon Nitro', 'register request', 'register request', '50', 'Pete',\n                              'Pete', 0.0, 520920.0])\n\n    def test_prefix1_no_label(self):\n        labelling = create_test_labelling(label_type=LabelTypes.NO_LABEL.value)\n        df = complex(self.log, labelling, self.encoding, self.add_col)\n\n        row1 = df[(df.trace_id == '5')].iloc[0].tolist()\n        self.assertListEqual(row1,\n                             ['5', '300', 'Fluxicon Nitro', 'register request', 'register request', '50', 'Ellen',\n                              'Ellen'])\n        row2 = df[(df.trace_id == '4')].iloc[0].tolist()\n        self.assertListEqual(row2,\n                             ['4', '100', 'Fluxicon Nitro', 'register request', 'register request', '50', 'Pete',\n                              'Pete'])\n\n    def test_prefix1_no_elapsed_time(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.COMPLEX.value,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=1)\n        df = complex(self.log, LabelContainer(), encoding, self.add_col)\n\n        row1 = df[(df.trace_id == '5')].iloc[0].tolist()\n        self.assertListEqual(row1,\n                             ['5', '300', 'Fluxicon Nitro', 'register request', 'register request', '50', 'Ellen',\n                              'Ellen', 1576440.0])\n        row2 = df[(df.trace_id == '4')].iloc[0].tolist()\n        self.assertListEqual(row2,\n                             ['4', '100', 'Fluxicon Nitro', 'register request', 'register request', '50', 'Pete',\n                              'Pete', 520920.0])\n\n    def test_prefix2(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.COMPLEX.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=2)\n        df = complex(self.log, self.labelling, encoding, self.add_col)\n\n        row1 = df[(df.trace_id == '5')].iloc[0].tolist()\n        self.assertListEqual(row1,\n                             ['5', '300', 'Fluxicon Nitro', 'register request', 'register request', '50', 'Ellen',\n                              'Ellen', 'examine casually', 'examine casually', '400', 'Mike', 'Mike', 90840.0,\n                              1485600.0])\n        row2 = df[(df.trace_id == '4')].iloc[0].tolist()\n        self.assertListEqual(row2,\n                             ['4', '100', 'Fluxicon Nitro', 'register request', 'register request', '50', 'Pete',\n                              'Pete', 'check ticket', 'check ticket', '100', 'Mike', 'Mike', 75840.0, 445080.0])\n\n    def test_prefix5(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.COMPLEX.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=5)\n        df = complex(self.log, self.labelling, encoding, self.add_col)\n\n        self.assertEqual(df.shape, (2, 30))\n        self.assertFalse(df.isnull().values.any())\n\n    def test_prefix10(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.COMPLEX.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=10)\n        df = complex(self.log, self.labelling, encoding, self.add_col)\n\n        self.assertEqual(df.shape, (1, 55))\n        self.assertFalse(df.isnull().values.any())\n\n    def test_prefix10_zero_padding(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.COMPLEX.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=10,\n            padding=True)\n        df = complex(self.log, self.labelling, encoding, self.add_col)\n\n        self.assertEqual(df.shape, (2, 55))\n        self.assertFalse(df.isnull().values.any())\n\n    def test_prefix10_all_in_one(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.COMPLEX.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ALL_IN_ONE.value,\n            prefix_length=10\n        )\n        df = complex(self.log, self.labelling, encoding, self.add_col)\n\n        self.assertEqual(df.shape, (10, 55))\n        self.assertFalse(df.isnull().values.any())\n\n    def test_prefix10_zero_padding_all_in_one(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.COMPLEX.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ALL_IN_ONE.value,\n            prefix_length=10,\n            padding=True)\n        df = complex(self.log, self.labelling, encoding, self.add_col)\n\n        self.assertEqual(df.shape, (15, 55))\n        self.assertFalse(df.isnull().values.any())\n"""
src/encoding/tests/test_encoding_parser.py,0,"b""from django.test import TestCase\nfrom pandas import DataFrame\n\nfrom src.encoding.boolean_frequency import boolean, frequency\nfrom src.encoding.complex_last_payload import complex\nfrom src.encoding.encoding_parser import EncodingParser\nfrom src.encoding.models import ValueEncodings\nfrom src.encoding.simple_index import simple_index\nfrom src.predictive_model.models import PredictiveModels\nfrom src.utils.event_attributes import unique_events, get_additional_columns\nfrom src.utils.file_service import get_log\nfrom src.utils.tests_utils import general_example_train_filepath, create_test_log, general_example_train_filename, \\\n    create_test_labelling, create_test_encoding, general_example_test_filename, general_example_test_filepath\n\n\nclass TestEncodingParser(TestCase):\n    @staticmethod\n    def _get_parser(encoding=ValueEncodings.COMPLEX.value, binary_target=False,\n                    task=PredictiveModels.TIME_SERIES_PREDICTION.value):\n        return EncodingParser(encoding, binary_target, task)\n\n    @staticmethod\n    def _drop_columns_and_split(df: DataFrame) -> (DataFrame, DataFrame):\n        return df.drop(['trace_id', 'label'], 1), DataFrame(df['label'])\n\n    def setUp(self):\n        self.train_log = get_log(create_test_log(log_name=general_example_train_filename,\n                                                 log_path=general_example_train_filepath))\n        self.train_event_names = unique_events(self.train_log)\n        self.labelling = create_test_labelling()\n        self.train_add_col = get_additional_columns(self.train_log)\n\n        self.test_log = get_log(create_test_log(log_name=general_example_test_filename,\n                                                log_path=general_example_test_filepath))\n        self.test_event_names = unique_events(self.test_log)\n        self.test_add_col = get_additional_columns(self.test_log)\n\n    def test_simple_index_encoding_parsing(self):\n        encoding = create_test_encoding(value_encoding=ValueEncodings.SIMPLE_INDEX.value, prefix_length=3, padding=True)\n\n        parser = self._get_parser(encoding=ValueEncodings.SIMPLE_INDEX.value)\n        train_df = simple_index(self.train_log, self.labelling, encoding)\n        test_df = simple_index(self.test_log, self.labelling, encoding)\n\n        train_df, targets_df = self._drop_columns_and_split(train_df)\n        test_df, _ = self._drop_columns_and_split(test_df)\n        test_df.iloc[0, 0] = 'test123'\n\n        parser.parse_training_dataset(train_df)\n        parser.parse_targets(targets_df)\n        parser.parse_testing_dataset(test_df)\n\n    def test_boolean_encoding_parsing(self):\n        encoding = create_test_encoding(value_encoding=ValueEncodings.BOOLEAN.value, prefix_length=2, padding=True)\n\n        parser = self._get_parser(encoding=ValueEncodings.BOOLEAN.value)\n        train_df = boolean(self.train_log, self.train_event_names, self.labelling, encoding)\n        test_df = boolean(self.test_log, self.test_event_names, self.labelling, encoding)\n\n        train_df, targets_df = self._drop_columns_and_split(train_df)\n\n        test_df, _ = self._drop_columns_and_split(test_df)\n\n        parser.parse_training_dataset(train_df)\n        parser.parse_targets(targets_df)\n        parser.parse_testing_dataset(test_df)\n\n    def test_frequency_encoding_parsing(self):\n        encoding = create_test_encoding(value_encoding=ValueEncodings.FREQUENCY.value, prefix_length=2, padding=True)\n\n        parser = self._get_parser(encoding=ValueEncodings.FREQUENCY.value)\n        train_df = frequency(self.train_log, self.train_event_names, self.labelling, encoding)\n        test_df = frequency(self.test_log, self.test_event_names, self.labelling, encoding)\n\n        train_df, targets_df = self._drop_columns_and_split(train_df)\n\n        test_df, _ = self._drop_columns_and_split(test_df)\n\n        parser.parse_training_dataset(train_df)\n        parser.parse_targets(targets_df)\n        parser.parse_testing_dataset(test_df)\n\n    def test_complex_encoding_parsing(self):\n        encoding = create_test_encoding(value_encoding=ValueEncodings.COMPLEX.value, prefix_length=2, padding=True)\n\n        parser = self._get_parser(encoding=ValueEncodings.COMPLEX.value)\n        train_df = complex(self.train_log, self.labelling, encoding, self.train_add_col)\n        test_df = complex(self.test_log, self.labelling, encoding, self.train_add_col)\n\n        train_df, targets_df = self._drop_columns_and_split(train_df)\n\n        test_df, _ = self._drop_columns_and_split(test_df)\n\n        parser.parse_training_dataset(train_df)\n        parser.parse_targets(targets_df)\n        parser.parse_testing_dataset(test_df)\n"""
src/encoding/tests/test_frequency.py,0,"b'from django.test import TestCase\n\nfrom src.encoding.boolean_frequency import frequency\nfrom src.encoding.common import encode_label_logs, LabelTypes\nfrom src.encoding.models import ValueEncodings, TaskGenerationTypes\nfrom src.utils.event_attributes import unique_events\nfrom src.utils.file_service import get_log\nfrom src.utils.tests_utils import general_example_test_filepath, general_example_train_filepath, create_test_log, \\\n    general_example_test_filename, general_example_train_filename, create_test_encoding, create_test_labelling, \\\n    create_test_job\n\n\nclass TestFrequencySplit(TestCase):\n    def setUp(self):\n        test_log = get_log(create_test_log(log_name=general_example_test_filename,\n                                           log_path=general_example_test_filepath))\n        training_log = get_log(create_test_log(log_name=general_example_train_filename,\n                                               log_path=general_example_train_filepath))\n        self.encoding = create_test_encoding(\n            value_encoding=ValueEncodings.FREQUENCY.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=1)\n        self.labelling = create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value)\n\n        self.training_df, self.test_df = encode_label_logs(training_log,\n                                                           test_log,\n                                                           create_test_job(\n                                                               encoding=self.encoding,\n                                                               labelling=self.labelling\n                                                           ))\n\n    def test_shape(self):\n        self.assert_shape(self.training_df, (4, 11))\n        self.assert_shape(self.test_df, (2, 11))\n\n    def assert_shape(self, df, shape: tuple):\n        names = [\'register request\', \'examine casually\', \'check ticket\', \'decide\',\n                 \'reinitiate request\', \'examine thoroughly\',\n                 \'reject request\', \'trace_id\', \'label\', \'elapsed_time\']\n        for name in names:\n            self.assertIn(name, df.columns.values.tolist())\n        self.assertEqual(shape, df.shape)\n\n\nclass TestGeneralTest(TestCase):\n    """"""Making sure it actually works""""""\n\n    def setUp(self):\n        self.log = get_log(create_test_log(log_name=general_example_test_filename,\n                                           log_path=general_example_test_filepath))\n        self.event_names = unique_events(self.log)\n        self.encoding = create_test_encoding(\n            value_encoding=ValueEncodings.FREQUENCY.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=1)\n        self.labelling = create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value)\n\n    def test_header(self):\n        df = frequency(self.log, self.event_names, self.labelling, self.encoding)\n        names = [\'register request\', \'examine casually\', \'check ticket\', \'decide\',\n                 \'reinitiate request\', \'examine thoroughly\',\n                 \'reject request\', \'trace_id\', \'label\', \'elapsed_time\']\n        for name in names:\n            self.assertIn(name, df.columns.values.tolist())\n\n    def test_prefix1(self):\n        df = frequency(self.log, self.event_names, self.labelling, self.encoding)\n\n        self.assertEqual(df.shape, (2, 10))\n        row1 = df[df.trace_id == \'5\'].iloc[0]\n        self.assertTrue(row1[\'register request\'])\n        self.assertFalse(row1[\'examine casually\'])\n        self.assertEqual(1576440.0, row1.label)\n        row2 = df[df.trace_id == \'4\'].iloc[0]\n        self.assertTrue(row2[\'register request\'])\n        self.assertFalse(row2[\'examine casually\'])\n        self.assertEqual(520920.0, row2.label)\n\n    def test_prefix1_no_label(self):\n        labelling = create_test_labelling(label_type=LabelTypes.NO_LABEL.value)\n        df = frequency(self.log, self.event_names, labelling, self.encoding)\n\n        self.assertEqual(df.shape, (2, 8))\n        self.assertNotIn(\'label\', df.columns.values.tolist())\n\n    def test_prefix1_no_elapsed_time(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.FREQUENCY.value,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=1)\n        df = frequency(self.log, self.event_names, self.labelling, encoding)\n\n        self.assertEqual(df.shape, (2, 9))\n        self.assertNotIn(\'elapsed_time\', df.columns.values.tolist())\n\n    def test_prefix2(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.FREQUENCY.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=2)\n        df = frequency(self.log, self.event_names, self.labelling, encoding)\n\n        self.assertEqual(df.shape, (2, 10))\n        row1 = df[df.trace_id == \'5\'].iloc[0]\n        self.assertTrue(row1[\'register request\'])\n        self.assertTrue(row1[\'examine casually\'])\n        self.assertEqual(1485600.0, row1.label)\n        row2 = df[df.trace_id == \'4\'].iloc[0]\n        self.assertTrue(row2[\'register request\'])\n        self.assertFalse(row2[\'examine casually\'])\n        self.assertTrue(row2[\'check ticket\'])\n        self.assertEqual(445080.0, row2.label)\n\n    def test_prefix5(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.FREQUENCY.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=5)\n        df = frequency(self.log, self.event_names, self.labelling, encoding)\n\n        self.assertEqual(df.shape, (2, 10))\n        row1 = df[df.trace_id == \'5\'].iloc[0]\n        # 1 == True, 0 == False\n        self.assertListEqual([\'5\', True, True, True, True, True, False, False, 458160.0, 1118280.0],\n                             row1.values.tolist())\n\n    def test_prefix10(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.FREQUENCY.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=10)\n        df = frequency(self.log, self.event_names, self.labelling, encoding)\n\n        self.assertEqual(df.shape, (1, 10))\n        row1 = df[df.trace_id == \'5\'].iloc[0]\n        self.assertListEqual([\'5\', 1, 3, 2, 2, 2, 0, 0, 1296240.0, 280200.0],\n                             row1.values.tolist())\n        self.assertFalse(df.isnull().values.any())\n\n    def test_prefix10_padding(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.FREQUENCY.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=10,\n            padding=True)\n        df = frequency(self.log, self.event_names, self.labelling, encoding)\n\n        self.assertEqual(df.shape, (2, 10))\n        row1 = df[df.trace_id == \'4\'].iloc[0]\n        self.assertListEqual([\'4\', True, False, True, True, False, True, True, 520920.0, 0.0], row1.values.tolist())\n        self.assertFalse(df.isnull().values.any())\n'"
src/encoding/tests/test_label_boolean.py,0,"b""from django.test import TestCase\n\nfrom src.encoding.common import encode_label_logs\nfrom src.encoding.models import ValueEncodings, TaskGenerationTypes\nfrom src.labelling.label_container import *\nfrom src.predictive_model.models import PredictiveModels\nfrom src.utils.file_service import get_log\nfrom src.utils.tests_utils import general_example_test_filepath, create_test_log, general_example_test_filename, \\\n    create_test_encoding, create_test_labelling, general_example_train_filename, general_example_train_filepath, \\\n    create_test_job, create_test_predictive_model\n\n\nclass TestLabelBoolean(TestCase):\n    def setUp(self):\n        self.train_log = get_log(create_test_log(log_name=general_example_train_filename,\n                                                 log_path=general_example_train_filepath))\n        self.test_log = get_log(create_test_log(log_name=general_example_test_filename,\n                                                log_path=general_example_test_filepath))\n        self.encoding = create_test_encoding(\n            value_encoding=ValueEncodings.BOOLEAN.value,\n            prefix_length=2,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value)\n\n    def test_no_label(self):\n        labelling = create_test_labelling(label_type=LabelTypes.NO_LABEL.value)\n\n        _, df = encode_label_logs(self.train_log, self.test_log, create_test_job(\n            encoding=self.encoding,\n            labelling=labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ))\n        self.assertEqual(df.shape, (2, 9))\n\n    def test_remaining_time(self):\n        labelling = create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value)\n\n        _, df = encode_label_logs(self.train_log, self.test_log, create_test_job(\n            encoding=self.encoding,\n            labelling=labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ))\n        self.assertEqual(df.shape, (2, 11))\n\n    def test_label_remaining_time_with_elapsed_time_custom_threshold(self):\n        labelling = create_test_labelling(\n            label_type=LabelTypes.REMAINING_TIME.value,\n            threshold_type=ThresholdTypes.THRESHOLD_CUSTOM.value,\n            threshold=40000)\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.BOOLEAN.value,\n            prefix_length=3,\n            add_elapsed_time=True,\n            add_remaining_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value)\n\n        _, df = encode_label_logs(self.test_log, self.test_log, create_test_job(\n            encoding=encoding,\n            labelling=labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ))\n        self.assertEqual(df.shape, (2, 10))\n        trace_5 = df[df.trace_id == '5'].iloc[0].values.tolist()\n        self.assertListEqual(trace_5, ['5', True, True, True, False, False, False, False, 181200.0, False])\n        trace_4 = df[df.trace_id == '4'].iloc[0].values.tolist()\n        self.assertListEqual(trace_4, ['4', True, False, True, False, False, False, True, 171660.0, False])\n\n    def test_next_activity(self):\n        labelling = create_test_labelling(label_type=LabelTypes.NEXT_ACTIVITY.value)\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.BOOLEAN.value,\n            prefix_length=3,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value)\n\n        _, df = encode_label_logs(self.test_log, self.test_log, create_test_job(\n            encoding=encoding,\n            labelling=labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ))\n        self.assertEqual(df.shape, (2, 9))\n        trace_5 = df[df.trace_id == '5'].iloc[0].values.tolist()\n        self.assertListEqual(trace_5, ['5', True, True, True, False, False, False, False, 'decide'])\n        trace_4 = df[df.trace_id == '4'].iloc[0].values.tolist()\n        self.assertListEqual(trace_4, ['4', True, False, True, False, False, False, True, 'decide'])\n\n    def test_next_activity_zero_padding_elapsed_time(self):\n        labelling = create_test_labelling(label_type=LabelTypes.NEXT_ACTIVITY.value)\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.BOOLEAN.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=3)\n\n        _, df = encode_label_logs(self.test_log, self.test_log, create_test_job(\n            encoding=encoding,\n            labelling=labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ))\n        self.assertEqual(df.shape, (2, 10))\n        self.assertTrue('elapsed_time' in df.columns.values.tolist())\n        trace_5 = df[df.trace_id == '5'].iloc[0].values.tolist()\n        self.assertListEqual(trace_5, ['5', True, True, True, False, False, False, False, 181200.0, 'decide'])\n        trace_4 = df[df.trace_id == '4'].iloc[0].values.tolist()\n        self.assertListEqual(trace_4, ['4', True, False, True, False, False, False, True, 171660.0, 'decide'])\n\n    def test_attribute_string(self):\n        labelling = create_test_labelling(label_type=LabelTypes.ATTRIBUTE_STRING.value, attribute_name='creator')\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.BOOLEAN.value,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=3)\n\n        _, df = encode_label_logs(self.test_log, self.test_log, create_test_job(\n            encoding=encoding,\n            labelling=labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ))\n        self.assertEqual(df.shape, (2, 9))\n        trace_5 = df[df.trace_id == '5'].iloc[0].values.tolist()\n        self.assertListEqual(trace_5, ['5', True, True, True, False, False, False, False, 'Fluxicon Nitro'])\n        trace_4 = df[df.trace_id == '4'].iloc[0].values.tolist()\n        self.assertListEqual(trace_4, ['4', True, False, True, False, False, False, True, 'Fluxicon Nitro'])\n\n    def test_attribute_number(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.BOOLEAN.value,\n            prefix_length=2,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value)\n        labelling = create_test_labelling(label_type=LabelTypes.ATTRIBUTE_NUMBER.value, attribute_name='AMOUNT')\n\n        _, df = encode_label_logs(self.test_log, self.test_log, create_test_job(\n            encoding=encoding,\n            labelling=labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ))\n        self.assertEqual(df.shape, (2, 9))\n        trace_5 = df[df.trace_id == '5'].iloc[0].values.tolist()\n        self.assertListEqual(trace_5, ['5', True, True, False, False, False, False, False, False])\n        trace_4 = df[df.trace_id == '4'].iloc[0].values.tolist()\n        self.assertListEqual(trace_4, ['4', True, False, True, False, False, False, False, True])\n\n    def test_add_executed_events(self):\n        labelling = create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value)\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.BOOLEAN.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=2,\n            add_executed_events=True)\n\n        _, df = encode_label_logs(self.train_log, self.test_log, create_test_job(\n            encoding=encoding,\n            labelling=labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ))\n        self.assertEqual(df.shape, (2, 12))\n        self.assertTrue('executed_events' in df.columns.values.tolist())\n        self.assertListEqual(df['executed_events'].tolist(), [2, 2])\n\n    def test_add_resources_used(self):\n        labelling = create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value)\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.BOOLEAN.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=2,\n            add_resources_used=True)\n\n        _, df = encode_label_logs(self.train_log, self.test_log, create_test_job(\n            encoding=encoding,\n            labelling=labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ))\n        self.assertEqual(df.shape, (2, 12))\n        self.assertTrue('resources_used' in df.columns.values.tolist())\n        self.assertListEqual(df['resources_used'].tolist(), [1, 1])\n\n    def test_add_new_traces(self):\n        labelling = create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value)\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.BOOLEAN.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=2,\n            add_new_traces=True)\n\n        _, df = encode_label_logs(self.train_log, self.test_log, create_test_job(\n            encoding=encoding,\n            labelling=labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ))\n        self.assertEqual(df.shape, (2, 12))\n        self.assertTrue('new_traces' in df.columns.values.tolist())\n        self.assertListEqual(df['new_traces'].tolist(), [0, 0])\n        self.assertFalse(df.isnull().values.any())\n"""
src/encoding/tests/test_label_complex.py,0,"b""from django.test import TestCase\n\nfrom src.encoding.common import encode_label_logs\nfrom src.encoding.models import ValueEncodings, TaskGenerationTypes\nfrom src.labelling.label_container import *\nfrom src.predictive_model.models import PredictiveModels\nfrom src.utils.event_attributes import get_additional_columns\nfrom src.utils.file_service import get_log\nfrom src.utils.tests_utils import general_example_test_filepath, create_test_log, general_example_test_filename, \\\n    create_test_encoding, create_test_labelling, general_example_train_filename, general_example_train_filepath, \\\n    create_test_job, create_test_predictive_model\n\n\nclass TestLabelComplex(TestCase):\n    def setUp(self):\n        self.train_log = get_log(create_test_log(log_name=general_example_train_filename,\n                                                 log_path=general_example_train_filepath))\n        self.test_log = get_log(create_test_log(log_name=general_example_test_filename,\n                                                log_path=general_example_test_filepath))\n        self.add_col = get_additional_columns(self.train_log)\n        self.encoding = create_test_encoding(\n            value_encoding=ValueEncodings.COMPLEX.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=2)\n        self.encodingPadding = create_test_encoding(\n            value_encoding=ValueEncodings.COMPLEX.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=10,\n            padding=True)\n\n    def test_no_label(self):\n        labelling = create_test_labelling(label_type=LabelTypes.NO_LABEL.value)\n\n        _, df = encode_label_logs(self.train_log, self.test_log, create_test_job(\n            encoding=self.encoding,\n            labelling=labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ),\n                                  get_additional_columns(self.train_log))\n        self.assertEqual((2, 12), df.shape)\n\n    def test_no_label_zero_padding(self):\n        # add things have no effect\n        labelling = create_test_labelling(label_type=LabelTypes.NO_LABEL.value)\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.COMPLEX.value,\n            add_elapsed_time=True,\n            add_remaining_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=10,\n            padding=True)\n\n        _, df = encode_label_logs(self.train_log, self.test_log, create_test_job(\n            encoding=encoding,\n            labelling=labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ),\n                                  get_additional_columns(self.train_log))\n        self.assertEqual(df.shape, (2, 52))\n\n    def test_remaining_time(self):\n        labelling = create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value)\n\n        _, df = encode_label_logs(self.train_log, self.test_log, create_test_job(\n            encoding=self.encoding,\n            labelling=labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ),\n                                  get_additional_columns(self.train_log))\n        self.assertEqual(df.shape, (2, 14))\n\n    def test_label_remaining_time_with_elapsed_time_custom_threshold(self):\n        labelling = create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value,\n                                          threshold_type=ThresholdTypes.THRESHOLD_CUSTOM.value,\n                                          threshold=40000)\n        encoding = create_test_encoding(value_encoding=ValueEncodings.COMPLEX.value,\n                                        add_elapsed_time=True,\n                                        add_remaining_time=True,\n                                        task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n                                        prefix_length=10,\n                                        padding=True)\n\n        _, df = encode_label_logs(self.train_log, self.test_log, create_test_job(\n            encoding=encoding,\n            labelling=labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ),\n                                  get_additional_columns(self.test_log))\n        self.assertEqual(df.shape, (2, 55))\n\n    def test_remaining_time_zero_padding(self):\n        labelling = create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value)\n\n        _, df = encode_label_logs(self.train_log, self.test_log, create_test_job(\n            encoding=self.encodingPadding,\n            labelling=labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ),\n                                  get_additional_columns(self.train_log))\n        self.assertEqual(df.shape, (2, 54))\n\n    def test_add_executed_events(self):\n        labelling = create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value)\n        encoding = create_test_encoding(value_encoding=ValueEncodings.COMPLEX.value,\n                                        prefix_length=2,\n                                        padding=True,\n                                        add_executed_events=True,\n                                        add_elapsed_time=True)\n\n        _, df = encode_label_logs(\n            self.train_log,\n            self.test_log,\n            create_test_job(\n                encoding=encoding,\n                labelling=labelling,\n                predictive_model=create_test_predictive_model(\n                    predictive_model=PredictiveModels.CLASSIFICATION.value)\n            ),\n            get_additional_columns(self.train_log)\n        )\n        self.assertEqual(df.shape, (2, 15))\n        self.assertTrue('executed_events' in df.columns.values.tolist())\n        self.assertListEqual(df['executed_events'].tolist(), [2, 2])\n\n    def test_add_resources_used(self):\n        labelling = create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value)\n        encoding = create_test_encoding(value_encoding=ValueEncodings.COMPLEX.value,\n                                        prefix_length=2,\n                                        padding=True,\n                                        add_elapsed_time=True,\n                                        add_resources_used=True)\n\n        _, df = encode_label_logs(self.train_log, self.test_log, create_test_job(\n            encoding=encoding,\n            labelling=labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ),\n                                  get_additional_columns(self.train_log))\n        self.assertEqual(df.shape, (2, 15))\n        self.assertTrue('resources_used' in df.columns.values.tolist())\n        self.assertListEqual(df['resources_used'].tolist(), [1, 1])\n\n    def test_add_new_traces(self):\n        labelling = create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value)\n        encoding = create_test_encoding(value_encoding=ValueEncodings.COMPLEX.value,\n                                        prefix_length=2,\n                                        add_new_traces=True,\n                                        add_elapsed_time=True)\n\n        _, df = encode_label_logs(self.train_log, self.test_log, create_test_job(\n            encoding=encoding,\n            labelling=labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ),\n                                  get_additional_columns(self.train_log))\n        self.assertEqual(df.shape, (2, 15))\n        self.assertTrue('new_traces' in df.columns.values.tolist())\n        self.assertListEqual(df['new_traces'].tolist(), [0, 0])\n\n    def test_next_activity(self):\n        labelling = create_test_labelling(label_type=LabelTypes.NEXT_ACTIVITY.value)\n\n        _, df = encode_label_logs(self.train_log, self.test_log, create_test_job(\n            encoding=self.encoding,\n            labelling=labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ),\n                                  get_additional_columns(self.train_log))\n        self.assertEqual(df.shape, (2, 14))\n\n    def test_next_activity_zero_padding_elapsed_time(self):\n        labelling = create_test_labelling(label_type=LabelTypes.NEXT_ACTIVITY.value)\n        encoding = create_test_encoding(value_encoding=ValueEncodings.COMPLEX.value,\n                                        add_elapsed_time=True,\n                                        add_remaining_time=True,\n                                        task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n                                        prefix_length=10,\n                                        padding=True)\n\n        _, df = encode_label_logs(self.train_log, self.test_log, create_test_job(\n            encoding=encoding,\n            labelling=labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ),\n                                  get_additional_columns(self.train_log))\n        self.assertEqual(df.shape, (2, 55))\n        self.assertTrue('elapsed_time' in df.columns.values.tolist())\n\n    def test_attribute_string(self):\n        labelling = create_test_labelling(label_type=LabelTypes.ATTRIBUTE_STRING.value, attribute_name='creator')\n\n        _, df = encode_label_logs(self.train_log, self.test_log, create_test_job(\n            encoding=self.encoding,\n            labelling=labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ),\n                                  get_additional_columns(self.train_log))\n        self.assertEqual(df.shape, (2, 14))\n\n    def test_attribute_number(self):\n        labelling = create_test_labelling(label_type=LabelTypes.ATTRIBUTE_NUMBER.value, attribute_name='AMOUNT')\n\n        _, df = encode_label_logs(self.test_log, self.test_log, create_test_job(\n            encoding=self.encoding,\n            labelling=labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ),\n                                  get_additional_columns(self.test_log))\n        self.assertEqual(df.shape, (2, 15))\n"""
src/encoding/tests/test_label_simple_index.py,0,"b""from django.test import TestCase\n\nfrom src.encoding.common import encode_label_logs\nfrom src.encoding.models import ValueEncodings, TaskGenerationTypes\nfrom src.labelling.label_container import *\nfrom src.predictive_model.models import PredictiveModels\nfrom src.utils.file_service import get_log\nfrom src.utils.tests_utils import general_example_test_filepath, create_test_log, general_example_test_filename, \\\n    create_test_encoding, create_test_labelling, general_example_train_filename, general_example_train_filepath, \\\n    create_test_job, create_test_predictive_model\n\n\nclass TestLabelSimpleIndex(TestCase):\n    def setUp(self):\n        self.train_log = get_log(create_test_log(log_name=general_example_train_filename,\n                                                 log_path=general_example_train_filepath))\n        self.test_log = get_log(create_test_log(log_name=general_example_test_filename,\n                                                log_path=general_example_test_filepath))\n        self.encoding = create_test_encoding(\n            value_encoding=ValueEncodings.SIMPLE_INDEX.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=1)\n\n    def test_no_label(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.SIMPLE_INDEX.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=2)\n        labelling = create_test_labelling(label_type=LabelTypes.NO_LABEL.value)\n\n        df, _ = encode_label_logs(\n            self.test_log,\n            self.test_log,\n            create_test_job(\n                encoding=encoding,\n                labelling=labelling,\n                predictive_model=create_test_predictive_model(\n                    predictive_model=PredictiveModels.CLASSIFICATION.value)\n            ))\n        self.assertEqual(df.shape, (2, 3))\n        trace_5 = df[df.trace_id == '5'].iloc[0].values.tolist()\n        self.assertListEqual(trace_5, ['5', 1, 2])\n        trace_4 = df[df.trace_id == '4'].iloc[0].values.tolist()\n        self.assertListEqual(trace_4, ['4', 1, 1])\n\n    def test_no_label_zero_padding(self):\n        labelling = create_test_labelling(label_type=LabelTypes.NO_LABEL.value)\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.SIMPLE_INDEX.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=10,\n            padding=True,\n            add_remaining_time=True)\n\n        df, _ = encode_label_logs(self.test_log,\n                                  self.test_log,\n                                  create_test_job(\n                                      encoding=encoding,\n                                      labelling=labelling,\n                                      predictive_model=create_test_predictive_model(\n                                          predictive_model=PredictiveModels.CLASSIFICATION.value)\n                                  ))\n        self.assertEqual(df.shape, (2, 11))\n        trace_5 = df[df.trace_id == '5'].iloc[0].values.tolist()\n        self.assertListEqual(trace_5, ['5', 1, 2, 1, 1, 1, 1, 1, 1, 1, 1])\n        trace_4 = df[df.trace_id == '4'].iloc[0].values.tolist()\n        self.assertListEqual(trace_4, ['4', 1, 1, 2, 1, 2, 0, 0, 0, 0, 0])\n\n    def test_remaining_time(self):\n        labelling = create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value)\n\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.SIMPLE_INDEX.value,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=2)\n\n        df, _ = encode_label_logs(self.test_log, self.test_log,\n                                  create_test_job(\n                                      encoding=encoding,\n                                      labelling=labelling,\n                                      predictive_model=create_test_predictive_model(\n                                          predictive_model=PredictiveModels.CLASSIFICATION.value)\n                                  ))\n        self.assertEqual(df.shape, (2, 4))\n        self.assertListEqual(df.columns.values.tolist(), ['trace_id', 'prefix_1', 'prefix_2', 'label'])\n        trace_5 = df[df.trace_id == '5'].iloc[0].values.tolist()\n        self.assertListEqual(trace_5, ['5', 1, 2, 1])\n        trace_4 = df[df.trace_id == '4'].iloc[0].values.tolist()\n        self.assertListEqual(trace_4, ['4', 1, 1, 2])\n\n    def test_label_remaining_time_with_elapsed_time_custom_threshold(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.SIMPLE_INDEX.value,\n            add_elapsed_time=True,\n            add_remaining_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=2)\n        labelling = create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value,\n                                          threshold_type=ThresholdTypes.THRESHOLD_CUSTOM.value,\n                                          threshold=40000)\n\n        df, _ = encode_label_logs(self.test_log, self.test_log,\n                                  create_test_job(\n                                      encoding=encoding,\n                                      labelling=labelling,\n                                      predictive_model=create_test_predictive_model(\n                                          predictive_model=PredictiveModels.CLASSIFICATION.value)\n                                  ))\n        self.assertEqual(df.shape, (2, 5))\n        self.assertListEqual(df.columns.values.tolist(), ['trace_id', 'prefix_1', 'prefix_2', 'elapsed_time', 'label'])\n        trace_5 = df[df.trace_id == '5'].iloc[0].values.tolist()\n        self.assertListEqual(trace_5, ['5', 1, 2, 2, 1])\n        trace_4 = df[df.trace_id == '4'].iloc[0].values.tolist()\n        self.assertListEqual(trace_4, ['4', 1, 1, 1, 1])\n\n    def test_remaining_time_zero_padding(self):\n        labelling = create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value)\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.SIMPLE_INDEX.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=10,\n            padding=True)\n\n        df, _ = encode_label_logs(self.test_log, self.test_log, create_test_job(\n            encoding=encoding,\n            labelling=labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ))\n        self.assertEqual(df.shape, (2, 13))\n        trace_5 = df[df.trace_id == '5'].iloc[0].values.tolist()\n        self.assertListEqual(trace_5,\n                             ['5', 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n        trace_4 = df[df.trace_id == '4'].iloc[0].values.tolist()\n        self.assertListEqual(trace_4,\n                             ['4', 1, 1, 2, 1, 2, 0, 0, 0, 0, 0, 2, 2])\n\n    def test_next_activity(self):\n        labelling = create_test_labelling(label_type=LabelTypes.NEXT_ACTIVITY.value)\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.SIMPLE_INDEX.value,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=2)\n\n        df, _ = encode_label_logs(self.test_log, self.test_log, create_test_job(\n            encoding=encoding,\n            labelling=labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ))\n        self.assertEqual(df.shape, (2, 4))\n        self.assertListEqual(df.columns.values.tolist(), ['trace_id', 'prefix_1', 'prefix_2', 'label'])\n        trace_5 = df[df.trace_id == '5'].iloc[0].values.tolist()\n        self.assertListEqual(trace_5, ['5', 1, 2, 1])\n        trace_4 = df[df.trace_id == '4'].iloc[0].values.tolist()\n        self.assertListEqual(trace_4, ['4', 1, 1, 2])\n\n    def test_next_activity_zero_padding_elapsed_time(self):\n        labelling = create_test_labelling(label_type=LabelTypes.NEXT_ACTIVITY.value)\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.SIMPLE_INDEX.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=10,\n            padding=True)\n\n        df, _ = encode_label_logs(self.test_log, self.test_log,\n                                  create_test_job(\n                                      encoding=encoding,\n                                      labelling=labelling,\n                                      predictive_model=create_test_predictive_model(\n                                          predictive_model=PredictiveModels.CLASSIFICATION.value)\n                                  ))\n        self.assertEqual(df.shape, (2, 13))\n        self.assertTrue('elapsed_time' in df.columns.values.tolist())\n        trace_5 = df[df.trace_id == '5'].iloc[0].values.tolist()\n        self.assertListEqual(trace_5,\n                             ['5', 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n        trace_4 = df[df.trace_id == '4'].iloc[0].values.tolist()\n        self.assertListEqual(trace_4,\n                             ['4', 1, 1, 2, 1, 2, 0, 0, 0, 0, 0, 2, 0])\n\n    def test_attribute_string(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.SIMPLE_INDEX.value,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=2)\n        labelling = create_test_labelling(label_type=LabelTypes.ATTRIBUTE_STRING.value, attribute_name='creator')\n\n        df, _ = encode_label_logs(self.test_log, self.test_log, create_test_job(\n            encoding=encoding,\n            labelling=labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ))\n        self.assertEqual(df.shape, (2, 4))\n        self.assertListEqual(df.columns.values.tolist(), ['trace_id', 'prefix_1', 'prefix_2', 'label'])\n        trace_5 = df[df.trace_id == '5'].iloc[0].values.tolist()\n        self.assertListEqual(trace_5, ['5', 1, 2, 1])\n        trace_4 = df[df.trace_id == '4'].iloc[0].values.tolist()\n        self.assertListEqual(trace_4, ['4', 1, 1, 1])\n\n    def test_attribute_number(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.SIMPLE_INDEX.value,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=2)\n        labelling = create_test_labelling(label_type=LabelTypes.ATTRIBUTE_NUMBER.value, attribute_name='AMOUNT')\n\n        df, _ = encode_label_logs(self.test_log, self.test_log, create_test_job(\n            encoding=encoding,\n            labelling=labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ))\n        self.assertEqual(df.shape, (2, 4))\n        self.assertListEqual(df.columns.values.tolist(), ['trace_id', 'prefix_1', 'prefix_2', 'label'])\n        trace_5 = df[df.trace_id == '5'].iloc[0].values.tolist()\n        self.assertListEqual(trace_5, ['5', 1, 2, 1])\n        trace_4 = df[df.trace_id == '4'].iloc[0].values.tolist()\n        self.assertListEqual(trace_4, ['4', 1, 1, 2])\n\n    def test_duration(self):\n        labelling = create_test_labelling(label_type=LabelTypes.DURATION.value)\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.SIMPLE_INDEX.value,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=2)\n\n        df, _ = encode_label_logs(self.test_log, self.test_log, create_test_job(\n            encoding=encoding,\n            labelling=labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ))\n        self.assertEqual(df.shape, (2, 4))\n        self.assertListEqual(df.columns.values.tolist(), ['trace_id', 'prefix_1', 'prefix_2', 'label'])\n        trace_5 = df[df.trace_id == '5'].iloc[0].values.tolist()\n        self.assertListEqual(trace_5, ['5', 1, 2, 1])\n        trace_4 = df[df.trace_id == '4'].iloc[0].values.tolist()\n        self.assertListEqual(trace_4, ['4', 1, 1, 2])\n\n    def test_add_executed_events(self):\n        labelling = create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value)\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.SIMPLE_INDEX.value,\n            add_elapsed_time=True,\n            add_executed_events=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=1)\n\n        df, _ = encode_label_logs(self.test_log, self.test_log, create_test_job(\n            encoding=encoding,\n            labelling=labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ))\n        self.assertEqual(df.shape, (2, 5))\n        self.assertTrue('executed_events' in df.columns.values.tolist())\n        self.assertListEqual(df['executed_events'].tolist(), [2, 2])\n\n    def test_add_resources_used(self):\n        labelling = create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value)\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.SIMPLE_INDEX.value,\n            add_elapsed_time=True,\n            add_resources_used=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=1)\n\n        df, _ = encode_label_logs(self.test_log, self.test_log, create_test_job(\n            encoding=encoding,\n            labelling=labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ))\n        self.assertEqual(df.shape, (2, 5))\n        self.assertTrue('resources_used' in df.columns.values.tolist())\n        self.assertListEqual(df['resources_used'].tolist(), [2, 2])\n\n    def test_add_new_traces(self):\n        labelling = create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value)\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.SIMPLE_INDEX.value,\n            add_elapsed_time=True,\n            add_new_traces=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=1)\n\n        df, _ = encode_label_logs(self.test_log, self.test_log, create_test_job(\n            encoding=encoding,\n            labelling=labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ))\n        self.assertEqual(df.shape, (2, 5))\n        self.assertTrue('new_traces' in df.columns.values.tolist())\n        self.assertListEqual(df['new_traces'].tolist(), [2, 2])\n"""
src/encoding/tests/test_last_payload.py,0,"b'from django.test import TestCase\n\nfrom src.encoding.complex_last_payload import last_payload\nfrom src.encoding.models import ValueEncodings, TaskGenerationTypes\nfrom src.labelling.models import LabelTypes\nfrom src.utils.event_attributes import unique_events, get_additional_columns\nfrom src.utils.file_service import get_log\nfrom src.utils.tests_utils import general_example_test_filepath, general_example_test_filename, create_test_log, \\\n    create_test_encoding, create_test_labelling\n\n\nclass LastPayload(TestCase):\n    def setUp(self):\n        self.log = get_log(create_test_log(log_name=general_example_test_filename,\n                                           log_path=general_example_test_filepath))\n        self.event_names = unique_events(self.log)\n        self.labelling = create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value)\n        self.add_col = get_additional_columns(self.log)\n        self.encoding = create_test_encoding(\n            value_encoding=ValueEncodings.LAST_PAYLOAD.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=1)\n\n    def test_shape(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.LAST_PAYLOAD.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=2)\n        df = last_payload(self.log, self.labelling, encoding, self.add_col)\n\n        self.assertEqual((2, 9), df.shape)\n        headers = [\'trace_id\', \'prefix_1\', \'prefix_2\', \'Activity_2\', \'Costs_2\',\n                   \'Resource_2\', \'org:resource_2\', \'elapsed_time\', \'label\']\n        self.assertListEqual(headers, df.columns.values.tolist())\n\n    def test_prefix1(self):\n        df = last_payload(self.log, self.labelling, self.encoding, self.add_col)\n\n        row1 = df[(df.trace_id == \'5\')].iloc[0].tolist()\n        self.assertListEqual(row1,\n                             [""5"", \'register request\', ""register request"", ""50"", \'Ellen\', ""Ellen"", 0.0, 1576440.0])\n        row2 = df[(df.trace_id == \'4\')].iloc[0].tolist()\n        self.assertListEqual(row2,\n                             [""4"", \'register request\', ""register request"", ""50"", \'Pete\', ""Pete"", 0.0, 520920.0])\n\n    def test_prefix1_no_label(self):\n        df = last_payload(self.log, create_test_labelling(label_type=LabelTypes.NO_LABEL.value), self.encoding,\n                          self.add_col)\n\n        row1 = df[(df.trace_id == \'5\')].iloc[0].tolist()\n        self.assertListEqual(row1,\n                             [""5"", \'register request\', ""register request"", ""50"", \'Ellen\', ""Ellen""])\n        row2 = df[(df.trace_id == \'4\')].iloc[0].tolist()\n        self.assertListEqual(row2,\n                             [""4"", \'register request\', ""register request"", ""50"", \'Pete\', ""Pete""])\n\n    def test_prefix1_no_elapsed_time(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.LAST_PAYLOAD.value,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=1)\n        df = last_payload(self.log, create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value), encoding,\n                          self.add_col)\n\n        row1 = df[(df.trace_id == \'5\')].iloc[0].tolist()\n        self.assertListEqual(row1,\n                             [""5"", \'register request\', ""register request"", ""50"", \'Ellen\', ""Ellen"", 1576440.0])\n        row2 = df[(df.trace_id == \'4\')].iloc[0].tolist()\n        self.assertListEqual(row2,\n                             [""4"", \'register request\', ""register request"", ""50"", \'Pete\', ""Pete"", 520920.0])\n\n    def test_prefix2(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.LAST_PAYLOAD.value,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            add_elapsed_time=True,\n            prefix_length=2)\n        df = last_payload(self.log, self.labelling, encoding, self.add_col)\n\n        row1 = df[(df.trace_id == \'5\')].iloc[0].tolist()\n        self.assertListEqual(row1,\n                             [""5"", \'register request\', \'examine casually\', ""examine casually"", ""400"", ""Mike"", ""Mike"",\n                              90840.0, 1485600.0])\n        row2 = df[(df.trace_id == \'4\')].iloc[0].tolist()\n        self.assertListEqual(row2,\n                             [""4"", \'register request\', ""check ticket"", ""check ticket"", ""100"", ""Mike"", ""Mike"", 75840.0,\n                              445080.0])\n\n    def test_prefix5(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.LAST_PAYLOAD.value,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            add_elapsed_time=True,\n            prefix_length=5)\n        df = last_payload(self.log, self.labelling, encoding, self.add_col)\n\n        self.assertEqual(df.shape, (2, 12))\n        self.assertFalse(df.isnull().values.any())\n\n    def test_prefix10(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.LAST_PAYLOAD.value,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            add_elapsed_time=True,\n            prefix_length=10)\n        df = last_payload(self.log, self.labelling, encoding, self.add_col)\n\n        self.assertEqual(df.shape, (1, 17))\n        self.assertFalse(df.isnull().values.any())\n\n    def test_prefix10_zero_padding(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.LAST_PAYLOAD.value,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            add_elapsed_time=True,\n            prefix_length=10,\n            padding=True)\n        df = last_payload(self.log, self.labelling, encoding, self.add_col)\n\n        self.assertEqual(df.shape, (2, 17))\n        self.assertFalse(df.isnull().values.any())\n\n    def test_prefix10_all_in_one(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.LAST_PAYLOAD.value,\n            task_generation_type=TaskGenerationTypes.ALL_IN_ONE.value,\n            add_elapsed_time=True,\n            prefix_length=10)\n        df = last_payload(self.log, self.labelling, encoding, self.add_col)\n\n        self.assertEqual(df.shape, (10, 17))\n        self.assertFalse(df.isnull().values.any())\n\n    def test_prefix10_zero_padding_all_in_one(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.LAST_PAYLOAD.value,\n            task_generation_type=TaskGenerationTypes.ALL_IN_ONE.value,\n            add_elapsed_time=True,\n            prefix_length=10, padding=True)\n        df = last_payload(self.log, self.labelling, encoding, self.add_col)\n\n        self.assertEqual(df.shape, (15, 17))\n        self.assertFalse(df.isnull().values.any())\n'"
src/encoding/tests/test_performance.py,0,"b'import time\nimport unittest\n\nfrom django.test import TestCase\n\n#from src.encoding.common import encode_label_log\nfrom src.encoding.encoding_container import EncodingContainer, ZERO_PADDING, ALL_IN_ONE\nfrom src.encoding.models import ValueEncodings\nfrom src.labelling.label_container import *\nfrom src.predictive_model.models import PredictiveModels\nfrom src.utils.event_attributes import unique_events, get_additional_columns\nfrom src.utils.file_service import get_log\n\n\n@unittest.skip(""Tests need refactoring"")\nclass TestEncoding(TestCase):\n    def setUp(self):\n        self.log = get_log(""cache/log_cache/repairExample.xes"")\n        # self.log = get_logs(""log_cache/BPI Challenge 2017.xes.gz"")[0]\n        self.label = LabelContainer(LabelTypes.NO_LABEL.value)\n        self.add_col = get_additional_columns(self.log)\n\n    def method_self(self, encoding):\n        start_time = time.time()\n        # log = get_logs(""log_cache/repairExample.xes"")[0]\n        event_names = unique_events(self.log)\n        encode_label_log(self.log, encoding, PredictiveModels.REGRESSION.value, self.label, event_names=event_names,\n                         additional_columns=self.add_col)\n        print(""Total for %s %s seconds"" % (encoding, time.time() - start_time))\n\n    # This is test\n    def performance(self):\n        encodings = [ValueEncodings.SIMPLE_INDEX.value, ValueEncodings.BOOLEAN.value, ValueEncodings.FREQUENCY.value,\n                     ValueEncodings.COMPLEX.value, ValueEncodings.LAST_PAYLOAD.value]\n\n        # self.method_self(COMPLEX)\n        for encoding in encodings:\n            self.method_self(encoding)\n\n\n@unittest.skip(""performance test not needed normally"")\nclass TestAgainstNirdizatiTraining(TestCase):\n    @staticmethod\n    def do_test(encoding):\n        start_time = time.time()\n        # log = get_logs(""log_cache/general_example.xes"")[0]\n        log = get_log(""cache/log_cache/Sepsis Cases - Event Log.xes"")\n        label = LabelContainer(LabelTypes.REMAINING_TIME.value, add_elapsed_time=True)\n        encoding = EncodingContainer(encoding, prefix_length=185, generation_type=ALL_IN_ONE,\n                                     padding=ZERO_PADDING)\n        event_names = unique_events(log)\n        log = encode_label_log(log, encoding, PredictiveModels.REGRESSION.value, label, event_names=event_names)\n        print(log.shape)\n        print(""Total for %s %s seconds"" % (encoding, time.time() - start_time))\n\n    def test_performance(self):\n        encodings = [ValueEncodings.SIMPLE_INDEX.value, ValueEncodings.BOOLEAN.value, ValueEncodings.FREQUENCY.value]\n\n        # self.method_self(COMPLEX)\n        for e in encodings:\n            self.do_test(e)\n\n\n@unittest.skip(""performance test not needed normally"")\nclass TestTraceLengthTime(TestCase):\n    def setUp(self):\n        self.label = LabelContainer(LabelTypes.NO_LABEL.value)\n        start_time = time.time()\n        self.log1 = get_log(""cache/log_cache/Sepsis Cases - Event Log.xes.gz"")\n        print(""Total for %s %s seconds"" % (""sepsis"", time.time() - start_time))\n        start_time = time.time()\n        self.log2 = get_log(""cache/log_cache/financial_log.xes.gz"")\n        print(""Total for %s %s seconds"" % (""financial"", time.time() - start_time))\n        start_time = time.time()\n        self.log3 = get_log(""cache/log_cache/BPI Challenge 2017.xes.gz"")\n        print(""Total for %s %s seconds"" % (""2017"", time.time() - start_time))\n\n    def do_test(self, encoding, log):\n        start_time = time.time()\n        # log = get_logs(log_path)[0]\n        add_col = get_additional_columns(log)\n        event_names = unique_events(log)\n        encoding = EncodingContainer(encoding, prefix_length=20, padding=ZERO_PADDING)\n        log = encode_label_log(log, encoding, PredictiveModels.REGRESSION.value, self.label,\n                               event_names=event_names,\n                               additional_columns=add_col)\n        print(log.shape)\n        print(""Total for %s %s seconds"" % (encoding.method, time.time() - start_time))\n\n    def test_performance(self):\n        encodings = [ValueEncodings.SIMPLE_INDEX.value, ValueEncodings.BOOLEAN.value, ValueEncodings.FREQUENCY.value,\n                     ValueEncodings.COMPLEX.value, ValueEncodings.LAST_PAYLOAD.value]\n        logs = [self.log3]\n        for l in logs:\n            for encoding in encodings:\n                self.do_test(encoding, l)\n'"
src/encoding/tests/test_simple_index.py,0,"b'from django.test import TestCase\n\nfrom src.encoding.common import encode_label_logs, LabelTypes\nfrom src.encoding.models import TaskGenerationTypes, ValueEncodings\nfrom src.encoding.simple_index import simple_index\nfrom src.predictive_model.models import PredictiveModels\nfrom src.utils.file_service import get_log\nfrom src.utils.tests_utils import general_example_filepath, general_example_train_filepath, \\\n    general_example_test_filepath, general_example_test_filename, create_test_log, general_example_train_filename, \\\n    create_test_predictive_model, create_test_job, create_test_encoding, create_test_labelling, general_example_filename\nfrom django.test import TestCase\n\nfrom src.encoding.common import encode_label_logs, LabelTypes\nfrom src.encoding.models import TaskGenerationTypes, ValueEncodings\nfrom src.encoding.simple_index import simple_index\nfrom src.predictive_model.models import PredictiveModels\nfrom src.utils.file_service import get_log\nfrom src.utils.tests_utils import general_example_filepath, general_example_train_filepath, \\\n    general_example_test_filepath, general_example_test_filename, create_test_log, general_example_train_filename, \\\n    create_test_predictive_model, create_test_job, create_test_encoding, create_test_labelling, general_example_filename\n\n\nclass TestSplitLogExample(TestCase):\n    def setUp(self):\n        self.test_log = get_log(create_test_log(log_name=general_example_test_filename,\n                                                log_path=general_example_test_filepath))\n        self.training_log = get_log(create_test_log(log_name=general_example_train_filename,\n                                                    log_path=general_example_train_filepath))\n        self.labelling = create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value)\n        self.encoding = create_test_encoding(\n            value_encoding=ValueEncodings.SIMPLE_INDEX.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=1)\n\n    def test_shape_training(self):\n        training_df, test_df = encode_label_logs(self.training_log, self.test_log, create_test_job(\n            encoding=self.encoding,\n            labelling=self.labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ))\n        self.assert_shape(training_df, (4, 4))\n        self.assert_shape(test_df, (2, 4))\n\n    def assert_shape(self, dataframe, shape):\n        self.assertIn(""trace_id"", dataframe.columns.values)\n        self.assertIn(""label"", dataframe.columns.values)\n        self.assertIn(""elapsed_time"", dataframe.columns.values)\n        self.assertIn(""prefix_1"", dataframe.columns.values)\n        self.assertEqual(shape, dataframe.shape)\n\n    def test_prefix_length_training(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.SIMPLE_INDEX.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=3)\n        training_df, test_df = encode_label_logs(self.training_log, self.test_log, create_test_job(\n            encoding=encoding,\n            labelling=self.labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ))\n        self.assertIn(""prefix_1"", training_df.columns.values)\n        self.assertIn(""prefix_2"", training_df.columns.values)\n        self.assertIn(""prefix_3"", training_df.columns.values)\n        self.assertEqual((4, 6), training_df.shape)\n        self.assertEqual((2, 6), test_df.shape)\n\n        row = training_df[(training_df.trace_id == \'3\')].iloc[0]\n        self.assertEqual(1, row.prefix_1)\n        self.assertEqual(2, row.prefix_2)\n        self.assertEqual(1, row.prefix_3)\n        self.assertEqual(1, row.label)\n        self.assertEqual(2, row.elapsed_time)\n\n    def test_row_test(self):\n        training_df, test_df = encode_label_logs(self.training_log, self.test_log, create_test_job(\n            encoding=self.encoding,\n            labelling=self.labelling,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value)\n        ))\n        row = test_df[(test_df.trace_id == \'4\')].iloc[0]\n\n        self.assertEqual(1, row.prefix_1)\n        self.assertEqual(1, row.elapsed_time)\n        self.assertEqual(2, row.label)\n\n    def test_prefix0(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.FREQUENCY.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=0)\n        self.assertRaises(ValueError,\n                          encode_label_logs, self.training_log, self.test_log, create_test_job(\n                encoding=encoding,\n                labelling=self.labelling,\n                predictive_model=create_test_predictive_model(\n                    predictive_model=PredictiveModels.CLASSIFICATION.value)\n            ))\n\n\nclass TestGeneralTest(TestCase):\n    """"""Making sure it actually works""""""\n\n    def setUp(self):\n        self.log = get_log(create_test_log(log_name=general_example_test_filename,\n                                           log_path=general_example_test_filepath))\n        self.labelling = create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value)\n        self.encoding = create_test_encoding(\n            value_encoding=ValueEncodings.SIMPLE_INDEX.value,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            add_elapsed_time=True,\n            prefix_length=1)\n\n    def test_header(self):\n        df = simple_index(self.log, self.labelling, self.encoding)\n\n        self.assertIn(""trace_id"", df.columns.values)\n        self.assertIn(""label"", df.columns.values)\n        self.assertIn(""elapsed_time"", df.columns.values)\n        self.assertIn(""prefix_1"", df.columns.values)\n\n    def test_prefix1(self):\n        df = simple_index(self.log, self.labelling, self.encoding)\n\n        self.assertEqual(df.shape, (2, 4))\n        row1 = df[df.trace_id == \'5\'].iloc[0]\n        self.assertListEqual([\'5\', \'register request\', 0.0, 1576440.0], row1.values.tolist())\n        row2 = df[df.trace_id == \'4\'].iloc[0]\n        self.assertListEqual([\'4\', \'register request\', 0.0, 520920.0], row2.values.tolist())\n\n    def test_prefix1_no_label(self):\n        df = simple_index(self.log, create_test_labelling(label_type=LabelTypes.NO_LABEL.value), self.encoding)\n\n        self.assertEqual(df.shape, (2, 2))\n        row1 = df[df.trace_id == \'5\'].iloc[0]\n        self.assertListEqual([\'5\', \'register request\'], row1.values.tolist())\n        row2 = df[df.trace_id == \'4\'].iloc[0]\n        self.assertListEqual([\'4\', \'register request\'], row2.values.tolist())\n\n    def test_prefix1_no_elapsed_time(self):\n        label = create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value)\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.FREQUENCY.value,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=1)\n        df = simple_index(self.log, label, encoding)\n\n        self.assertEqual(df.shape, (2, 3))\n        row1 = df[df.trace_id == \'5\'].iloc[0]\n        self.assertListEqual([\'5\', \'register request\', 1576440.0], row1.values.tolist())\n        row2 = df[df.trace_id == \'4\'].iloc[0]\n        self.assertListEqual([\'4\', \'register request\', 520920.0], row2.values.tolist())\n\n    def test_prefix2(self):\n        df = simple_index(self.log, self.labelling, create_test_encoding(\n            value_encoding=ValueEncodings.FREQUENCY.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=2))\n\n        self.assertEqual(df.shape, (2, 5))\n        row1 = df[df.trace_id == \'5\'].iloc[0]\n        self.assertListEqual([\'5\', \'register request\', \'examine casually\', 90840.0, 1485600.0], row1.values.tolist())\n        row2 = df[df.trace_id == \'4\'].iloc[0]\n        self.assertListEqual([\'4\', \'register request\', \'check ticket\', 75840.0, 445080.0], row2.values.tolist())\n\n    def test_prefix5(self):\n        df = simple_index(self.log, self.labelling, create_test_encoding(\n            value_encoding=ValueEncodings.FREQUENCY.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=5))\n\n        self.assertEqual(df.shape, (2, 8))\n        row1 = df[df.trace_id == \'5\'].iloc[0]\n        self.assertListEqual(\n            [\'5\', \'register request\', \'examine casually\', \'check ticket\', \'decide\', \'reinitiate request\', 458160.0,\n             1118280.0], row1.values.tolist())\n        self.assertFalse(df.isnull().values.any())\n\n    def test_prefix10(self):\n        df = simple_index(self.log, self.labelling, create_test_encoding(\n            value_encoding=ValueEncodings.FREQUENCY.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=10))\n\n        self.assertEqual(df.shape, (1, 13))\n        row1 = df[df.trace_id == \'5\'].iloc[0]\n        self.assertListEqual(\n            [\'5\', \'register request\', \'examine casually\', \'check ticket\', \'decide\', \'reinitiate request\',\n             \'check ticket\', \'examine casually\', \'decide\', \'reinitiate request\', \'examine casually\', 1296240.0,\n             280200.0], row1.values.tolist())\n\n    def test_prefix10_padding(self):\n        df = simple_index(self.log, self.labelling, create_test_encoding(\n            value_encoding=ValueEncodings.FREQUENCY.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ONLY_THIS.value,\n            prefix_length=10, padding=True))\n\n        self.assertEqual(df.shape, (2, 13))\n        row1 = df[df.trace_id == \'4\'].iloc[0]\n        self.assertListEqual(\n            [\'4\', \'register request\', \'check ticket\', \'examine thoroughly\', \'decide\', \'reject request\', 0, 0, 0,\n             0, 0, 520920.0, 0.0], row1.values.tolist())\n        self.assertFalse(df.isnull().values.any())\n\n    def test_prefix10_all_in_one(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.FREQUENCY.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ALL_IN_ONE.value,\n            prefix_length=10)\n        df = simple_index(self.log, self.labelling, encoding)\n\n        self.assertEqual(df.shape, (10, 13))\n        row1 = df[df.trace_id == \'5\'].iloc[9]\n        self.assertListEqual(\n            [\'5\', \'register request\', \'examine casually\', \'check ticket\', \'decide\', \'reinitiate request\',\n             \'check ticket\', \'examine casually\', \'decide\', \'reinitiate request\', \'examine casually\', 1296240.0,\n             280200.0], row1.values.tolist())\n        self.assertFalse(df.isnull().values.any())\n\n    def test_prefix10_padding_all_in_one(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.FREQUENCY.value,\n            add_elapsed_time=True,\n            task_generation_type=TaskGenerationTypes.ALL_IN_ONE.value,\n            prefix_length=10,\n            padding=True)\n        df = simple_index(self.log, self.labelling, encoding)\n\n        self.assertEqual(df.shape, (15, 13))\n        row1 = df[df.trace_id == \'4\'].iloc[4]\n        self.assertListEqual(\n            [\'4\', \'register request\', \'check ticket\', \'examine thoroughly\', \'decide\', \'reject request\', 0, 0, 0,\n             0, 0, 520920.0, 0.0], row1.values.tolist())\n        self.assertFalse(df.isnull().values.any())\n\n    def test_eval(self):\n        encoding = create_test_encoding(\n            value_encoding=ValueEncodings.FREQUENCY.value,\n            task_generation_type=TaskGenerationTypes.ALL_IN_ONE.value,\n            add_elapsed_time=True,\n            prefix_length=12,\n            padding=True)\n        df = simple_index(\n            get_log(create_test_log(log_path=general_example_filepath, log_name=general_example_filename)),\n            create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value), encoding)\n\n        self.assertEqual(df.shape, (41, 15))\n        row1 = df[df.trace_id == \'4\'].iloc[4]\n        self.assertListEqual(\n            [\'4\', \'register request\', \'check ticket\', \'examine thoroughly\', \'decide\', \'reject request\', 0, 0, 0,\n             0, 0, 0, 0, 520920.0, 0.0], row1.values.tolist())\n        self.assertFalse(df.isnull().values.any())\n'"
src/evaluation/migrations/__init__.py,0,b''
src/explanation/migrations/__init__.py,0,b''
src/explanation/tests/__init__.py,0,b''
src/explanation/tests/test_cm_feedback_wrapper.py,0,"b'\nfrom django.test import TestCase\n\nfrom src.core.core import get_encoded_logs\nfrom src.encoding.models import ValueEncodings\nfrom src.explanation.cm_feedback_wrapper import explain, compute_confusion_matrix, retrieve_temporal_stability, \\\n    retrieve_lime_ts, process_lime_features, filter_lime_features, compute_data, mine_patterns, tassellate_numbers\nfrom src.explanation.models import Explanation, ExplanationTypes\nfrom src.jobs.models import JobTypes\nfrom src.jobs.tasks import prediction_task\nfrom src.labelling.models import LabelTypes\nfrom src.predictive_model.classification.models import ClassificationMethods\nfrom src.predictive_model.models import PredictiveModels\nfrom src.split.models import SplitTypes, SplitOrderingMethods\nfrom src.utils.tests_utils import create_test_split, create_test_log, create_test_predictive_model, create_test_job, \\\n    create_test_encoding, create_test_labelling\n\nfrom pandas import DataFrame\n\n\nclass TestCmFeedbackWrapper(TestCase):\n    """"""Proof of concept tests""""""\n\n    def setUp(self) -> None:\n\n        split = create_test_split(\n            split_type=SplitTypes.SPLIT_DOUBLE.value,\n            split_ordering_method=SplitOrderingMethods.SPLIT_SEQUENTIAL.value,\n            test_size=0.2,\n            original_log=None,\n            train_log=create_test_log(\n                log_name=\'train_explainability.xes\',\n                log_path=\'cache/log_cache/test_logs/train_explainability.xes\'\n            ),\n            test_log=create_test_log(\n                log_name=\'test_explainability.xes\',\n                log_path=\'cache/log_cache/test_logs/test_explainability.xes\'\n            )\n        )\n\n        predictive_model = create_test_predictive_model(\n            predictive_model=PredictiveModels.CLASSIFICATION.value,\n            prediction_method=ClassificationMethods.DECISION_TREE.value\n        )\n\n        self.job = create_test_job(\n            split=split,\n            encoding=create_test_encoding(\n                prefix_length=4,\n                padding=True,\n                value_encoding=ValueEncodings.SIMPLE_INDEX.value\n            ),\n            labelling=create_test_labelling(label_type=LabelTypes.ATTRIBUTE_STRING.value, attribute_name=\'label\'),\n            clustering=None,\n            create_models=True,\n            predictive_model=predictive_model,\n            job_type=JobTypes.PREDICTION.value,\n            hyperparameter_optimizer=None,\n            incremental_train=None\n        )\n\n        prediction_task(self.job.id, do_publish_result=False)\n        self.job.refresh_from_db()\n\n        self.exp = Explanation.objects.get_or_create(\n            type=ExplanationTypes.CMFEEDBACK.value,\n            split=split,\n            predictive_model=predictive_model,\n            job=self.job,\n            results={}\n        )[0]\n        self.training_df_old, self.test_df_old = get_encoded_logs(self.job)\n\n    def test_tassellate_numbers_positive(self):\n        element = \'81.0\'\n        tassellated_element = tassellate_numbers(element)\n        expected = \'80\'\n        self.assertEqual(tassellated_element, expected)\n\n    def test_tassellate_numbers_unnecessary1(self):\n        element = \'Accept Claim\'\n        tassellated_element = tassellate_numbers(element)\n        expected = \'Accept Claim\'\n        self.assertEqual(tassellated_element, expected)\n\n    def test_tassellate_numbers_unnecessary2(self):\n        element = \'asdf81.0\'\n        tassellated_element = tassellate_numbers(element)\n        expected = \'asdf81.0\'\n        self.assertEqual(tassellated_element, expected)\n\n    def test_retrieve_temporal_stability(self):\n        ts = retrieve_temporal_stability(self.training_df_old, self.test_df_old.copy(), self.job, self.job.split)\n        expected = {\n            \'2_122\': {\'prefix_1\': {\'value\': \'Register\', \'predicted\': \'false\'}, \'prefix_2\': {\'value\': \'High Insurance Check\', \'predicted\': \'false\'}, \'prefix_3\': {\'value\': \'High Medical History\', \'predicted\': \'false\'}, \'prefix_4\': {\'value\': \'Contact Hospital\', \'predicted\': \'false\'}},\n            \'2_106\': {\'prefix_1\': {\'value\': \'Register\', \'predicted\': \'false\'}, \'prefix_2\': {\'value\': \'Contact Hospital\', \'predicted\': \'false\'}, \'prefix_3\': {\'value\': \'High Insurance Check\', \'predicted\': \'false\'}, \'prefix_4\': {\'value\': \'Create Questionnaire\', \'predicted\': \'false\'}},\n            \'2_107\': {\'prefix_1\': {\'value\': \'Register\', \'predicted\': \'true\'}, \'prefix_2\': {\'value\': \'Create Questionnaire\', \'predicted\': \'true\'}, \'prefix_3\': {\'value\': \'Low Medical History\', \'predicted\': \'true\'}, \'prefix_4\': {\'value\': \'Low Insurance Check\', \'predicted\': \'true\'}},\n            \'2_108\': {\'prefix_1\': {\'value\': \'Register\', \'predicted\': \'true\'}, \'prefix_2\': {\'value\': \'Low Medical History\', \'predicted\': \'true\'}, \'prefix_3\': {\'value\': \'Low Insurance Check\', \'predicted\': \'true\'}, \'prefix_4\': {\'value\': \'Accept Claim\', \'predicted\': \'true\'}},\n            \'2_126\': {\'prefix_1\': {\'value\': \'Register\', \'predicted\': \'true\'}, \'prefix_2\': {\'value\': \'Create Questionnaire\', \'predicted\': \'true\'}, \'prefix_3\': {\'value\': \'Low Medical History\', \'predicted\': \'true\'}, \'prefix_4\': {\'value\': \'Low Insurance Check\', \'predicted\': \'true\'}},\n            \'2_100\': {\'prefix_1\': {\'value\': \'Register\', \'predicted\': \'false\'}, \'prefix_2\': {\'value\': \'Create Questionnaire\', \'predicted\': \'false\'}, \'prefix_3\': {\'value\': \'High Insurance Check\', \'predicted\': \'false\'}, \'prefix_4\': {\'value\': \'Contact Hospital\', \'predicted\': \'false\'}},\n            \'2_124\': {\'prefix_1\': {\'value\': \'Register\', \'predicted\': \'false\'}, \'prefix_2\': {\'value\': \'Create Questionnaire\', \'predicted\': \'false\'}, \'prefix_3\': {\'value\': \'High Medical History\', \'predicted\': \'false\'}, \'prefix_4\': {\'value\': \'Contact Hospital\', \'predicted\': \'false\'}},\n            \'2_123\': {\'prefix_1\': {\'value\': \'Register\', \'predicted\': \'false\'}, \'prefix_2\': {\'value\': \'High Insurance Check\', \'predicted\': \'false\'}, \'prefix_3\': {\'value\': \'High Medical History\', \'predicted\': \'false\'}, \'prefix_4\': {\'value\': \'Contact Hospital\', \'predicted\': \'false\'}},\n            \'2_103\': {\'prefix_1\': {\'value\': \'Register\', \'predicted\': \'true\'}, \'prefix_2\': {\'value\': \'Low Medical History\', \'predicted\': \'true\'}, \'prefix_3\': {\'value\': \'Low Insurance Check\', \'predicted\': \'true\'}, \'prefix_4\': {\'value\': \'Accept Claim\', \'predicted\': \'true\'}},\n            \'2_102\': {\'prefix_1\': {\'value\': \'Register\', \'predicted\': \'false\'}, \'prefix_2\': {\'value\': \'Create Questionnaire\', \'predicted\': \'false\'}, \'prefix_3\': {\'value\': \'High Insurance Check\', \'predicted\': \'false\'}, \'prefix_4\': {\'value\': \'High Medical History\', \'predicted\': \'false\'}},\n            \'2_104\': {\'prefix_1\': {\'value\': \'Register\', \'predicted\': \'true\'}, \'prefix_2\': {\'value\': \'Low Medical History\', \'predicted\': \'true\'}, \'prefix_3\': {\'value\': \'Low Insurance Check\', \'predicted\': \'true\'}, \'prefix_4\': {\'value\': \'Accept Claim\', \'predicted\': \'true\'}},\n            \'2_109\': {\'prefix_1\': {\'value\': \'Register\', \'predicted\': \'false\'}, \'prefix_2\': {\'value\': \'Create Questionnaire\', \'predicted\': \'false\'}, \'prefix_3\': {\'value\': \'High Medical History\', \'predicted\': \'false\'}, \'prefix_4\': {\'value\': \'High Insurance Check\', \'predicted\': \'false\'}},\n            \'2_101\': {\'prefix_1\': {\'value\': \'Register\', \'predicted\': \'true\'}, \'prefix_2\': {\'value\': \'Low Medical History\', \'predicted\': \'true\'}, \'prefix_3\': {\'value\': \'Create Questionnaire\', \'predicted\': \'true\'}, \'prefix_4\': {\'value\': \'Low Insurance Check\', \'predicted\': \'true\'}},\n            \'2_105\': {\'prefix_1\': {\'value\': \'Register\', \'predicted\': \'false\'}, \'prefix_2\': {\'value\': \'Contact Hospital\', \'predicted\': \'false\'}, \'prefix_3\': {\'value\': \'High Medical History\', \'predicted\': \'false\'}, \'prefix_4\': {\'value\': \'High Insurance Check\', \'predicted\': \'false\'}}\n        }\n        self.assertDictEqual(expected, ts)\n\n    def test_compute_confusion_matrix(self):\n        ts = {\n            \'2_100\': {\'prefix_1\': {\'value\': \'Register\', \'predicted\': \'false\'}, \'prefix_2\': {\'value\': \'Create Questionnaire\', \'predicted\': \'false\'}, \'prefix_3\': {\'value\': \'High Insurance Check\', \'predicted\': \'false\'}, \'prefix_4\': {\'value\': \'Contact Hospital\', \'predicted\': \'false\'}},\n            \'2_101\': {\'prefix_1\': {\'value\': \'Register\', \'predicted\': \'true\'}, \'prefix_2\': {\'value\': \'Low Medical History\', \'predicted\': \'true\'}, \'prefix_3\': {\'value\': \'Create Questionnaire\', \'predicted\': \'true\'}, \'prefix_4\': {\'value\': \'Low Insurance Check\', \'predicted\': \'true\'}},\n            \'2_102\': {\'prefix_1\': {\'value\': \'Register\', \'predicted\': \'false\'}, \'prefix_2\': {\'value\': \'Create Questionnaire\', \'predicted\': \'false\'}, \'prefix_3\': {\'value\': \'High Insurance Check\', \'predicted\': \'false\'}, \'prefix_4\': {\'value\': \'High Medical History\', \'predicted\': \'false\'}},\n            \'2_103\': {\'prefix_1\': {\'value\': \'Register\', \'predicted\': \'true\'}, \'prefix_2\': {\'value\': \'Low Medical History\', \'predicted\': \'true\'}, \'prefix_3\': {\'value\': \'Low Insurance Check\', \'predicted\': \'true\'}, \'prefix_4\': {\'value\': \'Accept Claim\', \'predicted\': \'true\'}},\n            \'2_104\': {\'prefix_1\': {\'value\': \'Register\', \'predicted\': \'true\'}, \'prefix_2\': {\'value\': \'Low Medical History\', \'predicted\': \'true\'}, \'prefix_3\': {\'value\': \'Low Insurance Check\', \'predicted\': \'true\'}, \'prefix_4\': {\'value\': \'Accept Claim\', \'predicted\': \'true\'}},\n            \'2_105\': {\'prefix_1\': {\'value\': \'Register\', \'predicted\': \'false\'}, \'prefix_2\': {\'value\': \'Contact Hospital\', \'predicted\': \'false\'}, \'prefix_3\': {\'value\': \'High Medical History\', \'predicted\': \'false\'}, \'prefix_4\': {\'value\': \'High Insurance Check\', \'predicted\': \'false\'}},\n            \'2_106\': {\'prefix_1\': {\'value\': \'Register\', \'predicted\': \'false\'}, \'prefix_2\': {\'value\': \'Contact Hospital\', \'predicted\': \'false\'}, \'prefix_3\': {\'value\': \'High Insurance Check\', \'predicted\': \'false\'}, \'prefix_4\': {\'value\': \'Create Questionnaire\', \'predicted\': \'false\'}},\n            \'2_107\': {\'prefix_1\': {\'value\': \'Register\', \'predicted\': \'true\'}, \'prefix_2\': {\'value\': \'Create Questionnaire\', \'predicted\': \'true\'}, \'prefix_3\': {\'value\': \'Low Medical History\', \'predicted\': \'true\'}, \'prefix_4\': {\'value\': \'Low Insurance Check\', \'predicted\': \'true\'}},\n            \'2_108\': {\'prefix_1\': {\'value\': \'Register\', \'predicted\': \'true\'}, \'prefix_2\': {\'value\': \'Low Medical History\', \'predicted\': \'true\'}, \'prefix_3\': {\'value\': \'Low Insurance Check\', \'predicted\': \'true\'}, \'prefix_4\': {\'value\': \'Accept Claim\', \'predicted\': \'true\'}},\n            \'2_109\': {\'prefix_1\': {\'value\': \'Register\', \'predicted\': \'false\'}, \'prefix_2\': {\'value\': \'Create Questionnaire\', \'predicted\': \'false\'}, \'prefix_3\': {\'value\': \'High Medical History\', \'predicted\': \'false\'}, \'prefix_4\': {\'value\': \'High Insurance Check\', \'predicted\': \'false\'}}}\n        gold = DataFrame(data=[\n            {\'trace_id\': \'2_100\', \'label\': 1},\n            {\'trace_id\': \'2_101\', \'label\': 2},\n            {\'trace_id\': \'2_102\', \'label\': 1},\n            {\'trace_id\': \'2_103\', \'label\': 2},\n            {\'trace_id\': \'2_104\', \'label\': 2},\n            {\'trace_id\': \'2_105\', \'label\': 1},\n            {\'trace_id\': \'2_106\', \'label\': 1},\n            {\'trace_id\': \'2_107\', \'label\': 1},   # <-- FP\n            {\'trace_id\': \'2_108\', \'label\': 2},\n            {\'trace_id\': \'2_109\', \'label\': 2}])  # <-- FN\n        confusion_matrix = compute_confusion_matrix(ts, gold=gold, job_obj=self.job)\n        expected = {\n            \'tp\': [\'2_103\', \'2_104\', \'2_108\', \'2_101\'],\n            \'tn\': [\'2_105\', \'2_106\', \'2_100\', \'2_102\'],\n            \'fp\': [\'2_107\'],\n            \'fn\': [\'2_109\']\n        }\n        self.assertTrue(sorted(expected[\'tp\']) == sorted(confusion_matrix[\'tp\']))\n        self.assertTrue(sorted(expected[\'tn\']) == sorted(confusion_matrix[\'tn\']))\n        self.assertTrue(sorted(expected[\'fp\']) == sorted(confusion_matrix[\'fp\']))\n        self.assertTrue(sorted(expected[\'fn\']) == sorted(confusion_matrix[\'fn\']))\n\n    def test_retrieve_lime_ts(self):\n        lime_ts = retrieve_lime_ts(self.training_df_old, self.test_df_old.copy(), self.job, self.job.split)\n        expected = {\n            \'2_122\': {\'prefix_4\': {\'prefix_3\': {\'value\': \'High Medical History\', \'importance\': -0.21353833786944285}, \'prefix_2\': {\'value\': \'High Insurance Check\', \'importance\': -0.1634805282078596}, \'prefix_4\': {\'value\': \'Contact Hospital\', \'importance\': 0.004075908067748649}, \'prefix_1\': {\'value\': \'Register\', \'importance\': 0.0}}},\n            \'2_106\': {\'prefix_4\': {\'prefix_3\': {\'value\': \'High Insurance Check\', \'importance\': -0.21802762064961867}, \'prefix_2\': {\'value\': \'Contact Hospital\', \'importance\': -0.14026847974055287}, \'prefix_4\': {\'value\': \'Create Questionnaire\', \'importance\': -0.0052520742546136555}, \'prefix_1\': {\'value\': \'Register\', \'importance\': 0.0}}},\n            \'2_107\': {\'prefix_4\': {\'prefix_3\': {\'value\': \'Low Medical History\', \'importance\': 0.2823543161281943}, \'prefix_2\': {\'value\': \'Create Questionnaire\', \'importance\': -0.21258502082457842}, \'prefix_4\': {\'value\': \'Low Insurance Check\', \'importance\': 0.0018408312810497063}, \'prefix_1\': {\'value\': \'Register\', \'importance\': 0.0}}},\n            \'2_108\': {\'prefix_4\': {\'prefix_2\': {\'value\': \'Low Medical History\', \'importance\': 0.3080573983148055}, \'prefix_3\': {\'value\': \'Low Insurance Check\', \'importance\': 0.29177589308712076}, \'prefix_4\': {\'value\': \'Accept Claim\', \'importance\': 0.016406021937765063}, \'prefix_1\': {\'value\': \'Register\', \'importance\': 0.0}}},\n            \'2_126\': {\'prefix_4\': {\'prefix_3\': {\'value\': \'Low Medical History\', \'importance\': 0.27824064724829844}, \'prefix_2\': {\'value\': \'Create Questionnaire\', \'importance\': -0.20340518385895157}, \'prefix_4\': {\'value\': \'Low Insurance Check\', \'importance\': 0.006386185491340756}, \'prefix_1\': {\'value\': \'Register\', \'importance\': 0.0}}},\n            \'2_100\': {\'prefix_4\': {\'prefix_2\': {\'value\': \'Create Questionnaire\', \'importance\': -0.22891212261917707}, \'prefix_3\': {\'value\': \'High Insurance Check\', \'importance\': -0.20249316188080696}, \'prefix_4\': {\'value\': \'Contact Hospital\', \'importance\': 0.007645354094523817}, \'prefix_1\': {\'value\': \'Register\', \'importance\': 0.0}}},\n            \'2_124\': {\'prefix_4\': {\'prefix_2\': {\'value\': \'Create Questionnaire\', \'importance\': -0.218876310918173}, \'prefix_3\': {\'value\': \'High Medical History\', \'importance\': -0.19064571883670475}, \'prefix_4\': {\'value\': \'Contact Hospital\', \'importance\': 0.04383630913758562}, \'prefix_1\': {\'value\': \'Register\', \'importance\': 0.0}}},\n            \'2_123\': {\'prefix_4\': {\'prefix_3\': {\'value\': \'High Medical History\', \'importance\': -0.2052171385847169}, \'prefix_2\': {\'value\': \'High Insurance Check\', \'importance\': -0.14260102596172905}, \'prefix_4\': {\'value\': \'Contact Hospital\', \'importance\': 0.021004293998412076}, \'prefix_1\': {\'value\': \'Register\', \'importance\': 0.0}}},\n            \'2_103\': {\'prefix_4\': {\'prefix_2\': {\'value\': \'Low Medical History\', \'importance\': 0.2965207785352455}, \'prefix_3\': {\'value\': \'Low Insurance Check\', \'importance\': 0.2709519560736247}, \'prefix_4\': {\'value\': \'Accept Claim\', \'importance\': 0.027228937920124697}, \'prefix_1\': {\'value\': \'Register\', \'importance\': 0.0}}},\n            \'2_102\': {\'prefix_4\': {\'prefix_2\': {\'value\': \'Create Questionnaire\', \'importance\': -0.22252611869333622}, \'prefix_3\': {\'value\': \'High Insurance Check\', \'importance\': -0.21627849641689711}, \'prefix_4\': {\'value\': \'High Medical History\', \'importance\': 0.011617494080132082}, \'prefix_1\': {\'value\': \'Register\', \'importance\': 0.0}}},\n            \'2_104\': {\'prefix_4\': {\'prefix_2\': {\'value\': \'Low Medical History\', \'importance\': 0.300586424314097}, \'prefix_3\': {\'value\': \'Low Insurance Check\', \'importance\': 0.25728239044941903}, \'prefix_4\': {\'value\': \'Accept Claim\', \'importance\': 0.01269068438901065}, \'prefix_1\': {\'value\': \'Register\', \'importance\': 0.0}}},\n            \'2_109\': {\'prefix_4\': {\'prefix_2\': {\'value\': \'Create Questionnaire\', \'importance\': -0.2134932761050843}, \'prefix_3\': {\'value\': \'High Medical History\', \'importance\': -0.18709955714506707}, \'prefix_4\': {\'value\': \'High Insurance Check\', \'importance\': 0.013420036251066655}, \'prefix_1\': {\'value\': \'Register\', \'importance\': 0.0}}},\n            \'2_101\': {\'prefix_4\': {\'prefix_2\': {\'value\': \'Low Medical History\', \'importance\': 0.3292769105374355}, \'prefix_3\': {\'value\': \'Create Questionnaire\', \'importance\': -0.22873401693027287}, \'prefix_4\': {\'value\': \'Low Insurance Check\', \'importance\': 0.002956012816609118}, \'prefix_1\': {\'value\': \'Register\', \'importance\': 0.0}}},\n            \'2_105\': {\'prefix_4\': {\'prefix_3\': {\'value\': \'High Medical History\', \'importance\': -0.19383890694348266}, \'prefix_2\': {\'value\': \'Contact Hospital\', \'importance\': -0.12336107744753227}, \'prefix_4\': {\'value\': \'High Insurance Check\', \'importance\': -0.0029920686039502527}, \'prefix_1\': {\'value\': \'Register\', \'importance\': 0.0}}}\n        }\n        #check same important features\n        self.assertDictEqual(\n            {\n                tid: {\n                    where: {\n                        what: {\n                            value : lime_ts[tid][where][what][value]\n                            for value in lime_ts[tid][where][what] if value != \'importance\'\n                        }\n                        for what in lime_ts[tid][where]\n                    }\n                    for where in lime_ts[tid]\n                }\n                for tid in lime_ts\n            },\n            {\n                tid: {\n                    where: {\n                        what: {\n                            value : expected[tid][where][what][value]\n                            for value in expected[tid][where][what] if value != \'importance\'\n                        }\n                        for what in expected[tid][where]\n                    }\n                    for where in expected[tid]\n                }\n                for tid in expected\n            }\n        )\n        # check same polarity of important features\n        self.assertDictEqual(\n            {\n                tid: {\n                    where: {\n                        what: {\n                            value : lime_ts[tid][where][what][value] if value != \'importance\'\n                            else \'positive\' if str(lime_ts[tid][where][what][value])[0] != \'-\'\n                                else \'negative\'\n                            for value in lime_ts[tid][where][what]\n                        }\n                        for what in lime_ts[tid][where]\n                    }\n                    for where in lime_ts[tid]\n                }\n                for tid in lime_ts\n            },\n            {\n                tid: {\n                    where: {\n                        what: {\n                            value : expected[tid][where][what][value] if value != \'importance\'\n                            else \'positive\' if str(lime_ts[tid][where][what][value])[0] != \'-\'\n                                else \'negative\'\n                            for value in expected[tid][where][what]\n                        }\n                        for what in expected[tid][where]\n                    }\n                    for where in expected[tid]\n                }\n                for tid in expected\n            }\n        )\n\n    def test_process_lime_features(self):\n        self.confusion_matrix = {\n            \'tp\': [\'2_103\', \'2_104\', \'2_108\', \'2_101\'],\n            \'tn\': [\'2_105\', \'2_106\', \'2_100\', \'2_102\', \'2_123\'],\n            \'fp\': [\'2_107\', \'2_126\'],\n            \'fn\': [\'2_109\', \'2_122\', \'2_124\']\n        }\n        self.lime_ts = {\n            \'2_122\': {\'prefix_4\': {\'prefix_3\': {\'value\': \'High Medical History\', \'importance\': -0.21353833786944285}, \'prefix_2\': {\'value\': \'High Insurance Check\', \'importance\': -0.1634805282078596}, \'prefix_4\': {\'value\': \'Contact Hospital\', \'importance\': 0.004075908067748649}, \'prefix_1\': {\'value\': \'Register\', \'importance\': 0.0}}},\n            \'2_106\': {\'prefix_4\': {\'prefix_3\': {\'value\': \'High Insurance Check\', \'importance\': -0.21802762064961867}, \'prefix_2\': {\'value\': \'Contact Hospital\', \'importance\': -0.14026847974055287}, \'prefix_4\': {\'value\': \'Create Questionnaire\', \'importance\': -0.0052520742546136555}, \'prefix_1\': {\'value\': \'Register\', \'importance\': 0.0}}},\n            \'2_107\': {\'prefix_4\': {\'prefix_3\': {\'value\': \'Low Medical History\', \'importance\': 0.2823543161281943}, \'prefix_2\': {\'value\': \'Create Questionnaire\', \'importance\': -0.21258502082457842}, \'prefix_4\': {\'value\': \'Low Insurance Check\', \'importance\': 0.0018408312810497063}, \'prefix_1\': {\'value\': \'Register\', \'importance\': 0.0}}},\n            \'2_108\': {\'prefix_4\': {\'prefix_2\': {\'value\': \'Low Medical History\', \'importance\': 0.3080573983148055}, \'prefix_3\': {\'value\': \'Low Insurance Check\', \'importance\': 0.29177589308712076}, \'prefix_4\': {\'value\': \'Accept Claim\', \'importance\': 0.016406021937765063}, \'prefix_1\': {\'value\': \'Register\', \'importance\': 0.0}}},\n            \'2_126\': {\'prefix_4\': {\'prefix_3\': {\'value\': \'Low Medical History\', \'importance\': 0.27824064724829844}, \'prefix_2\': {\'value\': \'Create Questionnaire\', \'importance\': -0.20340518385895157}, \'prefix_4\': {\'value\': \'Low Insurance Check\', \'importance\': 0.006386185491340756}, \'prefix_1\': {\'value\': \'Register\', \'importance\': 0.0}}},\n            \'2_100\': {\'prefix_4\': {\'prefix_2\': {\'value\': \'Create Questionnaire\', \'importance\': -0.22891212261917707}, \'prefix_3\': {\'value\': \'High Insurance Check\', \'importance\': -0.20249316188080696}, \'prefix_4\': {\'value\': \'Contact Hospital\', \'importance\': 0.007645354094523817}, \'prefix_1\': {\'value\': \'Register\', \'importance\': 0.0}}},\n            \'2_124\': {\'prefix_4\': {\'prefix_2\': {\'value\': \'Create Questionnaire\', \'importance\': -0.218876310918173}, \'prefix_3\': {\'value\': \'High Medical History\', \'importance\': -0.19064571883670475}, \'prefix_4\': {\'value\': \'Contact Hospital\', \'importance\': 0.04383630913758562}, \'prefix_1\': {\'value\': \'Register\', \'importance\': 0.0}}},\n            \'2_123\': {\'prefix_4\': {\'prefix_3\': {\'value\': \'High Medical History\', \'importance\': -0.2052171385847169}, \'prefix_2\': {\'value\': \'High Insurance Check\', \'importance\': -0.14260102596172905}, \'prefix_4\': {\'value\': \'Contact Hospital\', \'importance\': 0.021004293998412076}, \'prefix_1\': {\'value\': \'Register\', \'importance\': 0.0}}},\n            \'2_103\': {\'prefix_4\': {\'prefix_2\': {\'value\': \'Low Medical History\', \'importance\': 0.2965207785352455}, \'prefix_3\': {\'value\': \'Low Insurance Check\', \'importance\': 0.2709519560736247}, \'prefix_4\': {\'value\': \'Accept Claim\', \'importance\': 0.027228937920124697}, \'prefix_1\': {\'value\': \'Register\', \'importance\': 0.0}}},\n            \'2_102\': {\'prefix_4\': {\'prefix_2\': {\'value\': \'Create Questionnaire\', \'importance\': -0.22252611869333622}, \'prefix_3\': {\'value\': \'High Insurance Check\', \'importance\': -0.21627849641689711}, \'prefix_4\': {\'value\': \'High Medical History\', \'importance\': 0.011617494080132082}, \'prefix_1\': {\'value\': \'Register\', \'importance\': 0.0}}},\n            \'2_104\': {\'prefix_4\': {\'prefix_2\': {\'value\': \'Low Medical History\', \'importance\': 0.300586424314097}, \'prefix_3\': {\'value\': \'Low Insurance Check\', \'importance\': 0.25728239044941903}, \'prefix_4\': {\'value\': \'Accept Claim\', \'importance\': 0.01269068438901065}, \'prefix_1\': {\'value\': \'Register\', \'importance\': 0.0}}},\n            \'2_109\': {\'prefix_4\': {\'prefix_2\': {\'value\': \'Create Questionnaire\', \'importance\': -0.2134932761050843}, \'prefix_3\': {\'value\': \'High Medical History\', \'importance\': -0.18709955714506707}, \'prefix_4\': {\'value\': \'High Insurance Check\', \'importance\': 0.013420036251066655}, \'prefix_1\': {\'value\': \'Register\', \'importance\': 0.0}}},\n            \'2_101\': {\'prefix_4\': {\'prefix_2\': {\'value\': \'Low Medical History\', \'importance\': 0.3292769105374355}, \'prefix_3\': {\'value\': \'Create Questionnaire\', \'importance\': -0.22873401693027287}, \'prefix_4\': {\'value\': \'Low Insurance Check\', \'importance\': 0.002956012816609118}, \'prefix_1\': {\'value\': \'Register\', \'importance\': 0.0}}},\n            \'2_105\': {\'prefix_4\': {\'prefix_3\': {\'value\': \'High Medical History\', \'importance\': -0.19383890694348266}, \'prefix_2\': {\'value\': \'Contact Hospital\', \'importance\': -0.12336107744753227}, \'prefix_4\': {\'value\': \'High Insurance Check\', \'importance\': -0.0029920686039502527}, \'prefix_1\': {\'value\': \'Register\', \'importance\': 0.0}}}\n        }\n        limefeats = process_lime_features(self.lime_ts, self.confusion_matrix, [\'tp\', \'tn\', \'fp\', \'fn\'], self.job.encoding.prefix_length)\n        expected = {\n            \'tp\': {\n                \'2_108\': [(\'prefix_2\', \'Low Medical History\', 0.3080573983148055), (\'prefix_3\', \'Low Insurance Check\', 0.29177589308712076), (\'prefix_4\', \'Accept Claim\', 0.016406021937765063), (\'prefix_1\', \'Register\', 0.0)],\n                \'2_103\': [(\'prefix_2\', \'Low Medical History\', 0.2965207785352455), (\'prefix_3\', \'Low Insurance Check\', 0.2709519560736247), (\'prefix_4\', \'Accept Claim\', 0.027228937920124697), (\'prefix_1\', \'Register\', 0.0)],\n                \'2_104\': [(\'prefix_2\', \'Low Medical History\', 0.300586424314097), (\'prefix_3\', \'Low Insurance Check\', 0.25728239044941903), (\'prefix_4\', \'Accept Claim\', 0.01269068438901065), (\'prefix_1\', \'Register\', 0.0)],\n                \'2_101\': [(\'prefix_2\', \'Low Medical History\', 0.3292769105374355), (\'prefix_4\', \'Low Insurance Check\', 0.002956012816609118), (\'prefix_1\', \'Register\', 0.0), (\'prefix_3\', \'Create Questionnaire\', -0.22873401693027287)]},\n            \'tn\': {\n                \'2_106\': [(\'prefix_3\', \'High Insurance Check\', -0.21802762064961867), (\'prefix_2\', \'Contact Hospital\', -0.14026847974055287), (\'prefix_4\', \'Create Questionnaire\', -0.0052520742546136555), (\'prefix_1\', \'Register\', 0.0)],\n                \'2_100\': [(\'prefix_2\', \'Create Questionnaire\', -0.22891212261917707), (\'prefix_3\', \'High Insurance Check\', -0.20249316188080696), (\'prefix_1\', \'Register\', 0.0), (\'prefix_4\', \'Contact Hospital\', 0.007645354094523817)],\n                \'2_123\': [(\'prefix_3\', \'High Medical History\', -0.2052171385847169), (\'prefix_2\', \'High Insurance Check\', -0.14260102596172905), (\'prefix_1\', \'Register\', 0.0), (\'prefix_4\', \'Contact Hospital\', 0.021004293998412076)],\n                \'2_102\': [(\'prefix_2\', \'Create Questionnaire\', -0.22252611869333622), (\'prefix_3\', \'High Insurance Check\', -0.21627849641689711), (\'prefix_1\', \'Register\', 0.0), (\'prefix_4\', \'High Medical History\', 0.011617494080132082)],\n                \'2_105\': [(\'prefix_3\', \'High Medical History\', -0.19383890694348266), (\'prefix_2\', \'Contact Hospital\', -0.12336107744753227), (\'prefix_4\', \'High Insurance Check\', -0.0029920686039502527), (\'prefix_1\', \'Register\', 0.0)]},\n            \'fp\': {\n                \'2_107\': [(\'prefix_3\', \'Low Medical History\', 0.2823543161281943), (\'prefix_4\', \'Low Insurance Check\', 0.0018408312810497063), (\'prefix_1\', \'Register\', 0.0), (\'prefix_2\', \'Create Questionnaire\', -0.21258502082457842)],\n                \'2_126\': [(\'prefix_3\', \'Low Medical History\', 0.27824064724829844), (\'prefix_4\', \'Low Insurance Check\', 0.006386185491340756), (\'prefix_1\', \'Register\', 0.0), (\'prefix_2\', \'Create Questionnaire\', -0.20340518385895157)]},\n            \'fn\': {\n                \'2_122\': [(\'prefix_3\', \'High Medical History\', -0.21353833786944285), (\'prefix_2\', \'High Insurance Check\', -0.1634805282078596), (\'prefix_1\', \'Register\', 0.0), (\'prefix_4\', \'Contact Hospital\', 0.004075908067748649)],\n                \'2_124\': [(\'prefix_2\', \'Create Questionnaire\', -0.218876310918173), (\'prefix_3\', \'High Medical History\', -0.19064571883670475), (\'prefix_1\', \'Register\', 0.0), (\'prefix_4\', \'Contact Hospital\', 0.04383630913758562)],\n                \'2_109\': [(\'prefix_2\', \'Create Questionnaire\', -0.2134932761050843), (\'prefix_3\', \'High Medical History\', -0.18709955714506707), (\'prefix_1\', \'Register\', 0.0), (\'prefix_4\', \'High Insurance Check\', 0.013420036251066655)]}\n        }\n        self.assertDictEqual(\n            {\n                tid: sorted(expected[\'tp\'][tid])\n                for tid in expected[\'tp\']\n            },\n            {\n                tid: sorted(limefeats[\'tp\'][tid])\n                for tid in limefeats[\'tp\']\n            }\n        )\n        self.assertDictEqual(\n            {\n                tid: sorted(expected[\'tn\'][tid])\n                for tid in expected[\'tn\']\n            },\n            {\n                tid: sorted(limefeats[\'tn\'][tid])\n                for tid in limefeats[\'tn\']\n            }\n        )\n        self.assertDictEqual(\n            {\n                tid: sorted(expected[\'fp\'][tid])\n                for tid in expected[\'fp\']\n            },\n            {\n                tid: sorted(limefeats[\'fp\'][tid])\n                for tid in limefeats[\'fp\']\n            }\n        )\n        self.assertDictEqual(\n            {\n                tid: sorted(expected[\'fn\'][tid])\n                for tid in expected[\'fn\']\n            },\n            {\n                tid: sorted(limefeats[\'fn\'][tid])\n                for tid in limefeats[\'fn\']\n            }\n        ) #todo just test if they are positive or negative?\n\n    def test_filter_lime_features(self):\n        self.limefeats = {\n            \'tp\': {\n                \'2_108\': [(\'prefix_2\', \'Low Medical History\', 0.3080573983148055), (\'prefix_3\', \'Low Insurance Check\', 0.29177589308712076), (\'prefix_4\', \'Accept Claim\', 0.016406021937765063), (\'prefix_1\', \'Register\', 0.0)],\n                \'2_103\': [(\'prefix_2\', \'Low Medical History\', 0.2965207785352455), (\'prefix_3\', \'Low Insurance Check\', 0.2709519560736247), (\'prefix_4\', \'Accept Claim\', 0.027228937920124697), (\'prefix_1\', \'Register\', 0.0)],\n                \'2_104\': [(\'prefix_2\', \'Low Medical History\', 0.300586424314097), (\'prefix_3\', \'Low Insurance Check\', 0.25728239044941903), (\'prefix_4\', \'Accept Claim\', 0.01269068438901065), (\'prefix_1\', \'Register\', 0.0)],\n                \'2_101\': [(\'prefix_2\', \'Low Medical History\', 0.3292769105374355), (\'prefix_4\', \'Low Insurance Check\', 0.002956012816609118), (\'prefix_1\', \'Register\', 0.0), (\'prefix_3\', \'Create Questionnaire\', -0.22873401693027287)]},\n            \'tn\': {\n                \'2_106\': [(\'prefix_3\', \'High Insurance Check\', -0.21802762064961867), (\'prefix_2\', \'Contact Hospital\', -0.14026847974055287), (\'prefix_4\', \'Create Questionnaire\', -0.0052520742546136555), (\'prefix_1\', \'Register\', 0.0)],\n                \'2_100\': [(\'prefix_2\', \'Create Questionnaire\', -0.22891212261917707), (\'prefix_3\', \'High Insurance Check\', -0.20249316188080696), (\'prefix_1\', \'Register\', 0.0), (\'prefix_4\', \'Contact Hospital\', 0.007645354094523817)],\n                \'2_123\': [(\'prefix_3\', \'High Medical History\', -0.2052171385847169), (\'prefix_2\', \'High Insurance Check\', -0.14260102596172905), (\'prefix_1\', \'Register\', 0.0), (\'prefix_4\', \'Contact Hospital\', 0.021004293998412076)],\n                \'2_102\': [(\'prefix_2\', \'Create Questionnaire\', -0.22252611869333622), (\'prefix_3\', \'High Insurance Check\', -0.21627849641689711), (\'prefix_1\', \'Register\', 0.0), (\'prefix_4\', \'High Medical History\', 0.011617494080132082)],\n                \'2_105\': [(\'prefix_3\', \'High Medical History\', -0.19383890694348266), (\'prefix_2\', \'Contact Hospital\', -0.12336107744753227), (\'prefix_4\', \'High Insurance Check\', -0.0029920686039502527), (\'prefix_1\', \'Register\', 0.0)]},\n            \'fp\': {\n                \'2_107\': [(\'prefix_3\', \'Low Medical History\', 0.2823543161281943), (\'prefix_4\', \'Low Insurance Check\', 0.0018408312810497063), (\'prefix_1\', \'Register\', 0.0), (\'prefix_2\', \'Create Questionnaire\', -0.21258502082457842)],\n                \'2_126\': [(\'prefix_3\', \'Low Medical History\', 0.27824064724829844), (\'prefix_4\', \'Low Insurance Check\', 0.006386185491340756), (\'prefix_1\', \'Register\', 0.0), (\'prefix_2\', \'Create Questionnaire\', -0.20340518385895157)]},\n            \'fn\': {\n                \'2_122\': [(\'prefix_3\', \'High Medical History\', -0.21353833786944285), (\'prefix_2\', \'High Insurance Check\', -0.1634805282078596), (\'prefix_1\', \'Register\', 0.0), (\'prefix_4\', \'Contact Hospital\', 0.004075908067748649)],\n                \'2_124\': [(\'prefix_2\', \'Create Questionnaire\', -0.218876310918173), (\'prefix_3\', \'High Medical History\', -0.19064571883670475), (\'prefix_1\', \'Register\', 0.0), (\'prefix_4\', \'Contact Hospital\', 0.04383630913758562)],\n                \'2_109\': [(\'prefix_2\', \'Create Questionnaire\', -0.2134932761050843), (\'prefix_3\', \'High Medical History\', -0.18709955714506707), (\'prefix_1\', \'Register\', 0.0), (\'prefix_4\', \'High Insurance Check\', 0.013420036251066655)]}\n        }\n        filtered_limefeats = filter_lime_features(\n            self.limefeats,\n            LIMEFEATS={\n                \'abs_lime\': False,\n                \'tp\': 0.2,\n                \'tn\': 0.2,\n                \'fp\': 0.2,\n                \'fn\': 0.2\n            },\n            CONFUSION_MATRIX=[\'tp\', \'tn\', \'fp\', \'fn\']\n        )\n        expected = {\n            \'tp\': {\'2_108\': [(\'prefix_2\', \'Low Medical History\', 0.3080573983148055), (\'prefix_3\', \'Low Insurance Check\', 0.29177589308712076)], \'2_103\': [(\'prefix_2\', \'Low Medical History\', 0.2965207785352455), (\'prefix_3\', \'Low Insurance Check\', 0.2709519560736247)], \'2_104\': [(\'prefix_2\', \'Low Medical History\', 0.300586424314097), (\'prefix_3\', \'Low Insurance Check\', 0.25728239044941903)], \'2_101\': [(\'prefix_2\', \'Low Medical History\', 0.3292769105374355)]},\n            \'tn\': {\'2_106\': [(\'prefix_3\', \'High Insurance Check\', -0.21802762064961867)], \'2_100\': [(\'prefix_2\', \'Create Questionnaire\', -0.22891212261917707), (\'prefix_3\', \'High Insurance Check\', -0.20249316188080696)], \'2_123\': [(\'prefix_3\', \'High Medical History\', -0.2052171385847169)], \'2_102\': [(\'prefix_2\', \'Create Questionnaire\', -0.22252611869333622), (\'prefix_3\', \'High Insurance Check\', -0.21627849641689711)]},\n            \'fp\': {\'2_107\': [(\'prefix_3\', \'Low Medical History\', 0.2823543161281943)], \'2_126\': [(\'prefix_3\', \'Low Medical History\', 0.27824064724829844)]},\n            \'fn\': {\'2_122\': [(\'prefix_3\', \'High Medical History\', -0.21353833786944285)], \'2_124\': [(\'prefix_2\', \'Create Questionnaire\', -0.218876310918173)], \'2_109\': [(\'prefix_2\', \'Create Questionnaire\', -0.2134932761050843)]}\n        }\n        self.assertDictEqual(expected, filtered_limefeats) # todo just test if they are greater than the threshold\n\n    def test_compute_data(self):\n        self.limefeats = {\n            \'tp\': {\n                \'2_108\': [(\'prefix_2\', \'Low Medical History\', 0.3080573983148055), (\'prefix_3\', \'Low Insurance Check\', 0.29177589308712076), (\'prefix_4\', \'Accept Claim\', 0.016406021937765063), (\'prefix_1\', \'Register\', 0.0)],\n                \'2_103\': [(\'prefix_2\', \'Low Medical History\', 0.2965207785352455), (\'prefix_3\', \'Low Insurance Check\', 0.2709519560736247), (\'prefix_4\', \'Accept Claim\', 0.027228937920124697), (\'prefix_1\', \'Register\', 0.0)],\n                \'2_104\': [(\'prefix_2\', \'Low Medical History\', 0.300586424314097), (\'prefix_3\', \'Low Insurance Check\', 0.25728239044941903), (\'prefix_4\', \'Accept Claim\', 0.01269068438901065), (\'prefix_1\', \'Register\', 0.0)],\n                \'2_101\': [(\'prefix_2\', \'Low Medical History\', 0.3292769105374355), (\'prefix_4\', \'Low Insurance Check\', 0.002956012816609118), (\'prefix_1\', \'Register\', 0.0), (\'prefix_3\', \'Create Questionnaire\', -0.22873401693027287)]},\n            \'tn\': {\n                \'2_106\': [(\'prefix_3\', \'High Insurance Check\', -0.21802762064961867), (\'prefix_2\', \'Contact Hospital\', -0.14026847974055287), (\'prefix_4\', \'Create Questionnaire\', -0.0052520742546136555), (\'prefix_1\', \'Register\', 0.0)],\n                \'2_100\': [(\'prefix_2\', \'Create Questionnaire\', -0.22891212261917707), (\'prefix_3\', \'High Insurance Check\', -0.20249316188080696), (\'prefix_1\', \'Register\', 0.0), (\'prefix_4\', \'Contact Hospital\', 0.007645354094523817)],\n                \'2_123\': [(\'prefix_3\', \'High Medical History\', -0.2052171385847169), (\'prefix_2\', \'High Insurance Check\', -0.14260102596172905), (\'prefix_1\', \'Register\', 0.0), (\'prefix_4\', \'Contact Hospital\', 0.021004293998412076)],\n                \'2_102\': [(\'prefix_2\', \'Create Questionnaire\', -0.22252611869333622), (\'prefix_3\', \'High Insurance Check\', -0.21627849641689711), (\'prefix_1\', \'Register\', 0.0), (\'prefix_4\', \'High Medical History\', 0.011617494080132082)],\n                \'2_105\': [(\'prefix_3\', \'High Medical History\', -0.19383890694348266), (\'prefix_2\', \'Contact Hospital\', -0.12336107744753227), (\'prefix_4\', \'High Insurance Check\', -0.0029920686039502527), (\'prefix_1\', \'Register\', 0.0)]},\n            \'fp\': {\n                \'2_107\': [(\'prefix_3\', \'Low Medical History\', 0.2823543161281943), (\'prefix_4\', \'Low Insurance Check\', 0.0018408312810497063), (\'prefix_1\', \'Register\', 0.0), (\'prefix_2\', \'Create Questionnaire\', -0.21258502082457842)],\n                \'2_126\': [(\'prefix_3\', \'Low Medical History\', 0.27824064724829844), (\'prefix_4\', \'Low Insurance Check\', 0.006386185491340756), (\'prefix_1\', \'Register\', 0.0), (\'prefix_2\', \'Create Questionnaire\', -0.20340518385895157)]},\n            \'fn\': {\n                \'2_122\': [(\'prefix_3\', \'High Medical History\', -0.21353833786944285), (\'prefix_2\', \'High Insurance Check\', -0.1634805282078596), (\'prefix_1\', \'Register\', 0.0), (\'prefix_4\', \'Contact Hospital\', 0.004075908067748649)],\n                \'2_124\': [(\'prefix_2\', \'Create Questionnaire\', -0.218876310918173), (\'prefix_3\', \'High Medical History\', -0.19064571883670475), (\'prefix_1\', \'Register\', 0.0), (\'prefix_4\', \'Contact Hospital\', 0.04383630913758562)],\n                \'2_109\': [(\'prefix_2\', \'Create Questionnaire\', -0.2134932761050843), (\'prefix_3\', \'High Medical History\', -0.18709955714506707), (\'prefix_1\', \'Register\', 0.0), (\'prefix_4\', \'High Insurance Check\', 0.013420036251066655)]}\n        }\n        self.filtered_limefeats = {\n            \'tp\': {\'2_108\': [(\'prefix_2\', \'Low Medical History\', 0.3080573983148055), (\'prefix_3\', \'Low Insurance Check\', 0.29177589308712076)], \'2_103\': [(\'prefix_2\', \'Low Medical History\', 0.2965207785352455), (\'prefix_3\', \'Low Insurance Check\', 0.2709519560736247)], \'2_104\': [(\'prefix_2\', \'Low Medical History\', 0.300586424314097), (\'prefix_3\', \'Low Insurance Check\', 0.25728239044941903)], \'2_101\': [(\'prefix_2\', \'Low Medical History\', 0.3292769105374355)]},\n            \'tn\': {\'2_106\': [(\'prefix_3\', \'High Insurance Check\', -0.21802762064961867)], \'2_100\': [(\'prefix_2\', \'Create Questionnaire\', -0.22891212261917707), (\'prefix_3\', \'High Insurance Check\', -0.20249316188080696)], \'2_123\': [(\'prefix_3\', \'High Medical History\', -0.2052171385847169)], \'2_102\': [(\'prefix_2\', \'Create Questionnaire\', -0.22252611869333622), (\'prefix_3\', \'High Insurance Check\', -0.21627849641689711)]},\n            \'fp\': {\'2_107\': [(\'prefix_3\', \'Low Medical History\', 0.2823543161281943)], \'2_126\': [(\'prefix_3\', \'Low Medical History\', 0.27824064724829844)]},\n            \'fn\': {\'2_122\': [(\'prefix_3\', \'High Medical History\', -0.21353833786944285)], \'2_124\': [(\'prefix_2\', \'Create Questionnaire\', -0.218876310918173)], \'2_109\': [(\'prefix_2\', \'Create Questionnaire\', -0.2134932761050843)]}\n        }\n        data = compute_data([\'tp\', \'tn\', \'fp\', \'fn\'], self.limefeats, self.filtered_limefeats)\n        expected = {\n            \'tp\': {\'2_108\': [\'prefix_2_Low Medical History\', \'prefix_3_Low Insurance Check\'], \'2_103\': [\'prefix_2_Low Medical History\', \'prefix_3_Low Insurance Check\'], \'2_104\': [\'prefix_2_Low Medical History\', \'prefix_3_Low Insurance Check\'], \'2_101\': [\'prefix_2_Low Medical History\']},\n            \'tn\': {\'2_106\': [\'prefix_3_High Insurance Check\'], \'2_100\': [\'prefix_2_Create Questionnaire\', \'prefix_3_High Insurance Check\'], \'2_123\': [\'prefix_3_High Medical History\'], \'2_102\': [\'prefix_2_Create Questionnaire\', \'prefix_3_High Insurance Check\'], \'2_105\': []},\n            \'fp\': {\'2_107\': [\'prefix_3_Low Medical History\'], \'2_126\': [\'prefix_3_Low Medical History\']},\n            \'fn\': {\'2_122\': [\'prefix_3_High Medical History\'], \'2_124\': [\'prefix_2_Create Questionnaire\'], \'2_109\': [\'prefix_2_Create Questionnaire\']}}\n        self.assertDictEqual(expected, data)\n\n    def test_mine_patterns(self):\n        data = {\n            \'tp\': {\'2_108\': [\'prefix_2_Low Medical History\', \'prefix_3_Low Insurance Check\'], \'2_103\': [\'prefix_2_Low Medical History\', \'prefix_3_Low Insurance Check\'], \'2_104\': [\'prefix_2_Low Medical History\', \'prefix_3_Low Insurance Check\'], \'2_101\': [\'prefix_2_Low Medical History\']},\n            \'tn\': {\'2_106\': [\'prefix_3_High Insurance Check\'], \'2_100\': [\'prefix_2_Create Questionnaire\', \'prefix_3_High Insurance Check\'], \'2_123\': [\'prefix_3_High Medical History\'], \'2_102\': [\'prefix_2_Create Questionnaire\', \'prefix_3_High Insurance Check\'], \'2_105\': []},\n            \'fp\': {\'2_107\': [\'prefix_3_Low Medical History\'], \'2_126\': [\'prefix_3_Low Medical History\']},\n            \'fn\': {\'2_122\': [\'prefix_3_High Medical History\'], \'2_124\': [\'prefix_2_Create Questionnaire\'], \'2_109\': [\'prefix_2_Create Questionnaire\']}}\n        frequent_patterns = mine_patterns(data, MINING_METHOD=\'item_mining\', CONFUSION_MATRIX=[\'tp\', \'tn\', \'fp\', \'fn\'])\n        expected = {\n            \'tp\': [((\'prefix_3_Low Insurance Check\',), 3), ((\'prefix_3_Low Insurance Check\', \'prefix_2_Low Medical History\'), 3), ((\'prefix_2_Low Medical History\',), 4)],\n            \'tn\': [((\'prefix_2_Create Questionnaire\',), 2), ((\'prefix_3_High Insurance Check\', \'prefix_2_Create Questionnaire\'), 2), ((\'prefix_3_High Insurance Check\',), 3)],\n            \'fp\': [((\'prefix_3_Low Medical History\',), 2)],\n            \'fn\': [((\'prefix_2_Create Questionnaire\',), 2)]}\n        self.assertEqual(expected[\'fp\'], frequent_patterns[\'fp\'])\n        self.assertEqual(expected[\'fn\'], frequent_patterns[\'fn\'])\n        self.assertEqual([set(element) for element, score in expected[\'tp\']], [set(element) for element, score in frequent_patterns[\'tp\']])\n        self.assertEqual([set(element) for element, score in expected[\'tn\']], [set(element) for element, score in frequent_patterns[\'tn\']])\n        self.assertEqual([score for element, score in expected[\'tn\']], [score for element, score in frequent_patterns[\'tn\']])\n\n    # def test_retrieve_right_len(self):\n    #     self.assertFalse(True)\n    #\n    # def test_weight_freq_seqs(self):\n    #     self.assertFalse(True)\n\n    def test_explain(self):\n        mined_patterns = explain(self.exp, self.training_df_old, self.test_df_old, top_k=3)\n        expected = {\n            \'confusion_matrix\': {\n                \'tp\': [\'2_108\', \'2_103\', \'2_101\', \'2_104\'],\n                \'tn\': [\'2_102\', \'2_105\', \'2_106\', \'2_123\', \'2_100\'],\n                \'fp\': [\'2_107\', \'2_126\'],\n                \'fn\': [\'2_124\', \'2_122\', \'2_109\']\n            },\n            \'data\': {\n                \'tp\': {\'2_108\': [\'prefix_2_Low Medical History\', \'prefix_3_Low Insurance Check\'], \'2_103\': [\'prefix_2_Low Medical History\', \'prefix_3_Low Insurance Check\'], \'2_101\': [\'prefix_2_Low Medical History\'], \'2_104\': [\'prefix_2_Low Medical History\', \'prefix_3_Low Insurance Check\']},\n                \'tn\': {\'2_102\': [], \'2_105\': [\'prefix_3_High Medical History\'], \'2_106\': [], \'2_123\': [\'prefix_3_High Medical History\'], \'2_100\': [\'prefix_3_High Insurance Check\']},\n                \'fp\': {\'2_107\': [\'prefix_3_Low Medical History\'], \'2_126\': [\'prefix_3_Low Medical History\']},\n                \'fn\': {\'2_124\': [\'prefix_3_High Medical History\'], \'2_122\': [\'prefix_3_High Medical History\'], \'2_109\': [\'prefix_3_High Medical History\']}\n            },\n            \'freq_seqs_after_filter\': {\n                \'tp\': [((\'prefix_3_Low Insurance Check\',), 3), ((\'prefix_2_Low Medical History\', \'prefix_3_Low Insurance Check\'), 3), ((\'prefix_2_Low Medical History\',), 4)],\n                \'tn\': [((\'prefix_3_High Medical History\',), 2)],\n                \'fp\': [((\'prefix_3_Low Medical History\',), 2)],\n                \'fn\': [((\'prefix_3_High Medical History\',), 3)]\n            },\n            \'filtered_freq_seqs_after_filter\': {\n                \'tp\': [[(\'prefix_2_Low Medical History\',), 1.0], [(\'prefix_3_Low Insurance Check\',), 0.75], [(\'prefix_2_Low Medical History\', \'prefix_3_Low Insurance Check\'), 0.75]],\n                \'tn\': [[(\'prefix_3_High Medical History\',), 0.4]],\n                \'fp\': [[(\'prefix_3_Low Medical History\',), 1.0]],\n                \'fn\': [[(\'prefix_3_High Medical History\',), 1.0]]\n            }\n        }\n\n        self.assertTrue(sorted(expected[\'confusion_matrix\']) == sorted(mined_patterns[\'confusion_matrix\']))\n        self.assertTrue(sorted(expected[\'data\']) == sorted(mined_patterns[\'data\']))\n        self.assertTrue(sorted(expected[\'freq_seqs_after_filter\']) == sorted(mined_patterns[\'freq_seqs_after_filter\']))\n        self.assertTrue(sorted(expected[\'filtered_freq_seqs_after_filter\']) == sorted(mined_patterns[\'filtered_freq_seqs_after_filter\']))\n'"
src/explanation/tests/test_ice_wrapper.py,0,"b'from django.test import TestCase\n\nfrom src.core.core import get_encoded_logs\nfrom src.encoding.models import ValueEncodings\nfrom src.explanation.ice_wrapper import explain\nfrom src.explanation.models import Explanation, ExplanationTypes\nfrom src.jobs.models import JobTypes\nfrom src.jobs.tasks import prediction_task\nfrom src.labelling.models import LabelTypes\nfrom src.predictive_model.classification.models import ClassificationMethods\nfrom src.predictive_model.models import PredictiveModels\nfrom src.split.models import SplitTypes, SplitOrderingMethods\nfrom src.utils.tests_utils import create_test_split, create_test_log, create_test_predictive_model, create_test_job, \\\n    create_test_encoding, create_test_labelling\n\n\nclass TestICEWrapper(TestCase):\n    """"""Proof of concept tests""""""\n\n    def test_explain(self):\n        split = create_test_split(\n            split_type=SplitTypes.SPLIT_DOUBLE.value,\n            split_ordering_method=SplitOrderingMethods.SPLIT_SEQUENTIAL.value,\n            test_size=0.2,\n            original_log=None,\n            train_log=create_test_log(\n                log_name=\'train_explainability.xes\',\n                log_path=\'cache/log_cache/test_logs/train_explainability.xes\'\n            ),\n            test_log=create_test_log(\n                log_name=\'test_explainability.xes\',\n                log_path=\'cache/log_cache/test_logs/test_explainability.xes\'\n            )\n        )\n\n        predictive_model = create_test_predictive_model(\n            predictive_model=PredictiveModels.CLASSIFICATION.value,\n            prediction_method=ClassificationMethods.DECISION_TREE.value\n        )\n\n        job = create_test_job(\n            split=split,\n            encoding=create_test_encoding(\n                prefix_length=4,\n                padding=True,\n                value_encoding=ValueEncodings.SIMPLE_INDEX.value\n            ),\n            labelling=create_test_labelling(label_type=LabelTypes.ATTRIBUTE_STRING.value, attribute_name=\'label\'),\n            clustering=None,\n            create_models=True,\n            predictive_model=predictive_model,\n            job_type=JobTypes.PREDICTION.value,\n            hyperparameter_optimizer=None,\n            incremental_train=None\n        )\n\n        prediction_task(job.id, do_publish_result=False)\n        job.refresh_from_db()\n\n        exp = Explanation.objects.get_or_create(\n            type=ExplanationTypes.ICE.value,\n            split=split,\n            predictive_model=predictive_model,\n            job=job,\n            results={}\n        )[0]\n        training_df_old, test_df_old = get_encoded_logs(job)\n\n        explanation_target = \'prefix_2\'\n\n        explanation = explain(exp, training_df_old, test_df_old, explanation_target)\n\n        expected = [\n            {\'value\': \'Contact Hospital\', \'label\': 1.2962962962962963, \'count\': 351},\n            {\'value\': \'Create Questionnaire\', \'label\': 1.5526992287917738, \'count\': 1167},\n            {\'value\': \'High Insurance Check\', \'label\': 1.2667660208643816, \'count\': 671}\n        ]\n\n        self.assertEqual(expected, explanation)\n'"
src/explanation/tests/test_retrain_wrapper.py,0,"b'\nfrom django.test import TestCase\n\nfrom src.core.core import get_encoded_logs\nfrom src.encoding.models import ValueEncodings\nfrom src.explanation.models import Explanation, ExplanationTypes\nfrom src.explanation.retrain_wrapper import randomise_features, save_randomised_set, explain\nfrom src.jobs.models import JobTypes\nfrom src.jobs.tasks import prediction_task\nfrom src.labelling.models import LabelTypes\nfrom src.predictive_model.classification.models import ClassificationMethods\nfrom src.predictive_model.models import PredictiveModels\nfrom src.split.models import SplitTypes, SplitOrderingMethods\nfrom src.utils.tests_utils import create_test_log, create_test_split, create_test_job, create_test_predictive_model, \\\n    create_test_labelling, create_test_encoding\n\n\nclass TestRetrainWrapper(TestCase):\n    """"""Proof of concept tests""""""\n\n    def setUp(self) -> None:\n\n        split = create_test_split(\n            split_type=SplitTypes.SPLIT_DOUBLE.value,\n            split_ordering_method=SplitOrderingMethods.SPLIT_SEQUENTIAL.value,\n            test_size=0.2,\n            original_log=None,\n            train_log=create_test_log(\n                log_name=\'train_explainability.xes\',\n                log_path=\'cache/log_cache/test_logs/train_explainability.xes\'\n            ),\n            test_log=create_test_log(\n                log_name=\'test_explainability.xes\',\n                log_path=\'cache/log_cache/test_logs/test_explainability.xes\'\n            )\n        )\n\n        predictive_model = create_test_predictive_model(\n            predictive_model=PredictiveModels.CLASSIFICATION.value,\n            prediction_method=ClassificationMethods.DECISION_TREE.value\n        )\n\n        self.job = create_test_job(\n            split=split,\n            encoding=create_test_encoding(\n                prefix_length=4,\n                padding=True,\n                value_encoding=ValueEncodings.SIMPLE_INDEX.value\n            ),\n            labelling=create_test_labelling(\n                label_type=LabelTypes.ATTRIBUTE_STRING.value,\n                attribute_name=\'label\'\n            ),\n            clustering=None,\n            create_models=False,\n            predictive_model=predictive_model,\n            job_type=JobTypes.PREDICTION.value,\n            hyperparameter_optimizer=None,\n            incremental_train=None\n        )\n\n        prediction_task(self.job.id, do_publish_result=False)\n        self.job.refresh_from_db()\n\n        self.exp = Explanation.objects.get_or_create(\n            type=ExplanationTypes.RETRAIN.value,\n            split=split,\n            predictive_model=predictive_model,\n            job=self.job,\n            results={}\n        )[0]\n        self.training_df_old, self.test_df_old = get_encoded_logs(self.job)\n\n    def test_radomise_features_single_feature(self):\n        explanation_target = [[[\'prefix_2\', 1]]]\n        train_df, test_df = randomise_features(self.training_df_old.copy(), self.test_df_old.copy(), explanation_target)\n        self.assertFalse(train_df.equals(self.training_df_old))\n        self.assertFalse(train_df[\'prefix_2\'].equals(self.training_df_old[\'prefix_2\']))\n        self.assertTrue(train_df.drop([\'prefix_2\'], 1).equals(self.training_df_old.drop([\'prefix_2\'], 1)))\n        self.assertFalse(test_df.equals(self.test_df_old))\n        # self.assertTrue(test_df[\'prefix_2\'].equals(self.test_df_old[\'prefix_2\']))\n        self.assertTrue(test_df.drop([\'prefix_2\'], 1).equals(self.test_df_old.drop([\'prefix_2\'], 1)))\n\n    def test_radomise_features_composed_feature(self):\n        explanation_target = [[[\'prefix_2\', 2], [\'prefix_3\', 1]]]\n        train_df, test_df = randomise_features(self.training_df_old.copy(), self.test_df_old.copy(), explanation_target)\n        self.assertFalse(train_df.equals(self.training_df_old))\n        self.assertFalse(train_df[\'prefix_2\'].equals(self.training_df_old[\'prefix_2\']))\n        self.assertFalse(train_df[\'prefix_3\'].equals(self.training_df_old[\'prefix_3\']))\n        self.assertFalse(train_df.drop([\'prefix_2\'], 1).equals(self.training_df_old.drop([\'prefix_2\'], 1)))\n        self.assertFalse(train_df.drop([\'prefix_3\'], 1).equals(self.training_df_old.drop([\'prefix_3\'], 1)))\n        self.assertFalse(test_df.equals(self.test_df_old))\n        # self.assertFalse(test_df[\'prefix_2\'].equals(self.test_df_old[\'prefix_2\']))\n        # self.assertTrue(test_df[\'prefix_3\'].equals(self.test_df_old[\'prefix_3\']))\n        self.assertFalse(test_df.drop([\'prefix_2\'], 1).equals(self.test_df_old.drop([\'prefix_2\'], 1)))\n        self.assertFalse(test_df.drop([\'prefix_3\'], 1).equals(self.test_df_old.drop([\'prefix_3\'], 1)))\n\n    def test_radomise_features_multiple_feature(self):\n        explanation_target = [[[\'prefix_1\', 1], [\'prefix_2\', 2]], [[\'prefix_3\', 1]]]\n        train_df, test_df = randomise_features(self.training_df_old.copy(), self.test_df_old.copy(), explanation_target)\n        self.assertFalse(train_df.equals(self.training_df_old))\n        self.assertTrue(train_df[\'prefix_1\'].equals(self.training_df_old[\'prefix_1\']))\n        self.assertFalse(train_df[\'prefix_2\'].equals(self.training_df_old[\'prefix_2\']))\n        self.assertFalse(train_df[\'prefix_3\'].equals(self.training_df_old[\'prefix_3\']))\n        self.assertFalse(train_df.drop([\'prefix_1\'], 1).equals(self.training_df_old.drop([\'prefix_1\'], 1)))\n        self.assertFalse(train_df.drop([\'prefix_2\'], 1).equals(self.training_df_old.drop([\'prefix_2\'], 1)))\n        self.assertFalse(train_df.drop([\'prefix_3\'], 1).equals(self.training_df_old.drop([\'prefix_3\'], 1)))\n        self.assertFalse(test_df.equals(self.test_df_old))\n        self.assertTrue(test_df[\'prefix_1\'].equals(self.test_df_old[\'prefix_1\']))\n        # self.assertFalse(test_df[\'prefix_2\'].equals(self.test_df_old[\'prefix_2\']))\n        # self.assertFalse(test_df[\'prefix_3\'].equals(self.test_df_old[\'prefix_3\']))\n        self.assertFalse(test_df.drop([\'prefix_1\'], 1).equals(self.test_df_old.drop([\'prefix_1\'], 1)))\n        self.assertFalse(test_df.drop([\'prefix_2\'], 1).equals(self.test_df_old.drop([\'prefix_2\'], 1)))\n        self.assertFalse(test_df.drop([\'prefix_3\'], 1).equals(self.test_df_old.drop([\'prefix_3\'], 1)))\n\n    def test_save_randomised_set(self):\n        initial_split_obj = self.job.split\n        new_split = save_randomised_set(initial_split_obj)\n        self.assertNotEqual(initial_split_obj.train_log.name, new_split.train_log.name)\n        self.assertNotEqual(initial_split_obj.test_log.name, new_split.test_log.name)\n        # TODO\n\n    def test_explain(self):\n        initial_result = {\n            \'f1_score\': 0.7777777777777777,\n            \'accuracy\': 0.75,\n            \'precision\': 0.8333333333333334,\n            \'recall\': 0.8333333333333334\n        }\n        explanation_target = [[[\'prefix_1\', 1], [\'prefix_2\', 1], [\'prefix_3\', 1], [\'prefix_4\', 1]]]\n        explanation = explain(self.exp, self.training_df_old, self.test_df_old, explanation_target)\n        self.assertTrue(any([initial_result[key] != explanation[\'Retrain result\'][key] for key in initial_result]))\n'"
src/explanation/tests/test_shap_wrapper.py,0,"b'from django.test import TestCase\n\nfrom src.core.core import get_encoded_logs\nfrom src.encoding.models import ValueEncodings\nfrom src.explanation.models import Explanation, ExplanationTypes\nfrom src.explanation.shap_wrapper import explain\nfrom src.jobs.models import JobTypes\nfrom src.jobs.tasks import prediction_task\nfrom src.labelling.models import LabelTypes\nfrom src.predictive_model.classification.models import ClassificationMethods\nfrom src.predictive_model.models import PredictiveModels\nfrom src.split.models import SplitTypes, SplitOrderingMethods\nfrom src.utils.tests_utils import create_test_log, create_test_predictive_model, create_test_split, create_test_job, \\\n    create_test_encoding, create_test_labelling\n\n\nclass TestSHAPWrapper(TestCase):\n    """"""Proof of concept tests""""""\n\n    def test_explain(self):\n        split = create_test_split(\n            split_type=SplitTypes.SPLIT_DOUBLE.value,\n            split_ordering_method=SplitOrderingMethods.SPLIT_SEQUENTIAL.value,\n            test_size=0.2,\n            original_log=None,\n            train_log=create_test_log(\n                log_name=\'train_explainability.xes\',\n                log_path=\'cache/log_cache/test_logs/train_explainability.xes\'\n            ),\n            test_log=create_test_log(\n                log_name=\'test_explainability.xes\',\n                log_path=\'cache/log_cache/test_logs/test_explainability.xes\'\n            )\n        )\n\n        predictive_model = create_test_predictive_model(\n            predictive_model=PredictiveModels.CLASSIFICATION.value,\n            prediction_method=ClassificationMethods.DECISION_TREE.value\n        )\n\n        job = create_test_job(\n            split=split,\n            encoding=create_test_encoding(\n                prefix_length=4,\n                padding=True,\n                value_encoding=ValueEncodings.SIMPLE_INDEX.value\n            ),\n            labelling=create_test_labelling(label_type=LabelTypes.ATTRIBUTE_STRING.value, attribute_name=\'label\'),\n            clustering=None,\n            create_models=True,\n            predictive_model=predictive_model,\n            job_type=JobTypes.PREDICTION.value,\n            hyperparameter_optimizer=None,\n            incremental_train=None\n        )\n\n        prediction_task(job.id, do_publish_result=False)\n        job.refresh_from_db()\n\n        exp = Explanation.objects.get_or_create(\n            type=ExplanationTypes.SHAP.value,\n            split=split,\n            predictive_model=predictive_model,\n            job=job,\n            results={}\n        )[0]\n        training_df_old, test_df_old = get_encoded_logs(job)\n\n        explanation_target = \'2_101\'\n\n        explanation = explain(exp, training_df_old, test_df_old, explanation_target)\n\n        self.assertTrue(type(explanation) is str)\n'"
src/explanation/tests/test_skater_wrapper.py,0,"b'from django.test import TestCase\n\nfrom src.core.core import get_encoded_logs\nfrom src.encoding.models import ValueEncodings\nfrom src.explanation.models import Explanation, ExplanationTypes\nfrom src.explanation.skater_wrapper import explain\nfrom src.jobs.models import JobTypes\nfrom src.jobs.tasks import prediction_task\nfrom src.labelling.models import LabelTypes\nfrom src.predictive_model.classification.models import ClassificationMethods\nfrom src.predictive_model.models import PredictiveModels\nfrom src.split.models import SplitTypes, SplitOrderingMethods\nfrom src.utils.tests_utils import create_test_split, create_test_log, create_test_predictive_model, create_test_job, \\\n    create_test_encoding, create_test_labelling\n\n\nclass TestSkaterWrapper(TestCase):\n    """"""Proof of concept tests""""""\n\n    def test_explain(self):\n        split = create_test_split(\n            split_type=SplitTypes.SPLIT_DOUBLE.value,\n            split_ordering_method=SplitOrderingMethods.SPLIT_SEQUENTIAL.value,\n            test_size=0.2,\n            original_log=None,\n            train_log=create_test_log(\n                log_name=\'train_explainability.xes\',\n                log_path=\'cache/log_cache/test_logs/train_explainability.xes\'\n            ),\n            test_log=create_test_log(\n                log_name=\'test_explainability.xes\',\n                log_path=\'cache/log_cache/test_logs/test_explainability.xes\'\n            )\n        )\n\n        predictive_model = create_test_predictive_model(\n            predictive_model=PredictiveModels.CLASSIFICATION.value,\n            prediction_method=ClassificationMethods.DECISION_TREE.value\n        )\n\n        job = create_test_job(\n            split=split,\n            encoding=create_test_encoding(\n                prefix_length=4,\n                padding=True,\n                value_encoding=ValueEncodings.SIMPLE_INDEX.value\n            ),\n            labelling=create_test_labelling(label_type=LabelTypes.ATTRIBUTE_STRING.value, attribute_name=\'label\'),\n            clustering=None,\n            create_models=True,\n            predictive_model=predictive_model,\n            job_type=JobTypes.PREDICTION.value,\n            hyperparameter_optimizer=None,\n            incremental_train=None\n        )\n\n        prediction_task(job.id, do_publish_result=False)\n        job.refresh_from_db()\n\n        exp = Explanation.objects.get_or_create(\n            type=ExplanationTypes.SKATER.value,\n            split=split,\n            predictive_model=predictive_model,\n            job=job,\n            results={}\n        )[0]\n        training_df_old, test_df_old = get_encoded_logs(job)\n\n        explanation = explain(exp, training_df_old, test_df_old, None)\n\n        self.assertTrue(type(explanation) is str)  # todo: just syntactic check\n'"
src/hyperparameter_optimization/migrations/__init__.py,0,b''
src/hyperparameter_optimization/tests/__init__.py,0,b''
src/hyperparameter_optimization/tests/test_hyperopt.py,0,"b'""""""\nhyperopt tests\n""""""\n\nfrom django.test import TestCase\n\nfrom src.hyperparameter_optimization.hyperopt_wrapper import calculate_hyperopt\nfrom src.hyperparameter_optimization.models import HyperOptLosses\nfrom src.labelling.models import LabelTypes, ThresholdTypes\nfrom src.predictive_model.classification.models import ClassificationMethods\nfrom src.predictive_model.models import PredictiveModels\nfrom src.predictive_model.regression.models import RegressionMethods\nfrom src.utils.tests_utils import create_test_predictive_model, create_test_job, create_test_hyperparameter_optimizer, \\\n    create_test_encoding, create_test_labelling\n\n\nclass TestHyperopt(TestCase):\n    """"""Proof of concept tests""""""\n\n    @staticmethod\n    def get_classification_job(predictive_model: str, prediction_method: str, metric: HyperOptLosses = HyperOptLosses.ACC.value):\n        encoding = create_test_encoding(prefix_length=8, padding=True)\n        pred_model = create_test_predictive_model(predictive_model=predictive_model,\n                                                  prediction_method=prediction_method)\n        hyperparameter_optimizer = create_test_hyperparameter_optimizer(performance_metric=metric)\n\n        job = create_test_job(predictive_model=pred_model,\n                              encoding=encoding,\n                              hyperparameter_optimizer=hyperparameter_optimizer)\n        return job\n\n    @staticmethod\n    def get_regression_job(predictive_model: str, prediction_method: str,\n                           metric: HyperOptLosses = HyperOptLosses.ACC.value):\n        encoding = create_test_encoding(prefix_length=8, padding=True)\n        pred_model = create_test_predictive_model(predictive_model=predictive_model,\n                                                  prediction_method=prediction_method)\n        hyperparameter_optimizer = create_test_hyperparameter_optimizer(performance_metric=metric)\n\n        job = create_test_job(predictive_model=pred_model,\n                              encoding=encoding,\n                              labelling=create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value,\n                                                              threshold_type=ThresholdTypes.NONE.value),\n                              hyperparameter_optimizer=hyperparameter_optimizer)\n        return job\n\n    def test_class_randomForest(self):\n        job = self.get_classification_job(PredictiveModels.CLASSIFICATION.value, ClassificationMethods.RANDOM_FOREST.value)\n        results, _, _ = calculate_hyperopt(job)\n        self.assertIsNotNone(results)\n\n    # def test_class_knn(self):\n    #     job = self.get_job(PredictiveModels.CLASSIFICATION.value, ClassificationMethods.KNN.value)\n    #\n    #     results, _ = calculate_hyperopt(job)\n    #     self.assertIsNotNone(results)\n\n    def test_class_xgboost(self):\n        job = self.get_classification_job(PredictiveModels.CLASSIFICATION.value, ClassificationMethods.XGBOOST.value)\n\n        results, _, _ = calculate_hyperopt(job)\n        self.assertIsNotNone(results)\n\n    def test_class_decision_tree(self):\n        job = self.get_classification_job(PredictiveModels.CLASSIFICATION.value, ClassificationMethods.DECISION_TREE.value)\n\n        results, _, _ = calculate_hyperopt(job)\n        self.assertIsNotNone(results)\n\n    def test_regression_random_forest(self):\n        job = self.get_regression_job(PredictiveModels.REGRESSION.value, RegressionMethods.RANDOM_FOREST.value,\n                                          HyperOptLosses.RMSE.value)\n\n        results, _, _ = calculate_hyperopt(job)\n        self.assertIsNotNone(results)\n\n    def test_regression_linear(self):\n        job = self.get_regression_job(PredictiveModels.REGRESSION.value, RegressionMethods.LINEAR.value,\n                                          HyperOptLosses.RMSE.value)\n\n        results, _, _ = calculate_hyperopt(job)\n        self.assertIsNotNone(results)\n\n    def test_regression_lasso(self):\n        job = self.get_regression_job(PredictiveModels.REGRESSION.value, RegressionMethods.LASSO.value,\n                                          HyperOptLosses.RMSE.value)\n\n        results, _, _ = calculate_hyperopt(job)\n        self.assertIsNotNone(results)\n\n    def test_regression_xgboost(self):\n        job = self.get_regression_job(PredictiveModels.REGRESSION.value, RegressionMethods.XGBOOST.value,\n                                          HyperOptLosses.RMSE.value)\n\n        results, _, _ = calculate_hyperopt(job)\n        self.assertIsNotNone(results)\n'"
src/jobs/management/__init__.py,0,b''
src/jobs/migrations/__init__.py,0,b''
src/jobs/tests/__init__.py,0,b''
src/jobs/tests/test_job_creator.py,0,"b""from django.test.testcases import TestCase\n\nfrom src.jobs.job_creator import generate, generate_labelling, update\nfrom src.jobs.models import JobTypes\nfrom src.jobs.tasks import prediction_task\nfrom src.utils.django_orm import duplicate_orm_row\nfrom src.utils.tests_utils import create_test_job\n\n\nclass TestJobCreator(TestCase):\n    def test_generate(self):\n        job = create_test_job()\n\n        initial_job = job.to_dict()\n        del initial_job['id']\n        del initial_job['created_date']\n        del initial_job['modified_date']\n        del initial_job['hyperparameter_optimizer']\n        del initial_job['encoding']['features']\n        del initial_job['labelling']['attribute_name']\n\n        generated_job = generate(split=job.split, payload={\n            'type': 'classification',\n            'split_id': 1,\n            'config': {\n                'clusterings': ['noCluster'],\n                'encodings': ['simpleIndex'],\n                'encoding': {\n                    'padding': False,\n                    'prefix_length': 1,\n                    'generation_type': 'only',\n                    'add_remaining_time': False,\n                    'add_elapsed_time': False,\n                    'add_executed_events': False,\n                    'add_resources_used': False,\n                    'add_new_traces': False,\n                    'features': [],\n                },\n                'create_models': False,\n                'methods': ['randomForest'],\n                'kmeans': {},\n                'incremental_train': {\n                    'base_model': None,\n                },\n                'hyperparameter_optimizer': {\n                    'algorithm_type': 'tpe',\n                    'max_evaluations': 10,\n                    'performance_metric': 'rmse',\n                    'type': 'none',\n                },\n                'labelling': {\n                    'type': 'next_activity',\n                    'attribute_name': '',\n                    'threshold_type': 'threshold_mean',\n                    'threshold': 0,\n                },\n                'classification.decisionTree': {},\n                'classification.knn': {},\n                'classification.randomForest': {},\n                'classification.adaptiveTree': {},\n                'classification.hoeffdingTree': {},\n                'classification.multinomialNB': {},\n                'classification.perceptron': {},\n                'classification.SGDClassifier': {},\n                'classification.xgboost': {},\n                'classification.nn': {},\n                'regression.lasso': {},\n                'regression.linear': {},\n                'regression.randomForest': {},\n                'regression.xgboost': {},\n                'regression.nn': {},\n                'time_series_prediction.rnn': {}\n            }\n        })[0].to_dict()\n        del generated_job['id']\n        del generated_job['created_date']\n        del generated_job['modified_date']\n        del generated_job['hyperparameter_optimizer']\n        del generated_job['encoding']['features']\n        del generated_job['labelling']['attribute_name']\n\n        self.assertDictEqual(initial_job, generated_job)\n\n    def test_generate_up_to(self):\n        job = create_test_job()\n\n        initial_job = job.to_dict()\n        del initial_job['id']\n        del initial_job['created_date']\n        del initial_job['modified_date']\n        del initial_job['hyperparameter_optimizer']\n        del initial_job['encoding']['features']\n        del initial_job['encoding']['task_generation_type']\n        del initial_job['labelling']['attribute_name']\n\n        generated_job = generate(split=job.split, payload={\n            'type': 'classification',\n            'split_id': 1,\n            'config': {\n                'clusterings': ['noCluster'],\n                'encodings': ['simpleIndex'],\n                'encoding': {\n                    'padding': False,\n                    'prefix_length': 2,\n                    'generation_type': 'up_to',\n                    'add_remaining_time': False,\n                    'add_elapsed_time': False,\n                    'add_executed_events': False,\n                    'add_resources_used': False,\n                    'add_new_traces': False,\n                    'features': [],\n                },\n                'create_models': False,\n                'methods': ['randomForest'],\n                'kmeans': {},\n                'incremental_train': {\n                    'base_model': None,\n                },\n                'hyperparameter_optimizer': {\n                    'algorithm_type': 'tpe',\n                    'max_evaluations': 10,\n                    'performance_metric': 'rmse',\n                    'type': 'none',\n                },\n                'labelling': {\n                    'type': 'next_activity',\n                    'attribute_name': '',\n                    'threshold_type': 'threshold_mean',\n                    'threshold': 0,\n                },\n                'classification.decisionTree': {},\n                'classification.knn': {},\n                'classification.randomForest': {},\n                'classification.adaptiveTree': {},\n                'classification.hoeffdingTree': {},\n                'classification.multinomialNB': {},\n                'classification.perceptron': {},\n                'classification.SGDClassifier': {},\n                'classification.xgboost': {},\n                'classification.nn': {},\n                'regression.lasso': {},\n                'regression.linear': {},\n                'regression.randomForest': {},\n                'regression.xgboost': {},\n                'regression.nn': {},\n                'time_series_prediction.rnn': {}\n            }\n        })[0].to_dict()\n        del generated_job['id']\n        del generated_job['created_date']\n        del generated_job['modified_date']\n        del generated_job['hyperparameter_optimizer']\n        del generated_job['encoding']['features']\n        del generated_job['encoding']['task_generation_type']\n        del generated_job['labelling']['attribute_name']\n\n        self.assertDictEqual(initial_job, generated_job)\n\n    def test_generate_labelling(self):\n        job = create_test_job()\n        job.type = JobTypes.LABELLING.value\n        job.save()\n\n        generated_job = generate_labelling(split=job.split, payload={\n            'type': 'labelling',\n            'split_id': 1,\n            'config': {\n                'encodings': ['simpleIndex'],\n                'encoding': {\n                    'padding': False,\n                    'prefix_length': 1,\n                    'generation_type': 'only',\n                    'add_remaining_time': False,\n                    'add_elapsed_time': False,\n                    'add_executed_events': False,\n                    'add_resources_used': False,\n                    'add_new_traces': False,\n                    'features': [],\n                },\n                'create_models': False,\n                'labelling': {\n                    'type': 'next_activity',\n                    'attribute_name': '',\n                    'threshold_type': 'threshold_mean',\n                    'threshold': 0,\n                }\n            }\n        })[0]\n\n        self.assertEqual(job.type, generated_job.type)\n        self.assertEqual(job.split, generated_job.split)\n\n        job.encoding.features = None\n        generated_job.encoding.features = None\n        self.assertDictEqual(job.encoding.to_dict(), generated_job.encoding.to_dict())\n\n        job.labelling.attribute_name = None\n        generated_job.labelling.attribute_name = None\n        self.assertDictEqual(job.labelling.to_dict(), generated_job.labelling.to_dict())\n\n    def test_generate_labelling_up_to(self):\n        job = create_test_job()\n        job.type = JobTypes.LABELLING.value\n        job.save()\n\n        generated_job = generate_labelling(split=job.split, payload={\n            'type': 'labelling',\n            'split_id': 1,\n            'config': {\n                'encodings': ['simpleIndex'],\n                'encoding': {\n                    'padding': False,\n                    'prefix_length': 2,\n                    'generation_type': 'up_to',\n                    'add_remaining_time': False,\n                    'add_elapsed_time': False,\n                    'add_executed_events': False,\n                    'add_resources_used': False,\n                    'add_new_traces': False,\n                    'features': [],\n                },\n                'create_models': False,\n                'labelling': {\n                    'type': 'next_activity',\n                    'attribute_name': '',\n                    'threshold_type': 'threshold_mean',\n                    'threshold': 0,\n                }\n            }\n        })[0]\n\n        self.assertEqual(job.type, generated_job.type)\n        self.assertEqual(job.split, generated_job.split)\n\n        job.encoding.features = None\n        job.encoding.task_generation_type = None\n        generated_job.encoding.features = None\n        generated_job.encoding.task_generation_type = None\n        self.assertDictEqual(job.encoding.to_dict(), generated_job.encoding.to_dict())\n\n        job.labelling.attribute_name = None\n        generated_job.labelling.attribute_name = None\n        self.assertDictEqual(job.labelling.to_dict(), generated_job.labelling.to_dict())\n\n    def test_update(self):\n        job = create_test_job()\n        prediction_task(job.id)\n\n        job2 = duplicate_orm_row(job)\n        job.refresh_from_db()\n        job2.incremental_train = job\n        job2.type = JobTypes.UPDATE.value\n        job2.save()\n\n        initial_job = job2#.to_dict()\n\n        generated_job = update(split=job.split, payload={\n            'type': 'classification',\n            'split_id': 1,\n            'config': {\n                'clusterings': ['noCluster'],\n                'encodings': ['simpleIndex'],\n                'encoding': {\n                    'padding': False,\n                    'prefix_length': 1,\n                    'generation_type': 'only',\n                    'add_remaining_time': False,\n                    'add_elapsed_time': False,\n                    'add_executed_events': False,\n                    'add_resources_used': False,\n                    'add_new_traces': False,\n                    'features': [],\n                },\n                'create_models': False,\n                'methods': ['randomForest'],\n                'kmeans': {},\n                'incremental_train': [job.id],\n                'hyperparameter_optimizer': {\n                    'algorithm_type': 'tpe',\n                    'max_evaluations': 10,\n                    'performance_metric': 'rmse',\n                    'type': 'none',\n                },\n                'labelling': {\n                    'type': 'next_activity',\n                    'attribute_name': '',\n                    'threshold_type': 'threshold_mean',\n                    'threshold': 0,\n                }\n            }\n        })[0]#.to_dict()\n\n        #TODO: probably missing to_dict for incremental model\n        # self.assertEqual(initial_job, generated_job)\n"""
src/jobs/tests/test_jobs.py,0,"b""import unittest\n\nfrom django.test import TestCase\nfrom django_rq.queues import get_queue\nfrom rest_framework import status\nfrom rest_framework.test import APITestCase, APIClient\n\nfrom src.clustering.models import ClusteringMethods\nfrom src.encoding.models import ValueEncodings\nfrom src.hyperparameter_optimization.models import HyperOptLosses, HyperparameterOptimizationMethods\nfrom src.jobs.models import Job, JobStatuses, JobTypes\nfrom src.jobs.tasks import prediction_task\nfrom src.labelling.models import ThresholdTypes, LabelTypes\nfrom src.predictive_model.classification.methods_default_config import classification_random_forest\nfrom src.predictive_model.classification.models import ClassificationMethods\nfrom src.predictive_model.models import PredictiveModels\nfrom src.predictive_model.regression.models import RegressionMethods\nfrom src.split.models import SplitTypes\nfrom src.utils.tests_utils import general_example_filepath, create_test_job, create_test_log, general_example_filename, \\\n    create_test_split, create_test_predictive_model, create_test_hyperparameter_optimizer, create_test_clustering, \\\n    create_test_encoding, create_test_labelling\n\n\nclass JobModelTest(TestCase):\n    def setUp(self):\n        create_test_job()\n        create_test_job(job_type='asdf')\n        Job.objects.create(type=JobTypes.PREDICTION.value, split=create_test_split(), encoding=None, labelling=None)\n\n    def test_default(self):\n        job = create_test_job()\n\n        self.assertEqual('created', job.status)\n        self.assertIsNotNone(job.created_date)\n        self.assertIsNotNone(job.modified_date)\n        self.assertIsNone(job.evaluation)\n\n    def test_modified(self):\n        job = create_test_job()\n        job.status = JobStatuses.COMPLETED.value\n\n        self.assertNotEquals(job.created_date, job.modified_date)\n\n    def test_to_dict(self):\n        job = create_test_job().to_dict()\n\n        self.assertEquals(JobTypes.PREDICTION.value, job['type'])\n        self.assertEquals(PredictiveModels.CLASSIFICATION.value, job['predictive_model']['predictive_model'])\n        del job['split']['id']\n        self.assertDictEqual({'type': 'single',\n                              'original_log_path': general_example_filepath,\n                              'splitting_method': 'sequential',\n                              'test_size': 0.2},\n                             job['split'])\n        self.assertEquals(job['labelling'], {\n            'attribute_name': None,\n            'threshold': 0,\n            'threshold_type': 'threshold_mean',\n            'type': 'next_activity', 'results': {}\n        })\n\n    def test_prediction_task(self):\n        job = create_test_job()\n        prediction_task(job.id)\n\n        job.refresh_from_db()\n        self.assertEqual('completed', job.status)\n        self.assertNotEqual({}, job.evaluation)\n\n    @unittest.skip('needs refactoring')\n    def test_create_models_config_missing(self):\n        job = create_test_job()\n        del job.create_models  # TODO fixme should we add this field?\n        job.save()\n        prediction_task(job.id)\n\n        job.refresh_from_db()\n        self.assertEqual('completed', job.status)\n        self.assertNotEqual({}, job.evaluation)\n\n\nclass Hyperopt(TestCase):\n    def test_hyperopt(self):\n        job = Job.objects.create(\n            split=create_test_split(\n                split_type=SplitTypes.SPLIT_SINGLE.value,\n                original_log=create_test_log(log_name=general_example_filename, log_path=general_example_filepath)\n            ),\n            encoding=create_test_encoding(\n                value_encoding=ValueEncodings.SIMPLE_INDEX.value,\n                prefix_length=3,\n                padding=False\n            ),\n            labelling=create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value),\n            clustering=create_test_clustering(\n                clustering_type=ClusteringMethods.KMEANS.value\n            ),\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value,\n                prediction_method=ClassificationMethods.RANDOM_FOREST.value\n            ),\n            hyperparameter_optimizer=create_test_hyperparameter_optimizer(\n                hyperoptim_type=HyperparameterOptimizationMethods.HYPEROPT.value,\n                performance_metric=HyperOptLosses.ACC.value,\n                max_evals=2\n            )\n        )\n        prediction_task(job.pk)\n        self.assertFalse(classification_random_forest() ==\n                         job.predictive_model.classification\n                         .__getattribute__(ClassificationMethods.RANDOM_FOREST.value.lower()).to_dict())\n\n\nclass CreateJobsTests(APITestCase):\n    def setUp(self):\n        log = create_test_log(log_name=general_example_filepath, log_path=general_example_filepath)\n        create_test_split(split_type=SplitTypes.SPLIT_SINGLE.value, original_log=log)\n\n    def tearDown(self):\n        get_queue().empty()\n\n    @staticmethod\n    def job_obj(split_id):\n        return {\n            'type': 'classification',\n            'split_id': 1,\n            'config': {\n                'clusterings': ['noCluster'],\n                'encodings': ['simpleIndex'],\n                'encoding': {\n                    'padding': True,\n                    'prefix_length': split_id,\n                    'generation_type': 'only',\n                    'add_remaining_time': False,\n                    'add_elapsed_time': False,\n                    'add_executed_events': False,\n                    'add_resources_used': False,\n                    'add_new_traces': False,\n                    'features': [],\n                },\n                'create_models': False,\n                'methods': ['knn'],\n                'kmeans': {},\n                'incremental_train': {\n                    'base_model': None,\n                },\n                'hyperparameter_optimizer': {\n                    'algorithm_type': 'tpe',\n                    'max_evaluations': 10,\n                    'performance_metric': 'rmse',\n                    'type': 'none',\n                },\n                'labelling': {\n                    'type': 'remaining_time',\n                    'attribute_name': '',\n                    'threshold_type': 'threshold_mean',\n                    'threshold': 0,\n                },\n                'classification.decisionTree': {},\n                'classification.knn': {},\n                'classification.randomForest': {},\n                'classification.adaptiveTree': {},\n                'classification.hoeffdingTree': {},\n                'classification.multinomialNB': {},\n                'classification.perceptron': {},\n                'classification.SGDClassifier': {},\n                'classification.xgboost': {},\n                'classification.nn': {},\n                'regression.lasso': {},\n                'regression.linear': {},\n                'regression.randomForest': {},\n                'regression.xgboost': {},\n                'regression.nn': {},\n                'time_series_prediction.rnn': {}\n            }\n        }\n\n    @unittest.skip('needs refactoring')\n    def test_class_job_creation(self):\n        client = APIClient()\n        response = client.post('/jobs/multiple', self.job_obj(create_test_split(original_log=create_test_log()).id), format='json')\n\n        self.assertEqual(status.HTTP_201_CREATED, response.status_code)\n        self.assertEqual(len(response.data), 1)\n        self.assertEqual(response.data[0]['type'], 'prediction')\n        self.assertEqual(response.data[0]['config']['predictive_model']['predictive_model'], 'classification')\n        self.assertDictEqual(response.data[0]['config']['encoding'], {\n            'prefix_length': 1,\n            'task_generation_type': 'only',\n            'value_encoding': 'simpleIndex',\n            'add_elapsed_time': False,\n            'add_executed_events': False,\n            'add_new_traces': False,\n            'add_remaining_time': False,\n            'add_resources_used': False,\n            'data_encoding': 'label_encoder',\n            'features': [],\n            'padding': False,\n        })\n        self.assertEqual(response.data[0]['config']['clustering'], {\n            'clustering_method': ClusteringMethods.NO_CLUSTER.value\n        })\n        self.assertEqual(response.data[0]['config']['predictive_model']['prediction_method'],\n                         ClassificationMethods.KNN.value)\n        self.assertFalse('kmeans' in response.data[0]['config'])\n        self.assertDictEqual(response.data[0]['config']['labelling'],\n                             {'type': 'remaining_time', 'attribute_name': '',\n                              'threshold_type': ThresholdTypes.THRESHOLD_MEAN.value,\n                              'threshold': 0, 'results': {}})\n        self.assertEqual(response.data[0]['status'], 'created')\n\n    @staticmethod\n    def job_obj2(split_id):\n        return {\n            'type': 'regression',\n            'split_id': split_id,\n            'config': {\n                'clusterings': ['noCluster'],\n                'encodings': ['simpleIndex'],\n                'encoding': {\n                    'padding': False,\n                    'prefix_length': 2,\n                    'generation_type': 'only',\n                    'add_remaining_time': False,\n                    'add_elapsed_time': False,\n                    'add_executed_events': False,\n                    'add_resources_used': False,\n                    'add_new_traces': False,\n                    'features': [],\n                },\n                'create_models': False,\n                'methods': ['linear'],\n                'kmeans': {},\n                'incremental_train': [],\n                'hyperparameter_optimizer': {\n                    'algorithm_type': 'tpe',\n                    'max_evaluations': 10,\n                    'performance_metric': 'rmse',\n                    'type': 'none',\n                },\n                'labelling': {\n                    'type': 'remaining_time',\n                    'attribute_name': '',\n                    'threshold_type': 'threshold_mean',\n                    'threshold': 0,\n                },\n                'classification.decisionTree': {},\n                'classification.knn': {},\n                'classification.randomForest': {},\n                'classification.adaptiveTree': {},\n                'classification.hoeffdingTree': {},\n                'classification.multinomialNB': {},\n                'classification.perceptron': {},\n                'classification.SGDClassifier': {},\n                'classification.xgboost': {},\n                'classification.nn': {},\n                'regression.lasso': {},\n                'regression.linear': {},\n                'regression.randomForest': {},\n                'regression.xgboost': {},\n                'regression.nn': {},\n                'time_series_prediction.rnn': {}\n            }\n        }\n\n    def test_reg_job_creation(self):\n\n        client = APIClient()\n        response = client.post('/jobs/multiple', self.job_obj2(create_test_split(original_log=create_test_log()).id), format='json')\n\n        self.assertEqual(status.HTTP_201_CREATED, response.status_code)\n        self.assertEqual(1, len(response.data))\n        self.assertEqual(response.data[0]['type'], 'prediction')\n        self.assertEqual(response.data[0]['config']['predictive_model']['predictive_model'], 'regression')\n        self.assertEqual(ValueEncodings.SIMPLE_INDEX.value, response.data[0]['config']['encoding']['value_encoding'])\n        self.assertEqual(ClusteringMethods.NO_CLUSTER.value, response.data[0]['config']['clustering']['clustering_method'])\n        self.assertEqual(RegressionMethods.LINEAR.value,\n                         response.data[0]['config']['predictive_model']['prediction_method'])\n        self.assertEqual(2, response.data[0]['config']['encoding']['prefix_length'])\n        self.assertEqual(False, response.data[0]['config']['encoding']['padding'])\n        self.assertEqual(JobStatuses.CREATED.value, response.data[0]['status'])\n\n    @staticmethod\n    def job_label(split_id):\n        return{\n            'type': 'labelling',\n            'split_id': split_id,\n            'config': {\n                'labelling': {\n                    'type': 'remaining_time',\n                    'attribute_name': None,\n                    'threshold_type': ThresholdTypes.THRESHOLD_MEAN.value,\n                    'threshold': 0,\n                    'add_remaining_time': False,\n                    'add_elapsed_time': False\n                },\n                'encoding': {\n                    'prefix_length': 3,\n                    'generation_type': 'only',\n                    'padding': 'zero_padding'\n                }\n            }\n        }\n\n    def test_labelling_job_creation(self):\n        client = APIClient()\n        response = client.post('/jobs/multiple', self.job_label(create_test_split(original_log=create_test_log()).id), format='json')\n        self.assertEqual(status.HTTP_201_CREATED, response.status_code)\n        self.assertEqual(len(response.data), 1)\n        self.assertEqual(response.data[0]['type'], 'labelling')\n        self.assertEqual(response.data[0]['config']['encoding']['value_encoding'], 'simpleIndex')\n        self.assertEqual(response.data[0]['config']['encoding']['prefix_length'], 3)\n        self.assertEqual(response.data[0]['config']['labelling'],\n                         {'type': 'remaining_time', 'attribute_name': None,\n                          'threshold_type': ThresholdTypes.THRESHOLD_MEAN.value,\n                          'threshold': 0, 'results': {}})\n        self.assertEqual(response.data[0]['config']['encoding']['padding'], True)\n        self.assertEqual(response.data[0]['status'], 'created')\n\n\nclass MethodConfiguration(TestCase):\n\n    @staticmethod\n    def job_obj():\n        return {\n            'type': 'regression',\n            'split_id': 1,\n            'config': {\n                'encodings': ['simpleIndex'],\n                'clusterings': ['noClustering'],\n                'methods': ['randomForest'],\n                'regression.:randomForest': {'n_estimators': 15},\n                'regression.:lasso': {'n_estimators': 15},\n                'encoding': {\n                    'prefix_length': 3,\n                    'generation_type': 'up_to',\n                    'padding': 'no_padding'\n                },\n                'hyperparameter_optimizer': {}\n            }\n        }\n\n    # def test_regression_random_forest(self):\n    #     job = self.job_obj()\n    #\n    #     config = create_config(job, 'simpleIndex', 'noCluster', 'randomForest', 3)\n    #\n    #     self.assertEquals(False, 'regression.lasso' in config)\n    #     self.assertDictEqual(config['regression.randomForest'], {\n    #         'n_estimators': 15,\n    #         'max_features': 'auto',\n    #         'max_depth': None,\n    #         'n_jobs': -1,\n    #         'random_state': 21\n    #     })\n\n    # def test_adds_conf_if_missing(self):\n    #     job = self.job_obj()\n    #     del job['config']['regression.randomForest']\n    #\n    #     config = create_config(job, 'simpleIndex', 'noCluster', 'randomForest', 3)\n    #\n    #     self.assertEquals(False, 'regression.lasso' in config)\n    #     self.assertDictEqual(config['regression.randomForest'], {\n    #         'n_estimators': 10,\n    #         'max_features': 'auto',\n    #         'max_depth': None,\n    #         'n_jobs': -1,\n    #         'random_state': 21\n    #     })\n"""
src/jobs/tests/test_views.py,0,"b""import unittest\n\nfrom rest_framework.test import APITestCase, APIClient\n\nfrom src.jobs.models import Job\nfrom src.utils.tests_utils import create_test_split, create_test_log\n\n\nclass TestViews(APITestCase):\n    def test_get_jobs(self):\n        jobs = Job.objects.all()\n        client = APIClient()\n        response = client.get('/jobs/')\n        self.assertEqual(len(jobs), len(response.data))\n        client.post('/jobs/')\n        jobs = Job.objects.all()\n        response = client.get('/jobs/')\n        self.assertEqual(len(jobs), len(response.data))\n\n    def test_get_jobs_filtered_type(self):\n        jobs = Job.objects.all()\n        client = APIClient()\n        response = client.get('/jobs/', {'type': 'prediction'})\n        self.assertIsNotNone(response.data)\n\n    def test_get_jobs_filtered_status(self):\n        jobs = Job.objects.all()\n        client = APIClient()\n        response = client.get('/jobs/', {'status': 'created'})\n        self.assertIsNotNone(response.data)\n\n    def test_delete(self):\n        client = APIClient()\n        response = client.post('/jobs/', {}, format='json')\n        db_id = Job.objects.all()[0].id\n        self.assertEqual(db_id, dict(response.data)['id'])\n\n        response = client.post('/jobs/', {'id': 1}, format='json')\n        self.assertNotEqual(db_id, dict(response.data)['id'])\n\n    @unittest.skip('needs refactoring')\n    def test_create_multiple(self):\n        create_test_split(original_log=create_test_log())\n\n        client = APIClient()\n        response = client.post('/jobs/multiple', {\n            'type': 'classification',\n            'split_id': 1,\n            'config': {\n                'clusterings': ['noCluster'],\n                'encodings': ['simpleIndex'],\n                'encoding': {\n                    'padding': False,\n                    'prefix_length': 1,\n                    'generation_type': 'only',\n                    'add_remaining_time': False,\n                    'add_elapsed_time': False,\n                    'add_executed_events': False,\n                    'add_resources_used': False,\n                    'add_new_traces': False,\n                    'features': [],\n                },\n                'create_models': False,\n                'methods': ['randomForest', 'decisionTree', 'rnn'],\n                'kmeans': {},\n                'incremental_train': {\n                    'base_model': None,\n                },\n                'hyperparameter_optimizer': {\n                    'algorithm_type': 'tpe',\n                    'max_evaluations': 10,\n                    'performance_metric': 'rmse',\n                    'type': 'none',\n                },\n                'labelling': {\n                    'type': 'next_activity',\n                    'attribute_name': '',\n                    'threshold_type': 'threshold_mean',\n                    'threshold': 0,\n                }\n            }}, format='json')\n\n        self.assertEqual(3, len(response.data))\n\n    def test_decode_df(self):\n        jobs = Job.objects.all()\n        if (len(jobs) > 0):\n            job = jobs.first()\n            client = APIClient()\n            response = client.get('/jobs/'+job.id)\n            self.assertIsNotNone(response.data)\n"""
src/labelling/migrations/__init__.py,0,b''
src/logs/migrations/__init__.py,0,b''
src/logs/tests/__init__.py,0,b''
src/logs/tests/test_models.py,0,"b'import contextlib\nfrom os import remove\nfrom shutil import copyfile\n\nfrom django.test import TestCase\nfrom rest_framework import status\nfrom rest_framework.test import APITestCase, APIClient\n\nfrom src.logs.models import Log\nfrom src.split.models import Split\nfrom src.utils.file_service import get_log\nfrom src.utils.tests_utils import general_example_filepath, general_example_test_filepath\n\n\nclass LogModelTest(TestCase):\n    def setUp(self):\n        Log.objects.create(name=""general_example.xes"", path=general_example_filepath)\n\n    def test_can_find_log_file(self):\n        log = Log.objects.get(name=""general_example.xes"", path=general_example_filepath)\n\n        log_file = get_log(log)\n\n        self.assertEqual(6, len(log_file))\n\n\nclass SplitModelTest(TestCase):\n    def setUp(self):\n        log = Log.objects.create(name=""general_example.xes"", path=general_example_filepath)\n        Split.objects.create(original_log=log)\n\n    def test_can_find_split_original_file(self):\n        log = Log.objects.get(name=""general_example.xes"", path=general_example_filepath)\n\n        split = Split.objects.get(original_log=log)\n        log_file = get_log(split.original_log)\n\n        self.assertEqual(6, len(log_file))\n\n    def test_to_dict(self):\n        log = Log.objects.get(name=""general_example.xes"", path=general_example_filepath)\n\n        split = Split.objects.get(original_log=log).to_dict()\n        self.assertEqual(\'single\', split[\'type\'])\n        self.assertEqual(general_example_filepath, split[\'original_log_path\'])\n\n\nclass FileUploadTests(APITestCase):\n    def tearDown(self):\n        Log.objects.all().delete()\n        # I hate that Python can\'t just delete\n        with contextlib.suppress(FileNotFoundError):\n            remove(\'cache/log_cache/test_upload.xes\')  # TODO: fixme a file is not uploaded with only its name,\n        with contextlib.suppress(FileNotFoundError):  # it is its name + the time.time() in order to avoid\n            remove(\'cache/log_cache/file1.xes\')  # shadowing and it is also sha265 encoded\n        with contextlib.suppress(FileNotFoundError):\n            remove(\'cache/log_cache/file2.xes\')\n\n    @staticmethod\n    def _create_test_file(path):\n        copyfile(general_example_test_filepath, path)\n        f = open(path, \'rb\')\n        return f\n\n    def test_upload_file(self):\n        f = self._create_test_file(\'/tmp/test_upload.xes\')\n\n        client = APIClient()\n        response = client.post(\'/logs/\', {\'single\': f}, format=\'multipart\')\n        self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n        self.assertEqual(response.data[\'name\'][:11], \'test_upload\')\n        self.assertEqual(response.data[\'name\'][-4:], \'.xes\')\n        self.assertIsNotNone(response.data[\'properties\'][\'events\'])\n        self.assertIsNotNone(response.data[\'properties\'][\'resources\'])\n        self.assertIsNotNone(response.data[\'properties\'][\'traceAttributes\'])\n        self.assertIsNotNone(response.data[\'properties\'][\'maxEventsInLog\'])\n        self.assertIsNotNone(response.data[\'properties\'][\'newTraces\'])\n\n    def test_upload_multiple_files(self):\n        f1 = self._create_test_file(\'/tmp/file1.xes\')\n        f2 = self._create_test_file(\'/tmp/file2.xes\')\n\n        client = APIClient()\n        response = client.post(\'/splits/multiple\', {\'testSet\': f1, \'trainingSet\': f2}, format=\'multipart\')\n        self.assertEqual(response.data[\'type\'], \'double\')\n\n        self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n        self.assertIsNotNone(response.data[\'test_log\'])\n        self.assertIsNotNone(response.data[\'training_log\'])\n        self.assertIsNone(response.data[\'original_log\'])\n'"
src/logs/tests/test_split.py,0,"b'from django.test import TestCase\n\nfrom src.split.models import SplitTypes, SplitOrderingMethods\nfrom src.split.splitting import get_train_test_log\nfrom src.utils.tests_utils import general_example_filepath, general_example_test_filepath, \\\n    general_example_train_filepath, create_test_split, create_test_log, general_example_filename, \\\n    general_example_train_filename, general_example_test_filename\n\n\nclass Split(TestCase):\n    def test_split_single(self):\n        training_log, test_log, _ = get_train_test_log(split_single())\n        self.assertEqual(4, len(training_log))\n        self.assertEqual(2, len(test_log))\n\n    def test_split_double(self):\n        training_log, test_log, _ = get_train_test_log(split_double())\n        self.assertEqual(4, len(training_log))\n        self.assertEqual(2, len(test_log))\n\n\nclass SplitSingle(TestCase):\n    def test_size(self):\n        split = split_single(test_size=0.5)\n        training_log, test_log, _ = get_train_test_log(split)\n        self.assertEqual(3, len(training_log))\n        self.assertEqual(3, len(test_log))\n\n    def test_sequential(self):\n        split = split_single(split_ordering=SplitOrderingMethods.SPLIT_SEQUENTIAL.value)\n        training_log, test_log, _ = get_train_test_log(split)\n        training_names = trace_names(training_log)\n        test_names = trace_names(test_log)\n\n        self.assertListEqual([\'3\', \'2\', \'1\', \'6\'], training_names)\n        self.assertListEqual([\'5\', \'4\'], test_names)\n\n    def test_random(self):\n        split = split_single(split_ordering=SplitOrderingMethods.SPLIT_RANDOM.value)\n        training_log1, _, _ = get_train_test_log(split)\n        training_log2, _, _ = get_train_test_log(split)\n        training_names1 = trace_names(training_log1)\n        training_names2 = trace_names(training_log2)\n\n        self.assertNotEqual(training_names1, training_names2)\n\n    def test_temporal(self):\n        split = split_single(split_ordering=SplitOrderingMethods.SPLIT_TEMPORAL.value)\n        training_log, test_log, _ = get_train_test_log(split)\n\n        training_names = trace_names(training_log)\n        test_names = trace_names(test_log)\n\n        self.assertListEqual(sorted([\'1\', \'2\', \'3\', \'5\']), sorted(training_names))\n        self.assertListEqual(sorted([\'6\', \'4\']), sorted(test_names))\n\n    def test_strict_temporal(self):\n        split = split_single(split_ordering=SplitOrderingMethods.SPLIT_STRICT_TEMPORAL.value)\n        training_log, test_log, _ = get_train_test_log(split)\n\n        training_names = trace_names(training_log)\n        test_names = trace_names(test_log)\n\n        # Modified log to have only one trace here\n        self.assertListEqual([\'1\'], sorted(training_names))\n        self.assertListEqual(sorted([\'6\', \'4\']), sorted(test_names))\n\n\ndef trace_names(log):\n    """"""Get trace names""""""\n    return [trace.attributes[\'concept:name\'] for trace in log]\n\n\ndef split_single(split_ordering: str = SplitOrderingMethods.SPLIT_SEQUENTIAL.value, test_size: float = 0.2):\n    return create_test_split(\n        split_type=SplitTypes.SPLIT_SINGLE.value,\n        split_ordering_method=split_ordering,\n        test_size=test_size,\n        original_log=create_test_log(\n            log_name=general_example_filename,\n            log_path=general_example_filepath))\n\n\ndef split_double():\n    return create_test_split(\n        split_type=SplitTypes.SPLIT_DOUBLE.value,\n        train_log=create_test_log(\n            log_name=general_example_train_filename,\n            log_path=general_example_train_filepath),\n        test_log=create_test_log(\n            log_name=general_example_test_filename,\n            log_path=general_example_test_filepath))\n'"
src/logs/tests/test_views.py,0,"b""from rest_framework.test import APITestCase, APIClient\n\nfrom src.utils.tests_utils import create_test_log\n\n\nclass TestViews(APITestCase):\n    def test_get_log_list(self):\n        create_test_log()\n        client = APIClient()\n        response = client.get('/logs/')\n        self.assertEqual(1, len(response.data))\n\n    def test_get_log_detail(self):\n        log = create_test_log()\n        client = APIClient()\n        response = client.get('/logs/' + str(log.id))\n        self.assertEqual(log.id, response.data['id'])\n        self.assertEqual(log.name, response.data['name'])\n"""
src/predictive_model/classification/__init__.py,0,b''
src/predictive_model/classification/apps.py,0,"b""from src.predictive_model.apps import PredictiveModelConfig\n\n\nclass ClassificationConfig(PredictiveModelConfig):\n    name = 'src.predictive_model.classification'\n"""
src/predictive_model/classification/classification.py,2,"b'from typing import Any\n\nimport numpy as np\nimport pandas as pd\nfrom pandas import DataFrame\nfrom sklearn import clone\nfrom sklearn.base import ClassifierMixin\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.externals import joblib\nfrom sklearn.linear_model import Perceptron, SGDClassifier\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom skmultiflow.trees import HoeffdingTree, HAT\nfrom xgboost import XGBClassifier\n\nfrom src.clustering.clustering import Clustering\nfrom src.core.common import get_method_config\nfrom src.encoding.models import Encoding\nfrom src.jobs.models import Job, ModelType\nfrom src.labelling.models import LabelTypes\nfrom src.predictive_model.classification.custom_classification_models import NNClassifier\nfrom src.predictive_model.classification.models import ClassificationMethods\nfrom src.utils.django_orm import duplicate_orm_row\nfrom src.utils.result_metrics import calculate_results_classification, get_auc\n\npd.options.mode.chained_assignment = None\n\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\ndef classification(training_df: DataFrame, test_df: DataFrame, clusterer: Clustering, job: Job) -> (dict, dict):\n    """"""main classification entry point\n\n    train and tests the classifier using the provided data\n\n    :param clusterer:\n    :param training_df: training DataFrame\n    :param test_df: testing DataFrame\n    :param job: job configuration\n    :return: predictive_model scores and split\n\n    """"""\n    train_data = _drop_columns(training_df)\n    test_data = _drop_columns(test_df)\n\n    job.encoding = duplicate_orm_row(Encoding.objects.filter(pk=job.encoding.pk)[0])  # TODO: maybe here would be better an intelligent get_or_create...\n    job.encoding.features = list(train_data.columns.values)\n    job.encoding.save()\n    job.save()\n\n    model_split = _train(train_data, _choose_classifier(job), clusterer)\n    results_df, auc = _test(\n        model_split,\n        test_data,\n        evaluation=True,\n        is_binary_classifier=_check_is_binary_classifier(job.labelling.type)\n    )\n\n    results = _prepare_results(results_df, auc)\n\n    return results, model_split\n\n\ndef update_and_test(training_df: DataFrame, test_df: DataFrame, job: Job):\n    train_data = _drop_columns(training_df)\n    test_data = _drop_columns(test_df)\n\n    job.encoding = job.incremental_train.encoding\n    job.encoding.save()\n    job.save()\n\n    if list(train_data.columns.values) != job.incremental_train.encoding.features:\n        # TODO: how do I align the two feature vectors?\n        train_data, _ = train_data.align(\n            pd.DataFrame(columns=job.incremental_train.encoding.features), axis=1, join=\'right\')\n        train_data = train_data.fillna(0)\n        test_data, _ = test_data.align(\n            pd.DataFrame(columns=job.incremental_train.encoding.features), axis=1, join=\'right\')\n        test_data = test_data.fillna(0)\n\n    # TODO: UPDATE if incremental, otherwise just test\n    model_split = _update(job, train_data)\n\n    results_df, auc = _test(model_split, test_data, evaluation=True,\n                            is_binary_classifier=_check_is_binary_classifier(job.labelling.type))\n\n    results = _prepare_results(results_df, auc)\n\n    return results, model_split\n\n\ndef _train(train_data: DataFrame, classifier: ClassifierMixin, clusterer: Clustering) -> dict:\n    models = dict()\n\n    train_data = clusterer.cluster_data(train_data)\n\n    for cluster in range(clusterer.n_clusters):\n        cluster_train_df = train_data[cluster]\n        if not cluster_train_df.empty:\n            cluster_targets_df = DataFrame(cluster_train_df[\'label\'])\n            try:\n                classifier.fit(cluster_train_df.drop(\'label\', 1), cluster_targets_df.values.ravel())\n            except (NotImplementedError, KeyError):\n                classifier.partial_fit(cluster_train_df.drop(\'label\', 1).values, cluster_targets_df.values.ravel())\n            except Exception as exception:\n                raise exception\n\n            models[cluster] = classifier\n            try:\n                classifier = clone(classifier)\n            except TypeError:\n                classifier = clone(classifier, safe=False)\n                classifier.reset()\n\n    return {ModelType.CLUSTERER.value: clusterer, ModelType.CLASSIFIER.value: models}\n\n\ndef _update(job: Job, data: DataFrame) -> dict:\n    previous_job = job.incremental_train\n\n    clusterer = Clustering.load_model(previous_job)\n\n    update_data = clusterer.cluster_data(data)\n\n    models = joblib.load(previous_job.predictive_model.model_path)\n\n    for cluster in range(clusterer.n_clusters):\n        x = update_data[cluster]\n        if not x.empty:\n            y = x[\'label\']\n\n            try:\n                models[cluster].partial_fit(x.drop(\'label\', 1), y.values.ravel())\n            except (NotImplementedError, KeyError):\n                models[cluster].partial_fit(x.drop(\'label\', 1).values, y.values.ravel())\n            except Exception as exception:\n                raise exception\n\n    return {ModelType.CLUSTERER.value: clusterer, ModelType.CLASSIFIER.value: models}\n\n\ndef _test(model_split: dict, test_data: DataFrame, evaluation: bool, is_binary_classifier: bool) -> (DataFrame, float):\n    clusterer = model_split[ModelType.CLUSTERER.value]\n    classifier = model_split[ModelType.CLASSIFIER.value]\n\n    test_data = clusterer.cluster_data(test_data)\n\n    results_df = DataFrame()\n    auc = 0\n\n    non_empty_clusters = clusterer.n_clusters\n\n    for cluster in range(clusterer.n_clusters):\n        cluster_test_df = test_data[cluster]\n        if cluster_test_df.empty:\n            non_empty_clusters -= 1\n        else:\n            cluster_targets_df = cluster_test_df[\'label\']\n            if evaluation:\n                try:\n                    if hasattr(classifier[cluster], \'decision_function\'):\n                        scores = classifier[cluster].decision_function(cluster_test_df.drop([\'label\'], 1))\n                    else:\n                        scores = classifier[cluster].predict_proba(cluster_test_df.drop([\'label\'], 1))\n                        if np.size(scores, 1) >= 2:  # checks number of columns\n                            scores = scores[:, 1]\n                except (NotImplementedError, KeyError):\n                    if hasattr(classifier[cluster], \'decision_function\'):\n                        scores = classifier[cluster].decision_function(cluster_test_df.drop([\'label\'], 1).values)\n                    else:\n                        scores = classifier[cluster].predict_proba(cluster_test_df.drop([\'label\'], 1).values)\n                        try:\n                            if np.size(scores, 1) >= 2:  # checks number of columns\n                                scores = scores[:, 1]\n                        except Exception as exception:\n                            pass\n                auc += get_auc(cluster_targets_df, scores)\n            try:\n                cluster_test_df[\'predicted\'] = classifier[cluster].predict(cluster_test_df.drop([\'label\'], 1))\n            except (NotImplementedError, KeyError):\n                cluster_test_df[\'predicted\'] = classifier[cluster].predict(cluster_test_df.drop([\'label\'], 1).values)\n\n            results_df = results_df.append(cluster_test_df)\n\n    if is_binary_classifier or max([len(set(t[\'label\'])) for _, t in test_data.items()]) <= 2:\n        auc = float(auc) / non_empty_clusters\n    else:\n        pass  # TODO: check if AUC is ok for multiclass, otherwise implement\n\n    return results_df, auc\n\n\ndef predict(job: Job, data: DataFrame) -> Any:\n    data = data.drop([\'trace_id\'], 1)\n    clusterer = Clustering.load_model(job)\n    data = clusterer.cluster_data(data)\n\n    classifier = joblib.load(job.predictive_model.model_path)\n\n    non_empty_clusters = clusterer.n_clusters\n\n    result = None\n\n    for cluster in range(clusterer.n_clusters):\n        cluster_test_df = data[cluster]\n        if cluster_test_df.empty:\n            non_empty_clusters -= 1\n        else:\n            try:\n                result = classifier[cluster].predict(cluster_test_df.drop([\'label\'], 1))\n            except (NotImplementedError, KeyError):\n                result = classifier[cluster].predict(cluster_test_df.drop([\'label\'], 1).values)\n\n    return result\n\n\ndef predict_proba(job: Job, data: DataFrame) -> Any:\n    data = data.drop([\'trace_id\'], 1)\n    clusterer = Clustering.load_model(job)\n    data = clusterer.cluster_data(data)\n\n    classifier = joblib.load(job.predictive_model.model_path)\n\n    non_empty_clusters = clusterer.n_clusters\n\n    result = None\n\n    for cluster in range(clusterer.n_clusters):\n        cluster_test_df = data[cluster]\n        if cluster_test_df.empty:\n            non_empty_clusters -= 1\n        else:\n            try:\n                result = classifier[cluster].predict_proba(cluster_test_df.drop([\'label\'], 1))\n            except (NotImplementedError, KeyError):\n                result = classifier[cluster].predict_proba(cluster_test_df.drop([\'label\'], 1).values)\n\n    return result\n\n\ndef _prepare_results(results_df: DataFrame, auc: int) -> dict:\n    actual = results_df[\'label\'].values\n    predicted = results_df[\'predicted\'].values\n\n    row = calculate_results_classification(actual, predicted)\n    row[\'auc\'] = auc\n    return row\n\n\ndef _drop_columns(df: DataFrame) -> DataFrame:\n    df = df.drop(\'trace_id\', 1)\n    return df\n\n\ndef _choose_classifier(job: Job):\n    method, config = get_method_config(job)\n    config.pop(\'classification_method\', None)\n    logger.info(""Using method {} with config {}"".format(method, config))\n    if method == ClassificationMethods.KNN.value:\n        classifier = KNeighborsClassifier(**config)\n    elif method == ClassificationMethods.RANDOM_FOREST.value:\n        classifier = RandomForestClassifier(**config)\n    elif method == ClassificationMethods.DECISION_TREE.value:\n        classifier = DecisionTreeClassifier(**config)\n    elif method == ClassificationMethods.XGBOOST.value:\n        classifier = XGBClassifier(**config)\n    elif method == ClassificationMethods.MULTINOMIAL_NAIVE_BAYES.value:\n        classifier = MultinomialNB(**config)\n    elif method == ClassificationMethods.ADAPTIVE_TREE.value:\n        classifier = HAT(**config)\n    elif method == ClassificationMethods.HOEFFDING_TREE.value:\n        classifier = HoeffdingTree(**config)\n    elif method == ClassificationMethods.SGDCLASSIFIER.value:\n        classifier = SGDClassifier(**config)\n    elif method == ClassificationMethods.PERCEPTRON.value:\n        classifier = Perceptron(**config)\n    elif method == ClassificationMethods.NN.value:\n        config[\'encoding\'] = job.encoding.value_encoding\n        config[\'is_binary_classifier\'] = _check_is_binary_classifier(job.labelling.type)\n        classifier = NNClassifier(**config)\n    else:\n        raise ValueError(""Unexpected classification method {}"".format(method))\n    return classifier\n\n\ndef _check_is_binary_classifier(label_type: str) -> bool:\n    if label_type in [LabelTypes.REMAINING_TIME.value, LabelTypes.ATTRIBUTE_NUMBER.value, LabelTypes.DURATION.value]:\n        return True\n    if label_type in [LabelTypes.NEXT_ACTIVITY.value, LabelTypes.ATTRIBUTE_STRING.value]:\n        return False\n    raise ValueError(""Label type {} not supported"".format(label_type))\n'"
src/predictive_model/classification/custom_classification_models.py,3,"b'from typing import Dict, Union\n\nimport numpy as np\nfrom keras import Input, Model\nfrom keras.layers import Flatten, Dense, Dropout\nfrom numpy import ndarray\nfrom pandas import DataFrame\nfrom sklearn.base import ClassifierMixin\n\nfrom src.encoding.encoding_parser import EncodingParser\nfrom src.predictive_model.models import PredictiveModels\n\n\nclass NNClassifier(ClassifierMixin):\n    """"""\n    Neural Network classifier, implements the same methods as the sklearn models to make it simple to add\n    """"""\n\n    # noinspection PyTypeChecker\n    def __init__(self, **kwargs: Dict[str, Union[int, str, float]]):\n        """"""initializes the Neural Network classifier\n\n        :param kwargs: configuration containing the predictive_model parameters, encoding and training parameters\n\n        """"""\n        self._n_hidden_layers = int(kwargs[\'n_hidden_layers\'])\n        self._n_hidden_units = int(kwargs[\'n_hidden_units\'])\n        self._activation = str(kwargs[\'activation\'])\n        self._n_epochs = int(kwargs[\'n_epochs\'])\n        self._encoding = str(kwargs[\'encoding\'])\n        self._dropout_rate = float(kwargs[\'dropout_rate\'])\n        self._is_binary_classifier = bool(kwargs[\'is_binary_classifier\'])\n        self._encoding_parser = EncodingParser(self._encoding, self._is_binary_classifier,\n                                               task=PredictiveModels.CLASSIFICATION.value)\n        self._model = None\n        self.classes_ = None  # this is set for compatibility reasons\n\n    def fit(self, train_data: DataFrame, targets: ndarray) -> None:\n        """"""creates and fits the predictive_model\n\n        first the encoded data is parsed, then the predictive_model created and then trained\n\n        :param train_data: encoded training dataset\n        :param targets: encoded target dataset\n\n        """"""\n        targets = DataFrame(targets, columns=[\'label\'])\n        train_data = self._encoding_parser.parse_training_dataset(train_data)\n        targets = self._encoding_parser.parse_targets(targets)\n\n        self.classes_ = targets.T\n\n        model_inputs = Input(train_data.shape[1:])\n        predicted = model_inputs\n\n        if self._encoding in [\'simpleIndex\', \'complex\', \'lastPayload\']:\n            predicted = Flatten()(predicted)\n\n        for _ in range(self._n_hidden_layers):\n            predicted = Dense(self._n_hidden_units, activation=self._activation)(predicted)\n            predicted = Dropout(self._dropout_rate)(predicted)\n\n        if self._is_binary_classifier:\n            predicted = Dense(1, activation=\'sigmoid\')(predicted)\n        else:\n            predicted = Dense(targets.shape[1], activation=\'softmax\')(predicted)\n        self._model = Model(model_inputs, predicted)\n\n        if self._is_binary_classifier:\n            self._model.compile(loss=\'binary_crossentropy\', optimizer=\'adam\')\n        else:\n            self._model.compile(loss=\'categorical_crossentropy\', optimizer=\'adam\')\n\n        self._model.fit(train_data, targets, epochs=self._n_epochs)\n\n    def predict(self, test_data: DataFrame) -> ndarray:\n        """"""returns predictive_model predictions\n\n        parses the encoded test dataset, then returns the predictive_model predictions\n\n        :param test_data: encoded test dataset\n        :return: predictive_model predictions\n\n        """"""\n        test_data = self._encoding_parser.parse_testing_dataset(test_data)\n\n        predictions = self._model.predict(test_data)\n        if self._is_binary_classifier:\n            predictions = predictions.astype(bool)\n        else:\n            predictions = np.argmax(predictions, -1)\n        return predictions\n\n    def predict_proba(self, test_data: DataFrame) -> ndarray:\n        """"""returns the classification probability\n\n        parses the test dataset and returns the raw prediction probabilities of the predictive_model\n\n        :param test_data: encoded test dataset\n        :return: predictive_model prediction probabilities\n\n        """"""\n        test_data = self._encoding_parser.parse_testing_dataset(test_data)\n\n        predictions = self._model.predict(test_data)\n        if self._is_binary_classifier:\n            predictions = np.max(predictions, -1)\n            predictions = np.vstack((1 - predictions, predictions)).T\n        return predictions\n\n    def reset(self) -> None:\n        """"""\n        placeholder to allow use with other sklearn algorithms\n\n        """"""\n'"
src/predictive_model/classification/methods_default_config.py,0,"b""def classification_random_forest():\n    return {\n        ### MANUALLY OPTIMISED PARAMS\n        'n_estimators': 10,\n        'max_depth': None,\n        'max_features': 'auto',\n        'n_jobs': -1,\n        'random_state': 21\n\n        ### DEFAULT PARAMS\n        # 'n_estimators': 100,\n        # 'criterion': 'gini',\n        # 'min_samples': 2,\n        # 'min_samples_leaf': 1,\n        # 'min_weight_fraction_leaf': 0.,\n        # 'max_features': 'auto',\n        # 'max_leaf_nodes': None,\n        # 'min_impurity_decrease':0.,\n        # 'min_impurity_split': 1e-7,\n        # 'bootstrap': True,\n        # 'oob_score': False,\n        # 'n_jobs': None,\n        # 'random_state': None,\n        # 'verbose': 0,\n        # 'warm_start': False,\n        # 'class_weight': None,\n        # 'ccp_alpha': 0.,\n        # 'max_samples': None\n    }\n\n\ndef classification_knn():\n    return {\n        'n_neighbors': 3,\n        'n_jobs': -1,\n        'weights': 'uniform'\n    }\n\n\ndef classification_decision_tree():\n    return {\n        'max_depth': None,\n        'min_samples_split': 2,\n        'min_samples_leaf': 1,\n        'random_state': 21\n    }\n\n\ndef classification_incremental_naive_bayes():\n    return {\n        'alpha': 1.0,\n        'fit_prior': True,\n        'class_prior': None\n    }\n\n\ndef classification_incremental_adaptive_tree():\n    return {\n        'max_byte_size': 33554432,\n        'memory_estimate_period': 1000000,\n        'grace_period': 200,\n        'split_criterion': 'info_gain',\n        'split_confidence': .0000001,\n        'tie_threshold': .05,\n        'binary_split': False,\n        'stop_mem_management': False,\n        'remove_poor_atts': False,\n        'no_preprune': False,\n        'leaf_prediction': 'nba',\n        'nb_threshold': 0,\n        'nominal_attributes': []  # <-- if this is empty assume all attributes are numerical\n    }\n\n\ndef classification_incremental_hoeffding_tree():\n    return {\n        'max_byte_size': 33554432,\n        'memory_estimate_period': 1000000,\n        'grace_period': 200,\n        'split_criterion': 'info_gain',\n        'split_confidence': .0000001,\n        'tie_threshold': .05,\n        'binary_split': False,\n        'stop_mem_management': False,\n        'remove_poor_atts': False,\n        'no_preprune': False,\n        'leaf_prediction': 'nba',\n        'nb_threshold': 0,\n        'nominal_attributes': []  # <-- if this is empty assume all attributes are numerical\n    }\n\n\ndef classification_incremental_sgd_classifier():\n    return {\n        'loss': 'hinge',\n        'penalty': 'l2',\n        'alpha': 0.0001,\n        'l1_ratio': 0.15,\n        'fit_intercept': True,\n        'max_iter': None,\n        'tol': 1e-3,\n        'eta0': 0.0,\n        'power_t': 0.5,\n        'early_stopping': False,\n        'n_iter_no_change': 5,\n        'validation_fraction': 0.1,\n        'epsilon': 0.1,\n        'learning_rate': 'optimal',\n        'average': False\n    }\n\n\ndef classification_incremental_perceptron():\n    return {\n        'penalty': None,\n        'alpha': 0.0001,\n        'fit_intercept': True,\n        'max_iter': None,\n        'tol': 1e-3,\n        'shuffle': True,\n        'eta0': 1,\n        'early_stopping': False,\n        'validation_fraction': 0.1,\n        'n_iter_no_change': 5\n    }\n\n\ndef classification_xgboost():\n    return {\n        'max_depth': 3,\n        'learning_rate': 0.1,\n        'n_estimators': 100\n    }\n\n\ndef classification_nn():\n    return {\n        'n_hidden_layers': 1,\n        'n_hidden_units': 10,\n        'activation': 'sigmoid',\n        'n_epochs': 10,\n        'dropout_rate': 0.0\n    }\n\n\ndef _update_incremental_naive_bayes():\n    return {\n        'alpha': 1.0,\n        'fit_prior': True,\n        'class_prior': None\n    }\n\n\ndef _update_incremental_adaptive_tree():\n    return {\n        'max_byte_size': 33554432,\n        'memory_estimate_period': 1000000,\n        'grace_period': 3,\n        'split_criterion': 'info_gain',\n        'split_confidence': .0000007,\n        'tie_threshold': .35,\n        'binary_split': False,\n        'stop_mem_management': False,\n        'remove_poor_atts': False,\n        'no_preprune': False,\n        'leaf_prediction': 'nba',\n        'nb_threshold': 0.4,\n        'nominal_attributes': []  # <-- TODO: if this is empty assume all attributes are numerical\n    }\n\n\ndef _update_incremental_hoeffding_tree():\n    return {\n        'max_byte_size': 33554432,\n        'memory_estimate_period': 1000000,\n        'grace_period': 6,\n        'split_criterion': 'gini',\n        'split_confidence': .0000008,\n        'tie_threshold': .6,\n        'binary_split': False,\n        'stop_mem_management': False,\n        'remove_poor_atts': True,\n        'no_preprune': False,\n        'leaf_prediction': 'mc',\n        'nb_threshold': 0.3,\n        'nominal_attributes': []  # <-- TODO: if this is empty assume all attributes are numerical\n    }\n"""
src/predictive_model/classification/models.py,0,"b'from enum import Enum\n\nfrom django.db import models\n\nfrom src.jobs.models import JobTypes\nfrom src.predictive_model.classification.methods_default_config import classification_knn, classification_random_forest, \\\n    classification_decision_tree, classification_xgboost, classification_incremental_naive_bayes, \\\n    classification_incremental_hoeffding_tree, classification_incremental_adaptive_tree, \\\n    classification_incremental_sgd_classifier, classification_incremental_perceptron, classification_nn\nfrom src.predictive_model.models import PredictiveModel, PredictiveModels\n\n\nclass ClassificationMethods(Enum):\n    KNN = \'knn\'\n    RANDOM_FOREST = \'randomForest\'\n    XGBOOST = \'xgboost\'\n    DECISION_TREE = \'decisionTree\'\n    MULTINOMIAL_NAIVE_BAYES = \'multinomialNB\'\n    ADAPTIVE_TREE = \'adaptiveTree\'\n    HOEFFDING_TREE = \'hoeffdingTree\'\n    SGDCLASSIFIER = \'SGDClassifier\'\n    PERCEPTRON = \'perceptron\'\n    NN = \'nn\'\n\n\nCLASSIFICATION_METHOD_MAPPINGS = (\n    (ClassificationMethods.KNN.value, \'knn\'),\n    (ClassificationMethods.RANDOM_FOREST.value, \'randomForest\'),\n    (ClassificationMethods.XGBOOST.value, \'xgboost\'),\n    (ClassificationMethods.DECISION_TREE.value, \'decisionTree\'),\n    (ClassificationMethods.MULTINOMIAL_NAIVE_BAYES.value, \'multinomialNB\'),\n    (ClassificationMethods.ADAPTIVE_TREE.value, \'adaptiveTree\'),\n    (ClassificationMethods.HOEFFDING_TREE.value, \'hoeffdingTree\'),\n    (ClassificationMethods.SGDCLASSIFIER.value, \'SGDClassifier\'),\n    (ClassificationMethods.PERCEPTRON.value, \'perceptron\'),\n    (ClassificationMethods.NN.value, \'nn\')\n)\n\nCLASSIFICATION_RANDOM_FOREST = \'{}.{}\'.format(PredictiveModels.CLASSIFICATION.value, ClassificationMethods.RANDOM_FOREST.value)\nCLASSIFICATION_KNN = \'{}.{}\'.format(PredictiveModels.CLASSIFICATION.value, ClassificationMethods.KNN.value)\nCLASSIFICATION_DECISION_TREE = \'{}.{}\'.format(PredictiveModels.CLASSIFICATION.value, ClassificationMethods.DECISION_TREE.value)\nCLASSIFICATION_MULTINOMIAL_NAIVE_BAYES = \'{}.{}\'.format(PredictiveModels.CLASSIFICATION.value, ClassificationMethods.MULTINOMIAL_NAIVE_BAYES.value)\nCLASSIFICATION_ADAPTIVE_TREE = \'{}.{}\'.format(PredictiveModels.CLASSIFICATION.value, ClassificationMethods.ADAPTIVE_TREE.value)\nCLASSIFICATION_HOEFFDING_TREE = \'{}.{}\'.format(PredictiveModels.CLASSIFICATION.value, ClassificationMethods.HOEFFDING_TREE.value)\nCLASSIFICATION_SGDC = \'{}.{}\'.format(PredictiveModels.CLASSIFICATION.value, ClassificationMethods.SGDCLASSIFIER.value)\nCLASSIFICATION_PERCEPTRON = \'{}.{}\'.format(PredictiveModels.CLASSIFICATION.value, ClassificationMethods.PERCEPTRON.value)\nCLASSIFICATION_XGBOOST = \'{}.{}\'.format(PredictiveModels.CLASSIFICATION.value, ClassificationMethods.XGBOOST.value)\nCLASSIFICATION_NN = \'{}.{}\'.format(PredictiveModels.CLASSIFICATION.value, ClassificationMethods.NN.value)\n\nUPDATE_INCREMENTAL_NAIVE_BAYES = \'{}.{}\'.format(JobTypes.UPDATE.value, ClassificationMethods.MULTINOMIAL_NAIVE_BAYES.value)\nUPDATE_INCREMENTAL_ADAPTIVE_TREE = \'{}.{}\'.format(JobTypes.UPDATE.value, ClassificationMethods.ADAPTIVE_TREE.value)\nUPDATE_INCREMENTAL_HOEFFDING_TREE = \'{}.{}\'.format(JobTypes.UPDATE.value, ClassificationMethods.HOEFFDING_TREE.value)\n\n\nclass Classification(PredictiveModel):\n    """"""Container of Classification to be shown in frontend""""""\n\n    @staticmethod\n    def init(configuration: dict) -> PredictiveModel:\n        classifier_type = configuration[\'prediction_method\']\n        if classifier_type == ClassificationMethods.DECISION_TREE.value:\n            default_configuration = classification_decision_tree()\n            return DecisionTree.objects.get_or_create(\n                prediction_method=classifier_type,\n                predictive_model=PredictiveModels.CLASSIFICATION.value,\n                max_depth=configuration.get(\'max_depth\', default_configuration[\'max_depth\']),\n                min_samples_split=configuration.get(\'min_samples_split\', default_configuration[\'min_samples_split\']),\n                min_samples_leaf=configuration.get(\'min_samples_leaf\', default_configuration[\'min_samples_leaf\'])\n            )[0]\n        elif classifier_type == ClassificationMethods.KNN.value:\n            default_configuration = classification_knn()\n            return Knn.objects.get_or_create(\n                prediction_method=classifier_type,\n                predictive_model=PredictiveModels.CLASSIFICATION.value,\n                n_neighbors=configuration.get(\'n_neighbors\', default_configuration[\'n_neighbors\']),\n                weights=configuration.get(\'weights\', default_configuration[\'weights\'])\n            )[0]\n        elif classifier_type == ClassificationMethods.RANDOM_FOREST.value:\n            default_configuration = classification_random_forest()\n            return RandomForest.objects.get_or_create(\n                prediction_method=classifier_type,\n                predictive_model=PredictiveModels.CLASSIFICATION.value,\n                n_estimators=configuration.get(\'n_estimators\', default_configuration[\'n_estimators\']),\n                max_depth=configuration.get(\'max_depth\', default_configuration[\'max_depth\']),\n                max_features=configuration.get(\'max_features\', default_configuration[\'max_features\']),\n                random_state=123\n            )[0]\n        elif classifier_type == ClassificationMethods.XGBOOST.value:\n            default_configuration = classification_xgboost()\n            return XGBoost.objects.get_or_create(\n                prediction_method=classifier_type,\n                predictive_model=PredictiveModels.CLASSIFICATION.value,\n                n_estimators=configuration.get(\'n_estimators\', default_configuration[\'n_estimators\']),\n                max_depth=configuration.get(\'max_depth\', default_configuration[\'max_depth\'])\n            )[0]\n        elif classifier_type == ClassificationMethods.MULTINOMIAL_NAIVE_BAYES.value:\n            default_configuration = classification_incremental_naive_bayes()\n            return NaiveBayes.objects.get_or_create(\n                prediction_method=classifier_type,\n                predictive_model=PredictiveModels.CLASSIFICATION.value,\n                alpha=configuration.get(\'alpha\', default_configuration[\'alpha\']),\n                fit_prior=configuration.get(\'fit_prior\', default_configuration[\'fit_prior\'])\n            )[0]\n        elif classifier_type == ClassificationMethods.HOEFFDING_TREE.value:\n            default_configuration = classification_incremental_hoeffding_tree()\n            return HoeffdingTree.objects.get_or_create(\n                prediction_method=classifier_type,\n                predictive_model=PredictiveModels.CLASSIFICATION.value,\n                grace_period=configuration.get(\'grace_period\', default_configuration[\'grace_period\']),\n                split_criterion=configuration.get(\'split_criterion\', default_configuration[\'split_criterion\']),\n                split_confidence=configuration.get(\'split_confidence\', default_configuration[\'split_confidence\']),\n                tie_threshold=configuration.get(\'tie_threshold\', default_configuration[\'tie_threshold\']),\n                remove_poor_atts=configuration.get(\'remove_poor_atts\', default_configuration[\'remove_poor_atts\']),\n                leaf_prediction=configuration.get(\'leaf_prediction\', default_configuration[\'leaf_prediction\']),\n                nb_threshold=configuration.get(\'nb_threshold\', default_configuration[\'nb_threshold\'])\n            )[0]\n        elif classifier_type == ClassificationMethods.ADAPTIVE_TREE.value:\n            default_configuration = classification_incremental_adaptive_tree()\n            return AdaptiveHoeffdingTree.objects.get_or_create(\n                prediction_method=classifier_type,\n                predictive_model=PredictiveModels.CLASSIFICATION.value,\n                grace_period=configuration.get(\'grace_period\', default_configuration[\'grace_period\']),\n                split_criterion=configuration.get(\'split_criterion\', default_configuration[\'split_criterion\']),\n                split_confidence=configuration.get(\'split_confidence\', default_configuration[\'split_confidence\']),\n                tie_threshold=configuration.get(\'tie_threshold\', default_configuration[\'tie_threshold\']),\n                remove_poor_atts=configuration.get(\'remove_poor_atts\', default_configuration[\'remove_poor_atts\']),\n                leaf_prediction=configuration.get(\'leaf_prediction\', default_configuration[\'leaf_prediction\']),\n                nb_threshold=configuration.get(\'nb_threshold\', default_configuration[\'nb_threshold\'])\n            )[0]\n        elif classifier_type == ClassificationMethods.SGDCLASSIFIER.value:\n            default_configuration = classification_incremental_sgd_classifier()\n            return SGDClassifier.objects.get_or_create(\n                prediction_method=classifier_type,\n                predictive_model=PredictiveModels.CLASSIFICATION.value,\n                loss=configuration.get(\'loss\', default_configuration[\'loss\']),\n                penalty=configuration.get(\'penalty\', default_configuration[\'penalty\']),\n                alpha=configuration.get(\'alpha\', default_configuration[\'alpha\']),\n                l1_ratio=configuration.get(\'l1_ratio\', default_configuration[\'l1_ratio\']),\n                fit_intercept=configuration.get(\'fit_intercept\', default_configuration[\'fit_intercept\']),\n                tol=configuration.get(\'tol\', default_configuration[\'tol\']),\n                epsilon=configuration.get(\'epsilon\', default_configuration[\'epsilon\']),\n                learning_rate=configuration.get(\'learning_rate\', default_configuration[\'learning_rate\']),\n                eta0=1 if configuration.get(\'eta0\', default_configuration[\'eta0\']) <= 0 and configuration.get(\'learning_rate\', default_configuration[\'learning_rate\']) in (""constant"", ""invscaling"", ""adaptive"") else configuration.get(\'eta0\', default_configuration[\'eta0\']),\n                power_t=configuration.get(\'power_t\', default_configuration[\'power_t\']),\n                n_iter_no_change=configuration.get(\'n_iter_no_change\', default_configuration[\'n_iter_no_change\']),\n                validation_fraction=configuration.get(\'validation_fraction\',\n                                                      default_configuration[\'validation_fraction\']),\n                average=configuration.get(\'average\', default_configuration[\'average\'])\n            )[0]\n        elif classifier_type == ClassificationMethods.PERCEPTRON.value:\n            default_configuration = classification_incremental_perceptron()\n            return Perceptron.objects.get_or_create(\n                prediction_method=classifier_type,\n                predictive_model=PredictiveModels.CLASSIFICATION.value,\n                penalty=configuration.get(\'penalty\', default_configuration[\'penalty\']),\n                alpha=configuration.get(\'alpha\', default_configuration[\'alpha\']),\n                fit_intercept=configuration.get(\'fit_intercept\', default_configuration[\'fit_intercept\']),\n                tol=configuration.get(\'tol\', default_configuration[\'tol\']),\n                shuffle=configuration.get(\'shuffle\', default_configuration[\'shuffle\']),\n                eta0=configuration.get(\'eta0\', default_configuration[\'eta0\']),\n                validation_fraction=configuration.get(\'validation_fraction\',\n                                                      default_configuration[\'validation_fraction\']),\n                n_iter_no_change=configuration.get(\'n_iter_no_change\', default_configuration[\'n_iter_no_change\'])\n            )[0]\n        elif classifier_type == ClassificationMethods.NN.value:\n            default_configuration = classification_nn()\n            return NeuralNetwork.objects.get_or_create(\n                prediction_method=classifier_type,\n                predictive_model=PredictiveModels.CLASSIFICATION.value,\n                n_hidden_layers=configuration.get(\'n_hidden_layers\', default_configuration[\'n_hidden_layers\']),\n                n_hidden_units=configuration.get(\'n_hidden_units\', default_configuration[\'n_hidden_units\']),\n                activation=configuration.get(\'activation\', default_configuration[\'activation\']),\n                n_epochs=configuration.get(\'n_epochs\', default_configuration[\'n_epochs\']),\n                dropout_rate=configuration.get(\'dropout_rate\', default_configuration[\'dropout_rate\']),\n            )[0]\n        else:\n            raise ValueError(\'classifier type {} not recognized\'.format(classifier_type))\n\n\nclass DecisionTree(Classification):\n    max_depth = models.PositiveIntegerField(null=True)\n    min_samples_split = models.PositiveIntegerField()\n    min_samples_leaf = models.PositiveIntegerField()\n\n    def to_dict(self):\n        return {\n            \'max_depth\': self.max_depth,\n            \'min_samples_split\': self.min_samples_split,\n            \'min_samples_leaf\': self.min_samples_leaf\n        }\n\n\nKNN_WEIGHTS = (\n    (\'uniform\', \'uniform\'),\n    (\'distance\', \'distance\')\n)\n\n\nclass Knn(Classification):\n    n_neighbors = models.PositiveIntegerField()\n    weights = models.CharField(choices=KNN_WEIGHTS, default=\'uniform\', max_length=max(len(el[1]) for el in KNN_WEIGHTS)+1)\n\n    def to_dict(self):\n        return {\n            \'n_neighbors\': self.n_neighbors,\n            \'weights\': self.weights\n        }\n\n\nclass RandomForest(Classification):\n    n_estimators = models.PositiveIntegerField()\n    max_depth = models.PositiveIntegerField(null=True)\n    max_features = models.CharField(null=True, default=\'auto\', max_length=10)\n    random_state = models.PositiveIntegerField(null=True)\n\n    def to_dict(self):\n        return {\n            \'n_estimators\': self.n_estimators,\n            \'max_depth\': self.max_depth,\n            \'max_features\': self.max_features,\n            \'random_state\': self.random_state\n        }\n\n\nclass XGBoost(Classification):\n    n_estimators = models.PositiveIntegerField()\n    max_depth = models.PositiveIntegerField()\n\n    def to_dict(self):\n        return {\n            \'n_estimators\': self.n_estimators,\n            \'max_depth\': self.max_depth\n        }\n\n\nclass NaiveBayes(Classification):\n    alpha = models.FloatField()\n    fit_prior = models.BooleanField()\n\n    def to_dict(self):\n        return {\n            \'alpha\': self.alpha,\n            \'fit_prior\': self.fit_prior\n        }\n\n\nHOEFFDING_TREE_SPLIT_CRITERION = (\n    (\'gini\', \'gini\'),\n    (\'info_gain\', \'info_gain\')\n)\n\nHOEFFDING_TREE_LEAF_PREDICTION = (\n    (\'mc\', \'mc\'),\n    (\'nb\', \'nb\'),\n    (\'nba\', \'nba\')\n)\n\n\nclass HoeffdingTree(Classification):\n    grace_period = models.PositiveIntegerField()\n    split_criterion = models.CharField(choices=HOEFFDING_TREE_SPLIT_CRITERION, default=\'uniform\', max_length=max(len(el[1]) for el in HOEFFDING_TREE_SPLIT_CRITERION)+1)\n    split_confidence = models.FloatField()\n    tie_threshold = models.FloatField()\n    remove_poor_atts = models.BooleanField()\n    leaf_prediction = models.CharField(choices=HOEFFDING_TREE_LEAF_PREDICTION, default=\'uniform\', max_length=max(len(el[1]) for el in HOEFFDING_TREE_LEAF_PREDICTION)+1)\n    nb_threshold = models.FloatField()\n\n    def to_dict(self):\n        return {\n            \'grace_period\': self.grace_period,\n            \'split_criterion\': self.split_criterion,\n            \'split_confidence\': self.split_confidence,\n            \'tie_threshold\': self.tie_threshold,\n            \'remove_poor_atts\': self.remove_poor_atts,\n            \'leaf_prediction\': self.leaf_prediction,\n            \'nb_threshold\': self.nb_threshold\n        }\n\n\nclass AdaptiveHoeffdingTree(Classification):\n    grace_period = models.PositiveIntegerField()\n    split_criterion = models.CharField(choices=HOEFFDING_TREE_SPLIT_CRITERION, default=\'uniform\', max_length=max(len(el[1]) for el in HOEFFDING_TREE_SPLIT_CRITERION)+1)\n    split_confidence = models.FloatField()\n    tie_threshold = models.FloatField()\n    remove_poor_atts = models.BooleanField()\n    leaf_prediction = models.CharField(choices=HOEFFDING_TREE_LEAF_PREDICTION, default=\'uniform\', max_length=max(len(el[1]) for el in HOEFFDING_TREE_LEAF_PREDICTION)+1)\n    nb_threshold = models.FloatField()\n\n    def to_dict(self):\n        return {\n            \'grace_period\': self.grace_period,\n            \'split_criterion\': self.split_criterion,\n            \'split_confidence\': self.split_confidence,\n            \'tie_threshold\': self.tie_threshold,\n            \'remove_poor_atts\': self.remove_poor_atts,\n            \'leaf_prediction\': self.leaf_prediction,\n            \'nb_threshold\': self.nb_threshold\n        }\n\n\nSGDCLASSIFIER_LOSS = (\n    (\'hinge\', \'hinge\'),\n    (\'log\', \'log\'),\n    (\'modified_huber\', \'modified_huber\'),\n    (\'squared_hinge\', \'squared_hinge\'),\n    (\'perceptron\', \'perceptron\'),\n    (\'squared_loss\', \'squared_loss\'),\n    (\'huber\', \'huber\'),\n    (\'epsilon_insensitive\', \'epsilon_insensitive\'),\n    (\'squared_epsilon_insensitive\', \'squared_epsilon_insensitive\')\n)\n\nSGDCLASSIFIER_PENALTY = (\n    (\'l1\', \'l1\'),\n    (\'l2\', \'l2\'),\n    (\'elasticnet\', \'elasticnet\')\n)\n\nSGDCLASSIFIER_LEARNING_RATE = (\n    (\'constant\', \'constant\'),\n    (\'optimal\', \'optimal\'),\n    (\'invscaling\', \'invscaling\'),\n    (\'adaptive\', \'adaptive\')\n)\n\n\nclass SGDClassifier(Classification):\n    loss = models.CharField(choices=SGDCLASSIFIER_LOSS, default=\'uniform\', max_length=max(len(el[1]) for el in SGDCLASSIFIER_LOSS)+1)\n    penalty = models.CharField(choices=SGDCLASSIFIER_PENALTY, default=\'l1\', max_length=max(len(el[1]) for el in SGDCLASSIFIER_PENALTY)+1, null=True)\n    alpha = models.FloatField()\n    l1_ratio = models.FloatField()\n    fit_intercept = models.BooleanField()\n    tol = models.FloatField()\n    epsilon = models.FloatField()\n    learning_rate = models.CharField(choices=SGDCLASSIFIER_LEARNING_RATE, default=\'constant\', max_length=max(len(el[1]) for el in SGDCLASSIFIER_LEARNING_RATE)+1)\n    eta0 = models.PositiveIntegerField()\n    power_t = models.FloatField()\n    n_iter_no_change = models.PositiveIntegerField()\n    validation_fraction = models.FloatField()\n    average = models.BooleanField()\n\n    def to_dict(self):\n        return {\n            \'loss\': self.loss,\n            \'penalty\': self.penalty,\n            \'alpha\': self.alpha,\n            \'l1_ratio\': self.l1_ratio,\n            \'fit_intercept\': self.fit_intercept,\n            \'tol\': self.tol,\n            \'epsilon\': self.epsilon,\n            \'learning_rate\': self.learning_rate,\n            \'eta0\': self.eta0,\n            \'power_t\': self.power_t,\n            \'n_iter_no_change\': self.n_iter_no_change,\n            \'validation_fraction\': self.validation_fraction,\n            \'average\': self.average\n        }\n\n\nPERCEPTRON_PENALTY = (\n    (\'l1\', \'l1\'),\n    (\'l2\', \'l2\'),\n    (\'elasticnet\', \'elasticnet\')\n)\n\n\nclass Perceptron(Classification):\n    penalty = models.CharField(choices=PERCEPTRON_PENALTY, default=\'l1\', max_length=max(len(el[1]) for el in PERCEPTRON_PENALTY)+1, null=True)\n    alpha = models.FloatField()\n    fit_intercept = models.BooleanField()\n    tol = models.FloatField()\n    shuffle = models.BooleanField()\n    eta0 = models.PositiveIntegerField()\n    validation_fraction = models.FloatField()\n    n_iter_no_change = models.PositiveIntegerField()\n\n    def to_dict(self):\n        return {\n            \'penalty\': self.penalty,\n            \'alpha\': self.alpha,\n            \'fit_intercept\': self.fit_intercept,\n            \'tol\': self.tol,\n            \'shuffle\': self.shuffle,\n            \'eta0\': self.eta0,\n            \'validation_fraction\': self.validation_fraction,\n            \'n_iter_no_change\': self.n_iter_no_change\n        }\n\n\nNEURAL_NETWORKS_ACTIVATION = (\n    (\'sigmoid\', \'sigmoid\'),\n    (\'tanh\', \'tanh\'),\n    (\'relu\', \'relu\')\n)\n\n\nclass NeuralNetwork(Classification):\n    n_hidden_layers = models.PositiveIntegerField()\n    n_hidden_units = models.PositiveIntegerField()\n    activation = models.CharField(choices=NEURAL_NETWORKS_ACTIVATION, default=\'relu\', max_length=max(len(el[1]) for el in NEURAL_NETWORKS_ACTIVATION)+1)\n    n_epochs = models.PositiveIntegerField()\n    dropout_rate = models.PositiveIntegerField()\n\n    def to_dict(self):\n        return {\n            \'n_hidden_layers\': self.n_hidden_layers,\n            \'n_hidden_units\': self.n_hidden_units,\n            \'activation\': self.activation,\n            \'n_epochs\': self.n_epochs,\n            \'dropout_rate\': self.dropout_rate\n        }\n'"
src/predictive_model/migrations/__init__.py,0,b''
src/predictive_model/regression/__init__.py,0,b''
src/predictive_model/regression/apps.py,0,"b""from src.predictive_model.apps import PredictiveModelConfig\n\n\nclass RegressionConfig(PredictiveModelConfig):\n    name = 'src.predictive_model.regression'\n"""
src/predictive_model/regression/custom_regression_models.py,0,"b'from typing import Dict, Union\n\nfrom keras import Input, Model\nfrom keras.layers import Flatten, Dense, Dropout\nfrom numpy import ndarray\nfrom pandas import DataFrame\nfrom sklearn.base import RegressorMixin\n\nfrom src.encoding.encoding_parser import EncodingParser\nfrom src.predictive_model.models import PredictiveModels\n\n\nclass NNRegressor(RegressorMixin):\n    """"""\n    Neural Network regressor, implements the same methods as the sklearn models to make it simple to add\n    """"""\n\n    # noinspection PyTypeChecker\n    def __init__(self, **kwargs: Dict[str, Union[int, str, float]]):\n        """"""initializes the Neural Network regressor\n\n        :param kwargs: configuration containing the predictive_model parameters, encoding and training parameters\n\n        """"""\n\n        self._n_hidden_layers = int(kwargs[\'n_hidden_layers\'])\n        self._n_hidden_units = int(kwargs[\'n_hidden_units\'])\n        self._activation = str(kwargs[\'activation\'])\n        self._n_epochs = int(kwargs[\'n_epochs\'])\n        self._encoding = str(kwargs[\'encoding\'])\n        self._dropout_rate = float(kwargs[\'dropout_rate\'])\n        self._encoding_parser = EncodingParser(self._encoding, None, task=PredictiveModels.REGRESSION.value)\n        self._model = None\n\n    def fit(self, train_data: DataFrame, targets: ndarray) -> None:\n        """"""creates and fits the predictive_model\n\n        first the encoded data is parsed, then the predictive_model created and then trained\n\n        :param train_data: encoded training dataset\n        :param targets: encoded target dataset\n\n        """"""\n        targets = DataFrame(targets, columns=[\'label\'])\n\n        train_data = self._encoding_parser.parse_training_dataset(train_data)\n        targets = self._encoding_parser.parse_targets(targets)\n\n        model_inputs = Input(train_data.shape[1:])\n        predicted = model_inputs\n\n        if self._encoding in [\'simpleIndex\', \'complex\', \'lastPayload\']:\n            predicted = Flatten()(predicted)\n\n        for _ in range(self._n_hidden_layers):\n            predicted = Dense(self._n_hidden_units, activation=self._activation)(predicted)\n            predicted = Dropout(self._dropout_rate)(predicted)\n\n        predicted = Dense(1, activation=\'sigmoid\')(predicted)\n\n        self._model = Model(model_inputs, predicted)\n        self._model.compile(loss=\'mse\', optimizer=\'adam\')\n\n        self._model.fit(train_data, targets, epochs=self._n_epochs)\n\n    def predict(self, test_data: DataFrame) -> ndarray:\n        """"""returns predictive_model predictions\n\n        parses the encoded test dataset, then returns the predictive_model predictions\n\n        :param test_data: encoded test dataset\n        :return: predictive_model predictions\n\n        """"""\n        test_data = self._encoding_parser.parse_testing_dataset(test_data)\n\n        predictions = self._model.predict(test_data)\n        predictions = self._encoding_parser.denormalize_predictions(predictions)\n        return predictions\n\n    def reset(self) -> None:\n        """"""\n        placeholder to allow use with other sklearn algorithms\n\n        """"""\n'"
src/predictive_model/regression/methods_default_config.py,0,"b""def regression_random_forest():\n    return {\n        'n_estimators': 10,\n        'max_depth': None,\n        'max_features': 'auto',\n        'n_jobs': -1,\n        'random_state': 21\n    }\n\n\ndef regression_lasso():\n    return {\n        'alpha': 1.0,\n        'fit_intercept': True,\n        'normalize': False,\n        'random_state': 21\n    }\n\n\ndef regression_linear():\n    return {\n        'fit_intercept': True,\n        'n_jobs': -1,\n        'normalize': False\n    }\n\n\ndef regression_xgboost():\n    return {\n        'n_estimators': 100,\n        'max_depth': 3\n    }\n\n\ndef regression_nn():\n    return {\n        'n_hidden_layers': 1,\n        'n_hidden_units': 10,\n        'activation': 'sigmoid',\n        'n_epochs': 10,\n        'dropout_rate': 0.0\n    }\n"""
src/predictive_model/regression/models.py,0,"b'from enum import Enum\n\nfrom django.db import models\n\nfrom src.predictive_model.models import PredictiveModel, PredictiveModels\nfrom src.predictive_model.regression.methods_default_config import regression_random_forest, regression_lasso, \\\n    regression_linear, regression_xgboost, regression_nn\n\n\nclass RegressionMethods(Enum):\n    LINEAR = \'linear\'\n    RANDOM_FOREST = \'randomForest\'\n    LASSO = \'lasso\'\n    XGBOOST = \'xgboost\'\n    NN = \'nn\'\n\n\nREGRESSION_LASSO = \'{}.{}\'.format(PredictiveModels.REGRESSION.value, RegressionMethods.LASSO.value)\nREGRESSION_LINEAR = \'{}.{}\'.format(PredictiveModels.REGRESSION.value, RegressionMethods.LINEAR.value)\nREGRESSION_XGBOOST = \'{}.{}\'.format(PredictiveModels.REGRESSION.value, RegressionMethods.XGBOOST.value)\nREGRESSION_RANDOM_FOREST = \'{}.{}\'.format(PredictiveModels.REGRESSION.value, RegressionMethods.RANDOM_FOREST.value)\nREGRESSION_NN = \'{}.{}\'.format(PredictiveModels.REGRESSION.value, RegressionMethods.NN.value)\n\nREGRESSION_METHOD_MAPPINGS = (\n    (RegressionMethods.LINEAR.value, \'linear\'),\n    (RegressionMethods.RANDOM_FOREST.value, \'randomForest\'),\n    (RegressionMethods.LASSO.value, \'lasso\'),\n    (RegressionMethods.XGBOOST.value, \'xgboost\'),\n    (RegressionMethods.NN.value, \'nn\')\n)\n\n\nclass Regression(PredictiveModel):\n    """"""Container of Regression to be shown in frontend""""""\n\n    @staticmethod\n    def init(configuration: dict):\n        regressor_type = configuration[\'prediction_method\']\n        if regressor_type == RegressionMethods.RANDOM_FOREST.value:\n            default_configuration = regression_random_forest()\n            return RandomForest.objects.get_or_create(\n                prediction_method=regressor_type,\n                predictive_model=PredictiveModels.REGRESSION.value,\n                n_estimators=configuration.get(\'n_estimators\', default_configuration[\'n_estimators\']),\n                max_features=configuration.get(\'max_features\', default_configuration[\'max_features\']),\n                max_depth=configuration.get(\'max_depth\', default_configuration[\'max_depth\']),\n            )[0]\n        elif regressor_type == RegressionMethods.LASSO.value:\n            default_configuration = regression_lasso()\n            return Lasso.objects.get_or_create(\n                prediction_method=regressor_type,\n                predictive_model=PredictiveModels.REGRESSION.value,\n                alpha=configuration.get(\'alpha\', default_configuration[\'alpha\']),\n                fit_intercept=configuration.get(\'fit_intercept\', default_configuration[\'fit_intercept\']),\n                normalize=configuration.get(\'normalize\', default_configuration[\'normalize\'])\n            )[0]\n        elif regressor_type == RegressionMethods.LINEAR.value:\n            default_configuration = regression_linear()\n            return Linear.objects.get_or_create(\n                prediction_method=regressor_type,\n                predictive_model=PredictiveModels.REGRESSION.value,\n                fit_intercept=configuration.get(\'fit_intercept\', default_configuration[\'fit_intercept\']),\n                normalize=configuration.get(\'normalize\', default_configuration[\'normalize\']),\n            )[0]\n        elif regressor_type == RegressionMethods.XGBOOST.value:\n            default_configuration = regression_xgboost()\n            return XGBoost.objects.get_or_create(\n                prediction_method=regressor_type,\n                predictive_model=PredictiveModels.REGRESSION.value,\n                max_depth=configuration.get(\'max_depth\', default_configuration[\'max_depth\']),\n                n_estimators=configuration.get(\'n_estimators\', default_configuration[\'n_estimators\'])\n            )[0]\n        elif regressor_type == RegressionMethods.NN.value:\n            default_configuration = regression_nn()\n            return NeuralNetwork.objects.get_or_create(\n                prediction_method=regressor_type,\n                predictive_model=PredictiveModels.REGRESSION.value,\n                n_hidden_layers=configuration.get(\'n_hidden_layers\', default_configuration[\'n_hidden_layers\']),\n                n_hidden_units=configuration.get(\'n_hidden_units\', default_configuration[\'n_hidden_units\']),\n                activation=configuration.get(\'activation\', default_configuration[\'activation\']),\n                n_epochs=configuration.get(\'n_epochs\', default_configuration[\'n_epochs\']),\n                dropout_rate=configuration.get(\'dropout_rate\', default_configuration[\'dropout_rate\'])\n            )[0]\n        else:\n            raise ValueError(\'regressor type {} not recognized\'.format(regressor_type))\n\n\nRANDOM_FOREST_MAX_FEATURES_MAPPINGS = (\n    (\'auto\', \'auto\'),\n    (\'sqrt\', \'sqrt\'),\n    (\'log2\', \'log2\')\n)\n\n\nclass RandomForest(Regression):\n    n_estimators = models.PositiveIntegerField()\n    max_features = models.CharField(choices=RANDOM_FOREST_MAX_FEATURES_MAPPINGS, null=True, default=None, max_length=max(len(el[1]) for el in RANDOM_FOREST_MAX_FEATURES_MAPPINGS) + 1)\n    max_depth = models.PositiveIntegerField(null=True)\n    random_state = 21\n\n    def to_dict(self):\n        return {\n            \'n_estimators\': self.n_estimators,\n            \'max_features\': self.max_features,\n            \'max_depth\': self.max_depth,\n            \'random_state\': self.random_state\n        }\n\n\nclass Lasso(Regression):\n    alpha = models.FloatField()\n    fit_intercept = models.BooleanField()\n    normalize = models.BooleanField()\n\n    def to_dict(self):\n        return {\n            \'alpha\': self.alpha,\n            \'fit_intercept\': self.fit_intercept,\n            \'normalize\': self.normalize\n        }\n\n\nclass Linear(Regression):\n    fit_intercept = models.BooleanField()\n    normalize = models.BooleanField()\n\n    def to_dict(self):\n        return {\n            \'fit_intercept\': self.fit_intercept,\n            \'normalize\': self.normalize\n        }\n\n\nclass XGBoost(Regression):\n    max_depth = models.PositiveIntegerField()\n    n_estimators = models.PositiveIntegerField()\n\n    def to_dict(self):\n        return {\n            \'max_depth\': self.max_depth,\n            \'n_estimators\': self.n_estimators\n        }\n\n\nNEURAL_NETWORKS_ACTIVATION = (\n    (\'sigmoid\', \'sigmoid\'),\n    (\'tanh\', \'tanh\'),\n    (\'relu\', \'relu\')\n)\n\n\nclass NeuralNetwork(Regression):\n    n_hidden_layers = models.PositiveIntegerField()\n    n_hidden_units = models.PositiveIntegerField()\n    activation = models.CharField(choices=NEURAL_NETWORKS_ACTIVATION, default=\'relu\', max_length=max(len(el[1]) for el in NEURAL_NETWORKS_ACTIVATION) + 1)\n    n_epochs = models.PositiveIntegerField()\n    dropout_rate = models.PositiveIntegerField()\n\n    def to_dict(self):\n        return {\n            \'n_hidden_layers\': self.n_hidden_layers,\n            \'n_hidden_units\': self.n_hidden_units,\n            \'activation\': self.activation,\n            \'n_epochs\': self.n_epochs,\n            \'dropout_rate\': self.dropout_rate\n\n        }\n'"
src/predictive_model/regression/regression.py,0,"b'""""""\nregression methods and functionalities\n""""""\nfrom typing import Any\n\nimport pandas as pd\nfrom pandas import DataFrame\nfrom sklearn import clone\nfrom sklearn.base import RegressorMixin\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.externals import joblib\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LinearRegression\nfrom xgboost import XGBRegressor\n\nfrom src.clustering.clustering import Clustering\nfrom src.core.common import get_method_config\nfrom src.encoding.models import Encoding\nfrom src.jobs.models import Job, ModelType\nfrom src.predictive_model.regression.custom_regression_models import NNRegressor\nfrom src.predictive_model.regression.models import RegressionMethods\nfrom src.utils.django_orm import duplicate_orm_row\nfrom src.utils.result_metrics import calculate_results_regression\n\npd.options.mode.chained_assignment = None\n\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\ndef regression(training_df: DataFrame, test_df: DataFrame, clusterer: Clustering, job: Job) -> (dict, dict):\n    """"""main regression entry point\n\n    train and tests the regressor using the provided data\n\n    :param clusterer:\n    :param training_df: training DataFrame\n    :param test_df: testing DataFrame\n    :param job: job configuration\n    :return: predictive_model scores and split\n\n    """"""\n    train_data, test_data = _prep_data(training_df, test_df)\n\n    job.encoding = duplicate_orm_row(Encoding.objects.filter(pk=job.encoding.pk)[0])  # TODO: maybe here would be better an intelligent get_or_create...\n    job.encoding.features = list(train_data.columns.values)\n    job.encoding.save()\n    job.save()\n\n    model_split = _train(train_data, _choose_regressor(job), clusterer)\n    results_df = _test(model_split, test_data)\n\n    results = calculate_results_regression(results_df, job.labelling)\n\n    return results, model_split\n\n\ndef regression_single_log(input_df: DataFrame, model: dict) -> DataFrame:\n    """"""single log regression\n\n    classifies a single log using the provided TODO: complete\n\n    :param input_df: input DataFrame\n    :param model: TODO: complete\n    :return: predictive_model scores\n\n    """"""\n    split = model[\'split\']\n    input_df = input_df.drop([col for col in [\'label\', \'remaining_time\', \'trace_id\'] if col in input_df.columns], 1)\n\n    # TODO load predictive_model more wisely\n    model_split = dict()\n    model_split[ModelType.CLUSTERER.value] = joblib.load(split[\'clusterer_path\'])\n    model_split[ModelType.REGRESSOR.value] = joblib.load(split[\'model_path\'])\n    results_df = _test(model_split, input_df)\n    return results_df\n\n\ndef _train(train_data: DataFrame, regressor: RegressorMixin, clusterer: Clustering) -> dict:\n    models = dict()\n\n    train_data = clusterer.cluster_data(train_data)\n\n    for cluster in range(clusterer.n_clusters):\n\n        cluster_train_df = train_data[cluster]\n        if not cluster_train_df.empty:\n            cluster_targets_df = cluster_train_df[\'label\']\n            regressor.fit(cluster_train_df.drop(\'label\', 1), cluster_targets_df.values.ravel())\n\n            models[cluster] = regressor\n            try:\n                regressor = clone(regressor)\n            except TypeError:\n                regressor = clone(regressor, safe=False)\n\n    return {ModelType.CLUSTERER.value: clusterer, ModelType.REGRESSOR.value: models}\n\n\ndef _test(model_split: dict, data: DataFrame) -> DataFrame:\n    clusterer = model_split[ModelType.CLUSTERER.value]\n    regressor = model_split[ModelType.REGRESSOR.value]\n\n    test_data = clusterer.cluster_data(data)\n\n    results_df = DataFrame()\n\n    for cluster in range(clusterer.n_clusters):\n        cluster_test_df = test_data[cluster]\n        if not cluster_test_df.empty:\n            cluster_test_df[\'predicted\'] = regressor[cluster].predict(cluster_test_df.drop(\'label\', 1))\n            results_df = results_df.append(cluster_test_df)\n    return results_df\n\n\ndef predict(job: Job, data: DataFrame) -> Any:\n    data = data.drop([\'trace_id\'], 1)\n    clusterer = Clustering.load_model(job)\n    test_data = clusterer.cluster_data(data)\n\n    regressor = joblib.load(job.predictive_model.model_path)\n\n    result = None\n\n    for cluster in range(clusterer.n_clusters):\n        cluster_test_df = test_data[cluster]\n        if not cluster_test_df.empty:\n            result = regressor[cluster].predict(cluster_test_df.drop(\'label\', 1))\n\n    return result\n\n\ndef _prep_data(training_df: DataFrame, test_df: DataFrame) -> (DataFrame, DataFrame):\n    train_data = training_df\n    test_data = test_df\n\n    test_data = test_data.drop([\'trace_id\'], 1)\n    train_data = train_data.drop(\'trace_id\', 1)\n    return train_data, test_data\n\n\ndef _choose_regressor(job: Job) -> RegressorMixin:\n    method, config = get_method_config(job)\n    config.pop(\'regression_method\', None)\n    logger.info(""Using method {} with config {}"".format(method, config))\n    if method == RegressionMethods.LINEAR.value:\n        regressor = LinearRegression(**config)\n    elif method == RegressionMethods.RANDOM_FOREST.value:\n        regressor = RandomForestRegressor(**config)\n    elif method == RegressionMethods.LASSO.value:\n        regressor = Lasso(**config)\n    elif method == RegressionMethods.XGBOOST.value:\n        regressor = XGBRegressor(**config)\n    elif method == RegressionMethods.NN.value:\n        config[\'encoding\'] = job.encoding.value_encoding\n        regressor = NNRegressor(**config)\n    else:\n        raise ValueError(""Unexpected regression method {}"".format(method))\n    return regressor\n'"
src/predictive_model/time_series_prediction/TimeSeriesPredictorMixin.py,0,b'class TimeSeriesPredictorMixin:\n    pass\n'
src/predictive_model/time_series_prediction/__init__.py,0,b''
src/predictive_model/time_series_prediction/apps.py,0,"b""from src.predictive_model.apps import PredictiveModelConfig\n\n\nclass TimeSeriesPredictionConfig(PredictiveModelConfig):\n    name = 'src.predictive_model.time_series_prediction'\n"""
src/predictive_model/time_series_prediction/custom_time_series_prediction_models.py,3,"b'from typing import Dict, Union\n\nimport numpy as np\nfrom keras import Input, Model\nfrom keras.layers import Dense\nfrom keras.layers import LSTM, GRU, Reshape\nfrom numpy import ndarray\nfrom pandas import DataFrame\n\nfrom src.encoding.encoding_parser import EncodingParser\nfrom src.predictive_model.models import PredictiveModels\nfrom src.predictive_model.time_series_prediction.TimeSeriesPredictorMixin import TimeSeriesPredictorMixin\n\n\nclass RNNTimeSeriesPredictor(TimeSeriesPredictorMixin):\n    """"""\n    Recurrent Neural Network Time Series predictor, implements the same methods as the sklearn models to make it simple\n    to add.\n    This architecture is of the seq2seq type, taking as input a sequence (0...t) and outputting a sequence (1...t+1)\n    """"""\n\n    # noinspection PyTypeChecker\n    def __init__(self, **kwargs: Dict[str, Union[int, str, float]]):\n        """"""initializes the Recurrent Neural Network Time Series predictor\n\n        :param kwargs: configuration containing the predictive_model parameters, encoding and training parameters\n\n        """"""\n\n        self._n_units = int(kwargs[\'n_units\'])\n        self._rnn_type = str(kwargs[\'rnn_type\'])\n        self._n_epochs = int(kwargs[\'n_epochs\'])\n        self._encoding = str(kwargs[\'encoding\'])\n        self._prefix_length = 0.25  # n x dataset length\n        self._prediction_limit = 1.5  # n x dataset length\n        self._encoding_parser = EncodingParser(self._encoding, None, task=PredictiveModels.TIME_SERIES_PREDICTION.value)\n        self._model = None\n\n    def fit(self, train_data: DataFrame) -> None:\n        """"""creates and fits the predictive_model\n\n        first the encoded data is parsed, then the predictive_model created and then trained\n\n        :param train_data: encoded training dataset\n\n        """"""\n        train_data = self._encoding_parser.parse_training_dataset(train_data)\n        targets = train_data[:, 1:]\n        train_data = train_data[:, :-1]\n\n        model_inputs = Input(train_data.shape[1:])\n        predicted = model_inputs\n\n        predicted = Reshape((train_data.shape[1], train_data.shape[2] * train_data.shape[3]))(predicted)\n\n        if self._rnn_type == \'lstm\':\n            predicted = LSTM(self._n_units, activation=\'relu\', return_sequences=True)(predicted)\n        elif self._rnn_type == \'gru\':\n            predicted = GRU(self._n_units, activation=\'relu\', return_sequences=True)(predicted)\n\n        predicted = Dense((self._encoding_parser.get_n_classes_x()) * self._encoding_parser.n_event_features)(predicted)\n        predicted = Reshape((train_data.shape[1], train_data.shape[2], train_data.shape[3]))(predicted)\n\n        predicted = Dense(train_data.shape[3], activation=\'softmax\')(predicted)\n\n        self._model = Model(model_inputs, predicted)\n\n        self._model.compile(loss=\'categorical_crossentropy\', optimizer=\'adam\')\n        self._model.fit(train_data, targets, epochs=self._n_epochs)\n\n    def predict(self, test_data: DataFrame) -> ndarray:\n        """"""returns predictive_model predictions\n\n        parses the encoded test dataset, then returns the predictive_model predictions\n\n        :param test_data: encoded test dataset\n        :return: predictive_model predictions\n\n        """"""\n        test_data = self._encoding_parser.parse_testing_dataset(test_data)\n\n        temp_prediction_length = test_data.shape[1] - 1\n        temp_prediction = np.zeros((test_data.shape[0], temp_prediction_length, test_data.shape[2], test_data.shape[3]))\n\n        final_prediction = test_data[:, :int(self._prefix_length * test_data.shape[1])]\n        i = 0\n        while True:\n            temp_prediction_index = min(temp_prediction_length, final_prediction.shape[1])\n            temp_prediction[:, :temp_prediction_index] = final_prediction[:, -temp_prediction_index:]\n\n            model_predictions = self._model.predict(temp_prediction)\n\n            next_step_prediction = model_predictions[:, temp_prediction_index - 1:temp_prediction_index, :]\n            final_prediction = np.hstack((final_prediction, next_step_prediction))\n\n            if 0 in next_step_prediction or i == int(self._prediction_limit * test_data.shape[1]):\n                break\n            i += 1\n\n        final_prediction = np.argmax(final_prediction, -1)\n        return final_prediction\n'"
src/predictive_model/time_series_prediction/methods_default_config.py,0,"b""def time_series_prediction_rnn():\n    return {\n        'n_units': 16,\n        'rnn_type': 'lstm',\n        'n_epochs': 10,\n    }\n"""
src/predictive_model/time_series_prediction/models.py,0,"b'from enum import Enum\n\nfrom django.db import models\n\nfrom src.predictive_model.models import PredictiveModel, PredictiveModels\nfrom src.predictive_model.time_series_prediction.methods_default_config import time_series_prediction_rnn\n\n\nclass TimeSeriesPredictionMethods(Enum):\n    RNN = \'rnn\'\n\n\nTIME_SERIES_PREDICTION_METHOD_MAPPINGS = (\n    (TimeSeriesPredictionMethods.RNN.value, \'rnn\'),\n)\n\nTIME_SERIES_PREDICTION_RNN = \'{}.{}\'.format(PredictiveModels.TIME_SERIES_PREDICTION.value,\n                                            TimeSeriesPredictionMethods.RNN.value)\n\n\nclass TimeSeriesPrediction(PredictiveModel):\n    """"""Container of Classification to be shown in frontend""""""\n\n    @staticmethod\n    def init(configuration: dict):\n        time_series_predictor_type = configuration[\'prediction_method\']\n        if time_series_predictor_type == TimeSeriesPredictionMethods.RNN.value:\n            default_configuration = time_series_prediction_rnn()\n            return RecurrentNeuralNetwork.objects.get_or_create(\n                prediction_method=time_series_predictor_type,\n                predictive_model=PredictiveModels.TIME_SERIES_PREDICTION.value,\n                n_units=configuration.get(\'n_units\', default_configuration[\'n_units\']),\n                rnn_type=configuration.get(\'rnn_type\', default_configuration[\'rnn_type\']),\n                n_epochs=configuration.get(\'n_epochs\', default_configuration[\'n_epochs\'])\n            )[0]\n        else:\n            raise ValueError(\'time series predictor type {} not recognized\'.format(time_series_predictor_type))\n\n\nRNN_TYPES = (\n    (\'lstm\', \'lstm\'),\n    (\'gru\', \'gru\')\n)\n\n\nclass RecurrentNeuralNetwork(TimeSeriesPrediction):\n    n_units = models.PositiveIntegerField()\n    rnn_type = models.CharField(choices=RNN_TYPES, default=\'lstm\', max_length=max(len(el[1]) for el in RNN_TYPES)+1)\n    n_epochs = models.PositiveIntegerField()\n\n    def to_dict(self):\n        return {\n            \'n_units\': self.n_units,\n            \'rnn_type\': self.rnn_type,\n            \'n_epochs\': self.n_epochs\n        }\n'"
src/predictive_model/time_series_prediction/time_series_prediction.py,3,"b'""""""\ntime series prediction methods and functionalities\n""""""\n\nfrom typing import Any\n\nimport numpy as np\nimport pandas as pd\nfrom pandas import DataFrame\nfrom sklearn import clone\nfrom sklearn.externals import joblib\n\nfrom src.clustering.clustering import Clustering\nfrom src.core.common import get_method_config\nfrom src.jobs.models import Job, ModelType\nfrom src.predictive_model.time_series_prediction import TimeSeriesPredictorMixin\nfrom src.predictive_model.time_series_prediction.custom_time_series_prediction_models import RNNTimeSeriesPredictor\nfrom src.predictive_model.time_series_prediction.models import TimeSeriesPredictionMethods\nfrom src.utils.result_metrics import calculate_results_time_series_prediction, \\\n    calculate_nlevenshtein\n\npd.options.mode.chained_assignment = None\n\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\ndef time_series_prediction(training_df: DataFrame, test_df: DataFrame, clusterer: Clustering, job: Job) -> (dict, dict):\n    """"""main time series prediction entry point\n\n    train and tests the time series predictor using the provided data\n\n    :param clusterer:\n    :param training_df: training DataFrame\n    :param test_df: testing DataFrame\n    :param job: job configuration\n    :return: predictive_model scores and split\n\n    """"""\n    train_data, test_data = _drop_columns(training_df, test_df)\n\n    model_split = _train(train_data, _choose_time_series_predictor(job), clusterer)\n    results_df, nlevenshtein = _test(model_split, test_data, evaluation=True)\n\n    results = _prepare_results(results_df, nlevenshtein)\n\n    # TODO how do I save the predictive_model?\n    # model_split[\'type\'] = job[\'clustering\']\n\n    return results, model_split\n\n\ndef _train(train_data: DataFrame, time_series_predictor: Any, clusterer: Clustering) -> dict:\n    models = dict()\n\n    train_data = clusterer.cluster_data(train_data)\n\n    for cluster in range(clusterer.n_clusters):\n\n        cluster_train_df = train_data[cluster]\n        if not cluster_train_df.empty:\n            time_series_predictor.fit(cluster_train_df)\n\n            models[cluster] = time_series_predictor\n            time_series_predictor = clone(time_series_predictor, safe=False)\n    return {ModelType.CLUSTERER.value: clusterer, ModelType.TIME_SERIES_PREDICTOR.value: models}\n\n\ndef _test(model_split: dict, data: DataFrame, evaluation: bool) -> (DataFrame, float):\n    clusterer = model_split[ModelType.CLUSTERER.value]\n    time_series_predictor = model_split[ModelType.TIME_SERIES_PREDICTOR.value]\n\n    test_data = clusterer.cluster_data(data)\n\n    results_df = DataFrame()\n\n    non_empty_clusters = clusterer.n_clusters\n\n    nlevenshtein_distances = []\n\n    for cluster in range(clusterer.n_clusters):\n        cluster_test_df = test_data[cluster]\n        if cluster_test_df.empty:\n            non_empty_clusters -= 1\n        else:\n            if evaluation:\n                predictions = time_series_predictor[cluster].predict(cluster_test_df)\n\n                nlevenshtein = calculate_nlevenshtein(cluster_test_df.values, predictions)\n                nlevenshtein_distances.append(nlevenshtein)\n            temp_actual = cluster_test_df.values.tolist()\n            cluster_test_df[\'predicted\'] = time_series_predictor[cluster].predict(cluster_test_df).tolist()\n            cluster_test_df[\'actual\'] = temp_actual\n\n            results_df = results_df.append(cluster_test_df)\n\n    nlevenshtein = float(np.mean(nlevenshtein_distances))\n\n    return results_df, nlevenshtein\n\n\ndef predict(job: Job, data: DataFrame) -> Any:\n    model_split = joblib.load(job.predictive_model.model_path)\n    clusterer = model_split[ModelType.CLUSTERER.value]\n    test_data = clusterer.cluster_data(data)\n\n    time_series_predictor = joblib.load(job.predictive_model.model_path)\n\n    result = None\n\n    non_empty_clusters = clusterer.n_clusters\n\n    for cluster in range(clusterer.n_clusters):\n        cluster_test_df = test_data[cluster]\n        if cluster_test_df.empty:\n            non_empty_clusters -= 1\n        else:\n            result = time_series_predictor[cluster].predict(cluster_test_df).tolist()\n\n    return result\n\n\ndef _prepare_results(df: DataFrame, nlevenshtein: float) -> dict:\n    actual = np.array(df[\'actual\'].values.tolist())\n    predicted = np.array(df[\'predicted\'].values.tolist())\n    row = calculate_results_time_series_prediction(actual, predicted)\n    row[\'nlevenshtein\'] = nlevenshtein\n    return row\n\n\ndef _drop_columns(train_df: DataFrame, test_df: DataFrame) -> (DataFrame, DataFrame):\n    train_df = train_df.drop([\'trace_id\', \'label\'], 1)\n    test_df = test_df.drop([\'trace_id\', \'label\'], 1)\n    return train_df, test_df\n\n\ndef _choose_time_series_predictor(job: Job) -> TimeSeriesPredictorMixin:\n    method, config = get_method_config(job)\n    config.pop(\'time_series_prediction_method\', None)\n    logger.info(""Using method {} with config {}"".format(method, config))\n    if method == TimeSeriesPredictionMethods.RNN.value:\n        config[\'encoding\'] = job.encoding.value_encoding\n        time_series_predictor = RNNTimeSeriesPredictor(**config)\n    else:\n        raise ValueError(""Unexpected time series prediction method {}"".format(method))\n    return time_series_predictor\n'"
src/runtime/tests/__init__.py,0,b''
src/runtime/tests/test_runtime.py,0,"b""from django.test.testcases import TestCase\nfrom rest_framework.test import APIClient\n\nfrom src.jobs.tasks import prediction_task\nfrom src.runtime.tasks import runtime_task, replay_task, replay_prediction_task\nfrom src.split.models import SplitTypes, SplitOrderingMethods\nfrom src.utils.django_orm import duplicate_orm_row\nfrom src.utils.file_service import get_log\nfrom src.utils.tests_utils import create_test_job, create_test_split, create_test_log\n\n\nclass TestRuntime(TestCase):\n\n    def test_replay(self):\n\n        job = create_test_job()\n        runtime_job = duplicate_orm_row(job)\n\n        runtime_log = create_test_log(log_name='runtime_example.xes',\n                                      log_path='cache/log_cache/test_logs/runtime_test.xes')\n        runtime_job.split = create_test_split(split_type=SplitTypes.SPLIT_DOUBLE.value,\n                                              split_ordering_method=SplitOrderingMethods.SPLIT_SEQUENTIAL.value,\n                                              train_log=runtime_log,\n                                              test_log=runtime_log)\n\n        requests = replay_task(runtime_job, job)\n        self.assertEqual(len(requests), 2)\n\n    def test_create_replay(self):\n        job = create_test_job()\n        split = create_test_split()\n        client = APIClient()\n        response = client.post('/runtime/replay/', {\n            'jobId': job.id,\n            'splitId': split.id,\n            }, format='json')\n\n        self.assertEqual(201, response.status_code)\n\n    def test_create_runtime(self):\n        job = create_test_job()\n        split = create_test_split()\n        client = APIClient()\n        response = client.post('/runtime/prediction/', {\n            'jobId': job.id,\n            'splitId': split.id,\n            }, format='json')\n\n        self.assertEqual(201, response.status_code)\n\n    def test_runtime(self):\n        job = create_test_job(create_models=True)\n        runtime_log = create_test_log(log_name='runtime_example.xes',\n                                      log_path='cache/log_cache/test_logs/runtime_test.xes')\n\n        prediction_task(job.id)\n        job.refresh_from_db()\n        job.split = create_test_split(split_type=SplitTypes.SPLIT_DOUBLE.value,\n                                      split_ordering_method=SplitOrderingMethods.SPLIT_SEQUENTIAL.value,\n                                      train_log=runtime_log,\n                                      test_log=runtime_log)\n\n        runtime_task(job)\n\n    def test_replay_prediction(self):\n        job = create_test_job(create_models=True)\n        runtime_log = create_test_log(log_name='runtime_example.xes',\n                                      log_path='cache/log_cache/test_logs/runtime_test.xes')\n        log = get_log(runtime_log)\n        prediction_task(job.id)\n        job.refresh_from_db()\n\n        replay_prediction_task(job, job, log)\n"""
src/split/migrations/__init__.py,0,b''
src/split/tests/__init__.py,0,b''
src/split/tests/test_split.py,0,"b'from django.test import TestCase\n\nfrom src.core.core import get_encoded_logs\nfrom src.encoding.models import ValueEncodings\nfrom src.jobs.models import JobTypes\nfrom src.labelling.models import LabelTypes\nfrom src.predictive_model.classification.models import ClassificationMethods\nfrom src.predictive_model.models import PredictiveModels\nfrom src.split.models import SplitTypes, SplitOrderingMethods\nfrom src.utils.tests_utils import create_test_split, create_test_log, create_test_encoding, create_test_job, \\\n    create_test_labelling, create_test_predictive_model\n\n\nclass TestSplitHandling(TestCase):\n    """"""Proof of concept tests""""""\n\n    def setUp(self) -> None:\n        self.log = create_test_log(\n            log_name=\'general_example.xes\',\n            log_path=\'cache/log_cache/test_logs/general_example.xes\'\n        )\n\n        self.encoding = create_test_encoding(\n            prefix_length=4,\n            padding=True,\n            value_encoding=ValueEncodings.SIMPLE_INDEX.value\n        )\n\n        self.labelling = create_test_labelling(\n            label_type=LabelTypes.NEXT_ACTIVITY.value,\n        )\n\n        self.predictive_model = create_test_predictive_model(\n            predictive_model=PredictiveModels.CLASSIFICATION.value,\n            prediction_method=ClassificationMethods.DECISION_TREE.value\n        )\n\n    def test_split_materialisation(self):\n        split = create_test_split(\n            split_type=SplitTypes.SPLIT_SINGLE.value,\n            split_ordering_method=SplitOrderingMethods.SPLIT_SEQUENTIAL.value,\n            test_size=0.2,\n            original_log=self.log\n        )\n        job = create_test_job(\n            split=split,\n            encoding=self.encoding,\n            labelling=self.labelling,\n            clustering=None,\n            create_models=False,\n            predictive_model=self.predictive_model,\n            job_type=JobTypes.PREDICTION.value,\n            hyperparameter_optimizer=None,\n            incremental_train=None\n        )\n        split_id0 = split.id\n        training_df1, test_df1 = get_encoded_logs(job)\n        split_id1 = job.split.id\n        self.assertNotEqual(split_id0, split_id1)\n\n    def test_split_avoid_duplication(self):\n        split = create_test_split(\n            split_type=SplitTypes.SPLIT_SINGLE.value,\n            split_ordering_method=SplitOrderingMethods.SPLIT_SEQUENTIAL.value,\n            test_size=0.2,\n            original_log=self.log\n        )\n        job = create_test_job(\n            split=split,\n            encoding=self.encoding,\n            labelling=self.labelling,\n            clustering=None,\n            create_models=False,\n            predictive_model=self.predictive_model,\n            job_type=JobTypes.PREDICTION.value,\n            hyperparameter_optimizer=None,\n            incremental_train=None\n        )\n        training_df1, test_df1 = get_encoded_logs(job)\n        split_id1 = job.split.id\n        job = create_test_job(\n            split=split,\n            encoding=self.encoding,\n            labelling=self.labelling,\n            clustering=None,\n            create_models=False,\n            predictive_model=self.predictive_model,\n            job_type=JobTypes.PREDICTION.value,\n            hyperparameter_optimizer=None,\n            incremental_train=None\n        )\n        training_df2, test_df2 = get_encoded_logs(job)\n        split_id2 = job.split.id\n        self.assertEqual(split_id1, split_id2)\n'"
src/split/tests/test_views.py,0,"b'from rest_framework.test import APITestCase, APIClient\nfrom src.logs.tests.test_split import split_double\nfrom src.utils.tests_utils import create_test_split, create_test_log, general_example_train_filepath, general_example_test_filepath\n\n\nclass TestViews(APITestCase):\n    def test_get_split_list(self):\n        split = create_test_split()\n        client = APIClient()\n        response = client.get(\'/splits/\' + str(split.id))\n        self.assertEqual(split.id, response.data[\'id\'])\n        self.assertEqual(split.type, response.data[\'type\'])\n\n    def test_post_split_create_split(self):\n        log = create_test_log()\n        client = APIClient()\n        response = client.post(\'/splits/\', {\n            \'original_log\': log.id,\n            \'splitting_method\': \'sequential\',\n            \'test_size\': .2})\n        self.assertEqual(log.id, response.data[\'original_log\'])\n        self.assertEqual(\'sequential\', response.data[\'splitting_method\'])\n        self.assertEqual(.2, response.data[\'test_size\'])\n\n    def test_get_split_train_logs(self):\n        split = split_double()\n        client = APIClient()\n        response = client.get(\'/splits/\' + str(split.id)+""/logs/train"")\n        f = open(general_example_train_filepath, ""r"")\n        self.assertEqual(f.read(), response.content.decode())\n\n    def test_get_split_test_logs(self):\n        split = split_double()\n        client = APIClient()\n        response = client.get(\'/splits/\' + str(split.id) + ""/logs/test"")\n        f = open(general_example_test_filepath, ""r"")\n        self.assertEqual(f.read(), response.content.decode())\n'"
src/utils/tests/__init__.py,0,b''
src/utils/tests/test_event_attributes.py,0,"b""from django.test import TestCase\n\nfrom src.utils.event_attributes import unique_events, unique_events2, get_event_attributes, \\\n    get_additional_columns\nfrom src.utils.file_service import get_log\nfrom src.utils.tests_utils import general_example_test_filepath, \\\n    general_example_train_filepath, general_example_test_filename, create_test_log, general_example_train_filename\n\n\nclass EventAttributes(TestCase):\n    def setUp(self):\n        self.log = get_log(create_test_log(log_name=general_example_test_filename,\n                                           log_path=general_example_test_filepath))\n\n    def test_unique_events(self):\n        events = unique_events(self.log)\n        self.assertEqual(7, len(events))\n\n    def test_multiple_unique_events(self):\n        test_log = get_log(create_test_log(log_name=general_example_test_filename,\n                                           log_path=general_example_test_filepath))\n        training_log = get_log(create_test_log(log_path=general_example_train_filepath,\n                                               log_name=general_example_train_filename))\n        events = unique_events2(training_log, test_log)\n        self.assertEqual(8, len(events))\n\n    def test_event_attributes(self):\n        log = get_log(create_test_log(log_name=general_example_test_filename,\n                                      log_path=general_example_test_filepath))\n        attributes = get_event_attributes(log)\n        self.assertListEqual(attributes, ['Activity', 'Costs', 'Resource', 'org:resource'])\n\n    def test_global_event_attributes(self):\n        log = get_log(create_test_log(log_name=general_example_test_filename,\n                                      log_path=general_example_test_filepath))\n        attributes = get_additional_columns(log)\n        self.assertListEqual(attributes['event_attributes'], ['Activity', 'Costs', 'Resource', 'org:resource'])\n"""
src/utils/tests/test_log_metrics.py,0,"b""from django.test import TestCase\n\nfrom src.utils.file_service import get_log\nfrom src.utils.log_metrics import events_by_date, resources_by_date, event_executions, new_trace_start, \\\n    trace_attributes, events_in_trace, max_events_in_log, trace_ids_in_log, traces_in_log\nfrom src.utils.tests_utils import general_example_filepath, financial_log_filepath, general_example_filename, \\\n    create_test_log, financial_log_filename\n\n\nclass LogTest(TestCase):\n\n    def setUp(self):\n        self.log = get_log(create_test_log(log_name=general_example_filename,\n                                           log_path=general_example_filepath))\n\n    def test_events_by_date(self):\n        result = events_by_date(self.log)\n        self.assertEqual(18, len(result.keys()))\n        self.assertEqual(4, result['2011-01-08'])\n\n    def test_resources_by_date(self):\n        result = resources_by_date(self.log)\n        self.assertEqual(18, len(result.keys()))\n        self.assertEqual(4, result['2010-12-30'])\n        self.assertEqual(3, result['2011-01-08'])\n        self.assertEqual(1, result['2011-01-20'])\n\n    def test_event_executions(self):\n        result = event_executions(self.log)\n        self.assertEqual(8, len(result.keys()))\n        self.assertEqual(9, result['decide'])\n        self.assertEqual(3, result['reject request'])\n\n    def test_new_trace_start(self):\n        result = new_trace_start(self.log)\n        self.assertEqual(2, len(result.keys()))\n        self.assertEqual(3, result['2010-12-30'])\n        self.assertEqual(3, result['2011-01-06'])\n\n    def test_trace_attributes(self):\n        self.log = get_log(create_test_log(log_name=financial_log_filename,\n                                           log_path=financial_log_filepath))\n        result = trace_attributes(self.log)\n        self.assertEqual(2, len(result))\n        self.assertDictEqual({'name': 'AMOUNT_REQ', 'type': 'number', 'example': '20000'},\n                             result[0])\n        self.assertDictEqual({'name': 'REG_DATE', 'type': 'string', 'example': '2011-10-01 00:38:44.546000+02:00'},\n                             result[1])\n\n    def test_events_in_trace(self):\n        result = events_in_trace(self.log)\n        self.assertEqual(6, len(result.keys()))\n        self.assertEqual(9, result['3'])\n\n    def test_max_events_in_log(self):\n        result = max_events_in_log(self.log)\n        self.assertEqual(13, result)\n\n    def test_trace_ids_in_log(self):\n        result = trace_ids_in_log(self.log)\n        self.assertEqual(6, len(result))\n        self.assertEqual('4', result[5])\n\n    def test_traces_in_log(self):\n        result = traces_in_log(self.log)\n        self.assertEqual(6, len(result))\n        self.assertEqual({'concept:name': '3', 'creator': 'Fluxicon Nitro'}, result[0]['attributes'])\n        self.assertEqual('Pete',result[0]['events'][0]['Resource'])\n        self.assertEqual(9, len(result[0]['events']))\n"""
src/utils/tests/test_time_metrics.py,0,"b'from django.test import TestCase\n\nfrom src.utils import log_metrics\nfrom src.utils.file_service import get_log\nfrom src.utils.tests_utils import general_example_filepath, create_test_log, general_example_filename\nfrom src.utils.time_metrics import *\n\n\nclass TimeMetrics(TestCase):\n    def setUp(self):\n        self.log = get_log(create_test_log(log_name=general_example_filename,\n                                           log_path=general_example_filepath))\n\n    def test_calculate_remaining_time(self):\n        trace = self.log[0]\n        seconds = remaining_time_id(trace, 4)\n        self.assertEqual(772020.0, seconds)\n\n        seconds = remaining_time_id(trace, 8)\n        self.assertEqual(0.0, seconds)\n\n    def test_calculate_elapsed_time(self):\n        trace = self.log[0]\n        seconds = elapsed_time_id(trace, 4)\n        self.assertEqual(596760.0, seconds)\n\n        seconds = elapsed_time_id(trace, 0)\n        self.assertEqual(0.0, seconds)\n\n    def test_calculate_duration(self):\n        seconds = duration(self.log[0])\n        self.assertEqual(1368780.0, seconds)\n\n        seconds = duration(self.log[1])\n        self.assertEqual(779580.0, seconds)\n\n    def test_count_on_event_day(self):\n        event_dict = log_metrics.events_by_date(self.log)\n        count = count_on_event_day(self.log[0], event_dict, 0)\n        self.assertEqual(7, count)\n\n    def test_count_on_event_day_no_such_date(self):\n        count = count_on_event_day(self.log[0], dict(), 0)\n        self.assertEqual(0, count)\n\n    def test_count_on_event_day_event_out_of_range(self):\n        event_dict = log_metrics.events_by_date(self.log)\n        count = count_on_event_day(self.log[0], event_dict, 100)\n        self.assertEqual(0, count)\n'"
src/encoding/declare/tests/__init__.py,0,b''
src/encoding/declare/tests/test_declare.py,0,"b'from django.test import TestCase\n\nfrom src.core.core import get_encoded_logs\nfrom src.encoding.declare.declare import declare_encoding, xes_to_positional\nfrom src.encoding.declare.declare_mining import apply_template_to_log\nfrom src.encoding.declare.declare_templates import template_sizes\nfrom src.encoding.models import ValueEncodings\nfrom src.jobs.models import JobTypes\nfrom src.labelling.models import LabelTypes\nfrom src.predictive_model.classification.models import ClassificationMethods\nfrom src.predictive_model.models import PredictiveModels\nfrom src.split.models import SplitTypes, SplitOrderingMethods\nfrom src.split.splitting import get_train_test_log\nfrom src.utils.tests_utils import create_test_split, create_test_log, create_test_encoding, create_test_job, \\\n    create_test_labelling, create_test_predictive_model\n\n\ndef generate_test_candidate_constraints(candidates, templates, test_log, train_results):\n    all_results = {}\n    for template in templates:\n        print(""Started working on {}"".format(template))\n        for candidate in candidates:\n            if len(candidate) == template_sizes[template]:\n                candidate_name = template + "":"" + str(candidate)\n                if candidate_name in train_results:\n                    constraint_result = apply_template_to_log(template, candidate, test_log)\n\n                    all_results[candidate_name] = constraint_result\n\n    return all_results\n\n\nclass TestDeclare(TestCase):\n    """"""Proof of concept tests""""""\n\n    def setUp(self) -> None:\n\n        self.split = create_test_split(\n            split_type=SplitTypes.SPLIT_DOUBLE.value,\n            split_ordering_method=SplitOrderingMethods.SPLIT_SEQUENTIAL.value,\n            test_size=0.2,\n            original_log=None,\n            train_log=create_test_log(\n                log_name=\'general_example.xes\',\n                log_path=\'cache/log_cache/test_logs/train_explainability.xes\'\n            ),\n            test_log=create_test_log(\n                log_name=\'general_example_train.xes\',\n                log_path=\'cache/log_cache/test_logs/test_explainability.xes\'\n            )\n        )\n\n        self.encoding = create_test_encoding(\n            prefix_length=4,\n            padding=True,\n            value_encoding=ValueEncodings.DECLARE.value\n        )\n\n        self.job = create_test_job(\n            split=self.split,\n            encoding=self.encoding,\n            labelling=create_test_labelling(\n                label_type=LabelTypes.ATTRIBUTE_STRING.value,\n                attribute_name=\'label\'\n            ),\n            clustering=None,\n            create_models=False,\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.CLASSIFICATION.value,\n                prediction_method=ClassificationMethods.DECISION_TREE.value\n            ),\n            job_type=JobTypes.PREDICTION.value,\n            hyperparameter_optimizer=None,\n            incremental_train=None\n        )\n\n        self.training_df_old, self.test_df_old = get_encoded_logs(self.job)\n\n    def test_xes_to_positional(self):\n        training_log, test_log, additional_columns = get_train_test_log(self.job.split)\n        transformed_log = xes_to_positional(test_log)\n        expected = {\'2_100\': {\'Archive\': [10], \'Contact Hospital\': [3], \'Create Questionnaire\': [1], \'High Insurance Check\': [2], \'High Medical History\': [4], \'Prepare Notification Content\': [6], \'Register\': [0], \'Reject Claim\': [5], \'Send Notification by Phone\': [7], \'Send Questionnaire\': [8], \'Skip Questionnaire\': [9]}, \'2_101\': {\'Accept Claim\': [4], \'Archive\': [8], \'Create Questionnaire\': [2], \'Low Insurance Check\': [3], \'Low Medical History\': [1], \'Prepare Notification Content\': [5], \'Receive Questionnaire Response\': [7], \'Register\': [0], \'Send Questionnaire\': [6]}, \'2_102\': {\'Archive\': [10], \'Contact Hospital\': [4], \'Create Questionnaire\': [1], \'High Insurance Check\': [2], \'High Medical History\': [3], \'Prepare Notification Content\': [6], \'Register\': [0], \'Reject Claim\': [5], \'Send Notification by Phone\': [7], \'Send Questionnaire\': [8], \'Skip Questionnaire\': [9]}, \'2_103\': {\'Accept Claim\': [3], \'Archive\': [9], \'Create Questionnaire\': [4], \'Low Insurance Check\': [2], \'Low Medical History\': [1], \'Prepare Notification Content\': [5], \'Receive Questionnaire Response\': [8], \'Register\': [0], \'Send Notification by e-mail\': [6], \'Send Questionnaire\': [7]}, \'2_104\': {\'Accept Claim\': [3], \'Archive\': [9], \'Create Questionnaire\': [5], \'Low Insurance Check\': [2], \'Low Medical History\': [1], \'Prepare Notification Content\': [4], \'Register\': [0], \'Send Notification by e-mail\': [6], \'Send Questionnaire\': [7], \'Skip Questionnaire\': [8]}, \'2_105\': {\'Archive\': [10], \'Contact Hospital\': [1], \'Create Questionnaire\': [6], \'High Insurance Check\': [3], \'High Medical History\': [2], \'Prepare Notification Content\': [5], \'Receive Questionnaire Response\': [9], \'Register\': [0], \'Reject Claim\': [4], \'Send Notification by Phone\': [7], \'Send Questionnaire\': [8]}, \'2_106\': {\'Archive\': [11], \'Contact Hospital\': [1], \'Create Questionnaire\': [3], \'High Insurance Check\': [2], \'High Medical History\': [4], \'Prepare Notification Content\': [6], \'Receive Questionnaire Response\': [10], \'Register\': [0], \'Reject Claim\': [5], \'Send Notification by Phone\': [8], \'Send Notification by e-mail\': [7], \'Send Questionnaire\': [9]}, \'2_107\': {\'Archive\': [10], \'Create Questionnaire\': [1], \'Low Insurance Check\': [3], \'Low Medical History\': [2], \'Prepare Notification Content\': [5], \'Register\': [0], \'Reject Claim\': [4], \'Send Notification by Post\': [7], \'Send Notification by e-mail\': [6], \'Send Questionnaire\': [8], \'Skip Questionnaire\': [9]}, \'2_108\': {\'Accept Claim\': [3], \'Archive\': [10], \'Create Questionnaire\': [4], \'Low Insurance Check\': [2], \'Low Medical History\': [1], \'Prepare Notification Content\': [5], \'Receive Questionnaire Response\': [9], \'Register\': [0], \'Send Notification by Post\': [6], \'Send Notification by e-mail\': [7], \'Send Questionnaire\': [8]}, \'2_109\': {\'Accept Claim\': [5], \'Archive\': [11], \'Contact Hospital\': [4], \'Create Questionnaire\': [1], \'High Insurance Check\': [3], \'High Medical History\': [2], \'Prepare Notification Content\': [6], \'Register\': [0], \'Send Notification by Phone\': [7], \'Send Notification by Post\': [8], \'Send Questionnaire\': [9], \'Skip Questionnaire\': [10]}, \'2_126\': {\'Archive\': [8], \'Create Questionnaire\': [1], \'Low Insurance Check\': [3], \'Low Medical History\': [2], \'Prepare Notification Content\': [5], \'Receive Questionnaire Response\': [7], \'Register\': [0], \'Reject Claim\': [4], \'Send Questionnaire\': [6]}, \'2_124\': {\'Accept Claim\': [5], \'Archive\': [11], \'Contact Hospital\': [3], \'Create Questionnaire\': [1], \'High Insurance Check\': [4], \'High Medical History\': [2], \'Prepare Notification Content\': [6], \'Register\': [0], \'Send Notification by Phone\': [8], \'Send Notification by e-mail\': [7], \'Send Questionnaire\': [9], \'Skip Questionnaire\': [10]}, \'2_122\': {\'Accept Claim\': [4], \'Archive\': [11], \'Contact Hospital\': [3], \'Create Questionnaire\': [6], \'High Insurance Check\': [1], \'High Medical History\': [2], \'Prepare Notification Content\': [5], \'Receive Questionnaire Response\': [10], \'Register\': [0], \'Send Notification by Phone\': [8], \'Send Notification by Post\': [7], \'Send Questionnaire\': [9]}, \'2_123\': {\'Archive\': [11], \'Contact Hospital\': [3], \'Create Questionnaire\': [5], \'High Insurance Check\': [1], \'High Medical History\': [2], \'Prepare Notification Content\': [6], \'Receive Questionnaire Response\': [10], \'Register\': [0], \'Reject Claim\': [4], \'Send Notification by Phone\': [8], \'Send Notification by e-mail\': [7], \'Send Questionnaire\': [9]}}\n        self.assertDictEqual(expected, transformed_log)\n\n    def test_declare_encoding(self):\n        training_log, test_log, additional_columns = get_train_test_log(self.job.split)\n        labelling = None\n        cols = None\n        run_df = declare_encoding(test_log, labelling, self.job.encoding, additional_columns, cols=cols)\n        expected_shape = (14, 906)\n        expected_columns = [""init:(\'Low Insurance Check\',)"", ""init:(\'Create Questionnaire\',)"", ""init:(\'Register\',)"", ""init:(\'High Insurance Check\',)"", ""init:(\'Accept Claim\',)"", ""init:(\'High Medical History\',)"", ""init:(\'Low Medical History\',)"", ""init:(\'Contact Hospital\',)"", ""exist:(\'Low Insurance Check\',)"", ""exist:(\'Create Questionnaire\',)"", ""exist:(\'Register\',)"", ""exist:(\'High Insurance Check\',)"", ""exist:(\'Accept Claim\',)"", ""exist:(\'High Medical History\',)"", ""exist:(\'Low Medical History\',)"", ""exist:(\'Contact Hospital\',)"", ""absence1:(\'Low Insurance Check\',)"", ""absence1:(\'Create Questionnaire\',)"", ""absence1:(\'Register\',)"", ""absence1:(\'High Insurance Check\',)"", ""absence1:(\'Accept Claim\',)"", ""absence1:(\'High Medical History\',)"", ""absence1:(\'Low Medical History\',)"", ""absence1:(\'Contact Hospital\',)"", ""absence2:(\'Low Insurance Check\',)"", ""absence2:(\'Create Questionnaire\',)"", ""absence2:(\'Register\',)"", ""absence2:(\'High Insurance Check\',)"", ""absence2:(\'Accept Claim\',)"", ""absence2:(\'High Medical History\',)"", ""absence2:(\'Low Medical History\',)"", ""absence2:(\'Contact Hospital\',)"", ""absence3:(\'Low Insurance Check\',)"", ""absence3:(\'Create Questionnaire\',)"", ""absence3:(\'Register\',)"", ""absence3:(\'High Insurance Check\',)"", ""absence3:(\'Accept Claim\',)"", ""absence3:(\'High Medical History\',)"", ""absence3:(\'Low Medical History\',)"", ""absence3:(\'Contact Hospital\',)"", ""choice:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""choice:(\'Low Insurance Check\', \'Register\')"", ""choice:(\'Low Insurance Check\', \'High Insurance Check\')"", ""choice:(\'Low Insurance Check\', \'Accept Claim\')"", ""choice:(\'Low Insurance Check\', \'High Medical History\')"", ""choice:(\'Low Insurance Check\', \'Low Medical History\')"", ""choice:(\'Low Insurance Check\', \'Contact Hospital\')"", ""choice:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""choice:(\'Create Questionnaire\', \'Register\')"", ""choice:(\'Create Questionnaire\', \'High Insurance Check\')"", ""choice:(\'Create Questionnaire\', \'Accept Claim\')"", ""choice:(\'Create Questionnaire\', \'High Medical History\')"", ""choice:(\'Create Questionnaire\', \'Low Medical History\')"", ""choice:(\'Create Questionnaire\', \'Contact Hospital\')"", ""choice:(\'Register\', \'Low Insurance Check\')"", ""choice:(\'Register\', \'Create Questionnaire\')"", ""choice:(\'Register\', \'High Insurance Check\')"", ""choice:(\'Register\', \'Accept Claim\')"", ""choice:(\'Register\', \'High Medical History\')"", ""choice:(\'Register\', \'Low Medical History\')"", ""choice:(\'Register\', \'Contact Hospital\')"", ""choice:(\'High Insurance Check\', \'Low Insurance Check\')"", ""choice:(\'High Insurance Check\', \'Create Questionnaire\')"", ""choice:(\'High Insurance Check\', \'Register\')"", ""choice:(\'High Insurance Check\', \'Accept Claim\')"", ""choice:(\'High Insurance Check\', \'High Medical History\')"", ""choice:(\'High Insurance Check\', \'Low Medical History\')"", ""choice:(\'High Insurance Check\', \'Contact Hospital\')"", ""choice:(\'Accept Claim\', \'Low Insurance Check\')"", ""choice:(\'Accept Claim\', \'Create Questionnaire\')"", ""choice:(\'Accept Claim\', \'Register\')"", ""choice:(\'Accept Claim\', \'High Insurance Check\')"", ""choice:(\'Accept Claim\', \'High Medical History\')"", ""choice:(\'Accept Claim\', \'Low Medical History\')"", ""choice:(\'Accept Claim\', \'Contact Hospital\')"", ""choice:(\'High Medical History\', \'Low Insurance Check\')"", ""choice:(\'High Medical History\', \'Create Questionnaire\')"", ""choice:(\'High Medical History\', \'Register\')"", ""choice:(\'High Medical History\', \'High Insurance Check\')"", ""choice:(\'High Medical History\', \'Accept Claim\')"", ""choice:(\'High Medical History\', \'Low Medical History\')"", ""choice:(\'High Medical History\', \'Contact Hospital\')"", ""choice:(\'Low Medical History\', \'Low Insurance Check\')"", ""choice:(\'Low Medical History\', \'Create Questionnaire\')"", ""choice:(\'Low Medical History\', \'Register\')"", ""choice:(\'Low Medical History\', \'High Insurance Check\')"", ""choice:(\'Low Medical History\', \'Accept Claim\')"", ""choice:(\'Low Medical History\', \'High Medical History\')"", ""choice:(\'Low Medical History\', \'Contact Hospital\')"", ""choice:(\'Contact Hospital\', \'Low Insurance Check\')"", ""choice:(\'Contact Hospital\', \'Create Questionnaire\')"", ""choice:(\'Contact Hospital\', \'Register\')"", ""choice:(\'Contact Hospital\', \'High Insurance Check\')"", ""choice:(\'Contact Hospital\', \'Accept Claim\')"", ""choice:(\'Contact Hospital\', \'High Medical History\')"", ""choice:(\'Contact Hospital\', \'Low Medical History\')"", ""coexistence:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""coexistence:(\'Low Insurance Check\', \'Register\')"", ""coexistence:(\'Low Insurance Check\', \'High Insurance Check\')"", ""coexistence:(\'Low Insurance Check\', \'Accept Claim\')"", ""coexistence:(\'Low Insurance Check\', \'High Medical History\')"", ""coexistence:(\'Low Insurance Check\', \'Low Medical History\')"", ""coexistence:(\'Low Insurance Check\', \'Contact Hospital\')"", ""coexistence:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""coexistence:(\'Create Questionnaire\', \'Register\')"", ""coexistence:(\'Create Questionnaire\', \'High Insurance Check\')"", ""coexistence:(\'Create Questionnaire\', \'Accept Claim\')"", ""coexistence:(\'Create Questionnaire\', \'High Medical History\')"", ""coexistence:(\'Create Questionnaire\', \'Low Medical History\')"", ""coexistence:(\'Create Questionnaire\', \'Contact Hospital\')"", ""coexistence:(\'Register\', \'Low Insurance Check\')"", ""coexistence:(\'Register\', \'Create Questionnaire\')"", ""coexistence:(\'Register\', \'High Insurance Check\')"", ""coexistence:(\'Register\', \'Accept Claim\')"", ""coexistence:(\'Register\', \'High Medical History\')"", ""coexistence:(\'Register\', \'Low Medical History\')"", ""coexistence:(\'Register\', \'Contact Hospital\')"", ""coexistence:(\'High Insurance Check\', \'Low Insurance Check\')"", ""coexistence:(\'High Insurance Check\', \'Create Questionnaire\')"", ""coexistence:(\'High Insurance Check\', \'Register\')"", ""coexistence:(\'High Insurance Check\', \'Accept Claim\')"", ""coexistence:(\'High Insurance Check\', \'High Medical History\')"", ""coexistence:(\'High Insurance Check\', \'Low Medical History\')"", ""coexistence:(\'High Insurance Check\', \'Contact Hospital\')"", ""coexistence:(\'Accept Claim\', \'Low Insurance Check\')"", ""coexistence:(\'Accept Claim\', \'Create Questionnaire\')"", ""coexistence:(\'Accept Claim\', \'Register\')"", ""coexistence:(\'Accept Claim\', \'High Insurance Check\')"", ""coexistence:(\'Accept Claim\', \'High Medical History\')"", ""coexistence:(\'Accept Claim\', \'Low Medical History\')"", ""coexistence:(\'Accept Claim\', \'Contact Hospital\')"", ""coexistence:(\'High Medical History\', \'Low Insurance Check\')"", ""coexistence:(\'High Medical History\', \'Create Questionnaire\')"", ""coexistence:(\'High Medical History\', \'Register\')"", ""coexistence:(\'High Medical History\', \'High Insurance Check\')"", ""coexistence:(\'High Medical History\', \'Accept Claim\')"", ""coexistence:(\'High Medical History\', \'Low Medical History\')"", ""coexistence:(\'High Medical History\', \'Contact Hospital\')"", ""coexistence:(\'Low Medical History\', \'Low Insurance Check\')"", ""coexistence:(\'Low Medical History\', \'Create Questionnaire\')"", ""coexistence:(\'Low Medical History\', \'Register\')"", ""coexistence:(\'Low Medical History\', \'High Insurance Check\')"", ""coexistence:(\'Low Medical History\', \'Accept Claim\')"", ""coexistence:(\'Low Medical History\', \'High Medical History\')"", ""coexistence:(\'Low Medical History\', \'Contact Hospital\')"", ""coexistence:(\'Contact Hospital\', \'Low Insurance Check\')"", ""coexistence:(\'Contact Hospital\', \'Create Questionnaire\')"", ""coexistence:(\'Contact Hospital\', \'Register\')"", ""coexistence:(\'Contact Hospital\', \'High Insurance Check\')"", ""coexistence:(\'Contact Hospital\', \'Accept Claim\')"", ""coexistence:(\'Contact Hospital\', \'High Medical History\')"", ""coexistence:(\'Contact Hospital\', \'Low Medical History\')"", ""exactly1:(\'Low Insurance Check\',)"", ""exactly1:(\'Create Questionnaire\',)"", ""exactly1:(\'Register\',)"", ""exactly1:(\'High Insurance Check\',)"", ""exactly1:(\'Accept Claim\',)"", ""exactly1:(\'High Medical History\',)"", ""exactly1:(\'Low Medical History\',)"", ""exactly1:(\'Contact Hospital\',)"", ""exactly2:(\'Low Insurance Check\',)"", ""exactly2:(\'Create Questionnaire\',)"", ""exactly2:(\'Register\',)"", ""exactly2:(\'High Insurance Check\',)"", ""exactly2:(\'Accept Claim\',)"", ""exactly2:(\'High Medical History\',)"", ""exactly2:(\'Low Medical History\',)"", ""exactly2:(\'Contact Hospital\',)"", ""exactly3:(\'Low Insurance Check\',)"", ""exactly3:(\'Create Questionnaire\',)"", ""exactly3:(\'Register\',)"", ""exactly3:(\'High Insurance Check\',)"", ""exactly3:(\'Accept Claim\',)"", ""exactly3:(\'High Medical History\',)"", ""exactly3:(\'Low Medical History\',)"", ""exactly3:(\'Contact Hospital\',)"", ""alternate_precedence:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""alternate_precedence:(\'Low Insurance Check\', \'Register\')"", ""alternate_precedence:(\'Low Insurance Check\', \'High Insurance Check\')"", ""alternate_precedence:(\'Low Insurance Check\', \'Accept Claim\')"", ""alternate_precedence:(\'Low Insurance Check\', \'High Medical History\')"", ""alternate_precedence:(\'Low Insurance Check\', \'Low Medical History\')"", ""alternate_precedence:(\'Low Insurance Check\', \'Contact Hospital\')"", ""alternate_precedence:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""alternate_precedence:(\'Create Questionnaire\', \'Register\')"", ""alternate_precedence:(\'Create Questionnaire\', \'High Insurance Check\')"", ""alternate_precedence:(\'Create Questionnaire\', \'Accept Claim\')"", ""alternate_precedence:(\'Create Questionnaire\', \'High Medical History\')"", ""alternate_precedence:(\'Create Questionnaire\', \'Low Medical History\')"", ""alternate_precedence:(\'Create Questionnaire\', \'Contact Hospital\')"", ""alternate_precedence:(\'Register\', \'Low Insurance Check\')"", ""alternate_precedence:(\'Register\', \'Create Questionnaire\')"", ""alternate_precedence:(\'Register\', \'High Insurance Check\')"", ""alternate_precedence:(\'Register\', \'Accept Claim\')"", ""alternate_precedence:(\'Register\', \'High Medical History\')"", ""alternate_precedence:(\'Register\', \'Low Medical History\')"", ""alternate_precedence:(\'Register\', \'Contact Hospital\')"", ""alternate_precedence:(\'High Insurance Check\', \'Low Insurance Check\')"", ""alternate_precedence:(\'High Insurance Check\', \'Create Questionnaire\')"", ""alternate_precedence:(\'High Insurance Check\', \'Register\')"", ""alternate_precedence:(\'High Insurance Check\', \'Accept Claim\')"", ""alternate_precedence:(\'High Insurance Check\', \'High Medical History\')"", ""alternate_precedence:(\'High Insurance Check\', \'Low Medical History\')"", ""alternate_precedence:(\'High Insurance Check\', \'Contact Hospital\')"", ""alternate_precedence:(\'Accept Claim\', \'Low Insurance Check\')"", ""alternate_precedence:(\'Accept Claim\', \'Create Questionnaire\')"", ""alternate_precedence:(\'Accept Claim\', \'Register\')"", ""alternate_precedence:(\'Accept Claim\', \'High Insurance Check\')"", ""alternate_precedence:(\'Accept Claim\', \'High Medical History\')"", ""alternate_precedence:(\'Accept Claim\', \'Low Medical History\')"", ""alternate_precedence:(\'Accept Claim\', \'Contact Hospital\')"", ""alternate_precedence:(\'High Medical History\', \'Low Insurance Check\')"", ""alternate_precedence:(\'High Medical History\', \'Create Questionnaire\')"", ""alternate_precedence:(\'High Medical History\', \'Register\')"", ""alternate_precedence:(\'High Medical History\', \'High Insurance Check\')"", ""alternate_precedence:(\'High Medical History\', \'Accept Claim\')"", ""alternate_precedence:(\'High Medical History\', \'Low Medical History\')"", ""alternate_precedence:(\'High Medical History\', \'Contact Hospital\')"", ""alternate_precedence:(\'Low Medical History\', \'Low Insurance Check\')"", ""alternate_precedence:(\'Low Medical History\', \'Create Questionnaire\')"", ""alternate_precedence:(\'Low Medical History\', \'Register\')"", ""alternate_precedence:(\'Low Medical History\', \'High Insurance Check\')"", ""alternate_precedence:(\'Low Medical History\', \'Accept Claim\')"", ""alternate_precedence:(\'Low Medical History\', \'High Medical History\')"", ""alternate_precedence:(\'Low Medical History\', \'Contact Hospital\')"", ""alternate_precedence:(\'Contact Hospital\', \'Low Insurance Check\')"", ""alternate_precedence:(\'Contact Hospital\', \'Create Questionnaire\')"", ""alternate_precedence:(\'Contact Hospital\', \'Register\')"", ""alternate_precedence:(\'Contact Hospital\', \'High Insurance Check\')"", ""alternate_precedence:(\'Contact Hospital\', \'Accept Claim\')"", ""alternate_precedence:(\'Contact Hospital\', \'High Medical History\')"", ""alternate_precedence:(\'Contact Hospital\', \'Low Medical History\')"", ""alternate_succession:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""alternate_succession:(\'Low Insurance Check\', \'Register\')"", ""alternate_succession:(\'Low Insurance Check\', \'High Insurance Check\')"", ""alternate_succession:(\'Low Insurance Check\', \'Accept Claim\')"", ""alternate_succession:(\'Low Insurance Check\', \'High Medical History\')"", ""alternate_succession:(\'Low Insurance Check\', \'Low Medical History\')"", ""alternate_succession:(\'Low Insurance Check\', \'Contact Hospital\')"", ""alternate_succession:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""alternate_succession:(\'Create Questionnaire\', \'Register\')"", ""alternate_succession:(\'Create Questionnaire\', \'High Insurance Check\')"", ""alternate_succession:(\'Create Questionnaire\', \'Accept Claim\')"", ""alternate_succession:(\'Create Questionnaire\', \'High Medical History\')"", ""alternate_succession:(\'Create Questionnaire\', \'Low Medical History\')"", ""alternate_succession:(\'Create Questionnaire\', \'Contact Hospital\')"", ""alternate_succession:(\'Register\', \'Low Insurance Check\')"", ""alternate_succession:(\'Register\', \'Create Questionnaire\')"", ""alternate_succession:(\'Register\', \'High Insurance Check\')"", ""alternate_succession:(\'Register\', \'Accept Claim\')"", ""alternate_succession:(\'Register\', \'High Medical History\')"", ""alternate_succession:(\'Register\', \'Low Medical History\')"", ""alternate_succession:(\'Register\', \'Contact Hospital\')"", ""alternate_succession:(\'High Insurance Check\', \'Low Insurance Check\')"", ""alternate_succession:(\'High Insurance Check\', \'Create Questionnaire\')"", ""alternate_succession:(\'High Insurance Check\', \'Register\')"", ""alternate_succession:(\'High Insurance Check\', \'Accept Claim\')"", ""alternate_succession:(\'High Insurance Check\', \'High Medical History\')"", ""alternate_succession:(\'High Insurance Check\', \'Low Medical History\')"", ""alternate_succession:(\'High Insurance Check\', \'Contact Hospital\')"", ""alternate_succession:(\'Accept Claim\', \'Low Insurance Check\')"", ""alternate_succession:(\'Accept Claim\', \'Create Questionnaire\')"", ""alternate_succession:(\'Accept Claim\', \'Register\')"", ""alternate_succession:(\'Accept Claim\', \'High Insurance Check\')"", ""alternate_succession:(\'Accept Claim\', \'High Medical History\')"", ""alternate_succession:(\'Accept Claim\', \'Low Medical History\')"", ""alternate_succession:(\'Accept Claim\', \'Contact Hospital\')"", ""alternate_succession:(\'High Medical History\', \'Low Insurance Check\')"", ""alternate_succession:(\'High Medical History\', \'Create Questionnaire\')"", ""alternate_succession:(\'High Medical History\', \'Register\')"", ""alternate_succession:(\'High Medical History\', \'High Insurance Check\')"", ""alternate_succession:(\'High Medical History\', \'Accept Claim\')"", ""alternate_succession:(\'High Medical History\', \'Low Medical History\')"", ""alternate_succession:(\'High Medical History\', \'Contact Hospital\')"", ""alternate_succession:(\'Low Medical History\', \'Low Insurance Check\')"", ""alternate_succession:(\'Low Medical History\', \'Create Questionnaire\')"", ""alternate_succession:(\'Low Medical History\', \'Register\')"", ""alternate_succession:(\'Low Medical History\', \'High Insurance Check\')"", ""alternate_succession:(\'Low Medical History\', \'Accept Claim\')"", ""alternate_succession:(\'Low Medical History\', \'High Medical History\')"", ""alternate_succession:(\'Low Medical History\', \'Contact Hospital\')"", ""alternate_succession:(\'Contact Hospital\', \'Low Insurance Check\')"", ""alternate_succession:(\'Contact Hospital\', \'Create Questionnaire\')"", ""alternate_succession:(\'Contact Hospital\', \'Register\')"", ""alternate_succession:(\'Contact Hospital\', \'High Insurance Check\')"", ""alternate_succession:(\'Contact Hospital\', \'Accept Claim\')"", ""alternate_succession:(\'Contact Hospital\', \'High Medical History\')"", ""alternate_succession:(\'Contact Hospital\', \'Low Medical History\')"", ""alternate_response:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""alternate_response:(\'Low Insurance Check\', \'Register\')"", ""alternate_response:(\'Low Insurance Check\', \'High Insurance Check\')"", ""alternate_response:(\'Low Insurance Check\', \'Accept Claim\')"", ""alternate_response:(\'Low Insurance Check\', \'High Medical History\')"", ""alternate_response:(\'Low Insurance Check\', \'Low Medical History\')"", ""alternate_response:(\'Low Insurance Check\', \'Contact Hospital\')"", ""alternate_response:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""alternate_response:(\'Create Questionnaire\', \'Register\')"", ""alternate_response:(\'Create Questionnaire\', \'High Insurance Check\')"", ""alternate_response:(\'Create Questionnaire\', \'Accept Claim\')"", ""alternate_response:(\'Create Questionnaire\', \'High Medical History\')"", ""alternate_response:(\'Create Questionnaire\', \'Low Medical History\')"", ""alternate_response:(\'Create Questionnaire\', \'Contact Hospital\')"", ""alternate_response:(\'Register\', \'Low Insurance Check\')"", ""alternate_response:(\'Register\', \'Create Questionnaire\')"", ""alternate_response:(\'Register\', \'High Insurance Check\')"", ""alternate_response:(\'Register\', \'Accept Claim\')"", ""alternate_response:(\'Register\', \'High Medical History\')"", ""alternate_response:(\'Register\', \'Low Medical History\')"", ""alternate_response:(\'Register\', \'Contact Hospital\')"", ""alternate_response:(\'High Insurance Check\', \'Low Insurance Check\')"", ""alternate_response:(\'High Insurance Check\', \'Create Questionnaire\')"", ""alternate_response:(\'High Insurance Check\', \'Register\')"", ""alternate_response:(\'High Insurance Check\', \'Accept Claim\')"", ""alternate_response:(\'High Insurance Check\', \'High Medical History\')"", ""alternate_response:(\'High Insurance Check\', \'Low Medical History\')"", ""alternate_response:(\'High Insurance Check\', \'Contact Hospital\')"", ""alternate_response:(\'Accept Claim\', \'Low Insurance Check\')"", ""alternate_response:(\'Accept Claim\', \'Create Questionnaire\')"", ""alternate_response:(\'Accept Claim\', \'Register\')"", ""alternate_response:(\'Accept Claim\', \'High Insurance Check\')"", ""alternate_response:(\'Accept Claim\', \'High Medical History\')"", ""alternate_response:(\'Accept Claim\', \'Low Medical History\')"", ""alternate_response:(\'Accept Claim\', \'Contact Hospital\')"", ""alternate_response:(\'High Medical History\', \'Low Insurance Check\')"", ""alternate_response:(\'High Medical History\', \'Create Questionnaire\')"", ""alternate_response:(\'High Medical History\', \'Register\')"", ""alternate_response:(\'High Medical History\', \'High Insurance Check\')"", ""alternate_response:(\'High Medical History\', \'Accept Claim\')"", ""alternate_response:(\'High Medical History\', \'Low Medical History\')"", ""alternate_response:(\'High Medical History\', \'Contact Hospital\')"", ""alternate_response:(\'Low Medical History\', \'Low Insurance Check\')"", ""alternate_response:(\'Low Medical History\', \'Create Questionnaire\')"", ""alternate_response:(\'Low Medical History\', \'Register\')"", ""alternate_response:(\'Low Medical History\', \'High Insurance Check\')"", ""alternate_response:(\'Low Medical History\', \'Accept Claim\')"", ""alternate_response:(\'Low Medical History\', \'High Medical History\')"", ""alternate_response:(\'Low Medical History\', \'Contact Hospital\')"", ""alternate_response:(\'Contact Hospital\', \'Low Insurance Check\')"", ""alternate_response:(\'Contact Hospital\', \'Create Questionnaire\')"", ""alternate_response:(\'Contact Hospital\', \'Register\')"", ""alternate_response:(\'Contact Hospital\', \'High Insurance Check\')"", ""alternate_response:(\'Contact Hospital\', \'Accept Claim\')"", ""alternate_response:(\'Contact Hospital\', \'High Medical History\')"", ""alternate_response:(\'Contact Hospital\', \'Low Medical History\')"", ""chain_precedence:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""chain_precedence:(\'Low Insurance Check\', \'Register\')"", ""chain_precedence:(\'Low Insurance Check\', \'High Insurance Check\')"", ""chain_precedence:(\'Low Insurance Check\', \'Accept Claim\')"", ""chain_precedence:(\'Low Insurance Check\', \'High Medical History\')"", ""chain_precedence:(\'Low Insurance Check\', \'Low Medical History\')"", ""chain_precedence:(\'Low Insurance Check\', \'Contact Hospital\')"", ""chain_precedence:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""chain_precedence:(\'Create Questionnaire\', \'Register\')"", ""chain_precedence:(\'Create Questionnaire\', \'High Insurance Check\')"", ""chain_precedence:(\'Create Questionnaire\', \'Accept Claim\')"", ""chain_precedence:(\'Create Questionnaire\', \'High Medical History\')"", ""chain_precedence:(\'Create Questionnaire\', \'Low Medical History\')"", ""chain_precedence:(\'Create Questionnaire\', \'Contact Hospital\')"", ""chain_precedence:(\'Register\', \'Low Insurance Check\')"", ""chain_precedence:(\'Register\', \'Create Questionnaire\')"", ""chain_precedence:(\'Register\', \'High Insurance Check\')"", ""chain_precedence:(\'Register\', \'Accept Claim\')"", ""chain_precedence:(\'Register\', \'High Medical History\')"", ""chain_precedence:(\'Register\', \'Low Medical History\')"", ""chain_precedence:(\'Register\', \'Contact Hospital\')"", ""chain_precedence:(\'High Insurance Check\', \'Low Insurance Check\')"", ""chain_precedence:(\'High Insurance Check\', \'Create Questionnaire\')"", ""chain_precedence:(\'High Insurance Check\', \'Register\')"", ""chain_precedence:(\'High Insurance Check\', \'Accept Claim\')"", ""chain_precedence:(\'High Insurance Check\', \'High Medical History\')"", ""chain_precedence:(\'High Insurance Check\', \'Low Medical History\')"", ""chain_precedence:(\'High Insurance Check\', \'Contact Hospital\')"", ""chain_precedence:(\'Accept Claim\', \'Low Insurance Check\')"", ""chain_precedence:(\'Accept Claim\', \'Create Questionnaire\')"", ""chain_precedence:(\'Accept Claim\', \'Register\')"", ""chain_precedence:(\'Accept Claim\', \'High Insurance Check\')"", ""chain_precedence:(\'Accept Claim\', \'High Medical History\')"", ""chain_precedence:(\'Accept Claim\', \'Low Medical History\')"", ""chain_precedence:(\'Accept Claim\', \'Contact Hospital\')"", ""chain_precedence:(\'High Medical History\', \'Low Insurance Check\')"", ""chain_precedence:(\'High Medical History\', \'Create Questionnaire\')"", ""chain_precedence:(\'High Medical History\', \'Register\')"", ""chain_precedence:(\'High Medical History\', \'High Insurance Check\')"", ""chain_precedence:(\'High Medical History\', \'Accept Claim\')"", ""chain_precedence:(\'High Medical History\', \'Low Medical History\')"", ""chain_precedence:(\'High Medical History\', \'Contact Hospital\')"", ""chain_precedence:(\'Low Medical History\', \'Low Insurance Check\')"", ""chain_precedence:(\'Low Medical History\', \'Create Questionnaire\')"", ""chain_precedence:(\'Low Medical History\', \'Register\')"", ""chain_precedence:(\'Low Medical History\', \'High Insurance Check\')"", ""chain_precedence:(\'Low Medical History\', \'Accept Claim\')"", ""chain_precedence:(\'Low Medical History\', \'High Medical History\')"", ""chain_precedence:(\'Low Medical History\', \'Contact Hospital\')"", ""chain_precedence:(\'Contact Hospital\', \'Low Insurance Check\')"", ""chain_precedence:(\'Contact Hospital\', \'Create Questionnaire\')"", ""chain_precedence:(\'Contact Hospital\', \'Register\')"", ""chain_precedence:(\'Contact Hospital\', \'High Insurance Check\')"", ""chain_precedence:(\'Contact Hospital\', \'Accept Claim\')"", ""chain_precedence:(\'Contact Hospital\', \'High Medical History\')"", ""chain_precedence:(\'Contact Hospital\', \'Low Medical History\')"", ""chain_response:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""chain_response:(\'Low Insurance Check\', \'Register\')"", ""chain_response:(\'Low Insurance Check\', \'High Insurance Check\')"", ""chain_response:(\'Low Insurance Check\', \'Accept Claim\')"", ""chain_response:(\'Low Insurance Check\', \'High Medical History\')"", ""chain_response:(\'Low Insurance Check\', \'Low Medical History\')"", ""chain_response:(\'Low Insurance Check\', \'Contact Hospital\')"", ""chain_response:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""chain_response:(\'Create Questionnaire\', \'Register\')"", ""chain_response:(\'Create Questionnaire\', \'High Insurance Check\')"", ""chain_response:(\'Create Questionnaire\', \'Accept Claim\')"", ""chain_response:(\'Create Questionnaire\', \'High Medical History\')"", ""chain_response:(\'Create Questionnaire\', \'Low Medical History\')"", ""chain_response:(\'Create Questionnaire\', \'Contact Hospital\')"", ""chain_response:(\'Register\', \'Low Insurance Check\')"", ""chain_response:(\'Register\', \'Create Questionnaire\')"", ""chain_response:(\'Register\', \'High Insurance Check\')"", ""chain_response:(\'Register\', \'Accept Claim\')"", ""chain_response:(\'Register\', \'High Medical History\')"", ""chain_response:(\'Register\', \'Low Medical History\')"", ""chain_response:(\'Register\', \'Contact Hospital\')"", ""chain_response:(\'High Insurance Check\', \'Low Insurance Check\')"", ""chain_response:(\'High Insurance Check\', \'Create Questionnaire\')"", ""chain_response:(\'High Insurance Check\', \'Register\')"", ""chain_response:(\'High Insurance Check\', \'Accept Claim\')"", ""chain_response:(\'High Insurance Check\', \'High Medical History\')"", ""chain_response:(\'High Insurance Check\', \'Low Medical History\')"", ""chain_response:(\'High Insurance Check\', \'Contact Hospital\')"", ""chain_response:(\'Accept Claim\', \'Low Insurance Check\')"", ""chain_response:(\'Accept Claim\', \'Create Questionnaire\')"", ""chain_response:(\'Accept Claim\', \'Register\')"", ""chain_response:(\'Accept Claim\', \'High Insurance Check\')"", ""chain_response:(\'Accept Claim\', \'High Medical History\')"", ""chain_response:(\'Accept Claim\', \'Low Medical History\')"", ""chain_response:(\'Accept Claim\', \'Contact Hospital\')"", ""chain_response:(\'High Medical History\', \'Low Insurance Check\')"", ""chain_response:(\'High Medical History\', \'Create Questionnaire\')"", ""chain_response:(\'High Medical History\', \'Register\')"", ""chain_response:(\'High Medical History\', \'High Insurance Check\')"", ""chain_response:(\'High Medical History\', \'Accept Claim\')"", ""chain_response:(\'High Medical History\', \'Low Medical History\')"", ""chain_response:(\'High Medical History\', \'Contact Hospital\')"", ""chain_response:(\'Low Medical History\', \'Low Insurance Check\')"", ""chain_response:(\'Low Medical History\', \'Create Questionnaire\')"", ""chain_response:(\'Low Medical History\', \'Register\')"", ""chain_response:(\'Low Medical History\', \'High Insurance Check\')"", ""chain_response:(\'Low Medical History\', \'Accept Claim\')"", ""chain_response:(\'Low Medical History\', \'High Medical History\')"", ""chain_response:(\'Low Medical History\', \'Contact Hospital\')"", ""chain_response:(\'Contact Hospital\', \'Low Insurance Check\')"", ""chain_response:(\'Contact Hospital\', \'Create Questionnaire\')"", ""chain_response:(\'Contact Hospital\', \'Register\')"", ""chain_response:(\'Contact Hospital\', \'High Insurance Check\')"", ""chain_response:(\'Contact Hospital\', \'Accept Claim\')"", ""chain_response:(\'Contact Hospital\', \'High Medical History\')"", ""chain_response:(\'Contact Hospital\', \'Low Medical History\')"", ""chain_succession:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""chain_succession:(\'Low Insurance Check\', \'Register\')"", ""chain_succession:(\'Low Insurance Check\', \'High Insurance Check\')"", ""chain_succession:(\'Low Insurance Check\', \'Accept Claim\')"", ""chain_succession:(\'Low Insurance Check\', \'High Medical History\')"", ""chain_succession:(\'Low Insurance Check\', \'Low Medical History\')"", ""chain_succession:(\'Low Insurance Check\', \'Contact Hospital\')"", ""chain_succession:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""chain_succession:(\'Create Questionnaire\', \'Register\')"", ""chain_succession:(\'Create Questionnaire\', \'High Insurance Check\')"", ""chain_succession:(\'Create Questionnaire\', \'Accept Claim\')"", ""chain_succession:(\'Create Questionnaire\', \'High Medical History\')"", ""chain_succession:(\'Create Questionnaire\', \'Low Medical History\')"", ""chain_succession:(\'Create Questionnaire\', \'Contact Hospital\')"", ""chain_succession:(\'Register\', \'Low Insurance Check\')"", ""chain_succession:(\'Register\', \'Create Questionnaire\')"", ""chain_succession:(\'Register\', \'High Insurance Check\')"", ""chain_succession:(\'Register\', \'Accept Claim\')"", ""chain_succession:(\'Register\', \'High Medical History\')"", ""chain_succession:(\'Register\', \'Low Medical History\')"", ""chain_succession:(\'Register\', \'Contact Hospital\')"", ""chain_succession:(\'High Insurance Check\', \'Low Insurance Check\')"", ""chain_succession:(\'High Insurance Check\', \'Create Questionnaire\')"", ""chain_succession:(\'High Insurance Check\', \'Register\')"", ""chain_succession:(\'High Insurance Check\', \'Accept Claim\')"", ""chain_succession:(\'High Insurance Check\', \'High Medical History\')"", ""chain_succession:(\'High Insurance Check\', \'Low Medical History\')"", ""chain_succession:(\'High Insurance Check\', \'Contact Hospital\')"", ""chain_succession:(\'Accept Claim\', \'Low Insurance Check\')"", ""chain_succession:(\'Accept Claim\', \'Create Questionnaire\')"", ""chain_succession:(\'Accept Claim\', \'Register\')"", ""chain_succession:(\'Accept Claim\', \'High Insurance Check\')"", ""chain_succession:(\'Accept Claim\', \'High Medical History\')"", ""chain_succession:(\'Accept Claim\', \'Low Medical History\')"", ""chain_succession:(\'Accept Claim\', \'Contact Hospital\')"", ""chain_succession:(\'High Medical History\', \'Low Insurance Check\')"", ""chain_succession:(\'High Medical History\', \'Create Questionnaire\')"", ""chain_succession:(\'High Medical History\', \'Register\')"", ""chain_succession:(\'High Medical History\', \'High Insurance Check\')"", ""chain_succession:(\'High Medical History\', \'Accept Claim\')"", ""chain_succession:(\'High Medical History\', \'Low Medical History\')"", ""chain_succession:(\'High Medical History\', \'Contact Hospital\')"", ""chain_succession:(\'Low Medical History\', \'Low Insurance Check\')"", ""chain_succession:(\'Low Medical History\', \'Create Questionnaire\')"", ""chain_succession:(\'Low Medical History\', \'Register\')"", ""chain_succession:(\'Low Medical History\', \'High Insurance Check\')"", ""chain_succession:(\'Low Medical History\', \'Accept Claim\')"", ""chain_succession:(\'Low Medical History\', \'High Medical History\')"", ""chain_succession:(\'Low Medical History\', \'Contact Hospital\')"", ""chain_succession:(\'Contact Hospital\', \'Low Insurance Check\')"", ""chain_succession:(\'Contact Hospital\', \'Create Questionnaire\')"", ""chain_succession:(\'Contact Hospital\', \'Register\')"", ""chain_succession:(\'Contact Hospital\', \'High Insurance Check\')"", ""chain_succession:(\'Contact Hospital\', \'Accept Claim\')"", ""chain_succession:(\'Contact Hospital\', \'High Medical History\')"", ""chain_succession:(\'Contact Hospital\', \'Low Medical History\')"", ""not_chain_succession:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""not_chain_succession:(\'Low Insurance Check\', \'Register\')"", ""not_chain_succession:(\'Low Insurance Check\', \'High Insurance Check\')"", ""not_chain_succession:(\'Low Insurance Check\', \'Accept Claim\')"", ""not_chain_succession:(\'Low Insurance Check\', \'High Medical History\')"", ""not_chain_succession:(\'Low Insurance Check\', \'Low Medical History\')"", ""not_chain_succession:(\'Low Insurance Check\', \'Contact Hospital\')"", ""not_chain_succession:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""not_chain_succession:(\'Create Questionnaire\', \'Register\')"", ""not_chain_succession:(\'Create Questionnaire\', \'High Insurance Check\')"", ""not_chain_succession:(\'Create Questionnaire\', \'Accept Claim\')"", ""not_chain_succession:(\'Create Questionnaire\', \'High Medical History\')"", ""not_chain_succession:(\'Create Questionnaire\', \'Low Medical History\')"", ""not_chain_succession:(\'Create Questionnaire\', \'Contact Hospital\')"", ""not_chain_succession:(\'Register\', \'Low Insurance Check\')"", ""not_chain_succession:(\'Register\', \'Create Questionnaire\')"", ""not_chain_succession:(\'Register\', \'High Insurance Check\')"", ""not_chain_succession:(\'Register\', \'Accept Claim\')"", ""not_chain_succession:(\'Register\', \'High Medical History\')"", ""not_chain_succession:(\'Register\', \'Low Medical History\')"", ""not_chain_succession:(\'Register\', \'Contact Hospital\')"", ""not_chain_succession:(\'High Insurance Check\', \'Low Insurance Check\')"", ""not_chain_succession:(\'High Insurance Check\', \'Create Questionnaire\')"", ""not_chain_succession:(\'High Insurance Check\', \'Register\')"", ""not_chain_succession:(\'High Insurance Check\', \'Accept Claim\')"", ""not_chain_succession:(\'High Insurance Check\', \'High Medical History\')"", ""not_chain_succession:(\'High Insurance Check\', \'Low Medical History\')"", ""not_chain_succession:(\'High Insurance Check\', \'Contact Hospital\')"", ""not_chain_succession:(\'Accept Claim\', \'Low Insurance Check\')"", ""not_chain_succession:(\'Accept Claim\', \'Create Questionnaire\')"", ""not_chain_succession:(\'Accept Claim\', \'Register\')"", ""not_chain_succession:(\'Accept Claim\', \'High Insurance Check\')"", ""not_chain_succession:(\'Accept Claim\', \'High Medical History\')"", ""not_chain_succession:(\'Accept Claim\', \'Low Medical History\')"", ""not_chain_succession:(\'Accept Claim\', \'Contact Hospital\')"", ""not_chain_succession:(\'High Medical History\', \'Low Insurance Check\')"", ""not_chain_succession:(\'High Medical History\', \'Create Questionnaire\')"", ""not_chain_succession:(\'High Medical History\', \'Register\')"", ""not_chain_succession:(\'High Medical History\', \'High Insurance Check\')"", ""not_chain_succession:(\'High Medical History\', \'Accept Claim\')"", ""not_chain_succession:(\'High Medical History\', \'Low Medical History\')"", ""not_chain_succession:(\'High Medical History\', \'Contact Hospital\')"", ""not_chain_succession:(\'Low Medical History\', \'Low Insurance Check\')"", ""not_chain_succession:(\'Low Medical History\', \'Create Questionnaire\')"", ""not_chain_succession:(\'Low Medical History\', \'Register\')"", ""not_chain_succession:(\'Low Medical History\', \'High Insurance Check\')"", ""not_chain_succession:(\'Low Medical History\', \'Accept Claim\')"", ""not_chain_succession:(\'Low Medical History\', \'High Medical History\')"", ""not_chain_succession:(\'Low Medical History\', \'Contact Hospital\')"", ""not_chain_succession:(\'Contact Hospital\', \'Low Insurance Check\')"", ""not_chain_succession:(\'Contact Hospital\', \'Create Questionnaire\')"", ""not_chain_succession:(\'Contact Hospital\', \'Register\')"", ""not_chain_succession:(\'Contact Hospital\', \'High Insurance Check\')"", ""not_chain_succession:(\'Contact Hospital\', \'Accept Claim\')"", ""not_chain_succession:(\'Contact Hospital\', \'High Medical History\')"", ""not_chain_succession:(\'Contact Hospital\', \'Low Medical History\')"", ""not_coexistence:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""not_coexistence:(\'Low Insurance Check\', \'Register\')"", ""not_coexistence:(\'Low Insurance Check\', \'High Insurance Check\')"", ""not_coexistence:(\'Low Insurance Check\', \'Accept Claim\')"", ""not_coexistence:(\'Low Insurance Check\', \'High Medical History\')"", ""not_coexistence:(\'Low Insurance Check\', \'Low Medical History\')"", ""not_coexistence:(\'Low Insurance Check\', \'Contact Hospital\')"", ""not_coexistence:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""not_coexistence:(\'Create Questionnaire\', \'Register\')"", ""not_coexistence:(\'Create Questionnaire\', \'High Insurance Check\')"", ""not_coexistence:(\'Create Questionnaire\', \'Accept Claim\')"", ""not_coexistence:(\'Create Questionnaire\', \'High Medical History\')"", ""not_coexistence:(\'Create Questionnaire\', \'Low Medical History\')"", ""not_coexistence:(\'Create Questionnaire\', \'Contact Hospital\')"", ""not_coexistence:(\'Register\', \'Low Insurance Check\')"", ""not_coexistence:(\'Register\', \'Create Questionnaire\')"", ""not_coexistence:(\'Register\', \'High Insurance Check\')"", ""not_coexistence:(\'Register\', \'Accept Claim\')"", ""not_coexistence:(\'Register\', \'High Medical History\')"", ""not_coexistence:(\'Register\', \'Low Medical History\')"", ""not_coexistence:(\'Register\', \'Contact Hospital\')"", ""not_coexistence:(\'High Insurance Check\', \'Low Insurance Check\')"", ""not_coexistence:(\'High Insurance Check\', \'Create Questionnaire\')"", ""not_coexistence:(\'High Insurance Check\', \'Register\')"", ""not_coexistence:(\'High Insurance Check\', \'Accept Claim\')"", ""not_coexistence:(\'High Insurance Check\', \'High Medical History\')"", ""not_coexistence:(\'High Insurance Check\', \'Low Medical History\')"", ""not_coexistence:(\'High Insurance Check\', \'Contact Hospital\')"", ""not_coexistence:(\'Accept Claim\', \'Low Insurance Check\')"", ""not_coexistence:(\'Accept Claim\', \'Create Questionnaire\')"", ""not_coexistence:(\'Accept Claim\', \'Register\')"", ""not_coexistence:(\'Accept Claim\', \'High Insurance Check\')"", ""not_coexistence:(\'Accept Claim\', \'High Medical History\')"", ""not_coexistence:(\'Accept Claim\', \'Low Medical History\')"", ""not_coexistence:(\'Accept Claim\', \'Contact Hospital\')"", ""not_coexistence:(\'High Medical History\', \'Low Insurance Check\')"", ""not_coexistence:(\'High Medical History\', \'Create Questionnaire\')"", ""not_coexistence:(\'High Medical History\', \'Register\')"", ""not_coexistence:(\'High Medical History\', \'High Insurance Check\')"", ""not_coexistence:(\'High Medical History\', \'Accept Claim\')"", ""not_coexistence:(\'High Medical History\', \'Low Medical History\')"", ""not_coexistence:(\'High Medical History\', \'Contact Hospital\')"", ""not_coexistence:(\'Low Medical History\', \'Low Insurance Check\')"", ""not_coexistence:(\'Low Medical History\', \'Create Questionnaire\')"", ""not_coexistence:(\'Low Medical History\', \'Register\')"", ""not_coexistence:(\'Low Medical History\', \'High Insurance Check\')"", ""not_coexistence:(\'Low Medical History\', \'Accept Claim\')"", ""not_coexistence:(\'Low Medical History\', \'High Medical History\')"", ""not_coexistence:(\'Low Medical History\', \'Contact Hospital\')"", ""not_coexistence:(\'Contact Hospital\', \'Low Insurance Check\')"", ""not_coexistence:(\'Contact Hospital\', \'Create Questionnaire\')"", ""not_coexistence:(\'Contact Hospital\', \'Register\')"", ""not_coexistence:(\'Contact Hospital\', \'High Insurance Check\')"", ""not_coexistence:(\'Contact Hospital\', \'Accept Claim\')"", ""not_coexistence:(\'Contact Hospital\', \'High Medical History\')"", ""not_coexistence:(\'Contact Hospital\', \'Low Medical History\')"", ""not_succession:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""not_succession:(\'Low Insurance Check\', \'Register\')"", ""not_succession:(\'Low Insurance Check\', \'High Insurance Check\')"", ""not_succession:(\'Low Insurance Check\', \'Accept Claim\')"", ""not_succession:(\'Low Insurance Check\', \'High Medical History\')"", ""not_succession:(\'Low Insurance Check\', \'Low Medical History\')"", ""not_succession:(\'Low Insurance Check\', \'Contact Hospital\')"", ""not_succession:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""not_succession:(\'Create Questionnaire\', \'Register\')"", ""not_succession:(\'Create Questionnaire\', \'High Insurance Check\')"", ""not_succession:(\'Create Questionnaire\', \'Accept Claim\')"", ""not_succession:(\'Create Questionnaire\', \'High Medical History\')"", ""not_succession:(\'Create Questionnaire\', \'Low Medical History\')"", ""not_succession:(\'Create Questionnaire\', \'Contact Hospital\')"", ""not_succession:(\'Register\', \'Low Insurance Check\')"", ""not_succession:(\'Register\', \'Create Questionnaire\')"", ""not_succession:(\'Register\', \'High Insurance Check\')"", ""not_succession:(\'Register\', \'Accept Claim\')"", ""not_succession:(\'Register\', \'High Medical History\')"", ""not_succession:(\'Register\', \'Low Medical History\')"", ""not_succession:(\'Register\', \'Contact Hospital\')"", ""not_succession:(\'High Insurance Check\', \'Low Insurance Check\')"", ""not_succession:(\'High Insurance Check\', \'Create Questionnaire\')"", ""not_succession:(\'High Insurance Check\', \'Register\')"", ""not_succession:(\'High Insurance Check\', \'Accept Claim\')"", ""not_succession:(\'High Insurance Check\', \'High Medical History\')"", ""not_succession:(\'High Insurance Check\', \'Low Medical History\')"", ""not_succession:(\'High Insurance Check\', \'Contact Hospital\')"", ""not_succession:(\'Accept Claim\', \'Low Insurance Check\')"", ""not_succession:(\'Accept Claim\', \'Create Questionnaire\')"", ""not_succession:(\'Accept Claim\', \'Register\')"", ""not_succession:(\'Accept Claim\', \'High Insurance Check\')"", ""not_succession:(\'Accept Claim\', \'High Medical History\')"", ""not_succession:(\'Accept Claim\', \'Low Medical History\')"", ""not_succession:(\'Accept Claim\', \'Contact Hospital\')"", ""not_succession:(\'High Medical History\', \'Low Insurance Check\')"", ""not_succession:(\'High Medical History\', \'Create Questionnaire\')"", ""not_succession:(\'High Medical History\', \'Register\')"", ""not_succession:(\'High Medical History\', \'High Insurance Check\')"", ""not_succession:(\'High Medical History\', \'Accept Claim\')"", ""not_succession:(\'High Medical History\', \'Low Medical History\')"", ""not_succession:(\'High Medical History\', \'Contact Hospital\')"", ""not_succession:(\'Low Medical History\', \'Low Insurance Check\')"", ""not_succession:(\'Low Medical History\', \'Create Questionnaire\')"", ""not_succession:(\'Low Medical History\', \'Register\')"", ""not_succession:(\'Low Medical History\', \'High Insurance Check\')"", ""not_succession:(\'Low Medical History\', \'Accept Claim\')"", ""not_succession:(\'Low Medical History\', \'High Medical History\')"", ""not_succession:(\'Low Medical History\', \'Contact Hospital\')"", ""not_succession:(\'Contact Hospital\', \'Low Insurance Check\')"", ""not_succession:(\'Contact Hospital\', \'Create Questionnaire\')"", ""not_succession:(\'Contact Hospital\', \'Register\')"", ""not_succession:(\'Contact Hospital\', \'High Insurance Check\')"", ""not_succession:(\'Contact Hospital\', \'Accept Claim\')"", ""not_succession:(\'Contact Hospital\', \'High Medical History\')"", ""not_succession:(\'Contact Hospital\', \'Low Medical History\')"", ""responded_existence:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""responded_existence:(\'Low Insurance Check\', \'Register\')"", ""responded_existence:(\'Low Insurance Check\', \'High Insurance Check\')"", ""responded_existence:(\'Low Insurance Check\', \'Accept Claim\')"", ""responded_existence:(\'Low Insurance Check\', \'High Medical History\')"", ""responded_existence:(\'Low Insurance Check\', \'Low Medical History\')"", ""responded_existence:(\'Low Insurance Check\', \'Contact Hospital\')"", ""responded_existence:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""responded_existence:(\'Create Questionnaire\', \'Register\')"", ""responded_existence:(\'Create Questionnaire\', \'High Insurance Check\')"", ""responded_existence:(\'Create Questionnaire\', \'Accept Claim\')"", ""responded_existence:(\'Create Questionnaire\', \'High Medical History\')"", ""responded_existence:(\'Create Questionnaire\', \'Low Medical History\')"", ""responded_existence:(\'Create Questionnaire\', \'Contact Hospital\')"", ""responded_existence:(\'Register\', \'Low Insurance Check\')"", ""responded_existence:(\'Register\', \'Create Questionnaire\')"", ""responded_existence:(\'Register\', \'High Insurance Check\')"", ""responded_existence:(\'Register\', \'Accept Claim\')"", ""responded_existence:(\'Register\', \'High Medical History\')"", ""responded_existence:(\'Register\', \'Low Medical History\')"", ""responded_existence:(\'Register\', \'Contact Hospital\')"", ""responded_existence:(\'High Insurance Check\', \'Low Insurance Check\')"", ""responded_existence:(\'High Insurance Check\', \'Create Questionnaire\')"", ""responded_existence:(\'High Insurance Check\', \'Register\')"", ""responded_existence:(\'High Insurance Check\', \'Accept Claim\')"", ""responded_existence:(\'High Insurance Check\', \'High Medical History\')"", ""responded_existence:(\'High Insurance Check\', \'Low Medical History\')"", ""responded_existence:(\'High Insurance Check\', \'Contact Hospital\')"", ""responded_existence:(\'Accept Claim\', \'Low Insurance Check\')"", ""responded_existence:(\'Accept Claim\', \'Create Questionnaire\')"", ""responded_existence:(\'Accept Claim\', \'Register\')"", ""responded_existence:(\'Accept Claim\', \'High Insurance Check\')"", ""responded_existence:(\'Accept Claim\', \'High Medical History\')"", ""responded_existence:(\'Accept Claim\', \'Low Medical History\')"", ""responded_existence:(\'Accept Claim\', \'Contact Hospital\')"", ""responded_existence:(\'High Medical History\', \'Low Insurance Check\')"", ""responded_existence:(\'High Medical History\', \'Create Questionnaire\')"", ""responded_existence:(\'High Medical History\', \'Register\')"", ""responded_existence:(\'High Medical History\', \'High Insurance Check\')"", ""responded_existence:(\'High Medical History\', \'Accept Claim\')"", ""responded_existence:(\'High Medical History\', \'Low Medical History\')"", ""responded_existence:(\'High Medical History\', \'Contact Hospital\')"", ""responded_existence:(\'Low Medical History\', \'Low Insurance Check\')"", ""responded_existence:(\'Low Medical History\', \'Create Questionnaire\')"", ""responded_existence:(\'Low Medical History\', \'Register\')"", ""responded_existence:(\'Low Medical History\', \'High Insurance Check\')"", ""responded_existence:(\'Low Medical History\', \'Accept Claim\')"", ""responded_existence:(\'Low Medical History\', \'High Medical History\')"", ""responded_existence:(\'Low Medical History\', \'Contact Hospital\')"", ""responded_existence:(\'Contact Hospital\', \'Low Insurance Check\')"", ""responded_existence:(\'Contact Hospital\', \'Create Questionnaire\')"", ""responded_existence:(\'Contact Hospital\', \'Register\')"", ""responded_existence:(\'Contact Hospital\', \'High Insurance Check\')"", ""responded_existence:(\'Contact Hospital\', \'Accept Claim\')"", ""responded_existence:(\'Contact Hospital\', \'High Medical History\')"", ""responded_existence:(\'Contact Hospital\', \'Low Medical History\')"", ""response:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""response:(\'Low Insurance Check\', \'Register\')"", ""response:(\'Low Insurance Check\', \'High Insurance Check\')"", ""response:(\'Low Insurance Check\', \'Accept Claim\')"", ""response:(\'Low Insurance Check\', \'High Medical History\')"", ""response:(\'Low Insurance Check\', \'Low Medical History\')"", ""response:(\'Low Insurance Check\', \'Contact Hospital\')"", ""response:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""response:(\'Create Questionnaire\', \'Register\')"", ""response:(\'Create Questionnaire\', \'High Insurance Check\')"", ""response:(\'Create Questionnaire\', \'Accept Claim\')"", ""response:(\'Create Questionnaire\', \'High Medical History\')"", ""response:(\'Create Questionnaire\', \'Low Medical History\')"", ""response:(\'Create Questionnaire\', \'Contact Hospital\')"", ""response:(\'Register\', \'Low Insurance Check\')"", ""response:(\'Register\', \'Create Questionnaire\')"", ""response:(\'Register\', \'High Insurance Check\')"", ""response:(\'Register\', \'Accept Claim\')"", ""response:(\'Register\', \'High Medical History\')"", ""response:(\'Register\', \'Low Medical History\')"", ""response:(\'Register\', \'Contact Hospital\')"", ""response:(\'High Insurance Check\', \'Low Insurance Check\')"", ""response:(\'High Insurance Check\', \'Create Questionnaire\')"", ""response:(\'High Insurance Check\', \'Register\')"", ""response:(\'High Insurance Check\', \'Accept Claim\')"", ""response:(\'High Insurance Check\', \'High Medical History\')"", ""response:(\'High Insurance Check\', \'Low Medical History\')"", ""response:(\'High Insurance Check\', \'Contact Hospital\')"", ""response:(\'Accept Claim\', \'Low Insurance Check\')"", ""response:(\'Accept Claim\', \'Create Questionnaire\')"", ""response:(\'Accept Claim\', \'Register\')"", ""response:(\'Accept Claim\', \'High Insurance Check\')"", ""response:(\'Accept Claim\', \'High Medical History\')"", ""response:(\'Accept Claim\', \'Low Medical History\')"", ""response:(\'Accept Claim\', \'Contact Hospital\')"", ""response:(\'High Medical History\', \'Low Insurance Check\')"", ""response:(\'High Medical History\', \'Create Questionnaire\')"", ""response:(\'High Medical History\', \'Register\')"", ""response:(\'High Medical History\', \'High Insurance Check\')"", ""response:(\'High Medical History\', \'Accept Claim\')"", ""response:(\'High Medical History\', \'Low Medical History\')"", ""response:(\'High Medical History\', \'Contact Hospital\')"", ""response:(\'Low Medical History\', \'Low Insurance Check\')"", ""response:(\'Low Medical History\', \'Create Questionnaire\')"", ""response:(\'Low Medical History\', \'Register\')"", ""response:(\'Low Medical History\', \'High Insurance Check\')"", ""response:(\'Low Medical History\', \'Accept Claim\')"", ""response:(\'Low Medical History\', \'High Medical History\')"", ""response:(\'Low Medical History\', \'Contact Hospital\')"", ""response:(\'Contact Hospital\', \'Low Insurance Check\')"", ""response:(\'Contact Hospital\', \'Create Questionnaire\')"", ""response:(\'Contact Hospital\', \'Register\')"", ""response:(\'Contact Hospital\', \'High Insurance Check\')"", ""response:(\'Contact Hospital\', \'Accept Claim\')"", ""response:(\'Contact Hospital\', \'High Medical History\')"", ""response:(\'Contact Hospital\', \'Low Medical History\')"", ""succession:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""succession:(\'Low Insurance Check\', \'Register\')"", ""succession:(\'Low Insurance Check\', \'High Insurance Check\')"", ""succession:(\'Low Insurance Check\', \'Accept Claim\')"", ""succession:(\'Low Insurance Check\', \'High Medical History\')"", ""succession:(\'Low Insurance Check\', \'Low Medical History\')"", ""succession:(\'Low Insurance Check\', \'Contact Hospital\')"", ""succession:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""succession:(\'Create Questionnaire\', \'Register\')"", ""succession:(\'Create Questionnaire\', \'High Insurance Check\')"", ""succession:(\'Create Questionnaire\', \'Accept Claim\')"", ""succession:(\'Create Questionnaire\', \'High Medical History\')"", ""succession:(\'Create Questionnaire\', \'Low Medical History\')"", ""succession:(\'Create Questionnaire\', \'Contact Hospital\')"", ""succession:(\'Register\', \'Low Insurance Check\')"", ""succession:(\'Register\', \'Create Questionnaire\')"", ""succession:(\'Register\', \'High Insurance Check\')"", ""succession:(\'Register\', \'Accept Claim\')"", ""succession:(\'Register\', \'High Medical History\')"", ""succession:(\'Register\', \'Low Medical History\')"", ""succession:(\'Register\', \'Contact Hospital\')"", ""succession:(\'High Insurance Check\', \'Low Insurance Check\')"", ""succession:(\'High Insurance Check\', \'Create Questionnaire\')"", ""succession:(\'High Insurance Check\', \'Register\')"", ""succession:(\'High Insurance Check\', \'Accept Claim\')"", ""succession:(\'High Insurance Check\', \'High Medical History\')"", ""succession:(\'High Insurance Check\', \'Low Medical History\')"", ""succession:(\'High Insurance Check\', \'Contact Hospital\')"", ""succession:(\'Accept Claim\', \'Low Insurance Check\')"", ""succession:(\'Accept Claim\', \'Create Questionnaire\')"", ""succession:(\'Accept Claim\', \'Register\')"", ""succession:(\'Accept Claim\', \'High Insurance Check\')"", ""succession:(\'Accept Claim\', \'High Medical History\')"", ""succession:(\'Accept Claim\', \'Low Medical History\')"", ""succession:(\'Accept Claim\', \'Contact Hospital\')"", ""succession:(\'High Medical History\', \'Low Insurance Check\')"", ""succession:(\'High Medical History\', \'Create Questionnaire\')"", ""succession:(\'High Medical History\', \'Register\')"", ""succession:(\'High Medical History\', \'High Insurance Check\')"", ""succession:(\'High Medical History\', \'Accept Claim\')"", ""succession:(\'High Medical History\', \'Low Medical History\')"", ""succession:(\'High Medical History\', \'Contact Hospital\')"", ""succession:(\'Low Medical History\', \'Low Insurance Check\')"", ""succession:(\'Low Medical History\', \'Create Questionnaire\')"", ""succession:(\'Low Medical History\', \'Register\')"", ""succession:(\'Low Medical History\', \'High Insurance Check\')"", ""succession:(\'Low Medical History\', \'Accept Claim\')"", ""succession:(\'Low Medical History\', \'High Medical History\')"", ""succession:(\'Low Medical History\', \'Contact Hospital\')"", ""succession:(\'Contact Hospital\', \'Low Insurance Check\')"", ""succession:(\'Contact Hospital\', \'Create Questionnaire\')"", ""succession:(\'Contact Hospital\', \'Register\')"", ""succession:(\'Contact Hospital\', \'High Insurance Check\')"", ""succession:(\'Contact Hospital\', \'Accept Claim\')"", ""succession:(\'Contact Hospital\', \'High Medical History\')"", ""succession:(\'Contact Hospital\', \'Low Medical History\')"", ""precedence:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""precedence:(\'Low Insurance Check\', \'Register\')"", ""precedence:(\'Low Insurance Check\', \'High Insurance Check\')"", ""precedence:(\'Low Insurance Check\', \'Accept Claim\')"", ""precedence:(\'Low Insurance Check\', \'High Medical History\')"", ""precedence:(\'Low Insurance Check\', \'Low Medical History\')"", ""precedence:(\'Low Insurance Check\', \'Contact Hospital\')"", ""precedence:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""precedence:(\'Create Questionnaire\', \'Register\')"", ""precedence:(\'Create Questionnaire\', \'High Insurance Check\')"", ""precedence:(\'Create Questionnaire\', \'Accept Claim\')"", ""precedence:(\'Create Questionnaire\', \'High Medical History\')"", ""precedence:(\'Create Questionnaire\', \'Low Medical History\')"", ""precedence:(\'Create Questionnaire\', \'Contact Hospital\')"", ""precedence:(\'Register\', \'Low Insurance Check\')"", ""precedence:(\'Register\', \'Create Questionnaire\')"", ""precedence:(\'Register\', \'High Insurance Check\')"", ""precedence:(\'Register\', \'Accept Claim\')"", ""precedence:(\'Register\', \'High Medical History\')"", ""precedence:(\'Register\', \'Low Medical History\')"", ""precedence:(\'Register\', \'Contact Hospital\')"", ""precedence:(\'High Insurance Check\', \'Low Insurance Check\')"", ""precedence:(\'High Insurance Check\', \'Create Questionnaire\')"", ""precedence:(\'High Insurance Check\', \'Register\')"", ""precedence:(\'High Insurance Check\', \'Accept Claim\')"", ""precedence:(\'High Insurance Check\', \'High Medical History\')"", ""precedence:(\'High Insurance Check\', \'Low Medical History\')"", ""precedence:(\'High Insurance Check\', \'Contact Hospital\')"", ""precedence:(\'Accept Claim\', \'Low Insurance Check\')"", ""precedence:(\'Accept Claim\', \'Create Questionnaire\')"", ""precedence:(\'Accept Claim\', \'Register\')"", ""precedence:(\'Accept Claim\', \'High Insurance Check\')"", ""precedence:(\'Accept Claim\', \'High Medical History\')"", ""precedence:(\'Accept Claim\', \'Low Medical History\')"", ""precedence:(\'Accept Claim\', \'Contact Hospital\')"", ""precedence:(\'High Medical History\', \'Low Insurance Check\')"", ""precedence:(\'High Medical History\', \'Create Questionnaire\')"", ""precedence:(\'High Medical History\', \'Register\')"", ""precedence:(\'High Medical History\', \'High Insurance Check\')"", ""precedence:(\'High Medical History\', \'Accept Claim\')"", ""precedence:(\'High Medical History\', \'Low Medical History\')"", ""precedence:(\'High Medical History\', \'Contact Hospital\')"", ""precedence:(\'Low Medical History\', \'Low Insurance Check\')"", ""precedence:(\'Low Medical History\', \'Create Questionnaire\')"", ""precedence:(\'Low Medical History\', \'Register\')"", ""precedence:(\'Low Medical History\', \'High Insurance Check\')"", ""precedence:(\'Low Medical History\', \'Accept Claim\')"", ""precedence:(\'Low Medical History\', \'High Medical History\')"", ""precedence:(\'Low Medical History\', \'Contact Hospital\')"", ""precedence:(\'Contact Hospital\', \'Low Insurance Check\')"", ""precedence:(\'Contact Hospital\', \'Create Questionnaire\')"", ""precedence:(\'Contact Hospital\', \'Register\')"", ""precedence:(\'Contact Hospital\', \'High Insurance Check\')"", ""precedence:(\'Contact Hospital\', \'Accept Claim\')"", ""precedence:(\'Contact Hospital\', \'High Medical History\')"", ""precedence:(\'Contact Hospital\', \'Low Medical History\')"", \'trace_id\', \'label\']\n        self.assertEqual(expected_shape, run_df.values.shape)\n        self.assertEqual(sorted(expected_columns), sorted(list(run_df.columns)))\n\n'"
src/encoding/declare/tests/test_declare_mining.py,0,"b'from django.test import TestCase\n\nfrom src.encoding.declare.declare_mining import filter_candidates_by_support, generate_train_candidate_constraints, \\\n    find_if_satisfied_by_class, apply_template_to_log, template_sizes, transform_results_to_numpy\n\n\nclass TestDeclareMining(TestCase):\n    """"""Proof of concept tests""""""\n\n    def setUp(self) -> None:\n        self.labels = {\'2_100\': \'false\', \'2_101\': \'true\', \'2_102\': \'false\', \'2_103\': \'true\', \'2_104\': \'true\',\n                  \'2_105\': \'false\', \'2_106\': \'false\', \'2_107\': \'false\', \'2_108\': \'true\', \'2_109\': \'true\',\n                  \'2_126\': \'false\', \'2_124\': \'true\', \'2_122\': \'true\', \'2_123\': \'false\'}\n        self.transformed_log = {\n                \'2_100\': {\'Contact Hospital\': [3], \'Create Questionnaire\': [1], \'High Insurance Check\': [2],\n                          \'High Medical History\': [4], \'Prepare Notification Content\': [6], \'Register\': [0],\n                          \'Reject Claim\': [5]},\n                \'2_101\': {\'Accept Claim\': [4], \'Create Questionnaire\': [2], \'Low Insurance Check\': [3],\n                         \'Low Medical History\': [1], \'Prepare Notification Content\': [5], \'Register\': [0],\n                         \'Send Questionnaire\': [6]},\n                \'2_102\': {\'Contact Hospital\': [4], \'Create Questionnaire\': [1], \'High Insurance Check\': [2],\n                         \'High Medical History\': [3], \'Prepare Notification Content\': [6], \'Register\': [0],\n                         \'Reject Claim\': [5]},\n                \'2_103\': {\'Accept Claim\': [3], \'Create Questionnaire\': [4], \'Low Insurance Check\': [2],\n                         \'Low Medical History\': [1], \'Prepare Notification Content\': [5], \'Register\': [0],\n                         \'Send Notification by e-mail\': [6]},\n                \'2_104\': {\'Accept Claim\': [3], \'Create Questionnaire\': [5], \'Low Insurance Check\': [2],\n                         \'Low Medical History\': [1], \'Prepare Notification Content\': [4], \'Register\': [0],\n                         \'Send Notification by e-mail\': [6]},\n                \'2_105\': {\'Contact Hospital\': [1], \'Create Questionnaire\': [6], \'High Insurance Check\': [3],\n                         \'High Medical History\': [2], \'Prepare Notification Content\': [5], \'Register\': [0],\n                         \'Reject Claim\': [4]},\n                \'2_106\': {\'Contact Hospital\': [1], \'Create Questionnaire\': [3], \'High Insurance Check\': [2],\n                         \'High Medical History\': [4], \'Prepare Notification Content\': [6], \'Register\': [0],\n                         \'Reject Claim\': [5]},\n                \'2_107\': {\'Create Questionnaire\': [1], \'Low Insurance Check\': [3],\n                         \'Low Medical History\': [2], \'Prepare Notification Content\': [5], \'Register\': [0],\n                         \'Reject Claim\': [4], \'Send Notification by e-mail\': [6]},\n                \'2_108\': {\'Accept Claim\': [3], \'Create Questionnaire\': [4], \'Low Insurance Check\': [2],\n                         \'Low Medical History\': [1], \'Prepare Notification Content\': [5], \'Register\': [0],\n                         \'Send Notification by Post\': [6]},\n                \'2_109\': {\'Accept Claim\': [5], \'Contact Hospital\': [4], \'Create Questionnaire\': [1],\n                         \'High Insurance Check\': [3], \'High Medical History\': [2],\n                         \'Prepare Notification Content\': [6], \'Register\': [0]},\n                \'2_126\': {\'Create Questionnaire\': [1], \'Low Insurance Check\': [3],\n                         \'Low Medical History\': [2], \'Prepare Notification Content\': [5], \'Register\': [0],\n                         \'Reject Claim\': [4], \'Send Questionnaire\': [6]},\n                \'2_124\': {\'Accept Claim\': [5], \'Contact Hospital\': [3], \'Create Questionnaire\': [1],\n                         \'High Insurance Check\': [4], \'High Medical History\': [2],\n                         \'Prepare Notification Content\': [6], \'Register\': [0]},\n                \'2_122\': {\'Accept Claim\': [4], \'Contact Hospital\': [3], \'Create Questionnaire\': [6],\n                         \'High Insurance Check\': [1], \'High Medical History\': [2],\n                         \'Prepare Notification Content\': [5], \'Register\': [0]},\n                \'2_123\': {\'Contact Hospital\': [3], \'Create Questionnaire\': [5], \'High Insurance Check\': [1],\n                         \'High Medical History\': [2], \'Prepare Notification Content\': [6], \'Register\': [0],\n                         \'Reject Claim\': [4]}}\n\n    def test_find_if_satisfied_by_class(self):\n        constraint_result = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n        constraint_support_true = 0\n        constraint_support_false = 0\n        satis_true, satis_false = find_if_satisfied_by_class(constraint_result, self.transformed_log, self.labels, constraint_support_true, constraint_support_false)\n        expected_true = True\n        expected_false = True\n        self.assertEqual(expected_true, satis_true)\n        self.assertEqual(expected_false, satis_false)\n\n    def test_generate_train_candidate_constraints(self):\n        candidates = [(\'Accept Claim\',), (\'Send Questionnaire\',), (\'Create Questionnaire\',), (\'Prepare Notification Content\',), (\'Register\',), (\'Reject Claim\',), (\'Low Insurance Check\',), (\'Send Notification by e-mail\',), (\'Send Notification by Post\',), (\'Low Medical History\',), (\'Contact Hospital\',), (\'High Medical History\',), (\'High Insurance Check\',), (\'Accept Claim\', \'Send Questionnaire\'), (\'Accept Claim\', \'Create Questionnaire\'), (\'Accept Claim\', \'Prepare Notification Content\'), (\'Accept Claim\', \'Register\'), (\'Accept Claim\', \'Reject Claim\'), (\'Accept Claim\', \'Low Insurance Check\'), (\'Accept Claim\', \'Send Notification by e-mail\'), (\'Accept Claim\', \'Send Notification by Post\'), (\'Accept Claim\', \'Low Medical History\'), (\'Accept Claim\', \'Contact Hospital\'), (\'Accept Claim\', \'High Medical History\'), (\'Accept Claim\', \'High Insurance Check\'), (\'Send Questionnaire\', \'Accept Claim\'), (\'Send Questionnaire\', \'Create Questionnaire\'), (\'Send Questionnaire\', \'Prepare Notification Content\'), (\'Send Questionnaire\', \'Register\'), (\'Send Questionnaire\', \'Reject Claim\'), (\'Send Questionnaire\', \'Low Insurance Check\'), (\'Send Questionnaire\', \'Send Notification by e-mail\'), (\'Send Questionnaire\', \'Send Notification by Post\'), (\'Send Questionnaire\', \'Low Medical History\'), (\'Send Questionnaire\', \'Contact Hospital\'), (\'Send Questionnaire\', \'High Medical History\'), (\'Send Questionnaire\', \'High Insurance Check\'), (\'Create Questionnaire\', \'Accept Claim\'), (\'Create Questionnaire\', \'Send Questionnaire\'), (\'Create Questionnaire\', \'Prepare Notification Content\'), (\'Create Questionnaire\', \'Register\'), (\'Create Questionnaire\', \'Reject Claim\'), (\'Create Questionnaire\', \'Low Insurance Check\'), (\'Create Questionnaire\', \'Send Notification by e-mail\'), (\'Create Questionnaire\', \'Send Notification by Post\'), (\'Create Questionnaire\', \'Low Medical History\'), (\'Create Questionnaire\', \'Contact Hospital\'), (\'Create Questionnaire\', \'High Medical History\'), (\'Create Questionnaire\', \'High Insurance Check\'), (\'Prepare Notification Content\', \'Accept Claim\'), (\'Prepare Notification Content\', \'Send Questionnaire\'), (\'Prepare Notification Content\', \'Create Questionnaire\'), (\'Prepare Notification Content\', \'Register\'), (\'Prepare Notification Content\', \'Reject Claim\'), (\'Prepare Notification Content\', \'Low Insurance Check\'), (\'Prepare Notification Content\', \'Send Notification by e-mail\'), (\'Prepare Notification Content\', \'Send Notification by Post\'), (\'Prepare Notification Content\', \'Low Medical History\'), (\'Prepare Notification Content\', \'Contact Hospital\'), (\'Prepare Notification Content\', \'High Medical History\'), (\'Prepare Notification Content\', \'High Insurance Check\'), (\'Register\', \'Accept Claim\'), (\'Register\', \'Send Questionnaire\'), (\'Register\', \'Create Questionnaire\'), (\'Register\', \'Prepare Notification Content\'), (\'Register\', \'Reject Claim\'), (\'Register\', \'Low Insurance Check\'), (\'Register\', \'Send Notification by e-mail\'), (\'Register\', \'Send Notification by Post\'), (\'Register\', \'Low Medical History\'), (\'Register\', \'Contact Hospital\'), (\'Register\', \'High Medical History\'), (\'Register\', \'High Insurance Check\'), (\'Reject Claim\', \'Accept Claim\'), (\'Reject Claim\', \'Send Questionnaire\'), (\'Reject Claim\', \'Create Questionnaire\'), (\'Reject Claim\', \'Prepare Notification Content\'), (\'Reject Claim\', \'Register\'), (\'Reject Claim\', \'Low Insurance Check\'), (\'Reject Claim\', \'Send Notification by e-mail\'), (\'Reject Claim\', \'Send Notification by Post\'), (\'Reject Claim\', \'Low Medical History\'), (\'Reject Claim\', \'Contact Hospital\'), (\'Reject Claim\', \'High Medical History\'), (\'Reject Claim\', \'High Insurance Check\'), (\'Low Insurance Check\', \'Accept Claim\'), (\'Low Insurance Check\', \'Send Questionnaire\'), (\'Low Insurance Check\', \'Create Questionnaire\'), (\'Low Insurance Check\', \'Prepare Notification Content\'), (\'Low Insurance Check\', \'Register\'), (\'Low Insurance Check\', \'Reject Claim\'), (\'Low Insurance Check\', \'Send Notification by e-mail\'), (\'Low Insurance Check\', \'Send Notification by Post\'), (\'Low Insurance Check\', \'Low Medical History\'), (\'Low Insurance Check\', \'Contact Hospital\'), (\'Low Insurance Check\', \'High Medical History\'), (\'Low Insurance Check\', \'High Insurance Check\'), (\'Send Notification by e-mail\', \'Accept Claim\'), (\'Send Notification by e-mail\', \'Send Questionnaire\'), (\'Send Notification by e-mail\', \'Create Questionnaire\'), (\'Send Notification by e-mail\', \'Prepare Notification Content\'), (\'Send Notification by e-mail\', \'Register\'), (\'Send Notification by e-mail\', \'Reject Claim\'), (\'Send Notification by e-mail\', \'Low Insurance Check\'), (\'Send Notification by e-mail\', \'Send Notification by Post\'), (\'Send Notification by e-mail\', \'Low Medical History\'), (\'Send Notification by e-mail\', \'Contact Hospital\'), (\'Send Notification by e-mail\', \'High Medical History\'), (\'Send Notification by e-mail\', \'High Insurance Check\'), (\'Send Notification by Post\', \'Accept Claim\'), (\'Send Notification by Post\', \'Send Questionnaire\'), (\'Send Notification by Post\', \'Create Questionnaire\'), (\'Send Notification by Post\', \'Prepare Notification Content\'), (\'Send Notification by Post\', \'Register\'), (\'Send Notification by Post\', \'Reject Claim\'), (\'Send Notification by Post\', \'Low Insurance Check\'), (\'Send Notification by Post\', \'Send Notification by e-mail\'), (\'Send Notification by Post\', \'Low Medical History\'), (\'Send Notification by Post\', \'Contact Hospital\'), (\'Send Notification by Post\', \'High Medical History\'), (\'Send Notification by Post\', \'High Insurance Check\'), (\'Low Medical History\', \'Accept Claim\'), (\'Low Medical History\', \'Send Questionnaire\'), (\'Low Medical History\', \'Create Questionnaire\'), (\'Low Medical History\', \'Prepare Notification Content\'), (\'Low Medical History\', \'Register\'), (\'Low Medical History\', \'Reject Claim\'), (\'Low Medical History\', \'Low Insurance Check\'), (\'Low Medical History\', \'Send Notification by e-mail\'), (\'Low Medical History\', \'Send Notification by Post\'), (\'Low Medical History\', \'Contact Hospital\'), (\'Low Medical History\', \'High Medical History\'), (\'Low Medical History\', \'High Insurance Check\'), (\'Contact Hospital\', \'Accept Claim\'), (\'Contact Hospital\', \'Send Questionnaire\'), (\'Contact Hospital\', \'Create Questionnaire\'), (\'Contact Hospital\', \'Prepare Notification Content\'), (\'Contact Hospital\', \'Register\'), (\'Contact Hospital\', \'Reject Claim\'), (\'Contact Hospital\', \'Low Insurance Check\'), (\'Contact Hospital\', \'Send Notification by e-mail\'), (\'Contact Hospital\', \'Send Notification by Post\'), (\'Contact Hospital\', \'Low Medical History\'), (\'Contact Hospital\', \'High Medical History\'), (\'Contact Hospital\', \'High Insurance Check\'), (\'High Medical History\', \'Accept Claim\'), (\'High Medical History\', \'Send Questionnaire\'), (\'High Medical History\', \'Create Questionnaire\'), (\'High Medical History\', \'Prepare Notification Content\'), (\'High Medical History\', \'Register\'), (\'High Medical History\', \'Reject Claim\'), (\'High Medical History\', \'Low Insurance Check\'), (\'High Medical History\', \'Send Notification by e-mail\'), (\'High Medical History\', \'Send Notification by Post\'), (\'High Medical History\', \'Low Medical History\'), (\'High Medical History\', \'Contact Hospital\'), (\'High Medical History\', \'High Insurance Check\'), (\'High Insurance Check\', \'Accept Claim\'), (\'High Insurance Check\', \'Send Questionnaire\'), (\'High Insurance Check\', \'Create Questionnaire\'), (\'High Insurance Check\', \'Prepare Notification Content\'), (\'High Insurance Check\', \'Register\'), (\'High Insurance Check\', \'Reject Claim\'), (\'High Insurance Check\', \'Low Insurance Check\'), (\'High Insurance Check\', \'Send Notification by e-mail\'), (\'High Insurance Check\', \'Send Notification by Post\'), (\'High Insurance Check\', \'Low Medical History\'), (\'High Insurance Check\', \'Contact Hospital\'), (\'High Insurance Check\', \'High Medical History\')]\n        templates = [\'init\', \'exist\', \'absence1\', \'absence2\', \'absence3\', \'choice\', \'coexistence\', \'exactly1\', \'exactly2\', \'exactly3\', \'alternate_precedence\', \'alternate_succession\', \'alternate_response\', \'chain_precedence\', \'chain_response\', \'chain_succession\', \'not_chain_succession\', \'not_coexistence\', \'not_succession\', \'responded_existence\', \'response\', \'succession\', \'precedence\']\n        constraint_support_true = 0\n        constraint_support_false = 0\n        filter_t = True\n        train_results = generate_train_candidate_constraints(candidates, templates, self.transformed_log, self.labels, constraint_support_true, constraint_support_false, filter_t=filter_t)\n        expected = {""init:(\'Low Insurance Check\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""init:(\'Reject Claim\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""init:(\'Accept Claim\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""init:(\'High Insurance Check\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""init:(\'Low Medical History\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""init:(\'Register\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""init:(\'Send Questionnaire\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""init:(\'Send Notification by Post\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""init:(\'Create Questionnaire\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""init:(\'Contact Hospital\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""init:(\'Prepare Notification Content\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""init:(\'High Medical History\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""init:(\'Send Notification by e-mail\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exist:(\'Low Insurance Check\',)"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""exist:(\'Reject Claim\',)"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""exist:(\'Accept Claim\',)"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""exist:(\'High Insurance Check\',)"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""exist:(\'Low Medical History\',)"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""exist:(\'Register\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""exist:(\'Send Questionnaire\',)"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""exist:(\'Send Notification by Post\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""exist:(\'Create Questionnaire\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""exist:(\'Contact Hospital\',)"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""exist:(\'Prepare Notification Content\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""exist:(\'High Medical History\',)"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""exist:(\'Send Notification by e-mail\',)"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""absence1:(\'Low Insurance Check\',)"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""absence1:(\'Reject Claim\',)"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""absence1:(\'Accept Claim\',)"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""absence1:(\'High Insurance Check\',)"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""absence1:(\'Low Medical History\',)"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""absence1:(\'Register\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""absence1:(\'Send Questionnaire\',)"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""absence1:(\'Send Notification by Post\',)"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""absence1:(\'Create Questionnaire\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""absence1:(\'Contact Hospital\',)"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""absence1:(\'Prepare Notification Content\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""absence1:(\'High Medical History\',)"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""absence1:(\'Send Notification by e-mail\',)"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""absence2:(\'Low Insurance Check\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence2:(\'Reject Claim\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence2:(\'Accept Claim\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence2:(\'High Insurance Check\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence2:(\'Low Medical History\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence2:(\'Register\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence2:(\'Send Questionnaire\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence2:(\'Send Notification by Post\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence2:(\'Create Questionnaire\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence2:(\'Contact Hospital\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence2:(\'Prepare Notification Content\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence2:(\'High Medical History\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence2:(\'Send Notification by e-mail\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence3:(\'Low Insurance Check\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence3:(\'Reject Claim\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence3:(\'Accept Claim\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence3:(\'High Insurance Check\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence3:(\'Low Medical History\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence3:(\'Register\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence3:(\'Send Questionnaire\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence3:(\'Send Notification by Post\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence3:(\'Create Questionnaire\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence3:(\'Contact Hospital\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence3:(\'Prepare Notification Content\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence3:(\'High Medical History\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence3:(\'Send Notification by e-mail\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'Low Insurance Check\', \'Reject Claim\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], ""choice:(\'Low Insurance Check\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], ""choice:(\'Low Insurance Check\', \'High Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'Low Insurance Check\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""choice:(\'Low Insurance Check\', \'Register\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""choice:(\'Low Insurance Check\', \'Send Questionnaire\')"": [-1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1], ""choice:(\'Low Insurance Check\', \'Send Notification by Post\')"": [-1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""choice:(\'Low Insurance Check\', \'Create Questionnaire\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""choice:(\'Low Insurance Check\', \'Contact Hospital\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""choice:(\'Low Insurance Check\', \'High Medical History\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [-1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1], ""choice:(\'Reject Claim\', \'Low Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], ""choice:(\'Reject Claim\', \'Accept Claim\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'Reject Claim\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], ""choice:(\'Reject Claim\', \'Low Medical History\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], ""choice:(\'Reject Claim\', \'Register\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""choice:(\'Reject Claim\', \'Send Questionnaire\')"": [1, 1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1], ""choice:(\'Reject Claim\', \'Send Notification by Post\')"": [1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1], ""choice:(\'Reject Claim\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""choice:(\'Reject Claim\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], ""choice:(\'Reject Claim\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""choice:(\'Reject Claim\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], ""choice:(\'Reject Claim\', \'Send Notification by e-mail\')"": [1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, 1], ""choice:(\'Accept Claim\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], ""choice:(\'Accept Claim\', \'Reject Claim\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'Accept Claim\', \'High Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], ""choice:(\'Accept Claim\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], ""choice:(\'Accept Claim\', \'Register\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""choice:(\'Accept Claim\', \'Send Questionnaire\')"": [-1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1], ""choice:(\'Accept Claim\', \'Send Notification by Post\')"": [-1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1], ""choice:(\'Accept Claim\', \'Create Questionnaire\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""choice:(\'Accept Claim\', \'Contact Hospital\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], ""choice:(\'Accept Claim\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""choice:(\'Accept Claim\', \'High Medical History\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], ""choice:(\'Accept Claim\', \'Send Notification by e-mail\')"": [-1, 1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1, -1], ""choice:(\'High Insurance Check\', \'Low Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'High Insurance Check\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], ""choice:(\'High Insurance Check\', \'Accept Claim\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], ""choice:(\'High Insurance Check\', \'Low Medical History\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'High Insurance Check\', \'Register\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'High Insurance Check\', \'Send Questionnaire\')"": [1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1], ""choice:(\'High Insurance Check\', \'Send Notification by Post\')"": [1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1], ""choice:(\'High Insurance Check\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'High Insurance Check\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""choice:(\'High Insurance Check\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'High Insurance Check\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""choice:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1], ""choice:(\'Low Medical History\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""choice:(\'Low Medical History\', \'Reject Claim\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], ""choice:(\'Low Medical History\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], ""choice:(\'Low Medical History\', \'High Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'Low Medical History\', \'Register\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""choice:(\'Low Medical History\', \'Send Questionnaire\')"": [-1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1], ""choice:(\'Low Medical History\', \'Send Notification by Post\')"": [-1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""choice:(\'Low Medical History\', \'Create Questionnaire\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""choice:(\'Low Medical History\', \'Contact Hospital\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'Low Medical History\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""choice:(\'Low Medical History\', \'High Medical History\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'Low Medical History\', \'Send Notification by e-mail\')"": [-1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1], ""choice:(\'Register\', \'Low Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""choice:(\'Register\', \'Reject Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""choice:(\'Register\', \'Accept Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""choice:(\'Register\', \'High Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'Register\', \'Low Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""choice:(\'Register\', \'Send Questionnaire\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""choice:(\'Register\', \'Send Notification by Post\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""choice:(\'Register\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""choice:(\'Register\', \'Contact Hospital\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'Register\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""choice:(\'Register\', \'High Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'Register\', \'Send Notification by e-mail\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""choice:(\'Send Questionnaire\', \'Low Insurance Check\')"": [-1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1], ""choice:(\'Send Questionnaire\', \'Reject Claim\')"": [1, 1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1], ""choice:(\'Send Questionnaire\', \'Accept Claim\')"": [-1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1], ""choice:(\'Send Questionnaire\', \'High Insurance Check\')"": [1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1], ""choice:(\'Send Questionnaire\', \'Low Medical History\')"": [-1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1], ""choice:(\'Send Questionnaire\', \'Register\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""choice:(\'Send Questionnaire\', \'Send Notification by Post\')"": [-1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1], ""choice:(\'Send Questionnaire\', \'Create Questionnaire\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""choice:(\'Send Questionnaire\', \'Contact Hospital\')"": [1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1], ""choice:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""choice:(\'Send Questionnaire\', \'High Medical History\')"": [1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1], ""choice:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [-1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""choice:(\'Send Notification by Post\', \'Low Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""choice:(\'Send Notification by Post\', \'Reject Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1], ""choice:(\'Send Notification by Post\', \'Accept Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1], ""choice:(\'Send Notification by Post\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1], ""choice:(\'Send Notification by Post\', \'Low Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""choice:(\'Send Notification by Post\', \'Register\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""choice:(\'Send Notification by Post\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1], ""choice:(\'Send Notification by Post\', \'Create Questionnaire\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""choice:(\'Send Notification by Post\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1], ""choice:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""choice:(\'Send Notification by Post\', \'High Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1], ""choice:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1], ""choice:(\'Create Questionnaire\', \'Low Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""choice:(\'Create Questionnaire\', \'Reject Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""choice:(\'Create Questionnaire\', \'Accept Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""choice:(\'Create Questionnaire\', \'High Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'Create Questionnaire\', \'Low Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""choice:(\'Create Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""choice:(\'Create Questionnaire\', \'Send Questionnaire\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""choice:(\'Create Questionnaire\', \'Send Notification by Post\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""choice:(\'Create Questionnaire\', \'Contact Hospital\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""choice:(\'Create Questionnaire\', \'High Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""choice:(\'Contact Hospital\', \'Low Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'Contact Hospital\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], ""choice:(\'Contact Hospital\', \'Accept Claim\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], ""choice:(\'Contact Hospital\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""choice:(\'Contact Hospital\', \'Low Medical History\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'Contact Hospital\', \'Register\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'Contact Hospital\', \'Send Questionnaire\')"": [1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1], ""choice:(\'Contact Hospital\', \'Send Notification by Post\')"": [1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1], ""choice:(\'Contact Hospital\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'Contact Hospital\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'Contact Hospital\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""choice:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1], ""choice:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""choice:(\'Prepare Notification Content\', \'Reject Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""choice:(\'Prepare Notification Content\', \'Accept Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""choice:(\'Prepare Notification Content\', \'High Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'Prepare Notification Content\', \'Low Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""choice:(\'Prepare Notification Content\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""choice:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""choice:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""choice:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""choice:(\'Prepare Notification Content\', \'Contact Hospital\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'Prepare Notification Content\', \'High Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""choice:(\'High Medical History\', \'Low Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'High Medical History\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], ""choice:(\'High Medical History\', \'Accept Claim\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], ""choice:(\'High Medical History\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""choice:(\'High Medical History\', \'Low Medical History\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'High Medical History\', \'Register\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'High Medical History\', \'Send Questionnaire\')"": [1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1], ""choice:(\'High Medical History\', \'Send Notification by Post\')"": [1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1], ""choice:(\'High Medical History\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'High Medical History\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""choice:(\'High Medical History\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'High Medical History\', \'Send Notification by e-mail\')"": [1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1], ""choice:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [-1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1], ""choice:(\'Send Notification by e-mail\', \'Reject Claim\')"": [1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, 1], ""choice:(\'Send Notification by e-mail\', \'Accept Claim\')"": [-1, 1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1, -1], ""choice:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1], ""choice:(\'Send Notification by e-mail\', \'Low Medical History\')"": [-1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1], ""choice:(\'Send Notification by e-mail\', \'Register\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""choice:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""choice:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [-1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1], ""choice:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""choice:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1], ""choice:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""choice:(\'Send Notification by e-mail\', \'High Medical History\')"": [1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'Low Insurance Check\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, 0, 0, -1], ""coexistence:(\'Low Insurance Check\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0], ""coexistence:(\'Low Insurance Check\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Low Insurance Check\', \'Low Medical History\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""coexistence:(\'Low Insurance Check\', \'Register\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""coexistence:(\'Low Insurance Check\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], ""coexistence:(\'Low Insurance Check\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""coexistence:(\'Low Insurance Check\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""coexistence:(\'Low Insurance Check\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""coexistence:(\'Low Insurance Check\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], ""coexistence:(\'Reject Claim\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, 0, 0, -1], ""coexistence:(\'Reject Claim\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Reject Claim\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], ""coexistence:(\'Reject Claim\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, 0, 0, -1], ""coexistence:(\'Reject Claim\', \'Register\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""coexistence:(\'Reject Claim\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, -1, 0, 0, 1, 0, 0, -1], ""coexistence:(\'Reject Claim\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""coexistence:(\'Reject Claim\', \'Create Questionnaire\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""coexistence:(\'Reject Claim\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], ""coexistence:(\'Reject Claim\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""coexistence:(\'Reject Claim\', \'High Medical History\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], ""coexistence:(\'Reject Claim\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, 1, 0, 0, -1, 0, 0, -1], ""coexistence:(\'Accept Claim\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0], ""coexistence:(\'Accept Claim\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Accept Claim\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], ""coexistence:(\'Accept Claim\', \'Low Medical History\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0], ""coexistence:(\'Accept Claim\', \'Register\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""coexistence:(\'Accept Claim\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, 0], ""coexistence:(\'Accept Claim\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""coexistence:(\'Accept Claim\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""coexistence:(\'Accept Claim\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], ""coexistence:(\'Accept Claim\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""coexistence:(\'Accept Claim\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], ""coexistence:(\'Accept Claim\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, -1, -1, -1, 0, -1, -1, 0], ""coexistence:(\'High Insurance Check\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'High Insurance Check\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], ""coexistence:(\'High Insurance Check\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], ""coexistence:(\'High Insurance Check\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'High Insurance Check\', \'Register\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'High Insurance Check\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""coexistence:(\'High Insurance Check\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""coexistence:(\'High Insurance Check\', \'Create Questionnaire\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'High Insurance Check\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""coexistence:(\'High Insurance Check\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'High Insurance Check\', \'High Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""coexistence:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""coexistence:(\'Low Medical History\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""coexistence:(\'Low Medical History\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, 0, 0, -1], ""coexistence:(\'Low Medical History\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0], ""coexistence:(\'Low Medical History\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Low Medical History\', \'Register\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""coexistence:(\'Low Medical History\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], ""coexistence:(\'Low Medical History\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""coexistence:(\'Low Medical History\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""coexistence:(\'Low Medical History\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Low Medical History\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""coexistence:(\'Low Medical History\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Low Medical History\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], ""coexistence:(\'Register\', \'Low Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""coexistence:(\'Register\', \'Reject Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""coexistence:(\'Register\', \'Accept Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""coexistence:(\'Register\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'Register\', \'Low Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""coexistence:(\'Register\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""coexistence:(\'Register\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""coexistence:(\'Register\', \'Create Questionnaire\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""coexistence:(\'Register\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'Register\', \'Prepare Notification Content\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""coexistence:(\'Register\', \'High Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'Register\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Send Questionnaire\', \'Low Insurance Check\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], ""coexistence:(\'Send Questionnaire\', \'Reject Claim\')"": [-1, -1, -1, 0, 0, -1, -1, -1, 0, 0, 1, 0, 0, -1], ""coexistence:(\'Send Questionnaire\', \'Accept Claim\')"": [0, 1, 0, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, 0], ""coexistence:(\'Send Questionnaire\', \'High Insurance Check\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""coexistence:(\'Send Questionnaire\', \'Low Medical History\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], ""coexistence:(\'Send Questionnaire\', \'Register\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""coexistence:(\'Send Questionnaire\', \'Send Notification by Post\')"": [0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0], ""coexistence:(\'Send Questionnaire\', \'Create Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""coexistence:(\'Send Questionnaire\', \'Contact Hospital\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""coexistence:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""coexistence:(\'Send Questionnaire\', \'High Medical History\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""coexistence:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [0, -1, 0, -1, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0], ""coexistence:(\'Send Notification by Post\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""coexistence:(\'Send Notification by Post\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""coexistence:(\'Send Notification by Post\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""coexistence:(\'Send Notification by Post\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""coexistence:(\'Send Notification by Post\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""coexistence:(\'Send Notification by Post\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""coexistence:(\'Send Notification by Post\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0], ""coexistence:(\'Send Notification by Post\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""coexistence:(\'Send Notification by Post\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""coexistence:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""coexistence:(\'Send Notification by Post\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""coexistence:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0], ""coexistence:(\'Create Questionnaire\', \'Low Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""coexistence:(\'Create Questionnaire\', \'Reject Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""coexistence:(\'Create Questionnaire\', \'Accept Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""coexistence:(\'Create Questionnaire\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'Create Questionnaire\', \'Low Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""coexistence:(\'Create Questionnaire\', \'Register\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""coexistence:(\'Create Questionnaire\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""coexistence:(\'Create Questionnaire\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""coexistence:(\'Create Questionnaire\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""coexistence:(\'Create Questionnaire\', \'High Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Contact Hospital\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Contact Hospital\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], ""coexistence:(\'Contact Hospital\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], ""coexistence:(\'Contact Hospital\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""coexistence:(\'Contact Hospital\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Contact Hospital\', \'Register\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'Contact Hospital\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""coexistence:(\'Contact Hospital\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""coexistence:(\'Contact Hospital\', \'Create Questionnaire\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'Contact Hospital\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'Contact Hospital\', \'High Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""coexistence:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""coexistence:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""coexistence:(\'Prepare Notification Content\', \'Reject Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""coexistence:(\'Prepare Notification Content\', \'Accept Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""coexistence:(\'Prepare Notification Content\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'Prepare Notification Content\', \'Low Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""coexistence:(\'Prepare Notification Content\', \'Register\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""coexistence:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""coexistence:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""coexistence:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""coexistence:(\'Prepare Notification Content\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'Prepare Notification Content\', \'High Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'High Medical History\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'High Medical History\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], ""coexistence:(\'High Medical History\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], ""coexistence:(\'High Medical History\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""coexistence:(\'High Medical History\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'High Medical History\', \'Register\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'High Medical History\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""coexistence:(\'High Medical History\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""coexistence:(\'High Medical History\', \'Create Questionnaire\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'High Medical History\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""coexistence:(\'High Medical History\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'High Medical History\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""coexistence:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], ""coexistence:(\'Send Notification by e-mail\', \'Reject Claim\')"": [-1, 0, -1, -1, -1, -1, -1, 1, 0, 0, -1, 0, 0, -1], ""coexistence:(\'Send Notification by e-mail\', \'Accept Claim\')"": [0, -1, 0, 1, 1, 0, 0, -1, -1, -1, 0, -1, -1, 0], ""coexistence:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""coexistence:(\'Send Notification by e-mail\', \'Low Medical History\')"": [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], ""coexistence:(\'Send Notification by e-mail\', \'Register\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [0, -1, 0, -1, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0], ""coexistence:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [0, 0, 0, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0], ""coexistence:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""coexistence:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Send Notification by e-mail\', \'High Medical History\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""exactly1:(\'Low Insurance Check\',)"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""exactly1:(\'Reject Claim\',)"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""exactly1:(\'Accept Claim\',)"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""exactly1:(\'High Insurance Check\',)"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""exactly1:(\'Low Medical History\',)"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""exactly1:(\'Register\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""exactly1:(\'Send Questionnaire\',)"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""exactly1:(\'Send Notification by Post\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""exactly1:(\'Create Questionnaire\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""exactly1:(\'Contact Hospital\',)"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""exactly1:(\'Prepare Notification Content\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""exactly1:(\'High Medical History\',)"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""exactly1:(\'Send Notification by e-mail\',)"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""exactly2:(\'Low Insurance Check\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly2:(\'Reject Claim\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly2:(\'Accept Claim\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly2:(\'High Insurance Check\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly2:(\'Low Medical History\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly2:(\'Register\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly2:(\'Send Questionnaire\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly2:(\'Send Notification by Post\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly2:(\'Create Questionnaire\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly2:(\'Contact Hospital\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly2:(\'Prepare Notification Content\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly2:(\'High Medical History\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly2:(\'Send Notification by e-mail\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly3:(\'Low Insurance Check\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly3:(\'Reject Claim\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly3:(\'Accept Claim\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly3:(\'High Insurance Check\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly3:(\'Low Medical History\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly3:(\'Register\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly3:(\'Send Questionnaire\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly3:(\'Send Notification by Post\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly3:(\'Create Questionnaire\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly3:(\'Contact Hospital\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly3:(\'Prepare Notification Content\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly3:(\'High Medical History\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly3:(\'Send Notification by e-mail\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Low Insurance Check\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, 1, 0, 0, -1], ""alternate_precedence:(\'Low Insurance Check\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""alternate_precedence:(\'Low Insurance Check\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Low Insurance Check\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Low Insurance Check\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Low Insurance Check\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""alternate_precedence:(\'Low Insurance Check\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Low Insurance Check\', \'Create Questionnaire\')"": [-1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Low Insurance Check\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""alternate_precedence:(\'Low Insurance Check\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Reject Claim\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Reject Claim\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_precedence:(\'Reject Claim\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Reject Claim\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Reject Claim\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Reject Claim\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""alternate_precedence:(\'Reject Claim\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Reject Claim\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1], ""alternate_precedence:(\'Reject Claim\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Reject Claim\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""alternate_precedence:(\'Reject Claim\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Reject Claim\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Accept Claim\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Accept Claim\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_precedence:(\'Accept Claim\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Accept Claim\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Accept Claim\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Accept Claim\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Accept Claim\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Accept Claim\', \'Create Questionnaire\')"": [-1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1], ""alternate_precedence:(\'Accept Claim\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Accept Claim\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""alternate_precedence:(\'Accept Claim\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Accept Claim\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_precedence:(\'High Insurance Check\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'High Insurance Check\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, -1, 0, 0, 1], ""alternate_precedence:(\'High Insurance Check\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, 1, 0], ""alternate_precedence:(\'High Insurance Check\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'High Insurance Check\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'High Insurance Check\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_precedence:(\'High Insurance Check\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_precedence:(\'High Insurance Check\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1], ""alternate_precedence:(\'High Insurance Check\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, -1, 1, 1], ""alternate_precedence:(\'High Insurance Check\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""alternate_precedence:(\'High Insurance Check\', \'High Medical History\')"": [1, 0, 1, 0, 0, -1, 1, 0, 0, -1, 0, -1, 1, 1], ""alternate_precedence:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Low Medical History\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""alternate_precedence:(\'Low Medical History\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, 1, 0, 0, -1], ""alternate_precedence:(\'Low Medical History\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""alternate_precedence:(\'Low Medical History\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Low Medical History\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Low Medical History\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""alternate_precedence:(\'Low Medical History\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Low Medical History\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Low Medical History\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Low Medical History\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""alternate_precedence:(\'Low Medical History\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Low Medical History\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Register\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""alternate_precedence:(\'Register\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""alternate_precedence:(\'Register\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""alternate_precedence:(\'Register\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""alternate_precedence:(\'Register\', \'Low Medical History\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""alternate_precedence:(\'Register\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""alternate_precedence:(\'Register\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Register\', \'Create Questionnaire\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""alternate_precedence:(\'Register\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""alternate_precedence:(\'Register\', \'Prepare Notification Content\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""alternate_precedence:(\'Register\', \'High Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""alternate_precedence:(\'Register\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Send Questionnaire\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Send Questionnaire\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_precedence:(\'Send Questionnaire\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_precedence:(\'Send Questionnaire\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Send Questionnaire\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Send Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Send Questionnaire\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Send Questionnaire\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Send Questionnaire\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Send Questionnaire\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Send Notification by Post\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Send Notification by Post\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_precedence:(\'Send Notification by Post\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_precedence:(\'Send Notification by Post\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Send Notification by Post\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Send Notification by Post\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Send Notification by Post\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Send Notification by Post\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Send Notification by Post\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Send Notification by Post\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Create Questionnaire\', \'Low Insurance Check\')"": [0, 1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""alternate_precedence:(\'Create Questionnaire\', \'Reject Claim\')"": [1, 0, 1, 0, 0, -1, 1, 1, 0, 0, 1, 0, 0, -1], ""alternate_precedence:(\'Create Questionnaire\', \'Accept Claim\')"": [0, 1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, -1, 0], ""alternate_precedence:(\'Create Questionnaire\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, -1, -1], ""alternate_precedence:(\'Create Questionnaire\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""alternate_precedence:(\'Create Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Create Questionnaire\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""alternate_precedence:(\'Create Questionnaire\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Create Questionnaire\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, -1, -1], ""alternate_precedence:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1], ""alternate_precedence:(\'Create Questionnaire\', \'High Medical History\')"": [1, 0, 1, 0, 0, -1, 1, 0, 0, 1, 0, 1, -1, -1], ""alternate_precedence:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Contact Hospital\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Contact Hospital\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, -1, 0, 0, 1], ""alternate_precedence:(\'Contact Hospital\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, 1, 0], ""alternate_precedence:(\'Contact Hospital\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, 1, -1, -1], ""alternate_precedence:(\'Contact Hospital\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Contact Hospital\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Contact Hospital\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Contact Hospital\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Contact Hospital\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1], ""alternate_precedence:(\'Contact Hospital\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""alternate_precedence:(\'Contact Hospital\', \'High Medical History\')"": [1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Prepare Notification Content\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_precedence:(\'Prepare Notification Content\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_precedence:(\'Prepare Notification Content\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Prepare Notification Content\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Prepare Notification Content\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""alternate_precedence:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], ""alternate_precedence:(\'Prepare Notification Content\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Prepare Notification Content\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""alternate_precedence:(\'High Medical History\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'High Medical History\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, -1, 0, 0, 1], ""alternate_precedence:(\'High Medical History\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, 1, 0], ""alternate_precedence:(\'High Medical History\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, 1, -1, -1], ""alternate_precedence:(\'High Medical History\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'High Medical History\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'High Medical History\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_precedence:(\'High Medical History\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_precedence:(\'High Medical History\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1], ""alternate_precedence:(\'High Medical History\', \'Contact Hospital\')"": [-1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, 1], ""alternate_precedence:(\'High Medical History\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""alternate_precedence:(\'High Medical History\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Send Notification by e-mail\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_precedence:(\'Send Notification by e-mail\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_precedence:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Send Notification by e-mail\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Send Notification by e-mail\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Send Notification by e-mail\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_succession:(\'Low Insurance Check\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, 0, 0, -1], ""alternate_succession:(\'Low Insurance Check\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0], ""alternate_succession:(\'Low Insurance Check\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Low Insurance Check\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_succession:(\'Low Insurance Check\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Low Insurance Check\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], ""alternate_succession:(\'Low Insurance Check\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""alternate_succession:(\'Low Insurance Check\', \'Create Questionnaire\')"": [-1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Low Insurance Check\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""alternate_succession:(\'Low Insurance Check\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], ""alternate_succession:(\'Reject Claim\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""alternate_succession:(\'Reject Claim\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Reject Claim\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1], ""alternate_succession:(\'Reject Claim\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""alternate_succession:(\'Reject Claim\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Reject Claim\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, -1, 0, 0, 1, 0, 0, -1], ""alternate_succession:(\'Reject Claim\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""alternate_succession:(\'Reject Claim\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1], ""alternate_succession:(\'Reject Claim\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1], ""alternate_succession:(\'Reject Claim\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""alternate_succession:(\'Reject Claim\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1], ""alternate_succession:(\'Reject Claim\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, 1, 0, 0, -1, 0, 0, -1], ""alternate_succession:(\'Accept Claim\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, 0], ""alternate_succession:(\'Accept Claim\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Accept Claim\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""alternate_succession:(\'Accept Claim\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, 0], ""alternate_succession:(\'Accept Claim\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Accept Claim\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, 0], ""alternate_succession:(\'Accept Claim\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""alternate_succession:(\'Accept Claim\', \'Create Questionnaire\')"": [-1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1], ""alternate_succession:(\'Accept Claim\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""alternate_succession:(\'Accept Claim\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""alternate_succession:(\'Accept Claim\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""alternate_succession:(\'Accept Claim\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, -1, -1, -1, 0, -1, -1, 0], ""alternate_succession:(\'High Insurance Check\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'High Insurance Check\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], ""alternate_succession:(\'High Insurance Check\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], ""alternate_succession:(\'High Insurance Check\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'High Insurance Check\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'High Insurance Check\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""alternate_succession:(\'High Insurance Check\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""alternate_succession:(\'High Insurance Check\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1], ""alternate_succession:(\'High Insurance Check\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, -1, 1, 1], ""alternate_succession:(\'High Insurance Check\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""alternate_succession:(\'High Insurance Check\', \'High Medical History\')"": [1, 0, 1, 0, 0, -1, 1, 0, 0, -1, 0, -1, 1, 1], ""alternate_succession:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""alternate_succession:(\'Low Medical History\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""alternate_succession:(\'Low Medical History\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, 0, 0, -1], ""alternate_succession:(\'Low Medical History\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0], ""alternate_succession:(\'Low Medical History\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Low Medical History\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Low Medical History\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], ""alternate_succession:(\'Low Medical History\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""alternate_succession:(\'Low Medical History\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Low Medical History\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Low Medical History\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""alternate_succession:(\'Low Medical History\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Low Medical History\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], ""alternate_succession:(\'Register\', \'Low Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""alternate_succession:(\'Register\', \'Reject Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""alternate_succession:(\'Register\', \'Accept Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""alternate_succession:(\'Register\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""alternate_succession:(\'Register\', \'Low Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""alternate_succession:(\'Register\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""alternate_succession:(\'Register\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Register\', \'Create Questionnaire\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""alternate_succession:(\'Register\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""alternate_succession:(\'Register\', \'Prepare Notification Content\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""alternate_succession:(\'Register\', \'High Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""alternate_succession:(\'Register\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Send Questionnaire\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_succession:(\'Send Questionnaire\', \'Reject Claim\')"": [-1, -1, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_succession:(\'Send Questionnaire\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, 0], ""alternate_succession:(\'Send Questionnaire\', \'High Insurance Check\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""alternate_succession:(\'Send Questionnaire\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_succession:(\'Send Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Send Questionnaire\', \'Send Notification by Post\')"": [0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0], ""alternate_succession:(\'Send Questionnaire\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Send Questionnaire\', \'Contact Hospital\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""alternate_succession:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Send Questionnaire\', \'High Medical History\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""alternate_succession:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [0, -1, 0, -1, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0], ""alternate_succession:(\'Send Notification by Post\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_succession:(\'Send Notification by Post\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""alternate_succession:(\'Send Notification by Post\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_succession:(\'Send Notification by Post\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""alternate_succession:(\'Send Notification by Post\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_succession:(\'Send Notification by Post\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Send Notification by Post\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0], ""alternate_succession:(\'Send Notification by Post\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Send Notification by Post\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""alternate_succession:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Send Notification by Post\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""alternate_succession:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0], ""alternate_succession:(\'Create Questionnaire\', \'Low Insurance Check\')"": [-1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""alternate_succession:(\'Create Questionnaire\', \'Reject Claim\')"": [1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1], ""alternate_succession:(\'Create Questionnaire\', \'Accept Claim\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], ""alternate_succession:(\'Create Questionnaire\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], ""alternate_succession:(\'Create Questionnaire\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""alternate_succession:(\'Create Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Create Questionnaire\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""alternate_succession:(\'Create Questionnaire\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Create Questionnaire\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], ""alternate_succession:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1], ""alternate_succession:(\'Create Questionnaire\', \'High Medical History\')"": [1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1], ""alternate_succession:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Contact Hospital\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Contact Hospital\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], ""alternate_succession:(\'Contact Hospital\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], ""alternate_succession:(\'Contact Hospital\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, 1, -1, -1], ""alternate_succession:(\'Contact Hospital\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Contact Hospital\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Contact Hospital\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""alternate_succession:(\'Contact Hospital\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""alternate_succession:(\'Contact Hospital\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1], ""alternate_succession:(\'Contact Hospital\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""alternate_succession:(\'Contact Hospital\', \'High Medical History\')"": [1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, -1], ""alternate_succession:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""alternate_succession:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Prepare Notification Content\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Prepare Notification Content\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Prepare Notification Content\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Prepare Notification Content\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Prepare Notification Content\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""alternate_succession:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], ""alternate_succession:(\'Prepare Notification Content\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Prepare Notification Content\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'High Medical History\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'High Medical History\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], ""alternate_succession:(\'High Medical History\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], ""alternate_succession:(\'High Medical History\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, 1, -1, -1], ""alternate_succession:(\'High Medical History\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'High Medical History\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'High Medical History\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""alternate_succession:(\'High Medical History\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""alternate_succession:(\'High Medical History\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1], ""alternate_succession:(\'High Medical History\', \'Contact Hospital\')"": [-1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, 1], ""alternate_succession:(\'High Medical History\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""alternate_succession:(\'High Medical History\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""alternate_succession:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_succession:(\'Send Notification by e-mail\', \'Reject Claim\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_succession:(\'Send Notification by e-mail\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, 0, -1, -1, 0], ""alternate_succession:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""alternate_succession:(\'Send Notification by e-mail\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_succession:(\'Send Notification by e-mail\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [0, -1, 0, -1, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0], ""alternate_succession:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [0, 0, 0, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0], ""alternate_succession:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""alternate_succession:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Send Notification by e-mail\', \'High Medical History\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'Low Insurance Check\', \'Reject Claim\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""alternate_response:(\'Low Insurance Check\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Insurance Check\', \'High Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Insurance Check\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Insurance Check\', \'Register\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Insurance Check\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], ""alternate_response:(\'Low Insurance Check\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Insurance Check\', \'Create Questionnaire\')"": [0, -1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Insurance Check\', \'Contact Hospital\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""alternate_response:(\'Low Insurance Check\', \'High Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], ""alternate_response:(\'Reject Claim\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_response:(\'Reject Claim\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_response:(\'Reject Claim\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_response:(\'Reject Claim\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_response:(\'Reject Claim\', \'Register\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_response:(\'Reject Claim\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, 1, 0, 0, -1], ""alternate_response:(\'Reject Claim\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_response:(\'Reject Claim\', \'Create Questionnaire\')"": [-1, 0, -1, 0, 0, 1, -1, -1, 0, 0, -1, 0, 0, 1], ""alternate_response:(\'Reject Claim\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_response:(\'Reject Claim\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""alternate_response:(\'Reject Claim\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_response:(\'Reject Claim\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, -1, 0, 0, -1], ""alternate_response:(\'Accept Claim\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_response:(\'Accept Claim\', \'Reject Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_response:(\'Accept Claim\', \'High Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_response:(\'Accept Claim\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_response:(\'Accept Claim\', \'Register\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_response:(\'Accept Claim\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_response:(\'Accept Claim\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""alternate_response:(\'Accept Claim\', \'Create Questionnaire\')"": [0, -1, 0, 1, 1, 0, 0, 0, 1, -1, 0, -1, 1, 0], ""alternate_response:(\'Accept Claim\', \'Contact Hospital\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_response:(\'Accept Claim\', \'Prepare Notification Content\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""alternate_response:(\'Accept Claim\', \'High Medical History\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_response:(\'Accept Claim\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_response:(\'High Insurance Check\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'High Insurance Check\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], ""alternate_response:(\'High Insurance Check\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], ""alternate_response:(\'High Insurance Check\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'High Insurance Check\', \'Register\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'High Insurance Check\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'High Insurance Check\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'High Insurance Check\', \'Create Questionnaire\')"": [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, 1, 1], ""alternate_response:(\'High Insurance Check\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, -1, 1, 1], ""alternate_response:(\'High Insurance Check\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""alternate_response:(\'High Insurance Check\', \'High Medical History\')"": [1, 0, 1, 0, 0, -1, 1, 0, 0, -1, 0, -1, 1, 1], ""alternate_response:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'Low Medical History\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""alternate_response:(\'Low Medical History\', \'Reject Claim\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""alternate_response:(\'Low Medical History\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Medical History\', \'High Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Medical History\', \'Register\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Medical History\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], ""alternate_response:(\'Low Medical History\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Medical History\', \'Create Questionnaire\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Medical History\', \'Contact Hospital\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Medical History\', \'Prepare Notification Content\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""alternate_response:(\'Low Medical History\', \'High Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Medical History\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], ""alternate_response:(\'Register\', \'Low Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""alternate_response:(\'Register\', \'Reject Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""alternate_response:(\'Register\', \'Accept Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""alternate_response:(\'Register\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""alternate_response:(\'Register\', \'Low Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""alternate_response:(\'Register\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""alternate_response:(\'Register\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""alternate_response:(\'Register\', \'Create Questionnaire\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""alternate_response:(\'Register\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""alternate_response:(\'Register\', \'Prepare Notification Content\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""alternate_response:(\'Register\', \'High Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""alternate_response:(\'Register\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""alternate_response:(\'Send Questionnaire\', \'Low Insurance Check\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_response:(\'Send Questionnaire\', \'Reject Claim\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_response:(\'Send Questionnaire\', \'Accept Claim\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_response:(\'Send Questionnaire\', \'High Insurance Check\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_response:(\'Send Questionnaire\', \'Low Medical History\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_response:(\'Send Questionnaire\', \'Register\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_response:(\'Send Questionnaire\', \'Send Notification by Post\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_response:(\'Send Questionnaire\', \'Create Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_response:(\'Send Questionnaire\', \'Contact Hospital\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_response:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_response:(\'Send Questionnaire\', \'High Medical History\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_response:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_response:(\'Send Notification by Post\', \'Low Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by Post\', \'Reject Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by Post\', \'Accept Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by Post\', \'High Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by Post\', \'Low Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by Post\', \'Register\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by Post\', \'Send Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by Post\', \'Create Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by Post\', \'Contact Hospital\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by Post\', \'High Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_response:(\'Create Questionnaire\', \'Low Insurance Check\')"": [-1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""alternate_response:(\'Create Questionnaire\', \'Reject Claim\')"": [1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1], ""alternate_response:(\'Create Questionnaire\', \'Accept Claim\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], ""alternate_response:(\'Create Questionnaire\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], ""alternate_response:(\'Create Questionnaire\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""alternate_response:(\'Create Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_response:(\'Create Questionnaire\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""alternate_response:(\'Create Questionnaire\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""alternate_response:(\'Create Questionnaire\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], ""alternate_response:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1], ""alternate_response:(\'Create Questionnaire\', \'High Medical History\')"": [1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1], ""alternate_response:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""alternate_response:(\'Contact Hospital\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'Contact Hospital\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], ""alternate_response:(\'Contact Hospital\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], ""alternate_response:(\'Contact Hospital\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, 1, -1, -1], ""alternate_response:(\'Contact Hospital\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'Contact Hospital\', \'Register\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'Contact Hospital\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'Contact Hospital\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'Contact Hospital\', \'Create Questionnaire\')"": [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, 1, 1], ""alternate_response:(\'Contact Hospital\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""alternate_response:(\'Contact Hospital\', \'High Medical History\')"": [1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_response:(\'Prepare Notification Content\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_response:(\'Prepare Notification Content\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_response:(\'Prepare Notification Content\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_response:(\'Prepare Notification Content\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_response:(\'Prepare Notification Content\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_response:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""alternate_response:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""alternate_response:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], ""alternate_response:(\'Prepare Notification Content\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_response:(\'Prepare Notification Content\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_response:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""alternate_response:(\'High Medical History\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'High Medical History\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], ""alternate_response:(\'High Medical History\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], ""alternate_response:(\'High Medical History\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, 1, -1, -1], ""alternate_response:(\'High Medical History\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'High Medical History\', \'Register\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'High Medical History\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'High Medical History\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'High Medical History\', \'Create Questionnaire\')"": [-1, 0, -1, 0, 0, 1, -1, 0, 0, -1, 0, -1, 1, 1], ""alternate_response:(\'High Medical History\', \'Contact Hospital\')"": [-1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, 1], ""alternate_response:(\'High Medical History\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""alternate_response:(\'High Medical History\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by e-mail\', \'Reject Claim\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by e-mail\', \'Accept Claim\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by e-mail\', \'Low Medical History\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by e-mail\', \'Register\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by e-mail\', \'High Medical History\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_precedence:(\'Low Insurance Check\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, 1, 0, 0, -1], ""chain_precedence:(\'Low Insurance Check\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""chain_precedence:(\'Low Insurance Check\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Low Insurance Check\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Low Insurance Check\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Low Insurance Check\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_precedence:(\'Low Insurance Check\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_precedence:(\'Low Insurance Check\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Low Insurance Check\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Low Insurance Check\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_precedence:(\'Reject Claim\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Reject Claim\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_precedence:(\'Reject Claim\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Reject Claim\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Reject Claim\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Reject Claim\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_precedence:(\'Reject Claim\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_precedence:(\'Reject Claim\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1], ""chain_precedence:(\'Reject Claim\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Reject Claim\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1], ""chain_precedence:(\'Reject Claim\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Reject Claim\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_precedence:(\'Accept Claim\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Accept Claim\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_precedence:(\'Accept Claim\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Accept Claim\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Accept Claim\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Accept Claim\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_precedence:(\'Accept Claim\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_precedence:(\'Accept Claim\', \'Create Questionnaire\')"": [-1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Accept Claim\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Accept Claim\', \'Prepare Notification Content\')"": [-1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1], ""chain_precedence:(\'Accept Claim\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Accept Claim\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_precedence:(\'High Insurance Check\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'High Insurance Check\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, 1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_precedence:(\'High Insurance Check\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, 1, -1, 0], ""chain_precedence:(\'High Insurance Check\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'High Insurance Check\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'High Insurance Check\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_precedence:(\'High Insurance Check\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_precedence:(\'High Insurance Check\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'High Insurance Check\', \'Contact Hospital\')"": [1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, -1, -1, -1], ""chain_precedence:(\'High Insurance Check\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'High Insurance Check\', \'High Medical History\')"": [-1, 0, 1, 0, 0, -1, -1, 0, 0, -1, 0, -1, 1, 1], ""chain_precedence:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_precedence:(\'Low Medical History\', \'Low Insurance Check\')"": [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""chain_precedence:(\'Low Medical History\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_precedence:(\'Low Medical History\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_precedence:(\'Low Medical History\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Low Medical History\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Low Medical History\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_precedence:(\'Low Medical History\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_precedence:(\'Low Medical History\', \'Create Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Low Medical History\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Low Medical History\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Low Medical History\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Low Medical History\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_precedence:(\'Register\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Register\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_precedence:(\'Register\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_precedence:(\'Register\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, 1, 1], ""chain_precedence:(\'Register\', \'Low Medical History\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Register\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_precedence:(\'Register\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_precedence:(\'Register\', \'Create Questionnaire\')"": [1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1], ""chain_precedence:(\'Register\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Register\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Register\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Register\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_precedence:(\'Send Questionnaire\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Send Questionnaire\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_precedence:(\'Send Questionnaire\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_precedence:(\'Send Questionnaire\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Send Questionnaire\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Send Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Send Questionnaire\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_precedence:(\'Send Questionnaire\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Send Questionnaire\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Send Questionnaire\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_precedence:(\'Send Notification by Post\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Send Notification by Post\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_precedence:(\'Send Notification by Post\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_precedence:(\'Send Notification by Post\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Send Notification by Post\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Send Notification by Post\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Send Notification by Post\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_precedence:(\'Send Notification by Post\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Send Notification by Post\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Send Notification by Post\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_precedence:(\'Create Questionnaire\', \'Low Insurance Check\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Create Questionnaire\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_precedence:(\'Create Questionnaire\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_precedence:(\'Create Questionnaire\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Create Questionnaire\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""chain_precedence:(\'Create Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Create Questionnaire\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_precedence:(\'Create Questionnaire\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_precedence:(\'Create Questionnaire\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [-1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1], ""chain_precedence:(\'Create Questionnaire\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, 1, 0, 0, 1, 0, 1, -1, -1], ""chain_precedence:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_precedence:(\'Contact Hospital\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Contact Hospital\', \'Reject Claim\')"": [-1, 0, 1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, 1], ""chain_precedence:(\'Contact Hospital\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, -1, 1, 0], ""chain_precedence:(\'Contact Hospital\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, 1, 0, 0, -1, 0, 1, -1, -1], ""chain_precedence:(\'Contact Hospital\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Contact Hospital\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Contact Hospital\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_precedence:(\'Contact Hospital\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_precedence:(\'Contact Hospital\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Contact Hospital\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Contact Hospital\', \'High Medical History\')"": [1, 0, -1, 0, 0, 1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_precedence:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Prepare Notification Content\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_precedence:(\'Prepare Notification Content\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_precedence:(\'Prepare Notification Content\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Prepare Notification Content\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Prepare Notification Content\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""chain_precedence:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""chain_precedence:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], ""chain_precedence:(\'Prepare Notification Content\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Prepare Notification Content\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""chain_precedence:(\'High Medical History\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'High Medical History\', \'Reject Claim\')"": [1, 0, -1, 0, 0, -1, 1, -1, 0, 0, -1, 0, 0, -1], ""chain_precedence:(\'High Medical History\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_precedence:(\'High Medical History\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, -1, -1, -1], ""chain_precedence:(\'High Medical History\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'High Medical History\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'High Medical History\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_precedence:(\'High Medical History\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_precedence:(\'High Medical History\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'High Medical History\', \'Contact Hospital\')"": [-1, 0, 1, 0, 0, -1, -1, 0, 0, -1, 0, 1, 1, 1], ""chain_precedence:(\'High Medical History\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'High Medical History\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_precedence:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Send Notification by e-mail\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_precedence:(\'Send Notification by e-mail\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_precedence:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Send Notification by e-mail\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Send Notification by e-mail\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_precedence:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_precedence:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Send Notification by e-mail\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'Low Insurance Check\', \'Reject Claim\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""chain_response:(\'Low Insurance Check\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Insurance Check\', \'High Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Insurance Check\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Insurance Check\', \'Register\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Insurance Check\', \'Send Questionnaire\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Insurance Check\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Insurance Check\', \'Create Questionnaire\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Insurance Check\', \'Contact Hospital\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Insurance Check\', \'High Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Reject Claim\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_response:(\'Reject Claim\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_response:(\'Reject Claim\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_response:(\'Reject Claim\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_response:(\'Reject Claim\', \'Register\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_response:(\'Reject Claim\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_response:(\'Reject Claim\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_response:(\'Reject Claim\', \'Create Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, 1], ""chain_response:(\'Reject Claim\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_response:(\'Reject Claim\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, -1], ""chain_response:(\'Reject Claim\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_response:(\'Reject Claim\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_response:(\'Accept Claim\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_response:(\'Accept Claim\', \'Reject Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_response:(\'Accept Claim\', \'High Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_response:(\'Accept Claim\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_response:(\'Accept Claim\', \'Register\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_response:(\'Accept Claim\', \'Send Questionnaire\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_response:(\'Accept Claim\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_response:(\'Accept Claim\', \'Create Questionnaire\')"": [0, -1, 0, 1, -1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""chain_response:(\'Accept Claim\', \'Contact Hospital\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_response:(\'Accept Claim\', \'Prepare Notification Content\')"": [0, 1, 0, -1, 1, 0, 0, 0, -1, 1, 0, 1, 1, 0], ""chain_response:(\'Accept Claim\', \'High Medical History\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_response:(\'Accept Claim\', \'Send Notification by e-mail\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_response:(\'High Insurance Check\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Insurance Check\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, 1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Insurance Check\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, 1, -1, -1], ""chain_response:(\'High Insurance Check\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Insurance Check\', \'Register\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Insurance Check\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Insurance Check\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Insurance Check\', \'Create Questionnaire\')"": [-1, 0, -1, 0, 0, -1, 1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Insurance Check\', \'Contact Hospital\')"": [1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, -1, -1, -1], ""chain_response:(\'High Insurance Check\', \'Prepare Notification Content\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Insurance Check\', \'High Medical History\')"": [-1, 0, 1, 0, 0, -1, -1, 0, 0, -1, 0, -1, 1, 1], ""chain_response:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'Low Medical History\', \'Low Insurance Check\')"": [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""chain_response:(\'Low Medical History\', \'Reject Claim\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Medical History\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Medical History\', \'High Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Medical History\', \'Register\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Medical History\', \'Send Questionnaire\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Medical History\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Medical History\', \'Create Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Medical History\', \'Contact Hospital\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Medical History\', \'Prepare Notification Content\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Medical History\', \'High Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Medical History\', \'Send Notification by e-mail\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Register\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Register\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Register\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Register\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1], ""chain_response:(\'Register\', \'Low Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""chain_response:(\'Register\', \'Send Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Register\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Register\', \'Create Questionnaire\')"": [1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1], ""chain_response:(\'Register\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Register\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Register\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Register\', \'Send Notification by e-mail\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Send Questionnaire\', \'Low Insurance Check\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_response:(\'Send Questionnaire\', \'Reject Claim\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_response:(\'Send Questionnaire\', \'Accept Claim\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_response:(\'Send Questionnaire\', \'High Insurance Check\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_response:(\'Send Questionnaire\', \'Low Medical History\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_response:(\'Send Questionnaire\', \'Register\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_response:(\'Send Questionnaire\', \'Send Notification by Post\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_response:(\'Send Questionnaire\', \'Create Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_response:(\'Send Questionnaire\', \'Contact Hospital\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_response:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_response:(\'Send Questionnaire\', \'High Medical History\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_response:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_response:(\'Send Notification by Post\', \'Low Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by Post\', \'Reject Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by Post\', \'Accept Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by Post\', \'High Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by Post\', \'Low Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by Post\', \'Register\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by Post\', \'Send Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by Post\', \'Create Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by Post\', \'Contact Hospital\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by Post\', \'High Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_response:(\'Create Questionnaire\', \'Low Insurance Check\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Create Questionnaire\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Create Questionnaire\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Create Questionnaire\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Create Questionnaire\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""chain_response:(\'Create Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Create Questionnaire\', \'Send Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Create Questionnaire\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Create Questionnaire\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [-1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1], ""chain_response:(\'Create Questionnaire\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1], ""chain_response:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [-1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Contact Hospital\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'Contact Hospital\', \'Reject Claim\')"": [-1, 0, 1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, 1], ""chain_response:(\'Contact Hospital\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, -1, 1, -1], ""chain_response:(\'Contact Hospital\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, 1, 0, 0, -1, 0, 1, -1, -1], ""chain_response:(\'Contact Hospital\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'Contact Hospital\', \'Register\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'Contact Hospital\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'Contact Hospital\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'Contact Hospital\', \'Create Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'Contact Hospital\', \'Prepare Notification Content\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'Contact Hospital\', \'High Medical History\')"": [1, 0, -1, 0, 0, 1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Prepare Notification Content\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Prepare Notification Content\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Prepare Notification Content\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Prepare Notification Content\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Prepare Notification Content\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""chain_response:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""chain_response:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], ""chain_response:(\'Prepare Notification Content\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Prepare Notification Content\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'High Medical History\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Medical History\', \'Reject Claim\')"": [1, 0, -1, 0, 0, -1, 1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Medical History\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Medical History\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, -1, -1, -1], ""chain_response:(\'High Medical History\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Medical History\', \'Register\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Medical History\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Medical History\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Medical History\', \'Create Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Medical History\', \'Contact Hospital\')"": [-1, 0, 1, 0, 0, -1, -1, 0, 0, -1, 0, 1, 1, 1], ""chain_response:(\'High Medical History\', \'Prepare Notification Content\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Medical History\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by e-mail\', \'Reject Claim\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by e-mail\', \'Accept Claim\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by e-mail\', \'Low Medical History\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by e-mail\', \'Register\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by e-mail\', \'High Medical History\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_succession:(\'Low Insurance Check\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, 0, 0, -1], ""chain_succession:(\'Low Insurance Check\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0], ""chain_succession:(\'Low Insurance Check\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Low Insurance Check\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Low Insurance Check\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Low Insurance Check\', \'Send Questionnaire\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Low Insurance Check\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Low Insurance Check\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Low Insurance Check\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Low Insurance Check\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Reject Claim\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""chain_succession:(\'Reject Claim\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Reject Claim\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1], ""chain_succession:(\'Reject Claim\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""chain_succession:(\'Reject Claim\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Reject Claim\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_succession:(\'Reject Claim\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""chain_succession:(\'Reject Claim\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1], ""chain_succession:(\'Reject Claim\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1], ""chain_succession:(\'Reject Claim\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1], ""chain_succession:(\'Reject Claim\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1], ""chain_succession:(\'Reject Claim\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_succession:(\'Accept Claim\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, 0], ""chain_succession:(\'Accept Claim\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Accept Claim\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""chain_succession:(\'Accept Claim\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, 0], ""chain_succession:(\'Accept Claim\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Accept Claim\', \'Send Questionnaire\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, 0], ""chain_succession:(\'Accept Claim\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_succession:(\'Accept Claim\', \'Create Questionnaire\')"": [-1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""chain_succession:(\'Accept Claim\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""chain_succession:(\'Accept Claim\', \'Prepare Notification Content\')"": [-1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1], ""chain_succession:(\'Accept Claim\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""chain_succession:(\'Accept Claim\', \'Send Notification by e-mail\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, 0, -1, -1, 0], ""chain_succession:(\'High Insurance Check\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'High Insurance Check\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, 1, -1, -1, 0, -1, -1, -1, -1, -1], ""chain_succession:(\'High Insurance Check\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, 1, -1, -1], ""chain_succession:(\'High Insurance Check\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'High Insurance Check\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'High Insurance Check\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""chain_succession:(\'High Insurance Check\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""chain_succession:(\'High Insurance Check\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'High Insurance Check\', \'Contact Hospital\')"": [1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, -1, -1, -1], ""chain_succession:(\'High Insurance Check\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'High Insurance Check\', \'High Medical History\')"": [-1, 0, 1, 0, 0, -1, -1, 0, 0, -1, 0, -1, 1, 1], ""chain_succession:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""chain_succession:(\'Low Medical History\', \'Low Insurance Check\')"": [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""chain_succession:(\'Low Medical History\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""chain_succession:(\'Low Medical History\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, 0], ""chain_succession:(\'Low Medical History\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Low Medical History\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Low Medical History\', \'Send Questionnaire\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Low Medical History\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Low Medical History\', \'Create Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Low Medical History\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Low Medical History\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Low Medical History\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Low Medical History\', \'Send Notification by e-mail\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Register\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Register\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Register\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Register\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1], ""chain_succession:(\'Register\', \'Low Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""chain_succession:(\'Register\', \'Send Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Register\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Register\', \'Create Questionnaire\')"": [1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1], ""chain_succession:(\'Register\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Register\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Register\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Register\', \'Send Notification by e-mail\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Send Questionnaire\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Send Questionnaire\', \'Reject Claim\')"": [-1, -1, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_succession:(\'Send Questionnaire\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, 0], ""chain_succession:(\'Send Questionnaire\', \'High Insurance Check\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""chain_succession:(\'Send Questionnaire\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Send Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Send Questionnaire\', \'Send Notification by Post\')"": [0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Send Questionnaire\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Send Questionnaire\', \'Contact Hospital\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""chain_succession:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Send Questionnaire\', \'High Medical History\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""chain_succession:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [0, -1, 0, -1, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0], ""chain_succession:(\'Send Notification by Post\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Send Notification by Post\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""chain_succession:(\'Send Notification by Post\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_succession:(\'Send Notification by Post\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""chain_succession:(\'Send Notification by Post\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Send Notification by Post\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Send Notification by Post\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Send Notification by Post\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Send Notification by Post\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""chain_succession:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Send Notification by Post\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""chain_succession:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0], ""chain_succession:(\'Create Questionnaire\', \'Low Insurance Check\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Create Questionnaire\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Create Questionnaire\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Create Questionnaire\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Create Questionnaire\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""chain_succession:(\'Create Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Create Questionnaire\', \'Send Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Create Questionnaire\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Create Questionnaire\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [-1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1], ""chain_succession:(\'Create Questionnaire\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1], ""chain_succession:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [-1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Contact Hospital\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Contact Hospital\', \'Reject Claim\')"": [-1, 0, 1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, 1], ""chain_succession:(\'Contact Hospital\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, -1, 1, -1], ""chain_succession:(\'Contact Hospital\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, 1, 0, 0, -1, 0, 1, -1, -1], ""chain_succession:(\'Contact Hospital\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Contact Hospital\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Contact Hospital\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""chain_succession:(\'Contact Hospital\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""chain_succession:(\'Contact Hospital\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Contact Hospital\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Contact Hospital\', \'High Medical History\')"": [1, 0, -1, 0, 0, 1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_succession:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""chain_succession:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Prepare Notification Content\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Prepare Notification Content\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Prepare Notification Content\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Prepare Notification Content\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Prepare Notification Content\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""chain_succession:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""chain_succession:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], ""chain_succession:(\'Prepare Notification Content\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Prepare Notification Content\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'High Medical History\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'High Medical History\', \'Reject Claim\')"": [1, 0, -1, 0, 0, -1, 1, -1, 0, -1, -1, -1, -1, -1], ""chain_succession:(\'High Medical History\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""chain_succession:(\'High Medical History\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, -1, -1, -1], ""chain_succession:(\'High Medical History\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'High Medical History\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'High Medical History\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""chain_succession:(\'High Medical History\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""chain_succession:(\'High Medical History\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'High Medical History\', \'Contact Hospital\')"": [-1, 0, 1, 0, 0, -1, -1, 0, 0, -1, 0, 1, 1, 1], ""chain_succession:(\'High Medical History\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'High Medical History\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""chain_succession:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Send Notification by e-mail\', \'Reject Claim\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_succession:(\'Send Notification by e-mail\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, 0, -1, -1, 0], ""chain_succession:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""chain_succession:(\'Send Notification by e-mail\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Send Notification by e-mail\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [0, -1, 0, -1, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0], ""chain_succession:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [0, 0, 0, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0], ""chain_succession:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""chain_succession:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Send Notification by e-mail\', \'High Medical History\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""not_chain_succession:(\'Low Insurance Check\', \'Reject Claim\')"": [0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0], ""not_chain_succession:(\'Low Insurance Check\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Low Insurance Check\', \'High Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Low Insurance Check\', \'Low Medical History\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Low Insurance Check\', \'Register\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Low Insurance Check\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Low Insurance Check\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Low Insurance Check\', \'Create Questionnaire\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Low Insurance Check\', \'Contact Hospital\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Low Insurance Check\', \'High Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Reject Claim\', \'Low Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Reject Claim\', \'Accept Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Reject Claim\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], ""not_chain_succession:(\'Reject Claim\', \'Low Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Reject Claim\', \'Register\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""not_chain_succession:(\'Reject Claim\', \'Send Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Reject Claim\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Reject Claim\', \'Create Questionnaire\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, -1], ""not_chain_succession:(\'Reject Claim\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], ""not_chain_succession:(\'Reject Claim\', \'Prepare Notification Content\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, 1], ""not_chain_succession:(\'Reject Claim\', \'High Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], ""not_chain_succession:(\'Reject Claim\', \'Send Notification by e-mail\')"": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Accept Claim\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Accept Claim\', \'Reject Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Accept Claim\', \'High Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0], ""not_chain_succession:(\'Accept Claim\', \'Low Medical History\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Accept Claim\', \'Register\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""not_chain_succession:(\'Accept Claim\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Accept Claim\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Accept Claim\', \'Create Questionnaire\')"": [0, 1, 0, -1, 1, 0, 0, 0, -1, 1, 0, 1, 1, 0], ""not_chain_succession:(\'Accept Claim\', \'Contact Hospital\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0], ""not_chain_succession:(\'Accept Claim\', \'Prepare Notification Content\')"": [0, -1, 0, 1, -1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""not_chain_succession:(\'Accept Claim\', \'High Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0], ""not_chain_succession:(\'Accept Claim\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'High Insurance Check\', \'Low Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'High Insurance Check\', \'Reject Claim\')"": [1, 0, 1, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 1], ""not_chain_succession:(\'High Insurance Check\', \'Accept Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 1, 0], ""not_chain_succession:(\'High Insurance Check\', \'Low Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'High Insurance Check\', \'Register\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'High Insurance Check\', \'Send Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'High Insurance Check\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'High Insurance Check\', \'Create Questionnaire\')"": [1, 0, 1, 0, 0, 1, -1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'High Insurance Check\', \'Contact Hospital\')"": [-1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, 1, 1, 1], ""not_chain_succession:(\'High Insurance Check\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'High Insurance Check\', \'High Medical History\')"": [1, 0, -1, 0, 0, 1, 1, 0, 0, 1, 0, 1, -1, -1], ""not_chain_succession:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Low Medical History\', \'Low Insurance Check\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""not_chain_succession:(\'Low Medical History\', \'Reject Claim\')"": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Low Medical History\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Low Medical History\', \'High Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Low Medical History\', \'Register\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Low Medical History\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Low Medical History\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Low Medical History\', \'Create Questionnaire\')"": [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Low Medical History\', \'Contact Hospital\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Low Medical History\', \'Prepare Notification Content\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Low Medical History\', \'High Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Low Medical History\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Register\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Register\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""not_chain_succession:(\'Register\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""not_chain_succession:(\'Register\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, -1, -1], ""not_chain_succession:(\'Register\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Register\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Register\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Register\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, 1, 1], ""not_chain_succession:(\'Register\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'Register\', \'Prepare Notification Content\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_chain_succession:(\'Register\', \'High Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'Register\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Questionnaire\', \'Low Insurance Check\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Send Questionnaire\', \'Reject Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Send Questionnaire\', \'Accept Claim\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Questionnaire\', \'High Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Questionnaire\', \'Low Medical History\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Send Questionnaire\', \'Register\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Send Questionnaire\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Questionnaire\', \'Create Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Send Questionnaire\', \'Contact Hospital\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Send Questionnaire\', \'High Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by Post\', \'Low Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by Post\', \'Reject Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by Post\', \'Accept Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by Post\', \'High Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by Post\', \'Low Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by Post\', \'Register\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by Post\', \'Send Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by Post\', \'Create Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by Post\', \'Contact Hospital\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by Post\', \'High Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Create Questionnaire\', \'Low Insurance Check\')"": [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Create Questionnaire\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""not_chain_succession:(\'Create Questionnaire\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""not_chain_succession:(\'Create Questionnaire\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'Create Questionnaire\', \'Low Medical History\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""not_chain_succession:(\'Create Questionnaire\', \'Register\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_chain_succession:(\'Create Questionnaire\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Create Questionnaire\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Create Questionnaire\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1], ""not_chain_succession:(\'Create Questionnaire\', \'High Medical History\')"": [1, 0, 1, 0, 0, 1, -1, 0, 0, -1, 0, -1, 1, 1], ""not_chain_succession:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Contact Hospital\', \'Low Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Contact Hospital\', \'Reject Claim\')"": [1, 0, -1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, -1], ""not_chain_succession:(\'Contact Hospital\', \'Accept Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 1, -1, 0], ""not_chain_succession:(\'Contact Hospital\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, 1, -1, 0, 0, 1, 0, -1, 1, 1], ""not_chain_succession:(\'Contact Hospital\', \'Low Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Contact Hospital\', \'Register\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'Contact Hospital\', \'Send Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Contact Hospital\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Contact Hospital\', \'Create Questionnaire\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'Contact Hospital\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'Contact Hospital\', \'High Medical History\')"": [-1, 0, 1, 0, 0, -1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Prepare Notification Content\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""not_chain_succession:(\'Prepare Notification Content\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""not_chain_succession:(\'Prepare Notification Content\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'Prepare Notification Content\', \'Low Medical History\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Prepare Notification Content\', \'Register\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_chain_succession:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""not_chain_succession:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1], ""not_chain_succession:(\'Prepare Notification Content\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'Prepare Notification Content\', \'High Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'High Medical History\', \'Low Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'High Medical History\', \'Reject Claim\')"": [-1, 0, 1, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 1], ""not_chain_succession:(\'High Medical History\', \'Accept Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0], ""not_chain_succession:(\'High Medical History\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, -1, 1, 0, 0, -1, 0, 1, 1, 1], ""not_chain_succession:(\'High Medical History\', \'Low Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'High Medical History\', \'Register\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'High Medical History\', \'Send Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'High Medical History\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'High Medical History\', \'Create Questionnaire\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'High Medical History\', \'Contact Hospital\')"": [1, 0, -1, 0, 0, 1, 1, 0, 0, 1, 0, -1, -1, -1], ""not_chain_succession:(\'High Medical History\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'High Medical History\', \'Send Notification by e-mail\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by e-mail\', \'Reject Claim\')"": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by e-mail\', \'Accept Claim\')"": [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by e-mail\', \'Low Medical History\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by e-mail\', \'Register\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by e-mail\', \'High Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_coexistence:(\'Low Insurance Check\', \'Reject Claim\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, 0, -1, 0, 0, 1], ""not_coexistence:(\'Low Insurance Check\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 1, 1, 1, 1, 0], ""not_coexistence:(\'Low Insurance Check\', \'High Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Low Insurance Check\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""not_coexistence:(\'Low Insurance Check\', \'Register\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Low Insurance Check\', \'Send Questionnaire\')"": [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, -1, 0, 0, 0], ""not_coexistence:(\'Low Insurance Check\', \'Send Notification by Post\')"": [0, 1, 0, 1, 1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""not_coexistence:(\'Low Insurance Check\', \'Create Questionnaire\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Low Insurance Check\', \'Contact Hospital\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Low Insurance Check\', \'High Medical History\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [0, 1, 0, -1, -1, 0, 0, -1, 1, 0, 1, 0, 0, 0], ""not_coexistence:(\'Reject Claim\', \'Low Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, 0, -1, 0, 0, 1], ""not_coexistence:(\'Reject Claim\', \'Accept Claim\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Reject Claim\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 1, 1, 1, 1, -1], ""not_coexistence:(\'Reject Claim\', \'Low Medical History\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, 0, -1, 0, 0, 1], ""not_coexistence:(\'Reject Claim\', \'Register\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""not_coexistence:(\'Reject Claim\', \'Send Questionnaire\')"": [1, 1, 1, 0, 0, 1, 1, 1, 0, 0, -1, 0, 0, 1], ""not_coexistence:(\'Reject Claim\', \'Send Notification by Post\')"": [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1], ""not_coexistence:(\'Reject Claim\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""not_coexistence:(\'Reject Claim\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 1, 1, 1, 1, -1], ""not_coexistence:(\'Reject Claim\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""not_coexistence:(\'Reject Claim\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 1, 1, 1, 1, -1], ""not_coexistence:(\'Reject Claim\', \'Send Notification by e-mail\')"": [1, 0, 1, 1, 1, 1, 1, -1, 0, 0, 1, 0, 0, 1], ""not_coexistence:(\'Accept Claim\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 1, 1, 1, 1, 0], ""not_coexistence:(\'Accept Claim\', \'Reject Claim\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Accept Claim\', \'High Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, 0, 1, -1, 0, -1, -1, 1], ""not_coexistence:(\'Accept Claim\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 1, 1, 1, 1, 0], ""not_coexistence:(\'Accept Claim\', \'Register\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""not_coexistence:(\'Accept Claim\', \'Send Questionnaire\')"": [0, -1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0], ""not_coexistence:(\'Accept Claim\', \'Send Notification by Post\')"": [0, 1, 0, 1, 1, 0, 0, 0, -1, 1, 0, 1, 1, 0], ""not_coexistence:(\'Accept Claim\', \'Create Questionnaire\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""not_coexistence:(\'Accept Claim\', \'Contact Hospital\')"": [1, 1, 1, 1, 1, 1, 1, 0, 1, -1, 0, -1, -1, 1], ""not_coexistence:(\'Accept Claim\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""not_coexistence:(\'Accept Claim\', \'High Medical History\')"": [1, 1, 1, 1, 1, 1, 1, 0, 1, -1, 0, -1, -1, 1], ""not_coexistence:(\'Accept Claim\', \'Send Notification by e-mail\')"": [0, 1, 0, -1, -1, 0, 0, 1, 1, 1, 0, 1, 1, 0], ""not_coexistence:(\'High Insurance Check\', \'Low Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'High Insurance Check\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 1, 1, 1, 1, -1], ""not_coexistence:(\'High Insurance Check\', \'Accept Claim\')"": [1, 1, 1, 1, 1, 1, 1, 0, 1, -1, 0, -1, -1, 1], ""not_coexistence:(\'High Insurance Check\', \'Low Medical History\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'High Insurance Check\', \'Register\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'High Insurance Check\', \'Send Questionnaire\')"": [1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], ""not_coexistence:(\'High Insurance Check\', \'Send Notification by Post\')"": [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], ""not_coexistence:(\'High Insurance Check\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'High Insurance Check\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""not_coexistence:(\'High Insurance Check\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'High Insurance Check\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""not_coexistence:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], ""not_coexistence:(\'Low Medical History\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""not_coexistence:(\'Low Medical History\', \'Reject Claim\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, 0, -1, 0, 0, 1], ""not_coexistence:(\'Low Medical History\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 1, 1, 1, 1, 0], ""not_coexistence:(\'Low Medical History\', \'High Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Low Medical History\', \'Register\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Low Medical History\', \'Send Questionnaire\')"": [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, -1, 0, 0, 0], ""not_coexistence:(\'Low Medical History\', \'Send Notification by Post\')"": [0, 1, 0, 1, 1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""not_coexistence:(\'Low Medical History\', \'Create Questionnaire\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Low Medical History\', \'Contact Hospital\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Low Medical History\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Low Medical History\', \'High Medical History\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Low Medical History\', \'Send Notification by e-mail\')"": [0, 1, 0, -1, -1, 0, 0, -1, 1, 0, 1, 0, 0, 0], ""not_coexistence:(\'Register\', \'Low Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Register\', \'Reject Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""not_coexistence:(\'Register\', \'Accept Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""not_coexistence:(\'Register\', \'High Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'Register\', \'Low Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Register\', \'Send Questionnaire\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Register\', \'Send Notification by Post\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Register\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""not_coexistence:(\'Register\', \'Contact Hospital\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'Register\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""not_coexistence:(\'Register\', \'High Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'Register\', \'Send Notification by e-mail\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Send Questionnaire\', \'Low Insurance Check\')"": [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, -1, 0, 0, 0], ""not_coexistence:(\'Send Questionnaire\', \'Reject Claim\')"": [1, 1, 1, 0, 0, 1, 1, 1, 0, 0, -1, 0, 0, 1], ""not_coexistence:(\'Send Questionnaire\', \'Accept Claim\')"": [0, -1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0], ""not_coexistence:(\'Send Questionnaire\', \'High Insurance Check\')"": [1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], ""not_coexistence:(\'Send Questionnaire\', \'Low Medical History\')"": [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, -1, 0, 0, 0], ""not_coexistence:(\'Send Questionnaire\', \'Register\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Send Questionnaire\', \'Send Notification by Post\')"": [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0], ""not_coexistence:(\'Send Questionnaire\', \'Create Questionnaire\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Send Questionnaire\', \'Contact Hospital\')"": [1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], ""not_coexistence:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Send Questionnaire\', \'High Medical History\')"": [1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], ""not_coexistence:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0], ""not_coexistence:(\'Send Notification by Post\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""not_coexistence:(\'Send Notification by Post\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1], ""not_coexistence:(\'Send Notification by Post\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, 0, -1, 1, 0, 1, 1, 0], ""not_coexistence:(\'Send Notification by Post\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], ""not_coexistence:(\'Send Notification by Post\', \'Low Medical History\')"": [0, 1, 0, 1, 1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""not_coexistence:(\'Send Notification by Post\', \'Register\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Send Notification by Post\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0], ""not_coexistence:(\'Send Notification by Post\', \'Create Questionnaire\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Send Notification by Post\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], ""not_coexistence:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Send Notification by Post\', \'High Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], ""not_coexistence:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0], ""not_coexistence:(\'Create Questionnaire\', \'Low Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Create Questionnaire\', \'Reject Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""not_coexistence:(\'Create Questionnaire\', \'Accept Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""not_coexistence:(\'Create Questionnaire\', \'High Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'Create Questionnaire\', \'Low Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Create Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""not_coexistence:(\'Create Questionnaire\', \'Send Questionnaire\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Create Questionnaire\', \'Send Notification by Post\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Create Questionnaire\', \'Contact Hospital\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""not_coexistence:(\'Create Questionnaire\', \'High Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Contact Hospital\', \'Low Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Contact Hospital\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 1, 1, 1, 1, -1], ""not_coexistence:(\'Contact Hospital\', \'Accept Claim\')"": [1, 1, 1, 1, 1, 1, 1, 0, 1, -1, 0, -1, -1, 1], ""not_coexistence:(\'Contact Hospital\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""not_coexistence:(\'Contact Hospital\', \'Low Medical History\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Contact Hospital\', \'Register\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'Contact Hospital\', \'Send Questionnaire\')"": [1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], ""not_coexistence:(\'Contact Hospital\', \'Send Notification by Post\')"": [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], ""not_coexistence:(\'Contact Hospital\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'Contact Hospital\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'Contact Hospital\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""not_coexistence:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], ""not_coexistence:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Prepare Notification Content\', \'Reject Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""not_coexistence:(\'Prepare Notification Content\', \'Accept Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""not_coexistence:(\'Prepare Notification Content\', \'High Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'Prepare Notification Content\', \'Low Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Prepare Notification Content\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""not_coexistence:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""not_coexistence:(\'Prepare Notification Content\', \'Contact Hospital\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'Prepare Notification Content\', \'High Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'High Medical History\', \'Low Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'High Medical History\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 1, 1, 1, 1, -1], ""not_coexistence:(\'High Medical History\', \'Accept Claim\')"": [1, 1, 1, 1, 1, 1, 1, 0, 1, -1, 0, -1, -1, 1], ""not_coexistence:(\'High Medical History\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""not_coexistence:(\'High Medical History\', \'Low Medical History\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'High Medical History\', \'Register\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'High Medical History\', \'Send Questionnaire\')"": [1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], ""not_coexistence:(\'High Medical History\', \'Send Notification by Post\')"": [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], ""not_coexistence:(\'High Medical History\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'High Medical History\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""not_coexistence:(\'High Medical History\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'High Medical History\', \'Send Notification by e-mail\')"": [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], ""not_coexistence:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [0, 1, 0, -1, -1, 0, 0, -1, 1, 0, 1, 0, 0, 0], ""not_coexistence:(\'Send Notification by e-mail\', \'Reject Claim\')"": [1, 0, 1, 1, 1, 1, 1, -1, 0, 0, 1, 0, 0, 1], ""not_coexistence:(\'Send Notification by e-mail\', \'Accept Claim\')"": [0, 1, 0, -1, -1, 0, 0, 1, 1, 1, 0, 1, 1, 0], ""not_coexistence:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], ""not_coexistence:(\'Send Notification by e-mail\', \'Low Medical History\')"": [0, 1, 0, -1, -1, 0, 0, -1, 1, 0, 1, 0, 0, 0], ""not_coexistence:(\'Send Notification by e-mail\', \'Register\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0], ""not_coexistence:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0], ""not_coexistence:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], ""not_coexistence:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Send Notification by e-mail\', \'High Medical History\')"": [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], ""not_succession:(\'Low Insurance Check\', \'Reject Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""not_succession:(\'Low Insurance Check\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Insurance Check\', \'High Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Insurance Check\', \'Low Medical History\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Insurance Check\', \'Register\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Insurance Check\', \'Send Questionnaire\')"": [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, -1, 0, 0, 0], ""not_succession:(\'Low Insurance Check\', \'Send Notification by Post\')"": [0, 1, 0, 1, 1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Insurance Check\', \'Create Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Insurance Check\', \'Contact Hospital\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""not_succession:(\'Low Insurance Check\', \'High Medical History\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [0, 1, 0, -1, -1, 0, 0, -1, 1, 0, 1, 0, 0, 0], ""not_succession:(\'Reject Claim\', \'Low Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""not_succession:(\'Reject Claim\', \'Accept Claim\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""not_succession:(\'Reject Claim\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""not_succession:(\'Reject Claim\', \'Low Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""not_succession:(\'Reject Claim\', \'Register\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""not_succession:(\'Reject Claim\', \'Send Questionnaire\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, -1, 0, 0, 1], ""not_succession:(\'Reject Claim\', \'Send Notification by Post\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""not_succession:(\'Reject Claim\', \'Create Questionnaire\')"": [1, 0, 1, 0, 0, -1, 1, 1, 0, 0, 1, 0, 0, -1], ""not_succession:(\'Reject Claim\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""not_succession:(\'Reject Claim\', \'Prepare Notification Content\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""not_succession:(\'Reject Claim\', \'High Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""not_succession:(\'Reject Claim\', \'Send Notification by e-mail\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, 1, 0, 0, 1], ""not_succession:(\'Accept Claim\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""not_succession:(\'Accept Claim\', \'Reject Claim\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""not_succession:(\'Accept Claim\', \'High Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""not_succession:(\'Accept Claim\', \'Low Medical History\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""not_succession:(\'Accept Claim\', \'Register\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""not_succession:(\'Accept Claim\', \'Send Questionnaire\')"": [0, -1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""not_succession:(\'Accept Claim\', \'Send Notification by Post\')"": [0, 1, 0, 1, 1, 0, 0, 0, -1, 1, 0, 1, 1, 0], ""not_succession:(\'Accept Claim\', \'Create Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, -1, 0], ""not_succession:(\'Accept Claim\', \'Contact Hospital\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""not_succession:(\'Accept Claim\', \'Prepare Notification Content\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""not_succession:(\'Accept Claim\', \'High Medical History\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""not_succession:(\'Accept Claim\', \'Send Notification by e-mail\')"": [0, 1, 0, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""not_succession:(\'High Insurance Check\', \'Low Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'High Insurance Check\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], ""not_succession:(\'High Insurance Check\', \'Accept Claim\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], ""not_succession:(\'High Insurance Check\', \'Low Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'High Insurance Check\', \'Register\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'High Insurance Check\', \'Send Questionnaire\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'High Insurance Check\', \'Send Notification by Post\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'High Insurance Check\', \'Create Questionnaire\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, -1, -1], ""not_succession:(\'High Insurance Check\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, 1, -1, -1], ""not_succession:(\'High Insurance Check\', \'Prepare Notification Content\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""not_succession:(\'High Insurance Check\', \'High Medical History\')"": [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, 1, -1, -1], ""not_succession:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'Low Medical History\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""not_succession:(\'Low Medical History\', \'Reject Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""not_succession:(\'Low Medical History\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Medical History\', \'High Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Medical History\', \'Register\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Medical History\', \'Send Questionnaire\')"": [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, -1, 0, 0, 0], ""not_succession:(\'Low Medical History\', \'Send Notification by Post\')"": [0, 1, 0, 1, 1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Medical History\', \'Create Questionnaire\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Medical History\', \'Contact Hospital\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Medical History\', \'Prepare Notification Content\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""not_succession:(\'Low Medical History\', \'High Medical History\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Medical History\', \'Send Notification by e-mail\')"": [0, 1, 0, -1, -1, 0, 0, -1, 1, 0, 1, 0, 0, 0], ""not_succession:(\'Register\', \'Low Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""not_succession:(\'Register\', \'Reject Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""not_succession:(\'Register\', \'Accept Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""not_succession:(\'Register\', \'High Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_succession:(\'Register\', \'Low Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""not_succession:(\'Register\', \'Send Questionnaire\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""not_succession:(\'Register\', \'Send Notification by Post\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""not_succession:(\'Register\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""not_succession:(\'Register\', \'Contact Hospital\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_succession:(\'Register\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""not_succession:(\'Register\', \'High Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_succession:(\'Register\', \'Send Notification by e-mail\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""not_succession:(\'Send Questionnaire\', \'Low Insurance Check\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_succession:(\'Send Questionnaire\', \'Reject Claim\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_succession:(\'Send Questionnaire\', \'Accept Claim\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_succession:(\'Send Questionnaire\', \'High Insurance Check\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_succession:(\'Send Questionnaire\', \'Low Medical History\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_succession:(\'Send Questionnaire\', \'Register\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_succession:(\'Send Questionnaire\', \'Send Notification by Post\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_succession:(\'Send Questionnaire\', \'Create Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_succession:(\'Send Questionnaire\', \'Contact Hospital\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_succession:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_succession:(\'Send Questionnaire\', \'High Medical History\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_succession:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_succession:(\'Send Notification by Post\', \'Low Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by Post\', \'Reject Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by Post\', \'Accept Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by Post\', \'High Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by Post\', \'Low Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by Post\', \'Register\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by Post\', \'Send Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by Post\', \'Create Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by Post\', \'Contact Hospital\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by Post\', \'High Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_succession:(\'Create Questionnaire\', \'Low Insurance Check\')"": [1, -1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, 1], ""not_succession:(\'Create Questionnaire\', \'Reject Claim\')"": [-1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1], ""not_succession:(\'Create Questionnaire\', \'Accept Claim\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1], ""not_succession:(\'Create Questionnaire\', \'High Insurance Check\')"": [-1, 1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1], ""not_succession:(\'Create Questionnaire\', \'Low Medical History\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, 1], ""not_succession:(\'Create Questionnaire\', \'Register\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_succession:(\'Create Questionnaire\', \'Send Questionnaire\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""not_succession:(\'Create Questionnaire\', \'Send Notification by Post\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""not_succession:(\'Create Questionnaire\', \'Contact Hospital\')"": [-1, 1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1], ""not_succession:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], ""not_succession:(\'Create Questionnaire\', \'High Medical History\')"": [-1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1], ""not_succession:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""not_succession:(\'Contact Hospital\', \'Low Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'Contact Hospital\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], ""not_succession:(\'Contact Hospital\', \'Accept Claim\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], ""not_succession:(\'Contact Hospital\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, -1, 1, 1], ""not_succession:(\'Contact Hospital\', \'Low Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'Contact Hospital\', \'Register\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'Contact Hospital\', \'Send Questionnaire\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'Contact Hospital\', \'Send Notification by Post\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'Contact Hospital\', \'Create Questionnaire\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, -1, -1], ""not_succession:(\'Contact Hospital\', \'Prepare Notification Content\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""not_succession:(\'Contact Hospital\', \'High Medical History\')"": [-1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_succession:(\'Prepare Notification Content\', \'Reject Claim\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_succession:(\'Prepare Notification Content\', \'Accept Claim\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_succession:(\'Prepare Notification Content\', \'High Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_succession:(\'Prepare Notification Content\', \'Low Medical History\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_succession:(\'Prepare Notification Content\', \'Register\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_succession:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""not_succession:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""not_succession:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1], ""not_succession:(\'Prepare Notification Content\', \'Contact Hospital\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_succession:(\'Prepare Notification Content\', \'High Medical History\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_succession:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""not_succession:(\'High Medical History\', \'Low Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'High Medical History\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], ""not_succession:(\'High Medical History\', \'Accept Claim\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], ""not_succession:(\'High Medical History\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, -1, 1, 0, 0, -1, 0, -1, 1, 1], ""not_succession:(\'High Medical History\', \'Low Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'High Medical History\', \'Register\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'High Medical History\', \'Send Questionnaire\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'High Medical History\', \'Send Notification by Post\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'High Medical History\', \'Create Questionnaire\')"": [1, 0, 1, 0, 0, -1, 1, 0, 0, 1, 0, 1, -1, -1], ""not_succession:(\'High Medical History\', \'Contact Hospital\')"": [1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, -1], ""not_succession:(\'High Medical History\', \'Prepare Notification Content\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""not_succession:(\'High Medical History\', \'Send Notification by e-mail\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by e-mail\', \'Reject Claim\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by e-mail\', \'Accept Claim\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by e-mail\', \'Low Medical History\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by e-mail\', \'Register\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by e-mail\', \'High Medical History\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""responded_existence:(\'Low Insurance Check\', \'Reject Claim\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""responded_existence:(\'Low Insurance Check\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""responded_existence:(\'Low Insurance Check\', \'High Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""responded_existence:(\'Low Insurance Check\', \'Low Medical History\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""responded_existence:(\'Low Insurance Check\', \'Register\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""responded_existence:(\'Low Insurance Check\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], ""responded_existence:(\'Low Insurance Check\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""responded_existence:(\'Low Insurance Check\', \'Create Questionnaire\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""responded_existence:(\'Low Insurance Check\', \'Contact Hospital\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""responded_existence:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""responded_existence:(\'Low Insurance Check\', \'High Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""responded_existence:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], ""responded_existence:(\'Reject Claim\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, 1, 0, 0, -1], ""responded_existence:(\'Reject Claim\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""responded_existence:(\'Reject Claim\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, -1, 0, 0, 1], ""responded_existence:(\'Reject Claim\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, 1, 0, 0, -1], ""responded_existence:(\'Reject Claim\', \'Register\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""responded_existence:(\'Reject Claim\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, 1, 0, 0, -1], ""responded_existence:(\'Reject Claim\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""responded_existence:(\'Reject Claim\', \'Create Questionnaire\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""responded_existence:(\'Reject Claim\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, -1, 0, 0, 1], ""responded_existence:(\'Reject Claim\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""responded_existence:(\'Reject Claim\', \'High Medical History\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, -1, 0, 0, 1], ""responded_existence:(\'Reject Claim\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, -1, 0, 0, -1], ""responded_existence:(\'Accept Claim\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""responded_existence:(\'Accept Claim\', \'Reject Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""responded_existence:(\'Accept Claim\', \'High Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, 1, 0], ""responded_existence:(\'Accept Claim\', \'Low Medical History\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""responded_existence:(\'Accept Claim\', \'Register\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""responded_existence:(\'Accept Claim\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""responded_existence:(\'Accept Claim\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""responded_existence:(\'Accept Claim\', \'Create Questionnaire\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""responded_existence:(\'Accept Claim\', \'Contact Hospital\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, 1, 0], ""responded_existence:(\'Accept Claim\', \'Prepare Notification Content\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""responded_existence:(\'Accept Claim\', \'High Medical History\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, 1, 0], ""responded_existence:(\'Accept Claim\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""responded_existence:(\'High Insurance Check\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'High Insurance Check\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], ""responded_existence:(\'High Insurance Check\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], ""responded_existence:(\'High Insurance Check\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'High Insurance Check\', \'Register\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'High Insurance Check\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'High Insurance Check\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'High Insurance Check\', \'Create Questionnaire\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'High Insurance Check\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'High Insurance Check\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'High Insurance Check\', \'High Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'Low Medical History\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""responded_existence:(\'Low Medical History\', \'Reject Claim\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""responded_existence:(\'Low Medical History\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""responded_existence:(\'Low Medical History\', \'High Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""responded_existence:(\'Low Medical History\', \'Register\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""responded_existence:(\'Low Medical History\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], ""responded_existence:(\'Low Medical History\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""responded_existence:(\'Low Medical History\', \'Create Questionnaire\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""responded_existence:(\'Low Medical History\', \'Contact Hospital\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""responded_existence:(\'Low Medical History\', \'Prepare Notification Content\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""responded_existence:(\'Low Medical History\', \'High Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""responded_existence:(\'Low Medical History\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], ""responded_existence:(\'Register\', \'Low Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""responded_existence:(\'Register\', \'Reject Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""responded_existence:(\'Register\', \'Accept Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""responded_existence:(\'Register\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""responded_existence:(\'Register\', \'Low Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""responded_existence:(\'Register\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""responded_existence:(\'Register\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""responded_existence:(\'Register\', \'Create Questionnaire\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""responded_existence:(\'Register\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""responded_existence:(\'Register\', \'Prepare Notification Content\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""responded_existence:(\'Register\', \'High Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""responded_existence:(\'Register\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""responded_existence:(\'Send Questionnaire\', \'Low Insurance Check\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""responded_existence:(\'Send Questionnaire\', \'Reject Claim\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""responded_existence:(\'Send Questionnaire\', \'Accept Claim\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""responded_existence:(\'Send Questionnaire\', \'High Insurance Check\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""responded_existence:(\'Send Questionnaire\', \'Low Medical History\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""responded_existence:(\'Send Questionnaire\', \'Register\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""responded_existence:(\'Send Questionnaire\', \'Send Notification by Post\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""responded_existence:(\'Send Questionnaire\', \'Create Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""responded_existence:(\'Send Questionnaire\', \'Contact Hospital\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""responded_existence:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""responded_existence:(\'Send Questionnaire\', \'High Medical History\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""responded_existence:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""responded_existence:(\'Send Notification by Post\', \'Low Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by Post\', \'Reject Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by Post\', \'Accept Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by Post\', \'High Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by Post\', \'Low Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by Post\', \'Register\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by Post\', \'Send Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by Post\', \'Create Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by Post\', \'Contact Hospital\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by Post\', \'High Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""responded_existence:(\'Create Questionnaire\', \'Low Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""responded_existence:(\'Create Questionnaire\', \'Reject Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""responded_existence:(\'Create Questionnaire\', \'Accept Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""responded_existence:(\'Create Questionnaire\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""responded_existence:(\'Create Questionnaire\', \'Low Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""responded_existence:(\'Create Questionnaire\', \'Register\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""responded_existence:(\'Create Questionnaire\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""responded_existence:(\'Create Questionnaire\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""responded_existence:(\'Create Questionnaire\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""responded_existence:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""responded_existence:(\'Create Questionnaire\', \'High Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""responded_existence:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""responded_existence:(\'Contact Hospital\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'Contact Hospital\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], ""responded_existence:(\'Contact Hospital\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], ""responded_existence:(\'Contact Hospital\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'Contact Hospital\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'Contact Hospital\', \'Register\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'Contact Hospital\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'Contact Hospital\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'Contact Hospital\', \'Create Questionnaire\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'Contact Hospital\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'Contact Hospital\', \'High Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""responded_existence:(\'Prepare Notification Content\', \'Reject Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""responded_existence:(\'Prepare Notification Content\', \'Accept Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""responded_existence:(\'Prepare Notification Content\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""responded_existence:(\'Prepare Notification Content\', \'Low Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""responded_existence:(\'Prepare Notification Content\', \'Register\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""responded_existence:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""responded_existence:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""responded_existence:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""responded_existence:(\'Prepare Notification Content\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""responded_existence:(\'Prepare Notification Content\', \'High Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""responded_existence:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""responded_existence:(\'High Medical History\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'High Medical History\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], ""responded_existence:(\'High Medical History\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], ""responded_existence:(\'High Medical History\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'High Medical History\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'High Medical History\', \'Register\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'High Medical History\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'High Medical History\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'High Medical History\', \'Create Questionnaire\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'High Medical History\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'High Medical History\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'High Medical History\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by e-mail\', \'Reject Claim\')"": [0, 0, 0, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by e-mail\', \'Accept Claim\')"": [0, 0, 0, 1, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by e-mail\', \'Low Medical History\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by e-mail\', \'Register\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by e-mail\', \'High Medical History\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""response:(\'Low Insurance Check\', \'Reject Claim\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""response:(\'Low Insurance Check\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""response:(\'Low Insurance Check\', \'High Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""response:(\'Low Insurance Check\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""response:(\'Low Insurance Check\', \'Register\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""response:(\'Low Insurance Check\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], ""response:(\'Low Insurance Check\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""response:(\'Low Insurance Check\', \'Create Questionnaire\')"": [0, -1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""response:(\'Low Insurance Check\', \'Contact Hospital\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""response:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""response:(\'Low Insurance Check\', \'High Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""response:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], ""response:(\'Reject Claim\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""response:(\'Reject Claim\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""response:(\'Reject Claim\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""response:(\'Reject Claim\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""response:(\'Reject Claim\', \'Register\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""response:(\'Reject Claim\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, 1, 0, 0, -1], ""response:(\'Reject Claim\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""response:(\'Reject Claim\', \'Create Questionnaire\')"": [-1, 0, -1, 0, 0, 1, -1, -1, 0, 0, -1, 0, 0, 1], ""response:(\'Reject Claim\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""response:(\'Reject Claim\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""response:(\'Reject Claim\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""response:(\'Reject Claim\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, -1, 0, 0, -1], ""response:(\'Accept Claim\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""response:(\'Accept Claim\', \'Reject Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""response:(\'Accept Claim\', \'High Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""response:(\'Accept Claim\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""response:(\'Accept Claim\', \'Register\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""response:(\'Accept Claim\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""response:(\'Accept Claim\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""response:(\'Accept Claim\', \'Create Questionnaire\')"": [0, -1, 0, 1, 1, 0, 0, 0, 1, -1, 0, -1, 1, 0], ""response:(\'Accept Claim\', \'Contact Hospital\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""response:(\'Accept Claim\', \'Prepare Notification Content\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""response:(\'Accept Claim\', \'High Medical History\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""response:(\'Accept Claim\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""response:(\'High Insurance Check\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'High Insurance Check\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], ""response:(\'High Insurance Check\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], ""response:(\'High Insurance Check\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'High Insurance Check\', \'Register\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'High Insurance Check\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'High Insurance Check\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'High Insurance Check\', \'Create Questionnaire\')"": [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, 1, 1], ""response:(\'High Insurance Check\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, -1, 1, 1], ""response:(\'High Insurance Check\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""response:(\'High Insurance Check\', \'High Medical History\')"": [1, 0, 1, 0, 0, -1, 1, 0, 0, -1, 0, -1, 1, 1], ""response:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'Low Medical History\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""response:(\'Low Medical History\', \'Reject Claim\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""response:(\'Low Medical History\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""response:(\'Low Medical History\', \'High Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""response:(\'Low Medical History\', \'Register\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""response:(\'Low Medical History\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], ""response:(\'Low Medical History\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""response:(\'Low Medical History\', \'Create Questionnaire\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""response:(\'Low Medical History\', \'Contact Hospital\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""response:(\'Low Medical History\', \'Prepare Notification Content\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""response:(\'Low Medical History\', \'High Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""response:(\'Low Medical History\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], ""response:(\'Register\', \'Low Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""response:(\'Register\', \'Reject Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""response:(\'Register\', \'Accept Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""response:(\'Register\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""response:(\'Register\', \'Low Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""response:(\'Register\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""response:(\'Register\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""response:(\'Register\', \'Create Questionnaire\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""response:(\'Register\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""response:(\'Register\', \'Prepare Notification Content\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""response:(\'Register\', \'High Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""response:(\'Register\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""response:(\'Send Questionnaire\', \'Low Insurance Check\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""response:(\'Send Questionnaire\', \'Reject Claim\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""response:(\'Send Questionnaire\', \'Accept Claim\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""response:(\'Send Questionnaire\', \'High Insurance Check\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""response:(\'Send Questionnaire\', \'Low Medical History\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""response:(\'Send Questionnaire\', \'Register\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""response:(\'Send Questionnaire\', \'Send Notification by Post\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""response:(\'Send Questionnaire\', \'Create Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""response:(\'Send Questionnaire\', \'Contact Hospital\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""response:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""response:(\'Send Questionnaire\', \'High Medical History\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""response:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""response:(\'Send Notification by Post\', \'Low Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""response:(\'Send Notification by Post\', \'Reject Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""response:(\'Send Notification by Post\', \'Accept Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""response:(\'Send Notification by Post\', \'High Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""response:(\'Send Notification by Post\', \'Low Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""response:(\'Send Notification by Post\', \'Register\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""response:(\'Send Notification by Post\', \'Send Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""response:(\'Send Notification by Post\', \'Create Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""response:(\'Send Notification by Post\', \'Contact Hospital\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""response:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""response:(\'Send Notification by Post\', \'High Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""response:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""response:(\'Create Questionnaire\', \'Low Insurance Check\')"": [-1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""response:(\'Create Questionnaire\', \'Reject Claim\')"": [1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1], ""response:(\'Create Questionnaire\', \'Accept Claim\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], ""response:(\'Create Questionnaire\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], ""response:(\'Create Questionnaire\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""response:(\'Create Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""response:(\'Create Questionnaire\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""response:(\'Create Questionnaire\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""response:(\'Create Questionnaire\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], ""response:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1], ""response:(\'Create Questionnaire\', \'High Medical History\')"": [1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1], ""response:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""response:(\'Contact Hospital\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'Contact Hospital\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], ""response:(\'Contact Hospital\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], ""response:(\'Contact Hospital\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, 1, -1, -1], ""response:(\'Contact Hospital\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'Contact Hospital\', \'Register\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'Contact Hospital\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'Contact Hospital\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'Contact Hospital\', \'Create Questionnaire\')"": [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, 1, 1], ""response:(\'Contact Hospital\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""response:(\'Contact Hospital\', \'High Medical History\')"": [1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""response:(\'Prepare Notification Content\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""response:(\'Prepare Notification Content\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""response:(\'Prepare Notification Content\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""response:(\'Prepare Notification Content\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""response:(\'Prepare Notification Content\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""response:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""response:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""response:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], ""response:(\'Prepare Notification Content\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""response:(\'Prepare Notification Content\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""response:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""response:(\'High Medical History\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'High Medical History\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], ""response:(\'High Medical History\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], ""response:(\'High Medical History\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, 1, -1, -1], ""response:(\'High Medical History\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'High Medical History\', \'Register\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'High Medical History\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'High Medical History\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'High Medical History\', \'Create Questionnaire\')"": [-1, 0, -1, 0, 0, 1, -1, 0, 0, -1, 0, -1, 1, 1], ""response:(\'High Medical History\', \'Contact Hospital\')"": [-1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, 1], ""response:(\'High Medical History\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""response:(\'High Medical History\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""response:(\'Send Notification by e-mail\', \'Reject Claim\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""response:(\'Send Notification by e-mail\', \'Accept Claim\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""response:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""response:(\'Send Notification by e-mail\', \'Low Medical History\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""response:(\'Send Notification by e-mail\', \'Register\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""response:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""response:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""response:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""response:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""response:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""response:(\'Send Notification by e-mail\', \'High Medical History\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""succession:(\'Low Insurance Check\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, 0, 0, -1], ""succession:(\'Low Insurance Check\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0], ""succession:(\'Low Insurance Check\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Low Insurance Check\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""succession:(\'Low Insurance Check\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Low Insurance Check\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], ""succession:(\'Low Insurance Check\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""succession:(\'Low Insurance Check\', \'Create Questionnaire\')"": [-1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""succession:(\'Low Insurance Check\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""succession:(\'Low Insurance Check\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], ""succession:(\'Reject Claim\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""succession:(\'Reject Claim\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Reject Claim\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1], ""succession:(\'Reject Claim\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""succession:(\'Reject Claim\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Reject Claim\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, -1, 0, 0, 1, 0, 0, -1], ""succession:(\'Reject Claim\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""succession:(\'Reject Claim\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1], ""succession:(\'Reject Claim\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1], ""succession:(\'Reject Claim\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""succession:(\'Reject Claim\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1], ""succession:(\'Reject Claim\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, 1, 0, 0, -1, 0, 0, -1], ""succession:(\'Accept Claim\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, 0], ""succession:(\'Accept Claim\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Accept Claim\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""succession:(\'Accept Claim\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, 0], ""succession:(\'Accept Claim\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Accept Claim\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, 0], ""succession:(\'Accept Claim\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""succession:(\'Accept Claim\', \'Create Questionnaire\')"": [-1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1], ""succession:(\'Accept Claim\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""succession:(\'Accept Claim\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""succession:(\'Accept Claim\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""succession:(\'Accept Claim\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, -1, -1, -1, 0, -1, -1, 0], ""succession:(\'High Insurance Check\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'High Insurance Check\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], ""succession:(\'High Insurance Check\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], ""succession:(\'High Insurance Check\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'High Insurance Check\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'High Insurance Check\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""succession:(\'High Insurance Check\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""succession:(\'High Insurance Check\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1], ""succession:(\'High Insurance Check\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, -1, 1, 1], ""succession:(\'High Insurance Check\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""succession:(\'High Insurance Check\', \'High Medical History\')"": [1, 0, 1, 0, 0, -1, 1, 0, 0, -1, 0, -1, 1, 1], ""succession:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""succession:(\'Low Medical History\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""succession:(\'Low Medical History\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, 0, 0, -1], ""succession:(\'Low Medical History\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0], ""succession:(\'Low Medical History\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Low Medical History\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Low Medical History\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], ""succession:(\'Low Medical History\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""succession:(\'Low Medical History\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""succession:(\'Low Medical History\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Low Medical History\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""succession:(\'Low Medical History\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Low Medical History\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], ""succession:(\'Register\', \'Low Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""succession:(\'Register\', \'Reject Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""succession:(\'Register\', \'Accept Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""succession:(\'Register\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""succession:(\'Register\', \'Low Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""succession:(\'Register\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""succession:(\'Register\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""succession:(\'Register\', \'Create Questionnaire\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""succession:(\'Register\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""succession:(\'Register\', \'Prepare Notification Content\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""succession:(\'Register\', \'High Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""succession:(\'Register\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""succession:(\'Send Questionnaire\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""succession:(\'Send Questionnaire\', \'Reject Claim\')"": [-1, -1, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""succession:(\'Send Questionnaire\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, 0], ""succession:(\'Send Questionnaire\', \'High Insurance Check\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""succession:(\'Send Questionnaire\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""succession:(\'Send Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Send Questionnaire\', \'Send Notification by Post\')"": [0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0], ""succession:(\'Send Questionnaire\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Send Questionnaire\', \'Contact Hospital\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""succession:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Send Questionnaire\', \'High Medical History\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""succession:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [0, -1, 0, -1, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0], ""succession:(\'Send Notification by Post\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""succession:(\'Send Notification by Post\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""succession:(\'Send Notification by Post\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""succession:(\'Send Notification by Post\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""succession:(\'Send Notification by Post\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""succession:(\'Send Notification by Post\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Send Notification by Post\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0], ""succession:(\'Send Notification by Post\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Send Notification by Post\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""succession:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Send Notification by Post\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""succession:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0], ""succession:(\'Create Questionnaire\', \'Low Insurance Check\')"": [-1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""succession:(\'Create Questionnaire\', \'Reject Claim\')"": [1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1], ""succession:(\'Create Questionnaire\', \'Accept Claim\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], ""succession:(\'Create Questionnaire\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], ""succession:(\'Create Questionnaire\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""succession:(\'Create Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Create Questionnaire\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""succession:(\'Create Questionnaire\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""succession:(\'Create Questionnaire\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], ""succession:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1], ""succession:(\'Create Questionnaire\', \'High Medical History\')"": [1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1], ""succession:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""succession:(\'Contact Hospital\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Contact Hospital\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], ""succession:(\'Contact Hospital\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], ""succession:(\'Contact Hospital\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, 1, -1, -1], ""succession:(\'Contact Hospital\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Contact Hospital\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Contact Hospital\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""succession:(\'Contact Hospital\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""succession:(\'Contact Hospital\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1], ""succession:(\'Contact Hospital\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""succession:(\'Contact Hospital\', \'High Medical History\')"": [1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, -1], ""succession:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""succession:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Prepare Notification Content\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Prepare Notification Content\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Prepare Notification Content\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Prepare Notification Content\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Prepare Notification Content\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""succession:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""succession:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], ""succession:(\'Prepare Notification Content\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Prepare Notification Content\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""succession:(\'High Medical History\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'High Medical History\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], ""succession:(\'High Medical History\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], ""succession:(\'High Medical History\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, 1, -1, -1], ""succession:(\'High Medical History\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'High Medical History\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'High Medical History\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""succession:(\'High Medical History\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""succession:(\'High Medical History\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1], ""succession:(\'High Medical History\', \'Contact Hospital\')"": [-1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, 1], ""succession:(\'High Medical History\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""succession:(\'High Medical History\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""succession:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""succession:(\'Send Notification by e-mail\', \'Reject Claim\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""succession:(\'Send Notification by e-mail\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, 0, -1, -1, 0], ""succession:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""succession:(\'Send Notification by e-mail\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""succession:(\'Send Notification by e-mail\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [0, -1, 0, -1, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0], ""succession:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [0, 0, 0, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0], ""succession:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""succession:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Send Notification by e-mail\', \'High Medical History\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""precedence:(\'Low Insurance Check\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, 1, 0, 0, -1], ""precedence:(\'Low Insurance Check\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""precedence:(\'Low Insurance Check\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Low Insurance Check\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Low Insurance Check\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Low Insurance Check\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""precedence:(\'Low Insurance Check\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""precedence:(\'Low Insurance Check\', \'Create Questionnaire\')"": [-1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""precedence:(\'Low Insurance Check\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""precedence:(\'Low Insurance Check\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""precedence:(\'Reject Claim\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Reject Claim\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""precedence:(\'Reject Claim\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Reject Claim\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Reject Claim\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Reject Claim\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""precedence:(\'Reject Claim\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""precedence:(\'Reject Claim\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1], ""precedence:(\'Reject Claim\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Reject Claim\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""precedence:(\'Reject Claim\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Reject Claim\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""precedence:(\'Accept Claim\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Accept Claim\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""precedence:(\'Accept Claim\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Accept Claim\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Accept Claim\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Accept Claim\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""precedence:(\'Accept Claim\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""precedence:(\'Accept Claim\', \'Create Questionnaire\')"": [-1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1], ""precedence:(\'Accept Claim\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Accept Claim\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""precedence:(\'Accept Claim\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Accept Claim\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""precedence:(\'High Insurance Check\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'High Insurance Check\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, -1, 0, 0, 1], ""precedence:(\'High Insurance Check\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, 1, 0], ""precedence:(\'High Insurance Check\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'High Insurance Check\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'High Insurance Check\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""precedence:(\'High Insurance Check\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""precedence:(\'High Insurance Check\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1], ""precedence:(\'High Insurance Check\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, -1, 1, 1], ""precedence:(\'High Insurance Check\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""precedence:(\'High Insurance Check\', \'High Medical History\')"": [1, 0, 1, 0, 0, -1, 1, 0, 0, -1, 0, -1, 1, 1], ""precedence:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""precedence:(\'Low Medical History\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""precedence:(\'Low Medical History\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, 1, 0, 0, -1], ""precedence:(\'Low Medical History\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""precedence:(\'Low Medical History\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Low Medical History\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Low Medical History\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""precedence:(\'Low Medical History\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""precedence:(\'Low Medical History\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""precedence:(\'Low Medical History\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Low Medical History\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""precedence:(\'Low Medical History\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Low Medical History\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""precedence:(\'Register\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""precedence:(\'Register\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""precedence:(\'Register\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""precedence:(\'Register\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""precedence:(\'Register\', \'Low Medical History\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""precedence:(\'Register\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""precedence:(\'Register\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""precedence:(\'Register\', \'Create Questionnaire\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""precedence:(\'Register\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""precedence:(\'Register\', \'Prepare Notification Content\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""precedence:(\'Register\', \'High Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""precedence:(\'Register\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""precedence:(\'Send Questionnaire\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Send Questionnaire\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""precedence:(\'Send Questionnaire\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""precedence:(\'Send Questionnaire\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Send Questionnaire\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Send Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Send Questionnaire\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""precedence:(\'Send Questionnaire\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Send Questionnaire\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Send Questionnaire\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""precedence:(\'Send Notification by Post\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Send Notification by Post\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""precedence:(\'Send Notification by Post\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""precedence:(\'Send Notification by Post\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Send Notification by Post\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Send Notification by Post\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Send Notification by Post\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""precedence:(\'Send Notification by Post\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Send Notification by Post\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Send Notification by Post\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""precedence:(\'Create Questionnaire\', \'Low Insurance Check\')"": [0, 1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""precedence:(\'Create Questionnaire\', \'Reject Claim\')"": [1, 0, 1, 0, 0, -1, 1, 1, 0, 0, 1, 0, 0, -1], ""precedence:(\'Create Questionnaire\', \'Accept Claim\')"": [0, 1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, -1, 0], ""precedence:(\'Create Questionnaire\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, -1, -1], ""precedence:(\'Create Questionnaire\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""precedence:(\'Create Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Create Questionnaire\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""precedence:(\'Create Questionnaire\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""precedence:(\'Create Questionnaire\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, -1, -1], ""precedence:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1], ""precedence:(\'Create Questionnaire\', \'High Medical History\')"": [1, 0, 1, 0, 0, -1, 1, 0, 0, 1, 0, 1, -1, -1], ""precedence:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""precedence:(\'Contact Hospital\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Contact Hospital\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, -1, 0, 0, 1], ""precedence:(\'Contact Hospital\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, 1, 0], ""precedence:(\'Contact Hospital\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, 1, -1, -1], ""precedence:(\'Contact Hospital\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Contact Hospital\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Contact Hospital\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""precedence:(\'Contact Hospital\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""precedence:(\'Contact Hospital\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1], ""precedence:(\'Contact Hospital\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""precedence:(\'Contact Hospital\', \'High Medical History\')"": [1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""precedence:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Prepare Notification Content\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""precedence:(\'Prepare Notification Content\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""precedence:(\'Prepare Notification Content\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Prepare Notification Content\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Prepare Notification Content\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""precedence:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""precedence:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], ""precedence:(\'Prepare Notification Content\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Prepare Notification Content\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""precedence:(\'High Medical History\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'High Medical History\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, -1, 0, 0, 1], ""precedence:(\'High Medical History\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, 1, 0], ""precedence:(\'High Medical History\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, 1, -1, -1], ""precedence:(\'High Medical History\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'High Medical History\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'High Medical History\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""precedence:(\'High Medical History\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""precedence:(\'High Medical History\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1], ""precedence:(\'High Medical History\', \'Contact Hospital\')"": [-1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, 1], ""precedence:(\'High Medical History\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""precedence:(\'High Medical History\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""precedence:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Send Notification by e-mail\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""precedence:(\'Send Notification by e-mail\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""precedence:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Send Notification by e-mail\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Send Notification by e-mail\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""precedence:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""precedence:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Send Notification by e-mail\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1]}\n        self.assertEqual(expected, train_results)\n\n    def test_transform_results_to_numpy(self):\n        train_results = {""init:(\'Low Insurance Check\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""init:(\'Reject Claim\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""init:(\'Accept Claim\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""init:(\'High Insurance Check\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""init:(\'Low Medical History\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""init:(\'Register\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""init:(\'Send Questionnaire\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""init:(\'Send Notification by Post\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""init:(\'Create Questionnaire\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""init:(\'Contact Hospital\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""init:(\'Prepare Notification Content\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""init:(\'High Medical History\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""init:(\'Send Notification by e-mail\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exist:(\'Low Insurance Check\',)"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""exist:(\'Reject Claim\',)"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""exist:(\'Accept Claim\',)"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""exist:(\'High Insurance Check\',)"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""exist:(\'Low Medical History\',)"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""exist:(\'Register\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""exist:(\'Send Questionnaire\',)"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""exist:(\'Send Notification by Post\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""exist:(\'Create Questionnaire\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""exist:(\'Contact Hospital\',)"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""exist:(\'Prepare Notification Content\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""exist:(\'High Medical History\',)"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""exist:(\'Send Notification by e-mail\',)"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""absence1:(\'Low Insurance Check\',)"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""absence1:(\'Reject Claim\',)"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""absence1:(\'Accept Claim\',)"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""absence1:(\'High Insurance Check\',)"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""absence1:(\'Low Medical History\',)"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""absence1:(\'Register\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""absence1:(\'Send Questionnaire\',)"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""absence1:(\'Send Notification by Post\',)"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""absence1:(\'Create Questionnaire\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""absence1:(\'Contact Hospital\',)"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""absence1:(\'Prepare Notification Content\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""absence1:(\'High Medical History\',)"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""absence1:(\'Send Notification by e-mail\',)"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""absence2:(\'Low Insurance Check\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence2:(\'Reject Claim\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence2:(\'Accept Claim\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence2:(\'High Insurance Check\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence2:(\'Low Medical History\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence2:(\'Register\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence2:(\'Send Questionnaire\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence2:(\'Send Notification by Post\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence2:(\'Create Questionnaire\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence2:(\'Contact Hospital\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence2:(\'Prepare Notification Content\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence2:(\'High Medical History\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence2:(\'Send Notification by e-mail\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence3:(\'Low Insurance Check\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence3:(\'Reject Claim\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence3:(\'Accept Claim\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence3:(\'High Insurance Check\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence3:(\'Low Medical History\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence3:(\'Register\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence3:(\'Send Questionnaire\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence3:(\'Send Notification by Post\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence3:(\'Create Questionnaire\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence3:(\'Contact Hospital\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence3:(\'Prepare Notification Content\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence3:(\'High Medical History\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""absence3:(\'Send Notification by e-mail\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'Low Insurance Check\', \'Reject Claim\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], ""choice:(\'Low Insurance Check\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], ""choice:(\'Low Insurance Check\', \'High Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'Low Insurance Check\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""choice:(\'Low Insurance Check\', \'Register\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""choice:(\'Low Insurance Check\', \'Send Questionnaire\')"": [-1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1], ""choice:(\'Low Insurance Check\', \'Send Notification by Post\')"": [-1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""choice:(\'Low Insurance Check\', \'Create Questionnaire\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""choice:(\'Low Insurance Check\', \'Contact Hospital\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""choice:(\'Low Insurance Check\', \'High Medical History\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [-1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1], ""choice:(\'Reject Claim\', \'Low Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], ""choice:(\'Reject Claim\', \'Accept Claim\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'Reject Claim\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], ""choice:(\'Reject Claim\', \'Low Medical History\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], ""choice:(\'Reject Claim\', \'Register\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""choice:(\'Reject Claim\', \'Send Questionnaire\')"": [1, 1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1], ""choice:(\'Reject Claim\', \'Send Notification by Post\')"": [1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1], ""choice:(\'Reject Claim\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""choice:(\'Reject Claim\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], ""choice:(\'Reject Claim\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""choice:(\'Reject Claim\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], ""choice:(\'Reject Claim\', \'Send Notification by e-mail\')"": [1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, 1], ""choice:(\'Accept Claim\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], ""choice:(\'Accept Claim\', \'Reject Claim\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'Accept Claim\', \'High Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], ""choice:(\'Accept Claim\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], ""choice:(\'Accept Claim\', \'Register\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""choice:(\'Accept Claim\', \'Send Questionnaire\')"": [-1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1], ""choice:(\'Accept Claim\', \'Send Notification by Post\')"": [-1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1], ""choice:(\'Accept Claim\', \'Create Questionnaire\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""choice:(\'Accept Claim\', \'Contact Hospital\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], ""choice:(\'Accept Claim\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""choice:(\'Accept Claim\', \'High Medical History\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], ""choice:(\'Accept Claim\', \'Send Notification by e-mail\')"": [-1, 1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1, -1], ""choice:(\'High Insurance Check\', \'Low Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'High Insurance Check\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], ""choice:(\'High Insurance Check\', \'Accept Claim\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], ""choice:(\'High Insurance Check\', \'Low Medical History\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'High Insurance Check\', \'Register\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'High Insurance Check\', \'Send Questionnaire\')"": [1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1], ""choice:(\'High Insurance Check\', \'Send Notification by Post\')"": [1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1], ""choice:(\'High Insurance Check\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'High Insurance Check\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""choice:(\'High Insurance Check\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'High Insurance Check\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""choice:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1], ""choice:(\'Low Medical History\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""choice:(\'Low Medical History\', \'Reject Claim\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], ""choice:(\'Low Medical History\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], ""choice:(\'Low Medical History\', \'High Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'Low Medical History\', \'Register\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""choice:(\'Low Medical History\', \'Send Questionnaire\')"": [-1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1], ""choice:(\'Low Medical History\', \'Send Notification by Post\')"": [-1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""choice:(\'Low Medical History\', \'Create Questionnaire\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""choice:(\'Low Medical History\', \'Contact Hospital\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'Low Medical History\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""choice:(\'Low Medical History\', \'High Medical History\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'Low Medical History\', \'Send Notification by e-mail\')"": [-1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1], ""choice:(\'Register\', \'Low Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""choice:(\'Register\', \'Reject Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""choice:(\'Register\', \'Accept Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""choice:(\'Register\', \'High Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'Register\', \'Low Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""choice:(\'Register\', \'Send Questionnaire\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""choice:(\'Register\', \'Send Notification by Post\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""choice:(\'Register\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""choice:(\'Register\', \'Contact Hospital\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'Register\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""choice:(\'Register\', \'High Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'Register\', \'Send Notification by e-mail\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""choice:(\'Send Questionnaire\', \'Low Insurance Check\')"": [-1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1], ""choice:(\'Send Questionnaire\', \'Reject Claim\')"": [1, 1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1], ""choice:(\'Send Questionnaire\', \'Accept Claim\')"": [-1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1], ""choice:(\'Send Questionnaire\', \'High Insurance Check\')"": [1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1], ""choice:(\'Send Questionnaire\', \'Low Medical History\')"": [-1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1], ""choice:(\'Send Questionnaire\', \'Register\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""choice:(\'Send Questionnaire\', \'Send Notification by Post\')"": [-1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1], ""choice:(\'Send Questionnaire\', \'Create Questionnaire\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""choice:(\'Send Questionnaire\', \'Contact Hospital\')"": [1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1], ""choice:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""choice:(\'Send Questionnaire\', \'High Medical History\')"": [1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1], ""choice:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [-1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""choice:(\'Send Notification by Post\', \'Low Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""choice:(\'Send Notification by Post\', \'Reject Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1], ""choice:(\'Send Notification by Post\', \'Accept Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1], ""choice:(\'Send Notification by Post\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1], ""choice:(\'Send Notification by Post\', \'Low Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""choice:(\'Send Notification by Post\', \'Register\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""choice:(\'Send Notification by Post\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1], ""choice:(\'Send Notification by Post\', \'Create Questionnaire\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""choice:(\'Send Notification by Post\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1], ""choice:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""choice:(\'Send Notification by Post\', \'High Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1], ""choice:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1], ""choice:(\'Create Questionnaire\', \'Low Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""choice:(\'Create Questionnaire\', \'Reject Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""choice:(\'Create Questionnaire\', \'Accept Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""choice:(\'Create Questionnaire\', \'High Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'Create Questionnaire\', \'Low Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""choice:(\'Create Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""choice:(\'Create Questionnaire\', \'Send Questionnaire\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""choice:(\'Create Questionnaire\', \'Send Notification by Post\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""choice:(\'Create Questionnaire\', \'Contact Hospital\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""choice:(\'Create Questionnaire\', \'High Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""choice:(\'Contact Hospital\', \'Low Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'Contact Hospital\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], ""choice:(\'Contact Hospital\', \'Accept Claim\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], ""choice:(\'Contact Hospital\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""choice:(\'Contact Hospital\', \'Low Medical History\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'Contact Hospital\', \'Register\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'Contact Hospital\', \'Send Questionnaire\')"": [1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1], ""choice:(\'Contact Hospital\', \'Send Notification by Post\')"": [1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1], ""choice:(\'Contact Hospital\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'Contact Hospital\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'Contact Hospital\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""choice:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1], ""choice:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""choice:(\'Prepare Notification Content\', \'Reject Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""choice:(\'Prepare Notification Content\', \'Accept Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""choice:(\'Prepare Notification Content\', \'High Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'Prepare Notification Content\', \'Low Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""choice:(\'Prepare Notification Content\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""choice:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""choice:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""choice:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""choice:(\'Prepare Notification Content\', \'Contact Hospital\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'Prepare Notification Content\', \'High Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""choice:(\'High Medical History\', \'Low Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'High Medical History\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], ""choice:(\'High Medical History\', \'Accept Claim\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], ""choice:(\'High Medical History\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""choice:(\'High Medical History\', \'Low Medical History\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""choice:(\'High Medical History\', \'Register\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'High Medical History\', \'Send Questionnaire\')"": [1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1], ""choice:(\'High Medical History\', \'Send Notification by Post\')"": [1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1], ""choice:(\'High Medical History\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'High Medical History\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""choice:(\'High Medical History\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""choice:(\'High Medical History\', \'Send Notification by e-mail\')"": [1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1], ""choice:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [-1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1], ""choice:(\'Send Notification by e-mail\', \'Reject Claim\')"": [1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, 1], ""choice:(\'Send Notification by e-mail\', \'Accept Claim\')"": [-1, 1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1, -1], ""choice:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1], ""choice:(\'Send Notification by e-mail\', \'Low Medical History\')"": [-1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1], ""choice:(\'Send Notification by e-mail\', \'Register\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""choice:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""choice:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [-1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1], ""choice:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""choice:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1], ""choice:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""choice:(\'Send Notification by e-mail\', \'High Medical History\')"": [1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'Low Insurance Check\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, 0, 0, -1], ""coexistence:(\'Low Insurance Check\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0], ""coexistence:(\'Low Insurance Check\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Low Insurance Check\', \'Low Medical History\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""coexistence:(\'Low Insurance Check\', \'Register\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""coexistence:(\'Low Insurance Check\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], ""coexistence:(\'Low Insurance Check\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""coexistence:(\'Low Insurance Check\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""coexistence:(\'Low Insurance Check\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""coexistence:(\'Low Insurance Check\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], ""coexistence:(\'Reject Claim\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, 0, 0, -1], ""coexistence:(\'Reject Claim\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Reject Claim\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], ""coexistence:(\'Reject Claim\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, 0, 0, -1], ""coexistence:(\'Reject Claim\', \'Register\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""coexistence:(\'Reject Claim\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, -1, 0, 0, 1, 0, 0, -1], ""coexistence:(\'Reject Claim\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""coexistence:(\'Reject Claim\', \'Create Questionnaire\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""coexistence:(\'Reject Claim\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], ""coexistence:(\'Reject Claim\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""coexistence:(\'Reject Claim\', \'High Medical History\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], ""coexistence:(\'Reject Claim\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, 1, 0, 0, -1, 0, 0, -1], ""coexistence:(\'Accept Claim\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0], ""coexistence:(\'Accept Claim\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Accept Claim\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], ""coexistence:(\'Accept Claim\', \'Low Medical History\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0], ""coexistence:(\'Accept Claim\', \'Register\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""coexistence:(\'Accept Claim\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, 0], ""coexistence:(\'Accept Claim\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""coexistence:(\'Accept Claim\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""coexistence:(\'Accept Claim\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], ""coexistence:(\'Accept Claim\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""coexistence:(\'Accept Claim\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], ""coexistence:(\'Accept Claim\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, -1, -1, -1, 0, -1, -1, 0], ""coexistence:(\'High Insurance Check\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'High Insurance Check\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], ""coexistence:(\'High Insurance Check\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], ""coexistence:(\'High Insurance Check\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'High Insurance Check\', \'Register\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'High Insurance Check\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""coexistence:(\'High Insurance Check\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""coexistence:(\'High Insurance Check\', \'Create Questionnaire\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'High Insurance Check\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""coexistence:(\'High Insurance Check\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'High Insurance Check\', \'High Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""coexistence:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""coexistence:(\'Low Medical History\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""coexistence:(\'Low Medical History\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, 0, 0, -1], ""coexistence:(\'Low Medical History\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0], ""coexistence:(\'Low Medical History\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Low Medical History\', \'Register\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""coexistence:(\'Low Medical History\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], ""coexistence:(\'Low Medical History\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""coexistence:(\'Low Medical History\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""coexistence:(\'Low Medical History\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Low Medical History\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""coexistence:(\'Low Medical History\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Low Medical History\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], ""coexistence:(\'Register\', \'Low Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""coexistence:(\'Register\', \'Reject Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""coexistence:(\'Register\', \'Accept Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""coexistence:(\'Register\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'Register\', \'Low Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""coexistence:(\'Register\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""coexistence:(\'Register\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""coexistence:(\'Register\', \'Create Questionnaire\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""coexistence:(\'Register\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'Register\', \'Prepare Notification Content\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""coexistence:(\'Register\', \'High Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'Register\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Send Questionnaire\', \'Low Insurance Check\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], ""coexistence:(\'Send Questionnaire\', \'Reject Claim\')"": [-1, -1, -1, 0, 0, -1, -1, -1, 0, 0, 1, 0, 0, -1], ""coexistence:(\'Send Questionnaire\', \'Accept Claim\')"": [0, 1, 0, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, 0], ""coexistence:(\'Send Questionnaire\', \'High Insurance Check\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""coexistence:(\'Send Questionnaire\', \'Low Medical History\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], ""coexistence:(\'Send Questionnaire\', \'Register\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""coexistence:(\'Send Questionnaire\', \'Send Notification by Post\')"": [0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0], ""coexistence:(\'Send Questionnaire\', \'Create Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""coexistence:(\'Send Questionnaire\', \'Contact Hospital\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""coexistence:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""coexistence:(\'Send Questionnaire\', \'High Medical History\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""coexistence:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [0, -1, 0, -1, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0], ""coexistence:(\'Send Notification by Post\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""coexistence:(\'Send Notification by Post\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""coexistence:(\'Send Notification by Post\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""coexistence:(\'Send Notification by Post\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""coexistence:(\'Send Notification by Post\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""coexistence:(\'Send Notification by Post\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""coexistence:(\'Send Notification by Post\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0], ""coexistence:(\'Send Notification by Post\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""coexistence:(\'Send Notification by Post\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""coexistence:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""coexistence:(\'Send Notification by Post\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""coexistence:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0], ""coexistence:(\'Create Questionnaire\', \'Low Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""coexistence:(\'Create Questionnaire\', \'Reject Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""coexistence:(\'Create Questionnaire\', \'Accept Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""coexistence:(\'Create Questionnaire\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'Create Questionnaire\', \'Low Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""coexistence:(\'Create Questionnaire\', \'Register\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""coexistence:(\'Create Questionnaire\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""coexistence:(\'Create Questionnaire\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""coexistence:(\'Create Questionnaire\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""coexistence:(\'Create Questionnaire\', \'High Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Contact Hospital\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Contact Hospital\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], ""coexistence:(\'Contact Hospital\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], ""coexistence:(\'Contact Hospital\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""coexistence:(\'Contact Hospital\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Contact Hospital\', \'Register\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'Contact Hospital\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""coexistence:(\'Contact Hospital\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""coexistence:(\'Contact Hospital\', \'Create Questionnaire\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'Contact Hospital\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'Contact Hospital\', \'High Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""coexistence:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""coexistence:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""coexistence:(\'Prepare Notification Content\', \'Reject Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""coexistence:(\'Prepare Notification Content\', \'Accept Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""coexistence:(\'Prepare Notification Content\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'Prepare Notification Content\', \'Low Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""coexistence:(\'Prepare Notification Content\', \'Register\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""coexistence:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""coexistence:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""coexistence:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""coexistence:(\'Prepare Notification Content\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'Prepare Notification Content\', \'High Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'High Medical History\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'High Medical History\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], ""coexistence:(\'High Medical History\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], ""coexistence:(\'High Medical History\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""coexistence:(\'High Medical History\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'High Medical History\', \'Register\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'High Medical History\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""coexistence:(\'High Medical History\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""coexistence:(\'High Medical History\', \'Create Questionnaire\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'High Medical History\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""coexistence:(\'High Medical History\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""coexistence:(\'High Medical History\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""coexistence:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], ""coexistence:(\'Send Notification by e-mail\', \'Reject Claim\')"": [-1, 0, -1, -1, -1, -1, -1, 1, 0, 0, -1, 0, 0, -1], ""coexistence:(\'Send Notification by e-mail\', \'Accept Claim\')"": [0, -1, 0, 1, 1, 0, 0, -1, -1, -1, 0, -1, -1, 0], ""coexistence:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""coexistence:(\'Send Notification by e-mail\', \'Low Medical History\')"": [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], ""coexistence:(\'Send Notification by e-mail\', \'Register\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [0, -1, 0, -1, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0], ""coexistence:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [0, 0, 0, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0], ""coexistence:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""coexistence:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""coexistence:(\'Send Notification by e-mail\', \'High Medical History\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""exactly1:(\'Low Insurance Check\',)"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""exactly1:(\'Reject Claim\',)"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""exactly1:(\'Accept Claim\',)"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""exactly1:(\'High Insurance Check\',)"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""exactly1:(\'Low Medical History\',)"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""exactly1:(\'Register\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""exactly1:(\'Send Questionnaire\',)"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""exactly1:(\'Send Notification by Post\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""exactly1:(\'Create Questionnaire\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""exactly1:(\'Contact Hospital\',)"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""exactly1:(\'Prepare Notification Content\',)"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""exactly1:(\'High Medical History\',)"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""exactly1:(\'Send Notification by e-mail\',)"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""exactly2:(\'Low Insurance Check\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly2:(\'Reject Claim\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly2:(\'Accept Claim\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly2:(\'High Insurance Check\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly2:(\'Low Medical History\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly2:(\'Register\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly2:(\'Send Questionnaire\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly2:(\'Send Notification by Post\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly2:(\'Create Questionnaire\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly2:(\'Contact Hospital\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly2:(\'Prepare Notification Content\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly2:(\'High Medical History\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly2:(\'Send Notification by e-mail\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly3:(\'Low Insurance Check\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly3:(\'Reject Claim\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly3:(\'Accept Claim\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly3:(\'High Insurance Check\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly3:(\'Low Medical History\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly3:(\'Register\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly3:(\'Send Questionnaire\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly3:(\'Send Notification by Post\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly3:(\'Create Questionnaire\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly3:(\'Contact Hospital\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly3:(\'Prepare Notification Content\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly3:(\'High Medical History\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""exactly3:(\'Send Notification by e-mail\',)"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Low Insurance Check\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, 1, 0, 0, -1], ""alternate_precedence:(\'Low Insurance Check\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""alternate_precedence:(\'Low Insurance Check\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Low Insurance Check\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Low Insurance Check\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Low Insurance Check\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""alternate_precedence:(\'Low Insurance Check\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Low Insurance Check\', \'Create Questionnaire\')"": [-1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Low Insurance Check\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""alternate_precedence:(\'Low Insurance Check\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Reject Claim\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Reject Claim\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_precedence:(\'Reject Claim\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Reject Claim\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Reject Claim\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Reject Claim\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""alternate_precedence:(\'Reject Claim\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Reject Claim\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1], ""alternate_precedence:(\'Reject Claim\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Reject Claim\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""alternate_precedence:(\'Reject Claim\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Reject Claim\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Accept Claim\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Accept Claim\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_precedence:(\'Accept Claim\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Accept Claim\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Accept Claim\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Accept Claim\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Accept Claim\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Accept Claim\', \'Create Questionnaire\')"": [-1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1], ""alternate_precedence:(\'Accept Claim\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Accept Claim\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""alternate_precedence:(\'Accept Claim\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Accept Claim\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_precedence:(\'High Insurance Check\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'High Insurance Check\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, -1, 0, 0, 1], ""alternate_precedence:(\'High Insurance Check\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, 1, 0], ""alternate_precedence:(\'High Insurance Check\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'High Insurance Check\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'High Insurance Check\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_precedence:(\'High Insurance Check\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_precedence:(\'High Insurance Check\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1], ""alternate_precedence:(\'High Insurance Check\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, -1, 1, 1], ""alternate_precedence:(\'High Insurance Check\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""alternate_precedence:(\'High Insurance Check\', \'High Medical History\')"": [1, 0, 1, 0, 0, -1, 1, 0, 0, -1, 0, -1, 1, 1], ""alternate_precedence:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Low Medical History\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""alternate_precedence:(\'Low Medical History\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, 1, 0, 0, -1], ""alternate_precedence:(\'Low Medical History\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""alternate_precedence:(\'Low Medical History\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Low Medical History\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Low Medical History\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""alternate_precedence:(\'Low Medical History\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Low Medical History\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Low Medical History\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Low Medical History\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""alternate_precedence:(\'Low Medical History\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Low Medical History\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Register\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""alternate_precedence:(\'Register\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""alternate_precedence:(\'Register\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""alternate_precedence:(\'Register\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""alternate_precedence:(\'Register\', \'Low Medical History\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""alternate_precedence:(\'Register\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""alternate_precedence:(\'Register\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Register\', \'Create Questionnaire\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""alternate_precedence:(\'Register\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""alternate_precedence:(\'Register\', \'Prepare Notification Content\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""alternate_precedence:(\'Register\', \'High Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""alternate_precedence:(\'Register\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Send Questionnaire\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Send Questionnaire\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_precedence:(\'Send Questionnaire\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_precedence:(\'Send Questionnaire\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Send Questionnaire\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Send Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Send Questionnaire\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Send Questionnaire\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Send Questionnaire\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Send Questionnaire\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Send Notification by Post\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Send Notification by Post\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_precedence:(\'Send Notification by Post\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_precedence:(\'Send Notification by Post\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Send Notification by Post\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Send Notification by Post\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Send Notification by Post\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Send Notification by Post\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Send Notification by Post\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Send Notification by Post\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Create Questionnaire\', \'Low Insurance Check\')"": [0, 1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""alternate_precedence:(\'Create Questionnaire\', \'Reject Claim\')"": [1, 0, 1, 0, 0, -1, 1, 1, 0, 0, 1, 0, 0, -1], ""alternate_precedence:(\'Create Questionnaire\', \'Accept Claim\')"": [0, 1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, -1, 0], ""alternate_precedence:(\'Create Questionnaire\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, -1, -1], ""alternate_precedence:(\'Create Questionnaire\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""alternate_precedence:(\'Create Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Create Questionnaire\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""alternate_precedence:(\'Create Questionnaire\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Create Questionnaire\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, -1, -1], ""alternate_precedence:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1], ""alternate_precedence:(\'Create Questionnaire\', \'High Medical History\')"": [1, 0, 1, 0, 0, -1, 1, 0, 0, 1, 0, 1, -1, -1], ""alternate_precedence:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Contact Hospital\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Contact Hospital\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, -1, 0, 0, 1], ""alternate_precedence:(\'Contact Hospital\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, 1, 0], ""alternate_precedence:(\'Contact Hospital\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, 1, -1, -1], ""alternate_precedence:(\'Contact Hospital\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Contact Hospital\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Contact Hospital\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Contact Hospital\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Contact Hospital\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1], ""alternate_precedence:(\'Contact Hospital\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""alternate_precedence:(\'Contact Hospital\', \'High Medical History\')"": [1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Prepare Notification Content\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_precedence:(\'Prepare Notification Content\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_precedence:(\'Prepare Notification Content\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Prepare Notification Content\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Prepare Notification Content\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""alternate_precedence:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], ""alternate_precedence:(\'Prepare Notification Content\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Prepare Notification Content\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""alternate_precedence:(\'High Medical History\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'High Medical History\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, -1, 0, 0, 1], ""alternate_precedence:(\'High Medical History\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, 1, 0], ""alternate_precedence:(\'High Medical History\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, 1, -1, -1], ""alternate_precedence:(\'High Medical History\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'High Medical History\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'High Medical History\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_precedence:(\'High Medical History\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_precedence:(\'High Medical History\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1], ""alternate_precedence:(\'High Medical History\', \'Contact Hospital\')"": [-1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, 1], ""alternate_precedence:(\'High Medical History\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""alternate_precedence:(\'High Medical History\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Send Notification by e-mail\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_precedence:(\'Send Notification by e-mail\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_precedence:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Send Notification by e-mail\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Send Notification by e-mail\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_precedence:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_precedence:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_precedence:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_precedence:(\'Send Notification by e-mail\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_succession:(\'Low Insurance Check\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, 0, 0, -1], ""alternate_succession:(\'Low Insurance Check\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0], ""alternate_succession:(\'Low Insurance Check\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Low Insurance Check\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_succession:(\'Low Insurance Check\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Low Insurance Check\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], ""alternate_succession:(\'Low Insurance Check\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""alternate_succession:(\'Low Insurance Check\', \'Create Questionnaire\')"": [-1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Low Insurance Check\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""alternate_succession:(\'Low Insurance Check\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], ""alternate_succession:(\'Reject Claim\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""alternate_succession:(\'Reject Claim\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Reject Claim\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1], ""alternate_succession:(\'Reject Claim\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""alternate_succession:(\'Reject Claim\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Reject Claim\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, -1, 0, 0, 1, 0, 0, -1], ""alternate_succession:(\'Reject Claim\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""alternate_succession:(\'Reject Claim\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1], ""alternate_succession:(\'Reject Claim\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1], ""alternate_succession:(\'Reject Claim\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""alternate_succession:(\'Reject Claim\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1], ""alternate_succession:(\'Reject Claim\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, 1, 0, 0, -1, 0, 0, -1], ""alternate_succession:(\'Accept Claim\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, 0], ""alternate_succession:(\'Accept Claim\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Accept Claim\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""alternate_succession:(\'Accept Claim\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, 0], ""alternate_succession:(\'Accept Claim\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Accept Claim\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, 0], ""alternate_succession:(\'Accept Claim\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""alternate_succession:(\'Accept Claim\', \'Create Questionnaire\')"": [-1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1], ""alternate_succession:(\'Accept Claim\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""alternate_succession:(\'Accept Claim\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""alternate_succession:(\'Accept Claim\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""alternate_succession:(\'Accept Claim\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, -1, -1, -1, 0, -1, -1, 0], ""alternate_succession:(\'High Insurance Check\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'High Insurance Check\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], ""alternate_succession:(\'High Insurance Check\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], ""alternate_succession:(\'High Insurance Check\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'High Insurance Check\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'High Insurance Check\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""alternate_succession:(\'High Insurance Check\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""alternate_succession:(\'High Insurance Check\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1], ""alternate_succession:(\'High Insurance Check\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, -1, 1, 1], ""alternate_succession:(\'High Insurance Check\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""alternate_succession:(\'High Insurance Check\', \'High Medical History\')"": [1, 0, 1, 0, 0, -1, 1, 0, 0, -1, 0, -1, 1, 1], ""alternate_succession:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""alternate_succession:(\'Low Medical History\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""alternate_succession:(\'Low Medical History\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, 0, 0, -1], ""alternate_succession:(\'Low Medical History\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0], ""alternate_succession:(\'Low Medical History\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Low Medical History\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Low Medical History\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], ""alternate_succession:(\'Low Medical History\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""alternate_succession:(\'Low Medical History\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Low Medical History\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Low Medical History\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""alternate_succession:(\'Low Medical History\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Low Medical History\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], ""alternate_succession:(\'Register\', \'Low Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""alternate_succession:(\'Register\', \'Reject Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""alternate_succession:(\'Register\', \'Accept Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""alternate_succession:(\'Register\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""alternate_succession:(\'Register\', \'Low Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""alternate_succession:(\'Register\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""alternate_succession:(\'Register\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Register\', \'Create Questionnaire\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""alternate_succession:(\'Register\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""alternate_succession:(\'Register\', \'Prepare Notification Content\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""alternate_succession:(\'Register\', \'High Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""alternate_succession:(\'Register\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Send Questionnaire\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_succession:(\'Send Questionnaire\', \'Reject Claim\')"": [-1, -1, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_succession:(\'Send Questionnaire\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, 0], ""alternate_succession:(\'Send Questionnaire\', \'High Insurance Check\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""alternate_succession:(\'Send Questionnaire\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_succession:(\'Send Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Send Questionnaire\', \'Send Notification by Post\')"": [0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0], ""alternate_succession:(\'Send Questionnaire\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Send Questionnaire\', \'Contact Hospital\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""alternate_succession:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Send Questionnaire\', \'High Medical History\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""alternate_succession:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [0, -1, 0, -1, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0], ""alternate_succession:(\'Send Notification by Post\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_succession:(\'Send Notification by Post\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""alternate_succession:(\'Send Notification by Post\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_succession:(\'Send Notification by Post\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""alternate_succession:(\'Send Notification by Post\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_succession:(\'Send Notification by Post\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Send Notification by Post\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0], ""alternate_succession:(\'Send Notification by Post\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Send Notification by Post\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""alternate_succession:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Send Notification by Post\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""alternate_succession:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0], ""alternate_succession:(\'Create Questionnaire\', \'Low Insurance Check\')"": [-1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""alternate_succession:(\'Create Questionnaire\', \'Reject Claim\')"": [1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1], ""alternate_succession:(\'Create Questionnaire\', \'Accept Claim\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], ""alternate_succession:(\'Create Questionnaire\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], ""alternate_succession:(\'Create Questionnaire\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""alternate_succession:(\'Create Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Create Questionnaire\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""alternate_succession:(\'Create Questionnaire\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Create Questionnaire\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], ""alternate_succession:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1], ""alternate_succession:(\'Create Questionnaire\', \'High Medical History\')"": [1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1], ""alternate_succession:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Contact Hospital\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Contact Hospital\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], ""alternate_succession:(\'Contact Hospital\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], ""alternate_succession:(\'Contact Hospital\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, 1, -1, -1], ""alternate_succession:(\'Contact Hospital\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Contact Hospital\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Contact Hospital\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""alternate_succession:(\'Contact Hospital\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""alternate_succession:(\'Contact Hospital\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1], ""alternate_succession:(\'Contact Hospital\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""alternate_succession:(\'Contact Hospital\', \'High Medical History\')"": [1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, -1], ""alternate_succession:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""alternate_succession:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Prepare Notification Content\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Prepare Notification Content\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Prepare Notification Content\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Prepare Notification Content\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Prepare Notification Content\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""alternate_succession:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], ""alternate_succession:(\'Prepare Notification Content\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Prepare Notification Content\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'High Medical History\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'High Medical History\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], ""alternate_succession:(\'High Medical History\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], ""alternate_succession:(\'High Medical History\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, 1, -1, -1], ""alternate_succession:(\'High Medical History\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'High Medical History\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'High Medical History\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""alternate_succession:(\'High Medical History\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""alternate_succession:(\'High Medical History\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1], ""alternate_succession:(\'High Medical History\', \'Contact Hospital\')"": [-1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, 1], ""alternate_succession:(\'High Medical History\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""alternate_succession:(\'High Medical History\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""alternate_succession:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_succession:(\'Send Notification by e-mail\', \'Reject Claim\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_succession:(\'Send Notification by e-mail\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, 0, -1, -1, 0], ""alternate_succession:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""alternate_succession:(\'Send Notification by e-mail\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_succession:(\'Send Notification by e-mail\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [0, -1, 0, -1, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0], ""alternate_succession:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [0, 0, 0, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0], ""alternate_succession:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""alternate_succession:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_succession:(\'Send Notification by e-mail\', \'High Medical History\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'Low Insurance Check\', \'Reject Claim\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""alternate_response:(\'Low Insurance Check\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Insurance Check\', \'High Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Insurance Check\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Insurance Check\', \'Register\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Insurance Check\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], ""alternate_response:(\'Low Insurance Check\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Insurance Check\', \'Create Questionnaire\')"": [0, -1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Insurance Check\', \'Contact Hospital\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""alternate_response:(\'Low Insurance Check\', \'High Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], ""alternate_response:(\'Reject Claim\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_response:(\'Reject Claim\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_response:(\'Reject Claim\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_response:(\'Reject Claim\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_response:(\'Reject Claim\', \'Register\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_response:(\'Reject Claim\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, 1, 0, 0, -1], ""alternate_response:(\'Reject Claim\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_response:(\'Reject Claim\', \'Create Questionnaire\')"": [-1, 0, -1, 0, 0, 1, -1, -1, 0, 0, -1, 0, 0, 1], ""alternate_response:(\'Reject Claim\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_response:(\'Reject Claim\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""alternate_response:(\'Reject Claim\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""alternate_response:(\'Reject Claim\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, -1, 0, 0, -1], ""alternate_response:(\'Accept Claim\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_response:(\'Accept Claim\', \'Reject Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_response:(\'Accept Claim\', \'High Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_response:(\'Accept Claim\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_response:(\'Accept Claim\', \'Register\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_response:(\'Accept Claim\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_response:(\'Accept Claim\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""alternate_response:(\'Accept Claim\', \'Create Questionnaire\')"": [0, -1, 0, 1, 1, 0, 0, 0, 1, -1, 0, -1, 1, 0], ""alternate_response:(\'Accept Claim\', \'Contact Hospital\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_response:(\'Accept Claim\', \'Prepare Notification Content\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""alternate_response:(\'Accept Claim\', \'High Medical History\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_response:(\'Accept Claim\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""alternate_response:(\'High Insurance Check\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'High Insurance Check\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], ""alternate_response:(\'High Insurance Check\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], ""alternate_response:(\'High Insurance Check\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'High Insurance Check\', \'Register\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'High Insurance Check\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'High Insurance Check\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'High Insurance Check\', \'Create Questionnaire\')"": [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, 1, 1], ""alternate_response:(\'High Insurance Check\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, -1, 1, 1], ""alternate_response:(\'High Insurance Check\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""alternate_response:(\'High Insurance Check\', \'High Medical History\')"": [1, 0, 1, 0, 0, -1, 1, 0, 0, -1, 0, -1, 1, 1], ""alternate_response:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'Low Medical History\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""alternate_response:(\'Low Medical History\', \'Reject Claim\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""alternate_response:(\'Low Medical History\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Medical History\', \'High Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Medical History\', \'Register\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Medical History\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], ""alternate_response:(\'Low Medical History\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Medical History\', \'Create Questionnaire\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Medical History\', \'Contact Hospital\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Medical History\', \'Prepare Notification Content\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""alternate_response:(\'Low Medical History\', \'High Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""alternate_response:(\'Low Medical History\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], ""alternate_response:(\'Register\', \'Low Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""alternate_response:(\'Register\', \'Reject Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""alternate_response:(\'Register\', \'Accept Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""alternate_response:(\'Register\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""alternate_response:(\'Register\', \'Low Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""alternate_response:(\'Register\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""alternate_response:(\'Register\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""alternate_response:(\'Register\', \'Create Questionnaire\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""alternate_response:(\'Register\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""alternate_response:(\'Register\', \'Prepare Notification Content\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""alternate_response:(\'Register\', \'High Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""alternate_response:(\'Register\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""alternate_response:(\'Send Questionnaire\', \'Low Insurance Check\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_response:(\'Send Questionnaire\', \'Reject Claim\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_response:(\'Send Questionnaire\', \'Accept Claim\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_response:(\'Send Questionnaire\', \'High Insurance Check\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_response:(\'Send Questionnaire\', \'Low Medical History\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_response:(\'Send Questionnaire\', \'Register\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_response:(\'Send Questionnaire\', \'Send Notification by Post\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_response:(\'Send Questionnaire\', \'Create Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_response:(\'Send Questionnaire\', \'Contact Hospital\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_response:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_response:(\'Send Questionnaire\', \'High Medical History\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_response:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""alternate_response:(\'Send Notification by Post\', \'Low Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by Post\', \'Reject Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by Post\', \'Accept Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by Post\', \'High Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by Post\', \'Low Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by Post\', \'Register\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by Post\', \'Send Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by Post\', \'Create Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by Post\', \'Contact Hospital\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by Post\', \'High Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""alternate_response:(\'Create Questionnaire\', \'Low Insurance Check\')"": [-1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""alternate_response:(\'Create Questionnaire\', \'Reject Claim\')"": [1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1], ""alternate_response:(\'Create Questionnaire\', \'Accept Claim\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], ""alternate_response:(\'Create Questionnaire\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], ""alternate_response:(\'Create Questionnaire\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""alternate_response:(\'Create Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_response:(\'Create Questionnaire\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""alternate_response:(\'Create Questionnaire\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""alternate_response:(\'Create Questionnaire\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], ""alternate_response:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1], ""alternate_response:(\'Create Questionnaire\', \'High Medical History\')"": [1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1], ""alternate_response:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""alternate_response:(\'Contact Hospital\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'Contact Hospital\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], ""alternate_response:(\'Contact Hospital\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], ""alternate_response:(\'Contact Hospital\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, 1, -1, -1], ""alternate_response:(\'Contact Hospital\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'Contact Hospital\', \'Register\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'Contact Hospital\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'Contact Hospital\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'Contact Hospital\', \'Create Questionnaire\')"": [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, 1, 1], ""alternate_response:(\'Contact Hospital\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""alternate_response:(\'Contact Hospital\', \'High Medical History\')"": [1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_response:(\'Prepare Notification Content\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_response:(\'Prepare Notification Content\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_response:(\'Prepare Notification Content\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_response:(\'Prepare Notification Content\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_response:(\'Prepare Notification Content\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_response:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""alternate_response:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""alternate_response:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], ""alternate_response:(\'Prepare Notification Content\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_response:(\'Prepare Notification Content\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""alternate_response:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""alternate_response:(\'High Medical History\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'High Medical History\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], ""alternate_response:(\'High Medical History\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], ""alternate_response:(\'High Medical History\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, 1, -1, -1], ""alternate_response:(\'High Medical History\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'High Medical History\', \'Register\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'High Medical History\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'High Medical History\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'High Medical History\', \'Create Questionnaire\')"": [-1, 0, -1, 0, 0, 1, -1, 0, 0, -1, 0, -1, 1, 1], ""alternate_response:(\'High Medical History\', \'Contact Hospital\')"": [-1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, 1], ""alternate_response:(\'High Medical History\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""alternate_response:(\'High Medical History\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""alternate_response:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by e-mail\', \'Reject Claim\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by e-mail\', \'Accept Claim\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by e-mail\', \'Low Medical History\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by e-mail\', \'Register\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""alternate_response:(\'Send Notification by e-mail\', \'High Medical History\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_precedence:(\'Low Insurance Check\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, 1, 0, 0, -1], ""chain_precedence:(\'Low Insurance Check\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""chain_precedence:(\'Low Insurance Check\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Low Insurance Check\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Low Insurance Check\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Low Insurance Check\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_precedence:(\'Low Insurance Check\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_precedence:(\'Low Insurance Check\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Low Insurance Check\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Low Insurance Check\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_precedence:(\'Reject Claim\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Reject Claim\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_precedence:(\'Reject Claim\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Reject Claim\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Reject Claim\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Reject Claim\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_precedence:(\'Reject Claim\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_precedence:(\'Reject Claim\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1], ""chain_precedence:(\'Reject Claim\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Reject Claim\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1], ""chain_precedence:(\'Reject Claim\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Reject Claim\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_precedence:(\'Accept Claim\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Accept Claim\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_precedence:(\'Accept Claim\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Accept Claim\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Accept Claim\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Accept Claim\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_precedence:(\'Accept Claim\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_precedence:(\'Accept Claim\', \'Create Questionnaire\')"": [-1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Accept Claim\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Accept Claim\', \'Prepare Notification Content\')"": [-1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1], ""chain_precedence:(\'Accept Claim\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Accept Claim\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_precedence:(\'High Insurance Check\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'High Insurance Check\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, 1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_precedence:(\'High Insurance Check\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, 1, -1, 0], ""chain_precedence:(\'High Insurance Check\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'High Insurance Check\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'High Insurance Check\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_precedence:(\'High Insurance Check\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_precedence:(\'High Insurance Check\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'High Insurance Check\', \'Contact Hospital\')"": [1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, -1, -1, -1], ""chain_precedence:(\'High Insurance Check\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'High Insurance Check\', \'High Medical History\')"": [-1, 0, 1, 0, 0, -1, -1, 0, 0, -1, 0, -1, 1, 1], ""chain_precedence:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_precedence:(\'Low Medical History\', \'Low Insurance Check\')"": [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""chain_precedence:(\'Low Medical History\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_precedence:(\'Low Medical History\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_precedence:(\'Low Medical History\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Low Medical History\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Low Medical History\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_precedence:(\'Low Medical History\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_precedence:(\'Low Medical History\', \'Create Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Low Medical History\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Low Medical History\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Low Medical History\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Low Medical History\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_precedence:(\'Register\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Register\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_precedence:(\'Register\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_precedence:(\'Register\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, 1, 1], ""chain_precedence:(\'Register\', \'Low Medical History\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Register\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_precedence:(\'Register\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_precedence:(\'Register\', \'Create Questionnaire\')"": [1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1], ""chain_precedence:(\'Register\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Register\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Register\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Register\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_precedence:(\'Send Questionnaire\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Send Questionnaire\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_precedence:(\'Send Questionnaire\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_precedence:(\'Send Questionnaire\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Send Questionnaire\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Send Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Send Questionnaire\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_precedence:(\'Send Questionnaire\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Send Questionnaire\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Send Questionnaire\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_precedence:(\'Send Notification by Post\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Send Notification by Post\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_precedence:(\'Send Notification by Post\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_precedence:(\'Send Notification by Post\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Send Notification by Post\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Send Notification by Post\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Send Notification by Post\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_precedence:(\'Send Notification by Post\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Send Notification by Post\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Send Notification by Post\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_precedence:(\'Create Questionnaire\', \'Low Insurance Check\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Create Questionnaire\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_precedence:(\'Create Questionnaire\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_precedence:(\'Create Questionnaire\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Create Questionnaire\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""chain_precedence:(\'Create Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Create Questionnaire\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_precedence:(\'Create Questionnaire\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_precedence:(\'Create Questionnaire\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [-1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1], ""chain_precedence:(\'Create Questionnaire\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, 1, 0, 0, 1, 0, 1, -1, -1], ""chain_precedence:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_precedence:(\'Contact Hospital\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Contact Hospital\', \'Reject Claim\')"": [-1, 0, 1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, 1], ""chain_precedence:(\'Contact Hospital\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, -1, 1, 0], ""chain_precedence:(\'Contact Hospital\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, 1, 0, 0, -1, 0, 1, -1, -1], ""chain_precedence:(\'Contact Hospital\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Contact Hospital\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Contact Hospital\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_precedence:(\'Contact Hospital\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_precedence:(\'Contact Hospital\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Contact Hospital\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Contact Hospital\', \'High Medical History\')"": [1, 0, -1, 0, 0, 1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_precedence:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Prepare Notification Content\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_precedence:(\'Prepare Notification Content\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_precedence:(\'Prepare Notification Content\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Prepare Notification Content\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Prepare Notification Content\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""chain_precedence:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""chain_precedence:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], ""chain_precedence:(\'Prepare Notification Content\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Prepare Notification Content\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""chain_precedence:(\'High Medical History\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'High Medical History\', \'Reject Claim\')"": [1, 0, -1, 0, 0, -1, 1, -1, 0, 0, -1, 0, 0, -1], ""chain_precedence:(\'High Medical History\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_precedence:(\'High Medical History\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, -1, -1, -1], ""chain_precedence:(\'High Medical History\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'High Medical History\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'High Medical History\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_precedence:(\'High Medical History\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_precedence:(\'High Medical History\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'High Medical History\', \'Contact Hospital\')"": [-1, 0, 1, 0, 0, -1, -1, 0, 0, -1, 0, 1, 1, 1], ""chain_precedence:(\'High Medical History\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'High Medical History\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_precedence:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Send Notification by e-mail\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_precedence:(\'Send Notification by e-mail\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_precedence:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Send Notification by e-mail\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_precedence:(\'Send Notification by e-mail\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_precedence:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_precedence:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_precedence:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_precedence:(\'Send Notification by e-mail\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'Low Insurance Check\', \'Reject Claim\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""chain_response:(\'Low Insurance Check\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Insurance Check\', \'High Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Insurance Check\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Insurance Check\', \'Register\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Insurance Check\', \'Send Questionnaire\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Insurance Check\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Insurance Check\', \'Create Questionnaire\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Insurance Check\', \'Contact Hospital\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Insurance Check\', \'High Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Reject Claim\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_response:(\'Reject Claim\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_response:(\'Reject Claim\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_response:(\'Reject Claim\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_response:(\'Reject Claim\', \'Register\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_response:(\'Reject Claim\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_response:(\'Reject Claim\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_response:(\'Reject Claim\', \'Create Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, 1], ""chain_response:(\'Reject Claim\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_response:(\'Reject Claim\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, -1], ""chain_response:(\'Reject Claim\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_response:(\'Reject Claim\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_response:(\'Accept Claim\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_response:(\'Accept Claim\', \'Reject Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_response:(\'Accept Claim\', \'High Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_response:(\'Accept Claim\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_response:(\'Accept Claim\', \'Register\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_response:(\'Accept Claim\', \'Send Questionnaire\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_response:(\'Accept Claim\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_response:(\'Accept Claim\', \'Create Questionnaire\')"": [0, -1, 0, 1, -1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""chain_response:(\'Accept Claim\', \'Contact Hospital\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_response:(\'Accept Claim\', \'Prepare Notification Content\')"": [0, 1, 0, -1, 1, 0, 0, 0, -1, 1, 0, 1, 1, 0], ""chain_response:(\'Accept Claim\', \'High Medical History\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_response:(\'Accept Claim\', \'Send Notification by e-mail\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_response:(\'High Insurance Check\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Insurance Check\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, 1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Insurance Check\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, 1, -1, -1], ""chain_response:(\'High Insurance Check\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Insurance Check\', \'Register\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Insurance Check\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Insurance Check\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Insurance Check\', \'Create Questionnaire\')"": [-1, 0, -1, 0, 0, -1, 1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Insurance Check\', \'Contact Hospital\')"": [1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, -1, -1, -1], ""chain_response:(\'High Insurance Check\', \'Prepare Notification Content\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Insurance Check\', \'High Medical History\')"": [-1, 0, 1, 0, 0, -1, -1, 0, 0, -1, 0, -1, 1, 1], ""chain_response:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'Low Medical History\', \'Low Insurance Check\')"": [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""chain_response:(\'Low Medical History\', \'Reject Claim\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Medical History\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Medical History\', \'High Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Medical History\', \'Register\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Medical History\', \'Send Questionnaire\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Medical History\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Medical History\', \'Create Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Medical History\', \'Contact Hospital\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Medical History\', \'Prepare Notification Content\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Medical History\', \'High Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Low Medical History\', \'Send Notification by e-mail\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_response:(\'Register\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Register\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Register\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Register\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1], ""chain_response:(\'Register\', \'Low Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""chain_response:(\'Register\', \'Send Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Register\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Register\', \'Create Questionnaire\')"": [1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1], ""chain_response:(\'Register\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Register\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Register\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Register\', \'Send Notification by e-mail\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Send Questionnaire\', \'Low Insurance Check\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_response:(\'Send Questionnaire\', \'Reject Claim\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_response:(\'Send Questionnaire\', \'Accept Claim\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_response:(\'Send Questionnaire\', \'High Insurance Check\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_response:(\'Send Questionnaire\', \'Low Medical History\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_response:(\'Send Questionnaire\', \'Register\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_response:(\'Send Questionnaire\', \'Send Notification by Post\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_response:(\'Send Questionnaire\', \'Create Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_response:(\'Send Questionnaire\', \'Contact Hospital\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_response:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_response:(\'Send Questionnaire\', \'High Medical History\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_response:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""chain_response:(\'Send Notification by Post\', \'Low Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by Post\', \'Reject Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by Post\', \'Accept Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by Post\', \'High Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by Post\', \'Low Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by Post\', \'Register\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by Post\', \'Send Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by Post\', \'Create Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by Post\', \'Contact Hospital\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by Post\', \'High Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""chain_response:(\'Create Questionnaire\', \'Low Insurance Check\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Create Questionnaire\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Create Questionnaire\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Create Questionnaire\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Create Questionnaire\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""chain_response:(\'Create Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Create Questionnaire\', \'Send Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Create Questionnaire\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Create Questionnaire\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [-1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1], ""chain_response:(\'Create Questionnaire\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1], ""chain_response:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [-1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Contact Hospital\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'Contact Hospital\', \'Reject Claim\')"": [-1, 0, 1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, 1], ""chain_response:(\'Contact Hospital\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, -1, 1, -1], ""chain_response:(\'Contact Hospital\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, 1, 0, 0, -1, 0, 1, -1, -1], ""chain_response:(\'Contact Hospital\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'Contact Hospital\', \'Register\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'Contact Hospital\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'Contact Hospital\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'Contact Hospital\', \'Create Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'Contact Hospital\', \'Prepare Notification Content\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'Contact Hospital\', \'High Medical History\')"": [1, 0, -1, 0, 0, 1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Prepare Notification Content\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Prepare Notification Content\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Prepare Notification Content\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Prepare Notification Content\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Prepare Notification Content\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""chain_response:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""chain_response:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], ""chain_response:(\'Prepare Notification Content\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Prepare Notification Content\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""chain_response:(\'High Medical History\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Medical History\', \'Reject Claim\')"": [1, 0, -1, 0, 0, -1, 1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Medical History\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Medical History\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, -1, -1, -1], ""chain_response:(\'High Medical History\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Medical History\', \'Register\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Medical History\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Medical History\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Medical History\', \'Create Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Medical History\', \'Contact Hospital\')"": [-1, 0, 1, 0, 0, -1, -1, 0, 0, -1, 0, 1, 1, 1], ""chain_response:(\'High Medical History\', \'Prepare Notification Content\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'High Medical History\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_response:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by e-mail\', \'Reject Claim\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by e-mail\', \'Accept Claim\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by e-mail\', \'Low Medical History\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by e-mail\', \'Register\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_response:(\'Send Notification by e-mail\', \'High Medical History\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""chain_succession:(\'Low Insurance Check\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, 0, 0, -1], ""chain_succession:(\'Low Insurance Check\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0], ""chain_succession:(\'Low Insurance Check\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Low Insurance Check\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Low Insurance Check\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Low Insurance Check\', \'Send Questionnaire\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Low Insurance Check\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Low Insurance Check\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Low Insurance Check\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Low Insurance Check\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Reject Claim\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""chain_succession:(\'Reject Claim\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Reject Claim\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1], ""chain_succession:(\'Reject Claim\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""chain_succession:(\'Reject Claim\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Reject Claim\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_succession:(\'Reject Claim\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""chain_succession:(\'Reject Claim\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1], ""chain_succession:(\'Reject Claim\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1], ""chain_succession:(\'Reject Claim\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1], ""chain_succession:(\'Reject Claim\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1], ""chain_succession:(\'Reject Claim\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_succession:(\'Accept Claim\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, 0], ""chain_succession:(\'Accept Claim\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Accept Claim\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""chain_succession:(\'Accept Claim\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, 0], ""chain_succession:(\'Accept Claim\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Accept Claim\', \'Send Questionnaire\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, 0], ""chain_succession:(\'Accept Claim\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_succession:(\'Accept Claim\', \'Create Questionnaire\')"": [-1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""chain_succession:(\'Accept Claim\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""chain_succession:(\'Accept Claim\', \'Prepare Notification Content\')"": [-1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1], ""chain_succession:(\'Accept Claim\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""chain_succession:(\'Accept Claim\', \'Send Notification by e-mail\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, 0, -1, -1, 0], ""chain_succession:(\'High Insurance Check\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'High Insurance Check\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, 1, -1, -1, 0, -1, -1, -1, -1, -1], ""chain_succession:(\'High Insurance Check\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, 1, -1, -1], ""chain_succession:(\'High Insurance Check\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'High Insurance Check\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'High Insurance Check\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""chain_succession:(\'High Insurance Check\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""chain_succession:(\'High Insurance Check\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'High Insurance Check\', \'Contact Hospital\')"": [1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, -1, -1, -1], ""chain_succession:(\'High Insurance Check\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'High Insurance Check\', \'High Medical History\')"": [-1, 0, 1, 0, 0, -1, -1, 0, 0, -1, 0, -1, 1, 1], ""chain_succession:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""chain_succession:(\'Low Medical History\', \'Low Insurance Check\')"": [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""chain_succession:(\'Low Medical History\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""chain_succession:(\'Low Medical History\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, 0], ""chain_succession:(\'Low Medical History\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Low Medical History\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Low Medical History\', \'Send Questionnaire\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Low Medical History\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Low Medical History\', \'Create Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Low Medical History\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Low Medical History\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Low Medical History\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Low Medical History\', \'Send Notification by e-mail\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Register\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Register\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Register\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Register\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1], ""chain_succession:(\'Register\', \'Low Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""chain_succession:(\'Register\', \'Send Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Register\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Register\', \'Create Questionnaire\')"": [1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1], ""chain_succession:(\'Register\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Register\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Register\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Register\', \'Send Notification by e-mail\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Send Questionnaire\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Send Questionnaire\', \'Reject Claim\')"": [-1, -1, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_succession:(\'Send Questionnaire\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, 0], ""chain_succession:(\'Send Questionnaire\', \'High Insurance Check\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""chain_succession:(\'Send Questionnaire\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Send Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Send Questionnaire\', \'Send Notification by Post\')"": [0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Send Questionnaire\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Send Questionnaire\', \'Contact Hospital\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""chain_succession:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Send Questionnaire\', \'High Medical History\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""chain_succession:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [0, -1, 0, -1, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0], ""chain_succession:(\'Send Notification by Post\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Send Notification by Post\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""chain_succession:(\'Send Notification by Post\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""chain_succession:(\'Send Notification by Post\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""chain_succession:(\'Send Notification by Post\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Send Notification by Post\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Send Notification by Post\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Send Notification by Post\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Send Notification by Post\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""chain_succession:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Send Notification by Post\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""chain_succession:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0], ""chain_succession:(\'Create Questionnaire\', \'Low Insurance Check\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Create Questionnaire\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Create Questionnaire\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Create Questionnaire\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Create Questionnaire\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""chain_succession:(\'Create Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Create Questionnaire\', \'Send Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Create Questionnaire\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Create Questionnaire\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [-1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1], ""chain_succession:(\'Create Questionnaire\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1], ""chain_succession:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [-1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Contact Hospital\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Contact Hospital\', \'Reject Claim\')"": [-1, 0, 1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, 1], ""chain_succession:(\'Contact Hospital\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, -1, 1, -1], ""chain_succession:(\'Contact Hospital\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, 1, 0, 0, -1, 0, 1, -1, -1], ""chain_succession:(\'Contact Hospital\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Contact Hospital\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Contact Hospital\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""chain_succession:(\'Contact Hospital\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""chain_succession:(\'Contact Hospital\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Contact Hospital\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Contact Hospital\', \'High Medical History\')"": [1, 0, -1, 0, 0, 1, -1, 0, 0, -1, 0, -1, -1, -1], ""chain_succession:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""chain_succession:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Prepare Notification Content\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Prepare Notification Content\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Prepare Notification Content\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Prepare Notification Content\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Prepare Notification Content\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""chain_succession:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""chain_succession:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], ""chain_succession:(\'Prepare Notification Content\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Prepare Notification Content\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'High Medical History\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'High Medical History\', \'Reject Claim\')"": [1, 0, -1, 0, 0, -1, 1, -1, 0, -1, -1, -1, -1, -1], ""chain_succession:(\'High Medical History\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""chain_succession:(\'High Medical History\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, -1, -1, -1], ""chain_succession:(\'High Medical History\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'High Medical History\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'High Medical History\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""chain_succession:(\'High Medical History\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""chain_succession:(\'High Medical History\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'High Medical History\', \'Contact Hospital\')"": [-1, 0, 1, 0, 0, -1, -1, 0, 0, -1, 0, 1, 1, 1], ""chain_succession:(\'High Medical History\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'High Medical History\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""chain_succession:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Send Notification by e-mail\', \'Reject Claim\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""chain_succession:(\'Send Notification by e-mail\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, 0, -1, -1, 0], ""chain_succession:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""chain_succession:(\'Send Notification by e-mail\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""chain_succession:(\'Send Notification by e-mail\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [0, -1, 0, -1, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0], ""chain_succession:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [0, 0, 0, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0], ""chain_succession:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""chain_succession:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""chain_succession:(\'Send Notification by e-mail\', \'High Medical History\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""not_chain_succession:(\'Low Insurance Check\', \'Reject Claim\')"": [0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0], ""not_chain_succession:(\'Low Insurance Check\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Low Insurance Check\', \'High Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Low Insurance Check\', \'Low Medical History\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Low Insurance Check\', \'Register\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Low Insurance Check\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Low Insurance Check\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Low Insurance Check\', \'Create Questionnaire\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Low Insurance Check\', \'Contact Hospital\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Low Insurance Check\', \'High Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Reject Claim\', \'Low Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Reject Claim\', \'Accept Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Reject Claim\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], ""not_chain_succession:(\'Reject Claim\', \'Low Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Reject Claim\', \'Register\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""not_chain_succession:(\'Reject Claim\', \'Send Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Reject Claim\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Reject Claim\', \'Create Questionnaire\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, -1], ""not_chain_succession:(\'Reject Claim\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], ""not_chain_succession:(\'Reject Claim\', \'Prepare Notification Content\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, 1], ""not_chain_succession:(\'Reject Claim\', \'High Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], ""not_chain_succession:(\'Reject Claim\', \'Send Notification by e-mail\')"": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Accept Claim\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Accept Claim\', \'Reject Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Accept Claim\', \'High Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0], ""not_chain_succession:(\'Accept Claim\', \'Low Medical History\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Accept Claim\', \'Register\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""not_chain_succession:(\'Accept Claim\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Accept Claim\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Accept Claim\', \'Create Questionnaire\')"": [0, 1, 0, -1, 1, 0, 0, 0, -1, 1, 0, 1, 1, 0], ""not_chain_succession:(\'Accept Claim\', \'Contact Hospital\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0], ""not_chain_succession:(\'Accept Claim\', \'Prepare Notification Content\')"": [0, -1, 0, 1, -1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""not_chain_succession:(\'Accept Claim\', \'High Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0], ""not_chain_succession:(\'Accept Claim\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'High Insurance Check\', \'Low Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'High Insurance Check\', \'Reject Claim\')"": [1, 0, 1, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 1], ""not_chain_succession:(\'High Insurance Check\', \'Accept Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 1, 0], ""not_chain_succession:(\'High Insurance Check\', \'Low Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'High Insurance Check\', \'Register\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'High Insurance Check\', \'Send Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'High Insurance Check\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'High Insurance Check\', \'Create Questionnaire\')"": [1, 0, 1, 0, 0, 1, -1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'High Insurance Check\', \'Contact Hospital\')"": [-1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, 1, 1, 1], ""not_chain_succession:(\'High Insurance Check\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'High Insurance Check\', \'High Medical History\')"": [1, 0, -1, 0, 0, 1, 1, 0, 0, 1, 0, 1, -1, -1], ""not_chain_succession:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Low Medical History\', \'Low Insurance Check\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""not_chain_succession:(\'Low Medical History\', \'Reject Claim\')"": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Low Medical History\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Low Medical History\', \'High Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Low Medical History\', \'Register\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Low Medical History\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Low Medical History\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Low Medical History\', \'Create Questionnaire\')"": [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Low Medical History\', \'Contact Hospital\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Low Medical History\', \'Prepare Notification Content\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Low Medical History\', \'High Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Low Medical History\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Register\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Register\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""not_chain_succession:(\'Register\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""not_chain_succession:(\'Register\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, -1, -1], ""not_chain_succession:(\'Register\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Register\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Register\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Register\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, 1, 1], ""not_chain_succession:(\'Register\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'Register\', \'Prepare Notification Content\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_chain_succession:(\'Register\', \'High Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'Register\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Questionnaire\', \'Low Insurance Check\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Send Questionnaire\', \'Reject Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Send Questionnaire\', \'Accept Claim\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Questionnaire\', \'High Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Questionnaire\', \'Low Medical History\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Send Questionnaire\', \'Register\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Send Questionnaire\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Questionnaire\', \'Create Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Send Questionnaire\', \'Contact Hospital\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Send Questionnaire\', \'High Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by Post\', \'Low Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by Post\', \'Reject Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by Post\', \'Accept Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by Post\', \'High Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by Post\', \'Low Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by Post\', \'Register\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by Post\', \'Send Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by Post\', \'Create Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by Post\', \'Contact Hospital\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by Post\', \'High Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Create Questionnaire\', \'Low Insurance Check\')"": [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Create Questionnaire\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""not_chain_succession:(\'Create Questionnaire\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""not_chain_succession:(\'Create Questionnaire\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'Create Questionnaire\', \'Low Medical History\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""not_chain_succession:(\'Create Questionnaire\', \'Register\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_chain_succession:(\'Create Questionnaire\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Create Questionnaire\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Create Questionnaire\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1], ""not_chain_succession:(\'Create Questionnaire\', \'High Medical History\')"": [1, 0, 1, 0, 0, 1, -1, 0, 0, -1, 0, -1, 1, 1], ""not_chain_succession:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Contact Hospital\', \'Low Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Contact Hospital\', \'Reject Claim\')"": [1, 0, -1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, -1], ""not_chain_succession:(\'Contact Hospital\', \'Accept Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 1, -1, 0], ""not_chain_succession:(\'Contact Hospital\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, 1, -1, 0, 0, 1, 0, -1, 1, 1], ""not_chain_succession:(\'Contact Hospital\', \'Low Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Contact Hospital\', \'Register\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'Contact Hospital\', \'Send Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Contact Hospital\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Contact Hospital\', \'Create Questionnaire\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'Contact Hospital\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'Contact Hospital\', \'High Medical History\')"": [-1, 0, 1, 0, 0, -1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Prepare Notification Content\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""not_chain_succession:(\'Prepare Notification Content\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""not_chain_succession:(\'Prepare Notification Content\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'Prepare Notification Content\', \'Low Medical History\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_chain_succession:(\'Prepare Notification Content\', \'Register\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_chain_succession:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""not_chain_succession:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1], ""not_chain_succession:(\'Prepare Notification Content\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'Prepare Notification Content\', \'High Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'High Medical History\', \'Low Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'High Medical History\', \'Reject Claim\')"": [-1, 0, 1, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 1], ""not_chain_succession:(\'High Medical History\', \'Accept Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0], ""not_chain_succession:(\'High Medical History\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, -1, 1, 0, 0, -1, 0, 1, 1, 1], ""not_chain_succession:(\'High Medical History\', \'Low Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'High Medical History\', \'Register\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'High Medical History\', \'Send Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'High Medical History\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'High Medical History\', \'Create Questionnaire\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'High Medical History\', \'Contact Hospital\')"": [1, 0, -1, 0, 0, 1, 1, 0, 0, 1, 0, -1, -1, -1], ""not_chain_succession:(\'High Medical History\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_chain_succession:(\'High Medical History\', \'Send Notification by e-mail\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by e-mail\', \'Reject Claim\')"": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by e-mail\', \'Accept Claim\')"": [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by e-mail\', \'Low Medical History\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by e-mail\', \'Register\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_chain_succession:(\'Send Notification by e-mail\', \'High Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ""not_coexistence:(\'Low Insurance Check\', \'Reject Claim\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, 0, -1, 0, 0, 1], ""not_coexistence:(\'Low Insurance Check\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 1, 1, 1, 1, 0], ""not_coexistence:(\'Low Insurance Check\', \'High Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Low Insurance Check\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""not_coexistence:(\'Low Insurance Check\', \'Register\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Low Insurance Check\', \'Send Questionnaire\')"": [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, -1, 0, 0, 0], ""not_coexistence:(\'Low Insurance Check\', \'Send Notification by Post\')"": [0, 1, 0, 1, 1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""not_coexistence:(\'Low Insurance Check\', \'Create Questionnaire\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Low Insurance Check\', \'Contact Hospital\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Low Insurance Check\', \'High Medical History\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [0, 1, 0, -1, -1, 0, 0, -1, 1, 0, 1, 0, 0, 0], ""not_coexistence:(\'Reject Claim\', \'Low Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, 0, -1, 0, 0, 1], ""not_coexistence:(\'Reject Claim\', \'Accept Claim\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Reject Claim\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 1, 1, 1, 1, -1], ""not_coexistence:(\'Reject Claim\', \'Low Medical History\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, 0, -1, 0, 0, 1], ""not_coexistence:(\'Reject Claim\', \'Register\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""not_coexistence:(\'Reject Claim\', \'Send Questionnaire\')"": [1, 1, 1, 0, 0, 1, 1, 1, 0, 0, -1, 0, 0, 1], ""not_coexistence:(\'Reject Claim\', \'Send Notification by Post\')"": [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1], ""not_coexistence:(\'Reject Claim\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""not_coexistence:(\'Reject Claim\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 1, 1, 1, 1, -1], ""not_coexistence:(\'Reject Claim\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""not_coexistence:(\'Reject Claim\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 1, 1, 1, 1, -1], ""not_coexistence:(\'Reject Claim\', \'Send Notification by e-mail\')"": [1, 0, 1, 1, 1, 1, 1, -1, 0, 0, 1, 0, 0, 1], ""not_coexistence:(\'Accept Claim\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 1, 1, 1, 1, 0], ""not_coexistence:(\'Accept Claim\', \'Reject Claim\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Accept Claim\', \'High Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, 0, 1, -1, 0, -1, -1, 1], ""not_coexistence:(\'Accept Claim\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 1, 1, 1, 1, 0], ""not_coexistence:(\'Accept Claim\', \'Register\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""not_coexistence:(\'Accept Claim\', \'Send Questionnaire\')"": [0, -1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0], ""not_coexistence:(\'Accept Claim\', \'Send Notification by Post\')"": [0, 1, 0, 1, 1, 0, 0, 0, -1, 1, 0, 1, 1, 0], ""not_coexistence:(\'Accept Claim\', \'Create Questionnaire\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""not_coexistence:(\'Accept Claim\', \'Contact Hospital\')"": [1, 1, 1, 1, 1, 1, 1, 0, 1, -1, 0, -1, -1, 1], ""not_coexistence:(\'Accept Claim\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""not_coexistence:(\'Accept Claim\', \'High Medical History\')"": [1, 1, 1, 1, 1, 1, 1, 0, 1, -1, 0, -1, -1, 1], ""not_coexistence:(\'Accept Claim\', \'Send Notification by e-mail\')"": [0, 1, 0, -1, -1, 0, 0, 1, 1, 1, 0, 1, 1, 0], ""not_coexistence:(\'High Insurance Check\', \'Low Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'High Insurance Check\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 1, 1, 1, 1, -1], ""not_coexistence:(\'High Insurance Check\', \'Accept Claim\')"": [1, 1, 1, 1, 1, 1, 1, 0, 1, -1, 0, -1, -1, 1], ""not_coexistence:(\'High Insurance Check\', \'Low Medical History\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'High Insurance Check\', \'Register\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'High Insurance Check\', \'Send Questionnaire\')"": [1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], ""not_coexistence:(\'High Insurance Check\', \'Send Notification by Post\')"": [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], ""not_coexistence:(\'High Insurance Check\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'High Insurance Check\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""not_coexistence:(\'High Insurance Check\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'High Insurance Check\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""not_coexistence:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], ""not_coexistence:(\'Low Medical History\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""not_coexistence:(\'Low Medical History\', \'Reject Claim\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, 0, -1, 0, 0, 1], ""not_coexistence:(\'Low Medical History\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 1, 1, 1, 1, 0], ""not_coexistence:(\'Low Medical History\', \'High Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Low Medical History\', \'Register\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Low Medical History\', \'Send Questionnaire\')"": [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, -1, 0, 0, 0], ""not_coexistence:(\'Low Medical History\', \'Send Notification by Post\')"": [0, 1, 0, 1, 1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""not_coexistence:(\'Low Medical History\', \'Create Questionnaire\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Low Medical History\', \'Contact Hospital\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Low Medical History\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Low Medical History\', \'High Medical History\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Low Medical History\', \'Send Notification by e-mail\')"": [0, 1, 0, -1, -1, 0, 0, -1, 1, 0, 1, 0, 0, 0], ""not_coexistence:(\'Register\', \'Low Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Register\', \'Reject Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""not_coexistence:(\'Register\', \'Accept Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""not_coexistence:(\'Register\', \'High Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'Register\', \'Low Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Register\', \'Send Questionnaire\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Register\', \'Send Notification by Post\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Register\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""not_coexistence:(\'Register\', \'Contact Hospital\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'Register\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""not_coexistence:(\'Register\', \'High Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'Register\', \'Send Notification by e-mail\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Send Questionnaire\', \'Low Insurance Check\')"": [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, -1, 0, 0, 0], ""not_coexistence:(\'Send Questionnaire\', \'Reject Claim\')"": [1, 1, 1, 0, 0, 1, 1, 1, 0, 0, -1, 0, 0, 1], ""not_coexistence:(\'Send Questionnaire\', \'Accept Claim\')"": [0, -1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0], ""not_coexistence:(\'Send Questionnaire\', \'High Insurance Check\')"": [1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], ""not_coexistence:(\'Send Questionnaire\', \'Low Medical History\')"": [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, -1, 0, 0, 0], ""not_coexistence:(\'Send Questionnaire\', \'Register\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Send Questionnaire\', \'Send Notification by Post\')"": [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0], ""not_coexistence:(\'Send Questionnaire\', \'Create Questionnaire\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Send Questionnaire\', \'Contact Hospital\')"": [1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], ""not_coexistence:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Send Questionnaire\', \'High Medical History\')"": [1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], ""not_coexistence:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0], ""not_coexistence:(\'Send Notification by Post\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""not_coexistence:(\'Send Notification by Post\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1], ""not_coexistence:(\'Send Notification by Post\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, 0, -1, 1, 0, 1, 1, 0], ""not_coexistence:(\'Send Notification by Post\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], ""not_coexistence:(\'Send Notification by Post\', \'Low Medical History\')"": [0, 1, 0, 1, 1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""not_coexistence:(\'Send Notification by Post\', \'Register\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Send Notification by Post\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0], ""not_coexistence:(\'Send Notification by Post\', \'Create Questionnaire\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Send Notification by Post\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], ""not_coexistence:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Send Notification by Post\', \'High Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], ""not_coexistence:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0], ""not_coexistence:(\'Create Questionnaire\', \'Low Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Create Questionnaire\', \'Reject Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""not_coexistence:(\'Create Questionnaire\', \'Accept Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""not_coexistence:(\'Create Questionnaire\', \'High Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'Create Questionnaire\', \'Low Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Create Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""not_coexistence:(\'Create Questionnaire\', \'Send Questionnaire\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Create Questionnaire\', \'Send Notification by Post\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Create Questionnaire\', \'Contact Hospital\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""not_coexistence:(\'Create Questionnaire\', \'High Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Contact Hospital\', \'Low Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Contact Hospital\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 1, 1, 1, 1, -1], ""not_coexistence:(\'Contact Hospital\', \'Accept Claim\')"": [1, 1, 1, 1, 1, 1, 1, 0, 1, -1, 0, -1, -1, 1], ""not_coexistence:(\'Contact Hospital\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""not_coexistence:(\'Contact Hospital\', \'Low Medical History\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Contact Hospital\', \'Register\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'Contact Hospital\', \'Send Questionnaire\')"": [1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], ""not_coexistence:(\'Contact Hospital\', \'Send Notification by Post\')"": [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], ""not_coexistence:(\'Contact Hospital\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'Contact Hospital\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'Contact Hospital\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""not_coexistence:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], ""not_coexistence:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Prepare Notification Content\', \'Reject Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""not_coexistence:(\'Prepare Notification Content\', \'Accept Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""not_coexistence:(\'Prepare Notification Content\', \'High Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'Prepare Notification Content\', \'Low Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Prepare Notification Content\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""not_coexistence:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""not_coexistence:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""not_coexistence:(\'Prepare Notification Content\', \'Contact Hospital\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'Prepare Notification Content\', \'High Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'High Medical History\', \'Low Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'High Medical History\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 1, 1, 1, 1, -1], ""not_coexistence:(\'High Medical History\', \'Accept Claim\')"": [1, 1, 1, 1, 1, 1, 1, 0, 1, -1, 0, -1, -1, 1], ""not_coexistence:(\'High Medical History\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""not_coexistence:(\'High Medical History\', \'Low Medical History\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'High Medical History\', \'Register\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'High Medical History\', \'Send Questionnaire\')"": [1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], ""not_coexistence:(\'High Medical History\', \'Send Notification by Post\')"": [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], ""not_coexistence:(\'High Medical History\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'High Medical History\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""not_coexistence:(\'High Medical History\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_coexistence:(\'High Medical History\', \'Send Notification by e-mail\')"": [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], ""not_coexistence:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [0, 1, 0, -1, -1, 0, 0, -1, 1, 0, 1, 0, 0, 0], ""not_coexistence:(\'Send Notification by e-mail\', \'Reject Claim\')"": [1, 0, 1, 1, 1, 1, 1, -1, 0, 0, 1, 0, 0, 1], ""not_coexistence:(\'Send Notification by e-mail\', \'Accept Claim\')"": [0, 1, 0, -1, -1, 0, 0, 1, 1, 1, 0, 1, 1, 0], ""not_coexistence:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], ""not_coexistence:(\'Send Notification by e-mail\', \'Low Medical History\')"": [0, 1, 0, -1, -1, 0, 0, -1, 1, 0, 1, 0, 0, 0], ""not_coexistence:(\'Send Notification by e-mail\', \'Register\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0], ""not_coexistence:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0], ""not_coexistence:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], ""not_coexistence:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""not_coexistence:(\'Send Notification by e-mail\', \'High Medical History\')"": [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], ""not_succession:(\'Low Insurance Check\', \'Reject Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""not_succession:(\'Low Insurance Check\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Insurance Check\', \'High Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Insurance Check\', \'Low Medical History\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Insurance Check\', \'Register\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Insurance Check\', \'Send Questionnaire\')"": [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, -1, 0, 0, 0], ""not_succession:(\'Low Insurance Check\', \'Send Notification by Post\')"": [0, 1, 0, 1, 1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Insurance Check\', \'Create Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Insurance Check\', \'Contact Hospital\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""not_succession:(\'Low Insurance Check\', \'High Medical History\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [0, 1, 0, -1, -1, 0, 0, -1, 1, 0, 1, 0, 0, 0], ""not_succession:(\'Reject Claim\', \'Low Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""not_succession:(\'Reject Claim\', \'Accept Claim\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""not_succession:(\'Reject Claim\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""not_succession:(\'Reject Claim\', \'Low Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""not_succession:(\'Reject Claim\', \'Register\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""not_succession:(\'Reject Claim\', \'Send Questionnaire\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, -1, 0, 0, 1], ""not_succession:(\'Reject Claim\', \'Send Notification by Post\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""not_succession:(\'Reject Claim\', \'Create Questionnaire\')"": [1, 0, 1, 0, 0, -1, 1, 1, 0, 0, 1, 0, 0, -1], ""not_succession:(\'Reject Claim\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""not_succession:(\'Reject Claim\', \'Prepare Notification Content\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""not_succession:(\'Reject Claim\', \'High Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""not_succession:(\'Reject Claim\', \'Send Notification by e-mail\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, 1, 0, 0, 1], ""not_succession:(\'Accept Claim\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""not_succession:(\'Accept Claim\', \'Reject Claim\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""not_succession:(\'Accept Claim\', \'High Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""not_succession:(\'Accept Claim\', \'Low Medical History\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""not_succession:(\'Accept Claim\', \'Register\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""not_succession:(\'Accept Claim\', \'Send Questionnaire\')"": [0, -1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""not_succession:(\'Accept Claim\', \'Send Notification by Post\')"": [0, 1, 0, 1, 1, 0, 0, 0, -1, 1, 0, 1, 1, 0], ""not_succession:(\'Accept Claim\', \'Create Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, -1, 0], ""not_succession:(\'Accept Claim\', \'Contact Hospital\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""not_succession:(\'Accept Claim\', \'Prepare Notification Content\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""not_succession:(\'Accept Claim\', \'High Medical History\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""not_succession:(\'Accept Claim\', \'Send Notification by e-mail\')"": [0, 1, 0, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""not_succession:(\'High Insurance Check\', \'Low Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'High Insurance Check\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], ""not_succession:(\'High Insurance Check\', \'Accept Claim\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], ""not_succession:(\'High Insurance Check\', \'Low Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'High Insurance Check\', \'Register\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'High Insurance Check\', \'Send Questionnaire\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'High Insurance Check\', \'Send Notification by Post\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'High Insurance Check\', \'Create Questionnaire\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, -1, -1], ""not_succession:(\'High Insurance Check\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, 1, -1, -1], ""not_succession:(\'High Insurance Check\', \'Prepare Notification Content\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""not_succession:(\'High Insurance Check\', \'High Medical History\')"": [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, 1, -1, -1], ""not_succession:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'Low Medical History\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""not_succession:(\'Low Medical History\', \'Reject Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""not_succession:(\'Low Medical History\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Medical History\', \'High Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Medical History\', \'Register\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Medical History\', \'Send Questionnaire\')"": [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, -1, 0, 0, 0], ""not_succession:(\'Low Medical History\', \'Send Notification by Post\')"": [0, 1, 0, 1, 1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Medical History\', \'Create Questionnaire\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Medical History\', \'Contact Hospital\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Medical History\', \'Prepare Notification Content\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""not_succession:(\'Low Medical History\', \'High Medical History\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""not_succession:(\'Low Medical History\', \'Send Notification by e-mail\')"": [0, 1, 0, -1, -1, 0, 0, -1, 1, 0, 1, 0, 0, 0], ""not_succession:(\'Register\', \'Low Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""not_succession:(\'Register\', \'Reject Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""not_succession:(\'Register\', \'Accept Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""not_succession:(\'Register\', \'High Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_succession:(\'Register\', \'Low Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""not_succession:(\'Register\', \'Send Questionnaire\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""not_succession:(\'Register\', \'Send Notification by Post\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""not_succession:(\'Register\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""not_succession:(\'Register\', \'Contact Hospital\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_succession:(\'Register\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""not_succession:(\'Register\', \'High Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""not_succession:(\'Register\', \'Send Notification by e-mail\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""not_succession:(\'Send Questionnaire\', \'Low Insurance Check\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_succession:(\'Send Questionnaire\', \'Reject Claim\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_succession:(\'Send Questionnaire\', \'Accept Claim\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_succession:(\'Send Questionnaire\', \'High Insurance Check\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_succession:(\'Send Questionnaire\', \'Low Medical History\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_succession:(\'Send Questionnaire\', \'Register\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_succession:(\'Send Questionnaire\', \'Send Notification by Post\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_succession:(\'Send Questionnaire\', \'Create Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_succession:(\'Send Questionnaire\', \'Contact Hospital\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_succession:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_succession:(\'Send Questionnaire\', \'High Medical History\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_succession:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""not_succession:(\'Send Notification by Post\', \'Low Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by Post\', \'Reject Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by Post\', \'Accept Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by Post\', \'High Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by Post\', \'Low Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by Post\', \'Register\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by Post\', \'Send Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by Post\', \'Create Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by Post\', \'Contact Hospital\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by Post\', \'High Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""not_succession:(\'Create Questionnaire\', \'Low Insurance Check\')"": [1, -1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, 1], ""not_succession:(\'Create Questionnaire\', \'Reject Claim\')"": [-1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1], ""not_succession:(\'Create Questionnaire\', \'Accept Claim\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1], ""not_succession:(\'Create Questionnaire\', \'High Insurance Check\')"": [-1, 1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1], ""not_succession:(\'Create Questionnaire\', \'Low Medical History\')"": [1, 1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, 1], ""not_succession:(\'Create Questionnaire\', \'Register\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_succession:(\'Create Questionnaire\', \'Send Questionnaire\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""not_succession:(\'Create Questionnaire\', \'Send Notification by Post\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""not_succession:(\'Create Questionnaire\', \'Contact Hospital\')"": [-1, 1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1], ""not_succession:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], ""not_succession:(\'Create Questionnaire\', \'High Medical History\')"": [-1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1], ""not_succession:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""not_succession:(\'Contact Hospital\', \'Low Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'Contact Hospital\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], ""not_succession:(\'Contact Hospital\', \'Accept Claim\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], ""not_succession:(\'Contact Hospital\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, -1, 1, 1], ""not_succession:(\'Contact Hospital\', \'Low Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'Contact Hospital\', \'Register\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'Contact Hospital\', \'Send Questionnaire\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'Contact Hospital\', \'Send Notification by Post\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'Contact Hospital\', \'Create Questionnaire\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, -1, -1], ""not_succession:(\'Contact Hospital\', \'Prepare Notification Content\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""not_succession:(\'Contact Hospital\', \'High Medical History\')"": [-1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_succession:(\'Prepare Notification Content\', \'Reject Claim\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_succession:(\'Prepare Notification Content\', \'Accept Claim\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_succession:(\'Prepare Notification Content\', \'High Insurance Check\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_succession:(\'Prepare Notification Content\', \'Low Medical History\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_succession:(\'Prepare Notification Content\', \'Register\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_succession:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], ""not_succession:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], ""not_succession:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1], ""not_succession:(\'Prepare Notification Content\', \'Contact Hospital\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_succession:(\'Prepare Notification Content\', \'High Medical History\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""not_succession:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], ""not_succession:(\'High Medical History\', \'Low Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'High Medical History\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], ""not_succession:(\'High Medical History\', \'Accept Claim\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], ""not_succession:(\'High Medical History\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, -1, 1, 0, 0, -1, 0, -1, 1, 1], ""not_succession:(\'High Medical History\', \'Low Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'High Medical History\', \'Register\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'High Medical History\', \'Send Questionnaire\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'High Medical History\', \'Send Notification by Post\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'High Medical History\', \'Create Questionnaire\')"": [1, 0, 1, 0, 0, -1, 1, 0, 0, 1, 0, 1, -1, -1], ""not_succession:(\'High Medical History\', \'Contact Hospital\')"": [1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, -1], ""not_succession:(\'High Medical History\', \'Prepare Notification Content\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""not_succession:(\'High Medical History\', \'Send Notification by e-mail\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""not_succession:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by e-mail\', \'Reject Claim\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by e-mail\', \'Accept Claim\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by e-mail\', \'Low Medical History\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by e-mail\', \'Register\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""not_succession:(\'Send Notification by e-mail\', \'High Medical History\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""responded_existence:(\'Low Insurance Check\', \'Reject Claim\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""responded_existence:(\'Low Insurance Check\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""responded_existence:(\'Low Insurance Check\', \'High Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""responded_existence:(\'Low Insurance Check\', \'Low Medical History\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""responded_existence:(\'Low Insurance Check\', \'Register\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""responded_existence:(\'Low Insurance Check\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], ""responded_existence:(\'Low Insurance Check\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""responded_existence:(\'Low Insurance Check\', \'Create Questionnaire\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""responded_existence:(\'Low Insurance Check\', \'Contact Hospital\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""responded_existence:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""responded_existence:(\'Low Insurance Check\', \'High Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""responded_existence:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], ""responded_existence:(\'Reject Claim\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, 1, 0, 0, -1], ""responded_existence:(\'Reject Claim\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""responded_existence:(\'Reject Claim\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, -1, 0, 0, 1], ""responded_existence:(\'Reject Claim\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, 1, 0, 0, -1], ""responded_existence:(\'Reject Claim\', \'Register\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""responded_existence:(\'Reject Claim\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, 1, 0, 0, -1], ""responded_existence:(\'Reject Claim\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""responded_existence:(\'Reject Claim\', \'Create Questionnaire\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""responded_existence:(\'Reject Claim\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, -1, 0, 0, 1], ""responded_existence:(\'Reject Claim\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""responded_existence:(\'Reject Claim\', \'High Medical History\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, -1, 0, 0, 1], ""responded_existence:(\'Reject Claim\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, -1, 0, 0, -1], ""responded_existence:(\'Accept Claim\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""responded_existence:(\'Accept Claim\', \'Reject Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""responded_existence:(\'Accept Claim\', \'High Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, 1, 0], ""responded_existence:(\'Accept Claim\', \'Low Medical History\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""responded_existence:(\'Accept Claim\', \'Register\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""responded_existence:(\'Accept Claim\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""responded_existence:(\'Accept Claim\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""responded_existence:(\'Accept Claim\', \'Create Questionnaire\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""responded_existence:(\'Accept Claim\', \'Contact Hospital\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, 1, 0], ""responded_existence:(\'Accept Claim\', \'Prepare Notification Content\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""responded_existence:(\'Accept Claim\', \'High Medical History\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, 1, 0], ""responded_existence:(\'Accept Claim\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""responded_existence:(\'High Insurance Check\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'High Insurance Check\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], ""responded_existence:(\'High Insurance Check\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], ""responded_existence:(\'High Insurance Check\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'High Insurance Check\', \'Register\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'High Insurance Check\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'High Insurance Check\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'High Insurance Check\', \'Create Questionnaire\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'High Insurance Check\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'High Insurance Check\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'High Insurance Check\', \'High Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'Low Medical History\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""responded_existence:(\'Low Medical History\', \'Reject Claim\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""responded_existence:(\'Low Medical History\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""responded_existence:(\'Low Medical History\', \'High Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""responded_existence:(\'Low Medical History\', \'Register\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""responded_existence:(\'Low Medical History\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], ""responded_existence:(\'Low Medical History\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""responded_existence:(\'Low Medical History\', \'Create Questionnaire\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""responded_existence:(\'Low Medical History\', \'Contact Hospital\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""responded_existence:(\'Low Medical History\', \'Prepare Notification Content\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""responded_existence:(\'Low Medical History\', \'High Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""responded_existence:(\'Low Medical History\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], ""responded_existence:(\'Register\', \'Low Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""responded_existence:(\'Register\', \'Reject Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""responded_existence:(\'Register\', \'Accept Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""responded_existence:(\'Register\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""responded_existence:(\'Register\', \'Low Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""responded_existence:(\'Register\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""responded_existence:(\'Register\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""responded_existence:(\'Register\', \'Create Questionnaire\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""responded_existence:(\'Register\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""responded_existence:(\'Register\', \'Prepare Notification Content\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""responded_existence:(\'Register\', \'High Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""responded_existence:(\'Register\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""responded_existence:(\'Send Questionnaire\', \'Low Insurance Check\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""responded_existence:(\'Send Questionnaire\', \'Reject Claim\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""responded_existence:(\'Send Questionnaire\', \'Accept Claim\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""responded_existence:(\'Send Questionnaire\', \'High Insurance Check\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""responded_existence:(\'Send Questionnaire\', \'Low Medical History\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""responded_existence:(\'Send Questionnaire\', \'Register\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""responded_existence:(\'Send Questionnaire\', \'Send Notification by Post\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""responded_existence:(\'Send Questionnaire\', \'Create Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""responded_existence:(\'Send Questionnaire\', \'Contact Hospital\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""responded_existence:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""responded_existence:(\'Send Questionnaire\', \'High Medical History\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""responded_existence:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""responded_existence:(\'Send Notification by Post\', \'Low Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by Post\', \'Reject Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by Post\', \'Accept Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by Post\', \'High Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by Post\', \'Low Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by Post\', \'Register\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by Post\', \'Send Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by Post\', \'Create Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by Post\', \'Contact Hospital\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by Post\', \'High Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""responded_existence:(\'Create Questionnaire\', \'Low Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""responded_existence:(\'Create Questionnaire\', \'Reject Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""responded_existence:(\'Create Questionnaire\', \'Accept Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""responded_existence:(\'Create Questionnaire\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""responded_existence:(\'Create Questionnaire\', \'Low Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""responded_existence:(\'Create Questionnaire\', \'Register\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""responded_existence:(\'Create Questionnaire\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""responded_existence:(\'Create Questionnaire\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""responded_existence:(\'Create Questionnaire\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""responded_existence:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""responded_existence:(\'Create Questionnaire\', \'High Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""responded_existence:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""responded_existence:(\'Contact Hospital\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'Contact Hospital\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], ""responded_existence:(\'Contact Hospital\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], ""responded_existence:(\'Contact Hospital\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'Contact Hospital\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'Contact Hospital\', \'Register\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'Contact Hospital\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'Contact Hospital\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'Contact Hospital\', \'Create Questionnaire\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'Contact Hospital\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'Contact Hospital\', \'High Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""responded_existence:(\'Prepare Notification Content\', \'Reject Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""responded_existence:(\'Prepare Notification Content\', \'Accept Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""responded_existence:(\'Prepare Notification Content\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""responded_existence:(\'Prepare Notification Content\', \'Low Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""responded_existence:(\'Prepare Notification Content\', \'Register\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""responded_existence:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""responded_existence:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""responded_existence:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""responded_existence:(\'Prepare Notification Content\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""responded_existence:(\'Prepare Notification Content\', \'High Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""responded_existence:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""responded_existence:(\'High Medical History\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'High Medical History\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], ""responded_existence:(\'High Medical History\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], ""responded_existence:(\'High Medical History\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'High Medical History\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'High Medical History\', \'Register\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'High Medical History\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'High Medical History\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'High Medical History\', \'Create Questionnaire\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'High Medical History\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'High Medical History\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""responded_existence:(\'High Medical History\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""responded_existence:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by e-mail\', \'Reject Claim\')"": [0, 0, 0, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by e-mail\', \'Accept Claim\')"": [0, 0, 0, 1, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by e-mail\', \'Low Medical History\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by e-mail\', \'Register\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""responded_existence:(\'Send Notification by e-mail\', \'High Medical History\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""response:(\'Low Insurance Check\', \'Reject Claim\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""response:(\'Low Insurance Check\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""response:(\'Low Insurance Check\', \'High Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""response:(\'Low Insurance Check\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""response:(\'Low Insurance Check\', \'Register\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""response:(\'Low Insurance Check\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], ""response:(\'Low Insurance Check\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""response:(\'Low Insurance Check\', \'Create Questionnaire\')"": [0, -1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""response:(\'Low Insurance Check\', \'Contact Hospital\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""response:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""response:(\'Low Insurance Check\', \'High Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""response:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], ""response:(\'Reject Claim\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""response:(\'Reject Claim\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""response:(\'Reject Claim\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""response:(\'Reject Claim\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""response:(\'Reject Claim\', \'Register\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""response:(\'Reject Claim\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, 1, 0, 0, -1], ""response:(\'Reject Claim\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""response:(\'Reject Claim\', \'Create Questionnaire\')"": [-1, 0, -1, 0, 0, 1, -1, -1, 0, 0, -1, 0, 0, 1], ""response:(\'Reject Claim\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""response:(\'Reject Claim\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""response:(\'Reject Claim\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""response:(\'Reject Claim\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, -1, 0, 0, -1], ""response:(\'Accept Claim\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""response:(\'Accept Claim\', \'Reject Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""response:(\'Accept Claim\', \'High Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""response:(\'Accept Claim\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""response:(\'Accept Claim\', \'Register\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""response:(\'Accept Claim\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""response:(\'Accept Claim\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""response:(\'Accept Claim\', \'Create Questionnaire\')"": [0, -1, 0, 1, 1, 0, 0, 0, 1, -1, 0, -1, 1, 0], ""response:(\'Accept Claim\', \'Contact Hospital\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""response:(\'Accept Claim\', \'Prepare Notification Content\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""response:(\'Accept Claim\', \'High Medical History\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""response:(\'Accept Claim\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""response:(\'High Insurance Check\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'High Insurance Check\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], ""response:(\'High Insurance Check\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], ""response:(\'High Insurance Check\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'High Insurance Check\', \'Register\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'High Insurance Check\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'High Insurance Check\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'High Insurance Check\', \'Create Questionnaire\')"": [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, 1, 1], ""response:(\'High Insurance Check\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, -1, 1, 1], ""response:(\'High Insurance Check\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""response:(\'High Insurance Check\', \'High Medical History\')"": [1, 0, 1, 0, 0, -1, 1, 0, 0, -1, 0, -1, 1, 1], ""response:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'Low Medical History\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""response:(\'Low Medical History\', \'Reject Claim\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""response:(\'Low Medical History\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""response:(\'Low Medical History\', \'High Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""response:(\'Low Medical History\', \'Register\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""response:(\'Low Medical History\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], ""response:(\'Low Medical History\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""response:(\'Low Medical History\', \'Create Questionnaire\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""response:(\'Low Medical History\', \'Contact Hospital\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""response:(\'Low Medical History\', \'Prepare Notification Content\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""response:(\'Low Medical History\', \'High Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""response:(\'Low Medical History\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], ""response:(\'Register\', \'Low Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""response:(\'Register\', \'Reject Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""response:(\'Register\', \'Accept Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""response:(\'Register\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""response:(\'Register\', \'Low Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""response:(\'Register\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""response:(\'Register\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""response:(\'Register\', \'Create Questionnaire\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""response:(\'Register\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""response:(\'Register\', \'Prepare Notification Content\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""response:(\'Register\', \'High Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""response:(\'Register\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""response:(\'Send Questionnaire\', \'Low Insurance Check\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""response:(\'Send Questionnaire\', \'Reject Claim\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""response:(\'Send Questionnaire\', \'Accept Claim\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""response:(\'Send Questionnaire\', \'High Insurance Check\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""response:(\'Send Questionnaire\', \'Low Medical History\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""response:(\'Send Questionnaire\', \'Register\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""response:(\'Send Questionnaire\', \'Send Notification by Post\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""response:(\'Send Questionnaire\', \'Create Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""response:(\'Send Questionnaire\', \'Contact Hospital\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""response:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""response:(\'Send Questionnaire\', \'High Medical History\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""response:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""response:(\'Send Notification by Post\', \'Low Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""response:(\'Send Notification by Post\', \'Reject Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""response:(\'Send Notification by Post\', \'Accept Claim\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""response:(\'Send Notification by Post\', \'High Insurance Check\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""response:(\'Send Notification by Post\', \'Low Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""response:(\'Send Notification by Post\', \'Register\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""response:(\'Send Notification by Post\', \'Send Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""response:(\'Send Notification by Post\', \'Create Questionnaire\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""response:(\'Send Notification by Post\', \'Contact Hospital\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""response:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""response:(\'Send Notification by Post\', \'High Medical History\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""response:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""response:(\'Create Questionnaire\', \'Low Insurance Check\')"": [-1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""response:(\'Create Questionnaire\', \'Reject Claim\')"": [1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1], ""response:(\'Create Questionnaire\', \'Accept Claim\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], ""response:(\'Create Questionnaire\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], ""response:(\'Create Questionnaire\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""response:(\'Create Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""response:(\'Create Questionnaire\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""response:(\'Create Questionnaire\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""response:(\'Create Questionnaire\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], ""response:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1], ""response:(\'Create Questionnaire\', \'High Medical History\')"": [1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1], ""response:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""response:(\'Contact Hospital\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'Contact Hospital\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], ""response:(\'Contact Hospital\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], ""response:(\'Contact Hospital\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, 1, -1, -1], ""response:(\'Contact Hospital\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'Contact Hospital\', \'Register\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'Contact Hospital\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'Contact Hospital\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'Contact Hospital\', \'Create Questionnaire\')"": [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, 1, 1], ""response:(\'Contact Hospital\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""response:(\'Contact Hospital\', \'High Medical History\')"": [1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""response:(\'Prepare Notification Content\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""response:(\'Prepare Notification Content\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""response:(\'Prepare Notification Content\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""response:(\'Prepare Notification Content\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""response:(\'Prepare Notification Content\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""response:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""response:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""response:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], ""response:(\'Prepare Notification Content\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""response:(\'Prepare Notification Content\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""response:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""response:(\'High Medical History\', \'Low Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'High Medical History\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], ""response:(\'High Medical History\', \'Accept Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], ""response:(\'High Medical History\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, 1, -1, -1], ""response:(\'High Medical History\', \'Low Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'High Medical History\', \'Register\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'High Medical History\', \'Send Questionnaire\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'High Medical History\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'High Medical History\', \'Create Questionnaire\')"": [-1, 0, -1, 0, 0, 1, -1, 0, 0, -1, 0, -1, 1, 1], ""response:(\'High Medical History\', \'Contact Hospital\')"": [-1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, 1], ""response:(\'High Medical History\', \'Prepare Notification Content\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""response:(\'High Medical History\', \'Send Notification by e-mail\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""response:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""response:(\'Send Notification by e-mail\', \'Reject Claim\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""response:(\'Send Notification by e-mail\', \'Accept Claim\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""response:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""response:(\'Send Notification by e-mail\', \'Low Medical History\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""response:(\'Send Notification by e-mail\', \'Register\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""response:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""response:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""response:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""response:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""response:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""response:(\'Send Notification by e-mail\', \'High Medical History\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""succession:(\'Low Insurance Check\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, 0, 0, -1], ""succession:(\'Low Insurance Check\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0], ""succession:(\'Low Insurance Check\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Low Insurance Check\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""succession:(\'Low Insurance Check\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Low Insurance Check\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], ""succession:(\'Low Insurance Check\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""succession:(\'Low Insurance Check\', \'Create Questionnaire\')"": [-1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""succession:(\'Low Insurance Check\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""succession:(\'Low Insurance Check\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], ""succession:(\'Reject Claim\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""succession:(\'Reject Claim\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Reject Claim\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1], ""succession:(\'Reject Claim\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""succession:(\'Reject Claim\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Reject Claim\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, -1, 0, 0, 1, 0, 0, -1], ""succession:(\'Reject Claim\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""succession:(\'Reject Claim\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1], ""succession:(\'Reject Claim\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1], ""succession:(\'Reject Claim\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""succession:(\'Reject Claim\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1], ""succession:(\'Reject Claim\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, 1, 0, 0, -1, 0, 0, -1], ""succession:(\'Accept Claim\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, 0], ""succession:(\'Accept Claim\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Accept Claim\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""succession:(\'Accept Claim\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, 0], ""succession:(\'Accept Claim\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Accept Claim\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, 0], ""succession:(\'Accept Claim\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""succession:(\'Accept Claim\', \'Create Questionnaire\')"": [-1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1], ""succession:(\'Accept Claim\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""succession:(\'Accept Claim\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""succession:(\'Accept Claim\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""succession:(\'Accept Claim\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, -1, -1, -1, 0, -1, -1, 0], ""succession:(\'High Insurance Check\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'High Insurance Check\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], ""succession:(\'High Insurance Check\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], ""succession:(\'High Insurance Check\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'High Insurance Check\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'High Insurance Check\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""succession:(\'High Insurance Check\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""succession:(\'High Insurance Check\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1], ""succession:(\'High Insurance Check\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, -1, 1, 1], ""succession:(\'High Insurance Check\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""succession:(\'High Insurance Check\', \'High Medical History\')"": [1, 0, 1, 0, 0, -1, 1, 0, 0, -1, 0, -1, 1, 1], ""succession:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""succession:(\'Low Medical History\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""succession:(\'Low Medical History\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, 0, 0, -1], ""succession:(\'Low Medical History\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0], ""succession:(\'Low Medical History\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Low Medical History\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Low Medical History\', \'Send Questionnaire\')"": [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], ""succession:(\'Low Medical History\', \'Send Notification by Post\')"": [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], ""succession:(\'Low Medical History\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""succession:(\'Low Medical History\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Low Medical History\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""succession:(\'Low Medical History\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Low Medical History\', \'Send Notification by e-mail\')"": [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], ""succession:(\'Register\', \'Low Insurance Check\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""succession:(\'Register\', \'Reject Claim\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""succession:(\'Register\', \'Accept Claim\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""succession:(\'Register\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""succession:(\'Register\', \'Low Medical History\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""succession:(\'Register\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""succession:(\'Register\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""succession:(\'Register\', \'Create Questionnaire\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""succession:(\'Register\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""succession:(\'Register\', \'Prepare Notification Content\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""succession:(\'Register\', \'High Medical History\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""succession:(\'Register\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""succession:(\'Send Questionnaire\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""succession:(\'Send Questionnaire\', \'Reject Claim\')"": [-1, -1, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""succession:(\'Send Questionnaire\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, 0], ""succession:(\'Send Questionnaire\', \'High Insurance Check\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""succession:(\'Send Questionnaire\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""succession:(\'Send Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Send Questionnaire\', \'Send Notification by Post\')"": [0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0], ""succession:(\'Send Questionnaire\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Send Questionnaire\', \'Contact Hospital\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""succession:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Send Questionnaire\', \'High Medical History\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""succession:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [0, -1, 0, -1, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0], ""succession:(\'Send Notification by Post\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""succession:(\'Send Notification by Post\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, -1], ""succession:(\'Send Notification by Post\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""succession:(\'Send Notification by Post\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""succession:(\'Send Notification by Post\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""succession:(\'Send Notification by Post\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Send Notification by Post\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0], ""succession:(\'Send Notification by Post\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Send Notification by Post\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""succession:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Send Notification by Post\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""succession:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0], ""succession:(\'Create Questionnaire\', \'Low Insurance Check\')"": [-1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""succession:(\'Create Questionnaire\', \'Reject Claim\')"": [1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1], ""succession:(\'Create Questionnaire\', \'Accept Claim\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], ""succession:(\'Create Questionnaire\', \'High Insurance Check\')"": [1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], ""succession:(\'Create Questionnaire\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], ""succession:(\'Create Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Create Questionnaire\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""succession:(\'Create Questionnaire\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""succession:(\'Create Questionnaire\', \'Contact Hospital\')"": [1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], ""succession:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1], ""succession:(\'Create Questionnaire\', \'High Medical History\')"": [1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1], ""succession:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""succession:(\'Contact Hospital\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Contact Hospital\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], ""succession:(\'Contact Hospital\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], ""succession:(\'Contact Hospital\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, 1, -1, -1], ""succession:(\'Contact Hospital\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Contact Hospital\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Contact Hospital\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""succession:(\'Contact Hospital\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""succession:(\'Contact Hospital\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1], ""succession:(\'Contact Hospital\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""succession:(\'Contact Hospital\', \'High Medical History\')"": [1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, -1], ""succession:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""succession:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Prepare Notification Content\', \'Reject Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Prepare Notification Content\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Prepare Notification Content\', \'High Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Prepare Notification Content\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Prepare Notification Content\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], ""succession:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""succession:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], ""succession:(\'Prepare Notification Content\', \'Contact Hospital\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Prepare Notification Content\', \'High Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], ""succession:(\'High Medical History\', \'Low Insurance Check\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'High Medical History\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], ""succession:(\'High Medical History\', \'Accept Claim\')"": [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], ""succession:(\'High Medical History\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, 1, -1, -1], ""succession:(\'High Medical History\', \'Low Medical History\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'High Medical History\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'High Medical History\', \'Send Questionnaire\')"": [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], ""succession:(\'High Medical History\', \'Send Notification by Post\')"": [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], ""succession:(\'High Medical History\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1], ""succession:(\'High Medical History\', \'Contact Hospital\')"": [-1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, 1], ""succession:(\'High Medical History\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""succession:(\'High Medical History\', \'Send Notification by e-mail\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""succession:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""succession:(\'Send Notification by e-mail\', \'Reject Claim\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""succession:(\'Send Notification by e-mail\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, 0, -1, -1, 0], ""succession:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""succession:(\'Send Notification by e-mail\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""succession:(\'Send Notification by e-mail\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [0, -1, 0, -1, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0], ""succession:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [0, 0, 0, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0], ""succession:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""succession:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""succession:(\'Send Notification by e-mail\', \'High Medical History\')"": [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], ""precedence:(\'Low Insurance Check\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, 1, 0, 0, -1], ""precedence:(\'Low Insurance Check\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""precedence:(\'Low Insurance Check\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Low Insurance Check\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Low Insurance Check\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Low Insurance Check\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""precedence:(\'Low Insurance Check\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""precedence:(\'Low Insurance Check\', \'Create Questionnaire\')"": [-1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""precedence:(\'Low Insurance Check\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Low Insurance Check\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""precedence:(\'Low Insurance Check\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Low Insurance Check\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""precedence:(\'Reject Claim\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Reject Claim\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""precedence:(\'Reject Claim\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Reject Claim\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Reject Claim\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Reject Claim\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""precedence:(\'Reject Claim\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""precedence:(\'Reject Claim\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1], ""precedence:(\'Reject Claim\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Reject Claim\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], ""precedence:(\'Reject Claim\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Reject Claim\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""precedence:(\'Accept Claim\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Accept Claim\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""precedence:(\'Accept Claim\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Accept Claim\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Accept Claim\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Accept Claim\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""precedence:(\'Accept Claim\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""precedence:(\'Accept Claim\', \'Create Questionnaire\')"": [-1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1], ""precedence:(\'Accept Claim\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Accept Claim\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], ""precedence:(\'Accept Claim\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Accept Claim\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""precedence:(\'High Insurance Check\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'High Insurance Check\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, -1, 0, 0, 1], ""precedence:(\'High Insurance Check\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, 1, 0], ""precedence:(\'High Insurance Check\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'High Insurance Check\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'High Insurance Check\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""precedence:(\'High Insurance Check\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""precedence:(\'High Insurance Check\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1], ""precedence:(\'High Insurance Check\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, -1, 1, 1], ""precedence:(\'High Insurance Check\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""precedence:(\'High Insurance Check\', \'High Medical History\')"": [1, 0, 1, 0, 0, -1, 1, 0, 0, -1, 0, -1, 1, 1], ""precedence:(\'High Insurance Check\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""precedence:(\'Low Medical History\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""precedence:(\'Low Medical History\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, 1, 0, 0, -1], ""precedence:(\'Low Medical History\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, -1, 0, -1, -1, 0], ""precedence:(\'Low Medical History\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Low Medical History\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Low Medical History\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""precedence:(\'Low Medical History\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""precedence:(\'Low Medical History\', \'Create Questionnaire\')"": [-1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], ""precedence:(\'Low Medical History\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Low Medical History\', \'Prepare Notification Content\')"": [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], ""precedence:(\'Low Medical History\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Low Medical History\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""precedence:(\'Register\', \'Low Insurance Check\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""precedence:(\'Register\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], ""precedence:(\'Register\', \'Accept Claim\')"": [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], ""precedence:(\'Register\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""precedence:(\'Register\', \'Low Medical History\')"": [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], ""precedence:(\'Register\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""precedence:(\'Register\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""precedence:(\'Register\', \'Create Questionnaire\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""precedence:(\'Register\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""precedence:(\'Register\', \'Prepare Notification Content\')"": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], ""precedence:(\'Register\', \'High Medical History\')"": [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], ""precedence:(\'Register\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""precedence:(\'Send Questionnaire\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Send Questionnaire\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""precedence:(\'Send Questionnaire\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""precedence:(\'Send Questionnaire\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Send Questionnaire\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Send Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Send Questionnaire\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""precedence:(\'Send Questionnaire\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Send Questionnaire\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Send Questionnaire\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Send Questionnaire\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Send Questionnaire\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""precedence:(\'Send Notification by Post\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Send Notification by Post\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""precedence:(\'Send Notification by Post\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""precedence:(\'Send Notification by Post\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Send Notification by Post\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Send Notification by Post\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Send Notification by Post\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""precedence:(\'Send Notification by Post\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Send Notification by Post\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Send Notification by Post\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Send Notification by Post\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Send Notification by Post\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""precedence:(\'Create Questionnaire\', \'Low Insurance Check\')"": [0, 1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""precedence:(\'Create Questionnaire\', \'Reject Claim\')"": [1, 0, 1, 0, 0, -1, 1, 1, 0, 0, 1, 0, 0, -1], ""precedence:(\'Create Questionnaire\', \'Accept Claim\')"": [0, 1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, -1, 0], ""precedence:(\'Create Questionnaire\', \'High Insurance Check\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, -1, -1], ""precedence:(\'Create Questionnaire\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], ""precedence:(\'Create Questionnaire\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Create Questionnaire\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""precedence:(\'Create Questionnaire\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""precedence:(\'Create Questionnaire\', \'Contact Hospital\')"": [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, -1, -1], ""precedence:(\'Create Questionnaire\', \'Prepare Notification Content\')"": [1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1], ""precedence:(\'Create Questionnaire\', \'High Medical History\')"": [1, 0, 1, 0, 0, -1, 1, 0, 0, 1, 0, 1, -1, -1], ""precedence:(\'Create Questionnaire\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""precedence:(\'Contact Hospital\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Contact Hospital\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, -1, 0, 0, 1], ""precedence:(\'Contact Hospital\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, 1, 0], ""precedence:(\'Contact Hospital\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, 1, -1, -1], ""precedence:(\'Contact Hospital\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Contact Hospital\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Contact Hospital\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""precedence:(\'Contact Hospital\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""precedence:(\'Contact Hospital\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1], ""precedence:(\'Contact Hospital\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""precedence:(\'Contact Hospital\', \'High Medical History\')"": [1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Contact Hospital\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""precedence:(\'Prepare Notification Content\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Prepare Notification Content\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""precedence:(\'Prepare Notification Content\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""precedence:(\'Prepare Notification Content\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Prepare Notification Content\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Prepare Notification Content\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Prepare Notification Content\', \'Send Questionnaire\')"": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ""precedence:(\'Prepare Notification Content\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], ""precedence:(\'Prepare Notification Content\', \'Create Questionnaire\')"": [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], ""precedence:(\'Prepare Notification Content\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Prepare Notification Content\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"": [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], ""precedence:(\'High Medical History\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'High Medical History\', \'Reject Claim\')"": [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, -1, 0, 0, 1], ""precedence:(\'High Medical History\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, 1, 0], ""precedence:(\'High Medical History\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, 1, -1, -1], ""precedence:(\'High Medical History\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'High Medical History\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'High Medical History\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""precedence:(\'High Medical History\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""precedence:(\'High Medical History\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1], ""precedence:(\'High Medical History\', \'Contact Hospital\')"": [-1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, 1], ""precedence:(\'High Medical History\', \'Prepare Notification Content\')"": [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], ""precedence:(\'High Medical History\', \'Send Notification by e-mail\')"": [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], ""precedence:(\'Send Notification by e-mail\', \'Low Insurance Check\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Send Notification by e-mail\', \'Reject Claim\')"": [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], ""precedence:(\'Send Notification by e-mail\', \'Accept Claim\')"": [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], ""precedence:(\'Send Notification by e-mail\', \'High Insurance Check\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Send Notification by e-mail\', \'Low Medical History\')"": [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], ""precedence:(\'Send Notification by e-mail\', \'Register\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Send Notification by e-mail\', \'Send Questionnaire\')"": [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ""precedence:(\'Send Notification by e-mail\', \'Send Notification by Post\')"": [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], ""precedence:(\'Send Notification by e-mail\', \'Create Questionnaire\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Send Notification by e-mail\', \'Contact Hospital\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], ""precedence:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], ""precedence:(\'Send Notification by e-mail\', \'High Medical History\')"": [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1]}\n        cols = None\n        data, labels, featurenames, train_names = transform_results_to_numpy(train_results, self.labels, self.transformed_log, cols)\n        # expected_data =\n        # expected_labels =\n        expected_featurenames = [""init:(\'Low Insurance Check\',)"", ""init:(\'Reject Claim\',)"", ""init:(\'Accept Claim\',)"", ""init:(\'High Insurance Check\',)"", ""init:(\'Low Medical History\',)"", ""init:(\'Register\',)"", ""init:(\'Send Questionnaire\',)"", ""init:(\'Send Notification by Post\',)"", ""init:(\'Create Questionnaire\',)"", ""init:(\'Contact Hospital\',)"", ""init:(\'Prepare Notification Content\',)"", ""init:(\'High Medical History\',)"", ""init:(\'Send Notification by e-mail\',)"", ""exist:(\'Low Insurance Check\',)"", ""exist:(\'Reject Claim\',)"", ""exist:(\'Accept Claim\',)"", ""exist:(\'High Insurance Check\',)"", ""exist:(\'Low Medical History\',)"", ""exist:(\'Register\',)"", ""exist:(\'Send Questionnaire\',)"", ""exist:(\'Send Notification by Post\',)"", ""exist:(\'Create Questionnaire\',)"", ""exist:(\'Contact Hospital\',)"", ""exist:(\'Prepare Notification Content\',)"", ""exist:(\'High Medical History\',)"", ""exist:(\'Send Notification by e-mail\',)"", ""absence1:(\'Low Insurance Check\',)"", ""absence1:(\'Reject Claim\',)"", ""absence1:(\'Accept Claim\',)"", ""absence1:(\'High Insurance Check\',)"", ""absence1:(\'Low Medical History\',)"", ""absence1:(\'Register\',)"", ""absence1:(\'Send Questionnaire\',)"", ""absence1:(\'Send Notification by Post\',)"", ""absence1:(\'Create Questionnaire\',)"", ""absence1:(\'Contact Hospital\',)"", ""absence1:(\'Prepare Notification Content\',)"", ""absence1:(\'High Medical History\',)"", ""absence1:(\'Send Notification by e-mail\',)"", ""absence2:(\'Low Insurance Check\',)"", ""absence2:(\'Reject Claim\',)"", ""absence2:(\'Accept Claim\',)"", ""absence2:(\'High Insurance Check\',)"", ""absence2:(\'Low Medical History\',)"", ""absence2:(\'Register\',)"", ""absence2:(\'Send Questionnaire\',)"", ""absence2:(\'Send Notification by Post\',)"", ""absence2:(\'Create Questionnaire\',)"", ""absence2:(\'Contact Hospital\',)"", ""absence2:(\'Prepare Notification Content\',)"", ""absence2:(\'High Medical History\',)"", ""absence2:(\'Send Notification by e-mail\',)"", ""absence3:(\'Low Insurance Check\',)"", ""absence3:(\'Reject Claim\',)"", ""absence3:(\'Accept Claim\',)"", ""absence3:(\'High Insurance Check\',)"", ""absence3:(\'Low Medical History\',)"", ""absence3:(\'Register\',)"", ""absence3:(\'Send Questionnaire\',)"", ""absence3:(\'Send Notification by Post\',)"", ""absence3:(\'Create Questionnaire\',)"", ""absence3:(\'Contact Hospital\',)"", ""absence3:(\'Prepare Notification Content\',)"", ""absence3:(\'High Medical History\',)"", ""absence3:(\'Send Notification by e-mail\',)"", ""choice:(\'Low Insurance Check\', \'Reject Claim\')"", ""choice:(\'Low Insurance Check\', \'Accept Claim\')"", ""choice:(\'Low Insurance Check\', \'High Insurance Check\')"", ""choice:(\'Low Insurance Check\', \'Low Medical History\')"", ""choice:(\'Low Insurance Check\', \'Register\')"", ""choice:(\'Low Insurance Check\', \'Send Questionnaire\')"", ""choice:(\'Low Insurance Check\', \'Send Notification by Post\')"", ""choice:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""choice:(\'Low Insurance Check\', \'Contact Hospital\')"", ""choice:(\'Low Insurance Check\', \'Prepare Notification Content\')"", ""choice:(\'Low Insurance Check\', \'High Medical History\')"", ""choice:(\'Low Insurance Check\', \'Send Notification by e-mail\')"", ""choice:(\'Reject Claim\', \'Low Insurance Check\')"", ""choice:(\'Reject Claim\', \'Accept Claim\')"", ""choice:(\'Reject Claim\', \'High Insurance Check\')"", ""choice:(\'Reject Claim\', \'Low Medical History\')"", ""choice:(\'Reject Claim\', \'Register\')"", ""choice:(\'Reject Claim\', \'Send Questionnaire\')"", ""choice:(\'Reject Claim\', \'Send Notification by Post\')"", ""choice:(\'Reject Claim\', \'Create Questionnaire\')"", ""choice:(\'Reject Claim\', \'Contact Hospital\')"", ""choice:(\'Reject Claim\', \'Prepare Notification Content\')"", ""choice:(\'Reject Claim\', \'High Medical History\')"", ""choice:(\'Reject Claim\', \'Send Notification by e-mail\')"", ""choice:(\'Accept Claim\', \'Low Insurance Check\')"", ""choice:(\'Accept Claim\', \'Reject Claim\')"", ""choice:(\'Accept Claim\', \'High Insurance Check\')"", ""choice:(\'Accept Claim\', \'Low Medical History\')"", ""choice:(\'Accept Claim\', \'Register\')"", ""choice:(\'Accept Claim\', \'Send Questionnaire\')"", ""choice:(\'Accept Claim\', \'Send Notification by Post\')"", ""choice:(\'Accept Claim\', \'Create Questionnaire\')"", ""choice:(\'Accept Claim\', \'Contact Hospital\')"", ""choice:(\'Accept Claim\', \'Prepare Notification Content\')"", ""choice:(\'Accept Claim\', \'High Medical History\')"", ""choice:(\'Accept Claim\', \'Send Notification by e-mail\')"", ""choice:(\'High Insurance Check\', \'Low Insurance Check\')"", ""choice:(\'High Insurance Check\', \'Reject Claim\')"", ""choice:(\'High Insurance Check\', \'Accept Claim\')"", ""choice:(\'High Insurance Check\', \'Low Medical History\')"", ""choice:(\'High Insurance Check\', \'Register\')"", ""choice:(\'High Insurance Check\', \'Send Questionnaire\')"", ""choice:(\'High Insurance Check\', \'Send Notification by Post\')"", ""choice:(\'High Insurance Check\', \'Create Questionnaire\')"", ""choice:(\'High Insurance Check\', \'Contact Hospital\')"", ""choice:(\'High Insurance Check\', \'Prepare Notification Content\')"", ""choice:(\'High Insurance Check\', \'High Medical History\')"", ""choice:(\'High Insurance Check\', \'Send Notification by e-mail\')"", ""choice:(\'Low Medical History\', \'Low Insurance Check\')"", ""choice:(\'Low Medical History\', \'Reject Claim\')"", ""choice:(\'Low Medical History\', \'Accept Claim\')"", ""choice:(\'Low Medical History\', \'High Insurance Check\')"", ""choice:(\'Low Medical History\', \'Register\')"", ""choice:(\'Low Medical History\', \'Send Questionnaire\')"", ""choice:(\'Low Medical History\', \'Send Notification by Post\')"", ""choice:(\'Low Medical History\', \'Create Questionnaire\')"", ""choice:(\'Low Medical History\', \'Contact Hospital\')"", ""choice:(\'Low Medical History\', \'Prepare Notification Content\')"", ""choice:(\'Low Medical History\', \'High Medical History\')"", ""choice:(\'Low Medical History\', \'Send Notification by e-mail\')"", ""choice:(\'Register\', \'Low Insurance Check\')"", ""choice:(\'Register\', \'Reject Claim\')"", ""choice:(\'Register\', \'Accept Claim\')"", ""choice:(\'Register\', \'High Insurance Check\')"", ""choice:(\'Register\', \'Low Medical History\')"", ""choice:(\'Register\', \'Send Questionnaire\')"", ""choice:(\'Register\', \'Send Notification by Post\')"", ""choice:(\'Register\', \'Create Questionnaire\')"", ""choice:(\'Register\', \'Contact Hospital\')"", ""choice:(\'Register\', \'Prepare Notification Content\')"", ""choice:(\'Register\', \'High Medical History\')"", ""choice:(\'Register\', \'Send Notification by e-mail\')"", ""choice:(\'Send Questionnaire\', \'Low Insurance Check\')"", ""choice:(\'Send Questionnaire\', \'Reject Claim\')"", ""choice:(\'Send Questionnaire\', \'Accept Claim\')"", ""choice:(\'Send Questionnaire\', \'High Insurance Check\')"", ""choice:(\'Send Questionnaire\', \'Low Medical History\')"", ""choice:(\'Send Questionnaire\', \'Register\')"", ""choice:(\'Send Questionnaire\', \'Send Notification by Post\')"", ""choice:(\'Send Questionnaire\', \'Create Questionnaire\')"", ""choice:(\'Send Questionnaire\', \'Contact Hospital\')"", ""choice:(\'Send Questionnaire\', \'Prepare Notification Content\')"", ""choice:(\'Send Questionnaire\', \'High Medical History\')"", ""choice:(\'Send Questionnaire\', \'Send Notification by e-mail\')"", ""choice:(\'Send Notification by Post\', \'Low Insurance Check\')"", ""choice:(\'Send Notification by Post\', \'Reject Claim\')"", ""choice:(\'Send Notification by Post\', \'Accept Claim\')"", ""choice:(\'Send Notification by Post\', \'High Insurance Check\')"", ""choice:(\'Send Notification by Post\', \'Low Medical History\')"", ""choice:(\'Send Notification by Post\', \'Register\')"", ""choice:(\'Send Notification by Post\', \'Send Questionnaire\')"", ""choice:(\'Send Notification by Post\', \'Create Questionnaire\')"", ""choice:(\'Send Notification by Post\', \'Contact Hospital\')"", ""choice:(\'Send Notification by Post\', \'Prepare Notification Content\')"", ""choice:(\'Send Notification by Post\', \'High Medical History\')"", ""choice:(\'Send Notification by Post\', \'Send Notification by e-mail\')"", ""choice:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""choice:(\'Create Questionnaire\', \'Reject Claim\')"", ""choice:(\'Create Questionnaire\', \'Accept Claim\')"", ""choice:(\'Create Questionnaire\', \'High Insurance Check\')"", ""choice:(\'Create Questionnaire\', \'Low Medical History\')"", ""choice:(\'Create Questionnaire\', \'Register\')"", ""choice:(\'Create Questionnaire\', \'Send Questionnaire\')"", ""choice:(\'Create Questionnaire\', \'Send Notification by Post\')"", ""choice:(\'Create Questionnaire\', \'Contact Hospital\')"", ""choice:(\'Create Questionnaire\', \'Prepare Notification Content\')"", ""choice:(\'Create Questionnaire\', \'High Medical History\')"", ""choice:(\'Create Questionnaire\', \'Send Notification by e-mail\')"", ""choice:(\'Contact Hospital\', \'Low Insurance Check\')"", ""choice:(\'Contact Hospital\', \'Reject Claim\')"", ""choice:(\'Contact Hospital\', \'Accept Claim\')"", ""choice:(\'Contact Hospital\', \'High Insurance Check\')"", ""choice:(\'Contact Hospital\', \'Low Medical History\')"", ""choice:(\'Contact Hospital\', \'Register\')"", ""choice:(\'Contact Hospital\', \'Send Questionnaire\')"", ""choice:(\'Contact Hospital\', \'Send Notification by Post\')"", ""choice:(\'Contact Hospital\', \'Create Questionnaire\')"", ""choice:(\'Contact Hospital\', \'Prepare Notification Content\')"", ""choice:(\'Contact Hospital\', \'High Medical History\')"", ""choice:(\'Contact Hospital\', \'Send Notification by e-mail\')"", ""choice:(\'Prepare Notification Content\', \'Low Insurance Check\')"", ""choice:(\'Prepare Notification Content\', \'Reject Claim\')"", ""choice:(\'Prepare Notification Content\', \'Accept Claim\')"", ""choice:(\'Prepare Notification Content\', \'High Insurance Check\')"", ""choice:(\'Prepare Notification Content\', \'Low Medical History\')"", ""choice:(\'Prepare Notification Content\', \'Register\')"", ""choice:(\'Prepare Notification Content\', \'Send Questionnaire\')"", ""choice:(\'Prepare Notification Content\', \'Send Notification by Post\')"", ""choice:(\'Prepare Notification Content\', \'Create Questionnaire\')"", ""choice:(\'Prepare Notification Content\', \'Contact Hospital\')"", ""choice:(\'Prepare Notification Content\', \'High Medical History\')"", ""choice:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"", ""choice:(\'High Medical History\', \'Low Insurance Check\')"", ""choice:(\'High Medical History\', \'Reject Claim\')"", ""choice:(\'High Medical History\', \'Accept Claim\')"", ""choice:(\'High Medical History\', \'High Insurance Check\')"", ""choice:(\'High Medical History\', \'Low Medical History\')"", ""choice:(\'High Medical History\', \'Register\')"", ""choice:(\'High Medical History\', \'Send Questionnaire\')"", ""choice:(\'High Medical History\', \'Send Notification by Post\')"", ""choice:(\'High Medical History\', \'Create Questionnaire\')"", ""choice:(\'High Medical History\', \'Contact Hospital\')"", ""choice:(\'High Medical History\', \'Prepare Notification Content\')"", ""choice:(\'High Medical History\', \'Send Notification by e-mail\')"", ""choice:(\'Send Notification by e-mail\', \'Low Insurance Check\')"", ""choice:(\'Send Notification by e-mail\', \'Reject Claim\')"", ""choice:(\'Send Notification by e-mail\', \'Accept Claim\')"", ""choice:(\'Send Notification by e-mail\', \'High Insurance Check\')"", ""choice:(\'Send Notification by e-mail\', \'Low Medical History\')"", ""choice:(\'Send Notification by e-mail\', \'Register\')"", ""choice:(\'Send Notification by e-mail\', \'Send Questionnaire\')"", ""choice:(\'Send Notification by e-mail\', \'Send Notification by Post\')"", ""choice:(\'Send Notification by e-mail\', \'Create Questionnaire\')"", ""choice:(\'Send Notification by e-mail\', \'Contact Hospital\')"", ""choice:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"", ""choice:(\'Send Notification by e-mail\', \'High Medical History\')"", ""coexistence:(\'Low Insurance Check\', \'Reject Claim\')"", ""coexistence:(\'Low Insurance Check\', \'Accept Claim\')"", ""coexistence:(\'Low Insurance Check\', \'High Insurance Check\')"", ""coexistence:(\'Low Insurance Check\', \'Low Medical History\')"", ""coexistence:(\'Low Insurance Check\', \'Register\')"", ""coexistence:(\'Low Insurance Check\', \'Send Questionnaire\')"", ""coexistence:(\'Low Insurance Check\', \'Send Notification by Post\')"", ""coexistence:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""coexistence:(\'Low Insurance Check\', \'Contact Hospital\')"", ""coexistence:(\'Low Insurance Check\', \'Prepare Notification Content\')"", ""coexistence:(\'Low Insurance Check\', \'High Medical History\')"", ""coexistence:(\'Low Insurance Check\', \'Send Notification by e-mail\')"", ""coexistence:(\'Reject Claim\', \'Low Insurance Check\')"", ""coexistence:(\'Reject Claim\', \'Accept Claim\')"", ""coexistence:(\'Reject Claim\', \'High Insurance Check\')"", ""coexistence:(\'Reject Claim\', \'Low Medical History\')"", ""coexistence:(\'Reject Claim\', \'Register\')"", ""coexistence:(\'Reject Claim\', \'Send Questionnaire\')"", ""coexistence:(\'Reject Claim\', \'Send Notification by Post\')"", ""coexistence:(\'Reject Claim\', \'Create Questionnaire\')"", ""coexistence:(\'Reject Claim\', \'Contact Hospital\')"", ""coexistence:(\'Reject Claim\', \'Prepare Notification Content\')"", ""coexistence:(\'Reject Claim\', \'High Medical History\')"", ""coexistence:(\'Reject Claim\', \'Send Notification by e-mail\')"", ""coexistence:(\'Accept Claim\', \'Low Insurance Check\')"", ""coexistence:(\'Accept Claim\', \'Reject Claim\')"", ""coexistence:(\'Accept Claim\', \'High Insurance Check\')"", ""coexistence:(\'Accept Claim\', \'Low Medical History\')"", ""coexistence:(\'Accept Claim\', \'Register\')"", ""coexistence:(\'Accept Claim\', \'Send Questionnaire\')"", ""coexistence:(\'Accept Claim\', \'Send Notification by Post\')"", ""coexistence:(\'Accept Claim\', \'Create Questionnaire\')"", ""coexistence:(\'Accept Claim\', \'Contact Hospital\')"", ""coexistence:(\'Accept Claim\', \'Prepare Notification Content\')"", ""coexistence:(\'Accept Claim\', \'High Medical History\')"", ""coexistence:(\'Accept Claim\', \'Send Notification by e-mail\')"", ""coexistence:(\'High Insurance Check\', \'Low Insurance Check\')"", ""coexistence:(\'High Insurance Check\', \'Reject Claim\')"", ""coexistence:(\'High Insurance Check\', \'Accept Claim\')"", ""coexistence:(\'High Insurance Check\', \'Low Medical History\')"", ""coexistence:(\'High Insurance Check\', \'Register\')"", ""coexistence:(\'High Insurance Check\', \'Send Questionnaire\')"", ""coexistence:(\'High Insurance Check\', \'Send Notification by Post\')"", ""coexistence:(\'High Insurance Check\', \'Create Questionnaire\')"", ""coexistence:(\'High Insurance Check\', \'Contact Hospital\')"", ""coexistence:(\'High Insurance Check\', \'Prepare Notification Content\')"", ""coexistence:(\'High Insurance Check\', \'High Medical History\')"", ""coexistence:(\'High Insurance Check\', \'Send Notification by e-mail\')"", ""coexistence:(\'Low Medical History\', \'Low Insurance Check\')"", ""coexistence:(\'Low Medical History\', \'Reject Claim\')"", ""coexistence:(\'Low Medical History\', \'Accept Claim\')"", ""coexistence:(\'Low Medical History\', \'High Insurance Check\')"", ""coexistence:(\'Low Medical History\', \'Register\')"", ""coexistence:(\'Low Medical History\', \'Send Questionnaire\')"", ""coexistence:(\'Low Medical History\', \'Send Notification by Post\')"", ""coexistence:(\'Low Medical History\', \'Create Questionnaire\')"", ""coexistence:(\'Low Medical History\', \'Contact Hospital\')"", ""coexistence:(\'Low Medical History\', \'Prepare Notification Content\')"", ""coexistence:(\'Low Medical History\', \'High Medical History\')"", ""coexistence:(\'Low Medical History\', \'Send Notification by e-mail\')"", ""coexistence:(\'Register\', \'Low Insurance Check\')"", ""coexistence:(\'Register\', \'Reject Claim\')"", ""coexistence:(\'Register\', \'Accept Claim\')"", ""coexistence:(\'Register\', \'High Insurance Check\')"", ""coexistence:(\'Register\', \'Low Medical History\')"", ""coexistence:(\'Register\', \'Send Questionnaire\')"", ""coexistence:(\'Register\', \'Send Notification by Post\')"", ""coexistence:(\'Register\', \'Create Questionnaire\')"", ""coexistence:(\'Register\', \'Contact Hospital\')"", ""coexistence:(\'Register\', \'Prepare Notification Content\')"", ""coexistence:(\'Register\', \'High Medical History\')"", ""coexistence:(\'Register\', \'Send Notification by e-mail\')"", ""coexistence:(\'Send Questionnaire\', \'Low Insurance Check\')"", ""coexistence:(\'Send Questionnaire\', \'Reject Claim\')"", ""coexistence:(\'Send Questionnaire\', \'Accept Claim\')"", ""coexistence:(\'Send Questionnaire\', \'High Insurance Check\')"", ""coexistence:(\'Send Questionnaire\', \'Low Medical History\')"", ""coexistence:(\'Send Questionnaire\', \'Register\')"", ""coexistence:(\'Send Questionnaire\', \'Send Notification by Post\')"", ""coexistence:(\'Send Questionnaire\', \'Create Questionnaire\')"", ""coexistence:(\'Send Questionnaire\', \'Contact Hospital\')"", ""coexistence:(\'Send Questionnaire\', \'Prepare Notification Content\')"", ""coexistence:(\'Send Questionnaire\', \'High Medical History\')"", ""coexistence:(\'Send Questionnaire\', \'Send Notification by e-mail\')"", ""coexistence:(\'Send Notification by Post\', \'Low Insurance Check\')"", ""coexistence:(\'Send Notification by Post\', \'Reject Claim\')"", ""coexistence:(\'Send Notification by Post\', \'Accept Claim\')"", ""coexistence:(\'Send Notification by Post\', \'High Insurance Check\')"", ""coexistence:(\'Send Notification by Post\', \'Low Medical History\')"", ""coexistence:(\'Send Notification by Post\', \'Register\')"", ""coexistence:(\'Send Notification by Post\', \'Send Questionnaire\')"", ""coexistence:(\'Send Notification by Post\', \'Create Questionnaire\')"", ""coexistence:(\'Send Notification by Post\', \'Contact Hospital\')"", ""coexistence:(\'Send Notification by Post\', \'Prepare Notification Content\')"", ""coexistence:(\'Send Notification by Post\', \'High Medical History\')"", ""coexistence:(\'Send Notification by Post\', \'Send Notification by e-mail\')"", ""coexistence:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""coexistence:(\'Create Questionnaire\', \'Reject Claim\')"", ""coexistence:(\'Create Questionnaire\', \'Accept Claim\')"", ""coexistence:(\'Create Questionnaire\', \'High Insurance Check\')"", ""coexistence:(\'Create Questionnaire\', \'Low Medical History\')"", ""coexistence:(\'Create Questionnaire\', \'Register\')"", ""coexistence:(\'Create Questionnaire\', \'Send Questionnaire\')"", ""coexistence:(\'Create Questionnaire\', \'Send Notification by Post\')"", ""coexistence:(\'Create Questionnaire\', \'Contact Hospital\')"", ""coexistence:(\'Create Questionnaire\', \'Prepare Notification Content\')"", ""coexistence:(\'Create Questionnaire\', \'High Medical History\')"", ""coexistence:(\'Create Questionnaire\', \'Send Notification by e-mail\')"", ""coexistence:(\'Contact Hospital\', \'Low Insurance Check\')"", ""coexistence:(\'Contact Hospital\', \'Reject Claim\')"", ""coexistence:(\'Contact Hospital\', \'Accept Claim\')"", ""coexistence:(\'Contact Hospital\', \'High Insurance Check\')"", ""coexistence:(\'Contact Hospital\', \'Low Medical History\')"", ""coexistence:(\'Contact Hospital\', \'Register\')"", ""coexistence:(\'Contact Hospital\', \'Send Questionnaire\')"", ""coexistence:(\'Contact Hospital\', \'Send Notification by Post\')"", ""coexistence:(\'Contact Hospital\', \'Create Questionnaire\')"", ""coexistence:(\'Contact Hospital\', \'Prepare Notification Content\')"", ""coexistence:(\'Contact Hospital\', \'High Medical History\')"", ""coexistence:(\'Contact Hospital\', \'Send Notification by e-mail\')"", ""coexistence:(\'Prepare Notification Content\', \'Low Insurance Check\')"", ""coexistence:(\'Prepare Notification Content\', \'Reject Claim\')"", ""coexistence:(\'Prepare Notification Content\', \'Accept Claim\')"", ""coexistence:(\'Prepare Notification Content\', \'High Insurance Check\')"", ""coexistence:(\'Prepare Notification Content\', \'Low Medical History\')"", ""coexistence:(\'Prepare Notification Content\', \'Register\')"", ""coexistence:(\'Prepare Notification Content\', \'Send Questionnaire\')"", ""coexistence:(\'Prepare Notification Content\', \'Send Notification by Post\')"", ""coexistence:(\'Prepare Notification Content\', \'Create Questionnaire\')"", ""coexistence:(\'Prepare Notification Content\', \'Contact Hospital\')"", ""coexistence:(\'Prepare Notification Content\', \'High Medical History\')"", ""coexistence:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"", ""coexistence:(\'High Medical History\', \'Low Insurance Check\')"", ""coexistence:(\'High Medical History\', \'Reject Claim\')"", ""coexistence:(\'High Medical History\', \'Accept Claim\')"", ""coexistence:(\'High Medical History\', \'High Insurance Check\')"", ""coexistence:(\'High Medical History\', \'Low Medical History\')"", ""coexistence:(\'High Medical History\', \'Register\')"", ""coexistence:(\'High Medical History\', \'Send Questionnaire\')"", ""coexistence:(\'High Medical History\', \'Send Notification by Post\')"", ""coexistence:(\'High Medical History\', \'Create Questionnaire\')"", ""coexistence:(\'High Medical History\', \'Contact Hospital\')"", ""coexistence:(\'High Medical History\', \'Prepare Notification Content\')"", ""coexistence:(\'High Medical History\', \'Send Notification by e-mail\')"", ""coexistence:(\'Send Notification by e-mail\', \'Low Insurance Check\')"", ""coexistence:(\'Send Notification by e-mail\', \'Reject Claim\')"", ""coexistence:(\'Send Notification by e-mail\', \'Accept Claim\')"", ""coexistence:(\'Send Notification by e-mail\', \'High Insurance Check\')"", ""coexistence:(\'Send Notification by e-mail\', \'Low Medical History\')"", ""coexistence:(\'Send Notification by e-mail\', \'Register\')"", ""coexistence:(\'Send Notification by e-mail\', \'Send Questionnaire\')"", ""coexistence:(\'Send Notification by e-mail\', \'Send Notification by Post\')"", ""coexistence:(\'Send Notification by e-mail\', \'Create Questionnaire\')"", ""coexistence:(\'Send Notification by e-mail\', \'Contact Hospital\')"", ""coexistence:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"", ""coexistence:(\'Send Notification by e-mail\', \'High Medical History\')"", ""exactly1:(\'Low Insurance Check\',)"", ""exactly1:(\'Reject Claim\',)"", ""exactly1:(\'Accept Claim\',)"", ""exactly1:(\'High Insurance Check\',)"", ""exactly1:(\'Low Medical History\',)"", ""exactly1:(\'Register\',)"", ""exactly1:(\'Send Questionnaire\',)"", ""exactly1:(\'Send Notification by Post\',)"", ""exactly1:(\'Create Questionnaire\',)"", ""exactly1:(\'Contact Hospital\',)"", ""exactly1:(\'Prepare Notification Content\',)"", ""exactly1:(\'High Medical History\',)"", ""exactly1:(\'Send Notification by e-mail\',)"", ""exactly2:(\'Low Insurance Check\',)"", ""exactly2:(\'Reject Claim\',)"", ""exactly2:(\'Accept Claim\',)"", ""exactly2:(\'High Insurance Check\',)"", ""exactly2:(\'Low Medical History\',)"", ""exactly2:(\'Register\',)"", ""exactly2:(\'Send Questionnaire\',)"", ""exactly2:(\'Send Notification by Post\',)"", ""exactly2:(\'Create Questionnaire\',)"", ""exactly2:(\'Contact Hospital\',)"", ""exactly2:(\'Prepare Notification Content\',)"", ""exactly2:(\'High Medical History\',)"", ""exactly2:(\'Send Notification by e-mail\',)"", ""exactly3:(\'Low Insurance Check\',)"", ""exactly3:(\'Reject Claim\',)"", ""exactly3:(\'Accept Claim\',)"", ""exactly3:(\'High Insurance Check\',)"", ""exactly3:(\'Low Medical History\',)"", ""exactly3:(\'Register\',)"", ""exactly3:(\'Send Questionnaire\',)"", ""exactly3:(\'Send Notification by Post\',)"", ""exactly3:(\'Create Questionnaire\',)"", ""exactly3:(\'Contact Hospital\',)"", ""exactly3:(\'Prepare Notification Content\',)"", ""exactly3:(\'High Medical History\',)"", ""exactly3:(\'Send Notification by e-mail\',)"", ""alternate_precedence:(\'Low Insurance Check\', \'Reject Claim\')"", ""alternate_precedence:(\'Low Insurance Check\', \'Accept Claim\')"", ""alternate_precedence:(\'Low Insurance Check\', \'High Insurance Check\')"", ""alternate_precedence:(\'Low Insurance Check\', \'Low Medical History\')"", ""alternate_precedence:(\'Low Insurance Check\', \'Register\')"", ""alternate_precedence:(\'Low Insurance Check\', \'Send Questionnaire\')"", ""alternate_precedence:(\'Low Insurance Check\', \'Send Notification by Post\')"", ""alternate_precedence:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""alternate_precedence:(\'Low Insurance Check\', \'Contact Hospital\')"", ""alternate_precedence:(\'Low Insurance Check\', \'Prepare Notification Content\')"", ""alternate_precedence:(\'Low Insurance Check\', \'High Medical History\')"", ""alternate_precedence:(\'Low Insurance Check\', \'Send Notification by e-mail\')"", ""alternate_precedence:(\'Reject Claim\', \'Low Insurance Check\')"", ""alternate_precedence:(\'Reject Claim\', \'Accept Claim\')"", ""alternate_precedence:(\'Reject Claim\', \'High Insurance Check\')"", ""alternate_precedence:(\'Reject Claim\', \'Low Medical History\')"", ""alternate_precedence:(\'Reject Claim\', \'Register\')"", ""alternate_precedence:(\'Reject Claim\', \'Send Questionnaire\')"", ""alternate_precedence:(\'Reject Claim\', \'Send Notification by Post\')"", ""alternate_precedence:(\'Reject Claim\', \'Create Questionnaire\')"", ""alternate_precedence:(\'Reject Claim\', \'Contact Hospital\')"", ""alternate_precedence:(\'Reject Claim\', \'Prepare Notification Content\')"", ""alternate_precedence:(\'Reject Claim\', \'High Medical History\')"", ""alternate_precedence:(\'Reject Claim\', \'Send Notification by e-mail\')"", ""alternate_precedence:(\'Accept Claim\', \'Low Insurance Check\')"", ""alternate_precedence:(\'Accept Claim\', \'Reject Claim\')"", ""alternate_precedence:(\'Accept Claim\', \'High Insurance Check\')"", ""alternate_precedence:(\'Accept Claim\', \'Low Medical History\')"", ""alternate_precedence:(\'Accept Claim\', \'Register\')"", ""alternate_precedence:(\'Accept Claim\', \'Send Questionnaire\')"", ""alternate_precedence:(\'Accept Claim\', \'Send Notification by Post\')"", ""alternate_precedence:(\'Accept Claim\', \'Create Questionnaire\')"", ""alternate_precedence:(\'Accept Claim\', \'Contact Hospital\')"", ""alternate_precedence:(\'Accept Claim\', \'Prepare Notification Content\')"", ""alternate_precedence:(\'Accept Claim\', \'High Medical History\')"", ""alternate_precedence:(\'Accept Claim\', \'Send Notification by e-mail\')"", ""alternate_precedence:(\'High Insurance Check\', \'Low Insurance Check\')"", ""alternate_precedence:(\'High Insurance Check\', \'Reject Claim\')"", ""alternate_precedence:(\'High Insurance Check\', \'Accept Claim\')"", ""alternate_precedence:(\'High Insurance Check\', \'Low Medical History\')"", ""alternate_precedence:(\'High Insurance Check\', \'Register\')"", ""alternate_precedence:(\'High Insurance Check\', \'Send Questionnaire\')"", ""alternate_precedence:(\'High Insurance Check\', \'Send Notification by Post\')"", ""alternate_precedence:(\'High Insurance Check\', \'Create Questionnaire\')"", ""alternate_precedence:(\'High Insurance Check\', \'Contact Hospital\')"", ""alternate_precedence:(\'High Insurance Check\', \'Prepare Notification Content\')"", ""alternate_precedence:(\'High Insurance Check\', \'High Medical History\')"", ""alternate_precedence:(\'High Insurance Check\', \'Send Notification by e-mail\')"", ""alternate_precedence:(\'Low Medical History\', \'Low Insurance Check\')"", ""alternate_precedence:(\'Low Medical History\', \'Reject Claim\')"", ""alternate_precedence:(\'Low Medical History\', \'Accept Claim\')"", ""alternate_precedence:(\'Low Medical History\', \'High Insurance Check\')"", ""alternate_precedence:(\'Low Medical History\', \'Register\')"", ""alternate_precedence:(\'Low Medical History\', \'Send Questionnaire\')"", ""alternate_precedence:(\'Low Medical History\', \'Send Notification by Post\')"", ""alternate_precedence:(\'Low Medical History\', \'Create Questionnaire\')"", ""alternate_precedence:(\'Low Medical History\', \'Contact Hospital\')"", ""alternate_precedence:(\'Low Medical History\', \'Prepare Notification Content\')"", ""alternate_precedence:(\'Low Medical History\', \'High Medical History\')"", ""alternate_precedence:(\'Low Medical History\', \'Send Notification by e-mail\')"", ""alternate_precedence:(\'Register\', \'Low Insurance Check\')"", ""alternate_precedence:(\'Register\', \'Reject Claim\')"", ""alternate_precedence:(\'Register\', \'Accept Claim\')"", ""alternate_precedence:(\'Register\', \'High Insurance Check\')"", ""alternate_precedence:(\'Register\', \'Low Medical History\')"", ""alternate_precedence:(\'Register\', \'Send Questionnaire\')"", ""alternate_precedence:(\'Register\', \'Send Notification by Post\')"", ""alternate_precedence:(\'Register\', \'Create Questionnaire\')"", ""alternate_precedence:(\'Register\', \'Contact Hospital\')"", ""alternate_precedence:(\'Register\', \'Prepare Notification Content\')"", ""alternate_precedence:(\'Register\', \'High Medical History\')"", ""alternate_precedence:(\'Register\', \'Send Notification by e-mail\')"", ""alternate_precedence:(\'Send Questionnaire\', \'Low Insurance Check\')"", ""alternate_precedence:(\'Send Questionnaire\', \'Reject Claim\')"", ""alternate_precedence:(\'Send Questionnaire\', \'Accept Claim\')"", ""alternate_precedence:(\'Send Questionnaire\', \'High Insurance Check\')"", ""alternate_precedence:(\'Send Questionnaire\', \'Low Medical History\')"", ""alternate_precedence:(\'Send Questionnaire\', \'Register\')"", ""alternate_precedence:(\'Send Questionnaire\', \'Send Notification by Post\')"", ""alternate_precedence:(\'Send Questionnaire\', \'Create Questionnaire\')"", ""alternate_precedence:(\'Send Questionnaire\', \'Contact Hospital\')"", ""alternate_precedence:(\'Send Questionnaire\', \'Prepare Notification Content\')"", ""alternate_precedence:(\'Send Questionnaire\', \'High Medical History\')"", ""alternate_precedence:(\'Send Questionnaire\', \'Send Notification by e-mail\')"", ""alternate_precedence:(\'Send Notification by Post\', \'Low Insurance Check\')"", ""alternate_precedence:(\'Send Notification by Post\', \'Reject Claim\')"", ""alternate_precedence:(\'Send Notification by Post\', \'Accept Claim\')"", ""alternate_precedence:(\'Send Notification by Post\', \'High Insurance Check\')"", ""alternate_precedence:(\'Send Notification by Post\', \'Low Medical History\')"", ""alternate_precedence:(\'Send Notification by Post\', \'Register\')"", ""alternate_precedence:(\'Send Notification by Post\', \'Send Questionnaire\')"", ""alternate_precedence:(\'Send Notification by Post\', \'Create Questionnaire\')"", ""alternate_precedence:(\'Send Notification by Post\', \'Contact Hospital\')"", ""alternate_precedence:(\'Send Notification by Post\', \'Prepare Notification Content\')"", ""alternate_precedence:(\'Send Notification by Post\', \'High Medical History\')"", ""alternate_precedence:(\'Send Notification by Post\', \'Send Notification by e-mail\')"", ""alternate_precedence:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""alternate_precedence:(\'Create Questionnaire\', \'Reject Claim\')"", ""alternate_precedence:(\'Create Questionnaire\', \'Accept Claim\')"", ""alternate_precedence:(\'Create Questionnaire\', \'High Insurance Check\')"", ""alternate_precedence:(\'Create Questionnaire\', \'Low Medical History\')"", ""alternate_precedence:(\'Create Questionnaire\', \'Register\')"", ""alternate_precedence:(\'Create Questionnaire\', \'Send Questionnaire\')"", ""alternate_precedence:(\'Create Questionnaire\', \'Send Notification by Post\')"", ""alternate_precedence:(\'Create Questionnaire\', \'Contact Hospital\')"", ""alternate_precedence:(\'Create Questionnaire\', \'Prepare Notification Content\')"", ""alternate_precedence:(\'Create Questionnaire\', \'High Medical History\')"", ""alternate_precedence:(\'Create Questionnaire\', \'Send Notification by e-mail\')"", ""alternate_precedence:(\'Contact Hospital\', \'Low Insurance Check\')"", ""alternate_precedence:(\'Contact Hospital\', \'Reject Claim\')"", ""alternate_precedence:(\'Contact Hospital\', \'Accept Claim\')"", ""alternate_precedence:(\'Contact Hospital\', \'High Insurance Check\')"", ""alternate_precedence:(\'Contact Hospital\', \'Low Medical History\')"", ""alternate_precedence:(\'Contact Hospital\', \'Register\')"", ""alternate_precedence:(\'Contact Hospital\', \'Send Questionnaire\')"", ""alternate_precedence:(\'Contact Hospital\', \'Send Notification by Post\')"", ""alternate_precedence:(\'Contact Hospital\', \'Create Questionnaire\')"", ""alternate_precedence:(\'Contact Hospital\', \'Prepare Notification Content\')"", ""alternate_precedence:(\'Contact Hospital\', \'High Medical History\')"", ""alternate_precedence:(\'Contact Hospital\', \'Send Notification by e-mail\')"", ""alternate_precedence:(\'Prepare Notification Content\', \'Low Insurance Check\')"", ""alternate_precedence:(\'Prepare Notification Content\', \'Reject Claim\')"", ""alternate_precedence:(\'Prepare Notification Content\', \'Accept Claim\')"", ""alternate_precedence:(\'Prepare Notification Content\', \'High Insurance Check\')"", ""alternate_precedence:(\'Prepare Notification Content\', \'Low Medical History\')"", ""alternate_precedence:(\'Prepare Notification Content\', \'Register\')"", ""alternate_precedence:(\'Prepare Notification Content\', \'Send Questionnaire\')"", ""alternate_precedence:(\'Prepare Notification Content\', \'Send Notification by Post\')"", ""alternate_precedence:(\'Prepare Notification Content\', \'Create Questionnaire\')"", ""alternate_precedence:(\'Prepare Notification Content\', \'Contact Hospital\')"", ""alternate_precedence:(\'Prepare Notification Content\', \'High Medical History\')"", ""alternate_precedence:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"", ""alternate_precedence:(\'High Medical History\', \'Low Insurance Check\')"", ""alternate_precedence:(\'High Medical History\', \'Reject Claim\')"", ""alternate_precedence:(\'High Medical History\', \'Accept Claim\')"", ""alternate_precedence:(\'High Medical History\', \'High Insurance Check\')"", ""alternate_precedence:(\'High Medical History\', \'Low Medical History\')"", ""alternate_precedence:(\'High Medical History\', \'Register\')"", ""alternate_precedence:(\'High Medical History\', \'Send Questionnaire\')"", ""alternate_precedence:(\'High Medical History\', \'Send Notification by Post\')"", ""alternate_precedence:(\'High Medical History\', \'Create Questionnaire\')"", ""alternate_precedence:(\'High Medical History\', \'Contact Hospital\')"", ""alternate_precedence:(\'High Medical History\', \'Prepare Notification Content\')"", ""alternate_precedence:(\'High Medical History\', \'Send Notification by e-mail\')"", ""alternate_precedence:(\'Send Notification by e-mail\', \'Low Insurance Check\')"", ""alternate_precedence:(\'Send Notification by e-mail\', \'Reject Claim\')"", ""alternate_precedence:(\'Send Notification by e-mail\', \'Accept Claim\')"", ""alternate_precedence:(\'Send Notification by e-mail\', \'High Insurance Check\')"", ""alternate_precedence:(\'Send Notification by e-mail\', \'Low Medical History\')"", ""alternate_precedence:(\'Send Notification by e-mail\', \'Register\')"", ""alternate_precedence:(\'Send Notification by e-mail\', \'Send Questionnaire\')"", ""alternate_precedence:(\'Send Notification by e-mail\', \'Send Notification by Post\')"", ""alternate_precedence:(\'Send Notification by e-mail\', \'Create Questionnaire\')"", ""alternate_precedence:(\'Send Notification by e-mail\', \'Contact Hospital\')"", ""alternate_precedence:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"", ""alternate_precedence:(\'Send Notification by e-mail\', \'High Medical History\')"", ""alternate_succession:(\'Low Insurance Check\', \'Reject Claim\')"", ""alternate_succession:(\'Low Insurance Check\', \'Accept Claim\')"", ""alternate_succession:(\'Low Insurance Check\', \'High Insurance Check\')"", ""alternate_succession:(\'Low Insurance Check\', \'Low Medical History\')"", ""alternate_succession:(\'Low Insurance Check\', \'Register\')"", ""alternate_succession:(\'Low Insurance Check\', \'Send Questionnaire\')"", ""alternate_succession:(\'Low Insurance Check\', \'Send Notification by Post\')"", ""alternate_succession:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""alternate_succession:(\'Low Insurance Check\', \'Contact Hospital\')"", ""alternate_succession:(\'Low Insurance Check\', \'Prepare Notification Content\')"", ""alternate_succession:(\'Low Insurance Check\', \'High Medical History\')"", ""alternate_succession:(\'Low Insurance Check\', \'Send Notification by e-mail\')"", ""alternate_succession:(\'Reject Claim\', \'Low Insurance Check\')"", ""alternate_succession:(\'Reject Claim\', \'Accept Claim\')"", ""alternate_succession:(\'Reject Claim\', \'High Insurance Check\')"", ""alternate_succession:(\'Reject Claim\', \'Low Medical History\')"", ""alternate_succession:(\'Reject Claim\', \'Register\')"", ""alternate_succession:(\'Reject Claim\', \'Send Questionnaire\')"", ""alternate_succession:(\'Reject Claim\', \'Send Notification by Post\')"", ""alternate_succession:(\'Reject Claim\', \'Create Questionnaire\')"", ""alternate_succession:(\'Reject Claim\', \'Contact Hospital\')"", ""alternate_succession:(\'Reject Claim\', \'Prepare Notification Content\')"", ""alternate_succession:(\'Reject Claim\', \'High Medical History\')"", ""alternate_succession:(\'Reject Claim\', \'Send Notification by e-mail\')"", ""alternate_succession:(\'Accept Claim\', \'Low Insurance Check\')"", ""alternate_succession:(\'Accept Claim\', \'Reject Claim\')"", ""alternate_succession:(\'Accept Claim\', \'High Insurance Check\')"", ""alternate_succession:(\'Accept Claim\', \'Low Medical History\')"", ""alternate_succession:(\'Accept Claim\', \'Register\')"", ""alternate_succession:(\'Accept Claim\', \'Send Questionnaire\')"", ""alternate_succession:(\'Accept Claim\', \'Send Notification by Post\')"", ""alternate_succession:(\'Accept Claim\', \'Create Questionnaire\')"", ""alternate_succession:(\'Accept Claim\', \'Contact Hospital\')"", ""alternate_succession:(\'Accept Claim\', \'Prepare Notification Content\')"", ""alternate_succession:(\'Accept Claim\', \'High Medical History\')"", ""alternate_succession:(\'Accept Claim\', \'Send Notification by e-mail\')"", ""alternate_succession:(\'High Insurance Check\', \'Low Insurance Check\')"", ""alternate_succession:(\'High Insurance Check\', \'Reject Claim\')"", ""alternate_succession:(\'High Insurance Check\', \'Accept Claim\')"", ""alternate_succession:(\'High Insurance Check\', \'Low Medical History\')"", ""alternate_succession:(\'High Insurance Check\', \'Register\')"", ""alternate_succession:(\'High Insurance Check\', \'Send Questionnaire\')"", ""alternate_succession:(\'High Insurance Check\', \'Send Notification by Post\')"", ""alternate_succession:(\'High Insurance Check\', \'Create Questionnaire\')"", ""alternate_succession:(\'High Insurance Check\', \'Contact Hospital\')"", ""alternate_succession:(\'High Insurance Check\', \'Prepare Notification Content\')"", ""alternate_succession:(\'High Insurance Check\', \'High Medical History\')"", ""alternate_succession:(\'High Insurance Check\', \'Send Notification by e-mail\')"", ""alternate_succession:(\'Low Medical History\', \'Low Insurance Check\')"", ""alternate_succession:(\'Low Medical History\', \'Reject Claim\')"", ""alternate_succession:(\'Low Medical History\', \'Accept Claim\')"", ""alternate_succession:(\'Low Medical History\', \'High Insurance Check\')"", ""alternate_succession:(\'Low Medical History\', \'Register\')"", ""alternate_succession:(\'Low Medical History\', \'Send Questionnaire\')"", ""alternate_succession:(\'Low Medical History\', \'Send Notification by Post\')"", ""alternate_succession:(\'Low Medical History\', \'Create Questionnaire\')"", ""alternate_succession:(\'Low Medical History\', \'Contact Hospital\')"", ""alternate_succession:(\'Low Medical History\', \'Prepare Notification Content\')"", ""alternate_succession:(\'Low Medical History\', \'High Medical History\')"", ""alternate_succession:(\'Low Medical History\', \'Send Notification by e-mail\')"", ""alternate_succession:(\'Register\', \'Low Insurance Check\')"", ""alternate_succession:(\'Register\', \'Reject Claim\')"", ""alternate_succession:(\'Register\', \'Accept Claim\')"", ""alternate_succession:(\'Register\', \'High Insurance Check\')"", ""alternate_succession:(\'Register\', \'Low Medical History\')"", ""alternate_succession:(\'Register\', \'Send Questionnaire\')"", ""alternate_succession:(\'Register\', \'Send Notification by Post\')"", ""alternate_succession:(\'Register\', \'Create Questionnaire\')"", ""alternate_succession:(\'Register\', \'Contact Hospital\')"", ""alternate_succession:(\'Register\', \'Prepare Notification Content\')"", ""alternate_succession:(\'Register\', \'High Medical History\')"", ""alternate_succession:(\'Register\', \'Send Notification by e-mail\')"", ""alternate_succession:(\'Send Questionnaire\', \'Low Insurance Check\')"", ""alternate_succession:(\'Send Questionnaire\', \'Reject Claim\')"", ""alternate_succession:(\'Send Questionnaire\', \'Accept Claim\')"", ""alternate_succession:(\'Send Questionnaire\', \'High Insurance Check\')"", ""alternate_succession:(\'Send Questionnaire\', \'Low Medical History\')"", ""alternate_succession:(\'Send Questionnaire\', \'Register\')"", ""alternate_succession:(\'Send Questionnaire\', \'Send Notification by Post\')"", ""alternate_succession:(\'Send Questionnaire\', \'Create Questionnaire\')"", ""alternate_succession:(\'Send Questionnaire\', \'Contact Hospital\')"", ""alternate_succession:(\'Send Questionnaire\', \'Prepare Notification Content\')"", ""alternate_succession:(\'Send Questionnaire\', \'High Medical History\')"", ""alternate_succession:(\'Send Questionnaire\', \'Send Notification by e-mail\')"", ""alternate_succession:(\'Send Notification by Post\', \'Low Insurance Check\')"", ""alternate_succession:(\'Send Notification by Post\', \'Reject Claim\')"", ""alternate_succession:(\'Send Notification by Post\', \'Accept Claim\')"", ""alternate_succession:(\'Send Notification by Post\', \'High Insurance Check\')"", ""alternate_succession:(\'Send Notification by Post\', \'Low Medical History\')"", ""alternate_succession:(\'Send Notification by Post\', \'Register\')"", ""alternate_succession:(\'Send Notification by Post\', \'Send Questionnaire\')"", ""alternate_succession:(\'Send Notification by Post\', \'Create Questionnaire\')"", ""alternate_succession:(\'Send Notification by Post\', \'Contact Hospital\')"", ""alternate_succession:(\'Send Notification by Post\', \'Prepare Notification Content\')"", ""alternate_succession:(\'Send Notification by Post\', \'High Medical History\')"", ""alternate_succession:(\'Send Notification by Post\', \'Send Notification by e-mail\')"", ""alternate_succession:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""alternate_succession:(\'Create Questionnaire\', \'Reject Claim\')"", ""alternate_succession:(\'Create Questionnaire\', \'Accept Claim\')"", ""alternate_succession:(\'Create Questionnaire\', \'High Insurance Check\')"", ""alternate_succession:(\'Create Questionnaire\', \'Low Medical History\')"", ""alternate_succession:(\'Create Questionnaire\', \'Register\')"", ""alternate_succession:(\'Create Questionnaire\', \'Send Questionnaire\')"", ""alternate_succession:(\'Create Questionnaire\', \'Send Notification by Post\')"", ""alternate_succession:(\'Create Questionnaire\', \'Contact Hospital\')"", ""alternate_succession:(\'Create Questionnaire\', \'Prepare Notification Content\')"", ""alternate_succession:(\'Create Questionnaire\', \'High Medical History\')"", ""alternate_succession:(\'Create Questionnaire\', \'Send Notification by e-mail\')"", ""alternate_succession:(\'Contact Hospital\', \'Low Insurance Check\')"", ""alternate_succession:(\'Contact Hospital\', \'Reject Claim\')"", ""alternate_succession:(\'Contact Hospital\', \'Accept Claim\')"", ""alternate_succession:(\'Contact Hospital\', \'High Insurance Check\')"", ""alternate_succession:(\'Contact Hospital\', \'Low Medical History\')"", ""alternate_succession:(\'Contact Hospital\', \'Register\')"", ""alternate_succession:(\'Contact Hospital\', \'Send Questionnaire\')"", ""alternate_succession:(\'Contact Hospital\', \'Send Notification by Post\')"", ""alternate_succession:(\'Contact Hospital\', \'Create Questionnaire\')"", ""alternate_succession:(\'Contact Hospital\', \'Prepare Notification Content\')"", ""alternate_succession:(\'Contact Hospital\', \'High Medical History\')"", ""alternate_succession:(\'Contact Hospital\', \'Send Notification by e-mail\')"", ""alternate_succession:(\'Prepare Notification Content\', \'Low Insurance Check\')"", ""alternate_succession:(\'Prepare Notification Content\', \'Reject Claim\')"", ""alternate_succession:(\'Prepare Notification Content\', \'Accept Claim\')"", ""alternate_succession:(\'Prepare Notification Content\', \'High Insurance Check\')"", ""alternate_succession:(\'Prepare Notification Content\', \'Low Medical History\')"", ""alternate_succession:(\'Prepare Notification Content\', \'Register\')"", ""alternate_succession:(\'Prepare Notification Content\', \'Send Questionnaire\')"", ""alternate_succession:(\'Prepare Notification Content\', \'Send Notification by Post\')"", ""alternate_succession:(\'Prepare Notification Content\', \'Create Questionnaire\')"", ""alternate_succession:(\'Prepare Notification Content\', \'Contact Hospital\')"", ""alternate_succession:(\'Prepare Notification Content\', \'High Medical History\')"", ""alternate_succession:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"", ""alternate_succession:(\'High Medical History\', \'Low Insurance Check\')"", ""alternate_succession:(\'High Medical History\', \'Reject Claim\')"", ""alternate_succession:(\'High Medical History\', \'Accept Claim\')"", ""alternate_succession:(\'High Medical History\', \'High Insurance Check\')"", ""alternate_succession:(\'High Medical History\', \'Low Medical History\')"", ""alternate_succession:(\'High Medical History\', \'Register\')"", ""alternate_succession:(\'High Medical History\', \'Send Questionnaire\')"", ""alternate_succession:(\'High Medical History\', \'Send Notification by Post\')"", ""alternate_succession:(\'High Medical History\', \'Create Questionnaire\')"", ""alternate_succession:(\'High Medical History\', \'Contact Hospital\')"", ""alternate_succession:(\'High Medical History\', \'Prepare Notification Content\')"", ""alternate_succession:(\'High Medical History\', \'Send Notification by e-mail\')"", ""alternate_succession:(\'Send Notification by e-mail\', \'Low Insurance Check\')"", ""alternate_succession:(\'Send Notification by e-mail\', \'Reject Claim\')"", ""alternate_succession:(\'Send Notification by e-mail\', \'Accept Claim\')"", ""alternate_succession:(\'Send Notification by e-mail\', \'High Insurance Check\')"", ""alternate_succession:(\'Send Notification by e-mail\', \'Low Medical History\')"", ""alternate_succession:(\'Send Notification by e-mail\', \'Register\')"", ""alternate_succession:(\'Send Notification by e-mail\', \'Send Questionnaire\')"", ""alternate_succession:(\'Send Notification by e-mail\', \'Send Notification by Post\')"", ""alternate_succession:(\'Send Notification by e-mail\', \'Create Questionnaire\')"", ""alternate_succession:(\'Send Notification by e-mail\', \'Contact Hospital\')"", ""alternate_succession:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"", ""alternate_succession:(\'Send Notification by e-mail\', \'High Medical History\')"", ""alternate_response:(\'Low Insurance Check\', \'Reject Claim\')"", ""alternate_response:(\'Low Insurance Check\', \'Accept Claim\')"", ""alternate_response:(\'Low Insurance Check\', \'High Insurance Check\')"", ""alternate_response:(\'Low Insurance Check\', \'Low Medical History\')"", ""alternate_response:(\'Low Insurance Check\', \'Register\')"", ""alternate_response:(\'Low Insurance Check\', \'Send Questionnaire\')"", ""alternate_response:(\'Low Insurance Check\', \'Send Notification by Post\')"", ""alternate_response:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""alternate_response:(\'Low Insurance Check\', \'Contact Hospital\')"", ""alternate_response:(\'Low Insurance Check\', \'Prepare Notification Content\')"", ""alternate_response:(\'Low Insurance Check\', \'High Medical History\')"", ""alternate_response:(\'Low Insurance Check\', \'Send Notification by e-mail\')"", ""alternate_response:(\'Reject Claim\', \'Low Insurance Check\')"", ""alternate_response:(\'Reject Claim\', \'Accept Claim\')"", ""alternate_response:(\'Reject Claim\', \'High Insurance Check\')"", ""alternate_response:(\'Reject Claim\', \'Low Medical History\')"", ""alternate_response:(\'Reject Claim\', \'Register\')"", ""alternate_response:(\'Reject Claim\', \'Send Questionnaire\')"", ""alternate_response:(\'Reject Claim\', \'Send Notification by Post\')"", ""alternate_response:(\'Reject Claim\', \'Create Questionnaire\')"", ""alternate_response:(\'Reject Claim\', \'Contact Hospital\')"", ""alternate_response:(\'Reject Claim\', \'Prepare Notification Content\')"", ""alternate_response:(\'Reject Claim\', \'High Medical History\')"", ""alternate_response:(\'Reject Claim\', \'Send Notification by e-mail\')"", ""alternate_response:(\'Accept Claim\', \'Low Insurance Check\')"", ""alternate_response:(\'Accept Claim\', \'Reject Claim\')"", ""alternate_response:(\'Accept Claim\', \'High Insurance Check\')"", ""alternate_response:(\'Accept Claim\', \'Low Medical History\')"", ""alternate_response:(\'Accept Claim\', \'Register\')"", ""alternate_response:(\'Accept Claim\', \'Send Questionnaire\')"", ""alternate_response:(\'Accept Claim\', \'Send Notification by Post\')"", ""alternate_response:(\'Accept Claim\', \'Create Questionnaire\')"", ""alternate_response:(\'Accept Claim\', \'Contact Hospital\')"", ""alternate_response:(\'Accept Claim\', \'Prepare Notification Content\')"", ""alternate_response:(\'Accept Claim\', \'High Medical History\')"", ""alternate_response:(\'Accept Claim\', \'Send Notification by e-mail\')"", ""alternate_response:(\'High Insurance Check\', \'Low Insurance Check\')"", ""alternate_response:(\'High Insurance Check\', \'Reject Claim\')"", ""alternate_response:(\'High Insurance Check\', \'Accept Claim\')"", ""alternate_response:(\'High Insurance Check\', \'Low Medical History\')"", ""alternate_response:(\'High Insurance Check\', \'Register\')"", ""alternate_response:(\'High Insurance Check\', \'Send Questionnaire\')"", ""alternate_response:(\'High Insurance Check\', \'Send Notification by Post\')"", ""alternate_response:(\'High Insurance Check\', \'Create Questionnaire\')"", ""alternate_response:(\'High Insurance Check\', \'Contact Hospital\')"", ""alternate_response:(\'High Insurance Check\', \'Prepare Notification Content\')"", ""alternate_response:(\'High Insurance Check\', \'High Medical History\')"", ""alternate_response:(\'High Insurance Check\', \'Send Notification by e-mail\')"", ""alternate_response:(\'Low Medical History\', \'Low Insurance Check\')"", ""alternate_response:(\'Low Medical History\', \'Reject Claim\')"", ""alternate_response:(\'Low Medical History\', \'Accept Claim\')"", ""alternate_response:(\'Low Medical History\', \'High Insurance Check\')"", ""alternate_response:(\'Low Medical History\', \'Register\')"", ""alternate_response:(\'Low Medical History\', \'Send Questionnaire\')"", ""alternate_response:(\'Low Medical History\', \'Send Notification by Post\')"", ""alternate_response:(\'Low Medical History\', \'Create Questionnaire\')"", ""alternate_response:(\'Low Medical History\', \'Contact Hospital\')"", ""alternate_response:(\'Low Medical History\', \'Prepare Notification Content\')"", ""alternate_response:(\'Low Medical History\', \'High Medical History\')"", ""alternate_response:(\'Low Medical History\', \'Send Notification by e-mail\')"", ""alternate_response:(\'Register\', \'Low Insurance Check\')"", ""alternate_response:(\'Register\', \'Reject Claim\')"", ""alternate_response:(\'Register\', \'Accept Claim\')"", ""alternate_response:(\'Register\', \'High Insurance Check\')"", ""alternate_response:(\'Register\', \'Low Medical History\')"", ""alternate_response:(\'Register\', \'Send Questionnaire\')"", ""alternate_response:(\'Register\', \'Send Notification by Post\')"", ""alternate_response:(\'Register\', \'Create Questionnaire\')"", ""alternate_response:(\'Register\', \'Contact Hospital\')"", ""alternate_response:(\'Register\', \'Prepare Notification Content\')"", ""alternate_response:(\'Register\', \'High Medical History\')"", ""alternate_response:(\'Register\', \'Send Notification by e-mail\')"", ""alternate_response:(\'Send Questionnaire\', \'Low Insurance Check\')"", ""alternate_response:(\'Send Questionnaire\', \'Reject Claim\')"", ""alternate_response:(\'Send Questionnaire\', \'Accept Claim\')"", ""alternate_response:(\'Send Questionnaire\', \'High Insurance Check\')"", ""alternate_response:(\'Send Questionnaire\', \'Low Medical History\')"", ""alternate_response:(\'Send Questionnaire\', \'Register\')"", ""alternate_response:(\'Send Questionnaire\', \'Send Notification by Post\')"", ""alternate_response:(\'Send Questionnaire\', \'Create Questionnaire\')"", ""alternate_response:(\'Send Questionnaire\', \'Contact Hospital\')"", ""alternate_response:(\'Send Questionnaire\', \'Prepare Notification Content\')"", ""alternate_response:(\'Send Questionnaire\', \'High Medical History\')"", ""alternate_response:(\'Send Questionnaire\', \'Send Notification by e-mail\')"", ""alternate_response:(\'Send Notification by Post\', \'Low Insurance Check\')"", ""alternate_response:(\'Send Notification by Post\', \'Reject Claim\')"", ""alternate_response:(\'Send Notification by Post\', \'Accept Claim\')"", ""alternate_response:(\'Send Notification by Post\', \'High Insurance Check\')"", ""alternate_response:(\'Send Notification by Post\', \'Low Medical History\')"", ""alternate_response:(\'Send Notification by Post\', \'Register\')"", ""alternate_response:(\'Send Notification by Post\', \'Send Questionnaire\')"", ""alternate_response:(\'Send Notification by Post\', \'Create Questionnaire\')"", ""alternate_response:(\'Send Notification by Post\', \'Contact Hospital\')"", ""alternate_response:(\'Send Notification by Post\', \'Prepare Notification Content\')"", ""alternate_response:(\'Send Notification by Post\', \'High Medical History\')"", ""alternate_response:(\'Send Notification by Post\', \'Send Notification by e-mail\')"", ""alternate_response:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""alternate_response:(\'Create Questionnaire\', \'Reject Claim\')"", ""alternate_response:(\'Create Questionnaire\', \'Accept Claim\')"", ""alternate_response:(\'Create Questionnaire\', \'High Insurance Check\')"", ""alternate_response:(\'Create Questionnaire\', \'Low Medical History\')"", ""alternate_response:(\'Create Questionnaire\', \'Register\')"", ""alternate_response:(\'Create Questionnaire\', \'Send Questionnaire\')"", ""alternate_response:(\'Create Questionnaire\', \'Send Notification by Post\')"", ""alternate_response:(\'Create Questionnaire\', \'Contact Hospital\')"", ""alternate_response:(\'Create Questionnaire\', \'Prepare Notification Content\')"", ""alternate_response:(\'Create Questionnaire\', \'High Medical History\')"", ""alternate_response:(\'Create Questionnaire\', \'Send Notification by e-mail\')"", ""alternate_response:(\'Contact Hospital\', \'Low Insurance Check\')"", ""alternate_response:(\'Contact Hospital\', \'Reject Claim\')"", ""alternate_response:(\'Contact Hospital\', \'Accept Claim\')"", ""alternate_response:(\'Contact Hospital\', \'High Insurance Check\')"", ""alternate_response:(\'Contact Hospital\', \'Low Medical History\')"", ""alternate_response:(\'Contact Hospital\', \'Register\')"", ""alternate_response:(\'Contact Hospital\', \'Send Questionnaire\')"", ""alternate_response:(\'Contact Hospital\', \'Send Notification by Post\')"", ""alternate_response:(\'Contact Hospital\', \'Create Questionnaire\')"", ""alternate_response:(\'Contact Hospital\', \'Prepare Notification Content\')"", ""alternate_response:(\'Contact Hospital\', \'High Medical History\')"", ""alternate_response:(\'Contact Hospital\', \'Send Notification by e-mail\')"", ""alternate_response:(\'Prepare Notification Content\', \'Low Insurance Check\')"", ""alternate_response:(\'Prepare Notification Content\', \'Reject Claim\')"", ""alternate_response:(\'Prepare Notification Content\', \'Accept Claim\')"", ""alternate_response:(\'Prepare Notification Content\', \'High Insurance Check\')"", ""alternate_response:(\'Prepare Notification Content\', \'Low Medical History\')"", ""alternate_response:(\'Prepare Notification Content\', \'Register\')"", ""alternate_response:(\'Prepare Notification Content\', \'Send Questionnaire\')"", ""alternate_response:(\'Prepare Notification Content\', \'Send Notification by Post\')"", ""alternate_response:(\'Prepare Notification Content\', \'Create Questionnaire\')"", ""alternate_response:(\'Prepare Notification Content\', \'Contact Hospital\')"", ""alternate_response:(\'Prepare Notification Content\', \'High Medical History\')"", ""alternate_response:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"", ""alternate_response:(\'High Medical History\', \'Low Insurance Check\')"", ""alternate_response:(\'High Medical History\', \'Reject Claim\')"", ""alternate_response:(\'High Medical History\', \'Accept Claim\')"", ""alternate_response:(\'High Medical History\', \'High Insurance Check\')"", ""alternate_response:(\'High Medical History\', \'Low Medical History\')"", ""alternate_response:(\'High Medical History\', \'Register\')"", ""alternate_response:(\'High Medical History\', \'Send Questionnaire\')"", ""alternate_response:(\'High Medical History\', \'Send Notification by Post\')"", ""alternate_response:(\'High Medical History\', \'Create Questionnaire\')"", ""alternate_response:(\'High Medical History\', \'Contact Hospital\')"", ""alternate_response:(\'High Medical History\', \'Prepare Notification Content\')"", ""alternate_response:(\'High Medical History\', \'Send Notification by e-mail\')"", ""alternate_response:(\'Send Notification by e-mail\', \'Low Insurance Check\')"", ""alternate_response:(\'Send Notification by e-mail\', \'Reject Claim\')"", ""alternate_response:(\'Send Notification by e-mail\', \'Accept Claim\')"", ""alternate_response:(\'Send Notification by e-mail\', \'High Insurance Check\')"", ""alternate_response:(\'Send Notification by e-mail\', \'Low Medical History\')"", ""alternate_response:(\'Send Notification by e-mail\', \'Register\')"", ""alternate_response:(\'Send Notification by e-mail\', \'Send Questionnaire\')"", ""alternate_response:(\'Send Notification by e-mail\', \'Send Notification by Post\')"", ""alternate_response:(\'Send Notification by e-mail\', \'Create Questionnaire\')"", ""alternate_response:(\'Send Notification by e-mail\', \'Contact Hospital\')"", ""alternate_response:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"", ""alternate_response:(\'Send Notification by e-mail\', \'High Medical History\')"", ""chain_precedence:(\'Low Insurance Check\', \'Reject Claim\')"", ""chain_precedence:(\'Low Insurance Check\', \'Accept Claim\')"", ""chain_precedence:(\'Low Insurance Check\', \'High Insurance Check\')"", ""chain_precedence:(\'Low Insurance Check\', \'Low Medical History\')"", ""chain_precedence:(\'Low Insurance Check\', \'Register\')"", ""chain_precedence:(\'Low Insurance Check\', \'Send Questionnaire\')"", ""chain_precedence:(\'Low Insurance Check\', \'Send Notification by Post\')"", ""chain_precedence:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""chain_precedence:(\'Low Insurance Check\', \'Contact Hospital\')"", ""chain_precedence:(\'Low Insurance Check\', \'Prepare Notification Content\')"", ""chain_precedence:(\'Low Insurance Check\', \'High Medical History\')"", ""chain_precedence:(\'Low Insurance Check\', \'Send Notification by e-mail\')"", ""chain_precedence:(\'Reject Claim\', \'Low Insurance Check\')"", ""chain_precedence:(\'Reject Claim\', \'Accept Claim\')"", ""chain_precedence:(\'Reject Claim\', \'High Insurance Check\')"", ""chain_precedence:(\'Reject Claim\', \'Low Medical History\')"", ""chain_precedence:(\'Reject Claim\', \'Register\')"", ""chain_precedence:(\'Reject Claim\', \'Send Questionnaire\')"", ""chain_precedence:(\'Reject Claim\', \'Send Notification by Post\')"", ""chain_precedence:(\'Reject Claim\', \'Create Questionnaire\')"", ""chain_precedence:(\'Reject Claim\', \'Contact Hospital\')"", ""chain_precedence:(\'Reject Claim\', \'Prepare Notification Content\')"", ""chain_precedence:(\'Reject Claim\', \'High Medical History\')"", ""chain_precedence:(\'Reject Claim\', \'Send Notification by e-mail\')"", ""chain_precedence:(\'Accept Claim\', \'Low Insurance Check\')"", ""chain_precedence:(\'Accept Claim\', \'Reject Claim\')"", ""chain_precedence:(\'Accept Claim\', \'High Insurance Check\')"", ""chain_precedence:(\'Accept Claim\', \'Low Medical History\')"", ""chain_precedence:(\'Accept Claim\', \'Register\')"", ""chain_precedence:(\'Accept Claim\', \'Send Questionnaire\')"", ""chain_precedence:(\'Accept Claim\', \'Send Notification by Post\')"", ""chain_precedence:(\'Accept Claim\', \'Create Questionnaire\')"", ""chain_precedence:(\'Accept Claim\', \'Contact Hospital\')"", ""chain_precedence:(\'Accept Claim\', \'Prepare Notification Content\')"", ""chain_precedence:(\'Accept Claim\', \'High Medical History\')"", ""chain_precedence:(\'Accept Claim\', \'Send Notification by e-mail\')"", ""chain_precedence:(\'High Insurance Check\', \'Low Insurance Check\')"", ""chain_precedence:(\'High Insurance Check\', \'Reject Claim\')"", ""chain_precedence:(\'High Insurance Check\', \'Accept Claim\')"", ""chain_precedence:(\'High Insurance Check\', \'Low Medical History\')"", ""chain_precedence:(\'High Insurance Check\', \'Register\')"", ""chain_precedence:(\'High Insurance Check\', \'Send Questionnaire\')"", ""chain_precedence:(\'High Insurance Check\', \'Send Notification by Post\')"", ""chain_precedence:(\'High Insurance Check\', \'Create Questionnaire\')"", ""chain_precedence:(\'High Insurance Check\', \'Contact Hospital\')"", ""chain_precedence:(\'High Insurance Check\', \'Prepare Notification Content\')"", ""chain_precedence:(\'High Insurance Check\', \'High Medical History\')"", ""chain_precedence:(\'High Insurance Check\', \'Send Notification by e-mail\')"", ""chain_precedence:(\'Low Medical History\', \'Low Insurance Check\')"", ""chain_precedence:(\'Low Medical History\', \'Reject Claim\')"", ""chain_precedence:(\'Low Medical History\', \'Accept Claim\')"", ""chain_precedence:(\'Low Medical History\', \'High Insurance Check\')"", ""chain_precedence:(\'Low Medical History\', \'Register\')"", ""chain_precedence:(\'Low Medical History\', \'Send Questionnaire\')"", ""chain_precedence:(\'Low Medical History\', \'Send Notification by Post\')"", ""chain_precedence:(\'Low Medical History\', \'Create Questionnaire\')"", ""chain_precedence:(\'Low Medical History\', \'Contact Hospital\')"", ""chain_precedence:(\'Low Medical History\', \'Prepare Notification Content\')"", ""chain_precedence:(\'Low Medical History\', \'High Medical History\')"", ""chain_precedence:(\'Low Medical History\', \'Send Notification by e-mail\')"", ""chain_precedence:(\'Register\', \'Low Insurance Check\')"", ""chain_precedence:(\'Register\', \'Reject Claim\')"", ""chain_precedence:(\'Register\', \'Accept Claim\')"", ""chain_precedence:(\'Register\', \'High Insurance Check\')"", ""chain_precedence:(\'Register\', \'Low Medical History\')"", ""chain_precedence:(\'Register\', \'Send Questionnaire\')"", ""chain_precedence:(\'Register\', \'Send Notification by Post\')"", ""chain_precedence:(\'Register\', \'Create Questionnaire\')"", ""chain_precedence:(\'Register\', \'Contact Hospital\')"", ""chain_precedence:(\'Register\', \'Prepare Notification Content\')"", ""chain_precedence:(\'Register\', \'High Medical History\')"", ""chain_precedence:(\'Register\', \'Send Notification by e-mail\')"", ""chain_precedence:(\'Send Questionnaire\', \'Low Insurance Check\')"", ""chain_precedence:(\'Send Questionnaire\', \'Reject Claim\')"", ""chain_precedence:(\'Send Questionnaire\', \'Accept Claim\')"", ""chain_precedence:(\'Send Questionnaire\', \'High Insurance Check\')"", ""chain_precedence:(\'Send Questionnaire\', \'Low Medical History\')"", ""chain_precedence:(\'Send Questionnaire\', \'Register\')"", ""chain_precedence:(\'Send Questionnaire\', \'Send Notification by Post\')"", ""chain_precedence:(\'Send Questionnaire\', \'Create Questionnaire\')"", ""chain_precedence:(\'Send Questionnaire\', \'Contact Hospital\')"", ""chain_precedence:(\'Send Questionnaire\', \'Prepare Notification Content\')"", ""chain_precedence:(\'Send Questionnaire\', \'High Medical History\')"", ""chain_precedence:(\'Send Questionnaire\', \'Send Notification by e-mail\')"", ""chain_precedence:(\'Send Notification by Post\', \'Low Insurance Check\')"", ""chain_precedence:(\'Send Notification by Post\', \'Reject Claim\')"", ""chain_precedence:(\'Send Notification by Post\', \'Accept Claim\')"", ""chain_precedence:(\'Send Notification by Post\', \'High Insurance Check\')"", ""chain_precedence:(\'Send Notification by Post\', \'Low Medical History\')"", ""chain_precedence:(\'Send Notification by Post\', \'Register\')"", ""chain_precedence:(\'Send Notification by Post\', \'Send Questionnaire\')"", ""chain_precedence:(\'Send Notification by Post\', \'Create Questionnaire\')"", ""chain_precedence:(\'Send Notification by Post\', \'Contact Hospital\')"", ""chain_precedence:(\'Send Notification by Post\', \'Prepare Notification Content\')"", ""chain_precedence:(\'Send Notification by Post\', \'High Medical History\')"", ""chain_precedence:(\'Send Notification by Post\', \'Send Notification by e-mail\')"", ""chain_precedence:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""chain_precedence:(\'Create Questionnaire\', \'Reject Claim\')"", ""chain_precedence:(\'Create Questionnaire\', \'Accept Claim\')"", ""chain_precedence:(\'Create Questionnaire\', \'High Insurance Check\')"", ""chain_precedence:(\'Create Questionnaire\', \'Low Medical History\')"", ""chain_precedence:(\'Create Questionnaire\', \'Register\')"", ""chain_precedence:(\'Create Questionnaire\', \'Send Questionnaire\')"", ""chain_precedence:(\'Create Questionnaire\', \'Send Notification by Post\')"", ""chain_precedence:(\'Create Questionnaire\', \'Contact Hospital\')"", ""chain_precedence:(\'Create Questionnaire\', \'Prepare Notification Content\')"", ""chain_precedence:(\'Create Questionnaire\', \'High Medical History\')"", ""chain_precedence:(\'Create Questionnaire\', \'Send Notification by e-mail\')"", ""chain_precedence:(\'Contact Hospital\', \'Low Insurance Check\')"", ""chain_precedence:(\'Contact Hospital\', \'Reject Claim\')"", ""chain_precedence:(\'Contact Hospital\', \'Accept Claim\')"", ""chain_precedence:(\'Contact Hospital\', \'High Insurance Check\')"", ""chain_precedence:(\'Contact Hospital\', \'Low Medical History\')"", ""chain_precedence:(\'Contact Hospital\', \'Register\')"", ""chain_precedence:(\'Contact Hospital\', \'Send Questionnaire\')"", ""chain_precedence:(\'Contact Hospital\', \'Send Notification by Post\')"", ""chain_precedence:(\'Contact Hospital\', \'Create Questionnaire\')"", ""chain_precedence:(\'Contact Hospital\', \'Prepare Notification Content\')"", ""chain_precedence:(\'Contact Hospital\', \'High Medical History\')"", ""chain_precedence:(\'Contact Hospital\', \'Send Notification by e-mail\')"", ""chain_precedence:(\'Prepare Notification Content\', \'Low Insurance Check\')"", ""chain_precedence:(\'Prepare Notification Content\', \'Reject Claim\')"", ""chain_precedence:(\'Prepare Notification Content\', \'Accept Claim\')"", ""chain_precedence:(\'Prepare Notification Content\', \'High Insurance Check\')"", ""chain_precedence:(\'Prepare Notification Content\', \'Low Medical History\')"", ""chain_precedence:(\'Prepare Notification Content\', \'Register\')"", ""chain_precedence:(\'Prepare Notification Content\', \'Send Questionnaire\')"", ""chain_precedence:(\'Prepare Notification Content\', \'Send Notification by Post\')"", ""chain_precedence:(\'Prepare Notification Content\', \'Create Questionnaire\')"", ""chain_precedence:(\'Prepare Notification Content\', \'Contact Hospital\')"", ""chain_precedence:(\'Prepare Notification Content\', \'High Medical History\')"", ""chain_precedence:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"", ""chain_precedence:(\'High Medical History\', \'Low Insurance Check\')"", ""chain_precedence:(\'High Medical History\', \'Reject Claim\')"", ""chain_precedence:(\'High Medical History\', \'Accept Claim\')"", ""chain_precedence:(\'High Medical History\', \'High Insurance Check\')"", ""chain_precedence:(\'High Medical History\', \'Low Medical History\')"", ""chain_precedence:(\'High Medical History\', \'Register\')"", ""chain_precedence:(\'High Medical History\', \'Send Questionnaire\')"", ""chain_precedence:(\'High Medical History\', \'Send Notification by Post\')"", ""chain_precedence:(\'High Medical History\', \'Create Questionnaire\')"", ""chain_precedence:(\'High Medical History\', \'Contact Hospital\')"", ""chain_precedence:(\'High Medical History\', \'Prepare Notification Content\')"", ""chain_precedence:(\'High Medical History\', \'Send Notification by e-mail\')"", ""chain_precedence:(\'Send Notification by e-mail\', \'Low Insurance Check\')"", ""chain_precedence:(\'Send Notification by e-mail\', \'Reject Claim\')"", ""chain_precedence:(\'Send Notification by e-mail\', \'Accept Claim\')"", ""chain_precedence:(\'Send Notification by e-mail\', \'High Insurance Check\')"", ""chain_precedence:(\'Send Notification by e-mail\', \'Low Medical History\')"", ""chain_precedence:(\'Send Notification by e-mail\', \'Register\')"", ""chain_precedence:(\'Send Notification by e-mail\', \'Send Questionnaire\')"", ""chain_precedence:(\'Send Notification by e-mail\', \'Send Notification by Post\')"", ""chain_precedence:(\'Send Notification by e-mail\', \'Create Questionnaire\')"", ""chain_precedence:(\'Send Notification by e-mail\', \'Contact Hospital\')"", ""chain_precedence:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"", ""chain_precedence:(\'Send Notification by e-mail\', \'High Medical History\')"", ""chain_response:(\'Low Insurance Check\', \'Reject Claim\')"", ""chain_response:(\'Low Insurance Check\', \'Accept Claim\')"", ""chain_response:(\'Low Insurance Check\', \'High Insurance Check\')"", ""chain_response:(\'Low Insurance Check\', \'Low Medical History\')"", ""chain_response:(\'Low Insurance Check\', \'Register\')"", ""chain_response:(\'Low Insurance Check\', \'Send Questionnaire\')"", ""chain_response:(\'Low Insurance Check\', \'Send Notification by Post\')"", ""chain_response:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""chain_response:(\'Low Insurance Check\', \'Contact Hospital\')"", ""chain_response:(\'Low Insurance Check\', \'Prepare Notification Content\')"", ""chain_response:(\'Low Insurance Check\', \'High Medical History\')"", ""chain_response:(\'Low Insurance Check\', \'Send Notification by e-mail\')"", ""chain_response:(\'Reject Claim\', \'Low Insurance Check\')"", ""chain_response:(\'Reject Claim\', \'Accept Claim\')"", ""chain_response:(\'Reject Claim\', \'High Insurance Check\')"", ""chain_response:(\'Reject Claim\', \'Low Medical History\')"", ""chain_response:(\'Reject Claim\', \'Register\')"", ""chain_response:(\'Reject Claim\', \'Send Questionnaire\')"", ""chain_response:(\'Reject Claim\', \'Send Notification by Post\')"", ""chain_response:(\'Reject Claim\', \'Create Questionnaire\')"", ""chain_response:(\'Reject Claim\', \'Contact Hospital\')"", ""chain_response:(\'Reject Claim\', \'Prepare Notification Content\')"", ""chain_response:(\'Reject Claim\', \'High Medical History\')"", ""chain_response:(\'Reject Claim\', \'Send Notification by e-mail\')"", ""chain_response:(\'Accept Claim\', \'Low Insurance Check\')"", ""chain_response:(\'Accept Claim\', \'Reject Claim\')"", ""chain_response:(\'Accept Claim\', \'High Insurance Check\')"", ""chain_response:(\'Accept Claim\', \'Low Medical History\')"", ""chain_response:(\'Accept Claim\', \'Register\')"", ""chain_response:(\'Accept Claim\', \'Send Questionnaire\')"", ""chain_response:(\'Accept Claim\', \'Send Notification by Post\')"", ""chain_response:(\'Accept Claim\', \'Create Questionnaire\')"", ""chain_response:(\'Accept Claim\', \'Contact Hospital\')"", ""chain_response:(\'Accept Claim\', \'Prepare Notification Content\')"", ""chain_response:(\'Accept Claim\', \'High Medical History\')"", ""chain_response:(\'Accept Claim\', \'Send Notification by e-mail\')"", ""chain_response:(\'High Insurance Check\', \'Low Insurance Check\')"", ""chain_response:(\'High Insurance Check\', \'Reject Claim\')"", ""chain_response:(\'High Insurance Check\', \'Accept Claim\')"", ""chain_response:(\'High Insurance Check\', \'Low Medical History\')"", ""chain_response:(\'High Insurance Check\', \'Register\')"", ""chain_response:(\'High Insurance Check\', \'Send Questionnaire\')"", ""chain_response:(\'High Insurance Check\', \'Send Notification by Post\')"", ""chain_response:(\'High Insurance Check\', \'Create Questionnaire\')"", ""chain_response:(\'High Insurance Check\', \'Contact Hospital\')"", ""chain_response:(\'High Insurance Check\', \'Prepare Notification Content\')"", ""chain_response:(\'High Insurance Check\', \'High Medical History\')"", ""chain_response:(\'High Insurance Check\', \'Send Notification by e-mail\')"", ""chain_response:(\'Low Medical History\', \'Low Insurance Check\')"", ""chain_response:(\'Low Medical History\', \'Reject Claim\')"", ""chain_response:(\'Low Medical History\', \'Accept Claim\')"", ""chain_response:(\'Low Medical History\', \'High Insurance Check\')"", ""chain_response:(\'Low Medical History\', \'Register\')"", ""chain_response:(\'Low Medical History\', \'Send Questionnaire\')"", ""chain_response:(\'Low Medical History\', \'Send Notification by Post\')"", ""chain_response:(\'Low Medical History\', \'Create Questionnaire\')"", ""chain_response:(\'Low Medical History\', \'Contact Hospital\')"", ""chain_response:(\'Low Medical History\', \'Prepare Notification Content\')"", ""chain_response:(\'Low Medical History\', \'High Medical History\')"", ""chain_response:(\'Low Medical History\', \'Send Notification by e-mail\')"", ""chain_response:(\'Register\', \'Low Insurance Check\')"", ""chain_response:(\'Register\', \'Reject Claim\')"", ""chain_response:(\'Register\', \'Accept Claim\')"", ""chain_response:(\'Register\', \'High Insurance Check\')"", ""chain_response:(\'Register\', \'Low Medical History\')"", ""chain_response:(\'Register\', \'Send Questionnaire\')"", ""chain_response:(\'Register\', \'Send Notification by Post\')"", ""chain_response:(\'Register\', \'Create Questionnaire\')"", ""chain_response:(\'Register\', \'Contact Hospital\')"", ""chain_response:(\'Register\', \'Prepare Notification Content\')"", ""chain_response:(\'Register\', \'High Medical History\')"", ""chain_response:(\'Register\', \'Send Notification by e-mail\')"", ""chain_response:(\'Send Questionnaire\', \'Low Insurance Check\')"", ""chain_response:(\'Send Questionnaire\', \'Reject Claim\')"", ""chain_response:(\'Send Questionnaire\', \'Accept Claim\')"", ""chain_response:(\'Send Questionnaire\', \'High Insurance Check\')"", ""chain_response:(\'Send Questionnaire\', \'Low Medical History\')"", ""chain_response:(\'Send Questionnaire\', \'Register\')"", ""chain_response:(\'Send Questionnaire\', \'Send Notification by Post\')"", ""chain_response:(\'Send Questionnaire\', \'Create Questionnaire\')"", ""chain_response:(\'Send Questionnaire\', \'Contact Hospital\')"", ""chain_response:(\'Send Questionnaire\', \'Prepare Notification Content\')"", ""chain_response:(\'Send Questionnaire\', \'High Medical History\')"", ""chain_response:(\'Send Questionnaire\', \'Send Notification by e-mail\')"", ""chain_response:(\'Send Notification by Post\', \'Low Insurance Check\')"", ""chain_response:(\'Send Notification by Post\', \'Reject Claim\')"", ""chain_response:(\'Send Notification by Post\', \'Accept Claim\')"", ""chain_response:(\'Send Notification by Post\', \'High Insurance Check\')"", ""chain_response:(\'Send Notification by Post\', \'Low Medical History\')"", ""chain_response:(\'Send Notification by Post\', \'Register\')"", ""chain_response:(\'Send Notification by Post\', \'Send Questionnaire\')"", ""chain_response:(\'Send Notification by Post\', \'Create Questionnaire\')"", ""chain_response:(\'Send Notification by Post\', \'Contact Hospital\')"", ""chain_response:(\'Send Notification by Post\', \'Prepare Notification Content\')"", ""chain_response:(\'Send Notification by Post\', \'High Medical History\')"", ""chain_response:(\'Send Notification by Post\', \'Send Notification by e-mail\')"", ""chain_response:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""chain_response:(\'Create Questionnaire\', \'Reject Claim\')"", ""chain_response:(\'Create Questionnaire\', \'Accept Claim\')"", ""chain_response:(\'Create Questionnaire\', \'High Insurance Check\')"", ""chain_response:(\'Create Questionnaire\', \'Low Medical History\')"", ""chain_response:(\'Create Questionnaire\', \'Register\')"", ""chain_response:(\'Create Questionnaire\', \'Send Questionnaire\')"", ""chain_response:(\'Create Questionnaire\', \'Send Notification by Post\')"", ""chain_response:(\'Create Questionnaire\', \'Contact Hospital\')"", ""chain_response:(\'Create Questionnaire\', \'Prepare Notification Content\')"", ""chain_response:(\'Create Questionnaire\', \'High Medical History\')"", ""chain_response:(\'Create Questionnaire\', \'Send Notification by e-mail\')"", ""chain_response:(\'Contact Hospital\', \'Low Insurance Check\')"", ""chain_response:(\'Contact Hospital\', \'Reject Claim\')"", ""chain_response:(\'Contact Hospital\', \'Accept Claim\')"", ""chain_response:(\'Contact Hospital\', \'High Insurance Check\')"", ""chain_response:(\'Contact Hospital\', \'Low Medical History\')"", ""chain_response:(\'Contact Hospital\', \'Register\')"", ""chain_response:(\'Contact Hospital\', \'Send Questionnaire\')"", ""chain_response:(\'Contact Hospital\', \'Send Notification by Post\')"", ""chain_response:(\'Contact Hospital\', \'Create Questionnaire\')"", ""chain_response:(\'Contact Hospital\', \'Prepare Notification Content\')"", ""chain_response:(\'Contact Hospital\', \'High Medical History\')"", ""chain_response:(\'Contact Hospital\', \'Send Notification by e-mail\')"", ""chain_response:(\'Prepare Notification Content\', \'Low Insurance Check\')"", ""chain_response:(\'Prepare Notification Content\', \'Reject Claim\')"", ""chain_response:(\'Prepare Notification Content\', \'Accept Claim\')"", ""chain_response:(\'Prepare Notification Content\', \'High Insurance Check\')"", ""chain_response:(\'Prepare Notification Content\', \'Low Medical History\')"", ""chain_response:(\'Prepare Notification Content\', \'Register\')"", ""chain_response:(\'Prepare Notification Content\', \'Send Questionnaire\')"", ""chain_response:(\'Prepare Notification Content\', \'Send Notification by Post\')"", ""chain_response:(\'Prepare Notification Content\', \'Create Questionnaire\')"", ""chain_response:(\'Prepare Notification Content\', \'Contact Hospital\')"", ""chain_response:(\'Prepare Notification Content\', \'High Medical History\')"", ""chain_response:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"", ""chain_response:(\'High Medical History\', \'Low Insurance Check\')"", ""chain_response:(\'High Medical History\', \'Reject Claim\')"", ""chain_response:(\'High Medical History\', \'Accept Claim\')"", ""chain_response:(\'High Medical History\', \'High Insurance Check\')"", ""chain_response:(\'High Medical History\', \'Low Medical History\')"", ""chain_response:(\'High Medical History\', \'Register\')"", ""chain_response:(\'High Medical History\', \'Send Questionnaire\')"", ""chain_response:(\'High Medical History\', \'Send Notification by Post\')"", ""chain_response:(\'High Medical History\', \'Create Questionnaire\')"", ""chain_response:(\'High Medical History\', \'Contact Hospital\')"", ""chain_response:(\'High Medical History\', \'Prepare Notification Content\')"", ""chain_response:(\'High Medical History\', \'Send Notification by e-mail\')"", ""chain_response:(\'Send Notification by e-mail\', \'Low Insurance Check\')"", ""chain_response:(\'Send Notification by e-mail\', \'Reject Claim\')"", ""chain_response:(\'Send Notification by e-mail\', \'Accept Claim\')"", ""chain_response:(\'Send Notification by e-mail\', \'High Insurance Check\')"", ""chain_response:(\'Send Notification by e-mail\', \'Low Medical History\')"", ""chain_response:(\'Send Notification by e-mail\', \'Register\')"", ""chain_response:(\'Send Notification by e-mail\', \'Send Questionnaire\')"", ""chain_response:(\'Send Notification by e-mail\', \'Send Notification by Post\')"", ""chain_response:(\'Send Notification by e-mail\', \'Create Questionnaire\')"", ""chain_response:(\'Send Notification by e-mail\', \'Contact Hospital\')"", ""chain_response:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"", ""chain_response:(\'Send Notification by e-mail\', \'High Medical History\')"", ""chain_succession:(\'Low Insurance Check\', \'Reject Claim\')"", ""chain_succession:(\'Low Insurance Check\', \'Accept Claim\')"", ""chain_succession:(\'Low Insurance Check\', \'High Insurance Check\')"", ""chain_succession:(\'Low Insurance Check\', \'Low Medical History\')"", ""chain_succession:(\'Low Insurance Check\', \'Register\')"", ""chain_succession:(\'Low Insurance Check\', \'Send Questionnaire\')"", ""chain_succession:(\'Low Insurance Check\', \'Send Notification by Post\')"", ""chain_succession:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""chain_succession:(\'Low Insurance Check\', \'Contact Hospital\')"", ""chain_succession:(\'Low Insurance Check\', \'Prepare Notification Content\')"", ""chain_succession:(\'Low Insurance Check\', \'High Medical History\')"", ""chain_succession:(\'Low Insurance Check\', \'Send Notification by e-mail\')"", ""chain_succession:(\'Reject Claim\', \'Low Insurance Check\')"", ""chain_succession:(\'Reject Claim\', \'Accept Claim\')"", ""chain_succession:(\'Reject Claim\', \'High Insurance Check\')"", ""chain_succession:(\'Reject Claim\', \'Low Medical History\')"", ""chain_succession:(\'Reject Claim\', \'Register\')"", ""chain_succession:(\'Reject Claim\', \'Send Questionnaire\')"", ""chain_succession:(\'Reject Claim\', \'Send Notification by Post\')"", ""chain_succession:(\'Reject Claim\', \'Create Questionnaire\')"", ""chain_succession:(\'Reject Claim\', \'Contact Hospital\')"", ""chain_succession:(\'Reject Claim\', \'Prepare Notification Content\')"", ""chain_succession:(\'Reject Claim\', \'High Medical History\')"", ""chain_succession:(\'Reject Claim\', \'Send Notification by e-mail\')"", ""chain_succession:(\'Accept Claim\', \'Low Insurance Check\')"", ""chain_succession:(\'Accept Claim\', \'Reject Claim\')"", ""chain_succession:(\'Accept Claim\', \'High Insurance Check\')"", ""chain_succession:(\'Accept Claim\', \'Low Medical History\')"", ""chain_succession:(\'Accept Claim\', \'Register\')"", ""chain_succession:(\'Accept Claim\', \'Send Questionnaire\')"", ""chain_succession:(\'Accept Claim\', \'Send Notification by Post\')"", ""chain_succession:(\'Accept Claim\', \'Create Questionnaire\')"", ""chain_succession:(\'Accept Claim\', \'Contact Hospital\')"", ""chain_succession:(\'Accept Claim\', \'Prepare Notification Content\')"", ""chain_succession:(\'Accept Claim\', \'High Medical History\')"", ""chain_succession:(\'Accept Claim\', \'Send Notification by e-mail\')"", ""chain_succession:(\'High Insurance Check\', \'Low Insurance Check\')"", ""chain_succession:(\'High Insurance Check\', \'Reject Claim\')"", ""chain_succession:(\'High Insurance Check\', \'Accept Claim\')"", ""chain_succession:(\'High Insurance Check\', \'Low Medical History\')"", ""chain_succession:(\'High Insurance Check\', \'Register\')"", ""chain_succession:(\'High Insurance Check\', \'Send Questionnaire\')"", ""chain_succession:(\'High Insurance Check\', \'Send Notification by Post\')"", ""chain_succession:(\'High Insurance Check\', \'Create Questionnaire\')"", ""chain_succession:(\'High Insurance Check\', \'Contact Hospital\')"", ""chain_succession:(\'High Insurance Check\', \'Prepare Notification Content\')"", ""chain_succession:(\'High Insurance Check\', \'High Medical History\')"", ""chain_succession:(\'High Insurance Check\', \'Send Notification by e-mail\')"", ""chain_succession:(\'Low Medical History\', \'Low Insurance Check\')"", ""chain_succession:(\'Low Medical History\', \'Reject Claim\')"", ""chain_succession:(\'Low Medical History\', \'Accept Claim\')"", ""chain_succession:(\'Low Medical History\', \'High Insurance Check\')"", ""chain_succession:(\'Low Medical History\', \'Register\')"", ""chain_succession:(\'Low Medical History\', \'Send Questionnaire\')"", ""chain_succession:(\'Low Medical History\', \'Send Notification by Post\')"", ""chain_succession:(\'Low Medical History\', \'Create Questionnaire\')"", ""chain_succession:(\'Low Medical History\', \'Contact Hospital\')"", ""chain_succession:(\'Low Medical History\', \'Prepare Notification Content\')"", ""chain_succession:(\'Low Medical History\', \'High Medical History\')"", ""chain_succession:(\'Low Medical History\', \'Send Notification by e-mail\')"", ""chain_succession:(\'Register\', \'Low Insurance Check\')"", ""chain_succession:(\'Register\', \'Reject Claim\')"", ""chain_succession:(\'Register\', \'Accept Claim\')"", ""chain_succession:(\'Register\', \'High Insurance Check\')"", ""chain_succession:(\'Register\', \'Low Medical History\')"", ""chain_succession:(\'Register\', \'Send Questionnaire\')"", ""chain_succession:(\'Register\', \'Send Notification by Post\')"", ""chain_succession:(\'Register\', \'Create Questionnaire\')"", ""chain_succession:(\'Register\', \'Contact Hospital\')"", ""chain_succession:(\'Register\', \'Prepare Notification Content\')"", ""chain_succession:(\'Register\', \'High Medical History\')"", ""chain_succession:(\'Register\', \'Send Notification by e-mail\')"", ""chain_succession:(\'Send Questionnaire\', \'Low Insurance Check\')"", ""chain_succession:(\'Send Questionnaire\', \'Reject Claim\')"", ""chain_succession:(\'Send Questionnaire\', \'Accept Claim\')"", ""chain_succession:(\'Send Questionnaire\', \'High Insurance Check\')"", ""chain_succession:(\'Send Questionnaire\', \'Low Medical History\')"", ""chain_succession:(\'Send Questionnaire\', \'Register\')"", ""chain_succession:(\'Send Questionnaire\', \'Send Notification by Post\')"", ""chain_succession:(\'Send Questionnaire\', \'Create Questionnaire\')"", ""chain_succession:(\'Send Questionnaire\', \'Contact Hospital\')"", ""chain_succession:(\'Send Questionnaire\', \'Prepare Notification Content\')"", ""chain_succession:(\'Send Questionnaire\', \'High Medical History\')"", ""chain_succession:(\'Send Questionnaire\', \'Send Notification by e-mail\')"", ""chain_succession:(\'Send Notification by Post\', \'Low Insurance Check\')"", ""chain_succession:(\'Send Notification by Post\', \'Reject Claim\')"", ""chain_succession:(\'Send Notification by Post\', \'Accept Claim\')"", ""chain_succession:(\'Send Notification by Post\', \'High Insurance Check\')"", ""chain_succession:(\'Send Notification by Post\', \'Low Medical History\')"", ""chain_succession:(\'Send Notification by Post\', \'Register\')"", ""chain_succession:(\'Send Notification by Post\', \'Send Questionnaire\')"", ""chain_succession:(\'Send Notification by Post\', \'Create Questionnaire\')"", ""chain_succession:(\'Send Notification by Post\', \'Contact Hospital\')"", ""chain_succession:(\'Send Notification by Post\', \'Prepare Notification Content\')"", ""chain_succession:(\'Send Notification by Post\', \'High Medical History\')"", ""chain_succession:(\'Send Notification by Post\', \'Send Notification by e-mail\')"", ""chain_succession:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""chain_succession:(\'Create Questionnaire\', \'Reject Claim\')"", ""chain_succession:(\'Create Questionnaire\', \'Accept Claim\')"", ""chain_succession:(\'Create Questionnaire\', \'High Insurance Check\')"", ""chain_succession:(\'Create Questionnaire\', \'Low Medical History\')"", ""chain_succession:(\'Create Questionnaire\', \'Register\')"", ""chain_succession:(\'Create Questionnaire\', \'Send Questionnaire\')"", ""chain_succession:(\'Create Questionnaire\', \'Send Notification by Post\')"", ""chain_succession:(\'Create Questionnaire\', \'Contact Hospital\')"", ""chain_succession:(\'Create Questionnaire\', \'Prepare Notification Content\')"", ""chain_succession:(\'Create Questionnaire\', \'High Medical History\')"", ""chain_succession:(\'Create Questionnaire\', \'Send Notification by e-mail\')"", ""chain_succession:(\'Contact Hospital\', \'Low Insurance Check\')"", ""chain_succession:(\'Contact Hospital\', \'Reject Claim\')"", ""chain_succession:(\'Contact Hospital\', \'Accept Claim\')"", ""chain_succession:(\'Contact Hospital\', \'High Insurance Check\')"", ""chain_succession:(\'Contact Hospital\', \'Low Medical History\')"", ""chain_succession:(\'Contact Hospital\', \'Register\')"", ""chain_succession:(\'Contact Hospital\', \'Send Questionnaire\')"", ""chain_succession:(\'Contact Hospital\', \'Send Notification by Post\')"", ""chain_succession:(\'Contact Hospital\', \'Create Questionnaire\')"", ""chain_succession:(\'Contact Hospital\', \'Prepare Notification Content\')"", ""chain_succession:(\'Contact Hospital\', \'High Medical History\')"", ""chain_succession:(\'Contact Hospital\', \'Send Notification by e-mail\')"", ""chain_succession:(\'Prepare Notification Content\', \'Low Insurance Check\')"", ""chain_succession:(\'Prepare Notification Content\', \'Reject Claim\')"", ""chain_succession:(\'Prepare Notification Content\', \'Accept Claim\')"", ""chain_succession:(\'Prepare Notification Content\', \'High Insurance Check\')"", ""chain_succession:(\'Prepare Notification Content\', \'Low Medical History\')"", ""chain_succession:(\'Prepare Notification Content\', \'Register\')"", ""chain_succession:(\'Prepare Notification Content\', \'Send Questionnaire\')"", ""chain_succession:(\'Prepare Notification Content\', \'Send Notification by Post\')"", ""chain_succession:(\'Prepare Notification Content\', \'Create Questionnaire\')"", ""chain_succession:(\'Prepare Notification Content\', \'Contact Hospital\')"", ""chain_succession:(\'Prepare Notification Content\', \'High Medical History\')"", ""chain_succession:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"", ""chain_succession:(\'High Medical History\', \'Low Insurance Check\')"", ""chain_succession:(\'High Medical History\', \'Reject Claim\')"", ""chain_succession:(\'High Medical History\', \'Accept Claim\')"", ""chain_succession:(\'High Medical History\', \'High Insurance Check\')"", ""chain_succession:(\'High Medical History\', \'Low Medical History\')"", ""chain_succession:(\'High Medical History\', \'Register\')"", ""chain_succession:(\'High Medical History\', \'Send Questionnaire\')"", ""chain_succession:(\'High Medical History\', \'Send Notification by Post\')"", ""chain_succession:(\'High Medical History\', \'Create Questionnaire\')"", ""chain_succession:(\'High Medical History\', \'Contact Hospital\')"", ""chain_succession:(\'High Medical History\', \'Prepare Notification Content\')"", ""chain_succession:(\'High Medical History\', \'Send Notification by e-mail\')"", ""chain_succession:(\'Send Notification by e-mail\', \'Low Insurance Check\')"", ""chain_succession:(\'Send Notification by e-mail\', \'Reject Claim\')"", ""chain_succession:(\'Send Notification by e-mail\', \'Accept Claim\')"", ""chain_succession:(\'Send Notification by e-mail\', \'High Insurance Check\')"", ""chain_succession:(\'Send Notification by e-mail\', \'Low Medical History\')"", ""chain_succession:(\'Send Notification by e-mail\', \'Register\')"", ""chain_succession:(\'Send Notification by e-mail\', \'Send Questionnaire\')"", ""chain_succession:(\'Send Notification by e-mail\', \'Send Notification by Post\')"", ""chain_succession:(\'Send Notification by e-mail\', \'Create Questionnaire\')"", ""chain_succession:(\'Send Notification by e-mail\', \'Contact Hospital\')"", ""chain_succession:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"", ""chain_succession:(\'Send Notification by e-mail\', \'High Medical History\')"", ""not_chain_succession:(\'Low Insurance Check\', \'Reject Claim\')"", ""not_chain_succession:(\'Low Insurance Check\', \'Accept Claim\')"", ""not_chain_succession:(\'Low Insurance Check\', \'High Insurance Check\')"", ""not_chain_succession:(\'Low Insurance Check\', \'Low Medical History\')"", ""not_chain_succession:(\'Low Insurance Check\', \'Register\')"", ""not_chain_succession:(\'Low Insurance Check\', \'Send Questionnaire\')"", ""not_chain_succession:(\'Low Insurance Check\', \'Send Notification by Post\')"", ""not_chain_succession:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""not_chain_succession:(\'Low Insurance Check\', \'Contact Hospital\')"", ""not_chain_succession:(\'Low Insurance Check\', \'Prepare Notification Content\')"", ""not_chain_succession:(\'Low Insurance Check\', \'High Medical History\')"", ""not_chain_succession:(\'Low Insurance Check\', \'Send Notification by e-mail\')"", ""not_chain_succession:(\'Reject Claim\', \'Low Insurance Check\')"", ""not_chain_succession:(\'Reject Claim\', \'Accept Claim\')"", ""not_chain_succession:(\'Reject Claim\', \'High Insurance Check\')"", ""not_chain_succession:(\'Reject Claim\', \'Low Medical History\')"", ""not_chain_succession:(\'Reject Claim\', \'Register\')"", ""not_chain_succession:(\'Reject Claim\', \'Send Questionnaire\')"", ""not_chain_succession:(\'Reject Claim\', \'Send Notification by Post\')"", ""not_chain_succession:(\'Reject Claim\', \'Create Questionnaire\')"", ""not_chain_succession:(\'Reject Claim\', \'Contact Hospital\')"", ""not_chain_succession:(\'Reject Claim\', \'Prepare Notification Content\')"", ""not_chain_succession:(\'Reject Claim\', \'High Medical History\')"", ""not_chain_succession:(\'Reject Claim\', \'Send Notification by e-mail\')"", ""not_chain_succession:(\'Accept Claim\', \'Low Insurance Check\')"", ""not_chain_succession:(\'Accept Claim\', \'Reject Claim\')"", ""not_chain_succession:(\'Accept Claim\', \'High Insurance Check\')"", ""not_chain_succession:(\'Accept Claim\', \'Low Medical History\')"", ""not_chain_succession:(\'Accept Claim\', \'Register\')"", ""not_chain_succession:(\'Accept Claim\', \'Send Questionnaire\')"", ""not_chain_succession:(\'Accept Claim\', \'Send Notification by Post\')"", ""not_chain_succession:(\'Accept Claim\', \'Create Questionnaire\')"", ""not_chain_succession:(\'Accept Claim\', \'Contact Hospital\')"", ""not_chain_succession:(\'Accept Claim\', \'Prepare Notification Content\')"", ""not_chain_succession:(\'Accept Claim\', \'High Medical History\')"", ""not_chain_succession:(\'Accept Claim\', \'Send Notification by e-mail\')"", ""not_chain_succession:(\'High Insurance Check\', \'Low Insurance Check\')"", ""not_chain_succession:(\'High Insurance Check\', \'Reject Claim\')"", ""not_chain_succession:(\'High Insurance Check\', \'Accept Claim\')"", ""not_chain_succession:(\'High Insurance Check\', \'Low Medical History\')"", ""not_chain_succession:(\'High Insurance Check\', \'Register\')"", ""not_chain_succession:(\'High Insurance Check\', \'Send Questionnaire\')"", ""not_chain_succession:(\'High Insurance Check\', \'Send Notification by Post\')"", ""not_chain_succession:(\'High Insurance Check\', \'Create Questionnaire\')"", ""not_chain_succession:(\'High Insurance Check\', \'Contact Hospital\')"", ""not_chain_succession:(\'High Insurance Check\', \'Prepare Notification Content\')"", ""not_chain_succession:(\'High Insurance Check\', \'High Medical History\')"", ""not_chain_succession:(\'High Insurance Check\', \'Send Notification by e-mail\')"", ""not_chain_succession:(\'Low Medical History\', \'Low Insurance Check\')"", ""not_chain_succession:(\'Low Medical History\', \'Reject Claim\')"", ""not_chain_succession:(\'Low Medical History\', \'Accept Claim\')"", ""not_chain_succession:(\'Low Medical History\', \'High Insurance Check\')"", ""not_chain_succession:(\'Low Medical History\', \'Register\')"", ""not_chain_succession:(\'Low Medical History\', \'Send Questionnaire\')"", ""not_chain_succession:(\'Low Medical History\', \'Send Notification by Post\')"", ""not_chain_succession:(\'Low Medical History\', \'Create Questionnaire\')"", ""not_chain_succession:(\'Low Medical History\', \'Contact Hospital\')"", ""not_chain_succession:(\'Low Medical History\', \'Prepare Notification Content\')"", ""not_chain_succession:(\'Low Medical History\', \'High Medical History\')"", ""not_chain_succession:(\'Low Medical History\', \'Send Notification by e-mail\')"", ""not_chain_succession:(\'Register\', \'Low Insurance Check\')"", ""not_chain_succession:(\'Register\', \'Reject Claim\')"", ""not_chain_succession:(\'Register\', \'Accept Claim\')"", ""not_chain_succession:(\'Register\', \'High Insurance Check\')"", ""not_chain_succession:(\'Register\', \'Low Medical History\')"", ""not_chain_succession:(\'Register\', \'Send Questionnaire\')"", ""not_chain_succession:(\'Register\', \'Send Notification by Post\')"", ""not_chain_succession:(\'Register\', \'Create Questionnaire\')"", ""not_chain_succession:(\'Register\', \'Contact Hospital\')"", ""not_chain_succession:(\'Register\', \'Prepare Notification Content\')"", ""not_chain_succession:(\'Register\', \'High Medical History\')"", ""not_chain_succession:(\'Register\', \'Send Notification by e-mail\')"", ""not_chain_succession:(\'Send Questionnaire\', \'Low Insurance Check\')"", ""not_chain_succession:(\'Send Questionnaire\', \'Reject Claim\')"", ""not_chain_succession:(\'Send Questionnaire\', \'Accept Claim\')"", ""not_chain_succession:(\'Send Questionnaire\', \'High Insurance Check\')"", ""not_chain_succession:(\'Send Questionnaire\', \'Low Medical History\')"", ""not_chain_succession:(\'Send Questionnaire\', \'Register\')"", ""not_chain_succession:(\'Send Questionnaire\', \'Send Notification by Post\')"", ""not_chain_succession:(\'Send Questionnaire\', \'Create Questionnaire\')"", ""not_chain_succession:(\'Send Questionnaire\', \'Contact Hospital\')"", ""not_chain_succession:(\'Send Questionnaire\', \'Prepare Notification Content\')"", ""not_chain_succession:(\'Send Questionnaire\', \'High Medical History\')"", ""not_chain_succession:(\'Send Questionnaire\', \'Send Notification by e-mail\')"", ""not_chain_succession:(\'Send Notification by Post\', \'Low Insurance Check\')"", ""not_chain_succession:(\'Send Notification by Post\', \'Reject Claim\')"", ""not_chain_succession:(\'Send Notification by Post\', \'Accept Claim\')"", ""not_chain_succession:(\'Send Notification by Post\', \'High Insurance Check\')"", ""not_chain_succession:(\'Send Notification by Post\', \'Low Medical History\')"", ""not_chain_succession:(\'Send Notification by Post\', \'Register\')"", ""not_chain_succession:(\'Send Notification by Post\', \'Send Questionnaire\')"", ""not_chain_succession:(\'Send Notification by Post\', \'Create Questionnaire\')"", ""not_chain_succession:(\'Send Notification by Post\', \'Contact Hospital\')"", ""not_chain_succession:(\'Send Notification by Post\', \'Prepare Notification Content\')"", ""not_chain_succession:(\'Send Notification by Post\', \'High Medical History\')"", ""not_chain_succession:(\'Send Notification by Post\', \'Send Notification by e-mail\')"", ""not_chain_succession:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""not_chain_succession:(\'Create Questionnaire\', \'Reject Claim\')"", ""not_chain_succession:(\'Create Questionnaire\', \'Accept Claim\')"", ""not_chain_succession:(\'Create Questionnaire\', \'High Insurance Check\')"", ""not_chain_succession:(\'Create Questionnaire\', \'Low Medical History\')"", ""not_chain_succession:(\'Create Questionnaire\', \'Register\')"", ""not_chain_succession:(\'Create Questionnaire\', \'Send Questionnaire\')"", ""not_chain_succession:(\'Create Questionnaire\', \'Send Notification by Post\')"", ""not_chain_succession:(\'Create Questionnaire\', \'Contact Hospital\')"", ""not_chain_succession:(\'Create Questionnaire\', \'Prepare Notification Content\')"", ""not_chain_succession:(\'Create Questionnaire\', \'High Medical History\')"", ""not_chain_succession:(\'Create Questionnaire\', \'Send Notification by e-mail\')"", ""not_chain_succession:(\'Contact Hospital\', \'Low Insurance Check\')"", ""not_chain_succession:(\'Contact Hospital\', \'Reject Claim\')"", ""not_chain_succession:(\'Contact Hospital\', \'Accept Claim\')"", ""not_chain_succession:(\'Contact Hospital\', \'High Insurance Check\')"", ""not_chain_succession:(\'Contact Hospital\', \'Low Medical History\')"", ""not_chain_succession:(\'Contact Hospital\', \'Register\')"", ""not_chain_succession:(\'Contact Hospital\', \'Send Questionnaire\')"", ""not_chain_succession:(\'Contact Hospital\', \'Send Notification by Post\')"", ""not_chain_succession:(\'Contact Hospital\', \'Create Questionnaire\')"", ""not_chain_succession:(\'Contact Hospital\', \'Prepare Notification Content\')"", ""not_chain_succession:(\'Contact Hospital\', \'High Medical History\')"", ""not_chain_succession:(\'Contact Hospital\', \'Send Notification by e-mail\')"", ""not_chain_succession:(\'Prepare Notification Content\', \'Low Insurance Check\')"", ""not_chain_succession:(\'Prepare Notification Content\', \'Reject Claim\')"", ""not_chain_succession:(\'Prepare Notification Content\', \'Accept Claim\')"", ""not_chain_succession:(\'Prepare Notification Content\', \'High Insurance Check\')"", ""not_chain_succession:(\'Prepare Notification Content\', \'Low Medical History\')"", ""not_chain_succession:(\'Prepare Notification Content\', \'Register\')"", ""not_chain_succession:(\'Prepare Notification Content\', \'Send Questionnaire\')"", ""not_chain_succession:(\'Prepare Notification Content\', \'Send Notification by Post\')"", ""not_chain_succession:(\'Prepare Notification Content\', \'Create Questionnaire\')"", ""not_chain_succession:(\'Prepare Notification Content\', \'Contact Hospital\')"", ""not_chain_succession:(\'Prepare Notification Content\', \'High Medical History\')"", ""not_chain_succession:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"", ""not_chain_succession:(\'High Medical History\', \'Low Insurance Check\')"", ""not_chain_succession:(\'High Medical History\', \'Reject Claim\')"", ""not_chain_succession:(\'High Medical History\', \'Accept Claim\')"", ""not_chain_succession:(\'High Medical History\', \'High Insurance Check\')"", ""not_chain_succession:(\'High Medical History\', \'Low Medical History\')"", ""not_chain_succession:(\'High Medical History\', \'Register\')"", ""not_chain_succession:(\'High Medical History\', \'Send Questionnaire\')"", ""not_chain_succession:(\'High Medical History\', \'Send Notification by Post\')"", ""not_chain_succession:(\'High Medical History\', \'Create Questionnaire\')"", ""not_chain_succession:(\'High Medical History\', \'Contact Hospital\')"", ""not_chain_succession:(\'High Medical History\', \'Prepare Notification Content\')"", ""not_chain_succession:(\'High Medical History\', \'Send Notification by e-mail\')"", ""not_chain_succession:(\'Send Notification by e-mail\', \'Low Insurance Check\')"", ""not_chain_succession:(\'Send Notification by e-mail\', \'Reject Claim\')"", ""not_chain_succession:(\'Send Notification by e-mail\', \'Accept Claim\')"", ""not_chain_succession:(\'Send Notification by e-mail\', \'High Insurance Check\')"", ""not_chain_succession:(\'Send Notification by e-mail\', \'Low Medical History\')"", ""not_chain_succession:(\'Send Notification by e-mail\', \'Register\')"", ""not_chain_succession:(\'Send Notification by e-mail\', \'Send Questionnaire\')"", ""not_chain_succession:(\'Send Notification by e-mail\', \'Send Notification by Post\')"", ""not_chain_succession:(\'Send Notification by e-mail\', \'Create Questionnaire\')"", ""not_chain_succession:(\'Send Notification by e-mail\', \'Contact Hospital\')"", ""not_chain_succession:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"", ""not_chain_succession:(\'Send Notification by e-mail\', \'High Medical History\')"", ""not_coexistence:(\'Low Insurance Check\', \'Reject Claim\')"", ""not_coexistence:(\'Low Insurance Check\', \'Accept Claim\')"", ""not_coexistence:(\'Low Insurance Check\', \'High Insurance Check\')"", ""not_coexistence:(\'Low Insurance Check\', \'Low Medical History\')"", ""not_coexistence:(\'Low Insurance Check\', \'Register\')"", ""not_coexistence:(\'Low Insurance Check\', \'Send Questionnaire\')"", ""not_coexistence:(\'Low Insurance Check\', \'Send Notification by Post\')"", ""not_coexistence:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""not_coexistence:(\'Low Insurance Check\', \'Contact Hospital\')"", ""not_coexistence:(\'Low Insurance Check\', \'Prepare Notification Content\')"", ""not_coexistence:(\'Low Insurance Check\', \'High Medical History\')"", ""not_coexistence:(\'Low Insurance Check\', \'Send Notification by e-mail\')"", ""not_coexistence:(\'Reject Claim\', \'Low Insurance Check\')"", ""not_coexistence:(\'Reject Claim\', \'Accept Claim\')"", ""not_coexistence:(\'Reject Claim\', \'High Insurance Check\')"", ""not_coexistence:(\'Reject Claim\', \'Low Medical History\')"", ""not_coexistence:(\'Reject Claim\', \'Register\')"", ""not_coexistence:(\'Reject Claim\', \'Send Questionnaire\')"", ""not_coexistence:(\'Reject Claim\', \'Send Notification by Post\')"", ""not_coexistence:(\'Reject Claim\', \'Create Questionnaire\')"", ""not_coexistence:(\'Reject Claim\', \'Contact Hospital\')"", ""not_coexistence:(\'Reject Claim\', \'Prepare Notification Content\')"", ""not_coexistence:(\'Reject Claim\', \'High Medical History\')"", ""not_coexistence:(\'Reject Claim\', \'Send Notification by e-mail\')"", ""not_coexistence:(\'Accept Claim\', \'Low Insurance Check\')"", ""not_coexistence:(\'Accept Claim\', \'Reject Claim\')"", ""not_coexistence:(\'Accept Claim\', \'High Insurance Check\')"", ""not_coexistence:(\'Accept Claim\', \'Low Medical History\')"", ""not_coexistence:(\'Accept Claim\', \'Register\')"", ""not_coexistence:(\'Accept Claim\', \'Send Questionnaire\')"", ""not_coexistence:(\'Accept Claim\', \'Send Notification by Post\')"", ""not_coexistence:(\'Accept Claim\', \'Create Questionnaire\')"", ""not_coexistence:(\'Accept Claim\', \'Contact Hospital\')"", ""not_coexistence:(\'Accept Claim\', \'Prepare Notification Content\')"", ""not_coexistence:(\'Accept Claim\', \'High Medical History\')"", ""not_coexistence:(\'Accept Claim\', \'Send Notification by e-mail\')"", ""not_coexistence:(\'High Insurance Check\', \'Low Insurance Check\')"", ""not_coexistence:(\'High Insurance Check\', \'Reject Claim\')"", ""not_coexistence:(\'High Insurance Check\', \'Accept Claim\')"", ""not_coexistence:(\'High Insurance Check\', \'Low Medical History\')"", ""not_coexistence:(\'High Insurance Check\', \'Register\')"", ""not_coexistence:(\'High Insurance Check\', \'Send Questionnaire\')"", ""not_coexistence:(\'High Insurance Check\', \'Send Notification by Post\')"", ""not_coexistence:(\'High Insurance Check\', \'Create Questionnaire\')"", ""not_coexistence:(\'High Insurance Check\', \'Contact Hospital\')"", ""not_coexistence:(\'High Insurance Check\', \'Prepare Notification Content\')"", ""not_coexistence:(\'High Insurance Check\', \'High Medical History\')"", ""not_coexistence:(\'High Insurance Check\', \'Send Notification by e-mail\')"", ""not_coexistence:(\'Low Medical History\', \'Low Insurance Check\')"", ""not_coexistence:(\'Low Medical History\', \'Reject Claim\')"", ""not_coexistence:(\'Low Medical History\', \'Accept Claim\')"", ""not_coexistence:(\'Low Medical History\', \'High Insurance Check\')"", ""not_coexistence:(\'Low Medical History\', \'Register\')"", ""not_coexistence:(\'Low Medical History\', \'Send Questionnaire\')"", ""not_coexistence:(\'Low Medical History\', \'Send Notification by Post\')"", ""not_coexistence:(\'Low Medical History\', \'Create Questionnaire\')"", ""not_coexistence:(\'Low Medical History\', \'Contact Hospital\')"", ""not_coexistence:(\'Low Medical History\', \'Prepare Notification Content\')"", ""not_coexistence:(\'Low Medical History\', \'High Medical History\')"", ""not_coexistence:(\'Low Medical History\', \'Send Notification by e-mail\')"", ""not_coexistence:(\'Register\', \'Low Insurance Check\')"", ""not_coexistence:(\'Register\', \'Reject Claim\')"", ""not_coexistence:(\'Register\', \'Accept Claim\')"", ""not_coexistence:(\'Register\', \'High Insurance Check\')"", ""not_coexistence:(\'Register\', \'Low Medical History\')"", ""not_coexistence:(\'Register\', \'Send Questionnaire\')"", ""not_coexistence:(\'Register\', \'Send Notification by Post\')"", ""not_coexistence:(\'Register\', \'Create Questionnaire\')"", ""not_coexistence:(\'Register\', \'Contact Hospital\')"", ""not_coexistence:(\'Register\', \'Prepare Notification Content\')"", ""not_coexistence:(\'Register\', \'High Medical History\')"", ""not_coexistence:(\'Register\', \'Send Notification by e-mail\')"", ""not_coexistence:(\'Send Questionnaire\', \'Low Insurance Check\')"", ""not_coexistence:(\'Send Questionnaire\', \'Reject Claim\')"", ""not_coexistence:(\'Send Questionnaire\', \'Accept Claim\')"", ""not_coexistence:(\'Send Questionnaire\', \'High Insurance Check\')"", ""not_coexistence:(\'Send Questionnaire\', \'Low Medical History\')"", ""not_coexistence:(\'Send Questionnaire\', \'Register\')"", ""not_coexistence:(\'Send Questionnaire\', \'Send Notification by Post\')"", ""not_coexistence:(\'Send Questionnaire\', \'Create Questionnaire\')"", ""not_coexistence:(\'Send Questionnaire\', \'Contact Hospital\')"", ""not_coexistence:(\'Send Questionnaire\', \'Prepare Notification Content\')"", ""not_coexistence:(\'Send Questionnaire\', \'High Medical History\')"", ""not_coexistence:(\'Send Questionnaire\', \'Send Notification by e-mail\')"", ""not_coexistence:(\'Send Notification by Post\', \'Low Insurance Check\')"", ""not_coexistence:(\'Send Notification by Post\', \'Reject Claim\')"", ""not_coexistence:(\'Send Notification by Post\', \'Accept Claim\')"", ""not_coexistence:(\'Send Notification by Post\', \'High Insurance Check\')"", ""not_coexistence:(\'Send Notification by Post\', \'Low Medical History\')"", ""not_coexistence:(\'Send Notification by Post\', \'Register\')"", ""not_coexistence:(\'Send Notification by Post\', \'Send Questionnaire\')"", ""not_coexistence:(\'Send Notification by Post\', \'Create Questionnaire\')"", ""not_coexistence:(\'Send Notification by Post\', \'Contact Hospital\')"", ""not_coexistence:(\'Send Notification by Post\', \'Prepare Notification Content\')"", ""not_coexistence:(\'Send Notification by Post\', \'High Medical History\')"", ""not_coexistence:(\'Send Notification by Post\', \'Send Notification by e-mail\')"", ""not_coexistence:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""not_coexistence:(\'Create Questionnaire\', \'Reject Claim\')"", ""not_coexistence:(\'Create Questionnaire\', \'Accept Claim\')"", ""not_coexistence:(\'Create Questionnaire\', \'High Insurance Check\')"", ""not_coexistence:(\'Create Questionnaire\', \'Low Medical History\')"", ""not_coexistence:(\'Create Questionnaire\', \'Register\')"", ""not_coexistence:(\'Create Questionnaire\', \'Send Questionnaire\')"", ""not_coexistence:(\'Create Questionnaire\', \'Send Notification by Post\')"", ""not_coexistence:(\'Create Questionnaire\', \'Contact Hospital\')"", ""not_coexistence:(\'Create Questionnaire\', \'Prepare Notification Content\')"", ""not_coexistence:(\'Create Questionnaire\', \'High Medical History\')"", ""not_coexistence:(\'Create Questionnaire\', \'Send Notification by e-mail\')"", ""not_coexistence:(\'Contact Hospital\', \'Low Insurance Check\')"", ""not_coexistence:(\'Contact Hospital\', \'Reject Claim\')"", ""not_coexistence:(\'Contact Hospital\', \'Accept Claim\')"", ""not_coexistence:(\'Contact Hospital\', \'High Insurance Check\')"", ""not_coexistence:(\'Contact Hospital\', \'Low Medical History\')"", ""not_coexistence:(\'Contact Hospital\', \'Register\')"", ""not_coexistence:(\'Contact Hospital\', \'Send Questionnaire\')"", ""not_coexistence:(\'Contact Hospital\', \'Send Notification by Post\')"", ""not_coexistence:(\'Contact Hospital\', \'Create Questionnaire\')"", ""not_coexistence:(\'Contact Hospital\', \'Prepare Notification Content\')"", ""not_coexistence:(\'Contact Hospital\', \'High Medical History\')"", ""not_coexistence:(\'Contact Hospital\', \'Send Notification by e-mail\')"", ""not_coexistence:(\'Prepare Notification Content\', \'Low Insurance Check\')"", ""not_coexistence:(\'Prepare Notification Content\', \'Reject Claim\')"", ""not_coexistence:(\'Prepare Notification Content\', \'Accept Claim\')"", ""not_coexistence:(\'Prepare Notification Content\', \'High Insurance Check\')"", ""not_coexistence:(\'Prepare Notification Content\', \'Low Medical History\')"", ""not_coexistence:(\'Prepare Notification Content\', \'Register\')"", ""not_coexistence:(\'Prepare Notification Content\', \'Send Questionnaire\')"", ""not_coexistence:(\'Prepare Notification Content\', \'Send Notification by Post\')"", ""not_coexistence:(\'Prepare Notification Content\', \'Create Questionnaire\')"", ""not_coexistence:(\'Prepare Notification Content\', \'Contact Hospital\')"", ""not_coexistence:(\'Prepare Notification Content\', \'High Medical History\')"", ""not_coexistence:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"", ""not_coexistence:(\'High Medical History\', \'Low Insurance Check\')"", ""not_coexistence:(\'High Medical History\', \'Reject Claim\')"", ""not_coexistence:(\'High Medical History\', \'Accept Claim\')"", ""not_coexistence:(\'High Medical History\', \'High Insurance Check\')"", ""not_coexistence:(\'High Medical History\', \'Low Medical History\')"", ""not_coexistence:(\'High Medical History\', \'Register\')"", ""not_coexistence:(\'High Medical History\', \'Send Questionnaire\')"", ""not_coexistence:(\'High Medical History\', \'Send Notification by Post\')"", ""not_coexistence:(\'High Medical History\', \'Create Questionnaire\')"", ""not_coexistence:(\'High Medical History\', \'Contact Hospital\')"", ""not_coexistence:(\'High Medical History\', \'Prepare Notification Content\')"", ""not_coexistence:(\'High Medical History\', \'Send Notification by e-mail\')"", ""not_coexistence:(\'Send Notification by e-mail\', \'Low Insurance Check\')"", ""not_coexistence:(\'Send Notification by e-mail\', \'Reject Claim\')"", ""not_coexistence:(\'Send Notification by e-mail\', \'Accept Claim\')"", ""not_coexistence:(\'Send Notification by e-mail\', \'High Insurance Check\')"", ""not_coexistence:(\'Send Notification by e-mail\', \'Low Medical History\')"", ""not_coexistence:(\'Send Notification by e-mail\', \'Register\')"", ""not_coexistence:(\'Send Notification by e-mail\', \'Send Questionnaire\')"", ""not_coexistence:(\'Send Notification by e-mail\', \'Send Notification by Post\')"", ""not_coexistence:(\'Send Notification by e-mail\', \'Create Questionnaire\')"", ""not_coexistence:(\'Send Notification by e-mail\', \'Contact Hospital\')"", ""not_coexistence:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"", ""not_coexistence:(\'Send Notification by e-mail\', \'High Medical History\')"", ""not_succession:(\'Low Insurance Check\', \'Reject Claim\')"", ""not_succession:(\'Low Insurance Check\', \'Accept Claim\')"", ""not_succession:(\'Low Insurance Check\', \'High Insurance Check\')"", ""not_succession:(\'Low Insurance Check\', \'Low Medical History\')"", ""not_succession:(\'Low Insurance Check\', \'Register\')"", ""not_succession:(\'Low Insurance Check\', \'Send Questionnaire\')"", ""not_succession:(\'Low Insurance Check\', \'Send Notification by Post\')"", ""not_succession:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""not_succession:(\'Low Insurance Check\', \'Contact Hospital\')"", ""not_succession:(\'Low Insurance Check\', \'Prepare Notification Content\')"", ""not_succession:(\'Low Insurance Check\', \'High Medical History\')"", ""not_succession:(\'Low Insurance Check\', \'Send Notification by e-mail\')"", ""not_succession:(\'Reject Claim\', \'Low Insurance Check\')"", ""not_succession:(\'Reject Claim\', \'Accept Claim\')"", ""not_succession:(\'Reject Claim\', \'High Insurance Check\')"", ""not_succession:(\'Reject Claim\', \'Low Medical History\')"", ""not_succession:(\'Reject Claim\', \'Register\')"", ""not_succession:(\'Reject Claim\', \'Send Questionnaire\')"", ""not_succession:(\'Reject Claim\', \'Send Notification by Post\')"", ""not_succession:(\'Reject Claim\', \'Create Questionnaire\')"", ""not_succession:(\'Reject Claim\', \'Contact Hospital\')"", ""not_succession:(\'Reject Claim\', \'Prepare Notification Content\')"", ""not_succession:(\'Reject Claim\', \'High Medical History\')"", ""not_succession:(\'Reject Claim\', \'Send Notification by e-mail\')"", ""not_succession:(\'Accept Claim\', \'Low Insurance Check\')"", ""not_succession:(\'Accept Claim\', \'Reject Claim\')"", ""not_succession:(\'Accept Claim\', \'High Insurance Check\')"", ""not_succession:(\'Accept Claim\', \'Low Medical History\')"", ""not_succession:(\'Accept Claim\', \'Register\')"", ""not_succession:(\'Accept Claim\', \'Send Questionnaire\')"", ""not_succession:(\'Accept Claim\', \'Send Notification by Post\')"", ""not_succession:(\'Accept Claim\', \'Create Questionnaire\')"", ""not_succession:(\'Accept Claim\', \'Contact Hospital\')"", ""not_succession:(\'Accept Claim\', \'Prepare Notification Content\')"", ""not_succession:(\'Accept Claim\', \'High Medical History\')"", ""not_succession:(\'Accept Claim\', \'Send Notification by e-mail\')"", ""not_succession:(\'High Insurance Check\', \'Low Insurance Check\')"", ""not_succession:(\'High Insurance Check\', \'Reject Claim\')"", ""not_succession:(\'High Insurance Check\', \'Accept Claim\')"", ""not_succession:(\'High Insurance Check\', \'Low Medical History\')"", ""not_succession:(\'High Insurance Check\', \'Register\')"", ""not_succession:(\'High Insurance Check\', \'Send Questionnaire\')"", ""not_succession:(\'High Insurance Check\', \'Send Notification by Post\')"", ""not_succession:(\'High Insurance Check\', \'Create Questionnaire\')"", ""not_succession:(\'High Insurance Check\', \'Contact Hospital\')"", ""not_succession:(\'High Insurance Check\', \'Prepare Notification Content\')"", ""not_succession:(\'High Insurance Check\', \'High Medical History\')"", ""not_succession:(\'High Insurance Check\', \'Send Notification by e-mail\')"", ""not_succession:(\'Low Medical History\', \'Low Insurance Check\')"", ""not_succession:(\'Low Medical History\', \'Reject Claim\')"", ""not_succession:(\'Low Medical History\', \'Accept Claim\')"", ""not_succession:(\'Low Medical History\', \'High Insurance Check\')"", ""not_succession:(\'Low Medical History\', \'Register\')"", ""not_succession:(\'Low Medical History\', \'Send Questionnaire\')"", ""not_succession:(\'Low Medical History\', \'Send Notification by Post\')"", ""not_succession:(\'Low Medical History\', \'Create Questionnaire\')"", ""not_succession:(\'Low Medical History\', \'Contact Hospital\')"", ""not_succession:(\'Low Medical History\', \'Prepare Notification Content\')"", ""not_succession:(\'Low Medical History\', \'High Medical History\')"", ""not_succession:(\'Low Medical History\', \'Send Notification by e-mail\')"", ""not_succession:(\'Register\', \'Low Insurance Check\')"", ""not_succession:(\'Register\', \'Reject Claim\')"", ""not_succession:(\'Register\', \'Accept Claim\')"", ""not_succession:(\'Register\', \'High Insurance Check\')"", ""not_succession:(\'Register\', \'Low Medical History\')"", ""not_succession:(\'Register\', \'Send Questionnaire\')"", ""not_succession:(\'Register\', \'Send Notification by Post\')"", ""not_succession:(\'Register\', \'Create Questionnaire\')"", ""not_succession:(\'Register\', \'Contact Hospital\')"", ""not_succession:(\'Register\', \'Prepare Notification Content\')"", ""not_succession:(\'Register\', \'High Medical History\')"", ""not_succession:(\'Register\', \'Send Notification by e-mail\')"", ""not_succession:(\'Send Questionnaire\', \'Low Insurance Check\')"", ""not_succession:(\'Send Questionnaire\', \'Reject Claim\')"", ""not_succession:(\'Send Questionnaire\', \'Accept Claim\')"", ""not_succession:(\'Send Questionnaire\', \'High Insurance Check\')"", ""not_succession:(\'Send Questionnaire\', \'Low Medical History\')"", ""not_succession:(\'Send Questionnaire\', \'Register\')"", ""not_succession:(\'Send Questionnaire\', \'Send Notification by Post\')"", ""not_succession:(\'Send Questionnaire\', \'Create Questionnaire\')"", ""not_succession:(\'Send Questionnaire\', \'Contact Hospital\')"", ""not_succession:(\'Send Questionnaire\', \'Prepare Notification Content\')"", ""not_succession:(\'Send Questionnaire\', \'High Medical History\')"", ""not_succession:(\'Send Questionnaire\', \'Send Notification by e-mail\')"", ""not_succession:(\'Send Notification by Post\', \'Low Insurance Check\')"", ""not_succession:(\'Send Notification by Post\', \'Reject Claim\')"", ""not_succession:(\'Send Notification by Post\', \'Accept Claim\')"", ""not_succession:(\'Send Notification by Post\', \'High Insurance Check\')"", ""not_succession:(\'Send Notification by Post\', \'Low Medical History\')"", ""not_succession:(\'Send Notification by Post\', \'Register\')"", ""not_succession:(\'Send Notification by Post\', \'Send Questionnaire\')"", ""not_succession:(\'Send Notification by Post\', \'Create Questionnaire\')"", ""not_succession:(\'Send Notification by Post\', \'Contact Hospital\')"", ""not_succession:(\'Send Notification by Post\', \'Prepare Notification Content\')"", ""not_succession:(\'Send Notification by Post\', \'High Medical History\')"", ""not_succession:(\'Send Notification by Post\', \'Send Notification by e-mail\')"", ""not_succession:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""not_succession:(\'Create Questionnaire\', \'Reject Claim\')"", ""not_succession:(\'Create Questionnaire\', \'Accept Claim\')"", ""not_succession:(\'Create Questionnaire\', \'High Insurance Check\')"", ""not_succession:(\'Create Questionnaire\', \'Low Medical History\')"", ""not_succession:(\'Create Questionnaire\', \'Register\')"", ""not_succession:(\'Create Questionnaire\', \'Send Questionnaire\')"", ""not_succession:(\'Create Questionnaire\', \'Send Notification by Post\')"", ""not_succession:(\'Create Questionnaire\', \'Contact Hospital\')"", ""not_succession:(\'Create Questionnaire\', \'Prepare Notification Content\')"", ""not_succession:(\'Create Questionnaire\', \'High Medical History\')"", ""not_succession:(\'Create Questionnaire\', \'Send Notification by e-mail\')"", ""not_succession:(\'Contact Hospital\', \'Low Insurance Check\')"", ""not_succession:(\'Contact Hospital\', \'Reject Claim\')"", ""not_succession:(\'Contact Hospital\', \'Accept Claim\')"", ""not_succession:(\'Contact Hospital\', \'High Insurance Check\')"", ""not_succession:(\'Contact Hospital\', \'Low Medical History\')"", ""not_succession:(\'Contact Hospital\', \'Register\')"", ""not_succession:(\'Contact Hospital\', \'Send Questionnaire\')"", ""not_succession:(\'Contact Hospital\', \'Send Notification by Post\')"", ""not_succession:(\'Contact Hospital\', \'Create Questionnaire\')"", ""not_succession:(\'Contact Hospital\', \'Prepare Notification Content\')"", ""not_succession:(\'Contact Hospital\', \'High Medical History\')"", ""not_succession:(\'Contact Hospital\', \'Send Notification by e-mail\')"", ""not_succession:(\'Prepare Notification Content\', \'Low Insurance Check\')"", ""not_succession:(\'Prepare Notification Content\', \'Reject Claim\')"", ""not_succession:(\'Prepare Notification Content\', \'Accept Claim\')"", ""not_succession:(\'Prepare Notification Content\', \'High Insurance Check\')"", ""not_succession:(\'Prepare Notification Content\', \'Low Medical History\')"", ""not_succession:(\'Prepare Notification Content\', \'Register\')"", ""not_succession:(\'Prepare Notification Content\', \'Send Questionnaire\')"", ""not_succession:(\'Prepare Notification Content\', \'Send Notification by Post\')"", ""not_succession:(\'Prepare Notification Content\', \'Create Questionnaire\')"", ""not_succession:(\'Prepare Notification Content\', \'Contact Hospital\')"", ""not_succession:(\'Prepare Notification Content\', \'High Medical History\')"", ""not_succession:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"", ""not_succession:(\'High Medical History\', \'Low Insurance Check\')"", ""not_succession:(\'High Medical History\', \'Reject Claim\')"", ""not_succession:(\'High Medical History\', \'Accept Claim\')"", ""not_succession:(\'High Medical History\', \'High Insurance Check\')"", ""not_succession:(\'High Medical History\', \'Low Medical History\')"", ""not_succession:(\'High Medical History\', \'Register\')"", ""not_succession:(\'High Medical History\', \'Send Questionnaire\')"", ""not_succession:(\'High Medical History\', \'Send Notification by Post\')"", ""not_succession:(\'High Medical History\', \'Create Questionnaire\')"", ""not_succession:(\'High Medical History\', \'Contact Hospital\')"", ""not_succession:(\'High Medical History\', \'Prepare Notification Content\')"", ""not_succession:(\'High Medical History\', \'Send Notification by e-mail\')"", ""not_succession:(\'Send Notification by e-mail\', \'Low Insurance Check\')"", ""not_succession:(\'Send Notification by e-mail\', \'Reject Claim\')"", ""not_succession:(\'Send Notification by e-mail\', \'Accept Claim\')"", ""not_succession:(\'Send Notification by e-mail\', \'High Insurance Check\')"", ""not_succession:(\'Send Notification by e-mail\', \'Low Medical History\')"", ""not_succession:(\'Send Notification by e-mail\', \'Register\')"", ""not_succession:(\'Send Notification by e-mail\', \'Send Questionnaire\')"", ""not_succession:(\'Send Notification by e-mail\', \'Send Notification by Post\')"", ""not_succession:(\'Send Notification by e-mail\', \'Create Questionnaire\')"", ""not_succession:(\'Send Notification by e-mail\', \'Contact Hospital\')"", ""not_succession:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"", ""not_succession:(\'Send Notification by e-mail\', \'High Medical History\')"", ""responded_existence:(\'Low Insurance Check\', \'Reject Claim\')"", ""responded_existence:(\'Low Insurance Check\', \'Accept Claim\')"", ""responded_existence:(\'Low Insurance Check\', \'High Insurance Check\')"", ""responded_existence:(\'Low Insurance Check\', \'Low Medical History\')"", ""responded_existence:(\'Low Insurance Check\', \'Register\')"", ""responded_existence:(\'Low Insurance Check\', \'Send Questionnaire\')"", ""responded_existence:(\'Low Insurance Check\', \'Send Notification by Post\')"", ""responded_existence:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""responded_existence:(\'Low Insurance Check\', \'Contact Hospital\')"", ""responded_existence:(\'Low Insurance Check\', \'Prepare Notification Content\')"", ""responded_existence:(\'Low Insurance Check\', \'High Medical History\')"", ""responded_existence:(\'Low Insurance Check\', \'Send Notification by e-mail\')"", ""responded_existence:(\'Reject Claim\', \'Low Insurance Check\')"", ""responded_existence:(\'Reject Claim\', \'Accept Claim\')"", ""responded_existence:(\'Reject Claim\', \'High Insurance Check\')"", ""responded_existence:(\'Reject Claim\', \'Low Medical History\')"", ""responded_existence:(\'Reject Claim\', \'Register\')"", ""responded_existence:(\'Reject Claim\', \'Send Questionnaire\')"", ""responded_existence:(\'Reject Claim\', \'Send Notification by Post\')"", ""responded_existence:(\'Reject Claim\', \'Create Questionnaire\')"", ""responded_existence:(\'Reject Claim\', \'Contact Hospital\')"", ""responded_existence:(\'Reject Claim\', \'Prepare Notification Content\')"", ""responded_existence:(\'Reject Claim\', \'High Medical History\')"", ""responded_existence:(\'Reject Claim\', \'Send Notification by e-mail\')"", ""responded_existence:(\'Accept Claim\', \'Low Insurance Check\')"", ""responded_existence:(\'Accept Claim\', \'Reject Claim\')"", ""responded_existence:(\'Accept Claim\', \'High Insurance Check\')"", ""responded_existence:(\'Accept Claim\', \'Low Medical History\')"", ""responded_existence:(\'Accept Claim\', \'Register\')"", ""responded_existence:(\'Accept Claim\', \'Send Questionnaire\')"", ""responded_existence:(\'Accept Claim\', \'Send Notification by Post\')"", ""responded_existence:(\'Accept Claim\', \'Create Questionnaire\')"", ""responded_existence:(\'Accept Claim\', \'Contact Hospital\')"", ""responded_existence:(\'Accept Claim\', \'Prepare Notification Content\')"", ""responded_existence:(\'Accept Claim\', \'High Medical History\')"", ""responded_existence:(\'Accept Claim\', \'Send Notification by e-mail\')"", ""responded_existence:(\'High Insurance Check\', \'Low Insurance Check\')"", ""responded_existence:(\'High Insurance Check\', \'Reject Claim\')"", ""responded_existence:(\'High Insurance Check\', \'Accept Claim\')"", ""responded_existence:(\'High Insurance Check\', \'Low Medical History\')"", ""responded_existence:(\'High Insurance Check\', \'Register\')"", ""responded_existence:(\'High Insurance Check\', \'Send Questionnaire\')"", ""responded_existence:(\'High Insurance Check\', \'Send Notification by Post\')"", ""responded_existence:(\'High Insurance Check\', \'Create Questionnaire\')"", ""responded_existence:(\'High Insurance Check\', \'Contact Hospital\')"", ""responded_existence:(\'High Insurance Check\', \'Prepare Notification Content\')"", ""responded_existence:(\'High Insurance Check\', \'High Medical History\')"", ""responded_existence:(\'High Insurance Check\', \'Send Notification by e-mail\')"", ""responded_existence:(\'Low Medical History\', \'Low Insurance Check\')"", ""responded_existence:(\'Low Medical History\', \'Reject Claim\')"", ""responded_existence:(\'Low Medical History\', \'Accept Claim\')"", ""responded_existence:(\'Low Medical History\', \'High Insurance Check\')"", ""responded_existence:(\'Low Medical History\', \'Register\')"", ""responded_existence:(\'Low Medical History\', \'Send Questionnaire\')"", ""responded_existence:(\'Low Medical History\', \'Send Notification by Post\')"", ""responded_existence:(\'Low Medical History\', \'Create Questionnaire\')"", ""responded_existence:(\'Low Medical History\', \'Contact Hospital\')"", ""responded_existence:(\'Low Medical History\', \'Prepare Notification Content\')"", ""responded_existence:(\'Low Medical History\', \'High Medical History\')"", ""responded_existence:(\'Low Medical History\', \'Send Notification by e-mail\')"", ""responded_existence:(\'Register\', \'Low Insurance Check\')"", ""responded_existence:(\'Register\', \'Reject Claim\')"", ""responded_existence:(\'Register\', \'Accept Claim\')"", ""responded_existence:(\'Register\', \'High Insurance Check\')"", ""responded_existence:(\'Register\', \'Low Medical History\')"", ""responded_existence:(\'Register\', \'Send Questionnaire\')"", ""responded_existence:(\'Register\', \'Send Notification by Post\')"", ""responded_existence:(\'Register\', \'Create Questionnaire\')"", ""responded_existence:(\'Register\', \'Contact Hospital\')"", ""responded_existence:(\'Register\', \'Prepare Notification Content\')"", ""responded_existence:(\'Register\', \'High Medical History\')"", ""responded_existence:(\'Register\', \'Send Notification by e-mail\')"", ""responded_existence:(\'Send Questionnaire\', \'Low Insurance Check\')"", ""responded_existence:(\'Send Questionnaire\', \'Reject Claim\')"", ""responded_existence:(\'Send Questionnaire\', \'Accept Claim\')"", ""responded_existence:(\'Send Questionnaire\', \'High Insurance Check\')"", ""responded_existence:(\'Send Questionnaire\', \'Low Medical History\')"", ""responded_existence:(\'Send Questionnaire\', \'Register\')"", ""responded_existence:(\'Send Questionnaire\', \'Send Notification by Post\')"", ""responded_existence:(\'Send Questionnaire\', \'Create Questionnaire\')"", ""responded_existence:(\'Send Questionnaire\', \'Contact Hospital\')"", ""responded_existence:(\'Send Questionnaire\', \'Prepare Notification Content\')"", ""responded_existence:(\'Send Questionnaire\', \'High Medical History\')"", ""responded_existence:(\'Send Questionnaire\', \'Send Notification by e-mail\')"", ""responded_existence:(\'Send Notification by Post\', \'Low Insurance Check\')"", ""responded_existence:(\'Send Notification by Post\', \'Reject Claim\')"", ""responded_existence:(\'Send Notification by Post\', \'Accept Claim\')"", ""responded_existence:(\'Send Notification by Post\', \'High Insurance Check\')"", ""responded_existence:(\'Send Notification by Post\', \'Low Medical History\')"", ""responded_existence:(\'Send Notification by Post\', \'Register\')"", ""responded_existence:(\'Send Notification by Post\', \'Send Questionnaire\')"", ""responded_existence:(\'Send Notification by Post\', \'Create Questionnaire\')"", ""responded_existence:(\'Send Notification by Post\', \'Contact Hospital\')"", ""responded_existence:(\'Send Notification by Post\', \'Prepare Notification Content\')"", ""responded_existence:(\'Send Notification by Post\', \'High Medical History\')"", ""responded_existence:(\'Send Notification by Post\', \'Send Notification by e-mail\')"", ""responded_existence:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""responded_existence:(\'Create Questionnaire\', \'Reject Claim\')"", ""responded_existence:(\'Create Questionnaire\', \'Accept Claim\')"", ""responded_existence:(\'Create Questionnaire\', \'High Insurance Check\')"", ""responded_existence:(\'Create Questionnaire\', \'Low Medical History\')"", ""responded_existence:(\'Create Questionnaire\', \'Register\')"", ""responded_existence:(\'Create Questionnaire\', \'Send Questionnaire\')"", ""responded_existence:(\'Create Questionnaire\', \'Send Notification by Post\')"", ""responded_existence:(\'Create Questionnaire\', \'Contact Hospital\')"", ""responded_existence:(\'Create Questionnaire\', \'Prepare Notification Content\')"", ""responded_existence:(\'Create Questionnaire\', \'High Medical History\')"", ""responded_existence:(\'Create Questionnaire\', \'Send Notification by e-mail\')"", ""responded_existence:(\'Contact Hospital\', \'Low Insurance Check\')"", ""responded_existence:(\'Contact Hospital\', \'Reject Claim\')"", ""responded_existence:(\'Contact Hospital\', \'Accept Claim\')"", ""responded_existence:(\'Contact Hospital\', \'High Insurance Check\')"", ""responded_existence:(\'Contact Hospital\', \'Low Medical History\')"", ""responded_existence:(\'Contact Hospital\', \'Register\')"", ""responded_existence:(\'Contact Hospital\', \'Send Questionnaire\')"", ""responded_existence:(\'Contact Hospital\', \'Send Notification by Post\')"", ""responded_existence:(\'Contact Hospital\', \'Create Questionnaire\')"", ""responded_existence:(\'Contact Hospital\', \'Prepare Notification Content\')"", ""responded_existence:(\'Contact Hospital\', \'High Medical History\')"", ""responded_existence:(\'Contact Hospital\', \'Send Notification by e-mail\')"", ""responded_existence:(\'Prepare Notification Content\', \'Low Insurance Check\')"", ""responded_existence:(\'Prepare Notification Content\', \'Reject Claim\')"", ""responded_existence:(\'Prepare Notification Content\', \'Accept Claim\')"", ""responded_existence:(\'Prepare Notification Content\', \'High Insurance Check\')"", ""responded_existence:(\'Prepare Notification Content\', \'Low Medical History\')"", ""responded_existence:(\'Prepare Notification Content\', \'Register\')"", ""responded_existence:(\'Prepare Notification Content\', \'Send Questionnaire\')"", ""responded_existence:(\'Prepare Notification Content\', \'Send Notification by Post\')"", ""responded_existence:(\'Prepare Notification Content\', \'Create Questionnaire\')"", ""responded_existence:(\'Prepare Notification Content\', \'Contact Hospital\')"", ""responded_existence:(\'Prepare Notification Content\', \'High Medical History\')"", ""responded_existence:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"", ""responded_existence:(\'High Medical History\', \'Low Insurance Check\')"", ""responded_existence:(\'High Medical History\', \'Reject Claim\')"", ""responded_existence:(\'High Medical History\', \'Accept Claim\')"", ""responded_existence:(\'High Medical History\', \'High Insurance Check\')"", ""responded_existence:(\'High Medical History\', \'Low Medical History\')"", ""responded_existence:(\'High Medical History\', \'Register\')"", ""responded_existence:(\'High Medical History\', \'Send Questionnaire\')"", ""responded_existence:(\'High Medical History\', \'Send Notification by Post\')"", ""responded_existence:(\'High Medical History\', \'Create Questionnaire\')"", ""responded_existence:(\'High Medical History\', \'Contact Hospital\')"", ""responded_existence:(\'High Medical History\', \'Prepare Notification Content\')"", ""responded_existence:(\'High Medical History\', \'Send Notification by e-mail\')"", ""responded_existence:(\'Send Notification by e-mail\', \'Low Insurance Check\')"", ""responded_existence:(\'Send Notification by e-mail\', \'Reject Claim\')"", ""responded_existence:(\'Send Notification by e-mail\', \'Accept Claim\')"", ""responded_existence:(\'Send Notification by e-mail\', \'High Insurance Check\')"", ""responded_existence:(\'Send Notification by e-mail\', \'Low Medical History\')"", ""responded_existence:(\'Send Notification by e-mail\', \'Register\')"", ""responded_existence:(\'Send Notification by e-mail\', \'Send Questionnaire\')"", ""responded_existence:(\'Send Notification by e-mail\', \'Send Notification by Post\')"", ""responded_existence:(\'Send Notification by e-mail\', \'Create Questionnaire\')"", ""responded_existence:(\'Send Notification by e-mail\', \'Contact Hospital\')"", ""responded_existence:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"", ""responded_existence:(\'Send Notification by e-mail\', \'High Medical History\')"", ""response:(\'Low Insurance Check\', \'Reject Claim\')"", ""response:(\'Low Insurance Check\', \'Accept Claim\')"", ""response:(\'Low Insurance Check\', \'High Insurance Check\')"", ""response:(\'Low Insurance Check\', \'Low Medical History\')"", ""response:(\'Low Insurance Check\', \'Register\')"", ""response:(\'Low Insurance Check\', \'Send Questionnaire\')"", ""response:(\'Low Insurance Check\', \'Send Notification by Post\')"", ""response:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""response:(\'Low Insurance Check\', \'Contact Hospital\')"", ""response:(\'Low Insurance Check\', \'Prepare Notification Content\')"", ""response:(\'Low Insurance Check\', \'High Medical History\')"", ""response:(\'Low Insurance Check\', \'Send Notification by e-mail\')"", ""response:(\'Reject Claim\', \'Low Insurance Check\')"", ""response:(\'Reject Claim\', \'Accept Claim\')"", ""response:(\'Reject Claim\', \'High Insurance Check\')"", ""response:(\'Reject Claim\', \'Low Medical History\')"", ""response:(\'Reject Claim\', \'Register\')"", ""response:(\'Reject Claim\', \'Send Questionnaire\')"", ""response:(\'Reject Claim\', \'Send Notification by Post\')"", ""response:(\'Reject Claim\', \'Create Questionnaire\')"", ""response:(\'Reject Claim\', \'Contact Hospital\')"", ""response:(\'Reject Claim\', \'Prepare Notification Content\')"", ""response:(\'Reject Claim\', \'High Medical History\')"", ""response:(\'Reject Claim\', \'Send Notification by e-mail\')"", ""response:(\'Accept Claim\', \'Low Insurance Check\')"", ""response:(\'Accept Claim\', \'Reject Claim\')"", ""response:(\'Accept Claim\', \'High Insurance Check\')"", ""response:(\'Accept Claim\', \'Low Medical History\')"", ""response:(\'Accept Claim\', \'Register\')"", ""response:(\'Accept Claim\', \'Send Questionnaire\')"", ""response:(\'Accept Claim\', \'Send Notification by Post\')"", ""response:(\'Accept Claim\', \'Create Questionnaire\')"", ""response:(\'Accept Claim\', \'Contact Hospital\')"", ""response:(\'Accept Claim\', \'Prepare Notification Content\')"", ""response:(\'Accept Claim\', \'High Medical History\')"", ""response:(\'Accept Claim\', \'Send Notification by e-mail\')"", ""response:(\'High Insurance Check\', \'Low Insurance Check\')"", ""response:(\'High Insurance Check\', \'Reject Claim\')"", ""response:(\'High Insurance Check\', \'Accept Claim\')"", ""response:(\'High Insurance Check\', \'Low Medical History\')"", ""response:(\'High Insurance Check\', \'Register\')"", ""response:(\'High Insurance Check\', \'Send Questionnaire\')"", ""response:(\'High Insurance Check\', \'Send Notification by Post\')"", ""response:(\'High Insurance Check\', \'Create Questionnaire\')"", ""response:(\'High Insurance Check\', \'Contact Hospital\')"", ""response:(\'High Insurance Check\', \'Prepare Notification Content\')"", ""response:(\'High Insurance Check\', \'High Medical History\')"", ""response:(\'High Insurance Check\', \'Send Notification by e-mail\')"", ""response:(\'Low Medical History\', \'Low Insurance Check\')"", ""response:(\'Low Medical History\', \'Reject Claim\')"", ""response:(\'Low Medical History\', \'Accept Claim\')"", ""response:(\'Low Medical History\', \'High Insurance Check\')"", ""response:(\'Low Medical History\', \'Register\')"", ""response:(\'Low Medical History\', \'Send Questionnaire\')"", ""response:(\'Low Medical History\', \'Send Notification by Post\')"", ""response:(\'Low Medical History\', \'Create Questionnaire\')"", ""response:(\'Low Medical History\', \'Contact Hospital\')"", ""response:(\'Low Medical History\', \'Prepare Notification Content\')"", ""response:(\'Low Medical History\', \'High Medical History\')"", ""response:(\'Low Medical History\', \'Send Notification by e-mail\')"", ""response:(\'Register\', \'Low Insurance Check\')"", ""response:(\'Register\', \'Reject Claim\')"", ""response:(\'Register\', \'Accept Claim\')"", ""response:(\'Register\', \'High Insurance Check\')"", ""response:(\'Register\', \'Low Medical History\')"", ""response:(\'Register\', \'Send Questionnaire\')"", ""response:(\'Register\', \'Send Notification by Post\')"", ""response:(\'Register\', \'Create Questionnaire\')"", ""response:(\'Register\', \'Contact Hospital\')"", ""response:(\'Register\', \'Prepare Notification Content\')"", ""response:(\'Register\', \'High Medical History\')"", ""response:(\'Register\', \'Send Notification by e-mail\')"", ""response:(\'Send Questionnaire\', \'Low Insurance Check\')"", ""response:(\'Send Questionnaire\', \'Reject Claim\')"", ""response:(\'Send Questionnaire\', \'Accept Claim\')"", ""response:(\'Send Questionnaire\', \'High Insurance Check\')"", ""response:(\'Send Questionnaire\', \'Low Medical History\')"", ""response:(\'Send Questionnaire\', \'Register\')"", ""response:(\'Send Questionnaire\', \'Send Notification by Post\')"", ""response:(\'Send Questionnaire\', \'Create Questionnaire\')"", ""response:(\'Send Questionnaire\', \'Contact Hospital\')"", ""response:(\'Send Questionnaire\', \'Prepare Notification Content\')"", ""response:(\'Send Questionnaire\', \'High Medical History\')"", ""response:(\'Send Questionnaire\', \'Send Notification by e-mail\')"", ""response:(\'Send Notification by Post\', \'Low Insurance Check\')"", ""response:(\'Send Notification by Post\', \'Reject Claim\')"", ""response:(\'Send Notification by Post\', \'Accept Claim\')"", ""response:(\'Send Notification by Post\', \'High Insurance Check\')"", ""response:(\'Send Notification by Post\', \'Low Medical History\')"", ""response:(\'Send Notification by Post\', \'Register\')"", ""response:(\'Send Notification by Post\', \'Send Questionnaire\')"", ""response:(\'Send Notification by Post\', \'Create Questionnaire\')"", ""response:(\'Send Notification by Post\', \'Contact Hospital\')"", ""response:(\'Send Notification by Post\', \'Prepare Notification Content\')"", ""response:(\'Send Notification by Post\', \'High Medical History\')"", ""response:(\'Send Notification by Post\', \'Send Notification by e-mail\')"", ""response:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""response:(\'Create Questionnaire\', \'Reject Claim\')"", ""response:(\'Create Questionnaire\', \'Accept Claim\')"", ""response:(\'Create Questionnaire\', \'High Insurance Check\')"", ""response:(\'Create Questionnaire\', \'Low Medical History\')"", ""response:(\'Create Questionnaire\', \'Register\')"", ""response:(\'Create Questionnaire\', \'Send Questionnaire\')"", ""response:(\'Create Questionnaire\', \'Send Notification by Post\')"", ""response:(\'Create Questionnaire\', \'Contact Hospital\')"", ""response:(\'Create Questionnaire\', \'Prepare Notification Content\')"", ""response:(\'Create Questionnaire\', \'High Medical History\')"", ""response:(\'Create Questionnaire\', \'Send Notification by e-mail\')"", ""response:(\'Contact Hospital\', \'Low Insurance Check\')"", ""response:(\'Contact Hospital\', \'Reject Claim\')"", ""response:(\'Contact Hospital\', \'Accept Claim\')"", ""response:(\'Contact Hospital\', \'High Insurance Check\')"", ""response:(\'Contact Hospital\', \'Low Medical History\')"", ""response:(\'Contact Hospital\', \'Register\')"", ""response:(\'Contact Hospital\', \'Send Questionnaire\')"", ""response:(\'Contact Hospital\', \'Send Notification by Post\')"", ""response:(\'Contact Hospital\', \'Create Questionnaire\')"", ""response:(\'Contact Hospital\', \'Prepare Notification Content\')"", ""response:(\'Contact Hospital\', \'High Medical History\')"", ""response:(\'Contact Hospital\', \'Send Notification by e-mail\')"", ""response:(\'Prepare Notification Content\', \'Low Insurance Check\')"", ""response:(\'Prepare Notification Content\', \'Reject Claim\')"", ""response:(\'Prepare Notification Content\', \'Accept Claim\')"", ""response:(\'Prepare Notification Content\', \'High Insurance Check\')"", ""response:(\'Prepare Notification Content\', \'Low Medical History\')"", ""response:(\'Prepare Notification Content\', \'Register\')"", ""response:(\'Prepare Notification Content\', \'Send Questionnaire\')"", ""response:(\'Prepare Notification Content\', \'Send Notification by Post\')"", ""response:(\'Prepare Notification Content\', \'Create Questionnaire\')"", ""response:(\'Prepare Notification Content\', \'Contact Hospital\')"", ""response:(\'Prepare Notification Content\', \'High Medical History\')"", ""response:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"", ""response:(\'High Medical History\', \'Low Insurance Check\')"", ""response:(\'High Medical History\', \'Reject Claim\')"", ""response:(\'High Medical History\', \'Accept Claim\')"", ""response:(\'High Medical History\', \'High Insurance Check\')"", ""response:(\'High Medical History\', \'Low Medical History\')"", ""response:(\'High Medical History\', \'Register\')"", ""response:(\'High Medical History\', \'Send Questionnaire\')"", ""response:(\'High Medical History\', \'Send Notification by Post\')"", ""response:(\'High Medical History\', \'Create Questionnaire\')"", ""response:(\'High Medical History\', \'Contact Hospital\')"", ""response:(\'High Medical History\', \'Prepare Notification Content\')"", ""response:(\'High Medical History\', \'Send Notification by e-mail\')"", ""response:(\'Send Notification by e-mail\', \'Low Insurance Check\')"", ""response:(\'Send Notification by e-mail\', \'Reject Claim\')"", ""response:(\'Send Notification by e-mail\', \'Accept Claim\')"", ""response:(\'Send Notification by e-mail\', \'High Insurance Check\')"", ""response:(\'Send Notification by e-mail\', \'Low Medical History\')"", ""response:(\'Send Notification by e-mail\', \'Register\')"", ""response:(\'Send Notification by e-mail\', \'Send Questionnaire\')"", ""response:(\'Send Notification by e-mail\', \'Send Notification by Post\')"", ""response:(\'Send Notification by e-mail\', \'Create Questionnaire\')"", ""response:(\'Send Notification by e-mail\', \'Contact Hospital\')"", ""response:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"", ""response:(\'Send Notification by e-mail\', \'High Medical History\')"", ""succession:(\'Low Insurance Check\', \'Reject Claim\')"", ""succession:(\'Low Insurance Check\', \'Accept Claim\')"", ""succession:(\'Low Insurance Check\', \'High Insurance Check\')"", ""succession:(\'Low Insurance Check\', \'Low Medical History\')"", ""succession:(\'Low Insurance Check\', \'Register\')"", ""succession:(\'Low Insurance Check\', \'Send Questionnaire\')"", ""succession:(\'Low Insurance Check\', \'Send Notification by Post\')"", ""succession:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""succession:(\'Low Insurance Check\', \'Contact Hospital\')"", ""succession:(\'Low Insurance Check\', \'Prepare Notification Content\')"", ""succession:(\'Low Insurance Check\', \'High Medical History\')"", ""succession:(\'Low Insurance Check\', \'Send Notification by e-mail\')"", ""succession:(\'Reject Claim\', \'Low Insurance Check\')"", ""succession:(\'Reject Claim\', \'Accept Claim\')"", ""succession:(\'Reject Claim\', \'High Insurance Check\')"", ""succession:(\'Reject Claim\', \'Low Medical History\')"", ""succession:(\'Reject Claim\', \'Register\')"", ""succession:(\'Reject Claim\', \'Send Questionnaire\')"", ""succession:(\'Reject Claim\', \'Send Notification by Post\')"", ""succession:(\'Reject Claim\', \'Create Questionnaire\')"", ""succession:(\'Reject Claim\', \'Contact Hospital\')"", ""succession:(\'Reject Claim\', \'Prepare Notification Content\')"", ""succession:(\'Reject Claim\', \'High Medical History\')"", ""succession:(\'Reject Claim\', \'Send Notification by e-mail\')"", ""succession:(\'Accept Claim\', \'Low Insurance Check\')"", ""succession:(\'Accept Claim\', \'Reject Claim\')"", ""succession:(\'Accept Claim\', \'High Insurance Check\')"", ""succession:(\'Accept Claim\', \'Low Medical History\')"", ""succession:(\'Accept Claim\', \'Register\')"", ""succession:(\'Accept Claim\', \'Send Questionnaire\')"", ""succession:(\'Accept Claim\', \'Send Notification by Post\')"", ""succession:(\'Accept Claim\', \'Create Questionnaire\')"", ""succession:(\'Accept Claim\', \'Contact Hospital\')"", ""succession:(\'Accept Claim\', \'Prepare Notification Content\')"", ""succession:(\'Accept Claim\', \'High Medical History\')"", ""succession:(\'Accept Claim\', \'Send Notification by e-mail\')"", ""succession:(\'High Insurance Check\', \'Low Insurance Check\')"", ""succession:(\'High Insurance Check\', \'Reject Claim\')"", ""succession:(\'High Insurance Check\', \'Accept Claim\')"", ""succession:(\'High Insurance Check\', \'Low Medical History\')"", ""succession:(\'High Insurance Check\', \'Register\')"", ""succession:(\'High Insurance Check\', \'Send Questionnaire\')"", ""succession:(\'High Insurance Check\', \'Send Notification by Post\')"", ""succession:(\'High Insurance Check\', \'Create Questionnaire\')"", ""succession:(\'High Insurance Check\', \'Contact Hospital\')"", ""succession:(\'High Insurance Check\', \'Prepare Notification Content\')"", ""succession:(\'High Insurance Check\', \'High Medical History\')"", ""succession:(\'High Insurance Check\', \'Send Notification by e-mail\')"", ""succession:(\'Low Medical History\', \'Low Insurance Check\')"", ""succession:(\'Low Medical History\', \'Reject Claim\')"", ""succession:(\'Low Medical History\', \'Accept Claim\')"", ""succession:(\'Low Medical History\', \'High Insurance Check\')"", ""succession:(\'Low Medical History\', \'Register\')"", ""succession:(\'Low Medical History\', \'Send Questionnaire\')"", ""succession:(\'Low Medical History\', \'Send Notification by Post\')"", ""succession:(\'Low Medical History\', \'Create Questionnaire\')"", ""succession:(\'Low Medical History\', \'Contact Hospital\')"", ""succession:(\'Low Medical History\', \'Prepare Notification Content\')"", ""succession:(\'Low Medical History\', \'High Medical History\')"", ""succession:(\'Low Medical History\', \'Send Notification by e-mail\')"", ""succession:(\'Register\', \'Low Insurance Check\')"", ""succession:(\'Register\', \'Reject Claim\')"", ""succession:(\'Register\', \'Accept Claim\')"", ""succession:(\'Register\', \'High Insurance Check\')"", ""succession:(\'Register\', \'Low Medical History\')"", ""succession:(\'Register\', \'Send Questionnaire\')"", ""succession:(\'Register\', \'Send Notification by Post\')"", ""succession:(\'Register\', \'Create Questionnaire\')"", ""succession:(\'Register\', \'Contact Hospital\')"", ""succession:(\'Register\', \'Prepare Notification Content\')"", ""succession:(\'Register\', \'High Medical History\')"", ""succession:(\'Register\', \'Send Notification by e-mail\')"", ""succession:(\'Send Questionnaire\', \'Low Insurance Check\')"", ""succession:(\'Send Questionnaire\', \'Reject Claim\')"", ""succession:(\'Send Questionnaire\', \'Accept Claim\')"", ""succession:(\'Send Questionnaire\', \'High Insurance Check\')"", ""succession:(\'Send Questionnaire\', \'Low Medical History\')"", ""succession:(\'Send Questionnaire\', \'Register\')"", ""succession:(\'Send Questionnaire\', \'Send Notification by Post\')"", ""succession:(\'Send Questionnaire\', \'Create Questionnaire\')"", ""succession:(\'Send Questionnaire\', \'Contact Hospital\')"", ""succession:(\'Send Questionnaire\', \'Prepare Notification Content\')"", ""succession:(\'Send Questionnaire\', \'High Medical History\')"", ""succession:(\'Send Questionnaire\', \'Send Notification by e-mail\')"", ""succession:(\'Send Notification by Post\', \'Low Insurance Check\')"", ""succession:(\'Send Notification by Post\', \'Reject Claim\')"", ""succession:(\'Send Notification by Post\', \'Accept Claim\')"", ""succession:(\'Send Notification by Post\', \'High Insurance Check\')"", ""succession:(\'Send Notification by Post\', \'Low Medical History\')"", ""succession:(\'Send Notification by Post\', \'Register\')"", ""succession:(\'Send Notification by Post\', \'Send Questionnaire\')"", ""succession:(\'Send Notification by Post\', \'Create Questionnaire\')"", ""succession:(\'Send Notification by Post\', \'Contact Hospital\')"", ""succession:(\'Send Notification by Post\', \'Prepare Notification Content\')"", ""succession:(\'Send Notification by Post\', \'High Medical History\')"", ""succession:(\'Send Notification by Post\', \'Send Notification by e-mail\')"", ""succession:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""succession:(\'Create Questionnaire\', \'Reject Claim\')"", ""succession:(\'Create Questionnaire\', \'Accept Claim\')"", ""succession:(\'Create Questionnaire\', \'High Insurance Check\')"", ""succession:(\'Create Questionnaire\', \'Low Medical History\')"", ""succession:(\'Create Questionnaire\', \'Register\')"", ""succession:(\'Create Questionnaire\', \'Send Questionnaire\')"", ""succession:(\'Create Questionnaire\', \'Send Notification by Post\')"", ""succession:(\'Create Questionnaire\', \'Contact Hospital\')"", ""succession:(\'Create Questionnaire\', \'Prepare Notification Content\')"", ""succession:(\'Create Questionnaire\', \'High Medical History\')"", ""succession:(\'Create Questionnaire\', \'Send Notification by e-mail\')"", ""succession:(\'Contact Hospital\', \'Low Insurance Check\')"", ""succession:(\'Contact Hospital\', \'Reject Claim\')"", ""succession:(\'Contact Hospital\', \'Accept Claim\')"", ""succession:(\'Contact Hospital\', \'High Insurance Check\')"", ""succession:(\'Contact Hospital\', \'Low Medical History\')"", ""succession:(\'Contact Hospital\', \'Register\')"", ""succession:(\'Contact Hospital\', \'Send Questionnaire\')"", ""succession:(\'Contact Hospital\', \'Send Notification by Post\')"", ""succession:(\'Contact Hospital\', \'Create Questionnaire\')"", ""succession:(\'Contact Hospital\', \'Prepare Notification Content\')"", ""succession:(\'Contact Hospital\', \'High Medical History\')"", ""succession:(\'Contact Hospital\', \'Send Notification by e-mail\')"", ""succession:(\'Prepare Notification Content\', \'Low Insurance Check\')"", ""succession:(\'Prepare Notification Content\', \'Reject Claim\')"", ""succession:(\'Prepare Notification Content\', \'Accept Claim\')"", ""succession:(\'Prepare Notification Content\', \'High Insurance Check\')"", ""succession:(\'Prepare Notification Content\', \'Low Medical History\')"", ""succession:(\'Prepare Notification Content\', \'Register\')"", ""succession:(\'Prepare Notification Content\', \'Send Questionnaire\')"", ""succession:(\'Prepare Notification Content\', \'Send Notification by Post\')"", ""succession:(\'Prepare Notification Content\', \'Create Questionnaire\')"", ""succession:(\'Prepare Notification Content\', \'Contact Hospital\')"", ""succession:(\'Prepare Notification Content\', \'High Medical History\')"", ""succession:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"", ""succession:(\'High Medical History\', \'Low Insurance Check\')"", ""succession:(\'High Medical History\', \'Reject Claim\')"", ""succession:(\'High Medical History\', \'Accept Claim\')"", ""succession:(\'High Medical History\', \'High Insurance Check\')"", ""succession:(\'High Medical History\', \'Low Medical History\')"", ""succession:(\'High Medical History\', \'Register\')"", ""succession:(\'High Medical History\', \'Send Questionnaire\')"", ""succession:(\'High Medical History\', \'Send Notification by Post\')"", ""succession:(\'High Medical History\', \'Create Questionnaire\')"", ""succession:(\'High Medical History\', \'Contact Hospital\')"", ""succession:(\'High Medical History\', \'Prepare Notification Content\')"", ""succession:(\'High Medical History\', \'Send Notification by e-mail\')"", ""succession:(\'Send Notification by e-mail\', \'Low Insurance Check\')"", ""succession:(\'Send Notification by e-mail\', \'Reject Claim\')"", ""succession:(\'Send Notification by e-mail\', \'Accept Claim\')"", ""succession:(\'Send Notification by e-mail\', \'High Insurance Check\')"", ""succession:(\'Send Notification by e-mail\', \'Low Medical History\')"", ""succession:(\'Send Notification by e-mail\', \'Register\')"", ""succession:(\'Send Notification by e-mail\', \'Send Questionnaire\')"", ""succession:(\'Send Notification by e-mail\', \'Send Notification by Post\')"", ""succession:(\'Send Notification by e-mail\', \'Create Questionnaire\')"", ""succession:(\'Send Notification by e-mail\', \'Contact Hospital\')"", ""succession:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"", ""succession:(\'Send Notification by e-mail\', \'High Medical History\')"", ""precedence:(\'Low Insurance Check\', \'Reject Claim\')"", ""precedence:(\'Low Insurance Check\', \'Accept Claim\')"", ""precedence:(\'Low Insurance Check\', \'High Insurance Check\')"", ""precedence:(\'Low Insurance Check\', \'Low Medical History\')"", ""precedence:(\'Low Insurance Check\', \'Register\')"", ""precedence:(\'Low Insurance Check\', \'Send Questionnaire\')"", ""precedence:(\'Low Insurance Check\', \'Send Notification by Post\')"", ""precedence:(\'Low Insurance Check\', \'Create Questionnaire\')"", ""precedence:(\'Low Insurance Check\', \'Contact Hospital\')"", ""precedence:(\'Low Insurance Check\', \'Prepare Notification Content\')"", ""precedence:(\'Low Insurance Check\', \'High Medical History\')"", ""precedence:(\'Low Insurance Check\', \'Send Notification by e-mail\')"", ""precedence:(\'Reject Claim\', \'Low Insurance Check\')"", ""precedence:(\'Reject Claim\', \'Accept Claim\')"", ""precedence:(\'Reject Claim\', \'High Insurance Check\')"", ""precedence:(\'Reject Claim\', \'Low Medical History\')"", ""precedence:(\'Reject Claim\', \'Register\')"", ""precedence:(\'Reject Claim\', \'Send Questionnaire\')"", ""precedence:(\'Reject Claim\', \'Send Notification by Post\')"", ""precedence:(\'Reject Claim\', \'Create Questionnaire\')"", ""precedence:(\'Reject Claim\', \'Contact Hospital\')"", ""precedence:(\'Reject Claim\', \'Prepare Notification Content\')"", ""precedence:(\'Reject Claim\', \'High Medical History\')"", ""precedence:(\'Reject Claim\', \'Send Notification by e-mail\')"", ""precedence:(\'Accept Claim\', \'Low Insurance Check\')"", ""precedence:(\'Accept Claim\', \'Reject Claim\')"", ""precedence:(\'Accept Claim\', \'High Insurance Check\')"", ""precedence:(\'Accept Claim\', \'Low Medical History\')"", ""precedence:(\'Accept Claim\', \'Register\')"", ""precedence:(\'Accept Claim\', \'Send Questionnaire\')"", ""precedence:(\'Accept Claim\', \'Send Notification by Post\')"", ""precedence:(\'Accept Claim\', \'Create Questionnaire\')"", ""precedence:(\'Accept Claim\', \'Contact Hospital\')"", ""precedence:(\'Accept Claim\', \'Prepare Notification Content\')"", ""precedence:(\'Accept Claim\', \'High Medical History\')"", ""precedence:(\'Accept Claim\', \'Send Notification by e-mail\')"", ""precedence:(\'High Insurance Check\', \'Low Insurance Check\')"", ""precedence:(\'High Insurance Check\', \'Reject Claim\')"", ""precedence:(\'High Insurance Check\', \'Accept Claim\')"", ""precedence:(\'High Insurance Check\', \'Low Medical History\')"", ""precedence:(\'High Insurance Check\', \'Register\')"", ""precedence:(\'High Insurance Check\', \'Send Questionnaire\')"", ""precedence:(\'High Insurance Check\', \'Send Notification by Post\')"", ""precedence:(\'High Insurance Check\', \'Create Questionnaire\')"", ""precedence:(\'High Insurance Check\', \'Contact Hospital\')"", ""precedence:(\'High Insurance Check\', \'Prepare Notification Content\')"", ""precedence:(\'High Insurance Check\', \'High Medical History\')"", ""precedence:(\'High Insurance Check\', \'Send Notification by e-mail\')"", ""precedence:(\'Low Medical History\', \'Low Insurance Check\')"", ""precedence:(\'Low Medical History\', \'Reject Claim\')"", ""precedence:(\'Low Medical History\', \'Accept Claim\')"", ""precedence:(\'Low Medical History\', \'High Insurance Check\')"", ""precedence:(\'Low Medical History\', \'Register\')"", ""precedence:(\'Low Medical History\', \'Send Questionnaire\')"", ""precedence:(\'Low Medical History\', \'Send Notification by Post\')"", ""precedence:(\'Low Medical History\', \'Create Questionnaire\')"", ""precedence:(\'Low Medical History\', \'Contact Hospital\')"", ""precedence:(\'Low Medical History\', \'Prepare Notification Content\')"", ""precedence:(\'Low Medical History\', \'High Medical History\')"", ""precedence:(\'Low Medical History\', \'Send Notification by e-mail\')"", ""precedence:(\'Register\', \'Low Insurance Check\')"", ""precedence:(\'Register\', \'Reject Claim\')"", ""precedence:(\'Register\', \'Accept Claim\')"", ""precedence:(\'Register\', \'High Insurance Check\')"", ""precedence:(\'Register\', \'Low Medical History\')"", ""precedence:(\'Register\', \'Send Questionnaire\')"", ""precedence:(\'Register\', \'Send Notification by Post\')"", ""precedence:(\'Register\', \'Create Questionnaire\')"", ""precedence:(\'Register\', \'Contact Hospital\')"", ""precedence:(\'Register\', \'Prepare Notification Content\')"", ""precedence:(\'Register\', \'High Medical History\')"", ""precedence:(\'Register\', \'Send Notification by e-mail\')"", ""precedence:(\'Send Questionnaire\', \'Low Insurance Check\')"", ""precedence:(\'Send Questionnaire\', \'Reject Claim\')"", ""precedence:(\'Send Questionnaire\', \'Accept Claim\')"", ""precedence:(\'Send Questionnaire\', \'High Insurance Check\')"", ""precedence:(\'Send Questionnaire\', \'Low Medical History\')"", ""precedence:(\'Send Questionnaire\', \'Register\')"", ""precedence:(\'Send Questionnaire\', \'Send Notification by Post\')"", ""precedence:(\'Send Questionnaire\', \'Create Questionnaire\')"", ""precedence:(\'Send Questionnaire\', \'Contact Hospital\')"", ""precedence:(\'Send Questionnaire\', \'Prepare Notification Content\')"", ""precedence:(\'Send Questionnaire\', \'High Medical History\')"", ""precedence:(\'Send Questionnaire\', \'Send Notification by e-mail\')"", ""precedence:(\'Send Notification by Post\', \'Low Insurance Check\')"", ""precedence:(\'Send Notification by Post\', \'Reject Claim\')"", ""precedence:(\'Send Notification by Post\', \'Accept Claim\')"", ""precedence:(\'Send Notification by Post\', \'High Insurance Check\')"", ""precedence:(\'Send Notification by Post\', \'Low Medical History\')"", ""precedence:(\'Send Notification by Post\', \'Register\')"", ""precedence:(\'Send Notification by Post\', \'Send Questionnaire\')"", ""precedence:(\'Send Notification by Post\', \'Create Questionnaire\')"", ""precedence:(\'Send Notification by Post\', \'Contact Hospital\')"", ""precedence:(\'Send Notification by Post\', \'Prepare Notification Content\')"", ""precedence:(\'Send Notification by Post\', \'High Medical History\')"", ""precedence:(\'Send Notification by Post\', \'Send Notification by e-mail\')"", ""precedence:(\'Create Questionnaire\', \'Low Insurance Check\')"", ""precedence:(\'Create Questionnaire\', \'Reject Claim\')"", ""precedence:(\'Create Questionnaire\', \'Accept Claim\')"", ""precedence:(\'Create Questionnaire\', \'High Insurance Check\')"", ""precedence:(\'Create Questionnaire\', \'Low Medical History\')"", ""precedence:(\'Create Questionnaire\', \'Register\')"", ""precedence:(\'Create Questionnaire\', \'Send Questionnaire\')"", ""precedence:(\'Create Questionnaire\', \'Send Notification by Post\')"", ""precedence:(\'Create Questionnaire\', \'Contact Hospital\')"", ""precedence:(\'Create Questionnaire\', \'Prepare Notification Content\')"", ""precedence:(\'Create Questionnaire\', \'High Medical History\')"", ""precedence:(\'Create Questionnaire\', \'Send Notification by e-mail\')"", ""precedence:(\'Contact Hospital\', \'Low Insurance Check\')"", ""precedence:(\'Contact Hospital\', \'Reject Claim\')"", ""precedence:(\'Contact Hospital\', \'Accept Claim\')"", ""precedence:(\'Contact Hospital\', \'High Insurance Check\')"", ""precedence:(\'Contact Hospital\', \'Low Medical History\')"", ""precedence:(\'Contact Hospital\', \'Register\')"", ""precedence:(\'Contact Hospital\', \'Send Questionnaire\')"", ""precedence:(\'Contact Hospital\', \'Send Notification by Post\')"", ""precedence:(\'Contact Hospital\', \'Create Questionnaire\')"", ""precedence:(\'Contact Hospital\', \'Prepare Notification Content\')"", ""precedence:(\'Contact Hospital\', \'High Medical History\')"", ""precedence:(\'Contact Hospital\', \'Send Notification by e-mail\')"", ""precedence:(\'Prepare Notification Content\', \'Low Insurance Check\')"", ""precedence:(\'Prepare Notification Content\', \'Reject Claim\')"", ""precedence:(\'Prepare Notification Content\', \'Accept Claim\')"", ""precedence:(\'Prepare Notification Content\', \'High Insurance Check\')"", ""precedence:(\'Prepare Notification Content\', \'Low Medical History\')"", ""precedence:(\'Prepare Notification Content\', \'Register\')"", ""precedence:(\'Prepare Notification Content\', \'Send Questionnaire\')"", ""precedence:(\'Prepare Notification Content\', \'Send Notification by Post\')"", ""precedence:(\'Prepare Notification Content\', \'Create Questionnaire\')"", ""precedence:(\'Prepare Notification Content\', \'Contact Hospital\')"", ""precedence:(\'Prepare Notification Content\', \'High Medical History\')"", ""precedence:(\'Prepare Notification Content\', \'Send Notification by e-mail\')"", ""precedence:(\'High Medical History\', \'Low Insurance Check\')"", ""precedence:(\'High Medical History\', \'Reject Claim\')"", ""precedence:(\'High Medical History\', \'Accept Claim\')"", ""precedence:(\'High Medical History\', \'High Insurance Check\')"", ""precedence:(\'High Medical History\', \'Low Medical History\')"", ""precedence:(\'High Medical History\', \'Register\')"", ""precedence:(\'High Medical History\', \'Send Questionnaire\')"", ""precedence:(\'High Medical History\', \'Send Notification by Post\')"", ""precedence:(\'High Medical History\', \'Create Questionnaire\')"", ""precedence:(\'High Medical History\', \'Contact Hospital\')"", ""precedence:(\'High Medical History\', \'Prepare Notification Content\')"", ""precedence:(\'High Medical History\', \'Send Notification by e-mail\')"", ""precedence:(\'Send Notification by e-mail\', \'Low Insurance Check\')"", ""precedence:(\'Send Notification by e-mail\', \'Reject Claim\')"", ""precedence:(\'Send Notification by e-mail\', \'Accept Claim\')"", ""precedence:(\'Send Notification by e-mail\', \'High Insurance Check\')"", ""precedence:(\'Send Notification by e-mail\', \'Low Medical History\')"", ""precedence:(\'Send Notification by e-mail\', \'Register\')"", ""precedence:(\'Send Notification by e-mail\', \'Send Questionnaire\')"", ""precedence:(\'Send Notification by e-mail\', \'Send Notification by Post\')"", ""precedence:(\'Send Notification by e-mail\', \'Create Questionnaire\')"", ""precedence:(\'Send Notification by e-mail\', \'Contact Hospital\')"", ""precedence:(\'Send Notification by e-mail\', \'Prepare Notification Content\')"", ""precedence:(\'Send Notification by e-mail\', \'High Medical History\')""]\n        # expected_train_names =\n        # self.assertEqual(expected_data, data)\n        # self.assertEqual(expected_labels, labels)\n        self.assertEqual(expected_featurenames, featurenames)\n        # self.assertEqual(expected_train_names, train_names)\n\n    def test_filter_candidates_by_support(self):\n        not_filtered_candidates = [(\'Send Notification by e-mail\',), (\'Send Notification by Post\',), (\'Send Questionnaire\',), (\'High Medical History\',), (\'Prepare Notification Content\',), (\'Register\',), (\'Low Insurance Check\',), (\'Reject Claim\',), (\'Low Medical History\',), (\'Contact Hospital\',), (\'High Insurance Check\',), (\'Accept Claim\',), (\'Create Questionnaire\',), (\'Send Notification by e-mail\', \'Send Notification by Post\'), (\'Send Notification by e-mail\', \'Send Questionnaire\'), (\'Send Notification by e-mail\', \'High Medical History\'), (\'Send Notification by e-mail\', \'Prepare Notification Content\'), (\'Send Notification by e-mail\', \'Register\'), (\'Send Notification by e-mail\', \'Low Insurance Check\'), (\'Send Notification by e-mail\', \'Reject Claim\'), (\'Send Notification by e-mail\', \'Low Medical History\'), (\'Send Notification by e-mail\', \'Contact Hospital\'), (\'Send Notification by e-mail\', \'High Insurance Check\'), (\'Send Notification by e-mail\', \'Accept Claim\'), (\'Send Notification by e-mail\', \'Create Questionnaire\'), (\'Send Notification by Post\', \'Send Notification by e-mail\'), (\'Send Notification by Post\', \'Send Questionnaire\'), (\'Send Notification by Post\', \'High Medical History\'), (\'Send Notification by Post\', \'Prepare Notification Content\'), (\'Send Notification by Post\', \'Register\'), (\'Send Notification by Post\', \'Low Insurance Check\'), (\'Send Notification by Post\', \'Reject Claim\'), (\'Send Notification by Post\', \'Low Medical History\'), (\'Send Notification by Post\', \'Contact Hospital\'), (\'Send Notification by Post\', \'High Insurance Check\'), (\'Send Notification by Post\', \'Accept Claim\'), (\'Send Notification by Post\', \'Create Questionnaire\'), (\'Send Questionnaire\', \'Send Notification by e-mail\'), (\'Send Questionnaire\', \'Send Notification by Post\'), (\'Send Questionnaire\', \'High Medical History\'), (\'Send Questionnaire\', \'Prepare Notification Content\'), (\'Send Questionnaire\', \'Register\'), (\'Send Questionnaire\', \'Low Insurance Check\'), (\'Send Questionnaire\', \'Reject Claim\'), (\'Send Questionnaire\', \'Low Medical History\'), (\'Send Questionnaire\', \'Contact Hospital\'), (\'Send Questionnaire\', \'High Insurance Check\'), (\'Send Questionnaire\', \'Accept Claim\'), (\'Send Questionnaire\', \'Create Questionnaire\'), (\'High Medical History\', \'Send Notification by e-mail\'), (\'High Medical History\', \'Send Notification by Post\'), (\'High Medical History\', \'Send Questionnaire\'), (\'High Medical History\', \'Prepare Notification Content\'), (\'High Medical History\', \'Register\'), (\'High Medical History\', \'Low Insurance Check\'), (\'High Medical History\', \'Reject Claim\'), (\'High Medical History\', \'Low Medical History\'), (\'High Medical History\', \'Contact Hospital\'), (\'High Medical History\', \'High Insurance Check\'), (\'High Medical History\', \'Accept Claim\'), (\'High Medical History\', \'Create Questionnaire\'), (\'Prepare Notification Content\', \'Send Notification by e-mail\'), (\'Prepare Notification Content\', \'Send Notification by Post\'), (\'Prepare Notification Content\', \'Send Questionnaire\'), (\'Prepare Notification Content\', \'High Medical History\'), (\'Prepare Notification Content\', \'Register\'), (\'Prepare Notification Content\', \'Low Insurance Check\'), (\'Prepare Notification Content\', \'Reject Claim\'), (\'Prepare Notification Content\', \'Low Medical History\'), (\'Prepare Notification Content\', \'Contact Hospital\'), (\'Prepare Notification Content\', \'High Insurance Check\'), (\'Prepare Notification Content\', \'Accept Claim\'), (\'Prepare Notification Content\', \'Create Questionnaire\'), (\'Register\', \'Send Notification by e-mail\'), (\'Register\', \'Send Notification by Post\'), (\'Register\', \'Send Questionnaire\'), (\'Register\', \'High Medical History\'), (\'Register\', \'Prepare Notification Content\'), (\'Register\', \'Low Insurance Check\'), (\'Register\', \'Reject Claim\'), (\'Register\', \'Low Medical History\'), (\'Register\', \'Contact Hospital\'), (\'Register\', \'High Insurance Check\'), (\'Register\', \'Accept Claim\'), (\'Register\', \'Create Questionnaire\'), (\'Low Insurance Check\', \'Send Notification by e-mail\'), (\'Low Insurance Check\', \'Send Notification by Post\'), (\'Low Insurance Check\', \'Send Questionnaire\'), (\'Low Insurance Check\', \'High Medical History\'), (\'Low Insurance Check\', \'Prepare Notification Content\'), (\'Low Insurance Check\', \'Register\'), (\'Low Insurance Check\', \'Reject Claim\'), (\'Low Insurance Check\', \'Low Medical History\'), (\'Low Insurance Check\', \'Contact Hospital\'), (\'Low Insurance Check\', \'High Insurance Check\'), (\'Low Insurance Check\', \'Accept Claim\'), (\'Low Insurance Check\', \'Create Questionnaire\'), (\'Reject Claim\', \'Send Notification by e-mail\'), (\'Reject Claim\', \'Send Notification by Post\'), (\'Reject Claim\', \'Send Questionnaire\'), (\'Reject Claim\', \'High Medical History\'), (\'Reject Claim\', \'Prepare Notification Content\'), (\'Reject Claim\', \'Register\'), (\'Reject Claim\', \'Low Insurance Check\'), (\'Reject Claim\', \'Low Medical History\'), (\'Reject Claim\', \'Contact Hospital\'), (\'Reject Claim\', \'High Insurance Check\'), (\'Reject Claim\', \'Accept Claim\'), (\'Reject Claim\', \'Create Questionnaire\'), (\'Low Medical History\', \'Send Notification by e-mail\'), (\'Low Medical History\', \'Send Notification by Post\'), (\'Low Medical History\', \'Send Questionnaire\'), (\'Low Medical History\', \'High Medical History\'), (\'Low Medical History\', \'Prepare Notification Content\'), (\'Low Medical History\', \'Register\'), (\'Low Medical History\', \'Low Insurance Check\'), (\'Low Medical History\', \'Reject Claim\'), (\'Low Medical History\', \'Contact Hospital\'), (\'Low Medical History\', \'High Insurance Check\'), (\'Low Medical History\', \'Accept Claim\'), (\'Low Medical History\', \'Create Questionnaire\'), (\'Contact Hospital\', \'Send Notification by e-mail\'), (\'Contact Hospital\', \'Send Notification by Post\'), (\'Contact Hospital\', \'Send Questionnaire\'), (\'Contact Hospital\', \'High Medical History\'), (\'Contact Hospital\', \'Prepare Notification Content\'), (\'Contact Hospital\', \'Register\'), (\'Contact Hospital\', \'Low Insurance Check\'), (\'Contact Hospital\', \'Reject Claim\'), (\'Contact Hospital\', \'Low Medical History\'), (\'Contact Hospital\', \'High Insurance Check\'), (\'Contact Hospital\', \'Accept Claim\'), (\'Contact Hospital\', \'Create Questionnaire\'), (\'High Insurance Check\', \'Send Notification by e-mail\'), (\'High Insurance Check\', \'Send Notification by Post\'), (\'High Insurance Check\', \'Send Questionnaire\'), (\'High Insurance Check\', \'High Medical History\'), (\'High Insurance Check\', \'Prepare Notification Content\'), (\'High Insurance Check\', \'Register\'), (\'High Insurance Check\', \'Low Insurance Check\'), (\'High Insurance Check\', \'Reject Claim\'), (\'High Insurance Check\', \'Low Medical History\'), (\'High Insurance Check\', \'Contact Hospital\'), (\'High Insurance Check\', \'Accept Claim\'), (\'High Insurance Check\', \'Create Questionnaire\'), (\'Accept Claim\', \'Send Notification by e-mail\'), (\'Accept Claim\', \'Send Notification by Post\'), (\'Accept Claim\', \'Send Questionnaire\'), (\'Accept Claim\', \'High Medical History\'), (\'Accept Claim\', \'Prepare Notification Content\'), (\'Accept Claim\', \'Register\'), (\'Accept Claim\', \'Low Insurance Check\'), (\'Accept Claim\', \'Reject Claim\'), (\'Accept Claim\', \'Low Medical History\'), (\'Accept Claim\', \'Contact Hospital\'), (\'Accept Claim\', \'High Insurance Check\'), (\'Accept Claim\', \'Create Questionnaire\'), (\'Create Questionnaire\', \'Send Notification by e-mail\'), (\'Create Questionnaire\', \'Send Notification by Post\'), (\'Create Questionnaire\', \'Send Questionnaire\'), (\'Create Questionnaire\', \'High Medical History\'), (\'Create Questionnaire\', \'Prepare Notification Content\'), (\'Create Questionnaire\', \'Register\'), (\'Create Questionnaire\', \'Low Insurance Check\'), (\'Create Questionnaire\', \'Reject Claim\'), (\'Create Questionnaire\', \'Low Medical History\'), (\'Create Questionnaire\', \'Contact Hospital\'), (\'Create Questionnaire\', \'High Insurance Check\'), (\'Create Questionnaire\', \'Accept Claim\')]\n        ev_support_true = 0\n        ev_support_false = 0\n        filtered_candidates = filter_candidates_by_support(not_filtered_candidates, self.transformed_log, self.labels, ev_support_true, ev_support_false)\n        expected = [(\'Send Notification by e-mail\',), (\'Send Notification by Post\',), (\'Send Questionnaire\',), (\'High Medical History\',), (\'Prepare Notification Content\',), (\'Register\',), (\'Low Insurance Check\',), (\'Reject Claim\',), (\'Low Medical History\',), (\'Contact Hospital\',), (\'High Insurance Check\',), (\'Accept Claim\',), (\'Create Questionnaire\',), (\'Send Notification by e-mail\', \'Send Notification by Post\'), (\'Send Notification by e-mail\', \'Send Questionnaire\'), (\'Send Notification by e-mail\', \'High Medical History\'), (\'Send Notification by e-mail\', \'Prepare Notification Content\'), (\'Send Notification by e-mail\', \'Register\'), (\'Send Notification by e-mail\', \'Low Insurance Check\'), (\'Send Notification by e-mail\', \'Reject Claim\'), (\'Send Notification by e-mail\', \'Low Medical History\'), (\'Send Notification by e-mail\', \'Contact Hospital\'), (\'Send Notification by e-mail\', \'High Insurance Check\'), (\'Send Notification by e-mail\', \'Accept Claim\'), (\'Send Notification by e-mail\', \'Create Questionnaire\'), (\'Send Notification by Post\', \'Send Notification by e-mail\'), (\'Send Notification by Post\', \'Send Questionnaire\'), (\'Send Notification by Post\', \'High Medical History\'), (\'Send Notification by Post\', \'Prepare Notification Content\'), (\'Send Notification by Post\', \'Register\'), (\'Send Notification by Post\', \'Low Insurance Check\'), (\'Send Notification by Post\', \'Reject Claim\'), (\'Send Notification by Post\', \'Low Medical History\'), (\'Send Notification by Post\', \'Contact Hospital\'), (\'Send Notification by Post\', \'High Insurance Check\'), (\'Send Notification by Post\', \'Accept Claim\'), (\'Send Notification by Post\', \'Create Questionnaire\'), (\'Send Questionnaire\', \'Send Notification by e-mail\'), (\'Send Questionnaire\', \'Send Notification by Post\'), (\'Send Questionnaire\', \'High Medical History\'), (\'Send Questionnaire\', \'Prepare Notification Content\'), (\'Send Questionnaire\', \'Register\'), (\'Send Questionnaire\', \'Low Insurance Check\'), (\'Send Questionnaire\', \'Reject Claim\'), (\'Send Questionnaire\', \'Low Medical History\'), (\'Send Questionnaire\', \'Contact Hospital\'), (\'Send Questionnaire\', \'High Insurance Check\'), (\'Send Questionnaire\', \'Accept Claim\'), (\'Send Questionnaire\', \'Create Questionnaire\'), (\'High Medical History\', \'Send Notification by e-mail\'), (\'High Medical History\', \'Send Notification by Post\'), (\'High Medical History\', \'Send Questionnaire\'), (\'High Medical History\', \'Prepare Notification Content\'), (\'High Medical History\', \'Register\'), (\'High Medical History\', \'Low Insurance Check\'), (\'High Medical History\', \'Reject Claim\'), (\'High Medical History\', \'Low Medical History\'), (\'High Medical History\', \'Contact Hospital\'), (\'High Medical History\', \'High Insurance Check\'), (\'High Medical History\', \'Accept Claim\'), (\'High Medical History\', \'Create Questionnaire\'), (\'Prepare Notification Content\', \'Send Notification by e-mail\'), (\'Prepare Notification Content\', \'Send Notification by Post\'), (\'Prepare Notification Content\', \'Send Questionnaire\'), (\'Prepare Notification Content\', \'High Medical History\'), (\'Prepare Notification Content\', \'Register\'), (\'Prepare Notification Content\', \'Low Insurance Check\'), (\'Prepare Notification Content\', \'Reject Claim\'), (\'Prepare Notification Content\', \'Low Medical History\'), (\'Prepare Notification Content\', \'Contact Hospital\'), (\'Prepare Notification Content\', \'High Insurance Check\'), (\'Prepare Notification Content\', \'Accept Claim\'), (\'Prepare Notification Content\', \'Create Questionnaire\'), (\'Register\', \'Send Notification by e-mail\'), (\'Register\', \'Send Notification by Post\'), (\'Register\', \'Send Questionnaire\'), (\'Register\', \'High Medical History\'), (\'Register\', \'Prepare Notification Content\'), (\'Register\', \'Low Insurance Check\'), (\'Register\', \'Reject Claim\'), (\'Register\', \'Low Medical History\'), (\'Register\', \'Contact Hospital\'), (\'Register\', \'High Insurance Check\'), (\'Register\', \'Accept Claim\'), (\'Register\', \'Create Questionnaire\'), (\'Low Insurance Check\', \'Send Notification by e-mail\'), (\'Low Insurance Check\', \'Send Notification by Post\'), (\'Low Insurance Check\', \'Send Questionnaire\'), (\'Low Insurance Check\', \'High Medical History\'), (\'Low Insurance Check\', \'Prepare Notification Content\'), (\'Low Insurance Check\', \'Register\'), (\'Low Insurance Check\', \'Reject Claim\'), (\'Low Insurance Check\', \'Low Medical History\'), (\'Low Insurance Check\', \'Contact Hospital\'), (\'Low Insurance Check\', \'High Insurance Check\'), (\'Low Insurance Check\', \'Accept Claim\'), (\'Low Insurance Check\', \'Create Questionnaire\'), (\'Reject Claim\', \'Send Notification by e-mail\'), (\'Reject Claim\', \'Send Notification by Post\'), (\'Reject Claim\', \'Send Questionnaire\'), (\'Reject Claim\', \'High Medical History\'), (\'Reject Claim\', \'Prepare Notification Content\'), (\'Reject Claim\', \'Register\'), (\'Reject Claim\', \'Low Insurance Check\'), (\'Reject Claim\', \'Low Medical History\'), (\'Reject Claim\', \'Contact Hospital\'), (\'Reject Claim\', \'High Insurance Check\'), (\'Reject Claim\', \'Accept Claim\'), (\'Reject Claim\', \'Create Questionnaire\'), (\'Low Medical History\', \'Send Notification by e-mail\'), (\'Low Medical History\', \'Send Notification by Post\'), (\'Low Medical History\', \'Send Questionnaire\'), (\'Low Medical History\', \'High Medical History\'), (\'Low Medical History\', \'Prepare Notification Content\'), (\'Low Medical History\', \'Register\'), (\'Low Medical History\', \'Low Insurance Check\'), (\'Low Medical History\', \'Reject Claim\'), (\'Low Medical History\', \'Contact Hospital\'), (\'Low Medical History\', \'High Insurance Check\'), (\'Low Medical History\', \'Accept Claim\'), (\'Low Medical History\', \'Create Questionnaire\'), (\'Contact Hospital\', \'Send Notification by e-mail\'), (\'Contact Hospital\', \'Send Notification by Post\'), (\'Contact Hospital\', \'Send Questionnaire\'), (\'Contact Hospital\', \'High Medical History\'), (\'Contact Hospital\', \'Prepare Notification Content\'), (\'Contact Hospital\', \'Register\'), (\'Contact Hospital\', \'Low Insurance Check\'), (\'Contact Hospital\', \'Reject Claim\'), (\'Contact Hospital\', \'Low Medical History\'), (\'Contact Hospital\', \'High Insurance Check\'), (\'Contact Hospital\', \'Accept Claim\'), (\'Contact Hospital\', \'Create Questionnaire\'), (\'High Insurance Check\', \'Send Notification by e-mail\'), (\'High Insurance Check\', \'Send Notification by Post\'), (\'High Insurance Check\', \'Send Questionnaire\'), (\'High Insurance Check\', \'High Medical History\'), (\'High Insurance Check\', \'Prepare Notification Content\'), (\'High Insurance Check\', \'Register\'), (\'High Insurance Check\', \'Low Insurance Check\'), (\'High Insurance Check\', \'Reject Claim\'), (\'High Insurance Check\', \'Low Medical History\'), (\'High Insurance Check\', \'Contact Hospital\'), (\'High Insurance Check\', \'Accept Claim\'), (\'High Insurance Check\', \'Create Questionnaire\'), (\'Accept Claim\', \'Send Notification by e-mail\'), (\'Accept Claim\', \'Send Notification by Post\'), (\'Accept Claim\', \'Send Questionnaire\'), (\'Accept Claim\', \'High Medical History\'), (\'Accept Claim\', \'Prepare Notification Content\'), (\'Accept Claim\', \'Register\'), (\'Accept Claim\', \'Low Insurance Check\'), (\'Accept Claim\', \'Reject Claim\'), (\'Accept Claim\', \'Low Medical History\'), (\'Accept Claim\', \'Contact Hospital\'), (\'Accept Claim\', \'High Insurance Check\'), (\'Accept Claim\', \'Create Questionnaire\'), (\'Create Questionnaire\', \'Send Notification by e-mail\'), (\'Create Questionnaire\', \'Send Notification by Post\'), (\'Create Questionnaire\', \'Send Questionnaire\'), (\'Create Questionnaire\', \'High Medical History\'), (\'Create Questionnaire\', \'Prepare Notification Content\'), (\'Create Questionnaire\', \'Register\'), (\'Create Questionnaire\', \'Low Insurance Check\'), (\'Create Questionnaire\', \'Reject Claim\'), (\'Create Questionnaire\', \'Low Medical History\'), (\'Create Questionnaire\', \'Contact Hospital\'), (\'Create Questionnaire\', \'High Insurance Check\'), (\'Create Questionnaire\', \'Accept Claim\')]\n        self.assertEqual(expected, filtered_candidates)\n\n\nclass TestApplyTemplate(TestCase):\n\n    def setUp(self):\n        self.candidates = [(\'Send Notification by e-mail\',), (\'Send Notification by Post\',), (\'Send Questionnaire\',), (\'High Medical History\',), (\'Prepare Notification Content\',), (\'Register\',), (\'Low Insurance Check\',), (\'Reject Claim\',), (\'Low Medical History\',), (\'Contact Hospital\',), (\'High Insurance Check\',), (\'Accept Claim\',), (\'Create Questionnaire\',), (\'Send Notification by e-mail\', \'Send Notification by Post\'), (\'Send Notification by e-mail\', \'Send Questionnaire\'), (\'Send Notification by e-mail\', \'High Medical History\'), (\'Send Notification by e-mail\', \'Prepare Notification Content\'), (\'Send Notification by e-mail\', \'Register\'), (\'Send Notification by e-mail\', \'Low Insurance Check\'), (\'Send Notification by e-mail\', \'Reject Claim\'), (\'Send Notification by e-mail\', \'Low Medical History\'), (\'Send Notification by e-mail\', \'Contact Hospital\'), (\'Send Notification by e-mail\', \'High Insurance Check\'), (\'Send Notification by e-mail\', \'Accept Claim\'), (\'Send Notification by e-mail\', \'Create Questionnaire\'), (\'Send Notification by Post\', \'Send Notification by e-mail\'), (\'Send Notification by Post\', \'Send Questionnaire\'), (\'Send Notification by Post\', \'High Medical History\'), (\'Send Notification by Post\', \'Prepare Notification Content\'), (\'Send Notification by Post\', \'Register\'), (\'Send Notification by Post\', \'Low Insurance Check\'), (\'Send Notification by Post\', \'Reject Claim\'), (\'Send Notification by Post\', \'Low Medical History\'), (\'Send Notification by Post\', \'Contact Hospital\'), (\'Send Notification by Post\', \'High Insurance Check\'), (\'Send Notification by Post\', \'Accept Claim\'), (\'Send Notification by Post\', \'Create Questionnaire\'), (\'Send Questionnaire\', \'Send Notification by e-mail\'), (\'Send Questionnaire\', \'Send Notification by Post\'), (\'Send Questionnaire\', \'High Medical History\'), (\'Send Questionnaire\', \'Prepare Notification Content\'), (\'Send Questionnaire\', \'Register\'), (\'Send Questionnaire\', \'Low Insurance Check\'), (\'Send Questionnaire\', \'Reject Claim\'), (\'Send Questionnaire\', \'Low Medical History\'), (\'Send Questionnaire\', \'Contact Hospital\'), (\'Send Questionnaire\', \'High Insurance Check\'), (\'Send Questionnaire\', \'Accept Claim\'), (\'Send Questionnaire\', \'Create Questionnaire\'), (\'High Medical History\', \'Send Notification by e-mail\'), (\'High Medical History\', \'Send Notification by Post\'), (\'High Medical History\', \'Send Questionnaire\'), (\'High Medical History\', \'Prepare Notification Content\'), (\'High Medical History\', \'Register\'), (\'High Medical History\', \'Low Insurance Check\'), (\'High Medical History\', \'Reject Claim\'), (\'High Medical History\', \'Low Medical History\'), (\'High Medical History\', \'Contact Hospital\'), (\'High Medical History\', \'High Insurance Check\'), (\'High Medical History\', \'Accept Claim\'), (\'High Medical History\', \'Create Questionnaire\'), (\'Prepare Notification Content\', \'Send Notification by e-mail\'), (\'Prepare Notification Content\', \'Send Notification by Post\'), (\'Prepare Notification Content\', \'Send Questionnaire\'), (\'Prepare Notification Content\', \'High Medical History\'), (\'Prepare Notification Content\', \'Register\'), (\'Prepare Notification Content\', \'Low Insurance Check\'), (\'Prepare Notification Content\', \'Reject Claim\'), (\'Prepare Notification Content\', \'Low Medical History\'), (\'Prepare Notification Content\', \'Contact Hospital\'), (\'Prepare Notification Content\', \'High Insurance Check\'), (\'Prepare Notification Content\', \'Accept Claim\'), (\'Prepare Notification Content\', \'Create Questionnaire\'), (\'Register\', \'Send Notification by e-mail\'), (\'Register\', \'Send Notification by Post\'), (\'Register\', \'Send Questionnaire\'), (\'Register\', \'High Medical History\'), (\'Register\', \'Prepare Notification Content\'), (\'Register\', \'Low Insurance Check\'), (\'Register\', \'Reject Claim\'), (\'Register\', \'Low Medical History\'), (\'Register\', \'Contact Hospital\'), (\'Register\', \'High Insurance Check\'), (\'Register\', \'Accept Claim\'), (\'Register\', \'Create Questionnaire\'), (\'Low Insurance Check\', \'Send Notification by e-mail\'), (\'Low Insurance Check\', \'Send Notification by Post\'), (\'Low Insurance Check\', \'Send Questionnaire\'), (\'Low Insurance Check\', \'High Medical History\'), (\'Low Insurance Check\', \'Prepare Notification Content\'), (\'Low Insurance Check\', \'Register\'), (\'Low Insurance Check\', \'Reject Claim\'), (\'Low Insurance Check\', \'Low Medical History\'), (\'Low Insurance Check\', \'Contact Hospital\'), (\'Low Insurance Check\', \'High Insurance Check\'), (\'Low Insurance Check\', \'Accept Claim\'), (\'Low Insurance Check\', \'Create Questionnaire\'), (\'Reject Claim\', \'Send Notification by e-mail\'), (\'Reject Claim\', \'Send Notification by Post\'), (\'Reject Claim\', \'Send Questionnaire\'), (\'Reject Claim\', \'High Medical History\'), (\'Reject Claim\', \'Prepare Notification Content\'), (\'Reject Claim\', \'Register\'), (\'Reject Claim\', \'Low Insurance Check\'), (\'Reject Claim\', \'Low Medical History\'), (\'Reject Claim\', \'Contact Hospital\'), (\'Reject Claim\', \'High Insurance Check\'), (\'Reject Claim\', \'Accept Claim\'), (\'Reject Claim\', \'Create Questionnaire\'), (\'Low Medical History\', \'Send Notification by e-mail\'), (\'Low Medical History\', \'Send Notification by Post\'), (\'Low Medical History\', \'Send Questionnaire\'), (\'Low Medical History\', \'High Medical History\'), (\'Low Medical History\', \'Prepare Notification Content\'), (\'Low Medical History\', \'Register\'), (\'Low Medical History\', \'Low Insurance Check\'), (\'Low Medical History\', \'Reject Claim\'), (\'Low Medical History\', \'Contact Hospital\'), (\'Low Medical History\', \'High Insurance Check\'), (\'Low Medical History\', \'Accept Claim\'), (\'Low Medical History\', \'Create Questionnaire\'), (\'Contact Hospital\', \'Send Notification by e-mail\'), (\'Contact Hospital\', \'Send Notification by Post\'), (\'Contact Hospital\', \'Send Questionnaire\'), (\'Contact Hospital\', \'High Medical History\'), (\'Contact Hospital\', \'Prepare Notification Content\'), (\'Contact Hospital\', \'Register\'), (\'Contact Hospital\', \'Low Insurance Check\'), (\'Contact Hospital\', \'Reject Claim\'), (\'Contact Hospital\', \'Low Medical History\'), (\'Contact Hospital\', \'High Insurance Check\'), (\'Contact Hospital\', \'Accept Claim\'), (\'Contact Hospital\', \'Create Questionnaire\'), (\'High Insurance Check\', \'Send Notification by e-mail\'), (\'High Insurance Check\', \'Send Notification by Post\'), (\'High Insurance Check\', \'Send Questionnaire\'), (\'High Insurance Check\', \'High Medical History\'), (\'High Insurance Check\', \'Prepare Notification Content\'), (\'High Insurance Check\', \'Register\'), (\'High Insurance Check\', \'Low Insurance Check\'), (\'High Insurance Check\', \'Reject Claim\'), (\'High Insurance Check\', \'Low Medical History\'), (\'High Insurance Check\', \'Contact Hospital\'), (\'High Insurance Check\', \'Accept Claim\'), (\'High Insurance Check\', \'Create Questionnaire\'), (\'Accept Claim\', \'Send Notification by e-mail\'), (\'Accept Claim\', \'Send Notification by Post\'), (\'Accept Claim\', \'Send Questionnaire\'), (\'Accept Claim\', \'High Medical History\'), (\'Accept Claim\', \'Prepare Notification Content\'), (\'Accept Claim\', \'Register\'), (\'Accept Claim\', \'Low Insurance Check\'), (\'Accept Claim\', \'Reject Claim\'), (\'Accept Claim\', \'Low Medical History\'), (\'Accept Claim\', \'Contact Hospital\'), (\'Accept Claim\', \'High Insurance Check\'), (\'Accept Claim\', \'Create Questionnaire\'), (\'Create Questionnaire\', \'Send Notification by e-mail\'), (\'Create Questionnaire\', \'Send Notification by Post\'), (\'Create Questionnaire\', \'Send Questionnaire\'), (\'Create Questionnaire\', \'High Medical History\'), (\'Create Questionnaire\', \'Prepare Notification Content\'), (\'Create Questionnaire\', \'Register\'), (\'Create Questionnaire\', \'Low Insurance Check\'), (\'Create Questionnaire\', \'Reject Claim\'), (\'Create Questionnaire\', \'Low Medical History\'), (\'Create Questionnaire\', \'Contact Hospital\'), (\'Create Questionnaire\', \'High Insurance Check\'), (\'Create Questionnaire\', \'Accept Claim\')]\n        self.transformed_log = {\n            \'2_100\': {\'Contact Hospital\': [3], \'Create Questionnaire\': [1], \'High Insurance Check\': [2], \'High Medical History\': [4], \'Prepare Notification Content\': [6], \'Register\': [0], \'Reject Claim\': [5]},\n            \'2_101\': {\'Accept Claim\': [4], \'Create Questionnaire\': [2], \'Low Insurance Check\': [3], \'Low Medical History\': [1], \'Prepare Notification Content\': [5], \'Register\': [0], \'Send Questionnaire\': [6]},\n            \'2_102\': {\'Contact Hospital\': [4], \'Create Questionnaire\': [1], \'High Insurance Check\': [2], \'High Medical History\': [3], \'Prepare Notification Content\': [6], \'Register\': [0], \'Reject Claim\': [5]},\n            \'2_103\': {\'Accept Claim\': [3], \'Create Questionnaire\': [4], \'Low Insurance Check\': [2], \'Low Medical History\': [1], \'Prepare Notification Content\': [5], \'Register\': [0], \'Send Notification by e-mail\': [6]},\n            \'2_104\': {\'Accept Claim\': [3], \'Create Questionnaire\': [5], \'Low Insurance Check\': [2], \'Low Medical History\': [1], \'Prepare Notification Content\': [4], \'Register\': [0], \'Send Notification by e-mail\': [6]},\n            \'2_105\': {\'Contact Hospital\': [1], \'Create Questionnaire\': [6], \'High Insurance Check\': [3], \'High Medical History\': [2], \'Prepare Notification Content\': [5], \'Register\': [0], \'Reject Claim\': [4]},\n            \'2_106\': {\'Contact Hospital\': [1], \'Create Questionnaire\': [3], \'High Insurance Check\': [2], \'High Medical History\': [4], \'Prepare Notification Content\': [6], \'Register\': [0], \'Reject Claim\': [5]},\n            \'2_107\': {\'Create Questionnaire\': [1], \'Low Insurance Check\': [3], \'Low Medical History\': [2], \'Prepare Notification Content\': [5], \'Register\': [0], \'Reject Claim\': [4], \'Send Notification by e-mail\': [6]},\n            \'2_108\': {\'Accept Claim\': [3], \'Create Questionnaire\': [4], \'Low Insurance Check\': [2], \'Low Medical History\': [1], \'Prepare Notification Content\': [5], \'Register\': [0], \'Send Notification by Post\': [6]},\n            \'2_109\': {\'Accept Claim\': [5], \'Contact Hospital\': [4], \'Create Questionnaire\': [1], \'High Insurance Check\': [3], \'High Medical History\': [2], \'Prepare Notification Content\': [6], \'Register\': [0]},\n            \'2_126\': {\'Create Questionnaire\': [1], \'Low Insurance Check\': [3], \'Low Medical History\': [2], \'Prepare Notification Content\': [5], \'Register\': [0], \'Reject Claim\': [4], \'Send Questionnaire\': [6]},\n            \'2_124\': {\'Accept Claim\': [5], \'Contact Hospital\': [3], \'Create Questionnaire\': [1], \'High Insurance Check\': [4], \'High Medical History\': [2], \'Prepare Notification Content\': [6], \'Register\': [0]},\n            \'2_122\': {\'Accept Claim\': [4], \'Contact Hospital\': [3], \'Create Questionnaire\': [6], \'High Insurance Check\': [1], \'High Medical History\': [2], \'Prepare Notification Content\': [5], \'Register\': [0]},\n            \'2_123\': {\'Contact Hospital\': [3], \'Create Questionnaire\': [5], \'High Insurance Check\': [1], \'High Medical History\': [2], \'Prepare Notification Content\': [6], \'Register\': [0], \'Reject Claim\': [4]}}\n\n    def test_apply_template_to_log_init(self):\n        templates = [\'init\']\n        constraint_result = []\n        template = templates[0]\n        for candidate in self.candidates:\n            if len(candidate) == template_sizes[template]:\n                constraint_result += [apply_template_to_log(template, candidate, self.transformed_log)]\n        expected = [ [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]\n        self.assertEqual(expected, constraint_result)\n\n    def test_apply_template_to_log_exist(self):\n        templates = [\'exist\']\n        constraint_result = []\n        template = templates[0]\n        for candidate in self.candidates:\n            if len(candidate) == template_sizes[template]:\n                constraint_result += [apply_template_to_log(template, candidate, self.transformed_log)]\n        expected = [ [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]\n        self.assertEqual(expected, constraint_result)\n\n    def test_apply_template_to_log_absence1(self):\n        templates = [\'absence1\']\n        constraint_result = []\n        template = templates[0]\n        for candidate in self.candidates:\n            if len(candidate) == template_sizes[template]:\n                constraint_result += [apply_template_to_log(template, candidate, self.transformed_log)]\n        expected = [\n            [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n        ]\n        self.assertEqual(expected, constraint_result)\n\n    def test_apply_template_to_log_absence2(self):\n        templates = [\'absence2\']\n        constraint_result = []\n        template = templates[0]\n        for candidate in self.candidates:\n            if len(candidate) == template_sizes[template]:\n                constraint_result += [apply_template_to_log(template, candidate, self.transformed_log)]\n        expected = [\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n        ]\n        self.assertEqual(expected, constraint_result)\n\n    def test_apply_template_to_log_absence3(self):\n        templates = [\'absence3\']\n        constraint_result = []\n        template = templates[0]\n        for candidate in self.candidates:\n            if len(candidate) == template_sizes[template]:\n                constraint_result += [apply_template_to_log(template, candidate, self.transformed_log)]\n        expected = [\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n        ]\n        self.assertEqual(expected, constraint_result)\n\n    def test_apply_template_to_log_choice(self):\n        templates = [\'choice\']\n        constraint_result = []\n        template = templates[0]\n        for candidate in self.candidates:\n            if len(candidate) == template_sizes[template]:\n                constraint_result += [apply_template_to_log(template, candidate, self.transformed_log)]\n        expected = [\n            [-1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1], [1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1], [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], [-1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1], [1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, 1], [-1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1], [1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1], [1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1, -1], [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1], [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1], [1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1], [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], [-1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1], [1, 1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1], [-1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1], [1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1], [1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1], [-1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1], [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], [1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1], [1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1], [-1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, 1], [1, -1, 1, -1, -1, 1, 1, 1, 1, -1, 1, -1, -1, 1], [1, 1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1], [-1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1], [1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1], [1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, 1, 1, 1, -1, 1, 1, -1], [-1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1], [-1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1], [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, -1], [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], [1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1]\n        ]\n        self.assertEqual(expected, constraint_result)\n\n    def test_apply_template_to_log_coexistence(self):\n        templates = [\'coexistence\']\n        constraint_result = []\n        template = templates[0]\n        for candidate in self.candidates:\n            if len(candidate) == template_sizes[template]:\n                constraint_result += [apply_template_to_log(template, candidate, self.transformed_log)]\n        expected = [\n            [0, 0, 0, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0], [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, -1, -1, -1, -1, 1, 0, 0, -1, 0, 0, -1], [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], [0, -1, 0, 1, 1, 0, 0, -1, -1, -1, 0, -1, -1, 0], [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], [0, 0, 0, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, 1, -1, 0, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0], [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], [-1, -1, -1, 0, 0, -1, -1, -1, 0, 0, 1, 0, 0, -1], [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], [0, 1, 0, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, 0], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, 0, 0, -1], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 1, 0, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, 0, -1, -1, -1, -1, -1, 1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, -1], [-1, -1, -1, 0, 0, -1, -1, -1, 0, 0, 1, 0, 0, -1], [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, 0, 0, -1], [-1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, 0, 0, -1], [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [-1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, 0, 0, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 1, 0, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [0, -1, 0, 1, 1, 0, 0, -1, -1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, 1, -1, 0, -1, -1, 0], [0, 1, 0, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [0, 1, 0, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 1, 0, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1]\n        ]\n        self.assertEqual(expected, constraint_result)\n\n    def test_apply_template_to_log_exactly1(self):\n        templates = [\'exactly1\']\n        constraint_result = []\n        template = templates[0]\n        for candidate in self.candidates:\n            if len(candidate) == template_sizes[template]:\n                constraint_result += [apply_template_to_log(template, candidate, self.transformed_log)]\n        expected = [[-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n        ]\n        self.assertEqual(expected, constraint_result)\n\n    def test_apply_template_to_log_exactly2(self):\n        templates = [\'exactly2\']\n        constraint_result = []\n        template = templates[0]\n        for candidate in self.candidates:\n            if len(candidate) == template_sizes[template]:\n                constraint_result += [apply_template_to_log(template, candidate, self.transformed_log)]\n        expected = [\n            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n        ]\n        self.assertEqual(expected, constraint_result)\n\n    def test_apply_template_to_log_exactly3(self):\n        templates = [\'exactly3\']\n        constraint_result = []\n        template = templates[0]\n        for candidate in self.candidates:\n            if len(candidate) == template_sizes[template]:\n                constraint_result += [apply_template_to_log(template, candidate, self.transformed_log)]\n        expected = [\n            [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n        ]\n        self.assertEqual(expected, constraint_result)\n\n    def test_apply_template_to_log_alternate_precedence(self):\n        templates = [\'alternate_precedence\']\n        constraint_result = []\n        template = templates[0]\n        for candidate in self.candidates:\n            if len(candidate) == template_sizes[template]:\n                constraint_result += [apply_template_to_log(template, candidate, self.transformed_log)]\n        expected = [\n            [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, -1, 0, 0, 1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, 1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, 1, 0], [-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, 1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [0, 1, 0, 1, 1, 0, 0, 0, 1, -1, 0, -1, -1, 0], [-1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [0, 0, 0, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, 1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [0, 1, 0, 1, 1, 0, 0, 0, 1, -1, 0, -1, -1, 0], [-1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, -1, 0, 0, 1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, 1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, 1, 0], [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [1, 0, 1, 0, 0, -1, 1, 0, 0, -1, 0, -1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, -1, 0, 0, 1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, -1, 1, 1], [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, 1, 0], [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1], [0, 0, 0, 1, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, -1, 1, 0, 0, 1, 0, 1, -1, -1], [1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, -1, 1, 1, 0, 0, 1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, -1, -1], [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, -1, -1], [0, 1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, -1, 0]\n        ]\n        self.assertEqual(expected, constraint_result)\n\n    def test_apply_template_to_log_alternate_succession(self):\n        templates = [\'alternate_succession\']\n        constraint_result = []\n        template = templates[0]\n        for candidate in self.candidates:\n            if len(candidate) == template_sizes[template]:\n                constraint_result += [apply_template_to_log(template, candidate, self.transformed_log)]\n        expected = [\n            [0, 0, 0, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0], [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, 0, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 0, 0, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0], [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, -1, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, 1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], [-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1], [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 1, 0, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0], [-1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, 0, -1, -1, -1, -1, -1, 1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, -1], [-1, -1, -1, 0, 0, -1, -1, -1, 0, 0, 1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, 0, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1], [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [-1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, 0, 0, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 1, 0, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0], [-1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], [1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, 1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1], [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], [1, 0, 1, 0, 0, -1, 1, 0, 0, -1, 0, -1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, -1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1], [0, -1, 0, 1, 1, 0, 0, -1, -1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, 1, -1, 0, -1, -1, 0], [0, 1, 0, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1], [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1], [1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], [1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1]\n        ]\n        self.assertEqual(expected, constraint_result)\n\n    def test_apply_template_to_log_alternate_response(self):\n        templates = [\'alternate_response\']\n        constraint_result = []\n        template = templates[0]\n        for candidate in self.candidates:\n            if len(candidate) == template_sizes[template]:\n                constraint_result += [apply_template_to_log(template, candidate, self.transformed_log)]\n        expected = [\n            [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, 1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], [-1, 0, -1, 0, 0, 1, -1, 0, 0, -1, 0, -1, 1, 1], [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], [0, -1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, 1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, 1, -1, -1, 0, 0, -1, 0, 0, 1], [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, 1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, 1, 0, 0, -1, 1, 0, 0, -1, 0, -1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, -1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, 1, 1], [0, -1, 0, 1, 1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, 1, -1, 0, -1, -1, 0], [0, 1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, -1, 0, 1, 1, 0, 0, 0, 1, -1, 0, -1, 1, 0], [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1], [1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], [1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1]\n        ]\n        self.assertEqual(expected, constraint_result)\n\n    def test_apply_template_to_log_chain_precedence(self):\n        templates = [\'chain_precedence\']\n        constraint_result = []\n        template = templates[0]\n        for candidate in self.candidates:\n            if len(candidate) == template_sizes[template]:\n                constraint_result += [apply_template_to_log(template, candidate, self.transformed_log)]\n        expected = [\n            [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [1, 0, -1, 0, 0, -1, 1, -1, 0, 0, -1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, 1, 0, 0, -1, -1, 0, 0, -1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 0, 0, 1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, 1, 1], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, 1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [0, 1, 0, 1, 1, 0, 0, 0, 1, -1, 0, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [1, 0, -1, 0, 0, 1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, 1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, 1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, 1, 0, 0, -1, 0, 1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, -1, 1, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [-1, 0, 1, 0, 0, -1, -1, 0, 0, -1, 0, -1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, 1, -1, -1, 0, 0, -1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, 1, -1, 0], [-1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [0, 0, 0, -1, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, 1, 0, 0, 1, 0, 1, -1, -1], [-1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, 1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0]\n        ]\n        self.assertEqual(expected, constraint_result)\n\n    def test_apply_template_to_log_chain_response(self):\n        templates = [\'chain_response\']\n        constraint_result = []\n        template = templates[0]\n        for candidate in self.candidates:\n            if len(candidate) == template_sizes[template]:\n                constraint_result += [apply_template_to_log(template, candidate, self.transformed_log)]\n        expected = [\n            [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, -1, 0, 0, -1, 1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, 1, 0, 0, -1, -1, 0, 0, -1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, 1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, -1, 0, 0, 1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, 1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, 1, 0, 0, -1, 0, 1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, -1, 1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, 1, 0, 0, -1, -1, 0, 0, -1, 0, -1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, 1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, 1, -1, -1], [-1, 0, -1, 0, 0, -1, 1, 0, 0, -1, 0, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, 1, 0, -1, 1, 0, 0, 0, -1, 1, 0, 1, 1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, -1, 0, 1, -1, 0, 0, 0, 1, -1, 0, -1, -1, 0], [-1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1], [-1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n        ]\n        self.assertEqual(expected, constraint_result)\n\n    def test_apply_template_to_log_chain_succession(self):\n        templates = [\'chain_succession\']\n        constraint_result = []\n        template = templates[0]\n        for candidate in self.candidates:\n            if len(candidate) == template_sizes[template]:\n                constraint_result += [apply_template_to_log(template, candidate, self.transformed_log)]\n        expected = [\n            [0, 0, 0, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0], [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, 0, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 0, 0, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0], [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, -1, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, 0, -1, 0, 0, -1, 1, -1, 0, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 0, 1, 0, 0, -1, -1, 0, 0, -1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 1, 0, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 0, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, -1], [-1, -1, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, 0, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, 0, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, 0], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], [1, 0, -1, 0, 0, 1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 0, 1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 0, -1, 0, 0, -1, 1, 0, 0, -1, 0, 1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, -1, 1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], [-1, 0, 1, 0, 0, -1, -1, 0, 0, -1, 0, -1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 0, -1, 0, 0, 1, -1, -1, 0, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, 1, -1, -1], [-1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1], [-1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n        ]\n        self.assertEqual(expected, constraint_result)\n\n    def test_apply_template_to_log_not_chain_succession(self):\n        templates = [\'not_chain_succession\']\n        constraint_result = []\n        template = templates[0]\n        for candidate in self.candidates:\n            if len(candidate) == template_sizes[template]:\n                constraint_result += [apply_template_to_log(template, candidate, self.transformed_log)]\n        expected = [\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-1, 0, 1, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, -1, 0, 0, 1, 1, 0, 0, 1, 0, -1, -1, -1], [1, 0, 1, 0, 0, -1, 1, 0, 0, -1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, -1, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], [1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, -1, -1], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], [-1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, -1], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-1, 0, 1, 0, 0, -1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, -1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 1, -1, 0, 0, 1, 0, -1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 1, -1, 0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, -1, 0, 0, 1, 1, 0, 0, 1, 0, 1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 1, 0], [1, 0, 1, 0, 0, 1, -1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0], [0, -1, 0, 1, -1, 0, 0, 0, 1, -1, 0, -1, -1, 0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 1, 0, -1, 1, 0, 0, 0, -1, 1, 0, 1, 1, 0], [0, 0, 0, 1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 1, -1, 0, 0, -1, 0, -1, 1, 1], [1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0]\n        ]\n        self.assertEqual(expected, constraint_result)\n\n    def test_apply_template_to_log_not_coexistence(self):\n        templates = [\'not_coexistence\']\n        constraint_result = []\n        template = templates[0]\n        for candidate in self.candidates:\n            if len(candidate) == template_sizes[template]:\n                constraint_result += [apply_template_to_log(template, candidate, self.transformed_log)]\n        expected = [\n            [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0], [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], [0, 1, 0, -1, -1, 0, 0, -1, 1, 0, 1, 0, 0, 0], [1, 0, 1, 1, 1, 1, 1, -1, 0, 0, 1, 0, 0, 1], [0, 1, 0, -1, -1, 0, 0, -1, 1, 0, 1, 0, 0, 0], [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, -1, -1, 0, 0, 1, 1, 1, 0, 1, 1, 0], [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 1, -1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1], [0, 1, 0, 1, 1, 0, 0, 1, -1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, -1, 1, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0], [1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, -1, 0, 0, 0], [1, 1, 1, 0, 0, 1, 1, 1, 0, 0, -1, 0, 0, 1], [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, -1, 0, 0, 0], [1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, -1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0], [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 1, 0, 1, 1, 1, 1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 1, 1, 1, 1, 1, 1, 0, 1, -1, 0, -1, -1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 1, 0, -1, -1, 0, 0, -1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, -1, 0, 1, 0, 0, 0], [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, -1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, -1, 1, 0, -1, 0, 0, 1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, -1, 0, -1, -1, 0, 0, 1, -1, 1, 1, 1, 1, 0], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, 0, 1, 1, 1, 1, 1, -1, 0, 0, 1, 0, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1], [1, 1, 1, 0, 0, 1, 1, 1, 0, 0, -1, 0, 0, 1], [-1, 0, -1, 0, 0, -1, -1, 1, 0, 1, 1, 1, 1, -1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [1, 1, 1, 1, 1, 1, 1, -1, 1, 0, -1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, -1, 1, 0, -1, 0, 0, 1], [-1, 0, -1, 0, 0, -1, -1, 1, 0, 1, 1, 1, 1, -1], [-1, 0, -1, 0, 0, -1, -1, 1, 0, 1, 1, 1, 1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [0, 1, 0, -1, -1, 0, 0, -1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, -1, 0, 1, 0, 0, 0], [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, -1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, -1, 1, 0, -1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, -1, 0, -1, -1, 0, 0, 1, -1, 1, 1, 1, 1, 0], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 1, 0, 1, 1, 1, 1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 1, 1, 1, 1, 1, 1, 0, 1, -1, 0, -1, -1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 1, 0, 1, 1, 1, 1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 1, 1, 1, 1, 1, 1, 0, 1, -1, 0, -1, -1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [0, 1, 0, -1, -1, 0, 0, 1, 1, 1, 0, 1, 1, 0], [0, 1, 0, 1, 1, 0, 0, 0, -1, 1, 0, 1, 1, 0], [0, -1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 0, 1, -1, 0, -1, -1, 1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [0, -1, 0, -1, -1, 0, 0, 1, -1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, -1, 0, -1, -1, 0, 0, 1, -1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 0, 1, -1, 0, -1, -1, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1, -1, 0, -1, -1, 1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1]\n        ]\n        self.assertEqual(expected, constraint_result)\n\n    def test_apply_template_to_log_not_succession(self):\n        templates = [\'not_succession\']\n        constraint_result = []\n        template = templates[0]\n        for candidate in self.candidates:\n            if len(candidate) == template_sizes[template]:\n                constraint_result += [apply_template_to_log(template, candidate, self.transformed_log)]\n        expected = [\n            [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, -1], [1, 0, 1, 0, 0, -1, 1, 0, 0, -1, 0, -1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], [1, 0, 1, 0, 0, -1, 1, 0, 0, 1, 0, 1, -1, -1], [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1], [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 1, 0, -1, -1, 0, 0, -1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, -1, 0, 1, 0, 0, 0], [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, -1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], [0, 1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, 1, 0, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, -1, 0, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [1, 0, 1, 0, 0, -1, 1, 1, 0, 0, 1, 0, 0, -1], [0, 1, 0, -1, -1, 0, 0, -1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, -1, 0, 1, 0, 0, 0], [0, -1, 0, 1, 1, 0, 0, 1, 1, 0, -1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [-1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, -1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, 1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, 1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, -1, -1], [0, 1, 0, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 1, 0, 1, 1, 0, 0, 0, -1, 1, 0, 1, 1, 0], [0, -1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, -1, 0], [1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1], [1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, 1, -1, 1, 1, -1, 1, -1, 1, 1], [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, -1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, -1, 1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1], [-1, 1, -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1], [1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1]\n        ]\n        self.assertEqual(expected, constraint_result)\n\n    def test_apply_template_to_log_responded_existence(self):\n        templates = [\'responded_existence\']\n        constraint_result = []\n        template = templates[0]\n        for candidate in self.candidates:\n            if len(candidate) == template_sizes[template]:\n                constraint_result += [apply_template_to_log(template, candidate, self.transformed_log)]\n        expected = [\n            [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, 1, 0, 0, -1], [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, -1, 0, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, 1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, 1, 0, 0, -1], [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, -1, 0, 0, 1], [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, -1, 0, 0, 1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, -1, 0, 1, 1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, 1, -1, 0, -1, -1, 0], [0, 1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, 1, 0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 1, 0, 1, 1, 0, 0, 0, 1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, 1, 0, 1, 1, 0, 0, 0, 1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, 1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, 1, 0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1]\n        ]\n        self.assertEqual(expected, constraint_result)\n\n    def test_apply_template_to_log_response(self):\n        templates = [\'response\']\n        constraint_result = []\n        template = templates[0]\n        for candidate in self.candidates:\n            if len(candidate) == template_sizes[template]:\n                constraint_result += [apply_template_to_log(template, candidate, self.transformed_log)]\n        expected = [\n            [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, 1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], [-1, 0, -1, 0, 0, 1, -1, 0, 0, -1, 0, -1, 1, 1], [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], [0, -1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, 1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, 1, -1, -1, 0, 0, -1, 0, 0, 1], [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, -1, 1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, 1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, 1, 0, 0, -1, 1, 0, 0, -1, 0, -1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, -1, 1, 1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1], [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, 1, 1], [0, -1, 0, 1, 1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, 1, -1, 0, -1, -1, 0], [0, 1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [0, -1, 0, 1, 1, 0, 0, 0, 1, -1, 0, -1, 1, 0], [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1], [1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], [1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1]\n        ]\n        self.assertEqual(expected, constraint_result)\n\n    def test_apply_template_to_log_succession(self):\n        templates = [\'succession\']\n        constraint_result = []\n        template = templates[0]\n        for candidate in self.candidates:\n            if len(candidate) == template_sizes[template]:\n                constraint_result += [apply_template_to_log(template, candidate, self.transformed_log)]\n        expected = [\n            [0, 0, 0, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0], [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, 0, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 0, 0, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 0, 0], [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, -1, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, 1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], [-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1], [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 1, 0, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0], [-1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, 0, -1, -1, -1, -1, -1, 1, 0, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, -1, 0, -1, 0, 0, -1], [-1, -1, -1, 0, 0, -1, -1, -1, 0, 0, 1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, 0, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1], [0, -1, 0, 1, 1, 0, 0, 1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, 1, 0, -1, 0, 0, 0], [0, 1, 0, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [-1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 1, 0, 0, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 1, 0, 1, 1, 0, 0, -1, 1, -1, -1, -1, -1, 0], [-1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], [1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, 1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1], [-1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, -1, -1, 0, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1], [1, 0, 1, 0, 0, -1, 1, 0, 0, -1, 0, -1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, 0, 1, 0, 0, 1, 1, -1, 0, -1, -1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, -1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, 0, -1, 1, 0, 1, 1, -1], [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1], [0, -1, 0, 1, 1, 0, 0, -1, -1, -1, 0, -1, -1, 0], [0, -1, 0, -1, -1, 0, 0, 0, 1, -1, 0, -1, -1, 0], [0, 1, 0, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, -1, -1, -1], [-1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1], [-1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1], [1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1], [1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], [1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1]\n        ]\n        self.assertEqual(expected, constraint_result)\n\n    def test_apply_template_to_log_precedence(self):\n        templates = [\'precedence\']\n        constraint_result = []\n        template = templates[0]\n        for candidate in self.candidates:\n            if len(candidate) == template_sizes[template]:\n                constraint_result += [apply_template_to_log(template, candidate, self.transformed_log)]\n        expected = [\n            [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, -1, 0, 0, 1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, 1, 1], [-1, 0, -1, 0, 0, 1, -1, 0, 0, 1, 0, 1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, 1, 0], [-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [-1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, 1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [0, 1, 0, 1, 1, 0, 0, 0, 1, -1, 0, -1, -1, 0], [-1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [0, 0, 0, -1, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, 0], [-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 1, 0, 0, 1, 0, 0, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [0, 1, 0, 1, 1, 0, 0, 0, 1, -1, 0, -1, -1, 0], [-1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, -1, -1, -1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, -1, 0, 0, 1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, 1, 1, 0, 0, -1, 0, 1, -1, -1], [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, 1, 0], [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1], [0, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [1, 0, 1, 0, 0, -1, 1, 0, 0, -1, 0, -1, 1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, -1, 0, 0, -1, 0, 0, 1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, -1, 1, 1], [0, -1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, 1, 0], [-1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1], [0, 0, 0, 1, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, -1, -1, 0, -1, 0, 0, 0], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, 0, -1, 0, 0, -1, -1, 0, 0, -1, 0, -1, -1, -1], [-1, -1, -1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, -1, 1, 0, 0, 1, 0, 1, -1, -1], [1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [0, 1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, -1, 1, 1, 0, 0, 1, 0, 0, -1], [0, -1, 0, -1, -1, 0, 0, 1, -1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, -1, -1], [1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, -1, -1], [0, 1, 0, -1, -1, 0, 0, 0, -1, 1, 0, 1, -1, 0]\n        ]\n        self.assertEqual(expected, constraint_result)\n\n'"
src/encoding/declare/tests/test_declare_templates.py,0,"b'""""""\nTesting functions used in deviance mining process and that all the templates methods work as intended\n""""""\nfrom collections import defaultdict\n\nfrom django.test import TestCase\nfrom src.encoding.declare.declare_templates import *\n\nconfig_2 = {\n    ""label"" : ""Label"",\n    ""deviant"" : str(1),\n    ""nondeviant"" : str(0),\n    ""type"" : ""string"",\n    ""shuffle"" : False\n}\n\n\ndef el_to_pos_events(event_list):\n    events = defaultdict(list)\n    for pos, event in enumerate(event_list):\n        # transition? not for now\n        events[event].append(pos)\n\n    return events\n\n\ndef el_to_pos_events_list(event_lists):\n    lst = []\n\n    for event_list in event_lists:\n        events = defaultdict(list)\n        for pos, event in enumerate(event_list):\n            # transition? not for now\n            events[event].append(pos)\n        lst.append(events)\n\n    return lst\n\n\ndef split_to_list(event_lists):\n    """"""\n    like unit split, but input has True, False as well\n    :param event_lists:\n    :return:\n    """"""\n    lists = []\n    for event_list, deviant in event_lists:\n        lists.append((event_list.split(""-""), deviant))\n\n    return lists\n\n\ndef unit_split(trace):\n    """"""\n    Takes trace in form of[""A-B-C"", ""A""], splits into list [[""A"",""B"",""C""], [""A""]]\n    :param trace:\n    :return:\n    """"""\n    lists = []\n    for event_list in trace:\n        lists.append(event_list.split(""-""))\n\n    return lists\n\n\nclass TestDeclareTemplates(TestCase):\n    def test_init(self):\n        """"""\n        2 traces, one with init first, second with not\n        Tests if init template works correctly\n        """"""\n        traces = [\n            ""A-B"", # dev\n            ""B-A"" # nondev\n        ]\n        event_lists = unit_split(traces)\n        pos0 = el_to_pos_events(event_lists[0])\n        pos1 = el_to_pos_events(event_lists[1])\n\n        res, _ = template_init(pos0, (""A"",))\n        res2, _ = template_init(pos1, (""A"",))\n\n        self.assertEqual(res, 1)\n        self.assertEqual(res2, -1)\n\n    def test_absence(self):\n        """"""\n        Tests absence template\n        :return:\n        """"""\n        traces = [\n            ""A-B"",\n            ""B"",\n            ""B-A""\n        ]\n\n        event_lists = unit_split(traces)\n\n        pos = el_to_pos_events_list(event_lists)\n\n        not_abs_1, _ = template_absence1(pos[0], (""A"", ))\n\n    def test_exactly(self):\n        """"""\n        Three traces:\n        no event, 1 event, 2 event, 3 event, 4 event.\n        :return:\n        """"""\n        traces = [\n            ""B"", # 0\n            ""A-B"", # 1\n            ""A-A-B"", # 2\n            ""A-A-A-B"", # 3\n        ]\n        event_lists = unit_split(traces)\n\n        pos = el_to_pos_events_list(event_lists)\n\n        zero, _ = template_exactly1(pos[0], (""A"",))\n        one, _ = template_exactly1(pos[1], (""A"",))\n        two, _ = template_exactly2(pos[2], (""A"",))\n        three, _ = template_exactly3(pos[3], (""A"",))\n        two_f, _ = template_exactly2(pos[3], (""A""))\n        three_f, _ = template_exactly3(pos[2], (""A""))\n\n        self.assertEqual(zero, -1)\n        self.assertEqual(one, 1)\n        self.assertEqual(two, 1)\n        self.assertEqual(three, 1)\n        self.assertEqual(two_f, -1)\n        self.assertEqual(three_f, -1)\n\n    def test_existence(self):\n        """"""\n        Three traces:\n        no event, 1 event, 2 event, 3 event, 4 event.\n        :return:\n        """"""\n        traces = [\n            ""B"", # 0\n            ""A-B"", # 1\n            ""A-A-B"", # 2\n            ""A-A-A-B"", # 3\n        ]\n        event_lists = unit_split(traces)\n\n        pos = el_to_pos_events_list(event_lists)\n\n        zero, _ = template_exist(pos[0], (""A"",))\n        one, _ = template_exist(pos[1], (""A"",))\n        two, _ = template_exist(pos[2], (""A"",))\n\n        self.assertEqual(zero, -1)\n        self.assertEqual(one, 1)\n        self.assertEqual(two, 2)\n\n    def test_choice(self):\n        """"""\n=       Only one of two events exist and not both.\n        :return:\n        """"""\n        traces = [\n            ""B-C-A"", # 0\n            ""A-C-D"", # 1\n            ""B-D-C"", # 2\n            ""D-C""\n        ]\n        event_lists = unit_split(traces)\n\n        pos = el_to_pos_events_list(event_lists)\n\n        zero, _ = template_choice(pos[0], (""A"",""B""))\n        one, _ = template_choice(pos[1], (""A"",""B""))\n        two, _ = template_choice(pos[2], (""A"",""B""))\n        vac, _ = template_choice(pos[3], (""A"",""B""))\n\n        self.assertEqual(zero, -1)\n        self.assertEqual(one, 1)\n        self.assertEqual(two, 1)\n        self.assertEqual(vac, -1)\n\n    def test_coexistence(self):\n        """"""\n        Only one of two events exist and not both.\n        :return:\n        """"""\n        traces = [\n            ""B-C-A"", # 0\n            ""A-C-D"", # 1\n            ""B-D-C"", # 2\n            ""D-C""\n        ]\n        event_lists = unit_split(traces)\n\n        pos = el_to_pos_events_list(event_lists)\n\n        zero, _ = template_coexistence(pos[0], (""A"",""B""))\n        one, _ = template_coexistence(pos[1], (""A"",""B""))\n        two, _ = template_coexistence(pos[2], (""A"",""B""))\n        vac, t = template_coexistence(pos[3], (""A"",""B""))\n\n        self.assertEqual(zero, 1)\n        self.assertEqual(one, -1)\n        self.assertEqual(two, -1)\n        self.assertEqual(vac, 0)\n        self.assertEqual(t, True) # With vacuity check..\n\n    def test_alternate_precedence(self):\n        """"""\n        If B, then it must be preceded by A, and before A (backwards), there cant be any more B\'s\n\n        :return:\n        """"""\n        """"""\n        Every B is preceded by A.\n        """"""\n        traces = [\n            ""A-B"",  # true\n            ""B"",  # false\n            ""A-B-A-B-A-A-A-B"",  # true\n            ""A-B-A-B-B-A-A"" #false\n        ]\n        event_lists = unit_split(traces)\n\n        pos = el_to_pos_events_list(event_lists)\n\n        zero, _ = template_alternate_precedence(pos[0], (""A"", ""B""))\n        one, _ = template_alternate_precedence(pos[1], (""A"", ""B""))\n        two, _ = template_alternate_precedence(pos[2], (""A"", ""B""))\n        vac, t = template_alternate_precedence(pos[3], (""A"", ""B""))\n        vac2, t = template_alternate_precedence(pos[0], (""B"", ""A""))\n\n        self.assertEqual(zero, 1)\n        self.assertEqual(one, -1)\n        self.assertEqual(two, 3)\n        self.assertEqual(vac, -1)\n        self.assertEqual(vac2, -1)\n\n    def test_alternate_response(self):\n        """"""\n        If A, then it must be followed by B, meanwhile there cant be any extra A\n\n        :return:\n        """"""\n        """"""\n        Every B is preceded by A.\n        """"""\n        traces = [\n            ""A-B"",  # true\n            ""B"",  # false\n            ""A-B-A-B-A-A-A-B"",  # false\n            ""A-B-A-B-B-A-B-B"" # true\n        ]\n        event_lists = unit_split(traces)\n\n        pos = el_to_pos_events_list(event_lists)\n\n        zero, _ = template_alternate_response(pos[0], (""A"", ""B""))\n        one, vact1 = template_alternate_response(pos[1], (""A"", ""B""))\n        two, _ = template_alternate_response(pos[2], (""A"", ""B""))\n        vac, _ = template_alternate_response(pos[3], (""A"", ""B""))\n        vac2, _ = template_alternate_response(pos[0], (""B"", ""A""))\n\n        self.assertEqual(zero, 1)\n        self.assertEqual(one, 0) # 1 and 0 by vacuity\n        self.assertEqual(vact1, True) # 1 and 0 by vacuity\n        self.assertEqual(two, -1) # too many A in row\n        self.assertEqual(vac, 3) # true, no 2 A in row\n        self.assertEqual(vac2, -1)  # no response\n\n    def test_alternate_succession(self):\n        """"""\n        If B, then it must be preceded by A, and before A (backwards), there cant be any more B\'s\n\n        :return:\n        """"""\n        """"""\n        Every B is preceded by A.\n        """"""\n        traces = [\n            ""A-B"",  # true\n            ""B"",  # false\n            ""A-B-A-B-A-A-A-B"",  # false\n            ""A-B-A-B-B-A-B-B-A-A"", # false,\n            ""A-B-C-A-B-D-D-D-A-B-D-A-C-B"" # true\n        ]\n        event_lists = unit_split(traces)\n\n        pos = el_to_pos_events_list(event_lists)\n\n        zero, _ = template_alternate_succession(pos[0], (""A"", ""B""))\n        one, vact1 = template_alternate_succession(pos[1], (""A"", ""B""))\n        two, _ = template_alternate_succession(pos[2], (""A"", ""B""))\n        vac, _ = template_alternate_succession(pos[3], (""A"", ""B""))\n        vac2, _ = template_alternate_succession(pos[4], (""A"", ""B""))\n        vac3, _ = template_alternate_succession(pos[4], (""B"", ""A""))\n\n        self.assertEqual(zero, 1) # true\n        self.assertEqual(one, -1) # false\n        self.assertEqual(two, -1) # too many A in row\n        self.assertEqual(vac, -1) # too many B in a row\n        self.assertEqual(vac2, 4)  # true, 4\n        self.assertEqual(vac3, -1)  # false\n\n    def test_chain_precedence(self):\n        """"""\n        Every B must be next of an A.\n        """"""\n        traces = [\n            ""A-B"",  # true\n            ""B"",  # false\n            ""A-B-A-B-A-A-A-B"",  # false\n            ""A-B-A-B-B-A-B-B-A-A"", # false,\n            ""A-B-C-A-B-D-D-D-A-B-D-A-C-B"", # false,\n            ""A-C-B"",\n        ]\n        event_lists = unit_split(traces)\n\n        pos = el_to_pos_events_list(event_lists)\n\n        zero, _ = template_chain_precedence(pos[0], (""A"", ""B""))\n        one, vact1 = template_chain_precedence(pos[1], (""A"", ""B""))\n        two, _ = template_chain_precedence(pos[2], (""A"", ""B""))\n        vac, _ = template_chain_precedence(pos[3], (""A"", ""B""))\n        vac2, _ = template_chain_precedence(pos[4], (""A"", ""B""))\n        vac3, _ = template_chain_precedence(pos[4], (""B"", ""A""))\n        vac4, _ = template_chain_precedence(pos[5], (""A"", ""B""))\n\n        self.assertEqual(zero, 1) # true\n        self.assertEqual(one, -1) # false\n        self.assertEqual(two, 3) #  true, 3 B\'s have A before it\n        self.assertEqual(vac, -1) # too many B in a row\n        self.assertEqual(vac2, -1)  # false, last B has C instead of A before it\n        self.assertEqual(vac3, -1)  # false\n        self.assertEqual(vac4, -1)  # false, C before B\n\n    def test_chain_response(self):\n        """"""\n        Every A must be next straight followed by B.\n        """"""\n        traces = [\n            ""A-B"",  # true\n            ""B"",  # true, false by vacuity\n            ""A-B-A-B-A-A-A-B"",  # false\n            ""A-B-A-B-B-A-B-B-A-A"", # false,\n            ""A-B-C-A-B-D-D-D-A-B-D-A-B"", # true,\n            ""A-C-B"", # false\n        ]\n        event_lists = unit_split(traces)\n\n        pos = el_to_pos_events_list(event_lists)\n\n        zero, _ = template_chain_response(pos[0], (""A"", ""B""))\n        one, vact1 = template_chain_response(pos[1], (""A"", ""B""))\n        vac, _ = template_chain_response(pos[3], (""A"", ""B""))\n        vac2, _ = template_chain_response(pos[4], (""A"", ""B""))\n        vac3, _ = template_chain_response(pos[4], (""B"", ""A""))\n        vac4, _ = template_chain_response(pos[5], (""A"", ""B""))\n\n        self.assertEqual(zero, 1) # true\n        self.assertEqual(one, 0) # true by vacuity\n        self.assertEqual(vact1, True) # true\n        self.assertEqual(vac, -1) # Last A\'s not followed by B\n        self.assertEqual(vac2, 4)  # true\n        self.assertEqual(vac3, -1)  # false\n        self.assertEqual(vac4, -1)  # false, A not straight followed by B\n\n    def test_chain_succession(self):\n        """"""\n        Every A must be next straight followed by B\n        Every B must be instantly preceded by A\n        """"""\n        traces = [\n            ""C-D"", # true by vacuity\n            ""A-B"",  # true\n            ""B"",  # false\n            ""A-B-A-B-A-B-C-D-C-A-B-A-B"",  # true\n            ""A-B-A-B-B-A-B-B-A-A"", # false,\n            ""A-B-C-A-B-D-D-D-A-B-D-A-B"", # true,\n            ""A-C-B"", # false\n        ]\n        event_lists = unit_split(traces)\n\n        pos = el_to_pos_events_list(event_lists)\n\n        zero, vact1 = template_chain_succession(pos[0], (""A"", ""B""))\n        one, _ = template_chain_succession(pos[1], (""A"", ""B""))\n        vac, _ = template_chain_succession(pos[2], (""A"", ""B""))\n        vac2, _ = template_chain_succession(pos[3], (""A"", ""B""))\n        vac3, _ = template_chain_succession(pos[4], (""A"", ""B""))\n        vac4, _ = template_chain_succession(pos[5], (""A"", ""B""))\n        vac5, _ = template_chain_succession(pos[6], (""A"", ""B""))\n\n        self.assertEqual(zero, 0) # true by vacuity\n        self.assertEqual(vact1, True) # true\n        self.assertEqual(one, 1) # true\n        self.assertEqual(vac, -1) # false, B alone\n        self.assertEqual(vac2, 5)  # true\n        self.assertEqual(vac3, -1)  # false\n        self.assertEqual(vac4, 4)  # true\n        self.assertEqual(vac5, -1) # false, A not straight followed by B\n\n    def test_not_chain_succession(self):\n        """"""\n        B must not be preceded by A and A must not be followed by B,\n        B-A is ok, A-B is not\n        :return:\n        """"""\n        traces = [\n            ""C-D"", # true by vacuity\n            ""A-B"",  # false\n            ""B"",  # true, true by vacuity?\n            ""A-B-A-B-A-B-C-D-C-A-B-A-B"",  # false\n            ""A-B-A-B-B-A-B-B-A-A"", # false,\n            ""B-A-C-B-A-D-D-D-B-A-D-B-A"", # true,\n            ""A-C-B"", # true\n        ]\n        event_lists = unit_split(traces)\n\n        pos = el_to_pos_events_list(event_lists)\n\n        zero, vact1 = template_not_chain_succession(pos[0], (""A"", ""B""))\n        one, _ = template_not_chain_succession(pos[1], (""A"", ""B""))\n        vac, _ = template_not_chain_succession(pos[2], (""A"", ""B""))\n        vac2, _ = template_not_chain_succession(pos[3], (""A"", ""B""))\n        vac3, _ = template_not_chain_succession(pos[4], (""A"", ""B""))\n        vac4, _ = template_not_chain_succession(pos[5], (""A"", ""B""))\n        vac5, _ = template_not_chain_succession(pos[6], (""A"", ""B""))\n\n        self.assertEqual(zero, 0) # true by vacuity\n        self.assertEqual(vact1, True) # true\n        self.assertEqual(one, -1) # false\n        self.assertEqual(vac, 0) # false, B alone, not sure on vacuity..\n        self.assertEqual(vac2, -1)  # false\n        self.assertEqual(vac3, -1)  # false\n        self.assertEqual(vac4, 1)  # true\n        self.assertEqual(vac5, 1) # true, A not straight followed by B\n\n    def test_not_coexistence(self):\n        """"""\n        A and B must not exist together in same trace\n        """"""\n        traces = [\n            ""C-D"",  # true by vacuity\n            ""A-B"",  # false\n            ""B"",  # true\n            ""A-C-A-C-A-G-C-C-C-F-G-A-G"",  # true\n            ""A-B-A-B-B-A-B-B-A-A"",  # false,\n            ""B-A-C-B-A-D-D-D-B-A-D-B-A"",  # false,\n            ""B-C"",  # true\n        ]\n        event_lists = unit_split(traces)\n\n        pos = el_to_pos_events_list(event_lists)\n\n        zero, vact1 = template_not_coexistence(pos[0], (""A"", ""B""))\n        one, _ = template_not_coexistence(pos[1], (""A"", ""B""))\n        vac, _ = template_not_coexistence(pos[2], (""A"", ""B""))\n        vac2, _ = template_not_coexistence(pos[3], (""A"", ""B""))\n        vac3, _ = template_not_coexistence(pos[4], (""A"", ""B""))\n        vac4, _ = template_not_coexistence(pos[5], (""A"", ""B""))\n        vac5, _ = template_not_coexistence(pos[6], (""A"", ""B""))\n\n        self.assertEqual(zero, 0)  # true by vacuity\n        self.assertEqual(vact1, True)  # true\n        self.assertEqual(one, -1)  # false\n        self.assertEqual(vac, 1)  # true\n        self.assertEqual(vac2, 1)  # true\n        self.assertEqual(vac3, -1)  # false\n        self.assertEqual(vac4, -1)  # false\n        self.assertEqual(vac5, 1)  # true, B, but not A\n\n    def test_not_succession(self):\n        """"""\n        A must not eventually be followed by B, B-C-A is ok, A-B-C is not\n        """"""\n        traces = [\n            ""C-D"",  # true by vacuity\n            ""A-B"",  # false\n            ""B"",  # true by vacuity, yes or no?\n            ""A-C-A-C-A-G-C-C-C-F-G-A-G"",  # true, no B at all, is it vac or not_\n            ""A-B-A-B-B-A-B-B-A-A"",  # false, a followed by b\n            ""B-A-C-B-A-D-D-D-B-A-D-B-A"",  # false\n            ""A-C-D-E-F-G-B"" # false\n            ]\n\n        event_lists = unit_split(traces)\n\n\n        pos = el_to_pos_events_list(event_lists)\n\n        zero, vact1 = template_not_succession(pos[0], (""A"", ""B""))\n        one,  _ = template_not_succession(pos[1], (""A"", ""B""))\n        vac, vact2 = template_not_succession(pos[2], (""A"", ""B""))\n        vac2, _ = template_not_succession(pos[3], (""A"", ""B""))\n        vac3, _ = template_not_succession(pos[4], (""A"", ""B""))\n        vac4, _ = template_not_succession(pos[5], (""A"", ""B""))\n        vac5, _ = template_not_succession(pos[6], (""A"", ""B""))\n\n        self.assertEqual(zero, 0)  # true by vacuity\n        self.assertEqual(vact1, True)  # not sure\n        self.assertEqual(one, -1)  # A followed by B, false\n        self.assertEqual(vact2, True)  # true not sure..\n        self.assertEqual(vac, 0)  # true\n        self.assertEqual(vac2, 1)  # true\n        self.assertEqual(vac3, -1)  # false\n        self.assertEqual(vac4, -1)  # false\n        self.assertEqual(vac5, -1)  # false, A eventually followed by B\n\n    def test_precedence(self):\n        """"""\n        B must be preceded by A\n        :return:\n        """"""\n        traces = [\n            ""C-D"",  # true by vacuity\n            ""A-B"",  # true\n            ""B"",  # false, no A before\n            ""A-C-A-C-A-G-C-C-C-F-G-A-G"",  # True by Vacuity\n            ""A-B-A-B-B-A-B-B-A-A"",  # true, exists B where it is preceded by A\n            ""B-A-C-B-A-D-D-D-B-A-D-B-A"",  # false, first B is not preceded\n            ""A-C-D-E-F-G-B""  # true\n        ]\n\n        event_lists = unit_split(traces)\n\n        pos = el_to_pos_events_list(event_lists)\n\n        zero, vact1 = template_precedence(pos[0], (""A"", ""B""))\n        one, _ = template_precedence(pos[1], (""A"", ""B""))\n        vac, _ = template_precedence(pos[2], (""A"", ""B""))\n        vac2, vact2 = template_precedence(pos[3], (""A"", ""B""))\n        vac3, _ = template_precedence(pos[4], (""A"", ""B""))\n        vac4, _ = template_precedence(pos[5], (""A"", ""B""))\n        vac5, _ = template_precedence(pos[6], (""A"", ""B""))\n\n        self.assertEqual(zero, 0)  # true, no B at all\n        self.assertTrue(vact1)\n        self.assertEqual(one, 1)  #\n        self.assertEqual(vac, -1)\n        self.assertEqual(vac2, 0)\n        self.assertTrue(vact2)\n        self.assertEqual(vac3, 5)\n        self.assertEqual(vac4, -1)\n        self.assertEqual(vac5, 1)\n\n    def test_response(self):\n        """"""\n        A must be followed by B\n        :return:\n        """"""\n        traces = [\n            ""C-D"",  # true by vacuity\n            ""A-B"",  # true\n            ""B"",  # true by vacuity\n            ""A-C-A-C-A-G-C-C-C-F-G-A-G"",  # false\n            ""A-B-A-B-B-A-B-B-A-A"",  # false, last A is not followed by B\n            ""B-A-C-B-A-D-D-D-B-A-D-B"",  # true, every A followed by B\n            ""A-C-D-E-F-G-B""  # true\n        ]\n\n        event_lists = unit_split(traces)\n\n        pos = el_to_pos_events_list(event_lists)\n\n        zero, vact1 = template_response(pos[0], (""A"", ""B""))\n        one, _ = template_response(pos[1], (""A"", ""B""))\n        two, vact2 = template_response(pos[2], (""A"", ""B""))\n        three, _ = template_response(pos[3], (""A"", ""B""))\n        four, _ = template_response(pos[4], (""A"", ""B""))\n        five, _ = template_response(pos[5], (""A"", ""B""))\n        six, _ = template_response(pos[6], (""A"", ""B""))\n\n        self.assertEqual(zero, 0)  # true by vacuity\n        self.assertTrue(vact1)\n        self.assertEqual(one, 1)  # A followed by\n        self.assertEqual(two, 0)  # true vacuity\n        self.assertTrue(vact2)\n        self.assertEqual(three, -1)  # false\n        self.assertEqual(four, -1) # fasle\n        self.assertEqual(five, 3)  # true\n        self.assertEqual(six, 1)  # true\n\n    def test_responded_existence(self):\n        """"""\n        If A exists, then B must exist. Other way around doesnt have to be ture\n        :return:\n        """"""\n        traces = [\n            ""C-D"",  # true by vacuity\n            ""A-B"",  # true\n            ""B"",  # true by vacuity\n            ""A-C-A-C-A-G-C-C-C-F-G-A-G"",  # false\n            ""A-B-A-B-B-A-B-B-A-A"",  # true\n            ""B-A-C-B-A-D-D-D-B-A-D-B"",  # true\n            ""A-C-D-E-F-G-B""  # true\n        ]\n\n        event_lists = unit_split(traces)\n\n        pos = el_to_pos_events_list(event_lists)\n\n        zero, vact1 = template_responded_existence(pos[0], (""A"", ""B""))\n        one, _ = template_responded_existence(pos[1], (""A"", ""B""))\n        two, vact2 = template_responded_existence(pos[2], (""A"", ""B""))\n        three, _ = template_responded_existence(pos[3], (""A"", ""B""))\n        four, _ = template_responded_existence(pos[4], (""A"", ""B""))\n        five, _ = template_responded_existence(pos[5], (""A"", ""B""))\n        six, _ = template_responded_existence(pos[6], (""A"", ""B""))\n\n        self.assertEqual(zero, 0)  # true by vacuity\n        self.assertTrue(vact1)\n        self.assertEqual(one, 1)  # A followed by\n        self.assertEqual(two, 0)  # true vacuity\n        self.assertTrue(vact2)\n        self.assertEqual(three, -1)  # false\n        self.assertEqual(four, 5) # true\n        self.assertEqual(five, 3)  # true\n        self.assertEqual(six, 1)  # true\n\n    def test_succession(self):\n        """"""\n        If A exists, it must be followed by B, if B exists it must be followed by A\n        :return:\n        """"""\n        traces = [\n            ""C-D"",  # true by vacuity\n            ""A-B"",  # true\n            ""B"",  # false\n            ""A-C-A-C-A-G-C-C-C-F-G-A-G"",  # false\n            ""A-B-A-B-B-A-B-B-A-A"",  # false\n            ""B-A-C-B-A-D-D-D-B-A-D-B"",  # false\n            ""A-C-D-E-F-G-B-A-B""  # true\n        ]\n\n        event_lists = unit_split(traces)\n\n        pos = el_to_pos_events_list(event_lists)\n\n        zero, vact1 = template_succession(pos[0], (""A"", ""B""))\n        one, _ = template_succession(pos[1], (""A"", ""B""))\n        two, vact2 = template_succession(pos[2], (""A"", ""B""))\n        three, _ = template_succession(pos[3], (""A"", ""B""))\n        four, _ = template_succession(pos[4], (""A"", ""B""))\n        five, _ = template_succession(pos[5], (""A"", ""B""))\n        six, _ = template_succession(pos[6], (""A"", ""B""))\n\n        self.assertEqual(zero, 0)  # true by vacuity\n        self.assertTrue(vact1)\n        self.assertEqual(one, 1)  # A followed by\n        self.assertEqual(two, -1)  # false\n        self.assertEqual(three, -1)  # false\n        self.assertEqual(four, -1) # false\n        self.assertEqual(five, -1)  # false\n        self.assertEqual(six, 2)  # true\n\n'"
src/jobs/management/commands/__init__.py,0,b''
src/jobs/management/commands/progetto_padova.py,0,"b""import lime\nimport lime.lime_tabular\nimport matplotlib as plt\nfrom django.core.management.base import BaseCommand\nfrom sklearn.externals import joblib\n\nfrom scripts.progetto_padova import progetto_padova\nfrom src.core.core import get_encoded_logs\nfrom src.jobs.models import Job\n\n\nclass Command(BaseCommand):\n    help = 'tries to deliver an explanation of a random prediction of the trained model'\n\n    def handle(self, *args, **kwargs):\n        progetto_padova()\n"""
src/jobs/management/commands/retry_failed.py,0,"b""import django_rq\nfrom django.core.management.base import BaseCommand\n\nfrom src.jobs import tasks\nfrom src.jobs.models import JobStatuses, Job\n\n\nclass Command(BaseCommand):\n    help = 'helps requeue properly jobs that have been remove from both default and failed queue in redis'\n\n    def handle(self, *args, **kwargs):\n        errored_jobs = Job.objects.filter(status=JobStatuses.ERROR.value)\n        for j in errored_jobs:\n            j.status = JobStatuses.CREATED.value\n            j.error = ''\n            j.save()\n        jobs_to_requeue = [j.id for j in errored_jobs ]\n        print('Requeue of', jobs_to_requeue)\n        [ django_rq.enqueue(tasks.prediction_task, j) for j in jobs_to_requeue ]\n        print('done')\n\n"""
src/jobs/management/commands/try_anchors.py,4,"b""from anchor import anchor_tabular\nfrom django.core.management.base import BaseCommand\nfrom sklearn.externals import joblib\n\nfrom src.core.core import get_encoded_logs\nfrom src.jobs.models import Job\n\nimport numpy as np\n\n\nclass Command(BaseCommand):\n    help = 'tries to deliver an explanation of a random prediction of the trained model'\n\n    def handle(self, *args, **kwargs):\n        # get model\n        TARGET_MODEL = 20\n        job = Job.objects.filter(pk=TARGET_MODEL)[0]\n        model = joblib.load(job.predictive_model.model_path)\n        model = model[0]\n\n        # load data\n        training_df, test_df = get_encoded_logs(job)\n\n        # get radom point in evaluation set\n        EXPLANATION_TARGET = 1\n\n        # get the actual explanation\n        job.encoding.features.remove('label')\n        explainer = anchor_tabular.AnchorTabularExplainer(\n            class_names=[True, False],\n            feature_names=job.encoding.features,\n            data=training_df.drop(['trace_id', 'label'], 1).T,\n            categorical_names={\n                job.encoding.features.index(item): list(range(max(training_df[item])))\n                for item in job.encoding.features\n            }\n        )\n        explainer.fit(\n            training_df.drop(['trace_id', 'label'], 1).as_matrix(),\n            [True, False],\n            test_df.drop(['trace_id', 'label'], 1).as_matrix(),\n            [True, False]\n        )\n\n        model_fn = lambda x: model.predict(x)\n\n        # show plot\n        idx = 0\n        np.random.seed(1)\n        print('Prediction: ', explainer.class_names[model_fn(test_df.drop(['trace_id', 'label'], 1).as_matrix()[idx].reshape(1, -1))[0]])\n        exp = explainer.explain_instance(test_df.drop(['trace_id', 'label'], 1).as_matrix()[idx], model_fn, threshold=0.95)\n        print('Anchor: %s' % (' AND '.join(exp.names())))\n        print('Precision: %.2f' % exp.precision())\n        print('Coverage: %.2f' % exp.coverage())\n\n        fit_anchor = np.where(np.all(test_df.drop(['trace_id', 'label'], 1)[:, exp.features()] == test_df.drop(['trace_id', 'label'], 1).as_matrix()[idx][exp.features()], axis=1))[0]\n        print('Anchor test coverage: %.2f' % (fit_anchor.shape[0] / float(test_df.drop(['trace_id', 'label'], 1).shape[0])))\n        # print('Anchor test precision: %.2f' % (\n        #     np.mean(predict_fn(test_df.drop(['trace_id', 'label'], 1)[fit_anchor]) == predict_fn(test_df.drop(['trace_id', 'label'], 1).as_matrix()[idx].reshape(1, -1))))\n        #     np.mean(predict_fn(test_df.drop(['trace_id', 'label'], 1)[fit_anchor]) == predict_fn(test_df.drop(['trace_id', 'label'], 1).as_matrix()[idx].reshape(1, -1))))\n        #       )\n\n        print('done')\n"""
src/jobs/management/commands/try_cffeedback.py,0,"b""import collections\n\nfrom django.core.management.base import BaseCommand\nfrom pymining import seqmining, itemmining\nfrom sklearn.externals import joblib\n\nfrom src.core.core import get_encoded_logs\nfrom src.explanation.lime_wrapper import lime_temporal_stability\nfrom src.explanation.models import Explanation, ExplanationTypes\nfrom src.explanation.temporal_stability import temporal_stability\nfrom src.jobs.models import Job\nfrom src.split.models import Split\nimport prettyjson\n\nclass Command(BaseCommand):\n    help = 'tries to deliver an explanation of a random prediction of the trained model'\n\n    def handle(self, *args, **kwargs):\n        TARGET_JOB = 71\n        SPLITID = 12\n        job_obj = Job.objects.filter(pk=TARGET_JOB)[0]\n        split_obj = Split.objects.filter(pk=SPLITID)[0]\n\n        training_df, test_df = get_encoded_logs(job_obj)\n\n        test_df1 = test_df.copy()\n        test_df2 = test_df.copy()\n        test_df3 = test_df.copy()\n\n        # todo: retrieve lime explanation\n\n        # RETRIEVE&SAVE TS\n        ts_exp_job, _ = Explanation.objects.get_or_create(type=ExplanationTypes.TEMPORAL_STABILITY.value, split=split_obj, predictive_model=job_obj.predictive_model, job=job_obj)\n        ts = temporal_stability(ts_exp_job, training_df, test_df1, explanation_target=None)\n\n        # RETRIEVE&SAVE LIMETS\n        limets_exp_job, _ = Explanation.objects.get_or_create(type=ExplanationTypes.LIME.value, split=split_obj, predictive_model=job_obj.predictive_model, job=job_obj)\n        lime_ts = lime_temporal_stability(limets_exp_job, training_df, test_df2, explanation_target=None)\n\n        # SAVE GOLD\n        gold = test_df3[['trace_id', 'label']]\n\n\n        # todo: retrieve confusion matrix\n\n        ts = {\n            asdf: {\n                uuu + '1' if uuu[-1:] == '_' else uuu: ts[asdf][uuu]\n                for uuu in ts[asdf]\n            }\n            for asdf in ts\n        }\n        lime_ts = {\n            asdf: {\n                uuu + '1' if uuu[-1:] == '_' else uuu: lime_ts[asdf][uuu]\n                for uuu in lime_ts[asdf]\n            }\n            for asdf in lime_ts\n        }\n\n        trace_ids = set(gold['trace_id'])\n        confusion_matrix = {\n            'tp': [\n                str(tid)\n                for tid in trace_ids\n                if str(tid) in ts and\n                   ts[str(tid)]['prefix_' + str(len(ts[str(tid)]))]['predicted'] == 'true' and\n                   ts[str(tid)]['prefix_' + str(len(ts[str(tid)]))]['predicted'] == (\n                       'true' if gold[gold['trace_id'] == tid]['label'].values[0] else 'false')\n            ],\n            'tn': [\n                str(tid)\n                for tid in trace_ids\n                if str(tid) in ts and\n                   ts[str(tid)]['prefix_' + str(len(ts[str(tid)]))]['predicted'] == 'false' and\n                   ts[str(tid)]['prefix_' + str(len(ts[str(tid)]))]['predicted'] == (\n                       'true' if gold[gold['trace_id'] == tid]['label'].values[0] else 'false')\n            ],\n            'fp': [\n                str(tid)\n                for tid in trace_ids\n                if str(tid) in ts and\n                   ts[str(tid)]['prefix_' + str(len(ts[str(tid)]))]['predicted'] == 'true' and\n                   ts[str(tid)]['prefix_' + str(len(ts[str(tid)]))]['predicted'] != (\n                       'true' if gold[gold['trace_id'] == tid]['label'].values[0] else 'false')\n            ],\n            'fn': [\n                str(tid)\n                for tid in trace_ids\n                if str(tid) in ts and\n                   ts[str(tid)]['prefix_' + str(len(ts[str(tid)]))]['predicted'] == 'false' and\n                   ts[str(tid)]['prefix_' + str(len(ts[str(tid)]))]['predicted'] != (\n                       'true' if gold[gold['trace_id'] == tid]['label'].values[0] else 'false')\n            ]\n        }\n\n        limefeats = {\n            k: {\n                key: [\n                    element\n                    for element in sorted(\n                        [(pref, lime_ts[key]['prefix_' + str(job_obj.encoding.prefix_length)][pref]['value'],\n                          lime_ts[key]['prefix_' + str(job_obj.encoding.prefix_length)][pref]['importance']) for pref in lime_ts[key]['prefix_' + str(job_obj.encoding.prefix_length)]],\n                        key=lambda x: (x[2], x[1]),\n                        reverse=True if k in ['tp', 'fp'] else False\n                        # reverse order of lime values if the prediction is negative\n                    )\n                ]\n                for key in confusion_matrix[k]\n                if 'prefix_' + str(job_obj.encoding.prefix_length) in lime_ts[key]\n            }\n            for k in confusion_matrix\n        }\n\n        freq_seqs = {\n            'tp': {},\n            'tn': {},\n            'fp': {},\n            'fn': {}\n        }\n\n        # todo: retrive patterns\n        CONFUSION_MATRIX = ['tp', 'tn', 'fp', 'fn']\n\n        LIMEFEATS = {\n            'abs_lime': False,\n            'tp': 0.2,\n            'tn': 0.2,\n            'fp': 0.2,\n            'fn': 0.2,\n            'top': 10,\n            'outputfile': None\n        }\n        FREQ_SEQS = {\n            'tp': 10,\n            'tn': 10,\n            'fp': 10,\n            'fn': 10,\n            'top': 15,\n            'outputfile': None,\n            'RECOMPUTEDoutputfile': None,\n        }\n        ABSENCE = {\n            'tp': 0.1,\n            'tn': 0.1,\n            'fp': 0.1,\n            'fn': 0.1,\n            'ABSENCEoutputfile': None\n        }\n\n        MINING_METHOD = 'item_mining'\n\n        print(\n            'Initial CONFUSION MATRIX:\\n',\n            *['\\tlimefeats ' + KEY + ':' + str(len(limefeats[KEY])) for KEY in CONFUSION_MATRIX],\n            '\\n',\n            *['\\tfreq_seqs ' + KEY + ':' + str(len(freq_seqs[KEY])) for KEY in CONFUSION_MATRIX]\n        )\n\n        available_values = {}\n        for KEY in CONFUSION_MATRIX:\n            available_values[KEY] = {}\n            for tid in limefeats[KEY]:\n                for event in limefeats[KEY][tid]:\n                    if event[0].split('_')[0] not in available_values[KEY]:\n                        available_values[KEY][event[0].split('_')[0]] = set()\n                    available_values[KEY][event[0].split('_')[0]].add(event[1])\n\n        filtered_limefeats = {\n            KEY: {\n                tid: [\n                    event\n                    for event in limefeats[KEY][tid]\n                    if (\n                           (not LIMEFEATS['abs_lime']) and\n                           ((KEY in ['tp', 'fp'] and event[2] >= LIMEFEATS[KEY]) or\n                            (KEY in ['tn', 'fn'] and event[2] <= -LIMEFEATS[KEY]))\n                       ) or (\n                           LIMEFEATS['abs_lime'] and abs(event[2]) >= LIMEFEATS[KEY]\n                       )\n                ]\n                for tid in limefeats[KEY]\n            }\n            for KEY in CONFUSION_MATRIX\n        }\n\n        prefiltered_limefeats = {\n            KEY: {\n                tid: [\n                    event\n                    for event in limefeats[KEY][tid]\n                    if (\n                           (not LIMEFEATS['abs_lime']) and\n                           ((KEY in ['tp', 'fp'] and event[2] >= LIMEFEATS[KEY]) or\n                            (KEY in ['tn', 'fn'] and event[2] <= -LIMEFEATS[KEY]))\n                       ) or (\n                           LIMEFEATS['abs_lime'] and abs(event[2]) >= LIMEFEATS[KEY]\n                       )\n                ]\n                for tid in limefeats[KEY]\n            }\n            for KEY in CONFUSION_MATRIX\n        }\n\n        filtered_limefeats_mine = {\n            KEY: {\n                tid:\n                    prefiltered_limefeats[KEY][tid][0:LIMEFEATS['top']]\n                for tid in prefiltered_limefeats[KEY]\n            }\n            for KEY in CONFUSION_MATRIX\n        }\n\n        for KEY in CONFUSION_MATRIX:\n            for k in list(filtered_limefeats[KEY]):\n                if len(filtered_limefeats[KEY][k]) == 0:\n                    del filtered_limefeats[KEY][k]\n\n        def tassellate_numbers(element):\n            element = str(element)\n            return str(element).split('.')[0][0] + '0' \\\n                if \\\n                '.' in str(element) \\\n                and \\\n                len(str(element)) <= 5 \\\n                else \\\n                str(element).split('.')[0][0:4] \\\n                    if \\\n                    '.' in str(element) \\\n                    and \\\n                    len(str(element)) >= 10 \\\n                    else \\\n                    element\n\n        def retrieve_right_len(element, available_values):\n            if '_' in element:\n                return len(available_values[element.split('_')[0]])\n            else:\n                retval = []\n                for attribute in available_values:\n                    if any([str(element) == str(tassellate_numbers(value)) for value in available_values[attribute]]):\n                        retval += [len(available_values[attribute])]\n                return max(retval)\n\n        def weight_freq_seqs(KEY, available_values, element, limefeats):\n            print(element[0])\n            print(\n                'frequency:', element[1], ' * ',\n                'len w/out absences: ', len([el for el in element[0] if 'absence' not in el]), ' * ',\n                'sum of enumerator of possible values: ',\n                sum([retrieve_right_len(el, available_values[KEY]) for el in element[0] if 'absence' not in el]), ' / ',\n                'amount of examples in the field of confusion matrix: ', len(limefeats[KEY]), ' = ', (\n                                                                                                         element[1] *\n                                                                                                         len([el for el\n                                                                                                              in\n                                                                                                              element[0]\n                                                                                                              if\n                                                                                                              'absence' not in el]) *\n                                                                                                         sum([\n                                                                                                                 retrieve_right_len(\n                                                                                                                     el,\n                                                                                                                     available_values[\n                                                                                                                         KEY])\n                                                                                                                 for el\n                                                                                                                 in\n                                                                                                                 element[\n                                                                                                                     0]\n                                                                                                                 if\n                                                                                                                 'absence' not in el])\n                                                                                                     ) / len(\n                    limefeats[KEY]))\n            return (\n                       element[1]  # *\n                       # len([el for el in element[0] if 'absence' not in el]) *\n                       # sum([retrieve_right_len(el, available_values[KEY]) for el in element[0] if 'absence' not in el])\n                   ) / len(limefeats[KEY])\n\n        filtered_freq_seqs_old = {\n            KEY: sorted([\n                element\n                for element in freq_seqs[KEY]\n                if weight_freq_seqs(KEY, available_values, element, limefeats) >= FREQ_SEQS[KEY]\n            ], key=lambda x: x[1], reverse=True)\n            for KEY in CONFUSION_MATRIX\n        }\n\n        prefiltered_freq_seqs = {\n            KEY: sorted([\n                element\n                for element in freq_seqs[KEY]\n                if weight_freq_seqs(KEY, available_values, element, limefeats) >= FREQ_SEQS[KEY]\n            ], key=lambda x: x[1], reverse=True)\n            for KEY in CONFUSION_MATRIX\n        }\n\n        #todo: is this the actual topK?\n        filtered_freq_seqs = {\n            KEY:\n                prefiltered_freq_seqs[KEY][0:FREQ_SEQS['top']]\n            for KEY in CONFUSION_MATRIX\n        }\n\n        print(\n            'CONFUSION MATRIX after filtering:\\n',\n            *['\\tlimefeats ' + KEY + ':' + str(len(filtered_limefeats[KEY])) for KEY in CONFUSION_MATRIX],\n            '\\n',\n            *['\\tfreq_seqs ' + KEY + ':' + str(len(filtered_freq_seqs[KEY])) for KEY in CONFUSION_MATRIX]\n        )\n\n        def printout_freq_seqs(output_obj, output_file, maxlinelength=5000):\n            with open(output_file, 'w+') as f:\n                f.write(prettyjson(output_obj, maxlinelength=maxlinelength))\n\n        if (LIMEFEATS['outputfile'] is not None or FREQ_SEQS['outputfile'] is not None):\n            print('Start saving results..')\n            if (LIMEFEATS['outputfile'] is not None):\n                printout_freq_seqs(filtered_limefeats, LIMEFEATS['outputfile'], maxlinelength=5000)\n            if (FREQ_SEQS['outputfile'] is not None):\n                printout_freq_seqs(filtered_freq_seqs, FREQ_SEQS['outputfile'], maxlinelength=200)\n            print('Results saved.')\n        else:\n            print('FILTERED_LIMEFEATS:\\n', filtered_limefeats)\n            print('FILTERED_FREQ_SEQS:\\n', filtered_freq_seqs)\n\n        print('Computing absence...')\n\n        attributes = {}\n        for KEY in CONFUSION_MATRIX:\n            for tid in limefeats[KEY]:\n                for event in limefeats[KEY][tid]:\n                    attribute_name = event[0]\n                    if attribute_name not in attributes:\n                        attributes[attribute_name] = set()\n                    attributes[attribute_name].add(event[1])\n\n        attributes_occurrences = {\n            'tp': collections.Counter(),\n            'fp': collections.Counter(),\n            'tn': collections.Counter(),\n            'fn': collections.Counter()\n        }\n\n        for KEY in CONFUSION_MATRIX:\n            found_stuff = []\n            for tid in limefeats[KEY]:\n                for event in limefeats[KEY][tid]:\n                    found_stuff += [tassellate_numbers(event[1])]\n\n            attributes_occurrences[KEY].update(found_stuff)\n\n        characterised_attributes_occurrences = {}\n        for KEY in CONFUSION_MATRIX:\n            characterised_attributes_occurrences[KEY] = {}\n            for attribute in attributes:\n                if attribute not in characterised_attributes_occurrences[KEY]:\n                    characterised_attributes_occurrences[KEY][attribute] = dict()\n                for attr in attributes[attribute]:\n                    characterised_attributes_occurrences[KEY][attribute][tassellate_numbers(attr)] = 0\n        for KEY in CONFUSION_MATRIX:\n            for occ in attributes_occurrences[KEY]:\n                for attr in characterised_attributes_occurrences[KEY]:\n                    if occ in characterised_attributes_occurrences[KEY][attr]:\n                        characterised_attributes_occurrences[KEY][attr][occ] = attributes_occurrences[KEY][occ]\n            for attr in characterised_attributes_occurrences[KEY]:\n                characterised_attributes_occurrences[KEY][attr]['Total'] = sum([\n                    characterised_attributes_occurrences[KEY][attr][element]\n                    for element in characterised_attributes_occurrences[KEY][attr]\n                ])\n        print('Absence computed.')\n        print(\n            'The absence AFTER filtering is:\\n',\n            characterised_attributes_occurrences\n        )\n\n        print('RE-computing the sequence pattern result after applying the thresholds...')\n\n        static_attr = [\n            #    'Age',\n            #    'ClaimValue',\n            #    'CType',\n            #    'ClType',\n            #    'PClaims',\n        ]\n        limefeats_static_dinamic = {}\n        for KEY in CONFUSION_MATRIX:\n            limefeats_static_dinamic[KEY] = {}\n            for tid in filtered_limefeats[KEY]:\n                limefeats_static_dinamic[KEY][tid] = {\n                    'static': [],\n                    'dynamic': [\n                        att\n                        for att in filtered_limefeats[KEY][tid]\n                        if not any([att[0].startswith(static_att) for static_att in static_attr])\n                    ]\n                }\n                current_static_attributes = [\n                    att\n                    for att in filtered_limefeats[KEY][tid]\n                    if any([att[0].startswith(static_att) for static_att in static_attr])\n                ]\n                for s_attr in static_attr:\n                    curr_attributes = [\n                        att\n                        for att in current_static_attributes\n                        if att[0].startswith(s_attr)\n                    ]\n                    if len(curr_attributes) > 0:\n                        if KEY in ['tp', 'fp']:\n                            limefeats_static_dinamic[KEY][tid]['static'] += [max(curr_attributes, key=lambda x: x[2])]\n                        elif KEY in ['tn', 'fn']:\n                            limefeats_static_dinamic[KEY][tid]['static'] += [max(curr_attributes, key=lambda x: x[2])]\n                        else:\n                            print('Something bad happened')\n\n        dynamic_data = {\n            KEY: {\n                tid: [\n                    # (element[0].split('_')[0] + '_' +  element[1])\n                    (element[0] + '_' + element[1])\n                    for element in sorted(\n                        [k for k in limefeats_static_dinamic[KEY][tid]['dynamic']],\n                        # key=lambda x: (x[0].split('_')[1], x[0].split('_')[0])\n                        key=lambda x: x[0]\n                    )\n                ]\n                for tid in limefeats_static_dinamic[KEY]\n                if len(limefeats_static_dinamic[KEY][tid]['dynamic']) > 0\n            }\n            for KEY in CONFUSION_MATRIX\n        }\n\n        static_data = {\n            KEY: {\n                tid: [\n                    (element[0].split('_')[0] + '_' + tassellate_numbers(element[1]))\n                    # (element[0] + '_' + tassellate_numbers(element[1]))\n                    for element in sorted(\n                        [k for k in limefeats_static_dinamic[KEY][tid]['static']],\n                        key=lambda x: (x[0].split('_')[1], x[0].split('_')[0])\n                    )\n                ]\n                for tid in limefeats_static_dinamic[KEY]\n                if len(limefeats_static_dinamic[KEY][tid]['static']) > 0\n            }\n            for KEY in CONFUSION_MATRIX\n        }\n\n        data = {}\n        for KEY in CONFUSION_MATRIX:\n            data[KEY] = {}\n            for tid in limefeats[KEY]:\n                if tid in static_data[KEY] and tid in dynamic_data[KEY]:\n                    data[KEY][tid] = static_data[KEY][tid] + dynamic_data[KEY][tid]\n                elif tid in static_data[KEY]:\n                    data[KEY][tid] = static_data[KEY][tid]\n                elif tid in dynamic_data[KEY]:\n                    data[KEY][tid] = dynamic_data[KEY][tid]\n\n        if (MINING_METHOD == 'seq_mining'):\n            freq_seqs_after_filter = {\n                'tp': sorted(seqmining.freq_seq_enum([data['tp'][tid] for tid in data['tp']], 2)),\n                'tn': sorted(seqmining.freq_seq_enum([data['tn'][tid] for tid in data['tn']], 2)),\n                'fp': sorted(seqmining.freq_seq_enum([data['fp'][tid] for tid in data['fp']], 2)),\n                'fn': sorted(seqmining.freq_seq_enum([data['fn'][tid] for tid in data['fn']], 2)),\n            }\n        if (MINING_METHOD == 'item_mining'):\n            freq_seqs_after_filter = {\n                'tp': itemmining.relim(itemmining.get_relim_input([data['tp'][tid] for tid in data['tp']]), min_support=2),\n                'tn': itemmining.relim(itemmining.get_relim_input([data['tn'][tid] for tid in data['tn']]), min_support=2),\n                'fp': itemmining.relim(itemmining.get_relim_input([data['fp'][tid] for tid in data['fp']]), min_support=2),\n                'fn': itemmining.relim(itemmining.get_relim_input([data['fn'][tid] for tid in data['fn']]), min_support=2),\n            }\n\n            freq_seqs_after_filter = {\n                KEY: [\n                    (tuple(element), freq_seqs_after_filter[KEY][element])\n                    for element in freq_seqs_after_filter[KEY]]\n                for KEY in CONFUSION_MATRIX\n            }\n\n        filtered_freq_seqs_after_filter_old = {\n            KEY: sorted([\n                [element[0], weight_freq_seqs(KEY, available_values, element, limefeats)]\n                for element in freq_seqs_after_filter[KEY]\n                if weight_freq_seqs(KEY, available_values, element, limefeats) >= FREQ_SEQS[KEY]\n            ], key=lambda x: x[1], reverse=True)\n            for KEY in CONFUSION_MATRIX\n        }\n\n        # todo: filter topK\n        filtered_freq_seqs_after_filter = {\n            KEY:\n                filtered_freq_seqs_after_filter_old[KEY][0:FREQ_SEQS['top']]\n            for KEY in CONFUSION_MATRIX\n        }\n\n        print('Sequence pattern recomputed successfully.')\n\n        if (FREQ_SEQS['outputfile'] is not None):\n            print('Start saving results..')\n            printout_freq_seqs(filtered_freq_seqs_after_filter, FREQ_SEQS['RECOMPUTEDoutputfile'], maxlinelength=200)\n            print('Results saved.')\n        else:\n            print('RECOMPUTED_FREQ_SEQS:\\n', filtered_freq_seqs_after_filter)\n\n        print('Done, cheers!')\n        return confusion_matrix, data, freq_seqs_after_filter, filtered_freq_seqs_after_filter\n"""
src/jobs/management/commands/try_fairml.py,0,"b'import matplotlib\nfrom django.core.management.base import BaseCommand\n\n# temporary work around down to virtualenv\n# matplotlib issue.\nfrom sklearn.tree import DecisionTreeClassifier\n\nfrom src.core.core import get_encoded_logs\n\nmatplotlib.use(\'Agg\')\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\n\n# import specific projection format.\nfrom fairml import audit_model\nfrom fairml import plot_dependencies\nfrom src.jobs.models import Job\nfrom sklearn.externals import joblib\nfrom sklearn.ensemble import RandomForestClassifier\n\nclass Command(BaseCommand):\n    help = \'tries to deliver an explanation of a random prediction of the trained model\'\n\n    def handle(self, *args, **kwargs):\n        plt.style.use(\'ggplot\')\n        plt.figure(figsize=(6, 6))\n        TARGET_MODEL = 59\n        job = Job.objects.filter(pk=TARGET_MODEL)[0]\n\n        training_df, test_df = get_encoded_logs(job)\n\n        X_train = training_df.drop([\'trace_id\', \'label\'], 1)\n        RF = DecisionTreeClassifier()\n\n        Y_train = training_df[\'label\'].values\n        RF.fit(X_train, Y_train)\n\n        importancies, _ = audit_model(RF.predict, X_train)\n        importancies\n        print(importancies)\n\n        # generate feature dependence plot\n        fig = plot_dependencies(\n            importancies.median(),\n            reverse_values=False,\n            title=""FairML feature dependence plot""\n        )\n\n        file_name = ""fairml_plot_train_1_3_decision_tree.png""\n        plt.savefig(file_name, transparent=False, bbox_inches=\'tight\', dpi=550)\n'"
src/jobs/management/commands/try_ice.py,0,"b""from django.core.management.base import BaseCommand\nfrom pdpbox.utils import _get_grids\nfrom sklearn.externals import joblib\nfrom pdpbox import pdp, get_dataset, info_plots\nimport matplotlib.pyplot as plt\nimport numpy as numpy\nfrom src.core.core import get_encoded_logs\nfrom src.encoding.common import retrieve_proper_encoder\nfrom src.encoding.models import ValueEncodings\nfrom src.jobs.models import Job\n\n\nclass Command(BaseCommand):\n    help = 'tries to deliver an explanation of a random prediction of the trained model'\n\n    def handle(self, *args, **kwargs):\n        # get model\n        TARGET_MODEL = 59\n        job = Job.objects.filter(pk=TARGET_MODEL)[0]\n        model = joblib.load(job.predictive_model.model_path)[0]\n        # load data\n        training_df, test_df = get_encoded_logs(job)\n        training_df['label'] = training_df['label'].astype(bool).astype(int)\n        columns = list(training_df.columns.values)\n        features = list(training_df.drop(\n            ['trace_id', 'label'],\n            1).columns.values)\n        feature = 'Age_1'\n        feature_grids, percentile_info = _get_grids(\n            feature_values=training_df[feature].values, num_grid_points=10, grid_type=None,\n            percentile_range='percentile', grid_range=None)\n        custom_grids = []\n        indexs = []\n        for x in range(int(feature_grids.min()), int(feature_grids.max() - 1)):\n            custom_grids.append(x);\n        print(features)\n        fig, axes, summary_df = info_plots.target_plot(\n            df=training_df,\n            feature=feature,\n            feature_name='feature value',\n            cust_grid_points=custom_grids,\n            target='label', show_percentile=False\n        )\n        fig.savefig('ice_plot_train_1_3_CType.png')\n\n        lists = list(training_df[feature].values)\n        for x in range(int(feature_grids.min()), int(feature_grids.max() - 1)):\n            indexs.append(lists.index(x))\n        encoder = retrieve_proper_encoder(job)\n        encoder.decode(training_df, job.encoding)\n        values = training_df[feature].values\n        training_df\n        lst = []\n        print(summary_df)\n        if job.encoding.value_encoding != ValueEncodings.BOOLEAN.value:\n            for x in range(len(indexs) - 1):\n                lst.append({'value': values[indexs[x]],\n                            'label': summary_df['label'][x],\n                            'count': summary_df['count'][x],\n                            })\n        else:\n            for x in range(summary_df.shape[0]):\n                lst.append({'value': summary_df['display_column'][x],\n                            'label': summary_df['label'][x],\n                            'count': summary_df['count'][x],\n                            })\n        print(lst)\n\n"""
src/jobs/management/commands/try_lime.py,0,"b""import lime\nimport lime.lime_tabular\nimport matplotlib as plt\nfrom django.core.management.base import BaseCommand\nfrom sklearn.externals import joblib\n\nfrom src.core.core import get_encoded_logs\nfrom src.encoding.common import retrieve_proper_encoder\nfrom src.jobs.models import Job\n\n\nclass Command(BaseCommand):\n    help = 'tries to deliver an explanation of a random prediction of the trained model'\n\n    def handle(self, *args, **kwargs):\n\n        #get model\n        TARGET_MODEL=5\n        job = Job.objects.filter(pk=TARGET_MODEL)[0]\n        model = joblib.load(job.predictive_model.model_path)\n\n        #load data\n        training_df, test_df = get_encoded_logs(job)\n\n        #get radom point in evaluation set\n        EXPLANATION_TARGET = 3\n        #get the actual explanation\n        explainer = lime.lime_tabular.LimeTabularExplainer(\n            training_df.drop(['trace_id', 'label'], 1).as_matrix(),\n            feature_names=list(training_df.drop(['trace_id', 'label'], 1).columns.values),\n            categorical_features=[i for i in range(len(list(training_df.drop(['trace_id', 'label'], 1).columns.values)))],\n            verbose=True,\n            mode='classification',\n        )\n        exp = explainer.explain_instance(\n            test_df.drop(['trace_id', 'label'], 1).iloc[EXPLANATION_TARGET], #TODO probably the opposite would be way less computationally intesive\n            model[0].predict_proba,\n            num_features=5\n        )\n        exp.as_list()\n\n        #show plot\n        #exp.show_in_notebook(show_table=True)\n        # exp.as_pyplot_figure().show()\n        exp.save_to_file('oi.html')\n\n        print('done')\n"""
src/jobs/management/commands/try_retrain.py,0,"b""import random\n\nfrom django.core.management.base import BaseCommand\nfrom pandas import Series\n\nfrom src.cache.cache import put_labelled_logs\nfrom src.core.core import get_encoded_logs\n\nfrom src.jobs.models import Job\nfrom src.jobs.tasks import prediction_task\nfrom src.runtime.tasks import create_prediction_job\nfrom src.utils.django_orm import duplicate_orm_row\n\n\nclass Command(BaseCommand):\n    help = 'tries to deliver an explanation of a random prediction of the trained model'\n\n    def handle(self, *args, **kwargs):\n        TARGET_JOB = 439\n        initial_job_obj = Job.objects.filter(pk=TARGET_JOB)[0]\n\n        # todo: return performances\n        print('Initial Job:', initial_job_obj.evaluation.classificationmetrics)  # TODO future bug\n\n        training_df_old, test_df_old = get_encoded_logs(initial_job_obj)\n        training_df = training_df_old.copy()\n        test_df = test_df_old.copy()\n\n        # todo: what should I randomise?\n        TARGETS = [\n            [('prefix_1', 2)], # <- simple pattern\n            [('prefix_2', 3)], # <- simple pattern\n            [('prefix_3', 2),\n            ('prefix_4', 3),] # <- complex pattern\n        ]\n        for target in TARGETS:\n            if len(target) == 1:\n                target = target[0]\n                for df in [training_df, test_df]:\n                    m_col = df[target[0]]\n                    del df[target[0]]\n                    target_values1 = list(set(m_col.values))\n                    df[target[0]] = m_col.apply(\n                        lambda x:\n                            x if (x != target[1])\n                            else random.choice(target_values1)\n                    )\n            elif len(target) > 1:\n                for df in [training_df, test_df]:\n                    m_col = df[[column for column, _ in target]]\n                    possible_values = {}\n                    for column, _ in target:\n                        possible_values[column] = list(set(df[column]))\n                        del df[column]\n                    df[[column for column, _ in target]] = m_col.apply(\n                        lambda x:\n                            x if any([x[column] != value for column, value in target])\n                            else Series({\n                                column: random.choice(possible_values[column])\n                                for column, value in target\n                            }),\n                        axis=1)\n            else:\n                raise Exception('target list with unexpected value')\n\n        assert not training_df.equals(training_df_old)\n        assert not test_df.equals(test_df_old)\n\n        # todo: save new dataset in memory and create split to use it\n        initial_split_obj = initial_job_obj.split\n        new_split = duplicate_orm_row(initial_split_obj)\n        train_log = duplicate_orm_row(new_split.train_log)\n        test_log = duplicate_orm_row(new_split.test_log)\n\n        # TODO future bug creates shadows\n        train_log.name = 'RETRAIN' + train_log.name\n        train_log.path = 'cache/log_cache/' + train_log.name\n        train_log.properties = {}\n        test_log.name = 'RETRAIN' + test_log.name\n        test_log.path = 'cache/log_cache/' + test_log.name\n        test_log.properties = {}\n\n        new_split.train_log = train_log\n        new_split.test_log = test_log\n        new_split.additional_columns = None\n        new_split.save()\n\n        prediction_job = create_prediction_job(initial_job_obj, initial_job_obj.encoding.prefix_length)\n        prediction_job.split = new_split\n        prediction_job.split.save()\n        prediction_job.save()\n\n        put_labelled_logs(prediction_job, training_df, test_df)\n\n        # todo: build model\n        prediction_task(prediction_job.id, do_publish_result=False)\n        prediction_job.refresh_from_db()\n\n        # todo: return performances\n        print('Retrain Job:', prediction_job.evaluation.classificationmetrics)\n\n\n        print('Done, cheers!')"""
src/jobs/management/commands/try_rulefit.py,0,"b'import numpy as np\nimport pandas as pd\nfrom rulefit import RuleFit\n\nimport sklearn\n\nfrom django.core.management.base import BaseCommand\nfrom sklearn.externals import joblib\n\nfrom src.core.core import get_encoded_logs\nfrom src.jobs.models import Job\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.ensemble import GradientBoostingRegressor\n\n\nclass Command(BaseCommand):\n    help = \'tries to deliver an explanation of a random prediction of the trained model\'\n\n    def handle(self, *args, **kwargs):\n        # get model\n        TARGET_MODEL = 5\n        job = Job.objects.filter(pk=TARGET_MODEL)[0]\n        model = joblib.load(job.predictive_model.model_path)\n        model = model[0]\n        training_df, test_df = get_encoded_logs(job)\n        feature_names = list(training_df.drop([\'trace_id\', \'label\'], 1).columns.values)\n\n        X_train = training_df.drop([\'trace_id\',\'label\'], 1)\n        Y_train = training_df.drop([\'trace_id\', \'prefix_1\',\'prefix_3\', \'prefix_4\',\'label\'], 1)\n\n        rf = RuleFit()\n        columns = list(X_train.columns)\n\n        X = X_train.as_matrix()\n\n        rf.fit(X, Y_train.values.ravel(), feature_names=columns)\n        rules = rf.get_rules()\n        # rules = rules[rules.coef != 0].sort_values(""support"", ascending=False)\n        rules = rules[(rules.coef > 0.) & (rules.type != \'linear\')]\n        rules[\'effect\'] = rules[\'coef\'] * rules[\'support\']\n        pd.set_option(\'display.max_colwidth\', -1)\n        rules.nlargest(10, \'effect\')\n        # print(rules)\n        rules\n'"
src/jobs/management/commands/try_shap.py,1,"b'import shap\nimport sklearn\nimport xgboost\n\nfrom django.core.management.base import BaseCommand\nfrom sklearn.externals import joblib\n\nfrom src.core.core import get_encoded_logs\nfrom src.encoding.common import retrieve_proper_encoder\nfrom src.jobs.models import Job\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport xgboost\n\n\nclass Command(BaseCommand):\n    help = \'tries to deliver an explanation of a random prediction of the trained model\'\n\n    def handle(self, *args, **kwargs):\n\n        TARGET_MODEL = 68\n        job = Job.objects.filter(pk=TARGET_MODEL)[0]\n        model = joblib.load(job.predictive_model.model_path)\n        model = model[0]\n        training_df, test_df = get_encoded_logs(job)\n\n        EXPLANATION_TARGET = 2_3300\n        FEATURE_TARGET = 1\n        shap.initjs()\n\n        explainer = shap.TreeExplainer(model)\n        training_df = training_df.drop([\'trace_id\',\'label\'], 1)\n\n        shap_values = explainer.shap_values(training_df)\n\n        encoder = retrieve_proper_encoder(job)\n        encoder.decode(training_df, job.encoding)\n\n        shap.force_plot(explainer.expected_value, shap_values[EXPLANATION_TARGET, :],training_df.iloc[EXPLANATION_TARGET, :],\n                                       show=False, matplotlib=True).savefig(\'shap_plot_train_1_3.png\')\n\n        # encoder.encode(training_df, job.encoding)\n        # plt.savefig(\'dependence_plot.png\')\n        # a = shap.force_plot(explainer.expected_value[1], shap_values[0], training_df)\n        # shap.save_html(\'shap_plot_train_1_3.html\', a)\n        # shap.summary_plot(shap_values, training_df.iloc[111], plot_type=""bar"")\n        # plt.savefig(\'summary_plot.png\')\n        # show plot\n        # shap.force_plot(explainer.expected_value, shap_values[0], training_df)\n        # shap.embedding_plot(FEATURE_TARGET, shap_values=shap_values[FEATURE_TARGET])\n        # plt.savefig(\'embedding_plot.png\')\n\n\n        # X_test = training_df.drop([\'trace_id\', \'label\'], 1)\n        #\n        # X_output = X_test.copy()\n        #\n        # X_output.loc[:,\'predict\'] = np.round(model.predict(X_output),2)\n        #\n        # S = X_output.iloc[1]\n        # S\n'"
src/jobs/management/commands/try_skaterr.py,1,"b'from django.core.management.base import BaseCommand\nfrom skater.core.visualizer import plot_tree, tree_to_text\nfrom skater.core.visualizer.tree_visualizer import _generate_graph\nfrom sklearn.externals import joblib\n\nfrom src.core.core import get_encoded_logs\nfrom src.jobs.models import Job\nimport warnings\nimport os\n\nwarnings.filterwarnings(\'ignore\')\nimport matplotlib.pyplot as plt\n\nplt.style.use(\'ggplot\')\nimport numpy as np\nimport pandas as pd\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\nfrom skater.core.explanations import Interpretation\nfrom skater.model import InMemoryModel\nfrom skater.core.global_interpretation.tree_surrogate import TreeSurrogate\nfrom sklearn import preprocessing, exceptions\nfrom dtreeviz.trees import *\nfrom sklearn import tree\n\n\nclass Command(BaseCommand):\n    help = \'tries to deliver an explanation of a random prediction of the trained model\'\n\n    def dot_to_json(file_in):\n        import networkx\n        from networkx.readwrite import json_graph\n        import pydot\n        graph_netx = networkx.drawing.nx_pydot.read_dot(""ss.raw"")\n        graph_json = json_graph.node_link_data(graph_netx)\n        return json_graph.node_link_data(graph_netx)\n\n    def handle(self, *args, **kwargs):\n        # get model\n        TARGET_MODEL = 71\n        job = Job.objects.filter(pk=TARGET_MODEL)[0]\n        model = joblib.load(job.predictive_model.model_path)[0]\n        # load data\n        training_df, test_df = get_encoded_logs(job)\n\n        features = list(training_df.drop([\'trace_id\', \'label\'], 1).columns.values)\n        interpreter = Interpretation(training_df, feature_names=features)\n        X_train = training_df.drop([\'trace_id\', \'label\'], 1)\n        Y_train = training_df[\'label\'].values\n\n        model_inst = InMemoryModel(model.predict, examples=X_train, model_type=\'classifier\', unique_values=[1, 2],\n                                   feature_names=features, target_names=[\'label\'])\n        surrogate_explainer = interpreter.tree_surrogate(model_inst, seed=5)\n\n        surrogate_explainer.fit(X_train, Y_train, use_oracle=True, prune=\'post\', scorer_type=\'default\')\n        surrogate_explainer.class_names = features\n\n        viz = dtreeviz(surrogate_explainer.estimator_,\n                       X_train,\n                       Y_train,\n                       target_name=\'label\',\n                       feature_names=features,\n                       orientation=""TD"",\n                       class_names=list(surrogate_explainer.class_names),\n                       fancy=True,\n                       X=None,\n                       label_fontsize=12,\n                       ticks_fontsize=8,\n                       fontname=""Arial"")\n        viz.save(""skater_plot_train_2_2.svg"")\n\n        # graph_inst = plot_tree(surrogate_explainer._TreeSurrogate__model, \'classifier\', feature_names=features,\n        #                        color_list=[\'coral\', \'lightsteelblue\', \'darkkhaki\'],\n        #                        class_names=surrogate_explainer.class_names, enable_node_id=True, seed=0)\n        # ss = surrogate_explainer.decisions_as_txt(scope=\'local\',\n        #                                           X=test_df.drop([\'trace_id\', \'label\'], 1).iloc[12])\n        # graph = _generate_graph(surrogate_explainer._TreeSurrogate__model, \'classifier\', enable_node_id=True,\n        #                         coverage=True)\n        #\n        # graph.write_raw(""sss.raw"")\n\n        # graph_inst.write_raw(""ss.raw"")\n\n    def viz_breast_cancer(orientation=""TD"",\n                          max_depth=3,\n                          random_state=666,\n                          fancy=True,\n                          pickX=False,\n                          label_fontsize=12,\n                          ticks_fontsize=8,\n                          fontname=""Arial""):\n        clf = tree.DecisionTreeClassifier(\n            max_depth=max_depth, random_state=random_state)\n        cancer = load_breast_cancer()\n\n        clf.fit(cancer.data, cancer.target)\n\n        X = None\n        if pickX:\n            X = cancer.data[np.random.randint(0, len(cancer)), :]\n        clf\n        viz = dtreeviz(clf,\n                       cancer.data,\n                       cancer.target,\n                       target_name=\'cancer\',\n                       feature_names=cancer.feature_names,\n                       orientation=orientation,\n                       class_names=list(cancer.target_names),\n                       fancy=fancy,\n                       X=X,\n                       label_fontsize=label_fontsize,\n                       ticks_fontsize=ticks_fontsize,\n                       fontname=fontname)\n        viz.save(""viz.svg"")\n        return viz\n'"
src/predictive_model/classification/migrations/__init__.py,0,b''
src/predictive_model/classification/tests/__init__.py,0,b''
src/predictive_model/classification/tests/test_classification.py,0,"b'""""""\nclassification tests\n""""""\n\nimport itertools\nimport unittest\n\nfrom django.test import TestCase\n\nfrom src.clustering.models import ClusteringMethods\nfrom src.core.core import calculate\nfrom src.encoding.models import ValueEncodings\nfrom src.jobs.tasks import prediction_task\nfrom src.labelling.models import LabelTypes, ThresholdTypes\nfrom src.predictive_model.classification.models import ClassificationMethods\nfrom src.utils.tests_utils import create_test_job, create_test_encoding, create_test_labelling, \\\n    create_test_predictive_model, create_test_clustering\n\n\nclass TestClassification(TestCase):\n    @unittest.skip(\'needs refactoring\')\n    def test_no_exceptions(self):\n        filtered_labels = [enum.value for enum in LabelTypes]\n\n        filtered_classification_methods = [enum.value for enum in ClassificationMethods]\n\n        filtered_encoding_methods = [enum.value for enum in ValueEncodings]\n\n        filtered_padding = [True, False]\n\n        choices = [filtered_encoding_methods, filtered_padding, filtered_classification_methods, filtered_labels]\n\n        job_combinations = list(itertools.product(*choices))\n\n        for (encoding, padding, method, label) in job_combinations:\n            print(encoding, padding, method, label)\n\n            if method == \'nn\' and (padding == False or label == LabelTypes.ATTRIBUTE_STRING.value):\n                pass\n            job = create_test_job(\n                predictive_model=create_test_predictive_model(prediction_method=method),\n                encoding=create_test_encoding(value_encoding=encoding, padding=padding),\n                labelling=create_test_labelling(label_type=label)\n            )\n            # with HidePrints():\n            calculate(job)\n\n    def test_prediction_task(self):\n        job = create_test_job()\n        prediction_task(job.id)\n        job.refresh_from_db()\n        self.assertEqual(\'completed\', job.status)\n\n    def test_prediction_task_save_model(self):\n        job = create_test_job(create_models=True)\n        prediction_task(job.id)\n        job.refresh_from_db()\n        self.assertEqual(\'completed\', job.status)\n        self.assertIsNotNone(job.predictive_model.model_path)\n\n    def test_prediction_task_save_model_clustering(self):\n        job = create_test_job(create_models=True,\n                              clustering=create_test_clustering(clustering_type=ClusteringMethods.KMEANS.value))\n        prediction_task(job.id)\n        job.refresh_from_db()\n        self.assertEqual(\'completed\', job.status)\n        self.assertIsNotNone(job.predictive_model.model_path)\n        self.assertIsNotNone(job.clustering.model_path)\n\n    @staticmethod\n    def results():\n        return {\'f1score\': 0.66666666666666663, \'acc\': 0.5, \'auc\': 0.16666666666666666, \'false_negative\': 0,\n                \'false_positive\': 1, \'true_positive\': 1, \'true_negative\': 0, \'precision\': 1.0, \'recall\': 0.5}\n\n    @staticmethod\n    def results2():\n        return {\'f1score\': 0.0, \'acc\': 0.0, \'true_positive\': 0, \'true_negative\': 0, \'false_negative\': 2,\n                \'false_positive\': 0, \'precision\': 0.0, \'recall\': 0.0, \'auc\': 0.0}\n\n    @staticmethod\n    def results3():\n        return {\'f1score\': 0.3333333333333333, \'acc\': 0.5, \'true_positive\': 0, \'true_negative\': 1, \'false_negative\': 1,\n                \'false_positive\': 0, \'precision\': 0.25, \'recall\': 0.5, \'auc\': 0.5}\n\n    def test_class_knn(self):\n        job = create_test_job(\n            predictive_model=create_test_predictive_model(prediction_method=ClassificationMethods.KNN.value),\n            labelling=create_test_labelling(label_type=LabelTypes.ATTRIBUTE_STRING.value,\n                                            attribute_name=\'concept:name\'),\n            clustering=create_test_clustering(clustering_type=ClusteringMethods.NO_CLUSTER.value)\n        )\n        result, _ = calculate(job)\n        del result[\'elapsed_time\']\n        self.assertDictEqual(result, {\'f1score\': 0.0, \'acc\': 0.0, \'precision\': 0.0, \'recall\': 0.0, \'true_positive\': 0, \'true_negative\': 0, \'false_negative\': 2, \'false_positive\': 0, \'auc\': 0.0})\n\n    def test_class_randomForest(self):\n        job = create_test_job(\n            predictive_model=create_test_predictive_model(prediction_method=ClassificationMethods.RANDOM_FOREST.value),\n            labelling=create_test_labelling(label_type=LabelTypes.ATTRIBUTE_STRING.value,\n                                            attribute_name=\'concept:name\'),\n            clustering=create_test_clustering(clustering_type=ClusteringMethods.NO_CLUSTER.value)\n        )\n        result, _ = calculate(job)\n        del result[\'elapsed_time\']\n        self.assertDictEqual(result, self.results2())\n\n    def test_class_decisionTree(self):\n        job = create_test_job(\n            predictive_model=create_test_predictive_model(prediction_method=ClassificationMethods.DECISION_TREE.value),\n            labelling=create_test_labelling(label_type=LabelTypes.ATTRIBUTE_STRING.value,\n                                            attribute_name=\'concept:name\'),\n            clustering=create_test_clustering(clustering_type=ClusteringMethods.NO_CLUSTER.value)\n        )\n        result, _ = calculate(job)\n        del result[\'elapsed_time\']\n        self.assertDictEqual(result, {\'f1score\': 0.0, \'acc\': 0.0, \'precision\': 0.0, \'recall\': 0.0, \'true_positive\': 0, \'true_negative\': 0, \'false_negative\': 2, \'false_positive\': 0, \'auc\': 0.0})\n\n    def test_class_xgboost(self):\n        job = create_test_job(\n            predictive_model=create_test_predictive_model(prediction_method=ClassificationMethods.XGBOOST.value),\n            labelling=create_test_labelling(label_type=LabelTypes.ATTRIBUTE_STRING.value,\n                                            attribute_name=\'concept:name\'),\n            clustering=create_test_clustering(clustering_type=ClusteringMethods.NO_CLUSTER.value)\n        )\n        result, _ = calculate(job)\n        del result[\'elapsed_time\']\n        self.assertDictEqual(result, {\'f1score\': 0.0, \'acc\': 0.0, \'precision\': 0.0, \'recall\': 0.0, \'true_positive\': 0, \'true_negative\': 0, \'false_negative\': 2, \'false_positive\': 0, \'auc\': 0.0})\n\n    def test_class_nb(self):\n        job = create_test_job(\n            predictive_model=create_test_predictive_model(prediction_method=ClassificationMethods.MULTINOMIAL_NAIVE_BAYES.value),\n            labelling=create_test_labelling(label_type=LabelTypes.ATTRIBUTE_STRING.value,\n                                            attribute_name=\'concept:name\'),\n            clustering=create_test_clustering(clustering_type=ClusteringMethods.NO_CLUSTER.value)\n        )\n        result, _ = calculate(job)\n        del result[\'elapsed_time\']\n        self.assertDictEqual(result, {\'f1score\': 0.0, \'acc\': 0.0, \'precision\': 0.0, \'recall\': 0.0, \'true_positive\': 0, \'true_negative\': 0, \'false_negative\': 2, \'false_positive\': 0, \'auc\': 0.0})\n\n    def test_class_hoeff(self):\n        job = create_test_job(\n            predictive_model=create_test_predictive_model(prediction_method=ClassificationMethods.HOEFFDING_TREE.value),\n            labelling=create_test_labelling(label_type=LabelTypes.ATTRIBUTE_STRING.value,\n                                            attribute_name=\'concept:name\'),\n            clustering=create_test_clustering(clustering_type=ClusteringMethods.NO_CLUSTER.value)\n        )\n        result, _ = calculate(job)\n        del result[\'elapsed_time\']\n        self.assertDictEqual(result, {\'f1score\': 0.0, \'acc\': 0.0, \'precision\': 0.0, \'recall\': 0.0, \'true_positive\': 0, \'true_negative\': 0, \'false_negative\': 2, \'false_positive\': 0, \'auc\': 0.0})\n\n    def test_class_ada(self):\n        job = create_test_job(\n            predictive_model=create_test_predictive_model(prediction_method=ClassificationMethods.ADAPTIVE_TREE.value),\n            labelling=create_test_labelling(label_type=LabelTypes.ATTRIBUTE_STRING.value,\n                                            attribute_name=\'concept:name\'),\n            clustering=create_test_clustering(clustering_type=ClusteringMethods.NO_CLUSTER.value)\n        )\n        result, _ = calculate(job)\n        del result[\'elapsed_time\']\n        self.assertDictEqual(result, {\'f1score\': 0.0, \'acc\': 0.0, \'precision\': 0.0, \'recall\': 0.0, \'true_positive\': 0, \'true_negative\': 0, \'false_negative\': 2, \'false_positive\': 0, \'auc\': 0.0})\n\n    def test_class_sgd(self):\n        job = create_test_job(\n            predictive_model=create_test_predictive_model(prediction_method=ClassificationMethods.SGDCLASSIFIER.value),\n            labelling=create_test_labelling(label_type=LabelTypes.ATTRIBUTE_STRING.value,\n                                            attribute_name=\'concept:name\'),\n            clustering=create_test_clustering(clustering_type=ClusteringMethods.NO_CLUSTER.value)\n        )\n        result, _ = calculate(job)\n        del result[\'elapsed_time\']\n        self.assertDictEqual(result, {\'f1score\': 0.0, \'acc\': 0.0, \'precision\': 0.0, \'recall\': 0.0, \'true_positive\': 0, \'true_negative\': 0, \'false_negative\': 2, \'false_positive\': 0, \'auc\': 0.0})\n\n    def test_class_perc(self):\n        job = create_test_job(\n            predictive_model=create_test_predictive_model(prediction_method=ClassificationMethods.PERCEPTRON.value),\n            labelling=create_test_labelling(label_type=LabelTypes.ATTRIBUTE_STRING.value,\n                                            attribute_name=\'concept:name\'),\n            clustering=create_test_clustering(clustering_type=ClusteringMethods.NO_CLUSTER.value)\n        )\n        result, _ = calculate(job)\n        del result[\'elapsed_time\']\n        self.assertDictEqual(result, {\'f1score\': 0.0, \'acc\': 0.0, \'precision\': 0.0, \'recall\': 0.0, \'true_positive\': 0, \'true_negative\': 0, \'false_negative\': 2, \'false_positive\': 0, \'auc\': 0.0})\n\n    def test_next_activity_DecisionTree(self):\n        job = create_test_job(\n            predictive_model=create_test_predictive_model(prediction_method=ClassificationMethods.DECISION_TREE.value),\n            labelling=create_test_labelling(label_type=LabelTypes.NEXT_ACTIVITY.value),\n            clustering=create_test_clustering(clustering_type=ClusteringMethods.NO_CLUSTER.value)\n        )\n        result, _ = calculate(job)\n        del result[\'elapsed_time\']\n        self.assertDictEqual(result, self.results3())\n\n    def test_class_nn(self):\n        job = create_test_job(\n            predictive_model=create_test_predictive_model(prediction_method=ClassificationMethods.NN.value),\n            labelling=create_test_labelling(label_type=LabelTypes.ATTRIBUTE_STRING.value,\n                                            attribute_name=\'concept:name\'),\n            clustering=create_test_clustering(clustering_type=ClusteringMethods.NO_CLUSTER.value)\n        )\n        result, _ = calculate(job)\n        del result[\'elapsed_time\']\n        self.assertIn(\'f1score\', result)\n        self.assertIn(\'acc\', result)\n        self.assertIn(\'precision\', result)\n        self.assertIn(\'recall\', result)\n        self.assertIn(\'true_positive\', result)\n        self.assertIn(\'true_negative\', result)\n        self.assertIn(\'false_negative\', result)\n        self.assertIn(\'false_positive\', result)\n        self.assertIn(\'auc\', result)\n\n    @unittest.skip(\'needs refactoring\')\n    def test_class_nn_binary(self):\n        job = create_test_job(\n            predictive_model=create_test_predictive_model(prediction_method=ClassificationMethods.NN.value),\n            labelling=create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value,\n                                            threshold_type=ThresholdTypes.THRESHOLD_MEAN.value),\n            clustering=create_test_clustering(clustering_type=ClusteringMethods.NO_CLUSTER.value)\n        )\n        result, _ = calculate(job)\n        del result[\'elapsed_time\']\n        self.assertDictEqual(result, {\'f1score\': 0.0, \'acc\': 0.0, \'precision\': 0.0, \'recall\': 0.0, \'true_positive\': 0,\n                                      \'true_negative\': 0, \'false_negative\': 2, \'false_positive\': 0, \'auc\': 0.0})\n\n    def test_update_nb(self):\n        job = create_test_job(\n            predictive_model=create_test_predictive_model(prediction_method=ClassificationMethods.HOEFFDING_TREE.value),\n            labelling=create_test_labelling(label_type=LabelTypes.ATTRIBUTE_STRING.value,\n                                            attribute_name=\'concept:name\'),\n            clustering=create_test_clustering(clustering_type=ClusteringMethods.NO_CLUSTER.value),\n            create_models=True\n        )\n        result1, _ = calculate(job)\n        job = create_test_job(\n            predictive_model=create_test_predictive_model(prediction_method=ClassificationMethods.HOEFFDING_TREE.value),\n            encoding=job.encoding,\n            labelling=create_test_labelling(label_type=LabelTypes.ATTRIBUTE_STRING.value,\n                                            attribute_name=\'concept:name\'),\n            clustering=job.clustering,\n            incremental_train=job\n        )\n        result2, _ = calculate(job)\n        del result1[\'elapsed_time\']\n        del result2[\'elapsed_time\']\n        self.assertDictEqual(result1, {\'f1score\': 0.0, \'acc\': 0.0, \'precision\': 0.0, \'recall\': 0.0, \'true_positive\': 0,\n                                       \'true_negative\': 0, \'false_negative\': 2, \'false_positive\': 0, \'auc\': 0.0})\n        self.assertDictEqual(result2, {\'f1score\': 0.0, \'acc\': 0.0, \'precision\': 0.0, \'recall\': 0.0, \'true_positive\': 0,\n                                       \'true_negative\': 0, \'false_negative\': 2, \'false_positive\': 0, \'auc\': 0.0})\n\n'"
src/predictive_model/classification/tests/test_nn_models.py,0,"b'""""""\nNeural Networks tests\n""""""\n\nfrom django.test import TestCase\nfrom numpy import ndarray\nfrom pandas import DataFrame\n\nfrom src.core.tests.test_utils import HidePrints\nfrom src.encoding.models import ValueEncodings\nfrom src.encoding.simple_index import simple_index\nfrom src.labelling.models import LabelTypes, ThresholdTypes\nfrom src.predictive_model.classification.custom_classification_models import NNClassifier\nfrom src.utils.event_attributes import unique_events, get_additional_columns\nfrom src.utils.file_service import get_log\nfrom src.utils.tests_utils import create_test_encoding, create_test_labelling, create_test_log, \\\n    general_example_train_filename, \\\n    general_example_train_filepath, general_example_test_filename, general_example_test_filepath\n\n\nclass TestNNClassifier(TestCase):\n    def setUp(self):\n        self.train_log = get_log(create_test_log(log_name=general_example_train_filename,\n                                                 log_path=general_example_train_filepath))\n        self.train_event_names = unique_events(self.train_log)\n        self.train_add_col = get_additional_columns(self.train_log)\n\n        self.test_log = get_log(create_test_log(log_name=general_example_test_filename,\n                                                log_path=general_example_test_filepath))\n        self.test_event_names = unique_events(self.test_log)\n        self.test_add_col = get_additional_columns(self.test_log)\n\n    @staticmethod\n    def _get_nn_default_config(encoding=ValueEncodings.SIMPLE_INDEX.value, binary: bool = False):\n        config = dict()\n        config[\'n_hidden_layers\'] = 2\n        config[\'n_hidden_units\'] = 10\n        config[\'activation\'] = \'relu\'\n        config[\'n_epochs\'] = 1\n        config[\'encoding\'] = encoding\n        config[\'dropout_rate\'] = 0.1\n        config[\'is_binary_classifier\'] = binary\n        config[\'incremental_train\'] = {\'base_model\': None}\n        return config\n\n    @staticmethod\n    def _drop_columns_and_split(df: DataFrame) -> (DataFrame, ndarray):\n        return df.drop([\'trace_id\', \'label\'], 1), df[\'label\']\n\n    def test_nn_classifier_simple_index_binary_no_exceptions(self):\n        encoding = create_test_encoding(value_encoding=ValueEncodings.SIMPLE_INDEX.value, prefix_length=2, padding=True)\n        labelling = create_test_labelling(label_type=LabelTypes.DURATION.value,\n                                          threshold_type=ThresholdTypes.THRESHOLD_MEAN.value)\n\n        train_df = simple_index(self.train_log, labelling, encoding)\n        test_df = simple_index(self.test_log, labelling, encoding)\n\n        train_df, targets_df = self._drop_columns_and_split(train_df)\n        targets_df = targets_df.values.ravel()\n\n        test_df, _ = self._drop_columns_and_split(test_df)\n\n        config = self._get_nn_default_config(binary=False)\n        nn_classifier = NNClassifier(**config)\n\n        # with HidePrints():\n        nn_classifier.fit(train_df, targets_df)\n        nn_classifier.predict(test_df)\n        nn_classifier.predict_proba(test_df)\n\n    def test_nn_classifier_simple_index_multiclass_no_exceptions(self):\n        encoding = create_test_encoding(value_encoding=ValueEncodings.SIMPLE_INDEX.value, prefix_length=2, padding=True)\n        labelling = create_test_labelling(label_type=LabelTypes.NEXT_ACTIVITY.value)\n\n        train_df = simple_index(self.train_log, labelling, encoding)\n        test_df = simple_index(self.test_log, labelling, encoding)\n\n        train_df, targets_df = self._drop_columns_and_split(train_df)\n        targets_df = targets_df.values.ravel()\n\n        test_df, _ = self._drop_columns_and_split(test_df)\n\n        config = self._get_nn_default_config(binary=False)\n        nn_classifier = NNClassifier(**config)\n\n        with HidePrints():\n            nn_classifier.fit(train_df, targets_df)\n            nn_classifier.predict(test_df)\n            nn_classifier.predict_proba(test_df)\n'"
src/predictive_model/regression/migrations/__init__.py,0,b''
src/predictive_model/regression/tests/__init__.py,0,b''
src/predictive_model/regression/tests/test_nn_models.py,0,"b'""""""\nNeural Networks tests\n""""""\n\nfrom django.test import TestCase\nfrom numpy import ndarray\nfrom pandas import DataFrame\n\nfrom src.encoding.complex_last_payload import complex\nfrom src.encoding.models import ValueEncodings\nfrom src.encoding.simple_index import simple_index\nfrom src.labelling.models import LabelTypes\nfrom src.predictive_model.regression.custom_regression_models import NNRegressor\nfrom src.utils.event_attributes import unique_events, get_additional_columns\nfrom src.utils.file_service import get_log\nfrom src.utils.tests_utils import create_test_encoding, create_test_labelling, create_test_log, \\\n    general_example_train_filename, \\\n    general_example_train_filepath, general_example_test_filename, general_example_test_filepath\n\n\nclass TestNNRegressor(TestCase):\n    def setUp(self):\n        self.train_log = get_log(create_test_log(log_name=general_example_train_filename,\n                                                 log_path=general_example_train_filepath))\n        self.train_event_names = unique_events(self.train_log)\n        self.train_add_col = get_additional_columns(self.train_log)\n\n        self.test_log = get_log(create_test_log(log_name=general_example_test_filename,\n                                                log_path=general_example_test_filepath))\n        self.test_event_names = unique_events(self.test_log)\n        self.test_add_col = get_additional_columns(self.test_log)\n\n    @staticmethod\n    def _get_nn_default_config(encoding=ValueEncodings.SIMPLE_INDEX.value):\n        config = dict()\n        config[\'n_hidden_layers\'] = 2\n        config[\'n_hidden_units\'] = 10\n        config[\'activation\'] = \'relu\'\n        config[\'n_epochs\'] = 1\n        config[\'encoding\'] = encoding\n        config[\'dropout_rate\'] = 0.1\n        config[\'incremental_train\'] = {\'base_model\': None}\n        return config\n\n    @staticmethod\n    def _drop_columns_and_split(df: DataFrame) -> (DataFrame, ndarray):\n        return df.drop([\'trace_id\', \'label\'], 1), df[\'label\']\n\n    def test_nn_regressor_simple_index_no_exceptions(self):\n        encoding = create_test_encoding(value_encoding=ValueEncodings.SIMPLE_INDEX.value, prefix_length=2, padding=True)\n        labelling = create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value)\n\n        train_df = simple_index(self.train_log, labelling, encoding)\n        test_df = simple_index(self.test_log, labelling, encoding)\n\n        train_df, targets_df = self._drop_columns_and_split(train_df)\n        targets_df = targets_df.values.ravel()\n\n        test_df, _ = self._drop_columns_and_split(test_df)\n\n        config = self._get_nn_default_config()\n        nn_regressor = NNRegressor(**config)\n\n        # with HidePrints():\n        nn_regressor.fit(train_df, targets_df)\n        nn_regressor.predict(test_df)\n\n    def test_nn_regressor_complex_no_exceptions(self):\n        encoding = create_test_encoding(value_encoding=ValueEncodings.COMPLEX.value, prefix_length=2, padding=True)\n        labelling = create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value)\n\n        train_df = complex(self.train_log, labelling, encoding, self.train_add_col)\n        test_df = complex(self.test_log, labelling, encoding, self.test_add_col)\n\n        train_df, targets_df = self._drop_columns_and_split(train_df)\n        targets_df = targets_df.values.ravel()\n\n        test_df, _ = self._drop_columns_and_split(test_df)\n\n        config = self._get_nn_default_config(encoding=ValueEncodings.COMPLEX.value)\n        nn_regressor = NNRegressor(**config)\n\n        # with HidePrints():\n        nn_regressor.fit(train_df, targets_df)\n        nn_regressor.predict(test_df)\n'"
src/predictive_model/regression/tests/test_regression.py,0,"b'""""""\nregression tests\n""""""\n\nimport unittest\n\nfrom django.test import TestCase\n\nfrom src.clustering.models import ClusteringMethods\nfrom src.core.core import calculate\nfrom src.core.tests.test_utils import split_double, add_default_config\nfrom src.encoding.encoding_container import EncodingContainer, ZERO_PADDING\nfrom src.encoding.models import ValueEncodings\nfrom src.labelling.label_container import LabelContainer\nfrom src.labelling.models import LabelTypes\nfrom src.predictive_model.models import PredictiveModels\nfrom src.predictive_model.regression.models import RegressionMethods\nfrom src.utils.tests_utils import create_test_predictive_model, create_test_labelling, create_test_clustering, \\\n    create_test_job\n\n\nclass TestRegression(TestCase):\n    @staticmethod\n    def get_job(method=RegressionMethods.LINEAR.value, encoding_method=ValueEncodings.SIMPLE_INDEX.value,\n                padding=ZERO_PADDING, label=LabelTypes.REMAINING_TIME.value,\n                add_elapsed_time=False):\n        json = dict()\n        json[\'clustering\'] = ClusteringMethods.NO_CLUSTER.value\n        json[\'split\'] = split_double()\n        json[\'method\'] = method\n        json[\'encoding\'] = EncodingContainer(encoding_method, padding=padding, prefix_length=4)\n        json[\'labelling\'] = LabelContainer(label)\n        json[\'add_elapsed_time\'] = add_elapsed_time\n        json[\'type\'] = PredictiveModels.REGRESSION.value\n        json[\'incremental_train\'] = {\'base_model\': None}\n\n        add_default_config(json)\n        return json\n\n    @unittest.skip(\'needs refactoring\')\n    def test_no_exceptions(self):\n        # filtered_labels = [x for x in REGRESSION_LABELS if\n        #                    x != ATTRIBUTE_NUMBER]\n        # # TODO: check how to add TRACE_NUMBER_ATTRIBUTE (test logs don\'t have numeric attributes)\n        # choices = [ENCODING_METHODS, PADDINGS, REGRESSION_METHODS, filtered_labels]\n        #\n        # job_combinations = list(itertools.product(*choices))\n        #\n        # for (encoding, padding, method, label) in job_combinations:\n        #     print(encoding, padding, method, label)\n        #\n        #     if method == \'nn\' and padding == NO_PADDING:\n        #         pass\n        #\n        #     job = self.get_job(method=method, encoding_method=encoding, padding=padding, label=label)\n        #     with HidePrints():\n        #         calculate(job)\n        pass\n\n    def test_regression_random_forest(self):\n        job = create_test_job(\n            predictive_model=create_test_predictive_model(predictive_model=PredictiveModels.REGRESSION.value,\n                                                          prediction_method=RegressionMethods.RANDOM_FOREST.value),\n            labelling=create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value),\n            clustering=create_test_clustering(clustering_type=ClusteringMethods.NO_CLUSTER.value)\n        )\n        result, _ = calculate(job)\n        del result[\'elapsed_time\']\n        print(result)\n        self.assertDictEqual(result, {\'mae\': 0.0001388888888888889, \'mape\': -1, \'rmse\': 0.00017361111111111112, \'rscore\': -0.5625})\n\n    def test_regression_lasso(self):\n        job = create_test_job(\n            predictive_model=create_test_predictive_model(predictive_model=PredictiveModels.REGRESSION.value,\n                                                          prediction_method=RegressionMethods.LASSO.value),\n            labelling=create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value),\n            clustering=create_test_clustering(clustering_type=ClusteringMethods.NO_CLUSTER.value)\n        )\n        result, _ = calculate(job)\n        del result[\'elapsed_time\']\n        print(result)\n        self.assertDictEqual(result, {\'mae\': 0.0001388888888888889, \'mape\': -1, \'rmse\': 0.0001552824984374854, \'rscore\': -0.25})\n\n    def test_regression_linear(self):\n        job = create_test_job(\n            predictive_model=create_test_predictive_model(predictive_model=PredictiveModels.REGRESSION.value,\n                                                          prediction_method=RegressionMethods.LINEAR.value),\n            labelling=create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value),\n            clustering=create_test_clustering(clustering_type=ClusteringMethods.NO_CLUSTER.value)\n        )\n        result, _ = calculate(job)\n        del result[\'elapsed_time\']\n        print(result)\n        self.assertDictEqual(result, {\'mae\': 0.0001388888888888889, \'mape\': -1, \'rmse\': 0.0001552824984374854, \'rscore\': -0.25})\n\n    @unittest.skip(\'needs refactoring\')\n    def test_regression_xgboost(self):\n        job = create_test_job(\n            predictive_model=create_test_predictive_model(predictive_model=PredictiveModels.REGRESSION.value,\n                                                          prediction_method=RegressionMethods.XGBOOST.value),\n            labelling=create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value),\n            clustering=create_test_clustering(clustering_type=ClusteringMethods.NO_CLUSTER.value)\n        )\n        result, _ = calculate(job)\n        del result[\'elapsed_time\']\n        print(result)\n        self.assertDictEqual(result, {\'mae\': 0.00011968612670898438, \'mape\': -1, \'rmse\': 0.00011968612670898438,\n                                      \'rscore\': 0.0})\n\n    def test_regression_nn(self):\n        job = create_test_job(\n            predictive_model=create_test_predictive_model(predictive_model=PredictiveModels.REGRESSION.value,\n                                                          prediction_method=RegressionMethods.NN.value),\n            labelling=create_test_labelling(label_type=LabelTypes.REMAINING_TIME.value),\n            clustering=create_test_clustering(clustering_type=ClusteringMethods.NO_CLUSTER.value)\n        )\n        result, _ = calculate(job)\n        del result[\'elapsed_time\']\n        print(result)\n        self.assertAlmostEqual(result[\'mae\'], 0.0001388888888888889)\n        self.assertAlmostEqual(result[\'mape\'], -1)\n        #self.assertAlmostEqual(result[\'rmse\'], 0.4868515876868242)\n        #self.assertAlmostEqual(result[\'rscore\'], 0.02142755175443678)\n'"
src/predictive_model/time_series_prediction/migrations/__init__.py,0,b''
src/predictive_model/time_series_prediction/tests/__init__.py,0,b''
src/predictive_model/time_series_prediction/tests/test_nn_models.py,0,"b'""""""\nNeural Networks tests\n""""""\n\nfrom django.test import TestCase\nfrom numpy import ndarray\nfrom pandas import DataFrame\n\nfrom src.encoding.complex_last_payload import complex\nfrom src.encoding.models import ValueEncodings\nfrom src.encoding.simple_index import simple_index\nfrom src.labelling.models import LabelTypes, ThresholdTypes\nfrom src.predictive_model.time_series_prediction.custom_time_series_prediction_models import RNNTimeSeriesPredictor\nfrom src.utils.event_attributes import unique_events, get_additional_columns\nfrom src.utils.file_service import get_log\nfrom src.utils.tests_utils import create_test_encoding, create_test_labelling, create_test_log, \\\n    general_example_train_filename, \\\n    general_example_train_filepath, general_example_test_filename, general_example_test_filepath\n\n\nclass TestRNNTimeSeriesPredictor(TestCase):\n    def setUp(self):\n        self.train_log = get_log(create_test_log(log_name=general_example_train_filename,\n                                                 log_path=general_example_train_filepath))\n        self.train_event_names = unique_events(self.train_log)\n        self.train_add_col = get_additional_columns(self.train_log)\n\n        self.test_log = get_log(create_test_log(log_name=general_example_test_filename,\n                                                log_path=general_example_test_filepath))\n        self.test_event_names = unique_events(self.test_log)\n        self.test_add_col = get_additional_columns(self.test_log)\n\n    @staticmethod\n    def _get_rnn_default_config(encoding=ValueEncodings.SIMPLE_INDEX.value):\n        config = dict()\n        config[\'n_units\'] = 16\n        config[\'rnn_type\'] = \'lstm\'\n        config[\'n_epochs\'] = 1\n        config[\'encoding\'] = encoding\n        config[\'incremental_train\'] = {\'base_model\': None}\n        return config\n\n    @staticmethod\n    def _drop_columns_and_split(df: DataFrame) -> (DataFrame, ndarray):\n        return df.drop([\'trace_id\', \'label\'], 1), df[\'label\']\n\n    def test_rnn_time_series_predictor_simple_index_no_exceptions(self):\n        encoding = create_test_encoding(value_encoding=ValueEncodings.SIMPLE_INDEX.value, prefix_length=5, padding=True)\n        labelling = create_test_labelling(label_type=LabelTypes.DURATION.value,\n                                          threshold_type=ThresholdTypes.THRESHOLD_MEAN.value)\n\n        train_df = simple_index(self.train_log, labelling, encoding)\n        test_df = simple_index(self.test_log, labelling, encoding)\n\n        train_df, targets_df = self._drop_columns_and_split(train_df)\n\n        test_df, _ = self._drop_columns_and_split(test_df)\n\n        config = self._get_rnn_default_config()\n        rnn_time_series_predictor = RNNTimeSeriesPredictor(**config)\n\n        # with HidePrints():\n        rnn_time_series_predictor.fit(train_df)\n        rnn_time_series_predictor.predict(test_df)\n\n    def test_rnn_time_series_predictor_complex_no_exceptions(self):\n        encoding = create_test_encoding(value_encoding=ValueEncodings.COMPLEX.value, prefix_length=5, padding=True)\n        labelling = create_test_labelling(label_type=LabelTypes.DURATION.value,\n                                          threshold_type=ThresholdTypes.THRESHOLD_MEAN.value)\n\n        train_df = complex(self.train_log, labelling, encoding, self.train_add_col)\n        test_df = complex(self.test_log, labelling, encoding, self.test_add_col)\n\n        train_df, targets_df = self._drop_columns_and_split(train_df)\n\n        test_df, _ = self._drop_columns_and_split(test_df)\n\n        config = self._get_rnn_default_config(encoding=ValueEncodings.COMPLEX.value)\n        rnn_time_series_predictor = RNNTimeSeriesPredictor(**config)\n\n        # with HidePrints():\n        rnn_time_series_predictor.fit(train_df)\n        rnn_time_series_predictor.predict(test_df)\n'"
src/predictive_model/time_series_prediction/tests/test_time_series_prediction.py,0,"b'""""""\ntime series prediction tests\n""""""\n\nimport unittest\n\nfrom django.test import TestCase\n\nfrom src.clustering.models import ClusteringMethods\nfrom src.core.core import calculate\nfrom src.core.tests.test_utils import split_double, add_default_config\nfrom src.encoding.encoding_container import EncodingContainer, ZERO_PADDING\nfrom src.encoding.models import ValueEncodings\nfrom src.labelling.label_container import LabelContainer\nfrom src.labelling.models import LabelTypes, ThresholdTypes\nfrom src.predictive_model.classification.models import ClassificationMethods\nfrom src.predictive_model.models import PredictiveModels\nfrom src.predictive_model.time_series_prediction.models import TimeSeriesPredictionMethods\nfrom src.utils.tests_utils import create_test_job, create_test_predictive_model, create_test_labelling, \\\n    create_test_clustering, create_test_encoding\n\n\nclass TestTimeSeriesPrediction(TestCase):\n    @staticmethod\n    def get_job(method=TimeSeriesPredictionMethods.RNN.value, encoding_method=ValueEncodings.SIMPLE_INDEX.value,\n                padding=ZERO_PADDING, label=LabelTypes.DURATION.value,\n                add_elapsed_time=False):\n        json = dict()\n        json[\'clustering\'] = ClusteringMethods.NO_CLUSTER.value\n        json[\'split\'] = split_double()\n        json[\'method\'] = method\n        json[\'encoding\'] = EncodingContainer(encoding_method, padding=padding, prefix_length=4)\n        json[\'incremental_train\'] = {\'base_model\': None}\n        if label == LabelTypes.ATTRIBUTE_STRING.value:\n            json[\'labelling\'] = LabelContainer(label, attribute_name=\'creator\')\n        elif label == ThresholdTypes.THRESHOLD_CUSTOM.value:\n            json[\'labelling\'] = LabelContainer(threshold_type=label, threshold=50)\n        elif label == ThresholdTypes.THRESHOLD_MEAN.value:\n            json[\'labelling\'] = LabelContainer(threshold_type=label, threshold=50)\n        else:\n            json[\'labelling\'] = LabelContainer(label)\n        json[\'add_elapsed_time\'] = add_elapsed_time\n        json[\'type\'] = PredictiveModels.TIME_SERIES_PREDICTION.value\n\n        if method != ClassificationMethods.KNN.value:\n            add_default_config(json)\n        else:\n            json[\'classification.knn\'] = {\'n_neighbors\': 3}\n        return json\n\n    @unittest.skip(\'needs refactoring\')\n    def test_no_exceptions(self):\n        # choices = [TIME_SERIES_PREDICTION_ENCODINGS, TIME_SERIES_PREDICTION_PADDINGS, TIME_SERIES_PREDICTION_METHODS,\n        #            TIME_SERIES_PREDICTION_LABELS]\n\n        # job_combinations = list(itertools.product(*choices))\n\n        # for (encoding, padding, method, label) in job_combinations:\n        #     print(encoding, padding, method, label)\n        #\n        #     job = self.get_job(method=method, encoding_method=encoding, padding=padding, label=label)\n        #     with HidePrints():\n        #         calculate(job)\n        pass\n\n    def test_tsp_lstm(self):\n        job = create_test_job(\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.TIME_SERIES_PREDICTION.value,\n                prediction_method=TimeSeriesPredictionMethods.RNN.value,\n                configuration={\'rnn_type\': \'lstm\'}),\n            labelling=create_test_labelling(),\n            encoding=create_test_encoding(prefix_length=2, padding=True),\n            clustering=create_test_clustering(clustering_type=ClusteringMethods.NO_CLUSTER.value)\n        )\n        result, _ = calculate(job)\n        del result[\'elapsed_time\']\n        self.assertDictEqual(result, {\'nlevenshtein\': 0.6})\n\n    def test_tsp_gru(self):\n        job = create_test_job(\n            predictive_model=create_test_predictive_model(\n                predictive_model=PredictiveModels.TIME_SERIES_PREDICTION.value,\n                prediction_method=TimeSeriesPredictionMethods.RNN.value,\n                configuration={\'rnn_type\': \'gru\'}),\n            labelling=create_test_labelling(),\n            encoding=create_test_encoding(prefix_length=2, padding=True),\n            clustering=create_test_clustering(clustering_type=ClusteringMethods.NO_CLUSTER.value)\n        )\n        result, _ = calculate(job)\n        del result[\'elapsed_time\']\n        self.assertDictEqual(result, {\'nlevenshtein\': 0.6})\n'"
