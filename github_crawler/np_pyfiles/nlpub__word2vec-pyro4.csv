file_path,api_count,code
server.py,0,"b""#!/usr/bin/env python3\n\nimport argparse\nfrom gensim.models import KeyedVectors\nimport Pyro4\n\nparser = argparse.ArgumentParser(description='Word Vectors Served via Pyro4.', add_help=False)\nparser.add_argument('--id',  default='w2v', type=str)\nparser.add_argument('--no-binary', dest='binary', action='store_false')\nparser.add_argument('--no-sims', dest='sims', action='store_false')\nparser.add_argument('-h', '--host', default='', type=str)\nparser.add_argument('-p', '--port', default=9090, type=int)\nparser.add_argument('w2v', type=argparse.FileType('rb'))\nargs = parser.parse_args()\n\nPyro4.config.SERIALIZERS_ACCEPTED = {'pickle'}\nPyro4.config.SERIALIZER = 'pickle'\n\nwv = KeyedVectors.load_word2vec_format(args.w2v, binary=args.binary, unicode_errors='ignore')\n\nif args.sims:\n    wv.init_sims(replace=True)\n\n# This is an adapter for the KeyedVectors class.\n# Unfortunately, it is not possible to expose the __getitem__ method.\nclass PyroVectors:\n    def __init__(self, wv):\n        self.wv = wv\n\n    @Pyro4.expose\n    def word_vec(self, word, use_norm=False):\n        return self.wv.word_vec(word, use_norm)\n\n    @Pyro4.expose\n    def words_vec(self, words, use_norm=False):\n        return {word: self.wv.word_vec(word, use_norm) for word in words if word in self.wv}\n\n    @Pyro4.expose\n    def most_similar(self, positive=[], negative=[], topn=10, restrict_vocab=None, indexer=None):\n        return self.wv.most_similar(positive, negative, topn, restrict_vocab, indexer)\n\n    @Pyro4.expose\n    def wmdistance(self, document1, document2):\n        return self.wmdistance(document1, document2)\n\n    @Pyro4.expose\n    def most_similar_cosmul(self, positive=[], negative=[], topn=10):\n        return self.wv.most_similar_cosmul(positive, negative, topn)\n\n    @Pyro4.expose\n    def similar_by_word(self, word, topn=10, restrict_vocab=None):\n        return self.wv.similar_by_word()\n\n    @Pyro4.expose\n    def similar_by_vector(self, vector, topn=10, restrict_vocab=None):\n        return self.wv.similar_by_vector(word, topn, restrict_vocab)\n\n    @Pyro4.expose\n    def doesnt_match(self, words):\n        return self.wv.doesnt_match(vector, topn, restrict_vocab)\n\n    @Pyro4.expose\n    def similarity(self, w1, w2):\n        return self.wv.similarity(w1, w2)\n\n    @Pyro4.expose\n    def n_similarity(self, ws1, ws2):\n        return self.wv.n_similarity(ws1, ws2)\n\n    @Pyro4.expose\n    def wmdistance(self, document1, document2):\n        return self.wv.wmdistance(document1, document2)\n\n    @Pyro4.expose\n    @property\n    def syn0(self):\n        return self.wv.syn0\n\n    @Pyro4.expose\n    @property\n    def syn0norm(self):\n        return self.wv.syn0norm\n\n    @Pyro4.expose\n    @property\n    def vocab(self):\n        return self.wv.vocab\n\n    @Pyro4.expose\n    @property\n    def index2word(self):\n        return self.wv.index2word\n\n    @Pyro4.expose\n    @property\n    def vector_size(self):\n        return self.wv.vector_size\n\ndaemon = Pyro4.Daemon(host=args.host, port=args.port)\nprint(daemon.register(PyroVectors(wv), args.id), flush=True)\ndaemon.requestLoop()\n"""
