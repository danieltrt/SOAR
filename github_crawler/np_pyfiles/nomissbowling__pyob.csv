file_path,api_count,code
current/VCtmpCleanup.py,0,"b""#!/usr/local/bin/python\n# -*- coding: utf-8 -*-\n'''VCtmpCleanup\n'''\n\nimport sys, os\n\nD = [\n  ('matplotlib_con', 'test_matplotlib_con'),\n  ('wincon_0001', 'ConsoleApplication_0001'),\n  ('winapp_0001', 'WindowsProject_0001')]\n\ndef rmpch(q, s):\n  print(q)\n  try:\n    os.unlink(os.path.join(q, f'{s}.pch'))\n  except FileNotFoundError as e:\n    print(f'{e}')\n\ndef VCtmpCleanup():\n  for d, s in D:\n    p = os.path.join(d, s)\n    print(os.path.join(p, 'x64', 'Release')) # exe\n    print(os.path.join(p, 'Release')) # exe\n    p = os.path.join(p, s)\n    print(p)\n    rmpch(os.path.join(p, 'x64', 'Release'), s)\n    rmpch(os.path.join(p, 'Release'), s)\n\nif __name__ == '__main__':\n  VCtmpCleanup()\n"""
current/mm.py,0,"b'#!/usr/local/bin/python\n# -*- coding: utf-8 -*-\n\'\'\'mm\n\'\'\'\n\nclass mc(object):\n  \'\'\'test data overwritten by self.n after construction\'\'\'\n  n = 9999\n\n  def __init__(self, n):\n    print(f\'TEST before {self.n}\')\n    self.n = n\n    print(f\'TEST after {self.n}\')\n    print(\'TEST mc\')\n    # print(__builtins__) # nothing to display (<module \'builtins\' (built-in)>)\n    # print(__builtins__.__dict__) # {k, v}\n\n  def pi(self, *args, **kwargs):\n    print(f\'TEST mc.pi ({len(args)}), {kwargs.keys()}, self.n={self.n}\')\n    # print(f\'{args[0].__dict__}\') # OK\n    # print(f\'{kwargs[""a""].__dict__}\') # OK\n    for i, v in enumerate(args): print(f\'{i}: [{v}]\')\n    for k in kwargs.keys(): print(f\'[{k}]: [{kwargs[k]}]\')\n    return {\'result\': \'XYZ\', \'args\': args, \'kwargs\': kwargs}\n'"
