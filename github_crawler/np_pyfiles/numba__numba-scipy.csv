file_path,api_count,code
setup.py,0,"b'from setuptools import setup, find_packages\nimport versioneer\n\n\n_install_requires = [\'scipy>=0.16\', \'numba>=0.45\']\n\n\nmetadata = dict(\n    name=\'numba-scipy\',\n    description=""numba-scipy extends Numba to make it aware of SciPy"",\n    version=versioneer.get_version(),\n    cmdclass=versioneer.get_cmdclass(),\n\n    classifiers=[\n        ""Development Status :: 3 - Alpha"",\n        ""Intended Audience :: Developers"",\n        ""License :: OSI Approved :: BSD License"",\n        ""Operating System :: OS Independent"",\n        ""Programming Language :: Python"",\n        ""Programming Language :: Python :: 3.5"",\n        ""Programming Language :: Python :: 3.6"",\n        ""Programming Language :: Python :: 3.7"",\n        ""Topic :: Software Development :: Compilers"",\n    ],\n    package_data={},\n    scripts=[],\n    author=""Anaconda, Inc."",\n    author_email=""numba-users@continuum.io"",\n    url=""https://github.com/numba/numba-scipy"",\n    download_url=""https://github.com/numba/numba-scipy"",\n    packages=find_packages(),\n    setup_requires=[],\n    install_requires=_install_requires,\n    entry_points={\n        ""numba_extensions"": [\n            ""init = numba_scipy:_init_extension"",\n        ],\n    },\n    license=""BSD"",\n    zip_safe=False,\n)\n\n\nwith open(\'README.rst\') as f:\n    metadata[\'long_description\'] = f.read()\n\n\nsetup(**metadata)\n'"
versioneer.py,0,"b'\n# Version: 0.18\n\n""""""The Versioneer - like a rocketeer, but for versions.\n\nThe Versioneer\n==============\n\n* like a rocketeer, but for versions!\n* https://github.com/warner/python-versioneer\n* Brian Warner\n* License: Public Domain\n* Compatible With: python2.6, 2.7, 3.2, 3.3, 3.4, 3.5, 3.6, and pypy\n* [![Latest Version]\n(https://pypip.in/version/versioneer/badge.svg?style=flat)\n](https://pypi.python.org/pypi/versioneer/)\n* [![Build Status]\n(https://travis-ci.org/warner/python-versioneer.png?branch=master)\n](https://travis-ci.org/warner/python-versioneer)\n\nThis is a tool for managing a recorded version number in distutils-based\npython projects. The goal is to remove the tedious and error-prone ""update\nthe embedded version string"" step from your release process. Making a new\nrelease should be as easy as recording a new tag in your version-control\nsystem, and maybe making new tarballs.\n\n\n## Quick Install\n\n* `pip install versioneer` to somewhere to your $PATH\n* add a `[versioneer]` section to your setup.cfg (see below)\n* run `versioneer install` in your source tree, commit the results\n\n## Version Identifiers\n\nSource trees come from a variety of places:\n\n* a version-control system checkout (mostly used by developers)\n* a nightly tarball, produced by build automation\n* a snapshot tarball, produced by a web-based VCS browser, like github\'s\n  ""tarball from tag"" feature\n* a release tarball, produced by ""setup.py sdist"", distributed through PyPI\n\nWithin each source tree, the version identifier (either a string or a number,\nthis tool is format-agnostic) can come from a variety of places:\n\n* ask the VCS tool itself, e.g. ""git describe"" (for checkouts), which knows\n  about recent ""tags"" and an absolute revision-id\n* the name of the directory into which the tarball was unpacked\n* an expanded VCS keyword ($Id$, etc)\n* a `_version.py` created by some earlier build step\n\nFor released software, the version identifier is closely related to a VCS\ntag. Some projects use tag names that include more than just the version\nstring (e.g. ""myproject-1.2"" instead of just ""1.2""), in which case the tool\nneeds to strip the tag prefix to extract the version identifier. For\nunreleased software (between tags), the version identifier should provide\nenough information to help developers recreate the same tree, while also\ngiving them an idea of roughly how old the tree is (after version 1.2, before\nversion 1.3). Many VCS systems can report a description that captures this,\nfor example `git describe --tags --dirty --always` reports things like\n""0.7-1-g574ab98-dirty"" to indicate that the checkout is one revision past the\n0.7 tag, has a unique revision id of ""574ab98"", and is ""dirty"" (it has\nuncommitted changes.\n\nThe version identifier is used for multiple purposes:\n\n* to allow the module to self-identify its version: `myproject.__version__`\n* to choose a name and prefix for a \'setup.py sdist\' tarball\n\n## Theory of Operation\n\nVersioneer works by adding a special `_version.py` file into your source\ntree, where your `__init__.py` can import it. This `_version.py` knows how to\ndynamically ask the VCS tool for version information at import time.\n\n`_version.py` also contains `$Revision$` markers, and the installation\nprocess marks `_version.py` to have this marker rewritten with a tag name\nduring the `git archive` command. As a result, generated tarballs will\ncontain enough information to get the proper version.\n\nTo allow `setup.py` to compute a version too, a `versioneer.py` is added to\nthe top level of your source tree, next to `setup.py` and the `setup.cfg`\nthat configures it. This overrides several distutils/setuptools commands to\ncompute the version when invoked, and changes `setup.py build` and `setup.py\nsdist` to replace `_version.py` with a small static file that contains just\nthe generated version data.\n\n## Installation\n\nSee [INSTALL.md](./INSTALL.md) for detailed installation instructions.\n\n## Version-String Flavors\n\nCode which uses Versioneer can learn about its version string at runtime by\nimporting `_version` from your main `__init__.py` file and running the\n`get_versions()` function. From the ""outside"" (e.g. in `setup.py`), you can\nimport the top-level `versioneer.py` and run `get_versions()`.\n\nBoth functions return a dictionary with different flavors of version\ninformation:\n\n* `[\'version\']`: A condensed version string, rendered using the selected\n  style. This is the most commonly used value for the project\'s version\n  string. The default ""pep440"" style yields strings like `0.11`,\n  `0.11+2.g1076c97`, or `0.11+2.g1076c97.dirty`. See the ""Styles"" section\n  below for alternative styles.\n\n* `[\'full-revisionid\']`: detailed revision identifier. For Git, this is the\n  full SHA1 commit id, e.g. ""1076c978a8d3cfc70f408fe5974aa6c092c949ac"".\n\n* `[\'date\']`: Date and time of the latest `HEAD` commit. For Git, it is the\n  commit date in ISO 8601 format. This will be None if the date is not\n  available.\n\n* `[\'dirty\']`: a boolean, True if the tree has uncommitted changes. Note that\n  this is only accurate if run in a VCS checkout, otherwise it is likely to\n  be False or None\n\n* `[\'error\']`: if the version string could not be computed, this will be set\n  to a string describing the problem, otherwise it will be None. It may be\n  useful to throw an exception in setup.py if this is set, to avoid e.g.\n  creating tarballs with a version string of ""unknown"".\n\nSome variants are more useful than others. Including `full-revisionid` in a\nbug report should allow developers to reconstruct the exact code being tested\n(or indicate the presence of local changes that should be shared with the\ndevelopers). `version` is suitable for display in an ""about"" box or a CLI\n`--version` output: it can be easily compared against release notes and lists\nof bugs fixed in various releases.\n\nThe installer adds the following text to your `__init__.py` to place a basic\nversion in `YOURPROJECT.__version__`:\n\n    from ._version import get_versions\n    __version__ = get_versions()[\'version\']\n    del get_versions\n\n## Styles\n\nThe setup.cfg `style=` configuration controls how the VCS information is\nrendered into a version string.\n\nThe default style, ""pep440"", produces a PEP440-compliant string, equal to the\nun-prefixed tag name for actual releases, and containing an additional ""local\nversion"" section with more detail for in-between builds. For Git, this is\nTAG[+DISTANCE.gHEX[.dirty]] , using information from `git describe --tags\n--dirty --always`. For example ""0.11+2.g1076c97.dirty"" indicates that the\ntree is like the ""1076c97"" commit but has uncommitted changes ("".dirty""), and\nthat this commit is two revisions (""+2"") beyond the ""0.11"" tag. For released\nsoftware (exactly equal to a known tag), the identifier will only contain the\nstripped tag, e.g. ""0.11"".\n\nOther styles are available. See [details.md](details.md) in the Versioneer\nsource tree for descriptions.\n\n## Debugging\n\nVersioneer tries to avoid fatal errors: if something goes wrong, it will tend\nto return a version of ""0+unknown"". To investigate the problem, run `setup.py\nversion`, which will run the version-lookup code in a verbose mode, and will\ndisplay the full contents of `get_versions()` (including the `error` string,\nwhich may help identify what went wrong).\n\n## Known Limitations\n\nSome situations are known to cause problems for Versioneer. This details the\nmost significant ones. More can be found on Github\n[issues page](https://github.com/warner/python-versioneer/issues).\n\n### Subprojects\n\nVersioneer has limited support for source trees in which `setup.py` is not in\nthe root directory (e.g. `setup.py` and `.git/` are *not* siblings). The are\ntwo common reasons why `setup.py` might not be in the root:\n\n* Source trees which contain multiple subprojects, such as\n  [Buildbot](https://github.com/buildbot/buildbot), which contains both\n  ""master"" and ""slave"" subprojects, each with their own `setup.py`,\n  `setup.cfg`, and `tox.ini`. Projects like these produce multiple PyPI\n  distributions (and upload multiple independently-installable tarballs).\n* Source trees whose main purpose is to contain a C library, but which also\n  provide bindings to Python (and perhaps other langauges) in subdirectories.\n\nVersioneer will look for `.git` in parent directories, and most operations\nshould get the right version string. However `pip` and `setuptools` have bugs\nand implementation details which frequently cause `pip install .` from a\nsubproject directory to fail to find a correct version string (so it usually\ndefaults to `0+unknown`).\n\n`pip install --editable .` should work correctly. `setup.py install` might\nwork too.\n\nPip-8.1.1 is known to have this problem, but hopefully it will get fixed in\nsome later version.\n\n[Bug #38](https://github.com/warner/python-versioneer/issues/38) is tracking\nthis issue. The discussion in\n[PR #61](https://github.com/warner/python-versioneer/pull/61) describes the\nissue from the Versioneer side in more detail.\n[pip PR#3176](https://github.com/pypa/pip/pull/3176) and\n[pip PR#3615](https://github.com/pypa/pip/pull/3615) contain work to improve\npip to let Versioneer work correctly.\n\nVersioneer-0.16 and earlier only looked for a `.git` directory next to the\n`setup.cfg`, so subprojects were completely unsupported with those releases.\n\n### Editable installs with setuptools <= 18.5\n\n`setup.py develop` and `pip install --editable .` allow you to install a\nproject into a virtualenv once, then continue editing the source code (and\ntest) without re-installing after every change.\n\n""Entry-point scripts"" (`setup(entry_points={""console_scripts"": ..})`) are a\nconvenient way to specify executable scripts that should be installed along\nwith the python package.\n\nThese both work as expected when using modern setuptools. When using\nsetuptools-18.5 or earlier, however, certain operations will cause\n`pkg_resources.DistributionNotFound` errors when running the entrypoint\nscript, which must be resolved by re-installing the package. This happens\nwhen the install happens with one version, then the egg_info data is\nregenerated while a different version is checked out. Many setup.py commands\ncause egg_info to be rebuilt (including `sdist`, `wheel`, and installing into\na different virtualenv), so this can be surprising.\n\n[Bug #83](https://github.com/warner/python-versioneer/issues/83) describes\nthis one, but upgrading to a newer version of setuptools should probably\nresolve it.\n\n### Unicode version strings\n\nWhile Versioneer works (and is continually tested) with both Python 2 and\nPython 3, it is not entirely consistent with bytes-vs-unicode distinctions.\nNewer releases probably generate unicode version strings on py2. It\'s not\nclear that this is wrong, but it may be surprising for applications when then\nwrite these strings to a network connection or include them in bytes-oriented\nAPIs like cryptographic checksums.\n\n[Bug #71](https://github.com/warner/python-versioneer/issues/71) investigates\nthis question.\n\n\n## Updating Versioneer\n\nTo upgrade your project to a new release of Versioneer, do the following:\n\n* install the new Versioneer (`pip install -U versioneer` or equivalent)\n* edit `setup.cfg`, if necessary, to include any new configuration settings\n  indicated by the release notes. See [UPGRADING](./UPGRADING.md) for details.\n* re-run `versioneer install` in your source tree, to replace\n  `SRC/_version.py`\n* commit any changed files\n\n## Future Directions\n\nThis tool is designed to make it easily extended to other version-control\nsystems: all VCS-specific components are in separate directories like\nsrc/git/ . The top-level `versioneer.py` script is assembled from these\ncomponents by running make-versioneer.py . In the future, make-versioneer.py\nwill take a VCS name as an argument, and will construct a version of\n`versioneer.py` that is specific to the given VCS. It might also take the\nconfiguration arguments that are currently provided manually during\ninstallation by editing setup.py . Alternatively, it might go the other\ndirection and include code from all supported VCS systems, reducing the\nnumber of intermediate scripts.\n\n\n## License\n\nTo make Versioneer easier to embed, all its code is dedicated to the public\ndomain. The `_version.py` that it creates is also in the public domain.\nSpecifically, both are released under the Creative Commons ""Public Domain\nDedication"" license (CC0-1.0), as described in\nhttps://creativecommons.org/publicdomain/zero/1.0/ .\n\n""""""\n\nfrom __future__ import print_function\ntry:\n    import configparser\nexcept ImportError:\n    import ConfigParser as configparser\nimport errno\nimport json\nimport os\nimport re\nimport subprocess\nimport sys\n\n\nclass VersioneerConfig:\n    """"""Container for Versioneer configuration parameters.""""""\n\n\ndef get_root():\n    """"""Get the project root directory.\n\n    We require that all commands are run from the project root, i.e. the\n    directory that contains setup.py, setup.cfg, and versioneer.py .\n    """"""\n    root = os.path.realpath(os.path.abspath(os.getcwd()))\n    setup_py = os.path.join(root, ""setup.py"")\n    versioneer_py = os.path.join(root, ""versioneer.py"")\n    if not (os.path.exists(setup_py) or os.path.exists(versioneer_py)):\n        # allow \'python path/to/setup.py COMMAND\'\n        root = os.path.dirname(os.path.realpath(os.path.abspath(sys.argv[0])))\n        setup_py = os.path.join(root, ""setup.py"")\n        versioneer_py = os.path.join(root, ""versioneer.py"")\n    if not (os.path.exists(setup_py) or os.path.exists(versioneer_py)):\n        err = (""Versioneer was unable to run the project root directory. ""\n               ""Versioneer requires setup.py to be executed from ""\n               ""its immediate directory (like \'python setup.py COMMAND\'), ""\n               ""or in a way that lets it use sys.argv[0] to find the root ""\n               ""(like \'python path/to/setup.py COMMAND\')."")\n        raise VersioneerBadRootError(err)\n    try:\n        # Certain runtime workflows (setup.py install/develop in a setuptools\n        # tree) execute all dependencies in a single python process, so\n        # ""versioneer"" may be imported multiple times, and python\'s shared\n        # module-import table will cache the first one. So we can\'t use\n        # os.path.dirname(__file__), as that will find whichever\n        # versioneer.py was first imported, even in later projects.\n        me = os.path.realpath(os.path.abspath(__file__))\n        me_dir = os.path.normcase(os.path.splitext(me)[0])\n        vsr_dir = os.path.normcase(os.path.splitext(versioneer_py)[0])\n        if me_dir != vsr_dir:\n            print(""Warning: build in %s is using versioneer.py from %s""\n                  % (os.path.dirname(me), versioneer_py))\n    except NameError:\n        pass\n    return root\n\n\ndef get_config_from_root(root):\n    """"""Read the project setup.cfg file to determine Versioneer config.""""""\n    # This might raise EnvironmentError (if setup.cfg is missing), or\n    # configparser.NoSectionError (if it lacks a [versioneer] section), or\n    # configparser.NoOptionError (if it lacks ""VCS=""). See the docstring at\n    # the top of versioneer.py for instructions on writing your setup.cfg .\n    setup_cfg = os.path.join(root, ""setup.cfg"")\n    parser = configparser.SafeConfigParser()\n    with open(setup_cfg, ""r"") as f:\n        parser.readfp(f)\n    VCS = parser.get(""versioneer"", ""VCS"")  # mandatory\n\n    def get(parser, name):\n        if parser.has_option(""versioneer"", name):\n            return parser.get(""versioneer"", name)\n        return None\n    cfg = VersioneerConfig()\n    cfg.VCS = VCS\n    cfg.style = get(parser, ""style"") or """"\n    cfg.versionfile_source = get(parser, ""versionfile_source"")\n    cfg.versionfile_build = get(parser, ""versionfile_build"")\n    cfg.tag_prefix = get(parser, ""tag_prefix"")\n    if cfg.tag_prefix in (""\'\'"", \'""""\'):\n        cfg.tag_prefix = """"\n    cfg.parentdir_prefix = get(parser, ""parentdir_prefix"")\n    cfg.verbose = get(parser, ""verbose"")\n    return cfg\n\n\nclass NotThisMethod(Exception):\n    """"""Exception raised if a method is not valid for the current scenario.""""""\n\n\n# these dictionaries contain VCS-specific tools\nLONG_VERSION_PY = {}\nHANDLERS = {}\n\n\ndef register_vcs_handler(vcs, method):  # decorator\n    """"""Decorator to mark a method as the handler for a particular VCS.""""""\n    def decorate(f):\n        """"""Store f in HANDLERS[vcs][method].""""""\n        if vcs not in HANDLERS:\n            HANDLERS[vcs] = {}\n        HANDLERS[vcs][method] = f\n        return f\n    return decorate\n\n\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False,\n                env=None):\n    """"""Call the given command(s).""""""\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(""unable to run %s"" % dispcmd)\n                print(e)\n            return None, None\n    else:\n        if verbose:\n            print(""unable to find command, tried %s"" % (commands,))\n        return None, None\n    stdout = p.communicate()[0].strip()\n    if sys.version_info[0] >= 3:\n        stdout = stdout.decode()\n    if p.returncode != 0:\n        if verbose:\n            print(""unable to run %s (error)"" % dispcmd)\n            print(""stdout was %s"" % stdout)\n        return None, p.returncode\n    return stdout, p.returncode\n\n\nLONG_VERSION_PY[\'git\'] = \'\'\'\n# This file helps to compute a version number in source trees obtained from\n# git-archive tarball (such as those provided by githubs download-from-tag\n# feature). Distribution tarballs (built by setup.py sdist) and build\n# directories (produced by setup.py build) will contain a much shorter file\n# that just contains the computed version number.\n\n# This file is released into the public domain. Generated by\n# versioneer-0.18 (https://github.com/warner/python-versioneer)\n\n""""""Git implementation of _version.py.""""""\n\nimport errno\nimport os\nimport re\nimport subprocess\nimport sys\n\n\ndef get_keywords():\n    """"""Get the keywords needed to look up the version information.""""""\n    # these strings will be replaced by git during git-archive.\n    # setup.py/versioneer.py will grep for the variable names, so they must\n    # each be defined on a line of their own. _version.py will just call\n    # get_keywords().\n    git_refnames = ""%(DOLLAR)sFormat:%%d%(DOLLAR)s""\n    git_full = ""%(DOLLAR)sFormat:%%H%(DOLLAR)s""\n    git_date = ""%(DOLLAR)sFormat:%%ci%(DOLLAR)s""\n    keywords = {""refnames"": git_refnames, ""full"": git_full, ""date"": git_date}\n    return keywords\n\n\nclass VersioneerConfig:\n    """"""Container for Versioneer configuration parameters.""""""\n\n\ndef get_config():\n    """"""Create, populate and return the VersioneerConfig() object.""""""\n    # these strings are filled in when \'setup.py versioneer\' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = ""git""\n    cfg.style = ""%(STYLE)s""\n    cfg.tag_prefix = ""%(TAG_PREFIX)s""\n    cfg.parentdir_prefix = ""%(PARENTDIR_PREFIX)s""\n    cfg.versionfile_source = ""%(VERSIONFILE_SOURCE)s""\n    cfg.verbose = False\n    return cfg\n\n\nclass NotThisMethod(Exception):\n    """"""Exception raised if a method is not valid for the current scenario.""""""\n\n\nLONG_VERSION_PY = {}\nHANDLERS = {}\n\n\ndef register_vcs_handler(vcs, method):  # decorator\n    """"""Decorator to mark a method as the handler for a particular VCS.""""""\n    def decorate(f):\n        """"""Store f in HANDLERS[vcs][method].""""""\n        if vcs not in HANDLERS:\n            HANDLERS[vcs] = {}\n        HANDLERS[vcs][method] = f\n        return f\n    return decorate\n\n\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False,\n                env=None):\n    """"""Call the given command(s).""""""\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(""unable to run %%s"" %% dispcmd)\n                print(e)\n            return None, None\n    else:\n        if verbose:\n            print(""unable to find command, tried %%s"" %% (commands,))\n        return None, None\n    stdout = p.communicate()[0].strip()\n    if sys.version_info[0] >= 3:\n        stdout = stdout.decode()\n    if p.returncode != 0:\n        if verbose:\n            print(""unable to run %%s (error)"" %% dispcmd)\n            print(""stdout was %%s"" %% stdout)\n        return None, p.returncode\n    return stdout, p.returncode\n\n\ndef versions_from_parentdir(parentdir_prefix, root, verbose):\n    """"""Try to determine the version from the parent directory name.\n\n    Source tarballs conventionally unpack into a directory that includes both\n    the project name and a version string. We will also support searching up\n    two directory levels for an appropriately named parent directory\n    """"""\n    rootdirs = []\n\n    for i in range(3):\n        dirname = os.path.basename(root)\n        if dirname.startswith(parentdir_prefix):\n            return {""version"": dirname[len(parentdir_prefix):],\n                    ""full-revisionid"": None,\n                    ""dirty"": False, ""error"": None, ""date"": None}\n        else:\n            rootdirs.append(root)\n            root = os.path.dirname(root)  # up a level\n\n    if verbose:\n        print(""Tried directories %%s but none started with prefix %%s"" %%\n              (str(rootdirs), parentdir_prefix))\n    raise NotThisMethod(""rootdir doesn\'t start with parentdir_prefix"")\n\n\n@register_vcs_handler(""git"", ""get_keywords"")\ndef git_get_keywords(versionfile_abs):\n    """"""Extract version information from the given file.""""""\n    # the code embedded in _version.py can just fetch the value of these\n    # keywords. When used from setup.py, we don\'t want to import _version.py,\n    # so we do it with a regexp instead. This function is not used from\n    # _version.py.\n    keywords = {}\n    try:\n        f = open(versionfile_abs, ""r"")\n        for line in f.readlines():\n            if line.strip().startswith(""git_refnames =""):\n                mo = re.search(r\'=\\s*""(.*)""\', line)\n                if mo:\n                    keywords[""refnames""] = mo.group(1)\n            if line.strip().startswith(""git_full =""):\n                mo = re.search(r\'=\\s*""(.*)""\', line)\n                if mo:\n                    keywords[""full""] = mo.group(1)\n            if line.strip().startswith(""git_date =""):\n                mo = re.search(r\'=\\s*""(.*)""\', line)\n                if mo:\n                    keywords[""date""] = mo.group(1)\n        f.close()\n    except EnvironmentError:\n        pass\n    return keywords\n\n\n@register_vcs_handler(""git"", ""keywords"")\ndef git_versions_from_keywords(keywords, tag_prefix, verbose):\n    """"""Get version information from git keywords.""""""\n    if not keywords:\n        raise NotThisMethod(""no keywords at all, weird"")\n    date = keywords.get(""date"")\n    if date is not None:\n        # git-2.2.0 added ""%%cI"", which expands to an ISO-8601 -compliant\n        # datestamp. However we prefer ""%%ci"" (which expands to an ""ISO-8601\n        # -like"" string, which we must then edit to make compliant), because\n        # it\'s been around since git-1.5.3, and it\'s too difficult to\n        # discover which version we\'re using, or to work around using an\n        # older one.\n        date = date.strip().replace("" "", ""T"", 1).replace("" "", """", 1)\n    refnames = keywords[""refnames""].strip()\n    if refnames.startswith(""$Format""):\n        if verbose:\n            print(""keywords are unexpanded, not using"")\n        raise NotThisMethod(""unexpanded keywords, not a git-archive tarball"")\n    refs = set([r.strip() for r in refnames.strip(""()"").split("","")])\n    # starting in git-1.8.3, tags are listed as ""tag: foo-1.0"" instead of\n    # just ""foo-1.0"". If we see a ""tag: "" prefix, prefer those.\n    TAG = ""tag: ""\n    tags = set([r[len(TAG):] for r in refs if r.startswith(TAG)])\n    if not tags:\n        # Either we\'re using git < 1.8.3, or there really are no tags. We use\n        # a heuristic: assume all version tags have a digit. The old git %%d\n        # expansion behaves like git log --decorate=short and strips out the\n        # refs/heads/ and refs/tags/ prefixes that would let us distinguish\n        # between branches and tags. By ignoring refnames without digits, we\n        # filter out many common branch names like ""release"" and\n        # ""stabilization"", as well as ""HEAD"" and ""master"".\n        tags = set([r for r in refs if re.search(r\'\\d\', r)])\n        if verbose:\n            print(""discarding \'%%s\', no digits"" %% "","".join(refs - tags))\n    if verbose:\n        print(""likely tags: %%s"" %% "","".join(sorted(tags)))\n    for ref in sorted(tags):\n        # sorting will prefer e.g. ""2.0"" over ""2.0rc1""\n        if ref.startswith(tag_prefix):\n            r = ref[len(tag_prefix):]\n            if verbose:\n                print(""picking %%s"" %% r)\n            return {""version"": r,\n                    ""full-revisionid"": keywords[""full""].strip(),\n                    ""dirty"": False, ""error"": None,\n                    ""date"": date}\n    # no suitable tags, so version is ""0+unknown"", but full hex is still there\n    if verbose:\n        print(""no suitable tags, using unknown + full revision id"")\n    return {""version"": ""0+unknown"",\n            ""full-revisionid"": keywords[""full""].strip(),\n            ""dirty"": False, ""error"": ""no suitable tags"", ""date"": None}\n\n\n@register_vcs_handler(""git"", ""pieces_from_vcs"")\ndef git_pieces_from_vcs(tag_prefix, root, verbose, run_command=run_command):\n    """"""Get version from \'git describe\' in the root of the source tree.\n\n    This only gets called if the git-archive \'subst\' keywords were *not*\n    expanded, and _version.py hasn\'t already been rewritten with a short\n    version string, meaning we\'re inside a checked out source tree.\n    """"""\n    GITS = [""git""]\n    if sys.platform == ""win32"":\n        GITS = [""git.cmd"", ""git.exe""]\n\n    out, rc = run_command(GITS, [""rev-parse"", ""--git-dir""], cwd=root,\n                          hide_stderr=True)\n    if rc != 0:\n        if verbose:\n            print(""Directory %%s not under git control"" %% root)\n        raise NotThisMethod(""\'git rev-parse --git-dir\' returned error"")\n\n    # if there is a tag matching tag_prefix, this yields TAG-NUM-gHEX[-dirty]\n    # if there isn\'t one, this yields HEX[-dirty] (no NUM)\n    describe_out, rc = run_command(GITS, [""describe"", ""--tags"", ""--dirty"",\n                                          ""--always"", ""--long"",\n                                          ""--match"", ""%%s*"" %% tag_prefix],\n                                   cwd=root)\n    # --long was added in git-1.5.5\n    if describe_out is None:\n        raise NotThisMethod(""\'git describe\' failed"")\n    describe_out = describe_out.strip()\n    full_out, rc = run_command(GITS, [""rev-parse"", ""HEAD""], cwd=root)\n    if full_out is None:\n        raise NotThisMethod(""\'git rev-parse\' failed"")\n    full_out = full_out.strip()\n\n    pieces = {}\n    pieces[""long""] = full_out\n    pieces[""short""] = full_out[:7]  # maybe improved later\n    pieces[""error""] = None\n\n    # parse describe_out. It will be like TAG-NUM-gHEX[-dirty] or HEX[-dirty]\n    # TAG might have hyphens.\n    git_describe = describe_out\n\n    # look for -dirty suffix\n    dirty = git_describe.endswith(""-dirty"")\n    pieces[""dirty""] = dirty\n    if dirty:\n        git_describe = git_describe[:git_describe.rindex(""-dirty"")]\n\n    # now we have TAG-NUM-gHEX or HEX\n\n    if ""-"" in git_describe:\n        # TAG-NUM-gHEX\n        mo = re.search(r\'^(.+)-(\\d+)-g([0-9a-f]+)$\', git_describe)\n        if not mo:\n            # unparseable. Maybe git-describe is misbehaving?\n            pieces[""error""] = (""unable to parse git-describe output: \'%%s\'""\n                               %% describe_out)\n            return pieces\n\n        # tag\n        full_tag = mo.group(1)\n        if not full_tag.startswith(tag_prefix):\n            if verbose:\n                fmt = ""tag \'%%s\' doesn\'t start with prefix \'%%s\'""\n                print(fmt %% (full_tag, tag_prefix))\n            pieces[""error""] = (""tag \'%%s\' doesn\'t start with prefix \'%%s\'""\n                               %% (full_tag, tag_prefix))\n            return pieces\n        pieces[""closest-tag""] = full_tag[len(tag_prefix):]\n\n        # distance: number of commits since tag\n        pieces[""distance""] = int(mo.group(2))\n\n        # commit: short hex revision ID\n        pieces[""short""] = mo.group(3)\n\n    else:\n        # HEX: no tags\n        pieces[""closest-tag""] = None\n        count_out, rc = run_command(GITS, [""rev-list"", ""HEAD"", ""--count""],\n                                    cwd=root)\n        pieces[""distance""] = int(count_out)  # total number of commits\n\n    # commit date: see ISO-8601 comment in git_versions_from_keywords()\n    date = run_command(GITS, [""show"", ""-s"", ""--format=%%ci"", ""HEAD""],\n                       cwd=root)[0].strip()\n    pieces[""date""] = date.strip().replace("" "", ""T"", 1).replace("" "", """", 1)\n\n    return pieces\n\n\ndef plus_or_dot(pieces):\n    """"""Return a + if we don\'t already have one, else return a .""""""\n    if ""+"" in pieces.get(""closest-tag"", """"):\n        return "".""\n    return ""+""\n\n\ndef render_pep440(pieces):\n    """"""Build up version string, with post-release ""local version identifier"".\n\n    Our goal: TAG[+DISTANCE.gHEX[.dirty]] . Note that if you\n    get a tagged build and then dirty it, you\'ll get TAG+0.gHEX.dirty\n\n    Exceptions:\n    1: no tags. git_describe was just HEX. 0+untagged.DISTANCE.gHEX[.dirty]\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""] or pieces[""dirty""]:\n            rendered += plus_or_dot(pieces)\n            rendered += ""%%d.g%%s"" %% (pieces[""distance""], pieces[""short""])\n            if pieces[""dirty""]:\n                rendered += "".dirty""\n    else:\n        # exception #1\n        rendered = ""0+untagged.%%d.g%%s"" %% (pieces[""distance""],\n                                          pieces[""short""])\n        if pieces[""dirty""]:\n            rendered += "".dirty""\n    return rendered\n\n\ndef render_pep440_pre(pieces):\n    """"""TAG[.post.devDISTANCE] -- No -dirty.\n\n    Exceptions:\n    1: no tags. 0.post.devDISTANCE\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""]:\n            rendered += "".post.dev%%d"" %% pieces[""distance""]\n    else:\n        # exception #1\n        rendered = ""0.post.dev%%d"" %% pieces[""distance""]\n    return rendered\n\n\ndef render_pep440_post(pieces):\n    """"""TAG[.postDISTANCE[.dev0]+gHEX] .\n\n    The "".dev0"" means dirty. Note that .dev0 sorts backwards\n    (a dirty tree will appear ""older"" than the corresponding clean one),\n    but you shouldn\'t be releasing software with -dirty anyways.\n\n    Exceptions:\n    1: no tags. 0.postDISTANCE[.dev0]\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""] or pieces[""dirty""]:\n            rendered += "".post%%d"" %% pieces[""distance""]\n            if pieces[""dirty""]:\n                rendered += "".dev0""\n            rendered += plus_or_dot(pieces)\n            rendered += ""g%%s"" %% pieces[""short""]\n    else:\n        # exception #1\n        rendered = ""0.post%%d"" %% pieces[""distance""]\n        if pieces[""dirty""]:\n            rendered += "".dev0""\n        rendered += ""+g%%s"" %% pieces[""short""]\n    return rendered\n\n\ndef render_pep440_old(pieces):\n    """"""TAG[.postDISTANCE[.dev0]] .\n\n    The "".dev0"" means dirty.\n\n    Eexceptions:\n    1: no tags. 0.postDISTANCE[.dev0]\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""] or pieces[""dirty""]:\n            rendered += "".post%%d"" %% pieces[""distance""]\n            if pieces[""dirty""]:\n                rendered += "".dev0""\n    else:\n        # exception #1\n        rendered = ""0.post%%d"" %% pieces[""distance""]\n        if pieces[""dirty""]:\n            rendered += "".dev0""\n    return rendered\n\n\ndef render_git_describe(pieces):\n    """"""TAG[-DISTANCE-gHEX][-dirty].\n\n    Like \'git describe --tags --dirty --always\'.\n\n    Exceptions:\n    1: no tags. HEX[-dirty]  (note: no \'g\' prefix)\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""]:\n            rendered += ""-%%d-g%%s"" %% (pieces[""distance""], pieces[""short""])\n    else:\n        # exception #1\n        rendered = pieces[""short""]\n    if pieces[""dirty""]:\n        rendered += ""-dirty""\n    return rendered\n\n\ndef render_git_describe_long(pieces):\n    """"""TAG-DISTANCE-gHEX[-dirty].\n\n    Like \'git describe --tags --dirty --always -long\'.\n    The distance/hash is unconditional.\n\n    Exceptions:\n    1: no tags. HEX[-dirty]  (note: no \'g\' prefix)\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        rendered += ""-%%d-g%%s"" %% (pieces[""distance""], pieces[""short""])\n    else:\n        # exception #1\n        rendered = pieces[""short""]\n    if pieces[""dirty""]:\n        rendered += ""-dirty""\n    return rendered\n\n\ndef render(pieces, style):\n    """"""Render the given version pieces into the requested style.""""""\n    if pieces[""error""]:\n        return {""version"": ""unknown"",\n                ""full-revisionid"": pieces.get(""long""),\n                ""dirty"": None,\n                ""error"": pieces[""error""],\n                ""date"": None}\n\n    if not style or style == ""default"":\n        style = ""pep440""  # the default\n\n    if style == ""pep440"":\n        rendered = render_pep440(pieces)\n    elif style == ""pep440-pre"":\n        rendered = render_pep440_pre(pieces)\n    elif style == ""pep440-post"":\n        rendered = render_pep440_post(pieces)\n    elif style == ""pep440-old"":\n        rendered = render_pep440_old(pieces)\n    elif style == ""git-describe"":\n        rendered = render_git_describe(pieces)\n    elif style == ""git-describe-long"":\n        rendered = render_git_describe_long(pieces)\n    else:\n        raise ValueError(""unknown style \'%%s\'"" %% style)\n\n    return {""version"": rendered, ""full-revisionid"": pieces[""long""],\n            ""dirty"": pieces[""dirty""], ""error"": None,\n            ""date"": pieces.get(""date"")}\n\n\ndef get_versions():\n    """"""Get version information or return default if unable to do so.""""""\n    # I am in _version.py, which lives at ROOT/VERSIONFILE_SOURCE. If we have\n    # __file__, we can work backwards from there to the root. Some\n    # py2exe/bbfreeze/non-CPython implementations don\'t do __file__, in which\n    # case we can only use expanded keywords.\n\n    cfg = get_config()\n    verbose = cfg.verbose\n\n    try:\n        return git_versions_from_keywords(get_keywords(), cfg.tag_prefix,\n                                          verbose)\n    except NotThisMethod:\n        pass\n\n    try:\n        root = os.path.realpath(__file__)\n        # versionfile_source is the relative path from the top of the source\n        # tree (where the .git directory might live) to this file. Invert\n        # this to find the root from __file__.\n        for i in cfg.versionfile_source.split(\'/\'):\n            root = os.path.dirname(root)\n    except NameError:\n        return {""version"": ""0+unknown"", ""full-revisionid"": None,\n                ""dirty"": None,\n                ""error"": ""unable to find root of source tree"",\n                ""date"": None}\n\n    try:\n        pieces = git_pieces_from_vcs(cfg.tag_prefix, root, verbose)\n        return render(pieces, cfg.style)\n    except NotThisMethod:\n        pass\n\n    try:\n        if cfg.parentdir_prefix:\n            return versions_from_parentdir(cfg.parentdir_prefix, root, verbose)\n    except NotThisMethod:\n        pass\n\n    return {""version"": ""0+unknown"", ""full-revisionid"": None,\n            ""dirty"": None,\n            ""error"": ""unable to compute version"", ""date"": None}\n\'\'\'\n\n\n@register_vcs_handler(""git"", ""get_keywords"")\ndef git_get_keywords(versionfile_abs):\n    """"""Extract version information from the given file.""""""\n    # the code embedded in _version.py can just fetch the value of these\n    # keywords. When used from setup.py, we don\'t want to import _version.py,\n    # so we do it with a regexp instead. This function is not used from\n    # _version.py.\n    keywords = {}\n    try:\n        f = open(versionfile_abs, ""r"")\n        for line in f.readlines():\n            if line.strip().startswith(""git_refnames =""):\n                mo = re.search(r\'=\\s*""(.*)""\', line)\n                if mo:\n                    keywords[""refnames""] = mo.group(1)\n            if line.strip().startswith(""git_full =""):\n                mo = re.search(r\'=\\s*""(.*)""\', line)\n                if mo:\n                    keywords[""full""] = mo.group(1)\n            if line.strip().startswith(""git_date =""):\n                mo = re.search(r\'=\\s*""(.*)""\', line)\n                if mo:\n                    keywords[""date""] = mo.group(1)\n        f.close()\n    except EnvironmentError:\n        pass\n    return keywords\n\n\n@register_vcs_handler(""git"", ""keywords"")\ndef git_versions_from_keywords(keywords, tag_prefix, verbose):\n    """"""Get version information from git keywords.""""""\n    if not keywords:\n        raise NotThisMethod(""no keywords at all, weird"")\n    date = keywords.get(""date"")\n    if date is not None:\n        # git-2.2.0 added ""%cI"", which expands to an ISO-8601 -compliant\n        # datestamp. However we prefer ""%ci"" (which expands to an ""ISO-8601\n        # -like"" string, which we must then edit to make compliant), because\n        # it\'s been around since git-1.5.3, and it\'s too difficult to\n        # discover which version we\'re using, or to work around using an\n        # older one.\n        date = date.strip().replace("" "", ""T"", 1).replace("" "", """", 1)\n    refnames = keywords[""refnames""].strip()\n    if refnames.startswith(""$Format""):\n        if verbose:\n            print(""keywords are unexpanded, not using"")\n        raise NotThisMethod(""unexpanded keywords, not a git-archive tarball"")\n    refs = set([r.strip() for r in refnames.strip(""()"").split("","")])\n    # starting in git-1.8.3, tags are listed as ""tag: foo-1.0"" instead of\n    # just ""foo-1.0"". If we see a ""tag: "" prefix, prefer those.\n    TAG = ""tag: ""\n    tags = set([r[len(TAG):] for r in refs if r.startswith(TAG)])\n    if not tags:\n        # Either we\'re using git < 1.8.3, or there really are no tags. We use\n        # a heuristic: assume all version tags have a digit. The old git %d\n        # expansion behaves like git log --decorate=short and strips out the\n        # refs/heads/ and refs/tags/ prefixes that would let us distinguish\n        # between branches and tags. By ignoring refnames without digits, we\n        # filter out many common branch names like ""release"" and\n        # ""stabilization"", as well as ""HEAD"" and ""master"".\n        tags = set([r for r in refs if re.search(r\'\\d\', r)])\n        if verbose:\n            print(""discarding \'%s\', no digits"" % "","".join(refs - tags))\n    if verbose:\n        print(""likely tags: %s"" % "","".join(sorted(tags)))\n    for ref in sorted(tags):\n        # sorting will prefer e.g. ""2.0"" over ""2.0rc1""\n        if ref.startswith(tag_prefix):\n            r = ref[len(tag_prefix):]\n            if verbose:\n                print(""picking %s"" % r)\n            return {""version"": r,\n                    ""full-revisionid"": keywords[""full""].strip(),\n                    ""dirty"": False, ""error"": None,\n                    ""date"": date}\n    # no suitable tags, so version is ""0+unknown"", but full hex is still there\n    if verbose:\n        print(""no suitable tags, using unknown + full revision id"")\n    return {""version"": ""0+unknown"",\n            ""full-revisionid"": keywords[""full""].strip(),\n            ""dirty"": False, ""error"": ""no suitable tags"", ""date"": None}\n\n\n@register_vcs_handler(""git"", ""pieces_from_vcs"")\ndef git_pieces_from_vcs(tag_prefix, root, verbose, run_command=run_command):\n    """"""Get version from \'git describe\' in the root of the source tree.\n\n    This only gets called if the git-archive \'subst\' keywords were *not*\n    expanded, and _version.py hasn\'t already been rewritten with a short\n    version string, meaning we\'re inside a checked out source tree.\n    """"""\n    GITS = [""git""]\n    if sys.platform == ""win32"":\n        GITS = [""git.cmd"", ""git.exe""]\n\n    out, rc = run_command(GITS, [""rev-parse"", ""--git-dir""], cwd=root,\n                          hide_stderr=True)\n    if rc != 0:\n        if verbose:\n            print(""Directory %s not under git control"" % root)\n        raise NotThisMethod(""\'git rev-parse --git-dir\' returned error"")\n\n    # if there is a tag matching tag_prefix, this yields TAG-NUM-gHEX[-dirty]\n    # if there isn\'t one, this yields HEX[-dirty] (no NUM)\n    describe_out, rc = run_command(GITS, [""describe"", ""--tags"", ""--dirty"",\n                                          ""--always"", ""--long"",\n                                          ""--match"", ""%s*"" % tag_prefix],\n                                   cwd=root)\n    # --long was added in git-1.5.5\n    if describe_out is None:\n        raise NotThisMethod(""\'git describe\' failed"")\n    describe_out = describe_out.strip()\n    full_out, rc = run_command(GITS, [""rev-parse"", ""HEAD""], cwd=root)\n    if full_out is None:\n        raise NotThisMethod(""\'git rev-parse\' failed"")\n    full_out = full_out.strip()\n\n    pieces = {}\n    pieces[""long""] = full_out\n    pieces[""short""] = full_out[:7]  # maybe improved later\n    pieces[""error""] = None\n\n    # parse describe_out. It will be like TAG-NUM-gHEX[-dirty] or HEX[-dirty]\n    # TAG might have hyphens.\n    git_describe = describe_out\n\n    # look for -dirty suffix\n    dirty = git_describe.endswith(""-dirty"")\n    pieces[""dirty""] = dirty\n    if dirty:\n        git_describe = git_describe[:git_describe.rindex(""-dirty"")]\n\n    # now we have TAG-NUM-gHEX or HEX\n\n    if ""-"" in git_describe:\n        # TAG-NUM-gHEX\n        mo = re.search(r\'^(.+)-(\\d+)-g([0-9a-f]+)$\', git_describe)\n        if not mo:\n            # unparseable. Maybe git-describe is misbehaving?\n            pieces[""error""] = (""unable to parse git-describe output: \'%s\'""\n                               % describe_out)\n            return pieces\n\n        # tag\n        full_tag = mo.group(1)\n        if not full_tag.startswith(tag_prefix):\n            if verbose:\n                fmt = ""tag \'%s\' doesn\'t start with prefix \'%s\'""\n                print(fmt % (full_tag, tag_prefix))\n            pieces[""error""] = (""tag \'%s\' doesn\'t start with prefix \'%s\'""\n                               % (full_tag, tag_prefix))\n            return pieces\n        pieces[""closest-tag""] = full_tag[len(tag_prefix):]\n\n        # distance: number of commits since tag\n        pieces[""distance""] = int(mo.group(2))\n\n        # commit: short hex revision ID\n        pieces[""short""] = mo.group(3)\n\n    else:\n        # HEX: no tags\n        pieces[""closest-tag""] = None\n        count_out, rc = run_command(GITS, [""rev-list"", ""HEAD"", ""--count""],\n                                    cwd=root)\n        pieces[""distance""] = int(count_out)  # total number of commits\n\n    # commit date: see ISO-8601 comment in git_versions_from_keywords()\n    date = run_command(GITS, [""show"", ""-s"", ""--format=%ci"", ""HEAD""],\n                       cwd=root)[0].strip()\n    pieces[""date""] = date.strip().replace("" "", ""T"", 1).replace("" "", """", 1)\n\n    return pieces\n\n\ndef do_vcs_install(manifest_in, versionfile_source, ipy):\n    """"""Git-specific installation logic for Versioneer.\n\n    For Git, this means creating/changing .gitattributes to mark _version.py\n    for export-subst keyword substitution.\n    """"""\n    GITS = [""git""]\n    if sys.platform == ""win32"":\n        GITS = [""git.cmd"", ""git.exe""]\n    files = [manifest_in, versionfile_source]\n    if ipy:\n        files.append(ipy)\n    try:\n        me = __file__\n        if me.endswith("".pyc"") or me.endswith("".pyo""):\n            me = os.path.splitext(me)[0] + "".py""\n        versioneer_file = os.path.relpath(me)\n    except NameError:\n        versioneer_file = ""versioneer.py""\n    files.append(versioneer_file)\n    present = False\n    try:\n        f = open("".gitattributes"", ""r"")\n        for line in f.readlines():\n            if line.strip().startswith(versionfile_source):\n                if ""export-subst"" in line.strip().split()[1:]:\n                    present = True\n        f.close()\n    except EnvironmentError:\n        pass\n    if not present:\n        f = open("".gitattributes"", ""a+"")\n        f.write(""%s export-subst\\n"" % versionfile_source)\n        f.close()\n        files.append("".gitattributes"")\n    run_command(GITS, [""add"", ""--""] + files)\n\n\ndef versions_from_parentdir(parentdir_prefix, root, verbose):\n    """"""Try to determine the version from the parent directory name.\n\n    Source tarballs conventionally unpack into a directory that includes both\n    the project name and a version string. We will also support searching up\n    two directory levels for an appropriately named parent directory\n    """"""\n    rootdirs = []\n\n    for i in range(3):\n        dirname = os.path.basename(root)\n        if dirname.startswith(parentdir_prefix):\n            return {""version"": dirname[len(parentdir_prefix):],\n                    ""full-revisionid"": None,\n                    ""dirty"": False, ""error"": None, ""date"": None}\n        else:\n            rootdirs.append(root)\n            root = os.path.dirname(root)  # up a level\n\n    if verbose:\n        print(""Tried directories %s but none started with prefix %s"" %\n              (str(rootdirs), parentdir_prefix))\n    raise NotThisMethod(""rootdir doesn\'t start with parentdir_prefix"")\n\n\nSHORT_VERSION_PY = """"""\n# This file was generated by \'versioneer.py\' (0.18) from\n# revision-control system data, or from the parent directory name of an\n# unpacked source archive. Distribution tarballs contain a pre-generated copy\n# of this file.\n\nimport json\n\nversion_json = \'\'\'\n%s\n\'\'\'  # END VERSION_JSON\n\n\ndef get_versions():\n    return json.loads(version_json)\n""""""\n\n\ndef versions_from_file(filename):\n    """"""Try to determine the version from _version.py if present.""""""\n    try:\n        with open(filename) as f:\n            contents = f.read()\n    except EnvironmentError:\n        raise NotThisMethod(""unable to read _version.py"")\n    mo = re.search(r""version_json = \'\'\'\\n(.*)\'\'\'  # END VERSION_JSON"",\n                   contents, re.M | re.S)\n    if not mo:\n        mo = re.search(r""version_json = \'\'\'\\r\\n(.*)\'\'\'  # END VERSION_JSON"",\n                       contents, re.M | re.S)\n    if not mo:\n        raise NotThisMethod(""no version_json in _version.py"")\n    return json.loads(mo.group(1))\n\n\ndef write_to_version_file(filename, versions):\n    """"""Write the given version number to the given _version.py file.""""""\n    os.unlink(filename)\n    contents = json.dumps(versions, sort_keys=True,\n                          indent=1, separators=("","", "": ""))\n    with open(filename, ""w"") as f:\n        f.write(SHORT_VERSION_PY % contents)\n\n    print(""set %s to \'%s\'"" % (filename, versions[""version""]))\n\n\ndef plus_or_dot(pieces):\n    """"""Return a + if we don\'t already have one, else return a .""""""\n    if ""+"" in pieces.get(""closest-tag"", """"):\n        return "".""\n    return ""+""\n\n\ndef render_pep440(pieces):\n    """"""Build up version string, with post-release ""local version identifier"".\n\n    Our goal: TAG[+DISTANCE.gHEX[.dirty]] . Note that if you\n    get a tagged build and then dirty it, you\'ll get TAG+0.gHEX.dirty\n\n    Exceptions:\n    1: no tags. git_describe was just HEX. 0+untagged.DISTANCE.gHEX[.dirty]\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""] or pieces[""dirty""]:\n            rendered += plus_or_dot(pieces)\n            rendered += ""%d.g%s"" % (pieces[""distance""], pieces[""short""])\n            if pieces[""dirty""]:\n                rendered += "".dirty""\n    else:\n        # exception #1\n        rendered = ""0+untagged.%d.g%s"" % (pieces[""distance""],\n                                          pieces[""short""])\n        if pieces[""dirty""]:\n            rendered += "".dirty""\n    return rendered\n\n\ndef render_pep440_pre(pieces):\n    """"""TAG[.post.devDISTANCE] -- No -dirty.\n\n    Exceptions:\n    1: no tags. 0.post.devDISTANCE\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""]:\n            rendered += "".post.dev%d"" % pieces[""distance""]\n    else:\n        # exception #1\n        rendered = ""0.post.dev%d"" % pieces[""distance""]\n    return rendered\n\n\ndef render_pep440_post(pieces):\n    """"""TAG[.postDISTANCE[.dev0]+gHEX] .\n\n    The "".dev0"" means dirty. Note that .dev0 sorts backwards\n    (a dirty tree will appear ""older"" than the corresponding clean one),\n    but you shouldn\'t be releasing software with -dirty anyways.\n\n    Exceptions:\n    1: no tags. 0.postDISTANCE[.dev0]\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""] or pieces[""dirty""]:\n            rendered += "".post%d"" % pieces[""distance""]\n            if pieces[""dirty""]:\n                rendered += "".dev0""\n            rendered += plus_or_dot(pieces)\n            rendered += ""g%s"" % pieces[""short""]\n    else:\n        # exception #1\n        rendered = ""0.post%d"" % pieces[""distance""]\n        if pieces[""dirty""]:\n            rendered += "".dev0""\n        rendered += ""+g%s"" % pieces[""short""]\n    return rendered\n\n\ndef render_pep440_old(pieces):\n    """"""TAG[.postDISTANCE[.dev0]] .\n\n    The "".dev0"" means dirty.\n\n    Eexceptions:\n    1: no tags. 0.postDISTANCE[.dev0]\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""] or pieces[""dirty""]:\n            rendered += "".post%d"" % pieces[""distance""]\n            if pieces[""dirty""]:\n                rendered += "".dev0""\n    else:\n        # exception #1\n        rendered = ""0.post%d"" % pieces[""distance""]\n        if pieces[""dirty""]:\n            rendered += "".dev0""\n    return rendered\n\n\ndef render_git_describe(pieces):\n    """"""TAG[-DISTANCE-gHEX][-dirty].\n\n    Like \'git describe --tags --dirty --always\'.\n\n    Exceptions:\n    1: no tags. HEX[-dirty]  (note: no \'g\' prefix)\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""]:\n            rendered += ""-%d-g%s"" % (pieces[""distance""], pieces[""short""])\n    else:\n        # exception #1\n        rendered = pieces[""short""]\n    if pieces[""dirty""]:\n        rendered += ""-dirty""\n    return rendered\n\n\ndef render_git_describe_long(pieces):\n    """"""TAG-DISTANCE-gHEX[-dirty].\n\n    Like \'git describe --tags --dirty --always -long\'.\n    The distance/hash is unconditional.\n\n    Exceptions:\n    1: no tags. HEX[-dirty]  (note: no \'g\' prefix)\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        rendered += ""-%d-g%s"" % (pieces[""distance""], pieces[""short""])\n    else:\n        # exception #1\n        rendered = pieces[""short""]\n    if pieces[""dirty""]:\n        rendered += ""-dirty""\n    return rendered\n\n\ndef render(pieces, style):\n    """"""Render the given version pieces into the requested style.""""""\n    if pieces[""error""]:\n        return {""version"": ""unknown"",\n                ""full-revisionid"": pieces.get(""long""),\n                ""dirty"": None,\n                ""error"": pieces[""error""],\n                ""date"": None}\n\n    if not style or style == ""default"":\n        style = ""pep440""  # the default\n\n    if style == ""pep440"":\n        rendered = render_pep440(pieces)\n    elif style == ""pep440-pre"":\n        rendered = render_pep440_pre(pieces)\n    elif style == ""pep440-post"":\n        rendered = render_pep440_post(pieces)\n    elif style == ""pep440-old"":\n        rendered = render_pep440_old(pieces)\n    elif style == ""git-describe"":\n        rendered = render_git_describe(pieces)\n    elif style == ""git-describe-long"":\n        rendered = render_git_describe_long(pieces)\n    else:\n        raise ValueError(""unknown style \'%s\'"" % style)\n\n    return {""version"": rendered, ""full-revisionid"": pieces[""long""],\n            ""dirty"": pieces[""dirty""], ""error"": None,\n            ""date"": pieces.get(""date"")}\n\n\nclass VersioneerBadRootError(Exception):\n    """"""The project root directory is unknown or missing key files.""""""\n\n\ndef get_versions(verbose=False):\n    """"""Get the project version from whatever source is available.\n\n    Returns dict with two keys: \'version\' and \'full\'.\n    """"""\n    if ""versioneer"" in sys.modules:\n        # see the discussion in cmdclass.py:get_cmdclass()\n        del sys.modules[""versioneer""]\n\n    root = get_root()\n    cfg = get_config_from_root(root)\n\n    assert cfg.VCS is not None, ""please set [versioneer]VCS= in setup.cfg""\n    handlers = HANDLERS.get(cfg.VCS)\n    assert handlers, ""unrecognized VCS \'%s\'"" % cfg.VCS\n    verbose = verbose or cfg.verbose\n    assert cfg.versionfile_source is not None, \\\n        ""please set versioneer.versionfile_source""\n    assert cfg.tag_prefix is not None, ""please set versioneer.tag_prefix""\n\n    versionfile_abs = os.path.join(root, cfg.versionfile_source)\n\n    # extract version from first of: _version.py, VCS command (e.g. \'git\n    # describe\'), parentdir. This is meant to work for developers using a\n    # source checkout, for users of a tarball created by \'setup.py sdist\',\n    # and for users of a tarball/zipball created by \'git archive\' or github\'s\n    # download-from-tag feature or the equivalent in other VCSes.\n\n    get_keywords_f = handlers.get(""get_keywords"")\n    from_keywords_f = handlers.get(""keywords"")\n    if get_keywords_f and from_keywords_f:\n        try:\n            keywords = get_keywords_f(versionfile_abs)\n            ver = from_keywords_f(keywords, cfg.tag_prefix, verbose)\n            if verbose:\n                print(""got version from expanded keyword %s"" % ver)\n            return ver\n        except NotThisMethod:\n            pass\n\n    try:\n        ver = versions_from_file(versionfile_abs)\n        if verbose:\n            print(""got version from file %s %s"" % (versionfile_abs, ver))\n        return ver\n    except NotThisMethod:\n        pass\n\n    from_vcs_f = handlers.get(""pieces_from_vcs"")\n    if from_vcs_f:\n        try:\n            pieces = from_vcs_f(cfg.tag_prefix, root, verbose)\n            ver = render(pieces, cfg.style)\n            if verbose:\n                print(""got version from VCS %s"" % ver)\n            return ver\n        except NotThisMethod:\n            pass\n\n    try:\n        if cfg.parentdir_prefix:\n            ver = versions_from_parentdir(cfg.parentdir_prefix, root, verbose)\n            if verbose:\n                print(""got version from parentdir %s"" % ver)\n            return ver\n    except NotThisMethod:\n        pass\n\n    if verbose:\n        print(""unable to compute version"")\n\n    return {""version"": ""0+unknown"", ""full-revisionid"": None,\n            ""dirty"": None, ""error"": ""unable to compute version"",\n            ""date"": None}\n\n\ndef get_version():\n    """"""Get the short version string for this project.""""""\n    return get_versions()[""version""]\n\n\ndef get_cmdclass():\n    """"""Get the custom setuptools/distutils subclasses used by Versioneer.""""""\n    if ""versioneer"" in sys.modules:\n        del sys.modules[""versioneer""]\n        # this fixes the ""python setup.py develop"" case (also \'install\' and\n        # \'easy_install .\'), in which subdependencies of the main project are\n        # built (using setup.py bdist_egg) in the same python process. Assume\n        # a main project A and a dependency B, which use different versions\n        # of Versioneer. A\'s setup.py imports A\'s Versioneer, leaving it in\n        # sys.modules by the time B\'s setup.py is executed, causing B to run\n        # with the wrong versioneer. Setuptools wraps the sub-dep builds in a\n        # sandbox that restores sys.modules to it\'s pre-build state, so the\n        # parent is protected against the child\'s ""import versioneer"". By\n        # removing ourselves from sys.modules here, before the child build\n        # happens, we protect the child from the parent\'s versioneer too.\n        # Also see https://github.com/warner/python-versioneer/issues/52\n\n    cmds = {}\n\n    # we add ""version"" to both distutils and setuptools\n    from distutils.core import Command\n\n    class cmd_version(Command):\n        description = ""report generated version string""\n        user_options = []\n        boolean_options = []\n\n        def initialize_options(self):\n            pass\n\n        def finalize_options(self):\n            pass\n\n        def run(self):\n            vers = get_versions(verbose=True)\n            print(""Version: %s"" % vers[""version""])\n            print("" full-revisionid: %s"" % vers.get(""full-revisionid""))\n            print("" dirty: %s"" % vers.get(""dirty""))\n            print("" date: %s"" % vers.get(""date""))\n            if vers[""error""]:\n                print("" error: %s"" % vers[""error""])\n    cmds[""version""] = cmd_version\n\n    # we override ""build_py"" in both distutils and setuptools\n    #\n    # most invocation pathways end up running build_py:\n    #  distutils/build -> build_py\n    #  distutils/install -> distutils/build ->..\n    #  setuptools/bdist_wheel -> distutils/install ->..\n    #  setuptools/bdist_egg -> distutils/install_lib -> build_py\n    #  setuptools/install -> bdist_egg ->..\n    #  setuptools/develop -> ?\n    #  pip install:\n    #   copies source tree to a tempdir before running egg_info/etc\n    #   if .git isn\'t copied too, \'git describe\' will fail\n    #   then does setup.py bdist_wheel, or sometimes setup.py install\n    #  setup.py egg_info -> ?\n\n    # we override different ""build_py"" commands for both environments\n    if ""setuptools"" in sys.modules:\n        from setuptools.command.build_py import build_py as _build_py\n    else:\n        from distutils.command.build_py import build_py as _build_py\n\n    class cmd_build_py(_build_py):\n        def run(self):\n            root = get_root()\n            cfg = get_config_from_root(root)\n            versions = get_versions()\n            _build_py.run(self)\n            # now locate _version.py in the new build/ directory and replace\n            # it with an updated value\n            if cfg.versionfile_build:\n                target_versionfile = os.path.join(self.build_lib,\n                                                  cfg.versionfile_build)\n                print(""UPDATING %s"" % target_versionfile)\n                write_to_version_file(target_versionfile, versions)\n    cmds[""build_py""] = cmd_build_py\n\n    if ""cx_Freeze"" in sys.modules:  # cx_freeze enabled?\n        from cx_Freeze.dist import build_exe as _build_exe\n        # nczeczulin reports that py2exe won\'t like the pep440-style string\n        # as FILEVERSION, but it can be used for PRODUCTVERSION, e.g.\n        # setup(console=[{\n        #   ""version"": versioneer.get_version().split(""+"", 1)[0], # FILEVERSION\n        #   ""product_version"": versioneer.get_version(),\n        #   ...\n\n        class cmd_build_exe(_build_exe):\n            def run(self):\n                root = get_root()\n                cfg = get_config_from_root(root)\n                versions = get_versions()\n                target_versionfile = cfg.versionfile_source\n                print(""UPDATING %s"" % target_versionfile)\n                write_to_version_file(target_versionfile, versions)\n\n                _build_exe.run(self)\n                os.unlink(target_versionfile)\n                with open(cfg.versionfile_source, ""w"") as f:\n                    LONG = LONG_VERSION_PY[cfg.VCS]\n                    f.write(LONG %\n                            {""DOLLAR"": ""$"",\n                             ""STYLE"": cfg.style,\n                             ""TAG_PREFIX"": cfg.tag_prefix,\n                             ""PARENTDIR_PREFIX"": cfg.parentdir_prefix,\n                             ""VERSIONFILE_SOURCE"": cfg.versionfile_source,\n                             })\n        cmds[""build_exe""] = cmd_build_exe\n        del cmds[""build_py""]\n\n    if \'py2exe\' in sys.modules:  # py2exe enabled?\n        try:\n            from py2exe.distutils_buildexe import py2exe as _py2exe  # py3\n        except ImportError:\n            from py2exe.build_exe import py2exe as _py2exe  # py2\n\n        class cmd_py2exe(_py2exe):\n            def run(self):\n                root = get_root()\n                cfg = get_config_from_root(root)\n                versions = get_versions()\n                target_versionfile = cfg.versionfile_source\n                print(""UPDATING %s"" % target_versionfile)\n                write_to_version_file(target_versionfile, versions)\n\n                _py2exe.run(self)\n                os.unlink(target_versionfile)\n                with open(cfg.versionfile_source, ""w"") as f:\n                    LONG = LONG_VERSION_PY[cfg.VCS]\n                    f.write(LONG %\n                            {""DOLLAR"": ""$"",\n                             ""STYLE"": cfg.style,\n                             ""TAG_PREFIX"": cfg.tag_prefix,\n                             ""PARENTDIR_PREFIX"": cfg.parentdir_prefix,\n                             ""VERSIONFILE_SOURCE"": cfg.versionfile_source,\n                             })\n        cmds[""py2exe""] = cmd_py2exe\n\n    # we override different ""sdist"" commands for both environments\n    if ""setuptools"" in sys.modules:\n        from setuptools.command.sdist import sdist as _sdist\n    else:\n        from distutils.command.sdist import sdist as _sdist\n\n    class cmd_sdist(_sdist):\n        def run(self):\n            versions = get_versions()\n            self._versioneer_generated_versions = versions\n            # unless we update this, the command will keep using the old\n            # version\n            self.distribution.metadata.version = versions[""version""]\n            return _sdist.run(self)\n\n        def make_release_tree(self, base_dir, files):\n            root = get_root()\n            cfg = get_config_from_root(root)\n            _sdist.make_release_tree(self, base_dir, files)\n            # now locate _version.py in the new base_dir directory\n            # (remembering that it may be a hardlink) and replace it with an\n            # updated value\n            target_versionfile = os.path.join(base_dir, cfg.versionfile_source)\n            print(""UPDATING %s"" % target_versionfile)\n            write_to_version_file(target_versionfile,\n                                  self._versioneer_generated_versions)\n    cmds[""sdist""] = cmd_sdist\n\n    return cmds\n\n\nCONFIG_ERROR = """"""\nsetup.cfg is missing the necessary Versioneer configuration. You need\na section like:\n\n [versioneer]\n VCS = git\n style = pep440\n versionfile_source = src/myproject/_version.py\n versionfile_build = myproject/_version.py\n tag_prefix =\n parentdir_prefix = myproject-\n\nYou will also need to edit your setup.py to use the results:\n\n import versioneer\n setup(version=versioneer.get_version(),\n       cmdclass=versioneer.get_cmdclass(), ...)\n\nPlease read the docstring in ./versioneer.py for configuration instructions,\nedit setup.cfg, and re-run the installer or \'python versioneer.py setup\'.\n""""""\n\nSAMPLE_CONFIG = """"""\n# See the docstring in versioneer.py for instructions. Note that you must\n# re-run \'versioneer.py setup\' after changing this section, and commit the\n# resulting files.\n\n[versioneer]\n#VCS = git\n#style = pep440\n#versionfile_source =\n#versionfile_build =\n#tag_prefix =\n#parentdir_prefix =\n\n""""""\n\nINIT_PY_SNIPPET = """"""\nfrom ._version import get_versions\n__version__ = get_versions()[\'version\']\ndel get_versions\n""""""\n\n\ndef do_setup():\n    """"""Main VCS-independent setup function for installing Versioneer.""""""\n    root = get_root()\n    try:\n        cfg = get_config_from_root(root)\n    except (EnvironmentError, configparser.NoSectionError,\n            configparser.NoOptionError) as e:\n        if isinstance(e, (EnvironmentError, configparser.NoSectionError)):\n            print(""Adding sample versioneer config to setup.cfg"",\n                  file=sys.stderr)\n            with open(os.path.join(root, ""setup.cfg""), ""a"") as f:\n                f.write(SAMPLE_CONFIG)\n        print(CONFIG_ERROR, file=sys.stderr)\n        return 1\n\n    print("" creating %s"" % cfg.versionfile_source)\n    with open(cfg.versionfile_source, ""w"") as f:\n        LONG = LONG_VERSION_PY[cfg.VCS]\n        f.write(LONG % {""DOLLAR"": ""$"",\n                        ""STYLE"": cfg.style,\n                        ""TAG_PREFIX"": cfg.tag_prefix,\n                        ""PARENTDIR_PREFIX"": cfg.parentdir_prefix,\n                        ""VERSIONFILE_SOURCE"": cfg.versionfile_source,\n                        })\n\n    ipy = os.path.join(os.path.dirname(cfg.versionfile_source),\n                       ""__init__.py"")\n    if os.path.exists(ipy):\n        try:\n            with open(ipy, ""r"") as f:\n                old = f.read()\n        except EnvironmentError:\n            old = """"\n        if INIT_PY_SNIPPET not in old:\n            print("" appending to %s"" % ipy)\n            with open(ipy, ""a"") as f:\n                f.write(INIT_PY_SNIPPET)\n        else:\n            print("" %s unmodified"" % ipy)\n    else:\n        print("" %s doesn\'t exist, ok"" % ipy)\n        ipy = None\n\n    # Make sure both the top-level ""versioneer.py"" and versionfile_source\n    # (PKG/_version.py, used by runtime code) are in MANIFEST.in, so\n    # they\'ll be copied into source distributions. Pip won\'t be able to\n    # install the package without this.\n    manifest_in = os.path.join(root, ""MANIFEST.in"")\n    simple_includes = set()\n    try:\n        with open(manifest_in, ""r"") as f:\n            for line in f:\n                if line.startswith(""include ""):\n                    for include in line.split()[1:]:\n                        simple_includes.add(include)\n    except EnvironmentError:\n        pass\n    # That doesn\'t cover everything MANIFEST.in can do\n    # (http://docs.python.org/2/distutils/sourcedist.html#commands), so\n    # it might give some false negatives. Appending redundant \'include\'\n    # lines is safe, though.\n    if ""versioneer.py"" not in simple_includes:\n        print("" appending \'versioneer.py\' to MANIFEST.in"")\n        with open(manifest_in, ""a"") as f:\n            f.write(""include versioneer.py\\n"")\n    else:\n        print("" \'versioneer.py\' already in MANIFEST.in"")\n    if cfg.versionfile_source not in simple_includes:\n        print("" appending versionfile_source (\'%s\') to MANIFEST.in"" %\n              cfg.versionfile_source)\n        with open(manifest_in, ""a"") as f:\n            f.write(""include %s\\n"" % cfg.versionfile_source)\n    else:\n        print("" versionfile_source already in MANIFEST.in"")\n\n    # Make VCS-specific changes. For git, this means creating/changing\n    # .gitattributes to mark _version.py for export-subst keyword\n    # substitution.\n    do_vcs_install(manifest_in, cfg.versionfile_source, ipy)\n    return 0\n\n\ndef scan_setup_py():\n    """"""Validate the contents of setup.py against Versioneer\'s expectations.""""""\n    found = set()\n    setters = False\n    errors = 0\n    with open(""setup.py"", ""r"") as f:\n        for line in f.readlines():\n            if ""import versioneer"" in line:\n                found.add(""import"")\n            if ""versioneer.get_cmdclass()"" in line:\n                found.add(""cmdclass"")\n            if ""versioneer.get_version()"" in line:\n                found.add(""get_version"")\n            if ""versioneer.VCS"" in line:\n                setters = True\n            if ""versioneer.versionfile_source"" in line:\n                setters = True\n    if len(found) != 3:\n        print("""")\n        print(""Your setup.py appears to be missing some important items"")\n        print(""(but I might be wrong). Please make sure it has something"")\n        print(""roughly like the following:"")\n        print("""")\n        print("" import versioneer"")\n        print("" setup( version=versioneer.get_version(),"")\n        print(""        cmdclass=versioneer.get_cmdclass(),  ...)"")\n        print("""")\n        errors += 1\n    if setters:\n        print(""You should remove lines like \'versioneer.VCS = \' and"")\n        print(""\'versioneer.versionfile_source = \' . This configuration"")\n        print(""now lives in setup.cfg, and should be removed from setup.py"")\n        print("""")\n        errors += 1\n    return errors\n\n\nif __name__ == ""__main__"":\n    cmd = sys.argv[1]\n    if cmd == ""setup"":\n        errors = do_setup()\n        errors += scan_setup_py()\n        if errors:\n            sys.exit(1)\n'"
numba_scipy/__init__.py,0,"b""\nfrom ._version import get_versions\n__version__ = get_versions()['version']\ndel get_versions\n\n\ndef _init_extension():\n    '''Register SciPy functions with Numba.\n\n    This entry_point is called by Numba when it initializes.\n    '''\n    from . import special\n"""
numba_scipy/_version.py,0,"b'\n# This file helps to compute a version number in source trees obtained from\n# git-archive tarball (such as those provided by githubs download-from-tag\n# feature). Distribution tarballs (built by setup.py sdist) and build\n# directories (produced by setup.py build) will contain a much shorter file\n# that just contains the computed version number.\n\n# This file is released into the public domain. Generated by\n# versioneer-0.18 (https://github.com/warner/python-versioneer)\n\n""""""Git implementation of _version.py.""""""\n\nimport errno\nimport os\nimport re\nimport subprocess\nimport sys\n\n\ndef get_keywords():\n    """"""Get the keywords needed to look up the version information.""""""\n    # these strings will be replaced by git during git-archive.\n    # setup.py/versioneer.py will grep for the variable names, so they must\n    # each be defined on a line of their own. _version.py will just call\n    # get_keywords().\n    git_refnames = ""$Format:%d$""\n    git_full = ""$Format:%H$""\n    git_date = ""$Format:%ci$""\n    keywords = {""refnames"": git_refnames, ""full"": git_full, ""date"": git_date}\n    return keywords\n\n\nclass VersioneerConfig:\n    """"""Container for Versioneer configuration parameters.""""""\n\n\ndef get_config():\n    """"""Create, populate and return the VersioneerConfig() object.""""""\n    # these strings are filled in when \'setup.py versioneer\' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = ""git""\n    cfg.style = ""pep440""\n    cfg.tag_prefix = """"\n    cfg.parentdir_prefix = ""None""\n    cfg.versionfile_source = ""numba_scipy/_version.py""\n    cfg.verbose = False\n    return cfg\n\n\nclass NotThisMethod(Exception):\n    """"""Exception raised if a method is not valid for the current scenario.""""""\n\n\nLONG_VERSION_PY = {}\nHANDLERS = {}\n\n\ndef register_vcs_handler(vcs, method):  # decorator\n    """"""Decorator to mark a method as the handler for a particular VCS.""""""\n    def decorate(f):\n        """"""Store f in HANDLERS[vcs][method].""""""\n        if vcs not in HANDLERS:\n            HANDLERS[vcs] = {}\n        HANDLERS[vcs][method] = f\n        return f\n    return decorate\n\n\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False,\n                env=None):\n    """"""Call the given command(s).""""""\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(""unable to run %s"" % dispcmd)\n                print(e)\n            return None, None\n    else:\n        if verbose:\n            print(""unable to find command, tried %s"" % (commands,))\n        return None, None\n    stdout = p.communicate()[0].strip()\n    if sys.version_info[0] >= 3:\n        stdout = stdout.decode()\n    if p.returncode != 0:\n        if verbose:\n            print(""unable to run %s (error)"" % dispcmd)\n            print(""stdout was %s"" % stdout)\n        return None, p.returncode\n    return stdout, p.returncode\n\n\ndef versions_from_parentdir(parentdir_prefix, root, verbose):\n    """"""Try to determine the version from the parent directory name.\n\n    Source tarballs conventionally unpack into a directory that includes both\n    the project name and a version string. We will also support searching up\n    two directory levels for an appropriately named parent directory\n    """"""\n    rootdirs = []\n\n    for i in range(3):\n        dirname = os.path.basename(root)\n        if dirname.startswith(parentdir_prefix):\n            return {""version"": dirname[len(parentdir_prefix):],\n                    ""full-revisionid"": None,\n                    ""dirty"": False, ""error"": None, ""date"": None}\n        else:\n            rootdirs.append(root)\n            root = os.path.dirname(root)  # up a level\n\n    if verbose:\n        print(""Tried directories %s but none started with prefix %s"" %\n              (str(rootdirs), parentdir_prefix))\n    raise NotThisMethod(""rootdir doesn\'t start with parentdir_prefix"")\n\n\n@register_vcs_handler(""git"", ""get_keywords"")\ndef git_get_keywords(versionfile_abs):\n    """"""Extract version information from the given file.""""""\n    # the code embedded in _version.py can just fetch the value of these\n    # keywords. When used from setup.py, we don\'t want to import _version.py,\n    # so we do it with a regexp instead. This function is not used from\n    # _version.py.\n    keywords = {}\n    try:\n        f = open(versionfile_abs, ""r"")\n        for line in f.readlines():\n            if line.strip().startswith(""git_refnames =""):\n                mo = re.search(r\'=\\s*""(.*)""\', line)\n                if mo:\n                    keywords[""refnames""] = mo.group(1)\n            if line.strip().startswith(""git_full =""):\n                mo = re.search(r\'=\\s*""(.*)""\', line)\n                if mo:\n                    keywords[""full""] = mo.group(1)\n            if line.strip().startswith(""git_date =""):\n                mo = re.search(r\'=\\s*""(.*)""\', line)\n                if mo:\n                    keywords[""date""] = mo.group(1)\n        f.close()\n    except EnvironmentError:\n        pass\n    return keywords\n\n\n@register_vcs_handler(""git"", ""keywords"")\ndef git_versions_from_keywords(keywords, tag_prefix, verbose):\n    """"""Get version information from git keywords.""""""\n    if not keywords:\n        raise NotThisMethod(""no keywords at all, weird"")\n    date = keywords.get(""date"")\n    if date is not None:\n        # git-2.2.0 added ""%cI"", which expands to an ISO-8601 -compliant\n        # datestamp. However we prefer ""%ci"" (which expands to an ""ISO-8601\n        # -like"" string, which we must then edit to make compliant), because\n        # it\'s been around since git-1.5.3, and it\'s too difficult to\n        # discover which version we\'re using, or to work around using an\n        # older one.\n        date = date.strip().replace("" "", ""T"", 1).replace("" "", """", 1)\n    refnames = keywords[""refnames""].strip()\n    if refnames.startswith(""$Format""):\n        if verbose:\n            print(""keywords are unexpanded, not using"")\n        raise NotThisMethod(""unexpanded keywords, not a git-archive tarball"")\n    refs = set([r.strip() for r in refnames.strip(""()"").split("","")])\n    # starting in git-1.8.3, tags are listed as ""tag: foo-1.0"" instead of\n    # just ""foo-1.0"". If we see a ""tag: "" prefix, prefer those.\n    TAG = ""tag: ""\n    tags = set([r[len(TAG):] for r in refs if r.startswith(TAG)])\n    if not tags:\n        # Either we\'re using git < 1.8.3, or there really are no tags. We use\n        # a heuristic: assume all version tags have a digit. The old git %d\n        # expansion behaves like git log --decorate=short and strips out the\n        # refs/heads/ and refs/tags/ prefixes that would let us distinguish\n        # between branches and tags. By ignoring refnames without digits, we\n        # filter out many common branch names like ""release"" and\n        # ""stabilization"", as well as ""HEAD"" and ""master"".\n        tags = set([r for r in refs if re.search(r\'\\d\', r)])\n        if verbose:\n            print(""discarding \'%s\', no digits"" % "","".join(refs - tags))\n    if verbose:\n        print(""likely tags: %s"" % "","".join(sorted(tags)))\n    for ref in sorted(tags):\n        # sorting will prefer e.g. ""2.0"" over ""2.0rc1""\n        if ref.startswith(tag_prefix):\n            r = ref[len(tag_prefix):]\n            if verbose:\n                print(""picking %s"" % r)\n            return {""version"": r,\n                    ""full-revisionid"": keywords[""full""].strip(),\n                    ""dirty"": False, ""error"": None,\n                    ""date"": date}\n    # no suitable tags, so version is ""0+unknown"", but full hex is still there\n    if verbose:\n        print(""no suitable tags, using unknown + full revision id"")\n    return {""version"": ""0+unknown"",\n            ""full-revisionid"": keywords[""full""].strip(),\n            ""dirty"": False, ""error"": ""no suitable tags"", ""date"": None}\n\n\n@register_vcs_handler(""git"", ""pieces_from_vcs"")\ndef git_pieces_from_vcs(tag_prefix, root, verbose, run_command=run_command):\n    """"""Get version from \'git describe\' in the root of the source tree.\n\n    This only gets called if the git-archive \'subst\' keywords were *not*\n    expanded, and _version.py hasn\'t already been rewritten with a short\n    version string, meaning we\'re inside a checked out source tree.\n    """"""\n    GITS = [""git""]\n    if sys.platform == ""win32"":\n        GITS = [""git.cmd"", ""git.exe""]\n\n    out, rc = run_command(GITS, [""rev-parse"", ""--git-dir""], cwd=root,\n                          hide_stderr=True)\n    if rc != 0:\n        if verbose:\n            print(""Directory %s not under git control"" % root)\n        raise NotThisMethod(""\'git rev-parse --git-dir\' returned error"")\n\n    # if there is a tag matching tag_prefix, this yields TAG-NUM-gHEX[-dirty]\n    # if there isn\'t one, this yields HEX[-dirty] (no NUM)\n    describe_out, rc = run_command(GITS, [""describe"", ""--tags"", ""--dirty"",\n                                          ""--always"", ""--long"",\n                                          ""--match"", ""%s*"" % tag_prefix],\n                                   cwd=root)\n    # --long was added in git-1.5.5\n    if describe_out is None:\n        raise NotThisMethod(""\'git describe\' failed"")\n    describe_out = describe_out.strip()\n    full_out, rc = run_command(GITS, [""rev-parse"", ""HEAD""], cwd=root)\n    if full_out is None:\n        raise NotThisMethod(""\'git rev-parse\' failed"")\n    full_out = full_out.strip()\n\n    pieces = {}\n    pieces[""long""] = full_out\n    pieces[""short""] = full_out[:7]  # maybe improved later\n    pieces[""error""] = None\n\n    # parse describe_out. It will be like TAG-NUM-gHEX[-dirty] or HEX[-dirty]\n    # TAG might have hyphens.\n    git_describe = describe_out\n\n    # look for -dirty suffix\n    dirty = git_describe.endswith(""-dirty"")\n    pieces[""dirty""] = dirty\n    if dirty:\n        git_describe = git_describe[:git_describe.rindex(""-dirty"")]\n\n    # now we have TAG-NUM-gHEX or HEX\n\n    if ""-"" in git_describe:\n        # TAG-NUM-gHEX\n        mo = re.search(r\'^(.+)-(\\d+)-g([0-9a-f]+)$\', git_describe)\n        if not mo:\n            # unparseable. Maybe git-describe is misbehaving?\n            pieces[""error""] = (""unable to parse git-describe output: \'%s\'""\n                               % describe_out)\n            return pieces\n\n        # tag\n        full_tag = mo.group(1)\n        if not full_tag.startswith(tag_prefix):\n            if verbose:\n                fmt = ""tag \'%s\' doesn\'t start with prefix \'%s\'""\n                print(fmt % (full_tag, tag_prefix))\n            pieces[""error""] = (""tag \'%s\' doesn\'t start with prefix \'%s\'""\n                               % (full_tag, tag_prefix))\n            return pieces\n        pieces[""closest-tag""] = full_tag[len(tag_prefix):]\n\n        # distance: number of commits since tag\n        pieces[""distance""] = int(mo.group(2))\n\n        # commit: short hex revision ID\n        pieces[""short""] = mo.group(3)\n\n    else:\n        # HEX: no tags\n        pieces[""closest-tag""] = None\n        count_out, rc = run_command(GITS, [""rev-list"", ""HEAD"", ""--count""],\n                                    cwd=root)\n        pieces[""distance""] = int(count_out)  # total number of commits\n\n    # commit date: see ISO-8601 comment in git_versions_from_keywords()\n    date = run_command(GITS, [""show"", ""-s"", ""--format=%ci"", ""HEAD""],\n                       cwd=root)[0].strip()\n    pieces[""date""] = date.strip().replace("" "", ""T"", 1).replace("" "", """", 1)\n\n    return pieces\n\n\ndef plus_or_dot(pieces):\n    """"""Return a + if we don\'t already have one, else return a .""""""\n    if ""+"" in pieces.get(""closest-tag"", """"):\n        return "".""\n    return ""+""\n\n\ndef render_pep440(pieces):\n    """"""Build up version string, with post-release ""local version identifier"".\n\n    Our goal: TAG[+DISTANCE.gHEX[.dirty]] . Note that if you\n    get a tagged build and then dirty it, you\'ll get TAG+0.gHEX.dirty\n\n    Exceptions:\n    1: no tags. git_describe was just HEX. 0+untagged.DISTANCE.gHEX[.dirty]\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""] or pieces[""dirty""]:\n            rendered += plus_or_dot(pieces)\n            rendered += ""%d.g%s"" % (pieces[""distance""], pieces[""short""])\n            if pieces[""dirty""]:\n                rendered += "".dirty""\n    else:\n        # exception #1\n        rendered = ""0+untagged.%d.g%s"" % (pieces[""distance""],\n                                          pieces[""short""])\n        if pieces[""dirty""]:\n            rendered += "".dirty""\n    return rendered\n\n\ndef render_pep440_pre(pieces):\n    """"""TAG[.post.devDISTANCE] -- No -dirty.\n\n    Exceptions:\n    1: no tags. 0.post.devDISTANCE\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""]:\n            rendered += "".post.dev%d"" % pieces[""distance""]\n    else:\n        # exception #1\n        rendered = ""0.post.dev%d"" % pieces[""distance""]\n    return rendered\n\n\ndef render_pep440_post(pieces):\n    """"""TAG[.postDISTANCE[.dev0]+gHEX] .\n\n    The "".dev0"" means dirty. Note that .dev0 sorts backwards\n    (a dirty tree will appear ""older"" than the corresponding clean one),\n    but you shouldn\'t be releasing software with -dirty anyways.\n\n    Exceptions:\n    1: no tags. 0.postDISTANCE[.dev0]\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""] or pieces[""dirty""]:\n            rendered += "".post%d"" % pieces[""distance""]\n            if pieces[""dirty""]:\n                rendered += "".dev0""\n            rendered += plus_or_dot(pieces)\n            rendered += ""g%s"" % pieces[""short""]\n    else:\n        # exception #1\n        rendered = ""0.post%d"" % pieces[""distance""]\n        if pieces[""dirty""]:\n            rendered += "".dev0""\n        rendered += ""+g%s"" % pieces[""short""]\n    return rendered\n\n\ndef render_pep440_old(pieces):\n    """"""TAG[.postDISTANCE[.dev0]] .\n\n    The "".dev0"" means dirty.\n\n    Eexceptions:\n    1: no tags. 0.postDISTANCE[.dev0]\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""] or pieces[""dirty""]:\n            rendered += "".post%d"" % pieces[""distance""]\n            if pieces[""dirty""]:\n                rendered += "".dev0""\n    else:\n        # exception #1\n        rendered = ""0.post%d"" % pieces[""distance""]\n        if pieces[""dirty""]:\n            rendered += "".dev0""\n    return rendered\n\n\ndef render_git_describe(pieces):\n    """"""TAG[-DISTANCE-gHEX][-dirty].\n\n    Like \'git describe --tags --dirty --always\'.\n\n    Exceptions:\n    1: no tags. HEX[-dirty]  (note: no \'g\' prefix)\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        if pieces[""distance""]:\n            rendered += ""-%d-g%s"" % (pieces[""distance""], pieces[""short""])\n    else:\n        # exception #1\n        rendered = pieces[""short""]\n    if pieces[""dirty""]:\n        rendered += ""-dirty""\n    return rendered\n\n\ndef render_git_describe_long(pieces):\n    """"""TAG-DISTANCE-gHEX[-dirty].\n\n    Like \'git describe --tags --dirty --always -long\'.\n    The distance/hash is unconditional.\n\n    Exceptions:\n    1: no tags. HEX[-dirty]  (note: no \'g\' prefix)\n    """"""\n    if pieces[""closest-tag""]:\n        rendered = pieces[""closest-tag""]\n        rendered += ""-%d-g%s"" % (pieces[""distance""], pieces[""short""])\n    else:\n        # exception #1\n        rendered = pieces[""short""]\n    if pieces[""dirty""]:\n        rendered += ""-dirty""\n    return rendered\n\n\ndef render(pieces, style):\n    """"""Render the given version pieces into the requested style.""""""\n    if pieces[""error""]:\n        return {""version"": ""unknown"",\n                ""full-revisionid"": pieces.get(""long""),\n                ""dirty"": None,\n                ""error"": pieces[""error""],\n                ""date"": None}\n\n    if not style or style == ""default"":\n        style = ""pep440""  # the default\n\n    if style == ""pep440"":\n        rendered = render_pep440(pieces)\n    elif style == ""pep440-pre"":\n        rendered = render_pep440_pre(pieces)\n    elif style == ""pep440-post"":\n        rendered = render_pep440_post(pieces)\n    elif style == ""pep440-old"":\n        rendered = render_pep440_old(pieces)\n    elif style == ""git-describe"":\n        rendered = render_git_describe(pieces)\n    elif style == ""git-describe-long"":\n        rendered = render_git_describe_long(pieces)\n    else:\n        raise ValueError(""unknown style \'%s\'"" % style)\n\n    return {""version"": rendered, ""full-revisionid"": pieces[""long""],\n            ""dirty"": pieces[""dirty""], ""error"": None,\n            ""date"": pieces.get(""date"")}\n\n\ndef get_versions():\n    """"""Get version information or return default if unable to do so.""""""\n    # I am in _version.py, which lives at ROOT/VERSIONFILE_SOURCE. If we have\n    # __file__, we can work backwards from there to the root. Some\n    # py2exe/bbfreeze/non-CPython implementations don\'t do __file__, in which\n    # case we can only use expanded keywords.\n\n    cfg = get_config()\n    verbose = cfg.verbose\n\n    try:\n        return git_versions_from_keywords(get_keywords(), cfg.tag_prefix,\n                                          verbose)\n    except NotThisMethod:\n        pass\n\n    try:\n        root = os.path.realpath(__file__)\n        # versionfile_source is the relative path from the top of the source\n        # tree (where the .git directory might live) to this file. Invert\n        # this to find the root from __file__.\n        for i in cfg.versionfile_source.split(\'/\'):\n            root = os.path.dirname(root)\n    except NameError:\n        return {""version"": ""0+unknown"", ""full-revisionid"": None,\n                ""dirty"": None,\n                ""error"": ""unable to find root of source tree"",\n                ""date"": None}\n\n    try:\n        pieces = git_pieces_from_vcs(cfg.tag_prefix, root, verbose)\n        return render(pieces, cfg.style)\n    except NotThisMethod:\n        pass\n\n    try:\n        if cfg.parentdir_prefix:\n            return versions_from_parentdir(cfg.parentdir_prefix, root, verbose)\n    except NotThisMethod:\n        pass\n\n    return {""version"": ""0+unknown"", ""full-revisionid"": None,\n            ""dirty"": None,\n            ""error"": ""unable to compute version"", ""date"": None}\n'"
scripts/generate_special_function_declarations.py,0,"b'""""""Generate a list of function pointers to special function kernels.\n\nThis creates a file `special/signatures.py` that contains two things:\n\n(1) A dictionary mapping a function name and Numba types to a function\n    pointer for that specialization. The function pointer is grabbed\n    from `cython_special.__pyx_capi__`.\n(2) A dictionary mapping a function name to specializations of that\n    function.\n\nWhen `numba_special.special` is imported the dictionary (2) is\niterated over and used to generate an overload for each function. When\ndispatching the overload iterates over all specializations trying to\nfind a match. If it finds one it gets the corresponding kernel by\nusing the dictionary (1).\n\n""""""\nimport os\nimport re\nimport collections\n\nimport scipy.special.cython_special as cysc\n\nSPECIAL_DIR = os.path.join(\n    os.path.abspath(os.path.dirname(__file__)),\n    \'..\',\n    \'numba_scipy\',\n    \'special\'\n)\n\nDOCS_DIR = os.path.join(\n    os.path.abspath(os.path.dirname(__file__)),\n    \'..\', \'docs\', \'source\', \'reference\'\n)\n\nSIGNATURES_TEMPLATE = \'\'\'\\\n""""""THIS FILE IS AUTOMATICALLY GENERATED! DO NOT EDIT IT BY HAND!\n\nIf you want to regenerate this file, run the script\n`scripts/generate_special_function_declarations.py`\n\n""""""\nimport ctypes\n\nimport numba\nfrom numba.extending import get_cython_function_address\n\nname_to_numba_signatures = {{\n    {NAME_TO_NUMBA_SIGNATURES}\n}}\n\nname_and_types_to_pointer = {{\n    {NAME_AND_TYPES_TO_POINTER}\n}}\n\'\'\'\n\nDOCS_TEMPLATE = \'\'\'\n.. THIS FILE IS AUTOMATICALLY GENERATED! DO NOT EDIT IT BY HAND!\n\n   If you want to regenerate this file, run the script\n   `scripts/generate_special_function_declarations.py`\n\nSupported functions from ``scipy.special``\n==========================================\n\nThe following functions are supported:\n\n\'\'\'\n\nCYTHON_TO_NUMBA = {\n    \'double\': \'numba.types.float64\',\n    \'float\': \'numba.types.float32\',\n    \'long\': \'numba.types.long_\',\n}\n\nNUMBA_TO_CTYPES = {\n    \'numba.types.float64\': \'ctypes.c_double\',\n    \'numba.types.float32\': \'ctypes.c_float\',\n    \'numba.types.long_\': \'ctypes.c_long\',\n}\n\n\ndef parse_capsule_name(capsule):\n    # There isn\'t a Python equivalent to `PyCapsule_GetName`, so\n    # resort to a hacky method for finding the signature.\n    match = re.match(\n        \'\\<capsule object ""(?P<signature>.+)"" at 0x[a-f0-9]+\\>\',\n        str(capsule),\n    )\n    if match is None:\n        raise ValueError(\'Unexpected capsule name {}\'.format(capsule))\n\n    signature = match.group(\'signature\')\n    match = re.match(\'(?P<return_type>.+) \\((?P<arg_types>.+)\\)\', signature)\n    if match is None:\n        raise ValueError(\'Unexpected signature {}\'.format(signature))\n\n    args = [\n        arg_type for arg_type in match.group(\'arg_types\').split(\', \')\n        if arg_type != \'int __pyx_skip_dispatch\'\n    ]\n    return [match.group(\'return_type\')] + args\n\n\ndef de_mangle_function_name(mangled_name):\n    match = re.match(\'(__pyx_fuse(_[0-9])*)?(?P<name>.+)\', mangled_name)\n    if match is None:\n        raise ValueError(\'Unexpected mangled name {}\'.format(mangled_name))\n\n    return match.group(\'name\')\n\n\ndef get_signatures_from_pyx_capi():\n    signature_to_pointer = {}\n\n    for mangled_name, capsule in cysc.__pyx_capi__.items():\n        numba_signature = [\n            CYTHON_TO_NUMBA.get(t) for t in parse_capsule_name(capsule)\n        ]\n        if any(t is None for t in numba_signature):\n            # We don\'t know how to handle this kernel yet.\n            continue\n\n        signature_to_pointer[(mangled_name, *numba_signature)] = capsule\n\n    return signature_to_pointer\n\n\ndef generate_signatures_file(signature_to_pointer):\n    name_to_numba_signatures = collections.defaultdict(list)\n    name_and_types_to_pointer = []\n    for mangled_name, *signature in signature_to_pointer.keys():\n        name = de_mangle_function_name(mangled_name)\n        name_to_numba_signatures[name].append(\n            \'({},)\'.format(\', \'.join(signature[1:]))\n        )\n\n        key = ""(\'{}\', {})"".format(name, \', \'.join(signature[1:]))\n        address = (\n            ""get_cython_function_address(\'scipy.special.cython_special\', \'{}\')""\n            .format(mangled_name)\n        )\n        ctypes_signature = [NUMBA_TO_CTYPES[t] for t in signature]\n        ctypes_cast = (\n            \'ctypes.CFUNCTYPE({})\'.format(\', \'.join(ctypes_signature))\n        )\n        name_and_types_to_pointer.append(\n            \'{}: {}({})\'.format(key, ctypes_cast, address)\n        )\n\n    name_to_numba_signatures = [\n        ""\'{}\': [{}]"".format(name, \', \'.join(signatures))\n        for name, signatures in name_to_numba_signatures.items()\n    ]\n    name_to_numba_signatures = \',\\n    \'.join(name_to_numba_signatures)\n\n    name_and_types_to_pointer = \',\\n    \'.join(name_and_types_to_pointer)\n    content = SIGNATURES_TEMPLATE.format(\n        NAME_TO_NUMBA_SIGNATURES=name_to_numba_signatures,\n        NAME_AND_TYPES_TO_POINTER=name_and_types_to_pointer\n    )\n    with open(os.path.join(SPECIAL_DIR, \'signatures.py\'), \'w\') as f:\n        f.write(content)\n\n\ndef generate_docs(signature_to_pointer):\n    with open(os.path.join(DOCS_DIR, \'special.rst\'), \'w\') as f:\n        f.write(DOCS_TEMPLATE)\n        funcs = collections.defaultdict(list)\n        # sorted for stability\n        for x in sorted(set(tuple(signature_to_pointer.keys()))):\n            name = de_mangle_function_name(x[0])\n            sig = [t.replace(\'numba.types.\',\'\') for t in x[1:]]\n            retty, *argtys = sig\n            sig_str = \'``{}({})``\'.format(retty, \',\'.join(argtys))\n            funcs[name].append(sig_str)\n        # re-sort based on de-mangled function names so same named functions\n        # appear together\n        for k, v in sorted(funcs.items()):\n            tmplt = (""* :py:data:`scipy.special.{}`\\n    ""\n                     ""Supported signature(s): {}\\n"")\n            f.write(tmplt.format(k, \', \'.join(v)))\n\n\ndef main():\n    signature_to_pointer = get_signatures_from_pyx_capi()\n    generate_signatures_file(signature_to_pointer)\n    generate_docs(signature_to_pointer)\n\n\nif __name__ == \'__main__\':\n    main()\n'"
docs/source/conf.py,0,"b'# Configuration file for the Sphinx documentation builder.\n#\n# This file only contains a selection of the most common options. For a full\n# list see the documentation:\n# http://www.sphinx-doc.org/en/master/config\n\nimport sys\nimport os\nimport sphinx_bootstrap_theme\n\n# If extensions (or modules to document with autodoc) are in another directory,\n# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\ntry:\n    # Numba is installed\n    import numba\n    import numba_scipy\nexcept ImportError:\n    # Numba is run from its source checkout\n    sys.path.insert(0, os.path.abspath(\'../..\'))\n    import numba\n    import numba_scipy\n\n\n# -- Path setup --------------------------------------------------------------\n\n# If extensions (or modules to document with autodoc) are in another directory,\n# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\n#\n# import os\n# import sys\n# sys.path.insert(0, os.path.abspath(\'.\'))\n\n\n# -- Project information -----------------------------------------------------\n\nproject = u\'numba-scipy\'\ncopyright = u\'2019, Anaconda, Inc.\'\nauthor = u\'Anaconda, Inc.\'\n\n# The version info for the project you\'re documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\nversion = \'.\'.join(numba_scipy.__version__.split(\'.\')[:2])\n# The full version, including alpha/beta/rc tags.\nrelease = numba_scipy.__version__\n\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = \'sphinx\'\n\n# -- General configuration ---------------------------------------------------\n\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named \'sphinx.ext.*\') or your custom\n# ones.\nextensions = [\n    \'sphinx.ext.intersphinx\',\n    \'sphinx.ext.autodoc\',\n]\n\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = [\'../_templates\']\n\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This pattern also affects html_static_path and html_extra_path.\nexclude_patterns = []\n\n\n# -- Options for HTML output -------------------------------------------------\n\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\n# pip install sphinx_bootstrap_theme\nhtml_theme = \'bootstrap\'\n\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\nhtml_theme_options = {\n  \'bootswatch_theme\': ""paper"",\n}\n\n# Add any paths that contain custom themes here, relative to this directory.\nhtml_theme_path = sphinx_bootstrap_theme.get_html_theme_path()\n\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named ""default.css"" will overwrite the builtin ""default.css"".\nhtml_static_path = [\'../_static\']\n\n\n# -- Intersphinx -------------------------------------------------------------\n# Configuration for intersphinx: refer to the Python standard library\n# and the Numpy documentation.\nintersphinx_mapping = {\n    \'python\': (\'https://docs.python.org/3\', None),\n    \'numpy\': (\'http://docs.scipy.org/doc/numpy\', None),\n    \'scipy\': (\'https://docs.scipy.org/doc/scipy/reference/\', None),\n    \'numba\': (\'http://numba.pydata.org/numba-doc/latest\', None),\n    \'llvmlite\': (\'http://llvmlite.pydata.org/en/latest/\', None),\n    }\n\n\n# numpydoc options\n\n# To silence ""WARNING: toctree contains reference to nonexisting document""\nnumpydoc_show_class_members = False\n\n\ndef setup(app):\n    app.add_stylesheet(""numba-scipy-docs.css"")\n'"
numba_scipy/special/__init__.py,0,b'from . import overloads as _overloads\n\n_overloads.add_overloads()\n'
numba_scipy/special/overloads.py,0,"b'import numba\nimport scipy.special as sc\n\nfrom . import signatures\n\n\ndef choose_kernel(name, all_signatures):\n\n    def choice_function(*args):\n        for signature in all_signatures:\n            if args == signature:\n                f = signatures.name_and_types_to_pointer[(name, *signature)]\n                return lambda *args: f(*args)\n\n    return choice_function\n\n\ndef add_overloads():\n    for name, all_signatures in signatures.name_to_numba_signatures.items():\n        sc_function = getattr(sc, name)\n        numba.extending.overload(sc_function)(\n            choose_kernel(name, all_signatures)\n        )\n'"
numba_scipy/special/signatures.py,0,"b'""""""THIS FILE IS AUTOMATICALLY GENERATED! DO NOT EDIT IT BY HAND!\n\nIf you want to regenerate this file, run the script\n`scripts/generate_special_function_declarations.py`\n\n""""""\nimport ctypes\n\nimport numba\nfrom numba.extending import get_cython_function_address\n\nname_to_numba_signatures = {\n    \'agm\': [(numba.types.float64, numba.types.float64,)],\n    \'bdtrik\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'bdtrin\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'bei\': [(numba.types.float64,)],\n    \'beip\': [(numba.types.float64,)],\n    \'ber\': [(numba.types.float64,)],\n    \'berp\': [(numba.types.float64,)],\n    \'besselpoly\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'beta\': [(numba.types.float64, numba.types.float64,)],\n    \'betainc\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'betaincinv\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'betaln\': [(numba.types.float64, numba.types.float64,)],\n    \'binom\': [(numba.types.float64, numba.types.float64,)],\n    \'boxcox\': [(numba.types.float64, numba.types.float64,)],\n    \'boxcox1p\': [(numba.types.float64, numba.types.float64,)],\n    \'btdtr\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'btdtri\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'btdtria\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'btdtrib\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'cbrt\': [(numba.types.float64,)],\n    \'chdtr\': [(numba.types.float64, numba.types.float64,)],\n    \'chdtrc\': [(numba.types.float64, numba.types.float64,)],\n    \'chdtri\': [(numba.types.float64, numba.types.float64,)],\n    \'chdtriv\': [(numba.types.float64, numba.types.float64,)],\n    \'chndtr\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'chndtridf\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'chndtrinc\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'chndtrix\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'cosdg\': [(numba.types.float64,)],\n    \'cosm1\': [(numba.types.float64,)],\n    \'cotdg\': [(numba.types.float64,)],\n    \'ellipe\': [(numba.types.float64,)],\n    \'ellipeinc\': [(numba.types.float64, numba.types.float64,)],\n    \'ellipkinc\': [(numba.types.float64, numba.types.float64,)],\n    \'ellipkm1\': [(numba.types.float64,)],\n    \'entr\': [(numba.types.float64,)],\n    \'eval_hermite\': [(numba.types.long_, numba.types.float64,)],\n    \'eval_hermitenorm\': [(numba.types.long_, numba.types.float64,)],\n    \'exp10\': [(numba.types.float64,)],\n    \'exp2\': [(numba.types.float64,)],\n    \'exprel\': [(numba.types.float64,)],\n    \'fdtr\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'fdtrc\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'fdtri\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'fdtridfd\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'gammainc\': [(numba.types.float64, numba.types.float64,)],\n    \'gammaincc\': [(numba.types.float64, numba.types.float64,)],\n    \'gammainccinv\': [(numba.types.float64, numba.types.float64,)],\n    \'gammaincinv\': [(numba.types.float64, numba.types.float64,)],\n    \'gammaln\': [(numba.types.float64,)],\n    \'gammasgn\': [(numba.types.float64,)],\n    \'gdtr\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'gdtrc\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'gdtria\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'gdtrib\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'gdtrix\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'huber\': [(numba.types.float64, numba.types.float64,)],\n    \'hyperu\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'i0\': [(numba.types.float64,)],\n    \'i0e\': [(numba.types.float64,)],\n    \'i1\': [(numba.types.float64,)],\n    \'i1e\': [(numba.types.float64,)],\n    \'inv_boxcox\': [(numba.types.float64, numba.types.float64,)],\n    \'inv_boxcox1p\': [(numba.types.float64, numba.types.float64,)],\n    \'it2struve0\': [(numba.types.float64,)],\n    \'itmodstruve0\': [(numba.types.float64,)],\n    \'itstruve0\': [(numba.types.float64,)],\n    \'j0\': [(numba.types.float64,)],\n    \'j1\': [(numba.types.float64,)],\n    \'k0\': [(numba.types.float64,)],\n    \'k0e\': [(numba.types.float64,)],\n    \'k1\': [(numba.types.float64,)],\n    \'k1e\': [(numba.types.float64,)],\n    \'kei\': [(numba.types.float64,)],\n    \'keip\': [(numba.types.float64,)],\n    \'ker\': [(numba.types.float64,)],\n    \'kerp\': [(numba.types.float64,)],\n    \'kl_div\': [(numba.types.float64, numba.types.float64,)],\n    \'kolmogi\': [(numba.types.float64,)],\n    \'kolmogorov\': [(numba.types.float64,)],\n    \'lpmv\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'mathieu_a\': [(numba.types.float64, numba.types.float64,)],\n    \'mathieu_b\': [(numba.types.float64, numba.types.float64,)],\n    \'modstruve\': [(numba.types.float64, numba.types.float64,)],\n    \'nbdtrik\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'nbdtrin\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'ncfdtr\': [(numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'ncfdtri\': [(numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'ncfdtridfd\': [(numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'ncfdtridfn\': [(numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'ncfdtrinc\': [(numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'nctdtr\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'nctdtridf\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'nctdtrinc\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'nctdtrit\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'ndtri\': [(numba.types.float64,)],\n    \'nrdtrimn\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'nrdtrisd\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'obl_cv\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'owens_t\': [(numba.types.float64, numba.types.float64,)],\n    \'pdtrik\': [(numba.types.float64, numba.types.float64,)],\n    \'poch\': [(numba.types.float64, numba.types.float64,)],\n    \'pro_cv\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'pseudo_huber\': [(numba.types.float64, numba.types.float64,)],\n    \'radian\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'rel_entr\': [(numba.types.float64, numba.types.float64,)],\n    \'round\': [(numba.types.float64,)],\n    \'sindg\': [(numba.types.float64,)],\n    \'stdtr\': [(numba.types.float64, numba.types.float64,)],\n    \'stdtridf\': [(numba.types.float64, numba.types.float64,)],\n    \'stdtrit\': [(numba.types.float64, numba.types.float64,)],\n    \'struve\': [(numba.types.float64, numba.types.float64,)],\n    \'tandg\': [(numba.types.float64,)],\n    \'tklmbda\': [(numba.types.float64, numba.types.float64,)],\n    \'y0\': [(numba.types.float64,)],\n    \'y1\': [(numba.types.float64,)],\n    \'zetac\': [(numba.types.float64,)],\n    \'bdtr\': [(numba.types.float64, numba.types.float64, numba.types.float64,), (numba.types.long_, numba.types.long_, numba.types.float64,)],\n    \'bdtrc\': [(numba.types.float64, numba.types.float64, numba.types.float64,), (numba.types.long_, numba.types.long_, numba.types.float64,)],\n    \'bdtri\': [(numba.types.float64, numba.types.float64, numba.types.float64,), (numba.types.long_, numba.types.long_, numba.types.float64,)],\n    \'dawsn\': [(numba.types.float64,)],\n    \'erf\': [(numba.types.float64,)],\n    \'erfc\': [(numba.types.float64,)],\n    \'erfcx\': [(numba.types.float64,)],\n    \'erfi\': [(numba.types.float64,)],\n    \'eval_chebyc\': [(numba.types.float64, numba.types.float64,), (numba.types.long_, numba.types.float64,)],\n    \'eval_chebys\': [(numba.types.float64, numba.types.float64,), (numba.types.long_, numba.types.float64,)],\n    \'eval_chebyt\': [(numba.types.float64, numba.types.float64,), (numba.types.long_, numba.types.float64,)],\n    \'eval_chebyu\': [(numba.types.float64, numba.types.float64,), (numba.types.long_, numba.types.float64,)],\n    \'eval_gegenbauer\': [(numba.types.float64, numba.types.float64, numba.types.float64,), (numba.types.long_, numba.types.float64, numba.types.float64,)],\n    \'eval_genlaguerre\': [(numba.types.float64, numba.types.float64, numba.types.float64,), (numba.types.long_, numba.types.float64, numba.types.float64,)],\n    \'eval_jacobi\': [(numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64,), (numba.types.long_, numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'eval_laguerre\': [(numba.types.float64, numba.types.float64,), (numba.types.long_, numba.types.float64,)],\n    \'eval_legendre\': [(numba.types.float64, numba.types.float64,), (numba.types.long_, numba.types.float64,)],\n    \'eval_sh_chebyt\': [(numba.types.float64, numba.types.float64,), (numba.types.long_, numba.types.float64,)],\n    \'eval_sh_chebyu\': [(numba.types.float64, numba.types.float64,), (numba.types.long_, numba.types.float64,)],\n    \'eval_sh_jacobi\': [(numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64,), (numba.types.long_, numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'eval_sh_legendre\': [(numba.types.float64, numba.types.float64,), (numba.types.long_, numba.types.float64,)],\n    \'exp1\': [(numba.types.float64,)],\n    \'expi\': [(numba.types.float64,)],\n    \'expit\': [(numba.types.float64,), (numba.types.float32,)],\n    \'expm1\': [(numba.types.float64,)],\n    \'expn\': [(numba.types.float64, numba.types.float64,), (numba.types.long_, numba.types.float64,)],\n    \'gamma\': [(numba.types.float64,)],\n    \'hyp0f1\': [(numba.types.float64, numba.types.float64,)],\n    \'hyp1f1\': [(numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'hyp2f1\': [(numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64,)],\n    \'iv\': [(numba.types.float64, numba.types.float64,)],\n    \'ive\': [(numba.types.float64, numba.types.float64,)],\n    \'jv\': [(numba.types.float64, numba.types.float64,)],\n    \'jve\': [(numba.types.float64, numba.types.float64,)],\n    \'kn\': [(numba.types.float64, numba.types.float64,), (numba.types.long_, numba.types.float64,)],\n    \'kv\': [(numba.types.float64, numba.types.float64,)],\n    \'kve\': [(numba.types.float64, numba.types.float64,)],\n    \'log1p\': [(numba.types.float64,)],\n    \'log_ndtr\': [(numba.types.float64,)],\n    \'loggamma\': [(numba.types.float64,)],\n    \'logit\': [(numba.types.float64,), (numba.types.float32,)],\n    \'nbdtr\': [(numba.types.float64, numba.types.float64, numba.types.float64,), (numba.types.long_, numba.types.long_, numba.types.float64,)],\n    \'nbdtrc\': [(numba.types.float64, numba.types.float64, numba.types.float64,), (numba.types.long_, numba.types.long_, numba.types.float64,)],\n    \'nbdtri\': [(numba.types.float64, numba.types.float64, numba.types.float64,), (numba.types.long_, numba.types.long_, numba.types.float64,)],\n    \'ndtr\': [(numba.types.float64,)],\n    \'pdtr\': [(numba.types.float64, numba.types.float64,), (numba.types.long_, numba.types.float64,)],\n    \'pdtrc\': [(numba.types.float64, numba.types.float64,), (numba.types.long_, numba.types.float64,)],\n    \'pdtri\': [(numba.types.float64, numba.types.float64,), (numba.types.long_, numba.types.float64,)],\n    \'psi\': [(numba.types.float64,)],\n    \'rgamma\': [(numba.types.float64,)],\n    \'smirnov\': [(numba.types.float64, numba.types.float64,), (numba.types.long_, numba.types.float64,)],\n    \'smirnovi\': [(numba.types.float64, numba.types.float64,), (numba.types.long_, numba.types.float64,)],\n    \'spence\': [(numba.types.float64,)],\n    \'xlog1py\': [(numba.types.float64, numba.types.float64,)],\n    \'xlogy\': [(numba.types.float64, numba.types.float64,)],\n    \'yn\': [(numba.types.float64, numba.types.float64,), (numba.types.long_, numba.types.float64,)],\n    \'yv\': [(numba.types.float64, numba.types.float64,)],\n    \'yve\': [(numba.types.float64, numba.types.float64,)]\n}\n\nname_and_types_to_pointer = {\n    (\'agm\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'agm\')),\n    (\'bdtrik\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'bdtrik\')),\n    (\'bdtrin\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'bdtrin\')),\n    (\'bei\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'bei\')),\n    (\'beip\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'beip\')),\n    (\'ber\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'ber\')),\n    (\'berp\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'berp\')),\n    (\'besselpoly\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'besselpoly\')),\n    (\'beta\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'beta\')),\n    (\'betainc\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'betainc\')),\n    (\'betaincinv\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'betaincinv\')),\n    (\'betaln\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'betaln\')),\n    (\'binom\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'binom\')),\n    (\'boxcox\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'boxcox\')),\n    (\'boxcox1p\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'boxcox1p\')),\n    (\'btdtr\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'btdtr\')),\n    (\'btdtri\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'btdtri\')),\n    (\'btdtria\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'btdtria\')),\n    (\'btdtrib\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'btdtrib\')),\n    (\'cbrt\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'cbrt\')),\n    (\'chdtr\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'chdtr\')),\n    (\'chdtrc\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'chdtrc\')),\n    (\'chdtri\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'chdtri\')),\n    (\'chdtriv\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'chdtriv\')),\n    (\'chndtr\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'chndtr\')),\n    (\'chndtridf\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'chndtridf\')),\n    (\'chndtrinc\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'chndtrinc\')),\n    (\'chndtrix\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'chndtrix\')),\n    (\'cosdg\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'cosdg\')),\n    (\'cosm1\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'cosm1\')),\n    (\'cotdg\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'cotdg\')),\n    (\'ellipe\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'ellipe\')),\n    (\'ellipeinc\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'ellipeinc\')),\n    (\'ellipkinc\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'ellipkinc\')),\n    (\'ellipkm1\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'ellipkm1\')),\n    (\'entr\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'entr\')),\n    (\'eval_hermite\', numba.types.long_, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'eval_hermite\')),\n    (\'eval_hermitenorm\', numba.types.long_, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'eval_hermitenorm\')),\n    (\'exp10\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'exp10\')),\n    (\'exp2\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'exp2\')),\n    (\'exprel\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'exprel\')),\n    (\'fdtr\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'fdtr\')),\n    (\'fdtrc\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'fdtrc\')),\n    (\'fdtri\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'fdtri\')),\n    (\'fdtridfd\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'fdtridfd\')),\n    (\'gammainc\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'gammainc\')),\n    (\'gammaincc\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'gammaincc\')),\n    (\'gammainccinv\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'gammainccinv\')),\n    (\'gammaincinv\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'gammaincinv\')),\n    (\'gammaln\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'gammaln\')),\n    (\'gammasgn\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'gammasgn\')),\n    (\'gdtr\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'gdtr\')),\n    (\'gdtrc\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'gdtrc\')),\n    (\'gdtria\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'gdtria\')),\n    (\'gdtrib\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'gdtrib\')),\n    (\'gdtrix\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'gdtrix\')),\n    (\'huber\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'huber\')),\n    (\'hyperu\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'hyperu\')),\n    (\'i0\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'i0\')),\n    (\'i0e\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'i0e\')),\n    (\'i1\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'i1\')),\n    (\'i1e\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'i1e\')),\n    (\'inv_boxcox\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'inv_boxcox\')),\n    (\'inv_boxcox1p\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'inv_boxcox1p\')),\n    (\'it2struve0\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'it2struve0\')),\n    (\'itmodstruve0\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'itmodstruve0\')),\n    (\'itstruve0\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'itstruve0\')),\n    (\'j0\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'j0\')),\n    (\'j1\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'j1\')),\n    (\'k0\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'k0\')),\n    (\'k0e\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'k0e\')),\n    (\'k1\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'k1\')),\n    (\'k1e\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'k1e\')),\n    (\'kei\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'kei\')),\n    (\'keip\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'keip\')),\n    (\'ker\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'ker\')),\n    (\'kerp\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'kerp\')),\n    (\'kl_div\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'kl_div\')),\n    (\'kolmogi\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'kolmogi\')),\n    (\'kolmogorov\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'kolmogorov\')),\n    (\'lpmv\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'lpmv\')),\n    (\'mathieu_a\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'mathieu_a\')),\n    (\'mathieu_b\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'mathieu_b\')),\n    (\'modstruve\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'modstruve\')),\n    (\'nbdtrik\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'nbdtrik\')),\n    (\'nbdtrin\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'nbdtrin\')),\n    (\'ncfdtr\', numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'ncfdtr\')),\n    (\'ncfdtri\', numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'ncfdtri\')),\n    (\'ncfdtridfd\', numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'ncfdtridfd\')),\n    (\'ncfdtridfn\', numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'ncfdtridfn\')),\n    (\'ncfdtrinc\', numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'ncfdtrinc\')),\n    (\'nctdtr\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'nctdtr\')),\n    (\'nctdtridf\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'nctdtridf\')),\n    (\'nctdtrinc\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'nctdtrinc\')),\n    (\'nctdtrit\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'nctdtrit\')),\n    (\'ndtri\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'ndtri\')),\n    (\'nrdtrimn\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'nrdtrimn\')),\n    (\'nrdtrisd\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'nrdtrisd\')),\n    (\'obl_cv\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'obl_cv\')),\n    (\'owens_t\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'owens_t\')),\n    (\'pdtrik\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'pdtrik\')),\n    (\'poch\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'poch\')),\n    (\'pro_cv\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'pro_cv\')),\n    (\'pseudo_huber\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'pseudo_huber\')),\n    (\'radian\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'radian\')),\n    (\'rel_entr\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'rel_entr\')),\n    (\'round\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'round\')),\n    (\'sindg\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'sindg\')),\n    (\'stdtr\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'stdtr\')),\n    (\'stdtridf\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'stdtridf\')),\n    (\'stdtrit\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'stdtrit\')),\n    (\'struve\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'struve\')),\n    (\'tandg\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'tandg\')),\n    (\'tklmbda\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'tklmbda\')),\n    (\'y0\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'y0\')),\n    (\'y1\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'y1\')),\n    (\'zetac\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'zetac\')),\n    (\'bdtr\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_0bdtr\')),\n    (\'bdtr\', numba.types.long_, numba.types.long_, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_long, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1bdtr\')),\n    (\'bdtrc\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_0bdtrc\')),\n    (\'bdtrc\', numba.types.long_, numba.types.long_, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_long, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1bdtrc\')),\n    (\'bdtri\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_0bdtri\')),\n    (\'bdtri\', numba.types.long_, numba.types.long_, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_long, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1bdtri\')),\n    (\'dawsn\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1dawsn\')),\n    (\'erf\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1erf\')),\n    (\'erfc\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1erfc\')),\n    (\'erfcx\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1erfcx\')),\n    (\'erfi\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1erfi\')),\n    (\'eval_chebyc\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_0_1eval_chebyc\')),\n    (\'eval_chebyc\', numba.types.long_, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1_1eval_chebyc\')),\n    (\'eval_chebys\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_0_1eval_chebys\')),\n    (\'eval_chebys\', numba.types.long_, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1_1eval_chebys\')),\n    (\'eval_chebyt\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_0_1eval_chebyt\')),\n    (\'eval_chebyt\', numba.types.long_, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1_1eval_chebyt\')),\n    (\'eval_chebyu\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_0_1eval_chebyu\')),\n    (\'eval_chebyu\', numba.types.long_, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1_1eval_chebyu\')),\n    (\'eval_gegenbauer\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_0_1eval_gegenbauer\')),\n    (\'eval_gegenbauer\', numba.types.long_, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1_1eval_gegenbauer\')),\n    (\'eval_genlaguerre\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_0_1eval_genlaguerre\')),\n    (\'eval_genlaguerre\', numba.types.long_, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1_1eval_genlaguerre\')),\n    (\'eval_jacobi\', numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_0_1eval_jacobi\')),\n    (\'eval_jacobi\', numba.types.long_, numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1_1eval_jacobi\')),\n    (\'eval_laguerre\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_0_1eval_laguerre\')),\n    (\'eval_laguerre\', numba.types.long_, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1_1eval_laguerre\')),\n    (\'eval_legendre\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_0_1eval_legendre\')),\n    (\'eval_legendre\', numba.types.long_, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1_1eval_legendre\')),\n    (\'eval_sh_chebyt\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_0_1eval_sh_chebyt\')),\n    (\'eval_sh_chebyt\', numba.types.long_, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1_1eval_sh_chebyt\')),\n    (\'eval_sh_chebyu\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_0_1eval_sh_chebyu\')),\n    (\'eval_sh_chebyu\', numba.types.long_, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1_1eval_sh_chebyu\')),\n    (\'eval_sh_jacobi\', numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_0_1eval_sh_jacobi\')),\n    (\'eval_sh_jacobi\', numba.types.long_, numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1_1eval_sh_jacobi\')),\n    (\'eval_sh_legendre\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_0_1eval_sh_legendre\')),\n    (\'eval_sh_legendre\', numba.types.long_, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1_1eval_sh_legendre\')),\n    (\'exp1\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1exp1\')),\n    (\'expi\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1expi\')),\n    (\'expit\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_0expit\')),\n    (\'expit\', numba.types.float32): ctypes.CFUNCTYPE(ctypes.c_float, ctypes.c_float)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1expit\')),\n    (\'expm1\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1expm1\')),\n    (\'expn\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_0expn\')),\n    (\'expn\', numba.types.long_, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1expn\')),\n    (\'gamma\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1gamma\')),\n    (\'hyp0f1\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1hyp0f1\')),\n    (\'hyp1f1\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1hyp1f1\')),\n    (\'hyp2f1\', numba.types.float64, numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1hyp2f1\')),\n    (\'iv\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1iv\')),\n    (\'ive\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1ive\')),\n    (\'jv\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1jv\')),\n    (\'jve\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1jve\')),\n    (\'kn\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_0kn\')),\n    (\'kn\', numba.types.long_, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1kn\')),\n    (\'kv\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1kv\')),\n    (\'kve\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1kve\')),\n    (\'log1p\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1log1p\')),\n    (\'log_ndtr\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1log_ndtr\')),\n    (\'loggamma\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1loggamma\')),\n    (\'logit\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_0logit\')),\n    (\'logit\', numba.types.float32): ctypes.CFUNCTYPE(ctypes.c_float, ctypes.c_float)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1logit\')),\n    (\'nbdtr\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_0nbdtr\')),\n    (\'nbdtr\', numba.types.long_, numba.types.long_, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_long, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1nbdtr\')),\n    (\'nbdtrc\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_0nbdtrc\')),\n    (\'nbdtrc\', numba.types.long_, numba.types.long_, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_long, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1nbdtrc\')),\n    (\'nbdtri\', numba.types.float64, numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_0nbdtri\')),\n    (\'nbdtri\', numba.types.long_, numba.types.long_, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_long, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1nbdtri\')),\n    (\'ndtr\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1ndtr\')),\n    (\'pdtr\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_0pdtr\')),\n    (\'pdtr\', numba.types.long_, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1pdtr\')),\n    (\'pdtrc\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_0pdtrc\')),\n    (\'pdtrc\', numba.types.long_, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1pdtrc\')),\n    (\'pdtri\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_0pdtri\')),\n    (\'pdtri\', numba.types.long_, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1pdtri\')),\n    (\'psi\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1psi\')),\n    (\'rgamma\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1rgamma\')),\n    (\'smirnov\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_0smirnov\')),\n    (\'smirnov\', numba.types.long_, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1smirnov\')),\n    (\'smirnovi\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_0smirnovi\')),\n    (\'smirnovi\', numba.types.long_, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1smirnovi\')),\n    (\'spence\', numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1spence\')),\n    (\'xlog1py\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1xlog1py\')),\n    (\'xlogy\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1xlogy\')),\n    (\'yn\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_0yn\')),\n    (\'yn\', numba.types.long_, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_long, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1yn\')),\n    (\'yv\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1yv\')),\n    (\'yve\', numba.types.float64, numba.types.float64): ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double)(get_cython_function_address(\'scipy.special.cython_special\', \'__pyx_fuse_1yve\'))\n}\n'"
numba_scipy/tests/__init__.py,0,b''
numba_scipy/tests/test_special.py,9,"b""import itertools\nimport warnings\n\nimport pytest\n\nimport numpy as np\nfrom numpy.testing import assert_allclose\nimport numba\nimport scipy.special as sc\nimport numba_scipy.special\nfrom numba_scipy.special import signatures as special_signatures\n\nNUMBA_TYPES_TO_TEST_POINTS = {\n    numba.types.float64: np.array(\n        [-100.0, -10.0, -1.0, -0.1, 0.0, 0.1, 1.0, 10.0, 100.0],\n        dtype=np.float64\n    ),\n    numba.types.float32: np.array(\n        [-100.0, -10.0, -1.0, -0.1, 0.0, 0.1, 1.0, 10.0, 100.0],\n        dtype=np.float32\n    ),\n    numba.types.long_: np.array(\n        [-100, -10, -1, 0, 1, 10, 100],\n        dtype=np.int_\n    )\n}\n\nSKIP_LIST = {\n    # Should be fixed by https://github.com/scipy/scipy/pull/10455\n    (\n        'hyperu',\n        (numba.types.float64,) * 3\n    ),\n    # Sometimes returns nan, sometimes returns inf. Likely a SciPy bug.\n    (\n        'eval_jacobi',\n        (numba.types.float64,) * 4\n    ),\n    # Sometimes returns nan, sometimes returns inf. Likely a SciPy bug.\n    (\n        'eval_sh_jacobi',\n        (numba.types.float64,) * 4\n    )\n}\n\n\ndef compare_functions(args, scipy_func, numba_func):\n    for arg in args:\n        overload_value = numba_func(*arg)\n        scipy_value = scipy_func(*arg)\n        if np.isnan(overload_value):\n            assert np.isnan(scipy_value)\n        else:\n            rtol = 2**8 * np.finfo(scipy_value.dtype).eps\n            assert_allclose(overload_value, scipy_value, atol=0, rtol=rtol)\n\n\ndef get_parametrize_arguments():\n    signatures = special_signatures.name_to_numba_signatures.items()\n    for name, specializations in signatures:\n        for signature in specializations:\n            yield name, signature\n\n\n@pytest.mark.parametrize(\n    'name, specialization',\n    get_parametrize_arguments(),\n)\ndef test_function(name, specialization):\n    if (name, specialization) in SKIP_LIST:\n        pytest.xfail()\n\n    scipy_func = getattr(sc, name)\n\n    @numba.njit\n    def numba_func(*args):\n        return scipy_func(*args)\n\n    args = itertools.product(*(\n        NUMBA_TYPES_TO_TEST_POINTS[numba_type] for numba_type in specialization\n    ))\n    with warnings.catch_warnings():\n        # Ignore warnings about unsafe casts generated by SciPy.\n        warnings.filterwarnings(\n            action='ignore',\n            message='floating point number truncated to an integer',\n            category=RuntimeWarning,\n        )\n        compare_functions(args, scipy_func, numba_func)\n"""
