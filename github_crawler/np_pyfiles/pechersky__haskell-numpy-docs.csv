file_path,api_count,code
docs/comparetabs.py,0,"b'"""""" Code comparison tabs for Sphinx """"""\r\n\r\nimport os\r\nimport json\r\nfrom docutils.parsers.rst import Directive\r\nfrom docutils import nodes\r\n\r\nclass CompareTabsDirective(Directive):\r\n  """"""Directive to compare code using tabs.""""""\r\n  \r\n  has_content = True\r\n  \r\n  DEDENT = {\r\n    \'python\': 4,\r\n    \'haskell\': 3,\r\n  }\r\n  \r\n  def run(self):\r\n    """"""Parse a compare-tabs directive.""""""\r\n    \r\n    self.assert_has_content()\r\n    \r\n    group_name = self.content[0]\r\n    \r\n    tabs = []\r\n    for idx, line in enumerate(self.content.data):\r\n      tabs.append(line.split())\r\n    \r\n    new_content = [\r\n      \'.. tabs::\'\r\n    ]\r\n    for tabsplit in tabs:\r\n      language = tabsplit[0]\r\n      name = tabsplit[1]\r\n      filepath = tabsplit[2]\r\n      lines_raw = tabsplit[3:]\r\n      lines = str.join(\',\', str.join(\' \', lines_raw).replace(\',\',\' \').split())\r\n      new_content.extend([\r\n        \'   .. tab:: {}\'.format(name),\r\n        \'   \',\r\n        \'      .. literalinclude:: {}\'.format(filepath),\r\n        \'         :dedent: {}\'.format(self.DEDENT[language]),\r\n        \'         :language: {}\'.format(language),\r\n        \'         :lines: {}\'.format(lines),\r\n        \'   \',\r\n      ])\r\n      \r\n    for idx, line in enumerate(new_content):\r\n      self.content.data.insert(idx, line)\r\n      self.content.items.insert(idx, (None, idx))\r\n\r\n    node = nodes.container()\r\n    self.state.nested_parse(self.content[:-1*len(tabs)], self.content_offset, node)\r\n    return node.children\r\n\r\n    \r\ndef setup(app):\r\n  app.add_directive(\'compare-tabs\', CompareTabsDirective)'"
docs/conf.py,0,"b'# -*- coding: utf-8 -*-\n#\n# haskell-numpy-docs documentation build configuration file, created by\n# sphinx-quickstart on Tue Mar 14 10:23:52 2017.\n#\n# This file is execfile()d with the current directory set to its\n# containing dir.\n#\n# Note that not all possible configuration values are present in this\n# autogenerated file.\n#\n# All configuration values have a default; values that are commented out\n# serve to show the default.\n\n# If extensions (or modules to document with autodoc) are in another directory,\n# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\n#\nimport os\nimport sys\nsys.path.insert(0, os.path.abspath(\'.\'))\n\n\n# -- General configuration ------------------------------------------------\n\n# If your documentation needs a minimal Sphinx version, state it here.\n#\n# needs_sphinx = \'1.0\'\n\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named \'sphinx.ext.*\') or your custom\n# ones.\nextensions = [\'sphinx_tabs.tabs\', \'comparetabs\']\n\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = [\'_templates\']\n\n# The suffix(es) of source filenames.\n# You can specify multiple suffix as a list of string:\n#\n# source_suffix = [\'.rst\', \'.md\']\nsource_suffix = \'.rst\'\n\n# The master toctree document.\nmaster_doc = \'index\'\n\n# General information about the project.\nproject = u\'haskell-numpy-docs\'\ncopyright = u\'2017, Yakov Pechersky\'\nauthor = u\'Yakov Pechersky\'\n\n# The version info for the project you\'re documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = u\'\'\n# The full version, including alpha/beta/rc tags.\nrelease = u\'\'\n\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#\n# This is also used if you do content translation via gettext catalogs.\n# Usually you set ""language"" from the command line for these cases.\nlanguage = None\n\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This patterns also effect to html_static_path and html_extra_path\nexclude_patterns = [\'_build\', \'Thumbs.db\', \'.DS_Store\']\n\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = \'sphinx\'\n\n# If true, `todo` and `todoList` produce output, else they produce nothing.\ntodo_include_todos = False\n\n\n# -- Options for HTML output ----------------------------------------------\n\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\nhtml_theme = \'alabaster\'\n\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#\nhtml_theme_options = {\n  \'fixed_sidebar\': True,\n}\nhtml_sidebars = {\n  \'**\': [\n    \'about.html\',\n    \'navigation.html\',\n    \'relations.html\',\n    \'searchbox.html\',\n    \'donate.html\',\n  ]\n}\n\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named ""default.css"" will overwrite the builtin ""default.css"".\nhtml_static_path = [\'_static\']\n\n\n# -- Options for HTMLHelp output ------------------------------------------\n\n# Output file base name for HTML help builder.\nhtmlhelp_basename = \'haskell-numpy-docsdoc\'\n\n\n# -- Options for LaTeX output ---------------------------------------------\n\nlatex_elements = {\n    # The paper size (\'letterpaper\' or \'a4paper\').\n    #\n    # \'papersize\': \'letterpaper\',\n\n    # The font size (\'10pt\', \'11pt\' or \'12pt\').\n    #\n    # \'pointsize\': \'10pt\',\n\n    # Additional stuff for the LaTeX preamble.\n    #\n    # \'preamble\': \'\',\n\n    # Latex figure (float) alignment\n    #\n    # \'figure_align\': \'htbp\',\n}\n\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title,\n#  author, documentclass [howto, manual, or own class]).\nlatex_documents = [\n    (master_doc, \'haskell-numpy-docs.tex\', u\'haskell-numpy-docs Documentation\',\n     u\'Yakov Pechersky\', \'manual\'),\n]\n\n\n# -- Options for manual page output ---------------------------------------\n\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    (master_doc, \'haskell-numpy-docs\', u\'haskell-numpy-docs Documentation\',\n     [author], 1)\n]\n\n\n# -- Options for Texinfo output -------------------------------------------\n\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [\n    (master_doc, \'haskell-numpy-docs\', u\'haskell-numpy-docs Documentation\',\n     author, \'haskell-numpy-docs\', \'One line description of project.\',\n     \'Miscellaneous\'),\n]\n\n\n\n'"
