file_path,api_count,code
BollingerBand.py,0,"b'import os\r\nimport pandas as pd\r\nimport matplotlib.pyplot as plt\r\nimport datetime as dt\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\nticker = input()\r\n#type(ticker)\r\n\r\ndef get_rolling_mean(values, window):\r\n    """"""Return rolling mean of given values, using specified window size.""""""\r\n    return pd.rolling_mean(values, window=window)\r\n\r\ndef get_rolling_std(values, window):\r\n    """"""Return rolling standard deviation of given values, using specified window size.""""""\r\n    return pd.rolling_std(values, window=window)\r\n\r\ndef get_bollinger_bands(rm,rstd):\r\n    upper_band=rm+rstd*2\r\n    lower_band=rm-rstd*2\r\n    return upper_band,lower_band\r\n\r\ndef bollinger_band():\r\n    \r\n    df = pd.read_csv(""CompiledData.csv"",parse_dates=True, na_values=[\'nan\'])\r\n    df.fillna(method=""ffill"",inplace=True)\r\n    df.fillna(method=""bfill"",inplace=True)\r\n    RollingMean = get_rolling_mean(df[ticker], window=20)\r\n    RollingStd = get_rolling_std(df[ticker], window=20)\r\n    upper_band, lower_band = get_bollinger_bands(RollingMean, RollingStd)\r\n    \r\n    ax = df[ticker].plot(title=""Bollinger Bands"", label=ticker)\r\n    RollingMean.plot(label=\'Rolling mean\', ax=ax)\r\n    upper_band.plot(label=\'upper band\', ax=ax)\r\n    lower_band.plot(label=\'lower band\', ax=ax)\r\n    ax.set_xlabel(""Date"")\r\n    ax.set_ylabel(""Price"")\r\n    ax.legend(loc=\'upper left\')\r\n    plt.show()\r\n\r\nbollinger_band()\r\n'"
Candlestck.py,0,"b'import datetime as dt\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib import style\r\nfrom matplotlib.finance import candlestick_ohlc\r\nimport matplotlib.dates as mdates\r\nimport pandas as pd\r\nimport pandas_datareader.data as web\r\n#import pickle\r\n\r\n\r\nticker=input()\r\n\r\nstyle.use(\'ggplot\')\r\ndf = pd.read_csv(\'stock_dfs/{}.csv\'.format(ticker), parse_dates=True, index_col=0)\r\ndf_ohlc = df[\'Adj Close\'].resample(\'10D\').ohlc()\r\ndf_ohlc.fillna(method=""ffill"",inplace=True)\r\ndf_ohlc.fillna(method=""bfill"",inplace=True)\r\ndf_volume = df[\'Volume\'].resample(\'10D\').sum()\r\ndf_volume.fillna(method=""ffill"",inplace=True)\r\ndf_volume.fillna(method=""bfill"",inplace=True)\r\ndf_ohlc.reset_index(inplace=True)\r\ndf_ohlc[\'Date\'] = df_ohlc[\'Date\'].map(mdates.date2num)\r\nax1 = plt.subplot2grid((6,1), (0,0), rowspan=5, colspan=1)\r\nax2 = plt.subplot2grid((6,1), (5,0), rowspan=1, colspan=1, sharex=ax1)\r\nax1.xaxis_date()\r\ncandlestick_ohlc(ax1, df_ohlc.values, width=5, colorup=\'g\')\r\nax2.fill_between(df_volume.index.map(mdates.date2num), df_volume.values, 0)\r\nplt.show()\r\n'"
CompileData.py,0,"b'import os\r\nimport pandas as pd\r\nimport pickle as pickle\r\nimport csv\r\nfrom collections import deque \r\n\r\ndef compile_data():\r\n\r\n    def get_first_row():\r\n        with open(\'stock_dfs/SPY.csv\') as f:\r\n            reader = csv.reader(f)\r\n            row1 = next(reader)\r\n            row1 = next(reader)\r\n            return row1[0]\r\n    \r\n    def get_last_row(csv_filename):\r\n        with open(csv_filename, \'rt\') as f:\r\n            return deque(csv.reader(f), 1)[0]\r\n    start=get_first_row()\r\n    end = get_last_row(\'stock_dfs/SPY.csv\')\r\n    dates = pd.date_range(start,end[0])\r\n    \r\n    df = pd.DataFrame(index=dates)\r\n    with open(""sp500tickers.pickle"",""rb"") as f:\r\n            tickers = pickle.load(f)\r\n    for ticker in tickers:\r\n        if(ticker==""BRK.B"" or ticker==""BF.B""):\r\n                continue\r\n        else:\r\n            df_temp = pd.read_csv(\'stock_dfs/{}.csv\'.format(ticker), index_col=\'Date\',parse_dates=True, usecols=[\'Date\', \'Adj Close\'], na_values=[\'nan\'])\r\n            #df_temp.fillna(method=""ffill"",inplace=True)\r\n            #df.fillna(method=""bfill"",inplace=True)\r\n            df_temp = df_temp.rename(columns={\'Adj Close\': ticker})\r\n            df = df.join(df_temp)\r\n            df.fillna(method=""ffill"",inplace=True)\r\n            df.fillna(method=""bfill"",inplace=True)\r\n            print (ticker)\r\n            if ticker == \'SPY\':  # drop dates SPY did not trade\r\n                df = df.dropna(subset=[""SPY""])\r\n            df.to_csv(""CompiledData.csv"")\r\n            \r\n\r\ncompile_data()\r\n'"
Compiled Project Complete.py,2,"b'import mysql.connector\r\nimport sys\r\nfrom tkinter import *\r\nfrom tkinter import messagebox\r\nimport pickle\r\nimport datetime as dt\r\nimport os\r\nimport pandas as pd\r\nimport pandas_datareader.data as web\r\nimport pickle as pickle\r\nfrom collections import deque\r\nimport csv\r\nimport bs4 as bs\r\nfrom collections import Counter\r\nimport datetime as dt\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib import style\r\nimport numpy as np\r\nimport os\r\nimport pandas as pd\r\nimport pandas_datareader.data as web\r\nimport pickle\r\nimport requests\r\nfrom sklearn import svm, cross_validation, neighbors\r\nfrom sklearn.ensemble import VotingClassifier, RandomForestClassifier\r\nimport csv\r\nfrom collections import deque\r\nimport os\r\nimport pandas as pd\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib import style\r\nfrom matplotlib.finance import candlestick_ohlc\r\nimport matplotlib.dates as mdates\r\nimport datetime as dt\r\nimport numpy as np\r\nimport tkinter\r\nimport tkinter as tk\r\nfrom tkinter import *\r\n\r\n\r\n#database connection\r\nconn=mysql.connector.connect(host=\'localhost\',user=\'root\',passwd=\'piyush123\') #connection\r\ncursor = conn.cursor()\r\ncursor.execute(\'use stockprediction;\')\r\n\r\n\r\n#Function to update CSV files\r\n\r\ntodaydate=dt.datetime.now()\r\n\r\ndef get_last_row(csv_filename):\r\n    with open(csv_filename, \'rt\') as f:\r\n        return deque(csv.reader(f), 1)[0]\r\n\r\n\r\n\r\ndef update_data(reload_sp500=False):\r\n            lastline = get_last_row(\'stock_dfs/MMM.csv\')\r\n            values=lastline\r\n            lastdate=values[0]\r\n            print (values[0])\r\n            append_data(lastdate)\r\n\r\n            \r\ndef append_data(lastdate):\r\n    tickers=pickle.load(open(""sp500tickers.pickle"",""rb""))\r\n    for ticker in tickers:\r\n        if(ticker==""BRK.B"" or ticker==""BF.B""):\r\n                continue\r\n\r\n        else:\r\n            start=lastdate\r\n            end = dt.datetime(todaydate.year,todaydate.month, (todaydate.day-1))\r\n            df = web.DataReader(ticker, ""yahoo"", start, end)\r\n            #df_append = pd.read_csv(\'stock_dfs/{}.csv\'.format(ticker),parse_dates=True,index_col=0)\r\n            print (""Appending Data"")\r\n            #df_append.append(df)\r\n            with open(\'stock_dfs/{}.csv\'.format(ticker),\'a\') as f:\r\n                df.to_csv(f,header=False)\r\n\r\n\r\n\r\n#Function to fetch stock data of S&P 500 stocks(names stored in the pickle)\r\n\r\ndef get_data_from_yahoo(reload_sp500=False):\r\n    \r\n    if reload_sp500:\r\n        tickers = save_sp500_tickers()\r\n    else:\r\n        with open(""sp500tickers.pickle"",""rb"") as f:\r\n            tickers = pickle.load(f)\r\n    \r\n    if not os.path.exists(\'stock_dfs\'):\r\n        os.makedirs(\'stock_dfs\')\r\n\r\n    start = dt.datetime(2000, 1, 1)\r\n    end = dt.datetime(todaydate.year,todaydate.month, (todaydate.day-1))\r\n    \r\n    for ticker in tickers:\r\n        #print(ticker)\r\n        if not os.path.exists(\'stock_dfs/{}.csv\'.format(ticker)):\r\n            if(ticker==""BRK.B"" or ticker==""BF.B""):\r\n                continue\r\n            df = web.DataReader(ticker, ""yahoo"", start, end)\r\n            df.to_csv(\'stock_dfs/{}.csv\'.format(ticker))\r\n        else:\r\n            print(\'Already have {}\'.format(ticker))\r\n            continue\r\n        \r\n\r\n\r\n\r\nstyle.use(\'ggplot\')\r\n\r\ncounter=0\r\ncount_0=0\r\ncount_1=0\r\ncount__1=0\r\n\r\ndef compile_data():\r\n\r\n    def get_first_row():\r\n        with open(\'stock_dfs/SPY.csv\') as f:\r\n            reader = csv.reader(f)\r\n            row1 = next(reader)\r\n            row1 = next(reader)\r\n            return row1[0]\r\n    \r\n    def get_last_row(csv_filename):\r\n        with open(csv_filename, \'rt\') as f:\r\n            return deque(csv.reader(f), 1)[0]\r\n    start=get_first_row()\r\n    end = get_last_row(\'stock_dfs/SPY.csv\')\r\n    dates = pd.date_range(start,end[0])\r\n    \r\n    df = pd.DataFrame(index=dates)\r\n    with open(""sp500tickers.pickle"",""rb"") as f:\r\n            tickers = pickle.load(f)\r\n    for ticker in tickers:\r\n        if(ticker==""BRK.B"" or ticker==""BF.B""):\r\n                continue\r\n        else:\r\n            df_temp = pd.read_csv(\'stock_dfs/{}.csv\'.format(ticker), index_col=\'Date\',parse_dates=True, usecols=[\'Date\', \'Adj Close\'], na_values=[\'nan\'])\r\n            #df_temp.fillna(method=""ffill"",inplace=True)\r\n            #df.fillna(method=""bfill"",inplace=True)\r\n            df_temp = df_temp.rename(columns={\'Adj Close\': ticker})\r\n            df = df.join(df_temp)\r\n##            df.fillna(method=""ffill"",inplace=True)\r\n##            df.fillna(method=""bfill"",inplace=True)\r\n            print (ticker)\r\n            if ticker == \'SPY\':  # drop dates SPY did not trade\r\n                df = df.dropna(subset=[""SPY""])\r\n            df.to_csv(""CompiledData1.csv"")\r\n            \r\n\r\n#compile_data()\r\n\r\ndef process_data_for_labels(ticker):\r\n    hm_days = 7\r\n    df = pd.read_csv(\'CompiledData1.csv\', index_col=0)\r\n    tickers = df.columns.values.tolist()\r\n    #df.fillna(0, inplace=True)\r\n    for i in range(1,hm_days+1):\r\n        df[\'{}_{}d\'.format(ticker,i)] = (df[ticker].shift(-i) - df[ticker]) / df[ticker]\r\n        \r\n    #df.fillna(0, inplace=True)\r\n    return tickers, df\r\n\r\ndef buy_sell_hold(*args):\r\n    cols = [c for c in args]\r\n    requirement = 0.02\r\n    for col in cols:\r\n        if col > requirement:\r\n            return 1\r\n        if col < -requirement:\r\n            return -1\r\n    return 0\r\n\r\n\r\ndef extract_featuresets(ticker):\r\n    tickers, df = process_data_for_labels(ticker)\r\n\r\n    df[\'{}_target\'.format(ticker)] = list(map( buy_sell_hold,\r\n                                               df[\'{}_1d\'.format(ticker)],\r\n                                               df[\'{}_2d\'.format(ticker)],\r\n                                               df[\'{}_3d\'.format(ticker)],\r\n                                               df[\'{}_4d\'.format(ticker)],\r\n                                               df[\'{}_5d\'.format(ticker)],\r\n                                               df[\'{}_6d\'.format(ticker)],\r\n                                               df[\'{}_7d\'.format(ticker)] ))\r\n\r\n\r\n    vals = df[\'{}_target\'.format(ticker)].values.tolist()\r\n    str_vals = [str(i) for i in vals]\r\n    #print(\'Data spread:\',Counter(str_vals))\r\n\r\n    df.fillna(0, inplace=True)\r\n    df = df.replace([np.inf, -np.inf], np.nan)\r\n    df.dropna(inplace=True)\r\n\r\n    df_vals = df[[ticker for ticker in tickers]].pct_change()\r\n    df_vals = df_vals.replace([np.inf, -np.inf], 0)\r\n    df_vals.fillna(0, inplace=True)\r\n\r\n    X = df_vals.values\r\n    y = df[\'{}_target\'.format(ticker)].values\r\n    \r\n    return X,y,df\r\n\r\n\r\ndef do_ml(ticker):\r\n    X, y, df = extract_featuresets(ticker)\r\n\r\n    X_train, X_test, y_train, y_test = cross_validation.train_test_split(X,\r\n                                                        y,\r\n                                                        test_size=0.15)\r\n\r\n\r\n    #clf = neighbors.KNeighborsClassifier()\r\n\r\n    clf = VotingClassifier([(\'lsvc\',svm.LinearSVC()),\r\n                            (\'knn\',neighbors.KNeighborsClassifier()),\r\n                            (\'rfor\',RandomForestClassifier())])\r\n\r\n\r\n    clf.fit(X_train, y_train)\r\n    confidence = clf.score(X_test, y_test)\r\n    #print(\'accuracy:\',confidence)\r\n    predictions = clf.predict(X_test)\r\n    c=Counter(predictions)\r\n    #print(\'predicted class counts:\',c)\r\n    li=list(c.items())\r\n    li=sorted(li,key=lambda l:l[1], reverse=True)\r\n    #print (li)\r\n    #print (li[0][0])\r\n    if(li[0][0]==0):\r\n        print(""HOLD ""+ticker)\r\n    if(li[0][0]==1):\r\n        print(""BUY ""+ticker)\r\n    if(li[0][0]==-1):\r\n        print(""SELL ""+ticker)\r\n    return li[0][0]\r\n    print()\r\n    print()\r\n    print()\r\n    return li[0][0]\r\n\r\n##with open(""sp500tickers.pickle"",""rb"") as f:\r\n##            tickers = pickle.load(f)\r\n##\r\n##for ticker in tickers:\r\n##    if(ticker==""BRK.B"" or ticker==""BF.B""):\r\n##                continue\r\n##    else:\r\n##        counter=counter+1\r\n##        print (ticker)\r\n##        a=do_ml(ticker)\r\n##        if(a==0):\r\n##            count_0=count_0+1\r\n##        if(a==1):\r\n##            count_1=count_1+1\r\n##        if(a==-1):\r\n##            count__1=count__1+1\r\n##\r\n##print (count_0)\r\n##print (count_1)\r\n##print (count__1)\r\n##print (counter)\r\n\r\n\r\ndef dailyreturnplot(ticker):\r\n    df = pd.read_csv(""CompiledData1.csv"",parse_dates=True, na_values=[\'nan\'])\r\n    df.fillna(method=""ffill"",inplace=True)\r\n    df.fillna(method=""bfill"",inplace=True)\r\n    dailyreturn=compute_daily_return(df[ticker])\r\n    plot_data(dailyreturn,title=""Daily returns"")\r\n\r\ndef histogram(ticker):\r\n    df = pd.read_csv(""CompiledData1.csv"",parse_dates=True, na_values=[\'nan\'])\r\n    df.fillna(method=""ffill"",inplace=True)\r\n    df.fillna(method=""bfill"",inplace=True)\r\n    dailyreturn=compute_daily_return(df[ticker])\r\n    #plot_data(dailyreturn,title=""Daily returns"")\r\n    #print (dailyreturn.head)\r\n    dailyreturn=dailyreturn.values\r\n    plt.hist(dailyreturn, 20)\r\n    plt.show()\r\ndef compute_daily_return(df):\r\n    daily_ret=df.copy()\r\n    daily_ret[1:]=(df[1:]/df[:-1].values)-1\r\n    daily_ret.ix[0]=0\r\n    return daily_ret\r\ndef plot_data(df, title=""Stock prices""):\r\n    """"""Plot stock prices with a custom title and meaningful axis labels.""""""\r\n    ax = df.plot(title=title, fontsize=12)\r\n    ax.set_xlabel(""Date"")\r\n    ax.set_ylabel(""Price"")\r\n    plt.show()\r\n\r\n    \r\ndef get_rolling_mean(values, window):\r\n    """"""Return rolling mean of given values, using specified window size.""""""\r\n    return pd.rolling_mean(values, window=window)\r\n\r\ndef get_rolling_std(values, window):\r\n    """"""Return rolling standard deviation of given values, using specified window size.""""""\r\n    return pd.rolling_std(values, window=window)\r\n   \r\n\r\ndef get_bollinger_bands(rm,rstd):\r\n    upper_band=rm+rstd*2\r\n    lower_band=rm-rstd*2\r\n    return upper_band,lower_band\r\n\r\ndef bollinger_band(ticker):\r\n    \r\n    df = pd.read_csv(""CompiledData1.csv"",parse_dates=True, na_values=[\'nan\'])\r\n    df.fillna(method=""ffill"",inplace=True)\r\n    df.fillna(method=""bfill"",inplace=True)\r\n    RollingMean = get_rolling_mean(df[ticker], window=20)\r\n    RollingStd = get_rolling_std(df[ticker], window=20)\r\n    upper_band, lower_band = get_bollinger_bands(RollingMean, RollingStd)\r\n    \r\n    ax = df[ticker].plot(title=""Bollinger Bands"", label=ticker)\r\n    RollingMean.plot(label=\'Rolling mean\', ax=ax)\r\n    upper_band.plot(label=\'upper band\', ax=ax)\r\n    lower_band.plot(label=\'lower band\', ax=ax)\r\n    ax.set_xlabel(""Date"")\r\n    ax.set_ylabel(""Price"")\r\n    ax.legend(loc=\'upper left\')\r\n    plt.show()\r\n\r\ndef candlestick(ticker):\r\n    #ticker=input()\r\n\r\n    style.use(\'ggplot\')\r\n    df = pd.read_csv(\'stock_dfs/{}.csv\'.format(ticker), parse_dates=True, index_col=0)\r\n    df_ohlc = df[\'Adj Close\'].resample(\'10D\').ohlc()\r\n    df_ohlc.fillna(method=""ffill"",inplace=True)\r\n    df_ohlc.fillna(method=""bfill"",inplace=True)\r\n    df_volume = df[\'Volume\'].resample(\'10D\').sum()\r\n    df_volume.fillna(method=""ffill"",inplace=True)\r\n    df_volume.fillna(method=""bfill"",inplace=True)\r\n    df_ohlc.reset_index(inplace=True)\r\n    df_ohlc[\'Date\'] = df_ohlc[\'Date\'].map(mdates.date2num)\r\n    ax1 = plt.subplot2grid((6,1), (0,0), rowspan=5, colspan=1)\r\n    ax2 = plt.subplot2grid((6,1), (5,0), rowspan=1, colspan=1, sharex=ax1)\r\n    ax1.xaxis_date()\r\n    candlestick_ohlc(ax1, df_ohlc.values, width=5, colorup=\'g\')\r\n    ax2.fill_between(df_volume.index.map(mdates.date2num), df_volume.values, 0)\r\n    plt.show()\r\n\r\ndef custom_stats(var1,var2,var3,ticker):\r\n    \r\n    df = pd.read_csv(""CompiledData1.csv"",parse_dates=True, na_values=[\'nan\'])\r\n    df.fillna(method=""ffill"",inplace=True)\r\n    df.fillna(method=""bfill"",inplace=True)\r\n    ax = df[ticker].plot(title=""Custom Stats"", label=ticker)\r\n    \r\n    def plot_mean():\r\n        RollingMean = get_rolling_mean(df[ticker], window=20)\r\n        RollingMean.plot(label=\'Rolling mean\', ax=ax)\r\n\r\n    def plot_std():\r\n        RollingStd = get_rolling_std(df[ticker], window=20)\r\n        RollingStd.plot(label=\'Rolling Standard\', ax=ax)\r\n\r\n    def plot_median():\r\n        RollingMedian = get_rolling_median(df[ticker],window=20)\r\n        RollingMedian.plot(label=\'Rolling Median\',ax=ax)\r\n    if(var1==1):\r\n        plot_mean()\r\n        if(var2==1):\r\n            plot_std()\r\n            if(var3==1):\r\n                plot_median()\r\n        else:\r\n            if(var3==1):\r\n                plot_median()\r\n    else:\r\n        if(var2==1):\r\n            plot_std()\r\n            if(var3==1):\r\n                plot_median()\r\n        else:\r\n            if(var3==1):\r\n                plot_median()\r\n    ax.set_xlabel(""Date"")\r\n    ax.set_ylabel(""Price"")\r\n    ax.legend(loc=\'upper left\')\r\n    plt.show()\r\n  \r\n\r\n\r\ndef visual():\r\n    app= Tk()\r\n\r\n    #comp =[(1,""Mean""),(2,""Standard Deviation""),(3,""Median"")]\r\n\r\n    button1 = tk.Button(app, text=\'Histogram\',height=2, width=20,fg=""white"", bg=""slate blue"", command=lambda: histogram(symbolname.get()))\r\n    button1.grid(column=0, row=0, pady=10, padx=10, sticky=(tkinter.N))\r\n\r\n    button2 = tk.Button(app, text=\'Daily Return Plot\',height=2, width=20,fg=""white"", bg=""slate blue"", command=lambda: dailyreturnplot(symbolname.get()))\r\n    button2.grid(column=0, row=1, pady=10, padx=10, sticky=(tkinter.N))\r\n\r\n    button3 = tk.Button(app, text=\'Bollinger Band Analysis\',height=2, width=20,fg=""white"", bg=""slate blue"", command=lambda: bollinger_band(symbolname.get()))\r\n    button3.grid(column=0, row=2, pady=10, padx=10, sticky=(tkinter.N))\r\n\r\n    button4 = tk.Button(app, text=\'Candlestick Analysis\',height=2, width=20,fg=""white"", bg=""slate blue"", command=lambda: candlestick(symbolname.get()))\r\n    button4.grid(column=0, row=3, pady=10, padx=10, sticky=(tkinter.N))\r\n\r\n    label = tk.Label(app, text=\'Select your Stats\', font=(""Courier"", 20),fg=""slate blue"")\r\n    label.grid(column=1, row=0, pady=10, padx=50, sticky=(tkinter.E))\r\n\r\n    var1 = IntVar()\r\n    var2 = IntVar()\r\n    var3 = IntVar()\r\n\r\n    Checkbutton(app, text=""Mean"", variable=var1,command =lambda: custom_stats(var1.get(),var2.get(),var3.get(),symbolname.get())).grid(column=1,pady=5, padx=10, row=1,rowspan=1, sticky=(tkinter.N))\r\n    \r\n    Checkbutton(app, text=""Standard Deviation"", variable=var2,command =lambda: custom_stats(var1.get(),var2.get(),var3.get(),symbolname.get())).grid(column=1, row=2,pady=5, padx=10,rowspan=1, sticky=(tkinter.N))\r\n    \r\n    Checkbutton(app, text=""Median"", variable=var3,command =lambda: custom_stats(var1.get(),var2.get(),var3.get(),symbolname.get())).grid(column=1, row=3,pady=5, padx=10,rowspan=1, sticky=(tkinter.N))\r\n\r\n    #for v,data in comp:\r\n     #   Checkbutton(app, text=data, variable=v).grid(column=1, padx=10, sticky=(tkinter.N+W+E+S))\r\n\r\n    label2 = tk.Label(app, text=\'Enter Stock\', font=(""Courier"", 20),fg=""slate blue"")\r\n    label2.grid(column=2, row=0, pady=10, padx=20, sticky=(tkinter.E))\r\n\r\n    symbolname = Entry(app)\r\n    symbolname.grid(row=1, column=2,padx=15, pady=5)\r\n\r\n    button5 = tk.Button(app, text=\'OK\',height=2, width=20,fg=""white"", bg=""slate blue"", command=lambda: symbolselected(symbolname.get()))\r\n    button5.grid(column=2, row=2, pady=10, padx=10, sticky=(tkinter.N))\r\n\r\n    #scrollbar\r\n    frame=Frame(app,width=50,height=50)\r\n    frame.grid(row=3,column=2,pady=10)\r\n    canvas=Canvas(frame,bg=\'grey\',width=50,height=50)\r\n\r\n    f = open(\'sp500tickers.pickle\',\'rb\')\r\n    mydata= pickle.load(f)\r\n    f.close()\r\n\r\n\r\n    canvas.config(width=50,height=50)\r\n    #canvas.config(xscrollcommand=hbar.set, yscrollcommand=vbar.set)\r\n    canvas.pack(side=LEFT,expand=True,fill=BOTH)\r\n\r\n    scrollbar = Scrollbar(canvas)\r\n    scrollbar.pack( side = RIGHT, fill=Y )\r\n\r\n    mylist = Listbox(canvas, yscrollcommand = scrollbar.set )\r\n    for line in mydata:\r\n       mylist.insert(END,line)\r\n\r\n    mylist.pack( side = LEFT, fill = BOTH )\r\n    scrollbar.config( command = mylist.yview )\r\n\r\n\r\n\r\n   \r\n    \r\n\r\n    app.mainloop()\r\n\r\n\r\n#visual()\r\n\r\n\r\n\r\n\r\n\r\n\r\ndef CheckLogin(luname,lpass):\r\n    \r\n    cursor.execute(""SELECT name FROM login_tb where uname=%s and password=%s"",(luname,lpass))\r\n\r\n    \r\n    row = cursor.fetchone()\r\n\r\n    if(row):\r\n          after_login=Tk()\r\n          after_login.title(\'Welcome\')\r\n          name=Label(after_login, text=""Hello!  ""+row[0],fg=""slate blue"",font=""Helvetica 12 bold"")\r\n          name.grid(row=1, sticky=W, column=1,pady=10,padx=15)\r\n          row = cursor.fetchone()\r\n          updateButton = Button(after_login, text=\'UPDATE DATA\',fg=""white"",bg=""slate blue"",font=""Helvetica 10"",pady=5, command=lambda:update_data())\r\n          updateButton.grid(row=2, sticky=W, column=1,pady=10,padx=15)\r\n\r\n          fetchButton = Button(after_login, text=\'FETCH DATA\',fg=""white"",bg=""slate blue"",font=""Helvetica 10"",pady=5,command=lambda:get_data_from_yahoo() )\r\n          fetchButton.grid(row=3, sticky=W, column=1,pady=10,padx=15)\r\n\r\n          visualButton = Button(after_login, text=\'VISUALIZATION\',fg=""white"",bg=""slate blue"",font=""Helvetica 10"",pady=5,command=lambda:visual() )\r\n          visualButton.grid(row=4, sticky=W, column=1,pady=10,padx=15)\r\n\r\n\r\n          name=Label(after_login, text=""Select Symbol"",fg=""slate blue"",font=""Helvetica 12 "")\r\n          name.grid(row=2, sticky=W, column=2,padx=15)\r\n\r\n          symname = Entry(after_login)\r\n          symname.grid(row=3, column=2,padx=15, pady=5)\r\n          \r\n          paButton = Button(after_login, text=\'Predefined Analysis\',fg=""white"",bg=""slate blue"",font=""Helvetica 10"",pady=5,command=lambda:do_ml(symname.get()) )\r\n          paButton.grid(row=4, column=2,padx=15, pady=5)\r\n\r\n          #scrollbar\r\n          frame=Frame(after_login,width=50,height=50)\r\n          frame.grid(row=5,column=2,pady=10)\r\n          canvas=Canvas(frame,bg=\'grey\',width=50,height=50)\r\n\r\n          f = open(\'sp500tickers.pickle\',\'rb\')\r\n          mydata= pickle.load(f)\r\n          f.close()\r\n\r\n          canvas.config(width=50,height=50)\r\n          #canvas.config(xscrollcommand=hbar.set, yscrollcommand=vbar.set)\r\n          canvas.pack(side=LEFT,expand=True,fill=BOTH)\r\n\r\n          scrollbar = Scrollbar(canvas)\r\n          scrollbar.pack( side = RIGHT, fill=Y )\r\n\r\n          mylist = Listbox(canvas, yscrollcommand = scrollbar.set )\r\n          for line in mydata:\r\n               mylist.insert(END,line)\r\n\r\n          mylist.pack( side = LEFT, fill = BOTH )\r\n          scrollbar.config( command = mylist.yview )\r\n\r\n          \r\n          \r\n    else:\r\n          messagebox.showinfo(title=""login"",message=""Incorrect login credentials"")\r\n\r\n\r\n\r\n\r\ndef FSSignup(suname,spass,sname):\r\n    \r\n    try:\r\n   # Execute the SQL command\r\n     cursor.execute(""""""INSERT INTO login_tb (uname,password,name) VALUES(%s,%s,%s)"""""",(suname,spass,sname))\r\n   # Commit your changes in the database\r\n     conn.commit()\r\n     messagebox.showinfo(title=""Signup"",message=""signup successful!"")\r\n    except:\r\n     # Rollback in case there is any error\r\n     conn.rollback\r\n    \r\n\r\n\r\ndef quit():\r\n    mexit = messagebox.askyesno(title=""Quit"", message=""Are you sure?"")\r\n    if mexit > 0:\r\n       root.destroy()\r\n       return\r\n\r\ndef login():\r\n        llabel=Label(root, text=\'LOGIN\',fg=""slate blue"",font=""Helvetica 12 bold"")\r\n        llabel.grid(row=2,column=64)\r\n\r\n        nameL = Label(root, text=\'Username: \',fg=""slate blue"",font=""Helvetica 10"") # More labels\r\n        pwordL = Label(root, text=\'Password: \',fg=""slate blue"",font=""Helvetica 10"") # ^\r\n        nameL.grid(row=6, sticky=W, column=63,pady=10,padx=15)\r\n        pwordL.grid(row=7, sticky=W, column=63,pady=10,padx=15)\r\n     \r\n        nameEL = Entry(root) # The entry input\r\n        pwordEL = Entry(root, show=\'*\')\r\n        nameEL.grid(row=6, column=65,padx=15)\r\n        pwordEL.grid(row=7, column=65,padx=15)\r\n     \r\n        loginB = Button(root, text=\'Submit\',fg=""white"", bg=""slate blue"", command=lambda: CheckLogin(nameEL.get(), pwordEL.get())) # This makes the login button, which will go to the CheckLogin def.\r\n        loginB.grid(row=9,column=64, sticky=W,pady=10,padx=15)\r\n\r\n          \r\n\r\n         \r\n\r\ndef signup():\r\n\r\n    \r\n       Sroot=Tk()\r\n       Sroot.title(\'New User Signup\')\r\n       slabel=Label(Sroot, text=\'New User!\',fg=""slate blue"",font=""Helvetica 12 bold"")\r\n       slabel.grid(row=1,column=1,pady=20)\r\n       unameL = Label(Sroot, text=\'New Email: \',fg=""slate blue"",font=""Helvetica 10"") # This just does the same as above, instead with the text new username.\r\n       pwordL = Label(Sroot, text=\'New Password: \',fg=""slate blue"",font=""Helvetica 10"") # ^^\r\n       nameL = Label(Sroot, text=\'Name : \',fg=""slate blue"",font=""Helvetica 10"")\r\n       unameL.grid(row=2, column=0, sticky=W,padx=15,pady=10) # Same thing as the instruction var just on different rows. :) Tkinter is like that.\r\n       pwordL.grid(row=3, column=0, sticky=W,padx=15,pady=10) # ^^\r\n       nameL.grid(row=4, column=0, sticky=W,padx=15,pady=10) # ^^\r\n\r\n       unameE = Entry(Sroot,textvariable=uname) # This now puts a text box waiting for input.\r\n       pwordE = Entry(Sroot, show=\'*\',textvariable=passw) # Same as above, yet \'show=""*""\' What this does is replace the text with *, like a password box :D\r\n       nameE = Entry(Sroot,textvariable=name)\r\n       unameE.grid(row=2, column=2,padx=15) # You know what this does now :D\r\n       pwordE.grid(row=3, column=2,padx=15) # ^^\r\n       nameE.grid(row=4, column=2,padx=15)\r\n     \r\n       signupButton = Button(Sroot, text=\'Submit\',fg=""white"",bg=""slate blue"",font=""Helvetica 10"", command=lambda: FSSignup(unameE.get(), pwordE.get(),nameE.get())) # This creates the button with the text \'signup\', when you click it, the command \'fssignup\' will run. which is the def\r\n       signupButton.grid(row=6,column=1, sticky=W,padx=15,pady=10)\r\n       Sroot.mainloop()\r\n\r\n\r\n    \r\n\r\n#main page    \r\nroot=Tk()\r\n#signup variables\r\nuname=StringVar()\r\npassw=StringVar()\r\nname=StringVar()\r\n\r\nroot.title(\'Prediction of stock\')\r\n\r\n\r\n#menu\r\nmenubar=Menu(root)\r\nmenubar.add_cascade(label=\'Login\', command= login)\r\nmenubar.add_cascade(label=\'Signup\', command= signup)\r\nmenubar.add_cascade(label=\'Close\', command= quit)\r\n\r\nroot.config(menu=menubar)\r\n\r\n\r\nroot.mainloop()\r\n\r\n\r\n'"
CustomStats.py,0,"b'import datetime as dt\r\nimport numpy as np\r\nimport pandas as pd\r\nimport matplotlib.pyplot as plt\r\n\r\n#ticker = \'GOOG\'\r\n#type(ticker)\r\n\r\ndef get_rolling_mean(values, window):\r\n    return pd.rolling_mean(values, window=window)\r\n\r\ndef get_rolling_std(values, window):\r\n    return pd.rolling_std(values, window=window)\r\n\r\ndef get_rolling_median(values, window):\r\n    return pd.rolling_median(values, window=window)\r\n\r\ndef custom_stats(var1,var2,var3,ticker):\r\n    \r\n    df = pd.read_csv(""CompiledData.csv"",parse_dates=True, na_values=[\'nan\'])\r\n    df.fillna(method=""ffill"",inplace=True)\r\n    df.fillna(method=""bfill"",inplace=True)\r\n    ax = df[ticker].plot(title=""Custom Stats"", label=ticker)\r\n    \r\n    def plot_mean():\r\n        RollingMean = get_rolling_mean(df[ticker], window=20)\r\n        RollingMean.plot(label=\'Rolling mean\', ax=ax)\r\n\r\n    def plot_std():\r\n        RollingStd = get_rolling_std(df[ticker], window=20)\r\n        RollingStd.plot(label=\'Rolling Standard\', ax=ax)\r\n\r\n    def plot_median():\r\n        RollingMedian = get_rolling_median(df[ticker],window=20)\r\n        RollingMedian.plot(label=\'Rolling Median\',ax=ax)\r\n    if(var1==1):\r\n        plot_mean()\r\n        if(var2==1):\r\n            plot_std()\r\n            if(var3==1):\r\n                plot_median()\r\n        else:\r\n            if(var3==1):\r\n                plot_median()\r\n    else:\r\n        if(var2==1):\r\n            plot_std()\r\n            if(var3==1):\r\n                plot_median()\r\n        else:\r\n            if(var3==1):\r\n                plot_median()\r\n    ax.set_xlabel(""Date"")\r\n    ax.set_ylabel(""Price"")\r\n    ax.legend(loc=\'upper left\')\r\n    plt.show()\r\n\r\n#custom_stats()\r\n'"
DailyReturnPlot.py,0,"b'import os\r\nimport pandas as pd\r\nimport matplotlib.pyplot as plt\r\nimport datetime as dt\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\nticker=input()\r\n\r\ndef compute_daily_return(df):\r\n    daily_ret=df.copy()\r\n    daily_ret[1:]=(df[1:]/df[:-1].values)-1\r\n    daily_ret.ix[0]=0\r\n    return daily_ret\r\ndef plot_data(df, title=""Stock prices""):\r\n    ax = df.plot(title=title, fontsize=12)\r\n    ax.set_xlabel(""Date"")\r\n    ax.set_ylabel(""Price"")\r\n    plt.show()\r\n\r\ndef dailyreturnplot():\r\n    df = pd.read_csv(""CompiledData.csv"",parse_dates=True, na_values=[\'nan\'])\r\n    df.fillna(method=""ffill"",inplace=True)\r\n    df.fillna(method=""bfill"",inplace=True)\r\n    dailyreturn=compute_daily_return(df[ticker])\r\n    plot_data(dailyreturn,title=""Daily returns"")\r\n    \r\ndailyreturnplot()\r\n'"
GetTickerList.py,0,"b'import bs4 as bs\r\nimport datetime as dt\r\nimport os\r\nimport pandas as pd\r\nimport pandas_datareader.data as web\r\nimport pickle as pickle\r\nimport requests\r\nimport time\r\n\r\n#Function to fetch list of S&P 500 stocks\r\n\r\ndef save_sp500_tickers():\r\n    resp = requests.get(\'http://en.wikipedia.org/wiki/List_of_S%26P_500_companies\')\r\n    soup = bs.BeautifulSoup(resp.text, \'lxml\')\r\n    table = soup.find(\'table\', {\'class\': \'wikitable sortable\'})\r\n    tickers = []\r\n    for row in table.findAll(\'tr\')[1:]:\r\n        ticker = row.findAll(\'td\')[0].text\r\n        tickers.append(ticker)\r\n\r\n    tickers.append(""SPY"")\r\n        \r\n    with open(""sp500tickers.pickle"",""wb"") as f:\r\n        pickle.dump(tickers,f)\r\n        \r\n    return tickers\r\n\r\nsave_sp500_tickers()\r\n'"
Histogram.py,0,"b'import os\r\nimport pandas as pd\r\nimport matplotlib.pyplot as plt\r\nimport datetime as dt\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\nticker=input()\r\n\r\ndef compute_daily_return(df):\r\n    daily_ret=df.copy()\r\n    daily_ret[1:]=(df[1:]/df[:-1].values)-1\r\n    daily_ret.ix[0]=0\r\n    return daily_ret\r\ndef plot_data(df, title=""Stock prices""):\r\n    """"""Plot stock prices with a custom title and meaningful axis labels.""""""\r\n    ax = df.plot(title=title, fontsize=12)\r\n    ax.set_xlabel(""Date"")\r\n    ax.set_ylabel(""Price"")\r\n    plt.show()\r\n\r\ndef histogram():\r\n    df = pd.read_csv(""CompiledData.csv"",parse_dates=True, na_values=[\'nan\'])\r\n    df.fillna(method=""ffill"",inplace=True)\r\n    df.fillna(method=""bfill"",inplace=True)\r\n    dailyreturn=compute_daily_return(df[ticker])\r\n    #plot_data(dailyreturn,title=""Daily returns"")\r\n    #print (dailyreturn.head)\r\n    dailyreturn=dailyreturn.values\r\n    plt.hist(dailyreturn, 20)\r\n    plt.show()\r\n    \r\nhistogram()\r\n'"
ML Test 2.py,2,"b'import bs4 as bs\r\nfrom collections import Counter\r\nimport datetime as dt\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib import style\r\nimport numpy as np\r\nimport os\r\nimport pandas as pd\r\nimport pandas_datareader.data as web\r\nimport pickle\r\nimport requests\r\nfrom sklearn import svm, cross_validation, neighbors\r\nfrom sklearn.ensemble import VotingClassifier, RandomForestClassifier\r\nimport csv\r\nfrom collections import deque \r\n\r\nstyle.use(\'ggplot\')\r\n\r\ncounter=0\r\ncount_0=0\r\ncount_1=0\r\ncount__1=0\r\n\r\ndef compile_data():\r\n\r\n    def get_first_row():\r\n        with open(\'stock_dfs/SPY.csv\') as f:\r\n            reader = csv.reader(f)\r\n            row1 = next(reader)\r\n            row1 = next(reader)\r\n            return row1[0]\r\n    \r\n    def get_last_row(csv_filename):\r\n        with open(csv_filename, \'rt\') as f:\r\n            return deque(csv.reader(f), 1)[0]\r\n    start=get_first_row()\r\n    end = get_last_row(\'stock_dfs/SPY.csv\')\r\n    dates = pd.date_range(start,end[0])\r\n    \r\n    df = pd.DataFrame(index=dates)\r\n    with open(""sp500tickers.pickle"",""rb"") as f:\r\n            tickers = pickle.load(f)\r\n    for ticker in tickers:\r\n        if(ticker==""BRK.B"" or ticker==""BF.B""):\r\n                continue\r\n        else:\r\n            df_temp = pd.read_csv(\'stock_dfs/{}.csv\'.format(ticker), index_col=\'Date\',parse_dates=True, usecols=[\'Date\', \'Adj Close\'], na_values=[\'nan\'])\r\n            #df_temp.fillna(method=""ffill"",inplace=True)\r\n            #df.fillna(method=""bfill"",inplace=True)\r\n            df_temp = df_temp.rename(columns={\'Adj Close\': ticker})\r\n            df = df.join(df_temp)\r\n##            df.fillna(method=""ffill"",inplace=True)\r\n##            df.fillna(method=""bfill"",inplace=True)\r\n            print (ticker)\r\n            if ticker == \'SPY\':  # drop dates SPY did not trade\r\n                df = df.dropna(subset=[""SPY""])\r\n            df.to_csv(""CompiledData1.csv"")\r\n            \r\n\r\n#compile_data()\r\n\r\ndef process_data_for_labels(ticker):\r\n    hm_days = 7\r\n    df = pd.read_csv(\'CompiledData1.csv\', index_col=0)\r\n    tickers = df.columns.values.tolist()\r\n    #df.fillna(0, inplace=True)\r\n    for i in range(1,hm_days+1):\r\n        df[\'{}_{}d\'.format(ticker,i)] = (df[ticker].shift(-i) - df[ticker]) / df[ticker]\r\n        \r\n    #df.fillna(0, inplace=True)\r\n    return tickers, df\r\n\r\ndef buy_sell_hold(*args):\r\n    cols = [c for c in args]\r\n    requirement = 0.02\r\n    for col in cols:\r\n        if col > requirement:\r\n            return 1\r\n        if col < -requirement:\r\n            return -1\r\n    return 0\r\n\r\n\r\ndef extract_featuresets(ticker):\r\n    tickers, df = process_data_for_labels(ticker)\r\n\r\n    df[\'{}_target\'.format(ticker)] = list(map( buy_sell_hold,\r\n                                               df[\'{}_1d\'.format(ticker)],\r\n                                               df[\'{}_2d\'.format(ticker)],\r\n                                               df[\'{}_3d\'.format(ticker)],\r\n                                               df[\'{}_4d\'.format(ticker)],\r\n                                               df[\'{}_5d\'.format(ticker)],\r\n                                               df[\'{}_6d\'.format(ticker)],\r\n                                               df[\'{}_7d\'.format(ticker)] ))\r\n\r\n\r\n    vals = df[\'{}_target\'.format(ticker)].values.tolist()\r\n    str_vals = [str(i) for i in vals]\r\n    print(\'Data spread:\',Counter(str_vals))\r\n\r\n    df.fillna(0, inplace=True)\r\n    df = df.replace([np.inf, -np.inf], np.nan)\r\n    df.dropna(inplace=True)\r\n\r\n    df_vals = df[[ticker for ticker in tickers]].pct_change()\r\n    df_vals = df_vals.replace([np.inf, -np.inf], 0)\r\n    df_vals.fillna(0, inplace=True)\r\n\r\n    X = df_vals.values\r\n    y = df[\'{}_target\'.format(ticker)].values\r\n    \r\n    return X,y,df\r\n\r\n\r\ndef do_ml(ticker):\r\n    X, y, df = extract_featuresets(ticker)\r\n\r\n    X_train, X_test, y_train, y_test = cross_validation.train_test_split(X,\r\n                                                        y,\r\n                                                        test_size=0.15)\r\n\r\n\r\n    #clf = neighbors.KNeighborsClassifier()\r\n\r\n    clf = VotingClassifier([(\'lsvc\',svm.LinearSVC()),\r\n                            (\'knn\',neighbors.KNeighborsClassifier()),\r\n                            (\'rfor\',RandomForestClassifier())])\r\n\r\n\r\n    clf.fit(X_train, y_train)\r\n    confidence = clf.score(X_test, y_test)\r\n    print(\'accuracy:\',confidence)\r\n    predictions = clf.predict(X_test)\r\n    c=Counter(predictions)\r\n    print(\'predicted class counts:\',c)\r\n    li=list(c.items())\r\n    li=sorted(li,key=lambda l:l[1], reverse=True)\r\n    print (li)\r\n    print (li[0][0])\r\n    print()\r\n    print()\r\n    print()\r\n    return li[0][0]\r\n\r\nwith open(""sp500tickers.pickle"",""rb"") as f:\r\n            tickers = pickle.load(f)\r\n\r\nfor ticker in tickers:\r\n    if(ticker==""BRK.B"" or ticker==""BF.B""):\r\n                continue\r\n    else:\r\n        counter=counter+1\r\n        print (ticker)\r\n        a=do_ml(ticker)\r\n        if(a==0):\r\n            count_0=count_0+1\r\n        if(a==1):\r\n            count_1=count_1+1\r\n        if(a==-1):\r\n            count__1=count__1+1\r\n\r\nprint (count_0)\r\nprint (count_1)\r\nprint (count__1)\r\nprint (counter)\r\n\r\n'"
StockDataFetch.py,0,"b'import datetime as dt\r\nimport os\r\nimport pandas as pd\r\nimport pandas_datareader.data as web\r\nimport pickle as pickle\r\n\r\n#Function to fetch stock data of S&P 500 stocks(names stored in the pickle)\r\n\r\ntodaydate=dt.datetime.now()\r\n\r\ndef get_data_from_yahoo(reload_sp500=False):\r\n    \r\n    if reload_sp500:\r\n        tickers = save_sp500_tickers()\r\n    else:\r\n        with open(""sp500tickers.pickle"",""rb"") as f:\r\n            tickers = pickle.load(f)\r\n    \r\n    if not os.path.exists(\'stock_dfs\'):\r\n        os.makedirs(\'stock_dfs\')\r\n\r\n    start = dt.datetime(2000, 1, 1)\r\n    end = dt.datetime(todaydate.year,todaydate.month, (todaydate.day-1))\r\n    \r\n    for ticker in tickers:\r\n        #print(ticker)\r\n        if not os.path.exists(\'stock_dfs/{}.csv\'.format(ticker)):\r\n            if(ticker==""BRK.B"" or ticker==""BF.B""):\r\n                continue\r\n            df = web.DataReader(ticker, ""yahoo"", start, end)\r\n            df.to_csv(\'stock_dfs/{}.csv\'.format(ticker))\r\n        else:\r\n            print(\'Already have {}\'.format(ticker))\r\n            continue\r\n        \r\nget_data_from_yahoo()\r\n'"
UpdateStockData.py,0,"b'import datetime as dt\r\nimport os\r\nimport pandas as pd\r\nimport pandas_datareader.data as web\r\nimport pickle as pickle\r\nfrom collections import deque\r\nimport csv\r\n\r\n\r\n\r\n#Function to update CSV files\r\n\r\ntodaydate=dt.datetime.now()\r\n\r\ndef get_last_row(csv_filename):\r\n    with open(csv_filename, \'rt\') as f:\r\n        return deque(csv.reader(f), 1)[0]\r\n\r\n\r\n\r\ndef update_data(reload_sp500=False):\r\n            lastline = get_last_row(\'stock_dfs/MMM.csv\')\r\n            values=lastline\r\n            lastdate=values[0]\r\n            print (values[0])\r\n            append_data(lastdate)\r\n\r\n            \r\ndef append_data(lastdate):\r\n    tickers=pickle.load(open(""sp500tickers.pickle"",""rb""))\r\n    for ticker in tickers:\r\n        if(ticker==""BRK.B"" or ticker==""BF.B""):\r\n                continue\r\n\r\n        else:\r\n            start=lastdate\r\n            end = dt.datetime(todaydate.year,todaydate.month, (todaydate.day-1))\r\n            df = web.DataReader(ticker, ""yahoo"", start, end)\r\n            #df_append = pd.read_csv(\'stock_dfs/{}.csv\'.format(ticker),parse_dates=True,index_col=0)\r\n            print (""Appending Data"")\r\n            #df_append.append(df)\r\n            with open(\'stock_dfs/{}.csv\'.format(ticker),\'a\') as f:\r\n                df.to_csv(f,header=False)\r\n\r\nupdate_data()\r\n'"
mainpage.py,0,"b'import mysql.connector\r\nimport sys\r\nfrom tkinter import *\r\nfrom tkinter import messagebox\r\n#from UpdateStockData import update_data\r\n#from StockDataFetch import get_data_from_yahoo\r\n#from test2 import visual\r\n\r\n\r\n#database connection\r\nconn=mysql.connector.connect(host=\'localhost\',user=\'root\',passwd=\'piyush123\') #connection\r\ncursor = conn.cursor()\r\ncursor.execute(\'use stockprediction;\')\r\n\r\n\r\n#def updatedata():\r\n #   print(""In updatedata"")\r\n\r\n#def visualization():\r\n #   print(""In visualization"")\r\n\r\n#def fetchdata():\r\n #   print(""In fetchdata"")\r\n\r\n#def predefined_analysis():\r\n #   print(""In predefined_anaylysis"")\r\n\r\n\r\ndef CheckLogin(luname,lpass):\r\n    \r\n    cursor.execute(""SELECT name FROM login_tb where uname=%s and password=%s"",(luname,lpass))\r\n\r\n    \r\n    row = cursor.fetchone()\r\n\r\n    if(row):\r\n          after_login=Tk()\r\n          after_login.title(\'Welcome\')\r\n          name=Label(after_login, text=""Hello!  ""+row[0],fg=""slate blue"",font=""Helvetica 12 bold"").pack(pady=20)\r\n          row = cursor.fetchone()\r\n #         updateButton = Button(after_login, text=\'UPDATE DATA\',fg=""white"",bg=""slate blue"",font=""Helvetica 10"",pady=5, command=lambda:update_data()).pack(pady=10,padx=20)\r\n  #        fetchButton = Button(after_login, text=\'FETCH DATA\',fg=""white"",bg=""slate blue"",font=""Helvetica 10"",pady=5,command=lambda:get_data_from_yahoo() ).pack(pady=10,padx=20)\r\n          visualButton = Button(after_login, text=\'VISUALIZATION\',fg=""white"",bg=""slate blue"",font=""Helvetica 10"",pady=5,command=lambda:visual() ).pack(pady=10,padx=20)\r\n          paButton = Button(after_login, text=\'PREDEFINED ANALYSIS\',fg=""white"",bg=""slate blue"",font=""Helvetica 10"",pady=5,command=lambda:predefined_analysis() ).pack(pady=10,padx=20)\r\n    else:\r\n          messagebox.showinfo(title=""login"",message=""Incorrect login credentials"")\r\n\r\n\r\n\r\n\r\ndef FSSignup(suname,spass,sname):\r\n    \r\n    try:\r\n   # Execute the SQL command\r\n     cursor.execute(""""""INSERT INTO login_tb (uname,password,name) VALUES(%s,%s,%s)"""""",(suname,spass,sname))\r\n   # Commit your changes in the database\r\n     conn.commit()\r\n     messagebox.showinfo(title=""Signup"",message=""signup successful!"")\r\n    except:\r\n     # Rollback in case there is any error\r\n     conn.rollback\r\n    \r\n\r\n\r\ndef quit():\r\n    mexit = messagebox.askyesno(title=""Quit"", message=""Are you sure?"")\r\n    if mexit > 0:\r\n       root.destroy()\r\n       return\r\n\r\ndef login():\r\n        llabel=Label(root, text=\'LOGIN\',fg=""slate blue"",font=""Helvetica 12 bold"")\r\n        llabel.grid(row=2,column=64)\r\n\r\n        #photo = PhotoImage(file=""C:/Users/Khattar/Desktop/stock/index.png"")\r\n        #plabel=Label(root, image=photo)\r\n        llabel.grid(row=3,column=64)\r\n\r\n        nameL = Label(root, text=\'Username: \',fg=""slate blue"",font=""Helvetica 10"") # More labels\r\n        pwordL = Label(root, text=\'Password: \',fg=""slate blue"",font=""Helvetica 10"") # ^\r\n        nameL.grid(row=6, sticky=W, column=63,pady=10,padx=15)\r\n        pwordL.grid(row=7, sticky=W, column=63,pady=10,padx=15)\r\n     \r\n        nameEL = Entry(root) # The entry input\r\n        pwordEL = Entry(root, show=\'*\')\r\n        nameEL.grid(row=6, column=65,padx=15)\r\n        pwordEL.grid(row=7, column=65,padx=15)\r\n     \r\n        loginB = Button(root, text=\'Submit\',fg=""white"", bg=""slate blue"", command=lambda: CheckLogin(nameEL.get(), pwordEL.get())) # This makes the login button, which will go to the CheckLogin def.\r\n        loginB.grid(row=9,column=64, sticky=W,pady=10,padx=15)\r\n\r\n          \r\n\r\n         \r\n\r\ndef signup():\r\n\r\n    \r\n       Sroot=Tk()\r\n       Sroot.title(\'New User Signup\')\r\n       slabel=Label(Sroot, text=\'New User!\',fg=""slate blue"",font=""Helvetica 12 bold"")\r\n       slabel.grid(row=1,column=1,pady=20)\r\n       unameL = Label(Sroot, text=\'New Email: \',fg=""slate blue"",font=""Helvetica 10"") # This just does the same as above, instead with the text new username.\r\n       pwordL = Label(Sroot, text=\'New Password: \',fg=""slate blue"",font=""Helvetica 10"") # ^^\r\n       nameL = Label(Sroot, text=\'Name : \',fg=""slate blue"",font=""Helvetica 10"")\r\n       unameL.grid(row=2, column=0, sticky=W,padx=15,pady=10) # Same thing as the instruction var just on different rows. :) Tkinter is like that.\r\n       pwordL.grid(row=3, column=0, sticky=W,padx=15,pady=10) # ^^\r\n       nameL.grid(row=4, column=0, sticky=W,padx=15,pady=10) # ^^\r\n\r\n       unameE = Entry(Sroot,textvariable=uname) # This now puts a text box waiting for input.\r\n       pwordE = Entry(Sroot, show=\'*\',textvariable=passw) # Same as above, yet \'show=""*""\' What this does is replace the text with *, like a password box :D\r\n       nameE = Entry(Sroot,textvariable=name)\r\n       unameE.grid(row=2, column=2,padx=15) # You know what this does now :D\r\n       pwordE.grid(row=3, column=2,padx=15) # ^^\r\n       nameE.grid(row=4, column=2,padx=15)\r\n     \r\n       signupButton = Button(Sroot, text=\'Submit\',fg=""white"",bg=""slate blue"",font=""Helvetica 10"", command=lambda: FSSignup(unameE.get(), pwordE.get(),nameE.get())) # This creates the button with the text \'signup\', when you click it, the command \'fssignup\' will run. which is the def\r\n       signupButton.grid(row=6,column=1, sticky=W,padx=15,pady=10)\r\n       Sroot.mainloop()\r\n\r\n\r\n    \r\n\r\n#main page    \r\nroot=Tk()\r\n#signup variables\r\nuname=StringVar()\r\npassw=StringVar()\r\nname=StringVar()\r\n\r\nroot.title(\'Prediction of stock\')\r\n\r\n\r\n#menu\r\nmenubar=Menu(root)\r\nmenubar.add_cascade(label=\'Login\', command= login)\r\nmenubar.add_cascade(label=\'Signup\', command= signup)\r\nmenubar.add_cascade(label=\'Close\', command= quit)\r\n\r\nroot.config(menu=menubar)\r\n\r\n\r\nroot.mainloop()\r\n'"
test2.py,0,"b'import os\r\nimport pandas as pd\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib import style\r\nfrom matplotlib.finance import candlestick_ohlc\r\nimport matplotlib.dates as mdates\r\nimport datetime as dt\r\nimport numpy as np\r\nimport tkinter\r\nimport tkinter as tk\r\nfrom tkinter import *\r\n##from Histogram import histogram\r\n##from Candlestck import candlestick\r\n##from BollingerBand import bollinger_band\r\n##from DailyReturnPlot import dailyreturnplot\r\n##from CustomStats import custom_stats\r\nimport pickle\r\n\r\n\r\ndef dailyreturnplot(ticker):\r\n    df = pd.read_csv(""CompiledData.csv"",parse_dates=True, na_values=[\'nan\'])\r\n    df.fillna(method=""ffill"",inplace=True)\r\n    df.fillna(method=""bfill"",inplace=True)\r\n    dailyreturn=compute_daily_return(df[ticker])\r\n    plot_data(dailyreturn,title=""Daily returns"")\r\n\r\ndef histogram(ticker):\r\n    df = pd.read_csv(""CompiledData.csv"",parse_dates=True, na_values=[\'nan\'])\r\n    df.fillna(method=""ffill"",inplace=True)\r\n    df.fillna(method=""bfill"",inplace=True)\r\n    dailyreturn=compute_daily_return(df[ticker])\r\n    #plot_data(dailyreturn,title=""Daily returns"")\r\n    #print (dailyreturn.head)\r\n    dailyreturn=dailyreturn.values\r\n    plt.hist(dailyreturn, 20)\r\n    plt.show()\r\ndef compute_daily_return(df):\r\n    daily_ret=df.copy()\r\n    daily_ret[1:]=(df[1:]/df[:-1].values)-1\r\n    daily_ret.ix[0]=0\r\n    return daily_ret\r\ndef plot_data(df, title=""Stock prices""):\r\n    """"""Plot stock prices with a custom title and meaningful axis labels.""""""\r\n    ax = df.plot(title=title, fontsize=12)\r\n    ax.set_xlabel(""Date"")\r\n    ax.set_ylabel(""Price"")\r\n    plt.show()\r\n\r\n    \r\ndef get_rolling_mean(values, window):\r\n    """"""Return rolling mean of given values, using specified window size.""""""\r\n    return pd.rolling_mean(values, window=window)\r\n\r\ndef get_rolling_std(values, window):\r\n    """"""Return rolling standard deviation of given values, using specified window size.""""""\r\n    return pd.rolling_std(values, window=window)\r\n   \r\n\r\ndef get_bollinger_bands(rm,rstd):\r\n    upper_band=rm+rstd*2\r\n    lower_band=rm-rstd*2\r\n    return upper_band,lower_band\r\n\r\ndef bollinger_band(ticker):\r\n    \r\n    df = pd.read_csv(""CompiledData.csv"",parse_dates=True, na_values=[\'nan\'])\r\n    df.fillna(method=""ffill"",inplace=True)\r\n    df.fillna(method=""bfill"",inplace=True)\r\n    RollingMean = get_rolling_mean(df[ticker], window=20)\r\n    RollingStd = get_rolling_std(df[ticker], window=20)\r\n    upper_band, lower_band = get_bollinger_bands(RollingMean, RollingStd)\r\n    \r\n    ax = df[ticker].plot(title=""Bollinger Bands"", label=ticker)\r\n    RollingMean.plot(label=\'Rolling mean\', ax=ax)\r\n    upper_band.plot(label=\'upper band\', ax=ax)\r\n    lower_band.plot(label=\'lower band\', ax=ax)\r\n    ax.set_xlabel(""Date"")\r\n    ax.set_ylabel(""Price"")\r\n    ax.legend(loc=\'upper left\')\r\n    plt.show()\r\n\r\ndef candlestick(ticker):\r\n    #ticker=input()\r\n\r\n    style.use(\'ggplot\')\r\n    df = pd.read_csv(\'stock_dfs/{}.csv\'.format(ticker), parse_dates=True, index_col=0)\r\n    df_ohlc = df[\'Adj Close\'].resample(\'10D\').ohlc()\r\n    df_ohlc.fillna(method=""ffill"",inplace=True)\r\n    df_ohlc.fillna(method=""bfill"",inplace=True)\r\n    df_volume = df[\'Volume\'].resample(\'10D\').sum()\r\n    df_volume.fillna(method=""ffill"",inplace=True)\r\n    df_volume.fillna(method=""bfill"",inplace=True)\r\n    df_ohlc.reset_index(inplace=True)\r\n    df_ohlc[\'Date\'] = df_ohlc[\'Date\'].map(mdates.date2num)\r\n    ax1 = plt.subplot2grid((6,1), (0,0), rowspan=5, colspan=1)\r\n    ax2 = plt.subplot2grid((6,1), (5,0), rowspan=1, colspan=1, sharex=ax1)\r\n    ax1.xaxis_date()\r\n    candlestick_ohlc(ax1, df_ohlc.values, width=5, colorup=\'g\')\r\n    ax2.fill_between(df_volume.index.map(mdates.date2num), df_volume.values, 0)\r\n    plt.show()\r\n\r\ndef custom_stats(var1,var2,var3,ticker):\r\n    \r\n    df = pd.read_csv(""CompiledData.csv"",parse_dates=True, na_values=[\'nan\'])\r\n    df.fillna(method=""ffill"",inplace=True)\r\n    df.fillna(method=""bfill"",inplace=True)\r\n    ax = df[ticker].plot(title=""Custom Stats"", label=ticker)\r\n    \r\n    def plot_mean():\r\n        RollingMean = get_rolling_mean(df[ticker], window=20)\r\n        RollingMean.plot(label=\'Rolling mean\', ax=ax)\r\n\r\n    def plot_std():\r\n        RollingStd = get_rolling_std(df[ticker], window=20)\r\n        RollingStd.plot(label=\'Rolling Standard\', ax=ax)\r\n\r\n    def plot_median():\r\n        RollingMedian = get_rolling_median(df[ticker],window=20)\r\n        RollingMedian.plot(label=\'Rolling Median\',ax=ax)\r\n    if(var1==1):\r\n        plot_mean()\r\n        if(var2==1):\r\n            plot_std()\r\n            if(var3==1):\r\n                plot_median()\r\n        else:\r\n            if(var3==1):\r\n                plot_median()\r\n    else:\r\n        if(var2==1):\r\n            plot_std()\r\n            if(var3==1):\r\n                plot_median()\r\n        else:\r\n            if(var3==1):\r\n                plot_median()\r\n    ax.set_xlabel(""Date"")\r\n    ax.set_ylabel(""Price"")\r\n    ax.legend(loc=\'upper left\')\r\n    plt.show()\r\n  \r\n\r\n\r\ndef visual():\r\n    app= Tk()\r\n\r\n    #comp =[(1,""Mean""),(2,""Standard Deviation""),(3,""Median"")]\r\n\r\n    button1 = tk.Button(app, text=\'Histogram\',height=2, width=20,fg=""white"", bg=""slate blue"", command=lambda: histogram(symbolname.get()))\r\n    button1.grid(column=0, row=0, pady=10, padx=10, sticky=(tkinter.N))\r\n\r\n    button2 = tk.Button(app, text=\'Daily Return Plot\',height=2, width=20,fg=""white"", bg=""slate blue"", command=lambda: dailyreturnplot(symbolname.get()))\r\n    button2.grid(column=0, row=1, pady=10, padx=10, sticky=(tkinter.N))\r\n\r\n    button3 = tk.Button(app, text=\'Bollinger Band Analysis\',height=2, width=20,fg=""white"", bg=""slate blue"", command=lambda: bollinger_band(symbolname.get()))\r\n    button3.grid(column=0, row=2, pady=10, padx=10, sticky=(tkinter.N))\r\n\r\n    button4 = tk.Button(app, text=\'Candlestick Analysis\',height=2, width=20,fg=""white"", bg=""slate blue"", command=lambda: candlestick(symbolname.get()))\r\n    button4.grid(column=0, row=3, pady=10, padx=10, sticky=(tkinter.N))\r\n\r\n    label = tk.Label(app, text=\'Select your Stats\', font=(""Courier"", 20),fg=""slate blue"")\r\n    label.grid(column=1, row=0, pady=10, padx=50, sticky=(tkinter.E))\r\n\r\n    var1 = IntVar()\r\n    var2 = IntVar()\r\n    var3 = IntVar()\r\n\r\n    Checkbutton(app, text=""Mean"", variable=var1,command =lambda: custom_stats(var1.get(),var2.get(),var3.get(),symbolname.get())).grid(column=1,pady=5, padx=10, row=1,rowspan=1, sticky=(tkinter.N))\r\n    \r\n    Checkbutton(app, text=""Standard Deviation"", variable=var2,command =lambda: custom_stats(var1.get(),var2.get(),var3.get(),symbolname.get())).grid(column=1, row=2,pady=5, padx=10,rowspan=1, sticky=(tkinter.N))\r\n    \r\n    Checkbutton(app, text=""Median"", variable=var3,command =lambda: custom_stats(var1.get(),var2.get(),var3.get(),symbolname.get())).grid(column=1, row=3,pady=5, padx=10,rowspan=1, sticky=(tkinter.N))\r\n\r\n    #for v,data in comp:\r\n     #   Checkbutton(app, text=data, variable=v).grid(column=1, padx=10, sticky=(tkinter.N+W+E+S))\r\n\r\n    label2 = tk.Label(app, text=\'Enter Stock\', font=(""Courier"", 20),fg=""slate blue"")\r\n    label2.grid(column=2, row=0, pady=10, padx=20, sticky=(tkinter.E))\r\n\r\n    symbolname = Entry(app)\r\n    symbolname.grid(row=1, column=2,padx=15, pady=5)\r\n\r\n    button5 = tk.Button(app, text=\'OK\',height=2, width=20,fg=""white"", bg=""slate blue"", command=lambda: symbolselected(symbolname.get()))\r\n    button5.grid(column=2, row=2, pady=10, padx=10, sticky=(tkinter.N))\r\n\r\n    #scrollbar\r\n    frame=Frame(app,width=50,height=50)\r\n    frame.grid(row=3,column=2,pady=10)\r\n    canvas=Canvas(frame,bg=\'grey\',width=50,height=50)\r\n\r\n    f = open(\'sp500tickers.pickle\',\'rb\')\r\n    mydata= pickle.load(f)\r\n    f.close()\r\n\r\n\r\n    canvas.config(width=50,height=50)\r\n    #canvas.config(xscrollcommand=hbar.set, yscrollcommand=vbar.set)\r\n    canvas.pack(side=LEFT,expand=True,fill=BOTH)\r\n\r\n    scrollbar = Scrollbar(canvas)\r\n    scrollbar.pack( side = RIGHT, fill=Y )\r\n\r\n    mylist = Listbox(canvas, yscrollcommand = scrollbar.set )\r\n    for line in mydata:\r\n       mylist.insert(END,line)\r\n\r\n    mylist.pack( side = LEFT, fill = BOTH )\r\n    scrollbar.config( command = mylist.yview )\r\n\r\n\r\n\r\n   \r\n    \r\n\r\n    app.mainloop()\r\n\r\n\r\nvisual()\r\n'"
