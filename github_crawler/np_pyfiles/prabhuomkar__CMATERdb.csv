file_path,api_count,code
scripts/save_as_numpy.py,11,"b'""""""\nNote: Do not refer to this script for any usage!\nDeveloper script to convert CMATERdb datasets into NumPy format\nAuthor: Omkar Prabhu (prabhuomkar)\nLicense: Apache 2.0\n""""""\nfrom glob import glob\nimport os\nimport re\nimport matplotlib.pyplot as plt\n\nimport numpy as np\nfrom PIL import Image\n\nDIMS = (32, 32)\nBANGLA_SINGLE_COUNT = 500\nDEV_TEL_SINGLE_COUNT = 250\n\n\ndef load(numeral_type):\n    """""" Loads npz format type of data for given type of numeral \n    Args:\n        numeral_type (string): type of numeral to load\n    Returns:\n        None\n    """"""\n\n    train = np.load(os.path.join(os.path.dirname(__file__), \'../datasets/\'+numeral_type+\'-numerals/training-images.npz\'))\n    test = np.load(os.path.join(os.path.dirname(__file__), \'../datasets/\'+numeral_type+\'-numerals/testing-images.npz\'))\n    print(\'Total Training: \', str(len(train[\'labels\'])))\n    print(\'Total Testing: \', str(len(test[\'labels\'])))\n    print(\'Training Data:\')\n    print(train[\'images\'][0].shape, train[\'labels\'][0].shape)\n    print(\'Testing Data:\')\n    print(test[\'images\'][0].shape, test[\'labels\'][0].shape)\n    plt.title(test[\'labels\'][399])\n    plt.imshow(test[\'images\'][399])\n    plt.show()\n\ndef save(numeral_type):\n    """""" Converts training & testing images for given type of numeral into npz format\n    Args:\n\t\tnumeral_type (string): type of numeral to load\n\tReturns:\n\t\t(training_data, testing_data) (tuple): dataset to use\n    """"""\n    # Relative path things\n    rel_dirname = os.path.dirname(__file__)\n\n    # Entries\n    train_x, train_y, test_x, test_y = [], [], [], []\n\n    # List all directories & files inside the same\n    for dirname in os.listdir(os.path.join(rel_dirname, \'./original/\'+numeral_type)):\n        count = 1\n        for filename in glob(os.path.join(rel_dirname, \'./original/\'+numeral_type+\'/\'+dirname+\'/*.bmp\')):\n            img = Image.open(os.path.join(rel_dirname, filename))\n            img = img.resize(DIMS)\n            if numeral_type == ""bangla"" and count > BANGLA_SINGLE_COUNT:\n                test_x.append(np.array(img).flatten())\n                test_y.append(int(dirname))\n            elif numeral_type != ""bangla"" and count > DEV_TEL_SINGLE_COUNT:\n                test_x.append(np.array(img).flatten())\n                test_y.append(int(dirname))\n            else:\n                train_x.append(np.array(img).flatten())\n                train_y.append(int(dirname))\n            count += 1\n\n    train_x = np.array(train_x).reshape(-1, 32, 32, 3).astype(np.uint8)\n    test_x = np.array(test_x).reshape(-1, 32, 32, 3).astype(np.uint8)\n    train_y = np.array(train_y).reshape(-1).astype(np.int64)\n    test_y = np.array(test_y).reshape(-1).astype(np.int64)\n\n    print(\'Total Training: \', str(len(train_x)))\n    print(\'Total Testing: \', str(len(test_x)))\n    print(\'Training Data:\')\n    print(train_x[0].shape, train_y[0].shape)\n    print(\'Testing Data:\')\n    print(test_x[0].shape, test_y[0].shape)\n    plt.title(test_y[299])\n    plt.imshow(test_x[299])\n    plt.show()\n    np.savez_compressed(\'../datasets/\'+numeral_type+\'-numerals/training-images.npz\', images=train_x, labels=train_y)\n    np.savez_compressed(\'../datasets/\'+numeral_type+\'-numerals/testing-images.npz\', images=test_x, labels=test_y)\n\n\nif __name__ == \'__main__\':\n    save(\'bangla\')\n    # load(\'bangla\')'"
scripts/usage.py,4,"b'""""""\nHow to use CMATERdb dataset\nAuthor: Omkar Prabhu (prabhuomkar)\nLicense: Apache 2.0\n""""""\nimport numpy as np\nimport os\n\n\ndef load(numeral_type, path=None):\n    """""" Loads npz format type of data for given type of numeral \n    Args:\n        numeral_type (string): type of numeral to load\n        path (string): path of the directory where dataset exists (only when the dataset exists in a different location)\n    Returns:\n        None\n    """"""\n    if path:\n    \ttrain = np.load(path+\'/training-images.npz\')\n    \ttest = np.load(path+\'/testing-images.npz\')\n    else:\n    \ttrain = np.load(os.path.join(os.path.dirname(__file__), \'../datasets/\'+numeral_type+\'-numerals/training-images.npz\'))\n    \ttest = np.load(os.path.join(os.path.dirname(__file__), \'../datasets/\'+numeral_type+\'-numerals/testing-images.npz\'))\n    print(\'Total Training: \', str(len(train[\'labels\'])))\n    print(\'Total Testing: \', str(len(test[\'labels\'])))\n    # Access Image\n    print(train[\'images\'][0])\n    # Access Label\n    print(train[\'labels\'][0])\n\nif __name__ == \'__main__\':\n\tload(\'devanagari\')'"
