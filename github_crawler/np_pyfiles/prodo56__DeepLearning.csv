file_path,api_count,code
assignment1/lib/__init__.py,0,b''
assignment1/lib/datasets.py,5,"b'import cPickle as pickle\nimport numpy as np\nimport os\nfrom scipy.misc import imread\n\n\ndef unPickle(filename):\n\t"""""" Unpickle a file """"""\n\twith open(filename, \'rb\') as f:\n\t\td = pickle.load(f)\n\t\treturn d\n\n\ndef CIFAR10(data_path):\n\t"""""" Load every batch of CIFAR-10 binary data """"""\n\tall_batches = []\n\tall_labels = []\n\tfor b in range(1,6):\n\t\tf_train_curr = os.path.join(data_path, \'data_batch_%d\' % (b, ))\n\t\td = unPickle(f_train_curr)\n\t\tbatch = d[\'data\'].reshape(10000, 3, 32, 32).transpose(0,2,3,1).astype(""float"")\n\t\tlabels = np.array(d[\'labels\'])\n\t\tall_batches.append(batch)\n\t\tall_labels.append(labels)\n\tdata_train = np.concatenate(all_batches)\n\tlabels_train = np.concatenate(all_labels)\n\tdel batch, labels\n\tf_test = os.path.join(data_path, \'test_batch\')\n\td = unPickle(f_test)\n\tdata_test = d[\'data\'].reshape(10000, 3, 32, 32).transpose(0,2,3,1).astype(""float"")\n\tlabels_test = np.array(d[\'labels\'])\n\treturn data_train, labels_train, data_test, labels_test\n\n\ndef CIFAR10_data(num_training=49000, num_validation=1000, num_test=1000):\n\t# Load the raw CIFAR-10 data\n\tcifar10_dir = ""data/cifar-10-batches-py""\n\tdata_train, labels_train, data_test, labels_test = CIFAR10(cifar10_dir)\n\t    \n\t# Subsample the data\n\tdata_val = data_train[range(num_training, num_training+num_validation)]\n\tlabels_val = labels_train[range(num_training, num_training+num_validation)]\n\tdata_train = data_train[range(num_training)]\n\tlabels_train = labels_train[range(num_training)]\n\tdata_test = data_test[range(num_test)]\n\tlabels_test = labels_test[range(num_test)]\n\n\t# Normalize the data: subtract the images mean\n\tmean_image = np.mean(data_train, axis=0)\n\tdata_train -= mean_image\n\tdata_val -= mean_image\n\tdata_test -= mean_image\n\n\t# Transpose from (N, H, W, C) to (N, C, H, W)\n\tdata_train = data_train.transpose(0, 3, 1, 2).copy()\n\tdata_val = data_val.transpose(0, 3, 1, 2).copy()\n\tdata_test = data_test.transpose(0, 3, 1, 2).copy()\n\n\t# return a data dict\n\treturn {\n\t  \'data_train\': data_train, \'labels_train\': labels_train,\n\t  \'data_val\': data_val, \'labels_val\': labels_val,\n\t  \'data_test\': data_test, \'labels_test\': labels_test,\n\t}'"
assignment1/lib/fully_conn.py,7,"b'import numpy as np\nfrom layer_utils import *\n\n\n"""""" Super Class """"""\nclass Module(object):\n\tdef __init__(self):\n\t\tself.params = {}\n\t\tself.grads = {}\n\n\tdef forward(self):\n\t\traise ValueError(""Not Implemented Error"")\n\n\tdef backward(self):\n\t\traise ValueError(""Not Implemented Error"")\n\n\n"""""" Classes """"""\nclass TestFCReLU(object):\n\tdef __init__(self, dropout_p=0, dtype=np.float32, seed=None):\n\t\tself.net = sequential(\n\t\t\t########## TODO: ##########\n\t\t\tfc(12, 20, name=""fc_test1""),\n\t\t\trelu(name=""relu1"")\n\t\t\t########### END ###########\n\t\t)\n\n\tdef forward(self, feat, is_Training=True):\n\t\toutput = feat\n\t\tfor layer in self.net.layers:\n\t\t\tif isinstance(layer, dropout):\n\t\t\t\toutput = layer.forward(output, is_Training)\n\t\t\telse:\n\t\t\t\toutput = layer.forward(output)\n\t\tself.net.gather_params()\n\t\treturn output\n\n\tdef backward(self, dprev):\n\t\tfor layer in self.net.layers[::-1]: \n\t\t\tdprev = layer.backward(dprev)\n\t\tself.net.gather_grads()\n\t\treturn dprev\n\n\nclass SmallFullyConnectedNetwork(object):\n\tdef __init__(self, dropout_p=0, dtype=np.float32, seed=None):\n\t\tself.net = sequential(\n\t\t\t########## TODO: ##########\n\t\t\tfc(4, 30, name=""fc_test1""),\n\t\t\trelu(name=""relu1""),\n\t\t\tfc(30, 7, name=""fc_test2""),\n\t\t\trelu(name=""relu2"")\n\t\t\t########### END ###########\n\t\t)\n\n\tdef forward(self, feat, is_Training=True):\n\t\toutput = feat\n\t\tfor layer in self.net.layers:\n\t\t\tif isinstance(layer, dropout):\n\t\t\t\toutput = layer.forward(output, is_Training)\n\t\t\telse:\n\t\t\t\toutput = layer.forward(output)\n\t\tself.net.gather_params()\n\t\treturn output\n\n\tdef backward(self, dprev):\n\t\tfor layer in self.net.layers[::-1]: \n\t\t\tdprev = layer.backward(dprev)\n\t\tself.net.gather_grads()\n\t\treturn dprev\n\n\nclass DropoutNet(object):\n\tdef __init__(self, dropout_p=0, dtype=np.float32, seed=None):\n\t\tself.dropout = dropout\n\t\tself.seed = seed\n\t\tself.net = sequential(\n\t\t\tfc(15, 20, 5e-2, name=""fc1""),\n\t\t\trelu(name=""relu1""),\n\t\t\tfc(20, 30, 5e-2, name=""fc2""),\n\t\t\trelu(name=""relu2""),\n\t\t\tfc(30, 10, 5e-2, name=""fc3""),\n\t\t\trelu(name=""relu3""),\n\t\t\tdropout(dropout_p, seed=seed)\n\t\t)\n\n\tdef forward(self, feat, is_Training=True):\n\t\toutput = feat\n\t\tfor layer in self.net.layers:\n\t\t\tif isinstance(layer, dropout):\n\t\t\t\toutput = layer.forward(output, is_Training)\n\t\t\telse:\n\t\t\t\toutput = layer.forward(output)\n\t\tself.net.gather_params()\n\t\treturn output\n\n\tdef backward(self, dprev):\n\t\tfor layer in self.net.layers[::-1]: \n\t\t\tdprev = layer.backward(dprev)\n\t\tself.net.gather_grads()\n\t\treturn dprev\n\n\nclass TinyNet(object):\n\tdef __init__(self, dropout_p=0, dtype=np.float32, seed=None):\n\t\t"""""" Some comments """"""\n\t\tself.net = sequential(\n\t\t\t########## TODO: ##########\n\t\t\tfc(3072, 100, name=""fc_test1""),\n\t\t\trelu(name=""relu1""),\n\t\t\tfc(100, 10, name=""fc_test2""),\n\t\t\t#relu(name=""relu2"")\n\t\t\t########### END ###########\n\t\t)\n\n\tdef forward(self, feat, is_Training=True):\n\t\toutput = feat\n\t\tfor layer in self.net.layers:\n\t\t\tif isinstance(layer, dropout):\n\t\t\t\toutput = layer.forward(output, is_Training)\n\t\t\telse:\n\t\t\t\toutput = layer.forward(output)\n\t\tself.net.gather_params()\n\t\treturn output\n\n\tdef backward(self, dprev):\n\t\tfor layer in self.net.layers[::-1]: \n\t\t\tdprev = layer.backward(dprev)\n\t\tself.net.gather_grads()\n\t\treturn dprev\n\n\nclass DropoutNetTest(object):\n\tdef __init__(self, dropout_p=0, dtype=np.float32, seed=None):\n\t\tself.dropout = dropout\n\t\tself.seed = seed\n\t\tself.net = sequential(\n\t\t\tfc(3072, 500, 1e-2, name=""fc1""),\n\t\t\trelu(name=""relu1""),\n\t\t\tfc(500, 500, 1e-2, name=""fc2""),\n\t\t\trelu(name=""relu2""),\n\t\t\tfc(500, 10, 1e-2, name=""fc3""),\n\t\t\tdropout(dropout_p, seed=seed)\n\t\t)\n\n\tdef forward(self, feat, is_Training=True):\n\t\toutput = feat\n\t\tfor layer in self.net.layers:\n\t\t\tif isinstance(layer, dropout):\n\t\t\t\toutput = layer.forward(output, is_Training)\n\t\t\telse:\n\t\t\t\toutput = layer.forward(output)\n\t\tself.net.gather_params()\n\t\treturn output\n\n\tdef backward(self, dprev):\n\t\tfor layer in self.net.layers[::-1]: \n\t\t\tdprev = layer.backward(dprev)\n\t\tself.net.gather_grads()\n\t\treturn dprev\n\n\nclass FullyConnectedNetwork_2Layers(object):\n\tdef __init__(self, dropout_p=0, dtype=np.float32, seed=None):\n\t\tself.net = sequential(\n\t\t\tfc(5, 5, name=""fc1""),\n\t\t\trelu(name=""relu1""),\n\t\t\tfc(5, 5, name=""fc2"")\n\t\t)\n\n\tdef forward(self, feat, is_Training=True):\n\t\toutput = feat\n\t\tfor layer in self.net.layers:\n\t\t\tif isinstance(layer, dropout):\n\t\t\t\toutput = layer.forward(output, is_Training)\n\t\t\telse:\n\t\t\t\toutput = layer.forward(output)\n\t\tself.net.gather_params()\n\t\treturn output\n\n\tdef backward(self, dprev):\n\t\tfor layer in self.net.layers[::-1]: \n\t\t\tdprev = layer.backward(dprev)\n\t\tself.net.gather_grads()\n\t\treturn dprev\n\n\nclass FullyConnectedNetwork(object):\n\tdef __init__(self, dropout_p=0, dtype=np.float32, seed=None):\n\t\tself.net = sequential(\n\t\t\tfc(3072, 100, 5e-2, name=""fc1""),\n\t\t\trelu(name=""relu1""),\n\t\t\tfc(100, 100, 5e-2, name=""fc2""),\n\t\t\trelu(name=""relu2""),\n\t\t\tfc(100, 100, 5e-2, name=""fc3""),\n\t\t\trelu(name=""relu3""),\n\t\t\tfc(100, 100, 5e-2, name=""fc4""),\n\t\t\trelu(name=""relu4""),\n\t\t\tfc(100, 100, 5e-2, name=""fc5""),\n\t\t\trelu(name=""relu5""),\n\t\t\tfc(100, 10, 5e-2, name=""fc6"")\n\t\t)\n\n\tdef forward(self, feat, is_Training=True):\n\t\toutput = feat\n\t\tfor layer in self.net.layers:\n\t\t\tif isinstance(layer, dropout):\n\t\t\t\toutput = layer.forward(output, is_Training)\n\t\t\telse:\n\t\t\t\toutput = layer.forward(output)\n\t\tself.net.gather_params()\n\t\treturn output\n\n\tdef backward(self, dprev):\n\t\tfor layer in self.net.layers[::-1]: \n\t\t\tdprev = layer.backward(dprev)\n\t\tself.net.gather_grads()\n\t\treturn dprev'"
assignment1/lib/grad_check.py,6,"b'## Code adopted from Stanford CS231N gradient_check.py\n\nimport numpy as np\nfrom random import randrange\n\n\ndef rel_error(x, y):\n\t"""""" returns relative error """"""\n\treturn np.max(np.abs(x - y) / (np.maximum(1e-8, np.abs(x) + np.abs(y))))\n\n\ndef eval_numerical_gradient(f, x, verbose=True, h=0.00001):\n\t"""""" \n\ta naive implementation of numerical gradient of f at x \n\t- f should be a function that takes a single argument\n\t- x is the point (numpy array) to evaluate the gradient at\n\t""""""\n\tfx = f(x)  # evaluate function value at original point\n\tgrad = np.zeros_like(x)\n\tit = np.nditer(x, flags=[\'multi_index\'], op_flags=[\'readwrite\'])\n\twhile not it.finished:\n\t\tix = it.multi_index\n\t\toldval = x[ix]\n\t\tx[ix] = oldval + h  # increment by h\n\t\tfxph = f(x)  # evalute f(x + h)\n\t\tx[ix] = oldval - h  # decrese by h\n\t\tfxmh = f(x)  # evaluate f(x - h)\n\t\tx[ix] = oldval  # restore\n\t\t# compute the partial derivative with centered formula\n\t\tgrad[ix] = (fxph - fxmh) / (2 * h) # the slope\n\t\tif verbose:\n\t\t\tprint ix, grad[ix]\n\t\tit.iternext() # step to next dimension\n\treturn grad\n\n\ndef eval_numerical_gradient_array(f, x, df, h=1e-5):\n\t""""""\n\tEvaluate a numeric gradient for a function that accepts a numpy\n\tarray and returns a numpy array.\n\t""""""\n\tgrad = np.zeros_like(x)\n\tit = np.nditer(x, flags=[\'multi_index\'], op_flags=[\'readwrite\'])\n\twhile not it.finished:\n\t\tix = it.multi_index\n\t\toldval = x[ix]\n\t\tx[ix] = oldval + h  # increment by h\n\t\tpos = f(x).copy()  # evalute f(x + h)\n\t\tx[ix] = oldval - h  # decrese by h\n\t\tneg = f(x).copy()  # evaluate f(x - h)\n\t\tx[ix] = oldval  # restore\n\t\t# compute the partial derivative with centered formula\n\t\tgrad[ix] = np.sum((pos - neg) * df) / (2 * h)\n\t\tit.iternext()\n\treturn grad'"
assignment1/lib/layer_utils.py,17,"b'import numpy as np\n\n\nclass sequential(object):\n\tdef __init__(self, *args):\n\t\t""""""\n\t\tSequential Object to serialize the NN layers\n\t\tPlease read this code block and understand how it works\n\t\t""""""\n\t\tself.params = {}\n\t\tself.grads = {}\n\t\tself.layers = []\n\t\tself.paramName2Indices = {}\n\t\tself.layer_names = {}\n\n\t\t# process the parameters layer by layer\n\t\tlayer_cnt = 0\n\t\tfor layer in args:\n\t\t\tfor n, v in layer.params.iteritems():\n\t\t\t\tif v is None:\n\t\t\t\t\tcontinue\n\t\t\t\tself.params[n] = v\n\t\t\t\tself.paramName2Indices[n] = layer_cnt\n\t\t\tfor n, v in layer.grads.iteritems():\n\t\t\t\tself.grads[n] = v\n\t\t\tif layer.name in self.layer_names:\n\t\t\t\traise ValueError(""Existing name {}!"".format(layer.name))\n\t\t\tself.layer_names[layer.name] = True\n\t\t\tself.layers.append(layer)\n\t\t\tlayer_cnt += 1\n\t\tlayer_cnt = 0\n\n\tdef assign(self, name, val):\n\t\t# load the given values to the layer by name\n\t\tlayer_cnt = self.paramName2Indices[name]\n\t\tself.layers[layer_cnt].params[name] = val\n\n\tdef assign_grads(self, name, val):\n\t\t# load the given values to the layer by name\n\t\tlayer_cnt = self.paramName2Indices[name]\n\t\tself.layers[layer_cnt].grads[name] = val\n\n\tdef get_params(self, name):\n\t\t# return the parameters by name\n\t\treturn self.params[name]\n\n\tdef get_grads(self, name):\n\t\t# return the gradients by name\n\t\treturn self.grads[name]\n\n\tdef gather_params(self):\n\t\t""""""\n\t\tCollect the parameters of every submodules\n\t\t""""""\n\t\tfor layer in self.layers:\n\t\t\tfor n, v in layer.params.iteritems():\n\t\t\t\tself.params[n] = v\n\n\tdef gather_grads(self):\n\t\t""""""\n\t\tCollect the gradients of every submodules\n\t\t""""""\n\t\tfor layer in self.layers:\n\t\t\tfor n, v in layer.grads.iteritems():\n\t\t\t\tself.grads[n] = v\n\n\tdef load(self, pretrained):\n\t\t"""""" \n\t\tLoad a pretrained model by names \n\t\t""""""\n\t\tfor layer in self.layers:\n\t\t\tif not hasattr(layer, ""params""):\n\t\t\t\tcontinue\n\t\t\tfor n, v in layer.params.iteritems():\n\t\t\t\tif n in pretrained.keys():\n\t\t\t\t\tlayer.params[n] = pretrained[n].copy()\n\t\t\t\t\tprint ""Loading Params: {} Shape: {}"".format(n, layer.params[n].shape)\n\n\nclass fc(object):\n\tdef __init__(self, input_dim, output_dim, init_scale=0.02, name=""fc""):\n\t\t""""""\n\t\tIn forward pass, please use self.params for the weights and biases for this layer\n\t\tIn backward pass, store the computed gradients to self.grads\n\t\t- name: the name of current layer\n\t\t- input_dim: input dimension\n\t\t- output_dim: output dimension\n\t\t- meta: to store the forward pass activations for computing backpropagation\n\t\t""""""\n\t\tself.name = name\n\t\tself.w_name = name + ""_w""\n\t\tself.b_name = name + ""_b""\n\t\tself.input_dim = input_dim\n\t\tself.output_dim = output_dim\n\t\tself.params = {}\n\t\tself.grads = {}\n\t\tself.params[self.w_name] = init_scale * np.random.randn(input_dim, output_dim)\n\t\tself.params[self.b_name] = np.zeros(output_dim)\n\t\tself.grads[self.w_name] = None\n\t\tself.grads[self.b_name] = None\n\t\tself.meta = None\n\n\tdef forward(self, feat):\n\t\t"""""" Some comments """"""\n\t\toutput = None\n\t\tassert np.prod(feat.shape[1:]) == self.input_dim, ""But got {} and {}"".format(\n\t\t\tnp.prod(feat.shape[1:]), self.input_dim)\n\t\t#############################################################################\n\t\t# TODO: Implement the forward pass of a single fully connected layer.       #\n\t\t# You will probably need to reshape (flatten) the input features.           #\n\t\t# Store the results in the variable output provided above.                  #\n\t\t#############################################################################\n\t\tif feat.shape[0] is not None:\n\t\t\tf = feat.reshape((feat.shape[0],self.input_dim))\n\t\telse:\n\t\t\tf = feat.reshape((1,self.input_dim))\n\t\toutput = f.dot(self.params[self.w_name]) + self.params[self.b_name].T\n\t\t#############################################################################\n\t\t#                             END OF YOUR CODE                              #\n\t\t#############################################################################\n\t\tself.meta = feat\n\t\treturn output\n\n\tdef backward(self, dprev):\n\t\t"""""" Some comments """"""\n\t\tfeat = self.meta\n\t\tif feat is None:\n\t\t\traise ValueError(""No forward function called before for this module!"")\n\t\tdfeat, self.grads[self.w_name], self.grads[self.b_name] = None, None, None\n\t\t#############################################################################\n\t\t# TODO: Implement the backward pass of a single fully connected layer.      #\n\t\t# You will probably need to reshape (flatten) the input gradients.          #\n\t\t# Store the computed gradients for current layer in self.grads with         #\n\t\t# corresponding name.                                                       # \n\t\t#############################################################################\n\t\tdfeat = dprev.dot(self.params[self.w_name].T).reshape(feat.shape)\n\t\tself.grads[self.w_name] = feat.reshape((feat.shape[0],self.input_dim)).T.dot(dprev)\n\t\tself.grads[self.b_name] = np.sum(dprev,axis=0)\n\t\t#############################################################################\n\t\t#                             END OF YOUR CODE                              #\n\t\t#############################################################################\n\t\tself.meta = None\n\t\treturn dfeat\n\n\nclass relu(object):\n\tdef __init__(self, name=""relu""):\n\t\t""""""\n\t\t- name: the name of current layer\n\t\tNote: params and grads should be just empty dicts here, do not update them\n\t\t""""""\n\t\tself.name = name\n\t\tself.params = {}\n\t\tself.grads = {}\n\t\tself.grads[self.name] = None\n\t\tself.meta = None\n\n\tdef forward(self, feat):\n\t\t"""""" Some comments """"""\n\t\toutput = None\n\t\t#############################################################################\n\t\t# TODO: Implement the forward pass of a rectified linear unit               #\n\t\t# Store the results in the variable output provided above.                  #\n\t\t#############################################################################\n\t\tmask = np.where(feat<0,0,1)\n\t\toutput = np.multiply(mask,feat)\n\t\t#############################################################################\n\t\t#                             END OF YOUR CODE                              #\n\t\t#############################################################################\n\t\tself.meta = feat\n\t\treturn output\n\n\tdef backward(self, dprev):\n\t\t"""""" Some comments """"""\n\t\tfeat = self.meta\n\t\tif feat is None:\n\t\t\traise ValueError(""No forward function called before for this module!"")\n\t\tdfeat = None\n\t\t#############################################################################\n\t\t# TODO: Implement the backward pass of a rectified linear unit              #\n\t\t#############################################################################\n\t\tmask = np.where(feat<0,0,1)\n\t\tdfeat = np.multiply(mask,dprev)\n\t\t#############################################################################\n\t\t#                             END OF YOUR CODE                              #\n\t\t#############################################################################\n\t\tself.meta = None\n\t\treturn dfeat\n\n\nclass dropout(object):\n\tdef __init__(self, p, seed=None, name=""dropout""):\n\t\t""""""\n\t\t- name: the name of current layer\n\t\t- p: the dropout probability\n\t\t- seed: numpy random seed\n\t\t- meta: to store the forward pass activations for computing backpropagation\n\t\t- dropped: the mask for dropping out the neurons\n\t\t- is_Training: dropout behaves differently during training and testing, use\n\t\t               this to indicate which phase is the current one\n\t\t""""""\n\t\tself.name = name\n\t\tself.params = {}\n\t\tself.grads = {}\n\t\tself.grads[self.name] = None\n\t\tself.p = p\n\t\tself.seed = seed\n\t\tself.meta = None\n\t\tself.dropped = None\n\t\tself.is_Training = False\n\n\tdef forward(self, feat, is_Training=True):\n\t\tif self.seed is not None:\n\t\t\tnp.random.seed(self.seed)\n\t\tdropped = None\n\t\toutput = None\n\t\t#############################################################################\n\t\t# TODO: Implement the forward pass of Dropout                               #\n\t\t#############################################################################\n\t\tif is_Training:\n\t\t\tdropped = (np.random.uniform(0.0, 1.0, feat.shape) >= self.p).astype(float) \n\t\telse:\n\t\t\tdropped = np.ones(feat.shape)\n\t\toutput = np.multiply(dropped,feat)\n\t\t#############################################################################\n\t\t#                             END OF YOUR CODE                              #\n\t\t#############################################################################\n\t\tself.dropped = dropped\n\t\tself.is_Training = is_Training\n\t\tself.meta = feat\n\t\treturn output\n\n\tdef backward(self, dprev):\n\t\tfeat = self.meta\n\t\tdfeat = None\n\t\tif feat is None:\n\t\t\traise ValueError(""No forward function called before for this module!"")\n\t\t#############################################################################\n\t\t# TODO: Implement the backward pass of Dropout                              #\n\t\t#############################################################################\n\t\tdfeat = np.multiply(self.dropped,dprev)\n\t\t#############################################################################\n\t\t#                             END OF YOUR CODE                              #\n\t\t#############################################################################\n\t\tself.is_Training = False\n\t\treturn dfeat\n\n\nclass cross_entropy(object):\n\tdef __init__(self, dim_average=True):\n\t\t""""""\n\t\t- dim_average: if dividing by the input dimension or not\n\t\t- dLoss: intermediate variables to store the scores\n\t\t- label: Ground truth label for classification task\n\t\t""""""\n\t\tself.dim_average = dim_average  # if average w.r.t. the total number of features\n\t\tself.dLoss = None\n\t\tself.label = None\n\n\tdef forward(self, feat, label):\n\t\t"""""" Some comments """"""\n\t\tscores = softmax(feat)\n\t\tloss = None\n\t\t#############################################################################\n\t\t# TODO: Implement the forward pass of an CE Loss                            #\n\t\t#############################################################################\n\t\t#print feat.shape, ""cross entropy"", scores\n\t\tcorect_logprobs = -np.log(scores[range(feat.shape[0]),label])\n\t\tloss = np.sum(corect_logprobs)/feat.shape[0]\n\t\t#############################################################################\n\t\t#                             END OF YOUR CODE                              #\n\t\t#############################################################################\n\t\tself.dLoss = scores.copy()\n\t\tself.label = label\n\t\treturn loss\n\n\tdef backward(self):\n\t\tdLoss = self.dLoss\n\t\tif dLoss is None:\n\t\t\traise ValueError(""No forward function called before for this module!"")\n\t\t#############################################################################\n\t\t# TODO: Implement the backward pass of an CE Loss                           #\n\t\t#############################################################################\n\t\tdLoss[range(self.label.shape[0]),self.label] -= 1\n\t\tdLoss /= self.label.shape[0]\n\t\t#############################################################################\n\t\t#                             END OF YOUR CODE                              #\n\t\t#############################################################################\n\t\tself.dLoss = dLoss\n\t\treturn dLoss\n\n\ndef softmax(feat):\n\t"""""" Some comments """"""\n\tscores = None\n\t#############################################################################\n\t# TODO: Implement the forward pass of a softmax function                    #\n\t#############################################################################\n\texp = np.exp(feat - np.max(feat, axis=1, keepdims=True))\n\tscores =exp/exp.sum(axis=1, keepdims=True)\n\t#############################################################################\n\t#                             END OF YOUR CODE                              #\n\t#############################################################################\n\treturn scores'"
assignment1/lib/optim.py,8,"b'import numpy as np\n\n\n"""""" Super Class """"""\nclass Optimizer(object):\n\t"""""" \n\tThis is a template for implementing the classes of optimizers\n\t""""""\n\tdef __init__(self, net, lr=1e-4):\n\t\tself.net = net  # the model\n\t\tself.lr = lr    # learning rate\n\n\t"""""" Make a step and update all parameters """"""\n\tdef step(self):\n\t\tfor layer in self.net.layers:\n\t\t\tfor n, v in layer.params.iteritems():\n\t\t\t\tpass\n\n\n"""""" Classes """"""\nclass SGD(Optimizer):\n\t"""""" Some comments """"""\n\tdef __init__(self, net, lr=1e-4):\n\t\tself.net = net\n\t\tself.lr = lr\n\n\tdef step(self):\n\t\tfor layer in self.net.layers:\n\t\t\tfor n, v in layer.params.iteritems():\n\t\t\t\tdv = layer.grads[n]\n\t\t\t\tlayer.params[n] -= self.lr * dv\n\n\nclass SGDM(Optimizer):\n\tdef __init__(self, net, lr=1e-4, momentum=0.0):\n\t\tself.net = net\n\t\tself.lr = lr\n\t\tself.momentum = momentum\n\t\tself.velocity = {}\n\n\tdef step(self):\n\t\t#############################################################################\n\t\t# TODO: Implement the SGD + Momentum                                        #\n\t\t#############################################################################\n\n\t\tfor layer in self.net.layers:\n\t\t\tfor n, v in layer.params.iteritems():\n\t\t\t\tif n not in self.velocity.keys():\n\t\t\t\t\t#print n, ""adding vel to layer""\n\t\t\t\t\tself.velocity[n] = np.zeros(layer.params[n].shape)\n\t\t\t\tself.velocity[n] = (self.momentum*self.velocity[n])-(self.lr*layer.grads[n])\n\t\t\t\tlayer.params[n] = layer.params[n] + self.velocity[n]\n\t\t#############################################################################\n\t\t#                             END OF YOUR CODE                              #\n\t\t#############################################################################\n\n\nclass RMSProp(Optimizer):\n\tdef __init__(self, net, lr=1e-2, decay=0.99, eps=1e-8):\n\t\tself.net = net\n\t\tself.lr = lr\n\t\tself.decay = decay\n\t\tself.eps = eps\n\t\tself.cache = {}  # decaying average of past squared gradients\n\n\tdef step(self):\n\t\t#############################################################################\n\t\t# TODO: Implement the RMSProp                                               #\n\t\t#############################################################################\n\t\tfor layer in self.net.layers:\n\t\t\tfor n, v in layer.params.iteritems():\n\t\t\t\tif n not in self.cache.keys():\n\t\t\t\t\tself.cache[n] = np.zeros(layer.params[n].shape)\n\t\t\t\tself.cache[n] = (self.decay*self.cache[n])+((1.0-self.decay)*np.square(layer.grads[n]))\n\t\t\t\tlayer.params[n] -= self.lr*layer.grads[n]/np.sqrt(self.cache[n]+self.eps)\n\t\t#############################################################################\n\t\t#                             END OF YOUR CODE                              #\n\t\t#############################################################################\n\n\nclass Adam(Optimizer):\n\tdef __init__(self, net, lr=1e-3, beta1=0.9, beta2=0.999, t=0, eps=1e-8):\n\t\tself.net = net\n\t\tself.lr = lr\n\t\tself.beta1, self.beta2 = beta1, beta2\n\t\tself.eps = eps\n\t\tself.mt = {}\n\t\tself.vt = {}\n\t\tself.t = t\n\n\tdef step(self):\n\t\t#############################################################################\n\t\t# TODO: Implement the Adam                                                  #\n\t\t#############################################################################\n\t\tfor layer in self.net.layers:\n\t\t\tfor n, v in layer.params.iteritems():\n\t\t\t\tif n not in self.vt.keys():\n\t\t\t\t\tself.vt[n] = np.zeros(layer.params[n].shape)\n\t\t\t\tif n not in self.mt.keys():\n\t\t\t\t\tself.mt[n] = np.zeros(layer.params[n].shape)\n\t\t\t\tself.t = self.t+1\n\t\t\t\tself.mt[n]=self.beta1*self.mt[n]+(1.0-self.beta1)*layer.grads[n]\n\t\t\t\tself.vt[n]=self.beta2*self.vt[n]+(1.0-self.beta2)*np.square(layer.grads[n])\n\t\t\t\tm_t_hat = self.mt[n] / (1. - self.beta1**(self.t))\n\t\t\t\tv_t_hat = self.vt[n] / (1. - self.beta2**(self.t))\n\t\t\t\tlayer.params[n] -= self.lr*m_t_hat/(np.sqrt(v_t_hat)+self.eps)\n\t\t#############################################################################\n\t\t#                             END OF YOUR CODE                              #\n\t\t#############################################################################'"
assignment1/lib/train.py,8,"b'from lib.layer_utils import *\nfrom lib.grad_check import *\nfrom lib.optim import *\nimport numpy as np\n\n\nclass CIFAR10_DataLoader(object):\n\t""""""\n\tData loader class for CIFAR-10 Data.\n\n\tArguments:\n\t- data: Array of input data, of shape (batch_size, d_1, ..., d_k)\n\t- labels: Array of labels, of shape (batch_size,)\n\t- batch_size: The size of each returned minibatch\n\t""""""\n\tdef __init__(self, data, labels, batch_size):\n\t\tself.data = data\n\t\tself.labels = labels\n\t\tself.batch_size = batch_size\n\t\tself.indices = np.asarray(range(data.shape[0]))\n\n\t# reset the indices to be full length\n\tdef _reset(self):\n\t\tself.indices = np.asarray(range(self.data.shape[0]))\n\n\t# Call this shuffle function after the last batch for each epoch\n\tdef _shuffle(self):\n\t\tnp.random.shuffle(self.indices)\n\n\t# Get the next batch of data\n\tdef get_batch(self):\n\t\tif len(self.indices) < self.batch_size:\n\t\t\tself._reset()\n\t\t\tself._shuffle()\n\t\tindices_curr = self.indices[0:self.batch_size]\n\t\tdata_batch = self.data[indices_curr]\n\t\tlabels_batch = self.labels[indices_curr]\n\t\tself.indices = np.delete(self.indices, range(self.batch_size))\n\t\treturn data_batch, labels_batch\n\n\ndef compute_acc(model, data, labels, num_samples=None, batch_size=100):\n\t""""""\n\tCompute the accuracy of given data and labels\n\n\tArguments:\n\t- data: Array of input data, of shape (batch_size, d_1, ..., d_k)\n\t- labels: Array of labels, of shape (batch_size,)\n\t- num_samples: If not None, subsample the data and only test the model\n\t  on these sampled datapoints.\n\t- batch_size: Split data and labels into batches of this size to avoid using\n\t  too much memory.\n\n\tReturns:\n\t- accuracy: Scalar indicating fraction of inputs that were correctly\n\t  classified by the model.\n\t""""""\n\tN = data.shape[0]\n\tif num_samples is not None and N > num_samples:\n\t\tindices = np.random.choice(N, num_samples)\n\t\tN = num_samples\n\t\tdata = data[indices]\n\t\tlabels = labels[indices]\n\n\tnum_batches = N // batch_size\n\tif N % batch_size != 0:\n\t\tnum_batches += 1\n\tpreds = []\n\tfor i in range(num_batches):\n\t\tstart = i * batch_size\n\t\tend = (i + 1) * batch_size\n\t\toutput = model.forward(data[start:end], False)\n\t\tscores = softmax(output)\n\t\tpred = np.argmax(scores, axis=1)\n\t\tpreds.append(pred)\n\tpreds = np.hstack(preds)\n\taccuracy = np.mean(preds == labels)\n\treturn accuracy\n\n\n"""""" Some comments """"""\ndef train_net(data, model, loss_func, optimizer, batch_size, max_epochs,\n\t          lr_decay=1.0, lr_decay_every=1000, show_every=10, verbose=False):\n\t""""""\n\tTrain a network with this function, parameters of the network are updated\n\tusing stochastic gradient descent methods defined in optim.py. \n\n\tThe parameters which achive the best performance after training for given epochs\n\twill be returned as a param dict. The training history and the validation history\n\tis returned for post analysis. \n\n\tArguments:\n\t- data: Fata instance should look like the followings:\n\t- data_dict = {\n\t    ""data_train"": (# Training data,   # Training GT Labels),\n\t    ""data_val"":   (# Validation data, # Validation GT Labels),\n\t    ""data_test"":  (# Testing data,    # Testing GT Labels),\n\t  }\n\n\t- model: An instance defined in the fully_conn.py, with a sequential object as attribute\n\n\t- loss_func: An instance defined in the layer_utils.py, we only introduce cross-entropy\n\t  classification loss for this part of assignment\n\n\t- batch_size: Batch size of the input data\n\n\t- max_epochs: The total number of epochs to train the model\n\n\t- lr_decay: The amount to decay the learning rate\n\n\t- lr_decay_every: Decay the learning rate every given epochs\n\n\t- show_every: Show the training information every given iterations\n\n\t- verbose: To show the information or not\n\n\tReturns:\n\t- opt_params: optimal parameters\n\t- loss_hist: Loss recorded during training\n\t- train_acc_hist: Training accuracy recorded during training\n\t- val_acc_hist: Validation accuracy recorded during training\n\t""""""\n\n\t# Initialize the variables\n\tdata_train, labels_train = data[""data_train""]\n\tdata_val, labels_val = data[""data_val""]\n\tdataloader = CIFAR10_DataLoader(data_train, labels_train, batch_size)\n\topt_val_acc = 0.0\n\topt_params = None\n\tloss_hist = []\n\ttrain_acc_hist = []\n\tval_acc_hist = []\n\n\t# Compute the maximum iterations and iterations per epoch\n\titers_per_epoch = max(data_train.shape[0] / batch_size, 1)\n\tmax_iters = iters_per_epoch  * max_epochs\n\n\t# Start the training\n\tfor epoch in xrange(max_epochs):\n\t\t# Compute the starting iteration and ending iteration for current epoch\n\t\titer_start = epoch * iters_per_epoch\n\t\titer_end   = (epoch + 1) * iters_per_epoch\n\n\t\t# Decay the learning rate every specified epochs\n\t\tif epoch % lr_decay_every == 0 and epoch > 0:\n\t\t\toptimizer.lr = optimizer.lr * lr_decay\n\t\t\tprint ""Decaying learning rate of the optimizer to {}"".format(optimizer.lr)\n\n\t\t# Main training loop\n\t\tfor iter in xrange(iter_start, iter_end):\n\t\t\tdata_batch, labels_batch = dataloader.get_batch()\n\n\t\t\t#############################################################################\n\t\t\t# TODO: Update the parameters by a forward pass for the network, a backward #\n\t\t\t# pass to the network, and make a step for the optimizer                    #\n\t\t\t#############################################################################\n\t\t\ty = model.forward(data_batch)\n\t\t\tloss = loss_func.forward(y,labels_batch)\n\t\t\tdLoss = loss_func.backward()\n\t\t\tmodel.backward(dLoss)\n\t\t\toptimizer.step()\n\t\t\t#############################################################################\n\t\t\t#                             END OF YOUR CODE                              #\n\t\t\t#############################################################################\n\t\t\tloss_hist.append(loss)\n\n\t\t\t# Show the training loss\n\t\t\tif verbose and iter % show_every == 0:\n\t\t\t\tprint ""(Iteration {} / {}) loss: {}"".format(iter+1, max_iters, loss_hist[-1])\n\n\t\t# End of epoch, compute the accuracies\n\t\ttrain_acc = 0\n\t\tval_acc = 0\n\t\t#############################################################################\n\t\t# TODO: Compute the training accuracy and validation accuracy, store the    #\n\t\t# results to train_acc_hist, and val_acc_hist respectively                  #\n\t\t#############################################################################\n\t\ttrain_acc = compute_acc(model, data_train, labels_train)\n\t\tval_acc = compute_acc(model, data_val, labels_val)\n\t\t#############################################################################\n\t\t#                             END OF YOUR CODE                              #\n\t\t#############################################################################\n\t\ttrain_acc_hist.append(train_acc)\n\t\tval_acc_hist.append(val_acc)\n\n\t\t# Save the best params for the model\n\t\tif val_acc > opt_val_acc:\n\t\t\t#############################################################################\n\t\t\t# TODO: Save the optimal parameters to opt_params variable by name          #\n\t\t\t#############################################################################\n\t\t\t#print opt_val_acc, val_acc\n\t\t\topt_val_acc = val_acc\n\t\t\t#print opt_val_acc, val_acc\n\t\t\t#if opt_params is None:\n\t\t\topt_params = {}\n\t\t\tfor layer in model.net.layers:\n\t\t\t\tfor n,v in layer.params.iteritems():\n\t\t\t\t\topt_params[n] = layer.params[n].copy()\n\t\t\t#############################################################################\n\t\t\t#                             END OF YOUR CODE                              #\n\t\t\t#############################################################################\n\n\t\t# Show the training accuracies\n\t\tif verbose:\n\t\t\tprint ""(Epoch {} / {}) Training Accuracy: {}, Validation Accuracy: {}"".format(\n\t\t\tepoch+1, max_epochs, train_acc, val_acc)\n\n\treturn opt_params, loss_hist, train_acc_hist, val_acc_hist'"
assignment2/lib/__init__.py,0,b''
assignment2/lib/datasets.py,5,"b'import cPickle as pickle\nimport numpy as np\nimport os\nfrom scipy.misc import imread\n\n\ndef unPickle(filename):\n\t"""""" Unpickle a file """"""\n\twith open(filename, \'rb\') as f:\n\t\td = pickle.load(f)\n\t\treturn d\n\n\ndef CIFAR10(data_path):\n\t"""""" Load every batch of CIFAR-10 binary data """"""\n\tall_batches = []\n\tall_labels = []\n\tfor b in range(1,6):\n\t\tf_train_curr = os.path.join(data_path, \'data_batch_%d\' % (b, ))\n\t\td = unPickle(f_train_curr)\n\t\tbatch = d[\'data\'].reshape(10000, 3, 32, 32).transpose(0,2,3,1).astype(""float"")\n\t\tlabels = np.array(d[\'labels\'])\n\t\tall_batches.append(batch)\n\t\tall_labels.append(labels)\n\tdata_train = np.concatenate(all_batches)\n\tlabels_train = np.concatenate(all_labels)\n\tdel batch, labels\n\tf_test = os.path.join(data_path, \'test_batch\')\n\td = unPickle(f_test)\n\tdata_test = d[\'data\'].reshape(10000, 3, 32, 32).transpose(0,2,3,1).astype(""float"")\n\tlabels_test = np.array(d[\'labels\'])\n\treturn data_train, labels_train, data_test, labels_test\n\n\ndef CIFAR10_data(num_training=49000, num_validation=1000, num_test=1000):\n\t# Load the raw CIFAR-10 data\n\tcifar10_dir = ""data/cifar-10-batches-py""\n\tdata_train, labels_train, data_test, labels_test = CIFAR10(cifar10_dir)\n\t    \n\t# Subsample the data\n\tdata_val = data_train[range(num_training, num_training+num_validation)]\n\tlabels_val = labels_train[range(num_training, num_training+num_validation)]\n\tdata_train = data_train[range(num_training)]\n\tlabels_train = labels_train[range(num_training)]\n\tdata_test = data_test[range(num_test)]\n\tlabels_test = labels_test[range(num_test)]\n\n\t# Normalize the data: subtract the images mean\n\tmean_image = np.mean(data_train, axis=0)\n\tdata_train -= mean_image\n\tdata_val -= mean_image\n\tdata_test -= mean_image\n\n\t# Transpose from (N, H, W, C) to (N, C, H, W)\n\tdata_train = data_train.transpose(0, 3, 1, 2).copy()\n\tdata_val = data_val.transpose(0, 3, 1, 2).copy()\n\tdata_test = data_test.transpose(0, 3, 1, 2).copy()\n\n\t# return a data dict\n\treturn {\n\t  \'data_train\': data_train, \'labels_train\': labels_train,\n\t  \'data_val\': data_val, \'labels_val\': labels_val,\n\t  \'data_test\': data_test, \'labels_test\': labels_test,\n\t}'"
assignment2/lib/grad_check.py,11,"b'## Code adopted from Stanford CS231N gradient_check.py\n\nfrom __future__ import print_function\nfrom builtins import range\nfrom past.builtins import xrange\n\nimport numpy as np\nfrom random import randrange\n\ndef rel_error(x, y):\n    """""" returns relative error """"""\n    return np.max(np.abs(x - y) / (np.maximum(1e-8, np.abs(x) + np.abs(y))))\n\ndef eval_numerical_gradient(f, x, verbose=True, h=0.00001):\n    """"""\n    a naive implementation of numerical gradient of f at x\n    - f should be a function that takes a single argument\n    - x is the point (numpy array) to evaluate the gradient at\n    """"""\n\n    fx = f(x) # evaluate function value at original point\n    grad = np.zeros_like(x)\n    # iterate over all indexes in x\n    it = np.nditer(x, flags=[\'multi_index\'], op_flags=[\'readwrite\'])\n    while not it.finished:\n\n        # evaluate function at x+h\n        ix = it.multi_index\n        oldval = x[ix]\n        x[ix] = oldval + h # increment by h\n        fxph = f(x) # evalute f(x + h)\n        x[ix] = oldval - h\n        fxmh = f(x) # evaluate f(x - h)\n        x[ix] = oldval # restore\n\n        # compute the partial derivative with centered formula\n        grad[ix] = (fxph - fxmh) / (2 * h) # the slope\n        if verbose:\n            print(ix, grad[ix])\n        it.iternext() # step to next dimension\n\n    return grad\n\n\ndef eval_numerical_gradient_array(f, x, df, h=1e-5):\n    """"""\n    Evaluate a numeric gradient for a function that accepts a numpy\n    array and returns a numpy array.\n    """"""\n    grad = np.zeros_like(x)\n    it = np.nditer(x, flags=[\'multi_index\'], op_flags=[\'readwrite\'])\n    while not it.finished:\n        ix = it.multi_index\n\n        oldval = x[ix]\n        x[ix] = oldval + h\n        pos = f(x).copy()\n        x[ix] = oldval - h\n        neg = f(x).copy()\n        x[ix] = oldval\n\n        grad[ix] = np.sum((pos - neg) * df) / (2 * h)\n        it.iternext()\n    return grad\n\n\ndef eval_numerical_gradient_blobs(f, inputs, output, h=1e-5):\n    """"""\n    Compute numeric gradients for a function that operates on input\n    and output blobs.\n\n    We assume that f accepts several input blobs as arguments, followed by a\n    blob where outputs will be written. For example, f might be called like:\n\n    f(x, w, out)\n\n    where x and w are input Blobs, and the result of f will be written to out.\n\n    Inputs:\n    - f: function\n    - inputs: tuple of input blobs\n    - output: output blob\n    - h: step size\n    """"""\n    numeric_diffs = []\n    for input_blob in inputs:\n        diff = np.zeros_like(input_blob.diffs)\n        it = np.nditer(input_blob.vals, flags=[\'multi_index\'],\n                       op_flags=[\'readwrite\'])\n        while not it.finished:\n            idx = it.multi_index\n            orig = input_blob.vals[idx]\n\n            input_blob.vals[idx] = orig + h\n            f(*(inputs + (output,)))\n            pos = np.copy(output.vals)\n            input_blob.vals[idx] = orig - h\n            f(*(inputs + (output,)))\n            neg = np.copy(output.vals)\n            input_blob.vals[idx] = orig\n\n            diff[idx] = np.sum((pos - neg) * output.diffs) / (2.0 * h)\n\n            it.iternext()\n        numeric_diffs.append(diff)\n    return numeric_diffs\n\n\ndef eval_numerical_gradient_net(net, inputs, output, h=1e-5):\n    return eval_numerical_gradient_blobs(lambda *args: net.forward(),\n                inputs, output, h=h)\n\n\ndef grad_check_sparse(f, x, analytic_grad, num_checks=10, h=1e-5):\n    """"""\n    sample a few random elements and only return numerical\n    in this dimensions.\n    """"""\n\n    for i in range(num_checks):\n        ix = tuple([randrange(m) for m in x.shape])\n\n        oldval = x[ix]\n        x[ix] = oldval + h # increment by h\n        fxph = f(x) # evaluate f(x + h)\n        x[ix] = oldval - h # increment by h\n        fxmh = f(x) # evaluate f(x - h)\n        x[ix] = oldval # reset\n\n        grad_numerical = (fxph - fxmh) / (2 * h)\n        grad_analytic = analytic_grad[ix]\n        rel_error = (abs(grad_numerical - grad_analytic) /\n                    (abs(grad_numerical) + abs(grad_analytic)))\n        print(\'numerical: %f analytic: %f, relative error: %e\'\n              %(grad_numerical, grad_analytic, rel_error))\n'"
assignment2/lib/layer_utils.py,43,"b'import numpy as np\n\ndef sigmoid(x):\n\t""""""\n\tA numerically stable version of the logistic sigmoid function.\n\t""""""\n\tpos_mask = (x >= 0)\n\tneg_mask = (x < 0)\n\tz = np.zeros_like(x)\n\tz[pos_mask] = np.exp(-x[pos_mask])\n\tz[neg_mask] = np.exp(x[neg_mask])\n\ttop = np.ones_like(x)\n\ttop[neg_mask] = z[neg_mask]\n\treturn top / (1 + z)\n\nclass RNN(object):\n\tdef __init__(self, *args):\n\t\t""""""\n\t\tRNN Object to serialize the NN layers\n\t\tPlease read this code block and understand how it works\n\t\t""""""\n\t\tself.params = {}\n\t\tself.grads = {}\n\t\tself.layers = []\n\t\tself.paramName2Indices = {}\n\t\tself.layer_names = {}\n\n\t\t# process the parameters layer by layer\n\t\tlayer_cnt = 0\n\t\tfor layer in args:\n\t\t\tfor n, v in layer.params.items():\n\t\t\t\tif v is None:\n\t\t\t\t\tcontinue\n\t\t\t\tself.params[n] = v\n\t\t\t\tself.paramName2Indices[n] = layer_cnt\n\t\t\tfor n, v in layer.grads.items():\n\t\t\t\tself.grads[n] = v\n\t\t\tif layer.name in self.layer_names:\n\t\t\t\traise ValueError(""Existing name {}!"".format(layer.name))\n\t\t\tself.layer_names[layer.name] = True\n\t\t\tself.layers.append(layer)\n\t\t\tlayer_cnt += 1\n\t\tlayer_cnt = 0\n\n\tdef assign(self, name, val):\n\t\t# load the given values to the layer by name\n\t\tlayer_cnt = self.paramName2Indices[name]\n\t\tself.layers[layer_cnt].params[name] = val\n\n\tdef assign_grads(self, name, val):\n\t\t# load the given values to the layer by name\n\t\tlayer_cnt = self.paramName2Indices[name]\n\t\tself.layers[layer_cnt].grads[name] = val\n\n\tdef get_params(self, name):\n\t\t# return the parameters by name\n\t\treturn self.params[name]\n\n\tdef get_grads(self, name):\n\t\t# return the gradients by name\n\t\treturn self.grads[name]\n\n\tdef gather_params(self):\n\t\t""""""\n\t\tCollect the parameters of every submodules\n\t\t""""""\n\t\tfor layer in self.layers:\n\t\t\tfor n, v in layer.params.iteritems():\n\t\t\t\tself.params[n] = v\n\n\tdef gather_grads(self):\n\t\t""""""\n\t\tCollect the gradients of every submodules\n\t\t""""""\n\t\tfor layer in self.layers:\n\t\t\tfor n, v in layer.grads.iteritems():\n\t\t\t\tself.grads[n] = v\n\n\tdef load(self, pretrained):\n\t\t"""""" \n\t\tLoad a pretrained model by names \n\t\t""""""\n\t\tfor layer in self.layers:\n\t\t\tif not hasattr(layer, ""params""):\n\t\t\t\tcontinue\n\t\t\tfor n, v in layer.params.iteritems():\n\t\t\t\tif n in pretrained.keys():\n\t\t\t\t\tlayer.params[n] = pretrained[n].copy()\n\t\t\t\t\tprint(""Loading Params: {} Shape: {}"".format(n, layer.params[n].shape))\n\nclass VanillaRNN(object):\n\tdef __init__(self, input_dim, h_dim, init_scale=0.02, name=\'vanilla_rnn\'):\n\t\t""""""\n\t\tIn forward pass, please use self.params for the weights and biases for this layer\n\t\tIn backward pass, store the computed gradients to self.grads\n\t\tname: the name of current layer\n\t\tinput_dim: input dimension\n\t\th_dim: hidden state dimension\n\t\t\n\t\tmeta: variables needed for the backward pass\n\t\t""""""\n\t\tself.name = name\n\t\tself.wx_name = name + ""_wx""\n\t\tself.wh_name = name + ""_wh""\n\t\tself.b_name = name + ""_b""\n\t\tself.input_dim = input_dim\n\t\tself.h_dim = h_dim\n\t\tself.params = {}\n\t\tself.grads = {}\n\t\tself.params[self.wx_name] = init_scale * np.random.randn(input_dim, h_dim)\n\t\tself.params[self.wh_name] = init_scale * np.random.randn(h_dim, h_dim)\n\t\tself.params[self.b_name] = np.zeros(h_dim)\n\t\tself.grads[self.wx_name] = None\n\t\tself.grads[self.wh_name] = None\n\t\tself.grads[self.b_name] = None\n\t\tself.meta = None\n\n\t\t\n\tdef step_forward(self, x, prev_h):\n\t\t""""""\n\t\tx: input feature (N, D)\n\t\tprev_h: hidden state from the previous timestep (N, H)\n\t\t\n\t\tnext_h: hidden state in the next timestep (N, H)\n\t\tmeta: variables needed for the backward pass\n\t\t""""""\n\t\tnext_h, meta = None, None\n\t\tassert np.prod(x.shape[1:]) == self.input_dim, ""But got {} and {}"".format(\n\t\t\tnp.prod(x.shape[1:]), self.input_dim)\n\t\t############################################################################\n\t\t# TODO: check out the one step forward pass implementation\t\t\t \t   #\n\t\t############################################################################\n\t\tnext_h = np.tanh(x.dot(self.params[self.wx_name]) + prev_h.dot(self.params[self.wh_name]) + self.params[self.b_name])\n\t\tmeta = [x, prev_h, next_h]\n\t\t#############################################################################\n\t\t#\t\t\t\t\t\t\t END OF THE CODE\t\t\t\t\t\t\t\t#\n\t\t#############################################################################\n\t\treturn next_h, meta\n\n\tdef step_backward(self, dnext_h, meta):\n\t\t""""""\n\t\tdnext_h: gradient w.r.t. next hidden state\n\t\tmeta: variables needed for the backward pass\n\n\t\tdx: gradients of input feature (N, D)\n\t\tdprev_h: gradients of previous hiddel state (N, H)\n\t\tdWh: gradients w.r.t. feature-to-hidden weights (D, H)\n\t\tdWx: gradients w.r.t. hidden-to-hidden weights (H, H)\n\t\tdb: gradients w.r.t bias (H,)\n\t\t""""""\n\n\t\tdx, dprev_h, dWx, dWh, db = None, None, None, None, None\n\t\t#############################################################################\n\t\t# TODO: check out the one step backward pass implementation\t\t\t\t    #\n\t\t#############################################################################\n\t\tx, prev_h, next_h = meta\n\t\tdtanh = dnext_h*(1.0-next_h**2)\n\t\tdx = dtanh.dot(self.params[self.wx_name].T)\n\t\tdprev_h = dtanh.dot(self.params[self.wh_name].T)\n\t\tdWx = x.T.dot(dtanh)\n\t\tdWh = prev_h.T.dot(dtanh)\n\t\tdb = np.sum(dtanh,axis=0)\t\t\t\t\n\t\t#############################################################################\n\t\t#\t\t\t\t\t\t\t END OF THE CODE  \t\t\t\t\t\t\t\t#\n\t\t#############################################################################\n\t\treturn dx, dprev_h, dWx, dWh, db\n\n\tdef forward(self, x, h0):\n\t\t""""""\n\t\tT: number of input sequence \n\t\tD: input sequence dimension\n\t\tH: hidden state dimension\n\t\tN: batch size \n\n\t\tx: input feature for the entire timeseries (N, T, D)\n\t\th0: initial hidden state (N, H)\n\t\t\n\t\th: hidden states for the entire timeseries (N, T, H)\n\t\tself.meta: variables needed for the backward pass\n\t\t""""""\n\t\th = None\n\t\tself.meta = []\n\t\t##############################################################################\n\t\t# TODO: Check forward pass for a vanilla RNN running on a sequence of\t\t #\n\t\t# input data. We use the step_forward function defined above\t\t\t\t #\n\t\t##############################################################################\n\t\th = np.zeros((x.shape[0],x.shape[1],h0.shape[1]))\n\t\th[:,0,:], meta_i = self.step_forward(x[:,0,:], h0)\n\t\tself.meta.append(meta_i)\n\t\tfor i in range(1, x.shape[1]):\n\t\t\th[:,i,:], meta_i = self.step_forward(x[:,i,:], h[:,i-1,:])\n\t\t\tself.meta.append(meta_i)\n\t\t##############################################################################\n\t\t#\t\t\t\t\t\t\t   END OF THE CODE\t\t\t\t\t\t\t\t #\n\t\t##############################################################################\n\t\treturn h\n\n\tdef backward(self, dh):\n\t\t""""""\n\t\tdh: gradients of hidden states for the entire timeseries (N, T, H)\n\n\t\tdx: gradient of inputs (N, T, D)\n\t\tdh0: gradient w.r.t. initial hidden state (N, H)\n\t\t\n\t\tself.grads[self.wx_name]: gradient of input-to-hidden weights (D, H)\n\t\tself.grads[self.wh_name]: gradient of hidden-to-hidden weights (H, H)\n\t\tself.grads[self.b_name]: gradient of biases (H,)\n\t\t""""""\n\t\tdx, dh0, self.grads[self.wx_name], self.grads[self.wh_name], self.grads[self.b_name] = None, None, None, None, None\n\t\t##############################################################################\n\t\t# TODO: Check the backward pass for a vanilla RNN running an entire\t\t\t #\n\t\t# sequence of data. We use the rnn_step_backward function defined above\t     #\n\t\t##############################################################################\n\t\tN = dh.shape[0]\n\t\tT = dh.shape[1]\n\t\tH = dh.shape[2]\n\t\tD = self.meta[0][0].shape[1]\n\n\t\tdx = np.zeros((N,T,D))\n\t\tdh0 = np.zeros((N,H))\n\t\tself.grads[self.wx_name] = np.zeros((D,H))\n\t\tself.grads[self.wh_name] = np.zeros((H,H))\n\t\tself.grads[self.b_name] = np.zeros((H,))\n\t\tdnext_h = dh[:,T-1,:]\n\t\tfor i in reversed(range(0, T)):\n\t\t\tdxi, dhi, dWxi, dWhi, dbi = self.step_backward(dnext_h,self.meta[i])\n\t\t\tdx[:,i,:] = dxi\n\t\t\tif i == 0:\n\t\t\t\tdh0 = dhi\n\t\t\telse:\n\t\t\t\tdnext_h = dhi + dh[:,i-1,:]\n\t\t\tself.grads[self.wx_name] += dWxi\n\t\t\tself.grads[self.wh_name] += dWhi\n\t\t\tself.grads[self.b_name] += dbi\n\t\t##############################################################################\n\t\t#\t\t\t\t\t\t\t   END OF THE CODE\t\t\t\t\t\t\t\t #\n\t\t##############################################################################\n\t\tself.meta = []\n\t\treturn dx, dh0\n\t\t\nclass LSTM(object):\n\tdef __init__(self, input_dim, h_dim, init_scale=0.02, name=\'lstm\'):\n\t\t""""""\n\t\tIn forward pass, please use self.params for the weights and biases for this layer\n\t\tIn backward pass, store the computed gradients to self.grads\n\t\t\n\t\tname: the name of current layer\n\t\tinput_dim: input dimension\n\t\th_dim: hidden state dimension\n\t\t\n\t\tmeta: variables needed for the backward pass\n\t\t""""""\n\t\tself.name = name\n\t\tself.wx_name = name + ""_wx""\n\t\tself.wh_name = name + ""_wh""\n\t\tself.b_name = name + ""_b""\n\t\tself.input_dim = input_dim\n\t\tself.h_dim = h_dim\n\t\tself.params = {}\n\t\tself.grads = {}\n\t\tself.params[self.wx_name] = init_scale * np.random.randn(input_dim, 4*h_dim)\n\t\tself.params[self.wh_name] = init_scale * np.random.randn(h_dim, 4*h_dim)\n\t\tself.params[self.b_name] = np.zeros(4*h_dim)\n\t\tself.grads[self.wx_name] = None\n\t\tself.grads[self.wh_name] = None\n\t\tself.grads[self.b_name] = None\n\t\tself.meta = None\n\n\t\t\n\tdef step_forward(self, x, prev_h, prev_c):\n\t\t""""""\n\t\tx: input feature (N, D)\n\t\tprev_h: hidden state from the previous timestep (N, H)\n\t\tprev_c: previous cell state (N, H)\n\t\t\n\t\tself.params[self.wx_name]: input-to-hidden weights (D, 4H)\n\t\tself.params[self.wh_name]: hidden-to-hidden weights (H, 4H)\n\t\tself.params[self.b_name]: biases (4H,)\n\n\t\tnext_h: next hidden state (N, H)\n\t\tnext_c: next cell state (N, H)\n\n\t\tmeta: variables needed for the backward pass\n\t\t""""""\n\t\tnext_h, next_c, meta = None, None, None\n\t\t#############################################################################\n\t\t# TODO: Implement the forward pass for a single timestep of an LSTM.\t\t#\n\t\t# You may want to use the numerically stable sigmoid implementation above.  #\n\t\t#############################################################################\n\t\ta = x.dot(self.params[self.wx_name]) + prev_h.dot(self.params[self.wh_name]) + self.params[self.b_name]\n\t\th = prev_h.shape[1]\n\t\ta_i=a[:,:h]\n\t\ta_f=a[:,h:2*h]\n\t\ta_o=a[:,2*h:3*h]\n\t\ta_g=a[:,3*h:]\n\t\ti = sigmoid(a_i)\n\t\tf = sigmoid(a_f)\n\t\to = sigmoid(a_o)\n\t\tg = np.tanh(a_g)\n\t\tnext_c = np.multiply(prev_c,f) + np.multiply(i,g)\n\t\tnext_h = np.multiply(np.tanh(next_c),o)\n\t\tmeta = [np.tanh(next_c), o, g, i, f, prev_c, prev_h, x]\n\t\t##############################################################################\n\t\t#\t\t\t\t\t\t\t   END OF YOUR CODE\t\t\t\t\t\t\t     #\n\t\t##############################################################################\n\t\treturn next_h, next_c, meta\n\t\t\n\tdef step_backward(self, dnext_h, dnext_c, meta):\n\t\t""""""\n\t\tdnext_h: gradient w.r.t. next hidden state\n\t\tmeta: variables needed for the backward pass\n\n\t\tdx: gradients of input feature (N, D)\n\t\tdprev_h: gradients w.r.t. previous hiddel state (N, H)\n\t\tdprev_c: gradients w.r.t. previous cell state (N, H)\n\t\tdWh: gradients w.r.t. feature-to-hidden weights (D, 4H)\n\t\tdWx: gradients w.r.t. hidden-to-hidden weights (H, 4H)\n\t\tdb: gradients w.r.t bias (4H,)\n\t\t""""""\n\t\tdx, dh, dc, dWx, dWh, db = None, None, None, None, None, None\n\t\t#############################################################################\n\t\t# TODO: Implement the backward pass for a single timestep of an LSTM.\t    #\n\t\t#\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    #\n\t\t# HINT: For sigmoid and tanh you can compute local derivatives in terms of  #\n\t\t# the output value from the nonlinearity.\t\t\t\t\t\t\t\t    #\n\t\t#############################################################################\n\t\tnext_c_tanh, o, g, i, f, prev_c, prev_h, x = meta\n\t\tdnext_c += dnext_h*o*(1-next_c_tanh**2)\n\t\tdo = dnext_h*next_c_tanh\n\t\tdf = prev_c*dnext_c\n\t\tdi = g * dnext_c\n\t\tdg = i * dnext_c\n\t\tda_o = (1-o)*o * do\n\t\tda_f = (1-f)*f * df\n\t\tda_i = (1-i)*i * di\n\t\tda_g = (1 - g**2) * dg\n\t\tda = np.hstack((da_i, da_f, da_o, da_g))\n\t\tdb = da.sum(axis=0)\n\t\tdWh = prev_h.transpose().dot(da)\n\t\tdWx = x.transpose().dot(da)\n\t\tdx = da.dot(self.params[self.wx_name].transpose())\n\t\tdprev_h = da.dot(self.params[self.wh_name].transpose())\n\t\tdprev_c = f*dnext_c\n\t\t##############################################################################\n\t\t#\t\t\t\t\t\t\t   END OF YOUR CODE\t\t\t\t\t\t\t     #\n\t\t##############################################################################\n\n\t\treturn dx, dprev_h, dprev_c, dWx, dWh, db\n\n\tdef forward(self, x, h0):\n\t\t""""""\n\t\tForward pass for an LSTM over an entire sequence of data. \n\t\tT: number of input sequence \n\t\tD: input sequence dimension\n\t\tH: hidden state dimension\n\t\tN: batch size \n\n\t\tPlease make sure that you define c, which is an internal variable to the LSTM.\n        Note that in each timestep, c is passed as input, and the initial state of c is set to zero.\n\n\t\tx: input data (N, T, D)\n\t\th0: initial hidden state (N, H)\n\t\t\n\t\tself.params[self.wx_name]: weights for input-to-hidden connections (D, 4H)\n\t\tself.params[self.wh_name]: weights for hidden-to-hidden connections (H, 4H)\n\t\tself.params[self.b_name]: biases (4H,)\n\n\t\tself.meta: variables needed for the backward pass\n\n\t\th: hidden states for all timesteps of all sequences (N, T, H)\n\t\t""""""\n\t\th = None\n\t\tself.meta = []\n\t\t#############################################################################\n\t\t# TODO: Implement the forward pass for an LSTM over an entire timeseries.   #\n\t\t# You should use the lstm_step_forward function that you just defined.\t    #\n\t\t#############################################################################\n\t\tN, T, D = x.shape\n\t\tN, H = h0.shape\n\t\th = np.zeros((N, T, H))\n\t\tprev_h = h0\n\t\tprev_c = np.zeros((N, H))\n\t\tstep_cache = [None for i in range(T)]\n\t\t\n\t\tfor t in range(T):\n\t\t\txt = x[:, t, :]\n\t\t\tnext_h, next_c, step_cache[t] = LSTM.step_forward(self,xt, prev_h, prev_c)\n\t\t\th[:, t, :] = next_h\n\t\t\tprev_h = next_h\n\t\t\tprev_c = next_c\n\t\tself.meta.append(step_cache)\n\t\tself.meta.append(D)\n\t\t##############################################################################\n\t\t#\t\t\t\t\t\t\t   END OF YOUR CODE\t\t\t\t\t\t\t \t #\n\t\t##############################################################################\n\n\t\treturn h\n\n\tdef backward(self, dh):\n\t\t""""""\n\t\tBackward pass for an LSTM over an entire sequence of data.\n\n\t\tdh: gradients of hidden states for the entire timeseries (N, T, H)\n\t\t\t\t\n\t\tself.meta: variables needed for the backward pass\n\n\t\tdx: gradient of input data (N, T, D)\n\t\tdh0: gradient of initial hidden state (N, H)\n\t\t\n\t\tself.grads[self.wx_name]: gradient w.r.t. input-to-hidden weight (D, 4H)\n\t\tself.grads[self.wh_name]: : gradient w.r.t. hidden-to-hidden weight (H, 4H)\n\t\tself.grads[self.b_name]: : gradient w.r.t. biases (4H,)\n\t\t""""""\n\t\tdx, dh0 = None, None\n\t\t#############################################################################\n\t\t# TODO: Implement the backward pass for an LSTM over an entire timeseries.  #\n\t\t# You should use the lstm_step_backward function that you just defined.\t    #\n\t\t#############################################################################\n\t\tN, T, H = dh.shape\n\t\tstep_cache, D = self.meta\n\t\tdWx = np.zeros((D, 4*H))\n\t\tdWh = np.zeros((H, 4*H))\n\t\tdx = np.zeros((N, T, D))\n\t\tdb = np.zeros((4*H))\n\t\tdprev_h = np.zeros((N, H))\n\t\tdprev_c = np.zeros((N, H))\n\t\tfor t in reversed(range(T)):\n\t\t\tdx_t, dprev_h, dprev_c, dWx_t, dWh_t, db_t = LSTM.step_backward(self,dh[:, t, :] + dprev_h, dprev_c, step_cache[t])\n\t\t\tdx[:, t, :] = dx_t\n\t\t\tdWx += dWx_t\n\t\t\tdWh += dWh_t\n\t\t\tdb += db_t\n\t\tself.grads[self.wx_name] = dWx\n\t\tself.grads[self.wh_name] = dWh\n\t\tself.grads[self.b_name] = db\n\t\tdh0 = dprev_h\n\t\t##############################################################################\n\t\t#\t\t\t\t\t\t\t   END OF YOUR CODE\t\t\t\t\t\t\t     #\n\t\t##############################################################################\n\t\tself.meta = []\n\t\treturn dx, dh0\n\t\t\t\n\t\t\nclass word_embedding(object):\n\tdef __init__(self, voc_dim, vec_dim, name=""we""):\n\t\t""""""\n\t\tIn forward pass, please use self.params for the weights and biases for this layer\n\t\tIn backward pass, store the computed gradients to self.grads\n\t\t\n\t\tname: the name of current layer\n\t\tvoc_dim: words size\n\t\tvec_dim: embedding vector dimension\n        \n\t\tself.meta: variables needed for the backward pass\n\t\t""""""\n\t\tself.name = name\n\t\tself.w_name = name + ""_w""\n\t\tself.voc_dim = voc_dim\n\t\tself.vec_dim = vec_dim\n\t\tself.params = {}\n\t\tself.grads = {}\n\t\tself.params[self.w_name] = np.random.randn(voc_dim, vec_dim)\n\t\tself.grads[self.w_name] = None\n\t\tself.meta = None\n\t\t\n\tdef forward(self, x):\n\t\t""""""\n\t\tForward pass for word embeddings. \n\t\tN: batch size\n\t\tT: length of sequences \n\t\tV: number of vocaburary\n\t\tD: embedding vector dimension\n\n\t\tx: integer array  (N, T) gives indices of words. Each element idx\n\t\t  of x muxt be in the range 0 <= idx < V.\n\t\tself.params[self.wx_name]: weight matrix giving word vectors for all words.\n\n\t\tout: array of embedding vectors (N, T, D) giving word vectors for all input words.\n\t\t\n\t\tself.meta: variables needed for the backward pass\n\t\t""""""\n\t\tout, self.meta = None, None\n\t\t##############################################################################\n\t\t# TODO: Check the forward pass for word embeddings.\t\t\t\t\t\t\t #\n\t\t#\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t #\n\t\t# TIPS: This can be done in one line using NumPy\'s array indexing.\t\t\t #\n\t\t##############################################################################\n\t\tout = self.params[self.w_name][x,:]\n\t\tself.meta = [out, x]\n\t\t##############################################################################\n\t\t#\t\t\t\t\t\t\t   END OF THE CODE\t\t\t\t\t\t\t\t #\n\t\t##############################################################################\n\t\treturn out\n\t\t\n\tdef backward(self, dout):\n\t\t""""""\n\t\tBackward pass for word embeddings. Note that we only return gradient for the word embedding\n\t\tmatrix as we cannot back-propagate into the words.\n\t\t\n\t\tdout: upstream gradients (N, T, D)\n\t\t\n\t\tself.meta: variables needed for the backward pass\n\n\t\tself.grads[self.w_name]: gradient of word embedding matrix (V, D).\n\t\t""""""\n\t\tself.grads[self.w_name] = None\n\t\t##############################################################################\n\t\t# TODO: Check the backward pass for word embeddings.\t\t\t\t\t \t #\n\t\t#\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t #\n\t\t# Note that Words can appear more than once in a sequence.\t\t\t\t\t #\n\t\t# TIPS: function np.add.at is quite useful\t\t\t\t\t\t\t\t\t #\n\t\t##############################################################################\n\t\tout, x = self.meta \n\t\tself.grads[self.w_name] = np.zeros(self.params[self.w_name].shape)\n\t\tnp.add.at(self.grads[self.w_name],x,dout)\n\t\t##############################################################################\n\t\t#\t\t\t\t\t\t\t   END OF THE CODE\t\t\t\t\t\t\t\t #\n\t\t##############################################################################\n\t\t\nclass temporal_fc(object):\n\tdef __init__(self, input_dim, output_dim, init_scale=0.02, name=\'t_fc\'):\n\t\t""""""\n\t\tIn forward pass, please use self.params for the weights and biases for this layer\n\t\tIn backward pass, store the computed gradients to self.grads\n\t\t\n\t\tname: the name of current layer\n\t\tinput_dim: input dimension\n\t\toutput_dim: output dimension\n\t\t\n\t\tself.meta: variables needed for the backward pass \n\t\t""""""\n\t\tself.name = name\n\t\tself.w_name = name + ""_w""\n\t\tself.b_name = name + ""_b""\n\t\tself.input_dim = input_dim\n\t\tself.output_dim = output_dim\n\t\tself.params = {}\n\t\tself.grads = {}\n\t\tself.params[self.w_name] = init_scale * np.random.randn(input_dim, output_dim)\n\t\tself.params[self.b_name] = np.zeros(output_dim)\n\t\tself.grads[self.w_name] = None\n\t\tself.grads[self.b_name] = None\n\t\tself.meta = None\n\t\t\n\tdef forward(self, x):\n\t\t""""""\n\t\tForward pass for a temporal fc layer. \n\t\tN: batch size\n\t\tT: number of input sequence \n\t\tD: input vector dimension\n\t\tM: output vector dimension\n\n\t\tx: Input data of shape (N, T, D)\n\t\t\n\t\tself.params[self.w_name]: weights (D, M)\n\t\tself.params[self.b_name]: biases (M,)\n\n\t\tout: output data (N, T, M)\n\t\t\n\t\tself.meta: variables needed for the backward pass \n\t\t""""""\n\t\t##############################################################################\n\t\t# TODO: Check the forward pass for temporal fully connected layer.\t\t     #\n\t\t##############################################################################\n\t\tN, T, D = x.shape\n\t\tM = self.params[self.b_name].shape[0]\n\t\tout = x.reshape(N * T, D).dot(self.params[self.w_name]).reshape(N, T, M) + self.params[self.b_name]\n\t\tself.meta = [x, out]\n\t\treturn out\n\t\t##############################################################################\n\t\t#\t\t\t\t\t\t\t   END OF THE CODE\t\t\t\t\t\t\t    #\n\t\t##############################################################################\n\n\n\tdef backward(self, dout):\n\t\t""""""\n\t\tBackward pass for temporal fc layer.\n\n\t\tdout: upstream gradients of shape (N, T, M)\n\t\t\n\t\tself.meta: variables needed for the backward pass \n\n\t\tdx: gradient of input (N, T, D)\n\t\tself.grads[self.w_name]: gradient w.r.t. weights (D, M)\n\t\tself.grads[self.b_name]: gradient w.r.t. biases (M,)\n\t\t""""""\n\t\tx, out = self.meta\n\t\tN, T, D = x.shape\n\t\tM = self.params[self.b_name].shape[0]\n\t\t##############################################################################\n\t\t# TODO: Check the backward pass for temporal fully connected layer.\t\t     #\n\t\t##############################################################################\n\t\tdx = dout.reshape(N * T, M).dot(self.params[self.w_name].T).reshape(N, T, D)\n\t\tself.grads[self.w_name] = dout.reshape(N * T, M).T.dot(x.reshape(N * T, D)).T\n\t\tself.grads[self.b_name] = dout.sum(axis=(0, 1))\n\t\t##############################################################################\n\t\t#\t\t\t\t\t\t\t   END OF THE CODE\t\t\t\t\t\t\t  \t #\n\t\t##############################################################################\n\t\treturn dx\n\t\nclass temporal_softmax_loss(object):\n\tdef __init__(self, dim_average=True):\n\t\t""""""\n\t\tdim_average: if dividing by the input dimension or not\n\t\tdLoss: intermediate variables to store the scores\n\t\tlabel: ground truth label for classification task\n\t\t""""""\n\t\tself.dim_average = dim_average  # if average w.r.t. the total number of features\n\t\tself.dLoss = None\n\t\tself.label = None\n\n\tdef forward(self, feat, label, mask):\n\t\t"""""" Some comments """"""\n\t\tloss = None\n\t\tN, T, V = feat.shape\n\t\t##############################################################################\n\t\t# TODO: Check the forward pass for temporal softmax loss layer.\t\t\t     #\n\t\t##############################################################################\n\t\tfeat_flat = feat.reshape(N * T, V)\n\t\tlabel_flat = label.reshape(N * T)\n\t\tmask_flat = mask.reshape(N * T)\n\n\t\tprobs = np.exp(feat_flat - np.max(feat_flat, axis=1, keepdims=True))\n\t\tprobs /= np.sum(probs, axis=1, keepdims=True)\n\t\tloss = -np.sum(mask_flat * np.log(probs[np.arange(N * T), label_flat]))\n\t\tif self.dim_average:\n\t\t\tloss /= N\n\n\t\tself.dLoss = probs.copy()\n\t\tself.label = label\n\t\tself.mask = mask\n\t\t##############################################################################\n\t\t#\t\t\t\t\t\t\t   END OF THE CODE\t\t\t\t\t\t\t     #\n\t\t##############################################################################\n\n\t\treturn loss\n\n\tdef backward(self):\n\t\tN, T = self.label.shape\n\t\tdLoss = self.dLoss\n\t\tif dLoss is None:\n\t\t\traise ValueError(""No forward function called before for this module!"")\n\t\t##############################################################################\n\t\t# TODO: Check the backward pass for temporal softmax loss layer.\t\t\t #\n\t\t##############################################################################\n\t\tdLoss[np.arange(dLoss.shape[0]), self.label.reshape(N * T)] -= 1.0\n\t\tif self.dim_average:\n\t\t\tdLoss /= N\n\t\tdLoss *= self.mask.reshape(N * T)[:, None]\n\t\tself.dLoss = dLoss\n\t\t##############################################################################\n\t\t#\t\t\t\t\t\t\t   END OF THE CODE\t\t\t\t\t\t\t     #\n\t\t##############################################################################\n\n\t\treturn dLoss.reshape(N, T, -1)\n\n\n\n'"
assignment2/lib/optim.py,6,"b'import numpy as np\n\n\n"""""" Super Class """"""\nclass Optimizer(object):\n\t"""""" \n\tThis is a template for implementing the classes of optimizers\n\t""""""\n\tdef __init__(self, net, lr=1e-4):\n\t\tself.net = net  # the model\n\t\tself.lr = lr    # learning rate\n\t\t\n\tdef update(self, layer):\n\t\tpass\n\n\t"""""" Make a step and update all parameters """"""\n\tdef step(self):\n\t\tif self.net.preprocess is not None:\n\t\t\tself.update(self.net.preprocess)\n\t\tif self.net.rnn is not None:\n\t\t\tself.update(self.net.rnn)\n\t\tif self.net.postprocess is not None:\n\t\t\tself.update(self.net.postprocess)\n\n"""""" Classes """"""\nclass SGD(Optimizer):\n\t"""""" Some comments """"""\n\tdef __init__(self, net, lr=1e-4):\n\t\tself.net = net\n\t\tself.lr = lr\n\t\t\n\tdef update(self, layer):\n\t\tfor n, v in layer.params.items():\n\t\t\tdv = layer.grads[n]\n\t\t\tlayer.params[n] -= self.lr * dv\n\n\tdef step(self):\n\t\tif self.net.preprocess is not None:\n\t\t\tself.update(self.net.preprocess)\n\t\tif self.net.rnn is not None:\n\t\t\tself.update(self.net.rnn)\n\t\tif self.net.postprocess is not None:\n\t\t\tself.update(self.net.postprocess)\n\nclass SGDM(Optimizer):\n\tdef __init__(self, net, lr=1e-4, momentum=0.0):\n\t\tself.net = net\n\t\tself.lr = lr\n\t\tself.momentum = momentum\n\t\tself.velocity = {}\n\t\t\n\tdef update(self, layer):\n\t\tfor n, v in layer.params.items():\n\t\t\tdv = layer.grads[n]\n\t\t\tif n not in self.velocity:\n\t\t\t\tself.velocity[n] = np.zeros(v.shape)\n\t\t\tv_new = self.momentum * self.velocity[n] - self.lr * dv\n\t\t\tlayer.params[n] += v_new\n\t\t\tself.velocity[n] = v_new\n\n\tdef step(self):\n\t\tif self.net.preprocess is not None:\n\t\t\tself.update(self.net.preprocess)\n\t\tif self.net.rnn is not None:\n\t\t\tself.update(self.net.rnn)\n\t\tif self.net.postprocess is not None:\n\t\t\tself.update(self.net.postprocess)\n\nclass RMSProp(Optimizer):\n\tdef __init__(self, net, lr=1e-2, decay=0.99, eps=1e-8):\n\t\tself.net = net\n\t\tself.lr = lr\n\t\tself.decay = decay\n\t\tself.eps = eps\n\t\tself.cache = {}  # decaying average of past squared gradients\n\t\t\n\tdef update(self, layer):\n\t\tfor n, v in layer.params.items():\n\t\t\tdv = layer.grads[n]\n\t\t\tif n not in self.cache:\n\t\t\t\tself.cache[n] = np.zeros(v.shape)\n\t\t\tself.cache[n] = self.decay * self.cache[n] + (1-self.decay) * dv**2\n\t\t\tlayer.params[n] -= self.lr * dv / np.sqrt(self.cache[n] + self.eps)\n\n\tdef step(self):\n\t\tif self.net.preprocess is not None:\n\t\t\tself.update(self.net.preprocess)\n\t\tif self.net.rnn is not None:\n\t\t\tself.update(self.net.rnn)\n\t\tif self.net.postprocess is not None:\n\t\t\tself.update(self.net.postprocess)\n\nclass Adam(Optimizer):\n\tdef __init__(self, net, lr=1e-3, beta1=0.9, beta2=0.999, t=0, eps=1e-8):\n\t\tself.net = net\n\t\tself.lr = lr\n\t\tself.beta1, self.beta2 = beta1, beta2\n\t\tself.eps = eps\n\t\tself.mt = {}\n\t\tself.vt = {}\n\t\tself.t = t\n\n\tdef update(self, layer):\n\t\tfor n, v in layer.params.items():\n\t\t\tdv = layer.grads[n]\n\t\t\tself.t += 1\n\t\t\tif n not in self.mt:\n\t\t\t\tself.mt[n] = np.zeros(v.shape)\n\t\t\tif n not in self.vt:\n\t\t\t\tself.vt[n] = np.zeros(v.shape)\n\t\t\tmt = self.beta1 * self.mt[n] + (1-self.beta1)*dv\n\t\t\tvt = self.beta2 * self.vt[n] + (1-self.beta2)*dv**2\t\n\t\t\tmt_bi = mt / (1 - self.beta1**self.t)\n\t\t\tvt_bi = vt / (1 - self.beta2**self.t)\n\t\t\tself.mt[n] = mt\n\t\t\tself.vt[n] = vt\n\t\t\t\n\t\t\tlayer.params[n] -= self.lr * mt_bi / np.sqrt(vt_bi + self.eps)\n\t\n\tdef step(self):\t\n\t\tif self.net.preprocess is not None:\n\t\t\tself.update(self.net.preprocess)\n\t\tif self.net.rnn is not None:\n\t\t\tself.update(self.net.rnn)\n\t\tif self.net.postprocess is not None:\n\t\t\tself.update(self.net.postprocess)'"
assignment2/lib/rnn.py,8,"b'import numpy as np\nfrom lib.layer_utils import *\n\n"""""" Classes """"""\nclass TestRNN(object):\n\tdef __init__(self, input_dim, hidden_dim, cell_type=\'rnn\', dtype=np.float32, seed=None):\n\t\tself.params = {}\n\t\tself.grads = {}\n\t\n\t\t\n\t\tif cell_type in \'rnn\':\n\t\t\tself.rnn = VanillaRNN(input_dim, hidden_dim)\n\t\t########## TODO: ##########\n\t\tif cell_type in \'lstm\':\n\t\t\tself.rnn = LSTM(input_dim, hidden_dim)\n\t\t########### END ###########\n\t\t\n\t\tself.gather_params()\n\n\tdef forward(self, feat, h0):\n\t\toutput = feat\n\t\toutput = self.rnn.forward(output, h0)\n\t\tself.gather_params()\n\t\treturn output\n\n\tdef backward(self, dout):\n\t\tdout, dh0 = self.rnn.backward(dout)\n\t\tself.gather_grads()\n\t\treturn dout\n\t\t\n\tdef gather_params(self):\n\t\tfor n, v in self.rnn.params.items():\n\t\t\tself.params[n] = v\n\t\t\n\tdef assign_params(self):\n\t\tfor n, v in self.rnn.params.items():\n\t\t\tself.rnn.params[n] = self.params[n]\n\t\t\t\t\t\t\t\t\n\tdef gather_grads(self):\n\t\tfor n, v in self.rnn.grads.items():\n\t\t\t\tself.grads[n] = v\n\t\t\t\t\nclass LanguageModelRNN(object):\n\tdef __init__(self, word_size, word_vec_dim, hidden_dim, cell_type=\'rnn\', dtype=np.float32, seed=None):\n\t\tself.params = {}\n\t\tself.grads = {}\n\t\t\n\t\tself.word_size = word_size\n\t\tself.word_vec_dim = word_vec_dim\n\t\tself.hidden_dim = hidden_dim\n\t\tself.cell_type = cell_type\n\n\t\t########## TODO: ##########\n\t\tself.preprocess = word_embedding(self.word_size, self.word_vec_dim)\n\t\tself.postprocess = temporal_fc(self.hidden_dim,self.word_size)\n\t\tif cell_type in \'rnn\':\n\t\t\tself.rnn = VanillaRNN(self.word_vec_dim, self.hidden_dim)\n\t\tif cell_type in \'lstm\':\n\t\t\tself.rnn = LSTM(self.word_vec_dim, self.hidden_dim)\n\t\t########### END ###########\n\t\t\n\t\tself.gather_params()\n\n\tdef forward(self, feat, h0):\n\t\toutput = feat\n\t\tif self.preprocess is not None:\n\t\t\toutput = self.preprocess.forward(output)\n\t\tif self.rnn is not None:\t\n\t\t\toutput = self.rnn.forward(output, h0)\n\t\tif self.postprocess is not None:\n\t\t\toutput = self.postprocess.forward(output)\n\t\tself.gather_params()\n\t\treturn output\n\n\tdef backward(self, dout):\n\t\tif self.postprocess is not None:\n\t\t\tdout = self.postprocess.backward(dout)\n\t\tif self.rnn is not None:\n\t\t\tdout, dh0 = self.rnn.backward(dout)\n\t\tif self.preprocess is not None:\n\t\t\tdout = self.preprocess.backward(dout)\n\t\tself.gather_grads()\n\t\treturn dout, dh0\n\t\n\tdef sample(self, word_index, n_text):\n\t\tx = np.zeros((1,1), dtype=np.int)\n\t\tx[0,0] = word_index\n\t\tw_indices = [word_index]\n\t\tif self.cell_type in \'rnn\':\n\t\t\th = np.zeros((1,1,self.hidden_dim))\n\t\t\tfor i in range(0, n_text):\n\t\t\t\toutput = self.preprocess.forward(x)\n\t\t\t\th[:,0,:], _ = self.rnn.step_forward(output[:,0,:], h[:,0,:])\n\t\t\t\toutput = self.postprocess.forward(h)\n\t\t\t\tx[0,0] = np.argmax(output, axis=2)\n\t\t\t\tw_indices.append(x[0,0])\n\t\tif self.cell_type in \'lstm\':\n\t\t\tc = np.zeros((1,1,self.hidden_dim))\n\t\t\th = np.zeros((1,1,self.hidden_dim))\n\t\t\tfor i in range(0, n_text):\n\t\t\t\toutput = self.preprocess.forward(x)\n\t\t\t\th[:,0,:], c[:,0,:], _ = self.rnn.step_forward(output[:,0,:], h[:,0,:], c[:,0,:])\n\t\t\t\toutput = self.postprocess.forward(h)\n\t\t\t\tx[0,0] = np.argmax(output, axis=2)\n\t\t\t\tw_indices.append(x[0,0])\t\n\t\treturn w_indices\t\t\n\t\t\n\tdef gather_params(self):\n\t\tif self.preprocess is not None:\n\t\t\tfor n, v in self.preprocess.params.items():\n\t\t\t\tself.params[n] = v\n\t\tfor n, v in self.rnn.params.items():\n\t\t\t\tself.params[n] = v\n\t\tif self.postprocess is not None:\n\t\t\tfor n, v in self.postprocess.params.items():\n\t\t\t\tself.params[n] = v\t\n\t\t\n\tdef assign_params(self):\n\t\tv = None\n\t\tif self.preprocess is not None:\n\t\t\tfor n, v in self.preprocess.params.items():\n\t\t\t\tself.preprocess.params[n] = self.params[n]\n\t\tfor n, v in self.rnn.params.items():\n\t\t\tself.rnn.params[n] = self.params[n]\n\t\tif self.postprocess is not None:\n\t\t\tfor n, v in self.postprocess.params.items():\n\t\t\t\tself.postprocess.params[n] = self.params[n]\n\t\t\t\t\t\t\t\t\n\tdef gather_grads(self):\n\t\tif self.preprocess is not None:\n\t\t\tfor n, v in self.preprocess.grads.items():\n\t\t\t\tself.grads[n] = v\n\t\tfor n, v in self.rnn.grads.items():\n\t\t\t\tself.grads[n] = v\n\t\tif self.postprocess is not None:\n\t\t\tfor n, v in self.postprocess.grads.items():\n\t\t\t\tself.grads[n] = v\t\n\n\n'"
assignment2/lib/train.py,16,"b'from lib.layer_utils import *\nfrom lib.grad_check import *\nfrom lib.optim import *\nimport numpy as np\n\nclass DataLoader(object):\n\t""""""\n\tData loader class.\n\n\tArguments:\n\t- data: Array of input data, of shape (batch_size, d_1, ..., d_k)\n\t- labels: Array of labels, of shape (batch_size,)\n\t- batch_size: The size of each returned minibatch\n\t""""""\n\tdef __init__(self, data, labels, batch_size, timesteps):\n\t\tself.data = data\n\t\tself.labels = labels\n\t\tself.batch_size = batch_size\n\t\tself.timesteps = timesteps\n\t\tself.indices = np.asarray(range(data.shape[0]-self.timesteps))\n\n\t# reset the indices to be full length\n\tdef _reset(self):\n\t\tself.indices = np.asarray(range(self.data.shape[0]-self.timesteps))\n\n\t# Call this shuffle function after the last batch for each epoch\n\tdef _shuffle(self):\n\t\tnp.random.shuffle(self.indices)\n\n\t# Get the next batch of data\n\tdef get_batch(self):\n\t\tif len(self.indices) < self.batch_size:\n\t\t\tself._reset()\n\t\t\tself._shuffle()\n\t\t\n\t\tindices_curr = self.indices[0:self.batch_size]\n\t\tdata_batch = []\n\t\tlabels_batch = []\n\t\tfor i in indices_curr:\n\t\t\tdata_batch.append(self.data[i:(i+self.timesteps)])\n\t\t\tlabels_batch.append(self.labels[i:(i+self.timesteps)])\n\t\tdata_batch = np.stack(data_batch, axis=0)\n\t\tlabels_batch = np.stack(labels_batch, axis=0)\n\t\tself.indices = np.delete(self.indices, range(self.batch_size))\n\t\treturn data_batch, labels_batch\n\ndef compute_acc(model, data, labels, num_samples=None, batch_size=100):\n\t""""""\n\tCompute the accuracy of given data and labels\n\n\tArguments:\n\t- data: Array of input data, of shape (batch_size, d_1, ..., d_k)\n\t- labels: Array of labels, of shape (batch_size,)\n\t- num_samples: If not None, subsample the data and only test the model\n\t  on these sampled datapoints.\n\t- batch_size: Split data and labels into batches of this size to avoid using\n\t  too much memory.\n\n\tReturns:\n\t- accuracy: Scalar indicating fraction of inputs that were correctly\n\t  classified by the model.\n\t""""""\n\tN = 1\n\tif num_samples is not None and N > num_samples:\n\t\tindices = np.random.choice(N, num_samples)\n\t\tN = num_samples\n\t\tdata = data[indices]\n\t\tlabels = labels[indices]\n\n\tpreds = []\n\n\toutput = model.forward(data.reshape(1,-1), np.zeros((1, model.hidden_dim)))\n\tT = output.shape[1]\n\tV = output.shape[2]\n\tfeat_flat = output.reshape(N * T, V)\n\tlabel_flat = labels.reshape(N * T)\n\t\n\tscores = np.exp(feat_flat - np.max(feat_flat, axis=1, keepdims=True))\n\tscores /= np.sum(scores, axis=1, keepdims=True)\n\tpred = np.argmax(scores, axis=1)\n\tpreds.append(pred)\n\n\tpreds = np.hstack(preds)\n\taccuracy = np.mean(preds == label_flat)\n\treturn accuracy\n\n"""""" Some comments """"""\ndef train_net(data, model, loss_func, optimizer, timesteps, batch_size, max_epochs,\n\t\t\t  lr_decay=1.0, lr_decay_every=1000, show_every=100, verbose=False):\n\t""""""\n\tTrain a network with this function, parameters of the network are updated\n\tusing stochastic gradient descent methods defined in optim.py. \n\n\tThe parameters which achive the best performance after training for given epochs\n\twill be returned as a param dict. The training history is returned for post analysis. \n\n\tArguments:\n\t- data: Fata instance should look like the followings:\n\t- data_dict = {\n\t\t""data_train"": (# Training data,   # Training GT Labels),\n\t  }\n\n\t- model: An instance defined in the rnn.py\n\n\t- loss_func: An instance defined in the layer_utils.py, we only introduce cross-entropy\n\t  classification loss for this part of assignment\n\n\t- batch_size: Batch size of the input data\n\n\t- max_epochs: The total number of epochs to train the model\n\n\t- lr_decay: The amount to decay the learning rate\n\n\t- lr_decay_every: Decay the learning rate every given epochs\n\n\t- show_every: Show the training information every given iterations\n\n\t- verbose: To show the information or not\n\n\tReturns:\n\t- opt_params: optimal parameters\n\t- loss_hist: Loss recorded during training\n\t- train_acc_hist: Training accuracy recorded during training\n\t""""""\n\n\t# Initialize the variables\n\tdata_train, labels_train = data[""data_train""], data[""labels_train""]\n\tdataloader = DataLoader(data_train, labels_train, batch_size, timesteps)\n\topt_train_acc = 0.0\n\topt_params = None\n\tloss_hist = []\n\ttrain_acc_hist = []\n\t\n\t# Compute the maximum iterations and iterations per epoch\n\titers_per_epoch = max(data_train.shape[0] // batch_size, 1)\n\tmax_iters = iters_per_epoch  * max_epochs\n\n\t# Start the training\n\tfor epoch in xrange(max_epochs):\n\t\t# Compute the starting iteration and ending iteration for current epoch\n\t\titer_start = epoch * iters_per_epoch\n\t\titer_end   = (epoch + 1) * iters_per_epoch\n\n\t\t# Decay the learning rate every specified epochs\n\t\tif epoch % lr_decay_every == 0 and epoch > 0:\n\t\t\toptimizer.lr = optimizer.lr * lr_decay\n\t\t\tprint(""Decaying learning rate of the optimizer to {}"".format(optimizer.lr))\n\n\t\t# Main training loop\n\t\tpred = np.zeros((1,model.hidden_dim))\n\t\tfor iter in xrange(iter_start, iter_end):\n\t\t\tdata_batch, labels_batch = dataloader.get_batch()\n\t\t\t\n\t\t\t# You\'ll need this\n\t\t\tmask = np.ones((data_batch.shape[0], data_batch.shape[1]))\n\t\t\th0 = np.zeros((data_batch.shape[0], model.hidden_dim))\n\t\t\tpred, loss, dLoss, dX, dh0 = None, None, None, None, None\n\t\t\t#############################################################################\n\t\t\t# TODO: Update the parameters by a forward pass for the network, a backward #\n\t\t\t# pass to the network, and make a step for the optimizer\t\t\t\t\t#\n\t\t\t#############################################################################\n\t\t\tpred = model.forward(data_batch,h0)\n\t\t\tloss = loss_func.forward(pred,labels_batch,mask)\n\t\t\tdLoss = loss_func.backward()\n\t\t\tdX, dh0 = model.backward(dLoss)\n\t\t\toptimizer.step()\n\t\t\t#############################################################################\n\t\t\t#\t\t\t\t\t\t\t END OF YOUR CODE\t\t\t\t\t\t\t  #\n\t\t\t#############################################################################\n\t\t\tloss_hist.append(loss)\n\n\t\t\t# Show the training loss\n\t\t\tif verbose and iter % show_every == 0:\n\t\t\t\tprint(""(Iteration {} / {}) loss: {}"".format(iter+1, max_iters, loss_hist[-1]))\n\n\t\t# End of epoch, compute the accuracies\n\t\ttrain_acc = 0\n\t\ttrain_acc = compute_acc(model, data_train, labels_train, num_samples=10000)\n\t\ttrain_acc_hist.append(train_acc)\n\n\t\t# Save the best params for the model\n\t\tif train_acc > opt_train_acc:\n\t\t\tif verbose:\n\t\t\t\tprint(\'bast performance {}%\'.format(train_acc*100))\n\t\t\topt_train_acc = train_acc\n\t\t\topt_params = {}\n\t\t\tmodel.gather_params()\n\t\t\tfor n, v in model.params.items():\n\t\t\t\topt_params[n] = v.copy()\n\n\t\t# Show the training accuracies\n\t\tif verbose:\n\t\t\tprint(""(Epoch {} / {}) Training Accuracy: {}"".format(\n\t\t\tepoch+1, max_epochs, train_acc))\n\n\treturn opt_params, loss_hist, train_acc_hist\n'"
assignment1/lib/tf_models/__init__.py,0,b''
assignment1/lib/tf_models/vgg16.py,3,"b'import os\nimport numpy as np\nimport tensorflow as tf\n\n\nPIXEL_MEANS = np.array([[[103.939, 116.779, 123.68]]])\n\n\nclass Vgg16(object):\n    def __init__(self, batch_size=3, num_classes=1000, model_path=None, trainable=True):\n        # Input place holders\n        self.trainable = trainable\n        self.num_classes = num_classes\n        self.batch_size = batch_size\n        self.inputs = tf.placeholder(""float"", [self.batch_size, 224, 224, 3])\n        self.labels = tf.placeholder(tf.float32, [self.batch_size, num_classes])\n        self.pretrained = None\n\n    def load(self, model_path=None):\n        model_path = None\n        if model_path is None:\n            curr_dir = os.path.dirname(os.path.abspath(__file__))\n            model_path = os.path.join(curr_dir, ""vgg16.npy"")\n            print(""Model from {}"".format(model_path))\n        self.pretrained = np.load(model_path, encoding=\'latin1\').item()\n        print(""Pretrained VGG16 successfully loaded!"")\n\n    def setup(self):\n        """"""\n        VGG16 Implementations\n        input images should be scaled to 0 to 255, RGB reversed to BGR\n        """"""\n        inputs_scaled = self.inputs * 255.0\n        inputs_scaled -= PIXEL_MEANS\n        inputs = tf.reverse(inputs_scaled, axis=[-1])\n\n        # conv1 family\n        self.conv1_1 = self.conv(inputs, name=""conv1_1"")\n        self.conv1_2 = self.conv(self.conv1_1, name=""conv1_2"")\n        self.pool1 = self.max_pool(self.conv1_2, name=""pool1"")\n\n        # conv2 family\n        self.conv2_1 = self.conv(self.pool1, name=""conv2_1"")\n        self.conv2_2 = self.conv(self.conv2_1, name=""conv2_2"")\n        self.pool2 = self.max_pool(self.conv2_2, name=""pool2"")\n\n        # conv3 family\n        self.conv3_1 = self.conv(self.pool2, name=""conv3_1"")\n        self.conv3_2 = self.conv(self.conv3_1, name=""conv3_2"")\n        self.conv3_3 = self.conv(self.conv3_2, name=""conv3_3"")\n        self.pool3 = self.max_pool(self.conv3_3, name=""pool3"")\n\n        # conv4 family\n        self.conv4_1 = self.conv(self.pool3, name=""conv4_1"")\n        self.conv4_2 = self.conv(self.conv4_1, name=""conv4_2"")\n        self.conv4_3 = self.conv(self.conv4_2, name=""conv4_3"")\n        self.pool4 = self.max_pool(self.conv4_3, name=""pool4"")\n\n        # conv5 family\n        self.conv5_1 = self.conv(self.pool4, name=""conv5_1"")\n        self.conv5_2 = self.conv(self.conv5_1, name=""conv5_2"")\n        self.conv5_3 = self.conv(self.conv5_2, name=""conv5_3"")\n        self.pool5 = self.max_pool(self.conv5_3, name=""pool5"")\n\n        # fc layers\n        self.fc6 = self.fc(self.pool5, name=""fc6"")\n        self.fc7 = self.fc(self.fc6, name=""fc7"")\n        self.fc8 = self.fc(self.fc7, activation=None, name=""fc8"")\n\n        # scores\n        self.prob = tf.nn.softmax(self.fc8, name=""prob"")\n\n    def conv(self, input, s=1, activation=tf.nn.relu, name=""conv""):\n        with tf.variable_scope(name):\n            weights = self.get_conv_weight(name)\n            conv = tf.nn.conv2d(input, weights, [1, s, s, 1], padding=\'SAME\')\n            bias = self.get_bias(name)\n            bias = tf.nn.bias_add(conv, bias)\n            if activation is not None:\n                output = activation(bias)\n            return output\n\n    def fc(self, input, activation=tf.nn.relu, name=""fc""):\n        with tf.variable_scope(name):\n            num_feats = np.prod(input.get_shape().as_list()[1:])\n            x = tf.reshape(input, [-1, num_feats])\n            weights = self.get_fc_weight(name)\n            bias = self.get_bias(name)\n            output = tf.nn.bias_add(tf.matmul(x, weights), bias)\n            if activation is not None:\n                output = activation(output)\n            return output\n\n    def max_pool(self, input, k=2, s=2, name=None):\n        return tf.nn.max_pool(input, ksize=[1, k, k, 1], strides=[1, s, s, 1], padding=\'SAME\', name=name)\n\n    def get_conv_weight(self, name):\n        return tf.Variable(self.pretrained[name][0], name=""filter"")\n\n    def get_fc_weight(self, name):\n        return tf.Variable(self.pretrained[name][0], name=""weights"")\n\n    def get_bias(self, name):\n        return tf.Variable(self.pretrained[name][1], name=""biases"")'"
