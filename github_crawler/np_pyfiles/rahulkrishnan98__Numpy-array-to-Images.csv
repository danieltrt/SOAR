file_path,api_count,code
checker.py,13,"b""\nimport numpy as np\nimport cv2\nfrom PIL import Image\nimport os\n\nnp.set_printoptions(threshold=np.inf)\n\n\ndef generate_movies(n_samples=1200, n_frames=15):\n    row = 80\n    col = 80\n    noisy_movies = np.zeros((n_samples, n_frames, row, col, 1), dtype=np.float)\n    shifted_movies = np.zeros((n_samples, n_frames, row, col, 1),\n                              dtype=np.float)\n\n    for i in range(n_samples):\n        # Add 3 to 7 moving squares\n        n = np.random.randint(3, 8)\n\n        for j in range(n):\n            # Initial position\n            xstart = np.random.randint(20, 60)\n            ystart = np.random.randint(20, 60)\n            # Direction of motion\n            directionx = np.random.randint(0, 3) - 1\n            directiony = np.random.randint(0, 3) - 1\n\n            # Size of the square\n            w = np.random.randint(2, 4)\n\n            for t in range(n_frames):\n                x_shift = xstart + directionx * t\n                y_shift = ystart + directiony * t\n                noisy_movies[i, t, x_shift - w: x_shift + w,\n                             y_shift - w: y_shift + w, 0] += 1\n\n                # Make it more robust by adding noise.\n                # The idea is that if during inference,\n                # the value of the pixel is not exactly one,\n                # we need to train the network to be robust and still\n                # consider it as a pixel belonging to a square.\n                if np.random.randint(0, 2):\n                    noise_f = (-1)**np.random.randint(0, 2)\n                    noisy_movies[i, t,\n                                 x_shift - w - 1: x_shift + w + 1,\n                                 y_shift - w - 1: y_shift + w + 1,\n                                 0] += noise_f * 0.1\n\n                # Shift the ground truth by 1\n                x_shift = xstart + directionx * (t + 1)\n                y_shift = ystart + directiony * (t + 1)\n                shifted_movies[i, t, x_shift - w: x_shift + w,\n                               y_shift - w: y_shift + w, 0] += 1\n\n    # Cut to a 40x40 window\n    noisy_movies = noisy_movies[::, ::, 20:60, 20:60, ::]\n    shifted_movies = shifted_movies[::, ::, 20:60, 20:60, ::]\n    noisy_movies[noisy_movies >= 1] = 1\n    shifted_movies[shifted_movies >= 1] = 1\n    return noisy_movies, shifted_movies\n\ndef save_samples(sampleno,movies,dirname,frame_size):\n    k = sampleno\n    for g in range(frame_size):\n        another=np.empty([40,40],dtype=np.float)\n        new_ar=movies[k][g][:][:]\n        for i in range(len(new_ar)):\n            for j in range(len(new_ar)):\n                another[i][j] = new_ar[i][j][0]\n\n        img = Image.fromarray(another, 'L')\n        img.save(dirname + 'Frames/' + str(g)+'.png')\n\n        # Create video\n        img_array = []\n        for i in range(frame_size):\n            img_array.append(cv2.imread(dirname + 'Frames/' + str(i)+'.png'))\n\n        height,width,layers = img_array[0].shape\n        size = (width,height)\n        fps = 1\n\n        fourcc = cv2.VideoWriter_fourcc(*'XVID')\n        video = cv2.VideoWriter(dirname + 'video.avi',fourcc,fps,size)\n\n        for j in range(len(img_array)):\n            video.write(img_array[j])\n\n        cv2.destroyAllWindows()\n        video.release()\n\n\n\n\n# Main Code\n\nsample_size = 10\nframe_size = 15\nnoisy_movies, shifted_movies = generate_movies(n_samples=sample_size)\n\nfor sample_no in range(sample_size):\n    rootdir = 'Samples/'\n    sampledir = rootdir + 'Sample'+str(sample_no+1)+'/'\n    noisy_dirname = sampledir + 'Noisy/'\n    shifted_dirname = sampledir +'Shifted/'\n    \n    if not os.path.exists(sampledir):\n        os.makedirs(noisy_dirname+'Frames/')\n        os.makedirs(shifted_dirname+'Frames/')\n    \n    save_samples(sample_no,noisy_movies,noisy_dirname,frame_size)\n    save_samples(sample_no,shifted_movies,shifted_dirname,frame_size)\n    \n    \n\n\n   \n"""
