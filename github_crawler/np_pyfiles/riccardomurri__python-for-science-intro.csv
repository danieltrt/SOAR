file_path,api_count,code
download/ex10a.py,0,"b'from gc3libs.cmdline \\\n  import SessionBasedScript\n\nif __name__ == \'__main__\':\n  import ex10a\n  ex10a.AScript().run()\n\nclass AScript(SessionBasedScript):\n  """"""\n  Minimal workflow scaffolding.\n  """"""\n  def __init__(self):\n    super(AScript, self).__init__(\n        version=\'1.0\')\n  def new_tasks(self, extra):\n    apps_to_run = [ ]\n    return apps_to_run\n'"
download/plot_sim_asset.py,0,"b'#! /usr/bin/env python\n""""""\nMake a line plot all price paths produced by `sim_asset.py`,\ntogether with their average value at any given time.\n""""""\nimport csv\n\nimport matplotlib.pyplot as plt\nimport seaborn as sea\n\n\ndata = open(\'results.csv\')\nrows = csv.reader(data)\nys = []\nmax_y = 0\nfor row in rows:\n    y = list(float(item) for item in row)\n    max_y = max(max_y, max(y))\n    ys.append(y)\n\nfig = plt.figure()\n\n# plot ""hairy""\nfor y in ys:\n    x = range(len(y))\n    plt.plot(x, y, linestyle=\'solid\', color=\'blue\', alpha=(1.0/8))\n\navgs = []\nts = zip(*ys)\nN = len(ys)\nfor t in ts:\n    avg = sum(t) / N\n    avgs.append(avg)\nplt.plot(x, avgs,  linestyle=\'solid\', linewidth=2, color=\'darkred\', alpha=1.0)\n\nplt.ylim(0, max_y)\n#plt.show()\n\nfig.savefig(""saplot.pdf"")\n'"
download/pricingapp1.py,0,"b'import os\nfrom os.path import basename\n\nfrom gc3libs import Application\n\n\nclass PricingApp1(Application):\n  """"""Simulate asset pricing.""""""\n  def __init__(self, infile):\n    inp = basename(infile)\n    Application.__init__(\n      self,\n      arguments=[\n        \'Rscript\', \'simAsset.R\', inp],\n      inputs=[\'simAsset.R\', infile],\n      outputs=[\'result1.csv\', \'result1.pdf\'],\n      output_dir=\'pricing1.d\',\n      stdout=\'stdout.txt\')\n'"
download/sim_asset.py,5,"b'#! /usr/bin/env python\n\n## -----------------------------------------------------------------------------\n# Generate sample paths for assets assuming geometric Brownian motion.\n#\n# Inputs: S0 - stock price today (e.g., 50)\n#       : mu - expected return (e.g., 0.04)\n#       : sig - volatility (e.g., 0.1)\n#       : dt - size of time steps (e.g., 0.273)\n#       : etime - days to expiry (e.g., 1000)\n#       : nsims - number of simulation paths to generate\n#\n# Output:\n#   - ""results.csv"" dump of a matrix where each column\n#     represents a simulated asset price path.\n#   - ""results.pdf"" line plot of all simulated price path\n#\n# Notes: This code focuses on details of the implementation of the\n#        Monte-Carlo algorithm.\n#        It does not contain any programatic essentials such as error\n#        checking.\n#        It does not allow for optional/default input arguments.\n#        It is not optimized for memory efficiency nor speed.\n#\n# Original MATLAB code by Phil Goddard (phil@goddardconsulting.ca), Date: Q2, 2006\n# Adapted to NumPy by Riccardo Murri <riccardo.murri@gmail.com>, 2017-06-08\n#\n## -----------------------------------------------------------------------------\n\nimport numpy as np\n\n\ndef asset_paths(S0, mu, sigma, dt, steps, nsims):\n    # calculate the drift\n    nu = mu - sigma*sigma/2\n\n    ## Generate potential paths:\n\n\n    # generate random matrix with `steps` rows and `nsims` columns\n    rnd = np.random.randn(steps, nsims)\n\n    # compute paths\n    X = np.exp(nu*dt + sigma*np.sqrt(dt)*rnd)\n    Y = np.cumprod(X, axis=0)\n\n    # all paths start at (relative) price 1\n    top = np.ones([1, nsims]) # 1 x nsims matrix of 1\'s\n    relpaths = np.concatenate((top, Y), axis=0)\n\n    # multiply by initial price S0 to get the final result\n    return (S0 * relpaths)\n\n\n## -----------------------------------------------------------------------------\n## Commands to run simulation\n## -----------------------------------------------------------------------------\n\nif __name__ == \'__main__\':\n    import sys\n\n    ## get arguments from command line\n    S0 = int(sys.argv[1])       # Price of underlying today\n    mu = float(sys.argv[2])     # expected return\n    sig = float(sys.argv[3])    # expected volatility\n    dt  = float(sys.argv[4])    # time steps\n    etime = int(sys.argv[5])  # days to expiry\n    nsims = int(sys.argv[6])  # Number of simulated paths\n\n    ## Generate potential future asset paths\n    S = asset_paths(S0, mu, sig, dt, etime, nsims)\n\n    ## write out results\n    from csv import writer\n    with open(""results.csv"", \'w\') as stream:\n        output = writer(stream)\n        n_rows, n_cols = S.shape\n        for j in range(n_cols):\n            col = S[:, j]\n            output.writerow(col)\n'"
download/vector.py,0,"b'class Vector(object):\n  """"""A 2D Vector.""""""\n  def __init__(self, x, y):\n    self.x = x\n    self.y = y\n  def add(self, other):\n    return Vector(self.x+other.x,\n                  self.y+other.y)\n  def mul(self, scalar):\n    return Vector(scalar*self.x, scalar*self.y)\n  def show(self):\n    return (""<%g,%g>"" % (self.x, self.y))\n'"
exercises/hello.py,0,"b'#\n# Sample Python module\n#\n\n# A Python module is just a file containing Python commands.\n# Although *any* Python statement is permitted in a module file,\n# only constants, functions, and class definitions should\n# normally appear in a Python module file.\n\ndef greet(name):\n  """"""A friendly function.""""""\n  print(""Hello, "" + name + ""!"")\n  \n# the following is just for demo purposes during the course,\n# it should not appear in a real module (see above).\nimport sys\nprint(""Greetings from `hello.py`"", file=sys.stderr)\n'"
solutions/ex10b.py,0,"b'#! /usr/bin/python\n#\n""""""\nExercise 10.B:\n\nEdit the ``ex10a.py`` file: insert the code to define the\n``PricingApp1`` application, and modify the ``new_tasks()``\nmethod to return one instance of it (as in the previous\nslide).\n\nCan you process the ``simAsset1.dat`` file using this GC3Pie\nscript?\n""""""\n\nfrom gc3libs.cmdline \\\n  import SessionBasedScript\n\n\nif __name__ == \'__main__\':\n  # whenever the file is renamed, also\n  # the two lines below MIST change accordingly\n  import ex10b\n  ex10b.AScript().run()\n\n\n# no need to copy+paste code here! just download `pricingapp1.py` from the\n# `download/` directory of the course and use it as a module\nfrom pricingapp1 import PricingApp1\n\n\nclass AScript(SessionBasedScript):\n  """"""\n  Run `simAsset.R` on each given input file.\n  """"""\n  def __init__(self):\n    super(AScript, self).__init__(\n        version=\'1.0\')\n  def new_tasks(self, extra):\n    try:\n      # allow name of input file to be given on the command-line\n      input_file = self.params.args[0]\n      # run one application per input file\n      apps_to_run = [\n          PricingApp1(input_file)\n      ]\n    except IndexError:  # no input file on cmd line\n      apps_to_run = [ ]\n    return apps_to_run\n'"
solutions/ex10e.py,0,"b'#! /usr/bin/python\n#\n""""""\nExercise 10.E:\n\nEdit the script from Exercise 10.B and add the ability to process multiple\ninput files: for each file name given on the command line, an instance of\n``ProcessingApp1`` should be run.\n""""""\n\nfrom gc3libs.cmdline \\\n  import SessionBasedScript\n\n\nif __name__ == \'__main__\':\n  # whenever the file is renamed, also\n  # the two lines below MIST change accordingly\n  import ex10e\n  ex10e.AScript().run()\n\n\n# no need to copy+paste code here! just download `pricingapp1.py` from the\n# `download/` directory of the course and use it as a module\nfrom pricingapp1 import PricingApp1\n\n\nclass AScript(SessionBasedScript):\n  """"""\n  Run `simAsset.R` on each given input file.\n  """"""\n  def __init__(self):\n    super(AScript, self).__init__(\n        version=\'1.0\')\n  def new_tasks(self, extra):\n    apps_to_run = [ ]\n    for input_file in self.params.args:\n      # run one application per input file\n      apps_to_run.append(PricingApp1(input_file))\n    return apps_to_run\n'"
solutions/hello.py,0,"b'#\n# Sample Python module\n#\n\n# A Python module is just a file containing Python commands.\n# Although *any* Python statement is permitted in a module file,\n# only constants, functions, and class definitions should\n# normally appear in a Python module file.\n\ndef greet(name):\n  """"""A friendly function.""""""\n  print(""Hello, "" + name + ""!"")\n'"
