file_path,api_count,code
main.py,7,"b""#!/usr/bin/env python\n\nimport numpy as np\nfrom PyQt5 import QtGui\n\nimport shgyield.gui as gui\nimport shgyield.shg as shg\n\n\n################################################################################\n## Functions to help ingest and pre-process your data\n################################################################################\n\ndef loadeps(infile, scale):\n    ''' loads chi1 from file, converts to epsilon '''\n    energy, real, imag = np.loadtxt(infile, unpack=True)\n    return {'energy': energy, 'data': 1 + (4 * np.pi * ((real + 1j*imag) * scale))}\n\ndef loadshg(infile, scale):\n    ''' loads chi2 from file, scales and converts to appropriate units '''\n    energy, re1w, im1w, re2w, im2w = np.loadtxt(infile, unpack=True)\n    return {'energy': energy, 'data': scale * ((re1w + re2w) + 1j*(im1w + im2w))}\n\n\n################################################################################\n## your material!\n################################################################################\n\nMATERIAL = {\n    'Si(111)': {\n        'prefix': 'silicon',\n        'lsuper': 180,\n        'lslab': 142.1885172213904,\n        'medium 1': {},\n        'medium 2': {},\n        'medium 3': {}\n    }\n}\n\nMATERIAL['Si(111)']['medium 1'] = {'eps': {'xx': 1.0, 'yy': 1.0, 'zz': 1.0}}\nMATERIAL['Si(111)']['medium 2'] = {\n    'eps': {\n        'xx' : loadeps('example/chi1-linear/SiH1x1-chi1-xx', MATERIAL['Si(111)']['lsuper']/MATERIAL['Si(111)']['lslab']),\n        'yy' : loadeps('example/chi1-linear/SiH1x1-chi1-yy', MATERIAL['Si(111)']['lsuper']/MATERIAL['Si(111)']['lslab']),\n        'zz' : loadeps('example/chi1-linear/SiH1x1-chi1-zz', MATERIAL['Si(111)']['lsuper']/MATERIAL['Si(111)']['lslab'])\n    },\n    'chi2': {\n        'xxx': loadshg('example/chi2-nonlinear/SiH1x1-chi2-xxx', 1e6 * 1e-24),\n        'xxz': loadshg('example/chi2-nonlinear/SiH1x1-chi2-xxz', 1e6 * 1e-24),\n        'zxx': loadshg('example/chi2-nonlinear/SiH1x1-chi2-zxx', 1e6 * 1e-24),\n        'zzz': loadshg('example/chi2-nonlinear/SiH1x1-chi2-zzz', 1e6 * 1e-24)\n    }\n}\nMATERIAL['Si(111)']['medium 3'] = {\n    'eps': {\n        'xx' : loadeps('example/chi1-linear/SiBulk-chi1-xx', 1),\n        'yy' : loadeps('example/chi1-linear/SiBulk-chi1-yy', 1),\n        'zz' : loadeps('example/chi1-linear/SiBulk-chi1-zz', 1)\n    }\n}\n\nMATERIAL['Si(111)']['medium 2']['chi2']['xyy'] = {'energy': MATERIAL['Si(111)']['medium 2']['chi2']['xxx']['energy'], 'data': -1*MATERIAL['Si(111)']['medium 2']['chi2']['xxx']['data']}\nMATERIAL['Si(111)']['medium 2']['chi2']['yxy'] = {'energy': MATERIAL['Si(111)']['medium 2']['chi2']['xxx']['energy'], 'data': -1*MATERIAL['Si(111)']['medium 2']['chi2']['xxx']['data']}\nMATERIAL['Si(111)']['medium 2']['chi2']['yyz'] = MATERIAL['Si(111)']['medium 2']['chi2']['xxz']\nMATERIAL['Si(111)']['medium 2']['chi2']['zyy'] = MATERIAL['Si(111)']['medium 2']['chi2']['zxx']\nMATERIAL['Si(111)']['medium 2']['chi2']['xzz'] = 0\nMATERIAL['Si(111)']['medium 2']['chi2']['xyz'] = 0\nMATERIAL['Si(111)']['medium 2']['chi2']['xxy'] = 0\nMATERIAL['Si(111)']['medium 2']['chi2']['yxx'] = 0\nMATERIAL['Si(111)']['medium 2']['chi2']['yyy'] = 0\nMATERIAL['Si(111)']['medium 2']['chi2']['yzz'] = 0\nMATERIAL['Si(111)']['medium 2']['chi2']['yxz'] = 0\nMATERIAL['Si(111)']['medium 2']['chi2']['zyz'] = 0\nMATERIAL['Si(111)']['medium 2']['chi2']['zxz'] = 0\nMATERIAL['Si(111)']['medium 2']['chi2']['zxy'] = 0\n\n################################################################################\n## Data: Experiment\n################################################################################\n\nexp_e, exp_rpp, exp_rsp, exp_rps = np.loadtxt('example/reference/experiment.dat', unpack=True)\n\nEXP = {\n    'Si(111)': {\n        'spect': {\n            'pp': {\n                'energy': exp_e,\n                'phi': 30,\n                'data': exp_rpp\n            },\n            'sp': {\n                'energy': exp_e,\n                'phi': 30,\n                'data': exp_rsp\n            },\n            'ps': {\n                'energy': exp_e,\n                'phi': 30,\n                'data': exp_rps\n            }\n        }\n    }\n}\n\nINIT = {\n    'energy': {\n        'spect': np.linspace(1.25, 2.50, 126),\n        'polar': 1.7\n    },\n    'theta': 65,\n    'phi': 30,\n    'gamma': 0,\n    'broad': {\n        'eps': 0,\n        'chi': 0,\n        'out': 5\n    }\n}\n\nif __name__ == '__main__':\n    app = QtGui.QApplication([])\n    widget = gui.CustomWidget(INIT, MATERIAL, EXP, 1)\n    widget.show()\n    app.exec_()\n\n# SPECT = shg.shgyield(energy =    INIT['energy']['spect'],\n#                      eps_m1 =    MATERIAL['Si(111)']['medium 1']['eps'],\n#                      eps_m2 =    MATERIAL['Si(111)']['medium 2']['eps'],\n#                      eps_m3 =    MATERIAL['Si(111)']['medium 3']['eps'],\n#                      chi2 =      MATERIAL['Si(111)']['medium 2']['chi2'],\n#                      theta =     INIT['theta'],\n#                      phi =       INIT['phi'],\n#                      gamma =     INIT['gamma'],\n#                      thick =     MATERIAL['Si(111)']['lslab']*5.2918E-2,\n#                      sigma_eps = INIT['broad']['eps'],\n#                      sigma_chi = INIT['broad']['chi'],\n#                      sigma_out = INIT['broad']['out'])\n\n# np.savetxt('spect.dat',\n#            np.column_stack((SPECT['energy'], SPECT['pp'], SPECT['sp'], SPECT['ps'], SPECT['ss'])),\n#            fmt = '%07.4f  %.8e  %.8e  %.8e  %.8e',\n#            header = 'w(eV)  RpP             RsP             RpS             RsS')\n"""
shgyield/QtLayout.py,0,"b'# -*- coding: utf-8 -*-\n\n# Form implementation generated from reading ui file \'QtLayout.ui\'\n#\n# Created by: PyQt5 UI code generator 5.9.2\n#\n# WARNING! All changes made in this file will be lost!\n\nfrom PyQt5 import QtCore, QtGui, QtWidgets\n\nclass Ui_CustomWidget(object):\n    def setupUi(self, CustomWidget):\n        CustomWidget.setObjectName(""CustomWidget"")\n        CustomWidget.resize(1400, 700)\n        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(CustomWidget)\n        self.horizontalLayout_9.setObjectName(""horizontalLayout_9"")\n        self.tabWidget = QtWidgets.QTabWidget(CustomWidget)\n        self.tabWidget.setObjectName(""tabWidget"")\n        self.tab_rashg = QtWidgets.QWidget()\n        self.tab_rashg.setObjectName(""tab_rashg"")\n        self.gridLayout_6 = QtWidgets.QGridLayout(self.tab_rashg)\n        self.gridLayout_6.setObjectName(""gridLayout_6"")\n        self.plot_all_polar_rpp = PlotWidget(self.tab_rashg)\n        self.plot_all_polar_rpp.setEnabled(True)\n        self.plot_all_polar_rpp.setMouseTracking(True)\n        self.plot_all_polar_rpp.setObjectName(""plot_all_polar_rpp"")\n        self.gridLayout_6.addWidget(self.plot_all_polar_rpp, 0, 0, 1, 1)\n        self.plot_all_polar_rsp = PlotWidget(self.tab_rashg)\n        self.plot_all_polar_rsp.setMouseTracking(True)\n        self.plot_all_polar_rsp.setObjectName(""plot_all_polar_rsp"")\n        self.gridLayout_6.addWidget(self.plot_all_polar_rsp, 0, 1, 1, 1)\n        self.plot_all_polar_rps = PlotWidget(self.tab_rashg)\n        self.plot_all_polar_rps.setMouseTracking(True)\n        self.plot_all_polar_rps.setObjectName(""plot_all_polar_rps"")\n        self.gridLayout_6.addWidget(self.plot_all_polar_rps, 1, 0, 1, 1)\n        self.plot_all_polar_rss = PlotWidget(self.tab_rashg)\n        self.plot_all_polar_rss.setMouseTracking(True)\n        self.plot_all_polar_rss.setObjectName(""plot_all_polar_rss"")\n        self.gridLayout_6.addWidget(self.plot_all_polar_rss, 1, 1, 1, 1)\n        self.tabWidget.addTab(self.tab_rashg, """")\n        self.tab_spect = QtWidgets.QWidget()\n        self.tab_spect.setObjectName(""tab_spect"")\n        self.gridLayout_5 = QtWidgets.QGridLayout(self.tab_spect)\n        self.gridLayout_5.setObjectName(""gridLayout_5"")\n        self.plot_all_spect_rpp = PlotWidget(self.tab_spect)\n        self.plot_all_spect_rpp.setEnabled(True)\n        self.plot_all_spect_rpp.setMouseTracking(True)\n        self.plot_all_spect_rpp.setObjectName(""plot_all_spect_rpp"")\n        self.gridLayout_5.addWidget(self.plot_all_spect_rpp, 0, 0, 1, 1)\n        self.plot_all_spect_rsp = PlotWidget(self.tab_spect)\n        self.plot_all_spect_rsp.setMouseTracking(True)\n        self.plot_all_spect_rsp.setObjectName(""plot_all_spect_rsp"")\n        self.gridLayout_5.addWidget(self.plot_all_spect_rsp, 0, 1, 1, 1)\n        self.plot_all_spect_rps = PlotWidget(self.tab_spect)\n        self.plot_all_spect_rps.setMouseTracking(True)\n        self.plot_all_spect_rps.setObjectName(""plot_all_spect_rps"")\n        self.gridLayout_5.addWidget(self.plot_all_spect_rps, 1, 0, 1, 1)\n        self.plot_all_spect_rss = PlotWidget(self.tab_spect)\n        self.plot_all_spect_rss.setMouseTracking(True)\n        self.plot_all_spect_rss.setObjectName(""plot_all_spect_rss"")\n        self.gridLayout_5.addWidget(self.plot_all_spect_rss, 1, 1, 1, 1)\n        self.tabWidget.addTab(self.tab_spect, """")\n        self.tab_rpp = QtWidgets.QWidget()\n        self.tab_rpp.setObjectName(""tab_rpp"")\n        self.gridLayout = QtWidgets.QGridLayout(self.tab_rpp)\n        self.gridLayout.setObjectName(""gridLayout"")\n        self.plot_rpp_polar = PlotWidget(self.tab_rpp)\n        self.plot_rpp_polar.setMouseTracking(True)\n        self.plot_rpp_polar.setObjectName(""plot_rpp_polar"")\n        self.gridLayout.addWidget(self.plot_rpp_polar, 1, 0, 1, 1)\n        self.plot_rpp_spect = PlotWidget(self.tab_rpp)\n        self.plot_rpp_spect.setMouseTracking(True)\n        self.plot_rpp_spect.setObjectName(""plot_rpp_spect"")\n        self.gridLayout.addWidget(self.plot_rpp_spect, 1, 1, 1, 1)\n        self.plot_rpp_polar_exp = PlotWidget(self.tab_rpp)\n        self.plot_rpp_polar_exp.setMouseTracking(True)\n        self.plot_rpp_polar_exp.setObjectName(""plot_rpp_polar_exp"")\n        self.gridLayout.addWidget(self.plot_rpp_polar_exp, 0, 0, 1, 1)\n        self.plot_rpp_spect_exp = PlotWidget(self.tab_rpp)\n        self.plot_rpp_spect_exp.setMouseTracking(True)\n        self.plot_rpp_spect_exp.setObjectName(""plot_rpp_spect_exp"")\n        self.gridLayout.addWidget(self.plot_rpp_spect_exp, 0, 1, 1, 1)\n        self.tabWidget.addTab(self.tab_rpp, """")\n        self.tab_rsp = QtWidgets.QWidget()\n        self.tab_rsp.setObjectName(""tab_rsp"")\n        self.gridLayout_2 = QtWidgets.QGridLayout(self.tab_rsp)\n        self.gridLayout_2.setObjectName(""gridLayout_2"")\n        self.plot_rsp_polar_exp = PlotWidget(self.tab_rsp)\n        self.plot_rsp_polar_exp.setMouseTracking(True)\n        self.plot_rsp_polar_exp.setObjectName(""plot_rsp_polar_exp"")\n        self.gridLayout_2.addWidget(self.plot_rsp_polar_exp, 0, 0, 1, 1)\n        self.plot_rsp_spect_exp = PlotWidget(self.tab_rsp)\n        self.plot_rsp_spect_exp.setMouseTracking(True)\n        self.plot_rsp_spect_exp.setObjectName(""plot_rsp_spect_exp"")\n        self.gridLayout_2.addWidget(self.plot_rsp_spect_exp, 0, 1, 1, 1)\n        self.plot_rsp_polar = PlotWidget(self.tab_rsp)\n        self.plot_rsp_polar.setMouseTracking(True)\n        self.plot_rsp_polar.setObjectName(""plot_rsp_polar"")\n        self.gridLayout_2.addWidget(self.plot_rsp_polar, 1, 0, 1, 1)\n        self.plot_rsp_spect = PlotWidget(self.tab_rsp)\n        self.plot_rsp_spect.setMouseTracking(True)\n        self.plot_rsp_spect.setObjectName(""plot_rsp_spect"")\n        self.gridLayout_2.addWidget(self.plot_rsp_spect, 1, 1, 1, 1)\n        self.tabWidget.addTab(self.tab_rsp, """")\n        self.tab_rps = QtWidgets.QWidget()\n        self.tab_rps.setObjectName(""tab_rps"")\n        self.gridLayout_3 = QtWidgets.QGridLayout(self.tab_rps)\n        self.gridLayout_3.setObjectName(""gridLayout_3"")\n        self.plot_rps_polar_exp = PlotWidget(self.tab_rps)\n        self.plot_rps_polar_exp.setMouseTracking(True)\n        self.plot_rps_polar_exp.setObjectName(""plot_rps_polar_exp"")\n        self.gridLayout_3.addWidget(self.plot_rps_polar_exp, 0, 0, 1, 1)\n        self.plot_rps_spect_exp = PlotWidget(self.tab_rps)\n        self.plot_rps_spect_exp.setMouseTracking(True)\n        self.plot_rps_spect_exp.setObjectName(""plot_rps_spect_exp"")\n        self.gridLayout_3.addWidget(self.plot_rps_spect_exp, 0, 1, 1, 1)\n        self.plot_rps_polar = PlotWidget(self.tab_rps)\n        self.plot_rps_polar.setMouseTracking(True)\n        self.plot_rps_polar.setObjectName(""plot_rps_polar"")\n        self.gridLayout_3.addWidget(self.plot_rps_polar, 1, 0, 1, 1)\n        self.plot_rps_spect = PlotWidget(self.tab_rps)\n        self.plot_rps_spect.setMouseTracking(True)\n        self.plot_rps_spect.setObjectName(""plot_rps_spect"")\n        self.gridLayout_3.addWidget(self.plot_rps_spect, 1, 1, 1, 1)\n        self.tabWidget.addTab(self.tab_rps, """")\n        self.tab_rss = QtWidgets.QWidget()\n        self.tab_rss.setObjectName(""tab_rss"")\n        self.gridLayout_4 = QtWidgets.QGridLayout(self.tab_rss)\n        self.gridLayout_4.setObjectName(""gridLayout_4"")\n        self.plot_rss_polar_exp = PlotWidget(self.tab_rss)\n        self.plot_rss_polar_exp.setMouseTracking(True)\n        self.plot_rss_polar_exp.setObjectName(""plot_rss_polar_exp"")\n        self.gridLayout_4.addWidget(self.plot_rss_polar_exp, 0, 0, 1, 1)\n        self.plot_rss_spect_exp = PlotWidget(self.tab_rss)\n        self.plot_rss_spect_exp.setMouseTracking(True)\n        self.plot_rss_spect_exp.setObjectName(""plot_rss_spect_exp"")\n        self.gridLayout_4.addWidget(self.plot_rss_spect_exp, 0, 1, 1, 1)\n        self.plot_rss_polar = PlotWidget(self.tab_rss)\n        self.plot_rss_polar.setMouseTracking(True)\n        self.plot_rss_polar.setObjectName(""plot_rss_polar"")\n        self.gridLayout_4.addWidget(self.plot_rss_polar, 1, 0, 1, 1)\n        self.plot_rss_spect = PlotWidget(self.tab_rss)\n        self.plot_rss_spect.setMouseTracking(True)\n        self.plot_rss_spect.setObjectName(""plot_rss_spect"")\n        self.gridLayout_4.addWidget(self.plot_rss_spect, 1, 1, 1, 1)\n        self.tabWidget.addTab(self.tab_rss, """")\n        self.horizontalLayout_9.addWidget(self.tabWidget)\n        self.widget = QtWidgets.QWidget(CustomWidget)\n        self.widget.setObjectName(""widget"")\n        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)\n        self.verticalLayout.setObjectName(""verticalLayout"")\n        self.group_material = QtWidgets.QGroupBox(self.widget)\n        self.group_material.setEnabled(False)\n        self.group_material.setObjectName(""group_material"")\n        self.formLayout_4 = QtWidgets.QFormLayout(self.group_material)\n        self.formLayout_4.setObjectName(""formLayout_4"")\n        self.label_8 = QtWidgets.QLabel(self.group_material)\n        self.label_8.setEnabled(False)\n        self.label_8.setObjectName(""label_8"")\n        self.formLayout_4.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.label_8)\n        self.multiple_reflections = QtWidgets.QCheckBox(self.group_material)\n        self.multiple_reflections.setEnabled(False)\n        self.multiple_reflections.setText("""")\n        self.multiple_reflections.setChecked(True)\n        self.multiple_reflections.setObjectName(""multiple_reflections"")\n        self.formLayout_4.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.multiple_reflections)\n        self.label_9 = QtWidgets.QLabel(self.group_material)\n        self.label_9.setEnabled(False)\n        self.label_9.setObjectName(""label_9"")\n        self.formLayout_4.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_9)\n        self.layers = QtWidgets.QComboBox(self.group_material)\n        self.layers.setEnabled(False)\n        self.layers.setObjectName(""layers"")\n        self.layers.addItem("""")\n        self.layers.addItem("""")\n        self.formLayout_4.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.layers)\n        self.label_12 = QtWidgets.QLabel(self.group_material)\n        self.label_12.setEnabled(False)\n        self.label_12.setObjectName(""label_12"")\n        self.formLayout_4.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.label_12)\n        self.box_thickness = QtWidgets.QDoubleSpinBox(self.group_material)\n        self.box_thickness.setEnabled(False)\n        self.box_thickness.setMaximum(1000.0)\n        self.box_thickness.setSingleStep(0.01)\n        self.box_thickness.setProperty(""value"", 10.0)\n        self.box_thickness.setObjectName(""box_thickness"")\n        self.formLayout_4.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.box_thickness)\n        self.verticalLayout.addWidget(self.group_material)\n        self.group_energy = QtWidgets.QGroupBox(self.widget)\n        self.group_energy.setObjectName(""group_energy"")\n        self.formLayout = QtWidgets.QFormLayout(self.group_energy)\n        self.formLayout.setObjectName(""formLayout"")\n        self.label = QtWidgets.QLabel(self.group_energy)\n        self.label.setObjectName(""label"")\n        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label)\n        self.box_energy_polar = QtWidgets.QDoubleSpinBox(self.group_energy)\n        self.box_energy_polar.setMinimum(0.0)\n        self.box_energy_polar.setMaximum(99.0)\n        self.box_energy_polar.setSingleStep(1.0)\n        self.box_energy_polar.setProperty(""value"", 1.7)\n        self.box_energy_polar.setObjectName(""box_energy_polar"")\n        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.box_energy_polar)\n        self.label_10 = QtWidgets.QLabel(self.group_energy)\n        self.label_10.setEnabled(False)\n        self.label_10.setObjectName(""label_10"")\n        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label_10)\n        self.box_energy_spect_min = QtWidgets.QDoubleSpinBox(self.group_energy)\n        self.box_energy_spect_min.setEnabled(False)\n        self.box_energy_spect_min.setMinimum(0.0)\n        self.box_energy_spect_min.setMaximum(20.0)\n        self.box_energy_spect_min.setSingleStep(0.01)\n        self.box_energy_spect_min.setObjectName(""box_energy_spect_min"")\n        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.box_energy_spect_min)\n        self.label_11 = QtWidgets.QLabel(self.group_energy)\n        self.label_11.setEnabled(False)\n        self.label_11.setObjectName(""label_11"")\n        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.label_11)\n        self.box_energy_spect_max = QtWidgets.QDoubleSpinBox(self.group_energy)\n        self.box_energy_spect_max.setEnabled(False)\n        self.box_energy_spect_max.setMaximum(10.0)\n        self.box_energy_spect_max.setSingleStep(0.01)\n        self.box_energy_spect_max.setProperty(""value"", 5.0)\n        self.box_energy_spect_max.setObjectName(""box_energy_spect_max"")\n        self.formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.box_energy_spect_max)\n        self.verticalLayout.addWidget(self.group_energy)\n        self.group_angles = QtWidgets.QGroupBox(self.widget)\n        self.group_angles.setObjectName(""group_angles"")\n        self.formLayout_2 = QtWidgets.QFormLayout(self.group_angles)\n        self.formLayout_2.setObjectName(""formLayout_2"")\n        self.label_2 = QtWidgets.QLabel(self.group_angles)\n        self.label_2.setObjectName(""label_2"")\n        self.formLayout_2.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_2)\n        self.horizontalLayout = QtWidgets.QHBoxLayout()\n        self.horizontalLayout.setObjectName(""horizontalLayout"")\n        self.sld_angle_theta = QtWidgets.QSlider(self.group_angles)\n        self.sld_angle_theta.setMinimum(0)\n        self.sld_angle_theta.setMaximum(90)\n        self.sld_angle_theta.setProperty(""value"", 0)\n        self.sld_angle_theta.setOrientation(QtCore.Qt.Horizontal)\n        self.sld_angle_theta.setObjectName(""sld_angle_theta"")\n        self.horizontalLayout.addWidget(self.sld_angle_theta)\n        self.box_angle_theta = QtWidgets.QSpinBox(self.group_angles)\n        self.box_angle_theta.setPrefix("""")\n        self.box_angle_theta.setMinimum(0)\n        self.box_angle_theta.setMaximum(90)\n        self.box_angle_theta.setProperty(""value"", 0)\n        self.box_angle_theta.setObjectName(""box_angle_theta"")\n        self.horizontalLayout.addWidget(self.box_angle_theta)\n        self.formLayout_2.setLayout(0, QtWidgets.QFormLayout.FieldRole, self.horizontalLayout)\n        self.label_3 = QtWidgets.QLabel(self.group_angles)\n        self.label_3.setObjectName(""label_3"")\n        self.formLayout_2.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label_3)\n        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()\n        self.horizontalLayout_2.setObjectName(""horizontalLayout_2"")\n        self.sld_angle_phi = QtWidgets.QSlider(self.group_angles)\n        self.sld_angle_phi.setMaximum(360)\n        self.sld_angle_phi.setProperty(""value"", 0)\n        self.sld_angle_phi.setOrientation(QtCore.Qt.Horizontal)\n        self.sld_angle_phi.setObjectName(""sld_angle_phi"")\n        self.horizontalLayout_2.addWidget(self.sld_angle_phi)\n        self.box_angle_phi = QtWidgets.QSpinBox(self.group_angles)\n        self.box_angle_phi.setMaximum(360)\n        self.box_angle_phi.setProperty(""value"", 0)\n        self.box_angle_phi.setObjectName(""box_angle_phi"")\n        self.horizontalLayout_2.addWidget(self.box_angle_phi)\n        self.formLayout_2.setLayout(1, QtWidgets.QFormLayout.FieldRole, self.horizontalLayout_2)\n        self.label_4 = QtWidgets.QLabel(self.group_angles)\n        self.label_4.setObjectName(""label_4"")\n        self.formLayout_2.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.label_4)\n        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()\n        self.horizontalLayout_3.setObjectName(""horizontalLayout_3"")\n        self.sld_angle_gamma = QtWidgets.QSlider(self.group_angles)\n        self.sld_angle_gamma.setMaximum(360)\n        self.sld_angle_gamma.setProperty(""value"", 0)\n        self.sld_angle_gamma.setOrientation(QtCore.Qt.Horizontal)\n        self.sld_angle_gamma.setObjectName(""sld_angle_gamma"")\n        self.horizontalLayout_3.addWidget(self.sld_angle_gamma)\n        self.box_angle_gamma = QtWidgets.QSpinBox(self.group_angles)\n        self.box_angle_gamma.setMaximum(360)\n        self.box_angle_gamma.setProperty(""value"", 0)\n        self.box_angle_gamma.setObjectName(""box_angle_gamma"")\n        self.horizontalLayout_3.addWidget(self.box_angle_gamma)\n        self.formLayout_2.setLayout(2, QtWidgets.QFormLayout.FieldRole, self.horizontalLayout_3)\n        self.verticalLayout.addWidget(self.group_angles)\n        self.group_broad = QtWidgets.QGroupBox(self.widget)\n        self.group_broad.setObjectName(""group_broad"")\n        self.formLayout_3 = QtWidgets.QFormLayout(self.group_broad)\n        self.formLayout_3.setObjectName(""formLayout_3"")\n        self.label_5 = QtWidgets.QLabel(self.group_broad)\n        self.label_5.setObjectName(""label_5"")\n        self.formLayout_3.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_5)\n        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()\n        self.horizontalLayout_4.setObjectName(""horizontalLayout_4"")\n        self.sld_broad_eps = QtWidgets.QSlider(self.group_broad)\n        self.sld_broad_eps.setMaximum(50)\n        self.sld_broad_eps.setOrientation(QtCore.Qt.Horizontal)\n        self.sld_broad_eps.setObjectName(""sld_broad_eps"")\n        self.horizontalLayout_4.addWidget(self.sld_broad_eps)\n        self.box_broad_eps = QtWidgets.QSpinBox(self.group_broad)\n        self.box_broad_eps.setSuffix("""")\n        self.box_broad_eps.setMaximum(50)\n        self.box_broad_eps.setObjectName(""box_broad_eps"")\n        self.horizontalLayout_4.addWidget(self.box_broad_eps)\n        self.formLayout_3.setLayout(0, QtWidgets.QFormLayout.FieldRole, self.horizontalLayout_4)\n        self.label_6 = QtWidgets.QLabel(self.group_broad)\n        self.label_6.setObjectName(""label_6"")\n        self.formLayout_3.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.label_6)\n        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()\n        self.horizontalLayout_5.setObjectName(""horizontalLayout_5"")\n        self.sld_broad_chi = QtWidgets.QSlider(self.group_broad)\n        self.sld_broad_chi.setMaximum(50)\n        self.sld_broad_chi.setOrientation(QtCore.Qt.Horizontal)\n        self.sld_broad_chi.setObjectName(""sld_broad_chi"")\n        self.horizontalLayout_5.addWidget(self.sld_broad_chi)\n        self.box_broad_chi = QtWidgets.QSpinBox(self.group_broad)\n        self.box_broad_chi.setMaximum(50)\n        self.box_broad_chi.setObjectName(""box_broad_chi"")\n        self.horizontalLayout_5.addWidget(self.box_broad_chi)\n        self.formLayout_3.setLayout(2, QtWidgets.QFormLayout.FieldRole, self.horizontalLayout_5)\n        self.label_7 = QtWidgets.QLabel(self.group_broad)\n        self.label_7.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)\n        self.label_7.setObjectName(""label_7"")\n        self.formLayout_3.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.label_7)\n        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()\n        self.horizontalLayout_6.setObjectName(""horizontalLayout_6"")\n        self.sld_broad_out = QtWidgets.QSlider(self.group_broad)\n        self.sld_broad_out.setMaximum(50)\n        self.sld_broad_out.setProperty(""value"", 0)\n        self.sld_broad_out.setOrientation(QtCore.Qt.Horizontal)\n        self.sld_broad_out.setObjectName(""sld_broad_out"")\n        self.horizontalLayout_6.addWidget(self.sld_broad_out)\n        self.box_broad_out = QtWidgets.QSpinBox(self.group_broad)\n        self.box_broad_out.setMaximum(50)\n        self.box_broad_out.setProperty(""value"", 0)\n        self.box_broad_out.setObjectName(""box_broad_out"")\n        self.horizontalLayout_6.addWidget(self.box_broad_out)\n        self.formLayout_3.setLayout(4, QtWidgets.QFormLayout.FieldRole, self.horizontalLayout_6)\n        self.verticalLayout.addWidget(self.group_broad)\n        self.horizontalLayout_9.addWidget(self.widget, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)\n\n        self.retranslateUi(CustomWidget)\n        self.tabWidget.setCurrentIndex(0)\n        self.box_angle_theta.valueChanged[\'int\'].connect(self.sld_angle_theta.setValue)\n        self.sld_angle_theta.valueChanged[\'int\'].connect(self.box_angle_theta.setValue)\n        self.sld_angle_phi.valueChanged[\'int\'].connect(self.box_angle_phi.setValue)\n        self.box_angle_phi.valueChanged[\'int\'].connect(self.sld_angle_phi.setValue)\n        self.sld_angle_gamma.valueChanged[\'int\'].connect(self.box_angle_gamma.setValue)\n        self.box_broad_eps.valueChanged[\'int\'].connect(self.sld_broad_eps.setValue)\n        self.box_angle_gamma.valueChanged[\'int\'].connect(self.sld_angle_gamma.setValue)\n        self.sld_broad_eps.valueChanged[\'int\'].connect(self.box_broad_eps.setValue)\n        self.box_broad_chi.valueChanged[\'int\'].connect(self.sld_broad_chi.setValue)\n        self.sld_broad_chi.valueChanged[\'int\'].connect(self.box_broad_chi.setValue)\n        self.box_broad_out.valueChanged[\'int\'].connect(self.sld_broad_out.setValue)\n        self.sld_broad_out.valueChanged[\'int\'].connect(self.box_broad_out.setValue)\n        QtCore.QMetaObject.connectSlotsByName(CustomWidget)\n\n    def retranslateUi(self, CustomWidget):\n        _translate = QtCore.QCoreApplication.translate\n        CustomWidget.setWindowTitle(_translate(""CustomWidget"", ""SHG Yield""))\n        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_rashg), _translate(""CustomWidget"", ""RA-SHG""))\n        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_spect), _translate(""CustomWidget"", ""Spectra""))\n        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_rpp), _translate(""CustomWidget"", ""RpP""))\n        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_rsp), _translate(""CustomWidget"", ""RsP""))\n        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_rps), _translate(""CustomWidget"", ""RpS""))\n        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_rss), _translate(""CustomWidget"", ""RsS""))\n        self.group_material.setTitle(_translate(""CustomWidget"", ""Material""))\n        self.label_8.setText(_translate(""CustomWidget"", ""Multiple reflections:""))\n        self.label_9.setText(_translate(""CustomWidget"", ""Model:""))\n        self.layers.setItemText(0, _translate(""CustomWidget"", ""3 Layer""))\n        self.layers.setItemText(1, _translate(""CustomWidget"", ""Fresnel""))\n        self.label_12.setText(_translate(""CustomWidget"", ""Thickness:""))\n        self.box_thickness.setSuffix(_translate(""CustomWidget"", "" nm""))\n        self.group_energy.setTitle(_translate(""CustomWidget"", ""Energy""))\n        self.label.setText(_translate(""CustomWidget"", ""RA-SHG:""))\n        self.box_energy_polar.setSuffix(_translate(""CustomWidget"", "" eV""))\n        self.label_10.setText(_translate(""CustomWidget"", ""Spectra Min:""))\n        self.box_energy_spect_min.setSuffix(_translate(""CustomWidget"", "" eV""))\n        self.label_11.setText(_translate(""CustomWidget"", ""Spectra Max:""))\n        self.box_energy_spect_max.setSuffix(_translate(""CustomWidget"", "" eV""))\n        self.group_angles.setTitle(_translate(""CustomWidget"", ""Angles""))\n        self.label_2.setText(_translate(""CustomWidget"", ""Incidence (\xce\xb8):""))\n        self.box_angle_theta.setSuffix(_translate(""CustomWidget"", ""\xc2\xb0  ""))\n        self.label_3.setText(_translate(""CustomWidget"", ""Azimuthal (\xcf\x86):""))\n        self.box_angle_phi.setSuffix(_translate(""CustomWidget"", ""\xc2\xb0""))\n        self.label_4.setText(_translate(""CustomWidget"", ""Rotation (\xce\xb3):""))\n        self.box_angle_gamma.setSuffix(_translate(""CustomWidget"", ""\xc2\xb0""))\n        self.group_broad.setTitle(_translate(""CustomWidget"", ""Broadening""))\n        self.label_5.setText(_translate(""CustomWidget"", ""Epsilon:""))\n        self.label_6.setText(_translate(""CustomWidget"", ""Chi2:""))\n        self.label_7.setText(_translate(""CustomWidget"", ""Output:""))\n\nfrom pyqtgraph import PlotWidget\n'"
shgyield/__init__.py,0,b''
shgyield/gui.py,10,"b'import numpy as np\nimport pyqtgraph as pg\n\nfrom PyQt5 import QtCore, QtGui, QtWidgets\n\nimport shgyield.shg as shg\nfrom shgyield.QtLayout import Ui_CustomWidget\n\n\npg.setConfigOption(\'background\', \'#EAEAEA\')\npg.setConfigOption(\'foreground\', \'k\')\npg.setConfigOption(\'antialias\', True)\npg.setConfigOption(\'useWeave\', True)\n\n\nclass CustomWidget(QtGui.QWidget):\n\n    def __init__(self, params, material, experiment, scale, parent=None):\n        super(CustomWidget, self).__init__(parent=parent)\n\n        # set up the form class as a `ui` attribute\n        self.ui = Ui_CustomWidget()\n        self.ui.setupUi(self)\n\n        self.params = params\n        self.scale = scale\n        self.experiment = experiment\n        self.material = material\n\n        self.colors = [\'k\', \'#e41a1c\', \'#377eb8\', \'#4daf4a\', \'#984ea3\', \'#ff7f00\', \'#ffff33\', \'#a65628\', \'#f781bf\']\n\n        self.marker = {\n            \'pen\': None,\n            \'symbolSize\': 12,\n            \'symbol\': \'o\',\n            \'symbolPen\': pg.mkPen(None),\n            \'symbolBrush\': pg.mkBrush(204,0,0,150)\n        }\n\n        self.widgets = {\n            \'tab_polar\': {\n                \'pp\': self.ui.plot_all_polar_rpp.getPlotItem(),\n                \'sp\': self.ui.plot_all_polar_rsp.getPlotItem(),\n                \'ps\': self.ui.plot_all_polar_rps.getPlotItem(),\n                \'ss\': self.ui.plot_all_polar_rss.getPlotItem()\n            },\n            \'tab_spect\': {\n                \'pp\': self.ui.plot_all_spect_rpp.getPlotItem(),\n                \'sp\': self.ui.plot_all_spect_rsp.getPlotItem(),\n                \'ps\': self.ui.plot_all_spect_rps.getPlotItem(),\n                \'ss\': self.ui.plot_all_spect_rss.getPlotItem()\n            },\n            \'tab_pp\': {\n                \'exp_polar\': self.ui.plot_rpp_polar_exp.getPlotItem(),\n                \'exp_spect\': self.ui.plot_rpp_spect_exp.getPlotItem(),\n                \'thr_polar\': self.ui.plot_rpp_polar.getPlotItem(),\n                \'thr_spect\': self.ui.plot_rpp_spect.getPlotItem()\n            },\n            \'tab_sp\': {\n                \'exp_polar\': self.ui.plot_rsp_polar_exp.getPlotItem(),\n                \'exp_spect\': self.ui.plot_rsp_spect_exp.getPlotItem(),\n                \'thr_polar\': self.ui.plot_rsp_polar.getPlotItem(),\n                \'thr_spect\': self.ui.plot_rsp_spect.getPlotItem()\n            },\n            \'tab_ps\': {\n                \'exp_polar\': self.ui.plot_rps_polar_exp.getPlotItem(),\n                \'exp_spect\': self.ui.plot_rps_spect_exp.getPlotItem(),\n                \'thr_polar\': self.ui.plot_rps_polar.getPlotItem(),\n                \'thr_spect\': self.ui.plot_rps_spect.getPlotItem()\n            },\n            \'tab_ss\': {\n                \'exp_polar\': self.ui.plot_rss_polar_exp.getPlotItem(),\n                \'exp_spect\': self.ui.plot_rss_spect_exp.getPlotItem(),\n                \'thr_polar\': self.ui.plot_rss_polar.getPlotItem(),\n                \'thr_spect\': self.ui.plot_rss_spect.getPlotItem()\n            }\n        }\n\n        # initializes legends, polar lines\n        for pol in [\'pp\', \'sp\', \'ps\', \'ss\']:\n            self.widgets[\'tab_polar\'][pol].addLegend()\n            self.widgets[\'tab_spect\'][pol].addLegend()\n            self.widgets[\'tab_\' + pol][\'thr_polar\'].addLegend()\n            self.widgets[\'tab_\' + pol][\'thr_spect\'].addLegend()\n            self.widgets[\'tab_\' + pol][\'exp_polar\'].addLegend()\n            self.widgets[\'tab_\' + pol][\'exp_spect\'].addLegend()\n            for ang in np.arange(0, 361, 30):\n                self.widgets[\'tab_polar\'][pol].addItem(\n                    pg.InfiniteLine(angle = ang, pen = pg.mkPen(color=0.8, width=0.5, style=QtCore.Qt.DashLine)))\n                self.widgets[\'tab_\' + pol][\'thr_polar\'].addItem(\n                    pg.InfiniteLine(angle = ang, pen = pg.mkPen(color=0.8, width=0.5, style=QtCore.Qt.DashLine)))\n                self.widgets[\'tab_\' + pol][\'exp_polar\'].addItem(\n                    pg.InfiniteLine(angle = ang, pen = pg.mkPen(color=0.8, width=0.5, style=QtCore.Qt.DashLine)))\n\n        # calculation time!\n\n################################################################################\n################################################################################\n        \n        # loc = 0\n        # self.gapgui = {}\n        # self.group_gap = QtWidgets.QGroupBox(self.ui.widget)\n        # self.group_gap.setObjectName(""group_gap"")\n        # self.grid_gap = QtWidgets.QGridLayout(self.group_gap)\n        # self.grid_gap.setObjectName(""grid_gap"")\n        # self.ui.verticalLayout.addWidget(self.group_gap)\n        # self.group_gap.setTitle(QtCore.QCoreApplication.translate(""CustomWidget"", ""Gap""))\n        # for case in self.material.keys():\n        #     self.gapgui[\'label_gap_\' + case] = QtWidgets.QLabel(self.group_gap)\n        #     self.gapgui[\'label_gap_\' + case].setObjectName(\'label_gap_\' + case)\n        #     self.gapgui[\'label_gap_\' + case].setText(case)\n\n        #     self.gapgui[\'box_gap_\' + case] = QtWidgets.QDoubleSpinBox(self.group_gap)\n        #     self.gapgui[\'box_gap_\' + case].setObjectName(\'box_gap_\' + case)\n        #     self.gapgui[\'box_gap_\' + case].setSingleStep(0.01)\n        #     self.gapgui[\'box_gap_\' + case].setSuffix("" eV"")\n        #     self.gapgui[\'box_gap_\' + case].setMaximum(self.material[case][\'gap\'][\'rng\'].max())\n        #     self.gapgui[\'box_gap_\' + case].setMinimum(self.material[case][\'gap\'][\'rng\'].min())\n\n        #     self.gapgui[\'box_gap_\' + case].setValue(self.material[case][\'gap\'][\'gw\'])\n\n        #     self.grid_gap.addWidget(self.gapgui[\'label_gap_\' + case], loc, 0, 1, 1)\n        #     self.grid_gap.addWidget(self.gapgui[\'box_gap_\' + case], loc, 1, 1, 1)\n\n        #     self.gapgui[\'box_gap_\' + case].valueChanged.connect(self.update_plot)\n        #     self.gapgui[\'box_gap_\' + case].valueChanged.connect(self.update_plot)\n        #     loc += 1\n\n################################################################################\n################################################################################\n\n        # init: energy\n        self.einc = 0.01\n        self.epolar = self.params[\'energy\'][\'polar\']\n        self.erng = self.params[\'energy\'][\'spect\']\n        # self.erng = np.arange(self.ui.box_energy_spect_min.value(),\n        #                       self.ui.box_energy_spect_max.value()+self.einc,\n        #                       self.einc)\n        self.ui.box_energy_polar.setValue(self.epolar)\n        self.ui.box_energy_polar.setMinimum(self.erng.min())\n        self.ui.box_energy_polar.setMaximum(self.erng.max())\n        self.ui.box_energy_polar.setSingleStep(self.einc)\n\n        self.ui.sld_angle_theta.setValue(self.params[\'theta\'])\n        self.ui.sld_angle_phi.setValue(self.params[\'phi\'])\n        self.ui.sld_angle_gamma.setValue(self.params[\'gamma\'])\n        self.ui.sld_broad_eps.setValue(self.params[\'broad\'][\'eps\'])\n        self.ui.sld_broad_chi.setValue(self.params[\'broad\'][\'chi\'])\n        self.ui.sld_broad_out.setValue(self.params[\'broad\'][\'out\'])\n\n        # plots for experimental data, that do not change or need calculations\n        deco = 0\n        for case, measurement in self.experiment.items():\n            for kind, values in measurement.items():\n                for polarization, data in values.items():\n                    if kind == \'polar\':\n                        self.widgets[\'tab_\' + polarization][\'exp_\' + kind].plot(\n                            self.trans_polar(data[\'phi\'], data[\'data\']),\n                            pen = None,\n                            symbol = deco,\n                            symbolSize = 5,\n                            symbolBrush = pg.mkBrush(color=self.colors[deco]),\n                            symbolPen = pg.mkPen(\'k\', width=0.5),\n                            name = case)\n                    elif kind == \'spect\':\n                        if \'stdev\' in data.keys():\n                            self.widgets[\'tab_\' + polarization][\'exp_\' + kind].addItem(pg.ErrorBarItem(\n                                x = data[\'energy\'],\n                                y = data[\'data\'],\n                                height = data[\'stdev\'],\n                                pen = pg.mkPen(color=self.colors[deco], width=1)))\n                        self.widgets[\'tab_\' + polarization][\'exp_\' + kind].plot(\n                            x = data[\'energy\'],\n                            y = data[\'data\'],\n                            pen = None,\n                            symbol = deco,\n                            symbolSize = 5,\n                            symbolBrush = pg.mkBrush(color=self.colors[deco]),\n                            symbolPen = pg.mkPen(\'k\', width=0.5),\n                            name = case)\n            deco += 1\n\n################################################################################\n################################################################################\n\n        deco = 0\n        self.test = {}\n        for case in self.material.keys():\n            self.polar = shg.shgyield(energy =    self.ui.box_energy_polar.value(),\n                                      eps_m1 =    self.material[case][\'medium 1\'][\'eps\'],\n                                      # eps_m2 =    self.material[case][\'medium 2\'][\'{:4.2f}\'.format(self.gapgui[\'box_gap_\' + case].value())][\'eps\'],\n                                      eps_m2 =    self.material[case][\'medium 2\'][\'eps\'],\n                                      eps_m3 =    self.material[case][\'medium 3\'][\'eps\'],\n                                      # chi2 =      self.material[case][\'medium 2\'][\'{:4.2f}\'.format(self.gapgui[\'box_gap_\' + case].value())][\'chi2\'],\n                                      chi2 =      self.material[case][\'medium 2\'][\'chi2\'],\n                                      theta =     self.ui.sld_angle_theta.value(),\n                                      phi =       np.arange(0, 361),\n                                      gamma =     self.ui.sld_angle_gamma.value(),\n                                      thick =     self.material[case][\'lslab\']*5.2918E-2,\n                                      sigma_eps = self.ui.sld_broad_eps.value(),\n                                      sigma_chi = self.ui.sld_broad_chi.value(),\n                                      sigma_out = 0)\n\n            self.spect = shg.shgyield(energy =    self.erng,\n                                      eps_m1 =    self.material[case][\'medium 1\'][\'eps\'],\n                                      # eps_m2 =    self.material[case][\'medium 2\'][\'{:4.2f}\'.format(self.gapgui[\'box_gap_\' + case].value())][\'eps\'],\n                                      eps_m2 =    self.material[case][\'medium 2\'][\'eps\'],\n                                      eps_m3 =    self.material[case][\'medium 3\'][\'eps\'],\n                                      # chi2 =      self.material[case][\'medium 2\'][\'{:4.2f}\'.format(self.gapgui[\'box_gap_\' + case].value())][\'chi2\'],\n                                      chi2 =      self.material[case][\'medium 2\'][\'chi2\'],\n                                      theta =     self.ui.sld_angle_theta.value(),\n                                      phi =       self.ui.sld_angle_phi.value(),\n                                      gamma =     self.ui.sld_angle_gamma.value(),\n                                      thick =     self.material[case][\'lslab\']*5.2918E-2,\n                                      sigma_eps = self.ui.sld_broad_eps.value(),\n                                      sigma_chi = self.ui.sld_broad_chi.value(),\n                                      sigma_out = self.ui.sld_broad_out.value())\n\n            self.pidx = np.where(np.isclose(self.spect[\'phi\'], self.polar[\'phi\']))\n            self.eidx = np.where(np.isclose(self.spect[\'energy\'], self.polar[\'energy\']))\n\n            self.test[case] = {\n                pol: {\n                    \'test1\': self.widgets[\'tab_polar\'][pol].plot(self.trans_polar(self.polar[\'phi\'], self.polar[pol]*self.scale), pen=pg.mkPen(color=self.colors[deco], width=1.5), name=case),\n                    \'test2\': self.widgets[\'tab_polar\'][pol].plot(self.trans_polar2(self.spect[\'phi\'], self.polar[pol][self.pidx][0]*self.scale), **self.marker),\n                    \'test3\': self.widgets[\'tab_spect\'][pol].plot(x=self.spect[\'energy\'], y=self.spect[pol]*self.scale, pen=pg.mkPen(color=self.colors[deco], width=1.5), name=case),\n                    \'test4\': self.widgets[\'tab_spect\'][pol].addLine(x=self.polar[\'energy\'], pen=pg.mkPen(color=(204,0,0,150), width=2)),\n                    \'test5\': self.widgets[\'tab_\' + pol][\'thr_polar\'].plot(self.trans_polar(self.polar[\'phi\'], self.polar[pol]*self.scale), pen=pg.mkPen(color=self.colors[deco], width=1.5), name=case),\n                    \'test6\': self.widgets[\'tab_\' + pol][\'thr_polar\'].plot(self.trans_polar2(self.spect[\'phi\'], self.polar[pol][self.pidx][0]*self.scale), **self.marker),\n                    \'test7\': self.widgets[\'tab_\' + pol][\'thr_spect\'].plot(x = self.spect[\'energy\'], y = self.spect[pol]*self.scale, pen=pg.mkPen(color=self.colors[deco], width=1.5), name=case),\n                    \'test8\': self.widgets[\'tab_\' + pol][\'thr_spect\'].addLine(x = self.polar[\'energy\'], pen = pg.mkPen(color=(204,0,0,150), width=2))\n                } for pol in [\'pp\', \'sp\', \'ps\', \'ss\']\n            } \n            \n            deco += 1\n\n################################################################################\n################################################################################\n\n        # decorations and behavior for plots        \n        for pol in [\'pp\', \'sp\', \'ps\', \'ss\']:\n            self.widgets[\'tab_polar\'][pol].setAspectLocked(True)\n            self.widgets[\'tab_polar\'][pol].disableAutoRange()\n            self.widgets[\'tab_polar\'][pol].setLabels(bottom=\'R (cm<sup>2</sup>/W)\', left=\'R (cm<sup>2</sup>/W)\')\n            self.widgets[\'tab_spect\'][pol].setLabels(bottom=\'Photon Energy (eV)\', left=\'R (cm<sup>2</sup>/W)\')\n            self.widgets[\'tab_spect\'][pol].setXLink(self.widgets[\'tab_spect\'][\'pp\'])\n            self.widgets[\'tab_\' + pol][\'thr_polar\'].setLabels(bottom=\'R (cm<sup>2</sup>/W)\', left=\'R (cm<sup>2</sup>/W)\')\n            self.widgets[\'tab_\' + pol][\'thr_polar\'].setAspectLocked(True)\n            self.widgets[\'tab_\' + pol][\'thr_polar\'].disableAutoRange()\n            self.widgets[\'tab_\' + pol][\'thr_spect\'].setLabels(bottom=\'Photon Energy (eV)\', left=\'R (cm<sup>2</sup>/W)\')\n            self.widgets[\'tab_\' + pol][\'exp_spect\'].setXLink(self.widgets[\'tab_\' + pol][\'thr_spect\'])\n            self.widgets[\'tab_\' + pol][\'exp_spect\'].setLabels(bottom=\'Photon Energy (eV)\')\n            self.widgets[\'tab_\' + pol][\'exp_polar\'].setAspectLocked(True)\n            self.widgets[\'tab_\' + pol][\'exp_polar\'].disableAutoRange()\n\n        # updating\n        self.ui.box_energy_polar.valueChanged.connect(self.update_plot)\n        # self.ui.box_energy_spect_min.valueChanged.connect(self.update_plot)\n        # self.ui.box_energy_spect_max.valueChanged.connect(self.update_plot)\n        \n        self.ui.sld_angle_theta.valueChanged.connect(self.update_plot)\n        self.ui.sld_angle_phi.valueChanged.connect(self.update_plot)\n        self.ui.sld_angle_gamma.valueChanged.connect(self.update_plot)\n        \n        self.ui.sld_broad_eps.valueChanged.connect(self.update_plot)\n        self.ui.sld_broad_chi.valueChanged.connect(self.update_plot)\n        self.ui.sld_broad_out.valueChanged.connect(self.update_plot)\n\n        # simple demonstration of pure Qt widgets interacting with pyqtgraph\n        # self.ui.checkBox.stateChanged.connect(self.toggleMouse)\n\n    # def toggleMouse(self, state):\n    #     if state == QtCore.Qt.Checked:\n    #         enabled = True\n    #     else:\n    #         enabled = False\n\n    #     self.ui.plotWidget.setMouseEnabled(x=enabled, y=enabled)\n    def trans_polar(self, angle, radius):\n        return {\'x\': radius*np.cos(np.radians(angle)), \'y\': radius*np.sin(np.radians(angle))}\n\n    def trans_polar2(self, angle, radius):\n        return {\'x\': [radius*np.cos(np.radians(angle))], \'y\': [radius*np.sin(np.radians(angle))]}\n\n    def update_plot(self):\n        for case in self.material.keys():\n            polar = shg.shgyield(energy =    self.ui.box_energy_polar.value(),\n                                 eps_m1 =    self.material[case][\'medium 1\'][\'eps\'],\n                                 # eps_m2 =    self.material[case][\'medium 2\'][\'{:4.2f}\'.format(self.gapgui[\'box_gap_\' + case].value())][\'eps\'],\n                                 eps_m2 =    self.material[case][\'medium 2\'][\'eps\'],\n                                 eps_m3 =    self.material[case][\'medium 3\'][\'eps\'],\n                                 # chi2 =      self.material[case][\'medium 2\'][\'{:4.2f}\'.format(self.gapgui[\'box_gap_\' + case].value())][\'chi2\'],\n                                 chi2 =      self.material[case][\'medium 2\'][\'chi2\'],\n                                 theta =     self.ui.sld_angle_theta.value(),\n                                 phi =       np.arange(0, 361),\n                                 gamma =     self.ui.sld_angle_gamma.value(),\n                                 thick =     self.material[case][\'lslab\']*5.2918E-2,\n                                 sigma_eps = self.ui.sld_broad_eps.value(),\n                                 sigma_chi = self.ui.sld_broad_chi.value(),\n                                 sigma_out = 0)\n\n            spect = shg.shgyield(energy =    self.erng,\n                                 eps_m1 =    self.material[case][\'medium 1\'][\'eps\'],\n                                 # eps_m2 =    self.material[case][\'medium 2\'][\'{:4.2f}\'.format(self.gapgui[\'box_gap_\' + case].value())][\'eps\'],\n                                 eps_m2 =    self.material[case][\'medium 2\'][\'eps\'],\n                                 eps_m3 =    self.material[case][\'medium 3\'][\'eps\'],\n                                 # chi2 =      self.material[case][\'medium 2\'][\'{:4.2f}\'.format(self.gapgui[\'box_gap_\' + case].value())][\'chi2\'],\n                                 chi2 =      self.material[case][\'medium 2\'][\'chi2\'],\n                                 theta =     self.ui.sld_angle_theta.value(),\n                                 phi =       self.ui.sld_angle_phi.value(),\n                                 gamma =     self.ui.sld_angle_gamma.value(),\n                                 thick =     self.material[case][\'lslab\']*5.2918E-2,\n                                 sigma_eps = self.ui.sld_broad_eps.value(),\n                                 sigma_chi = self.ui.sld_broad_chi.value(),\n                                 sigma_out = self.ui.sld_broad_out.value())\n\n            pidx = np.where(np.isclose(spect[\'phi\'], polar[\'phi\']))\n            eidx = np.where(np.isclose(spect[\'energy\'], polar[\'energy\']))\n\n            for pol in [\'pp\', \'sp\', \'ps\', \'ss\']:\n\n                self.test[case][pol][\'test1\'].setData(self.trans_polar(polar[\'phi\'], polar[pol]*self.scale)),\n                self.test[case][pol][\'test2\'].setData(self.trans_polar2(spect[\'phi\'], polar[pol][pidx][0]*self.scale)),\n                self.test[case][pol][\'test3\'].setData(x = spect[\'energy\'], y = spect[pol]*self.scale),\n                self.test[case][pol][\'test4\'].setValue(polar[\'energy\']),\n                self.test[case][pol][\'test5\'].setData(self.trans_polar(polar[\'phi\'], polar[pol]*self.scale)),\n                self.test[case][pol][\'test6\'].setData(self.trans_polar2(spect[\'phi\'], polar[pol][pidx][0]*self.scale)),\n                self.test[case][pol][\'test7\'].setData(x = spect[\'energy\'], y = spect[pol]*self.scale),\n                self.test[case][pol][\'test8\'].setValue(polar[\'energy\'])\n'"
shgyield/shg.py,131,"b'#!/usr/bin/env python\n""""""\nshgyield.py is a python module for exploring the SHG optical response of\nmaterials. It is well suited for 2D-materials, surfaces, bulks, and\nmetamaterials. For a complete overview of the theory, see PRB 94, 115314 (2016).\n\ntodo:\n* SHG: SOME Nv=1 INSTANCES ARE HARDCODED, NEED TO GO BACK AND CHANGE\n* Allow for saving all data and parameters to NetCDF file, and final data to txt\n* Develop SHG functions into class\n* Improve rotation function and avoid running unless changed\n* Improve spline function and avoid running unless changed\n* Convert to absolute broadening to avoid trouble with polar plots\n\n* Develop GUI to ingest and pre-process data, provide initial values, etc.\n* Include every symmetry group (see Popov) into menus\n""""""\n\nimport numpy as np\nfrom scipy import constants, ndimage\nfrom scipy.interpolate import InterpolatedUnivariateSpline\n\nnp.seterr(divide=\'ignore\', invalid=\'ignore\', over=\'ignore\') # ignores overflow and divide-by-zero\n\n\ndef broad(data, sigma):\n    \'\'\' applies Gaussian broadening to real number \'\'\'\n    return ndimage.filters.gaussian_filter(data, sigma)\n\n\ndef broadC(data, sigma):\n    \'\'\' applies Gaussian broadening to complex and returns complex \'\'\'\n    real = ndimage.filters.gaussian_filter(data.real, sigma)\n    imag = ndimage.filters.gaussian_filter(data.imag, sigma)\n    return real + 1j*imag\n\n\ndef spline(data, energy):\n    \'\'\' returns spline object \'\'\'\n    return InterpolatedUnivariateSpline(energy, data, ext=2)\n\n\ndef splineC(data, energy):\n    \'\'\' creates a spline for complex and returns tuple with spline objects \'\'\'\n    real = InterpolatedUnivariateSpline(energy, data.real, ext=2)\n    imag = InterpolatedUnivariateSpline(energy, data.imag, ext=2)\n    return (real, imag)\n\n\ndef splineEPS(data, energy):\n    \'\'\' IMPROVE: creates a spline for EPS, returns 1w and 2w \'\'\'\n    splines = {key: splineC(val[\'data\'], val[\'energy\']) for key, val in data.items()}\n    new1w = {key: val[0](energy) + 1j*val[1](energy) for key, val in splines.items()}\n    new2w = {key: val[0](2*energy) + 1j*val[1](2*energy) for key, val in splines.items()}\n    return (new1w, new2w)\n\n\ndef avgEPS(data):\n    \'\'\' IMPROVE: averages over all values in a dict \'\'\'\n    return np.mean(list(data.values()), axis=0)\n\n\ndef rotate(chi2, rotang):\n    ## in-plane rotatation for chi2 tensor components\n    gamma = np.radians(90) - rotang\n    chi2rot = {\n        \'xxx\' : + np.sin(gamma)**3*chi2[\'xxx\'] \\\n                + np.sin(gamma)*np.cos(gamma)**2*chi2[\'xyy\'] \\\n                - 2*np.sin(gamma)**2*np.cos(gamma)*chi2[\'xxy\'] \\\n                - np.sin(gamma)**2*np.cos(gamma)*chi2[\'yxx\'] \\\n                - np.cos(gamma)**3*chi2[\'yyy\'] \\\n                + 2*np.sin(gamma)*np.cos(gamma)**2*chi2[\'yxy\'],\n        \'xyy\' : + np.sin(gamma)*np.cos(gamma)**2*chi2[\'xxx\'] \\\n                + np.sin(gamma)**3*chi2[\'xyy\'] \\\n                + 2*np.sin(gamma)**2*np.cos(gamma)*chi2[\'xxy\'] \\\n                - np.cos(gamma)**3*chi2[\'yxx\'] \\\n                - np.sin(gamma)**2*np.cos(gamma)*chi2[\'yyy\'] \\\n                - 2*np.sin(gamma)*np.cos(gamma)**2*chi2[\'yxy\'],\n        \'xzz\' : + np.sin(gamma)*chi2[\'xzz\'] - np.cos(gamma)*chi2[\'yzz\'],\n        \'xyz\' : + np.sin(gamma)**2*chi2[\'xyz\'] \\\n                + np.sin(gamma)*np.cos(gamma)*chi2[\'xxz\'] \\\n                - np.sin(gamma)*np.cos(gamma)*chi2[\'yyz\'] \\\n                - np.cos(gamma)**2*chi2[\'yxz\'],\n        \'xxz\' : - np.sin(gamma)*np.cos(gamma)*chi2[\'xyz\'] \\\n                + np.sin(gamma)**2*chi2[\'xxz\'] \\\n                + np.cos(gamma)**2*chi2[\'yyz\'] \\\n                - np.sin(gamma)*np.cos(gamma)*chi2[\'yxz\'],\n        \'xxy\' : + np.sin(gamma)**2*np.cos(gamma)*chi2[\'xxx\'] \\\n                - np.sin(gamma)**2*np.cos(gamma)*chi2[\'xyy\'] \\\n                + (np.sin(gamma)**3 - np.sin(gamma)*np.cos(gamma)**2)*chi2[\'xxy\'] \\\n                - np.sin(gamma)*np.cos(gamma)**2*chi2[\'yxx\'] \\\n                - np.sin(gamma)*np.cos(gamma)**2*chi2[\'yyy\'] \\\n                + (np.cos(gamma)**3 - np.sin(gamma)**2*np.cos(gamma))*chi2[\'yxy\'],\n        \'yxx\' : + np.sin(gamma)**2*np.cos(gamma)*chi2[\'xxx\'] \\\n                + np.cos(gamma)**3*chi2[\'xyy\'] \\\n                - 2*np.sin(gamma)*np.cos(gamma)**2*chi2[\'xxy\'] \\\n                + np.sin(gamma)**3*chi2[\'yxx\'] \\\n                + np.sin(gamma)*np.cos(gamma)**2*chi2[\'yyy\'] \\\n                - 2*np.sin(gamma)**2*np.cos(gamma)*chi2[\'yxy\'],\n        \'yyy\' : + np.cos(gamma)**3*chi2[\'xxx\'] \\\n                + np.sin(gamma)**2*np.cos(gamma)*chi2[\'xyy\'] \\\n                + 2*np.sin(gamma)*np.cos(gamma)**2*chi2[\'xxy\'] \\\n                + np.sin(gamma)*np.cos(gamma)**2*chi2[\'yxx\'] \\\n                + np.sin(gamma)**3*chi2[\'yyy\'] \\\n                + 2*np.sin(gamma)**2*np.cos(gamma)*chi2[\'yxy\'],\n        \'yzz\' : + np.cos(gamma)*chi2[\'xzz\'] + np.sin(gamma)*chi2[\'yzz\'],\n        \'yyz\' : + np.sin(gamma)*np.cos(gamma)*chi2[\'xyz\'] \\\n                + np.cos(gamma)**2*chi2[\'xxz\'] \\\n                + np.sin(gamma)**2*chi2[\'yyz\'] \\\n                + np.sin(gamma)*np.cos(gamma)*chi2[\'yxz\'],\n        \'yxz\' : - np.cos(gamma)**2*chi2[\'xyz\'] \\\n                + np.sin(gamma)*np.cos(gamma)*chi2[\'xxz\'] \\\n                - np.sin(gamma)*np.cos(gamma)*chi2[\'yyz\'] \\\n                + np.sin(gamma)**2*chi2[\'yxz\'],\n        \'yxy\' : + np.sin(gamma)*np.cos(gamma)**2*chi2[\'xxx\'] \\\n                - np.sin(gamma)*np.cos(gamma)**2*chi2[\'xyy\'] \\\n                - (np.cos(gamma)**3 - np.sin(gamma)**2*np.cos(gamma))*chi2[\'xxy\'] \\\n                + np.sin(gamma)**2*np.cos(gamma)*chi2[\'yxx\'] \\\n                - np.sin(gamma)**2*np.cos(gamma)*chi2[\'yyy\'] \\\n                + (np.sin(gamma)**3 - np.sin(gamma)*np.cos(gamma)**2)*chi2[\'yxy\'],\n        \'zxx\' : + np.sin(gamma)**2*chi2[\'zxx\'] \\\n                + np.cos(gamma)**2*chi2[\'zyy\'] \\\n                - 2*np.sin(gamma)*np.cos(gamma)*chi2[\'zxy\'],\n        \'zyy\' : + np.cos(gamma)**2*chi2[\'zxx\'] \\\n                + np.sin(gamma)**2*chi2[\'zyy\'] \\\n                + 2*np.sin(gamma)*np.cos(gamma)*chi2[\'zxy\'],\n        \'zzz\' : + chi2[\'zzz\'],\n        \'zyz\' : + np.sin(gamma)*chi2[\'zyz\'] + np.cos(gamma)*chi2[\'zxz\'],\n        \'zxz\' : - np.cos(gamma)*chi2[\'zyz\'] + np.sin(gamma)*chi2[\'zxz\'],\n        \'zxy\' : + np.sin(gamma)*np.cos(gamma)*chi2[\'zxx\'] \\\n                - np.sin(gamma)*np.cos(gamma)*chi2[\'zyy\'] \\\n                - np.cos(2*gamma)*chi2[\'zxy\']\n    }\n    return chi2rot\n\n\ndef wvec(eps, theta):\n    \'\'\'\n    Wave vector, where w = sqrt[epsilon - sin(theta)^2].\n    \'\'\'\n    return np.sqrt(eps - (np.sin(theta)**2))\n\n\ndef frefs(epsi, epsj, theta):\n    \'\'\'\n    Generic reflection fresnel factors, see Eqs. (13) and (14) of PRB 94, 115314 (2016).\n    \'\'\'\n    return (wvec(epsi, theta) - wvec(epsj, theta))/(wvec(epsi, theta) + wvec(epsj, theta))\n\n\ndef frefp(epsi, epsj, theta):\n    \'\'\'\n    Generic reflection fresnel factors, see Eqs. (13) and (14) of PRB 94, 115314 (2016).\n    \'\'\'\n    return ((wvec(epsi, theta) * epsj) - (wvec(epsj, theta) * epsi))/\\\n           ((wvec(epsi, theta) * epsj) + (wvec(epsj, theta) * epsi))\n\n\ndef ftrans(epsi, epsj, theta):\n    \'\'\'\n    s-polarized transmission fresnel factors , see Eqs. (13) and (14) of PRB 94, 115314 (2016).\n    \'\'\'\n    return (2 * wvec(epsi, theta))/(wvec(epsi, theta) + wvec(epsj, theta))\n\n\ndef ftranp(epsi, epsj, theta):\n    \'\'\'\n    p-polarized transmission fresnel factors, see Eqs. (13) and (14) of PRB 94, 115314 (2016).\n    \'\'\'\n    return (2 * wvec(epsi, theta) * np.sqrt(epsi * epsj))/\\\n           (wvec(epsi, theta) * epsj + wvec(epsj, theta) * epsi)\n\n\ndef mrc2w(energy, eps0, fres1, fres2, theta, thick, mref):\n    \'\'\'\n    2w multiple reflection coefficient, see Eq. (18) of PRB 94, 115314 (2016).\n    THICKNESS MUST BE IN NANOMETERS!!!\n    \'\'\'\n    if mref:\n        delta = 8*np.pi * ((energy * thick * 1e-9)/\\\n                (constants.value(""Planck constant in eV s"") * constants.c)) * wvec(eps0, theta) \n        return (fres1 * np.exp(1j * (delta/2)))/\\\n               (1 + (fres2 * fres1 * np.exp(1j * delta))) * np.sinc(delta/2)\n    elif not mref:\n        return fres1\n\n\ndef mrc1w(energy, eps0, fres1, fres2, theta, thick, mref):\n    \'\'\'\n    1w multiple reflection coefficient, see Eq. (21) of PRB 94, 115314 (2016).\n    \'\'\'\n    if mref:\n        varphi = 4*np.pi * ((energy * thick * 1e-9)/\\\n                 (constants.value(""Planck constant in eV s"") * constants.c)) * wvec(eps0, theta)\n        return (fres1 * np.exp(1j * varphi))/\\\n               (1 + (fres2 * fres1 * np.exp(1j * varphi)))\n    elif not mref:\n        return fres1\n\n\ndef rad_pp(energy, eps1w, eps2w, chi2, theta, phi, thick, mref):\n    \'\'\'\n    rpP, see Eq. (50) of PRB 94, 115314 (2016).\n    \'\'\'\n    fres2p = mrc2w(energy,\n                   eps2w[\'M2\'],\n                   frefp(eps2w[\'M2\'], eps2w[\'M3\'], theta),\n                   frefp(eps2w[\'M1\'], eps2w[\'M2\'], theta),\n                   theta, thick, mref)\n    fres1p = mrc1w(energy,\n                   eps1w[\'M2\'],\n                   frefp(eps1w[\'M2\'], eps1w[\'M3\'], theta),\n                   frefp(eps1w[\'M1\'], eps1w[\'M2\'], theta),\n                   theta, thick, mref)\n    pre = (ftranp(eps2w[\'M1\'], eps2w[\'M2\'], theta)/np.sqrt(eps2w[\'M2\'])) * \\\n          (ftranp(eps1w[\'M1\'], eps1w[\'M2\'], theta)/np.sqrt(eps1w[\'M2\']))**2\n    ### r_{pP}\n    rpp = - ((1 - fres2p) * (1 - fres1p)**2 \\\n            * wvec(eps1w[\'M2\'], theta)**2 * wvec(eps2w[\'M2\'], theta) \\\n            * np.cos(phi)**3 * chi2[\'xxx\']) \\\n          - (2 * (1 - fres2p) * (1 - fres1p)**2 \\\n            * wvec(eps1w[\'M2\'], theta)**2 * wvec(eps2w[\'M2\'], theta) \\\n            * np.sin(phi) * np.cos(phi)**2 * chi2[\'xxy\']) \\\n          - (2 * (1 - fres2p) * (1 + fres1p) * (1 - fres1p) \\\n            * wvec(eps1w[\'M2\'], theta) * wvec(eps2w[\'M2\'], theta) \\\n            * np.sin(theta) * np.cos(phi)**2 * chi2[\'xxz\']) \\\n          - ((1 - fres2p) * (1 - fres1p)**2 \\\n            * wvec(eps1w[\'M2\'], theta)**2 * wvec(eps2w[\'M2\'], theta) \\\n            * np.sin(phi)**2 * np.cos(phi) * chi2[\'xyy\']) \\\n          - (2 * (1 - fres2p) * (1 + fres1p) * (1 - fres1p) \\\n            * wvec(eps1w[\'M2\'], theta) * wvec(eps2w[\'M2\'], theta) \\\n            * np.sin(theta) * np.sin(phi) * np.cos(phi) * chi2[\'xyz\']) \\\n          - ((1 - fres2p) * (1 + fres1p)**2 \\\n            * wvec(eps2w[\'M2\'], theta) \\\n            * np.sin(theta)**2 * np.cos(phi) * chi2[\'xzz\']) \\\n          - ((1 - fres2p) * (1 - fres1p)**2 \\\n            * wvec(eps1w[\'M2\'], theta)**2 * wvec(eps2w[\'M2\'], theta) \\\n            * np.sin(phi) * np.cos(phi)**2 * chi2[\'yxx\']) \\\n          - (2 * (1 - fres2p) * (1 - fres1p)**2 \\\n            * wvec(eps1w[\'M2\'], theta)**2 * wvec(eps2w[\'M2\'], theta) \\\n            * np.sin(phi)**2 * np.cos(phi) * chi2[\'yxy\']) \\\n          - (2 * (1 - fres2p) * (1 + fres1p) * (1 - fres1p) \\\n            * wvec(eps1w[\'M2\'], theta) * wvec(eps2w[\'M2\'], theta) \\\n            * np.sin(theta) * np.sin(phi) * np.cos(phi) * chi2[\'yxz\']) \\\n          - ((1 - fres2p) * (1 - fres1p)**2 \\\n            * wvec(eps1w[\'M2\'], theta)**2 * wvec(eps2w[\'M2\'], theta) \\\n            * np.sin(phi)**3 * chi2[\'yyy\']) \\\n          - (2 * (1 - fres2p) * (1 + fres1p) * (1 - fres1p) \\\n            * wvec(eps1w[\'M2\'], theta) * wvec(eps2w[\'M2\'], theta) \\\n            * np.sin(theta) * np.sin(phi)**2 * chi2[\'yyz\']) \\\n          - ((1 - fres2p) * (1 + fres1p)**2 \\\n            * wvec(eps2w[\'M2\'], theta) \\\n            * np.sin(theta)**2 * np.sin(phi) * chi2[\'yzz\']) \\\n          + ((1 + fres2p) * (1 - fres1p)**2 \\\n            * wvec(eps1w[\'M2\'], theta)**2 \\\n            * np.sin(theta) * np.cos(phi)**2 * chi2[\'zxx\']) \\\n          + (2 * (1 + fres2p) * (1 + fres1p) * (1 - fres1p) \\\n            * wvec(eps1w[\'M2\'], theta) \\\n            * np.sin(theta)**2 * np.cos(phi) * chi2[\'zxz\']) \\\n          + (2 * (1 + fres2p) * (1 - fres1p)**2 \\\n            * wvec(eps1w[\'M2\'], theta)**2 \\\n            * np.sin(theta) * np.sin(phi) * np.cos(phi) * chi2[\'zxy\']) \\\n          + ((1 + fres2p) * (1 - fres1p)**2 \\\n            * wvec(eps1w[\'M2\'], theta)**2 \\\n            * np.sin(theta) * np.sin(phi)**2 * chi2[\'zyy\']) \\\n          + (2 * (1 + fres2p) * (1 + fres1p) * (1 - fres1p) \\\n            * wvec(eps1w[\'M2\'], theta) \\\n            * np.sin(theta)**2 * np.sin(phi) * chi2[\'zyz\']) \\\n          + ((1 + fres2p) * (1 + fres1p)**2 * np.sin(phi)**3 * chi2[\'zzz\'])\n    return pre*rpp\n\n\ndef rad_ps(energy, eps1w, eps2w, chi2, theta, phi, thick, mref):\n    \'\'\'\n    rpS, see Eq. (55) of PRB 94, 115314 (2016).\n    \'\'\'\n    fres2s = mrc2w(energy,\n                   eps2w[\'M2\'],\n                   frefs(eps2w[\'M2\'], eps2w[\'M3\'], theta),\n                   frefs(eps2w[\'M1\'], eps2w[\'M2\'], theta),\n                   theta, thick, mref)\n    fres1p = mrc1w(energy,\n                   eps1w[\'M2\'],\n                   frefp(eps1w[\'M2\'], eps1w[\'M3\'], theta),\n                   frefp(eps1w[\'M1\'], eps1w[\'M2\'], theta),\n                   theta, thick, mref)\n    pre = (ftrans(eps2w[\'M1\'], eps2w[\'M2\'], theta) * (1 + fres2s)) * \\\n          (ftranp(eps1w[\'M1\'], eps1w[\'M2\'], theta)/np.sqrt(eps1w[\'M2\']))**2\n    ### r_{pS}\n    rps = - ((1 - fres1p)**2 * wvec(eps1w[\'M2\'], theta)**2 \\\n            * np.sin(phi) * np.cos(phi)**2 * chi2[\'xxx\']) \\\n          - (2 * (1 - fres1p)**2 * wvec(eps1w[\'M2\'], theta)**2 \\\n            * np.sin(phi)**2 * np.cos(phi) * chi2[\'xxy\']) \\\n          - (2 * (1 + fres1p) * (1 - fres1p) * wvec(eps1w[\'M2\'], theta) \\\n            * np.sin(theta) * np.sin(phi) * np.cos(phi) * chi2[\'xxz\']) \\\n          - ((1 - fres1p)**2 * wvec(eps1w[\'M2\'], theta)**2 \\\n            * np.sin(phi)**3 * chi2[\'xyy\']) \\\n          - (2 * (1 + fres1p) * (1 - fres1p) * wvec(eps1w[\'M2\'], theta) \\\n            * np.sin(theta) * np.sin(phi)**2 * chi2[\'xyz\']) \\\n          - ((1 + fres1p)**2 \\\n            * np.sin(theta)**2 * np.sin(phi) * chi2[\'xzz\']) \\\n          + ((1 - fres1p)**2 * wvec(eps1w[\'M2\'], theta)**2 \\\n            * np.cos(phi)**3 * chi2[\'yxx\']) \\\n          + (2 * (1 - fres1p)**2 * wvec(eps1w[\'M2\'], theta)**2 \\\n            * np.sin(phi) * np.cos(phi)**2 * chi2[\'yxy\']) \\\n          + (2 * (1 + fres1p) * (1 - fres1p) * wvec(eps1w[\'M2\'], theta) \\\n            * np.sin(theta) * np.cos(phi)**2 * chi2[\'yxz\']) \\\n          + ((1 - fres1p)**2 * wvec(eps1w[\'M2\'], theta)**2 \\\n            * np.sin(phi)**2 * np.cos(phi) * chi2[\'yyy\']) \\\n          + (2 * (1 + fres1p) * (1 - fres1p) * wvec(eps1w[\'M2\'], theta) \\\n            * np.sin(theta) * np.sin(phi) * np.cos(phi) * chi2[\'yyz\']) \\\n          + ((1 + fres1p)**2 \\\n            * np.sin(theta)**2 * np.cos(phi) * chi2[\'yzz\'])\n    return pre*rps\n\n\ndef rad_sp(energy, eps1w, eps2w, chi2, theta, phi, thick, mref):\n    \'\'\'\n    rsP, see Eq. (60) of PRB 94, 115314 (2016).\n    \'\'\'\n    fres2p = mrc2w(energy,\n                   eps2w[\'M2\'],\n                   frefp(eps2w[\'M2\'], eps2w[\'M3\'], theta),\n                   frefp(eps2w[\'M1\'], eps2w[\'M2\'], theta),\n                   theta, thick, mref)\n    fres1s = mrc1w(energy,\n                   eps1w[\'M2\'],\n                   frefs(eps1w[\'M2\'], eps1w[\'M3\'], theta),\n                   frefs(eps1w[\'M1\'], eps1w[\'M2\'], theta),\n                   theta, thick, mref)\n    pre = (ftranp(eps2w[\'M1\'], eps2w[\'M2\'], theta)/np.sqrt(eps2w[\'M2\'])) * \\\n          (ftrans(eps1w[\'M1\'], eps1w[\'M2\'], theta) * (1 + fres1s))**2\n    ### r_{sP}\n    rsp = - ((1 - fres2p) * wvec(eps2w[\'M2\'], theta) \\\n            * np.sin(phi)**2 * np.cos(phi) * chi2[\'xxx\']) \\\n          + ((1 - fres2p) * wvec(eps2w[\'M2\'], theta) \\\n            * 2 * np.sin(phi) * np.cos(phi)**2 * chi2[\'xxy\']) \\\n          - ((1 - fres2p) * wvec(eps2w[\'M2\'], theta) \\\n            * np.cos(phi)**3 * chi2[\'xyy\']) \\\n          - ((1 - fres2p) * wvec(eps2w[\'M2\'], theta) \\\n            * np.sin(phi)**3 * chi2[\'yxx\']) \\\n          + ((1 - fres2p) * wvec(eps2w[\'M2\'], theta) \\\n            * 2 * np.sin(phi)**2 * np.cos(phi) * chi2[\'yxy\']) \\\n          - ((1 - fres2p) * wvec(eps2w[\'M2\'], theta) \\\n            * np.sin(phi) * np.cos(phi)**2 * chi2[\'yyy\']) \\\n          + ((1 + fres2p) \\\n            * np.sin(theta) * np.sin(phi)**2 * chi2[\'zxx\']) \\\n          - ((1 + fres2p) \\\n            * np.sin(theta) * 2 * np.sin(phi) * np.cos(phi) * chi2[\'zxy\']) \\\n          + ((1 + fres2p) \\\n            * np.sin(theta) * np.cos(phi)**2 * chi2[\'zyy\'])\n    return pre*rsp\n\n\ndef rad_ss(energy, eps1w, eps2w, chi2, theta, phi, thick, mref):\n    \'\'\'\n    rsS, see Eq. (65) of PRB 94, 115314 (2016).\n    \'\'\'\n    fres2s = mrc2w(energy,\n                   eps2w[\'M2\'],\n                   frefs(eps2w[\'M2\'], eps2w[\'M3\'], theta),\n                   frefs(eps2w[\'M1\'], eps2w[\'M2\'], theta),\n                   theta, thick, mref)\n    fres1s = mrc1w(energy,\n                   eps1w[\'M2\'],\n                   frefs(eps1w[\'M2\'], eps1w[\'M3\'], theta),\n                   frefs(eps1w[\'M1\'], eps1w[\'M2\'], theta),\n                   theta, thick, mref)\n    pre = (ftrans(eps2w[\'M1\'], eps2w[\'M2\'], theta) * (1 + fres2s)) * \\\n          (ftrans(eps1w[\'M1\'], eps1w[\'M2\'], theta) * (1 + fres1s))**2\n    ### r_{sS}\n    rss = - (np.sin(phi)**3 * chi2[\'xxx\']) \\\n          + (2 * np.sin(phi)**2 * np.cos(phi) * chi2[\'xxy\']) \\\n          - (np.sin(phi) * np.cos(phi)**2 * chi2[\'xyy\']) \\\n          + (np.sin(phi)**2 * np.cos(phi) * chi2[\'yxx\']) \\\n          + (np.cos(phi)**3 * chi2[\'yyy\']) \\\n          - (2 * np.sin(phi) * np.cos(phi)**2 * chi2[\'yxy\'])\n    return pre*rss\n\n\ndef shgyield(energy, eps_m1, eps_m2, eps_m3, chi2, theta, phi, thick, gamma=90, sigma_eps=0.0, sigma_chi=0.0, sigma_out=5.0, mode=\'3-layer\', mref=True):\n    \'\'\'\n    Calculates the final SHG yield, see Eq. (38) of PRB 94, 115314 (2016).\n    THICKNESS MUST BE IN NANOMETERS!!!\n    \'\'\'\n\n    eps_m1_num = {key: val for key, val in eps_m1.items() if not isinstance(val, dict)}\n    eps_m1_brd = {key: {\'energy\': val[\'energy\'], \'data\': broadC(val[\'data\'], sigma_eps)} for key, val in eps_m1.items() if isinstance(val, dict)}\n    eps_m1_spl = splineEPS(eps_m1_brd, energy)\n    eps_m1_spl[0].update(eps_m1_num)\n    eps_m1_spl[1].update(eps_m1_num)\n\n    eps_m2_num = {key: val for key, val in eps_m2.items() if not isinstance(val, dict)}\n    eps_m2_brd = {key: {\'energy\': val[\'energy\'], \'data\': broadC(val[\'data\'], sigma_eps)} for key, val in eps_m2.items() if isinstance(val, dict)}\n    eps_m2_spl = splineEPS(eps_m2_brd, energy)\n    eps_m2_spl[0].update(eps_m2_num)\n    eps_m2_spl[1].update(eps_m2_num)\n    \n    eps_m3_num = {key: val for key, val in eps_m3.items() if not isinstance(val, dict)}\n    eps_m3_brd = {key: {\'energy\': val[\'energy\'], \'data\': broadC(val[\'data\'], sigma_eps)} for key, val in eps_m3.items() if isinstance(val, dict)}\n    eps_m3_spl = splineEPS(eps_m3_brd, energy)\n    eps_m3_spl[0].update(eps_m3_num)\n    eps_m3_spl[1].update(eps_m3_num)\n\n    if mode == \'3-layer\':\n        eps1w = {\'M1\': avgEPS(eps_m1_spl[0]),\n                 \'M2\': avgEPS(eps_m2_spl[0]),\n                 \'M3\': avgEPS(eps_m3_spl[0])}\n        eps2w = {\'M1\': avgEPS(eps_m1_spl[1]),\n                 \'M2\': avgEPS(eps_m2_spl[1]),\n                 \'M3\': avgEPS(eps_m3_spl[1])}\n    elif mode == \'fresnel\' or mode == \'2-layer\':\n        ## Fresnel reflection model, see PRB 93, 235304 (2016) and references therein.\n        thick = 0\n        eps1w = {\'M1\' : avgEPS(eps_m1_spl[0]),\n                 \'M2\' : avgEPS(eps_m3_spl[0]),\n                 \'M3\' : avgEPS(eps_m3_spl[0])}\n        eps2w = {\'M1\' : avgEPS(eps_m1_spl[1]),\n                 \'M2\' : avgEPS(eps_m1_spl[1]),\n                 \'M3\' : avgEPS(eps_m3_spl[1])}\n\n    chi2_num = {key: val for key, val in chi2.items() if not isinstance(val, dict)}\n    chi2_spl = {key: splineC(broadC(val[\'data\'], sigma_chi), val[\'energy\']) for key, val in chi2.items() if isinstance(val, dict)}\n    chi2_new = {key: val[0](energy) + 1j*val[1](energy) for key, val in chi2_spl.items()}\n    chi2_new.update(chi2_num)\n    chi2_rot = rotate(chi2_new, np.radians(gamma))\n\n    m2tocm2 = 1e4 # Convert from m^2 to cm^2\n    prefactor = m2tocm2 * ((energy/constants.value(""Planck constant over 2 pi in eV s""))**2)/\\\n                          (2 * constants.epsilon_0 * constants.c**3 * np.cos(np.radians(theta))**2)\n    dakkar = {\'energy\': energy,\n              \'phi\': phi,\n              \'pp\': broad(prefactor * np.absolute(1/np.sqrt(eps1w[\'M2\']) * rad_pp(energy, eps1w, eps2w, chi2_rot, np.radians(theta), np.radians(phi), thick, mref))**2, sigma_out),\n              \'ps\': broad(prefactor * np.absolute(1/np.sqrt(eps1w[\'M2\']) * rad_ps(energy, eps1w, eps2w, chi2_rot, np.radians(theta), np.radians(phi), thick, mref))**2, sigma_out),\n              \'sp\': broad(prefactor * np.absolute(1/np.sqrt(eps1w[\'M2\']) * rad_sp(energy, eps1w, eps2w, chi2_rot, np.radians(theta), np.radians(phi), thick, mref))**2, sigma_out),\n              \'ss\': broad(prefactor * np.absolute(1/np.sqrt(eps1w[\'M2\']) * rad_ss(energy, eps1w, eps2w, chi2_rot, np.radians(theta), np.radians(phi), thick, mref))**2, sigma_out)}\n    return dakkar\n'"
tests/self_test.py,21,"b'#!/usr/bin/env python\n""""""\nA test script that tests relevant functions and finally compares the numerical\naccuracy of the final calculation.\n""""""\n\nimport numpy as np\n\ndef read_eps(in_file):\n    \'\'\' Reads epsilon file, returns a complex numpy array \'\'\'\n    data = np.loadtxt(in_file, unpack=True, skiprows=1)\n    epsa = data[1] + (1j * data[2]) # complex average\n    return epsa\n\ndef read_shg(infile):\n    \'\'\' Reads chi2 file, returns a complex numpy array of the same length as our energy array \'\'\'\n    data = np.loadtxt(infile, unpack=True, skiprows=1)\n    comp = data[1] + (1j * data[2])\n    chi2 = comp[:100]\n    return chi2\n\ndef test_epsilon():\n    \'\'\' Creates and tests the epsilon arrays, then returns dictionary with appropriate values \'\'\'\n    epsl = read_eps(\'tests/data/SiH1x1-epsilon\') # Epsilon from chi1, layered, normalized\n    epsb = read_eps(\'tests/data/SiBulk-epsilon\') # Epsilon from chi1, bulk\n    assert epsl.all()\n    assert epsb.all()\n    eps = {\'v1w\': 1, \'v2w\': 1,\n           \'b1w\': epsb[:100], \'b2w\': epsb[1::2][:100],\n           \'l1w\': epsl[:100], \'l2w\': epsl[1::2][:100]}\n    return eps\n\ndef test_chi2():\n    \'\'\' Creates and tests the chi2 array, then returns dictionary with appropriate components \'\'\'\n    xxx = read_shg(\'tests/data/SiH1x1-chi2-xxx\')\n    assert xxx.all()\n    chi2 = {\'xxx\': xxx, \'xyy\': -1 * xxx, \'yxy\': -1 * xxx}\n    return chi2\n\ndef test_wvecs():\n    \'\'\' Creates a dictionary with the wave vectors, tests every value, then returns it \'\'\'\n    vecs = {\'v1w\': np.sqrt(EPS[\'v1w\'] - (np.sin(1.1344640137963142)**2)),\n            \'v2w\': np.sqrt(EPS[\'v2w\'] - (np.sin(1.1344640137963142)**2)),\n            \'b1w\': np.sqrt(EPS[\'b1w\'] - (np.sin(1.1344640137963142)**2)),\n            \'b2w\': np.sqrt(EPS[\'b2w\'] - (np.sin(1.1344640137963142)**2)),\n            \'l1w\': np.sqrt(EPS[\'l1w\'] - (np.sin(1.1344640137963142)**2)),\n            \'l2w\': np.sqrt(EPS[\'l2w\'] - (np.sin(1.1344640137963142)**2))}\n    for value in vecs.values():\n        assert value.all()\n    return vecs\n\ndef freflc(pol, veci, vecj, epsi, epsj):\n    \'\'\' Reflection Fresnel factors \'\'\'\n    if pol == ""p"":\n        factor = ((veci * epsj) - (vecj * epsi))/((veci * epsj) + (vecj * epsi))\n    elif pol == ""s"":\n        factor = (veci - vecj)/(veci + vecj)\n    return factor\n\ndef ftrans(pol, veci, vecj, epsi, epsj):\n    \'\'\' Transmission Fresnel factors \'\'\'\n    if pol == ""p"":\n        factor = (2 * veci * np.sqrt(epsi * epsj))/(veci * epsj + vecj * epsi)\n    elif pol == ""s"":\n        factor = (2 * veci)/(veci + vecj)\n    return factor\n\ndef test_fresnel():\n    \'\'\' Creates a dictionary with the fresnel factors, tests every value, then returns it \'\'\'\n    fresn = {\'tvls\': ftrans(""s"", WVECS[\'v1w\'], WVECS[\'l1w\'], EPS[\'v1w\'], EPS[\'l1w\']),\n             \'Tvls\': ftrans(""s"", WVECS[\'v2w\'], WVECS[\'l2w\'], EPS[\'v2w\'], EPS[\'l2w\']),\n             \'rvls\': freflc(""s"", WVECS[\'v1w\'], WVECS[\'l1w\'], EPS[\'v1w\'], EPS[\'l1w\']),\n             \'rlbs\': freflc(""s"", WVECS[\'l1w\'], WVECS[\'b1w\'], EPS[\'l1w\'], EPS[\'b1w\']),\n             \'Rvls\': freflc(""s"", WVECS[\'v2w\'], WVECS[\'l2w\'], EPS[\'v2w\'], EPS[\'l2w\']),\n             \'Rlbs\': freflc(""s"", WVECS[\'l2w\'], WVECS[\'b2w\'], EPS[\'l2w\'], EPS[\'b2w\'])}\n    for value in fresn.values():\n        assert value.all()\n    return fresn\n\ndef test_multiref():\n    \'\'\'\n    Calculates the different elements for the multiple reflections framework,\n    then creates a dictionary and tests each value, and returns it\n    \'\'\'\n    varphi = 4 * np.pi * ((ONEE * 10 * 1e-9)/(4.135667662e-15 * 299792458.0)) * WVECS[\'l1w\']\n    delta = 8 * np.pi * ((ONEE * 10 * 1e-9)/(4.135667662e-15 * 299792458.0)) * WVECS[\'l2w\']\n    multi = {\'s2w\': (1 + ((FRESN[\'Rlbs\'] * np.exp(1j * delta/2))/(1 + (FRESN[\'Rvls\'] * FRESN[\'Rlbs\'] * np.exp(1j * delta))) * np.sin(delta/2)/(delta/2))),\n             \'s1w\': (1 + ((FRESN[\'rlbs\'] * np.exp(1j * varphi))/(1 + (FRESN[\'rvls\'] * FRESN[\'rlbs\'] * np.exp(1j * varphi)))))}\n    for value in multi.values():\n        assert value.all()\n    return multi\n\ndef test_shgyield():\n    \'\'\'\n    Calculates the reflectance, multiplies everything out, then tests against the\n    reference data to verify numerical accuracy\n    \'\'\'\n    multiref = test_multiref()\n    chi2 = test_chi2()\n    gamma = FRESN[\'Tvls\'] * multiref[\'s2w\'] * (FRESN[\'tvls\'] * multiref[\'s1w\'])**2 # s-in, S-out\n    factor = - (np.sin(0.52359877559829882)**3 * chi2[\'xxx\']) \\\n             - (np.sin(0.52359877559829882) * np.cos(0.52359877559829882)**2 * chi2[\'xyy\']) \\\n             - (2 * np.sin(0.52359877559829882) * np.cos(0.52359877559829882)**2 * chi2[\'yxy\'])\n    prefactor = (2 * 8.854187817620389e-12 * 6.582119514e-16**2 * \\\n                 299792458.0**3 * np.cos(1.1344640137963142)**2)**-1\n    rss = 1e20 * 1e4 * prefactor * (ONEE ** 2) * \\\n          np.absolute((1/np.sqrt(EPS[\'l1w\'])) * gamma * factor)**2\n    np.testing.assert_allclose(rss, REFERENCE, rtol=1e-06, atol=1e-12)\n\n\nONEE = np.linspace(0.01, float(100)/100, 100) # 1w energy array, 0.01-10 eV\nEPS = test_epsilon() # Creates the dictionary with the epsilons\nWVECS = test_wvecs() # Creates the dictionary with the wave vectors\nFRESN = test_fresnel() # Creates the dictionary with the fresnel factors\nREFERENCE = np.array( # An array with valid reference data, for numerical comparison\n    [1.032403505838488195e-11, 4.550832431431746097e-11, 1.325273386471492838e-10,\n     3.333508163754209330e-10, 7.554747698066963989e-10, 1.556695234237770624e-09,\n     2.941988999332841802e-09, 5.157168742134966043e-09, 8.484673625861601399e-09,\n     1.324308967483312284e-08, 1.979021478650005457e-08, 2.852345885277600976e-08,\n     3.988427708072623743e-08, 5.435800004817903165e-08, 7.247274260381388879e-08,\n     9.480304677776567662e-08, 1.219680461564326177e-07, 1.546347511097495607e-07,\n     1.935193991492270539e-07, 2.393815220940141246e-07, 2.930379257226721779e-07,\n     3.553525295537086449e-07, 4.272414482187805282e-07, 5.096801600445347622e-07,\n     6.036935338622235096e-07, 7.103737319066513703e-07, 8.308602252547417564e-07,\n     9.663698498429709728e-07, 1.118171168385683709e-06, 1.287595691327597088e-06,\n     1.476063200502429092e-06, 1.685052877003324629e-06, 1.916095668833173497e-06,\n     2.170856280534693416e-06, 2.451008203944823028e-06, 2.758378163507136639e-06,\n     3.094825349682943973e-06, 3.462323803082928682e-06, 3.862946150516640773e-06,\n     4.298846852052466438e-06, 4.772285811578160461e-06, 5.285649321952998811e-06,\n     5.841420303006999191e-06, 6.442204926764959899e-06, 7.090755403550167435e-06,\n     7.789894907397299111e-06, 8.542631623870533243e-06, 9.352098674582466289e-06,\n     1.022155410507798585e-05, 1.115449176750408030e-05, 1.215448941129900609e-05,\n     1.322534376754085624e-05, 1.437106807222101180e-05, 1.559573077643159491e-05,\n     1.690374158915691161e-05, 1.829969652571109294e-05, 1.978835559189621050e-05,\n     2.137487441414569035e-05, 2.306441983598689317e-05, 2.486263870201632124e-05,\n     2.677539099976400971e-05, 2.880877329701041957e-05, 3.096933230165414434e-05,\n     3.326399829620583587e-05, 3.569962855327095321e-05, 3.828395323839731406e-05,\n     4.102498470762885158e-05, 4.393083527062365072e-05, 4.701161749951630371e-05,\n     5.027419661173465138e-05, 5.373103924320059218e-05, 5.739117364624867938e-05,\n     6.126615955857774140e-05, 6.536727771894309744e-05, 6.970718660051250948e-05,\n     7.429824005237595263e-05, 7.915562025273016871e-05, 8.429196764942422141e-05,\n     8.972587406413663324e-05, 9.547232530757746244e-05, 1.015486229194248068e-04,\n     1.079739761580187610e-04, 1.147685360342658666e-04, 1.219533520956576591e-04,\n     1.295520039853262383e-04, 1.375889533546590629e-04, 1.460889787483928806e-04,\n     1.550813912972550431e-04, 1.645933039979432340e-04, 1.746610020884219920e-04,\n     1.853160275468189509e-04, 1.965975648356654512e-04, 2.085467839250398914e-04,\n     2.212026799999379642e-04, 2.346155505875994411e-04, 2.488391475834370015e-04,\n     2.639239115208671417e-04, 2.799332689218986974e-04, 2.969349401098667443e-04,\n     3.150020689590089578e-04])\n'"
