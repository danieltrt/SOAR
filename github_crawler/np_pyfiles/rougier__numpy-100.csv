file_path,api_count,code
generators.py,0,"b'import os\nimport nbformat as nbf\nimport mdutils\n\n\ndef ktx_to_dict(input_file, keystarter=\'<\'):\n    """""" parsing keyed text to a python dictionary. """"""\n    answer = dict()\n\n    with open(input_file, \'r+\', encoding=\'utf-8\') as f:\n        lines = f.readlines()\n\n    k, val = \'\', \'\'\n    for line in lines:\n        if line.startswith(keystarter):\n            k = line.replace(keystarter, \'\').strip()\n            val = \'\'\n        else:\n            val += line\n\n        if k:\n            answer.update({k: val.strip()})\n\n    return answer\n\n\ndef dict_to_ktx(input_dict, output_file, keystarter=\'<\'):\n    """""" Store a python dictionary to a keyed text""""""\n    with open(output_file, \'w+\') as f:\n        for k, val in input_dict.items():\n            f.write(f\'{keystarter} {k}\\n\')\n            f.write(f\'{val}\\n\\n\')\n\n\nHEADERS = ktx_to_dict(os.path.join(\'source\', \'headers.ktx\'))\nQHA = ktx_to_dict(os.path.join(\'source\', \'exercises100.ktx\'))\n\n\ndef create_jupyter_notebook(destination_filename=\'100_Numpy_exercises.ipynb\'):\n    """""" Programmatically create jupyter notebook with the questions (and hints and solutions if required)\n    saved under source files """"""\n\n    # Create cells sequence\n    nb = nbf.v4.new_notebook()\n\n    nb[\'cells\'] = []\n\n    # - Add header:\n    nb[\'cells\'].append(nbf.v4.new_markdown_cell(HEADERS[""header""]))\n    nb[\'cells\'].append(nbf.v4.new_markdown_cell(HEADERS[""sub_header""]))\n    nb[\'cells\'].append(nbf.v4.new_markdown_cell(HEADERS[""jupyter_instruction""]))\n\n    # - Add initialisation\n    nb[\'cells\'].append(nbf.v4.new_code_cell(\'%run initialise.py\'))\n\n    # - Add questions and empty spaces for answers\n    for n in range(1, 101):\n        nb[\'cells\'].append(nbf.v4.new_markdown_cell(f\'#### {n}. \' + QHA[f\'q{n}\']))\n        nb[\'cells\'].append(nbf.v4.new_code_cell(""""))\n\n    # Delete file if one with the same name is found\n    if os.path.exists(destination_filename):\n        os.remove(destination_filename)\n\n    # Write sequence to file\n    nbf.write(nb, destination_filename)\n\n\ndef create_jupyter_notebook_random_question(destination_filename=\'100_Numpy_random.ipynb\'):\n    """""" Programmatically create jupyter notebook with the questions (and hints and solutions if required)\n    saved under source files """"""\n\n    # Create cells sequence\n    nb = nbf.v4.new_notebook()\n\n    nb[\'cells\'] = []\n\n    # - Add header:\n    nb[\'cells\'].append(nbf.v4.new_markdown_cell(HEADERS[""header""]))\n    nb[\'cells\'].append(nbf.v4.new_markdown_cell(HEADERS[""sub_header""]))\n    nb[\'cells\'].append(nbf.v4.new_markdown_cell(HEADERS[""jupyter_instruction_rand""]))\n\n    # - Add initialisation\n    nb[\'cells\'].append(nbf.v4.new_code_cell(\'%run initialise.py\'))\n    nb[\'cells\'].append(nbf.v4.new_code_cell(""pick()""))\n\n    # Delete file if one with the same name is found\n    if os.path.exists(destination_filename):\n        os.remove(destination_filename)\n\n    # Write sequence to file\n    nbf.write(nb, destination_filename)\n\n\ndef create_markdown(destination_filename=\'100_Numpy_exercises\', with_hints=False, with_solutions=False):\n    # Create file name\n    if with_hints:\n        destination_filename += \'_with_hints\'\n    if with_solutions:\n        destination_filename += \'_with_solutions\'\n\n    # Initialise file\n    mdfile = mdutils.MdUtils(file_name=destination_filename)\n\n    # Add headers\n    mdfile.write(HEADERS[""header""] + \'\\n\')\n    mdfile.write(HEADERS[""sub_header""] + \'\\n\')\n\n    # Add questions (and hint or answers if required)\n    for n in range(1, 101):\n        mdfile.new_header(title=f""{n}. {QHA[f\'q{n}\']}"", level=4)\n        if with_hints:\n            mdfile.write(f""`{QHA[f\'h{n}\']}`"")\n        if with_solutions:\n            mdfile.insert_code(QHA[f\'a{n}\'], language=\'python\')\n\n    # Delete file if one with the same name is found\n    if os.path.exists(destination_filename):\n        os.remove(destination_filename)\n\n    # Write sequence to file\n    mdfile.create_md_file()\n\n\ndef create_rst(destination_filename, with_ints=False, with_answers=False):\n    # TODO: use rstdoc python library.\n    #  also see possible integrations with https://github.com/rougier/numpy-100/pull/38\n    pass\n\n\nif __name__ == \'__main__\':\n    create_jupyter_notebook()\n    create_jupyter_notebook_random_question()\n    create_markdown()\n    create_markdown(with_hints=False, with_solutions=True)\n    create_markdown(with_hints=True, with_solutions=False)\n    create_markdown(with_hints=True, with_solutions=True)\n'"
initialise.py,1,"b""import numpy as np\n\nimport generators as ge\n\n\ndef question(n):\n    print(f'{n}. ' + ge.QHA[f'q{n}'])\n\n\ndef hint(n):\n    print(ge.QHA[f'h{n}'])\n\n\ndef answer(n):\n    print(ge.QHA[f'a{n}'])\n\n\ndef pick():\n    n = np.random.randint(1, 100)\n    question(n)\n"""
