file_path,api_count,code
build_to_doc.py,0,"b'# script for prepping docs/ from new sphinx build\n# docs/ -> docs_backup/\n# _build/ -> docs/\n# ensures nojekyll and CNAME are in place\n\nfrom pathlib import Path\n\nfrom plymi import build_to_doc\nbuild_to_doc(Path("".""))\n\n'"
setup.py,0,"b'from setuptools import find_packages, setup\n\nDISTNAME = ""plymi""\nLICENSE = ""MIT""\nAUTHOR = ""Ryan Soklaski""\nAUTHOR_EMAIL = ""ryan.soklaski@gmail.com""\nURL = ""https://github.com/rsokl/Learning_Python""\nCLASSIFIERS = [\n    ""Development Status :: 5 - Production/Stable"",\n    ""License :: OSI Approved :: MIT License"",\n    ""Operating System :: OS Independent"",\n    ""Intended Audience :: Science/Research"",\n    ""Intended Audience :: Education"",\n    ""Programming Language :: Python"",\n    ""Programming Language :: Python :: 3"",\n    ""Topic :: Scientific/Engineering"",\n]\n\nINSTALL_REQUIRES = []\nDESCRIPTION = ""Tooling for upgrading PLYMI source material for jupytext""\n\n\nsetup(\n    name=DISTNAME,\n    package_dir={"""": ""src""},\n    packages=find_packages(\n        where=""src"",\n        exclude=[\n            ""tests"",\n            ""tests.*"",\n            ""Python"",\n            ""Python.*"",\n            ""docs"",\n            ""docs.*"",\n            ""docs_backup"",\n            ""docs_backup.*"",\n        ],\n    ),\n    version=""1.0"",\n    license=LICENSE,\n    author=AUTHOR,\n    author_email=AUTHOR_EMAIL,\n    classifiers=CLASSIFIERS,\n    description=DESCRIPTION,\n    install_requires=INSTALL_REQUIRES,\n    url=URL,\n    python_requires="">=3.6"",\n)\n'"
Python/conf.py,0,"b'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n#\n# BFundamentals of Python documentation build configuration file, created by\n# sphinx-quickstart on Sat Jan  6 13:21:30 2018.\n#\n# This file is execfile()d with the current directory set to its\n# containing dir.\n#\n# Note that not all possible configuration values are present in this\n# autogenerated file.\n#\n# All configuration values have a default; values that are commented out\n# serve to show the default.\n\n# If extensions (or modules to document with autodoc) are in another directory,\n# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\n#\n# import os\n# import sys\n# sys.path.insert(0, os.path.abspath(\'.\'))\n\n\n# -- General configuration ------------------------------------------------\n\n# If your documentation needs a minimal Sphinx version, state it here.\n#\n# needs_sphinx = \'1.0\'\n\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named \'sphinx.ext.*\') or your custom\n# ones.\nextensions = [\n    ""sphinx.ext.intersphinx"",\n    ""nbsphinx"",\n    ""sphinx.ext.todo"",\n    ""sphinx.ext.mathjax"",\n    ""sphinx.ext.githubpages"",\n]\n\nnbsphinx_custom_formats = {\n    \'.md\': [\'jupytext.reads\', {\'fmt\': \'md\'}],\n}\n\nnbsphinx_allow_errors = False\n\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = [""_templates""]\n\n# The suffix(es) of source filenames.\n# You can specify multiple suffix as a list of string:\n#\n# source_suffix = [\'.rst\', \'.md\']\nsource_suffix = "".rst""\n\n# The master toctree document.\nmaster_doc = ""index""\n\n# General information about the project.\nproject = ""Python Like You Mean It""\ncopyright = ""2019, Ryan Soklaski""\nauthor = ""Ryan Soklaski""\nhtml_title = ""Python Like You Mean It""\n\n# The version info for the project you\'re documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = ""1.4""\n# The full version, including alpha/beta/rc tags.\nrelease = ""1.4.1""\n\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#\n# This is also used if you do content translation via gettext catalogs.\n# Usually you set ""language"" from the command line for these cases.\nlanguage = None\n\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This patterns also effect to html_static_path and html_extra_path\nexclude_patterns = [""_build"", ""Thumbs.db"", "".DS_Store"", ""**.ipynb_checkpoints""]\n\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = ""default""\n\n# If true, `todo` and `todoList` produce output, else they produce nothing.\ntodo_include_todos = True\n\n\n# -- Options for HTML output ----------------------------------------------\n\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\nhtml_theme = ""sphinx_rtd_theme""\n\n\ndef setup(app):\n    app.add_css_file(""my_theme.css"")\n    app.add_js_file(""https://www.googletagmanager.com/gtag/js?id=UA-115029372-1"")\n    app.add_js_file(""gtag.js"")\n\n\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#\n# html_theme_options = {}\n\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named ""default.css"" will overwrite the builtin ""default.css"".\nhtml_static_path = [""_static""]\n\n# Custom sidebar templates, must be a dictionary that maps document names\n# to template names.\n#\n# This is required for the alabaster theme\n# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars\nhtml_sidebars = {\n    ""**"": [\n        ""about.html"",\n        ""navigation.html"",\n        ""relations.html"",  # needs \'show_related\': True theme option to display\n        ""searchbox.html"",\n        ""donate.html"",\n    ]\n}\n\n\n# -- Options for HTMLHelp output ------------------------------------------\n\n# Output file base name for HTML help builder.\nhtmlhelp_basename = ""BPLYMI""\n\n\n# -- Options for LaTeX output ---------------------------------------------\n\nlatex_elements = {\n    # The paper size (\'letterpaper\' or \'a4paper\').\n    #\n    # \'papersize\': \'letterpaper\',\n    # The font size (\'10pt\', \'11pt\' or \'12pt\').\n    #\n    # \'pointsize\': \'10pt\',\n    # Additional stuff for the LaTeX preamble.\n    #\n    # \'preamble\': \'\',\n    # Latex figure (float) alignment\n    #\n    # \'figure_align\': \'htbp\',\n}\n\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title,\n#  author, documentclass [howto, manual, or own class]).\nlatex_documents = [\n    (master_doc, ""BPLYMI.tex"", ""BPython Like You Mean It"", ""Ryan Soklaski"", ""manual"")\n]\n\n\n# -- Options for manual page output ---------------------------------------\n\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    (master_doc, ""bfundamentalsofpython"", ""BPython Like You Mean It"", [author], 1)\n]\n\n\n# -- Options for Texinfo output -------------------------------------------\n\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [\n    (\n        master_doc,\n        ""BPLYMI"",\n        ""BPython Like You Mean It"",\n        author,\n        ""BPLYMI"",\n        ""One line description of project."",\n        ""Miscellaneous"",\n    )\n]\n\n\n# Example configuration for intersphinx: refer to the Python standard library.\nintersphinx_mapping = {""https://docs.python.org/"": None}\n'"
numpy_latex/setup.py,0,"b'from setuptools import setup, find_packages\n\n\ndef do_setup():\n    setup(name=\'numpy_latex\',\n          version=""0.0"",\n          author=\'chebee7i\',\n          platforms=[\'Windows\', \'Linux\', \'Mac OS-X\', \'Unix\'],\n          packages=find_packages())\n\nif __name__ == ""__main__"":\n    do_setup()'"
numpy_latex/numpy_latex/__init__.py,10,"b'# This is free and unencumbered software released into the public domain.\n# See UNLICENSE.\n\nimport numpy as np\nimport numpy.core.arrayprint as arrayprint\nimport contextlib\n\n#\n# cc-wiki\n# http://stackoverflow.com/questions/2891790/pretty-printing-of-numpy-array\n#\n@contextlib.contextmanager\ndef printoptions(strip_zeros=True, **kwargs):\n    origcall = arrayprint.FloatFormat.__call__\n    def __call__(self, x, strip_zeros=strip_zeros):\n        return origcall.__call__(self, x, strip_zeros)\n    arrayprint.FloatFormat.__call__ = __call__\n    original = np.get_printoptions()\n    np.set_printoptions(**kwargs)\n    yield\n    np.set_printoptions(**original)\n    arrayprint.FloatFormat.__call__ = origcall\n\ndef to_latex(a, decimals=3, tab=\'  \'):\n    r""""""\n    Convert an array-like object into a LaTeX array.\n    The elements of each column are aligned on the decimal, if present.\n    Spacing is automatically adjusted depending on if `a` contains negative\n    numbers or not. For float data, trailing zeros are included so that\n    array output is uniform.\n    Parameters\n    ----------\n    a : array-like\n        A list, tuple, NumPy array, etc. The elements are written into a\n        LaTeX array environment.\n    decimals : int\n        The number of decimal places to round to before writing to LaTeX.\n    tab : str\n        The tab character to use for indentation within LaTeX.\n    Examples\n    --------\n    >>> x = [1,2,-3]\n    >>> print to_latex(x)\n    \\newcolumntype{X}{D{.}{.}{2,0}}\n    \\begin{array}{*{3}{X}}\n      1 & 2 & -3\n    \\end{array}\n    >>> import numpy as np\n    >>> np.random.seed(0)\n    >>> y = np.random.rand(12).reshape(4,3) - 0.5\n    >>> print to_latex(y, decimals=2)\n    \\begin{array}{*{3}{X}}\n      0.05 & 0.22 & 0.10 \\\\\n      0.04 & -0.08 & 0.15 \\\\\n      -0.06 & 0.39 & 0.46 \\\\\n      -0.12 & 0.29 & 0.03\n    \\end{array}\n    Notes\n    -----\n    The resultant array environment should be used within LaTeX\'s mathmode,\n    and the following should appear in the preamble:\n        \\usepackage{array}\n        \\usepackage{dcolumn}\n    """"""\n    array = np.atleast_2d(a)\n    array = np.around(array, decimals)\n\n    # Determine the number of digits left of the decimal.\n    # Grab integral part, convert to string, and get maximum length.\n    # This does not handle negative signs appropriately since -0.5 goes to 0.\n    # So we make sure it never counts a negative sign by taking the abs().\n    integral = np.abs(np.trunc(array.flat).astype(int))\n    left_digits = max(map(len, map(str, integral)))\n\n    # Adjust for negative signs.\n    if np.any(array < 0):\n        left_digits += 1\n\n    # Set decimal digits to 0 if data are not floats.\n    try:\n        np.finfo(array.dtype)\n    except ValueError:\n        decimals = 0\n\n    # Align the elements on the decimal, making room for largest element.\n    coltype = r""\\newcolumntype{{X}}{{D{{.}}{{.}}{{{0},{1}}}}}""\n    coltype = coltype.format(left_digits, decimals)\n\n    # Specify that we want all columns to have the same column type.\n    nCols = array.shape[1]\n    cols = r""*{{{nCols}}}{{X}}"".format(nCols=nCols)\n\n    # Build the lines in the array.\n    #\n    # In general, we could just use the rounded array and map(str, row),\n    # but NumPy strips trailing zeros on floats (undesirably). So we make\n    # use of the context manager to prevent that.\n    options = {\n        \'precision\': decimals,\n        \'suppress\': True,\n        \'strip_zeros\': False,\n        \'threshold\': nCols+1,\n    }\n    with printoptions(**options):\n        lines = []\n        for row in array:\n            # Strip [ and ], remove newlines, and split on whitespace\n            elements = row.__str__()[1:-1].replace(\'\\n\',\'\').split()\n            line = [tab, \' & \'.join(elements), r\' \\\\\']\n            lines.append(\'\'.join(line))\n\n    # Remove the \\\\ on the last line.\n    lines[-1] = lines[-1][:-3]\n\n    # Create the LaTeX code\n    subs = {\'coltype\': coltype, \'cols\': cols, \'lines\': \'\\n\'.join(lines)}\n    template = r""""""{coltype}\n\\begin{{array}}{{{cols}}}\n{lines}\n\\end{{array}}""""""\n\n    return template.format(**subs)'"
src/plymi/__init__.py,0,"b'""""""\nUtilities for accessing the PLYMI source material and making conversions using jupytext\n""""""\n\nimport shutil\nfrom pathlib import Path\nfrom typing import Callable, Dict, FrozenSet, List, Tuple, Union\n\nfrom jupytext.cli import jupytext\n\ntry:\n    from tqdm import tqdm\nexcept ImportError:\n    tqdm = lambda x: x\n\n\n__all__ = [\n    ""get_all_markdown_files"",\n    ""get_all_notebook_files"",\n    ""convert_all_ipynb_to_markdown"",\n    ""convert_all_markdown_to_ipynb"",\n    ""convert_src_to_html"",\n    ""build_to_doc"",\n]\n\nall_source_dirs = [\n    Path(""Module1_GettingStartedWithPython""),\n    Path(""Module2_EssentialsOfPython""),\n    Path(""Module2_EssentialsOfPython"") / ""Problems"",\n    Path(""Module3_IntroducingNumpy""),\n    Path(""Module3_IntroducingNumpy"") / ""Problems"",\n    Path(""Module4_OOP""),\n    Path(""Module5_OddsAndEnds""),\n]\n\n\n# The following are names of notebooks that exist natively as PLYMI\n# source material. It should be excluded from markdown conversion\nexcluded_notebook_names = {""Matplotlib.ipynb"", ""Approximating_pi.ipynb""}\n\n\ndef _get_jupytext_version():\n    import jupytext\n\n    return jupytext.__version__\n\n\ndef get_all_markdown_files(root) -> Dict[str, List[Path]]:\n    dirs = get_source_dirs_from_root(root)\n    return {str(d): sorted(d.glob(f""*.md"")) for d in dirs}\n\n\ndef get_all_notebook_files(root) -> Dict[str, List[Path]]:\n    dirs = get_source_dirs_from_root(root)\n    return {str(d): sorted(d.glob(f""*.ipynb"")) for d in dirs}\n\n\ndef get_source_dirs_from_root(root: Path) -> List[Path]:\n    if not isinstance(root, Path):\n        root = Path(root)\n\n    root /= ""Python""\n    assert root.is_dir()\n\n    dirs = [root / d for d in all_source_dirs]  # type: List[Path]\n\n    bad = [d for d in dirs if not d.is_dir()]\n    if bad:\n        raise AssertionError(\n            ""The following directories do not exist: ""\n            + (""\\n"".join((str(x) for x in bad)))\n        )\n    return dirs\n\n\ndef _convert_all(\n    *,\n    root: Union[str, Path],\n    file_getter: Callable[[Path], Dict[str, List[Path]]],\n    verbose,\n    destination_format: str,\n    excluded_file_names: FrozenSet[str] = frozenset(),\n):\n    assert destination_format in {""markdown"", ""notebook""}\n\n    print(f""Using jupytext version: {_get_jupytext_version()}"")\n\n    for dir, files in file_getter(root).items():\n        if verbose:\n            print(f""Processing directory: {dir}"")\n        for file in tqdm(files):\n            if file.name in excluded_file_names:\n                continue\n            jupytext([""--to"", destination_format, str(file)])\n\n\ndef test_ipynb_roundtrip_on_all(*, root: Union[str, Path], verbose=True):\n    print(f""Using jupytext version: {_get_jupytext_version()}"")\n\n    for dir_, files in get_all_notebook_files(\n        root\n    ).items():  # type: Tuple[str, List[Path]]\n        if verbose:\n            print(f""Processing directory: {dir_}"")\n        for file in tqdm(files):  # type: Path\n            if file.name in excluded_notebook_names:\n                continue\n            jupytext([""--to"", ""md"", ""--test"", str(file)])\n\n\ndef convert_all_markdown_to_ipynb(\n    root: Union[str, Path], verbose: bool = True, excluded_file_names=frozenset()\n):\n    assert all(name.endswith("".md"") for name in excluded_file_names)\n    return _convert_all(\n        root=root,\n        verbose=verbose,\n        file_getter=get_all_markdown_files,\n        destination_format=""notebook"",\n        excluded_file_names=excluded_file_names,\n    )\n\n\ndef convert_all_ipynb_to_markdown(\n    root: Union[str, Path],\n    verbose: bool = True,\n    excluded_file_names=frozenset(excluded_notebook_names),\n):\n    assert all(name.endswith("".ipynb"") for name in excluded_file_names)\n    return _convert_all(\n        root=root,\n        verbose=verbose,\n        file_getter=get_all_notebook_files,\n        destination_format=""markdown"",\n        excluded_file_names=excluded_file_names,\n    )\n\n\ndef _delete_all(\n    root: Path,\n    *,\n    file_getter: Callable[[Path], Dict[str, List[Path]]],\n    excluded_file_names: FrozenSet[str],\n    test: bool,\n):\n    import os\n\n    assert test in {True, False}\n\n    if test:\n        print(""Nothing will be deleted unless you pass `test=False`"")\n    for dir_, files in file_getter(root).items():\n        for file in files:\n            if file.name in excluded_file_names:\n                continue\n            if test:\n                print(repr(file) + "" will be deleted"")\n            else:\n                os.remove(file)\n\n\ndef delete_all_notebooks(\n    root, *, excluded_file_names=frozenset(excluded_notebook_names), test=True\n):\n    assert all(name.endswith("".ipynb"") for name in excluded_file_names)\n    return _delete_all(\n        root,\n        file_getter=get_all_notebook_files,\n        excluded_file_names=excluded_file_names,\n        test=test,\n    )\n\n\ndef delete_all_markdown(root, *, excluded_file_names=frozenset(), test=True):\n    assert all(name.endswith("".md"") for name in excluded_file_names)\n    return _delete_all(\n        root,\n        file_getter=get_all_markdown_files,\n        excluded_file_names=excluded_file_names,\n        test=test,\n    )\n\n\ndef build_to_doc(root: Union[str, Path]):\n    """"""\n    Copy all files from docs/ to docs_backup/\n    Copy all files from Python/_build/ to docs/\n\n    Checks for .nojekyll and CNAME files\n\n    Parameters\n    ----------\n    root : pathlib.Path\n        The path to the top-level directory containing the Python/ dir.""""""\n    if not isinstance(root, Path):\n        root = Path(root)\n\n    assert (root / ""docs"").is_dir()\n    assert (root / ""Python"" / ""_build"").is_dir()\n    shutil.copyfile(root / ""docs"" / ""CNAME"", root / ""Python"" / ""_build"" / ""CNAME"")\n\n    assert (root / ""Python"" / ""_build"" / "".nojekyll"").is_file()\n\n    if (root / ""docs_backup"").is_dir():\n        shutil.rmtree(root / ""docs_backup"")\n    shutil.move(root / ""docs"", root / ""docs_backup"")\n    shutil.copytree(root / ""Python"" / ""_build"", root / ""docs"")\n\n    assert (root / ""docs"" / "".nojekyll"").is_file()\n    assert (root / ""docs"" / ""CNAME"").is_file()\n    print(""Done. Make sure to commit the changes to `docs/` and `docs_backup/`"")\n\n\ndef convert_src_to_html(sphinx_project_root: Union[str, Path]):\n    """""" Runs::\n\n        python -m sphinx . _build -j4\n\n    in the specified directory\n\n    Parameters\n    ----------\n    sphinx_project_root : Union[str, Path]\n        The directory containing the sphinx conf.py file.\n        (E.g. Learning_Python/Python/, if you cloned the\n        PLYMI repo).\n        """"""\n    import subprocess\n    import os\n    wd = os.getcwd()\n    os.chdir(sphinx_project_root)\n\n    try:\n        subprocess.run([""python"", ""-m"", ""sphinx"", ""."", ""_build"", ""-j4""])\n    finally:\n        os.chdir(wd)\n'"
