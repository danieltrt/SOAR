file_path,api_count,code
src/combine-everything.py,1,"b'import pandas as pd\nimport numpy as np\nfrom pandas import DataFrame\n\n\ndef adjust_df(df: DataFrame, season: str) -> DataFrame:\n    """"""Adjust Club row values and all the other column names""""""\n    \n    df.columns = [\'Club\', \'Pos\', \'Pts\', \'GD\', \'Qualify\']\n    df[\'Club\'] = df[\'Club\'] + f\'_{season}\'\n    \n    return df\n\n\n\'\'\'Create new DataFrame for each season\'\'\'\n\ndf1: DataFrame = pd.read_csv(\'../data/data/group-stage-2014-15.csv\', encoding=\'utf-8\')\ndf1 = adjust_df(df1, \'2014-15\')\n\ndf2: DataFrame = pd.read_csv(\'../data/data/group-stage-2015-16.csv\', encoding=\'utf-8\')\ndf2 = adjust_df(df2, \'2015-16\')\n\ndf3: DataFrame = pd.read_csv(\'../data/data/group-stage-2016-17.csv\', encoding=\'utf-8\')\ndf3 = adjust_df(df3, \'2016-17\')\n\ndf4: DataFrame = pd.read_csv(\'../data/data/group-stage-2017-18.csv\', encoding=\'utf-8\')\ndf4 = adjust_df(df4, \'2017-18\')\n\ndf5: DataFrame = pd.read_csv(\'../data/data/group-stage-2018-19.csv\', encoding=\'utf-8\')\ndf5 = adjust_df(df5, \'2018-19\')\n\n\n\'\'\'Create new DataFrame to the results of all the seasons\'\'\'\n\ndf: DataFrame = pd.concat([df1, df2, df3, df4, df5])\ndf = df.set_index(\'Club\')\n\n\n\'\'\'Create new Dataframe to UCL Standings\'\'\'\n\nucl_standings: DataFrame = pd.read_csv(\'../data/data/uefa-standings.csv\', encoding=\'utf-8\')\ndf_standings = DataFrame(columns=[\'Club\', \'Standing\'])\nfor i in range(len(ucl_standings)):\n    df_standings = df_standings.append([\n        {\n            \'Club\': ucl_standings.iloc[i][\'Club\'] + \'_2014-15\',\n            \'Standing\': ucl_standings.iloc[i][\'Standing_2014-15\']\n        },\n        {\n            \'Club\': ucl_standings.iloc[i][\'Club\'] + \'_2015-16\',\n            \'Standing\': ucl_standings.iloc[i][\'Standing_2015-16\']\n        },\n        {\n            \'Club\': ucl_standings.iloc[i][\'Club\'] + \'_2016-17\',\n            \'Standing\': ucl_standings.iloc[i][\'Standing_2016-17\']\n        },\n        {\n            \'Club\': ucl_standings.iloc[i][\'Club\'] + \'_2017-18\',\n            \'Standing\': ucl_standings.iloc[i][\'Standing_2017-18\']\n        },\n        {\n            \'Club\': ucl_standings.iloc[i][\'Club\'] + \'_2018-19\',\n            \'Standing\': ucl_standings.iloc[i][\'Standing_2018-19\']\n        }\n    ])\ndf_standings.set_index(\'Club\', inplace=True)\n\n\n\'\'\'Sort both the Dataframes by Index (Club)\'\'\'\n\ndf.sort_index(inplace=True)\ndf_standings.sort_index(inplace=True)\n\n\n\'\'\'Add UCL Standing of all the teams to the Dataset\'\'\'\n\ndf[\'Standing\'] = df_standings[df.index == df_standings.index][\'Standing\']\ndf.sort_index(inplace=True)\n\n\n\'\'\'Remove data of all the teams which did not take part in the UCL\'\'\'\n\ndf.replace(-9999, np.NaN, inplace=True)\ndf.dropna(inplace=True)\n\n\n\'\'\'Store computed results into a CSV file\'\'\'\n\ndf.to_csv(\'../data/data/final-dataset.csv\', encoding=\'utf-8\')\n'"
src/group-stage-2014-15.py,2,"b'""""""UEFA Champions League Group Stage 2014-15\nData Pre-processor, extracts data from the HTML into CSVs, clean that dataset\n\n@author Shabd Saran\n""""""\n\nimport pandas as pd\nimport numpy as np\nfrom pandas import DataFrame\n\n\n# import the tables from HTML file\nwith open(\'../data/html/group-stage-2014-15.html\') as file:\n    tables: list = pd.read_html(file)\n\n\ndef clean_group_stage_df(df: DataFrame) -> DataFrame:\n    """"""remove unnecessary columns from the dataframe & add some useful ones""""""\n    \n    # only include necessary columns\n    df = df[[\'Pos\', \'Team[ vte ]\', \'GF\', \'GA\', \'Pts\']]\n    \n    # add Goal Difference\n    df[\'GD\'] = df[\'GF\'] - df[\'GA\']\n    df = df.drop([\'GA\', \'GF\'], axis=1)\n    \n    # add if the team qualify for the round-16\n    df[\'Qualify\'] = [1, 1, 0, 0]\n    \n    # convert group-stage points of each team into integers\n    pts: list = df[\'Pts\'].values\n    for i in range(4):\n        if type(pts[i]) == np.int64:\n            continue\n        if len(pts[i]) > 2:\n            pts[i] = int(pts[i][:-3])\n        else:\n            pts[i] = int(pts[i])\n    df = df.astype({\'Pts\': np.int64})\n    \n    # invert group stage positions, so that they will favour more to those\n    # having lower ranks (numerically) in real\n    df[\'Pos\'] = 4 - df[\'Pos\']\n    \n    return df\n\n\n# get all groups information\ngroup_a: DataFrame = clean_group_stage_df(tables[6])\ngroup_b: DataFrame = clean_group_stage_df(tables[19])\ngroup_c: DataFrame = clean_group_stage_df(tables[32])\ngroup_d: DataFrame = clean_group_stage_df(tables[45])\ngroup_e: DataFrame = clean_group_stage_df(tables[58])\ngroup_f: DataFrame = clean_group_stage_df(tables[71])\ngroup_g: DataFrame = clean_group_stage_df(tables[84])\ngroup_h: DataFrame = clean_group_stage_df(tables[97])\n\n# put all the teams into a single dataframe\nteams = group_a.append([group_b, group_c, group_d, group_e, group_f, \n                            group_g, group_h])\n\n# remove not interested teams\nteams = teams[teams[\'Team[ vte ]\'].isin([\'Real Madrid\', \'Barcelona\', \n                      \'Bayern Munich\', \'Atl\xc3\xa9tico Madrid\', \'Juventus\', \n                      \'Manchester City\', \'Paris Saint-Germain\', \'Liverpool\',\n                      \'Tottenham Hotspur\', \'Chelsea\', \'Borussia Dortmund\'])]\n\n# include teams who did not qualify for the champions league\nteams = teams.append([{\n            \'Team[ vte ]\': \'Tottenham Hotspur\',\n            \'Pos\': -9999,\n            \'Pts\': -9999,\n            \'GD\': -9999,\n            \'Qualify\': -9999\n        }], ignore_index=True)\n    \n# change name of all the columns\nteams.columns = [\'Pos_2014-15\', \'Club\', \'Pts_2014-15\', \'GD_2014-15\', \n                 \'Qualify_2014-15\']\n    \n# set team name as the index\nteams.set_index(\'Club\', inplace=True)\n\n# store the computed result in a CSV file\nteams.to_csv(\'../data/data/group-stage-2014-15.csv\')\n'"
src/group-stage-2015-16.py,2,"b'""""""UEFA Champions League Group Stage 2015-16\nData Pre-processor, extracts data from the HTML into CSVs, clean that dataset\n\n@author Shabd Saran\n""""""\n\nimport pandas as pd\nimport numpy as np\nfrom pandas import DataFrame\n\n\n# import the tables from HTML file\nwith open(\'../data/html/group-stage-2015-16.html\') as file:\n    tables: list = pd.read_html(file)\n\n\ndef clean_group_stage_df(df: DataFrame) -> DataFrame:\n    """"""remove unnecessary columns from the dataframe & add some useful ones""""""\n    \n    # only include necessary columns\n    df = df[[\'Pos\', \'Team[ vte ]\', \'GF\', \'GA\', \'Pts\']]\n    \n    # add Goal Difference\n    df[\'GD\'] = df[\'GF\'] - df[\'GA\']\n    df = df.drop([\'GA\', \'GF\'], axis=1)\n    \n    # add if the team qualify for the round-16\n    df[\'Qualify\'] = [1, 1, 0, 0]\n    \n    # convert group-stage points of each team into integers\n    pts: list = df[\'Pts\'].values\n    for i in range(4):\n        if type(pts[i]) == np.int64:\n            continue\n        if len(pts[i]) > 2:\n            pts[i] = int(pts[i][:-3])\n        else:\n            pts[i] = int(pts[i])\n    df = df.astype({\'Pts\': np.int64})\n    \n    # invert group stage positions, so that they will favour more to those\n    # having lower ranks (numerically) in real\n    df[\'Pos\'] = 4 - df[\'Pos\']\n    \n    return df\n\n\n# get all groups information\ngroup_a: DataFrame = clean_group_stage_df(tables[6])\ngroup_b: DataFrame = clean_group_stage_df(tables[19])\ngroup_c: DataFrame = clean_group_stage_df(tables[32])\ngroup_d: DataFrame = clean_group_stage_df(tables[45])\ngroup_e: DataFrame = clean_group_stage_df(tables[58])\ngroup_f: DataFrame = clean_group_stage_df(tables[71])\ngroup_g: DataFrame = clean_group_stage_df(tables[84])\ngroup_h: DataFrame = clean_group_stage_df(tables[97])\n\n# put all the teams into a single dataframe\nteams = group_a.append([group_b, group_c, group_d, group_e, group_f, \n                            group_g, group_h])\n\n# remove not interested teams\nteams = teams[teams[\'Team[ vte ]\'].isin([\'Real Madrid\', \'Barcelona\', \n                      \'Bayern Munich\', \'Atl\xc3\xa9tico Madrid\', \'Juventus\', \n                      \'Manchester City\', \'Paris Saint-Germain\', \'Liverpool\',\n                      \'Tottenham Hotspur\', \'Chelsea\', \'Borussia Dortmund\'])]\n\n# include teams who did not qualify for the champions league\nteams = teams.append(\n        [\n            {\n                \'Team[ vte ]\': \'Liverpool\',\n                \'Pos\': -9999,\n                \'Pts\': -9999,\n                \'GD\': -9999,\n                \'Qualify\': -9999\n            },\n            {\n                \'Team[ vte ]\': \'Tottenham Hotspur\',\n                \'Pos\': -9999,\n                \'Pts\': -9999,\n                \'GD\': -9999,\n                \'Qualify\': -9999\n            },\n            {\n                \'Team[ vte ]\': \'Borussia Dortmund\',\n                \'Pos\': -9999,\n                \'Pts\': -9999,\n                \'GD\': -9999,\n                \'Qualify\': -9999\n            }\n    ], \n    ignore_index=True)\n    \n# change name of all the columns\nteams.columns = [\'Pos_2015-16\', \'Club\', \'Pts_2015-16\', \'GD_2015-16\', \n                 \'Qualify_2015-16\']\n    \n# set team name as the index\nteams.set_index(\'Club\', inplace=True)\n\n# store the computed result in a CSV file\nteams.to_csv(\'../data/data/group-stage-2015-16.csv\')\n'"
src/group-stage-2016-17.py,2,"b'""""""UEFA Champions League Group Stage 2016-17\nData Pre-processor, extracts data from the HTML into CSVs, clean that dataset\n\n@author Shabd Saran\n""""""\n\nimport pandas as pd\nimport numpy as np\nfrom pandas import DataFrame\n\n\n# import the tables from HTML file\nwith open(\'../data/html/group-stage-2016-17.html\') as file:\n    tables: list = pd.read_html(file)\n\n\ndef clean_group_stage_df(df: DataFrame) -> DataFrame:\n    """"""remove unnecessary columns from the dataframe & add some useful ones""""""\n    \n    # only include necessary columns\n    df = df[[\'Pos\', \'Team[ vte ]\', \'GF\', \'GA\', \'Pts\']]\n    \n    # add Goal Difference\n    df[\'GD\'] = df[\'GF\'] - df[\'GA\']\n    df = df.drop([\'GA\', \'GF\'], axis=1)\n    \n    # add if the team qualify for the round-16\n    df[\'Qualify\'] = [1, 1, 0, 0]\n    \n    # convert group-stage points of each team into integers\n    pts: list = df[\'Pts\'].values\n    for i in range(4):\n        if type(pts[i]) == np.int64:\n            continue\n        if len(pts[i]) > 2:\n            pts[i] = int(pts[i][:-3])\n        else:\n            pts[i] = int(pts[i])\n    df = df.astype({\'Pts\': np.int64})\n    \n    # invert group stage positions, so that they will favour more to those\n    # having lower ranks (numerically) in real\n    df[\'Pos\'] = 4 - df[\'Pos\']\n    \n    return df\n\n\n# get all groups information\ngroup_a: DataFrame = clean_group_stage_df(tables[6])\ngroup_b: DataFrame = clean_group_stage_df(tables[19])\ngroup_c: DataFrame = clean_group_stage_df(tables[32])\ngroup_d: DataFrame = clean_group_stage_df(tables[45])\ngroup_e: DataFrame = clean_group_stage_df(tables[58])\ngroup_f: DataFrame = clean_group_stage_df(tables[71])\ngroup_g: DataFrame = clean_group_stage_df(tables[84])\ngroup_h: DataFrame = clean_group_stage_df(tables[97])\n\n# put all the teams into a single dataframe\nteams = group_a.append([group_b, group_c, group_d, group_e, group_f, \n                            group_g, group_h])\n\n# remove not interested teams\nteams = teams[teams[\'Team[ vte ]\'].isin([\'Real Madrid\', \'Barcelona\', \n                      \'Bayern Munich\', \'Atl\xc3\xa9tico Madrid\', \'Juventus\', \n                      \'Manchester City\', \'Paris Saint-Germain\', \'Liverpool\',\n                      \'Tottenham Hotspur\', \'Chelsea\', \'Borussia Dortmund\'])]\n\n# include teams who did not qualify for the champions league\nteams = teams.append(\n        [\n            {\n                \'Team[ vte ]\': \'Liverpool\',\n                \'Pos\': -9999,\n                \'Pts\': -9999,\n                \'GD\': -9999,\n                \'Qualify\': -9999\n            },\n            {\n                \'Team[ vte ]\': \'Chelsea\',\n                \'Pos\': -9999,\n                \'Pts\': -9999,\n                \'GD\': -9999,\n                \'Qualify\': -9999\n            }\n    ], \n    ignore_index=True)\n    \n# change name of all the columns\nteams.columns = [\'Pos_2016-17\', \'Club\', \'Pts_2016-17\', \'GD_2016-17\', \n                 \'Qualify_2016-17\']\n    \n# set team name as the index\nteams.set_index(\'Club\', inplace=True)\n\n# store the computed result in a CSV file\nteams.to_csv(\'../data/data/group-stage-2016-17.csv\')\n'"
src/group-stage-2017-18.py,2,"b'""""""UEFA Champions League Group Stage 2017-18\nData Pre-processor, extracts data from the HTML into CSVs, clean that dataset\n\n@author Shabd Saran\n""""""\n\nimport pandas as pd\nimport numpy as np\nfrom pandas import DataFrame\n\n\n# import the tables from HTML file\nwith open(\'../data/html/group-stage-2017-18.html\') as file:\n    tables: list = pd.read_html(file)\n\n\ndef clean_group_stage_df(df: DataFrame) -> DataFrame:\n    """"""remove unnecessary columns from the dataframe & add some useful ones""""""\n    \n    # only include necessary columns\n    df = df[[\'Pos\', \'Team[ vte ]\', \'GF\', \'GA\', \'Pts\']]\n    \n    # add Goal Difference\n    df[\'GD\'] = df[\'GF\'] - df[\'GA\']\n    df = df.drop([\'GA\', \'GF\'], axis=1)\n    \n    # add if the team qualify for the round-16\n    df[\'Qualify\'] = [1, 1, 0, 0]\n    \n    # convert group-stage points of each team into integers\n    pts: list = df[\'Pts\'].values\n    for i in range(4):\n        if type(pts[i]) == np.int64:\n            continue\n        if len(pts[i]) > 2:\n            pts[i] = int(pts[i][:-3])\n        else:\n            pts[i] = int(pts[i])\n    df = df.astype({\'Pts\': np.int64})\n    \n    # invert group stage positions, so that they will favour more to those\n    # having lower ranks (numerically) in real\n    df[\'Pos\'] = 4 - df[\'Pos\']\n    \n    return df\n\n\n# get all groups information\ngroup_a: DataFrame = clean_group_stage_df(tables[9])\ngroup_b: DataFrame = clean_group_stage_df(tables[22])\ngroup_c: DataFrame = clean_group_stage_df(tables[35])\ngroup_d: DataFrame = clean_group_stage_df(tables[48])\ngroup_e: DataFrame = clean_group_stage_df(tables[61])\ngroup_f: DataFrame = clean_group_stage_df(tables[74])\ngroup_g: DataFrame = clean_group_stage_df(tables[87])\ngroup_h: DataFrame = clean_group_stage_df(tables[100])\n\n# put all the teams into a single dataframe\nteams = group_a.append([group_b, group_c, group_d, group_e, group_f, \n                            group_g, group_h])\n\n# remove not interested teams\nteams = teams[teams[\'Team[ vte ]\'].isin([\'Real Madrid\', \'Barcelona\', \n                      \'Bayern Munich\', \'Atl\xc3\xa9tico Madrid\', \'Juventus\', \n                      \'Manchester City\', \'Paris Saint-Germain\', \'Liverpool\',\n                      \'Tottenham Hotspur\', \'Chelsea\', \'Borussia Dortmund\'])]\n\n# change name of all the columns\nteams.columns = [\'Pos_2017-18\', \'Club\', \'Pts_2017-18\', \'GD_2017-18\', \n                 \'Qualify_2017-18\']\n    \n# set team name as the index\nteams.set_index(\'Club\', inplace=True)\n\n# store the computed result in a CSV file\nteams.to_csv(\'../data/data/group-stage-2017-18.csv\')\n'"
src/group-stage-2018-19.py,2,"b'""""""UEFA Champions League Group Stage 2018-19\nData Pre-processor, extracts data from the HTML into CSVs, clean that dataset\n\n@author Shabd Saran\n""""""\n\nimport pandas as pd\nimport numpy as np\nfrom pandas import DataFrame\n\n\n# import the tables from HTML file\nwith open(\'../data/html/group-stage-2018-19.html\') as file:\n    tables: list = pd.read_html(file)\n\n\ndef clean_group_stage_df(df: DataFrame) -> DataFrame:\n    """"""remove unnecessary columns from the dataframe & add some useful ones""""""\n    \n    # only include necessary columns\n    df = df[[\'Pos\', \'Team[ vte ]\', \'GF\', \'GA\', \'Pts\']]\n    \n    # add Goal Difference\n    df[\'GD\'] = df[\'GF\'] - df[\'GA\']\n    df = df.drop([\'GA\', \'GF\'], axis=1)\n    \n    # add if the team qualify for the round-16\n    df[\'Qualify\'] = [1, 1, 0, 0]\n    \n    # convert group-stage points of each team into integers\n    pts: list = df[\'Pts\'].values\n    for i in range(4):\n        if type(pts[i]) == np.int64:\n            continue\n        if len(pts[i]) > 2:\n            pts[i] = int(pts[i][:-3])\n        else:\n            pts[i] = int(pts[i])\n    df = df.astype({\'Pts\': np.int64})\n    \n    # invert group stage positions, so that they will favour more to those\n    # having lower ranks (numerically) in real\n    df[\'Pos\'] = 4 - df[\'Pos\']\n    \n    return df\n\n\n# get all groups information\ngroup_a: DataFrame = clean_group_stage_df(tables[7])\ngroup_b: DataFrame = clean_group_stage_df(tables[20])\ngroup_c: DataFrame = clean_group_stage_df(tables[33])\ngroup_d: DataFrame = clean_group_stage_df(tables[46])\ngroup_e: DataFrame = clean_group_stage_df(tables[59])\ngroup_f: DataFrame = clean_group_stage_df(tables[72])\ngroup_g: DataFrame = clean_group_stage_df(tables[85])\ngroup_h: DataFrame = clean_group_stage_df(tables[98])\n\n# put all the teams into a single dataframe\nteams = group_a.append([group_b, group_c, group_d, group_e, group_f, \n                            group_g, group_h])\n\n# remove not interested teams\nteams = teams[teams[\'Team[ vte ]\'].isin([\'Real Madrid\', \'Barcelona\', \n                      \'Bayern Munich\', \'Atl\xc3\xa9tico Madrid\', \'Juventus\', \n                      \'Manchester City\', \'Paris Saint-Germain\', \'Liverpool\',\n                      \'Tottenham Hotspur\', \'Chelsea\', \'Borussia Dortmund\'])]\n\n# include teams who did not qualify for the champions league\nteams = teams.append([{\n            \'Team[ vte ]\': \'Chelsea\',\n            \'Pos\': -9999,\n            \'Pts\': -9999,\n            \'GD\': -9999,\n            \'Qualify\': -9999\n        }], ignore_index=True)\n\n# change name of all the columns\nteams.columns = [\'Pos_2018-19\', \'Club\', \'Pts_2018-19\', \'GD_2018-19\', \n                 \'Qualify_2018-19\']\n\n# set team name as the index\nteams.set_index(\'Club\', inplace=True)\n\n# store the computed result in a CSV file\nteams.to_csv(\'../data/data/group-stage-2018-19.csv\')\n'"
src/prediction.py,0,"b'import pandas as pd\nimport numpy as np\nfrom numpy import array\nfrom pandas import DataFrame\nfrom sklearn.ensemble import RandomForestClassifier\n\n\n\'\'\'Import the dataset\'\'\'\n\ndf: DataFrame = pd.read_csv(\'../data/data/final-dataset.csv\', encoding=\'utf-8\')\ndf[\'Pos\'] = 4 - df[\'Pos\']\n\n\n\'\'\'Differentiate Features and Label\'\'\'\n\nX: array = df.iloc[:, 1:-1].values\ny: array = df.iloc[:, -1].values\n\n    \n\'\'\'Create instance of Random Forest Classifier and train the model\'\'\'\n\nclassifier = RandomForestClassifier(n_estimators=10, criterion=\'entropy\')\nclassifier.fit(X, y)\n\n\ndef get_ucl_stage(standing: int) -> str:\n    """"""Convert UCL Standing Integer into its corresponding String value""""""\n    \n    if 1 == standing:\n        return \'Group Stage\'\n    elif 2 == standing:\n        return \'Round 16\'\n    elif 3 == standing:\n        return \'Quarter Finals\'\n    elif 4 == standing:\n        return \'Semi Finals\'\n    else:\n        return \'Finals\'\n\n\ndef prediction(pos: int, pts: int, gd: int, qualify: int) -> str:\n    """"""Predicts the level at which the team will go on in 2019-20 season""""""\n    \n    X_test: array = array([[pos, pts, gd, qualify]])\n    \n    return get_ucl_stage(int(classifier.predict(X_test)[0]))\n\n\n\'\'\'Make Predictions\'\'\'\n\npredictions: dict = {}\n\npredictions[\'Real Madrid\'] = prediction(pos=2, pts=11, gd=6, qualify=1)\npredictions[\'Barcelona\'] = prediction(pos=1, pts=14, gd=5, qualify=1)\npredictions[\'Bayern Munich\'] = prediction(pos=1, pts=18, gd=19, qualify=1)\npredictions[\'Tottenham Hotspur\'] = prediction(pos=2, pts=10, gd=4, qualify=1)\npredictions[\'Manchester City\'] = prediction(pos=1, pts=14, gd=12, qualify=1)\npredictions[\'Juventus\'] = prediction(pos=1, pts=16, gd=8, qualify=1)\npredictions[\'Atl\xc3\xa9tico Madrid\'] = prediction(pos=2, pts=10, gd=3, qualify=1)\npredictions[\'Liverpool\'] = prediction(pos=1, pts=13, gd=5, qualify=1)\npredictions[\'Borussia Dortmund\'] = prediction(pos=2, pts=10, gd=7, qualify=1)\npredictions[\'Chelsea\'] = prediction(pos=2, pts=11, gd=2, qualify=1)\npredictions[\'Paris Saint-Germain\'] = prediction(pos=1, pts=16, gd=15, qualify=1)\n\n\n\'\'\'Store predictions in a CSV file\'\'\'\n\nprediction_df: DataFrame = DataFrame(columns=[\'Club\', \'Standing\'])\nfor club, standing in predictions.items():\n    prediction_df = prediction_df.append([{\'Club\': club, \'Standing\': standing}])\nprediction_df.set_index(\'Club\', inplace=True)\nprediction_df.to_csv(\'../data/data/predictions.csv\', encoding=\'utf-8\')\n'"
src/ucl-standings.py,1,"b'""""""UEFA Champions Standings from season 2014-15 to 2018-19\nManuak data registration\n\n@author Shabd Saran\n""""""\n\nimport pandas as pd\nimport numpy as np\nfrom pandas import DataFrame\n\n\n# create new DataFrame\ndf: DataFrame = pd.DataFrame(columns=[\'Club\', \'Standing_2014-15\', \n                                      \'Standing_2015-16\', \'Standing_2016-17\', \n                                      \'Standing_2017-18\',\'Standing_2018-19\'],\n                        dtype=np.int64)\n\n\ndef create_new_entry(df: DataFrame, club: str, standing14: int,\n                     standing15: int, standing16: int, standing17: int,\n                     standing18: int) -> DataFrame:\n    """"""create new entry in the DataFrame""""""\n    \n    return df.append([{\n                \'Club\': club,\n                \'Standing_2014-15\': standing14,\n                \'Standing_2015-16\': standing15,\n                \'Standing_2016-17\': standing16,\n                \'Standing_2017-18\': standing17,\n                \'Standing_2018-19\': standing18,\n            }])\n\n\n# store new entries into the DataFrame\ndf = create_new_entry(df, \'Real Madrid\', 4, 5, 5, 5, 2)\ndf = create_new_entry(df, \'Barcelona\', 5, 3, 3, 3, 4)\ndf = create_new_entry(df, \'Bayern Munich\', 4, 4, 3, 4, 2)\ndf = create_new_entry(df, \'Atl\xc3\xa9tico Madrid\', 3, 5, 4, 1, 2)\ndf = create_new_entry(df, \'Juventus\', 5, 2, 5, 3, 3)\ndf = create_new_entry(df, \'Manchester City\', 2, 4, 2, 3, 3)\ndf = create_new_entry(df, \'Paris Saint-Germain\', 3, 3, 2, 2, 2)\ndf = create_new_entry(df, \'Liverpool\', 1, -9999, -9999, 5, 5)\ndf = create_new_entry(df, \'Tottenham Hotspur\', -9999, -9999, 1, 2, 5)\ndf = create_new_entry(df, \'Chelsea\', 2, 2, -9999, 2, -9999)\ndf = create_new_entry(df, \'Borussia Dortmund\', 2, -9999, 3, 1, 2)\n    \ndf.set_index(\'Club\', inplace=True)\n\n# store computed results in a CSV file\ndf.to_csv(\'../data/data/uefa-standings.csv\')\n'"
src/uefa-coefficient.py,0,"b'""""""UEFA Champions Coefficient\nData Pre-processor, extracts data from the HTML into CSVs, clean that dataset\n\n@author Shabd Saran\n""""""\n\nimport pandas as pd\nfrom pandas import DataFrame\n\n\n# import the tables from HTML file\nwith open(\'../data/html/uefa-coefficient.html\') as file:\n    df: DataFrame = pd.read_html(file)[19]\n\n# clean the dataset\ndf = df.drop([(\'Ranking\', \'2020\'), (\'Ranking\', \'2019\'), \n              (\'Coefficient\', \'Total\'), (\'Ranking\', \'Mvmt\'), \n              (\'Coefficient\', \'2019\xe2\x80\x9320\')], axis=1)\n\n# rename header to appropriate values\ndf.columns = [\'Club\', \'Country\', \'C_2015-16\', \'C_2016-17\', \'C_2017-18\', \n              \'C_2018-19\', \'C_Country\']\n\n# remove not interested teams\ndf = df[df[\'Club\'].isin([\'Real Madrid\', \'Barcelona\', \'Bayern Munich\', \n        \'Atl\xc3\xa9tico Madrid\', \'Juventus\', \'Manchester City\', \n        \'Paris Saint-Germain\', \'Liverpool\',\'Tottenham Hotspur\', \'Chelsea\', \n        \'Borussia Dortmund\'])]\n\n# add records of 2014-15 seasons\ndf[\'C_2014-15\'] = [29.0, 34.0, 28.0, 22.0, 29.0, 15.0, 21.0, 10.0, 11.0, 21.0,\n  18.0]\n\n# set team name as the index\ndf.set_index(\'Club\', inplace=True)\n\n# store the computed result in a CSV file\ndf.to_csv(\'../data/data/uefa-coefficient.csv\')\n'"
