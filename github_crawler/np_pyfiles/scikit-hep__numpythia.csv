file_path,api_count,code
example.py,0,"b""from numpythia import Pythia, hepmc_write, hepmc_read\nfrom numpythia import STATUS, HAS_END_VERTEX, ABS_PDG_ID\nfrom numpythia.testcmnd import get_cmnd\nfrom numpy.testing import assert_array_equal\n\npythia = Pythia(get_cmnd('w'), random_state=1)\nprint(pythia.weight_labels)\n\nselection = ((STATUS == 1) & ~HAS_END_VERTEX &\n             (ABS_PDG_ID != 12) & (ABS_PDG_ID != 14) & (ABS_PDG_ID != 16))\n\n# generate events while writing to ascii hepmc\nfor event in hepmc_write('events.hepmc', pythia(events=1)):\n    array1 = event.all(selection)\n    print(event.weights)\n    # find W and descendants\n    array_w = event.first(ABS_PDG_ID == 24).descendants(selection)\n    print(array_w)\n\n# read the same event back from ascii hepmc\nfor event in hepmc_read('events.hepmc'):\n    array2 = event.all(selection)\n\nassert_array_equal(array1, array2)\n"""
setup.py,0,"b'#!/usr/bin/env python\n\nimport sys\nimport os\nimport fnmatch\nimport numpy # Either pre-existing or required by PEP 517/518 style build (pyproject.toml, pip 10+)\n\nfrom setuptools import setup, Extension, find_packages\nfrom setuptools.command.build_ext import build_ext as _build_ext\nfrom setuptools.command.install import install as _install\n\n# Use -j N or set the environment variable NPY_NUM_BUILD_JOBS\n# from numpy.distutils.ccompiler import CCompiler_compile\n# import distutils.ccompiler\n# distutils.ccompiler.CCompiler.compile = CCompiler_compile\n\nlocal_path = os.path.dirname(os.path.abspath(__file__))\n\ndef recursive_glob(path, pattern):\n    matches = []\n    for root, dirnames, filenames in os.walk(path):\n        for filename in fnmatch.filter(filenames, pattern):\n            matches.append(os.path.join(root, filename))\n    return matches\n\nlibnumpythia = Extension(\n    \'numpythia._libnumpythia\',\n    sources=[\'numpythia/src/_libnumpythia.pyx\'] +\n        recursive_glob(\'numpythia/src/extern/hepmc3.0.0/src\', \'*.cc\') +\n        recursive_glob(\'numpythia/src/extern/pythia8226/src\', \'*.cc\'),\n    depends=[],\n    language=\'c++\',\n    include_dirs=[\n        \'numpythia/src\',\n        \'numpythia/src/extern/hepmc3.0.0/include\',\n        \'numpythia/src/extern/pythia8226/include\',\n    ],\n    extra_compile_args=[\n        \'-std=c++11\',  # for HepMC\n        \'-Wno-unused-function\',\n        \'-Wno-write-strings\',\n    ],\n    define_macros=[\n        (\'XMLDIR\', \'""""\'),\n    ],\n)\n\nclass build_ext(_build_ext):\n    user_options = _build_ext.user_options + [\n        (\'external-fastjet\', None, None),\n    ]\n\n    def initialize_options(self):\n        _build_ext.initialize_options(self)\n        self.external_fastjet = False\n\n    def finalize_options(self):\n        global libnumpythia\n        _build_ext.finalize_options(self)\n        libnumpythia.include_dirs.append(numpy.get_include())\n\n    def build_extensions(self):\n        _build_ext.build_extensions(self)\n\n\nclass install(_install):\n    user_options = _install.user_options + [\n        (\'external-fastjet\', None, None),\n    ]\n\n    def initialize_options(self):\n        _install.initialize_options(self)\n        self.external_fastjet = False\n\n    def finalize_options(self):\n        global external_fastjet\n        if self.external_fastjet:\n            external_fastjet = True\n        _install.finalize_options(self)\n\n\nextras_require = {""dev"": [""pytest""]}\n\nsetup(\n    name=\'numpythia\',\n    version=\'1.1.0\',\n    description=\'The interface between PYTHIA and NumPy\',\n    long_description=\'\'.join(open(\'README.rst\').readlines()),\n    maintainer=\'the Scikit-HEP admins\',\n    maintainer_email=\'scikit-hep-admins@googlegroups.com\',\n    license=\'GPLv3\',\n    url=\'http://github.com/scikit-hep/numpythia\',\n    packages=find_packages(exclude=\'tests\'),\n    package_data={\n        \'numpythia\': [\n            \'testcmnd/*.cmnd\',\n            \'src/extern/pythia8226/share/*\',\n        ],\n    },\n    ext_modules=[libnumpythia],\n    cmdclass={\n        \'build_ext\': build_ext,\n        \'install\': install,\n    },\n    classifiers=[\n        \'Intended Audience :: Science/Research\',\n        \'Intended Audience :: Developers\',\n        \'Topic :: Software Development\',\n        \'Topic :: Scientific/Engineering\',\n        \'Operating System :: POSIX\',\n        \'Operating System :: Unix\',\n        \'Operating System :: MacOS\',\n        \'License :: OSI Approved :: GNU General Public License v3 (GPLv3)\',\n        \'Programming Language :: Python\',\n        \'Programming Language :: Python :: 2\',\n        \'Programming Language :: Python :: 2.7\',\n        \'Programming Language :: Python :: 3\',\n        \'Programming Language :: Python :: 3.5\',\n        \'Programming Language :: Python :: 3.6\',\n        \'Programming Language :: Python :: 3.7\',\n        \'Programming Language :: Python :: 3.8\',\n        \'Programming Language :: C++\',\n        \'Programming Language :: Cython\',\n        \'Development Status :: 5 - Production/Stable\',\n    ],\n    tests_require=extras_require[""dev""],\n    extras_require=extras_require,\n    install_requires=[\'numpy\', \'six\'],\n    python_requires="">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*"",\n    zip_safe=False,\n)\n'"
numpythia/__init__.py,0,"b""from ._libnumpythia import _Pythia as Pythia, ReaderAscii, WriterAscii\nfrom ._libnumpythia import FILTERS\nimport logging\n\nlocals().update(FILTERS)\n\nlog = logging.getLogger(__name__)\n\n__all__ = [\n    'Pythia',\n    'hepmc_read',\n    'hepmc_write',\n]\n\nPYTHIA_VERSION = '8.226'\nHEPMC_VERSION = '3.0.0'\n\n\ndef hepmc_read(filename):\n    reader = ReaderAscii(filename)\n    for event in reader:\n        yield event\n\ndef hepmc_write(filename, source):\n    writer = WriterAscii(filename)\n    for event in source:\n        writer.write(event)\n        yield event\n"""
tests/test_import.py,0,b'def test_import():\n    import numpythia\n    assert numpythia is not None\n\n'
tests/test_readme.py,0,"b""from numpythia import Pythia, hepmc_write, hepmc_read\nfrom numpythia import STATUS, HAS_END_VERTEX, ABS_PDG_ID\nfrom numpythia.testcmnd import get_cmnd\nfrom numpy.testing import assert_array_equal\n\ndef test_first_example():\n    pythia = Pythia(get_cmnd('w'), random_state=1)\n\n    selection = ((STATUS == 1) & ~HAS_END_VERTEX &\n                (ABS_PDG_ID != 12) & (ABS_PDG_ID != 14) & (ABS_PDG_ID != 16))\n\n    # generate events while writing to ascii hepmc\n    for event in hepmc_write('events.hepmc', pythia(events=1)):\n       array1 = event.all(selection)\n\n    # read the same event back from ascii hepmc\n    for event in hepmc_read('events.hepmc'):\n       array2 = event.all(selection)\n\n    assert_array_equal(array1, array2)\n"""
numpythia/testcmnd/__init__.py,0,"b""import os\nfrom pkg_resources import resource_filename\n\n\n__all__ = [\n    'get_cmnd',\n]\n\n\ndef get_cmnd(name):\n    return resource_filename('numpythia',\n                             os.path.join('testcmnd', name + '.cmnd'))\n"""
