file_path,api_count,code
setup.py,0,"b'#!/usr/bin/env python\n\nimport os\nimport sys\nimport platform\nimport subprocess\n\nfrom setuptools import setup, Extension, find_packages\nfrom setuptools.command.build_ext import build_ext as _build_ext\nfrom setuptools.command.install import install as _install\n\nlocal_path = os.path.dirname(os.path.abspath(__file__))\n\n\ndef get_version():\n    g = {}\n    exec(open(os.path.join(""pyjet"", ""_version.py"")).read(), g)\n    return g[""__version__""]\n\n\ndef fastjet_prefix(fastjet_config=\'fastjet-config\'):\n    try:\n        prefix = subprocess.Popen(\n            [fastjet_config, \'--prefix\'],\n            stdout=subprocess.PIPE).communicate()[0].strip()\n    except IOError:\n        sys.exit(""unable to locate fastjet-config. Is it in your $PATH?"")\n    if sys.version > \'3\':\n        prefix = prefix.decode(\'utf-8\')\n    return prefix\n\n\nlibpyjet = Extension(\n    \'pyjet._libpyjet\',\n    sources=[\'pyjet/src/_libpyjet.pyx\'],\n    depends=[\n        \'pyjet/src/fastjet.h\',\n        \'pyjet/src/2to3.h\',\n        \'pyjet/src/fastjet.pxd\',\n        ],\n    language=\'c++\',\n    include_dirs=[\n        \'pyjet/src\',\n    ],\n    extra_compile_args=[\n        \'-Wno-unused-function\',\n        \'-Wno-write-strings\',\n    ])\n\nexternal_fastjet = False\n\n\nclass build_ext(_build_ext):\n    user_options = _build_ext.user_options + [\n        (\'external-fastjet\', None, None),\n    ]\n\n    def initialize_options(self):\n        _build_ext.initialize_options(self)\n        self.external_fastjet = False\n\n    def finalize_options(self):\n        global libpyjet\n        global external_fastjet\n        _build_ext.finalize_options(self)\n        import numpy\n        libpyjet.include_dirs.append(numpy.get_include())\n        if external_fastjet or self.external_fastjet:\n            prefix = fastjet_prefix()\n            libpyjet.include_dirs += [os.path.join(prefix, \'include\')]\n            libpyjet.library_dirs = [os.path.join(prefix, \'lib\')]\n            libpyjet.runtime_library_dirs = libpyjet.library_dirs\n            libpyjet.libraries = \'fastjettools fastjet CGAL gmp\'.split()\n            if platform.system() == \'Darwin\':\n                libpyjet.extra_link_args.append(\n                    \'-Wl,-rpath,\' + os.path.join(prefix, \'lib\'))\n        elif \'pyjet/src/fjcore.cpp\' not in libpyjet.sources:\n            libpyjet.sources.append(\'pyjet/src/fjcore.cpp\')\n            libpyjet.depends.append(\'pyjet/src/fjcore.h\')\n            libpyjet.define_macros = [(\'PYJET_STANDALONE\', None)]\n\n    def build_extensions(self):\n        _build_ext.build_extensions(self)\n\n\nclass install(_install):\n    user_options = _install.user_options + [\n        (\'external-fastjet\', None, None),\n    ]\n\n    def initialize_options(self):\n        _install.initialize_options(self)\n        self.external_fastjet = False\n\n    def finalize_options(self):\n        global external_fastjet\n        if self.external_fastjet:\n            external_fastjet = True\n        _install.finalize_options(self)\n\nextras_require = {""dev"": [""pytest""]}\n\nsetup(\n    name=\'pyjet\',\n    version=get_version(),\n    description=\'The interface between FastJet and NumPy\',\n    long_description=\'\'.join(open(os.path.join(local_path, \'README.rst\')).readlines()),\n    author=\'Noel Dawe\',\n    author_email=\'noel@dawe.me\',\n    maintainer=\'the Scikit-HEP admins\',\n    maintainer_email=\'scikit-hep-admins@googlegroups.com\',\n    license=\'GPLv3\',\n    url=\'http://github.com/scikit-hep/pyjet\',\n    packages=find_packages(exclude=\'tests\'),\n    package_data={\n        \'pyjet\': [\n            \'testdata/*.dat\',\n            \'src/*.pxd\', \'src/*.h\', \'src/*.cpp\',\n        ],\n    },\n    ext_modules=[libpyjet],\n    cmdclass={\n        \'build_ext\': build_ext,\n        \'install\': install,\n    },\n    classifiers=[\n        \'Intended Audience :: Science/Research\',\n        \'Intended Audience :: Developers\',\n        \'Topic :: Software Development\',\n        \'Topic :: Scientific/Engineering\',\n        \'Operating System :: POSIX\',\n        \'Operating System :: Unix\',\n        \'Operating System :: MacOS\',\n        \'License :: OSI Approved :: GNU General Public License v3 (GPLv3)\',\n        \'Programming Language :: Python\',\n        \'Programming Language :: Python :: 2\',\n        \'Programming Language :: Python :: 2.7\',\n        \'Programming Language :: Python :: 3\',\n        \'Programming Language :: Python :: 3.5\',\n        \'Programming Language :: Python :: 3.6\',\n        \'Programming Language :: Python :: 3.7\',\n        \'Programming Language :: Python :: 3.8\',\n        \'Programming Language :: C++\',\n        \'Programming Language :: Cython\',\n        \'Development Status :: 5 - Production/Stable\',\n    ],\n    tests_require=extras_require[""dev""],\n    extras_require=extras_require,\n    install_requires=[\'numpy>=1.13.3\'],\n    python_requires="">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*"",\n    zip_safe=False,\n)\n'"
examples/example.py,3,"b'from pyjet import cluster\nfrom pyjet.testdata import get_event\nfrom numpy.lib.recfunctions import append_fields\nfrom numpy.testing import assert_array_equal\nimport numpy as np\n\n# event\'s dtype=np.dtype([(\'E\', \'f8\'), (\'px\', \'f8\'), (\'py\', \'f8\'), (\'pz\', \'f8\')])\n# this is the sample event shipped with FastJet with E moved to the first column\nevent = get_event()\n\n# You can associate arbitrary additional information to each particle\n# and this information can be accessed as attributes of the PseudoJets\nevent = append_fields(event, \'id\', data=np.arange(len(event)))\n\nsequence = cluster(event, R=0.6, p=-1)\njets = sequence.inclusive_jets()\n\nids = []\nfor jet in jets:\n    for constit in jet:\n        ids.append(constit.id)\nids.extend([p.id for p in sequence.unclustered_particles()])\n# Are all particles accounted for?\nassert_array_equal(sorted(ids), np.arange(len(event)))\n\n# Printing a few things here as a demonstration of the basic functionality\nprint(""{0: <5} {1: >10} {2: >10} {3: >10} {4: >10} {5: >10}"".format(\n    ""jet#"", ""pT"", ""eta"", ""phi"", ""mass"", ""#constit.""))\nfor i, jet in enumerate(jets[:6]):\n    print(""{0: <5} {1: 10.3f} {2: 10.3f} {3: 10.3f} {4: 10.3f} {5: 10}"".format(\n        i + 1, jet.pt, jet.eta, jet.phi, jet.mass, len(jet)))\n\nprint(""\\nThe 6th jet has the following constituents:"")\nfor constit in jets[5]:\n    print(constit)\nprint(""\\nGet the constituents as an array (pT, eta, phi, mass):"")\nprint(jets[5].constituents_array())\nprint(""\\nor (E, px, py, pz):"")\nprint(jets[5].constituents_array(ep=True))\n\n# Look at substructure with exclusive jets\nprint(""\\n\\nReclustering the constituents of the hardest jet with the kt algorithm"")\ncs2 = cluster(jets[0].constituents_array(), R=0.6, p=1)\nprint(cs2.inclusive_jets())\nprint(""\\nGo back in the clustering sequence to when there were two jets"")\nfor subj in cs2.exclusive_jets(2):\n    print(subj)\nprint(""\\nAsk how many jets there are with a given dcut"")\ndcut = 0.5\nnjets = cs2.n_exclusive_jets(dcut)\nprint(""There are {0} jets with a dcut of {1}"".format(njets, dcut))\nprint(""\\nGet the jets with the given dcut"")\nejets_dcut = cs2.exclusive_jets_dcut(dcut)\nfor i, jet in enumerate(ejets_dcut):\n    print(i + 1, jet)\n'"
examples/plot_jet_areas.py,14,"b""import numpy as np\nfrom pyjet import cluster, DTYPE_PTEPM\nfrom pyjet.testdata import get_event\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import cm\nfrom matplotlib.colors import LinearSegmentedColormap\n\n# define eta and phi ranges and number of bins along each axis\neta_min, eta_max = -4., 4.\nextent = eta_min, eta_max, -np.pi, np.pi\nbins = 200\n\nevent = get_event()\n\n# create regular grid of ghosts\neta_edges = np.linspace(eta_min, eta_max, bins + 1)\nphi_edges = np.linspace(-np.pi, np.pi, bins + 1)\neta = np.linspace(eta_min, eta_max, bins + 1)[:-1] + (eta_max - eta_min) / (2 * bins)\nphi = np.linspace(-np.pi, np.pi, bins + 1)[:-1] + (np.pi / bins)\nX, Y = np.meshgrid(eta, phi)\nghosts = np.zeros(eta.shape[0] * phi.shape[0], dtype=DTYPE_PTEPM)\nghosts['pT'] = 1e-8\nghosts['eta'] = X.ravel()\nghosts['phi'] = Y.ravel()\n\n# add ghosts to the event\nevent = np.concatenate([event, ghosts], axis=0)\n\nfig = plt.figure(figsize=(9, 3))\n\nax = None\nfor p, label in zip((-1, 0, 1), (r'anti-$k_t$', 'Cam/Aachen', '$k_t$')):\n    # cluster\n    sequence = cluster(event, R=1.0, p=p)\n    jets = sequence.inclusive_jets(ptmin=10)\n\n    # pick a different color for each jet\n    colors = cm.rainbow(np.linspace(0, 1, len(jets)))\n    cmap = LinearSegmentedColormap.from_list('cmap', colors, len(colors))\n    ax = fig.add_subplot(1, 3, p + 2, sharey=ax)\n    area = np.zeros((eta_edges.shape[0] - 1, phi_edges.shape[0] - 1),\n                    dtype=np.float64)\n    for ijet, jet in enumerate(jets):\n        constit = jet.constituents_array()\n        jetarea, _, _ = np.histogram2d(constit['eta'], constit['phi'],\n                                       bins=(eta_edges, phi_edges))\n        area += (jetarea > 0) * (ijet + 1)\n\n    # plot all areas\n    ax.imshow(np.ma.masked_where(area == 0, area).T, cmap=cmap,\n              extent=extent, aspect=(eta_max - eta_min) / (2*np.pi),\n              interpolation='none', origin='lower')\n\n    # overlay original event\n    particles = get_event()\n    ax.scatter(particles['eta'], particles['phi'],\n               s=30 * particles['pT'] / particles['pT'].max())\n    ax.set_xlim(extent[:2])\n    ax.set_ylim(extent[2:])\n    if p == -1:\n        ax.set_ylabel(r'$\\phi$')\n        ax.set_xlabel(r'$\\eta$')\n\n    ax.text(0.95, 0.05, label,\n        verticalalignment='bottom', horizontalalignment='right',\n        transform=ax.transAxes,\n        fontsize=12)\n\nfig.subplots_adjust(hspace=0)\nplt.setp([a.get_yticklabels() for a in fig.axes[1:]], visible=False)\nfig.tight_layout()\nfig.savefig('jet_areas.png')\n"""
pyjet/__init__.py,1,"b'from ._libpyjet import (ClusterSequence, ClusterSequenceArea,\n                        JetDefinition, PseudoJet,\n                        DTYPE, DTYPE_PTEPM, DTYPE_EP, USING_EXTERNAL_FASTJET)\n\nfrom ._version import __version__\nfrom ._version import FASTJET_VERSION, FJCONTRIB_VERSION\n\n__all__ = [\n    \'cluster\',\n    DTYPE_PTEPM,\n    DTYPE_EP,\n    FASTJET_VERSION,\n    FJCONTRIB_VERSION\n]\n\n\ndef cluster(vectors, algo=\'genkt\', area=None, ep=False, **kwargs):\n    """"""\n    Perform jet clustering on a numpy array of 4-vectors in (pT, eta, phi,\n    mass) representation, otherwise (E, px, py, pz) representation if ep=True\n\n    Parameters\n    ----------\n\n    vectors: np.ndarray or PseudoJet\n        Array of 4-vectors or a PseudoJet in which case the PseudoJet\n        constituents are used as inputs to the jet clustering\n    algo: JetDefinition or str (optional, default=\'genkt\')\n        The jet definition as a JetDefinition or a string naming the jet\n        algorithm in which case the additional keywork arguments are used to\n        construct the JetDefinition\n    area: str (optional, default=None)\n        The type of jet area to compute\n    ep: bool (optional, default=False)\n        First four fields of ``vectors`` are (pT, eta, phi, mass) if ep=False\n        or (E, px, py, pz) if ep=True\n\n    Returns\n    -------\n\n    sequence : ClusterSequence\n        A wrapped fastjet::ClusterSequence\n\n    """"""\n    if isinstance(algo, str):\n        algo = JetDefinition(algo, **kwargs)\n    if area is not None:\n        return ClusterSequenceArea(vectors, algo, area, ep=ep)\n    return ClusterSequence(vectors, algo, ep=ep)\n\n\ndef get_include():\n    from pkg_resources import resource_filename\n    return resource_filename(\'pyjet\', \'src\')\n'"
pyjet/_version.py,0,"b'__version__ = ""1.6.0""\n\nversion = __version__\nversion_info = __version__.split(""."")\n\nFASTJET_VERSION = ""3.3.3""\nFJCONTRIB_VERSION = ""1.042""\n'"
pyjet/utils.py,14,"b'import numpy as np\nfrom . import DTYPE_EP, DTYPE_PTEPM\n\n__all__ = [\n    \'ptepm2ep\',\n    \'ep2ptepm\',\n]\n\n\ndef ptepm2ep(rec):\n    """""" Convert (pT, eta, phi, mass) into (E, px, py, pz)\n\n    Note that the field names of the input array need not match ""pT"", ""eta"",\n    ""phi"", or ""mass"". This function only assumes that the first four fields\n    are those quantities. Garbage in, garbage out.\n    """"""\n    pt, eta, phi, mass = rec.dtype.names[:4]\n    vects = np.empty(rec.shape[0], dtype=DTYPE_EP)\n    vects[\'px\'] = rec[pt] * np.cos(rec[phi])\n    vects[\'py\'] = rec[pt] * np.sin(rec[phi])\n    vects[\'pz\'] = rec[pt] * np.sinh(rec[eta])\n    vects[\'E\'] = np.sqrt(vects[\'px\']**2 + vects[\'py\']**2 + vects[\'pz\']**2 + rec[mass]**2)\n    return vects\n\n\ndef ep2ptepm(rec):\n    """""" Convert (E, px, py, pz) into (pT, eta, phi, mass)\n\n    Note that the field names of the input array need not match ""E"", ""px"",\n    ""py"", or ""pz"". This function only assumes that the first four fields\n    are those quantities. Garbage in, garbage out.\n    """"""\n    E, px, py, pz = rec.dtype.names[:4]\n    vects = np.empty(rec.shape[0], dtype=DTYPE_PTEPM)\n    ptot = np.sqrt(np.power(rec[px], 2) + np.power(rec[py], 2) + np.power(rec[pz], 2))\n    costheta = np.divide(rec[pz], ptot)\n    costheta[ptot == 0] = 1.\n    good_costheta = np.power(costheta, 2) < 1\n    vects[\'pT\'] = np.sqrt(np.power(rec[px], 2) + np.power(rec[py], 2))\n    vects[\'eta\'][good_costheta] = -0.5 * np.log(np.divide(1. - costheta, 1. + costheta))\n    vects[\'eta\'][~good_costheta & (rec[pz] == 0.)] = 0.\n    vects[\'eta\'][~good_costheta & (rec[pz] > 0.)] = 10e10\n    vects[\'eta\'][~good_costheta & (rec[pz] < 0.)] = -10e10\n    vects[\'phi\'] = np.arctan2(rec[py], rec[px])\n    vects[\'phi\'][(rec[py] == 0) & (rec[px] == 0)] = 0\n    mass2 = np.power(rec[E], 2) - np.power(ptot, 2)\n    neg_mass2 = mass2 < 0\n    mass2[neg_mass2] *= -1\n    vects[\'mass\'] = np.sqrt(mass2)\n    vects[\'mass\'][neg_mass2] *= -1\n    return vects\n'"
tests/test_cluster.py,5,"b'from pyjet import cluster, USING_EXTERNAL_FASTJET\nfrom pyjet.testdata import get_event\nfrom numpy.testing import assert_array_equal\n\nimport pytest\nfrom pytest import approx\n\nfrom numpy.lib.recfunctions import append_fields\nimport numpy as np\n\n\ndef test_cluster():\n    sequence = cluster(get_event(), R=0.6, p=-1)\n    jets = sequence.inclusive_jets()\n    assert len(jets) == 91\n    assert jets[0].pt == approx(983.28, abs=2)\n    assert isinstance(jets[0].parents, tuple)\n    len(jets[0].parents) == 2\n    jets[0].parents[0].child.pt == jets[0].pt\n    jets[0].parents[0].child == jets[0]\n\n    # too few parameters specified for jet definition\n    with pytest.raises(RuntimeError):\n        cluster(get_event())\n\n    # hashable\n    hash(sequence)\n    hash(jets[0])\n\ndef test_recluster():\n    sequence = cluster(get_event(), R=0.6, p=-1)\n    jets = sequence.inclusive_jets()\n    assert jets[0].pt == cluster(jets[0], R=0.6, p=-1).inclusive_jets()[0].pt\n\ndef test_cluster_vectors_not_structured():\n    with pytest.raises(ValueError):\n        cluster(np.ones(10), R=0.6, p=-1)\n\ndef test_cluster_vectors_fewer_than_four_fields():\n    with pytest.raises(ValueError):\n        vectors = np.zeros(10, dtype=[(\'a\', \'f8\'), (\'b\', \'f8\'), (\'c\', \'f8\')])\n        cluster(vectors, R=0.6, p=-1)\n\ndef test_cluster_vectors_wrong_type():\n    with pytest.raises(ValueError):\n        vectors = np.zeros(10, dtype=[(\'a\', \'f8\'), (\'b\', \'f8\'), (\'c\', \'f4\'), (\'d\', \'f8\')])\n        cluster(vectors, R=0.6, p=-1)\n\n\ndef test_userinfo():\n    event = get_event()\n    # add an \'id\' field to each particle\n    event = append_fields(event, \'id\', data=np.arange(len(event)))\n    sequence = cluster(event, R=0.6, p=-1)\n    jets = sequence.inclusive_jets()\n    ids = []\n    for jet in jets:\n        for constit in jet:\n            ids.append(constit.id)\n            assert constit.id == constit.userinfo[\'id\']\n    ids.extend([p.id for p in sequence.unclustered_particles()])\n    # are all particles accounted for?\n    assert_array_equal(sorted(ids), np.arange(len(event)))\n\n    for jet in jets:\n        for constit in jet:\n            constit.userinfo = ""wow""\n            assert constit.userinfo == ""wow""\n\n@pytest.mark.skipif(not USING_EXTERNAL_FASTJET, reason=""using internal fastjet"")\ndef test_jet_area():\n    sequence = cluster(get_event(), R=0.6, p=-1, area=\'active\')\n    jets = sequence.inclusive_jets()\n    for jet in jets:\n        area, error = jet.area\n        if len(jet) > 3:  # TODO: need better way to test this\n            assert area > 0\n'"
tests/test_pseudojet.py,0,b'from pyjet import PseudoJet\n\n\ndef test_default_constructor():\n    pj = PseudoJet()\n'
tests/test_utils.py,0,"b'from pyjet import DTYPE\nfrom pyjet.utils import ep2ptepm, ptepm2ep\nfrom pyjet.testdata import get_event\nfrom numpy.testing import assert_array_almost_equal\nimport numpy as np\n\n\ndef test_vector_conversion():\n    event = get_event(ep=True)\n    assert_array_almost_equal(\n        event.view(DTYPE),\n        ptepm2ep(ep2ptepm(event)).view(DTYPE))\n'"
pyjet/testdata/__init__.py,0,"b""import os\nfrom pkg_resources import resource_filename\nfrom numpy import genfromtxt\nfrom .. import DTYPE_EP\nfrom ..utils import ep2ptepm\n\n\n__all__ = [\n    'get_event',\n]\n\n\ndef get_event(name='single-event.dat', ep=False):\n    filepath = resource_filename('pyjet', os.path.join('testdata', name))\n    event = genfromtxt(filepath, dtype=DTYPE_EP)\n    if not ep:\n        event = ep2ptepm(event)\n    return event\n"""
