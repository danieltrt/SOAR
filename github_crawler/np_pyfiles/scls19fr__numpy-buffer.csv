file_path,api_count,code
setup.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom setuptools import setup, find_packages  # Always prefer setuptools over distutils\nfrom codecs import open  # To use a consistent encoding\nfrom os import path\nimport io\n\nNAME = \'numpy-buffer\'\nfilename = ""numpy_buffer/version.py""\nwith open(filename) as f:\n    exec(f.read())\n\nhere = path.abspath(path.dirname(__file__))\n\ndef readme():\n    filename = path.join(here, \'README.rst\')\n    with io.open(filename, \'rt\', encoding=\'UTF-8\') as f:\n        return f.read()\n\nsetup(\n    name=NAME,\n\n    # Versions should comply with PEP440.  For a discussion on single-sourcing\n    # the version across setup.py and the project code, see\n    # https://packaging.python.org/en/latest/development.html#single-sourcing-the-version\n    #version=\'0.0.1\',\n    version=__version__,\n\n    description=""Numpy library to manage ring buffer"",\n\n    long_description=readme(),\n\n    # The project\'s main homepage.\n    url=__url__,\n\n    # Author details\n    author=__author__,\n    author_email=__email__,\n\n    # Choose your license\n    license=__license__,\n\n    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        # How mature is this project? Common values are\n        #   3 - Alpha\n        #   4 - Beta\n        #   5 - Production/Stable\n        \'Development Status :: 3 - Alpha\',\n\n        # Indicate who your project is intended for\n        \'Environment :: Console\',\n        #\'Topic :: Software Development :: Build Tools\',\n        \'Intended Audience :: Science/Research\',\n        \'Operating System :: OS Independent\',\n\n        # Specify the Python versions you support here. In particular, ensure\n        # that you indicate whether you support Python 2, Python 3 or both.\n        \'Programming Language :: Cython\',\n\n        \'Programming Language :: Python\',\n        #\'Programming Language :: Python :: 2\',\n        #\'Programming Language :: Python :: 2.6\',\n        \'Programming Language :: Python :: 2.7\',\n        #\'Programming Language :: Python :: 3\',\n        #\'Programming Language :: Python :: 3.2\',\n        \'Programming Language :: Python :: 3.3\',\n        \'Programming Language :: Python :: 3.4\',\n        \'Programming Language :: Python :: 3.5\',\n        \'Programming Language :: Python :: 3.6\',\n\n        \'Topic :: Scientific/Engineering\',\n\n        # Pick your license as you wish (should match ""license"" above)\n        \'License :: OSI Approved :: BSD License\',\n\n    ],\n\n    # What does your project relate to?\n    keywords=\'numpy ring buffer circular\',\n\n    # You can just specify the packages manually here if your project is\n    # simple. Or you can use find_packages().\n    packages=find_packages(exclude=[\'contrib\', \'docs\', \'tests*\']),\n\n    # List run-time dependencies here.  These will be installed by pip when your\n    # project is installed. For an analysis of ""install_requires"" vs pip\'s\n    # requirements files see:\n    # https://packaging.python.org/en/latest/technical.html#install-requires-vs-requirements-files\n    install_requires=[\'numpy\'],\n\n    # List additional groups of dependencies here (e.g. development dependencies).\n    # You can install these using the following syntax, for example:\n    # $ pip install -e .[dev,test]\n    extras_require = {\n        \'dev\': [\'check-manifest\', \'nose\'],\n        \'test\': [\'coverage\', \'nose\'],\n    },\n\n    # If there are data files included in your packages that need to be\n    # installed, specify them here.  If using Python 2.6 or less, then these\n    # have to be included in MANIFEST.in as well.\n    #package_data={\n    #    \'sample\': [\'logging.conf\'],\n    #},\n\n    # Although \'package_data\' is the preferred approach, in some case you may\n    # need to place data files outside of your packages.\n    # see http://docs.python.org/3.4/distutils/setupscript.html#installing-additional-files\n    # In this case, \'data_file\' will be installed into \'<sys.prefix>/my_data\'\n    #data_files=[(\'my_data\', [\'data/data_file\'])],\n\n    # To provide executable scripts, use entry points in preference to the\n    # ""scripts"" keyword. Entry points provide cross-platform support and allow\n    # pip to create the appropriate form of executable for the target platform.\n    #entry_points={\n    #    \'console_scripts\': [\n    #        \'sample=sample:main\',\n    #    ],\n    #},\n)\n'"
numpy_buffer/__init__.py,0,b'#!/usr/bin/env python\n\nfrom .ring import RingBuffer  # noqa\n'
numpy_buffer/ring.py,4,"b'#!/usr/bin/env python\n\nimport numpy as np\n\n\nclass RingBuffer(object):\n    def __init__(self, size_max, default_value=0.0, dtype=float, overflow=None):\n        """"""initialization""""""\n        self.clear(size_max, default_value, dtype, overflow)\n\n    def clear(self, size_max=None, default_value=None, dtype=None, overflow=None):\n        """"""clear ring""""""\n        if size_max is not None:\n            self.size_max = size_max\n\n        if default_value is not None:\n            self.default_value = default_value\n\n        if dtype is not None:\n            self.dtype = dtype\n\n        if overflow is not None:\n            self.overflow = overflow\n\n        if not isinstance(default_value, np.ndarray):\n            self._data = np.empty(size_max, dtype=dtype)\n            self._data.fill(default_value)\n        else:\n            if len(default_value) == size_max:\n                self._data = default_value\n            else:\n                msg = ""len(default_value)=%d but size_max=%d, but they should be equal"" % (len(default_value), size_max)\n                raise NotImplementedError(msg)\n\n        self.size = 0\n\n        self.full = False\n        self.append = self._append_not_full\n\n    def _append_not_full(self, value):\n        """"""append an element""""""\n        self._data = np.roll(self._data, 1)\n        self._data[0] = value\n\n        self.size += 1\n\n        if self.size == self.size_max:\n            self.full = True\n            self.append = self._append_full\n            self.overflow = self.overflow(self)\n\n    def _append_full(self, value):\n        """"""append an element when buffer is full""""""\n        self._data = np.roll(self._data, 1)\n        self._data[0] = value\n\n    @property\n    def all(self):\n        """"""return a list of elements from the oldest to the newest (len: size_max)""""""\n        return self._data\n\n    @property\n    def partial(self):\n        """"""return a list of elements from the oldest to the newest (len: size)""""""\n        return self.all[0:self.size]\n\n    def view(self, *args, **kwargs):\n        return self.partial[::-1].view(*args, **kwargs)\n\n    def __len__(self):\n        """"""return size (not size_max)""""""\n        return self.size\n\n    def __getitem__(self, key):\n        """"""get element""""""\n        return self._data[key]\n\n    def __repr__(self):\n        """"""return string representation""""""\n        s = """"""<%s\n    all:     %s\n    partial: %s\n    size/size_max: %d / %d\n>"""""" % (self.__class__.__name__,\n            self.all.__repr__(),\n            self.partial.__repr__(),\n            self.size, self.size_max)\n        return s\n\n    def overflow(self, *args, **kwargs):\n        return\n\n    def min(self, all=False):\n        """"""return min""""""\n        if all:\n            return self.all.min()\n        else:\n            return self.partial.min()\n\n    def max(self, all=True):\n        """"""return max""""""\n        if all:\n            return self.all.max()\n        else:\n            return self.partial.max()\n'"
numpy_buffer/version.py,0,"b'__author__ = ""Sebastien Celles""\n__copyright__ = ""Copyright (c) 2015 - Sebastien Celles <s.celles@gmail.com>""\n__license__ = ""BSD License""\n__version__ = ""0.0.1""\n__email__ = ""s.celles@gmail.com""\n__status__ = ""Development""\n__url__ = \'https://github.com/scls19fr/numpy-buffer\'\n'"
samples/mqtt_publish.py,1,"b'#!/usr/bin/env python\n\nimport paho.mqtt.client as mqtt\nfrom mqtt_settings import config\nimport datetime\nimport pytz\nimport numpy as np\nimport json\n\n\ndef on_connect(client, userdata, flags, rc):\n    print(""Connected with result code "" + str(rc))\n\n\ndef on_message(client, userdata, msg):\n    print(""%-20s %d %s"" % (msg.topic, msg.qos, msg.payload))\n    client.publish(\'pong\', ""Thanks"", 0)\n\n\ndef on_publish(client, userdata, msg):\n    print(""publish %s %s %s"" % (client, userdata, msg))\n\n\ndef main():\n    cli = mqtt.Client()\n    cli.on_connect = on_connect\n    cli.on_message = on_message\n    cli.on_publish = on_publish\n\n    # cli.tls_set(\'root.ca\',\n    # certfile=\'c1.crt\',\n    # keyfile=\'c1.key\')\n\n    # cli.username_pw_set(""guigui"", password=""abloc"")\n\n    cli.connect(config[\'host\'], config[\'port\'], config[\'keepalive\'])\n\n    y = 100  # initial value\n\n    while cli.loop() == 0:\n        now = datetime.datetime.now(pytz.utc)\n        y = y + np.random.uniform(-1, 1)\n        data = {\n            \'ts\': now.isoformat(),\n            \'d\': {\n                \'y\': y\n            }\n        }\n        payload = json.dumps(data)  # serialization\n        cli.publish(topic=\'/sensors/sensor01\', payload=payload, qos=0, retain=False)\n\n\nif __name__ == \'__main__\':\n    main()\n'"
samples/mqtt_settings.py,0,"b""#!/usr/bin/env python\n\nconfig = {\n    'host': '127.0.0.1',\n    'port': 1883,\n    'keepalive': 60,\n    'bind_address': ''\n}\n"""
samples/mqtt_subscribe.py,0,"b'#!/usr/bin/env python\n\nimport paho.mqtt.client as mqtt\nimport json\nfrom mqtt_settings import config\nimport datetime\nimport pytz\nimport dateutil.parser\n\n\ndef on_connect(client, userdata, flags, rc):\n    print(""Connected with result code "" + str(rc))\n    client.subscribe(""/sensors/#"", 0)\n\n\ndef on_message(client, userdata, msg):\n    data = json.loads(msg.payload.decode(""utf-8""))  # deserialization\n    sent = dateutil.parser.parse(data[\'ts\'])  # iso 8601 to datetime.datetime\n    data[\'ts\'] = sent\n    received = datetime.datetime.now(pytz.utc)\n    lag = received - sent\n    print(""%-20s %d %s lag=%s"" % (msg.topic, msg.qos, data, lag))\n    # mosq.publish(\'pong\', ""Thanks"", 0)\n\n\ndef on_publish(client, userdata, msg):\n    pass\n\n\ndef main():\n    cli = mqtt.Client()\n    cli.on_connect = on_connect\n    cli.on_message = on_message\n    cli.on_publish = on_publish\n\n    # cli.tls_set(\'root.ca\',\n    # certfile=\'c1.crt\',\n    # keyfile=\'c1.key\')\n\n    # cli.username_pw_set(""guigui"", password=""abloc"")\n\n    cli.connect(config[\'host\'], config[\'port\'], config[\'keepalive\'])\n\n    cli.loop_forever()\n\n\nif __name__ == \'__main__\':\n    main()\n'"
samples/mqtt_subscribe_matplotlib.py,0,"b'#!/usr/bin/env python\n\nimport matplotlib.pyplot as plt\nimport paho.mqtt.client as mqtt\nimport json\nfrom mqtt_settings import config\nfrom numpy_buffer import RingBuffer\nimport datetime\nimport pytz\nimport dateutil.parser\n\n\ndef now():\n    return datetime.datetime.now(pytz.utc)\n\n\nmaxlen = 500\ndata_x = RingBuffer(maxlen, now(), dtype=datetime.datetime)\ndata_y = RingBuffer(maxlen)\n\nfig, ax = plt.subplots()\nline, = ax.plot(data_x.all[::-1], data_y.all[::-1], linestyle=\'-\', marker=\'+\', color=\'r\', markeredgecolor=\'b\')\nax.set_ylim([0, 100])\n\n\ndef on_connect(client, userdata, flags, rc):\n    print(""Connected with result code "" + str(rc))\n    client.subscibe(""/sensors/#"", 0)\n\n\ndef on_message(client, userdata, msg):\n    data = json.loads(msg.payload.decode(""utf-8""))  # deserialization\n    sent = dateutil.parser.parse(data[\'ts\'])  # iso 8601 to datetime.datetime\n    data[\'ts\'] = sent\n    received = now()\n    lag = received - sent\n    print(""%-20s %d %s lag=%s"" % (msg.topic, msg.qos, data, lag))\n    # mosq.publish(\'pong\', ""Thanks"", 0)\n\n    data_x.append(sent)\n    data_y.append(data[\'d\'][\'y\'])\n    line.set_xdata(data_x.all[::-1])\n    xmin, xmax = data_x.min(), data_x.max()\n    if xmax > xmin:\n        ax.set_xlim([xmin, xmax])\n    line.set_ydata(data_y.all[::-1])\n    ymin, ymax = data_y.min(), data_y.max()\n    if ymax > ymin:\n        ax.set_ylim([ymin, ymax])\n    plt.pause(0.001)\n\n\ndef on_publish(client, userdata, msg):\n    pass\n\n\ndef main():\n    cli = mqtt.Client()\n    cli.on_connect = on_connect\n    cli.on_message = on_message\n    cli.on_publish = on_publish\n\n    # cli.tls_set(\'root.ca\',\n    # certfile=\'c1.crt\',\n    # keyfile=\'c1.key\')\n\n    # cli.username_pw_set(""guigui"", password=""abloc"")\n\n    cli.connect(config[\'host\'], config[\'port\'], config[\'keepalive\'])\n\n    cli.loop_forever()\n\n\nif __name__ == \'__main__\':\n    main()\n'"
samples/sample_matplotlib_no_datetime.py,1,"b""#!/usr/bin/env python\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom numpy_buffer import RingBuffer\n\n\ndef main():\n    maxlen = 50\n    # data_x = RingBuffer(maxlen)\n    data_y = RingBuffer(maxlen)\n\n    y = 100  # initial value\n\n    fig, ax = plt.subplots()\n    line, = ax.plot(data_y.all[::-1])\n    delta_y = 20\n    ax.set_ylim([y - delta_y, y + delta_y])\n\n    while True:\n        y = y + np.random.uniform(-1, 1)\n        data_y.append(y)\n        line.set_ydata(data_y.all[::-1])\n        plt.pause(0.001)\n\n\nif __name__ == '__main__':\n    main()\n"""
samples/sample_matplotlib_with_datetime.py,1,"b""#!/usr/bin/env python\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport datetime\nfrom numpy_buffer import RingBuffer\n\n\ndef main():\n    maxlen = 500\n    data_x = RingBuffer(maxlen, datetime.datetime.utcnow(), dtype=datetime.datetime)\n    data_y = RingBuffer(maxlen)\n\n    y = 100  # initial value\n\n    fig, ax = plt.subplots()\n    line, = ax.plot(data_x.all[::-1], data_y.all[::-1], linestyle='-', marker='+', color='r', markeredgecolor='b')\n    delta_y = 20\n    ax.set_ylim([y - delta_y, y + delta_y])\n\n    while True:\n        x = datetime.datetime.utcnow()\n        y = y + np.random.uniform(-1, 1)\n        data_x.append(x)\n        data_y.append(y)\n        line.set_xdata(data_x.all[::-1])\n        xmin, xmax = data_x.min(), data_x.max()\n        if xmax > xmin:\n            ax.set_xlim([xmin, xmax])\n        line.set_ydata(data_y.all[::-1])\n        ymin, ymax = data_y.min(), data_y.max()\n        if ymax > ymin:\n            ax.set_ylim([ymin, ymax])\n        plt.pause(0.001)\n\n\nif __name__ == '__main__':\n    main()\n"""
samples/sample_pyqtgraph_no_datetime.py,2,"b'import sys\nimport numpy as np\n\nfrom PyQt4.QtCore import QTimer\nfrom pyqtgraph.Qt import QtGui, QtCore\nimport pyqtgraph as pg\n\nfrom timestamp import now_timestamp\nfrom numpy_buffer import RingBuffer\n\n\nclass MyApplication(QtGui.QApplication):\n    def __init__(self, *args, **kwargs):\n        super(MyApplication, self).__init__(*args, **kwargs)\n        # self.t = QTime()\n        # self.t.start()\n\n        maxlen = 50\n        self.data_x = RingBuffer(maxlen)\n        self.data_y = RingBuffer(maxlen)\n\n        self.win = pg.GraphicsWindow(title=""Basic plotting examples"")\n        self.win.resize(1000, 600)\n        self.win.setWindowTitle(\'Plot with PyQtGraph\')\n\n        self.plot = self.win.addPlot(title=\'Timed data\')\n        # self.plot.setYRange(0, 150)\n\n        # self.curve = self.plot.plot()\n\n        pen = pg.mkPen(\'r\', style=QtCore.Qt.SolidLine)\n        self.curve = self.plot.plot(pen=pen, symbol=\'+\')\n\n        self.timer = QTimer()\n        self.timer.timeout.connect(self.update)\n        self.timer.start(100)\n\n        self.y = 100\n\n    def update(self):\n        # self.data.append({\'x\': self.t.elapsed(), \'y\': np.random.randint(0, 100)})\n        x = now_timestamp()\n        self.y = self.y + np.random.uniform(-1, 1)\n\n        self.data_x.append(x)\n        self.data_y.append(self.y)\n\n        # self.curve.setData(x=self.data_x, y=self.data_y)\n        self.curve.setData(y=self.data_y)\n\n\ndef main():\n    # Set PyQtGraph colors\n    pg.setConfigOption(\'background\', \'w\')\n    pg.setConfigOption(\'foreground\', \'k\')\n\n    # Enable antialiasing for prettier plots\n    pg.setConfigOptions(antialias=True)\n\n    app = MyApplication(sys.argv)\n    sys.exit(app.exec_())\n\n\nif __name__ == \'__main__\':\n    main()\n'"
samples/sample_pyqtgraph_with_datetime.py,2,"b'import sys\nimport numpy as np\n\nfrom PyQt4.QtCore import QTimer\nfrom pyqtgraph.Qt import QtGui, QtCore\nimport pyqtgraph as pg\n\nfrom timestamp import now_timestamp, int2dt\nfrom numpy_buffer import RingBuffer\n\n\nclass TimeAxisItem(pg.AxisItem):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def tickStrings(self, values, scale, spacing):\n        # PySide\'s QTime() initialiser fails miserably and dismisses args/kwargs\n        # return [QTime().addMSecs(value).toString(\'mm:ss\') for value in values]\n        return [int2dt(value).strftime(""%H:%M:%S.%f"") for value in values]\n\n\nclass MyApplication(QtGui.QApplication):\n    def __init__(self, *args, **kwargs):\n        super(MyApplication, self).__init__(*args, **kwargs)\n        # self.t = QTime()\n        # self.t.start()\n\n        maxlen = 50\n        self.data_x = RingBuffer(maxlen)\n        self.data_y = RingBuffer(maxlen)\n\n        self.win = pg.GraphicsWindow(title=""Basic plotting examples"")\n        self.win.resize(1000, 600)\n        self.win.setWindowTitle(\'Plot with PyQtGraph\')\n\n        self.plot = self.win.addPlot(title=\'Timed data\', axisItems={\'bottom\': TimeAxisItem(orientation=\'bottom\')})\n        # self.plot.setYRange(0, 150)\n\n        # self.curve = self.plot.plot()\n\n        pen = pg.mkPen(\'r\', style=QtCore.Qt.SolidLine)\n        self.curve = self.plot.plot(pen=pen, symbol=\'+\')\n\n        self.timer = QTimer()\n        self.timer.timeout.connect(self.update)\n        self.timer.start(100)\n\n        self.y = 100\n\n    def update(self):\n        # self.data.append({\'x\': self.t.elapsed(), \'y\': np.random.randint(0, 100)})\n        x = now_timestamp()\n        self.y = self.y + np.random.uniform(-1, 1)\n\n        self.data_x.append(x)\n        self.data_y.append(self.y)\n\n        self.curve.setData(x=self.data_x, y=self.data_y)\n\n\ndef main():\n    # Set PyQtGraph colors\n    pg.setConfigOption(\'background\', \'w\')\n    pg.setConfigOption(\'foreground\', \'k\')\n\n    # Enable antialiasing for prettier plots\n    pg.setConfigOptions(antialias=True)\n\n    app = MyApplication(sys.argv)\n    sys.exit(app.exec_())\n\n\nif __name__ == \'__main__\':\n    main()\n'"
samples/timestamp.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n""""""\nSome function to manage datetime / timedelta\nas integer (unix timestamp)\n\nUsage:\n\nfrom timestamp import *\n""""""\n\nimport datetime\nimport pytz\n\nUNIX_EPOCH_naive = datetime.datetime(1970, 1, 1, 0, 0)  # offset-naive datetime\nUNIX_EPOCH_offset_aware = datetime.datetime(1970, 1, 1, 0, 0, tzinfo=pytz.utc)  # offset-aware datetime\nUNIX_EPOCH = UNIX_EPOCH_naive\n\nTS_MULT_us = 1e6\n\n\ndef now_timestamp(ts_mult=TS_MULT_us, epoch=UNIX_EPOCH):\n    return int((datetime.datetime.utcnow() - epoch).total_seconds() * ts_mult)\n\n\ndef int2dt(ts, ts_mult=TS_MULT_us):\n    """"""Returns datetime from timestamp (integer)""""""\n    return datetime.datetime.utcfromtimestamp(float(ts / ts_mult))\n\n\ndef dt2int(dt, ts_mult=TS_MULT_us, epoch=UNIX_EPOCH):\n    """"""Returns integer from timedelta""""""\n    delta = dt - epoch\n    return(int(delta.total_seconds() * ts_mult))\n\n\ndef td2int(td, ts_mult=TS_MULT_us):\n    """"""Returns integer from datetime""""""\n    return int(td.total_seconds() * ts_mult)\n\n\ndef int2td(ts, ts_mult=TS_MULT_us):\n    """"""Returns timedelta from timestamp (integer)""""""\n    return datetime.timedelta(seconds=float(ts) / ts_mult)\n\n\ndef int_from_last_candle(dt, td):\n    """"""Returns integer from datetime and timedelta""""""\n    return dt2int(dt) - dt2int(dt) % td2int(td)\n\n# def int_to_next_candle(dt, td):\n#    return(dt2int(dt) + dt2int(dt) % td2int(td))\n\n\ndef ts_candle_from_ts(ts, timeframe_int):\n    """"""Return candle timestamp from a timestamp and a given timeframe (integer)""""""\n    return (ts // timeframe_int) * timeframe_int\n'"
tests/test_ring.py,2,"b'#!/usr/bin/env python\n\nfrom numpy_buffer import RingBuffer\nimport numpy as np\n\n\ndef test_ring():\n    N = 10\n\n    def print_overflow(*args, **kwargs):\n        print(""OVERFLOW of %s"" % args[0])\n        # raise NotImplementedError\n    ring = RingBuffer(size_max=N, default_value=0.0, dtype=float, overflow=print_overflow)\n    for i in range(1, N + 5):\n        ring.append(i)\n        assert ring[0] == i\n        if i < N:\n            assert not ring.full\n        else:\n            assert ring.full\n\n    assert isinstance(ring.all, np.ndarray)\n    assert isinstance(ring.partial, np.ndarray)\n\n\ndef test_min_max():\n    N = 5\n    ring = RingBuffer(size_max=N, default_value=-1)\n    ring.append(2)\n    ring.append(1)\n    ring.append(4)\n    ring.append(3)\n    assert ring.min() == 1\n    assert ring.min(all=True) == -1\n    assert ring.max() == 4\n'"
