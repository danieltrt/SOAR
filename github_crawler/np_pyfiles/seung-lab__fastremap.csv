file_path,api_count,code
automated_test.py,192,"b'import pytest\n\nimport numpy as np\n\nimport fastremap\n\nDTYPES = (\n  np.uint8, np.uint16, np.uint32, np.uint64,\n  np.int8, np.int16, np.int32, np.int64\n)\n\ndef test_empty_renumber():\n  for dtype in DTYPES:\n    data = np.array([], dtype=dtype)\n    data2, remapdict = fastremap.renumber(data, preserve_zero=False)\n\n    assert np.all(data2 == [])\n    assert remapdict == {}\n\ndef test_1d_renumber():\n  for dtype in DTYPES:\n    print(dtype)\n    data = np.arange(8).astype(dtype)\n    data = np.flip(data)\n\n    data2 = np.copy(data)\n    data2, remapdict = fastremap.renumber(data2, preserve_zero=False)\n\n    assert np.all(data2 == np.arange(1,9))\n    assert len(remapdict) > 0\n\n    data2 = np.copy(data)\n    data2, remapdict = fastremap.renumber(data2, preserve_zero=True)\n\n    assert data2[-1] == 0\n    assert np.all(data2 == [1,2,3,4,5,6,7,0])\n    assert len(remapdict) > 0\n\n  data = np.arange(8).astype(np.bool)\n  data = np.flip(data)\n\n  data2 = np.copy(data)\n  data2, remapdict = fastremap.renumber(data2, preserve_zero=False)\n\n  assert np.all(data2 == [1,1,1,1,1,1,1,2])\n  assert len(remapdict) > 0\n\n  data2 = np.copy(data)\n  data2, remapdict = fastremap.renumber(data2, preserve_zero=True)\n\n  assert np.all(data2 == [1,1,1,1,1,1,1,0])\n  assert len(remapdict) > 0\n\ndef test_2d_renumber():\n  for dtype in DTYPES:\n    data = np.array([\n      [ 5,  5,  5, 2],\n      [ 3,  5,  5, 0],\n      [ 1,  2,  4, 1],\n      [20, 19, 20, 1],\n    ], dtype=dtype)\n\n    data2 = np.copy(data, order=\'C\')\n    data2, remapdict = fastremap.renumber(data2, preserve_zero=True)\n\n    assert np.all(data2 == [\n      [1, 1, 1, 2],\n      [3, 1, 1, 0],\n      [4, 2, 5, 4],\n      [6, 7, 6, 4],\n    ])\n\n    data2 = np.copy(data, order=\'F\')\n    data2, remapdict = fastremap.renumber(data2, preserve_zero=True)\n\n    assert np.all(data2 == [\n      [1, 1, 1, 5],\n      [2, 1, 1, 0],\n      [3, 5, 7, 3],\n      [4, 6, 4, 3],\n    ])\n\n@pytest.mark.parametrize(""dtype"", DTYPES)\ndef test_3d_renumber(dtype):\n  bits = np.dtype(dtype).itemsize * 8\n  big = (2 ** (bits - 1)) - 1 # cover ints and uints\n  data = np.array([\n    [\n      [big, 0],\n      [2, big],\n    ],\n    [\n      [big-5, big-1],\n      [big-7, big-3],\n    ],\n  ], dtype=dtype)\n\n  data2 = np.copy(data, order=\'C\')\n  data2, remapdict = fastremap.renumber(data2, preserve_zero=False)\n\n  assert np.all(data2 == [\n    [\n      [1, 2],\n      [3, 1]\n    ],\n    [ \n      [4, 5],\n      [6, 7],\n    ],\n  ])\n\n  data2 = np.copy(data, order=\'F\')\n  data2, remapdict = fastremap.renumber(data2, preserve_zero=False)\n\n  assert np.all(data2 == [\n    [\n      [1, 5],\n      [3, 1]\n    ],\n    [ \n      [2, 6],\n      [4, 7],\n    ],\n  ])\n\ndef test_3d_renumber_dtype_shift():\n  big = np.random.randint(0, (2**64)-1, size=(128,128,100), dtype=np.uint64)\n  big, remapdict = fastremap.renumber(big, preserve_zero=True, in_place=True)\n  assert np.dtype(big.dtype).itemsize <= 4\n  assert np.dtype(big.dtype).itemsize > 1\n\n@pytest.mark.parametrize(""dtype"", list(DTYPES) + [ np.float32, np.float64 ])\ndef test_remap_1d(dtype):\n  empty = fastremap.remap([], {})\n  assert len(empty) == 0\n\n  data = np.array([1, 2, 2, 2, 3, 4, 5], dtype=dtype)\n  remap = {\n    1: 10,\n    2: 30,\n    3: 15,\n    4: 0,\n    5: 5,\n  }\n\n  result = fastremap.remap(np.copy(data), remap, preserve_missing_labels=False)\n  assert np.all(result == [10, 30, 30, 30, 15, 0, 5])\n\n  del remap[2]\n  try:\n    result = fastremap.remap(np.copy(data), remap, preserve_missing_labels=False)\n    assert False\n  except KeyError:\n    pass \n\n  result = fastremap.remap(np.copy(data), remap, preserve_missing_labels=True)\n  assert np.all(result == [10, 2, 2, 2, 15, 0, 5])\n\n@pytest.mark.parametrize(""dtype"", DTYPES)\ndef test_remap_2d(dtype):\n  data = np.array([[1, 2, 3, 4, 5], [5, 4, 3, 2, 1]], dtype=dtype)\n  remap = {\n    1: 10,\n    2: 30,\n    3: 15,\n    4: 0,\n    5: 5,\n  }\n\n  result = fastremap.remap(np.copy(data), remap, preserve_missing_labels=False)\n  assert np.all(result == [[10, 30, 15, 0, 5], [5, 0, 15, 30, 10]])\n\n  del remap[2]\n  try:\n    result = fastremap.remap(np.copy(data), remap, preserve_missing_labels=False)\n    assert False\n  except KeyError:\n    pass \n\n  result = fastremap.remap(np.copy(data), remap, preserve_missing_labels=True)\n  assert np.all(result == [[10, 2, 15, 0, 5], [5, 0, 15, 2, 10]])\n\n@pytest.mark.parametrize(""dtype"", DTYPES)\n@pytest.mark.parametrize(""in_place"", [ True, False ])\ndef test_mask(dtype, in_place):\n  data = np.arange(100, dtype=dtype)\n  data = fastremap.mask(data, [5, 10, 15, 20], in_place=in_place)\n\n  labels, cts = np.unique(data, return_counts=True)\n  assert cts[0] == 5 \n  assert labels[0] == 0\n  assert np.all(cts[1:] == 1)\n  assert len(labels == 95)\n\n@pytest.mark.parametrize(""dtype"", DTYPES)\n@pytest.mark.parametrize(""in_place"", [ True, False ])\ndef test_mask_except(dtype, in_place):\n  for value in (0, 7, np.iinfo(dtype).max):\n    data = np.arange(100, dtype=dtype)\n    data = fastremap.mask_except(\n      data, [5, 10, 15, 20], \n      in_place=in_place, value=value\n    )\n\n    labels, cts = np.unique(data, return_counts=True)\n    print(labels, cts)\n    res = { lbl: ct for lbl, ct in zip(labels, cts) }\n    assert res == {\n      value: 96,\n      5: 1,\n      10: 1,\n      15: 1, \n      20: 1,\n    }\n\n@pytest.mark.parametrize(""dtype"", list(DTYPES) + [ np.float32, np.float64, np.bool, np.complex64 ])\n@pytest.mark.parametrize(""dim"", [1, 4, 7, 9, 27, 31, 100, 127, 200] )\ndef test_asfortranarray(dtype, dim):\n  x = np.arange(dim**1).reshape((dim)).astype(dtype)\n  y = np.copy(x)\n  assert np.all(np.asfortranarray(x) == fastremap.asfortranarray(y))\n\n  x = np.arange(dim**2).reshape((dim,dim)).astype(dtype)\n  y = np.copy(x)\n  assert np.all(np.asfortranarray(x) == fastremap.asfortranarray(y))\n\n  x = np.arange(dim**3).reshape((dim,dim,dim)).astype(dtype)\n  y = np.copy(x)\n  assert np.all(np.asfortranarray(x) == fastremap.asfortranarray(y))\n\n  x = np.arange(dim**2+dim).reshape((dim,dim+1)).astype(dtype)\n  y = np.copy(x)\n  assert np.all(np.asfortranarray(x) == fastremap.asfortranarray(y))\n\n  x = np.arange(dim**3+dim*dim).reshape((dim,dim+1,dim)).astype(dtype)\n  y = np.copy(x)\n  assert np.all(np.asfortranarray(x) == fastremap.asfortranarray(y))\n\n  if dim < 100:\n    x = np.arange(dim**4).reshape((dim,dim,dim,dim)).astype(dtype)\n    y = np.copy(x)\n    assert np.all(np.asfortranarray(x) == fastremap.asfortranarray(y))\n\n    x = np.arange(dim**4 + dim*dim*dim).reshape((dim+1,dim,dim,dim)).astype(dtype)\n    y = np.copy(x)\n    assert np.all(np.asfortranarray(x) == fastremap.asfortranarray(y))\n\n\n@pytest.mark.parametrize(""dtype"", list(DTYPES) + [ np.float32, np.float64, np.bool, np.complex64 ])\n@pytest.mark.parametrize(""dim"", [1, 4, 7, 9, 27, 31, 100, 127, 200] )\ndef test_ascontiguousarray(dtype, dim):\n  x = np.arange(dim**2).reshape((dim,dim), order=\'F\').astype(dtype)\n  y = np.copy(x, order=\'F\')\n  assert np.all(np.ascontiguousarray(x) == fastremap.ascontiguousarray(y))\n\n  x = np.arange(dim**3).reshape((dim,dim,dim), order=\'F\').astype(dtype)\n  y = np.copy(x, order=\'F\')\n  assert np.all(np.ascontiguousarray(x) == fastremap.ascontiguousarray(y))\n\n  x = np.arange(dim**2+dim).reshape((dim,dim+1), order=\'F\').astype(dtype)\n  y = np.copy(x, order=\'F\')\n  assert np.all(np.ascontiguousarray(x) == fastremap.ascontiguousarray(y))\n\n  x = np.arange(dim**3+dim*dim).reshape((dim,dim+1,dim), order=\'F\').astype(dtype)\n  y = np.copy(x, order=\'F\')\n  assert np.all(np.ascontiguousarray(x) == fastremap.ascontiguousarray(y))\n\n  if dim < 100:\n    x = np.arange(dim**4).reshape((dim,dim,dim,dim)).astype(dtype)\n    y = np.copy(x, order=\'F\')\n    assert np.all(np.ascontiguousarray(x) == fastremap.ascontiguousarray(y))\n\n    x = np.arange(dim**4 + dim*dim*dim).reshape((dim+1,dim,dim,dim)).astype(dtype)\n    y = np.copy(x, order=\'F\')\n    assert np.all(np.ascontiguousarray(x) == fastremap.ascontiguousarray(y))\n\n@pytest.mark.parametrize(""dtype"", [ np.uint8, np.uint16, np.uint32, np.uint64 ])\ndef test_fit_dtype_uint(dtype):\n  assert fastremap.fit_dtype(dtype, 0) == np.uint8\n  assert fastremap.fit_dtype(dtype, 255) == np.uint8\n  assert fastremap.fit_dtype(dtype, 256) == np.uint16\n  assert fastremap.fit_dtype(dtype, 10000) == np.uint16\n  assert fastremap.fit_dtype(dtype, 2**16 - 1) == np.uint16\n  assert fastremap.fit_dtype(dtype, 2**16) == np.uint32\n  assert fastremap.fit_dtype(dtype, 2**32) == np.uint64\n  assert fastremap.fit_dtype(dtype, 2**64 - 1) == np.uint64\n\n  try:\n    fastremap.fit_dtype(dtype, -1)\n    assert False \n  except ValueError:\n    pass\n\n  try:\n    fastremap.fit_dtype(dtype, 2**64)\n  except ValueError:\n    pass\n\n@pytest.mark.parametrize(""dtype"", [ np.int8, np.int16, np.int32, np.int64 ])\ndef test_fit_dtype_int(dtype):\n  assert fastremap.fit_dtype(dtype, 0) == np.int8\n  assert fastremap.fit_dtype(dtype, 127) == np.int8\n  assert fastremap.fit_dtype(dtype, -128) == np.int8\n  assert fastremap.fit_dtype(dtype, 128) == np.int16\n  assert fastremap.fit_dtype(dtype, 10000) == np.int16\n  assert fastremap.fit_dtype(dtype, 2**15 - 1) == np.int16\n  assert fastremap.fit_dtype(dtype, 2**15) == np.int32\n  assert fastremap.fit_dtype(dtype, 2**32) == np.int64\n  assert fastremap.fit_dtype(dtype, 2**63 - 1) == np.int64\n\n  try:\n    fastremap.fit_dtype(dtype, 2**63)\n  except ValueError:\n    pass\n\n  try:\n    fastremap.fit_dtype(dtype, -2**63)\n  except ValueError:\n    pass\n\n@pytest.mark.parametrize(""dtype"", [ np.float16, np.float32, np.float64 ])\ndef test_fit_dtype_float(dtype):\n  assert fastremap.fit_dtype(dtype, 0) == np.float32\n  assert fastremap.fit_dtype(dtype, 127) == np.float32\n  assert fastremap.fit_dtype(dtype, 128) == np.float32\n  assert fastremap.fit_dtype(dtype, 10000) == np.float32\n  assert fastremap.fit_dtype(dtype, 2**15 - 1) == np.float32\n  assert fastremap.fit_dtype(dtype, 2**15) == np.float32\n  assert fastremap.fit_dtype(dtype, 2**32) == np.float32\n  assert fastremap.fit_dtype(dtype, 2**63 - 1) == np.float32\n  assert fastremap.fit_dtype(dtype, -2**63) == np.float32\n  assert fastremap.fit_dtype(dtype, 2**128) == np.float64\n\n  assert fastremap.fit_dtype(dtype, 0, exotics=True) == np.float16\n  assert fastremap.fit_dtype(dtype, 127, exotics=True) == np.float16\n  assert fastremap.fit_dtype(dtype, 128, exotics=True) == np.float16\n  assert fastremap.fit_dtype(dtype, 10000, exotics=True) == np.float16\n  assert fastremap.fit_dtype(dtype, 2**15 - 1, exotics=True) == np.float16\n  assert fastremap.fit_dtype(dtype, 2**15, exotics=True) == np.float16\n  assert fastremap.fit_dtype(dtype, 2**32, exotics=True) == np.float32\n  assert fastremap.fit_dtype(dtype, 2**63 - 1, exotics=True) == np.float32\n  assert fastremap.fit_dtype(dtype, -2**63, exotics=True) == np.float32\n\n@pytest.mark.parametrize(""dtype"", [ np.csingle, np.cdouble ])\n@pytest.mark.parametrize(""sign"", [ 1, -1, 1j, -1j ])\ndef test_fit_dtype_float(dtype, sign):\n  assert fastremap.fit_dtype(dtype, sign * 0+0j) == np.csingle\n  assert fastremap.fit_dtype(dtype, sign * 127) == np.csingle\n  assert fastremap.fit_dtype(dtype, sign * 127) == np.csingle\n  assert fastremap.fit_dtype(dtype, sign * 128) == np.csingle\n  assert fastremap.fit_dtype(dtype, sign * 128) == np.csingle\n  assert fastremap.fit_dtype(dtype, sign * 10000) == np.csingle\n  assert fastremap.fit_dtype(dtype, sign * 10000) == np.csingle\n  assert fastremap.fit_dtype(dtype, sign * 2**15 - 1) == np.csingle\n  assert fastremap.fit_dtype(dtype, sign * 2**15) == np.csingle\n  assert fastremap.fit_dtype(dtype, sign * 2**32) == np.csingle\n  assert fastremap.fit_dtype(dtype, sign * 2**63 - 1) == np.csingle\n  assert fastremap.fit_dtype(dtype, -2**63) == np.csingle\n  \n  try:\n    fastremap.fit_dtype(dtype, sign * 2**128)\n    assert False\n  except ValueError:\n    pass\n\n  assert fastremap.fit_dtype(dtype, sign * 2**128, exotics=True) == np.cdouble\n\ndef test_minmax():\n  volume = np.random.randint(-500, 500, size=(128,128,128))\n  minval, maxval = fastremap.minmax(volume)\n  assert minval == np.min(volume)\n  assert maxval == np.max(volume)\n\ndef test_unique():\n  # array_unique\n  labels = np.random.randint(0, 500, size=(128,128,128))\n  uniq_np, cts_np = np.unique(labels, return_counts=True)\n  uniq_fr, cts_fr = fastremap.unique(labels, return_counts=True)\n  assert np.all(uniq_np == uniq_fr)\n  assert np.all(cts_np == cts_fr)\n\n  labels = np.random.randint(0, 500, size=(128,128,128))\n  uniq_np, cts_np = np.unique(labels, return_counts=True)\n  uniq_fr, cts_fr = fastremap.unique_via_array(labels.flatten(), np.max(labels))\n  assert np.all(uniq_np == uniq_fr)\n  assert np.all(cts_np == cts_fr)\n\n  # array_unique + shift\n  labels = np.random.randint(-500, 500, size=(128,128,128))\n  uniq_np, cts_np = np.unique(labels, return_counts=True)\n  uniq_fr, cts_fr = fastremap.unique(labels, return_counts=True)\n  assert np.all(uniq_np == uniq_fr)\n  assert np.all(cts_np == cts_fr)\n\n  labels = np.random.randint(-500, 500, size=(128,128,128))\n  uniq_np, cts_np = np.unique(labels, return_counts=True)\n  uniq_fr, cts_fr = fastremap.unique_via_shifted_array(labels.flatten())\n  assert np.all(uniq_np == uniq_fr)\n  assert np.all(cts_np == cts_fr)\n\n  # array_unique + shift\n  labels = np.random.randint(128**3 - 500, 128**3 + 500, size=(128,128,128))\n  uniq_np, cts_np = np.unique(labels, return_counts=True)\n  uniq_fr, cts_fr = fastremap.unique(labels, return_counts=True)\n  assert np.all(uniq_np == uniq_fr)\n  assert np.all(cts_np == cts_fr)\n\n  # array_unique + shift\n  labels = np.random.randint(128**3 - 500, 128**3 + 500, size=(128,128,128))\n  uniq_np, cts_np = np.unique(labels, return_counts=True)\n  uniq_fr, cts_fr = fastremap.unique_via_shifted_array(labels.flatten())\n  assert np.all(uniq_np == uniq_fr)\n  assert np.all(cts_np == cts_fr)\n\n  # renumber + array_unique\n  labels = np.random.randint(0, 1, size=(128,128,128))\n  labels[0,0,0] = 128**3 + 10\n  uniq_np, cts_np = np.unique(labels, return_counts=True)\n  uniq_fr, cts_fr = fastremap.unique(labels, return_counts=True)\n  assert np.all(uniq_np == uniq_fr)\n  assert np.all(cts_np == cts_fr)  \n\n  labels = np.random.randint(0, 1, size=(128,128,128))\n  labels[0,0,0] = 128**3 + 10\n  uniq_np, cts_np = np.unique(labels, return_counts=True)\n  uniq_fr, cts_fr = fastremap.unique_via_renumber(labels.flatten())\n  assert np.all(uniq_np == uniq_fr)\n  assert np.all(cts_np == cts_fr)  \n\n  # sort\n  labels = np.random.randint(-1000, 128**3, size=(100,100,100))\n  uniq_np, cts_np = np.unique(labels, return_counts=True)\n  uniq_fr, cts_fr = fastremap.unique(labels, return_counts=True)\n  assert np.all(uniq_np == uniq_fr)\n  assert np.all(cts_np == cts_fr)  \n\n  labels = np.random.randint(-1000, 128**3, size=(100,100,100))\n  uniq_np, cts_np = np.unique(labels, return_counts=True)\n  uniq_fr, cts_fr = fastremap.unique_via_sort(labels.flatten())\n  assert np.all(uniq_np == uniq_fr)\n  assert np.all(cts_np == cts_fr)  \n\ndef test_renumber_remap():\n  labels = np.random.randint(-500, 500, size=(128,128,128)).astype(np.int64)\n  new_labels, remap = fastremap.renumber(labels, in_place=False)\n  remap = { v:k for k,v in remap.items() }\n  new_labels = fastremap.remap(new_labels, remap, in_place=True)\n  assert np.all(labels == new_labels)\n  assert new_labels.dtype in (np.int8, np.int16)\n  assert labels.dtype == np.int64\n\n@pytest.mark.parametrize(""dtype_cc"", DTYPES)\n@pytest.mark.parametrize(""dtype_p"", DTYPES)\ndef test_component_map(dtype_cc, dtype_p):\n  shape = (128,128,128)\n  cc_labels = np.random.randint(0, 100, size=shape).astype(dtype_cc)\n  parent_labels = (cc_labels + 1).astype(dtype_p)\n\n  mapping = fastremap.component_map(cc_labels, parent_labels)\n  for k,v in mapping.items():\n    assert k == v - 1\n\n  mapping = fastremap.component_map([ 1, 2, 3, 4 ], [ 5, 5, 6, 7 ])\n  assert mapping == { 1: 5, 2: 5, 3: 6, 4: 7 }\n\n  mapping = fastremap.component_map([], [])\n\n\n@pytest.mark.parametrize(""dtype_cc"", DTYPES)\n@pytest.mark.parametrize(""dtype_p"", DTYPES)\ndef test_inverse_component_map(dtype_cc, dtype_p):\n  mapping = fastremap.inverse_component_map([ 1, 2, 1, 3 ], [ 4, 4, 5, 6 ])\n  assert mapping == { 1: [ 4, 5 ], 2: [ 4 ], 3: [ 6 ] }\n\n  mapping = fastremap.inverse_component_map([], [])\n'"
setup.py,1,"b'#!/usr/bin/env python\nimport setuptools\nimport sys\n\nimport numpy as np\n\n# NOTE: If fastremap.cpp does not exist, you must run\n# cython -3 --cplus fastremap.pyx\n\nextra_compile_args = [\n  \'-std=c++11\', \'-O3\', \n]\n\nif sys.platform == \'darwin\':\n  extra_compile_args += [ \'-stdlib=libc++\', \'-mmacosx-version-min=10.9\' ]\n\nsetuptools.setup(\n  setup_requires=[\'pbr\', \'numpy\'],\n  extras_require={\n     \':python_version == ""2.7""\': [\'futures\'],\n     \':python_version == ""2.6""\': [\'futures\'],\n  },\n  pbr=True,\n  ext_modules=[\n    setuptools.Extension(\n      \'fastremap\',\n      sources=[ \'fastremap.cpp\' ],\n      depends=[],\n      language=\'c++\',\n      include_dirs=[ np.get_include() ],\n      extra_compile_args=extra_compile_args,\n    ) \n  ],\n  long_description_content_type=\'text/markdown\',\n)\n\n'"
test.py,3,"b'import fastremap\nimport numpy as np \n\nx = np.ones((512,512,512), dtype=np.float32)\nx = fastremap.asfortranarray(x)\nprint(x)\nprint(x.flags)\nprint(x.strides)\n\nprint(x.dtype)\n\n\n\n# @profile\n# def run():\n#   x = np.ones( (512,512,512), dtype=np.uint32, order=\'C\')\n#   x += 1\n#   print(x.strides, x.flags)\n#   y = np.asfortranarray(x)\n#   print(x.strides, x.flags)\n\n#   print(""done."")\n\n# run()'"
