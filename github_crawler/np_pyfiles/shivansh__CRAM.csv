file_path,api_count,code
cram/manage.py,0,"b'#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == ""__main__"":\n    os.environ.setdefault(""DJANGO_SETTINGS_MODULE"", ""cram.settings"")\n\n    from django.core.management import execute_from_command_line\n\n    execute_from_command_line(sys.argv)\n'"
data_mining/read-csv.py,0,"b""import pandas as pd\nfrom collections import defaultdict\nimport csv\n\n# df = pd.read_csv('./output_file.csv')\n# column = df['COURSE No.']\n\ncolumns = defaultdict(list) # each value in each column is appended to a list\n\nwith open('output_file.csv') as f:\n    reader = csv.reader(f)\n    reader.next()\n    for row in reader:\n\tfor (i,v) in enumerate(row):\n\t    columns[i].append(v)\n\nprint(columns[3])\n"""
data_mining/scrape.py,0,"b'from bs4 import BeautifulSoup\nimport urllib2\nimport csv\n\nfor roll in range(11001, 11800):\n    url = ""http://172.26.142.68/dccourse/studdc.php?roll_no="" + str(roll)\n    page = urllib2.urlopen(url)\n    soup = BeautifulSoup(page.read())\n\n    table = soup.find(\'table\')\n    rows = []\n\n    for row in table.find_all(\'tr\'):\n        rows.append([val.text.encode(\'utf8\') for val in row.find_all(\'td\')])\n\n    for nrow in rows:\n        nrow.append(str(roll))\n\n    with open(\'output_file.csv\', \'a\') as f:\n        writer = csv.writer(f)\n        writer.writerows(row for row in rows if row)\n'"
cram/cram/__init__.py,0,b''
cram/cram/settings.py,0,"b'""""""\nDjango settings for cram project.\n\nGenerated by \'django-admin startproject\' using Django 1.8.15.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/1.8/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/1.8/ref/settings/\n""""""\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nimport os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = \'m526n%r2^r=)v701!*@u-=7(z=^#b=fb1a-j4umvyruq35euw8\'\n\n# SECURITY WARNING: don\'t run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = (\n    \'django.contrib.admin\',\n    \'django.contrib.auth\',\n    \'django.contrib.contenttypes\',\n    \'django.contrib.sessions\',\n    \'django.contrib.messages\',\n    \'django.contrib.staticfiles\',\n    \'users\',\n)\n\nMIDDLEWARE_CLASSES = (\n    \'django.contrib.sessions.middleware.SessionMiddleware\',\n    \'django.middleware.common.CommonMiddleware\',\n    \'django.middleware.csrf.CsrfViewMiddleware\',\n    \'django.contrib.auth.middleware.AuthenticationMiddleware\',\n    \'django.contrib.auth.middleware.SessionAuthenticationMiddleware\',\n    \'django.contrib.messages.middleware.MessageMiddleware\',\n    \'django.middleware.clickjacking.XFrameOptionsMiddleware\',\n    \'django.middleware.security.SecurityMiddleware\',\n)\n\nROOT_URLCONF = \'cram.urls\'\n\nTEMPLATES = [\n    {\n        \'BACKEND\': \'django.template.backends.django.DjangoTemplates\',\n        \'DIRS\': [],\n        \'APP_DIRS\': True,\n        \'OPTIONS\': {\n            \'context_processors\': [\n                \'django.template.context_processors.debug\',\n                \'django.template.context_processors.request\',\n                \'django.contrib.auth.context_processors.auth\',\n                \'django.contrib.messages.context_processors.messages\',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = \'cram.wsgi.application\'\n\n\n# Database\n# https://docs.djangoproject.com/en/1.8/ref/settings/#databases\n\nDATABASES = {\n    \'default\': {\n        \'ENGINE\': \'django.db.backends.sqlite3\',\n        \'NAME\': os.path.join(BASE_DIR, \'db.sqlite3\'),\n    }\n}\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/1.8/topics/i18n/\n\nLANGUAGE_CODE = \'en-us\'\n\nTIME_ZONE = \'UTC\'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/1.8/howto/static-files/\n\nSTATIC_URL = \'/static/\'\n'"
cram/cram/urls.py,0,"b'""""""cram URL Configuration\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/1.8/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  url(r\'^$\', views.home, name=\'home\')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  url(r\'^$\', Home.as_view(), name=\'home\')\nIncluding another URLconf\n    1. Add a URL to urlpatterns:  url(r\'^blog/\', include(\'blog.urls\'))\n""""""\nfrom django.conf.urls import include, url\nfrom django.contrib import admin\nfrom users import views\n\nurlpatterns = [\n    # url(r\'^admin/\', include(admin.site.urls)),\n    url(r\'^$\', views.home_page, name=\'home\')\n]\n'"
cram/cram/wsgi.py,0,"b'""""""\nWSGI config for cram project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/1.8/howto/deployment/wsgi/\n""""""\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault(""DJANGO_SETTINGS_MODULE"", ""cram.settings"")\n\napplication = get_wsgi_application()\n'"
cram/functional_tests/__init__.py,0,b''
cram/functional_tests/tests.py,0,"b'from django.test import LiveServerTestCase\nfrom selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nimport unittest\n\nclass NewTest(LiveServerTestCase):\n    def setUp(self):\n        self.browser = webdriver.Firefox()\n\n    def tearDown(self):\n        self.browser.quit()\n\n    def check_for_row(self, row_text):\n        table = self.browser.find_element_by_id(\'id_list_table\')\n        rows = table.find_elements_by_tag_name(\'tr\')\n        self.assertIn(row_text, [row.text for row in rows])\n\n    def test_correct_html(self):\n        self.browser.get(self.live_server_url)\n        self.assertIn(\'To-Do lists\', self.browser.title)\n        header_text = self.browser.find_element_by_tag_name(\'h1\').text\n        self.assertIn(\'To-Do\', header_text)\n\n        inputbox = self.browser.find_element_by_id(\'id_new_item\')\n        self.assertEqual(\n                inputbox.get_attribute(\'placeholder\'),\n                \'Enter a to-do item\'\n                )\n\n        inputbox.send_keys(\'1: Buy peacock feathers\')\n\n        inputbox.send_keys(Keys.ENTER)\n        # import time\n        # time.sleep(60)\n\n        table = self.browser.find_element_by_id(\'id_list_table\')\n        rows = table.find_elements_by_tag_name(\'tr\')\n        # self.check_for_row(\'1. DevFest\')\n\n        # self.fail(\'Finish the test\')\n\n# The following lines are not required with LiveServerTestCase\n""""""\nif __name__ == \'__main__\':\n    unittest.main(warnings=\'ignore\')\n""""""\n'"
cram/users/__init__.py,0,b''
cram/users/admin.py,0,b'from django.contrib import admin\n\n# Register your models here.\n'
cram/users/kball.py,1,"b'from sklearn.neighbors import NearestNeighbors\nimport csv\nfrom numpy import genfromtxt\nimport numpy as np\n\n## load all the data files\ndat_mat_1 = genfromtxt(\'users/csv/dat_1.csv\', delimiter=\',\')\ndat_mat_2 = genfromtxt(\'users/csv/dat_2.csv\', delimiter=\',\')\ndat_mat_3 = genfromtxt(\'users/csv/dat_3.csv\', delimiter=\',\')\ndat_mat_4 = genfromtxt(\'users/csv/dat_4.csv\', delimiter=\',\')\ndat_mat_5 = genfromtxt(\'users/csv/dat_5.csv\', delimiter=\',\')\ndat_mat_6 = genfromtxt(\'users/csv/dat_6.csv\', delimiter=\',\')\nwith open(\'users/csv/crvocab.csv\', \'r\') as f:\n    voc = list(csv.reader(f))\n\n""""""\nquery_vector is the binary vector of the courses done by the person whose roll number has been queried\n""""""\n\ndef find_neighbour(query_vector, roll_no, neighbours):\n    if ((roll_no > 13000) & (roll_no < 14000)):\n        nbrs = NearestNeighbors(n_neighbors = neighbours, algorithm = \'auto\').fit(dat_mat_1)\n        distances, indices = nbrs.kneighbors(query_vector)\n        return indices\n\n    elif ((roll_no > 14000) & (roll_no < 15000)):\n        nbrs_5 = NearestNeighbors(n_neighbors = neighbours, algorithm = \'auto\').fit(dat_mat_5)\n        distances_5, indices_5 = nbrs_5.kneighbors(query_vector)\n        return indices_5\n\n    elif ((roll_no > 150000) & (roll_no < 151000)):\n        nbrs_3 = NearestNeighbors(n_neighbors = neighbours, algorithm = \'auto\').fit(dat_mat_3)\n        distances_3, indices_3 = nbrs_3.kneighbors(query_vector)\n        return indices_3\n\ndef predict_courses(query_vector, roll_no, neighbours):\n    if ((roll_no > 13000) & (roll_no < 14000)):\n        indice = find_neighbour(query_vector, roll_no, neighbours)\n        course_vec = dat_mat_2[indice[0,:],:] - dat_mat_1[indice[0,:],:]\n\n    elif ((roll_no > 14000) & (roll_no < 15000)):\n        indice = find_neighbour(query_vector, roll_no, neighbours)\n        course_vec = dat_mat_6[indice[0,:],:] - dat_mat_5[indice[0,:],:]\n\n    elif ((roll_no > 150000) & (roll_no < 151000)):\n        indice = find_neighbour(query_vector, roll_no, neighbours)\n        course_vec = dat_mat_4[indice[0,:],:] - dat_mat_3[indice[0,:],:]\n\n    return course_vec\n\ndef kmfunc(licrs, roll_no, neighbours):\n    onehot = np.zeros((786, ))\n    for course in licrs:\n        for i in range(786):\n            if(voc[i][0] == course):\n                onehot[i] = 1\n                break\n\n    query_vector = onehot\n    reco = list()\n    ml =  predict_courses(query_vector, roll_no, neighbours)\n    for i in range(neighbours):\n        xxx = list()\n        for j in range(786):\n            if ml[i,j] == 1:\n                xxx.append(voc[j][0])\n        reco.append(xxx)\n    y = list()\n\n    for item in reco:\n        for course in item:\n            if course not in y:\n                y.append(course)\n    return y[0:10]\n'"
cram/users/models.py,0,"b""from django.db import models\n\nclass Item(models.Model):\n    text = models.TextField(default='')\n\n# Create your models here.\n"""
cram/users/scrape_user.py,0,"b'from bs4 import BeautifulSoup\nimport csv\nimport pandas as pd\nfrom collections import defaultdict\nimport os\n\nimport urllib.request\n\ndef scrape(roll):\n    url = ""http://172.26.142.68/dccourse/studdc.php?roll_no="" + str(roll)\n    request = urllib.request.Request(url)\n    response = urllib.request.urlopen(request)\n    soup = BeautifulSoup(response.read(), ""lxml"")\n\n    table = soup.find(\'table\')\n\n    rows = []\n\n    for row in table.find_all(\'tr\'):\n        rows.append([val.text.encode(\'utf8\') for val in row.find_all(\'td\', limit=4)])\n\n    with open(\'output.csv\', \'w\') as f:\n        writer = csv.writer(f)\n        writer.writerows(row for row in rows if row)\n\n    columns = defaultdict(list) # each value in each column is appended to a list\n\n    with open(\'output.csv\') as f:\n        reader = csv.reader(f)\n        # reader.next()\n        for row in reader:\n            for (i,v) in enumerate(row):\n                columns[i].append(v[3:len(v)-2])\n\n    # Output file is no longer required\n    os.remove(\'output.csv\')\n\n    return columns[2]\n\n'"
cram/users/tests.py,0,"b'from django.core.urlresolvers import resolve\nfrom django.test import TestCase\nfrom users.views import home_page\nfrom django.http import HttpRequest\nfrom django.template.loader import render_to_string\nfrom users.models import Item\n\nclass HomePageTest(TestCase):\n    def test_root_resolves(self):\n        found = resolve(\'/\')\n        self.assertEqual(found.func, home_page)\n\n    def test_home_html(self):\n        request = HttpRequest()\n        response = home_page(request)\n        expected_html = render_to_string(\'home.html\')\n\n        self.assertEqual(response.content.decode(), expected_html)\n        # self.assertTrue(response.content.startswith(b\'<html>\'))\n        # self.assertIn(b\'<title>To-Do lists</title>\', response.content)\n        # self.assertTrue(response.content.strip().endswith(b\'</html>\'))\n        # print (repr(response.content))\n\n    def test_save_item_when_required(self):\n        request = HttpRequest()\n        home_page(request)\n        self.assertEqual(Item.objects.count(), 0)\n\n    def test_save_request(self):\n        request = HttpRequest()\n        request.method = \'POST\'\n        request.POST[\'item_text\'] = \'A new list item\'\n\n        response = home_page(request)\n\n        self.assertEqual(Item.objects.count(), 1)\n        new_item = Item.objects.first()\n        self.assertEqual(new_item.text, \'A new list item\')\n\n        # The following test is now no longer required since we now redirect\n        """"""\n        self.assertIn(\'A new list item\', response.content.decode())\n        expected_html = render_to_string(\n                \'home.html\',\n                {\'new_item_text\': \'A new list item\'}\n                )\n        self.assertEqual(response.content.decode(), expected_html)\n        """"""\n\n    def test_redirect_after_POST(self):\n        request = HttpRequest()\n        request.method = \'POST\'\n        request.POST[\'item_text\'] = \'A new list item\'\n\n        response = home_page(request)\n\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(response[\'location\'], \'/\')\n\n    def test_displays_all_items(self):\n        Item.objects.create(text=\'Item 1\')\n        Item.objects.create(text=\'Item 2\')\n\n        request = HttpRequest()\n        response = home_page(request)\n        self.assertIn(\'Item 1\', response.content.decode())\n        self.assertIn(\'Item 2\', response.content.decode())\n\nclass ItemModelTest(TestCase):\n    def test_saving_and_retrieving_items(self):\n        first_item = Item()\n        first_item.text = \'The first (ever) list item\'\n        first_item.save()\n\n        second_item = Item()\n        second_item.text = \'Item the second\'\n        second_item.save()\n\n        saved_items = Item.objects.all()\n        self.assertEqual(saved_items.count(), 2)\n\n        first_saved_item = saved_items[0]\n        second_saved_item = saved_items[1]\n        self.assertEqual(first_saved_item.text, \'The first (ever) list item\')\n        self.assertEqual(second_saved_item.text, \'Item the second\')\n'"
cram/users/views.py,0,"b'from django.shortcuts import render, redirect\nfrom django.http import HttpResponse\nfrom users.models import Item\nfrom users.scrape_user import scrape\nfrom users.kball import kmfunc\n\ndef home_page(request):\n    roll_no = \'\'\n    course_list = []\n    recommended_courses = []\n    items = []\n    if request.method == \'POST\':\n        roll_no = int(request.POST[\'item_text\'])\n        course_list = scrape(roll_no)\n\n        # Removing the database logic for improved latency\n        """"""\n        for course in course_list:\n            Item.objects.create(text=course)\n        """"""\n\n        recommended_courses = kmfunc(course_list[1:], roll_no, 25)\n\n        return render(request, \'home.html\', {\n            \'recommended_courses\': recommended_courses,\n            \'items\': course_list[len(course_list)-10 : ],\n            \'roll_no\': roll_no\n            })\n\n    return render(request, \'home.html\', {\n        \'recommended_courses\': recommended_courses,\n        \'items\': course_list[len(course_list)-10 : ],\n        \'roll_no\': roll_no\n        })\n'"
superlists/lists/kball.py,1,"b""from sklearn.neighbors import NearestNeighbors\nimport csv\nfrom numpy import genfromtxt\nimport numpy as np\n\ndat_mat_3 = genfromtxt('lists/csv/dat_3.csv', delimiter=',')\ndat_mat_4 = genfromtxt('lists/csv/dat_4.csv', delimiter=',')\ndat_mat_5 = genfromtxt('lists/csv/dat_5.csv', delimiter=',')\ndat_mat_6 = genfromtxt('lists/csv/dat_6.csv', delimiter=',')\ndat_mat_7 = genfromtxt('lists/csv/dat_7.csv', delimiter=',')\ndat_mat_8 = genfromtxt('lists/csv/dat_8.csv', delimiter=',')\nwith open('lists/csv/crvocab.csv', 'r') as f:\n    voc = list(csv.reader(f))\n\n##load all the data files\n##querry is the binary vector of the courses done by th guy whose roll no. has been entered\n\ndef find_neighbr(querry,roll_no,neighbours):\n    if ((roll_no>14000) & (roll_no<15000)):\n        nbrs_5 = NearestNeighbors(n_neighbors=neighbours, algorithm='auto').fit(dat_mat_5)\n        distances_5, indices_5 = nbrs_5.kneighbors(querry)\n        return indices_5\n\n    elif ((roll_no>150000) & (roll_no<151000)):\n        nbrs_3 = NearestNeighbors(n_neighbors=neighbours, algorithm='auto').fit(dat_mat_3)\n        distances_3, indices_3 = nbrs_3.kneighbors(querry)\n        return indices_3\n\n    elif ((roll_no>13000) & (roll_no<14000)):\n        nbrs = NearestNeighbors(n_neighbors=neighbours, algorithm='auto').fit(dat_mat_7)\n        distances, indices = nbrs.kneighbors(querry)\n        return indices\n\ndef predict_courses(querry,roll_no,neighbours):\n    if ((roll_no>14000) & (roll_no<15000)):\n        indice=find_neighbr(querry,roll_no,neighbours)\n        course_vec=dat_mat_6[indice[0,:],:]-dat_mat_5[indice[0,:],:]\n\n    elif ((roll_no>150000) & (roll_no<151000)):\n        indice=find_neighbr(querry,roll_no,neighbours)\n        course_vec=dat_mat_4[indice[0,:],:]-dat_mat_3[indice[0,:],:]\n\n    elif ((roll_no>13000)&(roll_no<14000)):\n        indice=find_neighbr(querry,roll_no,neighbours)\n        course_vec=dat_mat_8[indice[0,:],:]-dat_mat_7[indice[0,:],:]\n\n    return course_vec\n\ndef kmfunc(licrs,roll_no,neighbours):\n    onehot = np.zeros((786, ))\n    for course in licrs:\n        for i in range(786):\n            if(voc[i][0] == course):\n                onehot[i] = 1\n                break\n\n    querry = onehot\n    reco = list()\n    ml =  predict_courses(querry,roll_no,neighbours)\n    for i in range(neighbours):\n        xxx = list()\n        for j in range(786):\n            if ml[i,j] == 1:\n                xxx.append(voc[j][0])\n        reco.append(xxx)\n    y = list()\n\n    for item in reco:\n        for course in item:\n            if course not in y:\n                y.append(course)\n    return y[0:10]\n"""
superlists/lists/views.py,0,"b'from django.shortcuts import render, redirect\nfrom django.http import HttpResponse\nfrom lists.models import Item\nfrom lists.scrape_user import scrape\nfrom lists.kball import kmfunc\n\ndef home_page(request):\n    roll_no = \'\'\n    course_list = []\n    recommended_courses = []\n    items = []\n    if request.method == \'POST\':\n        roll_no = int(request.POST[\'item_text\'])\n        course_list = scrape(roll_no)\n\n        # Removing the database logic for improved latency\n        """"""\n        for course in course_list:\n            Item.objects.create(text=course)\n        """"""\n\n        recommended_courses = kmfunc(course_list[1:], roll_no, 25)\n\n        return render(request, \'home.html\', {\n            \'recommended_courses\': recommended_courses,\n            \'items\': course_list[len(course_list)-10:],\n            \'roll_no\': roll_no\n            })\n\n    return render(request, \'home.html\', {\n        \'recommended_courses\': recommended_courses,\n        \'items\': course_list[len(course_list)-10:],\n        \'roll_no\': roll_no\n        })\n'"
cram/users/migrations/0001_initial.py,0,"b""# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Item',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n            ],\n        ),\n    ]\n"""
cram/users/migrations/0002_item_text.py,0,"b""# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('users', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.AddField(\n            model_name='item',\n            name='text',\n            field=models.TextField(default=''),\n        ),\n    ]\n"""
cram/users/migrations/__init__.py,0,b''
