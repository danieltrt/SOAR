file_path,api_count,code
Add_teacher.py,0,"b'# -*- coding: utf-8 -*-\r\n\r\n# Form implementation generated from reading ui file \'Add_teacher.ui\'\r\n#\r\n# Created by: PyQt4 UI code generator 4.11.4\r\n#\r\n# WARNING! All changes made in this file will be lost!\r\n\r\nfrom PyQt4 import QtCore, QtGui\r\n\r\ntry:\r\n    _fromUtf8 = QtCore.QString.fromUtf8\r\nexcept AttributeError:\r\n    def _fromUtf8(s):\r\n        return s\r\n\r\ntry:\r\n    _encoding = QtGui.QApplication.UnicodeUTF8\r\n    def _translate(context, text, disambig):\r\n        return QtGui.QApplication.translate(context, text, disambig, _encoding)\r\nexcept AttributeError:\r\n    def _translate(context, text, disambig):\r\n        return QtGui.QApplication.translate(context, text, disambig)\r\n\r\nclass add_Teacher_Dialog(object):\r\n    def setupUi(self, Dialog):\r\n        Dialog.setObjectName(_fromUtf8(""Dialog""))\r\n        Dialog.resize(257, 138)\r\n        Dialog.setMaximumSize(QtCore.QSize(424, 138))\r\n        self.gridLayout_2 = QtGui.QGridLayout(Dialog)\r\n        self.gridLayout_2.setObjectName(_fromUtf8(""gridLayout_2""))\r\n        self.groupBox = QtGui.QGroupBox(Dialog)\r\n        self.groupBox.setMaximumSize(QtCore.QSize(424, 89))\r\n        self.groupBox.setObjectName(_fromUtf8(""groupBox""))\r\n        self.gridLayout = QtGui.QGridLayout(self.groupBox)\r\n        self.gridLayout.setObjectName(_fromUtf8(""gridLayout""))\r\n        self.horizontalLayout_2 = QtGui.QHBoxLayout()\r\n        self.horizontalLayout_2.setObjectName(_fromUtf8(""horizontalLayout_2""))\r\n        self.label = QtGui.QLabel(self.groupBox)\r\n        self.label.setObjectName(_fromUtf8(""label""))\r\n        self.horizontalLayout_2.addWidget(self.label)\r\n        self.teacher_name = QtGui.QLineEdit(self.groupBox)\r\n        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Fixed)\r\n        sizePolicy.setHorizontalStretch(0)\r\n        sizePolicy.setVerticalStretch(0)\r\n        sizePolicy.setHeightForWidth(self.teacher_name.sizePolicy().hasHeightForWidth())\r\n        self.teacher_name.setSizePolicy(sizePolicy)\r\n        self.teacher_name.setObjectName(_fromUtf8(""teacher_name""))\r\n        self.horizontalLayout_2.addWidget(self.teacher_name)\r\n        self.gridLayout.addLayout(self.horizontalLayout_2, 0, 0, 1, 1)\r\n        self.horizontalLayout_3 = QtGui.QHBoxLayout()\r\n        self.horizontalLayout_3.setObjectName(_fromUtf8(""horizontalLayout_3""))\r\n        self.label_2 = QtGui.QLabel(self.groupBox)\r\n        self.label_2.setMinimumSize(QtCore.QSize(24, 0))\r\n        self.label_2.setObjectName(_fromUtf8(""label_2""))\r\n        self.horizontalLayout_3.addWidget(self.label_2)\r\n        self.subject_name = QtGui.QLineEdit(self.groupBox)\r\n        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Fixed)\r\n        sizePolicy.setHorizontalStretch(0)\r\n        sizePolicy.setVerticalStretch(0)\r\n        sizePolicy.setHeightForWidth(self.subject_name.sizePolicy().hasHeightForWidth())\r\n        self.subject_name.setSizePolicy(sizePolicy)\r\n        self.subject_name.setObjectName(_fromUtf8(""subject_name""))\r\n        self.horizontalLayout_3.addWidget(self.subject_name)\r\n        self.gridLayout.addLayout(self.horizontalLayout_3, 1, 0, 1, 1)\r\n        spacerItem = QtGui.QSpacerItem(20, 10, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)\r\n        self.gridLayout.addItem(spacerItem, 2, 0, 1, 1)\r\n        self.label.raise_()\r\n        self.teacher_name.raise_()\r\n        self.label_2.raise_()\r\n        self.subject_name.raise_()\r\n        self.subject_name.raise_()\r\n        self.gridLayout_2.addWidget(self.groupBox, 0, 0, 1, 1)\r\n        self.horizontalLayout = QtGui.QHBoxLayout()\r\n        self.horizontalLayout.setObjectName(_fromUtf8(""horizontalLayout""))\r\n        self.pushButton = QtGui.QPushButton(Dialog)\r\n        self.pushButton.setObjectName(_fromUtf8(""pushButton""))\r\n        self.horizontalLayout.addWidget(self.pushButton)\r\n        self.cancel = QtGui.QPushButton(Dialog)\r\n        self.cancel.setObjectName(_fromUtf8(""cancel""))\r\n        self.horizontalLayout.addWidget(self.cancel)\r\n        self.back = QtGui.QPushButton(Dialog)\r\n        self.back.setObjectName(_fromUtf8(""back""))\r\n        self.horizontalLayout.addWidget(self.back)\r\n        self.gridLayout_2.addLayout(self.horizontalLayout, 1, 0, 1, 1)\r\n\r\n        self.retranslateUi(Dialog)\r\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\r\n\r\n    def retranslateUi(self, Dialog):\r\n        Dialog.setWindowTitle(_translate(""Dialog"", ""Dialog"", None))\r\n        self.groupBox.setTitle(_translate(""Dialog"", ""Add Teacher"", None))\r\n        self.label.setText(_translate(""Dialog"", ""Teacher\\\'s Name"", None))\r\n        self.label_2.setText(_translate(""Dialog"", ""Subject"", None))\r\n        self.pushButton.setText(_translate(""Dialog"", ""Add"", None))\r\n        self.cancel.setText(_translate(""Dialog"", ""Cancel"", None))\r\n        self.back.setText(_translate(""Dialog"", ""Back"", None))\r\n\r\n\r\n\r\n\r\n'"
DB_manager.py,0,"b'#!/usr/bin/python\nimport sys  \n#reload(sys)  \n#sys.setdefaultencoding(\'utf8\')\nimport mysql.connector\nfrom mysql.connector import errorcode\nfrom datetime import datetime\nimport PIL\nfrom PIL import Image\n\n##===============================================\n\nclass DatabaseUtility: \n\tdef __init__(self, database, tableName):\n\t\tself.db = database\n\t\tself.tableName = tableName\n\n\t\tself.cnx = mysql.connector.connect(user = \'root\',password = \'2406\',host = \'127.0.0.1\')\n\t\tself.cursor = self.cnx.cursor()\n\n\t\tself.ConnectToDatabase()\n\t\t#self.CreateTable()\n\t\t\n\tdef ConnectToDatabase(self):\n\t\ttry:\n\t\t\tself.cnx.database = self.db\n\t\texcept mysql.connector.Error as err:\n\t\t\tif err.errno == errorcode.ER_BAD_DB_ERROR:\n\t\t\t\tself.CreateDatabase()\n\t\t\t\tself.cnx.database = self.db\n\t\t\telse:\n\t\t\t\tprint(err.msg)\n\n\tdef CreateDatabase(self):\n\t\ttry:\n\t\t\tself.RunCommand(""CREATE DATABASE %s DEFAULT CHARACTER SET \'utf8\';"" %self.db)\n\t\texcept mysql.connector.Error as err:\n\t\t\tprint(""Failed creating database: {}"".format(err))\n\n\tdef CreateTable(self):\n\t\tcmd = ("" CREATE TABLE IF NOT EXISTS "" + self.tableName + "" (""\n\t\t\t"" `ID` int(5) NOT NULL AUTO_INCREMENT,""\n\t\t\t"" `username` char(50) NOT NULL,""\n\t\t\t"" `password` char(50) NOT NULL,""\n\t\t\t"" PRIMARY KEY (`ID`)""\n\t\t\t"") ENGINE=InnoDB;"")\n\t\tself.RunCommand(cmd)\n\n\tdef GetTable(self):\n\t\tself.CreateTable()\n\t\treturn self.RunCommand(""SELECT * FROM %s;"" % self.tableName)\n\n\tdef GetColumns(self):\n\t\treturn self.RunCommand(""SHOW COLUMNS FROM %s;"" % self.tableName)\n\n\tdef RunCommand(self, cmd):\n\t\tprint (""RUNNING COMMAND: "" + cmd)\n\t\ttry:\n\t\t\tself.cursor.execute(cmd)\n\t\texcept mysql.connector.Error as err:\n\t\t\tprint (\'ERROR MESSAGE: \' + str(err.msg))\n\t\t\tprint (\'WITH \' + cmd)\n\t\ttry:\n\t\t\tmsg = self.cursor.fetchall()\n\t\texcept:\n\t\t\tmsg = self.cursor.fetchone()\n\t\treturn msg\n\n\tdef AddEntryToAdmin(self, username, password):\n\t\t\n\t\tcmd = "" INSERT INTO "" + self.tableName + "" (username, password)""\n\t\tcmd += "" VALUES (\'%s\',\'%s\');"" % (username, password)\n\t\tself.RunCommand(cmd)\n\n\tdef AddEntryToStudent(self, name, enrollment, branch, year):\n\t\tcmd = "" INSERT INTO "" + self.tableName + ""(enrollment,StudentName,branch,year)"" \n\t\tcmd += ""VALUES (\'%s\',\'%s\',\'%s\',\'%s\');""%(enrollment,name,branch,year)\n\t\tself.RunCommand(cmd)\n\n\tdef AddEntryToFaculty(self, name,subject):\n\t\tcmd = "" INSERT INTO "" + self.tableName + ""(name,subject)"" \n\t\tcmd += ""VALUES (\'%s\',\'%s\');""%(name,subject)\n\t\tself.RunCommand(cmd)\n\n\t\n\tdef __del__(self):\n\t\tself.cnx.commit()\n\t\tself.cnx.close()\n\n##===============================================\n##===============================================\n\n\nif __name__ == \'__main__\':\n\tdb = \'UsernamePassword_DB\'\n\ttableName = \'masterTable\'\n\n\tdbu = DatabaseUtility(db, tableName)\n\n\t# dbu.AddEntryToTable (\'asdf\', \'asdf\')\n\t# print (dbu.GetColumns())\n\t# print (dbu.GetTable())\n\t\n'"
Generate_FinalProgram.py,0,"b'#!/usr/bin/env python\n\n# ==========================================\n# LOGIN SETUP\n\nlogin_SourceFile = open(\'Login_Dialog_RAW.py\', \'r\')\nlogin_SourceCode = login_SourceFile.read()\nlogin_SourceFile.close()\nlogin_SourceCodeSplit = login_SourceCode.split(\'class Ui_Login_Dialog(object):\')\nbeginningLines = \'\'\'\n#!/usr/bin/env python\n\nimport sys\nimport DB_manager as db\n\'\'\'\nlogin_ConstructorCode = \'\'\'\nclass Ui_Login(QtGui.QDialog):\n    def __init__(self):\n        QtGui.QDialog.__init__(self)\n        self.dbu = db.DatabaseUtility(\'UsernamePassword_DB\', \'masterTable\')\n        self.setupUi(self)\n        self.confirm = None\n        \'\'\'\nlogin_EndCode = \'\'\'\n    @QtCore.pyqtSignature(""on_cancel_btn_clicked()"")\n    def Cancel_btn(self):\n        self.close()\n\n    @QtCore.pyqtSignature(""on_login_btn_clicked()"")\n    def Login_btn(self):\n        username = self.user_lineEdit.text()\n        password = self.password_lineEdit.text()\n        if not username:\n            QtGui.QMessageBox.warning(self, \'Guess What?\', \'Username Missing!\')\n        elif not password:\n            QtGui.QMessageBox.warning(self, \'Guess What?\', \'Password Missing!\')\n        else:\n            self.AttemptLogin(username, password)\n\n    def AttemptLogin(self, username, password):\n        t = self.dbu.GetTable()\n        print (t)\n        for col in t:\n            if username == col[1]:\n                if password == col[2]:\n                    QtGui.QMessageBox.information(self, \'BOOYA!\', \'Success!!\')\n                    self.close()\n                else:\n                    QtGui.QMessageBox.warning(self, \'Dang it!\', \'Password incorrect...\')\n                    return\n\n    @QtCore.pyqtSignature(""on_newUser_btn_clicked()"")\n    def NewUser_btn(self):\n        self.newUser = Ui_Register(self.dbu)\n        self.newUser.show()\n\'\'\'\n\n# ==========================================\n# NEW USER SETUP\n\nnewUser_SourceFile = open(\'NewUser_Dialog_RAW.py\', \'r\')\nnewUser_SourceCode = newUser_SourceFile.read()\nnewUser_SourceFile.close()\nnewUser_SourceCodeSplit = newUser_SourceCode.split(\'class Ui_Register_Dialog(object):\')\n\nnewUser_ConstructorCode = \'\'\'\nclass Ui_Register(QtGui.QDialog):\n    def __init__(self, dbu):\n        QtGui.QDialog.__init__(self)\n        self.setupUi(self)\n        self.dbu = dbu\n\'\'\'\n\nnewUser_EndCode = \'\'\'\n    @QtCore.pyqtSignature(""on_cancel_btn_clicked()"")\n    def Cancel_btn(self):\n        self.close()\n\n    @QtCore.pyqtSignature(""on_add_btn_clicked()"")\n    def Add_btn(self):\n        username = self.username_lineEdit.text()\n        password = self.password_lineEdit.text()\n        cpassword = self.confirmPassword_lineEdit.text()\n        if not username:\n            QtGui.QMessageBox.warning(self, \'Dang it!\', \'Username Missing\')\n        elif password != cpassword:\n            QtGui.QMessageBox.warning(self, \'Dang it!\', \'Passwords Do Not Match\')\n        else:\n            t = self.dbu.GetTable()\n            print (t)\n            for col in t:\n                if username == col[1]:\n                    QtGui.QMessageBox.warning(self, \'Dang it!\', \'Username Taken. :(\')\n            else:\n                self.dbu.AddEntryToTable (username, password)\n                QtGui.QMessageBox.information(self, \'Awesome!!\', \'User Added SUCCESSFULLY!\')\n                self.close()\n\'\'\'\n\n# ==========================================\n# COMBINE IT!\n\nfinalLines = \'\'\'\nif __name__ == \'__main__\':\n    app = QtGui.QApplication(sys.argv)\n    ex = Ui_Login()\n    ex.show()\n    sys.exit(app.exec_())\n\'\'\'\n\n\nf = open(\'Main.py\', \'w\')\nf.write(beginningLines)\nf.write(login_SourceCodeSplit[0])\nf.write(login_ConstructorCode)\nf.write(login_SourceCodeSplit[1])\nf.write(login_EndCode)\n\nf.write(newUser_ConstructorCode)\nf.write(newUser_SourceCodeSplit[1])\nf.write(newUser_EndCode)\n\nf.write(finalLines)\nf.close()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'"
Login_Dialog_RAW.py,0,"b'# -*- coding: utf-8 -*-\n\n# Form implementation generated from reading ui file \'Login_Dialog.ui\'\n#\n# Created: Mon Nov 24 22:56:20 2014\n#      by: PyQt4 UI code generator 4.10.3\n#\n# WARNING! All changes made in this file will be lost!\n\nfrom PyQt4 import QtCore, QtGui\n\ntry:\n    _fromUtf8 = QtCore.QString.fromUtf8\nexcept AttributeError:\n    def _fromUtf8(s):\n        return s\n\ntry:\n    _encoding = QtGui.QApplication.UnicodeUTF8\n    def _translate(context, text, disambig):\n        return QtGui.QApplication.translate(context, text, disambig, _encoding)\nexcept AttributeError:\n    def _translate(context, text, disambig):\n        return QtGui.QApplication.translate(context, text, disambig)\n\nclass Ui_Login_Dialog(object):\n    def setupUi(self, Login_Dialog):\n        Login_Dialog.setObjectName(_fromUtf8(""Login_Dialog""))\n        Login_Dialog.resize(285, 134)\n        self.verticalLayout_2 = QtGui.QVBoxLayout(Login_Dialog)\n        self.verticalLayout_2.setObjectName(_fromUtf8(""verticalLayout_2""))\n        self.verticalLayout = QtGui.QVBoxLayout()\n        self.verticalLayout.setObjectName(_fromUtf8(""verticalLayout""))\n        self.groupBox = QtGui.QGroupBox(Login_Dialog)\n        self.groupBox.setObjectName(_fromUtf8(""groupBox""))\n        self.verticalLayout_3 = QtGui.QVBoxLayout(self.groupBox)\n        self.verticalLayout_3.setObjectName(_fromUtf8(""verticalLayout_3""))\n        self.horizontalLayout = QtGui.QHBoxLayout()\n        self.horizontalLayout.setObjectName(_fromUtf8(""horizontalLayout""))\n        self.label = QtGui.QLabel(self.groupBox)\n        self.label.setObjectName(_fromUtf8(""label""))\n        self.horizontalLayout.addWidget(self.label)\n        self.user_lineEdit = QtGui.QLineEdit(self.groupBox)\n        self.user_lineEdit.setObjectName(_fromUtf8(""user_lineEdit""))\n        self.horizontalLayout.addWidget(self.user_lineEdit)\n        self.verticalLayout_3.addLayout(self.horizontalLayout)\n        self.horizontalLayout_2 = QtGui.QHBoxLayout()\n        self.horizontalLayout_2.setObjectName(_fromUtf8(""horizontalLayout_2""))\n        self.label_2 = QtGui.QLabel(self.groupBox)\n        self.label_2.setObjectName(_fromUtf8(""label_2""))\n        self.horizontalLayout_2.addWidget(self.label_2)\n        self.password_lineEdit = QtGui.QLineEdit(self.groupBox)\n        self.password_lineEdit.setInputMask(_fromUtf8(""""))\n        self.password_lineEdit.setText(_fromUtf8(""""))\n        self.password_lineEdit.setEchoMode(QtGui.QLineEdit.Password)\n        self.password_lineEdit.setObjectName(_fromUtf8(""password_lineEdit""))\n        self.horizontalLayout_2.addWidget(self.password_lineEdit)\n        self.verticalLayout_3.addLayout(self.horizontalLayout_2)\n        self.horizontalLayout_4 = QtGui.QHBoxLayout()\n        self.horizontalLayout_4.setObjectName(_fromUtf8(""horizontalLayout_4""))\n        self.newUser_btn = QtGui.QPushButton(self.groupBox)\n        self.newUser_btn.setObjectName(_fromUtf8(""newUser_btn""))\n        self.horizontalLayout_4.addWidget(self.newUser_btn)\n        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)\n        self.horizontalLayout_4.addItem(spacerItem)\n        self.login_btn = QtGui.QPushButton(self.groupBox)\n        self.login_btn.setObjectName(_fromUtf8(""login_btn""))\n        self.horizontalLayout_4.addWidget(self.login_btn)\n        self.cancel_btn = QtGui.QPushButton(self.groupBox)\n        self.cancel_btn.setObjectName(_fromUtf8(""cancel_btn""))\n        self.horizontalLayout_4.addWidget(self.cancel_btn)\n        self.verticalLayout_3.addLayout(self.horizontalLayout_4)\n        self.verticalLayout.addWidget(self.groupBox)\n        self.verticalLayout_2.addLayout(self.verticalLayout)\n\n        self.retranslateUi(Login_Dialog)\n        QtCore.QMetaObject.connectSlotsByName(Login_Dialog)\n\n    def retranslateUi(self, Login_Dialog):\n        Login_Dialog.setWindowTitle(_translate(""Login_Dialog"", ""TPayne\\\'s User Login"", None))\n        self.groupBox.setTitle(_translate(""Login_Dialog"", ""Super Ham!"", None))\n        self.label.setText(_translate(""Login_Dialog"", ""Username"", None))\n        self.label_2.setText(_translate(""Login_Dialog"", ""Password"", None))\n        self.newUser_btn.setText(_translate(""Login_Dialog"", ""New User"", None))\n        self.login_btn.setText(_translate(""Login_Dialog"", ""Login"", None))\n        self.cancel_btn.setText(_translate(""Login_Dialog"", ""Cancel"", None))\n'"
Main.py,0,"b'\r\n#!/usr/bin/env python\r\n\r\nimport sys\r\nimport DB_manager as db\r\nimport cv2\r\nfrom cv2 import *\r\nimport os\r\nimport numpy as np\r\nfrom PIL import Image\r\nfrom os.path import join,basename\r\nimport db_connect as DB\r\nimport datetime\r\nfrom datetime import datetime as date\r\n\r\ncamera_port = 0\r\ncamera = VideoCapture(camera_port)\r\nret, frame = camera.read()\r\nramp_frames = 0\r\n\r\nfaceCascade = cv2.CascadeClassifier(\'C:/opencv/build/etc/haarcascades/haarcascade_frontalface_default.xml\')\r\neye_cascade = cv2.CascadeClassifier(\'C:/opencv/build/etc/haarcascades/haarcascade_eye.xml\')\r\n\r\n# -*- coding: utf-8 -*-\r\n\r\n# Form implementation generated from reading ui file \'Login_Dialog.ui\'\r\nfrom PyQt4 import QtCore, QtGui\r\n\r\n\r\n\r\ntry:\r\n    _fromUtf8 = QtCore.QString.fromUtf8\r\nexcept AttributeError:\r\n    def _fromUtf8(s):\r\n        return s\r\n\r\ntry:\r\n    _encoding = QtGui.QApplication.UnicodeUTF8\r\n    def _translate(context, text, disambig):\r\n        return QtGui.QApplication.translate(context, text, disambig, _encoding)\r\nexcept AttributeError:\r\n    def _translate(context, text, disambig):\r\n        return QtGui.QApplication.translate(context, text, disambig)\r\n\r\nlogin_SourceFile = open(\'Login_Dialog_RAW.py\', \'r\')\r\nlogin_SourceCode = login_SourceFile.read()\r\nlogin_SourceFile.close()\r\nlogin_SourceCodeSplit = login_SourceCode.split(\'class Ui_Login_Dialog(object):\')\r\n\r\nclass Ui_Login(QtGui.QDialog):\r\n    def __init__(self):\r\n        QtGui.QDialog.__init__(self)\r\n        self.dbu = db.DatabaseUtility(\'db\', \'login\')\r\n        self.setupUi(self)\r\n        self.confirm = None\r\n        \r\n    def setupUi(self, Login_Dialog):\r\n        Login_Dialog.setObjectName(_fromUtf8(""Login_Dialog""))\r\n        Login_Dialog.resize(285, 134)\r\n        self.verticalLayout_2 = QtGui.QVBoxLayout(Login_Dialog)\r\n        self.verticalLayout_2.setObjectName(_fromUtf8(""verticalLayout_2""))\r\n        self.verticalLayout = QtGui.QVBoxLayout()\r\n        self.verticalLayout.setObjectName(_fromUtf8(""verticalLayout""))\r\n        self.groupBox = QtGui.QGroupBox(Login_Dialog)\r\n        self.groupBox.setObjectName(_fromUtf8(""groupBox""))\r\n        self.verticalLayout_3 = QtGui.QVBoxLayout(self.groupBox)\r\n        self.verticalLayout_3.setObjectName(_fromUtf8(""verticalLayout_3""))\r\n        self.horizontalLayout = QtGui.QHBoxLayout()\r\n        self.horizontalLayout.setObjectName(_fromUtf8(""horizontalLayout""))\r\n        self.label = QtGui.QLabel(self.groupBox)\r\n        self.label.setObjectName(_fromUtf8(""label""))\r\n        self.horizontalLayout.addWidget(self.label)\r\n        self.user_lineEdit = QtGui.QLineEdit(self.groupBox)\r\n        self.user_lineEdit.setObjectName(_fromUtf8(""user_lineEdit""))\r\n        self.horizontalLayout.addWidget(self.user_lineEdit)\r\n        self.verticalLayout_3.addLayout(self.horizontalLayout)\r\n        self.horizontalLayout_2 = QtGui.QHBoxLayout()\r\n        self.horizontalLayout_2.setObjectName(_fromUtf8(""horizontalLayout_2""))\r\n        self.label_2 = QtGui.QLabel(self.groupBox)\r\n        self.label_2.setObjectName(_fromUtf8(""label_2""))\r\n        self.horizontalLayout_2.addWidget(self.label_2)\r\n        self.password_lineEdit = QtGui.QLineEdit(self.groupBox)\r\n        self.password_lineEdit.setInputMask(_fromUtf8(""""))\r\n        self.password_lineEdit.setText(_fromUtf8(""""))\r\n        self.password_lineEdit.setEchoMode(QtGui.QLineEdit.Password)\r\n        self.password_lineEdit.setObjectName(_fromUtf8(""password_lineEdit""))\r\n        self.horizontalLayout_2.addWidget(self.password_lineEdit)\r\n        self.verticalLayout_3.addLayout(self.horizontalLayout_2)\r\n        self.horizontalLayout_4 = QtGui.QHBoxLayout()\r\n        self.horizontalLayout_4.setObjectName(_fromUtf8(""horizontalLayout_4""))\r\n        self.newUser_btn = QtGui.QPushButton(self.groupBox)\r\n        self.newUser_btn.setObjectName(_fromUtf8(""newUser_btn""))\r\n        self.horizontalLayout_4.addWidget(self.newUser_btn)\r\n        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)\r\n        self.horizontalLayout_4.addItem(spacerItem)\r\n        self.login_btn = QtGui.QPushButton(self.groupBox)\r\n        self.login_btn.setObjectName(_fromUtf8(""login_btn""))\r\n        self.horizontalLayout_4.addWidget(self.login_btn)\r\n        self.cancel_btn = QtGui.QPushButton(self.groupBox)\r\n        self.cancel_btn.setObjectName(_fromUtf8(""cancel_btn""))\r\n        self.horizontalLayout_4.addWidget(self.cancel_btn)\r\n        self.verticalLayout_3.addLayout(self.horizontalLayout_4)\r\n        self.verticalLayout.addWidget(self.groupBox)\r\n        self.verticalLayout_2.addLayout(self.verticalLayout)\r\n\r\n        self.retranslateUi(Login_Dialog)\r\n        QtCore.QMetaObject.connectSlotsByName(Login_Dialog)\r\n\r\n    def retranslateUi(self, Login_Dialog):\r\n        Login_Dialog.setWindowTitle(_translate(""Login_Dialog"", ""Admin Login"", None))\r\n        self.groupBox.setTitle(_translate(""Login_Dialog"", ""Welcome!"", None))\r\n        self.label.setText(_translate(""Login_Dialog"", ""Username"", None))\r\n        self.label_2.setText(_translate(""Login_Dialog"", ""Password"", None))\r\n        self.newUser_btn.setText(_translate(""Login_Dialog"", ""New User"", None))\r\n        self.login_btn.setText(_translate(""Login_Dialog"", ""Login"", None))\r\n        self.cancel_btn.setText(_translate(""Login_Dialog"", ""Cancel"", None))\r\n\r\n\r\n    @QtCore.pyqtSignature(""on_cancel_btn_clicked()"")\r\n    def Cancel_btn(self):\r\n        self.close()\r\n\r\n    @QtCore.pyqtSignature(""on_login_btn_clicked()"")\r\n    def Login_btn(self):\r\n        username = self.user_lineEdit.text()\r\n        password = self.password_lineEdit.text()\r\n        if not username:\r\n            QtGui.QMessageBox.warning(self, \'Guess What?\', \'Username Missing!\')\r\n        elif not password:\r\n            QtGui.QMessageBox.warning(self, \'Guess What?\', \'Password Missing!\')\r\n        else:\r\n            self.AttemptLogin(username, password)\r\n\r\n    def AttemptLogin(self, username, password):\r\n        t = self.dbu.GetTable()\r\n        print (t)\r\n        for col in t:\r\n            if username == col[1]:\r\n                if password == col[2]:\r\n                    QtGui.QMessageBox.information(self, \'BOOYA!\', \'Success!!\')\r\n                    self.admin = admin_Ui_Dialog(self.dbu)\r\n                    self.admin.show()\r\n                    self.close()\r\n                else:\r\n                    QtGui.QMessageBox.warning(self, \'Dang it!\', \'Password incorrect...\')\r\n                    return\r\n\r\n    @QtCore.pyqtSignature(""on_newUser_btn_clicked()"")\r\n    def NewUser_btn(self):\r\n        self.newUser = Ui_Register(self.dbu)\r\n        self.newUser.show()\r\n\r\nadmin_SourceFile = open(\'admin.py\', \'r\')\r\nadmin_SourceCode = admin_SourceFile.read()\r\nadmin_SourceFile.close()\r\nadmin_SourceCodeSplit = admin_SourceCode.split(\'class admin_Ui_Dialog(object):\')\r\n\r\nclass admin_Ui_Dialog(QtGui.QDialog):\r\n    def __init__(self,dbu):\r\n        QtGui.QDialog.__init__(self)\r\n        self.setupUi(self)\r\n        self.dbu = dbu\r\n        \r\n\r\n    def setupUi(self, Dialog):\r\n        Dialog.setObjectName(_fromUtf8(""Dialog""))\r\n        Dialog.resize(333, 295)\r\n        self.gridLayout_2 = QtGui.QGridLayout(Dialog)\r\n        self.gridLayout_2.setObjectName(_fromUtf8(""gridLayout_2""))\r\n        self.horizontalLayout_3 = QtGui.QHBoxLayout()\r\n        self.horizontalLayout_3.setObjectName(_fromUtf8(""horizontalLayout_3""))\r\n        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)\r\n        self.horizontalLayout_3.addItem(spacerItem)\r\n        self.logOut = QtGui.QPushButton(Dialog)\r\n        self.logOut.setObjectName(_fromUtf8(""logOut""))\r\n        self.horizontalLayout_3.addWidget(self.logOut)\r\n        self.cancel = QtGui.QPushButton(Dialog)\r\n        self.cancel.setObjectName(_fromUtf8(""cancel""))\r\n        self.horizontalLayout_3.addWidget(self.cancel)\r\n        self.gridLayout_2.addLayout(self.horizontalLayout_3, 1, 0, 1, 1)\r\n        self.groupBox = QtGui.QGroupBox(Dialog)\r\n        self.groupBox.setObjectName(_fromUtf8(""groupBox""))\r\n        self.gridLayout = QtGui.QGridLayout(self.groupBox)\r\n        self.gridLayout.setObjectName(_fromUtf8(""gridLayout""))\r\n        self.splitter = QtGui.QSplitter(self.groupBox)\r\n        self.splitter.setOrientation(QtCore.Qt.Vertical)\r\n        self.splitter.setObjectName(_fromUtf8(""splitter""))\r\n        self.addStudent = QtGui.QPushButton(self.splitter)\r\n        self.addStudent.setObjectName(_fromUtf8(""addStudent""))\r\n        self.addTeacher = QtGui.QPushButton(self.splitter)\r\n        self.addTeacher.setDefault(False)\r\n        self.addTeacher.setFlat(False)\r\n        self.addTeacher.setObjectName(_fromUtf8(""addTeacher""))\r\n        self.gridLayout.addWidget(self.splitter, 0, 0, 1, 1)\r\n        self.splitter_2 = QtGui.QSplitter(self.groupBox)\r\n        self.splitter_2.setOrientation(QtCore.Qt.Vertical)\r\n        self.splitter_2.setObjectName(_fromUtf8(""splitter_2""))\r\n        self.pushButton_3 = QtGui.QPushButton(self.splitter_2)\r\n        self.pushButton_3.setObjectName(_fromUtf8(""report""))\r\n        self.monitor = QtGui.QPushButton(self.splitter_2)\r\n        self.monitor.setObjectName(_fromUtf8(""monitor""))\r\n        self.gridLayout.addWidget(self.splitter_2, 0, 1, 1, 1)\r\n        spacerItem1 = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)\r\n        self.gridLayout.addItem(spacerItem1, 1, 0, 1, 1)\r\n        self.gridLayout_2.addWidget(self.groupBox, 0, 0, 1, 1)\r\n\r\n        self.retranslateUi(Dialog)\r\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\r\n\r\n    def retranslateUi(self, Dialog):\r\n        Dialog.setWindowTitle(_translate(""Dialog"", ""Dialog"", None))\r\n        self.logOut.setText(_translate(""Dialog"", ""Log out"", None))\r\n        self.cancel.setText(_translate(""Dialog"", ""Cancel"", None))\r\n        self.groupBox.setTitle(_translate(""Dialog"", ""Welcome"", None))\r\n        self.addStudent.setText(_translate(""Dialog"", ""Add Student"", None))\r\n        self.addTeacher.setText(_translate(""Dialog"", ""Add Teacher"", None))\r\n        self.pushButton_3.setText(_translate(""Dialog"", ""Report"", None))\r\n        self.monitor.setText(_translate(""Dialog"", ""Monitor"", None))\r\n\r\n    @QtCore.pyqtSignature(""on_cancel_clicked()"")\r\n    def Cancel_btn(self):\r\n        self.close()\r\n\r\n    @QtCore.pyqtSignature(""on_addTeacher_clicked()"")\r\n    def addTeacher_btn(self):\r\n        self.add_Teacher = add_Teacher_Dialog(self.dbu)\r\n        self.add_Teacher.show()\r\n\r\n    @QtCore.pyqtSignature(""on_addStudent_clicked()"")\r\n    def addStudent_btn(self):\r\n        self.studentForm = student_Ui_Dialog(self.dbu)\r\n        self.studentForm.show()\r\n\r\n    @QtCore.pyqtSignature(""on_monitor_clicked()"")\r\n    def start(self):\r\n    \texecfile(""face_recognizer.py"")\r\n        #execfile(""latest.py"")\r\n\r\n    @QtCore.pyqtSignature(""on_report_clicked()"")\r\n    def Report_btn(self):\r\n        self.reportForm = report_Dialog(self.dbu)\r\n        self.reportForm.show()\r\n\r\nreportForm_SourceFile = open(\'report.py\', \'r\')\r\nreportForm_SourceCode = reportForm_SourceFile.read()\r\nreportForm_SourceFile.close()\r\nreportForm_SourceCodeSplit = reportForm_SourceCode.split(\'class report_Dialog(object):\')\r\nclass report_Dialog(QtGui.QDialog):\r\n    def __init__(self,dbu):\r\n        QtGui.QDialog.__init__(self)\r\n        self.dbu = db.DatabaseUtility(\'db\', \'master\')\r\n        self.setupUi(self)\r\n        self.confirm = None\r\n        \r\n    def setupUi(self, Dialog):\r\n        Dialog.setObjectName(_fromUtf8(""Dialog""))\r\n        Dialog.resize(602, 536)\r\n        self.gridLayout = QtGui.QGridLayout(Dialog)\r\n        self.gridLayout.setObjectName(_fromUtf8(""gridLayout""))\r\n        self.splitter_2 = QtGui.QSplitter(Dialog)\r\n        self.splitter_2.setOrientation(QtCore.Qt.Vertical)\r\n        self.splitter_2.setObjectName(_fromUtf8(""splitter_2""))\r\n        self.widget = QtGui.QWidget(self.splitter_2)\r\n        self.widget.setObjectName(_fromUtf8(""widget""))\r\n        self.horizontalLayout = QtGui.QHBoxLayout(self.widget)\r\n        self.horizontalLayout.setObjectName(_fromUtf8(""horizontalLayout""))\r\n        self.label = QtGui.QLabel(self.widget)\r\n        self.label.setObjectName(_fromUtf8(""label""))\r\n        self.horizontalLayout.addWidget(self.label)\r\n        self.comboBox = QtGui.QComboBox(self.widget)\r\n        self.comboBox.setObjectName(_fromUtf8(""comboBox""))\r\n        self.comboBox.addItem(_fromUtf8(""""))\r\n        self.comboBox.addItem(_fromUtf8(""""))\r\n        self.comboBox.addItem(_fromUtf8(""""))\r\n        self.horizontalLayout.addWidget(self.comboBox)\r\n        self.search = QtGui.QLineEdit(self.widget)\r\n        self.search.setObjectName(_fromUtf8(""search""))\r\n        self.horizontalLayout.addWidget(self.search)\r\n        self.pushButton = QtGui.QPushButton(self.widget)\r\n        self.pushButton.setObjectName(_fromUtf8(""pushButton""))\r\n        self.horizontalLayout.addWidget(self.pushButton)\r\n        self.splitter = QtGui.QSplitter(self.splitter_2)\r\n        self.splitter.setOrientation(QtCore.Qt.Vertical)\r\n        self.splitter.setObjectName(_fromUtf8(""splitter""))\r\n        self.textBrowser = QtGui.QTextBrowser(self.splitter)\r\n        self.textBrowser.setObjectName(_fromUtf8(""textBrowser""))\r\n        self.buttonBox = QtGui.QDialogButtonBox(self.splitter)\r\n        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)\r\n        self.buttonBox.setStandardButtons(QtGui.QDialogButtonBox.Cancel|QtGui.QDialogButtonBox.Ok)\r\n        self.buttonBox.setObjectName(_fromUtf8(""buttonBox""))\r\n        self.gridLayout.addWidget(self.splitter_2, 0, 0, 1, 1)\r\n\r\n        self.retranslateUi(Dialog)\r\n        QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL(_fromUtf8(""accepted()"")), Dialog.accept)\r\n        QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL(_fromUtf8(""rejected()"")), Dialog.reject)\r\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\r\n\r\n    def retranslateUi(self, Dialog):\r\n        Dialog.setWindowTitle(_translate(""Dialog"", ""Dialog"", None))\r\n        self.label.setText(_translate(""Dialog"", ""Search by  :"", None))\r\n        self.comboBox.setItemText(0, _translate(""Dialog"", ""Enrollment"", None))\r\n        self.comboBox.setItemText(1, _translate(""Dialog"", ""Date"", None))\r\n        self.comboBox.setItemText(2, _translate(""Dialog"", ""Subect"", None))\r\n        self.pushButton.setText(_translate(""Dialog"", ""Search"", None))\r\n\r\n\r\n\r\nstudentForm_SourceFile = open(\'studentform.py\', \'r\')\r\nstudentForm_SourceCode = studentForm_SourceFile.read()\r\nstudentForm_SourceFile.close()\r\nstudentForm_SourceCodeSplit = studentForm_SourceCode.split(\'class student_Ui_Dialog(object):\')\r\nclass student_Ui_Dialog(QtGui.QDialog):\r\n    def __init__(self,dbu):\r\n        QtGui.QDialog.__init__(self)\r\n        self.dbu = db.DatabaseUtility(\'db\', \'student\')\r\n        self.setupUi(self)\r\n        self.confirm = None\r\n        \r\n    def setupUi(self, Dialog):\r\n        Dialog.setObjectName(_fromUtf8(""Dialog""))\r\n        Dialog.resize(494, 295)\r\n        Dialog.setMinimumSize(QtCore.QSize(494, 289))\r\n        Dialog.setMaximumSize(QtCore.QSize(494, 295))\r\n        self.gridLayout = QtGui.QGridLayout(Dialog)\r\n        self.gridLayout.setObjectName(_fromUtf8(""gridLayout""))\r\n        self.splitter = QtGui.QSplitter(Dialog)\r\n        self.splitter.setOrientation(QtCore.Qt.Vertical)\r\n        self.splitter.setObjectName(_fromUtf8(""splitter""))\r\n        self.layoutWidget = QtGui.QWidget(self.splitter)\r\n        self.layoutWidget.setObjectName(_fromUtf8(""layoutWidget""))\r\n        self.verticalLayout_2 = QtGui.QVBoxLayout(self.layoutWidget)\r\n        self.verticalLayout_2.setObjectName(_fromUtf8(""verticalLayout_2""))\r\n        self.groupBox = QtGui.QGroupBox(self.layoutWidget)\r\n        self.groupBox.setObjectName(_fromUtf8(""groupBox""))\r\n        self.horizontalLayout = QtGui.QHBoxLayout(self.groupBox)\r\n        self.horizontalLayout.setObjectName(_fromUtf8(""horizontalLayout""))\r\n        self.gridLayout_2 = QtGui.QGridLayout()\r\n        self.gridLayout_2.setObjectName(_fromUtf8(""gridLayout_2""))\r\n        self.line_6 = QtGui.QFrame(self.groupBox)\r\n        self.line_6.setFrameShape(QtGui.QFrame.VLine)\r\n        self.line_6.setFrameShadow(QtGui.QFrame.Sunken)\r\n        self.line_6.setObjectName(_fromUtf8(""line_6""))\r\n        self.gridLayout_2.addWidget(self.line_6, 3, 1, 1, 1)\r\n        self.line_3 = QtGui.QFrame(self.groupBox)\r\n        self.line_3.setFrameShape(QtGui.QFrame.VLine)\r\n        self.line_3.setFrameShadow(QtGui.QFrame.Sunken)\r\n        self.line_3.setObjectName(_fromUtf8(""line_3""))\r\n        self.gridLayout_2.addWidget(self.line_3, 0, 1, 1, 1)\r\n        self.year_Spin = QtGui.QSpinBox(self.groupBox)\r\n        self.year_Spin.setMinimumSize(QtCore.QSize(72, 0))\r\n        self.year_Spin.setMinimum(1)\r\n        self.year_Spin.setMaximum(4)\r\n        self.year_Spin.setObjectName(_fromUtf8(""year_Spin""))\r\n        self.gridLayout_2.addWidget(self.year_Spin, 3, 2, 1, 1, QtCore.Qt.AlignLeft)\r\n        self.line_5 = QtGui.QFrame(self.groupBox)\r\n        self.line_5.setFrameShape(QtGui.QFrame.VLine)\r\n        self.line_5.setFrameShadow(QtGui.QFrame.Sunken)\r\n        self.line_5.setObjectName(_fromUtf8(""line_5""))\r\n        self.gridLayout_2.addWidget(self.line_5, 2, 1, 1, 1)\r\n        self.label = QtGui.QLabel(self.groupBox)\r\n        self.label.setMinimumSize(QtCore.QSize(214, 0))\r\n        font = QtGui.QFont()\r\n        font.setPointSize(10)\r\n        self.label.setFont(font)\r\n        self.label.setObjectName(_fromUtf8(""label""))\r\n        self.gridLayout_2.addWidget(self.label, 0, 0, 1, 1)\r\n        self.label_3 = QtGui.QLabel(self.groupBox)\r\n        self.label_3.setMinimumSize(QtCore.QSize(214, 0))\r\n        font = QtGui.QFont()\r\n        font.setPointSize(10)\r\n        self.label_3.setFont(font)\r\n        self.label_3.setObjectName(_fromUtf8(""label_3""))\r\n        self.gridLayout_2.addWidget(self.label_3, 2, 0, 1, 1)\r\n        self.name = QtGui.QLineEdit(self.groupBox)\r\n        self.name.setMinimumSize(QtCore.QSize(215, 20))\r\n        self.name.setObjectName(_fromUtf8(""name""))\r\n        self.gridLayout_2.addWidget(self.name, 0, 2, 1, 1, QtCore.Qt.AlignLeft)\r\n        self.enroll = QtGui.QLineEdit(self.groupBox)\r\n        self.enroll.setMinimumSize(QtCore.QSize(215, 0))\r\n        self.enroll.setObjectName(_fromUtf8(""enroll""))\r\n        self.gridLayout_2.addWidget(self.enroll, 1, 2, 1, 1, QtCore.Qt.AlignLeft)\r\n        self.line_4 = QtGui.QFrame(self.groupBox)\r\n        self.line_4.setFrameShape(QtGui.QFrame.VLine)\r\n        self.line_4.setFrameShadow(QtGui.QFrame.Sunken)\r\n        self.line_4.setObjectName(_fromUtf8(""line_4""))\r\n        self.gridLayout_2.addWidget(self.line_4, 1, 1, 1, 1)\r\n        self.branch_Combo = QtGui.QComboBox(self.groupBox)\r\n        self.branch_Combo.setMinimumSize(QtCore.QSize(70, 0))\r\n        self.branch_Combo.setObjectName(_fromUtf8(""branch_Combo""))\r\n        self.branch_Combo.addItem(_fromUtf8(""""))\r\n        self.branch_Combo.addItem(_fromUtf8(""""))\r\n        self.branch_Combo.addItem(_fromUtf8(""""))\r\n        self.branch_Combo.addItem(_fromUtf8(""""))\r\n        self.gridLayout_2.addWidget(self.branch_Combo, 2, 2, 1, 1, QtCore.Qt.AlignLeft)\r\n        self.label_2 = QtGui.QLabel(self.groupBox)\r\n        self.label_2.setMinimumSize(QtCore.QSize(214, 0))\r\n        font = QtGui.QFont()\r\n        font.setPointSize(10)\r\n        self.label_2.setFont(font)\r\n        self.label_2.setObjectName(_fromUtf8(""label_2""))\r\n        self.gridLayout_2.addWidget(self.label_2, 1, 0, 1, 1)\r\n        self.label_4 = QtGui.QLabel(self.groupBox)\r\n        self.label_4.setMinimumSize(QtCore.QSize(214, 0))\r\n        font = QtGui.QFont()\r\n        font.setPointSize(10)\r\n        self.label_4.setFont(font)\r\n        self.label_4.setObjectName(_fromUtf8(""label_4""))\r\n        self.gridLayout_2.addWidget(self.label_4, 3, 0, 1, 1)\r\n        self.horizontalLayout.addLayout(self.gridLayout_2)\r\n        self.verticalLayout_2.addWidget(self.groupBox)\r\n        self.layoutWidget1 = QtGui.QWidget(self.splitter)\r\n        self.layoutWidget1.setObjectName(_fromUtf8(""layoutWidget1""))\r\n        self.horizontalLayout_2 = QtGui.QHBoxLayout(self.layoutWidget1)\r\n        self.horizontalLayout_2.setObjectName(_fromUtf8(""horizontalLayout_2""))\r\n        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)\r\n        self.horizontalLayout_2.addItem(spacerItem)\r\n        self.display_btn = QtGui.QPushButton(self.layoutWidget1)\r\n        self.display_btn.setObjectName(_fromUtf8(""display_btn""))\r\n        self.horizontalLayout_2.addWidget(self.display_btn)\r\n        self.add_btn = QtGui.QPushButton(self.layoutWidget1)\r\n        self.add_btn.setObjectName(_fromUtf8(""add_btn""))\r\n        self.horizontalLayout_2.addWidget(self.add_btn)\r\n        spacerItem1 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)\r\n        self.horizontalLayout_2.addItem(spacerItem1)\r\n        self.gridLayout.addWidget(self.splitter, 0, 0, 1, 1)\r\n\r\n        self.retranslateUi(Dialog)\r\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\r\n        Dialog.setTabOrder(self.name, self.enroll)\r\n        Dialog.setTabOrder(self.enroll, self.branch_Combo)\r\n        Dialog.setTabOrder(self.branch_Combo, self.year_Spin)\r\n        Dialog.setTabOrder(self.year_Spin, self.display_btn)\r\n        Dialog.setTabOrder(self.display_btn, self.add_btn)\r\n\r\n    def retranslateUi(self, Dialog):\r\n        Dialog.setWindowTitle(_translate(""Dialog"", ""Dialog"", None))\r\n        self.groupBox.setTitle(_translate(""Dialog"", ""GroupBox"", None))\r\n        self.label.setText(_translate(""Dialog"", ""Name"", None))\r\n        self.label_3.setText(_translate(""Dialog"", ""Branch"", None))\r\n        self.branch_Combo.setItemText(0, _translate(""Dialog"", ""CSE"", None))\r\n        self.branch_Combo.setItemText(1, _translate(""Dialog"", ""IT"", None))\r\n        self.branch_Combo.setItemText(2, _translate(""Dialog"", ""MECH"", None))\r\n        self.branch_Combo.setItemText(3, _translate(""Dialog"", ""CIVIL"", None))\r\n        self.label_2.setText(_translate(""Dialog"", ""Enrollment No."", None))\r\n        self.label_4.setText(_translate(""Dialog"", ""Year"", None))\r\n        self.display_btn.setText(_translate(""Dialog"", ""Dislpay"", None))\r\n        self.add_btn.setText(_translate(""Dialog"", ""Add"", None))\r\n\r\n    def valuechange(self):\r\n        self.year_Spin.value()\r\n\r\n    @QtCore.pyqtSignature(""on_display_btn_clicked()"")   \r\n    def Display_btn(self):\r\n        name = self.lineEdit.text()\r\n        enrollment = self.lineEdit_2.text()\r\n        branch = self.comboBox.currentText()\r\n        year = str(self.spinBox.value())\r\n        QtGui.QMessageBox.information(self, enrollment , year)\r\n\r\n    @QtCore.pyqtSignature(""on_add_btn_clicked()"")\r\n    def Add_btn(self):\r\n        name = self.name.text()\r\n        enrollment = self.enroll.text()\r\n        branch = self.branch_Combo.currentText()\r\n        year = str(self.year_Spin.value())\r\n        if not name:\r\n            QtGui.QMessageBox.warning(self, \'Name Missing\', \'Enter Name\')\r\n        elif not enrollment:\r\n            QtGui.QMessageBox.warning(self, \'Enrollment Missing\', \'Enter Enrollment\')\r\n        elif not branch:\r\n            QtGui.QMessageBox.warning(self, \'\', \'Enter Branch\')\r\n        elif not year:\r\n            QtGui.QMessageBox.warning(self, \'\', \'Enter Year\')\r\n        else:\r\n            t = self.dbu.GetTable()\r\n            print t\r\n            for col in t:\r\n                if enrollment == col[0]:\r\n                    QtGui.QMessageBox.warning(self, \'Check Enrollment\', \'Enrollment can\\\'t be duplicate\')\r\n                else:\r\n                    self.dbu.AddEntryToStudent (name,enrollment,branch,year)\r\n                    QtGui.QMessageBox.information(self, \'Awesome!!\', \'Student Information Added\')\r\n                    self.close()\r\n                    break\r\n                                    \r\nadd_TeacherForm_SourceFile = open(\'Add_teacher.py\', \'r\')\r\nadd_TeacherForm_SourceCode = add_TeacherForm_SourceFile.read()\r\nadd_TeacherForm_SourceFile.close()\r\nadd_TeacherForm_SourceCodeSplit = add_TeacherForm_SourceCode.split(\'class add_Teacher_Dialog(object):\')\r\nclass add_Teacher_Dialog(QtGui.QDialog):\r\n    def __init__(self,dbu):\r\n        QtGui.QDialog.__init__(self)\r\n        self.dbu = db.DatabaseUtility(\'db\', \'faculty\')\r\n        self.setupUi(self)\r\n        self.confirm = None\r\n    def setupUi(self, Dialog):\r\n        Dialog.setObjectName(_fromUtf8(""Dialog""))\r\n        Dialog.resize(257, 138)\r\n        Dialog.setMaximumSize(QtCore.QSize(424, 138))\r\n        self.gridLayout_2 = QtGui.QGridLayout(Dialog)\r\n        self.gridLayout_2.setObjectName(_fromUtf8(""gridLayout_2""))\r\n        self.groupBox = QtGui.QGroupBox(Dialog)\r\n        self.groupBox.setMaximumSize(QtCore.QSize(424, 89))\r\n        self.groupBox.setObjectName(_fromUtf8(""groupBox""))\r\n        self.gridLayout = QtGui.QGridLayout(self.groupBox)\r\n        self.gridLayout.setObjectName(_fromUtf8(""gridLayout""))\r\n        self.horizontalLayout_2 = QtGui.QHBoxLayout()\r\n        self.horizontalLayout_2.setObjectName(_fromUtf8(""horizontalLayout_2""))\r\n        self.label = QtGui.QLabel(self.groupBox)\r\n        self.label.setObjectName(_fromUtf8(""label""))\r\n        self.horizontalLayout_2.addWidget(self.label)\r\n        self.teacher_name = QtGui.QLineEdit(self.groupBox)\r\n        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Fixed)\r\n        sizePolicy.setHorizontalStretch(0)\r\n        sizePolicy.setVerticalStretch(0)\r\n        sizePolicy.setHeightForWidth(self.teacher_name.sizePolicy().hasHeightForWidth())\r\n        self.teacher_name.setSizePolicy(sizePolicy)\r\n        self.teacher_name.setObjectName(_fromUtf8(""teacher_name""))\r\n        self.horizontalLayout_2.addWidget(self.teacher_name)\r\n        self.gridLayout.addLayout(self.horizontalLayout_2, 0, 0, 1, 1)\r\n        self.horizontalLayout_3 = QtGui.QHBoxLayout()\r\n        self.horizontalLayout_3.setObjectName(_fromUtf8(""horizontalLayout_3""))\r\n        self.label_2 = QtGui.QLabel(self.groupBox)\r\n        self.label_2.setMinimumSize(QtCore.QSize(24, 0))\r\n        self.label_2.setObjectName(_fromUtf8(""label_2""))\r\n        self.horizontalLayout_3.addWidget(self.label_2)\r\n        self.subject_name = QtGui.QLineEdit(self.groupBox)\r\n        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Fixed)\r\n        sizePolicy.setHorizontalStretch(0)\r\n        sizePolicy.setVerticalStretch(0)\r\n        sizePolicy.setHeightForWidth(self.subject_name.sizePolicy().hasHeightForWidth())\r\n        self.subject_name.setSizePolicy(sizePolicy)\r\n        self.subject_name.setObjectName(_fromUtf8(""subject_name""))\r\n        self.horizontalLayout_3.addWidget(self.subject_name)\r\n        self.gridLayout.addLayout(self.horizontalLayout_3, 1, 0, 1, 1)\r\n        spacerItem = QtGui.QSpacerItem(20, 10, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)\r\n        self.gridLayout.addItem(spacerItem, 2, 0, 1, 1)\r\n        self.label.raise_()\r\n        self.teacher_name.raise_()\r\n        self.label_2.raise_()\r\n        self.subject_name.raise_()\r\n        self.subject_name.raise_()\r\n        self.gridLayout_2.addWidget(self.groupBox, 0, 0, 1, 1)\r\n        self.horizontalLayout = QtGui.QHBoxLayout()\r\n        self.horizontalLayout.setObjectName(_fromUtf8(""horizontalLayout""))\r\n        self.pushButton = QtGui.QPushButton(Dialog)\r\n        self.pushButton.setObjectName(_fromUtf8(""pushButton""))\r\n        self.horizontalLayout.addWidget(self.pushButton)\r\n        self.cancel = QtGui.QPushButton(Dialog)\r\n        self.cancel.setObjectName(_fromUtf8(""cancel""))\r\n        self.horizontalLayout.addWidget(self.cancel)\r\n        self.back = QtGui.QPushButton(Dialog)\r\n        self.back.setObjectName(_fromUtf8(""back""))\r\n        self.horizontalLayout.addWidget(self.back)\r\n        self.gridLayout_2.addLayout(self.horizontalLayout, 1, 0, 1, 1)\r\n\r\n        self.retranslateUi(Dialog)\r\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\r\n\r\n    def retranslateUi(self, Dialog):\r\n        Dialog.setWindowTitle(_translate(""Dialog"", ""Dialog"", None))\r\n        self.groupBox.setTitle(_translate(""Dialog"", ""Add Teacher"", None))\r\n        self.label.setText(_translate(""Dialog"", ""Teacher\\\'s Name"", None))\r\n        self.label_2.setText(_translate(""Dialog"", ""Subject"", None))\r\n        self.pushButton.setText(_translate(""Dialog"", ""Add"", None))\r\n        self.cancel.setText(_translate(""Dialog"", ""Cancel"", None))\r\n        self.back.setText(_translate(""Dialog"", ""Back"", None))\r\n\r\n    @QtCore.pyqtSignature(""on_pushButton_clicked()"")\r\n    def Add(self):\r\n        teacherName = self.teacher_name.text()\r\n        subject = self.subject_name.text()\r\n        QtGui.QMessageBox.information(self, \'Awesome!!\', \'Faculty Information Added\')\r\n        if not teacherName:\r\n            QtGui.QMessageBox.warning(self, \'Name Missing\', \'Enter Name\')\r\n        elif not subject:\r\n            QtGui.QMessageBox.warning(self, \'Subject Missing\', \'Enter Subject\')\r\n        else:\r\n            t = self.dbu.GetTable()\r\n            print (t)\r\n            for col in t:\r\n                if teacherName == col[0]:\r\n                    QtGui.QMessageBox.warning(self, \'\',\'Faculty already added\')\r\n                else:\r\n                    self.dbu.AddEntryToFaculty(teacherName,subject)\r\n                    self.close()\r\n                    break\r\n                    QtGui.QMessageBox.information(self, \'Awesome!!\', \'Faculty Information Added\')\r\n             \r\n    @QtCore.pyqtSignature(""on_cancel_clicked()"")\r\n    def Cancel(self):\r\n        self.close()\r\n\r\n\r\n        \r\nnewUser_SourceFile = open(\'NewUser_Dialog_RAW.py\', \'r\')\r\nnewUser_SourceCode = newUser_SourceFile.read()\r\nnewUser_SourceFile.close()\r\nnewUser_SourceCodeSplit = newUser_SourceCode.split(\'class Ui_Register_Dialog(object):\')\r\nclass Ui_Register(QtGui.QDialog):\r\n    def __init__(self, dbu):\r\n        QtGui.QDialog.__init__(self)\r\n        self.setupUi(self)\r\n        self.dbu = dbu\r\n\r\n    def setupUi(self, Register_Dialog):\r\n        Register_Dialog.setObjectName(_fromUtf8(""Register_Dialog""))\r\n        Register_Dialog.resize(372, 187)\r\n        Register_Dialog.setModal(True)\r\n        self.verticalLayout_2 = QtGui.QVBoxLayout(Register_Dialog)\r\n        self.verticalLayout_2.setObjectName(_fromUtf8(""verticalLayout_2""))\r\n        self.verticalLayout = QtGui.QVBoxLayout()\r\n        self.verticalLayout.setObjectName(_fromUtf8(""verticalLayout""))\r\n        self.groupBox = QtGui.QGroupBox(Register_Dialog)\r\n        self.groupBox.setObjectName(_fromUtf8(""groupBox""))\r\n        self.verticalLayout_3 = QtGui.QVBoxLayout(self.groupBox)\r\n        self.verticalLayout_3.setObjectName(_fromUtf8(""verticalLayout_3""))\r\n        self.horizontalLayout = QtGui.QHBoxLayout()\r\n        self.horizontalLayout.setObjectName(_fromUtf8(""horizontalLayout""))\r\n        self.label_2 = QtGui.QLabel(self.groupBox)\r\n        self.label_2.setObjectName(_fromUtf8(""label_2""))\r\n        self.horizontalLayout.addWidget(self.label_2)\r\n        self.username_lineEdit = QtGui.QLineEdit(self.groupBox)\r\n        self.username_lineEdit.setObjectName(_fromUtf8(""username_lineEdit""))\r\n        self.horizontalLayout.addWidget(self.username_lineEdit)\r\n        self.verticalLayout_3.addLayout(self.horizontalLayout)\r\n        self.horizontalLayout_2 = QtGui.QHBoxLayout()\r\n        self.horizontalLayout_2.setObjectName(_fromUtf8(""horizontalLayout_2""))\r\n        self.label = QtGui.QLabel(self.groupBox)\r\n        self.label.setObjectName(_fromUtf8(""label""))\r\n        self.horizontalLayout_2.addWidget(self.label)\r\n        self.password_lineEdit = QtGui.QLineEdit(self.groupBox)\r\n        self.password_lineEdit.setEchoMode(QtGui.QLineEdit.Password)\r\n        self.password_lineEdit.setObjectName(_fromUtf8(""password_lineEdit""))\r\n        self.horizontalLayout_2.addWidget(self.password_lineEdit)\r\n        self.verticalLayout_3.addLayout(self.horizontalLayout_2)\r\n        self.horizontalLayout_4 = QtGui.QHBoxLayout()\r\n        self.horizontalLayout_4.setObjectName(_fromUtf8(""horizontalLayout_4""))\r\n        self.label_3 = QtGui.QLabel(self.groupBox)\r\n        self.label_3.setObjectName(_fromUtf8(""label_3""))\r\n        self.horizontalLayout_4.addWidget(self.label_3)\r\n        self.confirmPassword_lineEdit = QtGui.QLineEdit(self.groupBox)\r\n        self.confirmPassword_lineEdit.setEchoMode(QtGui.QLineEdit.Password)\r\n        self.confirmPassword_lineEdit.setObjectName(_fromUtf8(""confirmPassword_lineEdit""))\r\n        self.horizontalLayout_4.addWidget(self.confirmPassword_lineEdit)\r\n        self.verticalLayout_3.addLayout(self.horizontalLayout_4)\r\n        self.label_4 = QtGui.QLabel(self.groupBox)\r\n        self.label_4.setAlignment(QtCore.Qt.AlignCenter)\r\n        self.label_4.setObjectName(_fromUtf8(""label_4""))\r\n        self.verticalLayout_3.addWidget(self.label_4)\r\n        self.horizontalLayout_3 = QtGui.QHBoxLayout()\r\n        self.horizontalLayout_3.setObjectName(_fromUtf8(""horizontalLayout_3""))\r\n        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)\r\n        self.horizontalLayout_3.addItem(spacerItem)\r\n        self.add_btn = QtGui.QPushButton(self.groupBox)\r\n        self.add_btn.setObjectName(_fromUtf8(""add_btn""))\r\n        self.horizontalLayout_3.addWidget(self.add_btn)\r\n        self.cancel_btn = QtGui.QPushButton(self.groupBox)\r\n        self.cancel_btn.setObjectName(_fromUtf8(""cancel_btn""))\r\n        self.horizontalLayout_3.addWidget(self.cancel_btn)\r\n        self.verticalLayout_3.addLayout(self.horizontalLayout_3)\r\n        self.verticalLayout.addWidget(self.groupBox)\r\n        self.verticalLayout_2.addLayout(self.verticalLayout)\r\n\r\n        self.retranslateUi(Register_Dialog)\r\n        QtCore.QMetaObject.connectSlotsByName(Register_Dialog)\r\n\r\n    def retranslateUi(self, Register_Dialog):\r\n        Register_Dialog.setWindowTitle(_translate(""Register_Dialog"", ""Register New User"", None))\r\n        self.groupBox.setTitle(_translate(""Register_Dialog"", ""Credentials"", None))\r\n        self.label_2.setText(_translate(""Register_Dialog"", ""Username"", None))\r\n        self.label.setText(_translate(""Register_Dialog"", ""Password"", None))\r\n        self.label_3.setText(_translate(""Register_Dialog"", ""Confirm Password"", None))\r\n        self.label_4.setText(_translate(""Register_Dialog"", ""Not Included: Phone, Address, Social Security Number, Credit Card..."", None))\r\n        self.add_btn.setText(_translate(""Register_Dialog"", ""Add"", None))\r\n        self.cancel_btn.setText(_translate(""Register_Dialog"", ""Cancel"", None))\r\n\r\n\r\n    @QtCore.pyqtSignature(""on_cancel_btn_clicked()"")\r\n    def Cancel_btn(self):\r\n        self.close()\r\n        \r\n\r\n    @QtCore.pyqtSignature(""on_add_btn_clicked()"")\r\n    def Add_btn(self):\r\n        username = self.username_lineEdit.text()\r\n        password = self.password_lineEdit.text()\r\n        cpassword = self.confirmPassword_lineEdit.text()\r\n        if not username:\r\n            QtGui.QMessageBox.warning(self, \'Dang it!\', \'Username Missing\')\r\n        elif password != cpassword:\r\n            QtGui.QMessageBox.warning(self, \'Dang it!\', \'Passwords Do Not Match\')\r\n        else:\r\n            t = self.dbu.GetTable()\r\n            print (t)\r\n            for col in t:\r\n                if username == col[1]:\r\n                    QtGui.QMessageBox.warning(self, \'Dang it!\', \'Username Taken. :(\')\r\n            else:\r\n                self.dbu.AddEntryToAdmin (username, password)\r\n                QtGui.QMessageBox.information(self, \'Awesome!!\', \'User Added SUCCESSFULLY!\')\r\n                self.close()\r\n\r\nif __name__ == \'__main__\':\r\n    app = QtGui.QApplication(sys.argv)\r\n    ex = Ui_Login()\r\n    ex.show()\r\n    sys.exit(app.exec_())\r\n'"
NewUser_Dialog_RAW.py,0,"b'# -*- coding: utf-8 -*-\n\n# Form implementation generated from reading ui file \'NewUser_Dialog.ui\'\n#\n# Created: Mon Nov 24 22:56:20 2014\n#      by: PyQt4 UI code generator 4.10.3\n#\n# WARNING! All changes made in this file will be lost!\n\nfrom PyQt4 import QtCore, QtGui\n\ntry:\n    _fromUtf8 = QtCore.QString.fromUtf8\nexcept AttributeError:\n    def _fromUtf8(s):\n        return s\n\ntry:\n    _encoding = QtGui.QApplication.UnicodeUTF8\n    def _translate(context, text, disambig):\n        return QtGui.QApplication.translate(context, text, disambig, _encoding)\nexcept AttributeError:\n    def _translate(context, text, disambig):\n        return QtGui.QApplication.translate(context, text, disambig)\n\nclass Ui_Register_Dialog(object):\n    def setupUi(self, Register_Dialog):\n        Register_Dialog.setObjectName(_fromUtf8(""Register_Dialog""))\n        Register_Dialog.resize(372, 187)\n        Register_Dialog.setModal(True)\n        self.verticalLayout_2 = QtGui.QVBoxLayout(Register_Dialog)\n        self.verticalLayout_2.setObjectName(_fromUtf8(""verticalLayout_2""))\n        self.verticalLayout = QtGui.QVBoxLayout()\n        self.verticalLayout.setObjectName(_fromUtf8(""verticalLayout""))\n        self.groupBox = QtGui.QGroupBox(Register_Dialog)\n        self.groupBox.setObjectName(_fromUtf8(""groupBox""))\n        self.verticalLayout_3 = QtGui.QVBoxLayout(self.groupBox)\n        self.verticalLayout_3.setObjectName(_fromUtf8(""verticalLayout_3""))\n        self.horizontalLayout = QtGui.QHBoxLayout()\n        self.horizontalLayout.setObjectName(_fromUtf8(""horizontalLayout""))\n        self.label_2 = QtGui.QLabel(self.groupBox)\n        self.label_2.setObjectName(_fromUtf8(""label_2""))\n        self.horizontalLayout.addWidget(self.label_2)\n        self.username_lineEdit = QtGui.QLineEdit(self.groupBox)\n        self.username_lineEdit.setObjectName(_fromUtf8(""username_lineEdit""))\n        self.horizontalLayout.addWidget(self.username_lineEdit)\n        self.verticalLayout_3.addLayout(self.horizontalLayout)\n        self.horizontalLayout_2 = QtGui.QHBoxLayout()\n        self.horizontalLayout_2.setObjectName(_fromUtf8(""horizontalLayout_2""))\n        self.label = QtGui.QLabel(self.groupBox)\n        self.label.setObjectName(_fromUtf8(""label""))\n        self.horizontalLayout_2.addWidget(self.label)\n        self.password_lineEdit = QtGui.QLineEdit(self.groupBox)\n        self.password_lineEdit.setEchoMode(QtGui.QLineEdit.Password)\n        self.password_lineEdit.setObjectName(_fromUtf8(""password_lineEdit""))\n        self.horizontalLayout_2.addWidget(self.password_lineEdit)\n        self.verticalLayout_3.addLayout(self.horizontalLayout_2)\n        self.horizontalLayout_4 = QtGui.QHBoxLayout()\n        self.horizontalLayout_4.setObjectName(_fromUtf8(""horizontalLayout_4""))\n        self.label_3 = QtGui.QLabel(self.groupBox)\n        self.label_3.setObjectName(_fromUtf8(""label_3""))\n        self.horizontalLayout_4.addWidget(self.label_3)\n        self.confirmPassword_lineEdit = QtGui.QLineEdit(self.groupBox)\n        self.confirmPassword_lineEdit.setEchoMode(QtGui.QLineEdit.Password)\n        self.confirmPassword_lineEdit.setObjectName(_fromUtf8(""confirmPassword_lineEdit""))\n        self.horizontalLayout_4.addWidget(self.confirmPassword_lineEdit)\n        self.verticalLayout_3.addLayout(self.horizontalLayout_4)\n        self.label_4 = QtGui.QLabel(self.groupBox)\n        self.label_4.setAlignment(QtCore.Qt.AlignCenter)\n        self.label_4.setObjectName(_fromUtf8(""label_4""))\n        self.verticalLayout_3.addWidget(self.label_4)\n        self.horizontalLayout_3 = QtGui.QHBoxLayout()\n        self.horizontalLayout_3.setObjectName(_fromUtf8(""horizontalLayout_3""))\n        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)\n        self.horizontalLayout_3.addItem(spacerItem)\n        self.add_btn = QtGui.QPushButton(self.groupBox)\n        self.add_btn.setObjectName(_fromUtf8(""add_btn""))\n        self.horizontalLayout_3.addWidget(self.add_btn)\n        self.cancel_btn = QtGui.QPushButton(self.groupBox)\n        self.cancel_btn.setObjectName(_fromUtf8(""cancel_btn""))\n        self.horizontalLayout_3.addWidget(self.cancel_btn)\n        self.verticalLayout_3.addLayout(self.horizontalLayout_3)\n        self.verticalLayout.addWidget(self.groupBox)\n        self.verticalLayout_2.addLayout(self.verticalLayout)\n\n        self.retranslateUi(Register_Dialog)\n        QtCore.QMetaObject.connectSlotsByName(Register_Dialog)\n\n    def retranslateUi(self, Register_Dialog):\n        Register_Dialog.setWindowTitle(_translate(""Register_Dialog"", ""Register New User"", None))\n        self.groupBox.setTitle(_translate(""Register_Dialog"", ""Welcome!"", None))\n        self.label_2.setText(_translate(""Register_Dialog"", ""Username"", None))\n        self.label.setText(_translate(""Register_Dialog"", ""Password"", None))\n        self.label_3.setText(_translate(""Register_Dialog"", ""Confirm Password"", None))\n        self.label_4.setText(_translate(""Register_Dialog"", ""Not Included: Phone, Address, Social Security Number, Credit Card..."", None))\n        self.add_btn.setText(_translate(""Register_Dialog"", ""Add"", None))\n        self.cancel_btn.setText(_translate(""Register_Dialog"", ""Cancel"", None))\n\n'"
admin.py,0,"b'# -*- coding: utf-8 -*-\r\n\r\n# Form implementation generated from reading ui file \'admin.ui\'\r\n#\r\n# Created by: PyQt4 UI code generator 4.11.4\r\n#\r\n# WARNING! All changes made in this file will be lost!\r\n\r\nfrom PyQt4 import QtCore, QtGui\r\n\r\ntry:\r\n    _fromUtf8 = QtCore.QString.fromUtf8\r\nexcept AttributeError:\r\n    def _fromUtf8(s):\r\n        return s\r\n\r\ntry:\r\n    _encoding = QtGui.QApplication.UnicodeUTF8\r\n    def _translate(context, text, disambig):\r\n        return QtGui.QApplication.translate(context, text, disambig, _encoding)\r\nexcept AttributeError:\r\n    def _translate(context, text, disambig):\r\n        return QtGui.QApplication.translate(context, text, disambig)\r\n\r\nclass Ui_Dialog(object):\r\n    def setupUi(self, Dialog):\r\n        Dialog.setObjectName(_fromUtf8(""Dialog""))\r\n        Dialog.resize(333, 295)\r\n        self.gridLayout_2 = QtGui.QGridLayout(Dialog)\r\n        self.gridLayout_2.setObjectName(_fromUtf8(""gridLayout_2""))\r\n        self.horizontalLayout_3 = QtGui.QHBoxLayout()\r\n        self.horizontalLayout_3.setObjectName(_fromUtf8(""horizontalLayout_3""))\r\n        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)\r\n        self.horizontalLayout_3.addItem(spacerItem)\r\n        self.logOut = QtGui.QPushButton(Dialog)\r\n        self.logOut.setObjectName(_fromUtf8(""logOut""))\r\n        self.horizontalLayout_3.addWidget(self.logOut)\r\n        self.cancel = QtGui.QPushButton(Dialog)\r\n        self.cancel.setObjectName(_fromUtf8(""cancel""))\r\n        self.horizontalLayout_3.addWidget(self.cancel)\r\n        self.gridLayout_2.addLayout(self.horizontalLayout_3, 1, 0, 1, 1)\r\n        self.groupBox = QtGui.QGroupBox(Dialog)\r\n        self.groupBox.setObjectName(_fromUtf8(""groupBox""))\r\n        self.gridLayout = QtGui.QGridLayout(self.groupBox)\r\n        self.gridLayout.setObjectName(_fromUtf8(""gridLayout""))\r\n        self.splitter = QtGui.QSplitter(self.groupBox)\r\n        self.splitter.setOrientation(QtCore.Qt.Vertical)\r\n        self.splitter.setObjectName(_fromUtf8(""splitter""))\r\n        self.addStudent = QtGui.QPushButton(self.splitter)\r\n        self.addStudent.setObjectName(_fromUtf8(""addStudent""))\r\n        self.addTeacher = QtGui.QPushButton(self.splitter)\r\n        self.addTeacher.setDefault(False)\r\n        self.addTeacher.setFlat(False)\r\n        self.addTeacher.setObjectName(_fromUtf8(""addTeacher""))\r\n        self.gridLayout.addWidget(self.splitter, 0, 0, 1, 1)\r\n        self.splitter_2 = QtGui.QSplitter(self.groupBox)\r\n        self.splitter_2.setOrientation(QtCore.Qt.Vertical)\r\n        self.splitter_2.setObjectName(_fromUtf8(""splitter_2""))\r\n        self.pushButton_3 = QtGui.QPushButton(self.splitter_2)\r\n        self.pushButton_3.setObjectName(_fromUtf8(""pushButton_3""))\r\n        self.monitor = QtGui.QPushButton(self.splitter_2)\r\n        self.monitor.setObjectName(_fromUtf8(""monitor""))\r\n        self.gridLayout.addWidget(self.splitter_2, 0, 1, 1, 1)\r\n        spacerItem1 = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)\r\n        self.gridLayout.addItem(spacerItem1, 1, 0, 1, 1)\r\n        self.gridLayout_2.addWidget(self.groupBox, 0, 0, 1, 1)\r\n\r\n        self.retranslateUi(Dialog)\r\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\r\n\r\n    def retranslateUi(self, Dialog):\r\n        Dialog.setWindowTitle(_translate(""Dialog"", ""Dialog"", None))\r\n        self.logOut.setText(_translate(""Dialog"", ""Log out"", None))\r\n        self.cancel.setText(_translate(""Dialog"", ""Cancel"", None))\r\n        self.groupBox.setTitle(_translate(""Dialog"", ""Welcome"", None))\r\n        self.addStudent.setText(_translate(""Dialog"", ""Add Student"", None))\r\n        self.addTeacher.setText(_translate(""Dialog"", ""Add Teacher"", None))\r\n        self.pushButton_3.setText(_translate(""Dialog"", ""Report"", None))\r\n        self.monitor.setText(_translate(""Dialog"", ""Monitor"", None))\r\n\r\n\r\n'"
capture.py,0,"b'from cv2 import *\r\ncamera_port = 0\r\nramp_frames = 0\r\n \r\n# Initialize the camera capture object with the cv2.VideoCapture class.\r\ncamera = VideoCapture(camera_port)\r\n \r\nprint(""Taking image..."")\r\ndef get_image():\r\n retval, im = camera.read()\r\n if retval:    \r\n    imshow(""cam-test"",im)\r\n    waitKey(0)\r\n    destroyWindow(""cam-test"")\r\n    return im\r\n \r\nfor i in xrange(ramp_frames):\r\n temp = get_image()\r\ncamera_capture = get_image()\r\nfile = ""/Users/Shubham/Documents/Python Scripts""\r\n\r\nimwrite(""filename.jpg"",camera_capture)\r\n\r\ndel(camera)\r\n'"
db_connect.py,0,"b'import mysql.connector\r\nimport datetime\r\nfrom time import strftime\r\nfrom datetime import datetime as date\r\nfrom os.path import join,basename\r\n#from pyfacesgui import *\r\n\r\n#global student\r\n#student=basename(matchfile)            \r\n\r\nclass DatabaseUtility: \r\n    def __init__(self, database, tableName):\r\n        self.db = database\r\n        self.tableName = tableName\r\n\r\n        # Open database connection\r\n        self.cnx = mysql.connector.connect(user = \'root\',password = \'2406\',host = \'127.0.0.1\')\r\n        # prepare a cursor object using cursor() method\r\n        self.cursor = self.cnx.cursor()\r\n\r\n        self.ConnectToDatabase()\r\n        #self.CreateTable()\r\n\r\n\r\n    def ConnectToDatabase(self):\r\n        try:\r\n            self.cnx.database = self.db\r\n        except mysql.connector.Error as err:\r\n            if err.errno == errorcode.ER_BAD_DB_ERROR:\r\n                self.CreateDatabase()\r\n                self.cnx.database = self.db\r\n            else:\r\n                print(err.msg)\r\n\r\n    def CreateDatabase(self):\r\n        try:\r\n            self.RunCommand(""CREATE DATABASE %s DEFAULT CHARACTER SET \'utf8\';"" %self.db)\r\n        except mysql.connector.Error as err:\r\n            print(""Failed creating database: {}"".format(err))\r\n\r\n    def Attendence(self, student, dt, dy , t):\r\n                cmd = ""Insert into attendence(enrollment,date,day,time) values (\'%s\',\'%s\',\'%s\',\'%s\' );"" %(student,dt,dy,t)\r\n                try:\r\n                    self.cursor.execute(cmd);\r\n                except mysql.connector.Error as err:\r\n                    self.cnx.rollback()\r\n                    #print err\r\n                self.cnx.commit()\r\n\r\n    def __del__(self):\r\n        self.cnx.commit()\r\n        self.cursor.close()\r\n        self.cnx.close()\r\n\r\n#===============================================\r\n#===============================================\r\n\r\nif __name__ == \'__main__\':\r\n    db = \'db\'\r\n    tableName = \'attendence\'\r\n    dbu = DatabaseUtility(db, tableName)\r\n'"
face_recognizer.py,3,"b'#!/usr/bin/python\n\n# Import the required modules\nimport cv2, os\nimport numpy as np\nfrom PIL import Image\nfrom os.path import join,basename\nimport db_connect as DB\nimport datetime\nfrom datetime import datetime as date\n\n# For face detection we will use the Haar Cascade provided by OpenCV.\ncascadePath = ""haarcascade_frontalface_default.xml""\nfaceCascade = cv2.CascadeClassifier(cascadePath)\n\n# For face recognition we will the the LBPH Face Recognizer \nrecognizer = cv2.face.createLBPHFaceRecognizer()\n\ndef get_images_and_labels(path):\n    # Append all the absolute image paths in a list image_paths\n    # We will not read the image with the .sad extension in the training set\n    # Rather, we will use them to test our accuracy of the training\n    image_paths = [os.path.join(path, f) for f in os.listdir(path) if not f.endswith(\'.normal\')]\n    # images will contains face images\n    images = []\n    # labels will contains the label that is assigned to the image\n    labels = []\n    for image_path in image_paths:\n        # Read the image and convert to grayscale\n        image_pil = Image.open(image_path).convert(\'L\')\n        # Convert the image format into numpy array\n        image = np.array(image_pil, \'uint8\')\n        # Get the label of the image\n        nbr = int(os.path.split(image_path)[1].split(""."")[0].replace(""0832CS131"", """"))\n        # Detect the face in the image\n        faces = faceCascade.detectMultiScale(image)\n        # If face is detected, append the face to images and the label to labels\n        for (x, y, w, h) in faces:\n            images.append(image[y: y + h, x: x + w])\n            labels.append(nbr)\n            #cv2.imshow(""Adding faces to traning set..."", image[y: y + h, x: x + w])\n            cv2.waitKey(50)\n    # return the images list and labels list\n    return images, labels\n\n# Path to the Yale Dataset\npath = \'S:\\Projects\\Python\\Major\\FaceDetection\\Monitor\\dataset\'\n# Call the get_images_and_labels function and get the face images and the \n# corresponding labels\nimages, labels = get_images_and_labels(path)\ncv2.destroyAllWindows()\n\n# Perform the tranining\nrecognizer.train(images, np.array(labels))\n\n# Append the images with the extension .sad into image_paths\nimage_paths = [os.path.join(path, f) for f in os.listdir(path) if f.endswith(\'.normal\')]\nfor image_path in image_paths:\n    predict_image_pil = Image.open(image_path).convert(\'L\')\n    predict_image = np.array(predict_image_pil, \'uint8\')\n    faces = faceCascade.detectMultiScale(predict_image)\n    for (x, y, w, h) in faces:\n        nbr_predicted = recognizer.predict(predict_image[y: y + h, x: x + w])\n        print nbr_predicted\n        conf = recognizer.predict(predict_image[y: y + h, x: x + w])\n        nbr_actual = int(os.path.split(image_path)[1].split(""."")[0].replace(""0832CS131"", """"))\n        print nbr_actual\n        if nbr_actual == nbr_predicted:\n            print ""{} is Correctly Recognized with confidence {}"".format(nbr_actual, conf)\n            student=basename(str(os.path.split(image_path)[1].split(""."")[0].replace("".normal"","""")))\n            print student\n            t = date.today().strftime(""%X"")\n            dy = date.today().strftime(""%A"")\n            dt = datetime.date.today()\n            x= DB.DatabaseUtility(""db"",""attendence"")\n            x.Attendence(student,dt,dy,t)\n            print ""done""\n        else:\n            print ""{} is Incorrect Recognized as {}"".format(nbr_actual, nbr_predicted)\n            cv2.imshow(""Recognizing Face"", predict_image[y: y + h, x: x + w])\n            cv2.waitKey(1000)\n        \n'"
report.py,0,"b'# -*- coding: utf-8 -*-\r\n\r\n# Form implementation generated from reading ui file \'report.ui\'\r\n#\r\n# Created by: PyQt4 UI code generator 4.11.4\r\n#\r\n# WARNING! All changes made in this file will be lost!\r\n\r\nfrom PyQt4 import QtCore, QtGui\r\n\r\ntry:\r\n    _fromUtf8 = QtCore.QString.fromUtf8\r\nexcept AttributeError:\r\n    def _fromUtf8(s):\r\n        return s\r\n\r\ntry:\r\n    _encoding = QtGui.QApplication.UnicodeUTF8\r\n    def _translate(context, text, disambig):\r\n        return QtGui.QApplication.translate(context, text, disambig, _encoding)\r\nexcept AttributeError:\r\n    def _translate(context, text, disambig):\r\n        return QtGui.QApplication.translate(context, text, disambig)\r\n\r\nclass Ui_Dialog(object):\r\n    def setupUi(self, Dialog):\r\n        Dialog.setObjectName(_fromUtf8(""Dialog""))\r\n        Dialog.resize(602, 536)\r\n        self.gridLayout = QtGui.QGridLayout(Dialog)\r\n        self.gridLayout.setObjectName(_fromUtf8(""gridLayout""))\r\n        self.splitter_2 = QtGui.QSplitter(Dialog)\r\n        self.splitter_2.setOrientation(QtCore.Qt.Vertical)\r\n        self.splitter_2.setObjectName(_fromUtf8(""splitter_2""))\r\n        self.widget = QtGui.QWidget(self.splitter_2)\r\n        self.widget.setObjectName(_fromUtf8(""widget""))\r\n        self.horizontalLayout = QtGui.QHBoxLayout(self.widget)\r\n        self.horizontalLayout.setObjectName(_fromUtf8(""horizontalLayout""))\r\n        self.label = QtGui.QLabel(self.widget)\r\n        self.label.setObjectName(_fromUtf8(""label""))\r\n        self.horizontalLayout.addWidget(self.label)\r\n        self.comboBox = QtGui.QComboBox(self.widget)\r\n        self.comboBox.setObjectName(_fromUtf8(""comboBox""))\r\n        self.comboBox.addItem(_fromUtf8(""""))\r\n        self.comboBox.addItem(_fromUtf8(""""))\r\n        self.comboBox.addItem(_fromUtf8(""""))\r\n        self.horizontalLayout.addWidget(self.comboBox)\r\n        self.search = QtGui.QLineEdit(self.widget)\r\n        self.search.setObjectName(_fromUtf8(""search""))\r\n        self.horizontalLayout.addWidget(self.search)\r\n        self.pushButton = QtGui.QPushButton(self.widget)\r\n        self.pushButton.setObjectName(_fromUtf8(""pushButton""))\r\n        self.horizontalLayout.addWidget(self.pushButton)\r\n        self.splitter = QtGui.QSplitter(self.splitter_2)\r\n        self.splitter.setOrientation(QtCore.Qt.Vertical)\r\n        self.splitter.setObjectName(_fromUtf8(""splitter""))\r\n        self.textBrowser = QtGui.QTextBrowser(self.splitter)\r\n        self.textBrowser.setObjectName(_fromUtf8(""textBrowser""))\r\n        self.buttonBox = QtGui.QDialogButtonBox(self.splitter)\r\n        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)\r\n        self.buttonBox.setStandardButtons(QtGui.QDialogButtonBox.Cancel|QtGui.QDialogButtonBox.Ok)\r\n        self.buttonBox.setObjectName(_fromUtf8(""buttonBox""))\r\n        self.gridLayout.addWidget(self.splitter_2, 0, 0, 1, 1)\r\n\r\n        self.retranslateUi(Dialog)\r\n        QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL(_fromUtf8(""accepted()"")), Dialog.accept)\r\n        QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL(_fromUtf8(""rejected()"")), Dialog.reject)\r\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\r\n\r\n    def retranslateUi(self, Dialog):\r\n        Dialog.setWindowTitle(_translate(""Dialog"", ""Dialog"", None))\r\n        self.label.setText(_translate(""Dialog"", ""Search by  :"", None))\r\n        self.comboBox.setItemText(0, _translate(""Dialog"", ""Enrollment"", None))\r\n        self.comboBox.setItemText(1, _translate(""Dialog"", ""Date"", None))\r\n        self.comboBox.setItemText(2, _translate(""Dialog"", ""Subect"", None))\r\n        self.pushButton.setText(_translate(""Dialog"", ""Search"", None))\r\n\r\n\r\nif __name__ == ""__main__"":\r\n    import sys\r\n    app = QtGui.QApplication(sys.argv)\r\n    Dialog = QtGui.QDialog()\r\n    ui = Ui_Dialog()\r\n    ui.setupUi(Dialog)\r\n    Dialog.show()\r\n    sys.exit(app.exec_())\r\n\r\n'"
setup.py,0,"b""from distutils.core import setup\r\nimport py2exe, sys, os\r\n\r\nsys.argv.append('py2exe')\r\nsetup( \r\n    options={\r\n        'py2exe': {\r\n                'compressed': 2,\r\n                'optimize': 2,\r\n                'dist_dir': 'dist',  # Put .exe in dist/\r\n                'xref': False,\r\n                'skip_archive': False,\r\n                'ascii': False,\r\n                'custom_boot_script': '',\r\n                #'unbuffered': True,  # Immediately flush output.\r\n        }\r\n    },\r\n    zipfile=None,  # Put libs into .exe to save space.\r\n    console = ['main.py'],\r\n)\r\n"""
studentform.py,0,"b'# -*- coding: utf-8 -*-\r\n\r\n# Form implementation generated from reading ui file \'studentform.ui\'\r\n#\r\n# Created by: PyQt4 UI code generator 4.11.4\r\n#\r\n# WARNING! All changes made in this file will be lost!\r\n\r\nfrom PyQt4 import QtCore, QtGui\r\n\r\ntry:\r\n    _fromUtf8 = QtCore.QString.fromUtf8\r\nexcept AttributeError:\r\n    def _fromUtf8(s):\r\n        return s\r\n\r\ntry:\r\n    _encoding = QtGui.QApplication.UnicodeUTF8\r\n    def _translate(context, text, disambig):\r\n        return QtGui.QApplication.translate(context, text, disambig, _encoding)\r\nexcept AttributeError:\r\n    def _translate(context, text, disambig):\r\n        return QtGui.QApplication.translate(context, text, disambig)\r\n\r\nclass Ui_Dialog(object):\r\n    def setupUi(self, Dialog):\r\n        Dialog.setObjectName(_fromUtf8(""Dialog""))\r\n        Dialog.resize(494, 295)\r\n        Dialog.setMinimumSize(QtCore.QSize(494, 289))\r\n        Dialog.setMaximumSize(QtCore.QSize(494, 295))\r\n        self.gridLayout = QtGui.QGridLayout(Dialog)\r\n        self.gridLayout.setObjectName(_fromUtf8(""gridLayout""))\r\n        self.splitter = QtGui.QSplitter(Dialog)\r\n        self.splitter.setOrientation(QtCore.Qt.Vertical)\r\n        self.splitter.setObjectName(_fromUtf8(""splitter""))\r\n        self.layoutWidget = QtGui.QWidget(self.splitter)\r\n        self.layoutWidget.setObjectName(_fromUtf8(""layoutWidget""))\r\n        self.verticalLayout_2 = QtGui.QVBoxLayout(self.layoutWidget)\r\n        self.verticalLayout_2.setObjectName(_fromUtf8(""verticalLayout_2""))\r\n        self.groupBox = QtGui.QGroupBox(self.layoutWidget)\r\n        self.groupBox.setObjectName(_fromUtf8(""groupBox""))\r\n        self.horizontalLayout = QtGui.QHBoxLayout(self.groupBox)\r\n        self.horizontalLayout.setObjectName(_fromUtf8(""horizontalLayout""))\r\n        self.gridLayout_2 = QtGui.QGridLayout()\r\n        self.gridLayout_2.setObjectName(_fromUtf8(""gridLayout_2""))\r\n        self.line_6 = QtGui.QFrame(self.groupBox)\r\n        self.line_6.setFrameShape(QtGui.QFrame.VLine)\r\n        self.line_6.setFrameShadow(QtGui.QFrame.Sunken)\r\n        self.line_6.setObjectName(_fromUtf8(""line_6""))\r\n        self.gridLayout_2.addWidget(self.line_6, 3, 1, 1, 1)\r\n        self.line_3 = QtGui.QFrame(self.groupBox)\r\n        self.line_3.setFrameShape(QtGui.QFrame.VLine)\r\n        self.line_3.setFrameShadow(QtGui.QFrame.Sunken)\r\n        self.line_3.setObjectName(_fromUtf8(""line_3""))\r\n        self.gridLayout_2.addWidget(self.line_3, 0, 1, 1, 1)\r\n        self.year_Spin = QtGui.QSpinBox(self.groupBox)\r\n        self.year_Spin.setMinimumSize(QtCore.QSize(72, 0))\r\n        self.year_Spin.setMinimum(1)\r\n        self.year_Spin.setMaximum(4)\r\n        self.year_Spin.setObjectName(_fromUtf8(""year_Spin""))\r\n        self.gridLayout_2.addWidget(self.year_Spin, 3, 2, 1, 1, QtCore.Qt.AlignLeft)\r\n        self.line_5 = QtGui.QFrame(self.groupBox)\r\n        self.line_5.setFrameShape(QtGui.QFrame.VLine)\r\n        self.line_5.setFrameShadow(QtGui.QFrame.Sunken)\r\n        self.line_5.setObjectName(_fromUtf8(""line_5""))\r\n        self.gridLayout_2.addWidget(self.line_5, 2, 1, 1, 1)\r\n        self.label = QtGui.QLabel(self.groupBox)\r\n        self.label.setMinimumSize(QtCore.QSize(214, 0))\r\n        font = QtGui.QFont()\r\n        font.setPointSize(10)\r\n        self.label.setFont(font)\r\n        self.label.setObjectName(_fromUtf8(""label""))\r\n        self.gridLayout_2.addWidget(self.label, 0, 0, 1, 1)\r\n        self.label_3 = QtGui.QLabel(self.groupBox)\r\n        self.label_3.setMinimumSize(QtCore.QSize(214, 0))\r\n        font = QtGui.QFont()\r\n        font.setPointSize(10)\r\n        self.label_3.setFont(font)\r\n        self.label_3.setObjectName(_fromUtf8(""label_3""))\r\n        self.gridLayout_2.addWidget(self.label_3, 2, 0, 1, 1)\r\n        self.name = QtGui.QLineEdit(self.groupBox)\r\n        self.name.setMinimumSize(QtCore.QSize(219, 20))\r\n        self.name.setObjectName(_fromUtf8(""name""))\r\n        self.gridLayout_2.addWidget(self.name, 0, 2, 1, 1, QtCore.Qt.AlignLeft)\r\n        self.enroll = QtGui.QLineEdit(self.groupBox)\r\n        self.enroll.setMinimumSize(QtCore.QSize(219, 0))\r\n        self.enroll.setObjectName(_fromUtf8(""enroll""))\r\n        self.gridLayout_2.addWidget(self.enroll, 1, 2, 1, 1, QtCore.Qt.AlignLeft)\r\n        self.line_4 = QtGui.QFrame(self.groupBox)\r\n        self.line_4.setFrameShape(QtGui.QFrame.VLine)\r\n        self.line_4.setFrameShadow(QtGui.QFrame.Sunken)\r\n        self.line_4.setObjectName(_fromUtf8(""line_4""))\r\n        self.gridLayout_2.addWidget(self.line_4, 1, 1, 1, 1)\r\n        self.branch_Combo = QtGui.QComboBox(self.groupBox)\r\n        self.branch_Combo.setMinimumSize(QtCore.QSize(70, 0))\r\n        self.branch_Combo.setObjectName(_fromUtf8(""branch_Combo""))\r\n        self.branch_Combo.addItem(_fromUtf8(""""))\r\n        self.branch_Combo.addItem(_fromUtf8(""""))\r\n        self.branch_Combo.addItem(_fromUtf8(""""))\r\n        self.branch_Combo.addItem(_fromUtf8(""""))\r\n        self.gridLayout_2.addWidget(self.branch_Combo, 2, 2, 1, 1, QtCore.Qt.AlignLeft)\r\n        self.label_2 = QtGui.QLabel(self.groupBox)\r\n        self.label_2.setMinimumSize(QtCore.QSize(214, 0))\r\n        font = QtGui.QFont()\r\n        font.setPointSize(10)\r\n        self.label_2.setFont(font)\r\n        self.label_2.setObjectName(_fromUtf8(""label_2""))\r\n        self.gridLayout_2.addWidget(self.label_2, 1, 0, 1, 1)\r\n        self.label_4 = QtGui.QLabel(self.groupBox)\r\n        self.label_4.setMinimumSize(QtCore.QSize(214, 0))\r\n        font = QtGui.QFont()\r\n        font.setPointSize(10)\r\n        self.label_4.setFont(font)\r\n        self.label_4.setObjectName(_fromUtf8(""label_4""))\r\n        self.gridLayout_2.addWidget(self.label_4, 3, 0, 1, 1)\r\n        self.horizontalLayout.addLayout(self.gridLayout_2)\r\n        self.verticalLayout_2.addWidget(self.groupBox)\r\n        self.layoutWidget1 = QtGui.QWidget(self.splitter)\r\n        self.layoutWidget1.setObjectName(_fromUtf8(""layoutWidget1""))\r\n        self.horizontalLayout_2 = QtGui.QHBoxLayout(self.layoutWidget1)\r\n        self.horizontalLayout_2.setObjectName(_fromUtf8(""horizontalLayout_2""))\r\n        spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)\r\n        self.horizontalLayout_2.addItem(spacerItem)\r\n        self.display_btn = QtGui.QPushButton(self.layoutWidget1)\r\n        self.display_btn.setObjectName(_fromUtf8(""display_btn""))\r\n        self.horizontalLayout_2.addWidget(self.display_btn)\r\n        self.add_btn = QtGui.QPushButton(self.layoutWidget1)\r\n        self.add_btn.setObjectName(_fromUtf8(""add_btn""))\r\n        self.horizontalLayout_2.addWidget(self.add_btn)\r\n        spacerItem1 = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)\r\n        self.horizontalLayout_2.addItem(spacerItem1)\r\n        self.gridLayout.addWidget(self.splitter, 0, 0, 1, 1)\r\n\r\n        self.retranslateUi(Dialog)\r\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\r\n        Dialog.setTabOrder(self.name, self.enroll)\r\n        Dialog.setTabOrder(self.enroll, self.branch_Combo)\r\n        Dialog.setTabOrder(self.branch_Combo, self.year_Spin)\r\n        Dialog.setTabOrder(self.year_Spin, self.display_btn)\r\n        Dialog.setTabOrder(self.display_btn, self.add_btn)\r\n\r\n    def retranslateUi(self, Dialog):\r\n        Dialog.setWindowTitle(_translate(""Dialog"", ""Dialog"", None))\r\n        self.groupBox.setTitle(_translate(""Dialog"", ""GroupBox"", None))\r\n        self.label.setText(_translate(""Dialog"", ""Name"", None))\r\n        self.label_3.setText(_translate(""Dialog"", ""Branch"", None))\r\n        self.branch_Combo.setItemText(0, _translate(""Dialog"", ""CSE"", None))\r\n        self.branch_Combo.setItemText(1, _translate(""Dialog"", ""IT"", None))\r\n        self.branch_Combo.setItemText(2, _translate(""Dialog"", ""MECH"", None))\r\n        self.branch_Combo.setItemText(3, _translate(""Dialog"", ""CIVIL"", None))\r\n        self.label_2.setText(_translate(""Dialog"", ""Enrollment No."", None))\r\n        self.label_4.setText(_translate(""Dialog"", ""Year"", None))\r\n        self.display_btn.setText(_translate(""Dialog"", ""Dislpay"", None))\r\n        self.add_btn.setText(_translate(""Dialog"", ""Add"", None))\r\n\r\n\r\nif __name__ == ""__main__"":\r\n    import sys\r\n    app = QtGui.QApplication(sys.argv)\r\n    Dialog = QtGui.QDialog()\r\n    ui = Ui_Dialog()\r\n    ui.setupUi(Dialog)\r\n    Dialog.show()\r\n    sys.exit(app.exec_())\r\n\r\n'"
Crop/Img_detectiom.py,0,"b'import numpy as np\r\nimport cv2\r\nimport sys\r\nimport glob \r\nfrom PIL import Image\r\nimport numpy\r\nface_cascade = cv2.CascadeClassifier(\'\\\\opencv\\\\build\\\\etc\\\\haarcascades\\\\haarcascade_frontalface_default.xml\')\r\neye_cascade = cv2.CascadeClassifier(\'\\\\opencv\\\\build\\\\etc\\\\haarcascades\\\\haarcascade_eye.xml\')\r\n\r\nimg = cv2.imread(\'img.jpg\')\r\ngray = cvtColor(img, cv2.COLOR_BGR2GRAY)\r\nfaces = face_cascade.detectMultiScale(gray, 1.3, 5)\r\nfor (x,y,w,h) in faces:\r\n    img = cv2.rectangle(img,(x,y),(x+w,y+h),(128,128,128),2)\r\n    #roi_gray = gray[y:y+h, x:x+w]\r\n    #roi_color = img[y:y+h, x:x+w]\r\n    #eyes = eye_cascade.detectMultiScale(roi_gray)\r\n    #for (ex,ey,ew,eh) in eyes:\r\n        #cv2.rectangle(roi_color,(ex,ey),(ex+ew,ey+eh),(128,128,128),2)\r\n\'\'\'# Detect faces in the image\r\nfaces = faceCascade.detectMultiScale(\r\n    gray,\r\n    scaleFactor=1.1,\r\n    minNeighbors=5,\r\n    minSize=(30, 30),\r\n    flags = cv2.CASCADE_SCALE_IMAGE\r\n)\r\nprint ""Found {0} faces!"".format(len(faces))\r\n# Crop Padding\r\nleft = 10\r\nright = 10\r\ntop = 10\r\nbottom = 10\r\n\r\n# Draw a rectangle around the faces\r\nfor (x, y, w, h) in faces:\r\n    print x, y, w, h\r\n\r\n    # Dubugging boxes\r\n    # cv2.rectangle(image, (x, y), (x+w, y+h), (0, 255, 0), 2)\'\'\'\r\n\r\n\r\n#image  = image[y-top:y+h+bottom, x-left:x+w+right]\r\ncv2.imshow(\'img\',img)\r\ncv2.waitKey(0)\r\ncv2.destroyAllWindows()\r\n'"
Crop/face.py,0,"b'import cv2\r\nimport sys\r\nimport glob \r\nimport cv2 as cv\r\ncascPath = ""haarcascade_frontalface_default.xml""\r\n\r\n# Create the haar cascade\r\nfaceCascade = cv2.CascadeClassifier(\'\\\\opencv\\\\build\\\\etc\\\\haarcascades\\\\haarcascade_frontalface_default.xml\')\r\n\r\n#files=glob.glob(""*.jpg"")   \r\n#for file in files:\r\nfile = r""C:\\Users\\azz\\Desktop\\nourin\\New folder (3)\\ok.jpg""\r\n\r\n# Read the image\r\nimage = cv2.imread(file)\r\ngray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\r\n\r\n# Detect faces in the image\r\nfaces = faceCascade.detectMultiScale(\r\n    gray,\r\n    scaleFactor=1.1,\r\n    minNeighbors=5,\r\n    minSize=(30, 30),\r\n    flags = cv2.CASCADE_SCALE_IMAGE\r\n)\r\n\r\nprint ""Found {0} faces!"".format(len(faces))\r\n\r\n# Crop Padding\r\nleft = 10\r\nright = 10\r\ntop = 10\r\nbottom = 10\r\n\r\n# Draw a rectangle around the faces\r\nfor (x, y, w, h) in faces:\r\n    print x, y, w, h\r\n\r\n    # Dubugging boxes\r\n    # cv2.rectangle(image, (x, y), (x+w, y+h), (0, 255, 0), 2)\r\n\r\n\r\nimage  = image[y-top:y+h+bottom, x-left:x+w+right]\r\n\r\nprint ""cropped_{1}{0}"".format(str(file),str(x))\r\ncv2.imwrite(""cropped_{1}_{0}"".format(str(file),str(x)), image)\r\n'"
Crop/face1.py,0,"b'import sys\r\n\r\nfrom PIL import Image, ImageDraw\r\n\r\nimport cv2\r\nimport cv2 as cv\r\n\r\n\r\ndef main():\r\n    source_image = Image.open(\'test_image.png\')\r\n    source_width, source_height = source_image.size\r\n    print \'Image is {}x{}\'.format(source_width, source_height)\r\n\r\n    target_width = 1000\r\n    target_height = 200\r\n\r\n    # Make image a reasonable size to work with. Using the source_height will\r\n    # make sure it\'s just resized to the target_width\r\n    source_image.thumbnail((target_width, source_height), Image.ANTIALIAS)\r\n\r\n    # Find the faces and show us where they are\r\n    faces = faces_from_pil_image(source_image)\r\n    faces_found_image = draw_faces(source_image, faces)\r\n    faces_found_image.show()\r\n\r\n    # Get details about where the faces are so we can crop\r\n    top_of_faces = top_face_top(faces)\r\n    bottom_of_faces = bottom_face_bottom(faces)\r\n\r\n    all_faces_height = bottom_of_faces - top_of_faces\r\n    print \'Faces are {} pixels high\'.format(all_faces_height)\r\n\r\n    if all_faces_height >= target_width:\r\n        print \'Faces take up more than the final image, you need better logic\'\r\n        exit_code = 1\r\n    else:\r\n        # Figure out where to crop and show the results\r\n        face_buffer = 0.5 * (target_height - all_faces_height)\r\n        top_of_crop = int(top_of_faces - face_buffer)\r\n        coords = (0, top_of_crop, target_width, top_of_crop + target_height)\r\n        print \'Cropping to\', coords\r\n        final_image = source_image.crop(coords)\r\n        final_image.show()\r\n        exit_code = 0\r\n\r\n    return exit_code\r\n\r\n\r\ndef faces_from_pil_image(pil_image):\r\n    ""Return a list of (x,y,h,w) tuples for faces detected in the PIL image""\r\n    storage = cv.CreateMemStorage(0)\r\n    facial_features = cv.Load(\'haarcascade_frontalface_alt.xml\', storage=storage)\r\n    cv_im = cv.CreateImageHeader(pil_image.size, cv.IPL_DEPTH_8U, 3)\r\n    cv.SetData(cv_im, pil_image.tostring())\r\n    faces = cv.HaarDetectObjects(cv_im, facial_features, storage)\r\n    # faces includes a `neighbors` field that we aren\'t going to use here\r\n    return [f[0] for f in faces]\r\n\r\n\r\ndef top_face_top(faces):\r\n    coords = [f[1] for f in faces]\r\n    # Top left corner is 0,0 so we need the min for highest face\r\n    return min(coords)\r\n\r\n\r\ndef bottom_face_bottom(faces):\r\n    # Top left corner is 0,0 so we need the max for lowest face. Also add the\r\n    # height of the faces so that we get the bottom of it\r\n    coords = [f[1] + f[3] for f in faces]\r\n    return max(coords)\r\n\r\n\r\ndef draw_faces(image_, faces):\r\n    ""Draw a rectangle around each face discovered""\r\n    image = image_.copy()\r\n    drawable = ImageDraw.Draw(image)\r\n\r\n    for x, y, w, h in faces:\r\n        absolute_coords = (x, y, x + w, y + h)\r\n\r\n        drawable.rectangle(absolute_coords)\r\n    return image\r\n\r\n\r\nif __name__ == \'__main__\':\r\n    sys.exit(main())\r\n'"
Crop/face2.py,0,"b'import cv2\r\nimport sys\r\nimport glob \r\nfrom PIL import Image\r\nimport numpy\r\n\r\n# Create the haar cascade\r\nfaceCascade = cv2.CascadeClassifier(\'\\\\opencv\\\\build\\\\etc\\\\haarcascades\\\\haarcascade_frontalface_default.xml\')\r\n\r\nfiles=glob.glob(""*.jpg"")   \r\nfor file in files:\r\n\r\n    # Read the image\r\n    image = cv2.imread(file)\r\n    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\r\n\r\n    # Detect faces in the image\r\n    faces = faceCascade.detectMultiScale(\r\n        gray,\r\n        scaleFactor=1.3,\r\n        minNeighbors=5,\r\n        minSize=(30, 30),\r\n        flags = cv2.CASCADE_SCALE_IMAGE\r\n    )\r\n    print ""Found {0} faces!"".format(len(faces))\r\n    count=1\r\n    # Draw a rectangle around the faces\r\n    for (x, y, w, h) in faces:\r\n        #img = cv2.rectangle(image, (x, y), (x+w, y+h), (0, 255, 0), 2)\r\n        img = cv2.imread(file)\r\n        #roi_gray = gray[y:y+h, x:x+w]\r\n        #roi_color = img[y:y+h, x:x+w]\r\n        cropped = img[y:y+h, x:x+w]\r\n        cv2.imwrite(""{1}{0}"".format(str(file),str(count)), cropped)\r\n        count+=1\r\n        \r\n    cv2.waitKey(0)\r\n'"
Monitor/latest.py,0,"b'import cv2\r\nimport sys\r\nfrom PIL import Image\r\nimport glob \r\nimport numpy\r\n\r\n\r\n\r\nfaceCascade = cv2.CascadeClassifier(\'C:\\\\opencv\\\\build\\\\etc\\\\haarcascades\\\\haarcascade_frontalface_default.xml\')\r\n\r\nvideo_capture = cv2.VideoCapture(0)\r\n\r\nwhile True:\r\n    # Capture frame-by-frame\r\n    ret, frame = video_capture.read()\r\n\r\n    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\r\n\r\n    faces = faceCascade.detectMultiScale(\r\n        gray,\r\n        scaleFactor=1.3,\r\n        minNeighbors=5,\r\n        minSize=(30, 30),\r\n        flags = 0\r\n    )\r\n\r\n    # Draw a rectangle around the faces\r\n    for ( x, y, w, h) in faces:\r\n        # image ,top left coordinate , bottom right , color thickness\r\n        cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)\r\n\r\n    # Display the resulting frame\r\n    cv2.imshow(\'Video\', frame)\r\n    if True:\r\n        ok = frame\r\n        file = r""S:\\Projects\\Python\\Major\\FaceDetection\\Monitor\\0832CS.jpg""\r\n        cv2.imwrite(file, ok)\r\n        img = cv2.imread(file,0)\r\n        cv2.imwrite(\'0832CS.jpg\',img)\r\n        # Create the haar cascade\r\n        faceCascade = cv2.CascadeClassifier(\'C:\\\\opencv\\\\build\\\\etc\\\\haarcascades\\\\haarcascade_frontalface_default.xml\')\r\n\r\n        files=glob.glob(""*.jpg"")   \r\n        for file in files:\r\n\r\n            # Read the image\r\n            image = cv2.imread(file)\r\n            gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\r\n\r\n            # Detect faces in the image\r\n            faces = faceCascade.detectMultiScale(\r\n                gray,\r\n                scaleFactor=1.1,\r\n                minNeighbors=5,\r\n                minSize=(30, 30),\r\n                flags = cv2.CASCADE_SCALE_IMAGE\r\n            )\r\n            print ""Found {0} faces!"".format(len(faces))\r\n            count=1\r\n            # Draw a rectangle around the faces\r\n            for (x, y, w, h) in faces:\r\n                #img = cv2.rectangle(image, (x, y), (x+w, y+h), (0, 255, 0), 2)\r\n                img = cv2.imread(file)\r\n                #roi_gray = gray[y:y+h, x:x+w]\r\n                #roi_color = img[y:y+h, x:x+w]\r\n                cropped = img[y:y+h, x:x+w]\r\n                cv2.imwrite(""{1}{0}"".format(str(file),str(count)), cropped)\r\n                count+=1\r\n            if cv2.waitKey(1) & 0xFF == \'q\':\r\n                break\r\n\r\n# When everything is done, release the capture\r\nvideo_capture.release()\r\ncv2.destroyAllWindows()\r\n\r\n\r\n\r\n\r\n'"
Monitor/monitor.py,0,"b""import sys\r\nimport cv2\r\n\r\nfrom PyQt4 import QtCore, QtGui\r\n\r\nclass QtCapture(QtGui.QWidget):\r\n    def __init__(self, *args):\r\n        super(QtGui.QWidget, self).__init__()\r\n\r\n        self.fps = 24\r\n        self.cap = cv2.VideoCapture(*args)\r\n\r\n        self.video_frame = QtGui.QLabel()\r\n        lay = QtGui.QVBoxLayout()\r\n        lay.setMargin(0)\r\n        lay.addWidget(self.video_frame)\r\n        self.setLayout(lay)\r\n\r\n    def setFPS(self, fps):\r\n        self.fps = fps\r\n\r\n    def nextFrameSlot(self):\r\n        ret, frame = self.cap.read()\r\n        # My webcam yields frames in BGR format\r\n        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\r\n        img = QtGui.QImage(frame, frame.shape[1], frame.shape[0], QtGui.QImage.Format_RGB888)\r\n        pix = QtGui.QPixmap.fromImage(img)\r\n        self.video_frame.setPixmap(pix)\r\n\r\n    def start(self):\r\n        self.timer = QtCore.QTimer()\r\n        self.timer.timeout.connect(self.nextFrameSlot)\r\n        self.timer.start(1000./self.fps)\r\n\r\n    def stop(self):\r\n        self.timer.stop()\r\n\r\n    def deleteLater(self):\r\n        self.cap.release()\r\n        super(QtGui.QWidget, self).deleteLater()\r\nclass ControlWindow(QtGui.QWidget):\r\n    def __init__(self):\r\n        QtGui.QWidget.__init__(self)\r\n        self.capture = None\r\n\r\n        self.start_button = QtGui.QPushButton('Start')\r\n        self.start_button.clicked.connect(self.startCapture)\r\n        self.quit_button = QtGui.QPushButton('End')\r\n        self.quit_button.clicked.connect(self.endCapture)\r\n        self.end_button = QtGui.QPushButton('Stop')\r\n\r\n        vbox = QtGui.QVBoxLayout(self)\r\n        vbox.addWidget(self.start_button)\r\n        vbox.addWidget(self.end_button)\r\n        vbox.addWidget(self.quit_button)\r\n        self.setLayout(vbox)\r\n        self.setWindowTitle('Control Panel')\r\n        self.setGeometry(100,100,200,200)\r\n        self.show()\r\n\r\n    def startCapture(self):\r\n        if not self.capture:\r\n            self.capture = QtCapture(0)\r\n            self.end_button.clicked.connect(self.capture.stop)\r\n            # self.capture.setFPS(1)\r\n            self.capture.setParent(self)\r\n            self.capture.setWindowFlags(QtCore.Qt.Tool)\r\n        self.capture.start()\r\n        self.capture.show()\r\n\r\n    def endCapture(self):\r\n        self.capture.deleteLater()\r\n        self.capture = None\r\n\r\n\r\nif __name__ == '__main__':\r\n    import sys\r\n    app = QtGui.QApplication(sys.argv)\r\n    window = ControlWindow()\r\n    sys.exit(app.exec_())\r\n"""
pyfaces2/countfiles.py,0,"b'\r\nimport os\r\n\r\n\r\npath, dirs, files = os.walk(""/Users/azz/Desktop/nourin/Minor/images/gallery"").next()\r\nfile_count = len(files)\r\n\r\nif file_count > 0:\r\n    import pyfacescontroller\r\n    for x in xrange(file_count-1):\r\n        execfile(""pyfacescontroller.py"")\r\n\r\n'"
pyfaces2/db_connect.py,0,"b'import mysql.connector\r\nimport datetime\r\nfrom time import strftime\r\nfrom datetime import datetime as date\r\nfrom os.path import join,basename\r\nfrom pyfacesgui import *\r\n\r\n#global student\r\n#student=basename(matchfile)            \r\n\r\nclass DatabaseUtility: \r\n    def __init__(self, database, tableName):\r\n        self.db = database\r\n        self.tableName = tableName\r\n\r\n        # Open database connection\r\n        self.cnx = mysql.connector.connect(user = \'root\',password = \'2406\',host = \'127.0.0.1\')\r\n        # prepare a cursor object using cursor() method\r\n        self.cursor = self.cnx.cursor()\r\n\r\n        self.ConnectToDatabase()\r\n        #self.CreateTable()\r\n\r\n\r\n    def ConnectToDatabase(self):\r\n        try:\r\n            self.cnx.database = self.db\r\n        except mysql.connector.Error as err:\r\n            if err.errno == errorcode.ER_BAD_DB_ERROR:\r\n                self.CreateDatabase()\r\n                self.cnx.database = self.db\r\n            else:\r\n                print(err.msg)\r\n\r\n    def CreateDatabase(self):\r\n        try:\r\n            self.RunCommand(""CREATE DATABASE %s DEFAULT CHARACTER SET \'utf8\';"" %self.db)\r\n        except mysql.connector.Error as err:\r\n            print(""Failed creating database: {}"".format(err))\r\n\r\n    def Attendence(self, student, dt, dy , t):\r\n                cmd = ""replace into attendence(enrollment,date,day,time) values (\'%s\',\'%s\',\'%s\',\'%s\' );"" %(student,dt,dy,t)\r\n                try:\r\n                    self.cursor.execute(cmd);\r\n                    print ""done""\r\n                except mysql.connector.Error as err:\r\n                    self.cnx.rollback()\r\n                    print err\r\n                self.cnx.commit()\r\n\r\n    def __del__(self):\r\n        self.cnx.commit()\r\n        self.cursor.close()\r\n        self.cnx.close()\r\n\r\n#===============================================\r\n#===============================================\r\n\r\nif __name__ == \'__main__\':\r\n    db = \'db\'\r\n    tableName = \'attendence\'\r\n    dbu = DatabaseUtility(db, tableName)\r\n'"
pyfaces2/face_recognizer.py,3,"b'#!/usr/bin/python\n\n# Import the required modules\nimport cv2, os\nimport numpy as np\nfrom PIL import Image\n\n# For face detection we will use the Haar Cascade provided by OpenCV.\ncascadePath = ""haarcascade_frontalface_default.xml""\nfaceCascade = cv2.CascadeClassifier(cascadePath)\n\n# For face recognition we will the the LBPH Face Recognizer \nrecognizer = cv2.face.createLBPHFaceRecognizer()\n\ndef get_images_and_labels(path):\n    # Append all the absolute image paths in a list image_paths\n    # We will not read the image with the .sad extension in the training set\n    # Rather, we will use them to test our accuracy of the training\n    image_paths = [os.path.join(path, f) for f in os.listdir(path) if not f.endswith(\'.sad\')]\n    # images will contains face images\n    images = []\n    # labels will contains the label that is assigned to the image\n    labels = []\n    for image_path in image_paths:\n        # Read the image and convert to grayscale\n        image_pil = Image.open(image_path).convert(\'L\')\n        # Convert the image format into numpy array\n        image = np.array(image_pil, \'uint8\')\n        # Get the label of the image\n        nbr = int(os.path.split(image_path)[1].split(""."")[0].replace(""subject"", """"))\n        # Detect the face in the image\n        faces = faceCascade.detectMultiScale(image)\n        # If face is detected, append the face to images and the label to labels\n        for (x, y, w, h) in faces:\n            images.append(image[y: y + h, x: x + w])\n            labels.append(nbr)\n            #cv2.imshow(""Adding faces to traning set..."", image[y: y + h, x: x + w])\n            cv2.waitKey(50)\n    # return the images list and labels list\n    return images, labels\n\n# Path to the Yale Dataset\npath = \'./yalefaces\'\n# Call the get_images_and_labels function and get the face images and the \n# corresponding labels\nimages, labels = get_images_and_labels(path)\ncv2.destroyAllWindows()\n\n# Perform the tranining\nrecognizer.train(images, np.array(labels))\n\n# Append the images with the extension .sad into image_paths\nimage_paths = [os.path.join(path, f) for f in os.listdir(path) if f.endswith(\'.sad\')]\nfor image_path in image_paths:\n    predict_image_pil = Image.open(image_path).convert(\'L\')\n    predict_image = np.array(predict_image_pil, \'uint8\')\n    faces = faceCascade.detectMultiScale(predict_image)\n    for (x, y, w, h) in faces:\n        nbr_predicted = recognizer.predict(predict_image[y: y + h, x: x + w])\n        conf = recognizer.predict(predict_image[y: y + h, x: x + w])\n        nbr_actual = int(os.path.split(image_path)[1].split(""."")[0].replace(""subject"", """"))\n        if nbr_actual == nbr_predicted:\n            print ""{} is Correctly Recognized with confidence {}"".format(nbr_actual, conf)\n        else:\n            print ""{} is Incorrect Recognized as {}"".format(nbr_actual, nbr_predicted)\n        cv2.imshow(""Recognizing Face"", predict_image[y: y + h, x: x + w])\n        cv2.waitKey(1000)\n'"
pyfaces2/imageops.py,0,"b'from PIL import Image\r\nclass XImage:\r\n    def __init__(self,filename):\r\n        self._readImage(filename)\r\n        \r\n    def _readImage(self,fname):\r\n        im=Image.open(fname).convert(""L"")\r\n        self._width,self._height=im.size\r\n        self._pixellist =[pix for pix in  im.getdata()]\r\n\r\ndef make_image(v, filename,imsize,scaled=True):\r\n    v.shape = (-1,)    #change to 1 dim array\r\n    im = Image.new(\'L\', imsize)\r\n    if scaled:\r\n        a, b = v.min(), v.max()    \r\n        v=((v-a)* 255/(b - a))    \r\n    im.putdata(v)    \r\n    im.save(filename)\r\n'"
pyfaces2/pyeigenfaces.py,0,"b'import imageops\r\nfrom numpy import asfarray,dot,argmin,zeros\r\nfrom numpy import average,sort,trace\r\nfrom numpy.linalg import svd,eigh\r\nfrom math import sqrt\r\nimport pickle\r\nfrom shutil import rmtree\r\nfrom os import mkdir\r\n\r\n\r\n\r\nfrom os.path import isdir,join,normpath\r\nfrom os import listdir\r\nclass DirectoryParser:\r\n    def __init__(self,directoryName):\r\n        self.directoryName=directoryName\r\n    def parseDirectory(self,extension):\r\n        if not isdir(self.directoryName): return\r\n        imagefilenameslist=sorted([\r\n            normpath(join(self.directoryName, fname))\r\n            for fname in listdir(self.directoryName)\r\n            if fname.lower().endswith(\'.\'+extension)            \r\n            ])\r\n        return imagefilenameslist\r\n    \r\nclass ImageError(Exception):\r\n    pass\r\n\r\nclass DirError(Exception):\r\n    pass\r\n\r\nclass NoMatchError(Exception):\r\n    pass\r\n \r\nclass FaceBundle:\r\n    def __init__(self,imglist,wd,ht,adjfaces,fspace,avgvals,evals):\r\n        self.imglist=imglist\r\n        self.wd=wd\r\n        self.ht=ht\r\n        self.adjfaces=adjfaces\r\n        self.eigenfaces=fspace\r\n        self.avgvals=avgvals\r\n        self.evals=evals\r\n\r\nclass FaceRec:    \r\n    def validateSelectedImage(self,imgname):\r\n        selectimg=imageops.XImage(imgname)\r\n        selectwdth=selectimg._width\r\n        selectht=selectimg._height               \r\n        if((selectwdth!=self.bundle.wd) or (selectht!=self.bundle.ht)):            \r\n            raise ImageError(""select image of matching dimensions !"")\r\n        else:            \r\n            return selectimg\r\n        \r\n    def findMatchingImage(self,imagename,selectedfacesnum,thresholdvalue):\r\n        selectimg=self.validateSelectedImage(imagename)\r\n        inputfacepixels=selectimg._pixellist\r\n        inputface=asfarray(inputfacepixels)\r\n        pixlistmax=max(inputface)\r\n        inputfacen=inputface/pixlistmax        \r\n        inputface=inputfacen-self.bundle.avgvals\r\n        usub=self.bundle.eigenfaces[:selectedfacesnum,:]\r\n        input_wk=dot(usub,inputface.transpose()).transpose()        \r\n        dist = ((self.weights-input_wk)**2).sum(axis=1)\r\n        idx = argmin(dist)        \r\n        mindist=sqrt(dist[idx])\r\n        result=\'\'\r\n        if mindist < 1e-10:\r\n            mindist=0\r\n        print ""mindist:"",mindist\r\n        if mindist <= thresholdvalue:\r\n            result=self.bundle.imglist[idx]\r\n        print ""try reconstruction""\r\n        self.reconstructFaces(selectedfacesnum)            \r\n        return mindist,result\r\n    \r\n    def doCalculations(self,dir,imglist,selectednumeigenfaces):\r\n        self.createFaceBundle(imglist);        \r\n        egfaces=self.bundle.eigenfaces\r\n        adjfaces=self.bundle.adjfaces\r\n        self.weights=self.calculateWeights(egfaces,adjfaces,selectednumeigenfaces)\r\n        \r\n        #write to cache\r\n        cachefile=join(dir,""saveddata.cache"")\r\n        f2=open(cachefile,""w"")\r\n        pickle.dump(self.bundle,f2)\r\n        f2.close()\r\n        \r\n    def validateDirectory(self,imgfilenameslist):\r\n        if (len(imgfilenameslist)==0):\r\n            print ""folder empty!""\r\n            raise DirError(""folder empty!"")\r\n        imgfilelist=[]\r\n        for z in imgfilenameslist:\r\n            img=imageops.XImage(z)\r\n            imgfilelist.append(img)        \r\n        sampleimg=imgfilelist[0]\r\n        imgwdth=sampleimg._width\r\n        imght=sampleimg._height        \r\n        #check if all images have same dimensions\r\n        for x in imgfilelist:\r\n            newwdth=x._width\r\n            newht=x._height\r\n            if((newwdth!=imgwdth) or (newht!=imght)):\r\n                raise DirError(""select folder with all images of equal dimensions !"")\r\n        return imgfilelist\r\n    \r\n    def calculateWeights(self,eigenfaces,adjfaces,selectedfacesnum):\r\n        usub=eigenfaces[:selectedfacesnum,:]        \r\n        wts=dot(usub,adjfaces.transpose()).transpose()                         \r\n        return wts           \r\n            \r\n    def createFaceBundle(self,imglist):\r\n        imgfilelist=self.validateDirectory(imglist)\r\n        \r\n        img=imgfilelist[0]\r\n        imgwdth=img._width\r\n        imght=img._height\r\n        numpixels=imgwdth * imght\r\n        numimgs=len(imgfilelist)               \r\n        #trying to create a 2d array ,each row holds pixvalues of a single image\r\n        facemat=zeros((numimgs,numpixels))               \r\n        for i in range(numimgs):\r\n            pixarray=asfarray(imgfilelist[i]._pixellist)\r\n            pixarraymax=max(pixarray)\r\n            pixarrayn=pixarray/pixarraymax                        \r\n            facemat[i,:]=pixarrayn           \r\n        \r\n        #create average values ,one for each column(ie pixel)        \r\n        avgvals=average(facemat,axis=0)        \r\n        #make average faceimage in currentdir just for fun viewing..\r\n        #imageops.make_image(avgvals,""average.png"",(imgwdth,imght))               \r\n        #substract avg val from each orig val to get adjusted faces(phi of T&P)     \r\n        adjfaces=facemat-avgvals               \r\n        adjfaces_tr=adjfaces.transpose()        \r\n        L=dot(adjfaces , adjfaces_tr)\r\n        evals1,evects1=eigh(L)\r\n        #svd also works..comment out the prev line and uncomment next line to see \r\n        #evects1,evals1,vt=svd(L,0)        \r\n        reversedevalueorder=evals1.argsort()[::-1]\r\n        evects=evects1[:,reversedevalueorder]               \r\n        evals=sort(evals1)[::-1]                \r\n        #rows in u are eigenfaces        \r\n        u=dot(adjfaces_tr,evects)\r\n        u=u.transpose()               \r\n        #NORMALISE rows of u\r\n        for i in range(numimgs):\r\n            ui=u[i]\r\n            ui.shape=(imght,imgwdth)\r\n            norm=trace(dot(ui.transpose(), ui))            \r\n            u[i]=u[i]/norm        \r\n        \r\n        self.bundle=FaceBundle(imglist,imgwdth,imght,adjfaces,u,avgvals,evals)\r\n        self.createEigenimages(u)# eigenface images\r\n        \r\n    def reconstructFaces(self,selectedfacesnum):        \r\n        recondir=\'../reconfaces\'\r\n        newwt=zeros(self.weights.shape)\r\n        eigenfaces=self.bundle.eigenfaces\r\n        usub=eigenfaces[:selectedfacesnum,:]\r\n        evals=self.bundle.evals\r\n        evalssub=evals[:selectedfacesnum]        \r\n        for i in range(len(self.weights)):\r\n            for j in range(len(evalssub)):        \r\n                newwt[i][j]=self.weights[i][j]*evalssub[j]        \r\n        phinew=dot(newwt,usub)    \r\n        \r\n        xnew=phinew+self.bundle.avgvals\r\n        try:\r\n            if isdir(recondir):                             \r\n                rmtree(recondir,True)                \r\n        except Exception,inst:\r\n            print ""problem removing dir :"",inst.message        \r\n        mkdir(recondir)\r\n        print ""made:"",recondir\r\n        numimgs=len(self.bundle.imglist)\r\n        for x in range(numimgs):\r\n            imgname=recondir+""/reconphi""+str(x)+"".png"" \r\n            imgdata=phinew[x]           \r\n            imageops.make_image(imgdata,imgname,(self.bundle.wd,self.bundle.ht),True)\r\n            \r\n        for x in range(numimgs):\r\n            filename=recondir+""/reconx""+str(x)+"".png""\r\n            imgdata=xnew[x]\r\n            imageops.make_image(imgdata,filename,(self.bundle.wd,self.bundle.ht),True)\r\n    \r\n    def createEigenimages(self,eigenspace):                \r\n        egndir=\'../eigenfaces\'        \r\n        try:\r\n            if isdir(egndir):                \r\n                rmtree(egndir,True)                \r\n        except Exception,inst:\r\n            print ""problem removing dir :"",inst.message        \r\n        mkdir(egndir)            \r\n        numimgs=len(self.bundle.imglist)\r\n        for x in range(numimgs):\r\n            imgname=egndir+""/eigenface""+str(x)+"".png""            \r\n            imageops.make_image(eigenspace[x],imgname,(self.bundle.wd,self.bundle.ht))\r\n    \r\n    def checkCache(self,dir,imglist,selectedfacesnum):        \r\n        cachefile=join(dir,""saveddata.cache"")\r\n        cache_changed=True\r\n        try:\r\n            f=open(cachefile)\r\n        except IOError:\r\n            print ""no cache file found""            \r\n            self.doCalculations(dir,imglist,selectedfacesnum)\r\n        else:\r\n            self.bundle=pickle.load(f)\r\n            oldlist=self.bundle.imglist\r\n            if(imglist==oldlist):\r\n                print \'both sets same\'\r\n                cache_changed=False\r\n                eigenfaces=self.bundle.eigenfaces\r\n                adjfaces=self.bundle.adjfaces                             \r\n                self.weights=self.calculateWeights(eigenfaces,adjfaces,selectedfacesnum);\r\n            if(cache_changed):\r\n                print ""folder changed!!""                \r\n                self.doCalculations(dir,imglist,selectedfacesnum)\r\n            f.close()\r\n    \r\n    def isValid(self,selectedNumberOfEigenFaces,numberOfImageFiles):        \r\n        if selectedNumberOfEigenFaces < numberOfImageFiles and selectedNumberOfEigenFaces > 0:\r\n            return True\r\n        else:\r\n            return False\r\n        \r\n        \r\n            \r\n        \r\n'"
pyfaces2/pyfacescontroller.py,0,"b'import pyfacesgui\r\nimport pyeigenfaces\r\nfrom Tix import Tk\r\nfrom os.path import basename\r\nfrom string import split\r\nfrom PIL import *\r\n\r\n\r\n\r\nclass PyFaceController(object):\r\n    def __init__(self):\r\n        self.facerec=pyeigenfaces.FaceRec()\r\n            \r\n    def getExtension(self,fileName):\r\n        parts = split(basename(fileName),\'.\')\r\n        extension=parts[len(parts) - 1]\r\n        return extension\r\n    def validateSelection(self,fileName,directoryName,numOfEigenfaces,thresholdVal):\r\n        if fileName is \'\':\r\n            print \'validateSelection()::no file selected!!\'\r\n            error=pyfacesgui.NoFileSelectError(\'no file selected\')\r\n            self.updateResults(error)\r\n        elif directoryName is \'\':\r\n            print \'validateSelection()::no directory selected!!\'\r\n            error=pyfacesgui.NoDirSelectError(\'no directory selected\')\r\n            self.updateResults(error)\r\n        else:\r\n            extension=self.getExtension(fileName)            \r\n            dirParser=pyeigenfaces.DirectoryParser(directoryName)\r\n            imagefilenames=dirParser.parseDirectory(extension)            \r\n            if(not self.facerec.isValid(numOfEigenfaces,len(imagefilenames))):\r\n                numOfEigenfaces=len(imagefilenames)/2                                \r\n            try:\r\n                self.recogniseFace(imagefilenames,fileName,directoryName,numOfEigenfaces,thresholdVal)\r\n            except Exception,inst:\r\n                self.updateResults(inst,numOfEigenfaces)        \r\n    \r\n    def recogniseFace(self,imagefilenames,selectedFileName,selectedDirectory,numOfEigenfaces,thresholdVal):\r\n        self.facerec.checkCache(selectedDirectory,imagefilenames,numOfEigenfaces)\r\n        mindist,matchfile=self.facerec.findMatchingImage(selectedFileName,numOfEigenfaces,thresholdVal)\r\n        self.processMatchResult(matchfile,mindist,numOfEigenfaces)        \r\n    \r\n    def processMatchResult(self,matchfile,mindist,numOfEigenfaces):\r\n        if not matchfile:\r\n            error=pyeigenfaces.NoMatchError(\'No match! try higher threshold\')            \r\n            self.updateResults(error,numOfEigenfaces)\r\n        else:\r\n            print ""processMatchResult()::matches :""+matchfile+"" dist :""+str(mindist)#            \r\n            self.updateResults(None,numOfEigenfaces,matchfile,mindist) \r\n            \r\n    def updateResults(self,error,numOfEigenfaces=0,matchfile=\'\',mindist=0.0):\r\n        self.myapp.updateDisplay(error,numOfEigenfaces,matchfile,mindist)\r\n\r\n        \r\nif __name__ == ""__main__"":\r\n    controller=PyFaceController()    \r\n    root = Tk()\r\n    root.wm_title(""PyFaces"")\r\n    controller.myapp =pyfacesgui.PyFaceUI(root,controller)\r\n    root.mainloop()\r\n    \r\n \r\n    \r\n    \r\n    \r\n'"
pyfaces2/pyfacesgui.py,0,"b'import datetime\r\nfrom datetime import datetime as date\r\nfrom Tix import ExFileSelectBox,DirSelectBox\r\nfrom Tkinter import *\r\nfrom tkFont import Font\r\nfrom os.path import join,basename\r\nimport db_connect as db\r\nimport sys\r\n            \r\nfrom PIL import ImageTk\r\nglobal student\r\n#constants\r\ntxt_width=4\r\ntxt_height=1\r\nbutton_width=6\r\nbutton_padx=""2m""\r\nbutton_pady=""1m""\r\nlabel_padx=""2m""\r\n\r\ntxtframe_padx=""3m""\r\ntxtframe_pady=""2m""\r\ntxtframe_ipadx=""3m""\r\ntxtframe_ipady=""1m""\r\n\r\nclass PyFaceUI(object):\r\n    def __init__(self,parent,controller):\r\n        self.dbu = db.DatabaseUtility(\'db\',\'attendence\')\r\n        self.controller=controller\r\n        self.makeFrames(parent)\r\n        self.makeLabels()\r\n        self.thrctrlv=DoubleVar()\r\n        self.fspctrlv=IntVar()\r\n        self.makeTextFields()\r\n        self.setInitialValues()\r\n        self.makeCanvases()\r\n        self.makeButtons()\r\n        self.makeSelectionWidgets()\r\n        self.msgfont=Font(family=""Times"", weight=""bold"")\r\n\r\n    def makeFrames(self,parent):\r\n        self.myParent = parent   \r\n        self.mainframe = Frame(parent,background=""grey"")\r\n        self.mainframe.pack(fill=BOTH,expand=YES)\r\n        \r\n        self.leftFrame=Frame(self.mainframe,background=""grey"",borderwidth=5,relief=RIDGE,height=3000,width=2000)\r\n        self.leftFrame.pack(side=LEFT,fill=BOTH,expand=YES)\r\n        self.imgSelectFrame=Frame(self.leftFrame,background=""grey"",borderwidth=5,height=1000,width=400)\r\n        self.imgSelectFrame.pack(side=TOP,fill=BOTH,expand=YES)\r\n        self.dirSelectFrame=Frame(self.leftFrame,background=""grey"",borderwidth=5,height=1000,width=400)\r\n        self.dirSelectFrame.pack(side=TOP,fill=BOTH,expand=YES)\r\n        self.rtFrame=Frame(self.mainframe,background=""grey"",borderwidth=5,relief=RIDGE,height=3000,width=2000)\r\n        self.rtFrame.pack(side=LEFT,fill=BOTH,expand=YES,padx=txtframe_padx,pady=txtframe_pady,ipadx=txtframe_ipadx ,ipady=txtframe_ipady)\r\n        self.entryFrame=Frame(self.rtFrame,background=""grey"",borderwidth=5,height=200,width=50)\r\n        self.entryFrame.pack(side=TOP,fill=BOTH,expand=YES)\r\n        self.canvFrame=Frame(self.rtFrame,background=""black"",borderwidth=5,height=350,width=450)\r\n        self.canvFrame.pack(side=TOP,fill=BOTH,expand=YES)\r\n        self.resultFrame=Frame(self.rtFrame,background=""black"",borderwidth=5,height=100,width=450)\r\n        self.resultFrame.pack(side=TOP,fill=BOTH,expand=YES)        \r\n        self.btnFrame=Frame(self.rtFrame,background=""grey"",borderwidth=5,height=100,width=450)\r\n        self.btnFrame.pack(side=TOP,fill=BOTH,expand=YES)\r\n        \r\n    def makeLabels(self):\r\n        self.imgSelLabel=Label(self.imgSelectFrame,text=""Select image to check"")\r\n        self.imgSelLabel.pack(side=LEFT)        \r\n        self.dirSelLabel=Label(self.dirSelectFrame,text=""Select folder of images"")\r\n        self.dirSelLabel.pack(side=LEFT)\r\n        self.thresholdLabel=Label(self.entryFrame,text=""Threshold:"",padx=label_padx)\r\n        self.thresholdLabel.grid(row=0,column=0)\r\n        self.eigenfacesLabel=Label(self.entryFrame,text="" Eigenfaces:  "")\r\n        self.eigenfacesLabel.grid(row=1,column=0) \r\n    \r\n    def makeTextFields(self):\r\n        self.thresholdTxt=Entry(self.entryFrame,width=txt_width,textvariable=self.thrctrlv)\r\n        self.thresholdTxt.grid(row=0,column=1)\r\n        self.eigenfacesTxt=Entry(self.entryFrame,width=txt_width,textvariable=self.fspctrlv)\r\n        self.eigenfacesTxt.grid(row=1,column=1)\r\n        \r\n    def makeCanvases(self):\r\n        self.canvorig=Canvas(self.canvFrame,relief=RIDGE,width=140,height=200)\r\n        self.canvorig.pack(side=LEFT)\r\n        self.canvresult=Canvas(self.canvFrame,relief=RIDGE,width=140,height=200)\r\n        self.canvresult.pack(side=RIGHT)        \r\n        self.resultdisplay=Canvas(self.resultFrame,background=""grey"",relief=RAISED,width=280,height=100)\r\n        self.resultdisplay.grid(row=2,column=2)\r\n        \r\n    def makeButtons(self):\r\n        self.okButton = Button(self.btnFrame)\r\n        self.okButton.configure(width=button_width,text=""Match"",command=self.okButtonClick,padx=button_padx,pady=button_pady,anchor=W,disabledforeground=""tan"")        \r\n        self.okButton.pack(side=LEFT )\r\n        self.qtButton = Button(self.btnFrame)\r\n        self.qtButton.configure(width=button_width,text=""Quit"",command=self.quitButtonClick,padx=button_padx,pady=button_pady,anchor=E)       \r\n        self.qtButton.pack(side=RIGHT )\r\n        \r\n    def makeSelectionWidgets(self):        \r\n        self.imgsel=ExFileSelectBox(self.imgSelectFrame)        \r\n        self.imgsel.pack(side=LEFT)\r\n        self.dirsel=DirSelectBox(self.dirSelectFrame) \r\n        self.dirsel.pack(side=LEFT)        \r\n        \r\n    \r\n    def displayResultImage(self):\r\n        self.canvresult.delete(ALL)\r\n        self.canvresult.create_image(70, 100, image=self.resimg)\r\n\r\n    def displayResultMessage(self, message, msgcolor):\r\n        self.resultdisplay.delete(ALL)\r\n        self.resultdisplay.create_text(1, 40, anchor=W, text=message, fill=msgcolor, font=self.msgfont, width=280)\r\n\r\n    def getNumberOfEigenfaces(self):\r\n        txt = self.eigenfacesTxt.get()\r\n        selectedEigenFaces = int(txt)\r\n        return selectedEigenFaces\r\n\r\n    def getThresholdValue(self):\r\n        txt = self.thresholdTxt.get()\r\n        thresholdvalue = float(txt)\r\n        return thresholdvalue\r\n\r\n    def getSelectedDirectoryName(self):\r\n        selectedDirectoryName = self.dirsel.cget(""value"")\r\n        return selectedDirectoryName\r\n\r\n    def getSelectedFileName(self):           \r\n        selectedFileName = self.imgsel.cget(""value"")      \r\n        self.imgsel.selection_clear()\r\n        return selectedFileName\r\n\r\n    def clearAllCanvas(self):\r\n        self.canvorig.delete(ALL)\r\n        self.canvresult.delete(ALL)\r\n        self.resultdisplay.delete(ALL)        \r\n    \r\n    def okButtonClick(self):\r\n        self.okButton.configure(state=DISABLED)\r\n        self.clearAllCanvas()        \r\n        selectedFileName = self.getSelectedFileName()\r\n        selectedDirectoryName = self.getSelectedDirectoryName()\r\n        thresholdvalue = self.getThresholdValue()\r\n        selectedEigenFaces = self.getNumberOfEigenfaces() \r\n        self.showSelectedImage(selectedFileName)       \r\n        self.controller.validateSelection(selectedFileName,selectedDirectoryName,selectedEigenFaces,thresholdvalue)\r\n        \r\n                \r\n    def showSelectedImage(self,imageName):        \r\n        if(not imageName is \'\'):        \r\n            self.selimg=ImageTk.PhotoImage(file=imageName)\r\n            self.selimgtag=self.canvorig.create_image(70,100,image=self.selimg)\r\n            self.canvorig.update_idletasks()\r\n                \r\n    def setInitialValues(self):\r\n        self.fspctrlv.set(6)\r\n        self.thrctrlv.set(2.0)    \r\n    \r\n    def updateDisplay(self,error,numOfEigenfaces,matchfile,mindist):\r\n        if error:\r\n            print \'updateDisplay()::error\'\r\n            message=error.message\r\n            msgcolor=\'red\'\r\n        else:\r\n            print \'updateDisplay()::NO error\'\r\n            matchfilename=basename(matchfile)            \r\n            message=""matches ""+matchfilename+"" at distance =""+str(mindist)\r\n            msgcolor=\'blue\'\r\n            student=basename(matchfile)            \r\n            t = date.today().strftime(""%X"")\r\n            dy = date.today().strftime(""%A"")\r\n            dt = datetime.date.today()\r\n            print student\r\n            print t\r\n            print dt\r\n            print dy\r\n            self.dbu.Attendence(student,dt,dy,t)\r\n\r\n            try:\r\n                self.resimg=ImageTk.PhotoImage(file=matchfile)\r\n            except Exception, inst:\r\n                print \'failed to create PhotoImage\'\r\n                print inst.message\r\n            else:\r\n                self.displayResultImage()\r\n        self.setNumOfEigenfaces(numOfEigenfaces)\r\n        self.displayResultMessage(message, msgcolor)\r\n        self.okButton.configure(state=NORMAL)      \r\n              \r\n    def setNumOfEigenfaces(self,numOfEigenfaces):\r\n        self.fspctrlv.set(numOfEigenfaces)        \r\n        self.eigenfacesTxt.update_idletasks()        \r\n            \r\n    def quitButtonClick(self):\r\n        self.myParent.destroy()\r\n                \r\nclass NoFileSelectError(Exception):\r\n    pass\r\n\r\nclass NoDirSelectError(Exception):\r\n    pass\r\n\r\n'"
