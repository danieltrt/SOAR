file_path,api_count,code
setup.py,0,"b""from distutils.core import setup\nsetup(\n  name = 'OneHotEncode',\n  packages = ['OneHotEncode'], # this must be the same as the name above\n  version = '0.2',\n  description = 'A python script to deploy One-Hot encoding in Pandas Dataframes',\n  author = 'Rahul Singh',\n  author_email = 'singhrahuldps@gmail.com',\n  url = 'https://github.com/singhrahuldps/OneHotEncode.git', # use the URL to the github repo\n  download_url = 'https://github.com/singhrahuldps/OneHotEncode/archive/0.1.tar.gz', # I'll explain this in a second\n  keywords = ['pandas', 'database', 'one-hot','one','hot','features','categorical','numerical','encode','encoding'], # arbitrary keywords\n  classifiers = [],\n)\n"""
OneHotEncode/OneHotEncode.py,0,"b""def OneHotEncode(pandas_dataframe,category_columns=[],check_numerical=False,max_var=None):\n\t# Parameter explanation ----\n\t# pandas_dataframe -> The Pandas Dataframe object that contains the column you want to one-hot encode\n\t# category_columns -> List of column names in pandas_dataframe that you want to one-hot encode\n\t# override_alert (Default=False) -> A naive way of checking if the column contains numerical\n\t#                                   data or is unsuitable for one-hot encoding\n\t#                                   Set it to True to turn on the detection\n\n\timport numpy as numpylib\n\n\t# The dataframe is copied to a new variable\n\tdf=pandas_dataframe.copy()\n\n\t# List of list of names of all new columns made for a single column \n\tall_new_cols=[]\n\n\t# List of dictionary of names of all new columns made for a single column\n\tnew_col_dict=[]\n\n\t# List of arrays containg the dropped columns that were originally input\n\tdropped_cols=[]\n\n\tnumerical_const=20\n\t\n\tfor col in category_columns:\n\n\t\tcategory_elements=[]\n\t\tmain_row=df[str(col)].values\n\t\ttotal_rows=len(main_row)\n\t\tfor category_element in main_row:\n\t\t\tcategory_elements.append(category_element)\n\t\tcategory_elements=list(set(category_elements))\n\n\t\tif check_numerical:\n\t\t\tif max_var!=None:\n\t\t\t\tif len(category_elements) > max_var:\n\t\t\t\t\tprint(col+' not suitable for One-Hot Encoding')\n\t\t\t\t\tcontinue\n\t\t\telse:\n\t\t\t\tif len(category_elements)>numerical_const:\n\t\t\t\t\tprint(col+' has more variables than permitted')\n\t\t\t\t\tcontinue\n\t\t\n\t\tif max_var != None:\n\t\t\tif len(category_elements) > max_var:\n\t\t\t\t\tprint(col+' has more variables than allowed')\n\t\t\t\t\tcontinue\n\n\t\tcategory_element_dict={}\n\t\tfor i in range(len(category_elements)):\n\t\t\tcategory_element_dict[category_elements[i]]=i\n\n\t\tcategory_element_reverse_dict={}\n\t\tfor i in range(len(category_elements)):\n\t\t\tcategory_element_reverse_dict[col+str(i)]=category_elements[i]\n\n\t\tdict_new_columns={}\n\n\t\tcategory_element_str = [(col+str(x)) for x in range(len(category_elements))]\n\t\tfor string in category_element_str:\n\t\t\tzero_row=numpylib.zeros((total_rows,), dtype=numpylib.int)\n\t\t\tdict_new_columns[string]=zero_row\n\n\t\tcolnames=[]\n\t\tfor i in range(total_rows):\n\t\t\tcolnames.append(category_element_str[category_element_dict[main_row[i]]])\n\t\tfor i in range(total_rows):\n\t\t\tdict_new_columns[colnames[i]][i]=1\n\t\tfor element in category_element_str:\n\t\t\tdf[element]=dict_new_columns[element]\n\n\t\t# Original columns are dropped from the dataframe\n\t\tdf=df.drop(col,1)\n\n\t\tall_new_cols.append(category_element_str)\n\t\tnew_col_dict.append(category_element_reverse_dict)\n\t\tdropped_cols.append(main_row)\n\n\treturn df,dropped_cols,all_new_cols,new_col_dict\n"""
OneHotEncode/__init__.py,0,b''
