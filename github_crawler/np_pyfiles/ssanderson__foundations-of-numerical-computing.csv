file_path,api_count,code
ansible/files/jupyterhub_config.py,0,"b'from contextlib import closing\nfrom os import chmod, environ\nfrom os.path import join as path_join, exists as path_exists\nimport shutil\nimport socket\n\nfrom jupyterhub.auth import Authenticator\nfrom traitlets import Any, Unicode\nfrom IPython.lib.security import passwd, passwd_check\n\nfrom dockerspawner import DockerSpawner\n\nc = get_config()  # noqa\n\n# Grant admin users permission to access single-user servers.\nc.JupyterHub.admin_access = True\n\n\ndef get_open_port(interface=\'localhost\'):\n    with closing(socket.socket(socket.AF_INET, socket.SOCK_STREAM)) as s:\n        s.bind((interface, 0))\n        return s.getsockname()[1]\n\n\n# Class for authenticating users.\nclass TutorialAuthenticator(Authenticator):\n    """"""\n    An authenticator that uses the same password for all students, plus an\n    instructor password.\n    """"""\n    student_password = Unicode(\n        default_value=environ.get(\'TUTORIAL_USER_PASSWORD\', ""pass""),\n    )\n    student_password_hash = Any()\n\n    admin_password = Unicode(\n        default_value=environ.get(\'TUTORIAL_ADMIN_USER_PASSWORD\', \'admin-pass\')\n    )\n    admin_password_hash = Any()\n\n    def _student_password_hash_default(self):\n        return passwd(self.student_password)\n\n    def _admin_password_hash_default(self):\n        return passwd(self.admin_password)\n\n    def _admin_users_default(self):\n        return {\'administrator\'}\n\n    async def authenticate(self, handler, data):\n        username = data[\'username\']\n        password = data[\'password\']\n\n        if username in self.admin_users:\n            to_check = self.admin_password_hash\n        else:\n            to_check = self.student_password_hash\n\n        if passwd_check(to_check, password):\n            return username\n        else:\n            return None\n\n\nc.JupyterHub.authenticator_class = TutorialAuthenticator\n\n\n# Class for spawning notebook servers\nclass TutorialSpawner(DockerSpawner):\n    """"""\n    A spawner that mounts a persistent host volume for users based on username\n    name, but doesn\'t require or create Unix users for them.\n\n    This allows students to retain their work if the hub goes down, but doesn\'t\n    require us to create a unix login for every user.\n    """"""\n    host_materials_root = Unicode(default_value=""/tutorial/materials"")\n    host_workspace_root = Unicode(default_value=""/tutorial/workspace"")\n    guest_workspace = Unicode(default_value=""/home/jovyan"")\n\n    @property\n    def host_workspace(self):\n        return path_join(self.host_workspace_root, self.user.name)\n\n    def _volumes_default(self):\n        return {self.host_workspace: self.guest_workspace}\n\n    def _port_default(self):\n        # Use a new port because we\'re running on the host network.\n        return get_open_port()\n\n    async def start(self, *args, **kwargs):\n        """"""\n        Create a new workspace for the user if one doesn\'t already exist, then\n        spawn them a container.\n        """"""\n        src = self.host_materials_root\n        dest = self.host_workspace\n        if not path_exists(dest):\n            self.log.info(""Copying %s to %s"", src, dest)\n            shutil.copytree(src, dest)\n\n        self.log.info(""Setting permissions on %s to read-write-execute."", dest)\n        chmod(dest, 0o777)\n\n        return await super().start(*args, **kwargs)\n\n\nc.JupyterHub.spawner_class = TutorialSpawner\n# NOTE: This needs to the singleuser_docker_image ansible variable\nc.TutorialSpawner.container_image = \'foundations-of-numerical-computing:latest\'\nc.TutorialSpawner.network_name = \'host\'\nc.TutorialSpawner.use_internal_ip = True\nc.TutorialSpawner.remove_containers = True\n\n# url for the database. e.g. `sqlite:///jupyterhub.sqlite`\nc.JupyterHub.db_url = \'sqlite:///:memory:\'\n\nc.Spawner.mem_limit = ""1G""\n'"
