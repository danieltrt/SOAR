file_path,api_count,code
setup.py,0,"b'from setuptools import find_packages, setup\n\nsetup(\n    name=""intersect"",\n    version=""1.0"",\n    packages=find_packages(),\n    license=""Private"",\n    description=""Intersection Of two curves"",\n    author=""sukhbinder"",\n    author_email=""sukh2010@yahoo.com""\n)\n'"
intersect/__init__.py,0,b'from .intersect import intersection'
intersect/intersect.py,30,"b'import numpy as np\r\n""""""\r\nGive, two x,y curves this gives intersection points,\r\nautor: Sukhbinder\r\n5 April 2017\r\n\r\n\r\nBased on: http://uk.mathworks.com/matlabcentral/fileexchange/11837-fast-and-robust-curve-intersections\r\n""""""\r\n\r\n\r\ndef _rect_inter_inner(x1, x2):\r\n    n1 = x1.shape[0]-1\r\n    n2 = x2.shape[0]-1\r\n    X1 = np.c_[x1[:-1], x1[1:]]\r\n    X2 = np.c_[x2[:-1], x2[1:]]\r\n    S1 = np.tile(X1.min(axis=1), (n2, 1)).T\r\n    S2 = np.tile(X2.max(axis=1), (n1, 1))\r\n    S3 = np.tile(X1.max(axis=1), (n2, 1)).T\r\n    S4 = np.tile(X2.min(axis=1), (n1, 1))\r\n    return S1, S2, S3, S4\r\n\r\n\r\ndef _rectangle_intersection_(x1, y1, x2, y2):\r\n    S1, S2, S3, S4 = _rect_inter_inner(x1, x2)\r\n    S5, S6, S7, S8 = _rect_inter_inner(y1, y2)\r\n\r\n    C1 = np.less_equal(S1, S2)\r\n    C2 = np.greater_equal(S3, S4)\r\n    C3 = np.less_equal(S5, S6)\r\n    C4 = np.greater_equal(S7, S8)\r\n\r\n    ii, jj = np.nonzero(C1 & C2 & C3 & C4)\r\n    return ii, jj\r\n\r\n\r\ndef intersection(x1, y1, x2, y2):\r\n    """"""\r\nINTERSECTIONS Intersections of curves.\r\n   Computes the (x,y) locations where two curves intersect.  The curves\r\n   can be broken with NaNs or have vertical segments.\r\n\r\nusage:\r\nx,y=intersection(x1,y1,x2,y2)\r\n\r\n    Example:\r\n    a, b = 1, 2\r\n    phi = np.linspace(3, 10, 100)\r\n    x1 = a*phi - b*np.sin(phi)\r\n    y1 = a - b*np.cos(phi)\r\n\r\n    x2=phi\r\n    y2=np.sin(phi)+2\r\n    x,y=intersection(x1,y1,x2,y2)\r\n\r\n    plt.plot(x1,y1,c=\'r\')\r\n    plt.plot(x2,y2,c=\'g\')\r\n    plt.plot(x,y,\'*k\')\r\n    plt.show()\r\n\r\n    """"""\r\n    x1 = np.asarray(x1)\r\n    x2 = np.asarray(x2)\r\n    y1 = np.asarray(y1)\r\n    y2 = np.asarray(y2)\r\n\r\n    ii, jj = _rectangle_intersection_(x1, y1, x2, y2)\r\n    n = len(ii)\r\n\r\n    dxy1 = np.diff(np.c_[x1, y1], axis=0)\r\n    dxy2 = np.diff(np.c_[x2, y2], axis=0)\r\n\r\n    T = np.zeros((4, n))\r\n    AA = np.zeros((4, 4, n))\r\n    AA[0:2, 2, :] = -1\r\n    AA[2:4, 3, :] = -1\r\n    AA[0::2, 0, :] = dxy1[ii, :].T\r\n    AA[1::2, 1, :] = dxy2[jj, :].T\r\n\r\n    BB = np.zeros((4, n))\r\n    BB[0, :] = -x1[ii].ravel()\r\n    BB[1, :] = -x2[jj].ravel()\r\n    BB[2, :] = -y1[ii].ravel()\r\n    BB[3, :] = -y2[jj].ravel()\r\n\r\n    for i in range(n):\r\n        try:\r\n            T[:, i] = np.linalg.solve(AA[:, :, i], BB[:, i])\r\n        except:\r\n            T[:, i] = np.Inf\r\n\r\n    in_range = (T[0, :] >= 0) & (T[1, :] >= 0) & (\r\n        T[0, :] <= 1) & (T[1, :] <= 1)\r\n\r\n    xy0 = T[2:, in_range]\r\n    xy0 = xy0.T\r\n    return xy0[:, 0], xy0[:, 1]\r\n\r\n\r\nif __name__ == \'__main__\':\r\n    import matplotlib.pyplot as plt\r\n    # a piece of a prolate cycloid, and am going to find\r\n    a, b = 1, 2\r\n    phi = np.linspace(3, 10, 100)\r\n    x1 = a*phi - b*np.sin(phi)\r\n    y1 = a - b*np.cos(phi)\r\n\r\n    x2 = phi\r\n    y2 = np.sin(phi)+2\r\n    x, y = intersection(x1, y1, x2, y2)\r\n    plt.plot(x1, y1, c=\'r\')\r\n    plt.plot(x2, y2, c=\'g\')\r\n    plt.plot(x, y, \'*k\')\r\n    plt.show()\r\n'"
tests/__init__.py,0,b''
tests/test_intersection.py,8,"b'import pytest\nfrom intersect import intersection\n\nimport numpy as np\n\n\ndef test_basic():\n    a, b = 1, 2\n    phi = np.linspace(3, 10, 100)\n    x1 = a*phi - b*np.sin(phi)\n    y1 = a - b*np.cos(phi)\n\n    x2 = phi\n    y2 = np.sin(phi)+2\n    x, y = intersection(x1, y1, x2, y2)\n\n    assert pytest.approx(x) == np.array([6.10765984, 8.36483107])\n    assert pytest.approx(y) == np.array([1.82539714, 2.87208714])\n\n\ndef test_bug_overlapping_lines():\n    """"""\n    more info https://github.com/sukhbinder/intersection/issues/1\n    """"""\n    x1 = [0., 0.,  1., 1.,  1., 2., 2., 2.]\n    y1 = [100.,  25.,  25.,  25.,  20.,  20.,  20.,   0.]\n    x2 = [0., 0., 2., 2., 2., 4., 4., 4.]\n    y2 = [0.,  10.,  10.,  10.,  20.,   20.,  20., 100.]\n    x, y = intersection(x1, y1, x2, y2)\n\n    assert pytest.approx(x) == np.array([2., 2., 2.])\n    assert pytest.approx(y) == np.array([20.,  10., 20.])\n'"
