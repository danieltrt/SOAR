file_path,api_count,code
Module10_Web_Scrapping/web_scrapping.py,0,"b'# Web Scrapping\r\n\r\n#Step 1: Find the URL that you want to scrape\r\n#For this example, we are going scrape Amazon website to extract the Price, Name, and Rating of iPhone. \r\n#The URL for this page is https://www.amazon.in/s?k=iphone&ref=nb_sb_noss\r\n\r\n# Step 2: Inspecting the Page\r\n#The data is usually nested in tags. So, we inspect the page to see, under which tag the data we want to scrape is nested. To inspect the page, just right click on the element and click on \xe2\x80\x9cInspect\xe2\x80\x9d.\r\n\r\n# Step 3: Find the data you want to extract\r\n#Let\xe2\x80\x99s extract the Price, Name, and Rating which is nested in the \xe2\x80\x9cdiv\xe2\x80\x9d tag respectively.\r\n\r\n# Step 4: Write the code\r\n# First, let\xe2\x80\x99s create a Python file. To do this, open the terminal in Ubuntu and type gedit <your file name> with .py extension.\r\n\r\n# First, let us import all the necessary libraries:\r\n\r\nfrom selenium import webdriver\r\nfrom BeautifulSoup import BeautifulSoup\r\nimport pandas as pd\r\n\r\n# To configure webdriver to use Chrome browser, we have to set the path to chromedriver\r\n\r\ndriver = webdriver.Chrome(""/usr/lib/chromium-browser/chromedriver"")\r\n\r\n# Refer the below code to open the URL:\r\n\r\nproducts=[] #List to store name of the product\r\nprices=[] #List to store price of the product\r\nratings=[] #List to store rating of the product\r\ndriver.get(""https://www.flipkart.com/search?q=iphone&otracker=AS_Query_HistoryAutoSuggest_1_0&otracker1=AS_Query_HistoryAutoSuggest_1_0&marketplace=FLIPKART&as-show=on&as=off&as-pos=1&as-type=HISTORY"")\r\n\r\n\r\ncontent = driver.page_source\r\nsoup = BeautifulSoup(content)\r\nfor a in soup.findAll(\'a\',href=True, attrs={\'class\':\'_3O0U0u\'}):\r\nname=a.find(\'div\', attrs={\'class\':\'_3wU53n\'})\r\nprice=a.find(\'div\', attrs={\'class\':\'_1vC4OE _2rQ-NK\'})\r\nrating=a.find(\'div\', attrs={\'class\':\'_2_KrJI\'})\r\nproducts.append(name.text)\r\nprices.append(price.text)\r\nratings.append(rating.text)\r\n\r\n# Step 5: Run the code and extract the data\r\n# To run the code, use the below command:\r\n\r\n#python web_scrapping.py\r\n\r\n\r\n# After extracting the data, you might want to store it in a format. This format varies depending on your requirement. For this example, we will store the extracted data in a CSV (Comma Separated Value) format. To do this, I will add the following lines to my code:\r\n\r\ndf = pd.DataFrame({\'Product Name\':products,\'Price\':prices,\'Rating\':ratings}) \r\ndf.to_csv(\'products.csv\', index=False, encoding=\'utf-8\')\r\n\r\n'"
Module1_Concept-of-Sequence-in-Python/dict_operation_in_Sequence.py,0,"b'dict={1:""Python"",2:""Android""}\r\nprint(dict)\r\nprint(dict[1])\r\n\r\ndict[1]=""Javascript""\r\nprint(dict)\r\n\r\ndel(dict[2])\r\nprint(dict)\r\n\r\nprint(len(dict))\r\nprint(str(dict))\r\nprint(type(dict))\r\n\r\nprint(dict.copy())\r\ndict.clear()\r\nprint(dict)\r\n\r\n#add\r\ndict1={1:\'Python\',2:\'Android\'}\r\nprint(dict1.items())\r\n\r\nprint(dict1.keys())\r\n\r\nprint(dict1.values())\r\n\r\nprint(dict1.setdefault(1,4))\r\n\r\n\r\ndic={3:\'Python\',1:\'Java\',2:\'Big Data\'}\r\nks=list(dic.keys())\r\nprint(ks)\r\n\r\nsk=sorted(ks)\r\nprint(sk)\r\n\r\nfor key in sk:\r\n    print(key,\'=>\',dic[key])\r\n\r\n\r\n\r\nrec = {\'name\': {\'first\': \'Bob\', \'last\': \'Smith\'},\r\n\'jobs\': [\'dev\', \'mgr\'],\'age\': 40.5}\r\nprint(rec.get(\'name\'))\r\n'"
Module1_Concept-of-Sequence-in-Python/list_operation_in_sequence.py,0,"b'list=[""Hadoop"",""Python"",""Android""]\r\nprint(list[1])\r\n\r\nprint(list[0:2])\r\n\r\nprint(list[-1])\r\n\r\nlist=[""Hadoop"",""Python"",""Android""]\r\n\r\nlist[1]=""Java""\r\nprint(list)\r\n\r\ndel(list[2])\r\nprint(list)\r\n\r\nlist=[1,2,3]\r\nlist.append(""Machine Learning"")\r\nprint(list)\r\n\r\nlist.extend([\'g\',\'h\'])\r\nprint(list)\r\n\r\nlist.insert(1,\'Scripting\')\r\nprint(list)\r\n\r\nlist.remove(3)\r\nprint(list)\r\n\r\nlst=[1,4,2,\'x\',\'y\',\'z\']\r\nif(type(lst)==list):\r\n    print(""Yes"")\r\n\r\n\r\n\r\nlist3=[1,2,5,\'Python\',\'Haddop\']\r\nprint(type(list3))\r\n\r\nprint([x**2 for x in[1,2,3,4,5]])\r\n\r\n\r\nlist4=[\'Pytyhon\',\'Java\',\'Haddop\',\'Android\']\r\nprint(list4.sort())\r\nprint(list3.reverse())\r\n\r\nprint([x**2 for x in[1,2,3,4,5]])\r\n\r\nlist=[1,2,3,4,5,\'a\',\'b\',\'c\']\r\nprint(list.pop(3))\r\n\r\nlist.remove(\'a\')\r\nprint(list)\r\n\r\nlist1=[\'Python\',\'XYZ\',\'ABC\',\'PQR\']\r\nprint(list1)\r\n\r\nprint(sorted(list1))\r\n\r\nprint(list1[::-1])\r\n'"
Module1_Concept-of-Sequence-in-Python/sequence_operation.py,0,"b'list=[""Marketing"",""Content Designing"",""Sales""]\r\nprint(list)\r\n\r\n#Concatenation\r\nprint(list+[""Python"",""Hadoop""])\r\n\r\n#Repetition\r\nprint(list*2)\r\n\r\n#Membership Testing\r\nprint(\'Marketing\' in list)\r\n\r\n#Indexing\r\nprint(list[2])\r\n\r\n#Slicing\r\nprint(list[0:2])'"
Module1_Concept-of-Sequence-in-Python/set_opration_in_sequence.py,0,"b""X=set('Welcome To Python')\r\nprint(X)\r\n\r\nA={1,2,3,4}\r\nB={3,4,5,6}\r\nprint(A|B)\r\nprint(A&B)\r\n\r\nA={1,2,3,4,5}\r\nB={4,5,6,7,8}\r\nprint(A-B)\r\n\r\ns={'a','b','c','d','e','f','o','v'}\r\nset1={'a','b','d','o','v'}\r\nset2={'a','c','d','o','e'}\r\nprint(set1|set2)\r\nprint(set1&set2)\r\nprint(set1-set2)\r\n\r\n#add\r\n\r\ns={1,2,3,'a','b'}\r\nset1={1,'a','b'}\r\nprint(1 in s)\r\n\r\nprint(set1.issubset(s))\r\n\r\nprint(5 not in s)\r\n\r\nprint(s.issuperset(set1))\r\n\r\nprint(s.union(set1))\r\n\r\nprint(s.intersection(set1))\r\n\r\nprint(s.difference(set1))\r\n\r\nprint(s.symmetric_difference(set1))\r\n\r\n\r\ns={1,2,3,'a','b'}\r\ns.add('c')\r\nprint(s)\r\n\r\ns.remove(1)\r\nprint(s)\r\n\r\ns.discard(3)\r\nprint(s)\r\n\r\ns.pop()\r\nprint(s)\r\n\r\ns.clear()\r\nprint(s)\r\n"""
Module1_Concept-of-Sequence-in-Python/string_operation_in_sequence.py,0,"b'str1=\'Welcome\'\r\nstr2=""to""\r\nstr3=""""""Python""""""\r\n\r\nprint(str1)\r\nprint(str2)\r\nprint(str3)\r\n\r\nstring=""Python""\r\nprint(string)\r\nprint(len(string))\r\nprint(string[1:3])\r\nprint(\'t\' in string)\r\n\r\nprint(""Welcome to %s""%(""Python""))\r\nprint(""My name is %s and my age is %d""%(""Annie"",22))\r\n\r\nstr=\'edureka\'\r\nprint(str.capitalize())\r\nprint(str.count(""ka"",0,len(str)))\r\n\r\ns=str.encode(\'utf-8\',\'strict\')\r\nprint(s)\r\n\r\nprint(max(str))\r\nprint(min(str))\r\nprint(str.replace(\'e\',\'--E--\',1))\r\nprint(str.upper())\r\nprint(str.index(\'k\'))\r\n\r\nstr1=""Happy Learning""\r\n\r\nprint(str1[::-1])\r\n\r\nprint(str1[2:7])\r\n\r\nprint(str1.find(\'L\'))\r\n\r\nstr2=""Welcome to Python""\r\n\r\nprint(str1+str2)\r\n\r\nprint(str1*2)\r\n'"
Module1_Concept-of-Sequence-in-Python/tuples_operation_in_sequence.py,0,"b'tup1=(""Haddop"",""Python"",""Java"")\r\n\r\nprint(len(tup1))\r\nprint(max(tup1))\r\nprint(min(tup1))\r\n\r\n\r\n\r\n\r\n\r\ntup1=(""Haddop"",""Python"",""Java"")\r\n\r\nprint(len(tup1))\r\n\r\nprint(tup1*2)\r\n\r\nprint(""Java"" in tup1)\r\n\r\ntup2=(1,3,5,7)\r\ntup3=(2,4,6,8)\r\ntup4=tup2+tup3\r\nprint(tup4)\r\n\r\ndel(tup2)\r\nprint(tup2)\r\n\r\n\r\ntup=(1,3,5,2)\r\n\r\nprint(sorted(tup))\r\n\r\nprint(tup[::-1])\r\n\r\n\r\ntuple1=(1,3,5,7,\'a\',\'b\')\r\nlst=list(tuple1)\r\n\r\nprint(lst)\r\n\r\nlst[1]=""Python""\r\nprint(lst)\r\n\r\ntuple2=tuple(lst)\r\nprint(tuple2)\r\n'"
Module3_OOPs_Key_Concepts_in_Python/Classes and Objects.py,0,"b'# Class: A class in python is the blueprint from which specific objects are created.\r\n# Object: An object in python is the instance of class.\r\n\r\n# Attribute = Data = Data Members = Instance Variables\r\n# Method = Function\r\n# Method : A methods which are accessed via dot notation.\r\n# Methods are also called as functions which are defined in a class and describes the behaviour of an object.\r\n\r\n# Variables:\r\n# Class variable:  is a variable that is shared by all the different objects/instances of a class.\r\n# Instance variables:  are variables which are unique to each instance.\r\n# It is defined inside a method and belongs only to the current instance of a class.\r\n\r\n\r\n\'\'\'\r\nNow, let us move ahead and see how it works in PyCharm. To get started, first have a look at the syntax of a python class.\r\n\r\nSyntax:\r\nclass Class_name:\r\nstatement-1\r\n.\r\n.\r\nstatement-N\r\n\'\'\'\r\n\r\n\r\n# Create class by the name of Student\r\nclass Student:\r\n\r\n    pass\r\n\r\n#create instance or object\r\nStd_1 = Student()\r\nStd_2 = Student()\r\n\r\n# define instance variable for first instance std_1\r\nStd_1.first = ""Neel""\r\nStd_1.last = ""Verma""\r\nStd_1.email = ""Neel@school.com""\r\nStd_1.marks = 55\r\n\r\n# define instance variable for second instance std_2\r\n\r\nStd_2.first = ""Hemant""\r\nStd_2.last = ""Sharma""\r\nStd_2.email = ""Hemant@school.com""\r\nStd_2.marks = 90\r\n\r\n#Print or get output from both the instance\r\nprint(Std_1.email)\r\nprint(Std_2.email)\r\n\r\n#-------------------------------------------------------------------------------------------------------------------\r\n\r\n# Now ignore lot of codes and manual work for passing instance variable use Methods and Attributes in a Python Class.\r\n# Use init() method as a contractor for new object or new instance.\r\n\r\nclass Student:\r\n    def __init__(self, first, last, marks):\r\n        self.first = first\r\n        self.last = last\r\n        self.marks = marks\r\n        self.email = first + ""."" + last + ""@school.com""\r\n\r\nStd_1 = Student(""Neel"",""Verma"",60)\r\nStd_2 = Student(""Hemant"",""Sharma"",90)\r\n\r\nprint(Std_1.first)\r\nprint(Std_2.first)\r\n\r\n# Let\'s print email\r\nprint(Std_1.email)\r\nprint(Std_2.email)\r\n\r\n# Let\'s print full name\r\nprint(\'{} {}\'.format(Std_1.first, Std_1.last))\r\nprint(\'{} {}\'.format(Std_2.first, Std_2.last))\r\n\r\n\r\n#----------------- define another method for printing full name ---------------\r\n\r\nclass Student:\r\n    def __init__(self, first, last, marks):\r\n        self.first = first\r\n        self.last = last\r\n        self.marks = marks\r\n        self.email = first + ""."" + last + ""@school.com""\r\n    \r\n    def fullname(self):\r\n            return \'{}{}\'.format(self.first,self.last)\r\n\r\nStd_1 = Student(""Neel"",""Verma"",60)\r\nStd_2 = Student(""Hemant"",""Sharma"",90)\r\n\r\n# Let\'s print full name of all instance\r\nprint(Std_1.fullname())\r\nprint(Std_2.fullname())\r\n\r\n\r\n#------ define another function which will calculate annual increment of marks\r\n\r\nclass Student:\r\n    \r\n    perc_rise = 1.05\r\n    \r\n    def __init__(self, first, last, marks):\r\n        self.first = first\r\n        self.last = last\r\n        self.marks = marks\r\n        self.email = first + ""."" + last + ""@school.com""\r\n\r\n    def fullname(self):\r\n        return \'{}{}\'.format(self.first, self.last)\r\n\r\n    def apply_raise(self):\r\n        self.marks = int(self.marks * 1.05)\r\n        \r\nStd_1 = Student(""Neel"",""Verma"",60)\r\nStd_2 = Student(""Hemant"",""Sharma"",90)\r\n\r\nprint(Std_1.marks)\r\nStd_1.apply_raise()\r\nprint(Std_1.marks)\r\n\r\nprint(Std_2.marks)\r\nStd_2.apply_raise()\r\nprint(Std_2.marks)\r\n\r\n\r\n#---------- Let\'s create object instance from class ""blueprint"" -------------\r\n\r\nclass Student:\r\n    \r\n    perc_rise = 1.05\r\n    \r\n    def __init__(self, first, last, marks):\r\n        self.first = first\r\n        self.last = last\r\n        self.marks = marks\r\n        self.email = first + ""."" + last + ""@school.com""\r\n\r\n    def fullname(self):\r\n        return \'{}{}\'.format(self.first, self.last)\r\n\r\n    def apply_raise(self):\r\n        self.marks = int(self.marks * 1.05)\r\n\r\nStd_1 = Student(""Neel"",""Verma"",60)\r\nStd_2 = Student(""Hemant"",""Sharma"",90)\r\n\r\nprint(Std_1)\r\nprint(Std_2)\r\n\r\nprint(Std_2.__dict__)\r\nprint(Student.__dict__)\r\n\r\n\r\n#========================= Python Class: Inheritance========================\r\n\r\n# Inheritance allows us to inherit attributes and methods from the base/parent class.\r\n\r\n#1. Parent class ( Super or Base class)\r\n\r\n#2. Child class (Subclass or Derived class )\r\n\r\n#A class which inherits the properties is known as Child Class \r\n# whereas a class whose properties are inherited is known as Parent class.\r\n\r\n#-------------------------- Create New Class Name: Class Dump---------------\r\nclass Student:\r\n    \r\n    perc_rise = 1.05\r\n    \r\n    def __init__(self, first, last, marks):\r\n        self.first = first\r\n        self.last = last\r\n        self.marks = marks\r\n        self.email = first + ""."" + last + ""@school.com""\r\n\r\n    def fullname(self):\r\n        return \'{}{}\'.format(self.first, self.last)\r\n\r\n    def apply_raise(self):\r\n        self.marks = int(self.marks * 1.05)\r\n\r\nclass Dump(Student):\r\n    \r\n    pass\r\n\r\nStd_1 = Dump (""Neel"",""Verma"",60)\r\n\r\nprint(Std_1.email)\r\n\r\n# Here we can see Method Resolution Order\r\n\r\nprint(help(Dump))\r\n\r\n#----------------- Add one more attribute in out Base Class------------------\r\n\r\nclass Student:\r\n    \r\n    perc_rise = 1.05\r\n    \r\n    def __init__(self, first, last, marks):\r\n        self.first = first\r\n        self.last = last\r\n        self.marks = marks\r\n        self.email = first + ""."" + last + ""@school.com""\r\n\r\n    def fullname(self):\r\n        return \'{}{}\'.format(self.first, self.last)\r\n\r\n    def apply_raise(self):\r\n        self.marks = int(self.marks * 1.05)\r\n\r\nclass Dump(Student):\r\n    \r\n    perc_rise = 1.1\r\n    \r\n    def __init__(self, first, last, marks, prog_lang):\r\n        super().__init__(first, last, marks)\r\n        self.prog_lang = prog_lang\r\n\r\nStd_1 = Dump(""Neel"", ""Verma"", 60, ""Python"")\r\n\r\nprint(Std_1.prog_lang)\r\n\r\n\r\n#======================== Abstract Class ==================================\r\n\r\nfrom abc import ABC, abstractmethod\r\n\r\nclass Employee (ABC):\r\n    \r\n    @abstractmethod\r\n    \r\n    def calculate_salary(self, sal):\r\n        \r\n        pass\r\n    \r\nclass Developer(Employee):\r\n    \r\n    def calculate_salary(self, sal):\r\n        \r\n        finalsalary = sal * 1.10\r\n        \r\n        return finalsalary\r\n    \r\n    def position_1(self, position):\r\n        \r\n        self.position = position\r\n        \r\n        return position\r\n    \r\nemp_1 = Developer()\r\nprint(emp_1.calculate_salary(10000))\r\nprint(emp_1.position_1(""Web Developer""))\r\n\r\n\r\n\r\n#======================= Example: Employee Salary ========================\r\n\r\nclass employee:\r\n    \r\n    num_empoyee = 0\r\n    raise_amount = 1.04\r\n    \r\n    def __init__(self, first, last, sal):\r\n        \r\n        self.first = first\r\n        self.last = last\r\n        self.sal = sal\r\n        self.email = first + ""."" + last + ""@company.com""\r\n        \r\n    def fullname (self):\r\n        return ""{} {}"".format(self.first, self.last)\r\n    \r\n    def apply_raise(self):\r\n        self.sal = int(self.sal * raise_amount)\r\n        \r\nclass developer (employee):\r\n    \r\n    pass\r\n\r\nemp_1 = developer(""Sunil"",""Patel"",100000)\r\nprint(emp_1.email)\r\n\r\n\r\n#Now what if I want to change the raise_amount for a developer to 10%?\r\n\r\nclass employee:\r\n    \r\n    num_empoyee = 0\r\n    raise_amount = 1.04\r\n    \r\n    def __init__(self, first, last, sal):\r\n        \r\n        self.first = first\r\n        self.last = last\r\n        self.sal = sal\r\n        self.email = first + ""."" + last + ""@company.com""\r\n        \r\n    def fullname (self):\r\n        return ""{} {}"".format(self.first, self.last)\r\n    \r\n    def apply_raise(self):\r\n        self.sal = int(self.sal * raise_amount)\r\n        \r\nclass developer (employee):\r\n    \r\n    raise_amount = 1.10\r\n\r\nemp_1 = developer(""Sunil"",""Patel"",100000)\r\nprint(emp_1.raise_amount)\r\n\r\n\r\n#---------------------------- inheritance ------------------------------\r\n\r\nclass employee:\r\n    \r\n    num_empoyee = 0\r\n    raise_amount = 1.04\r\n    \r\n    def __init__(self, first, last, sal):\r\n        \r\n        self.first = first\r\n        self.last = last\r\n        self.sal = sal\r\n        self.email = first + ""."" + last + ""@company.com""\r\n        \r\n    def fullname (self):\r\n        return ""{} {}"".format(self.first, self.last)\r\n    \r\n    def apply_raise(self):\r\n        self.sal = int(self.sal * raise_amount)\r\n        \r\nclass developer (employee):\r\n    \r\n    raise_amount = 1.10\r\n    \r\n    def __init__(self, first, last, sal, prog_lang):\r\n        super().__init__(first,last,sal)\r\n        self.prog_lang = prog_lang\r\n        \r\nemp_1 = developer(\'sunil\',\'patel\',100000,\'Python\')\r\nprint(emp_1.prog_lang)\r\n\r\n\r\n#===============================Python Class: Polymorphism ==================\r\n\r\n#Polymorphism in Computer Science is the ability to present the same interface for differing underlying forms.\r\n\r\nclass Animal:\r\n    \r\n    def __init__(self,name):\r\n        self.name = name\r\n        def talk(self):\r\n            pass\r\n        \r\nclass Dog (Animal):\r\n    def talk(self):\r\n        print(""woof"")\r\n        \r\nclass Cat (Animal):\r\n    def talk(self):\r\n        print(\'Meow\')\r\n\r\nc = Cat(\'Ketty\')\r\nc.talk()\r\n\r\nd = Dog(Animal)\r\nd.talk()\r\n        \r\n\r\n\r\n'"
Module3_OOPs_Key_Concepts_in_Python/Customer.py,0,"b'class Customer:\r\n    title = """"\r\n    fname = """"\r\n    lname = """"\r\n    isblacklisted = 0;\r\n\r\n    def __init__(self):\r\n        self.title = """"\r\n\r\n    def __str__(self):\r\n        return ""Title:"" + self.title + "" First Name:"" + self.fname + "" Last Name:"" + self.lname + "" Blacklisted:"" + self.isblacklisted\r\n\r\n    def setIsblacklisted(self,isblacklisted):\r\n        self.isblacklisted = isblacklisted\r\n\r\n    def isblacklisted(self):\r\n        return self.isblacklisted\r\n\r\n    def setTitle(self,title):\r\n        self.title = title\r\n\r\n    def getTitle(self):\r\n        return self.title\r\n\r\n    def setFname(self,fname):\r\n        self.fname = fname\r\n\r\n    def getFname(self):\r\n        return self.fname\r\n\r\n    def setLname(self,lname):\r\n        self.lname = lname\r\n\r\n    def getLname(self):\r\n        return self.lname\r\n\r\n\r\n\r\n# customer1 = Customer()\r\n# customer1.setTitle(""Mr."")\r\n# customer1.setFname(""Barack"")\r\n# customer1.setLname(""Obama"")\r\n#\r\n# customer2 = Customer()\r\n# customer2.setTitle(""Mrs."")\r\n# customer2.setFname(""George"")\r\n# customer2.setLname(""Bush"")\r\n#\r\n# print(""First Customer Title %s"" , customer1.getTitle())\r\n# print(""Second Customer Title %s"" , customer2.getTitle())\r\n# print(""First Customer Title %s"" , customer1.getTitle())\r\n\r\n'"
Module3_OOPs_Key_Concepts_in_Python/OOPs.py,0,"b'# -*- coding: utf-8 -*-\r\n""""""\r\nCreated on Tue Mar 19 21:34:03 2019\r\n\r\n@author: HP\r\n""""""\r\n\r\n# ========================= OPPs (Object Oriented Programming)===============\r\n\r\n#Creating a Class\r\n\r\nclass number():\r\n    pass\r\n\r\n#Creating Instance of Class\r\nx=number()\r\nprint(x)\r\n\r\n##Method\r\n\r\nclass Master():\r\n    def Hello(self):\r\n        print(""Happy Learning"")\r\n\r\nob=Master()\r\nob.Hello()\r\n\r\n\r\n\r\n##Scope of variables\r\na=50\r\nclass number():\r\n    b=30\r\n    print(b)\r\n\r\nprint(a)\r\nprint(b)\r\nnumber()\r\n\r\n\r\n\r\na=30\r\ndef add(b):\r\n    c=30\r\n    print(""c="",c)\r\n    sum=b+c\r\n    print(""Addition is: "",sum)\r\n\r\nprint(a)\r\nadd(40)\r\nprint(c)\r\n\r\n\r\n##Built in class attributes\r\nclass Master:\r\n    empcount=0\r\n\r\nprint(""Master.__dict__:"",Master.__dict__)\r\n\r\nprint(""Master.__doc__:"",Master.__doc__)\r\n\r\nprint(""Master.__name__"",Master.__name__)\r\n\r\nprint(""Master.__module__:"",Master.__module__)\r\n\r\nprint(""Master.__bases__:"",Master.__bases__)\r\n\r\n\r\n##user defined attributes\r\n\r\na=50\r\n\r\nclass Foo(object):\r\n    def meth(self):\r\n       pass\r\n   \r\n###public provate protected\r\nclass Master():\r\n    def __init__(self):\r\n        self.__pri=""I am Private""\r\n        self._pro=""I am Protected""\r\n        self.pub=""I am Public""\r\n\r\nob=Master()\r\n\r\n#Accessing Public Attribute\r\nob.pub\r\n\r\n#Accessing Protected Attributes\r\nob._pro\r\n\r\n#Accessing Private Attributes\r\nob.__pri\r\n\r\n\r\n\r\n###Private method\r\nclass MyClass:\r\n    def myPublicMethod(self):\r\n        print(\'public method\')\r\n    def __myPrivateMethod(self):\r\n        print(\'this is private!!\')\r\n\r\nobj = MyClass()\r\nobj.myPublicMethod()\r\n\r\nobj.__myPrivateMethod()\r\n\r\n#obj.__myPrivateMethod()\r\nobj._MyClass__myPrivateMethod()\r\n\r\n\r\n### Class variables are instence variables\r\nclass Master:\r\n    domain=(""Data Science"")\r\n    def Setcourse(self,name):\r\n        self.name=name\r\n\r\nob1=Master()\r\nob2=Master()\r\n\r\nob1.Setcourse(""Python"")\r\nob2.Setcourse(""Machine Learning"")\r\n\r\nprint(ob2.domain)\r\nob1.domain = \'GOD\'\r\nprint(ob1.domain)\r\nprint(ob2.domain)\r\n\r\nprint(ob1.name)\r\nprint(ob2.name)\r\n\r\n##Constructor an destructor\r\nclass TestClass:\r\n    def __init__(self):\r\n        print(""constructor"")\r\n\r\n    def __del__(self):\r\n        print(""destructor"")\r\n\r\n\r\nif __name__ == ""__main__"":\r\n    obj = TestClass()\r\n    del obj\r\n    \r\n    \r\n    \r\n##Multiple constructor\r\n    \r\nclass Date:\r\n\tdef __init__(self, year, month, day): #year-month-day\r\n\t\tself.year = year\r\n\t\tself.month = month\r\n\t\tself.day = day\r\n\t\t# print(""init"")\r\n\r\n\t@classmethod\r\n\tdef dmy(cls, day, month, year): #day-month-year\r\n\t\t# print(""dmy"")\r\n\t\tcls.year = year\r\n\t\tcls.month = month\r\n\t\tcls.day = day\r\n\t\t#order of return should be same as init\r\n\t\treturn cls(cls.year, cls.month, cls.day)\r\n\r\n\t@classmethod\r\n\tdef mdy(cls, month, day, year): #month-day-year\r\n\t\t# print(""mdy"")\r\n\t\tcls.year = year\r\n\t\tcls.month = month\r\n\t\tcls.day = day\r\n\t\t#order of return should be same as init\r\n\t\treturn cls(cls.year, cls.month, cls.day)\r\n\r\na=Date(2016, 12, 11)\r\nprint(a.month) #2016\r\n\r\nb=Date.dmy(9, 10, 2015)\r\nprint(b.year) #2015\r\n\r\na=Date.mdy(7, 8, 2014)\r\nprint(a.year) #2014\r\n\r\n\r\n\r\n###sing inheritence\r\nclass base1:\r\n    def fun(self):\r\n        print(""In Class Base 1"")\r\n\r\nclass sub(base1):\r\n        pass\r\n\r\nob=sub()\r\nob.fun()\r\n\r\n\r\n#####multi inheritence\r\n\r\n\r\n#Multiple Inheritance\r\nclass First(object):\r\n    def __init__(self):\r\n        super(First, self).__init__()\r\n        print(""first"")\r\n\r\n\r\nclass Second(object):\r\n    def __init__(self):\r\n        super(Second, self).__init__()\r\n        print(""second"")\r\n\r\n\r\nclass Third(Second, First):\r\n    def __init__(self):\r\n        super(Third, self).__init__()\r\n        print(""third"")\r\n\r\n\r\nThird();\r\nSecond();\r\n\r\n\r\n\r\n#Multilevel Inheritance\r\nclass Animal:\r\n    def eat(self):\r\n      print(\'Eating...\')\r\nclass Dog(Animal):\r\n   def bark(self):\r\n      print(\'Barking...\')\r\nclass BabyDog(Dog):\r\n    def weep(self):\r\n        print(\'Weeping...\')\r\nd=BabyDog()\r\nd.eat()\r\nd.bark()\r\nd.weep()\r\n\r\n\r\n##Over writing method\r\nclass Parent: # define parent class\r\n  def myMethod(self):\r\n    print(""Calling parent method"")\r\nclass Child(Parent): # define child class\r\n  def myMethod(self):\r\n    print(""Calling child method"")\r\nc = Child()   # instance of child\r\nc.myMethod() # child calls overridden method\r\n\r\n\r\n#Another Example:\r\n\r\nclass Rectangle():\r\n  def __init__(self,length,breadth):\r\n    self.length = length\r\n    self.breadth = breadth\r\n  def getArea(self):\r\n    print(self.length*self.breadth,"" is area of rectangle"")\r\n\r\nclass Square(Rectangle):\r\n  def __init__(self,side):\r\n    self.side = side\r\n    Rectangle.__init__(self,side,side)\r\n  def getArea(self):\r\n    print(self.side*self.side,"" is area of square"")\r\n\r\ns = Square(4)\r\nr = Rectangle(2,4)\r\ns.getArea()\r\nr.getArea()\r\n\r\n\r\n\r\n###Poly\r\nclass Animal:\r\n    def __init(self,name):\r\n        self.name=name\r\n\r\n    def talk(self):\r\n        print(""Talk"")\r\n\r\nclass Cat(Animal):\r\n    def talk(self):\r\n        print(""Meow"")\r\n\r\nclass Dog(Animal):\r\n    def talk(self):\r\n        print(""Woof"")\r\n\r\nc=Cat()\r\nc.talk()\r\n\r\nd=Dog()\r\nd.talk()\r\n\r\n\r\n\r\n\r\nclass Bear(object):\r\n    def sound(self):\r\n        print (""Groarrr"")\r\n \r\nclass Dog(object):\r\n    def sound(self):\r\n        print (""Woof woof!"")\r\n \r\ndef makeSound(animalType):\r\n    animalType.sound()\r\n \r\n \r\nbearObj = Bear()\r\ndogObj = Dog()\r\n \r\nmakeSound(bearObj)\r\nmakeSound(dogObj)\r\n\r\n##Getter and Setter\r\nclass Master:\r\n    def __init__(self,courseName):\r\n        self.courseName=courseName\r\n\r\n    def setCourse_Name(self,courseName):\r\n        self.courseName=courseName\r\n\r\n    def getCourse_Name(self):\r\n        return(self.courseName)\r\n\r\nob=Master(""Machine Learning"")\r\n\r\nprint(ob.getCourse_Name())\r\n\r\nob.setCourse_Name(""Python"")\r\nprint(ob.getCourse_Name())\r\n'"
Module3_OOPs_Key_Concepts_in_Python/inheritance.py,0,"b'class Vehicle:\n    def general_usage(self):\n        print(""general use: transporation"")\n\nclass Car(Vehicle):\n    def __init__(self):\n        print(""I\'m car"")\n        self.wheels = 4\n        self.has_roof = True\n\n    def specific_usage(self):\n        self.general_usage()\n        print(""specific use: commute to work, vacation with family"")\n\nclass MotorCycle(Vehicle):\n    def __init__(self):\n        print(""I\'m motor cycle"")\n        self.wheels = 2\n        self.has_roof = False\n\n    def specific_usage(self):\n        self.general_usage()\n        print(""specific use: road trip, racing"")\n\nc = Car()\nm = MotorCycle()\n\nprint(issubclass(Car,MotorCycle))'"
Module3_OOPs_Key_Concepts_in_Python/variable_numbers_strings.py,0,"b'variables\n=========\n>>> first=""Tom""\n>>> middle=""Cruise""\n>>> last=""Mapother""\n>>> print(""Full Name:"",first,middle,last)\nFull Name: Tom Cruise Mapother\n\nnumbers\n=======\n(1) Find out an area of a triangle whose base is 15 meter and height is 22 meter. The mathematical equation for an area of a triangle is: Area = \xc2\xbd*Base*Height\n>>> base=15\n>>> height=22\n>>> area=1/2*(base*height)\n>>> area\n165.0\n\n(2) You bought 9 packets of potato chips from a store. Each packet costs 1.49 dollar and you gave shopkeeper 20 dollar. Find out using python, how many dollars is the shopkeeper going to give you back? \n>>> num_packets=9\n>>> cost_per_packet=1.49\n>>> total_cost=num_packets*cost_per_packet\n>>> money_paid=20\n>>> cash_back=money_paid-total_cost\n>>> cash_back\n6.59\n\n(3) The bathroom of your home is an exact square. You want to replace tiles in it. Length of this bathroom is 5.5 feet. How many square foot of tiles you need to buy? Equation for an area of a square is: Area = Length to the power of 2. Find it out using python.\n>>> length=5.5\n>>> area=length**2\n>>> area\n30.25\n\nstrings\n=======\n(1) Create a string variable to store this text ""Earth revolves around the sun"",\n    (a) Print substring \xe2\x80\x9crevolves\xe2\x80\x9d \n    (b) Print substring \xe2\x80\x9csun\xe2\x80\x9d using negative index\n>>> s=""Earth revolves around the sun""\n>>> s[6:14]\n\'revolves\'\n>>> s[-3:]\n\'sun\'\n(2) Create a string variable to store this text ""Earth revolves around the \xe2\x80\x9csun\xe2\x80\x9d"" and print it\n>>> s=\'Earth revolves around the \xe2\x80\x9csun\xe2\x80\x9d\'\n>>> s\n\'Earth revolves around the \xe2\x80\x9csun\xe2\x80\x9d\'\n(3) Create three string variables with values \xe2\x80\x9cI love eating\xe2\x80\x9c, \xe2\x80\x9cveggies\xe2\x80\x9d, \xe2\x80\x9cfruits\xe2\x80\x9d \n    (a) Print \xe2\x80\x9cI love eating veggies and fruits\xe2\x80\x9d (Hint: Use + operator)\n>>> s1=""I love eating""\n>>> s2=""veggies""\n>>> s3=""fruits""\n>>> s1+"" "" +s2+"" and ""+s3\n\'I love eating veggies and fruits\'\n    (b) Create fourth variable to store number of fruits you eat everyday. Say for example you eat 2 fruits everyday, in that case print \xe2\x80\x9cI love eating 2 fruits everyday\xe2\x80\x9d\n>>> num_fruits=2\n>>> s1+"" ""+str(num_fruits)+"" ""+s3+"" everyday""\n\'I love eating 2 fruits everyday\'\n'"
Module5_Numpy_Library/Ndim.py,11,"b""# import pandas as pd\r\n# import numpy as np\r\n#\r\n# df=pd.Series(np.arange(1,51))\r\n# print(df.ndim)\r\n#\r\n# import pandas as pd\r\n# import numpy as np\r\n#\r\n# df=pd.Series(np.arange(1,51))\r\n# print(df.axes)\r\n#\r\n# # import pandas as pd\r\n# # import numpy as np\r\n# #\r\n# # df=pd.Series(np.arange(1,51))\r\n# # print(df.values)\r\n# #\r\n# import pandas as pd\r\n# import numpy as np\r\n#\r\n# df=pd.Series(np.arange(1,51))\r\n# print(df.head(6))\r\n#\r\n#\r\n# import pandas as pd\r\n# import numpy as np\r\n#\r\n# df=pd.Series(np.arange(1,51))\r\n# print(df.tail(6))\r\n#\r\nimport pandas as pd\r\nimport numpy as np\r\n\r\nd=pd.DataFrame({'odd':np.arange(1, 100, 2),\r\n   'even':np.arange(0, 100, 2)})\r\nprint(d['odd'])\r\nprint(d['even'])\r\ndf=pd.DataFrame(d)\r\nprint(df.sum())\r\n\r\n#\r\n# import pandas as pd\r\n# import numpy as np\r\n#\r\n# d={'odd':np.arange(1,100,2),\r\n#    'even':np.arange(0,100,2)}\r\n# print(d['odd'])\r\n# print(d['even'])\r\n# df=pd.DataFrame(d)\r\n# print(df.sum())\r\n\r\n#\r\n# import pandas as pd\r\n# import numpy as np\r\n#\r\n# d={'odd':np.arange(1,100,2),\r\n#    'even':np.arange(0,100,2)}\r\n# print(d['odd'])\r\n# print(d['even'])\r\n# df=pd.DataFrame(d)\r\n# print(df.std())\r\n"""
Titanic Case Study/Titanic.py,0,"b'import os\r\nimport pandas as pd\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport math\r\n\r\n# Set Directory\r\nprint(os.getcwd())\r\n\r\n#Read dataset\r\n\r\noriginal_df = pd.read_csv(""Titanic.csv"")\r\n\r\nprint(""# of passengers in original data:"" + str(len(original_df.index)))\r\nprint(original_df.head())\r\n\r\n# Data Wrangling\r\n# Finding Null Values\r\nprint(original_df.isnull().sum())\r\n\r\n# Remove null values from age column\r\nage_wrangled_df = original_df[pd.notnull(original_df[\'Age\'])]\r\nprint(""# of passengers in age wrangled data: "" + str(len(age_wrangled_df.index))+ \'\\n\')\r\n\r\nembark_wrangled_df = age_wrangled_df[pd.notnull(age_wrangled_df[\'Embarked\'])]\r\nprint(""# of passengers in age & embark wrangled data:"" + str(len(embark_wrangled_df.index)))\r\n\r\n# Group Data by gender\r\n\r\ngender_data = embark_wrangled_df.groupby(\'Sex\', as_index = False)\r\ngender_mean_data = gender_data.mean()\r\n\r\nprint(\'Total Survival Rate: \' + str(embark_wrangled_df[\'Survived\'].mean()))\r\n\r\nprint(\'\\n mean data by Gender\')\r\nprint(gender_mean_data[[\'Sex\',\'Survived\',\'Age\',\'Pclass\',\'SibSp\',\'Parch\',\'Fare\']])\r\n\r\n# Look inside the data survival rates genderwise\r\ntotal_df = gender_data[\'PassengerId\'].count()\r\nprint(total_df)\r\n\r\ntotal_df.columns = [\'Sex\',\'Total\']\r\nprint(total_df)\r\n\r\ngender_list = total_df[\'Sex\'] # Save \'Sex"" column in list for input in future plot\r\ndel total_df[\'Sex\']\r\nprint(total_df)\r\nprint(gender_data)\r\n\r\n\r\n# Find number of male and female survived\r\ngender_survived_df = gender_data[\'Survived\'].sum()\r\nprint(gender_survived_df)\r\ndel gender_survived_df[\'Sex\']\r\nprint(gender_survived_df)\r\n\r\n#Combine Series using vectorized operations\r\ncombined_df = total_df.add(gender_survived_df,fill_value = 0)\r\nprint(combined_df)\r\n\r\n#Plot bar chart\r\ncombined_df.plot.bar(color = [\'limegreen\',\'dodgerblue\'])\r\nplt.title(\'Effect of Gender on Survival\')\r\nplt.xlabel(\'Gender\')\r\nplt.ylabel(\'# of People\')\r\nplt.xticks(range(len(gender_list)),gender_list)\r\n\r\nsurvival_gender_list = [combined_df.loc[0][\'Survived\'],combined_df.loc[1][\'Survived\']]\r\ntotal_gender_list = [combined_df.loc[0][\'Total\'],combined_df.loc[1][\'Total\']]\r\n\r\n#define function to create value label plots\r\ndef create_value_labels(list_data, decimals, x_adjust,y_adjust):\r\n    for x,y in enumerate(list_data):\r\n        plt.text(x + x_adjust,  y + y_adjust, round(list_data[x], decimals), color = \'w\', fontweight = \'bold\')\r\n\r\ncreate_value_labels(survival_gender_list, 1, -0.2, -50)\r\ncreate_value_labels(total_gender_list, 1, 0.05, -50)\r\nplt.show()\r\n\r\nsurvivor_data = embark_wrangled_df.groupby(\'Survived\', as_index=False)\r\nsurvivor_mean_data = survivor_data.mean()\r\nprint(survivor_mean_data)\r\n\r\n#Split data in to children and adults\r\nchildren_data = embark_wrangled_df[embark_wrangled_df[\'Age\']<=18] #children are passengers with ages<=18\r\n\r\nadult_data = embark_wrangled_df[embark_wrangled_df[\'Age\']>18]\r\n\r\n## Count number of total and survival children and adults\r\nchildren_count = children_data[\'PassengerId\'].count()\r\n\r\nadult_count = adult_data[\'PassengerId\'].count()\r\n\r\nsurvive_children_count = children_data[\'Survived\'].sum()\r\nsurvive_adult_count = adult_data[\'Survived\'].sum()\r\n\r\n##Put into list\r\nchildren_list = [survive_children_count,children_count]\r\nadult_list = [survive_adult_count,adult_count]\r\ntotal_list = [children_count,adult_count]\r\n\r\nprint(children_list)\r\nprint(adult_list)\r\nprint(total_list)\r\n\r\nsurvived_list = [survive_children_count, survive_adult_count]\r\n\r\n## Create Pandas DataFrame for counts above\r\nCvsA_df = pd.DataFrame([children_list, adult_list], columns=[""Survived"",""Total""], index=[\'Children\',\'Adult\'])\r\nprint(CvsA_df)\r\n\r\n## Create Plot\r\n\r\nCvsA_df.plot.bar(color = [\'limegreen\', \'dodgerblue\'])\r\nplt.title(\'Number of survivals between children and adults\')\r\nplt.ylabel(\'# of people\')\r\nplt.xticks(range(len(CvsA_df.index)),CvsA_df.index)\r\n## Add value labels\r\ncreate_value_labels(survived_list, 1, -0.2, -50)\r\ncreate_value_labels(total_list, 1, 0.05, -50)\r\nplt.show()\r\n\r\n## Create list with survival rates for children and adults\r\n\r\nsurvival_rats_CvaA = [children_data.mean()[\'Survived\'],adult_data.mean()[\'Survived\']]\r\n#\r\nplt.bar(range(len(survival_rats_CvaA)),survival_rats_CvaA,align=""center"", color = [\'dodgerblue\',\'limegreen\'])\r\nplt.title(\'Survival rates between children and adults\')\r\nplt.ylabel(""Suvival Rates"")\r\nplt.xticks(range(len(survival_rats_CvaA)),[\'Children\',\'Adult\'])\r\n\r\n## Add value labels\r\ncreate_value_labels(survival_rats_CvaA, 4, -0.1, -0.1)\r\nplt.show()\r\n\r\n## plot age distribution of all passangers\r\nembark_wrangled_df[\'Age\'].plot.hist(bins=range(100),color=\'dodgerblue\')\r\nplt.title(\'Age Distribution of all Passangers\')\r\nplt.xlabel(\'Age\')\r\nplt.ylabel(\'# of passangers\')\r\nplt.show()\r\n\r\n## plot survior age distribution\r\nsurvivor_data[\'Age\'].plot.hist(bins=range(100),color = \'limegreen\',label = ""Survived"")\r\nplt.xlabel(\'Age\')\r\nplt.title(\'Survivor Age Distribution\')\r\nplt.ylabel(\'# of Passangers\')\r\nplt.show()\r\n\r\n# Survived Stats\r\nsurvived_stats = survivor_data[\'Age\'].describe()\r\nprint(survived_stats)\r\n\r\n# group data by age\r\nage_data = embark_wrangled_df.groupby(\'Age\', as_index=False)\r\nage_mean_data = age_data.mean()\r\n\r\n## Creates list that stores all age of passengers\r\nage_list = age_mean_data[\'Age\'].tolist()\r\n\r\n## Determine number of passengers in age group\r\nnum_passengers_in_age = age_data.count()[""PassengerId""]\r\n\r\n## plot survival rates by age on scatter plot\r\nscatter_plot1 = plt.scatter(age_mean_data[\'Age\'],age_mean_data[\'Survived\'], s=30, \\\r\n                            alpha= 0.9, c = num_passengers_in_age, cmap=\'RdYlGn\',edgecolors=\'none\',vmin= 0, vmax= 30)\r\nplt.title(\'Effect of Age on Survival Rates\')\r\nplt.colorbar(scatter_plot1, label = ""# of passanger"")\r\nplt.ylabel(""Survival Rates"")\r\nplt.xlabel(\'Age\')\r\nplt.show()\r\n\r\n#\r\ncount_age = age_data[\'PassengerId\'].count()\r\n## Get DataFrame of ages that have greater than 5 passengers\r\n\r\ncount_age_gt5 = count_age[count_age[\'PassengerId\']>5]\r\n\r\n## create list that stores all ages of passangers that have more than 5  passangers\r\nage_gt5_list = count_age_gt5[\'Age\'].values.tolist()\r\nprint(age_gt5_list)\r\n\r\n## Keep data only with ages that have greater than 5 passengers\r\nage_gt5_df = embark_wrangled_df[embark_wrangled_df[\'Age\'].isin(age_gt5_list)]\r\nprint(age_gt5_df[\'PassengerId\'].count())\r\n\r\n##\r\nage_gt5_df[\'Age\'].plot.hist(bins=range(100),color = \'mediumorchid\')\r\nplt.title(\'Age Distribution of All Passengers [Cleaned Data]\')\r\nplt.xlabel(\'Age\')\r\nplt.ylabel(\'# of Passengers\')\r\nplt.show()\r\n\r\n## group data by age\r\nage_gt5_data = age_gt5_df.groupby(\'Age\',as_index=False)\r\nage_gt5_mean_data = age_gt5_data.mean()\r\n\r\n## determine number of passengers in age group and put into new list\r\nnum_passengers_in_age_gt5 = age_gt5_data.count()[\'PassengerId\']\r\n\r\n## Re-plot survival rates by age on scatter plot\r\nscatter_plot2 = plt.scatter(age_gt5_list,age_gt5_mean_data[\'Survived\'], s=30, \\\r\n                            alpha=0.9, c= num_passengers_in_age_gt5, cmap=\'RdYlGn\', edgecolors=\'none\', vmin=0, vmax=30)\r\nplt.title(\'Effect of Age on Survival Rates [Cleaned Data]\')\r\nplt.colorbar(scatter_plot2, label=""# of passanger"")\r\nplt.ylabel(""Survival Rates"")\r\nplt.xlabel(\'Age\')\r\nplt.show()\r\n\r\n'"
