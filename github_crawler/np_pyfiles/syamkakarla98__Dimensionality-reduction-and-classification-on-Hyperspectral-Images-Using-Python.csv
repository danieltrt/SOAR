file_path,api_count,code
Indian_pines_knnc.py,0,"b'import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n\nfrom sklearn import decomposition\nfrom sklearn import datasets\n\n# load dataset into Pandas DataFrame\ndf = pd.read_csv(""D:\\Python_programs\\ML\\Complete_Data_.csv"")\n\nfrom sklearn.preprocessing import StandardScaler\nn=[]\nind=[]\nfor i in range(200):\n    n.append(i+1)\nfor i in range(200):\n    ind.append(\'px\'+str(n[i]))\n\nfeatures = ind\nX = df.loc[:, features].values\n# Separating out the target\nY = df.loc[:,[\'target\']].values\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(\n X, Y, test_size = 0.3, random_state = 100)\ny_train=y_train.ravel()\ny_test=y_test.ravel()\n#classifier.fit(X_train, y_train.squeeze())\n\nfrom sklearn.neighbors import KNeighborsClassifier  # FOR K=13 ,IT HAS ACCURACY AROUND 72.7488902980\nfrom sklearn import metrics\nimport time\n#model = KNeighborsClassifier()\nmodel=KNeighborsClassifier(n_neighbors =13, weights=\'uniform\', algorithm=\'auto\')\nmodel.fit(X_train, y_train)\nstart = time.time()\nYhat = model.predict(X_test)\nend = time.time()\nprint(\'Time Taken For Classification is :\',(end - start))\nprint(""Accuracy :"",metrics.accuracy_score(Yhat, y_test)*100)\nprint(\'\\n\',\'*\'*11,\'Accuracy of INDIAN-PINES Dataset Before PCA\',\'*\'*11)\nprint(\'*\'*11,\' Classifier : K-NEAREST NEIGHBOUR \',\'*\'*11)\nfor K in range(25):\n K_value = K+1\n neigh = KNeighborsClassifier(n_neighbors = K_value, weights=\'uniform\', algorithm=\'auto\')\n neigh.fit(X_train, y_train) \n y_pred = neigh.predict(X_test)\n print (""Accuracy is :%1.10f""%(metrics.accuracy_score(y_test,y_pred)*100),""% "",""for K-Value: %4d""%(K_value))\n\n'"
Indian_pines_knnc_after_pca.py,0,"b'import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n\nfrom sklearn import decomposition\nfrom sklearn import datasets\n\n# load dataset into Pandas DataFrame\ndf = pd.read_csv(""D:\\Python_programs\\ML\\indian_pines_after_pca.csv"")\n\nfrom sklearn.preprocessing import StandardScaler\nn=[]\nind=[]\nfor i in range(2):\n    ind.append(\'PC-\'+str(i+1))\n\nfeatures = ind\nX = df.loc[:, features].values\n# Separating out the target\nY = df.loc[:,[\'target\']].values\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(\n X, Y, test_size = 0.3, random_state = 100)\ny_train=y_train.ravel()\ny_test=y_test.ravel()\n#classifier.fit(X_train, y_train.squeeze())\n\nfrom sklearn.neighbors import KNeighborsClassifier  # FOR K=13 ,IT HAS ACCURACY AROUND 72.7488902980\nfrom sklearn import metrics\nimport time\n#model = KNeighborsClassifier()\nmodel=KNeighborsClassifier(n_neighbors =13, weights=\'uniform\', algorithm=\'auto\')\nmodel.fit(X_train, y_train)\nstart = time.time()\nYhat = model.predict(X_test)\nend = time.time()\nprint(\'Time Taken For Classification is :\',(end - start))\nprint(""Accuracy :"",metrics.accuracy_score(Yhat, y_test)*100)\nprint(\'\\n\',\'*\'*11,\'Accuracy of INDIAN-PINES Dataset After PCA\',\'*\'*11)\nprint(\'*\'*11,\' Classifier : K-NEAREST NEIGHBOUR \',\'*\'*11)\nfor K in range(25):\n K_value = K+1\n neigh = KNeighborsClassifier(n_neighbors = K_value, weights=\'uniform\', algorithm=\'auto\')\n neigh.fit(X_train, y_train)\n #start = time.time()\n y_pred = neigh.predict(X_test)\n #end = time.time()\n #print(\'Time Taken For Classification is :\',(end - start))\n print (""Accuracy is :%1.10f""%(metrics.accuracy_score(y_test,y_pred)*100),""% "",""for K-Value: %4d""%(K_value))\n \n'"
indian_pines_pca.py,0,"b'import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n\nfrom sklearn import decomposition\nfrom sklearn import datasets\n\n# load dataset into Pandas DataFrame\ndf = pd.read_csv(""D:\\Python_programs\\ML\\Complete_Data_.csv"")\n\nfrom sklearn.preprocessing import StandardScaler\nn=[]\nind=[]\nfor i in range(200):\n    n.append(i+1)\nfor i in range(200):\n    ind.append(\'px\'+str(n[i]))\n\nfeatures = ind\nx = df.loc[:, features].values\n# Separating out the target\ny = df.loc[:,[\'target\']].values\n# Standardizing the features\nfrom sklearn.preprocessing import MinMaxScaler\nscaler_model = MinMaxScaler()\nscaler_model.fit(x.astype(float))\nx=scaler_model.transform(x)\n\n\nfrom sklearn.decomposition import PCA\n\n\n## Finding the principle components\npca = PCA(n_components=10)\nprincipalComponents = pca.fit_transform(x)\nev=pca.explained_variance_ratio_\n\n# *Since the initial 2 principal components have high variance.\n#   so, we select pc-1 and pc-2.\n#---------------------------------------------------\npca = PCA(n_components=2)\nprincipalComponents = pca.fit_transform(x)\nprincipalDf = pd.DataFrame(data = principalComponents\n             , columns = [\'PC-1\',\'PC-2\'])\n# Adding lables\nfinalDf = pd.concat([principalDf, df[[\'target\']]], axis = 1)\n\n#--------- Bar Graph for Explained Variance Ratio ------------\nplt.bar([1,2,3,4,5,6,7,8,9,10],list(ev*100),label=\'Principal Components\',color=\'b\')\nplt.legend()\nplt.xlabel(\'Principal Components\')\npc=[]\nfor i in range(10):\n    pc.append(\'PC\'+str(i+1))\n#plt.xticks([1,2,3,4,5,6,7,8,9,10],pc, fontsize=8, rotation=30)\nplt.xticks([1,2,3,4,5,6,7,8,9,10],pc, fontsize=8, rotation=30)\nplt.ylabel(\'Variance Ratio\')\nplt.title(\'Variance Ratio of INDIAN PINES Dataset\')\nplt.show()\n\n\n#---------------------------------------------------\n# Plotting pc1 & pc2\nfig = plt.figure(figsize = (8,8))\nax = fig.add_subplot(1,1,1) \nax.set_xlabel(\'PC-1\', fontsize = 15)\nax.set_ylabel(\'PC-2\', fontsize = 15)\nax.set_title(\'PCA on INDIAN PINES Dataset\', fontsize = 20)\ntargets = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\ncolors = [\'r\',\'g\',\'b\',\'y\',\'m\',\'c\',\'k\',\'r\',\'g\',\'b\',\'y\',\'m\',\'c\',\'k\',\'b\',\'r\']\nfor target, color in zip(targets,colors):\n    indicesToKeep = finalDf[\'target\'] == target\n    ax.scatter(finalDf.loc[indicesToKeep, \'PC-1\']\n               , finalDf.loc[indicesToKeep, \'PC-2\']\n               , c = color\n               , s = 9)\nax.legend(targets)\nax.grid()\nplt.show() # FOR SHOWING THE PLOT\n\n#-------------------SENDING REDUCED DATA INTO CSV FILE------------\n\nfinalDf.to_csv(\'indian_pines_after_pca.dat\')\n\n'"
