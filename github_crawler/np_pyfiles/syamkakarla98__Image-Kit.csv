file_path,api_count,code
setup.py,0,"b'from setuptools import setup\n\nwith open(""README.md"", ""r"") as fh:\n    long_description = fh.read()\n\nsetup(\n    name=\'Image-Kit\',\n    url=\'https://github.com/syamkakarla98/Image-Kit\',\n    author=\'Syam Kakarla\',\n    author_email=\'Syamkakarla98@gmail.com\',\n    packages=[\'ImageKit\'],\n    install_requires=[\'numpy\', \'matplotlib\', \'Pillow\', \'scipy\'],\n    version=\'0.0.1\',\n    license=\'MIT\',\n    description=\'A module for basic image processing.\',\n    long_description = long_description,\n    long_description_content_type = ""text/markdown"",\n    python_requires="">=3.5.3"",\n    classifiers=[""Programming Language :: Python :: 3"",\n        ""License :: OSI Approved :: MIT License"",\n        ""Operating System :: OS Independent"",] ,\n)\n'"
ImageKit/ImgKit.py,1,"b'from PIL import Image\nimport scipy.ndimage\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef imread(filename):\n    """"""\n        Summary: Reads a iamge file and return an object.\n            \n        Args: filename.\n            \n        Returns: An object of an image.\n    """"""\n    try:\n        global fn\n        fn = filename\n        img = Image.open(filename)\n        return img\n    except FileNotFoundError:\n        print(f""File: {filename} Not Found."")\n        \ndef imshow(img):\n    """"""\n            Summary: displays a iamge file and return an object.\n            \n            Args: filename.\n            \n    """"""\n    plt.imshow(img)\n    plt.show()\n        \ndef resize(img, s):\n    resized_img = img.resize(s)\n    return resized_img\n    \n    \ndef get_properties(img):\n    d = dict()\n    global fn\n    d[\'filename\'] =fn\n    d[\'format\'] = img.format\n    d[\'mode\'] = str(img.mode)\n    d[\'dimensions\'] = tuple(scipy.ndimage.imread(fn).shape)\n\n    return d\n\ndef get_pixels(img):\n    return list(img.getdata())\n\ndef get_band(img, band):\n    prop = get_properties(img)\n    if int(prop[\'dimensions\'][2]) > 3:\n        img = img.convert(\'RGB\')\n    source = img.split()\n    R, G, B = 0, 1, 2\n    # Assign color intensity bands, zero for red and blue.\n    if band.lower() == \'r\'  :\n        b = source[R].point(lambda i: i * 0.0)\n    if band.lower() == \'g\'  :\n        b = source[G]\n    if band.lower() == \'b\'  :\n        b = source[B].point(lambda i: i * 0.0)\n    return np.resize(b, list(img.size)[::-1])\n\ndef plot_signature(img):\n    prop = get_properties(img)\n    if int(prop[\'dimensions\'][2]) > 3:\n        img = img.convert(\'RGB\')\n    r, g, b = img.split()\n    bins = list(range(256))\n    plt.plot(bins, r.histogram(), \'r\', label=""Red"")\n    plt.plot(bins, g.histogram(), \'g\', label=""Green"")\n    plt.plot(bins, b.histogram(), \'b\', label=""Blue"")\n    plt.xlabel(""Pixel Value"")\n    plt.ylabel(""Frequency"")\n    plt.title(""Signature of Image"")\n    plt.grid(True)\n    plt.legend()\n    plt.show()\n\ndef imsave(img, filename):\n    img.save(filename)\n    \ndef imrotate(img, degrees):\n    return img.rotate(degrees)\n\ndef im2bw(img):\n    return img.convert(\'L\')\n    \n'"
ImageKit/__init__.py,0,"b'__version__=""0.0.1""\n\n#from ImageKit.ImgKit import *\nfrom .ImgKit import *\n'"
