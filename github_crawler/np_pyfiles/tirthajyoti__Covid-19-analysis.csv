file_path,api_count,code
Notebook/NYTCovid.py,2,"b'\r\n# NYTCovid class definition\r\n# Dr. Tirthajyoti Sarkar, Fremont, CA\r\n# March-April 2020\r\n\r\nimport numpy as np\r\nimport pandas as pd\r\nimport io\r\nimport requests\r\nimport matplotlib.pyplot as plt\r\nimport seaborn as sns\r\nimport time\r\nimport datetime\r\n\r\nclass NYTCovid:\r\n    def __init__(self):\r\n        from datetime import date\r\n        self.statedf = None\r\n        self.countydf = None\r\n        self._stateupdated = False\r\n        self._countyupdated = False\r\n        self._processed = False\r\n        self._today = date.today()\r\n    \r\n    def today(self):\r\n        print(""Today is:"",self._today)\r\n    \r\n    def updateState(self,\r\n                     url=""https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv""):\r\n        url = url\r\n        s=requests.get(url).content\r\n        self.statedf = pd.read_csv(io.StringIO(s.decode(\'utf-8\')))\r\n        self.statedf[\'date\'] =  pd.to_datetime(self.statedf[\'date\'], format=\'%Y-%m-%d\')\r\n        self._stateupdated = True\r\n    \r\n    def updateCounty(self,\r\n                     url=""https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv""):\r\n        url = url\r\n        s=requests.get(url).content\r\n        self.countydf = pd.read_csv(io.StringIO(s.decode(\'utf-8\')))\r\n        self.countydf[\'date\'] =  pd.to_datetime(self.countydf[\'date\'], format=\'%Y-%m-%d\')\r\n        self._countyupdated = True\r\n    \r\n    def dateUpdate(self):\r\n        if self._stateupdated:\r\n            print(""Date of the latest data:"",self.statedf.iloc[-1][\'date\'].date())\r\n        else:\r\n            print(""Data has not been updated even once!"")\r\n    \r\n    def peek(self):\r\n        if self._stateupdated:\r\n            print(""First 5 rows of the state data"")\r\n            print(""=""*50)\r\n            print(self.statedf.head())\r\n        if self._countyupdated:\r\n            print()\r\n            print(""First 5 rows of the county data"")\r\n            print(""=""*50)\r\n            print(self.countydf.head())\r\n    \r\n    def process(self):\r\n        pd.set_option(\'mode.chained_assignment\', None)\r\n        self.statedict= {}\r\n        self.countydict= {}\r\n        print(""Processing..."")\r\n        t1 = time.time()\r\n        if self._stateupdated:\r\n            self.statelist = list(self.statedf[\'state\'].unique())\r\n            for s in self.statelist:\r\n                state_df=self.statedf[self.statedf[\'state\']==s]\r\n                state_df[\'newcases\'] = state_df[\'cases\'].diff()\r\n                state_df[\'newdeaths\'] = state_df[\'deaths\'].diff()\r\n                self.statedict[s]=state_df\r\n        if self._countyupdated:\r\n            self.countylist = list(self.countydf[\'county\'].unique())\r\n            for c in self.countylist:\r\n                county_df=self.countydf[self.countydf[\'county\']==c]\r\n                county_df[\'newcases\'] = county_df[\'cases\'].diff()\r\n                county_df[\'newdeaths\'] = county_df[\'deaths\'].diff()\r\n                self.countydict[c]=county_df\r\n        self._processed = True\r\n        t2 = time.time()\r\n        delt = round(t2-t1,3)\r\n        print(""Finished. Took {} seconds"".format(delt))\r\n    \r\n    def plot_state(self,\r\n                   state=\'New York\',\r\n                   last_30_days=False):\r\n        """"""\r\n        Plots statewise data\r\n        """"""\r\n        if self._processed==False:\r\n            print(""Data not processed yet. Cannot plot statewise."")\r\n            return None\r\n        \r\n        s = str(state)\r\n        assert s in self.statelist,""Input does not appear in the list of states. Possibly wrong name/spelling""\r\n        df = self.statedict[s]\r\n        \r\n        dates = df[\'date\']\r\n        cases = df[\'cases\']\r\n        deaths = df[\'deaths\']\r\n        newcases = df[\'newcases\']\r\n        newdeaths = df[\'newdeaths\']\r\n        \r\n        if last_30_days:\r\n            dates = df[\'date\'][-31:-1]\r\n            cases = df[\'cases\'][-31:-1]\r\n            deaths = df[\'deaths\'][-31:-1]\r\n            newcases = df[\'newcases\'][-31:-1]\r\n            newdeaths = df[\'newdeaths\'][-31:-1]\r\n        \r\n        plt.figure(figsize=(14,4))\r\n        if last_30_days:\r\n            plt.title(""Cumulative cases in {}, for last 30 days"".format(s),fontsize=18)\r\n        else:\r\n            plt.title(""Cumulative cases in {}"".format(s),fontsize=18)\r\n        plt.bar(x=dates,height=cases,color=\'blue\',edgecolor=\'k\')\r\n        plt.xticks(rotation=45,fontsize=14)\r\n        plt.show()\r\n        \r\n        print()\r\n        \r\n        plt.figure(figsize=(14,4))\r\n        if last_30_days:\r\n            plt.title(""Cumulative deaths in {}, for last 30 days"".format(s),fontsize=18)\r\n        else:\r\n            plt.title(""Cumulative deaths in {}"".format(s),fontsize=18)\r\n        plt.bar(x=dates,height=deaths,color=\'red\',edgecolor=\'k\')\r\n        plt.xticks(rotation=45,fontsize=14)\r\n        plt.show()\r\n        \r\n        print()\r\n        \r\n        plt.figure(figsize=(14,4))\r\n        if last_30_days:\r\n            plt.title(""New cases in {}, for last 30 days"".format(s),fontsize=18)\r\n        else:\r\n            plt.title(""New cases in {}"".format(s),fontsize=18)\r\n        plt.bar(x=dates,height=newcases,color=\'yellow\',edgecolor=\'k\')\r\n        plt.xticks(rotation=45,fontsize=14)\r\n        plt.show()\r\n        \r\n        print()\r\n        \r\n        plt.figure(figsize=(14,4))\r\n        if last_30_days:\r\n            plt.title(""New deaths in {}, for last 30 days"".format(s),fontsize=18)\r\n        else:\r\n            plt.title(""New deaths in {}"".format(s),fontsize=18)\r\n        plt.bar(x=dates,height=newdeaths,color=\'orange\',edgecolor=\'k\')\r\n        plt.xticks(rotation=45,fontsize=14)\r\n        plt.show()\r\n        \r\n    def plot_multi_state(self, \r\n                         states = [\'California\',\'Michigan\',\'New York\'],\r\n                         last_30_days=False):\r\n        """"""\r\n        Plots multiple states data in a single plot for comparison\r\n        """"""\r\n        states = states\r\n        plt.figure(figsize=(14,4))\r\n        if last_30_days:\r\n            plt.title(""Cumulative cases, for last 30 days"",fontsize=18)\r\n            colors=[]\r\n            for s in states:\r\n                color = tuple(np.round(np.random.random(3),2))\r\n                colors.append(color)\r\n                plt.plot(self.statedict[s][\'date\'][-31:-1],\r\n                        self.statedict[s][\'cases\'][-31:-1],\r\n                        color=color,\r\n                        linewidth=2)\r\n                plt.xticks(rotation=45,fontsize=14)\r\n            plt.legend(states,fontsize=14)\r\n            plt.show()\r\n        else:\r\n            plt.title(""Cumulative cases"",fontsize=18)\r\n            colors=[]\r\n            for s in states:\r\n                color = tuple(np.round(np.random.random(3),2))\r\n                colors.append(color)\r\n                plt.plot(self.statedict[s][\'date\'],\r\n                        self.statedict[s][\'cases\'],\r\n                        color=color,\r\n                        linewidth=2)\r\n                plt.xticks(rotation=45,fontsize=14)\r\n            plt.legend(states,fontsize=14)\r\n            plt.show()\r\n    \r\n    def rankState(self,\r\n                  N=5,\r\n                  daterank=None):\r\n        """"""\r\n        Ranks the states in a bar chart\r\n        Arguments:\r\n            N: Top N states to be ranked\r\n            date: Date at which the ranking is done. \r\n                  Must be a string in the form \'2020-3-27\'\r\n        """"""\r\n        from datetime import date\r\n\r\n        cases = {}\r\n        deaths = {}\r\n        newcases = {}\r\n        newdeaths = {}\r\n\r\n        if daterank==None:\r\n            d = self.statedf.iloc[-1][\'date\'].date()\r\n        else:\r\n            d = datetime.datetime.strptime(daterank,\'%Y-%m-%d\').date()\r\n\r\n        for s in self.statedict:\r\n            df=self.statedict[s]\r\n            for i in range(len(df)):\r\n                if df[\'date\'].iloc[i].date()==d:\r\n                    cases[s]=df.iloc[i][\'cases\']\r\n                    deaths[s]=df.iloc[i][\'deaths\']\r\n                    newcases[s]=df.iloc[i][\'newcases\']\r\n                    newdeaths[s]=df.iloc[i][\'newdeaths\']\r\n\r\n        sorted_cases = sorted(((value, key) for (key,value) in cases.items()),reverse=True)\r\n        sorted_cases = sorted_cases[:N]\r\n        sorted_deaths = sorted(((value, key) for (key,value) in deaths.items()),reverse=True)\r\n        sorted_deaths = sorted_deaths[:N]\r\n        sorted_newcases = sorted(((value, key) for (key,value) in newcases.items()),reverse=True)\r\n        sorted_newcases = sorted_newcases[:N]\r\n        sorted_newdeaths = sorted(((value, key) for (key,value) in newdeaths.items()),reverse=True)\r\n        sorted_newdeaths = sorted_newdeaths[:N]\r\n\r\n        _,axs = plt.subplots(2,2,figsize=(15,9))\r\n        axs = axs.ravel()\r\n        axs[0].bar(x=[val[1] for val in sorted_cases],\r\n                height=[val[0] for val in sorted_cases],\r\n                color=\'blue\',edgecolor=\'k\')\r\n        axs[0].set_title(""Cumulative cases on {}"".format(str(d)),\r\n                        fontsize=15)\r\n        axs[1].bar(x=[val[1] for val in sorted_deaths],\r\n                height=[val[0] for val in sorted_deaths],\r\n                color=\'red\',edgecolor=\'k\')\r\n        axs[1].set_title(""Cumulative deaths on {}"".format(str(d)),\r\n                        fontsize=15)\r\n        axs[2].bar(x=[val[1] for val in sorted_newcases],\r\n                height=[val[0] for val in sorted_newcases],\r\n                color=\'yellow\',edgecolor=\'k\')\r\n        axs[2].set_title(""New cases on {}"".format(str(d)),\r\n                        fontsize=15)\r\n        axs[3].bar(x=[val[1] for val in sorted_newdeaths],\r\n                height=[val[0] for val in sorted_newdeaths],\r\n                color=\'orange\',edgecolor=\'k\')\r\n        axs[3].set_title(""New deaths on {}"".format(str(d)),\r\n                        fontsize=15)\r\n        plt.show()'"
Notebook/SEIRclass.py,2,"b'# SEIR model class definition\r\n# Dr. Tirthajyoti Sarkar, Fremont, CA\r\n# April 2020\r\n\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\nclass SEIR:\r\n    def __init__(self,\r\n                 init_vals=[1 - 1/1000, 1/1000, 0, 0], \r\n                 params_=[0.2,1.75,0.5,0.9]):\r\n        """"""\r\n        Initializes and sets the initial lists and parameters\r\n        Arguments:\r\n                init_vals: Fractions of population in the S, E, I, and R categories\r\n                params_: Dynamical parameters - alpha, beta, gamma, and rho.\r\n                Here the last parameter \'rho\' models social distancing factor.\r\n        """"""\r\n        # Initial values\r\n        self.s0 = init_vals[0]\r\n        self.e0 = init_vals[1]\r\n        self.i0 = init_vals[2]\r\n        self.r0 = init_vals[3]\r\n        # Lists\r\n        self.s, self.e, self.i, self.r = [self.s0], [self.e0], [self.i0], [self.r0]\r\n        # Dynamical parameters\r\n        self.alpha = params_[0]\r\n        self.beta = params_[1]\r\n        self.gamma = params_[2]\r\n        self.rho = params_[3]\r\n        # All parameters together in a list\r\n        self.params_ = [self.alpha,self.beta,self.gamma,self.rho]\r\n        # All final values together in a list\r\n        self.vals_ = [self.s[-1], self.e[-1], self.i[-1], self.r[-1]]\r\n    \r\n    def reinitialize(self,init_vals,verbose=False):\r\n        """"""\r\n        Re-initializes with new values\r\n        """"""\r\n        assert len(init_vals)==4,""Four initial values are expected""\r\n        assert type(init_vals)==list, ""Initial values are expected in a list""\r\n        # Initial values\r\n        self.s0 = init_vals[0]\r\n        self.e0 = init_vals[1]\r\n        self.i0 = init_vals[2]\r\n        self.r0 = init_vals[3]\r\n        \r\n        if verbose:\r\n            print(""Initialized with the following values\\n""+""-""*50)\r\n            print(""S0: "",self.s0)\r\n            print(""E0: "",self.e0)\r\n            print(""I0: "",self.i0)\r\n            print(""R0: "",self.r0)\r\n    \r\n    def set_params(self,params_,verbose=False):\r\n        """"""\r\n        Sets the dynamical parameters value\r\n        """"""\r\n        assert len(params_)==4,""Four parameter values are expected""\r\n        assert type(params_)==list, ""Parameter values are expected in a list""\r\n        # Dynamical parameters\r\n        self.alpha = params_[0]\r\n        self.beta = params_[1]\r\n        self.gamma = params_[2]\r\n        self.rho = params_[3]\r\n        self.params_ = [self.alpha,self.beta,self.gamma,self.rho]\r\n        \r\n        if verbose:\r\n            print(""Set the following parameter values\\n""+""-""*50)\r\n            print(""alpha: "",self.alpha)\r\n            print(""beta: "",self.beta)\r\n            print(""gamma: "",self.gamma)\r\n            print(""rho: "",self.rho)\r\n        \r\n    def reset(self):\r\n        """"""\r\n        Resets the internal lists to zero-state\r\n        """"""\r\n        self.s, self.e, self.i, self.r = [self.s0], [self.e0], [self.i0], [self.r0]\r\n    \r\n    def run(self,t_max=100,dt=0.1,reset=True):\r\n        """"""\r\n        Runs the dynamical simulation\r\n        Arguments:\r\n                t_max: Maximum simulation time, e.g. 20 or 100 (can be thought of days)\r\n                dt: Time step interval e.g. 0.1 or 0.02, a small value\r\n                reset: A flag to reset the internal lists (restarts the simulation from initial values)\r\n        """"""\r\n        if reset:\r\n            self.reset()\r\n        # Time step array\r\n        t = np.linspace(0, t_max, int(t_max/dt) + 1)\r\n        # Temp lists\r\n        S, E, I, R = self.s, self.e, self.i, self.r\r\n        # Temp parameters\r\n        alpha, beta, gamma, rho = self.alpha,self.beta,self.gamma,self.rho\r\n        dt = t[1] - t[0]\r\n        # Loop\r\n        for _ in t[1:]:\r\n            next_S = S[-1] - (rho*beta*S[-1]*I[-1])*dt\r\n            next_E = E[-1] + (rho*beta*S[-1]*I[-1] - alpha*E[-1])*dt\r\n            next_I = I[-1] + (alpha*E[-1] - gamma*I[-1])*dt\r\n            next_R = R[-1] + (gamma*I[-1])*dt\r\n            S.append(next_S)\r\n            E.append(next_E)\r\n            I.append(next_I)\r\n            R.append(next_R)\r\n        # Stack results\r\n        result = np.stack([S, E, I, R]).T\r\n        self.s, self.e, self.i, self.r = S, E, I, R\r\n        # Update final values\r\n        self.vals_ = [self.s[-1], self.e[-1], self.i[-1], self.r[-1]]\r\n        \r\n        return result\r\n    \r\n    def plot(self,results=None):\r\n        """"""\r\n        Plots the basic results\r\n        """"""\r\n        # Runs a simulation is no result is provided\r\n        if results is None:\r\n            results = self.run()\r\n        # Plot\r\n        plt.figure(figsize=(12,8))\r\n        plt.plot(results,lw=3)\r\n        plt.title(\'Basic SEIR Model\',fontsize=18)\r\n        plt.legend([\'Susceptible\', \'Exposed\', \'Infected\', \'Recovered\'],\r\n                   fontsize=15)\r\n        plt.xlabel(\'Time Steps\',fontsize=16)\r\n        plt.ylabel(\'Fraction of Population\',fontsize=16)\r\n        plt.grid(True)\r\n        plt.xticks(fontsize=15)\r\n        plt.yticks(fontsize=15)\r\n        plt.show()\r\n    \r\n    def plot_var(\r\n        self,\r\n        var,\r\n        var_name=None,\r\n        show=True):\r\n        """"""\r\n        Plots the given variable\r\n        Expect a list or Numpy array as the variable\r\n        If var is None, plots the infected fraction\r\n        """"""\r\n        if var is None:\r\n            var = self.i\r\n        plt.figure(figsize=(12,8))\r\n        plt.plot(var,lw=3,c=\'blue\')\r\n        plt.title(\'Basic SEIR Model\',fontsize=18)\r\n        if var_name is not None:\r\n            plt.legend([var_name],fontsize=15)\r\n        plt.xlabel(\'Time Steps\',fontsize=16)\r\n        plt.ylabel(\'Fraction of Population\',fontsize=16)\r\n        plt.grid(True)\r\n        plt.xticks(fontsize=15)\r\n        plt.yticks(fontsize=15)\r\n        if show:\r\n            plt.show()'"
