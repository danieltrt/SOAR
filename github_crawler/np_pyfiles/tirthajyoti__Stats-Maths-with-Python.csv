file_path,api_count,code
R_Functions.py,22,"b'\n""""""\nCompact Python wrapper library for commonly used R-style functions\n============================================================================\nBasic functional programming nature of R provides users with extremely simple and compact interface for quick calculations of probabilities and essential descriptive/inferential statistics for a data analysis problem. On the other hand, Python scripting ability allows the analyst to use those statistics in a wide variety of analytics pipeline with limitless sophistication and creativity. To combine the advantage of both worlds, one needs a simple Python-based wrapper library which contains some basic functions pertaining to probability distributions and descriptive statistics defined in R-style so that users can call those functions fast without having to go to the proper Python statistical libraries and figure out the whole list of methods and arguments.\n\nGoal of this library is to provide simple Python sub-routines mimicing R-style statistical functions for quickly calculating density/point estimates, cumulative distributions, quantiles, and generating random variates for various important probability distributions. To maintain the spirit of R styling, no class hiararchy was used and just raw functions are defined in this file so that user can import this one Python script and use all the functions whenever he/she needs them with a single name call.\n""""""\n\n#============================\nBasic Descriptive Statistics\n#============================\n\ndef mean(array):\n    """"""\n    Calculates the mean of an array/vector\n    """"""\n    import numpy as np\n    array=np.array(array)\n    result= np.mean(array)\n    return result\n\ndef sd(array):\n    """"""\n    Calculates the standard deviation of an array/vector\n    """"""\n    import numpy as np\n    array=np.array(array)\n    result= np.std(array)\n    return result\n\ndef median(array):\n    """"""\n    Calculates the median of an array/vector\n    """"""\n    import numpy as np\n    array=np.array(array)\n    result= np.median(array)\n    return result\n\ndef var(array):\n    """"""\n    Calculates the variance of an array/vector\n    """"""\n    import numpy as np\n    array=np.array(array)\n    result= np.var(array)\n    return result\n\ndef cov(x,y=None):\n    """"""\n    Calculates the covariance between two arrays/vectors or of a single matrix\n    """"""\n    import numpy as np\n    array1=np.array(x)\n    if y!=None:\n        array2=np.array(y)\n        if array1.shape!=array2.shape:\n            print(""Error: incompatible dimensions"")\n            return None\n        covmat=np.cov(array1,array2)\n        result=covmat[0][1]\n    elif len(array1.shape)==1:\n        result=float(np.cov(array1))\n    else:\n        result=np.cov(array1)\n    return result        \n\ndef fivenum(array):\n    """"""\n    Calculates the Tuckey Five-number (min/median/max/1st quartile/3rd quartile) of an array/vector\n    """"""\n    import numpy as np\n    array=np.array(array)\n    result=[0]*5\n    result[0]=np.min(array)\n    result[1]=np.percentile(array,25)\n    result[2]=np.median(array)\n    result[3]=np.percentile(array,75)\n    result[4]=np.max(array)\n    result=np.array(result)\n    \n    return result\n\ndef IQR(array):\n    """"""\n    Calculates the inter-quartile range of an array/vector\n    """"""\n    import numpy as np\n    array=np.array(array)\n    result = np.percentile(array,75)-np.percentile(array,25)\n    \n    return result\n\n""""""\nProbability distributions\n""""""\n\n#=====================\n# Uniform distribution\n#=====================\n\ndef dunif(x, minimum=0,maximum=1):\n    """"""\n    Calculates the point estimate of the uniform distribution\n    """"""\n    from scipy.stats import uniform\n    result=uniform.pdf(x=x,loc=minimum,scale=maximum-minimum)\n    return result\n\ndef punif(q, minimum=0,maximum=1):\n    """"""\n    Calculates the cumulative of the uniform distribution\n    """"""\n    from scipy.stats import uniform\n    result=uniform.cdf(x=q,loc=minimum,scale=maximum-minimum)\n    return result\n\ndef qunif(p, minimum=0,maximum=1):\n    """"""\n    Calculates the quantile function of the uniform distribution\n    """"""\n    from scipy.stats import uniform\n    result=uniform.ppf(q=p,loc=minimum,scale=maximum-minimum)\n    return result\n\ndef runif(n, minimum=0,maximum=1):\n    """"""\n    Generates random variables from the uniform distribution\n    """"""\n    from scipy.stats import uniform\n    result=uniform.rvs(size=n,loc=minimum,scale=maximum-minimum)\n    return result\n\n#======================\n# Binomial distribution\n#======================\n\ndef dbinom(x,size,prob=0.5):\n    """"""\n    Calculates the point estimate of the binomial distribution\n    """"""\n    from scipy.stats import binom\n    result=binom.pmf(k=x,n=size,p=prob,loc=0)\n    return result\n\ndef pbinom(q,size,prob=0.5):\n    """"""\n    Calculates the cumulative of the binomial distribution\n    """"""\n    from scipy.stats import binom\n    result=binom.cdf(k=q,n=size,p=prob,loc=0)\n    return result\n\ndef qbinom(p, size, prob=0.5):\n    """"""\n    Calculates the quantile function from the binomial distribution\n    """"""\n    from scipy.stats import binom\n    result=binom.ppf(q=p,n=size,p=prob,loc=0)\n    return result\n\ndef rbinom(n,size,prob=0.5):\n    """"""\n    Generates random variables from the binomial distribution\n    """"""\n    from scipy.stats import binom\n    result=binom.rvs(n=size,p=prob,size=n)\n    return result\n\n#=====================\n# Normal distribution\n#=====================\n\ndef dnorm(x,mean=0,sd =1):\n    """"""\n    Calculates the density of the Normal distribution\n    """"""\n    from scipy.stats import norm\n    result=norm.pdf(x,loc=mean,scale=sd)\n    return result\n\ndef pnorm(q,mean=0,sd=1):\n    """"""\n    Calculates the cumulative of the normal distribution\n    """"""\n    from scipy.stats import norm\n    result=norm.cdf(x=q,loc=mean,scale=sd)\n    return result\n\ndef qnorm(p,mean=0,sd=1):\n    """"""\n    Calculates the quantile function of the normal distribution\n    """"""\n    from scipy.stats import norm\n    result=norm.ppf(q=p,loc=mean,scale=sd)\n    return result\n\ndef rnorm(n,mean=0,sd=1):\n    """"""\n    Generates random variables from the normal distribution\n    """"""\n    from scipy.stats import norm\n    result=norm.rvs(size=n,loc=mean,scale=sd)\n    return result\n\n#=====================\n# Poisson distribution\n#=====================\n\ndef dpois(x,mu):\n    """"""\n    Calculates the density/point estimate of the Poisson distribution\n    """"""\n    from scipy.stats import poisson\n    result=poisson.pmf(k=x,mu=mu)\n    return result\n\ndef ppois(q,mu):\n    """"""\n    Calculates the cumulative of the Poisson distribution\n    """"""\n    from scipy.stats import poisson\n    result=poisson.cdf(k=q,mu=mu)\n    return result\n\ndef qpois(p,mu):\n    """"""\n    Calculates the quantile function of the Poisson distribution\n    """"""\n    from scipy.stats import poisson\n    result=poisson.ppf(q=p,mu=mu)\n    return result\n\ndef rpois(n,mu):\n    """"""\n    Generates random variables from the Poisson distribution\n    """"""\n    from scipy.stats import poisson\n    result=poisson.rvs(size=n,mu=mu)\n    return result\n\n#=====================\n# chi^2-distribution\n#=====================\n\ndef dchisq(x,df,ncp=0):\n    """"""\n    Calculates the density/point estimate of the chi-square distribution\n    """"""\n    from scipy.stats import chi2,ncx2\n    if ncp==0:\n        result=chi2.pdf(x=x,df=df,loc=0,scale=1)\n    else:\n        result=ncx2.pdf(x=x,df=df,nc=ncp,loc=0,scale=1)\n    return result\n\ndef pchisq(q,df,ncp=0):\n    """"""\n    Calculates the cumulative of the chi-square distribution\n    """"""\n    from scipy.stats import chi2,ncx2\n    if ncp==0:\n        result=chi2.cdf(x=q,df=df,loc=0,scale=1)\n    else:\n        result=ncx2.cdf(x=q,df=df,nc=ncp,loc=0,scale=1)\n    return result\n\ndef qchisq(p,df,ncp=0):\n    """"""\n    Calculates the quantile function of the chi-square distribution\n    """"""\n    from scipy.stats import chi2,ncx2\n    if ncp==0:\n        result=chi2.ppf(q=p,df=df,loc=0,scale=1)\n    else:\n        result=ncx2.ppf(q=p,df=df,nc=ncp,loc=0,scale=1)\n    return result\n\ndef rchisq(n,df,ncp=0):\n    """"""\n    Generates random variables from the chi-square distribution\n    """"""\n    from scipy.stats import chi2,ncx2\n    if ncp==0:\n        result=chi2.rvs(size=n,df=df,loc=0,scale=1)\n    else:\n        result=ncx2.rvs(size=n,df=df,nc=ncp,loc=0,scale=1)\n    return result\n\n#==============================\n# ### Student\'s t-distribution\n#==============================\n\ndef dt(x,df,ncp=0):\n    """"""\n    Calculates the density/point estimate of the t-distribution\n    """"""\n    from scipy.stats import t,nct\n    if ncp==0:\n        result=t.pdf(x=x,df=df,loc=0,scale=1)\n    else:\n        result=nct.pdf(x=x,df=df,nc=ncp,loc=0,scale=1)\n    return result\n\ndef pt(q,df,ncp=0):\n    """"""\n    Calculates the cumulative of the t-distribution\n    """"""\n    from scipy.stats import t,nct\n    if ncp==0:\n        result=t.cdf(x=q,df=df,loc=0,scale=1)\n    else:\n        result=nct.cdf(x=q,df=df,nc=ncp,loc=0,scale=1)\n    return result\n\ndef qt(p,df,ncp=0):\n    """"""\n    Calculates the quantile function of the t-distribution\n    """"""\n    from scipy.stats import t,nct\n    if ncp==0:\n        result=t.ppf(q=p,df=df,loc=0,scale=1)\n    else:\n        result=nct.ppf(q=p,df=df,nc=ncp,loc=0,scale=1)\n    return result\n\ndef rt(n,df,ncp=0):\n    """"""\n    Generates random variables from the t-distribution\n    """"""\n    from scipy.stats import t,nct\n    if ncp==0:\n        result=t.rvs(size=n,df=df,loc=0,scale=1)\n    else:\n        result=nct.rvs(size=n,df=df,nc=ncp,loc=0,scale=1)\n    return result\n\n#================\n# F-distribution\n#================\n\ndef df(x,df1,df2,ncp=0):\n    """"""\n    Calculates the density/point estimate of the F-distribution\n    """"""\n    from scipy.stats import f,ncf\n    if ncp==0:\n        result=f.pdf(x=x,dfn=df1,dfd=df2,loc=0,scale=1)\n    else:\n        result=ncf.pdf(x=x,dfn=df1,dfd=df2,nc=ncp,loc=0,scale=1)\n    return result\n\ndef pf(q,df1,df2,ncp=0):\n    """"""\n    Calculates the cumulative of the F-distribution\n    """"""\n    from scipy.stats import f,ncf\n    if ncp==0:\n        result=f.cdf(x=q,dfn=df1,dfd=df2,loc=0,scale=1)\n    else:\n        result=ncf.cdf(x=q,dfn=df1,dfd=df2,nc=ncp,loc=0,scale=1)\n    return result\n\ndef qf(p,df1,df2,ncp=0):\n    """"""\n    Calculates the quantile function of the F-distribution\n    """"""\n    from scipy.stats import f,ncf\n    if ncp==0:\n        result=f.ppf(q=p,dfn=df1,dfd=df2,loc=0,scale=1)\n    else:\n        result=ncf.ppf(q=p,dfn=df1,dfd=df2,nc=ncp,loc=0,scale=1)\n    return result\n\ndef rf(n,df1,df2,ncp=0):\n    """"""\n    Calculates the quantile function of the F-distribution\n    """"""\n    from scipy.stats import f,ncf\n    if ncp==0:\n        result=f.rvs(size=n,dfn=df1,dfd=df2,loc=0,scale=1)\n    else:\n        result=ncf.rvs(size=n,dfn=df1,dfd=df2,nc=ncp,loc=0,scale=1)\n    return result\n\n#===================\n# Beta distribution\n#===================\n\ndef dbeta(x,shape1,shape2):\n    """"""\n    Calculates the density/point estimate of the Beta-distribution\n    """"""\n    from scipy.stats import beta\n    result=beta.pdf(x=x,a=shape1,b=shape2,loc=0,scale=1)\n    return result\n\ndef pbeta(q,shape1,shape2):\n    """"""\n    Calculates the cumulative of the Beta-distribution\n    """"""\n    from scipy.stats import beta\n    result=beta.cdf(x=q,a=shape1,b=shape2,loc=0,scale=1)\n    return result\n\ndef qbeta(p,shape1,shape2):\n    """"""\n    Calculates the cumulative of the Beta-distribution\n    """"""\n    from scipy.stats import beta\n    result=beta.ppf(q=p,a=shape1,b=shape2,loc=0,scale=1)\n    return result\n\ndef rbeta(n,shape1,shape2):\n    """"""\n    Calculates the cumulative of the Beta-distribution\n    """"""\n    from scipy.stats import beta\n    result=beta.rvs(size=n,a=shape1,b=shape2,loc=0,scale=1)\n    return result\n\n#========================\n# ### Gamma distribution\n#========================\n\ndef dgamma(x,shape,rate=1):\n    """"""\n    Calculates the density/point estimate of the Gamma-distribution\n    """"""\n    from scipy.stats import gamma\n    result=rate*gamma.pdf(x=rate*x,a=shape,loc=0,scale=1)\n    return result\n\ndef pgamma(q,shape,rate=1):\n    """"""\n    Calculates the cumulative of the Gamma-distribution\n    """"""\n    from scipy.stats import gamma\n    result=gamma.cdf(x=rate*q,a=shape,loc=0,scale=1)\n    return result\n\ndef qgamma(p,shape,rate=1):\n    """"""\n    Calculates the cumulative of the Gamma-distribution\n    """"""\n    from scipy.stats import gamma\n    result=(1/rate)*gamma.ppf(q=p,a=shape,loc=0,scale=1)\n    return result\n\ndef rgamma(n,shape,rate=1):\n    """"""\n    Calculates the cumulative of the Gamma-distribution\n    """"""\n    from scipy.stats import gamma\n    result=gamma.rvs(size=n,a=shape,loc=0,scale=1)\n    return result\n'"
