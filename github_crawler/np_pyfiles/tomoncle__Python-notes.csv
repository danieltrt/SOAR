file_path,api_count,code
levenshtein.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-7-4 \xe4\xb8\x8a\xe5\x8d\x8811:21\n# @Author         : Tom.Lee\n# @Description    : http://blog.csdn.net/gzlaiyonghao/article/details/1483728 \n# @File           : test.py\n# @Product        : PyCharm\n\nimport re\n\n""""""\nLevenshtein Distance \xe7\xbc\x96\xe8\xbe\x91\xe8\xb7\x9d\xe7\xa6\xbb\xe7\xae\x97\xe6\xb3\x95,\xe8\xae\xa1\xe7\xae\x97\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\n\n    \xe6\xaf\x94\xe5\xa6\x82\xe8\xa6\x81\xe8\xae\xa1\xe7\xae\x97cafe\xe5\x92\x8ccoffee\xe7\x9a\x84\xe7\xbc\x96\xe8\xbe\x91\xe8\xb7\x9d\xe7\xa6\xbb\xe3\x80\x82cafe\xe2\x86\x92caffe\xe2\x86\x92coffe\xe2\x86\x92coffee \xe4\xb8\xba3\n\xe5\x85\x88\xe5\x88\x9b\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\xaa6\xc3\x978\xe7\x9a\x84\xe8\xa1\xa8\xef\xbc\x88cafe\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\xba4\xef\xbc\x8ccoffee\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\xba6\xef\xbc\x8c\xe5\x90\x84\xe5\x8a\xa02\xef\xbc\x89\xef\xbc\x8a\xe4\xbb\xa3\xe8\xa1\xa8\xe7\xa9\xba\xe7\x99\xbd\xe5\x8d\xa0\xe4\xbd\x8d\xe7\xac\xa6\n\n*\t*\tc\to\tf\tf\te\te\n\n*   0\t1\t2\t3\t4\t5\t6\n\nc\t1\t0\t1\t2\t3\t4\t5\n\na\t2\t1\t1\t2\t3\t4\t5\n\nf\t3\t2\t2\t1\t2\t3\t4\n\ne\t4\t3\t3\t2\t2\t2\t3\n\n\n\xe4\xbb\x8e3,3\xe6\xa0\xbc\xe5\xbc\x80\xe5\xa7\x8b\xef\xbc\x8c\xe5\xbc\x80\xe5\xa7\x8b\xe8\xae\xa1\xe7\xae\x97\xe3\x80\x82\xe5\x8f\x96\xe4\xbb\xa5\xe4\xb8\x8b\xe4\xb8\x89\xe4\xb8\xaa\xe5\x80\xbc\xe7\x9a\x84\xe6\x9c\x80\xe5\xb0\x8f\xe5\x80\xbc\xef\xbc\x9a\n1.\xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x80\xe4\xb8\x8a\xe6\x96\xb9\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe7\xad\x89\xe4\xba\x8e\xe6\x9c\x80\xe5\xb7\xa6\xe6\x96\xb9\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xef\xbc\x8c\xe5\x88\x99\xe4\xb8\xba\xe5\xb7\xa6\xe4\xb8\x8a\xe6\x96\xb9\xe7\x9a\x84\xe6\x95\xb0\xe5\xad\x97\xe3\x80\x82\xe5\x90\xa6\xe5\x88\x99\xe4\xb8\xba\xe5\xb7\xa6\xe4\xb8\x8a\xe6\x96\xb9\xe7\x9a\x84\xe6\x95\xb0\xe5\xad\x97+1\xe3\x80\x82\xef\xbc\x88\xe5\xaf\xb9\xe4\xba\x8e3,3\xe6\x9d\xa5\xe8\xaf\xb4\xe4\xb8\xba0\xef\xbc\x89\n2.\xe5\xb7\xa6\xe6\x96\xb9\xe6\x95\xb0\xe5\xad\x97+1\xef\xbc\x88\xe5\xaf\xb9\xe4\xba\x8e3,3\xe6\xa0\xbc\xe6\x9d\xa5\xe8\xaf\xb4\xe4\xb8\xba2\xef\xbc\x89\n3.\xe4\xb8\x8a\xe6\x96\xb9\xe6\x95\xb0\xe5\xad\x97+1\xef\xbc\x88\xe5\xaf\xb9\xe4\xba\x8e3,3\xe6\xa0\xbc\xe6\x9d\xa5\xe8\xaf\xb4\xe4\xb8\xba2\xef\xbc\x89\n""""""\n\na = \'cafee\'\nb = \'cof1ee\'\n\n\ndef minimum(a, b):\n    m, n = len(a), len(b)\n    col_size, matrix = m + 1, []\n    for i in range((m + 1) * (n + 1)):\n        matrix.append(0)\n    for i in range(col_size):\n        matrix[i] = i\n    for i in range(n + 1):\n        matrix[i * col_size] = i\n    for i in range(n + 1)[1:n + 1]:\n        for j in range(m + 1)[1:m + 1]:\n            if a[j - 1] == b[i - 1]:\n                cost = 0\n            else:\n                cost = 1\n            min_value = matrix[(i - 1) * col_size + j] + 1\n            if min_value > matrix[i * col_size + j - 1] + 1:\n                min_value = matrix[i * col_size + j - 1] + 1\n            if min_value > matrix[(i - 1) * col_size + j - 1] + cost:\n                min_value = matrix[(i - 1) * col_size + j - 1] + cost\n            matrix[i * col_size + j] = min_value\n    return matrix[n * col_size + m]\n\n\ns1 = \'Invalid input for operation: Requested subnet with cidr: 172.16.17.0\' \\\n     \'/24 for network: c6aa9c38-ccee-467f-a1e7-c718a33ecc06 overlaps with another subnet.\'\n\ns2 = \'Invalid input for operation: Requested subnet with cidr: 192.168.11.0/24\' \\\n     \' for network: 028d91af-b461-4d9d-ab76-da4a8845d3cf overlaps with another subnet.\'\n\n\ndef pop_cidr_uuid(s):\n    s = re.compile(r\'(?<![\\.\\d])(?:\\d{1,3}\\.){3}\\d{1,3}(?![\\.\\d])/24\', re.S).sub(\'\', s)\n    s = re.compile(r\'([a-f\\d]{8}-[a-f\\d]{4}-[a-f\\d]{4}-[a-f\\d]{4}-[a-f\\d]{12})\', re.S).sub(\'\', s)\n    return s\n\n\ns001 = \'Invalid input for operation: Requested subnet with cidr:  for network:  overlaps with another subnet.\'\nprint minimum(s001, pop_cidr_uuid(s1))\n'"
algorithms/algorithm_sorting.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-4-19 \xe4\xb8\x8a\xe5\x8d\x8811:14\n# @Author         : Tom.Lee\n# @Description    : \n# @File           : algorithm_sorting.py\n# @Product        : PyCharm\n\n\ndef bubble_sort():\n    """"""\n    \xe5\x86\x92\xe6\xb3\xa1\xe6\x8e\x92\xe5\xba\x8f\xef\xbc\x9a\n    n\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\xef\xbc\x8c\xe5\xbe\xaa\xe7\x8e\xafn-1\xe8\xbd\xae\xef\xbc\x8c\n    \xe6\xaf\x8f\xe4\xb8\x80\xe8\xbd\xae\xef\xbc\x8c\xe6\xaf\x94\xe8\xbe\x83n-i\xe6\xac\xa1\xef\xbc\x8c\xe9\x80\x89\xe5\x87\xba\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\n    """"""\n    L = [9, 8, 7, 6, 5, 4, 3, 2, 1]\n    n = len(L)\n    for i in range(1, n):  # \xe6\xaf\x94\xe8\xbe\x83n-1\xe8\xbd\xae\n        # print n - i\n        for j in range(n - i):  # \xe6\xaf\x8fi\xe8\xbd\xae\xe6\xaf\x94\xe8\xbe\x83n-i\xe6\xac\xa1\xef\xbc\x8c\xe9\x80\x89\xe5\x87\xba\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\n            if L[j] > L[j + 1]:\n                L[j], L[j + 1] = L[j + 1], L[j]\n\n    print L\n\n\ndef insertion_sort():\n    """"""\n    \xe6\x8f\x92\xe5\x85\xa5\xe6\x8e\x92\xe5\xba\x8f\xe7\xae\x97\xe6\xb3\x95\xef\xbc\x9a\n    \xe5\x8e\x9f\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x9a[2,3,1,34,5,6,11,7,8]\n\n    \xe4\xb8\x8b\xe6\xa0\x87\xe4\xbb\x8e0\xe5\xbc\x80\xe5\xa7\x8b\xef\xbc\x9a\n    \xe7\xac\xac\xe4\xb8\x80\xe6\xac\xa1\xef\xbc\x9a\xe5\x8f\x96\xe4\xb8\x8b\xe6\xa0\x871 \xe5\x92\x8c\xe4\xb8\x8b\xe6\xa0\x87[:1]\xe6\xaf\x94\xe8\xbe\x83\n    \xe7\xac\xac\xe4\xba\x8c\xe6\xac\xa1\xef\xbc\x9a\xe5\x8f\x96\xe4\xb8\x8b\xe6\xa0\x872 \xe5\x92\x8c\xe4\xb8\x8b\xe6\xa0\x87[:2]\xe6\xaf\x94\xe8\xbe\x83\n    \xe3\x80\x82\xe3\x80\x82\xe3\x80\x82\n    \xe7\xac\xacn-1\xe6\xac\xa1\xef\xbc\x9a\xe5\x8f\x96\xe4\xb8\x8b\xe6\xa0\x87n-1(\xe6\xb3\xa8\xe6\x84\x8f\xe6\xad\xa4\xe6\x97\xb6\xe7\x9a\x84\xe5\x85\x83\xe7\xb4\xa0\xe5\xb7\xb2\xe7\xbb\x8f\xe6\x98\xaf\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\xe4\xba\x86)\xe5\x92\x8c[:n-1]\xe6\xaf\x94\xe8\xbe\x83\n    \xe5\x85\xb1\xe6\xaf\x94\xe8\xbe\x83n-1\xe6\xac\xa1\n    """"""\n\n    L = [9, 8, 7, 5, 6, 4, 3, 2, 1]\n    n = len(L)\n    for i in range(n - 1):\n        for j in range(i + 1):  # \xe5\x9b\xa0\xe4\xb8\xba\xe4\xb8\x8b\xe6\xa0\x87\xe4\xbb\x8e0\xe5\xbc\x80\xe5\xa7\x8b\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe7\xac\xaci\xe6\xac\xa1\xef\xbc\x8c\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe4\xbd\x8d\xe7\xbd\xae\xe8\xa6\x81 i+1\xe8\xa1\xa8\xe7\xa4\xba\xe5\xbd\x93\xe5\x89\x8d\xe4\xb8\x8b\xe6\xa0\x87\xe4\xbd\x8d\xe7\xbd\xae\n            # print i+1,\'-\',j\n            if L[i + 1] < L[j]: L[i + 1], L[j] = L[j], L[i + 1]\n\n    print L\n\n\ndef selection_sort():\n    """"""\n    \xe9\x80\x89\xe6\x8b\xa9\xe6\x8e\x92\xe5\xba\x8f\xe7\xae\x97\xe6\xb3\x95\xef\xbc\x9a\n\n    \xe6\xaf\x8f\xe6\xac\xa1\xe6\x89\xbe\xe5\x87\xba\xe6\x9c\x80\xe5\xb0\x8f\xe5\x85\x83\xe7\xb4\xa0\xef\xbc\x8c\xe6\x94\xbe\xe7\xbd\xae\xe5\x88\xb0\xe5\xba\x8f\xe5\x88\x97\xe5\xa4\xb4\xe9\x83\xa8\xef\xbc\x8c\xe5\xbe\xaa\xe7\x8e\xaf\xe5\xba\x8f\xe5\x88\x97\n\n    \xe7\xac\xac\xe4\xb8\x80\xe6\xac\xa1\xef\xbc\x9a\xe6\x89\xbe\xe5\x87\xba\xe6\x9c\x80\xe5\xb0\x8f\xe6\x94\xbe\xe5\x88\xb0\xe4\xb8\x8b\xe6\xa0\x870\n    \xe7\xac\xac\xe4\xba\x8c\xe6\xac\xa1\xef\xbc\x9a\xe5\x9c\xa8\xe5\x89\xa9\xe4\xbd\x99\xe6\x89\xbe\xe5\x87\xba\xe6\x9c\x80\xe5\xb0\x8f\xe6\x94\xbe\xe5\x88\xb0\xe4\xb8\x8b\xe6\xa0\x871\n    \xe3\x80\x82\xe3\x80\x82\xe3\x80\x82\n    \xe7\xac\xacn-1\xe6\xac\xa1\n    """"""\n    L = [5, 4, 3, 2, 1, 0, -77]\n    n = len(L)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            # print i,\'-\',j\n            if L[i] > L[j]: L[i], L[j] = L[j], L[i]\n\n    print L\n'"
algorithms/question1.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2017/5/16 21:56\n# @Author  : tom.lee\n# @Site    : \n# @File    : question1.py\n# @Software:\n\n""""""\n\xe8\xbe\x93\xe5\x85\xa5\xe4\xb8\x80\xe4\xb8\xaa\xe6\x95\xb0\xe7\xbb\x84a\xef\xbc\x8c\xe5\x92\x8c\xe4\xb8\x80\xe4\xb8\xaa\xe6\x95\xb4\xe6\x95\xb0k\xef\xbc\x8c\xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe8\xbf\x99\xe4\xb8\xaa\xe6\x95\xb0\xe7\xbb\x84\xe9\x9a\x8f\xe6\x9c\xba\xe7\xbb\x84\xe6\x88\x90\xe7\x9a\x84\xe6\x95\xb0\xe5\xad\x97\xef\xbc\x8c\xe5\xa4\xa7\xe4\xba\x8e\xe6\x88\x96\xe7\xad\x89\xe4\xba\x8e\xe7\x9a\x84\xe5\x80\xbc\xe4\xb8\xad\xe6\x9c\x80\xe5\xb0\x8f\xe7\x9a\x84\xe4\xb8\x80\xe4\xb8\xaa\n\n""\xe8\xbf\x99\xe4\xb8\xaa\xe7\xae\x97\xe6\xb3\x95\xe6\x9c\x89\xe9\x97\xae\xe9\xa2\x98\xef\xbc\x8e\xe6\x9c\x89\xe6\x97\xb6\xe9\x97\xb4\xe5\x86\x8d\xe6\x94\xb9\xe5\x90\xa7.""\n""""""\n\na = [1, 3, 4, 5]\nk = 1222\n\na.sort()\nkps = False\nks = list(str(k))\nlength = len(ks)\n\n\ndef _min(lis, v):\n    for n in lis:\n        if n < v:\n            continue\n        else:\n            return n\n    return None\n\n\ndef deep(start, length, kps):\n    for i in range(start, length):\n        if kps:\n            ks[i] = str(a[0])\n        if int(ks[i]) in a:\n            continue\n        else:\n            m = _min(a, int(ks[i]))\n            kps = True\n            if not m:\n                ks[i - 1] = str(a[a.index(int(ks[i - 1]) + 1)])\n\n                deep(i, length, kps)\n            else:\n                ks[i] = str(m)\n\n\ndeep(0, length, kps)\nprint \'\'.join(ks)\n'"
data_analysis/__init__.py,0,b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2017/7/23 12:09\n# @Author  : Tom.lee\n# @Site    : \n# @File    : __init__.py.py\n# @Software: PyCharm\n\n'
page_parser/__init__.py,0,b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-8 \xe4\xb8\x8b\xe5\x8d\x882:19\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : __init__.py.py\n# @Product        : PyCharm\n'
skills/async_call.py,0,"b'#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\nimport logging\nimport Queue\nimport threading\n\n\ndef func_a(a, b):\n    return a + b\n\n\ndef func_b():\n    pass\n\n\ndef func_c(a, b, c):\n    return a, b, c\n\n\n# \xe5\xbc\x82\xe6\xad\xa5\xe4\xbb\xbb\xe5\x8a\xa1\xe9\x98\x9f\xe5\x88\x97\n_task_queue = Queue.Queue()\n\n\ndef async_call(function, callback, *args, **kwargs):\n    _task_queue.put({\n        \'function\': function,\n        \'callback\': callback,\n        \'args\': args,\n        \'kwargs\': kwargs\n    })\n\n\ndef _task_queue_consumer():\n    """"""\n    \xe5\xbc\x82\xe6\xad\xa5\xe4\xbb\xbb\xe5\x8a\xa1\xe9\x98\x9f\xe5\x88\x97\xe6\xb6\x88\xe8\xb4\xb9\xe8\x80\x85\n    """"""\n    print \'_task_queue_consumer\'\n    while True:\n        try:\n            task = _task_queue.get()\n            function = task.get(\'function\')\n            callback = task.get(\'callback\')\n            args = task.get(\'args\')\n            kwargs = task.get(\'kwargs\')\n            try:\n                if callback:\n                    callback(function(*args, **kwargs))\n            except Exception as ex:\n                logging.error(ex)\n                if callback:\n                    callback(ex)\n            finally:\n                _task_queue.task_done()\n        except Exception as ex:\n            # logging.warning(ex)\n            logging.error(ex),""""""***************""""""\n\n\ndef handle_result(result):\n    print result\n    print(type(result), result)\n\n\nif __name__ == \'__main__\':\n    t = threading.Thread(target=_task_queue_consumer)\n    t.daemon = True\n    t.start()\n\n    async_call(func_a, handle_result, 1, 2)\n    async_call(func_b, handle_result)\n    async_call(func_c, handle_result, 1, 2, 3)\n    async_call(func_c, handle_result, 1, 2, 3, 4)\n\n    _task_queue.join()\n'"
skills/download_music.py,0,"b'# -*- coding=utf-8 -*-\n\nimport requests\nimport json\nimport urllib\nimport urllib2\n\n# \xe6\x9f\xa5\xe7\x9c\x8b\xe5\xa4\x96\xe9\x93\xbe\xe7\x94\x9f\xe6\x88\x90\xe5\x99\xa8\xe7\x9a\x84\xe3\x80\x80url \xe6\x96\xb9\xe6\xb3\x95\ndata = requests.post(\n    url=\'http://music.163.com/weapi/song/enhance/player/url\',\n    data={\n        \'params\': \'iPslhRDpIz9eXPL6tuauyLF7NSU7yIetfu0vlx7lzfhlZGm21DICXpBCTmAqdiznd6LMnR6bGegIXGWyjNcHaOpjUC4E9ZLNt42hmQnA6QnYwitYsvs6CrKuXFp8pCJb\',\n        \'encSecKey\': \'47911c978b596e8c832e76ae96c0660ef6380d7f9e71c56e3ce7d90cf6978b385a6c5cba169cdf74d39cecae564cdaedfbc28e65cef01fbaeb3e0d27c228d6b0a63151ecb2d16a920eb37608d173c5824aa689dbfdb4fce2877df3702eb70cff009a20b84f94ca581b09f0c4840d51881af7702cf07a26e8a16f647739006ff0\'\n    },\n)\n\n# print json.loads(data.content)\nif data.content:\n    url = json.loads(data.content).get(\'data\')[0].get(\'url\')\n    print url\n    # download 1\n    # urllib.urlretrieve(url, url.split(\'/\')[-1])\n\n    # download 2\n    # r = requests.get(url)\n    # with open(url.split(\'/\')[-1], ""wb"") as code:\n    #     code.write(r.content)\n\n    # download 3\n    f = urllib2.urlopen(url)\n    with open(url.split(\'/\')[-1], ""wb"") as code:\n        code.write(f.read())\n'"
skills/httpserver.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-4-24 \xe4\xb8\x8b\xe5\x8d\x882:22\n# @Author         : Tom.Lee\n# @Description    : \n# @File           : httpserver.py\n# @Product        : PyCharm\n\n""""""\npython \xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\n""""""\nimport socket\nimport select\nimport sys\nfrom wsgiref.simple_server import make_server\n\n""""""\n\xe7\x94\xa8\xe6\xa0\x87\xe5\x87\x86\xe5\xba\x93\xe7\x9a\x84wsgiref\xe5\x8d\x95\xe7\x8b\xac\xe8\xb5\xb7\xe4\xb8\x80\xe4\xb8\xaa\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\xe7\x9b\x91\xe5\x90\xac\xe7\xab\xaf\xe5\x8f\xa3\n""""""\n\n\ndef simple_app(environ, start_response):\n    status = \'200 OK\'\n    response_headers = [(\'Content-type\', \'text/plain\')]\n    start_response(status, response_headers)\n    # print environ, start_response\n    return [\'Hello world!\\n\']\n\n\n# httpd = make_server(\'\', 10001, simple_app)\n# httpd.serve_forever()\n\n""""""\n\xe4\xbb\xa3\xe7\x90\x86\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\n""""""\n\nto_addr = (\'127.0.0.1\', 10001)  # \xe8\xbd\xac\xe5\x8f\x91\xe7\x9a\x84\xe5\x9c\xb0\xe5\x9d\x80\n\n\nclass Proxy:\n    def __init__(self, addr):\n        self.proxy = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.proxy.bind(addr)\n        self.proxy.listen(10)\n        self.inputs = [self.proxy]\n        self.route = {}\n\n    def serve_forever(self):\n        print \'proxy listen...\'\n        while 1:\n            readable, _, _ = select.select(self.inputs, [], [])\n            for self.sock in readable:\n                if self.sock == self.proxy:\n                    self.on_join()\n                else:\n                    data = self.sock.recv(8096)\n                    if not data:\n                        self.on_quit()\n                    else:\n                        self.route[self.sock].send(data)\n\n    def on_join(self):\n        client, addr = self.proxy.accept()\n        print addr, \'connect\'\n        forward = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        forward.connect(to_addr)\n        self.inputs += [client, forward]\n        self.route[client] = forward\n        self.route[forward] = client\n\n    def on_quit(self):\n        for s in self.sock, self.route[self.sock]:\n            self.inputs.remove(s)\n            del self.route[s]\n            s.close()\n\n\nif __name__ == \'__main__\':\n    try:\n        Proxy((\'\', 12345)).serve_forever()  # \xe4\xbb\xa3\xe7\x90\x86\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\xe7\x9b\x91\xe5\x90\xac\xe7\x9a\x84\xe5\x9c\xb0\xe5\x9d\x80\n    except KeyboardInterrupt:\n        sys.exit(1)\n'"
standard_library/__init__.py,0,b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2017/4/29 14:43\n# @Author  : Aries\n# @Site    : \n# @File    : __init__.py.py\n# @Software: PyCharm\n\n'
standard_library/study_argparse.py,0,"b""#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-7-5 \xe4\xb8\x8b\xe5\x8d\x882:14\n# @Author         : Tom.Lee\n# @Description    : \n# @File           : study_argparse.py\n# @Product        : PyCharm\n\nimport argparse\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='test argparse')\n\n    parser.add_argument('--user', dest='USER', type=str,\n                        required=True,\n                        help='User Name')\n    parser.add_argument('-H', '--host', dest='HOST', type=str,\n                        default='localhost',\n                        help='Server Ip Address')\n    parser.add_argument('-P', '--port', dest='PORT', type=int,\n                        default=3306,\n                        help='Server Connection Port')\n\n    args = parser.parse_args()\n    print args\n    print getattr(args, 'no', None)\n    print getattr(args, 'PORT', None)\n"""
standard_library/study_color_print.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-7-21 \xe4\xb8\x8b\xe5\x8d\x882:50\n# @Author         : Tom.Lee\n# @File           : study_color_print.py\n# @Product        : PyCharm\n\n""""""\n\\033[1;31;40m    <!--1-\xe9\xab\x98\xe4\xba\xae\xe6\x98\xbe\xe7\xa4\xba 31-\xe5\x89\x8d\xe6\x99\xaf\xe8\x89\xb2\xe7\xba\xa2\xe8\x89\xb2  40-\xe8\x83\x8c\xe6\x99\xaf\xe8\x89\xb2\xe9\xbb\x91\xe8\x89\xb2-->\n\\033[0m          <!--\xe9\x87\x87\xe7\x94\xa8\xe7\xbb\x88\xe7\xab\xaf\xe9\xbb\x98\xe8\xae\xa4\xe8\xae\xbe\xe7\xbd\xae\xef\xbc\x8c\xe5\x8d\xb3\xe5\x8f\x96\xe6\xb6\x88\xe9\xa2\x9c\xe8\x89\xb2\xe8\xae\xbe\xe7\xbd\xae-->\n""""""\n\nprint \'\\033[1;31;40m \'\nprint \'*\' * 25, \'LOG\', \'*\' * 25\nprint \'hello world!\'\nprint \'\\033[0m\'\n'"
standard_library/study_file.py,0,"b'#  -*- coding=utf-8 -*-\n\n""""""\n\xe6\x96\x87\xe4\xbb\xb6\xe6\x93\x8d\xe4\xbd\x9c\n""""""\n\nimport errno\nimport os\n\nimport six\n\n\ndef create_dir(path):\n    if not os.path.exists(path):\n        os.makedirs(path)\n    else:\n        print u\'\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9%s\xe3\x80\x80\xe5\xb7\xb2\xe7\xbb\x8f\xe5\xad\x98\xe5\x9c\xa8\' % path\n\n\ndef parent_dir(path):\n    if path[-1] == \'/\': path = path[0:-1]\n    return \'/\'.join(path.split(\'/\')[0:-1])\n\n\ndef del_dir(path):\n    if not all((os.path.exists(path), os.path.isdir(path))):\n        return\n    for root, dirs, files in os.walk(path, topdown=False):\n        for name in files:\n            os.remove(os.path.join(root, name))\n        for name in dirs:\n            os.rmdir(os.path.join(root, name))\n    os.rmdir(path)\n\n\ndef create_file(name, mode=\'r\', data=""""):\n    try:\n        parent_path = parent_dir(name)\n        if parent_path and not os.path.exists(parent_path):\n            create_dir(parent_path)\n        with open(name, mode)as f:\n            f.write(data)\n    except Exception, e:\n        print u\'%s \xe5\x88\x9b\xe5\xbb\xba\xe5\xa4\xb1\xe8\xb4\xa5\\n\xe5\xbc\x82\xe5\xb8\xb8\xef\xbc\x9a%s\' % (name, e)\n\n\ndef remove_file(file_path):\n    try:\n        os.remove(file_path)\n    except OSError:\n        pass\n\n\ndef get_file_size(file_obj):\n\n    if (hasattr(file_obj, \'seek\') and hasattr(file_obj, \'tell\') and\n            (six.PY2 or six.PY3 and file_obj.seekable())):\n        try:\n            curr = file_obj.tell()\n            file_obj.seek(0, os.SEEK_END)\n            size = file_obj.tell()\n            file_obj.seek(curr)\n            return size\n        except IOError as e:\n            if e.errno == errno.ESPIPE:\n                return\n            else:\n                raise\n\n\nif __name__ == \'__main__\':\n    # create_file(\'/home/aric/pythontest/bb/bbb/abc.txt\', \'w\', \'hello world\')\n\n    del_dir(\'/home/liyuanjun/keys\')\n'"
standard_library/study_filter.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 17-7-22 \xe4\xb8\x8a\xe5\x8d\x881:18\n# @Author  : tom.lee\n# @Site    : \n# @File    : study_filter.py\n# @Software: PyCharm\n\n""""""\n\xe6\x8c\x89\xe7\x85\xa7\xe6\x9f\x90\xe7\xa7\x8d\xe8\xa7\x84\xe5\x88\x99\xe8\xbf\x87\xe6\xbb\xa4\xe6\x8e\x89\xe4\xb8\x80\xe4\xba\x9b\xe5\x85\x83\xe7\xb4\xa0\n\n\xe6\x8e\xa5\xe6\x94\xb6\xe4\xb8\x80\xe4\xb8\xaa boolean\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\x8f\xaf\xe7\x94\xa8\xe6\x97\xb6lambda,\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xaf\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\n\xe8\xbf\xad\xe4\xbb\xa3\xe4\xbc\xa0\xe5\x85\xa5\xe7\x9a\x84\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xaf\xb9\xe8\xb1\xa1\xe7\x9a\x84\xe6\xaf\x8f\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xbf\x87\xe6\xbb\xa4\n""""""\n\nlst = [1, 2, 3, 4, 5, 6]\n# \xe6\x89\x80\xe6\x9c\x89\xe5\xa5\x87\xe6\x95\xb0\xe9\x83\xbd\xe4\xbc\x9a\xe8\xbf\x94\xe5\x9b\x9eTrue, \xe5\x81\xb6\xe6\x95\xb0\xe4\xbc\x9a\xe8\xbf\x94\xe5\x9b\x9eFalse\xe8\xa2\xab\xe8\xbf\x87\xe6\xbb\xa4\xe6\x8e\x89\nprint filter(lambda x: x % 2 != 0, lst)\n# \xe8\xbe\x93\xe5\x87\xba\xe7\xbb\x93\xe6\x9e\x9c [1, 3, 5]\n\n'"
standard_library/study_httplib.py,0,"b""#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-7-21 \xe4\xb8\x8b\xe5\x8d\x882:45\n# @Author         : Tom.Lee\n# @File           : study_httplib.py\n# @Product        : PyCharm\nimport httplib\nimport urllib\n\n\ndef request_get(host, port, url, params=None, headers=None, timeout=5):\n    status, http_clint, data = None, None, None\n    try:\n        http_clint = httplib.HTTPConnection(host, port, timeout=timeout)\n        url = url + urllib.urlencode(params or {})\n        http_clint.request('GET', url, headers=headers or {})\n        response = http_clint.getresponse()\n        status = response.status\n        data = response.read()\n    except Exception, e:\n        print e\n    finally:\n        if http_clint:\n            http_clint.close()\n        return status, data\n\n\ndef request_post(host, port, url, body=None, headers=None, timeout=5):\n    status, http_clint, data = None, None, None\n    try:\n        http_clint = httplib.HTTPConnection(host, port, timeout=timeout)\n        http_clint.request('POST', url, body, headers)\n        response = http_clint.getresponse()\n        status = response.status\n        data = response.read()\n\n    except Exception, e:\n        print 'http post error :{0}'.format(e)\n    finally:\n        if http_clint:\n            http_clint.close()\n        return status, data\n"""
standard_library/study_itertools.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-9-8 \xe4\xb8\x8b\xe5\x8d\x881:50\n# @Author         : Tom.Lee\n# @File           : study_itertools.py\n# @Product        : PyCharm\n# @Source         :\n\n\nimport itertools\n\n""""""\n\xe5\x90\x88\xe5\xb9\xb6\xe5\xa4\x9a\xe4\xb8\xaa\xe8\xaf\x8d\xe4\xb8\xba\xe4\xb8\x80\xe4\xb8\xaa\xe5\x88\x97\xe8\xa1\xa8:\xe3\x80\x80\n>>>itertools.chain(*iterable)\n""""""\nlst = itertools.chain(\'hello\', \'world\', \'!\')\nprint type(lst)  # <type \'itertools.chain\'>\nprint list(lst)  # [\'h\', \'e\', \'l\', \'l\', \'o\', \'w\', \'o\', \'r\', \'l\', \'d\', \'!\']\n\n""""""\n\xe8\xbf\x94\xe5\x9b\x9e\xe6\x8c\x87\xe5\xae\x9a\xe9\x95\xbf\xe5\xba\xa6\xe7\x9a\x84\xe5\xba\x8f\xe5\x88\x97\xe4\xb8\xad\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6""\xe7\xbb\x84\xe5\x90\x88""(\xe6\x8e\x92\xe5\x88\x97\xe7\xbb\x84\xe5\x90\x88):\n>>>itertools.combinations(iterable, r)\n""""""\nlst1 = itertools.combinations(\'abc\', 2)\nprint list(lst1)  # [(\'a\', \'b\'), (\'a\', \'c\'), (\'b\', \'c\')]\n\n""""""\n\xe8\xbf\x94\xe5\x9b\x9e\xe6\x8c\x87\xe5\xae\x9a\xe9\x95\xbf\xe5\xba\xa6\xe7\x9a\x84\xe2\x80\x9c\xe7\xbb\x84\xe5\x90\x88\xe2\x80\x9d\xef\xbc\x8c\xe7\xbb\x84\xe5\x90\x88\xe5\x86\x85\xe5\x85\x83\xe7\xb4\xa0\xe5\x8f\xaf\xe9\x87\x8d\xe5\xa4\x8d:\n>>>itertools.combinations_with_replacement(iterable, r)\n""""""\nls2 = itertools.combinations_with_replacement(\'abc\', 2)\nprint list(ls2)\n'"
standard_library/study_logging.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-7-5 \xe4\xb8\x8b\xe5\x8d\x881:10\n# @Author         : Tom.Lee\n# @Description    : \n# @File           : study_logging.py\n# @Product        : PyCharm\n\n""""""\n\xe6\xb3\xa8\xe6\x84\x8f\xef\xbc\x9abasicConfig\xe6\x9c\x89\xe4\xb8\x80\xe4\xb8\xaa \xe5\xbe\x88\xe5\xa4\xa7\xe7\x9a\x84\xe7\xbc\xba\xe7\x82\xb9\xe3\x80\x82\n\xe8\xb0\x83\xe7\x94\xa8basicConfig\xe5\x85\xb6\xe5\xae\x9e\xe6\x98\xaf\xe7\xbb\x99root logger\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xba\x86\xe4\xb8\x80\xe4\xb8\xaahandler\xef\xbc\x8c\n\xe8\xbf\x99\xe6\xa0\xb7\xe5\xbd\x93\xe4\xbd\xa0\xe7\x9a\x84\xe7\xa8\x8b\xe5\xba\x8f\xe5\x92\x8c\xe5\x88\xab\xe7\x9a\x84\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x86 logging\xe7\x9a\x84\xe7\xac\xac\xe4\xb8\x89\xe6\x96\xb9\xe6\xa8\xa1\xe5\x9d\x97\xe4\xb8\x80\xe8\xb5\xb7\xe5\xb7\xa5\xe4\xbd\x9c\xe6\x97\xb6\xef\xbc\x8c\n\xe4\xbc\x9a\xe5\xbd\xb1\xe5\x93\x8d\xe7\xac\xac\xe4\xb8\x89\xe6\x96\xb9\xe6\xa8\xa1\xe5\x9d\x97\xe7\x9a\x84logger\xe8\xa1\x8c\xe4\xb8\xba\xe3\x80\x82\xe8\xbf\x99\xe6\x98\xaf\xe7\x94\xb1logger\xe7\x9a\x84\xe7\xbb\xa7\xe6\x89\xbf\xe7\x89\xb9\xe6\x80\xa7\xe5\x86\xb3\xe5\xae\x9a\xe7\x9a\x84\xe3\x80\x82\n""""""\n\nimport logging\nimport sys\n\nFORMAT_STR = ""[%(asctime)s] %(name)s:%(levelname)s: %(message)s""\n\n\n# logger = logging.getLogger(""django"")\n# logger.debug(logging.DEBUG)  # \xe4\xbd\xbf\xe7\x94\xa8django\xe7\x83\xad\xe5\x8a\xa0\xe8\xbd\xbd\n\n\ndef config1():\n    """"""\n    **********************Config 1**********************\n    """"""\n    # config 1.\n    # \xe8\xae\xbe\xe7\xbd\xae\xe9\xbb\x98\xe8\xae\xa4\xe7\x9a\x84level\xe4\xb8\xbaDEBUG\n    # \xe8\xae\xbe\xe7\xbd\xaelog\xe7\x9a\x84\xe6\xa0\xbc\xe5\xbc\x8f\n    # \xe6\xb3\xa8\xe6\x84\x8f\xef\xbc\x9abasicConfig\xe6\x9c\x89\xe4\xb8\x80\xe4\xb8\xaa \xe5\xbe\x88\xe5\xa4\xa7\xe7\x9a\x84\xe7\xbc\xba\xe7\x82\xb9\xe3\x80\x82\n    # \xe8\xb0\x83\xe7\x94\xa8basicConfig\xe5\x85\xb6\xe5\xae\x9e\xe6\x98\xaf\xe7\xbb\x99root logger\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xba\x86\xe4\xb8\x80\xe4\xb8\xaahandler\xef\xbc\x8c\n    # \xe8\xbf\x99\xe6\xa0\xb7\xe5\xbd\x93\xe4\xbd\xa0\xe7\x9a\x84\xe7\xa8\x8b\xe5\xba\x8f\xe5\x92\x8c\xe5\x88\xab\xe7\x9a\x84\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x86 logging\xe7\x9a\x84\xe7\xac\xac\xe4\xb8\x89\xe6\x96\xb9\xe6\xa8\xa1\xe5\x9d\x97\xe4\xb8\x80\xe8\xb5\xb7\xe5\xb7\xa5\xe4\xbd\x9c\xe6\x97\xb6\xef\xbc\x8c\n    # \xe4\xbc\x9a\xe5\xbd\xb1\xe5\x93\x8d\xe7\xac\xac\xe4\xb8\x89\xe6\x96\xb9\xe6\xa8\xa1\xe5\x9d\x97\xe7\x9a\x84logger\xe8\xa1\x8c\xe4\xb8\xba\xe3\x80\x82\xe8\xbf\x99\xe6\x98\xaf\xe7\x94\xb1logger\xe7\x9a\x84\xe7\xbb\xa7\xe6\x89\xbf\xe7\x89\xb9\xe6\x80\xa7\xe5\x86\xb3\xe5\xae\x9a\xe7\x9a\x84\xe3\x80\x82\n    logging.basicConfig(\n        level=logging.DEBUG,\n        format=""[%(asctime)s] %(name)s:%(levelname)s: %(message)s""\n    )\n\n    # \xe8\xae\xb0\xe5\xbd\x95log\n    logging.debug(\'debug\')\n    logging.info(\'info\')\n    logging.warn(\'warn\')\n    logging.error(\'error\')\n    logging.critical(\'critical\')\n\n\ndef config2():\n    """"""\n    ********************Config 2************************\n    """"""\n    # # config 2\n    # \xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x80\xe4\xb8\xaa\xe5\x90\x8d\xe5\xad\x97\xe4\xb8\xbafib\xe7\x9a\x84logger\n    logger = logging.getLogger(\'app_name\')\n    # \xe8\xae\xbe\xe7\xbd\xaelogger\xe7\x9a\x84level\xe4\xb8\xbaDEBUG\n    logger.setLevel(logging.DEBUG)\n    # \xe5\x88\x9b\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\xaa\xe8\xbe\x93\xe5\x87\xba\xe6\x97\xa5\xe5\xbf\x97\xe5\x88\xb0\xe6\x8e\xa7\xe5\x88\xb6\xe5\x8f\xb0\xe7\x9a\x84StreamHandler\n    handler = logging.StreamHandler()\n    formatter = logging.Formatter(\'[%(asctime)s] %(name)s:%(levelname)s: %(message)s\')\n    handler.setFormatter(formatter)\n    # \xe7\xbb\x99logger\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xb8\x8ahandler\n    logger.addHandler(handler)\n\n    logger.debug(\'debug message\')\n    logger.info(\'hello world\')\n\n\ndef config3():\n    """"""\n    config3 \xe8\xbe\x93\xe5\x87\xba\xe5\x88\xb0\xe6\x96\x87\xe4\xbb\xb6\n    """"""\n    # \xe8\x8e\xb7\xe5\x8f\x96logger\xe5\xae\x9e\xe4\xbe\x8b\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xba\xe7\xa9\xba\xe5\x88\x99\xe8\xbf\x94\xe5\x9b\x9eroot logger\n    logger = logging.getLogger(""AppName"")\n    # \xe6\x8c\x87\xe5\xae\x9alogger\xe8\xbe\x93\xe5\x87\xba\xe6\xa0\xbc\xe5\xbc\x8f\n    formatter = logging.Formatter(FORMAT_STR)\n    # \xe6\x96\x87\xe4\xbb\xb6\xe6\x97\xa5\xe5\xbf\x97\n    file_handler = logging.FileHandler(""test.log"")\n    file_handler.setFormatter(formatter)  # \xe5\x8f\xaf\xe4\xbb\xa5\xe9\x80\x9a\xe8\xbf\x87setFormatter\xe6\x8c\x87\xe5\xae\x9a\xe8\xbe\x93\xe5\x87\xba\xe6\xa0\xbc\xe5\xbc\x8f\n    # \xe6\x8e\xa7\xe5\x88\xb6\xe5\x8f\xb0\xe6\x97\xa5\xe5\xbf\x97\n    console_handler = logging.StreamHandler(sys.stdout)\n    console_handler.formatter = formatter  # \xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x9b\xb4\xe6\x8e\xa5\xe7\xbb\x99formatter\xe8\xb5\x8b\xe5\x80\xbc\n    # \xe4\xb8\xbalogger\xe6\xb7\xbb\xe5\x8a\xa0\xe7\x9a\x84\xe6\x97\xa5\xe5\xbf\x97\xe5\xa4\x84\xe7\x90\x86\xe5\x99\xa8\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe6\x97\xa5\xe5\xbf\x97\xe5\xa4\x84\xe7\x90\x86\xe5\x99\xa8\xe8\xae\xa9\xe5\x85\xb6\xe8\xbe\x93\xe5\x87\xba\xe5\x88\xb0\xe5\x85\xb6\xe4\xbb\x96\xe5\x9c\xb0\xe6\x96\xb9\n    logger.addHandler(file_handler)\n    logger.addHandler(console_handler)\n    # \xe6\x8c\x87\xe5\xae\x9a\xe6\x97\xa5\xe5\xbf\x97\xe7\x9a\x84\xe6\x9c\x80\xe4\xbd\x8e\xe8\xbe\x93\xe5\x87\xba\xe7\xba\xa7\xe5\x88\xab\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xbaWARN\xe7\xba\xa7\xe5\x88\xab\n    logger.setLevel(logging.INFO)\n\n    # \xe8\xbe\x93\xe5\x87\xba\xe4\xb8\x8d\xe5\x90\x8c\xe7\xba\xa7\xe5\x88\xab\xe7\x9a\x84log\n    logger.debug(\'this is debug info\')\n    logger.info(\'this is information\')\n    logger.warn(\'this is warning message\')\n    logger.error(\'this is error message\')\n    logger.fatal(\'this is fatal message, it is same as logger.critical\')\n    logger.critical(\'this is critical message\')\n\n\n\n# if __name__ == \'__main__\':\n\n'"
standard_library/study_os.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-4-19 \xe4\xb8\x8a\xe5\x8d\x8811:02\n# @Author         : Tom.Lee\n# @Description    : \n# @File           : helper_os.py\n# @Product        : PyCharm\nimport commands\nimport os\nimport sys\n\n\ndef shell():\n    command_ls = \'ls -al /opt\'\n    command_docker = \'docker ps -a\'\n\n    # \xe4\xbd\xbf\xe7\x94\xa8os.system()\xe6\xa8\xa1\xe5\x9d\x97\n    ros = os.system(command_ls)\n    print \'\\n\\nos.system() : \', ros\n\n    # \xe4\xbd\xbf\xe7\x94\xa8os.popen()\xe6\xa8\xa1\xe5\x9d\x97\n    output = os.popen(command_docker)\n    result = output.read()\n    print \'\\n\\nos.popen() : \', result\n\n    # \xe4\xbd\xbf\xe7\x94\xa8commands\xe6\xa8\xa1\xe5\x9d\x97\n    (status, output) = commands.getstatusoutput(command_docker)\n    print \'\\n\\ncommands : \', status, output\n\n\ndef deep_look_dir(dir_path, deep=1, console_full_path=False):\n    """"""\n    deep_look_dir(dir_name, console_full_path=False)\n\n    \xe9\x81\x8d\xe5\x8e\x86\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe4\xb8\x8b\xe6\x89\x80\xe6\x9c\x89\xe6\x96\x87\xe4\xbb\xb6\n    :param dir_path:  os.path.dirname(__file__)\n    :param deep:\n    :param console_full_path:\n    :return:\n    """"""\n    if deep == 1:\n        print dir_path\n\n    files = os.listdir(dir_path)\n    split_symbol = \'\xef\xbd\x9c\xef\xbc\xbf\' * deep if deep == 1 else \'\xef\xbd\x9c\' + \'\xe3\x80\x80\' * (deep - 1) + \'\xef\xbd\x9c\xef\xbc\xbf\'\n\n    for f in files:\n        f_path = os.path.join(dir_path, f)\n        console_name = f_path if console_full_path else f\n\n        if not os.path.isfile(f_path):\n            print ""{sp} {dir_path}/: "".format(\n                sp=split_symbol,\n                dir_path=console_name)\n            num = deep + 1\n            deep_look_dir(f_path, num, console_full_path)\n\n        else:\n            print split_symbol, console_name\n\n\nif \'__main__\' == __name__:\n   deep_look_dir(\'/root/pythonStudy\')\n'"
standard_library/study_regular_expression.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-11 \xe4\xb8\x8a\xe5\x8d\x8811:56\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : *regular_expression.py\n# @Product        : PyCharm\n# @docs           : http://www.cnblogs.com/dreamer-fish/p/5282679.html\n\nimport re\n\n""""""\n\xe6\xad\xa3\xe5\x88\x99\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f: r\'[...]\'\xe3\x80\x80,[]\xe5\x86\x85\xe4\xb8\xba\xe8\xa6\x81\xe5\x8c\xb9\xe9\x85\x8d\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xef\xbc\x8c\xe7\x94\xa8""|""\xe6\x9d\xa5\xe8\xa1\xa8\xe7\xa4\xba\xe5\xa4\x9a\xe7\xa7\x8d\xe5\x8c\xb9\xe9\x85\x8d\n\n1.\xe7\x89\xb9\xe6\xae\x8a\xe7\xac\xa6\xe5\x8f\xb7\xe4\xbd\xbf\xe7\x94\xa8""\\""\xe8\xbd\xac\xe4\xb9\x89\xef\xbc\x9a\xe3\x80\x80""["" --> ""\\[""\n2.\xe6\x9b\xbf\xe6\x8d\xa2\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xef\xbc\x9a\xe5\xb0\x86123\xe6\x9b\xbf\xe6\x8d\xa2\xe4\xb8\xba\xe7\xa9\xba re.compile(r\'[123]\').sub(\'\', str)\n3.\xe6\x9f\xa5\xe6\x89\xbe\xe7\x89\xb9\xe6\xae\x8a\xe5\xad\x97\xe7\xac\xa6\xef\xbc\x9a \xe4\xbd\xbf\xe7\x94\xa8r\'[...]\'\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x80\xe7\xbb\x84\xe5\xad\x97\xe7\xac\xa6,\xe5\x8d\x95\xe7\x8b\xac\xe5\x88\x97\xe5\x87\xba\xef\xbc\x9a[amk] \xe5\x8c\xb9\xe9\x85\x8d \'a\'\xef\xbc\x8c\'m\'\xe6\x88\x96\'k\'\n\n""""""\n\n# **********************\xe6\x9b\xbf\xe6\x8d\xa2\xe5\xad\x97\xe7\xac\xa6***********************\n#\n#   re.compile(r\'[...]\').sub(\'\', str)\n#\n# **********************\xe6\x9b\xbf\xe6\x8d\xa2\xe5\xad\x97\xe7\xac\xa6***********************\n\n\n# 1.\xe5\x8e\xbb\xe6\x8e\x89\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe4\xb8\xad\xe6\x97\xa0\xe7\x94\xa8\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6 ""[u\'"",""\'"", ""u\'"" ,""\']""\ns = ""[u\'node-2.domain.tld\', u\'node-1.domain.tld\']""\ns1 = re.compile(r""[\\[u\'|\'\\]| u\']"").sub(\'\', s).split(\',\')\nprint s1, type(s1)  # [\'node-2.domain.tld\', \'node-1.domain.tld\'] <type \'list\'>\n\n# 2.\xe6\x9b\xbf\xe6\x8d\xa2\xe7\xa9\xba\xe6\xa0\xbc\xe4\xb8\xba\'--\'\nprint re.compile(r\'\\s\').sub(\'--\', \'1234 56 \')  # 1234--56--\n\n# **********************\xe5\x8c\xb9\xe9\x85\x8d\xe6\x9f\xa5\xe6\x89\xbe\xe5\xad\x97\xe7\xac\xa6***********************\n#\n#   re.findall(r\'*\', content)\xe3\x80\x80\xe9\xbb\x98\xe8\xae\xa4\xe5\x8c\xb9\xe9\x85\x8d\xe6\xaf\x8f\xe4\xb8\x80\xe8\xa1\x8c\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe4\xb8\xba\xe6\x9f\xa5\xe6\x89\xbe\xe5\xaf\xb9\xe8\xb1\xa1\n#   re.findall(r\'[\\d+]\', s, re.S) \xe5\x8c\xb9\xe9\x85\x8d\xe6\x97\xb6\xe4\xbb\xa5\xe6\x95\xb4\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe4\xb8\xba\xe6\x9f\xa5\xe6\x89\xbe\xe5\xaf\xb9\xe8\xb1\xa1\n#\n# **********************\xe5\x8c\xb9\xe9\x85\x8d\xe6\x9f\xa5\xe6\x89\xbe\xe5\xad\x97\xe7\xac\xa6***********************\n\n# 1.\xe6\x8f\x90\xe5\x8f\x96\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xad\xe7\x9a\x84\xe6\x95\xb0\xe5\xad\x97\ns = \'123abc456@#$%^7890\'\nprint re.findall(r\'[\\d+]\', s)  # [\'1\', \'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'0\']\nprint re.findall(r\'\\d+\', s, re.S)  # [\'123\', \'456\', \'7890\']\n\n# 2.\xe5\x8c\xb9\xe9\x85\x8dCidr  172.16.6.18/24\nprint re.findall(r\'(?<![\\.\\d])(?:\\d{1,3}\\.){3}\\d{1,3}(?![\\.\\d])/24\', s, re.S)\n# 3.\xe5\x8c\xb9\xe9\x85\x8duuid  c6aa9c38-ccee-467f-9a1e-c718a33ecc06\nprint re.findall(r\'([a-f\\d]{8}-[a-f\\d]{4}-[a-f\\d]{4}-[a-f\\d]{4}-[a-f\\d]{12})\', s, re.S)\n\ns = ""You are not permitted to modify \'architecture\' on this image.""\n# 4.\xe5\x8c\xb9\xe9\x85\x8d\xe5\x8d\x95\xe5\xbc\x95\xe5\x8f\xb7\xe4\xb9\x8b\xe5\x86\x85\xe7\x9a\x84\xe5\x80\xbc\xe3\x80\x80(?<=\').*?(?=\')\nprint re.findall(r""(?<=\').*?(?=\')"", s, re.S)  # [\'architecture\']\n'"
standard_library/study_socket.py,0,"b""#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-4-19 \xe4\xb8\x8a\xe5\x8d\x8810:58\n# @Author         : Tom.Lee\n# @Description    : \n# @File           : socket.py\n# @Product        : PyCharm\nimport socket\nimport threading\nimport time\n\n\nclass Server(object):\n    NUMBER = 0\n\n    def __init__(self, ip, port, message='hello'):\n        self.__ip = ip\n        self.__port = port\n        self.__message = message\n\n    def start(self):\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.bind((self.__ip, self.__port))\n        s.listen(0)\n\n        def run(**kwargs):\n            num = self.NUMBER\n            client = kwargs.get('client')\n            print self.NUMBER, client, client.recv(1024)\n            time.sleep(10)\n            client.sendall('%s:%d' % (self.__message, num))\n            client.close()\n\n        while True:\n            client, addr = s.accept()\n            if client:\n                self.NUMBER += 1\n                threading.Thread(target=run, name='T%d' % self.NUMBER,\n                                 kwargs={'client': client}).start()\n\n\nclass Client(object):\n    def __init__(self, ip, port, message='hi'):\n        self.__ip = ip\n        self.__port = port\n        self.__message = message\n\n    def start(self):\n        c = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        c.connect((self.__ip, self.__port))\n        c.send(self.__message)\n        print c.recv(1024)\n        c.close()\n\n\nif __name__ == '__main__':\n    server = Server('127.0.0.1', 1000)\n    server.start()\n"""
contributed_modules/mongodb/mongodb_utils.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-6-13 \xe4\xb8\x8b\xe5\x8d\x8812:56\n# @Author         : Tom.Lee\n# @Docs           : http://www.cnblogs.com/hhh5460/p/5838516.html\n# @File           : mongodb.py\n# @Product        : PyCharm\nimport pymongo\n\n\nclass _Mongodb(object):\n    def __init__(self,\n                 host=None,\n                 port=None,\n                 document_class=dict,\n                 tz_aware=None,\n                 connect=None,\n                 **kwargs):\n        self.__mongodb = pymongo.MongoClient(\n            host, port, document_class, tz_aware, connect, **kwargs)\n\n    @property\n    def mongodb_client(self):\n        return self.__mongodb\n\n\nclass MongodbUtils(object):\n    def __init__(self,\n                 host=None,\n                 port=None,\n                 document_class=dict,\n                 tz_aware=None,\n                 connect=None,\n                 **kwargs):\n        self.__mongodb_client = _Mongodb(\n            host=host,\n            port=port,\n            document_class=document_class,\n            tz_aware=tz_aware,\n            connect=connect,\n            **kwargs).mongodb_client\n        self.__database = None\n        self.__collection = None\n\n    @property\n    def mongodb_client(self):\n        return self.__mongodb_client\n\n    @property\n    def mongodb_database(self):\n        assert self.__database\n        return self.__database\n\n    @property\n    def mongodb_collection(self):\n        assert self.__collection\n        return self.__collection\n\n    def use_db(self, db):\n        """"""\n        \xe5\x88\x87\xe6\x8d\xa2\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93 > use tom_db\n\n        :param db:\n        :return:\n        """"""\n        self.__database = self.db_create_or_get(db)\n        return self\n\n    def use_collection(self, collection, db=None):\n        """"""\n        \xe4\xbd\xbf\xe7\x94\xa8\xe8\xa1\xa8\xe6\x93\x8d\xe4\xbd\x9c > db.tom_table\n\n        :param collection:\n        :param db:\n        :return:\n        """"""\n        if db:\n            self.__database = self.db_create_or_get(db)\n        self.__collection = self.mongodb_database[collection]\n        return self\n\n    def db_list(self):\n        """"""\n        \xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xe5\x88\x97\xe8\xa1\xa8 show dbs\n\n        :return: [\'db1\',\'db2\']\n        """"""\n        return self.mongodb_client.database_names()\n\n    def db_exists(self, db_name):\n        """"""\n        :param db_name:\n        :return: True/False\n        """"""\n        return db_name in self.db_list()\n\n    def db_create_or_get(self, db_name):\n        """"""\n        \xe5\x88\x9b\xe5\xbb\xba\xe6\x88\x96\xe4\xbd\xbf\xe7\x94\xa8\n        > use tom_db\n        > db.createCollection(\'table1\') # \xe7\xac\xac\xe4\xba\x8c\xe6\xad\xa5\xe5\xbc\x80\xe5\xa7\x8b\xe5\x88\x9b\xe5\xbb\xba\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\n\n        :param db_name:\n        :return: __mongodb.get_database(db_name)\n        """"""\n        # self.mongodb_client.get_database(db_name)\n\n        return self.mongodb_client[db_name]\n\n    def db_delete(self, db_name):\n        """"""\n        \xe5\x88\xa0\xe9\x99\xa4\n        > use tom_db\n        > db.dropDatabase()\n\n        :param db_name:\n        :return:\n            error  :  {u\'code\': 26, u\'ok\': 0.0, u\'errmsg\': u\'ns not found\'}\n            success:  {u\'ns\': u\'tom_db.tom_table\', u\'ok\': 1.0, u\'nIndexesWas\': 1}\n        """"""\n        return self.mongodb_client.drop_database(db_name)\n\n    def collection_list(self):\n        """"""\n        \xe8\xa1\xa8(\xe6\x96\x87\xe6\xa1\xa3)\xe5\x88\x97\xe8\xa1\xa8 > show tables\n        :return:\n        """"""\n        return self.mongodb_database.collection_names()\n\n    def collection_create_or_get(self, collection_name):\n        """"""\n        \xe5\x88\x9b\xe5\xbb\xba\xe6\x88\x96\xe8\x8e\xb7\xe5\x8f\x96\xe8\xa1\xa8 createCollection(\'table1\')\n\n        :param collection_name:\n        :return:\n        """"""\n        return self.mongodb_database[collection_name]\n\n    def collection_exists(self, collection_name):\n        """"""\n        \xe9\x9b\x86\xe5\x90\x88\xe6\x98\xaf\xe5\x90\xa6\xe5\xad\x98\xe5\x9c\xa8\n        :param collection_name:\n        :return:\n        """"""\n        return collection_name in self.collection_list()\n\n    def collection_delete(self, collection_name):\n        """"""\n        \xe5\x88\xa0\xe9\x99\xa4\xe9\x9b\x86\xe5\x90\x88 db.tom_table2.drop()\n\n        :param collection_name:\n        :return:\n        """"""\n        return self.mongodb_database.drop_collection(collection_name)\n\n    def document_count(self, filter_=None):\n        """"""\n        db.tom_table.count()\n\n        :param filter_:{\'name\':\'zs\'}\n        :return:\n        """"""\n        return self.mongodb_collection.count(filter=filter_)\n\n    def document_find(self, *args, **kwargs):\n        """"""\n        db.tom_table.find({\'seq\':\'_seq_7\'})\n\n        :param args:\n        :param kwargs:{\'seq\':\'_seq_7\'}\n        :return:\n        """"""\n        return self.mongodb_collection.find(*args, **kwargs)\n\n    def document_insert(self, dict_item):\n        """"""\n        db.tom_table.insert({\'name\':\'jack\'})\n\n        :param dict_item: {\'name\':\'jack\'}\n        :return:\n        """"""\n        return self.mongodb_collection.insert(dict_item)\n\n    def document_drop(self):\n        """"""\n        \xe5\x88\xa0\xe9\x99\xa4\xe5\x85\xa8\xe9\x83\xa8\xe6\x96\x87\xe6\xa1\xa3\n        :return:\n        """"""\n        return self.mongodb_collection.drop()\n\n    def document_delete(self, filter_, collation=None):\n        """"""\n        db.tom_table.deleteOne({\'seq\':\'_seq_7\'})\n\n        :param filter_: {\'name\':\'jack\'}\n        :param collation:\n        :return:\n        """"""\n        result = self.mongodb_collection.delete_one(filter_, collation)\n        return result.delete_count > 0\n\n    def document_delete_list(self, filter_, collation=None):\n        """"""\n        db.tom_table.deleteMany({\'seq\':\'_seq_7\'})\n\n        :param filter_: {\'seq\':\'_seq_7\'}\n        :param collation:\n        :return:\n        """"""\n        self.mongodb_collection.delete_many(filter_, collation)\n        return self.document_count(filter_) == 0\n'"
contributed_modules/redis/redis_helper.py,0,"b'# -*- encoding:utf-8 -*-\n\n\nimport redis\n\n\nclass RedisHelper(object):\n    def __init__(self, port=6379, host=\'127.0.0.1\'):\n        self.port = port\n        self.host = host\n        self.__conn = redis.Redis(host=self.host, port=self.port)\n\n    def set(self, key, value):\n        assert key\n        self.__conn.set(key, value)\n        return True\n\n    def get(self, key):\n        assert key\n        return self.__conn.get(key)\n\n    def keys(self, pattern=\'*\'):\n        return self.__conn.keys(pattern)\n\n    def delete(self, *keys):\n        return self.delete(keys)\n\n    def subscribe(self, chanel):\n        assert chanel\n        pub = self.__conn.pubsub()\n        pub.subscribe(chanel)\n        if pub.parse_response():  # first validate connection\n            # return chanel\n            return pub\n        return None\n\n    def publish(self, chanel, message):\n        assert chanel and message\n        self.__conn.publish(chanel, message)\n        return True\n\n\n""""""\nTEST\n""""""\nif __name__ == \'__main__\':\n    r = RedisHelper()\n    r.publish(\'fm001\', 1)\n    pub = r.subscribe(\'fm001\')\n    print pub\n    while True:\n        result = pub.parse_response()\n        print result[2]\n'"
contributed_modules/redis/redis_test.py,0,"b'# -*- encoding:utf-8 -*-\n\nimport redis\n\nredis_client = redis.Redis()\nprint redis_client\n\n\ndef add_str(k, v):\n    """"""\n    \xe6\xb7\xbb\xe5\x8a\xa0\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n    :param k:\xe9\x94\xae\n    :param v:\xe5\x80\xbc\n    :return:\n    """"""\n    redis_client.set(k, v)\n\n\ndef get_str(k):\n    """"""\n    \xe8\x8e\xb7\xe5\x8f\x96\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n    :param k:\xe9\x94\xae\n    :return:\n    """"""\n    return redis_client.get(k)\n\n\ndef add_llist(k, l):\n    """"""lpush \xe5\x80\x92\xe5\xba\x8f\xe8\xbf\x94\xe5\x9b\x9e""""""\n    redis_client.lpush(k, l)\n\n\ndef add_rlist(k, l):\n    """"""rpush \xe9\xa1\xba\xe5\xba\x8f\xe8\xbf\x94\xe5\x9b\x9e""""""\n    redis_client.rpush(k, l)\n\n\ndef get_list(k, start=0, end=-1):\n    """"""\n    redis_client.lrange(\'list_descsort\',0,-1)\n    :param k:\n    :param start:\n    :param end:\n    :return:\n    """"""\n    return redis_client.lrange(k, start, end)\n\n\ndef get_keys(pattern=\'*\'):\n    """"""\n    :param pattern: \'list*\'\n    :return:\n    """"""\n    return redis_client.keys(pattern)\n\n\ndef delete_key(*keys):\n    redis_client.delete(keys)\n\n\ndef redis_subscribe(chanel_name):\n    """"""\n    redis\xe3\x80\x80\xe8\xae\xa2\xe9\x98\x85\xe9\xa2\x91\xe9\x81\x93\n    :param chanel_name:\n    :return:\n    """"""\n    pub = redis_client.pubsub()\n    pub.subscribe(chanel_name)\n    if pub.parse_response():\n        return pub\n    else:\n        return None\n\n\ndef redis_publish(chanel_name, **kwargs):\n    """"""\n    \xe5\x8f\x91\xe5\xb8\x83\xe6\xb6\x88\xe6\x81\xaf\n    :param chanel_name:\n    :param kwargs:\n    :return:\n    """"""\n    redis_client.publish(chanel_name, kwargs)\n\n\n# redis publish and subscribe\n# publish message\n\'\'\'\nfor i in range(10):\n    redis_client.publish(\'fm101\', \'hello i am %d\' % i)\n\'\'\'\n# subscribe chanel\n\'\'\'\npub = redis_client.pubsub()\npub.subscribe(\'fm101\')\nwhile True:\n    print pub.parse_response()\n\'\'\'\n\nif __name__ == \'__main__\':\n    import time\n\n    for i in range(10):\n        time.sleep(2)\n        redis_publish(\'fm001\', k=\'hello\')\n'"
contributed_modules/requests/__init__.py,0,b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 17-4-23 \xe4\xb8\x8b\xe5\x8d\x8811:14\n# @Author  : tom.lee\n# @Site    : \n# @File    : __init__.py.py\n# @Software: PyCharm'
contributed_modules/requests/restful.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-9-2 \xe4\xb8\x8a\xe5\x8d\x8811:32\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : restful.py\n# @Product        : PyCharm\n# @Docs           : \n# @Source         : \n\nimport requests\n\n\ndef json_console_format(s):\n    import json\n    return json.dumps(s, indent=5)\n\n\nclass TestCase(object):\n    @classmethod\n    def _response(cls, res):\n        try:\n            return res.status_code, json_console_format(res.json())\n        except (ValueError, Exception):\n            return res.status_code, res.content\n\n    def get(self, url, params=None, **kwargs):\n        res = requests.get(url=url, params=params, verify=False, **kwargs)\n        return self._response(res)\n\n    def post(self, url, data=None, body=None, **kwargs):\n        res = requests.post(url, data=data, json=body, verify=False, **kwargs)\n        return self._response(res)\n\n    def put(self, url, data=None, body=None, **kwargs):\n        res = requests.put(url, data=data, json=body, verify=False, **kwargs)\n        return self._response(res)\n\n    def delete(self, url, **kwargs):\n        res = requests.delete(url, verify=False, **kwargs)\n        return self._response(res)\n\n    def head(self, url, headers=None, **kwargs):\n        res = requests.head(url, headers=headers or {}, verify=False, **kwargs)\n        return self._response(res)\n\n    def patch(self, url, data=None, body=None, **kwargs):\n        res = requests.patch(url, data=data, json=body, verify=False, **kwargs)\n        return self._response(res)\n\n'"
contributed_modules/requests/test.py,0,"b""#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-7-25 \xe4\xb8\x8b\xe5\x8d\x883:08\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : test.py\n# @Product        : PyCharm\n\nfrom restful import TestCase\n\n\nif __name__ == '__main__':\n    t = TestCase()\n    base_url = 'http://0.0.0.0:9091'\n\n    # # get job list\n    # print t.get(base_url + '/jobList')[1]\n    # # get user list\n    print t.get(base_url + '/jobs')[1]\n    # add user\n    # data = {'name': 'node-16', 'status': 'AVAILABLE'}\n    # print t.post(base_url + '/nodes', data=data)[1]\n\n    # edit user\n    # data = {'job_id': 'node01-tick', 'status': 'pause'}\n    # print t.put(base_url + '/jobs', data=data)[1]\n\n    # delete user\n    # data = {'user_id': 5}\n    # print t.delete(base_url + '/mailUsers', data=data)[1]\n"""
contributed_modules/requests/utils.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-11 \xe4\xb8\x8a\xe5\x8d\x8811:29\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : utils.py\n# @Product        : PyCharm\n\n\nimport requests\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\n\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\nopenSSL_error = ""\'X509\' object has no attribute \'_x509\'""\n\n\ndef http_inspect(func):\n    def wrapper(*args, **kwargs):\n        try:\n            return func(*args, **kwargs)\n        except requests.exceptions.Timeout:\n            raise ConnectionError(\'\xe8\xbf\x9e\xe6\x8e\xa5\xe8\xb6\x85\xe6\x97\xb6\')\n        except requests.exceptions.RequestException:\n            raise ConnectionError(\'\xe8\xaf\xb7\xe6\xb1\x82\xe5\xa4\xb1\xe8\xb4\xa5\')\n        except Exception, e:\n            if e.message == openSSL_error:\n                print """"""package error, please execute :\n                pip install -U pyOpenSSL""""""\n            raise ConnectionError(\'\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xa4\xb1\xe8\xb4\xa5\')\n\n    return wrapper\n\n\nclass ConnectionError(Exception):\n    """"""\n    \xe6\x9c\x8d\xe5\x8a\xa1\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xa4\xb1\xe8\xb4\xa5\n    """"""\n    pass\n\n\nclass RequestsUtils(object):\n    user_agent = \'Mozilla/5.0 (X11; Linux x86_64) \' \\\n                 \'AppleWebKit/537.36 (KHTML, like Gecko) \' \\\n                 \'Ubuntu Chromium/50.0.2661.102 \' \\\n                 \'Chrome/50.0.2661.102 Safari/537.36\'\n\n    def __init__(self, headers=None, cookies=None, timeout=3, proxies=None, verify=False):\n        self.headers = headers\n        self.cookies = cookies\n        self.timeout = timeout\n        self.proxies = proxies\n        self.verify = verify\n\n    def _make_headers(self):\n        headers = self.headers or {}\n        if not headers.get(\'User-Agent\'):\n            headers[\'User-Agent\'] = self.user_agent\n        if self.cookies:\n            headers[\'Cookie\'] = self.cookies\n        return headers\n\n    @http_inspect\n    def get(self, url, params=None):\n        return requests.get(url,\n                            params=params,\n                            headers=self._make_headers(),\n                            timeout=self.timeout,\n                            proxies=self.proxies,\n                            verify=self.verify)\n\n\nif __name__ == \'__main__\':\n    req = RequestsUtils()\n    print req.get(\'http://192.168.1.111:8088/web\')\n'"
crawlers/spider/__init__.py,0,"b'""""""\n pip install beautifulsoup4\n docs: https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html#\n""""""'"
crawlers/spider/downloader.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 17-4-19 \xe4\xb8\x8b\xe5\x8d\x8810:26\n# @Author  : tom.lee\n# @Site    : \n# @File    : downloader.py\n# @Software: PyCharm\nimport logging\nimport requests\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\n\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n\n\n# from .tools import Dir\n\n\nclass HtmlDownloader(object):\n    openSSL_error = ""\'X509\' object has no attribute \'_x509\'""\n    user_agent = \'Mozilla/5.0 (X11; Linux x86_64) \' \\\n                 \'AppleWebKit/537.36 (KHTML, like Gecko) \' \\\n                 \'Ubuntu Chromium/50.0.2661.102 \' \\\n                 \'Chrome/50.0.2661.102 Safari/537.36\'\n\n    def __init__(self, headers=None, cookies=None, timeout=10, proxies=None, verify=False):\n        self.headers = headers\n        self.cookies = cookies\n        self.timeout = timeout\n        self.proxies = proxies\n        self.verify = verify\n\n    def _make_headers(self):\n        headers = self.headers or {}\n        if not headers.get(\'User-Agent\'):\n            headers[\'User-Agent\'] = self.user_agent\n        if self.cookies:\n            headers[\'Cookie\'] = self.cookies\n        return headers\n\n    def _request(self, url):\n        try:\n            resp = requests.get(\n                url, headers=self._make_headers(), timeout=self.timeout,\n                proxies=self.proxies, verify=self.verify)\n            return resp.status_code, resp.content\n        except requests.exceptions.Timeout:\n            logging.error(\'requests timeout: %s\' % url)\n            return 502, None\n        except requests.exceptions.RequestException:\n            logging.error(\'requests RequestException: %s\' % url)\n            return 500, None\n        except Exception, e:\n            if e.message == self.openSSL_error:\n                print """"""package error, please execute :\n                pip install -U pyOpenSSL""""""\n            else:\n                logging.error(\'requests unKnow error: %s\' % url)\n            return 500, None\n\n    def download(self, url, retry=-1):\n        """"""\n        :param url:\n        :param retry: \xe5\xa4\xb1\xe8\xb4\xa5\xe9\x87\x8d\xe8\xaf\x95\n        :return:\n        """"""\n        code, content = self._request(url)\n        if retry > 0 and code != 200:\n            self.download(url, retry - 1)\n        return content if code == 200 else \'\'\n\n'"
crawlers/spider/main.py,0,"b""#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 17-4-21 \xe4\xb8\x8a\xe5\x8d\x8812:36\n# @Author  : tom.lee\n# @Site    : \n# @File    : main.py\n# @Software: PyCharm\nfrom downloader import HtmlDownloader\nfrom parser import HtmlParser\nfrom urlsmanager import URLSManager\nfrom writer import FileWriter\nfrom tools import Decorator\nfrom proxypools import Proxy, ProxiesPool\n\n\nclass SpiderWorker(object):\n    def __init__(self, url, size=20):\n        self.url = url\n        self.pool = ProxiesPool()\n        self.parser = HtmlParser(url)\n        self.url_manager = URLSManager(url_pattern=url, size=size)\n        self.writer = FileWriter()\n\n    @Decorator.time\n    def start(self):\n        self.url_manager.add_url(self.url)\n        while self.url_manager.has_next():\n            hd = HtmlDownloader(proxies=self.pool.get_proxy_ip())\n            url = self.url_manager.get_url()\n            data = hd.download(url)\n            urls = self.parser.simple_tags(data, 'a', attributes=['href'])\n            self.url_manager.add_urls([url_.get('href') for url_ in urls])\n            title = self.parser.element(data, 'title')\n            title = title.getText() if title else 'unknown'\n            self.writer.load_data('[%s] %s' % (title, url))\n        self.writer.writer()\n\np=Proxy()\np.start()\nSpiderWorker('http://www.jikexueyuan.com/').start()\np.join()"""
crawlers/spider/parser.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 17-4-19 \xe4\xb8\x8b\xe5\x8d\x8810:10\n# @Author  : tom.lee\n# @Site    : \xe8\xa7\xa3\xe6\x9e\x90\xe5\x99\xa8\n# @File    : parser.py\n# @Software: PyCharm\n\n\n\nimport urlparse\n\nimport bs4\n\n\nclass HtmlParser(object):\n    """"""\n    \xe7\xbd\x91\xe9\xa1\xb5\xe8\xa7\xa3\xe6\x9e\x90\xe5\x99\xa8\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe7\xbb\xa7\xe6\x89\xbf\xe6\xad\xa4\xe7\xb1\xbb\xef\xbc\x8c\xe5\xae\x9e\xe7\x8e\xb0\xe6\x9b\xb4\xe5\xa4\x8d\xe6\x9d\x82\xe5\x8a\x9f\xe8\x83\xbd\n    """"""\n    url_filed = \'href\'\n    parser = \'html.parser\'\n    encoding = \'utf-8\'\n\n    def __init__(self, base_url=None):\n        self.__base_url = base_url\n\n    def simple_tags(self, data, tag=None, patterns=None, attributes=None):\n        """"""\n        \xe5\x8d\x95\xe4\xb8\xaa\xe6\xa0\x87\xe7\xad\xbe\xe8\xa7\xa3\xe6\x9e\x90\n        """"""\n        tags = self.__parser_tags(data, tag, patterns)\n        return self.__tags(tags, attributes)\n\n    def multilevel_tags(self, data, multilevel_patterns=None, attributes=None):\n        """"""\n        \xe5\xa4\x9a\xe6\xa0\x87\xe7\xad\xbe\xe8\xa7\xa3\xe6\x9e\x90\n        """"""\n        if not multilevel_patterns:\n            return data\n\n        for tag_patterns in multilevel_patterns:\n            tag, patterns = tag_patterns.items()[0]\n            data = self.__parser_tags(data, tag, patterns)\n            multilevel_patterns.remove(tag_patterns)\n\n            if not multilevel_patterns:\n                return self.__tags(data, attributes)\n\n            return self.multilevel_tags(data, multilevel_patterns, attributes)\n\n    def element(self, data, tag=None, patterns=None):\n        """"""\n        \xe6\x9f\xa5\xe8\xaf\xa2\xe7\xac\xa6\xe5\x90\x88\xe6\x9d\xa1\xe4\xbb\xb6\xe7\x9a\x84\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe6\xa0\x87\xe7\xad\xbe\xe5\x85\x83\xe7\xb4\xa0\n        """"""\n        elements = self.elements(data, tag, patterns)\n        return elements[0] if elements else None\n\n    def elements(self, data, tag=None, patterns=None):\n        return self.__parser_tags(data, tag, patterns)\n\n    def __tags(self, data, attributes=None):\n        tags = [dict(tag_.attrs, text=\'%s\'.encode(self.encoding) % tag_.getText())\n                for tag_ in data]\n\n        if not attributes:\n            return tags\n\n        for tag_attr in tags:\n            for k, v in tag_attr.items():\n                if k in attributes:\n                    continue\n                tag_attr.pop(k)\n\n        if self.__base_url:\n            return self.__format_url(tags)\n\n        return tags\n\n    def __parser_tags(self, data, tag=None, patterns=None):\n        return self.__data_parser(data).find_all(tag, patterns)\n\n    def __data_parser(self, data):\n        return bs4.BeautifulSoup(str(data), self.parser, from_encoding=self.encoding)\n\n    def __format_url(self, maps):\n        for m in maps:\n            if not m.get(self.url_filed):\n                continue\n            m[self.url_filed] = urlparse.urljoin(self.__base_url, m.get(self.url_filed))\n        return maps\n'"
crawlers/spider/proxypools.py,0,"b""#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 17-4-22 \xe4\xb8\x8b\xe5\x8d\x8811:04\n# @Author  : tom.lee\n# @Site    : \xe4\xbb\xa3\xe7\x90\x86\xe6\xb1\xa0\n# @File    : proxyspools.py\n# @Software: PyCharm\nimport logging\nimport re\nimport threading\nimport time\nimport random\n\nfrom tools import ReThread\nfrom downloader import HtmlDownloader\nfrom parser import HtmlParser\n\nlock = threading.Lock()\n\n\nclass ProxiesPool(object):\n    __instance = None\n    __pool = []\n\n    def __new__(cls, *args):\n        if not ProxiesPool.__instance:\n            try:\n                lock.acquire()\n                if not ProxiesPool.__instance:\n                    ProxiesPool.__instance = object.__new__(cls, *args)\n            except Exception, e:\n                logging.error('ProxiesPool: init error : %s' % e)\n            finally:\n                lock.release()\n        return ProxiesPool.__instance\n\n    @property\n    def pool(self):\n        return self.__pool\n\n    def add(self, ip):\n        if not ip:\n            return\n        self.__pool.append(ip)\n\n    def get_proxy_ip(self):\n        if self.pool:\n            proxies = self.pool[random.randint(0, len(self.pool) - 1)]\n        else:\n            proxies = None\n        print proxies\n        return proxies\n\n    def __setattr__(self, key, value):\n        pass\n\n    def __dict__(self):\n        pass\n\n\nclass Proxy(ReThread):\n    proxy_site = 'http://www.xicidaili.com/nn'\n\n    def run(self):\n        while self.is_running:\n            self.__update_proxy_pool()\n            time.sleep(60 * 15)\n\n    @staticmethod\n    def __re_number(s):\n        if not s:\n            return 0\n        return float('%0.2f' % float(re.sub('[^\\d+.\\d+$]', '', s)))\n\n    def __update_proxy_pool(self):\n        downloader = HtmlDownloader()\n        proxy_pool = ProxiesPool()\n        parser = HtmlParser()\n        data = downloader.download(self.proxy_site)\n        speed_times = parser.multilevel_tags(data, [{'tr': None}, {'div': {'class': 'bar'}}])\n        ip_data = parser.elements(data, 'tr')[1:]\n        speed = speed_times[::2]\n        times = speed_times[1::2]\n        for i, ip in enumerate(ip_data):\n            d = {}\n            for j, value in enumerate(filter(lambda x: x, ip_data[i].text.split('\\n'))):\n                if j == 0:\n                    d['ip'] = value\n                elif j == 1:\n                    d['port'] = value\n                continue\n            if len(d.keys()) != 2:\n                continue\n            if self.__re_number(speed[i].get('title')) > 1 \\\n                    or self.__re_number(times[i].get('title')) > 1:\n                continue\n\n            proxy_pool.add({'http': '%s:%s' % (d.get('ip'), d.get('port'))})\n\n"""
crawlers/spider/tools.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 17-4-19 \xe4\xb8\x8b\xe5\x8d\x8810:49\n# @Author  : tom.lee\n# @Site    : \n# @File    : tools.py\n# @Software: PyCharm\nimport logging\nimport os\nimport threading\nimport time\n\n\nclass Decorator(object):\n    @staticmethod\n    def time(func):\n        def wrapper(*args, **kwargs):\n            start = time.time()\n            result = func(*args, **kwargs)\n            logging.warning(\n                \'*******\xe6\x96\xb9\xe6\xb3\x95[%s]\xe6\xb6\x88\xe8\x80\x97\xe6\x97\xb6\xe9\x97\xb4%d s\' %\n                (func.__name__, time.time() - start))\n            return result\n\n        return wrapper\n\n\nclass Constants(object):\n    parser = \'html.parser\'\n    encoding = \'utf-8\'\n    url_filed = \'href\'\n\n\nclass Dir(object):\n    @staticmethod\n    def create_dir(path):\n        if not os.path.exists(path):\n            try:\n                os.makedirs(path)\n            except Exception, e:\n                print u\'\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9%s\xe3\x80\x80\xe5\x88\x9b\xe5\xbb\xba\xe5\xa4\xb1\xe8\xb4\xa5;\\n %s\' % (path, e)\n        else:\n            print u\'\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9%s\xe3\x80\x80\xe5\xb7\xb2\xe7\xbb\x8f\xe5\xad\x98\xe5\x9c\xa8\' % path\n\n    @staticmethod\n    def parent_dir(path):\n        path = path.rstrip(\'/\')\n        return \'/\'.join(path.split(\'/\')[0:-1])\n\n    @staticmethod\n    def del_dir(path):\n        assert os.path.exists(path) and os.path.isdir(path)\n        for root, dirs, files in os.walk(path, topdown=False):\n            for name in files:\n                os.remove(os.path.join(root, name))\n            for name in dirs:\n                os.rmdir(os.path.join(root, name))\n        os.rmdir(path)\n\n    @staticmethod\n    def create_file(name, mode=\'r\', data=""""):\n        try:\n            parent_path = Dir.parent_dir(name)\n            if parent_path and not os.path.exists(parent_path):\n                Dir.create_dir(parent_path)\n            with open(name, mode)as f:\n                f.write(data)\n        except Exception, e:\n            print u\'%s \xe5\x88\x9b\xe5\xbb\xba\xe5\xa4\xb1\xe8\xb4\xa5\\n\xe5\xbc\x82\xe5\xb8\xb8\xef\xbc\x9a%s\' % (name, e)\n\n\nclass ReThread(threading.Thread):\n    def __init__(self, *args, **kwargs):\n        super(ReThread, self).__init__(*args, **kwargs)\n        self.__flag = threading.Event()  # \xe7\x94\xa8\xe4\xba\x8e\xe6\x9a\x82\xe5\x81\x9c\xe7\xba\xbf\xe7\xa8\x8b\xe7\x9a\x84\xe6\xa0\x87\xe8\xaf\x86\n        self.__flag.set()  # \xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xbaTrue\n        self.__running = threading.Event()  # \xe7\x94\xa8\xe4\xba\x8e\xe5\x81\x9c\xe6\xad\xa2\xe7\xba\xbf\xe7\xa8\x8b\xe7\x9a\x84\xe6\xa0\x87\xe8\xaf\x86\n        self.__running.set()  # \xe5\xb0\x86running\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xbaTrue\n\n    @property\n    def is_running(self):\n        """"""\n        \xe8\x8e\xb7\xe5\x8f\x96\xe8\xbf\x90\xe8\xa1\x8c\xe6\xa0\x87\xe5\xbf\x97\n        :return: True/False\n        """"""\n        return self.__running.isSet()\n\n    def run(self):\n        """"""\n        \xe4\xbd\xbf\xe7\x94\xa8while \xe5\xbe\xaa\xe7\x8e\xaf,\xe4\xbd\xbf\xe7\x94\xa8self.is_running \xe6\x9d\xa5\xe8\x8e\xb7\xe5\x8f\x96\xe8\xbf\x90\xe8\xa1\x8c\xe6\xa0\x87\xe5\xbf\x97\xe4\xbd\x8d\n        """"""\n        pass\n\n    def stop(self):\n        """"""\n        \xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xbaFalse, \xe8\xae\xa9\xe7\xba\xbf\xe7\xa8\x8b\xe9\x98\xbb\xe5\xa1\x9e\n        """"""\n        self.__flag.clear()\n\n    def resume(self):\n        """"""\n        \xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xbaTrue, \xe8\xae\xa9\xe7\xba\xbf\xe7\xa8\x8b\xe5\x81\x9c\xe6\xad\xa2\xe9\x98\xbb\xe5\xa1\x9e\n        """"""\n        self.__flag.set()\n\n    def exit(self):\n        """"""\n        \xe6\x9a\x82\xe5\x81\x9c\xe6\xa0\x87\xe5\xbf\x97\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xbaTrue\n        \xe8\xbf\x90\xe8\xa1\x8c\xe6\xa0\x87\xe5\xbf\x97\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xbaFalse\n        """"""\n        self.__flag.set()\n        self.__running.clear()\n'"
crawlers/spider/urlsmanager.py,0,"b""#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 17-4-19 \xe4\xb8\x8b\xe5\x8d\x8810:18\n# @Author  : tom.lee\n# @Site    : \n# @File    : urlsmanager.py\n# @Software: PyCharm\nimport urlparse\n\n\nclass URLSManager(object):\n    def __init__(self, url_pattern=None, size=None):\n        self.url_pattern = url_pattern\n        self.size = size\n        self.pending_urls = set()\n        self.processed_urls = set()\n\n    def has_next(self):\n        return len(self.pending_urls) > 0\n\n    def add_url(self, url):\n        if not url:\n            return\n        url = url.rstrip('/')\n        if self.url_pattern and urlparse.urlparse(\n                self.url_pattern).netloc != urlparse.urlparse(url).netloc:\n            return\n        if url in self.pending_urls | self.processed_urls:\n            return\n        if self.size and len(self.processed_urls) >= self.size:\n            self.pending_urls = set()\n            return\n        self.pending_urls.add(url)\n\n    def add_urls(self, urls):\n        if not urls:\n            return\n        [self.add_url(url) for url in urls]\n\n    def get_url(self):\n        url = self.pending_urls.pop()\n        self.processed_urls.add(url)\n        return url\n"""
crawlers/spider/writer.py,0,"b""#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 17-4-21 \xe4\xb8\x8a\xe5\x8d\x8812:17\n# @Author  : tom.lee\n# @Site    : \n# @File    : writer.py\n# @Software: PyCharm\nimport sys\n\nreload(sys)\nsys.setdefaultencoding('utf8')\n\n\nclass FileWriter(object):\n    def __init__(self, file_name=None):\n        self.file_name = file_name or 'data.txt'\n        self._data = []\n\n    def load_data(self, data):\n        if not data:\n            return\n        self._data.append(data)\n\n    def writer(self):\n        f = open(self.file_name, 'wb+')\n        [f.write('%s\\n\\n' % d) for d in self._data]\n        f.close()\n"""
data_analysis/study_matplotlib/__init__.py,0,b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2017/7/24 21:46\n# @Author  : Tom.lee\n# @Site    : \n# @File    : __init__.py.py\n# @Software: PyCharm\n\n'
data_analysis/study_matplotlib/matplotlib_2d.py,7,"b""#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-7-26 \xe4\xb8\x8b\xe5\x8d\x889:51\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : matplotlib_2d.py\n# @Product        : PyCharm\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(-2 * np.pi, 2 * np.pi, 100)\nxx = x + 1j * x[:, np.newaxis]  # a + ib over complex plane\nout = np.exp(xx)\n\nplt.subplot(121)\nplt.imshow(np.abs(out))\n\n# extent = [-2 * np.pi, 2 * np.pi, -2 * np.pi, 2 * np.pi]\nplt.title('Magnitude of exp(x)')\n\nplt.subplot(122)\nplt.imshow(np.angle(out))\n\n# extent = [-2 * np.pi, 2 * np.pi, -2 * np.pi, 2 * np.pi]\nplt.title('Phase (angle) of exp(x)')\nplt.show()\n"""
data_analysis/study_matplotlib/test.py,1,"b""#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2017/7/30 21:02\n# @Author  : Tom.lee\n# @Site    : \n# @File    : trigonometric.py\n# @Software: PyCharm\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nmpl.rcParams['axes.titlesize'] = 20\nmpl.rcParams['xtick.labelsize'] = 16\nmpl.rcParams['ytick.labelsize'] = 16\nmpl.rcParams['axes.labelsize'] = 16\nmpl.rcParams['xtick.major.size'] = 0\nmpl.rcParams['ytick.major.size'] = 0\n\nplt.xticks()\n\n# \xe5\x8c\x85\xe5\x90\xab\xe4\xba\x86\xe7\x8b\x97\xef\xbc\x8c\xe7\x8c\xab\xe5\x92\x8c\xe7\x8c\x8e\xe8\xb1\xb9\xe7\x9a\x84\xe6\x9c\x80\xe9\xab\x98\xe5\xa5\x94\xe8\xb7\x91\xe9\x80\x9f\xe5\xba\xa6\xef\xbc\x8c\xe8\xbf\x98\xe6\x9c\x89\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\x8f\xaf\xe8\xa7\x86\xe5\x8c\x96\xe9\xa2\x9c\xe8\x89\xb2\nspeed_map = {\n    'dog': (48, '#7199cf'),\n    'cat': (45, '#4fc4aa'),\n    'cheetah': (120, '#e1a7a2')\n}\n\n# \xe6\x95\xb4\xe4\xbd\x93\xe5\x9b\xbe\xe7\x9a\x84\xe6\xa0\x87\xe9\xa2\x98\nfig = plt.figure('Bar chart & Pie chart')\n\n# \xe5\x9c\xa8\xe6\x95\xb4\xe5\xbc\xa0\xe5\x9b\xbe\xe4\xb8\x8a\xe5\x8a\xa0\xe5\x85\xa5\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x90\xe5\x9b\xbe\xef\xbc\x8c121\xe7\x9a\x84\xe6\x84\x8f\xe6\x80\x9d\xe6\x98\xaf\xe5\x9c\xa8\xe4\xb8\x80\xe4\xb8\xaa1\xe8\xa1\x8c2\xe5\x88\x97\xe7\x9a\x84\xe5\xad\x90\xe5\x9b\xbe\xe4\xb8\xad\xe7\x9a\x84\xe7\xac\xac\xe4\xb8\x80\xe5\xbc\xa0\nax = fig.add_subplot(121)\nax.set_title('Running speed - bar chart')\n\n# \xe7\x94\x9f\xe6\x88\x90x\xe8\xbd\xb4\xe6\xaf\x8f\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\nxticks = np.arange(3)\n\n# \xe5\xae\x9a\xe4\xb9\x89\xe6\x9f\xb1\xe7\x8a\xb6\xe5\x9b\xbe\xe6\xaf\x8f\xe4\xb8\xaa\xe6\x9f\xb1\xe7\x9a\x84\xe5\xae\xbd\xe5\xba\xa6\nbar_width = 0.5\n\n# \xe5\x8a\xa8\xe7\x89\xa9\xe5\x90\x8d\xe7\xa7\xb0\nanimals = speed_map.keys()\n\n# \xe5\xa5\x94\xe8\xb7\x91\xe9\x80\x9f\xe5\xba\xa6\nspeeds = [x[0] for x in speed_map.values()]\n\n# \xe5\xaf\xb9\xe5\xba\x94\xe9\xa2\x9c\xe8\x89\xb2\ncolors = [x[1] for x in speed_map.values()]\n\n# \xe7\x94\xbb\xe6\x9f\xb1\xe7\x8a\xb6\xe5\x9b\xbe\xef\xbc\x8c\xe6\xa8\xaa\xe8\xbd\xb4\xe6\x98\xaf\xe5\x8a\xa8\xe7\x89\xa9\xe6\xa0\x87\xe7\xad\xbe\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\xef\xbc\x8c\xe7\xba\xb5\xe8\xbd\xb4\xe6\x98\xaf\xe9\x80\x9f\xe5\xba\xa6\xef\xbc\x8c\xe5\xae\x9a\xe4\xb9\x89\xe6\x9f\xb1\xe7\x9a\x84\xe5\xae\xbd\xe5\xba\xa6\xef\xbc\x8c\xe5\x90\x8c\xe6\x97\xb6\xe8\xae\xbe\xe7\xbd\xae\xe6\x9f\xb1\xe7\x9a\x84\xe8\xbe\xb9\xe7\xbc\x98\xe4\xb8\xba\xe9\x80\x8f\xe6\x98\x8e\nbars = ax.bar(xticks, speeds, width=bar_width, edgecolor='none')\n\n# \xe8\xae\xbe\xe7\xbd\xaey\xe8\xbd\xb4\xe7\x9a\x84\xe6\xa0\x87\xe9\xa2\x98\nax.set_ylabel('Speed(km/h)')\n\n# x\xe8\xbd\xb4\xe6\xaf\x8f\xe4\xb8\xaa\xe6\xa0\x87\xe7\xad\xbe\xe7\x9a\x84\xe5\x85\xb7\xe4\xbd\x93\xe4\xbd\x8d\xe7\xbd\xae\xef\xbc\x8c\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba\xe6\xaf\x8f\xe4\xb8\xaa\xe6\x9f\xb1\xe7\x9a\x84\xe4\xb8\xad\xe5\xa4\xae\nax.set_xticks(xticks+bar_width/2)\n\n# \xe8\xae\xbe\xe7\xbd\xae\xe6\xaf\x8f\xe4\xb8\xaa\xe6\xa0\x87\xe7\xad\xbe\xe7\x9a\x84\xe5\x90\x8d\xe5\xad\x97\nax.set_xticklabels(animals)\n\n# \xe8\xae\xbe\xe7\xbd\xaex\xe8\xbd\xb4\xe7\x9a\x84\xe8\x8c\x83\xe5\x9b\xb4\nax.set_xlim([bar_width/2-0.5, 3-bar_width/2])\n\n# \xe8\xae\xbe\xe7\xbd\xaey\xe8\xbd\xb4\xe7\x9a\x84\xe8\x8c\x83\xe5\x9b\xb4\nax.set_ylim([0, 125])\n\n# \xe7\xbb\x99\xe6\xaf\x8f\xe4\xb8\xaabar\xe5\x88\x86\xe9\x85\x8d\xe6\x8c\x87\xe5\xae\x9a\xe7\x9a\x84\xe9\xa2\x9c\xe8\x89\xb2\nfor bar, color in zip(bars, colors):\n    bar.set_color(color)\n\n# \xe5\x9c\xa8122\xe4\xbd\x8d\xe7\xbd\xae\xe5\x8a\xa0\xe5\x85\xa5\xe6\x96\xb0\xe7\x9a\x84\xe5\x9b\xbe\nax = fig.add_subplot(122)\nax.set_title('Running speed - pie chart')\n\n# \xe7\x94\x9f\xe6\x88\x90\xe5\x90\x8c\xe6\x97\xb6\xe5\x8c\x85\xe5\x90\xab\xe5\x90\x8d\xe7\xa7\xb0\xe5\x92\x8c\xe9\x80\x9f\xe5\xba\xa6\xe7\x9a\x84\xe6\xa0\x87\xe7\xad\xbe\nlabels = ['{}\\n{} km/h'.format(animal, speed) for animal, speed in zip(animals, speeds)]\n\n# \xe7\x94\xbb\xe9\xa5\xbc\xe7\x8a\xb6\xe5\x9b\xbe\xef\xbc\x8c\xe5\xb9\xb6\xe6\x8c\x87\xe5\xae\x9a\xe6\xa0\x87\xe7\xad\xbe\xe5\x92\x8c\xe5\xaf\xb9\xe5\xba\x94\xe9\xa2\x9c\xe8\x89\xb2\nax.pie(speeds, labels=labels, colors=colors)\n\nplt.show()"""
data_analysis/study_mlab/__init__.py,0,b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2017/7/24 21:31\n# @Author  : Tom.lee\n# @Site    : \n# @File    : __init__.py.py\n# @Software: PyCharm\n\n'
data_analysis/study_mlab/mlab_3d.py,2,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2017/7/24 21:32\n# @Author  : Tom.lee\n# @Site    : \n# @File    : mlab_a.py\n# @Software: PyCharm\n\n\ndef surface_3d():\n    """"""\n    \xe4\xbd\xbf\xe7\x94\xa8Mayavi\xe5\xb0\x86\xe4\xba\x8c\xe7\xbb\xb4\xe6\x95\xb0\xe7\xbb\x84\xe7\xbb\x98\xe5\x88\xb6\xe6\x88\x903D\xe6\x9b\xb2\xe9\x9d\xa2 x * exp(x**2 - y**2)\n    :return:\n    """"""\n    import numpy as np\n    # create data\n    x, y = np.ogrid[-2:2:20j, -2:2:20j]\n    z = x * np.exp(- x ** 2 - y ** 2)\n\n    # view it\n    from mayavi import mlab\n\n    # \xe7\xbb\x98\xe5\x88\xb6\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb8\x89\xe7\xbb\xb4\xe7\xa9\xba\xe9\x97\xb4\xe4\xb8\xad\xe7\x9a\x84\xe6\x9b\xb2\xe9\x9d\xa2\n    pl = mlab.surf(x, y, z, warp_scale=""auto"")\n\n    # \xe5\x9c\xa8\xe4\xb8\x89\xe7\xbb\xb4\xe7\xa9\xba\xe9\x97\xb4\xe4\xb8\xad\xe6\xb7\xbb\xe5\x8a\xa0\xe5\x9d\x90\xe6\xa0\x87\xe8\xbd\xb4\n    mlab.axes(xlabel=\'x\', ylabel=\'y\', zlabel=\'z\')\n\n    # \xe5\x9c\xa8\xe4\xb8\x89\xe7\xbb\xb4\xe7\xa9\xba\xe9\x97\xb4\xe4\xb8\xad\xe6\xb7\xbb\xe5\x8a\xa0\xe6\x9b\xb2\xe9\x9d\xa2\xe5\x8c\xba\xe5\x9f\x9f\xe7\x9a\x84\xe5\xa4\x96\xe6\xa1\x86\n    mlab.outline(pl)\n\n    mlab.show()\n\n\ndef surface_spherical_harmonic():\n    # Create the data.\n    from numpy import pi, sin, cos, mgrid\n    dphi, dtheta = pi / 250.0, pi / 250.0\n    [phi, theta] = mgrid[0:pi + dphi * 1.5:dphi, 0:2 * pi + dtheta * 1.5:dtheta]\n    m0 = 4\n    m1 = 3\n    m2 = 2\n    m3 = 3\n    m4 = 6\n    m5 = 2\n    m6 = 6\n    m7 = 4\n    r = sin(m0 * phi) ** m1 + cos(m2 * phi) ** m3 + sin(m4 * theta) ** m5 + cos(m6 * theta) ** m7\n    x = r * sin(phi) * cos(theta)\n    y = r * cos(phi)\n    z = r * sin(phi) * sin(theta)\n\n    # View it.\n    from mayavi import mlab\n    mlab.mesh(x, y, z)\n    mlab.show()\n\n\ndef test_plot3d():\n    import numpy\n    from mayavi import mlab\n\n    """"""Generates a pretty set of lines.""""""\n    n_mer, n_long = 6, 11\n    pi = numpy.pi\n    dphi = pi / 1000.0\n    phi = numpy.arange(0.0, 2 * pi + 0.5 * dphi, dphi)\n    mu = phi * n_mer\n    x = numpy.cos(mu) * (1 + numpy.cos(n_long * mu / n_mer) * 0.5)\n    y = numpy.sin(mu) * (1 + numpy.cos(n_long * mu / n_mer) * 0.5)\n    z = numpy.sin(n_long * mu / n_mer) * 0.5\n\n    l = mlab.plot3d(x, y, z, numpy.sin(mu), tube_radius=0.025, colormap=\'Spectral\')\n    mlab.show()\n\n\nif __name__ == \'__main__\':\n    # surface_spherical_harmonic()\n    # surface_3d()\n    test_plot3d()\n'"
data_analysis/study_numpy/__init__.py,0,b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2017/7/23 12:09\n# @Author  : Tom.lee\n# @Site    : \n# @File    : __init__.py.py\n# @Software: PyCharm\n\n'
data_analysis/study_numpy/_test.py,0,b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2017/9/5 22:35\n# @Author  : Tom.lee\n# @Site    : \n# @File    : _test.py\n# @Software: PyCharm\n\n# import numpy as np\n\n'
data_analysis/study_numpy/numpy_multidimensional.py,8,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2017/7/23 13:12\n# @Author  : Tom.lee\n# @Site    : \n# @File    : numpy_list_multidimensional.py\n# @Software: PyCharm\n\n""""""\nnumpy \xe5\xa4\x9a\xe7\xbb\xb4\xe6\x95\xb0\xe7\xbb\x84\n""""""\nimport numpy as np\n\n\ndef split_line():\n    print \'*\' * 6 ** 2\n\n\na = np.arange(10, 0, -1)\nprint a\nb = np.arange(100, 200, 10)\nprint b\nsplit_line()\n\n\ndef multi_2():\n    """"""\n    \xe6\x9e\x84\xe5\xbb\xba x,y \xe4\xba\x8c\xe7\xbb\xb4\xe6\x95\xb0\xe7\xbb\x84\n    \n    reshape(\xe7\xba\xb5\xe8\xbd\xb4\xe9\xab\x98\xe5\xba\xa6,\xe6\xa8\xaa\xe8\xbd\xb4\xe9\xab\x98\xe5\xba\xa6)\n    :return: \n    """"""\n    y = a.reshape(-1, 1)  # \xe8\xa1\xa8\xe7\xa4\xbay\xe8\xbd\xb4\n    x = b  # \xe8\xa1\xa8\xe7\xa4\xbax\xe8\xbd\xb4\n    xy = y + x  # \xe8\xa1\xa8\xe7\xa4\xbay\xe8\xbd\xb4\xe5\x85\x83\xe7\xb4\xa0\xe4\xb8\x8ex\xe5\xba\x8f\xe5\x88\x97\xe6\xaf\x8f\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\xe6\x83\xb3\xe5\x8a\xa0\n    print xy\n\n    print \'\xe4\xb8\x8b\xe6\xa0\x87\xef\xbc\x885,5\xef\xbc\x89\xef\xbc\x9a\', xy[5, 5]\n    print xy.shape\n    split_line()\n\n\ndef multi_2_func():\n    """"""\n    \xe4\xbd\xbf\xe7\x94\xa8\xe5\x87\xbd\xe6\x95\xb0\xe5\x88\x9b\xe5\xbb\xba2\xe7\xbb\xb4\xe6\x95\xb0\xe7\xbb\x84\n    :return: \n    """"""\n    print np.fromfunction(lambda x, y: (x + 1) * y, (10, 5))\n    split_line()\n\n\ndef sin():\n    """"""\n    \xe6\xad\xa3\xe5\xbc\xa6\xe5\x87\xbd\xe6\x95\xb0\n    :return: \n    """"""\n    x = np.linspace(0, 2 * np.pi, 10)\n\n    # \xe4\xbd\xbf\xe7\x94\xa8np.sin(x)\xe5\xaf\xb9 \xe6\xaf\x8f\xe4\xb8\xaax\xe4\xb8\xad\xe7\x9a\x84\xe5\x85\x83\xe7\xb4\xa0\xe6\xb1\x82\xe6\xad\xa3\xe5\xbc\xa6\xe5\x80\xbc,x\xe5\x80\xbc\xe4\xb8\x8d\xe5\x8f\x98\n    y = np.sin(x)\n    print x, \'\\n\', y\n    split_line()\n\n    # \xe4\xbd\xbf\xe7\x94\xa8np.sin(x,x) \xe5\xaf\xb9\xe6\xaf\x8f\xe4\xb8\xaax\xe4\xb8\xad\xe7\x9a\x84\xe5\x85\x83\xe7\xb4\xa0\xe6\xb1\x82\xe6\xad\xa3\xe5\xbc\xa6\xe5\x80\xbc\xef\xbc\x8c\xe5\xb9\xb6\xe8\xb5\x8b\xe5\x80\xbc\xe7\xbb\x99x, \xe5\x8d\xb3x,z \xe5\x85\xb1\xe4\xba\xab\xe5\x86\x85\xe5\xad\x98\xe7\xa9\xba\xe9\x97\xb4\n    z = np.sin(x, x)\n    print x, \'\\n\', z\n    split_line()\n\n\nif __name__ == \'__main__\':\n    # multi_2()\n    # multi_2_func()\n    sin()\n'"
data_analysis/study_numpy/numpy_ndarray.py,16,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 17-7-22 \xe4\xb8\x8a\xe5\x8d\x8812:41\n# @Author  : tom.lee\n# @File    : study_numpy.py\n# @Software: PyCharm\n\n""""""\nnumpy\nNumpy\xe6\x98\xafPython\xe7\x9a\x84\xe4\xb8\x80\xe4\xb8\xaa\xe7\xa7\x91\xe5\xad\xa6\xe8\xae\xa1\xe7\xae\x97\xe7\x9a\x84\xe5\xba\x93\xef\xbc\x8c\xe6\x8f\x90\xe4\xbe\x9b\xe4\xba\x86\xe7\x9f\xa9\xe9\x98\xb5\xe8\xbf\x90\xe7\xae\x97\xe7\x9a\x84\xe5\x8a\x9f\xe8\x83\xbd\n""""""\n\nimport numpy as np\n\n\ndef split_line():\n    print \'*\' * 6 ** 2\n\n\ndef np_version():\n    """"""\n    \xe7\x89\x88\xe6\x9c\xac\n    :return:\n    """"""\n    print np.version.version\n\n\ndef np_list():\n    """"""\n    numpy \xe6\x95\xb0\xe7\xbb\x84 \xef\xbc\x9a\n\n    \xe5\x8f\xaa\xe8\x83\xbd\xe5\xad\x98\xe5\x82\xa8\xe4\xb8\x80\xe7\xa7\x8d\xe6\x95\xb0\xe6\x8d\xae\xe7\xbb\x93\xe6\x9e\x84\xef\xbc\x8c\n    \xe4\xbd\xbf\xe7\x94\xa8 ""numpy.array()""\xe6\x9d\xa5\xe5\x88\x9b\xe5\xbb\xba\xef\xbc\x8c\n    \xe4\xbd\xbf\xe7\x94\xa8"" dtype = numpy.\xe7\xb1\xbb\xe5\x9e\x8b"" \xe6\x9d\xa5\xe6\x98\xbe\xe7\xa4\xba\xe6\x8c\x87\xe5\xae\x9a\n\n    :return:\n    """"""\n    # \xe5\x88\x9b\xe5\xbb\xba\n    l = np.array([1, 2, 3], dtype=np.int8)\n    a = np.array([1, 2, 3, 4])\n    b = np.array((5, 6, 7, 8))\n    c = np.array([[1, 2, 3, 4], [4, 5, 6, 7], [7, 8, 9, 10]])\n    print \'l:\', l\n    print \'a:\', a\n    print \'b:\', b\n    print \'c:\', c\n    split_line()\n\n    # \xe7\xb1\xbb\xe5\x9e\x8b\n    print l.dtype, c.dtype\n    split_line()\n\n    # \xe5\xa4\xa7\xe5\xb0\x8f:  \xe6\x95\xb0\xe7\xbb\x84a\xe7\x9a\x84shape\xe5\x8f\xaa\xe6\x9c\x89\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\xef\xbc\x8c\xe5\x9b\xa0\xe6\xad\xa4\xe5\xae\x83\xe6\x98\xaf\xe4\xb8\x80\xe7\xbb\xb4\xe6\x95\xb0\xe7\xbb\x84\xe3\x80\x82\n    #       \xe8\x80\x8c\xe6\x95\xb0\xe7\xbb\x84c\xe7\x9a\x84shape\xe6\x9c\x89\xe4\xb8\xa4\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\xef\xbc\x8c\xe5\x9b\xa0\xe6\xad\xa4\xe5\xae\x83\xe6\x98\xaf\xe4\xba\x8c\xe7\xbb\xb4\xe6\x95\xb0\xe7\xbb\x84\xef\xbc\x8c\xe5\x85\xb6\xe4\xb8\xad\xe7\xac\xac0\xe8\xbd\xb4\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\xba3\xef\xbc\x8c\xe7\xac\xac1\xe8\xbd\xb4\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\xba4\n    print l.shape, c.shape\n    split_line()\n\n    # \xe6\x94\xb9\xe5\x8f\x98\xe6\x95\xb0\xe7\xbb\x84\xe6\xaf\x8f\xe4\xb8\xaa\xe8\xbd\xb4\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6 : \xe5\x8f\xaa\xe6\x98\xaf\xe6\x94\xb9\xe5\x8f\x98\xe6\xaf\x8f\xe4\xb8\xaa\xe8\xbd\xb4\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\xef\xbc\x8c\xe6\x95\xb0\xe7\xbb\x84\xe5\x85\x83\xe7\xb4\xa0\xe5\x9c\xa8\xe5\x86\x85\xe5\xad\x98\xe4\xb8\xad\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\xe5\xb9\xb6\xe6\xb2\xa1\xe6\x9c\x89\xe6\x94\xb9\xe5\x8f\x98\n    c.shape = 4, 3\n    print c\n    split_line()\n\n    # \xe5\xbd\x93\xe6\x9f\x90\xe4\xb8\xaa\xe8\xbd\xb4\xe7\x9a\x84\xe5\x85\x83\xe7\xb4\xa0\xe4\xb8\xba-1\xe6\x97\xb6\xef\xbc\x8c\xe5\xb0\x86\xe6\xa0\xb9\xe6\x8d\xae\xe6\x95\xb0\xe7\xbb\x84\xe5\x85\x83\xe7\xb4\xa0\xe7\x9a\x84\xe4\xb8\xaa\xe6\x95\xb0\xe8\x87\xaa\xe5\x8a\xa8\xe8\xae\xa1\xe7\xae\x97\xe6\xad\xa4\xe8\xbd\xb4\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6\xef\xbc\x8c\xe5\x9b\xa0\xe6\xad\xa4\xe4\xb8\x8b\xe9\x9d\xa2\xe7\x9a\x84\xe7\xa8\x8b\xe5\xba\x8f\xe5\xb0\x86\xe6\x95\xb0\xe7\xbb\x84c\xe7\x9a\x84shape\xe6\x94\xb9\xe4\xb8\xba\xe4\xba\x86(2,6)\n    c.shape = 2, -1\n    print c\n    split_line()\n\n    # \xe4\xbd\xbf\xe7\x94\xa8\xe6\x95\xb0\xe7\xbb\x84\xe7\x9a\x84reshape\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe5\x88\x9b\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\xaa\xe6\x94\xb9\xe5\x8f\x98\xe4\xba\x86\xe5\xb0\xba\xe5\xaf\xb8\xe7\x9a\x84\xe6\x96\xb0\xe6\x95\xb0\xe7\xbb\x84\xef\xbc\x8c\xe5\x8e\x9f\xe6\x95\xb0\xe7\xbb\x84\xe7\x9a\x84shape\xe4\xbf\x9d\xe6\x8c\x81\xe4\xb8\x8d\xe5\x8f\x98\n    # \xe6\xb3\xa8\xe6\x84\x8f\xe6\xad\xa4\xe6\x97\xb6\xe6\x95\xb0\xe7\xbb\x84a\xe5\x92\x8cd\xe5\x85\xb6\xe5\xae\x9e\xe5\x85\xb1\xe4\xba\xab\xe6\x95\xb0\xe6\x8d\xae\xe5\xad\x98\xe5\x82\xa8\xe5\x86\x85\xe5\xad\x98\xe5\x8c\xba\xe5\x9f\x9f\n    d = a.reshape((2, 2))\n    print \'a:\', a\n    print \'d:\', d\n    split_line()\n\n\ndef np_list_create():\n    # \xe4\xbd\xbf\xe7\x94\xa8xrange\xe5\x88\x9b\xe5\xbb\xba\xe4\xb8\x80\xe7\xbb\xb4\xe6\x95\xb0\xe7\xbb\x84 [start,end,\xe6\xad\xa5\xe9\x95\xbf)\xe5\x8c\x85\xe5\x90\xab\xe8\xb5\xb7\xe5\xa7\x8b\xe4\xbd\x8d\xe7\xbd\xae,\xe4\xb8\x8d\xe5\x8c\x85\xe5\x90\xab\xe7\xbb\x88\xe6\xad\xa2\xe4\xbd\x8d\xe7\xbd\xae,\n    # \xe5\x85\x83\xe7\xb4\xa0\xe4\xb8\xaa\xe6\x95\xb0: (end-start)/\xe6\xad\xa5\xe9\x95\xbf\n    np_lst = np.arange(0, 10, 1)\n    print np_lst\n    print \'\xe5\xa4\xa7\xe5\xb0\x8f:%d\' % np_lst.shape\n    split_line()\n\n    # \xe7\xad\x89\xe5\xb7\xae\xe6\x95\xb0\xe5\x88\x97\n    # linspace(strat,end,size), [start,end]\xe5\x8c\x85\xe5\x90\xab\xe8\xb5\xb7\xe5\xa7\x8b\xe4\xbd\x8d\xe7\xbd\xae\xe5\x92\x8c\xe7\xbb\x88\xe6\xad\xa2\xe4\xbd\x8d\xe7\xbd\xae,\xe4\xb8\x80\xe5\x85\xb1\xe5\x88\x9b\xe5\xbb\xbasize\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\n    # \xe5\x8f\xaf\xe4\xbb\xa5\xe9\x80\x9a\xe8\xbf\x87endpoint\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe6\x8c\x87\xe5\xae\x9a\xe6\x98\xaf\xe5\x90\xa6\xe5\x8c\x85\xe6\x8b\xac\xe7\xbb\x88\xe5\x80\xbc\n    print np.linspace(0, 1, 12)\n    split_line()\n\n    # \xe7\xad\x89\xe6\xaf\x94\xe6\x95\xb0\xe5\x88\x97\n    # logspace(\xe5\xbc\x80\xe5\xa7\x8b\xe6\x8c\x87\xe6\x95\xb0\xef\xbc\x8c\xe7\xbb\x93\xe6\x9d\x9f\xe6\x8c\x87\xe6\x95\xb0\xef\xbc\x8c\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe5\xba\x95\xe6\x95\xb0\xe9\xbb\x98\xe8\xae\xa410)\n    print np.logspace(0, 2, 20)\n    split_line()\n\n\ndef np_list_by_byte():\n    """"""\n    \xe4\xbd\xbf\xe7\x94\xa8frombuffer, fromstring, fromfile\xe7\xad\x89\xe5\x87\xbd\xe6\x95\xb0\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbb\x8e\xe5\xad\x97\xe8\x8a\x82\xe5\xba\x8f\xe5\x88\x97\xe5\x88\x9b\xe5\xbb\xba\xe6\x95\xb0\xe7\xbb\x84\n    \xe4\xbd\xbf\xe7\x94\xa8\xe6\x97\xb6\xe4\xb8\x80\xe5\xae\x9a\xe8\xa6\x81\xe4\xbc\xa0\xe5\x85\xa5dtype\xe5\x8f\x82\xe6\x95\xb0\n    \n    Python\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\xae\x9e\xe9\x99\x85\xe4\xb8\x8a\xe6\x98\xaf\xe5\xad\x97\xe8\x8a\x82\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe6\xaf\x8f\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe5\x8d\xa0\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe8\x8a\x82\xef\xbc\x8c\n    \xe5\x9b\xa0\xe6\xad\xa4\xe5\xa6\x82\xe6\x9e\x9c\xe4\xbb\x8e\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2s\xe5\x88\x9b\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\xaa8bit\xe7\x9a\x84\xe6\x95\xb4\xe6\x95\xb0\xe6\x95\xb0\xe7\xbb\x84\xe7\x9a\x84\xe8\xaf\x9d\xef\xbc\x8c\xe6\x89\x80\xe5\xbe\x97\xe5\x88\xb0\xe7\x9a\x84\xe6\x95\xb0\xe7\xbb\x84\xe6\xad\xa3\xe5\xa5\xbd\xe5\xb0\xb1\xe6\x98\xaf\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe4\xb8\xad\xe6\xaf\x8f\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe7\x9a\x84ASCII\xe7\xbc\x96\xe7\xa0\x81\n    :return: \n    """"""\n    s = \'abcdefg\'\n    print np.frombuffer(s, dtype=np.int8)\n    split_line()\n\n    print np.fromstring(s, dtype=np.int8)\n    split_line()\n\n    # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xbb\x8e\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2s\xe5\x88\x9b\xe5\xbb\xba16bit\xe7\x9a\x84\xe6\x95\xb4\xe6\x95\xb0\xe6\x95\xb0\xe7\xbb\x84\xef\xbc\x8c\xe9\x82\xa3\xe4\xb9\x88\xe4\xb8\xa4\xe4\xb8\xaa\xe7\x9b\xb8\xe9\x82\xbb\xe7\x9a\x84\xe5\xad\x97\xe8\x8a\x82\xe5\xb0\xb1\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x80\xe4\xb8\xaa\xe6\x95\xb4\xe6\x95\xb0\xef\xbc\x8c\n    # \xe6\x8a\x8a\xe5\xad\x97\xe8\x8a\x8298\xe5\x92\x8c\xe5\xad\x97\xe8\x8a\x8297\xe5\xbd\x93\xe4\xbd\x9c\xe4\xb8\x80\xe4\xb8\xaa16\xe4\xbd\x8d\xe7\x9a\x84\xe6\x95\xb4\xe6\x95\xb0\xef\xbc\x8c \xe5\xae\x83\xe7\x9a\x84\xe5\x80\xbc\xe5\xb0\xb1\xe6\x98\xaf98*256+97 = 25185\xe3\x80\x82\n    # \xe5\x8f\xaf\xe4\xbb\xa5\xe7\x9c\x8b\xe5\x87\xba\xe5\x86\x85\xe5\xad\x98\xe4\xb8\xad\xe6\x98\xaf\xe4\xbb\xa5little endian(\xe4\xbd\x8e\xe4\xbd\x8d\xe5\xad\x97\xe8\x8a\x82\xe5\x9c\xa8\xe5\x89\x8d)\xe6\x96\xb9\xe5\xbc\x8f\xe4\xbf\x9d\xe5\xad\x98\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe3\x80\x82\n    # \xe6\x89\x80\xe4\xbb\xa5\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6\xe5\xbf\x85\xe9\xa1\xbb\xe6\x98\xaf\xe5\x81\xb6\xe6\x95\xb0\n    print np.fromstring(\'abcdefgh\', dtype=np.int16)\n    split_line()\n\n\ndef np_list_by_func():\n    """"""\n    \xe9\x80\x9a\xe8\xbf\x87\xe5\x87\xbd\xe6\x95\xb0\xe5\x88\x9b\xe5\xbb\xba\xe6\x95\xb0\xe7\xbb\x84\n    :return: \n    """"""\n    # fromfunction \xe4\xbc\xa0\xe5\x85\xa5\xe4\xb8\x80\xe4\xb8\xaa\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\x92\x8c\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x80\xe4\xb8\xaa\xe7\xbb\xb4\xe5\xba\xa6\xe5\xa4\xa7\xe5\xb0\x8f\xe7\x9a\x84\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x88\xe5\x85\x83\xe7\xbb\x84\xef\xbc\x8c\xe5\x88\x97\xe8\xa1\xa8\xef\xbc\x89\n    # \xe5\x8d\xb3\xef\xbc\x8810\xef\xbc\x8c\xef\xbc\x89\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x80\xe7\xbb\xb4\xe6\x95\xb0\xe7\xbb\x84\xef\xbc\x8c\xe4\xb8\x80\xe7\xbb\xb4\xe5\x85\x83\xe7\xb4\xa010\xe4\xb8\xaa\xef\xbc\x8c\xe6\xad\xa4\xe6\x97\xb6\xe5\x87\xbd\xe6\x95\xb0\xe6\x8e\xa5\xe6\x94\xb6\xe4\xb8\x80\xe4\xb8\xaa\xe5\x8f\x82\xe6\x95\xb0\n    #   (5,6)\xe8\xa1\xa8\xe7\xa4\xba\xe4\xba\x8c\xe7\xbb\xb4\xe6\x95\xb0\xe7\xbb\x84\xef\xbc\x8c\xe4\xb8\x80\xe7\xbb\xb4\xe5\x85\x83\xe7\xb4\xa05\xe4\xb8\xaa\xef\xbc\x8c\xe4\xba\x8c\xe7\xbb\xb4\xe5\x85\x83\xe7\xb4\xa06\xe4\xb8\xaa\xef\xbc\x8c\xe6\xad\xa4\xe6\x97\xb6\xe5\x87\xbd\xe6\x95\xb0\xe6\x8e\xa5\xe6\x94\xb62\xe4\xb8\xaa\xe5\x8f\x82\xe6\x95\xb0\n    print np.fromfunction(lambda x: x + 1, (10,))\n    print np.fromfunction(lambda x, y: (x + 1) * (y + 1), (5, 6))\n    split_line()\n\n\ndef np_list_opt():\n    """"""\n    numpy \xe5\x88\x97\xe8\xa1\xa8\xe5\x9f\xba\xe6\x9c\xac\xe6\x93\x8d\xe4\xbd\x9c\xe5\x92\x8cpython list\xe5\x9f\xba\xe6\x9c\xac\xe4\xb8\x80\xe8\x87\xb4\n    :return: \n    """"""\n    l = np.arange(10, 1, -1)\n    print l\n    print \'\xe5\x81\x9a\xe5\xb0\x8f\xe5\x80\xbc\xef\xbc\x9a\', l.min()\n    print \'\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\xef\xbc\x9a\', l.max()\n    print \'\xe4\xb8\x8b\xe6\xa0\x870\xe7\x9a\x84\xe5\x85\x83\xe7\xb4\xa0\xef\xbc\x9a\', l[0]\n    split_line()\n\n    # \xe9\xab\x98\xe7\xba\xa7\xe7\x94\xa8\xe6\xb3\x95\xef\xbc\x8c\xe4\xb8\x8d\xe4\xbc\x9a\xe5\x85\xb1\xe4\xba\xab\xe5\x86\x85\xe5\xad\x98\xe7\xa9\xba\xe9\x97\xb4\xef\xbc\x8c\xe4\xbb\xa5\xe4\xb8\x8a\xe6\x93\x8d\xe4\xbd\x9c\xe4\xbc\x9a\xe5\x85\xb1\xe4\xba\xab\xe5\x86\x85\xe5\xad\x98\xe7\xa9\xba\xe9\x97\xb4\n    print l[np.array([1, 5, 3])]  # \xe4\xbd\xbf\xe7\x94\xa8\xe6\x95\xb0\xe7\xbb\x84\xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\x8b\xe6\xa0\x87\xe5\x85\x83\xe7\xb4\xa0\n    print l[[1, 5, 3]]  # \xe4\xbd\xbf\xe7\x94\xa8\xe5\x88\x97\xe8\xa1\xa8\xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\x8b\xe6\xa0\x87\xe5\x85\x83\xe7\xb4\xa0\xe3\x80\x80\n    split_line()\n\n    # \xe5\x88\x97\xe8\xa1\xa8\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x87\xe6\xbb\xa4\n    print l[l > 3]  # \xe7\x9b\xb4\xe6\x8e\xa5\xe8\x8e\xb7\xe5\x8f\x96\xe5\x88\x97\xe8\xa1\xa8\xe5\xa4\xa7\xe4\xba\x8e3\xe7\x9a\x84\xe5\x80\xbc\n    print l > 3  # \xe5\x88\xa4\xe6\x96\xad\xe5\x88\x97\xe8\xa1\xa8\xe5\x85\x83\xe7\xb4\xa0\xe6\x98\xaf\xe5\x90\xa6\xe5\xa4\xa7\xe4\xba\x8e3\xe8\xbf\x94\xe5\x9b\x9e\xe4\xb8\x80\xe4\xb8\xaaboolean \xe5\x88\x97\xe8\xa1\xa8\n    split_line()\n\n\nif __name__ == \'__main__\':\n    # np_version()\n    # np_list()\n    # np_list_create()\n    # np_list_by_byte()\n    # np_list_by_func()\n    # np_list_opt()\n    print np.fromfunction(lambda x: x, (10,))\n'"
data_analysis/study_numpy/numpy_polynomial_poly1d.py,8,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2017/7/30 13:44\n# @Author  : Tom.lee\n# @File    : numpy_polynomial_poly1d.py\n# @Software: PyCharm\n\n""""""\n\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\n""""""\nimport numpy as np\n\n# \xe6\x9e\x84\xe9\x80\xa0\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\np1 = np.poly1d([1])  # 1\np2 = np.poly1d([1, 2])  # x + 2\np3 = np.poly1d([1, 2, 3])  # x^2 + 2x + 3\np4 = np.poly1d([1, 2, 3, 4])  # x^3 + 2* x^2 + 3x + 4\nprint \'\\np1:\', p1\nprint \'\\np2:\', p2\nprint \'\\np3:\', p3\nprint \'\\np4:\', p4\n# \xe8\xaf\x84\xe4\xbc\xb0x = 0.5\xe5\xa4\x84\xe7\x9a\x84\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\xef\xbc\x9a\nprint \'\\n\\n\xe6\xb1\x82\xe5\x87\xbd\xe6\x95\xb00.5\xe5\xa4\x84\xe7\x9a\x84\xe5\x80\xbc\xef\xbc\x9a\'\nprint p1(0.5), 1\nprint p2(0.5), 0.5 + 2\nprint p3(0.5), 0.5 ** 2 + 2 * 0.5 + 3\nprint p4(0.5), 0.5 ** 3 + 2 * 0.5 ** 2 + 3 * 0.5 + 4\n# \xe8\xa7\xa3\nprint \'\\n\\n\xe8\xa7\xa3\xef\xbc\x9a\'\nprint p1.r\nprint p2.r\nprint p3.r\nprint p4.r\n\n\nprint ""*"" * 20, \'Y = X + 1\', ""*"" * 20\nx = np.linspace(0, 1, 10)  # \xe6\x9e\x84\xe9\x80\xa0x\ny = np.array(map(lambda x: x + 1, x))  # \xe8\xae\xa1\xe7\xae\x97y\nm = np.polyfit(x, y, 2)  # \xe6\x8b\x9f\xe5\x90\x88\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\xe5\x8f\x82\xe6\x95\xb0\ny1 = np.poly1d(m)  # \xe6\x9e\x84\xe9\x80\xa0\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\nprint ""\\nx\xe5\x8f\x96\xe5\x80\xbc\xef\xbc\x9a"", x\nprint ""\\ny\xe5\x8f\x96\xe5\x80\xbc\xef\xbc\x9a"", y\nprint ""\\n\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a"", m\nprint ""\\n\xe4\xb8\x80\xe7\xbb\xb4\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\xef\xbc\x9a"", y1\nprint ""\\n\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x80\xe7\xbb\xb4\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\xe8\xae\xa1\xe7\xae\x97y\xe5\x80\xbc\xef\xbc\x9a"", y1(x)\nprint ""\\n\xe8\xae\xa1\xe7\xae\x97\xe4\xb8\x80\xe7\xbb\xb4\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\xe7\x9a\x84\xe8\xa7\xa3\xef\xbc\x9a"", y1.r\nprint ""\\n\xe6\xaf\x94\xe8\xbe\x83\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\xe4\xb8\x8e\xe5\x87\xbd\xe6\x95\xb0\xe8\xae\xa1\xe7\xae\x97\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x9a"", ""\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\xef\xbc\x9a"", y1(120), "" \xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x9a"", 120 + 1\n'"
data_analysis/study_numpy/numpy_ufunc.py,2,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2017/7/23 21:51\n# @Author  : Tom.lee\n# @Site    : \n# @File    : numpy_ufunc.py\n# @Software: PyCharm\n\n""""""\nufunc\xe6\x98\xafuniversal function\xe7\x9a\x84\xe7\xbc\xa9\xe5\x86\x99\xef\xbc\x8c\xe5\xae\x83\xe6\x98\xaf\xe4\xb8\x80\xe7\xa7\x8d\xe8\x83\xbd\xe5\xaf\xb9\xe6\x95\xb0\xe7\xbb\x84\xe7\x9a\x84\xe6\xaf\x8f\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x93\x8d\xe4\xbd\x9c\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xe3\x80\x82\nNumPy\xe5\x86\x85\xe7\xbd\xae\xe7\x9a\x84\xe8\xae\xb8\xe5\xa4\x9aufunc\xe5\x87\xbd\xe6\x95\xb0\xe9\x83\xbd\xe6\x98\xaf\xe5\x9c\xa8C\xe8\xaf\xad\xe8\xa8\x80\xe7\xba\xa7\xe5\x88\xab\xe5\xae\x9e\xe7\x8e\xb0\xe7\x9a\x84\xef\xbc\x8c\xe5\x9b\xa0\xe6\xad\xa4\xe5\xae\x83\xe4\xbb\xac\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe9\x80\x9f\xe5\xba\xa6\xe9\x9d\x9e\xe5\xb8\xb8\xe5\xbf\xab\n""""""\nimport numpy as np\n\n\ndef foo(x):\n    # \xe7\x94\xb1\xe5\x9b\xbe\xe5\x8f\xaf\xe7\x9f\xa5\xef\xbc\x8c\xe5\x87\xbd\xe6\x95\xb0\xe5\x88\x863\xe6\xae\xb5,\xe5\x91\xa8\xe6\x9c\x9f\xe5\x87\xbd\xe6\x95\xb0\n    # \xe8\xae\xbe\xef\xbc\x9ay= kx + b ,\xe4\xb8\x94b=0\n    c0, hc, c = 0.4, 1.0, 0.6\n    if x > 1:\n        x = float(x) % 1.0\n    if x <= c0:\n        k = hc / c0\n        return k * x\n    elif x < c:\n        k = (hc - 0) / (c0 - c)\n        return k * (x - c)\n    else:\n        return 0\n\n\nX = np.linspace(0, 2, 20)\nY = np.array(map(foo, X))\nprint X\nprint Y\n'"
data_analysis/study_tesseract/__init__.py,0,b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-7 \xe4\xb8\x8b\xe5\x8d\x8812:52\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : __init__.py.py\n# @Product        : PyCharm\n'
data_analysis/study_tesseract/test01.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-7 \xe4\xb8\x8b\xe5\x8d\x881:21\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : test01.py\n# @Product        : PyCharm\n\n""""""\n# BASH\n\n$ tesseract image_path out\n$ cat out.txt\n""""""\nimport Image\n\nimport pytesseract\n\nfile_obj = Image.open(\'./image/20170807142300.png\')\nprint pytesseract.image_to_string(file_obj)\n'"
page_parser/beautifulsoup/__init__.py,0,b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-4-20 \xe4\xb8\x8b\xe5\x8d\x881:53\n# @Author         : Tom.Lee\n# @Description    : \n# @File           : __init__.py.py\n# @Product        : PyCharm\n'
page_parser/beautifulsoup/parser.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 17-4-19 \xe4\xb8\x8b\xe5\x8d\x8810:10\n# @Author  : tom.lee\n# @Site    : \xe8\xa7\xa3\xe6\x9e\x90\xe5\x99\xa8\n# @File    : parser.py\n# @Software: PyCharm\n\n""""""\n\xe6\x94\xaf\xe6\x8c\x81\xe5\xa4\x9a\xe7\xba\xa7\xe6\x9d\xa1\xe4\xbb\xb6\xe6\x9f\xa5\xe8\xaf\xa2\xef\xbc\x9a\n""""""\n\nimport urlparse\n\nimport bs4\n\n\nclass HtmlParser(object):\n    """"""\n    \xe7\xbd\x91\xe9\xa1\xb5\xe8\xa7\xa3\xe6\x9e\x90\xe5\x99\xa8\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe7\xbb\xa7\xe6\x89\xbf\xe6\xad\xa4\xe7\xb1\xbb\xef\xbc\x8c\xe5\xae\x9e\xe7\x8e\xb0\xe6\x9b\xb4\xe5\xa4\x8d\xe6\x9d\x82\xe5\x8a\x9f\xe8\x83\xbd\n    """"""\n    url_filed = \'href\'\n    parser = \'html.parser\'\n    encoding = \'utf-8\'\n\n    def __init__(self, base_url=None):\n        self.__base_url = base_url\n\n    def simple_tags(self, data, tag=None, patterns=None, attributes=None):\n        """"""\n        \xe5\x8d\x95\xe4\xb8\xaa\xe6\xa0\x87\xe7\xad\xbe\xe8\xa7\xa3\xe6\x9e\x90\n        """"""\n        tags = self.__parser_tags(data, tag, patterns)\n        return self.__tags(tags, attributes)\n\n    def multilevel_tags(self, data, multilevel_patterns=None, attributes=None):\n        """"""\n        \xe5\xa4\x9a\xe6\xa0\x87\xe7\xad\xbe\xe8\xa7\xa3\xe6\x9e\x90\n        examples : div .a\n        """"""\n        if not multilevel_patterns:\n            return data\n\n        for tag_patterns in multilevel_patterns:\n            tag, patterns = tag_patterns.items()[0]\n            data = self.__parser_tags(data, tag, patterns)\n            multilevel_patterns.remove(tag_patterns)\n\n            if not multilevel_patterns:\n                return self.__tags(data, attributes)\n\n            return self.multilevel_tags(data, multilevel_patterns, attributes)\n\n    def element(self, data, tag=None, patterns=None):\n        """"""\n        \xe6\x9f\xa5\xe8\xaf\xa2\xe7\xac\xa6\xe5\x90\x88\xe6\x9d\xa1\xe4\xbb\xb6\xe7\x9a\x84\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe6\xa0\x87\xe7\xad\xbe\xe5\x85\x83\xe7\xb4\xa0\n        """"""\n        elements = self.elements(data, tag, patterns)\n        return elements[0] if elements else None\n\n    def elements(self, data, tag=None, patterns=None):\n        """"""\n        \xe5\x85\x83\xe7\xb4\xa0\xe9\x9b\x86\xe5\x90\x88\n        """"""\n        return self.__parser_tags(data, tag, patterns)\n\n    def __tags(self, data, attributes=None):\n        """"""\n        \xe6\xa0\x87\xe7\xad\xbe\xe5\x88\x97\xe8\xa1\xa8\n        """"""\n        tags = [dict(tag_.attrs, text=tag_.getText()) for tag_ in data]\n\n        if not attributes:\n            return tags\n\n        for tag_attr in tags:\n            for k, v in tag_attr.items():\n                if k in attributes:\n                    continue\n                tag_attr.pop(k)\n\n        if self.__base_url:\n            return self.__format_url(tags)\n\n        return tags\n\n    def __parser_tags(self, data, tag=None, patterns=None):\n        """"""\n        \xe8\xbf\x94\xe5\x9b\x9e\xe6\x9f\xa5\xe8\xaf\xa2\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x88\x97\xe8\xa1\xa8\n        """"""\n        return self.__data_parser(data).find_all(tag, patterns)\n\n    def __data_parser(self, data):\n        if isinstance(data,(str,unicode)):\n            bs4_str = data\n        elif isinstance(data, bs4.element.ResultSet):\n            bs4_str = \' \'.join([str(_tag) for _tag in data])\n        else:\n            bs4_str = str(data)\n        return bs4.BeautifulSoup(bs4_str, self.parser, from_encoding=self.encoding)\n\n    def __format_url(self, maps):\n        for m in maps:\n            if not m.get(self.url_filed):\n                continue\n            m[self.url_filed] = urlparse.urljoin(\n                self.__base_url, m.get(self.url_filed)\n            )\n        return maps\n\n\nif __name__==\'__main__\':\n    doc = """"""\n    <html><head><title>The Dormouse\'s story</title></head>\n    <body>\n    <p class=""title""><b>The Dormouse\'s story</b></p>\n    \n    <p class=""story"">Once upon a time there were three little sisters; and their names were\n    <a href=""http://example.com/elsie"" class=""sister"" id=""link1"">Elsie</a>,\n    <a href=""http://example.com/lacie"" class=""sister"" id=""link2"">Lacie</a> and\n    <a href=""http://example.com/tillie"" class=""sister"" id=""link3"">\xe6\xa0\x87\xe9\xa2\x98</a>;\n    and they lived at the bottom of a well.</p>\n    \n    <p class=""story"">...</p>\n    """"""\n    for s in HtmlParser().multilevel_tags(doc, [{\'a\': {\'class\': \'sister\'}}]):\n        print s[\'text\']\n'"
page_parser/beautifulsoup/test.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-4-20 \xe4\xb8\x8b\xe5\x8d\x881:53\n# @Author         : Tom.Lee\n# @Description    : \n# @File           : test.py\n# @Product        : PyCharm\n\nimport re\nimport urlparse\n\nimport bs4\n\nhtml_doc = """"""\n<html><head><title>The Dormouse\'s story</title></head>\n<body>\n<p class=""title""><b>The Dormouse\'s story</b></p>\n\n<p class=""story"">Once upon a time there were three little sisters; and their names were\n<a href=""http://example.com/elsie"" class=""sister"" id=""link1"">Elsie</a>,\n<a href=""http://example.com/lacie"" class=""sister"" id=""link2"">Lacie</a> and\n<a href=""http://example.com/tillie"" class=""sister"" id=""link3"">\xe6\xa0\x87\xe9\xa2\x98</a>;\nand they lived at the bottom of a well.</p>\n\n<p class=""story"">...</p>\n""""""\n# print html_doc\n\n\nsoup = bs4.BeautifulSoup(html_doc, ""html.parser"", from_encoding=\'utf-8\')\npattern = {\'class\': \'sister\', \'id\': re.compile(r\'^link\\d+$\')}\ndata = soup.find_all(\'a\', pattern)\nprint data\n\n# \xe5\xaf\xb9\xe8\xb1\xa1\xe5\xb1\x9e\xe6\x80\xa7\nprint data[0]\nprint data[2].getText()\nprint data[0].contents\nprint data[0].attrs\n\n\n#\n# tags_a = soup.find_all(name=\'a\', attrs={\'class\': \'sister\'})\n# for a in tags_a:\n#     print type(a), a.get(\'id\'), a.get(\'href\'), a.get(\'no_found\')\n#     print dict(a.attrs, tag_name=a.getText())\nprint isinstance(data,bs4.element.ResultSet)\nbs4_str = \' \'.join([str(_tag) for _tag in data])\nsp = bs4.BeautifulSoup(bs4_str, ""html.parser"", from_encoding=\'utf-8\')\ndata = sp.find_all(\'a\', pattern)\nprint data\nprint data[2].getText()\n\n\n# \xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe6\x8b\xbc\xe6\x8e\xa5\n# print urlparse.urljoin(\'https://www.baidu.com\', \'//www.ji.com\')'"
page_parser/beautifulsoup/test_403.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-7-25 \xe4\xb8\x8b\xe5\x8d\x883:17\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : test_403.py\n# @Product        : PyCharm\n\nimport bs4\n\nt403 = """"""\n<html>\n <head>\n  <title>403 Forbidden</title>\n </head>\n <body>\n  <h1>403 Forbidden</h1>\n  \xe8\xb5\x84\xe6\xba\x90 bc6d81de-97af-4ebd-b01a-b23a6567bea2 is protected and cannot be deleted.<br /><br />\n\n\n\n </body>\n</html>\n""""""\nsoup = bs4.BeautifulSoup(t403, ""html.parser"", from_encoding=\'utf-8\')\n\ntitle = soup.find(\'title\')\nbody = soup.find(\'body\')\ntitle_text = title.getText()\nbody_text = body.getText().replace(title_text, \'\').replace(\'\\n\', \'\')\n\nprint {title_text.split(\' \')[-1]: {\'message\': body_text, \'code\': 1}}\n'"
page_parser/xpath/__init__.py,0,b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 17-5-6 \xe4\xb8\x8b\xe5\x8d\x881:10\n# @Author  : tom.lee\n# @Site    : \n# @File    : __init__.py.py\n# @Software: PyCharm\n'
page_parser/xpath/test.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 17-5-6 \xe4\xb8\x8b\xe5\x8d\x881:10\n# @Author  : tom.lee\n# @Site    : \n# @File    : test.py\n# @Software: PyCharm\n\n\nfrom lxml import etree\n\nf = open(\'file.txt\')\ncontent = f.read()\nselector = etree.HTML(content)\n\ndivs = selector.xpath(\'//div[@class=""site-item ""]/div[@class=""title-and-desc""]\')\nfor r in divs:\n    item_ = None or {}\n    item_[\'title\'] = r.xpath(\'a/div/text()\')[0]\n    item_[\'link\'] = r.xpath(\'a/@href\')[0]\n    item_[\'desc\'] = r.xpath(\'div/text()\')[0].replace(\'\\n\', \'\').strip()\n    print item_\n'"
rpc/RPyC/demo.py,0,"b""#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-13 \xe4\xb8\x8b\xe5\x8d\x881:31\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017\n# @File           : demo.py\n# @Product        : PyCharm\n# @Docs           : \n# @Source         : \n\nimport rpyc\nfrom rpyc.utils.server import ThreadedServer\n\n\nclass MyService(rpyc.Service):\n    data = []\n\n    def exposed_save_data(self, d):\n        self.data.append(d)\n\n    def exposed_get_data(self):\n        return self.data\n\n\nclass MyClient(object):\n    @classmethod\n    def conn(cls):\n        connections = rpyc.connect('localhost', 15111)\n        connections.root.save_data(123)\n        print connections.root.get_data()\n\n\nif __name__ == '__main__':\n    import threading\n    import time\n\n    server = ThreadedServer(MyService, port=15111)\n    client = MyClient()\n\n\n    def start():\n        print '*************************************'\n        print '*************************************'\n        print '*****************RpyC****************'\n        print '************           **************'\n        print '*************************************'\n        print '***************start server**********'\n        print '*************************************'\n        print '*************************************\\n\\n'\n        server.start()\n\n    threading.Thread(target=start).start()\n\n    client.conn()\n    time.sleep(5)\n\n    server.close()\n    print 'service stop.'\n"""
scheduler_task/study_apscheduler/__init__.py,0,b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-8 \xe4\xb8\x8b\xe5\x8d\x882:28\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : __init__.py.py\n# @Product        : PyCharm\n'
standard_library/email/message_html.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-29 \xe4\xb8\x8b\xe5\x8d\x882:33\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : html_message.py\n# @Product        : PyCharm\n# @Docs           : \n# @Source         : \n\nimport smtplib\n\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\n# #config\nFROM_ADDRESS = \'\'  # sender\'s address\nEMAIL_PWD = \'\'     # password\nTO_ADDRESSES = \'\'  # recipient\'s email address\nSMTP_HOST = \'\'\nSMTP_PORT = 25\n\n# Create message container - the correct MIME type is multipart/alternative.\nmsg = MIMEMultipart(\'alternative\')\nmsg[\'Subject\'] = ""Link""\nmsg[\'From\'] = FROM_ADDRESS\nmsg[\'To\'] = TO_ADDRESSES\n\n# Create the body of the message (a plain-text and an HTML version).\ntext = ""Hi!\\nHow are you?\\nHere is the link you wanted:\\nhttps://www.python.org""\nhtml = """"""\\\n<html>\n  <head></head>\n  <body>\n    <p>Hi!<br>\n       How are you?<br>\n       Here is the <a href=""https://www.python.org"">link</a> you wanted.\n    </p>\n  </body>\n</html>\n""""""\n\n# Record the MIME types of both parts - text/plain and text/html.\npart1 = MIMEText(text, \'plain\')\npart2 = MIMEText(html, \'html\')\n\n# Attach parts into message container.\n# According to RFC 2046, the last part of a multipart message, in this case\n# the HTML message, is best and preferred.\nmsg.attach(part1)\nmsg.attach(part2)\n\n# Send the message via local SMTP server.\ns = smtplib.SMTP()\ns.connect(host=SMTP_HOST, port=SMTP_PORT)\ns.login(FROM_ADDRESS, EMAIL_PWD)\n\n# sendmail function takes 3 arguments: sender\'s address, recipient\'s address\n# and message to send - here it is sent as one string.\ns.sendmail(FROM_ADDRESS, [TO_ADDRESSES], msg.as_string())\ns.quit()\n'"
standard_library/email/message_text.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-28 \xe4\xb8\x8b\xe5\x8d\x884:31\n# @Author         : Tom.Lee\n# @File           : text_message.py\n# @Product        : PyCharm\n# @Source         :\n\n""""""\xe5\x88\x9b\xe5\xbb\xba\xe5\xb9\xb6\xe5\x8f\x91\xe9\x80\x81\xe7\xae\x80\xe5\x8d\x95\xe6\x96\x87\xe6\x9c\xac\xe6\xb6\x88\xe6\x81\xaf""""""\nimport smtplib\nfrom email.mime.text import MIMEText\n\n# # config email\nme = \'\'\nyou = \'\'\nsmtp_host = \'\'\nsmtp_port = 25\npasswd = \'\'\ntextfile = \'textfile\'\n\n# Open a plain text file for reading.  For this example, assume that\n# the text file contains only ASCII characters.\nfp = open(textfile, \'rb\')\n# Create a text/plain message\nmsg = MIMEText(fp.read(), \'text\', \'utf-8\')\nfp.close()\n\n# me == the sender\'s email address\n# you == the recipient\'s email address\nmsg[\'Subject\'] = \'The contents of %s\' % textfile\nmsg[\'From\'] = me\nmsg[\'To\'] = you\n\n# Send the message via our own SMTP server, but don\'t include the\n# envelope header.\ns = smtplib.SMTP()\ns.connect(host=smtp_host, port=smtp_port)\ns.set_debuglevel(1)\ns.login(me, passwd)\ns.sendmail(me, [you], msg.as_string())\ns.quit()\n'"
standard_library/email/shell_mime.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-28 \xe4\xb8\x8b\xe5\x8d\x884:09\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : mime.py\n# @Product        : PyCharm\n# @Docs           : \n# @Source         : \n\n\n""""""Send the contents of a directory as a MIME message.""""""\n\nimport os\nimport smtplib\nimport sys\n\n# For guessing MIME type based on file name extension\nimport mimetypes\n\nfrom optparse import OptionParser\n\nfrom email import encoders\nfrom email.mime.audio import MIMEAudio\nfrom email.mime.base import MIMEBase\nfrom email.mime.image import MIMEImage\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\nCOMMASPACE = \', \'\n\n\ndef main():\n    parser = OptionParser(usage=""""""\\\nSend the contents of a directory as a MIME message.\n\nUsage: %prog [options]\n\nUnless the -o option is given, the email is sent by forwarding to your local\nSMTP server, which then does the normal delivery process.  Your local machine\nmust be running an SMTP server.\n"""""")\n    parser.add_option(\'-d\', \'--directory\',\n                      type=\'string\', action=\'store\',\n                      help=""""""Mail the contents of the specified directory,\n                      otherwise use the current directory.  Only the regular\n                      files in the directory are sent, and we don\'t recurse to\n                      subdirectories."""""")\n    parser.add_option(\'-o\', \'--output\',\n                      type=\'string\', action=\'store\', metavar=\'FILE\',\n                      help=""""""Print the composed message to FILE instead of\n                      sending the message to the SMTP server."""""")\n    parser.add_option(\'-s\', \'--sender\',\n                      type=\'string\', action=\'store\', metavar=\'SENDER\',\n                      help=\'The value of the From: header (required)\')\n    parser.add_option(\'-r\', \'--recipient\',\n                      type=\'string\', action=\'append\', metavar=\'RECIPIENT\',\n                      default=[], dest=\'recipients\',\n                      help=\'A To: header value (at least one required)\')\n    opts, args = parser.parse_args()\n    if not opts.sender or not opts.recipients:\n        parser.print_help()\n        sys.exit(1)\n    directory = opts.directory\n    if not directory:\n        directory = \'.\'\n    # Create the enclosing (outer) message\n    outer = MIMEMultipart()\n    outer[\'Subject\'] = \'Contents of directory %s\' % os.path.abspath(directory)\n    outer[\'To\'] = COMMASPACE.join(opts.recipients)\n    outer[\'From\'] = opts.sender\n    outer.preamble = \'You will not see this in a MIME-aware mail reader.\\n\'\n\n    for filename in os.listdir(directory):\n        path = os.path.join(directory, filename)\n        if not os.path.isfile(path):\n            continue\n        # Guess the content type based on the file\'s extension.  Encoding\n        # will be ignored, although we should check for simple things like\n        # gzip\'d or compressed files.\n        ctype, encoding = mimetypes.guess_type(path)\n        if ctype is None or encoding is not None:\n            # No guess could be made, or the file is encoded (compressed), so\n            # use a generic bag-of-bits type.\n            ctype = \'application/octet-stream\'\n        maintype, subtype = ctype.split(\'/\', 1)\n        if maintype == \'text\':\n            fp = open(path)\n            # Note: we should handle calculating the charset\n            msg = MIMEText(fp.read(), _subtype=subtype)\n            fp.close()\n        elif maintype == \'image\':\n            fp = open(path, \'rb\')\n            msg = MIMEImage(fp.read(), _subtype=subtype)\n            fp.close()\n        elif maintype == \'audio\':\n            fp = open(path, \'rb\')\n            msg = MIMEAudio(fp.read(), _subtype=subtype)\n            fp.close()\n        else:\n            fp = open(path, \'rb\')\n            msg = MIMEBase(maintype, subtype)\n            msg.set_payload(fp.read())\n            fp.close()\n            # Encode the payload using Base64\n            encoders.encode_base64(msg)\n        # Set the filename parameter\n        msg.add_header(\'Content-Disposition\', \'attachment\', filename=filename)\n        outer.attach(msg)\n    # Now send or store the message\n    composed = outer.as_string()\n    if opts.output:\n        fp = open(opts.output, \'w\')\n        fp.write(composed)\n        fp.close()\n    else:\n        s = smtplib.SMTP(\'localhost\')\n        s.sendmail(opts.sender, opts.recipients, composed)\n        s.quit()\n\n\nif __name__ == \'__main__\':\n    main()\n'"
standard_library/process/__init__.py,0,b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 17-5-7 \xe4\xb8\x8b\xe5\x8d\x8811:15\n# @Author  : tom.lee\n# @Site    : \n# @File    : __init__.py.py\n# @Software: PyCharm'
standard_library/process/process_pool.py,0,"b""# coding:utf-8\nimport random\nfrom time import sleep\nimport sys\nimport multiprocessing\nimport os\n\nlock = multiprocessing.Lock()  # \xe4\xb8\x80\xe4\xb8\xaa\xe9\x94\x81\n\n\ndef a(x):\n    lock.acquire()\n    print '\xe5\xbc\x80\xe5\xa7\x8b\xe8\xbf\x9b\xe7\xa8\x8b\xef\xbc\x9a', os.getpid(), '\xe6\xa8\xa1\xe6\x8b\x9f\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x97\xb6\xe9\x97\xb4:', x\n    lock.release()\n    sleep(x)  # \xe6\xa8\xa1\xe6\x8b\x9f\xe6\x89\xa7\xe8\xa1\x8c\xe6\x93\x8d\xe4\xbd\x9c\n    lock.acquire()\n    print '\xe7\xbb\x93\xe6\x9d\x9f\xe8\xbf\x9b\xe7\xa8\x8b\xef\xbc\x9a', os.getpid(), '\xe9\xa2\x84\xe6\xb5\x8b\xe4\xb8\x8b\xe4\xb8\x80\xe4\xb8\xaa\xe8\xbf\x9b\xe7\xa8\x8b\xe5\x90\xaf\xe5\x8a\xa8\xe4\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8\xe8\xaf\xa5\xe8\xbf\x9b\xe7\xa8\x8b\xe5\x8f\xb7'\n    lock.release()\n\n\nlist = []\nfor i in range(10):\n    list.append(random.randint(1, 10))\npool = multiprocessing.Pool(processes=3)  # \xe9\x99\x90\xe5\x88\xb6\xe5\xb9\xb6\xe8\xa1\x8c\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x95\xb0\xe4\xb8\xba3\npool.map(a, list)\n"""
standard_library/process/simple_core.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 17-5-7 \xe4\xb8\x8b\xe5\x8d\x8811:16\n# @Author  : tom.lee\n# @Site    : \n# @File    : simple_core.py\n# @Software: PyCharm\n\n\nfrom multiprocessing import Process\nimport time\nimport os\n\n\ndef worker_1(interval):\n    print(""worker_1,\xe7\x88\xb6\xe8\xbf\x9b\xe7\xa8\x8b(%s),\xe5\xbd\x93\xe5\x89\x8d\xe8\xbf\x9b\xe7\xa8\x8b(%s)"" % (os.getppid(), os.getpid()))\n    t_start = time.time()\n    time.sleep(interval)\n    t_end = time.time()\n    print(""worker_1,\xe6\x89\xa7\xe8\xa1\x8c\xe6\x97\xb6\xe9\x97\xb4\xe4\xb8\xba\'%0.2f\'\xe7\xa7\x92"" % (t_end - t_start))\n\n\ndef worker_2(interval):\n    print(""worker_2,\xe7\x88\xb6\xe8\xbf\x9b\xe7\xa8\x8b(%s),\xe5\xbd\x93\xe5\x89\x8d\xe8\xbf\x9b\xe7\xa8\x8b(%s)"" % (os.getppid(), os.getpid()))\n    t_start = time.time()\n    time.sleep(interval)\n    t_end = time.time()\n    print(""worker_2,\xe6\x89\xa7\xe8\xa1\x8c\xe6\x97\xb6\xe9\x97\xb4\xe4\xb8\xba\'%0.2f\'\xe7\xa7\x92"" % (t_end - t_start))\n\n\nif __name__ == ""__main__"":\n    print(""\xe8\xbf\x9b\xe7\xa8\x8bID\xef\xbc\x9a%s"" % os.getpid())\n    # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe6\x8c\x87\xe5\xae\x9aname\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe7\x9a\x84\xe8\xbf\x9b\xe7\xa8\x8b\xe5\xaf\xb9\xe8\xb1\xa1\xe5\x90\x8d\xe7\xa7\xb0\xe4\xb8\xbaProcess-N\xef\xbc\x8cN\xe4\xb8\xba\xe4\xb8\x80\xe4\xb8\xaa\xe9\x80\x92\xe5\xa2\x9e\xe7\x9a\x84\xe6\x95\xb4\xe6\x95\xb0\n    p1 = Process(target=worker_1, args=(20,))\n    p1.start()\n    # p1.join() # \xe9\x98\xbb\xe5\xa1\x9e\xef\xbc\x8c\xe7\xa6\x81\xe6\xad\xa2\xe5\xb9\xb6\xe5\x8f\x91\n    p2 = Process(target=worker_2, name=""dongGe"", args=(10,))\n\n    p2.start()\n    print(""p2.is_alive=%s"" % p2.is_alive())\n    print(""p1.name=%s"" % p1.name)\n    print(""p1.pid=%s"" % p1.pid)\n    print(""p2.name=%s"" % p2.name)\n    print(""p2.pid=%s"" % p2.pid)\n    # p1.join()\xe3\x80\x80# \xe7\x84\xb6\xe8\x80\x8c\xe6\xb2\xa1\xe4\xbb\x80\xe4\xb9\x88\xe5\x8d\xb5\xe7\x94\xa8\n    print(""p1.is_alive=%s"" % p1.is_alive())\n'"
standard_library/threads/__init__.py,0,b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2017/4/29 14:43\n# @Author  : Aries\n# @Site    : \n# @File    : __init__.py.py\n# @Software: PyCharm\n\n'
standard_library/threads/demo_consumer_producer.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2017/4/29 14:44\n# @Author  : tom.lee\n# @Site    : \n# @File    : consumer_producer.py\n# @Software: PyCharm\n\n\nimport time\nimport threading\nimport Queue\n\n\nclass Consumer(threading.Thread):\n    def __init__(self, queue):\n        threading.Thread.__init__(self)\n        self._queue = queue\n\n    def run(self):\n        while True:\n            msg = self._queue.get()\n            if isinstance(msg, str) and msg == \'quit\':\n                break\n            print ""I\'m a thread, and I received %s!!"" % msg\n            self._queue.task_done()\n        print \'Bye byes!\'\n\n\ndef producer():\n    queue = Queue.Queue()\n    worker = Consumer(queue)\n    worker.start()\n    start_time = time.time()\n    # While under 5 seconds..\n    while time.time() - start_time < 5:\n        queue.put(\'something at %s\' % time.time())\n        time.sleep(1)\n    queue.put(\'quit\')\n    worker.join()\n\n\nif __name__ == \'__main__\':\n    print \'test\'\n    producer()\n'"
standard_library/threads/my_thread_pool.py,0,"b""#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2017/4/29 17:06\n# @Author  : Aries\n# @Site    : \n# @File    : threadPool.py\n# @Software: PyCharm\n\nimport threading\n\n\nclass _Worker(threading.Thread):\n    def __init__(self, queue, func, *args, **kwargs):\n        super(_Worker, self).__init__(*args, **kwargs)\n        self.__queue = queue\n        self.__func = func\n\n    def __task(self):\n        args = self.__queue.get()\n        self.__func(args)\n        self.__queue.task_done()\n\n    def run(self):\n        while True:\n            self.__task()\n\n\nclass ReThreadPool(object):\n    def __init__(self, queue, func, daemon=False, num=10):\n        self.daemon = daemon\n        self.num = num\n        self.queue = queue\n        self.func = func\n\n    def execute(self):\n        for _ in range(self.num):\n            worker = _Worker(self.queue, self.func)\n            if self.daemon:\n                worker.setDaemon(True)\n            worker.start()\n        self.queue.join()\n\n\nif __name__ == '__main__':\n    import time\n    import Queue\n\n    start_time = time.time()\n    q = Queue.Queue()\n    for i in range(50):\n        q.put(i)\n\n\n    def test(num):\n        time.sleep(1)\n        print 'num:%d' % num\n        return\n\n\n    ReThreadPool(q, test).execute()\n    # \xe9\x98\x9f\xe5\x88\x97\xe5\x8a\xa0\xe5\x85\xa5\xe6\x96\xb0\xe6\x95\xb0\xe6\x8d\xae\n    for i in range(50, 100):\n        q.put(i)\n    print time.time() - start_time\n"""
standard_library/threads/rethread.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 17-4-23 \xe4\xb8\x8b\xe5\x8d\x889:31\n# @Author  : tom.lee\n# @Site    : \xe9\x87\x8d\xe5\x86\x99\xe5\xb8\xa6\xe9\x80\x80\xe5\x87\xba\xe6\x96\xb9\xe6\xb3\x95\xe7\x9a\x84\xe7\xba\xbf\xe7\xa8\x8b\xe7\xb1\xbb\n# @File    : rethread.py\n# @Software: PyCharm\n\n\nimport threading\n\n\nclass ReThread(threading.Thread):\n    def __init__(self, *args, **kwargs):\n        super(ReThread, self).__init__(*args, **kwargs)\n        self.__flag = threading.Event()  # \xe7\x94\xa8\xe4\xba\x8e\xe6\x9a\x82\xe5\x81\x9c\xe7\xba\xbf\xe7\xa8\x8b\xe7\x9a\x84\xe6\xa0\x87\xe8\xaf\x86\n        self.__flag.set()  # \xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xbaTrue\n        self.__running = threading.Event()  # \xe7\x94\xa8\xe4\xba\x8e\xe5\x81\x9c\xe6\xad\xa2\xe7\xba\xbf\xe7\xa8\x8b\xe7\x9a\x84\xe6\xa0\x87\xe8\xaf\x86\n        self.__running.set()  # \xe5\xb0\x86running\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xbaTrue\n\n    @property\n    def is_running(self):\n        """"""\n        \xe8\x8e\xb7\xe5\x8f\x96\xe8\xbf\x90\xe8\xa1\x8c\xe6\xa0\x87\xe5\xbf\x97\n        :return: True/False\n        """"""\n        return self.__running.isSet()\n\n    def run(self):\n        """"""\n        \xe4\xbd\xbf\xe7\x94\xa8while \xe5\xbe\xaa\xe7\x8e\xaf,\xe4\xbd\xbf\xe7\x94\xa8self.is_running \xe6\x9d\xa5\xe8\x8e\xb7\xe5\x8f\x96\xe8\xbf\x90\xe8\xa1\x8c\xe6\xa0\x87\xe5\xbf\x97\xe4\xbd\x8d\n        """"""\n        pass\n\n    def stop(self):\n        """"""\n        \xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xbaFalse, \xe8\xae\xa9\xe7\xba\xbf\xe7\xa8\x8b\xe9\x98\xbb\xe5\xa1\x9e\n        """"""\n        self.__flag.clear()\n\n    def resume(self):\n        """"""\n        \xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xbaTrue, \xe8\xae\xa9\xe7\xba\xbf\xe7\xa8\x8b\xe5\x81\x9c\xe6\xad\xa2\xe9\x98\xbb\xe5\xa1\x9e\n        """"""\n        self.__flag.set()\n\n    def exit(self):\n        """"""\n        \xe6\x9a\x82\xe5\x81\x9c\xe6\xa0\x87\xe5\xbf\x97\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xbaTrue\n        \xe8\xbf\x90\xe8\xa1\x8c\xe6\xa0\x87\xe5\xbf\x97\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xbaFalse\n        """"""\n        self.__flag.set()\n        self.__running.clear()\n\nif __name__==""__main__"":\n    rt= ReThread()\n    rt.start()\n    print \'111\'\n    # rt.join()\n'"
standard_library/threads/thread_pool_test.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2017/4/29 14:46\n# @Author  : TOM\n# @Site    : \xe6\xa8\xa1\xe6\x8b\x9f\xe7\xba\xbf\xe7\xa8\x8b\xe6\xb1\xa0\n# @File    : thread_pool_test.py\n# @Software: PyCharm\n\n\nimport time\nimport threading\nimport Queue\nimport urllib2\n\n\nclass Consumer(threading.Thread):\n    def __init__(self, queue):\n        threading.Thread.__init__(self)\n        self._queue = queue\n\n    def run(self):\n        while True:\n            content = self._queue.get()\n            print content\n            response = urllib2.urlopen(content)\n            self._queue.task_done()\n            print content,\'_______________ok\'\n\n\ndef build_worker_pool(queue, size):\n    workers = []\n    for _ in range(size):\n        worker = Consumer(queue)\n        # \xe9\x80\x9a\xe8\xbf\x87setDaemon(true)\xe6\x9d\xa5\xe8\xae\xbe\xe7\xbd\xae\xe7\xba\xbf\xe7\xa8\x8b\xe4\xb8\xba\xe2\x80\x9c\xe5\xae\x88\xe6\x8a\xa4\xe7\xba\xbf\xe7\xa8\x8b\xe2\x80\x9d\n        # \xe5\x9c\xa8\xe6\xb2\xa1\xe6\x9c\x89\xe7\x94\xa8\xe6\x88\xb7\xe7\xba\xbf\xe7\xa8\x8b\xe5\x8f\xaf\xe6\x9c\x8d\xe5\x8a\xa1\xe6\x97\xb6\xe4\xbc\x9a\xe8\x87\xaa\xe5\x8a\xa8\xe7\xa6\xbb\xe5\xbc\x80\n        worker.setDaemon(True)\n        worker.start()\n        workers.append(worker)\n    return workers\n\n\ndef Producer():\n    urls = [\n        \'http://www.python.org\',\n        \'http://www.python.org/about/\',\n        \'http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html\',\n        \'http://www.python.org/doc/\',\n        \'http://www.python.org/download/\',\n        \'http://www.python.org/getit/\',\n        \'http://www.python.org/community/\',\n        \'https://wiki.python.org/moin/\',\n        \'http://planet.python.org/\',\n        \'https://wiki.python.org/moin/LocalUserGroups\',\n        \'http://www.python.org/psf/\',\n        \'http://docs.python.org/devguide/\',\n        \'http://www.python.org/community/awards/\'\n        # etc..\n    ]\n    start_time = time.time()\n    queue = Queue.Queue()\n    build_worker_pool(queue, 4)\n    for url in urls:\n        queue.put(url)\n\n    queue.join()\n    print \'time use :\', time.time() - start_time\n\n\n\n\nif __name__ == ""__main__"":\n    Producer()\n'"
standard_library/threads/thread_pool_test2.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2017/4/29 16:50\n# @Author  : Aries\n# @Site    : \n# @File    : thread_pool_test2.py\n# @Software: PyCharm\n\n\nimport Queue\nimport threading\nimport urllib2\nimport time\n\n\nclass ThreadUrl(threading.Thread):\n    """"""Threaded Url Grab""""""\n\n    def __init__(self, queue):\n        threading.Thread.__init__(self)\n        self.queue = queue\n\n    def run(self):\n        while True:\n            # \xe4\xbb\x8e\xe9\x98\x9f\xe5\x88\x97\xe6\x8a\x93\xe5\x8f\x96\xe4\xb8\xbb\xe6\x9c\xba\n            # print self.queue\n            # print self.queue.qsize()\n            host = self.queue.get()\n            print host,\'**************************\'\n            # \xe6\x8a\x93\xe5\x8f\x96\xe4\xb8\xbb\xe6\x9c\xba\xe7\x9a\x84URL\xe5\x92\x8c\xe6\x89\x93\xe5\x8d\xb0\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa1024\xe5\xad\x97\xe8\x8a\x82\xe7\x9a\x84\xe9\xa1\xb5\xe9\x9d\xa2\n            url = urllib2.urlopen(host)\n            # print url.read(10)\n            # \xe9\x98\x9f\xe5\x88\x97\xe5\xb7\xa5\xe4\xbd\x9c\xe7\x9a\x84\xe4\xbf\xa1\xe5\x8f\xb7\xe5\xae\x8c\xe6\x88\x90\n            self.queue.task_done()\n\n\nhosts = [\n    \'http://www.python.org\',\n    \'http://www.python.org/about/\',\n    \'http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html\',\n    \'http://www.python.org/doc/\',\n    \'http://www.python.org/download/\',\n    \'http://www.python.org/getit/\',\n    \'http://www.python.org/community/\',\n    \'https://wiki.python.org/moin/\',\n    \'http://planet.python.org/\',\n    \'https://wiki.python.org/moin/LocalUserGroups\',\n    \'http://www.python.org/psf/\',\n    \'http://docs.python.org/devguide/\',\n    \'http://www.python.org/community/awards/\'\n]\n\n\ndef main():\n    start = time.time()\n    # \xe5\x88\x9b\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\xaa Queue.Queue() \xe7\x9a\x84\xe5\xae\x9e\xe4\xbe\x8b\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe4\xbd\xbf\xe7\x94\xa8\xe6\x95\xb0\xe6\x8d\xae\xe5\xaf\xb9\xe5\xae\x83\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa1\xab\xe5\x85\x85\xe3\x80\x82\n    queue = Queue.Queue()\n    # \xe7\x94\x9f\xe6\x88\x90\xe7\xba\xbf\xe7\xa8\x8b\xe6\xb1\xa0\xef\xbc\x8c\xe5\xb9\xb6\xe4\xbc\xa0\xe9\x80\x92\xe9\x98\x9f\xe5\x88\x97\xe5\xae\x9e\xe4\xbe\x8b\n    for i in range(4):\n        t = ThreadUrl(queue)\n        # \xe9\x80\x9a\xe8\xbf\x87\xe5\xb0\x86\xe5\xae\x88\xe6\x8a\xa4\xe7\xba\xbf\xe7\xa8\x8b\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba true\xef\xbc\x8c\n        # \xe5\xb0\x86\xe5\x85\x81\xe8\xae\xb8\xe4\xb8\xbb\xe7\xba\xbf\xe7\xa8\x8b\xe6\x88\x96\xe8\x80\x85\xe7\xa8\x8b\xe5\xba\x8f\xe4\xbb\x85\xe5\x9c\xa8\xe5\xae\x88\xe6\x8a\xa4\xe7\xba\xbf\xe7\xa8\x8b\xe5\xa4\x84\xe4\xba\x8e\xe6\xb4\xbb\xe5\x8a\xa8\xe7\x8a\xb6\xe6\x80\x81\xe6\x97\xb6\xe6\x89\x8d\xe8\x83\xbd\xe5\xa4\x9f\xe9\x80\x80\xe5\x87\xba\xe3\x80\x82\n        t.setDaemon(True)\n        t.start()\n    # \xe7\x94\xa8\xe6\x95\xb0\xe6\x8d\xae\xe5\xa1\xab\xe5\x85\x85\xe9\x98\x9f\xe5\x88\x97\n    for host in hosts:\n        queue.put(host)\n    # \xe7\xad\x89\xe5\xbe\x85\xe9\x98\x9f\xe5\x88\x97\xef\xbc\x8c\xe7\x9b\xb4\xe5\x88\xb0\xe4\xb8\x80\xe5\x88\x87\xe9\x83\xbd\xe8\xa2\xab\xe5\xa4\x84\xe7\x90\x86\n    queue.join()\n    print ""Elapsed Time: %s"" % (time.time() - start)\n\n\nmain()\n\n'"
OpenStack/oslo_/config/config_parser.py,0,"b""#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-31 \xe4\xb8\x8b\xe5\x8d\x881:29\n# @Author         : Tom.Lee\n# @File           : config_parser.py\n# @Product        : PyCharm\n# @Docs           : \n# @Source         : \n\nfrom oslo_config import cfg\nfrom oslo_config import types\n\n\nclass ConfigManager(object):\n    PortType = types.Integer(1, 65535)\n    default_opts = [\n        cfg.StrOpt(\n            'bind_host',\n            default='0.0.0.0',\n            help='IP address to listen on.'),\n        cfg.Opt(\n            'bind_port',  # \xe5\x8f\xaa\xe6\x9c\x89Opt\xe7\xb1\xbb\xe5\x9e\x8b\xe6\x89\x8d\xe8\x83\xbd\xe6\x8c\x87\xe5\xae\x9aPortType\n            type=PortType,\n            default=9292,\n            help='Port number to listen on.')\n    ]\n    default_opt = cfg.ListOpt(\n        'enabled_api',\n        default=['ec2', 'api_compute'],\n        help='List of APIs to enable by default.')\n    cli_opts = [\n        cfg.BoolOpt('verbose',\n                    short='v',\n                    default=False,\n                    help='Print more verbose output'),\n        cfg.BoolOpt('debug',\n                    short='d',\n                    default=False,\n                    help='Print debugging output'),\n    ]\n    rabbit_group = cfg.OptGroup(\n        name='RABBIT',\n        title='RABBIT options'\n    )\n    rabbit_opt = cfg.BoolOpt(\n        'ssl',\n        default=False,\n        help='use ssl for connection')\n    rabbit_opts = [\n        cfg.StrOpt(\n            'host',\n            default='localhost',\n            help='IP/hostname to listen on.'),\n        cfg.IntOpt(\n            'port',\n            default=5672,\n            help='Port number to listen on.')\n    ]\n\n    def __init__(self):\n        self.conf = cfg.CONF\n        self._register_opts()\n\n    def _register_opts(self):\n        # default\n        self.conf.register_opt(self.default_opt)\n        self.conf.register_opts(self.default_opts)\n        # rabbit\n        self.conf.register_group(self.rabbit_group)\n        self.conf.register_opts(self.rabbit_opts, self.rabbit_group)\n        self.conf.register_opt(self.rabbit_opt, self.rabbit_group)\n        # cli\n        self.conf.register_cli_opts(self.cli_opts)\n        self.conf(default_config_files=['config.conf'])\n\n    @property\n    def bind_port(self):\n        return getattr(self.conf, 'bind_port', None)\n\n    @property\n    def bind_host(self):\n        return getattr(self.conf, 'bind_host', None)\n\n\nconfig_manager = ConfigManager()\nif __name__ == '__main__':\n    print config_manager.bind_port\n    print config_manager.bind_host\n"""
OpenStack/oslo_/config/config_test.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-31 \xe4\xb8\x8a\xe5\x8d\x8810:40\n# @Author         : Tom.Lee\n# @File           : config.py\n# @Product        : PyCharm\n# @Docs           : \n# @Source         : https://github.com/openstack/oslo.config/blob/master/oslo_config/cfg.py\n\n""""""\n\xe9\x85\x8d\xe7\xbd\xae\xe6\x96\x87\xe4\xbb\xb6\xe4\xb8\xad\xe7\x9a\x84\xe9\x80\x89\xe9\xa1\xb9(group, opts)\xef\xbc\x8c\xe5\xbf\x85\xe9\xa1\xbb\xe5\x9c\xa8\xe4\xbb\xa3\xe7\xa0\x81\xe4\xb8\xad\xe6\x98\xbe\xe7\xa4\xba\xe7\x9a\x84\xe6\xb3\xa8\xe5\x86\x8c\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe6\x97\xa0\xe6\xb3\x95\xe8\xa7\xa3\xe6\x9e\x90\n""""""\n\nfrom oslo_config import cfg\nfrom oslo_config import types\n\n# \xe7\xab\xaf\xe5\x8f\xa3\xe8\xa7\x84\xe8\x8c\x83\nPortType = types.Integer(1, 65535)\n\n# \xe5\xa4\x9a\xe4\xb8\xaa\xe9\x85\x8d\xe7\xbd\xae\xe9\xa1\xb9\xe7\xbb\x84\xe6\x88\x90\xe4\xb8\x80\xe4\xb8\xaa\xe6\xa8\xa1\xe5\xbc\x8f\ndefault_opts = [\n    cfg.StrOpt(\'bind_host\',\n               default=\'0.0.0.0\',\n               help=\'IP address to listen on.\'),\n    cfg.Opt(\'bind_port\',  # \xe5\x8f\xaa\xe6\x9c\x89Opt\xe7\xb1\xbb\xe5\x9e\x8b\xe6\x89\x8d\xe8\x83\xbd\xe6\x8c\x87\xe5\xae\x9aPortType\n            type=PortType,\n            default=9292,\n            help=\'Port number to listen on.\')\n]\n\n# \xe5\x8d\x95\xe4\xb8\xaa\xe9\x85\x8d\xe7\xbd\xae\xe9\xa1\xb9\xe6\xa8\xa1\xe5\xbc\x8f\ndefault_opt = cfg.ListOpt(\'enabled_api\',\n                          default=[\'ec2\', \'api_compute\'],\n                          help=\'List of APIs to enable by default.\')\n\n# \xe5\x91\xbd\xe4\xbb\xa4\xe8\xa1\x8c\xe9\x80\x89\xe9\xa1\xb9\ncli_opts = [\n    cfg.BoolOpt(\'verbose\',\n                short=\'v\',\n                default=False,\n                help=\'Print more verbose output\'),\n    cfg.BoolOpt(\'debug\',\n                short=\'d\',\n                default=False,\n                help=\'Print debugging output\'),\n]\n\n# \xe9\x85\x8d\xe7\xbd\xae rabbit_group \xe7\xbb\x84\nrabbit_group = cfg.OptGroup(\n    name=\'RABBIT\',\n    title=\'RABBIT options\'\n)\n# \xe9\x85\x8d\xe7\xbd\xae\xe7\xbb\x84\xe4\xb8\xad\xe7\x9a\x84\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe9\x80\x9a\xe5\xb8\xb8\xe4\xbb\xa5\xe9\x85\x8d\xe7\xbd\xae\xe7\xbb\x84\xe7\x9a\x84\xe5\x90\x8d\xe7\xa7\xb0\xe4\xb8\xba\xe5\x89\x8d\xe7\xbc\x80\xef\xbc\x88\xe9\x9d\x9e\xe5\xbf\x85\xe9\xa1\xbb\xef\xbc\x89\nrabbit_opt = cfg.BoolOpt(\'ssl\',\n                         default=False,\n                         help=\'use ssl for connection\')\n# \xe9\x85\x8d\xe7\xbd\xae\xe7\xbb\x84\xe4\xb8\xad\xe7\x9a\x84\xe5\xa4\x9a\xe9\x85\x8d\xe7\xbd\xae\xe9\xa1\xb9\xe6\xa8\xa1\xe5\xbc\x8f\nrabbit_opts = [\n    cfg.StrOpt(\'host\',\n               default=\'localhost\',\n               help=\'IP/hostname to listen on.\'),\n    cfg.IntOpt(\'port\',\n               default=5672,\n               help=\'Port number to listen on.\')\n]\n\n\ndef register_default_opts(conf):\n    """"""\n    \xe6\xb3\xa8\xe5\x86\x8c\xe9\xbb\x98\xe8\xae\xa4\xe7\xbb\x84\xe7\x9a\x84\xe9\x85\x8d\xe7\xbd\xae\xe9\xa1\xb9\n    """"""\n    conf.register_opt(default_opt)\n    conf.register_opts(default_opts)\n\n\ndef register_rabbit_group(conf):\n    """"""\n    \xe6\xb3\xa8\xe5\x86\x8c\xe3\x80\x80rabbit \xe4\xbf\xa1\xe6\x81\xaf\n    """"""\n    # \xe9\x85\x8d\xe7\xbd\xae\xe7\xbb\x84\xe5\xbf\x85\xe9\xa1\xbb\xe5\x9c\xa8\xe5\x85\xb6\xe7\xbb\x84\xe4\xbb\xb6\xe8\xa2\xab\xe6\xb3\xa8\xe5\x86\x8c\xe5\x89\x8d\xe6\xb3\xa8\xe5\x86\x8c\xef\xbc\x81\n    conf.register_group(rabbit_group)\n    # \xe6\xb3\xa8\xe5\x86\x8c\xe9\x85\x8d\xe7\xbd\xae\xe7\xbb\x84\xe4\xb8\xad\xe5\x90\xab\xe6\x9c\x89\xe5\xa4\x9a\xe4\xb8\xaa\xe9\x85\x8d\xe7\xbd\xae\xe9\xa1\xb9\xe7\x9a\x84\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe5\xbf\x85\xe9\xa1\xbb\xe6\x8c\x87\xe6\x98\x8e\xe9\x85\x8d\xe7\xbd\xae\xe7\xbb\x84\n    conf.register_opts(rabbit_opts, rabbit_group)\n    # \xe6\xb3\xa8\xe5\x86\x8c\xe9\x85\x8d\xe7\xbd\xae\xe7\xbb\x84\xe4\xb8\xad\xe7\x9a\x84\xe5\x8d\x95\xe9\x85\x8d\xe7\xbd\xae\xe9\xa1\xb9\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe6\x8c\x87\xe6\x98\x8e\xe9\x85\x8d\xe7\xbd\xae\xe7\xbb\x84\n    conf.register_opt(rabbit_opt, rabbit_group)\n\n\ndef register_cli_opts(conf):\n    """"""\n    \xe6\xb3\xa8\xe5\x86\x8c\xe3\x80\x80cli \xe9\x80\x89\xe9\xa1\xb9\n    :param conf:\n    :return:\n    """"""\n    conf.register_cli_opts(cli_opts)\n\n\ndef get_bind_host(conf):\n    """"""\n    \xe4\xbd\xbf\xe7\x94\xa8\xe9\x80\x89\xe9\xa1\xb9 bind_host\n    """"""\n    return getattr(conf, \'bind_host\', None)\n\n\ndef get_bind_port(conf):\n    """"""\n    \xe4\xbd\xbf\xe7\x94\xa8\xe9\x80\x89\xe9\xa1\xb9 bind_port\n    """"""\n    return conf.bind_port\n\n\ndef get_rabbit_username(conf):\n    """"""\n    \xe9\x85\x8d\xe7\xbd\xae\xe6\x96\x87\xe4\xbb\xb6\xe4\xb8\xad\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x8c\xe4\xbb\xa3\xe7\xa0\x81\xe6\xb2\xa1\xe6\x9c\x89\xe6\xb3\xa8\xe5\x86\x8c\xef\xbc\x8c\xe4\xb8\x8d\xe8\x83\xbd\xe8\xa7\xa3\xe6\x9e\x90\n    """"""\n    return conf.RABBIT.username\n\n\nif __name__ == \'__main__\':\n    # \xe5\x88\x9b\xe5\xbb\xba\xe9\x85\x8d\xe7\xbd\xae\xe7\xb1\xbb\n    config = cfg.CONF\n    # \xe5\xbc\x80\xe5\xa7\x8b\xe6\xb3\xa8\xe5\x86\x8cdefault\n    register_default_opts(config)\n    register_rabbit_group(config)\n    register_cli_opts(config)\n\n    # \xe5\x8a\xa0\xe8\xbd\xbd\xe9\x85\x8d\xe7\xbd\xae\xe6\x96\x87\xe4\xbb\xb6\n    config(default_config_files=[\'config.conf\'])\n    print \'host:\', get_bind_host(config)\n    # list_all_sections\n    for section in config.list_all_sections():\n        print section\n\n    print config.RABBIT\n    print config.RABBIT.host\n    print get_rabbit_username(config)\n'"
contributed_modules/mysql/mysqldb_/__init__.py,0,b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-30 \xe4\xb8\x8b\xe5\x8d\x883:49\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : __init__.py.py\n# @Product        : PyCharm\n# @Docs           : \n# @Source         : \n\n\n'
contributed_modules/mysql/mysqldb_/mysql_lock.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2017/8/25 22:42\n# @Author  : Tom.lee\n# @Site    : \n# @File    : mysql_lock.py\n# @Software: PyCharm\n\n\n""""""\n\xe9\x80\x9a\xe8\xbf\x87MySQL\xe5\xae\x9e\xe7\x8e\xb0\xe5\x88\x86\xe5\xb8\x83\xe5\xbc\x8f\xe9\x94\x81\xe6\x9c\x8d\xe5\x8a\xa1\n""""""\nimport MySQLdb\nimport logging\nimport time\n\nFORMAT_STR = \'%(asctime)s -%(module)s:%(filename)s-L%(lineno)d-%(levelname)s: %(message)s\'\nlogger = logging.getLogger()\nlogger.setLevel(logging.DEBUG)\nformatter = logging.Formatter(FORMAT_STR)\nhandler = logging.StreamHandler()\nhandler.setFormatter(formatter)\nlogger.addHandler(handler)\nlogging.info(""Current log level is : %s"", logging.getLevelName(logger.getEffectiveLevel()))\n\n\nclass MySqlLock(object):\n    LOCK_SQL = ""SELECT get_lock(\'{key}\', {timeout}) FROM dual""\n    UNLOCK_SQL = ""SELECT release_lock(\'{key}\') FROM dual""\n\n    def __init__(self, lock_key=None, *args, **kwargs):\n        """"""\n        :param lock_key:\n        :param args:    \xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\x8eMySQLdb\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\x80\xe8\x87\xb4.\n        :param kwargs:  \xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\x8eMySQLdb\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\x80\xe8\x87\xb4.\n                    host=\'localhost\'\n                    user=\'test\'\n                    passwd=\'test\'\n                    db=\'test\'\n        """"""\n        self.__db = MySQLdb.connect(*args, **kwargs)\n        self.lock_key = lock_key or \'7ab18906739e4662ac01e69f5ebb7352\'\n\n    def _execute(self, sql):\n        """"""\n        MySQL\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xe6\x93\x8d\xe4\xbd\x9c\n        :param sql:\n        :return: (1L,) --> tuple\n        """"""\n        res = (-1,)\n        cursor = self.__db.cursor()\n        try:\n            cursor.execute(sql)\n            if cursor.rowcount != 1:\n                logging.error(""Multiple rows returned in mysql lock function."")\n            else:\n                res = cursor.fetchone()\n        except Exception, ex:\n            logging.error(""\xe6\x89\xa7\xe8\xa1\x8cSQL\\""%s\\"" \xe5\xa4\xb1\xe8\xb4\xa5! \xe5\xbc\x82\xe5\xb8\xb8\xe4\xbf\xa1\xe6\x81\xaf: %s"", sql, str(ex))\n        finally:\n            cursor.close()\n        return res\n\n    def lock(self, timeout):\n        """"""\n        MySQL\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xe5\x8a\xa0\xe9\x94\x81\n        :param timeout:  \xe8\xb6\x85\xe6\x97\xb6\xe6\x97\xb6\xe9\x97\xb4\n        :return:\n        """"""\n        # \xe5\x8a\xa0\xe9\x94\x81\xe6\x93\x8d\xe4\xbd\x9c\n        lk = self._execute(self.LOCK_SQL.format(key=self.lock_key, timeout=timeout))\n\n        if lk[0] == 0:\n            logging.debug(""\xe9\x94\x81\'%s\'\xe5\xb7\xb2\xe7\xbb\x8f\xe8\xa2\xab\xe5\x88\x9b\xe5\xbb\xba."", self.lock_key)\n            return False\n        elif lk[0] == 1:\n            logging.debug(""\xe5\x88\x9b\xe5\xbb\xba\xe9\x94\x81\'%s\'."" % self.lock_key)\n            return True\n        else:\n            logging.error(""\xe8\x8e\xb7\xe5\x8f\x96\xe9\x94\x81\xe5\xa4\xb1\xe8\xb4\xa5!"")\n            return None\n\n    def unlock(self):\n        """"""\n        \xe9\x87\x8a\xe6\x94\xbeMySQL\xe9\x94\x81.\n        :return:\n        """"""\n        # \xe9\x87\x8a\xe6\x94\xbe\xe6\x93\x8d\xe4\xbd\x9c\n        uk = self._execute(self.UNLOCK_SQL.format(key=self.lock_key))\n\n        if uk[0] == 0:\n            logging.debug(""\xe9\x87\x8a\xe6\x94\xbe\xe9\x94\x81\'%s\'\xe5\xa4\xb1\xe8\xb4\xa5(\xe8\xaf\xa5\xe9\x94\x81\xe8\xa2\xab\xe5\x85\xb6\xe4\xbb\x96\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x8c\x81\xe6\x9c\x89)"" % self.lock_key)\n            return False\n        elif uk[0] == 1:\n            logging.debug(""\xe9\x87\x8a\xe6\x94\xbe\xe9\x94\x81\'%s\'."" % self.lock_key)\n            return True\n        else:\n            logging.error(""\xe9\x94\x81\'%s\'\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8."" % self.lock_key)\n            return None\n\n\nif __name__ == ""__main__"":\n    l = MySqlLock(host=\'localhost\', user=\'root\', passwd=\'root\', db=\'iaasms\')\n    ret = l.lock(15)\n    if not ret:\n        logging.error(""\xe8\x8e\xb7\xe5\x8f\x96\xe9\x94\x81\xe5\xa4\xb1\xe8\xb4\xa5,\xe9\x80\x80\xe5\x87\xba!"")\n        quit()\n\n    time.sleep(15)  # \xe6\xa8\xa1\xe6\x8b\x9f\xe8\xb7\xa8\xe8\xbf\x9b\xe7\xa8\x8b\xe7\x9a\x84\xe5\x90\x8c\xe6\xad\xa5\xe6\x93\x8d\xe4\xbd\x9c!\n    # raise Exception(\'\xe6\xa8\xa1\xe6\x8b\x9f\xe6\x93\x8d\xe4\xbd\x9c\xe5\xbc\x82\xe5\xb8\xb8,mysql\xe4\xbc\x9a\xe8\x87\xaa\xe5\x8a\xa8\xe9\x87\x8a\xe6\x94\xbe\xe8\xaf\xa5\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x8c\x81\xe6\x9c\x89\xe7\x9a\x84\xe9\x94\x81.\')\n    # TODO something\n    print \'hello ok!\'\n\n    l.unlock()\n'"
contributed_modules/mysql/mysqldb_/study_mysqldb.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-3-27 \xe4\xb8\x8b\xe5\x8d\x884:29\n# @Author         : Tom.Lee\n# @Description    : mysql \xe6\x93\x8d\xe4\xbd\x9c\n# @File           : study_mysql.py\n# @Product        : PyCharm\nimport MySQLdb\nimport logging\nfrom contextlib import closing\n\n""""""\n# # \xef\xbc\x91\xef\xbc\x8e\xe5\x88\x9b\xe5\xbb\xba\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xe7\x9a\x84\xe8\xbf\x9e\xe6\x8e\xa5\n# conn = MySQLdb.connect(host=\'localhost\', port=3306, user=\'root\',\n#                        passwd=\'root\', db=\'iaasms_dev\', )\n#\n# # \xef\xbc\x92\xef\xbc\x8e\xe5\x88\x9b\xe5\xbb\xba\xe6\xb8\xb8\xe6\xa0\x87\n# cur = conn.cursor(MySQLdb.cursors.DictCursor)\n#\n# # \xef\xbc\x93\xef\xbc\x8e\xe9\x80\x9a\xe8\xbf\x87\xe6\xb8\xb8\xe6\xa0\x87cur \xe6\x93\x8d\xe4\xbd\x9cexecute()\xe6\x96\xb9\xe6\xb3\x95\xe5\x8f\xaf\xe4\xbb\xa5\xe5\x86\x99\xe5\x85\xa5\xe7\xba\xafsql\xe8\xaf\xad\xe5\x8f\xa5\xe5\xaf\xb9\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x93\x8d\xe4\xbd\x9c\n# sql = \'\'\'\n# SELECT a.name AS snapshot_name, b.name AS volume_name\n# FROM snapshot a INNER JOIN volume b\n# ON a.volume_id=b.volume_id\n# \'\'\'\n# count = cur.execute(sql)  # \xe8\xbf\x94\xe5\x9b\x9e\xe6\x80\xbb\xe6\x9d\xa1\xe6\x95\xb0\n# # result = cur.fetchmany(count)  # \xe8\xbf\x94\xe5\x9b\x9e\xe6\x8c\x87\xe5\xae\x9a\xe6\x9d\xa1\xe7\x9b\xae\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe9\x9b\x86\n# result = cur.fetchall()\n# # \xef\xbc\x94\xef\xbc\x8e\xe5\x85\xb3\xe9\x97\xad\xe6\xb8\xb8\xe6\xa0\x87\n# cur.close()\n#\n# # \xef\xbc\x95\xef\xbc\x8e\xe6\x8f\x90\xe4\xba\xa4\xe4\xba\x8b\xe5\x8a\xa1\xef\xbc\x8c\xe5\xbf\x85\xe9\xa1\xbb\xe8\xa6\x81\xe6\x9c\x89\xe8\xbf\x99\xe4\xb8\xaa\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8d\xe4\xbc\x9a\xe8\xa2\xab\xe7\x9c\x9f\xe6\xad\xa3\xe7\x9a\x84\xe6\x8f\x92\xe5\x85\xa5\xe3\x80\x82\n# conn.commit()\n#\n# # \xef\xbc\x96\xef\xbc\x8e\xe5\x85\xb3\xe9\x97\xad\xe8\xbf\x9e\xe6\x8e\xa5\n# conn.close()\n#\n# # ************\xe6\x89\x93\xe5\x8d\xb0***********\n# print result\n\n# \xe4\xb8\x80\xe6\xac\xa1\xe6\x8f\x92\xe5\x85\xa5\xe5\xa4\x9a\xe6\x9d\xa1\xe8\xae\xb0\xe5\xbd\x95,,\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe4\xb8\xba\xe5\x8f\x97\xe5\xbd\xb1\xe5\x93\x8d\xe7\x9a\x84\xe8\xa1\x8c\xe6\x95\xb0\xe3\x80\x82\n# sql=""insert into student values(%s,%s,%s,%s)""\n# cur.executemany(sql,[\n#     (\'3\',\'Tom\',\'1 year 1 class\',\'6\'),\n#     (\'3\',\'Jack\',\'2 year 1 class\',\'7\'),\n#     (\'3\',\'rick\',\'2 year 2 class\',\'7\'),\n#     ])\n\n# *******************close conn***************************\nfrom contextlib import closing\nimport MySQLdb\n\n\'\'\' At the beginning you open a DB connection. Particular moment when\n  you open connection depends from your approach:\n  - it can be inside the same function where you work with cursors\n  - in the class constructor\n  - etc\n\'\'\'\ndb = MySQLdb.connect(""host"", ""user"", ""pass"", ""database"")\nwith closing(db.cursor()) as cur:\n    cur.execute(""somestuff"")\n    results = cur.fetchall()\n    # do stuff with results\n\n    cur.execute(""insert operation"")\n    # call commit if you do INSERT, UPDATE or DELETE operations\n    db.commit()\n\n    cur.execute(""someotherstuff"")\n    results2 = cur.fetchone()\n    # do stuff with results2\n\n# at some point when you decided that you do not need\n# the open connection anymore you close it\ndb.close()\n\n""""""\n\n# \xe5\x88\x9b\xe5\xbb\xba\xe5\x90\x8d\xe4\xb8\xbaMySQL\xe7\x9a\x84\xe6\x97\xa5\xe5\xbf\x97\nlogger = logging.getLogger(\'MySQL\')\n# \xe8\xae\xbe\xe7\xbd\xaelogger\xe7\x9a\x84level\xe4\xb8\xbaDEBUG\nlogger.setLevel(logging.DEBUG)\n# \xe5\x88\x9b\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\xaa\xe8\xbe\x93\xe5\x87\xba\xe6\x97\xa5\xe5\xbf\x97\xe5\x88\xb0\xe6\x8e\xa7\xe5\x88\xb6\xe5\x8f\xb0\xe7\x9a\x84StreamHandler\nhandler = logging.StreamHandler()\nformatter = logging.Formatter(\'[%(asctime)s] %(name)s:%(levelname)s: %(message)s\')\nhandler.setFormatter(formatter)\n# \xe7\xbb\x99logger\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xb8\x8ahandler\nlogger.addHandler(handler)\n\n\nclass _Closing(closing):\n    def __exit__(self, *exc_info):\n        if self.thing:\n            self.thing.close()\n\n\nclass MySQLUtils(object):\n    def __init__(self, *args, **kwargs):\n        """"""\n        :param args:\n        :param kwargs:\n        """"""\n        for k, v in kwargs.iteritems():\n            setattr(self, k, v)\n\n        self.__args = args\n        self.__kwargs = kwargs\n        self.__connection = None\n        self.__cursor = None\n\n    def __enter__(self):\n        """"""\n        \xe6\x89\x93\xe5\xbc\x80\xe8\xb5\x84\xe6\xba\x90,\xe6\x94\xaf\xe6\x8c\x81with\xe8\xaf\xad\xe6\xb3\x95\n        :return: MySQLUtils instance\n        """"""\n        self.open()\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        """"""\n        \xe5\x85\xb3\xe9\x97\xad\xe8\xb5\x84\xe6\xba\x90,\xe6\x94\xaf\xe6\x8c\x81with\xe8\xaf\xad\xe6\xb3\x95\n        :param exc_type:\n        :param exc_val:\n        :param exc_tb:\n        :return:\n        """"""\n        self.close()\n        if exc_tb:\n            # \xe9\xbb\x98\xe8\xae\xa4\xe8\xbf\x94\xe5\x9b\x9eNone,\xe3\x80\x80\xe8\xbf\x94\xe5\x9b\x9eNone\xe6\x88\x96False \xe5\x8f\x91\xe7\x94\x9f\xe5\xbc\x82\xe5\xb8\xb8\xe4\xba\xa4\xe7\x94\xb1\xe5\xa4\x96\xe9\x83\xa8\xe8\xb0\x83\xe7\x94\xa8\xe7\xa8\x8b\xe5\xba\x8f\xe6\x8d\x95\xe8\x8e\xb7\xef\xbc\x88\xe5\xbb\xba\xe8\xae\xae\xef\xbc\x89\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe8\xbf\x94\xe5\x9b\x9eTrue,\xe5\x88\x99\xe7\x94\xb1\xe8\xaf\xa5\xe5\x87\xbd\xe6\x95\xb0\xe5\x86\x85\xe9\x83\xa8\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\xe5\xa4\x96\xe9\x83\xa8\xe8\xb0\x83\xe7\x94\xa8\xe4\xbc\x9a\xe7\xbb\xa7\xe7\xbb\xad\xe6\x89\xa7\xe8\xa1\x8c\n            logger.error(\'[%s]%s\' % (exc_type, exc_val))\n\n    def open(self):\n        """"""\n        \xe6\x89\x93\xe5\xbc\x80\xe8\xbf\x9e\xe6\x8e\xa5\n        :return:\n        """"""\n        if self.__connection:\n            raise MySQLdb.MySQLError(""connection already connected."")\n        self.__connection = MySQLdb.connect(*self.__args, **self.__kwargs)\n        if self.__cursor:\n            raise MySQLdb.MySQLError(""cursor already opened."")\n        self.__cursor = self.__connection.cursor(MySQLdb.cursors.DictCursor)\n        logger.info(""connection opened."")\n\n    def close(self):\n        """"""\n        \xe5\x85\xb3\xe9\x97\xad\xe8\xbf\x9e\xe6\x8e\xa5\n        :return:\n        """"""\n        with _Closing(self.__cursor) as _:\n            pass\n        with _Closing(self.__connection) as _:\n            pass\n        self.__cursor = None\n        self.__connection = None\n\n        logger.info(""connection close success."")\n\n    def __execute(self, sql, commit=False):\n        """"""\n        \xe6\x89\xa7\xe8\xa1\x8cSQL\n        :param sql:\n        :param commit:\n        :return:tuple result or row numbers\n        """"""\n        if not (self.__connection and self.__cursor):\n            raise MySQLdb.MySQLError(""connection already closed."")\n        count = self.__cursor.execute(sql)  # \xe8\xbf\x94\xe5\x9b\x9e\xe6\x80\xbb\xe6\x9d\xa1\xe6\x95\xb0\n        result = self.__cursor.fetchall()\n        self.__connection.commit() if commit else None\n        return count if commit else result\n\n    def select(self, sql, formatter_func=None):\n        """"""\n        \xe6\x9f\xa5\xe8\xaf\xa2\xe5\x87\xbd\xe6\x95\xb0\n        :param sql:\n        :param formatter_func:\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x8c\x96\xe5\x87\xbd\xe6\x95\xb0\n        :return:\n        """"""\n        if formatter_func:\n            return map(formatter_func, self.__execute(sql))\n        return self.__execute(sql)\n\n    def save_or_update(self, sql):\n        """"""\n        \xe7\xbc\x96\xe8\xbe\x91\xe6\x88\x96\xe4\xbf\xae\xe6\x94\xb9\n        :param sql:\n        :return:row numbers\n        """"""\n        return self.__execute(sql, True)\n\n    def delete(self, sql):\n        """"""\n        \xe5\x88\xa0\xe9\x99\xa4\xe8\xb5\x84\xe6\xba\x90\n        :param sql:\n        :return: row numbers\n        """"""\n        return self.__execute(sql, True)\n\n\nif __name__ == \'__main__\':\n    mu = MySQLUtils(host=\'localhost\', port=3306, user=\'root\',\n                    passwd=\'root\', db=\'iaasms_dev\')\n    import datetime\n\n\n    def formatter_datetime(dic):\n        for k, v in dic.iteritems():\n            if isinstance(v, datetime.datetime):\n                dic[k] = str(v)\n        return dic\n\n\n    # 1. try-finally\n    # try:\n    #     mu.open()\n    #     # raise Exception(\'\xe5\xbc\x82\xe5\xb8\xb8\')\n    #     print mu.select(\'SELECT * FROM flavor\', formatter_datetime)\n    #     print mu.delete(\'DELETE FROM flavor WHERE id=42\')\n    # finally:\n    #     mu.close()\n\n    # 2. with\n    with mu as mu:\n        mu.close()\n        # raise Exception(\'\xe5\xbc\x82\xe5\xb8\xb8\')\n        print mu.select(\'SELECT * FROM flavor\', formatter_datetime)\n        print mu.delete(\'DELETE FROM flavor WHERE id=42\')\n\n    print getattr(mu, \'host\'), getattr(mu, \'port\'), getattr(mu, \'no\', None)\n\n'"
contributed_modules/mysql/sqlalchemy_/__init__.py,0,b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-30 \xe4\xb8\x8b\xe5\x8d\x884:08\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : __init__.py.py\n# @Product        : PyCharm\n# @Docs           : \n# @Source         : \n\n\n'
contributed_modules/mysql/sqlalchemy_/mysql_lock.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-26 \xe4\xb8\x8b\xe5\x8d\x883:54\n# @Author         : Tom.Lee\n# @File           : mysql_lock2.py\n# @Product        : PyCharm\n# @Docs           : \n# @Source         : \n\n""""""\n\xe9\x80\x9a\xe8\xbf\x87MySQL sqlalchemy \xe5\xae\x9e\xe7\x8e\xb0\xe5\x88\x86\xe5\xb8\x83\xe5\xbc\x8f\xe9\x94\x81\xe6\x9c\x8d\xe5\x8a\xa1\n""""""\nimport logging\nimport time\nfrom sqlalchemy import create_engine\n\nFORMAT_STR = \'%(asctime)s -%(module)s:%(filename)s-L%(lineno)d-%(levelname)s: %(message)s\'\nlogger = logging.getLogger()\nlogger.setLevel(logging.DEBUG)\nformatter = logging.Formatter(FORMAT_STR)\nhandler = logging.StreamHandler()\nhandler.setFormatter(formatter)\nlogger.addHandler(handler)\nlogging.info(""Current log level is : %s"", logging.getLevelName(logger.getEffectiveLevel()))\n\n\nclass MySqlLock(object):\n    LOCK_SQL = ""SELECT get_lock(\'{key}\', {timeout}) FROM dual""\n    UNLOCK_SQL = ""SELECT release_lock(\'{key}\') FROM dual""\n\n    def __init__(self, lock_key=None, **kwargs):\n        """"""\n        :param lock_key:\n        :param args:    \xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\x8eMySQLdb\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\x80\xe8\x87\xb4.\n        :param kwargs:  \xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\x8eMySQLdb\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\x80\xe8\x87\xb4.\n                    host=\'localhost\'\n                    user=\'test\'\n                    passwd=\'test\'\n                    db=\'test\'\n        """"""\n        self.engine = create_engine(\'mysql+mysqldb://{user}:{pwd}@{host}:{port}/{db_name}?charset=utf8\'.format(\n            user=kwargs.pop(\'user\', None),\n            pwd=kwargs.pop(\'pwd\', None),\n            host=kwargs.pop(\'host\', \'localhost\'),\n            port=kwargs.pop(\'pop\', \'3306\'),\n            db_name=kwargs.pop(\'db_name\', None)\n        ))\n        self.lock_key = lock_key or \'7ab18906739e4662ac01e69f5ebb7352\'\n\n    def _execute(self, sql):\n        """"""\n        MySQL\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xe6\x93\x8d\xe4\xbd\x9c\n        :param sql:\n        :return: (1L,) --> tuple\n        """"""\n        res = -1\n        try:\n            e = self.engine.execute(sql)\n            if e.rowcount <= 1:\n                res = e.rowcount\n        except Exception, ex:\n            logging.error(""\xe6\x89\xa7\xe8\xa1\x8cSQL\\""%s\\"" \xe5\xa4\xb1\xe8\xb4\xa5! \xe5\xbc\x82\xe5\xb8\xb8\xe4\xbf\xa1\xe6\x81\xaf: %s"", sql, str(ex))\n        finally:\n            pass\n        return res\n\n    def lock(self, timeout):\n        """"""\n        MySQL\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xe5\x8a\xa0\xe9\x94\x81\n        :param timeout:  \xe8\xb6\x85\xe6\x97\xb6\xe6\x97\xb6\xe9\x97\xb4\n        :return:\n        """"""\n        # \xe5\x8a\xa0\xe9\x94\x81\xe6\x93\x8d\xe4\xbd\x9c\n        lk = self._execute(self.LOCK_SQL.format(key=self.lock_key, timeout=timeout))\n\n        if lk == 0:\n            logging.debug(""\xe9\x94\x81\'%s\'\xe5\xb7\xb2\xe7\xbb\x8f\xe8\xa2\xab\xe5\x88\x9b\xe5\xbb\xba."", self.lock_key)\n            return False\n        elif lk == 1:\n            logging.debug(""\xe5\x88\x9b\xe5\xbb\xba\xe9\x94\x81\'%s\'."" % self.lock_key)\n            return True\n        else:\n            logging.error(""\xe8\x8e\xb7\xe5\x8f\x96\xe9\x94\x81\xe5\xa4\xb1\xe8\xb4\xa5!"")\n            return None\n\n    def unlock(self):\n        """"""\n        \xe9\x87\x8a\xe6\x94\xbeMySQL\xe9\x94\x81.\n        :return:\n        """"""\n        # \xe9\x87\x8a\xe6\x94\xbe\xe6\x93\x8d\xe4\xbd\x9c\n        uk = self._execute(self.UNLOCK_SQL.format(key=self.lock_key))\n\n        if uk == 0:\n            logging.debug(""\xe9\x87\x8a\xe6\x94\xbe\xe9\x94\x81\'%s\'\xe5\xa4\xb1\xe8\xb4\xa5(\xe8\xaf\xa5\xe9\x94\x81\xe8\xa2\xab\xe5\x85\xb6\xe4\xbb\x96\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x8c\x81\xe6\x9c\x89)"" % self.lock_key)\n            return False\n        elif uk == 1:\n            logging.debug(""\xe9\x87\x8a\xe6\x94\xbe\xe9\x94\x81\'%s\'."" % self.lock_key)\n            return True\n        else:\n            logging.error(""\xe9\x94\x81\'%s\'\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8."" % self.lock_key)\n            return None\n\n\nif __name__ == ""__main__"":\n    l = MySqlLock(host=\'localhost\', user=\'root\', pwd=\'root\', db_name=\'iaasms\')\n    ret = l.lock(15)\n    if not ret:\n        logging.error(""\xe8\x8e\xb7\xe5\x8f\x96\xe9\x94\x81\xe5\xa4\xb1\xe8\xb4\xa5,\xe9\x80\x80\xe5\x87\xba!"")\n        quit()\n\n    time.sleep(5)  # \xe6\xa8\xa1\xe6\x8b\x9f\xe8\xb7\xa8\xe8\xbf\x9b\xe7\xa8\x8b\xe7\x9a\x84\xe5\x90\x8c\xe6\xad\xa5\xe6\x93\x8d\xe4\xbd\x9c!\n    # raise Exception(\'\xe6\xa8\xa1\xe6\x8b\x9f\xe6\x93\x8d\xe4\xbd\x9c\xe5\xbc\x82\xe5\xb8\xb8,mysql\xe4\xbc\x9a\xe8\x87\xaa\xe5\x8a\xa8\xe9\x87\x8a\xe6\x94\xbe\xe8\xaf\xa5\xe8\xbf\x9b\xe7\xa8\x8b\xe6\x8c\x81\xe6\x9c\x89\xe7\x9a\x84\xe9\x94\x81.\')\n    # TODO something\n    print \'hello ok!\'\n\n    l.unlock()\n'"
contributed_modules/mysql/sqlalchemy_/study_sqlalchemy.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-26 \xe4\xb8\x8b\xe5\x8d\x882:48\n# @Author         : Tom.Lee\n# @File           : study_sqlalchemy.py\n# @Product        : PyCharm\n# @Docs           : \n# @Source         : sqlalchemy.sql.selectable.py\nimport time\nfrom sqlalchemy import (\n    Table, Column, MetaData, create_engine)\nfrom sqlalchemy.engine.result import ResultProxy\nfrom sqlalchemy.sql.sqltypes import (\n    Unicode, INTEGER)\n\nurl = \'mysql+mysqldb://{user}:{pwd}@{host}:{port}/{db_name}?charset=utf8\'.format(\n    user=\'root\',\n    pwd=\'root\',\n    host=\'localhost\',\n    port=\'3306\',\n    db_name=\'iaasms\'\n)\n# pool_recycle=3600 \xe8\xbf\x9e\xe6\x8e\xa5\xe8\xb6\x85\xe6\x97\xb6\xe5\x8f\x82\xe6\x95\xb0\nengine = create_engine(url)\n\ntable = Table(\n    \'tom_test\', MetaData(),\n    Column(\'id\', INTEGER, primary_key=True),\n    Column(\'start_time\', INTEGER, index=False),\n    Column(\'last_time\', INTEGER, nullable=False),\n    Column(\'count\', INTEGER, nullable=False),\n    Column(\'region\', Unicode(20, _warn_on_bytestring=False))\n)\n\n# \xe5\x88\x9b\xe5\xbb\xba\xe8\xa1\xa8\ntable.create(engine, True)\n\n\ndef _formatter_data(res):\n    """"""\n    sqlalchemy.engine.result.ResultProxy \xe5\xaf\xb9\xe8\xb1\xa1\xe6\x95\xb0\xe6\x8d\xae\xe6\x8f\x90\xe5\x8f\x96\n\n    res.cursor._rows   # \xe6\x95\xb0\xe6\x8d\xae\n    res._metadata.keys \xe6\x88\x96 res.cursor.description # \xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xe8\xa1\xa8\xe5\xad\x97\xe6\xae\xb5\xe5\x90\x8d\n    :param res:\n    :return: list\n    """"""\n    assert isinstance(res, ResultProxy)\n    assert res.returns_rows\n    rows = []\n    for _row in res.cursor._rows:\n        row = {}\n        for index, column in enumerate(res._metadata.keys):\n            row[column] = _row[index]\n        rows.append(row)\n    return rows\n\n\ndef _execute_success(res):\n    """"""\n    sqlalchemy.engine.result.ResultProxy \xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xe4\xbf\xae\xe6\x94\xb9\xe7\x8a\xb6\xe6\x80\x81\n\n    res.returns_rows   # \xe6\x98\xaf\xe5\x90\xa6\xe8\xbf\x94\xe5\x9b\x9e\xe6\x95\xb0\xe6\x8d\xae\n    res.rowcount \xe6\x98\xaf\xe5\x90\xa6\xe6\x89\xa7\xe8\xa1\x8c\xe6\x88\x90\xe5\x8a\x9f 1 success,0 error\n    :param res:\n    :return: boolean\n    """"""\n    assert isinstance(res, ResultProxy)\n    return res.rowcount > 0\n\n\ndef insert():\n    # \xe6\x8f\x92\xe5\x85\xa5\n    # sqlalchemy.exc.IntegrityError \xe4\xb8\xbb\xe9\x94\xae\xe5\x86\xb2\xe7\xaa\x81\xe5\xbc\x82\xe5\xb8\xb8\n    sql = table.insert().values(**{\n        \'id\': 2,\n        \'start_time\': time.time(),\n        \'last_time\': time.time(),\n        \'count\': 1,\n        \'region\': \'test\'\n    })\n    res = engine.execute(sql)\n    print _execute_success(res)\n\n\ndef select():\n    # \xe6\x9f\xa5\xe8\xaf\xa2\n    sql = table.select().where(table.c.id == 2)\n    res = engine.execute(sql)\n    print _formatter_data(res)\n\n\ndef update():\n    # \xe4\xbf\xae\xe6\x94\xb9\n    sql = table.update().where(table.c.id == 1).values(count=9)\n    res = engine.execute(sql)\n    print _execute_success(res)\n\n\ndef delete():\n    sql = table.delete().where(table.c.id == 2)\n    res = engine.execute(sql)\n    print _execute_success(res)\n'"
data_analysis/study_matplotlib/graphs/__init__.py,0,b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2017/7/30 20:47\n# @Author  : Tom.lee\n# @Site    : \n# @File    : __init__.py.py\n# @Software: PyCharm\n\n'
data_analysis/study_matplotlib/graphs/graphs_histogram.py,2,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2017/7/30 20:49\n# @Author  : Tom.lee\n# @Site    : \n# @File    : graphs_histogram.py\n# @Software: PyCharm\n\n""""""\n\xe7\x9b\xb4\xe6\x96\xb9\xe5\x9b\xbe\n""""""\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nN = 5\n# \xe7\x94\xb7\xe7\x94\x9f\xe5\x88\x86\xe6\x95\xb0\nmenMeans = (20, 35, 30, 35, 27)\n# \xe5\xa5\xb3\xe7\x94\x9f\xe5\x88\x86\xe6\x95\xb0\nwomenMeans = (25, 32, 34, 20, 25)\nmenStd = (2, 3, 4, 1, 2)\nwomenStd = (3, 5, 2, 3, 3)\nind = np.arange(N)  # the x locations for the groups\nwidth = 0.35  # the width of the bars: can also be len(x) sequence\n\np1 = plt.bar(ind, menMeans, width, color=\'#d62728\', yerr=menStd)\np2 = plt.bar(ind, womenMeans, width, bottom=menMeans, yerr=womenStd)\n\nplt.ylabel(\'Scores\')\nplt.title(\'Scores by group and gender\')\nplt.xticks(ind, (\'G1\', \'G2\', \'G3\', \'G4\', \'G5\'))  # \xe8\xae\xbe\xe7\xbd\xaex\xe8\xbd\xb4\xe5\x88\xbb\xe5\xba\xa6\nplt.yticks(np.arange(0, 81, 5))  # \xe8\xae\xbe\xe7\xbd\xaey\xe8\xbd\xb4\xe5\x88\xbb\xe5\xba\xa6\nplt.legend((p1[0], p2[0]), (\'Men\', \'Women\'))\nplt.savefig(""../save_file/graphs_histogram.png"")\nplt.show()\n'"
data_analysis/study_matplotlib/graphs/graphs_quadratic.py,6,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2017/7/30 1:38\n# @Author  : Tom.lee\n# @File    : graphs_quadratic.py\n# @Software: PyCharm\n\n\n""""""\nnumpy \xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f \xe4\xb8\x8e matplotlib \xe4\xba\x8c\xe6\xac\xa1\xe5\x87\xbd\xe6\x95\xb0\xe6\x8a\x98\xe7\xba\xbf\xe5\x9b\xbe\n""""""\n\nimport warnings\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9c\x80\xe5\xb0\x8f\xe4\xba\x8c\xe4\xb9\x98\xe6\x8b\x9f\xe5\x90\x88\xe4\xb8\xad\xe7\x9a\x84\xe7\x9f\xa9\xe9\x98\xb5\xe6\x98\xaf\xe7\xa7\xa9\xe4\xb8\x8d\xe8\xb6\xb3\xef\xbc\x8c\xe5\x88\x99\xe5\xbc\x95\xe5\x8f\x91\xe8\xad\xa6\xe5\x91\x8a\xe3\x80\x82\xe5\x8f\xaa\xe6\x9c\x89\xe5\x9c\xa8\xe6\xbb\xa1 == False\xe6\x97\xb6\xef\xbc\x8c\xe6\x89\x8d\xe4\xbc\x9a\xe5\x8f\x91\xe5\x87\xba\xe8\xad\xa6\xe5\x91\x8a\xe3\x80\x82\n# \xe8\xad\xa6\xe5\x91\x8a\xe5\x8f\xaf\xe4\xbb\xa5\xe9\x80\x9a\xe8\xbf\x87\xe4\xbb\xa5\xe4\xb8\x8b\xe6\x96\xb9\xe5\xbc\x8f\xe5\x85\xb3\xe9\x97\xad\xef\xbc\x9a\nwarnings.simplefilter(\'ignore\', RuntimeWarning)\nwarnings.simplefilter(\'ignore\', np.RankWarning)\n\n\ndef foo(x0):\n    # \xe7\x94\xb1\xe5\x9b\xbe\xe5\x8f\xaf\xe7\x9f\xa5\xef\xbc\x8c\xe5\x87\xbd\xe6\x95\xb0\xe5\x88\x863\xe6\xae\xb5,\xe5\x91\xa8\xe6\x9c\x9f\xe5\x87\xbd\xe6\x95\xb0\n    # \xe8\xae\xbe\xef\xbc\x9ay= kx + b ,\xe4\xb8\x94b=0\n    c0, hc, c = 0.4, 1.0, 0.6\n    if x0 > 1:\n        x0 = float(x0) % 1.0\n    if x <= c0:\n        k = hc / c0\n        return k * x0\n    elif x < c:\n        k = (hc - 0) / (c0 - c)\n        return k * (x0 - c)\n    else:\n        return 0\n\n\n# x \xe7\x9a\x84\xe5\x8f\x96\xe5\x80\xbc 0\xe5\x88\xb02 \xe8\x8c\x83\xe5\x9b\xb4\xe5\x8f\x9650\xe4\xb8\xaa\xe7\x82\xb9\nx = np.linspace(0, 2, 50, dtype=np.float64)\n\n# \xe8\xae\xa1\xe7\xae\x97\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84y\xe5\x80\xbc\xef\xbc\x8c\xe5\xb9\xb6\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbanparray \xe5\xaf\xb9\xe8\xb1\xa1\ny = np.array(map(foo, x)).astype(np.float64)\n\nprint ""x\xe5\x80\xbc\xef\xbc\x9a"", x\nprint ""y\xe5\x80\xbc\xef\xbc\x9a"", y\n\nm = np.polyfit(x, y, 20)  # \xe8\xb0\x83\xe6\x95\xb4\xe6\x8b\x9f\xe5\x90\x88\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\xe7\x9a\x84\xe5\xba\xa6\xe4\xb8\xba20\xef\xbc\x8c\xe7\x94\x9f\xe6\x88\x90\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\xe5\x8f\x82\xe6\x95\xb0\nprint ""\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a"", m\n\n\n# \xe4\xb8\x80\xe7\xbb\xb4\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\np1 = np.poly1d(m)  # \xe6\xa0\xb9\xe6\x8d\xae\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\xe5\x8f\x82\xe6\x95\xb0\xe6\x9e\x84\xe9\x80\xa0\xe4\xb8\x80\xe7\xbb\xb4\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\nprint ""\xe4\xb8\x80\xe7\xbb\xb4\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\xef\xbc\x9a"", p1\n\n# \xe6\xa0\xb9\xe6\x8d\xaex\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\xe6\xb1\x82\xe8\xa7\xa3y\xe5\x80\xbc\xef\xbc\x8c\n# yp=np.polyval(np.polyfit(x, y, 20),x)\xef\xbc\x8cx\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xaf\xe5\x8d\x95\xe4\xb8\xaa\xe5\x80\xbc\xe4\xb9\x9f\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xaf\xe5\x88\x97\xe8\xa1\xa8\ny1 = p1(x)\nprint ""\xe4\xb8\x80\xe7\xbb\xb4\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\xe6\xa0\xb9\xe6\x8d\xaex\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe5\x80\xbc\xef\xbc\x9a"", y1\n\n# \xe4\xbb\xa5\xe7\x82\xb9\xef\xbc\x88\xe2\x80\x9c\xef\xbc\x8e\xe2\x80\x9d\xef\xbc\x89\xe7\xbb\x98\xe5\x88\xb6\xe5\xae\x9e\xe9\x99\x85\xe5\x80\xbc\xe6\x8a\x98\xe7\xba\xbf\nplot1 = plt.plot(x, y, \'.\', label=\'original values\')\n# \xe4\xbb\xa5\xe7\xba\xbf\xef\xbc\x88\xe2\x80\x9cr\xe2\x80\x9d\xef\xbc\x89\xe7\xbb\x98\xe5\x88\xb6\xe6\x9c\x80\xe5\xb0\x8f\xe4\xba\x8c\xe4\xb9\x98\xe6\x8b\x9f\xe5\x90\x88\xe6\x8a\x98\xe7\xba\xbf\nplot2 = plt.plot(x, y1, \'r\', label=\'polyfit values\')\n\n# x\xe8\xbd\xb4\xe6\x8f\x8f\xe8\xbf\xb0\nplt.xlabel(\'X\')\n# Y\xe8\xbd\xb4\xe6\x8f\x8f\xe8\xbf\xb0\nplt.ylabel(\'Y\')\n# plt.legend(loc=1)  # \xe6\x8c\x87\xe5\xae\x9alegend\xe7\x9a\x84\xe4\xbd\x8d\n# \xe6\xa0\x87\xe9\xa2\x98\nplt.title(\'y = kx (0<x<0.6) | y = 0 (0.6<x<=1)\')\n\n# \xe4\xbf\x9d\xe5\xad\x98\xe6\x96\x87\xe4\xbb\xb6\xe3\x80\x80eps, pdf, pgf, png, ps, raw, rgba, svg, svgz.\nplt.savefig(""../save_file/graphs_quadratic.png"")\nplt.show()\n'"
data_analysis/study_matplotlib/graphs/graphs_trigonometric.py,4,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-7-31 \xe4\xb8\x8b\xe5\x8d\x882:43\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017\n# @File           : graphs_trigonometric.py\n# @Product        : PyCharm\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n# \xe4\xb8\x89\xe8\xa7\x92\xe5\x87\xbd\xe6\x95\xb0\xe5\x9b\xbe\nx = np.linspace(-np.pi, np.pi, 256, endpoint=True)\n\n# \xe8\xae\xa1\xe7\xae\x97\xe5\x87\xbd\xe6\x95\xb0\xe5\x80\xbc\ny_cos, y_sin = np.cos(x), np.sin(x)\n\n# \xe8\xae\xbe\xe7\xbd\xae\xe6\xa8\xaa\xe8\xbd\xb4\xe5\x92\x8c\xe7\xba\xb5\xe8\xbd\xb4\xe7\x9a\x84\xe7\x95\x8c\xe9\x9d\xa2\xe9\xab\x98\xe5\xba\xa6\xe4\xb8\x8e\xe5\xae\xbd\xe5\xba\xa6\nplt.xlim(x.min() * 1.1, x.max() * 1.1)\nplt.ylim(y_sin.min() * 1.1, y_sin.max() * 1.1)\n# \xe6\xa8\xaa\xe8\xbd\xb4\xe5\x92\x8c\xe7\xba\xb5\xe8\xbd\xb4\xe6\x8f\x8f\xe8\xbf\xb0\n\n# \xe8\xae\xbe\xe7\xbd\xae\xe5\x88\xbb\xe5\xba\xa6\xe5\x80\xbc\nplt.xticks(np.linspace(-np.pi, np.pi, 5, endpoint=True))\nplt.yticks(np.linspace(-1, 1, 11, endpoint=True))\n\n# \xe8\xae\xbe\xe7\xbd\xae\xe5\x9d\x90\xe6\xa0\x87\xe8\xbd\xb4\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae Spines\nax = plt.subplot(1, 1, 1)\nax.spines[\'right\'].set_color(None)\nax.spines[\'top\'].set_color(None)\nax.spines[\'bottom\'].set_position((\'data\', 0))\nax.spines[\'left\'].set_position((\'data\', 0))\nax.xaxis.set_ticks_position(\'bottom\')\nax.yaxis.set_ticks_position(\'left\')\n# \xe7\x94\xbb\xe5\x9b\xbe\n# \xe5\xaf\xb9\xe7\xba\xbf\xe6\x9d\xa1\xe7\x9a\x84\xe9\xa2\x9c\xe8\x89\xb2\xef\xbc\x8c\xe5\xae\xbd\xe5\xba\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xae\xbe\xe7\xbd\xae\nplt.plot(x, y_sin, color=\'red\', linewidth=2.5, label=\'sin(x)\')\nplt.plot(x, y_cos, color=\'blue\', linewidth=2.5, label=\'cos(x)\')\nplt.legend(loc=\'upper left\', frameon=False)\nplt.title(\'trigonometric function\')\nplt.savefig(""../save_file/graphs_trigonometric.png"")\nplt.show()\n'"
data_analysis/study_numpy/numpy_functions/np_arange.py,2,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-9-7 \xe4\xb8\x8b\xe5\x8d\x883:10\n# @Author         : Tom.Lee\n# @File           : np_arange.py\n# @Product        : PyCharm\n# @Docs           : \n# @Source         : \n\nimport numpy as np\n\n\n# \xe5\x9b\x9b\xe7\xbb\xb4\xe6\x95\xb0\xe7\xbb\x84\nt = np.arange(3 * 4 * 5 * 6).reshape((3, 4, 5, 6))\nprint len(t), len(t[0]), len(t[0][0]), len(t[0][0][0])\n\ns = np.arange(3 * 4 * 5 * 6)[::-1].reshape((5, 4, 6, 3))\nprint len(s), len(s[0]), len(s[0][0]), len(s[0][0][0])\n'"
data_analysis/study_numpy/numpy_functions/np_dot.py,18,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-9-7 \xe4\xb8\x8b\xe5\x8d\x883:07\n# @Author         : Tom.Lee\n# @File           : np_dot.py\n# @Product        : PyCharm\n# @Docs           : \n# @Source         : \nimport numpy as np\n\n""""""\n>>> import numpy as np\nExamples\n--------\n\n>>> np.random.rand(3,2)\narray([[ 0.14022471,  0.96360618],  #random\n       [ 0.37601032,  0.25528411],  #random\n       [ 0.49313049,  0.94909878]]) #random\n\n\n>>> np.dot(3, 4)\n12\n\nNeither argument is complex-conjugated:\n\n>>> np.dot([2j, 3j], [2j, 3j])\n(-13+0j)\n\nFor 2-D arrays it is the matrix product:\n\n>>> a = [[1, 0], [0, 1]]\n>>> b = [[4, 1], [2, 2]]\n>>> np.dot(a, b)\narray([[4, 1],\n       [2, 2]])\n\n>>> a = np.arange(3*4*5*6).reshape((3,4,5,6))\n>>> b = np.arange(3*4*5*6)[::-1].reshape((5,4,6,3))\n>>> np.dot(a, b)[2,3,2,1,2,2]\n499128\n>>> sum(a[2,3,2,:] * b[1,2,:,2])\n499128\n\n""""""\n\n# ############################### \xe4\xb8\x80\xe7\xbb\xb4 ###############################\n""""""\n\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xaa\xe6\x95\xb0\xe7\x9b\xb8\xe5\x90\x8c\xef\xbc\x9a\n""""""\n\nprint np.dot(3, 4)  # 3*4 -> 12\nprint np.dot([1, 2, 3], [4, 5, 6])  # 1 * 4 + 2 * 5 + 3 * 6 -> 32\n\n""""""\n\xe5\x8f\x82\xe6\x95\xb0\xe5\x88\x97\xe8\xa1\xa8\xe4\xb8\x8d\xe5\x90\x8c(\xe7\x9f\xad\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe5\x85\x83\xe7\xb4\xa0\xe4\xb8\xaa\xe6\x95\xb0\xe5\x8f\xaa\xe8\x83\xbd\xe4\xb8\xba1,\xe4\xb8\x94\xe4\xb8\x8d\xe8\x83\xbd\xe4\xb8\xba\xe5\x88\x97\xe8\xa1\xa8[]\xe7\xb1\xbb\xe5\x9e\x8b):\n\xe5\xa6\x82\xef\xbc\x9a\n>>> np.dot([1, 2, 3], [4, 5])\nValueError: shapes (3,) and (2,) not aligned: 3 (dim 0) != 2 (dim 0)\n\n>>> np.dot([1, 2, 3], [4])\xe3\x80\x80\nValueError: shapes (3,) and (1,) not aligned: 3 (dim 0) != 1 (dim 0)\n\n>>> np.dot([1, 2, 3], 4)\n[ 4  8 12]\n\n""""""\nprint np.dot([1, 2, 3], 4)  # [1*4,2*4,3*4] -> [ 4  8 12]\n\n\n# ############################### \xe4\xba\x8c\xe7\xbb\xb4 ###############################\n""""""\n\xe5\x8f\x82\xe6\x95\xb0\xe4\xb8\xaa\xe6\x95\xb0\xe7\x9b\xb8\xe5\x90\x8c\xef\xbc\x9a\n\n\xe8\xae\xa1\xe7\xae\x97\xe8\xbf\x87\xe7\xa8\x8b:\n\n\xe7\xac\xac\xe4\xb8\x80\xe8\xbd\xae:\n    1. A\xe4\xb8\xad\xe5\x8f\x96\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0[x1, y1]\n       B\xe4\xb8\xad\xe5\x8f\x96\xe5\x90\x84\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\xe4\xb8\xad\xe7\x9a\x84\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe5\x80\xbc[m1, m2]\n       \xe7\x9f\xa9\xe9\x98\xb5\xe7\x9b\xb8\xe4\xb9\x98-> x1*m1+y1*m2\n\n    2. A\xe4\xb8\xad\xe5\x8f\x96\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0[x1, y1]\n       B\xe4\xb8\xad\xe5\x8f\x96\xe5\x90\x84\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\xe4\xb8\xad\xe7\x9a\x84\xe7\xac\xac\xe4\xba\x8c\xe4\xb8\xaa\xe5\x80\xbc[n1, n2]\n       \xe7\x9f\xa9\xe9\x98\xb5\xe7\x9b\xb8\xe4\xb9\x98-> x1*n1+y1*n2\n--> [[ 77 110]]\n\xe7\xac\xac\xe4\xba\x8c\xe8\xbd\xae:\n    1. A\xe4\xb8\xad\xe5\x8f\x96\xe7\xac\xac\xe4\xba\x8c\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0[x2, y2]\n       B\xe4\xb8\xad\xe5\x8f\x96\xe5\x90\x84\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\xe4\xb8\xad\xe7\x9a\x84\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe5\x80\xbc[m1, m2]\n       \xe7\x9f\xa9\xe9\x98\xb5\xe7\x9b\xb8\xe4\xb9\x98-> x2*m1+y2*m2\n\n    2. A\xe4\xb8\xad\xe5\x8f\x96\xe7\xac\xac\xe4\xba\x8c\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0[x2, y2]\n       B\xe4\xb8\xad\xe5\x8f\x96\xe5\x90\x84\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\xe4\xb8\xad\xe7\x9a\x84\xe7\xac\xac\xe4\xba\x8c\xe4\xb8\xaa\xe5\x80\xbc[n1, n2]\n       \xe7\x9f\xa9\xe9\x98\xb5\xe7\x9b\xb8\xe4\xb9\x98-> x2*n1+y2*n2\n--> [[ 77 110] [165 242]]\n\n\n""""""\n\nx1, y1 = 1, 2\nx2, y2 = 3, 4\n\nm1, n1 = 11, 22\nm2, n2 = 33, 44\n\nA = [[x1, y1], [x2, y2]]  # \xe8\xa1\x8c\nB = [[m1, n1], [m2, n2]]  # \xe5\x88\x97\n\nprint np.dot(A, B)\n# [[ 77 110]\n#  [165 242]]\n\nprint \'\xe6\xb5\x8b\xe8\xaf\x95\xe8\xae\xa1\xe7\xae\x97\xe8\xbf\x87\xe7\xa8\x8b:\'\nprint x1 * m1 + y1 * m2, x1 * n1 + y1 * n2  # 77 110\nprint x2 * m1 + y2 * m2, x2 * n1 + y2 * n2  # 165 242\n\n\ndef my_dot_w2(a, b):\n    # \xe5\x88\xa4\xe6\x96\xad\xe6\x98\xaf\xe5\x90\xa6\xe4\xb8\xba\xe5\x88\x97\xe8\xa1\xa8\n    if isinstance(a, list) and isinstance(b, list):\n        assert len(a) == len(b)\n        l1, l2 = a, b\n        result = []\n\n        if isinstance(l1[0], list):  # \xe5\x88\xa4\xe6\x96\xad\xe6\x98\xaf\xe5\x90\xa6\xe4\xb8\xba\xe5\xa4\x9a\xe7\xbb\xb4\xe6\x95\xb0\xe7\xbb\x84\n            size = len(l1)\n            for index, value in enumerate(l1):\n                start, cell = 0, []\n\n                while start < size:\n                    cell.append(my_dot_w2(value, map(lambda x: x[start], l2)))\n                    start += 1\n\n                result.append(cell)\n            return result\n\n        else:  # \xe4\xb8\x80\xe7\xbb\xb4\xe6\x95\xb0\xe7\xbb\x84\n            return sum(map(lambda j: l1[j] * l2[j], xrange(len(l1))))\n\n    # \xe4\xbb\xa5\xe4\xb8\x8b\xe4\xb8\xba\xe6\x95\xb0\xe5\xad\x97\xe4\xb8\x8e\xe6\x95\xb0\xe7\xbb\x84\xe7\x9a\x84\xe7\x9f\xa9\xe9\x98\xb5\xe7\xae\x97\xe6\xb3\x95\xef\xbc\x8c\xe6\x89\xbe\xe5\x87\xba\xe9\x9b\x86\xe5\x90\x88\n    elif isinstance(a, list) and isinstance(b, int):\n        return map(lambda x: x * b, a)\n\n    elif isinstance(b, list) and isinstance(a, int):\n        return map(lambda x: x * a, b)\n\n    # \xe9\x83\xbd\xe4\xb8\xba\xe6\x95\xb0\xe5\xad\x97\xe7\x9a\x84\xe7\xae\x97\xe6\xb3\x95\n    elif isinstance(a, int) and isinstance(b, int):\n        return a * b\n\n    # \xe5\x85\xb6\xe4\xbb\x96\xe6\x83\x85\xe5\x86\xb5\xe6\x8a\x9b\xe5\x87\xba\xe5\xbc\x82\xe5\xb8\xb8\n    else:\n        raise Exception(\'params must be ""list or int""!\')\n\n\nprint \'**\' * 50\nprint my_dot_w2([1, 2], 3)  # 1*3,2*3 = [3, 6]\nprint np.dot([1, 2], 3)\n\nprint my_dot_w2(3, [1, 2])  # 3*1,3*2 = [3, 6]\nprint np.dot(3, [1, 2])\n\nprint my_dot_w2([1, 2], [3, 4])  # 1*3+2*4 = 11\nprint np.dot([1, 2], [3, 4])\n\nprint my_dot_w2(A, B)\nprint np.dot(A, B)\n\n\n\n\n\n'"
data_analysis/study_numpy/numpy_functions/np_mgrid_ogrid.py,4,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-9-7 \xe4\xb8\x8b\xe5\x8d\x883:15\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : np_mgrid_ogrid.py\n# @Product        : PyCharm\n# @Docs           : \n# @Source         : \n\n\n# #\xe5\x88\x9b\xe5\xbb\xba\xe7\xbd\x91\xe6\xa0\xbc\xe7\xb4\xa2\xe5\xbc\x95\n""""""\n>>> import numpy as np\n\n\n# \xe5\xaf\x86\xe9\x9b\x86\xe7\xbd\x91\xe6\xa0\xbcnp.mgrid\n>>> mgrid = np.lib.index_tricks.nd_grid()\n>>> mgrid[0:5,0:5]\narray([[[0, 0, 0, 0, 0],\n        [1, 1, 1, 1, 1],\n        [2, 2, 2, 2, 2],\n        [3, 3, 3, 3, 3],\n        [4, 4, 4, 4, 4]],\n       [[0, 1, 2, 3, 4],\n        [0, 1, 2, 3, 4],\n        [0, 1, 2, 3, 4],\n        [0, 1, 2, 3, 4],\n        [0, 1, 2, 3, 4]]])\n>>> mgrid[-1:1:5j]\narray([-1. , -0.5,  0. ,  0.5,  1. ])\n\n\n# \xe7\xa8\x80\xe7\x96\x8f\xe7\xbd\x91\xe6\xa0\xbcnp.ogrid\n>>> ogrid = np.lib.index_tricks.nd_grid(sparse=True)\n>>> ogrid[0:5,0:5]\n[array([[0],\n        [1],\n        [2],\n        [3],\n        [4]]), array([[0, 1, 2, 3, 4]])]\n\n\n""""""\n'"
data_analysis/study_numpy/numpy_functions/np_random.py,1,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-9-7 \xe4\xb8\x8b\xe5\x8d\x883:12\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : np_random.py\n# @Product        : PyCharm\n# @Docs           : \n# @Source         : \n\n""""""\n>>> import numpy as np\n\n\n# \xe5\x88\x9b\xe5\xbb\xba\xe9\x9a\x8f\xe6\x9c\xba\xe4\xba\x8c\xe7\xbb\xb4\xe6\x95\xb0\xe7\xbb\x84\n>>> np.random.rand(3,2)\narray([[ 0.14022471,  0.96360618],  #random\n       [ 0.37601032,  0.25528411],  #random\n       [ 0.49313049,  0.94909878]]) #random\n\n""""""\n'"
rpc/RPyC/tutorials/part01.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-13 \xe4\xb8\x8b\xe5\x8d\x883:37\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : part01.py\n# @Product        : PyCharm\n# @Source         :\n\n""""""\nrpyc \xe5\xae\xa2\xe6\x88\xb7\xe7\xab\xaf\xe6\x9f\xa5\xe8\xaf\xa2\xe6\x9c\x8d\xe5\x8a\xa1\xe7\xab\xaf\xe4\xbf\xa1\xe6\x81\xaf\n\n""""""\n\nimport os\n\nimport rpyc\n\n# \xe6\x89\x93\xe5\x8d\xb0\xe5\xbd\x93\xe5\x89\x8d\xe8\xb7\xaf\xe5\xbe\x84\nprint os.getcwd()\n\n# \xe5\x90\xaf\xe5\x8a\xa8\xe5\x86\x85\xe7\xbd\xae\xe6\x9c\x8d\xe5\x8a\xa1\n# os.system(\'python /usr/local/bin/rpyc_classic.py\')\n""""""\nCMD:\n    tom@aric-ThinkPad-E450:~$ python /usr/local/bin/rpyc_classic.py\n    INFO:SLAVE/18812:server started on [0.0.0.0]:18812\n""""""\n\n# \xe8\xbf\x9e\xe6\x8e\xa5\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\nconn = rpyc.classic.connect(\'localhost\')\n\nmod1 = conn.modules.sys  # \xe8\xae\xbf\xe9\x97\xae\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\xe4\xb8\x8a\xe7\x9a\x84sys\xe6\xa8\xa1\xe5\x9d\x97\nmod2 = conn.modules[""xml.dom.minidom""]  # \xe8\xae\xbf\xe9\x97\xae\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\xe4\xb8\x8a\xe7\x9a\x84xml.dom.minidom\xe6\xa8\xa1\xe5\x9d\x97\nprint mod1, mod2\n\n# \xe6\x89\x93\xe5\x8d\xb0\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\xe5\x90\xaf\xe5\x8a\xa8\xe8\xb7\xaf\xe5\xbe\x84\nprint conn.modules.os.getcwd()\n'"
scheduler_task/study_apscheduler/examples/demo.py,0,"b""#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-13 \xe4\xb8\x8a\xe5\x8d\x8811:33\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : demo.py\n# @Product        : PyCharm\n# @Docs           : \n# @Source         : \n\n\nimport os\n\nfrom apscheduler.schedulers.blocking import BlockingScheduler\n\nif __name__ == '__main__':\n    scheduler = BlockingScheduler()\n    scheduler.add_job('sys:stdout.write', 'interval', seconds=3, args=['tick ...\\n'])\n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n\n    try:\n        scheduler.start()\n    except (KeyboardInterrupt, SystemExit):\n        pass\n"""
scheduler_task/study_apscheduler/tutorials/__init__.py,0,b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-13 \xe4\xb8\x8a\xe5\x8d\x8810:56\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : __init__.py.py\n# @Product        : PyCharm\n'
OpenStack/oslo_/i18n/i18n_app/__init__.py,0,b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-9-16 \xe4\xb8\x8b\xe5\x8d\x882:52\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : __init__.py.py\n# @Product        : PyCharm\n# @Docs           : \n# @Source         : \n\n\n'
OpenStack/oslo_/i18n/i18n_app/_i18n.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-9-16 \xe4\xb8\x8b\xe5\x8d\x883:10\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : _i18n.py.py\n# @Product        : PyCharm\n# @Docs           : https://docs.openstack.org/oslo.i18n/latest/user/usage.html\n# @Source         :\n\nimport oslo_i18n\n\nDOMAIN = ""i18n_app""\n\n_translators = oslo_i18n.TranslatorFactory(domain=DOMAIN)\n\n# The primary translation function using the well-known name ""_""\n_ = _translators.primary\n\n# The contextual translation function using the name ""_C""\n# requires oslo.i18n >=2.1.0\n_C = _translators.contextual_form\n\n# The plural translation function using the name ""_P""\n# requires oslo.i18n >=2.1.0\n_P = _translators.plural_form\n\n# Translators for log levels.\n#\n# NOTE(dhellmann): This is not needed for new projects as of the\n# Pike series.\n#\n# The abbreviated names are meant to reflect the usual use of a short\n# name like \'_\'. The ""L"" is for ""log"" and the other letter comes from\n# the level.\n_LI = _translators.log_info\n_LW = _translators.log_warning\n_LE = _translators.log_error\n_LC = _translators.log_critical\n\n\ndef get_available_languages():\n    """"""\n    \xe8\xbf\x94\xe5\x9b\x9e\xe5\xbd\x93\xe5\x89\x8d\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x8f\x90\xe4\xbe\x9b\xe7\xbf\xbb\xe8\xaf\x91\xe7\x9a\x84\xe8\xaf\xad\xe8\xa8\x80\xe5\x88\x97\xe8\xa1\xa8\n\n    #\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84\xe8\xaf\xad\xe8\xa8\x80\xe5\x8c\x85\xe5\x9c\xa8\xe3\x80\x80/usr/local/lib/python2.7/dist-packages/babel/locale-data/\n    :return:\n    """"""\n    return oslo_i18n.get_available_languages(DOMAIN)\n\n\ndef translate(msg, user_locale=\'zh_CN\'):\n    """"""\n    \xe7\xbf\xbb\xe8\xaf\x91""msg""\xe4\xb8\xba\xe6\x8c\x87\xe5\xae\x9a\xe7\x9a\x84\xe8\xaf\xad\xe8\xa8\x80,\xe9\xbb\x98\xe8\xae\xa4""en_US""\n\n    :param msg: the object to translate\n    :param user_locale: the locale to translate the message to, if None the\n                        default system locale will be used\n                        \'en_US\' \'zh_CN\'\n    :returns: the translated object in unicode, or the original object if\n              it could not be translated\n    """"""\n    return oslo_i18n.translate(msg, user_locale)\n\n\ndef enable_lazy(enable=True):\n    return oslo_i18n.enable_lazy(enable)\n'"
OpenStack/oslo_/i18n/i18n_app/main.py,0,b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-9-16 \xe4\xb8\x8b\xe5\x8d\x882:53\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : main.py\n# @Product        : PyCharm\n# @Docs           : https://docs.openstack.org/oslo.i18n/latest/user/usage.html\n# @Source         : \n\nfrom _i18n import get_available_languages\n\nlanguages = get_available_languages()\n\nprint languages\n\n\n\n'
scheduler_task/study_apscheduler/examples/executors/__init__.py,0,b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-13 \xe4\xb8\x8a\xe5\x8d\x8811:07\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : __init__.py.py\n# @Product        : PyCharm\n'
scheduler_task/study_apscheduler/examples/executors/configure.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-9 \xe4\xb8\x8a\xe5\x8d\x889:56\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017\n# @File           : job_configure.py\n# @Product        : PyCharm\n\n\nfrom apscheduler.executors.pool import ThreadPoolExecutor, ProcessPoolExecutor\nfrom apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore\nfrom apscheduler.schedulers.background import BackgroundScheduler\nfrom pytz import utc\n\njob_stores = {\n    \'default\': SQLAlchemyJobStore(\n        url=\'mysql+mysqldb://root:root@localhost:3306/djangoapp?charset=utf8\')\n}\n\n\nexecutors = {\n    \'default\': ThreadPoolExecutor(20),\n    \'processpool\': ProcessPoolExecutor(5)\n}\n\n\njob_defaults = {\n    \'coalesce\': False,\n    \'max_instances\': 3\n}\n\n# UTC as the scheduler\xe2\x80\x99s timezone\nscheduler = BackgroundScheduler(\n    jobstores=job_stores,\n    executors=executors,\n    job_defaults=job_defaults,\n    timezone=utc,\n    daemon=False\n)\n\n\ndef current_time():\n    import datetime\n    return datetime.datetime.now().strftime(""%Y-%m-%d %H:%M:%S"")\n\n\ndef job1():\n    print \'job1 is running, Now is %s\' % current_time()\n\n\ndef job2():\n    print \'job2 is running, Now is %s\' % current_time()\n\n\n# \xe6\xaf\x8f\xe9\x9a\x945\xe7\xa7\x92\xe8\xbf\x90\xe8\xa1\x8c\xe4\xb8\x80\xe6\xac\xa1job1,replace_existing=True\xe9\x98\xb2\xe6\xad\xa2\xe6\xb7\xbb\xe5\x8a\xa0\xe9\x87\x8d\xe5\xa4\x8d\xef\xbc\x8c\xe5\x90\xaf\xe5\x8a\xa8\xe5\xa4\xb1\xe8\xb4\xa5\nscheduler.add_job(job1, \'interval\', seconds=5, id=\'job1\', replace_existing=True)\n# \xe6\xaf\x8f\xe9\x9a\x945\xe7\xa7\x92\xe8\xbf\x90\xe8\xa1\x8c\xe4\xb8\x80\xe6\xac\xa1job2\nscheduler.add_job(job2, \'cron\', second=\'*/5\', id=\'job2\', replace_existing=True)\nscheduler.start()\nprint scheduler.get_jobs()\n'"
scheduler_task/study_apscheduler/examples/executors/process_pool.py,0,"b""#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-13 \xe4\xb8\x8a\xe5\x8d\x8810:56\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017\n# @File           : process_pool.py\n# @Product        : PyCharm\n\nfrom datetime import datetime\nimport os\n\nfrom apscheduler.schedulers.blocking import BlockingScheduler\n\n\ndef tick():\n    print('Tick! The time is: %s' % datetime.now())\n\n\nif __name__ == '__main__':\n    scheduler = BlockingScheduler()\n    scheduler.add_executor('processpool')\n    scheduler.add_job(tick, 'interval', seconds=3)\n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n\n    try:\n        scheduler.start()\n    except (KeyboardInterrupt, SystemExit):\n        pass"""
scheduler_task/study_apscheduler/examples/executors/simple.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-7-22 \xe4\xb8\x8a\xe5\x8d\x8810:29\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017\n# @File           : t.py\n# @Product        : PyCharm\n\n\nimport datetime\n\nfrom apscheduler.executors.pool import ThreadPoolExecutor, ProcessPoolExecutor\nfrom apscheduler.schedulers.blocking import BlockingScheduler\n\nscheduler = BlockingScheduler()\n\ndef current_time():\n    return datetime.datetime.now().strftime(""%Y-%m-%d %H:%M:%S"")\n\n\n# ###################\xe4\xbd\xbf\xe7\x94\xa8add_job\xe8\xbf\x90\xe8\xa1\x8c\xe4\xbb\xbb\xe5\x8a\xa1#################\n\ndef job1():\n    print \'job1 is running, Now is %s\' % current_time()\n\n\ndef job2():\n    print \'job2 is running, Now is %s\' % current_time()\n\n\n# \xe6\xaf\x8f\xe9\x9a\x945\xe7\xa7\x92\xe8\xbf\x90\xe8\xa1\x8c\xe4\xb8\x80\xe6\xac\xa1job1\nscheduler.add_job(job1, \'interval\', seconds=5, id=\'job1\')\n# \xe6\xaf\x8f\xe9\x9a\x945\xe7\xa7\x92\xe8\xbf\x90\xe8\xa1\x8c\xe4\xb8\x80\xe6\xac\xa1job2\nscheduler.add_job(job2, \'cron\', second=\'*/5\', id=\'job2\')\n\n\n# ###################\xe4\xbd\xbf\xe7\x94\xa8\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe6\xb7\xbb\xe5\x8a\xa0\xe4\xbb\xbb\xe5\x8a\xa1#################\n\n# \xe6\xaf\x8f\xe9\x9a\x945\xe7\xa7\x92\xe8\xbf\x90\xe8\xa1\x8c\xe4\xb8\x80\xe6\xac\xa1job3\n@scheduler.scheduled_job(\'interval\', seconds=5, id=\'job3\')\ndef job3():\n    print \'job3 is running, Now is %s\' % current_time()\n\n\n# \xe6\xaf\x8f\xe9\x9a\x945\xe7\xa7\x92\xe8\xbf\x90\xe8\xa1\x8c\xe4\xb8\x80\xe6\xac\xa1job4\n@scheduler.scheduled_job(\'cron\', second=\'*/5\', id=\'job4\')\ndef job4():\n    print \'job4 is running, Now is %s\' % current_time()\n\n\nexecutors = {\n    \'processpool\': ProcessPoolExecutor(5),\n    \'default\': ThreadPoolExecutor(20)\n\n}\njob_defaults = {\n    \'coalesce\': False,\n    \'max_instances\': 5\n}\nscheduler.configure(executors=executors, job_defaults=job_defaults)\nscheduler.start()\n'"
scheduler_task/study_apscheduler/examples/jobstores/__init__.py,0,b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-13 \xe4\xb8\x8a\xe5\x8d\x8811:09\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : __init__.py.py\n# @Product        : PyCharm\n'
scheduler_task/study_apscheduler/examples/jobstores/job_store.py,0,"b""#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-13 \xe4\xb8\x8a\xe5\x8d\x8811:14\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017\n# @File           : mongodb.py\n# @Product        : PyCharm\n# @Docs           : \n\n\nfrom datetime import datetime, timedelta\nimport sys\nimport os\n\nfrom apscheduler.schedulers.blocking import BlockingScheduler\n\n\ndef alarm(time):\n    print('Alarm! This alarm was scheduled at %s.' % time)\n\n\nif __name__ == '__main__':\n    scheduler = BlockingScheduler()\n    # ################ mongodb\n    scheduler.add_jobstore('mongodb', collection='example_jobs')\n\n    if len(sys.argv) > 1 and sys.argv[1] == '--clear':\n        scheduler.remove_all_jobs()\n\n    alarm_time = datetime.now() + timedelta(seconds=10)\n    scheduler.add_job(alarm, 'date', run_date=alarm_time, args=[datetime.now()])\n    print('To clear the alarms, run this example with the --clear argument.')\n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n\n    try:\n        scheduler.start()\n    except (KeyboardInterrupt, SystemExit):\n        pass\n"""
scheduler_task/study_apscheduler/examples/jobstores/log.py,0,"b""#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-13 \xe4\xb8\x8a\xe5\x8d\x8811:29\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : log.py\n# @Product        : PyCharm\n# @Docs           : \n# @Source         : \nimport logging\n\nlog = logging.getLogger('apscheduler.executors.default')\nlog.setLevel(logging.INFO)  # DEBUG\n# \xe8\xae\xbe\xe5\xae\x9a\xe6\x97\xa5\xe5\xbf\x97\xe6\xa0\xbc\xe5\xbc\x8f\nfmt = logging.Formatter('%(levelname)s:%(name)s:%(message)s')\nhandler = logging.StreamHandler()\nhandler.setFormatter(fmt)\nlog.addHandler(handler)\n"""
scheduler_task/study_apscheduler/examples/schedules/__init__.py,0,b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-13 \xe4\xb8\x8a\xe5\x8d\x8811:39\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : __init__.py.py\n# @Product        : PyCharm\n# @Docs           : \n# @Source         : \n\n\n'
scheduler_task/study_apscheduler/examples/schedules/schdule.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-13 \xe4\xb8\x8a\xe5\x8d\x8811:40\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : asyncio.py\n# @Product        : PyCharm\n# @Docs           : \n\nimport os\nimport time\nfrom datetime import datetime\n\n\ndef asyncio_schedule():\n    """"""\n    python version >= 3.4.0\n    :return:\n    """"""\n    from apscheduler.schedulers.asyncio import AsyncIOScheduler\n    try:\n        import asyncio\n    except ImportError:\n        import trollius as asyncio\n\n    def tick():\n        print(\'Tick! The time is: %s\' % datetime.now())\n\n    scheduler = AsyncIOScheduler()\n    scheduler.add_job(tick, \'interval\', seconds=3)\n    scheduler.start()\n    print(\'Press Ctrl+{0} to exit\'.format(\'Break\' if os.name == \'nt\' else \'C\'))\n\n    # Execution will block here until Ctrl+C (Ctrl+Break on Windows) is pressed.\n    try:\n        asyncio.get_event_loop().run_forever()\n    except (KeyboardInterrupt, SystemExit):\n        pass\n\n\ndef background_schedule():\n    from apscheduler.schedulers.background import BackgroundScheduler\n\n    def tick():\n        print(\'Tick! The time is: %s\' % datetime.now())\n\n    scheduler = BackgroundScheduler()\n    scheduler.add_job(tick, \'interval\', seconds=3)\n    scheduler.start()\n    print(\'Press Ctrl+{0} to exit\'.format(\'Break\' if os.name == \'nt\' else \'C\'))\n\n    try:\n        # This is here to simulate application activity (which keeps the main thread alive).\n        while True:\n            time.sleep(2)\n    except (KeyboardInterrupt, SystemExit):\n        # Not strictly necessary if daemonic mode is enabled but should be done if possible\n        scheduler.shutdown()\n\n\ndef blocking_schedule():\n    from apscheduler.schedulers.blocking import BlockingScheduler\n\n    def tick():\n        print(\'Tick! The time is: %s\' % datetime.now())\n\n    scheduler = BlockingScheduler()\n    scheduler.add_job(tick, \'interval\', seconds=3)\n    print(\'Press Ctrl+{0} to exit\'.format(\'Break\' if os.name == \'nt\' else \'C\'))\n\n    try:\n        scheduler.start()\n    except (KeyboardInterrupt, SystemExit):\n        pass\n\n\ndef gevent_schedule():\n    from apscheduler.schedulers.gevent import GeventScheduler\n\n    def tick():\n        print(\'Tick! The time is: %s\' % datetime.now())\n\n    scheduler = GeventScheduler()\n    scheduler.add_job(tick, \'interval\', seconds=3)\n    g = scheduler.start()  # g is the greenlet that runs the scheduler loop\n    print(\'Press Ctrl+{0} to exit\'.format(\'Break\' if os.name == \'nt\' else \'C\'))\n\n    # Execution will block here until Ctrl+C (Ctrl+Break on Windows) is pressed.\n    try:\n        g.join()\n    except (KeyboardInterrupt, SystemExit):\n        pass\n\n\ndef qt_schedule():\n    import signal\n    import sys\n    from apscheduler.schedulers.qt import QtScheduler\n\n    try:\n        from PyQt5.QtWidgets import QApplication, QLabel\n    except ImportError:\n        try:\n            from PyQt4.QtGui import QApplication, QLabel\n        except ImportError:\n            from PySide.QtGui import QApplication, QLabel\n\n    def tick():\n        label.setText(\'Tick! The time is: %s\' % datetime.now())\n\n    app = QApplication(sys.argv)\n\n    # This enables processing of Ctrl+C keypresses\n    signal.signal(signal.SIGINT, lambda *args: QApplication.quit())\n\n    label = QLabel(\'The timer text will appear here in a moment!\')\n    label.setWindowTitle(\'QtScheduler example\')\n    label.setFixedSize(280, 50)\n    label.show()\n\n    scheduler = QtScheduler()\n    scheduler.add_job(tick, \'interval\', seconds=3)\n    scheduler.start()\n\n    # Execution will block here until the user closes the windows or Ctrl+C is pressed.\n    app.exec_()\n\n\ndef tornado_schedule():\n    from tornado.ioloop import IOLoop\n    from apscheduler.schedulers.tornado import TornadoScheduler\n\n    def tick():\n        print(\'Tick! The time is: %s\' % datetime.now())\n\n    scheduler = TornadoScheduler()\n    scheduler.add_job(tick, \'interval\', seconds=3)\n    scheduler.start()\n    print(\'Press Ctrl+{0} to exit\'.format(\'Break\' if os.name == \'nt\' else \'C\'))\n\n    # Execution will block here until Ctrl+C (Ctrl+Break on Windows) is pressed.\n    try:\n        IOLoop.instance().start()\n    except (KeyboardInterrupt, SystemExit):\n        pass\n\n\ndef twisted_schedule():\n    from twisted.internet import reactor\n    from apscheduler.schedulers.twisted import TwistedScheduler\n\n    def tick():\n        print(\'Tick! The time is: %s\' % datetime.now())\n\n    scheduler = TwistedScheduler()\n    scheduler.add_job(tick, \'interval\', seconds=3)\n    scheduler.start()\n    print(\'Press Ctrl+{0} to exit\'.format(\'Break\' if os.name == \'nt\' else \'C\'))\n\n    # Execution will block here until Ctrl+C (Ctrl+Break on Windows) is pressed.\n    try:\n        reactor.run()\n    except (KeyboardInterrupt, SystemExit):\n        pass\n\n\nif __name__ == \'__main__\':\n    # gevent_schedule()\n    # twisted_schedule()\n    tornado_schedule()\n    print 123\n    pass\n'"
rpc/RPyC/tutorials/services/registry_discovery/__init__.py,0,b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-15 \xe4\xb8\x8b\xe5\x8d\x881:27\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : __init__.py.py\n# @Product        : PyCharm\n# @Docs           : \n# @Source         : \n\n\n'
rpc/RPyC/tutorials/services/registry_discovery/client_test.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-15 \xe4\xb8\x8b\xe5\x8d\x882:00\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : client_test.py\n# @Product        : PyCharm\n# @Docs           : \n# @Source         : \n\n\nimport rpyc\nfrom rpyc.utils.registry import UDPRegistryClient\n\n\ndef service01():\n    conn = rpyc.connect(host=\'localhost\', port=18861)\n    root = conn.root  # MyService object\n    # object\n    print root\n\n    print root.get_service_name()\n    print root.get_service_aliases()\n\n    # custom method\n    print root.get_answer()  # 66\n    print root.exposed_get_answer()  # 66\n    # print root.get_question()  # AttributeError: cannot access \'get_question\'\n\n    registrar = UDPRegistryClient()\n    list_of_servers = registrar.discover(""foo"")\n    print rpyc.discover(service_name=\'MY\', host=\'localhost\')\n\n\nif __name__ == \'__main__\':\n    service01()\n'"
rpc/RPyC/tutorials/services/registry_discovery/service01.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time           : 17-8-15 \xe4\xb8\x8b\xe5\x8d\x881:35\n# @Author         : Tom.Lee\n# @CopyRight      : 2016-2017 OpenBridge by yihecloud\n# @File           : service.py\n# @Product        : PyCharm\n# @Docs           : \n# @Source         : \n\nimport rpyc\nfrom rpyc.utils.server import ThreadedServer\n\n\n\nclass MyService(rpyc.Service):\n\n    def on_connect(self):\n        pass\n\n    def on_disconnect(self):\n        pass\n\n    @classmethod\n    def exposed_get_answer(cls):\n        return 66\n\n    @classmethod\n    def get_question(cls):\n        return ""what is the airspeed velocity of an unladen swallow?""\n\n\nif __name__ == ""__main__"":\n    t = ThreadedServer(MyService, port=18861)\n    print """"""\n    service start ok! port {port}\n    """""".format(port=18861)\n    t.start()\n'"
