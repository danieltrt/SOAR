file_path,api_count,code
font2img.py,3,"b'import os\nfrom glob import glob\nimport argparse\nimport numpy as np\nfrom PIL import Image, ImageDraw, ImageFont\nfrom tqdm import tqdm\n\nINVISIBLE_CHARS = [\' \', \'\xe3\x80\x80\', \'\\n\', \'\\r\', \'\\t\', \'\\a\', \'\\b\', \'\\f\', \'\\v\']\nAVOIDED_CHARS = [\'\\\\\', \'\\0\', \'/\', \':\', \'*\', \'?\', \'""\', \'<\', \'>\', \'|\']\nFONT_EXTS = [\'ttf\', \'ttc\', \'otf\', \'otc\']\nALPHABET_CAPS = [chr(i) for i in range(65, 65 + 26)]\n\n\nclass font2img():\n\n    def __init__(self, src_font_dir_path, src_chars_txt_path, dst_dir_path,\n                 canvas_size, font_size, output_ext, is_center, is_maximum,\n                 is_binary, is_unicode, is_by_char, is_recursive):\n        \'\'\'\n        \xe3\x82\xb3\xe3\x83\xb3\xe3\x82\xb9\xe3\x83\x88\xe3\x83\xa9\xe3\x82\xaf\xe3\x82\xbf\n        \'\'\'\n        self.src_font_dir_path = os.path.normpath(src_font_dir_path)\n        self.src_chars_txt_path = os.path.normpath(src_chars_txt_path)\n        self.dst_dir_path = os.path.normpath(dst_dir_path)\n        self.canvas_size = canvas_size\n        if font_size == 0:\n            self.font_size = int(self.canvas_size * 0.75)\n        else:\n            self.font_size = font_size\n        self.output_ext = output_ext\n        self.is_unicode = is_unicode\n        self.is_by_char = is_by_char\n        self.is_recursive = is_recursive\n\n        # \xe6\x96\x87\xe5\xad\x97\xe5\x8d\x98\xe4\xbd\x8d\xe3\x81\xae\xe9\x80\xb2\xe6\x8d\x97\xe8\xa1\xa8\xe7\xa4\xba\n        self.is_char_pbar = False\n\n        # \xe6\x9c\x80\xe5\xa4\xa7\xe5\x8c\x96\xef\xbc\x8c\xe3\x82\xbb\xe3\x83\xb3\xe3\x82\xbf\xe3\x83\xaa\xe3\x83\xb3\xe3\x82\xb0\xe6\x9c\x89\xe3\x82\x8a\xef\xbc\x8c\xe3\x82\xbb\xe3\x83\xb3\xe3\x82\xbf\xe3\x83\xaa\xe3\x83\xb3\xe3\x82\xb0\xe7\x84\xa1\xe3\x81\x97\xe3\x81\xa7\xe5\x88\xa5\xe3\x81\xae\xe9\x96\xa2\xe6\x95\xb0\xe3\x82\x92\xe4\xbd\xbf\xe7\x94\xa8\n        if is_maximum:\n            self._draw_char_func = self._draw_char_maximum\n            # \xe6\x9c\x80\xe5\xa4\xa7\xe5\x8c\x96ON\xe3\x81\xaa\xe3\x82\x89\xe6\x96\x87\xe5\xad\x97\xe5\x8d\x98\xe4\xbd\x8d\xe3\x81\xae\xe9\x80\xb2\xe6\x8d\x97\xe8\xa1\xa8\xe7\xa4\xba\n            self.is_char_pbar = True\n        elif is_center:\n            self._draw_char_func = self._draw_char_center\n        else:\n            self._draw_char_func = self._draw_char\n\n        # 2\xe5\x80\xa4\xe7\x94\xbb\xe5\x83\x8f\xe3\x81\xae\xe8\xa8\xad\xe5\xae\x9a\n        if is_binary:\n            self.pil_mode = \'1\'\n            self.white_value = 1\n        else:\n            self.pil_mode = \'L\'\n            self.white_value = 255\n\n        if not os.path.exists(self.dst_dir_path):\n            os.mkdir(self.dst_dir_path)\n\n        self._get_font_paths()\n        self._get_chars()\n\n        self.failure_txt = open(os.path.join(self.dst_dir_path, \'failure.txt\'), \'a\')\n\n    def __del__(self):\n        self.failure_txt.close()\n\n    def _get_font_paths(self):\n        \'\'\'\n        \xe3\x83\x95\xe3\x82\xa9\xe3\x83\xb3\xe3\x83\x88\xe3\x83\x91\xe3\x82\xb9\xe3\x81\xae\xe5\x8f\x96\xe5\xbe\x97\n        FONT_EXTS\xe3\x81\xab\xe5\x90\xab\xe3\x81\xbe\xe3\x82\x8c\xe3\x82\x8b\xe6\x8b\xa1\xe5\xbc\xb5\xe5\xad\x90\xe3\x81\xae\xe3\x83\x95\xe3\x82\xa1\xe3\x82\xa4\xe3\x83\xab\xe3\x82\x92\xe5\x85\xa8\xe3\x81\xa6\xe5\x8f\x96\xe5\xbe\x97\n        \'\'\'\n        self.font_paths = list()\n        for ext in FONT_EXTS:\n            if self.is_recursive:\n                tmp = glob(self.src_font_dir_path + \'/**/*.\' + ext, recursive=True)\n            else:\n                tmp = glob(self.src_font_dir_path + \'/*.\' + ext)\n            self.font_paths.extend(tmp)\n\n    def _get_chars(self):\n        \'\'\'\n        \xe7\x94\xbb\xe5\x83\x8f\xe5\x8c\x96\xe3\x81\x99\xe3\x82\x8b\xe6\x96\x87\xe5\xad\x97\xe3\x82\x92\xe5\x8f\x96\xe5\xbe\x97\n        \'\'\'\n        with open(self.src_chars_txt_path) as chars_txt_file:\n            readlines = chars_txt_file.readlines()\n        str_chars = \'\'\n        for line in readlines:\n            str_chars += line\n        self.chars = set(str_chars)\n        # INVISIBLE_CHARS\xe3\x81\xab\xe5\x90\xab\xe3\x81\xbe\xe3\x82\x8c\xe3\x82\x8b\xe4\xb8\x8d\xe5\x8f\xaf\xe8\xa6\x96\xe6\x96\x87\xe5\xad\x97\xe3\x81\xaf\xe9\x99\xa4\xe5\x8e\xbb\n        for c in INVISIBLE_CHARS:\n            if c in self.chars:\n                self.chars.remove(c)\n        self.escape_chars = list()\n        for c in self.chars:\n            # \xe3\x83\x95\xe3\x82\xa1\xe3\x82\xa4\xe3\x83\xab\xe5\x90\x8d\xe3\x81\xab\xe4\xbd\xbf\xe3\x81\x88\xe3\x81\xaa\xe3\x81\x84\xe6\x96\x87\xe5\xad\x97(\xe7\x89\xb9\xe3\x81\xabWindows\xe3\x81\xa7)\xe3\x81\xaf\xe5\xbf\x85\xe3\x81\x9a\xe6\x96\x87\xe5\xad\x97\xe3\x82\xb3\xe3\x83\xbc\xe3\x83\x89\xe3\x81\xab\xe5\xa4\x89\xe6\x8f\x9b\n            if self.is_unicode or c in AVOIDED_CHARS:\n                self.escape_chars.append(ord(c))\n            # \xe3\x82\xa2\xe3\x83\xab\xe3\x83\x95\xe3\x82\xa1\xe3\x83\x99\xe3\x83\x83\xe3\x83\x88\xe5\xa4\xa7\xe6\x96\x87\xe5\xad\x97\xe3\x81\xa8\xe5\xb0\x8f\xe6\x96\x87\xe5\xad\x97\xe3\x81\x8c\xe4\xb8\xa1\xe6\x96\xb9\xe3\x81\x82\xe3\x82\x8b\xe5\xa0\xb4\xe5\x90\x88\xef\xbc\x8c\xe5\xa4\xa7\xe6\x96\x87\xe5\xad\x97\xe3\x81\xab\'_\'\xe3\x82\x92\xe4\xbb\x98\xe4\xb8\x8e\n            elif c in ALPHABET_CAPS and chr(ord(c) + 32) in self.chars:\n                self.escape_chars.append(c + \'_\')\n            else:\n                self.escape_chars.append(c)\n        # \xe6\x96\x87\xe5\xad\x97\xe3\x81\x8c1000\xe4\xbb\xa5\xe4\xb8\x8a\xe3\x81\xaa\xe3\x82\x89\xe9\x80\xb2\xe6\x8d\x97\xe8\xa1\xa8\xe7\xa4\xba\xe3\x81\x99\xe3\x82\x8b\n        if len(self.chars) > 1000:\n            self.is_char_pbar = True\n\n    def run(self):\n        \'\'\'\n        \xe3\x83\x95\xe3\x82\xa9\xe3\x83\xb3\xe3\x83\x88\xe3\x81\xae\xe7\x94\xbb\xe5\x83\x8f\xe5\x8c\x96\xe5\xae\x9f\xe8\xa1\x8c\n        \'\'\'\n        if self.is_by_char:\n            for ec in self.escape_chars:\n                dst_img_dir_path = os.path.join(self.dst_dir_path, ec)\n                if not os.path.exists(dst_img_dir_path):\n                    os.mkdir(dst_img_dir_path)\n        pbar_font_paths = tqdm(self.font_paths)\n        for font_path in pbar_font_paths:\n            pbar_font_paths.set_description(\'{: <30}\'.format(os.path.basename(font_path)))\n            font_name = os.path.basename(os.path.splitext(font_path)[0])\n            failure_chars = list()\n            same_fonts_n = 0\n            if not self.is_by_char:\n                dst_img_dir_path = os.path.join(self.dst_dir_path, font_name)\n                if not os.path.exists(dst_img_dir_path):\n                    os.mkdir(dst_img_dir_path)\n            pbar_chars = tqdm(self.chars)\n            img, prev_img = None, None\n            dst_img_paths = list()\n            for i, c in enumerate(pbar_chars):\n                if img:\n                    prev_img = img\n                # \xe6\x96\x87\xe5\xad\x97\xe5\x8d\x98\xe4\xbd\x8d\xe3\x81\xae\xe9\x80\xb2\xe6\x8d\x97\xe8\xa1\xa8\xe7\xa4\xba\xe3\x81\xaa\xe3\x81\x97\xe3\x81\xaa\xe3\x82\x89clear\n                if not self.is_char_pbar:\n                    pbar_chars.clear()\n                pbar_chars.set_description(\'{}\'.format(\' \' * 30))\n                img = self._draw_char_func(c, font_path, self.canvas_size, self.font_size)\n                # \xe7\x94\xbb\xe5\x83\x8f\xe3\x81\x8c\xe7\x9c\x9f\xe3\x81\xa3\xe7\x99\xbd\xef\xbc\x8c\xe3\x81\xa4\xe3\x81\xbe\xe3\x82\x8a\xe7\x94\xbb\xe5\x83\x8f\xe5\x8c\x96\xe5\xa4\xb1\xe6\x95\x97\xe3\x81\x97\xe3\x81\x9f\xe6\x96\x87\xe5\xad\x97\xe3\x81\xaffailure_chars\xe3\x81\xab\n                if self._is_white(img):\n                    failure_chars.append(c)\n                    continue\n                # \xe4\xb8\x80\xe3\x81\xa4\xe5\x89\x8d\xe3\x81\xae\xe7\x94\xbb\xe5\x83\x8f\xe3\x81\xa8\xe5\x85\xa8\xe3\x81\x8f\xe5\x90\x8c\xe3\x81\x98\xe3\x82\x82\xe3\x81\xae\xe3\x82\x92\xe3\x82\xab\xe3\x82\xa6\xe3\x83\xb3\xe3\x83\x88\n                if prev_img and self._is_same(img, prev_img):\n                    same_fonts_n += 1\n                if self.is_by_char:\n                    file_name = font_name\n                    dst_img_dir_path = os.path.join(self.dst_dir_path, self.escape_chars[i])\n                else:\n                    file_name = self.escape_chars[i]\n                dst_img_path = os.path.join(dst_img_dir_path, \'{}.{}\'.format(file_name, self.output_ext))\n                img.save(dst_img_path)\n                dst_img_paths.append(dst_img_path)\n            if failure_chars:\n                failure_chars.sort()\n                # \xe5\xa4\xb1\xe6\x95\x97\xe3\x81\x97\xe3\x81\x9f\xe3\x83\xaa\xe3\x82\xb9\xe3\x83\x88\xe3\x82\x92\xe6\x9b\xb8\xe3\x81\x8d\xe8\xbe\xbc\xe3\x81\xbf\xef\xbc\x8e\n                # TODO: \xe5\x8d\x98\xe7\xb4\x94\xe3\x81\xab\xe8\xbf\xbd\xe8\xa8\x98\xe3\x81\xab\xe3\x81\x97\xe3\x81\xa6\xe3\x81\x84\xe3\x82\x8b\xe3\x81\xae\xe3\x81\xa7\xef\xbc\x8c\xe3\x81\x86\xe3\x81\xbe\xe3\x81\x8f\xe6\x9b\xb4\xe6\x96\xb0\xe3\x81\xa7\xe3\x81\x8d\xe3\x82\x8b\xe3\x82\x88\xe3\x81\x86\xe3\x81\xab\n                self.failure_txt.write(\'{},white,{}\\n\'.format(font_name, failure_chars))\n            if same_fonts_n == len(pbar_chars) - 1:\n                for dst_img_path in dst_img_paths:\n                    os.remove(dst_img_path)\n                self.failure_txt.write(\'{},same\\n\'.format(font_name))\n        # \xe6\x9c\x80\xe7\xb5\x82\xe7\x9a\x84\xe3\x81\xab\xef\xbc\x8c\xe7\xa9\xba\xe3\x81\xa0\xe3\x81\xa3\xe3\x81\x9f\xe3\x83\x87\xe3\x82\xa3\xe3\x83\xac\xe3\x82\xaf\xe3\x83\x88\xe3\x83\xaa\xe3\x82\x92\xe5\x89\x8a\xe9\x99\xa4\n        for path in glob(self.dst_dir_path + \'/*\'):\n            if os.path.isdir(path) and not os.listdir(path):\n                os.rmdir(path)\n\n    def _draw_char(self, char, font_path, canvas_size, font_size, offsets=(0, 0)):\n        \'\'\'\n        PIL\xe4\xbd\xbf\xe3\x81\xa3\xe3\x81\xa6\xe3\x83\x95\xe3\x82\xa9\xe3\x83\xb3\xe3\x83\x88\xe3\x82\x92\xe6\x8f\x8f\xe7\x94\xbb\n        \'\'\'\n        font = ImageFont.truetype(font_path, size=font_size)\n        img = Image.new(self.pil_mode, (canvas_size, canvas_size), self.white_value)\n        draw = ImageDraw.Draw(img)\n        draw.text(offsets, char, 0, font=font)\n        return img\n\n    def _draw_char_center(self, char, font_path, canvas_size, font_size, is_check_maximum=False):\n        \'\'\'\n        \xe3\x82\xbb\xe3\x83\xb3\xe3\x82\xbf\xe3\x83\xaa\xe3\x83\xb3\xe3\x82\xb0\xe3\x81\x97\xe3\x81\xa6\xe6\x8f\x8f\xe7\x94\xbb\n        \'\'\'\n        no_offset_img = self._draw_char(char, font_path, canvas_size * 2, font_size)\n        offsets, is_maximum = self._get_offset(no_offset_img)\n        img = self._draw_char(char, font_path, canvas_size, font_size, offsets=offsets)\n        if is_check_maximum:\n            return img, is_maximum\n        return img\n\n    def _draw_char_maximum(self, char, font_path, canvas_size, font_size):\n        \'\'\'\n        \xe6\x9c\x80\xe5\xa4\xa7\xe5\x8c\x96\xe3\x81\x97\xe3\x81\xa6\xe6\x8f\x8f\xe7\x94\xbb\n        \'\'\'\n        # TODO: \xe3\x82\x82\xe3\x81\xa3\xe3\x81\xa8\xe3\x82\xad\xe3\x83\xac\xe3\x82\xa4\xe3\x81\xab\xe3\x81\x97\xe3\x81\x9f\xe3\x81\x84\xe3\x81\xa8\xe3\x81\x93\xe3\x82\x8d\xe2\x80\xa6\n        def search_maximum_font_size(start, step):\n            current_font_size = start\n            while True:\n                img, is_maximum = self._draw_char_center(char, font_path, canvas_size, current_font_size, is_check_maximum=True)\n                if is_maximum:\n                    break\n                current_font_size += step\n            return img, current_font_size\n        step = 20\n        _, maximum_font_size = search_maximum_font_size(font_size, step)\n        img, _ = search_maximum_font_size(maximum_font_size - step, 1)\n        return img\n\n    def _get_offset(self, pil_img):\n        \'\'\'\n        \xe3\x82\xbb\xe3\x83\xb3\xe3\x82\xbf\xe3\x83\xaa\xe3\x83\xb3\xe3\x82\xb0\xe3\x81\x99\xe3\x82\x8b\xe3\x81\x9f\xe3\x82\x81\xe3\x81\xae\xe3\x82\xaa\xe3\x83\x95\xe3\x82\xbb\xe3\x83\x83\xe3\x83\x88\xe3\x82\x92\xe8\xa8\x88\xe7\xae\x97\n        \xe3\x81\xbe\xe3\x81\x9f\xef\xbc\x8c\xe6\x9c\x80\xe5\xa4\xa7\xe3\x81\xaa\xe3\x82\x89\xe3\x81\xb0is_maximum=True\xe3\x82\x92\xe8\xbf\x94\xe3\x81\x99\n        \'\'\'\n        num_img = self._pil2num(pil_img)\n        canvas_size = len(num_img)\n        canvas_offset = canvas_size - self.canvas_size\n        margins = {\'top\': 0, \'bottom\': 0, \'left\': 0, \'right\': 0}\n        # top\n        for i in range(canvas_size):\n            if False in (num_img[i] == self.white_value):\n                margins[\'top\'] = i\n                break\n        # bottom\n        for i in range(canvas_size):\n            if False in (num_img[canvas_size - i - 1] == self.white_value):\n                margins[\'bottom\'] = i - canvas_offset\n                break\n        # left\n        for i in range(canvas_size):\n            if False in (num_img[:, i] == self.white_value):\n                margins[\'left\'] = i\n                break\n        # right\n        for i in range(canvas_size):\n            if False in (num_img[:, canvas_size - i - 1] == self.white_value):\n                margins[\'right\'] = i - canvas_offset\n                break\n        x_offset = int((margins[\'right\'] - margins[\'left\']) / 2)\n        y_offset = int((margins[\'bottom\'] - margins[\'top\']) / 2)\n        offsets = (x_offset, y_offset)\n        is_tb_maximum = margins[\'top\'] + margins[\'bottom\'] <= 0 or margins[\'bottom\'] == - canvas_offset\n        is_lr_maximum = margins[\'right\'] + margins[\'left\'] <= 0 or margins[\'right\'] == - canvas_offset\n        is_maximum = is_tb_maximum or is_lr_maximum\n        return offsets, is_maximum\n\n    def _is_white(self, pil_img):\n        \'\'\'\n        \xe7\x94\xbb\xe5\x83\x8f\xe3\x81\x8c\xe7\x9c\x9f\xe3\x81\xa3\xe7\x99\xbd\xe3\x81\x8b\xe3\x83\x81\xe3\x82\xa7\xe3\x83\x83\xe3\x82\xaf\n        \xe7\x9c\x9f\xe3\x81\xa3\xe7\x99\xbd\xe3\x81\xaa\xe3\x82\x89True\xe3\x82\x92\xe8\xbf\x94\xe3\x81\x99\n        \'\'\'\n        num_img = self._pil2num(pil_img)\n        if False not in (num_img[:] == self.white_value):\n            return True\n        return False\n\n    def _is_same(self, prev_pil_img, cur_pil_img):\n        \'\'\'\n        \xe7\x94\xbb\xe5\x83\x8f\xe3\x81\x8c\xe7\x9c\x9f\xe3\x81\xa3\xe7\x99\xbd\xe3\x81\x8b\xe3\x83\x81\xe3\x82\xa7\xe3\x83\x83\xe3\x82\xaf\n        \xe7\x9c\x9f\xe3\x81\xa3\xe7\x99\xbd\xe3\x81\xaa\xe3\x82\x89True\xe3\x82\x92\xe8\xbf\x94\xe3\x81\x99\n        \'\'\'\n        prev_num_img = self._pil2num(prev_pil_img)\n        cur_num_img = self._pil2num(cur_pil_img)\n        return np.array_equal(prev_num_img, cur_num_img)\n\n    def _pil2num(self, pil_img):\n        \'\'\'\n        PIL\xe5\x9e\x8b\xe3\x81\x8b\xe3\x82\x89numpy\xe5\x9e\x8b\xe3\x81\xab\n        \'\'\'\n        num_img = np.asarray(pil_img)\n        # num_img.flags.writeable = True\n        return num_img\n\n    def _num2pil(self, num_img):\n        \'\'\'\n        numpy\xe5\x9e\x8b\xe3\x81\x8b\xe3\x82\x89PIL\xe5\x9e\x8b\xe3\x81\xab\n        \'\'\'\n        pil_img = Image.fromarray(np.uint8(num_img))\n        return pil_img\n\n\nif __name__ == \'__main__\':\n    parser = argparse.ArgumentParser(description=\'Convert font files into image files. () is default value.\')\n    parser.add_argument(\'src_font_dir_path\', action=\'store\', type=str, help=\'Directory path where source files are located.\')\n    parser.add_argument(\'src_chars_txt_path\', action=\'store\', type=str, help=\'Characters txt path.\')\n    parser.add_argument(\'dst_dir_path\', action=\'store\', type=str, help=\'Directory path of destination.\')\n    parser.add_argument(\'-c\', \'--canvas_size\', dest=\'canvas_size\', action=\'store\', type=int, default=256, help=\'Canvas-size[pixel]. (256)\')\n    parser.add_argument(\'-f\', \'--font-size\', dest=\'font_size\', action=\'store\', type=int, default=0, help=\'Font-size[pt]. (canvas-size*0.75[pt])\')\n    parser.add_argument(\'-e\', \'--ext\', dest=\'output_ext\', action=\'store\', type=str, default=\'png\', help=""Output images\' extention. (png)"")\n    parser.add_argument(\'--not-centering\', dest=\'is_center\', action=\'store_false\', help=\'Centerize or not. (True)\')\n    parser.add_argument(\'-m\', \'--maximum\', dest=\'is_maximum\', action=\'store_true\', help=\'Maximize or not. (False)\')\n    parser.add_argument(\'-b\', \'--binary\', dest=\'is_binary\', action=\'store_true\', help=\'Binarize or not. (False)\')\n    parser.add_argument(\'-u\', \'--unicode\', dest=\'is_unicode\', action=\'store_true\', help=\'Save as unicode point (False)\')\n    parser.add_argument(\'--by-char\', dest=\'is_by_char\', action=\'store_true\', help=\'Subdirectory will be character name (False)\')\n    parser.add_argument(\'-r\', \'--recursive\', dest=\'is_recursive\', action=\'store_true\', help=\'Search font files recursively (False)\')\n    args = parser.parse_args()\n    f2i = font2img(src_font_dir_path=args.src_font_dir_path,\n                   src_chars_txt_path=args.src_chars_txt_path,\n                   dst_dir_path=args.dst_dir_path,\n                   canvas_size=args.canvas_size,\n                   font_size=args.font_size,\n                   output_ext=args.output_ext,\n                   is_center=args.is_center,\n                   is_maximum=args.is_maximum,\n                   is_binary=args.is_binary,\n                   is_unicode=args.is_unicode,\n                   is_by_char=args.is_by_char,\n                   is_recursive=args.is_recursive)\n    f2i.run()\n'"
