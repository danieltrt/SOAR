file_path,api_count,code
game.py,0,b''
1.Python Data Science Toolbox (Part 1)/1 Writing your own functions/frequencyindataframe.py,0,"b'# Define count_entries()\ndef count_entries(df, col_name):\n    """"""Return a dictionary with counts of \n    occurrences as value for each key.""""""\n\n    # Initialize an empty dictionary: langs_count\n    langs_count = {}\n    print(type(langs_count))\n    # Extract column from DataFrame: col\n    col = df[col_name]\n    \n    # Iterate over lang column in DataFrame\n    for entry in col:\n\n        # If the language is in langs_count, add 1\n        if entry in langs_count.keys():\n            langs_count[entry] = langs_count[entry] +1 \n        # Else add the language to langs_count, set the value to 1\n        else:\n            langs_count[entry] = 1\n\n    # Return the langs_count dictionary\n    return langs_count\n\n# Call count_entries(): result\nresult = count_entries(tweets_df, \'lang\')\n\n# Print the result\nprint(result)\n'"
"1.Python Data Science Toolbox (Part 1)/2 Default arguments, variable-(args, kwargs)/frequencyindataframe.py",0,"b'# Define count_entries()\ndef count_entries(df, *args):\n    """"""Return a dictionary with counts of\n    occurrences as value for each key.""""""\n    \n    #Initialize an empty dictionary: cols_count\n    cols_count = {}\n    \n    # Iterate over column names in args\n    for col_name in args:\n    \n        # Extract column from DataFrame: col\n        col = df[col_name]\n    \n        # Iterate over the column in DataFrame\n        for entry in col:\n    \n            # If entry is in cols_count, add 1\n            if entry in cols_count:\n                cols_count[entry] += 1\n    \n            # Else add the entry to cols_count, set the value to 1\n            else:\n                cols_count[entry] = 1\n\n    # Return the cols_count dictionary\n    return cols_count\n\n# Call count_entries(): result1\nresult1 = count_entries(tweets_df, \'lang\')\n\n# Call count_entries(): result2\nresult2 = count_entries(tweets_df, \'lang\', \'source\')\n\n# Print result1 and result2\nprint(result1)\nprint(result2)\n'"
1.Python Data Science Toolbox (Part 1)/3Lambda functions and error-handling/frequencyindataframe.py,0,"b'# Define count_entries()\ndef count_entries(df, col_name=\'lang\'):\n    """"""Return a dictionary with counts of\n    occurrences as value for each key.""""""\n    \n    # Raise a ValueError if col_name is NOT in DataFrame\n    if col_name not in df.columns:\n        raise ValueError(\'The DataFrame does not have a \' + col_name + \' column.\')\n\n    # Initialize an empty dictionary: cols_count\n    cols_count = {}\n    \n    # Extract column from DataFrame: col\n    col = df[col_name]\n    \n    # Iterate over the column in DataFrame\n    for entry in col:\n\n        # If entry is in cols_count, add 1\n        if entry in cols_count.keys():\n            cols_count[entry] += 1\n            # Else add the entry to cols_count, set the value to 1\n        else:\n            cols_count[entry] = 1\n        \n        # Return the cols_count dictionary\n    return cols_count\n\n# Call count_entries(): result1\nresult1 = count_entries(tweets_df, \'lang\')\n\n# Print result1\nprint(result1)\n'"
2.Python Data Science Toolbox (Part 2)/1.Using iterators in PythonLand/1.Processing large amounts of Twitter data.py,0,"b""# Initialize an empty dictionary: counts_dict\ncounts_dict = {}\n\n# Iterate over the file chunk by chunk\nfor df in pd.read_csv('tweets.csv', chunksize=10):\n\n    # Iterate over the column in DataFrame\n    for entry in df['lang']:\n        if entry in counts_dict.keys():\n            counts_dict[entry] += 1\n        else:\n            counts_dict[entry] = 1\n\n# Print the populated dictionary\nprint(counts_dict)\n"""
2.Python Data Science Toolbox (Part 2)/1.Using iterators in PythonLand/2.Extracting information for large amounts of Twitter data.py,0,b''
2.Python Data Science Toolbox (Part 2)/2.List comprehensions and genera/Conditional list comprehesions for time-stamped data.py,0,"b""# Extract the created_at column from df: tweet_time\ntweet_time = df['created_at']\n\n# Extract the clock time: tweet_clock_time\ntweet_clock_time = [entry[11:19] for entry in tweet_time if entry[17:19] == '19']\n\n# Print the extracted times\nprint(tweet_clock_time)\n"""
2.Python Data Science Toolbox (Part 2)/3.Bringing it all together!/Writing an iterator to load data in chunks (5).py,0,"b""# Define plot_pop()\ndef plot_pop(filename, country_code):\n\n    # Initialize reader object: urb_pop_reader\n    urb_pop_reader = pd.read_csv(filename, chunksize=1000)\n\n    # Initialize empty DataFrame: data\n    data = pd.DataFrame()\n    \n    # Iterate over each DataFrame chunk\n    for df_urb_pop in urb_pop_reader:\n        # Check out specific country: df_pop_ceb\n        df_pop_ceb = df_urb_pop[df_urb_pop['CountryCode'] == country_code]\n\n        # Zip DataFrame columns of interest: pops\n        pops = zip(df_pop_ceb['Total Population'],\n                    df_pop_ceb['Urban population (% of total)'])\n\n        # Turn zip object into list: pops_list\n        pops_list = list(pops)\n\n        # Use list comprehension to create new DataFrame column 'Total Urban Population'\n        df_pop_ceb['Total Urban Population'] = [int(tup[0] * tup[1]) for tup in pops_list]\n    \n        # Append DataFrame chunk to data: data\n        data = data.append(df_pop_ceb)\n\n    # Plot urban population data\n    data.plot(kind='scatter', x='Year', y='Total Urban Population')\n    plt.show()\n\n# Set the filename: fn\nfn = 'ind_pop_data.csv'\n\n# Call plot_pop for country code 'CEB'\nplot_pop('ind_pop_data.csv','CEB')\n\n# Call plot_pop for country code 'ARB'\nplot_pop('ind_pop_data.csv','ARB')\n\n"""
