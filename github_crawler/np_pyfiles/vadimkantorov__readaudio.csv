file_path,api_count,code
decode_audio.py,0,"b""import os\nimport sys\nimport ctypes\n\nclass DecodeAudio(ctypes.Structure):\n\t_fields_ = [\n\t\t('error', ctypes.c_char * 128),\n\t\t('fmt', ctypes.c_char * 8),\n\t\t('sample_rate', ctypes.c_ulonglong),\n\t\t('num_channels', ctypes.c_ulonglong),\n\t\t('num_samples', ctypes.c_ulonglong),\n\t\t('itemsize', ctypes.c_ulonglong),\n\t\t('data', ctypes.POINTER(ctypes.c_ubyte))\n\t]\n\n\t@property\n\tdef dtype(self):\n\t\treturn 'int16' if b's16' in self.fmt else 'float32' if 'f32' in self.fmt else 'uint8'\n\n\t@property\n\tdef nbytes(self):\n\t\treturn self.num_channels * self.num_samples * self.itemsize\n\n\t@property\n\tdef byte_order(self):\n\t\treturn 'little' if b'le' in self.fmt else 'big' if b'be' in self.fmt else 'native'\n\n\tdef __bytes__(self):\n\t\treturn ctypes.cast(self.data, ctypes.POINTER(ctypes.c_ubyte * self.nbytes)).contents\n\t\n\tdef __init__(self, lib_path = os.path.abspath('decode_audio.so')):\n\t\tself.lib = ctypes.CDLL(lib_path)\n\t\tself.lib.decode_audio.restype = DecodeAudio\n\n\tdef __call__(self, input_path):\n\t\taudio = self.lib.decode_audio(input_path.encode())\n\t\tif audio.error:\n\t\t\traise Exception(audio.error.decode())\n\t\treturn audio\n\nif __name__ == '__main__':\n\tdecode_audio = DecodeAudio()\n\n\taudio = decode_audio(sys.argv[1])\n\tprint('ffplay', '-f', audio.fmt, '-ac', audio.num_channels, '-ar', audio.sample_rate, '-i', sys.argv[1], '# num samples:', audio.num_samples)\n\n\timport numpy\n\t\n\tif 'numpy' in sys.argv[2]:\n\t\tarray = numpy.ctypeslib.as_array(audio.data, shape = (audio.nbytes, )).view(audio.dtype).reshape(-1, audio.num_channels)\n\n\telif 'torch' in sys.argv[2]:\n\t\timport torch\n\t\tarray = torch.tensor((), dtype = getattr(torch, audio.dtype)).set_(dict(torch.uint8 = torch.ByteStorage, int16 = torch.ShortStorage, float32 = torch.FloatStorage)[audio.dtype].from_buffer(bytes(audio), byte_order = audio.byte_order)).reshape(-1, audio.num_channels)\n\n\tprint(array.dtype, array.shape)\n\tnumpy.asarray(array).tofile(sys.argv[2])\n"""
