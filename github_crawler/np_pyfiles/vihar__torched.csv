file_path,api_count,code
simple_regression.py,4,"b""import torch\nimport torch.nn as nn\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom torch.autograd import Variable\n\n\n# Hyper Parameters\ninput_size = 1\noutput_size = 1\nnum_epochs = 60\nlearning_rate = 0.001\n\n# Toy Dataset\nx_train = np.array([[3.3], [4.4], [5.5], [6.71], [6.93], [4.168],\n                    [9.779], [6.182], [7.59], [2.167], [7.042],\n                    [10.791], [5.313], [7.997], [3.1]], dtype=np.float32)\n\ny_train = np.array([[1.7], [2.76], [2.09], [3.19], [1.694], [1.573],\n                    [3.366], [2.596], [2.53], [1.221], [2.827],\n                    [3.465], [1.65], [2.904], [1.3]], dtype=np.float32)\n\n# Linear Regression Model\n\n\nclass LinearRegression(nn.Module):\n    def __init__(self, input_size, output_size):\n        super(LinearRegression, self).__init__()\n        self.linear = nn.Linear(input_size, output_size)\n\n    def forward(self, x):\n        out = self.linear(x)\n        return out\n\n\nmodel = LinearRegression(input_size, output_size)\n\n# Loss and Optimizer\ncriterion = nn.MSELoss()\noptimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)\n\n# Train the Model\nfor epoch in range(num_epochs):\n    # Convert numpy array to torch Variable\n    inputs = Variable(torch.from_numpy(x_train))\n    targets = Variable(torch.from_numpy(y_train))\n\n    # Forward + Backward + Optimize\n    optimizer.zero_grad()\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    loss.backward()\n    optimizer.step()\n\n    if (epoch + 1) % 5 == 0:\n        print ('Epoch [%d/%d], Loss: %.4f'\n               % (epoch + 1, num_epochs, loss.data[0]))\n\n# Plot the graph\npredicted = model(Variable(torch.from_numpy(x_train))).data.numpy()\nplt.plot(x_train, y_train, 'ro', label='Original data')\nplt.plot(x_train, predicted, label='Fitted line')\nplt.legend()\nplt.show()\n"""
