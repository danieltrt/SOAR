file_path,api_count,code
1_Python Basic_1_The Python Interface.py,0,"b'# Example, do not modify!\r\nprint(5 / 8)\r\nprint(7+10)\r\n# Put code below here\r\n'"
1_Python Basic_2_Any comments.py,0,b'# Just testing division\r\nprint(5 / 8)\r\n\r\n# Addition works too\r\nprint(7 + 10)'
1_Python Basic_3_Python as a calculator.py,0,b'# Addition and subtraction\r\nprint(5 + 5)\r\nprint(5 - 5)\r\n\r\n# Multiplication and division\r\nprint(3 * 5)\r\nprint(10 / 2)\r\n\r\n# Exponentiation\r\nprint(4 ** 2)\r\n\r\n# Modulo\r\nprint(18 % 7)\r\n\r\n# How much is your $100 worth after 7 years?\r\nprint(100*(1.1**7))'
1_Python Basic_4_Variable Assignment.py,0,b'# Create a variable savings\r\nsavings = 100\r\n\r\n# Print out savings\r\nprint(savings)'
1_Python Basic_5_Calculations with variables.py,0,b'# Create a variable savings\r\nsavings = 100\r\n\r\n# Create a variable factor\r\nfactor=1.10\r\n\r\n# Calculate result\r\nresult=savings * factor ** 7\r\n\r\n# Print out result\r\nprint(result)'
1_Python Basic_6_Other variable types.py,0,"b'# Create a variable desc\r\ndesc=""compound interest""\r\n\r\n# Create a variable profitable\r\nprofitable = True'"
1_Python Basic_7_Operations with other types.py,0,"b'# Several variables to experiment with\r\nsavings = 100\r\nfactor = 1.1\r\ndesc = ""compound interest""\r\n\r\n# Assign product of factor and savings to year1\r\nyear1=savings*factor\r\n\r\n# Print the type of year1\r\nprint(type(year1))\r\n\r\n# Assign sum of desc and desc to doubledesc\r\ndoubledesc=desc+desc\r\n\r\n# Print out doubledesc\r\nprint(doubledesc)'"
1_Python Basic_8_Type conversion.py,0,"b'# Definition of savings and result\r\nsavings = 100\r\nresult = 100 * 1.10 ** 7\r\n\r\n# Fix the printout\r\nprint(""I started with $"" + str(savings) + "" and now have $"" + str(result) + "". Awesome!"")\r\n\r\n# Definition of pi_string\r\npi_string = ""3.1415926""\r\n\r\n# Convert pi_string into float: pi_float\r\npi_float=float(pi_string)'"
2_Python List_10_Inner workings of lists.py,0,"b'# Create list areas\r\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\r\n\r\n# Create areas_copy\r\nareas_copy = [11.25, 18.0, 20.0, 10.75, 9.50]\r\n\r\n# Change areas_copy\r\nareas_copy[0] = 5.0\r\n\r\n# Print areas\r\nprint(areas)'"
2_Python List_1_Create a list.py,0,"b'# area variables (in square meters)\r\nhall = 11.25\r\nkit = 18.0\r\nliv = 20.0\r\nbed = 10.75\r\nbath = 9.50\r\n\r\n# Create list areas\r\nareas=[11.25,18.0,20.0,10.75,9.50]\r\n\r\n# Print areas\r\nprint(areas)\r\n'"
2_Python List_2_Create list with different types.py,0,"b'# area variables (in square meters)\r\nhall = 11.25\r\nkit = 18.0\r\nliv = 20.0\r\nbed = 10.75\r\nbath = 9.50\r\n\r\n# Adapt list areas\r\nareas = [""hallway"",hall,""kitchen"", kit, ""living room"", liv,""bedroom"", bed, ""bathroom"", bath]\r\n\r\n# Print areas\r\nprint(areas)'"
2_Python List_3_List of lists.py,0,"b'# area variables (in square meters)\r\nhall = 11.25\r\nkit = 18.0\r\nliv = 20.0\r\nbed = 10.75\r\nbath = 9.50\r\n\r\n# house information as list of lists\r\nhouse = [[""hallway"", hall],\r\n         [""kitchen"", kit],\r\n         [""living room"", liv],[""bedroom"",bed],[""bathroom"",bath]]\r\n\r\n# Print out house\r\nprint(house)\r\n\r\n# Print out the type of house\r\nprint(type(house))'"
2_Python List_4_Subset and conquer.py,0,"b'# Create the areas list\r\nareas = [""hallway"", 11.25, ""kitchen"", 18.0, ""living room"", 20.0, ""bedroom"", 10.75, ""bathroom"", 9.50]\r\n\r\n# Print out second element from areas\r\nprint(areas[1])\r\n\r\n# Print out last element from areas\r\nprint(areas[-1])\r\n\r\n# Print out the area of the living room\r\nprint(areas[5])'"
2_Python List_5_Subset and calculate.py,0,"b'# Create the areas list\r\nareas = [""hallway"", 11.25, ""kitchen"", 18.0, ""living room"", 20.0, ""bedroom"", 10.75, ""bathroom"", 9.50]\r\n\r\n# Sum of kitchen and bedroom area: eat_sleep_area\r\neat_sleep_area = areas[3]+areas[-3]\r\n\r\n# Print the variable eat_sleep_area\r\nprint(eat_sleep_area)'"
2_Python List_6_Slicing and dicing.py,0,"b'# Create the areas list\r\nareas = [""hallway"", 11.25, ""kitchen"", 18.0, ""living room"", 20.0, ""bedroom"", 10.75, ""bathroom"", 9.50]\r\n\r\n# Use slicing to create downstairs\r\ndownstairs =areas[:6]\r\n\r\n# Use slicing to create upstairs\r\nupstairs=areas[6:]\r\n\r\n# Print out downstairs and upstairs\r\nprint(downstairs)\r\nprint(upstairs)'"
2_Python List_7_Slicing and dicing (2).py,0,"b'# Create the areas list\r\nareas = [""hallway"", 11.25, ""kitchen"", 18.0, ""living room"", 20.0, ""bedroom"", 10.75, ""bathroom"", 9.50]\r\n\r\n# Alternative slicing to create downstairs\r\ndownstairs=areas[:6]\r\n\r\n# Alternative slicing to create upstairs\r\nupstairs=areas[6:]'"
2_Python List_8_Replace list elements.py,0,"b'# Create the areas list\r\nareas = [""hallway"", 11.25, ""kitchen"", 18.0, ""living room"", 20.0, ""bedroom"", 10.75, ""bathroom"", 9.50]\r\n\r\n# Correct the bathroom area\r\nareas[9] =10.50\r\n\r\n# Change ""living room"" to ""chill zone""\r\nareas[4]=""chill zone""'"
2_Python List_9_Extend a list.py,0,"b'# Create the areas list and make some changes\r\nareas = [""hallway"", 11.25, ""kitchen"", 18.0, ""chill zone"", 20.0,\r\n         ""bedroom"", 10.75, ""bathroom"", 10.50]\r\n\r\n# Add poolhouse data to areas, new list is areas_1\r\nareas_1 = areas + [""poolhouse"", 24.5]\r\n\r\n# Add garage data to areas_1, new list is areas_2\r\nareas_2 = areas_1 + [""garage"",15.45]'"
3_Functions-and-packages_1_Familiar functions.py,0,"b'# Create variables var1 and var2\r\nvar1 = [1, 2, 3, 4]\r\nvar2 = True\r\n\r\n# Print out type of var1\r\nprint(type(var1))\r\n\r\n# Print out length of var1\r\nprint(len(var1))\r\n\r\n# Convert var2 to an integer: out2\r\nout2=int(var2)'"
3_Functions-and-packages_2_Multiple arguments.py,0,"b'# Create lists first and second\r\nfirst = [11.25, 18.0, 20.0]\r\nsecond = [10.75, 9.50]\r\n\r\n# Paste together first and second: full\r\nfull = first+second\r\n\r\n# Sort full in descending order: full_sorted\r\nfull_sorted = sorted(full,reverse=True)\r\n\r\n# Print out full_sorted\r\nprint(full_sorted)'"
3_Functions-and-packages_3_String Methods.py,0,"b'# string to experiment with: room\r\nroom = ""poolhouse""\r\n\r\n# Use upper() on room: room_up\r\nroom_up=room.upper()\r\n\r\n# Print out room and room_up\r\nprint(room)\r\nprint(room_up)\r\n# Print out the number of o\'s in room\r\nprint(room.count(\'o\'))\t'"
3_Functions-and-packages_4_List Methods.py,0,"b'# Create list areas\r\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\r\n\r\n# Print out the index of the element 20.0\r\nprint(areas.index(20.0))\r\n\r\n# Print out how often 14.5 appears in areas\r\nprint(areas.count(14.5))\r\n'"
3_Functions-and-packages_5_List Methods (2).py,0,"b'# Create list areas\r\nareas = [11.25, 18.0, 20.0, 10.75, 9.50]\r\n\r\n# Use append twice to add poolhouse and garage size\r\nareas.append(24.5)\r\nareas.append(15.45)\r\n\r\n# Print out areas\r\nprint(areas)\r\n\r\n# Reverse the orders of the elements in areas\r\nareas.reverse()\r\n\r\n# Print out areas\r\nprint(areas)'"
3_Functions-and-packages_6_Import package.py,0,"b'# Definition of radius\r\nr = 0.43\r\n# Import the math package\r\nimport math\r\n\r\n# Calculate C\r\nC = 2*math.pi*r\r\n\r\n# Calculate A\r\nA = math.pi*r*r\r\n\r\n# Build printout\r\nprint(""Circumference: "" + str(C))\r\nprint(""Area: "" + str(A))'"
3_Functions-and-packages_7_Selective import.py,0,b'# Definition of radius\r\nr = 192500\r\n\r\n# Import radians function of math package\r\nfrom math import radians\r\n\r\n# Travel distance of Moon over 12 degrees. Store in dist.\r\nphi=radians(12)\r\ndist=r*phi\r\n\r\n# Print out dist\r\nprint(dist)'
4_NumPy_10_Average versus median.py,2,"b'# np_baseball is available\r\n\r\n# Import numpy\r\nimport numpy as np\r\n\r\n# Create np_height from np_baseball\r\nnp_height_in=np_baseball[:,0]\r\n\r\n# Print out the mean of np_height\r\nprint(np.mean(np_height_in))\r\n\r\n# Print out the median of np_height\r\nprint(np.median(np_height_in))\r\n'"
4_NumPy_11_Explore the baseball data.py,4,"b'# np_baseball is available\r\n\r\n# Import numpy\r\nimport numpy as np\r\n\r\n# Print mean height (first column)\r\navg = np.mean(np_baseball[:,0])\r\nprint(""Average: "" + str(avg))\r\n\r\n# Print median height. Replace \'None\'\r\nmed = np.median(np_baseball[:,0])\r\nprint(""Median: "" + str(med))\r\n\r\n# Print out the standard deviation on height. Replace \'None\'\r\nstddev = np.std(np_baseball[:,0])\r\nprint(""Standard Deviation: "" + str(stddev))\r\n\r\n# Print out correlation between first and second column. Replace \'None\'\r\ncorr = np.corrcoef(np_baseball[:,0], np_baseball[:,1])\r\nprint(""Correlation: "" + str(corr))'"
4_NumPy_12_Blend it all together.py,4,"b'# heights and positions are available as lists\r\n\r\n# Import numpy\r\nimport numpy as np\r\n\r\n# Convert positions and heights to numpy arrays: np_positions, np_heights\r\nnp_positions=np.array(positions)\r\nnp_heights=np.array(heights)\r\n\r\n\r\n# Heights of the goalkeepers: gk_heights\r\ngk_heights = np_heights[np_positions==\'GK\']\r\n\r\n# Heights of the other players: other_heights\r\nnp_positions !=\'GK\'\r\nother_heights=np_heights[np_positions !=\'GK\']\r\n\r\n# Print out the median height of goalkeepers. Replace \'None\'\r\nprint(""Median height of goalkeepers: "" + str(np.median(gk_heights)))\r\n\r\n# Print out the median height of other players. Replace \'None\'\r\nprint(""Median height of other players: "" + str(np.median(other_heights)))'"
4_NumPy_1_First NumPy Array.py,1,"b'# Create list baseball\r\nbaseball = [180, 215, 210, 210, 188, 176, 209, 200]\r\n\r\n# Import the numpy package as np\r\nimport numpy as np\r\n\r\n# Create a numpy array from baseball: np_baseball\r\nnp_baseball=np.array(baseball)\r\n\r\n# Print out type of np_baseball\r\nprint(type(np_baseball))'"
4_NumPy_2_Baseball players' height.py,1,b'# height is available as a regular list\r\n\r\n# Import numpy\r\nimport numpy as np\r\n\r\n# Create a numpy array from height: np_height\r\nnp_height=np.array(height_in)\r\n\r\n# Print out np_height\r\nprint(np_height)\r\n\r\n# Convert np_height to m: np_height_m\r\nnp_height_m=np_height*0.0254\r\n# Print np_height_m\r\nprint(np_height_m)\r\n'
4_NumPy_3_Baseball player's BMI.py,2,b'# height and weight are available as a regular lists\r\n\r\n# Import numpy\r\nimport numpy as np\r\n\r\n# Create array from height with correct units: np_height_m\r\nnp_height_m = np.array(height_in) * 0.0254\r\n\r\n# Create array from weight with correct units: np_weight_kg\r\nnp_weight_kg=np.array(weight_lb)*0.453592\r\n\r\n# Calculate the BMI: bmi\r\nbmi=np_weight_kg/(np_height_m **2)\r\n\r\n# Print out bmi\r\nprint(bmi)\r\n'
4_NumPy_4_Lightweight baseball players.py,2,b'# height and weight are available as a regular lists\r\n\r\n# Import numpy\r\nimport numpy as np\r\n\r\n# Calculate the BMI: bmi\r\nnp_height_m = np.array(height) * 0.0254\r\nnp_weight_kg = np.array(weight) * 0.453592\r\nbmi = np_weight_kg / np_height_m ** 2\r\n\r\n# Create the light array\r\nlight=bmi<21\r\n\r\n# Print out light\r\nprint(light)\r\n\r\n# Print out BMIs of all baseball players whose BMI is below 21\r\nprint(bmi[light])'
4_NumPy_5_Subsetting NumPy Arrays.py,2,b'# height and weight are available as a regular lists\r\n\r\n# Import numpy\r\nimport numpy as np\r\n\r\n# Store weight and height lists as numpy arrays\r\nnp_weight_lb = np.array(weight_lb)\r\nnp_height_in = np.array(height_in)\r\n\r\n# Print out the weight at index 50\r\nprint(np_weight_lb[50])\r\n# Print out sub-array of np_height: index 100 up to and including index 110\r\nprint(np_height_in[100:111])\r\n'
4_NumPy_6_First 2D NumPy Array.py,1,"b'# Create baseball, a list of lists\r\nbaseball = [[180, 78.4],\r\n            [215, 102.7],\r\n            [210, 98.5],\r\n            [188, 75.2]]\r\n\r\n# Import numpy\r\nimport numpy as np\r\n\r\n# Create a 2D numpy array from baseball: np_baseball\r\nnp_baseball=np.array(baseball)\r\n# Print out the type of np_baseball\r\nprint(type(np_baseball))\r\n\r\n# Print out the shape of np_baseball\r\nprint(np_baseball.shape)'"
4_NumPy_7_Baseball data in 2D form.py,1,b'# baseball is available as a regular list of lists\r\n\r\n# Import numpy package\r\nimport numpy as np\r\n\r\n# Create a 2D numpy array from baseball: np_baseball\r\nnp_baseball=np.array(baseball)\r\n\r\n# Print out the shape of np_baseball\r\nprint(np_baseball.shape)'
4_NumPy_8_Subsetting 2D NumPy Arrays.py,1,"b'# baseball is available as a regular list of lists\r\n\r\n# Import numpy package\r\nimport numpy as np\r\n\r\n# Create np_baseball (2 cols)\r\nnp_baseball = np.array(baseball)\r\n\r\n# Print out the 50th row of np_baseball\r\nprint(np_baseball[49,:])\r\n\r\n# Select the entire second column of np_baseball: np_weight\r\nnp_weight_lb =np_baseball[:,1]\r\n# Print out height of 124th player\r\nprint(np_baseball[123, 0])\r\n'"
4_NumPy_9_2D Arithmetic.py,2,"b'# baseball is available as a regular list of lists\r\n# updated is available as 2D numpy array\r\n\r\n# Import numpy package\r\nimport numpy as np\r\n\r\n# Create np_baseball (3 cols)\r\nnp_baseball = np.array(baseball)\r\n\r\n# Print out addition of np_baseball and updated\r\nprint(np_baseball+updated)\r\n# Create numpy array: conversion\r\nconversion=np.array([0.0254,0.453592,1])\r\n\r\n# Print out product of np_baseball and conversion\r\nprint(np_baseball * conversion)'"
