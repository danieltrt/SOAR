file_path,api_count,code
setup.py,0,"b'import glob\nimport sys\n\nfrom setuptools import find_packages, setup\nfrom setuptools.command.develop import develop\n\nif sys.version_info < (3, 6):\n    sys.exit(""Please use Python version 3.6 or higher."")\n\n\n# get the version\nversion = {}\nwith open(""numproto/__version__.py"") as fp:\n    exec(fp.read(), version)\n\n# get readme\nwith open(""README.md"", ""r"") as fh:\n    readme = fh.read()\n\n\n# Handle protobuf\nclass CustomDevelopCommand(develop):\n    def run(self):\n        # we need to import this here or else grpc_tools would have to be\n        # installed in the system before we could run the setup.py\n        from grpc_tools import protoc\n\n        develop.run(self)\n\n        proto_files = glob.glob(""./numproto/protobuf/*.proto"")\n        command = [\n            ""grpc_tools.protoc"",\n            ""--proto_path=./numproto/protobuf/"",\n            ""--python_out=./numproto/protobuf/"",\n            ""--grpc_python_out=./numproto/protobuf/"",\n            ""--mypy_out=./numproto/protobuf"",\n        ] + proto_files\n\n        print(""Building proto_files {}"".format(proto_files))\n        if protoc.main(command) != 0:\n            raise Exception(""error: {} failed"".format(command))\n\n\ninstall_requires = [\n    ""numpy~=1.15"",  # BSD\n    ""protobuf~=3.9"",  # BSD\n    ""grpcio~=1.23"",  # Apache License 2.0\n]\n\ndev_require = [\n    ""grpcio-tools~=1.23"",  # Apache License 2.0\n    ""isort==4.3.20"",  # MIT\n    ""black==19.3b0"",  # MIT\n    ""mypy==0.720"",  # MIT License\n    ""mypy-protobuf==1.15"",  # Apache License 2.0\n    ""pylint==2.3.1"",  # GPL\n    ""twine==2.0.0"",  # Apache License 2.0\n    ""wheel==0.33.6"",  # MIT\n]\n\ntests_require = [""pytest==5.1.2""]  # MIT\n\n\nsetup(\n    name=""numproto"",\n    version=version[""__version__""],\n    description=""NumProto provides NumPy ndarray to protobuf conversion."",\n    long_description=readme,\n    long_description_content_type=""text/markdown"",\n    url=""https://github.com/xainag/numproto"",\n    author=""NumProto Contributors"",\n    author_email=""services@xain.io"",\n    license=""Apache License Version 2.0"",\n    zip_safe=False,\n    python_requires="">=3.6"",\n    classifiers=[\n        ""Development Status :: 3 - Alpha"",\n        ""Intended Audience :: Developers"",\n        ""Topic :: Software Development"",\n        ""Topic :: Scientific/Engineering"",\n        ""License :: OSI Approved :: Apache Software License"",\n        ""Programming Language :: Python :: 3 :: Only"",\n        ""Programming Language :: Python :: 3.6"",\n        ""Programming Language :: Python :: 3.7"",\n        ""Programming Language :: Python :: 3.8"",\n        ""Operating System :: MacOS :: MacOS X"",\n        ""Operating System :: POSIX :: Linux"",\n    ],\n    packages=find_packages(exclude=[""tests""]),\n    install_requires=install_requires,\n    tests_require=tests_require,\n    extras_require={""test"": tests_require, ""dev"": dev_require + tests_require},\n    cmdclass={""develop"": CustomDevelopCommand},\n    package_data={""numproto"": [""protobuf/*""]},\n)\n'"
numproto/__init__.py,0,"b'""""""Re-export of numproto methods""""""\nfrom numproto.numproto import ndarray_to_proto, proto_to_ndarray\n'"
numproto/__version__.py,0,"b'""""""central place to handle versioning""""""\n__version__ = ""0.3.0""\n'"
numproto/numproto.py,5,"b'""""""NumPy ndarray to protobuf serialization and deserialization""""""\nfrom io import BytesIO\n\nimport numpy as np\n\nfrom numproto.protobuf.ndarray_pb2 import NDArray\n\n\ndef ndarray_to_proto(nda: np.ndarray) -> NDArray:\n    """"""Serializes a numpy array into an NDArray protobuf message.\n\n    Args:\n        nda (np.ndarray): numpy array to serialize.\n\n    Returns:\n        Returns an NDArray protobuf message.\n    """"""\n    nda_bytes = BytesIO()\n    np.save(nda_bytes, nda, allow_pickle=False)\n\n    return NDArray(ndarray=nda_bytes.getvalue())\n\n\ndef proto_to_ndarray(nda_proto: NDArray) -> np.ndarray:\n    """"""Deserializes an NDArray protobuf message into a numpy array.\n\n    Args:\n        nda_proto (NDArray): NDArray protobuf message to deserialize.\n\n    Returns:\n        Returns a numpy.ndarray.\n    """"""\n    nda_bytes = BytesIO(nda_proto.ndarray)\n\n    return np.load(nda_bytes, allow_pickle=False)\n'"
tests/__init__.py,0,b''
tests/test_numproto.py,7,"b'""""""NumProto tests""""""\nimport numpy as np\nimport pytest\n\nfrom numproto import ndarray_to_proto, proto_to_ndarray\n\n\n@pytest.mark.parametrize(\n    ""nda"",\n    [\n        np.arange(10),\n        np.arange(15).reshape(3, 5),\n        np.array([1.2, 3.5, 5.1]),\n        np.array([[1, 2], [3, 4]], dtype=complex),\n        np.zeros((3, 4)),\n        np.ones((2, 3, 4), dtype=np.int16),\n    ],\n)\ndef test_numproto(nda):\n    """"""Tests serialization and deserialization of numpy arrays.""""""\n    result = proto_to_ndarray(ndarray_to_proto(nda))\n    assert np.array_equal(nda, result)\n'"
numproto/protobuf/__init__.py,0,b''
numproto/protobuf/ndarray_pb2.py,0,"b'# -*- coding: utf-8 -*-\n# Generated by the protocol buffer compiler.  DO NOT EDIT!\n# source: ndarray.proto\n\nimport sys\n_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode(\'latin1\'))\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import message as _message\nfrom google.protobuf import reflection as _reflection\nfrom google.protobuf import symbol_database as _symbol_database\n# @@protoc_insertion_point(imports)\n\n_sym_db = _symbol_database.Default()\n\n\n\n\nDESCRIPTOR = _descriptor.FileDescriptor(\n  name=\'ndarray.proto\',\n  package=\'numproto.protobuf\',\n  syntax=\'proto3\',\n  serialized_options=None,\n  serialized_pb=_b(\'\\n\\rndarray.proto\\x12\\x11numproto.protobuf\\""\\x1a\\n\\x07NDArray\\x12\\x0f\\n\\x07ndarray\\x18\\x01 \\x01(\\x0c\\x62\\x06proto3\')\n)\n\n\n\n\n_NDARRAY = _descriptor.Descriptor(\n  name=\'NDArray\',\n  full_name=\'numproto.protobuf.NDArray\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'ndarray\', full_name=\'numproto.protobuf.NDArray.ndarray\', index=0,\n      number=1, type=12, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b(""""),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  serialized_options=None,\n  is_extendable=False,\n  syntax=\'proto3\',\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=36,\n  serialized_end=62,\n)\n\nDESCRIPTOR.message_types_by_name[\'NDArray\'] = _NDARRAY\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\n\nNDArray = _reflection.GeneratedProtocolMessageType(\'NDArray\', (_message.Message,), {\n  \'DESCRIPTOR\' : _NDARRAY,\n  \'__module__\' : \'ndarray_pb2\'\n  # @@protoc_insertion_point(class_scope:numproto.protobuf.NDArray)\n  })\n_sym_db.RegisterMessage(NDArray)\n\n\n# @@protoc_insertion_point(module_scope)\n'"
numproto/protobuf/ndarray_pb2_grpc.py,0,b'# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!\nimport grpc\n\n'
