file_path,api_count,code
process_image.py,23,"b""import argparse\nimport os\n\nimport numpy as np\nfrom PIL import Image\nfrom scipy.misc import imresize\nfrom scipy.ndimage.interpolation import rotate\n\n\ndef read_image(imagefile, dtype=np.float32):\n    image = np.array(Image.open(imagefile), dtype=dtype)\n    return image\n\n\ndef save_image(image, imagefile, data_format='channel_last'):\n    image = np.asarray(image, dtype=np.uint8)\n    image = Image.fromarray(image)\n    image.save(imagefile)\n\n\ndef concat_images(images, rows, cols):\n    _, h, w, _ = images.shape\n    images = images.reshape((rows, cols, h, w, 3))\n    images = images.transpose(0, 2, 1, 3, 4)\n    images = images.reshape((rows * h, cols * w, 3))\n    return images\n\n\ndef check_size(size):\n    if type(size) == int:\n        size = (size, size)\n    if type(size) != tuple:\n        raise TypeError('size is int or tuple')\n    return size\n\n\ndef subtract(image):\n    image = image / 255\n    return image\n\n\ndef resize(image, size):\n    size = check_size(size)\n    image = imresize(image, size)\n    return image\n\n\ndef center_crop(image, crop_size):\n    crop_size = check_size(crop_size)\n    h, w, _ = image.shape\n    top = (h - crop_size[0]) // 2\n    left = (w - crop_size[1]) // 2\n    bottom = top + crop_size[0]\n    right = left + crop_size[1]\n    image = image[top:bottom, left:right, :]\n    return image\n\n\ndef random_crop(image, crop_size):\n    crop_size = check_size(crop_size)\n    h, w, _ = image.shape\n    top = np.random.randint(0, h - crop_size[0])\n    left = np.random.randint(0, w - crop_size[1])\n    bottom = top + crop_size[0]\n    right = left + crop_size[1]\n    image = image[top:bottom, left:right, :]\n    return image\n\n\ndef horizontal_flip(image, rate=0.5):\n    if np.random.rand() < rate:\n        image = image[:, ::-1, :]\n    return image\n\n\ndef vertical_flip(image, rate=0.5):\n    if np.random.rand() < rate:\n        image = image[::-1, :, :]\n    return image\n\n\ndef scale_augmentation(image, scale_range, crop_size):\n    scale_size = np.random.randint(*scale_range)\n    image = imresize(image, (scale_size, scale_size))\n    image = random_crop(image, crop_size)\n    return image\n\n\ndef random_rotation(image, angle_range=(0, 180)):\n    h, w, _ = image.shape\n    angle = np.random.randint(*angle_range)\n    image = rotate(image, angle)\n    image = resize(image, (h, w))\n    return image\n\n\ndef cutout(image_origin, mask_size, mask_value='mean'):\n    image = np.copy(image_origin)\n    if mask_value == 'mean':\n        mask_value = image.mean()\n    elif mask_value == 'random':\n        mask_value = np.random.randint(0, 256)\n\n    h, w, _ = image.shape\n    top = np.random.randint(0 - mask_size // 2, h - mask_size)\n    left = np.random.randint(0 - mask_size // 2, w - mask_size)\n    bottom = top + mask_size\n    right = left + mask_size\n    if top < 0:\n        top = 0\n    if left < 0:\n        left = 0\n    image[top:bottom, left:right, :].fill(mask_value)\n    return image\n\n\ndef random_erasing(image_origin, p=0.5, s=(0.02, 0.4), r=(0.3, 3), mask_value='random'):\n    image = np.copy(image_origin)\n    if np.random.rand() > p:\n        return image\n    if mask_value == 'mean':\n        mask_value = image.mean()\n    elif mask_value == 'random':\n        mask_value = np.random.randint(0, 256)\n\n    h, w, _ = image.shape\n    mask_area = np.random.randint(h * w * s[0], h * w * s[1])\n    mask_aspect_ratio = np.random.rand() * r[1] + r[0]\n    mask_height = int(np.sqrt(mask_area / mask_aspect_ratio))\n    if mask_height > h - 1:\n        mask_height = h - 1\n    mask_width = int(mask_aspect_ratio * mask_height)\n    if mask_width > w - 1:\n        mask_width = w - 1\n\n    top = np.random.randint(0, h - mask_height)\n    left = np.random.randint(0, w - mask_width)\n    bottom = top + mask_height\n    right = left + mask_width\n    image[top:bottom, left:right, :].fill(mask_value)\n    return image\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Image Data Augmentation')\n    parser.add_argument('infile')\n    parser.add_argument('--outdir', '-o', default='./')\n    parser.add_argument('--n_loop', '-n', type=int, default=1)\n    parser.add_argument('--concat', '-c', action='store_true')\n    args = parser.parse_args()\n\n    processing_list = ['random_crop', 'horizontal_flip', 'vertical_flip',\n                       'scale_augmentation', 'random_rotation', 'cutout',\n                       'random_erasing']\n\n    inimg = read_image(args.infile)\n    inimg224 = resize(inimg, 224)\n    if args.concat:\n        if not os.path.exists(args.outdir):\n            os.makedirs(args.outdir)\n\n        def save_concat_image(outimg_name, func, *func_args):\n            images = []\n            for i in range(args.n_loop):\n                images.append(func(*func_args))\n            x = int(np.sqrt(args.n_loop))\n            outimg = concat_images(np.array(images), x, x)\n            save_image(outimg, os.path.join(args.outdir, outimg_name))\n\n        save_concat_image('random_crop.jpg', random_crop, resize(inimg, 400), 224)\n        save_concat_image('horizontal_flip.jpg', horizontal_flip, inimg224)\n        save_concat_image('vertical_flip.jpg', vertical_flip, inimg224)\n        save_concat_image('scale_augmentation.jpg', scale_augmentation, inimg, (256, 480), 224)\n        save_concat_image('random_rotation.jpg', random_rotation, inimg224)\n        save_concat_image('cutout.jpg', cutout, inimg224, inimg224.shape[0] // 2)\n        save_concat_image('random_erasing.jpg', random_erasing, inimg224)\n\n    else:\n        for processing_name in processing_list:\n            outdir = os.path.join(args.outdir, processing_name)\n            if not os.path.exists(outdir):\n                os.makedirs(outdir)\n        for i in range(args.n_loop):\n            save_image(\n                random_crop(resize(inimg, 256), 224),\n                os.path.join(args.outdir, 'random_crop', '{}.jpg'.format(i)))\n            save_image(\n                horizontal_flip(inimg224),\n                os.path.join(args.outdir, 'horizontal_flip', '{}.jpg'.format(i)))\n            save_image(\n                vertical_flip(inimg224),\n                os.path.join(args.outdir, 'vertical_flip', '{}.jpg'.format(i)))\n            save_image(\n                scale_augmentation(inimg, (256, 480), 224),\n                os.path.join(args.outdir, 'scale_augmentation', '{}.jpg'.format(i)))\n            save_image(\n                random_rotation(inimg224),\n                os.path.join(args.outdir, 'random_rotation', '{}.jpg'.format(i)))\n            save_image(\n                cutout(inimg224, inimg224.shape[0] // 2),\n                os.path.join(args.outdir, 'cutout', '{}.jpg'.format(i)))\n            save_image(\n                random_erasing(inimg224),\n                os.path.join(args.outdir, 'random_erasing', '{}.jpg'.format(i)))\n"""
