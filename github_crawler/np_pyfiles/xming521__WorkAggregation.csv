file_path,api_count,code
__init__.py,0,b''
server.py,0,"b'import logging\nfrom datetime import timedelta\nfrom flask import Flask, render_template, request\nfrom analysis import analysis_main, create_chart, interaction\nfrom spider import spider_main, tool\n\n# css\xe4\xb8\x8d\xe6\x9b\xb4\xe6\x96\xb0 \xe5\x8f\xb3\xe9\x94\xaeChrome\xe5\x88\xb7\xe6\x96\xb0\xe6\x8c\x89\xe9\x92\xae\xef\xbc\x8c\xe2\x80\x9c\xe7\xa1\xac\xe6\x80\xa7\xe9\x87\x8d\xe6\x96\xb0\xe5\x8a\xa0\xe8\xbd\xbd\xe2\x80\x9d\xe6\x88\x96\xe8\x80\x85\xe6\x9b\xb4\xe6\x96\xb0\xe4\xb8\x80\xe6\xad\xa5\xe2\x80\x9c\xe6\xb8\x85\xe7\xa9\xba\xe7\xbc\x93\xe5\xad\x98\xe5\xb9\xb6\xe7\xa1\xac\xe6\x80\xa7\xe9\x87\x8d\xe6\x96\xb0\xe5\x8a\xa0\xe8\xbd\xbd\xe2\x80\x9d\nREMOTE_HOST = ""../static/js""\n\napp = Flask(__name__)\n# \xe8\xa7\xa3\xe5\x86\xb3\xe7\xbc\x93\xe5\xad\x98\xe5\x88\xb7\xe6\x96\xb0\xe9\x97\xae\xe9\xa2\x98\napp.config[\'SEND_FILE_MAX_AGE_DEFAULT\'] = timedelta(seconds=2)\n# \xe5\x8e\x9f\xe6\x97\xa5\xe5\xbf\x97\nlogging.getLogger(\'werkzeug\').setLevel(logging.ERROR)\n# \xe6\x96\x87\xe4\xbb\xb6\xe8\xbe\x93\xe5\x87\xba\xe6\x97\xa5\xe5\xbf\x97 \xe8\x87\xaa\xe5\x86\x99\xe6\x97\xa5\xe5\xbf\x97\nhandler = logging.FileHandler(filename=\'log.txt\', mode=\'a\')\nhandler.setLevel(logging.ERROR)\napp.logger.addHandler(handler)\n\n\n@app.errorhandler(500)\ndef internal_error(exception):\n    app.logger.error(exception)\n    return render_template(\'500.html\'), 500\n\n\n@app.route(""/"")\ndef index():\n    return render_template(\'index.html\')\n\n\n@app.route(""/\xe7\x88\xac\xe8\x99\xab"")\ndef ready_spider():\n    return render_template(\'spider.html\')\n\n\n@app.route(\'/\xe7\x88\xac\xe8\x99\xab\xe5\xae\x8c\xe6\x88\x90\', methods=[\'POST\'])\ndef get_spider():\n    dict_parameter = dict(request.form)\n    spider_main.main(dict_parameter)\n    return ready_spider()\n\n\n@app.route(""/\xe7\x88\xac\xe8\x99\xab\xe7\xbb\x93\xe6\x9e\x9c"")\ndef result_spider():\n    return render_template(\'data.html\')\n\n\n@app.route(""/\xe5\x88\x86\xe6\x9e\x90"")\ndef analyse():\n    analysis_main.Analyze.main()\n    return index()\n\n\nchart = create_chart.main()\njs=[\'echarts.min\', \'echarts-gl.min\',\'macarons\',\'echarts-wordcloud.min\',\'echarts-liquidfill.min\']\n\n@app.route(""/\xe5\xb1\x95\xe7\xa4\xba"")\ndef showresult():\n    return render_template(\n        ""show.html"",\n        script_list=js,\n        host=REMOTE_HOST\n    )\n\n\n@app.route(\'/chart/<id>\')\ndef showresult1(id):\n    t = chart[eval(id)]\n    return t.render_embed()\n\n\n@app.route(""/\xe4\xba\x92\xe5\x8a\xa8"")\ndef eachother():\n    if request.args.get(\'name\'):\n        result = interaction.find(request.args.get(\'name\'))\n        print(request.args.get(\'name\'))\n        return render_template(\'interaction.html\', x=2, w=result[0], r=result[1])\n    return render_template(\'interaction.html\', x=1)\n\n\n@app.route(""/us"")\ndef us():\n    return render_template(\'us.html\')\n\n\nif __name__ == \'__main__\':\n    app.run(debug=True,host=\'127.0.0.1\',port=80)\n'"
analysis/__init__.py,0,"b""__all__ = ['input_data', 'create_chart', 'process_data','test_analyze_data']\n"""
analysis/analysis_main.py,0,"b'import configparser\nimport os\nimport pymysql\nimport sys\n\n\nclass Analyze():\n    process_fn_list=[]\n    analyze_fn_list=[]\n    chart_fn_list=[]\n\n    conf = configparser.ConfigParser()\n    \n    \xe4\xbb\xa5\xe4\xb8\x8b\xe9\x85\x8d\xe7\xbd\xae\xe8\xaf\xb7\xe4\xbf\xae\xe6\x94\xb9\n    user = """"\n    password = """"\n    \n    \n    db = pymysql.connect(host=""localhost"", user=user, password=password, charset=""utf8"")\n    cursor = db.cursor()\n    # cursor.execute(""CREATE DATABASE `ujn_a` CHARACTER SET \'utf8\';"")\n    cursor.execute(\'USE `ujn_a`;\')\n\n    path = os.getcwd().replace(\'\\\\\', \'/\')\n\n    @classmethod\n    def main(cls):\n        script_path = os.path.realpath(__file__)\n        script_dir = os.path.dirname(script_path)\n        sys.path.append(script_dir)\n        input_data.main()\n\n        process_data.main()\n\n        analyze_data.main()\n\n        test_analyze_data.main()\n\n\nif __name__ == \'__main__\':\n    pass\n'"
analysis/analyze_data.py,19,"b'import analysis_main as A\nimport numpy as np\nimport pandas as pd\nimport pyecharts\n\n\n# \xe5\x87\xbd\xe6\x95\xb0\xe6\xb3\xa8\xe5\x86\x8c\xe5\x99\xa8\ndef ways(func):\n    A.Analyze.analyze_fn_list.append(func)\n\n    def wrapper(*args, **kw):\n        return func(*args, **kw)\n\n    return wrapper\n\n\ndef main():\n    global cursor, db, conf\n    cursor = A.Analyze.cursor\n    db = A.Analyze.db\n\n    print(A.Analyze.analyze_fn_list)\n    conf = A.Analyze.conf\n    conf.add_section(\'chart\')\n\n    for fn in A.Analyze.analyze_fn_list:\n        fn()\n        print(fn.__name__ + \'  ok\')\n\n    with open(\'conf.ini\', \'a\') as configfile:\n        conf.write(configfile)\n\n\n@ways\ndef f1():\n    cursor.execute(""select ave_pay,number from \xe4\xbc\xa0\xe7\xbb\x9f\xe8\x81\x8c\xe4\xb8\x9a where ID <\'10000\'"")\n    re1 = cursor.fetchall()\n    m = [x[0] for x in re1 if x[0] is not None and x[1] is not None]\n    n = [int(x[1]) for x in re1 if x[0] is not None and x[1] is not None]\n    a = []\n    for i in range(0, len(m)):\n        j = 0\n        while j < n[i]:\n            a.append(m[i])\n            j += 1\n    a = np.array(a)\n    a1 = [a[i] for i in range(0, len(a)) if a[i] != a.max() and a[i] != a.min()]\n\n    cursor.execute(""select ave_pay,number from \xe6\x96\xb0\xe5\x85\xb4\xe8\x81\x8c\xe4\xb8\x9a where id <\'10000\'"")\n    re2 = cursor.fetchall()\n    # # #\n    m = [x[0] for x in re2 if x[0] is not None and x[1] is not None]\n    n = [int(x[1]) for x in re2 if x[0] is not None and x[1] is not None]\n    a = []\n    for i in range(0, len(m)):\n        j = 0\n        while j < n[i]:\n            a.append(m[i])\n            j += 1\n    a = np.array(a)\n    b1 = [a[i] for i in range(0, len(a)) if a[i] != a.max() and a[i] != a.min()]\n    q = [a1, b1]\n    re1 = pyecharts.Boxplot.prepare_data(q)\n    conf.set(\'chart\', \'chart.1.1\', str(re1))\n\n\n@ways\ndef f2():\n    cursor.execute(""select industry from \xe5\xa4\xa7\xe6\x95\xb0\xe6\x8d\xae\xe8\x81\x8c\xe4\xbd\x8d"")\n    re = cursor.fetchall()\n    cursor.execute(""select number from \xe5\xa4\xa7\xe6\x95\xb0\xe6\x8d\xae\xe8\x81\x8c\xe4\xbd\x8d"")\n    num = cursor.fetchall()\n    a = {}\n    for i in range(0, len(re)):\n        x = re[i][0].split(\',\')\n        for k in range(0, len(x)):\n            x[k] = x[k].strip()\n            if x[k] in a:\n                a[x[k]] += int(num[i][0])\n            else:\n                a[x[k]] = int(num[i][0])\n    b = []\n    for key, value in a.items():\n        b.append([value, key])\n    b.sort(reverse=True)\n    hy = [x[1] for x in b[:10]]\n    n = [x[0] for x in b[:10]]\n    conf.set(\'chart\', \'chart.2.1\', str(hy))\n    conf.set(\'chart\', \'chart.2.2\', str(n))\n\n\n@ways\ndef f3():\n    l1_1 = [\'XXXX\xe8\xae\xb2\xe5\xb8\x88\', \'\xe9\xa1\xb9\xe7\x9b\xae\xe5\xbc\x80\xe5\x8f\x91\xe7\xbb\x8f\xe7\x90\x86\', \'`\'\'\xe6\x8a\x80\xe6\x9c\xaf/\xe7\xa0\x94\xe5\x8f\x91\xe6\x80\xbb\xe7\x9b\x91\'\'`\', \'\xe5\xa4\xa7\xe6\x95\xb0\xe6\x8d\xae\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'`\'\'\xe6\x8a\x80\xe6\x9c\xaf/\xe7\xa0\x94\xe7\xa9\xb6/\xe9\xa1\xb9\xe7\x9b\xae\xe8\xb4\x9f\xe8\xb4\xa3\xe4\xba\xba\'\'`\', \'\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe8\xbd\xaf\xe4\xbb\xb6\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\',\n            \'\xe5\xbb\xba\xe6\xa8\xa1\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe7\xa1\xac\xe4\xbb\xb6\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe7\xbd\x91\xe7\xbb\x9c\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe4\xba\xba\xe5\xb7\xa5\xe6\x99\xba\xe8\x83\xbd\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe5\x90\x8e\xe7\xab\xaf\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\']\n    l2_1 = [\'`\'\'\xe6\x95\xb0\xe6\x8d\xae\xe6\x8c\x96\xe6\x8e\x98/\xe5\x88\x86\xe6\x9e\x90/\xe5\xa4\x84\xe7\x90\x86\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\'\'`\', \'\xe6\x95\xb0\xe6\x8d\xae\xe7\xae\xa1\xe7\x90\x86\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Web\xe5\x89\x8d\xe7\xab\xaf\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'`\'\'\xe8\xae\xa1\xe7\xae\x97\xe6\x9c\xba\xe7\xbb\xb4\xe4\xbf\xae/\xe7\xbb\xb4\xe6\x8a\xa4\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\'\'`\']\n    l3_1 = [\'Java\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'`\'\'C++\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\'\'`\', \'PHP\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'`\'\'C#\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\'\'`\', \'`\'\'.NET\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\'\'`\', \'Hadoop\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Python\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Perl\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\',\n            \'Ruby\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Nodejs\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Go\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Javascript\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Delphi\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'jsp\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'sql\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Linux\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\',\n            \'Android\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'IOS\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'`\'\'GIS\xe5\xbc\x80\xe5\x8f\x91/\xe7\xa0\x94\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\'\'`\', \'BI\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\']\n    l = l1_1 + l2_1 + l3_1\n    x = []\n    city = [\'\xe4\xb8\x8a\xe6\xb5\xb7\', \'\xe6\xb7\xb1\xe5\x9c\xb3\', \'\xe5\xb9\xbf\xe5\xb7\x9e\', \'\xe5\x8c\x97\xe4\xba\xac\', \'\xe6\xad\xa6\xe6\xb1\x89\', \'\xe6\x88\x90\xe9\x83\xbd\', \'\xe6\x9d\xad\xe5\xb7\x9e\', \'\xe5\x8d\x97\xe4\xba\xac\', \'\xe8\xa5\xbf\xe5\xae\x89\', \'\xe8\x8b\x8f\xe5\xb7\x9e\']\n    v = []\n    for i in l:\n        sql = ""select number from "" + str(i) + "" where id <\'10000\'""\n        cursor.execute(sql)\n        re = cursor.fetchall()\n        re = np.array(re)\n        re = re.astype(int)\n        if len(re) == 0:\n            continue\n        else:\n            s = re.sum()\n        v.append([s, i])\n    v.sort(reverse=True)\n    l = []\n    for i in range(10):\n        l.append(v[i][1])\n    for i in l:\n        sql = ""select place,number from "" + str(i) + "" where id <\'10000\'""\n        cursor.execute(sql)\n        re = cursor.fetchall()\n        re = list(re)\n        if len(re) == 0:\n            continue\n        a = {}\n        for j in range(0, len(re)):\n            if re[j][0] in city:\n                if re[j][0] in a:\n                    a[re[j][0]] += int(re[j][1])\n                else:\n                    a[re[j][0]] = int(re[j][1])\n            else:\n                continue\n        for key, value in a.items():\n            x.append([key, i, value])\n    ct = set([w[0] for w in x])\n    conf.set(\'chart\', \'chart.3.1\', str(ct))\n    conf.set(\'chart\', \'chart.3.2\', str(l))\n    conf.set(\'chart\', \'chart.3.3\', str(x))\n\n\n@ways\ndef f4():\n    cursor.execute(""select place,ave_pay,number from qcwy where id < \'10000\'"")\n    re = cursor.fetchall()\n    re = list(re)\n    df = pd.DataFrame(re)\n    df = df.dropna()\n    df.columns = [""place"", ""ave_pay"", \'number\']\n    df[\'number\'] = df[\'number\'].astype(int)\n    a = df.groupby(\'place\').mean().sort_values(by=\'ave_pay\', ascending=False)\n    a = list(a.index)\n    a1 = df.groupby(\'place\')[\'number\']\n    a2 = df.groupby(\'place\')[\'ave_pay\']\n    b = []\n    c = [a[i] for i in range(len(a)) if a[i].find(\'\xe7\x9c\x81\') == -1 and a[i] != \'\xe5\x8f\xb0\xe6\xb9\xbe\' and a[i] != \'\xe5\x90\x89\xe6\x9e\x97\' and a[i] != \'\xe5\x9b\xbd\xe5\xa4\x96\' \\\n         and a[i] != \'\xe5\xae\xa3\xe5\x9f\x8e\' and a[i] != \'\xe6\x96\xb0\xe7\x96\x86\' and a[i] != \'\xe6\xb1\xa0\xe5\xb7\x9e\' and a[i] != \'\xe7\x87\x95\xe9\x83\x8a\xe5\xbc\x80\xe5\x8f\x91\xe5\x8c\xba\' \\\n         and a[i] != \'\xe9\xbb\x94\xe8\xa5\xbf\xe5\x8d\x97\']\n    # \xe5\x8f\x96\xe5\x87\xba\xe5\x89\x8d\xe5\x8d\x81\xe7\x9a\x84\xe5\x9f\x8e\xe5\xb8\x82\xe5\x8f\x8a\xe8\x96\xaa\xe8\xb5\x84\n    for i in c:\n        v = a1.get_group(i).values\n        u = a2.get_group(i).values\n        for j in range(0, len(v)):\n            u[j] = u[j] * v[j]\n        u = np.array(u)\n        v = np.array(v)\n        s = round(u.sum() / v.sum(), 2)\n        b.append([s, i])\n    b.sort(reverse=True)\n    x = [w[1] for w in b[:10]]\n    y = [w[0] for w in b[:10]]\n    conf.set(\'chart\', \'chart.4.1\', str(x))\n    conf.set(\'chart\', \'chart.4.2\', str(y))\n\n\n@ways\ndef f5():\n    cursor.execute(""select place,number from \xe5\xa4\xa7\xe6\x95\xb0\xe6\x8d\xae\xe8\x81\x8c\xe4\xbd\x8d"")\n    re = cursor.fetchall()\n    # \xe5\xb0\x86\xe6\x95\xb0\xe6\x8d\xae\xe5\xad\x98\xe5\x85\xa5 dataframe \xe4\xb8\xad\n    re = list(re)\n    df = pd.DataFrame(re)\n    df.columns = [\'place\', \'num\']\n    df[\'num\'] = df[\'num\'].astype(\'int\')\n    # \xe7\x94\xa8groupby\xe5\x87\xbd\xe6\x95\xb0\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\x86\xe7\xbb\x84\xef\xbc\x8c\xe6\xb1\x82\xe5\x92\x8c\xef\xbc\x8c\xe6\x8e\x92\xe5\xba\x8f\n    a = df.groupby(\'place\').sum().sort_values(by=\'num\', ascending=False)\n    # \xe5\x8f\x96\xe5\x87\xba\xe5\x89\x8d\xe5\x8d\x81\xe7\x9a\x84\xe5\x9f\x8e\xe5\xb8\x82\xe5\x8f\x8a\xe9\x9c\x80\xe6\xb1\x82\xe9\x87\x8f\n    b = [x for x in a.values[:10]]\n    c = [x for x in a.index[:10]]\n    # \xe5\xb0\x86\xe6\x95\xb0\xe7\xbb\x84\xe4\xb8\x80\xe7\xbb\xb4\xe5\x8c\x96\n    b = np.array(b)\n    b = b.ravel()\n    b = list(b)\n    conf.set(\'chart\', \'chart.5.1\', str(c))\n    conf.set(\'chart\', \'chart.5.2\', str(b))\n\n\n@ways\ndef f6():\n    # \xe5\xb0\x86\xe5\xad\xa6\xe5\x8e\x86\xef\xbc\x8c\xe7\xbb\x8f\xe9\xaa\x8c\xef\xbc\x8c\xe8\x96\xaa\xe6\xb0\xb4\xe6\x8f\x90\xe5\x87\xba\xe6\x9d\xa5                                     \xe5\x88\x86\xe6\x9e\x90\xe4\xba\x8610000\xe6\x9d\xa1\xe6\x95\xb0\xe6\x8d\xae\n    cursor.execute(""select education,experience,ave_pay,number from qcwy where id <\'10000\'"")\n    re = cursor.fetchall()\n    # \xe8\xbd\xac\xe5\x8c\x96\xe4\xb8\xbadataframe\n    re = list(re)\n    df = pd.DataFrame(re)\n    df = df.dropna()\n    df.columns = [\'education\', \'experience\', \'ave_pay\', \'number\']\n    # df[\'experience\'] = df[\'experience\'].astype(int)\n    df[\'number\'] = df[\'number\'].astype(int)\n    df[\'experience\'] = df[\'experience\'].astype(int)\n    # \xe5\x88\x86\xe7\xbb\x84\n    q = df.groupby([\'education\', \'experience\'])[\'ave_pay\']\n    x = df.groupby([\'education\', \'experience\'])[\'number\']\n    # p = df.groupby(\'education\')[\'ave_pay\'].mean()\n    # \xe8\x8e\xb7\xe5\xbe\x97\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84\xe7\xbb\x8f\xe9\xaa\x8c\xe5\x80\xbc\n    w = df.groupby(\'experience\')[\'ave_pay\'].mean()\n    # \xe5\x8f\xaa\xe9\x80\x89\xe4\xba\x86\xe9\x9c\x80\xe6\xb1\x82\xe8\xbe\x83\xe5\xa4\x9a\xe7\x9a\x84\xe5\x87\xa0\xe4\xb8\xaa\xe5\xad\xa6\xe5\x8e\x86\n    p = [\'\', \'\xe4\xb8\xad\xe4\xb8\x93\', \'\xe5\xa4\xa7\xe4\xb8\x93\', \'\xe6\x9c\xac\xe7\xa7\x91\', \'\xe7\xa1\x95\xe5\xa3\xab\']\n    # \xe7\xbb\x8f\xe9\xaa\x8c\xef\xbc\x8c\xe6\x8e\x92\xe5\xba\x8f\n    w = list(w.index)\n    w.sort()\n    t = []\n    for i in p:\n        for j in w:\n            try:\n                v = q.get_group((i, j)).values\n                u = x.get_group((i, j)).values\n                for k in range(0, len(v)):\n                    v[k] = v[k] * u[k]\n                s = v.sum() / u.sum()\n                v = round(s, 2)\n                j = str(j) + \'\xe5\xb9\xb4\'\n                if i == \'\':\n                    t.append([\'\xe4\xb8\x8d\xe9\x99\x90\', j, v])\n                else:\n                    t.append([i, j, v])\n            except:\n                pass\n    for i in range(0, len(w)):\n        w[i] = str(w[i]) + \'\xe5\xb9\xb4\'\n    p[0] = \'\xe4\xb8\x8d\xe9\x99\x90\'\n    conf.set(\'chart\', \'chart.6.1\', str(p))\n    conf.set(\'chart\', \'chart.6.2\', str(w))\n    conf.set(\'chart\', \'chart.6.3\', str(t))\n\n\n@ways\ndef f7():\n    cursor.execute(""select education,ave_pay,number from qcwy where id < \'10000\'"")\n    re = cursor.fetchall()\n    df = pd.DataFrame(list(re))\n    df = df.dropna()\n    df.columns = [\'education\', \'pay\', \'num\']\n    df[\'num\'] = df[\'num\'].astype(int)\n    a = df.groupby(\'education\')[\'pay\']\n    b = df.groupby(\'education\')[\'num\']\n    c = df.groupby(\'education\')[\'num\'].sum()\n    x = []\n    y = []\n    z = []\n    for i in list(c.index):\n        v = a.get_group(i).values\n        w = np.array(b.get_group(i).values)\n        s = 0\n        for j in range(0, len(v)):\n            s += v[j] * int(w[j])\n        x.append(i)\n        y.append(round(s / w.sum(), 2))\n        z.append(w.sum())\n    x[x.index(\'\')] = \'\xe4\xb8\x8d\xe9\x99\x90\'\n    conf.set(\'chart\', \'chart.7.1\', str(x))\n    conf.set(\'chart\', \'chart.7.2\', str(y))\n    conf.set(\'chart\', \'chart.7.3\', str(z))\n\n\n@ways\ndef f8():\n    cursor.execute(""select city,ave_pay from qlrc"")\n    re = cursor.fetchall()\n    df = pd.DataFrame(list(re))\n    df.columns = [\'city\', \'pay\']\n    df = df.dropna()\n    df[\'pay\'] = df[\'pay\'].astype(float)\n    a = df.groupby(\'city\')[\'pay\'].mean().sort_values(ascending=False)\n    city = [list(a.index)[i] for i in range(10)]\n    pay = [round(list(a.values)[i], 2) for i in range(10)]\n    conf.set(\'chart\', \'chart.8.1\', str(city))\n    conf.set(\'chart\', \'chart.8.2\', str(pay))\n\n\n@ways\ndef f9():\n    cursor.execute(""select city from qlrc "")\n    re = cursor.fetchall()\n    df = pd.DataFrame(list(re))\n    df.columns = [\'city\']\n    df = df.dropna()\n    a = df.groupby(\'city\')[\'city\'].count()\n    conf.set(\'chart\', \'chart.9.1\', str(list(a.index)))\n    conf.set(\'chart\', \'chart.9.2\', str(list(a.values)))\n\n\n@ways\ndef f10():\n    cursor.execute(""select experience,education ,number from \xe4\xbc\xa0\xe7\xbb\x9f\xe8\x81\x8c\xe4\xb8\x9a where id <\'10000\'"")\n    re = cursor.fetchall()\n    df1 = pd.DataFrame(list(re))\n    df1 = df1.dropna()\n    # \xe5\xad\xa6\xe5\x8e\x86\n    df1.columns = [\'experience\', \'education\', \'number\']\n    df1[\'number\'] = df1[\'number\'].astype(int)\n    q = df1.groupby(\'education\')[\'number\'].sum()\n    a = [\'\', \'\xe4\xb8\xad\xe4\xb8\x93\', \'\xe5\xa4\xa7\xe4\xb8\x93\', \'\xe6\x9c\xac\xe7\xa7\x91\', \'\xe7\xa1\x95\xe5\xa3\xab\']\n    k = list(q.index)\n    b = [k[i] for i in range(0, len(k)) if k[i] in a]\n    try:\n        b[b.index(\'\')] = \'\xe4\xb8\x8d\xe9\x99\x90\'\n    except:\n        pass\n    c = [q.values[i] for i in range(0, len(k)) if k[i] in a]\n    cursor.execute(""select experience,education ,number from \xe6\x96\xb0\xe5\x85\xb4\xe8\x81\x8c\xe4\xb8\x9a where id <\'10000\'"")\n    re = cursor.fetchall()\n    df2 = pd.DataFrame(list(re))\n    df2 = df2.dropna()\n    df2.columns = [\'experience\', \'education\', \'number\']\n    df2[\'number\'] = df2[\'number\'].astype(int)\n    q = df2.groupby(\'education\')[\'number\'].sum()\n    k = list(q.index)\n    d = [k[i] for i in range(0, len(k)) if k[i] in a]\n    try:\n        d[d.index(\'\')] = \'\xe4\xb8\x8d\xe9\x99\x90\'\n    except:\n        pass\n    f = [q.values[i] for i in range(0, len(k)) if k[i] in a]\n    p1 = df1.groupby(\'experience\')[\'number\'].sum()\n    k = list(p1.index)\n    for i in range(0, len(k)):\n        k[i] = str(k[i]) + \'\xe5\xb9\xb4\'\n    p2 = df2.groupby(\'experience\')[\'number\'].sum()\n    j = list(p2.index)\n    for i in range(0, len(j)):\n        j[i] = str(j[i]) + \'\xe5\xb9\xb4\'\n    conf.set(\'chart\', \'chart.10.1\', str(b))\n    conf.set(\'chart\', \'chart.10.2\', str(c))\n    conf.set(\'chart\', \'chart.10.3\', str(d))\n    conf.set(\'chart\', \'chart.10.4\', str(f))\n    conf.set(\'chart\', \'chart.10.5\', str(k))\n    conf.set(\'chart\', \'chart.10.6\', str(list(p1.values)))\n    conf.set(\'chart\', \'chart.10.7\', str(j))\n    conf.set(\'chart\', \'chart.10.8\', str(list(p2.values)))\n\n\n@ways\ndef f11():\n    l1_1 = [\'XXXX\xe8\xae\xb2\xe5\xb8\x88\', \'\xe9\xa1\xb9\xe7\x9b\xae\xe5\xbc\x80\xe5\x8f\x91\xe7\xbb\x8f\xe7\x90\x86\', \'`\'\'\xe6\x8a\x80\xe6\x9c\xaf/\xe7\xa0\x94\xe5\x8f\x91\xe6\x80\xbb\xe7\x9b\x91\'\'`\', \'\xe5\xa4\xa7\xe6\x95\xb0\xe6\x8d\xae\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'`\'\'\xe6\x8a\x80\xe6\x9c\xaf/\xe7\xa0\x94\xe7\xa9\xb6/\xe9\xa1\xb9\xe7\x9b\xae\xe8\xb4\x9f\xe8\xb4\xa3\xe4\xba\xba\'\'`\', \'\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe8\xbd\xaf\xe4\xbb\xb6\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\',\n            \'\xe5\xbb\xba\xe6\xa8\xa1\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe7\xa1\xac\xe4\xbb\xb6\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe7\xbd\x91\xe7\xbb\x9c\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe4\xba\xba\xe5\xb7\xa5\xe6\x99\xba\xe8\x83\xbd\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe5\x90\x8e\xe7\xab\xaf\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\']\n    l2_1 = [\'`\'\'\xe6\x95\xb0\xe6\x8d\xae\xe6\x8c\x96\xe6\x8e\x98/\xe5\x88\x86\xe6\x9e\x90/\xe5\xa4\x84\xe7\x90\x86\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\'\'`\', \'\xe6\x95\xb0\xe6\x8d\xae\xe7\xae\xa1\xe7\x90\x86\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Web\xe5\x89\x8d\xe7\xab\xaf\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'`\'\'\xe8\xae\xa1\xe7\xae\x97\xe6\x9c\xba\xe7\xbb\xb4\xe4\xbf\xae/\xe7\xbb\xb4\xe6\x8a\xa4\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\'\'`\']\n    l3_1 = [\'Java\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'`\'\'C++\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\'\'`\', \'PHP\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'`\'\'C#\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\'\'`\', \'`\'\'.NET\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\'\'`\', \'Hadoop\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Python\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Perl\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\',\n            \'Ruby\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Nodejs\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Go\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Javascript\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Delphi\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'jsp\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'sql\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Linux\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\',\n            \'Android\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'IOS\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'`\'\'GIS\xe5\xbc\x80\xe5\x8f\x91/\xe7\xa0\x94\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\'\'`\', \'BI\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\']\n    l = l1_1 + l2_1 + l3_1\n    a = []\n    for i in l:\n        sql = ""select experience,number from "" + str(i) + "" where id <\'10000\'""\n        # print(sql)\n        cursor.execute(sql)\n        re = cursor.fetchall()\n        re = list(re)\n        if len(re) == 0:\n            continue\n        # print(re)\n        c = np.array(list(map(lambda x: int(x[0]) * int(x[1]), re)))\n        d = np.array([int(x[1]) for x in re])\n        c = c.astype(int)\n        d = d.astype(int)\n        s = round(c.sum() / d.sum(), 2)\n        a.append([s, i])\n    a.sort(reverse=True)\n    x = [a[i][1] for i in range(10)]\n    y = [a[i][0] for i in range(10)]\n    conf.set(\'chart\', \'chart.11.1\', str(x))\n    conf.set(\'chart\', \'chart.11.2\', str(y))\n\n\n@ways\ndef f12():\n    cursor.execute(""select experience,ave_pay,number from qcwy where id < \'10000\'"")\n    re = cursor.fetchall()\n    df = pd.DataFrame(list(re))\n    df = df.dropna()\n    df.columns = [\'experience\', \'pay\', \'num\']\n    df[\'num\'] = df[\'num\'].astype(int)\n    a = df.groupby(\'experience\')[\'pay\']\n    b = df.groupby(\'experience\')[\'num\']\n    c = df.groupby(\'experience\')[\'num\'].sum()\n    data = []\n    for i in list(c.index):\n        v = a.get_group(i).values\n        w = np.array(b.get_group(i).values)\n        s = 0\n        for j in range(0, len(v)):\n            s += v[j] * int(w[j])\n        data.append([i, w.sum(), round(s / w.sum(), 2)])\n    conf.set(\'chart\', \'chart.12.1\', str(data))\n\n\n@ways\ndef f13():\n    l1_1 = [\'XXXX\xe8\xae\xb2\xe5\xb8\x88\', \'\xe9\xa1\xb9\xe7\x9b\xae\xe5\xbc\x80\xe5\x8f\x91\xe7\xbb\x8f\xe7\x90\x86\', \'`\'\'\xe6\x8a\x80\xe6\x9c\xaf/\xe7\xa0\x94\xe5\x8f\x91\xe6\x80\xbb\xe7\x9b\x91\'\'`\', \'\xe5\xa4\xa7\xe6\x95\xb0\xe6\x8d\xae\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'`\'\'\xe6\x8a\x80\xe6\x9c\xaf/\xe7\xa0\x94\xe7\xa9\xb6/\xe9\xa1\xb9\xe7\x9b\xae\xe8\xb4\x9f\xe8\xb4\xa3\xe4\xba\xba\'\'`\', \'\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe8\xbd\xaf\xe4\xbb\xb6\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\',\n            \'\xe5\xbb\xba\xe6\xa8\xa1\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe7\xa1\xac\xe4\xbb\xb6\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe7\xbd\x91\xe7\xbb\x9c\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe4\xba\xba\xe5\xb7\xa5\xe6\x99\xba\xe8\x83\xbd\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe5\x90\x8e\xe7\xab\xaf\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\']\n    l2_1 = [\'`\'\'\xe6\x95\xb0\xe6\x8d\xae\xe6\x8c\x96\xe6\x8e\x98/\xe5\x88\x86\xe6\x9e\x90/\xe5\xa4\x84\xe7\x90\x86\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\'\'`\', \'\xe6\x95\xb0\xe6\x8d\xae\xe7\xae\xa1\xe7\x90\x86\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Web\xe5\x89\x8d\xe7\xab\xaf\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'`\'\'\xe8\xae\xa1\xe7\xae\x97\xe6\x9c\xba\xe7\xbb\xb4\xe4\xbf\xae/\xe7\xbb\xb4\xe6\x8a\xa4\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\'\'`\']\n    l3_1 = [\'Java\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'`\'\'C++\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\'\'`\', \'PHP\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'`\'\'C#\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\'\'`\', \'`\'\'.NET\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\'\'`\', \'Hadoop\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Python\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Perl\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\',\n            \'Ruby\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Nodejs\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Go\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Javascript\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Delphi\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'jsp\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'sql\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Linux\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\',\n            \'Android\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'IOS\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'`\'\'GIS\xe5\xbc\x80\xe5\x8f\x91/\xe7\xa0\x94\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\'\'`\', \'BI\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\']\n    l = l1_1 + l2_1 + l3_1\n    x = []\n    y = []\n    z = []\n    for i in l:\n        sql = ""select ave_pay,number from "" + str(i) + "" where id <\'10000\'""\n        # print(sql)\n        cursor.execute(sql)\n        re = cursor.fetchall()\n        re = list(re)\n        if len(re) == 0:\n            continue\n        re1 = [x for x in re if x[0] is not None]\n        c = np.array(list(map(lambda x: float(x[0]) * int(x[1]), re1)))\n        d = np.array([x[1] for x in re1])\n        c = c.astype(float)\n        d = d.astype(float)\n        s = round(c.sum() / d.sum(), 2)\n        x.append(i)\n        y.append(s)\n        z.append(d.sum())\n    conf.set(\'chart\', \'chart.13.1\', str(x))\n    conf.set(\'chart\', \'chart.13.2\', str(y))\n    conf.set(\'chart\', \'chart.13.3\', str(z))\n\n\n@ways\ndef f14():\n    l1 = [\'\xe8\xbd\xaf\xe4\xbb\xb6\xe5\xbc\x80\xe5\x8f\x91\', \'\xe4\xba\xba\xe5\xb7\xa5\xe6\x99\xba\xe8\x83\xbd\', \'`\'\'\xe6\xb7\xb1\xe5\xba\xa6\\\xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0\'\'`\', \'\xe5\x89\x8d\xe7\xab\xaf\', \'\xe5\x90\x8e\xe7\xab\xaf\', \'\xe6\x95\xb0\xe6\x8d\xae\', \'\xe7\xae\x97\xe6\xb3\x95\', \'\xe6\xb8\xb8\xe6\x88\x8f\',\n          \'\xe6\xb5\x8b\xe8\xaf\x95\', \'\xe5\xae\x89\xe5\x85\xa8\', \'\xe8\xbf\x90\xe7\xbb\xb4\', \'UI\', \'\xe5\x8c\xba\xe5\x9d\x97\xe9\x93\xbe\', \'\xe7\xbd\x91\xe7\xbb\x9c\', \'\xe5\x85\xa8\xe6\xa0\x88\', \'\xe7\xa1\xac\xe4\xbb\xb6\', \'\xe7\x89\xa9\xe8\x81\x94\xe7\xbd\x91\']\n    a = {}\n    for i in l1:\n        sql = ""select ave_pay,number from  "" + str(i) + "" where id <\'10000\'""\n        cursor.execute(sql)\n        re = cursor.fetchall()\n        re = list(re)\n        if len(re) == 0:\n            continue\n        re1 = [x for x in re if x[0] is not None]\n        c = np.array(list(map(lambda x: x[0] * int(x[1]), re1)))\n        d = np.array([int(x[1]) for x in re1])\n        s = round(c.sum() / d.sum(), 2)\n        a[i] = s\n    list_words = []\n    for key, value in a.items():\n        list_words.append([value, key])\n    list_words.sort(reverse=True)\n    q = [x[0] for x in list_words[:10]]\n    p = [x[1] for x in list_words[:10]]\n    conf.set(\'chart\', \'chart.14.1\', str(p))\n    conf.set(\'chart\', \'chart.14.2\', str(q))\n\n\n@ways\ndef f15():\n    l1_1 = [\'XXXX\xe8\xae\xb2\xe5\xb8\x88\', \'\xe9\xa1\xb9\xe7\x9b\xae\xe5\xbc\x80\xe5\x8f\x91\xe7\xbb\x8f\xe7\x90\x86\', \'`\'\'\xe6\x8a\x80\xe6\x9c\xaf/\xe7\xa0\x94\xe5\x8f\x91\xe6\x80\xbb\xe7\x9b\x91\'\'`\', \'\xe5\xa4\xa7\xe6\x95\xb0\xe6\x8d\xae\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'`\'\'\xe6\x8a\x80\xe6\x9c\xaf/\xe7\xa0\x94\xe7\xa9\xb6/\xe9\xa1\xb9\xe7\x9b\xae\xe8\xb4\x9f\xe8\xb4\xa3\xe4\xba\xba\'\'`\', \'\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe8\xbd\xaf\xe4\xbb\xb6\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\',\n            \'\xe5\xbb\xba\xe6\xa8\xa1\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe7\xa1\xac\xe4\xbb\xb6\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe7\xbd\x91\xe7\xbb\x9c\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe4\xba\xba\xe5\xb7\xa5\xe6\x99\xba\xe8\x83\xbd\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe5\x90\x8e\xe7\xab\xaf\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\']\n    l2_1 = [\'`\'\'\xe6\x95\xb0\xe6\x8d\xae\xe6\x8c\x96\xe6\x8e\x98/\xe5\x88\x86\xe6\x9e\x90/\xe5\xa4\x84\xe7\x90\x86\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\'\'`\', \'\xe6\x95\xb0\xe6\x8d\xae\xe7\xae\xa1\xe7\x90\x86\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Web\xe5\x89\x8d\xe7\xab\xaf\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'`\'\'\xe8\xae\xa1\xe7\xae\x97\xe6\x9c\xba\xe7\xbb\xb4\xe4\xbf\xae/\xe7\xbb\xb4\xe6\x8a\xa4\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\'\'`\']\n    l3_1 = [\'Java\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'`\'\'C++\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\'\'`\', \'PHP\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'`\'\'C#\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\'\'`\', \'`\'\'.NET\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\'\'`\', \'Hadoop\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Python\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Perl\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\',\n            \'Ruby\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Nodejs\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Go\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Javascript\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Delphi\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'jsp\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'sql\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Linux\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\',\n            \'Android\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'IOS\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'`\'\'GIS\xe5\xbc\x80\xe5\x8f\x91/\xe7\xa0\x94\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\'\'`\', \'BI\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\']\n    l = l1_1 + l2_1 + l3_1\n    a = []\n    for i in l:\n        sql = ""select ave_pay,number from "" + str(i) + "" where id <\'10000\'""\n        cursor.execute(sql)\n        re = cursor.fetchall()\n        re = list(re)\n        if len(re) == 0:\n            continue\n        re1 = [x for x in re if x[0] is not None]\n        c = np.array(list(map(lambda x: float(x[0]) * int(x[1]), re1)))\n        d = np.array([int(x[1]) for x in re1])\n        s = round(c.sum() / d.sum(), 2)\n        a.append([s, i])\n    a.sort(reverse=True)\n    x = [x[1] for x in a[:10]]\n    y = [x[0] for x in a[:10]]\n    conf.set(\'chart\', \'chart.15.1\', str(x))\n    conf.set(\'chart\', \'chart.15.2\', str(y))\n\n\n@ways\ndef f16():\n    cursor.execute(""select place,number from qcwy "")\n    re = cursor.fetchall()\n    re = list(re)\n    df = pd.DataFrame(re)\n    df = df.dropna()\n    df.columns = [\'place\', \'num\']\n    df[\'num\'] = df[\'num\'].astype(\'int\')\n    # \xe6\xa0\xb9\xe6\x8d\xaeplace\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\x86\xe7\xbb\x84\xef\xbc\x8c\xe6\xa0\xb9\xe6\x8d\xaenum\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8e\x92\xe5\xba\x8f\n    w = df.groupby(\'place\').sum().sort_values(by=\'num\', ascending=False)\n    z = np.array(w.values)\n    z = z.ravel()\n    w = list(w.index)\n    c = [w[i] for i in range(10)]\n    d = [z[i] for i in range(10)]\n    conf.set(\'chart\', \'chart.16.1\', str(c))\n    conf.set(\'chart\', \'chart.16.2\', str(d))\n\n\n@ways\ndef f17():\n    x = []\n    l1 = [\'Java\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'C++\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'PHP\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'C#\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'.NET\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Hadoop\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Python\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Perl\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Ruby\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\',\n          \'Nodejs\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Go\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Javascript\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Delphi\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'jsp\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'sql\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Linux\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Android\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\',\n          \'IOS\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'GIS\xe5\xbc\x80\xe5\x8f\x91/\xe7\xa0\x94\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'BI\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\']\n    for i in l1:\n        j = \'`\' + i + \'`\'  # SKILL_PAY\n        sql = ""SELECT AVE_PAY,NUMBER FROM "" + j + """"\n        cursor.execute(sql)\n        re = cursor.fetchall()\n        re = list(re)\n        if len(re) == 0:\n            continue\n        re1 = [x for x in re if x[0] is not None]\n        c = np.array(list(map(lambda x: float(x[0]) * int(x[1]), re1)))\n        d = np.array([int(x[1]) for x in re1])\n        s = round(c.sum() / d.sum(), 2)\n        x.append([s, i])\n    x.sort(reverse=True)\n    jn = [a[1] for a in x[:10]]\n    mo = [a[0] for a in x[:10]]\n    conf.set(\'chart\', \'chart.17.1\', str(jn))\n    conf.set(\'chart\', \'chart.17.2\', str(mo))\n\n\n@ways\ndef f18():\n    cursor.execute(""select title,number from \xe6\x96\xb0\xe5\x85\xb4\xe8\x81\x8c\xe4\xb8\x9a where id <\'10000\'"")\n    re = cursor.fetchall()\n    a = [\'\xe5\xad\xa6\xe4\xb9\xa0\', \'\xe4\xba\xba\xe5\xb7\xa5\xe6\x99\xba\xe8\x83\xbd\', \'\xe6\x95\xb0\xe6\x8d\xae\', \'\xe5\x8c\xba\xe5\x9d\x97\xe9\x93\xbe\', \'\xe7\xae\x97\xe6\xb3\x95\', \'\xe7\x89\xa9\xe8\x81\x94\xe7\xbd\x91\', \'\xe8\xa7\x86\xe8\xa7\x89\', \'\xe8\x87\xaa\xe7\x84\xb6\xe8\xaf\xad\xe8\xa8\x80\']\n    re = list(re)\n    df = pd.DataFrame(re)\n    df.columns = [\'job\', \'number\']\n    df[\'number\'] = df[\'number\'].astype(int)\n    b = {}\n    s = 0\n    for i in range(0, df.shape[0] - 1):\n        s += df.ix[i, \'number\']\n        for j in a:\n            if df.ix[i, \'job\'].find(j) != -1:\n                if j in b:\n                    b[j] += df.ix[i, \'number\']\n                else:\n                    b[j] = df.ix[i, \'number\']\n    job = []\n    num = []\n    for key, value in b.items():\n        key = key.replace(\'\xe6\x95\xb0\xe6\x8d\xae\', \'\xe5\xa4\xa7\xe6\x95\xb0\xe6\x8d\xae\')\n        key = key.replace(\'\xe5\xad\xa6\xe4\xb9\xa0\', \'\xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0\')\n        key = key.replace(\'\xe8\xa7\x86\xe8\xa7\x89\', \'\xe6\x9c\xba\xe5\x99\xa8\xe8\xa7\x86\xe8\xa7\x89\')\n        job.append(key)\n        num.append(round(value / s, 2))\n    conf.set(\'chart\', \'chart.18.1\', str(job))\n    conf.set(\'chart\', \'chart.18.2\', str(num))\n\n\n@ways\ndef f19():\n    l1 = [\'\xe5\x8d\x8e\xe4\xb8\xba\', \'\xe6\x90\x9c\xe7\x8b\x90\', \'\xe6\xbb\xb4\xe6\xbb\xb4\xe5\x87\xba\xe8\xa1\x8c\', \'\xe9\x87\x91\xe5\xb1\xb1\', \'\xe6\x96\xb0\xe6\xb5\xaa\', \'\xe7\xbe\x8e\xe5\x9b\xa2\', \'\xe7\x94\xb2\xe9\xaa\xa8\xe6\x96\x87\', \'\xe9\x98\xbf\xe9\x87\x8c\xe5\xb7\xb4\xe5\xb7\xb4\', \'\xe5\xbe\xae\xe8\xbd\xaf\', \'\xe7\x88\xb1\xe5\xa5\x87\xe8\x89\xba\', \'\xe4\xb8\xad\xe5\x9b\xbd\xe7\x94\xb5\xe4\xbf\xa1\', \'\xe7\x99\xbe\xe5\xba\xa6\', \'\xe5\xa5\x87\xe8\x99\x8e\', \'\xe8\x8b\xb1\xe7\x89\xb9\xe5\xb0\x94\', \'\xe5\xae\x8c\xe7\xbe\x8e\xe4\xb8\x96\xe7\x95\x8c\', \'\xe5\xad\x97\xe8\x8a\x82\xe8\xb7\xb3\xe5\x8a\xa8\',\n          \'\xe4\xb8\xad\xe5\x9b\xbd\xe7\xa7\xbb\xe5\x8a\xa8\', \'\xe4\xb8\xad\xe5\x9b\xbd\xe8\x81\x94\xe9\x80\x9a\', \'\xe5\xb7\xa8\xe4\xba\xba\xe7\xbd\x91\xe7\xbb\x9c\', \'\xe6\xb5\xaa\xe6\xbd\xae\', \'\xe8\x81\x94\xe6\x83\xb3\', \'\xe6\x90\x9c\xe7\x8b\x97\', \'\xe8\x9a\x82\xe8\x9a\x81\xe9\x87\x91\xe6\x9c\x8d\', \'\xe8\x85\xbe\xe8\xae\xaf\', \'\xe7\xbd\x91\xe6\x98\x93\', \'\xe5\xb0\x8f\xe7\xb1\xb3\', \'IBM\', \'\xe4\xba\xac\xe4\xb8\x9c\']\n    l2 = [\'\xe5\x88\x9d\xe4\xb8\xad\xe5\x8f\x8a\xe4\xbb\xa5\xe4\xb8\x8b\', \'\xe4\xb8\xad\xe4\xb8\x93\xe3\x80\x81\xe6\x8a\x80\xe6\xa0\xa1\xe3\x80\x81\xe4\xb8\xad\xe6\x8a\x80\', \'\xe9\xab\x98\xe4\xb8\xad\', \'\xe5\xa4\xa7\xe4\xb8\x93\', \'\xe6\x9c\xac\xe7\xa7\x91\', \'\xe7\xa1\x95\xe5\xa3\xab\', \'\xe5\x8d\x9a\xe5\xa3\xab\', \'\xe4\xb8\x8d\xe9\x99\x90\']\n    a = {}\n    for i in l1:\n        j = \'`\' + i + \'`\'\n        sql = ""SELECT COUNT(*) FROM "" + j + """"\n        cursor.execute(sql)\n        results = cursor.fetchone()\n        count1 = []\n        for m in l2:\n            if m == \'\xe5\x88\x9d\xe4\xb8\xad\xe5\x8f\x8a\xe4\xbb\xa5\xe4\xb8\x8b\':\n                sql = ""SELECT ID FROM "" + j + ""where (education like  \'%\xe5\x88\x9d\xe4\xb8\xad%\')""\n                cursor.execute(sql)\n                result = cursor.fetchall()\n                num = len(result)\n                num = int(num)\n                count1.append(num)\n            elif m == \'\xe4\xb8\xad\xe4\xb8\x93\xe3\x80\x81\xe6\x8a\x80\xe6\xa0\xa1\xe3\x80\x81\xe4\xb8\xad\xe6\x8a\x80\':\n                sql = ""SELECT ID FROM "" + j + ""where (education like \'%\xe4\xb8\xad\xe4\xb8\x93%\' or education like \'%\xe6\x8a\x80\xe6\xa0\xa1%\' or education like \'%\xe4\xb8\xad\xe6\x8a\x80%\')""\n                cursor.execute(sql)\n                result = cursor.fetchall()\n                num = len(result)\n                num = int(num)\n                count1.append(num)\n            else:\n                sql = ""SELECT ID FROM "" + j + ""where (education like \'%"" + m + ""%\')""\n                cursor.execute(sql)\n                result = cursor.fetchall()\n                num = len(result)\n                num = int(num)\n                count1.append(num)\n        a[i] = count1\n    data = []\n    for key, value in a.items():\n        data.append(value)\n    conf.set(\'chart\', \'chart.19.1\', str(l1))\n    conf.set(\'chart\', \'chart.19.2\', str(l2))\n    conf.set(\'chart\', \'chart.19.3\', str(data))\n\n\n@ways\ndef f20():\n    l1 = [\'\xe5\x8d\x8e\xe4\xb8\xba\', \'\xe6\x90\x9c\xe7\x8b\x90\', \'\xe6\xbb\xb4\xe6\xbb\xb4\xe5\x87\xba\xe8\xa1\x8c\', \'\xe9\x87\x91\xe5\xb1\xb1\', \'\xe6\x96\xb0\xe6\xb5\xaa\', \'\xe7\xbe\x8e\xe5\x9b\xa2\', \'\xe7\x94\xb2\xe9\xaa\xa8\xe6\x96\x87\', \'\xe9\x98\xbf\xe9\x87\x8c\xe5\xb7\xb4\xe5\xb7\xb4\', \'\xe5\xbe\xae\xe8\xbd\xaf\', \'\xe7\x88\xb1\xe5\xa5\x87\xe8\x89\xba\', \'\xe4\xb8\xad\xe5\x9b\xbd\xe7\x94\xb5\xe4\xbf\xa1\', \'\xe7\x99\xbe\xe5\xba\xa6\', \'\xe5\xa5\x87\xe8\x99\x8e\', \'\xe8\x8b\xb1\xe7\x89\xb9\xe5\xb0\x94\', \'\xe5\xae\x8c\xe7\xbe\x8e\xe4\xb8\x96\xe7\x95\x8c\', \'\xe5\xad\x97\xe8\x8a\x82\xe8\xb7\xb3\xe5\x8a\xa8\',\n          \'\xe4\xb8\xad\xe5\x9b\xbd\xe7\xa7\xbb\xe5\x8a\xa8\', \'\xe4\xb8\xad\xe5\x9b\xbd\xe8\x81\x94\xe9\x80\x9a\', \'\xe5\xb7\xa8\xe4\xba\xba\xe7\xbd\x91\xe7\xbb\x9c\', \'\xe6\xb5\xaa\xe6\xbd\xae\', \'\xe8\x81\x94\xe6\x83\xb3\', \'\xe6\x90\x9c\xe7\x8b\x97\', \'\xe8\x9a\x82\xe8\x9a\x81\xe9\x87\x91\xe6\x9c\x8d\', \'\xe8\x85\xbe\xe8\xae\xaf\', \'\xe7\xbd\x91\xe6\x98\x93\', \'\xe5\xb0\x8f\xe7\xb1\xb3\', \'IBM\', \'\xe4\xba\xac\xe4\xb8\x9c\']\n    x = []\n    y = []\n    g = []\n    for i in l1:\n        j = \'`\' + i + \'`\'  # SKILL_PAY\n        sql = ""SELECT AVE_PAY FROM "" + j + ""where( AVE_PAY not like \'\xe9\x9d\xa2\xe8\xae\xae\')""\n        cursor.execute(sql)\n        results = cursor.fetchall()\n        results = list(results)\n        results = pd.DataFrame(results)\n        results = results.dropna()\n        if len(results) == 0:\n            continue\n        results.columns = [\'PAY\']\n        results[[\'PAY\']] = results[[\'PAY\']].astype(float)\n        ave = results[\'PAY\'].mean()\n        ave = float(ave)\n        ave = round(ave, 2)\n        sql = ""SELECT experience2 FROM "" + j + """"\n        cursor.execute(sql)\n        results = cursor.fetchall()\n        results = list(results)\n        results = pd.DataFrame(results)\n        results.columns = [\'EXP\']\n        results[[\'EXP\']] = results[[\'EXP\']].astype(float)\n        ave3 = results[\'EXP\'].mean()\n        ave3 = round(ave3, 2)\n        x.append(ave)\n        y.append(ave3)\n        g.append(i)\n    conf.set(\'chart\', \'chart.20.1\', str(g))\n    conf.set(\'chart\', \'chart.20.2\', str(x))\n    conf.set(\'chart\', \'chart.20.3\', str(y))\n\n\n@ways\ndef f21():\n    l1 = [\'\xe5\x8d\x8e\xe4\xb8\xba\', \'\xe6\x90\x9c\xe7\x8b\x90\', \'\xe6\xbb\xb4\xe6\xbb\xb4\xe5\x87\xba\xe8\xa1\x8c\', \'\xe9\x87\x91\xe5\xb1\xb1\', \'\xe6\x96\xb0\xe6\xb5\xaa\', \'\xe7\xbe\x8e\xe5\x9b\xa2\', \'\xe7\x94\xb2\xe9\xaa\xa8\xe6\x96\x87\', \'\xe9\x98\xbf\xe9\x87\x8c\xe5\xb7\xb4\xe5\xb7\xb4\', \'\xe5\xbe\xae\xe8\xbd\xaf\', \'\xe7\x88\xb1\xe5\xa5\x87\xe8\x89\xba\', \'\xe4\xb8\xad\xe5\x9b\xbd\xe7\x94\xb5\xe4\xbf\xa1\', \'\xe7\x99\xbe\xe5\xba\xa6\', \'\xe5\xa5\x87\xe8\x99\x8e\', \'\xe8\x8b\xb1\xe7\x89\xb9\xe5\xb0\x94\', \'\xe5\xae\x8c\xe7\xbe\x8e\xe4\xb8\x96\xe7\x95\x8c\', \'\xe5\xad\x97\xe8\x8a\x82\xe8\xb7\xb3\xe5\x8a\xa8\',\n          \'\xe4\xb8\xad\xe5\x9b\xbd\xe7\xa7\xbb\xe5\x8a\xa8\', \'\xe4\xb8\xad\xe5\x9b\xbd\xe8\x81\x94\xe9\x80\x9a\', \'\xe5\xb7\xa8\xe4\xba\xba\xe7\xbd\x91\xe7\xbb\x9c\', \'\xe6\xb5\xaa\xe6\xbd\xae\', \'\xe8\x81\x94\xe6\x83\xb3\', \'\xe6\x90\x9c\xe7\x8b\x97\', \'\xe8\x9a\x82\xe8\x9a\x81\xe9\x87\x91\xe6\x9c\x8d\', \'\xe8\x85\xbe\xe8\xae\xaf\', \'\xe7\xbd\x91\xe6\x98\x93\', \'\xe5\xb0\x8f\xe7\xb1\xb3\', \'IBM\', \'\xe4\xba\xac\xe4\xb8\x9c\']\n    a = {}\n    for i in l1:\n        j = \'`\' + i + \'`\'\n        sql = ""SELECT welfare FROM "" + j + """"\n        cursor.execute(sql)\n        re = list(cursor.fetchall())\n        for i in re:\n            if i[0] == \'\':\n                continue\n            q = i[0].replace(\'[\', \'\')\n            q = q.replace(\']\', \'\')\n            x = q.split(\',\')\n            for k in x:\n                k = k.replace(""\'"", \'\')\n                if k in a:\n                    a[k] += 1\n                else:\n                    a[k] = 1\n    x = []\n    y = []\n    for key, values in a.items():\n        x.append(key)\n        y.append(values)\n    db.close()\n    conf.set(\'chart\', \'chart.21.1\', str(x))\n    conf.set(\'chart\', \'chart.21.2\', str(y))\n'"
analysis/create_chart.py,0,"b'import os\nimport sys\nimport pyecharts as p\nimport configparser\nimport random\n\nfrom pyecharts import Style\n\nscript_path = os.path.realpath(__file__)\nscript_dir = os.path.dirname(script_path)\nsys.path.append(script_dir)\n\nimport analysis_main as A\n\n\n# \xe5\x87\xbd\xe6\x95\xb0\xe6\xb3\xa8\xe5\x86\x8c\xe5\x99\xa8\ndef ways(func):\n    A.Analyze.chart_fn_list.append(func)\n\n    def wrapper(*args, **kw):\n        return func(*args, **kw)\n\n    return wrapper\n\n\n# \xe5\x9b\xbe\xe8\xa1\xa8\xe5\x8f\x82\xe6\x95\xb0\xe8\xbf\xad\xe4\xbb\xa3\xe5\x99\xa8\ndef parameter(fn):\n    name = fn.__name__.replace(\'t\', \'\')\n    for i in range(1, 50):\n        pa = \'chart.\' + name + \'.\' + str(i)\n        yield eval(conf_chart[pa])\n\n\ndef main():\n    global conf_chart\n    conf = configparser.ConfigParser()\n    conf.read(\'./conf/conf.ini\')\n    conf_chart = conf[\'chart\']\n    p.configure(global_theme=\'macarons\')  # \xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xbb\xe9\xa2\x98\n    charts = []\n    # print(A.Analyze.chart_fn_list)\n    for fn in A.Analyze.chart_fn_list:\n        pa = parameter(fn)\n        x = fn(pa)\n        x.width = \'100%\'\n        if fn.__name__ == \'t3\':\n            x.width = 650\n            x.height = 500\n        if fn.__name__ == \'t12\':\n            x.width = 700\n            x.height = 500\n        if fn.__name__ == \'t21\':\n            x.width = 700\n            x.height = 500\n\n        charts.append(x)\n        # grid.add(fn(pa))\n        # print(fn.__name__ + \'  ok\')\n\n    return charts\n\n\n@ways\ndef t1(pa):\n    y = next(pa)\n    print(y[0])\n    box = p.Boxplot(\'\xe6\x96\xb0\xe5\x85\xb4\xe4\xb8\x8e\xe4\xbc\xa0\xe7\xbb\x9f\xe8\x81\x8c\xe4\xb8\x9a\xe8\x96\xaa\xe6\xb0\xb4\xe5\xaf\xb9\xe6\xaf\x94\')\n    box.add(\'\xe4\xbc\xa0\xe7\xbb\x9f\xe8\x81\x8c\xe4\xb8\x9a\', [\'\xe8\x96\xaa\xe6\xb0\xb4\'], [y[0]], is_toolbox_show=False)\n    box.add(\'\xe6\x96\xb0\xe5\x85\xb4\xe8\x81\x8c\xe4\xb8\x9a\', [\'\xe8\x96\xaa\xe6\xb0\xb4\'], [y[1]], is_toolbox_show=False)\n\n    return box\n\n\n@ways\ndef t2(pa):\n    bar = p.Bar(\'\xe9\x9c\x80\xe6\xb1\x82\xe5\x89\x8d10\xe7\x9a\x84\xe8\xa1\x8c\xe4\xb8\x9a\')\n\n    bar.add(\'\xe9\x9c\x80\xe6\xb1\x82\', next(pa), next(pa), is_toolbox_show=False)\n    return bar\n\n\n@ways\ndef t3(pa):\n    hm = p.HeatMap(\'\xe5\x9c\xb0\xe5\x8c\xba\xe8\x81\x8c\xe4\xbd\x8d\xe4\xb8\x8e\xe9\x9c\x80\xe6\xb1\x82\xe5\x85\xb3\xe7\xb3\xbb\', width=1500, height=600)\n    hm.add(""\xe9\x9c\x80\xe6\xb1\x82\xe9\x87\x8f"", next(pa), next(pa), next(pa), is_visualmap=True, visual_range=[350, 25000],\n           visual_text_color=""#000"", visual_orient=\'horizontal\', yaxis_label_textsize=8,\n           yaxis_rotate=-45, is_toolbox_show=False)\n\n    return hm\n\n\n@ways\ndef t4(pa):\n    bar = p.Bar(""\xe8\x96\xaa\xe8\xb5\x84\xe5\x89\x8d10\xe5\x9f\x8e\xe5\xb8\x82"")\n    bar.add(""\xe8\x96\xaa\xe8\xb5\x84"", next(pa), next(pa), mark_line=[""average""], is_toolbox_show=False)\n    return bar\n\n\n@ways\ndef t5(pa):\n    bar = p.Bar(""\xe5\xa4\xa7\xe6\x95\xb0\xe6\x8d\xae\xe8\x81\x8c\xe4\xbd\x8d\xe9\x9c\x80\xe6\xb1\x82\xe5\x89\x8d10\xe5\x9f\x8e\xe5\xb8\x82"")\n    bar.add(""\xe9\x9c\x80\xe6\xb1\x82\xe9\x87\x8f"", next(pa), next(pa), mark_line=[""average""], is_toolbox_show=False)\n    return bar\n\n\n@ways\ndef t6(pa):\n    bar3d = p.Bar3D(""\xe5\xad\xa6\xe5\x8e\x86\xe7\xbb\x8f\xe9\xaa\x8c\xe4\xb8\x8e\xe8\x96\xaa\xe6\xb0\xb4\xe5\x85\xb3\xe7\xb3\xbb"", width=1200, height=500)\n    range_color = [\'#313695\', \'#4575b4\', \'#74add1\', \'#abd9e9\', \'#e0f3f8\', \'#ffffbf\',\n                   \'#fee090\', \'#fdae61\', \'#f46d43\', \'#d73027\', \'#a50026\']\n    bar3d.add(""\xe5\xad\xa6\xe5\x8e\x86\xe7\xbb\x8f\xe9\xaa\x8c\xe8\x96\xaa\xe6\xb0\xb4"", next(pa), next(pa), next(pa),\n              is_visualmap=True, visual_range=[4000, 30000],\n              visual_range_color=range_color, grid3d_width=150, grid3d_depth=80,\n              is_grid3d_rotate=True, grid3d_shading=\'realistic\', grid3d_rotate_speed=30, is_toolbox_show=False)\n    return bar3d\n\n\n@ways\ndef t7(pa):\n    scatter = p.Scatter(""\xe5\xad\xa6\xe5\x8e\x86\xe4\xb8\x8e\xe9\x9c\x80\xe6\xb1\x82\xe9\x87\x8f\xe3\x80\x81\xe8\x96\xaa\xe6\xb0\xb4\xe5\x85\xb3\xe7\xb3\xbb"")\n    scatter.add(""\xe8\x96\xaa\xe6\xb0\xb4"", next(pa), next(pa), extra_data=next(pa), is_visualmap=True,\n                xaxis_type=""category"", visual_dimension=2, visual_range=[500, 500000]\n                , is_toolbox_show=False, visual_top=9999)\n    return scatter\n\n\n@ways\ndef t8(pa):\n    bar = p.Bar(""\xe5\xb1\xb1\xe4\xb8\x9c\xe8\x96\xaa\xe6\xb0\xb4\xe5\x89\x8d10\xe7\x9a\x84\xe5\x9f\x8e\xe5\xb8\x82\xe6\x8e\x92\xe5\x90\x8d"")\n    bar.add(""\xe8\x96\xaa\xe6\xb0\xb4"", next(pa), next(pa), mark_line=[\'average\'], is_toolbox_show=False)\n    return bar\n\n\n@ways\ndef t9(pa):\n    # geo\xe5\x9c\xb0\xe5\x9b\xbe\xe6\x9c\x89\xe4\xb8\x8d\xe6\x98\xbe\xe7\xa4\xba\xe6\x95\xb0\xe5\x80\xbc\xe7\x9a\x84bug\xe5\x8a\xa0\xe4\xb8\x8a\xe4\xb8\x8b\xe9\x9d\xa2\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xe5\x92\x8c  add\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0 label_formatter=label_formatter\n    def label_formatter(params):\n        return params.value[2]\n\n    style = p.Style(\n        title_color=""#fff"",\n        title_pos=""center"",\n        width=1200,\n        height=600,\n        background_color=\'#404a59\'\n    )\n    chart = p.Geo(""\xe5\xb1\xb1\xe4\xb8\x9c\xe7\x9c\x81\xe8\xae\xa1\xe7\xae\x97\xe6\x9c\xba\xe8\x81\x8c\xe4\xbd\x8d\xe5\x88\x86\xe5\xb8\x83"", \'\xe6\x95\xb0\xe6\x8d\xae\xe6\x9d\xa5\xe8\x87\xaa\xe9\xbd\x90\xe9\xb2\x81\xe4\xba\xba\xe6\x89\x8d\xe7\xbd\x91\xef\xbc\x8c\xe9\x83\xa8\xe5\x88\x86\xe5\x9c\xb0\xe5\x8c\xba\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\x8d\xe5\x87\x86\xe7\xa1\xae\', **style.init_style, subtitle_text_size=18)\n    city = [i.replace(\'\xe5\xb8\x82\', \'\') for i in next(pa)]\n    # label_formatter=label_formatter\xe9\x98\xb2bug maptype\xe5\x8e\xbb\xe6\x8e\x89\xe5\xb0\xb1\xe6\x98\xaf\xe5\x85\xa8\xe5\x9b\xbd\xe5\x9c\xb0\xe5\x9b\xbe\n    chart.add("""", city, next(pa), maptype=\'\xe5\xb1\xb1\xe4\xb8\x9c\', visual_range=[0, 700], label_formatter=label_formatter,\n              visual_text_color=""#fff"", is_legend_show=True,\n              symbol_size=15, is_visualmap=True,\n              tooltip_formatter=\'{b}\',\n              label_emphasis_textsize=15,\n              label_emphasis_pos=\'right\', is_toolbox_show=False)\n    return chart\n\n\n@ways\ndef t10(pa):\n    pie = p.Pie(""\xe6\x96\xb0\xe5\x85\xb4\xe4\xb8\x8e\xe4\xbc\xa0\xe7\xbb\x9f\xe8\x81\x8c\xe4\xb8\x9a\xe5\xad\xa6\xe5\x8e\x86\xe7\xbb\x8f\xe9\xaa\x8c\xe9\x9c\x80\xe6\xb1\x82\xe5\xaf\xb9\xe6\xaf\x94"", width=700, height=400)\n    pie.add(""\xe4\xbc\xa0\xe7\xbb\x9f\xe5\xad\xa6\xe5\x8e\x86\xe9\x9c\x80\xe6\xb1\x82"", next(pa), next(pa),\n            radius=[50, 55], center=[35, 53])\n    pie.add(""\xe6\x96\xb0\xe5\x85\xb4\xe5\xad\xa6\xe5\x8e\x86\xe9\x9c\x80\xe6\xb1\x82"", next(pa), next(pa),\n            radius=[0, 45], center=[35, 53], rosetype=\'radius\',\n            is_random=True)\n    pie.add(""\xe4\xbc\xa0\xe7\xbb\x9f\xe7\xbb\x8f\xe9\xaa\x8c\xe9\x9c\x80\xe6\xb1\x82"", next(pa), next(pa),\n            radius=[50, 55], center=[70, 53])\n    pie.add(""\xe6\x96\xb0\xe5\x85\xb4\xe7\xbb\x8f\xe9\xaa\x8c\xe9\x9c\x80\xe6\xb1\x82"", next(pa), next(pa),\n            radius=[0, 45], center=[70, 53], rosetype=\'radius\',\n            legend_orient=\'vertical\',\n            legend_pos=\'left\', legend_top=\'center\', is_random=True, is_toolbox_show=False)\n    return pie\n\n\n@ways\ndef t11(pa):\n    bar = p.Bar(\'\xe7\xbb\x8f\xe9\xaa\x8c\xe8\xa6\x81\xe6\xb1\x82\xe5\x89\x8d\xe5\x8d\x81\xe7\x9a\x84\xe8\x81\x8c\xe4\xbd\x8d\')\n    bar.add(\'\xe7\xbb\x8f\xe9\xaa\x8c\', next(pa), next(pa), mark_line=[""average""], is_toolbox_show=False)\n    return bar\n\n\n@ways\ndef t12(pa):\n    range_color = [\n        \'#313695\', \'#4575b4\', \'#74add1\', \'#abd9e9\', \'#e0f3f8\', \'#ffffbf\',\n        \'#fee090\', \'#fdae61\', \'#f46d43\', \'#d73027\', \'#a50026\']\n    scatter3D = p.Scatter3D(""\xe7\xbb\x8f\xe9\xaa\x8c\xe9\x9c\x80\xe6\xb1\x82\xe8\x96\xaa\xe6\xb0\xb4"")\n    scatter3D.add(""3D"", next(pa), is_visualmap=True, visual_range_color=range_color, is_grid3d_rotate=True,\n                  visual_range=[7000, 35000]\n                  , xaxis3d_name=\'\xe7\xbb\x8f\xe9\xaa\x8c\', yaxis3d_name=\'\xe9\x9c\x80\xe6\xb1\x82\', zaxis3d_name=\'\xe8\x96\xaa\xe6\xb0\xb4\', is_toolbox_show=False, visual_top=9999)\n    return scatter3D\n\n\n@ways\ndef t13(pa):\n    scatter = p.EffectScatter(""\xe8\x81\x8c\xe4\xbd\x8d\xe4\xb8\x8e\xe9\x9c\x80\xe6\xb1\x82\xe9\x87\x8f\xe3\x80\x81\xe8\x96\xaa\xe6\xb0\xb4\xe5\x85\xb3\xe7\xb3\xbb"")\n    next(pa)\n    y = next(pa)\n    y2 = next(pa)\n    for i in range(len(y)):\n        scatter.add(""\xe8\x96\xaa\xe6\xb0\xb4"", [y[i]], [y2[i]], is_toolbox_show=False, symbol_size=15,\n                    effect_scale=3, effect_period=3, symbol=random.choice([\'roundRect\', \'pin\']),\n                    effect_brushtype=\'fill\')\n\n    return scatter\n\n\n@ways\ndef t14(pa):\n    bar = p.Bar(\'\xe8\xae\xa1\xe7\xae\x97\xe6\x9c\xba\xe4\xb8\x93\xe4\xb8\x9a\xe8\x96\xaa\xe6\xb0\xb4\xe5\x89\x8d10\xe6\x96\xb9\xe5\x90\x91\')\n    y = next(pa)\n    y_values = next(pa)\n    # bar.add(""\xe8\x96\xaa\xe6\xb0\xb4"", mark_line=[\'average\'],is_toolbox_show=False)\n    for i in range(len(y) - 4):\n        bar.add(y[i], [\'\xe8\x96\xaa\xe6\xb0\xb4\'], [y_values[i]], is_show=True, is_toolbox_show=False, is_label_show=True,\n                label_formatter=\'{a}\')\n    bar.add(y[-1], [\'\xe8\x96\xaa\xe6\xb0\xb4\'], [y_values[-1]], is_legend_show=False, is_toolbox_show=False, is_label_show=True,\n            label_formatter=\'{a}\')\n    # bar.add(\'\xe6\x96\xb9\xe5\x90\x91\', next(pa), next(pa), is_stack=False, mark_line=[""average""], is_toolbox_show=False)\n    return bar\n\n\n@ways\ndef t15(pa):\n    bar = p.Bar(\'\xe8\x96\xaa\xe6\xb0\xb4\xe5\x89\x8d\xe5\x8d\x81\xe7\x9a\x84\xe8\x81\x8c\xe4\xbd\x8d\')\n    bar.add(\'\xe8\x96\xaa\xe6\xb0\xb4\', next(pa), next(pa), mark_line=[""average""], is_toolbox_show=False)\n    return bar\n\n\n@ways\ndef t16(pa):\n    bar = p.Bar(\'\xe8\xae\xa1\xe7\xae\x97\xe6\x9c\xba\xe4\xb8\x93\xe4\xb8\x9a\xe9\x9c\x80\xe6\xb1\x82\xe5\x89\x8d\xe5\x8d\x81\xe5\x9f\x8e\xe5\xb8\x82\')\n    bar.add(\'\xe9\x9c\x80\xe6\xb1\x82\xe9\x87\x8f\', next(pa), next(pa), mark_line=[\'average\'], is_toolbox_show=False)\n    return bar\n\n\n@ways\ndef t17(pa):\n    bar = p.Bar(""\xe9\xab\x98\xe8\x96\xaa\xe6\xb0\xb4\xe6\x8a\x80\xe8\x83\xbd"")\n    y = next(pa)\n    y_values = next(pa)\n    # bar.add(""\xe8\x96\xaa\xe6\xb0\xb4"", mark_line=[\'average\'],is_toolbox_show=False)\n    for i in range(len(y) - 4):\n        if i % 3 == 1:\n            bar.add(y[i], [\'\xe8\x96\xaa\xe6\xb0\xb4\'], [y_values[i]], is_show=True, mark_line=[\'average\'], is_toolbox_show=False)\n        else:\n            bar.add(y[i], [\'\xe8\x96\xaa\xe6\xb0\xb4\'], [y_values[i]], is_show=True, is_toolbox_show=False)\n\n    return bar\n\n\n@ways\ndef t18(pa):\n    shape = (""path://M367.855,428.202c-3.674-1.385-7.452-1.966-11.146-1""\n             "".794c0.659-2.922,0.844-5.85,0.58-8.719 c-0.937-10.407-7.""\n             ""663-19.864-18.063-23.834c-10.697-4.043-22.298-1.168-29.9""\n             ""02,6.403c3.015,0.026,6.074,0.594,9.035,1.728 c13.626,5.""\n             ""151,20.465,20.379,15.32,34.004c-1.905,5.02-5.177,9.115-9""\n             "".22,12.05c-6.951,4.992-16.19,6.536-24.777,3.271 c-13.625""\n             ""-5.137-20.471-20.371-15.32-34.004c0.673-1.768,1.523-3.423""\n             "",2.526-4.992h-0.014c0,0,0,0,0,0.014 c4.386-6.853,8.145-14""\n             "".279,11.146-22.187c23.294-61.505-7.689-130.278-69.215-153""\n             "".579c-61.532-23.293-130.279,7.69-153.579,69.202 c-6.371,""\n             ""16.785-8.679,34.097-7.426,50.901c0.026,0.554,0.079,1.121,""\n             ""0.132,1.688c4.973,57.107,41.767,109.148,98.945,130.793 c58.""\n             ""162,22.008,121.303,6.529,162.839-34.465c7.103-6.893,17.826""\n             ""-9.444,27.679-5.719c11.858,4.491,18.565,16.6,16.719,28.643 ""\n             ""c4.438-3.126,8.033-7.564,10.117-13.045C389.751,449.992,""\n             ""382.411,433.709,367.855,428.202z"")\n    liquid = p.Liquid(""\xe5\x90\x84\xe6\x96\xb0\xe5\x85\xb4\xe8\x81\x8c\xe4\xb8\x9a\xe6\x89\x80\xe5\x8d\xa0\xe6\xaf\x94\xe4\xbe\x8b"")\n    liquid.add(next(pa), next(pa), is_liquid_outline_show=False, shape=shape, is_toolbox_show=False)\n    return liquid\n\n\n@ways\ndef t19(pa):\n    # def label_formatter(params):\n    #     print(233)\n    #     print(params.value[2])\n    #     return params.value[2]\n    l1 = next(pa)\n    pp = next(pa)\n    data = next(pa)\n    pie = p.Pie(\'\xe5\xa4\xa7\xe5\x85\xac\xe5\x8f\xb8\xe5\xad\xa6\xe5\x8e\x86\xe8\xa6\x81\xe6\xb1\x82\')\n    style = Style()\n    pie_style = style.add(\n        is_label_show=True,\n        label_pos=""center"",\n        is_label_emphasis=False,\n        label_formatter=\'{b}\',\n        label_text_size=16,\n        is_legend_show=False,\n        label_text_color=""#000""\n        # label_text_color=None\n    )\n    for i in range(len(data)):\n        data[i][0] = 0\n        data[i][1] = 0\n\n    for i in range(len(l1)):\n        l1[i] = [l1[i], \'\', \'\', \'\', \'\', \'\', \'\', \'\']\n    pie.add(\'\', l1[0], data[0], center=[10, 25], radius=[13, 18],\n            **pie_style)\n    pie.add(\'\', l1[1], data[1], center=[20, 25], radius=[13, 18],\n            legend_pos=\'left\', **pie_style)\n    pie.add(\'\', l1[2], data[2], center=[30, 25], radius=[13, 18],\n            **pie_style)\n    pie.add(\'\', l1[3], data[3], center=[40, 25], radius=[13, 18],\n            **pie_style)\n    pie.add(\'\', l1[4], data[4], center=[50, 25], radius=[13, 18],\n            **pie_style)\n    pie.add(\'\', l1[5], data[5], center=[60, 25], radius=[13, 18],\n            **pie_style)\n    pie.add(\'\', l1[6], data[6], center=[70, 25], radius=[13, 18],\n            **pie_style)\n    pie.add(\'\', l1[7], data[7], center=[80, 25], radius=[13, 18],\n            **pie_style)\n    pie.add(\'\', l1[8], data[8], center=[10, 53], radius=[13, 18],\n            **pie_style)\n    pie.add(\'\', l1[9], data[9], center=[20, 53], radius=[13, 18],\n            **pie_style)\n    pie.add(\'\', l1[10], data[10], center=[30, 53], radius=[13, 18],\n            **pie_style)\n    pie.add(\'\', l1[11], data[11], center=[40, 53], radius=[13, 18],\n            **pie_style)\n    pie.add(\'\', l1[12], data[12], center=[50, 53], radius=[13, 18],\n            **pie_style)\n    pie.add(\'\', l1[13], data[13], center=[60, 53], radius=[13, 18],\n            **pie_style)\n    pie.add(\'\', l1[14], data[14], center=[70, 53], radius=[13, 18],\n            **pie_style)\n    pie.add(\'\', l1[15], data[15], center=[80, 53], radius=[13, 18],\n            **pie_style)\n    pie.add(\'\', l1[16], data[16], center=[90, 25], radius=[13, 18],\n            **pie_style)\n    pie.add(\'\', l1[17], data[17], center=[90, 53], radius=[13, 18],\n            **pie_style)\n    pie.add(\'\', l1[18], data[18], center=[10, 80], radius=[13, 18],\n            **pie_style)\n    pie.add(\'\', l1[19], data[19], center=[20, 80], radius=[13, 18],\n            **pie_style)\n    pie.add(\'\', l1[20], data[20], center=[30, 80], radius=[13, 18],\n            **pie_style)\n    pie.add(\'\', l1[21], data[21], center=[40, 80], radius=[13, 18],\n            **pie_style)\n    pie.add(\'\', l1[22], data[22], center=[50, 80], radius=[13, 18],\n            **pie_style)\n    pie.add(\'\', l1[23], data[23], center=[60, 80], radius=[13, 18],\n            **pie_style)\n    pie.add(\'\', l1[24], data[24], center=[70, 80], radius=[13, 18],\n            **pie_style)\n    pie.add(\'\', l1[25], data[25], center=[80, 80], radius=[13, 18],\n            **pie_style)\n    pie.add(\'\', l1[26], data[26], center=[90, 80], radius=[13, 18],\n            **pie_style, is_toolbox_show=False)\n\n    return pie\n\n\n@ways\ndef t20(pa):\n    scatter = p.Scatter(\'\xe5\x90\x84\xe5\xa4\xa7\xe5\x85\xac\xe5\x8f\xb8\xe5\xb7\xa5\xe8\xb5\x84\xe7\xbb\x8f\xe9\xaa\x8c\')\n    scatter.add(\'\xe5\xb7\xa5\xe8\xb5\x84\', next(pa), next(pa), extra_data=next(pa), is_visualmap=True, visual_dimension=2,\n                xaxis_type=""category"", visual_range=[0, 6], is_toolbox_show=False\n                )\n    return scatter\n\n\n@ways\ndef t21(pa):\n    wordcloud = p.WordCloud(\'\xe5\xa4\xa7\xe5\x85\xac\xe5\x8f\xb8\xe7\xa6\x8f\xe5\x88\xa9\', width=1300, height=620)\n    wordcloud.add("""", next(pa), next(pa), word_size_range=[20, 100], is_toolbox_show=False)\n    return wordcloud\n'"
analysis/input_data.py,0,"b'import analysis_main\n\n# \xe9\x83\xa8\xe5\x88\x86\xe4\xbb\xa3\xe7\xa0\x81\xe6\xb3\xa8\xe9\x87\x8a\xe6\x8e\x89\xe4\xba\x86 \xe6\xad\xa3\xe5\xbc\x8f\xe6\x97\xb6\xe5\x8f\x96\xe6\xb6\x88\xe6\xb3\xa8\xe9\x87\x8a\n\ndef main():\n    for name in [\'qcwy\', \'qlrc\', \'big\']:\n        analysis_main.Analyze.cursor.execute(\'DROP TABLE IF EXISTS {}; \'.format(name))\n        if name == \'qcwy\':\n            sql_1 = \'\'\'\n            CREATE TABLE `qcwy`  (\n              `id` int(11) NOT NULL AUTO_INCREMENT,\n              `title` varchar(255),\n              `place` varchar(255),\n              `salary` varchar(255),\n              `xexperience` varchar(255),\n              `experience` varchar(255),\n              `education` varchar(255),\n              `number` varchar(255) ,\n              `companytype` varchar(255),\n              `industry` varchar(255),\n              `description` text,\n              `MAX_PAY` double(10, 0) ,\n              `MIN_PAY` double(10, 0) ,\n              `AVE_PAY` double(10, 0) ,\n              `work` varchar(255) ,\n              `flag` int(6) DEFAULT 0,\n              PRIMARY KEY (`id`)\n            );\'\'\'\n            columns = \'(title,place,salary,xexperience,education,number,companytype,industry,description)\'\n        if name == \'big\':\n            sql_1 = \'\'\'\n            CREATE TABLE `big`  (\n              `id` int(11) NOT NULL AUTO_INCREMENT,\n              `job` varchar(255) ,\n              `company` varchar(255) ,\n              `salary` varchar(255),\n              `experience` varchar(255) ,\n              `education` varchar(255) ,\n              `welfare` varchar(255) ,\n              `experience2` varchar(255),\n              `min_pay` varchar(100),\n              `max_pay` varchar(100) ,\n              `ave_pay` varchar(100),\n              PRIMARY KEY (`id`) \n            );\'\'\'\n            columns = \'(job,company,salary,experience,education,welfare)\'\n        if name == \'qlrc\':\n            sql_1 = \'\'\'\n            CREATE TABLE `qlrc`  (\n              `id` int(11) NOT NULL AUTO_INCREMENT,\n              `job` varchar(255) ,\n              `company` varchar(255) ,\n              `place` varchar(255) ,\n              `pay` varchar(255) ,\n              `lessinfo` varchar(255) ,\n              `city` varchar(255) ,\n              `min_pay` double(12, 0) ,\n              `ave_pay` double(12, 0) ,\n              `max_pay` double(12, 0),\n              PRIMARY KEY (`id`)\n            ); \'\'\'\n            columns = \'(job,company,place,pay,lessinfo)\'\n\n        analysis_main.Analyze.cursor.execute(sql_1)\n\n        print(analysis_main.Analyze.path)\n\n        sql_2 = \'\'\'LOAD DATA INFILE  ""{0}/data/{1}.csv"" into table `{2}` \n        fields terminated by "","" optionally enclosed by \'""\' escaped by \'""\' lines terminated by \'\\r\\n\' \n         {3} ;\'\'\'.format(\'C:/Users/Administrator/Desktop/process/job/\', name, name, columns)\n        analysis_main.Analyze.cursor.execute(sql_2)\n        analysis_main.Analyze.db.commit()\n\n\nif __name__ == \'__main__\':\n    main()'"
analysis/interaction.py,0,"b'import pymysql\nimport pyecharts as p\n\n\ndef find(name):\n    user = ""root""\n    password = ""zym233521""\n    db = pymysql.connect(host=""localhost"", user=user, password=password, charset=""utf8"")\n    cursor = db.cursor()\n    cursor.execute(\'USE `ujn_a`;\')\n    names = name + \'s\'\n\n    cursor.execute(\'DROP VIEW IF EXISTS {};\'.format(names))\n    sql_1 = \'CREATE VIEW {} AS SELECT qcwy.xexperience,qcwy.education FROM qcwy WHERE title like ""%{}%"" \'.format(names,\n                                                                                                                 name)\n    cursor.execute(sql_1)\n\n    cursor.execute(""select count(*) from "" + names)\n    alls = cursor.fetchone()[0]\n\n    list1 = [\'\xe6\x9c\xac\xe7\xa7\x91\', \'\xe7\xa1\x95\xe5\xa3\xab\', \'\xe5\x8d\x9a\xe5\xa3\xab\']\n    list_edu = []\n    list_edu_sql = [""select count(*) from {} where education = \'{}\';"".format(names, i) for i in list1]\n    for i in list_edu_sql:\n        cursor.execute(i)\n        list_edu.append(cursor.fetchone()[0])\n\n    list2 = [\'\xe6\x97\xa0\xe5\xb7\xa5\xe4\xbd\x9c\xe7\xbb\x8f\xe9\xaa\x8c\', \'1\xe5\xb9\xb4\xe7\xbb\x8f\xe9\xaa\x8c\', \'2\xe5\xb9\xb4\xe7\xbb\x8f\xe9\xaa\x8c\', \'3-4\xe5\xb9\xb4\xe7\xbb\x8f\xe9\xaa\x8c\', \'5-7\xe5\xb9\xb4\xe7\xbb\x8f\xe9\xaa\x8c\', \'8-9\xe5\xb9\xb4\xe7\xbb\x8f\xe9\xaa\x8c\', \'10\xe5\xb9\xb4\xe4\xbb\xa5\xe4\xb8\x8a\xe7\xbb\x8f\xe9\xaa\x8c\']\n    list_exp = []\n    list_exp_sql = [""select count(*) from {} where xexperience = \'{}\';"".format(names, i) for i in list2]\n    for i in list_exp_sql:\n        cursor.execute(i)\n        list_exp.append(cursor.fetchone()[0])\n\n    p.configure(global_theme=\'macarons\')  # \xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xbb\xe9\xa2\x98\n\n    bing = p.Pie()\n    attr = list2\n    v1 = list_exp\n    bing.add("""", attr, v1, is_label_show=True, is_toolbox_show=False, legend_top=\'bottom\')\n    bing.render(\'static/html/bing.html\')\n\n    list4 = []\n    for i in range(3):\n        qiu = p.Liquid(title=list1[i], title_pos=\'center\', title_text_size=30, title_top=\'80%\', width=600, height=400)\n        list3 = [round(list_edu[i] / alls, 2)]\n        list4.extend(list3)\n        qiu.add(list1[i], list3, is_liquid_animation=True, is_toolbox_show=False,\n                liquid_color=[\'#21bbff\', \'#00b6ff\', \'#23c4ff\', \'#47c7ff\'], is_liquid_outline_show=False)\n        qiu.render(\'static/html/qiu{}.html\'.format(i + 1))\n\n    # \xe8\xbf\x94\xe5\x9b\x9e\n\n    n = 1\n    e_all = 0\n    for i in list_exp[1:]:\n        e_all = e_all + i / alls / 21 * n\n        n = n + 1\n\n    n = 1\n    d_all = 0\n    for i in list_edu[1:]:\n        d_all = d_all + i / alls / 2 * n\n        n = n + 1\n\n    if e_all > d_all:\n        if e_all - d_all <= 0.06:\n            result = \'\xe8\x80\x83\xe7\xa0\x94\xe5\x92\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe5\xb0\xb1\xe4\xb8\x9a\xe9\x83\xbd\xe5\xbe\x88\xe4\xb8\x8d\xe9\x94\x99\xe5\x91\xa2\'\n        else:\n            result = \'\xe5\xbb\xba\xe8\xae\xae\xe6\x82\xa8\xe6\xaf\x95\xe4\xb8\x9a\xe5\x90\x8e\xe7\x9b\xb4\xe6\x8e\xa5\xe5\xb0\xb1\xe4\xb8\x9a\xe5\x93\xa6\'\n    else:\n        result = \'\xe5\xbb\xba\xe8\xae\xae\xe6\x82\xa8\xe5\x87\x86\xe5\xa4\x87\xe8\x80\x83\xe7\xa0\x94\xe5\x93\xa6\'\n\n    if name == \'\xe5\xad\xa6\xe4\xb9\xa0\': name = \'\xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0\'\n\n    back = [name, result]\n    return back\n\n    return\n\n\nif __name__ == \'__main__\':\n    find(\'\xe8\xbd\xaf\xe4\xbb\xb6\')\n'"
analysis/process_data.py,0,"b'import re\nimport jieba\nimport analysis_main as A\n\n\n# \xe5\x87\xbd\xe6\x95\xb0\xe6\xb3\xa8\xe5\x86\x8c\xe5\x99\xa8\ndef ways(func):\n    A.Analyze.process_fn_list.append(func)\n\n    def wrapper(*args, **kw):\n        return func(*args, **kw)\n\n    return wrapper\n\n\ndef main():\n    global cursor, db\n    cursor = A.Analyze.cursor\n    db = A.Analyze.db\n\n    print(A.Analyze.process_fn_list)\n\n    for fn in A.Analyze.process_fn_list:\n        fn()\n        print(fn.__name__ + \'  ok\')\n\n\n@ways\ndef big_del_null():\n    cursor.execute(""update big set salary = \'\' where salary is null"")\n    db.commit()\n    cursor.execute(""update big set experience = \'\' where experience is null"")\n    db.commit()\n    cursor.execute(""update big set education = \'\' where education is null"")\n    db.commit()\n    #    !!!!!\xe6\xb3\xa8\xe6\x84\x8f \xe7\x89\xb9\xe6\xae\x8a\xe7\x9a\x84\xe5\x80\xbc\xe6\x9c\x89 None null\n    cursor.execute(""update big set experience = \'\xe4\xb8\x8d\xe9\x99\x90\' where experience = \'None\'"")\n    db.commit()\n    cursor.execute(""update big set experience = \'1\' where experience = \'-1\'"")\n    db.commit()\n    cursor.execute(""update big set experience = \'\xe4\xb8\x8d\xe9\x99\x90\' where experience = \'null\'"")\n    db.commit()\n    cursor.execute(""update big set education = \'\xe4\xb8\x8d\xe9\x99\x90\' where education = \'\'"")\n    db.commit()\n    cursor.execute(""update big set welfare = \'\' where welfare is null"")\n    db.commit()\n\n@ways\ndef big_chuligongzi():\n    sql = ""select salary from big ""  # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84\xe5\xb7\xa5\xe8\xb5\x84\xe4\xbf\xa1\xe6\x81\xaf\n    cursor.execute(sql)\n    data = cursor.fetchall()\n    id = 1\n    for i in data:\n        pay = i[0]\n        if pay.find(\'\xe4\xbb\xa5\xe4\xb8\x8a\') != -1:\n            pattern = re.compile(r\'\\d+\')\n            res = re.findall(pattern, pay)\n            min = res[0]\n            max = ""\xe4\xb8\x8d\xe9\x99\x90""\n            ave = res[0]\n            sql = ""UPDATE big SET MIN_PAY="" + str(min) + "",MAX_PAY=\'\xe4\xb8\x8d\xe9\x99\x90\',AVE_PAY="" + str(ave) + "" WHERE id="" + str(\n                id)\n            cursor.execute(sql)\n            id += 1\n            continue\n\n        elif pay.find(\'-\') != -1:\n            pattern = re.compile(r\'\\d+\')\n            res = re.findall(pattern, pay)\n            min = int(res[0])\n            max = int(res[1])\n            ave = int((min + max) // 2)\n\n        elif pay.find(\'\xe9\x9d\xa2\xe8\xae\xae\') != -1:\n            min = \'\xe9\x9d\xa2\xe8\xae\xae\'\n            max = \'\xe9\x9d\xa2\xe8\xae\xae\'\n            ave = \'\xe9\x9d\xa2\xe8\xae\xae\'\n            sql = ""UPDATE big SET MIN_PAY=\'\xe9\x9d\xa2\xe8\xae\xae\',MAX_PAY=\'\xe9\x9d\xa2\xe8\xae\xae\',AVE_PAY=\'\xe9\x9d\xa2\xe8\xae\xae\' WHERE id="" + str(id)\n            cursor.execute(sql)\n            id += 1\n            continue\n        else:\n            pattern = re.compile(r\'\\d+\')\n            res = re.findall(pattern, pay)\n            if res == None:\n                min = \'\xe9\x9d\xa2\xe8\xae\xae\'\n                max = \'\xe9\x9d\xa2\xe8\xae\xae\'\n                ave = \'\xe9\x9d\xa2\xe8\xae\xae\'\n                sql = ""UPDATE big SET MIN_PAY=\'\xe9\x9d\xa2\xe8\xae\xae\',MAX_PAY=\'\xe9\x9d\xa2\xe8\xae\xae\',AVE_PAY=\'\xe9\x9d\xa2\xe8\xae\xae\' WHERE id="" + str(id)\n                cursor.execute(sql)\n                id += 1\n                continue\n            else:\n                min = res[0]\n                max = res[0]\n                ave = res[0]\n        sql = ""UPDATE big SET MIN_PAY="" + str(min) + "",MAX_PAY="" + str(max) + "",AVE_PAY="" + str(\n            ave) + "" WHERE id="" + str(id)\n        cursor.execute(sql)\n        if id % 5000 == 0:\n            db.commit()\n        id += 1\n    db.commit()\n\n\n@ways\ndef big_chulijingyan():  # \xe5\xb0\x86\xe7\xbb\x8f\xe9\xaa\x8c\xe6\x8f\x90\xe5\x8f\x96\xe5\x87\xba\xe6\x9d\xa5\n    sql = ""SELECT experience FROM big""\n    cursor.execute(sql)\n    results = cursor.fetchall()\n    a = 1\n    for row in results:\n        if row[0] == \'\':\n            a += 1\n            continue\n        if row[0].isalpha() or row[0] == \'\xe6\x97\xa0\xe5\xb7\xa5\xe4\xbd\x9c\xe7\xbb\x8f\xe9\xaa\x8c\':\n            sql = ""update big set experience2 = \'0\' where id = \'%s\'"" % str(a)\n            cursor.execute(sql)\n        elif row[0].find(\'-\') != -1 and row[0].split(\'-\')[0] != \'\' and row[0].split(\'-\')[1] != \'\':\n            pattern = re.compile(r\'\\d+\')\n            res = re.findall(pattern, row[0])\n            # try:\n            res = int((int(res[0]) + int(res[1])) / 2)\n            sql = ""update big set experience2 = "" + str(res) + "" where id = \'%s\'"" % str(a)\n            cursor.execute(sql)\n        else:\n            print(row[0], type(row[0]))\n            pattern = re.compile(r\'\\d+\')\n            res = re.findall(pattern, row[0])\n            sql = ""update big set experience2 = "" + str(res[0]) + "" where id = \'%s\'"" % str(a)\n            cursor.execute(sql)\n            # db.commit()\n        print(a)\n        if int(a) % 5000 == 0:\n            db.commit()\n        a += 1\n    db.commit()\n\n\n@ways\ndef qlrc():\n    cursor.execute(""select place from qlrc"")\n    re = cursor.fetchall()\n    id = 1\n    for i in range(0, len(re)):\n        if len(re[i][0]) == 0 or re[i][0].find(\'\xe5\xb8\x82\') == -1:\n            id += 1\n            continue\n        else:\n            x = list(jieba.cut(re[i][0]))\n            x = x[1]\n            cursor.execute(""update qlrc set city = \'"" + str(x) + ""\' where id ="" + str(id))\n            db.commit()\n            id += 1\n\n    cursor.execute(""select pay from qlrc"")  # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84\xe5\xb7\xa5\xe8\xb5\x84\xe4\xbf\xa1\xe6\x81\xaf\n    data = cursor.fetchall()\n    id = 1\n    for i in data:\n        pay = i[0]\n        if pay.find(\'-\') != -1:\n            pay_min = float(((pay.split(\'-\')[0]).split(\'K\'))[0]) * 1000\n            pay_max = float((pay.split(\'-\')[1].split(\'K\'))[0]) * 1000\n            ave = round((pay_max + pay_min) / 2, 2)\n            sql = ""UPDATE qlrc SET MIN_PAY="" + str(pay_min) + "",MAX_PAY="" + str(pay_max) + "",AVE_PAY="" + str(\n                ave) + "" WHERE id="" + str(id)\n            cursor.execute(sql)\n            db.commit()\n        id += 1\n\n\n\n\n\n@ways\ndef qcwy1():\n    cursor.execute(""select xexperience,number from qcwy"")\n    data = cursor.fetchall()\n    id = 1\n    for i in data:\n        # \xe5\xa4\x84\xe7\x90\x86\xe4\xba\xba\xe6\x95\xb0\n        if i[1].isalpha():\n            res = 0\n            sql = ""update qcwy set number = "" + str(res) + "" where id = %s"" % str(id)\n            cursor.execute(sql)\n            # db.commit()\n        elif i[1].find(\'-\') != -1:\n            pattern = re.compile(r\'\\d+\')\n            res = re.findall(pattern, i[1])\n            res = int((int(res[0]) + int(res[1])) / 2)\n            sql = ""update qcwy set number = "" + str(res) + "" where id = %s"" % str(id)\n            cursor.execute(sql)\n            # db.commit()\n        else:\n            pattern = re.compile(r\'\\d+\')\n            res = re.findall(pattern, i[1])\n            sql = ""update qcwy set number = "" + str(res[0]) + "" where id = %s"" % str(id)\n            cursor.execute(sql)\n            # db.commit()\n        # \xe6\x8f\x90\xe7\xbb\x8f\xe9\xaa\x8c\xe5\x80\xbc\n        if i[0].isalpha():\n            sql = ""update qcwy set experience = \'0\' where id = %s"" % str(id)\n            cursor.execute(sql)\n            # db.commit()\n        elif i[0].find(\'-\') != -1:\n            pattern = re.compile(r\'\\d+\')\n            res = re.findall(pattern, i[0])\n            res = int((int(res[0]) + int(res[1])) / 2)\n            sql = ""update qcwy set experience = "" + str(res) + "" where id = %s"" % str(id)\n            cursor.execute(sql)\n            # db.commit()\n        else:\n            pattern = re.compile(r\'\\d+\')\n            res = re.findall(pattern, i[0])\n            sql = ""update qcwy set experience = "" + str(res[0]) + "" where id = %s"" % str(id)\n            cursor.execute(sql)\n            # db.commit()\n        if int(id) % 100000 == 0:\n            db.commit()\n        print(id)\n        id += 1\n    db.commit()\n\n    cursor.execute(""SELECT number FROM qcwy "")\n    results = cursor.fetchall()\n    sum = 0\n    count = 0\n    for row in results:\n        if int(row[0]) != 0:\n            sum += int(row[0])\n            count += 1\n    b = int(sum / count)\n    print(b)\n    id = 1\n    for row in results:\n        if int(row[0]) != 0:\n            id += 1\n            continue\n        else:\n            sql = ""update qcwy set number = "" + str(b) + "" where id = %s"" % str(id)\n            cursor.execute(sql)\n        if int(id) % 100000 == 0:\n            db.commit()\n        print(id)\n        id += 1\n    db.commit()\n\n\n@ways\ndef qcwy2():\n    cursor.execute(\'select salary from qcwy \')\n    data = cursor.fetchall()\n    id = 1\n    for i in data:\n        pay = i[0]\n        if pay.find(\'\xe5\x8d\x83\') != -1 or pay.find(\'\xe4\xb8\x87\') != -1 or pay.find(\'\xe5\x85\x83\') != -1:  # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\xba\xe7\xa9\xba\xe5\x80\xbc\xe4\xb8\x8d\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\xe5\xbd\x93\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe4\xb8\xad\xe5\xad\x98\xe5\x9c\xa8\xe5\x8d\x83\xe3\x80\x81\xe4\xb8\x87\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe5\xb0\xb1\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa6\x82\xe4\xb8\x8b\xe5\xa4\x84\xe7\x90\x86\n            if pay.find(\'\xe5\xb9\xb4\') != -1:\n                x = 12\n            elif pay.find(\'\xe5\xa4\xa9\') != -1:\n                x = 1 / 30\n            else:\n                x = 1\n            if pay.find(\'\xe5\x8d\x83\') != -1:\n                if pay.find(\'-\') != -1:\n                    pay_min = pay.split(\'-\')[0]\n                    pay_max = pay.split(\'-\')[1].split(\'\xe5\x8d\x83\')[0]\n                    min = float(pay_min) * 1000 / x\n                    max = float(pay_max) * 1000 / x\n                    ave = (min + max) / 2\n                else:\n                    min = max = ave = float(pay.split(\'\xe5\x8d\x83\')[0]) * 1000 / x\n            elif pay.find(\'\xe4\xb8\x87\') != -1:\n                if pay.find(\'-\') != -1:\n\n                    pay_min = pay.split(\'-\')[0]\n                    pay_max = pay.split(\'-\')[1].split(\'\xe4\xb8\x87\')[0]\n                    min = float(pay_min) * 10000 / x\n                    max = float(pay_max) * 10000 / x\n                    ave = (min + max) / 2\n                else:\n                    min = max = ave = float(pay.split(\'\xe4\xb8\x87\')[0]) * 10000 / x\n            else:\n                if pay.find(\'-\') != -1:\n                    pay_min = pay.split(\'-\')[0]\n                    pay_max = pay.split(\'-\')[1].split(\'\xe5\x85\x83\')[0]\n                    min = float(pay_min) / x\n                    max = float(pay_max) / x\n                    ave = (min + max) / 2\n                else:\n                    min = max = ave = float(pay.split(\'\xe5\x85\x83\')[0]) / x\n\n            # sql\xe8\xaf\xad\xe5\x8f\xa5\xe6\x98\xaf\xe5\xb0\x86min max ave\xe6\x94\xbe\xe5\x85\xa5\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\n            sql = ""UPDATE qcwy SET MIN_PAY="" + str(min) + "",MAX_PAY="" + str(max) + "",AVE_PAY="" + str(\n                ave) + "" WHERE id="" + str(id)\n            cursor.execute(sql)\n\n        if int(id) % 100000 == 0:\n            db.commit()\n        print(id)\n        id += 1\n    db.commit()\n\n\n@ways\ndef qcwy_view():\n    def duquxieru(x, y):\n        count = 0\n        for i in x:\n            info = []\n            i = str(i)\n            m = y[count]\n            j = \'`\' + m + \'`\'\n            if i == \'\xe6\x95\xb0\xe6\x8d\xae\':\n                sql = \'create view \' + j + \' as select distinct * from qcwy where (qcwy.title like ""%\' + i + \'%"" and qcwy.title not like ""%\xe6\x95\xb0\xe6\x8d\xae\xe7\xae\xa1\xe7\x90\x86%"")\'\n                print(sql)\n                cursor.execute(sql)\n            elif i == \'\xe7\xbb\xb4\xe4\xbf\xae\':\n                sql = \'create view \' + j + \' as select distinct * from qcwy where (qcwy.title like ""%\' + i + \'%"" or qcwy.title like ""%\xe7\xbb\xb4\xe6\x8a\xa4%"")\'\n                print(sql)\n                cursor.execute(sql)\n            else:\n\n                # sql = \'create view \' + j + \' as select distinct * from qcwy where (qcwy.title like ""%\' + i + \'%"" or qcwy.title like ""%\' + i2 + \'%""\' \\\n                # \' or qcwy.title like ""%\' + i3 + \'%"" or or qcwy.title like ""%\' + i4 + \'%"")\'\n\n                sql2 = \'create view \' + j + \' as select distinct * from qcwy where (qcwy.title like ""%\' + i + \'%"")\'\n                print(sql2)\n\n                cursor.execute(sql2)\n\n            count += 1\n\n    sql = ""SELECT * FROM qcwy""\n    cursor.execute(sql)\n    results = cursor.fetchall()\n    results = list(results)\n\n    l1 = [\'\xe8\xae\xb2\xe5\xb8\x88\', \'\xe7\xbb\x8f\xe7\x90\x86\', \'\xe6\x80\xbb\xe7\x9b\x91\', \'\xe5\xa4\xa7\xe6\x95\xb0\xe6\x8d\xae\', \'\xe8\xb4\x9f\xe8\xb4\xa3\xe4\xba\xba\', \'\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\', \'\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\', \'\xe8\xbd\xaf\xe4\xbb\xb6\', \'\xe5\xbb\xba\xe6\xa8\xa1\', \'\xe7\xa1\xac\xe4\xbb\xb6\', \'\xe7\xbd\x91\xe7\xbb\x9c\', \'\xe4\xba\xba\xe5\xb7\xa5\xe6\x99\xba\xe8\x83\xbd\', \'\xe5\x90\x8e\xe7\xab\xaf\', \'\xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0\']\n    l1_1 = [\'XXXX\xe8\xae\xb2\xe5\xb8\x88\', \'\xe9\xa1\xb9\xe7\x9b\xae\xe5\xbc\x80\xe5\x8f\x91\xe7\xbb\x8f\xe7\x90\x86\', \'\xe6\x8a\x80\xe6\x9c\xaf/\xe7\xa0\x94\xe5\x8f\x91\xe6\x80\xbb\xe7\x9b\x91\', \'\xe5\xa4\xa7\xe6\x95\xb0\xe6\x8d\xae\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe6\x8a\x80\xe6\x9c\xaf/\xe7\xa0\x94\xe7\xa9\xb6/\xe9\xa1\xb9\xe7\x9b\xae\xe8\xb4\x9f\xe8\xb4\xa3\xe4\xba\xba\', \'\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe6\x95\xb0\xe6\x8d\xae\xe5\xba\x93\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe8\xbd\xaf\xe4\xbb\xb6\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe5\xbb\xba\xe6\xa8\xa1\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe7\xa1\xac\xe4\xbb\xb6\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\',\n            \'\xe7\xbd\x91\xe7\xbb\x9c\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe4\xba\xba\xe5\xb7\xa5\xe6\x99\xba\xe8\x83\xbd\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe5\x90\x8e\xe7\xab\xaf\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\']\n    l2 = [\'\xe6\x95\xb0\xe6\x8d\xae\', \'\xe6\x95\xb0\xe6\x8d\xae\xe7\xae\xa1\xe7\x90\x86\', \'\xe5\x89\x8d\xe7\xab\xaf\', \'\xe7\xbb\xb4\xe4\xbf\xae\']\n    l2_1 = [\'\xe6\x95\xb0\xe6\x8d\xae\xe6\x8c\x96\xe6\x8e\x98/\xe5\x88\x86\xe6\x9e\x90/\xe5\xa4\x84\xe7\x90\x86\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe6\x95\xb0\xe6\x8d\xae\xe7\xae\xa1\xe7\x90\x86\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Web\xe5\x89\x8d\xe7\xab\xaf\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'\xe8\xae\xa1\xe7\xae\x97\xe6\x9c\xba\xe7\xbb\xb4\xe4\xbf\xae/\xe7\xbb\xb4\xe6\x8a\xa4\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\']\n    l3 = [\'Java\', \'C++\', \'PHP\', \'C#\', \'.Net\', \'Hadoop\', \'Python\', \'Perl\', \'Ruby\', \'Nodejs\', \'Go\', \'Javascript\',\n          \'Delphi\', \'jsp\', \'sql\', \'Linux\', \'Android\', \'IOS\', \'GIS\', \'BI\']\n    l3_1 = [\'Java\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'C++\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'PHP\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'C#\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'.NET\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Hadoop\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Python\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Perl\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Ruby\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\',\n            \'Nodejs\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Go\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Javascript\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Delphi\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'jsp\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'sql\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Linux\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'Android\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\',\n            \'IOS\xe5\xbc\x80\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'GIS\xe5\xbc\x80\xe5\x8f\x91/\xe7\xa0\x94\xe5\x8f\x91\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\', \'BI\xe5\xb7\xa5\xe7\xa8\x8b\xe5\xb8\x88\']\n\n    results = duquxieru(l1, l1_1)\n    print(1)\n\n    results = duquxieru(l2, l2_1)\n    print(2)\n\n    results = duquxieru(l3, l3_1)\n    print(3)\n\n\n@ways\ndef oldnew_view():\n    l3 = [\'\xe4\xbc\xa0\xe7\xbb\x9f\', \'\xe6\x96\xb0\xe5\x85\xb4\']\n    for i in l3:\n        if i == \'\xe6\x96\xb0\xe5\x85\xb4\':  # todo \xe6\x94\xb9\xe6\x95\xb0\xe9\x87\x8f\n            sql = \'create view `\xe6\x96\xb0\xe5\x85\xb4\xe8\x81\x8c\xe4\xb8\x9a` as select distinct ID ,title,ave_pay,number,experience,education \' \\\n                  \'from qcwy where (qcwy.title like ""%\xe5\xad\xa6\xe4\xb9\xa0%""  or qcwy.title like ""%\xe4\xba\xba\xe5\xb7\xa5\xe6\x99\xba\xe8\x83\xbd%"" \' \\\n                  \'or qcwy.title like ""%\xe6\x95\xb0\xe6\x8d\xae%"" or qcwy.title like ""%\xe7\xae\x97\xe6\xb3\x95%"" or qcwy.title like ""%\xe5\x8c\xba\xe5\x9d\x97\xe9\x93\xbe%""\' \\\n                  \' or qcwy.title like ""%\xe8\xa7\x86\xe8\xa7\x89%"" or qcwy.title like ""%\xe7\x89\xa9\xe8\x81\x94\xe7\xbd\x91%"" or qcwy.title like ""%\xe8\x87\xaa\xe7\x84\xb6\xe8\xaf\xad\xe8\xa8\x80%""\' \\\n                  \'and qcwy.id < ""10000"")\'\n        else:\n            sql = \'create view `\xe4\xbc\xa0\xe7\xbb\x9f\xe8\x81\x8c\xe4\xb8\x9a` as select distinct ID ,title,ave_pay,number,experience,education from qcwy where (qcwy.title not like ""%\xe5\xad\xa6\xe4\xb9\xa0%""  and qcwy.title not like ""%\xe4\xba\xba\xe5\xb7\xa5\xe6\x99\xba\xe8\x83\xbd%"" \' \\\n                  \'and qcwy.title  not like ""%\xe6\x95\xb0\xe6\x8d\xae%"" and qcwy.title not like ""%\xe7\xae\x97\xe6\xb3\x95%"" and qcwy.title not like ""%\xe5\x8c\xba\xe5\x9d\x97\xe9\x93\xbe%""\' \\\n                  \'  and qcwy.title not like ""%\xe8\xa7\x86\xe8\xa7\x89%"" and qcwy.title not like ""%\xe7\x89\xa9\xe8\x81\x94\xe7\xbd\x91%"" and qcwy.title not like ""%\xe8\x87\xaa\xe7\x84\xb6\xe8\xaf\xad\xe8\xa8\x80%""\' \\\n                  \'and qcwy.id < ""10000"")\'\n        cursor.execute(sql)\n\n@ways\ndef bigcompany_bigdata_view():\n    l1 = [\'\xe5\x8d\x8e\xe4\xb8\xba\', \'\xe6\x90\x9c\xe7\x8b\x90\', \'\xe6\xbb\xb4\xe6\xbb\xb4\xe5\x87\xba\xe8\xa1\x8c\', \'\xe9\x87\x91\xe5\xb1\xb1\', \'\xe6\x96\xb0\xe6\xb5\xaa\', \'\xe7\xbe\x8e\xe5\x9b\xa2\', \'\xe7\x94\xb2\xe9\xaa\xa8\xe6\x96\x87\', \'\xe9\x98\xbf\xe9\x87\x8c\xe5\xb7\xb4\xe5\xb7\xb4\', \'\xe5\xbe\xae\xe8\xbd\xaf\', \'\xe7\x88\xb1\xe5\xa5\x87\xe8\x89\xba\', \'\xe4\xb8\xad\xe5\x9b\xbd\xe7\x94\xb5\xe4\xbf\xa1\', \'\xe7\x99\xbe\xe5\xba\xa6\', \'\xe5\xa5\x87\xe8\x99\x8e\', \'\xe8\x8b\xb1\xe7\x89\xb9\xe5\xb0\x94\', \'\xe5\xae\x8c\xe7\xbe\x8e\xe4\xb8\x96\xe7\x95\x8c\', \'\xe5\xad\x97\xe8\x8a\x82\xe8\xb7\xb3\xe5\x8a\xa8\',\n          \'\xe4\xb8\xad\xe5\x9b\xbd\xe7\xa7\xbb\xe5\x8a\xa8\', \'\xe4\xb8\xad\xe5\x9b\xbd\xe8\x81\x94\xe9\x80\x9a\', \'\xe5\xb7\xa8\xe4\xba\xba\xe7\xbd\x91\xe7\xbb\x9c\', \'\xe6\xb5\xaa\xe6\xbd\xae\', \'\xe8\x81\x94\xe6\x83\xb3\', \'\xe6\x90\x9c\xe7\x8b\x97\', \'\xe8\x9a\x82\xe8\x9a\x81\xe9\x87\x91\xe6\x9c\x8d\', \'\xe8\x85\xbe\xe8\xae\xaf\', \'\xe7\xbd\x91\xe6\x98\x93\', \'\xe5\xb0\x8f\xe7\xb1\xb3\', \'IBM\', \'\xe4\xba\xac\xe4\xb8\x9c\']\n    for i in l1:\n        j = \'`\' + i + \'`\'\n        cursor.execute(\'DROP VIEW IF EXISTS \' + j)\n        sql = \'create view \' + j + \' as select distinct * from big where (big.company like ""%\' + i + \'%"")\'\n        cursor.execute(sql)\n    sql = \'create view `\xe5\xa4\xa7\xe6\x95\xb0\xe6\x8d\xae\xe8\x81\x8c\xe4\xbd\x8d` as select distinct ID ,place,number,industry from qcwy where (qcwy.title like ""%\xe6\x95\xb0\xe6\x8d\xae%"" )\'\n    cursor.execute(sql)\n\n@ways\ndef another_view():\n    l1 = [\'\xe8\xbd\xaf\xe4\xbb\xb6\', \'\xe4\xba\xba\xe5\xb7\xa5\xe6\x99\xba\xe8\x83\xbd\', \'\xe5\xad\xa6\xe4\xb9\xa0\', \'\xe5\x89\x8d\xe7\xab\xaf\', \'\xe5\x90\x8e\xe7\xab\xaf\', \'\xe6\x95\xb0\xe6\x8d\xae\', \'\xe7\xae\x97\xe6\xb3\x95\', \'\xe6\xb5\x8b\xe8\xaf\x95\', \'\xe5\xae\x89\xe5\x85\xa8\', \'\xe8\xbf\x90\xe7\xbb\xb4\', \'UI\', \'\xe5\x8c\xba\xe5\x9d\x97\xe9\x93\xbe\', \'\xe7\xbd\x91\xe7\xbb\x9c\', \'\xe5\x85\xa8\xe6\xa0\x88\', \'\xe7\xa1\xac\xe4\xbb\xb6\', \'\xe7\x89\xa9\xe8\x81\x94\xe7\xbd\x91\', \'\xe6\xb8\xb8\xe6\x88\x8f\']\n    for i in l1:\n        j = \'`\' + i + \'`\'\n        if i == \'\xe5\xad\xa6\xe4\xb9\xa0\':  # \xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0\xe5\x92\x8c\xe6\xb7\xb1\xe5\xba\xa6\xe5\xad\xa6\xe4\xb9\xa0\xe9\x83\xbd\xe6\x98\xaf\xe5\xad\xa6\xe4\xb9\xa0\n            #                  \xe8\xa7\x86\xe5\x9b\xbe\xe5\x90\x8d                                         \xe5\x8e\x9f\xe8\xa1\xa8\xe5\x90\x8d         \xe5\x8e\x9f\xe8\xa1\xa8\xe5\x90\x8d\n            sql = \'create view `\xe6\xb7\xb1\xe5\xba\xa6\\\xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0` as select distinct * from qcwy where (qcwy.title like ""%\xe5\xad\xa6\xe4\xb9\xa0%"")\'\n        elif i == \'UI\':\n            sql = \'create view `UI` as select distinct * from qcwy where (qcwy.title like ""%UI%"" and qcwy.title not like ""%GUI%"")\'\n        elif i == \'\xe8\xbd\xaf\xe4\xbb\xb6\':\n            sql = \'create view `\xe8\xbd\xaf\xe4\xbb\xb6\xe5\xbc\x80\xe5\x8f\x91` as select distinct * from qcwy where (qcwy.title like ""%\xe8\xbd\xaf\xe4\xbb\xb6%"" and qcwy.title not like ""%\xe6\xb5\x8b\xe8\xaf\x95%"")\'\n        else:\n            sql = \'create view \' + j + \' as select distinct * from qcwy where (qcwy.title like ""%\' + i + \'%"")\'\n        cursor.execute(sql)\n'"
spider/spider_main.py,0,"b'# -*- coding: utf-8 -*-\nimport configparser\nimport csv\nimport json\nimport os\nimport random\nimport threading\nimport time\nfrom multiprocessing import Process, Queue\nfrom threading import Thread\n\nimport bs4\nimport requests\nfrom lxml import etree\n\nfrom .tool import log, timer\n\n\nclass SpiderMeta(type):\n\n    spiders = []\n\n    def __new__(cls, name, bases, attrs):\n        cls.spiders.append(type.__new__(cls, name, bases, attrs))\n        return type.__new__(cls, name, bases, attrs)\n\n\nclass BaseSpider(object):\n\n    headers = {\n        \'Accept\': \'text/html,application/xhtml+xml,application/xml;\'\n                  \'q=0.9,image/webp,image/apng,*/*;q=0.8\',\n        \'Accept-Encoding\': \'gzip, deflate, br\',\n        \'Accept-Language\': \'zh-CN,zh;q=0.9,en;q=0.8\',\n        \'Connection\': \'keep-alive\',\n        \'User-Agent\': \'Mozilla/5.0 (Windows NT 10.0; Win64; x64) \'\n                      \'AppleWebKit/537.36 (KHTML, like Gecko) \'\n                      \'Chrome/64.0.3282.119 Safari/537.36\',\n        \'Upgrade-Insecure-Requests\': \'1\',\n    }\n\n    request_sleep = 0.7\n    _time_recode = 0\n    number = 0\n\n    def request(self, method=\'get\', url=None, encoding=None, **kwargs):\n\n        if not kwargs.get(\'headers\'):\n            kwargs[\'headers\'] = self.headers\n\n        if not kwargs.get(\'timeout\'):\n            kwargs[\'timeout\'] = 5\n\n        rand_multi = random.uniform(0.8, 1.2)\n        interval = time.time() - self._time_recode\n        if interval < self.request_sleep:\n            time.sleep((self.request_sleep - interval) * rand_multi)\n\n        resp = getattr(requests, method)(url, **kwargs)\n        self._time_recode = time.time()\n\n        self.number = self.number + 1\n\n        if encoding:\n            resp.encoding = encoding\n        return resp.text\n\n\nclass Job51Spider(BaseSpider, metaclass=SpiderMeta):\n    request_sleep = 0\n\n    def run(self):\n        conf = configparser.ConfigParser()\n        conf.read(\'./spider/conf.ini\')\n        citycode = conf[\'citycode\'][self.city]\n        page = 1\n        # \xe8\x8e\xb7\xe5\xbe\x97\xe6\x80\xbb\xe9\xa1\xb5\xe6\x95\xb0\n        url = ""https://search.51job.com/list/{},000000,0100%252C2400%252C2700%252C2500,00,9,99,{},2,"" \\\n              ""{}.html?lang=c&stype=&postchannel=0000&workyear=99&cotype=99&degreefrom=99&jobterm=99&companysize=99"" \\\n              ""&providesalary=99&lonlat=0%2C0&radius=-1&ord_field=0&confirmdate=9&fromType=&dibiaoid=0&address=&line"" \\\n              ""=&specialarea=00&from=&welfare="".format(citycode, self.job, page)\n        a = self.request(url=url, method=\'get\', encoding=\'GBK\')\n        html = etree.HTML(a)\n        maxpage = html.xpath(\'//*[@id=""resultList""]/div[2]/div[5]/text()\')[2].replace(\'/\', \'\').strip()\n        maxpage = eval(maxpage)\n        # \xe8\xa7\xa3\xe6\x9e\x90\xe9\xa1\xb5\xe6\x95\xb0\n        while True:\n            url = ""https://search.51job.com/list/{},000000,0100%252C2400%252C2700%252C2500,00,9,99,{},2,"" \\\n                  ""{}.html?lang=c&stype=&postchannel=0000&workyear=99&cotype=99&degreefrom=99&jobterm=99&companysize=99"" \\\n                  ""&providesalary=99&lonlat=0%2C0&radius=-1&ord_field=0&confirmdate=9&fromType=&dibiaoid=0&address=&line"" \\\n                  ""=&specialarea=00&from=&welfare="".format(citycode, self.job, page)\n            self.get_urls(url)\n\n            log.printlog(\'\xe5\xa4\x9a\xe7\xba\xbf\xe7\xa8\x8b+\' + str(page) + \'\xe9\xa1\xb5\xe5\xae\x8c\xe6\x88\x90--\' + self.city + self.job)\n            page = page + 1\n            if page == maxpage + 1:\n                break\n        return \'over\'\n\n    def get_urls(self, url):\n        try:\n            a = self.request(url=url, method=\'get\', encoding=\'GBK\')\n            html = etree.HTML(a)\n            urls = html.xpath(\'//*[@id=""resultList""]/div[@class=""el""]/p/span/a\')\n            if threading.activeCount() > 10:\n                log.printlog(str(threading.activeCount()) + \'\xe7\xba\xbf\xe7\xa8\x8b\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x8c\xe8\xaf\xb7\xe6\xb3\xa8\xe6\x84\x8f\xe6\xa3\x80\xe6\x9f\xa5\xe7\xa8\x8b\xe5\xba\x8f\xe5\xa4\x96\xe9\x83\xa8\xe9\x98\xbb\xe5\xa1\x9e\xe5\x8e\x9f\xe5\x9b\xa0\')\n                time.sleep(3)\n            if self.threads:\n                for i in urls:\n                    t = threading.Thread(target=self.get_job_detail, args=(i.get(\'href\'),))\n                    t.start()\n                    time.sleep(0.03)\n            else:\n                for i in urls:\n                    self.get_job_detail(i.get(\'href\'))\n        except:\n            time.sleep(2)\n            self.get_urls(url)\n\n    def get_job_detail(self, url):\n        if \'jobs\' not in url:\n            return\n        try:\n            while True:\n                try:\n                    a = self.request(url=url, method=\'get\', encoding=\'GBK\')\n                    html = etree.HTML(a)\n                    break\n                except:\n                    time.sleep(3)\n            try:\n                pay = html.xpath(\'/ html / body / div[3] / div[2] / div[2] / div / div[1] / strong/text()\')[0].strip()\n            except:\n                pay = \'\'\n            list1 = html.xpath(\'/html/body/div[3]/div[2]/div[2]/div/div[1]/p[2]/@title\')[0].split(""|"")\n\n            list1 = [i.strip() for i in list1]\n            if \'\xe6\x8b\x9b\' in list1[2]:\n                education = None\n            else:\n                education = list1[2]\n            result = {\n                \'keyword\': self.job,\n                \'provider\': \'\xe5\x89\x8d\xe7\xa8\x8b\xe6\x97\xa0\xe5\xbf\xa7\xe7\xbd\x91\',\n                \'place\': self.city,\n                \'title\': html.xpath(\'/html/body/div[3]/div[2]/div[2]/div/div[1]/h1/text()\')[0].strip(),\n                \'salary\': pay,\n                \'experience\': list1[1],\n                \'education\': education,\n                \'companytype\': html.xpath(\'/html/body/div[3]/div[2]/div[4]/div[1]/div[2]/p[1]/text()\')[0].strip(),\n                \'industry\': html.xpath(\'/html/body/div[3]/div[2]/div[4]/div[1]/div[2]/p[3]/text()\')[0].strip(),\n                \'description\': html.xpath(\' / html / body / div[3] / div[2] / div[3] / div[1] / div\')[0].xpath(\n                    \'string(.)\').strip().replace(\'""\', \'\').strip().replace(\'\\t\', \'\').replace(\'\\r\', \'\').replace(\'\\n\', \'\')\n            }\n            self.queue.put(result)\n            return\n        except:\n            time.sleep(3)\n            return\n\n\nclass QiluSpider(BaseSpider, metaclass=SpiderMeta):\n    request_sleep = 3\n\n    def run(self):\n        keys = [26, 2511, 24]\n        for key in keys:\n            page = 1\n\n            while True:\n                detail_list = self.get_page(page, key)\n                if detail_list == []:\n                    return \'over\'\n                page = page + 1\n                # \xe9\x94\x99\xe4\xba\x86\n                while detail_list != []:\n                    detail = [i.get_text(strip=True) for i in detail_list]\n                    del detail_list[:9]\n                    self.get_detail(detail)\n\n    def get_page(self, page, key):\n        pageurl = \'http://www.qlrc.com/personal/js/ajaxPager\'\n        pagedata = {\n            \'txtKeyWord\': self.job,\n            \'oldRegionID\': 32,\n            \'iddcIndustryID\': \'31 32 1 33 34\',\n            \'idSFrom\': 1310,\n            \'type\': 0,\n            \'page\': page\n        }\n        html = self.request(\'post\', url=pageurl, data=pagedata)\n        soup = bs4.BeautifulSoup(html, ""html.parser"")\n        detail_list = soup.select(\'.JobList table td\')\n        return detail_list\n\n    def get_detail(self, detail):\n\n        list1 = detail[7].split(\'|\')\n        result = {\n            \'keyword\': self.job,\n            \'provider\': \'\xe9\xbd\x90\xe9\xb2\x81\xe4\xba\xba\xe6\x89\x8d\xe7\xbd\x91\',\n            \'place\': detail[3],\n            \'title\': detail[0],\n            \'salary\': detail[4],\n            \'experience\': list1[1].strip(),\n            \'education\': list1[0].strip(),\n            \'description\': list1[3].strip()\n        }\n        self.queue.put(result)\n\n\nclass BaiduSpider(BaseSpider, metaclass=SpiderMeta):\n    request_sleep = 1\n\n    def run(self):\n        i = 0\n        while True:\n            url = \'http://zhaopin.baidu.com/api/qzasync?query={}&city={}&pcmod=1&pn={}&rn=50&sort_type=1\'.format(\n                self.job, self.city, i * 50)\n            if i * 50 >= 760:\n                return \'over\'\n            i = i + 1\n            self.get_job_detail(url)\n\n    def get_job_detail(self, url):\n        html = self.request(url=url, method=\'get\')\n        dict1 = json.loads(html)\n        dict2 = dict1[\'data\'][\'disp_data\']\n\n        for i in dict2:\n            if \'jobfirstclass\' not in i.keys():\n                i[\'jobfirstclass\'] = \'\'\n            result = {\n                \'provider\': i[\'provider\'],\n                \'keyword\': self.job,\n                \'place\': self.city,\n                \'title\': i[\'title\'],\n                \'salary\': i[\'ori_salary\'],\n                \'experience\': i[\'ori_experience\'],\n                \'education\': i[\'ori_education\'],\n                \'companytype\': i[\'employertype\'],\n                \'industry\': i[\'jobfirstclass\']\n            }\n            self.queue.put(result)\n\n\nclass SpiderProcess(Process):\n\n    def __init__(self, data_queue, job, city, type, threads):\n        Process.__init__(self)\n        self.data_queue = data_queue\n        self.job = job\n        self.city = city\n        self.type = type\n\n        self.threads = threads\n\n    def iter_spider(self, spider):\n        setattr(spider, \'job\', self.job)\n        setattr(spider, \'city\', self.city)\n        setattr(spider, \'threads\', self.threads)\n        setattr(spider, \'queue\', self.data_queue)\n        error = 0\n        result = spider.run()\n        if result == \'over\':\n            error = error + 1\n            print(\'\xe7\x88\xac\xe8\x99\xab\xe5\x8f\xaf\xe8\x83\xbd\xe5\xb7\xb2\xe7\xbb\x93\xe6\x9d\x9f\')\n        if error == 10:\n            log.printlog(\'%s-%s-%s- \xe7\x88\xac\xe8\x99\xab\xe5\xb7\xb2\xe7\xbb\x93\xe6\x9d\x9f\' % (spider.__class__.__name__, self.city, self.job))\n            return\n\n    def run(self):\n        spiders = []\n\n        if \'51\' in self.type:\n            spiders.append(SpiderMeta.spiders[0]())\n        if \'qilu\' in self.type:\n            spiders.append(SpiderMeta.spiders[1]())\n        if \'baidu\' in self.type:\n            spiders.append(SpiderMeta.spiders[2]())\n\n        spider_count = len(spiders)\n        threads = []\n        for i in range(spider_count):\n            t = Thread(target=self.iter_spider, args=(spiders[i],))\n            t.setDaemon(True)\n            t.start()\n            threads.append(t)\n        while True:\n            if len([True for i in threads if i.is_alive() == False]) == spider_count:\n                break\n\n            time.sleep(2)\n\n        # return\n\n\nclass WriterProcess(Process):\n    """"""\xe5\x86\x99\xe6\x95\xb0\xe6\x8d\xae\xe8\xbf\x9b\xe7\xa8\x8b""""""\n\n    def __init__(self, data_queue, number, type=None):\n        Process.__init__(self)\n        self.data_queue = data_queue\n        self.type = type\n        self.number = number\n\n    def run(self):\n\n        id = 1\n        with open(\'data/test.csv\', \'a\', encoding=\'utf-8\', newline=\'\') as f:\n            writer = csv.writer(f)\n            while True:\n                if id == self.number + 1:\n                    f.close()\n                    return\n\n                result = self.data_queue.get()\n                if result:\n                    row = [\n                        result.get(\'provider\'), result.get(\'keyword\'), result.get(\'title\'), result.get(\'place\'),\n                        result.get(\'salary\'), result.get(\'experience\'), result.get(\'education\'),\n                        result.get(\'companytype\'), result.get(\'industry\'), result.get(\'description\')\n                    ]\n                    id = id + 1\n                    writer.writerow(row)\n\n\ndef main(dict_parameter):\n    queue = Queue()\n\n\n    jobs = [\'\xe8\xbd\xaf\xe4\xbb\xb6\', \'\xe5\x9b\xbe\xe5\x83\x8f\', \'\xe8\x87\xaa\xe7\x84\xb6\xe8\xaf\xad\xe8\xa8\x80\xe5\xa4\x84\xe7\x90\x86\', \'\xe4\xba\xba\xe5\xb7\xa5\xe6\x99\xba\xe8\x83\xbd\', \'\xe5\xad\xa6\xe4\xb9\xa0\', \'\xe5\x89\x8d\xe7\xab\xaf\', \'\xe5\x90\x8e\xe7\xab\xaf\', \'\xe6\x95\xb0\xe6\x8d\xae\', \'\xe7\xae\x97\xe6\xb3\x95\', \'\xe6\xb5\x8b\xe8\xaf\x95\', \'\xe7\xbd\x91\xe7\xbb\x9c\xe5\xae\x89\xe5\x85\xa8\', \'\xe8\xbf\x90\xe7\xbb\xb4\', \'UI\', \'\xe5\x8c\xba\xe5\x9d\x97\xe9\x93\xbe\', \'\xe7\xbd\x91\xe7\xbb\x9c\', \'\xe5\x85\xa8\xe6\xa0\x88\',\n            \'\xe7\xa1\xac\xe4\xbb\xb6\', \'Java\', \'C++\', \'PHP\', \'C#\', \'.NET\', \'Hadoop\', \'Python\', \'Perl\', \'Ruby\', \'Nodejs\', \'Go\', \'Javascript\',\n            \'Delphi\', \'jsp\', \'sql\']\n\n    citys = [\'\xe5\x8c\x97\xe4\xba\xac\', \'\xe6\xb7\xb1\xe5\x9c\xb3\', \'\xe5\xb9\xbf\xe5\xb7\x9e\', \'\xe6\x9d\xad\xe5\xb7\x9e\', \'\xe6\xad\xa6\xe6\xb1\x89\', \'\xe6\x88\x90\xe9\x83\xbd\', \'\xe5\x8d\x97\xe4\xba\xac\', \'\xe8\x8b\x8f\xe5\xb7\x9e\', \'\xe8\xa5\xbf\xe5\xae\x89\', \'\xe9\x95\xbf\xe6\xb2\x99\', \'\xe9\x87\x8d\xe5\xba\x86\', \'\xe5\x90\x88\xe8\x82\xa5\', \'\xe4\xb8\x9c\xe8\x8e\x9e\', \'\xe6\x97\xa0\xe9\x94\xa1\', \'\xe7\xa6\x8f\xe5\xb7\x9e\', \'\xe5\xa4\xa7\xe8\xbf\x9e\', \'\xe5\xae\x81\xe6\xb3\xa2\',\n             \'\xe9\x83\x91\xe5\xb7\x9e\', \'\xe6\xb5\x8e\xe5\x8d\x97\', \'\xe5\xa4\xa9\xe6\xb4\xa5\', \'\xe4\xbd\x9b\xe5\xb1\xb1\', \'\xe6\x98\x86\xe5\xb1\xb1\', \'\xe6\xb2\x88\xe9\x98\xb3\', \'\xe9\x9d\x92\xe5\xb2\x9b\', \'\xe7\x8f\xa0\xe6\xb5\xb7\', \'\xe5\x8e\xa6\xe9\x97\xa8\', \'\xe6\x98\x86\xe6\x98\x8e\', \'\xe5\x8d\x97\xe6\x98\x8c\', \'\xe5\xb8\xb8\xe5\xb7\x9e\', \'\xe4\xb8\xad\xe5\xb1\xb1\', \'\xe5\x8d\x97\xe5\xae\x81\', \'\xe6\x83\xa0\xe5\xb7\x9e\', \'\xe9\x95\xbf\xe6\x98\xa5\', \'\xe5\x93\x88\xe5\xb0\x94\xe6\xbb\xa8\',\n             \'\xe5\x98\x89\xe5\x85\xb4\', \'\xe7\x9f\xb3\xe5\xae\xb6\xe5\xba\x84\', \'\xe8\xb4\xb5\xe9\x98\xb3\', \'\xe5\x8d\x97\xe9\x80\x9a\', \'\xe5\xbc\xa0\xe5\xae\xb6\xe6\xb8\xaf\', \'\xe5\x85\xb0\xe5\xb7\x9e\', \'\xe6\xb5\xb7\xe5\x8f\xa3\', \'\xe6\xb1\x9f\xe9\x97\xa8\', \'\xe6\xb8\xa9\xe5\xb7\x9e\', \'\xe5\xbe\x90\xe5\xb7\x9e\', \'\xe6\x89\xac\xe5\xb7\x9e\', \'\xe5\xa4\xaa\xe5\x8e\x9f\', \'\xe7\x83\x9f\xe5\x8f\xb0\', \'\xe9\x95\x87\xe6\xb1\x9f\', \'\xe6\xb3\x89\xe5\xb7\x9e\', \'\xe5\x94\x90\xe5\xb1\xb1\', \'\xe7\xbb\xb5\xe9\x98\xb3\',\n             \'\xe5\xa4\xaa\xe4\xbb\x93\', \'\xe6\xb4\x9b\xe9\x98\xb3\', \'\xe9\x87\x91\xe5\x8d\x8e\', \'\xe5\x8f\xb0\xe5\xb7\x9e\', \'\xe6\xb9\x96\xe5\xb7\x9e\', \'\xe6\x9f\xb3\xe5\xb7\x9e\', \'\xe5\xa8\x81\xe6\xb5\xb7\', \'\xe8\x8a\x9c\xe6\xb9\x96\', \'\xe4\xb9\x89\xe4\xb9\x8c\', \'\xe4\xbf\x9d\xe5\xae\x9a\', \'\xe6\xb3\xb0\xe5\xb7\x9e\', \'\xe7\xa7\xa6\xe7\x9a\x87\xe5\xb2\x9b\', \'\xe5\x92\xb8\xe9\x98\xb3\', \'\xe6\xa0\xaa\xe6\xb4\xb2\', \'\xe9\x9f\xb6\xe5\x85\xb3\', \'\xe5\xb8\xb8\xe7\x86\x9f\', \'\xe6\xbe\xb3\xe9\x97\xa8\',\n             \'\xe6\xb9\x98\xe6\xbd\xad\', \'\xe5\xae\x9c\xe6\x98\x8c\', \'\xe9\xa6\x99\xe6\xb8\xaf\', \'\xe7\x9b\x90\xe5\x9f\x8e\', \'\xe6\xbd\x8d\xe5\x9d\x8a\', \'\xe8\xa5\x84\xe9\x98\xb3\', \'\xe7\xbb\x8d\xe5\x85\xb4\', \'\xe9\xa9\xac\xe9\x9e\x8d\xe5\xb1\xb1\', \'\xe4\xb8\x89\xe4\xba\x9a\', \'\xe6\xb1\x95\xe5\xa4\xb4\', \'\xe5\xae\xbf\xe8\xbf\x81\', \'\xe9\xb9\xb0\xe6\xbd\xad\', \'\xe4\xb9\x8c\xe9\xb2\x81\xe6\x9c\xa8\xe9\xbd\x90\', \'\xe8\xbf\x9e\xe4\xba\x91\xe6\xb8\xaf\', \'\xe5\x91\xbc\xe5\x92\x8c\xe6\xb5\xa9\xe7\x89\xb9\', \'\xe5\xbe\xb7\xe9\x98\xb3\', \'\xe5\xb2\xb3\xe9\x98\xb3\',\n             \'\xe9\x9d\x96\xe6\xb1\x9f\', \'\xe5\xbb\xb6\xe5\xae\x89\', \'\xe8\x8e\x86\xe7\x94\xb0\', \'\xe6\x96\xb0\xe4\xb9\xa1\', \'\xe6\xa1\x82\xe6\x9e\x97\', \'\xe7\x9b\x98\xe9\x94\xa6\', \'\xe9\x84\x82\xe5\xb7\x9e\', \'\xe6\xbb\x81\xe5\xb7\x9e\', \'\xe7\x8e\x89\xe6\x9e\x97\', \'\xe9\xbb\x84\xe7\x9f\xb3\', \'\xe9\x82\xa2\xe5\x8f\xb0\', \'\xe4\xba\x91\xe6\xb5\xae\', \'\xe5\xa4\xa7\xe7\x90\x86\', \'\xe4\xb9\x9d\xe6\xb1\x9f\', \'\xe8\x87\xaa\xe8\xb4\xa1\', \'\xe6\xb5\x8e\xe5\xae\x81\', \'\xe6\xbc\xb3\xe5\xb7\x9e\', \'\xe6\x8f\xad\xe9\x98\xb3\',\n             \'\xe9\x93\xb6\xe5\xb7\x9d\', \'\xe6\xa2\x85\xe5\xb7\x9e\', \'\xe9\x84\x82\xe5\xb0\x94\xe5\xa4\x9a\xe6\x96\xaf\', \'\xe5\xae\x9c\xe6\x98\xa5\', \'\xe4\xb8\x8a\xe9\xa5\xb6\', \'\xe9\x9e\x8d\xe5\xb1\xb1\', \'\xe6\x9e\xa3\xe5\xba\x84\', \'\xe5\x85\xad\xe5\xae\x89\', \'\xe8\x8d\x86\xe9\x97\xa8\', \'\xe8\xb5\xa3\xe5\xb7\x9e\', \'\xe9\xbe\x99\xe5\xb2\xa9\', \'\xe8\xa5\xbf\xe5\xae\x81\', \'\xe5\xad\x9d\xe6\x84\x9f\', \'\xe5\xbe\xb7\xe5\xb7\x9e\', \'\xe5\x8d\x97\xe5\xb9\xb3\', \'\xe6\xb3\xb0\xe5\xae\x89\', \'\xe8\x8f\x8f\xe6\xb3\xbd\',\n             \'\xe9\x98\x9c\xe9\x98\xb3\', \'\xe6\x8b\x89\xe8\x90\xa8\', \'\xe6\xb8\x85\xe8\xbf\x9c\', \'\xe5\xae\xbf\xe5\xb7\x9e\', \'\xe4\xb8\xbd\xe6\xb0\xb4\', \'\xe9\x93\x9c\xe9\x99\xb5\', \'\xe6\xb9\x9b\xe6\xb1\x9f\', \'\xe6\xb2\xa7\xe5\xb7\x9e\', \'\xe9\xbb\x84\xe5\xb1\xb1\', \'\xe9\x98\xbf\xe5\x85\x8b\xe8\x8b\x8f\', \'\xe8\x88\x9f\xe5\xb1\xb1\', \'\xe5\xae\x89\xe5\xba\x86\', \'\xe4\xb8\xb4\xe6\xb2\x82\', \'\xe8\xa1\xa2\xe5\xb7\x9e\', \'\xe5\x8d\x97\xe9\x98\xb3\', \'\xe8\x82\x87\xe5\xba\x86\', \'\xe9\x9a\x8f\xe5\xb7\x9e\',\n             \'\xe5\x90\x89\xe5\xae\x89\', \'\xe5\x85\xb4\xe5\xae\x89\xe7\x9b\x9f\', \'\xe8\x90\x8d\xe4\xb9\xa1\', \'\xe6\x94\x80\xe6\x9e\x9d\xe8\x8a\xb1\', \'\xe6\x89\xbf\xe5\xbe\xb7\', \'\xe4\xb8\x8a\xe6\xb5\xb7\']\n\n\n    if os.path.exists(\'./data/test.csv\'):\n        os.remove(\'./data/test.csv\')\n        os.remove(\'./templates/data.html\')\n    with open(\'data/test.csv\', \'a+\', encoding=\'utf-8\', newline=\'\') as f:\n        writer = csv.writer(f)\n        writer.writerow(\n            [\'provider\', \'keyword\', \'title\', \'place\', \'salary\', \'experience\', \'education\', \'companytype\',\n             \'industry\', \'description\'])\n    total = eval(dict_parameter.get(\'total\'))\n    number = eval(dict_parameter.get(\'number\'))\n    if dict_parameter.get(\'threads\'):\n        threads = True\n    else:\n        threads = None\n    no = 1\n    for city in citys:\n        for job in jobs:\n            if dict_parameter.get(\'time\'):\n                timer.main(beginhour=eval(dict_parameter.get(\'hour\')[0]),\n                           beginminute=eval(dict_parameter.get(\'minute\')[0]))\n            p1 = SpiderProcess(queue, job, city, type=dict_parameter.get(\'type\'), threads=threads)\n            p2 = WriterProcess(queue, number=number)\n            p1.start()\n            p2.start()\n            p2.join()\n            log.printlog(string=city + job + \'\xe7\x88\xac\xe5\x8f\x96\xe5\xae\x8c\xe6\x88\x90\')\n            p1.terminate()\n            if no * number >= total:\n                log.easypush(string=str(total) + \'\xe6\x9d\xa1\xe6\x95\xb0\xe6\x8d\xae\xe7\x88\xac\xe5\x8f\x96\xe5\xae\x8c\xe6\x88\x90\')\n                os.system(\'csvtotable ./data/test.csv ./templates/data.html\')\n                p2.terminate()\n                return\n            p1.join()\n            no = no + 1\n\n\nif __name__ == \'__main__\':\n    main()\n'"
spider/tool/__init__.py,0,b''
spider/tool/log.py,0,"b""from logging import *\nfrom random import randint\n\nimport requests\n\nglobal logger, hander, console\nlogger = getLogger(__name__)\nhander = FileHandler('temp.txt')\n\nlogger.setLevel(INFO)\nhander.setLevel(INFO)\n\nformmatter = Formatter('%(asctime)s %(message)s')\nhander.setFormatter(formmatter)\nlogger.addHandler(hander)\n\n\ndef push(string='', text=''):\n    text = 'ID ' + str(randint(0, 999)) + '  ' + text\n    url = 'https://pushbear.ftqq.com/sub'\n    data = {'sendkey': '5106-f0e4971ad40f466108ec2cb182fb7640', 'text': string, 'desp': text}\n    requests.post(url=url, data=data)\n\n\ndef printlog(string='', text='', filename=''):\n    print(string + text)\n\n\ndef easypush(string, filename='', text='', ):\n    print(string + text)\n    push(string=string, text=text)\n\n\nif __name__ == '__main__':\n    easypush(string='\xe6\x88\x91\xe7\x88\xb1\xe4\xbd\xa0\xe5\x95\x8a', filename='log', text='emmm')\n"""
spider/tool/timer.py,0,"b""import datetime\nimport time\n\n\n# beginhour beginminute\xe5\xbc\x80\xe5\xa7\x8b\xe6\x97\xb6\xe9\x97\xb4  overhour overminute\xe7\xbb\x93\xe6\x9d\x9f\xe6\x97\xb6\xe9\x97\xb4  wait sleep\xe6\xa3\x80\xe6\xb5\x8b\xe6\x97\xb6\xe9\x97\xb4\xe9\xa2\x91\xe7\x8e\x87\ndef main(beginhour=0, overhour=0, beginminute=0, overminute=0, wait=5):\n    if overhour == 0 and overminute == 0:\n        while True:\n            now = datetime.datetime.now()\n            if now.hour == beginhour and now.minute == beginminute:  # \xe5\x88\xb0\xe8\xbe\xbe\xe8\xae\xbe\xe5\xae\x9a\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x8c\xe8\xbf\x9b\xe5\x85\xa5\xe5\x87\xbd\xe6\x95\xb0\xe5\xa4\x96\xe5\xbe\xaa\xe7\x8e\xaf\n                break\n            time.sleep(wait)  # \xe7\xad\x89\xe5\x87\xa0\xe7\xa7\x92\xe5\x90\x8e\xe6\xa3\x80\xe6\xb5\x8b\n        return\n    else:\n        now = datetime.datetime.now()\n        if now.hour == overhour and now.minute == overminute:\n            while True:\n                now = datetime.datetime.now()\n                if now.hour == beginhour and now.minute == beginminute:\n                    break\n                time.sleep(wait)\n        else:\n            return\n\n\nif __name__ == '__main__':\n    for i in range(500):\n        time.sleep(2)\n        print(i)\n        main(beginhour=22, beginminute=34, overhour=22, overminute=35)\n"""
