file_path,api_count,code
tools/check_circular.py,0,"b'#!/usr/bin/env python\n\nimport os\nimport sys\nimport networkx as nx\n\ndef build_graph(path):\n    graph = nx.DiGraph()\n    for f in os.listdir(path):\n        graph.add_node(f)\n        cnt = 0\n        with open(path+""/""+f) as fp:\n            line = fp.readline()\n            enter_include = False\n            exit_include = False\n            while line and not exit_include:\n                if line.startswith(\'#include ""\'):\n                    enter_include = True\n                    node = line.split()[1].replace(\'""\', \'\')\n                    graph.add_node(node)\n                    graph.add_edge(f, node)\n                elif enter_include:\n                    exit_include = True\n                line = fp.readline()\n    return graph\n\ndef main():\n    graph = build_graph(""../include/xtensor"")\n    cycle = list(nx.simple_cycles(graph))\n    for x in cycle:\n        print(x)\n    exception_message = \' - \'.join([str(y) for y in cycle])\n    if len(cycle) != 0:\n        raise Exception(\'CircularInclude\', exception_message)\n\nmain()\n'"
docs/source/conf.py,0,"b'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport os\nimport subprocess\n\non_rtd = os.environ.get(\'READTHEDOCS\', None) == \'True\'\n\nif on_rtd:\n    subprocess.call(\'cd ..; doxygen\', shell=True)\n\nimport sphinx_rtd_theme\n\nhtml_theme = ""sphinx_rtd_theme""\n\nhtml_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\n\ndef setup(app):\n    app.add_stylesheet(""main_stylesheet.css"")\n\nextensions = [\'breathe\']\nbreathe_projects = { \'xtensor\': \'../xml\' }\ntemplates_path = [\'_templates\']\nhtml_static_path = [\'_static\']\nsource_suffix = \'.rst\'\nmaster_doc = \'index\'\nproject = \'xtensor\'\ncopyright = \'2016, Johan Mabille, Sylvain Corlay and Wolf Vollprecht\'\nauthor = \'Johan Mabille, Sylvain Corlay and Wolf Vollprecht\'\n\nhtml_logo = \'quantstack-white.svg\'\n\nexclude_patterns = []\nhighlight_language = \'c++\'\npygments_style = \'sphinx\'\ntodo_include_todos = False\nhtmlhelp_basename = \'xtensordoc\'\n\nhtml_js_files = [\n    \'goatcounter.js\'\n]\n'"
test/files/generate.py,0,"b'#!/usr/bin/env python3\n\nimport glob\n\nfs = glob.glob(""xio_expected_results/*.txt"")\n\ninclude_file = ""#include <string>\\n\\n""\n\nfor f in fs:\n\twith open(f) as ff:\n\t\tctn = ff.read()\n\t\tn = f.split(""/"")[1]\n\t\tinclude_file += ""static std::string {} = R\\""xio({})xio\\"";\\n\\n\\n"".format(n[:-4], ctn)\n\nwith open(""xio_expected_results.hpp"", ""w+"") as fo:\n\tfo.write(include_file)'"
test/files/preprocess.py,2,"b'import glob\nimport os\nimport re\nimport sys\nimport numpy as np\n\nmy_path = os.path.dirname(os.path.realpath(__file__))\ncppy_files = glob.glob(my_path + \'/cppy_source/*.cppy\')\n\ndtype_map = {\n    \'bool\': \'bool\',\n    \'float32\': \'float\',\n    \'float64\': \'double\',\n    \'int32\': \'int\',\n    \'int64\': \'long\',\n    \'uint32\': \'unsigned int\',\n    \'uint64\': \'unsigned long\',\n    \'complex64\': \'std::complex<float>\',\n    \'complex128\': \'std::complex<double>\',\n}\n\ndef get_xtype(arr, xtensor=False):\n    if isinstance(arr, (int)):\n        return ""int""\n    elif isinstance(arr, float):\n        return ""double""\n\n    if xtensor:\n        s = ""xtensor<"" + dtype_map[str(arr.dtype)] + "", "" + str(arr.ndim) + "">""\n    else:\n        s = ""xarray<"" + dtype_map[str(arr.dtype)] + "">""\n    return s\n\ndef get_cpp_initlist(arr, name):\n    if isinstance(arr, (int, str, float)):\n        return get_xtype(arr) + "" "" + name + "" = "" + str(arr) + \';\'\n    name = get_xtype(arr) + "" "" + name\n    s = np.array2string(arr, separator=\',\', precision=16)\n    s = s.replace(\'[\', \'{\')\n    s = s.replace(\']\', \'}\')\n    s = s.replace(\'j\', \'i\')\n    s += \';\'\n    s = s.replace(""\\n"", ""\\n"" + "" "" * (len(name) + 3))\n    s = name + "" = "" + s\n    return s\n\n\n\ndef translate_file(contents, f):\n\tcurrent_vars = {}\n\n\tmatches = re.findall(r""\\/\\*py.*?\\*\\/"", contents, re.MULTILINE | re.DOTALL)\n\n\tdef exec_comment(txt, upper_level=False):\n\t\tlines = txt.split(\'\\n\')\n\t\tif upper_level:\n\t\t\ttxt = \'\\n\'.join([""import numpy as np""] + [x.strip() for x in lines[1:-1]])\n\t\tlocals_before = list(locals().keys())\n\t\texec(txt, globals(), current_vars)\n\t\tcurrent_vars.update(\n\t\t\t{x: val for x, val in locals().items() if x not in locals_before}\n\t\t)\n\n\tresult_file = """"\n\n\tidx = 0\n\tlidx = 0\n\tfor line in contents.split(\'\\n\'):\n\t\tif lidx == 8:\n\t\t\tf = os.path.split(f)[1]\n\t\t\tresult_file += ""// This file is generated from test/files/cppy_source/{} by preprocess.py!"".format(f) + \'\\n\\n\'\n\t\tlstrip = line.lstrip()\n\t\tif lstrip.startswith(""/*py""):\n\t\t\texec_comment(matches[idx], True)\n\t\t\tidx += 1\n\t\tif lstrip.startswith(""// py_""):\n\t\t\tindent_n = len(line) - len(lstrip)\n\t\t\tif \'=\' in lstrip:\n\t\t\t\texec_comment(lstrip[6:])\n\t\t\t\tvar = line.strip()[6:lstrip.index(\'=\')].strip()\n\t\t\telse:\n\t\t\t\tvar = line.strip()[6:]\n\t\t\tindent = line[:indent_n]\n\t\t\tinit_list = get_cpp_initlist(current_vars[var], \'py_\' + var)\n\t\t\tinit_list = \'\\n\'.join([indent + x for x in init_list.split(\'\\n\')])\n\t\t\tresult_file += line + \'\\n\'\n\t\t\tresult_file += init_list + \'\\n\'\n\t\telse:\n\t\t\tresult_file += line + \'\\n\'\n\t\tlidx += 1\n\treturn result_file\n\nprint(""::: PREPROCESSING :::\\n"")\n\nfor f in cppy_files:\n\tprint("" - PROCESSING {}"".format(f))\n\n\tglobal current_vars\n\tcurrent_vars = {}  # reset\n\n\twith open(f) as fi:\n\t\tcontents = fi.read()\n\n\t# reset global seed\n\tnp.random.seed(42)\n\tresult = translate_file(contents, f)\n\tf_result = os.path.split(f)[1]\n\twith open(my_path + ""/../"" + f_result[:-1], \'w+\') as fo:\n\t\tfo.write(result)\n\tprint(""::: DONE :::"")\n\t# print(result)\n'"
