file_path,api_count,code
test.py,14,"b""import unittest\nimport numpy as np\n\ntry:\n    import examples\nexcept ImportError:\n    raise ImportError('Could not import the examples module. Did you run make?')\n\n\nclass TestExamples(unittest.TestCase):\n    '''\n    Tests for the examples module.\n\n    '''\n    def test_vector_multiplication(self):\n        a = np.array([[1., 2., 3.]])\n        b = a.reshape(3, 1)\n        self.assertEqual(np.equal(examples.mul(a, b), a.dot(b)).all(), True)\n\n    def test_matrix_squaring(self):\n        a = np.array([[1., 2., 3.],\n                      [4., 5., 6.],\n                      [7., 8., 9.]])\n        self.assertEqual(np.equal(examples.mul(a, a), a.dot(a)).all(), True)\n\n    def test_matrix_multiplication(self):\n        a = np.array([[1., 2., 3., 4.],\n                      [4., 3., 2., 1.]])\n        b = np.array([[ 1., 0.],\n                      [ 2., 3.],\n                      [ 4., 4.],\n                      [-1., 2.]])\n        self.assertEqual(np.equal(examples.mul(a, b), a.dot(b)).all(), True)\n\n    def test_identity_multiplication(self):\n        eye = np.eye(3)\n        a = np.random.random((3, 3)) * 10\n        self.assertEqual(np.equal(examples.mul(eye, a),\n                                  examples.mul(a, eye)).all(), True)\n        self.assertEqual(np.equal(examples.mul(eye, a), eye.dot(a)).all(), True)\n\n    def test_binarization(self):\n        image = np.ones((8, 8), dtype=np.uint8) * 128 # Grayscale\n        image[4:6, 4:6] = 126\n        expected = np.ones((8, 8), dtype=np.uint8) * 255\n        expected[4:6, 4:6] = 0\n        binarized = examples.binarize(image, 127)\n        self.assertTrue(np.equal(expected, binarized).all())\n\n\nif __name__ == '__main__':\n    unittest.main()\n"""
