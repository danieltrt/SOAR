file_path,api_count,code
Spiro_beat_the_model.py,2,"b'from keras.datasets import mnist\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.layers import Flatten\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.utils import np_utils\nfrom keras import backend as K\nfrom keras.models import load_model\nimport random as r\nimport pickle as p\nimport numpy as np\nfrom PIL import Image\n\n\nmodel = load_model(\'Spiral_Model-84.38-1020053228.h5\')\ndata = p.load(open(""train_model/picarray.pickle"", ""rb""))\nrepeats = int(input(""How many tests? ""))\nrandpics=[]\nfor repeat in range(1,repeats+1):\n    randpics.append(data[r.randint(0, len(data)-1)])\npredictions = model.predict(np.array([pic[0] for pic in randpics]))\n#randpics = [[[value*255 for value in row] for row in randpic[0]] for randpic in randpics]]\nguesses=[]\nguesscorrect = 0\n\nfor i in range(len(randpics)):\n    print (""\\nTEST"",i+1,""/"",repeats)\n    img = Image.fromarray(np.uint8(randpics[i][0][0]*255), mode=""L"")#(randpics[0][0])*255)\n    img.show()\n    guess = True if int(input(""Parkinsons? "")) else False\n    if guess==bool(randpics[i][1]):\n        guesscorrect+=1\n    guesses.append(guess)\n    print (""The answer was"",bool(randpics[i][1]))\n    print (""The GUESS was"",guess)\n    boolp = True if round(predictions[i][0]) else False\n    print (""The PREDICTION was"",boolp,""("",predictions[i][0],"")"")\n    print(""\\n----"")\n\nprint(""*****************"")\nprint(""*****************"")\nprint(""Your Accuracy:"",round(guesscorrect/repeats*100,2),""%"")\nprint(""Model\'s Accuracy:"",round((sum([round(predictions[i][0])==randpics[i][1] for i in range(repeats)])/repeats*100),2),""%"")\nprint(""*****************"")\nprint(""*****************"")\n'"
app.py,5,"b'#!flask/bin/python\nfrom flask import Flask, jsonify\nfrom flask import abort\nfrom flask import request\nfrom keras.datasets import mnist\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.layers import Flatten\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.utils import np_utils\nfrom keras import backend as K\nfrom keras.models import load_model\nimport random as r\nimport pickle as p\nimport numpy as np\nfrom PIL import Image\nimport logging\nimport json\nimport matplotlib.pyplot as plt\n\napp = Flask(__name__)\n\ndata = [\n    {\n        \'id\': 1,\n        \'data\': [1,2,3,4,5],\n        \'output\':3\n    },\n    {\n        \'id\': 2,\n        \'data\': [6,7,8,9,10],\n        \'output\':8\n    }\n]\n\n@app.route(\'/spiro/data\', methods=[\'GET\'])\ndef get_spiro_data():\n    return jsonify({\'data\': data})\n\n@app.route(\'/spiro/data/<int:data_id>\', methods=[\'GET\'])\ndef get_spiro_data2(data_id):\n    d = [d for d in data if d[\'id\'] == int(data_id)]\n    if len(d) == 0:\n        abort(404)\n    return jsonify({\'data\': d[0]})\n\ndef predict_data(a):\n    model = load_model(\'Spiral_Model-96.88-1021094522.h5\')\n    x, y = np.array(a).T\n    x = list(map(lambda x_i:(x_i-480)*2/3, x))\n    y = list(map(lambda y_i:(y_i-480)*2/3, y))\n    plt.plot(x, y, ""ko-"", linewidth=5, markersize=0)\n    plt.axis([-300, 300, 300, -300])\n    plt.axis(""off"")\n    fig = plt.gcf()\n    fig.set_size_inches(5,5)\n    fig.savefig(""thisisarequestimg.png"", dpi=25)\n    plt.clf()\n    img_a = np.asarray(Image.open(""thisisarequestimg.png""))\n    img_a = [list(map(lambda rgbx: (rgbx[0] * 299.0/1000 + rgbx[1] * 587.0/1000 + rgbx[2] * 114.0/1000)/255, row)) for row in img_a]\n    logging.warning(np.array([np.array(img_a)]).shape)\n    logging.warning(np.array([np.array([np.array(img_a)])]).shape)\n    return model.predict(np.array([np.array([np.array(img_a)])]))\n\n@app.route(\'/spiro/data\', methods=[\'POST\'])\ndef add_data():\n    if not request.form:\n        abort(400)\n    pt_list = [[float(coord.strip(""( )"")) for coord in pt.split("","")] for pt in request.form.getlist(""data[]"")]\n    new_data = {\n        \'id\': data[-1][\'id\'] + 1,\n        \'data\': pt_list\n    }\n    logging.warning(new_data[\'data\'])\n    prediction = predict_data(new_data[\'data\'])\n    new_data[\'output\'] = prediction\n    data.append(new_data)\n    return str(data), 201 #added prediction[0][0]\n\n@app.route(\'/\')\ndef index():\n    return ""Hey rasvik!""\n\nif __name__ == \'__main__\':\n    app.run(debug=True)\n'"
train_model/clean_data.py,2,"b'import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nfrom PIL import Image\nimport pickle as p\n\nos.chdir(""PARKINSON_HW/hw_dataset"")\n\nfor datatype in [""control"", ""parkinson"", ""../new_dataset/parkinson""]:\n    for datafile in os.listdir(datatype):\n        if datafile==""train_model"":\n            continue\n        df = pd.read_csv(datatype+""/""+datafile, sep="";"", names=[""X"", ""Y"", ""Z"", ""Pressure"", ""GripAngle"", ""Timestamp"", ""Test ID""])\n        df = df.loc[df[""Test ID""] == 0][[""X"",""Y""]]\n        if not len(df):\n            continue\n        center_val = df.iloc[0]\n\n        df[""X""] = [value-center_val[0] for value in df[""X""]]\n        df[""Y""] = [-value+center_val[1] for value in df[""Y""]]\n        plt.plot(df[""X""], df[""Y""], ""ko-"", linewidth=5, markersize=0)\n        plt.axis([-300, 300, 300, -300])\n        #plt.show()\n        plt.axis(""off"")\n        fig = plt.gcf()\n        fig.set_size_inches(5,5)\n        fig.savefig(""../../pictures/""+datafile.split(""."")[0]+"".png"", dpi=25)\n        plt.clf()\nos.chdir(""../.."")\n\npicarray = []\nfor pic in os.listdir(""pictures""):\n    a = np.asarray(Image.open(""pictures/""+pic))\n    a = [[list(map(lambda rgbx: (rgbx[0] * 299.0/1000 + rgbx[1] * 587.0/1000 + rgbx[2] * 114.0/1000)/255, row)) for row in a]]\n    a = np.array(a)\n    diseased = False if pic[0]==""C"" else True\n    picarray.append([a, diseased])\n    print(pic, a.shape)\np.dump( picarray, open( ""train_model/picarray.pickle"", ""wb"" ) )\n'"
train_model/train_model.py,0,"b'import numpy\nimport pickle as p\nimport datetime, time\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom keras.datasets import mnist\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.layers import Flatten\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.utils import np_utils\nfrom keras import backend as K\nK.set_image_dim_ordering(\'th\')\n\n# fix random seed for reproducibility\nseed = 7\nnumpy.random.seed(seed)\n\ndata = p.load(open(""train_model/picarray.pickle"", ""rb""))\nX = numpy.array([row[0] for row in data])\ny = numpy.array([row[1] for row in data])\npixel_size = len(X[0][0])\n\nX = X.reshape(X.shape[0], 1, pixel_size, pixel_size).astype(\'float32\')\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\n\nnum_classes = 1\n\ndef baseline_model(convolutions=32, conv_size=10, pool_size=40, dropout=0.2, neurons=128):\n\t# create model\n\tmodel = Sequential()\n\tmodel.add(Conv2D(convolutions, (conv_size, conv_size), input_shape=(1, pixel_size, pixel_size), kernel_initializer=\'random_uniform\', activation=\'relu\'))\n\tmodel.add(MaxPooling2D(pool_size=(pool_size, pool_size)))\n\tmodel.add(Dropout(dropout))\n\tmodel.add(Flatten())\n\tmodel.add(Dense(neurons, activation=\'relu\'))\n\tmodel.add(Dense(num_classes, activation=\'sigmoid\'))\n\t# Compile model\n\tmodel.compile(loss=\'binary_crossentropy\', optimizer=\'adam\', metrics=[\'accuracy\'])\n\treturn model\n\nmodel = baseline_model()\n# Fit the model\nmodel.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=100, batch_size=20, verbose=2)\n# Final evaluation of the model\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(scores)\nst = datetime.datetime.fromtimestamp(time.time()).strftime(\'%m%d%H%M%S\')\nmodel.save(""Spiral_Model-""+str(round(scores[1]*100,2))+""-""+st+"".h5"")\nprint(""Saved Model:"",""Spiral_Model-""+str(round(scores[1]*100,2))+""-""+st+"".h5"")\ncm = confusion_matrix(y_test, [int(round(pred[0])) for pred in predictions])\nprint(cm)\n'"
