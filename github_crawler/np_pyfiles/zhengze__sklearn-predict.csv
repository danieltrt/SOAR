file_path,api_count,code
predict.py,2,"b'#!/usr/bin/env python\r\n\r\n#author:zhanghai\r\n#date: 2015-2-1\r\n#filename: predict.py\r\n\r\nimport numpy as np\r\nimport math\r\n#from sklearn.linear_model.ftrl_classifier import FtrlClassifier\r\n#from matplotlib import pylab as plt\r\nfrom sklearn.tree import DecisionTreeRegressor\r\nfrom sklearn.ensemble.gradient_boosting import GradientBoostingRegressor\r\nfrom sklearn.ensemble.forest import RandomForestRegressor,ExtraTreesRegressor\r\nfrom sklearn.preprocessing import StandardScaler\r\nfrom sklearn.svm import SVR\r\nfrom sklearn.metrics import mean_squared_error\r\nimport matplotlib.pyplot as plt\r\nimport pandas as pd\r\nimport xgboost as xgb\r\nimport time\r\nimport click\r\n\r\n\r\ndef get_data(file_name):\r\n    Y_parameters = pd.read_csv(file_name).fillna(-1).drop(""day"",axis=1).values.ravel()\r\n    X_parameters = [ [x] for x in range(len(Y_parameters))]\r\n    return X_parameters, Y_parameters\r\n\r\n\r\n@click.command()\r\n@click.option(\'--train\', default=0, help=\'train size(day).\')\r\n@click.option(\'--test\', default=0, help=\'test size(day).\')\r\n@click.option(\'--filepath\', help=\'file path.\')\r\ndef main(train, test, filepath):\r\n    if not filepath:\r\n        click.echo(""need filepath"")\r\n        return \r\n\r\n    X, Y = get_data(filepath)\r\n\r\n    if not train or not test:\r\n        click.echo(""need train or test size"")\r\n        return \r\n\r\n    TRAIN_SIZE = 96*int(train)\r\n    TEST_SIZE = 96*int(test)\r\n\r\n    X_train = X[:TRAIN_SIZE]\r\n    Y_train = Y[:TRAIN_SIZE]\r\n    X_test = X[TRAIN_SIZE:]\r\n    Y_test = Y[TRAIN_SIZE:]\r\n\r\n    #clf = SVR(kernel=\'rbf\', C=1e3, gamma=0.00001)\r\n    clf = GradientBoostingRegressor(n_estimators=100,max_depth=1)\r\n    #clf = DecisionTreeRegressor(max_depth=25)\r\n    #clf = ExtraTreesRegressor(n_estimators=2000,max_depth=14)\r\n    #clf = xgb.XGBRegressor(n_estimators=2000,max_depth=25)\r\n    #clf = RandomForestRegressor(n_estimators=1000,max_depth=26,n_jobs=7)\r\n\r\n    #clf.fit(X_train,Y_train)\r\n    #y_pred = clf.predict(X_test)\r\n    #plt.plot(X_test, y_pred, linestyle=\'-\', color=\'red\') \r\n    predict_list = []\r\n    for i in range(TEST_SIZE):\r\n        X = [ [x] for x in range(i, TRAIN_SIZE+i)]\r\n        clf.fit(X, Y[i:TRAIN_SIZE+i])\r\n        y_pred = clf.predict(np.array([TRAIN_SIZE+1+i]).reshape(1, -1))\r\n        predict_list.append(y_pred)\r\n\r\n    #print(""mean_squared_error:%s""%mean_squared_error(Y_test, predict_list))\r\n    #print(""sqrt of mean_squared_error:%s""%np.sqrt(mean_squared_error(Y_test, predict_list)))\r\n    origin_data = Y_test\r\n    #print(""origin data:%s""%origin_data)\r\n    plt.plot([ x for x in range(TRAIN_SIZE+1, TRAIN_SIZE+TEST_SIZE+1)], predict_list, linestyle=\'-\', color=\'red\', label=\'prediction model\')  \r\n    plt.plot(X_test, Y_test, linestyle=\'-\', color=\'blue\', label=\'actual model\') \r\n    plt.legend(loc=1, prop={\'size\': 12})\r\n    plt.show()\r\n\r\n\r\nif __name__ == ""__main__"":\r\n    start = time.perf_counter()\r\n    main()\r\n    end = time.perf_counter()\r\n    run_time = end - start\r\n    \r\n    print(""The program run time:%s""%run_time)\r\n    \r\n'"
