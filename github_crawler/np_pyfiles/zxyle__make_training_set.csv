file_path,api_count,code
load_dataset.py,0,"b'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# Author: Zheng <zxyful@gmail.com>\n# Desc: \xe5\x8a\xa0\xe8\xbd\xbd\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\n\nimport pickle\nimport random\n\nfrom PIL import Image\n\nwith open(""./output/data_batch_1"", \'rb\') as f:\n    entry = pickle.load(f, encoding=\'utf-8\')\n    shape = entry.get(""shape"")\n\n    # \xe9\x9a\x8f\xe6\x9c\xba\xe4\xbb\x8e\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe4\xb8\xad\xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\x80\xe5\xbc\xa0\xe5\x9b\xbe\xe7\x89\x87\xef\xbc\x8c\xe6\x98\xbe\xe7\xa4\xba\xe5\xae\x83\xe4\xb8\x8e\xe5\xae\x83\xe7\x9a\x84\xe6\xa0\x87\xe7\xad\xbe\n    random_num = random.randint(0, len(entry.get(""data"")) - 1)\n    data = entry.get(""data"")[random_num].reshape(shape)\n    label = entry.get(""filenames"")[random_num].split(""_"")[0]\n    print(""\xe6\xa0\x87\xe7\xad\xbe: {}"".format(label))\n    Image.fromarray(data).show()\n'"
make_dataset.py,3,"b'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# Author: Zheng <zxyful@gmail.com>\n# Desc: \xe5\x88\xb6\xe4\xbd\x9c\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\n\nimport glob\nimport os\nimport pickle\nimport string\nfrom pprint import pprint\n\nimport numpy as np\nfrom PIL import Image\n\n# \xe5\xb0\x8f\xe5\x86\x99\xe5\xad\x97\xe6\xaf\x8d + \xe6\x95\xb0\xe5\xad\x97\ncharacters = string.digits + string.ascii_lowercase\n\n# \xe7\x9b\xae\xe6\xa0\x87\xe5\x9b\xbe\xe7\x89\x87\xe5\x88\x86\xe8\xbe\xa8\xe7\x8e\x87 \xe9\x95\xbf*\xe5\xae\xbd(\xe5\xa6\x82\xe4\xb8\x8d\xe5\x90\x8c, \xe9\x9c\x80\xe4\xbf\xae\xe6\x94\xb9)\ntarget_pixel = (160, 70)\n\n# \xe6\x95\xb0\xe6\x8d\xae\xe7\xbb\x93\xe6\x9e\x84\ndata_set = {\n    ""batch_label"": ""pictures"",  # \xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe6\x8f\x8f\xe8\xbf\xb0\xe4\xbf\xa1\xe6\x81\xaf\n    ""labels"": None,             # \xe7\x94\xb1\xe5\x9b\xbe\xe7\x89\x87\xe6\xa0\x87\xe7\xad\xbe\xe7\xbb\x84\xe6\x88\x90\xe7\x9a\x84\xe5\x88\x97\xe8\xa1\xa8 [\'abcd\', \'defg\',]\n    ""data"": None,               # \xe7\x94\xb1 numpy.ndarray\xe5\xaf\xb9\xe8\xb1\xa1 \xe7\xbb\x84\xe6\x88\x90\xe7\x9a\x84\xe5\x88\x97\xe8\xa1\xa8\n    ""filenames"": None,          # \xe7\x94\xb1\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\xbb\x84\xe6\x88\x90\xe7\x9a\x84\xe5\x88\x97\xe8\xa1\xa8 [\'abcd.jpg\', \'efgh.jpg\',]\n    ""shape"": (),                # \xe5\x9b\xbe\xe7\x89\x87\xe7\xbb\xb4\xe5\xba\xa6\xe4\xbf\xa1\xe6\x81\xaf\n}\n\nlabels = []\ndata = []\nfilenames = []\n\n# \xe9\x81\x8d\xe5\x8e\x86\xe7\x9b\xae\xe5\xbd\x95\xe5\x86\x85\xe7\x9a\x84\xe6\xaf\x8f\xe4\xb8\x80\xe5\xbc\xa0\xe5\x9b\xbe\xe7\x89\x87,\xe5\xb9\xb6\xe5\xa4\x84\xe7\x90\x86\xe5\xae\x83\xe4\xbb\xac\ncount = 0\nfor infile in glob.glob(""./pics/*.jpg""):\n    filename = os.path.basename(infile)\n    filename = filename.lower()\n\n    try:\n        image = Image.open(infile)\n    except OSError:\n        print(""\xe5\x9b\xbe\xe7\x89\x87\xe9\x94\x99\xe8\xaf\xaf."")\n        continue\n    else:\n        count += 1\n\n    width, height = image.size\n    if image.size != target_pixel:\n        print(""\xe5\x88\x86\xe8\xbe\xa8\xe7\x8e\x87\xe4\xb8\x8d\xe5\x8c\xb9\xe9\x85\x8d,\xe5\xb0\x86\xe5\xbf\xbd\xe7\x95\xa5."")\n        continue\n\n    # \xe4\xbb\x8e\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe4\xb8\x8a\xe8\x8e\xb7\xe5\x8f\x96\xe5\x9b\xbe\xe7\x89\x87\xe7\x9a\x84\xe6\xa0\x87\xe7\xad\xbe(label)\n    label = str(filename).split(""_"")[0]\n\n    # print(image.mode)   # RGBA A:Alpha\xe7\x9a\x84\xe8\x89\xb2\xe5\xbd\xa9\xe7\xa9\xba\xe9\x97\xb4\xef\xbc\x8c\xe4\xb9\x9f\xe5\xb0\xb1\xe6\x98\xaf\xe9\x80\x8f\xe6\x98\x8e\xe5\xba\xa6/\xe4\xb8\x8d\xe9\x80\x8f\xe6\x98\x8e\xe5\xba\xa6\n    if image.mode != ""RGB"":\n        image = image.convert(""RGB"")\n\n    # \xe6\x9b\xb4\xe6\x96\xb0\xe6\x95\xb0\xe6\x8d\xae\xe7\xbb\x93\xe6\x9e\x84\xe7\x9a\x84\xe7\xba\xac\xe5\xba\xa6\xe4\xbf\xa1\xe6\x81\xaf\n    shape = np.array(image).shape\n    data_set.update({""shape"": shape})\n\n    # \xe5\xb0\x86\xe5\x9b\xbe\xe7\x89\x87\xe8\xbd\xac\xe6\x8d\xa2\xe6\x88\x901 * shape\xe7\x9f\xa9\xe9\x98\xb5\n    data.append(np.array(image).reshape([shape[0] * shape[1] * shape[2]]))\n\n    # \xe7\x94\x9f\xe6\x88\x904 * len(characters)\xe7\x9a\x84\xe9\x9b\xb6\xe7\x9f\xa9\xe9\x98\xb5\n    y = np.zeros([4, len(characters)], dtype=np.uint8)\n\n    # one-hot\xe7\xbc\x96\xe7\xa0\x81\n    for j, ch in enumerate(label):\n        print(ch)\n        y[j][characters.find(ch)] = 1\n    labels.append(y)\n\n    filenames.append(str(filename))\n\n# \xe7\xbb\x84\xe8\xa3\x85\xe6\x88\x90\xe5\xae\x8c\xe6\x95\xb4\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe7\xbb\x93\xe6\x9e\x84\ndata_set.update({""labels"": labels, ""data"": data, ""filenames"": filenames})\n\n# \xe5\x86\x99\xe5\x85\xa5\xe4\xba\x8c\xe8\xbf\x9b\xe5\x88\xb6\xe6\x96\x87\xe4\xbb\xb6\npprint(data_set)\nwith open(\'./output/data_batch_1\', \'wb\') as f:\n    pickle.dump(data_set, f)\n'"
