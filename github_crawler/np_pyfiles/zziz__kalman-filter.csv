file_path,api_count,code
kalman-filter.py,21,"b'import numpy as np\n\nclass KalmanFilter(object):\n    def __init__(self, F = None, B = None, H = None, Q = None, R = None, P = None, x0 = None):\n\n        if(F is None or H is None):\n            raise ValueError(""Set proper system dynamics."")\n\n        self.n = F.shape[1]\n        self.m = H.shape[1]\n\n        self.F = F\n        self.H = H\n        self.B = 0 if B is None else B\n        self.Q = np.eye(self.n) if Q is None else Q\n        self.R = np.eye(self.n) if R is None else R\n        self.P = np.eye(self.n) if P is None else P\n        self.x = np.zeros((self.n, 1)) if x0 is None else x0\n\n    def predict(self, u = 0):\n        self.x = np.dot(self.F, self.x) + np.dot(self.B, u)\n        self.P = np.dot(np.dot(self.F, self.P), self.F.T) + self.Q\n        return self.x\n\n    def update(self, z):\n        y = z - np.dot(self.H, self.x)\n        S = self.R + np.dot(self.H, np.dot(self.P, self.H.T))\n        K = np.dot(np.dot(self.P, self.H.T), np.linalg.inv(S))\n        self.x = self.x + np.dot(K, y)\n        I = np.eye(self.n)\n        self.P = np.dot(np.dot(I - np.dot(K, self.H), self.P), \n        \t(I - np.dot(K, self.H)).T) + np.dot(np.dot(K, self.R), K.T)\n\ndef example():\n\tdt = 1.0/60\n\tF = np.array([[1, dt, 0], [0, 1, dt], [0, 0, 1]])\n\tH = np.array([1, 0, 0]).reshape(1, 3)\n\tQ = np.array([[0.05, 0.05, 0.0], [0.05, 0.05, 0.0], [0.0, 0.0, 0.0]])\n\tR = np.array([0.5]).reshape(1, 1)\n\n\tx = np.linspace(-10, 10, 100)\n\tmeasurements = - (x**2 + 2*x - 2)  + np.random.normal(0, 2, 100)\n\n\tkf = KalmanFilter(F = F, H = H, Q = Q, R = R)\n\tpredictions = []\n\n\tfor z in measurements:\n\t\tpredictions.append(np.dot(H,  kf.predict())[0])\n\t\tkf.update(z)\n\n\timport matplotlib.pyplot as plt\n\tplt.plot(range(len(measurements)), measurements, label = \'Measurements\')\n\tplt.plot(range(len(predictions)), np.array(predictions), label = \'Kalman Filter Prediction\')\n\tplt.legend()\n\tplt.show()\n\nif __name__ == \'__main__\':\n    example()\n'"
