file_path,api_count,code
code/taxi_drivers.py,0,"b""'''This is the model for taxi drivers dataset'''\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.autograd import Variable\n\nclass Model(nn.Module):\n    def __init__(self, config):\n        super(Model, self).__init__()\n        self.hidden_size = 128\n        self.bi = 1\n        self.lstm = nn.LSTM(config.get('features'),self.hidden_size,1,dropout=0.1,bidirectional=self.bi-1,batch_first=True)\n        self.lstm2 = nn.LSTM(self.hidden_size,self.hidden_size // 4,1,dropout=0.1,bidirectional=self.bi-1,batch_first=True)\n        self.dense = nn.Linear(self.hidden_size // 4, config.get('forecast_horizon'))\n        self.loss_fn = nn.MSELoss()\n\n    def forward(self, x, batch_size=100):\n        hidden = self.init_hidden(batch_size))\n        output, _ = self.lstm(x, hidden)\n        output = F.dropout(output, p=0.5, training=True)\n        state = self.init_hidden2(batch_size)\n        output, state = self.lstm2(output, state)\n        output = F.dropout(output, p=0.5, training=True)\n        output = self.dense(state[0].squeeze(0))\n\n        return output\n\n    def init_hidden(self, batch_size):\n        h0 = Variable(torch.zeros(self.bi, batch_size, self.hidden_size))\n        c0 = Variable(torch.zeros(self.bi, batch_size, self.hidden_size))\n        return h0, c0\n\n    def init_hidden2(self, batch_size):\n        h0 = Variable(torch.zeros(self.bi, batch_size, self.hidden_size//4))\n        c0 = Variable(torch.zeros(self.bi, batch_size, self.hidden_size//4))\n        return h0, c0\n\n    def loss(self, pred, truth):\n        return self.loss_fn(pred, truth)\n"""
