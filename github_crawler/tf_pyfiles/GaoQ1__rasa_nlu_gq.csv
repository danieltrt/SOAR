file_path,api_count,code
setup.py,0,"b'import io\nimport os\n\nfrom setuptools import setup, find_packages\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\n# Avoids IDE errors, but actual version is read from version.py\n__version__ = None\nwith open(""version.py"") as f:\n    exec(f.read())\n\n# Get the long description from the README file\nwith io.open(os.path.join(here, \'README.md\'), encoding=\'utf-8\') as f:\n    long_description = f.read()\n\ninstall_requires = [\n    ""rasa~=1.1.3"",\n    ""jieba~=0.39"",\n    ""bert-serving-client==1.8.9"",\n    ""tensorflow==1.15.2"",\n    ""kashgari-tf~=0.5.3""\n]\n\nsetup(\n    name=\'rasa-nlu-gao\',\n    packages=find_packages(),\n    version=__version__,\n    install_requires=install_requires,\n    include_package_data=True,\n    description=""Rasa NLU addons a natural language parser for bots"",\n    long_description=long_description,\n    long_description_content_type=""text/markdown"",\n    author=\'Gao Quan\',\n    author_email=\'gaoquan199035@gmail.com\',\n    maintainer=""Gao Quan"",\n    maintainer_email=""gaoquan199035@gmail.com"",\n    license=\'Apache 2.0\',\n    url=""https://rasa.com"",\n    keywords=""nlp machine-learning machine-learning-library bot bots ""\n             ""botkit rasa conversational-agents conversational-ai chatbot""\n             ""chatbot-framework bot-framework"",\n    download_url=""https://github.com/GaoQ1/rasa_nlu_gq/archive/{}.tar.gz""\n                 """".format(__version__),\n    project_urls={\n        \'Bug Reports\': \'https://github.com/GaoQ1/rasa_nlu_gq/issues\',\n        \'Source\': \'https://github.com/GaoQ1/rasa_nlu_gq\',\n    },\n)\n'"
version.py,0,"b'__version__ = ""v1.0.3""\n'"
rasa_nlu_gao/__init__.py,0,b''
rasa_nlu_gao/classifiers/__init__.py,0,"b'from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\n# How many intents are at max put into the output intent\n# ranking, everything else will be cut off\nINTENT_RANKING_LENGTH = 10\n'"
rasa_nlu_gao/classifiers/embedding_bert_intent_classifier.py,28,"b'from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nimport io\nimport logging\nimport os\nfrom tqdm import tqdm\n\nimport typing\nfrom typing import List, Text, Any, Optional, Dict\n\nfrom rasa_nlu_gao.classifiers import INTENT_RANKING_LENGTH\nfrom rasa.nlu.components import Component\nfrom multiprocessing import cpu_count\nfrom rasa_nlu_gao.models.lenet import conv_net\nfrom rasa.utils.common import is_logging_disabled\nimport numpy as np\n\ntry:\n    import cPickle as pickle\nexcept ImportError:\n    import pickle\n\nlogger = logging.getLogger(__name__)\n\nif typing.TYPE_CHECKING:\n    import tensorflow as tf\n    from rasa.nlu.config import rasaNLUModelConfig\n    from rasa.nlu.training_data import TrainingData\n    from rasa.nlu.model import Metadata\n    from rasa.nlu.training_data import Message\n\ntry:\n    import tensorflow as tf\nexcept ImportError:\n    tf = None\n\n\nclass EmbeddingBertIntentClassifier(Component):\n    """"""Intent classifier using supervised bert embeddings.""""""\n\n    provides = [""intent"", ""intent_ranking""]\n\n    requires = [""text_features""]\n\n    defaults = {\n        # nn architecture\n        ""num_hidden_layers"": 2,\n        ""hidden_layer_size"": [1024, 256],\n        ""batch_size"": 256,\n        ""epochs"": 300,\n        ""learning_rate"": 0.001,\n\n        # regularization\n        ""C2"": 0.002,\n        ""droprate"": 0.2,\n\n        # flag if tokenize intents\n        ""intent_tokenization_flag"": False,\n        ""intent_split_symbol"": \'_\',\n\n        # visualization of accuracy\n        ""evaluate_every_num_epochs"": 10,  # small values may hurt performance\n        ""evaluate_on_num_examples"": 1000,  # large values may hurt performance\n\n        ""config_proto"": {\n            ""device_count"": cpu_count(),\n            ""inter_op_parallelism_threads"": 0,\n            ""intra_op_parallelism_threads"": 0,\n            ""allow_growth"": True\n        }\n    }\n\n    @classmethod\n    def required_packages(cls):\n        # type: () -> List[Text]\n        return [""tensorflow"", ""numpy""]\n\n    def _load_nn_architecture_params(self):\n        self.num_hidden_layers = self.component_config[\'num_hidden_layers\']\n        self.hidden_layer_size = self.component_config[\'hidden_layer_size\']\n\n        self.batch_size = self.component_config[\'batch_size\']\n        self.epochs = self.component_config[\'epochs\']\n        self.learning_rate = self.component_config[\'learning_rate\']\n\n    def _load_regularization_params(self):\n        self.C2 = self.component_config[\'C2\']\n        self.droprate = self.component_config[\'droprate\']\n\n    def _load_flag_if_tokenize_intents(self):\n        self.intent_tokenization_flag = self.component_config[\'intent_tokenization_flag\']\n        self.intent_split_symbol = self.component_config[\'intent_split_symbol\']\n        if self.intent_tokenization_flag and not self.intent_split_symbol:\n            logger.warning(""intent_split_symbol was not specified, ""\n                           ""so intent tokenization will be ignored"")\n            self.intent_tokenization_flag = False\n\n    def _load_visual_params(self):\n        self.evaluate_every_num_epochs = self.component_config[\'evaluate_every_num_epochs\']\n        if self.evaluate_every_num_epochs < 1:\n            self.evaluate_every_num_epochs = self.epochs\n        self.evaluate_on_num_examples = self.component_config[\'evaluate_on_num_examples\']\n\n    @staticmethod\n    def _check_hidden_layer_sizes(num_layers, layer_size, name=\'\'):\n        num_layers = int(num_layers)\n\n        if num_layers < 0:\n            logger.error(""num_hidden_layers_{} = {} < 0.""\n                         ""Set it to 0"".format(name, num_layers))\n            num_layers = 0\n\n        if isinstance(layer_size, list) and len(layer_size) != num_layers:\n            if len(layer_size) == 0:\n                raise ValueError(""hidden_layer_size_{} = {} ""\n                                 ""is an empty list, ""\n                                 ""while num_hidden_layers_{} = {} > 0""\n                                 """".format(name, layer_size,\n                                           name, num_layers))\n\n            logger.error(""The length of hidden_layer_size_{} = {} ""\n                         ""does not correspond to num_hidden_layers_{} ""\n                         ""= {}. Set hidden_layer_size_{} to ""\n                         ""the first element = {} for all layers""\n                         """".format(name, len(layer_size),\n                                   name, num_layers,\n                                   name, layer_size[0]))\n\n            layer_size = layer_size[0]\n\n        if not isinstance(layer_size, list):\n            layer_size = [layer_size for _ in range(num_layers)]\n\n        return num_layers, layer_size\n\n    @staticmethod\n    def _check_tensorflow():\n        if tf is None:\n            raise ImportError(\n                \'Failed to import `tensorflow`. \'\n                \'Please install `tensorflow`. \'\n                \'For example with `pip install tensorflow`.\')\n\n    def __init__(self,\n                 component_config=None,  # type: Optional[Dict[Text, Any]]\n                 inv_intent_dict=None,  # type: Optional[Dict[int, Text]]\n                 encoded_all_intents=None,  # type: Optional[np.ndarray]\n                 session=None,  # type: Optional[tf.Session]\n                 graph=None,  # type: Optional[tf.Graph]\n                 message_placeholder=None,  # type: Optional[tf.Tensor]\n                 intent_placeholder=None,  # type: Optional[tf.Tensor]\n                 y_predict=None,   # type: Optional[tf.Tensor]\n                 drop_out=None  # type: Optional[tf.float32]\n                 ):\n        # type: (...) -> None\n        """"""Declare instant variables with default values""""""\n        self._check_tensorflow()\n        super(EmbeddingBertIntentClassifier, self).__init__(component_config)\n\n        # nn architecture parameters\n        self._load_nn_architecture_params()\n\n        # regularization\n        self._load_regularization_params()\n        # flag if tokenize intents\n        self._load_flag_if_tokenize_intents()\n        # visualization of accuracy\n        self._load_visual_params()\n\n        # check if hidden_layer_sizes are valid\n        (self.num_hidden_layers,\n         self.hidden_layer_size) = self._check_hidden_layer_sizes(\n            self.num_hidden_layers,\n            self.hidden_layer_size,\n            name=\'hidden_layer\')\n\n        # transform numbers to intents\n        self.inv_intent_dict = inv_intent_dict\n        # encode all intents with numbers\n        self.encoded_all_intents = encoded_all_intents\n\n        # tf related instances\n        self.session = session\n        self.graph = graph\n        self.a_in = message_placeholder\n        self.b_in = intent_placeholder\n        self.y_predict = y_predict\n        self.drop_out = drop_out\n\n    # training data helpers:\n    @staticmethod\n    def _create_intent_dict(training_data):\n        """"""Create intent dictionary""""""\n\n        distinct_intents = set([example.get(""intent"")\n                                for example in training_data.intent_examples])\n        return {intent: idx\n                for idx, intent in enumerate(sorted(distinct_intents))}\n\n    @staticmethod\n    def _create_intent_token_dict(intents, intent_split_symbol):\n        """"""Create intent token dictionary""""""\n\n        distinct_tokens = set([token\n                               for intent in intents\n                               for token in intent.split(\n                                   intent_split_symbol)])\n        return {token: idx\n                for idx, token in enumerate(sorted(distinct_tokens))}\n\n    def _create_encoded_intents(self, intent_dict):\n        """"""Create matrix with intents encoded in rows as bag of words,\n        if intent_tokenization_flag = False this is identity matrix""""""\n\n        if self.intent_tokenization_flag:\n            intent_token_dict = self._create_intent_token_dict(\n                list(intent_dict.keys()), self.intent_split_symbol)\n\n            encoded_all_intents = np.zeros((len(intent_dict),\n                                            len(intent_token_dict)))\n            for key, idx in intent_dict.items():\n                for t in key.split(self.intent_split_symbol):\n                    encoded_all_intents[idx, intent_token_dict[t]] = 1\n\n            return encoded_all_intents\n        else:\n            return np.eye(len(intent_dict))\n\n    # data helpers:\n    def _create_all_Y(self, size):\n        # stack encoded_all_intents on top of each other\n        # to create candidates for training examples\n        # to calculate training accuracy\n        all_Y = np.stack([self.encoded_all_intents[0] for _ in range(size)])\n\n        return all_Y\n\n    def _prepare_data_for_training(self, training_data, intent_dict):\n        """"""Prepare data for training""""""\n\n        X = np.stack([e.get(""text_features"")\n                      for e in training_data.intent_examples])\n\n        intents_for_X = np.array([intent_dict[e.get(""intent"")]\n                                  for e in training_data.intent_examples])\n\n        Y = np.stack([self.encoded_all_intents[intent_idx]\n                      for intent_idx in intents_for_X])\n\n        return X, Y, intents_for_X\n\n    def _output_training_stat(self, X, intents_for_X, is_training):\n        """"""Output training statistics""""""\n        n = self.evaluate_on_num_examples\n        ids = np.random.permutation(len(X))[:n]\n        all_Y = self._create_all_Y(X[ids].shape[0])\n\n        train_sim = self.session.run(self.y_predict,\n                                     feed_dict={self.a_in: X[ids],\n                                                self.b_in: all_Y,\n                                                is_training: False,\n                                                self.drop_out: 0})\n\n        train_acc = np.mean(np.argmax(train_sim, -1) == intents_for_X[ids])\n        return train_acc\n\n    def train(self, training_data, config, **kwargs):\n        # type: (TrainingData, Optional[rasaNLUModelConfig], **Any) -> None\n        """"""Train the embedding intent classifier on a data set.""""""\n\n        intent_dict = self._create_intent_dict(training_data)\n\n        if len(intent_dict) < 2:\n            logger.error(""Can not train an intent classifier. ""\n                         ""Need at least 2 different classes. ""\n                         ""Skipping training of intent classifier."")\n            return\n\n        self.inv_intent_dict = {v: k for k, v in intent_dict.items()}\n        self.encoded_all_intents = self._create_encoded_intents(intent_dict)\n\n        X, Y, intents_for_X = self._prepare_data_for_training(training_data,\n                                                              intent_dict)\n\n        num_classes = len(intent_dict)\n\n        self.graph = tf.Graph()\n        with self.graph.as_default():\n\n            self.a_in = tf.placeholder(tf.float32,\n                                       (None, X.shape[-1]), name=\'a\')\n            self.b_in = tf.placeholder(tf.float32,\n                                       (None, Y.shape[-1]), name=\'b\')\n\n            is_training = tf.placeholder_with_default(False, shape=())\n\n            self.drop_out = tf.placeholder(tf.float32, (), name=\'drop_out\')\n\n            # Create a graph for training\n            logits_train = conv_net(self.a_in, num_classes,\n                                    self.num_hidden_layers,\n                                    self.hidden_layer_size,\n                                    self.C2, self.drop_out,\n                                    is_training=True)\n\n            # Define loss and optimizer\n            # (with train logits, for dropout to take effect)\n            loss = tf.reduce_mean(\n                tf.nn.softmax_cross_entropy_with_logits_v2(\n                    logits=logits_train,\n                    labels=self.b_in)) + tf.losses.get_regularization_loss()\n\n            self.y_predict = tf.nn.softmax(logits_train)\n\n            train_op = tf.train.AdamOptimizer(\n                learning_rate=self.learning_rate).minimize(loss)\n\n            # train tensorflow graph\n            config_proto = self.get_config_proto(self.component_config)\n            self.session = tf.Session(graph=self.graph, config=config_proto)\n            self.session.run(tf.global_variables_initializer())\n\n            pbar = tqdm(range(self.epochs), desc=""Epochs"",\n                        disable=is_logging_disabled())\n            train_acc = 0\n            last_loss = 0\n            for ep in pbar:\n                indices = np.random.permutation(len(X))\n\n                batch_size = self.batch_size\n                batches_per_epoch = (len(X) // batch_size +\n                                     int(len(X) % batch_size > 0))\n\n                ep_loss = 0\n                for i in range(batches_per_epoch):\n                    end_idx = (i + 1) * batch_size\n                    start_idx = i * batch_size\n                    batch_a = X[indices[start_idx:end_idx]]\n                    batch_b = Y[indices[start_idx:end_idx]]\n\n                    sess_out = self.session.run(\n                        {\'loss\': loss, \'train_op\': train_op},\n                        feed_dict={self.a_in: batch_a,\n                                   self.b_in: batch_b,\n                                   is_training: True,\n                                   self.drop_out: self.droprate}\n                    )\n\n                    ep_loss += sess_out.get(\'loss\') / batches_per_epoch\n\n                if self.evaluate_on_num_examples:\n                    if (ep == 0 or\n                            (ep + 1) % self.evaluate_every_num_epochs == 0 or\n                            (ep + 1) == self.epochs):\n                        train_acc = self._output_training_stat(X,\n                                                               intents_for_X,\n                                                               is_training)\n                        last_loss = ep_loss\n\n                        pbar.set_postfix({\n                            ""loss"": ""{:.3f}"".format(ep_loss),\n                            ""acc"": ""{:.3f}"".format(train_acc)\n                        })\n                else:\n                    pbar.set_postfix({\n                        ""loss"": ""{:.3f}"".format(ep_loss)\n                    })\n\n    def process(self, message, **kwargs):\n        # type: (Message, **Any) -> None\n        """"""Return the most likely intent and its similarity to the input.""""""\n\n        intent = {""name"": None, ""confidence"": 0.0}\n        intent_ranking = []\n\n        if self.session is None:\n            logger.error(""There is no trained tf.session: ""\n                         ""component is either not trained or ""\n                         ""didn\'t receive enough training data"")\n\n        else:\n\n            # get features (bag of words) for a message\n            X = message.get(""text_features"").reshape(1, -1)\n\n            # stack encoded_all_intents on top of each other\n            # to create candidates for test examples\n            all_Y = self._create_all_Y(X.shape[0])\n\n            with self.graph.as_default():\n                y_predict = self.session.run(\n                    self.y_predict, feed_dict={self.a_in: X,\n                                               self.b_in: all_Y,\n                                               self.drop_out: 0})\n                intent_ids = y_predict[0][0] if type(\n                    y_predict) == list else y_predict[0]\n                intent_id_argmax = np.argmax(intent_ids, -1)\n\n            # if X contains all zeros do not predict some label\n            if X.any():\n                intent = {\n                    ""name"": self.inv_intent_dict[intent_id_argmax],\n                    ""confidence"": float(intent_ids[intent_id_argmax])\n                }\n                ranking = intent_ids\n                intent_ranking = [{""name"": self.inv_intent_dict[intent_idx],\n                                   ""confidence"": float(score)}\n                                  for intent_idx, score in enumerate(ranking)]\n\n                intent_ranking = sorted(intent_ranking,\n                                        key=lambda s: s[\'confidence\'],\n                                        reverse=True)\n                intent_ranking = intent_ranking[:INTENT_RANKING_LENGTH]\n\n        message.set(""intent"", intent, add_to_output=True)\n        message.set(""intent_ranking"", intent_ranking, add_to_output=True)\n\n    # def persist(self, model_dir):\n    def persist(self,\n                file_name: Text,\n                model_dir: Text) -> Optional[Dict[Text, Any]]:\n        # type: (Text) -> Dict[Text, Any]\n        """"""Persist this model into the passed directory.\n        Return the metadata necessary to load the model again.""""""\n        if self.session is None:\n            return {""classifier_file"": None}\n\n        checkpoint = os.path.join(model_dir, file_name + "".ckpt"")\n\n        try:\n            os.makedirs(os.path.dirname(checkpoint))\n        except OSError as e:\n            # be happy if someone already created the path\n            import errno\n            if e.errno != errno.EEXIST:\n                raise\n        with self.graph.as_default():\n            self.graph.clear_collection(\'message_placeholder\')\n            self.graph.add_to_collection(\'message_placeholder\',\n                                         self.a_in)\n\n            self.graph.clear_collection(\'intent_placeholder\')\n            self.graph.add_to_collection(\'intent_placeholder\',\n                                         self.b_in)\n\n            self.graph.clear_collection(\'y_predict\')\n            self.graph.add_to_collection(\'y_predict\',\n                                         self.y_predict)\n\n            self.graph.clear_collection(\'input_drop_rate\')\n            self.graph.add_to_collection(\'input_drop_rate\',\n                                         self.drop_out)\n\n            saver = tf.train.Saver()\n            saver.save(self.session, checkpoint)\n\n        with io.open(os.path.join(\n                model_dir,\n                file_name + ""_inv_intent_dict.pkl""), \'wb\') as f:\n            pickle.dump(self.inv_intent_dict, f)\n        with io.open(os.path.join(\n                model_dir,\n                file_name + ""_encoded_all_intents.pkl""), \'wb\') as f:\n            pickle.dump(self.encoded_all_intents, f)\n\n        return {""file"": file_name}\n\n    @staticmethod\n    def get_config_proto(component_config):\n        # \xe9\x85\x8d\xe7\xbd\xaeconfigProto\n        config = tf.ConfigProto(\n            device_count={\n                \'CPU\': component_config[\'config_proto\'][\'device_count\']\n            },\n            inter_op_parallelism_threads=component_config[\'config_proto\'][\'inter_op_parallelism_threads\'],\n            intra_op_parallelism_threads=component_config[\'config_proto\'][\'intra_op_parallelism_threads\'],\n            gpu_options={\n                \'allow_growth\': component_config[\'config_proto\'][\'allow_growth\']\n            }\n        )\n        return config\n\n    @classmethod\n    def load(cls,\n             meta: Dict[Text, Any],\n             model_dir=None,  # type: Optional[Text]\n             model_metadata=None,  # type: Optional[Metadata]\n             cached_component=None,  # type: Optional[Component]\n             **kwargs  # type: **Any\n             ):\n\n        config_proto = cls.get_config_proto(meta)\n\n        if model_dir and meta.get(""file""):\n            file_name = meta.get(""file"")\n            checkpoint = os.path.join(model_dir, file_name + \'.ckpt\')\n            graph = tf.Graph()\n            with graph.as_default():\n                sess = tf.Session(config=config_proto)\n                saver = tf.train.import_meta_graph(checkpoint + \'.meta\')\n                saver.restore(sess, checkpoint)\n\n                a_in = tf.get_collection(\'message_placeholder\')[0]\n                b_in = tf.get_collection(\'intent_placeholder\')[0]\n\n                y_predict = tf.get_collection(\'y_predict\')\n\n                drop_out = tf.get_collection(\'input_drop_rate\')[0]\n\n            with io.open(os.path.join(\n                    model_dir,\n                    file_name + ""_inv_intent_dict.pkl""), \'rb\') as f:\n                inv_intent_dict = pickle.load(f)\n            with io.open(os.path.join(\n                    model_dir,\n                    file_name + ""_encoded_all_intents.pkl""), \'rb\') as f:\n                encoded_all_intents = pickle.load(f)\n\n            return EmbeddingBertIntentClassifier(\n                component_config=meta,\n                inv_intent_dict=inv_intent_dict,\n                encoded_all_intents=encoded_all_intents,\n                session=sess,\n                graph=graph,\n                message_placeholder=a_in,\n                intent_placeholder=b_in,\n                y_predict=y_predict,\n                drop_out=drop_out\n            )\n\n        else:\n            logger.warning(""Failed to load nlu model. Maybe path {} ""\n                           ""doesn\'t exist""\n                           """".format(os.path.abspath(model_dir)))\n            return EmbeddingBertIntentClassifier(component_config=meta)\n'"
rasa_nlu_gao/classifiers/embedding_bert_intent_estimator_classifier.py,24,"b'from __future__ import absolute_import\r\nfrom __future__ import division\r\nfrom __future__ import print_function\r\nfrom __future__ import unicode_literals\r\n\r\nimport io\r\nimport logging\r\nimport os\r\n\r\nimport typing\r\nfrom typing import List, Text, Any, Optional, Dict\r\n\r\nfrom rasa_nlu_gao.classifiers import INTENT_RANKING_LENGTH\r\nfrom rasa.nlu.components import Component\r\nfrom multiprocessing import cpu_count\r\nfrom tensorflow.contrib import predictor as Pred\r\nimport numpy as np\r\n\r\ntry:\r\n    import cPickle as pickle\r\nexcept ImportError:\r\n    import pickle\r\n\r\nlogger = logging.getLogger(__name__)\r\n\r\nif typing.TYPE_CHECKING:\r\n    import tensorflow as tf\r\n    from rasa.nlu.config import RasaNLUModelConfig\r\n    from rasa.nlu.training_data import TrainingData\r\n    from rasa.nlu.model import Metadata\r\n    from rasa.nlu.training_data import Message\r\n\r\ntry:\r\n    import tensorflow as tf\r\nexcept ImportError:\r\n    tf = None\r\n\r\n\r\nclass EmbeddingBertIntentEstimatorClassifier(Component):\r\n    """"""Intent classifier using supervised bert embeddings.""""""\r\n\r\n    provides = [""intent"", ""intent_ranking""]\r\n\r\n    requires = [""text_features""]\r\n\r\n    defaults = {\r\n        # nn architecture\r\n        ""batch_size"": 256,\r\n        ""epochs"": 200,\r\n\r\n        # flag if tokenize intents\r\n        ""intent_tokenization_flag"": False,\r\n        ""intent_split_symbol"": \'_\',\r\n\r\n        ""config_proto"": {\r\n            ""device_count"": cpu_count(),\r\n            ""inter_op_parallelism_threads"": 0,\r\n            ""intra_op_parallelism_threads"": 0,\r\n            ""allow_growth"": True,\r\n            ""allocator_type"": \'BFC\',               # best-fit with coalescing algorithm \xe5\x86\x85\xe5\xad\x98\xe5\x88\x86\xe9\x85\x8d\xe3\x80\x81\xe9\x87\x8a\xe6\x94\xbe\xe3\x80\x81\xe7\xa2\x8e\xe7\x89\x87\xe7\xae\xa1\xe7\x90\x86\r\n            ""per_process_gpu_memory_fraction"": 0.5 # this means use 50% of your gpu memory in max\r\n        }\r\n    }\r\n\r\n    @classmethod\r\n    def required_packages(cls):\r\n        # type: () -> List[Text]\r\n        return [""tensorflow""]\r\n\r\n    def _load_nn_architecture_params(self):\r\n        self.batch_size = self.component_config[\'batch_size\']\r\n        self.epochs = self.component_config[\'epochs\']\r\n\r\n    def _load_flag_if_tokenize_intents(self):\r\n        self.intent_tokenization_flag = self.component_config[\'intent_tokenization_flag\']\r\n        self.intent_split_symbol = self.component_config[\'intent_split_symbol\']\r\n        if self.intent_tokenization_flag and not self.intent_split_symbol:\r\n            logger.warning(""intent_split_symbol was not specified, ""\r\n                           ""so intent tokenization will be ignored"")\r\n            self.intent_tokenization_flag = False\r\n\r\n    @staticmethod\r\n    def _check_tensorflow():\r\n        if tf is None:\r\n            raise ImportError(\r\n                \'Failed to import `tensorflow`. \'\r\n                \'Please install `tensorflow`. \'\r\n                \'For example with `pip install tensorflow`.\')\r\n\r\n    def __init__(self,\r\n                 component_config=None,  # type: Optional[Dict[Text, Any]]\r\n                 inv_intent_dict=None,  # type: Optional[Dict[int, Text]]\r\n                 encoded_all_intents=None,  # type: Optional[np.ndarray]\r\n                 estimator=None,\r\n                 predictor=None,\r\n                 feature_columns=None\r\n                 ):\r\n        # type: (...) -> None\r\n        """"""Declare instant variables with default values""""""\r\n        self._check_tensorflow()\r\n        super(EmbeddingBertIntentEstimatorClassifier, self).__init__(component_config)\r\n\r\n        # nn architecture parameters\r\n        self._load_nn_architecture_params()\r\n\r\n        # flag if tokenize intents\r\n        self._load_flag_if_tokenize_intents()\r\n\r\n        # transform numbers to intents\r\n        self.inv_intent_dict = inv_intent_dict\r\n        # encode all intents with numbers\r\n        self.encoded_all_intents = encoded_all_intents\r\n\r\n        # tf related instances\r\n        self.estimator = estimator\r\n        self.predictor = predictor\r\n        self.feature_columns = feature_columns\r\n\r\n    # training data helpers:\r\n    @staticmethod\r\n    def _create_intent_dict(training_data):\r\n        """"""Create intent dictionary""""""\r\n\r\n        distinct_intents = set([example.get(""intent"")\r\n                               for example in training_data.intent_examples])\r\n        return {intent: idx\r\n                for idx, intent in enumerate(sorted(distinct_intents))}\r\n\r\n    @staticmethod\r\n    def _create_intent_token_dict(intents, intent_split_symbol):\r\n        """"""Create intent token dictionary""""""\r\n\r\n        distinct_tokens = set([token\r\n                               for intent in intents\r\n                               for token in intent.split(\r\n                                        intent_split_symbol)])\r\n        return {token: idx\r\n                for idx, token in enumerate(sorted(distinct_tokens))}\r\n\r\n    def _create_encoded_intents(self, intent_dict):\r\n        """"""Create matrix with intents encoded in rows as bag of words,\r\n        if intent_tokenization_flag = False this is identity matrix""""""\r\n\r\n        if self.intent_tokenization_flag:\r\n            intent_token_dict = self._create_intent_token_dict(\r\n                list(intent_dict.keys()), self.intent_split_symbol)\r\n\r\n            encoded_all_intents = np.zeros((len(intent_dict),\r\n                                            len(intent_token_dict)))\r\n            for key, idx in intent_dict.items():\r\n                for t in key.split(self.intent_split_symbol):\r\n                    encoded_all_intents[idx, intent_token_dict[t]] = 1\r\n\r\n            return encoded_all_intents\r\n        else:\r\n            return np.eye(len(intent_dict))\r\n\r\n    # data helpers:\r\n    def _create_all_Y(self, size):\r\n        # stack encoded_all_intents on top of each other\r\n        # to create candidates for training examples\r\n        # to calculate training accuracy\r\n        all_Y = np.stack([self.encoded_all_intents[0] for _ in range(size)])\r\n\r\n        return all_Y\r\n\r\n    def _prepare_data_for_training(self, training_data, intent_dict):\r\n        """"""Prepare data for training""""""\r\n\r\n        X = np.stack([e.get(""text_features"")\r\n                      for e in training_data.intent_examples])\r\n\r\n        intents_for_X = np.array([intent_dict[e.get(""intent"")]\r\n                                  for e in training_data.intent_examples])\r\n\r\n        Y = np.stack([self.encoded_all_intents[intent_idx]\r\n                      for intent_idx in intents_for_X])\r\n\r\n        return X, Y, intents_for_X\r\n\r\n    def input_fn(self,features, labels, batch_size, shuffle_num, mode):\r\n        """"""\r\n         build tf.data set for input pipeline\r\n\r\n        :param features: type dict() , define input x structure for parsing\r\n        :param labels: type np.array input label\r\n        :param batch_size: type int number ,input batch_size\r\n        :param shuffle_num: type int number , random select the data\r\n        :param mode: type string ,tf.estimator.ModeKeys.TRAIN or tf.estimator.ModeKeys.PREDICT\r\n        :return: set() with type of (tf.data , and labels)\r\n        """"""\r\n        dataset = tf.data.Dataset.from_tensor_slices((features, labels))\r\n        if mode == tf.estimator.ModeKeys.TRAIN:\r\n            dataset = dataset.shuffle(shuffle_num).batch(batch_size).repeat(self.epochs)\r\n        else:\r\n            dataset = dataset.batch(batch_size)\r\n        iterator = dataset.make_one_shot_iterator()\r\n        data, labels = iterator.get_next()\r\n        return data, labels\r\n\r\n\r\n    def train(self, training_data, cfg=None, **kwargs):\r\n        # type: (TrainingData, Optional[RasaNLUModelConfig], **Any) -> None\r\n        """"""Train the embedding intent classifier on a data set.""""""\r\n\r\n        intent_dict = self._create_intent_dict(training_data)\r\n\r\n        if len(intent_dict) < 2:\r\n            logger.error(""Can not train an intent classifier. ""\r\n                         ""Need at least 2 different classes. ""\r\n                         ""Skipping training of intent classifier."")\r\n            return\r\n\r\n        self.inv_intent_dict = {v: k for k, v in intent_dict.items()}\r\n        self.encoded_all_intents = self._create_encoded_intents(intent_dict)\r\n\r\n        X, Y, intents_for_X = self._prepare_data_for_training(training_data, intent_dict)\r\n\r\n        num_classes = len(intent_dict)\r\n\r\n        # define classes number to classified\r\n        head = tf.contrib.estimator.multi_class_head(n_classes=num_classes)\r\n\r\n        # define feature spec for input x parsing\r\n        feature_names = [\'a_in\']\r\n        self.feature_columns = [tf.feature_column.numeric_column(key=k,shape=[1, X.shape[1]]) for k in feature_names]\r\n\r\n        x_tensor = {\'a_in\': X}\r\n        intents_for_X = intents_for_X.astype(np.int32)\r\n\r\n        # set gpu and tf graph confing\r\n        tf.logging.set_verbosity(tf.logging.INFO)\r\n        config_proto = self.get_config_proto(self.component_config)\r\n\r\n        # sparse_softmax_cross_entropy , build linear classified model\r\n        self.estimator = tf.contrib.estimator.LinearEstimator(\r\n                                                     head = head,\r\n                                                     feature_columns=self.feature_columns,\r\n                                                     optimizer=\'Ftrl\',\r\n                                                     config=tf.estimator.RunConfig(session_config=config_proto)\r\n                                                 )\r\n        # train model\r\n        self.estimator.train(input_fn=lambda: self.input_fn(x_tensor,\r\n                                                  intents_for_X,\r\n                                                  self.batch_size,\r\n                                                  shuffle_num=1000,\r\n                                                  mode = tf.estimator.ModeKeys.TRAIN),\r\n                                                  max_steps=2000)\r\n        # evaluate model\r\n        results = self.estimator.evaluate(input_fn=lambda: self.input_fn(x_tensor,\r\n                                                  intents_for_X,\r\n                                                  self.batch_size,\r\n                                                  shuffle_num=1000,\r\n                                                  mode = tf.estimator.ModeKeys.PREDICT))\r\n\r\n        print(results)\r\n\r\n\r\n    def process(self, message, **kwargs):\r\n        # type: (Message, **Any) -> None\r\n        """"""Return the most likely intent and its similarity to the input.""""""\r\n\r\n        intent = {""name"": None, ""confidence"": 0.0}\r\n        intent_ranking = []\r\n\r\n        if self.predictor is None:\r\n            logger.error(""There is no trained tf.session: ""\r\n                         ""component is either not trained or ""\r\n                         ""didn\'t receive enough training data"")\r\n\r\n        else:\r\n            X = message.get(""text_features"").tolist()\r\n            examples = []\r\n            feature = {}\r\n            # convert input x to tf.feature with float feature spec\r\n            feature[\'a_in\'] = tf.train.Feature(float_list=tf.train.FloatList(value=X))\r\n            # build tf.example for prediction\r\n            example = tf.train.Example(\r\n                features=tf.train.Features(\r\n                    feature=feature\r\n                )\r\n            )\r\n            # serialize tf.example to string\r\n            examples.append(example.SerializeToString())\r\n\r\n            # Make predictions.\r\n            result_dict = self.predictor({\'inputs\': examples})\r\n            result_score_list = result_dict[\'scores\'][0]\r\n            max_score = np.max(result_dict[\'scores\'][0])\r\n            max_index = np.argmax(result_dict[\'scores\'][0])\r\n\r\n            # if X contains all zeros do not predict some label\r\n            if len(X)>0:\r\n                intent = {\r\n                    ""name"": self.inv_intent_dict[max_index], ""confidence"": float(max_score)\r\n                }\r\n                ranking = result_score_list[:INTENT_RANKING_LENGTH]\r\n                intent_ranking = [{""name"": self.inv_intent_dict[intent_idx],\r\n                                   ""confidence"": float(score)}\r\n                                  for intent_idx, score in enumerate(ranking)]\r\n\r\n                intent_ranking = sorted(intent_ranking, key=lambda s: s[\'confidence\'], reverse=True)\r\n\r\n        message.set(""intent"", intent, add_to_output=True)\r\n        message.set(""intent_ranking"", intent_ranking, add_to_output=True)\r\n\r\n    def persist(self, file_name: Text, model_dir: Text):\r\n        # type: (Text) -> Dict[Text, Any]\r\n        """"""Persist this model into the passed directory.\r\n        Return the metadata necessary to load the model again.""""""\r\n        if self.estimator is None:\r\n            return {""classifier_file"": None}\r\n\r\n        # build feature spec for tf.example parsing\r\n        feature_spec = tf.feature_column.make_parse_example_spec(self.feature_columns)\r\n        # build tf.example parser\r\n        serving_input_receiver_fn = tf.estimator.export.build_parsing_serving_input_receiver_fn(feature_spec)\r\n        # export tf model\r\n        path = self.estimator.export_savedmodel(model_dir, serving_input_receiver_fn)\r\n        # decode model path to string\r\n        file_dir = os.path.basename(path).decode(\'utf-8\')\r\n\r\n\r\n        with io.open(os.path.join(\r\n                model_dir,\r\n                file_name + ""_inv_intent_dict.pkl""), \'wb\') as f:\r\n            pickle.dump(self.inv_intent_dict, f)\r\n        with io.open(os.path.join(\r\n                model_dir,\r\n                file_name + ""_encoded_all_intents.pkl""), \'wb\') as f:\r\n            pickle.dump(self.encoded_all_intents, f)\r\n\r\n        return {""file"": file_name}\r\n\r\n    @staticmethod\r\n    def get_config_proto(component_config):\r\n        # \xe9\x85\x8d\xe7\xbd\xaeconfigProto\r\n        config = tf.ConfigProto(\r\n            device_count={\r\n                \'CPU\': component_config[\'config_proto\'][\'device_count\']\r\n            },\r\n            inter_op_parallelism_threads=component_config[\'config_proto\'][\'inter_op_parallelism_threads\'],\r\n            intra_op_parallelism_threads=component_config[\'config_proto\'][\'intra_op_parallelism_threads\'],\r\n            gpu_options={\r\n                \'allow_growth\': component_config[\'config_proto\'][\'allow_growth\']\r\n            }\r\n        )\r\n        config.gpu_options.per_process_gpu_memory_fraction= component_config[\'config_proto\'][\'per_process_gpu_memory_fraction\']\r\n        config.gpu_options.allocator_type = component_config[\'config_proto\'][\'allocator_type\']\r\n        return config\r\n\r\n    @classmethod\r\n    def load(cls,\r\n             meta,\r\n             model_dir=None,  # type: Text\r\n             model_metadata=None,  # type: Metadata\r\n             cached_component=None,  # type: Optional[Component]\r\n             **kwargs  # type: **Any\r\n             ):\r\n        # type: (...) -> EmbeddingBertIntentAdanetClassifier\r\n\r\n        config_proto = cls.get_config_proto(meta)\r\n\r\n        print(""bert model loaded"")\r\n\r\n        if model_dir and meta.get(""file""):\r\n            file_name = meta.get(""file"")\r\n            # tensorflow.contrib.predictor to load the model file which may has 10x speed up in predict time\r\n            predict = Pred.from_saved_model(export_dir=os.path.join(model_dir,file_name),config=config_proto)\r\n\r\n            with io.open(os.path.join(\r\n                    model_dir,\r\n                    file_name + ""_inv_intent_dict.pkl""), \'rb\') as f:\r\n                inv_intent_dict = pickle.load(f)\r\n            with io.open(os.path.join(\r\n                    model_dir,\r\n                    file_name + ""_encoded_all_intents.pkl""), \'rb\') as f:\r\n                encoded_all_intents = pickle.load(f)\r\n\r\n            return EmbeddingBertIntentEstimatorClassifier(\r\n                    component_config=meta,\r\n                    inv_intent_dict=inv_intent_dict,\r\n                    encoded_all_intents=encoded_all_intents,\r\n                    predictor=predict\r\n            )\r\n\r\n        else:\r\n            logger.warning(""Failed to load nlu model. Maybe path {} ""\r\n                           ""doesn\'t exist""\r\n                           """".format(os.path.abspath(model_dir)))\r\n            return EmbeddingBertIntentEstimatorClassifier(component_config=meta)\r\n\r\n\r\n\r\n\r\n\r\n'"
rasa_nlu_gao/classifiers/entity_edit_intent.py,0,"b'from __future__ import unicode_literals\nfrom __future__ import print_function\nfrom __future__ import division\nfrom __future__ import absolute_import\n\nfrom builtins import map\nfrom typing import Any\nfrom typing import Dict\nfrom typing import Text\n\nfrom rasa.nlu.components import Component\nfrom rasa.nlu.training_data import Message\n\nclass EntityEditIntent(Component):\n    provides = [""intent""]\n\n    defaults = {\n        ""entity"": [""nr""],\n        ""intent"": [""enter_data""],\n        ""min_confidence"": 0\n    }\n\n    def __init__(self, component_config=None):\n        super(EntityEditIntent, self).__init__(component_config)\n\n    def process(self, message, **kwargs):\n        # type: (Message, **Any) -> None\n\n        last_entities = message.get(""entities"", [])\n        last_intent = message.get(""intent"", {})\n    \n        if last_intent[""confidence""] <= self.component_config[""min_confidence""]:\n            for item in last_entities:\n                if item[""entity""] in self.component_config[""entity""]:\n                    entity_index = self.component_config[""entity""].index(item[""entity""])\n                    intent_name = self.component_config[""intent""][entity_index]\n\n                    intent = {""name"": intent_name, ""confidence"": 1.0}\n\n                    message.set(""intent"", intent, add_to_output=True)\n'"
rasa_nlu_gao/classifiers/kashgari_intent_classifier.py,0,"b'import logging\nfrom typing import List, Text, Any, Optional, Dict\nfrom rasa_nlu_gao.classifiers import INTENT_RANKING_LENGTH\n\nfrom rasa.nlu.components import Component\nfrom rasa.nlu.model import Metadata\nfrom rasa.nlu.training_data import Message\n\nimport os\nimport shutil\nimport kashgari\nfrom kashgari.embeddings import BERTEmbedding\nimport kashgari.tasks.classification as clf\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau\n\nlogger = logging.getLogger(__name__)\n\n\nclass KashgariIntentClassifier(Component):\n    provides = [""intent"", ""intent_ranking""]\n\n    defaults = {\n        ""bert_model_path"": None,\n        ""sequence_length"": ""auto"",\n        ""layer_nums"": 4,\n        ""trainable"": False,\n        ""classifier_model"": ""BiLSTM_Model"",\n        ""epochs"": 10,\n        ""batch_size"": 32,\n        ""validation_split"": 0.2,\n        ""patience"": 5,\n        ""factor"": 0.5, # factor of reduce learning late everytime\n        ""verbose"": 1,\n        ""use_cudnn_cell"": False\n    }\n\n    def __init__(self,\n                 component_config=None,\n                 model = None):\n        super(KashgariIntentClassifier, self).__init__(component_config)\n\n        bert_model_path = self.component_config.get(\'bert_model_path\')\n        sequence_length = self.component_config.get(\'sequence_length\')\n        layer_nums = self.component_config.get(\'layer_nums\')\n        trainable = self.component_config.get(\'trainable\')\n        use_cudnn_cell = self.component_config.get(\'use_cudnn_cell\')\n\n        kashgari.config.use_cudnn_cell = use_cudnn_cell\n\n        self.classifier_model = self.component_config.get(\'classifier_model\')\n        \n\n        self.bert_embedding = BERTEmbedding(bert_model_path,\n                                        task=kashgari.CLASSIFICATION,\n                                        layer_nums = layer_nums,\n                                        trainable=trainable,\n                                        sequence_length=sequence_length)\n\n        self.tokenizer = self.bert_embedding.tokenizer\n\n        self.model = model\n\n    def train(self, training_data, cfg, **kwargs):\n        classifier_model = eval(""clf."" + self.classifier_model)\n\n        epochs = self.component_config.get(\'epochs\')\n        batch_size = self.component_config.get(\'batch_size\')\n        validation_split = self.component_config.get(\'validation_split\')\n        patience = self.component_config.get(\'patience\')\n        factor = self.component_config.get(\'factor\')\n        verbose = self.component_config.get(\'verbose\')\n\n        X, Y = [], []\n        for msg in training_data.intent_examples:\n            X.append(self.tokenizer.tokenize(msg.text))\n            Y.append(msg.get(\'intent\'))\n\n        train_x, validate_x, train_y, validate_y = train_test_split( X, Y, test_size=validation_split, random_state=100)\n\n        self.bert_embedding.processor.add_bos_eos = False\n\n        self.model = classifier_model(self.bert_embedding)\n\n        checkpoint = ModelCheckpoint(\n            \'intent_weights.h5\',\n            monitor=\'val_loss\',\n            save_best_only=True,\n            save_weights_only=False,\n            verbose=verbose)\n        early_stopping = EarlyStopping(\n            monitor=\'val_loss\',\n            patience=patience)\n        reduce_lr = ReduceLROnPlateau(\n            monitor=\'val_loss\',\n            factor=factor,\n            patience=patience,\n            verbose=verbose)\n\n        self.model.fit(\n            train_x,\n            train_y,\n            validate_x,\n            validate_y,\n            epochs=epochs,\n            batch_size=batch_size,\n            callbacks=[checkpoint, early_stopping, reduce_lr]\n        )\n\n    def process(self, message, **kwargs):\n        intent_ranks = self.get_intent_score(message)\n        intent = intent_ranks[0]\n\n        message.set(""intent"", intent, add_to_output=True)\n        message.set(""intent_ranking"", intent_ranks, add_to_output=True)\n\n    def get_intent_score(self, message):\n        intent_top_k = self.model.predict_top_k_class(\n            [self.tokenizer.tokenize(message.text)],\n            top_k = INTENT_RANKING_LENGTH\n        )[0]\n\n        intent_ranks = [{\n            \'name\': intent_top_k[\'label\'],\n            \'confidence\': float(intent_top_k[\'confidence\'])\n        }]\n\n        for item in intent_top_k[\'candidates\']:\n            intent_ranks.append({\'name\': item[\'label\'], \'confidence\': float(item[\'confidence\'])})\n\n        return intent_ranks\n\n    def persist(self,\n                file_name: Text,\n                model_dir: Text) -> Optional[Dict[Text, Any]]:\n        model_path = os.path.join(model_dir, file_name)\n        self.model.save(model_path)\n        \n        remove_file = os.path.join(model_path, \'model_weights.h5\')\n        os.remove(remove_file)\n        shutil.move(\'intent_weights.h5\', model_path)\n        os.rename(os.path.join(model_path, \'intent_weights.h5\'), os.path.join(model_path, \'model_weights.h5\'))\n\n        return {""file"": file_name}\n\n    @classmethod\n    def load(cls,\n             meta: Dict[Text, Any],\n             model_dir: Optional[Text]=None,\n             model_metadata: Optional[\'Metadata\']=None,\n             cached_component: Optional[Component]=None,\n             **kwargs: Any\n             ) -> \'KashgariIntentClassifier\':\n\n        if model_dir and meta.get(""file""):\n            file_name = meta.get(""file"")\n            classifier_model = os.path.join(model_dir, file_name)\n            loaded_model = kashgari.utils.load_model(classifier_model)\n            \n            return cls(component_config=meta,\n                       model=loaded_model)\n        else:\n            logger.warning(""Failed to load classifier model. Maybe path {} ""\n                           ""doesn\'t exist""\n                           """".format(os.path.abspath(model_dir)))\n            return cls(component_config=meta)\n'"
rasa_nlu_gao/extractors/__init__.py,0,b''
rasa_nlu_gao/extractors/bilstm_crf_entity_extractor.py,3,"b'from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nimport logging\nimport os\nimport re\nimport io\n\nimport typing\nimport numpy as np\n\ntry:\n    import cPickle as pickle\nexcept ImportError:\n    import pickle\n\nfrom builtins import str\nfrom typing import Any, Dict, List, Optional, Text, Tuple\n\nfrom rasa.nlu.extractors import EntityExtractor\nfrom rasa.nlu.model import Metadata\nfrom rasa.nlu.training_data import Message\n\nfrom rasa_nlu_gao.utils.bilstm_utils import \\\n    char_mapping, tag_mapping, prepare_dataset, BatchManager, iob_iobes, \\\n    iob2, save_model, create_model, input_from_line\n\nfrom rasa_nlu_gao.models.model import Model\nfrom multiprocessing import cpu_count\nimport jieba\n\nlogger = logging.getLogger(__name__)\n\nif typing.TYPE_CHECKING:\n    import numpy as np\n    import tensorflow as tf\n    import tensorflow.contrib\n\ntry:\n    import tensorflow as tf\nexcept ImportError:\n    tf = None\n\n\nclass BilstmCRFEntityExtractor(EntityExtractor):\n    provides = [""entities""]\n\n    requires = [""tokens""]\n\n    defaults = {\n        ""lr"": 0.001,\n        ""char_dim"": 100,\n        ""lstm_dim"": 100,\n        ""batches_per_epoch"": 10,\n        ""seg_dim"": 20,\n        ""num_segs"": 4,\n        ""batch_size"": 20,\n        ""zeros"": True,\n        ""tag_schema"": ""iobes"",\n        ""lower"": False,\n        ""model_type"": ""idcnn"",\n        ""clip"": 5,\n        ""optimizer"": ""adam"",\n        ""dropout_keep"": 0.5,\n        ""steps_check"": 100,\n        ""config_proto"": {\n            ""device_count"": cpu_count(),\n            ""inter_op_parallelism_threads"": 0,\n            ""intra_op_parallelism_threads"": 0,\n            ""allow_growth"": True\n        },\n        ""dictionary_path"": None,\n    }\n\n    def __init__(self,\n                 component_config=None,\n                 ent_tagger=None,\n                 session=None,\n                 char_to_id=None,\n                 id_to_tag=None):\n        super(BilstmCRFEntityExtractor, self).__init__(component_config)\n\n        self.ent_tagger = ent_tagger  # \xe6\x8c\x87\xe7\x9a\x84\xe6\x98\xaf\xe8\xae\xad\xe7\xbb\x83\xe5\xa5\xbd\xe7\x9a\x84model\n        self.session = session\n        self.char_to_id = char_to_id\n        self.id_to_tag = id_to_tag\n        dictionary_path = self.component_config.get(\'dictionary_path\')\n\n        if dictionary_path:\n            jieba.load_userdict(dictionary_path)\n\n        self.seg = jieba\n\n    def train(self, training_data, config, **kwargs):\n        filtered_entity_examples = \\\n            self.filter_trainable_entities(training_data.training_examples)\n\n        train_sentences = self._create_dataset(filtered_entity_examples)\n\n        # \xe6\xa3\x80\xe6\xb5\x8b\xe5\xb9\xb6\xe7\xbb\xb4\xe6\x8a\xa4\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe7\x9a\x84tag\xe6\xa0\x87\xe8\xae\xb0\n        self.update_tag_scheme(\n            train_sentences, self.component_config[""tag_schema""])\n\n        _c, char_to_id, id_to_char = char_mapping(\n            train_sentences, self.component_config[""lower""])\n\n        tag_to_id, id_to_tag = tag_mapping(train_sentences)\n        self.char_to_id = char_to_id\n        self.id_to_tag = id_to_tag\n\n        self.component_config[""num_chars""] = len(char_to_id)\n        self.component_config[""num_tags""] = len(tag_to_id)\n\n        train_data = prepare_dataset(\n            train_sentences, char_to_id,\n            tag_to_id, self.seg,\n            self.component_config[""lower""])\n\n        # \xe8\x8e\xb7\xe5\x8f\x96\xe5\x8f\xaf\xe4\xbe\x9b\xe6\xa8\xa1\xe5\x9e\x8b\xe8\xae\xad\xe7\xbb\x83\xe7\x9a\x84\xe5\x8d\x95\xe4\xb8\xaa\xe6\x89\xb9\xe6\xac\xa1\xe6\x95\xb0\xe6\x8d\xae\n        train_manager = BatchManager(\n            train_data, self.component_config[""batch_size""])\n\n        self._train_model(train_manager)\n\n    def _create_dataset(self, examples):\n        dataset = []\n        for example in examples:\n            entity_offsets = self._convert_example(example)\n            dataset.append(self._predata(\n                example.text, entity_offsets, self.component_config[""zeros""]))\n        return dataset\n\n    @staticmethod\n    def _convert_example(example):\n        def convert_entity(entity):\n            return entity[""start""], entity[""end""], entity[""entity""]\n\n        return [convert_entity(ent) for ent in example.get(""entities"", [])]\n\n    @staticmethod\n    def _predata(text, entity_offsets, zeros):\n        value = \'O\'\n        bilou = [value for _ in text]\n        # zero_digits\xe5\x87\xbd\xe6\x95\xb0\xe7\x9a\x84\xe7\x94\xa8\xe9\x80\x94\xe6\x98\xaf\xe5\xb0\x86\xe6\x89\x80\xe6\x9c\x89\xe6\x95\xb0\xe5\xad\x97\xe8\xbd\xac\xe5\x8c\x96\xe4\xb8\xba0\n\n        def zero_digits(s):\n            return re.sub(\'\\d\', \'0\', s)\n\n        text = zero_digits(text.rstrip()) if zeros else text.rstrip()\n\n        cooked_data = []\n\n        for (start, end, entity) in entity_offsets:\n            if start is not None and end is not None:\n                bilou[start] = \'B-\' + entity\n                for i in range(start+1, end):\n                    bilou[i] = \'I-\' + entity\n\n        for index, achar in enumerate(text):\n            if achar.strip():\n                temp = []\n                temp.append(achar)\n                temp.append(bilou[index])\n\n                cooked_data.append(temp)\n            else:\n                continue\n\n        return cooked_data\n\n    @staticmethod\n    def get_config_proto(component_config):\n        # \xe9\x85\x8d\xe7\xbd\xaeconfigProto\n        config = tf.ConfigProto(\n            device_count={\n                \'CPU\': component_config[\'config_proto\'][\'device_count\']\n            },\n            inter_op_parallelism_threads=component_config\n            [\'config_proto\'][\'inter_op_parallelism_threads\'],\n            intra_op_parallelism_threads=component_config\n            [\'config_proto\'][\'intra_op_parallelism_threads\'],\n            gpu_options={\n                \'allow_growth\':\n                    component_config[\'config_proto\'][\'allow_growth\']\n            }\n        )\n        return config\n\n    def update_tag_scheme(self, sentences, tag_scheme):\n        for i, s in enumerate(sentences):\n            tags = [w[1] for w in s]\n            # Check that tags are given in the IOB format\n            if not iob2(tags):\n                s_str = \'\\n\'.join(\' \'.join(w) for w in s)\n                raise Exception(\'Sentences should be given in IOB format! \' +\n                                \'Please check sentence %i:\\n%s\' % (i, s_str))\n            if tag_scheme == \'iob\':\n                # If format was IOB1, we convert to IOB2\n                for word, new_tag in zip(s, tags):\n                    word[1] = new_tag\n            elif tag_scheme == \'iobes\':\n                new_tags = iob_iobes(tags)\n                for word, new_tag in zip(s, new_tags):\n                    word[1] = new_tag\n            else:\n                raise Exception(\'Unknown tagging scheme!\')\n\n    def _train_model(self, train_manager):\n        # \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe5\x85\xa8\xe9\x87\x8f\xe8\xb7\x91\xe4\xb8\x80\xe6\xac\xa1\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\xad\xe4\xbb\xa3\xe7\x9a\x84\xe6\xac\xa1\xe6\x95\xb0\n        steps_per_epoch = train_manager.len_data\n\n        tf_config = self.get_config_proto(self.component_config)\n        sess = tf.Session(config=tf_config)\n\n        self.session = sess\n\n        # \xe6\xad\xa4\xe5\xa4\x84\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x88\x9b\xe5\xbb\xba\xe4\xb8\xba\xe9\xa1\xb9\xe7\x9b\xae\xe6\x9c\x80\xe6\xa0\xb8\xe5\xbf\x83\xe4\xbb\xa3\xe7\xa0\x81\n        model = create_model(sess, Model, self.component_config, logger)\n        self.model = model\n\n        logger.warning(""start training"")\n        loss_slot = []\n\n        for _ in range(self.component_config[""batches_per_epoch""]):\n            for batch in train_manager.iter_batch(shuffle=True):\n                step, batch_loss_slot = model.run_step(\n                    sess, True, batch)\n                loss_slot.append(batch_loss_slot)\n\n                if step % self.component_config[""steps_check""] == 0:\n                    iteration = step // steps_per_epoch + 1\n\n                    logger.warning(""iteration:{} step:{}/{}, NER loss:{:>9.6f}""\n                                   """".format(iteration,\n                                             step % steps_per_epoch,\n                                             steps_per_epoch,\n                                             np.mean(loss_slot)))\n                    loss_slot = []\n\n    def process(self, message, **kwargs):\n        # type: (Message, **Any) -> None\n        extracted = self.add_extractor_name(self.extract_entities(message))\n        message.set(""entities"",\n                    message.get(""entities"", []) + extracted,\n                    add_to_output=True)\n\n    def extract_entities(self, message):\n        # type: (Message) -> List[Dict[Text, Any]]\n        """"""Take a sentence and return entities in json format""""""\n\n        if self.ent_tagger is not None:\n            result = self.ent_tagger.evaluate_line(\n                self.session,\n                input_from_line(message.text, self.char_to_id, self.seg),\n                self.id_to_tag)\n            return result.get(""entities"", [])\n        else:\n            return []\n\n    @classmethod\n    def load(cls,\n             meta: Dict[Text, Any],\n             model_dir: Text = None,\n             model_metadata: Metadata = None,\n             cached_component: Optional[\'BilstmCRFEntityExtractor\'] = None,\n             **kwargs: Any\n             ) -> \'BilstmCRFEntityExtractor\':\n\n        tf_config = cls.get_config_proto(meta)\n        sess = tf.Session(config=tf_config)\n\n        model = Model(meta)\n        if model_dir and meta.get(""file""):\n            file_name = meta.get(""file"")\n            checkpoint = os.path.join(model_dir, file_name + \'.ckpt\')\n            model.saver.restore(sess, checkpoint)\n\n            with io.open(os.path.join(\n                    model_dir,\n                    file_name + ""_char_to_id.pkl""), \'rb\') as f:\n                char_to_id = pickle.load(f)\n            with io.open(os.path.join(\n                    model_dir,\n                    file_name + ""_id_to_tag.pkl""), \'rb\') as f:\n                id_to_tag = pickle.load(f)\n\n            return BilstmCRFEntityExtractor(\n                component_config=meta,\n                ent_tagger=model,\n                session=sess,\n                char_to_id=char_to_id,\n                id_to_tag=id_to_tag)\n\n        else:\n            return BilstmCRFEntityExtractor(meta)\n\n    def persist(self,\n                file_name: Text, model_dir: Text) -> Optional[Dict[Text, Any]]:\n        # type: (Text) -> Optional[Dict[Text, Any]]\n        """"""Persist this model into the passed directory.\n        Return the metadata necessary to load the model again.""""""\n        if self.session is None:\n            return {""classifier_file"": None}\n        checkpoint = os.path.join(model_dir, file_name + "".ckpt"")\n\n        try:\n            os.makedirs(os.path.dirname(checkpoint))\n        except OSError as e:\n            # be happy if someone already created the path\n            import errno\n            if e.errno != errno.EEXIST:\n                raise\n\n        save_model(self.session, self.model, checkpoint, logger)\n\n        with io.open(os.path.join(\n                model_dir,\n                file_name + ""_char_to_id.pkl""), \'wb\') as f:\n            pickle.dump(self.char_to_id, f)\n        with io.open(os.path.join(\n                model_dir,\n                file_name + ""_id_to_tag.pkl""), \'wb\') as f:\n            pickle.dump(self.id_to_tag, f)\n\n        return {""file"": file_name}\n'"
rasa_nlu_gao/extractors/jieba_pseg_extractor.py,0,"b'from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nimport os\nimport warnings\n\nfrom builtins import str\nfrom typing import Any\nfrom typing import Dict\nfrom typing import Optional\nfrom typing import Text\n\nfrom rasa.nlu import utils\nfrom rasa.nlu.extractors import EntityExtractor\nfrom rasa.nlu.model import Metadata\nfrom rasa.nlu.training_data import Message, TrainingData\nfrom rasa.nlu.utils import write_json_to_file\nimport itertools\n\nimport jieba\nimport jieba.posseg as pseg\n\nclass JiebaPsegExtractor(EntityExtractor):\n    provides = [""entities""]\n\n    defaults = {\n        # nr\xef\xbc\x9a\xe4\xba\xba\xe5\x90\x8d\xef\xbc\x8cns\xef\xbc\x9a\xe5\x9c\xb0\xe5\x90\x8d\xef\xbc\x8cnt\xef\xbc\x9a\xe6\x9c\xba\xe6\x9e\x84\xe5\x90\x8d, m: numbers\n        ""part_of_speech"": [\'nr\'],\n        ""dictionary_path"": None\n    }\n\n    def __init__(self, component_config=None):\n        # type: (Optional[Dict[Text, Text]]) -> None\n        super(JiebaPsegExtractor, self).__init__(component_config)\n        dictionary_path = self.component_config.get(\'dictionary_path\')\n\n        if dictionary_path is not None:\n            jieba.load_userdict(dictionary_path)\n\n    def process(self, message, **kwargs):\n        # type: (Message, **Any) -> None\n        extracted = self.add_extractor_name(self.posseg_cut_examples(message))\n\n        message.set(""entities"", extracted, add_to_output=True)\n\n    def posseg_cut_examples(self, example):\n        raw_entities = example.get(""entities"", [])\n        example_posseg = self.posseg(example.text)\n\n        for (item_posseg, start, end) in example_posseg:\n            part_of_speech = self.component_config[""part_of_speech""]\n            for (word_posseg, flag_posseg) in item_posseg:\n                if flag_posseg in part_of_speech:\n                    raw_entities.append({\n                        \'start\': start,\n                        \'end\': end,\n                        \'value\': word_posseg,\n                        \'entity\': flag_posseg\n                    })\n        return raw_entities\n\n    @staticmethod\n    def posseg(text):\n        # type: (Text) -> List[Token]\n        result = []\n        for (word, start, end) in jieba.tokenize(text):\n            pseg_data = [(w, f) for (w, f) in pseg.cut(word)]\n            result.append((pseg_data, start, end))\n\n        return result\n\n    @classmethod\n    def load(cls,\n             meta: Dict[Text, Any],\n             model_dir=None,  # type: Optional[Text]\n             model_metadata=None,  # type: Optional[Metadata]\n             cached_component=None,  # type: Optional[Component]\n             **kwargs  # type:**Any\n             ):\n\n        return cls(meta)\n'"
rasa_nlu_gao/extractors/kashgari_entity_extractor.py,0,"b'import logging\nfrom typing import Any, Dict, List, Optional, Text\n\nfrom rasa.nlu.extractors import EntityExtractor\nfrom rasa.nlu.model import Metadata\nfrom rasa.nlu.training_data import Message\n\nimport os\nimport shutil\nimport kashgari\nfrom kashgari.embeddings import BERTEmbedding\nimport kashgari.tasks.labeling as labeling\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau, TensorBoard\n\nlogger = logging.getLogger(__name__)\n\n\nclass KashgariEntityExtractor(EntityExtractor):\n    provides = [""entities""]\n\n    defaults = {\n        ""bert_model_path"": None,\n        ""sequence_length"": ""auto"",\n        ""layer_nums"": 4,\n        ""trainable"": False,\n        ""labeling_model"": ""BiLSTM_CRF_Model"",\n        ""epochs"": 10,\n        ""batch_size"": 32,\n        ""validation_split"": 0.2,\n        ""patience"": 5,\n        ""factor"": 0.5, # factor of reduce learning late everytime\n        ""verbose"": 1,\n        ""use_cudnn_cell"": False\n    }\n\n    def __init__(self,\n                 component_config=None,\n                 model=None):\n        super(KashgariEntityExtractor, self).__init__(component_config)\n\n        bert_model_path = self.component_config.get(\'bert_model_path\')\n        sequence_length = self.component_config.get(\'sequence_length\')\n        layer_nums = self.component_config.get(\'layer_nums\')\n        trainable = self.component_config.get(\'trainable\')\n        use_cudnn_cell = self.component_config.get(\'use_cudnn_cell\')\n\n        kashgari.config.use_cudnn_cell = use_cudnn_cell\n\n        self.labeling_model = self.component_config.get(\'labeling_model\')\n\n        self.bert_embedding = BERTEmbedding(bert_model_path,\n                                        task=kashgari.LABELING,\n                                        layer_nums = layer_nums,\n                                        trainable=trainable,\n                                        sequence_length=sequence_length)\n\n        self.model = model\n\n\n    def train(self, training_data, cfg, **kwargs):\n        labeling_model = eval(""labeling."" + self.labeling_model)\n\n        epochs = self.component_config.get(\'epochs\')\n        batch_size = self.component_config.get(\'batch_size\')\n        validation_split = self.component_config.get(\'validation_split\')\n        patience = self.component_config.get(\'patience\')\n        factor = self.component_config.get(\'factor\')\n        verbose = self.component_config.get(\'verbose\')\n\n        filtered_entity_examples = self.filter_trainable_entities(training_data.training_examples)\n\n        X, Y = self._create_dataset(filtered_entity_examples)\n\n        train_x, validate_x, train_y, validate_y = train_test_split( X, Y, test_size=validation_split, random_state=100)\n\n        self.model = labeling_model(self.bert_embedding)\n\n        checkpoint = ModelCheckpoint(\n            \'entity_weights.h5\',\n            monitor=\'val_loss\',\n            save_best_only=True,\n            save_weights_only=False,\n            verbose=verbose)\n        early_stopping = EarlyStopping(\n            monitor=\'val_loss\',\n            patience=patience)\n        reduce_lr = ReduceLROnPlateau(\n            monitor=\'val_loss\',\n            factor=factor,\n            patience=patience,\n            verbose=verbose)\n\n        self.model.fit(\n            train_x,\n            train_y,\n            validate_x,\n            validate_y,\n            epochs=epochs,\n            batch_size=batch_size,\n            callbacks=[checkpoint, early_stopping, reduce_lr]\n        )\n\n    def _create_dataset(self, examples):\n        X, Y = [], []\n        for example in examples:\n            entity_offsets = self._convert_example(example)\n            data, label = self._predata(example.text, entity_offsets)\n            X.append(data)\n            Y.append(label)\n        return X, Y\n\n    def _convert_example(self, example):\n        def convert_entity(entity):\n            return entity[""start""], entity[""end""], entity[""entity""]\n        return [convert_entity(ent) for ent in example.get(""entities"", [])]\n\n    def _predata(self, text, entity_offsets):\n        value = \'O\'\n        bilou = [value for _ in text]\n\n        for (start, end, entity) in entity_offsets:\n            if start is not None and end is not None:\n                bilou[start] = \'B-\' + entity\n                for i in range(start+1, end):\n                    bilou[i] = \'I-\' + entity\n\n        return list(text), bilou\n\n    def process(self, message, **kwargs):\n        extracted = self.add_extractor_name(self.extract_entities(message))\n\n        message.set(""entities"",\n                    message.get(""entities"", []) + extracted,\n                    add_to_output=True)\n\n    def extract_entities(self, message):\n        if self.model is not None:\n            entities, result = self.model.predict_entities([list(message.text)], join_chunk=\'\'), []\n\n            for item in entities[0][\'labels\']:\n                result.append({\n                    \'start\': item[\'start\'],\n                    \'end\': item[\'start\'] + len(item[\'value\']),\n                    \'value\': item[\'value\'],\n                    \'entity\': item[\'entity\']\n                })\n\n            return result\n        else:\n            return []\n\n\n    def persist(self,\n                file_name: Text,\n                model_dir: Text) -> Optional[Dict[Text, Any]]:\n        model_path = os.path.join(model_dir, file_name)\n\n        self.model.save(model_path)\n\n        remove_file = os.path.join(model_path, \'model_weights.h5\')\n        os.remove(remove_file)\n        shutil.move(\'entity_weights.h5\', model_path)\n        os.rename(os.path.join(model_path, \'entity_weights.h5\'), os.path.join(model_path, \'model_weights.h5\'))\n\n        return {""file"": file_name}        \n\n    @classmethod\n    def load(cls,\n             meta: Dict[Text, Any],\n             model_dir: Optional[Text]=None,\n             model_metadata: Optional[\'Metadata\']=None,\n             cached_component: Optional[EntityExtractor]=None,\n             **kwargs: Any\n             ) -> \'KashgariEntityExtractor\':\n\n        if model_dir and meta.get(""file""):\n            file_name = meta.get(""file"")\n            labeling_model = os.path.join(model_dir, file_name)\n            loaded_model = kashgari.utils.load_model(labeling_model)\n            \n            return cls(component_config=meta,\n                       model=loaded_model)\n        else:\n            logger.warning(""Failed to load entity model. Maybe path {} ""\n                           ""doesn\'t exist""\n                           """".format(os.path.abspath(model_dir)))\n            return cls(component_config=meta)\n'"
rasa_nlu_gao/featurizers/__init__.py,0,b''
rasa_nlu_gao/featurizers/bert_vectors_featurizer.py,0,"b'from __future__ import division\nfrom __future__ import unicode_literals\nfrom __future__ import print_function\nfrom __future__ import absolute_import\n\nimport logging\nimport os\nimport re\nfrom typing import Any, Dict, List, Optional, Text\n\nfrom rasa.nlu import utils\nfrom rasa.nlu.featurizers import Featurizer\nfrom rasa.nlu.training_data import Message\nfrom rasa.nlu.components import Component\nfrom rasa.nlu.model import Metadata\nfrom bert_serving.client import ConcurrentBertClient\n\nimport numpy as np\nfrom tqdm import tqdm\n\nlogger = logging.getLogger(__name__)\n\n\nclass BertVectorsFeaturizer(Featurizer):\n    provides = [""text_features""]\n\n    defaults = {\n        ""ip"": \'localhost\',\n        ""port"": 5555,\n        ""port_out"": 5556,\n        ""show_server_config"": False,\n        ""output_fmt"": \'ndarray\',\n        ""check_version"": True,\n        ""timeout"": 5000,\n        ""identity"": None,\n        ""batch_size"": 128\n    }\n\n    @classmethod\n    def required_packages(cls):\n        return [""numpy"", ""bert_serving""]\n\n    def __init__(self, component_config=None):\n        super(BertVectorsFeaturizer, self).__init__(component_config)\n        ip = self.component_config[\'ip\']\n        port = self.component_config[\'port\']\n        port_out = self.component_config[\'port_out\']\n        show_server_config = self.component_config[\'show_server_config\']\n        output_fmt = self.component_config[\'output_fmt\']\n        check_version = self.component_config[\'check_version\']\n        timeout = self.component_config[\'timeout\']\n        identity = self.component_config[\'identity\']\n        self.bc = ConcurrentBertClient(\n            ip=ip,\n            port=int(port),\n            port_out=int(port_out),\n            show_server_config=show_server_config,\n            output_fmt=output_fmt,\n            check_version=check_version,\n            timeout=int(timeout),\n            identity=identity\n        )\n\n    def _get_message_text(self, message):\n        all_tokens = []\n\n        for msg in message:\n            all_tokens.append(msg.text)\n\n        bert_embedding = self.bc.encode(all_tokens, is_tokenized=False)\n\n        return np.squeeze(bert_embedding)\n\n    def train(self, training_data, cfg=None, **kwargs):\n        batch_size = self.component_config[\'batch_size\']\n\n        epochs = len(training_data.intent_examples) // batch_size + \\\n            int(len(training_data.intent_examples) % batch_size > 0)\n\n        for ep in tqdm(range(epochs), desc=""Epochs""):\n            end_idx = (ep + 1) * batch_size\n            start_idx = ep * batch_size\n            examples = training_data.intent_examples[start_idx:end_idx]\n            tokens_text = self._get_message_text(examples)\n            X = np.array(tokens_text)\n\n            for i, example in enumerate(examples):\n                if len(examples) > 1:\n                    example.set(\n                        ""text_features"", self._combine_with_existing_text_features(example, X[i]))\n                else:\n                    example.set(\n                        ""text_features"", self._combine_with_existing_text_features(example, X))\n\n\n    def process(self, message, **kwargs):\n        # type: (Message, **Any) -> None\n        message_text = self._get_message_text([message])\n\n        message.set(""text_features"", self._combine_with_existing_text_features(\n            message, message_text))\n\n    @classmethod\n    def load(cls,\n             meta,\n             model_dir=None,  # type: Text\n             model_metadata=None,  # type: Metadata\n             cached_component=None,  # type: Optional[Component]\n             **kwargs  # type: **Any\n             ):\n\n        return cls(meta)\n'"
rasa_nlu_gao/models/__init__.py,0,b''
rasa_nlu_gao/models/lenet.py,7,"b""from __future__ import division, print_function, absolute_import\r\n\r\nimport numpy as np\r\nimport tensorflow as tf\r\n\r\n# Build a convolutional neural network\r\ndef conv_net(x, n_classes, num_layers, layer_size, C2, dropout, is_training):\r\n    # Define a scope for reusing the variables\r\n    with tf.variable_scope('ConvNet'):\r\n        # Flatten the data to a 1-D vector for the fully connected layer\r\n        x = tf.contrib.layers.flatten(x)\r\n        reg = tf.contrib.layers.l2_regularizer(C2)\r\n        name = 'dense'\r\n        for i in range(num_layers):\r\n            x = tf.layers.dense(inputs=x,\r\n                                units=layer_size[i],\r\n                                activation=tf.nn.relu,\r\n                                kernel_regularizer=reg,\r\n                                name='hidden_layer_{}_{}'.format(name, i))\r\n            x = tf.layers.dropout(x, rate=dropout, training=is_training)\r\n\r\n        out = tf.layers.dense(inputs=x,\r\n                            units=n_classes,\r\n                            kernel_regularizer=reg,\r\n                            name='dense_layer_{}'.format(name))\r\n    return out\r\n"""
rasa_nlu_gao/models/model.py,82,"b'import numpy as np\nimport tensorflow as tf\nfrom tensorflow.contrib.crf import crf_log_likelihood\nfrom tensorflow.contrib.crf import viterbi_decode\nfrom tensorflow.contrib.layers.python.layers import initializers\nfrom tensorflow.contrib import rnn\n\nfrom rasa_nlu_gao.utils.bilstm_utils import result_to_json\nfrom rasa_nlu_gao.utils.bilstm_utils import iobes_iob, iob_iobes\n\nclass Model(object):\n\n    def __init__(self, config):\n\n        self.config = config\n\n        self.lr = config[""lr""]\n        self.char_dim = config[""char_dim""]\n        self.lstm_dim = config[""lstm_dim""]\n        self.seg_dim = config[""seg_dim""]\n        self.num_tags = config[""num_tags""]\n        self.num_chars = config[""num_chars""]  # \xe6\xa0\xb7\xe6\x9c\xac\xe4\xb8\xad\xe6\x80\xbb\xe5\xad\x97\xe6\x95\xb0\n        self.num_segs = 4 # 0,1,2,3\n\n        self.global_step = tf.Variable(0, trainable=False)\n        self.best_dev_f1 = tf.Variable(0.0, trainable=False)\n        self.best_test_f1 = tf.Variable(0.0, trainable=False)\n\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe6\x9d\x83\xe9\x87\x8d\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\xbe\x97\xe5\xa4\xaa\xe5\xb0\x8f\xef\xbc\x8c\xe9\x82\xa3\xe4\xb9\x88\xe4\xbf\xa1\xe5\x8f\xb7\xe5\xb0\x86\xe5\x9c\xa8\xe6\xaf\x8f\xe5\xb1\x82\xe9\x97\xb4\xe4\xbc\xa0\xe9\x80\x92\xe6\x97\xb6\xe9\x80\x90\xe6\xb8\x90\xe7\xbc\xa9\xe5\xb0\x8f\xe8\x80\x8c\xe9\x9a\xbe\xe4\xbb\xa5\xe4\xba\xa7\xe7\x94\x9f\xe4\xbd\x9c\xe7\x94\xa8\xe3\x80\x82\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x9d\x83\xe9\x87\x8d\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\xbe\x97\xe5\xa4\xaa\xe5\xa4\xa7\xef\xbc\x8c\xe9\x82\xa3\xe4\xbf\xa1\xe5\x8f\xb7\xe5\xb0\x86\xe5\x9c\xa8\xe6\xaf\x8f\xe5\xb1\x82\xe9\x97\xb4\xe4\xbc\xa0\xe9\x80\x92\xe6\x97\xb6\xe9\x80\x90\xe6\xb8\x90\xe6\x94\xbe\xe5\xa4\xa7\xe5\xb9\xb6\xe5\xaf\xbc\xe8\x87\xb4\xe5\x8f\x91\xe6\x95\xa3\xe5\x92\x8c\xe5\xa4\xb1\xe6\x95\x88\n        # \xe6\xad\xa4\xe6\x96\xb9\xe6\xb3\x95\xe4\xbc\x9a\xe8\xbf\x94\xe5\x9b\x9e\xe4\xb8\x80\xe4\xb8\xaa\xe7\x94\xa8\xe4\xba\x8e\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe6\x9d\x83\xe9\x87\x8d\xe7\x9a\x84\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe7\xa8\x8b\xe5\xba\x8f \xe2\x80\x9cXavier\xe2\x80\x9d\xef\xbc\x8c\xe7\xa1\xae\xe4\xbf\x9d\xe6\xaf\x8f\xe4\xb8\x80\xe5\xb1\x82\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe7\x9a\x84\xe6\x9d\x83\xe9\x87\x8d\xe4\xb8\x8d\xe5\xa4\xa7\xe4\xb8\x8d\xe5\xb0\x8f\xef\xbc\x8c\xe6\x96\xb9\xe5\xb7\xae\xe5\xb0\xbd\xe9\x87\x8f\xe7\x9b\xb8\xe7\xad\x89\n        self.initializer = initializers.xavier_initializer()\n\n        # add placeholders for the model\n        self.char_inputs = tf.placeholder(dtype=tf.int32,\n                                          shape=[None, None],\n                                          name=""ChatInputs"")\n        self.seg_inputs = tf.placeholder(dtype=tf.int32,\n                                         shape=[None, None],\n                                         name=""SegInputs"")\n\n        self.targets = tf.placeholder(dtype=tf.int32,\n                                      shape=[None, None],\n                                      name=""Targets"")\n        # dropout keep prob\n        self.dropout = tf.placeholder(dtype=tf.float32,\n                                      name=""Dropout"")\n\n        used = tf.sign(tf.abs(self.char_inputs))\n        length = tf.reduce_sum(used, reduction_indices=1)\n        self.lengths = tf.cast(length, tf.int32)\n        self.batch_size = tf.shape(self.char_inputs)[0]\n        self.num_steps = tf.shape(self.char_inputs)[-1]\n\n        #Add model type by crownpku bilstm or idcnn\n        self.model_type = config[\'model_type\']\n        #parameters for idcnn\n        self.layers = [\n            {\n                \'dilation\': 1\n            },\n            {\n                \'dilation\': 1\n            },\n            {\n                \'dilation\': 2\n            },\n        ]\n        self.filter_width = 3\n        self.num_filter = self.lstm_dim\n        self.embedding_dim = self.char_dim + self.seg_dim\n        self.repeat_times = 4\n        self.cnn_output_width = 0\n\n        # embeddings for chinese character and segmentation representation\n        # \xe6\xa0\xb9\xe6\x8d\xae char_inputs \xe5\x92\x8c seg_inputs \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\x90\x91\xe9\x87\x8f\n        embedding = self.embedding_layer(\n            self.char_inputs, self.seg_inputs, config)\n\n        if self.model_type == \'bilstm\':\n            # \xe5\x8f\x8c\xe5\x90\x91lstm\n            # apply dropout before feed to lstm layer\n            model_inputs = tf.nn.dropout(embedding, self.dropout)\n\n            # bi-directional lstm layer\n            model_outputs = self.biLSTM_layer(\n                model_inputs, self.lstm_dim, self.lengths)\n\n            # logits for tags\n            self.logits = self.project_layer_bilstm(model_outputs)\n\n        elif self.model_type == \'idcnn\':\n            # \xe8\x86\xa8\xe8\x83\x80\xe5\x8d\xb7\xe7\xa7\xaf\xe7\xbd\x91\xe7\xbb\x9c\n            # apply dropout before feed to idcnn layer\n            model_inputs = tf.nn.dropout(embedding, self.dropout)\n\n            # ldcnn layer\n            model_outputs = self.IDCNN_layer(model_inputs)\n\n            # logits for tags\n            self.logits = self.project_layer_idcnn(model_outputs)\n\n        else:\n            raise KeyError\n\n        # loss of the model\n        self.loss = self.loss_layer(self.logits, self.lengths)\n\n        with tf.variable_scope(""optimizer""):\n            optimizer = self.config[""optimizer""]\n            if optimizer == ""sgd"":\n                self.opt = tf.train.GradientDescentOptimizer(self.lr)\n            elif optimizer == ""adam"":\n                self.opt = tf.train.AdamOptimizer(self.lr)\n            elif optimizer == ""adgrad"":\n                self.opt = tf.train.AdagradOptimizer(self.lr)\n            else:\n                raise KeyError\n\n            # apply grad clip to avoid gradient explosion\n            # \xe6\xa2\xaf\xe5\xba\xa6\xe8\xa3\x81\xe5\x89\xaa\xe9\x98\xb2\xe6\xad\xa2\xe6\xa2\xaf\xe5\xba\xa6\xe7\x88\x86\xe7\x82\xb8\n            grads_vars = self.opt.compute_gradients(self.loss)\n            capped_grads_vars = [[tf.clip_by_value(g, -self.config[""clip""], self.config[""clip""]), v]\n                                 for g, v in grads_vars]\n            # \xe6\x9b\xb4\xe6\x96\xb0\xe6\xa2\xaf\xe5\xba\xa6\xef\xbc\x88\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x94\xa8\xe7\xa7\xbb\xe5\x8a\xa8\xe5\x9d\x87\xe5\x80\xbc\xe6\x9b\xb4\xe6\x96\xb0\xe6\xa2\xaf\xe5\xba\xa6\xe8\xaf\x95\xe8\xaf\x95\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe9\x87\x8d\xe6\x96\xb0\xe8\xb7\x91\xe4\xb8\x8b\xe7\xa8\x8b\xe5\xba\x8f\xef\xbc\x89\n            self.train_op = self.opt.apply_gradients(\n                capped_grads_vars, self.global_step)\n\n        # saver of the model\n        self.saver = tf.train.Saver(tf.global_variables(), max_to_keep=5)\n\n    def embedding_layer(self, char_inputs, seg_inputs, config, name=None):\n        """"""\n        :param char_inputs: one-hot encoding of sentence\n        :param seg_inputs: segmentation feature\n        :param config: wither use segmentation feature\n        :return: [1, num_steps, embedding size], \n        \xe6\xad\xa4\xe5\xa4\x84\xe5\x8f\xaa\xe5\xb5\x8c\xe5\x85\xa5\xe4\xba\x86\xe4\xb8\xa4\xe4\xb8\xaa\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe4\xb8\x8d\xe5\x90\x8c\xe5\x9c\xba\xe6\x99\xaf\xe4\xb8\x8b\xe5\x8f\xaf\xe4\xbb\xa5\xe5\xb5\x8c\xe5\x85\xa5\xe4\xb8\x8d\xe5\x90\x8c\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe5\xb5\x8c\xe5\x85\xa5\xe6\x8b\xbc\xe9\x9f\xb3\xe7\x89\xb9\xe5\xbe\x81\xe3\x80\x81\xe7\xac\xa6\xe5\x8f\xb7\xe7\x89\xb9\xe5\xbe\x81\xef\xbc\x8c\xe5\xba\x94\xe8\xaf\xa5\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x94\xa8\xe6\x9d\xa5\xe6\xa3\x80\xe6\xb5\x8b\xe9\x94\x99\xe5\x88\xab\xe5\xad\x97\xe5\x90\xa7 0.0\n        """"""\n        #\xe9\xab\x98:3 \xe8\xa1\x80:22 \xe7\xb3\x96:23 \xe5\x92\x8c:24 \xe9\xab\x98:3 \xe8\xa1\x80:22 \xe5\x8e\x8b:25 char_inputs=[3,22,23,24,3,22,25]\n        #\xe9\xab\x98\xe8\xa1\x80\xe7\xb3\x96\xe5\x92\x8c\xe9\xab\x98\xe8\xa1\x80\xe5\x8e\x8b \xe9\xab\x98\xe8\xa1\x80\xe7\xb3\x96=[1,2,3] \xe5\x92\x8c=[0] \xe9\xab\x98\xe8\xa1\x80\xe5\x8e\x8b=[1,2,3]  seg_inputs=[1,2,3,0,1,2,3]\n        embedding = []\n        with tf.variable_scope(""char_embedding"" if not name else name), tf.device(\'/cpu:0\'):\n            self.char_lookup = tf.get_variable(\n                name=""char_embedding"",\n                shape=[self.num_chars, self.char_dim],\n                initializer=self.initializer)\n            # embedding_lookup\xe8\xaf\xa6\xe8\xa7\xa3\xef\xbc\x9ahttps://blog.csdn.net/yinruiyang94/article/details/77600453\n            # \xe8\xbe\x93\xe5\x85\xa5char_inputs=\'\xe5\xb8\xb8\' \xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\xad\x97\xe5\x85\xb8\xe7\x9a\x84\xe7\xb4\xa2\xe5\xbc\x95/\xe7\xbc\x96\xe5\x8f\xb7/value\xe4\xb8\xba\xef\xbc\x9a8\n            # self.char_lookup=[2677*100]\xe7\x9a\x84\xe5\x90\x91\xe9\x87\x8f\xef\xbc\x8cchar_inputs\xe5\xad\x97\xe5\xaf\xb9\xe5\xba\x94\xe5\x9c\xa8\xe5\xad\x97\xe5\x85\xb8\xe7\x9a\x84\xe7\xb4\xa2\xe5\xbc\x95/\xe7\xbc\x96\xe5\x8f\xb7/key=[1]\n            embedding.append(tf.nn.embedding_lookup(\n                self.char_lookup, char_inputs))\n            #self.embedding1.append(tf.nn.embedding_lookup(self.char_lookup, char_inputs))\n            if config[""seg_dim""]:\n                with tf.variable_scope(""seg_embedding""), tf.device(\'/cpu:0\'):\n                    self.seg_lookup = tf.get_variable(\n                        name=""seg_embedding"",\n                        shape=[self.num_segs, self.seg_dim],  # shape=[4,20]\n                        initializer=self.initializer)\n                    embedding.append(tf.nn.embedding_lookup(\n                        self.seg_lookup, seg_inputs))\n            # shape(?, ?, 120) 100\xe7\xbb\xb4\xe7\x9a\x84\xe5\xad\x97\xe5\x90\x91\xe9\x87\x8f\xef\xbc\x8c20\xe7\xbb\xb4\xe7\x9a\x84tag\xe5\x90\x91\xe9\x87\x8f\n            embed = tf.concat(embedding, axis=-1)\n        return embed\n\n    def biLSTM_layer(self, model_inputs, lstm_dim, lengths, name=None):\n        """"""\n        :param lstm_inputs: [batch_size, num_steps, emb_size] \n        :return: [batch_size, num_steps, 2*lstm_dim] \n        """"""\n        with tf.variable_scope(""char_BiLSTM"" if not name else name):\n            lstm_cell = {}\n            for direction in [""forward"", ""backward""]:\n                with tf.variable_scope(direction):\n                    lstm_cell[direction] = rnn.CoupledInputForgetGateLSTMCell(\n                        lstm_dim,\n                        use_peepholes=True,\n                        initializer=self.initializer,\n                        state_is_tuple=True)\n            outputs, final_states = tf.nn.bidirectional_dynamic_rnn(\n                lstm_cell[""forward""],\n                lstm_cell[""backward""],\n                model_inputs,\n                dtype=tf.float32,\n                sequence_length=lengths)\n        return tf.concat(outputs, axis=2)\n\n    # Iterated Dilated CNN \xe8\x86\xa8\xe8\x83\x80\xe5\x8d\xb7\xe7\xa7\xaf\xe7\xbd\x91\xe7\xbb\x9c\n    def IDCNN_layer(self, model_inputs,\n                    name=None):\n        """"""\n        :param idcnn_inputs: [batch_size, num_steps, emb_size] \n        :return: [batch_size, num_steps, cnn_output_width]\n        """"""\n\n        # tf.expand_dims\xe4\xbc\x9a\xe5\x90\x91tensor\xe4\xb8\xad\xe6\x8f\x92\xe5\x85\xa5\xe4\xb8\x80\xe4\xb8\xaa\xe7\xbb\xb4\xe5\xba\xa6\xef\xbc\x8c\xe6\x8f\x92\xe5\x85\xa5\xe4\xbd\x8d\xe7\xbd\xae\xe5\xb0\xb1\xe6\x98\xaf\xe5\x8f\x82\xe6\x95\xb0\xe4\xbb\xa3\xe8\xa1\xa8\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\xef\xbc\x88\xe7\xbb\xb4\xe5\xba\xa6\xe4\xbb\x8e0\xe5\xbc\x80\xe5\xa7\x8b\xef\xbc\x89\xe3\x80\x82\n        # shape(?, ?, 120) \xe2\x80\x94\xe2\x80\x94> shape(?, 1, ?, 120)\n        model_inputs = tf.expand_dims(model_inputs, 1)\n        reuse = False\n        if self.dropout == 1.0:\n            reuse = True\n        with tf.variable_scope(""idcnn"" if not name else name):\n            #shape=[1*3*120*100]\n            shape = [1, self.filter_width, self.embedding_dim,\n                     self.num_filter]\n            print(shape)\n            filter_weights = tf.get_variable(\n                ""idcnn_filter"",\n                shape=[1, self.filter_width, self.embedding_dim,\n                       self.num_filter],\n                initializer=self.initializer)\n\n            """"""\n            shape of input = [batch, in_height, in_width, in_channels]\n            shape of filter = [filter_height, filter_width, in_channels, out_channels]\n            """"""\n            layerInput = tf.nn.conv2d(model_inputs,\n                                      filter_weights,\n                                      strides=[1, 1, 1, 1],\n                                      padding=""SAME"",\n                                      name=""init_layer"", use_cudnn_on_gpu=True)\n            finalOutFromLayers = []\n            totalWidthForLastDim = 0\n            for j in range(self.repeat_times):\n                for i in range(len(self.layers)):  # 1,1,2\n                    dilation = self.layers[i][\'dilation\']\n                    isLast = True if i == (len(self.layers) - 1) else False\n                    with tf.variable_scope(""atrous-conv-layer-%d"" % i,\n                                           reuse=True\n                                           if (reuse or j > 0) else False):\n                        # w \xe5\x8d\xb7\xe7\xa7\xaf\xe6\xa0\xb8\xe7\x9a\x84\xe9\xab\x98\xe5\xba\xa6\xef\xbc\x8c\xe5\x8d\xb7\xe7\xa7\xaf\xe6\xa0\xb8\xe7\x9a\x84\xe5\xae\xbd\xe5\xba\xa6\xef\xbc\x8c\xe5\x9b\xbe\xe5\x83\x8f\xe9\x80\x9a\xe9\x81\x93\xe6\x95\xb0\xef\xbc\x8c\xe5\x8d\xb7\xe7\xa7\xaf\xe6\xa0\xb8\xe4\xb8\xaa\xe6\x95\xb0\n                        w = tf.get_variable(\n                            ""filterW"",\n                            shape=[1, self.filter_width, self.num_filter,\n                                   self.num_filter],\n                            initializer=tf.contrib.layers.xavier_initializer())\n                        b = tf.get_variable(""filterB"", shape=[self.num_filter])\n\n                        conv = tf.nn.atrous_conv2d(layerInput,\n                                                   w,\n                                                   rate=dilation,\n                                                   padding=""SAME"")\n                        conv = tf.nn.bias_add(conv, b)\n                        conv = tf.nn.relu(conv)\n                        if isLast:\n                            finalOutFromLayers.append(conv)\n                            totalWidthForLastDim += self.num_filter\n                        layerInput = conv\n            finalOut = tf.concat(axis=3, values=finalOutFromLayers)\n            keepProb = 1.0 if reuse else 0.5\n            finalOut = tf.nn.dropout(finalOut, keepProb)\n\n            # Removes dimensions of size 1 from the shape of a tensor.\n            # \xe4\xbb\x8etensor\xe4\xb8\xad\xe5\x88\xa0\xe9\x99\xa4\xe6\x89\x80\xe6\x9c\x89\xe5\xa4\xa7\xe5\xb0\x8f\xe6\x98\xaf1\xe7\x9a\x84\xe7\xbb\xb4\xe5\xba\xa6\n            # Given a tensor input, this operation returns a tensor of the same type with all dimensions of size 1 removed.\n            # If you don\xe2\x80\x99t want to remove all size 1 dimensions, you can remove specific size 1 dimensions by specifying squeeze_dims.\n            # \xe7\xbb\x99\xe5\xae\x9a\xe5\xbc\xa0\xe9\x87\x8f\xe8\xbe\x93\xe5\x85\xa5\xef\xbc\x8c\xe6\xad\xa4\xe6\x93\x8d\xe4\xbd\x9c\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9b\xb8\xe5\x90\x8c\xe7\xb1\xbb\xe5\x9e\x8b\xe7\x9a\x84\xe5\xbc\xa0\xe9\x87\x8f\xef\xbc\x8c\xe5\xb9\xb6\xe5\x88\xa0\xe9\x99\xa4\xe6\x89\x80\xe6\x9c\x89\xe5\xb0\xba\xe5\xaf\xb8\xe4\xb8\xba1\xe7\x9a\x84\xe5\xb0\xba\xe5\xaf\xb8\xe3\x80\x82 \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe6\x83\xb3\xe5\x88\xa0\xe9\x99\xa4\xe6\x89\x80\xe6\x9c\x89\xe5\xb0\xba\xe5\xaf\xb81\xe5\xb0\xba\xe5\xaf\xb8\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe9\x80\x9a\xe8\xbf\x87\xe6\x8c\x87\xe5\xae\x9asqueeze_dims\xe6\x9d\xa5\xe5\x88\xa0\xe9\x99\xa4\xe7\x89\xb9\xe5\xae\x9a\xe4\xbd\x8d\xe7\xbd\xae\xe7\x9a\x841\xe5\xb0\xba\xe5\xaf\xb8\xe3\x80\x82\n            # shape(?, ?, ?, 400) \xe2\x80\x94\xe2\x80\x94> shape(?, ?, 400)\n            finalOut = tf.squeeze(finalOut, [1])\n\n            finalOut = tf.reshape(finalOut, [-1, totalWidthForLastDim])\n            self.cnn_output_width = totalWidthForLastDim\n            return finalOut\n\n    def project_layer_bilstm(self, lstm_outputs, name=None):\n        """"""\n        hidden layer between lstm layer and logits\n        :param lstm_outputs: [batch_size, num_steps, emb_size] \n        :return: [batch_size, num_steps, num_tags]\n        """"""\n        with tf.variable_scope(""project"" if not name else name):\n            with tf.variable_scope(""hidden""):\n                W = tf.get_variable(""W"", shape=[self.lstm_dim*2, self.lstm_dim],\n                                    dtype=tf.float32, initializer=self.initializer)\n\n                b = tf.get_variable(""b"", shape=[self.lstm_dim], dtype=tf.float32,\n                                    initializer=tf.zeros_initializer())\n                output = tf.reshape(lstm_outputs, shape=[-1, self.lstm_dim*2])\n                hidden = tf.tanh(tf.nn.xw_plus_b(output, W, b))\n\n            # project to score of tags\n            with tf.variable_scope(""logits""):\n                W = tf.get_variable(""W"", shape=[self.lstm_dim, self.num_tags],\n                                    dtype=tf.float32, initializer=self.initializer)\n\n                b = tf.get_variable(""b"", shape=[self.num_tags], dtype=tf.float32,\n                                    initializer=tf.zeros_initializer())\n\n                pred = tf.nn.xw_plus_b(hidden, W, b)\n\n            return tf.reshape(pred, [-1, self.num_steps, self.num_tags])\n\n    # Project layer for idcnn by crownpku\n    # Delete the hidden layer, and change bias initializer\n    def project_layer_idcnn(self, idcnn_outputs, name=None):\n        """"""\n        :param lstm_outputs: [batch_size, num_steps, emb_size] \n        :return: [batch_size, num_steps, num_tags]\n        """"""\n        with tf.variable_scope(""project"" if not name else name):\n\n            # project to score of tags\n            with tf.variable_scope(""logits""):\n                W = tf.get_variable(""W"", shape=[self.cnn_output_width, self.num_tags],\n                                    dtype=tf.float32, initializer=self.initializer)\n\n                b = tf.get_variable(""b"",  initializer=tf.constant(\n                    0.001, shape=[self.num_tags]))\n\n                # \xe7\xad\x89\xe5\x90\x8c\xe4\xba\x8ematmul(x, weights) + biases.\n                pred = tf.nn.xw_plus_b(idcnn_outputs, W, b)\n\n            # shape (?, ?, 51) 51\xe4\xb8\xbatag\xe7\x9a\x84\xe7\xa7\x8d\xe7\xb1\xbb\xe6\x95\xb0\xe9\x87\x8f\n            return tf.reshape(pred, [-1, self.num_steps, self.num_tags])\n\n    def loss_layer(self, project_logits, lengths, name=None):\n        """"""\n        calculate crf loss\n        :param project_logits: [1, num_steps, num_tags]\n        :return: scalar loss\n        """"""\n        with tf.variable_scope(""crf_loss"" if not name else name):\n            small = -1000.0\n            # pad logits for crf loss\n            # start_logits.shape (?, 1, 52)\n            start_logits = tf.concat(\n                [small * tf.ones(shape=[self.batch_size, 1, self.num_tags]), tf.zeros(shape=[self.batch_size, 1, 1])], axis=-1)\n            pad_logits = tf.cast(\n                small * tf.ones([self.batch_size, self.num_steps, 1]), tf.float32)\n            # project_logits.shape (?, ?, 51)\n            # pad_logits.shape (?, ?, 1)\n            # logits.shape (?, ?, 52)\n            logits = tf.concat([project_logits, pad_logits], axis=-1)\n            logits = tf.concat([start_logits, logits], axis=1)\n            targets = tf.concat(\n                [tf.cast(self.num_tags*tf.ones([self.batch_size, 1]), tf.int32), self.targets], axis=-1)\n\n            self.trans = tf.get_variable(\n                ""transitions"",\n                shape=[self.num_tags + 1, self.num_tags + 1],\n                initializer=self.initializer)\n\n            # crf_log_likelihood\xe5\x9c\xa8\xe4\xb8\x80\xe4\xb8\xaa\xe6\x9d\xa1\xe4\xbb\xb6\xe9\x9a\x8f\xe6\x9c\xba\xe5\x9c\xba\xe9\x87\x8c\xe9\x9d\xa2\xe8\xae\xa1\xe7\xae\x97\xe6\xa0\x87\xe7\xad\xbe\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84log-likelihood\n            # inputs: \xe4\xb8\x80\xe4\xb8\xaa\xe5\xbd\xa2\xe7\x8a\xb6\xe4\xb8\xba[batch_size, max_seq_len, num_tags] \xe7\x9a\x84tensor,\n            # \xe4\xb8\x80\xe8\x88\xac\xe4\xbd\xbf\xe7\x94\xa8BILSTM\xe5\xa4\x84\xe7\x90\x86\xe4\xb9\x8b\xe5\x90\x8e\xe8\xbe\x93\xe5\x87\xba\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe4\xbb\x96\xe8\xa6\x81\xe6\xb1\x82\xe7\x9a\x84\xe5\xbd\xa2\xe7\x8a\xb6\xe4\xbd\x9c\xe4\xb8\xbaCRF\xe5\xb1\x82\xe7\x9a\x84\xe8\xbe\x93\xe5\x85\xa5.\n            # tag_indices: \xe4\xb8\x80\xe4\xb8\xaa\xe5\xbd\xa2\xe7\x8a\xb6\xe4\xb8\xba[batch_size, max_seq_len] \xe7\x9a\x84\xe7\x9f\xa9\xe9\x98\xb5,\xe5\x85\xb6\xe5\xae\x9e\xe5\xb0\xb1\xe6\x98\xaf\xe7\x9c\x9f\xe5\xae\x9e\xe6\xa0\x87\xe7\xad\xbe.\n            # sequence_lengths: \xe4\xb8\x80\xe4\xb8\xaa\xe5\xbd\xa2\xe7\x8a\xb6\xe4\xb8\xba [batch_size] \xe7\x9a\x84\xe5\x90\x91\xe9\x87\x8f,\xe8\xa1\xa8\xe7\xa4\xba\xe6\xaf\x8f\xe4\xb8\xaa\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6.\n            # transition_params: \xe5\xbd\xa2\xe7\x8a\xb6\xe4\xb8\xba[num_tags, num_tags] \xe7\x9a\x84\xe8\xbd\xac\xe7\xa7\xbb\xe7\x9f\xa9\xe9\x98\xb5\n            # log_likelihood: \xe6\xa0\x87\xe9\x87\x8f, log-likelihood\n            log_likelihood, self.trans = crf_log_likelihood(\n                inputs=logits,\n                tag_indices=targets,\n                transition_params=self.trans,\n                sequence_lengths=lengths+1)\n            return tf.reduce_mean(-log_likelihood)\n\n    def create_feed_dict(self, is_train, batch):\n        """"""\n        :param is_train: Flag, True for train batch\n        :param batch: list train/evaluate data \n        :return: structured data to feed\n        """"""\n        _, chars, segs, tags = batch\n        feed_dict = {\n            self.char_inputs: np.asarray(chars),\n            self.seg_inputs: np.asarray(segs),\n            self.dropout: 1.0,  # \xe8\xaf\x84\xe4\xbc\xb0\xe6\x97\xa0\xe9\x9c\x80 dropout\n        }\n        if is_train:\n            feed_dict[self.targets] = np.asarray(tags)\n            feed_dict[self.dropout] = self.config[""dropout_keep""]\n        return feed_dict\n\n    def run_step(self, sess, is_train, batch):\n        """"""\n        :param sess: session to run the batch\n        :param is_train: a flag indicate if it is a train batch\n        :param batch: a dict containing batch data\n        :return: batch result, loss of the batch or logits\n        """"""\n        feed_dict = self.create_feed_dict(is_train, batch)\n        if is_train:\n            global_step, loss, _ = sess.run(\n                [self.global_step, self.loss, self.train_op],\n                feed_dict)\n            return global_step, loss\n        else:\n            lengths, logits = sess.run([self.lengths, self.logits], feed_dict)\n            return lengths, logits\n\n    def decode(self, logits, lengths, matrix):\n        """"""\n        :param logits: [batch_size, num_steps, num_tags]float32, logits\n        :param lengths: [batch_size]int32, real length of each sequence\n        :param matrix: transaction matrix for inference\n        :return:\n        """"""\n        # inference final labels usa viterbi Algorithm\n        paths = []\n        small = -1000.0\n        start = np.asarray([[small]*self.num_tags + [0]])\n        for score, length in zip(logits, lengths):\n            score = score[:length]\n            pad = small * np.ones([length, 1])\n            logits = np.concatenate([score, pad], axis=1)\n            logits = np.concatenate([start, logits], axis=0)\n            path, _ = viterbi_decode(logits, matrix)\n\n            paths.append(path[1:])\n        return paths\n\n    def evaluate(self, sess, data_manager, id_to_tag):\n        """"""\n        :param sess: session  to run the model \n        :param data: list of data\n        :param id_to_tag: index to tag name\n        :return: evaluate result\n        """"""\n        results = []\n        trans = self.trans.eval()\n        for batch in data_manager.iter_batch():\n            strings = batch[0]\n            tags = batch[-1]\n            lengths, scores = self.run_step(sess, False, batch)\n            batch_paths = self.decode(scores, lengths, trans)\n            for i in range(len(strings)):\n                result = []\n                string = strings[i][:lengths[i]]\n                gold = iobes_iob([id_to_tag[int(x)]\n                                  for x in tags[i][:lengths[i]]])\n                pred = iobes_iob([id_to_tag[int(x)]\n                                  for x in batch_paths[i][:lengths[i]]])\n                #gold = iob_iobes([id_to_tag[int(x)] for x in tags[i][:lengths[i]]])\n                #pred = iob_iobes([id_to_tag[int(x)] for x in batch_paths[i][:lengths[i]]])\n                for char, gold, pred in zip(string, gold, pred):\n                    result.append("" "".join([char, gold, pred]))\n                results.append(result)\n        return results\n\n    def evaluate_line(self, sess, inputs, id_to_tag):\n        lengths, scores = self.run_step(sess, False, inputs)\n        trans = self.trans.eval(session=sess)\n        batch_paths = self.decode(scores, lengths, trans)\n        tags = [id_to_tag[idx] for idx in batch_paths[0]]\n        return result_to_json(inputs[0][0], tags)\n'"
rasa_nlu_gao/utils/__init__.py,0,b''
rasa_nlu_gao/utils/bilstm_utils.py,1,"b'from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nimport os\n\nimport math\nimport random\nimport tensorflow as tf\n\n\ndef char_mapping(sentences, lower):\n    """"""\n    Create a dictionary and a mapping of words, sorted by frequency.\n    """"""\n    chars = [[x[0].lower() if lower else x[0] for x in s] for s in sentences]\n    dico = create_dico(chars)  # \xe5\xad\x97\xe5\x85\xb8\xef\xbc\x8c\xe5\x8c\x85\xe5\x90\xab\xe6\xaf\x8f\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe5\x8f\x8a\xe5\x85\xb6\xe5\x87\xba\xe7\x8e\xb0\xe7\x9a\x84\xe9\xa2\x91\xe7\x8e\x87\n    dico[""<PAD>""] = 10000001  # \xe5\xae\x9a\xe4\xb9\x89\xe5\xa1\xab\xe5\x85\x85\xe8\xaf\x8d\n    dico[\'<UNK>\'] = 10000000  # \xe5\xae\x9a\xe4\xb9\x89\xe6\x9c\xaa\xe7\x99\xbb\xe5\xbd\x95\xe8\xaf\x8d\n    char_to_id, id_to_char = create_mapping(dico)\n    return dico, char_to_id, id_to_char\n\n\ndef create_dico(item_list):\n    """"""\n    Create a dictionary of items from a list of list of items.\n    \xe5\xad\x97\xe5\x85\xb8 \xe5\xad\x97\xe7\xac\xa6:\xe5\x87\xba\xe7\x8e\xb0\xe7\x9a\x84\xe9\xa2\x91\xe7\x8e\x87\n    """"""\n    assert type(item_list) is list\n    dico = {}\n    for items in item_list:\n        for item in items:\n            if item not in dico:\n                dico[item] = 1\n            else:\n                dico[item] += 1\n    return dico\n\n\ndef create_mapping(dico):\n    """"""\n    Create a mapping (item to ID / ID to item) from a dictionary.\n    Items are ordered by decreasing frequency.\n    """"""\n    sorted_items = sorted(dico.items(), key=lambda x: (-x[1], x[0]))\n    id_to_item = {i: v[0] for i, v in enumerate(sorted_items)}\n    item_to_id = {v: k for k, v in id_to_item.items()}\n    return item_to_id, id_to_item\n\n\ndef tag_mapping(sentences):\n    """"""\n    Create a dictionary and a mapping of tags, sorted by frequency.\n    """"""\n    tags = []\n    for s in sentences:\n        ts = []\n        for char in s:\n            tag = char[1]\n            ts.append(tag)\n        tags.append(ts)\n\n    dico_tags = create_dico(tags)\n    tag_to_id, id_to_tag = create_mapping(dico_tags)\n\n    return tag_to_id, id_to_tag\n\n\ndef prepare_dataset(sentences, char_to_id, tag_to_id, seg, lower=False, train=True):\n    """"""\n    Prepare the dataset. Return a list of lists of dictionaries containing:\n        - word indexes\n        - word char indexes\n        - tag indexes\n\n    Args:\n      sentences: \xe4\xbc\xa0\xe5\x85\xa5\xe7\x9a\x84\xe5\x8f\xa5\xe5\xad\x90\xef\xbc\x88\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\x8e\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84tag\xe6\xa0\x87\xe8\xae\xb0\xef\xbc\x89\n      char_to_id: \xe5\xad\x97\xe7\xac\xa6\xe4\xb8\x8e\xe4\xbd\x8d\xe7\xbd\xae\xe7\x9a\x84\xe6\x98\xa0\xe5\xb0\x84\xe5\x85\xb3\xe7\xb3\xbb\n      tag_to_id: tag\xe6\xa0\x87\xe8\xae\xb0\xe4\xb8\x8e\xe4\xbd\x8d\xe7\xbd\xae\xe7\x9a\x84\xe6\x98\xa0\xe5\xb0\x84\xe5\x85\xb3\xe7\xb3\xbb\n\n    Return:\n      string: \xe8\xae\xad\xe7\xbb\x83\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe5\x8f\xa5\xe5\xad\x90\n      chars:  \xe5\x8f\xa5\xe5\xad\x90\xe4\xb8\xad\xe6\xaf\x8f\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe5\x9c\xa8\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\n      segs:   pkuseg\xe5\x88\x86\xe8\xaf\x8d\xe5\x90\x8e\xe5\x8f\xa5\xe5\xad\x90\xe6\xaf\x8f\xe4\xb8\xaa\xe8\xaf\x8d\xe8\xaf\xad\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6, 0 \xe8\xa1\xa8\xe7\xa4\xba\xe5\x8d\x95\xe4\xb8\xaa\xe5\xad\x97 1\xe8\xa1\xa8\xe7\xa4\xba\xe8\xaf\x8d\xe8\xaf\xad\xe7\x9a\x84\xe5\xbc\x80\xe5\xa4\xb4 2\xe8\xa1\xa8\xe7\xa4\xba\xe8\xaf\x8d\xe8\xaf\xad\xe7\x9a\x84\xe4\xb8\xad\xe9\x97\xb4\xe8\xaf\x8d 3\xe8\xa1\xa8\xe7\xa4\xba\xe8\xaf\x8d\xe8\xaf\xad\xe7\x9a\x84\xe7\xbb\x93\xe5\xb0\xbe\n      tags:   \xe5\x8f\xa5\xe5\xad\x90\xe4\xb8\xad\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84tag\xe6\xa0\x87\xe8\xae\xb0\xe5\x9c\xa8\xe5\xad\x97\xe5\x85\xb8\xe4\xb8\xad\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\n    """"""\n\n    none_index = 0\n\n    def f(x):\n        return x.lower() if lower else x\n    data = []\n    for s in sentences:\n        string = [w[0] for w in s]\n        chars = [char_to_id[f(w) if f(w) in char_to_id else \'<UNK>\']\n                 for w in string]\n        segs = get_seg_features("""".join(string), seg)\n        if train:\n            tags = [tag_to_id[w[1]] for w in s]\n        else:\n            tags = [none_index for _ in chars]\n        data.append([string, chars, segs, tags])\n\n    return data\n\n\ndef get_seg_features(string, seg):\n    """"""\n    Segment text with pkuseg\n    features are represented in bies format\n    s donates single word\n    \xe5\xb0\x86\xe8\xbe\x93\xe5\x85\xa5\xe5\x8f\xa5\xe5\xad\x90\xe8\xbf\x9b\xe8\xa1\x8cpkuseg\xe5\x88\x86\xe8\xaf\x8d\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe8\x8e\xb7\xe5\x8f\x96\xe6\xaf\x8f\xe4\xb8\xaa\xe8\xaf\x8d\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6\xe7\x89\xb9\xe5\xbe\x81\n    0 \xe4\xbb\xa3\xe8\xa1\xa8\xe4\xb8\xba\xe5\x8d\x95\xe5\xad\x97\xef\xbc\x8c1\xe4\xbb\xa3\xe8\xa1\xa8\xe8\xaf\x8d\xe7\x9a\x84\xe5\xbc\x80\xe5\xa4\xb4\xef\xbc\x8c2\xe4\xbb\xa3\xe8\xa1\xa8\xe8\xaf\x8d\xe7\x9a\x84\xe4\xb8\xad\xe9\x97\xb4\xe9\x83\xa8\xe5\x88\x86\xef\xbc\x8c3\xe4\xbb\xa3\xe8\xa1\xa8\xe8\xaf\x8d\xe7\x9a\x84\xe7\xbb\x93\xe5\xb0\xbe\n    \xe4\xbe\x8b\xe5\xa6\x82\xef\xbc\x8cstring=\xe9\xab\x98\xe8\xa1\x80\xe7\xb3\x96\xe5\x92\x8c\xe8\xa1\x80\xe5\x8e\x8b \xe9\xab\x98\xe8\xa1\x80\xe7\xb3\x96=[1,2,3] \xe5\x92\x8c=[0] \xe9\xab\x98\xe8\xa1\x80\xe5\x8e\x8b=[1,3] seg_inputs=[1,2,3,0,1,3]\n    """"""\n    seg_feature = []\n\n    for word in seg.cut(string):\n        if len(word) == 1:\n            seg_feature.append(0)\n        else:\n            tmp = [2] * len(word)\n            tmp[0] = 1\n            tmp[-1] = 3\n            seg_feature.extend(tmp)\n\n    return seg_feature\n\n\nclass BatchManager(object):\n    def __init__(self, data,  batch_size):\n        # \xe6\x8e\x92\xe5\xba\x8f\xe5\xb9\xb6\xe5\xa1\xab\xe5\x85\x85\xef\xbc\x8c\xe4\xbd\xbf\xe5\x8d\x95\xe4\xb8\xaa\xe6\x89\xb9\xe6\xac\xa1\xe7\x9a\x84\xe6\xaf\x8f\xe4\xb8\xaa\xe6\xa0\xb7\xe6\x9c\xac\xe4\xbf\x9d\xe6\x8c\x81\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\x80\xe8\x87\xb4\xef\xbc\x8c\xe4\xb8\x8d\xe5\x90\x8c\xe6\x89\xb9\xe6\xac\xa1\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\x8d\xe4\xb8\x80\xe5\xae\x9a\xe7\x9b\xb8\xe5\x90\x8c\n        self.batch_data = self.sort_and_pad(data, batch_size)\n        self.len_data = len(self.batch_data)\n\n    def sort_and_pad(self, data, batch_size):\n        num_batch = int(math.ceil(len(data) / batch_size))\n        # \xe6\x8c\x89\xe5\x8f\xa5\xe5\xad\x90\xe9\x95\xbf\xe5\xba\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8e\x92\xe5\xba\x8f\n        sorted_data = sorted(data, key=lambda x: len(x[0]))\n        batch_data = list()\n        for i in range(num_batch):\n            batch_data.append(self.pad_data(\n                sorted_data[i*int(batch_size): (i+1)*int(batch_size)]))\n        return batch_data\n\n    @staticmethod\n    def pad_data(data):\n        strings = []\n        chars = []\n        segs = []\n        targets = []\n        max_length = max([len(sentence[0]) for sentence in data])\n        for line in data:\n            string, char, seg, target = line\n            padding = [0] * (max_length - len(string))\n            strings.append(string + padding)\n            chars.append(char + padding)\n            segs.append(seg + padding)\n            targets.append(target + padding)\n\n        return [strings, chars, segs, targets]\n\n    def iter_batch(self, shuffle=False):\n        if shuffle:\n            random.shuffle(self.batch_data)\n        for idx in range(self.len_data):\n            yield self.batch_data[idx]\n\n\ndef result_to_json(string, tags):\n    item = {\n        ""string"": string,\n        ""entities"": []\n    }\n    entity_name = """"\n    entity_start = 0\n    idx = 0\n\n    for char, tag in zip(string, tags):\n        if tag[0] == ""S"":\n            item[""entities""].append(\n                {""value"": char, ""start"": idx, ""end"": idx+1, ""entity"": tag[2:]})\n        elif tag[0] == ""B"":\n            entity_name += char\n            entity_start = idx\n        elif tag[0] == ""I"":\n            entity_name += char\n        elif tag[0] == ""E"":\n            entity_name += char\n            item[""entities""].append(\n                {""value"": entity_name,\n                 ""start"": entity_start,\n                 ""end"": idx + 1,\n                 ""entity"": tag[2:]})\n            entity_name = """"\n        else:\n            entity_name = """"\n            entity_start = idx\n        idx += 1\n    return item\n\n\ndef iob_iobes(tags):\n    """"""\n    IOB -> IOBES\n    """"""\n    new_tags = []\n    for i, tag in enumerate(tags):\n        if tag == \'O\':\n            new_tags.append(tag)\n        elif tag.split(\'-\')[0] == \'B\':\n            if i + 1 != len(tags) and \\\n               tags[i + 1].split(\'-\')[0] == \'I\':\n                new_tags.append(tag)\n            else:\n                new_tags.append(tag.replace(\'B-\', \'S-\'))\n        elif tag.split(\'-\')[0] == \'I\':\n            if i + 1 < len(tags) and \\\n                    tags[i + 1].split(\'-\')[0] == \'I\':\n                new_tags.append(tag)\n            else:\n                new_tags.append(tag.replace(\'I-\', \'E-\'))\n        else:\n            raise Exception(\'Invalid IOB format!\')\n    return new_tags\n\n\ndef iobes_iob(tags):\n    """"""\n    IOBES -> IOB\n    """"""\n    new_tags = []\n    for i, tag in enumerate(tags):\n        if tag.split(\'-\')[0] == \'B\':\n            new_tags.append(tag)\n        elif tag.split(\'-\')[0] == \'I\':\n            new_tags.append(tag)\n        elif tag.split(\'-\')[0] == \'S\':\n            new_tags.append(tag.replace(\'S-\', \'B-\'))\n        elif tag.split(\'-\')[0] == \'E\':\n            new_tags.append(tag.replace(\'E-\', \'I-\'))\n        elif tag.split(\'-\')[0] == \'O\':\n            new_tags.append(tag)\n        else:\n            raise Exception(\'Invalid format!\')\n    return new_tags\n\n\ndef iob2(tags):\n    for i, tag in enumerate(tags):\n        if tag == \'O\':\n            continue\n        split = tag.split(\'-\')\n        if len(split) != 2 or split[0] not in [\'I\', \'B\']:\n            return False\n        if split[0] == \'B\':\n            continue\n        elif i == 0 or tags[i - 1] == \'O\':  # conversion IOB1 to IOB2\n            tags[i] = \'B\' + tag[1:]\n        elif tags[i - 1][1:] == tag[1:]:\n            continue\n        else:  # conversion IOB1 to IOB2\n            tags[i] = \'B\' + tag[1:]\n    return True\n\n\ndef save_model(sess, model, checkpoint_path, logger):\n    model.saver.save(sess, checkpoint_path)\n    logger.warning(""model saved"")\n\n\ndef create_model(session, Model_class, config, logger):\n    # create model, reuse parameters if exists\n    model = Model_class(config)\n\n    logger.warning(""Created model with fresh parameters."")\n    session.run(tf.global_variables_initializer())\n    return model\n\n\ndef input_from_line(line, char_to_id, seg):\n    """"""\n    Take sentence data and return an input for\n    the training or the evaluation function.\n    \xe5\xb0\x86\xe8\xbe\x93\xe5\x85\xa5\xe8\xbd\xac\xe5\x8c\x96\xe4\xb8\xba string, chars, segs, tags \xe5\x9b\x9b\xe4\xb8\xaa\xe7\x89\xb9\xe5\xbe\x81\n    """"""\n    line = full_to_half(line)\n    line = replace_html(line)\n    inputs = list()\n    inputs.append([line])\n    line.replace("" "", ""$"")\n    # \xe6\x9c\xaa\xe7\x99\xbb\xe5\xbd\x95\xe8\xaf\x8d\xe6\x8c\x89<UNK>\xe5\xad\x97\xe7\xac\xa6\xe5\xa4\x84\xe7\x90\x86\n    inputs.append(\n        [[char_to_id[char]\n          if char in char_to_id else char_to_id[""<UNK>""] for char in line\n          ]]\n    )\n\n    inputs.append([get_seg_features(line, seg)])\n    inputs.append([[]])\n    return inputs\n\n\ndef full_to_half(s):\n    """"""\n    Convert full-width character to half-width one\n    \xe5\xb0\x86\xe5\x85\xa8\xe8\xa7\x92\xe5\xad\x97\xe7\xac\xa6\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe5\x8d\x8a\xe8\xa7\x92\xe5\xad\x97\xe7\xac\xa6\n    """"""\n    n = []\n    for char in s:\n        num = ord(char)\n        if num == 0x3000:\n            num = 32\n        elif 0xFF01 <= num <= 0xFF5E:\n            num -= 0xfee0\n        char = chr(num)\n        n.append(char)\n    return \'\'.join(n)\n\n\ndef replace_html(s):\n    s = s.replace(\'&quot;\', \'""\')\n    s = s.replace(\'&amp;\', \'&\')\n    s = s.replace(\'&lt;\', \'<\')\n    s = s.replace(\'&gt;\', \'>\')\n    s = s.replace(\'&nbsp;\', \' \')\n    s = s.replace(""&ldquo;"", """")\n    s = s.replace(""&rdquo;"", """")\n    s = s.replace(""&mdash;"", """")\n    s = s.replace(""\\xa0"", "" "")\n    return(s)\n'"
rasa_nlu_gao/models/bert/__init__.py,0,"b'# coding=utf-8\n# Copyright 2018 The Google AI Language Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n'"
rasa_nlu_gao/models/bert/encoder.py,5,"b'#!/usr/bin/python\n# coding:utf-8\n""""""\nreplaces bert-as-service encoding as a function\n""""""\n\nimport os,time\nimport tensorflow as tf\nfrom tensorflow.python.estimator.estimator import Estimator\nfrom tensorflow.python.estimator.run_config import RunConfig\nfrom multiprocessing import cpu_count\nfrom . import modeling, tokenization\nfrom .extract_features import model_fn_builder, convert_lst_to_features, PoolingStrategy\n\n\nclass Encoder(object):\n    def __init__(self, model_dir, max_seq_len=10):\n        self.model_dir = model_dir\n        self.max_seq_len = max_seq_len\n        self.estimator, self.tokenizer = self.create_estimator_and_tokenizer()\n\n    def create_estimator_and_tokenizer(self):\n        config_fp = os.path.join(self.model_dir, \'bert_config.json\')\n        checkpoint_fp = os.path.join(self.model_dir, \'bert_model.ckpt\')\n        vocab_fp = os.path.join(self.model_dir, \'vocab.txt\')\n\n        tokenizer = tokenization.FullTokenizer(vocab_file=vocab_fp)\n\n        model_fn = model_fn_builder(\n            bert_config=modeling.BertConfig.from_json_file(config_fp),\n            init_checkpoint=checkpoint_fp,\n            pooling_strategy=PoolingStrategy.NONE,\n            pooling_layer=[-2]\n        )\n\n        config = tf.ConfigProto(\n            device_count={\n                \'CPU\': cpu_count()\n            },\n            inter_op_parallelism_threads=0,\n            intra_op_parallelism_threads=0,\n            gpu_options={\n                \'allow_growth\': True\n            }\n        )\n\n        estimator = Estimator(model_fn, config=RunConfig(\n            session_config=config), model_dir=None)\n\n        return estimator, tokenizer\n\n    def input_fn_builder(self, msg):\n        def gen():\n            for _ in range(1):\n                tmp_f = list(convert_lst_to_features(msg, self.max_seq_len, self.tokenizer))\n                yield {\n                    \'input_ids\': [f.input_ids for f in tmp_f],\n                    \'input_mask\': [f.input_mask for f in tmp_f],\n                    \'input_type_ids\': [f.input_type_ids for f in tmp_f]\n                }\n\n        def input_fn():\n            return (tf.data.Dataset.from_generator(\n                gen,\n                output_types={\'input_ids\': tf.int32,\n                            \'input_mask\': tf.int32,\n                            \'input_type_ids\': tf.int32,\n                            },\n                output_shapes={\n                    \'input_ids\': (None, self.max_seq_len),\n                    \'input_mask\': (None, self.max_seq_len),\n                    \'input_type_ids\': (None, self.max_seq_len)}).prefetch(10))\n\n        return input_fn\n\n    def encode(self, questions):\n        input_fn = self.input_fn_builder(questions)\n        result = self.estimator.predict(input_fn)\n\n        for rq in result:\n            query_vec = rq[\'encodes\']\n        return query_vec\n'"
rasa_nlu_gao/models/bert/extract_features.py,21,"b'# coding=utf-8\n# Copyright 2018 The Google AI Language Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport re\nfrom enum import Enum\n\nimport tensorflow as tf\nfrom tensorflow.python.estimator.model_fn import EstimatorSpec\n\nfrom . import modeling, tokenization\n\nimport code\n\nclass PoolingStrategy(Enum):\n    NONE = 0\n    REDUCE_MAX = 1\n    REDUCE_MEAN = 2\n    REDUCE_MEAN_MAX = 3\n    FIRST_TOKEN = 4  # corresponds to [CLS] for single sequences\n    LAST_TOKEN = 5  # corresponds to [SEP] for single sequences\n    CLS_TOKEN = 4  # corresponds to the first token for single seq.\n    SEP_TOKEN = 5  # corresponds to the last token for single seq.\n\n    def __str__(self):\n        return self.name\n\n    @staticmethod\n    def from_string(s):\n        try:\n            return PoolingStrategy[s]\n        except KeyError:\n            raise ValueError()\n\n\ndef minus_mask(x, mask, offset=1e30):\n    """"""\n    masking by subtract a very large number\n    :param x: sequence data in the shape of [B, L, D]\n    :param mask: 0-1 mask in the shape of [B, L]\n    :param offset: very large negative number\n    :return: masked x\n    """"""\n    return x - tf.expand_dims(1.0 - mask, axis=-1) * offset\n\n\ndef mul_mask(x, mask):\n    """"""\n    masking by multiply zero\n    :param x: sequence data in the shape of [B, L, D]\n    :param mask: 0-1 mask in the shape of [B, L]\n    :return: masked x\n    """"""\n    return x * tf.expand_dims(mask, axis=-1)\n\n\ndef masked_reduce_max(x, mask):\n    return tf.reduce_max(minus_mask(x, mask), axis=1)\n\n\ndef masked_reduce_mean(x, mask, jitter=1e-10):\n    return tf.reduce_sum(mul_mask(x, mask), axis=1) / (tf.reduce_sum(mask, axis=1, keepdims=True) + jitter)\n\n\nclass InputExample(object):\n\n    def __init__(self, unique_id, text_a, text_b):\n        self.unique_id = unique_id\n        self.text_a = text_a\n        self.text_b = text_b\n\n\nclass InputFeatures(object):\n    """"""A single set of features of data.""""""\n\n    def __init__(self, input_ids, input_mask, input_type_ids):\n        # self.unique_id = unique_id\n        # self.tokens = tokens\n        self.input_ids = input_ids\n        self.input_mask = input_mask\n        self.input_type_ids = input_type_ids\n\n\ndef model_fn_builder(bert_config, init_checkpoint, use_one_hot_embeddings=False,\n                     pooling_strategy=PoolingStrategy.REDUCE_MEAN,\n                     pooling_layer=[-2]):\n    """"""Returns `model_fn` closure for TPUEstimator.""""""\n\n    def model_fn(features, labels, mode, params):  # pylint: disable=unused-argument\n        """"""The `model_fn` for TPUEstimator.""""""\n\n        # client_id = features[""client_id""]\n        input_ids = features[""input_ids""]\n        input_mask = features[""input_mask""]\n        input_type_ids = features[""input_type_ids""]\n\n        model = modeling.BertModel(\n            config=bert_config,\n            is_training=False,\n            input_ids=input_ids,\n            input_mask=input_mask,\n            token_type_ids=input_type_ids,\n            use_one_hot_embeddings=use_one_hot_embeddings)\n\n        if mode != tf.estimator.ModeKeys.PREDICT:\n            raise ValueError(""Only PREDICT modes are supported: %s"" % (mode))\n\n        tvars = tf.trainable_variables()\n        (assignment_map, initialized_variable_names\n         ) = modeling.get_assignment_map_from_checkpoint(tvars, init_checkpoint)\n\n        tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n\n        all_layers = []\n        if len(pooling_layer) == 1:\n            encoder_layer = model.all_encoder_layers[pooling_layer[0]]\n        else:\n            for layer in pooling_layer:\n                all_layers.append(model.all_encoder_layers[layer])\n            encoder_layer = tf.concat(all_layers, -1)\n\n        input_mask = tf.cast(input_mask, tf.float32)\n        if pooling_strategy == PoolingStrategy.REDUCE_MEAN:\n            pooled = masked_reduce_mean(encoder_layer, input_mask)\n        elif pooling_strategy == PoolingStrategy.REDUCE_MAX:\n            pooled = masked_reduce_max(encoder_layer, input_mask)\n        elif pooling_strategy == PoolingStrategy.REDUCE_MEAN_MAX:\n            pooled = tf.concat([masked_reduce_mean(encoder_layer, input_mask),\n                                masked_reduce_max(encoder_layer, input_mask)], axis=1)\n        elif pooling_strategy == PoolingStrategy.FIRST_TOKEN or pooling_strategy == PoolingStrategy.CLS_TOKEN:\n            pooled = tf.squeeze(encoder_layer[:, 0:1, :], axis=1)\n        elif pooling_strategy == PoolingStrategy.LAST_TOKEN or pooling_strategy == PoolingStrategy.SEP_TOKEN:\n            seq_len = tf.cast(tf.reduce_sum(input_mask, axis=1), tf.int32)\n            rng = tf.range(0, tf.shape(seq_len)[0])\n            indexes = tf.stack([rng, seq_len - 1], 1)\n            pooled = tf.gather_nd(encoder_layer, indexes)\n        elif pooling_strategy == PoolingStrategy.NONE:\n            pooled = encoder_layer\n        else:\n            raise NotImplementedError()\n\n        predictions = {\n            # \'client_id\': client_id,\n            \'encodes\': pooled\n        }\n\n        return EstimatorSpec(mode=mode, predictions=predictions)\n\n    return model_fn\n\n\ndef convert_lst_to_features(lst_str, seq_length, tokenizer):\n    """"""Loads a data file into a list of `InputBatch`s.""""""\n\n    for (ex_index, example) in enumerate(read_examples(lst_str)):\n        tokens_a = tokenizer.tokenize(example.text_a)\n\n        tokens_b = None\n        if example.text_b:\n            tokens_b = tokenizer.tokenize(example.text_b)\n\n        if tokens_b:\n            # Modifies `tokens_a` and `tokens_b` in place so that the total\n            # length is less than the specified length.\n            # Account for [CLS], [SEP], [SEP] with ""- 3""\n            _truncate_seq_pair(tokens_a, tokens_b, seq_length - 3)\n        else:\n            # Account for [CLS] and [SEP] with ""- 2""\n            if len(tokens_a) > seq_length - 2:\n                tokens_a = tokens_a[0:(seq_length - 2)]\n\n        # The convention in BERT is:\n        # (a) For sequence pairs:\n        #  tokens:   [CLS] is this jack ##son ##ville ? [SEP] no it is not . [SEP]\n        #  type_ids: 0     0  0    0    0     0       0 0     1  1  1  1   1 1\n        # (b) For single sequences:\n        #  tokens:   [CLS] the dog is hairy . [SEP]\n        #  type_ids: 0     0   0   0  0     0 0\n        #\n        # Where ""type_ids"" are used to indicate whether this is the first\n        # sequence or the second sequence. The embedding vectors for `type=0` and\n        # `type=1` were learned during pre-training and are added to the wordpiece\n        # embedding vector (and position vector). This is not *strictly* necessary\n        # since the [SEP] token unambiguously separates the sequences, but it makes\n        # it easier for the model to learn the concept of sequences.\n        #\n        # For classification tasks, the first vector (corresponding to [CLS]) is\n        # used as as the ""sentence vector"". Note that this only makes sense because\n        # the entire model is fine-tuned.\n        tokens = []\n        input_type_ids = []\n        tokens.append(""[CLS]"")\n        input_type_ids.append(0)\n        for token in tokens_a:\n            tokens.append(token)\n            input_type_ids.append(0)\n        tokens.append(""[SEP]"")\n        input_type_ids.append(0)\n\n        if tokens_b:\n            for token in tokens_b:\n                tokens.append(token)\n                input_type_ids.append(1)\n            tokens.append(""[SEP]"")\n            input_type_ids.append(1)\n\n        input_ids = tokenizer.convert_tokens_to_ids(tokens)\n\n        # The mask has 1 for real tokens and 0 for padding tokens. Only real\n        # tokens are attended to.\n        input_mask = [1] * len(input_ids)\n\n        # Zero-pad up to the sequence length.\n        while len(input_ids) < seq_length:\n            input_ids.append(0)\n            input_mask.append(0)\n            input_type_ids.append(0)\n\n        assert len(input_ids) == seq_length\n        assert len(input_mask) == seq_length\n        assert len(input_type_ids) == seq_length\n\n        # if ex_index < 5:\n        #     tf.logging.info(""*** Example ***"")\n        #     tf.logging.info(""unique_id: %s"" % (example.unique_id))\n        #     tf.logging.info(""tokens: %s"" % "" "".join(\n        #         [tokenization.printable_text(x) for x in tokens]))\n        #     tf.logging.info(""input_ids: %s"" % "" "".join([str(x) for x in input_ids]))\n        #     tf.logging.info(""input_mask: %s"" % "" "".join([str(x) for x in input_mask]))\n        #     tf.logging.info(\n        #         ""input_type_ids: %s"" % "" "".join([str(x) for x in input_type_ids]))\n\n        yield InputFeatures(\n            # unique_id=example.unique_id,\n            # tokens=tokens,\n            input_ids=input_ids,\n            input_mask=input_mask,\n            input_type_ids=input_type_ids)\n\n\ndef _truncate_seq_pair(tokens_a, tokens_b, max_length):\n    """"""Truncates a sequence pair in place to the maximum length.""""""\n\n    # This is a simple heuristic which will always truncate the longer sequence\n    # one token at a time. This makes more sense than truncating an equal percent\n    # of tokens from each, since if one sequence is very short then each token\n    # that\'s truncated likely contains more information than a longer sequence.\n    while True:\n        total_length = len(tokens_a) + len(tokens_b)\n        if total_length <= max_length:\n            break\n        if len(tokens_a) > len(tokens_b):\n            tokens_a.pop()\n        else:\n            tokens_b.pop()\n\n\ndef read_examples(lst_strs):\n    """"""Read a list of `InputExample`s from a list of strings.""""""\n    unique_id = 0\n    for ss in lst_strs:\n        line = tokenization.convert_to_unicode(ss)\n        if not line:\n            continue\n        line = line.strip()\n        text_a = None\n        text_b = None\n        m = re.match(r""^(.*) \\|\\|\\| (.*)$"", line)\n        if m is None:\n            text_a = line\n        else:\n            text_a = m.group(1)\n            text_b = m.group(2)\n        yield InputExample(unique_id=unique_id, text_a=text_a, text_b=text_b)\n        unique_id += 1\n'"
rasa_nlu_gao/models/bert/modeling.py,78,"b'# coding=utf-8\n# Copyright 2018 The Google AI Language Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport collections\nimport copy\nimport json\nimport math\nimport re\n\nimport six\nimport tensorflow as tf\n\n\nclass BertConfig(object):\n    """"""Configuration for `BertModel`.""""""\n\n    def __init__(self,\n                 vocab_size,\n                 hidden_size=768,\n                 num_hidden_layers=12,\n                 num_attention_heads=12,\n                 intermediate_size=3072,\n                 hidden_act=""gelu"",\n                 hidden_dropout_prob=0.1,\n                 attention_probs_dropout_prob=0.1,\n                 max_position_embeddings=512,\n                 type_vocab_size=16,\n                 initializer_range=0.02):\n        """"""Constructs BertConfig.\n\n        Args:\n          vocab_size: Vocabulary size of `inputs_ids` in `BertModel`.\n          hidden_size: Size of the encoder layers and the pooler layer.\n          num_hidden_layers: Number of hidden layers in the Transformer encoder.\n          num_attention_heads: Number of attention heads for each attention layer in\n            the Transformer encoder.\n          intermediate_size: The size of the ""intermediate"" (i.e., feed-forward)\n            layer in the Transformer encoder.\n          hidden_act: The non-linear activation function (function or string) in the\n            encoder and pooler.\n          hidden_dropout_prob: The dropout probability for all fully connected\n            layers in the embeddings, encoder, and pooler.\n          attention_probs_dropout_prob: The dropout ratio for the attention\n            probabilities.\n          max_position_embeddings: The maximum sequence length that this model might\n            ever be used with. Typically set this to something large just in case\n            (e.g., 512 or 1024 or 2048).\n          type_vocab_size: The vocabulary size of the `token_type_ids` passed into\n            `BertModel`.\n          initializer_range: The stdev of the truncated_normal_initializer for\n            initializing all weight matrices.\n        """"""\n        self.vocab_size = vocab_size\n        self.hidden_size = hidden_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.hidden_act = hidden_act\n        self.intermediate_size = intermediate_size\n        self.hidden_dropout_prob = hidden_dropout_prob\n        self.attention_probs_dropout_prob = attention_probs_dropout_prob\n        self.max_position_embeddings = max_position_embeddings\n        self.type_vocab_size = type_vocab_size\n        self.initializer_range = initializer_range\n\n    @classmethod\n    def from_dict(cls, json_object):\n        """"""Constructs a `BertConfig` from a Python dictionary of parameters.""""""\n        config = BertConfig(vocab_size=None)\n        for (key, value) in six.iteritems(json_object):\n            config.__dict__[key] = value\n        return config\n\n    @classmethod\n    def from_json_file(cls, json_file):\n        """"""Constructs a `BertConfig` from a json file of parameters.""""""\n        with tf.gfile.GFile(json_file, ""r"") as reader:\n            text = reader.read()\n        return cls.from_dict(json.loads(text))\n\n    def to_dict(self):\n        """"""Serializes this instance to a Python dictionary.""""""\n        output = copy.deepcopy(self.__dict__)\n        return output\n\n    def to_json_string(self):\n        """"""Serializes this instance to a JSON string.""""""\n        return json.dumps(self.to_dict(), indent=2, sort_keys=True) + ""\\n""\n\n\nclass BertModel(object):\n    """"""BERT model (""Bidirectional Embedding Representations from a Transformer"").\n\n    Example usage:\n\n    ```python\n    # Already been converted into WordPiece token ids\n    input_ids = tf.constant([[31, 51, 99], [15, 5, 0]])\n    input_mask = tf.constant([[1, 1, 1], [1, 1, 0]])\n    token_type_ids = tf.constant([[0, 0, 1], [0, 2, 0]])\n\n    config = modeling.BertConfig(vocab_size=32000, hidden_size=512,\n      num_hidden_layers=8, num_attention_heads=6, intermediate_size=1024)\n\n    model = modeling.BertModel(config=config, is_training=True,\n      input_ids=input_ids, input_mask=input_mask, token_type_ids=token_type_ids)\n\n    label_embeddings = tf.get_variable(...)\n    pooled_output = model.get_pooled_output()\n    logits = tf.matmul(pooled_output, label_embeddings)\n    ...\n    ```\n    """"""\n\n    def __init__(self,\n                 config,\n                 is_training,\n                 input_ids,\n                 input_mask=None,\n                 token_type_ids=None,\n                 use_one_hot_embeddings=True,\n                 scope=None):\n        """"""Constructor for BertModel.\n\n        Args:\n          config: `BertConfig` instance.\n          is_training: bool. rue for training model, false for eval model. Controls\n            whether dropout will be applied.\n          input_ids: int32 Tensor of shape [batch_size, seq_length].\n          input_mask: (optional) int32 Tensor of shape [batch_size, seq_length].\n          token_type_ids: (optional) int32 Tensor of shape [batch_size, seq_length].\n          use_one_hot_embeddings: (optional) bool. Whether to use one-hot word\n            embeddings or tf.embedding_lookup() for the word embeddings. On the TPU,\n            it is must faster if this is True, on the CPU or GPU, it is faster if\n            this is False.\n          scope: (optional) variable scope. Defaults to ""bert"".\n\n        Raises:\n          ValueError: The config is invalid or one of the input tensor shapes\n            is invalid.\n        """"""\n        config = copy.deepcopy(config)\n        if not is_training:\n            config.hidden_dropout_prob = 0.0\n            config.attention_probs_dropout_prob = 0.0\n\n        input_shape = get_shape_list(input_ids, expected_rank=2)\n        batch_size = input_shape[0]\n        seq_length = input_shape[1]\n\n        if input_mask is None:\n            input_mask = tf.ones(shape=[batch_size, seq_length], dtype=tf.int32)\n\n        if token_type_ids is None:\n            token_type_ids = tf.zeros(shape=[batch_size, seq_length], dtype=tf.int32)\n\n        with tf.variable_scope(scope, default_name=""bert""):\n            with tf.variable_scope(""embeddings""):\n                # Perform embedding lookup on the word ids.\n                (self.embedding_output, self.embedding_table) = embedding_lookup(\n                    input_ids=input_ids,\n                    vocab_size=config.vocab_size,\n                    embedding_size=config.hidden_size,\n                    initializer_range=config.initializer_range,\n                    word_embedding_name=""word_embeddings"",\n                    use_one_hot_embeddings=use_one_hot_embeddings)\n\n                # Add positional embeddings and token type embeddings, then layer\n                # normalize and perform dropout.\n                self.embedding_output = embedding_postprocessor(\n                    input_tensor=self.embedding_output,\n                    use_token_type=True,\n                    token_type_ids=token_type_ids,\n                    token_type_vocab_size=config.type_vocab_size,\n                    token_type_embedding_name=""token_type_embeddings"",\n                    use_position_embeddings=True,\n                    position_embedding_name=""position_embeddings"",\n                    initializer_range=config.initializer_range,\n                    max_position_embeddings=config.max_position_embeddings,\n                    dropout_prob=config.hidden_dropout_prob)\n\n            with tf.variable_scope(""encoder""):\n                # This converts a 2D mask of shape [batch_size, seq_length] to a 3D\n                # mask of shape [batch_size, seq_length, seq_length] which is used\n                # for the attention scores.\n                attention_mask = create_attention_mask_from_input_mask(\n                    input_ids, input_mask)\n\n                # Run the stacked transformer.\n                # `sequence_output` shape = [batch_size, seq_length, hidden_size].\n                self.all_encoder_layers = transformer_model(\n                    input_tensor=self.embedding_output,\n                    attention_mask=attention_mask,\n                    hidden_size=config.hidden_size,\n                    num_hidden_layers=config.num_hidden_layers,\n                    num_attention_heads=config.num_attention_heads,\n                    intermediate_size=config.intermediate_size,\n                    intermediate_act_fn=get_activation(config.hidden_act),\n                    hidden_dropout_prob=config.hidden_dropout_prob,\n                    attention_probs_dropout_prob=config.attention_probs_dropout_prob,\n                    initializer_range=config.initializer_range,\n                    do_return_all_layers=True)\n\n            self.sequence_output = self.all_encoder_layers[-1]\n            # The ""pooler"" converts the encoded sequence tensor of shape\n            # [batch_size, seq_length, hidden_size] to a tensor of shape\n            # [batch_size, hidden_size]. This is necessary for segment-level\n            # (or segment-pair-level) classification tasks where we need a fixed\n            # dimensional representation of the segment.\n            with tf.variable_scope(""pooler""):\n                # We ""pool"" the model by simply taking the hidden state corresponding\n                # to the first token. We assume that this has been pre-trained\n                first_token_tensor = tf.squeeze(self.sequence_output[:, 0:1, :], axis=1)\n                # https://github.com/google-research/bert/issues/43#issuecomment-435980269\n                self.pooled_output = tf.layers.dense(\n                    first_token_tensor,\n                    config.hidden_size,\n                    activation=tf.tanh,\n                    kernel_initializer=create_initializer(config.initializer_range))\n\n    def get_pooled_output(self):\n        return self.pooled_output\n\n    def get_sequence_output(self):\n        """"""Gets final hidden layer of encoder.\n\n        Returns:\n          float Tensor of shape [batch_size, seq_length, hidden_size] corresponding\n          to the final hidden of the transformer encoder.\n        """"""\n        return self.sequence_output\n\n    def get_all_encoder_layers(self):\n        return self.all_encoder_layers\n\n    def get_embedding_output(self):\n        """"""Gets output of the embedding lookup (i.e., input to the transformer).\n\n        Returns:\n          float Tensor of shape [batch_size, seq_length, hidden_size] corresponding\n          to the output of the embedding layer, after summing the word\n          embeddings with the positional embeddings and the token type embeddings,\n          then performing layer normalization. This is the input to the transformer.\n        """"""\n        return self.embedding_output\n\n    def get_embedding_table(self):\n        return self.embedding_table\n\n\ndef gelu(input_tensor):\n    """"""Gaussian Error Linear Unit.\n\n    This is a smoother version of the RELU.\n    Original paper: https://arxiv.org/abs/1606.08415\n\n    Args:\n      input_tensor: float Tensor to perform activation.\n\n    Returns:\n      `input_tensor` with the GELU activation applied.\n    """"""\n    cdf = 0.5 * (1.0 + tf.erf(input_tensor / tf.sqrt(2.0)))\n    return input_tensor * cdf\n\n\ndef get_activation(activation_string):\n    """"""Maps a string to a Python function, e.g., ""relu"" => `tf.nn.relu`.\n\n    Args:\n      activation_string: String name of the activation function.\n\n    Returns:\n      A Python function corresponding to the activation function. If\n      `activation_string` is None, empty, or ""linear"", this will return None.\n      If `activation_string` is not a string, it will return `activation_string`.\n\n    Raises:\n      ValueError: The `activation_string` does not correspond to a known\n        activation.\n    """"""\n\n    # We assume that anything that""s not a string is already an activation\n    # function, so we just return it.\n    if not isinstance(activation_string, six.string_types):\n        return activation_string\n\n    if not activation_string:\n        return None\n\n    act = activation_string.lower()\n    if act == ""linear"":\n        return None\n    elif act == ""relu"":\n        return tf.nn.relu\n    elif act == ""gelu"":\n        return gelu\n    elif act == ""tanh"":\n        return tf.tanh\n    else:\n        raise ValueError(""Unsupported activation: %s"" % act)\n\n\ndef get_assignment_map_from_checkpoint(tvars, init_checkpoint):\n    """"""Compute the union of the current variables and checkpoint variables.""""""\n    assignment_map = {}\n    initialized_variable_names = {}\n\n    name_to_variable = collections.OrderedDict()\n    for var in tvars:\n        name = var.name\n        m = re.match(""^(.*):\\\\d+$"", name)\n        if m is not None:\n            name = m.group(1)\n        name_to_variable[name] = var\n\n    init_vars = tf.train.list_variables(init_checkpoint)\n\n    assignment_map = collections.OrderedDict()\n    for x in init_vars:\n        (name, var) = (x[0], x[1])\n        if name not in name_to_variable:\n            continue\n        assignment_map[name] = name\n        initialized_variable_names[name] = 1\n        initialized_variable_names[name + "":0""] = 1\n\n    return (assignment_map, initialized_variable_names)\n\n\ndef dropout(input_tensor, dropout_prob):\n    """"""Perform dropout.\n\n    Args:\n      input_tensor: float Tensor.\n      dropout_prob: Python float. The probability of dropping out a value (NOT of\n        *keeping* a dimension as in `tf.nn.dropout`).\n\n    Returns:\n      A version of `input_tensor` with dropout applied.\n    """"""\n    if dropout_prob is None or dropout_prob == 0.0:\n        return input_tensor\n\n    output = tf.nn.dropout(input_tensor, 1.0 - dropout_prob)\n    return output\n\n\ndef layer_norm(input_tensor, name=None):\n    """"""Run layer normalization on the last dimension of the tensor.""""""\n    return tf.contrib.layers.layer_norm(\n        inputs=input_tensor, begin_norm_axis=-1, begin_params_axis=-1, scope=name)\n\n\ndef layer_norm_and_dropout(input_tensor, dropout_prob, name=None):\n    """"""Runs layer normalization followed by dropout.""""""\n    output_tensor = layer_norm(input_tensor, name)\n    output_tensor = dropout(output_tensor, dropout_prob)\n    return output_tensor\n\n\ndef create_initializer(initializer_range=0.02):\n    """"""Creates a `truncated_normal_initializer` with the given range.""""""\n    return tf.truncated_normal_initializer(stddev=initializer_range)\n\n\ndef embedding_lookup(input_ids,\n                     vocab_size,\n                     embedding_size=128,\n                     initializer_range=0.02,\n                     word_embedding_name=""word_embeddings"",\n                     use_one_hot_embeddings=False):\n    """"""Looks up words embeddings for id tensor.\n\n    Args:\n      input_ids: int32 Tensor of shape [batch_size, seq_length] containing word\n        ids.\n      vocab_size: int. Size of the embedding vocabulary.\n      embedding_size: int. Width of the word embeddings.\n      initializer_range: float. Embedding initialization range.\n      word_embedding_name: string. Name of the embedding table.\n      use_one_hot_embeddings: bool. If True, use one-hot method for word\n        embeddings. If False, use `tf.nn.embedding_lookup()`. One hot is better\n        for TPUs.\n\n    Returns:\n      float Tensor of shape [batch_size, seq_length, embedding_size].\n    """"""\n    # This function assumes that the input is of shape [batch_size, seq_length,\n    # num_inputs].\n    #\n    # If the input is a 2D tensor of shape [batch_size, seq_length], we\n    # reshape to [batch_size, seq_length, 1].\n    if input_ids.shape.ndims == 2:\n        input_ids = tf.expand_dims(input_ids, axis=[-1])\n\n    embedding_table = tf.get_variable(\n        name=word_embedding_name,\n        shape=[vocab_size, embedding_size],\n        initializer=create_initializer(initializer_range))\n\n    if use_one_hot_embeddings:\n        flat_input_ids = tf.reshape(input_ids, [-1])\n        one_hot_input_ids = tf.one_hot(flat_input_ids, depth=vocab_size)\n        output = tf.matmul(one_hot_input_ids, embedding_table)\n    else:\n        output = tf.nn.embedding_lookup(embedding_table, input_ids)\n\n    input_shape = get_shape_list(input_ids)\n\n    output = tf.reshape(output,\n                        input_shape[0:-1] + [input_shape[-1] * embedding_size])\n    return (output, embedding_table)\n\n\ndef embedding_postprocessor(input_tensor,\n                            use_token_type=False,\n                            token_type_ids=None,\n                            token_type_vocab_size=16,\n                            token_type_embedding_name=""token_type_embeddings"",\n                            use_position_embeddings=True,\n                            position_embedding_name=""position_embeddings"",\n                            initializer_range=0.02,\n                            max_position_embeddings=512,\n                            dropout_prob=0.1):\n    """"""Performs various post-processing on a word embedding tensor.\n\n    Args:\n      input_tensor: float Tensor of shape [batch_size, seq_length,\n        embedding_size].\n      use_token_type: bool. Whether to add embeddings for `token_type_ids`.\n      token_type_ids: (optional) int32 Tensor of shape [batch_size, seq_length].\n        Must be specified if `use_token_type` is True.\n      token_type_vocab_size: int. The vocabulary size of `token_type_ids`.\n      token_type_embedding_name: string. The name of the embedding table variable\n        for token type ids.\n      use_position_embeddings: bool. Whether to add position embeddings for the\n        position of each token in the sequence.\n      position_embedding_name: string. The name of the embedding table variable\n        for positional embeddings.\n      initializer_range: float. Range of the weight initialization.\n      max_position_embeddings: int. Maximum sequence length that might ever be\n        used with this model. This can be longer than the sequence length of\n        input_tensor, but cannot be shorter.\n      dropout_prob: float. Dropout probability applied to the final output tensor.\n\n    Returns:\n      float tensor with same shape as `input_tensor`.\n\n    Raises:\n      ValueError: One of the tensor shapes or input values is invalid.\n    """"""\n    input_shape = get_shape_list(input_tensor, expected_rank=3)\n    batch_size = input_shape[0]\n    seq_length = input_shape[1]\n    width = input_shape[2]\n\n    if seq_length > max_position_embeddings:\n        raise ValueError(""The seq length (%d) cannot be greater than ""\n                         ""`max_position_embeddings` (%d)"" %\n                         (seq_length, max_position_embeddings))\n\n    output = input_tensor\n\n    if use_token_type:\n        if token_type_ids is None:\n            raise ValueError(""`token_type_ids` must be specified if""\n                             ""`use_token_type` is True."")\n        token_type_table = tf.get_variable(\n            name=token_type_embedding_name,\n            shape=[token_type_vocab_size, width],\n            initializer=create_initializer(initializer_range))\n        # This vocab will be small so we always do one-hot here, since it is always\n        # faster for a small vocabulary.\n        flat_token_type_ids = tf.reshape(token_type_ids, [-1])\n        one_hot_ids = tf.one_hot(flat_token_type_ids, depth=token_type_vocab_size)\n        token_type_embeddings = tf.matmul(one_hot_ids, token_type_table)\n        token_type_embeddings = tf.reshape(token_type_embeddings,\n                                           [batch_size, seq_length, width])\n        output += token_type_embeddings\n\n    if use_position_embeddings:\n        full_position_embeddings = tf.get_variable(\n            name=position_embedding_name,\n            shape=[max_position_embeddings, width],\n            initializer=create_initializer(initializer_range))\n        # Since the position embedding table is a learned variable, we create it\n        # using a (long) sequence length `max_position_embeddings`. The actual\n        # sequence length might be shorter than this, for faster training of\n        # tasks that do not have long sequences.\n        #\n        # So `full_position_embeddings` is effectively an embedding table\n        # for position [0, 1, 2, ..., max_position_embeddings-1], and the current\n        # sequence has positions [0, 1, 2, ... seq_length-1], so we can just\n        # perform a slice.\n        if seq_length < max_position_embeddings:\n            position_embeddings = tf.slice(full_position_embeddings, [0, 0],\n                                           [seq_length, -1])\n        else:\n            position_embeddings = full_position_embeddings\n\n        num_dims = len(output.shape.as_list())\n\n        # Only the last two dimensions are relevant (`seq_length` and `width`), so\n        # we broadcast among the first dimensions, which is typically just\n        # the batch size.\n        position_broadcast_shape = []\n        for _ in range(num_dims - 2):\n            position_broadcast_shape.append(1)\n        position_broadcast_shape.extend([seq_length, width])\n        position_embeddings = tf.reshape(position_embeddings,\n                                         position_broadcast_shape)\n        output += position_embeddings\n\n    output = layer_norm_and_dropout(output, dropout_prob)\n    return output\n\n\ndef create_attention_mask_from_input_mask(from_tensor, to_mask):\n    """"""Create 3D attention mask from a 2D tensor mask.\n\n    Args:\n      from_tensor: 2D or 3D Tensor of shape [batch_size, from_seq_length, ...].\n      to_mask: int32 Tensor of shape [batch_size, to_seq_length].\n\n    Returns:\n      float Tensor of shape [batch_size, from_seq_length, to_seq_length].\n    """"""\n    from_shape = get_shape_list(from_tensor, expected_rank=[2, 3])\n    batch_size = from_shape[0]\n    from_seq_length = from_shape[1]\n\n    to_shape = get_shape_list(to_mask, expected_rank=2)\n    to_seq_length = to_shape[1]\n\n    to_mask = tf.cast(\n        tf.reshape(to_mask, [batch_size, 1, to_seq_length]), tf.float32)\n\n    # We don\'t assume that `from_tensor` is a mask (although it could be). We\n    # don\'t actually care if we attend *from* padding tokens (only *to* padding)\n    # tokens so we create a tensor of all ones.\n    #\n    # `broadcast_ones` = [batch_size, from_seq_length, 1]\n    broadcast_ones = tf.ones(\n        shape=[batch_size, from_seq_length, 1], dtype=tf.float32)\n\n    # Here we broadcast along two dimensions to create the mask.\n    mask = broadcast_ones * to_mask\n\n    return mask\n\n\ndef attention_layer(from_tensor,\n                    to_tensor,\n                    attention_mask=None,\n                    num_attention_heads=1,\n                    size_per_head=512,\n                    query_act=None,\n                    key_act=None,\n                    value_act=None,\n                    attention_probs_dropout_prob=0.0,\n                    initializer_range=0.02,\n                    do_return_2d_tensor=False,\n                    batch_size=None,\n                    from_seq_length=None,\n                    to_seq_length=None):\n    """"""Performs multi-headed attention from `from_tensor` to `to_tensor`.\n\n    This is an implementation of multi-headed attention based on ""Attention\n    is all you Need"". If `from_tensor` and `to_tensor` are the same, then\n    this is self-attention. Each timestep in `from_tensor` attends to the\n    corresponding sequence in `to_tensor`, and returns a fixed-with vector.\n\n    This function first projects `from_tensor` into a ""query"" tensor and\n    `to_tensor` into ""key"" and ""value"" tensors. These are (effectively) a list\n    of tensors of length `num_attention_heads`, where each tensor is of shape\n    [batch_size, seq_length, size_per_head].\n\n    Then, the query and key tensors are dot-producted and scaled. These are\n    softmaxed to obtain attention probabilities. The value tensors are then\n    interpolated by these probabilities, then concatenated back to a single\n    tensor and returned.\n\n    In practice, the multi-headed attention are done with transposes and\n    reshapes rather than actual separate tensors.\n\n    Args:\n      from_tensor: float Tensor of shape [batch_size, from_seq_length,\n        from_width].\n      to_tensor: float Tensor of shape [batch_size, to_seq_length, to_width].\n      attention_mask: (optional) int32 Tensor of shape [batch_size,\n        from_seq_length, to_seq_length]. The values should be 1 or 0. The\n        attention scores will effectively be set to -infinity for any positions in\n        the mask that are 0, and will be unchanged for positions that are 1.\n      num_attention_heads: int. Number of attention heads.\n      size_per_head: int. Size of each attention head.\n      query_act: (optional) Activation function for the query transform.\n      key_act: (optional) Activation function for the key transform.\n      value_act: (optional) Activation function for the value transform.\n      attention_probs_dropout_prob: (optional) float. Dropout probability of the\n        attention probabilities.\n      initializer_range: float. Range of the weight initializer.\n      do_return_2d_tensor: bool. If True, the output will be of shape [batch_size\n        * from_seq_length, num_attention_heads * size_per_head]. If False, the\n        output will be of shape [batch_size, from_seq_length, num_attention_heads\n        * size_per_head].\n      batch_size: (Optional) int. If the input is 2D, this might be the batch size\n        of the 3D version of the `from_tensor` and `to_tensor`.\n      from_seq_length: (Optional) If the input is 2D, this might be the seq length\n        of the 3D version of the `from_tensor`.\n      to_seq_length: (Optional) If the input is 2D, this might be the seq length\n        of the 3D version of the `to_tensor`.\n\n    Returns:\n      float Tensor of shape [batch_size, from_seq_length,\n        num_attention_heads * size_per_head]. (If `do_return_2d_tensor` is\n        true, this will be of shape [batch_size * from_seq_length,\n        num_attention_heads * size_per_head]).\n\n    Raises:\n      ValueError: Any of the arguments or tensor shapes are invalid.\n    """"""\n\n    def transpose_for_scores(input_tensor, batch_size, num_attention_heads,\n                             seq_length, width):\n        output_tensor = tf.reshape(\n            input_tensor, [batch_size, seq_length, num_attention_heads, width])\n\n        output_tensor = tf.transpose(output_tensor, [0, 2, 1, 3])\n        return output_tensor\n\n    from_shape = get_shape_list(from_tensor, expected_rank=[2, 3])\n    to_shape = get_shape_list(to_tensor, expected_rank=[2, 3])\n\n    if len(from_shape) != len(to_shape):\n        raise ValueError(\n            ""The rank of `from_tensor` must match the rank of `to_tensor`."")\n\n    if len(from_shape) == 3:\n        batch_size = from_shape[0]\n        from_seq_length = from_shape[1]\n        to_seq_length = to_shape[1]\n    elif len(from_shape) == 2:\n        if (batch_size is None or from_seq_length is None or to_seq_length is None):\n            raise ValueError(\n                ""When passing in rank 2 tensors to attention_layer, the values ""\n                ""for `batch_size`, `from_seq_length`, and `to_seq_length` ""\n                ""must all be specified."")\n\n    # Scalar dimensions referenced here:\n    #   B = batch size (number of sequences)\n    #   F = `from_tensor` sequence length\n    #   T = `to_tensor` sequence length\n    #   N = `num_attention_heads`\n    #   H = `size_per_head`\n\n    from_tensor_2d = reshape_to_matrix(from_tensor)\n    to_tensor_2d = reshape_to_matrix(to_tensor)\n\n    # `query_layer` = [B*F, N*H]\n    query_layer = tf.layers.dense(\n        from_tensor_2d,\n        num_attention_heads * size_per_head,\n        activation=query_act,\n        name=""query"",\n        kernel_initializer=create_initializer(initializer_range))\n\n    # `key_layer` = [B*T, N*H]\n    key_layer = tf.layers.dense(\n        to_tensor_2d,\n        num_attention_heads * size_per_head,\n        activation=key_act,\n        name=""key"",\n        kernel_initializer=create_initializer(initializer_range))\n\n    # `value_layer` = [B*T, N*H]\n    value_layer = tf.layers.dense(\n        to_tensor_2d,\n        num_attention_heads * size_per_head,\n        activation=value_act,\n        name=""value"",\n        kernel_initializer=create_initializer(initializer_range))\n\n    # `query_layer` = [B, N, F, H]\n    query_layer = transpose_for_scores(query_layer, batch_size,\n                                       num_attention_heads, from_seq_length,\n                                       size_per_head)\n\n    # `key_layer` = [B, N, T, H]\n    key_layer = transpose_for_scores(key_layer, batch_size, num_attention_heads,\n                                     to_seq_length, size_per_head)\n\n    # Take the dot product between ""query"" and ""key"" to get the raw\n    # attention scores.\n    # `attention_scores` = [B, N, F, T]\n    attention_scores = tf.matmul(query_layer, key_layer, transpose_b=True)\n    attention_scores = tf.multiply(attention_scores,\n                                   1.0 / math.sqrt(float(size_per_head)))\n\n    if attention_mask is not None:\n        # `attention_mask` = [B, 1, F, T]\n        attention_mask = tf.expand_dims(attention_mask, axis=[1])\n\n        # Since attention_mask is 1.0 for positions we want to attend and 0.0 for\n        # masked positions, this operation will create a tensor which is 0.0 for\n        # positions we want to attend and -10000.0 for masked positions.\n        adder = (1.0 - tf.cast(attention_mask, tf.float32)) * -10000.0\n\n        # Since we are adding it to the raw scores before the softmax, this is\n        # effectively the same as removing these entirely.\n        attention_scores += adder\n\n    # Normalize the attention scores to probabilities.\n    # `attention_probs` = [B, N, F, T]\n    attention_probs = tf.nn.softmax(attention_scores)\n\n    # This is actually dropping out entire tokens to attend to, which might\n    # seem a bit unusual, but is taken from the original Transformer paper.\n    attention_probs = dropout(attention_probs, attention_probs_dropout_prob)\n\n    # `value_layer` = [B, T, N, H]\n    value_layer = tf.reshape(\n        value_layer,\n        [batch_size, to_seq_length, num_attention_heads, size_per_head])\n\n    # `value_layer` = [B, N, T, H]\n    value_layer = tf.transpose(value_layer, [0, 2, 1, 3])\n\n    # `context_layer` = [B, N, F, H]\n    context_layer = tf.matmul(attention_probs, value_layer)\n\n    # `context_layer` = [B, F, N, H]\n    context_layer = tf.transpose(context_layer, [0, 2, 1, 3])\n\n    if do_return_2d_tensor:\n        # `context_layer` = [B*F, N*V]\n        context_layer = tf.reshape(\n            context_layer,\n            [batch_size * from_seq_length, num_attention_heads * size_per_head])\n    else:\n        # `context_layer` = [B, F, N*V]\n        context_layer = tf.reshape(\n            context_layer,\n            [batch_size, from_seq_length, num_attention_heads * size_per_head])\n\n    return context_layer\n\n\ndef transformer_model(input_tensor,\n                      attention_mask=None,\n                      hidden_size=768,\n                      num_hidden_layers=12,\n                      num_attention_heads=12,\n                      intermediate_size=3072,\n                      intermediate_act_fn=gelu,\n                      hidden_dropout_prob=0.1,\n                      attention_probs_dropout_prob=0.1,\n                      initializer_range=0.02,\n                      do_return_all_layers=False):\n    """"""Multi-headed, multi-layer Transformer from ""Attention is All You Need"".\n\n    This is almost an exact implementation of the original Transformer encoder.\n\n    See the original paper:\n    https://arxiv.org/abs/1706.03762\n\n    Also see:\n    https://github.com/tensorflow/tensor2tensor/blob/master/tensor2tensor/models/transformer.py\n\n    Args:\n      input_tensor: float Tensor of shape [batch_size, seq_length, hidden_size].\n      attention_mask: (optional) int32 Tensor of shape [batch_size, seq_length,\n        seq_length], with 1 for positions that can be attended to and 0 in\n        positions that should not be.\n      hidden_size: int. Hidden size of the Transformer.\n      num_hidden_layers: int. Number of layers (blocks) in the Transformer.\n      num_attention_heads: int. Number of attention heads in the Transformer.\n      intermediate_size: int. The size of the ""intermediate"" (a.k.a., feed\n        forward) layer.\n      intermediate_act_fn: function. The non-linear activation function to apply\n        to the output of the intermediate/feed-forward layer.\n      hidden_dropout_prob: float. Dropout probability for the hidden layers.\n      attention_probs_dropout_prob: float. Dropout probability of the attention\n        probabilities.\n      initializer_range: float. Range of the initializer (stddev of truncated\n        normal).\n      do_return_all_layers: Whether to also return all layers or just the final\n        layer.\n\n    Returns:\n      float Tensor of shape [batch_size, seq_length, hidden_size], the final\n      hidden layer of the Transformer.\n\n    Raises:\n      ValueError: A Tensor shape or parameter is invalid.\n    """"""\n    if hidden_size % num_attention_heads != 0:\n        raise ValueError(\n            ""The hidden size (%d) is not a multiple of the number of attention ""\n            ""heads (%d)"" % (hidden_size, num_attention_heads))\n\n    attention_head_size = int(hidden_size / num_attention_heads)\n    input_shape = get_shape_list(input_tensor, expected_rank=3)\n    batch_size = input_shape[0]\n    seq_length = input_shape[1]\n    input_width = input_shape[2]\n\n    # The Transformer performs sum residuals on all layers so the input needs\n    # to be the same as the hidden size.\n    if input_width != hidden_size:\n        raise ValueError(""The width of the input tensor (%d) != hidden size (%d)"" %\n                         (input_width, hidden_size))\n\n    # We keep the representation as a 2D tensor to avoid re-shaping it back and\n    # forth from a 3D tensor to a 2D tensor. Re-shapes are normally free on\n    # the GPU/CPU but may not be free on the TPU, so we want to minimize them to\n    # help the optimizer.\n    prev_output = reshape_to_matrix(input_tensor)\n\n    all_layer_outputs = []\n    for layer_idx in range(num_hidden_layers):\n        with tf.variable_scope(""layer_%d"" % layer_idx):\n            layer_input = prev_output\n\n            with tf.variable_scope(""attention""):\n                attention_heads = []\n                with tf.variable_scope(""self""):\n                    attention_head = attention_layer(\n                        from_tensor=layer_input,\n                        to_tensor=layer_input,\n                        attention_mask=attention_mask,\n                        num_attention_heads=num_attention_heads,\n                        size_per_head=attention_head_size,\n                        attention_probs_dropout_prob=attention_probs_dropout_prob,\n                        initializer_range=initializer_range,\n                        do_return_2d_tensor=True,\n                        batch_size=batch_size,\n                        from_seq_length=seq_length,\n                        to_seq_length=seq_length)\n                    attention_heads.append(attention_head)\n\n                attention_output = None\n                if len(attention_heads) == 1:\n                    attention_output = attention_heads[0]\n                else:\n                    # In the case where we have other sequences, we just concatenate\n                    # them to the self-attention head before the projection.\n                    attention_output = tf.concat(attention_heads, axis=-1)\n\n                # Run a linear projection of `hidden_size` then add a residual\n                # with `layer_input`.\n                with tf.variable_scope(""output""):\n                    attention_output = tf.layers.dense(\n                        attention_output,\n                        hidden_size,\n                        kernel_initializer=create_initializer(initializer_range))\n                    attention_output = dropout(attention_output, hidden_dropout_prob)\n                    attention_output = layer_norm(attention_output + layer_input)\n\n            # The activation is only applied to the ""intermediate"" hidden layer.\n            with tf.variable_scope(""intermediate""):\n                intermediate_output = tf.layers.dense(\n                    attention_output,\n                    intermediate_size,\n                    activation=intermediate_act_fn,\n                    kernel_initializer=create_initializer(initializer_range))\n\n            # Down-project back to `hidden_size` then add the residual.\n            with tf.variable_scope(""output""):\n                layer_output = tf.layers.dense(\n                    intermediate_output,\n                    hidden_size,\n                    kernel_initializer=create_initializer(initializer_range))\n                layer_output = dropout(layer_output, hidden_dropout_prob)\n                layer_output = layer_norm(layer_output + attention_output)\n                prev_output = layer_output\n                all_layer_outputs.append(layer_output)\n\n    if do_return_all_layers:\n        final_outputs = []\n        for layer_output in all_layer_outputs:\n            final_output = reshape_from_matrix(layer_output, input_shape)\n            final_outputs.append(final_output)\n        return final_outputs\n    else:\n        final_output = reshape_from_matrix(prev_output, input_shape)\n        return final_output\n\n\ndef get_shape_list(tensor, expected_rank=None, name=None):\n    """"""Returns a list of the shape of tensor, preferring static dimensions.\n\n    Args:\n      tensor: A tf.Tensor object to find the shape of.\n      expected_rank: (optional) int. The expected rank of `tensor`. If this is\n        specified and the `tensor` has a different rank, and exception will be\n        thrown.\n      name: Optional name of the tensor for the error message.\n\n    Returns:\n      A list of dimensions of the shape of tensor. All static dimensions will\n      be returned as python integers, and dynamic dimensions will be returned\n      as tf.Tensor scalars.\n    """"""\n    if name is None:\n        name = tensor.name\n\n    if expected_rank is not None:\n        assert_rank(tensor, expected_rank, name)\n\n    shape = tensor.shape.as_list()\n\n    non_static_indexes = []\n    for (index, dim) in enumerate(shape):\n        if dim is None:\n            non_static_indexes.append(index)\n\n    if not non_static_indexes:\n        return shape\n\n    dyn_shape = tf.shape(tensor)\n    for index in non_static_indexes:\n        shape[index] = dyn_shape[index]\n    return shape\n\n\ndef reshape_to_matrix(input_tensor):\n    """"""Reshapes a >= rank 2 tensor to a rank 2 tensor (i.e., a matrix).""""""\n    ndims = input_tensor.shape.ndims\n    if ndims < 2:\n        raise ValueError(""Input tensor must have at least rank 2. Shape = %s"" %\n                         (input_tensor.shape))\n    if ndims == 2:\n        return input_tensor\n\n    width = input_tensor.shape[-1]\n    output_tensor = tf.reshape(input_tensor, [-1, width])\n    return output_tensor\n\n\ndef reshape_from_matrix(output_tensor, orig_shape_list):\n    """"""Reshapes a rank 2 tensor back to its original rank >= 2 tensor.""""""\n    if len(orig_shape_list) == 2:\n        return output_tensor\n\n    output_shape = get_shape_list(output_tensor)\n\n    orig_dims = orig_shape_list[0:-1]\n    width = output_shape[-1]\n\n    return tf.reshape(output_tensor, orig_dims + [width])\n\n\ndef assert_rank(tensor, expected_rank, name=None):\n    """"""Raises an exception if the tensor rank is not of the expected rank.\n\n    Args:\n      tensor: A tf.Tensor to check the rank of.\n      expected_rank: Python integer or list of integers, expected rank.\n      name: Optional name of the tensor for the error message.\n\n    Raises:\n      ValueError: If the expected shape doesn\'t match the actual shape.\n    """"""\n    if name is None:\n        name = tensor.name\n\n    expected_rank_dict = {}\n    if isinstance(expected_rank, six.integer_types):\n        expected_rank_dict[expected_rank] = True\n    else:\n        for x in expected_rank:\n            expected_rank_dict[x] = True\n\n    actual_rank = tensor.shape.ndims\n    if actual_rank not in expected_rank_dict:\n        scope_name = tf.get_variable_scope().name\n        raise ValueError(\n            ""For the tensor `%s` in scope `%s`, the actual rank ""\n            ""`%d` (shape = %s) is not equal to the expected rank `%s`"" %\n            (name, scope_name, actual_rank, str(tensor.shape), str(expected_rank)))\n'"
rasa_nlu_gao/models/bert/optimization.py,25,"b'# coding=utf-8\n# Copyright 2018 The Google AI Language Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport re\n\nimport tensorflow as tf\n\n\ndef create_optimizer(loss, init_lr, num_train_steps, num_warmup_steps, use_tpu):\n    """"""Creates an optimizer training op.""""""\n    global_step = tf.train.get_or_create_global_step()\n\n    learning_rate = tf.constant(value=init_lr, shape=[], dtype=tf.float32)\n\n    # Implements linear decay of the learning rate.\n    learning_rate = tf.train.polynomial_decay(\n        learning_rate,\n        global_step,\n        num_train_steps,\n        end_learning_rate=0.0,\n        power=1.0,\n        cycle=False)\n\n    # Implements linear warmup. I.e., if global_step < num_warmup_steps, the\n    # learning rate will be `global_step/num_warmup_steps * init_lr`.\n    if num_warmup_steps:\n        global_steps_int = tf.cast(global_step, tf.int32)\n        warmup_steps_int = tf.constant(num_warmup_steps, dtype=tf.int32)\n\n        global_steps_float = tf.cast(global_steps_int, tf.float32)\n        warmup_steps_float = tf.cast(warmup_steps_int, tf.float32)\n\n        warmup_percent_done = global_steps_float / warmup_steps_float\n        warmup_learning_rate = init_lr * warmup_percent_done\n\n        is_warmup = tf.cast(global_steps_int < warmup_steps_int, tf.float32)\n        learning_rate = (\n                (1.0 - is_warmup) * learning_rate + is_warmup * warmup_learning_rate)\n\n    # It is recommended that you use this optimizer for fine tuning, since this\n    # is how the model was trained (note that the Adam m/v variables are NOT\n    # loaded from init_checkpoint.)\n    optimizer = AdamWeightDecayOptimizer(\n        learning_rate=learning_rate,\n        weight_decay_rate=0.01,\n        beta_1=0.9,\n        beta_2=0.999,\n        epsilon=1e-6,\n        exclude_from_weight_decay=[""LayerNorm"", ""layer_norm"", ""bias""])\n\n    if use_tpu:\n        optimizer = tf.contrib.tpu.CrossShardOptimizer(optimizer)\n\n    tvars = tf.trainable_variables()\n    grads = tf.gradients(loss, tvars)\n\n    # This is how the model was pre-trained.\n    (grads, _) = tf.clip_by_global_norm(grads, clip_norm=1.0)\n\n    train_op = optimizer.apply_gradients(\n        zip(grads, tvars), global_step=global_step)\n\n    new_global_step = global_step + 1\n    train_op = tf.group(train_op, [global_step.assign(new_global_step)])\n    return train_op\n\n\nclass AdamWeightDecayOptimizer(tf.train.Optimizer):\n    """"""A basic Adam optimizer that includes ""correct"" L2 weight decay.""""""\n\n    def __init__(self,\n                 learning_rate,\n                 weight_decay_rate=0.0,\n                 beta_1=0.9,\n                 beta_2=0.999,\n                 epsilon=1e-6,\n                 exclude_from_weight_decay=None,\n                 name=""AdamWeightDecayOptimizer""):\n        """"""Constructs a AdamWeightDecayOptimizer.""""""\n        super(AdamWeightDecayOptimizer, self).__init__(False, name)\n\n        self.learning_rate = learning_rate\n        self.weight_decay_rate = weight_decay_rate\n        self.beta_1 = beta_1\n        self.beta_2 = beta_2\n        self.epsilon = epsilon\n        self.exclude_from_weight_decay = exclude_from_weight_decay\n\n    def apply_gradients(self, grads_and_vars, global_step=None, name=None):\n        """"""See base class.""""""\n        assignments = []\n        for (grad, param) in grads_and_vars:\n            if grad is None or param is None:\n                continue\n\n            param_name = self._get_variable_name(param.name)\n\n            m = tf.get_variable(\n                name=param_name + ""/adam_m"",\n                shape=param.shape.as_list(),\n                dtype=tf.float32,\n                trainable=False,\n                initializer=tf.zeros_initializer())\n            v = tf.get_variable(\n                name=param_name + ""/adam_v"",\n                shape=param.shape.as_list(),\n                dtype=tf.float32,\n                trainable=False,\n                initializer=tf.zeros_initializer())\n\n            # Standard Adam update.\n            next_m = (\n                    tf.multiply(self.beta_1, m) + tf.multiply(1.0 - self.beta_1, grad))\n            next_v = (\n                    tf.multiply(self.beta_2, v) + tf.multiply(1.0 - self.beta_2,\n                                                              tf.square(grad)))\n\n            update = next_m / (tf.sqrt(next_v) + self.epsilon)\n\n            # Just adding the square of the weights to the loss function is *not*\n            # the correct way of using L2 regularization/weight decay with Adam,\n            # since that will interact with the m and v parameters in strange ways.\n            #\n            # Instead we want ot decay the weights in a manner that doesn\'t interact\n            # with the m/v parameters. This is equivalent to adding the square\n            # of the weights to the loss with plain (non-momentum) SGD.\n            if self._do_use_weight_decay(param_name):\n                update += self.weight_decay_rate * param\n\n            update_with_lr = self.learning_rate * update\n\n            next_param = param - update_with_lr\n\n            assignments.extend(\n                [param.assign(next_param),\n                 m.assign(next_m),\n                 v.assign(next_v)])\n        return tf.group(*assignments, name=name)\n\n    def _do_use_weight_decay(self, param_name):\n        """"""Whether to use L2 weight decay for `param_name`.""""""\n        if not self.weight_decay_rate:\n            return False\n        if self.exclude_from_weight_decay:\n            for r in self.exclude_from_weight_decay:\n                if re.search(r, param_name) is not None:\n                    return False\n        return True\n\n    def _get_variable_name(self, param_name):\n        """"""Get the variable name from the tensor name.""""""\n        m = re.match(""^(.*):\\\\d+$"", param_name)\n        if m is not None:\n            param_name = m.group(1)\n        return param_name\n'"
rasa_nlu_gao/models/bert/tokenization.py,2,"b'# coding=utf-8\n# Copyright 2018 The Google AI Language Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n""""""Tokenization classes.""""""\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport collections\nimport unicodedata\n\nimport six\nimport tensorflow as tf\n\n\ndef convert_to_unicode(text):\n    """"""Converts `text` to Unicode (if it\'s not already), assuming utf-8 input.""""""\n    if six.PY3:\n        if isinstance(text, str):\n            return text\n        elif isinstance(text, bytes):\n            return text.decode(""utf-8"", ""ignore"")\n        else:\n            raise ValueError(""Unsupported string type: %s"" % (type(text)))\n    elif six.PY2:\n        if isinstance(text, str):\n            return text.decode(""utf-8"", ""ignore"")\n        elif isinstance(text, unicode):\n            return text\n        else:\n            raise ValueError(""Unsupported string type: %s"" % (type(text)))\n    else:\n        raise ValueError(""Not running on Python2 or Python 3?"")\n\n\ndef printable_text(text):\n    """"""Returns text encoded in a way suitable for print or `tf.logging`.""""""\n\n    # These functions want `str` for both Python2 and Python3, but in one case\n    # it\'s a Unicode string and in the other it\'s a byte string.\n    if six.PY3:\n        if isinstance(text, str):\n            return text\n        elif isinstance(text, bytes):\n            return text.decode(""utf-8"", ""ignore"")\n        else:\n            raise ValueError(""Unsupported string type: %s"" % (type(text)))\n    elif six.PY2:\n        if isinstance(text, str):\n            return text\n        elif isinstance(text, unicode):\n            return text.encode(""utf-8"")\n        else:\n            raise ValueError(""Unsupported string type: %s"" % (type(text)))\n    else:\n        raise ValueError(""Not running on Python2 or Python 3?"")\n\n\ndef load_vocab(vocab_file):\n    """"""Loads a vocabulary file into a dictionary.""""""\n    vocab = collections.OrderedDict()\n    index = 0\n    with tf.gfile.GFile(vocab_file, ""r"") as reader:\n        while True:\n            token = convert_to_unicode(reader.readline())\n            if not token:\n                break\n            token = token.strip()\n            vocab[token] = index\n            index += 1\n    return vocab\n\n\ndef convert_by_vocab(vocab, items):\n    """"""Converts a sequence of [tokens|ids] using the vocab.""""""\n    output = []\n    for item in items:\n        output.append(vocab[item])\n    return output\n\n\ndef convert_tokens_to_ids(vocab, tokens):\n    return convert_by_vocab(vocab, tokens)\n\n\ndef convert_ids_to_tokens(inv_vocab, ids):\n    return convert_by_vocab(inv_vocab, ids)\n\n\ndef whitespace_tokenize(text):\n    """"""Runs basic whitespace cleaning and splitting on a peice of text.""""""\n    text = text.strip()\n    if not text:\n        return []\n    tokens = text.split()\n    return tokens\n\n\nclass FullTokenizer(object):\n    """"""Runs end-to-end tokenziation.""""""\n\n    def __init__(self, vocab_file, do_lower_case=True):\n        self.vocab = load_vocab(vocab_file)\n        self.inv_vocab = {v: k for k, v in self.vocab.items()}\n        self.basic_tokenizer = BasicTokenizer(do_lower_case=do_lower_case)\n        self.wordpiece_tokenizer = WordpieceTokenizer(vocab=self.vocab)\n\n    def tokenize(self, text):\n        split_tokens = []\n        for token in self.basic_tokenizer.tokenize(text):\n            for sub_token in self.wordpiece_tokenizer.tokenize(token):\n                split_tokens.append(sub_token)\n\n        return split_tokens\n\n    def convert_tokens_to_ids(self, tokens):\n        return convert_by_vocab(self.vocab, tokens)\n\n    def convert_ids_to_tokens(self, ids):\n        return convert_by_vocab(self.inv_vocab, ids)\n\n\nclass BasicTokenizer(object):\n    """"""Runs basic tokenization (punctuation splitting, lower casing, etc.).""""""\n\n    def __init__(self, do_lower_case=True):\n        """"""Constructs a BasicTokenizer.\n\n        Args:\n          do_lower_case: Whether to lower case the input.\n        """"""\n        self.do_lower_case = do_lower_case\n\n    def tokenize(self, text):\n        """"""Tokenizes a piece of text.""""""\n        text = convert_to_unicode(text)\n        text = self._clean_text(text)\n\n        # This was added on November 1st, 2018 for the multilingual and Chinese\n        # models. This is also applied to the English models now, but it doesn\'t\n        # matter since the English models were not trained on any Chinese data\n        # and generally don\'t have any Chinese data in them (there are Chinese\n        # characters in the vocabulary because Wikipedia does have some Chinese\n        # words in the English Wikipedia.).\n        text = self._tokenize_chinese_chars(text)\n\n        orig_tokens = whitespace_tokenize(text)\n        split_tokens = []\n        for token in orig_tokens:\n            if self.do_lower_case:\n                token = token.lower()\n                token = self._run_strip_accents(token)\n            split_tokens.extend(self._run_split_on_punc(token))\n\n        output_tokens = whitespace_tokenize("" "".join(split_tokens))\n        return output_tokens\n\n    def _run_strip_accents(self, text):\n        """"""Strips accents from a piece of text.""""""\n        text = unicodedata.normalize(""NFD"", text)\n        output = []\n        for char in text:\n            cat = unicodedata.category(char)\n            if cat == ""Mn"":\n                continue\n            output.append(char)\n        return """".join(output)\n\n    def _run_split_on_punc(self, text):\n        """"""Splits punctuation on a piece of text.""""""\n        chars = list(text)\n        i = 0\n        start_new_word = True\n        output = []\n        while i < len(chars):\n            char = chars[i]\n            if _is_punctuation(char):\n                output.append([char])\n                start_new_word = True\n            else:\n                if start_new_word:\n                    output.append([])\n                start_new_word = False\n                output[-1].append(char)\n            i += 1\n\n        return ["""".join(x) for x in output]\n\n    def _tokenize_chinese_chars(self, text):\n        """"""Adds whitespace around any CJK character.""""""\n        output = []\n        for char in text:\n            cp = ord(char)\n            if self._is_chinese_char(cp):\n                output.append("" "")\n                output.append(char)\n                output.append("" "")\n            else:\n                output.append(char)\n        return """".join(output)\n\n    def _is_chinese_char(self, cp):\n        """"""Checks whether CP is the codepoint of a CJK character.""""""\n        # This defines a ""chinese character"" as anything in the CJK Unicode block:\n        #   https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)\n        #\n        # Note that the CJK Unicode block is NOT all Japanese and Korean characters,\n        # despite its name. The modern Korean Hangul alphabet is a different block,\n        # as is Japanese Hiragana and Katakana. Those alphabets are used to write\n        # space-separated words, so they are not treated specially and handled\n        # like the all of the other languages.\n        if ((cp >= 0x4E00 and cp <= 0x9FFF) or  #\n                (cp >= 0x3400 and cp <= 0x4DBF) or  #\n                (cp >= 0x20000 and cp <= 0x2A6DF) or  #\n                (cp >= 0x2A700 and cp <= 0x2B73F) or  #\n                (cp >= 0x2B740 and cp <= 0x2B81F) or  #\n                (cp >= 0x2B820 and cp <= 0x2CEAF) or\n                (cp >= 0xF900 and cp <= 0xFAFF) or  #\n                (cp >= 0x2F800 and cp <= 0x2FA1F)):  #\n            return True\n\n        return False\n\n    def _clean_text(self, text):\n        """"""Performs invalid character removal and whitespace cleanup on text.""""""\n        output = []\n        for char in text:\n            cp = ord(char)\n            if cp == 0 or cp == 0xfffd or _is_control(char):\n                continue\n            if _is_whitespace(char):\n                output.append("" "")\n            else:\n                output.append(char)\n        return """".join(output)\n\n\nclass WordpieceTokenizer(object):\n    """"""Runs WordPiece tokenziation.""""""\n\n    def __init__(self, vocab, unk_token=""[UNK]"", max_input_chars_per_word=100):\n        self.vocab = vocab\n        self.unk_token = unk_token\n        self.max_input_chars_per_word = max_input_chars_per_word\n\n    def tokenize(self, text):\n        """"""Tokenizes a piece of text into its word pieces.\n\n        This uses a greedy longest-match-first algorithm to perform tokenization\n        using the given vocabulary.\n\n        For example:\n          input = ""unaffable""\n          output = [""un"", ""##aff"", ""##able""]\n\n        Args:\n          text: A single token or whitespace separated tokens. This should have\n            already been passed through `BasicTokenizer.\n\n        Returns:\n          A list of wordpiece tokens.\n        """"""\n\n        text = convert_to_unicode(text)\n\n        output_tokens = []\n        for token in whitespace_tokenize(text):\n            chars = list(token)\n            if len(chars) > self.max_input_chars_per_word:\n                output_tokens.append(self.unk_token)\n                continue\n\n            is_bad = False\n            start = 0\n            sub_tokens = []\n            while start < len(chars):\n                end = len(chars)\n                cur_substr = None\n                while start < end:\n                    substr = """".join(chars[start:end])\n                    if start > 0:\n                        substr = ""##"" + substr\n                    if substr in self.vocab:\n                        cur_substr = substr\n                        break\n                    end -= 1\n                if cur_substr is None:\n                    is_bad = True\n                    break\n                sub_tokens.append(cur_substr)\n                start = end\n\n            if is_bad:\n                output_tokens.append(self.unk_token)\n            else:\n                output_tokens.extend(sub_tokens)\n        return output_tokens\n\n\ndef _is_whitespace(char):\n    """"""Checks whether `chars` is a whitespace character.""""""\n    # \\t, \\n, and \\r are technically contorl characters but we treat them\n    # as whitespace since they are generally considered as such.\n    if char == "" "" or char == ""\\t"" or char == ""\\n"" or char == ""\\r"":\n        return True\n    cat = unicodedata.category(char)\n    if cat == ""Zs"":\n        return True\n    return False\n\n\ndef _is_control(char):\n    """"""Checks whether `chars` is a control character.""""""\n    # These are technically control characters but we count them as whitespace\n    # characters.\n    if char == ""\\t"" or char == ""\\n"" or char == ""\\r"":\n        return False\n    cat = unicodedata.category(char)\n    if cat.startswith(""C""):\n        return True\n    return False\n\n\ndef _is_punctuation(char):\n    """"""Checks whether `chars` is a punctuation character.""""""\n    cp = ord(char)\n    # We treat all non-letter/number ASCII as punctuation.\n    # Characters such as ""^"", ""$"", and ""`"" are not in the Unicode\n    # Punctuation class but we treat them as punctuation anyways, for\n    # consistency.\n    if ((cp >= 33 and cp <= 47) or (cp >= 58 and cp <= 64) or\n            (cp >= 91 and cp <= 96) or (cp >= 123 and cp <= 126)):\n        return True\n    cat = unicodedata.category(char)\n    if cat.startswith(""P""):\n        return True\n    return False\n'"
