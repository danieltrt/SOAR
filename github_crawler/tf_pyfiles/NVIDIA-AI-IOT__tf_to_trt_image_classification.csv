file_path,api_count,code
scripts/convert_plan.py,0,"b'# Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved.\n# Full license terms provided in LICENSE.md file.\n\nimport os\nimport subprocess\nimport uff\nimport pdb\nimport sys\n\nUFF_TO_PLAN_EXE_PATH = \'build/src/uff_to_plan\'\nTMP_UFF_FILENAME = \'data/tmp.uff\'\n\n\ndef frozenToPlan(frozen_graph_filename, plan_filename, input_name, input_height, \n        input_width, output_name, max_batch_size, max_workspace_size, data_type):\n\n    # generate uff from frozen graph\n    uff_model = uff.from_tensorflow_frozen_model(\n        frozen_file=frozen_graph_filename,\n        output_nodes=[output_name],\n        output_filename=TMP_UFF_FILENAME,\n        text=False,\n    )\n\n    # convert frozen graph to engine (plan)\n    args = [\n        TMP_UFF_FILENAME,\n        plan_filename,\n        input_name,\n        str(input_height),\n        str(input_width),\n        output_name,\n        str(max_batch_size),\n        str(max_workspace_size), \n        data_type # float / half\n    ]\n    subprocess.call([UFF_TO_PLAN_EXE_PATH] + args)\n\n    # cleanup tmp file\n    os.remove(TMP_UFF_FILENAME)\n\n\nif __name__ == \'__main__\':\n\n    if not os.path.exists(\'data/plans\'):\n        os.makedirs(\'data/plans\')\n\n    if len(sys.argv) is not 10:\n        print(""usage: python convert_plan.py <frozen_graph_path> <output_plan_path> <input_name> <input_height>""\n              "" <input_width> <output_name> <max_batch_size> <max_workspace_size> <data_type>"")\n        exit()\n\n    frozen_graph_filename = sys.argv[1]\n    plan_filename = sys.argv[2]\n    input_name = sys.argv[3]\n    input_height = sys.argv[4]\n    input_width = sys.argv[5]\n    output_name = sys.argv[6]\n    max_batch_size = sys.argv[7]\n    max_workspace_size = sys.argv[8]\n    data_type = sys.argv[9]\n    \n    frozenToPlan(frozen_graph_filename,\n        plan_filename,\n        input_name,\n        input_height,\n        input_width,\n        output_name,\n        max_batch_size,\n        max_workspace_size,\n        data_type\n    )\n'"
scripts/convert_relu6.py,12,"b'# Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved.\n# Full license terms provided in LICENSE.md file.\n\nimport tensorflow as tf\nimport sys\n\n\ndef makeConst6(const6_name=\'const6\'):\n    graph = tf.Graph()\n    with graph.as_default():\n        tf_6 = tf.constant(dtype=tf.float32, value=6.0, name=const6_name)\n    return graph.as_graph_def()\n\n\n# create base relu6 nodes\ndef makeRelu6(output_name, input_name, const6_name=\'const6\'):\n    graph = tf.Graph()\n    with graph.as_default():\n        tf_x = tf.placeholder(tf.float32, [10, 10], name=input_name)\n        tf_6 = tf.constant(dtype=tf.float32, value=6.0, name=const6_name)\n        with tf.name_scope(output_name):\n            tf_y1 = tf.nn.relu(tf_x, name=\'relu1\')\n            tf_y2 = tf.nn.relu(tf.subtract(tf_x, tf_6, name=\'sub1\'), name=\'relu2\')\n\n            #tf_y = tf.nn.relu(tf.subtract(tf_6, tf.nn.relu(tf_x, name=\'relu1\'), name=\'sub\'), name=\'relu2\')\n        #tf_y = tf.subtract(tf_6, tf_y, name=output_name)\n        tf_y = tf.subtract(tf_y1, tf_y2, name=output_name)\n        \n    graph_def = graph.as_graph_def()\n    graph_def.node[-1].name = output_name\n\n    # remove unused nodes\n    for node in graph_def.node:\n        if node.name == input_name:\n            graph_def.node.remove(node)\n    for node in graph_def.node:\n        if node.name == const6_name:\n            graph_def.node.remove(node)\n    for node in graph_def.node:\n        if node.op == \'_Neg\':\n            node.op = \'Neg\'\n            \n    return graph_def\n\n\ndef convertRelu6(graph_def, const6_name=\'const6\'):\n    # add constant 6\n    has_const6 = False\n    for node in graph_def.node:\n        if node.name == const6_name:\n            has_const6 = True\n    if not has_const6:\n        const6_graph_def = makeConst6(const6_name=const6_name)\n        graph_def.node.extend(const6_graph_def.node)\n        \n    for node in graph_def.node:\n        if node.op == \'Relu6\':\n            input_name = node.input[0]\n            output_name = node.name\n            relu6_graph_def = makeRelu6(output_name, input_name, const6_name=const6_name)\n            graph_def.node.remove(node)\n            graph_def.node.extend(relu6_graph_def.node)\n            \n    return graph_def\n\n\nif __name__ == \'__main__\':\n\n    if len(sys.argv) != 3:\n        print(""Replaces Relu6 nodes in a frozen graph with Relu(x) - Relu(x-6)\\n"")\n        print(""Usage: python convert_relu6.py <frozen_graph_path> <output_frozen_graph_path>"")\n        exit()\n\n    with open(sys.argv[1], \'rb\') as f:\n        graph_def = tf.GraphDef()\n        graph_def.ParseFromString(f.read())\n\n    converted_graph_def = convertRelu6(graph_def)\n\n    with open(sys.argv[2], \'wb\') as f:\n        f.write(converted_graph_def.SerializeToString())\n\n    f.close()\n'"
scripts/frozen_graphs_to_plans.py,0,"b'# Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved.\n# Full license terms provided in LICENSE.md file.\n\nimport sys\nsys.path.append(\'third_party/models/\')\nsys.path.append(\'third_party/models/research\')\nsys.path.append(\'third_party/models/research/slim\')\nimport uff\nfrom model_meta import NETS, FROZEN_GRAPHS_DIR, CHECKPOINT_DIR, PLAN_DIR\nfrom convert_plan import frozenToPlan\nimport os\n\n\n\nif __name__ == \'__main__\':\n\n    if not os.path.exists(\'data/plans\'):\n        os.makedirs(\'data/plans\')\n\n    for net_name, net_meta in NETS.items():\n        \n        if \'exclude\' in net_meta.keys() and net_meta[\'exclude\'] is True:\n            continue\n\n        print(""Convertings %s to PLAN"" % net_name)\n         \n        frozenToPlan(net_meta[\'frozen_graph_filename\'],\n            net_meta[\'plan_filename\'],\n            net_meta[\'input_name\'],\n            net_meta[\'input_height\'],\n            net_meta[\'input_width\'],\n            net_meta[\'output_names\'][0],\n            1, # batch size\n            1 << 20, # workspace size\n            \'half\' # data type\n        )\n'"
scripts/frozen_graphs_to_uffs.py,0,"b'# Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved.\n# Full license terms provided in LICENSE.md file.\n\nimport sys\nsys.path.append(\'third_party/models/\')\nsys.path.append(\'third_party/models/research\')\nsys.path.append(\'third_party/models/research/slim\')\nimport uff\nfrom model_meta import NETS, FROZEN_GRAPHS_DIR, CHECKPOINT_DIR, UFF_DIR\n\n\nif __name__ == \'__main__\':\n\n    for net_name, net_meta in NETS.items():\n        \n        if \'exclude\' in net_meta.keys() and net_meta[\'exclude\'] is True:\n            continue\n\n        print(""Convertings %s to UFF"" % net_name)\n        \n        uff_model = uff.from_tensorflow_frozen_model(\n            frozen_file=net_meta[\'frozen_graph_filename\'],\n            output_nodes=net_meta[\'output_names\'],\n            output_filename=net_meta[\'uff_filename\'],\n            text=False\n        )\n'"
scripts/model_meta.py,0,"b'# Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved.\n# Full license terms provided in LICENSE.md file.\n\nimport numpy as np\nimport sys\nsys.path.append(""third_party/models/research/"")\nsys.path.append(""third_party/models"")\nsys.path.append(""third_party/"")\nsys.path.append(""third_party/models/research/slim/"")\nimport tensorflow.contrib.slim as tf_slim\nimport slim.nets as nets\nimport slim.nets.vgg\nimport slim.nets.inception\nimport slim.nets.resnet_v1\nimport slim.nets.resnet_v2\nimport slim.nets.mobilenet_v1\n\n\ndef create_label_map(label_file=\'data/imagenet_labels_1001.txt\'):\n    label_map = {}\n    with open(label_file, \'r\') as f:\n        labels = f.readlines()\n        for i, label in enumerate(labels):\n            label_map[i] = label\n    return label_map\n        \n\nIMAGNET2012_LABEL_MAP = create_label_map()\n\n\ndef preprocess_vgg(image):\n    return np.array(image, dtype=np.float32) - np.array([123.68, 116.78, 103.94])\n\ndef postprocess_vgg(output):\n    output = output.flatten()\n    predictions_top5 = np.argsort(output)[::-1][0:5]\n    labels_top5 = [IMAGNET2012_LABEL_MAP[p + 1] for p in predictions_top5]\n    return labels_top5\n\ndef preprocess_inception(image):\n    return 2.0 * (np.array(image, dtype=np.float32) / 255.0 - 0.5)\n\ndef postprocess_inception(output):\n    output = output.flatten()\n    predictions_top5 = np.argsort(output)[::-1][0:5]\n    labels_top5 = [IMAGNET2012_LABEL_MAP[p] for p in predictions_top5]\n    return labels_top5\ndef mobilenet_v1_1p0_224(*args, **kwargs):\n    kwargs[\'depth_multiplier\'] = 1.0\n    return nets.mobilenet_v1.mobilenet_v1(*args, **kwargs)\n\ndef mobilenet_v1_0p5_160(*args, **kwargs):\n    kwargs[\'depth_multiplier\'] = 0.5\n    return nets.mobilenet_v1.mobilenet_v1(*args, **kwargs)\n\ndef mobilenet_v1_0p25_128(*args, **kwargs):\n    kwargs[\'depth_multiplier\'] = 0.25\n    return nets.mobilenet_v1.mobilenet_v1(*args, **kwargs)   \n\n\nCHECKPOINT_DIR = \'data/checkpoints/\'\nFROZEN_GRAPHS_DIR = \'data/frozen_graphs/\'\n# UFF_DIR = \'data/uff/\'\nPLAN_DIR = \'data/plans/\'\n\n\nNETS = {\n\n    \'vgg_16\': {\n        \'model\': nets.vgg.vgg_16,\n        \'arg_scope\': nets.vgg.vgg_arg_scope,\n        \'num_classes\': 1000,\n        \'input_name\': \'input\',\n        \'output_names\': [\'vgg_16/fc8/BiasAdd\'],\n        \'input_width\': 224,\n        \'input_height\': 224,\n        \'input_channels\': 3, \n        \'preprocess_fn\': preprocess_vgg,\n        \'postprocess_fn\': postprocess_vgg,\n        \'checkpoint_filename\': CHECKPOINT_DIR + \'vgg_16.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'vgg_16.pb\',\n        \'trt_convert_status\': ""works"",\n        \'plan_filename\': PLAN_DIR + \'vgg_16.plan\'\n    },\n\n    \'vgg_19\': {\n        \'model\': nets.vgg.vgg_19,\n        \'arg_scope\': nets.vgg.vgg_arg_scope,\n        \'num_classes\': 1000,\n        \'input_name\': \'input\',\n        \'output_names\': [\'vgg_19/fc8/BiasAdd\'],\n        \'input_width\': 224,\n        \'input_height\': 224,\n        \'input_channels\': 3, \n        \'preprocess_fn\': preprocess_vgg,\n        \'postprocess_fn\': postprocess_vgg,\n        \'checkpoint_filename\': CHECKPOINT_DIR + \'vgg_19.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'vgg_19.pb\',\n        \'trt_convert_status\': ""works"",\n        \'plan_filename\': PLAN_DIR + \'vgg_19.plan\',\n        \'exclude\': True\n    },\n\n    \'inception_v1\': {\n        \'model\': nets.inception.inception_v1,\n        \'arg_scope\': nets.inception.inception_v1_arg_scope,\n        \'num_classes\': 1001,\n        \'input_name\': \'input\',\n        \'input_width\': 224,\n        \'input_height\': 224,\n        \'input_channels\': 3,\n        \'output_names\': [\'InceptionV1/Logits/SpatialSqueeze\'],\n        \'checkpoint_filename\': CHECKPOINT_DIR + \'inception_v1.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'inception_v1.pb\',\n        \'preprocess_fn\': preprocess_inception,\n        \'postprocess_fn\': postprocess_inception,\n        \'trt_convert_status\': ""works"",\n        \'plan_filename\': PLAN_DIR + \'inception_v1.plan\'\n    },\n\n    \'inception_v2\': {\n        \'model\': nets.inception.inception_v2,\n        \'arg_scope\': nets.inception.inception_v2_arg_scope,\n        \'num_classes\': 1001,\n        \'input_name\': \'input\',\n        \'input_width\': 224,\n        \'input_height\': 224,\n        \'input_channels\': 3,\n        \'output_names\': [\'InceptionV2/Logits/SpatialSqueeze\'],\n        \'checkpoint_filename\': CHECKPOINT_DIR + \'inception_v2.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'inception_v2.pb\',\n        \'preprocess_fn\': preprocess_inception,\n        \'postprocess_fn\': postprocess_inception,\n        \'trt_convert_status\': ""bad results"",\n        \'plan_filename\': PLAN_DIR + \'inception_v2.plan\'\n    },\n\n    \'inception_v3\': {\n        \'model\': nets.inception.inception_v3,\n        \'arg_scope\': nets.inception.inception_v3_arg_scope,\n        \'num_classes\': 1001,\n        \'input_name\': \'input\',\n        \'input_width\': 299,\n        \'input_height\': 299,\n        \'input_channels\': 3,\n        \'output_names\': [\'InceptionV3/Logits/SpatialSqueeze\'],\n        \'checkpoint_filename\': CHECKPOINT_DIR + \'inception_v3.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'inception_v3.pb\',\n        \'preprocess_fn\': preprocess_inception,\n        \'postprocess_fn\': postprocess_inception,\n        \'trt_convert_status\': ""works"",\n        \'plan_filename\': PLAN_DIR + \'inception_v3.plan\'\n    },\n\n    \'inception_v4\': {\n        \'model\': nets.inception.inception_v4,\n        \'arg_scope\': nets.inception.inception_v4_arg_scope,\n        \'num_classes\': 1001,\n        \'input_name\': \'input\',\n        \'input_width\': 299,\n        \'input_height\': 299,\n        \'input_channels\': 3,\n        \'output_names\': [\'InceptionV4/Logits/Logits/BiasAdd\'],\n        \'checkpoint_filename\': CHECKPOINT_DIR + \'inception_v4.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'inception_v4.pb\',\n        \'preprocess_fn\': preprocess_inception,\n        \'postprocess_fn\': postprocess_inception,\n        \'trt_convert_status\': ""works"",\n        \'plan_filename\': PLAN_DIR + \'inception_v4.plan\'\n    },\n    \n    \'inception_resnet_v2\': {\n        \'model\': nets.inception.inception_resnet_v2,\n        \'arg_scope\': nets.inception.inception_resnet_v2_arg_scope,\n        \'num_classes\': 1001,\n        \'input_name\': \'input\',\n        \'input_width\': 299,\n        \'input_height\': 299,\n        \'input_channels\': 3,\n        \'output_names\': [\'InceptionResnetV2/Logits/Logits/BiasAdd\'],\n        \'checkpoint_filename\': CHECKPOINT_DIR + \'inception_resnet_v2_2016_08_30.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'inception_resnet_v2.pb\',\n        \'preprocess_fn\': preprocess_inception,\n        \'postprocess_fn\': postprocess_inception,\n        \'trt_convert_status\': ""works"",\n        \'plan_filename\': PLAN_DIR + \'inception_resnet_v2.plan\'\n    },\n\n    \'resnet_v1_50\': {\n        \'model\': nets.resnet_v1.resnet_v1_50,\n        \'arg_scope\': nets.resnet_v1.resnet_arg_scope,\n        \'num_classes\': 1000,\n        \'input_name\': \'input\',\n        \'input_width\': 224,\n        \'input_height\': 224,\n        \'input_channels\': 3,\n        \'output_names\': [\'resnet_v1_50/SpatialSqueeze\'],\n        \'checkpoint_filename\': CHECKPOINT_DIR + \'resnet_v1_50.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'resnet_v1_50.pb\',\n        \'preprocess_fn\': preprocess_vgg,\n        \'postprocess_fn\': postprocess_vgg,\n        \'plan_filename\': PLAN_DIR + \'resnet_v1_50.plan\'\n    },\n\n    \'resnet_v1_101\': {\n        \'model\': nets.resnet_v1.resnet_v1_101,\n        \'arg_scope\': nets.resnet_v1.resnet_arg_scope,\n        \'num_classes\': 1000,\n        \'input_name\': \'input\',\n        \'input_width\': 224,\n        \'input_height\': 224,\n        \'input_channels\': 3,\n        \'output_names\': [\'resnet_v1_101/SpatialSqueeze\'],\n        \'checkpoint_filename\': CHECKPOINT_DIR + \'resnet_v1_101.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'resnet_v1_101.pb\',\n        \'preprocess_fn\': preprocess_vgg,\n        \'postprocess_fn\': postprocess_vgg,\n        \'plan_filename\': PLAN_DIR + \'resnet_v1_101.plan\'\n    },\n\n    \'resnet_v1_152\': {\n        \'model\': nets.resnet_v1.resnet_v1_152,\n        \'arg_scope\': nets.resnet_v1.resnet_arg_scope,\n        \'num_classes\': 1000,\n        \'input_name\': \'input\',\n        \'input_width\': 224,\n        \'input_height\': 224,\n        \'input_channels\': 3,\n        \'output_names\': [\'resnet_v1_152/SpatialSqueeze\'],\n        \'checkpoint_filename\': CHECKPOINT_DIR + \'resnet_v1_152.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'resnet_v1_152.pb\',\n        \'preprocess_fn\': preprocess_vgg,\n        \'postprocess_fn\': postprocess_vgg,\n        \'plan_filename\': PLAN_DIR + \'resnet_v1_152.plan\'\n    },\n\n    \'resnet_v2_50\': {\n        \'model\': nets.resnet_v2.resnet_v2_50,\n        \'arg_scope\': nets.resnet_v2.resnet_arg_scope,\n        \'num_classes\': 1001,\n        \'input_name\': \'input\',\n        \'input_width\': 299,\n        \'input_height\': 299,\n        \'input_channels\': 3,\n        \'output_names\': [\'resnet_v2_50/SpatialSqueeze\'],\n        \'checkpoint_filename\': CHECKPOINT_DIR + \'resnet_v2_50.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'resnet_v2_50.pb\',\n        \'preprocess_fn\': preprocess_inception,\n        \'postprocess_fn\': postprocess_inception,\n        \'plan_filename\': PLAN_DIR + \'resnet_v2_50.plan\'\n    },\n\n    \'resnet_v2_101\': {\n        \'model\': nets.resnet_v2.resnet_v2_101,\n        \'arg_scope\': nets.resnet_v2.resnet_arg_scope,\n        \'num_classes\': 1001,\n        \'input_name\': \'input\',\n        \'input_width\': 299,\n        \'input_height\': 299,\n        \'input_channels\': 3,\n        \'output_names\': [\'resnet_v2_101/SpatialSqueeze\'],\n        \'checkpoint_filename\': CHECKPOINT_DIR + \'resnet_v2_101.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'resnet_v2_101.pb\',\n        \'preprocess_fn\': preprocess_inception,\n        \'postprocess_fn\': postprocess_inception,\n        \'plan_filename\': PLAN_DIR + \'resnet_v2_101.plan\'\n    },\n\n    \'resnet_v2_152\': {\n        \'model\': nets.resnet_v2.resnet_v2_152,\n        \'arg_scope\': nets.resnet_v2.resnet_arg_scope,\n        \'num_classes\': 1001,\n        \'input_name\': \'input\',\n        \'input_width\': 299,\n        \'input_height\': 299,\n        \'input_channels\': 3,\n        \'output_names\': [\'resnet_v2_152/SpatialSqueeze\'],\n        \'checkpoint_filename\': CHECKPOINT_DIR + \'resnet_v2_152.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'resnet_v2_152.pb\',\n        \'preprocess_fn\': preprocess_inception,\n        \'postprocess_fn\': postprocess_inception,\n        \'plan_filename\': PLAN_DIR + \'resnet_v2_152.plan\'\n    },\n\n    #\'resnet_v2_200\': {\n\n    #},\n\n    \'mobilenet_v1_1p0_224\': {\n        \'model\': mobilenet_v1_1p0_224,\n        \'arg_scope\': nets.mobilenet_v1.mobilenet_v1_arg_scope,\n        \'num_classes\': 1001,\n        \'input_name\': \'input\',\n        \'input_width\': 224,\n        \'input_height\': 224,\n        \'input_channels\': 3,\n        \'output_names\': [\'MobilenetV1/Logits/SpatialSqueeze\'],\n        \'checkpoint_filename\': CHECKPOINT_DIR + \n            \'mobilenet_v1_1.0_224.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'mobilenet_v1_1p0_224.pb\',\n        \'plan_filename\': PLAN_DIR + \'mobilenet_v1_1p0_224.plan\',\n        \'preprocess_fn\': preprocess_inception,\n        \'postprocess_fn\': postprocess_inception,\n    },\n\n    \'mobilenet_v1_0p5_160\': {\n        \'model\': mobilenet_v1_0p5_160,\n        \'arg_scope\': nets.mobilenet_v1.mobilenet_v1_arg_scope,\n        \'num_classes\': 1001,\n        \'input_name\': \'input\',\n        \'input_width\': 160,\n        \'input_height\': 160,\n        \'input_channels\': 3,\n        \'output_names\': [\'MobilenetV1/Logits/SpatialSqueeze\'],\n        \'checkpoint_filename\': CHECKPOINT_DIR + \n            \'mobilenet_v1_0.50_160.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'mobilenet_v1_0p5_160.pb\',\n        \'plan_filename\': PLAN_DIR + \'mobilenet_v1_0p5_160.plan\',\n        \'preprocess_fn\': preprocess_inception,\n        \'postprocess_fn\': postprocess_inception,\n    },\n\n    \'mobilenet_v1_0p25_128\': {\n        \'model\': mobilenet_v1_0p25_128,\n        \'arg_scope\': nets.mobilenet_v1.mobilenet_v1_arg_scope,\n        \'num_classes\': 1001,\n        \'input_name\': \'input\',\n        \'input_width\': 128,\n        \'input_height\': 128,\n        \'input_channels\': 3,\n        \'output_names\': [\'MobilenetV1/Logits/SpatialSqueeze\'],\n        \'checkpoint_filename\': CHECKPOINT_DIR + \n            \'mobilenet_v1_0.25_128.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'mobilenet_v1_0p25_128.pb\',\n        \'plan_filename\': PLAN_DIR + \'mobilenet_v1_0p25_128.plan\',\n        \'preprocess_fn\': preprocess_inception,\n        \'postprocess_fn\': postprocess_inception,\n    },\n}\n\n\n'"
scripts/model_meta_nodeps.py,0,"b'# Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved.\n# Full license terms provided in LICENSE.md file.\n\nCHECKPOINT_DIR = \'data/checkpoints/\'\nFROZEN_GRAPHS_DIR = \'data/frozen_graphs/\'\nUFF_DIR = \'data/uff/\'\n\nNETS = {\n\n    \'vgg_16\': {\n        \'num_classes\': 1000,\n        \'input_name\': \'input\',\n        \'output_names\': [\'vgg_16/fc8/BiasAdd\'],\n        \'input_width\': 224,\n        \'input_height\': 224,\n        \'input_channels\': 3, \n        \'preprocess_fn\': \'preprocess_vgg\',\n        \'checkpoint_filename\': CHECKPOINT_DIR + \'vgg_16.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'vgg_16.pb\',\n        \'trt_convert_status\': ""works"",\n        \'uff_filename\': UFF_DIR + \'vgg_16.uff\'\n    },\n\n    \'vgg_19\': {\n        \'num_classes\': 1000,\n        \'input_name\': \'input\',\n        \'output_names\': [\'vgg_19/fc8/BiasAdd\'],\n        \'input_width\': 224,\n        \'input_height\': 224,\n        \'input_channels\': 3, \n        \'preprocess_fn\': \'preprocess_vgg\',\n        \'checkpoint_filename\': CHECKPOINT_DIR + \'vgg_19.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'vgg_19.pb\',\n        \'trt_convert_status\': ""works"",\n        \'uff_filename\': UFF_DIR + \'vgg_19.uff\'\n    },\n\n    \'inception_v1\': {\n        \'num_classes\': 1001,\n        \'input_name\': \'input\',\n        \'input_width\': 224,\n        \'input_height\': 224,\n        \'input_channels\': 3,\n        \'output_names\': [\'InceptionV1/Logits/SpatialSqueeze\'],\n        \'checkpoint_filename\': CHECKPOINT_DIR + \'inception_v1.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'inception_v1.pb\',\n        \'preprocess_fn\': \'preprocess_inception\',\n        \'trt_convert_status\': ""works"",\n        \'uff_filename\': UFF_DIR + \'inception_v1.uff\'\n    },\n\n    \'inception_v2\': {\n        \'num_classes\': 1001,\n        \'input_name\': \'input\',\n        \'input_width\': 224,\n        \'input_height\': 224,\n        \'input_channels\': 3,\n        \'output_names\': [\'InceptionV2/Logits/SpatialSqueeze\'],\n        \'checkpoint_filename\': CHECKPOINT_DIR + \'inception_v2.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'inception_v2.pb\',\n        \'preprocess_fn\': \'preprocess_inception\',\n        \'trt_convert_status\': ""bad results"",\n        \'uff_filename\': UFF_DIR + \'inception_v2.uff\'\n    },\n\n    \'inception_v3\': {\n        \'num_classes\': 1001,\n        \'input_name\': \'input\',\n        \'input_width\': 299,\n        \'input_height\': 299,\n        \'input_channels\': 3,\n        \'output_names\': [\'InceptionV3/Logits/SpatialSqueeze\'],\n        \'checkpoint_filename\': CHECKPOINT_DIR + \'inception_v3.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'inception_v3.pb\',\n        \'preprocess_fn\': \'preprocess_inception\',\n        \'trt_convert_status\': ""works"",\n        \'uff_filename\': UFF_DIR + \'inception_v3.uff\'\n    },\n\n    \'inception_v4\': {\n        \'num_classes\': 1001,\n        \'input_name\': \'input\',\n        \'input_width\': 299,\n        \'input_height\': 299,\n        \'input_channels\': 3,\n        \'output_names\': [\'InceptionV4/Logits/Logits/BiasAdd\'],\n        \'checkpoint_filename\': CHECKPOINT_DIR + \'inception_v4.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'inception_v4.pb\',\n        \'preprocess_fn\': \'preprocess_inception\',\n        \'trt_convert_status\': ""works"",\n        \'uff_filename\': UFF_DIR + \'inception_v4.uff\'\n    },\n    \n    \'inception_resnet_v2\': {\n        \'num_classes\': 1001,\n        \'input_name\': \'input\',\n        \'input_width\': 299,\n        \'input_height\': 299,\n        \'input_channels\': 3,\n        \'output_names\': [\'InceptionResnetV2/Logits/Logits/BiasAdd\'],\n        \'checkpoint_filename\': CHECKPOINT_DIR + \'inception_resnet_v2_2016_08_30.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'inception_resnet_v2.pb\',\n        \'preprocess_fn\': \'preprocess_inception\',\n        \'trt_convert_status\': ""works"",\n        \'uff_filename\': UFF_DIR + \'inception_resnet_v2.uff\'\n    },\n\n    \'resnet_v1_50\': {\n        \'num_classes\': 1000,\n        \'input_name\': \'input\',\n        \'input_width\': 224,\n        \'input_height\': 224,\n        \'input_channels\': 3,\n        \'output_names\': [\'resnet_v1_50/SpatialSqueeze\'],\n        \'checkpoint_filename\': CHECKPOINT_DIR + \'resnet_v1_50.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'resnet_v1_50.pb\',\n        \'preprocess_fn\': \'preprocess_vgg\',\n        \'uff_filename\': UFF_DIR + \'resnet_v1_50.uff\'\n    },\n\n    \'resnet_v1_101\': {\n        \'num_classes\': 1000,\n        \'input_name\': \'input\',\n        \'input_width\': 224,\n        \'input_height\': 224,\n        \'input_channels\': 3,\n        \'output_names\': [\'resnet_v1_101/SpatialSqueeze\'],\n        \'checkpoint_filename\': CHECKPOINT_DIR + \'resnet_v1_101.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'resnet_v1_101.pb\',\n        \'preprocess_fn\': \'preprocess_vgg\',\n        \'uff_filename\': UFF_DIR + \'resnet_v1_101.uff\'\n    },\n\n    \'resnet_v1_152\': {\n        \'num_classes\': 1000,\n        \'input_name\': \'input\',\n        \'input_width\': 224,\n        \'input_height\': 224,\n        \'input_channels\': 3,\n        \'output_names\': [\'resnet_v1_152/SpatialSqueeze\'],\n        \'checkpoint_filename\': CHECKPOINT_DIR + \'resnet_v1_152.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'resnet_v1_152.pb\',\n        \'preprocess_fn\': \'preprocess_vgg\',\n        \'uff_filename\': UFF_DIR + \'resnet_v1_152.uff\'\n    },\n\n    \'resnet_v2_50\': {\n        \'num_classes\': 1001,\n        \'input_name\': \'input\',\n        \'input_width\': 299,\n        \'input_height\': 299,\n        \'input_channels\': 3,\n        \'output_names\': [\'resnet_v2_50/SpatialSqueeze\'],\n        \'checkpoint_filename\': CHECKPOINT_DIR + \'resnet_v2_50.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'resnet_v2_50.pb\',\n        \'preprocess_fn\': \'preprocess_inception\',\n        \'uff_filename\': UFF_DIR + \'resnet_v2_50.uff\'\n    },\n\n    \'resnet_v2_101\': {\n        \'num_classes\': 1001,\n        \'input_name\': \'input\',\n        \'input_width\': 299,\n        \'input_height\': 299,\n        \'input_channels\': 3,\n        \'output_names\': [\'resnet_v2_101/SpatialSqueeze\'],\n        \'checkpoint_filename\': CHECKPOINT_DIR + \'resnet_v2_101.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'resnet_v2_101.pb\',\n        \'preprocess_fn\': \'preprocess_inception\',\n        \'uff_filename\': UFF_DIR + \'resnet_v2_101.uff\'\n    },\n\n    \'resnet_v2_152\': {\n        \'num_classes\': 1001,\n        \'input_name\': \'input\',\n        \'input_width\': 299,\n        \'input_height\': 299,\n        \'input_channels\': 3,\n        \'output_names\': [\'resnet_v2_152/SpatialSqueeze\'],\n        \'checkpoint_filename\': CHECKPOINT_DIR + \'resnet_v2_152.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'resnet_v2_152.pb\',\n        \'preprocess_fn\': \'preprocess_inception\',\n        \'uff_filename\': UFF_DIR + \'resnet_v2_152.uff\'\n    },\n\n    #\'resnet_v2_200\': {\n\n    #},\n\n    \'mobilenet_v1_1p0_224\': {\n        \'num_classes\': 1001,\n        \'input_name\': \'input\',\n        \'input_width\': 224,\n        \'input_height\': 224,\n        \'input_channels\': 3,\n        \'output_names\': [\'MobilenetV1/Logits/SpatialSqueeze\'],\n        \'checkpoint_filename\': CHECKPOINT_DIR + \n            \'mobilenet_v1_1.0_224.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'mobilenet_v1_1p0_224.pb\',\n        \'uff_filename\': UFF_DIR + \'mobilenet_v1_1p0_224.uff\',\n        \'preprocess_fn\': \'preprocess_inception\',\n    },\n\n    \'mobilenet_v1_0p5_160\': {\n        \'num_classes\': 1001,\n        \'input_name\': \'input\',\n        \'input_width\': 160,\n        \'input_height\': 160,\n        \'input_channels\': 3,\n        \'output_names\': [\'MobilenetV1/Logits/SpatialSqueeze\'],\n        \'checkpoint_filename\': CHECKPOINT_DIR + \n            \'mobilenet_v1_0.50_160.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'mobilenet_v1_0p5_160.pb\',\n        \'uff_filename\': UFF_DIR + \'mobilenet_v1_0p5_160.uff\',\n        \'preprocess_fn\': \'preprocess_inception\',\n    },\n\n    \'mobilenet_v1_0p25_128\': {\n        \'num_classes\': 1001,\n        \'input_name\': \'input\',\n        \'input_width\': 128,\n        \'input_height\': 128,\n        \'input_channels\': 3,\n        \'output_names\': [\'MobilenetV1/Logits/SpatialSqueeze\'],\n        \'checkpoint_filename\': CHECKPOINT_DIR + \n            \'mobilenet_v1_0.25_128.ckpt\',\n        \'frozen_graph_filename\': FROZEN_GRAPHS_DIR + \'mobilenet_v1_0p25_128.pb\',\n        \'uff_filename\': UFF_DIR + \'mobilenet_v1_0p25_128.uff\',\n        \'preprocess_fn\': \'preprocess_inception\',\n    },\n}\n\n\n'"
scripts/models_to_frozen_graphs.py,8,"b'# Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved.\n# Full license terms provided in LICENSE.md file.\n\nimport tensorflow as tf\nimport sys\nsys.path.append(""third_party/models/research/"")\nsys.path.append(""third_party/models"")\nsys.path.append(""third_party/"")\nsys.path.append(""third_party/models/research/slim/"")\nsys.path.append(""scripts"")\nimport tensorflow.contrib.slim as tf_slim\nimport slim.nets as nets\nimport slim.nets.vgg\nfrom model_meta import NETS, CHECKPOINT_DIR, FROZEN_GRAPHS_DIR\nfrom convert_relu6 import convertRelu6\nimport os\n\n\n\nif __name__ == \'__main__\':\n\n    if not os.path.exists(CHECKPOINT_DIR):\n        print(""%s does not exist.  Exiting."" % CHECKPOINT_DIR)\n        exit()\n\n    if not os.path.exists(FROZEN_GRAPHS_DIR):\n        print(""%s does not exist.  Creating it now."" % FROZEN_GRAPHS_DIR)\n        os.makedirs(FROZEN_GRAPHS_DIR)\n\n    for net_name, net_meta in NETS.items():\n\n        if \'exclude\' in net_meta.keys() and net_meta[\'exclude\'] is True:\n            continue\n\n        print(""Converting %s"" % net_name)\n        print(net_meta)\n\n        tf.reset_default_graph()\n        tf_config = tf.ConfigProto()\n        tf_config.gpu_options.allow_growth = True\n        with tf.Session(config=tf_config) as tf_sess:\n            tf_sess = tf.Session(config=tf_config)\n            tf_input = tf.placeholder(\n                tf.float32, \n                (\n                    None, \n                    net_meta[\'input_height\'], \n                    net_meta[\'input_width\'], \n                    net_meta[\'input_channels\']\n                ),\n                name=net_meta[\'input_name\']\n            )\n\n            with tf_slim.arg_scope(net_meta[\'arg_scope\']()):\n                tf_net, tf_end_points = net_meta[\'model\'](\n                    tf_input, \n                    is_training=False,\n                    num_classes=net_meta[\'num_classes\']\n                )\n\n            tf_saver = tf.train.Saver()\n            tf_saver.restore(\n                save_path=net_meta[\'checkpoint_filename\'], \n                sess=tf_sess\n            )\n            frozen_graph = tf.graph_util.convert_variables_to_constants(\n                tf_sess,\n                tf_sess.graph_def,\n                output_node_names=net_meta[\'output_names\']\n            )\n\n            frozen_graph = convertRelu6(frozen_graph)\n\n            with open(net_meta[\'frozen_graph_filename\'], \'wb\') as f:\n                f.write(frozen_graph.SerializeToString())\n        \n            f.close()\n'"
scripts/print_slim_output.py,4,"b'# Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved.\n# Full license terms provided in LICENSE.md file.\n\nimport tensorflow as tf\nimport sys\nsys.path.append(""third_party/models/research/"")\nsys.path.append(""third_party/models"")\nsys.path.append(""third_party/"")\nsys.path.append(""third_party/models/research/slim/"")\nsys.path.append(""scripts"")\nimport tensorflow.contrib.slim as tf_slim\nimport slim.nets as nets\nimport slim.nets.vgg\nfrom model_meta import NETS\n\n\nif __name__ == \'__main__\':\n\n    with open(""data/output_names.txt"", \'w\') as f:\n        for net_name, net_meta in NETS.items():\n\n            tf.reset_default_graph()\n            tf_sess = tf.Session()\n            tf_input = tf.placeholder(\n                tf.float32, \n                (\n                    None, \n                    net_meta[\'input_height\'], \n                    net_meta[\'input_width\'], \n                    net_meta[\'input_channels\']\n                ),\n                name=net_meta[\'input_name\']\n            )\n\n            with tf_slim.arg_scope(net_meta[\'arg_scope\']()):\n                tf_net, tf_end_points = net_meta[\'model\'](\n                    tf_input, \n                    is_training=False,\n                    num_classes=net_meta[\'num_classes\']\n                )\n                print(""Output name for %s is %s"" % (net_name, tf_net.name))\n            f.write(""%s\\t%s\\n"" % (net_name, tf_net.name))\n        f.close()\n'"
scripts/test_tf.py,6,"b'# Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved.\n# Full license terms provided in LICENSE.md file.\n\nimport sys\nsys.path.append(\'third_party/models/\')\nsys.path.append(\'third_party/models/research\')\nsys.path.append(\'third_party/models/research/slim\')\n#from PIL import Image\n#import matplotlib.pyplot as plt\nimport numpy as np\nimport tensorflow as tf\nfrom model_meta import NETS, FROZEN_GRAPHS_DIR, CHECKPOINT_DIR\nimport time\nimport cv2\n\n\nTEST_IMAGE_PATH=\'data/images/gordon_setter.jpg\'\nTEST_OUTPUT_PATH=\'data/test_output_tf.txt\'\nNUM_RUNS=50\n\nif __name__ == \'__main__\':\n\n    with open(TEST_OUTPUT_PATH, \'w\') as test_f:\n        for net_name, net_meta in NETS.items():\n\n            if \'exclude\' in net_meta.keys() and net_meta[\'exclude\'] is True:\n                continue\n\n            print(""Testing %s"" % net_name)\n\n            with open(net_meta[\'frozen_graph_filename\'], \'rb\') as f:\n                graph_def = tf.GraphDef()\n                graph_def.ParseFromString(f.read())\n\n            with tf.Graph().as_default() as graph:\n                tf.import_graph_def(graph_def, name="""")\n            \n            tf_config = tf.ConfigProto()\n            tf_config.gpu_options.allow_growth = True\n            tf_config.allow_soft_placement = True\n\n            with tf.Session(config=tf_config, graph=graph) as tf_sess:\n                tf_input = tf_sess.graph.get_tensor_by_name(net_meta[\'input_name\'] + \':0\')\n                tf_output = tf_sess.graph.get_tensor_by_name(net_meta[\'output_names\'][0] + \':0\')\n\n                # load and preprocess image\n                image = cv2.imread(TEST_IMAGE_PATH)\n                image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n                image = cv2.resize(image, (net_meta[\'input_width\'], net_meta[\'input_height\']))\n                image = net_meta[\'preprocess_fn\'](image)\n\n\n                # run network\n                times = []\n                for i in range(NUM_RUNS + 1):\n                    t0 = time.time()\n                    output = tf_sess.run([tf_output], feed_dict={\n                        tf_input: image[None, ...]\n                    })[0]\n                    t1 = time.time()\n                    times.append(1000 * (t1 - t0))\n                avg_time = np.mean(times[1:]) # don\'t include first run\n\n                # parse output\n                top5 = net_meta[\'postprocess_fn\'](output)\n                print(top5)\n                test_f.write(""%s %s\\n"" % (net_name, avg_time))\n'"
scripts/test_trt.py,0,"b'# Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved.\n# Full license terms provided in LICENSE.md file.\n\nimport sys\n#sys.path.append(""../scripts"")\n#sys.path.append(""."")\nfrom model_meta import NETS\nimport os\nimport subprocess\nimport pdb\n\nTEST_IMAGE_PATH=\'data/images/gordon_setter.jpg\'\nTEST_OUTPUT_PATH=\'data/test_output_trt.txt\'\nTEST_EXE_PATH=\'./build/src/test/test_trt\'\n\nif __name__ == \'__main__\':\n    \n    # delete output file \n    if os.path.isfile(TEST_OUTPUT_PATH):\n       os.remove(TEST_OUTPUT_PATH)\n\n    for net_name, net_meta in NETS.items():\n        if \'exclude\' in net_meta.keys() and net_meta[\'exclude\'] is True:\n            continue\n\n        args = [\n            TEST_IMAGE_PATH,\n            net_meta[\'plan_filename\'],\n            net_meta[\'input_name\'],\n            str(net_meta[\'input_height\']),\n            str(net_meta[\'input_width\']),\n            net_meta[\'output_names\'][0],\n            str(net_meta[\'num_classes\']), \n            net_meta[\'preprocess_fn\'].__name__,\n            str(50), # numRuns\n            ""half"", # dataType \n            str(1), # maxBatchSize \n            str(1 << 20), # workspaceSize \n            str(0), # useMappedMemory \n            TEST_OUTPUT_PATH\n        ]\n        print(""Running %s"" % net_name)\n        subprocess.call([TEST_EXE_PATH] + args)\n'"
