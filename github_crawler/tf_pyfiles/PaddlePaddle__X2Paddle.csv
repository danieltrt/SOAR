file_path,api_count,code
setup.py,0,"b'import setuptools\nimport x2paddle\n\nlong_description = ""X2Paddle is a toolkit for converting trained model to PaddlePaddle from other deep learning frameworks.\\n\\n""\nlong_description += ""Usage: x2paddle --framework tensorflow --model tf_model.pb --save_dir paddle_model\\n""\nlong_description += ""GitHub: https://github.com/PaddlePaddle/X2Paddle\\n""\nlong_description += ""Email: dltp-sz@baidu.com""\n\nsetuptools.setup(\n    name=""x2paddle"",\n    version=x2paddle.__version__,\n    author=""dltp-sz"",\n    author_email=""dltp-sz@baidu.com"",\n    description=\n    ""a toolkit for converting trained model to PaddlePaddle from other deep learning frameworks."",\n    long_description=long_description,\n    long_description_content_type=""text/plain"",\n    url=""https://github.com/PaddlePaddle/x2paddle"",\n    packages=setuptools.find_packages(),\n    classifiers=[\n        ""Programming Language :: Python :: 3"",\n        ""License :: OSI Approved :: Apache Software License"",\n        ""Operating System :: OS Independent"",\n    ],\n    license=\'Apache 2.0\',\n    entry_points={\'console_scripts\': [\n        \'x2paddle=x2paddle.convert:main\',\n    ]})\n'"
tools/check_for_lite.py,0,"b'from six.moves import urllib\nimport sys\nfrom paddle.fluid.framework import Program\n\nops_h = ""https://raw.githubusercontent.com/PaddlePaddle/Paddle-Lite/develop/lite/api/_paddle_use_ops.h""\ntry:\n    fetch = urllib.urlretrieve(ops_h, ""./_paddle_use_ops.h"")\nexcept:\n    fetch = urllib.request.urlretrieve(ops_h, ""./_paddle_use_ops.h"")\n\nops = list()\nwith open(""./_paddle_use_ops.h"") as f:\n    for line in f:\n        if ""USE_LITE_OP"" in line:\n            op = line.strip().split(\'(\')[1].split(\')\')[0]\n            ops.append(op)\n\nmodel_file = sys.argv[1]\nwith open(model_file, \'rb\') as f:\n    program = Program.parse_from_string(f.read())\n\nunsupported_ops = set()\nfor op in program.blocks[0].ops:\n    if op.type not in ops:\n        unsupported_ops.add(op.type)\n\nnums = len(unsupported_ops)\nif len(unsupported_ops) > 0:\n    print(""========= {} OPs are not supported in Paddle-Lite========="".format(\n        nums))\n    for op in unsupported_ops:\n        print(""========= {} ========"".format(op))\nelse:\n    print(""\\n========== Good News! ========"")\n    print(""Good! All ops in this model are supported in Paddle-Lite!\\n"")\n'"
tools/merge_params.py,0,"b'import paddle.fluid as fluid\nimport sys\n\nmodel_dir = sys.argv[1]\nnew_model_dir = sys.argv[2]\nexe = fluid.Executor(fluid.CPUPlace())\n[inference_program, feed_target_names,\n fetch_targets] = fluid.io.load_inference_model(dirname=model_dir, executor=exe)\n\nprint(feed_target_names)\nfluid.io.save_inference_model(dirname=new_model_dir,\n                              feeded_var_names=feed_target_names,\n                              target_vars=fetch_targets,\n                              executor=exe,\n                              main_program=inference_program,\n                              params_filename=""__params__"")\n'"
x2paddle/__init__.py,0,"b'__version__ = ""0.7.2""\n'"
x2paddle/convert.py,1,"b'#   Copyright (c) 2019  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License""\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom six import text_type as _text_type\nimport argparse\nimport sys\n\n\ndef arg_parser():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        ""--model"",\n        ""-m"",\n        type=_text_type,\n        default=None,\n        help=""define model file path for tensorflow or onnx"")\n    parser.add_argument(\n        ""--prototxt"",\n        ""-p"",\n        type=_text_type,\n        default=None,\n        help=""prototxt file of caffe model"")\n    parser.add_argument(\n        ""--weight"",\n        ""-w"",\n        type=_text_type,\n        default=None,\n        help=""weight file of caffe model"")\n    parser.add_argument(\n        ""--save_dir"",\n        ""-s"",\n        type=_text_type,\n        default=None,\n        help=""path to save translated model"")\n    parser.add_argument(\n        ""--framework"",\n        ""-f"",\n        type=_text_type,\n        default=None,\n        help=\n        ""define which deeplearning framework(tensorflow/caffe/onnx/paddle2onnx)""\n    )\n    parser.add_argument(\n        ""--caffe_proto"",\n        ""-c"",\n        type=_text_type,\n        default=None,\n        help=""optional: the .py file compiled by caffe proto file of caffe model""\n    )\n    parser.add_argument(\n        ""--version"",\n        ""-v"",\n        action=""store_true"",\n        default=False,\n        help=""get version of x2paddle"")\n    parser.add_argument(\n        ""--without_data_format_optimization"",\n        ""-wo"",\n        action=""store_true"",\n        default=False,\n        help=""tf model conversion without data format optimization"")\n    parser.add_argument(\n        ""--define_input_shape"",\n        ""-d"",\n        action=""store_true"",\n        default=False,\n        help=""define input shape for tf model"")\n    parser.add_argument(\n        ""--params_merge"",\n        ""-pm"",\n        action=""store_true"",\n        default=False,\n        help=""define whether merge the params"")\n\n    return parser\n\n\ndef tf2paddle(model_path,\n              save_dir,\n              without_data_format_optimization=False,\n              define_input_shape=False,\n              params_merge=False):\n    # check tensorflow installation and version\n    try:\n        import os\n        os.environ[""TF_CPP_MIN_LOG_LEVEL""] = \'3\'\n        import tensorflow as tf\n        version = tf.__version__\n        if version >= \'2.0.0\' or version < \'1.0.0\':\n            print(\n                ""[ERROR] 1.0.0<=tensorflow<2.0.0 is required, and v1.14.0 is recommended""\n            )\n            return\n    except:\n        print(\n            ""[ERROR] Tensorflow is not installed, use \\""pip install tensorflow\\"".""\n        )\n        return\n\n    from x2paddle.decoder.tf_decoder import TFDecoder\n    from x2paddle.op_mapper.tf_op_mapper import TFOpMapper\n    from x2paddle.op_mapper.tf_op_mapper_nhwc import TFOpMapperNHWC\n    from x2paddle.optimizer.tf_optimizer import TFOptimizer\n\n    print(""Now translating model from tensorflow to paddle."")\n    model = TFDecoder(model_path, define_input_shape=define_input_shape)\n    if not without_data_format_optimization:\n        mapper = TFOpMapper(model)\n        optimizer = TFOptimizer(mapper)\n        # neccesary optimization\n        optimizer.delete_redundance_code()\n        # optimizer below is experimental\n        optimizer.optimize_elementwise_op()\n        optimizer.merge_activation()\n        optimizer.merge_bias()\n        optimizer.optimize_sub_graph()\n\n\n#        optimizer.merge_batch_norm()\n#        optimizer.merge_prelu()\n    else:\n        mapper = TFOpMapperNHWC(model)\n        optimizer = TFOptimizer(mapper)\n        optimizer.delete_redundance_code()\n        optimizer.strip_graph()\n        optimizer.merge_activation()\n        optimizer.merge_bias()\n        optimizer.make_nchw_input_output()\n        optimizer.remove_transpose()\n    mapper.save_inference_model(save_dir, params_merge)\n\n\ndef caffe2paddle(proto, weight, save_dir, caffe_proto, params_merge=False):\n    from x2paddle.decoder.caffe_decoder import CaffeDecoder\n    from x2paddle.op_mapper.caffe_op_mapper import CaffeOpMapper\n    from x2paddle.optimizer.caffe_optimizer import CaffeOptimizer\n    import google.protobuf as gpb\n    ver_part = gpb.__version__.split(\'.\')\n    version_satisfy = False\n    if (int(ver_part[0]) == 3 and int(ver_part[1]) >= 6) \\\n        or (int(ver_part[0]) > 3):\n        version_satisfy = True\n    assert version_satisfy, \'[ERROR] google.protobuf >= 3.6.0 is required\'\n    print(""Now translating model from caffe to paddle."")\n    model = CaffeDecoder(proto, weight, caffe_proto)\n    mapper = CaffeOpMapper(model)\n    optimizer = CaffeOptimizer(mapper)\n    optimizer.merge_bn_scale()\n    optimizer.merge_op_activation()\n    mapper.save_inference_model(save_dir, params_merge)\n\n\ndef onnx2paddle(model_path, save_dir, params_merge=False):\n    # check onnx installation and version\n    try:\n        import onnx\n        version = onnx.version.version\n        if version != \'1.6.0\':\n            print(""[ERROR] onnx==1.6.0 is required"")\n            return\n    except:\n        print(""[ERROR] onnx is not installed, use \\""pip install onnx==1.6.0\\""."")\n        return\n    print(""Now translating model from onnx to paddle."")\n\n    from x2paddle.op_mapper.onnx_op_mapper import ONNXOpMapper\n    from x2paddle.decoder.onnx_decoder import ONNXDecoder\n    from x2paddle.optimizer.onnx_optimizer import ONNXOptimizer\n    import onnxruntime\n    model = ONNXDecoder(model_path)\n    mapper = ONNXOpMapper(model, save_dir)\n    optimizer = ONNXOptimizer(mapper)\n\n    optimizer.delete_redundance_code()\n    mapper.save_inference_model(save_dir, params_merge)\n\n\ndef paddle2onnx(model_path, save_dir):\n    from x2paddle.decoder.paddle_decoder import PaddleDecoder\n    from x2paddle.op_mapper.paddle_op_mapper import PaddleOpMapper\n    model = PaddleDecoder(model_path, \'__model__\', \'__params__\')\n    mapper = PaddleOpMapper()\n    mapper.convert(model.program, save_dir)\n\n\ndef main():\n    if len(sys.argv) < 2:\n        print(""Use \\""x2paddle -h\\"" to print the help information"")\n        print(""For more information, please follow our github repo below:)"")\n        print(""\\nGithub: https://github.com/PaddlePaddle/X2Paddle.git\\n"")\n        return\n\n    parser = arg_parser()\n    args = parser.parse_args()\n\n    if args.version:\n        import x2paddle\n        print(""x2paddle-{} with python>=3.5, paddlepaddle>=1.6.0\\n"".format(\n            x2paddle.__version__))\n        return\n\n    assert args.framework is not None, ""--framework is not defined(support tensorflow/caffe/onnx)""\n    assert args.save_dir is not None, ""--save_dir is not defined""\n\n    if args.framework == ""onnx"":\n        try:\n            import onnxruntime as rt\n            version = rt.__version__\n            if version != \'1.0.0\':\n                print(""[ERROR] onnxruntime==1.0.0 is required"")\n                return\n        except:\n            print(\n                ""[ERROR] onnxruntime is not installed, use \\""pip install onnxruntime==1.0.0\\"".""\n            )\n\n    try:\n        import paddle\n        v0, v1, v2 = paddle.__version__.split(\'.\')\n        print(""paddle.__version__ = {}"".format(paddle.__version__))\n        if v0 == \'0\' and v1 == \'0\' and v2 == \'0\':\n            print(""[WARNING] You are use develop version of paddlepaddle"")\n        elif int(v0) != 1 or int(v1) < 6:\n            print(""[ERROR] paddlepaddle>=1.6.0 is required"")\n            return\n    except:\n        print(\n            ""[ERROR] paddlepaddle not installed, use \\""pip install paddlepaddle\\""""\n        )\n\n    if args.framework == ""tensorflow"":\n        assert args.model is not None, ""--model should be defined while translating tensorflow model""\n        without_data_format_optimization = False\n        define_input_shape = False\n        params_merge = False\n        if args.without_data_format_optimization:\n            without_data_format_optimization = True\n        if args.define_input_shape:\n            define_input_shape = True\n        if args.params_merge:\n            params_merge = True\n        tf2paddle(args.model, args.save_dir, without_data_format_optimization,\n                  define_input_shape, params_merge)\n\n    elif args.framework == ""caffe"":\n        assert args.prototxt is not None and args.weight is not None, ""--prototxt and --weight should be defined while translating caffe model""\n        params_merge = False\n        if args.params_merge:\n            params_merge = True\n        caffe2paddle(args.prototxt, args.weight, args.save_dir,\n                     args.caffe_proto, params_merge)\n    elif args.framework == ""onnx"":\n        assert args.model is not None, ""--model should be defined while translating onnx model""\n        params_merge = False\n        if args.params_merge:\n            params_merge = True\n        onnx2paddle(args.model, args.save_dir, params_merge)\n\n    elif args.framework == ""paddle2onnx"":\n        assert args.model is not None, ""--model should be defined while translating paddle model to onnx""\n        paddle2onnx(args.model, args.save_dir)\n\n    else:\n        raise Exception(\n            ""--framework only support tensorflow/caffe/onnx/paddle2onnx now"")\n\n\nif __name__ == ""__main__"":\n    main()\n'"
x2paddle/core/__init__.py,0,b''
x2paddle/core/fluid_code.py,0,"b'#   Copyright (c) 2019  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License""\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom x2paddle.core.graph import GraphNode\nfrom x2paddle.core.util import *\nimport collections\nimport six\n\n\nclass Layer(object):\n    def __init__(self):\n        self.op = None\n        self.param_attr = dict()\n        self.inputs = dict()\n        self.output = None\n        self.is_custom_layer = False\n\n    def get_code(self):\n        layer_code = """"\n        if self.output is not None:\n            if isinstance(self.output, six.string_types):\n                layer_code = self.output + "" = ""\n            else:\n                layer_code = self.output.layer_name + "" = ""\n\n        if self.is_custom_layer:\n            layer_code = layer_code + self.op + ""(""\n        elif self.op == ""="":\n            layer_code = layer_code\n        else:\n            layer_code = layer_code + ""fluid.layers."" + self.op + ""(""\n\n        if isinstance(self.inputs, list):\n            in_list = ""[""\n            for input in self.inputs:\n                if isinstance(input, GraphNode):\n                    if hasattr(input, ""index""):\n                        in_list += (input.layer_name +\n                                    ""[{}]"".format(input.index) + "", "")\n                    else:\n                        in_list += (input.layer_name + "", "")\n                elif isinstance(input, six.string_types):\n                    in_list += (input + "", "")\n                else:\n                    raise Exception(\n                        ""Element of inputs should GraphNode or String"")\n            in_list = in_list.strip("", "") + ""], ""\n            layer_code += in_list\n        elif isinstance(self.inputs, dict):\n            inputs = collections.OrderedDict(self.inputs)\n            for key, input in inputs.items():\n                if isinstance(input, GraphNode):\n                    if hasattr(input, ""index""):\n                        layer_code = layer_code + key + ""={}, "".format(\n                            input.layer_name + ""[{}]"".format(input.index))\n                    else:\n                        layer_code = layer_code + key + ""={}, "".format(\n                            input.layer_name)\n                else:\n                    layer_code = layer_code + key + ""={}, "".format(input)\n        elif isinstance(self.inputs, GraphNode):\n            if hasattr(self.inputs, ""index""):\n                layer_code += (self.inputs.layer_name +\n                               ""[{}]"".format(self.inputs.index))\n            else:\n                layer_code += (self.inputs.layer_name)\n            if self.op != ""="":\n                layer_code += "", ""\n        elif isinstance(self.inputs, six.string_types):\n            layer_code += (self.inputs)\n            if self.op != ""="":\n                layer_code += "", ""\n        else:\n            raise Exception(""Unknown type of inputs."")\n\n        param_attr = collections.OrderedDict(self.param_attr)\n        for key, value in param_attr.items():\n            if \'\\n\' in str(value):\n                value = string(str(value).replace(\'\\n\', \',\'))\n            if str(key) == \'attr\':\n                value = \'ParamAttr(\' + str(value) + \')\'\n            layer_code = layer_code + key + ""={}, "".format(value)\n        layer_code = layer_code.strip("", "")\n\n        if self.op != ""="":\n            layer_code += "")""\n        return layer_code\n\n\nclass FluidCode(object):\n    def __init__(self):\n        self.layers = list()\n\n    def add_layer(self,\n                  op,\n                  inputs,\n                  output,\n                  param_attr=None,\n                  is_custom_layer=False):\n        layer = Layer()\n        layer.op = op\n        layer.is_custom_layer = is_custom_layer\n        if inputs is not None:\n            layer.inputs = inputs\n        layer.output = output\n        if param_attr is not None:\n            layer.param_attr = param_attr\n        self.layers.append(layer)\n\n    def add_note(self, note):\n        # note should be string\n        self.layers.append(note)\n\n    def clear(self):\n        self.layers = list()\n\n    def gen_codes(self):\n        codes = list()\n        for layer in self.layers:\n            if isinstance(layer, Layer):\n                codes.append(layer.get_code())\n            elif isinstance(layer, six.string_types):\n                codes.append(layer)\n        return codes\n'"
x2paddle/core/graph.py,0,"b'#   Copyright (c) 2019  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License""\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom __future__ import print_function\nfrom __future__ import division\nimport collections\nimport copy as cp\n\n\nclass GraphNode(object):\n    def __init__(self, layer, layer_name=None):\n        self.inputs = list()\n        self.outputs = list()\n        self.layer = layer\n\n        assert layer_name is not None, ""layer_name for GraphNode should not be None""\n        self.layer_name = layer_name\n\n    def __hash__(self):\n        return hash(self.layer.name)\n\n    def __eq__(self, other):\n        if self.layer.name == other.layer.name:\n            return True\n        return False\n\n\nclass Graph(object):\n    def __init__(self, model):\n        self.node_map = collections.OrderedDict()\n        self.input_nodes = list()\n        self.output_nodes = list()\n        self.topo_sort = list()\n        self.model = model\n\n    def build(self):\n        self.get_input_nodes()\n        self.get_output_nodes()\n        self.get_topo_sort()\n\n    def get_input_nodes(self):\n        for name, node in self.node_map.items():\n            name = name.replace(\'/\', \'_\').replace(\'-\', \'_\')\n            if len(node.inputs) == 0:\n                self.input_nodes.append(name)\n\n    def get_output_nodes(self):\n        for name, node in self.node_map.items():\n            name = name.replace(\'/\', \'_\').replace(\'-\', \'_\')\n            if len(node.outputs) == 0:\n                self.output_nodes.append(name)\n\n    def get_topo_sort(self):\n        num_inputs = dict()\n        for name, node in self.node_map.items():\n            num_inputs[name] = len(node.inputs)\n\n        self.topo_sort = self.input_nodes[:]\n        idx = 0\n        while idx < len(self.topo_sort):\n            current_node = self.node_map[self.topo_sort[idx]]\n            for node in current_node.outputs:\n                num_inputs[node] -= 1\n                if num_inputs[node] == 0:\n                    self.topo_sort.append(node)\n            idx += 1\n\n    def get_node(self, name, copy=False):\n        if name not in self.node_map:\n            if name.split(\':\')[0] in self.node_map:\n                name_prefix, idx = name.split(\':\')\n                if copy:\n                    node = cp.copy(self.node_map[name_prefix])\n                else:\n                    node = self.node_map[name_prefix]\n                node.index = int(idx)\n                return node\n            else:\n                return None\n        else:\n            if copy:\n                node = cp.copy(self.node_map[name])\n            else:\n                node = self.node_map[name]\n            return node\n\n    def connect(self, src, dst):\n        if dst not in self.node_map:\n            raise Exception(""node[{}] not in graph"".format(dst))\n        self.node_map[dst].inputs.append(src)\n        self.node_map[src].outputs.append(dst)\n'"
x2paddle/core/op_mapper.py,0,"b'#   Copyright (c) 2019  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License""\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport paddle.fluid as fluid\nfrom paddle.fluid.proto import framework_pb2\nfrom x2paddle.core.util import *\nimport inspect\nimport os\n\n\ndef export_paddle_param(param, param_name, dir):\n    dtype_map = {\n        ""int16"": [framework_pb2.VarType.INT16, \'h\'],\n        ""int32"": [framework_pb2.VarType.INT32, \'i\'],\n        ""int64"": [framework_pb2.VarType.INT64, \'q\'],\n        ""float16"": [framework_pb2.VarType.FP16, \'e\'],\n        ""float32"": [framework_pb2.VarType.FP32, \'f\'],\n        ""float64"": [framework_pb2.VarType.FP64, \'d\'],\n        ""bool"": [framework_pb2.VarType.BOOL, None]\n    }\n    shape = param.shape\n    if len(shape) == 0:\n        assert param.size == 1, ""Unexpected situation happend!""\n        shape = [1]\n    assert str(param.dtype) in dtype_map, ""Unknown dtype of params.""\n\n    fp = open(os.path.join(dir, param_name), \'wb\')\n    numpy.array([0], dtype=\'int32\').tofile(fp)\n    numpy.array([0], dtype=\'int64\').tofile(fp)\n    numpy.array([0], dtype=\'int32\').tofile(fp)\n    tensor_desc = framework_pb2.VarType.TensorDesc()\n    tensor_desc.data_type = dtype_map[str(param.dtype)][0]\n    tensor_desc.dims.extend(shape)\n    desc_size = tensor_desc.ByteSize()\n    numpy.array([desc_size], dtype=\'int32\').tofile(fp)\n    fp.write(tensor_desc.SerializeToString())\n    param.tofile(fp)\n    fp.close()\n\n\n# This func will copy to generate code file\ndef run_net(param_dir=""./""):\n    import os\n    inputs, outputs = x2paddle_net()\n    for i, out in enumerate(outputs):\n        if isinstance(out, list):\n            for out_part in out:\n                outputs.append(out_part)\n            del outputs[i]\n    exe = fluid.Executor(fluid.CPUPlace())\n    exe.run(fluid.default_startup_program())\n\n    def if_exist(var):\n        b = os.path.exists(os.path.join(param_dir, var.name))\n        return b\n\n    fluid.io.load_vars(exe,\n                       param_dir,\n                       fluid.default_main_program(),\n                       predicate=if_exist)\n\n\nclass OpMapper(object):\n    def __init__(self):\n        self.paddle_codes = """"\n        self.tab = ""    ""\n        self.net_code = list()\n        self.weights = dict()\n        self.inputs = list()\n        self.outputs = list()\n\n    def op_checker(self):\n        unsupported_ops = set()\n        for node_name in self.graph.topo_sort:\n            node = self.graph.get_node(node_name)\n            op = node.layer_type\n            if not hasattr(self, op):\n                unsupported_ops.add(op)\n        if len(unsupported_ops) == 0:\n            return True\n        else:\n            print(""There are {} ops not supported yet, list as below"".format(\n                len(unsupported_ops)))\n            for op in unsupported_ops:\n                print(op)\n            return False\n\n    def add_codes(self, codes, indent=0):\n        if isinstance(codes, list):\n            for code in codes:\n                self.paddle_codes += (self.tab * indent + code.strip(\'\\n\') +\n                                      \'\\n\')\n        elif isinstance(codes, str):\n            self.paddle_codes += (self.tab * indent + codes.strip(\'\\n\') + \'\\n\')\n        else:\n            raise Exception(""Unknown type of codes"")\n\n    def add_heads(self):\n        self.add_codes(""from paddle.fluid.initializer import Constant"")\n        self.add_codes(""from paddle.fluid.param_attr import ParamAttr"")\n        self.add_codes(""import paddle.fluid as fluid"")\n        self.add_codes("""")\n\n    def save_inference_model(self, save_dir, params_merge):\n        self.save_python_model(save_dir)\n\n        import sys\n        import paddle.fluid as fluid\n        py_code_dir = os.path.join(save_dir, ""model_with_code"")\n        sys.path.append(py_code_dir)\n        import model\n        try:\n            inputs, outputs = model.x2paddle_net()\n            for i, out in enumerate(outputs):\n                if isinstance(out, list):\n                    for out_part in out:\n                        outputs.append(out_part)\n                    del outputs[i]\n            input_names = [input.name for input in inputs]\n            exe = fluid.Executor(fluid.CPUPlace())\n            exe.run(fluid.default_startup_program())\n\n            def if_exist(var):\n                b = os.path.exists(\n                    os.path.join(os.path.join(py_code_dir, var.name)))\n                return b\n\n            fluid.io.load_vars(exe,\n                               py_code_dir,\n                               fluid.default_main_program(),\n                               predicate=if_exist)\n            if params_merge:\n                fluid.io.save_inference_model(dirname=os.path.join(\n                    save_dir, ""inference_model""),\n                                              feeded_var_names=input_names,\n                                              target_vars=outputs,\n                                              executor=exe,\n                                              params_filename=""__params__"")\n            else:\n                fluid.io.save_inference_model(dirname=os.path.join(\n                    save_dir, ""inference_model""),\n                                              feeded_var_names=input_names,\n                                              target_vars=outputs,\n                                              executor=exe,\n                                              params_filename=None)\n        except:\n            raise Exception(\n                ""Paddle code was saved in {}/model.py, but seems there\'s wrong exist, please check model.py manually.""\n                .format(py_code_dir))\n\n    def save_python_model(self, save_dir):\n        if not os.path.exists(save_dir):\n            os.makedirs(save_dir)\n\n        py_code_dir = os.path.join(save_dir, ""model_with_code"")\n        if not os.path.exists(py_code_dir):\n            os.makedirs(py_code_dir)\n\n        for name, param in self.weights.items():\n            export_paddle_param(param, name, py_code_dir)\n        self.add_heads()\n\n        if hasattr(self, ""used_custom_layers""):\n            for _, layer_code in self.used_custom_layers.items():\n                self.add_codes(layer_code, 0)\n                self.add_codes("""", 0)\n\n        self.add_codes(""\\ndef x2paddle_net():"", 0)\n        for i in range(len(self.graph.topo_sort)):\n            node_name = self.graph.topo_sort[i]\n            node = self.graph.get_node(node_name)\n            if node is None:\n                continue\n            if len(node.fluid_code.layers) == 0:\n                continue\n            self.add_codes(node.fluid_code.gen_codes(), 1)\n\n        self.add_codes("""", 0)\n\n        input_str = ""[""\n        for name in self.graph.input_nodes:\n            input_str += (name + "", "")\n        input_str = input_str.strip("", "") + ""]""\n        output_str = ""[""\n        for name in self.graph.output_nodes:\n            output_str += (name + "", "")\n        output_str = output_str.strip("", "") + ""]""\n\n        return_code = ""return {}, {}"".format(input_str, output_str)\n\n        self.add_codes(return_code, 1)\n        self.add_codes("""", 0)\n\n        self.add_codes(inspect.getsourcelines(run_net)[0])\n        fp = open(os.path.join(py_code_dir, ""model.py""), \'w\')\n        fp.write(self.paddle_codes)\n        fp.close()\n'"
x2paddle/core/util.py,0,"b'#   Copyright (c) 2019  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License""\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport numpy\nimport math\nimport os\n\n\ndef string(param):\n    return ""\\\'{}\\\'"".format(param)\n'"
x2paddle/decoder/__init__.py,0,b''
x2paddle/decoder/caffe_decoder.py,0,"b'#   Copyright (c) 2019  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License""\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\nimport sys\nfrom google.protobuf import text_format\nimport numpy as np\nfrom x2paddle.core.graph import GraphNode, Graph\nfrom x2paddle.core.fluid_code import FluidCode\nfrom x2paddle.op_mapper import caffe_shape\n\n\nclass CaffeResolver(object):\n    def __init__(self, caffe_proto):\n        self.caffe_proto = caffe_proto\n        self.import_caffe()\n\n    def import_caffepb(self):\n        if self.caffe_proto is None:\n            from x2paddle.decoder import caffe_pb2\n            out = caffe_pb2\n        else:\n            if not os.path.isfile(self.caffe_proto):\n                raise Exception(\n                    ""The .py file compiled by caffe.proto is not exist."")\n            (filepath,\n             tempfilename) = os.path.split(os.path.abspath(self.caffe_proto))\n            (filename, extension) = os.path.splitext(tempfilename)\n            sys.path.append(filepath)\n            out = __import__(filename)\n        return out\n\n    def import_caffe(self):\n        self.caffepb = self.import_caffepb()\n        self.NetParameter = self.caffepb.NetParameter\n\n\nclass CaffeGraphNode(GraphNode):\n    def __init__(self, layer, type_str, layer_name=None):\n        if layer_name is None:\n            super(CaffeGraphNode,\n                  self).__init__(layer,\n                                 layer.name.replace(\'/\', \'_\').replace(\'-\', \'_\'))\n        else:\n            super(CaffeGraphNode,\n                  self).__init__(layer,\n                                 layer_name.replace(\'/\', \'_\').replace(\'-\', \'_\'))\n        self.layer_type = type_str\n        self.fluid_code = FluidCode()\n        self.data = None\n\n    def set_params(self, params):\n        self.data = params\n\n\nclass CaffeGraph(Graph):\n    def __init__(self, model, params, caffe_pb):\n        self.params = params\n        self.caffe_pb = caffe_pb\n        super(CaffeGraph, self).__init__(model)\n\n    def filter_layers(self, layers):\n        \'\'\'Filter out layers based on the current phase.\'\'\'\n        phase_map = {0: \'train\', 1: \'test\'}\n        filtered_layer_names = set()\n        filtered_layers = []\n        for layer in layers:\n            if hasattr(layer, \'input\'):\n                continue\n            type_str = self.get_layer_type(layer)\n            phase = \'test\'\n            if len(layer.include):\n                phase = phase_map[layer.include[0].phase]\n            if len(layer.exclude):\n                phase = phase_map[1 - layer.include[0].phase]\n            exclude = (phase != \'test\')\n            # Dropout layers appear in a fair number of Caffe\n            # test-time networks. These are just ignored. We\'ll\n            # filter them out here.\n            if (not exclude) and (phase == \'test\'):\n                exclude = (type_str == \'Dropout\')\n            if not exclude:\n                filtered_layers.append(layer)\n                # Guard against dupes.\n                assert layer.name not in filtered_layer_names\n                filtered_layer_names.add(layer.name)\n            else:\n                print(\'The filter layer:\' + layer.name)\n        return filtered_layers\n\n    def generate_input_layer(self, dims, index):\n        dim_str = \'\'\n        for dim in dims:\n            dim_str += \'dim: {}\\n\'.format(str(dim))\n        input_str = \'layer {\\n\'\n        input_str += \'name: \\""{}\\""\\n \'.format(str(self.model.input[index]))\n        input_str += \'type: ""Input""\\n\'\n        input_str += \'top: \\""{}\\""\\n\'.format(str(self.model.input[index]))\n        input_str += \'input_param {\\n\'\n        input_str += \'shape {\\n\'\n        input_str += dim_str\n        input_str += \'}}}\'\n        input_str = str.encode(input_str)\n        net = self.caffe_pb.NetParameter()\n        text_format.Merge(input_str, net)\n        return net.layers or net.layer\n\n    def input2layers(self, input_layers=[]):\n        inputs_num = len(self.model.input)\n        if inputs_num != 0:\n            input_dims_num = len(self.model.input_dim)\n            if input_dims_num != 0:\n                if input_dims_num > 0 and input_dims_num != inputs_num * 4:\n                    raise Error(\'invalid input_dim[%d] param in prototxt\' %\n                                (input_dims_num))\n                for i in range(inputs_num):\n                    dims = self.model.input_dim[i * 4:(i + 1) * 4]\n                    l = self.generate_input_layer(dims, i)\n                    input_layers.append(l[0])\n            else:\n                for i in range(inputs_num):\n                    dims = self.model.input_shape[i].dim[0:4]\n                    l = self.generate_input_layer(dims, i)\n                    input_layers.append(l[0])\n\n    def transform_input_layers(self, layers, input_layers=[]):\n        for layer in layers:\n            if hasattr(layer, \'input\'):\n                input_dims_num = len(layers.input_dim)\n                if input_dims_num > 0 and input_dims_num != 4:\n                    raise Error(\'invalid input_dim[%d] param in prototxt\' %\n                                (input_dims_num))\n                dims = self.model.input_dim[0:4]\n                l = self.generate_input_layer(dims, i)\n                input_layers.append(l[0])\n\n    def get_layer_type(self, layer):\n        if isinstance(layer.type, int):\n            enum_values = self.caffe_pb._V1LAYERPARAMETER_LAYERTYPE.values\n            vals = [val for val in enum_values if val.number == layer.type]\n            part = vals[0].name.split(\'_\')\n            part = [s.capitalize() for s in part]\n            type_str = \'\'\n            type_str = type_str.join(part)\n            if \'relu\' in type_str.lower():\n                type_str = type_str.replace(\'elu\', \'eLU\')\n            elif type_str.lower() == \'lrn\':\n                type_str = \'LRN\'\n            return type_str\n        else:\n            return layer.type\n\n    def build(self):\n        layers = self.model.layers or self.model.layer\n\n        layers = self.filter_layers(layers)\n\n        input_layers = []\n\n        self.input2layers(input_layers)\n        self.transform_input_layers(layers, input_layers)\n        layers = input_layers + layers\n        for layer in layers:\n            if hasattr(layer, \'name\'):\n                name = getattr(layer, \'name\')\n                setattr(layer, \'name\', name.replace(\'/\', \'_\').replace(\'-\', \'_\'))\n            for i, name in enumerate(layer.bottom):\n                layer.bottom[i] = name.replace(\'/\', \'_\').replace(\'-\', \'_\')\n            for i, name in enumerate(layer.top):\n                layer.top[i] = name.replace(\'/\', \'_\').replace(\'-\', \'_\')\n\n        top_layer = {}\n        for layer in layers:\n            if hasattr(layer, \'input\'):\n                continue\n            type_str = self.get_layer_type(layer)\n            self.node_map[layer.name] = CaffeGraphNode(layer, type_str)\n            for in_name in layer.bottom:\n                if in_name in top_layer:\n                    self.connect(top_layer[in_name][-1], layer.name)\n                else:\n                    raise Exception(\n                        \'input[{}] of node[{}] does not exist in node_map\'.\n                        format(in_name, layer.name))\n            for out_name in layer.top:\n                if out_name not in top_layer:\n                    top_layer[out_name] = [layer.name]\n                else:\n                    top_layer[out_name].append(layer.name)\n        for layer_name, data in self.params:\n            if layer_name in self.node_map:\n                node = self.node_map[layer_name]\n                node.set_params(data)\n            else:\n                print(\'Ignoring parameters for non-existent layer: %s\' % \\\n                       layer_name)\n\n        super(CaffeGraph, self).build()\n\n    def get_bottom_node(self, node, idx=0, copy=False):\n        input_node_name = node.inputs[idx]\n        assert input_node_name in self.node_map, \'The {} isn\\\'t a valid node\'.format(\n            name)\n        input_node = self.node_map[input_node_name]\n        if len(input_node.layer.top) > 1:\n            need_idx = list(input_node.layer.top).index(node.layer.bottom[idx])\n            name = input_node_name + \':\' + str(need_idx)\n        else:\n            name = input_node_name\n        return self.get_node(name, copy=copy)\n\n\nclass CaffeDecoder(object):\n    def __init__(self, proto_path, model_path, caffe_proto):\n        self.proto_path = proto_path\n        self.model_path = model_path\n\n        self.resolver = CaffeResolver(caffe_proto=caffe_proto)\n        self.net = self.resolver.NetParameter()\n        with open(proto_path, \'rb\') as proto_file:\n            proto_str = proto_file.read()\n            text_format.Merge(proto_str, self.net)\n\n        self.load_using_pb()\n\n        self.caffe_graph = CaffeGraph(self.net, self.params,\n                                      self.resolver.caffepb)\n        self.caffe_graph.build()\n\n    def load_using_pb(self):\n        data = self.resolver.NetParameter()\n        data.MergeFromString(open(self.model_path, \'rb\').read())\n        layers = data.layers or data.layer\n        for layer in layers:\n            setattr(layer, \'name\',\n                    layer.name.replace(\'/\', \'_\').replace(\'-\', \'_\'))\n        pair = lambda layer: (layer.name, self.normalize_pb_data(layer))\n        self.params = [pair(layer) for layer in layers if layer.blobs]\n\n    def normalize_pb_data(self, layer):\n        transformed = []\n        for blob in layer.blobs:\n            if len(blob.shape.dim):\n                dims = blob.shape.dim\n                if layer.type == \'PReLU\':\n                    c_o, c_i, h, w = map(int, [1] + \\\n                        list(dims) + [1]* (3 - len(dims)))\n                elif layer.type == \'Normalize\' and len(dims) == 4:\n                    data = np.asarray(list(blob.data), dtype=np.float32)\n                    transformed.append(data)\n                    continue\n                else:\n                    c_o, c_i, h, w = map(int,\n                                         [1] * (4 - len(dims)) + list(dims))\n            else:\n                c_o = blob.num\n                c_i = blob.channels\n                h = blob.height\n                w = blob.width\n            data = np.asarray(list(blob.data),\n                              dtype=np.float32).reshape(c_o, c_i, h, w)\n\n            transformed.append(data)\n        return transformed\n'"
x2paddle/decoder/caffe_pb2.py,0,"b'# Generated by the protocol buffer compiler.  DO NOT EDIT!\n# source: caffe.proto\n\nimport sys\n_b = sys.version_info[0] < 3 and (lambda x: x) or (lambda x: x.encode(\'latin1\'))\nfrom google.protobuf.internal import enum_type_wrapper\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import message as _message\nfrom google.protobuf import reflection as _reflection\nfrom google.protobuf import symbol_database as _symbol_database\n# @@protoc_insertion_point(imports)\n\n_sym_db = _symbol_database.Default()\n\nDESCRIPTOR = _descriptor.FileDescriptor(\n    name=\'caffe.proto\',\n    package=\'caffe\',\n    syntax=\'proto2\',\n    serialized_options=None,\n    serialized_pb=_b(\n        \'\\n\\x0b\\x63\\x61\\x66\\x66\\x65.proto\\x12\\x05\\x63\\x61\\x66\\x66\\x65\\""\\x1c\\n\\tBlobShape\\x12\\x0f\\n\\x03\\x64im\\x18\\x01 \\x03(\\x03\\x42\\x02\\x10\\x01\\""\\xcc\\x01\\n\\tBlobProto\\x12\\x1f\\n\\x05shape\\x18\\x07 \\x01(\\x0b\\x32\\x10.caffe.BlobShape\\x12\\x10\\n\\x04\\x64\\x61ta\\x18\\x05 \\x03(\\x02\\x42\\x02\\x10\\x01\\x12\\x10\\n\\x04\\x64iff\\x18\\x06 \\x03(\\x02\\x42\\x02\\x10\\x01\\x12\\x17\\n\\x0b\\x64ouble_data\\x18\\x08 \\x03(\\x01\\x42\\x02\\x10\\x01\\x12\\x17\\n\\x0b\\x64ouble_diff\\x18\\t \\x03(\\x01\\x42\\x02\\x10\\x01\\x12\\x0e\\n\\x03num\\x18\\x01 \\x01(\\x05:\\x01\\x30\\x12\\x13\\n\\x08\\x63hannels\\x18\\x02 \\x01(\\x05:\\x01\\x30\\x12\\x11\\n\\x06height\\x18\\x03 \\x01(\\x05:\\x01\\x30\\x12\\x10\\n\\x05width\\x18\\x04 \\x01(\\x05:\\x01\\x30\\""2\\n\\x0f\\x42lobProtoVector\\x12\\x1f\\n\\x05\\x62lobs\\x18\\x01 \\x03(\\x0b\\x32\\x10.caffe.BlobProto\\""\\x81\\x01\\n\\x05\\x44\\x61tum\\x12\\x10\\n\\x08\\x63hannels\\x18\\x01 \\x01(\\x05\\x12\\x0e\\n\\x06height\\x18\\x02 \\x01(\\x05\\x12\\r\\n\\x05width\\x18\\x03 \\x01(\\x05\\x12\\x0c\\n\\x04\\x64\\x61ta\\x18\\x04 \\x01(\\x0c\\x12\\r\\n\\x05label\\x18\\x05 \\x01(\\x05\\x12\\x12\\n\\nfloat_data\\x18\\x06 \\x03(\\x02\\x12\\x16\\n\\x07\\x65ncoded\\x18\\x07 \\x01(\\x08:\\x05\\x66\\x61lse\\""A\\n\\x0cLabelMapItem\\x12\\x0c\\n\\x04name\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05label\\x18\\x02 \\x01(\\x05\\x12\\x14\\n\\x0c\\x64isplay_name\\x18\\x03 \\x01(\\t\\""-\\n\\x08LabelMap\\x12!\\n\\x04item\\x18\\x01 \\x03(\\x0b\\x32\\x13.caffe.LabelMapItem\\""o\\n\\x07Sampler\\x12\\x14\\n\\tmin_scale\\x18\\x01 \\x01(\\x02:\\x01\\x31\\x12\\x14\\n\\tmax_scale\\x18\\x02 \\x01(\\x02:\\x01\\x31\\x12\\x1b\\n\\x10min_aspect_ratio\\x18\\x03 \\x01(\\x02:\\x01\\x31\\x12\\x1b\\n\\x10max_aspect_ratio\\x18\\x04 \\x01(\\x02:\\x01\\x31\\""\\xc0\\x01\\n\\x10SampleConstraint\\x12\\x1b\\n\\x13min_jaccard_overlap\\x18\\x01 \\x01(\\x02\\x12\\x1b\\n\\x13max_jaccard_overlap\\x18\\x02 \\x01(\\x02\\x12\\x1b\\n\\x13min_sample_coverage\\x18\\x03 \\x01(\\x02\\x12\\x1b\\n\\x13max_sample_coverage\\x18\\x04 \\x01(\\x02\\x12\\x1b\\n\\x13min_object_coverage\\x18\\x05 \\x01(\\x02\\x12\\x1b\\n\\x13max_object_coverage\\x18\\x06 \\x01(\\x02\\""\\xb2\\x01\\n\\x0c\\x42\\x61tchSampler\\x12 \\n\\x12use_original_image\\x18\\x01 \\x01(\\x08:\\x04true\\x12\\x1f\\n\\x07sampler\\x18\\x02 \\x01(\\x0b\\x32\\x0e.caffe.Sampler\\x12\\x32\\n\\x11sample_constraint\\x18\\x03 \\x01(\\x0b\\x32\\x17.caffe.SampleConstraint\\x12\\x12\\n\\nmax_sample\\x18\\x04 \\x01(\\r\\x12\\x17\\n\\nmax_trials\\x18\\x05 \\x01(\\r:\\x03\\x31\\x30\\x30\\""\\x8a\\x01\\n\\x0e\\x45mitConstraint\\x12\\x39\\n\\temit_type\\x18\\x01 \\x01(\\x0e\\x32\\x1e.caffe.EmitConstraint.EmitType:\\x06\\x43\\x45NTER\\x12\\x14\\n\\x0c\\x65mit_overlap\\x18\\x02 \\x01(\\x02\\""\\\'\\n\\x08\\x45mitType\\x12\\n\\n\\x06\\x43\\x45NTER\\x10\\x00\\x12\\x0f\\n\\x0bMIN_OVERLAP\\x10\\x01\\""\\x87\\x01\\n\\x0eNormalizedBBox\\x12\\x0c\\n\\x04xmin\\x18\\x01 \\x01(\\x02\\x12\\x0c\\n\\x04ymin\\x18\\x02 \\x01(\\x02\\x12\\x0c\\n\\x04xmax\\x18\\x03 \\x01(\\x02\\x12\\x0c\\n\\x04ymax\\x18\\x04 \\x01(\\x02\\x12\\r\\n\\x05label\\x18\\x05 \\x01(\\x05\\x12\\x11\\n\\tdifficult\\x18\\x06 \\x01(\\x08\\x12\\r\\n\\x05score\\x18\\x07 \\x01(\\x02\\x12\\x0c\\n\\x04size\\x18\\x08 \\x01(\\x02\\""I\\n\\nAnnotation\\x12\\x16\\n\\x0binstance_id\\x18\\x01 \\x01(\\x05:\\x01\\x30\\x12#\\n\\x04\\x62\\x62ox\\x18\\x02 \\x01(\\x0b\\x32\\x15.caffe.NormalizedBBox\\""M\\n\\x0f\\x41nnotationGroup\\x12\\x13\\n\\x0bgroup_label\\x18\\x01 \\x01(\\x05\\x12%\\n\\nannotation\\x18\\x02 \\x03(\\x0b\\x32\\x11.caffe.Annotation\\""\\xaf\\x01\\n\\x0e\\x41nnotatedDatum\\x12\\x1b\\n\\x05\\x64\\x61tum\\x18\\x01 \\x01(\\x0b\\x32\\x0c.caffe.Datum\\x12\\x32\\n\\x04type\\x18\\x02 \\x01(\\x0e\\x32$.caffe.AnnotatedDatum.AnnotationType\\x12\\x30\\n\\x10\\x61nnotation_group\\x18\\x03 \\x03(\\x0b\\x32\\x16.caffe.AnnotationGroup\\""\\x1a\\n\\x0e\\x41nnotationType\\x12\\x08\\n\\x04\\x42\\x42OX\\x10\\x00\\""\\x8a\\x02\\n\\x0f\\x46illerParameter\\x12\\x16\\n\\x04type\\x18\\x01 \\x01(\\t:\\x08\\x63onstant\\x12\\x10\\n\\x05value\\x18\\x02 \\x01(\\x02:\\x01\\x30\\x12\\x0e\\n\\x03min\\x18\\x03 \\x01(\\x02:\\x01\\x30\\x12\\x0e\\n\\x03max\\x18\\x04 \\x01(\\x02:\\x01\\x31\\x12\\x0f\\n\\x04mean\\x18\\x05 \\x01(\\x02:\\x01\\x30\\x12\\x0e\\n\\x03std\\x18\\x06 \\x01(\\x02:\\x01\\x31\\x12\\x12\\n\\x06sparse\\x18\\x07 \\x01(\\x05:\\x02-1\\x12\\x42\\n\\rvariance_norm\\x18\\x08 \\x01(\\x0e\\x32#.caffe.FillerParameter.VarianceNorm:\\x06\\x46\\x41N_IN\\""4\\n\\x0cVarianceNorm\\x12\\n\\n\\x06\\x46\\x41N_IN\\x10\\x00\\x12\\x0b\\n\\x07\\x46\\x41N_OUT\\x10\\x01\\x12\\x0b\\n\\x07\\x41VERAGE\\x10\\x02\\""\\x8e\\x02\\n\\x0cNetParameter\\x12\\x0c\\n\\x04name\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05input\\x18\\x03 \\x03(\\t\\x12%\\n\\x0binput_shape\\x18\\x08 \\x03(\\x0b\\x32\\x10.caffe.BlobShape\\x12\\x11\\n\\tinput_dim\\x18\\x04 \\x03(\\x05\\x12\\x1d\\n\\x0e\\x66orce_backward\\x18\\x05 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x1e\\n\\x05state\\x18\\x06 \\x01(\\x0b\\x32\\x0f.caffe.NetState\\x12\\x19\\n\\ndebug_info\\x18\\x07 \\x01(\\x08:\\x05\\x66\\x61lse\\x12$\\n\\x05layer\\x18\\x64 \\x03(\\x0b\\x32\\x15.caffe.LayerParameter\\x12\\\'\\n\\x06layers\\x18\\x02 \\x03(\\x0b\\x32\\x17.caffe.V1LayerParameter\\""\\xa2\\x0b\\n\\x0fSolverParameter\\x12\\x0b\\n\\x03net\\x18\\x18 \\x01(\\t\\x12&\\n\\tnet_param\\x18\\x19 \\x01(\\x0b\\x32\\x13.caffe.NetParameter\\x12\\x11\\n\\ttrain_net\\x18\\x01 \\x01(\\t\\x12\\x10\\n\\x08test_net\\x18\\x02 \\x03(\\t\\x12,\\n\\x0ftrain_net_param\\x18\\x15 \\x01(\\x0b\\x32\\x13.caffe.NetParameter\\x12+\\n\\x0etest_net_param\\x18\\x16 \\x03(\\x0b\\x32\\x13.caffe.NetParameter\\x12$\\n\\x0btrain_state\\x18\\x1a \\x01(\\x0b\\x32\\x0f.caffe.NetState\\x12#\\n\\ntest_state\\x18\\x1b \\x03(\\x0b\\x32\\x0f.caffe.NetState\\x12!\\n\\teval_type\\x18) \\x01(\\t:\\x0e\\x63lassification\\x12\\x1c\\n\\nap_version\\x18* \\x01(\\t:\\x08Integral\\x12$\\n\\x15show_per_class_result\\x18, \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x11\\n\\ttest_iter\\x18\\x03 \\x03(\\x05\\x12\\x18\\n\\rtest_interval\\x18\\x04 \\x01(\\x05:\\x01\\x30\\x12 \\n\\x11test_compute_loss\\x18\\x13 \\x01(\\x08:\\x05\\x66\\x61lse\\x12!\\n\\x13test_initialization\\x18  \\x01(\\x08:\\x04true\\x12\\x0f\\n\\x07\\x62\\x61se_lr\\x18\\x05 \\x01(\\x02\\x12\\x0f\\n\\x07\\x64isplay\\x18\\x06 \\x01(\\x05\\x12\\x17\\n\\x0c\\x61verage_loss\\x18! \\x01(\\x05:\\x01\\x31\\x12\\x10\\n\\x08max_iter\\x18\\x07 \\x01(\\x05\\x12\\x14\\n\\titer_size\\x18$ \\x01(\\x05:\\x01\\x31\\x12\\x11\\n\\tlr_policy\\x18\\x08 \\x01(\\t\\x12\\r\\n\\x05gamma\\x18\\t \\x01(\\x02\\x12\\r\\n\\x05power\\x18\\n \\x01(\\x02\\x12\\x10\\n\\x08momentum\\x18\\x0b \\x01(\\x02\\x12\\x14\\n\\x0cweight_decay\\x18\\x0c \\x01(\\x02\\x12\\x1f\\n\\x13regularization_type\\x18\\x1d \\x01(\\t:\\x02L2\\x12\\x10\\n\\x08stepsize\\x18\\r \\x01(\\x05\\x12\\x11\\n\\tstepvalue\\x18\\"" \\x03(\\x05\\x12\\x17\\n\\x0fplateau_winsize\\x18+ \\x03(\\x05\\x12\\x1a\\n\\x0e\\x63lip_gradients\\x18# \\x01(\\x02:\\x02-1\\x12\\x13\\n\\x08snapshot\\x18\\x0e \\x01(\\x05:\\x01\\x30\\x12\\x17\\n\\x0fsnapshot_prefix\\x18\\x0f \\x01(\\t\\x12\\x1c\\n\\rsnapshot_diff\\x18\\x10 \\x01(\\x08:\\x05\\x66\\x61lse\\x12K\\n\\x0fsnapshot_format\\x18% \\x01(\\x0e\\x32%.caffe.SolverParameter.SnapshotFormat:\\x0b\\x42INARYPROTO\\x12;\\n\\x0bsolver_mode\\x18\\x11 \\x01(\\x0e\\x32!.caffe.SolverParameter.SolverMode:\\x03GPU\\x12\\x14\\n\\tdevice_id\\x18\\x12 \\x01(\\x05:\\x01\\x30\\x12\\x17\\n\\x0brandom_seed\\x18\\x14 \\x01(\\x03:\\x02-1\\x12\\x11\\n\\x04type\\x18( \\x01(\\t:\\x03SGD\\x12\\x14\\n\\x05\\x64\\x65lta\\x18\\x1f \\x01(\\x02:\\x05\\x31\\x65-08\\x12\\x18\\n\\tmomentum2\\x18\\\' \\x01(\\x02:\\x05\\x30.999\\x12\\x17\\n\\trms_decay\\x18& \\x01(\\x02:\\x04\\x30.99\\x12\\x19\\n\\ndebug_info\\x18\\x17 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\""\\n\\x14snapshot_after_train\\x18\\x1c \\x01(\\x08:\\x04true\\x12;\\n\\x0bsolver_type\\x18\\x1e \\x01(\\x0e\\x32!.caffe.SolverParameter.SolverType:\\x03SGD\\""+\\n\\x0eSnapshotFormat\\x12\\x08\\n\\x04HDF5\\x10\\x00\\x12\\x0f\\n\\x0b\\x42INARYPROTO\\x10\\x01\\""\\x1e\\n\\nSolverMode\\x12\\x07\\n\\x03\\x43PU\\x10\\x00\\x12\\x07\\n\\x03GPU\\x10\\x01\\""U\\n\\nSolverType\\x12\\x07\\n\\x03SGD\\x10\\x00\\x12\\x0c\\n\\x08NESTEROV\\x10\\x01\\x12\\x0b\\n\\x07\\x41\\x44\\x41GRAD\\x10\\x02\\x12\\x0b\\n\\x07RMSPROP\\x10\\x03\\x12\\x0c\\n\\x08\\x41\\x44\\x41\\x44\\x45LTA\\x10\\x04\\x12\\x08\\n\\x04\\x41\\x44\\x41M\\x10\\x05\\""\\xa5\\x01\\n\\x0bSolverState\\x12\\x0c\\n\\x04iter\\x18\\x01 \\x01(\\x05\\x12\\x13\\n\\x0blearned_net\\x18\\x02 \\x01(\\t\\x12!\\n\\x07history\\x18\\x03 \\x03(\\x0b\\x32\\x10.caffe.BlobProto\\x12\\x17\\n\\x0c\\x63urrent_step\\x18\\x04 \\x01(\\x05:\\x01\\x30\\x12\\x1b\\n\\x0cminimum_loss\\x18\\x05 \\x01(\\x02:\\x05\\x31\\x65+38\\x12\\x1a\\n\\x0fiter_last_event\\x18\\x06 \\x01(\\x05:\\x01\\x30\\""N\\n\\x08NetState\\x12!\\n\\x05phase\\x18\\x01 \\x01(\\x0e\\x32\\x0c.caffe.Phase:\\x04TEST\\x12\\x10\\n\\x05level\\x18\\x02 \\x01(\\x05:\\x01\\x30\\x12\\r\\n\\x05stage\\x18\\x03 \\x03(\\t\\""s\\n\\x0cNetStateRule\\x12\\x1b\\n\\x05phase\\x18\\x01 \\x01(\\x0e\\x32\\x0c.caffe.Phase\\x12\\x11\\n\\tmin_level\\x18\\x02 \\x01(\\x05\\x12\\x11\\n\\tmax_level\\x18\\x03 \\x01(\\x05\\x12\\r\\n\\x05stage\\x18\\x04 \\x03(\\t\\x12\\x11\\n\\tnot_stage\\x18\\x05 \\x03(\\t\\""\\xa3\\x01\\n\\tParamSpec\\x12\\x0c\\n\\x04name\\x18\\x01 \\x01(\\t\\x12\\x31\\n\\nshare_mode\\x18\\x02 \\x01(\\x0e\\x32\\x1d.caffe.ParamSpec.DimCheckMode\\x12\\x12\\n\\x07lr_mult\\x18\\x03 \\x01(\\x02:\\x01\\x31\\x12\\x15\\n\\ndecay_mult\\x18\\x04 \\x01(\\x02:\\x01\\x31\\""*\\n\\x0c\\x44imCheckMode\\x12\\n\\n\\x06STRICT\\x10\\x00\\x12\\x0e\\n\\nPERMISSIVE\\x10\\x01\\""\\x8f\\x18\\n\\x0eLayerParameter\\x12\\x0c\\n\\x04name\\x18\\x01 \\x01(\\t\\x12\\x0c\\n\\x04type\\x18\\x02 \\x01(\\t\\x12\\x0e\\n\\x06\\x62ottom\\x18\\x03 \\x03(\\t\\x12\\x0b\\n\\x03top\\x18\\x04 \\x03(\\t\\x12\\x1b\\n\\x05phase\\x18\\n \\x01(\\x0e\\x32\\x0c.caffe.Phase\\x12\\x13\\n\\x0bloss_weight\\x18\\x05 \\x03(\\x02\\x12\\x1f\\n\\x05param\\x18\\x06 \\x03(\\x0b\\x32\\x10.caffe.ParamSpec\\x12\\x1f\\n\\x05\\x62lobs\\x18\\x07 \\x03(\\x0b\\x32\\x10.caffe.BlobProto\\x12\\x16\\n\\x0epropagate_down\\x18\\x0b \\x03(\\x08\\x12$\\n\\x07include\\x18\\x08 \\x03(\\x0b\\x32\\x13.caffe.NetStateRule\\x12$\\n\\x07\\x65xclude\\x18\\t \\x03(\\x0b\\x32\\x13.caffe.NetStateRule\\x12\\x37\\n\\x0ftransform_param\\x18\\x64 \\x01(\\x0b\\x32\\x1e.caffe.TransformationParameter\\x12(\\n\\nloss_param\\x18\\x65 \\x01(\\x0b\\x32\\x14.caffe.LossParameter\\x12\\x30\\n\\x0e\\x61\\x63\\x63uracy_param\\x18\\x66 \\x01(\\x0b\\x32\\x18.caffe.AccuracyParameter\\x12<\\n\\x14\\x61nnotated_data_param\\x18\\xc8\\x01 \\x01(\\x0b\\x32\\x1d.caffe.AnnotatedDataParameter\\x12,\\n\\x0c\\x61rgmax_param\\x18g \\x01(\\x0b\\x32\\x16.caffe.ArgMaxParameter\\x12\\x34\\n\\x10\\x62\\x61tch_norm_param\\x18\\x8b\\x01 \\x01(\\x0b\\x32\\x19.caffe.BatchNormParameter\\x12)\\n\\nbias_param\\x18\\x8d\\x01 \\x01(\\x0b\\x32\\x14.caffe.BiasParameter\\x12,\\n\\x0c\\x63oncat_param\\x18h \\x01(\\x0b\\x32\\x16.caffe.ConcatParameter\\x12?\\n\\x16\\x63ontrastive_loss_param\\x18i \\x01(\\x0b\\x32\\x1f.caffe.ContrastiveLossParameter\\x12\\x36\\n\\x11\\x63onvolution_param\\x18j \\x01(\\x0b\\x32\\x1b.caffe.ConvolutionParameter\\x12)\\n\\ncrop_param\\x18\\x90\\x01 \\x01(\\x0b\\x32\\x14.caffe.CropParameter\\x12(\\n\\ndata_param\\x18k \\x01(\\x0b\\x32\\x14.caffe.DataParameter\\x12\\x44\\n\\x18\\x64\\x65tection_evaluate_param\\x18\\xcd\\x01 \\x01(\\x0b\\x32!.caffe.DetectionEvaluateParameter\\x12@\\n\\x16\\x64\\x65tection_output_param\\x18\\xcc\\x01 \\x01(\\x0b\\x32\\x1f.caffe.DetectionOutputParameter\\x12.\\n\\rdropout_param\\x18l \\x01(\\x0b\\x32\\x17.caffe.DropoutParameter\\x12\\x33\\n\\x10\\x64ummy_data_param\\x18m \\x01(\\x0b\\x32\\x19.caffe.DummyDataParameter\\x12.\\n\\reltwise_param\\x18n \\x01(\\x0b\\x32\\x17.caffe.EltwiseParameter\\x12\\\'\\n\\telu_param\\x18\\x8c\\x01 \\x01(\\x0b\\x32\\x13.caffe.ELUParameter\\x12+\\n\\x0b\\x65mbed_param\\x18\\x89\\x01 \\x01(\\x0b\\x32\\x15.caffe.EmbedParameter\\x12&\\n\\texp_param\\x18o \\x01(\\x0b\\x32\\x13.caffe.ExpParameter\\x12/\\n\\rflatten_param\\x18\\x87\\x01 \\x01(\\x0b\\x32\\x17.caffe.FlattenParameter\\x12\\x31\\n\\x0fhdf5_data_param\\x18p \\x01(\\x0b\\x32\\x18.caffe.HDF5DataParameter\\x12\\x35\\n\\x11hdf5_output_param\\x18q \\x01(\\x0b\\x32\\x1a.caffe.HDF5OutputParameter\\x12\\x33\\n\\x10hinge_loss_param\\x18r \\x01(\\x0b\\x32\\x19.caffe.HingeLossParameter\\x12\\x33\\n\\x10image_data_param\\x18s \\x01(\\x0b\\x32\\x19.caffe.ImageDataParameter\\x12\\x39\\n\\x13infogain_loss_param\\x18t \\x01(\\x0b\\x32\\x1c.caffe.InfogainLossParameter\\x12\\x39\\n\\x13inner_product_param\\x18u \\x01(\\x0b\\x32\\x1c.caffe.InnerProductParameter\\x12+\\n\\x0binput_param\\x18\\x8f\\x01 \\x01(\\x0b\\x32\\x15.caffe.InputParameter\\x12\\\'\\n\\tlog_param\\x18\\x86\\x01 \\x01(\\x0b\\x32\\x13.caffe.LogParameter\\x12&\\n\\tlrn_param\\x18v \\x01(\\x0b\\x32\\x13.caffe.LRNParameter\\x12\\x35\\n\\x11memory_data_param\\x18w \\x01(\\x0b\\x32\\x1a.caffe.MemoryDataParameter\\x12:\\n\\x13multibox_loss_param\\x18\\xc9\\x01 \\x01(\\x0b\\x32\\x1c.caffe.MultiBoxLossParameter\\x12&\\n\\tmvn_param\\x18x \\x01(\\x0b\\x32\\x13.caffe.MVNParameter\\x12.\\n\\nnorm_param\\x18\\xce\\x01 \\x01(\\x0b\\x32\\x19.caffe.NormalizeParameter\\x12\\x33\\n\\x0fparameter_param\\x18\\x91\\x01 \\x01(\\x0b\\x32\\x19.caffe.ParameterParameter\\x12/\\n\\rpermute_param\\x18\\xca\\x01 \\x01(\\x0b\\x32\\x17.caffe.PermuteParameter\\x12.\\n\\rpooling_param\\x18y \\x01(\\x0b\\x32\\x17.caffe.PoolingParameter\\x12*\\n\\x0bpower_param\\x18z \\x01(\\x0b\\x32\\x15.caffe.PowerParameter\\x12+\\n\\x0bprelu_param\\x18\\x83\\x01 \\x01(\\x0b\\x32\\x15.caffe.PReLUParameter\\x12\\x32\\n\\x0fprior_box_param\\x18\\xcb\\x01 \\x01(\\x0b\\x32\\x18.caffe.PriorBoxParameter\\x12-\\n\\x0cpython_param\\x18\\x82\\x01 \\x01(\\x0b\\x32\\x16.caffe.PythonParameter\\x12\\x33\\n\\x0frecurrent_param\\x18\\x92\\x01 \\x01(\\x0b\\x32\\x19.caffe.RecurrentParameter\\x12\\x33\\n\\x0freduction_param\\x18\\x88\\x01 \\x01(\\x0b\\x32\\x19.caffe.ReductionParameter\\x12(\\n\\nrelu_param\\x18{ \\x01(\\x0b\\x32\\x14.caffe.ReLUParameter\\x12/\\n\\rreshape_param\\x18\\x85\\x01 \\x01(\\x0b\\x32\\x17.caffe.ReshapeParameter\\x12+\\n\\x0bscale_param\\x18\\x8e\\x01 \\x01(\\x0b\\x32\\x15.caffe.ScaleParameter\\x12>\\n\\x15shuffle_channel_param\\x18\\xd0\\x01 \\x01(\\x0b\\x32\\x1e.caffe.ShuffleChannelParameter\\x12.\\n\\rsigmoid_param\\x18| \\x01(\\x0b\\x32\\x17.caffe.SigmoidParameter\\x12.\\n\\rsoftmax_param\\x18} \\x01(\\x0b\\x32\\x17.caffe.SoftmaxParameter\\x12\\\'\\n\\tspp_param\\x18\\x84\\x01 \\x01(\\x0b\\x32\\x13.caffe.SPPParameter\\x12*\\n\\x0bslice_param\\x18~ \\x01(\\x0b\\x32\\x15.caffe.SliceParameter\\x12(\\n\\ntanh_param\\x18\\x7f \\x01(\\x0b\\x32\\x14.caffe.TanHParameter\\x12\\x33\\n\\x0fthreshold_param\\x18\\x80\\x01 \\x01(\\x0b\\x32\\x19.caffe.ThresholdParameter\\x12)\\n\\ntile_param\\x18\\x8a\\x01 \\x01(\\x0b\\x32\\x14.caffe.TileParameter\\x12\\x34\\n\\x10video_data_param\\x18\\xcf\\x01 \\x01(\\x0b\\x32\\x19.caffe.VideoDataParameter\\x12\\x36\\n\\x11window_data_param\\x18\\x81\\x01 \\x01(\\x0b\\x32\\x1a.caffe.WindowDataParameter\\""\\xca\\x03\\n\\x17TransformationParameter\\x12\\x10\\n\\x05scale\\x18\\x01 \\x01(\\x02:\\x01\\x31\\x12\\x15\\n\\x06mirror\\x18\\x02 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x14\\n\\tcrop_size\\x18\\x03 \\x01(\\r:\\x01\\x30\\x12\\x11\\n\\x06\\x63rop_h\\x18\\x0b \\x01(\\r:\\x01\\x30\\x12\\x11\\n\\x06\\x63rop_w\\x18\\x0c \\x01(\\r:\\x01\\x30\\x12\\x11\\n\\tmean_file\\x18\\x04 \\x01(\\t\\x12\\x12\\n\\nmean_value\\x18\\x05 \\x03(\\x02\\x12\\x1a\\n\\x0b\\x66orce_color\\x18\\x06 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x19\\n\\nforce_gray\\x18\\x07 \\x01(\\x08:\\x05\\x66\\x61lse\\x12,\\n\\x0cresize_param\\x18\\x08 \\x01(\\x0b\\x32\\x16.caffe.ResizeParameter\\x12*\\n\\x0bnoise_param\\x18\\t \\x01(\\x0b\\x32\\x15.caffe.NoiseParameter\\x12\\x31\\n\\rdistort_param\\x18\\r \\x01(\\x0b\\x32\\x1a.caffe.DistortionParameter\\x12/\\n\\x0c\\x65xpand_param\\x18\\x0e \\x01(\\x0b\\x32\\x19.caffe.ExpansionParameter\\x12.\\n\\x0f\\x65mit_constraint\\x18\\n \\x01(\\x0b\\x32\\x15.caffe.EmitConstraint\\""\\x90\\x04\\n\\x0fResizeParameter\\x12\\x0f\\n\\x04prob\\x18\\x01 \\x01(\\x02:\\x01\\x31\\x12=\\n\\x0bresize_mode\\x18\\x02 \\x01(\\x0e\\x32\\"".caffe.ResizeParameter.Resize_mode:\\x04WARP\\x12\\x11\\n\\x06height\\x18\\x03 \\x01(\\r:\\x01\\x30\\x12\\x10\\n\\x05width\\x18\\x04 \\x01(\\r:\\x01\\x30\\x12\\x17\\n\\x0cheight_scale\\x18\\x08 \\x01(\\r:\\x01\\x30\\x12\\x16\\n\\x0bwidth_scale\\x18\\t \\x01(\\r:\\x01\\x30\\x12;\\n\\x08pad_mode\\x18\\x05 \\x01(\\x0e\\x32\\x1f.caffe.ResizeParameter.Pad_mode:\\x08\\x43ONSTANT\\x12\\x11\\n\\tpad_value\\x18\\x06 \\x03(\\x02\\x12\\x37\\n\\x0binterp_mode\\x18\\x07 \\x03(\\x0e\\x32\\"".caffe.ResizeParameter.Interp_mode\\""G\\n\\x0bResize_mode\\x12\\x08\\n\\x04WARP\\x10\\x01\\x12\\x12\\n\\x0e\\x46IT_SMALL_SIZE\\x10\\x02\\x12\\x1a\\n\\x16\\x46IT_LARGE_SIZE_AND_PAD\\x10\\x03\\"":\\n\\x08Pad_mode\\x12\\x0c\\n\\x08\\x43ONSTANT\\x10\\x01\\x12\\x0c\\n\\x08MIRRORED\\x10\\x02\\x12\\x12\\n\\x0eREPEAT_NEAREST\\x10\\x03\\""I\\n\\x0bInterp_mode\\x12\\n\\n\\x06LINEAR\\x10\\x01\\x12\\x08\\n\\x04\\x41REA\\x10\\x02\\x12\\x0b\\n\\x07NEAREST\\x10\\x03\\x12\\t\\n\\x05\\x43UBIC\\x10\\x04\\x12\\x0c\\n\\x08LANCZOS4\\x10\\x05\\""9\\n\\x13SaltPepperParameter\\x12\\x13\\n\\x08\\x66raction\\x18\\x01 \\x01(\\x02:\\x01\\x30\\x12\\r\\n\\x05value\\x18\\x02 \\x03(\\x02\\""\\xee\\x02\\n\\x0eNoiseParameter\\x12\\x0f\\n\\x04prob\\x18\\x01 \\x01(\\x02:\\x01\\x30\\x12\\x16\\n\\x07hist_eq\\x18\\x02 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x16\\n\\x07inverse\\x18\\x03 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x19\\n\\ndecolorize\\x18\\x04 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x19\\n\\ngauss_blur\\x18\\x05 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x10\\n\\x04jpeg\\x18\\x06 \\x01(\\x02:\\x02-1\\x12\\x18\\n\\tposterize\\x18\\x07 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x14\\n\\x05\\x65rode\\x18\\x08 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x19\\n\\nsaltpepper\\x18\\t \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x34\\n\\x10saltpepper_param\\x18\\n \\x01(\\x0b\\x32\\x1a.caffe.SaltPepperParameter\\x12\\x14\\n\\x05\\x63lahe\\x18\\x0b \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x1d\\n\\x0e\\x63onvert_to_hsv\\x18\\x0c \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x1d\\n\\x0e\\x63onvert_to_lab\\x18\\r \\x01(\\x08:\\x05\\x66\\x61lse\\""\\xbd\\x02\\n\\x13\\x44istortionParameter\\x12\\x1a\\n\\x0f\\x62rightness_prob\\x18\\x01 \\x01(\\x02:\\x01\\x30\\x12\\x1b\\n\\x10\\x62rightness_delta\\x18\\x02 \\x01(\\x02:\\x01\\x30\\x12\\x18\\n\\rcontrast_prob\\x18\\x03 \\x01(\\x02:\\x01\\x30\\x12\\x19\\n\\x0e\\x63ontrast_lower\\x18\\x04 \\x01(\\x02:\\x01\\x30\\x12\\x19\\n\\x0e\\x63ontrast_upper\\x18\\x05 \\x01(\\x02:\\x01\\x30\\x12\\x13\\n\\x08hue_prob\\x18\\x06 \\x01(\\x02:\\x01\\x30\\x12\\x14\\n\\thue_delta\\x18\\x07 \\x01(\\x02:\\x01\\x30\\x12\\x1a\\n\\x0fsaturation_prob\\x18\\x08 \\x01(\\x02:\\x01\\x30\\x12\\x1b\\n\\x10saturation_lower\\x18\\t \\x01(\\x02:\\x01\\x30\\x12\\x1b\\n\\x10saturation_upper\\x18\\n \\x01(\\x02:\\x01\\x30\\x12\\x1c\\n\\x11random_order_prob\\x18\\x0b \\x01(\\x02:\\x01\\x30\\""B\\n\\x12\\x45xpansionParameter\\x12\\x0f\\n\\x04prob\\x18\\x01 \\x01(\\x02:\\x01\\x31\\x12\\x1b\\n\\x10max_expand_ratio\\x18\\x02 \\x01(\\x02:\\x01\\x31\\""\\xc2\\x01\\n\\rLossParameter\\x12\\x14\\n\\x0cignore_label\\x18\\x01 \\x01(\\x05\\x12\\x44\\n\\rnormalization\\x18\\x03 \\x01(\\x0e\\x32&.caffe.LossParameter.NormalizationMode:\\x05VALID\\x12\\x11\\n\\tnormalize\\x18\\x02 \\x01(\\x08\\""B\\n\\x11NormalizationMode\\x12\\x08\\n\\x04\\x46ULL\\x10\\x00\\x12\\t\\n\\x05VALID\\x10\\x01\\x12\\x0e\\n\\nBATCH_SIZE\\x10\\x02\\x12\\x08\\n\\x04NONE\\x10\\x03\\""L\\n\\x11\\x41\\x63\\x63uracyParameter\\x12\\x10\\n\\x05top_k\\x18\\x01 \\x01(\\r:\\x01\\x31\\x12\\x0f\\n\\x04\\x61xis\\x18\\x02 \\x01(\\x05:\\x01\\x31\\x12\\x14\\n\\x0cignore_label\\x18\\x03 \\x01(\\x05\\""\\x95\\x01\\n\\x16\\x41nnotatedDataParameter\\x12*\\n\\rbatch_sampler\\x18\\x01 \\x03(\\x0b\\x32\\x13.caffe.BatchSampler\\x12\\x16\\n\\x0elabel_map_file\\x18\\x02 \\x01(\\t\\x12\\x37\\n\\tanno_type\\x18\\x03 \\x01(\\x0e\\x32$.caffe.AnnotatedDatum.AnnotationType\\""M\\n\\x0f\\x41rgMaxParameter\\x12\\x1a\\n\\x0bout_max_val\\x18\\x01 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x10\\n\\x05top_k\\x18\\x02 \\x01(\\r:\\x01\\x31\\x12\\x0c\\n\\x04\\x61xis\\x18\\x03 \\x01(\\x05\\""9\\n\\x0f\\x43oncatParameter\\x12\\x0f\\n\\x04\\x61xis\\x18\\x02 \\x01(\\x05:\\x01\\x31\\x12\\x15\\n\\nconcat_dim\\x18\\x01 \\x01(\\r:\\x01\\x31\\""j\\n\\x12\\x42\\x61tchNormParameter\\x12\\x18\\n\\x10use_global_stats\\x18\\x01 \\x01(\\x08\\x12&\\n\\x17moving_average_fraction\\x18\\x02 \\x01(\\x02:\\x05\\x30.999\\x12\\x12\\n\\x03\\x65ps\\x18\\x03 \\x01(\\x02:\\x05\\x31\\x65-05\\""]\\n\\rBiasParameter\\x12\\x0f\\n\\x04\\x61xis\\x18\\x01 \\x01(\\x05:\\x01\\x31\\x12\\x13\\n\\x08num_axes\\x18\\x02 \\x01(\\x05:\\x01\\x31\\x12&\\n\\x06\\x66iller\\x18\\x03 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\""L\\n\\x18\\x43ontrastiveLossParameter\\x12\\x11\\n\\x06margin\\x18\\x01 \\x01(\\x02:\\x01\\x31\\x12\\x1d\\n\\x0elegacy_version\\x18\\x02 \\x01(\\x08:\\x05\\x66\\x61lse\\""\\xfc\\x03\\n\\x14\\x43onvolutionParameter\\x12\\x12\\n\\nnum_output\\x18\\x01 \\x01(\\r\\x12\\x17\\n\\tbias_term\\x18\\x02 \\x01(\\x08:\\x04true\\x12\\x0b\\n\\x03pad\\x18\\x03 \\x03(\\r\\x12\\x13\\n\\x0bkernel_size\\x18\\x04 \\x03(\\r\\x12\\x0e\\n\\x06stride\\x18\\x06 \\x03(\\r\\x12\\x10\\n\\x08\\x64ilation\\x18\\x12 \\x03(\\r\\x12\\x10\\n\\x05pad_h\\x18\\t \\x01(\\r:\\x01\\x30\\x12\\x10\\n\\x05pad_w\\x18\\n \\x01(\\r:\\x01\\x30\\x12\\x10\\n\\x08kernel_h\\x18\\x0b \\x01(\\r\\x12\\x10\\n\\x08kernel_w\\x18\\x0c \\x01(\\r\\x12\\x10\\n\\x08stride_h\\x18\\r \\x01(\\r\\x12\\x10\\n\\x08stride_w\\x18\\x0e \\x01(\\r\\x12\\x10\\n\\x05group\\x18\\x05 \\x01(\\r:\\x01\\x31\\x12-\\n\\rweight_filler\\x18\\x07 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12+\\n\\x0b\\x62ias_filler\\x18\\x08 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12;\\n\\x06\\x65ngine\\x18\\x0f \\x01(\\x0e\\x32\\"".caffe.ConvolutionParameter.Engine:\\x07\\x44\\x45\\x46\\x41ULT\\x12\\x0f\\n\\x04\\x61xis\\x18\\x10 \\x01(\\x05:\\x01\\x31\\x12\\x1e\\n\\x0f\\x66orce_nd_im2col\\x18\\x11 \\x01(\\x08:\\x05\\x66\\x61lse\\""+\\n\\x06\\x45ngine\\x12\\x0b\\n\\x07\\x44\\x45\\x46\\x41ULT\\x10\\x00\\x12\\t\\n\\x05\\x43\\x41\\x46\\x46\\x45\\x10\\x01\\x12\\t\\n\\x05\\x43UDNN\\x10\\x02\\""0\\n\\rCropParameter\\x12\\x0f\\n\\x04\\x61xis\\x18\\x01 \\x01(\\x05:\\x01\\x32\\x12\\x0e\\n\\x06offset\\x18\\x02 \\x03(\\r\\""\\xa4\\x02\\n\\rDataParameter\\x12\\x0e\\n\\x06source\\x18\\x01 \\x01(\\t\\x12\\x12\\n\\nbatch_size\\x18\\x04 \\x01(\\r\\x12\\x14\\n\\trand_skip\\x18\\x07 \\x01(\\r:\\x01\\x30\\x12\\x31\\n\\x07\\x62\\x61\\x63kend\\x18\\x08 \\x01(\\x0e\\x32\\x17.caffe.DataParameter.DB:\\x07LEVELDB\\x12\\x10\\n\\x05scale\\x18\\x02 \\x01(\\x02:\\x01\\x31\\x12\\x11\\n\\tmean_file\\x18\\x03 \\x01(\\t\\x12\\x14\\n\\tcrop_size\\x18\\x05 \\x01(\\r:\\x01\\x30\\x12\\x15\\n\\x06mirror\\x18\\x06 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\""\\n\\x13\\x66orce_encoded_color\\x18\\t \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x13\\n\\x08prefetch\\x18\\n \\x01(\\r:\\x01\\x34\\""\\x1b\\n\\x02\\x44\\x42\\x12\\x0b\\n\\x07LEVELDB\\x10\\x00\\x12\\x08\\n\\x04LMDB\\x10\\x01\\""\\xdc\\x01\\n\\x1a\\x44\\x65tectionEvaluateParameter\\x12\\x13\\n\\x0bnum_classes\\x18\\x01 \\x01(\\r\\x12\\x1e\\n\\x13\\x62\\x61\\x63kground_label_id\\x18\\x02 \\x01(\\r:\\x01\\x30\\x12\\x1e\\n\\x11overlap_threshold\\x18\\x03 \\x01(\\x02:\\x03\\x30.5\\x12#\\n\\x15\\x65valuate_difficult_gt\\x18\\x04 \\x01(\\x08:\\x04true\\x12\\x16\\n\\x0ename_size_file\\x18\\x05 \\x01(\\t\\x12,\\n\\x0cresize_param\\x18\\x06 \\x01(\\x0b\\x32\\x16.caffe.ResizeParameter\\""[\\n\\x1eNonMaximumSuppressionParameter\\x12\\x1a\\n\\rnms_threshold\\x18\\x01 \\x01(\\x02:\\x03\\x30.3\\x12\\r\\n\\x05top_k\\x18\\x02 \\x01(\\x05\\x12\\x0e\\n\\x03\\x65ta\\x18\\x03 \\x01(\\x02:\\x01\\x31\\""\\xd8\\x01\\n\\x13SaveOutputParameter\\x12\\x18\\n\\x10output_directory\\x18\\x01 \\x01(\\t\\x12\\x1a\\n\\x12output_name_prefix\\x18\\x02 \\x01(\\t\\x12\\x15\\n\\routput_format\\x18\\x03 \\x01(\\t\\x12\\x16\\n\\x0elabel_map_file\\x18\\x04 \\x01(\\t\\x12\\x16\\n\\x0ename_size_file\\x18\\x05 \\x01(\\t\\x12\\x16\\n\\x0enum_test_image\\x18\\x06 \\x01(\\r\\x12,\\n\\x0cresize_param\\x18\\x07 \\x01(\\x0b\\x32\\x16.caffe.ResizeParameter\\""\\xc7\\x03\\n\\x18\\x44\\x65tectionOutputParameter\\x12\\x13\\n\\x0bnum_classes\\x18\\x01 \\x01(\\r\\x12\\x1c\\n\\x0eshare_location\\x18\\x02 \\x01(\\x08:\\x04true\\x12\\x1e\\n\\x13\\x62\\x61\\x63kground_label_id\\x18\\x03 \\x01(\\x05:\\x01\\x30\\x12\\x38\\n\\tnms_param\\x18\\x04 \\x01(\\x0b\\x32%.caffe.NonMaximumSuppressionParameter\\x12\\x35\\n\\x11save_output_param\\x18\\x05 \\x01(\\x0b\\x32\\x1a.caffe.SaveOutputParameter\\x12<\\n\\tcode_type\\x18\\x06 \\x01(\\x0e\\x32!.caffe.PriorBoxParameter.CodeType:\\x06\\x43ORNER\\x12)\\n\\x1avariance_encoded_in_target\\x18\\x08 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x16\\n\\nkeep_top_k\\x18\\x07 \\x01(\\x05:\\x02-1\\x12\\x1c\\n\\x14\\x63onfidence_threshold\\x18\\t \\x01(\\x02\\x12\\x18\\n\\tvisualize\\x18\\n \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x1b\\n\\x13visualize_threshold\\x18\\x0b \\x01(\\x02\\x12\\x11\\n\\tsave_file\\x18\\x0c \\x01(\\t\\"".\\n\\x10\\x44ropoutParameter\\x12\\x1a\\n\\rdropout_ratio\\x18\\x01 \\x01(\\x02:\\x03\\x30.5\\""\\xa0\\x01\\n\\x12\\x44ummyDataParameter\\x12+\\n\\x0b\\x64\\x61ta_filler\\x18\\x01 \\x03(\\x0b\\x32\\x16.caffe.FillerParameter\\x12\\x1f\\n\\x05shape\\x18\\x06 \\x03(\\x0b\\x32\\x10.caffe.BlobShape\\x12\\x0b\\n\\x03num\\x18\\x02 \\x03(\\r\\x12\\x10\\n\\x08\\x63hannels\\x18\\x03 \\x03(\\r\\x12\\x0e\\n\\x06height\\x18\\x04 \\x03(\\r\\x12\\r\\n\\x05width\\x18\\x05 \\x03(\\r\\""\\xa5\\x01\\n\\x10\\x45ltwiseParameter\\x12\\x39\\n\\toperation\\x18\\x01 \\x01(\\x0e\\x32!.caffe.EltwiseParameter.EltwiseOp:\\x03SUM\\x12\\r\\n\\x05\\x63oeff\\x18\\x02 \\x03(\\x02\\x12\\x1e\\n\\x10stable_prod_grad\\x18\\x03 \\x01(\\x08:\\x04true\\""\\\'\\n\\tEltwiseOp\\x12\\x08\\n\\x04PROD\\x10\\x00\\x12\\x07\\n\\x03SUM\\x10\\x01\\x12\\x07\\n\\x03MAX\\x10\\x02\\"" \\n\\x0c\\x45LUParameter\\x12\\x10\\n\\x05\\x61lpha\\x18\\x01 \\x01(\\x02:\\x01\\x31\\""\\xac\\x01\\n\\x0e\\x45mbedParameter\\x12\\x12\\n\\nnum_output\\x18\\x01 \\x01(\\r\\x12\\x11\\n\\tinput_dim\\x18\\x02 \\x01(\\r\\x12\\x17\\n\\tbias_term\\x18\\x03 \\x01(\\x08:\\x04true\\x12-\\n\\rweight_filler\\x18\\x04 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12+\\n\\x0b\\x62ias_filler\\x18\\x05 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\""D\\n\\x0c\\x45xpParameter\\x12\\x10\\n\\x04\\x62\\x61se\\x18\\x01 \\x01(\\x02:\\x02-1\\x12\\x10\\n\\x05scale\\x18\\x02 \\x01(\\x02:\\x01\\x31\\x12\\x10\\n\\x05shift\\x18\\x03 \\x01(\\x02:\\x01\\x30\\""9\\n\\x10\\x46lattenParameter\\x12\\x0f\\n\\x04\\x61xis\\x18\\x01 \\x01(\\x05:\\x01\\x31\\x12\\x14\\n\\x08\\x65nd_axis\\x18\\x02 \\x01(\\x05:\\x02-1\\""O\\n\\x11HDF5DataParameter\\x12\\x0e\\n\\x06source\\x18\\x01 \\x01(\\t\\x12\\x12\\n\\nbatch_size\\x18\\x02 \\x01(\\r\\x12\\x16\\n\\x07shuffle\\x18\\x03 \\x01(\\x08:\\x05\\x66\\x61lse\\""(\\n\\x13HDF5OutputParameter\\x12\\x11\\n\\tfile_name\\x18\\x01 \\x01(\\t\\""^\\n\\x12HingeLossParameter\\x12\\x30\\n\\x04norm\\x18\\x01 \\x01(\\x0e\\x32\\x1e.caffe.HingeLossParameter.Norm:\\x02L1\\""\\x16\\n\\x04Norm\\x12\\x06\\n\\x02L1\\x10\\x01\\x12\\x06\\n\\x02L2\\x10\\x02\\""\\x97\\x02\\n\\x12ImageDataParameter\\x12\\x0e\\n\\x06source\\x18\\x01 \\x01(\\t\\x12\\x15\\n\\nbatch_size\\x18\\x04 \\x01(\\r:\\x01\\x31\\x12\\x14\\n\\trand_skip\\x18\\x07 \\x01(\\r:\\x01\\x30\\x12\\x16\\n\\x07shuffle\\x18\\x08 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x15\\n\\nnew_height\\x18\\t \\x01(\\r:\\x01\\x30\\x12\\x14\\n\\tnew_width\\x18\\n \\x01(\\r:\\x01\\x30\\x12\\x16\\n\\x08is_color\\x18\\x0b \\x01(\\x08:\\x04true\\x12\\x10\\n\\x05scale\\x18\\x02 \\x01(\\x02:\\x01\\x31\\x12\\x11\\n\\tmean_file\\x18\\x03 \\x01(\\t\\x12\\x14\\n\\tcrop_size\\x18\\x05 \\x01(\\r:\\x01\\x30\\x12\\x15\\n\\x06mirror\\x18\\x06 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x15\\n\\x0broot_folder\\x18\\x0c \\x01(\\t:\\x00\\""\\\'\\n\\x15InfogainLossParameter\\x12\\x0e\\n\\x06source\\x18\\x01 \\x01(\\t\\""\\xcb\\x01\\n\\x15InnerProductParameter\\x12\\x12\\n\\nnum_output\\x18\\x01 \\x01(\\r\\x12\\x17\\n\\tbias_term\\x18\\x02 \\x01(\\x08:\\x04true\\x12-\\n\\rweight_filler\\x18\\x03 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12+\\n\\x0b\\x62ias_filler\\x18\\x04 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12\\x0f\\n\\x04\\x61xis\\x18\\x05 \\x01(\\x05:\\x01\\x31\\x12\\x18\\n\\ttranspose\\x18\\x06 \\x01(\\x08:\\x05\\x66\\x61lse\\""1\\n\\x0eInputParameter\\x12\\x1f\\n\\x05shape\\x18\\x01 \\x03(\\x0b\\x32\\x10.caffe.BlobShape\\""D\\n\\x0cLogParameter\\x12\\x10\\n\\x04\\x62\\x61se\\x18\\x01 \\x01(\\x02:\\x02-1\\x12\\x10\\n\\x05scale\\x18\\x02 \\x01(\\x02:\\x01\\x31\\x12\\x10\\n\\x05shift\\x18\\x03 \\x01(\\x02:\\x01\\x30\\""\\xb8\\x02\\n\\x0cLRNParameter\\x12\\x15\\n\\nlocal_size\\x18\\x01 \\x01(\\r:\\x01\\x35\\x12\\x10\\n\\x05\\x61lpha\\x18\\x02 \\x01(\\x02:\\x01\\x31\\x12\\x12\\n\\x04\\x62\\x65ta\\x18\\x03 \\x01(\\x02:\\x04\\x30.75\\x12\\x44\\n\\x0bnorm_region\\x18\\x04 \\x01(\\x0e\\x32\\x1e.caffe.LRNParameter.NormRegion:\\x0f\\x41\\x43ROSS_CHANNELS\\x12\\x0c\\n\\x01k\\x18\\x05 \\x01(\\x02:\\x01\\x31\\x12\\x33\\n\\x06\\x65ngine\\x18\\x06 \\x01(\\x0e\\x32\\x1a.caffe.LRNParameter.Engine:\\x07\\x44\\x45\\x46\\x41ULT\\""5\\n\\nNormRegion\\x12\\x13\\n\\x0f\\x41\\x43ROSS_CHANNELS\\x10\\x00\\x12\\x12\\n\\x0eWITHIN_CHANNEL\\x10\\x01\\""+\\n\\x06\\x45ngine\\x12\\x0b\\n\\x07\\x44\\x45\\x46\\x41ULT\\x10\\x00\\x12\\t\\n\\x05\\x43\\x41\\x46\\x46\\x45\\x10\\x01\\x12\\t\\n\\x05\\x43UDNN\\x10\\x02\\""Z\\n\\x13MemoryDataParameter\\x12\\x12\\n\\nbatch_size\\x18\\x01 \\x01(\\r\\x12\\x10\\n\\x08\\x63hannels\\x18\\x02 \\x01(\\r\\x12\\x0e\\n\\x06height\\x18\\x03 \\x01(\\r\\x12\\r\\n\\x05width\\x18\\x04 \\x01(\\r\\""\\xe8\\x08\\n\\x15MultiBoxLossParameter\\x12J\\n\\rloc_loss_type\\x18\\x01 \\x01(\\x0e\\x32(.caffe.MultiBoxLossParameter.LocLossType:\\tSMOOTH_L1\\x12J\\n\\x0e\\x63onf_loss_type\\x18\\x02 \\x01(\\x0e\\x32).caffe.MultiBoxLossParameter.ConfLossType:\\x07SOFTMAX\\x12\\x15\\n\\nloc_weight\\x18\\x03 \\x01(\\x02:\\x01\\x31\\x12\\x13\\n\\x0bnum_classes\\x18\\x04 \\x01(\\r\\x12\\x1c\\n\\x0eshare_location\\x18\\x05 \\x01(\\x08:\\x04true\\x12J\\n\\nmatch_type\\x18\\x06 \\x01(\\x0e\\x32&.caffe.MultiBoxLossParameter.MatchType:\\x0ePER_PREDICTION\\x12\\x1e\\n\\x11overlap_threshold\\x18\\x07 \\x01(\\x02:\\x03\\x30.5\\x12$\\n\\x16use_prior_for_matching\\x18\\x08 \\x01(\\x08:\\x04true\\x12\\x1e\\n\\x13\\x62\\x61\\x63kground_label_id\\x18\\t \\x01(\\r:\\x01\\x30\\x12\\x1e\\n\\x10use_difficult_gt\\x18\\n \\x01(\\x08:\\x04true\\x12\\x15\\n\\rdo_neg_mining\\x18\\x0b \\x01(\\x08\\x12\\x18\\n\\rneg_pos_ratio\\x18\\x0c \\x01(\\x02:\\x01\\x33\\x12\\x18\\n\\x0bneg_overlap\\x18\\r \\x01(\\x02:\\x03\\x30.5\\x12<\\n\\tcode_type\\x18\\x0e \\x01(\\x0e\\x32!.caffe.PriorBoxParameter.CodeType:\\x06\\x43ORNER\\x12(\\n\\x19\\x65ncode_variance_in_target\\x18\\x10 \\x01(\\x08:\\x05\\x66\\x61lse\\x12%\\n\\x16map_object_to_agnostic\\x18\\x11 \\x01(\\x08:\\x05\\x66\\x61lse\\x12)\\n\\x1aignore_cross_boundary_bbox\\x18\\x12 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x18\\n\\tbp_inside\\x18\\x13 \\x01(\\x08:\\x05\\x66\\x61lse\\x12J\\n\\x0bmining_type\\x18\\x14 \\x01(\\x0e\\x32\\\'.caffe.MultiBoxLossParameter.MiningType:\\x0cMAX_NEGATIVE\\x12\\x38\\n\\tnms_param\\x18\\x15 \\x01(\\x0b\\x32%.caffe.NonMaximumSuppressionParameter\\x12\\x17\\n\\x0bsample_size\\x18\\x16 \\x01(\\x05:\\x02\\x36\\x34\\x12 \\n\\x11use_prior_for_nms\\x18\\x17 \\x01(\\x08:\\x05\\x66\\x61lse\\""$\\n\\x0bLocLossType\\x12\\x06\\n\\x02L2\\x10\\x00\\x12\\r\\n\\tSMOOTH_L1\\x10\\x01\\"")\\n\\x0c\\x43onfLossType\\x12\\x0b\\n\\x07SOFTMAX\\x10\\x00\\x12\\x0c\\n\\x08LOGISTIC\\x10\\x01\\"".\\n\\tMatchType\\x12\\r\\n\\tBIPARTITE\\x10\\x00\\x12\\x12\\n\\x0ePER_PREDICTION\\x10\\x01\\"":\\n\\nMiningType\\x12\\x08\\n\\x04NONE\\x10\\x00\\x12\\x10\\n\\x0cMAX_NEGATIVE\\x10\\x01\\x12\\x10\\n\\x0cHARD_EXAMPLE\\x10\\x02\\""d\\n\\x0cMVNParameter\\x12 \\n\\x12normalize_variance\\x18\\x01 \\x01(\\x08:\\x04true\\x12\\x1e\\n\\x0f\\x61\\x63ross_channels\\x18\\x02 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x12\\n\\x03\\x65ps\\x18\\x03 \\x01(\\x02:\\x05\\x31\\x65-09\\""\\x92\\x01\\n\\x12NormalizeParameter\\x12\\x1c\\n\\x0e\\x61\\x63ross_spatial\\x18\\x01 \\x01(\\x08:\\x04true\\x12,\\n\\x0cscale_filler\\x18\\x02 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12\\x1c\\n\\x0e\\x63hannel_shared\\x18\\x03 \\x01(\\x08:\\x04true\\x12\\x12\\n\\x03\\x65ps\\x18\\x04 \\x01(\\x02:\\x05\\x31\\x65-10\\""5\\n\\x12ParameterParameter\\x12\\x1f\\n\\x05shape\\x18\\x01 \\x01(\\x0b\\x32\\x10.caffe.BlobShape\\""!\\n\\x10PermuteParameter\\x12\\r\\n\\x05order\\x18\\x01 \\x03(\\r\\""\\xa2\\x03\\n\\x10PoolingParameter\\x12\\x35\\n\\x04pool\\x18\\x01 \\x01(\\x0e\\x32\\"".caffe.PoolingParameter.PoolMethod:\\x03MAX\\x12\\x0e\\n\\x03pad\\x18\\x04 \\x01(\\r:\\x01\\x30\\x12\\x10\\n\\x05pad_h\\x18\\t \\x01(\\r:\\x01\\x30\\x12\\x10\\n\\x05pad_w\\x18\\n \\x01(\\r:\\x01\\x30\\x12\\x13\\n\\x0bkernel_size\\x18\\x02 \\x01(\\r\\x12\\x10\\n\\x08kernel_h\\x18\\x05 \\x01(\\r\\x12\\x10\\n\\x08kernel_w\\x18\\x06 \\x01(\\r\\x12\\x11\\n\\x06stride\\x18\\x03 \\x01(\\r:\\x01\\x31\\x12\\x10\\n\\x08stride_h\\x18\\x07 \\x01(\\r\\x12\\x10\\n\\x08stride_w\\x18\\x08 \\x01(\\r\\x12\\x37\\n\\x06\\x65ngine\\x18\\x0b \\x01(\\x0e\\x32\\x1e.caffe.PoolingParameter.Engine:\\x07\\x44\\x45\\x46\\x41ULT\\x12\\x1d\\n\\x0eglobal_pooling\\x18\\x0c \\x01(\\x08:\\x05\\x66\\x61lse\\"".\\n\\nPoolMethod\\x12\\x07\\n\\x03MAX\\x10\\x00\\x12\\x07\\n\\x03\\x41VE\\x10\\x01\\x12\\x0e\\n\\nSTOCHASTIC\\x10\\x02\\""+\\n\\x06\\x45ngine\\x12\\x0b\\n\\x07\\x44\\x45\\x46\\x41ULT\\x10\\x00\\x12\\t\\n\\x05\\x43\\x41\\x46\\x46\\x45\\x10\\x01\\x12\\t\\n\\x05\\x43UDNN\\x10\\x02\\""F\\n\\x0ePowerParameter\\x12\\x10\\n\\x05power\\x18\\x01 \\x01(\\x02:\\x01\\x31\\x12\\x10\\n\\x05scale\\x18\\x02 \\x01(\\x02:\\x01\\x31\\x12\\x10\\n\\x05shift\\x18\\x03 \\x01(\\x02:\\x01\\x30\\""\\xb5\\x02\\n\\x11PriorBoxParameter\\x12\\x10\\n\\x08min_size\\x18\\x01 \\x03(\\x02\\x12\\x10\\n\\x08max_size\\x18\\x02 \\x03(\\x02\\x12\\x14\\n\\x0c\\x61spect_ratio\\x18\\x03 \\x03(\\x02\\x12\\x12\\n\\x04\\x66lip\\x18\\x04 \\x01(\\x08:\\x04true\\x12\\x13\\n\\x04\\x63lip\\x18\\x05 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x10\\n\\x08variance\\x18\\x06 \\x03(\\x02\\x12\\x10\\n\\x08img_size\\x18\\x07 \\x01(\\r\\x12\\r\\n\\x05img_h\\x18\\x08 \\x01(\\r\\x12\\r\\n\\x05img_w\\x18\\t \\x01(\\r\\x12\\x0c\\n\\x04step\\x18\\n \\x01(\\x02\\x12\\x0e\\n\\x06step_h\\x18\\x0b \\x01(\\x02\\x12\\x0e\\n\\x06step_w\\x18\\x0c \\x01(\\x02\\x12\\x13\\n\\x06offset\\x18\\r \\x01(\\x02:\\x03\\x30.5\\""8\\n\\x08\\x43odeType\\x12\\n\\n\\x06\\x43ORNER\\x10\\x01\\x12\\x0f\\n\\x0b\\x43\\x45NTER_SIZE\\x10\\x02\\x12\\x0f\\n\\x0b\\x43ORNER_SIZE\\x10\\x03\\""g\\n\\x0fPythonParameter\\x12\\x0e\\n\\x06module\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05layer\\x18\\x02 \\x01(\\t\\x12\\x13\\n\\tparam_str\\x18\\x03 \\x01(\\t:\\x00\\x12 \\n\\x11share_in_parallel\\x18\\x04 \\x01(\\x08:\\x05\\x66\\x61lse\\""\\xc0\\x01\\n\\x12RecurrentParameter\\x12\\x15\\n\\nnum_output\\x18\\x01 \\x01(\\r:\\x01\\x30\\x12-\\n\\rweight_filler\\x18\\x02 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12+\\n\\x0b\\x62ias_filler\\x18\\x03 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12\\x19\\n\\ndebug_info\\x18\\x04 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x1c\\n\\rexpose_hidden\\x18\\x05 \\x01(\\x08:\\x05\\x66\\x61lse\\""\\xad\\x01\\n\\x12ReductionParameter\\x12=\\n\\toperation\\x18\\x01 \\x01(\\x0e\\x32%.caffe.ReductionParameter.ReductionOp:\\x03SUM\\x12\\x0f\\n\\x04\\x61xis\\x18\\x02 \\x01(\\x05:\\x01\\x30\\x12\\x10\\n\\x05\\x63oeff\\x18\\x03 \\x01(\\x02:\\x01\\x31\\""5\\n\\x0bReductionOp\\x12\\x07\\n\\x03SUM\\x10\\x01\\x12\\x08\\n\\x04\\x41SUM\\x10\\x02\\x12\\t\\n\\x05SUMSQ\\x10\\x03\\x12\\x08\\n\\x04MEAN\\x10\\x04\\""\\x8d\\x01\\n\\rReLUParameter\\x12\\x19\\n\\x0enegative_slope\\x18\\x01 \\x01(\\x02:\\x01\\x30\\x12\\x34\\n\\x06\\x65ngine\\x18\\x02 \\x01(\\x0e\\x32\\x1b.caffe.ReLUParameter.Engine:\\x07\\x44\\x45\\x46\\x41ULT\\""+\\n\\x06\\x45ngine\\x12\\x0b\\n\\x07\\x44\\x45\\x46\\x41ULT\\x10\\x00\\x12\\t\\n\\x05\\x43\\x41\\x46\\x46\\x45\\x10\\x01\\x12\\t\\n\\x05\\x43UDNN\\x10\\x02\\""Z\\n\\x10ReshapeParameter\\x12\\x1f\\n\\x05shape\\x18\\x01 \\x01(\\x0b\\x32\\x10.caffe.BlobShape\\x12\\x0f\\n\\x04\\x61xis\\x18\\x02 \\x01(\\x05:\\x01\\x30\\x12\\x14\\n\\x08num_axes\\x18\\x03 \\x01(\\x05:\\x02-1\\""\\xa5\\x01\\n\\x0eScaleParameter\\x12\\x0f\\n\\x04\\x61xis\\x18\\x01 \\x01(\\x05:\\x01\\x31\\x12\\x13\\n\\x08num_axes\\x18\\x02 \\x01(\\x05:\\x01\\x31\\x12&\\n\\x06\\x66iller\\x18\\x03 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12\\x18\\n\\tbias_term\\x18\\x04 \\x01(\\x08:\\x05\\x66\\x61lse\\x12+\\n\\x0b\\x62ias_filler\\x18\\x05 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\""x\\n\\x10SigmoidParameter\\x12\\x37\\n\\x06\\x65ngine\\x18\\x01 \\x01(\\x0e\\x32\\x1e.caffe.SigmoidParameter.Engine:\\x07\\x44\\x45\\x46\\x41ULT\\""+\\n\\x06\\x45ngine\\x12\\x0b\\n\\x07\\x44\\x45\\x46\\x41ULT\\x10\\x00\\x12\\t\\n\\x05\\x43\\x41\\x46\\x46\\x45\\x10\\x01\\x12\\t\\n\\x05\\x43UDNN\\x10\\x02\\""L\\n\\x0eSliceParameter\\x12\\x0f\\n\\x04\\x61xis\\x18\\x03 \\x01(\\x05:\\x01\\x31\\x12\\x13\\n\\x0bslice_point\\x18\\x02 \\x03(\\r\\x12\\x14\\n\\tslice_dim\\x18\\x01 \\x01(\\r:\\x01\\x31\\""\\x89\\x01\\n\\x10SoftmaxParameter\\x12\\x37\\n\\x06\\x65ngine\\x18\\x01 \\x01(\\x0e\\x32\\x1e.caffe.SoftmaxParameter.Engine:\\x07\\x44\\x45\\x46\\x41ULT\\x12\\x0f\\n\\x04\\x61xis\\x18\\x02 \\x01(\\x05:\\x01\\x31\\""+\\n\\x06\\x45ngine\\x12\\x0b\\n\\x07\\x44\\x45\\x46\\x41ULT\\x10\\x00\\x12\\t\\n\\x05\\x43\\x41\\x46\\x46\\x45\\x10\\x01\\x12\\t\\n\\x05\\x43UDNN\\x10\\x02\\""r\\n\\rTanHParameter\\x12\\x34\\n\\x06\\x65ngine\\x18\\x01 \\x01(\\x0e\\x32\\x1b.caffe.TanHParameter.Engine:\\x07\\x44\\x45\\x46\\x41ULT\\""+\\n\\x06\\x45ngine\\x12\\x0b\\n\\x07\\x44\\x45\\x46\\x41ULT\\x10\\x00\\x12\\t\\n\\x05\\x43\\x41\\x46\\x46\\x45\\x10\\x01\\x12\\t\\n\\x05\\x43UDNN\\x10\\x02\\""/\\n\\rTileParameter\\x12\\x0f\\n\\x04\\x61xis\\x18\\x01 \\x01(\\x05:\\x01\\x31\\x12\\r\\n\\x05tiles\\x18\\x02 \\x01(\\x05\\""*\\n\\x12ThresholdParameter\\x12\\x14\\n\\tthreshold\\x18\\x01 \\x01(\\x02:\\x01\\x30\\""\\xbb\\x01\\n\\x12VideoDataParameter\\x12?\\n\\nvideo_type\\x18\\x01 \\x01(\\x0e\\x32#.caffe.VideoDataParameter.VideoType:\\x06WEBCAM\\x12\\x14\\n\\tdevice_id\\x18\\x02 \\x01(\\x05:\\x01\\x30\\x12\\x12\\n\\nvideo_file\\x18\\x03 \\x01(\\t\\x12\\x16\\n\\x0bskip_frames\\x18\\x04 \\x01(\\r:\\x01\\x30\\""\\""\\n\\tVideoType\\x12\\n\\n\\x06WEBCAM\\x10\\x00\\x12\\t\\n\\x05VIDEO\\x10\\x01\\""\\xc1\\x02\\n\\x13WindowDataParameter\\x12\\x0e\\n\\x06source\\x18\\x01 \\x01(\\t\\x12\\x10\\n\\x05scale\\x18\\x02 \\x01(\\x02:\\x01\\x31\\x12\\x11\\n\\tmean_file\\x18\\x03 \\x01(\\t\\x12\\x12\\n\\nbatch_size\\x18\\x04 \\x01(\\r\\x12\\x14\\n\\tcrop_size\\x18\\x05 \\x01(\\r:\\x01\\x30\\x12\\x15\\n\\x06mirror\\x18\\x06 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x19\\n\\x0c\\x66g_threshold\\x18\\x07 \\x01(\\x02:\\x03\\x30.5\\x12\\x19\\n\\x0c\\x62g_threshold\\x18\\x08 \\x01(\\x02:\\x03\\x30.5\\x12\\x19\\n\\x0b\\x66g_fraction\\x18\\t \\x01(\\x02:\\x04\\x30.25\\x12\\x16\\n\\x0b\\x63ontext_pad\\x18\\n \\x01(\\r:\\x01\\x30\\x12\\x17\\n\\tcrop_mode\\x18\\x0b \\x01(\\t:\\x04warp\\x12\\x1b\\n\\x0c\\x63\\x61\\x63he_images\\x18\\x0c \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x15\\n\\x0broot_folder\\x18\\r \\x01(\\t:\\x00\\""\\xeb\\x01\\n\\x0cSPPParameter\\x12\\x16\\n\\x0epyramid_height\\x18\\x01 \\x01(\\r\\x12\\x31\\n\\x04pool\\x18\\x02 \\x01(\\x0e\\x32\\x1e.caffe.SPPParameter.PoolMethod:\\x03MAX\\x12\\x33\\n\\x06\\x65ngine\\x18\\x06 \\x01(\\x0e\\x32\\x1a.caffe.SPPParameter.Engine:\\x07\\x44\\x45\\x46\\x41ULT\\"".\\n\\nPoolMethod\\x12\\x07\\n\\x03MAX\\x10\\x00\\x12\\x07\\n\\x03\\x41VE\\x10\\x01\\x12\\x0e\\n\\nSTOCHASTIC\\x10\\x02\\""+\\n\\x06\\x45ngine\\x12\\x0b\\n\\x07\\x44\\x45\\x46\\x41ULT\\x10\\x00\\x12\\t\\n\\x05\\x43\\x41\\x46\\x46\\x45\\x10\\x01\\x12\\t\\n\\x05\\x43UDNN\\x10\\x02\\""\\xe0\\x13\\n\\x10V1LayerParameter\\x12\\x0e\\n\\x06\\x62ottom\\x18\\x02 \\x03(\\t\\x12\\x0b\\n\\x03top\\x18\\x03 \\x03(\\t\\x12\\x0c\\n\\x04name\\x18\\x04 \\x01(\\t\\x12$\\n\\x07include\\x18  \\x03(\\x0b\\x32\\x13.caffe.NetStateRule\\x12$\\n\\x07\\x65xclude\\x18! \\x03(\\x0b\\x32\\x13.caffe.NetStateRule\\x12/\\n\\x04type\\x18\\x05 \\x01(\\x0e\\x32!.caffe.V1LayerParameter.LayerType\\x12\\x1f\\n\\x05\\x62lobs\\x18\\x06 \\x03(\\x0b\\x32\\x10.caffe.BlobProto\\x12\\x0e\\n\\x05param\\x18\\xe9\\x07 \\x03(\\t\\x12>\\n\\x0f\\x62lob_share_mode\\x18\\xea\\x07 \\x03(\\x0e\\x32$.caffe.V1LayerParameter.DimCheckMode\\x12\\x10\\n\\x08\\x62lobs_lr\\x18\\x07 \\x03(\\x02\\x12\\x14\\n\\x0cweight_decay\\x18\\x08 \\x03(\\x02\\x12\\x13\\n\\x0bloss_weight\\x18# \\x03(\\x02\\x12\\x30\\n\\x0e\\x61\\x63\\x63uracy_param\\x18\\x1b \\x01(\\x0b\\x32\\x18.caffe.AccuracyParameter\\x12,\\n\\x0c\\x61rgmax_param\\x18\\x17 \\x01(\\x0b\\x32\\x16.caffe.ArgMaxParameter\\x12,\\n\\x0c\\x63oncat_param\\x18\\t \\x01(\\x0b\\x32\\x16.caffe.ConcatParameter\\x12?\\n\\x16\\x63ontrastive_loss_param\\x18( \\x01(\\x0b\\x32\\x1f.caffe.ContrastiveLossParameter\\x12\\x36\\n\\x11\\x63onvolution_param\\x18\\n \\x01(\\x0b\\x32\\x1b.caffe.ConvolutionParameter\\x12(\\n\\ndata_param\\x18\\x0b \\x01(\\x0b\\x32\\x14.caffe.DataParameter\\x12.\\n\\rdropout_param\\x18\\x0c \\x01(\\x0b\\x32\\x17.caffe.DropoutParameter\\x12\\x33\\n\\x10\\x64ummy_data_param\\x18\\x1a \\x01(\\x0b\\x32\\x19.caffe.DummyDataParameter\\x12.\\n\\reltwise_param\\x18\\x18 \\x01(\\x0b\\x32\\x17.caffe.EltwiseParameter\\x12&\\n\\texp_param\\x18) \\x01(\\x0b\\x32\\x13.caffe.ExpParameter\\x12\\x31\\n\\x0fhdf5_data_param\\x18\\r \\x01(\\x0b\\x32\\x18.caffe.HDF5DataParameter\\x12\\x35\\n\\x11hdf5_output_param\\x18\\x0e \\x01(\\x0b\\x32\\x1a.caffe.HDF5OutputParameter\\x12\\x33\\n\\x10hinge_loss_param\\x18\\x1d \\x01(\\x0b\\x32\\x19.caffe.HingeLossParameter\\x12\\x33\\n\\x10image_data_param\\x18\\x0f \\x01(\\x0b\\x32\\x19.caffe.ImageDataParameter\\x12\\x39\\n\\x13infogain_loss_param\\x18\\x10 \\x01(\\x0b\\x32\\x1c.caffe.InfogainLossParameter\\x12\\x39\\n\\x13inner_product_param\\x18\\x11 \\x01(\\x0b\\x32\\x1c.caffe.InnerProductParameter\\x12&\\n\\tlrn_param\\x18\\x12 \\x01(\\x0b\\x32\\x13.caffe.LRNParameter\\x12\\x35\\n\\x11memory_data_param\\x18\\x16 \\x01(\\x0b\\x32\\x1a.caffe.MemoryDataParameter\\x12&\\n\\tmvn_param\\x18\\"" \\x01(\\x0b\\x32\\x13.caffe.MVNParameter\\x12.\\n\\rpooling_param\\x18\\x13 \\x01(\\x0b\\x32\\x17.caffe.PoolingParameter\\x12*\\n\\x0bpower_param\\x18\\x15 \\x01(\\x0b\\x32\\x15.caffe.PowerParameter\\x12(\\n\\nrelu_param\\x18\\x1e \\x01(\\x0b\\x32\\x14.caffe.ReLUParameter\\x12.\\n\\rsigmoid_param\\x18& \\x01(\\x0b\\x32\\x17.caffe.SigmoidParameter\\x12.\\n\\rsoftmax_param\\x18\\\' \\x01(\\x0b\\x32\\x17.caffe.SoftmaxParameter\\x12*\\n\\x0bslice_param\\x18\\x1f \\x01(\\x0b\\x32\\x15.caffe.SliceParameter\\x12(\\n\\ntanh_param\\x18% \\x01(\\x0b\\x32\\x14.caffe.TanHParameter\\x12\\x32\\n\\x0fthreshold_param\\x18\\x19 \\x01(\\x0b\\x32\\x19.caffe.ThresholdParameter\\x12\\x35\\n\\x11window_data_param\\x18\\x14 \\x01(\\x0b\\x32\\x1a.caffe.WindowDataParameter\\x12\\x37\\n\\x0ftransform_param\\x18$ \\x01(\\x0b\\x32\\x1e.caffe.TransformationParameter\\x12(\\n\\nloss_param\\x18* \\x01(\\x0b\\x32\\x14.caffe.LossParameter\\x12&\\n\\x05layer\\x18\\x01 \\x01(\\x0b\\x32\\x17.caffe.V0LayerParameter\\""\\xd8\\x04\\n\\tLayerType\\x12\\x08\\n\\x04NONE\\x10\\x00\\x12\\n\\n\\x06\\x41\\x42SVAL\\x10#\\x12\\x0c\\n\\x08\\x41\\x43\\x43URACY\\x10\\x01\\x12\\n\\n\\x06\\x41RGMAX\\x10\\x1e\\x12\\x08\\n\\x04\\x42NLL\\x10\\x02\\x12\\n\\n\\x06\\x43ONCAT\\x10\\x03\\x12\\x14\\n\\x10\\x43ONTRASTIVE_LOSS\\x10%\\x12\\x0f\\n\\x0b\\x43ONVOLUTION\\x10\\x04\\x12\\x08\\n\\x04\\x44\\x41TA\\x10\\x05\\x12\\x11\\n\\rDECONVOLUTION\\x10\\\'\\x12\\x0b\\n\\x07\\x44ROPOUT\\x10\\x06\\x12\\x0e\\n\\nDUMMY_DATA\\x10 \\x12\\x12\\n\\x0e\\x45UCLIDEAN_LOSS\\x10\\x07\\x12\\x0b\\n\\x07\\x45LTWISE\\x10\\x19\\x12\\x07\\n\\x03\\x45XP\\x10&\\x12\\x0b\\n\\x07\\x46LATTEN\\x10\\x08\\x12\\r\\n\\tHDF5_DATA\\x10\\t\\x12\\x0f\\n\\x0bHDF5_OUTPUT\\x10\\n\\x12\\x0e\\n\\nHINGE_LOSS\\x10\\x1c\\x12\\n\\n\\x06IM2COL\\x10\\x0b\\x12\\x0e\\n\\nIMAGE_DATA\\x10\\x0c\\x12\\x11\\n\\rINFOGAIN_LOSS\\x10\\r\\x12\\x11\\n\\rINNER_PRODUCT\\x10\\x0e\\x12\\x07\\n\\x03LRN\\x10\\x0f\\x12\\x0f\\n\\x0bMEMORY_DATA\\x10\\x1d\\x12\\x1d\\n\\x19MULTINOMIAL_LOGISTIC_LOSS\\x10\\x10\\x12\\x07\\n\\x03MVN\\x10\\""\\x12\\x0b\\n\\x07POOLING\\x10\\x11\\x12\\t\\n\\x05POWER\\x10\\x1a\\x12\\x08\\n\\x04RELU\\x10\\x12\\x12\\x0b\\n\\x07SIGMOID\\x10\\x13\\x12\\x1e\\n\\x1aSIGMOID_CROSS_ENTROPY_LOSS\\x10\\x1b\\x12\\x0b\\n\\x07SILENCE\\x10$\\x12\\x0b\\n\\x07SOFTMAX\\x10\\x14\\x12\\x10\\n\\x0cSOFTMAX_LOSS\\x10\\x15\\x12\\t\\n\\x05SPLIT\\x10\\x16\\x12\\t\\n\\x05SLICE\\x10!\\x12\\x08\\n\\x04TANH\\x10\\x17\\x12\\x0f\\n\\x0bWINDOW_DATA\\x10\\x18\\x12\\r\\n\\tTHRESHOLD\\x10\\x1f\\""*\\n\\x0c\\x44imCheckMode\\x12\\n\\n\\x06STRICT\\x10\\x00\\x12\\x0e\\n\\nPERMISSIVE\\x10\\x01\\""\\xfd\\x07\\n\\x10V0LayerParameter\\x12\\x0c\\n\\x04name\\x18\\x01 \\x01(\\t\\x12\\x0c\\n\\x04type\\x18\\x02 \\x01(\\t\\x12\\x12\\n\\nnum_output\\x18\\x03 \\x01(\\r\\x12\\x16\\n\\x08\\x62iasterm\\x18\\x04 \\x01(\\x08:\\x04true\\x12-\\n\\rweight_filler\\x18\\x05 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12+\\n\\x0b\\x62ias_filler\\x18\\x06 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12\\x0e\\n\\x03pad\\x18\\x07 \\x01(\\r:\\x01\\x30\\x12\\x12\\n\\nkernelsize\\x18\\x08 \\x01(\\r\\x12\\x10\\n\\x05group\\x18\\t \\x01(\\r:\\x01\\x31\\x12\\x11\\n\\x06stride\\x18\\n \\x01(\\r:\\x01\\x31\\x12\\x35\\n\\x04pool\\x18\\x0b \\x01(\\x0e\\x32\\"".caffe.V0LayerParameter.PoolMethod:\\x03MAX\\x12\\x1a\\n\\rdropout_ratio\\x18\\x0c \\x01(\\x02:\\x03\\x30.5\\x12\\x15\\n\\nlocal_size\\x18\\r \\x01(\\r:\\x01\\x35\\x12\\x10\\n\\x05\\x61lpha\\x18\\x0e \\x01(\\x02:\\x01\\x31\\x12\\x12\\n\\x04\\x62\\x65ta\\x18\\x0f \\x01(\\x02:\\x04\\x30.75\\x12\\x0c\\n\\x01k\\x18\\x16 \\x01(\\x02:\\x01\\x31\\x12\\x0e\\n\\x06source\\x18\\x10 \\x01(\\t\\x12\\x10\\n\\x05scale\\x18\\x11 \\x01(\\x02:\\x01\\x31\\x12\\x10\\n\\x08meanfile\\x18\\x12 \\x01(\\t\\x12\\x11\\n\\tbatchsize\\x18\\x13 \\x01(\\r\\x12\\x13\\n\\x08\\x63ropsize\\x18\\x14 \\x01(\\r:\\x01\\x30\\x12\\x15\\n\\x06mirror\\x18\\x15 \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x1f\\n\\x05\\x62lobs\\x18\\x32 \\x03(\\x0b\\x32\\x10.caffe.BlobProto\\x12\\x10\\n\\x08\\x62lobs_lr\\x18\\x33 \\x03(\\x02\\x12\\x14\\n\\x0cweight_decay\\x18\\x34 \\x03(\\x02\\x12\\x14\\n\\trand_skip\\x18\\x35 \\x01(\\r:\\x01\\x30\\x12\\x1d\\n\\x10\\x64\\x65t_fg_threshold\\x18\\x36 \\x01(\\x02:\\x03\\x30.5\\x12\\x1d\\n\\x10\\x64\\x65t_bg_threshold\\x18\\x37 \\x01(\\x02:\\x03\\x30.5\\x12\\x1d\\n\\x0f\\x64\\x65t_fg_fraction\\x18\\x38 \\x01(\\x02:\\x04\\x30.25\\x12\\x1a\\n\\x0f\\x64\\x65t_context_pad\\x18: \\x01(\\r:\\x01\\x30\\x12\\x1b\\n\\rdet_crop_mode\\x18; \\x01(\\t:\\x04warp\\x12\\x12\\n\\x07new_num\\x18< \\x01(\\x05:\\x01\\x30\\x12\\x17\\n\\x0cnew_channels\\x18= \\x01(\\x05:\\x01\\x30\\x12\\x15\\n\\nnew_height\\x18> \\x01(\\x05:\\x01\\x30\\x12\\x14\\n\\tnew_width\\x18? \\x01(\\x05:\\x01\\x30\\x12\\x1d\\n\\x0eshuffle_images\\x18@ \\x01(\\x08:\\x05\\x66\\x61lse\\x12\\x15\\n\\nconcat_dim\\x18\\x41 \\x01(\\r:\\x01\\x31\\x12\\x36\\n\\x11hdf5_output_param\\x18\\xe9\\x07 \\x01(\\x0b\\x32\\x1a.caffe.HDF5OutputParameter\\"".\\n\\nPoolMethod\\x12\\x07\\n\\x03MAX\\x10\\x00\\x12\\x07\\n\\x03\\x41VE\\x10\\x01\\x12\\x0e\\n\\nSTOCHASTIC\\x10\\x02\\""W\\n\\x0ePReLUParameter\\x12&\\n\\x06\\x66iller\\x18\\x01 \\x01(\\x0b\\x32\\x16.caffe.FillerParameter\\x12\\x1d\\n\\x0e\\x63hannel_shared\\x18\\x02 \\x01(\\x08:\\x05\\x66\\x61lse\\""+\\n\\x17ShuffleChannelParameter\\x12\\x10\\n\\x05group\\x18\\x01 \\x01(\\r:\\x01\\x31*\\x1c\\n\\x05Phase\\x12\\t\\n\\x05TRAIN\\x10\\x00\\x12\\x08\\n\\x04TEST\\x10\\x01\'\n    ))\n\n_PHASE = _descriptor.EnumDescriptor(\n    name=\'Phase\',\n    full_name=\'caffe.Phase\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'TRAIN\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'TEST\',\n                                        index=1,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=21908,\n    serialized_end=21936,\n)\n_sym_db.RegisterEnumDescriptor(_PHASE)\n\nPhase = enum_type_wrapper.EnumTypeWrapper(_PHASE)\nTRAIN = 0\nTEST = 1\n\n_EMITCONSTRAINT_EMITTYPE = _descriptor.EnumDescriptor(\n    name=\'EmitType\',\n    full_name=\'caffe.EmitConstraint.EmitType\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'CENTER\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'MIN_OVERLAP\',\n                                        index=1,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=1146,\n    serialized_end=1185,\n)\n_sym_db.RegisterEnumDescriptor(_EMITCONSTRAINT_EMITTYPE)\n\n_ANNOTATEDDATUM_ANNOTATIONTYPE = _descriptor.EnumDescriptor(\n    name=\'AnnotationType\',\n    full_name=\'caffe.AnnotatedDatum.AnnotationType\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'BBOX\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=1629,\n    serialized_end=1655,\n)\n_sym_db.RegisterEnumDescriptor(_ANNOTATEDDATUM_ANNOTATIONTYPE)\n\n_FILLERPARAMETER_VARIANCENORM = _descriptor.EnumDescriptor(\n    name=\'VarianceNorm\',\n    full_name=\'caffe.FillerParameter.VarianceNorm\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'FAN_IN\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'FAN_OUT\',\n                                        index=1,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'AVERAGE\',\n                                        index=2,\n                                        number=2,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=1872,\n    serialized_end=1924,\n)\n_sym_db.RegisterEnumDescriptor(_FILLERPARAMETER_VARIANCENORM)\n\n_SOLVERPARAMETER_SNAPSHOTFORMAT = _descriptor.EnumDescriptor(\n    name=\'SnapshotFormat\',\n    full_name=\'caffe.SolverParameter.SnapshotFormat\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'HDF5\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'BINARYPROTO\',\n                                        index=1,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=3480,\n    serialized_end=3523,\n)\n_sym_db.RegisterEnumDescriptor(_SOLVERPARAMETER_SNAPSHOTFORMAT)\n\n_SOLVERPARAMETER_SOLVERMODE = _descriptor.EnumDescriptor(\n    name=\'SolverMode\',\n    full_name=\'caffe.SolverParameter.SolverMode\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'CPU\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'GPU\',\n                                        index=1,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=3525,\n    serialized_end=3555,\n)\n_sym_db.RegisterEnumDescriptor(_SOLVERPARAMETER_SOLVERMODE)\n\n_SOLVERPARAMETER_SOLVERTYPE = _descriptor.EnumDescriptor(\n    name=\'SolverType\',\n    full_name=\'caffe.SolverParameter.SolverType\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'SGD\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'NESTEROV\',\n                                        index=1,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'ADAGRAD\',\n                                        index=2,\n                                        number=2,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'RMSPROP\',\n                                        index=3,\n                                        number=3,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'ADADELTA\',\n                                        index=4,\n                                        number=4,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'ADAM\',\n                                        index=5,\n                                        number=5,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=3557,\n    serialized_end=3642,\n)\n_sym_db.RegisterEnumDescriptor(_SOLVERPARAMETER_SOLVERTYPE)\n\n_PARAMSPEC_DIMCHECKMODE = _descriptor.EnumDescriptor(\n    name=\'DimCheckMode\',\n    full_name=\'caffe.ParamSpec.DimCheckMode\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'STRICT\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'PERMISSIVE\',\n                                        index=1,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=4131,\n    serialized_end=4173,\n)\n_sym_db.RegisterEnumDescriptor(_PARAMSPEC_DIMCHECKMODE)\n\n_RESIZEPARAMETER_RESIZE_MODE = _descriptor.EnumDescriptor(\n    name=\'Resize_mode\',\n    full_name=\'caffe.ResizeParameter.Resize_mode\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'WARP\',\n                                        index=0,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'FIT_SMALL_SIZE\',\n                                        index=1,\n                                        number=2,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'FIT_LARGE_SIZE_AND_PAD\',\n                                        index=2,\n                                        number=3,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=8049,\n    serialized_end=8120,\n)\n_sym_db.RegisterEnumDescriptor(_RESIZEPARAMETER_RESIZE_MODE)\n\n_RESIZEPARAMETER_PAD_MODE = _descriptor.EnumDescriptor(\n    name=\'Pad_mode\',\n    full_name=\'caffe.ResizeParameter.Pad_mode\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'CONSTANT\',\n                                        index=0,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'MIRRORED\',\n                                        index=1,\n                                        number=2,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'REPEAT_NEAREST\',\n                                        index=2,\n                                        number=3,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=8122,\n    serialized_end=8180,\n)\n_sym_db.RegisterEnumDescriptor(_RESIZEPARAMETER_PAD_MODE)\n\n_RESIZEPARAMETER_INTERP_MODE = _descriptor.EnumDescriptor(\n    name=\'Interp_mode\',\n    full_name=\'caffe.ResizeParameter.Interp_mode\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'LINEAR\',\n                                        index=0,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'AREA\',\n                                        index=1,\n                                        number=2,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'NEAREST\',\n                                        index=2,\n                                        number=3,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'CUBIC\',\n                                        index=3,\n                                        number=4,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'LANCZOS4\',\n                                        index=4,\n                                        number=5,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=8182,\n    serialized_end=8255,\n)\n_sym_db.RegisterEnumDescriptor(_RESIZEPARAMETER_INTERP_MODE)\n\n_LOSSPARAMETER_NORMALIZATIONMODE = _descriptor.EnumDescriptor(\n    name=\'NormalizationMode\',\n    full_name=\'caffe.LossParameter.NormalizationMode\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'FULL\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'VALID\',\n                                        index=1,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'BATCH_SIZE\',\n                                        index=2,\n                                        number=2,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'NONE\',\n                                        index=3,\n                                        number=3,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=9202,\n    serialized_end=9268,\n)\n_sym_db.RegisterEnumDescriptor(_LOSSPARAMETER_NORMALIZATIONMODE)\n\n_CONVOLUTIONPARAMETER_ENGINE = _descriptor.EnumDescriptor(\n    name=\'Engine\',\n    full_name=\'caffe.ConvolutionParameter.Engine\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'DEFAULT\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'CAFFE\',\n                                        index=1,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'CUDNN\',\n                                        index=2,\n                                        number=2,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=10385,\n    serialized_end=10428,\n)\n_sym_db.RegisterEnumDescriptor(_CONVOLUTIONPARAMETER_ENGINE)\n\n_DATAPARAMETER_DB = _descriptor.EnumDescriptor(\n    name=\'DB\',\n    full_name=\'caffe.DataParameter.DB\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'LEVELDB\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'LMDB\',\n                                        index=1,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=10746,\n    serialized_end=10773,\n)\n_sym_db.RegisterEnumDescriptor(_DATAPARAMETER_DB)\n\n_ELTWISEPARAMETER_ELTWISEOP = _descriptor.EnumDescriptor(\n    name=\'EltwiseOp\',\n    full_name=\'caffe.EltwiseParameter.EltwiseOp\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'PROD\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'SUM\',\n                                        index=1,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'MAX\',\n                                        index=2,\n                                        number=2,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=12106,\n    serialized_end=12145,\n)\n_sym_db.RegisterEnumDescriptor(_ELTWISEPARAMETER_ELTWISEOP)\n\n_HINGELOSSPARAMETER_NORM = _descriptor.EnumDescriptor(\n    name=\'Norm\',\n    full_name=\'caffe.HingeLossParameter.Norm\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'L1\',\n                                        index=0,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'L2\',\n                                        index=1,\n                                        number=2,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=12680,\n    serialized_end=12702,\n)\n_sym_db.RegisterEnumDescriptor(_HINGELOSSPARAMETER_NORM)\n\n_LRNPARAMETER_NORMREGION = _descriptor.EnumDescriptor(\n    name=\'NormRegion\',\n    full_name=\'caffe.LRNParameter.NormRegion\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'ACROSS_CHANNELS\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'WITHIN_CHANNEL\',\n                                        index=1,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=13569,\n    serialized_end=13622,\n)\n_sym_db.RegisterEnumDescriptor(_LRNPARAMETER_NORMREGION)\n\n_LRNPARAMETER_ENGINE = _descriptor.EnumDescriptor(\n    name=\'Engine\',\n    full_name=\'caffe.LRNParameter.Engine\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'DEFAULT\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'CAFFE\',\n                                        index=1,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'CUDNN\',\n                                        index=2,\n                                        number=2,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=10385,\n    serialized_end=10428,\n)\n_sym_db.RegisterEnumDescriptor(_LRNPARAMETER_ENGINE)\n\n_MULTIBOXLOSSPARAMETER_LOCLOSSTYPE = _descriptor.EnumDescriptor(\n    name=\'LocLossType\',\n    full_name=\'caffe.MultiBoxLossParameter.LocLossType\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'L2\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'SMOOTH_L1\',\n                                        index=1,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=14703,\n    serialized_end=14739,\n)\n_sym_db.RegisterEnumDescriptor(_MULTIBOXLOSSPARAMETER_LOCLOSSTYPE)\n\n_MULTIBOXLOSSPARAMETER_CONFLOSSTYPE = _descriptor.EnumDescriptor(\n    name=\'ConfLossType\',\n    full_name=\'caffe.MultiBoxLossParameter.ConfLossType\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'SOFTMAX\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'LOGISTIC\',\n                                        index=1,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=14741,\n    serialized_end=14782,\n)\n_sym_db.RegisterEnumDescriptor(_MULTIBOXLOSSPARAMETER_CONFLOSSTYPE)\n\n_MULTIBOXLOSSPARAMETER_MATCHTYPE = _descriptor.EnumDescriptor(\n    name=\'MatchType\',\n    full_name=\'caffe.MultiBoxLossParameter.MatchType\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'BIPARTITE\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'PER_PREDICTION\',\n                                        index=1,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=14784,\n    serialized_end=14830,\n)\n_sym_db.RegisterEnumDescriptor(_MULTIBOXLOSSPARAMETER_MATCHTYPE)\n\n_MULTIBOXLOSSPARAMETER_MININGTYPE = _descriptor.EnumDescriptor(\n    name=\'MiningType\',\n    full_name=\'caffe.MultiBoxLossParameter.MiningType\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'NONE\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'MAX_NEGATIVE\',\n                                        index=1,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'HARD_EXAMPLE\',\n                                        index=2,\n                                        number=2,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=14832,\n    serialized_end=14890,\n)\n_sym_db.RegisterEnumDescriptor(_MULTIBOXLOSSPARAMETER_MININGTYPE)\n\n_POOLINGPARAMETER_POOLMETHOD = _descriptor.EnumDescriptor(\n    name=\'PoolMethod\',\n    full_name=\'caffe.PoolingParameter.PoolMethod\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'MAX\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'AVE\',\n                                        index=1,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'STOCHASTIC\',\n                                        index=2,\n                                        number=2,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=15561,\n    serialized_end=15607,\n)\n_sym_db.RegisterEnumDescriptor(_POOLINGPARAMETER_POOLMETHOD)\n\n_POOLINGPARAMETER_ENGINE = _descriptor.EnumDescriptor(\n    name=\'Engine\',\n    full_name=\'caffe.PoolingParameter.Engine\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'DEFAULT\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'CAFFE\',\n                                        index=1,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'CUDNN\',\n                                        index=2,\n                                        number=2,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=10385,\n    serialized_end=10428,\n)\n_sym_db.RegisterEnumDescriptor(_POOLINGPARAMETER_ENGINE)\n\n_PRIORBOXPARAMETER_CODETYPE = _descriptor.EnumDescriptor(\n    name=\'CodeType\',\n    full_name=\'caffe.PriorBoxParameter.CodeType\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'CORNER\',\n                                        index=0,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'CENTER_SIZE\',\n                                        index=1,\n                                        number=2,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'CORNER_SIZE\',\n                                        index=2,\n                                        number=3,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=15980,\n    serialized_end=16036,\n)\n_sym_db.RegisterEnumDescriptor(_PRIORBOXPARAMETER_CODETYPE)\n\n_REDUCTIONPARAMETER_REDUCTIONOP = _descriptor.EnumDescriptor(\n    name=\'ReductionOp\',\n    full_name=\'caffe.ReductionParameter.ReductionOp\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'SUM\',\n                                        index=0,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'ASUM\',\n                                        index=1,\n                                        number=2,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'SUMSQ\',\n                                        index=2,\n                                        number=3,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'MEAN\',\n                                        index=3,\n                                        number=4,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=16459,\n    serialized_end=16512,\n)\n_sym_db.RegisterEnumDescriptor(_REDUCTIONPARAMETER_REDUCTIONOP)\n\n_RELUPARAMETER_ENGINE = _descriptor.EnumDescriptor(\n    name=\'Engine\',\n    full_name=\'caffe.ReLUParameter.Engine\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'DEFAULT\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'CAFFE\',\n                                        index=1,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'CUDNN\',\n                                        index=2,\n                                        number=2,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=10385,\n    serialized_end=10428,\n)\n_sym_db.RegisterEnumDescriptor(_RELUPARAMETER_ENGINE)\n\n_SIGMOIDPARAMETER_ENGINE = _descriptor.EnumDescriptor(\n    name=\'Engine\',\n    full_name=\'caffe.SigmoidParameter.Engine\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'DEFAULT\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'CAFFE\',\n                                        index=1,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'CUDNN\',\n                                        index=2,\n                                        number=2,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=10385,\n    serialized_end=10428,\n)\n_sym_db.RegisterEnumDescriptor(_SIGMOIDPARAMETER_ENGINE)\n\n_SOFTMAXPARAMETER_ENGINE = _descriptor.EnumDescriptor(\n    name=\'Engine\',\n    full_name=\'caffe.SoftmaxParameter.Engine\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'DEFAULT\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'CAFFE\',\n                                        index=1,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'CUDNN\',\n                                        index=2,\n                                        number=2,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=10385,\n    serialized_end=10428,\n)\n_sym_db.RegisterEnumDescriptor(_SOFTMAXPARAMETER_ENGINE)\n\n_TANHPARAMETER_ENGINE = _descriptor.EnumDescriptor(\n    name=\'Engine\',\n    full_name=\'caffe.TanHParameter.Engine\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'DEFAULT\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'CAFFE\',\n                                        index=1,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'CUDNN\',\n                                        index=2,\n                                        number=2,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=10385,\n    serialized_end=10428,\n)\n_sym_db.RegisterEnumDescriptor(_TANHPARAMETER_ENGINE)\n\n_VIDEODATAPARAMETER_VIDEOTYPE = _descriptor.EnumDescriptor(\n    name=\'VideoType\',\n    full_name=\'caffe.VideoDataParameter.VideoType\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'WEBCAM\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'VIDEO\',\n                                        index=1,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=17621,\n    serialized_end=17655,\n)\n_sym_db.RegisterEnumDescriptor(_VIDEODATAPARAMETER_VIDEOTYPE)\n\n_SPPPARAMETER_POOLMETHOD = _descriptor.EnumDescriptor(\n    name=\'PoolMethod\',\n    full_name=\'caffe.SPPParameter.PoolMethod\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'MAX\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'AVE\',\n                                        index=1,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'STOCHASTIC\',\n                                        index=2,\n                                        number=2,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=15561,\n    serialized_end=15607,\n)\n_sym_db.RegisterEnumDescriptor(_SPPPARAMETER_POOLMETHOD)\n\n_SPPPARAMETER_ENGINE = _descriptor.EnumDescriptor(\n    name=\'Engine\',\n    full_name=\'caffe.SPPParameter.Engine\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'DEFAULT\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'CAFFE\',\n                                        index=1,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'CUDNN\',\n                                        index=2,\n                                        number=2,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=10385,\n    serialized_end=10428,\n)\n_sym_db.RegisterEnumDescriptor(_SPPPARAMETER_ENGINE)\n\n_V1LAYERPARAMETER_LAYERTYPE = _descriptor.EnumDescriptor(\n    name=\'LayerType\',\n    full_name=\'caffe.V1LayerParameter.LayerType\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'NONE\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'ABSVAL\',\n                                        index=1,\n                                        number=35,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'ACCURACY\',\n                                        index=2,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'ARGMAX\',\n                                        index=3,\n                                        number=30,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'BNLL\',\n                                        index=4,\n                                        number=2,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'CONCAT\',\n                                        index=5,\n                                        number=3,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'CONTRASTIVE_LOSS\',\n                                        index=6,\n                                        number=37,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'CONVOLUTION\',\n                                        index=7,\n                                        number=4,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'DATA\',\n                                        index=8,\n                                        number=5,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'DECONVOLUTION\',\n                                        index=9,\n                                        number=39,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'DROPOUT\',\n                                        index=10,\n                                        number=6,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'DUMMY_DATA\',\n                                        index=11,\n                                        number=32,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'EUCLIDEAN_LOSS\',\n                                        index=12,\n                                        number=7,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'ELTWISE\',\n                                        index=13,\n                                        number=25,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'EXP\',\n                                        index=14,\n                                        number=38,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'FLATTEN\',\n                                        index=15,\n                                        number=8,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'HDF5_DATA\',\n                                        index=16,\n                                        number=9,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'HDF5_OUTPUT\',\n                                        index=17,\n                                        number=10,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'HINGE_LOSS\',\n                                        index=18,\n                                        number=28,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'IM2COL\',\n                                        index=19,\n                                        number=11,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'IMAGE_DATA\',\n                                        index=20,\n                                        number=12,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'INFOGAIN_LOSS\',\n                                        index=21,\n                                        number=13,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'INNER_PRODUCT\',\n                                        index=22,\n                                        number=14,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'LRN\',\n                                        index=23,\n                                        number=15,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'MEMORY_DATA\',\n                                        index=24,\n                                        number=29,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'MULTINOMIAL_LOGISTIC_LOSS\',\n                                        index=25,\n                                        number=16,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'MVN\',\n                                        index=26,\n                                        number=34,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'POOLING\',\n                                        index=27,\n                                        number=17,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'POWER\',\n                                        index=28,\n                                        number=26,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'RELU\',\n                                        index=29,\n                                        number=18,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'SIGMOID\',\n                                        index=30,\n                                        number=19,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'SIGMOID_CROSS_ENTROPY_LOSS\',\n                                        index=31,\n                                        number=27,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'SILENCE\',\n                                        index=32,\n                                        number=36,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'SOFTMAX\',\n                                        index=33,\n                                        number=20,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'SOFTMAX_LOSS\',\n                                        index=34,\n                                        number=21,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'SPLIT\',\n                                        index=35,\n                                        number=22,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'SLICE\',\n                                        index=36,\n                                        number=33,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'TANH\',\n                                        index=37,\n                                        number=23,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'WINDOW_DATA\',\n                                        index=38,\n                                        number=24,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'THRESHOLD\',\n                                        index=39,\n                                        number=31,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=20104,\n    serialized_end=20704,\n)\n_sym_db.RegisterEnumDescriptor(_V1LAYERPARAMETER_LAYERTYPE)\n\n_V1LAYERPARAMETER_DIMCHECKMODE = _descriptor.EnumDescriptor(\n    name=\'DimCheckMode\',\n    full_name=\'caffe.V1LayerParameter.DimCheckMode\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'STRICT\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'PERMISSIVE\',\n                                        index=1,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=4131,\n    serialized_end=4173,\n)\n_sym_db.RegisterEnumDescriptor(_V1LAYERPARAMETER_DIMCHECKMODE)\n\n_V0LAYERPARAMETER_POOLMETHOD = _descriptor.EnumDescriptor(\n    name=\'PoolMethod\',\n    full_name=\'caffe.V0LayerParameter.PoolMethod\',\n    filename=None,\n    file=DESCRIPTOR,\n    values=[\n        _descriptor.EnumValueDescriptor(name=\'MAX\',\n                                        index=0,\n                                        number=0,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'AVE\',\n                                        index=1,\n                                        number=1,\n                                        serialized_options=None,\n                                        type=None),\n        _descriptor.EnumValueDescriptor(name=\'STOCHASTIC\',\n                                        index=2,\n                                        number=2,\n                                        serialized_options=None,\n                                        type=None),\n    ],\n    containing_type=None,\n    serialized_options=None,\n    serialized_start=15561,\n    serialized_end=15607,\n)\n_sym_db.RegisterEnumDescriptor(_V0LAYERPARAMETER_POOLMETHOD)\n\n_BLOBSHAPE = _descriptor.Descriptor(\n    name=\'BlobShape\',\n    full_name=\'caffe.BlobShape\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'dim\',\n                                    full_name=\'caffe.BlobShape.dim\',\n                                    index=0,\n                                    number=1,\n                                    type=3,\n                                    cpp_type=2,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=_b(\'\\020\\001\'),\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=22,\n    serialized_end=50,\n)\n\n_BLOBPROTO = _descriptor.Descriptor(\n    name=\'BlobProto\',\n    full_name=\'caffe.BlobProto\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'shape\',\n                                    full_name=\'caffe.BlobProto.shape\',\n                                    index=0,\n                                    number=7,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=None,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'data\',\n                                    full_name=\'caffe.BlobProto.data\',\n                                    index=1,\n                                    number=5,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=_b(\'\\020\\001\'),\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'diff\',\n                                    full_name=\'caffe.BlobProto.diff\',\n                                    index=2,\n                                    number=6,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=_b(\'\\020\\001\'),\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'double_data\',\n                                    full_name=\'caffe.BlobProto.double_data\',\n                                    index=3,\n                                    number=8,\n                                    type=1,\n                                    cpp_type=5,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=_b(\'\\020\\001\'),\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'double_diff\',\n                                    full_name=\'caffe.BlobProto.double_diff\',\n                                    index=4,\n                                    number=9,\n                                    type=1,\n                                    cpp_type=5,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=_b(\'\\020\\001\'),\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'num\',\n                                    full_name=\'caffe.BlobProto.num\',\n                                    index=5,\n                                    number=1,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'channels\',\n                                    full_name=\'caffe.BlobProto.channels\',\n                                    index=6,\n                                    number=2,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'height\',\n                                    full_name=\'caffe.BlobProto.height\',\n                                    index=7,\n                                    number=3,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'width\',\n                                    full_name=\'caffe.BlobProto.width\',\n                                    index=8,\n                                    number=4,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=53,\n    serialized_end=257,\n)\n\n_BLOBPROTOVECTOR = _descriptor.Descriptor(\n    name=\'BlobProtoVector\',\n    full_name=\'caffe.BlobProtoVector\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'blobs\',\n                                    full_name=\'caffe.BlobProtoVector.blobs\',\n                                    index=0,\n                                    number=1,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=259,\n    serialized_end=309,\n)\n\n_DATUM = _descriptor.Descriptor(\n    name=\'Datum\',\n    full_name=\'caffe.Datum\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'channels\',\n                                    full_name=\'caffe.Datum.channels\',\n                                    index=0,\n                                    number=1,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'height\',\n                                    full_name=\'caffe.Datum.height\',\n                                    index=1,\n                                    number=2,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'width\',\n                                    full_name=\'caffe.Datum.width\',\n                                    index=2,\n                                    number=3,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'data\',\n                                    full_name=\'caffe.Datum.data\',\n                                    index=3,\n                                    number=4,\n                                    type=12,\n                                    cpp_type=9,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=_b(""""),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'label\',\n                                    full_name=\'caffe.Datum.label\',\n                                    index=4,\n                                    number=5,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'float_data\',\n                                    full_name=\'caffe.Datum.float_data\',\n                                    index=5,\n                                    number=6,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'encoded\',\n                                    full_name=\'caffe.Datum.encoded\',\n                                    index=6,\n                                    number=7,\n                                    type=8,\n                                    cpp_type=7,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=False,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=312,\n    serialized_end=441,\n)\n\n_LABELMAPITEM = _descriptor.Descriptor(\n    name=\'LabelMapItem\',\n    full_name=\'caffe.LabelMapItem\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'name\',\n                                    full_name=\'caffe.LabelMapItem.name\',\n                                    index=0,\n                                    number=1,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=_b("""").decode(\'utf-8\'),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'label\',\n                                    full_name=\'caffe.LabelMapItem.label\',\n                                    index=1,\n                                    number=2,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'display_name\',\n                                    full_name=\'caffe.LabelMapItem.display_name\',\n                                    index=2,\n                                    number=3,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=_b("""").decode(\'utf-8\'),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=443,\n    serialized_end=508,\n)\n\n_LABELMAP = _descriptor.Descriptor(\n    name=\'LabelMap\',\n    full_name=\'caffe.LabelMap\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'item\',\n                                    full_name=\'caffe.LabelMap.item\',\n                                    index=0,\n                                    number=1,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=510,\n    serialized_end=555,\n)\n\n_SAMPLER = _descriptor.Descriptor(\n    name=\'Sampler\',\n    full_name=\'caffe.Sampler\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'min_scale\',\n                                    full_name=\'caffe.Sampler.min_scale\',\n                                    index=0,\n                                    number=1,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(1),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'max_scale\',\n                                    full_name=\'caffe.Sampler.max_scale\',\n                                    index=1,\n                                    number=2,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(1),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'min_aspect_ratio\',\n                                    full_name=\'caffe.Sampler.min_aspect_ratio\',\n                                    index=2,\n                                    number=3,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(1),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'max_aspect_ratio\',\n                                    full_name=\'caffe.Sampler.max_aspect_ratio\',\n                                    index=3,\n                                    number=4,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(1),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=557,\n    serialized_end=668,\n)\n\n_SAMPLECONSTRAINT = _descriptor.Descriptor(\n    name=\'SampleConstraint\',\n    full_name=\'caffe.SampleConstraint\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'min_jaccard_overlap\',\n            full_name=\'caffe.SampleConstraint.min_jaccard_overlap\',\n            index=0,\n            number=1,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=False,\n            default_value=float(0),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'max_jaccard_overlap\',\n            full_name=\'caffe.SampleConstraint.max_jaccard_overlap\',\n            index=1,\n            number=2,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=False,\n            default_value=float(0),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'min_sample_coverage\',\n            full_name=\'caffe.SampleConstraint.min_sample_coverage\',\n            index=2,\n            number=3,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=False,\n            default_value=float(0),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'max_sample_coverage\',\n            full_name=\'caffe.SampleConstraint.max_sample_coverage\',\n            index=3,\n            number=4,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=False,\n            default_value=float(0),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'min_object_coverage\',\n            full_name=\'caffe.SampleConstraint.min_object_coverage\',\n            index=4,\n            number=5,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=False,\n            default_value=float(0),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'max_object_coverage\',\n            full_name=\'caffe.SampleConstraint.max_object_coverage\',\n            index=5,\n            number=6,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=False,\n            default_value=float(0),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=671,\n    serialized_end=863,\n)\n\n_BATCHSAMPLER = _descriptor.Descriptor(\n    name=\'BatchSampler\',\n    full_name=\'caffe.BatchSampler\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'use_original_image\',\n            full_name=\'caffe.BatchSampler.use_original_image\',\n            index=0,\n            number=1,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=True,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'sampler\',\n                                    full_name=\'caffe.BatchSampler.sampler\',\n                                    index=1,\n                                    number=2,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=None,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'sample_constraint\',\n            full_name=\'caffe.BatchSampler.sample_constraint\',\n            index=2,\n            number=3,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'max_sample\',\n                                    full_name=\'caffe.BatchSampler.max_sample\',\n                                    index=3,\n                                    number=4,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'max_trials\',\n                                    full_name=\'caffe.BatchSampler.max_trials\',\n                                    index=4,\n                                    number=5,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=100,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=866,\n    serialized_end=1044,\n)\n\n_EMITCONSTRAINT = _descriptor.Descriptor(\n    name=\'EmitConstraint\',\n    full_name=\'caffe.EmitConstraint\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'emit_type\',\n                                    full_name=\'caffe.EmitConstraint.emit_type\',\n                                    index=0,\n                                    number=1,\n                                    type=14,\n                                    cpp_type=8,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'emit_overlap\',\n            full_name=\'caffe.EmitConstraint.emit_overlap\',\n            index=1,\n            number=2,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=False,\n            default_value=float(0),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[\n        _EMITCONSTRAINT_EMITTYPE,\n    ],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=1047,\n    serialized_end=1185,\n)\n\n_NORMALIZEDBBOX = _descriptor.Descriptor(\n    name=\'NormalizedBBox\',\n    full_name=\'caffe.NormalizedBBox\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'xmin\',\n                                    full_name=\'caffe.NormalizedBBox.xmin\',\n                                    index=0,\n                                    number=1,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=float(0),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'ymin\',\n                                    full_name=\'caffe.NormalizedBBox.ymin\',\n                                    index=1,\n                                    number=2,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=float(0),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'xmax\',\n                                    full_name=\'caffe.NormalizedBBox.xmax\',\n                                    index=2,\n                                    number=3,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=float(0),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'ymax\',\n                                    full_name=\'caffe.NormalizedBBox.ymax\',\n                                    index=3,\n                                    number=4,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=float(0),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'label\',\n                                    full_name=\'caffe.NormalizedBBox.label\',\n                                    index=4,\n                                    number=5,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'difficult\',\n                                    full_name=\'caffe.NormalizedBBox.difficult\',\n                                    index=5,\n                                    number=6,\n                                    type=8,\n                                    cpp_type=7,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=False,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'score\',\n                                    full_name=\'caffe.NormalizedBBox.score\',\n                                    index=6,\n                                    number=7,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=float(0),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'size\',\n                                    full_name=\'caffe.NormalizedBBox.size\',\n                                    index=7,\n                                    number=8,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=float(0),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=1188,\n    serialized_end=1323,\n)\n\n_ANNOTATION = _descriptor.Descriptor(\n    name=\'Annotation\',\n    full_name=\'caffe.Annotation\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'instance_id\',\n                                    full_name=\'caffe.Annotation.instance_id\',\n                                    index=0,\n                                    number=1,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'bbox\',\n                                    full_name=\'caffe.Annotation.bbox\',\n                                    index=1,\n                                    number=2,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=None,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=1325,\n    serialized_end=1398,\n)\n\n_ANNOTATIONGROUP = _descriptor.Descriptor(\n    name=\'AnnotationGroup\',\n    full_name=\'caffe.AnnotationGroup\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'group_label\',\n            full_name=\'caffe.AnnotationGroup.group_label\',\n            index=0,\n            number=1,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'annotation\',\n            full_name=\'caffe.AnnotationGroup.annotation\',\n            index=1,\n            number=2,\n            type=11,\n            cpp_type=10,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=1400,\n    serialized_end=1477,\n)\n\n_ANNOTATEDDATUM = _descriptor.Descriptor(\n    name=\'AnnotatedDatum\',\n    full_name=\'caffe.AnnotatedDatum\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'datum\',\n                                    full_name=\'caffe.AnnotatedDatum.datum\',\n                                    index=0,\n                                    number=1,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=None,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'type\',\n                                    full_name=\'caffe.AnnotatedDatum.type\',\n                                    index=1,\n                                    number=2,\n                                    type=14,\n                                    cpp_type=8,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'annotation_group\',\n            full_name=\'caffe.AnnotatedDatum.annotation_group\',\n            index=2,\n            number=3,\n            type=11,\n            cpp_type=10,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[\n        _ANNOTATEDDATUM_ANNOTATIONTYPE,\n    ],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=1480,\n    serialized_end=1655,\n)\n\n_FILLERPARAMETER = _descriptor.Descriptor(\n    name=\'FillerParameter\',\n    full_name=\'caffe.FillerParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'type\',\n            full_name=\'caffe.FillerParameter.type\',\n            index=0,\n            number=1,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=True,\n            default_value=_b(""constant"").decode(\'utf-8\'),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'value\',\n                                    full_name=\'caffe.FillerParameter.value\',\n                                    index=1,\n                                    number=2,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(0),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'min\',\n                                    full_name=\'caffe.FillerParameter.min\',\n                                    index=2,\n                                    number=3,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(0),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'max\',\n                                    full_name=\'caffe.FillerParameter.max\',\n                                    index=3,\n                                    number=4,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(1),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'mean\',\n                                    full_name=\'caffe.FillerParameter.mean\',\n                                    index=4,\n                                    number=5,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(0),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'std\',\n                                    full_name=\'caffe.FillerParameter.std\',\n                                    index=5,\n                                    number=6,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(1),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'sparse\',\n                                    full_name=\'caffe.FillerParameter.sparse\',\n                                    index=6,\n                                    number=7,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=-1,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'variance_norm\',\n            full_name=\'caffe.FillerParameter.variance_norm\',\n            index=7,\n            number=8,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[\n        _FILLERPARAMETER_VARIANCENORM,\n    ],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=1658,\n    serialized_end=1924,\n)\n\n_NETPARAMETER = _descriptor.Descriptor(\n    name=\'NetParameter\',\n    full_name=\'caffe.NetParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'name\',\n                                    full_name=\'caffe.NetParameter.name\',\n                                    index=0,\n                                    number=1,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=_b("""").decode(\'utf-8\'),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'input\',\n                                    full_name=\'caffe.NetParameter.input\',\n                                    index=1,\n                                    number=3,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'input_shape\',\n                                    full_name=\'caffe.NetParameter.input_shape\',\n                                    index=2,\n                                    number=8,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'input_dim\',\n                                    full_name=\'caffe.NetParameter.input_dim\',\n                                    index=3,\n                                    number=4,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'force_backward\',\n            full_name=\'caffe.NetParameter.force_backward\',\n            index=4,\n            number=5,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'state\',\n                                    full_name=\'caffe.NetParameter.state\',\n                                    index=5,\n                                    number=6,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=None,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'debug_info\',\n                                    full_name=\'caffe.NetParameter.debug_info\',\n                                    index=6,\n                                    number=7,\n                                    type=8,\n                                    cpp_type=7,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=False,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'layer\',\n                                    full_name=\'caffe.NetParameter.layer\',\n                                    index=7,\n                                    number=100,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'layers\',\n                                    full_name=\'caffe.NetParameter.layers\',\n                                    index=8,\n                                    number=2,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=1927,\n    serialized_end=2197,\n)\n\n_SOLVERPARAMETER = _descriptor.Descriptor(\n    name=\'SolverParameter\',\n    full_name=\'caffe.SolverParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'net\',\n                                    full_name=\'caffe.SolverParameter.net\',\n                                    index=0,\n                                    number=24,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=_b("""").decode(\'utf-8\'),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'net_param\',\n                                    full_name=\'caffe.SolverParameter.net_param\',\n                                    index=1,\n                                    number=25,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=None,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'train_net\',\n                                    full_name=\'caffe.SolverParameter.train_net\',\n                                    index=2,\n                                    number=1,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=_b("""").decode(\'utf-8\'),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'test_net\',\n                                    full_name=\'caffe.SolverParameter.test_net\',\n                                    index=3,\n                                    number=2,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'train_net_param\',\n            full_name=\'caffe.SolverParameter.train_net_param\',\n            index=4,\n            number=21,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'test_net_param\',\n            full_name=\'caffe.SolverParameter.test_net_param\',\n            index=5,\n            number=22,\n            type=11,\n            cpp_type=10,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'train_state\',\n            full_name=\'caffe.SolverParameter.train_state\',\n            index=6,\n            number=26,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'test_state\',\n            full_name=\'caffe.SolverParameter.test_state\',\n            index=7,\n            number=27,\n            type=11,\n            cpp_type=10,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'eval_type\',\n            full_name=\'caffe.SolverParameter.eval_type\',\n            index=8,\n            number=41,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=True,\n            default_value=_b(""classification"").decode(\'utf-8\'),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'ap_version\',\n            full_name=\'caffe.SolverParameter.ap_version\',\n            index=9,\n            number=42,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=True,\n            default_value=_b(""Integral"").decode(\'utf-8\'),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'show_per_class_result\',\n            full_name=\'caffe.SolverParameter.show_per_class_result\',\n            index=10,\n            number=44,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'test_iter\',\n                                    full_name=\'caffe.SolverParameter.test_iter\',\n                                    index=11,\n                                    number=3,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'test_interval\',\n            full_name=\'caffe.SolverParameter.test_interval\',\n            index=12,\n            number=4,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'test_compute_loss\',\n            full_name=\'caffe.SolverParameter.test_compute_loss\',\n            index=13,\n            number=19,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'test_initialization\',\n            full_name=\'caffe.SolverParameter.test_initialization\',\n            index=14,\n            number=32,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=True,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'base_lr\',\n                                    full_name=\'caffe.SolverParameter.base_lr\',\n                                    index=15,\n                                    number=5,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=float(0),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'display\',\n                                    full_name=\'caffe.SolverParameter.display\',\n                                    index=16,\n                                    number=6,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'average_loss\',\n            full_name=\'caffe.SolverParameter.average_loss\',\n            index=17,\n            number=33,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'max_iter\',\n                                    full_name=\'caffe.SolverParameter.max_iter\',\n                                    index=18,\n                                    number=7,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'iter_size\',\n                                    full_name=\'caffe.SolverParameter.iter_size\',\n                                    index=19,\n                                    number=36,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=1,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'lr_policy\',\n                                    full_name=\'caffe.SolverParameter.lr_policy\',\n                                    index=20,\n                                    number=8,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=_b("""").decode(\'utf-8\'),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'gamma\',\n                                    full_name=\'caffe.SolverParameter.gamma\',\n                                    index=21,\n                                    number=9,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=float(0),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'power\',\n                                    full_name=\'caffe.SolverParameter.power\',\n                                    index=22,\n                                    number=10,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=float(0),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'momentum\',\n                                    full_name=\'caffe.SolverParameter.momentum\',\n                                    index=23,\n                                    number=11,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=float(0),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'weight_decay\',\n            full_name=\'caffe.SolverParameter.weight_decay\',\n            index=24,\n            number=12,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=False,\n            default_value=float(0),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'regularization_type\',\n            full_name=\'caffe.SolverParameter.regularization_type\',\n            index=25,\n            number=29,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=True,\n            default_value=_b(""L2"").decode(\'utf-8\'),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'stepsize\',\n                                    full_name=\'caffe.SolverParameter.stepsize\',\n                                    index=26,\n                                    number=13,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'stepvalue\',\n                                    full_name=\'caffe.SolverParameter.stepvalue\',\n                                    index=27,\n                                    number=34,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'plateau_winsize\',\n            full_name=\'caffe.SolverParameter.plateau_winsize\',\n            index=28,\n            number=43,\n            type=5,\n            cpp_type=1,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'clip_gradients\',\n            full_name=\'caffe.SolverParameter.clip_gradients\',\n            index=29,\n            number=35,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(-1),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'snapshot\',\n                                    full_name=\'caffe.SolverParameter.snapshot\',\n                                    index=30,\n                                    number=14,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'snapshot_prefix\',\n            full_name=\'caffe.SolverParameter.snapshot_prefix\',\n            index=31,\n            number=15,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(\'utf-8\'),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'snapshot_diff\',\n            full_name=\'caffe.SolverParameter.snapshot_diff\',\n            index=32,\n            number=16,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'snapshot_format\',\n            full_name=\'caffe.SolverParameter.snapshot_format\',\n            index=33,\n            number=37,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'solver_mode\',\n            full_name=\'caffe.SolverParameter.solver_mode\',\n            index=34,\n            number=17,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'device_id\',\n                                    full_name=\'caffe.SolverParameter.device_id\',\n                                    index=35,\n                                    number=18,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'random_seed\',\n            full_name=\'caffe.SolverParameter.random_seed\',\n            index=36,\n            number=20,\n            type=3,\n            cpp_type=2,\n            label=1,\n            has_default_value=True,\n            default_value=-1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'type\',\n                                    full_name=\'caffe.SolverParameter.type\',\n                                    index=37,\n                                    number=40,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=_b(""SGD"").decode(\'utf-8\'),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'delta\',\n                                    full_name=\'caffe.SolverParameter.delta\',\n                                    index=38,\n                                    number=31,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(1e-08),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'momentum2\',\n                                    full_name=\'caffe.SolverParameter.momentum2\',\n                                    index=39,\n                                    number=39,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(0.999),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'rms_decay\',\n                                    full_name=\'caffe.SolverParameter.rms_decay\',\n                                    index=40,\n                                    number=38,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(0.99),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'debug_info\',\n            full_name=\'caffe.SolverParameter.debug_info\',\n            index=41,\n            number=23,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'snapshot_after_train\',\n            full_name=\'caffe.SolverParameter.snapshot_after_train\',\n            index=42,\n            number=28,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=True,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'solver_type\',\n            full_name=\'caffe.SolverParameter.solver_type\',\n            index=43,\n            number=30,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[\n        _SOLVERPARAMETER_SNAPSHOTFORMAT,\n        _SOLVERPARAMETER_SOLVERMODE,\n        _SOLVERPARAMETER_SOLVERTYPE,\n    ],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=2200,\n    serialized_end=3642,\n)\n\n_SOLVERSTATE = _descriptor.Descriptor(\n    name=\'SolverState\',\n    full_name=\'caffe.SolverState\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'iter\',\n                                    full_name=\'caffe.SolverState.iter\',\n                                    index=0,\n                                    number=1,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'learned_net\',\n                                    full_name=\'caffe.SolverState.learned_net\',\n                                    index=1,\n                                    number=2,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=_b("""").decode(\'utf-8\'),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'history\',\n                                    full_name=\'caffe.SolverState.history\',\n                                    index=2,\n                                    number=3,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'current_step\',\n                                    full_name=\'caffe.SolverState.current_step\',\n                                    index=3,\n                                    number=4,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'minimum_loss\',\n                                    full_name=\'caffe.SolverState.minimum_loss\',\n                                    index=4,\n                                    number=5,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(1e+38),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'iter_last_event\',\n            full_name=\'caffe.SolverState.iter_last_event\',\n            index=5,\n            number=6,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=3645,\n    serialized_end=3810,\n)\n\n_NETSTATE = _descriptor.Descriptor(\n    name=\'NetState\',\n    full_name=\'caffe.NetState\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'phase\',\n                                    full_name=\'caffe.NetState.phase\',\n                                    index=0,\n                                    number=1,\n                                    type=14,\n                                    cpp_type=8,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=1,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'level\',\n                                    full_name=\'caffe.NetState.level\',\n                                    index=1,\n                                    number=2,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'stage\',\n                                    full_name=\'caffe.NetState.stage\',\n                                    index=2,\n                                    number=3,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=3812,\n    serialized_end=3890,\n)\n\n_NETSTATERULE = _descriptor.Descriptor(\n    name=\'NetStateRule\',\n    full_name=\'caffe.NetStateRule\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'phase\',\n                                    full_name=\'caffe.NetStateRule.phase\',\n                                    index=0,\n                                    number=1,\n                                    type=14,\n                                    cpp_type=8,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'min_level\',\n                                    full_name=\'caffe.NetStateRule.min_level\',\n                                    index=1,\n                                    number=2,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'max_level\',\n                                    full_name=\'caffe.NetStateRule.max_level\',\n                                    index=2,\n                                    number=3,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'stage\',\n                                    full_name=\'caffe.NetStateRule.stage\',\n                                    index=3,\n                                    number=4,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'not_stage\',\n                                    full_name=\'caffe.NetStateRule.not_stage\',\n                                    index=4,\n                                    number=5,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=3892,\n    serialized_end=4007,\n)\n\n_PARAMSPEC = _descriptor.Descriptor(\n    name=\'ParamSpec\',\n    full_name=\'caffe.ParamSpec\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'name\',\n                                    full_name=\'caffe.ParamSpec.name\',\n                                    index=0,\n                                    number=1,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=_b("""").decode(\'utf-8\'),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'share_mode\',\n                                    full_name=\'caffe.ParamSpec.share_mode\',\n                                    index=1,\n                                    number=2,\n                                    type=14,\n                                    cpp_type=8,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'lr_mult\',\n                                    full_name=\'caffe.ParamSpec.lr_mult\',\n                                    index=2,\n                                    number=3,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(1),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'decay_mult\',\n                                    full_name=\'caffe.ParamSpec.decay_mult\',\n                                    index=3,\n                                    number=4,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(1),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[\n        _PARAMSPEC_DIMCHECKMODE,\n    ],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=4010,\n    serialized_end=4173,\n)\n\n_LAYERPARAMETER = _descriptor.Descriptor(\n    name=\'LayerParameter\',\n    full_name=\'caffe.LayerParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'name\',\n                                    full_name=\'caffe.LayerParameter.name\',\n                                    index=0,\n                                    number=1,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=_b("""").decode(\'utf-8\'),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'type\',\n                                    full_name=\'caffe.LayerParameter.type\',\n                                    index=1,\n                                    number=2,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=_b("""").decode(\'utf-8\'),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'bottom\',\n                                    full_name=\'caffe.LayerParameter.bottom\',\n                                    index=2,\n                                    number=3,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'top\',\n                                    full_name=\'caffe.LayerParameter.top\',\n                                    index=3,\n                                    number=4,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'phase\',\n                                    full_name=\'caffe.LayerParameter.phase\',\n                                    index=4,\n                                    number=10,\n                                    type=14,\n                                    cpp_type=8,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'loss_weight\',\n            full_name=\'caffe.LayerParameter.loss_weight\',\n            index=5,\n            number=5,\n            type=2,\n            cpp_type=6,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'param\',\n                                    full_name=\'caffe.LayerParameter.param\',\n                                    index=6,\n                                    number=6,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'blobs\',\n                                    full_name=\'caffe.LayerParameter.blobs\',\n                                    index=7,\n                                    number=7,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'propagate_down\',\n            full_name=\'caffe.LayerParameter.propagate_down\',\n            index=8,\n            number=11,\n            type=8,\n            cpp_type=7,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'include\',\n                                    full_name=\'caffe.LayerParameter.include\',\n                                    index=9,\n                                    number=8,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'exclude\',\n                                    full_name=\'caffe.LayerParameter.exclude\',\n                                    index=10,\n                                    number=9,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'transform_param\',\n            full_name=\'caffe.LayerParameter.transform_param\',\n            index=11,\n            number=100,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'loss_param\',\n                                    full_name=\'caffe.LayerParameter.loss_param\',\n                                    index=12,\n                                    number=101,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=None,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'accuracy_param\',\n            full_name=\'caffe.LayerParameter.accuracy_param\',\n            index=13,\n            number=102,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'annotated_data_param\',\n            full_name=\'caffe.LayerParameter.annotated_data_param\',\n            index=14,\n            number=200,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'argmax_param\',\n            full_name=\'caffe.LayerParameter.argmax_param\',\n            index=15,\n            number=103,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'batch_norm_param\',\n            full_name=\'caffe.LayerParameter.batch_norm_param\',\n            index=16,\n            number=139,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'bias_param\',\n                                    full_name=\'caffe.LayerParameter.bias_param\',\n                                    index=17,\n                                    number=141,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=None,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'concat_param\',\n            full_name=\'caffe.LayerParameter.concat_param\',\n            index=18,\n            number=104,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'contrastive_loss_param\',\n            full_name=\'caffe.LayerParameter.contrastive_loss_param\',\n            index=19,\n            number=105,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'convolution_param\',\n            full_name=\'caffe.LayerParameter.convolution_param\',\n            index=20,\n            number=106,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'crop_param\',\n                                    full_name=\'caffe.LayerParameter.crop_param\',\n                                    index=21,\n                                    number=144,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=None,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'data_param\',\n                                    full_name=\'caffe.LayerParameter.data_param\',\n                                    index=22,\n                                    number=107,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=None,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'detection_evaluate_param\',\n            full_name=\'caffe.LayerParameter.detection_evaluate_param\',\n            index=23,\n            number=205,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'detection_output_param\',\n            full_name=\'caffe.LayerParameter.detection_output_param\',\n            index=24,\n            number=204,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'dropout_param\',\n            full_name=\'caffe.LayerParameter.dropout_param\',\n            index=25,\n            number=108,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'dummy_data_param\',\n            full_name=\'caffe.LayerParameter.dummy_data_param\',\n            index=26,\n            number=109,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'eltwise_param\',\n            full_name=\'caffe.LayerParameter.eltwise_param\',\n            index=27,\n            number=110,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'elu_param\',\n                                    full_name=\'caffe.LayerParameter.elu_param\',\n                                    index=28,\n                                    number=140,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=None,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'embed_param\',\n            full_name=\'caffe.LayerParameter.embed_param\',\n            index=29,\n            number=137,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'exp_param\',\n                                    full_name=\'caffe.LayerParameter.exp_param\',\n                                    index=30,\n                                    number=111,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=None,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'flatten_param\',\n            full_name=\'caffe.LayerParameter.flatten_param\',\n            index=31,\n            number=135,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'hdf5_data_param\',\n            full_name=\'caffe.LayerParameter.hdf5_data_param\',\n            index=32,\n            number=112,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'hdf5_output_param\',\n            full_name=\'caffe.LayerParameter.hdf5_output_param\',\n            index=33,\n            number=113,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'hinge_loss_param\',\n            full_name=\'caffe.LayerParameter.hinge_loss_param\',\n            index=34,\n            number=114,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'image_data_param\',\n            full_name=\'caffe.LayerParameter.image_data_param\',\n            index=35,\n            number=115,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'infogain_loss_param\',\n            full_name=\'caffe.LayerParameter.infogain_loss_param\',\n            index=36,\n            number=116,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'inner_product_param\',\n            full_name=\'caffe.LayerParameter.inner_product_param\',\n            index=37,\n            number=117,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'input_param\',\n            full_name=\'caffe.LayerParameter.input_param\',\n            index=38,\n            number=143,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'log_param\',\n                                    full_name=\'caffe.LayerParameter.log_param\',\n                                    index=39,\n                                    number=134,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=None,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'lrn_param\',\n                                    full_name=\'caffe.LayerParameter.lrn_param\',\n                                    index=40,\n                                    number=118,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=None,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'memory_data_param\',\n            full_name=\'caffe.LayerParameter.memory_data_param\',\n            index=41,\n            number=119,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'multibox_loss_param\',\n            full_name=\'caffe.LayerParameter.multibox_loss_param\',\n            index=42,\n            number=201,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'mvn_param\',\n                                    full_name=\'caffe.LayerParameter.mvn_param\',\n                                    index=43,\n                                    number=120,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=None,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'norm_param\',\n                                    full_name=\'caffe.LayerParameter.norm_param\',\n                                    index=44,\n                                    number=206,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=None,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'parameter_param\',\n            full_name=\'caffe.LayerParameter.parameter_param\',\n            index=45,\n            number=145,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'permute_param\',\n            full_name=\'caffe.LayerParameter.permute_param\',\n            index=46,\n            number=202,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'pooling_param\',\n            full_name=\'caffe.LayerParameter.pooling_param\',\n            index=47,\n            number=121,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'power_param\',\n            full_name=\'caffe.LayerParameter.power_param\',\n            index=48,\n            number=122,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'prelu_param\',\n            full_name=\'caffe.LayerParameter.prelu_param\',\n            index=49,\n            number=131,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'prior_box_param\',\n            full_name=\'caffe.LayerParameter.prior_box_param\',\n            index=50,\n            number=203,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'python_param\',\n            full_name=\'caffe.LayerParameter.python_param\',\n            index=51,\n            number=130,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'recurrent_param\',\n            full_name=\'caffe.LayerParameter.recurrent_param\',\n            index=52,\n            number=146,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'reduction_param\',\n            full_name=\'caffe.LayerParameter.reduction_param\',\n            index=53,\n            number=136,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'relu_param\',\n                                    full_name=\'caffe.LayerParameter.relu_param\',\n                                    index=54,\n                                    number=123,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=None,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'reshape_param\',\n            full_name=\'caffe.LayerParameter.reshape_param\',\n            index=55,\n            number=133,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'scale_param\',\n            full_name=\'caffe.LayerParameter.scale_param\',\n            index=56,\n            number=142,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'shuffle_channel_param\',\n            full_name=\'caffe.LayerParameter.shuffle_channel_param\',\n            index=57,\n            number=208,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'sigmoid_param\',\n            full_name=\'caffe.LayerParameter.sigmoid_param\',\n            index=58,\n            number=124,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'softmax_param\',\n            full_name=\'caffe.LayerParameter.softmax_param\',\n            index=59,\n            number=125,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'spp_param\',\n                                    full_name=\'caffe.LayerParameter.spp_param\',\n                                    index=60,\n                                    number=132,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=None,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'slice_param\',\n            full_name=\'caffe.LayerParameter.slice_param\',\n            index=61,\n            number=126,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'tanh_param\',\n                                    full_name=\'caffe.LayerParameter.tanh_param\',\n                                    index=62,\n                                    number=127,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=None,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'threshold_param\',\n            full_name=\'caffe.LayerParameter.threshold_param\',\n            index=63,\n            number=128,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'tile_param\',\n                                    full_name=\'caffe.LayerParameter.tile_param\',\n                                    index=64,\n                                    number=138,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=None,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'video_data_param\',\n            full_name=\'caffe.LayerParameter.video_data_param\',\n            index=65,\n            number=207,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'window_data_param\',\n            full_name=\'caffe.LayerParameter.window_data_param\',\n            index=66,\n            number=129,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=4176,\n    serialized_end=7263,\n)\n\n_TRANSFORMATIONPARAMETER = _descriptor.Descriptor(\n    name=\'TransformationParameter\',\n    full_name=\'caffe.TransformationParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'scale\',\n            full_name=\'caffe.TransformationParameter.scale\',\n            index=0,\n            number=1,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(1),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'mirror\',\n            full_name=\'caffe.TransformationParameter.mirror\',\n            index=1,\n            number=2,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'crop_size\',\n            full_name=\'caffe.TransformationParameter.crop_size\',\n            index=2,\n            number=3,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'crop_h\',\n            full_name=\'caffe.TransformationParameter.crop_h\',\n            index=3,\n            number=11,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'crop_w\',\n            full_name=\'caffe.TransformationParameter.crop_w\',\n            index=4,\n            number=12,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'mean_file\',\n            full_name=\'caffe.TransformationParameter.mean_file\',\n            index=5,\n            number=4,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(\'utf-8\'),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'mean_value\',\n            full_name=\'caffe.TransformationParameter.mean_value\',\n            index=6,\n            number=5,\n            type=2,\n            cpp_type=6,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'force_color\',\n            full_name=\'caffe.TransformationParameter.force_color\',\n            index=7,\n            number=6,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'force_gray\',\n            full_name=\'caffe.TransformationParameter.force_gray\',\n            index=8,\n            number=7,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'resize_param\',\n            full_name=\'caffe.TransformationParameter.resize_param\',\n            index=9,\n            number=8,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'noise_param\',\n            full_name=\'caffe.TransformationParameter.noise_param\',\n            index=10,\n            number=9,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'distort_param\',\n            full_name=\'caffe.TransformationParameter.distort_param\',\n            index=11,\n            number=13,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'expand_param\',\n            full_name=\'caffe.TransformationParameter.expand_param\',\n            index=12,\n            number=14,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'emit_constraint\',\n            full_name=\'caffe.TransformationParameter.emit_constraint\',\n            index=13,\n            number=10,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=7266,\n    serialized_end=7724,\n)\n\n_RESIZEPARAMETER = _descriptor.Descriptor(\n    name=\'ResizeParameter\',\n    full_name=\'caffe.ResizeParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'prob\',\n                                    full_name=\'caffe.ResizeParameter.prob\',\n                                    index=0,\n                                    number=1,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(1),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'resize_mode\',\n            full_name=\'caffe.ResizeParameter.resize_mode\',\n            index=1,\n            number=2,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'height\',\n                                    full_name=\'caffe.ResizeParameter.height\',\n                                    index=2,\n                                    number=3,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'width\',\n                                    full_name=\'caffe.ResizeParameter.width\',\n                                    index=3,\n                                    number=4,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'height_scale\',\n            full_name=\'caffe.ResizeParameter.height_scale\',\n            index=4,\n            number=8,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'width_scale\',\n            full_name=\'caffe.ResizeParameter.width_scale\',\n            index=5,\n            number=9,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'pad_mode\',\n                                    full_name=\'caffe.ResizeParameter.pad_mode\',\n                                    index=6,\n                                    number=5,\n                                    type=14,\n                                    cpp_type=8,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=1,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'pad_value\',\n                                    full_name=\'caffe.ResizeParameter.pad_value\',\n                                    index=7,\n                                    number=6,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'interp_mode\',\n            full_name=\'caffe.ResizeParameter.interp_mode\',\n            index=8,\n            number=7,\n            type=14,\n            cpp_type=8,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[\n        _RESIZEPARAMETER_RESIZE_MODE,\n        _RESIZEPARAMETER_PAD_MODE,\n        _RESIZEPARAMETER_INTERP_MODE,\n    ],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=7727,\n    serialized_end=8255,\n)\n\n_SALTPEPPERPARAMETER = _descriptor.Descriptor(\n    name=\'SaltPepperParameter\',\n    full_name=\'caffe.SaltPepperParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'fraction\',\n            full_name=\'caffe.SaltPepperParameter.fraction\',\n            index=0,\n            number=1,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(0),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'value\',\n                                    full_name=\'caffe.SaltPepperParameter.value\',\n                                    index=1,\n                                    number=2,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=8257,\n    serialized_end=8314,\n)\n\n_NOISEPARAMETER = _descriptor.Descriptor(\n    name=\'NoiseParameter\',\n    full_name=\'caffe.NoiseParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'prob\',\n                                    full_name=\'caffe.NoiseParameter.prob\',\n                                    index=0,\n                                    number=1,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(0),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'hist_eq\',\n                                    full_name=\'caffe.NoiseParameter.hist_eq\',\n                                    index=1,\n                                    number=2,\n                                    type=8,\n                                    cpp_type=7,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=False,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'inverse\',\n                                    full_name=\'caffe.NoiseParameter.inverse\',\n                                    index=2,\n                                    number=3,\n                                    type=8,\n                                    cpp_type=7,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=False,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'decolorize\',\n                                    full_name=\'caffe.NoiseParameter.decolorize\',\n                                    index=3,\n                                    number=4,\n                                    type=8,\n                                    cpp_type=7,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=False,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'gauss_blur\',\n                                    full_name=\'caffe.NoiseParameter.gauss_blur\',\n                                    index=4,\n                                    number=5,\n                                    type=8,\n                                    cpp_type=7,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=False,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'jpeg\',\n                                    full_name=\'caffe.NoiseParameter.jpeg\',\n                                    index=5,\n                                    number=6,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(-1),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'posterize\',\n                                    full_name=\'caffe.NoiseParameter.posterize\',\n                                    index=6,\n                                    number=7,\n                                    type=8,\n                                    cpp_type=7,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=False,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'erode\',\n                                    full_name=\'caffe.NoiseParameter.erode\',\n                                    index=7,\n                                    number=8,\n                                    type=8,\n                                    cpp_type=7,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=False,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'saltpepper\',\n                                    full_name=\'caffe.NoiseParameter.saltpepper\',\n                                    index=8,\n                                    number=9,\n                                    type=8,\n                                    cpp_type=7,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=False,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'saltpepper_param\',\n            full_name=\'caffe.NoiseParameter.saltpepper_param\',\n            index=9,\n            number=10,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'clahe\',\n                                    full_name=\'caffe.NoiseParameter.clahe\',\n                                    index=10,\n                                    number=11,\n                                    type=8,\n                                    cpp_type=7,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=False,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'convert_to_hsv\',\n            full_name=\'caffe.NoiseParameter.convert_to_hsv\',\n            index=11,\n            number=12,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'convert_to_lab\',\n            full_name=\'caffe.NoiseParameter.convert_to_lab\',\n            index=12,\n            number=13,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=8317,\n    serialized_end=8683,\n)\n\n_DISTORTIONPARAMETER = _descriptor.Descriptor(\n    name=\'DistortionParameter\',\n    full_name=\'caffe.DistortionParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'brightness_prob\',\n            full_name=\'caffe.DistortionParameter.brightness_prob\',\n            index=0,\n            number=1,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(0),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'brightness_delta\',\n            full_name=\'caffe.DistortionParameter.brightness_delta\',\n            index=1,\n            number=2,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(0),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'contrast_prob\',\n            full_name=\'caffe.DistortionParameter.contrast_prob\',\n            index=2,\n            number=3,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(0),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'contrast_lower\',\n            full_name=\'caffe.DistortionParameter.contrast_lower\',\n            index=3,\n            number=4,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(0),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'contrast_upper\',\n            full_name=\'caffe.DistortionParameter.contrast_upper\',\n            index=4,\n            number=5,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(0),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'hue_prob\',\n            full_name=\'caffe.DistortionParameter.hue_prob\',\n            index=5,\n            number=6,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(0),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'hue_delta\',\n            full_name=\'caffe.DistortionParameter.hue_delta\',\n            index=6,\n            number=7,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(0),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'saturation_prob\',\n            full_name=\'caffe.DistortionParameter.saturation_prob\',\n            index=7,\n            number=8,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(0),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'saturation_lower\',\n            full_name=\'caffe.DistortionParameter.saturation_lower\',\n            index=8,\n            number=9,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(0),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'saturation_upper\',\n            full_name=\'caffe.DistortionParameter.saturation_upper\',\n            index=9,\n            number=10,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(0),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'random_order_prob\',\n            full_name=\'caffe.DistortionParameter.random_order_prob\',\n            index=10,\n            number=11,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(0),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=8686,\n    serialized_end=9003,\n)\n\n_EXPANSIONPARAMETER = _descriptor.Descriptor(\n    name=\'ExpansionParameter\',\n    full_name=\'caffe.ExpansionParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'prob\',\n                                    full_name=\'caffe.ExpansionParameter.prob\',\n                                    index=0,\n                                    number=1,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(1),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'max_expand_ratio\',\n            full_name=\'caffe.ExpansionParameter.max_expand_ratio\',\n            index=1,\n            number=2,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(1),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=9005,\n    serialized_end=9071,\n)\n\n_LOSSPARAMETER = _descriptor.Descriptor(\n    name=\'LossParameter\',\n    full_name=\'caffe.LossParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'ignore_label\',\n            full_name=\'caffe.LossParameter.ignore_label\',\n            index=0,\n            number=1,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'normalization\',\n            full_name=\'caffe.LossParameter.normalization\',\n            index=1,\n            number=3,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'normalize\',\n                                    full_name=\'caffe.LossParameter.normalize\',\n                                    index=2,\n                                    number=2,\n                                    type=8,\n                                    cpp_type=7,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=False,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[\n        _LOSSPARAMETER_NORMALIZATIONMODE,\n    ],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=9074,\n    serialized_end=9268,\n)\n\n_ACCURACYPARAMETER = _descriptor.Descriptor(\n    name=\'AccuracyParameter\',\n    full_name=\'caffe.AccuracyParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'top_k\',\n                                    full_name=\'caffe.AccuracyParameter.top_k\',\n                                    index=0,\n                                    number=1,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=1,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'axis\',\n                                    full_name=\'caffe.AccuracyParameter.axis\',\n                                    index=1,\n                                    number=2,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=1,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'ignore_label\',\n            full_name=\'caffe.AccuracyParameter.ignore_label\',\n            index=2,\n            number=3,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=9270,\n    serialized_end=9346,\n)\n\n_ANNOTATEDDATAPARAMETER = _descriptor.Descriptor(\n    name=\'AnnotatedDataParameter\',\n    full_name=\'caffe.AnnotatedDataParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'batch_sampler\',\n            full_name=\'caffe.AnnotatedDataParameter.batch_sampler\',\n            index=0,\n            number=1,\n            type=11,\n            cpp_type=10,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'label_map_file\',\n            full_name=\'caffe.AnnotatedDataParameter.label_map_file\',\n            index=1,\n            number=2,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(\'utf-8\'),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'anno_type\',\n            full_name=\'caffe.AnnotatedDataParameter.anno_type\',\n            index=2,\n            number=3,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=9349,\n    serialized_end=9498,\n)\n\n_ARGMAXPARAMETER = _descriptor.Descriptor(\n    name=\'ArgMaxParameter\',\n    full_name=\'caffe.ArgMaxParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'out_max_val\',\n            full_name=\'caffe.ArgMaxParameter.out_max_val\',\n            index=0,\n            number=1,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'top_k\',\n                                    full_name=\'caffe.ArgMaxParameter.top_k\',\n                                    index=1,\n                                    number=2,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=1,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'axis\',\n                                    full_name=\'caffe.ArgMaxParameter.axis\',\n                                    index=2,\n                                    number=3,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=9500,\n    serialized_end=9577,\n)\n\n_CONCATPARAMETER = _descriptor.Descriptor(\n    name=\'ConcatParameter\',\n    full_name=\'caffe.ConcatParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'axis\',\n                                    full_name=\'caffe.ConcatParameter.axis\',\n                                    index=0,\n                                    number=2,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=1,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'concat_dim\',\n            full_name=\'caffe.ConcatParameter.concat_dim\',\n            index=1,\n            number=1,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=9579,\n    serialized_end=9636,\n)\n\n_BATCHNORMPARAMETER = _descriptor.Descriptor(\n    name=\'BatchNormParameter\',\n    full_name=\'caffe.BatchNormParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'use_global_stats\',\n            full_name=\'caffe.BatchNormParameter.use_global_stats\',\n            index=0,\n            number=1,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=False,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'moving_average_fraction\',\n            full_name=\'caffe.BatchNormParameter.moving_average_fraction\',\n            index=1,\n            number=2,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(0.999),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'eps\',\n                                    full_name=\'caffe.BatchNormParameter.eps\',\n                                    index=2,\n                                    number=3,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(1e-05),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=9638,\n    serialized_end=9744,\n)\n\n_BIASPARAMETER = _descriptor.Descriptor(\n    name=\'BiasParameter\',\n    full_name=\'caffe.BiasParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'axis\',\n                                    full_name=\'caffe.BiasParameter.axis\',\n                                    index=0,\n                                    number=1,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=1,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'num_axes\',\n                                    full_name=\'caffe.BiasParameter.num_axes\',\n                                    index=1,\n                                    number=2,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=1,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'filler\',\n                                    full_name=\'caffe.BiasParameter.filler\',\n                                    index=2,\n                                    number=3,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=None,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=9746,\n    serialized_end=9839,\n)\n\n_CONTRASTIVELOSSPARAMETER = _descriptor.Descriptor(\n    name=\'ContrastiveLossParameter\',\n    full_name=\'caffe.ContrastiveLossParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'margin\',\n            full_name=\'caffe.ContrastiveLossParameter.margin\',\n            index=0,\n            number=1,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(1),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'legacy_version\',\n            full_name=\'caffe.ContrastiveLossParameter.legacy_version\',\n            index=1,\n            number=2,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=9841,\n    serialized_end=9917,\n)\n\n_CONVOLUTIONPARAMETER = _descriptor.Descriptor(\n    name=\'ConvolutionParameter\',\n    full_name=\'caffe.ConvolutionParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'num_output\',\n            full_name=\'caffe.ConvolutionParameter.num_output\',\n            index=0,\n            number=1,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'bias_term\',\n            full_name=\'caffe.ConvolutionParameter.bias_term\',\n            index=1,\n            number=2,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=True,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'pad\',\n                                    full_name=\'caffe.ConvolutionParameter.pad\',\n                                    index=2,\n                                    number=3,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'kernel_size\',\n            full_name=\'caffe.ConvolutionParameter.kernel_size\',\n            index=3,\n            number=4,\n            type=13,\n            cpp_type=3,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'stride\',\n            full_name=\'caffe.ConvolutionParameter.stride\',\n            index=4,\n            number=6,\n            type=13,\n            cpp_type=3,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'dilation\',\n            full_name=\'caffe.ConvolutionParameter.dilation\',\n            index=5,\n            number=18,\n            type=13,\n            cpp_type=3,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'pad_h\',\n            full_name=\'caffe.ConvolutionParameter.pad_h\',\n            index=6,\n            number=9,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'pad_w\',\n            full_name=\'caffe.ConvolutionParameter.pad_w\',\n            index=7,\n            number=10,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'kernel_h\',\n            full_name=\'caffe.ConvolutionParameter.kernel_h\',\n            index=8,\n            number=11,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'kernel_w\',\n            full_name=\'caffe.ConvolutionParameter.kernel_w\',\n            index=9,\n            number=12,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'stride_h\',\n            full_name=\'caffe.ConvolutionParameter.stride_h\',\n            index=10,\n            number=13,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'stride_w\',\n            full_name=\'caffe.ConvolutionParameter.stride_w\',\n            index=11,\n            number=14,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'group\',\n            full_name=\'caffe.ConvolutionParameter.group\',\n            index=12,\n            number=5,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'weight_filler\',\n            full_name=\'caffe.ConvolutionParameter.weight_filler\',\n            index=13,\n            number=7,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'bias_filler\',\n            full_name=\'caffe.ConvolutionParameter.bias_filler\',\n            index=14,\n            number=8,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'engine\',\n            full_name=\'caffe.ConvolutionParameter.engine\',\n            index=15,\n            number=15,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'axis\',\n                                    full_name=\'caffe.ConvolutionParameter.axis\',\n                                    index=16,\n                                    number=16,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=1,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'force_nd_im2col\',\n            full_name=\'caffe.ConvolutionParameter.force_nd_im2col\',\n            index=17,\n            number=17,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[\n        _CONVOLUTIONPARAMETER_ENGINE,\n    ],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=9920,\n    serialized_end=10428,\n)\n\n_CROPPARAMETER = _descriptor.Descriptor(\n    name=\'CropParameter\',\n    full_name=\'caffe.CropParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'axis\',\n                                    full_name=\'caffe.CropParameter.axis\',\n                                    index=0,\n                                    number=1,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=2,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'offset\',\n                                    full_name=\'caffe.CropParameter.offset\',\n                                    index=1,\n                                    number=2,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=10430,\n    serialized_end=10478,\n)\n\n_DATAPARAMETER = _descriptor.Descriptor(\n    name=\'DataParameter\',\n    full_name=\'caffe.DataParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'source\',\n                                    full_name=\'caffe.DataParameter.source\',\n                                    index=0,\n                                    number=1,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=_b("""").decode(\'utf-8\'),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'batch_size\',\n                                    full_name=\'caffe.DataParameter.batch_size\',\n                                    index=1,\n                                    number=4,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'rand_skip\',\n                                    full_name=\'caffe.DataParameter.rand_skip\',\n                                    index=2,\n                                    number=7,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'backend\',\n                                    full_name=\'caffe.DataParameter.backend\',\n                                    index=3,\n                                    number=8,\n                                    type=14,\n                                    cpp_type=8,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'scale\',\n                                    full_name=\'caffe.DataParameter.scale\',\n                                    index=4,\n                                    number=2,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(1),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'mean_file\',\n                                    full_name=\'caffe.DataParameter.mean_file\',\n                                    index=5,\n                                    number=3,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=_b("""").decode(\'utf-8\'),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'crop_size\',\n                                    full_name=\'caffe.DataParameter.crop_size\',\n                                    index=6,\n                                    number=5,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'mirror\',\n                                    full_name=\'caffe.DataParameter.mirror\',\n                                    index=7,\n                                    number=6,\n                                    type=8,\n                                    cpp_type=7,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=False,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'force_encoded_color\',\n            full_name=\'caffe.DataParameter.force_encoded_color\',\n            index=8,\n            number=9,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'prefetch\',\n                                    full_name=\'caffe.DataParameter.prefetch\',\n                                    index=9,\n                                    number=10,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=4,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[\n        _DATAPARAMETER_DB,\n    ],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=10481,\n    serialized_end=10773,\n)\n\n_DETECTIONEVALUATEPARAMETER = _descriptor.Descriptor(\n    name=\'DetectionEvaluateParameter\',\n    full_name=\'caffe.DetectionEvaluateParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'num_classes\',\n            full_name=\'caffe.DetectionEvaluateParameter.num_classes\',\n            index=0,\n            number=1,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'background_label_id\',\n            full_name=\'caffe.DetectionEvaluateParameter.background_label_id\',\n            index=1,\n            number=2,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'overlap_threshold\',\n            full_name=\'caffe.DetectionEvaluateParameter.overlap_threshold\',\n            index=2,\n            number=3,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(0.5),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'evaluate_difficult_gt\',\n            full_name=\'caffe.DetectionEvaluateParameter.evaluate_difficult_gt\',\n            index=3,\n            number=4,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=True,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'name_size_file\',\n            full_name=\'caffe.DetectionEvaluateParameter.name_size_file\',\n            index=4,\n            number=5,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(\'utf-8\'),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'resize_param\',\n            full_name=\'caffe.DetectionEvaluateParameter.resize_param\',\n            index=5,\n            number=6,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=10776,\n    serialized_end=10996,\n)\n\n_NONMAXIMUMSUPPRESSIONPARAMETER = _descriptor.Descriptor(\n    name=\'NonMaximumSuppressionParameter\',\n    full_name=\'caffe.NonMaximumSuppressionParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'nms_threshold\',\n            full_name=\'caffe.NonMaximumSuppressionParameter.nms_threshold\',\n            index=0,\n            number=1,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(0.3),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'top_k\',\n            full_name=\'caffe.NonMaximumSuppressionParameter.top_k\',\n            index=1,\n            number=2,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'eta\',\n            full_name=\'caffe.NonMaximumSuppressionParameter.eta\',\n            index=2,\n            number=3,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(1),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=10998,\n    serialized_end=11089,\n)\n\n_SAVEOUTPUTPARAMETER = _descriptor.Descriptor(\n    name=\'SaveOutputParameter\',\n    full_name=\'caffe.SaveOutputParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'output_directory\',\n            full_name=\'caffe.SaveOutputParameter.output_directory\',\n            index=0,\n            number=1,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(\'utf-8\'),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'output_name_prefix\',\n            full_name=\'caffe.SaveOutputParameter.output_name_prefix\',\n            index=1,\n            number=2,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(\'utf-8\'),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'output_format\',\n            full_name=\'caffe.SaveOutputParameter.output_format\',\n            index=2,\n            number=3,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(\'utf-8\'),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'label_map_file\',\n            full_name=\'caffe.SaveOutputParameter.label_map_file\',\n            index=3,\n            number=4,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(\'utf-8\'),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'name_size_file\',\n            full_name=\'caffe.SaveOutputParameter.name_size_file\',\n            index=4,\n            number=5,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(\'utf-8\'),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'num_test_image\',\n            full_name=\'caffe.SaveOutputParameter.num_test_image\',\n            index=5,\n            number=6,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'resize_param\',\n            full_name=\'caffe.SaveOutputParameter.resize_param\',\n            index=6,\n            number=7,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=11092,\n    serialized_end=11308,\n)\n\n_DETECTIONOUTPUTPARAMETER = _descriptor.Descriptor(\n    name=\'DetectionOutputParameter\',\n    full_name=\'caffe.DetectionOutputParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'num_classes\',\n            full_name=\'caffe.DetectionOutputParameter.num_classes\',\n            index=0,\n            number=1,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'share_location\',\n            full_name=\'caffe.DetectionOutputParameter.share_location\',\n            index=1,\n            number=2,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=True,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'background_label_id\',\n            full_name=\'caffe.DetectionOutputParameter.background_label_id\',\n            index=2,\n            number=3,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'nms_param\',\n            full_name=\'caffe.DetectionOutputParameter.nms_param\',\n            index=3,\n            number=4,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'save_output_param\',\n            full_name=\'caffe.DetectionOutputParameter.save_output_param\',\n            index=4,\n            number=5,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'code_type\',\n            full_name=\'caffe.DetectionOutputParameter.code_type\',\n            index=5,\n            number=6,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'variance_encoded_in_target\',\n            full_name=\n            \'caffe.DetectionOutputParameter.variance_encoded_in_target\',\n            index=6,\n            number=8,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'keep_top_k\',\n            full_name=\'caffe.DetectionOutputParameter.keep_top_k\',\n            index=7,\n            number=7,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=-1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'confidence_threshold\',\n            full_name=\'caffe.DetectionOutputParameter.confidence_threshold\',\n            index=8,\n            number=9,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=False,\n            default_value=float(0),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'visualize\',\n            full_name=\'caffe.DetectionOutputParameter.visualize\',\n            index=9,\n            number=10,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'visualize_threshold\',\n            full_name=\'caffe.DetectionOutputParameter.visualize_threshold\',\n            index=10,\n            number=11,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=False,\n            default_value=float(0),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'save_file\',\n            full_name=\'caffe.DetectionOutputParameter.save_file\',\n            index=11,\n            number=12,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(\'utf-8\'),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=11311,\n    serialized_end=11766,\n)\n\n_DROPOUTPARAMETER = _descriptor.Descriptor(\n    name=\'DropoutParameter\',\n    full_name=\'caffe.DropoutParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'dropout_ratio\',\n            full_name=\'caffe.DropoutParameter.dropout_ratio\',\n            index=0,\n            number=1,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(0.5),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=11768,\n    serialized_end=11814,\n)\n\n_DUMMYDATAPARAMETER = _descriptor.Descriptor(\n    name=\'DummyDataParameter\',\n    full_name=\'caffe.DummyDataParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'data_filler\',\n            full_name=\'caffe.DummyDataParameter.data_filler\',\n            index=0,\n            number=1,\n            type=11,\n            cpp_type=10,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'shape\',\n                                    full_name=\'caffe.DummyDataParameter.shape\',\n                                    index=1,\n                                    number=6,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'num\',\n                                    full_name=\'caffe.DummyDataParameter.num\',\n                                    index=2,\n                                    number=2,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'channels\',\n            full_name=\'caffe.DummyDataParameter.channels\',\n            index=3,\n            number=3,\n            type=13,\n            cpp_type=3,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'height\',\n                                    full_name=\'caffe.DummyDataParameter.height\',\n                                    index=4,\n                                    number=4,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'width\',\n                                    full_name=\'caffe.DummyDataParameter.width\',\n                                    index=5,\n                                    number=5,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=11817,\n    serialized_end=11977,\n)\n\n_ELTWISEPARAMETER = _descriptor.Descriptor(\n    name=\'EltwiseParameter\',\n    full_name=\'caffe.EltwiseParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'operation\',\n            full_name=\'caffe.EltwiseParameter.operation\',\n            index=0,\n            number=1,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'coeff\',\n                                    full_name=\'caffe.EltwiseParameter.coeff\',\n                                    index=1,\n                                    number=2,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'stable_prod_grad\',\n            full_name=\'caffe.EltwiseParameter.stable_prod_grad\',\n            index=2,\n            number=3,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=True,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[\n        _ELTWISEPARAMETER_ELTWISEOP,\n    ],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=11980,\n    serialized_end=12145,\n)\n\n_ELUPARAMETER = _descriptor.Descriptor(\n    name=\'ELUParameter\',\n    full_name=\'caffe.ELUParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'alpha\',\n                                    full_name=\'caffe.ELUParameter.alpha\',\n                                    index=0,\n                                    number=1,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(1),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=12147,\n    serialized_end=12179,\n)\n\n_EMBEDPARAMETER = _descriptor.Descriptor(\n    name=\'EmbedParameter\',\n    full_name=\'caffe.EmbedParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'num_output\',\n                                    full_name=\'caffe.EmbedParameter.num_output\',\n                                    index=0,\n                                    number=1,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'input_dim\',\n                                    full_name=\'caffe.EmbedParameter.input_dim\',\n                                    index=1,\n                                    number=2,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'bias_term\',\n                                    full_name=\'caffe.EmbedParameter.bias_term\',\n                                    index=2,\n                                    number=3,\n                                    type=8,\n                                    cpp_type=7,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=True,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'weight_filler\',\n            full_name=\'caffe.EmbedParameter.weight_filler\',\n            index=3,\n            number=4,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'bias_filler\',\n            full_name=\'caffe.EmbedParameter.bias_filler\',\n            index=4,\n            number=5,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=12182,\n    serialized_end=12354,\n)\n\n_EXPPARAMETER = _descriptor.Descriptor(\n    name=\'ExpParameter\',\n    full_name=\'caffe.ExpParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'base\',\n                                    full_name=\'caffe.ExpParameter.base\',\n                                    index=0,\n                                    number=1,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(-1),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'scale\',\n                                    full_name=\'caffe.ExpParameter.scale\',\n                                    index=1,\n                                    number=2,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(1),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'shift\',\n                                    full_name=\'caffe.ExpParameter.shift\',\n                                    index=2,\n                                    number=3,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(0),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=12356,\n    serialized_end=12424,\n)\n\n_FLATTENPARAMETER = _descriptor.Descriptor(\n    name=\'FlattenParameter\',\n    full_name=\'caffe.FlattenParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'axis\',\n                                    full_name=\'caffe.FlattenParameter.axis\',\n                                    index=0,\n                                    number=1,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=1,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'end_axis\',\n                                    full_name=\'caffe.FlattenParameter.end_axis\',\n                                    index=1,\n                                    number=2,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=-1,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=12426,\n    serialized_end=12483,\n)\n\n_HDF5DATAPARAMETER = _descriptor.Descriptor(\n    name=\'HDF5DataParameter\',\n    full_name=\'caffe.HDF5DataParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'source\',\n                                    full_name=\'caffe.HDF5DataParameter.source\',\n                                    index=0,\n                                    number=1,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=_b("""").decode(\'utf-8\'),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'batch_size\',\n            full_name=\'caffe.HDF5DataParameter.batch_size\',\n            index=1,\n            number=2,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'shuffle\',\n                                    full_name=\'caffe.HDF5DataParameter.shuffle\',\n                                    index=2,\n                                    number=3,\n                                    type=8,\n                                    cpp_type=7,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=False,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=12485,\n    serialized_end=12564,\n)\n\n_HDF5OUTPUTPARAMETER = _descriptor.Descriptor(\n    name=\'HDF5OutputParameter\',\n    full_name=\'caffe.HDF5OutputParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'file_name\',\n            full_name=\'caffe.HDF5OutputParameter.file_name\',\n            index=0,\n            number=1,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(\'utf-8\'),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=12566,\n    serialized_end=12606,\n)\n\n_HINGELOSSPARAMETER = _descriptor.Descriptor(\n    name=\'HingeLossParameter\',\n    full_name=\'caffe.HingeLossParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'norm\',\n                                    full_name=\'caffe.HingeLossParameter.norm\',\n                                    index=0,\n                                    number=1,\n                                    type=14,\n                                    cpp_type=8,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=1,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[\n        _HINGELOSSPARAMETER_NORM,\n    ],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=12608,\n    serialized_end=12702,\n)\n\n_IMAGEDATAPARAMETER = _descriptor.Descriptor(\n    name=\'ImageDataParameter\',\n    full_name=\'caffe.ImageDataParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'source\',\n                                    full_name=\'caffe.ImageDataParameter.source\',\n                                    index=0,\n                                    number=1,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=_b("""").decode(\'utf-8\'),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'batch_size\',\n            full_name=\'caffe.ImageDataParameter.batch_size\',\n            index=1,\n            number=4,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'rand_skip\',\n            full_name=\'caffe.ImageDataParameter.rand_skip\',\n            index=2,\n            number=7,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'shuffle\',\n            full_name=\'caffe.ImageDataParameter.shuffle\',\n            index=3,\n            number=8,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'new_height\',\n            full_name=\'caffe.ImageDataParameter.new_height\',\n            index=4,\n            number=9,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'new_width\',\n            full_name=\'caffe.ImageDataParameter.new_width\',\n            index=5,\n            number=10,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'is_color\',\n            full_name=\'caffe.ImageDataParameter.is_color\',\n            index=6,\n            number=11,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=True,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'scale\',\n                                    full_name=\'caffe.ImageDataParameter.scale\',\n                                    index=7,\n                                    number=2,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(1),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'mean_file\',\n            full_name=\'caffe.ImageDataParameter.mean_file\',\n            index=8,\n            number=3,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(\'utf-8\'),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'crop_size\',\n            full_name=\'caffe.ImageDataParameter.crop_size\',\n            index=9,\n            number=5,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'mirror\',\n                                    full_name=\'caffe.ImageDataParameter.mirror\',\n                                    index=10,\n                                    number=6,\n                                    type=8,\n                                    cpp_type=7,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=False,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'root_folder\',\n            full_name=\'caffe.ImageDataParameter.root_folder\',\n            index=11,\n            number=12,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=True,\n            default_value=_b("""").decode(\'utf-8\'),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=12705,\n    serialized_end=12984,\n)\n\n_INFOGAINLOSSPARAMETER = _descriptor.Descriptor(\n    name=\'InfogainLossParameter\',\n    full_name=\'caffe.InfogainLossParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'source\',\n            full_name=\'caffe.InfogainLossParameter.source\',\n            index=0,\n            number=1,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(\'utf-8\'),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=12986,\n    serialized_end=13025,\n)\n\n_INNERPRODUCTPARAMETER = _descriptor.Descriptor(\n    name=\'InnerProductParameter\',\n    full_name=\'caffe.InnerProductParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'num_output\',\n            full_name=\'caffe.InnerProductParameter.num_output\',\n            index=0,\n            number=1,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'bias_term\',\n            full_name=\'caffe.InnerProductParameter.bias_term\',\n            index=1,\n            number=2,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=True,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'weight_filler\',\n            full_name=\'caffe.InnerProductParameter.weight_filler\',\n            index=2,\n            number=3,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'bias_filler\',\n            full_name=\'caffe.InnerProductParameter.bias_filler\',\n            index=3,\n            number=4,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'axis\',\n            full_name=\'caffe.InnerProductParameter.axis\',\n            index=4,\n            number=5,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'transpose\',\n            full_name=\'caffe.InnerProductParameter.transpose\',\n            index=5,\n            number=6,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=13028,\n    serialized_end=13231,\n)\n\n_INPUTPARAMETER = _descriptor.Descriptor(\n    name=\'InputParameter\',\n    full_name=\'caffe.InputParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'shape\',\n                                    full_name=\'caffe.InputParameter.shape\',\n                                    index=0,\n                                    number=1,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=13233,\n    serialized_end=13282,\n)\n\n_LOGPARAMETER = _descriptor.Descriptor(\n    name=\'LogParameter\',\n    full_name=\'caffe.LogParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'base\',\n                                    full_name=\'caffe.LogParameter.base\',\n                                    index=0,\n                                    number=1,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(-1),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'scale\',\n                                    full_name=\'caffe.LogParameter.scale\',\n                                    index=1,\n                                    number=2,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(1),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'shift\',\n                                    full_name=\'caffe.LogParameter.shift\',\n                                    index=2,\n                                    number=3,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(0),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=13284,\n    serialized_end=13352,\n)\n\n_LRNPARAMETER = _descriptor.Descriptor(\n    name=\'LRNParameter\',\n    full_name=\'caffe.LRNParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'local_size\',\n                                    full_name=\'caffe.LRNParameter.local_size\',\n                                    index=0,\n                                    number=1,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=5,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'alpha\',\n                                    full_name=\'caffe.LRNParameter.alpha\',\n                                    index=1,\n                                    number=2,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(1),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'beta\',\n                                    full_name=\'caffe.LRNParameter.beta\',\n                                    index=2,\n                                    number=3,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(0.75),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'norm_region\',\n                                    full_name=\'caffe.LRNParameter.norm_region\',\n                                    index=3,\n                                    number=4,\n                                    type=14,\n                                    cpp_type=8,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'k\',\n                                    full_name=\'caffe.LRNParameter.k\',\n                                    index=4,\n                                    number=5,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(1),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'engine\',\n                                    full_name=\'caffe.LRNParameter.engine\',\n                                    index=5,\n                                    number=6,\n                                    type=14,\n                                    cpp_type=8,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[\n        _LRNPARAMETER_NORMREGION,\n        _LRNPARAMETER_ENGINE,\n    ],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=13355,\n    serialized_end=13667,\n)\n\n_MEMORYDATAPARAMETER = _descriptor.Descriptor(\n    name=\'MemoryDataParameter\',\n    full_name=\'caffe.MemoryDataParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'batch_size\',\n            full_name=\'caffe.MemoryDataParameter.batch_size\',\n            index=0,\n            number=1,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'channels\',\n            full_name=\'caffe.MemoryDataParameter.channels\',\n            index=1,\n            number=2,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'height\',\n            full_name=\'caffe.MemoryDataParameter.height\',\n            index=2,\n            number=3,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'width\',\n                                    full_name=\'caffe.MemoryDataParameter.width\',\n                                    index=3,\n                                    number=4,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=13669,\n    serialized_end=13759,\n)\n\n_MULTIBOXLOSSPARAMETER = _descriptor.Descriptor(\n    name=\'MultiBoxLossParameter\',\n    full_name=\'caffe.MultiBoxLossParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'loc_loss_type\',\n            full_name=\'caffe.MultiBoxLossParameter.loc_loss_type\',\n            index=0,\n            number=1,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'conf_loss_type\',\n            full_name=\'caffe.MultiBoxLossParameter.conf_loss_type\',\n            index=1,\n            number=2,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'loc_weight\',\n            full_name=\'caffe.MultiBoxLossParameter.loc_weight\',\n            index=2,\n            number=3,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(1),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'num_classes\',\n            full_name=\'caffe.MultiBoxLossParameter.num_classes\',\n            index=3,\n            number=4,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'share_location\',\n            full_name=\'caffe.MultiBoxLossParameter.share_location\',\n            index=4,\n            number=5,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=True,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'match_type\',\n            full_name=\'caffe.MultiBoxLossParameter.match_type\',\n            index=5,\n            number=6,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'overlap_threshold\',\n            full_name=\'caffe.MultiBoxLossParameter.overlap_threshold\',\n            index=6,\n            number=7,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(0.5),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'use_prior_for_matching\',\n            full_name=\'caffe.MultiBoxLossParameter.use_prior_for_matching\',\n            index=7,\n            number=8,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=True,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'background_label_id\',\n            full_name=\'caffe.MultiBoxLossParameter.background_label_id\',\n            index=8,\n            number=9,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'use_difficult_gt\',\n            full_name=\'caffe.MultiBoxLossParameter.use_difficult_gt\',\n            index=9,\n            number=10,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=True,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'do_neg_mining\',\n            full_name=\'caffe.MultiBoxLossParameter.do_neg_mining\',\n            index=10,\n            number=11,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=False,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'neg_pos_ratio\',\n            full_name=\'caffe.MultiBoxLossParameter.neg_pos_ratio\',\n            index=11,\n            number=12,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(3),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'neg_overlap\',\n            full_name=\'caffe.MultiBoxLossParameter.neg_overlap\',\n            index=12,\n            number=13,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(0.5),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'code_type\',\n            full_name=\'caffe.MultiBoxLossParameter.code_type\',\n            index=13,\n            number=14,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'encode_variance_in_target\',\n            full_name=\'caffe.MultiBoxLossParameter.encode_variance_in_target\',\n            index=14,\n            number=16,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'map_object_to_agnostic\',\n            full_name=\'caffe.MultiBoxLossParameter.map_object_to_agnostic\',\n            index=15,\n            number=17,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'ignore_cross_boundary_bbox\',\n            full_name=\'caffe.MultiBoxLossParameter.ignore_cross_boundary_bbox\',\n            index=16,\n            number=18,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'bp_inside\',\n            full_name=\'caffe.MultiBoxLossParameter.bp_inside\',\n            index=17,\n            number=19,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'mining_type\',\n            full_name=\'caffe.MultiBoxLossParameter.mining_type\',\n            index=18,\n            number=20,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'nms_param\',\n            full_name=\'caffe.MultiBoxLossParameter.nms_param\',\n            index=19,\n            number=21,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'sample_size\',\n            full_name=\'caffe.MultiBoxLossParameter.sample_size\',\n            index=20,\n            number=22,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=64,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'use_prior_for_nms\',\n            full_name=\'caffe.MultiBoxLossParameter.use_prior_for_nms\',\n            index=21,\n            number=23,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[\n        _MULTIBOXLOSSPARAMETER_LOCLOSSTYPE,\n        _MULTIBOXLOSSPARAMETER_CONFLOSSTYPE,\n        _MULTIBOXLOSSPARAMETER_MATCHTYPE,\n        _MULTIBOXLOSSPARAMETER_MININGTYPE,\n    ],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=13762,\n    serialized_end=14890,\n)\n\n_MVNPARAMETER = _descriptor.Descriptor(\n    name=\'MVNParameter\',\n    full_name=\'caffe.MVNParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'normalize_variance\',\n            full_name=\'caffe.MVNParameter.normalize_variance\',\n            index=0,\n            number=1,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=True,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'across_channels\',\n            full_name=\'caffe.MVNParameter.across_channels\',\n            index=1,\n            number=2,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'eps\',\n                                    full_name=\'caffe.MVNParameter.eps\',\n                                    index=2,\n                                    number=3,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(1e-09),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=14892,\n    serialized_end=14992,\n)\n\n_NORMALIZEPARAMETER = _descriptor.Descriptor(\n    name=\'NormalizeParameter\',\n    full_name=\'caffe.NormalizeParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'across_spatial\',\n            full_name=\'caffe.NormalizeParameter.across_spatial\',\n            index=0,\n            number=1,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=True,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'scale_filler\',\n            full_name=\'caffe.NormalizeParameter.scale_filler\',\n            index=1,\n            number=2,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'channel_shared\',\n            full_name=\'caffe.NormalizeParameter.channel_shared\',\n            index=2,\n            number=3,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=True,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'eps\',\n                                    full_name=\'caffe.NormalizeParameter.eps\',\n                                    index=3,\n                                    number=4,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(1e-10),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=14995,\n    serialized_end=15141,\n)\n\n_PARAMETERPARAMETER = _descriptor.Descriptor(\n    name=\'ParameterParameter\',\n    full_name=\'caffe.ParameterParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'shape\',\n                                    full_name=\'caffe.ParameterParameter.shape\',\n                                    index=0,\n                                    number=1,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=None,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=15143,\n    serialized_end=15196,\n)\n\n_PERMUTEPARAMETER = _descriptor.Descriptor(\n    name=\'PermuteParameter\',\n    full_name=\'caffe.PermuteParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'order\',\n                                    full_name=\'caffe.PermuteParameter.order\',\n                                    index=0,\n                                    number=1,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=15198,\n    serialized_end=15231,\n)\n\n_POOLINGPARAMETER = _descriptor.Descriptor(\n    name=\'PoolingParameter\',\n    full_name=\'caffe.PoolingParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'pool\',\n                                    full_name=\'caffe.PoolingParameter.pool\',\n                                    index=0,\n                                    number=1,\n                                    type=14,\n                                    cpp_type=8,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'pad\',\n                                    full_name=\'caffe.PoolingParameter.pad\',\n                                    index=1,\n                                    number=4,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'pad_h\',\n                                    full_name=\'caffe.PoolingParameter.pad_h\',\n                                    index=2,\n                                    number=9,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'pad_w\',\n                                    full_name=\'caffe.PoolingParameter.pad_w\',\n                                    index=3,\n                                    number=10,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'kernel_size\',\n            full_name=\'caffe.PoolingParameter.kernel_size\',\n            index=4,\n            number=2,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'kernel_h\',\n                                    full_name=\'caffe.PoolingParameter.kernel_h\',\n                                    index=5,\n                                    number=5,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'kernel_w\',\n                                    full_name=\'caffe.PoolingParameter.kernel_w\',\n                                    index=6,\n                                    number=6,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'stride\',\n                                    full_name=\'caffe.PoolingParameter.stride\',\n                                    index=7,\n                                    number=3,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=1,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'stride_h\',\n                                    full_name=\'caffe.PoolingParameter.stride_h\',\n                                    index=8,\n                                    number=7,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'stride_w\',\n                                    full_name=\'caffe.PoolingParameter.stride_w\',\n                                    index=9,\n                                    number=8,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'engine\',\n                                    full_name=\'caffe.PoolingParameter.engine\',\n                                    index=10,\n                                    number=11,\n                                    type=14,\n                                    cpp_type=8,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'global_pooling\',\n            full_name=\'caffe.PoolingParameter.global_pooling\',\n            index=11,\n            number=12,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[\n        _POOLINGPARAMETER_POOLMETHOD,\n        _POOLINGPARAMETER_ENGINE,\n    ],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=15234,\n    serialized_end=15652,\n)\n\n_POWERPARAMETER = _descriptor.Descriptor(\n    name=\'PowerParameter\',\n    full_name=\'caffe.PowerParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'power\',\n                                    full_name=\'caffe.PowerParameter.power\',\n                                    index=0,\n                                    number=1,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(1),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'scale\',\n                                    full_name=\'caffe.PowerParameter.scale\',\n                                    index=1,\n                                    number=2,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(1),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'shift\',\n                                    full_name=\'caffe.PowerParameter.shift\',\n                                    index=2,\n                                    number=3,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(0),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=15654,\n    serialized_end=15724,\n)\n\n_PRIORBOXPARAMETER = _descriptor.Descriptor(\n    name=\'PriorBoxParameter\',\n    full_name=\'caffe.PriorBoxParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'min_size\',\n            full_name=\'caffe.PriorBoxParameter.min_size\',\n            index=0,\n            number=1,\n            type=2,\n            cpp_type=6,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'max_size\',\n            full_name=\'caffe.PriorBoxParameter.max_size\',\n            index=1,\n            number=2,\n            type=2,\n            cpp_type=6,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'aspect_ratio\',\n            full_name=\'caffe.PriorBoxParameter.aspect_ratio\',\n            index=2,\n            number=3,\n            type=2,\n            cpp_type=6,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'flip\',\n                                    full_name=\'caffe.PriorBoxParameter.flip\',\n                                    index=3,\n                                    number=4,\n                                    type=8,\n                                    cpp_type=7,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=True,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'clip\',\n                                    full_name=\'caffe.PriorBoxParameter.clip\',\n                                    index=4,\n                                    number=5,\n                                    type=8,\n                                    cpp_type=7,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=False,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'variance\',\n            full_name=\'caffe.PriorBoxParameter.variance\',\n            index=5,\n            number=6,\n            type=2,\n            cpp_type=6,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'img_size\',\n            full_name=\'caffe.PriorBoxParameter.img_size\',\n            index=6,\n            number=7,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'img_h\',\n                                    full_name=\'caffe.PriorBoxParameter.img_h\',\n                                    index=7,\n                                    number=8,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'img_w\',\n                                    full_name=\'caffe.PriorBoxParameter.img_w\',\n                                    index=8,\n                                    number=9,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'step\',\n                                    full_name=\'caffe.PriorBoxParameter.step\',\n                                    index=9,\n                                    number=10,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=float(0),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'step_h\',\n                                    full_name=\'caffe.PriorBoxParameter.step_h\',\n                                    index=10,\n                                    number=11,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=float(0),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'step_w\',\n                                    full_name=\'caffe.PriorBoxParameter.step_w\',\n                                    index=11,\n                                    number=12,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=float(0),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'offset\',\n                                    full_name=\'caffe.PriorBoxParameter.offset\',\n                                    index=12,\n                                    number=13,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(0.5),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[\n        _PRIORBOXPARAMETER_CODETYPE,\n    ],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=15727,\n    serialized_end=16036,\n)\n\n_PYTHONPARAMETER = _descriptor.Descriptor(\n    name=\'PythonParameter\',\n    full_name=\'caffe.PythonParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'module\',\n                                    full_name=\'caffe.PythonParameter.module\',\n                                    index=0,\n                                    number=1,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=_b("""").decode(\'utf-8\'),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'layer\',\n                                    full_name=\'caffe.PythonParameter.layer\',\n                                    index=1,\n                                    number=2,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=_b("""").decode(\'utf-8\'),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'param_str\',\n                                    full_name=\'caffe.PythonParameter.param_str\',\n                                    index=2,\n                                    number=3,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=_b("""").decode(\'utf-8\'),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'share_in_parallel\',\n            full_name=\'caffe.PythonParameter.share_in_parallel\',\n            index=3,\n            number=4,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=16038,\n    serialized_end=16141,\n)\n\n_RECURRENTPARAMETER = _descriptor.Descriptor(\n    name=\'RecurrentParameter\',\n    full_name=\'caffe.RecurrentParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'num_output\',\n            full_name=\'caffe.RecurrentParameter.num_output\',\n            index=0,\n            number=1,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'weight_filler\',\n            full_name=\'caffe.RecurrentParameter.weight_filler\',\n            index=1,\n            number=2,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'bias_filler\',\n            full_name=\'caffe.RecurrentParameter.bias_filler\',\n            index=2,\n            number=3,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'debug_info\',\n            full_name=\'caffe.RecurrentParameter.debug_info\',\n            index=3,\n            number=4,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'expose_hidden\',\n            full_name=\'caffe.RecurrentParameter.expose_hidden\',\n            index=4,\n            number=5,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=16144,\n    serialized_end=16336,\n)\n\n_REDUCTIONPARAMETER = _descriptor.Descriptor(\n    name=\'ReductionParameter\',\n    full_name=\'caffe.ReductionParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'operation\',\n            full_name=\'caffe.ReductionParameter.operation\',\n            index=0,\n            number=1,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'axis\',\n                                    full_name=\'caffe.ReductionParameter.axis\',\n                                    index=1,\n                                    number=2,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'coeff\',\n                                    full_name=\'caffe.ReductionParameter.coeff\',\n                                    index=2,\n                                    number=3,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(1),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[\n        _REDUCTIONPARAMETER_REDUCTIONOP,\n    ],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=16339,\n    serialized_end=16512,\n)\n\n_RELUPARAMETER = _descriptor.Descriptor(\n    name=\'ReLUParameter\',\n    full_name=\'caffe.ReLUParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'negative_slope\',\n            full_name=\'caffe.ReLUParameter.negative_slope\',\n            index=0,\n            number=1,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(0),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'engine\',\n                                    full_name=\'caffe.ReLUParameter.engine\',\n                                    index=1,\n                                    number=2,\n                                    type=14,\n                                    cpp_type=8,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[\n        _RELUPARAMETER_ENGINE,\n    ],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=16515,\n    serialized_end=16656,\n)\n\n_RESHAPEPARAMETER = _descriptor.Descriptor(\n    name=\'ReshapeParameter\',\n    full_name=\'caffe.ReshapeParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'shape\',\n                                    full_name=\'caffe.ReshapeParameter.shape\',\n                                    index=0,\n                                    number=1,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=None,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'axis\',\n                                    full_name=\'caffe.ReshapeParameter.axis\',\n                                    index=1,\n                                    number=2,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'num_axes\',\n                                    full_name=\'caffe.ReshapeParameter.num_axes\',\n                                    index=2,\n                                    number=3,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=-1,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=16658,\n    serialized_end=16748,\n)\n\n_SCALEPARAMETER = _descriptor.Descriptor(\n    name=\'ScaleParameter\',\n    full_name=\'caffe.ScaleParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'axis\',\n                                    full_name=\'caffe.ScaleParameter.axis\',\n                                    index=0,\n                                    number=1,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=1,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'num_axes\',\n                                    full_name=\'caffe.ScaleParameter.num_axes\',\n                                    index=1,\n                                    number=2,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=1,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'filler\',\n                                    full_name=\'caffe.ScaleParameter.filler\',\n                                    index=2,\n                                    number=3,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=None,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'bias_term\',\n                                    full_name=\'caffe.ScaleParameter.bias_term\',\n                                    index=3,\n                                    number=4,\n                                    type=8,\n                                    cpp_type=7,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=False,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'bias_filler\',\n            full_name=\'caffe.ScaleParameter.bias_filler\',\n            index=4,\n            number=5,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=16751,\n    serialized_end=16916,\n)\n\n_SIGMOIDPARAMETER = _descriptor.Descriptor(\n    name=\'SigmoidParameter\',\n    full_name=\'caffe.SigmoidParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'engine\',\n                                    full_name=\'caffe.SigmoidParameter.engine\',\n                                    index=0,\n                                    number=1,\n                                    type=14,\n                                    cpp_type=8,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[\n        _SIGMOIDPARAMETER_ENGINE,\n    ],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=16918,\n    serialized_end=17038,\n)\n\n_SLICEPARAMETER = _descriptor.Descriptor(\n    name=\'SliceParameter\',\n    full_name=\'caffe.SliceParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'axis\',\n                                    full_name=\'caffe.SliceParameter.axis\',\n                                    index=0,\n                                    number=3,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=1,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'slice_point\',\n            full_name=\'caffe.SliceParameter.slice_point\',\n            index=1,\n            number=2,\n            type=13,\n            cpp_type=3,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'slice_dim\',\n                                    full_name=\'caffe.SliceParameter.slice_dim\',\n                                    index=2,\n                                    number=1,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=1,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=17040,\n    serialized_end=17116,\n)\n\n_SOFTMAXPARAMETER = _descriptor.Descriptor(\n    name=\'SoftmaxParameter\',\n    full_name=\'caffe.SoftmaxParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'engine\',\n                                    full_name=\'caffe.SoftmaxParameter.engine\',\n                                    index=0,\n                                    number=1,\n                                    type=14,\n                                    cpp_type=8,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'axis\',\n                                    full_name=\'caffe.SoftmaxParameter.axis\',\n                                    index=1,\n                                    number=2,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=1,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[\n        _SOFTMAXPARAMETER_ENGINE,\n    ],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=17119,\n    serialized_end=17256,\n)\n\n_TANHPARAMETER = _descriptor.Descriptor(\n    name=\'TanHParameter\',\n    full_name=\'caffe.TanHParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'engine\',\n                                    full_name=\'caffe.TanHParameter.engine\',\n                                    index=0,\n                                    number=1,\n                                    type=14,\n                                    cpp_type=8,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[\n        _TANHPARAMETER_ENGINE,\n    ],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=17258,\n    serialized_end=17372,\n)\n\n_TILEPARAMETER = _descriptor.Descriptor(\n    name=\'TileParameter\',\n    full_name=\'caffe.TileParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'axis\',\n                                    full_name=\'caffe.TileParameter.axis\',\n                                    index=0,\n                                    number=1,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=1,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'tiles\',\n                                    full_name=\'caffe.TileParameter.tiles\',\n                                    index=1,\n                                    number=2,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=17374,\n    serialized_end=17421,\n)\n\n_THRESHOLDPARAMETER = _descriptor.Descriptor(\n    name=\'ThresholdParameter\',\n    full_name=\'caffe.ThresholdParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'threshold\',\n            full_name=\'caffe.ThresholdParameter.threshold\',\n            index=0,\n            number=1,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(0),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=17423,\n    serialized_end=17465,\n)\n\n_VIDEODATAPARAMETER = _descriptor.Descriptor(\n    name=\'VideoDataParameter\',\n    full_name=\'caffe.VideoDataParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'video_type\',\n            full_name=\'caffe.VideoDataParameter.video_type\',\n            index=0,\n            number=1,\n            type=14,\n            cpp_type=8,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'device_id\',\n            full_name=\'caffe.VideoDataParameter.device_id\',\n            index=1,\n            number=2,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'video_file\',\n            full_name=\'caffe.VideoDataParameter.video_file\',\n            index=2,\n            number=3,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(\'utf-8\'),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'skip_frames\',\n            full_name=\'caffe.VideoDataParameter.skip_frames\',\n            index=3,\n            number=4,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[\n        _VIDEODATAPARAMETER_VIDEOTYPE,\n    ],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=17468,\n    serialized_end=17655,\n)\n\n_WINDOWDATAPARAMETER = _descriptor.Descriptor(\n    name=\'WindowDataParameter\',\n    full_name=\'caffe.WindowDataParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'source\',\n            full_name=\'caffe.WindowDataParameter.source\',\n            index=0,\n            number=1,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(\'utf-8\'),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'scale\',\n                                    full_name=\'caffe.WindowDataParameter.scale\',\n                                    index=1,\n                                    number=2,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(1),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'mean_file\',\n            full_name=\'caffe.WindowDataParameter.mean_file\',\n            index=2,\n            number=3,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=False,\n            default_value=_b("""").decode(\'utf-8\'),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'batch_size\',\n            full_name=\'caffe.WindowDataParameter.batch_size\',\n            index=3,\n            number=4,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'crop_size\',\n            full_name=\'caffe.WindowDataParameter.crop_size\',\n            index=4,\n            number=5,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'mirror\',\n            full_name=\'caffe.WindowDataParameter.mirror\',\n            index=5,\n            number=6,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'fg_threshold\',\n            full_name=\'caffe.WindowDataParameter.fg_threshold\',\n            index=6,\n            number=7,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(0.5),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'bg_threshold\',\n            full_name=\'caffe.WindowDataParameter.bg_threshold\',\n            index=7,\n            number=8,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(0.5),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'fg_fraction\',\n            full_name=\'caffe.WindowDataParameter.fg_fraction\',\n            index=8,\n            number=9,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(0.25),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'context_pad\',\n            full_name=\'caffe.WindowDataParameter.context_pad\',\n            index=9,\n            number=10,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'crop_mode\',\n            full_name=\'caffe.WindowDataParameter.crop_mode\',\n            index=10,\n            number=11,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=True,\n            default_value=_b(""warp"").decode(\'utf-8\'),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'cache_images\',\n            full_name=\'caffe.WindowDataParameter.cache_images\',\n            index=11,\n            number=12,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'root_folder\',\n            full_name=\'caffe.WindowDataParameter.root_folder\',\n            index=12,\n            number=13,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=True,\n            default_value=_b("""").decode(\'utf-8\'),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=17658,\n    serialized_end=17979,\n)\n\n_SPPPARAMETER = _descriptor.Descriptor(\n    name=\'SPPParameter\',\n    full_name=\'caffe.SPPParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'pyramid_height\',\n            full_name=\'caffe.SPPParameter.pyramid_height\',\n            index=0,\n            number=1,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'pool\',\n                                    full_name=\'caffe.SPPParameter.pool\',\n                                    index=1,\n                                    number=2,\n                                    type=14,\n                                    cpp_type=8,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'engine\',\n                                    full_name=\'caffe.SPPParameter.engine\',\n                                    index=2,\n                                    number=6,\n                                    type=14,\n                                    cpp_type=8,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[\n        _SPPPARAMETER_POOLMETHOD,\n        _SPPPARAMETER_ENGINE,\n    ],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=17982,\n    serialized_end=18217,\n)\n\n_V1LAYERPARAMETER = _descriptor.Descriptor(\n    name=\'V1LayerParameter\',\n    full_name=\'caffe.V1LayerParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'bottom\',\n                                    full_name=\'caffe.V1LayerParameter.bottom\',\n                                    index=0,\n                                    number=2,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'top\',\n                                    full_name=\'caffe.V1LayerParameter.top\',\n                                    index=1,\n                                    number=3,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'name\',\n                                    full_name=\'caffe.V1LayerParameter.name\',\n                                    index=2,\n                                    number=4,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=_b("""").decode(\'utf-8\'),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'include\',\n                                    full_name=\'caffe.V1LayerParameter.include\',\n                                    index=3,\n                                    number=32,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'exclude\',\n                                    full_name=\'caffe.V1LayerParameter.exclude\',\n                                    index=4,\n                                    number=33,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'type\',\n                                    full_name=\'caffe.V1LayerParameter.type\',\n                                    index=5,\n                                    number=5,\n                                    type=14,\n                                    cpp_type=8,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'blobs\',\n                                    full_name=\'caffe.V1LayerParameter.blobs\',\n                                    index=6,\n                                    number=6,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'param\',\n                                    full_name=\'caffe.V1LayerParameter.param\',\n                                    index=7,\n                                    number=1001,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'blob_share_mode\',\n            full_name=\'caffe.V1LayerParameter.blob_share_mode\',\n            index=8,\n            number=1002,\n            type=14,\n            cpp_type=8,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'blobs_lr\',\n                                    full_name=\'caffe.V1LayerParameter.blobs_lr\',\n                                    index=9,\n                                    number=7,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'weight_decay\',\n            full_name=\'caffe.V1LayerParameter.weight_decay\',\n            index=10,\n            number=8,\n            type=2,\n            cpp_type=6,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'loss_weight\',\n            full_name=\'caffe.V1LayerParameter.loss_weight\',\n            index=11,\n            number=35,\n            type=2,\n            cpp_type=6,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'accuracy_param\',\n            full_name=\'caffe.V1LayerParameter.accuracy_param\',\n            index=12,\n            number=27,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'argmax_param\',\n            full_name=\'caffe.V1LayerParameter.argmax_param\',\n            index=13,\n            number=23,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'concat_param\',\n            full_name=\'caffe.V1LayerParameter.concat_param\',\n            index=14,\n            number=9,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'contrastive_loss_param\',\n            full_name=\'caffe.V1LayerParameter.contrastive_loss_param\',\n            index=15,\n            number=40,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'convolution_param\',\n            full_name=\'caffe.V1LayerParameter.convolution_param\',\n            index=16,\n            number=10,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'data_param\',\n            full_name=\'caffe.V1LayerParameter.data_param\',\n            index=17,\n            number=11,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'dropout_param\',\n            full_name=\'caffe.V1LayerParameter.dropout_param\',\n            index=18,\n            number=12,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'dummy_data_param\',\n            full_name=\'caffe.V1LayerParameter.dummy_data_param\',\n            index=19,\n            number=26,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'eltwise_param\',\n            full_name=\'caffe.V1LayerParameter.eltwise_param\',\n            index=20,\n            number=24,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'exp_param\',\n            full_name=\'caffe.V1LayerParameter.exp_param\',\n            index=21,\n            number=41,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'hdf5_data_param\',\n            full_name=\'caffe.V1LayerParameter.hdf5_data_param\',\n            index=22,\n            number=13,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'hdf5_output_param\',\n            full_name=\'caffe.V1LayerParameter.hdf5_output_param\',\n            index=23,\n            number=14,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'hinge_loss_param\',\n            full_name=\'caffe.V1LayerParameter.hinge_loss_param\',\n            index=24,\n            number=29,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'image_data_param\',\n            full_name=\'caffe.V1LayerParameter.image_data_param\',\n            index=25,\n            number=15,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'infogain_loss_param\',\n            full_name=\'caffe.V1LayerParameter.infogain_loss_param\',\n            index=26,\n            number=16,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'inner_product_param\',\n            full_name=\'caffe.V1LayerParameter.inner_product_param\',\n            index=27,\n            number=17,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'lrn_param\',\n            full_name=\'caffe.V1LayerParameter.lrn_param\',\n            index=28,\n            number=18,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'memory_data_param\',\n            full_name=\'caffe.V1LayerParameter.memory_data_param\',\n            index=29,\n            number=22,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'mvn_param\',\n            full_name=\'caffe.V1LayerParameter.mvn_param\',\n            index=30,\n            number=34,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'pooling_param\',\n            full_name=\'caffe.V1LayerParameter.pooling_param\',\n            index=31,\n            number=19,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'power_param\',\n            full_name=\'caffe.V1LayerParameter.power_param\',\n            index=32,\n            number=21,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'relu_param\',\n            full_name=\'caffe.V1LayerParameter.relu_param\',\n            index=33,\n            number=30,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'sigmoid_param\',\n            full_name=\'caffe.V1LayerParameter.sigmoid_param\',\n            index=34,\n            number=38,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'softmax_param\',\n            full_name=\'caffe.V1LayerParameter.softmax_param\',\n            index=35,\n            number=39,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'slice_param\',\n            full_name=\'caffe.V1LayerParameter.slice_param\',\n            index=36,\n            number=31,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'tanh_param\',\n            full_name=\'caffe.V1LayerParameter.tanh_param\',\n            index=37,\n            number=37,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'threshold_param\',\n            full_name=\'caffe.V1LayerParameter.threshold_param\',\n            index=38,\n            number=25,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'window_data_param\',\n            full_name=\'caffe.V1LayerParameter.window_data_param\',\n            index=39,\n            number=20,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'transform_param\',\n            full_name=\'caffe.V1LayerParameter.transform_param\',\n            index=40,\n            number=36,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'loss_param\',\n            full_name=\'caffe.V1LayerParameter.loss_param\',\n            index=41,\n            number=42,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'layer\',\n                                    full_name=\'caffe.V1LayerParameter.layer\',\n                                    index=42,\n                                    number=1,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=None,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[\n        _V1LAYERPARAMETER_LAYERTYPE,\n        _V1LAYERPARAMETER_DIMCHECKMODE,\n    ],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=18220,\n    serialized_end=20748,\n)\n\n_V0LAYERPARAMETER = _descriptor.Descriptor(\n    name=\'V0LayerParameter\',\n    full_name=\'caffe.V0LayerParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'name\',\n                                    full_name=\'caffe.V0LayerParameter.name\',\n                                    index=0,\n                                    number=1,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=_b("""").decode(\'utf-8\'),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'type\',\n                                    full_name=\'caffe.V0LayerParameter.type\',\n                                    index=1,\n                                    number=2,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=_b("""").decode(\'utf-8\'),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'num_output\',\n            full_name=\'caffe.V0LayerParameter.num_output\',\n            index=2,\n            number=3,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'biasterm\',\n                                    full_name=\'caffe.V0LayerParameter.biasterm\',\n                                    index=3,\n                                    number=4,\n                                    type=8,\n                                    cpp_type=7,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=True,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'weight_filler\',\n            full_name=\'caffe.V0LayerParameter.weight_filler\',\n            index=4,\n            number=5,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'bias_filler\',\n            full_name=\'caffe.V0LayerParameter.bias_filler\',\n            index=5,\n            number=6,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'pad\',\n                                    full_name=\'caffe.V0LayerParameter.pad\',\n                                    index=6,\n                                    number=7,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'kernelsize\',\n            full_name=\'caffe.V0LayerParameter.kernelsize\',\n            index=7,\n            number=8,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'group\',\n                                    full_name=\'caffe.V0LayerParameter.group\',\n                                    index=8,\n                                    number=9,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=1,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'stride\',\n                                    full_name=\'caffe.V0LayerParameter.stride\',\n                                    index=9,\n                                    number=10,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=1,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'pool\',\n                                    full_name=\'caffe.V0LayerParameter.pool\',\n                                    index=10,\n                                    number=11,\n                                    type=14,\n                                    cpp_type=8,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'dropout_ratio\',\n            full_name=\'caffe.V0LayerParameter.dropout_ratio\',\n            index=11,\n            number=12,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(0.5),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'local_size\',\n            full_name=\'caffe.V0LayerParameter.local_size\',\n            index=12,\n            number=13,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=5,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'alpha\',\n                                    full_name=\'caffe.V0LayerParameter.alpha\',\n                                    index=13,\n                                    number=14,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(1),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'beta\',\n                                    full_name=\'caffe.V0LayerParameter.beta\',\n                                    index=14,\n                                    number=15,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(0.75),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'k\',\n                                    full_name=\'caffe.V0LayerParameter.k\',\n                                    index=15,\n                                    number=22,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(1),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'source\',\n                                    full_name=\'caffe.V0LayerParameter.source\',\n                                    index=16,\n                                    number=16,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=_b("""").decode(\'utf-8\'),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'scale\',\n                                    full_name=\'caffe.V0LayerParameter.scale\',\n                                    index=17,\n                                    number=17,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=float(1),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'meanfile\',\n                                    full_name=\'caffe.V0LayerParameter.meanfile\',\n                                    index=18,\n                                    number=18,\n                                    type=9,\n                                    cpp_type=9,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=_b("""").decode(\'utf-8\'),\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'batchsize\',\n            full_name=\'caffe.V0LayerParameter.batchsize\',\n            index=19,\n            number=19,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=False,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'cropsize\',\n                                    full_name=\'caffe.V0LayerParameter.cropsize\',\n                                    index=20,\n                                    number=20,\n                                    type=13,\n                                    cpp_type=3,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'mirror\',\n                                    full_name=\'caffe.V0LayerParameter.mirror\',\n                                    index=21,\n                                    number=21,\n                                    type=8,\n                                    cpp_type=7,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=False,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'blobs\',\n                                    full_name=\'caffe.V0LayerParameter.blobs\',\n                                    index=22,\n                                    number=50,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'blobs_lr\',\n                                    full_name=\'caffe.V0LayerParameter.blobs_lr\',\n                                    index=23,\n                                    number=51,\n                                    type=2,\n                                    cpp_type=6,\n                                    label=3,\n                                    has_default_value=False,\n                                    default_value=[],\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'weight_decay\',\n            full_name=\'caffe.V0LayerParameter.weight_decay\',\n            index=24,\n            number=52,\n            type=2,\n            cpp_type=6,\n            label=3,\n            has_default_value=False,\n            default_value=[],\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'rand_skip\',\n            full_name=\'caffe.V0LayerParameter.rand_skip\',\n            index=25,\n            number=53,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'det_fg_threshold\',\n            full_name=\'caffe.V0LayerParameter.det_fg_threshold\',\n            index=26,\n            number=54,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(0.5),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'det_bg_threshold\',\n            full_name=\'caffe.V0LayerParameter.det_bg_threshold\',\n            index=27,\n            number=55,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(0.5),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'det_fg_fraction\',\n            full_name=\'caffe.V0LayerParameter.det_fg_fraction\',\n            index=28,\n            number=56,\n            type=2,\n            cpp_type=6,\n            label=1,\n            has_default_value=True,\n            default_value=float(0.25),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'det_context_pad\',\n            full_name=\'caffe.V0LayerParameter.det_context_pad\',\n            index=29,\n            number=58,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'det_crop_mode\',\n            full_name=\'caffe.V0LayerParameter.det_crop_mode\',\n            index=30,\n            number=59,\n            type=9,\n            cpp_type=9,\n            label=1,\n            has_default_value=True,\n            default_value=_b(""warp"").decode(\'utf-8\'),\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(name=\'new_num\',\n                                    full_name=\'caffe.V0LayerParameter.new_num\',\n                                    index=31,\n                                    number=60,\n                                    type=5,\n                                    cpp_type=1,\n                                    label=1,\n                                    has_default_value=True,\n                                    default_value=0,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'new_channels\',\n            full_name=\'caffe.V0LayerParameter.new_channels\',\n            index=32,\n            number=61,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'new_height\',\n            full_name=\'caffe.V0LayerParameter.new_height\',\n            index=33,\n            number=62,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'new_width\',\n            full_name=\'caffe.V0LayerParameter.new_width\',\n            index=34,\n            number=63,\n            type=5,\n            cpp_type=1,\n            label=1,\n            has_default_value=True,\n            default_value=0,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'shuffle_images\',\n            full_name=\'caffe.V0LayerParameter.shuffle_images\',\n            index=35,\n            number=64,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'concat_dim\',\n            full_name=\'caffe.V0LayerParameter.concat_dim\',\n            index=36,\n            number=65,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'hdf5_output_param\',\n            full_name=\'caffe.V0LayerParameter.hdf5_output_param\',\n            index=37,\n            number=1001,\n            type=11,\n            cpp_type=10,\n            label=1,\n            has_default_value=False,\n            default_value=None,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[\n        _V0LAYERPARAMETER_POOLMETHOD,\n    ],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=20751,\n    serialized_end=21772,\n)\n\n_PRELUPARAMETER = _descriptor.Descriptor(\n    name=\'PReLUParameter\',\n    full_name=\'caffe.PReLUParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(name=\'filler\',\n                                    full_name=\'caffe.PReLUParameter.filler\',\n                                    index=0,\n                                    number=1,\n                                    type=11,\n                                    cpp_type=10,\n                                    label=1,\n                                    has_default_value=False,\n                                    default_value=None,\n                                    message_type=None,\n                                    enum_type=None,\n                                    containing_type=None,\n                                    is_extension=False,\n                                    extension_scope=None,\n                                    serialized_options=None,\n                                    file=DESCRIPTOR),\n        _descriptor.FieldDescriptor(\n            name=\'channel_shared\',\n            full_name=\'caffe.PReLUParameter.channel_shared\',\n            index=1,\n            number=2,\n            type=8,\n            cpp_type=7,\n            label=1,\n            has_default_value=True,\n            default_value=False,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=21774,\n    serialized_end=21861,\n)\n\n_SHUFFLECHANNELPARAMETER = _descriptor.Descriptor(\n    name=\'ShuffleChannelParameter\',\n    full_name=\'caffe.ShuffleChannelParameter\',\n    filename=None,\n    file=DESCRIPTOR,\n    containing_type=None,\n    fields=[\n        _descriptor.FieldDescriptor(\n            name=\'group\',\n            full_name=\'caffe.ShuffleChannelParameter.group\',\n            index=0,\n            number=1,\n            type=13,\n            cpp_type=3,\n            label=1,\n            has_default_value=True,\n            default_value=1,\n            message_type=None,\n            enum_type=None,\n            containing_type=None,\n            is_extension=False,\n            extension_scope=None,\n            serialized_options=None,\n            file=DESCRIPTOR),\n    ],\n    extensions=[],\n    nested_types=[],\n    enum_types=[],\n    serialized_options=None,\n    is_extendable=False,\n    syntax=\'proto2\',\n    extension_ranges=[],\n    oneofs=[],\n    serialized_start=21863,\n    serialized_end=21906,\n)\n\n_BLOBPROTO.fields_by_name[\'shape\'].message_type = _BLOBSHAPE\n_BLOBPROTOVECTOR.fields_by_name[\'blobs\'].message_type = _BLOBPROTO\n_LABELMAP.fields_by_name[\'item\'].message_type = _LABELMAPITEM\n_BATCHSAMPLER.fields_by_name[\'sampler\'].message_type = _SAMPLER\n_BATCHSAMPLER.fields_by_name[\n    \'sample_constraint\'].message_type = _SAMPLECONSTRAINT\n_EMITCONSTRAINT.fields_by_name[\'emit_type\'].enum_type = _EMITCONSTRAINT_EMITTYPE\n_EMITCONSTRAINT_EMITTYPE.containing_type = _EMITCONSTRAINT\n_ANNOTATION.fields_by_name[\'bbox\'].message_type = _NORMALIZEDBBOX\n_ANNOTATIONGROUP.fields_by_name[\'annotation\'].message_type = _ANNOTATION\n_ANNOTATEDDATUM.fields_by_name[\'datum\'].message_type = _DATUM\n_ANNOTATEDDATUM.fields_by_name[\n    \'type\'].enum_type = _ANNOTATEDDATUM_ANNOTATIONTYPE\n_ANNOTATEDDATUM.fields_by_name[\n    \'annotation_group\'].message_type = _ANNOTATIONGROUP\n_ANNOTATEDDATUM_ANNOTATIONTYPE.containing_type = _ANNOTATEDDATUM\n_FILLERPARAMETER.fields_by_name[\n    \'variance_norm\'].enum_type = _FILLERPARAMETER_VARIANCENORM\n_FILLERPARAMETER_VARIANCENORM.containing_type = _FILLERPARAMETER\n_NETPARAMETER.fields_by_name[\'input_shape\'].message_type = _BLOBSHAPE\n_NETPARAMETER.fields_by_name[\'state\'].message_type = _NETSTATE\n_NETPARAMETER.fields_by_name[\'layer\'].message_type = _LAYERPARAMETER\n_NETPARAMETER.fields_by_name[\'layers\'].message_type = _V1LAYERPARAMETER\n_SOLVERPARAMETER.fields_by_name[\'net_param\'].message_type = _NETPARAMETER\n_SOLVERPARAMETER.fields_by_name[\'train_net_param\'].message_type = _NETPARAMETER\n_SOLVERPARAMETER.fields_by_name[\'test_net_param\'].message_type = _NETPARAMETER\n_SOLVERPARAMETER.fields_by_name[\'train_state\'].message_type = _NETSTATE\n_SOLVERPARAMETER.fields_by_name[\'test_state\'].message_type = _NETSTATE\n_SOLVERPARAMETER.fields_by_name[\n    \'snapshot_format\'].enum_type = _SOLVERPARAMETER_SNAPSHOTFORMAT\n_SOLVERPARAMETER.fields_by_name[\n    \'solver_mode\'].enum_type = _SOLVERPARAMETER_SOLVERMODE\n_SOLVERPARAMETER.fields_by_name[\n    \'solver_type\'].enum_type = _SOLVERPARAMETER_SOLVERTYPE\n_SOLVERPARAMETER_SNAPSHOTFORMAT.containing_type = _SOLVERPARAMETER\n_SOLVERPARAMETER_SOLVERMODE.containing_type = _SOLVERPARAMETER\n_SOLVERPARAMETER_SOLVERTYPE.containing_type = _SOLVERPARAMETER\n_SOLVERSTATE.fields_by_name[\'history\'].message_type = _BLOBPROTO\n_NETSTATE.fields_by_name[\'phase\'].enum_type = _PHASE\n_NETSTATERULE.fields_by_name[\'phase\'].enum_type = _PHASE\n_PARAMSPEC.fields_by_name[\'share_mode\'].enum_type = _PARAMSPEC_DIMCHECKMODE\n_PARAMSPEC_DIMCHECKMODE.containing_type = _PARAMSPEC\n_LAYERPARAMETER.fields_by_name[\'phase\'].enum_type = _PHASE\n_LAYERPARAMETER.fields_by_name[\'param\'].message_type = _PARAMSPEC\n_LAYERPARAMETER.fields_by_name[\'blobs\'].message_type = _BLOBPROTO\n_LAYERPARAMETER.fields_by_name[\'include\'].message_type = _NETSTATERULE\n_LAYERPARAMETER.fields_by_name[\'exclude\'].message_type = _NETSTATERULE\n_LAYERPARAMETER.fields_by_name[\n    \'transform_param\'].message_type = _TRANSFORMATIONPARAMETER\n_LAYERPARAMETER.fields_by_name[\'loss_param\'].message_type = _LOSSPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    \'accuracy_param\'].message_type = _ACCURACYPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    \'annotated_data_param\'].message_type = _ANNOTATEDDATAPARAMETER\n_LAYERPARAMETER.fields_by_name[\'argmax_param\'].message_type = _ARGMAXPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    \'batch_norm_param\'].message_type = _BATCHNORMPARAMETER\n_LAYERPARAMETER.fields_by_name[\'bias_param\'].message_type = _BIASPARAMETER\n_LAYERPARAMETER.fields_by_name[\'concat_param\'].message_type = _CONCATPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    \'contrastive_loss_param\'].message_type = _CONTRASTIVELOSSPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    \'convolution_param\'].message_type = _CONVOLUTIONPARAMETER\n_LAYERPARAMETER.fields_by_name[\'crop_param\'].message_type = _CROPPARAMETER\n_LAYERPARAMETER.fields_by_name[\'data_param\'].message_type = _DATAPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    \'detection_evaluate_param\'].message_type = _DETECTIONEVALUATEPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    \'detection_output_param\'].message_type = _DETECTIONOUTPUTPARAMETER\n_LAYERPARAMETER.fields_by_name[\'dropout_param\'].message_type = _DROPOUTPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    \'dummy_data_param\'].message_type = _DUMMYDATAPARAMETER\n_LAYERPARAMETER.fields_by_name[\'eltwise_param\'].message_type = _ELTWISEPARAMETER\n_LAYERPARAMETER.fields_by_name[\'elu_param\'].message_type = _ELUPARAMETER\n_LAYERPARAMETER.fields_by_name[\'embed_param\'].message_type = _EMBEDPARAMETER\n_LAYERPARAMETER.fields_by_name[\'exp_param\'].message_type = _EXPPARAMETER\n_LAYERPARAMETER.fields_by_name[\'flatten_param\'].message_type = _FLATTENPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    \'hdf5_data_param\'].message_type = _HDF5DATAPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    \'hdf5_output_param\'].message_type = _HDF5OUTPUTPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    \'hinge_loss_param\'].message_type = _HINGELOSSPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    \'image_data_param\'].message_type = _IMAGEDATAPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    \'infogain_loss_param\'].message_type = _INFOGAINLOSSPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    \'inner_product_param\'].message_type = _INNERPRODUCTPARAMETER\n_LAYERPARAMETER.fields_by_name[\'input_param\'].message_type = _INPUTPARAMETER\n_LAYERPARAMETER.fields_by_name[\'log_param\'].message_type = _LOGPARAMETER\n_LAYERPARAMETER.fields_by_name[\'lrn_param\'].message_type = _LRNPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    \'memory_data_param\'].message_type = _MEMORYDATAPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    \'multibox_loss_param\'].message_type = _MULTIBOXLOSSPARAMETER\n_LAYERPARAMETER.fields_by_name[\'mvn_param\'].message_type = _MVNPARAMETER\n_LAYERPARAMETER.fields_by_name[\'norm_param\'].message_type = _NORMALIZEPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    \'parameter_param\'].message_type = _PARAMETERPARAMETER\n_LAYERPARAMETER.fields_by_name[\'permute_param\'].message_type = _PERMUTEPARAMETER\n_LAYERPARAMETER.fields_by_name[\'pooling_param\'].message_type = _POOLINGPARAMETER\n_LAYERPARAMETER.fields_by_name[\'power_param\'].message_type = _POWERPARAMETER\n_LAYERPARAMETER.fields_by_name[\'prelu_param\'].message_type = _PRELUPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    \'prior_box_param\'].message_type = _PRIORBOXPARAMETER\n_LAYERPARAMETER.fields_by_name[\'python_param\'].message_type = _PYTHONPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    \'recurrent_param\'].message_type = _RECURRENTPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    \'reduction_param\'].message_type = _REDUCTIONPARAMETER\n_LAYERPARAMETER.fields_by_name[\'relu_param\'].message_type = _RELUPARAMETER\n_LAYERPARAMETER.fields_by_name[\'reshape_param\'].message_type = _RESHAPEPARAMETER\n_LAYERPARAMETER.fields_by_name[\'scale_param\'].message_type = _SCALEPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    \'shuffle_channel_param\'].message_type = _SHUFFLECHANNELPARAMETER\n_LAYERPARAMETER.fields_by_name[\'sigmoid_param\'].message_type = _SIGMOIDPARAMETER\n_LAYERPARAMETER.fields_by_name[\'softmax_param\'].message_type = _SOFTMAXPARAMETER\n_LAYERPARAMETER.fields_by_name[\'spp_param\'].message_type = _SPPPARAMETER\n_LAYERPARAMETER.fields_by_name[\'slice_param\'].message_type = _SLICEPARAMETER\n_LAYERPARAMETER.fields_by_name[\'tanh_param\'].message_type = _TANHPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    \'threshold_param\'].message_type = _THRESHOLDPARAMETER\n_LAYERPARAMETER.fields_by_name[\'tile_param\'].message_type = _TILEPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    \'video_data_param\'].message_type = _VIDEODATAPARAMETER\n_LAYERPARAMETER.fields_by_name[\n    \'window_data_param\'].message_type = _WINDOWDATAPARAMETER\n_TRANSFORMATIONPARAMETER.fields_by_name[\n    \'resize_param\'].message_type = _RESIZEPARAMETER\n_TRANSFORMATIONPARAMETER.fields_by_name[\n    \'noise_param\'].message_type = _NOISEPARAMETER\n_TRANSFORMATIONPARAMETER.fields_by_name[\n    \'distort_param\'].message_type = _DISTORTIONPARAMETER\n_TRANSFORMATIONPARAMETER.fields_by_name[\n    \'expand_param\'].message_type = _EXPANSIONPARAMETER\n_TRANSFORMATIONPARAMETER.fields_by_name[\n    \'emit_constraint\'].message_type = _EMITCONSTRAINT\n_RESIZEPARAMETER.fields_by_name[\n    \'resize_mode\'].enum_type = _RESIZEPARAMETER_RESIZE_MODE\n_RESIZEPARAMETER.fields_by_name[\n    \'pad_mode\'].enum_type = _RESIZEPARAMETER_PAD_MODE\n_RESIZEPARAMETER.fields_by_name[\n    \'interp_mode\'].enum_type = _RESIZEPARAMETER_INTERP_MODE\n_RESIZEPARAMETER_RESIZE_MODE.containing_type = _RESIZEPARAMETER\n_RESIZEPARAMETER_PAD_MODE.containing_type = _RESIZEPARAMETER\n_RESIZEPARAMETER_INTERP_MODE.containing_type = _RESIZEPARAMETER\n_NOISEPARAMETER.fields_by_name[\n    \'saltpepper_param\'].message_type = _SALTPEPPERPARAMETER\n_LOSSPARAMETER.fields_by_name[\n    \'normalization\'].enum_type = _LOSSPARAMETER_NORMALIZATIONMODE\n_LOSSPARAMETER_NORMALIZATIONMODE.containing_type = _LOSSPARAMETER\n_ANNOTATEDDATAPARAMETER.fields_by_name[\n    \'batch_sampler\'].message_type = _BATCHSAMPLER\n_ANNOTATEDDATAPARAMETER.fields_by_name[\n    \'anno_type\'].enum_type = _ANNOTATEDDATUM_ANNOTATIONTYPE\n_BIASPARAMETER.fields_by_name[\'filler\'].message_type = _FILLERPARAMETER\n_CONVOLUTIONPARAMETER.fields_by_name[\n    \'weight_filler\'].message_type = _FILLERPARAMETER\n_CONVOLUTIONPARAMETER.fields_by_name[\n    \'bias_filler\'].message_type = _FILLERPARAMETER\n_CONVOLUTIONPARAMETER.fields_by_name[\n    \'engine\'].enum_type = _CONVOLUTIONPARAMETER_ENGINE\n_CONVOLUTIONPARAMETER_ENGINE.containing_type = _CONVOLUTIONPARAMETER\n_DATAPARAMETER.fields_by_name[\'backend\'].enum_type = _DATAPARAMETER_DB\n_DATAPARAMETER_DB.containing_type = _DATAPARAMETER\n_DETECTIONEVALUATEPARAMETER.fields_by_name[\n    \'resize_param\'].message_type = _RESIZEPARAMETER\n_SAVEOUTPUTPARAMETER.fields_by_name[\n    \'resize_param\'].message_type = _RESIZEPARAMETER\n_DETECTIONOUTPUTPARAMETER.fields_by_name[\n    \'nms_param\'].message_type = _NONMAXIMUMSUPPRESSIONPARAMETER\n_DETECTIONOUTPUTPARAMETER.fields_by_name[\n    \'save_output_param\'].message_type = _SAVEOUTPUTPARAMETER\n_DETECTIONOUTPUTPARAMETER.fields_by_name[\n    \'code_type\'].enum_type = _PRIORBOXPARAMETER_CODETYPE\n_DUMMYDATAPARAMETER.fields_by_name[\n    \'data_filler\'].message_type = _FILLERPARAMETER\n_DUMMYDATAPARAMETER.fields_by_name[\'shape\'].message_type = _BLOBSHAPE\n_ELTWISEPARAMETER.fields_by_name[\n    \'operation\'].enum_type = _ELTWISEPARAMETER_ELTWISEOP\n_ELTWISEPARAMETER_ELTWISEOP.containing_type = _ELTWISEPARAMETER\n_EMBEDPARAMETER.fields_by_name[\'weight_filler\'].message_type = _FILLERPARAMETER\n_EMBEDPARAMETER.fields_by_name[\'bias_filler\'].message_type = _FILLERPARAMETER\n_HINGELOSSPARAMETER.fields_by_name[\'norm\'].enum_type = _HINGELOSSPARAMETER_NORM\n_HINGELOSSPARAMETER_NORM.containing_type = _HINGELOSSPARAMETER\n_INNERPRODUCTPARAMETER.fields_by_name[\n    \'weight_filler\'].message_type = _FILLERPARAMETER\n_INNERPRODUCTPARAMETER.fields_by_name[\n    \'bias_filler\'].message_type = _FILLERPARAMETER\n_INPUTPARAMETER.fields_by_name[\'shape\'].message_type = _BLOBSHAPE\n_LRNPARAMETER.fields_by_name[\'norm_region\'].enum_type = _LRNPARAMETER_NORMREGION\n_LRNPARAMETER.fields_by_name[\'engine\'].enum_type = _LRNPARAMETER_ENGINE\n_LRNPARAMETER_NORMREGION.containing_type = _LRNPARAMETER\n_LRNPARAMETER_ENGINE.containing_type = _LRNPARAMETER\n_MULTIBOXLOSSPARAMETER.fields_by_name[\n    \'loc_loss_type\'].enum_type = _MULTIBOXLOSSPARAMETER_LOCLOSSTYPE\n_MULTIBOXLOSSPARAMETER.fields_by_name[\n    \'conf_loss_type\'].enum_type = _MULTIBOXLOSSPARAMETER_CONFLOSSTYPE\n_MULTIBOXLOSSPARAMETER.fields_by_name[\n    \'match_type\'].enum_type = _MULTIBOXLOSSPARAMETER_MATCHTYPE\n_MULTIBOXLOSSPARAMETER.fields_by_name[\n    \'code_type\'].enum_type = _PRIORBOXPARAMETER_CODETYPE\n_MULTIBOXLOSSPARAMETER.fields_by_name[\n    \'mining_type\'].enum_type = _MULTIBOXLOSSPARAMETER_MININGTYPE\n_MULTIBOXLOSSPARAMETER.fields_by_name[\n    \'nms_param\'].message_type = _NONMAXIMUMSUPPRESSIONPARAMETER\n_MULTIBOXLOSSPARAMETER_LOCLOSSTYPE.containing_type = _MULTIBOXLOSSPARAMETER\n_MULTIBOXLOSSPARAMETER_CONFLOSSTYPE.containing_type = _MULTIBOXLOSSPARAMETER\n_MULTIBOXLOSSPARAMETER_MATCHTYPE.containing_type = _MULTIBOXLOSSPARAMETER\n_MULTIBOXLOSSPARAMETER_MININGTYPE.containing_type = _MULTIBOXLOSSPARAMETER\n_NORMALIZEPARAMETER.fields_by_name[\n    \'scale_filler\'].message_type = _FILLERPARAMETER\n_PARAMETERPARAMETER.fields_by_name[\'shape\'].message_type = _BLOBSHAPE\n_POOLINGPARAMETER.fields_by_name[\n    \'pool\'].enum_type = _POOLINGPARAMETER_POOLMETHOD\n_POOLINGPARAMETER.fields_by_name[\'engine\'].enum_type = _POOLINGPARAMETER_ENGINE\n_POOLINGPARAMETER_POOLMETHOD.containing_type = _POOLINGPARAMETER\n_POOLINGPARAMETER_ENGINE.containing_type = _POOLINGPARAMETER\n_PRIORBOXPARAMETER_CODETYPE.containing_type = _PRIORBOXPARAMETER\n_RECURRENTPARAMETER.fields_by_name[\n    \'weight_filler\'].message_type = _FILLERPARAMETER\n_RECURRENTPARAMETER.fields_by_name[\n    \'bias_filler\'].message_type = _FILLERPARAMETER\n_REDUCTIONPARAMETER.fields_by_name[\n    \'operation\'].enum_type = _REDUCTIONPARAMETER_REDUCTIONOP\n_REDUCTIONPARAMETER_REDUCTIONOP.containing_type = _REDUCTIONPARAMETER\n_RELUPARAMETER.fields_by_name[\'engine\'].enum_type = _RELUPARAMETER_ENGINE\n_RELUPARAMETER_ENGINE.containing_type = _RELUPARAMETER\n_RESHAPEPARAMETER.fields_by_name[\'shape\'].message_type = _BLOBSHAPE\n_SCALEPARAMETER.fields_by_name[\'filler\'].message_type = _FILLERPARAMETER\n_SCALEPARAMETER.fields_by_name[\'bias_filler\'].message_type = _FILLERPARAMETER\n_SIGMOIDPARAMETER.fields_by_name[\'engine\'].enum_type = _SIGMOIDPARAMETER_ENGINE\n_SIGMOIDPARAMETER_ENGINE.containing_type = _SIGMOIDPARAMETER\n_SOFTMAXPARAMETER.fields_by_name[\'engine\'].enum_type = _SOFTMAXPARAMETER_ENGINE\n_SOFTMAXPARAMETER_ENGINE.containing_type = _SOFTMAXPARAMETER\n_TANHPARAMETER.fields_by_name[\'engine\'].enum_type = _TANHPARAMETER_ENGINE\n_TANHPARAMETER_ENGINE.containing_type = _TANHPARAMETER\n_VIDEODATAPARAMETER.fields_by_name[\n    \'video_type\'].enum_type = _VIDEODATAPARAMETER_VIDEOTYPE\n_VIDEODATAPARAMETER_VIDEOTYPE.containing_type = _VIDEODATAPARAMETER\n_SPPPARAMETER.fields_by_name[\'pool\'].enum_type = _SPPPARAMETER_POOLMETHOD\n_SPPPARAMETER.fields_by_name[\'engine\'].enum_type = _SPPPARAMETER_ENGINE\n_SPPPARAMETER_POOLMETHOD.containing_type = _SPPPARAMETER\n_SPPPARAMETER_ENGINE.containing_type = _SPPPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'include\'].message_type = _NETSTATERULE\n_V1LAYERPARAMETER.fields_by_name[\'exclude\'].message_type = _NETSTATERULE\n_V1LAYERPARAMETER.fields_by_name[\'type\'].enum_type = _V1LAYERPARAMETER_LAYERTYPE\n_V1LAYERPARAMETER.fields_by_name[\'blobs\'].message_type = _BLOBPROTO\n_V1LAYERPARAMETER.fields_by_name[\n    \'blob_share_mode\'].enum_type = _V1LAYERPARAMETER_DIMCHECKMODE\n_V1LAYERPARAMETER.fields_by_name[\n    \'accuracy_param\'].message_type = _ACCURACYPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'argmax_param\'].message_type = _ARGMAXPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'concat_param\'].message_type = _CONCATPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\n    \'contrastive_loss_param\'].message_type = _CONTRASTIVELOSSPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\n    \'convolution_param\'].message_type = _CONVOLUTIONPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'data_param\'].message_type = _DATAPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\n    \'dropout_param\'].message_type = _DROPOUTPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\n    \'dummy_data_param\'].message_type = _DUMMYDATAPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\n    \'eltwise_param\'].message_type = _ELTWISEPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'exp_param\'].message_type = _EXPPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\n    \'hdf5_data_param\'].message_type = _HDF5DATAPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\n    \'hdf5_output_param\'].message_type = _HDF5OUTPUTPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\n    \'hinge_loss_param\'].message_type = _HINGELOSSPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\n    \'image_data_param\'].message_type = _IMAGEDATAPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\n    \'infogain_loss_param\'].message_type = _INFOGAINLOSSPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\n    \'inner_product_param\'].message_type = _INNERPRODUCTPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'lrn_param\'].message_type = _LRNPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\n    \'memory_data_param\'].message_type = _MEMORYDATAPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'mvn_param\'].message_type = _MVNPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\n    \'pooling_param\'].message_type = _POOLINGPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'power_param\'].message_type = _POWERPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'relu_param\'].message_type = _RELUPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\n    \'sigmoid_param\'].message_type = _SIGMOIDPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\n    \'softmax_param\'].message_type = _SOFTMAXPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'slice_param\'].message_type = _SLICEPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'tanh_param\'].message_type = _TANHPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\n    \'threshold_param\'].message_type = _THRESHOLDPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\n    \'window_data_param\'].message_type = _WINDOWDATAPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\n    \'transform_param\'].message_type = _TRANSFORMATIONPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'loss_param\'].message_type = _LOSSPARAMETER\n_V1LAYERPARAMETER.fields_by_name[\'layer\'].message_type = _V0LAYERPARAMETER\n_V1LAYERPARAMETER_LAYERTYPE.containing_type = _V1LAYERPARAMETER\n_V1LAYERPARAMETER_DIMCHECKMODE.containing_type = _V1LAYERPARAMETER\n_V0LAYERPARAMETER.fields_by_name[\n    \'weight_filler\'].message_type = _FILLERPARAMETER\n_V0LAYERPARAMETER.fields_by_name[\'bias_filler\'].message_type = _FILLERPARAMETER\n_V0LAYERPARAMETER.fields_by_name[\n    \'pool\'].enum_type = _V0LAYERPARAMETER_POOLMETHOD\n_V0LAYERPARAMETER.fields_by_name[\'blobs\'].message_type = _BLOBPROTO\n_V0LAYERPARAMETER.fields_by_name[\n    \'hdf5_output_param\'].message_type = _HDF5OUTPUTPARAMETER\n_V0LAYERPARAMETER_POOLMETHOD.containing_type = _V0LAYERPARAMETER\n_PRELUPARAMETER.fields_by_name[\'filler\'].message_type = _FILLERPARAMETER\nDESCRIPTOR.message_types_by_name[\'BlobShape\'] = _BLOBSHAPE\nDESCRIPTOR.message_types_by_name[\'BlobProto\'] = _BLOBPROTO\nDESCRIPTOR.message_types_by_name[\'BlobProtoVector\'] = _BLOBPROTOVECTOR\nDESCRIPTOR.message_types_by_name[\'Datum\'] = _DATUM\nDESCRIPTOR.message_types_by_name[\'LabelMapItem\'] = _LABELMAPITEM\nDESCRIPTOR.message_types_by_name[\'LabelMap\'] = _LABELMAP\nDESCRIPTOR.message_types_by_name[\'Sampler\'] = _SAMPLER\nDESCRIPTOR.message_types_by_name[\'SampleConstraint\'] = _SAMPLECONSTRAINT\nDESCRIPTOR.message_types_by_name[\'BatchSampler\'] = _BATCHSAMPLER\nDESCRIPTOR.message_types_by_name[\'EmitConstraint\'] = _EMITCONSTRAINT\nDESCRIPTOR.message_types_by_name[\'NormalizedBBox\'] = _NORMALIZEDBBOX\nDESCRIPTOR.message_types_by_name[\'Annotation\'] = _ANNOTATION\nDESCRIPTOR.message_types_by_name[\'AnnotationGroup\'] = _ANNOTATIONGROUP\nDESCRIPTOR.message_types_by_name[\'AnnotatedDatum\'] = _ANNOTATEDDATUM\nDESCRIPTOR.message_types_by_name[\'FillerParameter\'] = _FILLERPARAMETER\nDESCRIPTOR.message_types_by_name[\'NetParameter\'] = _NETPARAMETER\nDESCRIPTOR.message_types_by_name[\'SolverParameter\'] = _SOLVERPARAMETER\nDESCRIPTOR.message_types_by_name[\'SolverState\'] = _SOLVERSTATE\nDESCRIPTOR.message_types_by_name[\'NetState\'] = _NETSTATE\nDESCRIPTOR.message_types_by_name[\'NetStateRule\'] = _NETSTATERULE\nDESCRIPTOR.message_types_by_name[\'ParamSpec\'] = _PARAMSPEC\nDESCRIPTOR.message_types_by_name[\'LayerParameter\'] = _LAYERPARAMETER\nDESCRIPTOR.message_types_by_name[\n    \'TransformationParameter\'] = _TRANSFORMATIONPARAMETER\nDESCRIPTOR.message_types_by_name[\'ResizeParameter\'] = _RESIZEPARAMETER\nDESCRIPTOR.message_types_by_name[\'SaltPepperParameter\'] = _SALTPEPPERPARAMETER\nDESCRIPTOR.message_types_by_name[\'NoiseParameter\'] = _NOISEPARAMETER\nDESCRIPTOR.message_types_by_name[\'DistortionParameter\'] = _DISTORTIONPARAMETER\nDESCRIPTOR.message_types_by_name[\'ExpansionParameter\'] = _EXPANSIONPARAMETER\nDESCRIPTOR.message_types_by_name[\'LossParameter\'] = _LOSSPARAMETER\nDESCRIPTOR.message_types_by_name[\'AccuracyParameter\'] = _ACCURACYPARAMETER\nDESCRIPTOR.message_types_by_name[\n    \'AnnotatedDataParameter\'] = _ANNOTATEDDATAPARAMETER\nDESCRIPTOR.message_types_by_name[\'ArgMaxParameter\'] = _ARGMAXPARAMETER\nDESCRIPTOR.message_types_by_name[\'ConcatParameter\'] = _CONCATPARAMETER\nDESCRIPTOR.message_types_by_name[\'BatchNormParameter\'] = _BATCHNORMPARAMETER\nDESCRIPTOR.message_types_by_name[\'BiasParameter\'] = _BIASPARAMETER\nDESCRIPTOR.message_types_by_name[\n    \'ContrastiveLossParameter\'] = _CONTRASTIVELOSSPARAMETER\nDESCRIPTOR.message_types_by_name[\'ConvolutionParameter\'] = _CONVOLUTIONPARAMETER\nDESCRIPTOR.message_types_by_name[\'CropParameter\'] = _CROPPARAMETER\nDESCRIPTOR.message_types_by_name[\'DataParameter\'] = _DATAPARAMETER\nDESCRIPTOR.message_types_by_name[\n    \'DetectionEvaluateParameter\'] = _DETECTIONEVALUATEPARAMETER\nDESCRIPTOR.message_types_by_name[\n    \'NonMaximumSuppressionParameter\'] = _NONMAXIMUMSUPPRESSIONPARAMETER\nDESCRIPTOR.message_types_by_name[\'SaveOutputParameter\'] = _SAVEOUTPUTPARAMETER\nDESCRIPTOR.message_types_by_name[\n    \'DetectionOutputParameter\'] = _DETECTIONOUTPUTPARAMETER\nDESCRIPTOR.message_types_by_name[\'DropoutParameter\'] = _DROPOUTPARAMETER\nDESCRIPTOR.message_types_by_name[\'DummyDataParameter\'] = _DUMMYDATAPARAMETER\nDESCRIPTOR.message_types_by_name[\'EltwiseParameter\'] = _ELTWISEPARAMETER\nDESCRIPTOR.message_types_by_name[\'ELUParameter\'] = _ELUPARAMETER\nDESCRIPTOR.message_types_by_name[\'EmbedParameter\'] = _EMBEDPARAMETER\nDESCRIPTOR.message_types_by_name[\'ExpParameter\'] = _EXPPARAMETER\nDESCRIPTOR.message_types_by_name[\'FlattenParameter\'] = _FLATTENPARAMETER\nDESCRIPTOR.message_types_by_name[\'HDF5DataParameter\'] = _HDF5DATAPARAMETER\nDESCRIPTOR.message_types_by_name[\'HDF5OutputParameter\'] = _HDF5OUTPUTPARAMETER\nDESCRIPTOR.message_types_by_name[\'HingeLossParameter\'] = _HINGELOSSPARAMETER\nDESCRIPTOR.message_types_by_name[\'ImageDataParameter\'] = _IMAGEDATAPARAMETER\nDESCRIPTOR.message_types_by_name[\n    \'InfogainLossParameter\'] = _INFOGAINLOSSPARAMETER\nDESCRIPTOR.message_types_by_name[\n    \'InnerProductParameter\'] = _INNERPRODUCTPARAMETER\nDESCRIPTOR.message_types_by_name[\'InputParameter\'] = _INPUTPARAMETER\nDESCRIPTOR.message_types_by_name[\'LogParameter\'] = _LOGPARAMETER\nDESCRIPTOR.message_types_by_name[\'LRNParameter\'] = _LRNPARAMETER\nDESCRIPTOR.message_types_by_name[\'MemoryDataParameter\'] = _MEMORYDATAPARAMETER\nDESCRIPTOR.message_types_by_name[\n    \'MultiBoxLossParameter\'] = _MULTIBOXLOSSPARAMETER\nDESCRIPTOR.message_types_by_name[\'MVNParameter\'] = _MVNPARAMETER\nDESCRIPTOR.message_types_by_name[\'NormalizeParameter\'] = _NORMALIZEPARAMETER\nDESCRIPTOR.message_types_by_name[\'ParameterParameter\'] = _PARAMETERPARAMETER\nDESCRIPTOR.message_types_by_name[\'PermuteParameter\'] = _PERMUTEPARAMETER\nDESCRIPTOR.message_types_by_name[\'PoolingParameter\'] = _POOLINGPARAMETER\nDESCRIPTOR.message_types_by_name[\'PowerParameter\'] = _POWERPARAMETER\nDESCRIPTOR.message_types_by_name[\'PriorBoxParameter\'] = _PRIORBOXPARAMETER\nDESCRIPTOR.message_types_by_name[\'PythonParameter\'] = _PYTHONPARAMETER\nDESCRIPTOR.message_types_by_name[\'RecurrentParameter\'] = _RECURRENTPARAMETER\nDESCRIPTOR.message_types_by_name[\'ReductionParameter\'] = _REDUCTIONPARAMETER\nDESCRIPTOR.message_types_by_name[\'ReLUParameter\'] = _RELUPARAMETER\nDESCRIPTOR.message_types_by_name[\'ReshapeParameter\'] = _RESHAPEPARAMETER\nDESCRIPTOR.message_types_by_name[\'ScaleParameter\'] = _SCALEPARAMETER\nDESCRIPTOR.message_types_by_name[\'SigmoidParameter\'] = _SIGMOIDPARAMETER\nDESCRIPTOR.message_types_by_name[\'SliceParameter\'] = _SLICEPARAMETER\nDESCRIPTOR.message_types_by_name[\'SoftmaxParameter\'] = _SOFTMAXPARAMETER\nDESCRIPTOR.message_types_by_name[\'TanHParameter\'] = _TANHPARAMETER\nDESCRIPTOR.message_types_by_name[\'TileParameter\'] = _TILEPARAMETER\nDESCRIPTOR.message_types_by_name[\'ThresholdParameter\'] = _THRESHOLDPARAMETER\nDESCRIPTOR.message_types_by_name[\'VideoDataParameter\'] = _VIDEODATAPARAMETER\nDESCRIPTOR.message_types_by_name[\'WindowDataParameter\'] = _WINDOWDATAPARAMETER\nDESCRIPTOR.message_types_by_name[\'SPPParameter\'] = _SPPPARAMETER\nDESCRIPTOR.message_types_by_name[\'V1LayerParameter\'] = _V1LAYERPARAMETER\nDESCRIPTOR.message_types_by_name[\'V0LayerParameter\'] = _V0LAYERPARAMETER\nDESCRIPTOR.message_types_by_name[\'PReLUParameter\'] = _PRELUPARAMETER\nDESCRIPTOR.message_types_by_name[\n    \'ShuffleChannelParameter\'] = _SHUFFLECHANNELPARAMETER\nDESCRIPTOR.enum_types_by_name[\'Phase\'] = _PHASE\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\n\nBlobShape = _reflection.GeneratedProtocolMessageType(\n    \'BlobShape\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_BLOBSHAPE,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.BlobShape)\n         ))\n_sym_db.RegisterMessage(BlobShape)\n\nBlobProto = _reflection.GeneratedProtocolMessageType(\n    \'BlobProto\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_BLOBPROTO,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.BlobProto)\n         ))\n_sym_db.RegisterMessage(BlobProto)\n\nBlobProtoVector = _reflection.GeneratedProtocolMessageType(\n    \'BlobProtoVector\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_BLOBPROTOVECTOR,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.BlobProtoVector)\n         ))\n_sym_db.RegisterMessage(BlobProtoVector)\n\nDatum = _reflection.GeneratedProtocolMessageType(\n    \'Datum\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_DATUM,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.Datum)\n         ))\n_sym_db.RegisterMessage(Datum)\n\nLabelMapItem = _reflection.GeneratedProtocolMessageType(\n    \'LabelMapItem\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_LABELMAPITEM,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.LabelMapItem)\n         ))\n_sym_db.RegisterMessage(LabelMapItem)\n\nLabelMap = _reflection.GeneratedProtocolMessageType(\n    \'LabelMap\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_LABELMAP,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.LabelMap)\n         ))\n_sym_db.RegisterMessage(LabelMap)\n\nSampler = _reflection.GeneratedProtocolMessageType(\n    \'Sampler\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_SAMPLER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.Sampler)\n         ))\n_sym_db.RegisterMessage(Sampler)\n\nSampleConstraint = _reflection.GeneratedProtocolMessageType(\n    \'SampleConstraint\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_SAMPLECONSTRAINT,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.SampleConstraint)\n         ))\n_sym_db.RegisterMessage(SampleConstraint)\n\nBatchSampler = _reflection.GeneratedProtocolMessageType(\n    \'BatchSampler\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_BATCHSAMPLER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.BatchSampler)\n         ))\n_sym_db.RegisterMessage(BatchSampler)\n\nEmitConstraint = _reflection.GeneratedProtocolMessageType(\n    \'EmitConstraint\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_EMITCONSTRAINT,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.EmitConstraint)\n         ))\n_sym_db.RegisterMessage(EmitConstraint)\n\nNormalizedBBox = _reflection.GeneratedProtocolMessageType(\n    \'NormalizedBBox\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_NORMALIZEDBBOX,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.NormalizedBBox)\n         ))\n_sym_db.RegisterMessage(NormalizedBBox)\n\nAnnotation = _reflection.GeneratedProtocolMessageType(\n    \'Annotation\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_ANNOTATION,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.Annotation)\n         ))\n_sym_db.RegisterMessage(Annotation)\n\nAnnotationGroup = _reflection.GeneratedProtocolMessageType(\n    \'AnnotationGroup\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_ANNOTATIONGROUP,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.AnnotationGroup)\n         ))\n_sym_db.RegisterMessage(AnnotationGroup)\n\nAnnotatedDatum = _reflection.GeneratedProtocolMessageType(\n    \'AnnotatedDatum\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_ANNOTATEDDATUM,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.AnnotatedDatum)\n         ))\n_sym_db.RegisterMessage(AnnotatedDatum)\n\nFillerParameter = _reflection.GeneratedProtocolMessageType(\n    \'FillerParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_FILLERPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.FillerParameter)\n         ))\n_sym_db.RegisterMessage(FillerParameter)\n\nNetParameter = _reflection.GeneratedProtocolMessageType(\n    \'NetParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_NETPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.NetParameter)\n         ))\n_sym_db.RegisterMessage(NetParameter)\n\nSolverParameter = _reflection.GeneratedProtocolMessageType(\n    \'SolverParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_SOLVERPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.SolverParameter)\n         ))\n_sym_db.RegisterMessage(SolverParameter)\n\nSolverState = _reflection.GeneratedProtocolMessageType(\n    \'SolverState\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_SOLVERSTATE,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.SolverState)\n         ))\n_sym_db.RegisterMessage(SolverState)\n\nNetState = _reflection.GeneratedProtocolMessageType(\n    \'NetState\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_NETSTATE,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.NetState)\n         ))\n_sym_db.RegisterMessage(NetState)\n\nNetStateRule = _reflection.GeneratedProtocolMessageType(\n    \'NetStateRule\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_NETSTATERULE,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.NetStateRule)\n         ))\n_sym_db.RegisterMessage(NetStateRule)\n\nParamSpec = _reflection.GeneratedProtocolMessageType(\n    \'ParamSpec\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_PARAMSPEC,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.ParamSpec)\n         ))\n_sym_db.RegisterMessage(ParamSpec)\n\nLayerParameter = _reflection.GeneratedProtocolMessageType(\n    \'LayerParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_LAYERPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.LayerParameter)\n         ))\n_sym_db.RegisterMessage(LayerParameter)\n\nTransformationParameter = _reflection.GeneratedProtocolMessageType(\n    \'TransformationParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_TRANSFORMATIONPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.TransformationParameter)\n         ))\n_sym_db.RegisterMessage(TransformationParameter)\n\nResizeParameter = _reflection.GeneratedProtocolMessageType(\n    \'ResizeParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_RESIZEPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.ResizeParameter)\n         ))\n_sym_db.RegisterMessage(ResizeParameter)\n\nSaltPepperParameter = _reflection.GeneratedProtocolMessageType(\n    \'SaltPepperParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_SALTPEPPERPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.SaltPepperParameter)\n         ))\n_sym_db.RegisterMessage(SaltPepperParameter)\n\nNoiseParameter = _reflection.GeneratedProtocolMessageType(\n    \'NoiseParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_NOISEPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.NoiseParameter)\n         ))\n_sym_db.RegisterMessage(NoiseParameter)\n\nDistortionParameter = _reflection.GeneratedProtocolMessageType(\n    \'DistortionParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_DISTORTIONPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.DistortionParameter)\n         ))\n_sym_db.RegisterMessage(DistortionParameter)\n\nExpansionParameter = _reflection.GeneratedProtocolMessageType(\n    \'ExpansionParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_EXPANSIONPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.ExpansionParameter)\n         ))\n_sym_db.RegisterMessage(ExpansionParameter)\n\nLossParameter = _reflection.GeneratedProtocolMessageType(\n    \'LossParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_LOSSPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.LossParameter)\n         ))\n_sym_db.RegisterMessage(LossParameter)\n\nAccuracyParameter = _reflection.GeneratedProtocolMessageType(\n    \'AccuracyParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_ACCURACYPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.AccuracyParameter)\n         ))\n_sym_db.RegisterMessage(AccuracyParameter)\n\nAnnotatedDataParameter = _reflection.GeneratedProtocolMessageType(\n    \'AnnotatedDataParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_ANNOTATEDDATAPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.AnnotatedDataParameter)\n         ))\n_sym_db.RegisterMessage(AnnotatedDataParameter)\n\nArgMaxParameter = _reflection.GeneratedProtocolMessageType(\n    \'ArgMaxParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_ARGMAXPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.ArgMaxParameter)\n         ))\n_sym_db.RegisterMessage(ArgMaxParameter)\n\nConcatParameter = _reflection.GeneratedProtocolMessageType(\n    \'ConcatParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_CONCATPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.ConcatParameter)\n         ))\n_sym_db.RegisterMessage(ConcatParameter)\n\nBatchNormParameter = _reflection.GeneratedProtocolMessageType(\n    \'BatchNormParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_BATCHNORMPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.BatchNormParameter)\n         ))\n_sym_db.RegisterMessage(BatchNormParameter)\n\nBiasParameter = _reflection.GeneratedProtocolMessageType(\n    \'BiasParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_BIASPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.BiasParameter)\n         ))\n_sym_db.RegisterMessage(BiasParameter)\n\nContrastiveLossParameter = _reflection.GeneratedProtocolMessageType(\n    \'ContrastiveLossParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_CONTRASTIVELOSSPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.ContrastiveLossParameter)\n         ))\n_sym_db.RegisterMessage(ContrastiveLossParameter)\n\nConvolutionParameter = _reflection.GeneratedProtocolMessageType(\n    \'ConvolutionParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_CONVOLUTIONPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.ConvolutionParameter)\n         ))\n_sym_db.RegisterMessage(ConvolutionParameter)\n\nCropParameter = _reflection.GeneratedProtocolMessageType(\n    \'CropParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_CROPPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.CropParameter)\n         ))\n_sym_db.RegisterMessage(CropParameter)\n\nDataParameter = _reflection.GeneratedProtocolMessageType(\n    \'DataParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_DATAPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.DataParameter)\n         ))\n_sym_db.RegisterMessage(DataParameter)\n\nDetectionEvaluateParameter = _reflection.GeneratedProtocolMessageType(\n    \'DetectionEvaluateParameter\',\n    (_message.Message, ),\n    dict(\n        DESCRIPTOR=_DETECTIONEVALUATEPARAMETER,\n        __module__=\'caffe_pb2\'\n        # @@protoc_insertion_point(class_scope:caffe.DetectionEvaluateParameter)\n    ))\n_sym_db.RegisterMessage(DetectionEvaluateParameter)\n\nNonMaximumSuppressionParameter = _reflection.GeneratedProtocolMessageType(\n    \'NonMaximumSuppressionParameter\',\n    (_message.Message, ),\n    dict(\n        DESCRIPTOR=_NONMAXIMUMSUPPRESSIONPARAMETER,\n        __module__=\'caffe_pb2\'\n        # @@protoc_insertion_point(class_scope:caffe.NonMaximumSuppressionParameter)\n    ))\n_sym_db.RegisterMessage(NonMaximumSuppressionParameter)\n\nSaveOutputParameter = _reflection.GeneratedProtocolMessageType(\n    \'SaveOutputParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_SAVEOUTPUTPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.SaveOutputParameter)\n         ))\n_sym_db.RegisterMessage(SaveOutputParameter)\n\nDetectionOutputParameter = _reflection.GeneratedProtocolMessageType(\n    \'DetectionOutputParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_DETECTIONOUTPUTPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.DetectionOutputParameter)\n         ))\n_sym_db.RegisterMessage(DetectionOutputParameter)\n\nDropoutParameter = _reflection.GeneratedProtocolMessageType(\n    \'DropoutParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_DROPOUTPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.DropoutParameter)\n         ))\n_sym_db.RegisterMessage(DropoutParameter)\n\nDummyDataParameter = _reflection.GeneratedProtocolMessageType(\n    \'DummyDataParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_DUMMYDATAPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.DummyDataParameter)\n         ))\n_sym_db.RegisterMessage(DummyDataParameter)\n\nEltwiseParameter = _reflection.GeneratedProtocolMessageType(\n    \'EltwiseParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_ELTWISEPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.EltwiseParameter)\n         ))\n_sym_db.RegisterMessage(EltwiseParameter)\n\nELUParameter = _reflection.GeneratedProtocolMessageType(\n    \'ELUParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_ELUPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.ELUParameter)\n         ))\n_sym_db.RegisterMessage(ELUParameter)\n\nEmbedParameter = _reflection.GeneratedProtocolMessageType(\n    \'EmbedParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_EMBEDPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.EmbedParameter)\n         ))\n_sym_db.RegisterMessage(EmbedParameter)\n\nExpParameter = _reflection.GeneratedProtocolMessageType(\n    \'ExpParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_EXPPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.ExpParameter)\n         ))\n_sym_db.RegisterMessage(ExpParameter)\n\nFlattenParameter = _reflection.GeneratedProtocolMessageType(\n    \'FlattenParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_FLATTENPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.FlattenParameter)\n         ))\n_sym_db.RegisterMessage(FlattenParameter)\n\nHDF5DataParameter = _reflection.GeneratedProtocolMessageType(\n    \'HDF5DataParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_HDF5DATAPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.HDF5DataParameter)\n         ))\n_sym_db.RegisterMessage(HDF5DataParameter)\n\nHDF5OutputParameter = _reflection.GeneratedProtocolMessageType(\n    \'HDF5OutputParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_HDF5OUTPUTPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.HDF5OutputParameter)\n         ))\n_sym_db.RegisterMessage(HDF5OutputParameter)\n\nHingeLossParameter = _reflection.GeneratedProtocolMessageType(\n    \'HingeLossParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_HINGELOSSPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.HingeLossParameter)\n         ))\n_sym_db.RegisterMessage(HingeLossParameter)\n\nImageDataParameter = _reflection.GeneratedProtocolMessageType(\n    \'ImageDataParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_IMAGEDATAPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.ImageDataParameter)\n         ))\n_sym_db.RegisterMessage(ImageDataParameter)\n\nInfogainLossParameter = _reflection.GeneratedProtocolMessageType(\n    \'InfogainLossParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_INFOGAINLOSSPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.InfogainLossParameter)\n         ))\n_sym_db.RegisterMessage(InfogainLossParameter)\n\nInnerProductParameter = _reflection.GeneratedProtocolMessageType(\n    \'InnerProductParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_INNERPRODUCTPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.InnerProductParameter)\n         ))\n_sym_db.RegisterMessage(InnerProductParameter)\n\nInputParameter = _reflection.GeneratedProtocolMessageType(\n    \'InputParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_INPUTPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.InputParameter)\n         ))\n_sym_db.RegisterMessage(InputParameter)\n\nLogParameter = _reflection.GeneratedProtocolMessageType(\n    \'LogParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_LOGPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.LogParameter)\n         ))\n_sym_db.RegisterMessage(LogParameter)\n\nLRNParameter = _reflection.GeneratedProtocolMessageType(\n    \'LRNParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_LRNPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.LRNParameter)\n         ))\n_sym_db.RegisterMessage(LRNParameter)\n\nMemoryDataParameter = _reflection.GeneratedProtocolMessageType(\n    \'MemoryDataParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_MEMORYDATAPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.MemoryDataParameter)\n         ))\n_sym_db.RegisterMessage(MemoryDataParameter)\n\nMultiBoxLossParameter = _reflection.GeneratedProtocolMessageType(\n    \'MultiBoxLossParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_MULTIBOXLOSSPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.MultiBoxLossParameter)\n         ))\n_sym_db.RegisterMessage(MultiBoxLossParameter)\n\nMVNParameter = _reflection.GeneratedProtocolMessageType(\n    \'MVNParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_MVNPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.MVNParameter)\n         ))\n_sym_db.RegisterMessage(MVNParameter)\n\nNormalizeParameter = _reflection.GeneratedProtocolMessageType(\n    \'NormalizeParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_NORMALIZEPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.NormalizeParameter)\n         ))\n_sym_db.RegisterMessage(NormalizeParameter)\n\nParameterParameter = _reflection.GeneratedProtocolMessageType(\n    \'ParameterParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_PARAMETERPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.ParameterParameter)\n         ))\n_sym_db.RegisterMessage(ParameterParameter)\n\nPermuteParameter = _reflection.GeneratedProtocolMessageType(\n    \'PermuteParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_PERMUTEPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.PermuteParameter)\n         ))\n_sym_db.RegisterMessage(PermuteParameter)\n\nPoolingParameter = _reflection.GeneratedProtocolMessageType(\n    \'PoolingParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_POOLINGPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.PoolingParameter)\n         ))\n_sym_db.RegisterMessage(PoolingParameter)\n\nPowerParameter = _reflection.GeneratedProtocolMessageType(\n    \'PowerParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_POWERPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.PowerParameter)\n         ))\n_sym_db.RegisterMessage(PowerParameter)\n\nPriorBoxParameter = _reflection.GeneratedProtocolMessageType(\n    \'PriorBoxParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_PRIORBOXPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.PriorBoxParameter)\n         ))\n_sym_db.RegisterMessage(PriorBoxParameter)\n\nPythonParameter = _reflection.GeneratedProtocolMessageType(\n    \'PythonParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_PYTHONPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.PythonParameter)\n         ))\n_sym_db.RegisterMessage(PythonParameter)\n\nRecurrentParameter = _reflection.GeneratedProtocolMessageType(\n    \'RecurrentParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_RECURRENTPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.RecurrentParameter)\n         ))\n_sym_db.RegisterMessage(RecurrentParameter)\n\nReductionParameter = _reflection.GeneratedProtocolMessageType(\n    \'ReductionParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_REDUCTIONPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.ReductionParameter)\n         ))\n_sym_db.RegisterMessage(ReductionParameter)\n\nReLUParameter = _reflection.GeneratedProtocolMessageType(\n    \'ReLUParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_RELUPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.ReLUParameter)\n         ))\n_sym_db.RegisterMessage(ReLUParameter)\n\nReshapeParameter = _reflection.GeneratedProtocolMessageType(\n    \'ReshapeParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_RESHAPEPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.ReshapeParameter)\n         ))\n_sym_db.RegisterMessage(ReshapeParameter)\n\nScaleParameter = _reflection.GeneratedProtocolMessageType(\n    \'ScaleParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_SCALEPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.ScaleParameter)\n         ))\n_sym_db.RegisterMessage(ScaleParameter)\n\nSigmoidParameter = _reflection.GeneratedProtocolMessageType(\n    \'SigmoidParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_SIGMOIDPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.SigmoidParameter)\n         ))\n_sym_db.RegisterMessage(SigmoidParameter)\n\nSliceParameter = _reflection.GeneratedProtocolMessageType(\n    \'SliceParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_SLICEPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.SliceParameter)\n         ))\n_sym_db.RegisterMessage(SliceParameter)\n\nSoftmaxParameter = _reflection.GeneratedProtocolMessageType(\n    \'SoftmaxParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_SOFTMAXPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.SoftmaxParameter)\n         ))\n_sym_db.RegisterMessage(SoftmaxParameter)\n\nTanHParameter = _reflection.GeneratedProtocolMessageType(\n    \'TanHParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_TANHPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.TanHParameter)\n         ))\n_sym_db.RegisterMessage(TanHParameter)\n\nTileParameter = _reflection.GeneratedProtocolMessageType(\n    \'TileParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_TILEPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.TileParameter)\n         ))\n_sym_db.RegisterMessage(TileParameter)\n\nThresholdParameter = _reflection.GeneratedProtocolMessageType(\n    \'ThresholdParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_THRESHOLDPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.ThresholdParameter)\n         ))\n_sym_db.RegisterMessage(ThresholdParameter)\n\nVideoDataParameter = _reflection.GeneratedProtocolMessageType(\n    \'VideoDataParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_VIDEODATAPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.VideoDataParameter)\n         ))\n_sym_db.RegisterMessage(VideoDataParameter)\n\nWindowDataParameter = _reflection.GeneratedProtocolMessageType(\n    \'WindowDataParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_WINDOWDATAPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.WindowDataParameter)\n         ))\n_sym_db.RegisterMessage(WindowDataParameter)\n\nSPPParameter = _reflection.GeneratedProtocolMessageType(\n    \'SPPParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_SPPPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.SPPParameter)\n         ))\n_sym_db.RegisterMessage(SPPParameter)\n\nV1LayerParameter = _reflection.GeneratedProtocolMessageType(\n    \'V1LayerParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_V1LAYERPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.V1LayerParameter)\n         ))\n_sym_db.RegisterMessage(V1LayerParameter)\n\nV0LayerParameter = _reflection.GeneratedProtocolMessageType(\n    \'V0LayerParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_V0LAYERPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.V0LayerParameter)\n         ))\n_sym_db.RegisterMessage(V0LayerParameter)\n\nPReLUParameter = _reflection.GeneratedProtocolMessageType(\n    \'PReLUParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_PRELUPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.PReLUParameter)\n         ))\n_sym_db.RegisterMessage(PReLUParameter)\n\nShuffleChannelParameter = _reflection.GeneratedProtocolMessageType(\n    \'ShuffleChannelParameter\',\n    (_message.Message, ),\n    dict(DESCRIPTOR=_SHUFFLECHANNELPARAMETER,\n         __module__=\'caffe_pb2\'\n         # @@protoc_insertion_point(class_scope:caffe.ShuffleChannelParameter)\n         ))\n_sym_db.RegisterMessage(ShuffleChannelParameter)\n\n_BLOBSHAPE.fields_by_name[\'dim\']._options = None\n_BLOBPROTO.fields_by_name[\'data\']._options = None\n_BLOBPROTO.fields_by_name[\'diff\']._options = None\n_BLOBPROTO.fields_by_name[\'double_data\']._options = None\n_BLOBPROTO.fields_by_name[\'double_diff\']._options = None\n# @@protoc_insertion_point(module_scope)\n'"
x2paddle/decoder/onnx_decoder.py,0,"b'#   Copyright (c) 2019  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License""\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom x2paddle.core.graph import GraphNode, Graph\nfrom x2paddle.core.fluid_code import FluidCode\nfrom onnx.checker import ValidationError\nfrom onnx.checker import check_model\nfrom onnx.utils import polish_model\nfrom onnx import helper\nfrom onnx.helper import get_attribute_value, make_attribute\nfrom onnx.shape_inference import infer_shapes\nfrom onnx.mapping import TENSOR_TYPE_TO_NP_TYPE\nfrom onnx.numpy_helper import to_array\nfrom onnx import AttributeProto, TensorProto, GraphProto\nfrom collections import OrderedDict as Dict\nimport onnx\nfrom onnx.helper import ValueInfoProto\nimport numpy as np\nfrom copy import deepcopy\nimport logging as _logging\nimport os\n\ndefault_op_domain = \'ai.onnx\'\n_logger = _logging.getLogger(__name__)\n\n\nclass ONNXGraphNode(GraphNode):\n    def __init__(self, layer, layer_name=None):\n        if layer_name is None:\n            super(ONNXGraphNode, self).__init__(layer, layer.name)\n        else:\n            super(ONNXGraphNode, self).__init__(layer, layer_name)\n        self.layer_type = layer.op_type\n        self.fluid_code = FluidCode()\n        self.attr_map = self.get_attr_map()\n        self.out_shapes = list()\n        self.dtype = None\n        self.which_child = {}\n\n    def get_attr_map(self):\n        """"""\n        convert ONNX node attributes to dict\n        """"""\n        return {\n            attr.name: self.get_attribute_value2(attr)\n            for attr in self.layer.attribute\n        }\n\n    @property\n    def value(self):\n        assert \'Constant\' in self.layer_type, ""Only Constant | ConstantOfShape node has value.""\n        if \'value\' not in self.attr_map:\n            return None\n        return self.attr_map[\'value\']\n\n    def get_attribute_value2(self, attr):\n        """"""\n        get_attribute_value enhanced\n        """"""\n        if attr.type == onnx.AttributeProto.TENSOR:\n            dtype = np.dtype(TENSOR_TYPE_TO_NP_TYPE[attr.t.data_type])\n            data = attr.t.raw_data\n            value = np.frombuffer(data,\n                                  dtype=dtype,\n                                  count=(len(data) // dtype.itemsize))\n        elif attr.type == onnx.AttributeProto.STRING:\n            value = attr.s\n            value = value.decode() if isinstance(value, bytes) else value\n        else:\n            value = get_attribute_value(attr)\n        return value\n\n    def get_attr(self, name, default=None):\n        """"""\n        get_attribute_value from attr_map\n        """"""\n        if name not in self.attr_map:\n            return default\n        return self.attr_map[name]\n\n\nclass ONNXGraphDataNode(GraphNode):\n    def __init__(self, layer, layer_name=None, is_global_input=False):\n        if layer_name is None:\n            super(ONNXGraphDataNode, self).__init__(layer, layer.name)\n        else:\n            super(ONNXGraphDataNode, self).__init__(layer, layer_name)\n        if is_global_input:\n            self.layer_type = \'place_holder\'\n        else:\n            self.layer_type = \'create_parameter\'\n        self.layer_name = layer_name\n        self.fluid_code = FluidCode()\n        self.weight = None\n        self.embeded_as = None\n        self.which_child = {}\n\n    @property\n    def out_shapes(self):\n        if isinstance(self.layer, ValueInfoProto):\n            values = self.layer.type.tensor_type.shape.dim\n            out_shapes = list()\n            out_shapes.append([dim.dim_value for dim in values])\n            return out_shapes\n        else:\n            values = self.layer.dims\n            out_shapes = list()\n            out_shapes.append(values)\n            return out_shapes\n\n    @property\n    def dtype(self):\n        if isinstance(self.layer, ValueInfoProto):\n            dtype = self.layer.type.tensor_type.elem_type\n            return TENSOR_TYPE_TO_NP_TYPE[dtype]\n        else:\n            dtype = self.layer.data_type\n            return TENSOR_TYPE_TO_NP_TYPE[dtype]\n\n\nclass ONNXGraph(Graph):\n    def __init__(self, onnx_model):\n        super(ONNXGraph, self).__init__(onnx_model.graph)\n        self.onnx_model = onnx_model\n        self.initializer = {}\n        self.place_holder_nodes = list()\n        self.get_place_holder_nodes()\n        self.value_infos = self.inferred_model_value_info(self.model)\n        self.results_of_inference = dict()\n\n    def get_inner_nodes(self):\n        """"""\n        generate inner node of ONNX model\n        """"""\n        inner_nodes = []\n        if not isinstance(self.model, onnx.GraphProto):\n            logger.error(\'graph is not a GraphProto instance\')\n            return\n        for initializer in self.model.initializer:\n            name = initializer.name\n            inner_nodes.append(name)\n        return inner_nodes\n\n    def get_place_holder_nodes(self):\n        """"""\n        generate place_holder node of ONNX model\n        """"""\n        inner_nodes = self.get_inner_nodes()\n        input_nodes = [value.name for value in self.model.input]\n        for ipt_data in input_nodes:\n            if ipt_data not in inner_nodes:\n                self.place_holder_nodes.append(ipt_data)\n\n    def get_output_nodes(self):\n        """"""\n        generate output_nodes node of ONNX model\n        """"""\n        inner_nodes = self.get_inner_nodes()\n        output_nodes = [value.name for value in self.model.output]\n        for opt_data in output_nodes:\n            if opt_data not in inner_nodes:\n                self.output_nodes.append(opt_data)\n\n    def is_place_holder_nodes(self, layer):\n        """"""\n        return layer is or not place_holder node\n        """"""\n        if layer in self.place_holder_nodes:\n            return True\n        return False\n\n    def build(self):\n        """"""\n        build topo_sort of ONNX model\n        """"""\n        for layer in self.model.node:\n            node = ONNXGraphNode(layer)\n            self.node_map[layer.name] = node\n\n        for layer in self.model.input:\n            if layer.name not in self.node_map:\n                is_place_holder = self.is_place_holder_nodes(layer.name)\n                self.node_map[layer.name] = ONNXGraphDataNode(\n                    layer,\n                    layer_name=layer.name,\n                    is_global_input=is_place_holder)\n\n        #set data node\'s weight\n        for initializer in self.model.initializer:\n            name = initializer.name\n            weight = to_array(initializer)\n            if name in self.node_map:\n                if isinstance(self.node_map[name], ONNXGraphDataNode):\n                    self.node_map[name].weight = weight\n                    self.node_map[name].embeded_as = []\n            else:\n                self.node_map[name] = ONNXGraphDataNode(initializer,\n                                                        layer_name=name,\n                                                        is_global_input=False)\n                self.node_map[name].weight = weight\n                self.node_map[name].embeded_as = []\n\n        #generate connection between nodes for topo\n        for layer_name, node in self.node_map.items():\n            if isinstance(node, ONNXGraphNode):\n                self.build_connection(layer_name, node)\n\n        #generate topo\n        super(ONNXGraph, self).build()\n\n        self.input_nodes = self.place_holder_nodes\n\n    def build_connection(self, layer_name, node):\n        """"""\n        find connection for nodes\n        """"""\n        for idx, in_node in enumerate(node.layer.input):\n            if in_node == \'\':\n                continue\n            if in_node not in self.node_map:\n                flag = 0\n                for nd in self.model.node:\n                    for idx, opt in enumerate(nd.output):\n                        if opt == in_node:\n                            self.connect(nd.name, layer_name)\n                            flag = 1\n                            node.which_child[nd.name] = idx\n                            self.node_map[nd.name].index = 0\n                            break\n                    if flag == 1:\n                        break\n                if flag == 0:\n                    raise Exception(\n                        \'input[{}] of node[{}] does not exist in node_map\'.\n                        format(in_node, layer_name))\n            else:\n                self.connect(in_node, layer_name)\n\n    def get_input_node(self, node, idx=0, copy=False):\n        if len(node.which_child) == 0:\n            ipt_node = super(ONNXGraph, self).get_node(node.inputs[idx], copy)\n            return ipt_node\n\n        else:\n            ipt_node = super(ONNXGraph, self).get_node(node.inputs[idx], copy)\n            if ipt_node.layer_name in node.which_child:\n                ipt_node.index = node.which_child[ipt_node.layer_name]\n            return ipt_node\n\n    def graph_weights(self, graph):\n        """"""\n        generator for weights\n        """"""\n\n        if not isinstance(graph, onnx.GraphProto):\n            logger.error(\'graph is not a GraphProto instance\')\n            return\n\n        for initializer in graph.initializer:\n            name = initializer.name\n            weight = to_array(initializer)\n            yield name, weight\n\n    def inferred_model_value_info(self, graph):\n        """"""\n        collect value/type info for an ONNX model\n        """"""\n        assert isinstance(graph,\n                          onnx.GraphProto), \'model is not a ModelProto instance\'\n\n        value_info = Dict()\n        for item in graph.value_info:\n            value_info[item.name] = {\n                \'dtype\':\n                TENSOR_TYPE_TO_NP_TYPE[item.type.tensor_type.elem_type],\n                \'shape\':\n                [dim.dim_value for dim in item.type.tensor_type.shape.dim],\n                \'external\': False\n            }\n        for item in graph.input:\n            assert item.name not in value_info\n            value_info[item.name] = {\n                \'dtype\':\n                TENSOR_TYPE_TO_NP_TYPE[item.type.tensor_type.elem_type],\n                \'shape\':\n                [dim.dim_value for dim in item.type.tensor_type.shape.dim],\n                \'external\': True\n            }\n        for item in graph.output:\n            assert item.name not in value_info\n            value_info[item.name] = {\n                \'dtype\':\n                TENSOR_TYPE_TO_NP_TYPE[item.type.tensor_type.elem_type],\n                \'shape\':\n                [dim.dim_value for dim in item.type.tensor_type.shape.dim],\n                \'external\': True\n            }\n        return value_info\n\n\nclass ONNXDecoder(object):\n    def __init__(self, onnx_model):\n        model = onnx.load(onnx_model)\n        print(\'model ir_version: {}, op version: {}\'.format(\n            model.ir_version, model.opset_import[0].version))\n        if model.opset_import[0].version < 9:\n            _logger.warning(\n                \'Now, onnx2paddle support convert onnx model opset_verison == 9,\'\n                \'opset_verison of your onnx model is %d < 9,\'\n                \'some operator maybe unsuccessful in convertion.\',\n                model.opset_import[0].version)\n\n        check_model(model)\n        self.check_model_running_state(onnx_model)\n\n        model = onnx.shape_inference.infer_shapes(model)\n        model = self.optimize_model_skip_op_for_inference(model)\n        model = self.optimize_model_strip_initializer(model)\n        self.standardize_variable_name(model.graph)\n\n        self.model = model\n        graph = model.graph\n        self.onnx_graph = ONNXGraph(model)\n        self.onnx_graph.build()\n\n    def build_value_refs(self, nodes):\n        """"""\n        build op reference of inputs and outputs\n        """"""\n        input_refs = Dict()\n        output_refs = Dict()\n        for idx, node in enumerate(nodes):\n            for val_name in node.input:\n                input_refs.setdefault(val_name, set()).add(idx)\n            for val_name in node.output:\n                output_refs.setdefault(val_name, set()).add(idx)\n        return input_refs, output_refs\n\n    def skip_node_forward(self, nodes, src_output_name, dst_input_name,\n                          input_refs):\n        """"""\n        skip nodes between src_output_name -> dst_input_name and connect this pair\n        """"""\n        processed = 0\n        for next_idx in input_refs[src_output_name]:\n            next_node = nodes[next_idx]\n            for val_idx, next_input_name in enumerate(next_node.input):\n                if next_input_name == src_output_name:\n                    next_node.input[val_idx] = dst_input_name\n                    processed += 1\n        return processed\n\n    def skip_node_backward(self, nodes, src_input_name, dst_output_name,\n                           output_refs):\n        """"""\n        skip nodes between dst_output_name -> src_input_name and connect this pair\n        """"""\n        processed = 0\n        for prev_idx in output_refs[src_input_name]:\n            prev_node = nodes[prev_idx]\n            for val_idx, prev_output_name in enumerate(prev_node.output):\n                if prev_output_name == src_input_name:\n                    prev_node.output[val_idx] = dst_output_name\n                    processed += 1\n        return processed\n\n    def optimize_model_skip_op_for_inference(self, model, op_list=None):\n        """"""\n        skip ops can be bypassed for inference\n        """"""\n        if op_list is None:\n            op_list = [\'Dropout\']\n\n        nodes = model.graph.node\n        input_refs, output_refs = self.build_value_refs(nodes)\n        ret = type(model)()\n        ret.CopyFrom(model)\n        ret_nodes = ret.graph.node\n        nodes_to_remove = []\n        for node_idx, node in enumerate(nodes):\n            if not (node.domain == default_op_domain or node.domain == \'\'):\n                continue\n            op_type = node.op_type\n            if not (op_type in op_list):\n                continue\n            if op_type in [\'Dropout\']:\n                input_name = node.input[0]\n                output_name = node.output[0]\n            elif not (len(node.input) == 1 and len(node.output) == 1):\n                print(\n                    \'currently only 1-input-1-output op supported, skip required %d: %s\',\n                    node_idx, node.op_type)\n                continue\n            else:\n                input_name = node.input[0]\n                output_name = node.output[0]\n\n            if output_name in input_refs:\n                processed = self.skip_node_forward(ret_nodes, output_name,\n                                                   input_name, input_refs)\n            elif input_name in output_refs:\n                processed = self.skip_node_backward(ret_nodes, input_name,\n                                                    output_name, output_refs)\n            else:\n                processed = -1\n            if processed > 0:\n                nodes_to_remove.append(node_idx)\n                for value_info in ret.graph.value_info:\n                    for output in node.output:\n                        if value_info.name == output:\n                            ret.graph.value_info.remove(value_info)\n\n                print(\'skip op {}: {} -> {} -> {}\'.format(\n                    node_idx, input_name, node.op_type, output_name))\n            elif processed == 0:\n                print(\'weird, no node processed\')\n            else:\n                print(\'standalone op {}: {} -> {} -> {} not skipped\'.format(\n                    node_idx, input_name, node.op_type, output_name))\n\n        nodes_to_remove.sort(reverse=True)\n        for node_idx in nodes_to_remove:\n            ret_nodes.pop(node_idx)\n        return ret\n\n    def optimize_model_strip_initializer(self, model, keep_input_only=True):\n        """"""\n        strip weights for inference\n        """"""\n        nodes = model.graph.node\n        input_refs, output_refs = self.build_value_refs(nodes)\n        out_names = [val.name for val in model.graph.output]\n\n        ret = type(model)()\n        ret.CopyFrom(model)\n        # strip initializers\n        ret.graph.ClearField(\'initializer\')\n        ret_initializers = ret.graph.initializer\n        for initializer in model.graph.initializer:\n            name = initializer.name\n            if name in input_refs:\n                ret_initializers.add().CopyFrom(initializer)\n            elif not keep_input_only and name in output_refs:\n                ret_initializers.add().CopyFrom(initializer)\n            else:\n                dtype = TENSOR_TYPE_TO_NP_TYPE[initializer.data_type]\n\n        # strip inputs\n        ret.graph.ClearField(\'input\')\n        ret_inputs = ret.graph.input\n        for item in model.graph.input:\n            name = item.name\n            if name in input_refs or name in out_names:\n                ret_inputs.add().CopyFrom(item)\n        return ret\n\n    def make_variable_name(self, name):\n        """"""\n        make a valid code name for ParamAttr\n        """"""\n        if name == \'\':\n            raise ValueError(\'name should not be empty\')\n        for s in \' .*?\\\\/-:\':\n            name = name.replace(s, \'_\')\n        return \'x2paddle_\' + name\n\n    def check_model_running_state(self, model_path):\n        import onnxruntime as rt\n        model = onnx.load(model_path)\n        model = onnx.shape_inference.infer_shapes(model)\n        if len(model.graph.value_info) < len(model.graph.node) - 1:\n            _logger.warning(\n                \'During conversion of your  model, some operators will be assignd node.out_shape==None, \'\n                \'refer to https://github.com/onnx/onnx/blob/master/docs/ShapeInference.md\'\n            )\n        try:\n            datatype_map = {\n                \'tensor(int64)\': \'int\',\n                \'tensor(float)\': \'float32\',\n                \'tensor(int32)\': \'int32\'\n            }\n            input_dict = {}\n            sess = rt.InferenceSession(model_path)\n            for ipt in sess.get_inputs():\n                datatype = datatype_map[ipt.type]\n                input_dict[ipt.name] = np.random.random(\n                    ipt.shape).astype(datatype)\n\n            res = sess.run(None, input_feed=input_dict)\n        except:\n            raise Exception(\n                ""onnxruntime inference onnx model failed, Please confirm the correctness of onnx model by onnxruntime, if onnx model is correct, please submit issue in github.""\n            )\n\n    def standardize_variable_name(self, graph):\n        """"""\n        standardize variable name for paddle\'s code\n        """"""\n        for initializer in graph.initializer:\n            initializer.name = self.make_variable_name(initializer.name)\n        for ipt in graph.input:\n            ipt.name = self.make_variable_name(ipt.name)\n        for output in graph.output:\n            output.name = self.make_variable_name(output.name)\n        for item in graph.value_info:\n            item.name = self.make_variable_name(item.name)\n        for node in graph.node:\n            node.name = node.output[0]\n            node.name = self.make_variable_name(node.name)\n            for i in range(len(node.input)):\n                if node.input[i] == \'\':\n                    continue\n                else:\n                    node.input[i] = self.make_variable_name(node.input[i])\n            for i in range(len(node.output)):\n                node.output[i] = self.make_variable_name(node.output[i])\n'"
x2paddle/decoder/paddle_decoder.py,0,"b'#   Copyright (c) 2019  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License""\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport paddle.fluid as fluid\n\n\nclass PaddleDecoder(object):\n    def __init__(self,\n                 model_dir,\n                 model_filename=\'__model__\',\n                 params_filename=None):\n        exe = fluid.Executor(fluid.CPUPlace())\n        [self.program, feed, fetchs] = fluid.io.load_inference_model(\n            model_dir,\n            exe,\n            model_filename=model_filename,\n            params_filename=params_filename)\n'"
x2paddle/decoder/tf_decoder.py,9,"b'#   Copyright (c) 2019  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License""\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom x2paddle.core.graph import GraphNode, Graph\nfrom x2paddle.core.fluid_code import FluidCode\nfrom tensorflow.python.framework import tensor_util\nfrom tensorflow.core.framework import attr_value_pb2\nimport tensorflow as tf\nimport copy as cp\nimport numpy\nimport sys\n\n\nclass TFGraphNode(GraphNode):\n    def __init__(self, layer, layer_name=None, data_format=""NHWC""):\n        if layer_name is None:\n            super(TFGraphNode, self).__init__(\n                layer,\n                layer.name.replace(\'/\', \'_\').replace(\'-\', \'_\').replace(\'^\', \'\'))\n        else:\n            super(TFGraphNode, self).__init__(\n                layer,\n                layer_name.replace(\'/\', \'_\').replace(\'-\', \'_\').replace(\'^\', \'\'))\n\n        self.layer_type = layer.op\n        self.tf_data_format = data_format\n        self.pd_data_format = ""NCHW""\n        self.fluid_code = FluidCode()\n\n        self.dtype_map = {\n            1: ""float32"",\n            3: ""int32"",\n            4: ""uint8"",\n            9: ""int64"",\n            10: ""bool""\n        }\n\n    @property\n    def out_shapes(self):\n        if self.layer_type == ""OneShotIterator"":\n            values = self.layer.attr[""output_shapes""].list.shape\n        else:\n            values = self.layer.attr[""_output_shapes""].list.shape\n        out_shapes = list()\n        for value in values:\n            shape = [dim.size for dim in value.dim]\n            out_shapes.append(shape)\n        return out_shapes\n\n    @property\n    def dtype(self):\n        keys = [\'dtype\', \'Tidx\', \'T\', \'DstT\']\n        for k in keys:\n            dtype = self.layer.attr[k].type\n            if dtype > 0:\n                break\n        if dtype == 0:\n            dtype = self.layer.attr[\'output_types\'].list.type[0]\n        if dtype not in self.dtype_map:\n            raise Exception(""Dtype[{}] not in dtype_map"".format(dtype))\n        return self.dtype_map[dtype]\n\n    @property\n    def raw_dtype(self):\n        keys = [\'dtype\', \'Tidx\', \'T\', \'DstT\']\n        for k in keys:\n            dtype = self.layer.attr[k].type\n            if dtype > 0:\n                break\n        return dtype\n\n    @property\n    def value(self):\n        assert self.layer_type == ""Const"", ""Only Const node has value.""\n\n        attr = self.layer.attr[\'value\']\n        field = getattr(attr, attr.WhichOneof(\'value\'))\n        return tensor_util.MakeNdarray(field)\n\n    def get_attr(self, name):\n        if name not in self.layer.attr:\n            return None\n        attr = self.layer.attr[name]\n        field = attr.WhichOneof(\'value\')\n        value = getattr(attr, field) if field else None\n\n        if isinstance(value, attr_value_pb2.AttrValue.ListValue):\n            result = list(value.ListFields()[0][1])\n            for i in range(len(result)):\n                if isinstance(result[i], int):\n                    result[i] = int(result[i])\n                try:\n                    if isinstance(result[i], long):\n                        result[i] = int(result[i])\n                except:\n                    pass\n            return result\n        else:\n            return value\n\n\nclass TFGraph(Graph):\n    def __init__(self, model, data_format=""NHWC""):\n        super(TFGraph, self).__init__(model)\n        self.identity_map = dict()\n        self.multi_out_ops = [\'Split\', \'SplitV\']\n        self.tf_data_format = data_format\n\n    def build(self):\n        for layer in self.model.node:\n            self.node_map[layer.name.replace(\'/\', \'_\').replace(\n                \'-\', \'_\')] = TFGraphNode(layer, data_format=self.tf_data_format)\n\n        for layer_name, node in self.node_map.items():\n            for in_node in node.layer.input:\n                in_node = in_node.replace(\'/\',\n                                          \'_\').replace(\'-\',\n                                                       \'_\').replace(\'^\', \'\')\n                if in_node not in self.node_map:\n                    if in_node.strip().split(\':\')[0] in self.node_map:\n                        self.connect(in_node.strip().split(\':\')[0], layer_name)\n                    else:\n                        raise Exception(\n                            \'input[{}] of node[{}] does not exist in node_map\'.\n                            format(in_node, layer_name))\n                else:\n                    self.connect(in_node, layer_name)\n\n        super(TFGraph, self).build()\n\n        # tensorflow graph optimize\n        self._remove_isolated_node()\n        self._optimize_dialiation_conv()\n        self._remove_identity_node()\n        self._remove_cast_node()\n\n    def get_node(self, node_name, copy=False):\n        items = node_name.strip().split(\':\')\n        items[0] = items[0].replace(\'/\', \'_\').replace(\'-\', \'_\')\n        if items[0] in self.identity_map:\n            items[0] = self.identity_map[items[0]]\n        new_node_name = "":"".join(items)\n        node = super(TFGraph, self).get_node(new_node_name, copy)\n        if node is None:\n            return None\n        if node.layer_type == ""Switch"":\n            if hasattr(node, \'index\'):\n                del node.index\n        if len(items) == 1 and node.layer_type in self.multi_out_ops:\n            node.index = 0\n        return node\n\n    def remove_node(self, node_name):\n        if node_name not in self.node_map:\n            raise Exception(""Node[{}] not in graph"".format(node_name))\n        inputs = self.node_map[node_name].inputs\n        outputs = self.node_map[node_name].outputs\n        #        assert len(inputs) == 1\n        input_node = self.node_map[inputs[0]]\n        idx = input_node.outputs.index(node_name)\n        del input_node.outputs[idx]\n        for output in outputs:\n            node = self.node_map[output]\n            idx = node.inputs.index(node_name)\n            node.inputs[idx] = inputs[0]\n            input_node.outputs.append(output)\n\n        del self.node_map[node_name]\n\n        idx = self.topo_sort.index(node_name)\n        del self.topo_sort[idx]\n\n    def _optimize_dialiation_conv(self):\n        for name in list(self.node_map.keys()):\n            node = self.node_map[name]\n            if node.layer_type == ""SpaceToBatchND"":\n                is_dilation = True\n                out_node0 = self.node_map[node.outputs[0]]\n                if out_node0.layer_type != \'ExpandDims\':\n                    is_dilation = False\n                    continue\n                out_node1 = self.node_map[out_node0.outputs[0]]\n                if out_node1.layer_type != \'Conv2D\':\n                    is_dilation = False\n                    continue\n                out_node2 = self.node_map[out_node1.outputs[0]]\n                if out_node2.layer_type != \'Squeeze\':\n                    is_dilation = False\n                    continue\n                out_node3 = self.node_map[out_node2.outputs[0]]\n                if out_node3.layer_type != \'BatchToSpaceND\':\n                    is_dilation = False\n                    continue\n\n                if is_dilation:\n                    node.skip = True\n                    out_node3.skip = True\n                    block_shape = self.node_map[node.inputs[1]]\n                    out_node1.dilation = block_shape.value.tolist()\n\n    def _remove_isolated_node(self):\n        # delete isolated nodes\n        isolated_nodes = list()\n        for node_name in self.node_map.keys():\n            if len(self.get_node(node_name).inputs) == 0 and len(\n                    self.get_node(node_name).outputs) == 0:\n                isolated_nodes.append(node_name)\n\n        for node_name in isolated_nodes:\n            del self.node_map[node_name]\n            if node_name in self.input_nodes:\n                idx = self.input_nodes.index(node_name)\n                del self.input_nodes[idx]\n            if node_name in self.output_nodes:\n                idx = self.output_nodes.index(node_name)\n                del self.output_nodes[idx]\n            idx = self.topo_sort.index(node_name)\n            del self.topo_sort[idx]\n\n    def _remove_identity_node(self):\n        identity_ops = [\n            \'Identity\', \'StopGradient\', \'Switch\', \'Merge\',\n            \'PlaceholderWithDefault\', \'IteratorGetNext\'\n        ]\n        identity_node = list()\n        for node_name, node in self.node_map.items():\n            if node.layer_type in identity_ops:\n                identity_node.append(node_name)\n\n        for node_name in identity_node:\n            node = self.get_node(node_name)\n            input_node = self.get_node(node.inputs[0])\n            self.remove_node(node_name)\n\n            self.identity_map[node_name] = input_node.layer_name\n\n            if node_name in self.output_nodes:\n                idx = self.output_nodes.index(node_name)\n                self.output_nodes[idx] = input_node.layer_name\n\n    def _remove_cast_node(self):\n        cast_node = list()\n        for node_name, node in self.node_map.items():\n            if node.layer_type == ""Cast"":\n                input = self.get_node(node.inputs[0])\n                if input.layer_type != ""Placeholder"" or len(input.outputs) != 1:\n                    continue\n                cast_node.append(node_name)\n\n        for node_name in cast_node:\n            node = self.get_node(node_name)\n            input_node = self.get_node(node.inputs[0])\n            input_node.layer.attr[""dtype""].type = node.raw_dtype\n            self.remove_node(node_name)\n\n            self.identity_map[node_name] = input_node.layer_name\n\n            if node_name in self.output_nodes:\n                idx = self.output_nodes.index(node_name)\n                self.output_nodes[idx] = input_node.layer_name\n\n    def data_format_propagation(self, node):\n        current_node = self.node_map[node.layer_name]\n        current_node = node.tf_data_format\n        outputs = current_node.outputs\n        if len(outputs) == 0:\n            return\n        for out in outputs:\n            next_node = self.node_map[out]\n            next_node.tf_data_format = node.tf_data_format\n            self.data_format_propagation(next_node)\n\n\nclass TFDecoder(object):\n    def __init__(self, pb_model, data_format=""NHWC"", define_input_shape=False):\n        try:\n            self.sess = tf.compat.v1.Session()\n        except:\n            self.sess = tf.Session()\n        self.input_info = dict()\n        self.define_input_shape = define_input_shape\n        with open(pb_model, \'rb\') as f:\n            try:\n                graph_def = tf.compat.v1.GraphDef()\n            except:\n                graph_def = tf.GraphDef()\n            graph_def.ParseFromString(f.read())\n            input_map = self._check_input_shape(graph_def)\n            self._fix_output_shape(graph_def)\n            self.sess.graph.as_default()\n            tf.import_graph_def(graph_def, name=\'\', input_map=input_map)\n\n        try:\n            initializer = tf.compat.v1.global_variables_initializer()\n        except:\n            initializer = tf.global_variables_initializer()\n        self.sess.run(initializer)\n\n        self.tf_graph = TFGraph(\n            self.sess.graph._as_graph_def(add_shapes=True)[0], data_format)\n        self.tf_graph.build()\n\n    def _fix_output_shape(self, graph):\n        for i in range(len(graph.node)):\n            node = graph.node[i]\n            if node.op == ""swish_f32"":\n                graph.node[i].attr[\'_disable_call_shape_inference\'].b = False\n\n    def _check_input_shape(self, graph_def):\n        numpy.random.seed(13)\n        graph_def = cp.deepcopy(graph_def)\n        input_map = dict()\n        for layer in graph_def.node:\n            if layer.op != ""Placeholder"" and layer.op != ""OneShotIterator"":\n                continue\n            graph_node = TFGraphNode(layer)\n            dtype = graph_node.layer.attr[\'dtype\'].type\n\n            need_define_shape = 0\n            if self.define_input_shape:\n                need_define_shape = 3\n            elif graph_node.layer.attr[\n                    \'shape\'].shape.unknown_rank or not graph_node.get_attr(\n                        ""shape""):\n                need_define_shape = 1\n            else:\n                value = graph_node.layer.attr[""shape""].shape\n                shape = [dim.size for dim in value.dim]\n                if shape.count(-1) > 1:\n                    need_define_shape = 2\n\n            if need_define_shape == 1:\n                try:\n                    shape = graph_node.out_shapes[0]\n                    if len(shape) > 0 and shape.count(-1) < 2:\n                        need_define_shape = 0\n                except:\n                    pass\n\n            if need_define_shape > 0:\n                shape = None\n                if graph_node.get_attr(""shape""):\n                    value = value = graph_node.layer.attr[""shape""].shape\n                    shape = [dim.size for dim in value.dim]\n                if need_define_shape == 1:\n                    print(""Unknown shape for input tensor[tensor name: \\""{}\\""]"".\n                          format(layer.name))\n                elif need_define_shape == 2:\n                    print(\n                        ""\\nShape[now is {}] for input tensor[tensor name: \\""{}\\""] not support yet""\n                        .format(shape, layer.name))\n                else:\n                    print(\n                        ""Define shape[now is {}] for input tensor[tensor name: \\""{}\\\']""\n                        .format(shape, layer.name))\n                print(\n                    ""Use your keyboard type the shape of input tensor below :)"")\n\n                right_shape_been_input = False\n                while not right_shape_been_input:\n                    try:\n                        shape = raw_input(\n                            ""Shape of Input(e.g. None,224,224,3): "")\n                    except:\n                        shape = input(""Shape of Input(e.g. None,224,224,3): "")\n                    if shape.count(""None"") > 1:\n                        print(""Only 1 dimension can be None, type again:)"")\n                    else:\n                        right_shape_been_input = True\n\n                shape = [\n                    None if dim == ""None"" else int(dim)\n                    for dim in shape.strip().split(\',\')\n                ]\n                assert shape.count(None) <= 1, ""Only one dimension can be None""\n                try:\n                    x2paddle_input = tf.compat.v1.placeholder(\n                        dtype=dtype,\n                        shape=shape,\n                        name=""x2paddle_{}"".format(layer.name))\n                except:\n                    x2paddle_input = tf.placeholder(dtype=dtype,\n                                                    shape=shape,\n                                                    name=""x2paddle_{}"".format(\n                                                        layer.name))\n\n                input_map[""{}:0"".format(layer.name)] = x2paddle_input\n                if shape.count(None) > 0:\n                    shape[shape.index(None)] = -1\n                self.input_info[""x2paddle_{}"".format(layer.name)] = (shape,\n                                                                     dtype)\n            else:\n                value = graph_node.layer.attr[""shape""].shape\n                shape = [dim.size for dim in value.dim]\n                self.input_info[graph_node.layer_name] = (shape, dtype)\n\n        return input_map\n\n    # trick method\n    # should be removed after PaddlePaddle V1.6 been released\n    def infer_tensor(self, graph_node):\n        if hasattr(graph_node, ""index""):\n            tensor_name = graph_node.layer.name + "":{}"".format(graph_node.index)\n        else:\n            tensor_name = graph_node.layer.name + "":0""\n        feed = dict()\n        for input_name, info in self.input_info.items():\n            (shape, dtype) = cp.deepcopy(info)\n            input_tensor = self.sess.graph.get_tensor_by_name(input_name + "":0"")\n            if shape.count(-1) > 0:\n                shape[shape.index(-1)] = 2\n            feed[input_tensor] = numpy.random.random_sample(shape)\n        output_tensor = self.sess.graph.get_tensor_by_name(tensor_name)\n        return self.sess.run([output_tensor], feed)[0]\n\n    def infer_shape_tensor(self, graph_node, out_shape=None):\n        if hasattr(graph_node, ""index""):\n            tensor_name = graph_node.layer.name + "":{}"".format(graph_node.index)\n        else:\n            tensor_name = graph_node.layer.name + "":0""\n        feed = dict()\n        batch_size = [2, 3, 5]\n        results = list()\n        for b in batch_size:\n            for input_name, info in self.input_info.items():\n                (shape, dtype) = cp.deepcopy(info)\n                input_tensor = self.sess.graph.get_tensor_by_name(input_name +\n                                                                  "":0"")\n                if shape.count(-1) > 0:\n                    shape[shape.index(-1)] = b\n                feed[input_tensor] = numpy.random.random_sample(shape)\n            output_tensor = self.sess.graph.get_tensor_by_name(tensor_name)\n            results.append(self.sess.run([output_tensor], feed)[0].flatten())\n\n        compare01 = (results[0] == results[1])\n        compare12 = (results[1] == results[2])\n\n        if compare01.all() and compare12.all():\n            return results[0].tolist()\n\n        if (compare01 == compare12).all():\n            index = numpy.argwhere(compare01 == False).flatten()\n            if index.shape[0] != 1:\n                raise Exception(""There\'s not only one unstable dimension"")\n            results[0][index[0]] = -1\n\n            index = numpy.argwhere(results[0] < 0).flatten()\n            if index.shape[0] > 2:\n                print(""Warning: More than two dimension less than zero"")\n            if index.shape[0] == 2 and out_shape is not None:\n                if out_shape[index[1]] > 0:\n                    results[0][index[1]] = out_shape[index[1]]\n                else:\n                    results[0][index[0]] = out_shape[index[0]]\n            return results[0].tolist()\n        else:\n            raise Exception(""Couldn\'t infer a stable shape shape tensor value"")\n\n    def infer_tensor_shape(self, graph_node):\n        if hasattr(graph_node, ""index""):\n            tensor_name = graph_node.layer.name + "":{}"".format(graph_node.index)\n        else:\n            tensor_name = graph_node.layer.name + "":0""\n        feed = dict()\n        batch_size = [2, 3, 5]\n        shapes = list()\n        for b in batch_size:\n            for input_name, info in self.input_info.items():\n                (shape, dtype) = cp.deepcopy(info)\n                input_tensor = self.sess.graph.get_tensor_by_name(input_name +\n                                                                  "":0"")\n                if shape.count(-1) > 0:\n                    shape[shape.index(-1)] = b\n                feed[input_tensor] = numpy.random.random_sample(shape)\n            output_tensor = self.sess.graph.get_tensor_by_name(tensor_name)\n            shape = self.sess.run([output_tensor], feed)[0].shape\n            shapes.append(numpy.array(shape))\n\n        compare01 = (shapes[0] == shapes[1])\n        compare12 = (shapes[1] == shapes[2])\n\n        if compare01.all() and compare12.all():\n            return shape[0].tolist()\n\n        if (compare01 == compare12).all():\n            index = numpy.argwhere(compare01 == False).flatten()\n            if index.shape[0] != 1:\n                raise Exception(""There\'s not only one unstable dimension"")\n            if index[0] != 0:\n                raise Exception(""Batch size not in the first dimension"")\n            shapes[0][0] = -1\n            return shapes[0].tolist()\n'"
x2paddle/op_mapper/__init__.py,0,b''
x2paddle/op_mapper/caffe_op_mapper.py,0,"b'#   Copyright (c) 2019  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License""\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport numbers\nimport numpy as np\nfrom x2paddle.decoder.caffe_decoder import CaffeGraph\nfrom x2paddle.core.op_mapper import OpMapper\nfrom x2paddle.core.util import *\nfrom x2paddle.op_mapper import caffe_shape\nfrom x2paddle.op_mapper.caffe_custom_layer import *\n\n\nclass CaffeOpMapper(OpMapper):\n    directly_map_ops = {\n        \'ReLU\': \'relu\',\n        \'AbsVal\': \'abs\',\n        \'Sigmoid\': \'sigmoid\',\n        \'TanH\': \'tanh\',\n    }\n\n    def __init__(self, decoder):\n        super(CaffeOpMapper, self).__init__()\n        self.graph = decoder.caffe_graph\n        self.weights = dict()\n        resolver = decoder.resolver\n        self.used_custom_layers = {}\n\n        print(""Total nodes: {}"".format(len(self.graph.topo_sort)))\n        for node_name in self.graph.topo_sort:\n            node = self.graph.get_node(node_name)\n            if node.layer_type == \'DepthwiseConvolution\':\n                node.layer_type = \'ConvolutionDepthwise\'\n            op = node.layer_type\n            if hasattr(self, op):\n                self.set_node_shape(node)\n                func = getattr(self, op)\n                func(node)\n            elif op in custom_layers:\n                self.set_node_shape(node, is_fluid_op=False)\n                self.deal_custom_layer(node)\n            elif op in self.directly_map_ops:\n                self.set_node_shape(node)\n                self.directly_map(node)\n            else:\n                raise Exception(\n                    ""The op {} in model is not supported yet."".format(op))\n\n    def op_checker(self):\n        unsupported_ops = set()\n        for node_name in self.graph.topo_sort:\n            node = self.graph.get_node(node_name)\n            op = node.layer_type\n            if not hasattr(self, op) and op not in custom_layers:\n                unsupported_ops.add(op)\n        if len(unsupported_ops) == 0:\n            return True\n        else:\n            print(""There are {} ops not supported yet, list as below"".format(\n                len(unsupported_ops)))\n            for op in unsupported_ops:\n                print(op)\n            return False\n\n    def set_node_shape(self, node, is_fluid_op=True):\n        inputs = node.inputs\n        input_shape = []\n        for i, nm in enumerate(inputs):\n            last_node = self.graph.get_node(nm)\n            tmp = node.layer.bottom[i]\n            idx = list(last_node.layer.top).index(tmp)\n            input_shape.append(last_node.output_shape[idx])\n\n        node.input_shape = input_shape\n\n        func_name = \'shape_\' + node.layer_type.lower()\n        if is_fluid_op:\n            node.output_shape = getattr(caffe_shape, func_name)(node.layer,\n                                                                input_shape)\n        else:\n            node.output_shape = compute_output_shape(node)\n\n    def adjust_parameters(self, node):\n        data = node.data\n        # When using the protobuf-backend, each parameter initially has four dimensions.\n        # In certain cases (like FC layers), we want to eliminate the singleton dimensions.\n        # This implementation takes care of the common cases. However, it does leave the\n        # potential for future issues.\n        # The Caffe-backend does not suffer from this problem.\n        data = list(data)\n\n        squeeze_indices = [1]  # Squeeze biases.\n        if node.layer_type == \'InnerProduct\':\n            squeeze_indices.append(0)  # Squeeze FC.\n\n        for idx in squeeze_indices:\n            if idx >= len(data):\n                continue\n\n            d = data[idx]\n            assert len(\n                d.shape\n            ) == 4, \'invalid shape[%s] from caffe when adjust_parameters\' % (\n                str(d.shape))\n\n            shape_old = d.shape\n            sq_axis = None\n            if idx == 0:\n                sq_axis = (0, 1)\n            elif idx == 1:\n                sq_axis = (0, 1, 2)\n            else:\n                continue\n\n            data[idx] = np.squeeze(d, axis=sq_axis)\n            shape_new = data[idx].shape\n        return data\n\n    def get_kernel_parameters(self, kind, params):\n        assert kind in [\'Convolution\', \'Pooling\', \'Deconvolution\']\n        [k_h, k_w] = [1, 1]\n        if isinstance(params.kernel_size, numbers.Number):\n            [k_h, k_w] = [params.kernel_size] * 2\n        elif len(params.kernel_size) > 0:\n            k_h = params.kernel_h if params.kernel_h > 0 else params.kernel_size[\n                0]\n            k_w = params.kernel_w if params.kernel_w > 0 else params.kernel_size[\n                len(params.kernel_size) - 1]\n        elif params.kernel_h > 0 or params.kernel_w > 0:\n            k_h = params.kernel_h\n            k_w = params.kernel_w\n        [s_h, s_w] = [1, 1]\n        if isinstance(params.stride, numbers.Number):\n            [s_h, s_w] = [params.stride] * 2\n        elif len(params.stride) > 0:\n            s_h = params.stride_h if params.stride_h > 0 else params.stride[0]\n            s_w = params.stride_w if params.stride_w > 0 else params.stride[\n                len(params.stride) - 1]\n        elif params.stride_h > 0 or params.stride_w > 0:\n            s_h = params.stride_h\n            s_w = params.stride_w\n        [p_h, p_w] = [0, 0]\n        if isinstance(params.pad, numbers.Number):\n            [p_h, p_w] = [params.pad] * 2\n        elif len(params.pad) > 0:\n            p_h = params.pad_h if params.pad_h > 0 else params.pad[0]\n            p_w = params.pad_w if params.pad_w > 0 else params.pad[\n                len(params.pad) - 1]\n        elif params.pad_h > 0 or params.pad_w > 0:\n            p_h = params.pad_h\n            p_w = params.pad_w\n        dila_h = dila_w = 1\n        group = 1\n        c_o = 1\n        if kind in [\'Convolution\', \'Deconvolution\']:\n            c_o = params.num_output\n            dila_len = len(params.dilation)\n            if dila_len == 2:\n                dila_h = params.dilation[0]\n                dila_w = params.dilation[1]\n            elif dila_len == 1:\n                dila_h = dila_w = params.dilation[0]\n            else:\n                assert dila_len == 0, ""invalid length[%s] of dilation in convolution"" % (\n                    dila_len)\n        if kind in [\'Convolution\', \'Deconvolution\']:\n            group = params.group\n        kernel = [k_h, k_w]\n        stride = [s_h, s_w]\n        pad = [p_h, p_w]\n        dilation = [dila_h, dila_w]\n        return c_o, kernel, stride, pad, dilation, group\n\n    def get_input_name(self, node):\n        if hasattr(node, ""index""):\n            return node.layer_name + ""[{}]"".format(node.index)\n        else:\n            return node.layer_name\n\n    def Input(self, node):\n        shape = list(node.layer.input_param.shape[0].dim)[1:]\n        dtype = \'float32\'\n        attr = {\n            \'dtype\': string(dtype),\n            \'shape\': shape,\n            \'name\': string(node.layer_name)\n        }\n        node.fluid_code.add_layer(""data"",\n                                  inputs=None,\n                                  output=node,\n                                  param_attr=attr)\n\n    def MemoryData(self, node):\n        # TODO(syf): Paddlepaddle can\'t fully support\n        shape = node.output_shape[0][1:]\n        dtype = \'float32\'\n        attr = {\n            \'dtype\': string(dtype),\n            \'shape\': shape,\n            \'name\': string(node.layer_name)\n        }\n        node.fluid_code.add_layer(""data"",\n                                  inputs=None,\n                                  output=node.layer_name + \'0\',\n                                  param_attr=attr)\n        node.fluid_code.add_note(\'{} = [{}]\'.format(node.layer_name,\n                                                    node.layer_name + \'0\'))\n\n    def Convolution(self, node):\n        data = node.data\n        params = node.layer.convolution_param\n        channel, kernel, stride, pad, dilation, group = self.get_kernel_parameters(\n            node.layer_type, params)\n        if data is None:\n            data = []\n            print(\n                \'The parameter of {} (type is {}) is not set. So we set the parameters as 0\'\n                .format(node.layer_name, node.layer_type))\n            input_c = node.input_shape[0][1]\n            output_c = channel\n            data.append(\n                np.zeros([output_c, input_c, kernel[0],\n                          kernel[1]]).astype(\'float32\'))\n            data.append(np.zeros([\n                output_c,\n            ])).astype(\'float32\')\n        else:\n            data = self.adjust_parameters(node)\n        self.weights[node.layer_name + \'_weights\'] = data[0]\n        if len(data) == 2:\n            self.weights[node.layer_name + \'_bias\'] = data[1]\n        assert len(node.inputs\n                   ) == 1, \'The count of Convolution node\\\'s input is not 1.\'\n        input = self.graph.get_bottom_node(node, idx=0, copy=True)\n\n        attr = {\n            \'filter_size\':\n            kernel,\n            \'num_filters\':\n            channel,\n            \'stride\':\n            stride,\n            \'padding\':\n            pad,\n            \'dilation\':\n            dilation,\n            \'groups\':\n            group,\n            \'name\':\n            string(node.layer_name),\n            \'param_attr\':\n            string(node.layer_name + \'_weights\'),\n            \'bias_attr\':\n            False if len(data) == 1 else string(node.layer_name + \'_bias\'),\n        }\n        node.fluid_code.add_layer(""conv2d"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Deconvolution(self, node):\n        data = node.data\n        params = node.layer.convolution_param\n        channel, kernel, stride, pad, dilation, group = self.get_kernel_parameters(\n            node.layer_type, params)\n        if data is None:\n            data = []\n            print(\n                \'The parameter of {} (type is {}) is not set. So we set the parameters as 0\'\n                .format(node.layer_name, node.layer_type))\n            input_c = node.input_shape[0][1]\n            output_c = channel\n            data.append(\n                np.zeros([output_c, input_c, kernel[0],\n                          kernel[1]]).astype(\'float32\'))\n            data.append(np.zeros([\n                output_c,\n            ]).astype(\'float32\'))\n        else:\n            data = self.adjust_parameters(node)\n        self.weights[node.layer_name + \'_weights\'] = data[0]\n        if len(data) == 2:\n            self.weights[node.layer_name + \'_bias\'] = data[1]\n        assert len(node.inputs\n                   ) == 1, \'The count of Deconvolution node\\\'s input is not 1.\'\n        input = self.graph.get_bottom_node(node, idx=0, copy=True)\n        attr = {\n            \'output_size\':\n            None,\n            \'filter_size\':\n            kernel,\n            \'num_filters\':\n            channel,\n            \'stride\':\n            stride,\n            \'padding\':\n            pad,\n            \'dilation\':\n            dilation,\n            \'groups\':\n            group,\n            \'name\':\n            string(node.layer_name),\n            \'param_attr\':\n            string(node.layer_name + \'_weights\'),\n            \'bias_attr\':\n            False if len(data) == 1 else string(node.layer_name + \'_bias\')\n        }\n        node.fluid_code.add_layer(""conv2d_transpose"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Pooling(self, node):\n        params = node.layer.pooling_param\n        ceil_mode = getattr(params, \'ceil_mode\', True)\n        global_pool = getattr(params, \'global_pooling\', False)\n        kernel_default = [1, 1]\n        channel, kernel, stride, pad, dilation, group = self.get_kernel_parameters(\n            node.layer_type, params)\n        if params.pool == 0:\n            pool_type = \'max\'\n        else:\n            pool_type = \'avg\'\n        assert len(\n            node.inputs) == 1, \'The count of Pooling node\\\'s input is not 1.\'\n        input = self.graph.get_bottom_node(node, idx=0, copy=True)\n        attr = {\n            \'pool_size\': kernel,\n            \'pool_stride\': stride,\n            \'pool_padding\': pad,\n            \'ceil_mode\': ceil_mode,\n            \'pool_type\': string(pool_type),\n            \'exclusive\': False,\n            \'global_pooling\': global_pool,\n            \'name\': string(node.layer_name)\n        }\n        node.fluid_code.add_layer(""pool2d"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def LRN(self, node):\n        assert len(node.inputs) == 1, \'The count of LRN node\\\'s input is not 1.\'\n        params = node.layer.lrn_param\n        # The window size must be an odd value. For a window\n        # size of (2*n+1), Paddle defines depth_radius = n.\n        assert params.local_size % 2 == 1\n        # Caffe scales by (alpha/(2*n+1)), whereas Paddle\n        # just scales by alpha (as does Krizhevsky\'s paper).\n        # We\'ll account for that here.\n        alpha = params.alpha / float(params.local_size)\n        input = self.graph.get_bottom_node(node, idx=0, copy=True)\n        attr = {\n            \'n\': params.local_size,\n            \'k\': params.k,\n            \'alpha\': alpha,\n            \'beta\': params.beta,\n            \'name\': string(node.layer_name)\n        }\n        node.fluid_code.add_layer(""lrn"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def InnerProduct(self, node):\n        data = node.data\n        params = node.layer.inner_product_param\n        if data is None:\n            print(\n                \'The parameter of {} (type is {}) is not set. So we set the parameters as 0.\'\n                .format(node.layer_name, node.layer_type))\n            input_c = node.input_shape[0][1]\n            output_c = params.num_output\n            data = []\n            data.append(\n                np.zeros([input_c,\n                          output_c]).astype(\'float32\').astype(\'float32\'))\n            data.append(\n                np.zeros([output_c]).astype(\'float32\').astype(\'float32\'))\n        else:\n            data = self.adjust_parameters(node)\n            # Reshape the parameters to Paddle\'s ordering\n            transpose_order = (1, 0)\n            w = data[0]\n            fc_shape = w.shape\n            output_channels = fc_shape[0]\n            w = w.reshape((output_channels, -1))\n            w = w.transpose(transpose_order)\n            data[0] = w\n\n        self.weights[node.layer_name + \'_weights\'] = data[0]\n        if len(data) == 2:\n            self.weights[node.layer_name + \'_bias\'] = data[1]\n        assert len(node.inputs\n                   ) == 1, \'The count of InnerProduct node\\\'s input is not 1.\'\n        #params = node.layer.inner_product_param\n        assert params.axis == 1\n        assert params.bias_term == True\n        input = self.graph.get_bottom_node(node, idx=0, copy=True)\n        attr = {\n            \'size\':\n            params.num_output,\n            \'name\':\n            string(node.layer_name),\n            \'act\':\n            None,\n            \'param_attr\':\n            string(node.layer_name + \'_weights\'),\n            \'bias_attr\':\n            False if len(data) == 1 else string(node.layer_name + \'_bias\')\n        }\n        node.fluid_code.add_layer(""fc"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Softmax(self, node):\n        assert len(\n            node.inputs) == 1, \'The count of Softmax node\\\'s input is not 1.\'\n        input = self.graph.get_bottom_node(node, idx=0, copy=True)\n        params = node.layer.softmax_param\n        axis = params.axis\n        shape = node.input_shape[0]\n        dims = len(shape)\n        axis = axis + dims if axis < 0 else axis\n        attr = {\'axis\': axis, \'name\': string(node.layer_name + \'_softmax\')}\n        node.fluid_code.add_layer(""softmax"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Slice(self, node):\n        assert len(\n            node.inputs) == 1, \'The count of Slice node\\\'s input is not 1.\'\n        input = self.graph.get_bottom_node(node, idx=0, copy=True)\n        top_len = len(node.layer.top)\n        params = node.layer.slice_param\n        axis = params.axis\n        slice_dim = params.slice_dim\n        if slice_dim != 1 and axis == 1:\n            axis = slice_dim\n        output_shape = node.output_shape\n        sections_list = []\n        for s in output_shape:\n            sections_list.append(s[axis])\n        attr = {\n            \'num_or_sections\': sections_list,\n            \'dim\': axis,\n            \'name\': string(node.layer_name)\n        }\n        node.fluid_code.add_layer(""split"",\n                                  inputs=input,\n                                  output=node.layer_name,\n                                  param_attr=attr)\n\n    def Concat(self, node):\n        assert len(\n            node.inputs\n        ) >= 1, \'The count of Concat node\\\'s input is not more than 1.\'\n        inputs = []\n        for i in range(len(node.inputs)):\n            input = self.graph.get_bottom_node(node, idx=i, copy=True)\n            inputs.append(input)\n        params = node.layer.concat_param\n        axis = params.axis\n        attr = {\'axis\': axis, \'name\': string(node.layer_name)}\n        node.fluid_code.add_layer(""concat"",\n                                  inputs=inputs,\n                                  output=node,\n                                  param_attr=attr)\n\n    def PReLU(self, node):\n        assert len(\n            node.inputs) == 1, \'The count of PReLU node\\\'s input is not 1.\'\n        input = self.graph.get_bottom_node(node, idx=0, copy=True)\n        params = node.layer.prelu_param\n        mode_bool = params.channel_shared\n        if mode_bool:\n            mode = \'all\'\n        else:\n            mode = \'channel\'\n        data = node.data\n        assert data is not None, \'The parameter of {} (type is {}) is not set. You need to use python package of caffe to set the default value.\'.format(\n            node.layer_name, node.layer_type)\n        self.weights[node.layer_name + \'_weights\'] = data[0]\n        attr = {\n            \'mode\': string(mode),\n            \'param_attr\': string(node.layer_name + \'_weights\'),\n            \'name\': string(node.layer_name)\n        }\n        node.fluid_code.add_layer(""prelu"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Accuracy(self, node):\n        assert len(\n            node.inputs) == 2, \'The count of Accuracy node\\\'s input is not 2.\'\n        inputs = []\n        inputs[0] = None\n        inputs[1] = None\n        i = 0\n        for shape in node.input_shape:\n            if shape[1] == 1:\n                input = self.graph.get_bottom_node(node, idx=i, copy=True)\n                inputs[1] = input\n            else:\n                input = self.graph.get_bottom_node(node, idx=i, copy=True)\n                inputs[0] = input\n            i += 1\n        params = node.layer.accuracy_param\n        top_k = params.top_k\n        axis = params.axis\n        ignore_label = params.ignore_label\n        assert axis == 1, \'PaddlePaddle can not support the situation when the axis is not 1.\'\n        assert not ignore_label >= 0, \'PaddlePaddle can not support the situation when the model has ignore label.\'\n        attr = {\'k\': top_k}\n        node.fluid_code.add_layer(""accuracy"",\n                                  inputs=inputs,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Eltwise(self, node):\n        assert len(\n            node.inputs) == 2, \'The count of TanH node\\\'s input is not 2.\'\n        params = node.layer.eltwise_param\n        mode = params.operation\n        inputs = []\n        input0 = self.graph.get_bottom_node(node, idx=0, copy=True)\n        inputs.append(input0)\n        input1 = self.graph.get_bottom_node(node, idx=1, copy=True)\n        inputs.append(input1)\n        if mode == 0:\n            inputs_dict = {}\n            inputs_dict[\'x\'] = inputs[0]\n            inputs_dict[\'y\'] = inputs[1]\n            attr = {\'act\': None, \'name\': string(node.layer_name)}\n            node.fluid_code.add_layer(""elementwise_mul"",\n                                      inputs=inputs_dict,\n                                      output=node,\n                                      param_attr=attr)\n        elif mode == 1:\n            if hasattr(params, \'coeff\') and len(params.coeff) == 2:\n                coeff = params.coeff\n                input1_name = self.get_input_name(inputs[0])\n                attr = {\n                    \'shape\': [1],\n                    \'value\': coeff[0],\n                    \'dtype\': \'{}.dtype\'.format(input1_name)\n                }\n                node.fluid_code.add_layer(""fill_constant"",\n                                          inputs=None,\n                                          output=node.layer_name + \'_const1\',\n                                          param_attr=attr)\n                attr = {\'act\': None, \'name\': string(node.layer_name + \'_mul1\')}\n                node.fluid_code.add_layer(""elementwise_mul"",\n                                          inputs=input1_name + \', \' +\n                                          node.layer_name + \'_const1\',\n                                          output=node.layer_name + \'_mul1\',\n                                          param_attr=attr)\n                input2_name = self.get_input_name(inputs[1])\n                attr = {\n                    \'shape\': [1],\n                    \'value\': coeff[1],\n                    \'dtype\': \'{}.dtype\'.format(input2_name)\n                }\n                node.fluid_code.add_layer(""fill_constant"",\n                                          inputs=None,\n                                          output=node.layer_name + \'_const2\',\n                                          param_attr=attr)\n                attr = {\'act\': None, \'name\': string(node.layer_name + \'_mul2\')}\n                node.fluid_code.add_layer(""elementwise_mul"",\n                                          inputs=input2_name + \', \' +\n                                          node.layer_name + \'_const2\',\n                                          output=node.layer_name + \'_mul2\',\n                                          param_attr=attr)\n\n                attr = {\'act\': None, \'name\': string(node.layer_name)}\n                node.fluid_code.add_layer(""elementwise_add"",\n                                          inputs=\'{}_mul1, {}_mul2\'.format(\n                                              node.layer_name, node.layer_name),\n                                          output=node,\n                                          param_attr=attr)\n            else:\n                inputs_dict = {}\n                inputs_dict[\'x\'] = inputs[0]\n                inputs_dict[\'y\'] = inputs[1]\n                attr = {\'act\': None, \'name\': string(node.layer_name)}\n                node.fluid_code.add_layer(""elementwise_add"",\n                                          inputs=inputs_dict,\n                                          output=node,\n                                          param_attr=attr)\n        else:\n            inputs_dict = {}\n            inputs_dict[\'x\'] = inputs[0]\n            inputs_dict[\'y\'] = inputs[1]\n            attr = {\'act\': None, \'name\': string(node.layer_name)}\n            node.fluid_code.add_layer(""elementwise_max"",\n                                      inputs=inputs_dict,\n                                      output=node,\n                                      param_attr=attr)\n\n    def BatchNorm(self, node):\n        assert len(\n            node.inputs) == 1, \'The count of BatchNorm node\\\'s input is not 1.\'\n        input = self.graph.get_bottom_node(node, idx=0, copy=True)\n        params = node.layer.batch_norm_param\n        if hasattr(params, \'eps\'):\n            eps = params.eps\n        else:\n            eps = 1e-5\n        if node.data is None or len(node.data) != 3:\n            print(\n                \'The parameter of {} (type is {}) is not set. So we set the parameters as 0\'\n                .format(node.layer_name, node.layer_type))\n            input_c = node.input_shape[0][1]\n            mean = np.zeros([\n                input_c,\n            ]).astype(\'float32\')\n            variance = np.zeros([\n                input_c,\n            ]).astype(\'float32\')\n            scale = 0\n        else:\n\n            node.data = [np.squeeze(i).astype(\'float32\') for i in node.data]\n            mean, variance, scale = node.data\n        # Prescale the stats\n        scaling_factor = 1.0 / scale if scale != 0 else 0\n        mean *= scaling_factor\n        variance *= scaling_factor\n        self.weights[node.layer_name + \'_mean\'] = mean\n        self.weights[node.layer_name + \'_variance\'] = variance\n        attr = {\n            \'is_test\': True,\n            \'param_attr\': None,\n            \'bias_attr\': None,\n            \'moving_mean_name\': string(node.layer_name + \'_mean\'),\n            \'moving_variance_name\': string(node.layer_name + \'_variance\'),\n            \'epsilon\': eps,\n            \'name\': string(node.layer_name)\n        }\n        node.fluid_code.add_layer(""batch_norm"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Scale(self, node):\n        if node.data is None:\n            print(\n                \'The parameter of {} (type is {}) is not set. So we set the parameters as 0\'\n                .format(node.layer_name, node.layer_type))\n            input_c = node.input_shape[0][1]\n            self.weights[node.layer_name + \'_scale\'] = np.zeros([\n                input_c,\n            ]).astype(\'float32\')\n            self.weights[node.layer_name + \'_offset\'] = np.zeros([\n                input_c,\n            ]).astype(\'float32\')\n        else:\n            self.weights[node.layer_name + \'_scale\'] = np.squeeze(\n                node.data[0]).astype(\'float32\')\n            self.weights[node.layer_name + \'_offset\'] = np.squeeze(\n                node.data[1]).astype(\'float32\')\n        params = node.layer.scale_param\n        axis = params.axis\n        num_axes = params.num_axes\n        inputs = []\n        if len(node.inputs) == 2:\n            # for two tensor, here resets axis to 1. Maybe there is a bug for unkown case.\n            axis = 1\n            bias_shape = node.input_shape[0][axis:axis + num_axes]\n            input0 = self.graph.get_bottom_node(node, idx=0, copy=True)\n            input1 = self.graph.get_bottom_node(node, idx=1, copy=True)\n            inputs_dict = {}\n            inputs_dict[\'x\'] = input0\n            inputs_dict[\'y\'] = input1\n            attr = {\'axis\': axis, \'name\': string(node.layer_name + \'_mul\')}\n            node.fluid_code.add_layer(""elementwise_mul"",\n                                      inputs=inputs_dict,\n                                      output=node.layer_name + \'_mul\',\n                                      param_attr=attr)\n        else:\n            bias_shape = node.input_shape[0][axis:axis + num_axes]\n            input0 = self.graph.get_bottom_node(node, idx=0, copy=True)\n            input0_name = self.get_input_name(input0)\n            attr = {\n                \'dtype\': \'{}.dtype\'.format(input0_name),\n                \'shape\': bias_shape,\n                \'name\': string(node.layer_name + \'_cparam1\'),\n                \'attr\': string(node.layer_name + \'_scale\'),\n                \'is_bias\': True,\n                \'default_initializer\': \'Constant(value=1.0)\'\n            }\n            node.fluid_code.add_layer(""create_parameter"",\n                                      inputs=None,\n                                      output=node,\n                                      param_attr=attr)\n            inputs_dict = {}\n            inputs_dict[\'x\'] = input0\n            inputs_dict[\'y\'] = node\n            attr = {\'axis\': axis, \'name\': string(node.layer_name + \'_mul\')}\n            node.fluid_code.add_layer(""elementwise_mul"",\n                                      inputs=inputs_dict,\n                                      output=node.layer_name + \'_mul\',\n                                      param_attr=attr)\n        scale_shape = bias_shape\n        input0_name = self.get_input_name(input0)\n        attr = {\n            \'dtype\': \'{}.dtype\'.format(input0_name),\n            \'shape\': scale_shape,\n            \'name\': string(node.layer_name + \'_cparam2\'),\n            \'attr\': string(node.layer_name + \'_offset\'),\n            \'is_bias\': True,\n            \'default_initializer\': \'Constant(value=1.0)\'\n        }\n        node.fluid_code.add_layer(""create_parameter"",\n                                  inputs=None,\n                                  output=node.layer_name + \'_offset_param\',\n                                  param_attr=attr)\n        attr = {\'axis\': axis, \'name\': string(node.layer_name + \'_add\')}\n        node.fluid_code.add_layer(""elementwise_add"",\n                                  inputs=\'{}_mul, {}_offset_param\'.format(\n                                      node.layer_name, node.layer_name),\n                                  output=node,\n                                  param_attr=attr)\n\n    def Reshape(self, node):\n        input = self.graph.get_bottom_node(node, idx=0, copy=True)\n        top_count = len(input.layer.top)\n        is_inplace = False if top_count == 1 else True\n        output_shape = node.output_shape[0]\n        attr = {\n            \'shape\': output_shape,\n            \'inplace\': is_inplace,\n            \'act\': None,\n            \'name\': string(node.layer_name)\n        }\n        node.fluid_code.add_layer(""reshape"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def ArgMax(self, node):\n        assert len(node.inputs) == 1 and len(\n            node.outputs\n        ) == 1, \'The count of ArgMax node\\\'s input and output is not 1.\'\n        input = self.graph.get_bottom_node(node, idx=0, copy=True)\n        input_shape = node.input_shape[0]\n        params = node.layer.argmax_param\n        out_max_val = params.out_max_val if hasattr(params,\n                                                    out_max_val) else False\n        top_k = params.top_k if hasattr(params, top_k) else 1\n        axis = parmas.axis if hasattr(params, axis) else -1\n        if axis < 0:\n            axis += len(input_shape)\n        if out_max_val is True:\n            attr = {\'k\': top_k, \'name\': string(node.layer_name + \'_topk\')}\n            node.fluid_code.add_layer(""topk"",\n                                      inputs=input,\n                                      output=\'{}_topk_var, {}_index_var\'.format(\n                                          node.layer_name, node.layer_name),\n                                      param_attr=attr)\n            attr = {\'dtype\': \'{}_topk_var.dtype\'.format(node.layer_name)}\n            node.fluid_code.add_layer(\n                ""cast"",\n                inputs=\'{}_index_var\'.format(node.layer_name),\n                output=\'{}_index_var\'.format(node.layer_name),\n                param_attr=attr)\n            attr = {\'axis\': axis, \'name\': string(node.layer_name)}\n            node.fluid_code.add_layer(""concat"",\n                                      inputs=\'{}_topk_var, {}_index_var\'.format(\n                                          node.layer_name, node.layer_name),\n                                      output=node,\n                                      param_attr=attr)\n        else:\n            attr = {\'k\': top_k, \'name\': string(node.layer_name)}\n            node.fluid_code.add_layer(""topk"",\n                                      inputs=input,\n                                      output=\'_, {}\'.format(node.layer_name),\n                                      param_attr=attr)\n\n    def Crop(self, node):\n        assert len(\n            node.inputs) == 2, \'The count of Crop node\\\'s input is not 2.\'\n        input = self.graph.get_bottom_node(node, idx=0, copy=True)\n        example = self.graph.get_bottom_node(node, idx=1, copy=True)\n        params = node.layer.crop_param\n        axis = params.axis\n        input_shape = node.input_shape[0]\n        if axis < 0:\n            axis += len(input_shape)\n        offset_real = [0] * len(input_shape)\n        if hasattr(params, ""offset"") and len(params.offset) > 0:\n            offset = list(params.offset)\n            assert (len(input_shape) - axis) == len(\n                offset), ""invalid offset[%s] in crop layer"" % (str(offset))\n            offset_real = [0] * axis + offset\n        attr = {\'offsets\': list(offset_real), \'name\': string(node.layer_name)}\n        node.fluid_code.add_layer(""crop"",\n                                  inputs={\n                                      \'x\': input,\n                                      \'shape\': node.input_shape[1]\n                                  },\n                                  output=node,\n                                  param_attr=attr)\n\n    def Flatten(self, node):\n        assert len(\n            node.inputs\n        ) == 1, \'The count of DetectionOutput node\\\'s input is not 1.\'\n        input = self.graph.get_bottom_node(node, idx=0, copy=True)\n        shape = node.output_shape[0]\n        attr = {\'shape\': shape, \'name\': string(node.layer_name)}\n        node.fluid_code.add_layer(""reshape"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Power(self, node):\n        assert len(\n            node.inputs) == 1, \'The count of Permute node\\\'s input is not 1.\'\n        input = self.graph.get_bottom_node(node, idx=0, copy=True)\n        params = node.layer.power_param\n        power = params.power\n        scale = params.scale\n        shift = params.shift\n        attr = {\n            \'scale\': scale,\n            \'bias\': shift,\n            \'bias_after_scale\': True,\n            \'name\': string(node.layer_name + \'_scale\')\n        }\n        node.fluid_code.add_layer(""scale"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n        attr = {\'factor\': power, \'name\': string(node.layer_name)}\n        node.fluid_code.add_layer(""pow"",\n                                  inputs=node,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Reduction(self, node):\n        assert len(\n            node.inputs) == 1, \'The count of Reduction node\\\'s input is not 1.\'\n        input = self.graph.get_bottom_node(node, idx=0, copy=True)\n        params = node.layer.reduction_param\n        operation = params.operation\n        axis = params.axis\n        coeff = params.coeff\n        assert operation >= 1 and operation <= 4, ""reduction reduction [%s] error"" % (\n            operation)\n        input_len = len(node.input_shape[0])\n        if axis < 0:\n            axis += input_len + 1\n        dim = list(range(input_len))\n        if operation == 1:  ## operation = SUM\n            attr = {\n                \'dim\': dim[axis:],\n                \'keep_dim\': False,\n                \'name\': string(node.layer_name)\n            }\n            node.fluid_code.add_layer(""reduce_sum"",\n                                      inputs=input,\n                                      output=node,\n                                      param_attr=attr)\n        elif operation == 2:  ## operation = ASUM\n            attr = {\'name\': string(node.layer_name + \'_abs\')}\n            node.fluid_code.add_layer(""abs"",\n                                      inputs=input,\n                                      output=node,\n                                      param_attr=attr)\n            attr = {\n                \'dim\': dim[axis:],\n                \'keep_dim\': False,\n                \'name\': string(node.layer_name)\n            }\n            node.fluid_code.add_layer(""reduce_sum"",\n                                      inputs=node,\n                                      output=node,\n                                      param_attr=attr)\n        elif operation == 3:  ## operation = SUMSQ\n            attr = {\'factor\': 2.0, \'name\': string(node.layer_name + \'_pow\')}\n            node.fluid_code.add_layer(""pow"",\n                                      inputs=input,\n                                      output=node,\n                                      param_attr=attr)\n            attr = {\n                \'dim\': dim[axis:],\n                \'keep_dim\': False,\n                \'name\': string(node.layer_name)\n            }\n            node.fluid_code.add_layer(""reduce_sum"",\n                                      inputs=node,\n                                      output=node,\n                                      param_attr=attr)\n        else:  ## operation = MEAN\n            attr = {\n                \'dim\': dim[axis:],\n                \'keep_dim\': False,\n                \'name\': string(node.layer_name)\n            }\n            node.fluid_code.add_layer(""reduce_mean"",\n                                      inputs=node,\n                                      output=node,\n                                      param_attr=attr)\n        attr = {\'scale\': coeff}\n        node.fluid_code.add_layer(""scale"",\n                                  inputs=node,\n                                  output=node,\n                                  param_attr=attr)\n\n    def deal_custom_layer(self, node):\n        op = node.layer_type\n        custom_code, func = make_custom_layer(node)\n        params = get_params(node.layer, node.layer_type)\n        arg_names, kwargs = set_args(func, params)\n        kwargs[\'name\'] = string(node.layer_name)\n        kwargs[\'input_shape\'] = node.input_shape\n        data = node.data\n        if data is not None:\n            data = self.adjust_parameters(node)\n            weights_name = deal_weights(node)\n            for i in range(len(data)):\n                self.weights[weights_name[i]] = data[i]\n        inputs_node = []\n        for i in range(len(node.inputs)):\n            input = self.graph.get_bottom_node(node, idx=i, copy=True)\n            if i == 1 and op == \'DetectionOutput\':\n                input = self.graph.get_bottom_node(node, idx=i, copy=True)\n                while input is not None \\\n                      and input.layer_type != \'Softmax\' \\\n                      and input.layer_type != \'Sigmoid\':\n                    input = self.graph.get_bottom_node(input, idx=0, copy=True)\n                assert input is not None, \'This kind of DetectionOutput is not supported!\'\n                input = self.graph.get_bottom_node(input, idx=0, copy=True)\n            inputs_node.append(input)\n        node.fluid_code.add_layer(func.__code__.co_name,\n                                  inputs=inputs_node,\n                                  output=node,\n                                  param_attr=kwargs,\n                                  is_custom_layer=True)\n        if op not in self.used_custom_layers:\n            self.used_custom_layers[op] = custom_code\n\n    def directly_map(self, node):\n        assert node.layer_type in self.directly_map_ops\n        op_info = self.directly_map_ops[node.layer_type]\n        input = self.graph.get_bottom_node(node, idx=0, copy=True)\n        attr = {\'name\': string(node.layer_name)}\n        node.fluid_code.add_layer(op_info,\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n'"
x2paddle/op_mapper/caffe_shape.py,0,"b'#   Copyright (c) 2019  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License""\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport math\nimport numbers\nfrom functools import reduce\n\n\ndef get_kernel_parameters(params):\n    [k_h, k_w] = [1, 1]\n    if isinstance(params.kernel_size, numbers.Number):\n        [k_h, k_w] = [params.kernel_size] * 2\n    elif len(params.kernel_size) > 0:\n        k_h = params.kernel_h if params.kernel_h > 0 else params.kernel_size[0]\n        k_w = params.kernel_w if params.kernel_w > 0 else params.kernel_size[\n            len(params.kernel_size) - 1]\n    elif params.kernel_h > 0 or params.kernel_w > 0:\n        k_h = params.kernel_h\n        k_w = params.kernel_w\n    [s_h, s_w] = [1, 1]\n    if isinstance(params.stride, numbers.Number):\n        [s_h, s_w] = [params.stride] * 2\n    elif len(params.stride) > 0:\n        s_h = params.stride_h if params.stride_h > 0 else params.stride[0]\n        s_w = params.stride_w if params.stride_w > 0 else params.stride[\n            len(params.stride) - 1]\n    elif params.stride_h > 0 or params.stride_w > 0:\n        s_h = params.stride_h\n        s_w = params.stride_w\n    [p_h, p_w] = [0, 0]\n    if isinstance(params.pad, numbers.Number):\n        [p_h, p_w] = [params.pad] * 2\n    elif len(params.pad) > 0:\n        p_h = params.pad_h if params.pad_h > 0 else params.pad[0]\n        p_w = params.pad_w if params.pad_w > 0 else params.pad[len(params.pad) -\n                                                               1]\n    elif params.pad_h > 0 or params.pad_w > 0:\n        p_h = params.pad_h\n        p_w = params.pad_w\n    dila_h = dila_w = 1\n    if hasattr(params, \'dilation\'):\n        dila_len = len(params.dilation)\n        if dila_len == 2:\n            dila_h = params.dilation[0]\n            dila_w = params.dilation[1]\n        elif dila_len == 1:\n            dila_h = dila_w = params.dilation[0]\n        else:\n            assert dila_len == 0, ""invalid length[%s] of dilation in convolution"" % (\n                dila_len)\n    return dila_h, dila_w, p_h, p_w, k_h, k_w, s_h, s_w\n\n\ndef get_strided_kernel_output_shape(params, input_shape, round_func):\n    i_h = input_shape[2]\n    i_w = input_shape[3]\n    dila_h, dila_w, pad_h, pad_w, kernel_h, kernel_w, stride_h, stride_w = get_kernel_parameters(\n        params)\n    o_h = (i_h + 2 * pad_h - (dila_h *\n                              (kernel_h - 1) + 1)) / float(stride_h) + 1\n    o_w = (i_w + 2 * pad_w - (dila_w *\n                              (kernel_w - 1) + 1)) / float(stride_w) + 1\n    o_h = int(round_func(o_h))\n    o_w = int(round_func(o_w))\n    has_c_o = hasattr(params, \'num_output\')\n    c = params.num_output if has_c_o else input_shape[1]\n    return [[input_shape[0], c, o_h, o_w]]\n\n\ndef shape_convolution(layer, input_shape):\n    params = layer.convolution_param\n    return get_strided_kernel_output_shape(params, input_shape[0], math.floor)\n\n\ndef shape_deconvolution(layer, input_shape):\n\n    h_i = input_shape[0][2]\n    w_i = input_shape[0][3]\n\n    params = layer.convolution_param\n    dila_h, dila_w, pad_h, pad_w, kernel_h, kernel_w, stride_h, stride_w = get_kernel_parameters(\n        params)\n\n    h_o = (h_i - 1) * stride_h - 2 * pad_h + dila_h * (kernel_h - 1) + 1\n    w_o = (w_i - 1) * stride_w - 2 * pad_w + dila_w * (kernel_w - 1) + 1\n\n    has_c_o = hasattr(params, \'num_output\')\n    c = params.num_output if has_c_o else input_shape.channels\n    return [[input_shape[0][0], c, h_o, w_o]]\n\n\ndef shape_pooling(layer, input_shape):\n    params = layer.pooling_param\n    global_pool = getattr(params, \'global_pooling\', False)\n    if global_pool:\n        return [[input_shape[0][0], input_shape[0][1], 1, 1]]\n\n    ceil_mode = getattr(params, \'ceil_mode\', True)\n    if ceil_mode is True:\n        method = math.ceil\n    else:\n        method = math.floor\n    return get_strided_kernel_output_shape(params, input_shape[0], method)\n\n\ndef shape_innerproduct(layer, input_shape):\n    params = layer.inner_product_param\n    return [[input_shape[0][0], params.num_output]]\n\n\ndef shape_lrn(layer, input_shape):\n    return input_shape\n\n\ndef shape_relu(layer, input_shape):\n    return input_shape\n\n\ndef shape_softmax(layer, input_shape):\n    return input_shape\n\n\ndef shape_input(layer, input_shape):\n    return [list(layer.input_param.shape[0].dim)]\n\n\ndef shape_memorydata(layer, input_shape):\n    params = layer.memory_data_param\n    shape = []\n    shape.append(int(params.batch_size))\n    shape.append(int(params.channels))\n    shape.append(int(params.height))\n    shape.append(int(params.width))\n    return [shape]\n\n\ndef shape_concat(layer, input_shape):\n    params = layer.concat_param\n    axis = params.axis\n    output_shape = None\n    for shape in input_shape:\n        if output_shape is None:\n            output_shape = []\n            for i in range(len(shape)):\n                output_shape.append(shape[i])\n        else:\n            output_shape[axis] += shape[axis]\n    return [output_shape]\n\n\ndef shape_slice(layer, input_shape):\n    inshape = input_shape[0]\n\n    top_len = len(layer.top)\n    params = layer.slice_param\n    axis = params.axis\n    slice_dim = params.slice_dim\n    if slice_dim != 1 and axis == 1:\n        axis = slice_dim\n    points = list(params.slice_point)\n    count = inshape[axis]\n    if len(points) == 0:\n        assert count % top_len == 0, ""the parameter of Slice is wrong""\n        part = count / top_len\n        t = part\n        while t < count:\n            points.append(int(t))\n            t += part\n    points = [0] + points + [count]\n    output_shape = []\n    for i in range(len(points)):\n        shape = []\n        for ii in range(len(inshape)):\n            shape.append(inshape[ii])\n        size = points[i + 1] - points[i]\n        shape[axis] = size\n        output_shape.append(shape)\n        if i == len(points) - 2:\n            break\n    return output_shape\n\n\ndef shape_prelu(layer, input_shape):\n    return input_shape\n\n\ndef shape_sigmoid(layer, input_shape):\n    return input_shape\n\n\ndef shape_absval(layer, input_shape):\n    return input_shape\n\n\ndef shape_accuracy(layer, input_shape):\n    return [[1]]\n\n\ndef shape_tanh(layer, input_shape):\n    return input_shape\n\n\ndef shape_eltwise(layer, input_shape):\n    return [input_shape[0]]\n\n\ndef shape_batchnorm(layer, input_shape):\n    return input_shape\n\n\ndef shape_scale(layer, input_shape):\n    return input_shape\n\n\ndef shape_reshape(layer, input_shape):\n    def count(num_list):\n        return reduce(lambda a, b: a * b, num_list)\n\n    inshape = input_shape[0]\n    params = layer.reshape_param\n    axis = params.axis if hasattr(params, \'axis\') else 0\n    num_axes = params.num_axes if hasattr(params, \'num_axes\') else -1\n    if inshape[0] == -1:\n        inshape[0] = 1\n    input_count = count(inshape)\n\n    input_num_axes = len(inshape)\n\n    input_start_axis = axis\n    start_axis = input_start_axis if input_start_axis >= 0 \\\n            else input_num_axes + input_start_axis + 1\n\n    assert start_axis >= 0, ""[Reshape]axis %d out of range"" % (input_start_axis)\n    assert start_axis <= input_num_axes, ""[Reshape]axis %d out of range for %d-D input data""\\\n            % (input_start_axis, input_num_axes)\n\n    assert num_axes >= -1, ""[Reshape]num_axes must be >= 0, or -1 for all""\n\n    end_axis = input_num_axes if num_axes == -1 else start_axis + num_axes\n    assert end_axis <= input_num_axes, ""end_axis[%d] = axis[%d] + num_axes[%d] is out of range""\\\n            % (end_axis, start_axis, num_axes)\n\n    num_axes_replaced = end_axis - start_axis\n    num_axes_retained = input_num_axes - num_axes_replaced\n    num_new_axes = len(list(params.shape.dim))\n    outshape = []\n\n    for i in range(start_axis):\n        outshape.append(inshape[i])\n\n    for i in range(num_new_axes):\n        outshape.append(params.shape.dim[i])\n\n    for i in range(end_axis, input_num_axes):\n        outshape.append(inshape[i])\n\n    assert len(outshape) == num_axes_retained + num_new_axes,\\\n            ""[Reshape]invalid dims of output shape[%s]"" % (str(outshape))\n\n    inferred_axis = -1\n    copy_axes = []\n    constant_count = 1\n    for i in range(num_new_axes):\n        top_dim = params.shape.dim[i]\n        if top_dim == 0:\n            copy_axes.append(i)\n            copy_axis_index = start_axis + i\n            outshape[copy_axis_index] = inshape[copy_axis_index]\n        elif top_dim == -1:\n            assert inferred_axis == -1, ""[Reshape]new shape contains multiple -1 dims""\n            inferred_axis = i\n        else:\n            constant_count *= top_dim\n\n    if inferred_axis >= 0:\n        explicit_count = constant_count\n        l = inshape[0:start_axis]\n        if len(l) > 0:\n            explicit_count *= count(l)\n        l = inshape[end_axis:]\n        if len(l) > 0:\n            explicit_count *= count(l)\n        for i in range(len(copy_axes)):\n            explicit_count *= outshape[start_axis + copy_axes[i]]\n        assert input_count % explicit_count == 0, ""[Reshape]botom count[%d] ""\\\n                ""must be divisible by product of the specified dimensions[%d] ""\\\n                % (input_count, explicit_count)\n        outshape[start_axis + inferred_axis] = int(input_count / explicit_count)\n\n    output_count = count(outshape)\n    assert output_count == input_count, ""[Reshape]output count[%d] must match input count[%d]"" % (\n        output_count, input_count)\n    outshape[0] = -1\n    return [outshape]\n\n\ndef shape_argmax(layer, input_shape):\n    inshape = input_shape[0]\n    params = layer.argmax_param\n    out_max_val = params.out_max_val if hasattr(params, out_max_val) else False\n    top_k = params.top_k if hasattr(params, top_k) else 1\n    axis = parmas.axis if hasattr(params, axis) else -1\n    if axis < 0:\n        axis += len(inshape)\n    assert (axis + 1 == len(inshape)\n            ), \'only can be applied on the last dimension[axis:%d, %s] now,\'\\\n                    \'make sure you have set axis param in xxx.prototxt file\' \\\n                    % (axis, str(inshape))\n\n    outshape = inshape\n    outshape[-1] = top_k\n    if out_max_val is True:\n        outshape[-1] *= 2\n    return [outshape]\n\n\ndef shape_crop(layer, input_shape):\n    assert len(input_shape) == 2, ""the number of crop\'s inputs must be 2""\n    return [input_shape[1]]\n\n\ndef shape_flatten(layer, input_shape):\n    assert len(input_shape) == 1, ""the number of flatten\'s inputs must be 1""\n    inshape = input_shape[0]\n    params = layer.flatten_param\n    start_axis = params.axis\n    end_axis = params.end_axis\n    if start_axis < 0:\n        start_axis += len(inshape)\n    if end_axis < 0:\n        end_axis += len(inshape) + 1\n    assert start_axis <= end_axis, \'invalid axis[%d] or end_axis[%d] params\'\\\n            % (start_axis, end_axis)\n    output_shape = inshape[0:start_axis]\n    if len(inshape[start_axis:end_axis]) != 0:\n        flat_sz = reduce(lambda a, b: a * b, inshape[start_axis:end_axis])\n        output_shape += [flat_sz]\n    output_shape += inshape[end_axis:len(inshape)]\n    output_shape[0] = -1\n    return [output_shape]\n\n\ndef shape_power(layer, input_shape):\n    return input_shape\n\n\ndef shape_reduction(layer, input_shape):\n    params = layer.reduction_param\n    axis = params.axis\n    if axis < 0:\n        axis += len(input_shape[0]) + 1\n    assert axis <= len(input_shape[0]), \'invalid axis[%d] error\' % (axis)\n    return [input_shape[0:axis]]\n'"
x2paddle/op_mapper/onnx_directly_map.py,0,"b'#   Copyright (c) 2019  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License""\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom collections import OrderedDict as _dict\nimport numpy as _np\n\ndefault_op_mapping_field_values = _dict()\ndefault_op_mapping_field_values[\'FLUID_OP\'] = \'\'\ndefault_op_mapping_field_values[\'FLUID_INPUT_ARGS\'] = None\ndefault_op_mapping_field_values[\'FLUID_OUTPUT_ARGS\'] = None\ndefault_op_mapping_field_values[\'ATTR_MAPPING\'] = dict()\ndefault_op_mapping_field_values[\'DEFAULTS\'] = dict()\ndefault_op_mapping_field_values[\'INPUT_PERM\'] = None\ndefault_op_mapping_field_values[\'OUTPUT_PERM\'] = None\ndefault_op_mapping_field_values[\'FILL_NAME_FIELD\'] = True\n\ndefault_op_mapping = {\n    \'Shape\': [\'shape\', [\'X\'], [\'Out\']],\n    \'Clip\': [\n        \'clip\', [\'X\'], [\'Out\'],\n        dict(),\n        dict(\n            min=(_np.asarray([255, 255, 127, 255],\n                             dtype=_np.uint8).view(_np.float32)[0]),\n            max=(_np.asarray([255, 255, 127, 127],\n                             dtype=_np.uint8).view(_np.float32)[0]),\n        )\n    ],\n    \'Erf\': [\'erf\', [\'X\'], [\'Out\']],\n    \'Ceil\': [\'ceil\', [\'X\'], [\'Out\']],\n    \'ReduceMean\': [\n        \'reduce_mean\', [\'X\'], [\'Out\'],\n        dict(axes=\'dim\', keepdims=\'keep_dim\'),\n        dict(keep_dim=1)\n    ],\n    \'ReduceSum\': [\n        \'reduce_sum\', [\'X\'], [\'Out\'],\n        dict(axes=\'dim\', keepdims=\'keep_dim\'),\n        dict(keep_dim=1)\n    ],\n    \'ReduceMin\': [\n        \'reduce_min\', [\'X\'], [\'Out\'],\n        dict(axes=\'dim\', keepdims=\'keep_dim\'),\n        dict(keep_dim=1)\n    ],\n    #active function\n    \'Relu\': [\'relu\', [\'X\'], [\'Out\']],\n    \'LeakyRelu\': [\'leaky_relu\', [\'X\'], [\'Out\'],\n                  dict(), dict(alpha=.01)],\n    \'Elu\': [\'elu\', [\'X\'], [\'Out\'],\n            dict(), dict(alpha=1.)],\n    \'ThresholdedRelu\': [\n        \'thresholded_relu\', [\'X\'], [\'Out\'],\n        dict(alpha=\'threshold\'),\n        dict(alpha=1.)\n    ],\n    \'Tanh\': [\'tanh\', [\'X\'], [\'Out\']],\n    \'Sigmoid\': [\'sigmoid\', [\'X\'], [\'Out\']],\n    \'HardSigmoid\': [\n        \'hard_sigmoid\', [\'X\'], [\'Out\'],\n        dict(alpha=\'slope\', beta=\'offset\'),\n        dict(slope=.2, offset=.5)\n    ],\n    \'Softsign\': [\'softsign\', [\'X\'], [\'Out\']],\n    \'Softplus\': [\'softplus\', [\'X\'], [\'Out\']],\n    \'Exp\': [\'exp\', [\'X\'], [\'Out\']],\n    \'Softmax\': [\'softmax\', [\'X\'], [\'Out\'],\n                dict(), dict(axis=1)],\n    \'Sqrt\': [\'sqrt\', [\'X\'], [\'Out\']],\n    \'Floor\': [\'floor\', [\'X\'], [\'Out\']],\n    \'Abs\': [\'abs\', [\'X\'], [\'Out\']],\n}\n\ndefault_ioa_constraint = {\n    \'Gather\':\n    [(lambda i, o, a: a.get(\'axis\', 0) == 0, \'only axis = 0 is supported\')],\n}\n'"
x2paddle/op_mapper/onnx_op_mapper.py,0,"b'#   Copyright (c) 2019  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License""\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom x2paddle.core.graph import GraphNode\nfrom x2paddle.core.op_mapper import OpMapper\nfrom x2paddle.core.fluid_code import Layer\nfrom x2paddle.core.fluid_code import FluidCode\nfrom x2paddle.decoder.onnx_decoder import ONNXGraph, ONNXGraphNode, ONNXGraphDataNode\nfrom x2paddle.op_mapper.onnx_directly_map import default_op_mapping_field_values\nfrom x2paddle.op_mapper.onnx_directly_map import default_op_mapping\nfrom x2paddle.op_mapper.onnx_directly_map import default_ioa_constraint\nfrom x2paddle.op_mapper.onnx_custom_layer import *\nfrom x2paddle.core.util import string\nimport numpy as np\nimport onnx\nimport onnx.numpy_helper as numpy_helper\nfrom onnx.mapping import TENSOR_TYPE_TO_NP_TYPE\nimport logging as _logging\nfrom collections import OrderedDict as _dict\nimport math\nimport os\nimport shutil\nfrom functools import reduce\nimport onnxruntime as rt\n_logger = _logging.getLogger(__name__)\n\n\ndef _const_weight_or_none(node):\n    if \'Constant\' in node.layer_type:\n        return node.value\n    if isinstance(node, ONNXGraphDataNode):\n        return node.weight\n    return None\n\n\ndef get_same_padding(in_size, kernel_size, stride):\n    new_size = int(math.ceil(in_size * 1.0 / stride))\n    pad_size = (new_size - 1) * stride + kernel_size - in_size\n    pad0 = int(pad_size / 2)\n    pad1 = pad_size - pad0\n    return [pad0, pad1]\n\n\nclass ONNXOpMapper(OpMapper):\n    elementwise_ops = {\n        \'Add\': \'elementwise_add\',\n        \'Div\': \'elementwise_div\',\n        \'Sub\': \'elementwise_sub\',\n        \'Mul\': \'elementwise_mul\',\n        \'Pow\': \'elementwise_pow\',\n    }\n\n    def __init__(self, decoder, save_dir):\n        super(ONNXOpMapper, self).__init__()\n        self.decoder = decoder\n        self.graph = decoder.onnx_graph\n        self.input_shapes = []\n        self.weights = dict()\n        self.omit_nodes = list()\n        self.used_custom_layers = dict()\n        self.is_inference = False\n        self.tmp_data_dir = os.path.join(save_dir, \'tmp_data\')\n        self.tmp_outputs_dict = {}\n        self.get_output_shapes()\n\n        if not self.op_checker():\n            raise Exception(""Model are not supported yet."")\n\n        #mapping op\n        print(""Total nodes: {}"".format(\n            sum([\n                isinstance(node, ONNXGraphNode)\n                for name, node in self.graph.node_map.items()\n            ])))\n        for node_name in self.graph.topo_sort:\n            node = self.graph.get_node(node_name)\n            op = node.layer_type\n            if hasattr(self, op):\n                func = getattr(self, op)\n                func(node)\n            elif op in default_op_mapping:\n                self.directly_map(node)\n            elif op in custom_layers:\n                self.deal_custom_layer(node)\n            elif op in self.elementwise_ops:\n                self.elementwise_map(node)\n\n        self.remove_tmp_data()\n\n    def op_checker(self):\n        unsupported_ops = set()\n        for node_name in self.graph.topo_sort:\n            node = self.graph.get_node(node_name)\n            op = node.layer_type\n            if not hasattr(self, op) and \\\n                op not in default_op_mapping and \\\n                op not in custom_layers and \\\n                op not in self.elementwise_ops:\n                unsupported_ops.add(op)\n        if len(unsupported_ops) == 0:\n            return True\n        else:\n            print(""There are {} ops not supported yet, list as below"".format(\n                len(unsupported_ops)))\n            for op in unsupported_ops:\n                print(op)\n            return False\n\n    def get_results_of_inference(self, model, value_infos, data_nodes):\n        if not os.path.exists(self.tmp_data_dir):\n            os.makedirs(self.tmp_data_dir)\n        inputs_dict = {}\n        for data_node in data_nodes:\n            value_info = value_infos[data_node]\n            shape = value_info[\'shape\']\n            for i, dim_shape in enumerate(shape):\n                if dim_shape == 0 and i == 0:\n                    shape[i] = 1\n                if dim_shape == 0 and i != 0:\n                    assert \'shape of input is not assigned\'\n            ipt = np.random.random(shape).astype(value_info[\'dtype\'])\n            inputs_dict[data_node] = ipt\n\n        model = onnx.shape_inference.infer_shapes(model)\n        outputs = []\n\n        for value_info in model.graph.value_info:\n            outputs.append(value_info.name)\n\n        model.graph.ClearField(\'output\')\n        model.graph.output.MergeFrom(model.graph.value_info)\n        onnx.save(model, os.path.join(self.tmp_data_dir,\n                                      \'onnx_model_infer.onnx\'))\n        sess = rt.InferenceSession(\n            os.path.join(self.tmp_data_dir, \'onnx_model_infer.onnx\'))\n        res = sess.run(None, input_feed=inputs_dict)\n        self.tmp_outputs_dict = dict(zip(outputs, res))\n\n        return\n\n    def get_dynamic_shape(self, layer):\n        """"""\n        get dynamic shape from infer_result\n        """"""\n        if layer not in self.tmp_outputs_dict:\n            return [None, None, None]\n        output = self.tmp_outputs_dict[layer]\n        return output.tolist(), output.dtype, output.shape\n\n    def get_output_shapes(self):\n        """"""\n        build topo_sort of ONNX model\n        """"""\n        nodes = self.decoder.model.graph.node\n        node_map = self.decoder.onnx_graph.node_map\n        value_infos = self.decoder.onnx_graph.value_infos\n        onnx_model = self.decoder.model\n        for layer in nodes:\n            node = node_map[layer.name]\n            for opt in layer.output:\n                if opt in value_infos:\n                    value_info = value_infos[opt]\n                    if len(value_info[\'shape\']) == 0 or value_info[\n                            \'dtype\'] is None or 0 in value_info[\'shape\']:\n                        if self.is_inference == False:\n                            self.get_results_of_inference(\n                                onnx_model, value_infos,\n                                self.decoder.onnx_graph.place_holder_nodes)\n                            self.is_inference = True\n                        _, dtype, shape = self.get_dynamic_shape(opt)\n                        node.out_shapes.append(shape)\n                        node.dtype = dtype\n                    else:\n                        node.dtype = value_info[\'dtype\']\n                        node.out_shapes.append(value_info[\'shape\'])\n                else:\n                    if self.is_inference == False:\n                        self.get_results_of_inference(\n                            onnx_model, value_infos,\n                            self.decoder.onnx_graph.place_holder_nodes)\n                        self.is_inference = True\n                    _, dtype, shape = self.get_dynamic_shape(opt)\n                    node.dtype = dtype\n                    node.out_shapes.append(shape)\n\n    def remove_tmp_data(self):\n        """"""\n        remove temporarily generated file\n        """"""\n        if os.path.exists(self.tmp_data_dir):\n            import shutil\n            shutil.rmtree(self.tmp_data_dir)\n\n    def directly_map(self, node, name=\'\', *args, **kwargs):\n        inputs = node.layer.input\n        outputs = node.layer.output\n        op_type = node.layer_type\n        attrs = node.attr_map\n        info = default_op_mapping[op_type]\n        info.extend(list(default_op_mapping_field_values.values())[len(info):])\n        (\n            fluid_op,\n            fluid_input_args,\n            fluid_output_args,\n            attr_mapping,\n            default_attrs,\n            input_perm,\n            output_perm,\n            fill_name_field,\n        ) = info\n\n        if fluid_op in default_ioa_constraint:\n            for predicate, message in default_ioa_constraint[fluid_op]:\n                assert predicate(inputs, outputs, attrs), message\n\n        mapped_attrs = {\n            attr_mapping.get(key, key): value\n            for key, value in attrs.items()\n        }\n        if \'\' in mapped_attrs:\n            mapped_attrs.pop(\'\')\n        if \'_\' in mapped_attrs:\n            mapped_attrs.pop(\'_\')\n        fluid_attrs = default_attrs.copy()\n        fluid_attrs.update(mapped_attrs)\n        inputs = inputs if input_perm is None else list(\n            map(lambda i: inputs[i], input_perm))\n        val_inps = []\n        for idx, ipt in enumerate(inputs):\n            val_inps.append(self.graph.get_input_node(node, idx=idx, copy=True))\n\n        val_outs = outputs if output_perm is None else list(\n            map(lambda i: outputs[i], output_perm))\n        attr = fluid_attrs\n        assert len(val_inps) == 1, \'directly_map error with multi inputs\'\n        if fluid_op not in [\'shape\']:\n            attr[\'name\'] = string(node.layer_name)\n        node.fluid_code.add_layer(fluid_op,\n                                  inputs=val_inps[0],\n                                  output=val_outs[0],\n                                  param_attr=attr)\n\n    def deal_custom_layer(self, node):\n        op = node.layer_type\n        custom_code, func = make_custom_layer(node)\n        child_func_code, child_func = make_custom_child_func(node)\n        params = get_params(node.layer, node.layer_type)\n        arg_names, kwargs = set_args(func, params)\n        kwargs[\'name\'] = string(node.layer_name)\n        node.fluid_code.add_layer(func.__code__.co_name,\n                                  inputs=node.inputs,\n                                  output=node,\n                                  param_attr=kwargs,\n                                  is_custom_layer=True)\n        if op not in self.used_custom_layers:\n            self.used_custom_layers[op] = custom_code\n            if op + \'_child_func\' not in self.used_custom_layers:\n                if child_func_code is not None:\n                    self.used_custom_layers[op +\n                                            \'_child_func\'] = child_func_code\n\n    def elementwise_map(self, node):\n        assert node.layer_type in self.elementwise_ops\n        op_type = self.elementwise_ops[node.layer_type]\n\n        val_x = self.graph.get_input_node(node, idx=0, copy=True)\n        val_y = self.graph.get_input_node(node, idx=1, copy=True)\n        val_y_shape = val_y.out_shapes[0]\n        val_x_shape = val_x.out_shapes[0]\n\n        if len(val_x_shape) < len(val_y_shape):\n            val_x, val_y = val_y, val_x\n\n        str_y_shape = \',\'.join(str(e) for e in val_y_shape)\n        str_x_shape = \',\'.join(str(e) for e in val_x_shape)\n        slice_idx = 0\n        if str_y_shape not in str_x_shape:\n            for dim in val_y_shape:\n                if dim == 1:\n                    slice_idx += 1\n                else:\n                    break\n        attr = {""name"": string(node.layer_name)}\n        if slice_idx < len(val_y_shape) and slice_idx > 0:\n            val_y_reshaped = val_y_shape[slice_idx:]\n            var_y_reshaped = val_y.layer_name + \'_reshaped\'\n            attr_reshaped = {\n                \'shape\': val_y_reshaped,\n                \'name\': string(var_y_reshaped)\n            }\n            node.fluid_code.add_layer(\'reshape\',\n                                      inputs=val_y,\n                                      output=var_y_reshaped,\n                                      param_attr=attr_reshaped)\n            inputs = {\'x\': val_x, \'y\': var_y_reshaped}\n            node.fluid_code.add_layer(op_type,\n                                      inputs=inputs,\n                                      output=node,\n                                      param_attr=attr)\n        else:\n            inputs = {\'x\': val_x, \'y\': val_y}\n            node.fluid_code.add_layer(op_type,\n                                      inputs=inputs,\n                                      output=node,\n                                      param_attr=attr)\n\n    def place_holder(self, node):\n        self.input_shapes.append(node.out_shapes[0])\n\n        shape = node.out_shapes[0]\n        for i, dim_shape in enumerate(shape):\n            if dim_shape == 0 and i == 0:\n                shape[i] = 1\n            if dim_shape == 0 and i != 0:\n                assert \'shape of input is not assigned\'\n        attr = {\n            ""dtype"": string(node.dtype),\n            ""shape"": shape,\n            ""name"": string(node.layer_name),\n            ""append_batch_size"": \'False\'\n        }\n\n        node.fluid_code.add_layer(""data"",\n                                  inputs=None,\n                                  output=node,\n                                  param_attr=attr)\n\n    def create_parameter(self, node, parameter=None):\n        if parameter is not None:\n            node = parameter\n        dtype = node.dtype\n        shape = node.out_shapes[0]\n        if len(node.weight.shape) == 0:\n            shape = [1]\n        self.weights[node.layer_name] = node.weight\n        attr = {\n            \'dtype\': string(dtype),\n            \'shape\': shape,\n            \'name\': string(node.layer_name),\n            \'attr\': string(node.layer_name),\n            \'default_initializer\': \'Constant(0.0)\'\n        }\n        node.fluid_code.add_layer(""create_parameter"",\n                                  inputs=None,\n                                  output=node,\n                                  param_attr=attr)\n\n    def _pad_if_asymmetric(self, node, pads, val_name):  # pads: SSEE\n        assert len(pads) & 1 == 0\n        symmetric = True\n        ndims = len(pads) // 2\n        for idx_dim in range(ndims):\n            if pads[idx_dim] != pads[ndims + idx_dim]:\n                symmetric = False\n                break\n        if symmetric:\n            return pads[:ndims], val_name\n        val_padded = self.Pad(node, op_independent=False)\n        return [0] * ndims, val_padded\n\n    def _interpolate(self, node):\n        val_x = self.graph.get_input_node(node, idx=0, copy=True)\n        val_scales = self.graph.get_input_node(node, idx=1, copy=True)\n        val_y = self.graph.get_node(node.layer.output[0], copy=True)\n        out_shape = val_y.out_shapes[0]\n        if out_shape is not None:\n            assert len(out_shape) == 4, \'only 4-D Tensor as X and Y supported\'\n            out_shape = out_shape[2:]\n\n        scales = _const_weight_or_none(val_scales)\n\n        if isinstance(val_scales, ONNXGraphNode):\n            scales, _, _ = self.get_dynamic_shape(val_scales.layer_name)\n        attr = {\'name\': string(node.layer_name)}\n        use_scales = True\n        if scales is not None:\n            try:\n                assert len(scales) == 4, \'only 4-D Tensor as X and Y supported\'\n                assert scales[0] == 1 and scales[\n                    1] == 1, \'only scale on (NC)HW supported\'\n                assert scales[2] == scales[\n                    3], \'only aspect-ratio-invariant scale supported\'\n            except:\n                use_scales = False\n        scale = scales[2] if scales else None\n        if scale is None:\n            assert out_shape, \'neither scales nor output shape is available\'\n        else:\n            if out_shape is None:\n                in_shape = val_x.out_shapes[0]\n                assert in_shape is not None, \'out_shape required but not inferrable\'\n                assert len(\n                    in_shape) == 4, \'only 4-D Tensor as X and Y supported\'\n                out_shape = [in_shape[2] * scale, in_shape[3] * scale]\n\n        mode = node.get_attr(\'mode\', \'nearest\')\n\n        fluid_op = \'resize_{}\'.format(mode)\n        if \'linear\' in mode:\n            print(\n                \'Warnning: paddle not support op:resize wiht mode: linear, we use bilinear replace linear\'\n            )\n            fluid_op = \'resize_bilinear\'\n\n        if use_scales and scale is not None:\n            attr[\'scale\'] = scale\n        else:\n            attr[\'out_shape\'] = out_shape\n\n        node.fluid_code.add_layer(fluid_op,\n                                  inputs=val_x,\n                                  output=node,\n                                  param_attr=attr)\n\n    def RoiAlign(self, node):\n        val_x = self.graph.get_input_node(node, idx=0, copy=True)\n        val_rois = self.graph.get_input_node(node, idx=1, copy=True)\n\n        pooled_height = node.get_attr(\'output_height\')\n        pooled_width = node.get_attr(\'output_width\')\n        spatial_scale = node.get_attr(\'spatial_scale\')\n        sampling_ratio = node.get_attr(\'sampling_ratio\')\n        attr = {\n            \'pooled_height\': pooled_height,\n            \'pooled_width\': pooled_width,\n            \'spatial_scale\': spatial_scale,\n            \'sampling_ratio\': sampling_ratio,\n        }\n        node.fluid_code.add_layer(\'roi_align\',\n                                  inputs={\n                                      \'input\': val_x,\n                                      \'rois\': val_rois\n                                  },\n                                  output=node,\n                                  param_attr=attr)\n\n    def MaxRoiPool(self, node):\n        val_x = self.graph.get_input_node(node, idx=0, copy=True)\n        val_rois = self.graph.get_input_node(node, idx=1, copy=True)\n\n        spatial_scale = node.get_attr(\'spatial_scale\')\n        pooled_height, pooled_width = node.get_attr(\'pooled_shape\')\n        attr = {\n            \'pooled_height\': pooled_height,\n            \'pooled_width\': pooled_width,\n            \'spatial_scale\': spatial_scale,\n        }\n        node.fluid_code.add_layer(\'roi_pool\',\n                                  inputs={\n                                      \'input\': val_x,\n                                      \'rois\': val_rois\n                                  },\n                                  output=node,\n                                  param_attr=attr)\n\n    def Pad(self, node, op_independent=True):\n        val_x = self.graph.get_input_node(node, idx=0, copy=True)\n        pads = node.get_attr(\'pads\')\n        mode = node.get_attr(\'mode\', \'constant\')\n        value = node.get_attr(\'value\', 0.)\n        data_shape = val_x.out_shapes[0]\n        output_shape = node.out_shapes[0]\n        assume_pad2d = False\n        attr = {}\n        if len(pads) == 4:\n            assume_pad2d |= mode != \'constant\'\n            if data_shape:\n                assume_pad2d |= data_shape and len(data_shape) == 4  # NCHW\n            if output_shape:\n                assume_pad2d |= output_shape and len(output_shape) == 4  # NCHW\n        if assume_pad2d:\n            fluid_op = \'pad2d\'\n            attr[\'data_format\'] = string(\'NCHW\')\n            attr[\'mode\'] = string(mode)\n        else:\n            attr = {\'pad_value\': value}\n            fluid_op = \'pad\'\n        if len(pads) == 4:\n            paddings = np.array(pads).reshape(\n                (-1, 2)).transpose().flatten().tolist()  # SSEE -> SESE\n        elif len(pads) == 8:\n            paddings = np.array(pads).reshape(\n                (-1, 4)).transpose().flatten().tolist()  # SSEE -> SESE\n            if sum(paddings[:4]) == 0:\n                fluid_op = \'pad2d\'\n                paddings = paddings[4:]\n                attr[\'mode\'] = string(mode)\n        attr[\'paddings\'] = paddings\n        if op_independent:\n            attr[\'name\'] = string(node.layer_name)\n            node.fluid_code.add_layer(fluid_op,\n                                      inputs=val_x,\n                                      output=node,\n                                      param_attr=attr)\n        else:\n            attr[\'name\'] = string(node.layer_name + \'_paded\')\n            node.fluid_code.add_layer(fluid_op,\n                                      inputs=val_x,\n                                      output=node.layer_name + \'_paded\',\n                                      param_attr=attr)\n            return node.layer_name + \'_paded\'\n\n    def Unsqueeze(self, node):\n        val_x = self.graph.get_input_node(node, idx=0, copy=True)\n        axes = node.get_attr(\'axes\')\n        if len(val_x.out_shapes[0]) == 0:\n            node.fluid_code.add_layer(\'assign\',\n                                      inputs=val_x,\n                                      output=node,\n                                      param_attr=None)\n        else:\n            attr = {\'axes\': axes, \'name\': string(node.layer_name)}\n            node.fluid_code.add_layer(\'unsqueeze\',\n                                      inputs=val_x,\n                                      output=node,\n                                      param_attr=attr)\n\n    def Shrink(self, node):\n        val_x = self.graph.get_input_node(node, idx=0, copy=True)\n        bias = node.get_attr(\'bias\')\n        lambd = node.get_attr(\'lambd\')\n        assert bias == 0.0, \'not support bias!=0\'\n        attr = {\'threshold\': lambd, \'name\': node.layer_name}\n        node.fluid_code.add_layer(\'hard_shrink\',\n                                  inputs=val_x,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Constant(self, node):\n        val_output = self.graph.get_node(node.layer.output[0], copy=True)\n\n        value = node.get_attr(\'value\')\n        dtype = np.dtype(value.dtype)\n        output_dtype = val_output.dtype\n        if output_dtype:\n            assert dtype == output_dtype, \'tensor dtype unmatches storage dtype\'\n\n        shape = node.get_attr(\'shape\', None)\n\n        if shape is None:\n            shape = val_output.out_shapes[0]\n        if shape is None:\n            shape = list(value.shape)\n            _logger.warning(\n                \'in (Constant -> %s): \'\n                \'attribute ""shape"" of %s not inferred, \'\n                \'using value as 1-D tensor may lead to fails\',\n                val_output.layer_name, val_output.layer_name)\n\n        if len(value) == 1:\n            value = value.tolist()\n            shape = [1]\n            value = value[0]\n            if dtype.name == \'int64\':\n                dtype = \'int32\'\n            attr = {\'shape\': shape, \'dtype\': string(dtype), \'value\': value}\n            node.fluid_code.add_layer(\'fill_constant\',\n                                      inputs=None,\n                                      output=node,\n                                      param_attr=attr)\n        else:\n            value = np.reshape(value, shape)\n            self.weights[node.layer_name] = value\n            attr = {\n                \'dtype\': string(dtype),\n                \'shape\': shape,\n                \'name\': string(node.layer_name),\n                \'attr\': string(node.layer_name),\n                \'default_initializer\': \'Constant(0.0)\'\n            }\n            node.fluid_code.add_layer(""create_parameter"",\n                                      inputs=None,\n                                      output=node,\n                                      param_attr=attr)\n\n    def Resize(self, node):\n        self._interpolate(node)\n\n    def Upsample(self, node):\n        self._interpolate(node)\n\n    def Expand(self, node):\n        val_x = self.graph.get_input_node(node, idx=0, copy=True)\n        val_shape = self.graph.get_input_node(node, idx=1, copy=True)\n\n        if len(val_shape.outputs) == 1:\n            self.omit_nodes.append(val_shape.layer_name)\n\n        val_y = self.graph.get_node(node.layer.output[0], copy=True)\n        out_shape = node.out_shapes[0]\n        val_x_dtype = val_x.dtype\n\n        name_ones = node.layer_name + \'_ones\'\n        attr_ones = {\'shape\': out_shape, \'dtype\': string(val_x_dtype)}\n        node.fluid_code.add_layer(\'ones\',\n                                  inputs=None,\n                                  output=name_ones,\n                                  param_attr=attr_ones)\n        inputs = {\'x\': name_ones, \'y\': val_x}\n        attr = {\'name\': string(node.layer_name)}\n        node.fluid_code.add_layer(\'elementwise_mul\',\n                                  inputs=inputs,\n                                  output=node.layer_name,\n                                  param_attr=attr)\n\n    def Gather(self, node):\n        val_x = self.graph.get_input_node(node, idx=0, copy=True)\n        indices = self.graph.get_input_node(node, idx=1, copy=True)\n        indices_shape = indices.out_shapes[0]\n        axis = node.get_attr(\'axis\', 0)\n        assert len(\n            indices_shape) <= 2, ""Gather op don\'t support dim of indice >2 ""\n        if axis == 0 and len(indices_shape) <= 1:\n            node.fluid_code.add_layer(\'gather\',\n                                      inputs={\n                                          \'input\': val_x,\n                                          \'index\': indices\n                                      },\n                                      output=node,\n                                      param_attr=None)\n        elif axis > 0 and len(indices_shape) <= 1:\n            perm = list(range(len(val_x.out_shapes[0])))\n            perm = [axis] + perm[:axis] + perm[axis + 1:]\n            attr_trans = {\'perm\': perm}\n            name_trans = val_x.layer_name + \'_trans\'\n            node.fluid_code.add_layer(\'transpose\',\n                                      inputs=val_x,\n                                      output=name_trans,\n                                      param_attr=attr_trans)\n            node.fluid_code.add_layer(\'gather\',\n                                      inputs={\n                                          \'input\': name_trans,\n                                          \'index\': indices\n                                      },\n                                      output=node,\n                                      param_attr=None)\n            node.fluid_code.add_layer(\'transpose\',\n                                      inputs=node,\n                                      output=node,\n                                      param_attr=attr_trans)\n        elif len(indices_shape) > 1:\n            from functools import reduce\n            reshape_shape = reduce(lambda x, y: x * y, indices_shape)\n            node.fluid_code.add_layer(\'reshape\',\n                                      inputs=indices,\n                                      output=indices,\n                                      param_attr={\'shape\': [\n                                          reshape_shape,\n                                      ]})\n\n            perm = list(range(len(val_x.out_shapes[0])))\n            perm = [axis] + perm[:axis] + perm[axis + 1:]\n            attr_trans = {\'perm\': perm}\n            name_trans = val_x.layer_name + \'_trans\'\n            node.fluid_code.add_layer(\'transpose\',\n                                      inputs=val_x,\n                                      output=name_trans,\n                                      param_attr=attr_trans)\n            node.fluid_code.add_layer(\'gather\',\n                                      inputs={\n                                          \'input\': name_trans,\n                                          \'index\': indices\n                                      },\n                                      output=node,\n                                      param_attr=None)\n            node.fluid_code.add_layer(\'transpose\',\n                                      inputs=node,\n                                      output=node,\n                                      param_attr=attr_trans)\n            val_x_shape = val_x.out_shapes[0]\n            reshaped_shape = []\n            for i in perm:\n                reshaped_shape.append(indices_shape[i])\n            for i in val_x_shape[:axis] + val_x_shape[axis + 1:]:\n                reshaped_shape.append(i)\n            node.fluid_code.add_layer(\'reshape\',\n                                      inputs=node,\n                                      output=node,\n                                      param_attr={\'shape\': reshaped_shape})\n\n    def Slice(self, node):\n        val_x = self.graph.get_input_node(node, idx=0, copy=True)\n        starts, ends, axes, steps = None, None, None, None\n        if len(node.inputs) > 1:\n            starts = self.graph.get_input_node(node, idx=1, copy=True)\n            ends = self.graph.get_input_node(node, idx=2, copy=True)\n            if len(node.inputs) > 3:\n                axes = self.graph.get_input_node(node, idx=3, copy=True)\n                self.omit_nodes.append(axes.layer_name)\n                axes = _const_weight_or_none(axes)\n            if len(node.inputs) > 4:\n                steps = self.graph.get_input_node(node, idx=4, copy=True)\n                self.omit_nodes.append(steps.layer_name)\n                steps = _const_weight_or_none(steps)\n\n            self.omit_nodes.append(starts.layer_name)\n            self.omit_nodes.append(ends.layer_name)\n            starts = _const_weight_or_none(starts).copy()\n            ends = _const_weight_or_none(ends).copy()\n        else:\n            starts = node.get_attr(\'starts\')\n            ends = node.get_attr(\'ends\')\n            axes = node.get_attr(\'axes\')\n\n        val_y = self.graph.get_node(node.layer.output[0], copy=True)\n\n        shape = val_x.out_shapes[0]\n\n        if shape is not None:\n            for idx, value in enumerate(starts):\n                if value > shape[axes[idx]]:\n                    starts[idx] = shape[axes[idx]]\n            for idx, value in enumerate(ends):\n                if value > shape[axes[idx]]:\n                    ends[idx] = shape[axes[idx]]\n        attr = {""axes"": axes, ""starts"": starts, ""ends"": ends}\n        node.fluid_code.add_layer(\'slice\',\n                                  inputs=val_x,\n                                  output=node,\n                                  param_attr=attr)\n\n    def ConstantOfShape(self, node):\n        val_shape = self.graph.get_input_node(node, idx=0, copy=True)\n        val_y = self.graph.get_node(node.layer.output[0], copy=True)\n        shape = _const_weight_or_none(val_shape)\n\n        if shape is None:\n            shape = node.out_shapes[0]\n\n        assert shape is not None, (\n            \'given shape is neither const value nor deductible from output, \'\n            \'this is not supported\')\n\n        value = node.get_attr(\'value\')\n        dtype = value.dtype\n        value = value.tolist()\n        if len(value) == 1:\n            shape = [1]\n            value = value[0]\n            if dtype.name == \'int64\':\n                dtype = \'int32\'\n            attr = {\'shape\': shape, \'dtype\': string(dtype), \'value\': value}\n            node.fluid_code.add_layer(\'fill_constant\',\n                                      inputs=None,\n                                      output=node,\n                                      param_attr=attr)\n\n    def Split(self, node):\n        val_x = self.graph.get_input_node(node, idx=0, copy=True)\n        val_y = self.graph.get_node(node.layer.output[0], copy=True)\n\n        fluid_op = \'split\'\n        split = node.get_attr(\'split\')\n        axis = node.get_attr(\'axis\', 0)\n        attr = {\n            \'num_or_sections\': split,\n            \'dim\': axis,\n            \'name\': string(node.layer_name)\n        }\n\n        node.fluid_code.add_layer(\'split\',\n                                  inputs=val_x,\n                                  output=val_y,\n                                  param_attr=attr)\n\n    def Reshape(self, node):\n        val_x = self.graph.get_input_node(node, idx=0, copy=True)\n        val_shape = self.graph.get_input_node(node, idx=1, copy=True)\n        val_reshaped = self.graph.get_node(node.layer.output[0], copy=True)\n        shape = None\n\n        if isinstance(val_shape, ONNXGraphDataNode):\n            self.omit_nodes.append(val_shape.layer_name)\n\n        attr = {\'name\': string(node.layer_name)}\n        # catch dynamic graph shape\n        if isinstance(val_shape, ONNXGraphNode):\n            shape, _, _ = self.get_dynamic_shape(val_shape.layer_name)\n            if val_shape.dtype == \'int64\':\n                val_shape_cast = val_shape.layer_name + \'_cast\'\n                node.fluid_code.add_layer(\'cast\',\n                                          inputs=val_shape,\n                                          output=val_shape_cast,\n                                          param_attr={\'dtype\': string(\'int32\')})\n\n                attr[\'actual_shape\'] = val_shape_cast\n            else:\n                attr[\'actual_shape\'] = val_shape\n\n        if shape is None:\n            shape = val_reshaped.out_shapes[0]\n\n        if shape is None:\n            shape = [1, -1]\n            _logger.warning(\n                \'in %s(%s -> Reshape -> %s): \'\n                \'input ""shape"" not inferred, use [1, -1] as dummy value, \'\n                \'the behavior of Paddle fluid maybe undefined\', node.layer_name,\n                val_x.layer_name, val_reshaped.layer_name)\n\n        attr[\'shape\'] = shape\n        node.fluid_code.add_layer(\'reshape\',\n                                  inputs=val_x,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Cast(self, node):\n        val_input = self.graph.get_input_node(node, idx=0, copy=True)\n        val_output = self.graph.get_node(node.layer.output[0], copy=True)\n\n        dtype = node.get_attr(\'to\')\n        if not isinstance(dtype, np.dtype):\n            dtype = TENSOR_TYPE_TO_NP_TYPE[dtype]\n\n        output_dtype = val_output.dtype\n        if output_dtype:\n            assert dtype == output_dtype, \'dtype of to unmatches output\'\n        attr = {\'dtype\': string(dtype)}\n        node.fluid_code.add_layer(\'cast\',\n                                  inputs=val_input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def AveragePool(self, node):\n        val_x = self.graph.get_input_node(node, idx=0, copy=True)\n\n        auto_pad = node.get_attr(\'auto_pad\', \'NOTSET\')\n        kernel_shape = node.get_attr(""kernel_shape"")\n        poolnd = len(kernel_shape)\n        strides = node.get_attr(""strides"")\n        pad_mode = node.get_attr(""pads"")\n        ceil_mode = bool(node.get_attr(\'ceil_mode\', 0))\n        pads = node.get_attr(\'pads\', [0] * (poolnd * 2))\n        fluid_op = \'pool{}d\'.format(poolnd)\n        assert 2 <= poolnd <= 3, \'only pool2d and pool3d is supported\'\n\n        paddings, val_x = self._pad_if_asymmetric(node, pads, val_x)\n\n        if auto_pad == ""SAME_UPPER"" or auto_pad == ""SAME_LOWER"":\n            input_shape = val_x.out_shapes[0]\n            pad_h = get_same_padding(input_shape[2], kernel_shape[0],\n                                     strides[0])\n            pad_w = get_same_padding(input_shape[3], kernel_shape[1],\n                                     strides[1])\n            attr = {""paddings"": pad_h + pad_w, ""pad_value"": 0.0}\n\n        attr = {\n            ""pool_size"": kernel_shape,\n            ""pool_type"": string(\'avg\'),\n            ""pool_stride"": strides,\n            ""pool_padding"": paddings,\n            ""ceil_mode"": ceil_mode,\n            ""exclusive"": \'True\',\n            ""name"": string(node.layer_name)\n        }\n\n        node.fluid_code.add_layer(fluid_op,\n                                  inputs=val_x,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Concat(self, node):\n        inputs = []\n        for i in range(len(node.layer.input)):\n            ipt = self.graph.get_input_node(node, idx=i, copy=True)\n            if isinstance(ipt, str):\n                inputs.append(ipt)\n            else:\n                inputs.append(ipt.layer_name)\n        axis = node.get_attr(\'axis\')\n        attr = {\'axis\': axis}\n        node.fluid_code.add_layer(\'concat\',\n                                  inputs=inputs,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Flatten(self, node):\n        val_x = self.graph.get_input_node(node, idx=0, copy=True)\n        axis = node.get_attr(\'axis\', 1)\n        attr = {""axis"": str(axis), ""name"": string(node.layer_name)}\n        node.fluid_code.add_layer(\'flatten\',\n                                  inputs=val_x,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Gemm(self, node):\n        val_a = self.graph.get_input_node(node, idx=0, copy=True)\n        val_b = self.graph.get_input_node(node, idx=1, copy=True)\n        val_c = self.graph.get_input_node(node, idx=2, copy=True)\n\n        alpha = node.get_attr(\'alpha\', 1.)  # optional\n        beta = node.get_attr(\'beta\', 1.)  # optional\n        trans_a = bool(node.get_attr(\'transA\', 0))  # optional\n        trans_b = bool(node.get_attr(\'transB\', 0))  # optional\n        val_mm = node.layer_name + \'_mm\'\n        matmul_inputs = {""x"": val_a, ""y"": val_b}\n        attr_matmul = {\n            ""transpose_x"": trans_a,\n            ""transpose_y"": trans_b,\n            ""alpha"": alpha,\n            ""name"": string(val_mm)\n        }\n        node.fluid_code.add_layer(\'matmul\',\n                                  inputs=matmul_inputs,\n                                  output=val_mm,\n                                  param_attr=attr_matmul)\n\n        if beta != 0:\n            if beta == 1.:\n                add_inputs = {""x"": val_mm, ""y"": val_c}\n                attr = {""name"": string(node.layer_name)}\n                node.fluid_code.add_layer(""elementwise_add"",\n                                          inputs=add_inputs,\n                                          output=node,\n                                          param_attr=attr)\n            else:\n                var_beta = node.layer_name + \'_beta\'\n                matmul_beta_inputs = {""x"": val_c, ""y"": var_beta}\n                node.fluid_code.add_layer(""Constant"",\n                                          inputs=matmul_beta_inputs,\n                                          output=var_beta,\n                                          param_attr={\'value\': beta})\n\n                add_inputs = {""x"": val_mm, ""y"": var_beta}\n                attr = {""name"": string(node.layer_name)}\n                node.fluid_code.add_layer(""elementwise_add"",\n                                          inputs=add_inputs,\n                                          output=node,\n                                          param_attr=attr)\n\n    def Sum(self, node):\n        val_inps = node.layer.input\n        inputs = {\n            ""x"": self.graph.get_input_node(node, idx=0, copy=True),\n            ""y"": self.graph.get_input_node(node, idx=1, copy=True),\n        }\n        node.fluid_code.add_layer(""elementwise_add"", inputs=inputs, output=node)\n\n        for idx, ipt in enumerate(val_inps[2:]):\n            y = self.graph.get_input_node(node, idx=idx, copy=True)\n            inputs = {\n                ""x"": node.layer_name,\n                ""y"": y,\n            }\n            node.fluid_code.add_layer(""elementwise_add"",\n                                      inputs=inputs,\n                                      output=node)\n\n    def MatMul(self, node):\n        val_x = self.graph.get_input_node(node, idx=0, copy=True)\n        val_y = self.graph.get_input_node(node, idx=1, copy=True)\n        inputs = {""x"": val_x, ""y"": val_y}\n        attr = {""name"": string(node.layer_name)}\n        node.fluid_code.add_layer(""matmul"",\n                                  inputs=inputs,\n                                  output=node,\n                                  param_attr=attr)\n\n    def BatchNormalization(self, node):\n        val_x = self.graph.get_input_node(node, idx=0, copy=True)\n        val_scale = self.graph.get_input_node(node, idx=1, copy=True)\n        val_b = self.graph.get_input_node(node, idx=2, copy=True)\n        val_mean = self.graph.get_input_node(node, idx=3, copy=True)\n        val_var = self.graph.get_input_node(node, idx=4, copy=True)\n\n        self.omit_nodes.append(val_scale.layer_name)\n        self.omit_nodes.append(val_b.layer_name)\n        self.omit_nodes.append(val_mean.layer_name)\n        self.omit_nodes.append(val_var.layer_name)\n\n        momentum = node.get_attr(\'momentum\', .9)\n        epsilon = node.get_attr(\'epsilon\', 1e-5)\n\n        # Attribute: spatial is used in BatchNormalization-1,6,7\n        spatial = bool(node.get_attr(\'spatial\'))\n        attr = {\n            ""momentum"": momentum,\n            ""epsilon"": epsilon,\n            ""data_layout"": string(\'NCHW\'),\n            ""is_test"": True,\n            ""param_attr"": string(val_scale.layer_name),\n            ""bias_attr"": string(val_b.layer_name),\n            ""moving_mean_name"": string(val_mean.layer_name),\n            ""moving_variance_name"": string(val_var.layer_name),\n            ""use_global_stats"": spatial,\n            ""name"": string(node.layer_name)\n        }\n        node.fluid_code.add_layer(""batch_norm"",\n                                  inputs=val_x,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Transpose(self, node):\n        val_x = self.graph.get_input_node(node, idx=0, copy=True)\n        perm = node.get_attr(\'perm\')\n        attr = {\'perm\': perm, ""name"": string(node.layer_name)}\n        node.fluid_code.add_layer(""transpose"",\n                                  inputs=val_x,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Relu(self, node):\n        val_x = self.graph.get_input_node(node, idx=0, copy=True)\n        attr = {""name"": string(node.layer_name)}\n        node.fluid_code.add_layer(""relu"",\n                                  inputs=val_x,\n                                  output=node,\n                                  param_attr=attr)\n\n    def PRelu(self, node):\n        val_x = self.graph.get_input_node(node, idx=0, copy=True)\n        val_slope = self.graph.get_input_node(node, idx=1, copy=True)\n\n        mode = \'channel\'\n        shape_slope = val_slope.out_shapes[0]\n        if len(shape_slope) == 1:\n            mode = \'all\'\n        elif len(shape_slope) > 2:\n            mode = \'element\'\n        attr = {\n            ""param_attr"": string(val_slope.layer_name),\n            \'mode\': string(mode)\n        }\n        node.fluid_code.add_layer(""prelu"",\n                                  inputs=val_x,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Squeeze(self, node):\n        val_x = self.graph.get_input_node(node, idx=0, copy=True)\n        axes = node.get_attr(\'axes\')\n        attr = {\'axes\': axes, ""name"": string(node.layer_name)}\n        node.fluid_code.add_layer(""squeeze"",\n                                  inputs=val_x,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Equal(self, node):\n        val_x = self.graph.get_input_node(node, idx=0, copy=True)\n        val_y = self.graph.get_input_node(node, idx=1, copy=True)\n        node.fluid_code.add_layer(""equal"",\n                                  inputs={\n                                      \'x\': val_x,\n                                      \'y\': val_y\n                                  },\n                                  output=node,\n                                  param_attr=None)\n\n    def Where(self, node):\n        condition = self.graph.get_input_node(node, idx=0, copy=True)\n        val_x = self.graph.get_input_node(node, idx=1, copy=True)\n        val_y = self.graph.get_input_node(node, idx=2, copy=True)\n\n        not_condition = condition.layer_name + \'_not\'\n        node.fluid_code.add_layer(""logical_not"",\n                                  inputs=condition,\n                                  output=not_condition,\n                                  param_attr=None)\n        cast_not_condition = not_condition + \'_cast\'\n        node.fluid_code.add_layer(""cast"",\n                                  inputs=not_condition,\n                                  output=cast_not_condition,\n                                  param_attr={\'dtype\': string(val_x.dtype)})\n        cast_condition = condition.layer_name + \'_cast\'\n        node.fluid_code.add_layer(""cast"",\n                                  inputs=condition,\n                                  output=cast_condition,\n                                  param_attr={\'dtype\': string(val_x.dtype)})\n        mul_val_x = val_x.layer_name + \'_mul\'\n        node.fluid_code.add_layer(""elementwise_mul"",\n                                  inputs={\n                                      \'x\': val_x,\n                                      \'y\': cast_condition\n                                  },\n                                  output=mul_val_x,\n                                  param_attr=None)\n\n        mul_val_y = val_y.layer_name + \'_mul\'\n        node.fluid_code.add_layer(""elementwise_mul"",\n                                  inputs={\n                                      \'x\': val_y,\n                                      \'y\': cast_not_condition\n                                  },\n                                  output=mul_val_y,\n                                  param_attr=None)\n\n        node.fluid_code.add_layer(""elementwise_add"",\n                                  inputs={\n                                      \'x\': mul_val_x,\n                                      \'y\': mul_val_y\n                                  },\n                                  output=node,\n                                  param_attr=None)\n\n    def NonZero(self, node):\n        val_x = self.graph.get_input_node(node, idx=0, copy=True)\n        where_name = node.layer_name + \'_where\'\n        node.fluid_code.add_layer(""where"",\n                                  inputs=val_x.layer_name + \'!=0\',\n                                  output=where_name)\n        dims = len(val_x.out_shapes[0])\n        elements_count_val_x = reduce(lambda x, y: x * y, val_x.out_shapes[0])\n        flatten_names = []\n        for dim in range(dims):\n            slice_name = node.layer_name + \'_slice\' + str(dim)\n            flatten_name = node.layer_name + \'_flatten\' + str(dim)\n            flatten_names.append(flatten_name)\n            attr = {\n                \'axes\': list(range(dims)),\n                \'starts\': [0, dim],\n                \'ends\': [elements_count_val_x, dim + 1]\n            }\n            node.fluid_code.add_layer(""slice"",\n                                      inputs=where_name,\n                                      output=slice_name,\n                                      param_attr=attr)\n            node.fluid_code.add_layer(""flatten"",\n                                      inputs=slice_name,\n                                      output=flatten_name,\n                                      param_attr={\'axis\': 0})\n        node.fluid_code.add_layer(""concat"",\n                                  inputs=flatten_names,\n                                  output=node,\n                                  param_attr={\'axis\': 0})\n\n    def Identity(self, node):\n        val_x = self.graph.get_input_node(node, idx=0, copy=True)\n        node.fluid_code.add_layer(""assign"", inputs=val_x, output=node)\n\n    def Tile(self, node):\n        val_x = self.graph.get_input_node(node, idx=0, copy=True)\n        val_repeats = self.graph.get_input_node(node, idx=1, copy=True)\n        repeats = _const_weight_or_none(val_repeats)\n        assert repeats is not None, \'for OP:Tile, only const repeats supported\'\n\n        if isinstance(repeats, int):\n            repeats = [repeats]\n\n        attr = {\n            \'expand_times\': repeats,\n            ""name"": string(node.layer_name),\n        }\n        node.fluid_code.add_layer(""expand"",\n                                  inputs=val_x,\n                                  output=node,\n                                  param_attr=attr)\n\n    def MaxPool(self, node):\n        val_x = self.graph.get_input_node(node, idx=0, copy=True)\n\n        auto_pad = node.get_attr(\'auto_pad\', \'NOTSET\')\n        assert node.get_attr(\n            ""dilations"") is None, \'only dilations = 0 is supported\'  # optional\n\n        kernel_shape = node.get_attr(""kernel_shape"")\n        poolnd = len(kernel_shape)\n        strides = node.get_attr(""strides"")\n        pad_mode = node.get_attr(""pads"")\n        ceil_mode = bool(node.get_attr(\'ceil_mode\', 0))  # optional\n        pads = node.get_attr(\'pads\', [0] * (poolnd * 2))  # optional\n        fluid_op = \'pool{}d\'.format(poolnd)\n        assert 2 <= poolnd <= 3, \'only pool2d and pool3d is supported\'\n\n        paddings, val_x = self._pad_if_asymmetric(node, pads, val_x)\n\n        if auto_pad == ""SAME_UPPER"" or auto_pad == ""SAME_LOWER"":\n            input_shape = val_x.out_shapes[0]\n            pad_h = get_same_padding(input_shape[2], kernel_shape[0],\n                                     strides[0])\n            pad_w = get_same_padding(input_shape[3], kernel_shape[1],\n                                     strides[1])\n            attr = {""paddings"": pad_h + pad_w, ""pad_value"": 0.0}\n\n        attr = {\n            ""pool_size"": kernel_shape,\n            ""pool_type"": string(""max""),\n            ""pool_stride"": strides,\n            ""pool_padding"": paddings,\n            ""ceil_mode"": ceil_mode,\n            ""name"": string(node.layer_name),\n            ""exclusive"": False\n        }\n        node.fluid_code.add_layer(fluid_op,\n                                  inputs=val_x,\n                                  output=node,\n                                  param_attr=attr)\n\n    def _global_pool(self, node):\n        val_x = self.graph.get_input_node(node, idx=0, copy=True)\n        val_y = self.graph.get_node(node.layer.output[0], copy=True)\n        input_shape = val_x.out_shapes[0]\n        output_shape = val_y.out_shapes[0]\n        assert input_shape is not None or output_shape is not None, \'poolnd not inferred\'  # N\n        if input_shape:\n            poolnd = len(input_shape) - 2  # NC...\n        elif output_shape:\n            poolnd = len(output_shape) - 2  # NC...\n        assert 2 <= poolnd <= 3, \'only pool2d and pool3d is supported\'\n        fluid_op = \'pool{}d\'.format(poolnd)\n\n        pool_type = None\n        if node.layer.op_type == \'GlobalMaxPool\':\n            pool_type = \'max\'\n        elif node.layer.op_type == \'GlobalAveragePool\':\n            pool_type = \'avg\'\n\n        attr = {\n            ""pool_type"": string(pool_type),\n            ""global_pooling"": True,\n            ""name"": string(node.layer_name)\n        }\n        node.fluid_code.add_layer(fluid_op,\n                                  inputs=val_x,\n                                  output=node,\n                                  param_attr=attr)\n\n    def GlobalMaxPool(self, node):\n        self._global_pool(node)\n\n    def GlobalAveragePool(self, node):\n        self._global_pool(node)\n\n    def Conv(self, node):\n        val_x = self.graph.get_input_node(node, idx=0, copy=True)\n        val_w = self.graph.get_input_node(node, idx=1, copy=True)\n        val_y = self.graph.get_node(node.layer.output[0], copy=True)\n\n        self.omit_nodes.append(val_w.layer_name)\n\n        has_bias = len(node.layer.input) == 3\n        if has_bias:\n            val_b = self.graph.get_input_node(node, idx=2, copy=True)\n            self.omit_nodes.append(val_b.layer_name)\n        auto_pad = node.get_attr(\'auto_pad\', \'NOTSET\')\n\n        kernel_shape = node.get_attr(\'kernel_shape\')\n        convnd = len(kernel_shape)\n        assert 2 <= convnd <= 3, \'only conv2d and conv3d is supported\'\n        num_out_channels = val_w.out_shapes[0][0]  # OI...\n        fluid_op = \'conv{}d\'.format(convnd)\n\n        num_groups = node.get_attr(\'group\', 1)\n        strides = node.get_attr(\'strides\', [1] * convnd)  # optional\n        dilations = node.get_attr(\'dilations\', [1] * convnd)  # optional\n        pads = node.get_attr(\'pads\', [0] * (convnd * 2))  # optional\n\n        input_shape = val_x.out_shapes[0]\n        paddings, val_x = self._pad_if_asymmetric(node, pads, val_x)\n\n        if auto_pad == ""SAME_UPPER"" or auto_pad == ""SAME_LOWER"":\n            pad_h = get_same_padding(input_shape[2], kernel_shape[0],\n                                     strides[0])\n            pad_w = get_same_padding(input_shape[3], kernel_shape[1],\n                                     strides[1])\n            attr = {""paddings"": pad_h + pad_w, ""pad_value"": 0.0}\n\n        attr = {\n            ""num_filters"": num_out_channels,\n            ""filter_size"": kernel_shape,\n            ""stride"": strides,\n            ""padding"": paddings,\n            ""dilation"": dilations,\n            ""groups"": num_groups,\n            \'param_attr\': string(val_w.layer_name),\n            ""name"": string(node.layer_name)\n        }\n        if has_bias:\n            attr[""bias_attr""] = string(val_b.layer_name)\n        else:\n            attr[""bias_attr""] = False\n        node.fluid_code.add_layer(fluid_op,\n                                  inputs=val_x,\n                                  output=node,\n                                  param_attr=attr)\n\n    def ConvTranspose(self, node):\n        val_x = self.graph.get_input_node(node, idx=0, copy=True)\n        val_w = self.graph.get_input_node(node, idx=1, copy=True)\n        val_b = None\n        if len(node.layer.input) > 2:\n            val_b = self.graph.get_input_node(node, idx=2, copy=True)\n            self.omit_nodes.append(val_b.layer_name)\n        self.omit_nodes.append(val_w.layer_name)\n\n        val_y = self.graph.get_node(node.layer.output[0], copy=True)\n\n        auto_pad = node.get_attr(\'auto_pad\', \'NOTSET\')\n        out_padding = node.get_attr(\'output_padding\', [0, 0])\n        kernel_shape = node.get_attr(\'kernel_shape\')\n        assert kernel_shape, \'kernel_shape not inferred\'\n        convnd = len(kernel_shape)\n        assert 2 <= convnd <= 3, \'only conv2d_transpose and conv3d_transpose supported\'\n        num_out_channels = val_w.out_shapes[0][1]\n        fluid_op = \'conv{}d_transpose\'.format(convnd)\n\n        num_groups = node.get_attr(\'group\', 1)\n        strides = node.get_attr(\'strides\', [1] * convnd)\n        dilations = node.get_attr(\'dilations\', [1] * convnd)\n        output_size = node.get_attr(\'output_shape\', [])\n        pads = node.get_attr(\'pads\', [0] * (convnd * 2))\n\n        paddings, var_x = self._pad_if_asymmetric(node, pads, val_x)\n\n        output_size = [0, 0]\n\n        output_size[0] = (val_x.out_shapes[0][2] -\n                          1) * strides[0] - 2 * paddings[0] + dilations[0] * (\n                              kernel_shape[0] - 1) + 1 + out_padding[0]\n        output_size[1] = (val_x.out_shapes[0][3] -\n                          1) * strides[1] - 2 * paddings[1] + dilations[1] * (\n                              kernel_shape[1] - 1) + 1 + out_padding[1]\n        attr = {\n            \'num_filters\': num_out_channels,\n            \'output_size\': output_size or None,\n            \'filter_size\': kernel_shape,\n            \'padding\': paddings,\n            \'stride\': strides,\n            \'dilation\': dilations,\n            \'groups\': num_groups,\n            \'param_attr\': string(val_w.layer_name),\n            \'bias_attr\': None if val_b is None else string(val_b.layer_name),\n            \'name\': string(node.layer_name),\n        }\n        node.fluid_code.add_layer(fluid_op,\n                                  inputs=val_x,\n                                  output=node,\n                                  param_attr=attr)\n\n    def GRU(self, node):\n        val_x = self.graph.get_input_node(node, idx=0, copy=True)\n        val_w = self.graph.get_input_node(node, idx=1, copy=True)\n        val_r = self.graph.get_input_node(node, idx=2, copy=True)\n\n        val_b = None\n        val_len = None\n        val_xh = None\n        miss_arg_num = 0\n        num_ipt = len(node.layer.input)\n        if num_ipt > 3 and node.layer.input[3] != \'\':\n            val_b = self.graph.get_input_node(node, idx=3, copy=True)\n        else:\n            miss_arg_num += 1\n        if num_ipt > 4 and node.layer.input[4] != \'\':\n            val_len = self.graph.get_input_node(node,\n                                                idx=4 - miss_arg_num,\n                                                copy=True)\n        else:\n            miss_arg_num += 1\n        if num_ipt > 5 and node.layer.input[5] != \'\':\n            val_xh = self.graph.get_input_node(node,\n                                               idx=5 - miss_arg_num,\n                                               copy=True)\n\n        data, dtype, shape = self.get_dynamic_shape(val_x.layer_name)\n\n        x_shape = val_x.out_shapes[0]\n\n        assert x_shape[1] == 1, \'only X with batch_size = 1 supported\'\n        assert node.get_attr(\'clip\', None) is None, \'clipping not supported\'\n\n        hidden_size = node.get_attr(\'hidden_size\', None)\n        if hidden_size is None:\n            r_shape = val_r.out_shapes[0]\n            if r_shape:\n                hidden_size = r_shape[-1]\n        if hidden_size is None:\n            w_shape = var_w.out_shapes[0]\n            if w_shape:\n                hidden_size = w_shape[-2] // 3\n        if hidden_size is None and val_b:\n            b_shape = val_b.out_shapes[0]\n            if b_shape:\n                hidden_size = b_shape[-1] // 6\n        if hidden_size is None and val_xh:\n            xh_shape = val_xh.out_shapes[0]\n            if xh_shape:\n                hidden_size = xh_shape[-1]\n\n        direction = node.get_attr(\'direction\', \'forward\')\n        assert direction != \'bidirectional\', \'direction = bidirectional not supported\'\n\n        activations = node.get_attr(\'activations\', [\'Sigmoid\', \'Tanh\'])\n        assert len(activations) == 2, \'bidirectional operation not supported\'\n\n        assert node.get_attr(\'linear_before_reset\',\n                             0) == 0, \'only linear_before_reset = 0 supported\'\n\n        activations = [s.lower() for s in activations]\n        gate_activation, candidate_activation = activations\n        is_reverse = direction == \'reverse\'\n\n        var_x0 = node.layer_name + \'_x0\'\n        node.fluid_code.add_layer(\'squeeze\',\n                                  inputs=val_x,\n                                  output=var_x0,\n                                  param_attr={\n                                      \'axes\': [1],\n                                      \'name\': string(var_x0)\n                                  })\n\n        var_w0 = node.layer_name + \'_w0\'\n        node.fluid_code.add_layer(\'squeeze\',\n                                  inputs=val_w,\n                                  output=var_w0,\n                                  param_attr={\n                                      \'axes\': [0],\n                                      \'name\': string(var_w0)\n                                  })\n\n        var_fc = node.layer_name + \'_fc\'\n        var_mm = (node.layer_name + \'_mm\') if val_b else var_fc\n        node.fluid_code.add_layer(\'matmul\',\n                                  inputs={\n                                      \'x\': var_x0,\n                                      \'y\': var_w0\n                                  },\n                                  output=var_mm,\n                                  param_attr={\n                                      \'transpose_x\': 0,\n                                      \'transpose_y\': 1,\n                                      \'name\': string(var_mm)\n                                  })\n\n        var_r0 = node.layer_name + \'_r0\'\n        node.fluid_code.add_layer(\'squeeze\',\n                                  inputs=val_r,\n                                  output=var_r0,\n                                  param_attr={\n                                      \'axes\': [0],\n                                      \'name\': string(var_r0)\n                                  })\n\n        var_r0t = node.layer_name + \'_r0t\'\n\n        node.fluid_code.add_layer(\'transpose\',\n                                  inputs=var_r0,\n                                  output=var_r0t,\n                                  param_attr={\n                                      \'perm\': [1, 0],\n                                      \'name\': string(var_r0t)\n                                  })\n        if val_b:\n            var_bi = node.layer_name + \'_bi\'\n            var_bh = node.layer_name + \'_bh\'\n            node.fluid_code.add_layer(\'split\',\n                                      inputs=val_b,\n                                      output=var_bi + \',\' + var_bh,\n                                      param_attr={\n                                          \'axis\':\n                                          1,\n                                          \'split\':\n                                          [hidden_size * 3, hidden_size * 3],\n                                          \'name\':\n                                          string(node.layer_name + \'.b/split\')\n                                      })\n            var_bi0 = node.layer_name + \'_bi0\'\n            node.fluid_code.add_layer(\'squeeze\',\n                                      inputs=var_bi,\n                                      output=var_bi0,\n                                      param_attr={\n                                          \'axes\': [0],\n                                          \'name\': string(var_bi0)\n                                      })\n\n            node.fluid_code.add_layer(\'elmentwise_add\',\n                                      inputs=[var_mm, var_bi0],\n                                      output=var_fc,\n                                      param_attr={\n                                          \'axes\':\n                                          1,\n                                          \'name\':\n                                          string(node.layer_name + \'.i/bias\')\n                                      })\n\n        if val_xh:\n            var_xh0 = node.layer_name + \'_xh0\'\n            node.fluid_code.add_layer(\'squeeze\',\n                                      inputs=val_xh,\n                                      output=var_xh0,\n                                      param_attr={\n                                          \'axes\': [1],\n                                          \'name\': string(var_xh0)\n                                      })\n        var_y00 = node.layer_name + \'_y00\'\n\n        attr = {\n            \'origin_mode\': True,\n            \'h_0\': var_xh0 if val_xh else None,\n            \'is_reverse\': is_reverse,\n            \'gate_activation\': string(gate_activation),\n            \'candidate_activation\': string(candidate_activation),\n            \'param_attr\': string(var_r0t),\n            \'bias_attr\': string(var_bh) if val_b else False,\n        }\n        node.fluid_code.add_layer(\'dynamic_gru\',\n                                  inputs=var_fc + \',\' + str(hidden_size),\n                                  output=var_y00,\n                                  param_attr=attr)\n\n        num_opt = len(node.layer.output)\n\n        if num_opt > 0 and node.layer.output[0] != \'\':\n            node.fluid_code.add_layer(\'unsqueeze\',\n                                      inputs=var_y00,\n                                      output=node.layer.output[0],\n                                      param_attr={\n                                          \'axes\': [1, 1],\n                                          \'name\': string(node.layer.output[0])\n                                      })\n        if num_opt > 1 and node.layer.output[1] != \'\':\n            node.fluid_code.add_layer(\'unsqueeze\',\n                                      inputs=var_y00,\n                                      output=node.layer.output[1],\n                                      param_attr={\n                                          \'axes\': [1, 1],\n                                          \'name\': string(node.layer.output[1])\n                                      })\n'"
x2paddle/op_mapper/paddle_op_mapper.py,0,"b'#   Copyright (c) 2019  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License""\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport math\nimport x2paddle\nimport os\nimport numpy as np\nimport paddle.fluid.core as core\nimport paddle.fluid as fluid\nimport onnx\nfrom onnx import helper, onnx_pb\n\n\nclass PaddleOpMapper(object):\n    def __init__(self):\n        self.paddle_onnx_dtype_map = {\n            core.VarDesc.VarType.FP32: onnx_pb.TensorProto.FLOAT,\n            core.VarDesc.VarType.FP64: onnx_pb.TensorProto.DOUBLE,\n            core.VarDesc.VarType.INT32: onnx_pb.TensorProto.INT32,\n            core.VarDesc.VarType.INT16: onnx_pb.TensorProto.INT16,\n            core.VarDesc.VarType.INT16: onnx_pb.TensorProto.UINT16,\n            core.VarDesc.VarType.INT64: onnx_pb.TensorProto.INT64,\n            core.VarDesc.VarType.BOOL: onnx_pb.TensorProto.BOOL\n        }\n\n        self.name_counter = dict()\n\n    def get_name(self, op_name, var_name):\n        name = \'p2o.{}.{}\'.format(op_name, var_name)\n        if name not in self.name_counter:\n            self.name_counter[name] = 0\n        else:\n            self.name_counter[name] += 1\n        return name + \'.{}\'.format(self.name_counter[name])\n\n    def make_constant_node(self, name, dtype, value=None):\n        if isinstance(value, list):\n            dims = (len(value), )\n        elif value is None:\n            dims = ()\n            value = []\n        else:\n            dims = ()\n            value = [value]\n        tensor = helper.make_tensor(\n            name=name, data_type=dtype, dims=dims, vals=value)\n        node = helper.make_node(\n            \'Constant\', inputs=[], outputs=[name], value=tensor)\n        return node\n\n    def conv2d(self, op, block):\n        kernel_shape = block.var(op.input(\'Filter\')[0]).shape\n        node = helper.make_node(\n            \'Conv\',\n            inputs=op.input(\'Input\') + op.input(\'Filter\'),\n            outputs=op.output(\'Output\'),\n            dilations=op.attr(\'dilations\'),\n            kernel_shape=kernel_shape[-2:],\n            strides=op.attr(\'strides\'),\n            group=op.attr(\'groups\'),\n            pads=op.attr(\'paddings\') + op.attr(\'paddings\'))\n        return node\n\n    def relu(self, op, block):\n        node = helper.make_node(\n            \'Relu\', inputs=op.input(\'X\'), outputs=op.output(\'Out\'))\n        return node\n\n    def elementwise_add(self, op, block):\n        axis = op.attr(\'axis\')\n        x_shape = block.var(op.input(\'X\')[0]).shape\n        y_shape = block.var(op.input(\'Y\')[0]).shape\n        if len(y_shape) == 1 and axis == 1:\n            shape_name = self.get_name(op.type, \'shape\')\n            shape_value = [1] * len(x_shape)\n            shape_value[axis] = y_shape[0]\n            shape_node = self.make_constant_node(\n                shape_name, onnx_pb.TensorProto.INT64, shape_value)\n            temp_value = self.get_name(op.type, \'temp\')\n            y_node = helper.make_node(\n                \'Reshape\',\n                inputs=[op.input(\'Y\')[0], shape_name],\n                outputs=[temp_value])\n            node = helper.make_node(\n                \'Add\',\n                inputs=[op.input(\'X\')[0], temp_value],\n                outputs=op.output(\'Out\'))\n            return [shape_node, y_node, node]\n        elif len(x_shape) == len(y_shape):\n            node = helper.make_node(\n                \'Add\',\n                inputs=[op.input(\'X\')[0], op.input(\'Y\')[0]],\n                outputs=op.output(\'Out\'))\n            return node\n        else:\n            raise Excpetion(""Unexpected situation happend in elementwise_add"")\n\n    def pool2d(self, op, block):\n        pool_type = {\n            \'max\': (\'MaxPool\', \'GlobalMaxPool\'),\n            \'avg\': (\'AveragePool\', \'GlobalAveragePool\')\n        }\n        if op.attr(\'global_pooling\'):\n            node = helper.make_node(\n                pool_type[op.attr(\'pooling_type\')][1],\n                inputs=op.input(\'X\'),\n                outputs=op.output(\'Out\'),\n            )\n        else:\n            node = helper.make_node(\n                pool_type[op.attr(\'pooling_type\')][0],\n                inputs=op.input(\'X\'),\n                outputs=op.output(\'Out\'),\n                kernel_shape=op.attr(\'ksize\'),\n                strides=op.attr(\'strides\'),\n                pads=op.attr(\'paddings\') + op.attr(\'paddings\'))\n        return node\n\n    def softmax(self, op, block):\n        node = helper.make_node(\n            \'Softmax\',\n            inputs=op.input(\'X\'),\n            outputs=op.output(\'Out\'),\n            axis=op.attr(\'axis\'))\n        return node\n\n    def scale(self, op, block):\n        scale = op.attr(\'scale\')\n        bias = op.attr(\'bias\')\n        if math.fabs(scale - 1.0) < 1e-06 and math.fabs(bias - 0.0) < 1e-06:\n            node = helper.make_node(\n                \'Identity\', inputs=op.input(\'X\'), outputs=op.output(\'Out\'))\n            return node\n        else:\n            scale_name = self.get_name(op.type, \'scale\')\n            bias_name = self.get_name(op.type, \'bias\')\n            scale_node = self.make_constant_node(\n                scale_name, onnx_pb.TensorProto.FLOAT, scale)\n            bias_node = self.make_constant_node(bias_name,\n                                                onnx_pb.TensorProto.FLOAT, bias)\n            temp_tensor_name = self.get_name(op.type, \'temporary\')\n            if op.attr(\'bias_after_scale\'):\n                node1 = helper.make_node(\n                    \'Mul\',\n                    inputs=[scale_name, op.input(\'X\')[0]],\n                    outputs=[temp_tensor_name])\n                node2 = helper.make_node(\n                    \'Add\',\n                    inputs=[bias_name, temp_tensor_name],\n                    outputs=op.output(\'Out\'))\n            else:\n                node1 = helper.make_node(\n                    \'Add\',\n                    inputs=[bias_name, op.input(\'X\')[0]],\n                    outputs=temp_tensor_name)\n                node2 = helper.make_node(\n                    \'Mul\',\n                    inputs=[scale_name, temp_tensor_name],\n                    outputs=[op.output(\'Out\')])\n            return [scale_node, bias_node, node1, node2]\n\n    def mul(self, op, block):\n        x_shape = block.var(op.input(\'X\')[0]).shape\n        y_shape = block.var(op.input(\'Y\')[0]).shape\n        out_shape = list(block.var(op.output(\'Out\')[0]).shape)\n        x_num_col_dims = op.attr(\'x_num_col_dims\')\n        y_num_col_dims = op.attr(\'y_num_col_dims\')\n        flatten_x_name = \'flatten_{}\'.format(op.input(\'X\')[0])\n        flatten_y_name = \'flatten_{}\'.format(op.input(\'Y\')[0])\n        shape_name = \'temp_shape_{}\'.format(op.output(\'Out\')[0])\n        temp_out_name = \'temp_{}\'.format(op.output(\'Out\')[0])\n        flatten_x = helper.make_node(\n            \'Flatten\',\n            inputs=op.input(\'X\'),\n            outputs=[flatten_x_name],\n            axis=x_num_col_dims)\n        flatten_y = helper.make_node(\n            \'Flatten\',\n            inputs=op.input(\'Y\'),\n            outputs=[flatten_y_name],\n            axis=y_num_col_dims)\n        shape_node = self.make_constant_node(\n            shape_name, onnx_pb.TensorProto.INT64, out_shape)\n        node = helper.make_node(\n            \'MatMul\',\n            inputs=[flatten_x_name, flatten_y_name],\n            outputs=[temp_out_name])\n        reshape_out = helper.make_node(\n            \'Reshape\',\n            inputs=[temp_out_name, shape_name],\n            outputs=op.output(\'Out\'))\n        return [flatten_x, flatten_y, shape_node, node, reshape_out]\n\n    def batch_norm(self, op, block):\n        kwargs = {\n            \'epsilon\': op.attr(\'epsilon\'),\n            \'momentum\': op.attr(\'momentum\')\n        }\n        inputs = op.input(\'X\') + op.input(\'Scale\') + op.input(\n            \'Bias\') + op.input(\'Mean\') + op.input(\'Variance\')\n        node = helper.make_node(\n            \'BatchNormalization\',\n            inputs=inputs,\n            outputs=op.output(\'Y\'),\n            **kwargs)\n        return node\n\n    def concat(self, op, block):\n        node = helper.make_node(\n            \'Concat\',\n            inputs=op.input(\'X\'),\n            outputs=op.output(\'Out\'),\n            axis=op.attr(\'axis\'))\n        return node\n\n    def depthwise_conv2d(self, op, block):\n        return self.conv2d(op, block)\n\n    def relu6(self, op, block):\n        min_name = self.get_name(op.type, \'min\')\n        max_name = self.get_name(op.type, \'max\')\n        min_node = self.make_constant_node(min_name, onnx_pb.TensorProto.FLOAT,\n                                           0)\n        max_node = self.make_constant_node(max_name, onnx_pb.TensorProto.FLOAT,\n                                           op.attr(\'threshold\'))\n        node = helper.make_node(\n            \'Clip\',\n            inputs=[op.input(\'X\')[0], min_name, max_name],\n            outputs=op.output(\'Out\'),\n        )\n        return [min_node, max_node, node]\n\n    def shape(self, op, block):\n        node = helper.make_node(\n            \'Shape\', inputs=op.input(\'Input\'), outputs=op.output(\'Out\'))\n        return node\n\n    def split(self, op, block):\n        sections = op.attr(\'sections\')\n        if len(sections) > 0:\n            node = helper.make_node(\n                \'Split\',\n                inputs=op.input(\'X\'),\n                outputs=op.output(\'Out\'),\n                axis=op.attr(\'axis\'),\n                split=sections)\n        else:\n            node = helper.make_node(\n                \'Split\',\n                inputs=op.input(\'X\'),\n                outputs=op.output(\'Out\'),\n                axis=op.attr(\'axis\'))\n\n    def slice(self, op, block):\n        axes = op.attr(\'axes\')\n        starts = op.attr(\'starts\')\n        ends = op.attr(\'ends\')\n        axes_name = get_name(op.type, \'axes\')\n        starts_name = get_name(op.type, \'starts\')\n        ends_name = get_name(op.type, \'ends\')\n\n        axes_node = make_constant_node(axes_name, onnx_pb.TensorProto.INT64,\n                                       axes)\n        starts_node = make_constant_node(starts_name, onnx_pb.TensorProto.INT64,\n                                         starts)\n        ends_node = make_constant_node(ends_name, onnx_pb.TensorProto.INT64,\n                                       ends)\n        node = helper.make_node(\n            ""Slice"",\n            inputs=[op.input(\'Input\')[0], starts_name, ends_name, axes_name],\n            outputs=op.output(\'Out\'),\n        )\n        return [starts_node, ends_node, axes_node, node]\n\n    def fill_constant(self, op, block):\n        value = op.attr(\'value\')\n        dtype = op.attr(\'dtype\')\n        shape = op.attr(\'shape\')\n        value = np.ones(shape) * value\n        node = helper.make_node(\n            \'Constant\',\n            inputs=[],\n            outputs=op.attr(\'Out\'),\n            value=helper.make_tensor(\n                name=op.attr(\'Out\'),\n                data_type=self.paddle_onnx_dtype_map[dtype],\n                dims=shape,\n                vals=value.tolist()))\n        return node\n\n    def transpose2(self, op, block):\n        node = helper.make_node(\n            \'Transpose\',\n            inputs=op.input(\'X\'),\n            outputs=op.output(\'Out\'),\n            perm=op.attr(\'perm\'))\n        return node\n\n    def reshape2(self, op, block):\n        input_names = op.input_names\n        if \'Shape\' in input_names and len(op.input(\'Shape\')) > 0:\n            node = helper.make_node(\n                \'Reshape\',\n                inputs=[op.input(\'X\')[0],\n                        op.input(\'Shape\')[0]],\n                outputs=op.output(\'Out\'))\n        else:\n            shape = op.attr(\'shape\')\n            shape_name = get_name(op.type, \'shape\')\n            shape_node = make_constant_node(shape_name,\n                                            onnxpb.TensorProto.INT64, shape)\n            node = helper.make_node(\n                \'Reshape\',\n                inputs=[op.input(\'X\')[0], shape_name],\n                outputs=op.output(\'Out\'))\n            return [shape_node, node]\n        return node\n\n    def dropout(self, op, block):\n        dropout_mode = op.attr(\'dropout_implementation\')\n        dropout_prob = op.attr(\'dropout_prob\')\n        if dropout_mode == \'upscale_in_train\':\n            node = helper.make_node(\n                \'Identity\', inputs=op.input(\'X\'), outputs=op.output(\'Out\'))\n            return node\n        elif dropout_mode == \'downgrade_in_infer\':\n            scale_name = self.get_name(op.type, \'scale\')\n            scale_node = self.make_constant_node(\n                scale_name, onnx_pb.TensorProto.FLOAT, 1 - dropout_prob)\n            node = helper.make_node(\n                ""Mul"",\n                inputs=[op.input(\'X\')[0], scale_name],\n                outputs=op.output(\'Out\'))\n            return [scale_node, node]\n        else:\n            raise Exception(""Unexpected situation happend"")\n\n    def reduce_mean(self, op, block):\n        node = helper.make_node(\n            \'ReduceMean\',\n            inputs=op.input(\'X\'),\n            outputs=op.output(\'Out\'),\n            axes=op.attr(\'axes\'),\n            keepdims=op.attr(\'keep_dim\'))\n        return node\n\n    def nearest_interp(self, op, block):\n        input_names = op.input_names\n        if \'OutSize\' in input_names and len(op.input(\'OutSize\')) > 0:\n            node = helper.make_node(\n                \'Resize\',\n                inputs=[op.input(\'X\')[0], \'\',\n                        op.input(\'OutSize\')[0]],\n                outputs=op.output(\'Out\'))\n        elif \'Scale\' in input_names and len(op.input(\'Scale\')) > 0:\n            node = helper.make_node(\n                \'Resize\',\n                inputs=[op.input(\'X\')[0],\n                        op.input(\'Scale\')[0]],\n                outputs=op.output(\'Out\'))\n        else:\n            out_shape = [op.attr(\'out_h\'), op.attr(\'out_w\')]\n            scale = op.attr(\'scale\')\n            if out_shape.count(-1) > 0:\n                scale_name = self.get_name(op.type, \'scale\')\n                scale_node = self.make_constant_node(\n                    scale_name, onnx_pb.TensorProto.FLOAT, [1, 1, scale, scale])\n                roi_name = self.get_name(op.type, \'roi\')\n                roi_node = self.make_constant_node(roi_name,\n                                                   onnx_pb.TensorProto.FLOAT,\n                                                   [1, 1, 1, 1, 1, 1, 1, 1])\n                node = helper.make_node(\n                    \'Resize\',\n                    inputs=[op.input(\'X\')[0], roi_name, scale_name],\n                    outputs=op.output(\'Out\'),\n                    mode=\'nearest\')\n                return [scale_node, roi_node, node]\n            else:\n                raise Exception(""Unexpected situation happend"")\n        return node\n\n    def hard_sigmoid(self, op, block):\n        slope = op.attr(\'slope\')\n        offset = op.attr(\'offset\')\n        node = helper.make_node(\n            \'HardSigmoid\',\n            inputs=op.input(\'X\'),\n            outputs=op.output(\'Out\'),\n            alpha=slope,\n            beta=offset)\n        return node\n\n    def elementwise_mul(self, op, block):\n        axis = op.attr(\'axis\')\n        x_shape = block.var(op.input(\'X\')[0]).shape\n        y_shape = block.var(op.input(\'Y\')[0]).shape\n        if len(y_shape) == 1 and axis == 1:\n            shape_name = self.get_name(op.type, \'shape\')\n            shape_value = [1] * len(x_shape)\n            shape_value[axis] = y_shape[0]\n            shape_node = self.make_constant_node(\n                shape_name, onnx_pb.TensorProto.INT64, shape_value)\n            temp_value = self.get_name(op.type, \'temp\')\n            y_node = helper.make_node(\n                \'Reshape\',\n                inputs=[op.input(\'Y\')[0], shape_name],\n                outputs=[temp_value])\n            node = helper.make_node(\n                \'Mul\',\n                inputs=[op.input(\'X\')[0], temp_value],\n                outputs=op.output(\'Out\'))\n            return [shape_node, y_node, node]\n        elif len(x_shape) == len(y_shape):\n            node = helper.make_node(\n                \'Mul\',\n                inputs=[op.input(\'X\')[0], op.input(\'Y\')[0]],\n                outputs=op.output(\'Out\'))\n            return node\n        else:\n            raise Excpetion(""Unexpected situation happend in elementwise_add"")\n        return node\n\n    def feed(self, op, block):\n        name = op.output(\'Out\')[0]\n        var = block.var(name)\n        tensor_info = helper.make_tensor_value_info(\n            name=name,\n            shape=var.shape,\n            elem_type=self.paddle_onnx_dtype_map[var.dtype])\n        return tensor_info\n\n    def fetch(self, op, block):\n        name = op.input(\'X\')[0]\n        var = block.var(name)\n        tensor_info = helper.make_tensor_value_info(\n            name=name,\n            shape=var.shape,\n            elem_type=self.paddle_onnx_dtype_map[var.dtype])\n        return tensor_info\n\n    def convert_weights(self, program):\n        var_names = program.global_block().vars\n        nodes = list()\n        for name in var_names:\n            var = program.global_block().var(name)\n            if name.endswith(\'feed\') or name.endswith(\'fetch\'):\n                continue\n            if not var.persistable:\n                continue\n            weight = np.array(fluid.global_scope().find_var(name).get_tensor())\n            tensor = helper.make_tensor(\n                name=name,\n                dims=var.shape,\n                data_type=self.paddle_onnx_dtype_map[var.dtype],\n                vals=weight.flatten().tolist())\n            node = helper.make_node(\n                \'Constant\', inputs=[], outputs=[name], value=tensor)\n            nodes.append(node)\n        return nodes\n\n    def convert(self, program, save_dir):\n        weight_nodes = self.convert_weights(program)\n        op_nodes = list()\n        input_nodes = list()\n        output_nodes = list()\n\n        unsupported_ops = set()\n\n        for block in program.blocks:\n            for op in block.ops:\n                print(\'Translating op: {}\'.format(op.type))\n                if not hasattr(self, op.type):\n                    unsupported_ops.add(op.type)\n                    continue\n                if len(unsupported_ops) > 0:\n                    continue\n                node = getattr(self, op.type)(op, block)\n                if op.type == \'feed\':\n                    input_nodes.append(node)\n                elif op.type == \'fetch\':\n                    output_nodes.append(node)\n                else:\n                    if isinstance(node, list):\n                        op_nodes = op_nodes + node\n                    else:\n                        op_nodes.append(node)\n\n        if len(unsupported_ops) > 0:\n            print(""There\'s {} ops are not supported yet"".format(\n                len(unsupported_ops)))\n            for op in unsupported_ops:\n                print(""=========== {} ==========="".format(op))\n            return\n\n        graph = helper.make_graph(\n            nodes=weight_nodes + op_nodes,\n            name=\'onnx_model_from_paddle\',\n            initializer=[],\n            inputs=input_nodes,\n            outputs=output_nodes)\n        model = helper.make_model(graph, producer_name=\'X2Paddle\')\n        onnx.checker.check_model(model)\n\n        if not os.path.isdir(save_dir):\n            os.makedirs(save_dir)\n        with open(os.path.join(save_dir, \'x2paddle_model.onnx\'), \'wb\') as f:\n            f.write(model.SerializeToString())\n        print(""Translated model saved in {}"".format(\n            os.path.join(save_dir, \'x2paddle_model.onnx\')))\n'"
x2paddle/op_mapper/tf_op_mapper.py,0,"b'#   Copyright (c) 2019  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License""\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom x2paddle.decoder.tf_decoder import TFGraph\nfrom x2paddle.core.op_mapper import OpMapper\nfrom x2paddle.core.util import *\nimport inspect\nimport numpy\nimport sys\n\n\n# compute padding size for SAME mode\ndef get_same_padding(in_size, kernel_size, stride):\n    new_size = int(math.ceil(in_size * 1.0 / stride))\n    pad_size = (new_size - 1) * stride + kernel_size - in_size\n    if pad_size < 0:\n        pad_size = 0\n    pad0 = int(pad_size / 2)\n    pad1 = pad_size - pad0\n    return [pad0, pad1]\n\n\ndef nhwc_dim_to_nchw(node, dim):\n    tf_data_format = list(node.tf_data_format)\n    pd_data_format = list(node.pd_data_format)\n    if isinstance(dim, list):\n        for i in range(len(dim)):\n            char = tf_data_format[dim[i]]\n            dim[i] = pd_data_format.index(char)\n    else:\n        char = tf_data_format[dim]\n        dim = pd_data_format.index(char)\n    return dim\n\n    if dim < 0:\n        dim += 4\n    if dim > 0:\n        dim = (dim + 1) % 4 + int((dim + 1) / 4)\n    return dim\n\n\nclass TFOpMapper(OpMapper):\n    directly_map_ops = {\n        \'Relu\': [\'relu\'],\n        \'Relu6\': [\'relu6\'],\n        \'Shape\': [\'shape\'],\n        \'Abs\': [\'abs\'],\n        \'Sigmoid\': [\'sigmoid\'],\n        \'Exp\': [\'exp\'],\n        \'Rsqrt\': [\'rsqrt\'],\n        \'swish_f32\': [\'swish\'],\n        \'Tanh\': [\'tanh\'],\n        \'LeakyRelu\': [\'leaky_relu\', {\n            \'alpha\': \'alpha\'\n        }]\n    }\n    elementwise_ops = {\n        \'Add\': \'elementwise_add\',\n        \'RealDiv\': \'elementwise_div\',\n        \'Sub\': \'elementwise_sub\',\n        \'Maximum\': \'elementwise_max\',\n        \'Mul\': \'elementwise_mul\',\n        \'FloorDiv\': \'elementwise_floordiv\'\n    }\n\n    def __init__(self, decoder):\n        super(TFOpMapper, self).__init__()\n        self.decoder = decoder\n        self.graph = decoder.tf_graph\n        self.batch_node = None\n        self.weights = dict()\n        self.omit_nodes = list()\n        self.used_custom_layers = dict()\n\n        not_placeholder = list()\n        for name in self.graph.input_nodes:\n            if self.graph.get_node(name).layer_type != ""Placeholder"" \n               and self.graph.get_node(name).layer_type != ""OneShotIterator"":\n                not_placeholder.append(name)\n        for name in not_placeholder:\n            idx = self.graph.input_nodes.index(name)\n            del self.graph.input_nodes[idx]\n\n        sys.stderr.write(""Total nodes: {}\\n"".format(len(self.graph.topo_sort)))\n        unsupported_ops = set()\n        for i, node_name in enumerate(self.graph.topo_sort):\n            sys.stderr.write(""\\rConverting node {} ...    "".format(i + 1))\n            node = self.graph.get_node(node_name)\n            op = node.layer_type\n            if op in self.directly_map_ops:\n                if len(unsupported_ops) > 0:\n                    continue\n                self.directly_map(node)\n            elif op in self.elementwise_ops:\n                if len(unsupported_ops) > 0:\n                    continue\n                self.elementwise_map(node)\n            elif hasattr(self, op):\n                if len(unsupported_ops) > 0:\n                    continue\n                func = getattr(self, op)\n                func(node)\n            else:\n                unsupported_ops.add(op)\n        if len(unsupported_ops) > 0:\n            sys.stderr.write(\n                ""=========={} Ops are not supported yet======\\n"".format(\n                    len(unsupported_ops)))\n            for op in unsupported_ops:\n                sys.stderr.write(""========== {} ==========\\n"".format(op))\n            sys.exit(-1)\n        sys.stderr.write(\'\\nDone!\\n\')\n\n    def add_omit_nodes(self, in_node_name, out_node_name):\n        in_node = self.graph.get_node(in_node_name)\n        out_node = self.graph.get_node(out_node_name)\n        index = in_node.outputs.index(out_node_name)\n        #        del in_node.outputs[index]\n        index = out_node.inputs.index(in_node_name)\n        #        del out_node.inputs[index]\n        self.omit_nodes.append(in_node.layer_name)\n\n    def directly_map(self, node):\n        assert node.layer_type in self.directly_map_ops\n        op_info = self.directly_map_ops[node.layer_type]\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        attr = dict()\n        for param in op_info[1:]:\n            tf_param_name = list(param.keys())[0]\n            pd_param_name = list(param.values())[0]\n            tf_param = node.get_attr(tf_param_name)\n            attr[pd_param_name] = tf_param\n        node.fluid_code.add_layer(op_info[0],\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def elementwise_map(self, node):\n        assert node.layer_type in self.elementwise_ops\n        op_type = self.elementwise_ops[node.layer_type]\n        x = self.graph.get_node(node.layer.input[0], copy=True)\n        y = self.graph.get_node(node.layer.input[1], copy=True)\n        x_shape = x.out_shapes[0]\n        y_shape = y.out_shapes[0]\n        if len(x_shape) == 0:\n            x_shape = [1]\n        if len(y_shape) == 0:\n            y_shape = [1]\n        # incomplement broadcasting support for paddle\n        x_input = x\n        y_input = y\n        if len(x_shape) < len(y_shape):\n            unrevertable_ops = [\n                ""elementwise_sub"", ""elementwise_div"", ""elementwise_floordiv"",\n                ""elementwise_mod"", ""elementwise_pow""\n            ]\n            if op_type not in unrevertable_ops:\n                x_input = y\n                y_input = x\n                x_shape = y.out_shapes[0]\n                if len(x_shape) == 0:\n                    x_shape = [1]\n                y_shape = x.out_shapes[0]\n                if len(y_shape) == 0:\n                    y_shape = [1]\n            else:\n                if len(x_shape) == 1 and len(y_shape) == 4 and x_shape[\n                        0] == y_shape[-1] and y_shape.count(-1) < 1:\n                    shape = [1, x_shape[0], 1, 1]\n                    attr = {""shape"": shape}\n                    node.fluid_code.add_layer(""reshape"",\n                                              inputs=x_input,\n                                              output=""reshape_x"",\n                                              param_attr=attr)\n                    if y_shape[0] != 1:\n                        attr = {""expand_times"": [y_shape[0], 1, 1, 1]}\n                        node.fluid_code.add_layer(""expand"",\n                                                  inputs=""reshape_x"",\n                                                  output=""reshape_x"",\n                                                  param_attr=attr)\n                    inputs = {""x"": ""reshape_x"", ""y"": y_input}\n                    node.fluid_code.add_layer(op_type,\n                                              inputs=inputs,\n                                              output=node,\n                                              param_attr=None)\n                    return\n                else:\n                    raise Exception(""Unexpected situation happend"")\n\n        if len(x_shape) == 4 and len(y_shape) == 1:\n            if x_input.tf_data_format == ""NHWC"":\n                axis = 1\n            else:\n                axis = -1\n            attr = {""axis"": axis}\n            inputs = {""x"": x_input, ""y"": y_input}\n            node.fluid_code.add_layer(op_type,\n                                      inputs=inputs,\n                                      output=node,\n                                      param_attr=attr)\n            return\n\n        is_sub_seq = True\n        for i in range(len(y_shape)):\n            index = -1 * i - 1\n            if y_shape[index] != x_shape[index]:\n                is_sub_seq = False\n        if not is_sub_seq:\n            if x_shape.count(-1) > 2:\n                x_shape = self.decoder.infer_tensor_shape(x_input)\n            if y_shape.count(-1) > 2:\n                y_shape = self.decoder.infer_tensor_shape(y_input)\n            x_expand_times = [1] * len(x_shape)\n            y_expand_times = [1] * len(y_shape)\n            x_need_expand = False\n            y_need_expand = False\n            for i in range(len(y_shape)):\n                index = -1 * i - 1\n                if y_shape[index] != x_shape[index]:\n                    if y_shape[index] == 1:\n                        y_expand_times[index] = x_shape[index]\n                        y_need_expand = True\n                    elif x_shape[index] == 1:\n                        x_expand_times[index] = y_shape[index]\n                        x_need_expand = True\n                    else:\n                        raise Exception(""Unexpected situation happend"")\n            if x_need_expand:\n                if len(x_expand_times) == 3 and x.tf_data_format == ""NHWC"":\n                    x_expand_times = [x_expand_times[i] for i in [2, 0, 1]]\n                if len(x_expand_times) == 4 and x.tf_data_format == ""NHWC"":\n                    x_expand_times = [x_expand_times[i] for i in [0, 3, 1, 2]]\n                attr = {""expand_times"": x_expand_times}\n                node.fluid_code.add_layer(""expand"",\n                                          inputs=x_input,\n                                          output=""x_tmp"",\n                                          param_attr=attr)\n                x_input = ""x_tmp""\n            if y_need_expand:\n                if len(y_expand_times) == 3 and y.tf_data_format == ""NHWC"":\n                    y_expand_times = [y_expand_times[i] for i in [2, 0, 1]]\n                if len(y_expand_times) == 4 and y.tf_data_format == ""NHWC"":\n                    y_expand_times = [y_expand_times[i] for i in [0, 3, 1, 2]]\n                attr = {""expand_times"": y_expand_times}\n                node.fluid_code.add_layer(""expand"",\n                                          inputs=y_input,\n                                          output=""y_tmp"",\n                                          param_attr=attr)\n                y_input = ""y_tmp""\n        inputs = {""x"": x_input, ""y"": y_input}\n        node.fluid_code.add_layer(op_type,\n                                  inputs=inputs,\n                                  output=node,\n                                  param_attr=None)\n\n    def Placeholder(self, node):\n        shape = node.out_shapes[0]\n        assert len(shape) != 0, ""Unknown shape of input nodes[{}]."".format(\n            node.layer_name)\n        if node.tf_data_format == ""NHWC"" and len(shape) == 4:\n            shape = [shape[i] for i in [0, 3, 1, 2]]\n        elif node.tf_data_format == ""NCHW"" and len(shape) == 4:\n            self.graph.data_format_propagation(node)\n        dtype = node.dtype\n        attr = {\n            \'dtype\': string(dtype),\n            \'shape\': shape,\n            \'name\': string(node.layer_name),\n            \'append_batch_size\': False\n        }\n\n        if shape[0] < 0:\n            self.batch_node = node\n\n        node.fluid_code.add_layer(""data"",\n                                  inputs=None,\n                                  output=node,\n                                  param_attr=attr)\n\n    def OneShotIterator(self, node):\n        return self.Placeholder(node)\n\n    def Const(self, node):\n        shape = node.out_shapes[0]\n        dtype = node.dtype\n        value = node.value\n        initializer = ""Constant(0.0)""\n        if len(shape) == 0:\n            assert value.size == 1, ""Unexpected situation happend""\n            shape = [1]\n            initializer = ""Constant({})"".format(value)\n\n        self.weights[node.layer_name] = node.value\n\n        if node.tf_data_format == ""NHWC"":\n            if len(shape) == 4:\n                shape = [shape[i] for i in [0, 3, 1, 2]]\n            if len(shape) == 3:\n                shape = [shape[i] for i in [2, 0, 1]]\n                self.weights[node.layer_name] = numpy.transpose(\n                    node.value, (2, 0, 1))\n        elif node.tf_data_format == ""NCHW"":\n            if len(shape) == 4:\n                self.graph.data_format_propagation(node)\n\n        attr = {\n            \'dtype\': string(dtype),\n            \'shape\': shape,\n            \'name\': string(node.layer_name),\n            \'default_initializer\': initializer\n        }\n        node.fluid_code.add_layer(""create_parameter"",\n                                  inputs=None,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Transpose(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        perm = self.graph.get_node(node.layer.input[1], copy=True)\n        assert perm.layer_type == ""Const"", ""Perm of transpose OP should be Const""\n        del self.weights[perm.layer_name.replace(\'/\', \'_\')]\n        perm.fluid_code.clear()\n        perm = perm.value.tolist()\n\n        if perm == [0, 3, 1, 2] and input.data_format == ""NHWC"":\n            input_name = input.layer_name\n            if hasattr(input, ""index""):\n                input_name = input_name + ""[{}]"".format(input.index)\n            node.fluid_code.add_layer(""{} = {}"").format(node.layer_name,\n                                                        input_name)\n            node.tf_data_format = ""NCHW""\n            self.graph.data_format_propagation(node)\n        elif perm == [0, 2, 3, 1] and input.tf_data_format == ""NCHW"":\n            input_name = input.layer_name\n            if hasattr(input, ""index""):\n                input_name = input_name + ""[{}]"".format(input.index)\n            node.fluid_code.add_layer(""{} = {}"").format(node.layer_name,\n                                                        input_name)\n            node.tf_data_format = ""NHWC""\n            self.graph.data_format_propagation(node)\n        elif len(input.out_shapes[0]) > 4:\n            tf_data_format = list(input.tf_data_format)\n            pd_data_format = list(input.pd_data_format)\n            new_perm = [i for i in range(len(perm))]\n            for i in range(len(perm)):\n                char0 = tf_data_format[i]\n                char1 = tf_data_format[perm[i]]\n                index0 = pd_data_format.index(char0)\n                index1 = pd_data_format.index(char1)\n                new_perm[index0] = index1\n            node.tf_data_format = [tf_data_format[i] for i in perm]\n            node.pd_data_format = [pd_data_format[i] for i in perm]\n            attr = {\'perm\': new_perm}\n            node.fluid_code.add_layer(""transpose"",\n                                      inputs=input,\n                                      output=node,\n                                      param_attr=attr)\n        elif len(node.out_shapes[0]) != 4:\n            attr = {\'perm\': perm}\n            node.fluid_code.add_layer(""transpose"",\n                                      inputs=input,\n                                      output=node,\n                                      param_attr=attr)\n        else:\n            raise Exception(""Unexpected situation happend in Transpose OP"")\n\n    def MaxPool(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n\n        in_shape = input.out_shapes[0]\n        if in_shape.count(-1) > 2:\n            in_shape = self.decoder.infer_tensor(input).shape\n\n        k_size = node.get_attr(""ksize"")\n        strides = node.get_attr(""strides"")\n        data_format = node.get_attr(""data_format"").decode()\n        pad_mode = node.get_attr(""padding"").decode()\n        channel_first = data_format == ""NCHW""\n\n        if not channel_first:\n            in_shape = [in_shape[i] for i in [0, 3, 1, 2]]\n            strides = [strides[i] for i in [0, 3, 1, 2]]\n            k_size = [k_size[i] for i in [0, 3, 1, 2]]\n        else:\n            self.graph.data_format_propagation(node)\n\n        attr = {\n            ""pool_size"": k_size[2:4],\n            ""pool_type"": string(""max""),\n            ""pool_padding"": string(pad_mode),\n            ""pool_stride"": strides[2:4]\n        }\n        node.fluid_code.add_layer(""pool2d"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Conv2D(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        kernel = self.graph.get_node(node.layer.input[1], copy=True)\n        assert kernel.layer_type == ""Const"", ""Kernel of Conv2D should be Const""\n        self.add_omit_nodes(kernel.layer_name, node.layer_name)\n\n        in_shape = input.out_shapes[0]\n        if in_shape.count(-1) > 2:\n            in_shape = self.decoder.infer_tensor(input).shape\n        k_size = kernel.out_shapes[0]\n        if k_size.count(-1) > 2:\n            k_size = self.decoder.infer_tensor(kernel).shape\n\n        strides = node.get_attr(""strides"")\n        dilations = node.get_attr(""dilations"")\n        data_format = node.get_attr(""data_format"").decode()\n        pad_mode = node.get_attr(""padding"").decode()\n        channel_first = data_format == ""NCHW""\n\n        self.weights[kernel.layer_name.replace(\'/\', \'_\')] = numpy.transpose(\n            kernel.value, (3, 2, 0, 1))\n\n        if not channel_first:\n            in_shape = [in_shape[i] for i in [0, 3, 1, 2]]\n            strides = [strides[i] for i in [0, 3, 1, 2]]\n            dilations = [dilations[i] for i in [0, 3, 1, 2]]\n        else:\n            self.graph.data_format_propagation(node)\n\n        attr = {\n            ""bias_attr"": False,\n            ""param_attr"": string(kernel.layer_name),\n            ""num_filters"": k_size[3],\n            ""filter_size"": k_size[0:2],\n            ""stride"": strides[2:4],\n            ""dilation"": dilations[2:4],\n            ""padding"": string(pad_mode)\n        }\n        node.fluid_code.add_layer(""conv2d"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def BiasAdd(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        bias = self.graph.get_node(node.layer.input[1], copy=True)\n        axis = -1\n        if input.tf_data_format == ""NHWC"" and len(input.out_shapes[0]) == 4:\n            axis = 1\n        inputs = {""x"": input, ""y"": bias}\n        attr = {""axis"": axis}\n        node.fluid_code.add_layer(""elementwise_add"",\n                                  inputs=inputs,\n                                  output=node,\n                                  param_attr=attr)\n\n    def FusedBatchNorm(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        gamma = self.graph.get_node(node.layer.input[1], copy=True)\n        beta = self.graph.get_node(node.layer.input[2], copy=True)\n        moving_mean = self.graph.get_node(node.layer.input[3], copy=True)\n        moving_var = self.graph.get_node(node.layer.input[4], copy=True)\n        data_format = node.get_attr(""data_format"").decode()\n        channel_first = data_format == ""NCHW""\n\n        assert gamma.layer_type == ""Const""\n        assert beta.layer_type == ""Const""\n        assert moving_mean.layer_type == ""Const""\n        assert moving_var.layer_type == ""Const""\n        self.add_omit_nodes(gamma.layer_name, node.layer_name)\n        self.add_omit_nodes(beta.layer_name, node.layer_name)\n        self.add_omit_nodes(moving_mean.layer_name, node.layer_name)\n        self.add_omit_nodes(moving_var.layer_name, node.layer_name)\n        if channel_first:\n            self.data_format_propagation(node)\n\n        attr = {\n            ""epsilon"": node.get_attr(""epsilon""),\n            ""param_attr"": string(gamma.layer_name),\n            ""bias_attr"": string(beta.layer_name),\n            ""moving_mean_name"": string(moving_mean.layer_name),\n            ""moving_variance_name"": string(moving_var.layer_name),\n            ""is_test"": True\n        }\n\n        node.fluid_code.add_layer(""batch_norm"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def FusedBatchNormV3(self, node):\n        return self.FusedBatchNorm(node)\n\n    def DepthwiseConv2dNative(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        kernel = self.graph.get_node(node.layer.input[1], copy=True)\n        assert kernel.layer_type == ""Const"", ""Kernel of DepthwiseConv2DNative should be Const""\n        self.add_omit_nodes(kernel.layer_name, node.layer_name)\n\n        in_shape = input.out_shapes[0]\n        if in_shape.count(-1) > 2:\n            in_shape = self.decoder.infer_tensor(input).shape\n        k_size = kernel.out_shapes[0]\n        if k_size.count(-1) > 2:\n            k_size = self.decoder.infer_tensor(kernel).shape\n\n        strides = node.get_attr(""strides"")\n        dilations = node.get_attr(""dilations"")\n        data_format = node.get_attr(""data_format"").decode()\n        pad_mode = node.get_attr(""padding"").decode()\n        channel_first = data_format == ""NCHW""\n\n        self.weights[kernel.layer_name.replace(\'/\', \'_\')] = numpy.transpose(\n            kernel.value, (2, 3, 0, 1))\n\n        if not channel_first:\n            in_shape = [in_shape[i] for i in [0, 3, 1, 2]]\n            strides = [strides[i] for i in [0, 3, 1, 2]]\n            dilations = [dilations[i] for i in [0, 3, 1, 2]]\n        else:\n            self.data_format_propagation(node)\n\n        attr = {\n            ""bias_attr"": False,\n            ""param_attr"": string(kernel.layer_name),\n            ""num_filters"": in_shape[1],\n            ""filter_size"": k_size[0:2],\n            ""stride"": strides[2:4],\n            ""dilation"": dilations[2:4],\n            ""groups"": k_size[3] * in_shape[1],\n            ""use_cudnn"": False,\n            ""padding"": string(pad_mode)\n        }\n        node.fluid_code.add_layer(""conv2d"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Reshape(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        param = self.graph.get_node(node.layer.input[1], copy=True)\n        is_variable = False\n        if param.layer_type == ""Const"":\n            attr = {""shape"": param.value.tolist()}\n            self.add_omit_nodes(param.layer_name, node.layer_name)\n        else:\n            # Here is a trick method to solove tensor parameter in tensorflow\n            shape = self.decoder.infer_shape_tensor(param, node.out_shapes[0])\n            if shape.count(-1) <= 1:\n                attr = {""shape"": shape}\n                self.add_omit_nodes(param.layer_name, node.layer_name)\n            elif shape.count(-1) == 2 and shape[0] == -1:\n                shape[0] = 0\n                attr = {""shape"": shape}\n                self.add_omit_nodes(param.layer_name, node.layer_name)\n            else:\n                assert len(param.out_shapes[0]\n                           ) == 1, ""Unexpected situation of shape parameter""\n                attr = {""shape"": [-1]}\n                node.fluid_code.add_layer(""reshape"",\n                                          inputs=param,\n                                          output=""shape_param"",\n                                          param_attr=attr)\n                attr = {""num_or_sections"": param.out_shapes[0][0], ""dim"": 0}\n                node.fluid_code.add_layer(""split"",\n                                          inputs=""shape_param"",\n                                          output=node,\n                                          param_attr=attr)\n                new_param = ""[""\n                for i in range(param.out_shapes[0][0]):\n                    new_param += (node.layer_name + ""[{}]"".format(i) + "", "")\n                new_param = new_param.strip("", "") + ""]""\n                attr = {""shape"": new_param}\n                is_variable = True\n\n        # to change [192, -1]->[-1, 192], allways put -1 in the first dimension\n        # optimization for Paddle-Lite\n        in_shape = input.out_shapes[0]\n        if not is_variable and in_shape.count(-1) < 1:\n            total_size = 1\n            for i in range(len(in_shape)):\n                total_size *= in_shape[i]\n            for i in range(len(attr[""shape""])):\n                if attr[""shape""][i] == 0:\n                    attr[""shape""][i] = in_shape[i]\n                if attr[""shape""][i] != -1:\n                    total_size /= attr[""shape""][i]\n            if attr[""shape""].count(-1) > 0:\n                index = attr[""shape""].index(-1)\n                attr[""shape""][index] = int(total_size)\n                attr[""shape""][0] = -1\n\n        if len(input.out_shapes[0]) == 4 and node.tf_data_format == ""NHWC"":\n            if len(attr[""shape""]) < 3:\n                perm = {""perm"": [0, 2, 3, 1]}\n                node.fluid_code.add_layer(""transpose"",\n                                          inputs=input,\n                                          output=node,\n                                          param_attr=perm)\n                node.fluid_code.add_layer(""reshape"",\n                                          inputs=node,\n                                          output=node,\n                                          param_attr=attr)\n                return\n\n        if len(attr[""shape""]) == 4 and node.tf_data_format == ""NHWC"":\n            input_shape = self.decoder.infer_tensor(input).shape\n            if input_shape[1] == attr[""shape""][1]:\n                attr[""shape""] = [attr[""shape""][i] for i in [0, 3, 1, 2]]\n            else:\n                perm = {""perm"": [0, 2, 3, 1]}\n                node.fluid_code.add_layer(""transpose"",\n                                          inputs=input,\n                                          output=node,\n                                          param_attr=perm)\n                node.fluid_code.add_layer(""reshape"",\n                                          inputs=node,\n                                          output=node,\n                                          param_attr=attr)\n                perm = {""perm"": [0, 3, 1, 2]}\n                node.fluid_code.add_layer(""transpose"",\n                                          inputs=node,\n                                          output=node,\n                                          param_attr=perm)\n                return\n        if len(attr[""shape""]) == 5:\n            attr[""shape""] = [attr[""shape""][i] for i in [0, 1, 4, 2, 3]]\n\n        node.fluid_code.add_layer(""reshape"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def AvgPool(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n\n        in_shape = input.out_shapes[0]\n        if in_shape.count(-1) > 2:\n            in_shape = self.decoder.infer_tensor(input).shape\n\n        k_size = node.get_attr(""ksize"")\n        strides = node.get_attr(""strides"")\n        data_format = node.get_attr(""data_format"").decode()\n        pad_mode = node.get_attr(""padding"").decode()\n        channel_first = data_format == ""NCHW""\n\n        if not channel_first:\n            in_shape = [in_shape[i] for i in [0, 3, 1, 2]]\n            strides = [strides[i] for i in [0, 3, 1, 2]]\n            k_size = [k_size[i] for i in [0, 3, 1, 2]]\n        else:\n            self.graph.data_format_propagation(node)\n\n        attr = {\n            ""pool_size"": k_size[2:4],\n            ""pool_type"": string(""avg""),\n            ""pool_stride"": strides[2:4],\n            ""pool_padding"": string(pad_mode)\n        }\n        node.fluid_code.add_layer(""pool2d"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def SplitV(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        num_sections = self.graph.get_node(node.layer.input[1], copy=True)\n        dim = self.graph.get_node(node.layer.input[2], copy=True)\n        assert num_sections.layer_type == ""Const""\n        assert dim.layer_type == ""Const""\n        self.add_omit_nodes(num_sections.layer_name, node.layer_name)\n        self.add_omit_nodes(dim.layer_name, node.layer_name)\n        dim = dim.value\n        if input.tf_data_format == ""NHWC"" and len(input.out_shapes[0]) == 4:\n            dim = nhwc_dim_to_nchw(input, dim)\n        attr = {\n            ""num_or_sections"": num_sections.value.tolist(),\n            ""dim"": dim.value\n        }\n        node.fluid_code.add_layer(""split"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def ConcatV2(self, node):\n        inputs = [\n            self.graph.get_node(name, copy=True)\n            for name in node.layer.input[:-1]\n        ]\n        axis = self.graph.get_node(node.layer.input[-1], copy=True)\n        assert axis.layer_type == ""Const""\n        self.add_omit_nodes(axis.layer_name, node.layer_name)\n        axis = axis.value\n        if inputs[0].tf_data_format == ""NHWC"" and len(\n                inputs[0].out_shapes[0]) == 4:\n            axis = nhwc_dim_to_nchw(inputs[0], axis)\n        attr = {""axis"": axis}\n        node.fluid_code.add_layer(""concat"",\n                                  inputs=inputs,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Tile(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        expand_times = self.graph.get_node(node.layer.input[1], copy=True)\n        self.add_omit_nodes(expand_times.layer_name, node.layer_name)\n        if expand_times.layer_type == ""Const"":\n            expand_times = expand_times.value.tolist()\n        else:\n            expand_times = self.decoder.infer_shape_tensor(expand_times)\n        if input.tf_data_format == ""NHWC"":\n            if len(input.out_shapes[0]) == 4:\n                expand_times = [expand_times[i] for i in [0, 3, 1, 2]]\n            elif len(input.out_shapes[0]) == 3:\n                expand_times = [expand_times[i] for i in [2, 0, 1]]\n        for i in range(len(expand_times)):\n            if expand_times[i] < 0:\n                expand_times[i] = 1\n\n        attr = {""expand_times"": expand_times}\n        node.fluid_code.add_layer(""expand"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Pack(self, node):\n        inputs = [\n            self.graph.get_node(name, copy=True) for name in node.layer.input\n        ]\n        axis = node.get_attr(""axis"")\n        if inputs[0].tf_data_format == ""NHWC"" and len(\n                inputs[0].out_shapes[0]) == 4:\n            tf_data_format = list(inputs[0].tf_data_format)\n            tf_data_format.insert(axis, str(len(tf_data_format)))\n            axis = nhwc_dim_to_nchw(inputs[0], axis)\n            pd_data_format = list(inputs[0].pd_data_format)\n            pd_data_format.insert(axis, str(len(pd_data_format)))\n            node.tf_data_format = """".join(tf_data_format)\n            node.pd_data_format = """".join(pd_data_format)\n\n        attr = {""axis"": axis}\n        node.fluid_code.add_layer(""stack"",\n                                  inputs=inputs,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Pad(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        paddings = self.graph.get_node(node.layer.input[1], copy=True)\n        assert paddings.layer_type == ""Const"", ""Padding should be Const""\n        self.add_omit_nodes(paddings.layer_name, node.layer_name)\n        paddings = paddings.value.flatten().tolist()\n        if input.tf_data_format == ""NHWC"" and len(input.out_shapes[0]) == 4:\n            paddings = [paddings[i] for i in [0, 1, 6, 7, 2, 3, 4, 5]]\n\n        pad_op = ""pad""\n        if len(input.out_shapes[0]) == 4:\n            if paddings[0] + paddings[1] + paddings[2] + paddings[3] == 0:\n                paddings = paddings[4:]\n                pad_op = ""pad2d""\n        attr = {""paddings"": paddings}\n        node.fluid_code.add_layer(pad_op,\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def MirrorPad(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        paddings = self.graph.get_node(node.layer.input[1], copy=True)\n        assert paddings.layer_type == ""Const"", ""Padding should be Const""\n        self.add_omit_nodes(paddings.layer_name, node.layer_name)\n        paddings = paddings.value.flatten().tolist()\n        mode = node.get_attr(""mode"").decode()\n        assert mode == ""REFLECT"", ""Only support \'REFLECT` mode in MirrorPad""\n        if input.tf_data_format == ""NHWC"" and len(input.out_shapes[0]) == 4:\n            paddings = [paddings[i] for i in [0, 1, 6, 7, 2, 3, 4, 5]]\n\n        pad_op = ""pad""\n        if len(input.out_shapes[0]) == 4:\n            if paddings[0] + paddings[1] + paddings[2] + paddings[3] == 0:\n                paddings = paddings[4:]\n                pad_op = ""pad2d""\n        attr = {""paddings"": paddings, ""mode"": string(""reflect"")}\n        node.fluid_code.add_layer(pad_op,\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Range(self, node):\n        start = self.graph.get_node(node.layer.input[0], copy=True)\n        limit = self.graph.get_node(node.layer.input[1], copy=True)\n        delta = self.graph.get_node(node.layer.input[2], copy=True)\n        self.add_omit_nodes(start.layer_name, node.layer_name)\n        self.add_omit_nodes(limit.layer_name, node.layer_name)\n        self.add_omit_nodes(delta.layer_name, node.layer_name)\n        if start.layer_type == ""Const"":\n            start = start.value\n        else:\n            start = self.decoder.infer_tensor(start)\n        if limit.layer_type == ""Const"":\n            limit = limit.value\n        else:\n            limit = self.decoder.infer_tensor(limit)\n        if delta.layer_type == ""Const"":\n            delta = delta.value\n        else:\n            delta = self.decoder.infer_tensor(delta)\n\n        inputs = {""start"": start, ""end"": limit, ""step"": delta}\n        attr = {""dtype"": string(node.dtype)}\n        node.fluid_code.add_layer(""range"",\n                                  inputs=inputs,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Mean(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        reduce_idx = self.graph.get_node(node.layer.input[1], copy=True)\n        assert reduce_idx.layer_type == ""Const"", ""Only support Const parameter[reduce_idx]""\n        dims = reduce_idx.value.tolist()\n        keep_dims = node.get_attr(""keep_dims"")\n\n        if input.tf_data_format == ""NHWC"" and len(input.out_shapes[0]) == 4:\n            for i in range(len(dims)):\n                dims[i] = nhwc_dim_to_nchw(input, dims[i])\n\n        attr = {""dim"": dims, ""keep_dim"": keep_dims}\n        node.fluid_code.add_layer(""reduce_mean"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def MatMul(self, node):\n        x = self.graph.get_node(node.layer.input[0], copy=True)\n        y = self.graph.get_node(node.layer.input[1], copy=True)\n        transpose_a = node.get_attr(\'transpose_a\')\n        transpose_b = node.get_attr(\'transpose_b\')\n        inputs = {""x"": x, ""y"": y}\n        # fix paddle shape infer problem\n        # should be removed after paddle 1.6\n        if x.out_shapes[0][-1] < 0 and y.out_shapes[0][0] > 0:\n            shape = x.out_shapes[0]\n            shape[-1] = y.out_shapes[0][0]\n            attr = {""shape"": shape}\n            node.fluid_code.add_layer(""reshape"",\n                                      inputs=x,\n                                      output=x,\n                                      param_attr=attr)\n        attr = {""transpose_x"": transpose_a, ""transpose_y"": transpose_b}\n        node.fluid_code.add_layer(""matmul"",\n                                  inputs=inputs,\n                                  output=node,\n                                  param_attr=attr)\n\n    def ArgMax(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        axis = self.graph.get_node(node.layer.input[1], copy=True)\n        assert axis.layer_type == ""Const"", ""ArgMax only support Const parameter""\n        self.add_omit_nodes(axis.layer_name, node.layer_name)\n        axis = axis.value\n        if input.tf_data_format == ""NHWC"" and len(input.out_shapes[0]) == 4:\n            axis = nhwc_dim_to_nchw(input, axis)\n        attr = {""axis"": axis}\n        node.fluid_code.add_layer(""argmax"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def StridedSlice(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        begin = self.graph.get_node(node.layer.input[1], copy=True)\n        end = self.graph.get_node(node.layer.input[2], copy=True)\n        strides = self.graph.get_node(node.layer.input[3], copy=True)\n        assert begin.layer_type == ""Const""\n        assert end.layer_type == ""Const""\n        assert strides.layer_type == ""Const""\n        self.add_omit_nodes(begin.layer_name, node.layer_name)\n        self.add_omit_nodes(end.layer_name, node.layer_name)\n        self.add_omit_nodes(strides.layer_name, node.layer_name)\n        strides = strides.value.tolist()\n        assert len(set(strides)) == 1 and strides[0] == 1\n\n        begin = begin.value.tolist()\n        end = end.value.tolist()\n        if input.tf_data_format == ""NHWC"" and len(input.out_shapes[0]) == 4:\n            begin = [begin[i] for i in [0, 3, 1, 2]]\n            end = [end[i] for i in [0, 3, 1, 2]]\n\n        for i in range(len(end)):\n            if end[i] == 0:\n                end[i] = 999999\n\n        attr = {\n            ""axes"": [i for i in range(len(strides))],\n            ""starts"": begin,\n            ""ends"": end\n        }\n\n        shrink_axis_mask = node.get_attr(\'shrink_axis_mask\')\n        squeeze_dims = list()\n        for i in range(len(begin)):\n            x = shrink_axis_mask >> i & 1\n            if x == 1:\n                squeeze_dims.append(i)\n        node.fluid_code.add_layer(""slice"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n        if shrink_axis_mask > 0 and len(input.out_shapes[0]) == 5:\n            attr = {""axes"": squeeze_dims}\n            node.fluid_code.add_layer(""squeeze"",\n                                      inputs=node,\n                                      output=node,\n                                      param_attr=attr)\n\n    def Slice(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        begin = self.graph.get_node(node.layer.input[1], copy=True)\n        size = self.graph.get_node(node.layer.input[2], copy=True)\n        self.add_omit_nodes(begin.layer_name, node.layer_name)\n        self.add_omit_nodes(size.layer_name, node.layer_name)\n        if begin.layer_type == ""Const"":\n            begin = begin.value.tolist()\n        else:\n            begin = self.decoder.infer_tensor(begin).tolist()\n        if size.layer_type == ""const"":\n            size = size.value.tolist()\n        else:\n            size = self.decoder.infer_tensor(size).tolist()\n\n        if input.tf_data_format == ""NHWC"" and len(input.out_shapes[0]) == 4:\n            size = [size[i] for i in [0, 3, 1, 2]]\n            begin = [begin[i] for i in [0, 3, 1, 2]]\n\n        for i in range(len(size)):\n            if size[i] < 0:\n                size[i] = 99999999\n            else:\n                size[i] = size[i] + begin[i]\n\n        attr = {\n            ""axes"": [i for i in range(len(size))],\n            ""starts"": begin,\n            ""ends"": size\n        }\n        node.fluid_code.add_layer(""slice"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Conv2DBackpropInput(self, node):\n        out_shape = self.graph.get_node(node.layer.input[0], copy=True)\n        kernel = self.graph.get_node(node.layer.input[1], copy=True)\n        input = self.graph.get_node(node.layer.input[2], copy=True)\n\n        assert kernel.layer_type == ""Const"", ""Kernel of Conv2DBackpropInput should be Const""\n\n        self.add_omit_nodes(kernel.layer_name, node.layer_name)\n        self.add_omit_nodes(out_shape.layer_name, node.layer_name)\n\n        if out_shape.layer_type == ""Const"":\n            out_shape = out_shape.value.tolist()\n        else:\n            out_shape = self.decoder.infer_shape_tensor(out_shape,\n                                                        node.out_shapes[0])\n\n        in_shape = input.out_shapes[0]\n        if in_shape.count(-1) > 2:\n            in_shape = self.decoder.infer_tensor(input).shape\n        k_size = kernel.out_shapes[0]\n        if k_size.count(-1) > 2:\n            k_size = self.decoder.infer_tensor(kernel).shape\n\n        pad_mode = node.get_attr(""padding"").decode()\n        strides = node.get_attr(""strides"")\n        dilations = node.get_attr(""dilations"")\n        data_format = node.get_attr(""data_format"").decode()\n        channel_first = data_format == ""NCHW""\n\n        self.weights[kernel.layer_name.replace(\'/\', \'_\')] = numpy.transpose(\n            kernel.value, (3, 2, 0, 1))\n        if not channel_first:\n            in_shape = [in_shape[i] for i in [0, 3, 1, 2]]\n            strides = [strides[i] for i in [0, 3, 1, 2]]\n            dilations = [dilations[i] for i in [0, 3, 1, 2]]\n        else:\n            self.data_format_propagation(node)\n\n        attr = {\n            ""bias_attr"": False,\n            ""param_attr"": string(kernel.layer_name),\n            ""num_filters"": k_size[2],\n            ""filter_size"": k_size[0:2],\n            ""stride"": strides[2:4],\n            ""dilation"": dilations[2:4],\n            ""padding"": string(pad_mode),\n            ""output_size"": out_shape[1:3]\n        }\n        node.fluid_code.add_layer(""conv2d_transpose"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Max(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        reduce_idx = self.graph.get_node(node.layer.input[1], copy=True)\n        assert reduce_idx.layer_type == ""Const"", ""Only support Const parameter[reduce_idx]""\n        keep_dims = node.get_attr(""keep_dims"")\n        dim = reduce_idx.value.tolist()\n        if input.tf_data_format == ""NHWC"" and len(input.out_shapes[0]) == 4:\n            dim = nhwc_dim_to_nchw(input, dim)\n\n        attr = {""dim"": dim, ""keep_dim"": keep_dims}\n        node.fluid_code.add_layer(""reduce_max"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Sum(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        reduce_idx = self.graph.get_node(node.layer.input[1], copy=True)\n        assert reduce_idx.layer_type == ""Const"", ""Only support Const parameter[reduce_idx]""\n        keep_dims = node.get_attr(""keep_dims"")\n        dim = reduce_idx.value.tolist()\n        if input.tf_data_format == ""NHWC"" and len(input.out_shapes[0]) == 4:\n            dim = nhwc_dim_to_nchw(input, dim)\n\n        attr = {""dim"": dim, ""keep_dim"": keep_dims}\n        node.fluid_code.add_layer(""reduce_sum"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Cast(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        dtype = node.dtype_map[node.get_attr(\'DstT\')]\n        attr = {""dtype"": string(dtype)}\n        node.fluid_code.add_layer(""cast"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Split(self, node):\n        dim = self.graph.get_node(node.layer.input[0], copy=True)\n        input = self.graph.get_node(node.layer.input[1], copy=True)\n        self.add_omit_nodes(dim.layer_name, node.layer_name)\n        num_split = node.get_attr(\'num_split\')\n        dim = dim.value\n        if input.tf_data_format == ""NHWC"" and len(input.out_shapes[0]) == 4:\n            dim = nhwc_dim_to_nchw(input, dim)\n\n        attr = {""num_or_sections"": num_split, ""dim"": dim}\n        node.fluid_code.add_layer(""split"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Squeeze(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        squeeze_dims = node.get_attr(\'squeeze_dims\')\n        if input.tf_data_format == ""NHWC"" and len(input.out_shapes[0]) == 4:\n            for i in range(len(squeeze_dims)):\n                squeeze_dims[i] = nhwc_dim_to_nchw(input, squeeze_dims[i])\n        attr = {""axes"": squeeze_dims}\n        node.fluid_code.add_layer(""squeeze"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def Softmax(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        axis = node.get_attr(""axis"")\n        if axis is None:\n            axis = -1 + len(input.out_shapes[0])\n        if input.tf_data_format == ""NHWC"" and len(input.out_shapes[0]) == 4:\n            axis = nhwc_dim_to_nchw(input, axis)\n        attr = {""axis"": axis}\n        node.fluid_code.add_layer(""softmax"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def ResizeNearestNeighbor(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        resize_shape = self.graph.get_node(node.layer.input[1], copy=True)\n        self.add_omit_nodes(resize_shape.layer_name, node.layer_name)\n        if resize_shape.layer_type == ""Const"":\n            resize_shape = resize_shape.value.tolist()\n        else:\n            resize_shape = self.decoder.infer_shape_tensor(\n                resize_shape, node.out_shapes[0])\n        align_corners = node.get_attr(""align_corners"")\n        attr = {""align_corners"": align_corners, ""out_shape"": resize_shape}\n        node.fluid_code.add_layer(""resize_nearest"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def ResizeBilinear(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        resize_shape = self.graph.get_node(node.layer.input[1], copy=True)\n        self.add_omit_nodes(resize_shape.layer_name, node.layer_name)\n        if resize_shape.layer_type == ""Const"":\n            resize_shape = resize_shape.value.tolist()\n        else:\n            resize_shape = self.decoder.infer_shape_tensor(\n                resize_shape, node.out_shapes[0])\n        align_corners = node.get_attr(""align_corners"")\n        attr = {\n            ""align_corners"": align_corners,\n            ""out_shape"": resize_shape,\n            ""align_mode"": 1\n        }\n        node.fluid_code.add_layer(""resize_bilinear"",\n                                  inputs=input,\n                                  output=node,\n                                  param_attr=attr)\n\n    def GreaterEqual(self, node):\n        x = self.graph.get_node(node.layer.input[0], copy=True)\n        y = self.graph.get_node(node.layer.input[1], copy=True)\n        inputs = {""x"": x, ""y"": y}\n        node.fluid_code.add_layer(""greater_equal"",\n                                  inputs=inputs,\n                                  output=node,\n                                  param_attr=None)\n\n    def RandomUniform(self, node):\n        shape = self.graph.get_node(node.layer.input[0], copy=True)\n        self.add_omit_nodes(shape.layer_name, node.layer_name)\n        if shape.layer_type == ""Const"":\n            shape = shape.value.tolist()\n        else:\n            shape = self.decoder.infer_shape_tensor(shape)\n        if len(shape) == 4 and node.tf_data_format == ""NHWC"":\n            shape = [shape[i] for i in [0, 3, 1, 2]]\n        attr = {""shape"": shape, ""min"": 0.0, ""max"": 0.9999}\n        if shape[0] < 0:\n            input = self.batch_node\n            node.fluid_code.add_layer(""uniform_random_batch_size_like"",\n                                      inputs=input,\n                                      output=node,\n                                      param_attr=attr)\n        else:\n            node.fluid_code.add_layer(""uniform_random"",\n                                      inputs=None,\n                                      output=node,\n                                      param_attr=attr)\n\n    def SquaredDifference(self, node):\n        x = self.graph.get_node(node.layer.input[0], copy=True)\n        y = self.graph.get_node(node.layer.input[1], copy=True)\n        inputs = {""x"": x, ""y"": y}\n        node.fluid_code.add_layer(""elementwise_sub"",\n                                  inputs=inputs,\n                                  output=node,\n                                  param_attr=None)\n        inputs = {""x"": node, ""y"": node}\n        node.fluid_code.add_layer(""elementwise_mul"",\n                                  inputs=inputs,\n                                  output=node,\n                                  param_attr=None)\n'"
x2paddle/op_mapper/tf_op_mapper_nhwc.py,0,"b'#   Copyright (c) 2019  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License""\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom x2paddle.decoder.tf_decoder import TFGraph\nfrom x2paddle.core.op_mapper import OpMapper\nfrom x2paddle.core.util import *\nimport inspect\nimport numpy\nimport sys\n\n\n# compute padding size for SAME mode\ndef get_same_padding(in_size, kernel_size, stride):\n    new_size = int(math.ceil(in_size * 1.0 / stride))\n    pad_size = (new_size - 1) * stride + kernel_size - in_size\n    if pad_size < 0:\n        pad_size = 0\n    pad0 = int(pad_size / 2)\n    pad1 = pad_size - pad0\n    return [pad0, pad1]\n\n\nclass TFOpMapperNHWC(OpMapper):\n    directly_map_ops = {\n        \'Relu\': [\'relu\'],\n        \'Relu6\': [\'relu6\'],\n        \'Shape\': [\'shape\'],\n        \'Abs\': [\'abs\'],\n        \'Sigmoid\': [\'sigmoid\'],\n        \'Exp\': [\'exp\'],\n        \'Rsqrt\': [\'rsqrt\'],\n        \'Sqrt\': [\'sqrt\'],\n        \'swish_f32\': [\'swish\'],\n        \'Tanh\': [\'tanh\'],\n        \'Softplus\': [\'softplus\'],\n        \'LeakyRelu\': [\'leaky_relu\', {\n            \'alpha\': \'alpha\'\n        }]\n    }\n    elementwise_ops = {\n        \'Add\': \'elementwise_add\',\n        \'AddV2\': \'elementwise_add\',\n        \'RealDiv\': \'elementwise_div\',\n        \'Sub\': \'elementwise_sub\',\n        \'Maximum\': \'elementwise_max\',\n        \'Mul\': \'elementwise_mul\',\n        \'FloorDiv\': \'elementwise_floordiv\'\n    }\n\n    def __init__(self, decoder):\n        super(TFOpMapperNHWC, self).__init__()\n        self.decoder = decoder\n        self.graph = decoder.tf_graph\n        self.weights = dict()\n        self.batch_node = None\n        self.omit_nodes = list()\n        self.used_custom_layers = dict()\n\n        not_placeholder = list()\n        for name in self.graph.input_nodes:\n            if self.graph.get_node(name).layer_type != ""Placeholder"":\n                not_placeholder.append(name)\n        for name in not_placeholder:\n            idx = self.graph.input_nodes.index(name)\n            del self.graph.input_nodes[idx]\n\n        unsupported_ops = set()\n        sys.stderr.write(""Total nodes: {}\\n"".format(len(self.graph.topo_sort)))\n        for i, node_name in enumerate(self.graph.topo_sort):\n            sys.stderr.write(""\\rConverting node {} ...     "".format(i + 1))\n            node = self.graph.get_node(node_name)\n            op = node.layer_type\n            if op in self.directly_map_ops:\n                if len(unsupported_ops) > 0:\n                    continue\n                self.directly_map(node)\n            elif op in self.elementwise_ops:\n                if len(unsupported_ops) > 0:\n                    continue\n                self.elementwise_map(node)\n            elif hasattr(self, op):\n                if len(unsupported_ops) > 0:\n                    continue\n                func = getattr(self, op)\n                try:\n                    func(node)\n                except:\n                    unsupported_ops.add(op)\n            else:\n                unsupported_ops.add(op)\n        if len(unsupported_ops) > 0:\n            print(""========= {} OPs are not supported yet ==========="".format(\n                len(unsupported_ops)))\n            for op in unsupported_ops:\n                print(""========== {} ============"".format(op))\n            sys.exit(-1)\n        sys.stderr.write(""\\nDone!\\n"")\n\n    def add_omit_nodes(self, in_node_name, out_node_name):\n        in_node = self.graph.get_node(in_node_name)\n        out_node = self.graph.get_node(out_node_name)\n        index = in_node.outputs.index(out_node_name)\n        del in_node.outputs[index]\n        index = out_node.inputs.index(in_node_name)\n        del out_node.inputs[index]\n        self.omit_nodes.append(in_node.layer_name)\n\n    def directly_map(self, node):\n        assert node.layer_type in self.directly_map_ops\n        op_info = self.directly_map_ops[node.layer_type]\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        attr = dict()\n        for param in op_info[1:]:\n            tf_param_name = list(param.keys())[0]\n            pd_param_name = list(param.values())[0]\n            tf_param = node.get_attr(tf_param_name)\n            attr[pd_param_name] = tf_param\n\n        if len(input.out_shapes[0]) == 4 and op_info[0] != \'shape\':\n            attr1 = {""perm"": [0, 3, 1, 2]}\n            node.fluid_code.add_layer(\n                \'transpose\', inputs=input, output=node, param_attr=attr1)\n            input = node\n            node.fluid_code.add_layer(\n                op_info[0], inputs=input, output=node, param_attr=attr)\n            input = node\n            attr2 = {""perm"": [0, 2, 3, 1]}\n            node.fluid_code.add_layer(\n                \'transpose\', inputs=input, output=node, param_attr=attr2)\n        else:\n            node.fluid_code.add_layer(\n                op_info[0], inputs=input, output=node, param_attr=attr)\n\n    def elementwise_map(self, node):\n        assert node.layer_type in self.elementwise_ops\n        op_type = self.elementwise_ops[node.layer_type]\n        x = self.graph.get_node(node.layer.input[0], copy=True)\n        y = self.graph.get_node(node.layer.input[1], copy=True)\n        x_shape = x.out_shapes[0]\n        y_shape = y.out_shapes[0]\n        if len(x_shape) == 0:\n            x_shape = [1]\n        if len(y_shape) == 0:\n            y_shape = [1]\n        # incomplement broadcasting support for paddle\n        x_input = x\n        y_input = y\n        if len(x_shape) < len(y_shape):\n            unrevertable_ops = [\n                ""elementwise_sub"", ""elementwise_div"", ""elementwise_floordiv"",\n                ""elementwise_mod"", ""elementwise_pow""\n            ]\n            if op_type not in unrevertable_ops:\n                x_input = y\n                y_input = x\n                x_shape = y.out_shapes[0]\n                if len(x_shape) == 0:\n                    x_shape = [1]\n                y_shape = x.out_shapes[0]\n                if len(y_shape) == 0:\n                    y_shape = [1]\n            else:\n                raise Exception(""Unexpected situation happend"")\n\n        if len(x_shape) == 4 and len(y_shape) == 1:\n            inputs = {""x"": x_input, ""y"": y_input}\n            node.fluid_code.add_layer(op_type, inputs=inputs, output=node)\n            return\n\n        is_sub_seq = True\n        for i in range(len(y_shape)):\n            index = -1 * i - 1\n            if y_shape[index] != x_shape[index]:\n                is_sub_seq = False\n        if not is_sub_seq:\n            x_expand_times = [1] * len(x_shape)\n            y_expand_times = [1] * len(y_shape)\n            x_need_expand = False\n            y_need_expand = False\n            for i in range(len(y_shape)):\n                index = -1 * i - 1\n                if y_shape[index] != x_shape[index]:\n                    if y_shape[index] == 1:\n                        y_expand_times[index] = x_shape[index]\n                        y_need_expand = True\n                    elif x_shape[index] == 1:\n                        x_expand_times[index] = y_shape[index]\n                        x_need_expand = True\n                    else:\n                        raise Exception(""Unexpected situation happend"")\n            if x_need_expand:\n                attr = {""expand_times"": x_expand_times}\n                node.fluid_code.add_layer(\n                    ""expand"", inputs=x_input, output=""x_tmp"", param_attr=attr)\n                x_input = ""x_tmp""\n            if y_need_expand:\n                attr = {""expand_times"": y_expand_times}\n                node.fluid_code.add_layer(\n                    ""expand"", inputs=y_input, output=""y_tmp"", param_attr=attr)\n                y_input = ""y_tmp""\n        if len(x_shape) == 4 and len(y_shape) == 4:\n            node.fluid_code.add_layer(\n                ""transpose"",\n                inputs=x_input,\n                output=x_input,\n                param_attr={\'perm\': [0, 3, 1, 2]})\n            node.fluid_code.add_layer(\n                ""transpose"",\n                inputs=y_input,\n                output=y_input,\n                param_attr={\'perm\': [0, 3, 1, 2]})\n            inputs = {""x"": x_input, ""y"": y_input}\n            node.fluid_code.add_layer(\n                op_type, inputs=inputs, output=node, param_attr=None)\n            node.fluid_code.add_layer(\n                ""transpose"",\n                inputs=node,\n                output=node,\n                param_attr={\'perm\': [0, 2, 3, 1]})\n        else:\n            inputs = {""x"": x_input, ""y"": y_input}\n            node.fluid_code.add_layer(\n                op_type, inputs=inputs, output=node, param_attr=None)\n\n    def Placeholder(self, node):\n        shape = node.out_shapes[0]\n        assert len(shape) != 0, ""Unknown shape of input nodes[{}]."".format(\n            node.layer_name)\n        dtype = node.dtype\n        if shape[0] < 0:\n            self.batch_node = node\n        attr = {\n            \'dtype\': string(dtype),\n            \'shape\': shape,\n            \'name\': string(node.layer_name),\n            \'append_batch_size\': False\n        }\n\n        node.fluid_code.add_layer(\n            ""data"", inputs=None, output=node, param_attr=attr)\n\n    def Const(self, node):\n        shape = node.out_shapes[0]\n        dtype = node.dtype\n        value = node.value\n        initializer = ""Constant(0.0)""\n        if len(shape) == 0:\n            assert value.size == 1, ""Unexpected situation happend""\n            shape = [1]\n            initializer = ""Constant({})"".format(value)\n\n        self.weights[node.layer_name] = node.value\n\n        attr = {\n            \'dtype\': string(dtype),\n            \'shape\': shape,\n            \'name\': string(node.layer_name),\n            \'default_initializer\': initializer\n        }\n        node.fluid_code.add_layer(\n            ""create_parameter"", inputs=None, output=node, param_attr=attr)\n\n    def Transpose(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        perm = self.graph.get_node(node.layer.input[1], copy=True)\n        assert perm.layer_type == ""Const"", ""Perm of transpose OP should be Const""\n        del self.weights[perm.layer_name.replace(\'/\', \'_\')]\n        perm.fluid_code.clear()\n        perm = perm.value.tolist()\n\n        attr = {\'perm\': perm}\n        node.fluid_code.add_layer(\n            ""transpose"", inputs=input, output=node, param_attr=attr)\n\n    def MaxPool(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n\n        in_shape = input.out_shapes[0]\n        if in_shape.count(-1) > 2:\n            in_shape = self.decoder.infer_tensor(input).shape\n\n        k_size = node.get_attr(""ksize"")\n        strides = node.get_attr(""strides"")\n        data_format = node.get_attr(""data_format"").decode()\n        pad_mode = node.get_attr(""padding"").decode()\n        channel_first = data_format == ""NCHW""\n\n        if not channel_first:\n            attr = {""perm"": [0, 3, 1, 2]}\n            node.fluid_code.add_layer(\n                ""transpose"", inputs=input, output=node, param_attr=attr)\n            in_shape = [in_shape[i] for i in [0, 3, 1, 2]]\n            strides = [strides[i] for i in [0, 3, 1, 2]]\n            k_size = [k_size[i] for i in [0, 3, 1, 2]]\n            input = node\n\n        attr = {\n            ""pool_size"": k_size[2:4],\n            ""pool_type"": string(""max""),\n            ""pool_stride"": strides[2:4],\n            ""pool_padding"": string(pad_mode)\n        }\n        node.fluid_code.add_layer(\n            ""pool2d"", inputs=input, output=node, param_attr=attr)\n\n        if not channel_first:\n            attr = {""perm"": [0, 2, 3, 1]}\n            node.fluid_code.add_layer(\n                ""transpose"", inputs=node, output=node, param_attr=attr)\n\n    def Conv2D(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        kernel = self.graph.get_node(node.layer.input[1], copy=True)\n        self.add_omit_nodes(kernel.layer_name, node.layer_name)\n\n        in_shape = input.out_shapes[0]\n        if in_shape.count(-1) > 2:\n            in_shape = self.decoder.infer_tensor(input).shape\n        k_size = kernel.out_shapes[0]\n        if k_size.count(-1) > 2:\n            k_size = self.decoder.infer_tensor(kernel).shape\n\n        strides = node.get_attr(""strides"")\n        dilations = node.get_attr(""dilations"")\n        data_format = node.get_attr(""data_format"").decode()\n        pad_mode = node.get_attr(""padding"").decode()\n        channel_first = data_format == ""NCHW""\n\n        if kernel.layer_type == \'Const\':\n            kernel_value = kernel.value\n        else:\n            kernel_value = self.decoder.infer_tensor(kernel)\n        self.weights[kernel.layer_name.replace(\'/\', \'_\')] = numpy.transpose(\n            kernel_value, (3, 2, 0, 1))\n\n        if not channel_first:\n            in_shape = [in_shape[i] for i in [0, 3, 1, 2]]\n            strides = [strides[i] for i in [0, 3, 1, 2]]\n            dilations = [dilations[i] for i in [0, 3, 1, 2]]\n            attr = {""perm"": [0, 3, 1, 2]}\n            node.fluid_code.add_layer(\n                ""transpose"", inputs=input, output=node, param_attr=attr)\n            input = node\n\n        attr = {\n            ""bias_attr"": False,\n            ""param_attr"": string(kernel.layer_name),\n            ""num_filters"": k_size[3],\n            ""filter_size"": k_size[0:2],\n            ""stride"": strides[2:4],\n            ""dilation"": dilations[2:4],\n            ""padding"": string(pad_mode)\n        }\n\n        if hasattr(node, \'dilation\') and attr[\'dilation\'] == [1, 1]:\n            if len(node.dilation) == 1:\n                attr[\'dilation\'] = [1, node.dilation[0]]\n\n        node.fluid_code.add_layer(\n            ""conv2d"", inputs=input, output=node, param_attr=attr)\n        if not channel_first:\n            attr = {""perm"": [0, 2, 3, 1]}\n            node.fluid_code.add_layer(\n                ""transpose"", inputs=node, output=node, param_attr=attr)\n\n    def BiasAdd(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        bias = self.graph.get_node(node.layer.input[1], copy=True)\n        inputs = {""x"": input, ""y"": bias}\n        node.fluid_code.add_layer(\n            ""elementwise_add"", inputs=inputs, output=node, param_attr=None)\n\n    def FusedBatchNorm(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        gamma = self.graph.get_node(node.layer.input[1], copy=True)\n        beta = self.graph.get_node(node.layer.input[2], copy=True)\n        moving_mean = self.graph.get_node(node.layer.input[3], copy=True)\n        moving_var = self.graph.get_node(node.layer.input[4], copy=True)\n        data_format = node.get_attr(""data_format"").decode()\n        channel_first = data_format == ""NCHW""\n\n        assert gamma.layer_type == ""Const""\n        assert beta.layer_type == ""Const""\n        assert moving_mean.layer_type == ""Const""\n        assert moving_var.layer_type == ""Const""\n        self.add_omit_nodes(gamma.layer_name, node.layer_name)\n        self.add_omit_nodes(beta.layer_name, node.layer_name)\n        self.add_omit_nodes(moving_mean.layer_name, node.layer_name)\n        self.add_omit_nodes(moving_var.layer_name, node.layer_name)\n\n        if not channel_first:\n            attr = {""perm"": [0, 3, 1, 2]}\n            node.fluid_code.add_layer(\n                ""transpose"", inputs=input, output=node, param_attr=attr)\n            input = node\n\n        attr = {\n            ""epsilon"": node.get_attr(""epsilon""),\n            ""param_attr"": string(gamma.layer_name),\n            ""bias_attr"": string(beta.layer_name),\n            ""moving_mean_name"": string(moving_mean.layer_name),\n            ""moving_variance_name"": string(moving_var.layer_name),\n            ""is_test"": True\n        }\n\n        node.fluid_code.add_layer(\n            ""batch_norm"", inputs=input, output=node, param_attr=attr)\n\n        if not channel_first:\n            attr = {""perm"": [0, 2, 3, 1]}\n            node.fluid_code.add_layer(\n                ""transpose"", inputs=node, output=node, param_attr=attr)\n\n    def DepthwiseConv2dNative(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        kernel = self.graph.get_node(node.layer.input[1], copy=True)\n        assert kernel.layer_type == ""Const"", ""Kernel of DepthwiseConv2DNative should be Const""\n        self.add_omit_nodes(kernel.layer_name, node.layer_name)\n\n        in_shape = input.out_shapes[0]\n        if in_shape.count(-1) > 2:\n            in_shape = self.decoder.infer_tensor(input).shape\n        k_size = kernel.out_shapes[0]\n        if k_size.count(-1) > 2:\n            k_size = self.decoder.infer_tensor(kernel).shape\n\n        strides = node.get_attr(""strides"")\n        dilations = node.get_attr(""dilations"")\n        data_format = node.get_attr(""data_format"").decode()\n        pad_mode = node.get_attr(""padding"").decode()\n        channel_first = data_format == ""NCHW""\n\n        self.weights[kernel.layer_name.replace(\'/\', \'_\')] = numpy.transpose(\n            kernel.value, (2, 3, 0, 1))\n\n        if not channel_first:\n            in_shape = [in_shape[i] for i in [0, 3, 1, 2]]\n            strides = [strides[i] for i in [0, 3, 1, 2]]\n            dilations = [dilations[i] for i in [0, 3, 1, 2]]\n            attr = {""perm"": [0, 3, 1, 2]}\n            node.fluid_code.add_layer(\n                ""transpose"", inputs=input, output=node, param_attr=attr)\n            input = node\n\n        attr = {\n            ""bias_attr"": False,\n            ""param_attr"": string(kernel.layer_name),\n            ""num_filters"": in_shape[1],\n            ""filter_size"": k_size[0:2],\n            ""stride"": strides[2:4],\n            ""dilation"": dilations[2:4],\n            ""groups"": k_size[3] * in_shape[1],\n            ""use_cudnn"": False,\n            ""padding"": string(pad_mode)\n        }\n        node.fluid_code.add_layer(\n            ""conv2d"", inputs=input, output=node, param_attr=attr)\n\n        if not channel_first:\n            attr = {""perm"": [0, 2, 3, 1]}\n            node.fluid_code.add_layer(\n                ""transpose"", inputs=node, output=node, param_attr=attr)\n\n    def Reshape(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        param = self.graph.get_node(node.layer.input[1], copy=True)\n        is_variable = False\n        if param.layer_type == ""Const"":\n            attr = {""shape"": param.value.tolist()}\n            self.add_omit_nodes(param.layer_name, node.layer_name)\n        else:\n            # Here is a trick method to solove tensor parameter in tensorflow\n            shape = self.decoder.infer_shape_tensor(param, node.out_shapes[0])\n            if shape.count(-1) <= 1:\n                attr = {""shape"": shape}\n                self.add_omit_nodes(param.layer_name, node.layer_name)\n            else:\n                assert len(param.out_shapes[0]\n                           ) == 1, ""Unexpected situation of shape parameter""\n                attr = {""shape"": [-1]}\n                node.fluid_code.add_layer(\n                    ""reshape"",\n                    inputs=param,\n                    output=""shape_param"",\n                    param_attr=attr)\n                attr = {""num_or_sections"": param.out_shapes[0][0], ""dim"": 0}\n                node.fluid_code.add_layer(\n                    ""split"", inputs=""shape_param"", output=node, param_attr=attr)\n                new_param = ""[""\n                for i in range(param.out_shapes[0][0]):\n                    new_param += (node.layer_name + ""[{}]"".format(i) + "", "")\n                new_param = new_param.strip("", "") + ""]""\n                attr = {""shape"": new_param}\n                is_variable = True\n        # to change [192, -1]->[-1, 192], allways put -1 in the first dimension\n        # optimization for Paddle-Lite\n        in_shape = input.out_shapes[0]\n        if not is_variable and in_shape.count(-1) < 1:\n            total_size = 1\n            for i in range(len(in_shape)):\n                total_size *= in_shape[i]\n            for i in range(len(attr[""shape""])):\n                if attr[""shape""][i] == 0:\n                    attr[""shape""][i] = in_shape[i]\n                if attr[""shape""][i] != -1:\n                    total_size /= attr[""shape""][i]\n            if attr[""shape""].count(-1) > 0:\n                index = attr[""shape""].index(-1)\n                attr[""shape""][index] = int(total_size)\n                attr[""shape""][0] = -1\n\n        node.fluid_code.add_layer(\n            ""reshape"", inputs=input, output=node, param_attr=attr)\n\n    def AvgPool(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n\n        in_shape = input.out_shapes[0]\n        if in_shape.count(-1) > 2:\n            in_shape = self.decoder.infer_tensor(input).shape\n\n        k_size = node.get_attr(""ksize"")\n        strides = node.get_attr(""strides"")\n        data_format = node.get_attr(""data_format"").decode()\n        pad_mode = node.get_attr(""padding"").decode()\n        channel_first = data_format == ""NCHW""\n\n        if not channel_first:\n            in_shape = [in_shape[i] for i in [0, 3, 1, 2]]\n            strides = [strides[i] for i in [0, 3, 1, 2]]\n            k_size = [k_size[i] for i in [0, 3, 1, 2]]\n            attr = {""perm"": [0, 3, 1, 2]}\n            node.fluid_code.add_layer(\n                ""transpose"", inputs=input, output=node, param_attr=attr)\n            input = node\n\n        attr = {\n            ""pool_size"": k_size[2:4],\n            ""pool_type"": string(""avg""),\n            ""pool_stride"": strides[2:4],\n            ""pool_padding"": string(pad_mode)\n        }\n        node.fluid_code.add_layer(\n            ""pool2d"", inputs=input, output=node, param_attr=attr)\n\n        if not channel_first:\n            attr = {""perm"": [0, 2, 3, 1]}\n            node.fluid_code.add_layer(\n                ""transpose"", inputs=node, output=node, param_attr=attr)\n\n    def SplitV(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        num_sections = self.graph.get_node(node.layer.input[1], copy=True)\n        dim = self.graph.get_node(node.layer.input[2], copy=True)\n        assert num_sections.layer_type == ""Const""\n        assert dim.layer_type == ""Const""\n        self.add_omit_nodes(num_sections.layer_name, node.layer_name)\n        self.add_omit_nodes(dim.layer_name, node.layer_name)\n        dim = dim.value\n        attr = {\n            ""num_or_sections"": num_sections.value.tolist(),\n            ""dim"": dim.value\n        }\n        node.fluid_code.add_layer(\n            ""split"", inputs=input, output=node, param_attr=attr)\n\n    def ConcatV2(self, node):\n        inputs = [\n            self.graph.get_node(name, copy=True)\n            for name in node.layer.input[:-1]\n        ]\n        axis = self.graph.get_node(node.layer.input[-1], copy=True)\n        assert axis.layer_type == ""Const""\n        self.add_omit_nodes(axis.layer_name, node.layer_name)\n        axis = axis.value\n        if axis < 0:\n            axis += len(inputs[0].out_shapes[0])\n\n        attr = {""axis"": axis}\n        node.fluid_code.add_layer(\n            ""concat"", inputs=inputs, output=node, param_attr=attr)\n\n    def Tile(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        expand_times = self.graph.get_node(node.layer.input[1], copy=True)\n        self.add_omit_nodes(expand_times.layer_name, node.layer_name)\n        if expand_times.layer_type == ""Const"":\n            expand_times = expand_times.value.tolist()\n        else:\n            expand_times = self.decoder.infer_shape_tensor(expand_times)\n        for i in range(len(expand_times)):\n            if expand_times[i] < 0:\n                expand_times[i] = 1\n        attr = {""expand_times"": expand_times}\n        node.fluid_code.add_layer(\n            ""expand"", inputs=input, output=node, param_attr=attr)\n\n    def Pack(self, node):\n        inputs = [\n            self.graph.get_node(name, copy=True) for name in node.layer.input\n        ]\n        axis = node.get_attr(""axis"")\n        attr = {""axis"": axis}\n        node.fluid_code.add_layer(\n            ""stack"", inputs=inputs, output=node, param_attr=attr)\n\n    def Pad(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        paddings = self.graph.get_node(node.layer.input[1], copy=True)\n        assert paddings.layer_type == ""Const"", ""Padding should be Const""\n        self.add_omit_nodes(paddings.layer_name, node.layer_name)\n        paddings = paddings.value.flatten().tolist()\n        data_format = input.tf_data_format\n\n        if len(input.out_shapes[0]) == 4:\n            new_padding = None\n            if input.tf_data_format == ""NHWC"":\n                if paddings[0] + paddings[1] + paddings[6] + paddings[7] == 0:\n                    new_padding = paddings[2:6]\n            else:\n                if paddings[0] + paddings[1] + paddings[2] + paddings[3] == 0:\n                    new_padding = paddings[4:]\n            if new_padding is not None:\n                if input.tf_data_format == ""NHWC"":\n                    attr = {""perm"": [0, 3, 1, 2]}\n                    node.fluid_code.add_layer(\n                        ""transpose"", inputs=input, output=node, param_attr=attr)\n                    input = node\n                attr = {""paddings"": new_padding}\n                node.fluid_code.add_layer(\n                    ""pad2d"", inputs=input, output=node, param_attr=attr)\n                if input.tf_data_format == ""NHWC"":\n                    attr = {""perm"": [0, 2, 3, 1]}\n                    node.fluid_code.add_layer(\n                        ""transpose"", inputs=node, output=node, param_attr=attr)\n\n                return\n\n        attr = {""paddings"": paddings}\n        node.fluid_code.add_layer(\n            ""pad"", inputs=input, output=node, param_attr=attr)\n\n    def Range(self, node):\n        start = self.graph.get_node(node.layer.input[0], copy=True)\n        limit = self.graph.get_node(node.layer.input[1], copy=True)\n        delta = self.graph.get_node(node.layer.input[2], copy=True)\n        self.add_omit_nodes(start.layer_name, node.layer_name)\n        self.add_omit_nodes(limit.layer_name, node.layer_name)\n        self.add_omit_nodes(delta.layer_name, node.layer_name)\n        if start.layer_type == ""Const"":\n            start = start.value\n        else:\n            start = self.decoder.infer_tensor(start)\n        if limit.layer_type == ""Const"":\n            limit = limit.value\n        else:\n            limit = self.decoder.infer_tensor(limit)\n        if delta.layer_type == ""Const"":\n            delta = delta.value\n        else:\n            delta = self.decoder.infer_tensor(delta)\n        dtype = node.dtype\n        inputs = {\n            ""start"": start,\n            ""end"": limit,\n            ""step"": delta,\n        }\n        attr = {""dtype"": string(node.dtype)}\n        node.fluid_code.add_layer(\n            ""range"", inputs=inputs, output=node, param_attr=attr)\n\n    def Mean(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        reduce_idx = self.graph.get_node(node.layer.input[1], copy=True)\n        assert reduce_idx.layer_type == ""Const"", ""Only support Const parameter[reduce_idx]""\n        dims = reduce_idx.value.tolist()\n        keep_dims = node.get_attr(""keep_dims"")\n\n        attr = {""dim"": dims, ""keep_dim"": keep_dims}\n        node.fluid_code.add_layer(\n            ""reduce_mean"", inputs=input, output=node, param_attr=attr)\n\n    def MatMul(self, node):\n        x = self.graph.get_node(node.layer.input[0], copy=True)\n        y = self.graph.get_node(node.layer.input[1], copy=True)\n        transpose_a = node.get_attr(\'transpose_a\')\n        transpose_b = node.get_attr(\'transpose_b\')\n        inputs = {""x"": x, ""y"": y}\n        # fix paddle shape infer problem\n        # should be removed after paddle 1.6\n        if x.out_shapes[0][-1] < 0 and y.out_shapes[0][0] > 0:\n            shape = x.out_shapes[0]\n            shape[-1] = y.out_shapes[0][0]\n            attr = {""shape"": shape}\n            node.fluid_code.add_layer(\n                ""reshape"", inputs=x, output=x, param_attr=attr)\n        attr = {""transpose_x"": transpose_a, ""transpose_y"": transpose_b}\n        node.fluid_code.add_layer(\n            ""matmul"", inputs=inputs, output=node, param_attr=attr)\n\n    def ArgMax(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        axis = self.graph.get_node(node.layer.input[1], copy=True)\n        assert axis.layer_type == ""Const"", ""ArgMax only support Const parameter""\n        self.add_omit_nodes(axis.layer_name, node.layer_name)\n        axis = axis.value\n        attr = {""axis"": axis}\n        node.fluid_code.add_layer(\n            ""argmax"", inputs=input, output=node, param_attr=attr)\n\n    def StridedSlice(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        begin = self.graph.get_node(node.layer.input[1], copy=True)\n        end = self.graph.get_node(node.layer.input[2], copy=True)\n        strides = self.graph.get_node(node.layer.input[3], copy=True)\n        assert begin.layer_type == ""Const""\n        assert end.layer_type == ""Const""\n        assert strides.layer_type == ""Const""\n        self.add_omit_nodes(begin.layer_name, node.layer_name)\n        self.add_omit_nodes(end.layer_name, node.layer_name)\n        self.add_omit_nodes(strides.layer_name, node.layer_name)\n        strides = strides.value.tolist()\n        assert len(set(strides)) == 1 and strides[\n            0] == 1, ""Only support strides be 1 in StridedSlice OP""\n\n        begin = begin.value.tolist()\n        end = end.value.tolist()\n\n        for i in range(len(end)):\n            if end[i] == 0:\n                end[i] = 999999\n\n        begin_mask = node.get_attr(\'begin_mask\')\n        end_mask = node.get_attr(\'end_mask\')\n        ellipsis_mask = node.get_attr(\'ellipsis_mask\')\n        new_axis_mask = node.get_attr(\'new_axis_mask\')\n        shrink_axis_mask = node.get_attr(\'shrink_axis_mask\')\n\n        assert ellipsis_mask == 0, ""(OP:{} Name:{})Only support ellipsis_mask be 0[now: {}] n StridedSlice OP"".format(\n            node.layer_type, node.layer.name, ellipsis_mask)\n\n        # TODO codes without validation\n        # Use it carefully\n        new_begin = list()\n        new_end = list()\n        new_axes = list()\n        shrink_axes = list()\n        for i, item in enumerate(begin):\n            mask = (new_axis_mask >> i) & 1\n            if mask != 0:\n                new_axes.append(i)\n                continue\n\n            mask = (shrink_axis_mask >> i) & 1\n            if mask != 0:\n                shrink_axes.append(i)\n\n            mask = (begin_mask >> i) & 1\n            if mask != 0:\n                new_begin.append(0)\n            else:\n                new_begin.append(item)\n\n            mask = (end_mask >> i) & 1\n            if mask != 0:\n                new_end.append(999999)\n            else:\n                new_end.append(end[i])\n\n        attr = {\n            ""axes"": [i for i in range(len(new_begin))],\n            ""starts"": new_begin,\n            ""ends"": new_end\n        }\n        node.fluid_code.add_layer(\n            ""slice"", inputs=input, output=node, param_attr=attr)\n        if len(new_axes) > 0:\n            attr = {""axes"": new_axes}\n            node.fluid_code.add_layer(\n                ""unsqueeze"", inputs=node, output=node, param_attr=attr)\n        if len(shrink_axes) > 0:\n            if len(input.out_shapes[0]) + len(new_axes) <= 1:\n                pass\n            else:\n                attr = {""axes"": shrink_axes}\n                node.fluid_code.add_layer(\n                    ""squeeze"", inputs=node, output=node, param_attr=attr)\n\n    def Slice(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        begin = self.graph.get_node(node.layer.input[1], copy=True)\n        size = self.graph.get_node(node.layer.input[2], copy=True)\n        self.add_omit_nodes(begin.layer_name, node.layer_name)\n        self.add_omit_nodes(size.layer_name, node.layer_name)\n        if begin.layer_type == ""Const"":\n            begin = begin.value.tolist()\n        else:\n            begin = self.decoder.infer_tensor(begin).tolist()\n        if size.layer_type == ""const"":\n            size = size.value.tolist()\n        else:\n            size = self.decoder.infer_tensor(size).tolist()\n\n        for i in range(len(size)):\n            if size[i] < 0:\n                size[i] = 99999999\n            else:\n                size[i] = size[i] + begin[i]\n\n        attr = {\n            ""axes"": [i for i in range(len(size))],\n            ""starts"": begin,\n            ""ends"": size\n        }\n\n        node.fluid_code.add_layer(\n            ""slice"", inputs=input, output=node, param_attr=attr)\n\n    def Conv2DBackpropInput(self, node):\n        out_shape = self.graph.get_node(node.layer.input[0], copy=True)\n        kernel = self.graph.get_node(node.layer.input[1], copy=True)\n        input = self.graph.get_node(node.layer.input[2], copy=True)\n\n        assert kernel.layer_type == ""Const"", ""Kernel of Conv2DBackpropInput should be Const""\n\n        self.add_omit_nodes(kernel.layer_name, node.layer_name)\n        self.add_omit_nodes(out_shape.layer_name, node.layer_name)\n\n        if out_shape.layer_type == ""Const"":\n            out_shape = out_shape.value.tolist()\n        else:\n            out_shape = self.decoder.infer_shape_tensor(out_shape,\n                                                        node.out_shapes[0])\n\n        in_shape = input.out_shapes[0]\n        if in_shape.count(-1) > 2:\n            in_shape = self.decoder.infer_tensor(input).shape\n        k_size = kernel.out_shapes[0]\n        if k_size.count(-1) > 2:\n            k_size = self.decoder.infer_tensor(kernel).shape\n\n        pad_mode = node.get_attr(""padding"").decode()\n        strides = node.get_attr(""strides"")\n        dilations = node.get_attr(""dilations"")\n        data_format = node.get_attr(""data_format"").decode()\n        channel_first = data_format == ""NCHW""\n\n        self.weights[kernel.layer_name.replace(\'/\', \'_\')] = numpy.transpose(\n            kernel.value, (3, 2, 0, 1))\n        if not channel_first:\n            in_shape = [in_shape[i] for i in [0, 3, 1, 2]]\n            strides = [strides[i] for i in [0, 3, 1, 2]]\n            dilations = [dilations[i] for i in [0, 3, 1, 2]]\n            attr = {""perm"": [0, 3, 1, 2]}\n            node.fluid_code.add_layer(\n                ""transpose"", inputs=input, output=node, param_attr=attr)\n            input = node\n        else:\n            self.data_format_propagation(node)\n\n        attr = {\n            ""bias_attr"": False,\n            ""param_attr"": string(kernel.layer_name),\n            ""num_filters"": k_size[2],\n            ""filter_size"": k_size[0:2],\n            ""stride"": strides[2:4],\n            ""dilation"": dilations[2:4],\n            ""padding"": string(pad_mode),\n            ""output_size"": out_shape[1:3]\n        }\n        node.fluid_code.add_layer(\n            ""conv2d_transpose"", inputs=input, output=node, param_attr=attr)\n\n        if not channel_first:\n            attr = {""perm"": [0, 2, 3, 1]}\n            node.fluid_code.add_layer(\n                ""transpose"", inputs=node, output=node, param_attr=attr)\n\n    def Max(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        reduce_idx = self.graph.get_node(node.layer.input[1], copy=True)\n        assert reduce_idx.layer_type == ""Const"", ""Only support Const parameter[reduce_idx]""\n        keep_dims = node.get_attr(""keep_dims"")\n        dim = reduce_idx.value.tolist()\n\n        attr = {""dim"": dim, ""keep_dim"": keep_dims}\n        node.fluid_code.add_layer(\n            ""reduce_max"", inputs=input, output=node, param_attr=attr)\n\n    def Sum(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        reduce_idx = self.graph.get_node(node.layer.input[1], copy=True)\n        assert reduce_idx.layer_type == ""Const"", ""Only support Const parameter[reduce_idx]""\n        keep_dims = node.get_attr(""keep_dims"")\n        dim = reduce_idx.value.tolist()\n\n        attr = {""dim"": dim, ""keep_dim"": keep_dims}\n        node.fluid_code.add_layer(\n            ""reduce_sum"", inputs=input, output=node, param_attr=attr)\n\n    def Cast(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        dtype = node.dtype_map[node.get_attr(\'DstT\')]\n        attr = {""dtype"": string(dtype)}\n        node.fluid_code.add_layer(\n            ""cast"", inputs=input, output=node, param_attr=attr)\n\n    def Split(self, node):\n        dim = self.graph.get_node(node.layer.input[0], copy=True)\n        input = self.graph.get_node(node.layer.input[1], copy=True)\n        assert dim.layer_type == ""Const""\n        self.add_omit_nodes(dim.layer_name, node.layer_name)\n        num_split = node.get_attr(\'num_split\')\n        dim = dim.value\n\n        attr = {""num_or_sections"": num_split, ""dim"": dim}\n        node.fluid_code.add_layer(\n            ""split"", inputs=input, output=node, param_attr=attr)\n\n    def Squeeze(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        squeeze_dims = node.get_attr(\'squeeze_dims\')\n        attr = {""axes"": squeeze_dims}\n        node.fluid_code.add_layer(\n            ""squeeze"", inputs=input, output=node, param_attr=attr)\n\n    def Softmax(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        axis = node.get_attr(""axis"")\n        attr = {""axis"": axis}\n        node.fluid_code.add_layer(\n            ""softmax"", inputs=input, output=node, param_attr=attr)\n\n    def ResizeNearestNeighbor(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        resize_shape = self.graph.get_node(node.layer.input[1], copy=True)\n        self.add_omit_nodes(resize_shape.layer_name, node.layer_name)\n        if resize_shape.layer_type == ""Const"":\n            resize_shape = resize_shape.value.tolist()\n        else:\n            resize_shape = self.decoder.infer_shape_tensor(\n                resize_shape, node.out_shapes[0])\n        align_corners = node.get_attr(""align_corners"")\n        attr = {""perm"": [0, 3, 1, 2]}\n        node.fluid_code.add_layer(\n            ""transpose"", inputs=input, output=node, param_attr=attr)\n        attr = {""align_corners"": align_corners, ""out_shape"": resize_shape}\n        node.fluid_code.add_layer(\n            ""resize_nearest"", inputs=node, output=node, param_attr=attr)\n        attr = {""perm"": [0, 2, 3, 1]}\n        node.fluid_code.add_layer(\n            ""transpose"", inputs=node, output=node, param_attr=attr)\n\n    def ResizeBilinear(self, node):\n        input = self.graph.get_node(node.layer.input[0], copy=True)\n        resize_shape = self.graph.get_node(node.layer.input[1], copy=True)\n        self.add_omit_nodes(resize_shape.layer_name, node.layer_name)\n        if resize_shape.layer_type == ""Const"":\n            resize_shape = resize_shape.value.tolist()\n        else:\n            resize_shape = self.decoder.infer_shape_tensor(\n                resize_shape, node.out_shapes[0])\n        align_corners = node.get_attr(""align_corners"")\n        attr = {""perm"": [0, 3, 1, 2]}\n        node.fluid_code.add_layer(\n            ""transpose"", inputs=input, output=node, param_attr=attr)\n        attr = {\n            ""align_corners"": align_corners,\n            ""out_shape"": resize_shape,\n            ""align_mode"": 1\n        }\n        node.fluid_code.add_layer(\n            ""resize_bilinear"", inputs=node, output=node, param_attr=attr)\n        attr = {""perm"": [0, 2, 3, 1]}\n        node.fluid_code.add_layer(\n            ""transpose"", inputs=node, output=node, param_attr=attr)\n\n    def GreaterEqual(self, node):\n        x = self.graph.get_node(node.layer.input[0], copy=True)\n        y = self.graph.get_node(node.layer.input[1], copy=True)\n        inputs = {""x"": x, ""y"": y}\n        node.fluid_code.add_layer(\n            ""greater_equal"", inputs=inputs, output=node, param_attr=None)\n\n    def RandomUniform(self, node):\n        shape = self.graph.get_node(node.layer.input[0], copy=True)\n        self.add_omit_nodes(shape.layer_name, node.layer_name)\n        if shape.layer_type == ""Const"":\n            shape = shape.value.tolist()\n        else:\n            shape = self.decoder.infer_shape_tensor(shape)\n        attr = {""shape"": shape, ""min"": 0.0, ""max"": 0.9999}\n\n        if shape[0] < 0:\n            input = self.batch_node\n            node.fluid_code.add_layer(\n                ""uniform_random_batch_size_like"",\n                inputs=input,\n                output=node,\n                param_attr=attr)\n        else:\n            node.fluid_code.add_layer(\n                ""uniform_random"", inputs=None, output=node, param_attr=attr)\n\n    def SquaredDifference(self, node):\n        x = self.graph.get_node(node.layer.input[0], copy=True)\n        y = self.graph.get_node(node.layer.input[1], copy=True)\n        inputs = {""x"": x, ""y"": y}\n        node.fluid_code.add_layer(\n            ""elementwise_sub"", inputs=inputs, output=node, param_attr=None)\n        inputs = {""x"": node, ""y"": node}\n        node.fluid_code.add_layer(\n            ""elementwise_mul"", inputs=inputs, output=node, param_attr=None)\n\n    def ExpandDims(self, node):\n        x = self.graph.get_node(node.layer.input[0], copy=True)\n        y = self.graph.get_node(node.layer.input[1], copy=True)\n        if y.layer_type == \'Const\':\n            dim = y.value.tolist()\n        else:\n            dim = self.decoder.infer_tensor(y)\n        self.add_omit_nodes(y.layer_name, node.layer_name)\n        attr = {\'axes\': [dim]}\n        node.fluid_code.add_layer(\n            ""unsqueeze"", inputs=x, output=node, param_attr=attr)\n\n    def BatchToSpaceND(self, node):\n        x = self.graph.get_node(node.layer.input[0], copy=True)\n        y = self.graph.get_node(node.layer.input[1], copy=True)\n        if hasattr(node, \'skip\') and node.skip:\n            node.fluid_code.add_layer(\n                ""="", inputs=x, output=node, param_attr=None)\n        else:\n            raise Exception(""BatchToSpaceND is not supported"")\n\n    def SpaceToBatchND(self, node):\n        x = self.graph.get_node(node.layer.input[0], copy=True)\n        y = self.graph.get_node(node.layer.input[1], copy=True)\n        if hasattr(node, \'skip\') and node.skip:\n            node.fluid_code.add_layer(\n                ""="", inputs=x, output=node, param_attr=None)\n        else:\n            raise Exception(""SpaceToBatchND is not supported"")\n'"
x2paddle/optimizer/__init__.py,0,b''
x2paddle/optimizer/caffe_optimizer.py,0,"b'#   Copyright (c) 2019  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License""\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom x2paddle.decoder.caffe_decoder import CaffeGraph\nfrom x2paddle.core.util import *\n\n\nclass CaffeOptimizer(object):\n    layers_with_act = [\'Convolution\', \'Deconvolution\', \'InnerProduct\']\n    activation_ops = [\'ReLU\', \'Sigmoid\']\n\n    def __init__(self, mapper):\n        self.graph = mapper.graph\n\n    def merge_bn_scale(self):\n        for node_name in self.graph.topo_sort:\n            node = self.graph.get_node(node_name)\n            if node.layer_type == \'Scale\':\n                parent_node = self.graph.get_bottom_node(node, idx=0)\n                if parent_node.layer_type == \'BatchNorm\':\n                    is_delete_node = True if len(\n                        parent_node.outputs) == 1 else False\n                    parent_fluid_layer = parent_node.fluid_code.layers[0]\n                    input = parent_fluid_layer.inputs\n                    parent_param_attr = parent_fluid_layer.param_attr\n                    parent_param_attr[\'param_attr\'] = string(node.layer_name +\n                                                             \'_scale\')\n                    parent_param_attr[\'bias_attr\'] = string(node.layer_name +\n                                                            \'_offset\')\n                    if is_delete_node:\n                        parent_node.fluid_code.clear()\n                    node.fluid_code.clear()\n                    node.fluid_code.add_layer(""batch_norm"",\n                                              inputs=input,\n                                              output=node,\n                                              param_attr=parent_param_attr)\n\n    def merge_op_activation(self):\n        for node_name in self.graph.topo_sort:\n            node = self.graph.get_node(node_name)\n            if node.layer_type in self.activation_ops:\n                parent_node = self.graph.get_bottom_node(node, idx=0)\n                if parent_node.layer_type in self.layers_with_act:\n                    is_delete_node = True if len(\n                        parent_node.outputs) == 1 else False\n                    parent_fluid_layer = parent_node.fluid_code.layers[0]\n                    input = parent_fluid_layer.inputs\n                    parent_param_attr = parent_fluid_layer.param_attr\n                    parent_param_attr[\'act\'] = string(node.layer_type.lower())\n                    op = parent_fluid_layer.op\n                    if is_delete_node:\n                        parent_node.fluid_code.clear()\n                    node.fluid_code.clear()\n                    node.fluid_code.add_layer(op,\n                                              inputs=input,\n                                              output=node,\n                                              param_attr=parent_param_attr)\n'"
x2paddle/optimizer/onnx_optimizer.py,0,"b'#   Copyright (c) 2019  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License""\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# TODO useless node remove\nfrom x2paddle.op_mapper.onnx_op_mapper import ONNXOpMapper\n\n\nclass ONNXOptimizer(object):\n    def __init__(self, op_mapper):\n        self.op_mapper = op_mapper\n        self.graph = op_mapper.graph\n\n    def delete_redundance_code(self):\n        for node_name in self.graph.topo_sort:\n            if node_name in self.op_mapper.omit_nodes:\n                node = self.graph.get_node(node_name)\n                omit_freq = self.op_mapper.omit_nodes.count(node_name)\n                if len(node.outputs) <= omit_freq:\n                    node.fluid_code.clear()\n'"
x2paddle/optimizer/tf_optimizer.py,0,"b'#   Copyright (c) 2019  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License""\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# TODO useless node remove\nfrom x2paddle.op_mapper.tf_op_mapper import TFOpMapper\nfrom x2paddle.core.fluid_code import Layer\nfrom x2paddle.core.util import *\nimport six\nimport numpy\nimport copy as cp\n\n\ndef exist_act(node):\n    for layer in node.fluid_code.layers:\n        if layer.param_attr is not None:\n            act = layer.param_attr.get(""act"", None)\n            if act is not None:\n                return True\n    return False\n\n\nclass TFOptimizer(object):\n    activation_ops = {\n        \'Relu\': \'relu\',\n        \'Sigmoid\': \'sigmoid\',\n        \'Relu6\': \'relu6\',\n        \'swish_f32\': \'swish\'\n    }\n    layers_with_act = [\n        \'Conv2D\', \'BiasAdd\', \'DepthwiseConv2dNative\', \'Conv2DBackpropInput\',\n        \'FusedBatchNorm\', \'conv2d\', \'elementwise_add\', \'conv2d_transpose\',\n        \'batch_norm\'\n    ]\n    layers_with_bias = [\n        \'Conv2D\', \'DepthwiseConv2dNative\', \'Conv2DBackpropInput\', \'conv2d\',\n        \'conv2d_transpose\'\n    ]\n\n    def __init__(self, op_mapper):\n        self.op_mapper = op_mapper\n        self.graph = op_mapper.graph\n\n    def delete_redundance_code(self):\n        for node_name in self.graph.topo_sort:\n            if node_name in self.op_mapper.omit_nodes:\n                node = self.graph.get_node(node_name)\n                if node is None:\n                    continue\n                omit_freq = self.op_mapper.omit_nodes.count(node_name)\n                if len(node.outputs) <= omit_freq:\n                    node.fluid_code.clear()\n\n                    # remove node from graph\n                    input_names = node.inputs\n                    output_names = node.outputs\n                    for in_name in input_names:\n                        in_node = self.graph.get_node(in_name)\n                        index = in_node.outputs.index(node_name)\n                        del in_node.outputs[index]\n                    for out_name in output_names:\n                        out_node = self.graph.get_node(out_name)\n                        index = out_node.inputs.index(node_name)\n                        del out_node.inputs[index]\n                    del self.graph.node_map[node_name]\n\n    def strip_graph(self):\n        visited_nodes = set()\n\n        def visit(node_name):\n            if node_name in visited_nodes:\n                return\n            visited_nodes.add(node_name)\n            input_names = self.graph.get_node(node_name).inputs\n            for in_name in input_names:\n                visit(in_name)\n\n        for node_name in self.graph.output_nodes:\n            visit(node_name)\n\n        for i, node_name in enumerate(self.graph.topo_sort):\n            if node_name not in visited_nodes:\n                node = self.graph.get_node(node_name)\n                if node is None:\n                    continue\n                input_names = node.inputs\n                output_names = node.outputs\n                for in_name in input_names:\n                    in_node = self.graph.get_node(in_name)\n                    index = in_node.outputs.index(node_name)\n                    del in_node.outputs[index]\n                for out_name in output_names:\n                    out_node = self.graph.get_node(out_name)\n                    index = out_node.inputs.index(node_name)\n                    del out_node.inputs[index]\n                del self.graph.node_map[node_name]\n\n    def optimize_elementwise_op(self):\n        elementwise_ops = [\n            \'Sub\', \'Add\', \'RealDiv\', \'Maximum\', \'Mul\', \'FloorDiv\',\n            \'GreaterEqual\'\n        ]\n        revertable_ops = [\'Add\', \'Mul\']\n        for node_name in self.graph.topo_sort:\n            node = self.graph.get_node(node_name)\n            if node is None:\n                continue\n            if node.layer_type in elementwise_ops:\n                if len(node.fluid_code.layers) != 2:\n                    continue\n                if node.fluid_code.layers[0].op != ""expand"":\n                    continue\n                expand_out = node.fluid_code.layers[0].output\n                expand_in = node.fluid_code.layers[0].inputs\n                expand_times = node.fluid_code.layers[0].param_attr[\n                    ""expand_times""]\n\n                x = node.fluid_code.layers[1].inputs[""x""]\n                y = node.fluid_code.layers[1].inputs[""y""]\n                if isinstance(\n                        x,\n                        six.string_types) and node.layer_type in revertable_ops:\n                    node.fluid_code.layers[1].inputs[""y""] = x\n                    node.fluid_code.layers[1].inputs[""x""] = y\n                    x = node.fluid_code.layers[1].inputs[""x""]\n                    y = expand_in\n                elif isinstance(y, six.string_types):\n                    y = expand_in\n                else:\n                    continue\n\n                x_shape = x.out_shapes[0]\n                y_shape = y.out_shapes[0]\n                if len(x_shape) != len(y_shape):\n                    continue\n                if len(x_shape) == 4:\n                    x_shape = [x_shape[i] for i in [0, 3, 1, 2]]\n                    y_shape = [y_shape[i] for i in [0, 3, 1, 2]]\n\n                continue_flag = True\n                for i in range(len(x_shape)):\n                    if y_shape[-1 * (i + 1)] == 1 and continue_flag:\n                        expand_times[-1 * (i + 1)] = 1\n                    else:\n                        continue_flag = False\n\n                if expand_times.count(1) == len(expand_times):\n                    node.fluid_code.layers[1].inputs[""y""] = expand_in\n                    del node.fluid_code.layers[0]\n\n    def merge_activation(self):\n        act_nodes = list()\n        for node_name in self.graph.topo_sort:\n            node = self.graph.get_node(node_name)\n            if node is None:\n                continue\n            if node.layer_type in self.activation_ops:\n                act_nodes.append(node_name)\n\n        for act_node_name in act_nodes:\n            node = self.graph.get_node(act_node_name)\n            input = self.graph.get_node(node.inputs[0])\n            if input.layer_type not in self.layers_with_act:\n                continue\n            if len(input.fluid_code.layers) == 0:\n                continue\n            if \'act\' in input.fluid_code.layers[\n                    -1].param_attr and input.fluid_code.layers[-1].param_attr[\n                        \'act\'] is not None:\n                continue\n            if len(input.outputs) != 1:\n                continue\n            index = -1\n            for i in range(len(input.fluid_code.layers)):\n                if input.fluid_code.layers[i].op in self.layers_with_act:\n                    index = i\n                    break\n            input.fluid_code.layers[index].param_attr[\'act\'] = string(\n                self.activation_ops[node.layer_type])\n            input.fluid_code.layers[-1].output = node.fluid_code.layers[\n                0].output\n            self.graph.remove_node(act_node_name)\n\n    def merge_bias(self):\n        for node_name in self.graph.topo_sort:\n            node = self.graph.get_node(node_name)\n            if node is None:\n                continue\n            if node.layer_type == ""BiasAdd"":\n                input = self.graph.get_node(node.inputs[0])\n                if input.layer_type not in self.layers_with_bias:\n                    continue\n                if len(input.outputs) != 1:\n                    continue\n                if len(input.fluid_code.layers) == 0:\n                    continue\n                bias_with_act = False\n                if \'act\' in node.fluid_code.layers[-1].param_attr:\n                    bias_with_act = True\n                layer_with_act = False\n                index = -1\n                for i in range(len(input.fluid_code.layers)):\n                    if input.fluid_code.layers[i].op in self.layers_with_bias:\n                        index = i\n                        break\n                if \'act\' in input.fluid_code.layers[\n                        index].param_attr and input.fluid_code.layers[\n                            index].param_attr[\'act\'] is not None:\n                    layer_with_act = True\n\n                if bias_with_act and layer_with_act:\n                    continue\n                if not input.fluid_code.layers[index].param_attr[\'bias_attr\']:\n                    bias_name = node.inputs[1]\n                    input.fluid_code.layers[index].param_attr[\n                        \'bias_attr\'] = string(bias_name)\n                    input.fluid_code.layers[-1].output = node.fluid_code.layers[\n                        0].output\n                    if bias_with_act:\n                        input.fluid_code.layers[index].param_attr[\n                            \'act\'] = node.fluid_code.layers[-1].param_attr[\n                                \'act\']\n                    node.fluid_code.clear()\n                    self.graph.remove_node(node.layer_name)\n                    self.graph.identity_map[node.layer_name] = input.layer_name\n\n    def remove_transpose(self):\n        graph_copy = cp.deepcopy(self.graph)\n        nhwc_insensitive_ops = [\n            \'Relu\', \'Relu6\', \'Abs\', \'Sigmoid\', \'Exp\', \'Rsqrt\', \'swish_f32\',\n            \'LeakyRelu\', \'Cast\', \'Tanh\'\n        ]\n        elementwise_ops = [\n            \'Sub\', \'Add\', \'RealDiv\', \'Maximum\', \'Mul\', \'FloorDiv\',\n            \'GreaterEqual\'\n        ]\n        optimize_ops = [\n            \'Conv2D\', \'MaxPool\', \'FusedBatchNorm\', \'DepthwiseConv2dNative\',\n            \'AvgPool\', \'Pad\', \'Conv2DBackpropInput\', \'ResizeNearestNeighbor\',\n            \'ResizeBilinear\', ""Placeholder""\n        ]\n        can_be_optimized_ops = [\n            \'Conv2D\', \'MaxPool\', \'FusedBatchNorm\', \'DepthwiseConv2dNative\',\n            \'AvgPool\', \'Pad\', \'Conv2DBackpropInput\', \'ResizeNearestNeighbor\',\n            \'ResizeBilinear\', ""Placeholder"", \'Relu\', \'Relu6\', \'Abs\', \'Sigmoid\',\n            \'Exp\', \'Rsqrt\', \'swish_f32\', \'LeakyRelu\', \'Cast\', \'Tanh\'\n        ]\n\n        for node_name in self.graph.topo_sort:\n            node = graph_copy.get_node(node_name)\n            if node is None:\n                continue\n            if node.layer_type in can_be_optimized_ops:\n                if node.fluid_code.layers[\n                        -1].op != ""transpose"" or node.fluid_code.layers[\n                            -1].param_attr[""perm""] != [0, 2, 3, 1]:\n                    continue\n                can_be_removed = True\n                output_names = node.outputs\n                for out_name in output_names:\n                    out_node = graph_copy.get_node(out_name)\n                    if hasattr(out_node, ""can_be_removed""):\n                        if not out_node.can_be_removed:\n                            can_be_removed = False\n                            break\n                    elif out_node.fluid_code.layers[\n                            0].op != ""transpose"" or out_node.fluid_code.layers[\n                                0].param_attr[""perm""] != [0, 3, 1, 2]:\n                        can_be_removed = False\n                        break\n                    elif out_node.layer_type in elementwise_ops:\n                        can_be_removed = False\n                        break\n                if can_be_removed and len(node.fluid_code.layers) > 1:\n                    true_node = self.graph.get_node(node_name)\n                    if true_node.layer_type == ""Placeholder"":\n                        index = self.graph.input_nodes.index(\n                            true_node.fluid_code.layers[-2].output)\n                        if isinstance(true_node.fluid_code.layers[-1].output,\n                                      str):\n                            self.graph.input_nodes[\n                                index] = true_node.fluid_code.layers[-1].output\n                        else:\n                            self.graph.input_nodes[\n                                index] = true_node.fluid_code.layers[\n                                    -1].output.layer_name\n                    true_node.fluid_code.layers[\n                        -2].output = true_node.fluid_code.layers[-1].output\n                    node.removed = True\n                    del true_node.fluid_code.layers[-1]\n                    for out_name in output_names:\n                        out_node = self.graph.get_node(out_name)\n                        out_node.fluid_code.layers[\n                            1].inputs = out_node.fluid_code.layers[0].inputs\n                        del out_node.fluid_code.layers[0]\n\n        for node_name in self.graph.topo_sort:\n            node = graph_copy.get_node(node_name)\n            if node is None:\n                continue\n            if node.layer_type in elementwise_ops:\n                can_be_removed = True\n                if node.fluid_code.layers[\n                        -1].op != ""transpose"" or node.fluid_code.layers[\n                            -1].param_attr[""perm""] != [0, 2, 3, 1]:\n                    continue\n                can_be_removed = True\n\n                output_names = node.outputs\n                for out_name in output_names:\n                    out_node = graph_copy.get_node(out_name)\n                    if len(out_node.fluid_code.layers) < 3:\n                        can_be_removed = False\n                        break\n                    if hasattr(out_node, ""can_be_removed""):\n                        if not out_node.can_be_removed:\n                            can_be_removed = False\n                            break\n                    if out_node.layer_type in can_be_optimized_ops:\n                        if out_node.fluid_code.layers[\n                                0].op != ""transpose"" or out_node.fluid_code.layers[\n                                    0].param_attr[""perm""] != [0, 3, 1, 2]:\n                            can_be_removed = False\n                            break\n                    elif out_node.layer_type in elementwise_ops:\n                        if out_node.fluid_code.layers[\n                                0].op != ""transpose"" and out_node.fluid_code.layers[\n                                    1].op != ""transpose"":\n                            can_be_removed = False\n                            break\n                        if out_node.fluid_code.layers[0].op == ""transpose"":\n                            if out_node.fluid_code.layers[0].param_attr[\n                                    ""perm""] != [0, 3, 1, 2]:\n                                can_be_removed = False\n                                break\n                        if out_node.fluid_code.layers[1].op == ""transpose"":\n                            if out_node.fluid_code.layers[1].param_attr[\n                                    ""perm""] != [0, 3, 1, 2]:\n                                can_be_removed = False\n                                break\n\n                if can_be_removed and len(node.fluid_code.layers) > 1:\n                    true_node = self.graph.get_node(node_name)\n                    true_node.fluid_code.layers[\n                        -2].output = true_node.fluid_code.layers[-1].output\n                    del true_node.fluid_code.layers[-1]\n                    for out_name in output_names:\n                        out_node = self.graph.get_node(out_name)\n                        if out_node.layer_type in can_be_optimized_ops:\n                            out_node.fluid_code.layers[\n                                1].inputs = out_node.fluid_code.layers[0].inputs\n                            del out_node.fluid_code.layers[0]\n                        elif out_node.layer_type in elementwise_ops:\n                            if out_node.inputs[0] in node.layer_name:\n                                if out_node.fluid_code.layers[\n                                        1].op == \'transpose\':\n                                    out_node.fluid_code.layers[2].inputs[\n                                        \'x\'] = out_node.fluid_code.layers[\n                                            0].inputs\n                                    del out_node.fluid_code.layers[0]\n                                else:\n                                    out_node.fluid_code.layers[1].inputs[\n                                        \'x\'] = out_node.fluid_code.layers[\n                                            0].inputs\n                                    del out_node.fluid_code.layers[0]\n                            elif out_node.inputs[1] in node.layer_name:\n                                if out_node.fluid_code.layers[\n                                        1].op == \'transpose\':\n                                    out_node.fluid_code.layers[2].inputs[\n                                        \'y\'] = out_node.fluid_code.layers[\n                                            1].inputs\n                                    del out_node.fluid_code.layers[1]\n                                else:\n                                    out_node.fluid_code.layers[1].inputs[\n                                        \'y\'] = out_node.fluid_code.layers[\n                                            0].inputs\n                                    del out_node.fluid_code.layers[0]\n        graph_copy = cp.deepcopy(self.graph)\n        for node_name in self.graph.topo_sort:\n            node = graph_copy.get_node(node_name)\n            if node is None or len(node.fluid_code.layers) < 2:\n                continue\n            if node.layer_type in can_be_optimized_ops and node.layer_type != ""Placeholder"":\n                if node.fluid_code.layers[\n                        -1].op != ""transpose"" or node.fluid_code.layers[\n                            -1].param_attr[""perm""] != [0, 2, 3, 1]:\n                    continue\n                can_be_removed = True\n                output_names = node.outputs\n                for out_name in output_names:\n                    out_node = graph_copy.get_node(out_name)\n                    if hasattr(out_node, ""can_be_removed""):\n                        if not out_node.can_be_removed:\n                            can_be_removed = False\n                            break\n                    if len(out_node.fluid_code.layers) < 2:\n                        can_be_removed = False\n                        break\n                    if out_node.layer_type in can_be_optimized_ops:\n                        if out_node.fluid_code.layers[\n                                0].op != ""transpose"" or out_node.fluid_code.layers[\n                                    0].param_attr[""perm""] != [0, 3, 1, 2]:\n                            can_be_removed = False\n                            break\n                    elif out_node.layer_type in elementwise_ops:\n                        if out_node.fluid_code.layers[\n                                0].op != ""transpose"" and out_node.fluid_code.layers[\n                                    1].op != ""transpose"":\n                            can_be_removed = False\n                            break\n                        if out_node.fluid_code.layers[\n                                0].op == ""expand"" or out_node.fluid_code.layers[\n                                    1].op == ""expand"":\n                            can_be_removed = False\n                            break\n                        if out_node.fluid_code.layers[0].op == ""transpose"":\n                            if out_node.fluid_code.layers[0].param_attr[\n                                    ""perm""] != [0, 3, 1, 2]:\n                                can_be_removed = False\n                                break\n                        if out_node.fluid_code.layers[1].op == ""transpose"":\n                            if out_node.fluid_code.layers[1].param_attr[\n                                    ""perm""] != [0, 3, 1, 2]:\n                                can_be_removed = False\n                                break\n                    elif out_node.layer_type not in elementwise_ops and out_node.layer_type not in can_be_optimized_ops:\n                        can_be_removed = False\n                        break\n\n                if can_be_removed:\n                    true_node = self.graph.get_node(node_name)\n                    if len(true_node.fluid_code.layers) < 2:\n                        continue\n                    true_node.fluid_code.layers[\n                        -2].output = true_node.fluid_code.layers[-1].output\n                    del true_node.fluid_code.layers[-1]\n                    for out_name in output_names:\n                        out_node = self.graph.get_node(out_name)\n                        if out_node.layer_type in can_be_optimized_ops:\n                            out_node.fluid_code.layers[\n                                1].inputs = out_node.fluid_code.layers[0].inputs\n                            del out_node.fluid_code.layers[0]\n                        elif out_node.layer_type in elementwise_ops:\n                            if out_node.inputs[0] in node.layer_name:\n                                if out_node.fluid_code.layers[\n                                        1].op == \'transpose\':\n                                    if out_node.fluid_code.layers[\n                                            2].op == \'transpose\':\n                                        out_node.fluid_code.layers[3].inputs[\n                                            \'x\'] = out_node.fluid_code.layers[\n                                                0].inputs\n                                    else:\n                                        out_node.fluid_code.layers[2].inputs[\n                                            \'x\'] = out_node.fluid_code.layers[\n                                                0].inputs\n                                    del out_node.fluid_code.layers[0]\n                                else:\n                                    out_node.fluid_code.layers[1].inputs[\n                                        \'x\'] = out_node.fluid_code.layers[\n                                            0].inputs\n                                    del out_node.fluid_code.layers[0]\n                            elif out_node.inputs[1] in node.layer_name:\n                                if out_node.fluid_code.layers[\n                                        1].op == \'transpose\':\n                                    out_node.fluid_code.layers[2].inputs[\n                                        \'y\'] = out_node.fluid_code.layers[\n                                            1].inputs\n                                    del out_node.fluid_code.layers[1]\n                                else:\n                                    out_node.fluid_code.layers[1].inputs[\n                                        \'y\'] = out_node.fluid_code.layers[\n                                            0].inputs\n                                    del out_node.fluid_code.layers[0]\n\n        graph_copy = cp.deepcopy(self.graph)\n        for node_name in self.graph.topo_sort:\n            node = graph_copy.get_node(node_name)\n            if node is None:\n                continue\n            if node.layer_type in elementwise_ops:\n                can_be_removed = True\n                if len(node.fluid_code.layers) < 3:\n                    continue\n\n                numTranspose = 0\n                numNotTranspose = 0\n\n                for i in range(len(node.fluid_code.layers)):\n                    if node.fluid_code.layers[i].op == \'transpose\':\n                        numTranspose += 1\n                    elif node.fluid_code.layers[i].op != \'expand\':\n                        numNotTranspose += 1\n                if numTranspose > numNotTranspose:\n                    if node.fluid_code.layers[0].op == \'expand\':\n                        if node.fluid_code.layers[\n                                1].op != \'transpose\' or node.fluid_code.layers[\n                                    2].op != \'transpose\':\n                            continue\n                        else:\n                            true_node = self.graph.get_node(node_name)\n                            true_node.fluid_code.layers[3].inputs[\n                                \'x\'] = true_node.fluid_code.layers[1].inputs\n                            true_node.fluid_code.layers[3].inputs[\n                                \'y\'] = true_node.fluid_code.layers[2].inputs\n\n                            l = Layer()\n                            l.op = \'transpose\'\n                            l.inputs = true_node.fluid_code.layers[3].output\n                            l.param_attr = {\'perm\': [0, 3, 1, 2]}\n                            if isinstance(l.inputs, six.string_types):\n                                l.output = l.inputs\n                            else:\n                                l.output = l.inputs.layer_name\n                            true_node.fluid_code.layers.append(l)\n                            del true_node.fluid_code.layers[1]\n                            del true_node.fluid_code.layers[1]\n                    else:\n                        if node.fluid_code.layers[\n                                0].op != \'transpose\' or node.fluid_code.layers[\n                                    1].op != \'transpose\':\n                            continue\n                        else:\n                            true_node = self.graph.get_node(node_name)\n                            true_node.fluid_code.layers[2].inputs[\n                                \'x\'] = true_node.fluid_code.layers[0].inputs\n                            true_node.fluid_code.layers[2].inputs[\n                                \'y\'] = true_node.fluid_code.layers[1].inputs\n\n                            l = Layer()\n                            l.op = \'transpose\'\n                            l.inputs = true_node.fluid_code.layers[2].output\n                            l.param_attr = {\'perm\': [0, 3, 1, 2]}\n                            l.output = l.inputs.layer_name\n                            true_node.fluid_code.layers.append(l)\n                            del true_node.fluid_code.layers[0]\n                            del true_node.fluid_code.layers[0]\n\n    def make_nchw_input_output(self):\n        for i, name in enumerate(self.graph.input_nodes):\n            node = self.graph.get_node(name)\n            if len(node.out_shapes[0]) == 4 and node.tf_data_format == ""NHWC"":\n                shape = node.fluid_code.layers[0].param_attr[""shape""]\n                shape = [shape[j] for j in [0, 3, 1, 2]]\n                node.fluid_code.layers[0].param_attr[""shape""] = shape\n                node.fluid_code.layers[0].output = ""nhwc_"" + name\n                attr = {""perm"": [0, 2, 3, 1]}\n                node.fluid_code.add_layer(""transpose"",\n                                          inputs=""nhwc_"" + name,\n                                          output=node,\n                                          param_attr=attr)\n                self.graph.input_nodes[i] = ""nhwc_"" + name\n        for i, name in enumerate(self.graph.output_nodes):\n            node = self.graph.get_node(name)\n            if node.layer_type != ""transpose"":\n                if node.fluid_code.layers[-1].op == ""transpose"":\n                    node.fluid_code.layers[-2].output = name\n                    del node.fluid_code.layers[-1]\n\n    def optimize_sub_graph(self):\n        self.merge_batch_norm()\n        self.merge_prelu()\n        self.merge_scale()\n        self.merge_affine_channel()\n\n    def merge_batch_norm(self):\n        for i, name in enumerate(self.graph.topo_sort):\n            node = self.graph.get_node(name)\n            if node is None:\n                continue\n            is_batch_norm = True\n            if node.layer_type == ""Add"":\n                in_nodes0 = [\n                    self.graph.get_node(in_name) for in_name in node.inputs\n                ]\n                if in_nodes0[0].layer_type != ""Mul"" or in_nodes0[\n                        1].layer_type != ""Sub"":\n                    is_batch_norm = False\n                    continue\n\n                if exist_act(in_nodes0[0]) or exist_act(in_nodes0[1]):\n                    is_batch_norm = False\n                    continue\n\n                in_nodes1 = [\n                    self.graph.get_node(in_name)\n                    for in_name in in_nodes0[0].inputs\n                ]\n                in_nodes2 = [\n                    self.graph.get_node(in_name)\n                    for in_name in in_nodes0[1].inputs\n                ]\n                if len(in_nodes1[0].out_shapes[0]) != 4:\n                    is_batch_norm = False\n                    continue\n                if in_nodes1[1].layer_type != ""Mul"":\n                    is_batch_norm = False\n                    continue\n                if exist_act(in_nodes1[1]):\n                    is_batch_norm = False\n                    continue\n\n                if in_nodes2[0].layer_type != ""Const"" or in_nodes2[\n                        1].layer_type != ""Mul"":\n                    is_batch_norm = False\n                    continue\n                if exist_act(in_nodes2[1]):\n                    is_batch_norm = False\n                    continue\n\n                in_nodes3 = [\n                    self.graph.get_node(in_name)\n                    for in_name in in_nodes1[1].inputs\n                ]\n                if in_nodes3[0].layer_type != ""Rsqrt"" or in_nodes3[\n                        1].layer_type != ""Const"":\n                    is_batch_norm = False\n                    continue\n\n                in_nodes4 = [\n                    self.graph.get_node(in_name)\n                    for in_name in in_nodes2[1].inputs\n                ]\n                if in_nodes4[0].layer_type != ""Const"" or in_nodes4[\n                        1].layer_name != in_nodes1[1].layer_name:\n                    is_batch_norm = False\n                    continue\n\n                in_nodes5 = self.graph.get_node(in_nodes3[0].inputs[0])\n                if in_nodes5.layer_type != ""Add"":\n                    is_batch_norm = False\n                    continue\n                if exist_act(in_nodes5):\n                    is_batch_norm = False\n                    continue\n\n                in_nodes6 = [\n                    self.graph.get_node(in_name) for in_name in in_nodes5.inputs\n                ]\n                if in_nodes6[0].layer_type != ""Const"" or in_nodes6[\n                        1].layer_type != ""Const"":\n                    is_batch_norm = False\n                    continue\n\n                if len(in_nodes0[0].outputs) != 1:\n                    is_batch_norm = False\n                    continue\n                if len(in_nodes0[1].outputs) != 1:\n                    is_batch_norm = False\n                    continue\n                if len(in_nodes1[1].outputs) != 2:\n                    is_batch_norm = False\n                    continue\n                if len(in_nodes2[0].outputs) != 1:\n                    is_batch_norm = False\n                    continue\n                if len(in_nodes2[1].outputs) != 1:\n                    is_batch_norm = False\n                    continue\n                if len(in_nodes3[0].outputs) != 1:\n                    is_batch_norm = False\n                    continue\n                if len(in_nodes3[1].outputs) != 1:\n                    is_batch_norm = False\n                    continue\n                if len(in_nodes4[0].outputs) != 1:\n                    is_batch_norm = False\n                    continue\n                if len(in_nodes5.outputs) != 1:\n                    is_batch_norm = False\n                    continue\n                if len(in_nodes6[0].outputs) != 1:\n                    is_batch_norm = False\n                    continue\n                if len(in_nodes6[1].outputs) != 1:\n                    is_batch_norm = False\n                    continue\n\n                conv_shape = in_nodes1[0].out_shapes[0]\n                if conv_shape[3] < 0:\n                    is_batch_norm = False\n                    continue\n\n                # moving_variance\n                if in_nodes6[0].value.size != conv_shape[3]:\n                    is_batch_norm = False\n                    continue\n\n                # epsilon\n                if in_nodes6[1].value.size != 1:\n                    is_batch_norm = False\n                    continue\n\n                # gamma\n                if in_nodes3[1].value.size != conv_shape[3]:\n                    is_batch_norm = False\n                    continue\n\n                # moving_mean\n                if in_nodes4[0].value.size != conv_shape[3]:\n                    is_batch_norm = False\n                    continue\n\n                # beta\n                if in_nodes2[0].value.size != conv_shape[3]:\n                    is_batch_norm = False\n                    continue\n\n                if is_batch_norm:\n                    index = in_nodes1[0].outputs.index(in_nodes0[0].layer_name)\n                    in_nodes1[0].outputs[index] = node.layer_name\n                    node.layer_type = ""FusedBatchNorm""\n                    node.inputs = [in_nodes1[0].layer_name]\n                    act = node.fluid_code.layers[-1].param_attr.get(""act"", None)\n                    node.fluid_code.clear()\n                    attr = {\n                        ""epsilon"": in_nodes6[1].value,\n                        ""param_attr"": string(in_nodes3[1].layer_name),\n                        ""bias_attr"": string(in_nodes2[0].layer_name),\n                        ""moving_mean_name"": string(in_nodes4[0].layer_name),\n                        ""moving_variance_name"": string(in_nodes6[0].layer_name),\n                        ""is_test"": True,\n                        ""act"": act\n                    }\n\n                    node.fluid_code.add_layer(\n                        ""batch_norm"",\n                        inputs=in_nodes1[0].fluid_code.layers[-1].output,\n                        output=node,\n                        param_attr=attr)\n\n                del self.graph.node_map[in_nodes0[0].layer_name]\n                del self.graph.node_map[in_nodes0[1].layer_name]\n                del self.graph.node_map[in_nodes1[1].layer_name]\n                del self.graph.node_map[in_nodes2[1].layer_name]\n                del self.graph.node_map[in_nodes3[0].layer_name]\n                del self.graph.node_map[in_nodes4[0].layer_name]\n                del self.graph.node_map[in_nodes5.layer_name]\n\n    def merge_prelu(self):\n        for i, name in enumerate(self.graph.topo_sort):\n            node = self.graph.get_node(name)\n            if node is None:\n                continue\n            is_prelu = True\n            if node.layer_type == ""Add"":\n                if exist_act(node):\n                    is_prelu = False\n                    continue\n                in_nodes0 = [\n                    self.graph.get_node(in_name) for in_name in node.inputs\n                ]\n                if in_nodes0[0].layer_type != ""Relu"" or in_nodes0[\n                        1].layer_type != ""Mul"":\n                    is_prelu = False\n                    continue\n                if exist_act(in_nodes0[1]):\n                    is_prelu = False\n                    continue\n\n                if len(in_nodes0[0].outputs) != 1 or len(\n                        in_nodes0[1].outputs) != 1:\n                    is_prelu = False\n                    continue\n\n                in_nodes1 = self.graph.get_node(in_nodes0[0].inputs[0])\n                in_nodes2 = [\n                    self.graph.get_node(in_name)\n                    for in_name in in_nodes0[1].inputs\n                ]\n                if in_nodes2[1].layer_type != ""Const"" or numpy.fabs(\n                        in_nodes2[1].value - 0.5) > 1e-06:\n                    is_prelu = False\n                    continue\n                if in_nodes2[0].layer_type != ""Mul"":\n                    is_prelu = False\n                    continue\n                if exist_act(in_nodes2[0]):\n                    is_prelu = False\n                    continue\n                if len(in_nodes2[1].outputs) != 1 or len(\n                        in_nodes2[0].outputs) != 1:\n                    is_prelu = False\n                    continue\n\n                in_nodes3 = [\n                    self.graph.get_node(in_name)\n                    for in_name in in_nodes2[0].inputs\n                ]\n                if in_nodes3[0].layer_type != ""Const"" or in_nodes3[\n                        1].layer_type != ""Sub"":\n                    is_prelu = False\n                    continue\n                if exist_act(in_nodes3[1]):\n                    is_prelu = False\n                    continue\n                if len(in_nodes3[0].outputs) != 1 or len(\n                        in_nodes3[1].outputs) != 1:\n                    is_prelu = False\n                    continue\n\n                in_nodes4 = [\n                    self.graph.get_node(in_name)\n                    for in_name in in_nodes3[1].inputs\n                ]\n                if in_nodes4[0].layer_name != in_nodes1.layer_name or in_nodes4[\n                        1].layer_type != ""Abs"":\n                    is_prelu = False\n                    continue\n                if len(in_nodes4[1].outputs) != 1:\n                    is_prelu = False\n                    continue\n\n                in_nodes5 = self.graph.get_node(in_nodes4[1].inputs[0])\n                if in_nodes5.layer_name != in_nodes1.layer_name:\n                    is_prelu = False\n                    continue\n\n                if len(in_nodes0[0].outputs) != 1:\n                    is_prelu = false\n                    continue\n                if len(in_nodes0[1].outputs) != 1:\n                    is_prelu = False\n                    continue\n                if len(in_nodes1.outputs) < 3:\n                    is_prelu = False\n                    continue\n                if len(in_nodes2[0].outputs) != 1:\n                    is_prelu = false\n                    continue\n                if len(in_nodes2[1].outputs) != 1:\n                    is_prelu = False\n                    continue\n                if len(in_nodes3[0].outputs) != 1:\n                    is_prelu = False\n                    continue\n                if len(in_nodes3[1].outputs) != 1:\n                    is_prelu = false\n                    continue\n                if len(in_nodes4[1].outputs) != 1:\n                    is_prelu = False\n                    continue\n\n                mode = None\n                in_shape = in_nodes1.out_shapes[0]\n                if in_shape == list(in_nodes3[0].value.shape):\n                    mode = ""element""\n                elif len(in_nodes3[0].value.shape) == 0:\n                    mode = ""all""\n                elif len(in_nodes3[0].value.shape\n                         ) == 1 and in_nodes3[0].value.shape[0] == 1:\n                    mode = ""all""\n                elif len(in_shape) == 4 and len(\n                        in_nodes3[0].value.shape\n                ) == 1 and in_nodes3[0].value.shape[0] == in_shape[-1]:\n                    mode = ""channel""\n                    weight = self.op_mapper.weights[in_nodes3[0].layer_name]\n                    weight = numpy.expand_dims(weight, 0)\n                    weight = numpy.expand_dims(weight, 2)\n                    weight = numpy.expand_dims(weight, 3)\n                    self.op_mapper.weights[in_nodes3[0].layer_name] = weight\n                    in_nodes3[0].fluid_code.layers[0].param_attr[""shape""] = [\n                        1, in_shape[-1], 1, 1\n                    ]\n                else:\n                    is_prelu = False\n                    continue\n\n                if is_prelu:\n                    index = in_nodes1.outputs.index(in_nodes0[0].layer_name)\n                    del in_nodes1.outputs[index]\n                    index = in_nodes1.outputs.index(in_nodes3[1].layer_name)\n                    del in_nodes1.outputs[index]\n                    index = in_nodes1.outputs.index(in_nodes4[1].layer_name)\n                    del in_nodes1.outputs[index]\n                    in_nodes1.outputs.append(node.layer_name)\n\n                    node.layer_type = ""Prelu""\n                    node.inputs = [in_nodes1.layer_name]\n                    act = node.fluid_code.layers[-1].param_attr.get(""act"", None)\n                    node.fluid_code.clear()\n                    attr = {\n                        ""mode"": string(mode),\n                        ""param_attr"": string(in_nodes3[0].layer_name)\n                    }\n\n                    node.fluid_code.add_layer(\n                        ""prelu"",\n                        inputs=in_nodes1.fluid_code.layers[-1].output,\n                        output=node,\n                        param_attr=attr)\n                del self.graph.node_map[in_nodes0[0].layer_name]\n                del self.graph.node_map[in_nodes0[1].layer_name]\n                del self.graph.node_map[in_nodes2[0].layer_name]\n                del self.graph.node_map[in_nodes2[1].layer_name]\n                del self.graph.node_map[in_nodes3[1].layer_name]\n                del self.graph.node_map[in_nodes4[1].layer_name]\n\n    def merge_scale(self):\n        for i, name in enumerate(self.graph.topo_sort):\n            node = self.graph.get_node(name)\n            if node is None:\n                continue\n            is_scale = True\n            if node.layer_type == ""Sub"":\n                in_nodes0 = [\n                    self.graph.get_node(in_name) for in_name in node.inputs\n                ]\n                if in_nodes0[0].layer_type != ""Mul"" or in_nodes0[\n                        1].layer_type != ""Const"" or in_nodes0[1].value.size != 1:\n                    is_scale = False\n                    continue\n                if exist_act(in_nodes0[0]):\n                    is_scale = False\n                    continue\n                if len(in_nodes0[0].outputs) != 1 or len(\n                        in_nodes0[1].outputs) != 1:\n                    is_scale = False\n                    continue\n\n                in_nodes1 = [\n                    self.graph.get_node(in_name)\n                    for in_name in in_nodes0[0].inputs\n                ]\n                if in_nodes1[0].layer_type != ""Const"" or in_nodes1[\n                        1].layer_type != ""RealDiv"" or in_nodes1[\n                            0].value.size != 1:\n                    is_scale = False\n                    continue\n                if exist_act(in_nodes1[1]):\n                    is_scale = False\n                    continue\n                if len(in_nodes1[0].outputs) != 1 or len(\n                        in_nodes1[1].outputs) != 1:\n                    is_scale = False\n                    continue\n\n                in_nodes2 = [\n                    self.graph.get_node(in_name)\n                    for in_name in in_nodes1[1].inputs\n                ]\n                if in_nodes2[1].layer_type != ""Const"" or in_nodes2[\n                        1].value.size != 1:\n                    is_scale = False\n                    continue\n\n                if is_scale:\n                    in_node = self.graph.get_node(in_nodes1[1].inputs[0])\n                    index = in_node.outputs.index(in_nodes1[1].layer_name)\n                    in_node.outputs[index] = node.layer_name\n                    node.layer_type = ""Scale""\n                    node.inputs = [in_node.layer_name]\n                    scale = 1.0 / in_nodes2[1].value * in_nodes1[0].value\n                    act = None\n                    if node.fluid_code.layers[0].param_attr is not None:\n                        act = node.fluid_code.layers[0].param_attr.get(\n                            ""act"", None)\n                    node.fluid_code.clear()\n\n                    attr = {\n                        ""scale"": scale,\n                        ""bias"": in_nodes0[1].value,\n                        ""bias_after_scale"": True,\n                        ""act"": act\n                    }\n                    node.fluid_code.add_layer(""scale"",\n                                              inputs=in_node,\n                                              output=node,\n                                              param_attr=attr)\n\n                    del self.graph.node_map[in_nodes0[0].layer_name]\n                    del self.graph.node_map[in_nodes0[1].layer_name]\n                    del self.graph.node_map[in_nodes1[0].layer_name]\n                    del self.graph.node_map[in_nodes1[1].layer_name]\n                    del self.graph.node_map[in_nodes2[1].layer_name]\n\n    def merge_affine_channel(self):\n        for i, name in enumerate(self.graph.topo_sort):\n            node = self.graph.get_node(name)\n            if node is None:\n                continue\n            is_affine_channel = True\n            if node.layer_type == ""RealDiv"":\n                in_nodes0 = [\n                    self.graph.get_node(in_name) for in_name in node.inputs\n                ]\n                bias_add = True\n                if (in_nodes0[0].layer_type != ""Sub"" and in_nodes0[0].layer_type\n                        != ""Add"") or in_nodes0[1].layer_type != ""Const"" or len(\n                            in_nodes0[1].value.shape) != 3:\n                    is_affine_channel = False\n                    continue\n                if in_nodes0[0].layer_type == ""Sub"":\n                    bias_add = False\n                if exist_act(in_nodes0[0]):\n                    is_affine_channel = False\n                    continue\n                if len(in_nodes0[0].outputs) != 1 or len(\n                        in_nodes0[1].outputs) != 1:\n                    is_affine_channel = False\n                    continue\n                in_nodes1 = [\n                    self.graph.get_node(in_name)\n                    for in_name in in_nodes0[0].inputs\n                ]\n                if len(in_nodes1[0].out_shapes[0]\n                       ) != 4 or in_nodes1[1].layer_type != ""Const"" or len(\n                           in_nodes1[1].value.shape) != 3:\n                    is_affine_channel = False\n                    continue\n                if len(in_nodes1[1].outputs) != 1:\n                    is_affine_channel = False\n                    continue\n                channel = in_nodes1[0].out_shapes[0][-1]\n                if channel < 0 or channel != in_nodes0[\n                        1].value.size or channel != in_nodes1[1].value.size:\n                    is_affine_channel = False\n                    continue\n                if in_nodes0[1].out_shapes[0][-1] != in_nodes0[\n                        1].value.size or in_nodes1[1].out_shapes[0][\n                            -1] != in_nodes1[1].value.size:\n                    is_affine_channel = False\n                    continue\n                if is_affine_channel:\n                    in_node = in_nodes1[0]\n                    index = in_node.outputs.index(in_nodes0[0].layer_name)\n                    in_node.outputs[index] = node.layer_name\n                    node.layer_type = ""AffineChannel""\n                    node.inputs = [in_node.layer_name]\n                    scale = 1.0 / in_nodes0[1].value.flatten()\n                    bias = in_nodes1[1].value.flatten(\n                    ) / in_nodes0[1].value.flatten()\n                    if not bias_add:\n                        bias *= -1.0\n                    self.op_mapper.weights[node.layer_name + ""_scale""] = scale\n                    self.op_mapper.weights[node.layer_name + ""_bias""] = bias\n\n                    act = None\n                    if node.fluid_code.layers[0].param_attr is not None:\n                        act = node.fluid_code.layers[0].param_attr.get(\n                            ""act"", None)\n                    node.fluid_code.clear()\n\n                    attr = {\n                        ""dtype"": string(scale.dtype),\n                        ""shape"": [channel],\n                        ""name"": string(node.layer_name + ""_scale"")\n                    }\n                    node.fluid_code.add_layer(""create_parameter"",\n                                              inputs=None,\n                                              output=node.layer_name + ""_scale"",\n                                              param_attr=attr)\n                    attr = {\n                        ""dtype"": string(scale.dtype),\n                        ""shape"": [channel],\n                        ""name"": string(node.layer_name + ""_bias"")\n                    }\n                    node.fluid_code.add_layer(""create_parameter"",\n                                              inputs=None,\n                                              output=node.layer_name + ""_bias"",\n                                              param_attr=attr)\n                    inputs = {\n                        ""x"": in_node,\n                        ""scale"": node.layer_name + ""_scale"",\n                        ""bias"": node.layer_name + ""_bias""\n                    }\n                    attr = {""act"": act}\n                    node.fluid_code.add_layer(""affine_channel"",\n                                              inputs=inputs,\n                                              output=node,\n                                              param_attr=attr)\n\n                    del self.graph.node_map[in_nodes0[0].layer_name]\n                    del self.graph.node_map[in_nodes0[1].layer_name]\n                    del self.graph.node_map[in_nodes1[1].layer_name]\n'"
x2paddle/tests/__init__.py,0,b''
x2paddle/op_mapper/caffe_custom_layer/__init__.py,0,"b'from .register import get_registered_layers\n\n#custom layer import begins\nfrom . import roipooling\nfrom . import priorbox\nfrom . import permute\nfrom . import detectionoutput\nfrom . import normalize\nfrom . import select\nfrom . import shufflechannel\nfrom . import convolutiondepthwise\nfrom . import axpy\n#custom layer import ends\n\ncustom_layers = get_registered_layers()\n\n\ndef set_args(f, params):\n    """""" set args for function \'f\' using the parameters in node.layer.param\n    Args:\n        f (function): a python function object\n        params (object): a object contains attributes needed by f\'s arguments\n    Returns:\n        arg_names (list): a list of argument names\n        kwargs (dict): a dict contains needed arguments\n    """"""\n    argc = f.__code__.co_argcount\n    arg_list = f.__code__.co_varnames[0:argc]\n    kwargs = {}\n    for arg_name in arg_list:\n        if hasattr(params, arg_name) and params is not None:\n            kwargs[arg_name] = getattr(params, arg_name)\n    return arg_list, kwargs\n\n\ndef has_layer(layer_type):\n    """""" test whether this layer exists in custom layer\n    """"""\n    return layer_type in custom_layers\n\n\ndef get_params(layer, layer_type):\n    import re\n    if layer_type.lower() == ""deconvolution"" or layer_type.lower(\n    ) == ""convolutiondepthwise"":\n        param_name = \'_\'.join((\'convolution\', \'param\'))\n    elif layer_type.lower() == ""normalize"":\n        param_name = \'_\'.join((\'norm\', \'param\'))\n    elif len(layer_type) - len(re.sub(""[A-Z]"", """", layer_type)) >= 2:\n        s = \'\'\n        tmp_name = \'\'\n        for i, ch in enumerate(layer_type):\n            if i == 0:\n                s += ch.lower()\n                continue\n            elif ch.isupper() and layer_type[i - 1].islower():\n                tmp_name += (s + \'_\')\n                s = \'\'\n            s += ch.lower()\n        tmp_name += s\n        param_name = \'_\'.join((tmp_name, \'param\'))\n    else:\n        param_name = \'_\'.join((layer_type.lower(), \'param\'))\n    return getattr(layer, param_name, None)\n\n\ndef compute_output_shape(node):\n    """""" compute the output shape of custom layer\n    """"""\n    layer_type = node.layer_type\n    assert layer_type in custom_layers, ""layer[%s] not exist in custom layers"" % (\n        layer_type)\n    shape_func = custom_layers[layer_type][\'shape\']\n    layer = node.layer\n    params = get_params(layer, layer_type)\n    arg_names, kwargs = set_args(shape_func, params)\n    input_shape = node.input_shape\n    return shape_func(input_shape, **kwargs)\n\n\ndef make_custom_layer(node):\n    """""" get the code which implement the custom layer function\n    """"""\n    layer_type = node.layer_type\n    assert layer_type in custom_layers, ""layer[%s] not exist in custom layers"" % (\n        layer_type)\n    layer_func = custom_layers[layer_type][\'layer\']\n    import inspect\n    return inspect.getsource(layer_func), layer_func\n\n\ndef deal_weights(node, data=None):\n    """""" deal the weights of the custom layer\n    """"""\n    layer_type = node.layer_type\n    weights_func = custom_layers[layer_type][\'weights\']\n    name = node.layer_name\n    return weights_func(name, data)\n'"
x2paddle/op_mapper/caffe_custom_layer/axpy.py,0,"b'from .register import register\nfrom x2paddle.core.util import *\n\n\ndef axpy_shape(input_shape):\n    assert len(input_shapes) == 3, ""not valid input shape for axpy layer""\n    assert len(input_shapes[0]) == len(input_shapes[1]), \'should have same dims\'\n    output_shape = input_shapes[1]\n    assert (input_shapes[2] == output_shape),\\\n            ""shape not consistent for axpy[%s <--> %s]"" \\\n            % (str(output_shape), str(input_shapes[2]))\n    return [output_shape]\n\n\ndef axpy_layer(inputs, input_shape=None, name=None):\n    alpha = inputs[0]\n    x = inputs[1]\n    y = inputs[2]\n    out = fluid.layers.elementwise_mul(x, alpha, axis=0)\n    out = fluid.layers.elementwise_add(out, y, name=name)\n    print(out)\n\n\ndef axpy_weights(name, data=None):\n    weights_name = []\n    return weights_name\n\n\nregister(kind=\'Axpy\', shape=axpy_shape, layer=axpy_layer, weights=axpy_weights)\n'"
x2paddle/op_mapper/caffe_custom_layer/convolutiondepthwise.py,0,"b'from .register import register\nfrom x2paddle.core.util import *\nimport numbers\n\n\ndef convolutiondepthwise_shape(input_shape,\n                               num_output=None,\n                               pad=None,\n                               kernel_size=None,\n                               stride=None,\n                               dilation=None,\n                               pad_h=None,\n                               pad_w=None,\n                               kernel_h=None,\n                               kernel_w=None,\n                               stride_h=None,\n                               stride_w=None):\n    [k_h, k_w] = [1, 1]\n    if isinstance(kernel_size, numbers.Number):\n        [k_h, k_w] = [kernel_size] * 2\n    elif len(kernel_size) > 0:\n        k_h = kernel_h if kernel_h > 0 else kernel_size[0]\n        k_w = kernel_w if kernel_w > 0 else kernel_size[len(kernel_size) - 1]\n    elif kernel_h > 0 or kernel_w > 0:\n        k_h = kernel_h\n        k_w = kernel_w\n    [s_h, s_w] = [1, 1]\n    if isinstance(stride, numbers.Number):\n        [s_h, s_w] = [stride] * 2\n    elif len(stride) > 0:\n        s_h = stride_h if stride_h > 0 else stride[0]\n        s_w = stride_w if stride_w > 0 else stride[len(stride) - 1]\n    elif stride_h > 0 or stride_w > 0:\n        s_h = stride_h\n        s_w = stride_w\n    [p_h, p_w] = [0, 0]\n    if isinstance(pad, numbers.Number):\n        [p_h, p_w] = [pad] * 2\n    elif len(pad) > 0:\n        p_h = pad_h if pad_h > 0 else pad[0]\n        p_w = pad_w if pad_w > 0 else pad[len(pad) - 1]\n    elif pad_h > 0 or pad_w > 0:\n        p_h = pad_h\n        p_w = pad_w\n    dila_len = len(dilation)\n    dila_h = 1\n    dila_w = 1\n    if dila_len == 2:\n        dila_h = dilation[0]\n        dila_w = dilation[1]\n    elif dila_len == 1:\n        dila_h = dila_w = dilation[0]\n    else:\n        assert dila_len == 0, ""invalid length[%s] of dilation in convolution"" % (\n            dila_len)\n    i_w = input_shape[0][2]\n    i_h = input_shape[0][3]\n    o_h = (i_h + 2 * p_h - (dila_h * (k_h - 1) + 1)) / float(s_h) + 1\n    o_w = (i_w + 2 * p_w - (dila_w * (k_w - 1) + 1)) / float(s_w) + 1\n    import math\n    o_h = int(math.floor(o_h))\n    o_w = int(math.floor(o_w))\n    c = num_output if num_output is not None else input_shape[0][1]\n    return [[input_shape[0][0], c, o_h, o_w]]\n\n\ndef convolutiondepthwise_layer(inputs,\n                               num_output=None,\n                               pad=None,\n                               kernel_size=None,\n                               stride=None,\n                               dilation=None,\n                               pad_h=None,\n                               pad_w=None,\n                               kernel_h=None,\n                               kernel_w=None,\n                               stride_h=None,\n                               stride_w=None,\n                               input_shape=None,\n                               name=None):\n    import numbers\n    [k_h, k_w] = [1, 1]\n    if isinstance(kernel_size, numbers.Number):\n        [k_h, k_w] = [kernel_size] * 2\n    elif len(kernel_size) > 0:\n        k_h = kernel_h if kernel_h > 0 else kernel_size[0]\n        k_w = kernel_w if kernel_w > 0 else kernel_size[len(kernel_size) - 1]\n    elif kernel_h > 0 or kernel_w > 0:\n        k_h = kernel_h\n        k_w = kernel_w\n    [s_h, s_w] = [1, 1]\n    if isinstance(stride, numbers.Number):\n        [s_h, s_w] = [stride] * 2\n    elif len(stride) > 0:\n        s_h = stride_h if stride_h > 0 else stride[0]\n        s_w = stride_w if stride_w > 0 else stride[len(stride) - 1]\n    elif stride_h > 0 or stride_w > 0:\n        s_h = stride_h\n        s_w = stride_w\n    [p_h, p_w] = [0, 0]\n    if isinstance(pad, numbers.Number):\n        [p_h, p_w] = [pad] * 2\n    elif len(pad) > 0:\n        p_h = pad_h if pad_h > 0 else pad[0]\n        p_w = pad_w if pad_w > 0 else pad[len(pad) - 1]\n    elif pad_h > 0 or pad_w > 0:\n        p_h = pad_h\n        p_w = pad_w\n    input = inputs[0]\n    dila_len = len(dilation)\n    dila_h = 1\n    dila_w = 1\n    if dila_len == 2:\n        dila_h = dilation[0]\n        dila_w = dilation[1]\n    elif dila_len == 1:\n        dila_h = dila_w = dilation[0]\n    else:\n        assert dila_len == 0, ""invalid length[%s] of dilation in convolution"" % (\n            dila_len)\n    c_in = input_shape[0][1]\n    c_out = num_output if num_output is not None else input_shape[0][1]\n    group = int(c_in / (c_in / c_out)) if c_in > c_out else int(c_in /\n                                                                (c_out / c_in))\n    out = fluid.layers.conv2d(input,\n                              dilation=[dila_h, dila_w],\n                              filter_size=[k_h, k_w],\n                              stride=[s_h, s_w],\n                              padding=[p_h, p_w],\n                              groups=group,\n                              num_filters=c_out,\n                              param_attr=name + \'_weights\',\n                              bias_attr=name + \'_bias\',\n                              name=name)\n    return out\n\n\ndef convolutiondepthwise_weights(name, data=None):\n    weights_name = []\n    weights_name.append(name + \'_weights\')\n    weights_name.append(name + \'_bias\')\n    return weights_name\n\n\nregister(kind=\'ConvolutionDepthwise\',\n         shape=convolutiondepthwise_shape,\n         layer=convolutiondepthwise_layer,\n         weights=convolutiondepthwise_weights)\n'"
x2paddle/op_mapper/caffe_custom_layer/detectionoutput.py,0,"b'from .register import register\nfrom x2paddle.core.util import *\n\n\ndef detectionoutput_shape(input_shape):\n    return [[-1, 6]]\n\n\ndef detectionoutput_layer(inputs,\n                          nms_param=None,\n                          background_label_id=0,\n                          share_location=True,\n                          keep_top_k=100,\n                          confidence_threshold=0.1,\n                          input_shape=None,\n                          name=None):\n    nms_param_str = nms_param\n    nms_param = {}\n    part = nms_param_str.split(\',\')\n    for s in part:\n        if s == \'\':\n            break\n        else:\n            name, obj = s.split(\': \')\n            if name == \'top_k\':\n                nms_param[name] = int(obj)\n            else:\n                nms_param[name] = float(obj)\n    if nms_param is None:\n        nms_param = {""nms_threshold"": 0.3, ""top_k"": 10, ""eta"": 1.0}\n    mbox_conf_flatten = inputs[1]\n    mbox_priorbox = inputs[2]\n    mbox_priorbox_list = fluid.layers.split(mbox_priorbox, 2, dim=1)\n    pb = mbox_priorbox_list[0]\n    pbv = mbox_priorbox_list[1]\n    pb = fluid.layers.reshape(x=pb, shape=[-1, 4])\n    pbv = fluid.layers.reshape(x=pbv, shape=[-1, 4])\n    mbox_loc = inputs[0]\n    mbox_loc = fluid.layers.reshape(x=mbox_loc, shape=[-1, pb.shape[0], 4])\n    mbox_conf_flatten = fluid.layers.reshape(x=mbox_conf_flatten,\n                                             shape=[0, pb.shape[0], -1])\n\n    default = {""nms_threshold"": 0.3, ""top_k"": 10, ""eta"": 1.0}\n    fields = [\'eta\', \'top_k\', \'nms_threshold\']\n    for f in default.keys():\n        if f not in nms_param:\n            nms_param[f] = default[f]\n    out = fluid.layers.detection_output(\n        scores=mbox_conf_flatten,\n        loc=mbox_loc,\n        prior_box=pb,\n        prior_box_var=pbv,\n        background_label=background_label_id,\n        nms_threshold=nms_param[""nms_threshold""],\n        nms_top_k=nms_param[""top_k""],\n        keep_top_k=keep_top_k,\n        score_threshold=confidence_threshold,\n        nms_eta=nms_param[""eta""])\n    return out\n\n\ndef detectionoutput_weights(name, data=None):\n    weights_name = []\n    return weights_name\n\n\nregister(kind=\'DetectionOutput\',\n         shape=detectionoutput_shape,\n         layer=detectionoutput_layer,\n         weights=detectionoutput_weights)\n'"
x2paddle/op_mapper/caffe_custom_layer/normalize.py,0,"b'from .register import register\nfrom x2paddle.core.util import *\n\n\ndef normalize_shape(input_shape):\n    return input_shape\n\n\ndef normalize_layer(inputs,\n                    across_spatial=None,\n                    channel_shared=None,\n                    input_shape=None,\n                    name=None):\n    assert across_spatial == False, ""Only support across_spatial == False for Normalize""\n    input = inputs[0]\n    l2_norm = fluid.layers.l2_normalize(input, axis=1, name=name + \'_l2\')\n    scale_param = fluid.layers.create_parameter(\n        shape=[1] if channel_shared else [1, 1, 1, input_shape[0][1]],\n        dtype=input.dtype,\n        attr=name + \'_scale\')\n    scale_param = fluid.layers.reshape(x=scale_param, \\\n                  shape=[1] if channel_shared else [input_shape[0][1]])\n    out = fluid.layers.elementwise_mul(x=l2_norm,\n                                       y=scale_param,\n                                       axis=-1 if channel_shared else 1)\n    return out\n\n\ndef normalize_weights(name, data=None):\n    weights_name = [name + \'_scale\']\n    return weights_name\n\n\nregister(kind=\'Normalize\',\n         shape=normalize_shape,\n         layer=normalize_layer,\n         weights=normalize_weights)\n'"
x2paddle/op_mapper/caffe_custom_layer/permute.py,0,"b'from .register import register\nfrom x2paddle.core.util import *\n\n\ndef permute_shape(input_shape, order=None):\n    inshape = input_shape[0]\n    output_shape = []\n    for ii in order:\n        assert ii < len(inshape), ""invalid order for permute[%s]"" % (name)\n        output_shape.append(inshape[ii])\n    return [output_shape]\n\n\ndef permute_layer(inputs, order=None, input_shape=None, name=None):\n    input = inputs[0]\n    order = list(order)\n    out = fluid.layers.transpose(input, perm=order, name=name)\n    return out\n\n\ndef permute_weights(name, data=None):\n    weights_name = []\n    return weights_name\n\n\nregister(kind=\'Permute\',\n         shape=permute_shape,\n         layer=permute_layer,\n         weights=permute_weights)\n'"
x2paddle/op_mapper/caffe_custom_layer/priorbox.py,0,"b""from .register import register\nfrom x2paddle.core.util import *\n\n\ndef priorbox_shape(input_shape, max_size=None, aspect_ratio=None):\n    fc_shape = input_shape[0]\n    N = 1\n    if not max_size == None:\n        N += 1\n    if not aspect_ratio == None:\n        N += 2 * len(aspect_ratio)\n    N_bbx = fc_shape[2] * fc_shape[3] * N\n    output_shape = [1, 2, 4 * N_bbx]\n    return [output_shape]\n\n\ndef priorbox_layer(inputs,\n                   step=0.0,\n                   offset=0.5,\n                   min_size=None,\n                   max_size=[],\n                   aspect_ratio=[1.0],\n                   flip=False,\n                   clip=False,\n                   variance=[0.1, 0.1, 0.2, 0.2],\n                   input_shape=None,\n                   name=None):\n    input = inputs[0]\n    image = inputs[1]\n    steps = tuple(step) if type(step) is list or type(step) is tuple else (step,\n                                                                           step)\n\n    box, variance_ = fluid.layers.prior_box(input,\n                                            image,\n                                            min_sizes=min_size,\n                                            max_sizes=max_size,\n                                            aspect_ratios=aspect_ratio,\n                                            variance=variance,\n                                            flip=flip,\n                                            clip=clip,\n                                            steps=steps,\n                                            offset=offset,\n                                            name=name,\n                                            min_max_aspect_ratios_order=True)\n    box = fluid.layers.reshape(box, [1, 1, -1])\n    variance_ = fluid.layers.reshape(variance_, [1, 1, -1])\n    out = fluid.layers.concat([box, variance_], axis=1)\n    return out\n\n\ndef priorbox_weights(name, data=None):\n    weights_name = []\n    return weights_name\n\n\nregister(kind='PriorBox',\n         shape=priorbox_shape,\n         layer=priorbox_layer,\n         weights=priorbox_weights)\n"""
x2paddle/op_mapper/caffe_custom_layer/register.py,0,"b'"""""" this module provides \'register\' for registering customized layers\n""""""\n\ng_custom_layers = {}\n\n\ndef register(kind, shape, layer, weights):\n    """""" register a custom layer or a list of custom layers\n\n    Args:\n        @kind (str or list): type name of the layer\n        @shape (function): a function to generate the shape of layer\'s output\n        @layer (function): a function to generate the paddle code of layer\n        @weights (function): a function to deal with weights data\n\n    Returns:\n        None\n    """"""\n    assert type(shape).__name__ == \'function\', \'shape should be a function\'\n    assert type(layer).__name__ == \'function\', \'layer should be a function\'\n\n    if type(kind) is str:\n        kind = [kind]\n    else:\n        assert type(\n            kind\n        ) is list, \'invalid param ""kind"" for register, not a list or str\'\n\n    for k in kind:\n        assert type(\n            k) is str, \'invalid param ""kind"" for register, not a list of str\'\n        assert k not in g_custom_layers, \'this type[%s] has already been registered\' % (\n            k)\n        g_custom_layers[k] = {\n            \'shape\': shape,\n            \'layer\': layer,\n            \'weights\': weights\n        }\n\n\ndef get_registered_layers():\n    return g_custom_layers\n'"
x2paddle/op_mapper/caffe_custom_layer/roipooling.py,0,"b""from .register import register\nfrom x2paddle.core.util import *\n\n\ndef roipooling_shape(input_shape, pooled_w=None, pooled_h=None):\n    base_fea_shape = input_shapes[0]\n    rois_shape = input_shapes[1]\n    output_shape = base_fea_shape\n    output_shape[0] = rois_shape[0]\n    output_shape[2] = pooled_h\n    output_shape[3] = pooled_w\n    return [output_shape]\n\n\ndef roipooling_layer(inputs,\n                     pooled_w=None,\n                     pooled_h=None,\n                     spatial_scale=None,\n                     input_shape=None,\n                     name=None):\n    input = inputs[0]\n    roi = inputs[1]\n    roi = fluid.layers.slice(roi, axes=[1], starts=[1], ends=[5])\n    out = fluid.layers.roi_pool(input,\n                                roi,\n                                pooled_height=pooled_h,\n                                pooled_width=pooled_w,\n                                spatial_scale=spatial_scale)\n    return out\n\n\ndef roipooling_weights(name, data=None):\n    weights_name = []\n    return weights_name\n\n\nregister(kind='ROIPooling',\n         shape=roipooling_shape,\n         layer=roipooling_layer,\n         weights=roipooling_weights)\n"""
x2paddle/op_mapper/caffe_custom_layer/select.py,0,"b'from .register import register\nfrom x2paddle.core.util import *\n\n\ndef select_shape(input_shape, axis=None, slice_point=None):\n    inshape = input_shape[0]\n    slice_point = slice_point\n    start = slice_point[0]\n    if len(slice_point) == 2:\n        end = slice_point[1]\n    else:\n        end = input_shape[axis]\n    assert end > start, ""invalid slice_point with [start:%d, end:%d]"" % (start,\n                                                                         end)\n    output_shape = input_shape\n    output_shape[axis] = end - start\n    return [output_shape]\n\n\ndef select_layer(inputs,\n                 axis=None,\n                 slice_point=None,\n                 input_shape=None,\n                 name=None):\n    input = inputs[0]\n    maxint32 = 2147483647\n    slice_point = [0] + slice_point\n    slice_point.append(maxint32)\n    i = 0\n    out = []\n    for i in range(len(slice_point)):\n        out.append(\n            fluid.layers.slice(input,\n                               axes=[axis],\n                               starts=[slice_point[i]],\n                               ends=[slice_point[i + 1]],\n                               name=name + \'_\' + str(i)))\n        if i == len(slice_point) - 2:\n            break\n    return out\n\n\ndef select_weights(name, data=None):\n    weights_name = []\n    return weights_name\n\n\nregister(kind=\'Select\',\n         shape=select_shape,\n         layer=select_layer,\n         weights=select_weights)\n'"
x2paddle/op_mapper/caffe_custom_layer/shufflechannel.py,0,"b""from .register import register\nfrom x2paddle.core.util import *\n\n\ndef shufflechannel_shape(input_shape):\n    return input_shape\n\n\ndef shufflechannel_layer(inputs, group=None, input_shape=None, name=None):\n    input = inputs[0]\n    out = fluid.layers.shuffle_channel(x=input, group=group)\n    return out\n\n\ndef shufflechannel_weights(name, data=None):\n    weights_name = []\n    return weights_name\n\n\nregister(kind='ShuffleChannel',\n         shape=shufflechannel_shape,\n         layer=shufflechannel_layer,\n         weights=shufflechannel_weights)\n"""
x2paddle/op_mapper/onnx_custom_layer/InstanceNormalization.py,0,"b'#   Copyright (c) 2019  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License""\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom .register import register\n\n\ndef InstanceNormalization_shape(input_shape):\n    return input_shape\n\n\ndef InstanceNormalization_layer(inputs, name=None):\n    # TODO(lvmengsi@baidu.com): Check the accuracy when using fluid.layers.layer_norm.\n    epsilon = 1e-5\n    input_ = inputs[0]\n    mean = fluid.layers.reduce_mean(input_, dim=[2, 3], keep_dim=True)\n    var = fluid.layers.reduce_mean(fluid.layers.square(input_ - mean),\n                                   dim=[2, 3],\n                                   keep_dim=True)\n    if name is not None:\n        scale_name = name + ""_scale""\n        offset_name = name + ""_offset""\n\n    scale_param = inputs[1]\n    offset_param = inputs[2]\n    scale = fluid.layers.create_parameter(name=scale_param.name,\n                                          shape=input_.shape[1:2],\n                                          dtype=""float32"")\n    offset = fluid.layers.create_parameter(name=offset_param.name,\n                                           shape=input_.shape[1:2],\n                                           dtype=""float32"")\n\n    tmp = fluid.layers.elementwise_mul(x=(input_ - mean), y=scale, axis=1)\n    tmp = tmp / fluid.layers.sqrt(var + epsilon)\n    tmp = fluid.layers.elementwise_add(tmp, offset, axis=1)\n    return tmp\n\n\ndef InstanceNormalization_weights(name, data=None):\n    weights_name = [name + \'_scale\']\n    return weights_name\n\n\nregister(kind=\'InstanceNormalization\',\n         shape=InstanceNormalization_shape,\n         layer=InstanceNormalization_layer,\n         child_func=None,\n         weights=InstanceNormalization_weights)\n'"
x2paddle/op_mapper/onnx_custom_layer/__init__.py,0,"b'#   Copyright (c) 2019  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License""\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom .register import get_registered_layers\n#custom layer import begins\n\nfrom . import InstanceNormalization\n#custom layer import ends\n\ncustom_layers = get_registered_layers()\n\n\ndef set_args(f, params):\n    """""" set args for function \'f\' using the parameters in node.layer.param\n    Args:\n        f (function): a python function object\n        params (object): a object contains attributes needed by f\'s arguments\n    Returns:\n        arg_names (list): a list of argument names\n        kwargs (dict): a dict contains needed arguments\n    """"""\n    argc = f.__code__.co_argcount\n    arg_list = f.__code__.co_varnames[0:argc]\n    kwargs = {}\n    for arg_name in arg_list:\n        if hasattr(params, arg_name) and params is not None:\n            kwargs[arg_name] = getattr(params, arg_name)\n    return arg_list, kwargs\n\n\ndef has_layer(layer_type):\n    """""" test whether this layer exists in custom layer\n    """"""\n    return layer_type in custom_layers\n\n\ndef get_params(layer, layer_type):\n    import re\n    if layer_type.lower() == ""deconvolution"" or layer_type.lower(\n    ) == ""convolutiondepthwise"":\n        param_name = \'_\'.join((\'convolution\', \'param\'))\n    elif layer_type.lower() == ""normalize"":\n        param_name = \'_\'.join((\'norm\', \'param\'))\n    elif len(layer_type) - len(re.sub(""[A-Z]"", """", layer_type)) >= 2:\n        s = \'\'\n        tmp_name = \'\'\n        for i, ch in enumerate(layer_type):\n            if i == 0:\n                s += ch.lower()\n                continue\n            elif ch.isupper() and layer_type[i - 1].islower():\n                tmp_name += (s + \'_\')\n                s = \'\'\n            s += ch.lower()\n        tmp_name += s\n        param_name = \'_\'.join((tmp_name, \'param\'))\n    else:\n        param_name = \'_\'.join((layer_type.lower(), \'param\'))\n    return getattr(layer, param_name, None)\n\n\ndef compute_output_shape(node):\n    """""" compute the output shape of custom layer\n    """"""\n    layer_type = node.layer_type\n    assert layer_type in custom_layers, ""layer[%s] not exist in custom layers"" % (\n        layer_type)\n    shape_func = custom_layers[layer_type][\'shape\']\n    layer = node.layer\n    params = get_params(layer, layer_type)\n    arg_names, kwargs = set_args(shape_func, params)\n    input_shape = node.input_shape\n    return shape_func(input_shape, **kwargs)\n\n\ndef make_custom_layer(node):\n    """""" get the code which implement the custom layer function\n    """"""\n    layer_type = node.layer_type\n    assert layer_type in custom_layers, ""layer[%s] not exist in custom layers"" % (\n        layer_type)\n    layer_func = custom_layers[layer_type][\'layer\']\n    import inspect\n    return inspect.getsource(layer_func), layer_func\n\n\ndef make_custom_child_func(node):\n    """""" get the code which implement the custom layer function\n    """"""\n    layer_type = node.layer_type\n    child_func = custom_layers[layer_type][\'child_func\']\n    if child_func is None:\n        return None, child_func\n    import inspect\n    return inspect.getsource(child_func), child_func\n\n\ndef deal_weights(node, data=None):\n    """""" deal the weights of the custom layer\n    """"""\n    layer_type = node.layer_type\n    weights_func = custom_layers[layer_type][\'weights\']\n    name = node.layer_name\n    return weights_func(name, data)\n'"
x2paddle/op_mapper/onnx_custom_layer/register.py,0,"b'#   Copyright (c) 2019  PaddlePaddle Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License""\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n"""""" this module provides \'register\' for registering customized layers\n""""""\n\ng_custom_layers = {}\n\n\ndef register(kind, shape, layer, child_func, weights):\n    """""" register a custom layer or a list of custom layers\n\n    Args:\n        @kind (str or list): type name of the layer\n        @shape (function): a function to generate the shape of layer\'s output\n        @layer (function): a function to generate the paddle code of layer\n        @weights (function): a function to deal with weights data\n\n    Returns:\n        None\n    """"""\n    assert type(shape).__name__ == \'function\', \'shape should be a function\'\n    assert type(layer).__name__ == \'function\', \'layer should be a function\'\n\n    if type(kind) is str:\n        kind = [kind]\n    else:\n        assert type(\n            kind\n        ) is list, \'invalid param ""kind"" for register, not a list or str\'\n\n    for k in kind:\n        assert type(\n            k) is str, \'invalid param ""kind"" for register, not a list of str\'\n        assert k not in g_custom_layers, \'this type[%s] has already been registered\' % (\n            k)\n        g_custom_layers[k] = {\n            \'shape\': shape,\n            \'layer\': layer,\n            \'child_func\': child_func,\n            \'weights\': weights\n        }\n\n\ndef get_registered_layers():\n    return g_custom_layers\n'"
