file_path,api_count,code
tensorflow/configure.py,4,"b'import tensorflow as tf\nimport sys\n\nif \'__cxx11_abi_flag__\' not in dir(tf):\n    print(""Cannot find the ABI version of TensorFlow."")\n    print(""Your TensorFlow version is too old. Please upgrade to at least TF v1.4."")\n    sys.exit(1)\n\nwith open(""tensorflow_config.txt"", ""w"") as f:\n    print(""TensorFlow_ABI: {}"".format(tf.__cxx11_abi_flag__))\n    f.write(""set(TensorFlow_ABI %i)\\n"" % tf.__cxx11_abi_flag__)\n    print(""TensorFlow_INCLUDE_DIRS: {}"".format(tf.sysconfig.get_include()))\n    f.write(""set(TensorFlow_INCLUDE_DIRS \\""%s\\"")\\n"" % tf.sysconfig.get_include())\n\n'"
tensorflow/problem.py,12,"b'import tensorflow as tf\nimport numpy as np\n\n\nx = tf.placeholder(tf.float32, shape=[1, 2], name=\'input\')\nA = tf.get_variable(\'A\', dtype=tf.float32, initializer=[[2., 1], [3, 4]], trainable=False)\nb = tf.get_variable(\'b\', dtype=tf.float32, initializer=[[1., 1]], trainable=False)\nc = tf.get_variable(\'c\', dtype=tf.float32, initializer=[42.], trainable=False)\n\ny = tf.matmul(x, tf.matmul(A, x, transpose_b=True)) + tf.matmul(x, b, transpose_b=True) + c\ndx = tf.gradients(y, x)[0]\n\ny = tf.identity(y, name=\'problem_objective\')\ndx = tf.identity(dx, name=\'problem_gradient\')\n\n# just an example\nval = np.array([[1, 1]], dtype=np.float32)\n\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n\n    print sess.run(y, {x: val})\n    print sess.run(dx, {x: val})\n\n    saver = tf.train.Saver(tf.global_variables())\n    saver.save(sess, \'/tmp/my_problem/my_problem\')\n\n    tf.train.write_graph(sess.graph, \'/tmp/my_problem\', ""graph.pb"", as_text=False)\n'"
tensorflow/solve.py,8,"b'import tensorflow as tf\n\nx = tf.get_variable(\'x\', dtype=tf.float32, initializer=[[10., 1]], trainable=True)\nx = tf.identity(x)\n\nwith tf.Session() as sess:\n\n    # load the computation graph\n    loader = tf.train.import_meta_graph(\'/tmp/my_problem/my_problem.meta\', input_map={""input:0"": x})\n    loader = loader.restore(sess, \'/tmp/my_problem/my_problem\')\n\n    y = tf.get_default_graph().get_tensor_by_name(\'problem_objective:0\')\n\n    # opt = tf.train.GradientDescentOptimizer(0.001).minimize(y)\n    opt = tf.train.AdamOptimizer(0.01).minimize(y)\n    sess.run(tf.global_variables_initializer())\n\n\n    for i in range(10000):\n        l, _ = sess.run([y, opt])\n\n    print sess.run(y)\n    print sess.run(x)'"
