file_path,api_count,code
系统代码(code)/main.py,1,"b'# \xe6\xad\xa4\xe6\x96\x87\xe4\xbb\xb6\xe5\x92\x8ctest.py\xe6\x96\x87\xe4\xbb\xb6\xe7\xb1\xbb\xe4\xbc\xbc\xef\xbc\x8c\xe4\xb8\x8d\xe8\xbf\x87\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x9c\x8b\xe5\x88\xb0\xe6\x9b\xb4\xe8\xaf\xa6\xe7\xbb\x86\xe4\xb8\xad\xe9\x97\xb4\xe8\xbe\x93\xe5\x87\xba\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x94\xa8\xe6\x9d\xa5\xe8\xb0\x83\xe8\xaf\x95\n\n\nfrom tools.image_input import read_img_file\nimport tensorflow as tf\nfrom tools.cnn_model import cnn_model_fn\nfrom tools.cnn_model import cnn_symbol_classifier\nfrom tools import normalize_matrix_value,get_spatial_relationship,\\\n    verify_spatial_relationship,get_candidates,sort_characters\nimport process\nfrom config import FILELIST\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom tools.img_preprocess import read_img_and_convert_to_binary,binary_img_segment\nimport cv2\nimport my_parser\nimport tools\nfrom calculator import *\n\n\n#test\noriginal_img, binary_img = read_img_and_convert_to_binary(\'./testImgs/easy +/3.jpg\')\n\nsymbols = binary_img_segment(binary_img,original_img)\nsymbols = process.detect_uncontinous_symbols(symbols,binary_img)\nlength = len(symbols)\ncolumn = length/3+1\nindex = 1\n# for symbol in symbols:\n#     # print(symbol)\n#     plt.subplot(column,3,index)\n#     plt.imshow(symbol[\'src_img\'], cmap=\'gray\')\n#     plt.title(index), plt.xticks([]), plt.yticks([])\n#     index += 1\n# temp_img = original_img[:, :, ::-1]\n# # cv2.imshow(\'img\',temp_img)\n# # cv2.waitKey(0)\n# # cv2.destroyAllWindows()\n# plt.subplot(column,3,index)\n# plt.imshow(temp_img, cmap = \'gray\', interpolation = \'bicubic\')\n# plt.title(index),plt.xticks([]), plt.yticks([])\n# plt.show()\n\nsymbols_to_be_predicted = normalize_matrix_value([x[\'src_img\'] for x in symbols])\n\npredict_input_fn = tf.estimator.inputs.numpy_input_fn(\n    x={""x"": np.array(symbols_to_be_predicted)},\n    shuffle=False)\n\npredictions = cnn_symbol_classifier.predict(input_fn=predict_input_fn)\nprint(predictions)\ncharacters = []\nfor i,p in enumerate(predictions):\n    # print(p[\'classes\'],FILELIST[p[\'classes\']])\n    candidates = get_candidates(p[\'probabilities\'])\n    characters.append({\'location\':symbols[i][\'location\'],\'candidates\':candidates})\n#print([x[\'location\'] for x in characters])\n# print(characters)\n\nsorted_characters = sort_characters(characters)\nprint(\'\xe6\x8e\x92\xe5\xba\x8f\xe5\x89\x8d\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe5\x88\x97\xe8\xa1\xa8\')\nprint(characters)\nprint(\'\xe6\x8e\x92\xe5\xba\x8f\xe5\x90\x8e\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe5\xba\x8f\xe5\x88\x97\')\nprint([[x[\'location\'],x[\'candidates\']] for x in sorted_characters])\ntokens = process.group_into_tokens(sorted_characters)\nprint(\'\xe8\xaf\x86\xe5\x88\xab\xe5\x87\xba\xe7\x9a\x84token\')\nprint(tokens)\n# \xe5\x85\x88\xe5\xb0\x86\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaatoken\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe6\x88\x90\xe4\xb8\x80\xe4\xb8\xaa\xe6\xa0\x91\xe8\x8a\x82\xe7\x82\xb9\xef\xbc\x8c\xe5\xbe\x97\xe5\x88\xb0\xe4\xb8\x80\xe4\xb8\xaa\xe8\x8a\x82\xe7\x82\xb9\xe5\x88\x97\xe8\xa1\xa8node_list\nnode_list = my_parser.characters_to_nodes(sorted_characters)\n\nparser_tree = my_parser.decompose(node_list)\nprint(parser_tree)\nlatex_str = post_order(parser_tree)\nprint(latex_str)\nprint(parser_tree[\'value\'])\n# parser_tree = my_parser.my_parser(sorted_characters)\n# for i in range(10):\n#     print()\n# print(\'\xe8\xaf\x86\xe5\x88\xab\xe7\x9a\x84\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f\xef\xbc\x9a\')\n# latex_str = tools.print_parser_tree(parser_tree,"""")\n# print()\n# value = calculate(parser_tree)\n# print(\'\xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x9a\',value)\n#\n# print(\'\xe8\xbd\xac\xe5\x8c\x96\xe6\x88\x90\xe7\x9a\x84latex\xe8\xaf\xad\xe5\x8f\xa5:\')\n#\nexpression_str = r\'$result:\'+latex_str+\'=\'+latex(parser_tree[\'value\'])+\'$\'\nprint(expression_str)\nimport os\nif not os.path.exists(\'./result\'):\n    os.mkdir(\'./result\')\nplt.text(0.1,0.9,expression_str,fontsize=20)\n\nplt.xticks([]),plt.yticks([])\nplt.savefig(\'./result/1.jpg\')\nplt.close()\n\n\n\n'"
系统代码(code)/test.py,0,"b""import solver\n\nsave_filename = solver.solve('./testImgs/easy +/3.jpg')\nprint('output path: ./static/'+save_filename+'.png')"""
系统代码(code)/welcome.py,0,"b'# from flask import Flask,url_for\n# application = Flask(__name__)\n#\n# @application.route(\'/\')\n# def hello_world():\n#     return \'Hello, World!\'\n#\n# with application.test_request_context():\n#     print url_for(\'static\', filename=\'1.png\')\n\nimport os\nfrom flask import Flask, request, redirect, url_for\nfrom werkzeug.utils import secure_filename\nfrom flask import send_from_directory\nimport time\nimport solver\n# from import application as applicationlication\n# from app import application\nUPLOAD_FOLDER = \'./static\'\nALLOWED_EXTENSIONS = set([\'png\', \'jpg\', \'jpeg\', \'gif\'])\n\n\napplication = Flask(__name__)\napplication.config[\'UPLOAD_FOLDER\'] = UPLOAD_FOLDER\napplication.config[\'MAX_CONTENT_LENGTH\'] = 16 * 1024 * 1024\n\ndef allowed_file(filename):\n    return \'.\' in filename and \\\n           filename.rsplit(\'.\', 1)[1] in ALLOWED_EXTENSIONS\n\n@application.route(\'/\', methods=[\'GET\', \'POST\'])\ndef upload_file():\n    if request.method == \'POST\':\n        file = request.files[\'file\']\n        if file and allowed_file(file.filename):\n            # filename = secure_filename(file.filename)\n            filename = str(int(time.time()))+\'.\'+file.filename.rsplit(\'.\', 1)[1]\n            # print(""filename="",filename)\n            save_file_path = os.path.join(application.config[\'UPLOAD_FOLDER\'], filename)\n            file.save(save_file_path)\n            result_file = solver.solve(save_file_path)\n            # return redirect(url_for(\'uploaded_file\',filename=filename))\n            # print(\'yessssssssssssss\')\n            return \'\'\'\n                    <!DOCTYPE html>\n                <html lang=""en"">\n                <head>\n                    <meta charset=""UTF-8"">\n                    <title>test</title>\n\n\n\n                <style>\n                body\n                {\n                    //background-color:RGB(0,255,0);\n                    background-image:url(\'static/background.png\');\n                    background-size:150%,200%;\n                    background-repeat:no-repeat;\n                    background-position:center,top;\n\n                }\n\n                .logo{\n                    //border-style:solid;\n                    //border-width:5px;\n                    margin: auto;\n                    text-align: center;\n                    margin-top:3%;\n                    color:white;\n\n                }\n                . content{\n                    text-align: center;\n                    margin-top:3%;\n                }\n                img {\n                    border-radius: 16px;\n                    max-height: 300%;\n                    max-width:300%;\n                    height: auto;\n                }\n                p{\n                    font-size:18px;\n                }\n                    div.img:hover {\n                    border: 1px solid #777;\n                }\n                div.img {\n                    margin: 5px;\n                    border: 1px solid #ccc;\n                    float: left;\n                    width: 700px;\n                }\n                div.img img {\n                    width: 100%;\n                    height: auto;\n                }\n\n                div.desc {\n                    padding: 15px;\n                    text-align: center;\n                    color:white;\n                    font-size:18px;\n                }\n                </style>\n\n                </head>\n                <body>\n\n                    <div class=""logo"" >\n                        <img src=""static/logo.png"" >\n                    </div>\n\n                    <div class=""logo"" ><form action="""" method=post enctype=multipart/form-data>\n              <p><input type=file name=file>\n                 <input type=submit value=Upload>\n            </form></div>\n\n\n            <div align=""center"">\n                <div  align=""left"">\n                <div class=""img"">\n                <a target=""_blank"" href=""\'\'\'+url_for(\'uploaded_file\',filename=filename)+\'\'\'"">\n                  <img src=""\'\'\'+url_for(\'uploaded_file\',filename=filename)+\'\'\'"" alt=""\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87"" width=""1000"" height=""800"">\n                </a>\n                <div class=""desc"">input image</div>\n                </div>\n                </div>\n\n                <div align=""right"">\n                <div class=""img"">\n                <a target=""_blank"" href=""assets/img/output.png"">\n                  <img src=""/uploads/\'\'\'+result_file+\'\'\'.png"" alt=""\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87"" width=""1000"" height=""800"">\n                </a>\n                <div class=""desc"">output image</div>\n                </div>\n                </div>\n                </div>\n\n\n\n                <div class=""logo"">\n                    <p>\xe8\xbf\x99\xe6\x98\xaf\xe6\x89\x8b\xe5\x86\x99\xe6\x95\xb0\xe5\xad\xa6\xe8\xae\xa1\xe7\xae\x97\xe9\xa2\x98\xe7\x9a\x84\xe8\xaf\x86\xe5\x88\xab\xe4\xb8\x8e\xe8\x87\xaa\xe5\x8a\xa8\xe6\xb1\x82\xe8\xa7\xa3\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84demo\xef\xbc\x8c\xe4\xb8\x8a\xe4\xbc\xa0\xe4\xb8\x80\xe5\xbc\xa0\xe5\x8c\x85\xe5\x90\xab\xe8\xae\xa1\xe7\xae\x97\xe9\xa2\x98\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\xef\xbc\x8c\xe8\xbe\x93\xe5\x87\xba\xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c\xe3\x80\x81\xe8\xae\xa1\xe7\xae\x97\xe8\xbf\x87\xe7\xa8\x8b\xe4\xbb\xa5\xe5\x8f\x8a\xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9c\xe3\x80\x82</p>\n                    <p>\xe7\x9b\xae\xe5\x89\x8d\xe8\x83\xbd\xe5\xa4\x9f\xe5\xa4\x84\xe7\x90\x86\xe7\xae\x97\xe6\x9c\xaf\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f\xe3\x80\x81\xe5\x88\x86\xe5\xbc\x8f\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f\xe3\x80\x81\xe4\xb9\x98\xe6\x96\xb9\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f\xe3\x80\x81\xe6\xa0\xb9\xe5\x8f\xb7\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f\xef\xbc\x8c\xe8\xbf\x98\xe6\x94\xaf\xe6\x8c\x81\xe4\xb8\x80\xe5\x85\x83\xe4\xba\x8c\xe6\xac\xa1\xe6\x96\xb9\xe7\xa8\x8b\xe6\xb1\x82\xe8\xa7\xa3\xe3\x80\x81\xe6\xb1\x82\xe5\xae\x9a\xe7\xa7\xaf\xe5\x88\x86\xe3\x80\x81\xe6\xb1\x82\xe5\xaf\xbc\xe3\x80\x81\xe6\xb1\x82\xe6\x9e\x81\xe9\x99\x90\xe3\x80\x82</p>\n                </div>\n                </body>\n                </html>\n\n                    \'\'\'\n\n    else:\n\n        return \'\'\'\n            <!DOCTYPE html>\n        <html lang=""en"">\n        <head>\n            <meta charset=""UTF-8"">\n            <title>test</title>\n\n\n          \n        <style>\n        body\n        {\n            //background-color:RGB(0,255,0);\n            background-image:url(\'static/background.png\');\n            background-size:150%,200%;\n            background-repeat:no-repeat;\n            background-position:center,top;\n\n        }\n\n        .logo{\n            //border-style:solid;\n            //border-width:5px;\n            margin: auto;\n            text-align: center;\n            margin-top:3%;\n            color:white;\n\n        }\n        . content{\n            text-align: center;\n            margin-top:3%;\n        }\n        img {\n            border-radius: 16px;\n            max-height: 300%;\n            max-width:300%;\n            height: auto;\n        }\n        p{\n            font-size:18px;\n        }\n            div.img:hover {\n            border: 1px solid #777;\n        }\n        div.img {\n            margin: 5px;\n            border: 1px solid #ccc;\n            float: left;\n            width: 700px;\n        }\n        div.img img {\n            width: 100%;\n            height: auto;\n        }\n\n        div.desc {\n            padding: 15px;\n            text-align: center;\n            color:white;\n            font-size:18px;\n        }\n        </style>\n\n        </head>\n        <body>\n\n            <div class=""logo"" >\n                <img src=""static/logo.png"" >\n            </div>\n\n            <div class=""logo"" ><form action="""" method=post enctype=multipart/form-data>\n      <p><input type=file name=file>\n         <input type=submit value=Upload>\n    </form></div>\n\n\n            \n\n\n\n        <div class=""logo"">\n                <p>\xe8\xbf\x99\xe6\x98\xaf\xe6\x89\x8b\xe5\x86\x99\xe6\x95\xb0\xe5\xad\xa6\xe8\xae\xa1\xe7\xae\x97\xe9\xa2\x98\xe7\x9a\x84\xe8\xaf\x86\xe5\x88\xab\xe4\xb8\x8e\xe8\x87\xaa\xe5\x8a\xa8\xe6\xb1\x82\xe8\xa7\xa3\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84demo\xef\xbc\x8c\xe4\xb8\x8a\xe4\xbc\xa0\xe4\xb8\x80\xe5\xbc\xa0\xe5\x8c\x85\xe5\x90\xab\xe8\xae\xa1\xe7\xae\x97\xe9\xa2\x98\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\xef\xbc\x8c\xe8\xbe\x93\xe5\x87\xba\xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c\xe3\x80\x81\xe8\xae\xa1\xe7\xae\x97\xe8\xbf\x87\xe7\xa8\x8b\xe4\xbb\xa5\xe5\x8f\x8a\xe8\xae\xa1\xe7\xae\x97\xe7\xbb\x93\xe6\x9e\x9c\xe3\x80\x82</p>\n                <p>\xe7\x9b\xae\xe5\x89\x8d\xe8\x83\xbd\xe5\xa4\x9f\xe5\xa4\x84\xe7\x90\x86\xe7\xae\x97\xe6\x9c\xaf\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f\xe3\x80\x81\xe5\x88\x86\xe5\xbc\x8f\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f\xe3\x80\x81\xe4\xb9\x98\xe6\x96\xb9\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f\xe3\x80\x81\xe6\xa0\xb9\xe5\x8f\xb7\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f\xef\xbc\x8c\xe8\xbf\x98\xe6\x94\xaf\xe6\x8c\x81\xe4\xb8\x80\xe5\x85\x83\xe4\xba\x8c\xe6\xac\xa1\xe6\x96\xb9\xe7\xa8\x8b\xe6\xb1\x82\xe8\xa7\xa3\xe3\x80\x81\xe6\xb1\x82\xe5\xae\x9a\xe7\xa7\xaf\xe5\x88\x86\xe3\x80\x81\xe6\xb1\x82\xe5\xaf\xbc\xe3\x80\x81\xe6\xb1\x82\xe6\x9e\x81\xe9\x99\x90\xe3\x80\x82</p>\n            </div>\n        </body>\n        </html>\n\n            \'\'\'\n\n\n\n@application.route(\'/uploads/<filename>\')\ndef uploaded_file(filename):\n    return send_from_directory(application.config[\'UPLOAD_FOLDER\'],filename)'"
系统代码(code)/calculator/__init__.py,0,"b""from config import *\nfrom sympy import *\n\n# \xe6\xa0\xb9\xe6\x8d\xae\xe4\xb8\x80\xe9\xa2\x97\xe8\xa7\xa3\xe6\x9e\x90\xe6\xa0\x91\xe8\xae\xa1\xe7\xae\x97\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f\xe7\x9a\x84\xe5\x80\xbc,\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe8\x8a\x82\xe7\x82\xb9\xe6\x9c\x89\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe8\xa1\x8c\xe4\xb8\xba\xef\xbc\x8c\xe5\x9b\xa0\xe6\xad\xa4\xe9\x9c\x80\xe8\xa6\x81\xe5\xaf\xb9\xe6\xaf\x8f\xe4\xb8\x80\xe7\xa7\x8d\xe8\x8a\x82\xe7\x82\xb9\xe7\xb1\xbb\xe5\x9e\x8b\xe5\xae\x9a\xe4\xb9\x89\xe5\xa4\x84\xe7\x90\x86\xe5\x8a\x9e\xe6\xb3\x95\n\ndef calculate(node):\n    value = 0\n    if isinstance(node,dict) and len(node):\n        child = node['structure']\n        if node['type']==NODE_TYPE['e']:\n            t = calculate(child[0])\n            if len(child)>1:\n                type,e_pi = calculate(child[1])\n                if type:\n                    return t-e_pi\n                return t+e_pi\n            return t\n        elif node['type']==NODE_TYPE['e_pi']:\n            if len(child)>0:\n                t = calculate(child[1])\n                type,e_pi = calculate(child[2])\n                if type == 0:\n                    result = t+e_pi\n                else:\n                    result = t-e_pi\n                if child[0]=='-':\n                    return 1,result\n                return 0,result\n            else:\n                return 0,0\n        elif node['type']==NODE_TYPE['t']:\n            f = calculate(child[0])\n            if len(child)>1:\n                type,t_pi = calculate(child[1])\n                if type == 0:\n                    return f*t_pi\n                else:\n                    return f/t_pi\n            return f\n        elif node['type']==NODE_TYPE['t_pi']:\n            if len(child)>0:\n                f = calculate(child[1])\n                type,t_pi = calculate(child[2])\n                if type==0:\n                    result = f*t_pi\n                else:\n                    result = f/t_pi\n                if child[0] == 'div':\n                    return 1,result\n                return 0,result\n            else:\n                return 0,1\n        elif node['type']==NODE_TYPE['bracket']:\n            return calculate(child[1])\n        elif node['type'] == NODE_TYPE['integer']:\n            return int(child)\n        elif node['type'] == NODE_TYPE['decimal']:\n            return float(child)\n    return value\n\n# \xe5\xae\x9a\xe4\xb9\x89\xe5\x8f\x98\xe9\x87\x8f\xe7\xac\xa6\xe5\x8f\xb7\xe8\xa1\xa8\xef\xbc\x8c\xe8\x87\xaa\xe5\x8a\xa8\xe6\xb1\x82\xe5\x80\xbc\xe6\x97\xb6\xe9\x9c\x80\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8\n# key\xe6\x98\xaf\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xef\xbc\x8cvalue\xe6\x98\xaf\xe4\xbd\xbf\xe7\x94\xa8\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe5\x88\x9b\xe5\xbb\xba\xe7\x9a\x84sympy\xe5\xaf\xb9\xe8\xb1\xa1\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\nvariable_table = {'x':x,'y':y,'z':z}\n\nforward_step = 1\n\ndef set_forward_step(steps):\n    global forward_step\n    forward_step = steps\n# \xe7\xae\x80\xe5\x8c\x96\xe8\x8a\x82\xe7\x82\xb9\xef\xbc\x8c\xe6\x89\x93\xe5\x8d\xb0\xe8\xae\xa1\xe7\xae\x97\xe8\xbf\x87\xe7\xa8\x8b\ndef simplify_node(node):\n    global forward_step\n\n    if node['status'] == STATUS['solved'] and forward_step > 0:\n        forward_step = forward_step - 1\n        node['structure'] = node['value']\n\n# \xe5\x90\x8e\xe5\xba\x8f\xe9\x81\x8d\xe5\x8e\x86\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f\xe6\xa0\x91\xef\xbc\x8c\xe8\x87\xaa\xe5\xba\x95\xe5\x90\x91\xe4\xb8\x8a\xe4\xbc\xa0\xe9\x80\x92\xe6\xa0\x91\xe8\x8a\x82\xe7\x82\xb9\xe7\x9a\x84\xe7\x8a\xb6\xe6\x80\x81\xe3\x80\x81\xe5\xb1\x9e\xe6\x80\xa7\xe3\x80\x81\xe5\x80\xbc\ndef post_order(node):\n    global variable_table,forward_step\n    latex_str = ''\n    # \xe8\x8b\xa5\xe8\xaf\xa5\xe8\x8a\x82\xe7\x82\xb9\xe4\xb8\x8d\xe7\xa9\xba\n    if isinstance(node, dict) and len(node):\n\n        child  = node['structure']\n        # \xe5\xaf\xb9\xe4\xba\x8e\xe4\xbb\xbb\xe6\x84\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe9\x9d\x9e\xe5\x8f\xb6\xe8\x8a\x82\xe7\x82\xb9\xef\xbc\x8c\xe9\x83\xbd\xe6\x98\xaf\xe5\x85\x88\xe9\x81\x8d\xe5\x8e\x86\xe5\x85\xb6\xe5\xad\x90\xe8\x8a\x82\xe7\x82\xb9\xef\xbc\x8c\xe5\x86\x8d\xe9\x81\x8d\xe5\x8e\x86\xe8\xaf\xa5\xe8\x8a\x82\xe7\x82\xb9\n        # \xe5\xaf\xb9\xe4\xba\x8e\xe4\xbb\xbb\xe6\x84\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\x8f\xb6\xe8\x8a\x82\xe7\x82\xb9\xef\xbc\x8c\xe7\x9b\xb4\xe6\x8e\xa5\xe6\xa0\xb9\xe6\x8d\xae\xe8\x8a\x82\xe7\x82\xb9\xe7\xb1\xbb\xe5\x9e\x8b\xe7\xa1\xae\xe5\xae\x9a\xe5\x85\xb6\xe8\x8a\x82\xe7\x82\xb9\xe7\x8a\xb6\xe6\x80\x81status\xe5\x92\x8c\xe5\x80\xbcvalue\n        if node['type'] == NODE_TYPE['constant']:\n            print('post_order constant')\n            node['status'] = STATUS['solved']\n            if node['structure'] == 'pi':\n                node['value'] = pi\n            elif node['structure'] == 'e':\n                node['value'] = E\n            latex_str = latex(node['value'])\n        elif node['type'] == NODE_TYPE['integer'] or node['type'] == NODE_TYPE['decimal']:\n            # print('post_order integer|decimal')\n            node['status'] = STATUS['solved']\n            # node['attribute'] = ATTRIBUTE['constant']\n            if node['type'] == NODE_TYPE['integer']:\n                node['value'] = int(node['structure'])\n            else:\n                node['value'] = float(node['structure'])\n            latex_str = str(node['value'])\n        elif node['type'] == NODE_TYPE['variable']:\n            # print('post_order variable')\n            node['status'] = STATUS['poly1']\n            # node['attribute'] = ATTRIBUTE['variable']\n            # \xe5\xb0\x86\xe5\x8f\x98\xe9\x87\x8f\xe8\xbd\xac\xe5\x8c\x96\xe6\x88\x90\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n\n            if node['structure'] in variable_table:\n                # print('coefficient:',node['coefficient'])\n                if isinstance(node['coefficient'],int):\n                    node['coefficient'] = int(node['coefficient'])\n                if isinstance(node['coefficient'],float):\n                    node['coefficient'] = float(node['coefficient'])\n                node['value'] = int(node['coefficient'])*variable_table[node['structure']]\n                # print(node['value'])\n            # node['value'] = str(node['coefficient'])+'*'+node['structure']\n            else:\n                raise (ValueError,'post_order variable:unrecognized variable')\n            # print('coefficient=',node['coefficient'])\n            if node['coefficient'] == 1:\n                latex_str = node['structure']\n            elif node['coefficient'] == -1:\n                latex_str = '-'+node['structure']\n            else:\n                # print('yessss')\n                # print(type(node['coefficient']))\n                latex_str = str(node['coefficient'])+node['structure']\n        elif not isinstance(node['structure'],list):\n            return str(node['structure'])\n        elif node['type'] == NODE_TYPE['bracket']:\n            # print('post_order bracket',child)\n            in_bracket = post_order(child[1])\n            node['status'] = child[1]['status']\n            # node['attribute'] = child[1]['attribute']\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe5\x90\xab\xe6\x9c\xaa\xe7\x9f\xa5\xe6\x95\xb0\xe7\x9a\x84\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f\xef\xbc\x8c\xe5\x88\x99\xe5\x80\xbcvalue\xe4\xb8\xba\xe5\x85\xb6\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe4\xb8\x8d\xe5\x90\xab\xe6\x9c\xaa\xe7\x9f\xa5\xe6\x95\xb0\xe7\x9a\x84\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f\xef\xbc\x8c\xe5\x88\x99\xe5\x80\xbc\xe4\xb8\xba\xe4\xb8\x80\xe4\xb8\xaa\xe5\xb8\xb8\xe6\x95\xb0\xef\xbc\x8c\xe6\x98\xaf\xe5\x8f\xaf\xe4\xbb\xa5\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xae\xa1\xe7\xae\x97\xe7\x9a\x84\n            if node['status'] in [ STATUS['poly1'] , STATUS['poly2'],STATUS['other']]:\n                node['value'] = (child[1]['value'])\n            elif node['status'] == STATUS['solved']:\n                node['value'] = child[1]['value']\n            else:\n                raise(ValueError,'post_order:unresolved node status')\n            latex_str = '('+in_bracket+')'\n\n\n\n        # elif node['type'] == NODE_TYPE['f']:\n\n        elif node['type'] == NODE_TYPE['t_pi']:\n            # print('post_order t_pi')\n            if len(child)==2:\n                f = post_order(child[1])\n                node['status'] = child[1]['status']\n                node['value'] = child[1]['value']\n                if child[0] == 'times':\n                    node['flag'] = 0\n                    latex_str = '\\\\times'+f\n                elif child[0] == 'div':\n                    node['flag'] = 1\n                    latex_str = '\\\\div'+f\n            elif len(child)>2:\n                f = post_order(child[1])\n                t_pi = post_order(child[2])\n                node['status'] = max(child[1]['status'],child[2]['status'])\n                if child[2]['flag'] == 1:\n                    node['flag'] = 1\n                    if node['status']== STATUS['solved']:\n                        if child[1]['value']%child[2]['value']==0:\n                            # \xe8\x8b\xa5\xe4\xb8\xa4\xe4\xb8\xaa\xe6\x95\xb0\xe8\x83\xbd\xe5\xa4\x9f\xe6\x95\xb4\xe9\x99\xa4\xef\xbc\x8c\xe5\x88\x99\xe8\xa6\x81\xe5\xb0\x86\xe7\xbb\x93\xe6\x9e\x9c\xe8\xbd\xac\xe5\x8c\x96\xe6\x88\x90\xe6\x95\xb4\xe5\x9e\x8b\xef\xbc\x8c\xe9\x81\xbf\xe5\x85\x8dpython\xe8\x87\xaa\xe5\x8a\xa8\xe8\xbd\xac\xe6\x8d\xa2\n                            node['value'] = int(child[1]['value']/(child[2]['value']))\n                        else:\n                            node['value'] = child[1]['value'] / (child[2]['value'])\n                    elif node['status'] == STATUS['poly1'] or node['status'] == STATUS['poly2']:\n                        node['value'] = child[1]['value']/child[2]['value']\n                    else:\n                        raise (ValueError,'post_order:t_pi')\n                    latex_str = '\\\\times'+f+t_pi\n                else:\n                    node['flag'] = 0\n                    if node['status']== STATUS['solved']:\n                        node['value'] = child[1]['value']*(child[2]['value'])\n                    elif node['status'] == STATUS['poly1'] or node['status'] == STATUS['poly2']:\n                        node['value'] = child[1]['value']*(child[2]['value'])\n                    else:\n                        raise (ValueError,'post_order:t_pi')\n                    latex_str = '\\\\div' + f + t_pi\n                simplify_node(node)\n            else:\n                node['status'] = STATUS['solved']\n                node['value'] = 1\n                node['flag'] = 0\n            # print(node['value'])\n        elif node['type']==NODE_TYPE['t']:\n            # print('post_order t',child[0])\n            f = post_order(child[0])\n            node['status'] = child[0]['status']\n            node['value'] = child[0]['value']\n            latex_str = f\n            if len(child)>1:\n                t_pi = post_order(child[1])\n                latex_str = latex_str  + t_pi\n                node['status'] = max(child[0]['status'],child[1]['status'])\n                if child[1]['flag'] == 1:\n\n                    if node['status'] == STATUS['solved']:\n                        if child[0]['value']%child[1]['value']==0:\n                            # \xe8\x8b\xa5\xe4\xb8\xa4\xe4\xb8\xaa\xe6\x95\xb0\xe8\x83\xbd\xe5\xa4\x9f\xe6\x95\xb4\xe9\x99\xa4\xef\xbc\x8c\xe5\x88\x99\xe8\xa6\x81\xe5\xb0\x86\xe7\xbb\x93\xe6\x9e\x9c\xe8\xbd\xac\xe5\x8c\x96\xe6\x88\x90\xe6\x95\xb4\xe5\x9e\x8b\xef\xbc\x8c\xe9\x81\xbf\xe5\x85\x8dpython\xe8\x87\xaa\xe5\x8a\xa8\xe8\xbd\xac\xe6\x8d\xa2\n                            node['value'] = int(child[0]['value']/(child[1]['value']))\n                        else:\n                            node['value'] = child[0]['value'] / (child[1]['value'])\n                    elif node['status'] == STATUS['poly1'] or node['status'] == STATUS['poly2']:\n                        node['value'] = child[0]['value']/child[1]['value']\n                    else:\n                        raise (ValueError,'post_order:t')\n                else:\n\n                    if node['status']== STATUS['solved']:\n                        node['value'] = child[0]['value']*(child[1]['value'])\n                    elif node['status'] in VARIABLE_STATUS:\n                        node['value'] = child[0]['value']*child[1]['value']\n                    else:\n                        raise (ValueError,'post_order:t')\n                simplify_node(node)\n        elif node['type']==NODE_TYPE['e_pi']:\n            # print('post_order e_pi')\n            # print('post_order e_pi:',node)\n            if len(child) == 2:\n                t = post_order(child[1])\n                latex_str = child[0]+t\n                node['status'] = child[1]['status']\n                if child[0] == '+':\n                    node['value'] = child[1]['value']\n                    node['flag'] = 0\n                else:\n                    node['value'] = -child[1]['value']\n                    node['flag'] = 1\n            elif len(child)>2:\n                t = post_order(child[1])\n                e_pi = post_order(child[2])\n                latex_str = child[0] + t + e_pi\n\n                node['status'] = max(child[1]['status'],child[2]['status'])\n                if child[0] == '-':\n                    child[1]['value'] = -child[1]['value']\n                if child[2]['flag'] == 0:\n                    if node['status'] == STATUS['solved']:\n                        node['value'] = child[1]['value']+child[2]['value']\n                    elif node['status'] == STATUS['poly1'] or node['status'] == STATUS['poly2']:\n                        node['value'] = child[1]['value'] + child[2]['value']\n                    else:\n                        raise (ValueError,'post_order:e_pi')\n                else:\n                    if node['status'] == STATUS['solved']:\n                        node['value'] = child[1]['value']+child[2]['value']\n                    elif node['status'] == STATUS['poly1'] or node['status'] == STATUS['poly2']:\n                        node['value'] = child[1]['value'] + child[2]['value']\n                    else:\n                        raise (ValueError,'post_order:e_pi')\n                if child[0]=='-':\n                    node['flag'] = 1\n                else:\n                    node['flag'] = 0\n                simplify_node(node)\n            else:\n                node['structure'] = 0\n                node['status'] = STATUS['solved']\n                node['value'] = 0\n                node['flag'] = 0\n            # print(node['value'])\n        elif node['type'] == NODE_TYPE['e']:\n            # print('post_order e')\n            t = post_order(child[0])\n            node['status'] = child[0]['status']\n            node['value'] = child[0]['value']\n            latex_str = t\n            if len(child) > 1:\n                e_pi = post_order(child[1])\n                latex_str = latex_str + e_pi\n                node['status'] = max(child[0]['status'], child[1]['status'])\n                # if child[1]['value'] == 3:\n                # print('child1',child[1])\n                if child[1]['flag'] == 1:\n\n                    if node['status'] == STATUS['solved']:\n                        node['value'] = child[0]['value'] + child[1]['value']\n                    elif node['status'] == STATUS['poly1'] or node['status'] == STATUS['poly2']:\n                        node['value'] = child[0]['value'] + child[1]['value']\n                    else:\n                        raise (ValueError, 'post_order:e')\n                else:\n                    if node['status'] == STATUS['solved']:\n                        node['value'] = child[0]['value'] + child[1]['value']\n                    elif node['status'] in VARIABLE_STATUS:\n                        node['value'] = child[0]['value'] + child[1]['value']\n                    else:\n                        raise (ValueError, 'post_order:t_pi')\n                simplify_node(node)\n\n    return latex_str\n\n# \xe6\xb1\x82\xe8\xa7\xa3\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f\xe6\xa0\x91\ndef solve_expression(parser_tree):\n    global x\n    post_order(parser_tree)\n    if parser_tree['type'] == NODE_TYPE['equation']:\n        child = parser_tree['structure']\n        # print(child[0]['value'],child[1]['value'])\n        return solve(Eq(child[0]['value'],child[1]['value']),x)\n    else:\n        return parser_tree['value']\n\n\n\n"""
系统代码(code)/config/__init__.py,0,"b'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\'\xe4\xb8\x8b\xe9\x9d\xa2\xe6\x98\xaf\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe4\xb8\x80\xe4\xba\x9b\xe9\x85\x8d\xe7\xbd\xae\xe5\x8f\x82\xe6\x95\xb0\'\n\'some system configuration will be defined as below\'\n\n__author__ = \'Ajay\'\n\n# \xe4\xb8\x8a\xe4\xbc\xa0\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe8\xb7\xaf\xe5\xbe\x84\nUPLOAD_FOLDER = \'./static/\'\n# \xe5\xad\x98\xe6\x94\xbe\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe8\xb7\xaf\xe5\xbe\x84\nSAVE_FOLDER = \'./static/\'\n\nRELEVANT_URL = \'./dataset1\'\n\nMODEL_DIR = ""./my_cnn_model_config5""\n\nNUMBER_OF_PICTURES = 400\n\nTRAINING_STEPS = 4000\n\nPICTURE_SIZE = 45\nIMG_SIZE = 45\n\nTRAININT_RATIO = 0.6\nEVAL_RATIO = 0.4\n# this is all the symbol or function name in the CHROME dataset\n# [\'beta\', \'pm, \'Delta\', \'gamma\', \'infty\', \'rightarrow\', \'.DS_Store\', \'div\',\n#  \'gt\', \'forward_slash\', \'leq\', \'mu\', \'exists\', \'in\', \'times\', \'point\', \'sin\',\n#  \'R\', \'u\', \'9\', \'0\', \'{\', \'7\', \'i\', \'n\', \'G\', \'+\', \',\', \'6\', \'z\', \'}\', \'1\',\n#  \'8\', \'T\', \'s\', \'cos\', \'a\', \'-\', \'f\', \'o\', \'H\', \'sigma\', \'sqrt\', \'pi\', \'int\',\n#  \'sum\', \'lim\', \'lambda\', \'neq\', \'log\', \'ldots\', \'forall\', \'lt\', \'theta\', \'ascii_124\',\n#  \'M\', \'!\', \'alpha\', \'j\', \'c\', \']\', \'(\', \'d\', \'v\', \'prime\', \'q\', \'=\', \'4\', \'x\', \'phi\',\n#  \'3\', \'tan\', \'e\', \')\', \'[\', \'b\', \'k\', \'l\', \'geq\', \'2\', \'y\', \'5\', \'p\', \'w\']\n\n# frac\xe6\x98\xaf\xe5\x88\x86\xe6\x95\xb0\xe7\x9a\x84\xe7\xac\xa6\xe5\x8f\xb7\xef\xbc\x8c\xe5\xb9\xb6\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xe4\xb8\x8e\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe4\xb8\xad\xef\xbc\x8c\xe5\xbd\x93\xe8\xaf\x86\xe5\x88\xab\xe7\x9a\x84\'-\'\xe6\x98\xaf\xe5\x88\x86\xe6\x95\xb0\xe7\xac\xa6\xe5\x8f\xb7\xe6\x97\xb6\xef\xbc\x8c\xe4\xbc\x9a\xe8\x87\xaa\xe5\x8a\xa8\xe8\xbd\xac\xe5\x8c\x96\xe6\x88\x90\'frac\'\nSYMBOLS = [\'0\',\'1\',\'2\',\'3\',\'4\',\'5\',\'6\',\'7\',\'8\',\'9\',\',\',\n            \'-\',\'+\',\'times\',\'div\',\'=\',\'int\',\'d\',\'infty\',\n            \'cos\',\'x\',\'sin\',\'log\',\'e\',\'lim\',\'rightarrow\',\n            \'pi\',\'(\',\')\',\'point\',\'sqrt\',\'tan\']\n# SYMBOLS = [\'0\',\'1\',\'2\',\'3\',\'4\',\'5\',\'6\',\'7\',\'8\',\'9\',\n#             \'-\',\'+\',\'times\',\'div\',\'=\',\'int\',\'a\',\'b\',\n#             \'c\',\'x\',\'y\',\'z\',\'s\',\'i\',\'n\',\'l\',\'o\',\'e\',\n#             \'pi\',\'(\',\')\',\'point\',\'frac\',\'sin\',\'cos\',\'log\']\nFILELIST = [\'infty\', \'rightarrow\', \'div\', \'times\', \'point\',\n             \'sin\', \'9\', \'0\', \'7\', \'+\', \',\', \'6\', \'1\', \'8\',\n             \'cos\', \'-\', \'sqrt\', \'pi\', \'int\', \'lim\', \'log\',\n             \'(\', \'d\', \'=\', \'4\', \'x\', \'3\', \'tan\', \'e\', \')\',\n             \'2\', \'5\']\n# FILELIST = [\'div\', \'times\', \'point\', \'9\', \'0\', \'7\',\n#             \'i\', \'n\', \'+\', \'6\', \'z\', \'1\', \'8\', \'s\',\n#             \'a\', \'-\', \'o\', \'pi\', \'int\', \'c\', \'(\',\n#             \'=\', \'4\', \'x\', \'3\', \'e\', \')\', \'b\', \'l\',\n#             \'2\', \'y\', \'5\',\'frac\']\n\n# \xe5\xae\x9a\xe4\xb9\x89\xe9\x9d\x9e\xe9\xbb\x8f\xe8\xbf\x9e\xe5\xad\x97\xe7\xac\xa6\nUNCONTINOUS_SYMBOLS = [\'div\',\'=\',\'rightarrow\'] #,\'sin\',\'cos\',\'tan\',\'lim\',\'ln\',\'log\']\n\n\n\n\n\n# \xe5\xae\x9a\xe4\xb9\x89\xe7\xa9\xba\xe9\x97\xb4\xe5\x85\xb3\xe7\xb3\xbb\nSPACIAL_RELATIONSHIP = {\'including\':0,\'included\':1,\'unknown\':2,\n                        \'superscript\':3,\'subscript\':4,\'up\':5,\n                        \'down\':6,\'right\':7,\'left\':8,\'left_up\':9,\'left_down\':10}\n\n# \xe4\xb8\x80\xe4\xb8\xaa\xe6\x95\xb0\xe5\xad\xa6\xe8\xae\xa1\xe7\xae\x97\xe5\xbc\x8f\xe8\x83\xbd\xe5\xa4\x9f\xe5\x8c\x85\xe5\x90\xab\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\x9a\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xaa\xe6\x95\xb0\nLARGEST_NUMBER_OF_SYMBOLS = 50\n\n# \xe5\x8e\x9f\xe5\x9b\xbe\xe7\xbc\xa9\xe6\x94\xbe\xe6\xaf\x94\xe4\xbe\x8b\nSCALSIZE = 1\n\n# \xe5\x80\x99\xe9\x80\x89\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xaa\xe6\x95\xb0\nNUM_OF_CANDIDATES = 1\n\n# \xe5\xae\x9a\xe4\xb9\x89token\xe7\xb1\xbb\xe5\x9e\x8b\nTOKEN_TYPE = {\'OPERATOR\':0,\'CONSTANT_INTEGER\':1,\'CONSTANT_DECIMAL\':2,\'FUNCTION\':3,\'VARIABLE\':4,\'CMP\':5,\'RESERVE\':6,\'ERROR\':7,\'END\':8,\'SPECIAL\':9}\nOPERATOR = [\'+\',\'-\',\'times\',\'div\',\'sqrt\']\nDIGIT = [\'0\',\'1\',\'2\',\'3\',\'4\',\'5\',\'6\',\'7\',\'8\',\'9\']\nSPECIAL = [\'(\',\')\',\'d\',\',\',\'rightarrow\']\nVARIABLE = [\'x\',\'y\',\'z\']\nRESERVE = [\'e\',\'pi\',\'infty\']\nFUNCTION = [\'cos\',\'sin\',\'log\',\'tan\',\'lim\']\nCIRCULAR_FUNCTIONS = [\'cos\',\'sin\',\'tan\']\nDECIMAL_POINT = [\'point\',\'1\'] # \xe8\xb7\x9f\xe5\xb0\x8f\xe6\x95\xb0\xe7\x82\xb9\xe5\xbe\x88\xe5\x83\x8f\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\nCMP = [\'=\',\'<\',\'>\',\'le\',\'ge\']\n\n# \xe5\xae\x9a\xe4\xb9\x89DFA\xe7\x8a\xb6\xe6\x80\x81\nDFA_STATE = {\'START\':0,\'INCONSTANT\':2,\'INDECIMAL\':3,\'INRESERVE\':4,\'INVARIABLE\':5,\'INFUNCTION\':6,\'DONE\':7}\n\n# \xe5\xae\x9a\xe4\xb9\x89\xe8\xa7\xa3\xe6\x9e\x90\xe6\xa0\x91\xe8\x8a\x82\xe7\x82\xb9\xe7\xb1\xbb\xe5\x9e\x8b\nNODE_TYPE = {\'default\':0,\'bracket\':1,\'integer\':2,\'decimal\':3,\'variable\':4,\'t_pi\':5,\n             \'t\':6,\'e_pi\':7,\'e\':8,\'me\':9,\'me_pi\':10,\'fraction\':11,\'int\':12,\'power\':13,\n             \'equation\':14,\'operator\':15,\'function\':16,\'empty\':17,\'f\':18,\'sqrt\':19,\'constant\':20,\'derivation\':21,\'limitation\':22}\n# \xe5\x8f\xaf\xe4\xbb\xa5\xe4\xb9\x98\xe6\x96\xb9\xe7\x9a\x84\xe8\x8a\x82\xe7\x82\xb9\xe7\xb1\xbb\xe5\x9e\x8b\nPOWERABLE = [2,3,4,20]\n\n# \xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\x9c\xe4\xb8\xba\xe6\x93\x8d\xe4\xbd\x9c\xe6\x95\xb0\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\nOPERATABLE = [\'0\',\'1\',\'2\',\'3\',\'4\',\'5\',\'6\',\'7\',\'8\',\'9\',\'x\']\n\n# \xe5\xae\x9a\xe4\xb9\x89\xe8\x8a\x82\xe7\x82\xb9\xe7\xb1\xbb\xe5\x9e\x8b\xe5\x92\x8ctoken\xe7\xb1\xbb\xe5\x9e\x8b\xe7\x9a\x84\xe5\xae\x9a\xe4\xb9\x89\xe5\x85\xb3\xe7\xb3\xbb\xef\xbc\x8c\xe7\x94\xa8\xe4\xba\x8e\xe7\x94\x9f\xe6\x88\x90node list\nTOKEN_TO_NODE = {0:15,1:2,2:3,3:16,4:4,5:0,6:20,7:0,8:0,9:0}\n\n# \xe5\xae\x9a\xe4\xb9\x89\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f\xe7\xb1\xbb\xe5\x9e\x8b\nOP_TYPE = {\'power\':0,\'int\':1,\'fraction\':2,\'equation\':3,\'normal\':4,\'sqrt\':5,\'function\':6}\n\n# \xe5\xae\x9a\xe4\xb9\x89\xe8\x8a\x82\xe7\x82\xb9\xe7\x8a\xb6\xe6\x80\x81\n# solved|\xe5\xbd\x93\xe5\x89\x8d\xe7\x9a\x84\xe8\x8a\x82\xe7\x82\xb9\xe5\x80\xbc\xe6\x98\xaf\xe5\x8f\xaf\xe8\xae\xa1\xe7\xae\x97\xe7\x9a\x84 poly1|\xe5\xbd\x93\xe5\x89\x8d\xe8\x8a\x82\xe7\x82\xb9\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb8\x80\xe5\x85\x83\xe4\xb8\x80\xe6\xac\xa1\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f poly2|\xe5\xbd\x93\xe5\x89\x8d\xe8\x8a\x82\xe7\x82\xb9\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb8\x80\xe5\x85\x83\xe4\xba\x8c\xe6\xac\xa1\xe5\xa4\x9a\xe9\xa1\xb9\xe5\xbc\x8f\n# eq1|\xe5\xbd\x93\xe5\x89\x8d\xe8\x8a\x82\xe7\x82\xb9\xe6\x98\xaf\xe4\xb8\x80\xe5\x85\x83\xe4\xb8\x80\xe6\xac\xa1\xe6\x96\xb9\xe7\xa8\x8b eq2|\xe5\xbd\x93\xe5\x89\x8d\xe8\x8a\x82\xe7\x82\xb9\xe6\x98\xaf\xe4\xb8\x80\xe5\x85\x83\xe4\xba\x8c\xe6\xac\xa1\xe6\x96\xb9\xe7\xa8\x8b\nSTATUS = {\'solved\':0,\'poly1\':1,\'poly2\':2,\'eq1\':3,\'eq2\':4,\'other\':5}\nVARIABLE_STATUS = [1,2,5]\n\n# \xe5\xae\x9a\xe4\xb9\x89\xe4\xb8\x8d\xe8\x83\xbd\xe5\x90\x88\xe5\xb9\xb6\xe5\xad\x97\xe7\xac\xa6\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\nREJECT_SYMBOLS = [\'0\',\'d\',\'2\',\'3\',\'4\',\'5\',\'6\',\'7\',\'8\',\'9\']\n\n# \xe5\xae\x9a\xe4\xb9\x89\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe8\xb7\xaf\xe5\xbe\x84\nTEST_URL = \'../testImgs\'\n'"
系统代码(code)/evaluator/__init__.py,0,"b'# \xe6\xb1\x82\xe6\x9e\x81\xe9\x99\x90\xe6\xb5\x8b\xe8\xaf\x95\xe6\xa0\xb7\xe4\xbe\x8b:https://github.com/sympy/sympy/blob/master/sympy/series/tests/test_demidovich.py\nfrom solver import *\nimport os\nfrom config import *\nanswer = [\n{\'number\': \'63\', \'level\': \'easy\', \'latex\': \'\\\\sqrt{64},\', \'answer\': \'8\'},\n{\'number\': \'64\', \'level\': \'easy\', \'latex\': \'\\\\sqrt{9},\', \'answer\': \'3\'},\n{\'number\': \'73\', \'level\': \'easy\', \'latex\': \'\\\\sqrt[3]{64},\', \'answer\': \'4\'},\n{\'number\': \'71\', \'level\': \'easy\', \'latex\': \'\\\\sqrt[3]{8},\', \'answer\': \'2\'},\n{\'number\': \'70\', \'level\': \'easy\', \'latex\': \'\\\\sqrt{100},\', \'answer\': \'10\'},\n{\'number\': \'68\', \'level\': \'easy\', \'latex\': \'\\\\sqrt{49},\', \'answer\': \'7\'},\n{\'number\': \'61\', \'level\': \'easy\', \'latex\': \'\\\\sqrt{1},\', \'answer\': \'1\'},\n{\'number\': \'69\', \'level\': \'easy\', \'latex\': \'\\\\sqrt{81},\', \'answer\': \'9\'},\n{\'number\': \'67\', \'level\': \'easy\', \'latex\': \'\\\\sqrt{36},\', \'answer\': \'6\'},\n{\'number\': \'62\', \'level\': \'easy\', \'latex\': \'\\\\sqrt{4},\', \'answer\': \'2\'},\n{\'number\': \'66\', \'level\': \'easy\', \'latex\': \'\\\\sqrt{25},\', \'answer\': \'5\'},\n{\'number\': \'65\', \'level\': \'easy\', \'latex\': \'\\\\sqrt{16},\', \'answer\': \'4\'},\n{\'number\': \'74\', \'level\': \'easy\', \'latex\': \'\\\\sqrt[3]{125},\', \'answer\': \'5\'},\n{\'number\': \'72\', \'level\': \'easy\', \'latex\': \'\\\\sqrt[3]{27},\', \'answer\': \'3\'},\n{\'number\': \'75\', \'level\': \'easy\', \'latex\': \'\\\\sqrt[3]{216},\', \'answer\': \'6\'},\n{\'number\': \'111\', \'level\': \'easy\', \'latex\': \'\\\\int_{0},^{1},x\\\\mathrm{d},x\', \'answer\': \'\\\\frac{1},{2},\'},\n{\'number\': \'114\', \'level\': \'easy\', \'latex\': \'\\\\int_{0},^{\\\\pi},\\\\sinx\\\\mathrm{d},x\', \'answer\': \'2\'},\n{\'number\': \'113\', \'level\': \'easy\', \'latex\': \'\\\\int_{1},^{e},\\\\frac{1},{x},\\\\mathrm{d},x\', \'answer\': \'1\'},\n{\'number\': \'109\', \'level\': \'easy\', \'latex\': \'\\\\int_{0},^{\\\\pi},\\\\cosx\\\\mathrm{d},x\', \'answer\': \'0\'},\n{\'number\': \'106\', \'level\': \'easy\', \'latex\': \'\\\\int_{3},^{4},x\\\\mathrm{d},x\', \'answer\': \'\\\\frac{7},{2},\'},\n{\'number\': \'112\', \'level\': \'easy\', \'latex\': \'\\\\int_{1},^{2},x\\\\mathrm{d},x\', \'answer\': \'\\\\frac{3},{2},\'},\n{\'number\': \'108\', \'level\': \'easy\', \'latex\': \'\\\\int_{5},^{6},1\\\\mathrm{d},x\', \'answer\': \'1\'},\n{\'number\': \'107\', \'level\': \'easy\', \'latex\': \'\\\\int_{4},^{5},x\\\\mathrm{d},x\', \'answer\': \'\\\\frac{9},{2},\'},\n{\'number\': \'110\', \'level\': \'easy\', \'latex\': \'\\\\int_{0},^{1},2x\\\\mathrm{d},x\', \'answer\': \'1\'},\n{\'number\': \'115\', \'level\': \'easy\', \'latex\': \'\\\\int_{0},^{\\\\frac{\\\\pi},{2},},\\\\cosx\\\\mathrm{d},x\', \'answer\': \'1\'},\n{\'number\': \'46\', \'level\': \'easy\', \'latex\': \'\\\\frac{1},{4},\\\\times\\\\frac{7},{3},\', \'answer\': \'\\\\frac{7},{12},\'},\n{\'number\': \'50\', \'level\': \'easy\', \'latex\': \'\\\\frac{6},{30},-\\\\frac{5},{30},\', \'answer\': \'\\\\frac{1},{30},\'},\n{\'number\': \'57\', \'level\': \'easy\', \'latex\': \'\\\\frac{3},{7},+\\\\frac{2},{3},\', \'answer\': \'\\\\frac{23},{21},\'},\n{\'number\': \'47\', \'level\': \'easy\', \'latex\': \'\\\\frac{3},{2},\\\\times\\\\frac{1},{4},\', \'answer\': \'\\\\frac{3},{8},\'},\n{\'number\': \'49\', \'level\': \'easy\', \'latex\': \'\\\\frac{7},{5},-\\\\frac{4},{3},\', \'answer\': \'\\\\frac{1},{15},\'},\n{\'number\': \'53\', \'level\': \'easy\', \'latex\': \'\\\\frac{7},{10},+\\\\frac{1},{2},\', \'answer\': \'\\\\frac{6},{5},\'},\n{\'number\': \'48\', \'level\': \'easy\', \'latex\': \'\\\\frac{2},{7},+\\\\frac{1},{3},\', \'answer\': \'\\\\frac{13},{21},\'},\n{\'number\': \'52\', \'level\': \'easy\', \'latex\': \'\\\\frac{4},{9},-\\\\frac{2},{3},\', \'answer\': \'-\\\\frac{2},{9},\'},\n{\'number\': \'59\', \'level\': \'easy\', \'latex\': \'\\\\frac{1},{9},\\\\times\\\\frac{9},{10},\', \'answer\': \'\\\\frac{10},{81},\'},\n{\'number\': \'41\', \'level\': \'easy\', \'latex\': \'\\\\frac{1},{2},+\\\\frac{4},{3},\', \'answer\': \'\\\\frac{11},{6},\'},\n{\'number\': \'55\', \'level\': \'easy\', \'latex\': \'\\\\frac{12},{3},\\\\div\\\\frac{4},{3},\', \'answer\': \'3\'},\n{\'number\': \'60\', \'level\': \'easy\', \'latex\': \'\\\\frac{3},{9},\\\\div\\\\frac{1},{3},\', \'answer\': \'1\'},\n{\'number\': \'43\', \'level\': \'easy\', \'latex\': \'\\\\frac{1},{2},\\\\times\\\\frac{4},{3},\', \'answer\': \'\\\\frac{2},{3},\'},\n{\'number\': \'54\', \'level\': \'easy\', \'latex\': \'\\\\frac{6},{11},+\\\\frac{1},{2},\', \'answer\': \'\\\\frac{23},{22},\'},\n{\'number\': \'58\', \'level\': \'easy\', \'latex\': \'\\\\frac{4},{2},+\\\\frac{7},{5},\', \'answer\': \'\\\\frac{17},{5},\'},\n{\'number\': \'56\', \'level\': \'easy\', \'latex\': \'\\\\frac{2},{4},\\\\div\\\\frac{1},{2},\', \'answer\': \'1\'},\n{\'number\': \'51\', \'level\': \'easy\', \'latex\': \'\\\\frac{7},{8},+\\\\frac{1},{8},\', \'answer\': \'1\'},\n{\'number\': \'44\', \'level\': \'easy\', \'latex\': \'\\\\frac{5},{3},\\\\times\\\\frac{4},{5},\', \'answer\': \'\\\\frac{4},{3},\'},\n{\'number\': \'45\', \'level\': \'easy\', \'latex\': \'\\\\frac{11},{33},+\\\\frac{22},{33},\', \'answer\': \'1\'},\n{\'number\': \'42\', \'level\': \'easy\', \'latex\': \'\\\\frac{6},{5},-\\\\frac{3},{5},\', \'answer\': \'\\\\frac{3},{5},\'},\n{\'number\': \'160\', \'level\': \'hard\', \'latex\': \'\\\\frac{1},{3},\\\\times\\\\frac{3},{2},+\\\\lim_{x\\\\to1},\\\\frac{\\\\sqrt{x},-1},{x-1},-\\\\int_{1},{e},\\\\frac{1},{x},\\\\mathrm{d},x\', \'answer\': \'0\'},\n{\'number\': \'157\', \'level\': \'hard\', \'latex\': \'x^{2},-\\\\int_{0},^{\\\\frac{\\\\pi},{2},},\\\\cosx\\\\mathrm{d},x=3\', \'answer\': \'[-2,2]\'},\n{\'number\': \'156\', \'level\': \'hard\', \'latex\': \'\\\\lim_{x\\\\to\\\\infty},\\\\frac{2^{x+1},+3^{x+1},},{2^{x},+3^{x},},\', \'answer\': \'3\'},\n{\'number\': \'159\', \'level\': \'hard\', \'latex\': \'12+(200-25\\\\times4)-56\', \'answer\': \'56\'},\n{\'number\': \'158\', \'level\': \'hard\', \'latex\': \'\\\\int_{0},^{1},2x\\\\mathrm{d},x+\\\\lim_{x\\\\to0},\\\\frac{\\\\tanx},{x},\', \'answer\': \'2\'},\n{\'number\': \'154\', \'level\': \'medium\', \'latex\': ""(x^3-3x^2+1)\'"", \'answer\': \'3x^{2},-6x\'},\n{\'number\': \'148\', \'level\': \'medium\', \'latex\': \'lim_{x\\\\to0},\\\\frac{\\\\sin{3x},},{x},\', \'answer\': \'3\'},\n{\'number\': \'146\', \'level\': \'medium\', \'latex\': \'\\\\frac{x+5},{2},=1\', \'answer\': \'[-3]\'},\n{\'number\': \'149\', \'level\': \'medium\', \'latex\': \'\\\\lim_{x\\\\to1},\\\\frac{\\\\sqrt{x},-1},{x-1},\', \'answer\': \'\\\\frac{1},{2},\'},\n{\'number\': \'141\', \'level\': \'medium\', \'latex\': \'2\\\\times4+6\\\\div3\', \'answer\': \'10\'},\n{\'number\': \'153\', \'level\': \'medium\', \'latex\': ""(\\\\frac{1},{3},\\\\times(x^3)+2x+1)\'"", \'answer\': \'x^{2},+2\'},\n{\'number\': \'152\', \'level\': \'medium\', \'latex\': ""(x\\\\times(e^x))\'"", \'answer\': \'xe^{x},+e^{x},\'},\n{\'number\': \'150\', \'level\': \'medium\', \'latex\': \'(2x^2)+3x-4=(x^2)+4x+8\', \'answer\': \'[-3,4]\'},\n{\'number\': \'144\', \'level\': \'medium\', \'latex\': \'7+8\\\\times5+3\', \'answer\': \'50\'},\n{\'number\': \'151\', \'level\': \'medium\', \'latex\': \'(4x^2)-(3x^2)+3x+1=x\', \'answer\': \'[-1]\'},\n{\'number\': \'142\', \'level\': \'medium\', \'latex\': \'10+2\\\\times6-4\', \'answer\': \'18\'},\n{\'number\': \'147\', \'level\': \'medium\', \'latex\': \'\\\\lim_{x\\\\to\\\\infty},\\\\frac{(x+1)^2},{x^2+1},\', \'answer\': \'1\'},\n{\'number\': \'145\', \'level\': \'medium\', \'latex\': \'12\\\\div4+9\\\\times11\', \'answer\': \'102\'},\n{\'number\': \'143\', \'level\': \'medium\', \'latex\': \'2\\\\times4-6\\\\div3\', \'answer\': \'6\'},\n{\'number\': \'155\', \'level\': \'medium\', \'latex\': \'\\\\int_{0},^{1},(2x+1)\\\\mathrm{d},x\', \'answer\': \'2\'},\n{\'number\': \'31\', \'level\': \'easy\', \'latex\': \'9\\\\times10\', \'answer\': \'90\'},\n{\'number\': \'24\', \'level\': \'easy\', \'latex\': \'9\\\\times6\', \'answer\': \'54\'},\n{\'number\': \'22\', \'level\': \'easy\', \'latex\': \'3\\\\times4\', \'answer\': \'12\'},\n{\'number\': \'34\', \'level\': \'easy\', \'latex\': \'7\\\\times5\', \'answer\': \'35\'},\n{\'number\': \'21\', \'level\': \'easy\', \'latex\': \'2\\\\times1\', \'answer\': \'2\'},\n{\'number\': \'29\', \'level\': \'easy\', \'latex\': \'5\\\\times6\', \'answer\': \'30\'},\n{\'number\': \'33\', \'level\': \'easy\', \'latex\': \'100\\\\times2\', \'answer\': \'200\'},\n{\'number\': \'30\', \'level\': \'easy\', \'latex\': \'7\\\\times8\', \'answer\': \'56\'},\n{\'number\': \'32\', \'level\': \'easy\', \'latex\': \'3\\\\times3\', \'answer\': \'9\'},\n{\'number\': \'23\', \'level\': \'easy\', \'latex\': \'4\\\\times2\', \'answer\': \'8\'},\n{\'number\': \'126\', \'level\': \'easy\', \'latex\': ""x\'"", \'answer\': \'1\'},\n{\'number\': \'128\', \'level\': \'easy\', \'latex\': ""(2x)\'"", \'answer\': \'2\'},\n{\'number\': \'129\', \'level\': \'easy\', \'latex\': ""1\'"", \'answer\': \'0\'},\n{\'number\': \'131\', \'level\': \'easy\', \'latex\': ""((e^x))\'"", \'answer\': \'e^x\'},\n{\'number\': \'132\', \'level\': \'easy\', \'latex\': ""(\\\\sinx)\'"", \'answer\': \'\\\\cos{\\\\left(x\\\\right)},\'},\n{\'number\': \'134\', \'level\': \'easy\', \'latex\': ""(2x)\'"", \'answer\': \'2\'},\n{\'number\': \'135\', \'level\': \'easy\', \'latex\': ""(2x^2)\'"", \'answer\': \'4x\'},\n{\'number\': \'130\', \'level\': \'easy\', \'latex\': ""(\\\\lnx)\'"", \'answer\': \'\\\\frac{1},{x},\'},\n{\'number\': \'127\', \'level\': \'easy\', \'latex\': ""(\\\\frac{1},{x},)\'"", \'answer\': \'-\\\\frac{1},{x^{2},},\'},\n{\'number\': \'133\', \'level\': \'easy\', \'latex\': ""(\\\\sqrt{x},)\'"", \'answer\': \'\\\\frac{1},{2\\\\sqrt{x},},\'},\n{\'number\': \'27\', \'level\': \'easy\', \'latex\': \'10\\\\div5\', \'answer\': \'2\'},\n{\'number\': \'38\', \'level\': \'easy\', \'latex\': \'33\\\\div3\', \'answer\': \'11\'},\n{\'number\': \'35\', \'level\': \'easy\', \'latex\': \'9\\\\div3\', \'answer\': \'3\'},\n{\'number\': \'37\', \'level\': \'easy\', \'latex\': \'14\\\\div7\', \'answer\': \'2\'},\n{\'number\': \'40\', \'level\': \'easy\', \'latex\': \'108\\\\div4\', \'answer\': \'27\'},\n{\'number\': \'26\', \'level\': \'easy\', \'latex\': \'6\\\\div3\', \'answer\': \'2\'},\n{\'number\': \'25\', \'level\': \'easy\', \'latex\': \'4\\\\div2\', \'answer\': \'2\'},\n{\'number\': \'28\', \'level\': \'easy\', \'latex\': \'121\\\\div11\', \'answer\': \'11\'},\n{\'number\': \'39\', \'level\': \'easy\', \'latex\': \'18\\\\div9\', \'answer\': \'2\'},\n{\'number\': \'36\', \'level\': \'easy\', \'latex\': \'12\\\\div6\', \'answer\': \'2\'},\n{\'number\': \'91\', \'level\': \'easy\', \'latex\': \'\\\\sin0\', \'answer\': \'0\'},\n{\'number\': \'93\', \'level\': \'easy\', \'latex\': \'\\\\cos0\', \'answer\': \'1\'},\n{\'number\': \'101\', \'level\': \'easy\', \'latex\': \'\\\\cos\\\\pi\', \'answer\': \'-1\'},\n{\'number\': \'100\', \'level\': \'easy\', \'latex\': \'\\\\cos\\\\frac{\\\\pi},{4},\', \'answer\': \'\\\\frac{\\\\sqrt{2},},{2},\'},\n{\'number\': \'102\', \'level\': \'easy\', \'latex\': \'\\\\tan\\\\frac{\\\\pi},{4},\', \'answer\': \'1\'},\n{\'number\': \'99\', \'level\': \'easy\', \'latex\': \'\\\\sin\\\\pi\', \'answer\': \'0\'},\n{\'number\': \'96\', \'level\': \'easy\', \'latex\': \'\\\\log_{2},4\', \'answer\': \'2\'},\n{\'number\': \'105\', \'level\': \'easy\', \'latex\': \'\\\\lne^2\', \'answer\': \'2\'},\n{\'number\': \'104\', \'level\': \'easy\', \'latex\': \'\\\\lne\', \'answer\': \'1\'},\n{\'number\': \'103\', \'level\': \'easy\', \'latex\': \'\\\\log_{2},8\', \'answer\': \'3\'},\n{\'number\': \'95\', \'level\': \'easy\', \'latex\': \'\\\\log_{2},2\', \'answer\': \'1\'},\n{\'number\': \'94\', \'level\': \'easy\', \'latex\': \'\\\\cos\\\\frac{\\\\pi},{6},\', \'answer\': \'\\\\frac{\\\\sqrt{3},},{2},\'},\n{\'number\': \'97\', \'level\': \'easy\', \'latex\': \'\\\\sin\\\\frac{\\\\pi},{4},\', \'answer\': \'\\\\frac{\\\\sqrt{2},},{2},\'},\n{\'number\': \'98\', \'level\': \'easy\', \'latex\': \'\\\\sin\\\\frac{\\\\pi},{3},\', \'answer\': \'\\\\frac{\\\\sqrt{3},},{2},\'},\n{\'number\': \'92\', \'level\': \'easy\', \'latex\': \'\\\\sin\\\\frac{\\\\pi},{6},\', \'answer\': \'\\\\frac{1},{2},\'},\n{\'number\': \'86\', \'level\': \'easy\', \'latex\': \'5^2+6^2\', \'answer\': \'61\'},\n{\'number\': \'89\', \'level\': \'easy\', \'latex\': \'8^2-4^3\', \'answer\': \'0\'},\n{\'number\': \'87\', \'level\': \'easy\', \'latex\': \'3^2+4^2\', \'answer\': \'25\'},\n{\'number\': \'84\', \'level\': \'easy\', \'latex\': \'2^4\', \'answer\': \'16\'},\n{\'number\': \'76\', \'level\': \'easy\', \'latex\': \'2^2\', \'answer\': \'4\'},\n{\'number\': \'80\', \'level\': \'easy\', \'latex\': \'3^4\', \'answer\': \'81\'},\n{\'number\': \'85\', \'level\': \'easy\', \'latex\': \'1^{100},\', \'answer\': \'1\'},\n{\'number\': \'90\', \'level\': \'easy\', \'latex\': \'1+3^2\', \'answer\': \'10\'},\n{\'number\': \'83\', \'level\': \'easy\', \'latex\': \'4^4\', \'answer\': \'256\'},\n{\'number\': \'88\', \'level\': \'easy\', \'latex\': \'10^2-9^2\', \'answer\': \'19\'},\n{\'number\': \'77\', \'level\': \'easy\', \'latex\': \'2^3\', \'answer\': \'8\'},\n{\'number\': \'82\', \'level\': \'easy\', \'latex\': \'4^3\', \'answer\': \'64\'},\n{\'number\': \'78\', \'level\': \'easy\', \'latex\': \'3^2\', \'answer\': \'9\'},\n{\'number\': \'79\', \'level\': \'easy\', \'latex\': \'3^3\', \'answer\': \'27\'},\n{\'number\': \'81\', \'level\': \'easy\', \'latex\': \'4^2\', \'answer\': \'16\'},\n{\'number\': \'2\', \'level\': \'easy\', \'latex\': \'2+3\', \'answer\': \'5\'},\n{\'number\': \'12\', \'level\': \'easy\', \'latex\': \'71+9\', \'answer\': \'80\'},\n{\'number\': \'9\', \'level\': \'easy\', \'latex\': \'5+6\', \'answer\': \'11\'},\n{\'number\': \'1\', \'level\': \'easy\', \'latex\': \'1+1\', \'answer\': \'2\'},\n{\'number\': \'13\', \'level\': \'easy\', \'latex\': \'99+1\', \'answer\': \'100\'},\n{\'number\': \'4\', \'level\': \'easy\', \'latex\': \'25+6\', \'answer\': \'31\'},\n{\'number\': \'3\', \'level\': \'easy\', \'latex\': \'12+33\', \'answer\': \'45\'},\n{\'number\': \'14\', \'level\': \'easy\', \'latex\': \'123+321\', \'answer\': \'444\'},\n{\'number\': \'10\', \'level\': \'easy\', \'latex\': \'4+7\', \'answer\': \'11\'},\n{\'number\': \'11\', \'level\': \'easy\', \'latex\': \'8+9\', \'answer\': \'17\'},\n{\'number\': \'18\', \'level\': \'easy\', \'latex\': \'71-9\', \'answer\': \'62\'},\n{\'number\': \'17\', \'level\': \'easy\', \'latex\': \'9-8\', \'answer\': \'1\'},\n{\'number\': \'8\', \'level\': \'easy\', \'latex\': \'25-6\', \'answer\': \'19\'},\n{\'number\': \'19\', \'level\': \'easy\', \'latex\': \'99-1\', \'answer\': \'98\'},\n{\'number\': \'15\', \'level\': \'easy\', \'latex\': \'6-5\', \'answer\': \'1\'},\n{\'number\': \'16\', \'level\': \'easy\', \'latex\': \'7-4\', \'answer\': \'3\'},\n{\'number\': \'5\', \'level\': \'easy\', \'latex\': \'2-1\', \'answer\': \'1\'},\n{\'number\': \'6\', \'level\': \'easy\', \'latex\': \'4-3\', \'answer\': \'1\'},\n{\'number\': \'7\', \'level\': \'easy\', \'latex\': \'33-12\', \'answer\': \'21\'},\n{\'number\': \'20\', \'level\': \'easy\', \'latex\': \'321-123\', \'answer\': \'198\'},\n{\'number\': \'116\', \'level\': \'easy\', \'latex\': \'(x^2)=1\', \'answer\': \'[-1,1]\'},\n{\'number\': \'119\', \'level\': \'easy\', \'latex\': \'(x^2)=16\', \'answer\': \'[-4,4]\'},\n{\'number\': \'118\', \'level\': \'easy\', \'latex\': \'(x^2)=9\', \'answer\': \'[-3,3]\'},\n{\'number\': \'125\', \'level\': \'easy\', \'latex\': \'(2x^2)-3x+1=0\', \'answer\': \'[\\\\frac{1},{2},,1]\'},\n{\'number\': \'123\', \'level\': \'easy\', \'latex\': \'(4x^2)=16\', \'answer\': \'[-2,2]\'},\n{\'number\': \'124\', \'level\': \'easy\', \'latex\': \'(x^2)-4x+3=0\', \'answer\': \'[1,3]\'},\n{\'number\': \'120\', \'level\': \'easy\', \'latex\': \'(x^2)=25\', \'answer\': \'[-5,5]\'},\n{\'number\': \'121\', \'level\': \'easy\', \'latex\': \'(x^2)+2x+1=0\', \'answer\': \'[-1]\'},\n{\'number\': \'117\', \'level\': \'easy\', \'latex\': \'(x^2)=4\', \'answer\': \'[-2,2]\'},\n{\'number\': \'122\', \'level\': \'easy\', \'latex\': \'(x^2)-2x+1=0\', \'answer\': \'[1]\'},\n{\'number\': \'139\', \'level\': \'easy\', \'latex\': \'\\\\lim_{x\\\\to0},\\\\cosx\', \'answer\': \'1\'},\n{\'number\': \'140\', \'level\': \'easy\', \'latex\': \'\\\\lim_{x\\\\to0},\\\\sinx\', \'answer\': \'0\'},\n{\'number\': \'137\', \'level\': \'easy\', \'latex\': \'\\\\lim_{x\\\\to\\\\infty},\\\\frac{1},{x},\', \'answer\': \'0\'},\n{\'number\': \'138\', \'level\': \'easy\', \'latex\': \'\\\\lim_{x\\\\to0},\\\\frac{\\\\sinx},{x},\', \'answer\': \'1\'},\n{\'number\': \'136\', \'level\': \'easy\', \'latex\': \'\\\\lim_{x\\\\to0},x\', \'answer\': \'0\'}\n]\n# print([x for x in answer if x[\'number\']==\'1\'])\n# answer.sort(key=lambda x:int(x[\'number\']))\n# print(answer)\nprint(os.listdir(TEST_URL))\ntest_url = [x for x in os.listdir(TEST_URL) if x!=\'example\' and x !=\'.DS_Store\']\nprint(test_url)\nevaluation_results = []\nlatex_cnt = 0\nanswer_cnt = 0\n\nfor u in  test_url:\n    url = os.path.join(TEST_URL,u)\n    test_imgs = os.listdir(url)\n\n    for img in test_imgs:\n        file_type = img.split(\'.\')[-1]\n        if file_type == \'jpg\' or file_type == \'png\':\n            # \xe6\xb5\x8b\xe8\xaf\x95\xe8\xbf\x99\xe5\xbc\xa0\xe5\x9b\xbe\xe7\x89\x87\xe8\x83\xbd\xe5\x90\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe6\xad\xa3\xe7\xa1\xae\xe5\xa4\x84\xe7\x90\x86\n            file_url = os.path.join(url,img)\n            file_inf = img.split(\'.\')[0]\n            # print(file_inf)\n            # print([x for x in answer if x[\'number\'] == file_inf])\n            file_inf = [x for x in answer if x[\'number\'] == file_inf][0]\n            # print(file_inf)\n            img_number = file_inf[\'number\']\n            img_level = file_inf[\'level\']\n            img_latex = file_inf[\'latex\']\n            img_answer = file_inf[\'answer\']\n            # img_number,img_level,img_latex,img_answer = file_inf\n            # print(img_number,img_level,img_latex,img_answer)\n            is_error = false\n            # evaluation_result = {\'number\':img_number,\'level\':img_level,\'latex\':img_latex,\'answer\':img_answer}\n            # print(file_url)\n            evaluation_result = file_inf\n            err_msg = \'\'\n            try:\n                test_latex,test_result = solve(file_url,\'test\')\n            except BaseException as e:\n                # print(e)\n                err_msg = repr(e)\n                is_error = True\n            finally:\n                if is_error:\n                    evaluation_result[\'is_error\'] = True\n                    evaluation_result[\'err_msg\'] = err_msg\n                else:\n                    # print(latex,result)\n                    evaluation_result[\'test_latex\'] = test_latex\n                    evaluation_result[\'test_answer\'] = str(test_result).replace(\' \',\'\')\n\n                    if test_latex == img_latex:\n                        latex_cnt = latex_cnt + 1\n                    if img_answer == evaluation_result[\'test_answer\']:\n                        answer_cnt = answer_cnt + 1\n                    if test_latex != img_latex or img_answer != evaluation_result[\'test_answer\']:\n                        evaluation_result[\'is_wrong\'] = \'yes\'\n                evaluation_results.append(evaluation_result)\nfor item in evaluation_results:\n    print(item)\nnumber_of_problems = len(evaluation_results)\nprint(\'\xe4\xb8\x80\xe5\x85\xb1\xe6\xb5\x8b\xe8\xaf\x95\xe4\xba\x86\'+str(number_of_problems)+\'\xe9\x81\x93\xe9\xa2\x98\')\nlatex_ratio = latex_cnt/float(number_of_problems)\nanswer_ratio = answer_cnt/float(number_of_problems)\nprint(\'\xe5\x81\x9a\xe5\xaf\xb9\xe9\xa2\x98\xe6\x95\xb0\',answer_cnt)\nprint(\'latex ratio:\',latex_ratio,\';answer_ratio:\',answer_ratio)\n'"
系统代码(code)/my_parser/__init__.py,0,"b""import scan\nimport config\nimport numpy as np\nimport tools\nimport sympy\n\ncharacters = []\ncurrent_node = {'type':config.NODE_TYPE['default'],'structure':0,'location':[0,0,1,1]}\nnext_index = 0\nnode_list = []\ndef parser(temp_node_list):\n    length = len(temp_node_list)\n    if length == 0:\n        raise (ValueError,'my_parser:node_list length = 0!')\n    if length == 1:\n        return temp_node_list[0]\n    global current_node,next_index,node_list\n    next_index = 0\n    node_list = temp_node_list\n    # if next_index < length:\n    current_node = node_list[next_index]\n    next_index += 1\n    # \xe9\x87\x87\xe7\x94\xa8\xe9\x80\x92\xe5\xbd\x92\xe4\xb8\x8b\xe9\x99\x8d\xe6\xb3\x95\xe8\xa7\xa3\xe6\x9e\x90\xe5\x8d\x95\xe8\xa1\x8c\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f\n    parser_tree = E()\n    return parser_tree\n\n# \xe5\x8c\xb9\xe9\x85\x8d\xe5\xbd\x93\xe5\x89\x8dtoken\xe6\x98\xaf\xe5\x90\xa6\xe4\xb8\xba\xe9\xa2\x84\xe6\x9c\x9f\xe7\x9a\x84token\xe7\xb1\xbb\xe5\x9e\x8bexpected\ndef match(expected):\n    global current_node,node_list,next_index\n    length = len(node_list)\n    #print('matching node:',current_node)\n    #print('expected node:', expected,next_index,length)\n\n    # #print('length,index',length,next_index)\n    if isinstance(expected,np.str) and current_node['structure'] == expected:\n        if next_index<length:\n            current_node = node_list[next_index]\n            next_index = next_index+1\n        else:\n            pass\n        # #print('current_node:',current_node)\n    elif isinstance(expected,np.int) and current_node['type'] == expected and next_index<length:\n        # current_node = node_list[next_index]\n        # next_index = next_index + 1\n        if next_index<length:\n            current_node = node_list[next_index]\n            next_index = next_index+1\n        else:\n            pass\n        # #print('current_node:',current_node)\n    # elif isinstance(expected,dict) and next_index < length:\n    #     current_node = node_list[next_index]\n    #     next_index = next_index + 1\n    elif isinstance(expected,dict):\n        if(next_index < length):\n            current_node = node_list[next_index]\n        next_index = next_index+1\n\n    else:\n        raise(ValueError,'unexpected node!')\n\n# \xe5\x88\x9b\xe5\xbb\xba\xe6\xa0\x91\xe8\x8a\x82\xe7\x82\xb9\ndef new_node(node_type=config.NODE_TYPE['default']):\n    node = {}\n    if(node_type == config.NODE_TYPE['bracket']):\n        node = {'structure':['(',{},')'],'type':config.NODE_TYPE['bracket']}\n    elif node_type == config.NODE_TYPE['integer']:\n        node = {'structure':0,'type':config.NODE_TYPE['integer']}\n    elif node_type == config.NODE_TYPE['decimal']:\n        node = {'structure':0,'type':config.NODE_TYPE['decimal']}\n    elif node_type == config.NODE_TYPE['variable']:\n        node = {'structure':'x','type':config.NODE_TYPE['variable'],'coefficient':1}\n    elif node_type == config.NODE_TYPE['int']:\n        node = {'structure':[],'type':node_type,'upper_bound':0,'lower_bound':0,'integral_var':0}\n    elif node_type == config.NODE_TYPE['sqrt']:\n        node = {'structure':[],'type':node_type,'times':2}\n    # elif node_type == config.NODE_TYPE['t_pi']:\n    #     node = {'structure':1,'type':node_type}\n    elif node_type in [x[1] for x in config.NODE_TYPE.items()]:\n        node = {'structure':[],'type':node_type}\n    else:\n        raise(ValueError,'new node:unknown node type')\n    return node\n\ndef token_to_node(token):\n    c = token['token_string']\n    node = new_node()\n    #print('token_to_node:', token)\n    if c in config.SPECIAL or c in config.CMP:\n        node = new_node(config.NODE_TYPE['default'])\n        node['structure'] = c\n    elif token['token_type']==config.TOKEN_TYPE['OPERATOR']:\n        node = new_node(config.NODE_TYPE['operator'])\n        node['structure'] = c\n    elif token['token_type'] == config.TOKEN_TYPE['CONSTANT_INTEGER']:\n        node = new_node(config.NODE_TYPE['integer'])\n        node['structure'] = int(c)\n        # match(config.TOKEN_TYPE['CONSTANT_INTEGER'])\n    elif token['token_type'] == config.TOKEN_TYPE['CONSTANT_DECIMAL']:\n        node = new_node(config.NODE_TYPE['decimal'])\n        node['structure'] = float(c)\n        # match(config.TOKEN_TYPE['CONSTANT_DECIMAL'])\n    elif token['token_type'] == config.TOKEN_TYPE['VARIABLE']:\n        node = new_node(config.NODE_TYPE['variable'])\n        node['structure'] = c\n        node['coefficient'] = token['coefficient']\n        # match(config.TOKEN_TYPE['VARIABLE'])\n    elif token['token_string'] in config.RESERVE or token['token_string'] in config.FUNCTION:\n        # #print('wtf',config.TOKEN_TO_NODE[token['token_type']])\n        node = new_node(config.TOKEN_TO_NODE[token['token_type']])\n        node['structure'] = c\n    # elif current_token['token_type'] == config.TOKEN_TYPE['']\n\n    else:\n\n        raise (ValueError, 'token to node:unresolved token type')\n    node['location'] = token['location']\n    # #print('token_to_node',node)\n    return node\n\ndef F():\n    global current_node\n    c = current_node['structure']\n    # #print(current_node)\n    # #print('calling F()', current_node['type'],c)\n    node = new_node()\n    if c == '(':\n        node = new_node(config.NODE_TYPE['bracket'])\n        match('(')\n        node['structure'][1] = E()\n        match(')')\n    else:\n        node = current_node\n        match(current_node)\n    # elif current_node['token_type'] == config.TOKEN_TYPE['CONSTANT_INTEGER']:\n    #     node = new_node(config.NODE_TYPE['integer'])\n    #     node['structure'] = int(c)\n    #     match(config.TOKEN_TYPE['CONSTANT_INTEGER'])\n    # elif current_node['token_type'] == config.TOKEN_TYPE['CONSTANT_DECIMAL']:\n    #     node = new_node(config.NODE_TYPE['decimal'])\n    #     node['structure'] = float(c)\n    #     match(config.TOKEN_TYPE['CONSTANT_DECIMAL'])\n    # elif current_node['token_type'] == config.TOKEN_TYPE['VARIABLE']:\n    #     node = new_node(config.NODE_TYPE['variable'])\n    #     node['structure'] = c\n    #     node['coefficient'] = current_node['coefficient']\n    #     match(config.TOKEN_TYPE['VARIABLE'])\n    #     #print(current_node)\n    # else:\n    #     raise (ValueError,'F():cannot find suitable production')\n    return node\n\ndef T_pi():\n    # #print('calling T_pi()')\n    global current_node\n    node = new_node(config.NODE_TYPE['t_pi'])\n    # #print(current_node)\n    c = current_node['structure']\n    if c == 'times' or c == 'div':\n        match(c)\n        f = F()\n        t_pi = T_pi()\n        node = new_node(config.NODE_TYPE['t_pi'])\n        node['structure'].append(c)\n        node['structure'].append(f)\n        if len(t_pi['structure']) > 0:\n            node['structure'].append(t_pi)\n    # else:\n    #     node['structure'] = 1\n    return node\n\ndef T():\n    # #print('calling T()')\n    global current_node\n    f = F()\n    t_pi = T_pi()\n    node = new_node(config.NODE_TYPE['t'])\n    node['structure'].append(f)\n    if len(t_pi['structure'])>0:\n        node['structure'].append(t_pi)\n    return node\n\ndef E_pi():\n    global current_node\n    # #print('calling E_pi(),current_node',current_node)\n\n    node = new_node(config.NODE_TYPE['e_pi'])\n    c = current_node['structure']\n    if c == '+' or c == '-':\n        match(c)\n        t = T()\n        e_pi = E_pi()\n        node['structure'].append(c)\n        node['structure'].append(t)\n        if len(e_pi['structure'])>0:\n            node['structure'].append(e_pi)\n    # else:\n    #     node['structure'] = 0\n    return node\n# \xe8\xbf\x99\xe9\x87\x8c\xe7\x9a\x84E\xe6\x98\xaf\xe6\x8c\x87single line expression\ndef E():\n    # #print('calling E()')\n    global current_node\n    t = T()\n    e_pi = E_pi()\n    node = new_node(config.NODE_TYPE['e'])\n    node['structure'].append(t)\n    if len(e_pi['structure'])>0:\n        node['structure'].append(e_pi)\n    return node\n\n\n\n# \xe5\xb0\x86characters\xe8\xbd\xac\xe5\x8c\x96\xe6\x88\x90node list\ndef characters_to_nodes(characters):\n    # global left_bracket_cnt\n    length = len(characters)\n    index = 0\n    node_list = []\n    while index < length:\n        current_token, index = scan.get_token(characters, index)\n        # \xe5\xb0\x86token\xe8\xbd\xac\xe5\x8c\x96\xe4\xb8\xbanode\n        node  = token_to_node(current_token)\n        node_list.append(node)\n    # modify_nodes(node_list)\n    return node_list\n\n\n# \xe8\xa7\xa3\xe6\x9e\x90characters\xef\xbc\x8c\xe6\x98\xaf\xe8\xa7\xa3\xe6\x9e\x90\xe6\x95\xb4\xe4\xb8\xaa\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f\xe7\x9a\x84\xe5\x85\xa5\xe5\x8f\xa3\ndef decompose(node_list):\n    # \xe7\x9b\xae\xe5\x89\x8d\xe5\x8f\xaa\xe8\x83\xbd\xe5\xa4\x84\xe7\x90\x86\xe4\xb8\x80\xe7\xbb\xb4\xe7\x9a\x84\xe7\xae\x97\xe6\x9c\xaf\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f\xef\xbc\x8c\xe5\x85\xb6\xe5\xae\x83\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f\xe7\x9a\x84\xe5\xa4\x84\xe7\x90\x86\xe6\x96\xb9\xe6\xb3\x95\xe6\x9a\x82\xe4\xb8\x8d\xe5\x85\xac\xe5\xbc\x80\xe3\x80\x82\n    return parser(node_list)"""
系统代码(code)/process/__init__.py,2,"b'from scan import get_token\nimport tensorflow as tf\nimport tools\nimport config\n# from outlier_detector import *\n# \xe8\xaf\x86\xe5\x88\xab\xe9\x9d\x9e\xe9\xbb\x8f\xe8\xbf\x9e\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xef\xbc\x8c\xe6\xaf\x94\xe5\xa6\x82i\xe3\x80\x81=\xe3\x80\x81\xe9\x99\xa4\xe5\x8f\xb7\ndef detect_uncontinous_symbols(symbols,original_img):\n    # \xe5\x85\x88\xe5\xaf\xb9symbols\xe5\x9e\x82\xe7\x9b\xb4\xe6\x8a\x95\xe5\xbd\xb1\n    # \xe7\x84\xb6\xe5\x90\x8e\xe5\x9e\x82\xe7\x9b\xb4\xe6\x8a\x95\xe5\xbd\xb1\n    for projection_type in range(1):\n        projection = tools.get_projection(symbols,projection_type)\n        # print(\'projection\',projection)\n        # \xe6\xa0\xb9\xe6\x8d\xae\xe6\x8a\x95\xe5\xbd\xb1\xe5\xaf\xb9symbols\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\x86\xe5\x89\xb2\n        # \xe5\xaf\xb9\xe4\xba\x8e\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\x88\x86\xe5\x89\xb2\xef\xbc\x8c\xe8\x8e\xb7\xe5\xbe\x97\xe5\x9c\xa8\xe8\xbf\x99\xe4\xb8\xaa\xe5\x88\x86\xe5\x89\xb2\xe9\x87\x8c\xe9\x9d\xa2\xe7\x9a\x84symbols\n        locations = [x[\'location\'] for x in symbols]\n        end_index = 0\n        for line_segment in projection:\n            # \xe7\xa1\xae\xe5\xae\x9a\xe5\xb1\x9e\xe4\xba\x8eline_segment\xe7\x9a\x84symbols\n            start_index = end_index\n            for end_index in range(start_index, len(locations)):\n                x11, x12 = locations[end_index][projection_type], locations[end_index][projection_type] + locations[end_index][projection_type + 2]\n                x21, x22 = line_segment[0], line_segment[1]\n                if (x11 >= x21 and x12 <= x22):\n                    end_index += 1\n                else:\n                    break\n            # \xe6\x88\xaa\xe5\x8f\x96characters[start_index:end_index],\xe5\xa6\x82\xe6\x9e\x9c\xe9\x95\xbf\xe5\xba\xa6\xe5\xa4\xa7\xe4\xba\x8e1\xef\xbc\x8c\xe7\xbb\xa7\xe7\xbb\xad\xe9\x80\x92\xe5\xbd\x92\xe8\xb0\x83\xe7\x94\xa8sort_characters\xe6\x8e\x92\xe5\xba\x8f\n            location_segment = locations[start_index:end_index]\n            symbol_segment = symbols[start_index:end_index]\n            sub_symbol = [x[\'src_img\'] for x in symbol_segment]\n            # print(\'\xe5\x88\x87\xe5\x89\xb2\xe5\x90\x8e\xe7\x9a\x84location\', location_segment)\n            # print(symbol_segment)\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x80\xe4\xb8\xaa\xe5\x88\x86\xe5\x89\xb2\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6\xe5\xa4\xa7\xe4\xba\x8e1\xef\xbc\x8c\xe5\xb0\x8f\xe4\xba\x8e3\xef\xbc\x8c\xe5\xb0\xb1\xe9\x80\x81\xe5\x88\xb0\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xaf\x86\xe5\x88\xab\n            if (len(location_segment) > 1 and len(location_segment)<4):\n\n                location = tools.join_locations(location_segment)\n                # \xe4\xbb\x8e\xe5\x8e\x9f\xe5\x9b\xbe\xe6\x8f\x90\xe5\x8f\x96\xe5\xbe\x85\xe8\xaf\x86\xe5\x88\xab\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\n                extracted_img = tools.extract_img(location,original_img)\n                # \xe8\xaf\x86\xe5\x88\xab\xe5\xad\x97\xe7\xac\xa6 \xe8\xbf\x99\xe9\x87\x8c\xe6\xaf\x8f\xe6\xac\xa1\xe9\x83\xbd\xe9\x9c\x80\xe8\xa6\x81calling model\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xbf\x9b\xe4\xb8\x80\xe6\xad\xa5\xe4\xbc\x98\xe5\x8c\x96\n                predict_input_fn = tf.estimator.inputs.numpy_input_fn(\n                    x={""x"":tools.normalize_matrix_value([extracted_img]+sub_symbol)},\n                    shuffle=False)\n                predictions = tools.cnn_symbol_classifier.predict(input_fn=predict_input_fn)\n                characters = []\n                for i, p in enumerate(predictions):\n                    # print(p[\'classes\'],FILELIST[p[\'classes\']])\n                    candidates = tools.get_candidates(p[\'probabilities\'])\n                    characters.append({\'candidates\': candidates})\n                # print(\'detect uncontinuous symbols\',characters)\n                # \xe5\xa6\x82\xe6\x9e\x9c\xe8\xaf\x86\xe5\x88\xab\xe5\x87\xba\xe5\x80\x99\xe9\x80\x89\xe7\x9a\x84\xe5\x8c\xb9\xe9\x85\x8d\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xad\xe5\xad\x98\xe5\x9c\xa8\xe9\x9d\x9e\xe8\xbf\x9e\xe7\xbb\xad\xe5\xad\x97\xe7\xac\xa6\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbd\x9c\xe4\xb8\xba\xe4\xb8\x80\xe4\xb8\xaa\xe6\x95\xb4\xe4\xbd\x93\n                for candidate in characters[0][\'candidates\']:\n                    recognized_symbol = candidate[\'symbol\']\n                    probability = candidate[\'probability\']\n\n                    # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe9\x9d\x9e\xe9\xbb\x8f\xe8\xbf\x9e\xe5\xad\x97\xe7\xac\xa6,\xe4\xb8\x94\xe6\x9c\x89\xe5\x8d\x8a\xe6\x88\x90\xe6\x8a\x8a\xe6\x8f\xa1\xe8\xae\xa4\xe4\xb8\xba\xe6\x98\xaf\xe6\xad\xa3\xe7\xa1\xae\xe7\x9a\x84,\xe5\x88\x99\xe5\x90\x88\xe5\xb9\xb6\xe5\xae\x83\xe4\xbb\xac\xe4\xbd\x9c\xe4\xb8\xba\xe4\xb8\x80\xe4\xb8\xaa\xe6\x95\xb4\xe4\xbd\x93\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe5\x90\x88\xe5\xb9\xb6\xe5\x90\x8e\xe7\x9a\x84symbols\n                    if recognized_symbol in config.UNCONTINOUS_SYMBOLS and probability>0.5:\n                        # print(\'yesssssss\',characters[2][\'candidates\'][0][\'symbol\'],characters[1][\'candidates\'][0][\'symbol\'].isdigit(),characters[3][\'candidates\'][0][\'symbol\'].isdigit())\n                        # \xe9\x99\xa4\xe5\x8f\xb7\xe5\xbf\x85\xe9\xa1\xbb\xe6\x9c\x89\xe4\xb8\x89\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe6\x9e\x84\xe6\x88\x90\xef\xbc\x8c\xe8\xbf\x98\xe8\xa6\x81\xe5\x88\xa4\xe6\x96\xad\xe5\xad\x90\xe5\xad\x97\xe7\xac\xa6\xe5\x8c\x85\xe4\xb8\x8d\xe5\x8c\x85\xe5\x90\xab\xe6\x95\xb0\xe5\xad\x97\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe5\x8c\x85\xe5\x90\xab\xe6\x95\xb0\xe5\xad\x97\xef\xbc\x8c\xe5\x88\x99\xe4\xb8\x8d\xe8\x83\xbd\xe5\x90\x88\xe5\xb9\xb6\xe4\xb8\xba\xe6\x95\xb4\xe4\xbd\x93\n                        if recognized_symbol == \'div\' and len(characters) == 4 and \\\n                                characters[2][\'candidates\'][0][\'symbol\'] in [\'-\',\',\',\'point\'] and \\\n                                characters[1][\'candidates\'][0][\'symbol\'].isdigit() == False and \\\n                                characters[3][\'candidates\'][0][\'symbol\'].isdigit() == False:\n                            joined_symbol = {\'location\': location, \'src_img\': extracted_img}\n\n                            for i in range(end_index - start_index):\n                                symbols.remove(symbols[start_index])\n                                locations.remove(locations[start_index])\n                            symbols.insert(start_index, joined_symbol)\n                            locations.insert(start_index, location)\n                            end_index = start_index + 1\n                            break\n                        # \xe7\xad\x89\xe4\xba\x8e\xe5\x8f\xb7\xe7\x9a\x84\xe4\xb8\xa4\xe4\xb8\xaa\xe5\xad\x90\xe5\xad\x97\xe7\xac\xa6\xe5\xbf\x85\xe9\xa1\xbb\xe6\x98\xaf-\n                        elif recognized_symbol == \'=\' and len(characters) == 3 and \\\n                                characters[2][\'candidates\'][0][\'symbol\'] in [\'-\',\',\',\'point\'] and \\\n                                characters[1][\'candidates\'][0][\'symbol\'] in [\'-\',\',\',\'point\']:\n                            joined_symbol = {\'location\': location, \'src_img\': extracted_img}\n                            for i in range(end_index - start_index):\n                                symbols.remove(symbols[start_index])\n                                locations.remove(locations[start_index])\n                            symbols.insert(start_index, joined_symbol)\n                            locations.insert(start_index, location)\n                            end_index = start_index + 1\n                            break\n                        # \xe7\xad\x89\xe4\xba\x8e\xe5\x8f\xb7\xe7\x9a\x84\xe4\xb8\xa4\xe4\xb8\xaa\xe5\xad\x90\xe5\xad\x97\xe7\xac\xa6\xe5\xbf\x85\xe9\xa1\xbb\xe6\x98\xaf-\n                        elif recognized_symbol == \'rightarrow\' and len(characters) == 3 and \\\n                             characters[2][\'candidates\'][0][\'symbol\'] in [\')\', \'>\'] and \\\n                             characters[1][\'candidates\'][0][\'symbol\'] in [\'-\', \',\', \'point\']:\n                            joined_symbol = {\'location\': location, \'src_img\': extracted_img}\n                            for i in range(end_index - start_index):\n                                symbols.remove(symbols[start_index])\n                                locations.remove(locations[start_index])\n                            symbols.insert(start_index, joined_symbol)\n                            locations.insert(start_index, location)\n                            end_index = start_index + 1\n                            break\n    return symbols\n\n# \xe8\xaf\x86\xe5\x88\xab\xe5\xb8\xb8\xe8\xa7\x81\xe7\x9a\x84\xe6\x95\xb0\xe5\xad\xa6\xe5\x87\xbd\xe6\x95\xb0\xe5\x90\x8d\xef\xbc\x8c\xe7\x9b\xae\xe5\x89\x8d\xe9\xbb\x98\xe8\xae\xa4\xe6\x89\x80\xe6\x9c\x89\xe6\x95\xb0\xe5\xad\xa6\xe5\x87\xbd\xe6\x95\xb0\xe5\x90\x8d\xe9\x83\xbd\xe6\x98\xaf\xe7\x94\xb1\xe4\xb8\x89\xe4\xb8\xaa\xe5\x88\x86\xe6\x95\xa3\xe7\x9a\x84\xe7\xac\xa6\xe5\x8f\xb7\xe7\xbb\x84\xe6\x88\x90\n# sin/cos/log\ndef detect_functions(symbols,original_img):\n    sub_symbol_cnt = 3\n    for j in range(2):\n        stride = sub_symbol_cnt-j\n\n        length = len(symbols)\n        i = 0\n        t_symbols = []\n        locations = [x[\'location\'] for x in symbols]\n        while i<length-stride+1:\n            location = tools.join_locations(locations[i:i+stride])\n            segment_img = tools.extract_img(location,original_img)\n            segment = {\'src_img\':segment_img,\'start_index\':i,\'end_index\':i+3,\'location\':location}\n            t_symbols.append(segment)\n            i = i+1\n        # print([x[\'start_index\'] for x in t_symbols])\n        img_to_predict = [x[\'src_img\'] for x in t_symbols]\n        # \xe8\xaf\x86\xe5\x88\xab\xe5\xad\x97\xe7\xac\xa6 \xe8\xbf\x99\xe9\x87\x8c\xe6\xaf\x8f\xe6\xac\xa1\xe9\x83\xbd\xe9\x9c\x80\xe8\xa6\x81calling model\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xbf\x9b\xe4\xb8\x80\xe6\xad\xa5\xe4\xbc\x98\xe5\x8c\x96\n        predict_input_fn = tf.estimator.inputs.numpy_input_fn(\n            x={""x"": tools.normalize_matrix_value(img_to_predict)},\n            shuffle=False)\n        predictions = tools.cnn_symbol_classifier.predict(input_fn=predict_input_fn)\n        characters = []\n        for i, p in enumerate(predictions):\n            candidates = tools.get_candidates(p[\'probabilities\'])\n            characters.append(candidates[0])\n        # print(characters)\n        length = len(t_symbols)\n        i = 0\n        shift = 0\n\n        while i<length:\n            # \xe5\xa6\x82\xe6\x9e\x9c\xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c\xe6\x98\xaf\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\x88\x99\xe6\x9b\xbf\xe6\x8d\xa2\xe4\xb8\xba\xe4\xb8\x80\xe4\xb8\xaa\xe6\x95\xb4\xe4\xbd\x93\n            if characters[i][\'symbol\'] in config.FUNCTION and characters[i][\'probability\'] >0.9:\n                start_index = t_symbols[i][\'start_index\']\n                end_index = t_symbols[i][\'end_index\']\n                # print(\'detect function\',i,start_index,end_index,shift)\n                start_index = start_index - shift\n                end_index = end_index - shift\n                for j in range(end_index - start_index):\n                    symbols.remove(symbols[start_index])\n                symbols.insert(start_index, t_symbols[i])\n                shift = shift + end_index-start_index-1\n                if i+2 < length:\n                    i = i+2\n                elif i+1 < length:\n                    i = i+1\n\n            i = i+1\n    return symbols\n\n\n# \xe5\xb0\x86\xe4\xb8\x80\xe4\xb8\xaa\xe4\xb8\xaa\xe7\x8b\xac\xe7\xab\x8b\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe8\xaf\x86\xe5\x88\xab\xe6\x88\x90token\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe4\xb9\x9f\xe6\x98\xaf\xe5\x85\xb7\xe5\xa4\x87\xe4\xba\x8c\xe7\xbb\xb4\xe7\xa9\xba\xe9\x97\xb4\xe7\xbb\x93\xe6\x9e\x84\xe7\x9a\x84\xe6\x95\xb0\xe5\xad\xa6\xe5\x85\xac\xe5\xbc\x8f\xe8\xbd\xac\xe6\x88\x90\xe4\xb8\x80\xe7\xbb\xb4token\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe5\x85\xb7\xe4\xbd\x93\xe5\xae\x9e\xe7\x8e\xb0\n# \xe8\xbf\x99\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe5\xbe\x88\xe9\x87\x8d\xe8\xa6\x81\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\xae\x83\xe5\xb0\x86\xe4\xb8\x8a\xe4\xb8\x8b\xe6\xa0\x87\xef\xbc\x8c\xe7\xa7\xaf\xe5\x88\x86\xe7\x9a\x84\xe7\xa9\xba\xe9\x97\xb4\xe5\x85\xb3\xe7\xb3\xbb\xe4\xb8\x80\xe7\xbb\xb4\xe5\x8c\x96\ndef group_into_tokens(characters):\n    tokens = []\n    next_index = 0\n\n    while(next_index < len(characters)):\n\n        token,next_index = get_token(characters,next_index)\n        tokens.append(token)\n    return tokens'"
系统代码(code)/scan/__init__.py,0,"b""from config import  DFA_STATE\nimport config\nfrom tools import get_spatial_relationship,join_locations,get_keys\n\n# \xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\x8b\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xef\xbc\x8c\xe5\xbd\x93\xe4\xb8\x94\xe4\xbb\x85\xe5\xbd\x93(1)\xe5\xad\x98\xe5\x9c\xa8\xe5\x8f\xb3\xe8\xbe\xb9\xe5\xad\x97\xe7\xac\xa6\xe6\x97\xb6,(2)\xe5\xb0\x8f\xe6\x95\xb0\xe7\x82\xb9\xe6\x89\x8d\xe8\xbf\x94\xe5\x9b\x9e\xef\xbc\x8c\xe5\x85\xb6\xe5\xae\x83\xe4\xb8\x80\xe5\xbe\x8b\xe8\xbf\x94\xe5\x9b\x9e\xe7\xbb\x88\xe7\xbb\x93\xe7\xac\xa6'#'\ndef get_next_char(characters,start_index,char_cnt):\n    if(start_index<len(characters)):\n        c = characters[start_index]['candidates'][0]['symbol']\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xef\xbc\x8c\xe4\xb8\x8d\xe8\xbf\x87\xe5\xae\x83\xe8\xb7\x9f\xe5\x89\x8d\xe9\x9d\xa2\xe5\xad\x97\xe7\xac\xa6\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\xe5\x85\xb3\xe7\xb3\xbb\xe6\x98\xaf\xe4\xbb\x80\xe4\xb9\x88\xef\xbc\x8c\xe9\x83\xbd\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x94\xe5\x9b\x9e\n        if (char_cnt == 0):\n            # \xe5\xaf\xb9\xe5\x88\x86\xe6\x95\xb0\xe7\xac\xa6\xe8\xbf\x98\xe9\x9c\x80\xe5\x81\x9a\xe7\x89\xb9\xe6\xae\x8a\xe5\xa4\x84\xe7\x90\x86\n            if c == '-' and start_index>0:\n                pre_location = characters[start_index - 1]['location']\n                cx1 = (pre_location[0]+pre_location[0]+pre_location[2])/2\n\n                location = characters[start_index]['location']\n\n                relationship = get_spatial_relationship(pre_location,location)\n                if relationship == config.SPACIAL_RELATIONSHIP['up'] or cx1>=location[0] and\\\n                        cx1 < location[0]+location[2]:\n                    return 'f',start_index+1,char_cnt+1\n            return c, start_index + 1,char_cnt+1\n        if start_index>0:\n            previous_c = characters[start_index-1]['candidates'][0]['symbol']\n            pre_location = characters[start_index-1]['location']\n            cx1 = (pre_location[0] + pre_location[0] + pre_location[2]) / 2\n            location = characters[start_index]['location']\n            relationship = get_spatial_relationship(pre_location,location)\n            # print('relationship,pc,c',get_keys(config.SPACIAL_RELATIONSHIP,relationship),previous_c,c)\n            if relationship == config.SPACIAL_RELATIONSHIP['right'] or \\\n                (previous_c in config.DECIMAL_POINT and relationship == config.SPACIAL_RELATIONSHIP['left_down']):#\xe9\x9c\x80\xe8\xa6\x81\xe4\xbf\xae\xe6\x94\xb9\xef\xbc\x8c\xe5\xb0\x8f\xe6\x95\xb0\xe7\x82\xb9\xe5\x9c\xa8\xe5\x89\x8d\xe7\x9a\x84\xe7\xa9\xba\xe9\x97\xb4\xe5\x85\xb3\xe7\xb3\xbb\xe8\xbf\x98\xe6\xb2\xa1\xe6\x9c\x89\xe5\xae\x9a\xe4\xb9\x89\n                return c,start_index+1,char_cnt+1\n            elif (c in config.DECIMAL_POINT and relationship == config.SPACIAL_RELATIONSHIP['subscript']):\n                return '.',start_index+1,char_cnt+1\n            # \xe5\xa6\x82\xe6\x9e\x9c-\xe7\xac\xa6\xe5\x8f\xb7\xe4\xb8\x8a\xe6\x96\xb9\xe6\x88\x96\xe8\x80\x85\xe6\x96\x9c\xe4\xb8\x8a\xe6\x96\xb9\xe6\x9c\x89\xe5\xad\x97\xe7\xac\xa6\xef\xbc\x8c\xe8\xaf\xb4\xe6\x98\x8e\xe6\x98\xaf\xe5\x88\x86\xe6\x95\xb0\xe7\xac\xa6\n            elif (c == '-' and relationship == config.SPACIAL_RELATIONSHIP['up'] or cx1>=location[0] and\\\n                        cx1 < location[0]+location[2]):\n                return 'f',start_index+1,char_cnt+1\n            else:\n                return '#',start_index+1,char_cnt+1\n\n\n    return '#',start_index+1,char_cnt+1\n\n# \xe4\xbb\x8echaracters\xe7\x9a\x84start_index\xe4\xbd\x8d\xe7\xbd\xae\xe5\xbc\x80\xe5\xa7\x8b\xe8\xaf\x86\xe5\x88\xab\xe5\x87\xba\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaatoken\xef\xbc\x8c\xe5\xb9\xb6\xe8\xbf\x94\xe5\x9b\x9etoken\xe4\xbb\xa5\xe5\x8f\x8a\xe4\xb8\x8b\xe4\xb8\x80\xe6\xac\xa1getToken\xe7\x9a\x84\xe5\x88\x9d\xe5\xa7\x8b\xe4\xb8\x8b\xe6\xa0\x87\ndef get_token(characters,start_index=0):\n    token = []\n    token_string = ''\n    index = start_index\n    state = DFA_STATE['START']\n    token_type = config.TOKEN_TYPE['ERROR']\n    coefficient = 1\n    char_cnt = 0\n    while(state != DFA_STATE['DONE'] and index <= len(characters)):\n        c,index,char_cnt = get_next_char(characters,index,char_cnt)\n        # print('\xe8\x87\xaa\xe5\x8a\xa8\xe6\x9c\xba\xe7\x8a\xb6\xe6\x80\x81\xef\xbc\x9a',get_keys(config.DFA_STATE,state),' \xe5\xad\x97\xe7\xac\xa6\xef\xbc\x9a',c,' \xe7\xb4\xa2\xe5\xbc\x95\xef\xbc\x9a',index)\n        save = True\n        if state == DFA_STATE['START']:\n            if c.isdigit():\n                state = DFA_STATE['INCONSTANT']\n            else:\n                state = DFA_STATE['DONE']\n                if c in config.RESERVE:\n                    token_type = config.TOKEN_TYPE['RESERVE']\n                elif c in config.VARIABLE:\n                    token_type = config.TOKEN_TYPE['VARIABLE']\n                elif c in config.FUNCTION:\n                    token_type = config.TOKEN_TYPE['FUNCTION']\n                elif c in config.OPERATOR:\n                    token_type = config.TOKEN_TYPE['OPERATOR']\n                elif c in config.SPECIAL:\n                    token_type = config.TOKEN_TYPE['SPECIAL']\n                elif c in config.CMP:\n                    token_type = config.TOKEN_TYPE['CMP']\n                elif c == '#':\n                    token_type = config.TOKEN_TYPE['END']\n                elif c == 'f':\n                    token_type = config.TOKEN_TYPE['OPERATOR']\n                elif c == 'int':\n                    token_type = config.TOKEN_TYPE['OPERATOR']\n                else:\n                    token_type = config.TOKEN_TYPE['ERROR']\n        elif state == DFA_STATE['INCONSTANT']:\n            if c == '.':\n                state = DFA_STATE['INDECIMAL']\n            elif c.isdigit():\n                state = DFA_STATE['INCONSTANT']\n            elif c in config.RESERVE:\n                state = DFA_STATE['INRESERVE']\n            elif c in config.VARIABLE:\n                state = DFA_STATE['INVARIABLE']\n            else:\n                save = False\n                token_type = config.TOKEN_TYPE['CONSTANT_INTEGER']\n                state = DFA_STATE['DONE']\n        elif state == DFA_STATE['INDECIMAL']:\n            if c.isdigit():\n                state = DFA_STATE['INDECIMAL']\n            elif c in config.RESERVE:\n                state = DFA_STATE['INRESERVE']\n            elif c in config.VARIABLE:\n                state = DFA_STATE['INVARIABLE']\n            else:\n                save = False\n                token_type = config.TOKEN_TYPE['CONSTANT_DECIMAL']\n                state = DFA_STATE['DONE']\n        elif state == DFA_STATE['INVARIABLE']:\n            save = False\n            state = DFA_STATE['DONE']\n            token_type = config.TOKEN_TYPE['VARIABLE']\n            coefficient = token_string[0:-1]\n            token_string = token_string[-1]\n        elif state == DFA_STATE['INRESERVE']:\n            save = False\n            state = DFA_STATE['DONE']\n            token_type = config.TOKEN_TYPE['RESERVE']\n            coefficient = token_string[0:-1]\n            token_string = token_string[-1]\n        else:\n            raise(ValueError,'\xe6\x9c\xaa\xe5\xa4\x84\xe7\x90\x86\xe7\x9a\x84\xe8\x87\xaa\xe5\x8a\xa8\xe6\x9c\xba\xe7\x8a\xb6\xe6\x80\x81')\n\n        if state == DFA_STATE['DONE'] and not save:\n                index -= 1\n        if save :\n            token_string += c\n    # \xe5\x90\x88\xe5\xb9\xb6\xe5\xa4\x9a\xe4\xb8\xaasymbol\xe7\xbb\x84\xe5\x90\x88\xe6\x88\x90\xe7\x9a\x84token\xef\xbc\x8c\xe5\x8f\x98\xe6\x88\x90\xe4\xb8\x80\xe4\xb8\xaa\xe5\xa4\xa7\xe7\x9f\xa9\xe5\xbd\xa2\n    if characters[index-1]['candidates'][0]['symbol'] == 'x':\n        location = join_locations([x['location'] for x in characters[index-1:index]])\n    else:\n        location = join_locations([x['location'] for x in characters[start_index:index]])\n    token = {'location':location,'token_string':token_string,\n             'token_type':token_type}\n    if(token_type == config.TOKEN_TYPE['RESERVE'] or token_type == config.TOKEN_TYPE['VARIABLE']):\n        token = {'location': location, 'token_string': token_string,\n                 'token_type': token_type,\n                 'coefficient': coefficient}\n    # print('token,index=',token,index)\n    return token,index"""
系统代码(code)/solver/__init__.py,1,"b'from tools.image_input import read_img_file\nimport tensorflow as tf\nfrom tools.cnn_model import cnn_model_fn\nfrom tools.cnn_model import cnn_symbol_classifier\nfrom tools import *\nimport process\nfrom config import FILELIST\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom tools.img_preprocess import read_img_and_convert_to_binary,binary_img_segment\nimport cv2\nimport my_parser\nimport tools\nfrom calculator import *\nimport time\n\n\n# \xe7\xa8\x8b\xe5\xba\x8f\xe5\x85\xa5\xe5\x8f\xa3,\xe8\xbe\x93\xe5\x85\xa5\xe4\xb8\x80\xe5\xbc\xa0\xe5\x9b\xbe\xe7\x89\x87\xef\xbc\x8c\xe8\xbe\x93\xe5\x87\xba\xe4\xb8\x80\xe5\xbc\xa0\xe5\x9b\xbe\xe7\x89\x87\ndef solve(filename,mode = \'product\'):\n    original_img, binary_img = read_img_and_convert_to_binary(filename)\n    symbols = binary_img_segment(binary_img, original_img)\n    sort_symbols = sort_characters(symbols)\n    process.detect_uncontinous_symbols(sort_symbols, binary_img)\n    length = len(symbols)\n    column = length/3+1\n    index = 1\n    # for symbol in symbols:\n    #     # print(symbol)\n    #     plt.subplot(column,3,index)\n    #     plt.imshow(symbol[\'src_img\'], cmap=\'gray\')\n    #     plt.title(index), plt.xticks([]), plt.yticks([])\n    #     index += 1\n    # temp_img = original_img[:, :, ::-1]\n    # # cv2.imshow(\'img\',temp_img)\n    # # cv2.waitKey(0)\n    # # cv2.destroyAllWindows()\n    # plt.subplot(column,3,index)\n    # plt.imshow(temp_img, cmap = \'gray\', interpolation = \'bicubic\')\n    # plt.title(index),plt.xticks([]), plt.yticks([])\n    # plt.show()\n\n    symbols_to_be_predicted = normalize_matrix_value([x[\'src_img\'] for x in symbols])\n\n    predict_input_fn = tf.estimator.inputs.numpy_input_fn(\n        x={""x"": np.array(symbols_to_be_predicted)},\n        shuffle=False)\n\n    predictions = cnn_symbol_classifier.predict(input_fn=predict_input_fn)\n\n    characters = []\n    for i,p in enumerate(predictions):\n        # print(p[\'classes\'],FILELIST[p[\'classes\']])\n        candidates = get_candidates(p[\'probabilities\'])\n        characters.append({\'location\':symbols[i][\'location\'],\'candidates\':candidates})\n    #print([x[\'location\'] for x in characters])\n\n    modify_characters(characters)\n\n    # print(\'\xe6\x8e\x92\xe5\xba\x8f\xe5\x90\x8e\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe5\xba\x8f\xe5\x88\x97\')\n    # print([[x[\'location\'], x[\'candidates\']] for x in characters])\n    tokens = process.group_into_tokens(characters)\n    # print(\'\xe8\xaf\x86\xe5\x88\xab\xe5\x87\xba\xe7\x9a\x84token\')\n    # print(tokens)\n    # \xe5\x85\x88\xe5\xb0\x86\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaatoken\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe6\x88\x90\xe4\xb8\x80\xe4\xb8\xaa\xe6\xa0\x91\xe8\x8a\x82\xe7\x82\xb9\xef\xbc\x8c\xe5\xbe\x97\xe5\x88\xb0\xe4\xb8\x80\xe4\xb8\xaa\xe8\x8a\x82\xe7\x82\xb9\xe5\x88\x97\xe8\xa1\xa8node_list\n    node_list = my_parser.characters_to_nodes(characters)\n\n    parser_tree = my_parser.decompose(node_list)\n    # print(parser_tree)\n    set_forward_step(0)\n    post_order(parser_tree)\n    y_start = 0.9\n    y_stride = 0.2\n    if parser_tree[\'status\'] == STATUS[\'solved\']:\n        latex_strs = []\n        i = 5\n        j = 0\n\n        while j < i and isinstance(parser_tree[\'structure\'], list):\n            set_forward_step(1)\n            latex_str = post_order(parser_tree)\n            latex_strs.append(latex_str)\n            j = j + 1\n        # for latex_str in latex_strs:\n        #     print(latex_str)\n        # print(parser_tree)\n\n        for i, latex_str in enumerate(latex_strs):\n            if i == 0:\n                expression_str = r\'$expression:\' + latex_str + \'$\'\n            else:\n                expression_str = r\'$step\' + str(i) + \':\' + latex_str + \'$\'\n            # print(expression_str)\n            font_size = 18\n            if len(latex_str) > 12:\n                font_size = 15\n            plt.text(0.1, y_start, expression_str, fontsize=font_size)\n            y_start = y_start - y_stride\n        latex_str = latex_strs[0]\n    else:\n        set_forward_step(0)\n        latex_str = post_order(parser_tree)\n        expression_str = r\'$expression:\' + latex_str + \'$\'\n        font_size = 18\n        if len(latex_str) > 12:\n            font_size=15\n        plt.text(0.1, y_start, expression_str, fontsize=font_size)\n        y_start = y_start - y_stride\n\n    # print(solve_expression(parser_tree))\n    solution = \'\'\n    answer=\'\'\n    if parser_tree[\'status\'] == STATUS[\'solved\']:\n        # print(latex(parser_tree[\'value\']))\n        if isinstance(parser_tree[\'value\'], int) or isinstance(parser_tree[\'value\'], float):\n            solution = r\'$result:\' + str(parser_tree[\'value\']) + \'$\'\n            answer = str(parser_tree[\'value\'])\n        else:\n            solution = r\'$result:\' + str(latex(parser_tree[\'value\'])) + \'$\'\n            answer = str(latex(parser_tree[\'value\']))\n    elif parser_tree[\'type\'] == NODE_TYPE[\'derivation\'] or parser_tree[\'type\'] == NODE_TYPE[\'limitation\']:\n        solution = r\'$result:\' + str(latex(parser_tree[\'value\'])) + \'$\'\n        answer = str(latex(parser_tree[\'value\']))\n    elif parser_tree[\'status\'] == STATUS[\'eq1\'] or parser_tree[\'status\'] == STATUS[\'eq2\']:\n\n        result = solve_expression(parser_tree)\n        # print(result)\n        solution = r\'$result:\' + result_to_str(result) + \'$\'\n        answer = result\n    elif parser_tree[\'status\'] == STATUS[\'other\']:\n        answer = latex(parser_tree[\'value\'])\n        # print(answer)\n    else:\n        result = solve_expression(parser_tree)\n        # print(str(result))\n        solution = r\'$solution:\' + latex_str + \'$\'\n    print(\'\xe7\xad\x94\xe6\xa1\x88\xef\xbc\x9a\',solution)\n    print(\'\xe5\xa4\x84\xe7\x90\x86\xe7\xbb\x93\xe6\x9e\x9c\xe8\xaf\xb7\xe5\x88\xb0static\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe4\xb8\x8b\xe7\x9a\x84\xe6\x9c\x80\xe6\x96\xb0\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\xe6\x9f\xa5\xe7\x9c\x8b\')\n    plt.text(0.1, y_start, solution, fontsize=18)\n\n    #\n    # expression_str = r\'$expression:\' + latex_str + \'$\'\n    # print(expression_str)\n    # plt.text(0.1, 0.9, expression_str, fontsize=20)\n    # # print(solve_expression(parser_tree))\n    # solution = \'\'\n    # answer =\'\'\n    # if parser_tree[\'status\'] == STATUS[\'solved\']:\n    #     if isinstance(parser_tree[\'value\'], int) or isinstance(parser_tree[\'value\'], float):\n    #         solution = r\'$result:\' + str(parser_tree[\'value\']) + \'$\'\n    #         answer = str(parser_tree[\'value\'])\n    #     else:\n    #         solution = r\'$result:\' + str(latex(parser_tree[\'value\'])) + \'$\'\n    #         answer = str(latex(parser_tree[\'value\']))\n    #\n    #\n    # elif parser_tree[\'status\'] == STATUS[\'eq1\'] or parser_tree[\'status\'] == STATUS[\'eq2\']:\n    #     solution = r\'$result:\' + str(latex(parser_tree[\'value\'])) + \'$\'\n    #     result = solve_expression(parser_tree)\n    #     print(result)\n    #     answer = result\n    # elif parser_tree[\'status\'] == STATUS[\'other\']:\n    #     answer = latex(parser_tree[\'value\'])\n    #     print(answer)\n    # else:\n    #     solution = r\'$solution:\' + latex_str + \'$\'\n    #     answer = latex_str\n    # plt.text(0.1, 0.5, solution, fontsize=20)\n\n\n\n    plt.xticks([]),plt.yticks([])\n    # print(filename.rsplit(\'.\',1)[1])\n    save_filename = str(int(time.time()))\n    save_filename_dir = SAVE_FOLDER+save_filename\n    plt.savefig(save_filename_dir)\n    # plt.show()\n    plt.close()\n    if mode == \'product\':\n        return save_filename\n    elif mode == \'test\':\n        return latex_str,answer\n\n\n\n'"
系统代码(code)/tools/__init__.py,0,"b'from config import IMG_SIZE\nimport numpy as np\nfrom config import SPACIAL_RELATIONSHIP as spatial_relationship,NUM_OF_CANDIDATES,FILELIST,UNCONTINOUS_SYMBOLS\nfrom tools.img_preprocess import extract_img\nfrom tools.cnn_model import cnn_symbol_classifier\nfrom config import *\n# \xe5\xb0\x86\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84\xe7\x9f\xa9\xe9\x98\xb5\xe5\x80\xbc\xe8\xbd\xac\xe5\x8c\x96\xe6\x88\x90\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe5\x9b\xbe\xe7\x89\x87\xe9\x82\xa3\xe6\xa0\xb7\xe7\x9a\x84\xe4\xba\x8c\xe5\x80\xbc\xe7\x9f\xa9\xe9\x98\xb5,\xe5\x8d\xb3\xe6\x98\xaf\xe5\xb0\x86\xe5\xb8\x83\xe5\xb0\x94\xe5\x9e\x8b\xe5\x85\x83\xe7\xb4\xa0\xe8\xbd\xac\xe5\x8c\x96\xe6\x88\x90\xe5\x8f\xaa\xe6\x9c\x890\xe6\x88\x96\xe8\x80\x85255\xe7\x9a\x84float\xe5\x9e\x8b\xe7\x9f\xa9\xe9\x98\xb5\n# notes\xef\xbc\x9a\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe5\x9b\xbe\xe7\x89\x87\xe4\xb8\xad\xe6\x98\xaf\xe7\x81\xb0\xe5\xba\xa6\xe5\x9b\xbe\xef\xbc\x8c\xe5\xb9\xb6\xe9\x9d\x9e\xe4\xba\x8c\xe5\x80\xbc\xe5\x9b\xbe\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe8\x80\x83\xe8\x99\x91\xe5\xb0\x86\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe5\x9b\xbe\xe7\x89\x87\xe8\xbd\xac\xe5\x8c\x96\xe4\xb8\xba\xe4\xba\x8c\xe5\x80\xbc\xe5\x9b\xbe\ndef normalize_matrix_value(symbol_segment_list):\n    symbols_to_be_predicted = []\n    for i in range(len(symbol_segment_list)):\n        one = symbol_segment_list[i].reshape(IMG_SIZE * IMG_SIZE)\n        t = np.ones((IMG_SIZE * IMG_SIZE), np.uint8)\n        for j in range(IMG_SIZE * IMG_SIZE):\n            if one[j] == True:\n                t[j] = 255\n            else:\n                t[j] = 0\n        symbols_to_be_predicted.append(np.array(t, np.float32))\n    return np.array(symbols_to_be_predicted,np.float32)\n\n# \xe8\xae\xa1\xe7\xae\x97\xe9\x87\x8d\xe5\x90\x88\xe7\x8e\x87\ndef get_overlap_ratio(rect1,rect2):\n    larger_one = 1\n    # \xe7\xa1\xae\xe4\xbf\x9drect1\xe6\x98\xaf\xe9\x9d\xa2\xe7\xa7\xaf\xe6\xaf\x94\xe8\xbe\x83\xe5\xa4\xa7\xe7\x9a\x84\xe9\x82\xa3\xe4\xb8\xaa\n    if(rect2[2]*rect2[3]>rect1[2]*rect1[3]):\n        larger_one = 2\n        t = rect1\n        rect1 = rect2\n        rect2 = t\n    x11, y11, w1, h1 = rect1\n    x21, y21, w2, h2 = rect2\n    x12, y12 = x11 + w1, y11 + h1\n    x22, y22 = x21 + w2, y21 + h2\n    S1 = w1*h1\n    S2 = w2*h2\n    # print(x11,x12,y11,y12)\n    # print(x21, x22, y21, y22)\n    # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe5\x8c\x85\xe5\x90\xab\xef\xbc\x8cratio = 1\n    if (x11 <= x21 and y11 <= y21 and x12 >= x22 and y12 >= y22):\n        return 1,larger_one\n    # \xe5\xa6\x82\xe6\x9e\x9c\xe7\x9b\xb8\xe4\xba\xa4\xef\xbc\x8cratio = \xef\xbc\x88S\xe5\xa4\xa7-S\xe5\xb0\x8f\xef\xbc\x89/ S\xe5\xb0\x8f\n    elif x11<=x21 and y11 <= y21 and x12> x21 and y12 > y21 and x22 < x12 and y22 > y12:\n        overlap_area = (x12-x21)*(y12-y21)\n        return (overlap_area)/S2,larger_one\n    else:\n        return 0,larger_one\n    # p1x = max(x11, x21);\n    # p1y = max(y11, y21);\n    #\n    # p2x = min(x12,x22);\n    # p2y = min(y12,y22);\n    # overlap_area = 0\n    # #  \xe5\x88\xa4\xe6\x96\xad\xe6\x98\xaf\xe5\x90\xa6\xe7\x9b\xb8\xe4\xba\xa4\n    # if (p2x > p1x and p2y > p1y):\n    #         # // \xe5\xa6\x82\xe6\x9e\x9c\xe5\x85\x88\xe4\xba\xa4\xef\xbc\x8c\xe6\xb1\x82\xe5\x87\xba\xe7\x9b\xb8\xe4\xba\xa4\xe9\x9d\xa2\xe7\xa7\xaf\n    #     overlap_area = (p2x - p1x) * (p2y - p1y)\n    # if overlap_area>0:\n    #     return overlap_area/float(S2),larger_one\n    # else:\n    #     return 0,larger_one\n# \xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\xa4\xe4\xb8\xaa\xe7\x9f\xa9\xe5\xbd\xa2\xe4\xb9\x8b\xe9\x97\xb4\xe7\x9a\x84\xe7\xa9\xba\xe9\x97\xb4\xe5\x85\xb3\xe7\xb3\xbb\xef\xbc\x88\xe5\x85\xb7\xe4\xbd\x93\xe7\xa9\xba\xe9\x97\xb4\xe5\x85\xb3\xe7\xb3\xbb\xe5\x8f\x82\xe8\xa7\x81tools/config.py\xef\xbc\x89\xef\xbc\x8c\xe7\x9f\xa9\xe5\xbd\xa2\xe7\x94\xa8(x,y,w,h)\xe8\xa1\xa8\xe7\xa4\xba\xef\xbc\x8c\xe5\x85\xb6\xe4\xb8\xadx,y\xe6\x98\xaf\xe5\x9d\x90\xe6\xa0\x87\xef\xbc\x8cw,h\xe6\x98\xaf\xe5\xae\xbd\xe9\xab\x98\n# \xe8\xbf\x94\xe5\x9b\x9erect2\xe5\xaf\xb9rect1\xe7\x9a\x84\xe5\x85\xb3\xe7\xb3\xbb \xe6\xaf\x94\xe5\xa6\x82including\xe8\xa1\xa8\xe7\xa4\xbarect1\xe5\x8c\x85\xe5\x90\xabrect2 included\xe5\x88\x99\xe8\xa1\xa8\xe7\xa4\xbarect2\xe5\x8c\x85\xe5\x90\xabrect1\ndef get_spatial_relationship(rect1,rect2):\n    x11,y11,w1,h1 = rect1\n    x21,y21,w2,h2 = rect2\n    x12,y12 = x11+w1,y11+h1\n    x22,y22 = x21+w2,y21+h2\n    overlap_ratio,larger_one = get_overlap_ratio(rect1,rect2)\n    # print(overlap_ratio)\n    # \xe5\x8c\x85\xe5\x90\xab\xe5\x85\xb3\xe7\xb3\xbb\xe5\x88\xa4\xe5\xae\x9a\n    if(overlap_ratio > 0.5 and larger_one == 1):\n        return spatial_relationship[\'including\']\n    # \xe8\xa2\xab\xe5\x8c\x85\xe5\x90\xab\xe5\x85\xb3\xe7\xb3\xbb\xe5\x88\xa4\xe5\xae\x9a\n    elif(overlap_ratio > 0.5 and larger_one == 2):\n        return spatial_relationship[\'included\']\n    elif overlap_ratio == 0:\n        # \xe5\x88\xa4\xe6\x96\xad\xe5\x85\xb6\xe4\xbb\x96\xe7\xa9\xba\xe9\x97\xb4\xe5\x85\xb3\xe7\xb3\xbb\n        cx1,cy1 = (x11+x12)/2,(y11+y12)/2\n        cx2,cy2 = (x21+x22)/2,(y21+y22)/2\n        if(cx2==cx1):\n            if(cy1>cy2):\n                return spatial_relationship[\'up\']\n            else:\n                return spatial_relationship[\'down\']\n        else:\n            # \xe8\xae\xa1\xe7\xae\x97\xe7\xa9\xba\xe9\x97\xb4\xe4\xbd\x8d\xe7\xbd\xae\xe5\x85\xb3\xe7\xb3\xbb\xe7\x89\xb9\xe5\xbe\x81\xe5\x80\xbc\n            # \xe4\xb8\xad\xe5\xbf\x83\xe7\x82\xb9\xe8\xa7\x92\xe5\xba\xa6angle\xe3\x80\x81\xe9\xab\x98\xe5\xba\xa6\xe6\xaf\x94HR\xef\xbc\x8c\xe4\xb8\xa4\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe4\xb9\x8b\xe9\x97\xb4\xe7\x9a\x84\xe7\x9b\xb8\xe5\xaf\xb9\xe6\xb0\xb4\xe5\xb9\xb3\xe8\xb7\x9d\xe7\xa6\xbb\xe6\xaf\x94DR\n            angle = np.degrees(np.arctan((cy1-cy2)/(cx2-cx1)))\n            HR = h2/h1\n            WR = w2/w1\n            w = max(w1,w2)\n            w = max(w,max(h1,h2))\n            DR1 = (x21-x12)/w\n            DR2 = (x21-x12)/w2\n            # print(\'relationship feature:\',angle,HR,DR1,DR2,cx1,cx2,cy1,cy2)\n            if angle > -18 and angle < 18 and (cx2 > cx1):\n                return spatial_relationship[\'right\']\n            elif angle >=18 and angle <= 75 and HR <=1.2 and DR1 <= 2:\n                return spatial_relationship[\'superscript\']\n            elif angle <= -18 and angle >= -75 and HR <= 0.7 and cx1<cx2 and cy1 < cy2:\n                return spatial_relationship[\'subscript\']\n            elif (angle >75 and angle <= 90 or angle <-75 and angle >=-90) and WR > 0.4 and cy1 < cy2:\n                return spatial_relationship[\'up\']\n            elif (angle >75 and angle <=90 or angle <-75 and angle >= -90) and WR > 0.4 and cy2 < cy1:\n                return spatial_relationship[\'down\']\n            elif angle > -15 and angle <15 and DR2 <=2 and DR2 >=0 :\n                return spatial_relationship[\'left\']\n            elif angle <= -15 and angle >=-75 and cx1 > cx2:\n                if(cy1 > cy2):\n                    return spatial_relationship[\'left_up\']\n                else:\n                    return spatial_relationship[\'left_down\']\n    return spatial_relationship[\'unknown\']\n\n# \xe5\x88\xa4\xe6\x96\xad\xe6\x9f\x90\xe4\xb8\x80\xe4\xb8\xaa\xe7\x9f\xa9\xe5\xbd\xa2\xe6\x98\xaf\xe5\x90\xa6\xe8\xb7\x9f\xe7\x9f\xa9\xe5\xbd\xa2\xe5\x88\x97\xe8\xa1\xa8\xe7\x9a\x84\xe6\x9f\x90\xe4\xb8\x80\xe4\xb8\xaa\xe7\x9f\xa9\xe5\xbd\xa2\xe6\x9e\x84\xe6\x88\x90\xe7\x89\xb9\xe5\xae\x9a\xe7\x9a\x84\xe5\x85\xb3\xe7\xb3\xbb\ndef verify_spatial_relationship(rect,rects,specified_relationship):\n    for rect1 in rects:\n        relationship = get_spatial_relationship(rect,rect1)\n        if (relationship in specified_relationship):\n            return True\n    return False\n\n# \xe4\xbb\x8ecnn\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe4\xb8\xad\xe8\xbf\x94\xe5\x9b\x9e\xe5\x89\x8dn\xe4\xb8\xaa\xe6\xa6\x82\xe7\x8e\x87\xe6\x9c\x80\xe5\xa4\xa7\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\ndef get_candidates(estimated_probabilities):\n    indexes_of_top_n_largest_probability = np.argsort(-estimated_probabilities)[:NUM_OF_CANDIDATES]\n    candidates = []\n    for i in range(NUM_OF_CANDIDATES):\n        index = indexes_of_top_n_largest_probability[i]\n        candidates.append({\'symbol\':FILELIST[index],\'probability\':estimated_probabilities[index]})\n    return candidates\n\n# \xe8\x8e\xb7\xe5\x8f\x96\xe6\x8a\x95\xe5\xbd\xb1 projection_type = 0|\xe7\xab\x96\xe7\x9b\xb4\xe6\x8a\x95\xe5\xbd\xb1 1|\xe6\xb0\xb4\xe5\xb9\xb3\xe6\x8a\x95\xe5\xbd\xb1\ndef get_projection(characters,projection_type):\n    locations = [x[\'location\'] for x in characters]\n    i = projection_type\n    projection = [[locations[0][i], locations[0][i] + locations[0][i + 2]]]\n    for location in locations:\n        # print(location)\n        start = location[i]\n        end = location[i] + location[i + 2]\n        line_segment1 = [start, end]\n        line_segment2 = projection[-1]\n        # \xe6\x80\x9d\xe8\xb7\xaf\xe8\xb7\x9f\xe7\xa9\xba\xe9\x97\xb2\xe7\x9b\x98\xe5\x9d\x97\xe7\x9a\x84\xe5\x9b\x9e\xe6\x94\xb6\xe7\xb1\xbb\xe4\xbc\xbc\n        # print(line_segment1,line_segment2)\n        # \xe5\x88\xa4\xe5\xae\x9a\xe7\xba\xbf\xe6\xae\xb5\xef\xbc\x88start\xef\xbc\x8cend\xef\xbc\x89\xe4\xb8\x8e\xe7\xba\xbf\xe6\xae\xb5e\xe7\x9a\x84\xe5\x85\xb3\xe7\xb3\xbb\n        # \xe5\xaf\xb9\xe4\xb8\x8d\xe5\x90\x8c\xe7\xba\xbf\xe6\xae\xb5\xe4\xb9\x8b\xe9\x97\xb4\xe7\x9a\x84\xe5\x85\xb3\xe7\xb3\xbb\xef\xbc\x8c\xe6\x9c\x89\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe5\xa4\x84\xe7\x90\x86\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe5\x8c\x85\xe5\x90\xab\n        # print(line_segment1,line_segment2)\n        if (line_segment1[0] >= line_segment2[0] and line_segment2[1] >= line_segment1[1]):\n            continue\n        elif (line_segment2[0] >= line_segment1[0] and line_segment1[1] >= line_segment2[1]):\n            projection[-1][0] = line_segment1[0]\n            projection[-1][1] = line_segment1[1]\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe7\x9b\xb8\xe4\xba\xa4\n        elif line_segment1[0] >= line_segment2[0] and line_segment1[0] <= line_segment2[1] and line_segment1[1] >= \\\n                line_segment2[1]:\n            line_segment2[1] = line_segment1[1]\n            projection[-1][1] = line_segment1[1]\n        elif line_segment2[0] >= line_segment1[0] and  line_segment2[0] <= line_segment1[1] and line_segment2[1] >= \\\n            line_segment1[1]:\n            line_segment2[0] = line_segment1[0]\n            projection[-1][0] = line_segment1[0]\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8ee1\xe5\x92\x8ce2\xe7\x9b\xb8\xe7\xa6\xbb\n        elif line_segment1[0] >= line_segment2[1]:\n            projection.append(line_segment1)\n        else:\n            raise ValueError(\'sort_character:logic error\')\n    # print(\'\xe6\x8a\x95\xe5\xbd\xb1\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x9a\', projection)\n    return projection\n# \xe9\x87\x87\xe7\x94\xa8\xe8\x87\xaa\xe9\xa1\xb6\xe5\x90\x91\xe4\xb8\x8b\xe5\x88\x86\xe6\x9e\x90\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x8c\xe5\xb0\x86\xe8\xaf\x86\xe5\x88\xab\xe5\x87\xba\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe6\x8c\x89\xe4\xba\xba\xe4\xbb\xac\xe7\x9a\x84\xe4\xb9\xa6\xe5\x86\x99\xe4\xb9\xa0\xe6\x83\xaf\xef\xbc\x8c\xe5\x8d\xb3\xe4\xbb\x8e\xe4\xb8\x8a\xe5\x88\xb0\xe4\xb8\x8b\xef\xbc\x8c\xe4\xbb\x8e\xe5\xb7\xa6\xe5\x88\xb0\xe5\x8f\xb3\xe7\x9a\x84\xe6\x96\xb9\xe5\xbc\x8f\xe6\x8e\x92\xe5\x88\x97\n# \xe4\xb8\xbb\xe8\xa6\x81\xe6\x96\xb9\xe6\xb3\x95\xe6\x98\xaf\xe9\x80\x92\xe5\xbd\x92\xe8\xb0\x83\xe7\x94\xa8\xe5\x9f\xba\xe5\x87\x86\xe7\xba\xbf+\xe6\x8a\x95\xe5\xbd\xb1\xe6\xb3\x95\xe5\xaf\xb9\xe5\xad\x97\xe7\xac\xa6\xe5\xba\x8f\xe5\x88\x97\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\x92\xe5\x88\x86\ndef sort_characters(characters,i=0):\n    if(len(characters)<=1):\n        return characters\n    # \xe5\x85\x88\xe7\xab\x96\xe7\x9b\xb4\xe6\x8a\x95\xe5\xbd\xb1\xef\xbc\x8c\xe5\xaf\xbb\xe6\x89\xbe\xe7\xab\x96\xe7\x9b\xb4\xe5\x88\x87\xe5\x89\xb2\xe7\x82\xb9\n    # \xe7\x84\xb6\xe5\x90\x8e\xe6\xb0\xb4\xe5\xb9\xb3\xe6\x8a\x95\xe5\xbd\xb1\xef\xbc\x8c\xe5\xaf\xbb\xe6\x89\xbe\xe6\xb0\xb4\xe5\xb9\xb3\xe5\x88\x87\xe5\x89\xb2\xe7\x82\xb9\n\n    # if i==0:\n    #     print(\'\xe7\xab\x96\xe7\x9b\xb4\xe6\x8a\x95\xe5\xbd\xb1\')\n    # else:\n    #     print(\'\xe6\xb0\xb4\xe5\xb9\xb3\xe6\x8a\x95\xe5\xbd\xb1\')\n    # \xe5\x85\x88\xe5\xaf\xb9characters\xe6\x8c\x89x/y\xe5\x80\xbc\xe8\xbf\x9b\xe8\xa1\x8c\xe9\xa2\x84\xe6\x8e\x92\xe5\xba\x8f\n    presort_characters = sorted(characters,key=lambda x:x[\'location\'][i])\n    # print(\'sort \xe6\x96\xb9\xe6\xb3\x95\xe8\xb0\x83\xe7\x94\xa8\xe7\x9a\x84\xe6\x8e\x92\xe5\xba\x8f\xe7\xae\x97\xe6\xb3\x95\xef\xbc\x9a\')\n    # print(presort_characters)\n    pre_locations = [x[\'location\'] for x in presort_characters]\n    # print(\'\xe5\xbe\x85\xe6\x8e\x92\xe5\xba\x8f\xe7\x9a\x84location\')\n    # for location in locations:\n    #     print(\'(\',location[i],\',\',location[i]+location[i+2],\')\',\'||\',end=\'\')\n    # print()\n    projection = get_projection(presort_characters,i)\n    # \xe5\xa6\x82\xe6\x9e\x9c\xe5\xad\x98\xe5\x9c\xa8\xe5\x88\x86\xe5\x89\xb2\xe7\x82\xb9\xef\xbc\x8c\xe5\x88\x99\xe5\x88\x86\xe5\x89\xb2\n    if(len(projection)>1):\n        # \xe5\xa6\x82\xe6\x9e\x9c\xe8\x83\xbd\xe5\xa4\x9f\xe5\x88\x86\xe5\x89\xb2\xef\xbc\x8c\xe6\x89\x8d\xe5\xaf\xb9\xe5\xad\x97\xe7\xac\xa6\xe8\xbf\x9b\xe8\xa1\x8c\xe7\x9c\x9f\xe6\xad\xa3\xe6\x8e\x92\xe5\xba\x8f\n        characters.sort(key=lambda x: x[\'location\'][i])\n        locations = [x[\'location\'] for x in characters]\n        start_index = 0\n        end_index = 0\n        # \xe5\xaf\xb9\xe4\xba\x8e\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\x88\x86\xe5\x89\xb2\xef\xbc\x8c\xe8\x8e\xb7\xe5\xbe\x97\xe5\x9c\xa8\xe8\xbf\x99\xe4\xb8\xaa\xe5\x88\x86\xe5\x89\xb2\xe9\x87\x8c\xe9\x9d\xa2\xe7\x9a\x84characters\n        for line_segment in projection:\n            # \xe7\xa1\xae\xe5\xae\x9a\xe5\xb1\x9e\xe4\xba\x8eline_segment\xe7\x9a\x84characters\n            start_index = end_index\n            for end_index in range(start_index,len(locations)):\n                x11,x12 = locations[end_index][i],locations[end_index][i]+locations[end_index][i+2]\n                x21,x22 = line_segment[0],line_segment[1]\n                if(x11>=x21 and x12<=x22):\n                    end_index += 1\n                else:\n                    break\n            # \xe6\x88\xaa\xe5\x8f\x96characters[start_index:end_index],\xe5\xa6\x82\xe6\x9e\x9c\xe9\x95\xbf\xe5\xba\xa6\xe5\xa4\xa7\xe4\xba\x8e1\xef\xbc\x8c\xe7\xbb\xa7\xe7\xbb\xad\xe9\x80\x92\xe5\xbd\x92\xe8\xb0\x83\xe7\x94\xa8sort_characters\xe6\x8e\x92\xe5\xba\x8f\n            location_segment = locations[start_index:end_index]\n            character_segment = characters[start_index:end_index]\n            # print(\'\xe5\x88\x87\xe5\x89\xb2\xe5\x90\x8e\xe7\x9a\x84location\',location_segment)\n            if(len(location_segment)>1):\n                projection_type = (i+1)%2\n                sorted_character_segment = sort_characters(character_segment,projection_type)\n                characters[start_index:end_index] = sorted_character_segment\n    # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x89\xbe\xe4\xb8\x8d\xe5\x88\xb0\xe7\xab\x96\xe7\x9b\xb4\xe6\x88\x96\xe8\x80\x85\xe6\xb0\xb4\xe5\xb9\xb3\xe5\x88\x87\xe5\x89\xb2\xe7\x82\xb9\xef\xbc\x8c\xe5\x88\x99\xe8\xbf\x94\xe5\x9b\x9e\xe6\x8e\x92\xe5\xa5\xbd\xe5\xba\x8f\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe5\xba\x8f\xe5\x88\x97\n    # \xe5\xa4\x84\xe7\x90\x86\xe7\xab\x8b\xe6\x96\xb9\xe6\xa0\xb9\n    length = len(characters)\n    for i in range(length):\n        character = characters[i]\n        # if i+1 <length:\n            # print(\'modify 1\',get_spatial_relationship(character[\'location\'], characters[i + 1][\'location\']) == \\\n            #     SPACIAL_RELATIONSHIP[\'left_up\'])\n        if i + 1 < length and get_spatial_relationship(character[\'location\'], characters[i + 1][\'location\']) == \\\n                SPACIAL_RELATIONSHIP[\'left_up\']:\n            t = character\n            characters[i] = characters[i + 1]\n            characters[i + 1] = t\n            i = i + 1\n            # print(\'sqrt modify\',node_list)\n    return characters\n\n# \xe6\xb7\xbb\xe5\x8a\xa0\xe7\xbb\x8f\xe9\xaa\x8c\xe8\xa7\x84\xe5\x88\x99\n# 1.\xe8\x8b\xa5\xe5\x8f\xb3\xe6\x8b\xac\xe5\x8f\xb7\xe6\x95\xb0\xe4\xb8\xba0\xef\xbc\x8c\'\xef\xbc\x89\'\xe8\xaf\x86\xe5\x88\xab\xe4\xb8\xba1\n# 2.\xe8\x8b\xa5\xe4\xb9\x98\xe5\x8f\xb7\xe5\x8f\xb3\xe8\xbe\xb9\xe4\xbb\x8d\xe6\x98\xaf\xe6\x93\x8d\xe4\xbd\x9c\xe7\xac\xa6\xe6\x88\x96\xe8\x80\x85\xe4\xb8\xba\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaatoken\xef\xbc\x8c\xe8\xaf\x86\xe5\x88\xab\xe4\xb8\xbax\ndef modify_characters(characters):\n    length = len(characters)\n    left_bracket = 0\n    for i in range(length):\n        c = characters[i][\'candidates\'][0][\'symbol\']\n        # print(\'(((((((((((((\',c,left_bracket)\n        # print(left_bracket)\n        # if c == \'(\':\n        #     j = i+1\n        #     # \xe5\xa6\x82\xe6\x9e\x9c\xef\xbc\x88\xe5\x90\x8e\xe7\xbb\xad\xe6\x97\xa0\xef\xbc\x89\xef\xbc\x8c\xe5\x88\x99\xe5\x8c\xb9\xe9\x85\x8d\xe6\x88\x901\n        #     while j<length and characters[j][\'candidates\'][0][\'symbol\']!=\')\':\n        #         j = j+1\n        #     if j<length:\n        #         left_bracket = left_bracket + 1\n        #     else:\n        #         characters[i][\'candidates\'][0][\'symbol\'] = \'1\'\n        # if c == \')\':\n        #     # print(\')))))))))))))\',left_bracket)\n        #     if left_bracket == 0:\n        #         characters[i][\'candidates\'][0][\'symbol\'] = \'1\'\n        #     else:\n        #         left_bracket = left_bracket - 1\n        if c == \'times\' and (i == length-1 or\\\n             characters[i+1][\'candidates\'][0][\'symbol\'] in OPERATOR \\\n            or characters[i+1][\'candidates\'][0][\'symbol\'] in CMP):\n            characters[i][\'candidates\'][0][\'symbol\'] = \'x\'\n        if c == \'times\' and i>0 and not(characters[i-1][\'candidates\'][0][\'symbol\'] in OPERATABLE):\n            characters[i][\'candidates\'][0][\'symbol\'] = \'x\'\n        if c == \'times\' and i+1 <length and characters[i + 1][\'candidates\'][0][\'symbol\'] == \'d\':\n            characters[i][\'candidates\'][0][\'symbol\'] = \'x\'\n        if c == \'times\' and i+1 <length and characters[i + 1][\'candidates\'][0][\'symbol\'].isdigit() and\\\n                get_spatial_relationship(characters[i][\'location\'],characters[i+1][\'location\'])==SPACIAL_RELATIONSHIP[\'superscript\']:\n            characters[i][\'candidates\'][0][\'symbol\'] = \'x\'\n\n        # if c == \'x\' and isinstance(int(characters[i+1][\'candidates\'][0][\'symbol\']),int):\n        #     characters[i][\'candidates\'][0][\'symbol\'] = \'times\'\n        if c == \'pi\' and i>0 and characters[i-1][\'candidates\'][0][\'symbol\'] == \'lim\':\n            characters[i][\'candidates\'][0][\'symbol\'] = \'x\'\n        if c ==\',\' and i>0 and get_spatial_relationship(characters[i-1][\'location\'],characters[i][\'location\'])\\\n                == SPACIAL_RELATIONSHIP[\'superscript\'] and (characters[i-1][\'candidates\'][0][\'symbol\'] in [\')\',\'x\'] or \\\n                                                            characters[i - 1][\'candidates\'][0][\'symbol\'].isdigit()) :\n            pass\n        elif c == \',\':\n            characters[i][\'candidates\'][0][\'symbol\'] = \'1\'\n        if c == \'d\' and i+1<length and characters[i+1][\'candidates\'][0][\'symbol\'] == \'pi\':\n            characters[i + 1][\'candidates\'][0][\'symbol\'] = \'x\'\n        #  \xe9\xbb\x98\xe8\xae\xa4lim\xe5\x90\x8e\xe9\x9d\xa2\xe8\xb7\x9f\xe7\x9d\x80x\n        if c == \'lim\' and i+1<length and characters[i+1][\'candidates\'][0][\'symbol\'] != \'x\':\n            characters[i + 1][\'candidates\'][0][\'symbol\'] = \'x\'\n        # if c == \'1\' and i>0 and get_spatial_relationship(characters[i-1][\'location\'],characters[i][\'location\'])\\\n        #         == SPACIAL_RELATIONSHIP[\'superscript\']:\n        #     characters[i ][\'candidates\'][0][\'symbol\'] = \',\'\n\n# \xe5\x90\x88\xe5\xb9\xb6\xe5\xa4\x9a\xe4\xb8\xaa\xe7\x9f\xa9\xe5\xbd\xa2\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe4\xb8\x80\xe4\xb8\xaa\xe5\xa4\xa7\xe7\x9f\xa9\xe5\xbd\xa2\ndef join_locations(locations):\n    boundarys = [[x[0],x[1],x[0]+x[2],x[1]+x[3]] for x in locations]\n    # print(boundarys)\n    minx,miny,maxx,maxy = np.infty,np.infty,0,0\n    for boundary in boundarys:\n        # print(boundary,[minx,miny,maxx,maxy])\n        if(boundary[0]<minx):\n            minx=boundary[0]\n        if (boundary[1] < miny):\n            miny = boundary[1]\n        if (boundary[2] > maxx):\n            maxx = boundary[2]\n        if (boundary[3] > maxy):\n            maxy = boundary[3]\n    return [minx,miny,maxx-minx,maxy-miny]\n\n# \xe7\x94\x9f\xe6\x88\x90\xe4\xb8\x80\xe4\xb8\xaalocation1 \xe5\x88\xb0 location2\xe4\xb8\xad\xe9\x97\xb4\xe7\x9a\x84location,\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xa4\xe4\xb8\xaalocation\xe4\xb8\x8d\xe7\x9b\xb8\xe4\xba\xa4\ndef get_location_between(location1,location2):\n    height = min(location1[3],location2[3])\n    weight = location2[0]-location1[0]-location1[2]-2\n    x = location1[0]+location1[2]+1\n    y = location1[1]\n    return [x,y,weight,height]\n\n# \xe9\x80\x9a\xe8\xbf\x87value\xe8\x8e\xb7\xe5\x8f\x96\xe5\xad\x97\xe5\x85\xb8\xe7\x9a\x84key\ndef get_keys(d, value):\n    return [k for k,v in d.items() if v == value]\n\n# \xe6\x89\x93\xe5\x8d\xb0\xe8\xa7\xa3\xe6\x9e\x90\xe6\xa0\x91\xef\xbc\x8c\xe5\x85\x88\xe5\xba\x8f\xe9\x81\x8d\xe5\x8e\x86parser_tree,\xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf\xe5\x8f\xb6\xe5\xad\x90\xe8\x8a\x82\xe7\x82\xb9\xef\xbc\x8c\xe5\x8d\xb3\xe6\x89\x93\xe5\x8d\xb0\ndef print_parser_tree(node,latex_str):\n    if isinstance(node,dict) and len(node) and isinstance(node[\'structure\'],list):\n        for child in node[\'structure\']:\n            latex_str = print_parser_tree(child,latex_str)\n    elif isinstance(node,dict) and len(node):\n        print(node[\'structure\'],end=\'\')\n        latex_str = latex_str + str(node[\'structure\'])\n\n    else:\n        if node == \'div\':\n            print(\'/\',end = \'\')\n            latex_str = latex_str + ""\\\\div""\n        elif node == \'times\':\n            print(\'*\',end=\'\')\n            latex_str = latex_str + ""\\\\times""\n        else:\n            print(node,end=\'\')\n            latex_str = latex_str + node\n    return latex_str\n\n\n# \xe5\xae\x9a\xe4\xb9\x89\xe4\xbb\x8e\xe8\xa7\xa3\xe5\x88\xb0\xe8\xbe\x93\xe5\x87\xba\xe7\xbb\x93\xe6\x9e\x9c\xe7\x9a\x84\xe6\xa0\xbc\xe5\xbc\x8f\ndef result_to_str(result):\n    result_str = \'\'\n    if len(result)==1:\n        result_str = \'x=\'+str(result[0])\n        return result_str\n    for i in range(len(result)-1):\n        x = result[i]\n        result_str = result_str + \'x\'+str(i+1)+\'=\' + str(x) + \',\'\n    result_str = result_str + \'x\'+str(len(result))+\'=\' + str(result[len(result)-1])\n    return result_str'"
系统代码(code)/tools/cnn_model.py,53,"b'from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom config import MODEL_DIR,SYMBOLS\nfrom tools.image_input import read_img_file\nimport tensorflow as tf\nimport numpy as np\nfrom matplotlib import pyplot as plt\ntf.logging.set_verbosity(tf.logging.INFO)\ndef cnn_model_fn(features, labels, mode):\n  """"""Model function for CNN.""""""\n  # Input Layer\n  # Reshape X to 4-D tensor: [batch_size, width, height, channels]\n  # MNIST images are 28x28 pixels, and have one color channel\n  input_layer = tf.reshape(features[""x""], [-1, 45, 45, 1])\n\n  # Convolutional Layer #1\n  # Computes 32 features using a 5x5 filter with ReLU activation.\n  # Padding is added to preserve width and height.\n  # Input Tensor Shape: [batch_size, 28, 28, 1]\n  # Output Tensor Shape: [batch_size, 28, 28, 32]\n  conv1 = tf.layers.conv2d(\n      inputs=input_layer,\n      filters=32,\n      kernel_size=[3, 3],\n      padding=""same"",\n      activation=tf.nn.relu)\n\n  # Pooling Layer #1\n  # First max pooling layer with a 3x3 filter and stride of 3\n  # Input Tensor Shape: [batch_size, 45, 45, 32]\n  # Output Tensor Shape: [batch_size, 15, 15, 32]\n  pool1 = tf.layers.max_pooling2d(inputs=conv1, pool_size=[3, 3], strides=3)\n\n  # Convolutional Layer #2\n  # Computes 64 features using a 5x5 filter.\n  # Padding is added to preserve width and height.\n  # Input Tensor Shape: [batch_size, 15, 15, 32]\n  # Output Tensor Shape: [batch_size, 15, 15, 64]\n  conv2 = tf.layers.conv2d(\n      inputs=pool1,\n      filters=64,\n      kernel_size=[3, 3],\n      padding=""same"",\n      activation=tf.nn.relu)\n\n  # Pooling Layer #2\n  # Second max pooling layer with a 3x3 filter and stride of 3\n  # Input Tensor Shape: [batch_size, 15, 15, 64]\n  # Output Tensor Shape: [batch_size, 5, 5, 64]\n  pool2 = tf.layers.max_pooling2d(inputs=conv2, pool_size=[3, 3], strides=3)\n\n  # Flatten tensor into a batch of vectors\n  # Input Tensor Shape: [batch_size, 5, 5, 64]\n  # Output Tensor Shape: [batch_size, 5 * 5 * 64]\n  pool2_flat = tf.reshape(pool2, [-1, 5 * 5 * 64])\n\n  # Dense Layer\n  # Densely connected layer with 1024 neurons\n  # Input Tensor Shape: [batch_size, 5 * 5 * 64]\n  # Output Tensor Shape: [batch_size, 1024]\n  dense = tf.layers.dense(inputs=pool2_flat, units=1024, activation=tf.nn.relu)\n\n  # Add dropout operation; 0.6 probability that element will be kept\n  dropout = tf.layers.dropout(\n      inputs=dense, rate=0.4, training=mode == tf.estimator.ModeKeys.TRAIN)\n\n  # Logits layer\n  # Input Tensor Shape: [batch_size, 1024]\n  # Output Tensor Shape: [batch_size, 32]\n  logits = tf.layers.dense(inputs=dropout, units=32)\n\n  predictions = {\n      # Generate predictions (for PREDICT and EVAL mode)\n      ""classes"": tf.argmax(input=logits, axis=1),\n      # Add `softmax_tensor` to the graph. It is used for PREDICT and by the\n      # `logging_hook`.\n      ""probabilities"": tf.nn.softmax(logits, name=""softmax_tensor"")\n  }\n  if mode == tf.estimator.ModeKeys.PREDICT:\n    # sess = tf.InteractiveSession()\n    # print(\'logits:\',logits.eval(session = sess))\n    return tf.estimator.EstimatorSpec(mode=mode, predictions=predictions)\n\n  # Calculate Loss (for both TRAIN and EVAL modes)\n  loss = tf.losses.sparse_softmax_cross_entropy(labels=labels, logits=logits)\n\n  # Configure the Training Op (for TRAIN mode)\n  if mode == tf.estimator.ModeKeys.TRAIN:\n    optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.001)\n    train_op = optimizer.minimize(\n        loss=loss,\n        global_step=tf.train.get_global_step())\n    return tf.estimator.EstimatorSpec(mode=mode, loss=loss, train_op=train_op)\n\n  # Add evaluation metrics (for EVAL mode)\n  eval_metric_ops = {\n      ""accuracy"": tf.metrics.accuracy(\n          labels=labels, predictions=predictions[""classes""])}\n  return tf.estimator.EstimatorSpec(\n      mode=mode, loss=loss, eval_metric_ops=eval_metric_ops)\n# def cnn_model_fn(features, labels, mode):\n#   """"""Model function for CNN.""""""\n#   # Input Layer\n#   # Reshape X to 4-D tensor: [batch_size, width, height, channels]\n#   # MNIST images are 28x28 pixels, and have one color channel\n#   input_layer = tf.reshape(features[""x""], [-1, 45, 45, 1])\n#\n#   # Convolutional Layer #1\n#   # Computes 32 features using a 5x5 filter with ReLU activation.\n#   # Padding is added to preserve width and height.\n#   # Input Tensor Shape: [batch_size, 28, 28, 1]\n#   # Output Tensor Shape: [batch_size, 28, 28, 32]\n#   conv1 = tf.layers.conv2d(\n#       inputs=input_layer,\n#       filters=32,\n#       kernel_size=[5, 5],\n#       padding=""same"",\n#       activation=tf.nn.relu)\n#\n#   # Pooling Layer #1\n#   # First max pooling layer with a 3x3 filter and stride of 3\n#   # Input Tensor Shape: [batch_size, 45, 45, 32]\n#   # Output Tensor Shape: [batch_size, 15, 15, 32]\n#   pool1 = tf.layers.max_pooling2d(inputs=conv1, pool_size=[3, 3], strides=3)\n#\n#   # Convolutional Layer #2\n#   # Computes 64 features using a 5x5 filter.\n#   # Padding is added to preserve width and height.\n#   # Input Tensor Shape: [batch_size, 15, 15, 32]\n#   # Output Tensor Shape: [batch_size, 15, 15, 64]\n#   conv2 = tf.layers.conv2d(\n#       inputs=pool1,\n#       filters=64,\n#       kernel_size=[5, 5],\n#       padding=""same"",\n#       activation=tf.nn.relu)\n#\n#   # Pooling Layer #2\n#   # Second max pooling layer with a 3x3 filter and stride of 3\n#   # Input Tensor Shape: [batch_size, 15, 15, 64]\n#   # Output Tensor Shape: [batch_size, 5, 5, 64]\n#   pool2 = tf.layers.max_pooling2d(inputs=conv2, pool_size=[3, 3], strides=3)\n#\n#   # Flatten tensor into a batch of vectors\n#   # Input Tensor Shape: [batch_size, 5, 5, 64]\n#   # Output Tensor Shape: [batch_size, 5 * 5 * 64]\n#   pool2_flat = tf.reshape(pool2, [-1, 5 * 5 * 64])\n#\n#   # Dense Layer\n#   # Densely connected layer with 1024 neurons\n#   # Input Tensor Shape: [batch_size, 5 * 5 * 64]\n#   # Output Tensor Shape: [batch_size, 1024]\n#   dense = tf.layers.dense(inputs=pool2_flat, units=1024, activation=tf.nn.relu)\n#\n#   # Add dropout operation; 0.6 probability that element will be kept\n#   dropout = tf.layers.dropout(\n#       inputs=dense, rate=0.4, training=mode == tf.estimator.ModeKeys.TRAIN)\n#\n#   # Logits layer\n#   # Input Tensor Shape: [batch_size, 1024]\n#   # Output Tensor Shape: [batch_size, 32]\n#   logits = tf.layers.dense(inputs=dropout, units=32)\n#\n#   predictions = {\n#       # Generate predictions (for PREDICT and EVAL mode)\n#       ""classes"": tf.argmax(input=logits, axis=1),\n#       # Add `softmax_tensor` to the graph. It is used for PREDICT and by the\n#       # `logging_hook`.\n#       ""probabilities"": tf.nn.softmax(logits, name=""softmax_tensor"")\n#   }\n#   if mode == tf.estimator.ModeKeys.PREDICT:\n#     return tf.estimator.EstimatorSpec(mode=mode, predictions=predictions)\n#\n#   # Calculate Loss (for both TRAIN and EVAL modes)\n#   loss = tf.losses.sparse_softmax_cross_entropy(labels=labels, logits=logits)\n#\n#   # Configure the Training Op (for TRAIN mode)\n#   if mode == tf.estimator.ModeKeys.TRAIN:\n#     optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.001)\n#     train_op = optimizer.minimize(\n#         loss=loss,\n#         global_step=tf.train.get_global_step())\n#     return tf.estimator.EstimatorSpec(mode=mode, loss=loss, train_op=train_op)\n#\n#   # Add evaluation metrics (for EVAL mode)\n#   eval_metric_ops = {\n#       ""accuracy"": tf.metrics.accuracy(\n#           labels=labels, predictions=predictions[""classes""])}\n#   return tf.estimator.EstimatorSpec(\n#       mode=mode, loss=loss, eval_metric_ops=eval_metric_ops)\n\n\n# \xe5\xae\x9a\xe4\xb9\x89\xe4\xb8\x80\xe4\xb8\xaa\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe4\xbe\x9b\xe5\x85\xb6\xe4\xbb\x96\xe6\xa8\xa1\xe5\x9d\x97\xe5\xbc\x95\xe7\x94\xa8\n# create the estimator\ncnn_symbol_classifier = tf.estimator.Estimator(\n  model_fn=cnn_model_fn, model_dir=MODEL_DIR)\n\n# cnn\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe8\xae\xad\xe7\xbb\x83\xe5\x87\xbd\xe6\x95\xb0\ndef train_cnn_model(steps):\n    train_data,train_data_labels = read_img_file(\'train\')\n\n    # set up logging for predictions\n    # log the values in the ""softmax"" tensor with label ""probabilities""\n    tensors_to_log = {""probabilities"": ""softmax_tensor""}\n    logging_hook = tf.train.LoggingTensorHook(tensors=tensors_to_log, every_n_iter=50)\n\n    # train the model\n    train_input_fn = tf.estimator.inputs.numpy_input_fn(\n        x={""x"": train_data},\n        y=train_data_labels,\n        batch_size=100,\n        num_epochs=None,\n        shuffle=True)\n    print(train_input_fn)\n    cnn_symbol_classifier.train(\n        input_fn=train_input_fn,\n        steps=steps,\n        hooks=[logging_hook])\n\ndef eval_cnn_model():\n    eval_data, eval_data_labels, filelist = read_img_file(\'eval\')\n    # evaluate the model and print results\n    eval_input_fn = tf.estimator.inputs.numpy_input_fn(\n        x={""x"": eval_data},\n        y=eval_data_labels,\n        num_epochs=1,\n        shuffle=False)\n    eval_results = cnn_symbol_classifier.evaluate(input_fn=eval_input_fn)\n    print(eval_results)\n\nif __name__ == ""__main__"":\n  tf.app.run()'"
系统代码(code)/tools/image_input.py,0,"b""#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n' a module to read image for trainning, evaluation and prediction '\n\n__author__ = 'Ajay'\n\n\nimport os\nimport cv2\nimport numpy as np\nfrom config import *\n# FILELIST = ['infty', 'rightarrow', 'div', 'times', 'point',\n#              'sin', '9', '0', '7', '+', ',', '6', '1', '8',\n#              'cos', '-', 'sqrt', 'pi', 'int', 'lim', 'log',\n#              '(', 'd', '=', '4', 'x', '3', 'tan', 'e', ')',\n#              '2', '5']\ndef read_img_file(type):\n    fileList1 = [x for x in os.listdir(RELEVANT_URL) if x in SYMBOLS]\n    # print(fileList1)\n    num_of_symbol = len(fileList1)\n    # print('num of symbol:',num_of_symbol)\n    distribute_table = []\n    train_total = 0\n    eval_total = 0\n    for j in range(num_of_symbol):\n        characterPath = os.path.join(RELEVANT_URL, fileList1[j])\n        fileList2 = [x for x in os.listdir(characterPath) if x.split('.')[-1] == 'jpg']\n        # print(fileList2)\n        length = len(fileList2)\n        if length >= NUMBER_OF_PICTURES:\n            distribute = {'num_of_train': int(TRAININT_RATIO * NUMBER_OF_PICTURES),\n                          'num_of_eval': int(EVAL_RATIO * NUMBER_OF_PICTURES),\n                          'start_train':int(train_total),\n                          'start_eval':int(eval_total)}\n            train_total = train_total + int(TRAININT_RATIO * NUMBER_OF_PICTURES)\n            eval_total = eval_total + int(EVAL_RATIO * NUMBER_OF_PICTURES)\n        else:\n            distribute = {'num_of_train': int(TRAININT_RATIO * length),\n                          'num_of_eval': int(EVAL_RATIO * length),\n                          'start_train': int(train_total),\n                          'start_eval': int(eval_total)\n                          }\n            train_total = train_total + int(TRAININT_RATIO * length)\n            eval_total = eval_total + int(EVAL_RATIO * length)\n        distribute_table.append(distribute)\n    # for i in range(num_of_symbol):\n    #     print(i,distribute_table[i])\n    # print(train_total,eval_total)\n    if type == 'train':\n        images = np.ndarray((train_total , PICTURE_SIZE * PICTURE_SIZE), np.float32)\n        images_label = np.ndarray(train_total, np.int32)\n    else:\n        images = np.ndarray((eval_total , PICTURE_SIZE * PICTURE_SIZE), np.float32)\n        images_label = np.ndarray(eval_total , np.int32)\n\n    for j in range(num_of_symbol):\n        characterPath = os.path.join(RELEVANT_URL, fileList1[j])\n        fileList2 = [x for x in os.listdir(characterPath) if x.split('.')[-1] == 'jpg']\n        if type == 'train':\n            for i in range(distribute_table[j]['num_of_train']):\n                # print(j,distribute_table[j]['start_train'])\n                # print(os.path.join(characterPath, fileList2[i]))\n                img = cv2.imread(os.path.join(characterPath, fileList2[i]), 0)\n                images[distribute_table[j]['start_train'] + i] = img.reshape(img.shape[0] * img.shape[1])\n                images_label[distribute_table[j]['start_train'] + i] = j\n        elif type == 'eval':\n            for i in range(distribute_table[j]['num_of_eval']):\n                # # print(j, distribute_table[j]['start_eval'])\n                s = os.path.join(characterPath, fileList2[i+distribute_table[j]['num_of_train']])\n                if s.split('.')[-1] != 'jpg':\n                    print(s)\n                img = cv2.imread(os.path.join(characterPath, fileList2[i +distribute_table[j]['num_of_train']]), 0)\n                images[distribute_table[j]['start_eval'] + i] = img.reshape(img.shape[0] * img.shape[1])\n                images_label[distribute_table[j]['start_eval'] + i] = j\n        else:\n            raise ValueError('type must be one of those value:train or eval')\n    return images, images_label\n\n# def read_img_file(type):\n#   fileList1 = [x for x in os.listdir(RELEVANT_URL) if x in SYMBOLS]\n#   print(fileList1)\n#   num_of_symbol = len(fileList1)\n#   images = np.ndarray((NUMBER_OF_PICTURES * num_of_symbol, PICTURE_SIZE * PICTURE_SIZE), np.float32)\n#   images_label = np.ndarray(NUMBER_OF_PICTURES * num_of_symbol, np.int32)\n#\n#   for j in range(num_of_symbol):\n#       characterPath = os.path.join(RELEVANT_URL, fileList1[j])\n#       fileList2 = [x for x in os.listdir(characterPath)]\n#       for i in range(NUMBER_OF_PICTURES):\n#           if type == 'train':\n#               img = cv2.imread(os.path.join(characterPath, fileList2[i]), 0)\n#           elif type == 'eval':\n#               img = cv2.imread(os.path.join(characterPath, fileList2[i+NUMBER_OF_PICTURES]), 0)\n#           elif type == 'predict':\n#               img = cv2.imread(os.path.join(characterPath, fileList2[i + NUMBER_OF_PICTURES+NUMBER_OF_PICTURES]), 0)\n#           else:\n#               raise ValueError('type must be one of those value:train eval predict')\n#           images[j * NUMBER_OF_PICTURES + i] = img.reshape(img.shape[0] * img.shape[1])\n#           if(type == 'train' or type == 'eval'):\n#             images_label[j * NUMBER_OF_PICTURES + i] = j\n#   return images,images_label,fileList1\n#\n#\n"""
系统代码(code)/tools/img_preprocess.py,0,"b""import cv2\nimport numpy as np\nfrom skimage.morphology import skeletonize\nfrom config import IMG_SIZE,FILELIST,MODEL_DIR,\\\n    SPACIAL_RELATIONSHIP as spartial_relationship,\\\n    LARGEST_NUMBER_OF_SYMBOLS,SCALSIZE\nfrom matplotlib import pyplot as plot\n\n\n#\xe8\xaf\xbb\xe5\x8f\x96\xe5\x9b\xbe\xe7\x89\x87\xe5\xb9\xb6\xe5\xb0\x86\xe5\x9b\xbe\xe7\x89\x87\xe8\xbd\xac\xe5\x8c\x96\xe6\x88\x90\xe4\xba\x8c\xe5\x80\xbc\xe5\x9b\xbe,\xe8\xbf\x94\xe5\x9b\x9e\xe5\x8e\x9f\xe5\xbd\xa9\xe8\x89\xb2\xe5\x9b\xbe\xe5\x92\x8c\xe4\xba\x8c\xe5\x80\xbc\xe5\x9b\xbe\ndef read_img_and_convert_to_binary(filename):\n    #\xe8\xaf\xbb\xe5\x8f\x96\xe5\xbe\x85\xe5\xa4\x84\xe7\x90\x86\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\n    original_img = cv2.imread(filename)\n    # print(original_img)\n    #\xe5\xb0\x86\xe5\x8e\x9f\xe5\x9b\xbe\xe5\x88\x86\xe8\xbe\xa8\xe7\x8e\x87\xe7\xbc\xa9\xe5\xb0\x8fSCALSIZE\xe5\x80\x8d\xef\xbc\x8c\xe5\x87\x8f\xe5\xb0\x91\xe8\xae\xa1\xe7\xae\x97\xe5\xa4\x8d\xe6\x9d\x82\xe5\xba\xa6\n    original_img = cv2.resize(original_img,(np.int(original_img.shape[1]/SCALSIZE),np.int(original_img.shape[0]/SCALSIZE)), interpolation=cv2.INTER_AREA)\n    #\xe9\x99\x8d\xe5\x99\xaa\n    blur = cv2.GaussianBlur(original_img, (5, 5), 0)\n    #\xe5\xb0\x86\xe5\xbd\xa9\xe8\x89\xb2\xe5\x9b\xbe\xe8\xbd\xac\xe5\x8c\x96\xe6\x88\x90\xe7\x81\xb0\xe5\xba\xa6\xe5\x9b\xbe\n    img_gray = cv2.cvtColor(blur,cv2.COLOR_BGR2GRAY)\n    #\xe5\x9b\xbe\xe7\x89\x87\xe5\xbc\x80\xef\xbc\x88opening\xef\xbc\x89\xe5\xa4\x84\xe7\x90\x86\xef\xbc\x8c\xe7\x94\xa8\xe6\x9d\xa5\xe9\x99\x8d\xe5\x99\xaa\xef\xbc\x8c\xe4\xbd\xbf\xe5\x9b\xbe\xe7\x89\x87\xe4\xb8\xad\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe8\xbe\xb9\xe7\x95\x8c\xe6\x9b\xb4\xe5\x9c\x86\xe6\xbb\x91\xef\xbc\x8c\xe6\xb2\xa1\xe6\x9c\x89\xe7\x9a\xb1\xe8\xa4\xb6\n    kernel = np.ones((3, 3), np.uint8)\n    opening = cv2.morphologyEx(img_gray, cv2.MORPH_OPEN, kernel)\n\n    kernel2 = np.ones((3,3), np.uint8)\n    opening = cv2.dilate(opening, kernel2, iterations=1)\n    # Otsu's thresholding after Gaussian filtering\n    # \xe9\x87\x87\xe7\x94\xa8otsu\xe9\x98\x88\xe5\x80\xbc\xe6\xb3\x95\xe5\xb0\x86\xe7\x81\xb0\xe5\xba\xa6\xe5\x9b\xbe\xe8\xbd\xac\xe5\x8c\x96\xe6\x88\x90\xe5\x8f\xaa\xe6\x9c\x890\xe5\x92\x8c1\xe7\x9a\x84\xe4\xba\x8c\xe5\x80\xbc\xe5\x9b\xbe\n    blur = cv2.GaussianBlur(opening,(13,13),0)\n    #ret, binary_img = cv2.threshold(img_gray, 120, 1, cv2.THRESH_BINARY_INV)\n    ret,binary_img = cv2.threshold(blur,0,1,cv2.THRESH_BINARY_INV+cv2.THRESH_OTSU)\n    return original_img,binary_img\n\n# \xe4\xbb\x8eimg\xe6\x88\xaa\xe5\x8f\x96location\xe5\x8c\xba\xe5\x9f\x9f\xe7\x9a\x84\xe5\x9b\xbe\xe5\x83\x8f\xef\xbc\x8c\xe5\xb9\xb6\xe5\xbd\x92\xe4\xb8\x80\xe5\x8c\x96\xe6\x88\x90IMG_SIZE*IMG_SIZE\ndef extract_img(location,img,contour=None):\n    x,y,w,h=location\n    # \xe5\x8f\xaa\xe6\x8f\x90\xe5\x8f\x96\xe8\xbd\xae\xe5\xbb\x93\xe5\x86\x85\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\n    if contour is None:\n        extracted_img = img[y:y + h, x:x + w]\n    else:\n        mask = np.zeros(img.shape, np.uint8)\n        cv2.drawContours(mask, [contour], -1, 255, cv2.FILLED)\n        img_after_masked = cv2.bitwise_and(mask, img)\n        extracted_img = img_after_masked[y:y + h, x:x + w]\n    # \xe5\xb0\x86\xe6\x8f\x90\xe5\x8f\x96\xe5\x87\xba\xe7\x9a\x84img\xe5\xbd\x92\xe4\xb8\x80\xe5\x8c\x96\xe6\x88\x90IMG_SIZE*IMG_SIZE\xe5\xa4\xa7\xe5\xb0\x8f\xe7\x9a\x84\xe4\xba\x8c\xe5\x80\xbc\xe5\x9b\xbe\n    black = np.zeros((IMG_SIZE, IMG_SIZE), np.uint8)\n    if (w > h):\n        res = cv2.resize(extracted_img, (IMG_SIZE, (int)(h * IMG_SIZE / w)), interpolation=cv2.INTER_AREA)\n        d = int(abs(res.shape[0] - res.shape[1]) / 2)\n        black[d:res.shape[0] + d, 0:res.shape[1]] = res\n    else:\n        res = cv2.resize(extracted_img, ((int)(w * IMG_SIZE / h), IMG_SIZE), interpolation=cv2.INTER_AREA)\n        d = int(abs(res.shape[0] - res.shape[1]) / 2)\n        black[0:res.shape[0], d:res.shape[1] + d] = res\n    extracted_img = skeletonize(black)\n    extracted_img = np.logical_not(extracted_img)\n    return extracted_img\n\n#\xe5\xb0\x86\xe4\xba\x8c\xe5\x80\xbc\xe5\x9b\xbe\xe9\x87\x8c\xe9\x9d\xa2\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe5\x88\x87\xe5\x89\xb2\xe6\x88\x90\xe5\x8d\x95\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe4\xb8\x89\xe7\xbb\xb4\xe6\x95\xb0\xe7\xbb\x84\xef\xbc\x8c\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\x83\xe7\xb4\xa0\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe5\x85\xb8\xef\xbc\x8c\xe5\x8c\x85\xe5\x90\xab\xe5\xad\x97\xe7\xac\xa6\xe6\x89\x80\xe5\x9c\xa8\xe4\xbd\x8d\xe7\xbd\xae\xe5\xa4\xa7\xe5\xb0\x8flocation\xef\xbc\x8c\xe4\xbb\xa5\xe5\x8f\x8a\xe5\xad\x97\xe7\xac\xa6\xe5\x88\x87\xe5\x89\xb2\xe5\x9b\xbesrc_img\ndef binary_img_segment(binary_img,original_img=None):\n    # binary_img = skeletonize(binary_img)\n    # plot.imshow( binary_img,cmap = 'gray', interpolation = 'bicubic')\n    # plot.show()\n    #\xe5\xaf\xbb\xe6\x89\xbe\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe7\x9a\x84\xe8\xbd\xae\xe5\xbb\x93\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8cv2.RETR_EXTERNAL\xe6\xa8\xa1\xe5\xbc\x8f\xef\xbc\x8c\xe8\xa1\xa8\xe7\xa4\xba\xe5\x8f\xaa\xe9\x9c\x80\xe8\xa6\x81\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe6\x9c\x80\xe5\xa4\x96\xe9\x9d\xa2\xe7\x9a\x84\xe8\xbd\xae\xe5\xbb\x93\n    img, contours, hierarchy = cv2.findContours(binary_img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)#cv2.RETR_TREE\n    #cv2.drawContours(img_original, contours, -1, (0, 255, 0), 2)\n    if len(contours) > LARGEST_NUMBER_OF_SYMBOLS:\n        raise ValueError('symtem cannot interpret this image!')\n    symbol_segment_location = []\n    # \xe5\xb0\x86\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe8\x81\x94\xe9\x80\x9a\xe4\xbd\x93\xef\xbc\x8c\xe4\xbd\x9c\xe4\xb8\xba\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\n    symbol_segment_list = []\n    index = 1\n    for contour in contours:\n        location = cv2.boundingRect(contour)\n        x, y, w, h = location\n        if(w*h<100):\n            continue\n        symbol_segment_location.append(location)\n        # \xe5\x8f\xaa\xe6\x8f\x90\xe5\x8f\x96\xe8\xbd\xae\xe5\xbb\x93\xe5\x86\x85\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\n        extracted_img = extract_img(location,img,contour)\n        symbol_segment_list.append(extracted_img)\n        if len(original_img):\n            cv2.rectangle(original_img, (x, y), (x + w, y + h), (0, 0, 255), 3)\n        symbols=[]\n        for i in range(len(symbol_segment_location)):\n            symbols.append({'location':symbol_segment_location[i],'src_img':symbol_segment_list[i]})\n        # \xe5\xaf\xb9\xe5\xad\x97\xe7\xac\xa6\xe6\x8c\x89\xe5\xad\x97\xe7\xac\xa6\xe6\xa8\xaa\xe5\x9d\x90\xe6\xa0\x87\xe6\x8e\x92\xe5\xba\x8f\n        symbols.sort(key=lambda x:x['location'][0])\n    return symbols\n\n\n"""
系统代码(code)/tools/train_and_eval_model.py,3,"b'import os\nimport cv2\nimport numpy as np\nfrom config import *\nimport tensorflow as tf\nfrom tools.cnn_model import cnn_symbol_classifier\nfrom tools.image_input import *\n\n\n\n# def main(unused_argv):\ntrain_data,train_data_labels = read_img_file(\'train\')\neval_data,eval_data_labels = read_img_file(\'eval\')\n\n# set up logging for predictions\n# log the values in the ""softmax"" tensor with label ""probabilities""\ntensors_to_log = {""probabilities"": ""softmax_tensor""}\nlogging_hook = tf.train.LoggingTensorHook(tensors=tensors_to_log, every_n_iter=50)\n#\xe8\xbf\x99\xe6\x98\xaf\xe8\xae\xad\xe7\xbb\x83cnn\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe9\x9c\x80\xe8\xa6\x81\xe7\xbb\xa7\xe7\xbb\xad\xe8\xae\xad\xe7\xbb\x83\xef\xbc\x8c\xe5\x88\x99\xe5\x8e\xbb\xe9\x99\xa4\xe4\xb8\x8b\xe9\x9d\xa2\xe7\x9a\x84\xe6\xb3\xa8\xe9\x87\x8a\xef\xbc\x8c\xe4\xb8\x80\xe8\x88\xac\xe6\x83\x85\xe5\x86\xb5\xe4\xb8\x8b\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe5\x86\x8d\xe8\xae\xad\xe7\xbb\x83\n# # train the model\n# train_input_fn = tf.estimator.inputs.numpy_input_fn(\n#     x={""x"": train_data},\n#     y=train_data_labels,\n#     batch_size=100,\n#     num_epochs=None,\n#     shuffle=True)\n# # print(train_input_fn)\n# cnn_symbol_classifier.train(\n#     input_fn=train_input_fn,\n#     steps=TRAINING_STEPS,\n#     hooks=[logging_hook])\n\n# evaluate the model and print results\neval_input_fn = tf.estimator.inputs.numpy_input_fn(\n    x={""x"": eval_data},\n    y=eval_data_labels,\n    num_epochs=1,\n    shuffle=False)\neval_results = cnn_symbol_classifier.evaluate(input_fn=eval_input_fn)\nprint(eval_results)'"
