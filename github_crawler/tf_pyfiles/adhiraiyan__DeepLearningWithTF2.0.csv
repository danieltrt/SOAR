file_path,api_count,code
notebooks/helpers.py,4,"b'import matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon\nimport numpy as np\nimport tensorflow as tf\n\n\ndef vector_plot(vecs, xlim, ylim, cols=[""#1190FF"", ""#FF9A13""], alpha=1):\n    plt.rc_context({\'axes.edgecolor\':\'orange\', \'xtick.color\':\'red\', \'ytick.color\':\'red\'})\n    plt.axvline(x=0, color=\'k\', zorder=0)\n    plt.axhline(y=0, color=\'k\', zorder=0)\n\n    for i in range(len(vecs)):\n        if (isinstance(alpha, list)):\n            alpha_i = alpha[i]\n        else:\n            alpha_i = alpha\n        x = np.concatenate([[0,0],vecs[i]])\n        plt.quiver([x[0]],\n                   [x[1]],\n                   [x[2]],\n                   [x[3]],\n                   angles=\'xy\', scale_units=\'xy\', scale=1, color=cols[i],\n                  alpha=alpha_i)\n    plt.ylim(-xlim, xlim)\n    plt.xlim(-ylim, ylim)\n    plt.grid()\n\n\ndef plot_vector2d(vector2d, origin=[0, 0], **options):\n    return plt.arrow(origin[0], origin[1], vector2d[0], vector2d[1],\n              head_width=0.2, head_length=0.3, length_includes_head=True,\n              **options)\n\n\ndef plot_transform(P_before, P_after, text_before, text_after, name, color=[\'#FF9A13\', \'#1190FF\'], axis = [0, 5, 0, 4], arrows=False):\n    if arrows:\n        for vector_before, vector_after in zip(tf.transpose(P_before), tf.transpose(P_after)):\n            plot_vector2d(vector_before, color=""#FF9A13"", linestyle=""--"")\n            plot_vector2d(vector_after, color=""#1190FF"", linestyle=""-"")\n    plt.rc_context({\'axes.edgecolor\':\'orange\', \'xtick.color\':\'red\', \'ytick.color\':\'red\'})\n    plt.gca().add_artist(Polygon(tf.transpose(P_before), alpha=0.2))\n    plt.gca().add_artist(Polygon(tf.transpose(P_after), alpha=0.3, color=""#FF9A13""))\n    plt.text(-.25, 1, text_before, size=18, color=color[1])\n    plt.text(1.5, 0, text_after, size=18, color=color[0])\n    plt.title(name, color=\'w\')\n    plt.axis(axis)\n    plt.grid()\n\n\ndef evaluate(tensors):\n    """"""Evaluates Tensor or EagerTensor to Numpy `ndarray`s.\n    Args:\n    tensors: Object of `Tensor` or EagerTensor`s; can be `list`, `tuple`,\n      `namedtuple` or combinations thereof.\n\n    Returns:\n      ndarrays: Object with same structure as `tensors` except with `Tensor` or\n        `EagerTensor`s replaced by Numpy `ndarray`s.\n    """"""\n    return tf.nest.pack_sequence_as(tensors,[t.numpy() if tf.is_tensor(t) else t for t in tf.nest.flatten(tensors)])\n'"
tools/add_book_info.py,0,"b'import os\n\nimport nbformat\nfrom nbformat.v4.nbbase import new_markdown_cell\nimport re\n\nBOOK_COMMENT = ""<!--BOOK_INFORMATION-->""\n\n\nBOOK_INFO = BOOK_COMMENT + """"""\n<img align=""left"" style=""padding-right:10px;"" src=""figures/DLlogosmall.png"">\n\n*This notebook contains an excerpt from the [Deep Learning with Tensorflow 2.0](https://www.adhiraiyan.org/DeepLearningWithTensorflow.html) by Mukesh Mithrakumar. The code is released under the [MIT license](https://opensource.org/licenses/MIT) and is available for FREE [on GitHub](https://github.com/adhiraiyan/DeepLearningWithTF2.0).*\n\n*Open Source runs on love, laughter and a whole lot of coffee. Consider buying me [one](https://www.buymeacoffee.com/mmukesh) if you find this content useful!*\n\n""""""\n\nNOTEBOOK_DIR = os.path.join(os.path.dirname(__file__), \'..\', \'notebooks\')\nREG = re.compile(r\'(\\d\\d)\\.(\\d\\d)-(.*)\\.ipynb\')\n\ndef iter_notebooks():\n    return sorted(nb for nb in os.listdir(NOTEBOOK_DIR) if REG.match(nb))\n\n\ndef add_book_info():\n    for nb_name in iter_notebooks():\n        nb_file = os.path.join(NOTEBOOK_DIR, nb_name)\n        nb = nbformat.read(nb_file, as_version=4)\n\n        is_comment = lambda cell: cell.source.startswith(BOOK_COMMENT)\n\n        if is_comment(nb.cells[0]):\n            print(\'- amending comment for {0}\'.format(nb_name))\n            nb.cells[0].source = BOOK_INFO\n        else:\n            print(\'- inserting comment for {0}\'.format(nb_name))\n            nb.cells.insert(0, new_markdown_cell(BOOK_INFO))\n        nbformat.write(nb, nb_file)\n\n\nif __name__ == \'__main__\':\n    add_book_info()\n'"
tools/add_navigation.py,0,"b'import os\nimport itertools\nimport re\nfrom ipykernel import kernelspec as ks\nimport nbformat\nfrom nbformat.v4.nbbase import new_markdown_cell\n\n\nNOTEBOOK_DIR = os.path.join(os.path.dirname(__file__), \'..\', \'notebooks\')\nREG = re.compile(r\'(\\d\\d)\\.(\\d\\d)-(.*)\\.ipynb\')\n\n\ndef iter_notebooks():\n    return sorted(nb for nb in os.listdir(NOTEBOOK_DIR) if REG.match(nb))\n\n\ndef get_notebook_title(nb_file):\n    nb = nbformat.read(os.path.join(NOTEBOOK_DIR, nb_file), as_version=4)\n    for cell in nb.cells:\n        if cell.source.startswith(\'#\'):\n            return cell.source[1:].splitlines()[0].strip()\n\n\ndef prev_this_next(it):\n    a, b, c = itertools.tee(it,3)\n    next(c)\n    return zip(itertools.chain([None], a), b, itertools.chain(c, [None]))\n\n\nPREV_TEMPLATE = ""< [{title}]({url}) ""\nCONTENTS = ""| [Contents](Index.ipynb) |""\nNEXT_TEMPLATE = "" [{title}]({url}) >""\nNAV_COMMENT = ""<!--NAVIGATION-->\\n""\n\nCOLAB_LINK = """"""\n\n<a href=""https://colab.research.google.com/github/adhiraiyan/DeepLearningWithTF2.0/blob/master/notebooks/{notebook_filename}""><img align=""left"" src=""https://colab.research.google.com/assets/colab-badge.svg"" alt=""Open in Colab"" title=""Open and Execute in Google Colaboratory""></a>\n""""""\n\n\ndef iter_navbars():\n    for prev_nb, nb, next_nb in prev_this_next(iter_notebooks()):\n        navbar = NAV_COMMENT\n        if prev_nb:\n            navbar += PREV_TEMPLATE.format(title=get_notebook_title(prev_nb),\n                                           url=prev_nb)\n        navbar += CONTENTS\n        if next_nb:\n            navbar += NEXT_TEMPLATE.format(title=get_notebook_title(next_nb),\n                                           url=next_nb)\n\n        navbar += COLAB_LINK.format(notebook_filename=os.path.basename(nb))\n\n        yield os.path.join(NOTEBOOK_DIR, nb), navbar\n\n\ndef write_navbars():\n    for nb_name, navbar in iter_navbars():\n        nb = nbformat.read(nb_name, as_version=4)\n        nb_file = os.path.basename(nb_name)\n        is_comment = lambda cell: cell.source.startswith(NAV_COMMENT)\n\n        if is_comment(nb.cells[1]):\n            print(""- amending navbar for {0}"".format(nb_file))\n            nb.cells[1].source = navbar\n        else:\n            print(""- inserting navbar for {0}"".format(nb_file))\n            nb.cells.insert(1, new_markdown_cell(source=navbar))\n\n        if is_comment(nb.cells[-1]):\n            nb.cells[-1].source = navbar\n        else:\n            nb.cells.append(new_markdown_cell(source=navbar))\n        nbformat.write(nb, nb_name)\n\n\nif __name__ == \'__main__\':\n    write_navbars()\n'"
