file_path,api_count,code
capture.py,0,"b'# Copyright (C) 2017 DataArt\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport argparse\nimport logging.config\nimport threading\nimport time\nimport os\nimport numpy as np\nfrom scipy.io import wavfile\nfrom log_config import LOGGING\n\nfrom audio.captor import Captor\nfrom audio.processor import WavProcessor, format_predictions\n\n\nparser = argparse.ArgumentParser(description=\'Capture and process audio\')\nparser.add_argument(\'--min_time\', type=float, default=5, metavar=\'SECONDS\',\n                    help=\'Minimum capture time\')\nparser.add_argument(\'--max_time\', type=float, default=7, metavar=\'SECONDS\',\n                    help=\'Maximum capture time\')\nparser.add_argument(\'-s\', \'--save_path\', type=str, metavar=\'PATH\',\n                    help=\'Save captured audio samples to provided path\',\n                    dest=\'path\')\n\n\nlogging.config.dictConfig(LOGGING)\nlogger = logging.getLogger(\'audio_analysis.capture\')\n\n\nclass Capture(object):\n    _ask_data = None\n    _captor = None\n    _save_path = None\n    _processor_sleep_time = 0.01\n    _process_buf = None\n    _sample_rate = 16000\n\n    def __init__(self, min_time, max_time, path=None):\n        if path is not None:\n            if not os.path.exists(path):\n                raise FileNotFoundError(\'""{}"" doesn\\\'t exist\'.format(path))\n            if not os.path.isdir(path):\n                raise FileNotFoundError(\'""{}"" isn\\\'t a directory\'.format(path))\n\n        self._save_path = path\n        self._ask_data = threading.Event()\n        self._captor = Captor(min_time, max_time, self._ask_data, self._process)\n\n    def start(self):\n        self._captor.start()\n        self._process_loop()\n\n    def _process(self, data):\n        self._process_buf = np.frombuffer(data, dtype=np.int16)\n\n    def _process_loop(self):\n        with WavProcessor() as proc:\n            self._ask_data.set()\n            while True:\n                if self._process_buf is None:\n                    # Waiting for data to process\n                    time.sleep(self._processor_sleep_time)\n                    continue\n\n                self._ask_data.clear()\n                if self._save_path:\n                    f_path = os.path.join(\n                        self._save_path, \'record_{:.0f}.wav\'.format(time.time())\n                    )\n                    wavfile.write(f_path, self._sample_rate, self._process_buf)\n                    logger.info(\'""{}"" saved.\'.format(f_path))\n\n                logger.info(\'Start processing.\')\n                predictions = proc.get_predictions(\n                    self._sample_rate, self._process_buf)\n                logger.info(\n                    \'Predictions: {}\'.format(format_predictions(predictions))\n                )\n\n                logger.info(\'Stop processing.\')\n                self._process_buf = None\n                self._ask_data.set()\n\n\nif __name__ == \'__main__\':\n    args = parser.parse_args()\n    c = Capture(**vars(args))\n    c.start()\n'"
daemon.py,0,"b'# Copyright (C) 2017 DataArt\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\nimport time\nimport json\nimport threading\nimport logging.config\nimport datetime\nimport numpy as np\nfrom collections import deque\nfrom scipy.io import wavfile\nfrom devicehive_webconfig import Server, Handler\n\nfrom audio.captor import Captor\nfrom audio.processor import WavProcessor, format_predictions\nfrom web.routes import routes\n\nfrom log_config import LOGGING\n\nlogging.config.dictConfig(LOGGING)\nlogger = logging.getLogger(\'audio_analysis.daemon\')\n\n\nclass DeviceHiveHandler(Handler):\n    _device = None\n\n    def handle_connect(self):\n        self._device = self.api.put_device(self._device_id)\n        super(DeviceHiveHandler, self).handle_connect()\n\n    def send(self, data):\n        if isinstance(data, str):\n            notification = data\n        else:\n            try:\n                notification = json.dumps(data)\n            except TypeError:\n                notification = str(data)\n\n        self._device.send_notification(notification)\n\n\nclass Daemon(Server):\n    _process_thread = None\n    _process_buf = None\n    _ask_data_event = None\n    _shutdown_event = None\n    _captor = None\n    _sample_rate = 16000\n    _processor_sleep_time = 0.01\n\n    events_queue = None\n\n    def __init__(self, *args, **kwargs):\n        min_time = kwargs.pop(\'min_capture_time\', 5)\n        max_time = kwargs.pop(\'max_capture_time\', 5)\n        self._save_path = kwargs.pop(\'save_path\', None)\n\n        super(Daemon, self).__init__(*args, **kwargs)\n\n        self.events_queue = deque(maxlen=10)\n        self._ask_data_event = threading.Event()\n        self._shutdown_event = threading.Event()\n        self._process_thread = threading.Thread(target=self._process_loop,\n                                                name=\'processor\')\n        self._process_thread.setDaemon(True)\n\n        self._captor = Captor(min_time, max_time, self._ask_data_event,\n                              self._process, self._shutdown_event)\n\n    def _start_capture(self):\n        logger.info(\'Start captor\')\n        self._captor.start()\n\n    def _start_process(self):\n        logger.info(\'Start processor loop\')\n        self._process_thread.start()\n\n    def _process(self, data):\n        self._process_buf = np.frombuffer(data, dtype=np.int16)\n\n    def _on_startup(self):\n        self._start_process()\n        self._start_capture()\n\n    def _on_shutdown(self):\n        self._shutdown_event.set()\n\n    def _process_loop(self):\n        with WavProcessor() as proc:\n            self._ask_data_event.set()\n            while self.is_running:\n                if self._process_buf is None:\n                    # Waiting for data to process\n                    time.sleep(self._processor_sleep_time)\n                    continue\n\n                self._ask_data_event.clear()\n                if self._save_path:\n                    f_path = os.path.join(\n                        self._save_path, \'record_{:.0f}.wav\'.format(time.time())\n                    )\n                    wavfile.write(f_path, self._sample_rate, self._process_buf)\n                    logger.info(\'""{}"" saved\'.format(f_path))\n\n                logger.info(\'Start processing\')\n                predictions = proc.get_predictions(\n                    self._sample_rate, self._process_buf)\n                formatted = format_predictions(predictions)\n                logger.info(\'Predictions: {}\'.format(formatted))\n\n                self.events_queue.append((datetime.datetime.now(), formatted))\n                self._send_dh(predictions)\n\n                logger.info(\'Stop processing\')\n                self._process_buf = None\n                self._ask_data_event.set()\n\n    def _send_dh(self, data):\n        if not self.dh_status.connected:\n            logger.error(\'Devicehive is not connected\')\n            return\n\n        self.deviceHive.handler.send(data)\n\n\nif __name__ == \'__main__\':\n    server = Daemon(DeviceHiveHandler, routes=routes)\n    server.start()\n'"
log_config.py,0,"b'# Copyright (C) 2017 DataArt\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nLOGGING = {\n    \'version\': 1,\n    \'formatters\': {\n        \'simple\': {\n            \'format\': \'[%(levelname)s] %(asctime)s: %(message)s\'\n        },\n    },\n    \'handlers\': {\n        \'console\': {\n            \'level\': \'DEBUG\',\n            \'class\': \'logging.StreamHandler\',\n            \'formatter\': \'simple\'\n        },\n    },\n    \'loggers\': {\n        \'audio_analysis\': {\n            \'handlers\': [\'console\'],\n            \'level\': \'DEBUG\',\n            \'propagate\': False\n        },\n        \'dh_webconfig\': {\n            \'handlers\': [\'console\'],\n            \'level\': \'DEBUG\',\n            \'propagate\': False\n        },\n        \'devicehive\': {\n            \'handlers\': [\'console\'],\n            \'level\': \'DEBUG\',\n            \'propagate\': False\n        },\n    }\n}\n'"
parse_file.py,0,"b'# Copyright (C) 2017 DataArt\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport argparse\nimport numpy as np\nfrom scipy.io import wavfile\n\nparser = argparse.ArgumentParser(description=\'Read file and process audio\')\nparser.add_argument(\'wav_file\', type=str, help=\'File to read and process\')\n\n\ndef process_file(wav_file):\n    sr, data = wavfile.read(wav_file)\n    if data.dtype != np.int16:\n        raise TypeError(\'Bad sample type: %r\' % data.dtype)\n\n    # local import to reduce start-up time\n    from audio.processor import WavProcessor, format_predictions\n\n    with WavProcessor() as proc:\n        predictions = proc.get_predictions(sr, data)\n\n    print(format_predictions(predictions))\n\n\nif __name__ == \'__main__\':\n    args = parser.parse_args()\n    process_file(**vars(args))\n'"
audio/__init__.py,0,"b'# Copyright (C) 2017 DataArt\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n'"
audio/captor.py,0,"b'# Copyright (C) 2017 DataArt\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport threading\nimport logging.config\n\nfrom .device import AudioDevice\n\n\n__all__ = [\'Captor\']\n\nlogger = logging.getLogger(\'audio_analysis.captor\')\n\n\nclass Captor(object):\n    """"""\n    Non-blocking class to capture data from mic\n    It waiting till ""ask_data_event"" is set and then call ""callback"" as soon as\n    data ready\n    """"""\n    _sample_rate = 16000\n    _capture_rate = _sample_rate*2  # bytes per second\n    _ask_data_event = None\n    _shutdown_event = None\n    _capture_thread = None\n\n    def __init__(self, min_time, max_time, ask_data_event, callback,\n                 shutdown_event=None):\n        """"""\n        Init capture class\n        :param min_time: Minimum capture time to process (seconds)\n        :param max_time: Maximum capture time to process (seconds)\n        :param ask_data_event: Event to wait data call\n        :param callback: Callable that will called with data\n        :param shutdown_event: Event to shutdown\n        """"""\n\n        if min_time > max_time:\n            raise ValueError(\'""min_time"" is grater than ""max_time""\')\n\n        if not callable(callback):\n            raise TypeError(\'""callback"" is not callable\')\n\n        if shutdown_event is None:\n            shutdown_event = threading.Event()\n\n        self._min_time = min_time\n        self._max_time = max_time\n        self._ask_data_event = ask_data_event\n        self._shutdown_event = shutdown_event\n        self._callback = callback\n\n        self._min_data = self._min_time*self._capture_rate\n        self._max_data = self._max_time*self._capture_rate\n\n        self._capture_thread = threading.Thread(target=self._capture,\n                                                name=\'captor\')\n        self._capture_thread.setDaemon(True)\n\n    def start(self):\n        """"""\n        Start capture loop\n        :return:\n        """"""\n        self._capture_thread.start()\n\n    def _capture(self):\n        """"""\n        Capture loop\n        :return:\n        """"""\n        ad = AudioDevice()\n        capture_buf = bytes()\n\n        logger.info(\'Start recording.\')\n        while not self._shutdown_event.is_set():\n            if self._ask_data_event.is_set() \\\n                    and len(capture_buf) >= self._min_data:\n                self._callback(capture_buf)\n                capture_buf = bytes()\n\n            buf = ad.read(self._sample_rate)\n            if buf is None:\n                logger.debug(\'Buffer is empty.\')\n                return\n            capture_buf += buf\n\n            overflow = len(capture_buf) - self._max_data\n            if overflow > 0:\n                logger.info(\'Buffer overflow, truncate {}b.\'.format(overflow))\n                capture_buf = capture_buf[overflow:]\n'"
audio/device.py,0,"b'# Copyright (C) 2017 DataArt\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport pyaudio\n\n\n__all__ = [\'AudioDevice\']\n\n\nclass AudioDevice(object):\n    def __init__(self):\n        self.pa = pyaudio.PyAudio()\n        self.in_stream = self.pa.open(format=pyaudio.paInt16, channels=1,\n                                      rate=16000, input=True)\n        self.in_stream.start_stream()\n        self.out_stream = self.pa.open(format=pyaudio.paInt16, channels=1,\n                                       rate=16000, output=True)\n        self.out_stream.start_stream()\n\n    def close(self):\n        self.in_stream.close()\n        self.out_stream.close()\n        self.pa.terminate()\n\n    def write(self, b):\n        return self.out_stream.write(b)\n\n    def read(self, n):\n        return self.in_stream.read(n)\n\n    def flush(self):\n        pass\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, *args, **kwargs):\n        self.close()\n'"
audio/params.py,0,"b'# Copyright (C) 2017 DataArt\n#\n# Based on\n#\n# Copyright 2016 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Architectural constants.\nNUM_FRAMES = 96  # Frames in input mel-spectrogram patch.\nNUM_BANDS = 64  # Frequency bands in input mel-spectrogram patch.\nEMBEDDING_SIZE = 128  # Size of embedding layer.\nMAX_FRAMES = 300\n\n# Hyperparameters used in feature and example generation.\nSAMPLE_RATE = 16000\nSTFT_WINDOW_LENGTH_SECONDS = 0.025\nSTFT_HOP_LENGTH_SECONDS = 0.010\nNUM_MEL_BINS = NUM_BANDS\nMEL_MIN_HZ = 125\nMEL_MAX_HZ = 7500\nLOG_OFFSET = 0.01  # Offset used for stabilized log of input mel-spectrogram.\nEXAMPLE_WINDOW_SECONDS = 0.96  # Each example contains 96 10ms frames\nEXAMPLE_HOP_SECONDS = 0.96     # with zero overlap.\n\n# Parameters used for embedding postprocessing.\nPCA_EIGEN_VECTORS_NAME = \'pca_eigen_vectors\'\nPCA_MEANS_NAME = \'pca_means\'\n\n# Hyperparameters used in training.\nINIT_STDDEV = 0.01  # Standard deviation used to initialize weights.\nLEARNING_RATE = 1e-4  # Learning rate for the Adam optimizer.\nADAM_EPSILON = 1e-8  # Epsilon for the Adam optimizer.\n\n# Names of ops, tensors, and features.\nVGGISH_MODEL = \'models/vggish_model.ckpt\'\nVGGISH_PCA_PARAMS = \'models/vggish_pca_params.npz\'\nVGGISH_INPUT_TENSOR_NAME = \'vggish/input_features:0\'\nVGGISH_OUTPUT_TENSOR_NAME = \'vggish/embedding:0\'\n\nYOUTUBE_CHECKPOINT_FILE = \'models/youtube_model.ckpt\'\n\nCLASS_LABELS_INDICES = \'models/class_labels_indices.csv\'\n\n# Predictions filter\nPREDICTIONS_COUNT_LIMIT = 20\nPREDICTIONS_HIT_LIMIT = 0.1\n'"
audio/processor.py,4,"b'# Copyright (C) 2017 DataArt\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport csv\nimport os\nimport numpy as np\nimport tensorflow as tf\n\nfrom . import params\nfrom .utils import vggish, youtube8m\n\n\n__all__ = [\'WavProcessor\', \'format_predictions\']\n\n\ncwd = os.path.dirname(os.path.realpath(__file__))\n\n\ndef format_predictions(predictions):\n    return \', \'.join(\'{0}: {1:.2f}\'.format(*p) for p in predictions)\n\n\nclass WavProcessor(object):\n    _class_map = {}\n    _vggish_sess = None\n    _youtube_sess = None\n\n    def __init__(self):\n        pca_params = np.load(params.VGGISH_PCA_PARAMS)\n        self._pca_matrix = pca_params[params.PCA_EIGEN_VECTORS_NAME]\n        self._pca_means = pca_params[params.PCA_MEANS_NAME].reshape(-1, 1)\n\n        self._init_vggish()\n        self._init_youtube()\n        self._init_class_map()\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, *args, **kwargs):\n        self.close()\n\n    def close(self):\n        if self._vggish_sess:\n            self._vggish_sess.close()\n\n        if self._youtube_sess:\n            self._youtube_sess.close()\n\n    def _init_vggish(self):\n        graph = tf.Graph()\n        with graph.as_default():\n            sess = tf.Session()\n            vggish.model.define_vggish_slim(training=False)\n            vggish.model.load_vggish_slim_checkpoint(sess, params.VGGISH_MODEL)\n\n        self._vggish_sess = sess\n\n    def _init_youtube(self):\n        graph = tf.Graph()\n        with graph.as_default():\n            sess = tf.Session()\n            youtube8m.model.load_model(sess, params.YOUTUBE_CHECKPOINT_FILE)\n\n        self._youtube_sess = sess\n\n    def _init_class_map(self):\n        with open(params.CLASS_LABELS_INDICES) as f:\n            next(f)  # skip header\n            reader = csv.reader(f)\n            for row in reader:\n                self._class_map[int(row[0])] = row[2]\n\n    def get_predictions(self, sample_rate, data):\n        samples = data / 32768.0  # Convert to [-1.0, +1.0]\n        examples_batch = vggish.input.waveform_to_examples(samples, sample_rate)\n        features = self._get_features(examples_batch)\n        predictions = self._process_features(features)\n        predictions = self._filter_predictions(predictions)\n        return predictions\n\n    def _filter_predictions(self, predictions):\n        count = params.PREDICTIONS_COUNT_LIMIT\n        hit = params.PREDICTIONS_HIT_LIMIT\n\n        top_indices = np.argpartition(predictions[0], -count)[-count:]\n        line = ((self._class_map[i], float(predictions[0][i])) for\n                i in top_indices if predictions[0][i] > hit)\n        return sorted(line, key=lambda p: -p[1])\n\n    def _process_features(self, features):\n        sess = self._youtube_sess\n        num_frames = np.minimum(features.shape[0], params.MAX_FRAMES)\n        data = youtube8m.input.resize(features, 0, params.MAX_FRAMES)\n        data = np.expand_dims(data, 0)\n        num_frames = np.expand_dims(num_frames, 0)\n\n        input_tensor = sess.graph.get_collection(""input_batch_raw"")[0]\n        num_frames_tensor = sess.graph.get_collection(""num_frames"")[0]\n        predictions_tensor = sess.graph.get_collection(""predictions"")[0]\n\n        predictions_val, = sess.run(\n            [predictions_tensor],\n            feed_dict={\n                input_tensor: data,\n                num_frames_tensor: num_frames\n            })\n\n        return predictions_val\n\n    def _get_features(self, examples_batch):\n        sess = self._vggish_sess\n        features_tensor = sess.graph.get_tensor_by_name(\n            params.VGGISH_INPUT_TENSOR_NAME)\n        embedding_tensor = sess.graph.get_tensor_by_name(\n            params.VGGISH_OUTPUT_TENSOR_NAME)\n\n        [embedding_batch] = sess.run(\n            [embedding_tensor],\n            feed_dict={features_tensor: examples_batch}\n        )\n\n        postprocessed_batch = np.dot(\n            self._pca_matrix, (embedding_batch.T - self._pca_means)\n        ).T\n\n        return postprocessed_batch\n'"
web/__init__.py,0,"b'# Copyright (C) 2017 DataArt\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n'"
web/controllers.py,0,"b'# Copyright (C) 2017 DataArt\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom six import StringIO\nfrom six.moves import http_client\nfrom devicehive_webconfig.base import Controller, BaseController\n\n\nclass Events(Controller):\n    def get(self, handler, *args, **kwargs):\n        response = self.render_template(\'events.html\')\n\n        handler.send_response(http_client.OK)\n        handler.send_header(\'Content-type\', \'text/html\')\n        handler.end_headers()\n        handler.wfile.write(response.encode())\n\n\nclass EventsUpdate(Controller):\n    def get(self, handler, *args, **kwargs):\n        f = StringIO()\n        for timestamp, predictions in handler.server.server.events_queue:\n            data = {\n                \'timestamp\': \'{:%Y-%m-%d %H:%M:%S}\'.format(timestamp),\n                \'predictions\': predictions\n            }\n            f.writelines(self.render_template(\'event.html\', **data))\n\n        response = f.getvalue()\n        f.close()\n\n        handler.send_response(http_client.OK)\n        handler.send_header(\'Content-type\', \'text/html\')\n        handler.end_headers()\n        handler.wfile.write(response.encode())\n'"
web/routes.py,0,"b'# Copyright (C) 2017 DataArt\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom .controllers import Events, EventsUpdate\n\nroutes = [\n    (r\'^/events/$\', Events),\n    (r\'^/events/update/$\', EventsUpdate),\n]\n'"
audio/utils/__init__.py,0,"b'# Copyright (C) 2017 DataArt\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n'"
audio/utils/vggish/__init__.py,0,"b'# Copyright (C) 2017 DataArt\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom . import input, mel_features, model\n'"
audio/utils/vggish/input.py,0,"b'# Copyright (C) 2017 DataArt\n#\n# Based on\n#\n# Copyright 2017 The TensorFlow Authors All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport numpy as np\nimport resampy\n\nfrom audio import params\nfrom . import mel_features\n\n\ndef waveform_to_examples(data, sample_rate):\n    """"""Converts audio waveform into an array of examples for VGGish.\n\n    Args:\n      data: np.array of either one dimension (mono) or two dimensions\n        (multi-channel, with the outer dimension representing channels).\n        Each sample is generally expected to lie in the range [-1.0, +1.0],\n        although this is not required.\n      sample_rate: Sample rate of data.\n\n    Returns:\n      3-D np.array of shape [num_examples, num_frames, num_bands] which represents\n      a sequence of examples, each of which contains a patch of log mel\n      spectrogram, covering num_frames frames of audio and num_bands mel frequency\n      bands, where the frame length is params.STFT_HOP_LENGTH_SECONDS.\n    """"""\n    # Convert to mono.\n    if len(data.shape) > 1:\n        data = np.mean(data, axis=1)\n    # Resample to the rate assumed by VGGish.\n    if sample_rate != params.SAMPLE_RATE:\n        data = resampy.resample(data, sample_rate, params.SAMPLE_RATE)\n\n    # Compute log mel spectrogram features.\n    log_mel = mel_features.log_mel_spectrogram(\n        data,\n        audio_sample_rate=params.SAMPLE_RATE,\n        log_offset=params.LOG_OFFSET,\n        window_length_secs=params.STFT_WINDOW_LENGTH_SECONDS,\n        hop_length_secs=params.STFT_HOP_LENGTH_SECONDS,\n        num_mel_bins=params.NUM_MEL_BINS,\n        lower_edge_hertz=params.MEL_MIN_HZ,\n        upper_edge_hertz=params.MEL_MAX_HZ)\n\n    # Frame features into examples.\n    features_sample_rate = 1.0 / params.STFT_HOP_LENGTH_SECONDS\n    example_window_length = int(round(\n        params.EXAMPLE_WINDOW_SECONDS * features_sample_rate))\n    example_hop_length = int(round(\n        params.EXAMPLE_HOP_SECONDS * features_sample_rate))\n    log_mel_examples = mel_features.frame(\n        log_mel,\n        window_length=example_window_length,\n        hop_length=example_hop_length)\n    return log_mel_examples\n'"
audio/utils/vggish/mel_features.py,0,"b'# Copyright 2017 The TensorFlow Authors All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\n""""""Defines routines to compute mel spectrogram features from audio waveform.""""""\n\nimport numpy as np\n\n\ndef frame(data, window_length, hop_length):\n    """"""Convert array into a sequence of successive possibly overlapping frames.\n\n    An n-dimensional array of shape (num_samples, ...) is converted into an\n    (n+1)-D array of shape (num_frames, window_length, ...), where each frame\n    starts hop_length points after the preceding one.\n\n    This is accomplished using stride_tricks, so the original data is not\n    copied.  However, there is no zero-padding, so any incomplete frames at the\n    end are not included.\n\n    Args:\n      data: np.array of dimension N >= 1.\n      window_length: Number of samples in each frame.\n      hop_length: Advance (in samples) between each window.\n\n    Returns:\n      (N+1)-D np.array with as many rows as there are complete frames that can be\n      extracted.\n    """"""\n    num_samples = data.shape[0]\n    num_frames = 1 + int(np.floor((num_samples - window_length) / hop_length))\n    shape = (num_frames, window_length) + data.shape[1:]\n    strides = (data.strides[0] * hop_length,) + data.strides\n    return np.lib.stride_tricks.as_strided(data, shape=shape, strides=strides)\n\n\ndef periodic_hann(window_length):\n    """"""Calculate a ""periodic"" Hann window.\n\n    The classic Hann window is defined as a raised cosine that starts and\n    ends on zero, and where every value appears twice, except the middle\n    point for an odd-length window.  Matlab calls this a ""symmetric"" window\n    and np.hanning() returns it.  However, for Fourier analysis, this\n    actually represents just over one cycle of a period N-1 cosine, and\n    thus is not compactly expressed on a length-N Fourier basis.  Instead,\n    it\'s better to use a raised cosine that ends just before the final\n    zero value - i.e. a complete cycle of a period-N cosine.  Matlab\n    calls this a ""periodic"" window. This routine calculates it.\n\n    Args:\n      window_length: The number of points in the returned window.\n\n    Returns:\n      A 1D np.array containing the periodic hann window.\n    """"""\n    return 0.5 - (0.5 * np.cos(2 * np.pi / window_length *\n                               np.arange(window_length)))\n\n\ndef stft_magnitude(signal, fft_length,\n                   hop_length=None,\n                   window_length=None):\n    """"""Calculate the short-time Fourier transform magnitude.\n\n    Args:\n      signal: 1D np.array of the input time-domain signal.\n      fft_length: Size of the FFT to apply.\n      hop_length: Advance (in samples) between each frame passed to FFT.\n      window_length: Length of each block of samples to pass to FFT.\n\n    Returns:\n      2D np.array where each row contains the magnitudes of the fft_length/2+1\n      unique values of the FFT for the corresponding frame of input samples.\n    """"""\n    frames = frame(signal, window_length, hop_length)\n    # Apply frame window to each frame. We use a periodic Hann (cosine of period\n    # window_length) instead of the symmetric Hann of np.hanning (period\n    # window_length-1).\n    window = periodic_hann(window_length)\n    windowed_frames = frames * window\n    return np.abs(np.fft.rfft(windowed_frames, int(fft_length)))\n\n\n# Mel spectrum constants and functions.\n_MEL_BREAK_FREQUENCY_HERTZ = 700.0\n_MEL_HIGH_FREQUENCY_Q = 1127.0\n\n\ndef hertz_to_mel(frequencies_hertz):\n    """"""Convert frequencies to mel scale using HTK formula.\n\n    Args:\n      frequencies_hertz: Scalar or np.array of frequencies in hertz.\n\n    Returns:\n      Object of same size as frequencies_hertz containing corresponding values\n      on the mel scale.\n    """"""\n    return _MEL_HIGH_FREQUENCY_Q * np.log(\n        1.0 + (frequencies_hertz / _MEL_BREAK_FREQUENCY_HERTZ))\n\n\ndef spectrogram_to_mel_matrix(num_mel_bins=20,\n                              num_spectrogram_bins=129,\n                              audio_sample_rate=8000,\n                              lower_edge_hertz=125.0,\n                              upper_edge_hertz=3800.0):\n    """"""Return a matrix that can post-multiply spectrogram rows to make mel.\n\n    Returns a np.array matrix A that can be used to post-multiply a matrix S of\n    spectrogram values (STFT magnitudes) arranged as frames x bins to generate a\n    ""mel spectrogram"" M of frames x num_mel_bins.  M = S A.\n\n    The classic HTK algorithm exploits the complementarity of adjacent mel bands\n    to multiply each FFT bin by only one mel weight, then add it, with positive\n    and negative signs, to the two adjacent mel bands to which that bin\n    contributes.  Here, by expressing this operation as a matrix multiply, we go\n    from num_fft multiplies per frame (plus around 2*num_fft adds) to around\n    num_fft^2 multiplies and adds.  However, because these are all presumably\n    accomplished in a single call to np.dot(), it\'s not clear which approach is\n    faster in Python.  The matrix multiplication has the attraction of being more\n    general and flexible, and much easier to read.\n\n    Args:\n      num_mel_bins: How many bands in the resulting mel spectrum.  This is\n        the number of columns in the output matrix.\n      num_spectrogram_bins: How many bins there are in the source spectrogram\n        data, which is understood to be fft_size/2 + 1, i.e. the spectrogram\n        only contains the nonredundant FFT bins.\n      audio_sample_rate: Samples per second of the audio at the input to the\n        spectrogram. We need this to figure out the actual frequencies for\n        each spectrogram bin, which dictates how they are mapped into mel.\n      lower_edge_hertz: Lower bound on the frequencies to be included in the mel\n        spectrum.  This corresponds to the lower edge of the lowest triangular\n        band.\n      upper_edge_hertz: The desired top edge of the highest frequency band.\n\n    Returns:\n      An np.array with shape (num_spectrogram_bins, num_mel_bins).\n\n    Raises:\n      ValueError: if frequency edges are incorrectly ordered.\n    """"""\n    nyquist_hertz = audio_sample_rate / 2.\n    if lower_edge_hertz >= upper_edge_hertz:\n        raise ValueError(""lower_edge_hertz %.1f >= upper_edge_hertz %.1f"" %\n                         (lower_edge_hertz, upper_edge_hertz))\n    spectrogram_bins_hertz = np.linspace(0.0, nyquist_hertz,\n                                         num_spectrogram_bins)\n    spectrogram_bins_mel = hertz_to_mel(spectrogram_bins_hertz)\n    # The i\'th mel band (starting from i=1) has center frequency\n    # band_edges_mel[i], lower edge band_edges_mel[i-1], and higher edge\n    # band_edges_mel[i+1].  Thus, we need num_mel_bins + 2 values in\n    # the band_edges_mel arrays.\n    band_edges_mel = np.linspace(hertz_to_mel(lower_edge_hertz),\n                                 hertz_to_mel(upper_edge_hertz),\n                                 num_mel_bins + 2)\n    # Matrix to post-multiply feature arrays whose rows are num_spectrogram_bins\n    # of spectrogram values.\n    mel_weights_matrix = np.empty((num_spectrogram_bins, num_mel_bins))\n    for i in range(num_mel_bins):\n        lower_edge_mel, center_mel, upper_edge_mel = band_edges_mel[i:i + 3]\n        # Calculate lower and upper slopes for every spectrogram bin.\n        # Line segments are linear in the *mel* domain, not hertz.\n        lower_slope = ((spectrogram_bins_mel - lower_edge_mel) /\n                       (center_mel - lower_edge_mel))\n        upper_slope = ((upper_edge_mel - spectrogram_bins_mel) /\n                       (upper_edge_mel - center_mel))\n        # .. then intersect them with each other and zero.\n        mel_weights_matrix[:, i] = np.maximum(0.0, np.minimum(lower_slope,\n                                                              upper_slope))\n    # HTK excludes the spectrogram DC bin; make sure it always gets a zero\n    # coefficient.\n    mel_weights_matrix[0, :] = 0.0\n    return mel_weights_matrix\n\n\ndef log_mel_spectrogram(data,\n                        audio_sample_rate=8000,\n                        log_offset=0.0,\n                        window_length_secs=0.025,\n                        hop_length_secs=0.010,\n                        **kwargs):\n    """"""Convert waveform to a log magnitude mel-frequency spectrogram.\n\n    Args:\n      data: 1D np.array of waveform data.\n      audio_sample_rate: The sampling rate of data.\n      log_offset: Add this to values when taking log to avoid -Infs.\n      window_length_secs: Duration of each window to analyze.\n      hop_length_secs: Advance between successive analysis windows.\n      **kwargs: Additional arguments to pass to spectrogram_to_mel_matrix.\n\n    Returns:\n      2D np.array of (num_frames, num_mel_bins) consisting of log mel filterbank\n      magnitudes for successive frames.\n    """"""\n    window_length_samples = int(round(audio_sample_rate * window_length_secs))\n    hop_length_samples = int(round(audio_sample_rate * hop_length_secs))\n    fft_length = 2 ** int(np.ceil(np.log(window_length_samples) / np.log(2.0)))\n    spectrogram = stft_magnitude(\n        data,\n        fft_length=fft_length,\n        hop_length=hop_length_samples,\n        window_length=window_length_samples)\n    mel_spectrogram = np.dot(spectrogram, spectrogram_to_mel_matrix(\n        num_spectrogram_bins=spectrogram.shape[1],\n        audio_sample_rate=audio_sample_rate, **kwargs))\n    return np.log(mel_spectrogram + log_offset)\n'"
audio/utils/vggish/model.py,13,"b'# Copyright 2017 The TensorFlow Authors All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\n""""""Defines the \'VGGish\' model used to generate AudioSet embedding features.\n\nThe public AudioSet release (https://research.google.com/audioset/download.html)\nincludes 128-D features extracted from the embedding layer of a VGG-like model\nthat was trained on a large Google-internal YouTube dataset. Here we provide\na TF-Slim definition of the same model, without any dependences on libraries\ninternal to Google. We call it \'VGGish\'.\n\nNote that we only define the model up to the embedding layer, which is the\npenultimate layer before the final classifier layer. We also provide various\nhyperparameter values (in vggish_params.py) that were used to train this model\ninternally.\n\nFor comparison, here is TF-Slim\'s VGG definition:\nhttps://github.com/tensorflow/models/blob/master/research/slim/nets/vgg.py\n""""""\n\nimport tensorflow as tf\nfrom audio import params\n\nslim = tf.contrib.slim\n\n\ndef define_vggish_slim(training=False):\n    """"""Defines the VGGish TensorFlow model.\n\n    All ops are created in the current default graph, under the scope \'vggish/\'.\n\n    The input is a placeholder named \'vggish/input_features\' of type float32 and\n    shape [batch_size, num_frames, num_bands] where batch_size is variable and\n    num_frames and num_bands are constants, and [num_frames, num_bands] represents\n    a log-mel-scale spectrogram patch covering num_bands frequency bands and\n    num_frames time frames (where each frame step is usually 10ms). This is\n    produced by computing the stabilized log(mel-spectrogram + params.LOG_OFFSET).\n    The output is an op named \'vggish/embedding\' which produces the activations of\n    a 128-D embedding layer, which is usually the penultimate layer when used as\n    part of a full model with a final classifier layer.\n\n    Args:\n      training: If true, all parameters are marked trainable.\n\n    Returns:\n      The op \'vggish/embeddings\'.\n    """"""\n    # Defaults:\n    # - All weights are initialized to N(0, INIT_STDDEV).\n    # - All biases are initialized to 0.\n    # - All activations are ReLU.\n    # - All convolutions are 3x3 with stride 1 and SAME padding.\n    # - All max-pools are 2x2 with stride 2 and SAME padding.\n    with slim.arg_scope(\n            [slim.conv2d, slim.fully_connected],\n            weights_initializer=tf.truncated_normal_initializer(\n                stddev=params.INIT_STDDEV\n            ),\n            biases_initializer=tf.zeros_initializer(),\n            activation_fn=tf.nn.relu, trainable=training), \\\n         slim.arg_scope(\n             [slim.conv2d], kernel_size=[3, 3], stride=1, padding=\'SAME\'\n         ), \\\n         slim.arg_scope(\n             [slim.max_pool2d], kernel_size=[2, 2], stride=2, padding=\'SAME\'\n         ), \\\n         tf.variable_scope(\'vggish\'):\n        # Input: a batch of 2-D log-mel-spectrogram patches.\n        features = tf.placeholder(\n            tf.float32, shape=(None, params.NUM_FRAMES, params.NUM_BANDS),\n            name=\'input_features\')\n        # Reshape to 4-D so that we can convolve a batch with conv2d().\n        net = tf.reshape(features, [-1, params.NUM_FRAMES, params.NUM_BANDS, 1])\n\n        # The VGG stack of alternating convolutions and max-pools.\n        net = slim.conv2d(net, 64, scope=\'conv1\')\n        net = slim.max_pool2d(net, scope=\'pool1\')\n        net = slim.conv2d(net, 128, scope=\'conv2\')\n        net = slim.max_pool2d(net, scope=\'pool2\')\n        net = slim.repeat(net, 2, slim.conv2d, 256, scope=\'conv3\')\n        net = slim.max_pool2d(net, scope=\'pool3\')\n        net = slim.repeat(net, 2, slim.conv2d, 512, scope=\'conv4\')\n        net = slim.max_pool2d(net, scope=\'pool4\')\n\n        # Flatten before entering fully-connected layers\n        net = slim.flatten(net)\n        net = slim.repeat(net, 2, slim.fully_connected, 4096, scope=\'fc1\')\n        # The embedding layer.\n        net = slim.fully_connected(net, params.EMBEDDING_SIZE, scope=\'fc2\')\n        return tf.identity(net, name=\'embedding\')\n\n\ndef load_vggish_slim_checkpoint(session, checkpoint_path):\n    """"""Loads a pre-trained VGGish-compatible checkpoint.\n\n    This function can be used as an initialization function (referred to as\n    init_fn in TensorFlow documentation) which is called in a Session after\n    initializating all variables. When used as an init_fn, this will load\n    a pre-trained checkpoint that is compatible with the VGGish model\n    definition. Only variables defined by VGGish will be loaded.\n\n    Args:\n      session: an active TensorFlow session.\n      checkpoint_path: path to a file containing a checkpoint that is\n        compatible with the VGGish model definition.\n    """"""\n    # Get the list of names of all VGGish variables that exist in\n    # the checkpoint (i.e., all inference-mode VGGish variables).\n    with tf.Graph().as_default():\n        define_vggish_slim(training=False)\n        vggish_var_names = [v.name for v in tf.global_variables()]\n\n    # Get the list of all currently existing variables that match\n    # the list of variable names we just computed.\n    vggish_vars = [v for v in tf.global_variables() if\n                   v.name in vggish_var_names]\n\n    # Use a Saver to restore just the variables selected above.\n    saver = tf.train.Saver(vggish_vars, name=\'vggish_load_pretrained\')\n    saver.restore(session, checkpoint_path)\n'"
audio/utils/youtube8m/__init__.py,0,"b'# Copyright (C) 2017 DataArt\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom . import model, input\n'"
audio/utils/youtube8m/input.py,0,"b'# Copyright (C) 2017 DataArt\n#\n# Based on\n#\n# Copyright 2016 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport numpy as np\n\n\ndef resize(data, axis, new_size):\n    shape = list(data.shape)\n\n    pad_shape = shape[:]\n    pad_shape[axis] = np.maximum(0, new_size - shape[axis])\n\n    shape[axis] = np.minimum(shape[axis], new_size)\n    shape = np.stack(shape)\n\n    slices = [slice(0, s) for s in shape]\n\n    resized = np.concatenate([\n      data[slices],\n      np.zeros(np.stack(pad_shape))\n    ], axis)\n\n    # Update shape.\n    new_shape = list(data.shape)\n    new_shape[axis] = new_size\n    resized.reshape(new_shape)\n    return resized\n'"
audio/utils/youtube8m/model.py,4,"b'# Copyright (C) 2017 DataArt\n#\n# Based on\n#\n# Copyright 2016 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the ""License"");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an ""AS IS"" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport tensorflow as tf\n\n\n# Workaround for num_epochs issue.\ndef set_up_init_ops(variables):\n    init_op_list = []\n    for variable in list(variables):\n        if ""train_input"" in variable.name:\n            init_op_list.append(tf.assign(variable, 1))\n            variables.remove(variable)\n    init_op_list.append(tf.variables_initializer(variables))\n    return init_op_list\n\n\ndef load_model(sess, checkpoint_path):\n    meta_graph_location = checkpoint_path + \'.meta\'\n\n    saver = tf.train.import_meta_graph(\n        meta_graph_location, clear_devices=True, import_scope=\'m2\'\n    )\n\n    saver.restore(sess, checkpoint_path)\n\n    sess.run(\n        set_up_init_ops(tf.get_collection_ref(tf.GraphKeys.LOCAL_VARIABLES))\n    )\n'"
