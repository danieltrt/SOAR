file_path,api_count,code
tools/setup.py,0,"b'import setuptools\n\nwith open(""README.md"", ""r"") as fh:\n    long_description = fh.read()\n\nsetuptools.setup(\n    name=""aoe-tool"",\n    version=""0.0.3"",\n    author=""zouyuefu"",\n    author_email=""zouyf_1984@163.com"",\n    description=""aoe tools."",\n    long_description=long_description,\n    long_description_content_type=""text/markdown"",\n    url=""https://github.com/didi/AoE"",\n    packages=setuptools.find_packages(),\n    classifiers=[\n        ""Programming Language :: Python :: 3"",\n        ""License :: OSI Approved :: Apache Software License"",\n        ""Operating System :: OS Independent"",\n    ],\n    entry_points={\n        \'console_scripts\': [\'atenc=encrypt.cmd:main\'],\n    },\n    python_requires=\'>=3.6\',\n)'"
tools/encrypt/__init__.py,0,b''
tools/encrypt/atenc.py,0,"b'#!/usr/bin/env python3\n\n# -*- coding: utf-8 -*-\nimport getopt\nimport hashlib\nimport os\nimport sys\n\nfrom Crypto.Cipher import AES\n\nAES_SECRET_KEY = \'0000000000000000\'  # \xe6\xad\xa4\xe5\xa4\x8416\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\nIV = ""0101010101010101""\n\n# padding\xe7\xae\x97\xe6\xb3\x95\nBS = len(AES_SECRET_KEY)\npad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)\npad_bytes = lambda bs: bs + (BS - len(bs) % BS) * b\'\\0\'\n\n\nclass AesEncrypt(object):\n    def __init__(self):\n        self.key = AES_SECRET_KEY\n        self.iv = IV\n        self.mode = AES.MODE_CBC\n\n    # \xe5\x8a\xa0\xe5\xaf\x86\xe5\x87\xbd\xe6\x95\xb0\n    def encrypt_file(self, source_file, encrypt_file):\n        cryptor = AES.new(self.key.encode(""utf8""), self.mode, self.iv.encode(""utf8""))\n        fo = open(source_file, ""rb"")\n        file_size = os.path.getsize(source_file)\n        fw = open(encrypt_file, ""wb"")\n\n        # aes encode\n        file_size = os.path.getsize(source_file)\n        # print(""source file size:"", file_size)\n        source_file_bytes = pad_bytes(fo.read(file_size))\n        source_cipher_text = cryptor.encrypt(source_file_bytes)\n\n        # md5 source file\n        md5_tool = hashlib.md5()\n        md5_tool.update(source_file_bytes)\n        source_file_md5 = md5_tool.hexdigest()[8:-8]\n        # print(""source file md5 16:"", source_file_md5)\n\n        # exchange 16 bytes\n        len_source_cipher_bytes = len(source_cipher_text)\n        len_cipher = len_source_cipher_bytes if len_source_cipher_bytes < 1024 * 16 else 1024 * 16\n        mixCount = int(len_cipher / 1024)\n        listb = bytearray(source_cipher_text)\n        listmd5 = bytearray(source_file_md5.encode(""utf-8""))\n        for idx in range(mixCount):\n            tmp = listb[idx * 1024]\n            listb[idx * 1024] = listmd5[idx]\n            listmd5[idx] = tmp\n        fw.write(bytes([1]))\n        fw.write(file_size.to_bytes(4, byteorder=""big""))\n        fw.write(listmd5)\n        fw.write(listb)\n        fw.flush()\n        fw.close()\n\n    # \xe8\xa7\xa3\xe5\xaf\x86\xe5\x87\xbd\xe6\x95\xb0\n    def decrypt_file(self, source_file, decrypt_file):\n        cryptor = AES.new(self.key.encode(""utf8""), self.mode, self.iv.encode(""utf8""))\n        fo = open(source_file, ""rb"")\n        file_size = os.path.getsize(source_file)\n        left_size = file_size\n\n        b1 = fo.read(1)\n        version = int.from_bytes(b1, byteorder=\'big\', signed=False)\n\n        left_size -= 1\n        if version > 1:\n            raise Exception(""model version is too high: "", version)\n\n        fsize_bytes = fo.read(4)\n        orgFileSize = int.from_bytes(fsize_bytes, byteorder=""big"", signed=False)\n        left_size -= 4\n\n        fw = open(decrypt_file, ""wb"")\n\n        md5 = fo.read(16)\n        left_size -= 16\n\n        len = left_size if left_size < 1024 * 16 else 1024 * 16\n        b = fo.read(len)\n        left_size -= len\n        mixCount = int(len / 1024)\n        listb = bytearray(b)\n        listmd5 = bytearray(md5)\n        for idx in range(mixCount):\n            tmp = listb[idx * 1024]\n            listb[idx * 1024] = listmd5[idx]\n            listmd5[idx] = tmp\n\n        rest = fo.read(left_size)\n        allbytes = listb + rest\n        plain_text = cryptor.decrypt(bytes(allbytes))\n        unpad_text = plain_text[0:orgFileSize]\n        fw.write(unpad_text)\n        fw.close()\n        fo.close()\n\n\ndef usage():\n    print(""Help document!"")\n    print(""Samples:"")\n    print(""1. encrypt SRC_FILE to ENCODED_FILE"")\n    print(""  atenc -e -f SRC_FILE -t ENCODED_FILE"")\n    print(""2. encrypt SRC_FILE to ENCODED_FILE with specified KEY_VALUE and IV_VALUE"")\n    print(""  atenc -e -f SRC_FILE -t ENCODED_FILE -k 0000000000000000 -i 0101010101010101"")\n    print(""3. decrypt ENCODED_FILE to SRC_FILE"")\n    print(""  atenc -d -f ENCODED_FILE -t SRC_FILE"")\n    print(""4. decrypt ENCODED_FILE to SRC_FILE with specified KEY_VALUE and IV_VALUE"")\n    print(""  atenc -d -f ENCODED_FILE -t SRC_FILE -k 0000000000000000 -i 0101010101010101"")\n    print(""Options:"")\n    print(""  -h, --help,"", ""show help document."")\n    print(""  -e, --encrypt,"", ""encrypt file mode."")\n    print(""  -d, --decrypt,"", ""decrypt file mode."")\n    print(""  -f <path>, --from <path>,"", ""specify the file path to encrypt/decrypt."")\n    print(""  -t <path>, --to <path>,"", ""specify the file path after encrypt/decrypt."")\n    print(""  -k <KEY_VALUE>, --key <KEY_VALUE>,"", ""specify the key value to encrypt/decrypt."")\n    print(""  -i <IV_VALUE>, --iv <IV_VALUE>,"", ""specify the iv value to encrypt/decrypt."")\n    pass\n\n\ndef args_analysis():\n    from_file = """"\n    to_file = """"\n    encrypt_mode = False\n    decrypt_mode = False\n    try:\n        options, args = getopt.getopt(sys.argv[1:], ""edhf:t:k:i:"",\n                                      [""help"", ""mode="", ""from="", ""to="", ""encrypt="", ""decrypt="", ""key="", ""iv=""])\n    except getopt.GetoptError:\n        print(""Error: Input arguments is not support, please see the help document by \\""atenc -h\\"""")\n        sys.exit()\n    if options.__len__() == 0:\n        print(""Error: No arguments found, please see the help document by \\""atenc -h\\"""")\n        sys.exit()\n    for name, value in options:\n        if name in (""-h"", ""--help""):\n            usage()\n            sys.exit()\n        elif name in (""-f"", ""--from""):\n            if from_file:\n                print(""Error: from file is not empty: "", from_file)\n                sys.exit()\n            from_file = value\n        elif name in (""-t"", ""--to""):\n            if to_file:\n                print(""Error: to file is not empty:"", to_file)\n                sys.exit()\n            to_file = value\n        elif name in (""-e"", ""--encrypt""):\n            encrypt_mode = True\n        elif name in (""-d"", ""--decrypt""):\n            decrypt_mode = True\n        elif name in (""-k"", ""--key""):\n            if len(value) != 16:\n                print(""Error: len of secret key is"", len(value), "", should be 16."")\n                sys.exit()\n            aes_encrypt.key = value\n        elif name in (""-i"", ""--iv""):\n            if len(value) != 16:\n                print(""Error: len of iv is"", len(value), "", should be 16."")\n                sys.exit()\n            aes_encrypt.iv = value\n        else:\n            print(""Error: Input arguments is not support, please see the help document by \\""./atenc.py -h\\"""")\n            sys.exit()\n    if encrypt_mode and decrypt_mode:\n        print(""Error: encrypt and decrypt can not be set the same time."")\n        sys.exit()\n    if not encrypt_mode and not decrypt_mode:\n        print(""Error: no encrypt/decrypt mode to be set."")\n        sys.exit()\n    if not from_file or not to_file:\n        print(""Error: from file and to file must to be set the same time"")\n        sys.exit()\n    if encrypt_mode:\n        aes_encrypt.encrypt_file(from_file, to_file)\n    elif decrypt_mode:\n        aes_encrypt.decrypt_file(from_file, to_file)\n    print(""Success:"", ""encrypt"" if encrypt_mode else ""decrypt"", ""file"", from_file, ""to file"", to_file)\n\n\naes_encrypt = AesEncrypt()\n\n\ndef main():\n    # aes_encrypt.encrypt_file(""logo.png"",\n    #                          ""logo.png.aoe"")\n    #\n    # aes_encrypt.decrypt_file(""logo.png.aoe"",\n    #                          ""logo.png.aoe.decrypt.png"")\n    args_analysis()\n\n\nif __name__ == \'__main__\':\n    main()\n'"
tools/encrypt/cmd.py,0,"b""#!/usr/bin/env python3\n\n# -*- coding: utf-8 -*-\nimport encrypt.atenc as ae\n\n\ndef main():\n    ae.main()\n\n\nif __name__ == '__main__':\n    main()"""
