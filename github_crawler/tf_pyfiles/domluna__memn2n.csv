file_path,api_count,code
data_utils.py,0,"b'from __future__ import absolute_import\n\nimport os\nimport re\nimport numpy as np\n\ndef load_task(data_dir, task_id, only_supporting=False):\n    \'\'\'Load the nth task. There are 20 tasks in total.\n\n    Returns a tuple containing the training and testing data for the task.\n    \'\'\'\n    assert task_id > 0 and task_id < 21\n\n    files = os.listdir(data_dir)\n    files = [os.path.join(data_dir, f) for f in files]\n    s = \'qa{}_\'.format(task_id)\n    train_file = [f for f in files if s in f and \'train\' in f][0]\n    test_file = [f for f in files if s in f and \'test\' in f][0]\n    train_data = get_stories(train_file, only_supporting)\n    test_data = get_stories(test_file, only_supporting)\n    return train_data, test_data\n\ndef tokenize(sent):\n    \'\'\'Return the tokens of a sentence including punctuation.\n    >>> tokenize(\'Bob dropped the apple. Where is the apple?\')\n    [\'Bob\', \'dropped\', \'the\', \'apple\', \'.\', \'Where\', \'is\', \'the\', \'apple\', \'?\']\n    \'\'\'\n    return [x.strip() for x in re.split(\'(\\W+)?\', sent) if x.strip()]\n\n\ndef parse_stories(lines, only_supporting=False):\n    \'\'\'Parse stories provided in the bAbI tasks format\n    If only_supporting is true, only the sentences that support the answer are kept.\n    \'\'\'\n    data = []\n    story = []\n    for line in lines:\n        line = str.lower(line)\n        nid, line = line.split(\' \', 1)\n        nid = int(nid)\n        if nid == 1:\n            story = []\n        if \'\\t\' in line: # question\n            q, a, supporting = line.split(\'\\t\')\n            q = tokenize(q)\n            #a = tokenize(a)\n            # answer is one vocab word even if it\'s actually multiple words\n            a = [a]\n            substory = None\n\n            # remove question marks\n            if q[-1] == ""?"":\n                q = q[:-1]\n\n            if only_supporting:\n                # Only select the related substory\n                supporting = map(int, supporting.split())\n                substory = [story[i - 1] for i in supporting]\n            else:\n                # Provide all the substories\n                substory = [x for x in story if x]\n\n            data.append((substory, q, a))\n            story.append(\'\')\n        else: # regular sentence\n            # remove periods\n            sent = tokenize(line)\n            if sent[-1] == ""."":\n                sent = sent[:-1]\n            story.append(sent)\n    return data\n\n\ndef get_stories(f, only_supporting=False):\n    \'\'\'Given a file name, read the file, retrieve the stories, and then convert the sentences into a single story.\n    If max_length is supplied, any stories longer than max_length tokens will be discarded.\n    \'\'\'\n    with open(f) as f:\n        return parse_stories(f.readlines(), only_supporting=only_supporting)\n\ndef vectorize_data(data, word_idx, sentence_size, memory_size):\n    """"""\n    Vectorize stories and queries.\n\n    If a sentence length < sentence_size, the sentence will be padded with 0\'s.\n\n    If a story length < memory_size, the story will be padded with empty memories.\n    Empty memories are 1-D arrays of length sentence_size filled with 0\'s.\n\n    The answer array is returned as a one-hot encoding.\n    """"""\n    S = []\n    Q = []\n    A = []\n    for story, query, answer in data:\n        ss = []\n        for i, sentence in enumerate(story, 1):\n            ls = max(0, sentence_size - len(sentence))\n            ss.append([word_idx[w] for w in sentence] + [0] * ls)\n\n        # take only the most recent sentences that fit in memory\n        ss = ss[::-1][:memory_size][::-1]\n\n        # Make the last word of each sentence the time \'word\' which \n        # corresponds to vector of lookup table\n        for i in range(len(ss)):\n            ss[i][-1] = len(word_idx) - memory_size - i + len(ss)\n\n        # pad to memory_size\n        lm = max(0, memory_size - len(ss))\n        for _ in range(lm):\n            ss.append([0] * sentence_size)\n\n        lq = max(0, sentence_size - len(query))\n        q = [word_idx[w] for w in query] + [0] * lq\n\n        y = np.zeros(len(word_idx) + 1) # 0 is reserved for nil word\n        for a in answer:\n            y[word_idx[a]] = 1\n\n        S.append(ss)\n        Q.append(q)\n        A.append(y)\n    return np.array(S), np.array(Q), np.array(A)\n'"
joint.py,16,"b'""""""Example running MemN2N on a single bAbI task.\nDownload tasks from facebook.ai/babi """"""\nfrom __future__ import absolute_import\nfrom __future__ import print_function\n\nfrom data_utils import load_task, vectorize_data\nfrom sklearn import cross_validation, metrics\nfrom memn2n import MemN2N\nfrom itertools import chain\nfrom six.moves import range, reduce\n\nimport tensorflow as tf\nimport numpy as np\nimport pandas as pd\n\ntf.flags.DEFINE_float(""learning_rate"", 0.01, ""Learning rate for Adam Optimizer."")\ntf.flags.DEFINE_float(""anneal_rate"", 15, ""Number of epochs between halving the learnign rate."")\ntf.flags.DEFINE_float(""anneal_stop_epoch"", 60, ""Epoch number to end annealed lr schedule."")\ntf.flags.DEFINE_float(""max_grad_norm"", 40.0, ""Clip gradients to this norm."")\ntf.flags.DEFINE_integer(""evaluation_interval"", 10, ""Evaluate and print results every x epochs"")\ntf.flags.DEFINE_integer(""batch_size"", 32, ""Batch size for training."")\ntf.flags.DEFINE_integer(""hops"", 3, ""Number of hops in the Memory Network."")\ntf.flags.DEFINE_integer(""epochs"", 60, ""Number of epochs to train for."")\ntf.flags.DEFINE_integer(""embedding_size"", 40, ""Embedding size for embedding matrices."")\ntf.flags.DEFINE_integer(""memory_size"", 50, ""Maximum size of memory."")\ntf.flags.DEFINE_integer(""random_state"", None, ""Random state."")\ntf.flags.DEFINE_string(""data_dir"", ""data/tasks_1-20_v1-2/en/"", ""Directory containing bAbI tasks"")\ntf.flags.DEFINE_string(""output_file"", ""scores.csv"", ""Name of output file for final bAbI accuracy scores."")\nFLAGS = tf.flags.FLAGS\n# load all train/test data\nids = range(1, 21)\ntrain, test = [], []\nfor i in ids:\n    tr, te = load_task(FLAGS.data_dir, i)\n    train.append(tr)\n    test.append(te)\ndata = list(chain.from_iterable(train + test))\n\nvocab = sorted(reduce(lambda x, y: x | y, (set(list(chain.from_iterable(s)) + q + a) for s, q, a in data)))\nword_idx = dict((c, i + 1) for i, c in enumerate(vocab))\n\nmax_story_size = max(map(len, (s for s, _, _ in data)))\nmean_story_size = int(np.mean([ len(s) for s, _, _ in data ]))\nsentence_size = max(map(len, chain.from_iterable(s for s, _, _ in data)))\nquery_size = max(map(len, (q for _, q, _ in data)))\nmemory_size = min(FLAGS.memory_size, max_story_size)\n\n# Add time words/indexes\nfor i in range(memory_size):\n    word_idx[\'time{}\'.format(i+1)] = \'time{}\'.format(i+1)\n\nvocab_size = len(word_idx) + 1 # +1 for nil word\nsentence_size = max(query_size, sentence_size) # for the position\nsentence_size += 1  # +1 for time words\n\nprint(""Longest sentence length"", sentence_size)\nprint(""Longest story length"", max_story_size)\nprint(""Average story length"", mean_story_size)\n\n# train/validation/test sets\ntrainS = []\nvalS = []\ntrainQ = []\nvalQ = []\ntrainA = []\nvalA = []\nfor task in train:\n    S, Q, A = vectorize_data(task, word_idx, sentence_size, memory_size)\n    ts, vs, tq, vq, ta, va = cross_validation.train_test_split(S, Q, A, test_size=0.1, random_state=FLAGS.random_state)\n    trainS.append(ts)\n    trainQ.append(tq)\n    trainA.append(ta)\n    valS.append(vs)\n    valQ.append(vq)\n    valA.append(va)\n\ntrainS = reduce(lambda a,b : np.vstack((a,b)), (x for x in trainS))\ntrainQ = reduce(lambda a,b : np.vstack((a,b)), (x for x in trainQ))\ntrainA = reduce(lambda a,b : np.vstack((a,b)), (x for x in trainA))\nvalS = reduce(lambda a,b : np.vstack((a,b)), (x for x in valS))\nvalQ = reduce(lambda a,b : np.vstack((a,b)), (x for x in valQ))\nvalA = reduce(lambda a,b : np.vstack((a,b)), (x for x in valA))\n\ntestS, testQ, testA = vectorize_data(list(chain.from_iterable(test)), word_idx, sentence_size, memory_size)\n\nn_train = trainS.shape[0]\nn_val = valS.shape[0]\nn_test = testS.shape[0]\n\nprint(""Training Size"", n_train)\nprint(""Validation Size"", n_val)\nprint(""Testing Size"", n_test)\n\nprint(trainS.shape, valS.shape, testS.shape)\nprint(trainQ.shape, valQ.shape, testQ.shape)\nprint(trainA.shape, valA.shape, testA.shape)\n\ntrain_labels = np.argmax(trainA, axis=1)\ntest_labels = np.argmax(testA, axis=1)\nval_labels = np.argmax(valA, axis=1)\n\ntf.set_random_seed(FLAGS.random_state)\nbatch_size = FLAGS.batch_size\n\n# This avoids feeding 1 task after another, instead each batch has a random sampling of tasks\nbatches = zip(range(0, n_train-batch_size, batch_size), range(batch_size, n_train, batch_size))\nbatches = [(start, end) for start,end in batches]\n\nwith tf.Session() as sess:\n    model = MemN2N(batch_size, vocab_size, sentence_size, memory_size, FLAGS.embedding_size, session=sess,\n                   hops=FLAGS.hops, max_grad_norm=FLAGS.max_grad_norm)\n    for i in range(1, FLAGS.epochs+1):\n        # Stepped learning rate\n        if i - 1 <= FLAGS.anneal_stop_epoch:\n            anneal = 2.0 ** ((i - 1) // FLAGS.anneal_rate)\n        else:\n            anneal = 2.0 ** (FLAGS.anneal_stop_epoch // FLAGS.anneal_rate)\n        lr = FLAGS.learning_rate / anneal\n\n        np.random.shuffle(batches)\n        total_cost = 0.0\n        for start, end in batches:\n            s = trainS[start:end]\n            q = trainQ[start:end]\n            a = trainA[start:end]\n            cost_t = model.batch_fit(s, q, a, lr)\n            total_cost += cost_t\n\n        if i % FLAGS.evaluation_interval == 0:\n            train_accs = []\n            for start in range(0, n_train, n_train/20):\n                end = start + n_train/20\n                s = trainS[start:end]\n                q = trainQ[start:end]\n                pred = model.predict(s, q)\n                acc = metrics.accuracy_score(pred, train_labels[start:end])\n                train_accs.append(acc)\n\n            val_accs = []\n            for start in range(0, n_val, n_val/20):\n                end = start + n_val/20\n                s = valS[start:end]\n                q = valQ[start:end]\n                pred = model.predict(s, q)\n                acc = metrics.accuracy_score(pred, val_labels[start:end])\n                val_accs.append(acc)\n\n            test_accs = []\n            for start in range(0, n_test, n_test/20):\n                end = start + n_test/20\n                s = testS[start:end]\n                q = testQ[start:end]\n                pred = model.predict(s, q)\n                acc = metrics.accuracy_score(pred, test_labels[start:end])\n                test_accs.append(acc)\n\n            print(\'-----------------------\')\n            print(\'Epoch\', i)\n            print(\'Total Cost:\', total_cost)\n            print()\n            t = 1\n            for t1, t2, t3 in zip(train_accs, val_accs, test_accs):\n                print(""Task {}"".format(t))\n                print(""Training Accuracy = {}"".format(t1))\n                print(""Validation Accuracy = {}"".format(t2))\n                print(""Testing Accuracy = {}"".format(t3))\n                print()\n                t += 1\n            print(\'-----------------------\')\n\n        # Write final results to csv file\n        if i == FLAGS.epochs:\n            print(\'Writing final results to {}\'.format(FLAGS.output_file))\n            df = pd.DataFrame({\n            \'Training Accuracy\': train_accs,\n            \'Validation Accuracy\': val_accs,\n            \'Testing Accuracy\': test_accs\n            }, index=range(1, 21))\n            df.index.name = \'Task\'\n            df.to_csv(FLAGS.output_file)\n'"
single.py,16,"b'""""""Example running MemN2N on a single bAbI task.\nDownload tasks from facebook.ai/babi """"""\nfrom __future__ import absolute_import\nfrom __future__ import print_function\n\nfrom data_utils import load_task, vectorize_data\nfrom sklearn import cross_validation, metrics\nfrom memn2n import MemN2N\nfrom itertools import chain\nfrom six.moves import range, reduce\n\nimport tensorflow as tf\nimport numpy as np\n\ntf.flags.DEFINE_float(""learning_rate"", 0.01, ""Learning rate for SGD."")\ntf.flags.DEFINE_float(""anneal_rate"", 25, ""Number of epochs between halving the learnign rate."")\ntf.flags.DEFINE_float(""anneal_stop_epoch"", 100, ""Epoch number to end annealed lr schedule."")\ntf.flags.DEFINE_float(""max_grad_norm"", 40.0, ""Clip gradients to this norm."")\ntf.flags.DEFINE_integer(""evaluation_interval"", 10, ""Evaluate and print results every x epochs"")\ntf.flags.DEFINE_integer(""batch_size"", 32, ""Batch size for training."")\ntf.flags.DEFINE_integer(""hops"", 3, ""Number of hops in the Memory Network."")\ntf.flags.DEFINE_integer(""epochs"", 100, ""Number of epochs to train for."")\ntf.flags.DEFINE_integer(""embedding_size"", 20, ""Embedding size for embedding matrices."")\ntf.flags.DEFINE_integer(""memory_size"", 50, ""Maximum size of memory."")\ntf.flags.DEFINE_integer(""task_id"", 1, ""bAbI task id, 1 <= id <= 20"")\ntf.flags.DEFINE_integer(""random_state"", None, ""Random state."")\ntf.flags.DEFINE_string(""data_dir"", ""data/tasks_1-20_v1-2/en/"", ""Directory containing bAbI tasks"")\nFLAGS = tf.flags.FLAGS\n\nprint(""Started Task:"", FLAGS.task_id)\n\n# task data\ntrain, test = load_task(FLAGS.data_dir, FLAGS.task_id)\ndata = train + test\n\nvocab = sorted(reduce(lambda x, y: x | y, (set(list(chain.from_iterable(s)) + q + a) for s, q, a in data)))\nword_idx = dict((c, i + 1) for i, c in enumerate(vocab))\n\nmax_story_size = max(map(len, (s for s, _, _ in data)))\nmean_story_size = int(np.mean([ len(s) for s, _, _ in data ]))\nsentence_size = max(map(len, chain.from_iterable(s for s, _, _ in data)))\nquery_size = max(map(len, (q for _, q, _ in data)))\nmemory_size = min(FLAGS.memory_size, max_story_size)\n\n# Add time words/indexes\nfor i in range(memory_size):\n    word_idx[\'time{}\'.format(i+1)] = \'time{}\'.format(i+1)\n\nvocab_size = len(word_idx) + 1 # +1 for nil word\nsentence_size = max(query_size, sentence_size) # for the position\nsentence_size += 1  # +1 for time words\n\nprint(""Longest sentence length"", sentence_size)\nprint(""Longest story length"", max_story_size)\nprint(""Average story length"", mean_story_size)\n\n# train/validation/test sets\nS, Q, A = vectorize_data(train, word_idx, sentence_size, memory_size)\ntrainS, valS, trainQ, valQ, trainA, valA = cross_validation.train_test_split(S, Q, A, test_size=.1, random_state=FLAGS.random_state)\ntestS, testQ, testA = vectorize_data(test, word_idx, sentence_size, memory_size)\n\nprint(testS[0])\n\nprint(""Training set shape"", trainS.shape)\n\n# params\nn_train = trainS.shape[0]\nn_test = testS.shape[0]\nn_val = valS.shape[0]\n\nprint(""Training Size"", n_train)\nprint(""Validation Size"", n_val)\nprint(""Testing Size"", n_test)\n\ntrain_labels = np.argmax(trainA, axis=1)\ntest_labels = np.argmax(testA, axis=1)\nval_labels = np.argmax(valA, axis=1)\n\ntf.set_random_seed(FLAGS.random_state)\nbatch_size = FLAGS.batch_size\n\nbatches = zip(range(0, n_train-batch_size, batch_size), range(batch_size, n_train, batch_size))\nbatches = [(start, end) for start, end in batches]\n\nwith tf.Session() as sess:\n    model = MemN2N(batch_size, vocab_size, sentence_size, memory_size, FLAGS.embedding_size, session=sess,\n                   hops=FLAGS.hops, max_grad_norm=FLAGS.max_grad_norm)\n    for t in range(1, FLAGS.epochs+1):\n        # Stepped learning rate\n        if t - 1 <= FLAGS.anneal_stop_epoch:\n            anneal = 2.0 ** ((t - 1) // FLAGS.anneal_rate)\n        else:\n            anneal = 2.0 ** (FLAGS.anneal_stop_epoch // FLAGS.anneal_rate)\n        lr = FLAGS.learning_rate / anneal\n\n        np.random.shuffle(batches)\n        total_cost = 0.0\n        for start, end in batches:\n            s = trainS[start:end]\n            q = trainQ[start:end]\n            a = trainA[start:end]\n            cost_t = model.batch_fit(s, q, a, lr)\n            total_cost += cost_t\n\n        if t % FLAGS.evaluation_interval == 0:\n            train_preds = []\n            for start in range(0, n_train, batch_size):\n                end = start + batch_size\n                s = trainS[start:end]\n                q = trainQ[start:end]\n                pred = model.predict(s, q)\n                train_preds += list(pred)\n\n            val_preds = model.predict(valS, valQ)\n            train_acc = metrics.accuracy_score(np.array(train_preds), train_labels)\n            val_acc = metrics.accuracy_score(val_preds, val_labels)\n\n            print(\'-----------------------\')\n            print(\'Epoch\', t)\n            print(\'Total Cost:\', total_cost)\n            print(\'Training Accuracy:\', train_acc)\n            print(\'Validation Accuracy:\', val_acc)\n            print(\'-----------------------\')\n\n    test_preds = model.predict(testS, testQ)\n    test_acc = metrics.accuracy_score(test_preds, test_labels)\n    print(""Testing Accuracy:"", test_acc)\n'"
memn2n/__init__.py,0,b'from __future__ import absolute_import\nfrom .memn2n import *\n'
memn2n/memn2n.py,56,"b'""""""End-To-End Memory Networks.\n\nThe implementation is based on http://arxiv.org/abs/1503.08895 [1]\n""""""\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nimport tensorflow as tf\nimport numpy as np\nfrom six.moves import range\n\ndef position_encoding(sentence_size, embedding_size):\n    """"""\n    Position Encoding described in section 4.1 [1]\n    """"""\n    encoding = np.ones((embedding_size, sentence_size), dtype=np.float32)\n    ls = sentence_size+1\n    le = embedding_size+1\n    for i in range(1, le):\n        for j in range(1, ls):\n            encoding[i-1, j-1] = (i - (embedding_size+1)/2) * (j - (sentence_size+1)/2)\n    encoding = 1 + 4 * encoding / embedding_size / sentence_size\n    # Make position encoding of time words identity to avoid modifying them \n    encoding[:, -1] = 1.0\n    return np.transpose(encoding)\n\ndef zero_nil_slot(t, name=None):\n    """"""\n    Overwrites the nil_slot (first row) of the input Tensor with zeros.\n\n    The nil_slot is a dummy slot and should not be trained and influence\n    the training algorithm.\n    """"""\n    with tf.op_scope([t], name, ""zero_nil_slot"") as name:\n        t = tf.convert_to_tensor(t, name=""t"")\n        s = tf.shape(t)[1]\n        z = tf.zeros(tf.stack([1, s]))\n        return tf.concat(axis=0, values=[z, tf.slice(t, [1, 0], [-1, -1])], name=name)\n\ndef add_gradient_noise(t, stddev=1e-3, name=None):\n    """"""\n    Adds gradient noise as described in http://arxiv.org/abs/1511.06807 [2].\n\n    The input Tensor `t` should be a gradient.\n\n    The output will be `t` + gaussian noise.\n\n    0.001 was said to be a good fixed value for memory networks [2].\n    """"""\n    with tf.op_scope([t, stddev], name, ""add_gradient_noise"") as name:\n        t = tf.convert_to_tensor(t, name=""t"")\n        gn = tf.random_normal(tf.shape(t), stddev=stddev)\n        return tf.add(t, gn, name=name)\n\nclass MemN2N(object):\n    """"""End-To-End Memory Network.""""""\n    def __init__(self, batch_size, vocab_size, sentence_size, memory_size, embedding_size,\n        hops=3,\n        max_grad_norm=40.0,\n        nonlin=None,\n        initializer=tf.random_normal_initializer(stddev=0.1),\n        encoding=position_encoding,\n        session=tf.Session(),\n        name=\'MemN2N\'):\n        """"""Creates an End-To-End Memory Network\n\n        Args:\n            batch_size: The size of the batch.\n\n            vocab_size: The size of the vocabulary (should include the nil word). The nil word\n            one-hot encoding should be 0.\n\n            sentence_size: The max size of a sentence in the data. All sentences should be padded\n            to this length. If padding is required it should be done with nil one-hot encoding (0).\n\n            memory_size: The max size of the memory. Since Tensorflow currently does not support jagged arrays\n            all memories must be padded to this length. If padding is required, the extra memories should be\n            empty memories; memories filled with the nil word ([0, 0, 0, ......, 0]).\n\n            embedding_size: The size of the word embedding.\n\n            hops: The number of hops. A hop consists of reading and addressing a memory slot.\n            Defaults to `3`.\n\n            max_grad_norm: Maximum L2 norm clipping value. Defaults to `40.0`.\n\n            nonlin: Non-linearity. Defaults to `None`.\n\n            initializer: Weight initializer. Defaults to `tf.random_normal_initializer(stddev=0.1)`.\n\n            optimizer: Optimizer algorithm used for SGD. Defaults to `tf.train.AdamOptimizer(learning_rate=1e-2)`.\n\n            encoding: A function returning a 2D Tensor (sentence_size, embedding_size). Defaults to `position_encoding`.\n\n            session: Tensorflow Session the model is run with. Defaults to `tf.Session()`.\n\n            name: Name of the End-To-End Memory Network. Defaults to `MemN2N`.\n        """"""\n\n        self._batch_size = batch_size\n        self._vocab_size = vocab_size\n        self._sentence_size = sentence_size\n        self._memory_size = memory_size\n        self._embedding_size = embedding_size\n        self._hops = hops\n        self._max_grad_norm = max_grad_norm\n        self._nonlin = nonlin\n        self._init = initializer\n        self._name = name\n\n        self._build_inputs()\n        self._build_vars()\n\n        self._opt = tf.train.GradientDescentOptimizer(learning_rate=self._lr)\n\n        self._encoding = tf.constant(encoding(self._sentence_size, self._embedding_size), name=""encoding"")\n\n        # cross entropy\n        logits = self._inference(self._stories, self._queries) # (batch_size, vocab_size)\n        cross_entropy = tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=tf.cast(self._answers, tf.float32), name=""cross_entropy"")\n        cross_entropy_sum = tf.reduce_sum(cross_entropy, name=""cross_entropy_sum"")\n\n        # loss op\n        loss_op = cross_entropy_sum\n\n        # gradient pipeline\n        grads_and_vars = self._opt.compute_gradients(loss_op)\n        grads_and_vars = [(tf.clip_by_norm(g, self._max_grad_norm), v) for g,v in grads_and_vars]\n        grads_and_vars = [(add_gradient_noise(g), v) for g,v in grads_and_vars]\n        nil_grads_and_vars = []\n        for g, v in grads_and_vars:\n            if v.name in self._nil_vars:\n                nil_grads_and_vars.append((zero_nil_slot(g), v))\n            else:\n                nil_grads_and_vars.append((g, v))\n        train_op = self._opt.apply_gradients(nil_grads_and_vars, name=""train_op"")\n\n        # predict ops\n        predict_op = tf.argmax(logits, 1, name=""predict_op"")\n        predict_proba_op = tf.nn.softmax(logits, name=""predict_proba_op"")\n        predict_log_proba_op = tf.log(predict_proba_op, name=""predict_log_proba_op"")\n\n        # assign ops\n        self.loss_op = loss_op\n        self.predict_op = predict_op\n        self.predict_proba_op = predict_proba_op\n        self.predict_log_proba_op = predict_log_proba_op\n        self.train_op = train_op\n\n        init_op = tf.global_variables_initializer()\n        self._sess = session\n        self._sess.run(init_op)\n\n\n    def _build_inputs(self):\n        self._stories = tf.placeholder(tf.int32, [None, self._memory_size, self._sentence_size], name=""stories"")\n        self._queries = tf.placeholder(tf.int32, [None, self._sentence_size], name=""queries"")\n        self._answers = tf.placeholder(tf.int32, [None, self._vocab_size], name=""answers"")\n        self._lr = tf.placeholder(tf.float32, [], name=""learning_rate"")\n\n    def _build_vars(self):\n        with tf.variable_scope(self._name):\n            nil_word_slot = tf.zeros([1, self._embedding_size])\n            A = tf.concat(axis=0, values=[ nil_word_slot, self._init([self._vocab_size-1, self._embedding_size]) ])\n            C = tf.concat(axis=0, values=[ nil_word_slot, self._init([self._vocab_size-1, self._embedding_size]) ])\n\n            self.A_1 = tf.Variable(A, name=""A"")\n\n            self.C = []\n\n            for hopn in range(self._hops):\n                with tf.variable_scope(\'hop_{}\'.format(hopn)):\n                    self.C.append(tf.Variable(C, name=""C""))\n\n            # Dont use projection for layerwise weight sharing\n            # self.H = tf.Variable(self._init([self._embedding_size, self._embedding_size]), name=""H"")\n\n            # Use final C as replacement for W\n            # self.W = tf.Variable(self._init([self._embedding_size, self._vocab_size]), name=""W"")\n\n        self._nil_vars = set([self.A_1.name] + [x.name for x in self.C])\n\n    def _inference(self, stories, queries):\n        with tf.variable_scope(self._name):\n            # Use A_1 for thee question embedding as per Adjacent Weight Sharing\n            q_emb = tf.nn.embedding_lookup(self.A_1, queries)\n            u_0 = tf.reduce_sum(q_emb * self._encoding, 1)\n            u = [u_0]\n\n            for hopn in range(self._hops):\n                if hopn == 0:\n                    m_emb_A = tf.nn.embedding_lookup(self.A_1, stories)\n                    m_A = tf.reduce_sum(m_emb_A * self._encoding, 2)\n\n                else:\n                    with tf.variable_scope(\'hop_{}\'.format(hopn - 1)):\n                        m_emb_A = tf.nn.embedding_lookup(self.C[hopn - 1], stories)\n                        m_A = tf.reduce_sum(m_emb_A * self._encoding, 2)\n\n                # hack to get around no reduce_dot\n                u_temp = tf.transpose(tf.expand_dims(u[-1], -1), [0, 2, 1])\n                dotted = tf.reduce_sum(m_A * u_temp, 2)\n\n                # Calculate probabilities\n                probs = tf.nn.softmax(dotted)\n\n                probs_temp = tf.transpose(tf.expand_dims(probs, -1), [0, 2, 1])\n                with tf.variable_scope(\'hop_{}\'.format(hopn)):\n                    m_emb_C = tf.nn.embedding_lookup(self.C[hopn], stories)\n                m_C = tf.reduce_sum(m_emb_C * self._encoding, 2)\n\n                c_temp = tf.transpose(m_C, [0, 2, 1])\n                o_k = tf.reduce_sum(c_temp * probs_temp, 2)\n\n                # Dont use projection layer for adj weight sharing\n                # u_k = tf.matmul(u[-1], self.H) + o_k\n\n                u_k = u[-1] + o_k\n\n                # nonlinearity\n                if self._nonlin:\n                    u_k = nonlin(u_k)\n\n                u.append(u_k)\n\n            # Use last C for output (transposed)\n            with tf.variable_scope(\'hop_{}\'.format(self._hops)):\n                return tf.matmul(u_k, tf.transpose(self.C[-1], [1,0]))\n\n    def batch_fit(self, stories, queries, answers, learning_rate):\n        """"""Runs the training algorithm over the passed batch\n\n        Args:\n            stories: Tensor (None, memory_size, sentence_size)\n            queries: Tensor (None, sentence_size)\n            answers: Tensor (None, vocab_size)\n\n        Returns:\n            loss: floating-point number, the loss computed for the batch\n        """"""\n        feed_dict = {self._stories: stories, self._queries: queries, self._answers: answers, self._lr: learning_rate}\n        loss, _ = self._sess.run([self.loss_op, self.train_op], feed_dict=feed_dict)\n        return loss\n\n    def predict(self, stories, queries):\n        """"""Predicts answers as one-hot encoding.\n\n        Args:\n            stories: Tensor (None, memory_size, sentence_size)\n            queries: Tensor (None, sentence_size)\n\n        Returns:\n            answers: Tensor (None, vocab_size)\n        """"""\n        feed_dict = {self._stories: stories, self._queries: queries}\n        return self._sess.run(self.predict_op, feed_dict=feed_dict)\n\n    def predict_proba(self, stories, queries):\n        """"""Predicts probabilities of answers.\n\n        Args:\n            stories: Tensor (None, memory_size, sentence_size)\n            queries: Tensor (None, sentence_size)\n\n        Returns:\n            answers: Tensor (None, vocab_size)\n        """"""\n        feed_dict = {self._stories: stories, self._queries: queries}\n        return self._sess.run(self.predict_proba_op, feed_dict=feed_dict)\n\n    def predict_log_proba(self, stories, queries):\n        """"""Predicts log probabilities of answers.\n\n        Args:\n            stories: Tensor (None, memory_size, sentence_size)\n            queries: Tensor (None, sentence_size)\n        Returns:\n            answers: Tensor (None, vocab_size)\n        """"""\n        feed_dict = {self._stories: stories, self._queries: queries}\n        return self._sess.run(self.predict_log_proba_op, feed_dict=feed_dict)\n'"
