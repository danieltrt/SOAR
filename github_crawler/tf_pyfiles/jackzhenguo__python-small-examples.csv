file_path,api_count,code
exts/chinese_search.py,0,"b'# -*- coding: utf-8 -*- \n\ndef setup(app): \n    import sphinx.search as search\n    import zh\n    search.languages[""zh_CN""] = zh.SearchChinese'"
exts/smallseg.py,0,"b'# -*- coding: utf-8 -*-\nfrom __future__ import print_function\nimport re\nimport os\nimport sys\n\ntry:\n    xrange          # Python 2\nexcept NameError:\n    xrange = range  # Python 3\n\nclass SEG(object):\n    def __init__(self):\n        _localDir=os.path.dirname(__file__)\n        _curpath=os.path.normpath(os.path.join(os.getcwd(),_localDir))\n        curpath=_curpath\n        self.d = {}\n        print(""loading dict..."", file=sys.stderr)\n        with open(os.path.join(curpath, ""main.dic"")) as in_file:\n            self.set([x.rstrip() for x in in_file])\n        with open(os.path.join(curpath,""suffix.dic"")) as in_file:\n            self.specialwords= set([x.rstrip().decode(\'utf-8\') for x in in_file])\n        print(\'dict ok.\', file=sys.stderr)\n    #set dictionary(a list)\n    def set(self,keywords):\n        p = self.d\n        q = {}\n        k = \'\'\n        for word in keywords:\n            word = (chr(11)+word).decode(\'utf-8\')\n            if len(word)>5:\n                continue\n            p = self.d\n            ln = len(word)\n            for i in xrange(ln-1,-1,-1):\n                char = word[i].lower()\n                if p==\'\':\n                    q[k] = {}\n                    p = q[k]\n                if not (char in p):\n                    p[char] = \'\'\n                    q = p\n                    k = char\n                p = p[char]\n    \n    def _binary_seg(self,s):\n        ln = len(s)\n        if ln==1:\n            return [s]\n        R = []\n        for i in xrange(ln,1,-1):\n            tmp = s[i-2:i]\n            R.append(tmp)\n        return R\n    \n    def _pro_unreg(self,piece):\n        #print(piece)\n        R = []\n        tmp = re.sub(u""\xe3\x80\x82|\xef\xbc\x8c|,|\xef\xbc\x81|\xe2\x80\xa6|!|\xe3\x80\x8a|\xe3\x80\x8b|<|>|\\""|\'|:|\xef\xbc\x9a|\xef\xbc\x9f|\\?|\xe3\x80\x81|\\||\xe2\x80\x9c|\xe2\x80\x9d|\xe2\x80\x98|\xe2\x80\x99|\xef\xbc\x9b|\xe2\x80\x94|\xef\xbc\x88|\xef\xbc\x89|\xc2\xb7|\\(|\\)|\xe3\x80\x80"","" "",piece).split()\n        ln1 = len(tmp)\n        for i in xrange(len(tmp)-1,-1,-1):\n            mc = re.split(r""([0-9A-Za-z\\-\\+#@_\\.]+)"",tmp[i])\n            for j in xrange(len(mc)-1,-1,-1):\n                r = mc[j]\n                if re.search(r""([0-9A-Za-z\\-\\+#@_\\.]+)"",r)!=None:\n                    R.append(r)\n                else:\n                    R.extend(self._binary_seg(r))\n        return R\n        \n        \n    def cut(self,text):\n        """"""\n        """"""\n        text = text.decode(\'utf-8\',\'ignore\')\n        p = self.d\n        ln = len(text)\n        i = ln \n        j = 0\n        z = ln\n        q = 0\n        recognised = []\n        mem = None\n        mem2 = None\n        while i-j>0:\n            t = text[i-j-1].lower()\n            #print(i,j,t,mem)\n            if not (t in p):\n                if (mem!=None) or (mem2!=None):\n                    if mem!=None:\n                        i,j,z = mem\n                        mem = None\n                    elif mem2!=None:\n                        delta = mem2[0]-i\n                        if delta>=1:\n                            if (delta<5) and (re.search(u""[\\w\\u2E80-\\u9FFF]"",t)!=None):\n                                pre = text[i-j]\n                                #print(pre)\n                                if not (pre in self.specialwords):\n                                    i,j,z,q = mem2\n                                    del recognised[q:]\n                            mem2 = None\n                            \n                    p = self.d\n                    if((i<ln) and (i<z)):\n                        unreg_tmp = self._pro_unreg(text[i:z])\n                        recognised.extend(unreg_tmp)\n                    recognised.append(text[i-j:i])\n                    #print(text[i-j:i],mem2)\n                    i = i-j\n                    z = i\n                    j = 0\n                    continue\n                j = 0\n                i -= 1\n                p = self.d\n                continue\n            p = p[t]\n            j+=1\n            if chr(11) in p:\n                if j<=2:\n                    mem = i,j,z\n                    #print(text[i-1])\n                    if (z-i<2) and (text[i-1] in self.specialwords) and ((mem2==None) or ((mem2!=None and mem2[0]-i>1))):\n                        #print(text[i-1])\n                        mem = None\n                        mem2 = i,j,z,len(recognised)\n                        p = self.d\n                        i -= 1\n                        j = 0\n                    continue\n                    #print(mem)\n                p = self.d\n                #print(i,j,z,text[i:z])\n                if((i<ln) and (i<z)):\n                    unreg_tmp = self._pro_unreg(text[i:z])\n                    recognised.extend(unreg_tmp)\n                recognised.append(text[i-j:i])\n                i = i-j\n                z = i\n                j = 0\n                mem = None\n                mem2 = None\n        #print(mem)\n        if mem!=None:\n            i,j,z = mem\n            recognised.extend(self._pro_unreg(text[i:z]))\n            recognised.append(text[i-j:i])        \n        else:\n            recognised.extend(self._pro_unreg(text[i-j:z]))\n        return recognised\n'"
exts/zh.py,0,"b'# -*- coding: utf-8 -*-\nfrom sphinx.search import SearchLanguage\nfrom smallseg import SEG \n\nclass SearchChinese(SearchLanguage):\n    lang = \'zh\'\n\n    def init(self, options):\n        print(""reading Chiniese dictionary"")\n        self.seg = SEG() \n\n    def split(self, input):\n        return self.seg.cut(input.encode(""utf8"")) \n\n    def word_filter(self, stemmed_word):\n        return len(stemmed_word) > 1\n'"
md/split_csv.py,0,"b""import pandas as pd\nimport os\n\n\nfile_folder = '\xe6\xad\xa4\xe5\xa4\x84\xe8\xbe\x93\xe5\x85\xa5\xe5\xbe\x85\xe5\xa4\x84\xe7\x90\x86\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe4\xbd\x8d\xe7\xbd\xae'\nfiles = os.listdir(file_folder)\nfor file in files:\n    file_loc = file_folder + '/' + file\n    raw_data = pd.read_csv(file_loc,header = None)\n    data_after_process = raw_data.iloc[:,0].str.split(';',expand = True)\n    data_after_process_loc = '\xe5\xa4\x84\xe7\x90\x86\xe5\xae\x8c\xe6\xaf\x95\xe5\x90\x8e\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\xad\x98\xe5\x82\xa8\xe4\xbd\x8d\xe7\xbd\xae'+ '/' + file\n    data_after_process.to_csv(data_after_process_loc,index=None, header= None)\n"""
rst/conf.py,0,"b'# -*- coding: utf-8 -*-\n#\n# python3-cookbook documentation build configuration file, created by\n# sphinx-quickstart on Tue Aug 19 03:21:45 2014.\n#\n# This file is execfile()d with the current directory set to its\n# containing dir.\n#\n# Note that not all possible configuration values are present in this\n# autogenerated file.\n#\n# All configuration values have a default; values that are commented out\n# serve to show the default.\n\nimport sys\nimport os\n\n# If extensions (or modules to document with autodoc) are in another directory,\n# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\n#sys.path.insert(0, os.path.abspath(\'.\'))\n\n# -- General configuration ------------------------------------------------\n\n# If your documentation needs a minimal Sphinx version, state it here.\n#needs_sphinx = \'1.0\'\n\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named \'sphinx.ext.*\') or your custom\n# ones.\nextensions = [\'chinese_search\']\n\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = [\'_templates\']\n\n# The suffix of source filenames.\nsource_suffix = \'.rst\'\n\n# The encoding of source files.\n#source_encoding = \'utf-8-sig\'\n\n# The master toctree document.\nmaster_doc = \'index\'\n\n# General information about the project.\nproject = u\'python3-small-examples\'\ncopyright = u\'2019, Emily Guo\'\n\n# The version info for the project you\'re documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = \'1.2\'\n# The full version, including alpha/beta/rc tags.\nrelease = \'1.2.378\'\n\nexclude_patterns = []\n\nhtml_theme = \'default\'\n\nhtml_static_path = [\'_static\']\n\n# Output file base name for HTML help builder.\nhtmlhelp_basename = \'python3-small-examples doc\'\n\n\n# -- Options for LaTeX output ---------------------------------------------\n\n# \xe6\xb3\xa8\xef\xbc\x9a\xe5\x9c\xa8\xe7\x94\x9f\xe6\x88\x90html\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe8\xbf\x99\xe5\x8f\xa5\xe8\xaf\x9d\xe8\xa6\x81\xe6\xb3\xa8\xe9\x87\x8a\n#latex_engine = \'xelatex\'\n\nlatex_elements={# The paper size (\'letterpaper\' or \'a4paper\').\n\'papersize\':\'a4paper\',# The font size (\'10pt\', \'11pt\' or \'12pt\').\n\'pointsize\':\'12pt\',\'classoptions\':\',oneside\',\'babel\':\'\',#\xe5\xbf\x85\xe9\xa1\xbb\n\'inputenc\':\'\',#\xe5\xbf\x85\xe9\xa1\xbb\n\'utf8extra\':\'\',#\xe5\xbf\x85\xe9\xa1\xbb\n# Additional stuff for the LaTeX preamble.\n\'preamble\': r""""""\n\\usepackage{xeCJK}\n\\usepackage{indentfirst}\n\\setlength{\\parindent}{2em}\n\\setCJKmainfont{WenQuanYi Micro Hei}\n\\setCJKmonofont[Scale=0.9]{WenQuanYi Micro Hei Mono}\n\\setCJKfamilyfont{song}{WenQuanYi Micro Hei}\n\\setCJKfamilyfont{sf}{WenQuanYi Micro Hei}\n\\XeTeXlinebreaklocale ""zh""\n\\XeTeXlinebreakskip = 0pt plus 1pt\n""""""}\n\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title,\n#  author, documentclass [howto, manual, or own class]).\nlatex_documents = [\n  (\'index\', \'python3-small-examples.tex\', u\'Python\xe5\xb0\x8f\xe4\xbe\x8b\xe5\xad\x90\',\n   u\'\xe4\xbd\x9c\xe8\x80\x85\xef\xbc\x9aEmily Guo\', \'manual\'),\n]\n\n# -- Options for manual page output ---------------------------------------\n\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    (\'index\', \'python3-small-examples\', u\'Python\xe5\xb0\x8f\xe4\xbe\x8b\xe5\xad\x90\',\n     [u\'Emily Guo\'], 1)\n]\n\n# If true, show URL addresses after external links.\n#man_show_urls = False\n\n\n# -- Options for Texinfo output -------------------------------------------\n\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [\n  (\'index\', \'python3-small-examples\', u\'\xe3\x80\x8aPython \xe5\xb0\x8f\xe4\xbe\x8b\xe5\xad\x90\xe3\x80\x8b\',\n   u\'Emily Guo\', \'python3-small-examples\', \'\xe3\x80\x8aPython \xe5\xb0\x8f\xe4\xbe\x8b\xe5\xad\x90\xe3\x80\x8b\',\n   \'Miscellaneous\'),\n]\n\n\n#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n# on_rtd is whether we are on readthedocs.org, this line of code grabbed from docs.readthedocs.org\non_rtd = os.environ.get(\'READTHEDOCS\', None) == \'True\'\n\nif not on_rtd:  # only import and set the theme if we\'re building docs locally\n    import sphinx_rtd_theme\n    html_theme = \'sphinx_rtd_theme\'\n    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\n# otherwise, readthedocs.org uses their theme by default, so no need to specify it\n#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n_exts = ""../exts""\nsys.path.append(os.path.abspath(_exts))\n\n'"
src/Descend.py,0,"b""from collections.abc import Iterator\n#\xe7\xbc\x96\xe5\x86\x99\xe4\xb8\x80\xe4\xb8\xaa\xe8\xbf\xad\xe4\xbb\xa3\xe5\x99\xa8\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87\xe5\xbe\xaa\xe7\x8e\xaf\xe8\xaf\xad\xe5\x8f\xa5\xef\xbc\x8c\xe5\xae\x9e\xe7\x8e\xb0\xe5\xaf\xb9\xe6\x9f\x90\xe4\xb8\xaa\xe6\xad\xa3\xe6\x95\xb4\xe6\x95\xb0\xe7\x9a\x84\xe4\xbe\x9d\xe6\xac\xa1\xe9\x80\x92\xe5\x87\x8f1\xef\xbc\x8c\xe7\x9b\xb4\xe5\x88\xb00.\nclass Descend(Iterator):\n    def __init__(self,N):\n        self.N=N\n        self.a=0\n    def __next__(self):\n        while self.a<self.N:\n            self.N-=1\n            return self.N\n        raise StopIteration\n    \ndescend_iter=Descend(10)\n\ntry:\n    for i in descend_iter:\n        print(i)\nexcept StopIteration as e:\n    print('\xe8\xbf\xad\xe4\xbb\xa3\xe7\xbb\x93\xe6\x9d\x9f')\n    \n"""
src/add_or_sub.py,0,"b""from operator import (add, sub)\r\n\r\n\r\ndef add_or_sub(a, b, oper):\r\n    return (add if oper == '+' else sub)(a, b)\r\n\r\n\r\nadd_or_sub(1, 2, '-')  # -1\r\n"""
src/anagram.py,0,"b""from collections import Counter\r\n\r\n# \xe6\xa3\x80\xe6\x9f\xa5\xe4\xb8\xa4\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe6\x98\xaf\xe5\x90\xa6 \xe7\x9b\xb8\xe5\x90\x8c\xe5\xad\x97\xe6\xaf\x8d\xe5\xbc\x82\xe5\xba\x8f\xe8\xaf\x8d\xef\xbc\x8c\xe7\xae\x80\xe7\xa7\xb0\xef\xbc\x9a\xe4\xba\x92\xe4\xb8\xba\xe5\x8f\x98\xe4\xbd\x8d\xe8\xaf\x8d\r\n\r\n\r\ndef anagram(str1, str2):\r\n    return Counter(str1) == Counter(str2)\r\n\r\n\r\nanagram('eleven+two', 'twelve+one')  # True \xe8\xbf\x99\xe6\x98\xaf\xe4\xb8\x80\xe5\xaf\xb9\xe7\xa5\x9e\xe5\x99\xa8\xe7\x9a\x84\xe5\x8f\x98\xe4\xbd\x8d\xe8\xaf\x8d\r\nanagram('eleven', 'twelve')  # False\r\n"""
src/batch_zip.py,0,"b""import zipfile  # \xe5\xaf\xbc\xe5\x85\xa5zipfile,\xe8\xbf\x99\xe4\xb8\xaa\xe6\x98\xaf\xe7\x94\xa8\xe6\x9d\xa5\xe5\x81\x9a\xe5\x8e\x8b\xe7\xbc\xa9\xe5\x92\x8c\xe8\xa7\xa3\xe5\x8e\x8b\xe7\x9a\x84Python\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x9b\r\nimport os\r\nimport time\r\n\r\n\r\ndef batch_zip(start_dir):\r\n    start_dir = start_dir  # \xe8\xa6\x81\xe5\x8e\x8b\xe7\xbc\xa9\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe8\xb7\xaf\xe5\xbe\x84\r\n    file_news = start_dir + '.zip'  # \xe5\x8e\x8b\xe7\xbc\xa9\xe5\x90\x8e\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe7\x9a\x84\xe5\x90\x8d\xe5\xad\x97\r\n\r\n    z = zipfile.ZipFile(file_news, 'w', zipfile.ZIP_DEFLATED)\r\n    for dir_path, dir_names, file_names in os.walk(start_dir):\r\n        # \xe8\xbf\x99\xe4\xb8\x80\xe5\x8f\xa5\xe5\xbe\x88\xe9\x87\x8d\xe8\xa6\x81\xef\xbc\x8c\xe4\xb8\x8dreplace\xe7\x9a\x84\xe8\xaf\x9d\xef\xbc\x8c\xe5\xb0\xb1\xe4\xbb\x8e\xe6\xa0\xb9\xe7\x9b\xae\xe5\xbd\x95\xe5\xbc\x80\xe5\xa7\x8b\xe5\xa4\x8d\xe5\x88\xb6\r\n        f_path = dir_path.replace(start_dir, '')\r\n        f_path = f_path and f_path + os.sep  # \xe5\xae\x9e\xe7\x8e\xb0\xe5\xbd\x93\xe5\x89\x8d\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe4\xbb\xa5\xe5\x8f\x8a\xe5\x8c\x85\xe5\x90\xab\xe7\x9a\x84\xe6\x89\x80\xe6\x9c\x89\xe6\x96\x87\xe4\xbb\xb6\xe7\x9a\x84\xe5\x8e\x8b\xe7\xbc\xa9\r\n        for filename in file_names:\r\n            z.write(os.path.join(dir_path, filename), f_path + filename)\r\n    z.close()\r\n    return file_news\r\n\r\n\r\nbatch_zip('./data/ziptest')\r\n"""
src/calculator.py,0,"b""from operator import *\r\n\r\n\r\ndef calculator(a, b, k):\r\n    return {\r\n        '+': add,\r\n        '-': sub,\r\n        '*': mul,\r\n        '/': truediv,\r\n        '**': pow\r\n    }[k](a, b)\r\n\r\n\r\ncalculator(1, 2, '+')  # 3\r\ncalculator(3, 4, '**')  # 81\r\n"""
src/camel.py,0,"b'import re\r\n\r\n# \xe7\x94\xa8\xe5\x88\xb0\xe7\x9a\x84\xe6\xad\xa3\xe5\x88\x99\xe4\xb8\xb2\xe8\xae\xb2\xe8\xa7\xa3\r\n# \\s \xe6\x8c\x87\xe5\x8c\xb9\xe9\x85\x8d\xef\xbc\x9a [ \\t\\n\\r\\f\\v]\r\n# A|B\xef\xbc\x9a\xe8\xa1\xa8\xe7\xa4\xba\xe5\x8c\xb9\xe9\x85\x8dA\xe4\xb8\xb2\xe6\x88\x96B\xe4\xb8\xb2\r\n# re.sub(pattern, newchar, string): substitue\xe7\x9a\x84\xe7\xae\x80\xe7\xa7\xb0\xef\xbc\x8c\xe7\x94\xa8newchar\xe5\xad\x97\xe7\xac\xa6\xe6\x9b\xbf\xe4\xbb\xa3\xe4\xb8\x8epattern\xe5\x8c\xb9\xe9\x85\x8d\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe6\x89\x80\xe6\x9c\x89.\r\n\r\n# title():\xe8\xbd\xac\xe5\x8c\x96\xe4\xb8\xba\xe5\xa4\xa7\xe5\x86\x99\xef\xbc\x8c\xe4\xbe\x8b\xe5\xad\x90\xef\xbc\x9a\r\n# \'Hello world\'.title() # \'Hello World\'\r\n\r\n\r\n# print(re.sub(r""\\s|_|"", """", ""He llo_worl\\td""))\r\n\r\n\r\n# print(camel(\'some_database_field_name\'))  # \'someDatabaseFieldName\'\r\ns = re.sub(r""(\\s|_|-)+"", "" "",\r\n           \'some_database_field_name\').title().replace("" "", """")  # SomeDatabaseFieldName\r\n\r\n# \xe5\x8f\xaf\xe4\xbb\xa5\xe7\x9c\x8b\xe5\x88\xb0\xe6\xad\xa4\xe6\x97\xb6\xe7\x9a\x84\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xba\xe5\xa4\xa7\xe5\x86\x99\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbd\xac\xe5\x8c\x96\xe4\xb8\xba\xe5\xb0\x8f\xe5\x86\x99\r\ns = s[0].lower()+s[1:]  # \xe6\x9c\x80\xe7\xbb\x88\xe7\xbb\x93\xe6\x9e\x9c\r\n\r\n\r\n# \xe6\x95\xb4\xe7\x90\x86\xe4\xbb\xa5\xe4\xb8\x8a\xe5\x88\x86\xe6\x9e\x90\xe5\xbe\x97\xe5\x88\xb0\xe5\xa6\x82\xe4\xb8\x8b\xe4\xbb\xa3\xe7\xa0\x81\xef\xbc\x9a\r\n\r\ndef camel(s):\r\n    s = re.sub(r""(\\s|_|-)+"", "" "", s).title().replace("" "", """")\r\n    return s[0].lower() + s[1:]\r\n\r\n\r\n# \xe6\x89\xb9\xe9\x87\x8f\xe8\xbd\xac\xe5\x8c\x96\r\n\r\ndef batch_camel(slist):\r\n    return [camel(s) for s in slist]\r\n'"
src/camel2.py,0,"b'import re\r\n\r\n# \xe5\x8f\xa6\xe4\xb8\x80\xe7\xa7\x8d\xe5\x86\x99\xe6\xb3\x95\r\n\r\n\r\ndef hump_str(string=""a_-_b"", pattern=\'\\s|_|-\'):\r\n    _ = re.compile(pattern).sub(\'\', string.title())\r\n    return _.replace(_[0], _[0].lower())\r\n\r\n\r\nprint(hump_str())\r\n'"
src/check_spec_chars.py,0,"b""import re\r\n\r\n# \xe6\xa3\x80\xe6\x9f\xa5\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe6\x98\xaf\xe5\x90\xa6\xe5\x8c\x85\xe5\x90\xab\xe9\x99\xa4\xe4\xba\x86\xe6\x95\xb0\xe5\xad\x97\xe5\x92\x8c\xe5\xad\x97\xe6\xaf\x8d\xef\xbc\x88\xe5\x90\xab\xe5\xa4\xa7\xe5\xb0\x8f\xe5\x86\x99\xef\xbc\x89\xe4\xb9\x8b\xe5\xa4\x96\xe7\x9a\x84\xe7\x89\xb9\xe6\xae\x8a\xe7\xac\xa6\xe5\x8f\xb7\xe3\x80\x82\xe4\xbe\x8b\xe5\xa6\x82\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2learnpython110*7%%99hello\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe4\xbd\x9c\xe4\xb8\xba\xe6\xad\xa4\xe5\x87\xbd\xe6\x95\xb0\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x8c\xe5\x88\x99\xe8\xbf\x94\xe5\x9b\x9eTrue\r\n\r\n\r\ndef has_spec_chars(mystr):\r\n    pat = re.compile(r'\\W+')\r\n    return pat.search(mystr) != None\r\n\r\n\r\nr = has_spec_chars('learnpython110*7%%99hello')\r\nprint(r)\r\n"""
src/coin_change.py,0,"b'""""""\r\ndp[i] = n # \xe5\x85\x91\xe6\x8d\xa2i\xe5\x85\x83\xe6\x9c\x80\xe5\xb0\x91\xe9\x9c\x80\xe8\xa6\x81n\xe6\xac\xa1\r\nif dp[i - coin] != -1 \xe8\xa1\xa8\xe6\x98\x8ei-coin\xe5\xad\x98\xe5\x9c\xa8\xe5\x85\x91\xe6\x8d\xa2\xe6\x96\xb9\xe6\xb3\x95\r\n   dp[i] = 1 + min(coin in coins for dp[i-coin])  \r\n""""""\r\n\r\n\r\ndef coin_exchange(coins, target):\r\n\r\n    if target == 0:\r\n        return 0\r\n    dp = [0 if init == 0 else -1 for init in range(target+1)]  # \xe4\xb8\xa5\xe6\xa0\xbc\xe6\xb3\xa8\xe6\x84\x8f\xe6\xad\xa4\xe8\xbe\xb9\xe7\x95\x8c\r\n    for i in range(1, target+1):\r\n        h = target\r\n        for coin in coins:\r\n            if coin <= i and dp[i - coin] != -1:\r\n                if dp[i - coin] <= h:\r\n                    h = dp[i - coin]\r\n        dp[i] = h + 1 if h < i + 1 else - 1\r\n    return dp[target]\r\n\r\n\r\nr = coin_exchange([1, 3, 5], 11)\r\nprint(r)\r\n'"
src/convert.py,0,"b'import cloudconvert\r\nimport os\r\nimport time\r\n\r\napi = cloudconvert.Api(\r\n    \'NrtpV6kD5BdVxJ2R20eBqgCHK6heTjEMxtWSWENeZ9HdKUj5Ew3aCpodMCPPwLeH\')\r\n\r\n\r\ndef convert(input_file):\r\n    filename, ext = os.path.splitext(input_file)\r\n    if ext != \'.md\':\r\n        return\r\n    print(f\'begin to convert {filename}...\')\r\n    process = api.convert({\r\n        \'inputformat\': \'md\',\r\n        \'outputformat\': \'pdf\',\r\n        \'input\': \'upload\',\r\n        \'file\': open(\'./{}\'.format(input_file), \'rb\')\r\n    })\r\n    process.wait()  # wait until conversion finished\r\n    # download output file\r\n\r\n    process.download(\r\n        ""./tmp/{}.pdf"".format(filename))\r\n    print(f""convert {filename} success"")\r\n\r\n\r\nfor input_file in os.listdir(\'.\'):\r\n    convert(input_file)\r\n    # time.sleep(1)\r\n'"
src/counter_add.py,0,"b""from collections import Counter\r\na = ['apple', 'orange', 'computer', 'orange']\r\nb = ['computer', 'orange']\r\n\r\nca = Counter(a)\r\ncb = Counter(b)\r\nca + cb  # Counter({'orange': 3, 'computer': 2, 'apple': 1})\r\n\r\n\r\n# \xe8\xbf\x9b\xe4\xb8\x80\xe6\xad\xa5\xe6\x8a\xbd\xe8\xb1\xa1\r\ndef sumc(*c):\r\n    if (len(c) < 1):\r\n        return\r\n    mapc = map(Counter, c)\r\n    s = Counter([])\r\n    for ic in mapc:\r\n        s += ic\r\n    return s\r\n\r\n\r\n#Counter({'orange': 3, 'computer': 3, 'apple': 1, 'abc': 1, 'face': 1})\r\nsumc(a, b, ['abc'], ['face', 'computer'])\r\n"""
src/datetime2_cal.py,0,"b'from datetime import date, datetime\nfrom time import localtime, strftime, strptime\n\n\ntoday_date = date.today()\nprint(today_date)  # 2019-12-22\n\ntoday_time = datetime.today()\nprint(today_time)  # 2019-12-22 18:02:33.398894\n\nlocal_time = localtime()\nprint(strftime(""%Y-%m-%d %H:%M:%S"", local_time))  # \xe8\xbd\xac\xe5\x8c\x96\xe4\xb8\xba\xe5\xae\x9a\xe5\x88\xb6\xe7\x9a\x84\xe6\xa0\xbc\xe5\xbc\x8f\n\n# parse str time to struct time\nstruct_time = strptime(\'2019-12-22 10:10:08\', ""%Y-%m-%d %H:%M:%S"")\nprint(strftime(""%m-%d-%Y %H:%M:%S"", struct_time))  # \xe8\xbd\xac\xe5\x8c\x96\xe4\xb8\xba\xe5\xae\x9a\xe5\x88\xb6\xe7\x9a\x84\xe6\xa0\xbc\xe5\xbc\x8f\n'"
src/datetime_cal.py,0,"b'from datetime import date, datetime\nimport calendar\n\n\ndef print_mydate(mydate):\n    print(f\'\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84\xe6\x97\xa5\xe6\x9c\x9f:{mydate}\\n\')\n\n    year_calendar_str = calendar.calendar(mydate.year)\n    print(f""{mydate.year}\xe5\xb9\xb4\xe7\x9a\x84\xe6\x97\xa5\xe5\x8e\x86\xe5\x9b\xbe\xef\xbc\x9a{year_calendar_str}\\n"")\n\n    is_leap = calendar.isleap(mydate.year)\n    print_leap_str = ""%s\xe5\xb9\xb4\xe6\x98\xaf\xe9\x97\xb0\xe5\xb9\xb4"" if is_leap else ""%s\xe5\xb9\xb4\xe4\xb8\x8d\xe6\x98\xaf\xe9\x97\xb0\xe5\xb9\xb4\\n""\n    print(print_leap_str % mydate.year)\n\n    month_calendar_str = calendar.month(mydate.year, mydate.month)\n    print(f""{mydate.year}\xe5\xb9\xb4-{mydate.month}\xe6\x9c\x88\xe7\x9a\x84\xe6\x97\xa5\xe5\x8e\x86\xe5\x9b\xbe\xef\xbc\x9a{month_calendar_str}\\n"")\n\n    weekday, days = calendar.monthrange(mydate.year, mydate.month)\n    print(f\'{mydate.year}\xe5\xb9\xb4-{mydate.month}\xe6\x9c\x88\xe7\x9a\x84\xe7\xac\xac\xe4\xb8\x80\xe5\xa4\xa9\xe6\x98\xaf\xe9\x82\xa3\xe4\xb8\x80\xe5\x91\xa8\xe7\x9a\x84\xe7\xac\xac{weekday}\xe5\xa4\xa9\\n\')\n    print(f\'{mydate.year}\xe5\xb9\xb4-{mydate.month}\xe6\x9c\x88\xe5\x85\xb1\xe6\x9c\x89{days}\xe5\xa4\xa9\\n\')\n\n    month_first_day = date(mydate.year, mydate.month, 1)\n    print(f""\xe5\xbd\x93\xe6\x9c\x88\xe7\xac\xac\xe4\xb8\x80\xe5\xa4\xa9:{month_first_day}\\n"")\n\n    month_last_day = date(mydate.year, mydate.month, days)\n    print(f""\xe5\xbd\x93\xe6\x9c\x88\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe5\xa4\xa9:{month_last_day}\\n"")\n\n\nprint_mydate(date.today())\n'"
src/defaultdict.py,0,"b""# \xe4\xb8\x80\xe9\x94\xae\xe5\xaf\xb9\xe5\xa4\x9a\xe4\xb8\xaa\xe5\x80\xbc\nd = {}\nlst = [(1,'apple'),(2,'orange'),(1,'compute')]\nfor k,v in lst:\n    if k not in d:\n        d[k]=[]\n    d[k].append(v)\n\nprint(d) # {1: ['apple', 'compute'], 2: ['orange']}\n\n# \xe4\xbd\xbf\xe7\x94\xa8defaultdict\nfrom collections import defaultdict\nd = defaultdict(list)\nfor k,v in lst:\n    d[k].append(v)\n\nprint(d) # defaultdict(<class 'list'>, {1: ['apple', 'compute'], 2: ['orange']})"""
src/divide_iter.py,0,"b'from math import ceil\r\n\r\n\r\ndef divide_iter(lst, n):\r\n    if n <= 0:\r\n        yield lst\r\n        return\r\n    i, div = 0, ceil(len(lst) / n)\r\n    while i < n:\r\n        yield lst[i * div: (i + 1) * div]\r\n        i += 1\r\n\r\n\r\nlist(divide_iter([1, 2, 3, 4, 5], 0))  # [[1, 2, 3, 4, 5]]\r\nlist(divide_iter([1, 2, 3, 4, 5], 2))  # [[1, 2, 3], [4, 5]]\r\n\r\n'"
src/draw_4_color_grid_as_turtle.py,0,"b'import turtle\nimport random\nimport time\n\n\nclass MyTurtle(turtle.Turtle):\n    \'\'\'\n    # MyTurtle \xe7\xb1\xbb\n    + ## get_color() \n    > ### \xe9\x9a\x8f\xe6\x9c\xba\xe5\x8f\x96rgb\xe6\xa8\xa1\xe5\xbc\x8f\xe4\xb8\x8b\xe7\x9a\x84\xe9\xa2\x9c\xe8\x89\xb2\xe7\x9a\x84\xe4\xb8\x89\xe4\xb8\xaa\xe5\x8f\x82\xe6\x95\xb0\n    + ## set_pen_color() \n    > ### \xe8\xae\xbe\xe7\xbd\xae\xe7\x94\xbb\xe7\xac\x94\xe4\xbd\xbf\xe7\x94\xa8\xe9\xa2\x9c\xe8\x89\xb2\n    + ## move(x, y) \n    > ### \xe6\x8e\xa7\xe5\x88\xb6\xe6\xb5\xb7\xe9\xbe\x9f\xe7\xa7\xbb\xe5\x8a\xa8\xe5\x88\xb0\xe6\x8c\x87\xe5\xae\x9ax,y\xe5\x9d\x90\xe6\xa0\x87(\xe7\xa7\xbb\xe5\x8a\xa8\xe8\xbd\xa8\xe8\xbf\xb9\xe4\xb8\x8d\xe7\x9d\x80\xe8\x89\xb2)\n    + ## draw_shape(sides, length)\n    > ### \xe7\x94\xbb sides \xe6\x9d\xa1\xe8\xbe\xb9\xef\xbc\x8clength \xe9\x95\xbf\xe5\xba\xa6\xe7\x9a\x84\xe5\x9b\xbe\xe5\xbd\xa2\n    + ## draw_square(length)\n    > ### \xe8\xb0\x83\xe7\x94\xa8 draw_shape() \xe5\x87\xbd\xe6\x95\xb0\xe7\x94\xbb\xe8\xbe\xb9\xe9\x95\xbf\xe4\xb8\xba length \xe6\xad\xa3\xe6\x96\xb9\xe5\xbd\xa2\n    + ## draw_triangle(length)\n    > ### \xe8\xb0\x83\xe7\x94\xa8 draw_shape() \xe5\x87\xbd\xe6\x95\xb0\xe7\x94\xbb\xe8\xbe\xb9\xe9\x95\xbf\xe4\xb8\xba length \xe7\xad\x89\xe8\xbe\xb9\xe4\xb8\x89\xe8\xa7\x92\xe5\xbd\xa2\n    + ## draw_circle(length)\n    > ### \xe8\xb0\x83\xe7\x94\xa8 draw_shape() \xe5\x87\xbd\xe6\x95\xb0\xe7\x94\xbb\xe5\x8d\x8a\xe5\xbe\x84\xe4\xb8\xba length \xe5\x9c\x86\xe5\xbd\xa2\n    + ## fill_color_shape(shape, length, fill_color)\n    > ### \xe7\x94\xa8 fill_color \xe9\xa2\x9c\xe8\x89\xb2, \xe5\xa1\xab\xe5\x85\x85 length \xe8\xbe\xb9\xe9\x95\xbf, shape \xef\xbc\x88draw_square, draw_triangle, draw_circle\xef\xbc\x89\xe8\xae\xbe\xe5\xae\x9a\xe7\x9a\x84\xe5\x9b\xbe\xe5\xbd\xa2\n\n\n    ## turtle \xe5\x87\xbd\xe6\x95\xb0\xe4\xbb\x8b\xe7\xbb\x8d\n    + ### left(x)/right(x)                      \n    > \xe4\xbd\xbf\xe6\xb5\xb7\xe9\xbe\x9f \xe9\x80\x86\xe6\x97\xb6\xe9\x92\x88/\xe9\xa1\xba\xe6\x97\xb6\xe9\x92\x88 \xe6\x97\x8b\xe8\xbd\xac\n    + ### circle(x)\n    > \xe4\xbb\xa5x\xe4\xb8\xba\xe5\x8d\x8a\xe5\xbe\x84\xef\xbc\x8c\xe4\xbb\xa5\xe5\xbd\x93\xe5\x89\x8d\xe6\x96\xb9\xe5\x90\x91\xe5\xbc\x80\xe5\xa7\x8b\xe7\x94\xbb\xe5\x9c\x86\n    + ### forward(x)|fd(x)                      \n    > \xe5\x89\x8d\xe8\xbf\x9bx\xef\xbc\x8c\xe5\x8d\x95\xe4\xbd\x8d\xe4\xb8\xba\xe5\x83\x8f\xe7\xb4\xa0\n    + ### backward(x)|bk(x)|back(x)             \n    > \xe5\x90\x8e\xe9\x80\x80x\xef\xbc\x8c\xe5\x8d\x95\xe4\xbd\x8d\xe4\xb8\xba\xe5\x83\x8f\xe7\xb4\xa0\n    + ### goto(x,y)|setpos(x,y)|setposition(x,y)\n    > \xe4\xbd\xbf\xe6\xb5\xb7\xe9\xbe\x9f\xe6\xb2\xbf\xe7\x9b\xb4\xe7\xba\xbf\xe7\xa7\xbb\xe5\x8a\xa8\xe5\x88\xb0(x,y)\xe5\x9d\x90\xe6\xa0\x87\xe5\xa4\x84\n    + ### setx(x)/sety(y)                       \n    > \xe8\xae\xbe\xe7\xbd\xae x/y \xe5\x9d\x90\xe6\xa0\x87\xef\xbc\x8c\xe4\xbd\xbf\xe6\xb5\xb7\xe9\xbe\x9f\xe6\xb0\xb4\xe5\xb9\xb3\xe7\xa7\xbb\xe5\x8a\xa8\n    + ### dot(size,color)                       \n    > \xe5\x9c\xa8\xe5\xbd\x93\xe5\x89\x8d\xe4\xbd\x8d\xe7\xbd\xae\xe4\xbb\xa5\xe7\x9b\xb4\xe5\xbe\x84\xe4\xb8\xbasize\xe7\x94\xbb\xe7\x82\xb9\xef\xbc\x8c\xe9\xa2\x9c\xe8\x89\xb2\xe4\xb8\xbacolor\n    + ### speed(n)                              \n    > \xe8\xae\xbe\xe7\xbd\xae\xe6\xb5\xb7\xe9\xbe\x9f\xe7\x9a\x84\xe7\xa7\xbb\xe5\x8a\xa8\xe9\x80\x9f\xe5\xba\xa6\n    + ### pendown()|pd()|down()                 \n    > \xe4\xbd\xbf\xe6\xb5\xb7\xe9\xbe\x9f\xe2\x80\x9c\xe8\x90\xbd\xe5\x9c\xb0\xe2\x80\x9d\xef\xbc\x8c\xe7\xa7\xbb\xe5\x8a\xa8\xe8\xbd\xa8\xe8\xbf\xb9\xe5\x9c\xa8\xe5\xb1\x8f\xe5\xb9\x95\xe4\xb8\x8a\xe6\x98\xbe\xe7\xa4\xba\n    + ### penup()|up()                          \n    > \xe4\xbd\xbf\xe6\xb5\xb7\xe9\xbe\x9f\xe2\x80\x9c\xe8\xb5\xb7\xe9\xa3\x9e\xe2\x80\x9d,\xe7\xa7\xbb\xe5\x8a\xa8\xe8\xbd\xa8\xe8\xbf\xb9\xe5\x9c\xa8\xe5\xb1\x8f\xe5\xb9\x95\xe4\xb8\x8a\xe4\xb8\x8d\xe6\x98\xbe\xe7\xa4\xba\n    + ### pensize(x)                            \n    > \xe8\xae\xbe\xe7\xbd\xae\xe7\x94\xbb\xe7\xac\x94\xe5\xae\xbd\xe5\xba\xa6\xe4\xb8\xbax\xef\xbc\x8c\xe5\x8d\x95\xe4\xbd\x8d\xe4\xb8\xba\xe5\x83\x8f\xe7\xb4\xa0\n    + ### pencolor(color)                       \n    > \xe8\xae\xbe\xe7\xbd\xae\xe7\x94\xbb\xe7\xac\x94\xe9\xa2\x9c\xe8\x89\xb2\n    + ### fillcolor()                           \n    > \xe8\xae\xbe\xe7\xbd\xae\xe5\xa1\xab\xe5\x85\x85\xe9\xa2\x9c\xe8\x89\xb2\xef\xbc\x8c\xe5\xbd\x93\xe8\xbd\xa8\xe8\xbf\xb9\xe5\xbd\xa2\xe6\x88\x90\xe9\x97\xad\xe5\x90\x88\xe5\x9b\xbe\xe5\xbd\xa2\xe6\x97\xb6\xe5\xa1\xab\xe5\x85\x85\xe7\x9a\x84\xe9\xa2\x9c\xe8\x89\xb2\n    + ### begin_fill()/end_fill()               \n    > \xe6\x8e\xa7\xe5\x88\xb6\xe9\xa2\x9c\xe8\x89\xb2\xe5\xa1\xab\xe5\x85\x85\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe6\xae\xb5\xef\xbc\x8c\xe5\x8f\xaa\xe6\x9c\x89\xe5\x9c\xa8begin_fill()\xe4\xb8\x8eend_fill()\xe4\xb8\xad\xe9\x97\xb4\xe7\x9a\x84\xe9\x97\xad\xe5\x90\x88\xe5\x9b\xbe\xe5\xbd\xa2\xe6\x89\x8d\xe4\xbc\x9a\xe5\xa1\xab\xe5\x85\x85\xe9\xa2\x9c\xe8\x89\xb2\n    \'\'\'\n\n    def get_color(self):\n        rgb = []\n        for i in range(3):\n            rgb.append(random.randint(0, 255))\n        return rgb\n\n    def set_pen_color(self):\n        \'\'\'\n        ## \xe8\xae\xbe\xe7\xbd\xae\xe7\x94\xbb\xe7\xac\x94\xe7\x9a\x84\xe9\xa2\x9c\xe8\x89\xb2\n        + ### colormode(cmode) \n        >- cmode \xe4\xb8\xba1 \xe6\x88\x96\xe8\x80\x85 255\xef\xbc\x8c \n        >- \xe9\x9a\x8f\xe5\x90\x8ergb\xe4\xb8\x89\xe5\x85\x83\xe7\xbb\x84\xe7\x9a\x84\xe5\x80\xbc\xe5\xbf\x85\xe9\xa1\xbb\xe5\x9c\xa80~comde\xe4\xb9\x8b\xe9\x97\xb4\n        + ### pencolor(color=None) \n        > \xe8\xae\xbe\xe7\xbd\xae\xe7\x94\xbb\xe7\xac\x94\xe9\xa2\x9c\xe8\x89\xb2\n        \'\'\'\n        self.screen.colormode(255)\n        self.pencolor(self.get_color())\n\n    def move(self, x: int, y: int) -> None:\n        self.penup()\n        self.goto(x, y)\n        self.pendown()\n\n    def draw_shape(self, sides: int, length: int) -> None:\n        _angle = 360.0/sides\n        for side in range(sides):\n            self.forward(length)\n            self.left(_angle)\n\n    def draw_square(self, length: int) -> None:\n        self.draw_shape(4, length)\n\n    def draw_triangle(self, length: int) -> None:\n        self.draw_shape(3, length)\n\n    def draw_circle(self, length: int) -> None:\n        self.draw_shape(360, length)\n\n    def fill_color_shape(self, shape: str, length: int, fill_color: str) -> None:\n        _command = f\'self.{shape}(length)\'\n        self.begin_fill()\n        self.color(fill_color)\n        eval(_command)\n        self.end_fill()\n\n\ndef diff_color_square_address(star: list, end: int, step: int) -> list:\n    \'\'\'\n    \xe6\xa0\xb9\xe6\x8d\xae star \xe5\x88\x97\xe8\xa1\xa8\xef\xbc\x88\xe9\x80\x9a\xe5\xb8\xb8\xe4\xb8\xba[x, y]\xe8\xb5\xb7\xe5\xa7\x8b\xe5\x9d\x90\xe6\xa0\x87\xef\xbc\x89\xef\xbc\x8c end \xe5\x9d\x90\xe6\xa0\x87\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\xef\xbc\x8cstep \xe6\xad\xa5\xe9\x95\xbf\xef\xbc\x8c\xe6\x9d\xa5\xe8\xae\xa1\xe7\xae\x97\xe5\x87\xba\xe6\x89\x80\xe6\x9c\x89\xe5\x9d\x90\xe6\xa0\x87\n    \xe8\xbf\x94\xe5\x9b\x9e\xe5\x9d\x90\xe6\xa0\x87\xe5\x88\x97\xe8\xa1\xa8\xef\xbc\x88[[x,y], [x, y1], [x1, y], [x1, y1], ...]\xef\xbc\x89 \n    \'\'\'\n    x = list(range(star[0], end+1, step))\n    y = list(range(star[1], end+1, step))\n    res_array = []\n    for xi in x:\n        for yi in y:\n            res_array.append([xi, yi])\n    return res_array\n\n\ndef draw_main(b_val: int, s_len: int) -> None:\n    \'\'\'\n    + ### bgcolor(color)\xc2\xa0\n    > \xe8\xae\xbe\xe7\xbd\xae\xe5\xb1\x8f\xe5\xb9\x95\xe9\xa2\x9c\xe8\x89\xb2\xef\xbc\x8c\xe6\x96\xb9\xe5\xbc\x8f\xe5\x90\x8c\xc2\xa0color()\n    + ### speed(s=None)\xc2\xa0\n    > s\xe4\xb8\xba0-10\xe7\x9a\x84\xe6\x95\xb4\xe6\x95\xb0\xe6\x88\x96\xe8\x80\x85\xe9\x80\x9f\xe5\xba\xa6\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\n        - None\xef\xbc\x9a\xe8\xbf\x94\xe5\x9b\x9e\xe5\xbd\x93\xe5\x89\x8d\xe9\x80\x9f\xe5\xba\xa6\n        - ""fastest""\xef\xbc\x9a0\n        - ""fast""\xef\xbc\x9a10\n        - ""normal""\xef\xbc\x9a6\n        - ""slow""\xef\xbc\x9a3\n        - ""slowest""\xef\xbc\x9a1\n    \'\'\'\n    star_time = time.time()\n    t = MyTurtle()\n\n    t.screen.bgcolor(""black"")  # white\n    t.speed(100)\n\n    tem_b = b_val + 1\n    tem_s = b_val - tem_b % 2  # \xe5\x8f\x96\xe5\x8d\x95\xe6\x95\xb0\xe6\x95\xb0\xe9\x87\x8f\n    sx = list(x1 for x1 in range(1, tem_s))  # \xe5\xb0\x8f\xe6\x96\xb9\xe6\xa0\xbc\xe5\x9f\xba\xe6\x9c\xac\xe5\x9d\x90\xe6\xa0\x87\n    sy = list(y1 for y1 in range(1, tem_s))\n    bx = list(x1 for x1 in range(1, tem_b))  # \xe5\xa4\xa7\xe6\x96\xb9\xe6\xa0\xbc\xe5\x9f\xba\xe6\x9c\xac\xe5\x9d\x90\xe6\xa0\x87\n    by = list(y1 for y1 in range(1, tem_b))\n\n    b_len = len(sx)  # \xe5\xa4\xa7\xe6\x96\xb9\xe6\xa0\xbc\xe8\xbe\xb9\xe9\x95\xbf\n    different_colors_square_list = [\n        diff_color_square_address([2, 2], b_val, 4),  # \xe6\xb7\xb7\xe5\x90\x88\xe6\xa9\x99\xe8\x89\xb2\xe5\x9d\x90\xe6\xa0\x87\n        diff_color_square_address([4, 4], b_val, 4),  # \xe6\xb7\xb7\xe5\x90\x88\xe6\xb7\xa1\xe7\xbb\xbf\xe8\x89\xb2\xe5\x9d\x90\xe6\xa0\x87\n        diff_color_square_address([4, 2], b_val, 4),  # \xe6\xb7\xb7\xe5\x90\x88\xe7\xb4\xab\xe8\x89\xb2\xe5\x9d\x90\xe6\xa0\x87\n        diff_color_square_address([2, 4], b_val, 4)  # \xe6\xb7\xb7\xe5\x90\x88\xe7\xbb\xbf\xe6\x9d\xbe\xe7\x9f\xb3\xe8\x89\xb2\xe5\x9d\x90\xe6\xa0\x87\n    ]\n\n    color_list = [\n        [\'red\', \'yellow\'],  # \xe6\xb7\xb7\xe5\x90\x88\xe6\xa9\x99\xe8\x89\xb2\n        [\'green\', \'yellow\'],  # \xe6\xb7\xb7\xe5\x90\x88\xe6\xb7\xa1\xe7\xbb\xbf\xe8\x89\xb2\n        [\'red\', \'blue\'],    # \xe6\xb7\xb7\xe5\x90\x88\xe7\xb4\xab\xe8\x89\xb2\n        [\'green\', \'blue\'],  # \xe6\xb7\xb7\xe5\x90\x88\xe7\xbb\xbf\xe6\x9d\xbe\xe7\x9f\xb3\xe8\x89\xb2\n        [\'yellow\', \'blue\'],  # \xe6\xb7\xb7\xe5\x90\x88\xe7\x81\xb0\xe8\x89\xb2\n    ]\n\n    offset = (s_len * b_len * (b_val + 2) + s_len) / 2\n    print(\n        f\'s_len: {s_len}, b_len: {b_len}, offset: {offset}, turtle: {t._screen.screensize()}\')\n    turtle.tracer(False)  # \xe5\xa6\x82\xe6\x9e\x9c\xe6\x83\xb3\xe7\x9c\x8b\xe7\x9c\x8b\xe7\xa8\x8b\xe5\xba\x8f\xe7\x9a\x84\xe7\x94\xbb\xe5\x9b\xbe\xe8\xbf\x87\xe7\xa8\x8b\xe8\xae\xbe\xe6\x88\x90True\n    for x3 in bx:\n        for y3 in by:\n            for x4 in sx:\n                for y4 in sy:\n                    x = x3 * s_len * b_len + x4 * s_len - offset\n                    y = y3 * s_len * b_len + y4 * s_len - offset\n                    t.move(int(x), int(y))\n                    # \xe5\x88\xa4\xe6\x96\xad\xe5\x9d\x90\xe6\xa0\x87\xe6\x98\xaf\xe5\x90\xa6\xe5\x9c\xa8\xe7\x89\xb9\xe5\xae\x9a\xe9\xa2\x9c\xe8\x89\xb2\xe7\xbb\x84\xe5\x9d\x90\xe6\xa0\x87\xe4\xb8\xad\xef\xbc\x8c\xe6\x98\xaf\xe9\x80\x89\xe7\x94\xa8\xe5\xaf\xb9\xe5\xba\x94\xe9\xa2\x9c\xe8\x89\xb2\xe7\xbb\x84\n                    if [x3, y3] in different_colors_square_list[0]:\n                        colors = color_list[0]\n                    elif [x3, y3] in different_colors_square_list[1]:\n                        colors = color_list[1]\n                    elif [x3, y3] in different_colors_square_list[2]:\n                        colors = color_list[2]\n                    elif [x3, y3] in different_colors_square_list[3]:\n                        colors = color_list[3]\n                    else:\n                        colors = color_list[4]\n\n                    if ((x4 + y4) % 2) == 0:\n                        color = colors[0]\n                    else:\n                        color = colors[1]\n                    t.fill_color_shape(\'draw_square\', s_len, color)\n    t.move(800, 800)\n    turtle.update()\n    end_time = time.time() - star_time\n    # print_time = time.strftime(""%b %d %Y %H:%M:%S"", end_time)\n    print(end_time)\n    t.screen.mainloop()\n\n\nif __name__ == \'__main__\':\n    big_input = 9\n    big_value = 9 if big_input == \'\' or int(big_input) <= 0 else int(big_input)\n    small_input = 5\n    small_len = 5 if small_input == \'\' or int(\n        small_input) <= 0 else int(small_input)\n    print(\'big_value:\', big_value, type(big_value),\n          \'\\n\', \'small_len:\', small_len, type(small_len))\n    draw_main(big_value, small_len)\n'"
src/draw_route.py,0,"b""import matplotlib.pyplot as plt\r\nimport turtle as p\r\n\r\nlat = [\r\n    30.42642,\r\n    30.40874,\r\n    30.41054,\r\n    30.33076,\r\n    30.34913,\r\n    30.37498,\r\n    30.37501,\r\n    30.37501,\r\n    30.37501,\r\n    30.37651,\r\n    30.37399,\r\n    30.3823,\r\n    30.39114,\r\n    30.40265,\r\n    30.429,\r\n    30.43278,\r\n    30.28439,\r\n    30.28439,\r\n    30.28439,\r\n    30.28379\r\n]\r\n\r\nlng = [\r\n    103.99214,\r\n    103.98516,\r\n    103.98321,\r\n    103.95224,\r\n    104.03915,\r\n    104.05311,\r\n    104.05316,\r\n    104.05316,\r\n    104.05316,\r\n    104.05576,\r\n    104.05416,\r\n    104.16558,\r\n    104.17339,\r\n    104.14988,\r\n    104.20051,\r\n    104.20075,\r\n    104.11849,\r\n    104.11849,\r\n    104.11849,\r\n    104.12141\r\n]\r\n\r\nbegin_lat_lng = (30.63572, 103.92430)\r\n\r\n# p.pu()  # \xe6\x8a\xac\xe8\xb5\xb7\xe7\x94\xbb\xe7\xac\x94\r\n# p.goto(begin_lat_lng)  # \xe8\xb5\xb7\xe5\xa7\x8b\xe4\xbd\x8d\xe7\xbd\xae\r\n# p.color('red')  # \xe7\xbb\x98\xe5\x88\xb6\r\n# p.pensize(3)  # \xe7\x94\xbb\xe7\xac\x94\xe5\xb0\xba\xe5\xaf\xb8\xe8\xae\xbe\xe7\xbd\xae3\r\n# for x, y in zip(lat, lng):\r\n#     p.pd()  # \xe6\x94\xbe\xe4\xb8\x8b\xe7\x94\xbb\xe7\xac\x94\r\n#     p.goto(x, y)\r\n#     p.pu()\r\n#     print(x, y)\r\n\r\n\r\n# p.done()\r\nlat.insert(0, begin_lat_lng[0])\r\nlng.insert(0, begin_lat_lng[1])\r\n\r\nplt.plot(lat, lng)\r\nplt.scatter(lat[0], lng[0], c='r')\r\nplt.scatter(lat[1:], lng[1:], c='b')\r\nfor i in range(len(lat)):\r\n    plt.text(lat[i], lng[i], str(i))\r\n\r\nplt.show()\r\n"""
src/excepter.py,0,"b""import time\nimport math\n\n\ndef excepter(f):\n    i = 0\n    t1 = time.time()\n\n    def wrapper():\n        try:\n            f()\n        except Exception as e:\n            nonlocal i\n            i += 1\n            print(f'{e.args[0]}: {i}')\n            t2 = time.time()\n            if i == n:\n                print(f'spending time:{round(t2-t1,2)}')\n    return wrapper\n\n\nn = 10  # except count\n\n\n@excepter\ndef divide_zero_except():\n    time.sleep(0.1)\n    j = 1/(40-20*2)\n\n\n# test zero divived except\nfor _ in range(n):\n    divide_zero_except()\n\n\n@excepter\ndef outof_range_except():\n    a = [1, 3, 5]\n    time.sleep(0.1)\n    print(a[3])\n\n\n# test out of range except\nfor _ in range(n):\n    outof_range_except()\n"""
src/fibon.py,0,"b'def fibonacci(n):\n    a, b = 1, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n\n# for x in fibonacci(5):\n#     print(x)\nlist(fibonacci(5))  # [1, 1, 2, 3, 5]\n\n'"
src/file_modify_date.py,0,"b'import os\nimport datetime\n\nprint(datetime.datetime.now())\nprint(f""\xe5\xbd\x93\xe5\x89\x8d\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x9a{datetime.datetime.now().strftime(\'%Y-%m-%d %H:%M:%S\')}"")\n\ndef get_modify_time(dir):\n    for root,dirs,files in os.walk(dir): #dir\xe4\xb8\x8b\xe7\x9a\x84\xe6\x89\x80\xe6\x9c\x89\xe6\x96\x87\xe4\xbb\xb6\xe5\x92\x8c\xe5\xad\x90\xe6\x96\x87\xe4\xbb\xb6\xe4\xbb\xb6\xe5\xa4\xb9\n        for file in files:\n            absPathFile=os.path.join(root,file)\n            print(type(os.path.getmtime(absPathFile)))\n            modefiedTime=datetime.datetime.fromtimestamp(os.path.getmtime(absPathFile))\n            now=datetime.datetime.now()\n            diffTime=now-modefiedTime\n            if diffTime.days < 20:#\xe6\x9d\xa1\xe4\xbb\xb6\xe7\xad\x9b\xe9\x80\x89:\xe6\x9c\x80\xe8\xbf\x9120\xe5\xa4\xa9\xe5\x86\x85\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\n                print(f""{absPathFile:<27s}  \xe4\xbf\xae\xe6\x94\xb9\xe6\x97\xb6\xe9\x97\xb4[{modefiedTime.strftime(\'%Y-%m-%d %H:%M:%S\')}] \xe8\xb7\x9d\xe4\xbb\x8a[{diffTime.days:3d}\xe5\xa4\xa9{diffTime.seconds//3600:2d}\xe6\x97\xb6 {diffTime.seconds%3600//60:2d}\xe5\x88\x86]"")#\xe6\x89\x93\xe5\x8d\xb0\xe7\x9b\xb8\xe5\x85\xb3\xe4\xbf\xa1\xe6\x81\xaf\n                \nget_modify_time(\'.\')\n\n'"
src/find_all_duplicates.py,0,"b'from collections import Counter\r\n\r\n\r\ndef find_all_duplicates(lst):\r\n    c = Counter(lst)\r\n    return list(filter(lambda k: c[k] > 1, c))\r\n\r\n\r\nfind_all_duplicates([1, 2, 2, 3, 3, 3])  # [2,3]\r\n'"
src/find_format.py,0,"b""import os\n\ndef find_file(work_dir,extension='jpg'):\n    lst = []\n    for filename in os.listdir(work_dir):\n        print(filename)\n        splits = os.path.splitext(filename)\n        ext = splits[1] # \xe6\x8b\xbf\xe5\x88\xb0\xe6\x89\xa9\xe5\xb1\x95\xe5\x90\x8d\n        if ext == '.'+extension:\n            lst.append(filename)\n    return lst\n\nr = find_file('.','md') \nprint(r) # \xe8\xbf\x94\xe5\x9b\x9e\xe6\x89\x80\xe6\x9c\x89\xe7\x9b\xae\xe5\xbd\x95\xe4\xb8\x8b\xe7\x9a\x84md\xe6\x96\x87\xe4\xbb\xb6"""
src/find_n_occur.py,0,"b'def search_n(s, c, n):\n    size = 0\n    for i, x in enumerate(s):\n        if x == c:\n            size += 1\n        if size == n:\n            return i\n    return -1\n\n\n\nprint(search_n(""fdasadfadf"", ""a"", 3))# \xe7\xbb\x93\xe6\x9e\x9c\xe4\xb8\xba7\xef\xbc\x8c\xe6\xad\xa3\xe7\xa1\xae\nprint(search_n(""fdasadfadf"", ""a"", 30))# \xe7\xbb\x93\xe6\x9e\x9c\xe4\xb8\xba-1\xef\xbc\x8c\xe6\xad\xa3\xe7\xa1\xae\n'"
src/flatten.py,0,"b'from collections.abc import *\n\ndef flatten(input_arr, output_arr=None):\n    if output_arr is None:\n        output_arr = []\n    for ele in input_arr:\n        if isinstance(ele, Iterable): # \xe5\x88\xa4\xe6\x96\xadele\xe6\x98\xaf\xe5\x90\xa6\xe5\x8f\xaf\xe8\xbf\xad\xe4\xbb\xa3\n            flatten(ele, output_arr)  # \xe5\xb0\xbe\xe6\x95\xb0\xe9\x80\x92\xe5\xbd\x92\n        else:\n            output_arr.append(ele)    # \xe4\xba\xa7\xe7\x94\x9f\xe7\xbb\x93\xe6\x9e\x9c\n    return output_arr\n\nflatten([[1,2,3],[4,5]], [6,7]) # [6, 7, 1, 2, 3, 4, 5]'"
src/global_demo.py,0,b'i = 0\n\n\ndef h():\n    global i\n    i += 1\n\n\nh()\nprint(i)\n'
src/has_duplicates.py,0,"b'def has_duplicates(lst):\r\n    return len(lst) == len(set(lst))\r\n\r\n\r\nx = [1, 1, 2, 2, 3, 2, 3, 4, 5, 6]\r\ny = [1, 2, 3, 4, 5]\r\nhas_duplicates(x)  # False\r\nhas_duplicates(y)  # True\r\n'"
src/hash_crypto.py,0,"b""import hashlib\r\n# \xe5\xaf\xb9\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2s\xe5\xae\x9e\xe7\x8e\xb032\xe4\xbd\x8d\xe5\x8a\xa0\xe5\xaf\x86\r\n\r\n\r\ndef hash_cry32(s):\r\n    m = hashlib.md5()\r\n    m.update((str(s).encode('utf-8')))\r\n    return m.hexdigest()\r\n\r\n\r\nprint(hash_cry32(1))  # c4ca4238a0b923820dcc509a6f75849b\r\nprint(hash_cry32('hello'))  # 5d41402abc4b2a76b9719d911017c592\r\n"""
src/heatmap.py,0,"b'# \xe5\xaf\xbc\xe5\x85\xa5\xe5\xba\x93\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# \xe7\x94\x9f\xe6\x88\x90\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\ndata = np.random.random((6,6))\nnp.fill_diagonal(data,np.ones(6))\nfeatures = [""prop1"",""prop2"",""prop3"",""prop4"",""prop5"", ""prop6""]\ndata = pd.DataFrame(data, index = features, columns=features)\nprint(data)\n# \xe7\xbb\x98\xe5\x88\xb6\xe7\x83\xad\xe5\x8a\x9b\xe5\x9b\xbe\nheatmap_plot = sns.heatmap(data, center=0, cmap=\'gist_rainbow\')\nplt.show()'"
src/io_operate.py,0,"b'import os\r\n# \xe5\x88\x9b\xe5\xbb\xba\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\r\n\r\n\r\ndef mkdir(path):\r\n    isexists = os.path.exists(path)\r\n    if not isexists:\r\n        os.mkdir(path)\r\n# \xe8\xaf\xbb\xe5\x8f\x96\xe6\x96\x87\xe4\xbb\xb6\xe4\xbf\xa1\xe6\x81\xaf\r\n\r\n\r\ndef openfile(filename):\r\n    f = open(filename)\r\n    fllist = f.read()\r\n    f.close()\r\n    return fllist  # \xe8\xbf\x94\xe5\x9b\x9e\xe8\xaf\xbb\xe5\x8f\x96\xe5\x86\x85\xe5\xae\xb9\r\n\r\n\r\n# \xe5\x86\x99\xe5\x85\xa5\xe6\x96\x87\xe4\xbb\xb6\xe4\xbf\xa1\xe6\x81\xaf\r\n\r\n# example1\r\n# w\xe5\x86\x99\xe5\x85\xa5\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\x96\x87\xe4\xbb\xb6\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x8c\xe5\x88\x99\xe6\xb8\x85\xe7\xa9\xba\xe5\x86\x85\xe5\xae\xb9\xe5\x90\x8e\xe5\x86\x99\xe5\x85\xa5\xef\xbc\x8c\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xe5\x88\x99\xe5\x88\x9b\xe5\xbb\xba\r\nf = open(r""./data/test.txt"", ""w"", encoding=""utf-8"")\r\nprint(f.write(""\xe6\xb5\x8b\xe8\xaf\x95\xe6\x96\x87\xe4\xbb\xb6\xe5\x86\x99\xe5\x85\xa5""))\r\nf.close\r\n# example2\r\n# a\xe5\x86\x99\xe5\x85\xa5\xef\xbc\x8c\xe6\x96\x87\xe4\xbb\xb6\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x8c\xe5\x88\x99\xe5\x9c\xa8\xe6\x96\x87\xe4\xbb\xb6\xe5\x86\x85\xe5\xae\xb9\xe5\x90\x8e\xe8\xbf\xbd\xe5\x8a\xa0\xe5\x86\x99\xe5\x85\xa5\xef\xbc\x8c\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xe5\x88\x99\xe5\x88\x9b\xe5\xbb\xba\r\nf = open(r""./data/test.txt"", ""a"", encoding=""utf-8"")\r\nprint(f.write(""\xe6\xb5\x8b\xe8\xaf\x95\xe6\x96\x87\xe4\xbb\xb6\xe5\x86\x99\xe5\x85\xa5""))\r\nf.close\r\n\r\n# example3\r\n# with\xe5\x85\xb3\xe9\x94\xae\xe5\xad\x97\xe7\xb3\xbb\xe7\xbb\x9f\xe4\xbc\x9a\xe8\x87\xaa\xe5\x8a\xa8\xe5\x85\xb3\xe9\x97\xad\xe6\x96\x87\xe4\xbb\xb6\xe5\x92\x8c\xe5\xa4\x84\xe7\x90\x86\xe5\xbc\x82\xe5\xb8\xb8\r\nwith open(r""./data/test.txt"", ""w"") as f:\r\n    f.write(""hello world!"")\r\n'"
src/keras_hello_world.py,0,"b""import numpy as np\r\nfrom keras.models import Sequential\r\nfrom keras.layers import Dense\r\n\r\ndata = np.random.random((1000, 1000))\r\nlabels = np.random.randint(2, size=(1000, 1))\r\nmodel = Sequential()\r\nmodel.add(Dense(32,\r\n                activation='relu',\r\n                input_dim=100))\r\nmodel.add(Dense(1, activation='sigmoid'))\r\nmodel.compile(optimize='rmsprop', loss='binary_crossentropy',\r\n              metrics=['accuracy'])\r\nmodel.fit(data, labels, epochs=10, batch_size=32)\r\npredictions = model.predict(data)\r\n"""
src/linkedcompare.py,0,b'i = 3\r\nprint(1 < i < 3)  # False\r\nprint(1 < i <= 3)  # True\r\n'
src/max_frequency.py,0,"b""def max_length(*lst):\r\n    return max(*lst, key=lambda v: len(v))\r\n\r\n\r\nr = max_length([1, 2, 3], [4, 5, 6, 7])\r\nprint(f'\xe6\x9b\xb4\xe9\x95\xbf\xe7\x9a\x84\xe5\x88\x97\xe8\xa1\xa8\xe6\x98\xaf{r}')  # [4, 5, 6, 7]\r\n\r\nr = max_length([1, 2, 3], [4, 5, 6, 7], [8, 9])\r\nprint(f'\xe6\x9b\xb4\xe9\x95\xbf\xe7\x9a\x84\xe5\x88\x97\xe8\xa1\xa8\xe6\x98\xaf{r}')  # [4, 5, 6, 7]\r\n"""
src/max_lists.py,0,"b'def max_lists(*lst):\r\n    return max(max(*lst, key=lambda v: max(v)))\r\n\r\n\r\nr = max_lists([1, 2, 3], [6, 7, 8], [4, 5])\r\nprint(r)  # 8\r\n'"
src/md2rst.py,0,"b'import requests\n\n\ndef md_to_rst(from_file, to_file):\n    """"""\n    \xe5\xb0\x86markdown\xe6\xa0\xbc\xe5\xbc\x8f\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xbarst\xe6\xa0\xbc\xe5\xbc\x8f\n    @param from_file: {str} markdown\xe6\x96\x87\xe4\xbb\xb6\xe7\x9a\x84\xe8\xb7\xaf\xe5\xbe\x84\n    @param to_file: {str} rst\xe6\x96\x87\xe4\xbb\xb6\xe7\x9a\x84\xe8\xb7\xaf\xe5\xbe\x84\n    """"""\n    response = requests.post(\n        url=\'http://c.docverter.com/convert\',\n        data={\'to\': \'rst\', \'from\': \'markdown\'},\n        files={\'input_files[]\': open(from_file, \'rb\')}\n    )\n\n    if response.ok:\n        with open(to_file, ""wb"") as f:\n            f.write(response.content)\n            print(\'success\')\n    else:\n        print(\'failure\')\n\n\nif __name__ == \'__main__\':\n    md_to_rst(""./md/\xe4\xba\x8c\xe5\x88\x86\xe6\x90\x9c\xe7\xb4\xa2.md"", ""./rst/\xe4\xba\x8c\xe5\x88\x86\xe6\x90\x9c\xe7\xb4\xa2.rst"")\n'"
src/mean_cond.py,0,"b'# \xe5\x8e\xbb\xe6\x8e\x89\xe6\x9c\x80\xe9\xab\x98\xe5\x88\x86\xe3\x80\x81\xe6\x9c\x80\xe4\xbd\x8e\xe5\x88\x86\xe6\xb1\x82\xe5\xb9\xb3\xe5\x9d\x87\n\n#\xe6\x96\xb9\xe6\xb3\x951\xef\xbc\x9a\ndef score_mean(lst):\n    lst.sort()\n    lst_2=lst[1:(len(lst)-1)]\n    return round((sum(lst_2)/len(lst_2)),1)\n\nlst=[9.1, 9.0,8.1, 9.7, 19,8.2, 8.6,9.8]\nscore_mean(lst)\n\n#\xe6\x96\xb9\xe6\xb3\x952:\nlst.remove(min(lst))\nlst.remove(max(lst))\nprint(lst)\nprint(round(sum(lst)/len(lst),1))'"
src/merge_dict.py,0,"b""from collections.abc import Iterable\n\n\ndef merge_dict(dic1, dic2):\n    c = dic1.copy()\n    c.update(dic2)\n    return c\n\n\ndef merge_dict2(dic1, dic2):\n    return {**dic1, **dic2}\n\n\nr = merge_dict({'a': 1, 'b': 2}, {'c': 3})\nprint(r)\n\nr = merge_dict2({'a': 1, 'b': 2}, {'c': 3})\nprint(r)\n\n\n\n"""
src/min_lists.py,0,"b'def min_lists(*lst):\r\n    return min(min(*lst, key=lambda v: max(v)))\r\n\r\n\r\nr = min_lists([1, 2, 3], [6, 7, 8], [4, 5])\r\nprint(r)  # 1\r\n'"
src/movies.py,0,"b""import pandas as pd\r\nimport numpy as np\r\n\r\nmovies = pd.read_csv('./data/movietweetings/movies.dat', delimiter='::',\r\n                     engine='python', header=None, names=['Movie ID', 'Movie Title', 'Genre'])\r\n\r\nprint(movies.head())\r\n\r\n\r\nusers = pd.read_csv('./data/movietweetings/users.dat', delimiter='::',\r\n                    engine='python', header=None, names=['User ID', 'Twitter ID'])\r\nratings = pd.read_csv('./data/movietweetings/ratings.dat', delimiter='::', engine='python',\r\n                      header=None, names=['User ID', 'Movie ID', 'Rating', 'Rating Timestamp'])\r\n\r\nprint(users.head())\r\nprint(ratings.head())\r\n\r\nmovies.loc['Genre']\r\n"""
src/mul_table.py,0,"b'def mul_table():\r\n    for i in range(1, 10):\r\n        for j in range(1, i + 1):\r\n            print(str(j) + str(""*"") + str(i)+""="" + str(i*j), end=""\\t"")\r\n        print()\r\n\r\n\r\nmul_table()\r\n'"
src/mygroupby.py,0,"b""a = [{'date': '2019-12-15', 'weather': 'cloud'},\r\n {'date': '2019-12-13', 'weather': 'sunny'},\r\n {'date': '2019-12-14', 'weather': 'cloud'}]\r\n \r\nfrom operator import itemgetter\r\nfrom itertools import groupby\r\na.sort(key=itemgetter('weather', 'date'))\r\nfor k, items in groupby(a, key=itemgetter('weather')):\r\n    print(k)\r\n    for i in items:\r\n        print(i)\r\n\r\n\r\n"""
src/nine_mul.py,0,"b'for i in range(1,10):\n    for j in range(1,i+1):\n        print(\'{0}*{1}={2}\'.format(j,i,j*i),end=""\\t"")\n    print()'"
src/pair.py,0,"b""def pair(x, y):\r\n    return tuple(zip(x, y))\r\n\r\n\r\nr = pair((1, 2, 3), ('a', 'b', 'c'))\r\nprint(r)  # ((1, 'a'), (2, 'b'), (3, 'c'))\r\n"""
src/plotly_pie.py,0,"b""import plotly.graph_objects as go\n\nlabels = ['\xe7\x85\xa7\xe6\x98\x8e\xe4\xb8\x8e\xe6\x8f\x92\xe5\xba\xa7\xe7\x94\xa8\xe7\x94\xb5', '\xe7\xa9\xba\xe8\xb0\x83\xe7\x94\xa8\xe7\x94\xb5', '\xe5\x8a\xa8\xe5\x8a\x9b\xe7\x94\xa8\xe7\x94\xb5', '\xe7\x89\xb9\xe6\xae\x8a\xe7\x94\xa8\xe7\x94\xb5']\nvalues = [4500, 2500, 1053, 500]\nfig = go.Figure(data=[go.Pie(labels=labels, values=values)])\nfig.show()\n"""
src/plotly_scatter_bar.py,0,"b'import plotly.graph_objects as go\nfig = go.Figure()\nfig.add_trace(\n    go.Scatter(\n        x=[0, 1, 2, 3, 4, 5],\n        y=[1.5, 1, 1.3, 0.7, 0.8, 0.9]\n    ))\nfig.add_trace(\n    go.Bar(\n        x=[0, 1, 2, 3, 4, 5],\n        y=[2, 0.5, 0.7, -1.2, 0.3, 0.4]\n    ))\nfig.show()'"
src/print_info.py,0,"b'### 66 \xe4\xbd\xbf\xe7\x94\xa8\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\r\n\r\nfrom functools import wraps\r\nimport time\r\n\r\ndef print_info(f):\r\n    """"""\r\n    @para: f, \xe5\x85\xa5\xe5\x8f\x82\xe5\x87\xbd\xe6\x95\xb0\xe5\x90\x8d\xe7\xa7\xb0\r\n    """"""\r\n    @wraps(f) # \xe7\xa1\xae\xe4\xbf\x9d\xe5\x87\xbd\xe6\x95\xb0f\xe5\x90\x8d\xe7\xa7\xb0\xe7\xad\x89\xe5\xb1\x9e\xe6\x80\xa7\xe4\xb8\x8d\xe5\x8f\x91\xe7\x94\x9f\xe6\x94\xb9\xe5\x8f\x98\r\n    def info():\r\n        print(\'\xe6\xad\xa3\xe5\x9c\xa8\xe8\xb0\x83\xe7\x94\xa8\xe5\x87\xbd\xe6\x95\xb0\xe5\x90\x8d\xe7\xa7\xb0\xe4\xb8\xba\xef\xbc\x9a %s \' % (f.__name__,))\r\n        t1 = time.time()\r\n        f()\r\n        t2 = time.time()\r\n        delta = (t2 - t1)\r\n        print(\'%s \xe5\x87\xbd\xe6\x95\xb0\xe6\x89\xa7\xe8\xa1\x8c\xe6\x97\xb6\xe9\x95\xbf\xe4\xb8\xba\xef\xbc\x9a%f s\' % (f.__name__,delta))\r\n\r\n    return info\r\n        \r\n\r\n@print_info\r\ndef f1():\r\n    time.sleep(1.0)\r\n\r\n\r\n@print_info\r\ndef f2():\r\n    time.sleep(2.0)\r\n\r\n\r\nf1()\r\nf2()\r\n\r\n# \xe8\xbe\x93\xe5\x87\xba\xe4\xbf\xa1\xe6\x81\xaf\xe5\xa6\x82\xe4\xb8\x8b\xef\xbc\x9a\r\n\r\n# \xe6\xad\xa3\xe5\x9c\xa8\xe8\xb0\x83\xe7\x94\xa8\xe5\x87\xbd\xe6\x95\xb0\xe5\x90\x8d\xe7\xa7\xb0\xe4\xb8\xba\xef\xbc\x9a f1\r\n# f1 \xe5\x87\xbd\xe6\x95\xb0\xe6\x89\xa7\xe8\xa1\x8c\xe6\x97\xb6\xe9\x95\xbf\xe4\xb8\xba\xef\xbc\x9a1.000000 s\r\n# \xe6\xad\xa3\xe5\x9c\xa8\xe8\xb0\x83\xe7\x94\xa8\xe5\x87\xbd\xe6\x95\xb0\xe5\x90\x8d\xe7\xa7\xb0\xe4\xb8\xba\xef\xbc\x9a f2\r\n# f2 \xe5\x87\xbd\xe6\x95\xb0\xe6\x89\xa7\xe8\xa1\x8c\xe6\x97\xb6\xe9\x95\xbf\xe4\xb8\xba\xef\xbc\x9a2.000000 s'"
src/range_float.py,0,"b""#\xe4\xbb\xa5\xe6\xb5\xae\xe7\x82\xb9\xe6\x95\xb0\xe5\xb1\x95\xe7\xa4\xba\xe7\x9a\x84\xe7\xad\x89\xe5\xb7\xae\xe6\x95\xb0\xe5\x88\x97\ndef rang(start,stop,n):\n    start=float('%.2f' % start)\n    stop=float('%.2f'% stop)\n    n=int('%.d' % n)\n    step=(stop-start)/n\n    lst=[start]\n    g = 0\n    while g!=n:\n        start=start+step\n        n=n-1\n        lst.append(round((start),2))\n    return lst\n\nr = rang(1,8,10)\nprint(r)"""
src/re_extract_info.py,0,"b'import re\r\nmystr = """"""\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x861\xe5\x9e\x8b\xe8\xbd\xa68\xe8\xbe\x86\r\n\xe5\x87\xba\xe5\x8f\x91\xe6\x97\xb6\xe9\x97\xb4: 8 \xe8\xbf\x94\xe7\xa8\x8b\xe6\x97\xb6\xe9\x97\xb4: 10.5\t349 74 \xe9\x87\x8c\xe7\xa8\x8b: 27397\xe8\xbf\x90\xe8\xbe\x93\xe6\x88\x90\xe6\x9c\xac: 547.94\xe5\x85\x85\xe7\x94\xb5\xe6\x88\x90\xe6\x9c\xac: 0\xe7\xad\x89\xe5\xbe\x85\xe6\x88\x90\xe6\x9c\xac: 0\xe8\xb6\x85\xe6\x97\xb6\xe6\x88\x90\xe6\x9c\xac: 0\xe5\x9b\xba\xe5\xae\x9a\xe6\x88\x90\xe6\x9c\xac: 300\xe6\x80\xbb\xe6\x88\x90\xe6\x9c\xac: 847.94\xe5\x85\x85\xe7\x94\xb5\xe6\xac\xa1\xe6\x95\xb0: 0\r\n\xe5\x87\xba\xe5\x8f\x91\xe6\x97\xb6\xe9\x97\xb4: 8 \xe8\xbf\x94\xe7\xa8\x8b\xe6\x97\xb6\xe9\x97\xb4: 15.8281\t1470 466 1412 168 210 1242 \xe9\x87\x8c\xe7\xa8\x8b: 57596\xe8\xbf\x90\xe8\xbe\x93\xe6\x88\x90\xe6\x9c\xac: 1151.92\xe5\x85\x85\xe7\x94\xb5\xe6\x88\x90\xe6\x9c\xac: 0\xe7\xad\x89\xe5\xbe\x85\xe6\x88\x90\xe6\x9c\xac: 69.652\xe8\xb6\x85\xe6\x97\xb6\xe6\x88\x90\xe6\x9c\xac: 19.6886\xe5\x9b\xba\xe5\xae\x9a\xe6\x88\x90\xe6\x9c\xac: 300\xe6\x80\xbb\xe6\x88\x90\xe6\x9c\xac: 1541.26\xe5\x85\x85\xe7\x94\xb5\xe6\xac\xa1\xe6\x95\xb0: 0\r\n\xe5\x87\xba\xe5\x8f\x91\xe6\x97\xb6\xe9\x97\xb4: 8 \xe8\xbf\x94\xe7\xa8\x8b\xe6\x97\xb6\xe9\x97\xb4: 10.6554\t367 759 \xe9\x87\x8c\xe7\xa8\x8b: 32384\xe8\xbf\x90\xe8\xbe\x93\xe6\x88\x90\xe6\x9c\xac: 647.68\xe5\x85\x85\xe7\x94\xb5\xe6\x88\x90\xe6\x9c\xac: 0\xe7\xad\x89\xe5\xbe\x85\xe6\x88\x90\xe6\x9c\xac: 0\xe8\xb6\x85\xe6\x97\xb6\xe6\x88\x90\xe6\x9c\xac: 0\xe5\x9b\xba\xe5\xae\x9a\xe6\x88\x90\xe6\x9c\xac: 300\xe6\x80\xbb\xe6\x88\x90\xe6\x9c\xac: 947.68\xe5\x85\x85\xe7\x94\xb5\xe6\xac\xa1\xe6\x95\xb0: 0\r\n\xe5\x87\xba\xe5\x8f\x91\xe6\x97\xb6\xe9\x97\xb4: 8 \xe8\xbf\x94\xe7\xa8\x8b\xe6\x97\xb6\xe9\x97\xb4: 14.2979\t709 1313 179 \xe9\x87\x8c\xe7\xa8\x8b: 48107\xe8\xbf\x90\xe8\xbe\x93\xe6\x88\x90\xe6\x9c\xac: 962.14\xe5\x85\x85\xe7\x94\xb5\xe6\x88\x90\xe6\x9c\xac: 0\xe7\xad\x89\xe5\xbe\x85\xe6\x88\x90\xe6\x9c\xac: 83.7271\xe8\xb6\x85\xe6\x97\xb6\xe6\x88\x90\xe6\x9c\xac: 0\xe5\x9b\xba\xe5\xae\x9a\xe6\x88\x90\xe6\x9c\xac: 300\xe6\x80\xbb\xe6\x88\x90\xe6\x9c\xac: 1345.87\xe5\x85\x85\xe7\x94\xb5\xe6\xac\xa1\xe6\x95\xb0: 0\r\n\xe5\x87\xba\xe5\x8f\x91\xe6\x97\xb6\xe9\x97\xb4: 8.17338 \xe8\xbf\x94\xe7\xa8\x8b\xe6\x97\xb6\xe9\x97\xb4: 11.6975\t1542 26 747 \xe9\x87\x8c\xe7\xa8\x8b: 35883\xe8\xbf\x90\xe8\xbe\x93\xe6\x88\x90\xe6\x9c\xac: 717.66\xe5\x85\x85\xe7\x94\xb5\xe6\x88\x90\xe6\x9c\xac: 0\xe7\xad\x89\xe5\xbe\x85\xe6\x88\x90\xe6\x9c\xac: 0\xe8\xb6\x85\xe6\x97\xb6\xe6\x88\x90\xe6\x9c\xac: 0\xe5\x9b\xba\xe5\xae\x9a\xe6\x88\x90\xe6\x9c\xac: 300\xe6\x80\xbb\xe6\x88\x90\xe6\x9c\xac: 1017.66\xe5\x85\x85\xe7\x94\xb5\xe6\xac\xa1\xe6\x95\xb0: 0\r\n\xe5\x87\xba\xe5\x8f\x91\xe6\x97\xb6\xe9\x97\xb4: 8 \xe8\xbf\x94\xe7\xa8\x8b\xe6\x97\xb6\xe9\x97\xb4: 11.9863\t792 442 1219 1287 \xe9\x87\x8c\xe7\xa8\x8b: 39660\xe8\xbf\x90\xe8\xbe\x93\xe6\x88\x90\xe6\x9c\xac: 793.2\xe5\x85\x85\xe7\x94\xb5\xe6\x88\x90\xe6\x9c\xac: 0\xe7\xad\x89\xe5\xbe\x85\xe6\x88\x90\xe6\x9c\xac: 0\xe8\xb6\x85\xe6\x97\xb6\xe6\x88\x90\xe6\x9c\xac: 0\xe5\x9b\xba\xe5\xae\x9a\xe6\x88\x90\xe6\x9c\xac: 300\xe6\x80\xbb\xe6\x88\x90\xe6\x9c\xac: 1093.2\xe5\x85\x85\xe7\x94\xb5\xe6\xac\xa1\xe6\x95\xb0: 0\r\n\xe5\x87\xba\xe5\x8f\x91\xe6\x97\xb6\xe9\x97\xb4: 8 \xe8\xbf\x94\xe7\xa8\x8b\xe6\x97\xb6\xe9\x97\xb4: 15.0681\t843 1473 362 1294 298 936 \xe9\x87\x8c\xe7\xa8\x8b: 52765\xe8\xbf\x90\xe8\xbe\x93\xe6\x88\x90\xe6\x9c\xac: 1055.3\xe5\x85\x85\xe7\x94\xb5\xe6\x88\x90\xe6\x9c\xac: 0\xe7\xad\x89\xe5\xbe\x85\xe6\x88\x90\xe6\x9c\xac: 54.5788\xe8\xb6\x85\xe6\x97\xb6\xe6\x88\x90\xe6\x9c\xac: 19.4597\xe5\x9b\xba\xe5\xae\x9a\xe6\x88\x90\xe6\x9c\xac: 300\xe6\x80\xbb\xe6\x88\x90\xe6\x9c\xac: 1429.34\xe5\x85\x85\xe7\x94\xb5\xe6\xac\xa1\xe6\x95\xb0: 0\r\n\xe5\x87\xba\xe5\x8f\x91\xe6\x97\xb6\xe9\x97\xb4: 8 \xe8\xbf\x94\xe7\xa8\x8b\xe6\x97\xb6\xe9\x97\xb4: 11.5888\t265 1569 131 \xe9\x87\x8c\xe7\xa8\x8b: 36706\xe8\xbf\x90\xe8\xbe\x93\xe6\x88\x90\xe6\x9c\xac: 734.12\xe5\x85\x85\xe7\x94\xb5\xe6\x88\x90\xe6\x9c\xac: 0\xe7\xad\x89\xe5\xbe\x85\xe6\x88\x90\xe6\x9c\xac: 2.82051\xe8\xb6\x85\xe6\x97\xb6\xe6\x88\x90\xe6\x9c\xac: 0\xe5\x9b\xba\xe5\xae\x9a\xe6\x88\x90\xe6\x9c\xac: 300\xe6\x80\xbb\xe6\x88\x90\xe6\x9c\xac: 1036.94\xe5\x85\x85\xe7\x94\xb5\xe6\xac\xa1\xe6\x95\xb0: 0 \r\n\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x862\xe5\x9e\x8b\xe8\xbd\xa66\xe8\xbe\x86\r\n\t\xe5\x87\xba\xe5\x8f\x91\xe6\x97\xb6\xe9\x97\xb4: 8.77896 \xe8\xbf\x94\xe7\xa8\x8b\xe6\x97\xb6\xe9\x97\xb4: 12.8351\t509 693 81 207 \xe9\x87\x8c\xe7\xa8\x8b: 58796\xe8\xbf\x90\xe8\xbe\x93\xe6\x88\x90\xe6\x9c\xac: 1175.92\xe5\x85\x85\xe7\x94\xb5\xe6\x88\x90\xe6\x9c\xac: 0\xe7\xad\x89\xe5\xbe\x85\xe6\x88\x90\xe6\x9c\xac: 0\xe8\xb6\x85\xe6\x97\xb6\xe6\x88\x90\xe6\x9c\xac: 0\xe5\x9b\xba\xe5\xae\x9a\xe6\x88\x90\xe6\x9c\xac: 300\xe6\x80\xbb\xe6\x88\x90\xe6\x9c\xac: 1475.92\xe5\x85\x85\xe7\x94\xb5\xe6\xac\xa1\xe6\x95\xb0: 0\r\n\t\xe5\x87\xba\xe5\x8f\x91\xe6\x97\xb6\xe9\x97\xb4: 8 \xe8\xbf\x94\xe7\xa8\x8b\xe6\x97\xb6\xe9\x97\xb4: 14.0612\t1439 1409 221 983 1429 916 1048 \xe9\x87\x8c\xe7\xa8\x8b: 65099\xe8\xbf\x90\xe8\xbe\x93\xe6\x88\x90\xe6\x9c\xac: 1301.98\xe5\x85\x85\xe7\x94\xb5\xe6\x88\x90\xe6\x9c\xac: 0\xe7\xad\x89\xe5\xbe\x85\xe6\x88\x90\xe6\x9c\xac: 13.7411\xe8\xb6\x85\xe6\x97\xb6\xe6\x88\x90\xe6\x9c\xac: 0\xe5\x9b\xba\xe5\xae\x9a\xe6\x88\x90\xe6\x9c\xac: 300\xe6\x80\xbb\xe6\x88\x90\xe6\x9c\xac: 1615.72\xe5\x85\x85\xe7\x94\xb5\xe6\xac\xa1\xe6\x95\xb0: 0\r\n\t\xe5\x87\xba\xe5\x8f\x91\xe6\x97\xb6\xe9\x97\xb4: 8.16076 \xe8\xbf\x94\xe7\xa8\x8b\xe6\x97\xb6\xe9\x97\xb4: 14.8339\t737 1119 152 536 1425 450 \xe9\x87\x8c\xe7\xa8\x8b: 57865\xe8\xbf\x90\xe8\xbe\x93\xe6\x88\x90\xe6\x9c\xac: 1157.3\xe5\x85\x85\xe7\x94\xb5\xe6\x88\x90\xe6\x9c\xac: 0\xe7\xad\x89\xe5\xbe\x85\xe6\x88\x90\xe6\x9c\xac: 37.3759\xe8\xb6\x85\xe6\x97\xb6\xe6\x88\x90\xe6\x9c\xac: 0\xe5\x9b\xba\xe5\xae\x9a\xe6\x88\x90\xe6\x9c\xac: 300\xe6\x80\xbb\xe6\x88\x90\xe6\x9c\xac: 1494.68\xe5\x85\x85\xe7\x94\xb5\xe6\xac\xa1\xe6\x95\xb0: 0\r\n\t\xe5\x87\xba\xe5\x8f\x91\xe6\x97\xb6\xe9\x97\xb4: 8 \xe8\xbf\x94\xe7\xa8\x8b\xe6\x97\xb6\xe9\x97\xb4: 17.083\t743 366 869 1279 667 1200 200 \xe9\x87\x8c\xe7\xa8\x8b: 64593\xe8\xbf\x90\xe8\xbe\x93\xe6\x88\x90\xe6\x9c\xac: 1291.86\xe5\x85\x85\xe7\x94\xb5\xe6\x88\x90\xe6\x9c\xac: 0\xe7\xad\x89\xe5\xbe\x85\xe6\x88\x90\xe6\x9c\xac: 93.9982\xe8\xb6\x85\xe6\x97\xb6\xe6\x88\x90\xe6\x9c\xac: 0\xe5\x9b\xba\xe5\xae\x9a\xe6\x88\x90\xe6\x9c\xac: 300\xe6\x80\xbb\xe6\x88\x90\xe6\x9c\xac: 1685.86\xe5\x85\x85\xe7\x94\xb5\xe6\xac\xa1\xe6\x95\xb0: 0\r\n\t\xe5\x87\xba\xe5\x8f\x91\xe6\x97\xb6\xe9\x97\xb4: 8 \xe8\xbf\x94\xe7\xa8\x8b\xe6\x97\xb6\xe9\x97\xb4: 12.0742\t664 420 928 454 \xe9\x87\x8c\xe7\xa8\x8b: 47380\xe8\xbf\x90\xe8\xbe\x93\xe6\x88\x90\xe6\x9c\xac: 947.6\xe5\x85\x85\xe7\x94\xb5\xe6\x88\x90\xe6\x9c\xac: 0\xe7\xad\x89\xe5\xbe\x85\xe6\x88\x90\xe6\x9c\xac: 0\xe8\xb6\x85\xe6\x97\xb6\xe6\x88\x90\xe6\x9c\xac: 0\xe5\x9b\xba\xe5\xae\x9a\xe6\x88\x90\xe6\x9c\xac: 300\xe6\x80\xbb\xe6\x88\x90\xe6\x9c\xac: 1247.6\xe5\x85\x85\xe7\x94\xb5\xe6\xac\xa1\xe6\x95\xb0: 0\r\n\t\xe5\x87\xba\xe5\x8f\x91\xe6\x97\xb6\xe9\x97\xb4: 8 \xe8\xbf\x94\xe7\xa8\x8b\xe6\x97\xb6\xe9\x97\xb4: 12.9663\t778 1571 742 171 1222 1519 \xe9\x87\x8c\xe7\xa8\x8b: 47979\xe8\xbf\x90\xe8\xbe\x93\xe6\x88\x90\xe6\x9c\xac: 959.58\xe5\x85\x85\xe7\x94\xb5\xe6\x88\x90\xe6\x9c\xac: 0\xe7\xad\x89\xe5\xbe\x85\xe6\x88\x90\xe6\x9c\xac: 0\xe8\xb6\x85\xe6\x97\xb6\xe6\x88\x90\xe6\x9c\xac: 0\xe5\x9b\xba\xe5\xae\x9a\xe6\x88\x90\xe6\x9c\xac: 300\xe6\x80\xbb\xe6\x88\x90\xe6\x9c\xac: 1259.58\xe5\x85\x85\xe7\x94\xb5\xe6\xac\xa1\xe6\x95\xb0: 0\r\n\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x863\xe5\x9e\x8b\xe8\xbd\xa62\xe8\xbe\x86\r\n\t\xe5\x87\xba\xe5\x8f\x91\xe6\x97\xb6\xe9\x97\xb4: 8 \xe8\xbf\x94\xe7\xa8\x8b\xe6\x97\xb6\xe9\x97\xb4: 16.628\t881 164 975 1162 1392 681 1518 \xe9\x87\x8c\xe7\xa8\x8b: 50912\xe8\xbf\x90\xe8\xbe\x93\xe6\x88\x90\xe6\x9c\xac: 1527.36\xe5\x85\x85\xe7\x94\xb5\xe6\x88\x90\xe6\x9c\xac: 0\xe7\xad\x89\xe5\xbe\x85\xe6\x88\x90\xe6\x9c\xac: 97.1735\xe8\xb6\x85\xe6\x97\xb6\xe6\x88\x90\xe6\x9c\xac: 0\xe5\x9b\xba\xe5\xae\x9a\xe6\x88\x90\xe6\x9c\xac: 400\xe6\x80\xbb\xe6\x88\x90\xe6\x9c\xac: 2024.53\xe5\x85\x85\xe7\x94\xb5\xe6\xac\xa1\xe6\x95\xb0: 0\r\n\t\xe5\x87\xba\xe5\x8f\x91\xe6\x97\xb6\xe9\x97\xb4: 8 \xe8\xbf\x94\xe7\xa8\x8b\xe6\x97\xb6\xe9\x97\xb4: 11.8313\t648 1045 512 1153 \xe9\x87\x8c\xe7\xa8\x8b: 26888\xe8\xbf\x90\xe8\xbe\x93\xe6\x88\x90\xe6\x9c\xac: 806.64\xe5\x85\x85\xe7\x94\xb5\xe6\x88\x90\xe6\x9c\xac: 0\xe7\xad\x89\xe5\xbe\x85\xe6\x88\x90\xe6\x9c\xac: 9.26976\xe8\xb6\x85\xe6\x97\xb6\xe6\x88\x90\xe6\x9c\xac: 0\xe5\x9b\xba\xe5\xae\x9a\xe6\x88\x90\xe6\x9c\xac: 400\xe6\x80\xbb\xe6\x88\x90\xe6\x9c\xac: 1215.91\xe5\x85\x85\xe7\x94\xb5\xe6\xac\xa1\xe6\x95\xb0: 0""""""\r\n\r\npat = re.compile(r\'\xe4\xbd\xbf\xe7\x94\xa8\xe4\xba\x86(\\d+)\xe5\x9e\x8b\xe8\xbd\xa6(\\d+)\xe8\xbe\x86\')\r\nresult = pat.findall(mystr)\r\nprint(result)\r\n\r\npat2 = re.compile(r\'\xe8\xbf\x94\xe7\xa8\x8b\xe6\x97\xb6\xe9\x97\xb4:(.*)\xe9\x87\x8c\xe7\xa8\x8b:\')\r\nresult2 = pat2.findall(mystr)\r\nprint(result2)\r\n\r\nbeg = 0\r\nd = {}\r\nfor i in result:\r\n    vt, n = i\r\n    ni = int(n)\r\n    d[vt] = [j.split(\'\\t\')[1] for j in result2[beg:beg+ni]]\r\n    beg += ni\r\n\r\nprint(d)\r\n\r\nwith open(\'rcluster1.txt\', \'w\') as f:\r\n    for k, v in d.items():\r\n        f.write(str(k) + \' \' + str(len(v)) + \'\\n\')\r\n        for i in v:\r\n            f.write(i + \'\\n\')\r\n\r\nprint(\'save ok\')\r\n'"
src/scatter.py,0,"b'import numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\n# \xe7\x89\x88\xe6\x9c\xac\xe6\xa3\x80\xe6\x9f\xa5\nprint(mpl.__version__)  # > 3.0.0\n\n\n# \xe5\xaf\xbc\xe5\x85\xa5\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\nmidwest = pd.read_csv(\n    ""https://raw.githubusercontent.com/selva86/datasets/master/midwest_filter.csv"")\n\n\n# midwest[\'category\']\xe5\x88\x86\xe7\xb1\xbb\xef\xbc\x8c\xe9\xa2\x9c\xe8\x89\xb2\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba\xe4\xb8\x8e\xe5\x85\xb6\xe4\xb8\x80\xe6\xa0\xb7\xe5\xa4\x9a\ncategories = np.unique(midwest[\'category\'])\ncolors = [plt.cm.tab10(i/float(len(categories)-1))\n          for i in range(len(categories))]\n\n# \xe6\xaf\x8f\xe4\xb8\xaa\xe5\x88\x86\xe7\xb1\xbbplot\nplt.figure(figsize=(16, 10), dpi=80, facecolor=\'w\', edgecolor=\'k\')\n\nfor i, category in enumerate(categories):\n    plt.scatter(\'area\', \'poptotal\',\n                data=midwest.loc[midwest.category == category, :],\n                s=20, c=colors[i], label=str(category))\n\n# \xe4\xbf\xae\xe6\x94\xb9x\xe8\xbd\xb4,y\xe8\xbd\xb4\xe5\x9d\x90\xe6\xa0\x87\xe7\xb3\xbb\xe5\xb0\xba\xe5\xaf\xb8\xe5\x8c\xba\xe9\x97\xb4\nplt.gca().set(xlim=(0.0, 0.1), ylim=(0, 90000),\n              xlabel=\'Area\', ylabel=\'Population\')\n\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.title(""Midwest Area vs Population"", fontsize=22)\nplt.legend(fontsize=12)\nplt.show()\n'"
src/send_email.py,0,"b'import smtplib\r\nfrom email import (header)\r\nfrom email.mime import (text, application, multipart)\r\nfrom datetime import date, datetime\r\nimport time\r\n\r\n\r\ndef sender_mail():\r\n    smt_p = smtplib.SMTP()  # \xe5\x88\x9b\xe5\xbb\xba\xe5\xaf\xb9\xe8\xb1\xa1\r\n    smt_p.connect(host=\'smtp.qq.com\', port=25)  # \xe8\xae\xbe\xe7\xbd\xaesmtp\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\r\n    sender = \'113097485@qq.com\'\r\n    password = ""**********""  # \xe5\x9c\xa8qq\xe9\x82\xae\xe7\xae\xb1\xe8\xae\xbe\xe7\xbd\xae\xe5\xbc\x80\xe5\x90\xafSMTP\xe6\x9c\x8d\xe5\x8a\xa1\xe5\xb9\xb6\xe5\xa4\x8d\xe5\x88\xb6\xe6\x8e\x88\xe6\x9d\x83\xe7\xa0\x81\xe5\x88\xb0password\r\n    smt_p.login(sender, password)  # \xe8\xbf\x9b\xe8\xa1\x8c\xe9\x82\xae\xe7\xae\xb1\xe7\x99\xbb\xe5\xbd\x95\xe4\xb8\x80\xe6\xac\xa1\xef\xbc\x8c\xe5\xa1\xab\xe5\x86\x99\xe4\xbd\xa0\xe6\x9c\xac\xe4\xba\xba\xe7\x9a\x84\xe9\x82\xae\xe7\xae\xb1\r\n    receiver_addresses, count_num = [\r\n        \'guozhennianhua@163.com\', \'xiaoxiazi99@163.com\'], 1\r\n    for email_address in receiver_addresses:\r\n        # \xe8\xa1\xa8\xe6\xa0\xbc\xe4\xb8\xad\xe9\x82\xae\xe7\xae\xb1\xe6\xa0\xbc\xe5\xbc\x8f\xe4\xb8\x8d\xe6\xad\xa3\xe7\xa1\xae\xef\xbc\x8c\xe5\xa6\x82\xe6\x9c\x89\xe7\xa9\xba\xe5\xad\x97\xe7\xac\xa6\xef\xbc\x8c\xe5\x9c\xa8\xe5\x8f\x91\xe9\x82\xae\xe4\xbb\xb6\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe4\xbc\x9a\xe5\x87\xba\xe7\x8e\xb0\xe5\xbc\x82\xe5\xb8\xb8\xe6\x8a\xa5\xe9\x94\x99\xef\xbc\x8c\xe6\x8d\x95\xe8\x8e\xb7\xe5\x88\xb0\xe8\xbf\x99\xe4\xba\x9b\xe5\xbc\x82\xe5\xb8\xb8\xe5\xb0\xb1\xe8\xb7\xb3\xe8\xbf\x87\r\n        try:\r\n            msg = multipart.MIMEMultipart()\r\n            msg[\'From\'] = ""zhenguo""  # \xe8\xae\xbe\xe7\xbd\xae\xe5\x8f\x91\xe9\x82\xae\xe4\xbb\xb6\xe4\xba\xba\r\n            msg[\'To\'] = email_address  # \xe6\x94\xb6\xe4\xbb\xb6\xe4\xba\xba\r\n            # msg[\'Cc\'] = \'guozhennianhua@163.com\'\r\n            msg[\'subject\'] = header.Header(\'\xe9\x80\x9a\xe7\x9f\xa5\', \'utf-8\')  # \xe4\xb8\xbb\xe9\xa2\x98\xe5\x90\x8d\xe7\xa7\xb0\r\n            msg.attach(text.MIMEText(\r\n                \'\xe6\x82\xa8\xe5\xa5\xbd\xef\xbc\x81\\n\xe8\xbf\x99\xe6\x98\xaf\xe4\xb8\x80\xe5\xb0\x81\xe6\xb5\x8b\xe8\xaf\x95\xe9\x82\xae\xe4\xbb\xb6\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8Python\xe5\xae\x9e\xe7\x8e\xb0\xe8\x87\xaa\xe5\x8a\xa8\xe5\x8f\x91\xe9\x82\xae\xe4\xbb\xb6\xef\xbc\x8c\xe8\xaf\xb7\xe5\x8b\xbf\xe5\x9b\x9e\xe5\xa4\x8d\xe6\x9c\xac\xe9\x82\xae\xe4\xbb\xb6\xe5\x8a\x9f\xe8\x83\xbd~\\n\\n  \xe7\xa5\x9d\xe6\x82\xa8\xe5\xb7\xa5\xe4\xbd\x9c\xe6\x84\x89\xe5\xbf\xab\xef\xbc\x81\', \'plain\', \'utf-8\'))\r\n            xlsxpart = application.MIMEApplication(\r\n                open(r\'./data/email_test.xlsx\', \'rb\').read())\r\n            xlsxpart.add_header(\'Content-Disposition\',\r\n                                \'attachment\', filename=\'1.xlsx\')\r\n            msg.attach(xlsxpart)  # \xe6\xb7\xbb\xe5\x8a\xa0\xe9\x82\xae\xe4\xbb\xb6\xe7\x9a\x84\xe9\x99\x84\xe4\xbb\xb6\r\n            smt_p.sendmail(sender, email_address, msg.as_string())  # \xe5\x8f\x91\xe9\x80\x81\xe9\x82\xae\xe4\xbb\xb6\r\n            time.sleep(10)  # sleep10\xe7\xa7\x92\xe9\x81\xbf\xe5\x85\x8d\xe5\x8f\x91\xe9\x80\x81\xe9\xa2\x91\xe7\x8e\x87\xe8\xbf\x87\xe5\xbf\xab\xef\xbc\x8c\xe5\x8f\xaf\xe8\x83\xbd\xe8\xa2\xab\xe5\x88\xa4\xe5\xae\x9a\xe5\x9e\x83\xe5\x9c\xbe\xe9\x82\xae\xe4\xbb\xb6\xe3\x80\x82\r\n            print(\'\xe7\xac\xac%d\xe6\xac\xa1\xe5\x8f\x91\xe9\x80\x81\xe7\xbb\x99%s\' % (count_num, email_address))\r\n            count_num = count_num + 1\r\n        except Exception as e:\r\n            print(\'\xe7\xac\xac%d\xe6\xac\xa1\xe7\xbb\x99%s\xe5\x8f\x91\xe9\x80\x81\xe9\x82\xae\xe4\xbb\xb6\xe5\xbc\x82\xe5\xb8\xb8\' % (count_num, email_address))\r\n            continue\r\n    smt_p.quit()\r\n\r\n\r\nsender_mail()\r\n'"
src/send_simple_email.py,0,"b'import smtplib\r\nfrom email import (header)\r\nfrom email.mime import (text, application, multipart)\r\nimport time\r\n\r\n\r\ndef sender_mail():\r\n    smt_p = smtplib.SMTP()\r\n    smt_p.connect(host=\'smtp.qq.com\', port=25)\r\n    sender, password = \'113097485@qq.com\', ""rmedemkcefbkbhjc""\r\n    smt_p.login(sender, password)\r\n    receiver_addresses, count_num = [\r\n        \'guozhennianhua@163.com\', \'xiaoxiazi99@163.com\'], 1\r\n    for email_address in receiver_addresses:\r\n        try:\r\n            msg = multipart.MIMEMultipart()\r\n            msg[\'From\'] = ""zhenguo""\r\n            msg[\'To\'] = email_address\r\n            msg[\'subject\'] = header.Header(\'\xe8\xbf\x99\xe6\x98\xaf\xe9\x82\xae\xe4\xbb\xb6\xe4\xb8\xbb\xe9\xa2\x98\xe9\x80\x9a\xe7\x9f\xa5\', \'utf-8\')\r\n            msg.attach(text.MIMEText(\r\n                \'\xe8\xbf\x99\xe6\x98\xaf\xe4\xb8\x80\xe5\xb0\x81\xe6\xb5\x8b\xe8\xaf\x95\xe9\x82\xae\xe4\xbb\xb6\xef\xbc\x8c\xe8\xaf\xb7\xe5\x8b\xbf\xe5\x9b\x9e\xe5\xa4\x8d\xe6\x9c\xac\xe9\x82\xae\xe4\xbb\xb6~\', \'plain\', \'utf-8\'))\r\n            smt_p.sendmail(sender, email_address, msg.as_string())\r\n            time.sleep(10)\r\n            print(\'\xe7\xac\xac%d\xe6\xac\xa1\xe5\x8f\x91\xe9\x80\x81\xe7\xbb\x99%s\' % (count_num, email_address))\r\n            count_num = count_num + 1\r\n        except Exception as e:\r\n            print(\'\xe7\xac\xac%d\xe6\xac\xa1\xe7\xbb\x99%s\xe5\x8f\x91\xe9\x80\x81\xe9\x82\xae\xe4\xbb\xb6\xe5\xbc\x82\xe5\xb8\xb8\' % (count_num, email_address))\r\n            continue\r\n    smt_p.quit()\r\n\r\n\r\nsender_mail()\r\n'"
src/str_byte_len.py,0,"b""def str_byte_len(mystr):\r\n    return (len(mystr.encode('utf-8')))\r\n\r\n\r\nstr_byte_len('i love python')  # 13(\xe4\xb8\xaa\xe5\xad\x97\xe8\x8a\x82)\r\nstr_byte_len('\xe5\xad\x97\xe7\xac\xa6')  # 6(\xe4\xb8\xaa\xe5\xad\x97\xe8\x8a\x82)\r\n"""
src/str_permutation.py,0,"b""from collections import defaultdict\n\n\ndef is_permutation(str1: str, str2: str) -> bool:\n    if str1 is None or str2 is None:\n        return False\n    if len(str1) != len(str2):\n        return False\n    unq_s1 = defaultdict(int)\n    unq_s2 = defaultdict(int)\n    for c1 in unq_s1:\n        unq_s1[c1] += 1\n    for c2 in unq_s2:\n        unq_s2[c2] += 1\n\n    return unq_s1 == unq_s2\n\n\nr = is_permutation('nice', 'cine')\nprint(r)  # True\n\nr = is_permutation('', '')\nprint(r)  # True\n\nr = is_permutation('', None)\nprint(r)  # False\n\nr = is_permutation('work', 'woo')\nprint(r)  # False\n"""
src/str_rotation.py,0,"b""\n\ndef is_rotation(s1: str, s2: str) -> bool:\n    if s1 is None or s2 is None:\n        return False\n    if len(s1) != len(s2):\n        return False\n\n    def is_substring(s1: str, s2: str) -> bool:\n        return s1 in s2\n    return is_substring(s1, s2 + s2)\n\n\n# \xe6\xb5\x8b\xe8\xaf\x95\nr = is_rotation('stringbook', 'bookstring')\nprint(r)  # True\n\nr = is_rotation('greatman', 'maneatgr')\nprint(r)  # False\n"""
src/test.py,0,"b'# class Book(object):\r\n#     # \xe5\xae\x9a\xe4\xb9\x89\xe7\xb1\xbb\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\r\n#     def __init__(self, book_id, book_name, book_store_count):\r\n#         self.book_id = book_id\r\n#         self.book_name = book_name\r\n#         self.book_store_count = book_store_count\r\n#     # \xe5\xae\x9a\xe4\xb9\x89\xe5\x8a\xa0\xe6\xb3\x95\xe6\x93\x8d\xe4\xbd\x9c\r\n\r\n#     def __add__(self, book):\r\n#         return self.book_store_count + book.book_store_count\r\n\r\n\r\n# store_count = Book(1, \'python\xe5\x85\xa5\xe9\x97\xa8\xe4\xb9\xa6\', 100) + Book(2, \'\xe6\x9c\xba\xe5\x99\xa8\xe5\xad\xa6\xe4\xb9\xa0\xe5\x85\xa5\xe9\x97\xa8\xe4\xb9\xa6\', 200)\r\n# print(store_count)\r\n\r\n\r\nk = int(input())\r\nprint(f""I just input: {k}"")\r\n'"
src/test2.py,0,"b'for i in range(1,10):\n    for j in range(1,i+1):\n        print(\'{0}*{1}={2}\'.format(j,i,j*i),end=""\\t"")\n    print()'"
src/time_decorate.py,0,"b'# \xe6\xb5\x8b\xe8\xaf\x95\xe5\x87\xbd\xe6\x95\xb0\xe6\x89\xa7\xe8\xa1\x8c\xe6\x97\xb6\xe9\x97\xb4\xe7\x9a\x84\xe8\xa3\x85\xe9\xa5\xb0\xe5\x99\xa8\xe7\xa4\xba\xe4\xbe\x8b\n\nimport time\n\n\ndef timing_func(fn):\n    def wrapper():\n        start = time.time()\n        fn()  # \xe6\x89\xa7\xe8\xa1\x8c\xe4\xbc\xa0\xe5\x85\xa5\xe7\x9a\x84fn\xe5\x8f\x82\xe6\x95\xb0\n        stop = time.time()\n        return (stop-start)\n    return wrapper\n\n\n@timing_func\ndef test_list_append():\n    lst = []\n    for i in range(0, int(1e6)):\n        lst.append(i)\n\n\n@timing_func\ndef test_list_compre():\n    [i for i in range(0, int(1e6))]  # \xe5\x88\x97\xe8\xa1\xa8\xe7\x94\x9f\xe6\x88\x90\xe5\xbc\x8f\n\n\na = test_list_append()\nc = test_list_compre()\nprint(""test list append time:"", a)\nprint(""test list comprehension time:"", c)\nprint(""append/compre:"", round(a/c, 3))\n# @timing_func\xe4\xbf\xae\xe9\xa5\xb0test_list_append\xe6\x84\x8f\xe5\x91\xb3\xe7\x9d\x80\xe5\xae\x8c\xe6\x88\x90\xe4\xb8\xa4\xe6\xad\xa5\xe6\x93\x8d\xe4\xbd\x9c\xef\xbc\x8c\n# \xe5\xb0\x86test_list_append\xe4\xbd\x9c\xe4\xb8\xbatiming_func()\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe5\x8d\xb3\xe6\x89\xa7\xe8\xa1\x8ctiming_func(test_list_append),\n# \xe7\x84\xb6\xe5\x90\x8e\xe5\xb0\x86test_list_append\xe6\x9b\xbf\xe6\x8d\xa2\xe6\x88\x90timing_func()\xe8\xbf\x94\xe5\x9b\x9e\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe3\x80\x82\n# \xe5\x8d\xb3\xe8\xa2\xab\xe4\xbf\xae\xe9\xa5\xb0\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xe6\x80\xbb\xe6\x98\xaf\xe8\xa2\xab\xe6\x9b\xbf\xe6\x8d\xa2\xe6\x88\x90@\xe7\xac\xa6\xe5\x8f\xb7\xe6\x89\x80\xe5\xbc\x95\xe7\x94\xa8\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe3\x80\x82\n'"
src/top_big_file.py,0,"b""import os\nfrom collections import namedtuple\n\n\ndef top_big_file(mydir, n=10):\n    lst = []\n    FileProp = namedtuple('FileProp', ['file_path', 'file_size'])\n    for root, dirs, files in os.walk(mydir):\n        for file in files:\n            abs_path = os.path.join(root, file)\n            si = os.stat(abs_path).st_size / 1024 / 1024  # MB\n            fp = FileProp(abs_path, round(si, 3))\n            lst.append(fp)\n\n    lst = sorted(lst, key=lambda x: x.file_size, reverse=True)\n    top10 = [x for i, x in enumerate(lst) if i < n]\n    print(top10)\n\n\ntop_big_file('.')\n\n# [FileProp(file_path='.\\\\md2\\\\Python\xe4\xb9\x8b\xe8\xb7\xaf.pdf', file_size=3.118), FileProp(file_path='.\\\\.git\\\\objects\\\\7d\\\\5416afddb0bfe6de1089824f2dfb39b1ea4fcc', file_size=3.063), FileProp(file_path='.\\\\.git\\\\objects\\\\da\\\\f4589ab2e1647a9b3ce5c3e3ba48d909baec19', file_size=3.051), FileProp(file_path='.\\\\exts\\\\main.dic', file_size=2.917), FileProp(file_path='.\\\\.git\\\\objects\\\\43\\\\bffe17d4c89e259ff069fa3b7c2129e5fb04eb', file_size=2.884), FileProp(file_path='.\\\\.git\\\\objects\\\\73\\\\07314b8666bb088e9864d95b989fd9b748008f', file_size=1.206), FileProp(file_path='.\\\\.git\\\\objects\\\\e4\\\\83d8240ef9c97acd11daec1d37adddee17321e', file_size=1.088), FileProp(file_path='.\\\\.git\\\\objects\\\\ee\\\\ebe0dafc66a1e914ddb7bd55bdfceaf4b56798', file_size=1.088), FileProp(file_path='.\\\\.git\\\\objects\\\\89\\\\a98b536bf4be1b6c7c8a37885458cc0c6e5111', file_size=0.339), FileProp(file_path='.\\\\img\\\\turtlesnow2.gif', file_size=0.329)]"""
src/topn.py,0,"b""from heapq import nlargest\r\n\r\n# \xe8\xbf\x94\xe5\x9b\x9e\xe5\xad\x97\xe5\x85\xb8d\xe5\x89\x8dn\xe4\xb8\xaa\xe6\x9c\x80\xe5\xa4\xa7\xe5\x80\xbc\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe9\x94\xae\r\n\r\n\r\ndef topn_dict(d, n):\r\n    return nlargest(n, d, key=lambda k: d[k])\r\n\r\n\r\ntopn_dict({'a': 10, 'b': 8, 'c': 9, 'd': 10}, 3)  # ['a', 'd', 'c']\r\n"""
src/tqdm_process.py,0,b'from tqdm import tqdm\nimport time\n# for i in tqdm(range(10)):  # tqdm\xe6\x9e\x84\xe9\x80\xa0\xe5\x87\xbd\xe6\x95\xb0\xe5\x8c\x85\xe8\xa3\x85range\n#     time.sleep(0.2)\n\n\n# \xe8\xae\xbe\xe7\xbd\xae\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xe7\x9a\x84\xe6\x80\xbb\xe9\x95\xbf\xe5\xba\xa6\n# with tqdm(total=10) as pbar:\n#     for i in range(100):\n#         time.sleep(0.05)\n#         # \xe6\xaf\x8f\xe6\xac\xa1\xe6\x9b\xb4\xe6\x96\xb0\xe8\xbf\x9b\xe5\xba\xa6\xe6\x9d\xa1\xe7\x9a\x84\xe9\x95\xbf\xe5\xba\xa6\n#         pbar.update(1)\n\n\n# with tqdm(total=100) as pbar:\n#     for i in range(10):\n#         time.sleep(0.1)\n#         pbar.update(10)\n'
src/transpose.py,0,"b'from collections.abc import Iterable\n\n\ndef transpose(lst):\n    if len(lst) > 0 and isinstance(lst[0], Iterable) is False:\n        return lst\n    return list(map(lambda x: list(x), zip(*lst)))\n\n\n# r = transpose([1, 2, 3])\n# print(r)\n\nr = transpose([[1, 2, 3], [4, 5, 6]])\nprint(r)\n'"
src/use_namedtuple.py,0,"b""from collections import namedtuple\r\n\r\n# \xe4\xb8\x80\xe8\x88\xac\xe5\x86\x99\xe6\xb3\x95\r\nlst = [(1.5, 2, 3.0), (-0.3, -1.0, 2.1), (1.3, 2.8, -2.5)]\r\nprint(lst[0][1] - lst[1][1])\r\n\r\n# namedtuple\r\nPoint = namedtuple('Point', ['x', 'y', 'z'])  # \xe5\xae\x9a\xe4\xb9\x89\xe5\x90\x8d\xe5\xad\x97\xe4\xb8\xbaPoint\xe7\x9a\x84\xe5\x85\x83\xe7\xa5\x96\xef\xbc\x8c\xe5\xad\x97\xe6\xae\xb5\xe5\xb1\x9e\xe6\x80\xa7\xe6\x9c\x89x,y,z\r\nlst = [Point(1.5, 2, 3.0), Point(-0.3, -1.0, 2.1), Point(1.3, 2.8, -2.5)]\r\nprint(lst[0].y - lst[1].y)\r\n\r\n\r\n# \xe5\x91\xbd\xe5\x90\x8d\xe7\x9a\x84\xe5\x85\x83\xe7\xa5\x96\xef\xbc\x8c\xe5\x86\x99\xe5\x87\xba\xe6\x9d\xa5\xe7\x9a\x84\xe4\xbb\xa3\xe7\xa0\x81\xe7\x9b\xb8\xe6\xaf\x94\xe7\xac\xac\xe4\xb8\x80\xe7\xa7\x8d\xe5\x86\x99\xe6\xb3\x95\xe5\x8f\xaf\xe8\xaf\xbb\xe6\x80\xa7\xe6\x9b\xb4\xe5\xa5\xbd\xef\xbc\x8c\xe5\xbd\x93\xe5\xb1\x9e\xe6\x80\xa7\xe5\x8f\x98\xe5\xa4\x9a\xe6\x97\xb6\xef\xbc\x8c\xe6\x88\x91\xe4\xbb\xac\xe7\x94\x9a\xe8\x87\xb3\xe5\xbe\x88\xe9\x9a\xbe\xe6\x8c\x89\xe7\x85\xa7index\xe6\x96\xb9\xe5\xbc\x8f\xe8\xae\xbf\xe9\x97\xae\xe5\x85\x83\xe7\xb4\xa0\xe3\x80\x82\r\n\r\n# \xe6\x9b\xb4\xe9\x87\x8d\xe8\xa6\x81\xe7\x9a\x84\xe6\x98\xaf\xef\xbc\x8c\xe5\xbd\x93\xe9\x9c\x80\xe8\xa6\x81\xe5\xa2\x9e\xe5\x8a\xa0\xe6\x88\x96\xe5\x88\xa0\xe9\x99\xa4\xe4\xb8\x80\xe4\xb8\xaa\xe7\xbb\xb4\xe5\xba\xa6\xe6\x97\xb6\xef\xbc\x8c\xe5\x91\xbd\xe5\x90\x8d\xe5\x85\x83\xe7\xa5\x96\xe4\xbb\xa3\xe7\xa0\x81\xe6\x94\xb9\xe5\x8a\xa8\xe9\x87\x8f\xe6\xaf\x94\xe7\xac\xac\xe4\xb8\x80\xe7\xa7\x8d\xe8\xa6\x81\xe5\xb0\x8f\xe3\x80\x82\r\n\r\n# \xe5\xa6\x82\xe5\x9c\xa8\xe5\xb1\x9e\xe6\x80\xa7x\xe5\x92\x8cy\xe9\x97\xb4\xe5\xa2\x9e\xe5\x8a\xa0\xe4\xb8\x80\xe4\xb8\xaa\xe7\xbb\xb4\xe5\xba\xa6k\xe6\x97\xb6\xef\xbc\x9a\r\nPoint = namedtuple('Point', ['x', 'k', 'y',  'z'])\r\nlst = [Point(1.5, 2, 0.0, 3.0), Point(-0.3, -1.0, 0.0, 2.1),\r\n       Point(1.3, 2.8, 0.0, -2.5)]\r\n\r\n# \xe5\x91\xbd\xe5\x90\x8d\xe5\x85\x83\xe7\xb4\xa0\xe4\xb8\x8d\xe9\x9c\x80\xe8\xa6\x81\xe9\x87\x8d\xe5\x86\x99\xe4\xb8\x8b\xe9\x9d\xa2\xe4\xbb\xa3\xe7\xa0\x81\xef\xbc\x8c\r\nprint(lst[0].y - lst[1].y)\r\n\r\n# \xe4\xbd\x86\xe6\x98\xaf\xe6\x99\xae\xe9\x80\x9a\xe5\x85\x83\xe7\xa5\x96\xe5\xb0\xb1\xe5\xbe\x97\xe5\xa6\x82\xe4\xb8\x8b\xe4\xbf\xae\xe6\x94\xb9\xef\xbc\x9a\r\nprint(lst[0][2] - lst[1][2])\r\n"""
src/use_pkuseg.py,0,"b'from pkuseg import pkuseg\r\nfrom collections import Counter\r\n\r\nmystr = """"""Python \xe8\xaf\xad\xe8\xa8\x80\xe5\x8f\x82\xe8\x80\x83 \xe6\x8f\x8f\xe8\xbf\xb0\xe4\xba\x86 Python \xe8\xaf\xad\xe8\xa8\x80\xe7\x9a\x84\xe5\x85\xb7\xe4\xbd\x93\xe8\xaf\xad\xe6\xb3\x95\xe5\x92\x8c\xe8\xaf\xad\xe4\xb9\x89\xef\xbc\x8c\xe8\xbf\x99\xe4\xbb\xbd\xe5\xba\x93\xe5\x8f\x82\xe8\x80\x83\xe5\x88\x99\xe4\xbb\x8b\xe7\xbb\x8d\xe4\xba\x86\xe4\xb8\x8e Python \xe4\xb8\x80\xe5\x90\x8c\xe5\x8f\x91\xe8\xa1\x8c\xe7\x9a\x84\xe6\xa0\x87\xe5\x87\x86\xe5\xba\x93\xe3\x80\x82\xe5\xae\x83\xe8\xbf\x98\xe6\x8f\x8f\xe8\xbf\xb0\xe4\xba\x86\xe9\x80\x9a\xe5\xb8\xb8\xe5\x8c\x85\xe5\x90\xab\xe5\x9c\xa8 Python \xe5\x8f\x91\xe8\xa1\x8c\xe7\x89\x88\xe4\xb8\xad\xe7\x9a\x84\xe4\xb8\x80\xe4\xba\x9b\xe5\x8f\xaf\xe9\x80\x89\xe7\xbb\x84\xe4\xbb\xb6\xe3\x80\x82\r\n\r\nPython \xe6\xa0\x87\xe5\x87\x86\xe5\xba\x93\xe9\x9d\x9e\xe5\xb8\xb8\xe5\xba\x9e\xe5\xa4\xa7\xef\xbc\x8c\xe6\x89\x80\xe6\x8f\x90\xe4\xbe\x9b\xe7\x9a\x84\xe7\xbb\x84\xe4\xbb\xb6\xe6\xb6\x89\xe5\x8f\x8a\xe8\x8c\x83\xe5\x9b\xb4\xe5\x8d\x81\xe5\x88\x86\xe5\xb9\xbf\xe6\xb3\x9b\xef\xbc\x8c\xe6\xad\xa3\xe5\xa6\x82\xe4\xbb\xa5\xe4\xb8\x8b\xe5\x86\x85\xe5\xae\xb9\xe7\x9b\xae\xe5\xbd\x95\xe6\x89\x80\xe6\x98\xbe\xe7\xa4\xba\xe7\x9a\x84\xe3\x80\x82\xe8\xbf\x99\xe4\xb8\xaa\xe5\xba\x93\xe5\x8c\x85\xe5\x90\xab\xe4\xba\x86\xe5\xa4\x9a\xe4\xb8\xaa\xe5\x86\x85\xe7\xbd\xae\xe6\xa8\xa1\xe5\x9d\x97 (\xe4\xbb\xa5 C \xe7\xbc\x96\xe5\x86\x99)\xef\xbc\x8cPython \xe7\xa8\x8b\xe5\xba\x8f\xe5\x91\x98\xe5\xbf\x85\xe9\xa1\xbb\xe4\xbe\x9d\xe9\x9d\xa0\xe5\xae\x83\xe4\xbb\xac\xe6\x9d\xa5\xe5\xae\x9e\xe7\x8e\xb0\xe7\xb3\xbb\xe7\xbb\x9f\xe7\xba\xa7\xe5\x8a\x9f\xe8\x83\xbd\xef\xbc\x8c\xe4\xbe\x8b\xe5\xa6\x82\xe6\x96\x87\xe4\xbb\xb6 I/O\xef\xbc\x8c\xe6\xad\xa4\xe5\xa4\x96\xe8\xbf\x98\xe6\x9c\x89\xe5\xa4\xa7\xe9\x87\x8f\xe4\xbb\xa5 Python \xe7\xbc\x96\xe5\x86\x99\xe7\x9a\x84\xe6\xa8\xa1\xe5\x9d\x97\xef\xbc\x8c\xe6\x8f\x90\xe4\xbe\x9b\xe4\xba\x86\xe6\x97\xa5\xe5\xb8\xb8\xe7\xbc\x96\xe7\xa8\x8b\xe4\xb8\xad\xe8\xae\xb8\xe5\xa4\x9a\xe9\x97\xae\xe9\xa2\x98\xe7\x9a\x84\xe6\xa0\x87\xe5\x87\x86\xe8\xa7\xa3\xe5\x86\xb3\xe6\x96\xb9\xe6\xa1\x88\xe3\x80\x82\xe5\x85\xb6\xe4\xb8\xad\xe6\x9c\x89\xe4\xba\x9b\xe6\xa8\xa1\xe5\x9d\x97\xe7\xbb\x8f\xe8\xbf\x87\xe4\xb8\x93\xe9\x97\xa8\xe8\xae\xbe\xe8\xae\xa1\xef\xbc\x8c\xe9\x80\x9a\xe8\xbf\x87\xe5\xb0\x86\xe7\x89\xb9\xe5\xae\x9a\xe5\xb9\xb3\xe5\x8f\xb0\xe5\x8a\x9f\xe8\x83\xbd\xe6\x8a\xbd\xe8\xb1\xa1\xe5\x8c\x96\xe4\xb8\xba\xe5\xb9\xb3\xe5\x8f\xb0\xe4\xb8\xad\xe7\xab\x8b\xe7\x9a\x84 API \xe6\x9d\xa5\xe9\xbc\x93\xe5\x8a\xb1\xe5\x92\x8c\xe5\x8a\xa0\xe5\xbc\xba Python \xe7\xa8\x8b\xe5\xba\x8f\xe7\x9a\x84\xe5\x8f\xaf\xe7\xa7\xbb\xe6\xa4\x8d\xe6\x80\xa7\xe3\x80\x82\r\n\r\nWindows \xe7\x89\x88\xe6\x9c\xac\xe7\x9a\x84 Python \xe5\xae\x89\xe8\xa3\x85\xe7\xa8\x8b\xe5\xba\x8f\xe9\x80\x9a\xe5\xb8\xb8\xe5\x8c\x85\xe5\x90\xab\xe6\x95\xb4\xe4\xb8\xaa\xe6\xa0\x87\xe5\x87\x86\xe5\xba\x93\xef\xbc\x8c\xe5\xbe\x80\xe5\xbe\x80\xe8\xbf\x98\xe5\x8c\x85\xe5\x90\xab\xe8\xae\xb8\xe5\xa4\x9a\xe9\xa2\x9d\xe5\xa4\x96\xe7\xbb\x84\xe4\xbb\xb6\xe3\x80\x82\xe5\xaf\xb9\xe4\xba\x8e\xe7\xb1\xbb Unix \xe6\x93\x8d\xe4\xbd\x9c\xe7\xb3\xbb\xe7\xbb\x9f\xef\xbc\x8cPython \xe9\x80\x9a\xe5\xb8\xb8\xe4\xbc\x9a\xe5\x88\x86\xe6\x88\x90\xe4\xb8\x80\xe7\xb3\xbb\xe5\x88\x97\xe7\x9a\x84\xe8\xbd\xaf\xe4\xbb\xb6\xe5\x8c\x85\xef\xbc\x8c\xe5\x9b\xa0\xe6\xad\xa4\xe5\x8f\xaf\xe8\x83\xbd\xe9\x9c\x80\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8\xe6\x93\x8d\xe4\xbd\x9c\xe7\xb3\xbb\xe7\xbb\x9f\xe6\x89\x80\xe6\x8f\x90\xe4\xbe\x9b\xe7\x9a\x84\xe5\x8c\x85\xe7\xae\xa1\xe7\x90\x86\xe5\xb7\xa5\xe5\x85\xb7\xe6\x9d\xa5\xe8\x8e\xb7\xe5\x8f\x96\xe9\x83\xa8\xe5\x88\x86\xe6\x88\x96\xe5\x85\xa8\xe9\x83\xa8\xe5\x8f\xaf\xe9\x80\x89\xe7\xbb\x84\xe4\xbb\xb6\xe3\x80\x82""""""\r\n\r\nseg = pkuseg()\r\nwords = seg.cut(mystr)\r\ntop10 = Counter(words).most_common(10)\r\n# [(\'\xe7\x9a\x84\', 12), (\'\xef\xbc\x8c\', 11), (\'Python\', 10), (\'\xe3\x80\x82\', 7), (\'\xe4\xba\x86\', 5), (\'\xe5\x8c\x85\xe5\x90\xab\', 4), (\'\xe7\xbb\x84\xe4\xbb\xb6\', 4), (\'\xe6\xa0\x87\xe5\x87\x86\xe5\xba\x93\', 3), (\'\xe9\x80\x9a\xe5\xb8\xb8\', 3), (\'\xe6\x89\x80\', 3)]\r\nprint(top10)\r\n\r\nfrequency_sort = Counter(words).most_common()\r\nwith open(\'./data/cut_words.csv\', \'w\') as f:\r\n    for line in frequency_sort:\r\n        f.write(str(line[0])+\',\' + str(line[1])+""\\n"")\r\n\r\nprint(\'writing done\')\r\n'"
src/walk_dir.py,0,"b'# \xe8\x8e\xb7\xe5\x8f\x96\xe7\x9b\xae\xe5\xbd\x95\xe4\xb8\x8b\xe6\x96\x87\xe4\xbb\xb6\xe7\x9a\x84\xe4\xbf\xae\xe6\x94\xb9\xe6\x97\xb6\xe9\x97\xb4\nimport os\nfrom datetime import datetime\nprint(f""\xe5\xbd\x93\xe5\x89\x8d\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x9a{datetime.now().strftime(\'%Y-%m-%d %H:%M:%S\')}"")\n\n\ndef get_modify_datetime(indir):\n    for root, _, files in os.walk(indir):  # \xe5\xbe\xaa\xe7\x8e\xafD:\\works\xe7\x9b\xae\xe5\xbd\x95\xe5\x92\x8c\xe5\xad\x90\xe7\x9b\xae\xe5\xbd\x95\n        for file in files:\n            absfile = os.path.join(root, file)\n            modtime = datetime.fromtimestamp(os.path.getmtime(absfile))\n            now = datetime.now()\n            difftime = now-modtime\n            if difftime.days < 20:  # \xe6\x9d\xa1\xe4\xbb\xb6\xe7\xad\x9b\xe9\x80\x89\xe8\xb6\x85\xe8\xbf\x87\xe6\x8c\x87\xe5\xae\x9a\xe6\x97\xb6\xe9\x97\xb4\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\n                print(f""""""{absfile}\n                    \xe4\xbf\xae\xe6\x94\xb9\xe6\x97\xb6\xe9\x97\xb4[{modtime.strftime(\'%Y-%m-%d %H:%M:%S\')}]\n                    \xe8\xb7\x9d\xe4\xbb\x8a[{difftime.days:3d}\xe5\xa4\xa9{difftime.seconds//3600:2d}\xe6\x97\xb6{difftime.seconds%3600//60:2d}]""""""\n                      )  # \xe6\x89\x93\xe5\x8d\xb0\xe7\x9b\xb8\xe5\x85\xb3\xe4\xbf\xa1\xe6\x81\xaf\n\n\nget_modify_datetime(\'./data\')\n'"
src/wechat_picture.py,0,"b'# import requests\n# from lxml import etree\n# import pandas as pd\n# import re\n\n# url = \'https://www.zhihu.com/question/335825565\'\n# with requests.get(url) as res:\n#     content = res.content\n#     print(content)\n#     html = etree.HTML(content)\n#     imgs = html.xpath(\'//figure//img/@src\')\n#     print(imgs)\n\n\n\n# method2: \xe7\x9b\xb4\xe6\x8e\xa5\xe6\x89\x8b\xe5\x8a\xa8\xe5\xa4\x8d\xe5\x88\xb6\xe5\x88\xb0\xe6\x9c\xac\xe5\x9c\xb0\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe6\x8f\x90\xe5\x8f\x96\xe5\x9b\xbe\xe7\x89\x87\xe5\x9c\xb0\xe5\x9d\x80\nimport os\nimport re\nfrom urllib.request import urlopen\n\nwith open(\'./data/wechat_pic.html\',mode=\'r\',errors=\'ignore\') as f: \n    lines = f.readlines()\n    pic_urls = re.findall(r\'<img src=""(.*?).jpg""\',lines[0])\n    pic_urls = [pic for pic in pic_urls if pic.startswith(\'https\')] # \xe5\x8f\xaa\xe4\xbf\x9d\xe7\x95\x99\xe4\xbb\xa5https\xe5\xbc\x80\xe5\xa4\xb4\xe7\x9a\x84\xe5\x9c\xb0\xe5\x9d\x80\n    #pic_urls = set(pic_urls) # \xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8set\xe4\xbc\x9a\xe6\x89\x93\xe7\xa0\xb4\xe5\x8e\x9f\xe6\x9d\xa5\xe9\xa1\xba\xe5\xba\x8f\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe5\x8e\x9f\xe7\xbd\x91\xe9\xa1\xb5\xe6\x8c\x89\xe7\x85\xa7\xe5\x9b\xbe\xe7\x89\x87\xe5\x88\x86\xe7\xb1\xbb\xef\xbc\x8c\xe6\x89\x80\xe4\xbb\xa5\xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8set\xe5\x8e\xbb\xe9\x87\x8d\xef\xbc\x8c\xe6\x95\x88\xe6\x9e\x9c\xe4\xb8\x8d\xe4\xbd\xb3\n    downloaded = []\n    for i,url in enumerate(pic_urls):\n        if url in downloaded:\n            continue\n        print(f\'{url}\')\n        q=urlopen(url+\'.jpg\')\n        pic=q.read()\n        \n        save = open(\'./data/wechat_pic/%d.jpg\'%(i,),mode=\'w+b\')\n        save.write(pic)\n        q.close()\n        save.close()\n        print(f\'pic{i} saved!\')\n        downloaded.append(url)\n      \n\n\n# import cv2\n# import  numpy as np\n \n# #\xe5\x9d\x87\xe5\x80\xbc\xe5\x93\x88\xe5\xb8\x8c\xe7\xae\x97\xe6\xb3\x95\n# def aHash(img):\n#     #\xe7\xbc\xa9\xe6\x94\xbe\xe4\xb8\xba8*8\n#     img=cv2.resize(img,(8,8),interpolation=cv2.INTER_CUBIC)\n#     #\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe7\x81\xb0\xe5\xba\xa6\xe5\x9b\xbe\n#     gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n#     #s\xe4\xb8\xba\xe5\x83\x8f\xe7\xb4\xa0\xe5\x92\x8c\xe5\x88\x9d\xe5\x80\xbc\xe4\xb8\xba0\xef\xbc\x8chash_str\xe4\xb8\xbahash\xe5\x80\xbc\xe5\x88\x9d\xe5\x80\xbc\xe4\xb8\xba\'\'\n#     s=0\n#     hash_str=\'\'\n#     #\xe9\x81\x8d\xe5\x8e\x86\xe7\xb4\xaf\xe5\x8a\xa0\xe6\xb1\x82\xe5\x83\x8f\xe7\xb4\xa0\xe5\x92\x8c\n#     for i in range(8):\n#         for j in range(8):\n#             s=s+gray[i,j]\n#     #\xe6\xb1\x82\xe5\xb9\xb3\xe5\x9d\x87\xe7\x81\xb0\xe5\xba\xa6\n#     avg=s/64\n#     #\xe7\x81\xb0\xe5\xba\xa6\xe5\xa4\xa7\xe4\xba\x8e\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc\xe4\xb8\xba1\xe7\x9b\xb8\xe5\x8f\x8d\xe4\xb8\xba0\xe7\x94\x9f\xe6\x88\x90\xe5\x9b\xbe\xe7\x89\x87\xe7\x9a\x84hash\xe5\x80\xbc\n#     for i in range(8):\n#         for j in range(8):\n#             if  gray[i,j]>avg:\n#                 hash_str=hash_str+\'1\'\n#             else:\n#                 hash_str=hash_str+\'0\'\n#     return hash_str\n\n# img1=cv2.imread(\'A.png\')\n# img2=cv2.imread(\'B.png\')\n# hash1= aHash(img1)\n# hash2= aHash(img2)\n# print(hash1)\n# print(hash2)\n# n=cmpHash(hash1,hash2)\n# print \'\xe5\x9d\x87\xe5\x80\xbc\xe5\x93\x88\xe5\xb8\x8c\xe7\xae\x97\xe6\xb3\x95\xe7\x9b\xb8\xe4\xbc\xbc\xe5\xba\xa6\xef\xbc\x9a\'+ str(n)\n\n'"
src/wordcloud.py,0,"b'import hashlib\nimport pandas as pd\nfrom wordcloud import WordCloud\ngeo_data=pd.read_excel(r""../data/geo_data.xlsx"")\nprint(geo_data)\nwords = \',\'.join(x for x in geo_data[\'city\'] if x != []) #\xe7\xad\x9b\xe9\x80\x89\xe5\x87\xba\xe9\x9d\x9e\xe7\xa9\xba\xe5\x88\x97\xe8\xa1\xa8\xe5\x80\xbc\nwc = WordCloud(\n    background_color=""green"", #\xe8\x83\x8c\xe6\x99\xaf\xe9\xa2\x9c\xe8\x89\xb2""green""\xe7\xbb\xbf\xe8\x89\xb2\n    max_words=100, #\xe6\x98\xbe\xe7\xa4\xba\xe6\x9c\x80\xe5\xa4\xa7\xe8\xaf\x8d\xe6\x95\xb0\n    font_path=\'./fonts/simhei.ttf\', #\xe6\x98\xbe\xe7\xa4\xba\xe4\xb8\xad\xe6\x96\x87\n    min_font_size=5,\n    max_font_size=100,\n    width=500  #\xe5\x9b\xbe\xe5\xb9\x85\xe5\xae\xbd\xe5\xba\xa6\n    )\nx = wc.generate(words)\nx.to_file(\'../data/geo_data.png\')'"
src/xls_to_xlsx.py,0,"b'import os\n\n\ndef xls_to_xlsx(work_dir):\n    """"""\n    \xe4\xbc\xa0\xe9\x80\x92\xe5\xbd\x93\xe5\x89\x8d\xe7\x9b\xae\xe5\xbd\x95\xef\xbc\x8c\xe5\x8e\x9f\xe6\x9d\xa5\xe5\x90\x8e\xe7\xbc\x80\xe5\x90\x8d\xef\xbc\x8c\xe6\x96\xb0\xe7\x9a\x84\xe5\x90\x8e\xe7\xbc\x80\xe5\x90\x8d\xe5\x90\x8e\xef\xbc\x8c\xe6\x89\xb9\xe9\x87\x8f\xe9\x87\x8d\xe5\x91\xbd\xe5\x90\x8d\xe5\x90\x8e\xe7\xbc\x80\n    """"""\n    old_ext, new_ext = \'.xls\', \'.xlsx\'\n    for filename in os.listdir(work_dir):\n        # \xe8\x8e\xb7\xe5\x8f\x96\xe5\xbe\x97\xe5\x88\xb0\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8e\xe7\xbc\x80\n        split_file = os.path.splitext(filename)\n        file_ext = split_file[1]\n        # \xe5\xae\x9a\xe4\xbd\x8d\xe5\x90\x8e\xe7\xbc\x80\xe5\x90\x8d\xe4\xb8\xbaold_ext \xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\n        if old_ext == file_ext:\n            # \xe4\xbf\xae\xe6\x94\xb9\xe5\x90\x8e\xe6\x96\x87\xe4\xbb\xb6\xe7\x9a\x84\xe5\xae\x8c\xe6\x95\xb4\xe5\x90\x8d\xe7\xa7\xb0\n            newfile = split_file[0] + new_ext\n            # \xe5\xae\x9e\xe7\x8e\xb0\xe9\x87\x8d\xe5\x91\xbd\xe5\x90\x8d\xe6\x93\x8d\xe4\xbd\x9c\n            os.rename(\n                os.path.join(work_dir, filename),\n                os.path.join(work_dir, newfile)\n            )\n    print(""\xe5\xae\x8c\xe6\x88\x90\xe9\x87\x8d\xe5\x91\xbd\xe5\x90\x8d"")\n    print(os.listdir(work_dir))\n\n\nxls_to_xlsx(\'./data\')\n'"
src/yield_producer_consumer.py,0,"b""from math import ceil\r\n\r\n\r\ndef consumer():\r\n    r = ''\r\n    while True:\r\n        n = yield r\r\n        if not n:\r\n            return\r\n        print('[CONSUMER] Consuming %s...' % n)\r\n        r = '200 OK'\r\n\r\n\r\ndef produce(c):\r\n    c.send(None)\r\n    n = 0\r\n    while n < 5:\r\n        n = n + 1\r\n        print('[PRODUCER] Producing %s...' % n)\r\n        r = c.send(n)\r\n        print('[PRODUCER] Consumer return: %s' % r)\r\n    c.close()\r\n\r\n\r\nc = consumer()\r\nproduce(c)\r\n"""
data/ziptest/b.py,0,"b""print('hello')\r\n"""
src/calculator/MainWindow.py,0,"b'# -*- coding: utf-8 -*-\n\n# Form implementation generated from reading ui file \'./calculator/mainwindow.ui\'\n#\n# Created by: PyQt5 UI code generator 5.9.2\n#\n# WARNING! All changes made in this file will be lost!\n\nfrom PyQt5 import QtCore, QtGui, QtWidgets\n\nclass Ui_MainWindow(object):\n    def setupUi(self, MainWindow):\n        MainWindow.setObjectName(""MainWindow"")\n        MainWindow.resize(503, 433)\n        self.centralWidget = QtWidgets.QWidget(MainWindow)\n        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)\n        sizePolicy.setHorizontalStretch(0)\n        sizePolicy.setVerticalStretch(0)\n        sizePolicy.setHeightForWidth(self.centralWidget.sizePolicy().hasHeightForWidth())\n        self.centralWidget.setSizePolicy(sizePolicy)\n        self.centralWidget.setObjectName(""centralWidget"")\n        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralWidget)\n        self.verticalLayout.setContentsMargins(11, 11, 11, 11)\n        self.verticalLayout.setSpacing(6)\n        self.verticalLayout.setObjectName(""verticalLayout"")\n        self.lcdNumber = QtWidgets.QLCDNumber(self.centralWidget)\n        self.lcdNumber.setDigitCount(10)\n        self.lcdNumber.setObjectName(""lcdNumber"")\n        self.verticalLayout.addWidget(self.lcdNumber)\n        self.gridLayout = QtWidgets.QGridLayout()\n        self.gridLayout.setSpacing(6)\n        self.gridLayout.setObjectName(""gridLayout"")\n        self.pushButton_n4 = QtWidgets.QPushButton(self.centralWidget)\n        self.pushButton_n4.setMinimumSize(QtCore.QSize(0, 50))\n        font = QtGui.QFont()\n        font.setPointSize(27)\n        font.setBold(True)\n        font.setWeight(75)\n        self.pushButton_n4.setFont(font)\n        self.pushButton_n4.setStyleSheet(""QPushButton {\\n""\n""color: #1976D2;\\n""\n""}"")\n        self.pushButton_n4.setObjectName(""pushButton_n4"")\n        self.gridLayout.addWidget(self.pushButton_n4, 3, 0, 1, 1)\n        self.pushButton_n1 = QtWidgets.QPushButton(self.centralWidget)\n        self.pushButton_n1.setMinimumSize(QtCore.QSize(0, 50))\n        font = QtGui.QFont()\n        font.setPointSize(27)\n        font.setBold(True)\n        font.setWeight(75)\n        self.pushButton_n1.setFont(font)\n        self.pushButton_n1.setStyleSheet(""QPushButton {\\n""\n""color: #1976D2;\\n""\n""}"")\n        self.pushButton_n1.setObjectName(""pushButton_n1"")\n        self.gridLayout.addWidget(self.pushButton_n1, 4, 0, 1, 1)\n        self.pushButton_n8 = QtWidgets.QPushButton(self.centralWidget)\n        self.pushButton_n8.setMinimumSize(QtCore.QSize(0, 50))\n        font = QtGui.QFont()\n        font.setPointSize(27)\n        font.setBold(True)\n        font.setWeight(75)\n        self.pushButton_n8.setFont(font)\n        self.pushButton_n8.setStyleSheet(""QPushButton {\\n""\n""color: #1976D2;\\n""\n""}"")\n        self.pushButton_n8.setObjectName(""pushButton_n8"")\n        self.gridLayout.addWidget(self.pushButton_n8, 2, 1, 1, 1)\n        self.pushButton_mul = QtWidgets.QPushButton(self.centralWidget)\n        self.pushButton_mul.setMinimumSize(QtCore.QSize(0, 50))\n        font = QtGui.QFont()\n        font.setPointSize(27)\n        font.setBold(False)\n        font.setWeight(50)\n        self.pushButton_mul.setFont(font)\n        self.pushButton_mul.setObjectName(""pushButton_mul"")\n        self.gridLayout.addWidget(self.pushButton_mul, 2, 3, 1, 1)\n        self.pushButton_n7 = QtWidgets.QPushButton(self.centralWidget)\n        self.pushButton_n7.setMinimumSize(QtCore.QSize(0, 50))\n        font = QtGui.QFont()\n        font.setPointSize(27)\n        font.setBold(True)\n        font.setWeight(75)\n        self.pushButton_n7.setFont(font)\n        self.pushButton_n7.setStyleSheet(""QPushButton {\\n""\n""color: #1976D2;\\n""\n""}"")\n        self.pushButton_n7.setObjectName(""pushButton_n7"")\n        self.gridLayout.addWidget(self.pushButton_n7, 2, 0, 1, 1)\n        self.pushButton_n6 = QtWidgets.QPushButton(self.centralWidget)\n        self.pushButton_n6.setMinimumSize(QtCore.QSize(0, 50))\n        font = QtGui.QFont()\n        font.setPointSize(27)\n        font.setBold(True)\n        font.setWeight(75)\n        self.pushButton_n6.setFont(font)\n        self.pushButton_n6.setStyleSheet(""QPushButton {\\n""\n""color: #1976D2;\\n""\n""}"")\n        self.pushButton_n6.setObjectName(""pushButton_n6"")\n        self.gridLayout.addWidget(self.pushButton_n6, 3, 2, 1, 1)\n        self.pushButton_n5 = QtWidgets.QPushButton(self.centralWidget)\n        self.pushButton_n5.setMinimumSize(QtCore.QSize(0, 50))\n        font = QtGui.QFont()\n        font.setPointSize(27)\n        font.setBold(True)\n        font.setWeight(75)\n        self.pushButton_n5.setFont(font)\n        self.pushButton_n5.setStyleSheet(""QPushButton {\\n""\n""color: #1976D2;\\n""\n""}"")\n        self.pushButton_n5.setObjectName(""pushButton_n5"")\n        self.gridLayout.addWidget(self.pushButton_n5, 3, 1, 1, 1)\n        self.pushButton_n0 = QtWidgets.QPushButton(self.centralWidget)\n        self.pushButton_n0.setMinimumSize(QtCore.QSize(0, 50))\n        font = QtGui.QFont()\n        font.setPointSize(27)\n        font.setBold(True)\n        font.setWeight(75)\n        self.pushButton_n0.setFont(font)\n        self.pushButton_n0.setStyleSheet(""QPushButton {\\n""\n""color: #1976D2;\\n""\n""}"")\n        self.pushButton_n0.setObjectName(""pushButton_n0"")\n        self.gridLayout.addWidget(self.pushButton_n0, 5, 0, 1, 1)\n        self.pushButton_n2 = QtWidgets.QPushButton(self.centralWidget)\n        self.pushButton_n2.setMinimumSize(QtCore.QSize(0, 50))\n        font = QtGui.QFont()\n        font.setPointSize(27)\n        font.setBold(True)\n        font.setWeight(75)\n        self.pushButton_n2.setFont(font)\n        self.pushButton_n2.setStyleSheet(""QPushButton {\\n""\n""color: #1976D2;\\n""\n""}"")\n        self.pushButton_n2.setObjectName(""pushButton_n2"")\n        self.gridLayout.addWidget(self.pushButton_n2, 4, 1, 1, 1)\n        self.pushButton_n9 = QtWidgets.QPushButton(self.centralWidget)\n        self.pushButton_n9.setMinimumSize(QtCore.QSize(0, 50))\n        font = QtGui.QFont()\n        font.setPointSize(27)\n        font.setBold(True)\n        font.setWeight(75)\n        self.pushButton_n9.setFont(font)\n        self.pushButton_n9.setStyleSheet(""QPushButton {\\n""\n""color: #1976D2;\\n""\n""}"")\n        self.pushButton_n9.setObjectName(""pushButton_n9"")\n        self.gridLayout.addWidget(self.pushButton_n9, 2, 2, 1, 1)\n        self.pushButton_n3 = QtWidgets.QPushButton(self.centralWidget)\n        self.pushButton_n3.setMinimumSize(QtCore.QSize(0, 50))\n        font = QtGui.QFont()\n        font.setPointSize(27)\n        font.setBold(True)\n        font.setWeight(75)\n        self.pushButton_n3.setFont(font)\n        self.pushButton_n3.setStyleSheet(""QPushButton {\\n""\n""color: #1976D2;\\n""\n""}"")\n        self.pushButton_n3.setObjectName(""pushButton_n3"")\n        self.gridLayout.addWidget(self.pushButton_n3, 4, 2, 1, 1)\n        self.pushButton_div = QtWidgets.QPushButton(self.centralWidget)\n        self.pushButton_div.setMinimumSize(QtCore.QSize(0, 50))\n        font = QtGui.QFont()\n        font.setPointSize(27)\n        font.setBold(False)\n        font.setWeight(50)\n        self.pushButton_div.setFont(font)\n        self.pushButton_div.setObjectName(""pushButton_div"")\n        self.gridLayout.addWidget(self.pushButton_div, 1, 3, 1, 1)\n        self.pushButton_sub = QtWidgets.QPushButton(self.centralWidget)\n        self.pushButton_sub.setMinimumSize(QtCore.QSize(0, 50))\n        font = QtGui.QFont()\n        font.setPointSize(27)\n        font.setBold(False)\n        font.setWeight(50)\n        self.pushButton_sub.setFont(font)\n        self.pushButton_sub.setObjectName(""pushButton_sub"")\n        self.gridLayout.addWidget(self.pushButton_sub, 3, 3, 1, 1)\n        self.pushButton_add = QtWidgets.QPushButton(self.centralWidget)\n        self.pushButton_add.setMinimumSize(QtCore.QSize(0, 50))\n        font = QtGui.QFont()\n        font.setPointSize(27)\n        font.setBold(False)\n        font.setWeight(50)\n        self.pushButton_add.setFont(font)\n        self.pushButton_add.setObjectName(""pushButton_add"")\n        self.gridLayout.addWidget(self.pushButton_add, 4, 3, 1, 1)\n        self.pushButton_ac = QtWidgets.QPushButton(self.centralWidget)\n        self.pushButton_ac.setMinimumSize(QtCore.QSize(0, 50))\n        font = QtGui.QFont()\n        font.setPointSize(27)\n        font.setBold(False)\n        font.setWeight(50)\n        self.pushButton_ac.setFont(font)\n        self.pushButton_ac.setStyleSheet(""QPushButton {\\n""\n""    color: #f44336;\\n""\n""}"")\n        self.pushButton_ac.setObjectName(""pushButton_ac"")\n        self.gridLayout.addWidget(self.pushButton_ac, 1, 0, 1, 1)\n        self.pushButton_mr = QtWidgets.QPushButton(self.centralWidget)\n        self.pushButton_mr.setMinimumSize(QtCore.QSize(0, 50))\n        font = QtGui.QFont()\n        font.setPointSize(27)\n        font.setBold(False)\n        font.setWeight(50)\n        self.pushButton_mr.setFont(font)\n        self.pushButton_mr.setStyleSheet(""QPushButton {\\n""\n""   color: #FFC107;\\n""\n""}"")\n        self.pushButton_mr.setObjectName(""pushButton_mr"")\n        self.gridLayout.addWidget(self.pushButton_mr, 1, 2, 1, 1)\n        self.pushButton_m = QtWidgets.QPushButton(self.centralWidget)\n        self.pushButton_m.setMinimumSize(QtCore.QSize(0, 50))\n        font = QtGui.QFont()\n        font.setPointSize(27)\n        font.setBold(False)\n        font.setWeight(50)\n        self.pushButton_m.setFont(font)\n        self.pushButton_m.setStyleSheet(""QPushButton {\\n""\n""   color: #FFC107;\\n""\n""}"")\n        self.pushButton_m.setObjectName(""pushButton_m"")\n        self.gridLayout.addWidget(self.pushButton_m, 1, 1, 1, 1)\n        self.pushButton_pc = QtWidgets.QPushButton(self.centralWidget)\n        self.pushButton_pc.setMinimumSize(QtCore.QSize(0, 50))\n        font = QtGui.QFont()\n        font.setPointSize(27)\n        font.setBold(False)\n        font.setWeight(50)\n        self.pushButton_pc.setFont(font)\n        self.pushButton_pc.setObjectName(""pushButton_pc"")\n        self.gridLayout.addWidget(self.pushButton_pc, 5, 1, 1, 1)\n        self.pushButton_eq = QtWidgets.QPushButton(self.centralWidget)\n        self.pushButton_eq.setMinimumSize(QtCore.QSize(0, 50))\n        font = QtGui.QFont()\n        font.setPointSize(27)\n        font.setBold(True)\n        font.setWeight(75)\n        self.pushButton_eq.setFont(font)\n        self.pushButton_eq.setStyleSheet(""QPushButton {\\n""\n""color: #4CAF50;\\n""\n""}"")\n        self.pushButton_eq.setObjectName(""pushButton_eq"")\n        self.gridLayout.addWidget(self.pushButton_eq, 5, 2, 1, 2)\n        self.verticalLayout.addLayout(self.gridLayout)\n        MainWindow.setCentralWidget(self.centralWidget)\n        self.statusBar = QtWidgets.QStatusBar(MainWindow)\n        self.statusBar.setObjectName(""statusBar"")\n        MainWindow.setStatusBar(self.statusBar)\n        self.actionExit = QtWidgets.QAction(MainWindow)\n        self.actionExit.setObjectName(""actionExit"")\n        self.actionReset = QtWidgets.QAction(MainWindow)\n        self.actionReset.setObjectName(""actionReset"")\n\n        self.retranslateUi(MainWindow)\n        QtCore.QMetaObject.connectSlotsByName(MainWindow)\n\n    def retranslateUi(self, MainWindow):\n        _translate = QtCore.QCoreApplication.translate\n        MainWindow.setWindowTitle(_translate(""MainWindow"", ""XiaoDing""))\n        self.pushButton_n4.setText(_translate(""MainWindow"", ""4""))\n        self.pushButton_n4.setShortcut(_translate(""MainWindow"", ""4""))\n        self.pushButton_n1.setText(_translate(""MainWindow"", ""1""))\n        self.pushButton_n1.setShortcut(_translate(""MainWindow"", ""1""))\n        self.pushButton_n8.setText(_translate(""MainWindow"", ""8""))\n        self.pushButton_n8.setShortcut(_translate(""MainWindow"", ""8""))\n        self.pushButton_mul.setText(_translate(""MainWindow"", ""x""))\n        self.pushButton_mul.setShortcut(_translate(""MainWindow"", ""*""))\n        self.pushButton_n7.setText(_translate(""MainWindow"", ""7""))\n        self.pushButton_n7.setShortcut(_translate(""MainWindow"", ""7""))\n        self.pushButton_n6.setText(_translate(""MainWindow"", ""6""))\n        self.pushButton_n6.setShortcut(_translate(""MainWindow"", ""6""))\n        self.pushButton_n5.setText(_translate(""MainWindow"", ""5""))\n        self.pushButton_n5.setShortcut(_translate(""MainWindow"", ""5""))\n        self.pushButton_n0.setText(_translate(""MainWindow"", ""0""))\n        self.pushButton_n0.setShortcut(_translate(""MainWindow"", ""0""))\n        self.pushButton_n2.setText(_translate(""MainWindow"", ""2""))\n        self.pushButton_n2.setShortcut(_translate(""MainWindow"", ""2""))\n        self.pushButton_n9.setText(_translate(""MainWindow"", ""9""))\n        self.pushButton_n9.setShortcut(_translate(""MainWindow"", ""9""))\n        self.pushButton_n3.setText(_translate(""MainWindow"", ""3""))\n        self.pushButton_n3.setShortcut(_translate(""MainWindow"", ""3""))\n        self.pushButton_div.setText(_translate(""MainWindow"", ""\xc3\xb7""))\n        self.pushButton_div.setShortcut(_translate(""MainWindow"", ""/""))\n        self.pushButton_sub.setText(_translate(""MainWindow"", ""-""))\n        self.pushButton_sub.setShortcut(_translate(""MainWindow"", ""-""))\n        self.pushButton_add.setText(_translate(""MainWindow"", ""+""))\n        self.pushButton_add.setShortcut(_translate(""MainWindow"", ""+""))\n        self.pushButton_ac.setText(_translate(""MainWindow"", ""RE""))\n        self.pushButton_ac.setShortcut(_translate(""MainWindow"", ""Esc""))\n        self.pushButton_mr.setText(_translate(""MainWindow"", ""MR""))\n        self.pushButton_mr.setShortcut(_translate(""MainWindow"", ""R""))\n        self.pushButton_m.setText(_translate(""MainWindow"", ""M""))\n        self.pushButton_m.setShortcut(_translate(""MainWindow"", ""M""))\n        self.pushButton_pc.setText(_translate(""MainWindow"", ""/100""))\n        self.pushButton_pc.setShortcut(_translate(""MainWindow"", ""%""))\n        self.pushButton_eq.setText(_translate(""MainWindow"", ""=""))\n        self.pushButton_eq.setShortcut(_translate(""MainWindow"", ""Return""))\n        self.actionExit.setText(_translate(""MainWindow"", ""Exit""))\n        self.actionExit.setShortcut(_translate(""MainWindow"", ""Ctrl+Q""))\n        self.actionReset.setText(_translate(""MainWindow"", ""Reset""))\n        self.actionReset.setShortcut(_translate(""MainWindow"", ""Ctrl+R""))\n\n'"
src/calculator/calculator.py,0,"b'from PyQt5.QtGui import *\nfrom PyQt5.QtWidgets import *\nfrom PyQt5.QtCore import *\n\nimport operator\n\nfrom MainWindow import Ui_MainWindow\n\n# Calculator state.\nREADY = 0\nINPUT = 1\n\n\nclass MainWindow(QMainWindow, Ui_MainWindow):\n    def __init__(self, *args, **kwargs):\n        super(MainWindow, self).__init__(*args, **kwargs)\n        self.setupUi(self)\n\n        # Setup numbers.\n        for n in range(0, 10):\n            getattr(self, \'pushButton_n%s\' % n).pressed.connect(lambda v=n: self.input_number(v))\n\n        # Setup operations.\n        self.pushButton_add.pressed.connect(lambda: self.operation(operator.add))\n        self.pushButton_sub.pressed.connect(lambda: self.operation(operator.sub))\n        self.pushButton_mul.pressed.connect(lambda: self.operation(operator.mul))\n        self.pushButton_div.pressed.connect(lambda: self.operation(operator.truediv))  # operator.div for Python2.7\n\n        self.pushButton_pc.pressed.connect(self.operation_pc)\n        self.pushButton_eq.pressed.connect(self.equals)\n\n        # Setup actions\n        self.actionReset.triggered.connect(self.reset)\n        self.pushButton_ac.pressed.connect(self.reset)\n\n        self.actionExit.triggered.connect(self.close)\n\n        self.pushButton_m.pressed.connect(self.memory_store)\n        self.pushButton_mr.pressed.connect(self.memory_recall)\n\n        self.memory = 0\n        self.reset()\n\n        self.show()\n\n    def display(self):\n        self.lcdNumber.display(self.stack[-1])\n\n    def reset(self):\n        self.state = READY\n        self.stack = [0]\n        self.last_operation = None\n        self.current_op = None\n        self.display()\n\n    def memory_store(self):\n        self.memory = self.lcdNumber.value()\n\n    def memory_recall(self):\n        self.state = INPUT\n        self.stack[-1] = self.memory\n        self.display()\n\n    def input_number(self, v):\n        if self.state == READY:\n            self.state = INPUT\n            self.stack[-1] = v\n        else:\n            self.stack[-1] = self.stack[-1] * 10 + v\n\n        self.display()\n\n    def operation(self, op):\n        if self.current_op:  # \xe5\xae\x8c\xe6\x88\x90\xe5\xbd\x93\xe5\x89\x8d\xe6\x93\x8d\xe4\xbd\x9c(+,-*,/,)\n            self.equals()\n\n        if op == operator.add or op == operator.sub:\n            self.stack.append(0)\n        elif op == operator.mul or op == operator.truediv:\n            self.stack.append(1)    \n        self.state = INPUT\n        self.current_op = op\n\n    def operation_pc(self):\n        self.state = INPUT\n        self.stack[-1] *= 0.01\n        self.display()\n\n    def equals(self):\n        # Support to allow \'=\' to repeat previous operation\n        # if no further input has been added.\n        if self.state == READY and self.last_operation:\n            s, self.current_op = self.last_operation\n            self.stack.append(s)\n\n        if self.current_op:\n            self.last_operation = self.stack[-1], self.current_op\n\n            try:\n                self.stack = [self.current_op(*self.stack)]\n            except Exception:\n                self.lcdNumber.display(\'Err\')\n                self.stack = [0]\n            else:\n                self.current_op = None\n                self.state = READY\n                self.display()\n\n\nif __name__ == \'__main__\':\n    app = QApplication([])\n    app.setApplicationName(""XiaoDing"")\n\n    window = MainWindow()\n    app.exec_()\n'"
