file_path,api_count,code
py/image_server_1.py,0,"b'# T81-558: Applications of Deep Neural Networks\n# Module 13: Advanced/Other Topics\n# Instructor: [Jeff Heaton](https://sites.wustl.edu/jeffheaton/), McKelvey School of Engineering, [Washington University in St. Louis](https://engineering.wustl.edu/Programs/Pages/default.aspx)\n# For more information visit the [class website](https://sites.wustl.edu/jeffheaton/t81-558/).\n# Deploy simple Keras tabular model with Flask only.\nfrom flask import Flask, request, jsonify\nimport uuid\nimport os\nfrom tensorflow.keras.models import load_model\nimport numpy as np\nimport os\nfrom flask import Flask, request, redirect, url_for\nfrom werkzeug.utils import secure_filename\nfrom tensorflow.keras.applications import MobileNet\nfrom PIL import Image, ImageFile\nfrom io import BytesIO\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.applications.mobilenet import preprocess_input\nfrom tensorflow.keras.applications.mobilenet import decode_predictions\n\nUPLOAD_FOLDER = \'/Users/jheaton/test/\'\nALLOWED_EXTENSIONS = set([\'txt\', \'pdf\', \'png\', \'jpg\', \'jpeg\', \'gif\'])\nIMAGE_WIDTH = 224\nIMAGE_HEIGHT = 224\nIMAGE_CHANNELS = 3\n\n\ndef allowed_file(filename):\n    return \'.\' in filename and \\\n           filename.rsplit(\'.\', 1)[1] in ALLOWED_EXTENSIONS\n\napp = Flask(__name__)\napp.config[\'UPLOAD_FOLDER\'] = UPLOAD_FOLDER\n\nmodel = MobileNet(weights=\'imagenet\',include_top=True)\n\n@app.route(\'/api/image\', methods=[\'POST\'])\ndef upload_image():\n  # check if the post request has the file part\n  if \'image\' not in request.files:\n      return jsonify({\'error\':\'No posted image. Should be attribute named image.\'})\n  file = request.files[\'image\']\n\n  # if user does not select file, browser also\n  # submit a empty part without filename\n  if file.filename == \'\':\n      return jsonify({\'error\':\'Empty filename submitted.\'})\n  if file and allowed_file(file.filename):\n      filename = secure_filename(file.filename)\n      print(""***2:""+filename)\n      #file.save(os.path.join(app.config[\'UPLOAD_FOLDER\'], filename))\n      x = []\n      ImageFile.LOAD_TRUNCATED_IMAGES = False\n      img = Image.open(BytesIO(file.read()))\n      img.load()\n      img = img.resize((IMAGE_WIDTH,IMAGE_HEIGHT),Image.ANTIALIAS)    \n      x = image.img_to_array(img)\n      x = np.expand_dims(x, axis=0)\n      x = preprocess_input(x)\n      pred = model.predict(x)\n      lst = decode_predictions(pred, top=5)\n      \n      items = []\n      for itm in lst[0]:\n        items.append({\'name\':itm[1],\'prob\':float(itm[2])})\n\n      response = {\'pred\':items}\n      return jsonify(response)\n  else:\n      return jsonify({\'error\':\'File has invalid extension\'})\n\nif __name__ == \'__main__\':\n    app.run(host= \'0.0.0.0\',debug=True)'"
py/image_web_server_1.py,0,"b'# T81-558: Applications of Deep Neural Networks\n# Module 13: Advanced/Other Topics\n# Instructor: [Jeff Heaton](https://sites.wustl.edu/jeffheaton/), McKelvey School of Engineering, [Washington University in St. Louis](https://engineering.wustl.edu/Programs/Pages/default.aspx)\n# For more information visit the [class website](https://sites.wustl.edu/jeffheaton/t81-558/).\n# Deploy simple Keras tabular model with Flask only.\nfrom flask import Flask, request, jsonify,send_from_directory\nimport uuid\nimport os\nfrom tensorflow.keras.models import load_model\nimport numpy as np\nimport os\nfrom flask import Flask, request, redirect, url_for\nfrom werkzeug.utils import secure_filename\nfrom tensorflow.keras.applications import MobileNet\nfrom PIL import Image, ImageFile\nfrom io import BytesIO\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.applications.mobilenet import preprocess_input\nfrom tensorflow.keras.applications.mobilenet import decode_predictions\n\nUPLOAD_FOLDER = \'/Users/jheaton/test/\'\nALLOWED_EXTENSIONS = set([\'txt\', \'pdf\', \'png\', \'jpg\', \'jpeg\', \'gif\'])\nIMAGE_WIDTH = 224\nIMAGE_HEIGHT = 224\nIMAGE_CHANNELS = 3\n\n\ndef allowed_file(filename):\n    return \'.\' in filename and \\\n           filename.rsplit(\'.\', 1)[1] in ALLOWED_EXTENSIONS\n\napp = Flask(__name__)\napp.config[\'UPLOAD_FOLDER\'] = UPLOAD_FOLDER\n\nmodel = MobileNet(weights=\'imagenet\',include_top=True)\n\n@app.route(\'/\', methods=[\'GET\'])\ndef send_index():\n    return send_from_directory(\'./www\', ""index.html"")\n\n@app.route(\'/<path:path>\', methods=[\'GET\'])\ndef send_root(path):\n    return send_from_directory(\'./www\', path)\n\n@app.route(\'/api/image\', methods=[\'POST\'])\ndef upload_image():\n  # check if the post request has the file part\n  if \'image\' not in request.files:\n      return jsonify({\'error\':\'No posted image. Should be attribute named image.\'})\n  file = request.files[\'image\']\n\n  # if user does not select file, browser also\n  # submit a empty part without filename\n  if file.filename == \'\':\n      return jsonify({\'error\':\'Empty filename submitted.\'})\n  if file and allowed_file(file.filename):\n      filename = secure_filename(file.filename)\n      #file.save(os.path.join(app.config[\'UPLOAD_FOLDER\'], filename))\n      x = []\n      ImageFile.LOAD_TRUNCATED_IMAGES = False\n      img = Image.open(BytesIO(file.read()))\n      img.load()\n      img = img.resize((IMAGE_WIDTH,IMAGE_HEIGHT),Image.ANTIALIAS)    \n      x = image.img_to_array(img)\n      x = np.expand_dims(x, axis=0)\n      x = preprocess_input(x)\n      x = x[:,:,:,0:3]\n      pred = model.predict(x)\n      lst = decode_predictions(pred, top=5)\n      \n      items = []\n      for itm in lst[0]:\n        items.append({\'name\':itm[1],\'prob\':float(itm[2])})\n\n      response = {\'pred\':items}\n      print(response)\n      return jsonify(response)\n  else:\n      return jsonify({\'error\':\'File has invalid extension\'})\n\nif __name__ == \'__main__\':\n    app.run(host= \'0.0.0.0\',debug=True)'"
py/mpg_server_1.py,0,"b'# T81-558: Applications of Deep Neural Networks\n# Module 13: Advanced/Other Topics\n# Instructor: [Jeff Heaton](https://sites.wustl.edu/jeffheaton/), McKelvey School of Engineering, [Washington University in St. Louis](https://engineering.wustl.edu/Programs/Pages/default.aspx)\n# For more information visit the [class website](https://sites.wustl.edu/jeffheaton/t81-558/).\n# Deploy simple Keras tabular model with Flask only.\nfrom flask import Flask, request, jsonify\nimport uuid\nimport os\nfrom tensorflow.keras.models import load_model\nimport numpy as np\n\napp = Flask(__name__)\n\n# Used for validation\nEXPECTED = {\n  ""cylinders"":{""min"":3,""max"":8},\n  ""displacement"":{""min"":68.0,""max"":455.0},\n  ""horsepower"":{""min"":46.0,""max"":230.0},\n  ""weight"":{""min"":1613,""max"":5140},\n  ""acceleration"":{""min"":8.0,""max"":24.8},\n  ""year"":{""min"":70,""max"":82},\n  ""origin"":{""min"":1,""max"":3}\n}\n\n# Load neural network when Flask boots up\nmodel = load_model(os.path.join(""../dnn/"",""mpg_model.h5""))\n\n@app.route(\'/api/mpg\', methods=[\'POST\'])\ndef calc_mpg():\n    content = request.json\n    errors = []\n\n    # Check for valid input fields \n    for name in content:\n      if name in EXPECTED:\n        expected_min = EXPECTED[name][\'min\']\n        expected_max = EXPECTED[name][\'max\']\n        value = content[name]\n        if value < expected_min or value > expected_max:\n          errors.append(f""Out of bounds: {name}, has value of: {value}, but should be between {expected_min} and {expected_max}."")\n      else:\n        errors.append(f""Unexpected field: {name}."")\n\n    # Check for missing input fields\n    for name in EXPECTED:\n      if name not in content:\n        errors.append(f""Missing value: {name}."")\n\n    if len(errors) <1:\n      # Predict\n      x = np.zeros( (1,7) )\n\n      x[0,0] = content[\'cylinders\']\n      x[0,1] = content[\'displacement\'] \n      x[0,2] = content[\'horsepower\']\n      x[0,3] = content[\'weight\']\n      x[0,4] = content[\'acceleration\'] \n      x[0,5] = content[\'year\']\n      x[0,6] = content[\'origin\']\n\n      pred = model.predict(x)\n      mpg = float(pred[0])\n      response = {""id"":str(uuid.uuid4()),""mpg"":mpg,""errors"":errors}\n    else:\n      # Return errors\n      response = {""id"":str(uuid.uuid4()),""errors"":errors}\n\n\n    print(content[\'displacement\'])\n    \n    return jsonify(response)\n\nif __name__ == \'__main__\':\n    app.run(host= \'0.0.0.0\',debug=True)'"
