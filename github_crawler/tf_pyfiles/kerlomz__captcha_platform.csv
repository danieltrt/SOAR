file_path,api_count,code
category.py,0,"b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>\n\nSPACE_TOKEN = [\'\']\nNUMBER = [\'0\', \'1\', \'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\']\nALPHA_UPPER = [\'A\', \'B\', \'C\', \'D\', \'E\', \'F\', \'G\', \'H\', \'I\', \'J\', \'K\', \'L\', \'M\', \'N\', \'O\', \'P\', \'Q\', \'R\', \'S\', \'T\', \'U\',\n               \'V\', \'W\', \'X\', \'Y\', \'Z\']\nALPHA_LOWER = [\'a\', \'b\', \'c\', \'d\', \'e\', \'f\', \'g\', \'h\', \'i\', \'j\', \'k\', \'l\', \'m\', \'n\', \'o\', \'p\', \'q\', \'r\', \'s\', \'t\', \'u\',\n               \'v\', \'w\', \'x\', \'y\', \'z\']\nARITHMETIC = [\'(\', \')\', \'+\', \'-\', \'\xc3\x97\', \'\xc3\xb7\', \'=\']\nCHINESE_3500 = [\n    \'\xe4\xb8\x80\', \'\xe4\xb9\x99\', \'\xe4\xba\x8c\', \'\xe5\x8d\x81\', \'\xe4\xb8\x81\', \'\xe5\x8e\x82\', \'\xe4\xb8\x83\', \'\xe5\x8d\x9c\', \'\xe4\xba\xba\', \'\xe5\x85\xa5\', \'\xe5\x85\xab\', \'\xe4\xb9\x9d\', \'\xe5\x87\xa0\', \'\xe5\x84\xbf\', \'\xe4\xba\x86\', \'\xe5\x8a\x9b\', \'\xe4\xb9\x83\', \'\xe5\x88\x80\', \'\xe5\x8f\x88\', \'\xe4\xb8\x89\',\n    \'\xe4\xba\x8e\', \'\xe5\xb9\xb2\', \'\xe4\xba\x8f\', \'\xe5\xa3\xab\', \'\xe5\xb7\xa5\', \'\xe5\x9c\x9f\', \'\xe6\x89\x8d\', \'\xe5\xaf\xb8\', \'\xe4\xb8\x8b\', \'\xe5\xa4\xa7\', \'\xe4\xb8\x88\', \'\xe4\xb8\x8e\', \'\xe4\xb8\x87\', \'\xe4\xb8\x8a\', \'\xe5\xb0\x8f\', \'\xe5\x8f\xa3\', \'\xe5\xb7\xbe\', \'\xe5\xb1\xb1\', \'\xe5\x8d\x83\', \'\xe4\xb9\x9e\',\n    \'\xe5\xb7\x9d\', \'\xe4\xba\xbf\', \'\xe4\xb8\xaa\', \'\xe5\x8b\xba\', \'\xe4\xb9\x85\', \'\xe5\x87\xa1\', \'\xe5\x8f\x8a\', \'\xe5\xa4\x95\', \'\xe4\xb8\xb8\', \'\xe4\xb9\x88\', \'\xe5\xb9\xbf\', \'\xe4\xba\xa1\', \'\xe9\x97\xa8\', \'\xe4\xb9\x89\', \'\xe4\xb9\x8b\', \'\xe5\xb0\xb8\', \'\xe5\xbc\x93\', \'\xe5\xb7\xb1\', \'\xe5\xb7\xb2\', \'\xe5\xad\x90\',\n    \'\xe5\x8d\xab\', \'\xe4\xb9\x9f\', \'\xe5\xa5\xb3\', \'\xe9\xa3\x9e\', \'\xe5\x88\x83\', \'\xe4\xb9\xa0\', \'\xe5\x8f\x89\', \'\xe9\xa9\xac\', \'\xe4\xb9\xa1\', \'\xe4\xb8\xb0\', \'\xe7\x8e\x8b\', \'\xe4\xba\x95\', \'\xe5\xbc\x80\', \'\xe5\xa4\xab\', \'\xe5\xa4\xa9\', \'\xe6\x97\xa0\', \'\xe5\x85\x83\', \'\xe4\xb8\x93\', \'\xe4\xba\x91\', \'\xe6\x89\x8e\',\n    \'\xe8\x89\xba\', \'\xe6\x9c\xa8\', \'\xe4\xba\x94\', \'\xe6\x94\xaf\', \'\xe5\x8e\x85\', \'\xe4\xb8\x8d\', \'\xe5\xa4\xaa\', \'\xe7\x8a\xac\', \'\xe5\x8c\xba\', \'\xe5\x8e\x86\', \'\xe5\xb0\xa4\', \'\xe5\x8f\x8b\', \'\xe5\x8c\xb9\', \'\xe8\xbd\xa6\', \'\xe5\xb7\xa8\', \'\xe7\x89\x99\', \'\xe5\xb1\xaf\', \'\xe6\xaf\x94\', \'\xe4\xba\x92\', \'\xe5\x88\x87\',\n    \'\xe7\x93\xa6\', \'\xe6\xad\xa2\', \'\xe5\xb0\x91\', \'\xe6\x97\xa5\', \'\xe4\xb8\xad\', \'\xe5\x86\x88\', \'\xe8\xb4\x9d\', \'\xe5\x86\x85\', \'\xe6\xb0\xb4\', \'\xe8\xa7\x81\', \'\xe5\x8d\x88\', \'\xe7\x89\x9b\', \'\xe6\x89\x8b\', \'\xe6\xaf\x9b\', \'\xe6\xb0\x94\', \'\xe5\x8d\x87\', \'\xe9\x95\xbf\', \'\xe4\xbb\x81\', \'\xe4\xbb\x80\', \'\xe7\x89\x87\',\n    \'\xe4\xbb\x86\', \'\xe5\x8c\x96\', \'\xe4\xbb\x87\', \'\xe5\xb8\x81\', \'\xe4\xbb\x8d\', \'\xe4\xbb\x85\', \'\xe6\x96\xa4\', \'\xe7\x88\xaa\', \'\xe5\x8f\x8d\', \'\xe4\xbb\x8b\', \'\xe7\x88\xb6\', \'\xe4\xbb\x8e\', \'\xe4\xbb\x8a\', \'\xe5\x87\xb6\', \'\xe5\x88\x86\', \'\xe4\xb9\x8f\', \'\xe5\x85\xac\', \'\xe4\xbb\x93\', \'\xe6\x9c\x88\', \'\xe6\xb0\x8f\',\n    \'\xe5\x8b\xbf\', \'\xe6\xac\xa0\', \'\xe9\xa3\x8e\', \'\xe4\xb8\xb9\', \'\xe5\x8c\x80\', \'\xe4\xb9\x8c\', \'\xe5\x87\xa4\', \'\xe5\x8b\xbe\', \'\xe6\x96\x87\', \'\xe5\x85\xad\', \'\xe6\x96\xb9\', \'\xe7\x81\xab\', \'\xe4\xb8\xba\', \'\xe6\x96\x97\', \'\xe5\xbf\x86\', \'\xe8\xae\xa2\', \'\xe8\xae\xa1\', \'\xe6\x88\xb7\', \'\xe8\xae\xa4\', \'\xe5\xbf\x83\',\n    \'\xe5\xb0\xba\', \'\xe5\xbc\x95\', \'\xe4\xb8\x91\', \'\xe5\xb7\xb4\', \'\xe5\xad\x94\', \'\xe9\x98\x9f\', \'\xe5\x8a\x9e\', \'\xe4\xbb\xa5\', \'\xe5\x85\x81\', \'\xe4\xba\x88\', \'\xe5\x8a\x9d\', \'\xe5\x8f\x8c\', \'\xe4\xb9\xa6\', \'\xe5\xb9\xbb\', \'\xe7\x8e\x89\', \'\xe5\x88\x8a\', \'\xe7\xa4\xba\', \'\xe6\x9c\xab\', \'\xe6\x9c\xaa\', \'\xe5\x87\xbb\',\n    \'\xe6\x89\x93\', \'\xe5\xb7\xa7\', \'\xe6\xad\xa3\', \'\xe6\x89\x91\', \'\xe6\x89\x92\', \'\xe5\x8a\x9f\', \'\xe6\x89\x94\', \'\xe5\x8e\xbb\', \'\xe7\x94\x98\', \'\xe4\xb8\x96\', \'\xe5\x8f\xa4\', \'\xe8\x8a\x82\', \'\xe6\x9c\xac\', \'\xe6\x9c\xaf\', \'\xe5\x8f\xaf\', \'\xe4\xb8\x99\', \'\xe5\xb7\xa6\', \'\xe5\x8e\x89\', \'\xe5\x8f\xb3\', \'\xe7\x9f\xb3\',\n    \'\xe5\xb8\x83\', \'\xe9\xbe\x99\', \'\xe5\xb9\xb3\', \'\xe7\x81\xad\', \'\xe8\xbd\xa7\', \'\xe4\xb8\x9c\', \'\xe5\x8d\xa1\', \'\xe5\x8c\x97\', \'\xe5\x8d\xa0\', \'\xe4\xb8\x9a\', \'\xe6\x97\xa7\', \'\xe5\xb8\x85\', \'\xe5\xbd\x92\', \'\xe4\xb8\x94\', \'\xe6\x97\xa6\', \'\xe7\x9b\xae\', \'\xe5\x8f\xb6\', \'\xe7\x94\xb2\', \'\xe7\x94\xb3\', \'\xe5\x8f\xae\',\n    \'\xe7\x94\xb5\', \'\xe5\x8f\xb7\', \'\xe7\x94\xb0\', \'\xe7\x94\xb1\', \'\xe5\x8f\xb2\', \'\xe5\x8f\xaa\', \'\xe5\xa4\xae\', \'\xe5\x85\x84\', \'\xe5\x8f\xbc\', \'\xe5\x8f\xab\', \'\xe5\x8f\xa6\', \'\xe5\x8f\xa8\', \'\xe5\x8f\xb9\', \'\xe5\x9b\x9b\', \'\xe7\x94\x9f\', \'\xe5\xa4\xb1\', \'\xe7\xa6\xbe\', \'\xe4\xb8\x98\', \'\xe4\xbb\x98\', \'\xe4\xbb\x97\',\n    \'\xe4\xbb\xa3\', \'\xe4\xbb\x99\', \'\xe4\xbb\xac\', \'\xe4\xbb\xaa\', \'\xe7\x99\xbd\', \'\xe4\xbb\x94\', \'\xe4\xbb\x96\', \'\xe6\x96\xa5\', \'\xe7\x93\x9c\', \'\xe4\xb9\x8e\', \'\xe4\xb8\x9b\', \'\xe4\xbb\xa4\', \'\xe7\x94\xa8\', \'\xe7\x94\xa9\', \'\xe5\x8d\xb0\', \'\xe4\xb9\x90\', \'\xe5\x8f\xa5\', \'\xe5\x8c\x86\', \'\xe5\x86\x8c\', \'\xe7\x8a\xaf\',\n    \'\xe5\xa4\x96\', \'\xe5\xa4\x84\', \'\xe5\x86\xac\', \'\xe9\xb8\x9f\', \'\xe5\x8a\xa1\', \'\xe5\x8c\x85\', \'\xe9\xa5\xa5\', \'\xe4\xb8\xbb\', \'\xe5\xb8\x82\', \'\xe7\xab\x8b\', \'\xe9\x97\xaa\', \'\xe5\x85\xb0\', \'\xe5\x8d\x8a\', \'\xe6\xb1\x81\', \'\xe6\xb1\x87\', \'\xe5\xa4\xb4\', \'\xe6\xb1\x89\', \'\xe5\xae\x81\', \'\xe7\xa9\xb4\', \'\xe5\xae\x83\',\n    \'\xe8\xae\xa8\', \'\xe5\x86\x99\', \'\xe8\xae\xa9\', \'\xe7\xa4\xbc\', \'\xe8\xae\xad\', \'\xe5\xbf\x85\', \'\xe8\xae\xae\', \'\xe8\xae\xaf\', \'\xe8\xae\xb0\', \'\xe6\xb0\xb8\', \'\xe5\x8f\xb8\', \'\xe5\xb0\xbc\', \'\xe6\xb0\x91\', \'\xe5\x87\xba\', \'\xe8\xbe\xbd\', \'\xe5\xa5\xb6\', \'\xe5\xa5\xb4\', \'\xe5\x8a\xa0\', \'\xe5\x8f\xac\', \'\xe7\x9a\xae\',\n    \'\xe8\xbe\xb9\', \'\xe5\x8f\x91\', \'\xe5\xad\x95\', \'\xe5\x9c\xa3\', \'\xe5\xaf\xb9\', \'\xe5\x8f\xb0\', \'\xe7\x9f\x9b\', \'\xe7\xba\xa0\', \'\xe6\xaf\x8d\', \'\xe5\xb9\xbc\', \'\xe4\xb8\x9d\', \'\xe5\xbc\x8f\', \'\xe5\x88\x91\', \'\xe5\x8a\xa8\', \'\xe6\x89\x9b\', \'\xe5\xaf\xba\', \'\xe5\x90\x89\', \'\xe6\x89\xa3\', \'\xe8\x80\x83\', \'\xe6\x89\x98\',\n    \'\xe8\x80\x81\', \'\xe6\x89\xa7\', \'\xe5\xb7\xa9\', \'\xe5\x9c\xbe\', \'\xe6\x89\xa9\', \'\xe6\x89\xab\', \'\xe5\x9c\xb0\', \'\xe6\x89\xac\', \'\xe5\x9c\xba\', \'\xe8\x80\xb3\', \'\xe5\x85\xb1\', \'\xe8\x8a\x92\', \'\xe4\xba\x9a\', \'\xe8\x8a\x9d\', \'\xe6\x9c\xbd\', \'\xe6\x9c\xb4\', \'\xe6\x9c\xba\', \'\xe6\x9d\x83\', \'\xe8\xbf\x87\', \'\xe8\x87\xa3\',\n    \'\xe5\x86\x8d\', \'\xe5\x8d\x8f\', \'\xe8\xa5\xbf\', \'\xe5\x8e\x8b\', \'\xe5\x8e\x8c\', \'\xe5\x9c\xa8\', \'\xe6\x9c\x89\', \'\xe7\x99\xbe\', \'\xe5\xad\x98\', \'\xe8\x80\x8c\', \'\xe9\xa1\xb5\', \'\xe5\x8c\xa0\', \'\xe5\xa4\xb8\', \'\xe5\xa4\xba\', \'\xe7\x81\xb0\', \'\xe8\xbe\xbe\', \'\xe5\x88\x97\', \'\xe6\xad\xbb\', \'\xe6\x88\x90\', \'\xe5\xa4\xb9\',\n    \'\xe8\xbd\xa8\', \'\xe9\x82\xaa\', \'\xe5\x88\x92\', \'\xe8\xbf\x88\', \'\xe6\xaf\x95\', \'\xe8\x87\xb3\', \'\xe6\xad\xa4\', \'\xe8\xb4\x9e\', \'\xe5\xb8\x88\', \'\xe5\xb0\x98\', \'\xe5\xb0\x96\', \'\xe5\x8a\xa3\', \'\xe5\x85\x89\', \'\xe5\xbd\x93\', \'\xe6\x97\xa9\', \'\xe5\x90\x90\', \'\xe5\x90\x93\', \'\xe8\x99\xab\', \'\xe6\x9b\xb2\', \'\xe5\x9b\xa2\',\n    \'\xe5\x90\x8c\', \'\xe5\x90\x8a\', \'\xe5\x90\x83\', \'\xe5\x9b\xa0\', \'\xe5\x90\xb8\', \'\xe5\x90\x97\', \'\xe5\xb1\xbf\', \'\xe5\xb8\x86\', \'\xe5\xb2\x81\', \'\xe5\x9b\x9e\', \'\xe5\xb2\x82\', \'\xe5\x88\x9a\', \'\xe5\x88\x99\', \'\xe8\x82\x89\', \'\xe7\xbd\x91\', \'\xe5\xb9\xb4\', \'\xe6\x9c\xb1\', \'\xe5\x85\x88\', \'\xe4\xb8\xa2\', \'\xe8\x88\x8c\',\n    \'\xe7\xab\xb9\', \'\xe8\xbf\x81\', \'\xe4\xb9\x94\', \'\xe4\xbc\x9f\', \'\xe4\xbc\xa0\', \'\xe4\xb9\x92\', \'\xe4\xb9\x93\', \'\xe4\xbc\x91\', \'\xe4\xbc\x8d\', \'\xe4\xbc\x8f\', \'\xe4\xbc\x98\', \'\xe4\xbc\x90\', \'\xe5\xbb\xb6\', \'\xe4\xbb\xb6\', \'\xe4\xbb\xbb\', \'\xe4\xbc\xa4\', \'\xe4\xbb\xb7\', \'\xe4\xbb\xbd\', \'\xe5\x8d\x8e\', \'\xe4\xbb\xb0\',\n    \'\xe4\xbb\xbf\', \'\xe4\xbc\x99\', \'\xe4\xbc\xaa\', \'\xe8\x87\xaa\', \'\xe8\xa1\x80\', \'\xe5\x90\x91\', \'\xe4\xbc\xbc\', \'\xe5\x90\x8e\', \'\xe8\xa1\x8c\', \'\xe8\x88\x9f\', \'\xe5\x85\xa8\', \'\xe4\xbc\x9a\', \'\xe6\x9d\x80\', \'\xe5\x90\x88\', \'\xe5\x85\x86\', \'\xe4\xbc\x81\', \'\xe4\xbc\x97\', \'\xe7\x88\xb7\', \'\xe4\xbc\x9e\', \'\xe5\x88\x9b\',\n    \'\xe8\x82\x8c\', \'\xe6\x9c\xb5\', \'\xe6\x9d\x82\', \'\xe5\x8d\xb1\', \'\xe6\x97\xac\', \'\xe6\x97\xa8\', \'\xe8\xb4\x9f\', \'\xe5\x90\x84\', \'\xe5\x90\x8d\', \'\xe5\xa4\x9a\', \'\xe4\xba\x89\', \'\xe8\x89\xb2\', \'\xe5\xa3\xae\', \'\xe5\x86\xb2\', \'\xe5\x86\xb0\', \'\xe5\xba\x84\', \'\xe5\xba\x86\', \'\xe4\xba\xa6\', \'\xe5\x88\x98\', \'\xe9\xbd\x90\',\n    \'\xe4\xba\xa4\', \'\xe6\xac\xa1\', \'\xe8\xa1\xa3\', \'\xe4\xba\xa7\', \'\xe5\x86\xb3\', \'\xe5\x85\x85\', \'\xe5\xa6\x84\', \'\xe9\x97\xad\', \'\xe9\x97\xae\', \'\xe9\x97\xaf\', \'\xe7\xbe\x8a\', \'\xe5\xb9\xb6\', \'\xe5\x85\xb3\', \'\xe7\xb1\xb3\', \'\xe7\x81\xaf\', \'\xe5\xb7\x9e\', \'\xe6\xb1\x97\', \'\xe6\xb1\xa1\', \'\xe6\xb1\x9f\', \'\xe6\xb1\xa0\',\n    \'\xe6\xb1\xa4\', \'\xe5\xbf\x99\', \'\xe5\x85\xb4\', \'\xe5\xae\x87\', \'\xe5\xae\x88\', \'\xe5\xae\x85\', \'\xe5\xad\x97\', \'\xe5\xae\x89\', \'\xe8\xae\xb2\', \'\xe5\x86\x9b\', \'\xe8\xae\xb8\', \'\xe8\xae\xba\', \'\xe5\x86\x9c\', \'\xe8\xae\xbd\', \'\xe8\xae\xbe\', \'\xe8\xae\xbf\', \'\xe5\xaf\xbb\', \'\xe9\x82\xa3\', \'\xe8\xbf\x85\', \'\xe5\xb0\xbd\',\n    \'\xe5\xaf\xbc\', \'\xe5\xbc\x82\', \'\xe5\xad\x99\', \'\xe9\x98\xb5\', \'\xe9\x98\xb3\', \'\xe6\x94\xb6\', \'\xe9\x98\xb6\', \'\xe9\x98\xb4\', \'\xe9\x98\xb2\', \'\xe5\xa5\xb8\', \'\xe5\xa6\x82\', \'\xe5\xa6\x87\', \'\xe5\xa5\xbd\', \'\xe5\xa5\xb9\', \'\xe5\xa6\x88\', \'\xe6\x88\x8f\', \'\xe7\xbe\xbd\', \'\xe8\xa7\x82\', \'\xe6\xac\xa2\', \'\xe4\xb9\xb0\',\n    \'\xe7\xba\xa2\', \'\xe7\xba\xa4\', \'\xe7\xba\xa7\', \'\xe7\xba\xa6\', \'\xe7\xba\xaa\', \'\xe9\xa9\xb0\', \'\xe5\xb7\xa1\', \'\xe5\xaf\xbf\', \'\xe5\xbc\x84\', \'\xe9\xba\xa6\', \'\xe5\xbd\xa2\', \'\xe8\xbf\x9b\', \'\xe6\x88\x92\', \'\xe5\x90\x9e\', \'\xe8\xbf\x9c\', \'\xe8\xbf\x9d\', \'\xe8\xbf\x90\', \'\xe6\x89\xb6\', \'\xe6\x8a\x9a\', \'\xe5\x9d\x9b\',\n    \'\xe6\x8a\x80\', \'\xe5\x9d\x8f\', \'\xe6\x89\xb0\', \'\xe6\x8b\x92\', \'\xe6\x89\xbe\', \'\xe6\x89\xb9\', \'\xe6\x89\xaf\', \'\xe5\x9d\x80\', \'\xe8\xb5\xb0\', \'\xe6\x8a\x84\', \'\xe5\x9d\x9d\', \'\xe8\xb4\xa1\', \'\xe6\x94\xbb\', \'\xe8\xb5\xa4\', \'\xe6\x8a\x98\', \'\xe6\x8a\x93\', \'\xe6\x89\xae\', \'\xe6\x8a\xa2\', \'\xe5\xad\x9d\', \'\xe5\x9d\x87\',\n    \'\xe6\x8a\x9b\', \'\xe6\x8a\x95\', \'\xe5\x9d\x9f\', \'\xe6\x8a\x97\', \'\xe5\x9d\x91\', \'\xe5\x9d\x8a\', \'\xe6\x8a\x96\', \'\xe6\x8a\xa4\', \'\xe5\xa3\xb3\', \'\xe5\xbf\x97\', \'\xe6\x89\xad\', \'\xe5\x9d\x97\', \'\xe5\xa3\xb0\', \'\xe6\x8a\x8a\', \'\xe6\x8a\xa5\', \'\xe5\x8d\xb4\', \'\xe5\x8a\xab\', \'\xe8\x8a\xbd\', \'\xe8\x8a\xb1\', \'\xe8\x8a\xb9\',\n    \'\xe8\x8a\xac\', \'\xe8\x8b\x8d\', \'\xe8\x8a\xb3\', \'\xe4\xb8\xa5\', \'\xe8\x8a\xa6\', \'\xe5\x8a\xb3\', \'\xe5\x85\x8b\', \'\xe8\x8b\x8f\', \'\xe6\x9d\x86\', \'\xe6\x9d\xa0\', \'\xe6\x9d\x9c\', \'\xe6\x9d\x90\', \'\xe6\x9d\x91\', \'\xe6\x9d\x8f\', \'\xe6\x9e\x81\', \'\xe6\x9d\x8e\', \'\xe6\x9d\xa8\', \'\xe6\xb1\x82\', \'\xe6\x9b\xb4\', \'\xe6\x9d\x9f\',\n    \'\xe8\xb1\x86\', \'\xe4\xb8\xa4\', \'\xe4\xb8\xbd\', \'\xe5\x8c\xbb\', \'\xe8\xbe\xb0\', \'\xe5\x8a\xb1\', \'\xe5\x90\xa6\', \'\xe8\xbf\x98\', \'\xe6\xad\xbc\', \'\xe6\x9d\xa5\', \'\xe8\xbf\x9e\', \'\xe6\xad\xa5\', \'\xe5\x9d\x9a\', \'\xe6\x97\xb1\', \'\xe7\x9b\xaf\', \'\xe5\x91\x88\', \'\xe6\x97\xb6\', \'\xe5\x90\xb4\', \'\xe5\x8a\xa9\', \'\xe5\x8e\xbf\',\n    \'\xe9\x87\x8c\', \'\xe5\x91\x86\', \'\xe5\x9b\xad\', \'\xe6\x97\xb7\', \'\xe5\x9b\xb4\', \'\xe5\x91\x80\', \'\xe5\x90\xa8\', \'\xe8\xb6\xb3\', \'\xe9\x82\xae\', \'\xe7\x94\xb7\', \'\xe5\x9b\xb0\', \'\xe5\x90\xb5\', \'\xe4\xb8\xb2\', \'\xe5\x91\x98\', \'\xe5\x90\xac\', \'\xe5\x90\xa9\', \'\xe5\x90\xb9\', \'\xe5\x91\x9c\', \'\xe5\x90\xa7\', \'\xe5\x90\xbc\',\n    \'\xe5\x88\xab\', \'\xe5\xb2\x97\', \'\xe5\xb8\x90\', \'\xe8\xb4\xa2\', \'\xe9\x92\x88\', \'\xe9\x92\x89\', \'\xe5\x91\x8a\', \'\xe6\x88\x91\', \'\xe4\xb9\xb1\', \'\xe5\x88\xa9\', \'\xe7\xa7\x83\', \'\xe7\xa7\x80\', \'\xe7\xa7\x81\', \'\xe6\xaf\x8f\', \'\xe5\x85\xb5\', \'\xe4\xbc\xb0\', \'\xe4\xbd\x93\', \'\xe4\xbd\x95\', \'\xe4\xbd\x86\', \'\xe4\xbc\xb8\',\n    \'\xe4\xbd\x9c\', \'\xe4\xbc\xaf\', \'\xe4\xbc\xb6\', \'\xe4\xbd\xa3\', \'\xe4\xbd\x8e\', \'\xe4\xbd\xa0\', \'\xe4\xbd\x8f\', \'\xe4\xbd\x8d\', \'\xe4\xbc\xb4\', \'\xe8\xba\xab\', \'\xe7\x9a\x82\', \'\xe4\xbd\x9b\', \'\xe8\xbf\x91\', \'\xe5\xbd\xbb\', \'\xe5\xbd\xb9\', \'\xe8\xbf\x94\', \'\xe4\xbd\x99\', \'\xe5\xb8\x8c\', \'\xe5\x9d\x90\', \'\xe8\xb0\xb7\',\n    \'\xe5\xa6\xa5\', \'\xe5\x90\xab\', \'\xe9\x82\xbb\', \'\xe5\xb2\x94\', \'\xe8\x82\x9d\', \'\xe8\x82\x9a\', \'\xe8\x82\xa0\', \'\xe9\xbe\x9f\', \'\xe5\x85\x8d\', \'\xe7\x8b\x82\', \'\xe7\x8a\xb9\', \'\xe8\xa7\x92\', \'\xe5\x88\xa0\', \'\xe6\x9d\xa1\', \'\xe5\x8d\xb5\', \'\xe5\xb2\x9b\', \'\xe8\xbf\x8e\', \'\xe9\xa5\xad\', \'\xe9\xa5\xae\', \'\xe7\xb3\xbb\',\n    \'\xe8\xa8\x80\', \'\xe5\x86\xbb\', \'\xe7\x8a\xb6\', \'\xe4\xba\xa9\', \'\xe5\x86\xb5\', \'\xe5\xba\x8a\', \'\xe5\xba\x93\', \'\xe7\x96\x97\', \'\xe5\xba\x94\', \'\xe5\x86\xb7\', \'\xe8\xbf\x99\', \'\xe5\xba\x8f\', \'\xe8\xbe\x9b\', \'\xe5\xbc\x83\', \'\xe5\x86\xb6\', \'\xe5\xbf\x98\', \'\xe9\x97\xb2\', \'\xe9\x97\xb4\', \'\xe9\x97\xb7\', \'\xe5\x88\xa4\',\n    \'\xe7\x81\xb6\', \'\xe7\x81\xbf\', \'\xe5\xbc\x9f\', \'\xe6\xb1\xaa\', \'\xe6\xb2\x99\', \'\xe6\xb1\xbd\', \'\xe6\xb2\x83\', \'\xe6\xb3\x9b\', \'\xe6\xb2\x9f\', \'\xe6\xb2\xa1\', \'\xe6\xb2\x88\', \'\xe6\xb2\x89\', \'\xe6\x80\x80\', \'\xe5\xbf\xa7\', \'\xe5\xbf\xab\', \'\xe5\xae\x8c\', \'\xe5\xae\x8b\', \'\xe5\xae\x8f\', \'\xe7\x89\xa2\', \'\xe7\xa9\xb6\',\n    \'\xe7\xa9\xb7\', \'\xe7\x81\xbe\', \'\xe8\x89\xaf\', \'\xe8\xaf\x81\', \'\xe5\x90\xaf\', \'\xe8\xaf\x84\', \'\xe8\xa1\xa5\', \'\xe5\x88\x9d\', \'\xe7\xa4\xbe\', \'\xe8\xaf\x86\', \'\xe8\xaf\x89\', \'\xe8\xaf\x8a\', \'\xe8\xaf\x8d\', \'\xe8\xaf\x91\', \'\xe5\x90\x9b\', \'\xe7\x81\xb5\', \'\xe5\x8d\xb3\', \'\xe5\xb1\x82\', \'\xe5\xb0\xbf\', \'\xe5\xb0\xbe\',\n    \'\xe8\xbf\x9f\', \'\xe5\xb1\x80\', \'\xe6\x94\xb9\', \'\xe5\xbc\xa0\', \'\xe5\xbf\x8c\', \'\xe9\x99\x85\', \'\xe9\x99\x86\', \'\xe9\x98\xbf\', \'\xe9\x99\x88\', \'\xe9\x98\xbb\', \'\xe9\x99\x84\', \'\xe5\xa6\x99\', \'\xe5\xa6\x96\', \'\xe5\xa6\xa8\', \'\xe5\x8a\xaa\', \'\xe5\xbf\x8d\', \'\xe5\x8a\xb2\', \'\xe9\xb8\xa1\', \'\xe9\xa9\xb1\', \'\xe7\xba\xaf\',\n    \'\xe7\xba\xb1\', \'\xe7\xba\xb3\', \'\xe7\xba\xb2\', \'\xe9\xa9\xb3\', \'\xe7\xba\xb5\', \'\xe7\xba\xb7\', \'\xe7\xba\xb8\', \'\xe7\xba\xb9\', \'\xe7\xba\xba\', \'\xe9\xa9\xb4\', \'\xe7\xba\xbd\', \'\xe5\xa5\x89\', \'\xe7\x8e\xa9\', \'\xe7\x8e\xaf\', \'\xe6\xad\xa6\', \'\xe9\x9d\x92\', \'\xe8\xb4\xa3\', \'\xe7\x8e\xb0\', \'\xe8\xa1\xa8\', \'\xe8\xa7\x84\',\n    \'\xe6\x8a\xb9\', \'\xe6\x8b\xa2\', \'\xe6\x8b\x94\', \'\xe6\x8b\xa3\', \'\xe6\x8b\x85\', \'\xe5\x9d\xa6\', \'\xe6\x8a\xbc\', \'\xe6\x8a\xbd\', \'\xe6\x8b\x90\', \'\xe6\x8b\x96\', \'\xe6\x8b\x8d\', \'\xe8\x80\x85\', \'\xe9\xa1\xb6\', \'\xe6\x8b\x86\', \'\xe6\x8b\xa5\', \'\xe6\x8a\xb5\', \'\xe6\x8b\x98\', \'\xe5\x8a\xbf\', \'\xe6\x8a\xb1\', \'\xe5\x9e\x83\',\n    \'\xe6\x8b\x89\', \'\xe6\x8b\xa6\', \'\xe6\x8b\x8c\', \'\xe5\xb9\xb8\', \'\xe6\x8b\x9b\', \'\xe5\x9d\xa1\', \'\xe6\x8a\xab\', \'\xe6\x8b\xa8\', \'\xe6\x8b\xa9\', \'\xe6\x8a\xac\', \'\xe5\x85\xb6\', \'\xe5\x8f\x96\', \'\xe8\x8b\xa6\', \'\xe8\x8b\xa5\', \'\xe8\x8c\x82\', \'\xe8\x8b\xb9\', \'\xe8\x8b\x97\', \'\xe8\x8b\xb1\', \'\xe8\x8c\x83\', \'\xe7\x9b\xb4\',\n    \'\xe8\x8c\x84\', \'\xe8\x8c\x8e\', \'\xe8\x8c\x85\', \'\xe6\x9e\x97\', \'\xe6\x9e\x9d\', \'\xe6\x9d\xaf\', \'\xe6\x9f\x9c\', \'\xe6\x9e\x90\', \'\xe6\x9d\xbf\', \'\xe6\x9d\xbe\', \'\xe6\x9e\xaa\', \'\xe6\x9e\x84\', \'\xe6\x9d\xb0\', \'\xe8\xbf\xb0\', \'\xe6\x9e\x95\', \'\xe4\xb8\xa7\', \'\xe6\x88\x96\', \'\xe7\x94\xbb\', \'\xe5\x8d\xa7\', \'\xe4\xba\x8b\',\n    \'\xe5\x88\xba\', \'\xe6\x9e\xa3\', \'\xe9\x9b\xa8\', \'\xe5\x8d\x96\', \'\xe7\x9f\xbf\', \'\xe7\xa0\x81\', \'\xe5\x8e\x95\', \'\xe5\xa5\x94\', \'\xe5\xa5\x87\', \'\xe5\xa5\x8b\', \'\xe6\x80\x81\', \'\xe6\xac\xa7\', \'\xe5\x9e\x84\', \'\xe5\xa6\xbb\', \'\xe8\xbd\xb0\', \'\xe9\xa1\xb7\', \'\xe8\xbd\xac\', \'\xe6\x96\xa9\', \'\xe8\xbd\xae\', \'\xe8\xbd\xaf\',\n    \'\xe5\x88\xb0\', \'\xe9\x9d\x9e\', \'\xe5\x8f\x94\', \'\xe8\x82\xaf\', \'\xe9\xbd\xbf\', \'\xe4\xba\x9b\', \'\xe8\x99\x8e\', \'\xe8\x99\x8f\', \'\xe8\x82\xbe\', \'\xe8\xb4\xa4\', \'\xe5\xb0\x9a\', \'\xe6\x97\xba\', \'\xe5\x85\xb7\', \'\xe6\x9e\x9c\', \'\xe5\x91\xb3\', \'\xe6\x98\x86\', \'\xe5\x9b\xbd\', \'\xe6\x98\x8c\', \'\xe7\x95\x85\', \'\xe6\x98\x8e\',\n    \'\xe6\x98\x93\', \'\xe6\x98\x82\', \'\xe5\x85\xb8\', \'\xe5\x9b\xba\', \'\xe5\xbf\xa0\', \'\xe5\x92\x90\', \'\xe5\x91\xbc\', \'\xe9\xb8\xa3\', \'\xe5\x92\x8f\', \'\xe5\x91\xa2\', \'\xe5\xb2\xb8\', \'\xe5\xb2\xa9\', \'\xe5\xb8\x96\', \'\xe7\xbd\x97\', \'\xe5\xb8\x9c\', \'\xe5\xb2\xad\', \'\xe5\x87\xaf\', \'\xe8\xb4\xa5\', \'\xe8\xb4\xa9\', \'\xe8\xb4\xad\',\n    \'\xe5\x9b\xbe\', \'\xe9\x92\x93\', \'\xe5\x88\xb6\', \'\xe7\x9f\xa5\', \'\xe5\x9e\x82\', \'\xe7\x89\xa7\', \'\xe7\x89\xa9\', \'\xe4\xb9\x96\', \'\xe5\x88\xae\', \'\xe7\xa7\x86\', \'\xe5\x92\x8c\', \'\xe5\xad\xa3\', \'\xe5\xa7\x94\', \'\xe4\xbd\xb3\', \'\xe4\xbe\x8d\', \'\xe4\xbe\x9b\', \'\xe4\xbd\xbf\', \'\xe4\xbe\x8b\', \'\xe7\x89\x88\', \'\xe4\xbe\x84\',\n    \'\xe4\xbe\xa6\', \'\xe4\xbe\xa7\', \'\xe5\x87\xad\', \'\xe4\xbe\xa8\', \'\xe4\xbd\xa9\', \'\xe8\xb4\xa7\', \'\xe4\xbe\x9d\', \'\xe7\x9a\x84\', \'\xe8\xbf\xab\', \'\xe8\xb4\xa8\', \'\xe6\xac\xa3\', \'\xe5\xbe\x81\', \'\xe5\xbe\x80\', \'\xe7\x88\xac\', \'\xe5\xbd\xbc\', \'\xe5\xbe\x84\', \'\xe6\x89\x80\', \'\xe8\x88\x8d\', \'\xe9\x87\x91\', \'\xe5\x91\xbd\',\n    \'\xe6\x96\xa7\', \'\xe7\x88\xb8\', \'\xe9\x87\x87\', \'\xe5\x8f\x97\', \'\xe4\xb9\xb3\', \'\xe8\xb4\xaa\', \'\xe5\xbf\xb5\', \'\xe8\xb4\xab\', \'\xe8\x82\xa4\', \'\xe8\x82\xba\', \'\xe8\x82\xa2\', \'\xe8\x82\xbf\', \'\xe8\x83\x80\', \'\xe6\x9c\x8b\', \'\xe8\x82\xa1\', \'\xe8\x82\xa5\', \'\xe6\x9c\x8d\', \'\xe8\x83\x81\', \'\xe5\x91\xa8\', \'\xe6\x98\x8f\',\n    \'\xe9\xb1\xbc\', \'\xe5\x85\x94\', \'\xe7\x8b\x90\', \'\xe5\xbf\xbd\', \'\xe7\x8b\x97\', \'\xe5\xa4\x87\', \'\xe9\xa5\xb0\', \'\xe9\xa5\xb1\', \'\xe9\xa5\xb2\', \'\xe5\x8f\x98\', \'\xe4\xba\xac\', \'\xe4\xba\xab\', \'\xe5\xba\x97\', \'\xe5\xa4\x9c\', \'\xe5\xba\x99\', \'\xe5\xba\x9c\', \'\xe5\xba\x95\', \'\xe5\x89\x82\', \'\xe9\x83\x8a\', \'\xe5\xba\x9f\',\n    \'\xe5\x87\x80\', \'\xe7\x9b\xb2\', \'\xe6\x94\xbe\', \'\xe5\x88\xbb\', \'\xe8\x82\xb2\', \'\xe9\x97\xb8\', \'\xe9\x97\xb9\', \'\xe9\x83\x91\', \'\xe5\x88\xb8\', \'\xe5\x8d\xb7\', \'\xe5\x8d\x95\', \'\xe7\x82\x92\', \'\xe7\x82\x8a\', \'\xe7\x82\x95\', \'\xe7\x82\x8e\', \'\xe7\x82\x89\', \'\xe6\xb2\xab\', \'\xe6\xb5\x85\', \'\xe6\xb3\x95\', \'\xe6\xb3\x84\',\n    \'\xe6\xb2\xb3\', \'\xe6\xb2\xbe\', \'\xe6\xb3\xaa\', \'\xe6\xb2\xb9\', \'\xe6\xb3\x8a\', \'\xe6\xb2\xbf\', \'\xe6\xb3\xa1\', \'\xe6\xb3\xa8\', \'\xe6\xb3\xbb\', \'\xe6\xb3\xb3\', \'\xe6\xb3\xa5\', \'\xe6\xb2\xb8\', \'\xe6\xb3\xa2\', \'\xe6\xb3\xbc\', \'\xe6\xb3\xbd\', \'\xe6\xb2\xbb\', \'\xe6\x80\x96\', \'\xe6\x80\xa7\', \'\xe6\x80\x95\', \'\xe6\x80\x9c\',\n    \'\xe6\x80\xaa\', \'\xe5\xad\xa6\', \'\xe5\xae\x9d\', \'\xe5\xae\x97\', \'\xe5\xae\x9a\', \'\xe5\xae\x9c\', \'\xe5\xae\xa1\', \'\xe5\xae\x99\', \'\xe5\xae\x98\', \'\xe7\xa9\xba\', \'\xe5\xb8\x98\', \'\xe5\xae\x9e\', \'\xe8\xaf\x95\', \'\xe9\x83\x8e\', \'\xe8\xaf\x97\', \'\xe8\x82\xa9\', \'\xe6\x88\xbf\', \'\xe8\xaf\x9a\', \'\xe8\xa1\xac\', \'\xe8\xa1\xab\',\n    \'\xe8\xa7\x86\', \'\xe8\xaf\x9d\', \'\xe8\xaf\x9e\', \'\xe8\xaf\xa2\', \'\xe8\xaf\xa5\', \'\xe8\xaf\xa6\', \'\xe5\xbb\xba\', \'\xe8\x82\x83\', \'\xe5\xbd\x95\', \'\xe9\x9a\xb6\', \'\xe5\xb1\x85\', \'\xe5\xb1\x8a\', \'\xe5\x88\xb7\', \'\xe5\xb1\x88\', \'\xe5\xbc\xa6\', \'\xe6\x89\xbf\', \'\xe5\xad\x9f\', \'\xe5\xad\xa4\', \'\xe9\x99\x95\', \'\xe9\x99\x8d\',\n    \'\xe9\x99\x90\', \'\xe5\xa6\xb9\', \'\xe5\xa7\x91\', \'\xe5\xa7\x90\', \'\xe5\xa7\x93\', \'\xe5\xa7\x8b\', \'\xe9\xa9\xbe\', \'\xe5\x8f\x82\', \'\xe8\x89\xb0\', \'\xe7\xba\xbf\', \'\xe7\xbb\x83\', \'\xe7\xbb\x84\', \'\xe7\xbb\x86\', \'\xe9\xa9\xb6\', \'\xe7\xbb\x87\', \'\xe7\xbb\x88\', \'\xe9\xa9\xbb\', \'\xe9\xa9\xbc\', \'\xe7\xbb\x8d\', \'\xe7\xbb\x8f\',\n    \'\xe8\xb4\xaf\', \'\xe5\xa5\x8f\', \'\xe6\x98\xa5\', \'\xe5\xb8\xae\', \'\xe7\x8f\x8d\', \'\xe7\x8e\xbb\', \'\xe6\xaf\x92\', \'\xe5\x9e\x8b\', \'\xe6\x8c\x82\', \'\xe5\xb0\x81\', \'\xe6\x8c\x81\', \'\xe9\xa1\xb9\', \'\xe5\x9e\xae\', \'\xe6\x8c\x8e\', \'\xe5\x9f\x8e\', \'\xe6\x8c\xa0\', \'\xe6\x94\xbf\', \'\xe8\xb5\xb4\', \'\xe8\xb5\xb5\', \'\xe6\x8c\xa1\',\n    \'\xe6\x8c\xba\', \'\xe6\x8b\xac\', \'\xe6\x8b\xb4\', \'\xe6\x8b\xbe\', \'\xe6\x8c\x91\', \'\xe6\x8c\x87\', \'\xe5\x9e\xab\', \'\xe6\x8c\xa3\', \'\xe6\x8c\xa4\', \'\xe6\x8b\xbc\', \'\xe6\x8c\x96\', \'\xe6\x8c\x89\', \'\xe6\x8c\xa5\', \'\xe6\x8c\xaa\', \'\xe6\x9f\x90\', \'\xe7\x94\x9a\', \'\xe9\x9d\xa9\', \'\xe8\x8d\x90\', \'\xe5\xb7\xb7\', \'\xe5\xb8\xa6\',\n    \'\xe8\x8d\x89\', \'\xe8\x8c\xa7\', \'\xe8\x8c\xb6\', \'\xe8\x8d\x92\', \'\xe8\x8c\xab\', \'\xe8\x8d\xa1\', \'\xe8\x8d\xa3\', \'\xe6\x95\x85\', \'\xe8\x83\xa1\', \'\xe5\x8d\x97\', \'\xe8\x8d\xaf\', \'\xe6\xa0\x87\', \'\xe6\x9e\xaf\', \'\xe6\x9f\x84\', \'\xe6\xa0\x8b\', \'\xe7\x9b\xb8\', \'\xe6\x9f\xa5\', \'\xe6\x9f\x8f\', \'\xe6\x9f\xb3\', \'\xe6\x9f\xb1\',\n    \'\xe6\x9f\xbf\', \'\xe6\xa0\x8f\', \'\xe6\xa0\x91\', \'\xe8\xa6\x81\', \'\xe5\x92\xb8\', \'\xe5\xa8\x81\', \'\xe6\xad\xaa\', \'\xe7\xa0\x94\', \'\xe7\xa0\x96\', \'\xe5\x8e\x98\', \'\xe5\x8e\x9a\', \'\xe7\xa0\x8c\', \'\xe7\xa0\x8d\', \'\xe9\x9d\xa2\', \'\xe8\x80\x90\', \'\xe8\x80\x8d\', \'\xe7\x89\xb5\', \'\xe6\xae\x8b\', \'\xe6\xae\x83\', \'\xe8\xbd\xbb\',\n    \'\xe9\xb8\xa6\', \'\xe7\x9a\x86\', \'\xe8\x83\x8c\', \'\xe6\x88\x98\', \'\xe7\x82\xb9\', \'\xe4\xb8\xb4\', \'\xe8\xa7\x88\', \'\xe7\xab\x96\', \'\xe7\x9c\x81\', \'\xe5\x89\x8a\', \'\xe5\xb0\x9d\', \'\xe6\x98\xaf\', \'\xe7\x9b\xbc\', \'\xe7\x9c\xa8\', \'\xe5\x93\x84\', \'\xe6\x98\xbe\', \'\xe5\x93\x91\', \'\xe5\x86\x92\', \'\xe6\x98\xa0\', \'\xe6\x98\x9f\',\n    \'\xe6\x98\xa8\', \'\xe7\x95\x8f\', \'\xe8\xb6\xb4\', \'\xe8\x83\x83\', \'\xe8\xb4\xb5\', \'\xe7\x95\x8c\', \'\xe8\x99\xb9\', \'\xe8\x99\xbe\', \'\xe8\x9a\x81\', \'\xe6\x80\x9d\', \'\xe8\x9a\x82\', \'\xe8\x99\xbd\', \'\xe5\x93\x81\', \'\xe5\x92\xbd\', \'\xe9\xaa\x82\', \'\xe5\x93\x97\', \'\xe5\x92\xb1\', \'\xe5\x93\x8d\', \'\xe5\x93\x88\', \'\xe5\x92\xac\',\n    \'\xe5\x92\xb3\', \'\xe5\x93\xaa\', \'\xe7\x82\xad\', \'\xe5\xb3\xa1\', \'\xe7\xbd\x9a\', \'\xe8\xb4\xb1\', \'\xe8\xb4\xb4\', \'\xe9\xaa\xa8\', \'\xe9\x92\x9e\', \'\xe9\x92\x9f\', \'\xe9\x92\xa2\', \'\xe9\x92\xa5\', \'\xe9\x92\xa9\', \'\xe5\x8d\xb8\', \'\xe7\xbc\xb8\', \'\xe6\x8b\x9c\', \'\xe7\x9c\x8b\', \'\xe7\x9f\xa9\', \'\xe6\x80\x8e\', \'\xe7\x89\xb2\',\n    \'\xe9\x80\x89\', \'\xe9\x80\x82\', \'\xe7\xa7\x92\', \'\xe9\xa6\x99\', \'\xe7\xa7\x8d\', \'\xe7\xa7\x8b\', \'\xe7\xa7\x91\', \'\xe9\x87\x8d\', \'\xe5\xa4\x8d\', \'\xe7\xab\xbf\', \'\xe6\xae\xb5\', \'\xe4\xbe\xbf\', \'\xe4\xbf\xa9\', \'\xe8\xb4\xb7\', \'\xe9\xa1\xba\', \'\xe4\xbf\xae\', \'\xe4\xbf\x9d\', \'\xe4\xbf\x83\', \'\xe4\xbe\xae\', \'\xe4\xbf\xad\',\n    \'\xe4\xbf\x97\', \'\xe4\xbf\x98\', \'\xe4\xbf\xa1\', \'\xe7\x9a\x87\', \'\xe6\xb3\x89\', \'\xe9\xac\xbc\', \'\xe4\xbe\xb5\', \'\xe8\xbf\xbd\', \'\xe4\xbf\x8a\', \'\xe7\x9b\xbe\', \'\xe5\xbe\x85\', \'\xe5\xbe\x8b\', \'\xe5\xbe\x88\', \'\xe9\xa1\xbb\', \'\xe5\x8f\x99\', \'\xe5\x89\x91\', \'\xe9\x80\x83\', \'\xe9\xa3\x9f\', \'\xe7\x9b\x86\', \'\xe8\x83\x86\',\n    \'\xe8\x83\x9c\', \'\xe8\x83\x9e\', \'\xe8\x83\x96\', \'\xe8\x84\x89\', \'\xe5\x8b\x89\', \'\xe7\x8b\xad\', \'\xe7\x8b\xae\', \'\xe7\x8b\xac\', \'\xe7\x8b\xa1\', \'\xe7\x8b\xb1\', \'\xe7\x8b\xa0\', \'\xe8\xb4\xb8\', \'\xe6\x80\xa8\', \'\xe6\x80\xa5\', \'\xe9\xa5\xb6\', \'\xe8\x9a\x80\', \'\xe9\xa5\xba\', \'\xe9\xa5\xbc\', \'\xe5\xbc\xaf\', \'\xe5\xb0\x86\',\n    \'\xe5\xa5\x96\', \'\xe5\x93\x80\', \'\xe4\xba\xad\', \'\xe4\xba\xae\', \'\xe5\xba\xa6\', \'\xe8\xbf\xb9\', \'\xe5\xba\xad\', \'\xe7\x96\xae\', \'\xe7\x96\xaf\', \'\xe7\x96\xab\', \'\xe7\x96\xa4\', \'\xe5\xa7\xbf\', \'\xe4\xba\xb2\', \'\xe9\x9f\xb3\', \'\xe5\xb8\x9d\', \'\xe6\x96\xbd\', \'\xe9\x97\xbb\', \'\xe9\x98\x80\', \'\xe9\x98\x81\', \'\xe5\xb7\xae\',\n    \'\xe5\x85\xbb\', \'\xe7\xbe\x8e\', \'\xe5\xa7\x9c\', \'\xe5\x8f\x9b\', \'\xe9\x80\x81\', \'\xe7\xb1\xbb\', \'\xe8\xbf\xb7\', \'\xe5\x89\x8d\', \'\xe9\xa6\x96\', \'\xe9\x80\x86\', \'\xe6\x80\xbb\', \'\xe7\x82\xbc\', \'\xe7\x82\xb8\', \'\xe7\x82\xae\', \'\xe7\x83\x82\', \'\xe5\x89\x83\', \'\xe6\xb4\x81\', \'\xe6\xb4\xaa\', \'\xe6\xb4\x92\', \'\xe6\xb5\x87\',\n    \'\xe6\xb5\x8a\', \'\xe6\xb4\x9e\', \'\xe6\xb5\x8b\', \'\xe6\xb4\x97\', \'\xe6\xb4\xbb\', \'\xe6\xb4\xbe\', \'\xe6\xb4\xbd\', \'\xe6\x9f\x93\', \'\xe6\xb5\x8e\', \'\xe6\xb4\x8b\', \'\xe6\xb4\xb2\', \'\xe6\xb5\x91\', \'\xe6\xb5\x93\', \'\xe6\xb4\xa5\', \'\xe6\x81\x92\', \'\xe6\x81\xa2\', \'\xe6\x81\xb0\', \'\xe6\x81\xbc\', \'\xe6\x81\xa8\', \'\xe4\xb8\xbe\',\n    \'\xe8\xa7\x89\', \'\xe5\xae\xa3\', \'\xe5\xae\xa4\', \'\xe5\xae\xab\', \'\xe5\xae\xaa\', \'\xe7\xaa\x81\', \'\xe7\xa9\xbf\', \'\xe7\xaa\x83\', \'\xe5\xae\xa2\', \'\xe5\x86\xa0\', \'\xe8\xaf\xad\', \'\xe6\x89\x81\', \'\xe8\xa2\x84\', \'\xe7\xa5\x96\', \'\xe7\xa5\x9e\', \'\xe7\xa5\x9d\', \'\xe8\xaf\xaf\', \'\xe8\xaf\xb1\', \'\xe8\xaf\xb4\', \'\xe8\xaf\xb5\',\n    \'\xe5\x9e\xa6\', \'\xe9\x80\x80\', \'\xe6\x97\xa2\', \'\xe5\xb1\x8b\', \'\xe6\x98\xbc\', \'\xe8\xb4\xb9\', \'\xe9\x99\xa1\', \'\xe7\x9c\x89\', \'\xe5\xad\xa9\', \'\xe9\x99\xa4\', \'\xe9\x99\xa9\', \'\xe9\x99\xa2\', \'\xe5\xa8\x83\', \'\xe5\xa7\xa5\', \'\xe5\xa7\xa8\', \'\xe5\xa7\xbb\', \'\xe5\xa8\x87\', \'\xe6\x80\x92\', \'\xe6\x9e\xb6\', \'\xe8\xb4\xba\',\n    \'\xe7\x9b\x88\', \'\xe5\x8b\x87\', \'\xe6\x80\xa0\', \'\xe6\x9f\x94\', \'\xe5\x9e\x92\', \'\xe7\xbb\x91\', \'\xe7\xbb\x92\', \'\xe7\xbb\x93\', \'\xe7\xbb\x95\', \'\xe9\xaa\x84\', \'\xe7\xbb\x98\', \'\xe7\xbb\x99\', \'\xe7\xbb\x9c\', \'\xe9\xaa\x86\', \'\xe7\xbb\x9d\', \'\xe7\xbb\x9e\', \'\xe7\xbb\x9f\', \'\xe8\x80\x95\', \'\xe8\x80\x97\', \'\xe8\x89\xb3\',\n    \'\xe6\xb3\xb0\', \'\xe7\x8f\xa0\', \'\xe7\x8f\xad\', \'\xe7\xb4\xa0\', \'\xe8\x9a\x95\', \'\xe9\xa1\xbd\', \'\xe7\x9b\x8f\', \'\xe5\x8c\xaa\', \'\xe6\x8d\x9e\', \'\xe6\xa0\xbd\', \'\xe6\x8d\x95\', \'\xe6\x8c\xaf\', \'\xe8\xbd\xbd\', \'\xe8\xb5\xb6\', \'\xe8\xb5\xb7\', \'\xe7\x9b\x90\', \'\xe6\x8d\x8e\', \'\xe6\x8d\x8f\', \'\xe5\x9f\x8b\', \'\xe6\x8d\x89\',\n    \'\xe6\x8d\x86\', \'\xe6\x8d\x90\', \'\xe6\x8d\x9f\', \'\xe9\x83\xbd\', \'\xe5\x93\xb2\', \'\xe9\x80\x9d\', \'\xe6\x8d\xa1\', \'\xe6\x8d\xa2\', \'\xe6\x8c\xbd\', \'\xe7\x83\xad\', \'\xe6\x81\x90\', \'\xe5\xa3\xb6\', \'\xe6\x8c\xa8\', \'\xe8\x80\xbb\', \'\xe8\x80\xbd\', \'\xe6\x81\xad\', \'\xe8\x8e\xb2\', \'\xe8\x8e\xab\', \'\xe8\x8d\xb7\', \'\xe8\x8e\xb7\',\n    \'\xe6\x99\x8b\', \'\xe6\x81\xb6\', \'\xe7\x9c\x9f\', \'\xe6\xa1\x86\', \'\xe6\xa1\x82\', \'\xe6\xa1\xa3\', \'\xe6\xa1\x90\', \'\xe6\xa0\xaa\', \'\xe6\xa1\xa5\', \'\xe6\xa1\x83\', \'\xe6\xa0\xbc\', \'\xe6\xa0\xa1\', \'\xe6\xa0\xb8\', \'\xe6\xa0\xb7\', \'\xe6\xa0\xb9\', \'\xe7\xb4\xa2\', \'\xe5\x93\xa5\', \'\xe9\x80\x9f\', \'\xe9\x80\x97\', \'\xe6\xa0\x97\',\n    \'\xe9\x85\x8d\', \'\xe7\xbf\x85\', \'\xe8\xbe\xb1\', \'\xe5\x94\x87\', \'\xe5\xa4\x8f\', \'\xe7\xa1\x80\', \'\xe7\xa0\xb4\', \'\xe5\x8e\x9f\', \'\xe5\xa5\x97\', \'\xe9\x80\x90\', \'\xe7\x83\x88\', \'\xe6\xae\x8a\', \'\xe9\xa1\xbe\', \'\xe8\xbd\xbf\', \'\xe8\xbe\x83\', \'\xe9\xa1\xbf\', \'\xe6\xaf\x99\', \'\xe8\x87\xb4\', \'\xe6\x9f\xb4\', \'\xe6\xa1\x8c\',\n    \'\xe8\x99\x91\', \'\xe7\x9b\x91\', \'\xe7\xb4\xa7\', \'\xe5\x85\x9a\', \'\xe6\x99\x92\', \'\xe7\x9c\xa0\', \'\xe6\x99\x93\', \'\xe9\xb8\xad\', \'\xe6\x99\x83\', \'\xe6\x99\x8c\', \'\xe6\x99\x95\', \'\xe8\x9a\x8a\', \'\xe5\x93\xa8\', \'\xe5\x93\xad\', \'\xe6\x81\xa9\', \'\xe5\x94\xa4\', \'\xe5\x95\x8a\', \'\xe5\x94\x89\', \'\xe7\xbd\xa2\', \'\xe5\xb3\xb0\',\n    \'\xe5\x9c\x86\', \'\xe8\xb4\xbc\', \'\xe8\xb4\xbf\', \'\xe9\x92\xb1\', \'\xe9\x92\xb3\', \'\xe9\x92\xbb\', \'\xe9\x93\x81\', \'\xe9\x93\x83\', \'\xe9\x93\x85\', \'\xe7\xbc\xba\', \'\xe6\xb0\xa7\', \'\xe7\x89\xb9\', \'\xe7\x89\xba\', \'\xe9\x80\xa0\', \'\xe4\xb9\x98\', \'\xe6\x95\x8c\', \'\xe7\xa7\xa4\', \'\xe7\xa7\x9f\', \'\xe7\xa7\xaf\', \'\xe7\xa7\xa7\',\n    \'\xe7\xa7\xa9\', \'\xe7\xa7\xb0\', \'\xe7\xa7\x98\', \'\xe9\x80\x8f\', \'\xe7\xac\x94\', \'\xe7\xac\x91\', \'\xe7\xac\x8b\', \'\xe5\x80\xba\', \'\xe5\x80\x9f\', \'\xe5\x80\xbc\', \'\xe5\x80\x9a\', \'\xe5\x80\xbe\', \'\xe5\x80\x92\', \'\xe5\x80\x98\', \'\xe4\xbf\xb1\', \'\xe5\x80\xa1\', \'\xe5\x80\x99\', \'\xe4\xbf\xaf\', \'\xe5\x80\x8d\', \'\xe5\x80\xa6\',\n    \'\xe5\x81\xa5\', \'\xe8\x87\xad\', \'\xe5\xb0\x84\', \'\xe8\xba\xac\', \'\xe6\x81\xaf\', \'\xe5\xbe\x92\', \'\xe5\xbe\x90\', \'\xe8\x88\xb0\', \'\xe8\x88\xb1\', \'\xe8\x88\xac\', \'\xe8\x88\xaa\', \'\xe9\x80\x94\', \'\xe6\x8b\xbf\', \'\xe7\x88\xb9\', \'\xe7\x88\xb1\', \'\xe9\xa2\x82\', \'\xe7\xbf\x81\', \'\xe8\x84\x86\', \'\xe8\x84\x82\', \'\xe8\x83\xb8\',\n    \'\xe8\x83\xb3\', \'\xe8\x84\x8f\', \'\xe8\x83\xb6\', \'\xe8\x84\x91\', \'\xe7\x8b\xb8\', \'\xe7\x8b\xbc\', \'\xe9\x80\xa2\', \'\xe7\x95\x99\', \'\xe7\x9a\xb1\', \'\xe9\xa5\xbf\', \'\xe6\x81\x8b\', \'\xe6\xa1\xa8\', \'\xe6\xb5\x86\', \'\xe8\xa1\xb0\', \'\xe9\xab\x98\', \'\xe5\xb8\xad\', \'\xe5\x87\x86\', \'\xe5\xba\xa7\', \'\xe8\x84\x8a\', \'\xe7\x97\x87\',\n    \'\xe7\x97\x85\', \'\xe7\x96\xbe\', \'\xe7\x96\xbc\', \'\xe7\x96\xb2\', \'\xe6\x95\x88\', \'\xe7\xa6\xbb\', \'\xe5\x94\x90\', \'\xe8\xb5\x84\', \'\xe5\x87\x89\', \'\xe7\xab\x99\', \'\xe5\x89\x96\', \'\xe7\xab\x9e\', \'\xe9\x83\xa8\', \'\xe6\x97\x81\', \'\xe6\x97\x85\', \'\xe7\x95\x9c\', \'\xe9\x98\x85\', \'\xe7\xbe\x9e\', \'\xe7\x93\xb6\', \'\xe6\x8b\xb3\',\n    \'\xe7\xb2\x89\', \'\xe6\x96\x99\', \'\xe7\x9b\x8a\', \'\xe5\x85\xbc\', \'\xe7\x83\xa4\', \'\xe7\x83\x98\', \'\xe7\x83\xa6\', \'\xe7\x83\xa7\', \'\xe7\x83\x9b\', \'\xe7\x83\x9f\', \'\xe9\x80\x92\', \'\xe6\xb6\x9b\', \'\xe6\xb5\x99\', \'\xe6\xb6\x9d\', \'\xe9\x85\x92\', \'\xe6\xb6\x89\', \'\xe6\xb6\x88\', \'\xe6\xb5\xa9\', \'\xe6\xb5\xb7\', \'\xe6\xb6\x82\',\n    \'\xe6\xb5\xb4\', \'\xe6\xb5\xae\', \'\xe6\xb5\x81\', \'\xe6\xb6\xa6\', \'\xe6\xb5\xaa\', \'\xe6\xb5\xb8\', \'\xe6\xb6\xa8\', \'\xe7\x83\xab\', \'\xe6\xb6\x8c\', \'\xe6\x82\x9f\', \'\xe6\x82\x84\', \'\xe6\x82\x94\', \'\xe6\x82\xa6\', \'\xe5\xae\xb3\', \'\xe5\xae\xbd\', \'\xe5\xae\xb6\', \'\xe5\xae\xb5\', \'\xe5\xae\xb4\', \'\xe5\xae\xbe\', \'\xe7\xaa\x84\',\n    \'\xe5\xae\xb9\', \'\xe5\xae\xb0\', \'\xe6\xa1\x88\', \'\xe8\xaf\xb7\', \'\xe6\x9c\x97\', \'\xe8\xaf\xb8\', \'\xe8\xaf\xbb\', \'\xe6\x89\x87\', \'\xe8\xa2\x9c\', \'\xe8\xa2\x96\', \'\xe8\xa2\x8d\', \'\xe8\xa2\xab\', \'\xe7\xa5\xa5\', \'\xe8\xaf\xbe\', \'\xe8\xb0\x81\', \'\xe8\xb0\x83\', \'\xe5\x86\xa4\', \'\xe8\xb0\x85\', \'\xe8\xb0\x88\', \'\xe8\xb0\x8a\',\n    \'\xe5\x89\xa5\', \'\xe6\x81\xb3\', \'\xe5\xb1\x95\', \'\xe5\x89\xa7\', \'\xe5\xb1\x91\', \'\xe5\xbc\xb1\', \'\xe9\x99\xb5\', \'\xe9\x99\xb6\', \'\xe9\x99\xb7\', \'\xe9\x99\xaa\', \'\xe5\xa8\xb1\', \'\xe5\xa8\x98\', \'\xe9\x80\x9a\', \'\xe8\x83\xbd\', \'\xe9\x9a\xbe\', \'\xe9\xa2\x84\', \'\xe6\xa1\x91\', \'\xe7\xbb\xa2\', \'\xe7\xbb\xa3\', \'\xe9\xaa\x8c\',\n    \'\xe7\xbb\xa7\', \'\xe7\x90\x83\', \'\xe7\x90\x86\', \'\xe6\x8d\xa7\', \'\xe5\xa0\xb5\', \'\xe6\x8f\x8f\', \'\xe5\x9f\x9f\', \'\xe6\x8e\xa9\', \'\xe6\x8d\xb7\', \'\xe6\x8e\x92\', \'\xe6\x8e\x89\', \'\xe5\xa0\x86\', \'\xe6\x8e\xa8\', \'\xe6\x8e\x80\', \'\xe6\x8e\x88\', \'\xe6\x95\x99\', \'\xe6\x8e\x8f\', \'\xe6\x8e\xa0\', \'\xe5\x9f\xb9\', \'\xe6\x8e\xa5\',\n    \'\xe6\x8e\xa7\', \'\xe6\x8e\xa2\', \'\xe6\x8d\xae\', \'\xe6\x8e\x98\', \'\xe8\x81\x8c\', \'\xe5\x9f\xba\', \'\xe8\x91\x97\', \'\xe5\x8b\x92\', \'\xe9\xbb\x84\', \'\xe8\x90\x8c\', \'\xe8\x90\x9d\', \'\xe8\x8f\x8c\', \'\xe8\x8f\x9c\', \'\xe8\x90\x84\', \'\xe8\x8f\x8a\', \'\xe8\x90\x8d\', \'\xe8\x8f\xa0\', \'\xe8\x90\xa5\', \'\xe6\xa2\xb0\', \'\xe6\xa2\xa6\',\n    \'\xe6\xa2\xa2\', \'\xe6\xa2\x85\', \'\xe6\xa3\x80\', \'\xe6\xa2\xb3\', \'\xe6\xa2\xaf\', \'\xe6\xa1\xb6\', \'\xe6\x95\x91\', \'\xe5\x89\xaf\', \'\xe7\xa5\xa8\', \'\xe6\x88\x9a\', \'\xe7\x88\xbd\', \'\xe8\x81\x8b\', \'\xe8\xa2\xad\', \'\xe7\x9b\x9b\', \'\xe9\x9b\xaa\', \'\xe8\xbe\x85\', \'\xe8\xbe\x86\', \'\xe8\x99\x9a\', \'\xe9\x9b\x80\', \'\xe5\xa0\x82\',\n    \'\xe5\xb8\xb8\', \'\xe5\x8c\x99\', \'\xe6\x99\xa8\', \'\xe7\x9d\x81\', \'\xe7\x9c\xaf\', \'\xe7\x9c\xbc\', \'\xe6\x82\xac\', \'\xe9\x87\x8e\', \'\xe5\x95\xa6\', \'\xe6\x99\x9a\', \'\xe5\x95\x84\', \'\xe8\xb7\x9d\', \'\xe8\xb7\x83\', \'\xe7\x95\xa5\', \'\xe8\x9b\x87\', \'\xe7\xb4\xaf\', \'\xe5\x94\xb1\', \'\xe6\x82\xa3\', \'\xe5\x94\xaf\', \'\xe5\xb4\x96\',\n    \'\xe5\xb4\xad\', \'\xe5\xb4\x87\', \'\xe5\x9c\x88\', \'\xe9\x93\x9c\', \'\xe9\x93\xb2\', \'\xe9\x93\xb6\', \'\xe7\x94\x9c\', \'\xe6\xa2\xa8\', \'\xe7\x8a\x81\', \'\xe7\xa7\xbb\', \'\xe7\xac\xa8\', \'\xe7\xac\xbc\', \'\xe7\xac\x9b\', \'\xe7\xac\xa6\', \'\xe7\xac\xac\', \'\xe6\x95\x8f\', \'\xe5\x81\x9a\', \'\xe8\xa2\x8b\', \'\xe6\x82\xa0\', \'\xe5\x81\xbf\',\n    \'\xe5\x81\xb6\', \'\xe5\x81\xb7\', \'\xe6\x82\xa8\', \'\xe5\x94\xae\', \'\xe5\x81\x9c\', \'\xe5\x81\x8f\', \'\xe5\x81\x87\', \'\xe5\xbe\x97\', \'\xe8\xa1\x94\', \'\xe7\x9b\x98\', \'\xe8\x88\xb9\', \'\xe6\x96\x9c\', \'\xe7\x9b\x92\', \'\xe9\xb8\xbd\', \'\xe6\x82\x89\', \'\xe6\xac\xb2\', \'\xe5\xbd\xa9\', \'\xe9\xa2\x86\', \'\xe8\x84\x9a\', \'\xe8\x84\x96\',\n    \'\xe8\x84\xb8\', \'\xe8\x84\xb1\', \'\xe8\xb1\xa1\', \'\xe5\xa4\x9f\', \'\xe7\x8c\x9c\', \'\xe7\x8c\xaa\', \'\xe7\x8c\x8e\', \'\xe7\x8c\xab\', \'\xe7\x8c\x9b\', \'\xe9\xa6\x85\', \'\xe9\xa6\x86\', \'\xe5\x87\x91\', \'\xe5\x87\x8f\', \'\xe6\xaf\xab\', \'\xe9\xba\xbb\', \'\xe7\x97\x92\', \'\xe7\x97\x95\', \'\xe5\xbb\x8a\', \'\xe5\xba\xb7\', \'\xe5\xba\xb8\',\n    \'\xe9\xb9\xbf\', \'\xe7\x9b\x97\', \'\xe7\xab\xa0\', \'\xe7\xab\x9f\', \'\xe5\x95\x86\', \'\xe6\x97\x8f\', \'\xe6\x97\x8b\', \'\xe6\x9c\x9b\', \'\xe7\x8e\x87\', \'\xe7\x9d\x80\', \'\xe7\x9b\x96\', \'\xe7\xb2\x98\', \'\xe7\xb2\x97\', \'\xe7\xb2\x92\', \'\xe6\x96\xad\', \'\xe5\x89\xaa\', \'\xe5\x85\xbd\', \'\xe6\xb8\x85\', \'\xe6\xb7\xbb\', \'\xe6\xb7\x8b\',\n    \'\xe6\xb7\xb9\', \'\xe6\xb8\xa0\', \'\xe6\xb8\x90\', \'\xe6\xb7\xb7\', \'\xe6\xb8\x94\', \'\xe6\xb7\x98\', \'\xe6\xb6\xb2\', \'\xe6\xb7\xa1\', \'\xe6\xb7\xb1\', \'\xe5\xa9\x86\', \'\xe6\xa2\x81\', \'\xe6\xb8\x97\', \'\xe6\x83\x85\', \'\xe6\x83\x9c\', \'\xe6\x83\xad\', \'\xe6\x82\xbc\', \'\xe6\x83\xa7\', \'\xe6\x83\x95\', \'\xe6\x83\x8a\', \'\xe6\x83\xa8\',\n    \'\xe6\x83\xaf\', \'\xe5\xaf\x87\', \'\xe5\xaf\x84\', \'\xe5\xae\xbf\', \'\xe7\xaa\x91\', \'\xe5\xaf\x86\', \'\xe8\xb0\x8b\', \'\xe8\xb0\x8e\', \'\xe7\xa5\xb8\', \'\xe8\xb0\x9c\', \'\xe9\x80\xae\', \'\xe6\x95\xa2\', \'\xe5\xb1\xa0\', \'\xe5\xbc\xb9\', \'\xe9\x9a\x8f\', \'\xe8\x9b\x8b\', \'\xe9\x9a\x86\', \'\xe9\x9a\x90\', \'\xe5\xa9\x9a\', \'\xe5\xa9\xb6\',\n    \'\xe9\xa2\x88\', \'\xe7\xbb\xa9\', \'\xe7\xbb\xaa\', \'\xe7\xbb\xad\', \'\xe9\xaa\x91\', \'\xe7\xbb\xb3\', \'\xe7\xbb\xb4\', \'\xe7\xbb\xb5\', \'\xe7\xbb\xb8\', \'\xe7\xbb\xbf\', \'\xe7\x90\xb4\', \'\xe6\x96\x91\', \'\xe6\x9b\xbf\', \'\xe6\xac\xbe\', \'\xe5\xa0\xaa\', \'\xe6\x90\xad\', \'\xe5\xa1\x94\', \'\xe8\xb6\x8a\', \'\xe8\xb6\x81\', \'\xe8\xb6\x8b\',\n    \'\xe8\xb6\x85\', \'\xe6\x8f\x90\', \'\xe5\xa0\xa4\', \'\xe5\x8d\x9a\', \'\xe6\x8f\xad\', \'\xe5\x96\x9c\', \'\xe6\x8f\x92\', \'\xe6\x8f\xaa\', \'\xe6\x90\x9c\', \'\xe7\x85\xae\', \'\xe6\x8f\xb4\', \'\xe8\xa3\x81\', \'\xe6\x90\x81\', \'\xe6\x90\x82\', \'\xe6\x90\x85\', \'\xe6\x8f\xa1\', \'\xe6\x8f\x89\', \'\xe6\x96\xaf\', \'\xe6\x9c\x9f\', \'\xe6\xac\xba\',\n    \'\xe8\x81\x94\', \'\xe6\x95\xa3\', \'\xe6\x83\xb9\', \'\xe8\x91\xac\', \'\xe8\x91\x9b\', \'\xe8\x91\xa3\', \'\xe8\x91\xa1\', \'\xe6\x95\xac\', \'\xe8\x91\xb1\', \'\xe8\x90\xbd\', \'\xe6\x9c\x9d\', \'\xe8\xbe\x9c\', \'\xe8\x91\xb5\', \'\xe6\xa3\x92\', \'\xe6\xa3\x8b\', \'\xe6\xa4\x8d\', \'\xe6\xa3\xae\', \'\xe6\xa4\x85\', \'\xe6\xa4\x92\', \'\xe6\xa3\xb5\',\n    \'\xe6\xa3\x8d\', \'\xe6\xa3\x89\', \'\xe6\xa3\x9a\', \'\xe6\xa3\x95\', \'\xe6\x83\xa0\', \'\xe6\x83\x91\', \'\xe9\x80\xbc\', \'\xe5\x8e\xa8\', \'\xe5\x8e\xa6\', \'\xe7\xa1\xac\', \'\xe7\xa1\xae\', \'\xe9\x9b\x81\', \'\xe6\xae\x96\', \'\xe8\xa3\x82\', \'\xe9\x9b\x84\', \'\xe6\x9a\x82\', \'\xe9\x9b\x85\', \'\xe8\xbe\x88\', \'\xe6\x82\xb2\', \'\xe7\xb4\xab\',\n    \'\xe8\xbe\x89\', \'\xe6\x95\x9e\', \'\xe8\xb5\x8f\', \'\xe6\x8e\x8c\', \'\xe6\x99\xb4\', \'\xe6\x9a\x91\', \'\xe6\x9c\x80\', \'\xe9\x87\x8f\', \'\xe5\x96\xb7\', \'\xe6\x99\xb6\', \'\xe5\x96\x87\', \'\xe9\x81\x87\', \'\xe5\x96\x8a\', \'\xe6\x99\xaf\', \'\xe8\xb7\xb5\', \'\xe8\xb7\x8c\', \'\xe8\xb7\x91\', \'\xe9\x81\x97\', \'\xe8\x9b\x99\', \'\xe8\x9b\x9b\',\n    \'\xe8\x9c\x93\', \'\xe5\x96\x9d\', \'\xe5\x96\x82\', \'\xe5\x96\x98\', \'\xe5\x96\x89\', \'\xe5\xb9\x85\', \'\xe5\xb8\xbd\', \'\xe8\xb5\x8c\', \'\xe8\xb5\x94\', \'\xe9\xbb\x91\', \'\xe9\x93\xb8\', \'\xe9\x93\xba\', \'\xe9\x93\xbe\', \'\xe9\x94\x80\', \'\xe9\x94\x81\', \'\xe9\x94\x84\', \'\xe9\x94\x85\', \'\xe9\x94\x88\', \'\xe9\x94\x8b\', \'\xe9\x94\x90\',\n    \'\xe7\x9f\xad\', \'\xe6\x99\xba\', \'\xe6\xaf\xaf\', \'\xe9\xb9\x85\', \'\xe5\x89\xa9\', \'\xe7\xa8\x8d\', \'\xe7\xa8\x8b\', \'\xe7\xa8\x80\', \'\xe7\xa8\x8e\', \'\xe7\xad\x90\', \'\xe7\xad\x89\', \'\xe7\xad\x91\', \'\xe7\xad\x96\', \'\xe7\xad\x9b\', \'\xe7\xad\x92\', \'\xe7\xad\x94\', \'\xe7\xad\x8b\', \'\xe7\xad\x9d\', \'\xe5\x82\xb2\', \'\xe5\x82\x85\',\n    \'\xe7\x89\x8c\', \'\xe5\xa0\xa1\', \'\xe9\x9b\x86\', \'\xe7\x84\xa6\', \'\xe5\x82\x8d\', \'\xe5\x82\xa8\', \'\xe5\xa5\xa5\', \'\xe8\xa1\x97\', \'\xe6\x83\xa9\', \'\xe5\xbe\xa1\', \'\xe5\xbe\xaa\', \'\xe8\x89\x87\', \'\xe8\x88\x92\', \'\xe7\x95\xaa\', \'\xe9\x87\x8a\', \'\xe7\xa6\xbd\', \'\xe8\x85\x8a\', \'\xe8\x84\xbe\', \'\xe8\x85\x94\', \'\xe9\xb2\x81\',\n    \'\xe7\x8c\xbe\', \'\xe7\x8c\xb4\', \'\xe7\x84\xb6\', \'\xe9\xa6\x8b\', \'\xe8\xa3\x85\', \'\xe8\x9b\xae\', \'\xe5\xb0\xb1\', \'\xe7\x97\x9b\', \'\xe7\xab\xa5\', \'\xe9\x98\x94\', \'\xe5\x96\x84\', \'\xe7\xbe\xa1\', \'\xe6\x99\xae\', \'\xe7\xb2\xaa\', \'\xe5\xb0\x8a\', \'\xe9\x81\x93\', \'\xe6\x9b\xbe\', \'\xe7\x84\xb0\', \'\xe6\xb8\xaf\', \'\xe6\xb9\x96\',\n    \'\xe6\xb8\xa3\', \'\xe6\xb9\xbf\', \'\xe6\xb8\xa9\', \'\xe6\xb8\xb4\', \'\xe6\xbb\x91\', \'\xe6\xb9\xbe\', \'\xe6\xb8\xa1\', \'\xe6\xb8\xb8\', \'\xe6\xbb\x8b\', \'\xe6\xba\x89\', \'\xe6\x84\xa4\', \'\xe6\x85\x8c\', \'\xe6\x83\xb0\', \'\xe6\x84\xa7\', \'\xe6\x84\x89\', \'\xe6\x85\xa8\', \'\xe5\x89\xb2\', \'\xe5\xaf\x92\', \'\xe5\xaf\x8c\', \'\xe7\xaa\x9c\',\n    \'\xe7\xaa\x9d\', \'\xe7\xaa\x97\', \'\xe9\x81\x8d\', \'\xe8\xa3\x95\', \'\xe8\xa3\xa4\', \'\xe8\xa3\x99\', \'\xe8\xb0\xa2\', \'\xe8\xb0\xa3\', \'\xe8\xb0\xa6\', \'\xe5\xb1\x9e\', \'\xe5\xb1\xa1\', \'\xe5\xbc\xba\', \'\xe7\xb2\xa5\', \'\xe7\x96\x8f\', \'\xe9\x9a\x94\', \'\xe9\x9a\x99\', \'\xe7\xb5\xae\', \'\xe5\xab\x82\', \'\xe7\x99\xbb\', \'\xe7\xbc\x8e\',\n    \'\xe7\xbc\x93\', \'\xe7\xbc\x96\', \'\xe9\xaa\x97\', \'\xe7\xbc\x98\', \'\xe7\x91\x9e\', \'\xe9\xad\x82\', \'\xe8\x82\x86\', \'\xe6\x91\x84\', \'\xe6\x91\xb8\', \'\xe5\xa1\xab\', \'\xe6\x90\x8f\', \'\xe5\xa1\x8c\', \'\xe9\xbc\x93\', \'\xe6\x91\x86\', \'\xe6\x90\xba\', \'\xe6\x90\xac\', \'\xe6\x91\x87\', \'\xe6\x90\x9e\', \'\xe5\xa1\x98\', \'\xe6\x91\x8a\',\n    \'\xe8\x92\x9c\', \'\xe5\x8b\xa4\', \'\xe9\xb9\x8a\', \'\xe8\x93\x9d\', \'\xe5\xa2\x93\', \'\xe5\xb9\x95\', \'\xe8\x93\xac\', \'\xe8\x93\x84\', \'\xe8\x92\x99\', \'\xe8\x92\xb8\', \'\xe7\x8c\xae\', \'\xe7\xa6\x81\', \'\xe6\xa5\x9a\', \'\xe6\x83\xb3\', \'\xe6\xa7\x90\', \'\xe6\xa6\x86\', \'\xe6\xa5\xbc\', \'\xe6\xa6\x82\', \'\xe8\xb5\x96\', \'\xe9\x85\xac\',\n    \'\xe6\x84\x9f\', \'\xe7\xa2\x8d\', \'\xe7\xa2\x91\', \'\xe7\xa2\x8e\', \'\xe7\xa2\xb0\', \'\xe7\xa2\x97\', \'\xe7\xa2\x8c\', \'\xe9\x9b\xb7\', \'\xe9\x9b\xb6\', \'\xe9\x9b\xbe\', \'\xe9\x9b\xb9\', \'\xe8\xbe\x93\', \'\xe7\x9d\xa3\', \'\xe9\xbe\x84\', \'\xe9\x89\xb4\', \'\xe7\x9d\x9b\', \'\xe7\x9d\xa1\', \'\xe7\x9d\xac\', \'\xe9\x84\x99\', \'\xe6\x84\x9a\',\n    \'\xe6\x9a\x96\', \'\xe7\x9b\x9f\', \'\xe6\xad\x87\', \'\xe6\x9a\x97\', \'\xe7\x85\xa7\', \'\xe8\xb7\xa8\', \'\xe8\xb7\xb3\', \'\xe8\xb7\xaa\', \'\xe8\xb7\xaf\', \'\xe8\xb7\x9f\', \'\xe9\x81\xa3\', \'\xe8\x9b\xbe\', \'\xe8\x9c\x82\', \'\xe5\x97\x93\', \'\xe7\xbd\xae\', \'\xe7\xbd\xaa\', \'\xe7\xbd\xa9\', \'\xe9\x94\x99\', \'\xe9\x94\xa1\', \'\xe9\x94\xa3\',\n    \'\xe9\x94\xa4\', \'\xe9\x94\xa6\', \'\xe9\x94\xae\', \'\xe9\x94\xaf\', \'\xe7\x9f\xae\', \'\xe8\xbe\x9e\', \'\xe7\xa8\xa0\', \'\xe6\x84\x81\', \'\xe7\xad\xb9\', \'\xe7\xad\xbe\', \'\xe7\xae\x80\', \'\xe6\xaf\x81\', \'\xe8\x88\x85\', \'\xe9\xbc\xa0\', \'\xe5\x82\xac\', \'\xe5\x82\xbb\', \'\xe5\x83\x8f\', \'\xe8\xba\xb2\', \'\xe5\xbe\xae\', \'\xe6\x84\x88\',\n    \'\xe9\x81\xa5\', \'\xe8\x85\xb0\', \'\xe8\x85\xa5\', \'\xe8\x85\xb9\', \'\xe8\x85\xbe\', \'\xe8\x85\xbf\', \'\xe8\xa7\xa6\', \'\xe8\xa7\xa3\', \'\xe9\x85\xb1\', \'\xe7\x97\xb0\', \'\xe5\xbb\x89\', \'\xe6\x96\xb0\', \'\xe9\x9f\xb5\', \'\xe6\x84\x8f\', \'\xe7\xb2\xae\', \'\xe6\x95\xb0\', \'\xe7\x85\x8e\', \'\xe5\xa1\x91\', \'\xe6\x85\x88\', \'\xe7\x85\xa4\',\n    \'\xe7\x85\x8c\', \'\xe6\xbb\xa1\', \'\xe6\xbc\xa0\', \'\xe6\xba\x90\', \'\xe6\xbb\xa4\', \'\xe6\xbb\xa5\', \'\xe6\xbb\x94\', \'\xe6\xba\xaa\', \'\xe6\xba\x9c\', \'\xe6\xbb\x9a\', \'\xe6\xbb\xa8\', \'\xe7\xb2\xb1\', \'\xe6\xbb\xa9\', \'\xe6\x85\x8e\', \'\xe8\xaa\x89\', \'\xe5\xa1\x9e\', \'\xe8\xb0\xa8\', \'\xe7\xa6\x8f\', \'\xe7\xbe\xa4\', \'\xe6\xae\xbf\',\n    \'\xe8\xbe\x9f\', \'\xe9\x9a\x9c\', \'\xe5\xab\x8c\', \'\xe5\xab\x81\', \'\xe5\x8f\xa0\', \'\xe7\xbc\x9d\', \'\xe7\xbc\xa0\', \'\xe9\x9d\x99\', \'\xe7\xa2\xa7\', \'\xe7\x92\x83\', \'\xe5\xa2\x99\', \'\xe6\x92\x87\', \'\xe5\x98\x89\', \'\xe6\x91\xa7\', \'\xe6\x88\xaa\', \'\xe8\xaa\x93\', \'\xe5\xa2\x83\', \'\xe6\x91\x98\', \'\xe6\x91\x94\', \'\xe8\x81\x9a\',\n    \'\xe8\x94\xbd\', \'\xe6\x85\x95\', \'\xe6\x9a\xae\', \'\xe8\x94\x91\', \'\xe6\xa8\xa1\', \'\xe6\xa6\xb4\', \'\xe6\xa6\x9c\', \'\xe6\xa6\xa8\', \'\xe6\xad\x8c\', \'\xe9\x81\xad\', \'\xe9\x85\xb7\', \'\xe9\x85\xbf\', \'\xe9\x85\xb8\', \'\xe7\xa3\x81\', \'\xe6\x84\xbf\', \'\xe9\x9c\x80\', \'\xe5\xbc\x8a\', \'\xe8\xa3\xb3\', \'\xe9\xa2\x97\', \'\xe5\x97\xbd\',\n    \'\xe8\x9c\xbb\', \'\xe8\x9c\xa1\', \'\xe8\x9d\x87\', \'\xe8\x9c\x98\', \'\xe8\xb5\x9a\', \'\xe9\x94\xb9\', \'\xe9\x94\xbb\', \'\xe8\x88\x9e\', \'\xe7\xa8\xb3\', \'\xe7\xae\x97\', \'\xe7\xae\xa9\', \'\xe7\xae\xa1\', \'\xe5\x83\x9a\', \'\xe9\xbc\xbb\', \'\xe9\xad\x84\', \'\xe8\xb2\x8c\', \'\xe8\x86\x9c\', \'\xe8\x86\x8a\', \'\xe8\x86\x80\', \'\xe9\xb2\x9c\',\n    \'\xe7\x96\x91\', \'\xe9\xa6\x92\', \'\xe8\xa3\xb9\', \'\xe6\x95\xb2\', \'\xe8\xb1\xaa\', \'\xe8\x86\x8f\', \'\xe9\x81\xae\', \'\xe8\x85\x90\', \'\xe7\x98\xa6\', \'\xe8\xbe\xa3\', \'\xe7\xab\xad\', \'\xe7\xab\xaf\', \'\xe6\x97\x97\', \'\xe7\xb2\xbe\', \'\xe6\xad\x89\', \'\xe7\x86\x84\', \'\xe7\x86\x94\', \'\xe6\xbc\x86\', \'\xe6\xbc\x82\', \'\xe6\xbc\xab\',\n    \'\xe6\xbb\xb4\', \'\xe6\xbc\x94\', \'\xe6\xbc\x8f\', \'\xe6\x85\xa2\', \'\xe5\xaf\xa8\', \'\xe8\xb5\x9b\', \'\xe5\xaf\x9f\', \'\xe8\x9c\x9c\', \'\xe8\xb0\xb1\', \'\xe5\xab\xa9\', \'\xe7\xbf\xa0\', \'\xe7\x86\x8a\', \'\xe5\x87\xb3\', \'\xe9\xaa\xa1\', \'\xe7\xbc\xa9\', \'\xe6\x85\xa7\', \'\xe6\x92\x95\', \'\xe6\x92\x92\', \'\xe8\xb6\xa3\', \'\xe8\xb6\x9f\',\n    \'\xe6\x92\x91\', \'\xe6\x92\xad\', \'\xe6\x92\x9e\', \'\xe6\x92\xa4\', \'\xe5\xa2\x9e\', \'\xe8\x81\xaa\', \'\xe9\x9e\x8b\', \'\xe8\x95\x89\', \'\xe8\x94\xac\', \'\xe6\xa8\xaa\', \'\xe6\xa7\xbd\', \'\xe6\xa8\xb1\', \'\xe6\xa9\xa1\', \'\xe9\xa3\x98\', \'\xe9\x86\x8b\', \'\xe9\x86\x89\', \'\xe9\x9c\x87\', \'\xe9\x9c\x89\', \'\xe7\x9e\x92\', \'\xe9\xa2\x98\',\n    \'\xe6\x9a\xb4\', \'\xe7\x9e\x8e\', \'\xe5\xbd\xb1\', \'\xe8\xb8\xa2\', \'\xe8\xb8\x8f\', \'\xe8\xb8\xa9\', \'\xe8\xb8\xaa\', \'\xe8\x9d\xb6\', \'\xe8\x9d\xb4\', \'\xe5\x98\xb1\', \'\xe5\xa2\xa8\', \'\xe9\x95\x87\', \'\xe9\x9d\xa0\', \'\xe7\xa8\xbb\', \'\xe9\xbb\x8e\', \'\xe7\xa8\xbf\', \'\xe7\xa8\xbc\', \'\xe7\xae\xb1\', \'\xe7\xae\xad\', \'\xe7\xaf\x87\',\n    \'\xe5\x83\xb5\', \'\xe8\xba\xba\', \'\xe5\x83\xbb\', \'\xe5\xbe\xb7\', \'\xe8\x89\x98\', \'\xe8\x86\x9d\', \'\xe8\x86\x9b\', \'\xe7\x86\x9f\', \'\xe6\x91\xa9\', \'\xe9\xa2\x9c\', \'\xe6\xaf\x85\', \'\xe7\xb3\x8a\', \'\xe9\x81\xb5\', \'\xe6\xbd\x9c\', \'\xe6\xbd\xae\', \'\xe6\x87\x82\', \'\xe9\xa2\x9d\', \'\xe6\x85\xb0\', \'\xe5\x8a\x88\', \'\xe6\x93\x8d\',\n    \'\xe7\x87\x95\', \'\xe8\x96\xaf\', \'\xe8\x96\xaa\', \'\xe8\x96\x84\', \'\xe9\xa2\xa0\', \'\xe6\xa9\x98\', \'\xe6\x95\xb4\', \'\xe8\x9e\x8d\', \'\xe9\x86\x92\', \'\xe9\xa4\x90\', \'\xe5\x98\xb4\', \'\xe8\xb9\x84\', \'\xe5\x99\xa8\', \'\xe8\xb5\xa0\', \'\xe9\xbb\x98\', \'\xe9\x95\x9c\', \'\xe8\xb5\x9e\', \'\xe7\xaf\xae\', \'\xe9\x82\x80\', \'\xe8\xa1\xa1\',\n    \'\xe8\x86\xa8\', \'\xe9\x9b\x95\', \'\xe7\xa3\xa8\', \'\xe5\x87\x9d\', \'\xe8\xbe\xa8\', \'\xe8\xbe\xa9\', \'\xe7\xb3\x96\', \'\xe7\xb3\x95\', \'\xe7\x87\x83\', \'\xe6\xbe\xa1\', \'\xe6\xbf\x80\', \'\xe6\x87\x92\', \'\xe5\xa3\x81\', \'\xe9\x81\xbf\', \'\xe7\xbc\xb4\', \'\xe6\x88\xb4\', \'\xe6\x93\xa6\', \'\xe9\x9e\xa0\', \'\xe8\x97\x8f\', \'\xe9\x9c\x9c\',\n    \'\xe9\x9c\x9e\', \'\xe7\x9e\xa7\', \'\xe8\xb9\x88\', \'\xe8\x9e\xba\', \'\xe7\xa9\x97\', \'\xe7\xb9\x81\', \'\xe8\xbe\xab\', \'\xe8\xb5\xa2\', \'\xe7\xb3\x9f\', \'\xe7\xb3\xa0\', \'\xe7\x87\xa5\', \'\xe8\x87\x82\', \'\xe7\xbf\xbc\', \'\xe9\xaa\xa4\', \'\xe9\x9e\xad\', \'\xe8\xa6\x86\', \'\xe8\xb9\xa6\', \'\xe9\x95\xb0\', \'\xe7\xbf\xbb\', \'\xe9\xb9\xb0\',\n    \'\xe8\xad\xa6\', \'\xe6\x94\x80\', \'\xe8\xb9\xb2\', \'\xe9\xa2\xa4\', \'\xe7\x93\xa3\', \'\xe7\x88\x86\', \'\xe7\x96\x86\', \'\xe5\xa3\xa4\', \'\xe8\x80\x80\', \'\xe8\xba\x81\', \'\xe5\x9a\xbc\', \'\xe5\x9a\xb7\', \'\xe7\xb1\x8d\', \'\xe9\xad\x94\', \'\xe7\x81\x8c\', \'\xe8\xa0\xa2\', \'\xe9\x9c\xb8\', \'\xe9\x9c\xb2\', \'\xe5\x9b\x8a\', \'\xe7\xbd\x90\',\n    \'\xe5\x8c\x95\', \'\xe5\x88\x81\', \'\xe4\xb8\x90\', \'\xe6\xad\xb9\', \'\xe6\x88\x88\', \'\xe5\xa4\xad\', \'\xe4\xbb\x91\', \'\xe8\xae\xa5\', \'\xe5\x86\x97\', \'\xe9\x82\x93\', \'\xe8\x89\xbe\', \'\xe5\xa4\xaf\', \'\xe5\x87\xb8\', \'\xe5\x8d\xa2\', \'\xe5\x8f\xad\', \'\xe5\x8f\xbd\', \'\xe7\x9a\xbf\', \'\xe5\x87\xb9\', \'\xe5\x9b\x9a\', \'\xe7\x9f\xa2\',\n    \'\xe4\xb9\x8d\', \'\xe5\xb0\x94\', \'\xe5\x86\xaf\', \'\xe7\x8e\x84\', \'\xe9\x82\xa6\', \'\xe8\xbf\x82\', \'\xe9\x82\xa2\', \'\xe8\x8a\x8b\', \'\xe8\x8a\x8d\', \'\xe5\x90\x8f\', \'\xe5\xa4\xb7\', \'\xe5\x90\x81\', \'\xe5\x90\x95\', \'\xe5\x90\x86\', \'\xe5\xb1\xb9\', \'\xe5\xbb\xb7\', \'\xe8\xbf\x84\', \'\xe8\x87\xbc\', \'\xe4\xbb\xb2\', \'\xe4\xbc\xa6\',\n    \'\xe4\xbc\x8a\', \'\xe8\x82\x8b\', \'\xe6\x97\xad\', \'\xe5\x8c\x88\', \'\xe5\x87\xab\', \'\xe5\xa6\x86\', \'\xe4\xba\xa5\', \'\xe6\xb1\x9b\', \'\xe8\xae\xb3\', \'\xe8\xae\xb6\', \'\xe8\xae\xb9\', \'\xe8\xae\xbc\', \'\xe8\xaf\x80\', \'\xe5\xbc\x9b\', \'\xe9\x98\xb1\', \'\xe9\xa9\xae\', \'\xe9\xa9\xaf\', \'\xe7\xba\xab\', \'\xe7\x8e\x96\', \'\xe7\x8e\x9b\',\n    \'\xe9\x9f\xa7\', \'\xe6\x8a\xa0\', \'\xe6\x89\xbc\', \'\xe6\xb1\x9e\', \'\xe6\x89\xb3\', \'\xe6\x8a\xa1\', \'\xe5\x9d\x8e\', \'\xe5\x9d\x9e\', \'\xe6\x8a\x91\', \'\xe6\x8b\x9f\', \'\xe6\x8a\x92\', \'\xe8\x8a\x99\', \'\xe8\x8a\x9c\', \'\xe8\x8b\x87\', \'\xe8\x8a\xa5\', \'\xe8\x8a\xaf\', \'\xe8\x8a\xad\', \'\xe6\x9d\x96\', \'\xe6\x9d\x89\', \'\xe5\xb7\xab\',\n    \'\xe6\x9d\x88\', \'\xe7\x94\xab\', \'\xe5\x8c\xa3\', \'\xe8\xbd\xa9\', \'\xe5\x8d\xa4\', \'\xe8\x82\x96\', \'\xe5\x90\xb1\', \'\xe5\x90\xa0\', \'\xe5\x91\x95\', \'\xe5\x91\x90\', \'\xe5\x90\x9f\', \'\xe5\x91\x9b\', \'\xe5\x90\xbb\', \'\xe5\x90\xad\', \'\xe9\x82\x91\', \'\xe5\x9b\xa4\', \'\xe5\x90\xae\', \'\xe5\xb2\x96\', \'\xe7\x89\xa1\', \'\xe4\xbd\x91\',\n    \'\xe4\xbd\x83\', \'\xe4\xbc\xba\', \'\xe5\x9b\xb1\', \'\xe8\x82\x9b\', \'\xe8\x82\x98\', \'\xe7\x94\xb8\', \'\xe7\x8b\x88\', \'\xe9\xb8\xa0\', \'\xe5\xbd\xa4\', \'\xe7\x81\xb8\', \'\xe5\x88\xa8\', \'\xe5\xba\x87\', \'\xe5\x90\x9d\', \'\xe5\xba\x90\', \'\xe9\x97\xb0\', \'\xe5\x85\x91\', \'\xe7\x81\xbc\', \'\xe6\xb2\x90\', \'\xe6\xb2\x9b\', \'\xe6\xb1\xb0\',\n    \'\xe6\xb2\xa5\', \'\xe6\xb2\xa6\', \'\xe6\xb1\xb9\', \'\xe6\xb2\xa7\', \'\xe6\xb2\xaa\', \'\xe5\xbf\xb1\', \'\xe8\xaf\x85\', \'\xe8\xaf\x88\', \'\xe7\xbd\x95\', \'\xe5\xb1\x81\', \'\xe5\x9d\xa0\', \'\xe5\xa6\x93\', \'\xe5\xa7\x8a\', \'\xe5\xa6\x92\', \'\xe7\xba\xac\', \'\xe7\x8e\xab\', \'\xe5\x8d\xa6\', \'\xe5\x9d\xb7\', \'\xe5\x9d\xaf\', \'\xe6\x8b\x93\',\n    \'\xe5\x9d\xaa\', \'\xe5\x9d\xa4\', \'\xe6\x8b\x84\', \'\xe6\x8b\xa7\', \'\xe6\x8b\x82\', \'\xe6\x8b\x99\', \'\xe6\x8b\x87\', \'\xe6\x8b\x97\', \'\xe8\x8c\x89\', \'\xe6\x98\x94\', \'\xe8\x8b\x9b\', \'\xe8\x8b\xab\', \'\xe8\x8b\x9f\', \'\xe8\x8b\x9e\', \'\xe8\x8c\x81\', \'\xe8\x8b\x94\', \'\xe6\x9e\x89\', \'\xe6\x9e\xa2\', \'\xe6\x9e\x9a\', \'\xe6\x9e\xab\',\n    \'\xe6\x9d\xad\', \'\xe9\x83\x81\', \'\xe7\x9f\xbe\', \'\xe5\xa5\x88\', \'\xe5\xa5\x84\', \'\xe6\xae\xb4\', \'\xe6\xad\xa7\', \'\xe5\x8d\x93\', \'\xe6\x98\x99\', \'\xe5\x93\x8e\', \'\xe5\x92\x95\', \'\xe5\x91\xb5\', \'\xe5\x92\x99\', \'\xe5\x91\xbb\', \'\xe5\x92\x92\', \'\xe5\x92\x86\', \'\xe5\x92\x96\', \'\xe5\xb8\x95\', \'\xe8\xb4\xa6\', \'\xe8\xb4\xac\',\n    \'\xe8\xb4\xae\', \'\xe6\xb0\x9b\', \'\xe7\xa7\x89\', \'\xe5\xb2\xb3\', \'\xe4\xbe\xa0\', \'\xe4\xbe\xa5\', \'\xe4\xbe\xa3\', \'\xe4\xbe\x88\', \'\xe5\x8d\x91\', \'\xe5\x88\xbd\', \'\xe5\x88\xb9\', \'\xe8\x82\xb4\', \'\xe8\xa7\x85\', \'\xe5\xbf\xbf\', \'\xe7\x93\xae\', \'\xe8\x82\xae\', \'\xe8\x82\xaa\', \'\xe7\x8b\x9e\', \'\xe5\xba\x9e\', \'\xe7\x96\x9f\',\n    \'\xe7\x96\x99\', \'\xe7\x96\x9a\', \'\xe5\x8d\x92\', \'\xe6\xb0\x93\', \'\xe7\x82\xac\', \'\xe6\xb2\xbd\', \'\xe6\xb2\xae\', \'\xe6\xb3\xa3\', \'\xe6\xb3\x9e\', \'\xe6\xb3\x8c\', \'\xe6\xb2\xbc\', \'\xe6\x80\x94\', \'\xe6\x80\xaf\', \'\xe5\xae\xa0\', \'\xe5\xae\x9b\', \'\xe8\xa1\xa9\', \'\xe7\xa5\x88\', \'\xe8\xaf\xa1\', \'\xe5\xb8\x9a\', \'\xe5\xb1\x89\',\n    \'\xe5\xbc\xa7\', \'\xe5\xbc\xa5\', \'\xe9\x99\x8b\', \'\xe9\x99\x8c\', \'\xe5\x87\xbd\', \'\xe5\xa7\x86\', \'\xe8\x99\xb1\', \'\xe5\x8f\x81\', \'\xe7\xbb\x85\', \'\xe9\xa9\xb9\', \'\xe7\xbb\x8a\', \'\xe7\xbb\x8e\', \'\xe5\xa5\x91\', \'\xe8\xb4\xb0\', \'\xe7\x8e\xb7\', \'\xe7\x8e\xb2\', \'\xe7\x8f\x8a\', \'\xe6\x8b\xad\', \'\xe6\x8b\xb7\', \'\xe6\x8b\xb1\',\n    \'\xe6\x8c\x9f\', \'\xe5\x9e\xa2\', \'\xe5\x9e\x9b\', \'\xe6\x8b\xaf\', \'\xe8\x8d\x86\', \'\xe8\x8c\xb8\', \'\xe8\x8c\xac\', \'\xe8\x8d\x9a\', \'\xe8\x8c\xb5\', \'\xe8\x8c\xb4\', \'\xe8\x8d\x9e\', \'\xe8\x8d\xa0\', \'\xe8\x8d\xa4\', \'\xe8\x8d\xa7\', \'\xe8\x8d\x94\', \'\xe6\xa0\x88\', \'\xe6\x9f\x91\', \'\xe6\xa0\x85\', \'\xe6\x9f\xa0\', \'\xe6\x9e\xb7\',\n    \'\xe5\x8b\x83\', \'\xe6\x9f\xac\', \'\xe7\xa0\x82\', \'\xe6\xb3\xb5\', \'\xe7\xa0\x9a\', \'\xe9\xb8\xa5\', \'\xe8\xbd\xb4\', \'\xe9\x9f\xad\', \'\xe8\x99\x90\', \'\xe6\x98\xa7\', \'\xe7\x9b\xb9\', \'\xe5\x92\xa7\', \'\xe6\x98\xb5\', \'\xe6\x98\xad\', \'\xe7\x9b\x85\', \'\xe5\x8b\x8b\', \'\xe5\x93\x86\', \'\xe5\x92\xaa\', \'\xe5\x93\x9f\', \'\xe5\xb9\xbd\',\n    \'\xe9\x92\x99\', \'\xe9\x92\x9d\', \'\xe9\x92\xa0\', \'\xe9\x92\xa6\', \'\xe9\x92\xa7\', \'\xe9\x92\xae\', \'\xe6\xaf\xa1\', \'\xe6\xb0\xa2\', \'\xe7\xa7\x95\', \'\xe4\xbf\x8f\', \'\xe4\xbf\x84\', \'\xe4\xbf\x90\', \'\xe4\xbe\xaf\', \'\xe5\xbe\x8a\', \'\xe8\xa1\x8d\', \'\xe8\x83\x9a\', \'\xe8\x83\xa7\', \'\xe8\x83\x8e\', \'\xe7\x8b\xb0\', \'\xe9\xa5\xb5\',\n    \'\xe5\xb3\xa6\', \'\xe5\xa5\x95\', \'\xe5\x92\xa8\', \'\xe9\xa3\x92\', \'\xe9\x97\xba\', \'\xe9\x97\xbd\', \'\xe7\xb1\xbd\', \'\xe5\xa8\x84\', \'\xe7\x83\x81\', \'\xe7\x82\xab\', \'\xe6\xb4\xbc\', \'\xe6\x9f\x92\', \'\xe6\xb6\x8e\', \'\xe6\xb4\x9b\', \'\xe6\x81\x83\', \'\xe6\x81\x8d\', \'\xe6\x81\xac\', \'\xe6\x81\xa4\', \'\xe5\xae\xa6\', \'\xe8\xaf\xab\',\n    \'\xe8\xaf\xac\', \'\xe7\xa5\xa0\', \'\xe8\xaf\xb2\', \'\xe5\xb1\x8f\', \'\xe5\xb1\x8e\', \'\xe9\x80\x8a\', \'\xe9\x99\xa8\', \'\xe5\xa7\x9a\', \'\xe5\xa8\x9c\', \'\xe8\x9a\xa4\', \'\xe9\xaa\x87\', \'\xe8\x80\x98\', \'\xe8\x80\x99\', \'\xe7\xa7\xa6\', \'\xe5\x8c\xbf\', \'\xe5\x9f\x82\', \'\xe6\x8d\x82\', \'\xe6\x8d\x8d\', \'\xe8\xa2\x81\', \'\xe6\x8d\x8c\',\n    \'\xe6\x8c\xab\', \'\xe6\x8c\x9a\', \'\xe6\x8d\xa3\', \'\xe6\x8d\x85\', \'\xe5\x9f\x83\', \'\xe8\x80\xbf\', \'\xe8\x81\x82\', \'\xe8\x8d\xb8\', \'\xe8\x8e\xbd\', \'\xe8\x8e\xb1\', \'\xe8\x8e\x89\', \'\xe8\x8e\xb9\', \'\xe8\x8e\xba\', \'\xe6\xa2\x86\', \'\xe6\xa0\x96\', \'\xe6\xa1\xa6\', \'\xe6\xa0\x93\', \'\xe6\xa1\x85\', \'\xe6\xa1\xa9\', \'\xe8\xb4\xbe\',\n    \'\xe9\x85\x8c\', \'\xe7\xa0\xb8\', \'\xe7\xa0\xb0\', \'\xe7\xa0\xbe\', \'\xe6\xae\x89\', \'\xe9\x80\x9e\', \'\xe5\x93\xae\', \'\xe5\x94\xa0\', \'\xe5\x93\xba\', \'\xe5\x89\x94\', \'\xe8\x9a\x8c\', \'\xe8\x9a\x9c\', \'\xe7\x95\x94\', \'\xe8\x9a\xa3\', \'\xe8\x9a\xaa\', \'\xe8\x9a\x93\', \'\xe5\x93\xa9\', \'\xe5\x9c\x83\', \'\xe9\xb8\xaf\', \'\xe5\x94\x81\',\n    \'\xe5\x93\xbc\', \'\xe5\x94\x86\', \'\xe5\xb3\xad\', \'\xe5\x94\xa7\', \'\xe5\xb3\xbb\', \'\xe8\xb5\x82\', \'\xe8\xb5\x83\', \'\xe9\x92\xbe\', \'\xe9\x93\x86\', \'\xe6\xb0\xa8\', \'\xe7\xa7\xab\', \'\xe7\xac\x86\', \'\xe4\xbf\xba\', \'\xe8\xb5\x81\', \'\xe5\x80\x94\', \'\xe6\xae\xb7\', \'\xe8\x80\xb8\', \'\xe8\x88\x80\', \'\xe8\xb1\xba\', \'\xe8\xb1\xb9\',\n    \'\xe9\xa2\x81\', \'\xe8\x83\xaf\', \'\xe8\x83\xb0\', \'\xe8\x84\x90\', \'\xe8\x84\x93\', \'\xe9\x80\x9b\', \'\xe5\x8d\xbf\', \'\xe9\xb8\xb5\', \'\xe9\xb8\xb3\', \'\xe9\xa6\x81\', \'\xe5\x87\x8c\', \'\xe5\x87\x84\', \'\xe8\xa1\xb7\', \'\xe9\x83\xad\', \'\xe6\x96\x8b\', \'\xe7\x96\xb9\', \'\xe7\xb4\x8a\', \'\xe7\x93\xb7\', \'\xe7\xbe\x94\', \'\xe7\x83\x99\',\n    \'\xe6\xb5\xa6\', \'\xe6\xb6\xa1\', \'\xe6\xb6\xa3\', \'\xe6\xb6\xa4\', \'\xe6\xb6\xa7\', \'\xe6\xb6\x95\', \'\xe6\xb6\xa9\', \'\xe6\x82\x8d\', \'\xe6\x82\xaf\', \'\xe7\xaa\x8d\', \'\xe8\xaf\xba\', \'\xe8\xaf\xbd\', \'\xe8\xa2\x92\', \'\xe8\xb0\x86\', \'\xe7\xa5\x9f\', \'\xe6\x81\x95\', \'\xe5\xa8\xa9\', \'\xe9\xaa\x8f\', \'\xe7\x90\x90\', \'\xe9\xba\xb8\',\n    \'\xe7\x90\x89\', \'\xe7\x90\x85\', \'\xe6\x8e\xaa\', \'\xe6\x8d\xba\', \'\xe6\x8d\xb6\', \'\xe8\xb5\xa6\', \'\xe5\x9f\xa0\', \'\xe6\x8d\xbb\', \'\xe6\x8e\x90\', \'\xe6\x8e\x82\', \'\xe6\x8e\x96\', \'\xe6\x8e\xb7\', \'\xe6\x8e\xb8\', \'\xe6\x8e\xba\', \'\xe5\x8b\x98\', \'\xe8\x81\x8a\', \'\xe5\xa8\xb6\', \'\xe8\x8f\xb1\', \'\xe8\x8f\xb2\', \'\xe8\x90\x8e\',\n    \'\xe8\x8f\xa9\', \'\xe8\x90\xa4\', \'\xe4\xb9\xbe\', \'\xe8\x90\xa7\', \'\xe8\x90\xa8\', \'\xe8\x8f\x87\', \'\xe5\xbd\xac\', \'\xe6\xa2\x97\', \'\xe6\xa2\xa7\', \'\xe6\xa2\xad\', \'\xe6\x9b\xb9\', \'\xe9\x85\x9d\', \'\xe9\x85\x97\', \'\xe5\x8e\xa2\', \'\xe7\xa1\x85\', \'\xe7\xa1\x95\', \'\xe5\xa5\xa2\', \'\xe7\x9b\x94\', \'\xe5\x8c\xbe\', \'\xe9\xa2\x85\',\n    \'\xe5\xbd\xaa\', \'\xe7\x9c\xb6\', \'\xe6\x99\xa4\', \'\xe6\x9b\xbc\', \'\xe6\x99\xa6\', \'\xe5\x86\x95\', \'\xe5\x95\xa1\', \'\xe7\x95\xa6\', \'\xe8\xb6\xbe\', \'\xe5\x95\x83\', \'\xe8\x9b\x86\', \'\xe8\x9a\xaf\', \'\xe8\x9b\x89\', \'\xe8\x9b\x80\', \'\xe5\x94\xac\', \'\xe5\x94\xbe\', \'\xe5\x95\xa4\', \'\xe5\x95\xa5\', \'\xe5\x95\xb8\', \'\xe5\xb4\x8e\',\n    \'\xe9\x80\xbb\', \'\xe5\xb4\x94\', \'\xe5\xb4\xa9\', \'\xe5\xa9\xb4\', \'\xe8\xb5\x8a\', \'\xe9\x93\x90\', \'\xe9\x93\x9b\', \'\xe9\x93\x9d\', \'\xe9\x93\xa1\', \'\xe9\x93\xa3\', \'\xe9\x93\xad\', \'\xe7\x9f\xab\', \'\xe7\xa7\xb8\', \'\xe7\xa7\xbd\', \'\xe7\xac\x99\', \'\xe7\xac\xa4\', \'\xe5\x81\x8e\', \'\xe5\x82\x80\', \'\xe8\xba\xaf\', \'\xe5\x85\x9c\',\n    \'\xe8\xa1\x85\', \'\xe5\xbe\x98\', \'\xe5\xbe\x99\', \'\xe8\x88\xb6\', \'\xe8\x88\xb7\', \'\xe8\x88\xb5\', \'\xe6\x95\x9b\', \'\xe7\xbf\x8e\', \'\xe8\x84\xaf\', \'\xe9\x80\xb8\', \'\xe5\x87\xb0\', \'\xe7\x8c\x96\', \'\xe7\xa5\xad\', \'\xe7\x83\xb9\', \'\xe5\xba\xb6\', \'\xe5\xba\xb5\', \'\xe7\x97\x8a\', \'\xe9\x98\x8e\', \'\xe9\x98\x90\', \'\xe7\x9c\xb7\',\n    \'\xe7\x84\x8a\', \'\xe7\x84\x95\', \'\xe9\xb8\xbf\', \'\xe6\xb6\xaf\', \'\xe6\xb7\x91\', \'\xe6\xb7\x8c\', \'\xe6\xb7\xae\', \'\xe6\xb7\x86\', \'\xe6\xb8\x8a\', \'\xe6\xb7\xab\', \'\xe6\xb7\xb3\', \'\xe6\xb7\xa4\', \'\xe6\xb7\x80\', \'\xe6\xb6\xae\', \'\xe6\xb6\xb5\', \'\xe6\x83\xa6\', \'\xe6\x82\xb4\', \'\xe6\x83\x8b\', \'\xe5\xaf\x82\', \'\xe7\xaa\x92\',\n    \'\xe8\xb0\x8d\', \'\xe8\xb0\x90\', \'\xe8\xa3\x86\', \'\xe8\xa2\xb1\', \'\xe7\xa5\xb7\', \'\xe8\xb0\x92\', \'\xe8\xb0\x93\', \'\xe8\xb0\x9a\', \'\xe5\xb0\x89\', \'\xe5\xa0\x95\', \'\xe9\x9a\x85\', \'\xe5\xa9\x89\', \'\xe9\xa2\x87\', \'\xe7\xbb\xb0\', \'\xe7\xbb\xb7\', \'\xe7\xbb\xbc\', \'\xe7\xbb\xbd\', \'\xe7\xbc\x80\', \'\xe5\xb7\xa2\', \'\xe7\x90\xb3\',\n    \'\xe7\x90\xa2\', \'\xe7\x90\xbc\', \'\xe6\x8f\x8d\', \'\xe5\xa0\xb0\', \'\xe6\x8f\xa9\', \'\xe6\x8f\xbd\', \'\xe6\x8f\x96\', \'\xe5\xbd\xad\', \'\xe6\x8f\xa3\', \'\xe6\x90\x80\', \'\xe6\x90\x93\', \'\xe5\xa3\xb9\', \'\xe6\x90\x94\', \'\xe8\x91\xab\', \'\xe5\x8b\x9f\', \'\xe8\x92\x8b\', \'\xe8\x92\x82\', \'\xe9\x9f\xa9\', \'\xe6\xa3\xb1\', \'\xe6\xa4\xb0\',\n    \'\xe7\x84\x9a\', \'\xe6\xa4\x8e\', \'\xe6\xa3\xba\', \'\xe6\xa6\x94\', \'\xe6\xa4\xad\', \'\xe7\xb2\x9f\', \'\xe6\xa3\x98\', \'\xe9\x85\xa3\', \'\xe9\x85\xa5\', \'\xe7\xa1\x9d\', \'\xe7\xa1\xab\', \'\xe9\xa2\x8a\', \'\xe9\x9b\xb3\', \'\xe7\xbf\x98\', \'\xe5\x87\xbf\', \'\xe6\xa3\xa0\', \'\xe6\x99\xb0\', \'\xe9\xbc\x8e\', \'\xe5\x96\xb3\', \'\xe9\x81\x8f\',\n    \'\xe6\x99\xbe\', \'\xe7\x95\xb4\', \'\xe8\xb7\x8b\', \'\xe8\xb7\x9b\', \'\xe8\x9b\x94\', \'\xe8\x9c\x92\', \'\xe8\x9b\xa4\', \'\xe9\xb9\x83\', \'\xe5\x96\xbb\', \'\xe5\x95\xbc\', \'\xe5\x96\xa7\', \'\xe5\xb5\x8c\', \'\xe8\xb5\x8b\', \'\xe8\xb5\x8e\', \'\xe8\xb5\x90\', \'\xe9\x94\x89\', \'\xe9\x94\x8c\', \'\xe7\x94\xa5\', \'\xe6\x8e\xb0\', \'\xe6\xb0\xae\',\n    \'\xe6\xb0\xaf\', \'\xe9\xbb\x8d\', \'\xe7\xad\x8f\', \'\xe7\x89\x8d\', \'\xe7\xb2\xa4\', \'\xe9\x80\xbe\', \'\xe8\x85\x8c\', \'\xe8\x85\x8b\', \'\xe8\x85\x95\', \'\xe7\x8c\xa9\', \'\xe7\x8c\xac\', \'\xe6\x83\xab\', \'\xe6\x95\xa6\', \'\xe7\x97\x98\', \'\xe7\x97\xa2\', \'\xe7\x97\xaa\', \'\xe7\xab\xa3\', \'\xe7\xbf\x94\', \'\xe5\xa5\xa0\', \'\xe9\x81\x82\',\n    \'\xe7\x84\x99\', \'\xe6\xbb\x9e\', \'\xe6\xb9\x98\', \'\xe6\xb8\xa4\', \'\xe6\xb8\xba\', \'\xe6\xba\x83\', \'\xe6\xba\x85\', \'\xe6\xb9\x83\', \'\xe6\x84\x95\', \'\xe6\x83\xb6\', \'\xe5\xaf\x93\', \'\xe7\xaa\x96\', \'\xe7\xaa\x98\', \'\xe9\x9b\x87\', \'\xe8\xb0\xa4\', \'\xe7\x8a\x80\', \'\xe9\x9a\x98\', \'\xe5\xaa\x92\', \'\xe5\xaa\x9a\', \'\xe5\xa9\xbf\',\n    \'\xe7\xbc\x85\', \'\xe7\xbc\x86\', \'\xe7\xbc\x94\', \'\xe7\xbc\x95\', \'\xe9\xaa\x9a\', \'\xe7\x91\x9f\', \'\xe9\xb9\x89\', \'\xe7\x91\xb0\', \'\xe6\x90\xaa\', \'\xe8\x81\x98\', \'\xe6\x96\x9f\', \'\xe9\x9d\xb4\', \'\xe9\x9d\xb6\', \'\xe8\x93\x96\', \'\xe8\x92\xbf\', \'\xe8\x92\xb2\', \'\xe8\x93\x89\', \'\xe6\xa5\x94\', \'\xe6\xa4\xbf\', \'\xe6\xa5\xb7\',\n    \'\xe6\xa6\x84\', \'\xe6\xa5\x9e\', \'\xe6\xa5\xa3\', \'\xe9\x85\xaa\', \'\xe7\xa2\x98\', \'\xe7\xa1\xbc\', \'\xe7\xa2\x89\', \'\xe8\xbe\x90\', \'\xe8\xbe\x91\', \'\xe9\xa2\x91\', \'\xe7\x9d\xb9\', \'\xe7\x9d\xa6\', \'\xe7\x9e\x84\', \'\xe5\x97\x9c\', \'\xe5\x97\xa6\', \'\xe6\x9a\x87\', \'\xe7\x95\xb8\', \'\xe8\xb7\xb7\', \'\xe8\xb7\xba\', \'\xe8\x9c\x88\',\n    \'\xe8\x9c\x97\', \'\xe8\x9c\x95\', \'\xe8\x9b\xb9\', \'\xe5\x97\x85\', \'\xe5\x97\xa1\', \'\xe5\x97\xa4\', \'\xe7\xbd\xb2\', \'\xe8\x9c\x80\', \'\xe5\xb9\x8c\', \'\xe9\x94\x9a\', \'\xe9\x94\xa5\', \'\xe9\x94\xa8\', \'\xe9\x94\xad\', \'\xe9\x94\xb0\', \'\xe7\xa8\x9a\', \'\xe9\xa2\x93\', \'\xe7\xad\xb7\', \'\xe9\xad\x81\', \'\xe8\xa1\x99\', \'\xe8\x85\xbb\',\n    \'\xe8\x85\xae\', \'\xe8\x85\xba\', \'\xe9\xb9\x8f\', \'\xe8\x82\x84\', \'\xe7\x8c\xbf\', \'\xe9\xa2\x96\', \'\xe7\x85\x9e\', \'\xe9\x9b\x8f\', \'\xe9\xa6\x8d\', \'\xe9\xa6\x8f\', \'\xe7\xa6\x80\', \'\xe7\x97\xb9\', \'\xe5\xbb\x93\', \'\xe7\x97\xb4\', \'\xe9\x9d\x96\', \'\xe8\xaa\x8a\', \'\xe6\xbc\x93\', \'\xe6\xba\xa2\', \'\xe6\xba\xaf\', \'\xe6\xba\xb6\',\n    \'\xe6\xbb\x93\', \'\xe6\xba\xba\', \'\xe5\xaf\x9e\', \'\xe7\xaa\xa5\', \'\xe7\xaa\x9f\', \'\xe5\xaf\x9d\', \'\xe8\xa4\x82\', \'\xe8\xa3\xb8\', \'\xe8\xb0\xac\', \'\xe5\xaa\xb3\', \'\xe5\xab\x89\', \'\xe7\xbc\x9a\', \'\xe7\xbc\xa4\', \'\xe5\x89\xbf\', \'\xe8\xb5\x98\', \'\xe7\x86\xac\', \'\xe8\xb5\xab\', \'\xe8\x94\xab\', \'\xe6\x91\xb9\', \'\xe8\x94\x93\',\n    \'\xe8\x94\x97\', \'\xe8\x94\xbc\', \'\xe7\x86\x99\', \'\xe8\x94\x9a\', \'\xe5\x85\xa2\', \'\xe6\xa6\x9b\', \'\xe6\xa6\x95\', \'\xe9\x85\xb5\', \'\xe7\xa2\x9f\', \'\xe7\xa2\xb4\', \'\xe7\xa2\xb1\', \'\xe7\xa2\xb3\', \'\xe8\xbe\x95\', \'\xe8\xbe\x96\', \'\xe9\x9b\x8c\', \'\xe5\xa2\x85\', \'\xe5\x98\x81\', \'\xe8\xb8\x8a\', \'\xe8\x9d\x89\', \'\xe5\x98\x80\',\n    \'\xe5\xb9\x94\', \'\xe9\x95\x80\', \'\xe8\x88\x94\', \'\xe7\x86\x8f\', \'\xe7\xae\x8d\', \'\xe7\xae\x95\', \'\xe7\xae\xab\', \'\xe8\x88\x86\', \'\xe5\x83\xa7\', \'\xe5\xad\xb5\', \'\xe7\x98\xa9\', \'\xe7\x98\x9f\', \'\xe5\xbd\xb0\', \'\xe7\xb2\xb9\', \'\xe6\xbc\xb1\', \'\xe6\xbc\xa9\', \'\xe6\xbc\xbe\', \'\xe6\x85\xb7\', \'\xe5\xaf\xa1\', \'\xe5\xaf\xa5\',\n    \'\xe8\xb0\xad\', \'\xe8\xa4\x90\', \'\xe8\xa4\xaa\', \'\xe9\x9a\xa7\', \'\xe5\xab\xa1\', \'\xe7\xbc\xa8\', \'\xe6\x92\xb5\', \'\xe6\x92\xa9\', \'\xe6\x92\xae\', \'\xe6\x92\xac\', \'\xe6\x93\x92\', \'\xe5\xa2\xa9\', \'\xe6\x92\xb0\', \'\xe9\x9e\x8d\', \'\xe8\x95\x8a\', \'\xe8\x95\xb4\', \'\xe6\xa8\x8a\', \'\xe6\xa8\x9f\', \'\xe6\xa9\x84\', \'\xe6\x95\xb7\',\n    \'\xe8\xb1\x8c\', \'\xe9\x86\x87\', \'\xe7\xa3\x95\', \'\xe7\xa3\x85\', \'\xe7\xa2\xbe\', \'\xe6\x86\x8b\', \'\xe5\x98\xb6\', \'\xe5\x98\xb2\', \'\xe5\x98\xb9\', \'\xe8\x9d\xa0\', \'\xe8\x9d\x8e\', \'\xe8\x9d\x8c\', \'\xe8\x9d\x97\', \'\xe8\x9d\x99\', \'\xe5\x98\xbf\', \'\xe5\xb9\xa2\', \'\xe9\x95\x8a\', \'\xe9\x95\x90\', \'\xe7\xa8\xbd\', \'\xe7\xaf\x93\',\n    \'\xe8\x86\x98\', \'\xe9\xb2\xa4\', \'\xe9\xb2\xab\', \'\xe8\xa4\x92\', \'\xe7\x98\xaa\', \'\xe7\x98\xa4\', \'\xe7\x98\xab\', \'\xe5\x87\x9b\', \'\xe6\xbe\x8e\', \'\xe6\xbd\xad\', \'\xe6\xbd\xa6\', \'\xe6\xbe\xb3\', \'\xe6\xbd\x98\', \'\xe6\xbe\x88\', \'\xe6\xbe\x9c\', \'\xe6\xbe\x84\', \'\xe6\x86\x94\', \'\xe6\x87\x8a\', \'\xe6\x86\x8e\', \'\xe7\xbf\xa9\',\n    \'\xe8\xa4\xa5\', \'\xe8\xb0\xb4\', \'\xe9\xb9\xa4\', \'\xe6\x86\xa8\', \'\xe5\xb1\xa5\', \'\xe5\xac\x89\', \'\xe8\xb1\xab\', \'\xe7\xbc\xad\', \'\xe6\x92\xbc\', \'\xe6\x93\x82\', \'\xe6\x93\x85\', \'\xe8\x95\xbe\', \'\xe8\x96\x9b\', \'\xe8\x96\x87\', \'\xe6\x93\x8e\', \'\xe7\xbf\xb0\', \'\xe5\x99\xa9\', \'\xe6\xa9\xb1\', \'\xe6\xa9\x99\', \'\xe7\x93\xa2\',\n    \'\xe8\x9f\xa5\', \'\xe9\x9c\x8d\', \'\xe9\x9c\x8e\', \'\xe8\xbe\x99\', \'\xe5\x86\x80\', \'\xe8\xb8\xb1\', \'\xe8\xb9\x82\', \'\xe8\x9f\x86\', \'\xe8\x9e\x83\', \'\xe8\x9e\x9f\', \'\xe5\x99\xaa\', \'\xe9\xb9\xa6\', \'\xe9\xbb\x94\', \'\xe7\xa9\x86\', \'\xe7\xaf\xa1\', \'\xe7\xaf\xb7\', \'\xe7\xaf\x99\', \'\xe7\xaf\xb1\', \'\xe5\x84\x92\', \'\xe8\x86\xb3\',\n    \'\xe9\xb2\xb8\', \'\xe7\x98\xbe\', \'\xe7\x98\xb8\', \'\xe7\xb3\x99\', \'\xe7\x87\x8e\', \'\xe6\xbf\x92\', \'\xe6\x86\xbe\', \'\xe6\x87\x88\', \'\xe7\xaa\xbf\', \'\xe7\xbc\xb0\', \'\xe5\xa3\x95\', \'\xe8\x97\x90\', \'\xe6\xaa\xac\', \'\xe6\xaa\x90\', \'\xe6\xaa\xa9\', \'\xe6\xaa\x80\', \'\xe7\xa4\x81\', \'\xe7\xa3\xb7\', \'\xe4\xba\x86\', \'\xe7\x9e\xac\',\n    \'\xe7\x9e\xb3\', \'\xe7\x9e\xaa\', \'\xe6\x9b\x99\', \'\xe8\xb9\x8b\', \'\xe8\x9f\x8b\', \'\xe8\x9f\x80\', \'\xe5\x9a\x8e\', \'\xe8\xb5\xa1\', \'\xe9\x95\xa3\', \'\xe9\xad\x8f\', \'\xe7\xb0\x87\', \'\xe5\x84\xa1\', \'\xe5\xbe\xbd\', \'\xe7\x88\xb5\', \'\xe6\x9c\xa6\', \'\xe8\x87\x8a\', \'\xe9\xb3\x84\', \'\xe7\xb3\x9c\', \'\xe7\x99\x8c\', \'\xe6\x87\xa6\',\n    \'\xe8\xb1\x81\', \'\xe8\x87\x80\', \'\xe8\x97\x95\', \'\xe8\x97\xa4\', \'\xe7\x9e\xbb\', \'\xe5\x9a\xa3\', \'\xe9\xb3\x8d\', \'\xe7\x99\x9e\', \'\xe7\x80\x91\', \'\xe8\xa5\x9f\', \'\xe7\x92\xa7\', \'\xe6\x88\xb3\', \'\xe6\x94\x92\', \'\xe5\xad\xbd\', \'\xe8\x98\x91\', \'\xe8\x97\xbb\', \'\xe9\xb3\x96\', \'\xe8\xb9\xad\', \'\xe8\xb9\xac\', \'\xe7\xb0\xb8\',\n    \'\xe7\xb0\xbf\', \'\xe8\x9f\xb9\', \'\xe9\x9d\xa1\', \'\xe7\x99\xa3\', \'\xe7\xbe\xb9\', \'\xe9\xac\x93\', \'\xe6\x94\x98\', \'\xe8\xa0\x95\', \'\xe5\xb7\x8d\', \'\xe9\xb3\x9e\', \'\xe7\xb3\xaf\', \'\xe8\xad\xac\', \'\xe9\x9c\xb9\', \'\xe8\xba\x8f\', \'\xe9\xab\x93\', \'\xe8\x98\xb8\', \'\xe9\x95\xb6\', \'\xe7\x93\xa4\', \'\xe7\x9f\x97\', \'\xe5\x9c\xb3\',\n    \'\xe7\x8f\x8f\', \'\xe8\x95\x99\', \'\xe6\x97\xbb\', \'\xe6\xb6\x85\', \'\xe6\x94\xb8\', \'\xe5\x98\x9b\', \'\xe9\x86\xaa\', \'\xe7\xbc\xaa\', \'\xe5\x99\x97\', \'\xe7\x9e\xa8\', \'\xe9\x9d\xb3\', \'\xe5\xb8\xb7\', \'\xe5\xbe\xa8\',\n]\n\nDOCUMENT_SYMBOLS = [\n    \'!\', \'""\', \'#\', \'$\', \'%\', \'&\', ""\'"", \'(\', \')\', \'*\', \'+\', \',\', \'-\', \'.\', \'/\', \':\', \';\', \'<\', \'=\', \'>\', \'?\', \'@\', \'[\',\n    \']\', \'^\', \'_\', \'`\', \'{\', \'|\', \'}\', \'~\', \'\xc2\xb0\', \'\xc2\xb1\', \'\xc2\xb7\', \'\xc3\x97\', \'\xc3\xa0\', \'\xc3\xa9\', \'\xc3\xb7\', \'\xc3\xbc\', \'\xce\xb1\', \'\xce\xb2\', \'\xd0\x9e\', \'\xd0\x9f\', \'\xd0\xa0\', \'\xe2\x80\x93\', \'\xe2\x80\x94\',\n    \'\xe2\x80\x95\', \'\xe2\x80\x98\', \'\xe2\x80\x99\', \'\xe2\x80\x9c\', \'\xe2\x80\x9d\', \'\xe2\x80\xa6\', \'\xe2\x80\xb0\', \'\xe2\x80\xb2\', \'\xe2\x80\xbb\', \'\xe2\x84\x83\', \'\xe2\x85\xa0\', \'\xe2\x85\xa1\', \'\xe2\x85\xa2\', \'\xe2\x85\xa3\', \'\xe2\x86\x92\', \'\xe2\x86\x93\', \'\xe2\x88\x88\', \'\xe2\x88\x9a\', \'\xe2\x88\xa9\', \'\xe2\x88\xb5\', \'\xe2\x88\xb6\', \'\xe2\x89\xa0\',\n    \'\xe2\x89\xa4\', \'\xe2\x89\xa5\', \'\xe2\x91\xa0\', \'\xe2\x91\xa1\', \'\xe2\x91\xa2\', \'\xe2\x91\xa3\', \'\xe2\x91\xa4\', \'\xe2\x91\xa5\', \'\xe2\x91\xa6\', \'\xe2\x91\xa7\', \'\xe2\x91\xa8\', \'\xe2\x91\xa9\', \'\xe2\x91\xb4\', \'\xe2\x91\xb5\', \'\xe2\x91\xb6\', \'\xe2\x91\xbe\', \'\xe2\x91\xbf\', \'\xe2\x92\x80\', \'\xe2\x92\x81\', \'\xe2\x92\x82\', \'\xe2\x92\x83\',\n    \'\xe2\x92\x84\', \'\xe2\x92\x85\', \'\xe2\x92\x86\', \'\xe2\x92\x88\', \'\xe2\x92\x89\', \'\xe2\x92\x8a\', \'\xe2\x94\x80\', \'\xe2\x94\x81\', \'\xe2\x94\x82\', \'\xe2\x94\x8c\', \'\xe2\x94\x90\', \'\xe2\x95\xb1\', \'\xe2\x96\xa0\', \'\xe2\x96\xa1\', \'\xe2\x96\xb2\', \'\xe2\x96\xb3\', \'\xe2\x97\x86\', \'\xe2\x97\x87\', \'\xe2\x97\x8b\', \'\xe2\x97\x8e\', \'\xe2\x97\x8f\',\n    \'\xe2\x98\x85\', \'\xe2\x98\x86\', \'\xe3\x80\x81\', \'\xe3\x80\x82\', \'\xe3\x80\x87\', \'\xe3\x80\x88\', \'\xe3\x80\x89\', \'\xe3\x80\x8a\', \'\xe3\x80\x8b\', \'\xe3\x80\x8c\', \'\xe3\x80\x8d\', \'\xe3\x80\x8e\', \'\xe3\x80\x8f\', \'\xe3\x80\x90\', \'\xe3\x80\x91\', \'\xe3\x80\x94\', \'\xe3\x80\x95\',  \'\xef\xb8\xb0\', \'\xef\xb9\x90\',\n    \'\xef\xb9\x91\', \'\xef\xb9\x92\', \'\xef\xb9\x94\', \'\xef\xb9\x96\', \'\xef\xbc\x88\', \'\xef\xbc\x89\', \'\xef\xbc\x8b\', \'\xef\xbc\x8c\', \'\xef\xbc\x8e\', \'\xef\xbd\x9e\', \'\xef\xbf\xa5\'\n]\n\nDOCUMENT_CHS = [\n    \'\xe4\xb8\x80\', \'\xe4\xb8\x81\', \'\xe4\xb8\x83\', \'\xe4\xb8\x87\', \'\xe4\xb8\x88\', \'\xe4\xb8\x89\', \'\xe4\xb8\x8a\', \'\xe4\xb8\x8b\', \'\xe4\xb8\x8d\', \'\xe4\xb8\x8e\', \'\xe4\xb8\x90\', \'\xe4\xb8\x91\', \'\xe4\xb8\x93\', \'\xe4\xb8\x94\', \'\xe4\xb8\x95\', \'\xe4\xb8\x96\', \'\xe4\xb8\x98\', \'\xe4\xb8\x99\', \'\xe4\xb8\x9a\', \'\xe4\xb8\x9b\',\n    \'\xe4\xb8\x9c\', \'\xe4\xb8\x9d\', \'\xe4\xb8\x9e\', \'\xe4\xb8\xa2\', \'\xe4\xb8\xa4\', \'\xe4\xb8\xa5\', \'\xe4\xb8\xa7\', \'\xe4\xb8\xaa\', \'\xe4\xb8\xab\', \'\xe4\xb8\xad\', \'\xe4\xb8\xb0\', \'\xe4\xb8\xb2\', \'\xe4\xb8\xb4\', \'\xe4\xb8\xb8\', \'\xe4\xb8\xb9\', \'\xe4\xb8\xba\', \'\xe4\xb8\xbb\', \'\xe4\xb8\xbd\', \'\xe4\xb8\xbe\', \'\xe4\xb9\x82\',\n    \'\xe4\xb9\x83\', \'\xe4\xb9\x85\', \'\xe4\xb9\x88\', \'\xe4\xb9\x89\', \'\xe4\xb9\x8b\', \'\xe4\xb9\x8c\', \'\xe4\xb9\x8d\', \'\xe4\xb9\x8e\', \'\xe4\xb9\x8f\', \'\xe4\xb9\x90\', \'\xe4\xb9\x92\', \'\xe4\xb9\x93\', \'\xe4\xb9\x94\', \'\xe4\xb9\x96\', \'\xe4\xb9\x98\', \'\xe4\xb9\x99\', \'\xe4\xb9\x9d\', \'\xe4\xb9\x9e\', \'\xe4\xb9\x9f\', \'\xe4\xb9\xa0\',\n    \'\xe4\xb9\xa1\', \'\xe4\xb9\xa6\', \'\xe4\xb9\xa9\', \'\xe4\xb9\xb0\', \'\xe4\xb9\xb1\', \'\xe4\xb9\xb3\', \'\xe4\xb9\xbe\', \'\xe4\xba\x86\', \'\xe4\xba\x88\', \'\xe4\xba\x89\', \'\xe4\xba\x8b\', \'\xe4\xba\x8c\', \'\xe4\xba\x8e\', \'\xe4\xba\x8f\', \'\xe4\xba\x91\', \'\xe4\xba\x92\', \'\xe4\xba\x93\', \'\xe4\xba\x94\', \'\xe4\xba\x95\', \'\xe4\xba\x98\',\n    \'\xe4\xba\x9a\', \'\xe4\xba\x9b\', \'\xe4\xba\x9f\', \'\xe4\xba\xa1\', \'\xe4\xba\xa2\', \'\xe4\xba\xa4\', \'\xe4\xba\xa5\', \'\xe4\xba\xa6\', \'\xe4\xba\xa7\', \'\xe4\xba\xa8\', \'\xe4\xba\xa9\', \'\xe4\xba\xab\', \'\xe4\xba\xac\', \'\xe4\xba\xad\', \'\xe4\xba\xae\', \'\xe4\xba\xb2\', \'\xe4\xba\xb3\', \'\xe4\xba\xb5\', \'\xe4\xba\xb6\', \'\xe4\xba\xb9\',\n    \'\xe4\xba\xba\', \'\xe4\xba\xbf\', \'\xe4\xbb\x80\', \'\xe4\xbb\x81\', \'\xe4\xbb\x83\', \'\xe4\xbb\x84\', \'\xe4\xbb\x85\', \'\xe4\xbb\x86\', \'\xe4\xbb\x87\', \'\xe4\xbb\x8a\', \'\xe4\xbb\x8b\', \'\xe4\xbb\x8d\', \'\xe4\xbb\x8e\', \'\xe4\xbb\x91\', \'\xe4\xbb\x93\', \'\xe4\xbb\x94\', \'\xe4\xbb\x95\', \'\xe4\xbb\x96\', \'\xe4\xbb\x97\', \'\xe4\xbb\x98\',\n    \'\xe4\xbb\x99\', \'\xe4\xbb\x9e\', \'\xe4\xbb\xa1\', \'\xe4\xbb\xa3\', \'\xe4\xbb\xa4\', \'\xe4\xbb\xa5\', \'\xe4\xbb\xaa\', \'\xe4\xbb\xab\', \'\xe4\xbb\xac\', \'\xe4\xbb\xb0\', \'\xe4\xbb\xb2\', \'\xe4\xbb\xb6\', \'\xe4\xbb\xb7\', \'\xe4\xbb\xbb\', \'\xe4\xbb\xbd\', \'\xe4\xbb\xbf\', \'\xe4\xbc\x81\', \'\xe4\xbc\x89\', \'\xe4\xbc\x8a\', \'\xe4\xbc\x8b\',\n    \'\xe4\xbc\x8d\', \'\xe4\xbc\x8e\', \'\xe4\xbc\x8f\', \'\xe4\xbc\x90\', \'\xe4\xbc\x91\', \'\xe4\xbc\x97\', \'\xe4\xbc\x98\', \'\xe4\xbc\x99\', \'\xe4\xbc\x9a\', \'\xe4\xbc\x9b\', \'\xe4\xbc\x9e\', \'\xe4\xbc\x9f\', \'\xe4\xbc\xa0\', \'\xe4\xbc\xa4\', \'\xe4\xbc\xa6\', \'\xe4\xbc\xa7\', \'\xe4\xbc\xaa\', \'\xe4\xbc\xab\', \'\xe4\xbc\xaf\', \'\xe4\xbc\xb0\',\n    \'\xe4\xbc\xb4\', \'\xe4\xbc\xb6\', \'\xe4\xbc\xb8\', \'\xe4\xbc\xba\', \'\xe4\xbc\xbb\', \'\xe4\xbc\xbc\', \'\xe4\xbc\xbd\', \'\xe4\xbd\x83\', \'\xe4\xbd\x86\', \'\xe4\xbd\x88\', \'\xe4\xbd\x8d\', \'\xe4\xbd\x8e\', \'\xe4\xbd\x8f\', \'\xe4\xbd\x90\', \'\xe4\xbd\x91\', \'\xe4\xbd\x93\', \'\xe4\xbd\x95\', \'\xe4\xbd\x97\', \'\xe4\xbd\x98\', \'\xe4\xbd\x99\',\n    \'\xe4\xbd\x9a\', \'\xe4\xbd\x9b\', \'\xe4\xbd\x9c\', \'\xe4\xbd\x9d\', \'\xe4\xbd\x9e\', \'\xe4\xbd\x9f\', \'\xe4\xbd\xa0\', \'\xe4\xbd\xa3\', \'\xe4\xbd\xa4\', \'\xe4\xbd\xa9\', \'\xe4\xbd\xac\', \'\xe4\xbd\xaf\', \'\xe4\xbd\xb0\', \'\xe4\xbd\xb3\', \'\xe4\xbd\xb6\', \'\xe4\xbd\xbb\', \'\xe4\xbd\xbc\', \'\xe4\xbd\xbf\', \'\xe4\xbe\x83\', \'\xe4\xbe\x84\',\n    \'\xe4\xbe\x88\', \'\xe4\xbe\x8b\', \'\xe4\xbe\x8d\', \'\xe4\xbe\x8f\', \'\xe4\xbe\x91\', \'\xe4\xbe\x94\', \'\xe4\xbe\x97\', \'\xe4\xbe\x9b\', \'\xe4\xbe\x9d\', \'\xe4\xbe\xa0\', \'\xe4\xbe\xa3\', \'\xe4\xbe\xa5\', \'\xe4\xbe\xa6\', \'\xe4\xbe\xa7\', \'\xe4\xbe\xa8\', \'\xe4\xbe\xa9\', \'\xe4\xbe\xaa\', \'\xe4\xbe\xac\', \'\xe4\xbe\xae\', \'\xe4\xbe\xaf\',\n    \'\xe4\xbe\xb5\', \'\xe4\xbe\xbf\', \'\xe4\xbf\x83\', \'\xe4\xbf\x84\', \'\xe4\xbf\x85\', \'\xe4\xbf\x8a\', \'\xe4\xbf\x8e\', \'\xe4\xbf\x8f\', \'\xe4\xbf\x90\', \'\xe4\xbf\x91\', \'\xe4\xbf\x97\', \'\xe4\xbf\x98\', \'\xe4\xbf\x9a\', \'\xe4\xbf\x9b\', \'\xe4\xbf\x9d\', \'\xe4\xbf\x9e\', \'\xe4\xbf\x9f\', \'\xe4\xbf\xa1\', \'\xe4\xbf\xa6\', \'\xe4\xbf\xa8\',\n    \'\xe4\xbf\xa9\', \'\xe4\xbf\xaa\', \'\xe4\xbf\xad\', \'\xe4\xbf\xae\', \'\xe4\xbf\xaf\', \'\xe4\xbf\xb1\', \'\xe4\xbf\xb3\', \'\xe4\xbf\xb8\', \'\xe4\xbf\xba\', \'\xe4\xbf\xbe\', \'\xe5\x80\x8d\', \'\xe5\x80\x8f\', \'\xe5\x80\x92\', \'\xe5\x80\x94\', \'\xe5\x80\x98\', \'\xe5\x80\x99\', \'\xe5\x80\x9a\', \'\xe5\x80\x9c\', \'\xe5\x80\x9f\', \'\xe5\x80\xa1\',\n    \'\xe5\x80\xa6\', \'\xe5\x80\xa8\', \'\xe5\x80\xa9\', \'\xe5\x80\xaa\', \'\xe5\x80\xac\', \'\xe5\x80\xad\', \'\xe5\x80\xba\', \'\xe5\x80\xbc\', \'\xe5\x80\xbe\', \'\xe5\x81\x83\', \'\xe5\x81\x87\', \'\xe5\x81\x88\', \'\xe5\x81\x8c\', \'\xe5\x81\x8e\', \'\xe5\x81\x8f\', \'\xe5\x81\x95\', \'\xe5\x81\x9a\', \'\xe5\x81\x9c\', \'\xe5\x81\xa5\', \'\xe5\x81\xb6\',\n    \'\xe5\x82\x95\', \'\xe5\x82\xa3\', \'\xe5\x82\xa5\', \'\xe5\x82\xa8\', \'\xe5\x82\xa9\', \'\xe5\x82\xac\', \'\xe5\x82\xb2\', \'\xe5\x82\xbb\', \'\xe5\x83\x87\', \'\xe5\x83\x8a\', \'\xe5\x83\x8f\', \'\xe5\x83\x96\', \'\xe5\x83\x9a\', \'\xe5\x83\xa6\', \'\xe5\x83\xa7\', \'\xe5\x83\xad\', \'\xe5\x83\xae\', \'\xe5\x83\xb0\', \'\xe5\x83\xb3\', \'\xe5\x83\xb5\',\n    \'\xe5\x83\xb9\', \'\xe5\x83\xbb\', \'\xe5\x84\x86\', \'\xe5\x84\x87\', \'\xe5\x84\x8b\', \'\xe5\x84\x92\', \'\xe5\x84\x99\', \'\xe5\x84\xa1\', \'\xe5\x84\xa3\', \'\xe5\x84\xbf\', \'\xe5\x85\x80\', \'\xe5\x85\x81\', \'\xe5\x85\x83\', \'\xe5\x85\x84\', \'\xe5\x85\x85\', \'\xe5\x85\x86\', \'\xe5\x85\x88\', \'\xe5\x85\x89\', \'\xe5\x85\x8b\', \'\xe5\x85\x8d\',\n    \'\xe5\x85\x91\', \'\xe5\x85\x92\', \'\xe5\x85\x94\', \'\xe5\x85\x95\', \'\xe5\x85\x96\', \'\xe5\x85\x9a\', \'\xe5\x85\x9c\', \'\xe5\x85\xa2\', \'\xe5\x85\xa5\', \'\xe5\x85\xa8\', \'\xe5\x85\xab\', \'\xe5\x85\xac\', \'\xe5\x85\xad\', \'\xe5\x85\xae\', \'\xe5\x85\xb0\', \'\xe5\x85\xb1\', \'\xe5\x85\xb3\', \'\xe5\x85\xb4\', \'\xe5\x85\xb5\', \'\xe5\x85\xb6\',\n    \'\xe5\x85\xb7\', \'\xe5\x85\xb8\', \'\xe5\x85\xb9\', \'\xe5\x85\xbb\', \'\xe5\x85\xbc\', \'\xe5\x85\xbd\', \'\xe5\x86\x80\', \'\xe5\x86\x81\', \'\xe5\x86\x85\', \'\xe5\x86\x88\', \'\xe5\x86\x89\', \'\xe5\x86\x8c\', \'\xe5\x86\x8d\', \'\xe5\x86\x8f\', \'\xe5\x86\x91\', \'\xe5\x86\x92\', \'\xe5\x86\x95\', \'\xe5\x86\x97\', \'\xe5\x86\x99\', \'\xe5\x86\x9b\',\n    \'\xe5\x86\x9c\', \'\xe5\x86\xa0\', \'\xe5\x86\xa2\', \'\xe5\x86\xa4\', \'\xe5\x86\xa5\', \'\xe5\x86\xac\', \'\xe5\x86\xaf\', \'\xe5\x86\xb0\', \'\xe5\x86\xb2\', \'\xe5\x86\xb3\', \'\xe5\x86\xb5\', \'\xe5\x86\xb6\', \'\xe5\x86\xb7\', \'\xe5\x86\xbb\', \'\xe5\x86\xbd\', \'\xe5\x87\x80\', \'\xe5\x87\x84\', \'\xe5\x87\x86\', \'\xe5\x87\x87\', \'\xe5\x87\x89\',\n    \'\xe5\x87\x8b\', \'\xe5\x87\x8c\', \'\xe5\x87\x8f\', \'\xe5\x87\x91\', \'\xe5\x87\x9b\', \'\xe5\x87\x9d\', \'\xe5\x87\xa0\', \'\xe5\x87\xa1\', \'\xe5\x87\xa4\', \'\xe5\x87\xab\', \'\xe5\x87\xad\', \'\xe5\x87\xaf\', \'\xe5\x87\xb0\', \'\xe5\x87\xb3\', \'\xe5\x87\xb6\', \'\xe5\x87\xb8\', \'\xe5\x87\xb9\', \'\xe5\x87\xba\', \'\xe5\x87\xbb\', \'\xe5\x87\xbd\',\n    \'\xe5\x87\xbf\', \'\xe5\x88\x80\', \'\xe5\x88\x81\', \'\xe5\x88\x83\', \'\xe5\x88\x86\', \'\xe5\x88\x87\', \'\xe5\x88\x88\', \'\xe5\x88\x8a\', \'\xe5\x88\x8d\', \'\xe5\x88\x8e\', \'\xe5\x88\x91\', \'\xe5\x88\x92\', \'\xe5\x88\x93\', \'\xe5\x88\x96\', \'\xe5\x88\x97\', \'\xe5\x88\x98\', \'\xe5\x88\x99\', \'\xe5\x88\x9a\', \'\xe5\x88\x9b\', \'\xe5\x88\x9d\',\n    \'\xe5\x88\xa0\', \'\xe5\x88\xa4\', \'\xe5\x88\xa8\', \'\xe5\x88\xa9\', \'\xe5\x88\xab\', \'\xe5\x88\xad\', \'\xe5\x88\xae\', \'\xe5\x88\xb0\', \'\xe5\x88\xb3\', \'\xe5\x88\xb6\', \'\xe5\x88\xb7\', \'\xe5\x88\xb8\', \'\xe5\x88\xb9\', \'\xe5\x88\xba\', \'\xe5\x88\xbb\', \'\xe5\x88\xbd\', \'\xe5\x89\x81\', \'\xe5\x89\x82\', \'\xe5\x89\x83\', \'\xe5\x89\x8a\',\n    \'\xe5\x89\x8c\', \'\xe5\x89\x8d\', \'\xe5\x89\x8e\', \'\xe5\x89\x90\', \'\xe5\x89\x91\', \'\xe5\x89\x94\', \'\xe5\x89\x96\', \'\xe5\x89\x9c\', \'\xe5\x89\xa5\', \'\xe5\x89\xa7\', \'\xe5\x89\xa9\', \'\xe5\x89\xaa\', \'\xe5\x89\xaf\', \'\xe5\x89\xb2\', \'\xe5\x89\xbd\', \'\xe5\x89\xbf\', \'\xe5\x8a\x88\', \'\xe5\x8a\x93\', \'\xe5\x8a\x99\', \'\xe5\x8a\x9b\',\n    \'\xe5\x8a\x9d\', \'\xe5\x8a\x9e\', \'\xe5\x8a\x9f\', \'\xe5\x8a\xa0\', \'\xe5\x8a\xa1\', \'\xe5\x8a\xa3\', \'\xe5\x8a\xa8\', \'\xe5\x8a\xa9\', \'\xe5\x8a\xaa\', \'\xe5\x8a\xab\', \'\xe5\x8a\xac\', \'\xe5\x8a\xad\', \'\xe5\x8a\xb1\', \'\xe5\x8a\xb2\', \'\xe5\x8a\xb3\', \'\xe5\x8a\xbe\', \'\xe5\x8a\xbf\', \'\xe5\x8b\x83\', \'\xe5\x8b\x87\', \'\xe5\x8b\x89\',\n    \'\xe5\x8b\x8b\', \'\xe5\x8b\x90\', \'\xe5\x8b\x92\', \'\xe5\x8b\x96\', \'\xe5\x8b\x98\', \'\xe5\x8b\x9f\', \'\xe5\x8b\xa4\', \'\xe5\x8b\xba\', \'\xe5\x8b\xbe\', \'\xe5\x8b\xbf\', \'\xe5\x8c\x80\', \'\xe5\x8c\x85\', \'\xe5\x8c\x86\', \'\xe5\x8c\x88\', \'\xe5\x8c\x8d\', \'\xe5\x8c\x8f\', \'\xe5\x8c\x90\', \'\xe5\x8c\x95\', \'\xe5\x8c\x96\', \'\xe5\x8c\x97\',\n    \'\xe5\x8c\x99\', \'\xe5\x8c\x9d\', \'\xe5\x8c\xa0\', \'\xe5\x8c\xa1\', \'\xe5\x8c\xa3\', \'\xe5\x8c\xaa\', \'\xe5\x8c\xae\', \'\xe5\x8c\xb3\', \'\xe5\x8c\xb9\', \'\xe5\x8c\xba\', \'\xe5\x8c\xbb\', \'\xe5\x8c\xbe\', \'\xe5\x8c\xbf\', \'\xe5\x8d\x81\', \'\xe5\x8d\x83\', \'\xe5\x8d\x85\', \'\xe5\x8d\x87\', \'\xe5\x8d\x88\', \'\xe5\x8d\x89\', \'\xe5\x8d\x8a\',\n    \'\xe5\x8d\x8e\', \'\xe5\x8d\x8f\', \'\xe5\x8d\x91\', \'\xe5\x8d\x92\', \'\xe5\x8d\x93\', \'\xe5\x8d\x95\', \'\xe5\x8d\x96\', \'\xe5\x8d\x97\', \'\xe5\x8d\x9a\', \'\xe5\x8d\x9c\', \'\xe5\x8d\x9e\', \'\xe5\x8d\xa0\', \'\xe5\x8d\xa1\', \'\xe5\x8d\xa2\', \'\xe5\x8d\xa4\', \'\xe5\x8d\xa6\', \'\xe5\x8d\xa7\', \'\xe5\x8d\xab\', \'\xe5\x8d\xac\', \'\xe5\x8d\xae\',\n    \'\xe5\x8d\xaf\', \'\xe5\x8d\xb0\', \'\xe5\x8d\xb1\', \'\xe5\x8d\xb3\', \'\xe5\x8d\xb4\', \'\xe5\x8d\xb5\', \'\xe5\x8d\xb7\', \'\xe5\x8d\xb8\', \'\xe5\x8d\xba\', \'\xe5\x8d\xbf\', \'\xe5\x8e\x82\', \'\xe5\x8e\x84\', \'\xe5\x8e\x85\', \'\xe5\x8e\x86\', \'\xe5\x8e\x89\', \'\xe5\x8e\x8b\', \'\xe5\x8e\x8c\', \'\xe5\x8e\x8d\', \'\xe5\x8e\x95\', \'\xe5\x8e\x98\',\n    \'\xe5\x8e\x9a\', \'\xe5\x8e\x9d\', \'\xe5\x8e\x9f\', \'\xe5\x8e\xa2\', \'\xe5\x8e\xa5\', \'\xe5\x8e\xa6\', \'\xe5\x8e\xa8\', \'\xe5\x8e\xa9\', \'\xe5\x8e\xae\', \'\xe5\x8e\xbb\', \'\xe5\x8e\xbf\', \'\xe5\x8f\x82\', \'\xe5\x8f\x88\', \'\xe5\x8f\x89\', \'\xe5\x8f\x8a\', \'\xe5\x8f\x8b\', \'\xe5\x8f\x8c\', \'\xe5\x8f\x8d\', \'\xe5\x8f\x91\', \'\xe5\x8f\x94\',\n    \'\xe5\x8f\x96\', \'\xe5\x8f\x97\', \'\xe5\x8f\x98\', \'\xe5\x8f\x99\', \'\xe5\x8f\x9b\', \'\xe5\x8f\x9f\', \'\xe5\x8f\xa0\', \'\xe5\x8f\xa1\', \'\xe5\x8f\xa3\', \'\xe5\x8f\xa4\', \'\xe5\x8f\xa5\', \'\xe5\x8f\xa6\', \'\xe5\x8f\xa8\', \'\xe5\x8f\xa9\', \'\xe5\x8f\xaa\', \'\xe5\x8f\xab\', \'\xe5\x8f\xac\', \'\xe5\x8f\xad\', \'\xe5\x8f\xae\', \'\xe5\x8f\xaf\',\n    \'\xe5\x8f\xb0\', \'\xe5\x8f\xb1\', \'\xe5\x8f\xb2\', \'\xe5\x8f\xb3\', \'\xe5\x8f\xb5\', \'\xe5\x8f\xb6\', \'\xe5\x8f\xb7\', \'\xe5\x8f\xb8\', \'\xe5\x8f\xb9\', \'\xe5\x8f\xbc\', \'\xe5\x8f\xbd\', \'\xe5\x90\x81\', \'\xe5\x90\x83\', \'\xe5\x90\x84\', \'\xe5\x90\x86\', \'\xe5\x90\x88\', \'\xe5\x90\x89\', \'\xe5\x90\x8a\', \'\xe5\x90\x8c\', \'\xe5\x90\x8d\',\n    \'\xe5\x90\x8e\', \'\xe5\x90\x8f\', \'\xe5\x90\x90\', \'\xe5\x90\x91\', \'\xe5\x90\x92\', \'\xe5\x90\x93\', \'\xe5\x90\x95\', \'\xe5\x90\x97\', \'\xe5\x90\x9b\', \'\xe5\x90\x9d\', \'\xe5\x90\x9e\', \'\xe5\x90\x9f\', \'\xe5\x90\xa0\', \'\xe5\x90\xa6\', \'\xe5\x90\xa7\', \'\xe5\x90\xa8\', \'\xe5\x90\xa9\', \'\xe5\x90\xab\', \'\xe5\x90\xac\', \'\xe5\x90\xad\',\n    \'\xe5\x90\xae\', \'\xe5\x90\xaf\', \'\xe5\x90\xb1\', \'\xe5\x90\xb4\', \'\xe5\x90\xb5\', \'\xe5\x90\xb8\', \'\xe5\x90\xb9\', \'\xe5\x90\xbb\', \'\xe5\x90\xbc\', \'\xe5\x90\xbe\', \'\xe5\x91\x80\', \'\xe5\x91\x83\', \'\xe5\x91\x86\', \'\xe5\x91\x88\', \'\xe5\x91\x8a\', \'\xe5\x91\x90\', \'\xe5\x91\x93\', \'\xe5\x91\x95\', \'\xe5\x91\x97\', \'\xe5\x91\x98\',\n    \'\xe5\x91\x9b\', \'\xe5\x91\x9c\', \'\xe5\x91\xa2\', \'\xe5\x91\xa4\', \'\xe5\x91\xa6\', \'\xe5\x91\xa8\', \'\xe5\x91\xb1\', \'\xe5\x91\xb3\', \'\xe5\x91\xb5\', \'\xe5\x91\xb6\', \'\xe5\x91\xb7\', \'\xe5\x91\xbb\', \'\xe5\x91\xbc\', \'\xe5\x91\xbd\', \'\xe5\x92\x80\', \'\xe5\x92\x82\', \'\xe5\x92\x84\', \'\xe5\x92\x86\', \'\xe5\x92\x8b\', \'\xe5\x92\x8c\',\n    \'\xe5\x92\x8e\', \'\xe5\x92\x8f\', \'\xe5\x92\x90\', \'\xe5\x92\x92\', \'\xe5\x92\x94\', \'\xe5\x92\x95\', \'\xe5\x92\x96\', \'\xe5\x92\x99\', \'\xe5\x92\x9a\', \'\xe5\x92\x9b\', \'\xe5\x92\xa3\', \'\xe5\x92\xa4\', \'\xe5\x92\xa6\', \'\xe5\x92\xa7\', \'\xe5\x92\xa8\', \'\xe5\x92\xaa\', \'\xe5\x92\xab\', \'\xe5\x92\xac\', \'\xe5\x92\xaf\', \'\xe5\x92\xb1\',\n    \'\xe5\x92\xb3\', \'\xe5\x92\xb8\', \'\xe5\x92\xbb\', \'\xe5\x92\xbd\', \'\xe5\x92\xbf\', \'\xe5\x93\x80\', \'\xe5\x93\x81\', \'\xe5\x93\x82\', \'\xe5\x93\x84\', \'\xe5\x93\x86\', \'\xe5\x93\x87\', \'\xe5\x93\x88\', \'\xe5\x93\x89\', \'\xe5\x93\x8c\', \'\xe5\x93\x8d\', \'\xe5\x93\x8e\', \'\xe5\x93\x8f\', \'\xe5\x93\x91\', \'\xe5\x93\x97\', \'\xe5\x93\x99\',\n    \'\xe5\x93\x9d\', \'\xe5\x93\x9f\', \'\xe5\x93\xa5\', \'\xe5\x93\xa6\', \'\xe5\x93\xa7\', \'\xe5\x93\xa8\', \'\xe5\x93\xa9\', \'\xe5\x93\xaa\', \'\xe5\x93\xad\', \'\xe5\x93\xae\', \'\xe5\x93\xb2\', \'\xe5\x93\xba\', \'\xe5\x93\xbc\', \'\xe5\x93\xbd\', \'\xe5\x94\x81\', \'\xe5\x94\x86\', \'\xe5\x94\x87\', \'\xe5\x94\x89\', \'\xe5\x94\x8f\', \'\xe5\x94\x90\',\n    \'\xe5\x94\x91\', \'\xe5\x94\x94\', \'\xe5\x94\xa0\', \'\xe5\x94\xa2\', \'\xe5\x94\xa4\', \'\xe5\x94\xa7\', \'\xe5\x94\xac\', \'\xe5\x94\xae\', \'\xe5\x94\xaf\', \'\xe5\x94\xb1\', \'\xe5\x94\xb3\', \'\xe5\x94\xb6\', \'\xe5\x94\xbe\', \'\xe5\x94\xbf\', \'\xe5\x95\x81\', \'\xe5\x95\x83\', \'\xe5\x95\x84\', \'\xe5\x95\x86\', \'\xe5\x95\x8a\', \'\xe5\x95\x90\',\n    \'\xe5\x95\x95\', \'\xe5\x95\x96\', \'\xe5\x95\x9c\', \'\xe5\x95\xa1\', \'\xe5\x95\xa4\', \'\xe5\x95\xa5\', \'\xe5\x95\xa6\', \'\xe5\x95\xa7\', \'\xe5\x95\xaa\', \'\xe5\x95\xac\', \'\xe5\x95\xae\', \'\xe5\x95\xb0\', \'\xe5\x95\xb1\', \'\xe5\x95\xb6\', \'\xe5\x95\xb8\', \'\xe5\x95\xbb\', \'\xe5\x95\xbc\', \'\xe5\x95\xbe\', \'\xe5\x96\x80\', \'\xe5\x96\x81\',\n    \'\xe5\x96\x82\', \'\xe5\x96\x83\', \'\xe5\x96\x84\', \'\xe5\x96\x86\', \'\xe5\x96\x87\', \'\xe5\x96\x89\', \'\xe5\x96\x8a\', \'\xe5\x96\x8b\', \'\xe5\x96\x8f\', \'\xe5\x96\x91\', \'\xe5\x96\x94\', \'\xe5\x96\x98\', \'\xe5\x96\x99\', \'\xe5\x96\x9c\', \'\xe5\x96\x9d\', \'\xe5\x96\x9f\', \'\xe5\x96\xa7\', \'\xe5\x96\xb1\', \'\xe5\x96\xb3\', \'\xe5\x96\xb7\',\n    \'\xe5\x96\xb9\', \'\xe5\x96\xbb\', \'\xe5\x96\xbd\', \'\xe5\x96\xbe\', \'\xe5\x97\x84\', \'\xe5\x97\x85\', \'\xe5\x97\x8c\', \'\xe5\x97\x91\', \'\xe5\x97\x92\', \'\xe5\x97\x93\', \'\xe5\x97\x94\', \'\xe5\x97\x96\', \'\xe5\x97\x9b\', \'\xe5\x97\x9c\', \'\xe5\x97\x9d\', \'\xe5\x97\x9f\', \'\xe5\x97\xa1\', \'\xe5\x97\xa3\', \'\xe5\x97\xa4\', \'\xe5\x97\xa5\',\n    \'\xe5\x97\xa6\', \'\xe5\x97\xa8\', \'\xe5\x97\xaa\', \'\xe5\x97\xab\', \'\xe5\x97\xaf\', \'\xe5\x97\xb2\', \'\xe5\x97\xb3\', \'\xe5\x97\xb7\', \'\xe5\x97\xbd\', \'\xe5\x97\xbe\', \'\xe5\x98\x80\', \'\xe5\x98\x88\', \'\xe5\x98\x89\', \'\xe5\x98\x8c\', \'\xe5\x98\x8e\', \'\xe5\x98\x98\', \'\xe5\x98\x9b\', \'\xe5\x98\x9f\', \'\xe5\x98\xa4\', \'\xe5\x98\xad\',\n    \'\xe5\x98\xb1\', \'\xe5\x98\xb2\', \'\xe5\x98\xb4\', \'\xe5\x98\xb6\', \'\xe5\x98\xb9\', \'\xe5\x98\xbb\', \'\xe5\x98\xbf\', \'\xe5\x99\x89\', \'\xe5\x99\x8c\', \'\xe5\x99\x8e\', \'\xe5\x99\x94\', \'\xe5\x99\x97\', \'\xe5\x99\x99\', \'\xe5\x99\x9c\', \'\xe5\x99\xa2\', \'\xe5\x99\xa4\', \'\xe5\x99\xa8\', \'\xe5\x99\xa9\', \'\xe5\x99\xaa\', \'\xe5\x99\xab\',\n    \'\xe5\x99\xac\', \'\xe5\x99\xad\', \'\xe5\x99\xb1\', \'\xe5\x99\xb6\', \'\xe5\x99\xbb\', \'\xe5\x9a\x85\', \'\xe5\x9a\x8b\', \'\xe5\x9a\x8e\', \'\xe5\x9a\x8f\', \'\xe5\x9a\x93\', \'\xe5\x9a\xa3\', \'\xe5\x9a\xac\', \'\xe5\x9a\xad\', \'\xe5\x9a\xb0\', \'\xe5\x9a\xb7\', \'\xe5\x9a\xbc\', \'\xe5\x9b\x8a\', \'\xe5\x9b\x90\', \'\xe5\x9b\x94\', \'\xe5\x9b\x9a\',\n    \'\xe5\x9b\x9b\', \'\xe5\x9b\x9e\', \'\xe5\x9b\xa0\', \'\xe5\x9b\xa2\', \'\xe5\x9b\xa4\', \'\xe5\x9b\xab\', \'\xe5\x9b\xad\', \'\xe5\x9b\xb0\', \'\xe5\x9b\xb1\', \'\xe5\x9b\xb4\', \'\xe5\x9b\xb5\', \'\xe5\x9b\xb9\', \'\xe5\x9b\xba\', \'\xe5\x9b\xbd\', \'\xe5\x9b\xbe\', \'\xe5\x9b\xbf\', \'\xe5\x9c\x83\', \'\xe5\x9c\x84\', \'\xe5\x9c\x86\', \'\xe5\x9c\x88\',\n    \'\xe5\x9c\x89\', \'\xe5\x9c\x9c\', \'\xe5\x9c\x9f\', \'\xe5\x9c\xa3\', \'\xe5\x9c\xa8\', \'\xe5\x9c\xa9\', \'\xe5\x9c\xad\', \'\xe5\x9c\xaf\', \'\xe5\x9c\xb0\', \'\xe5\x9c\xb3\', \'\xe5\x9c\xb9\', \'\xe5\x9c\xba\', \'\xe5\x9c\xbe\', \'\xe5\x9d\x80\', \'\xe5\x9d\x82\', \'\xe5\x9d\x87\', \'\xe5\x9d\x8a\', \'\xe5\x9d\x8c\', \'\xe5\x9d\x8d\', \'\xe5\x9d\x8e\',\n    \'\xe5\x9d\x8f\', \'\xe5\x9d\x90\', \'\xe5\x9d\x91\', \'\xe5\x9d\x97\', \'\xe5\x9d\x9a\', \'\xe5\x9d\x9b\', \'\xe5\x9d\x9d\', \'\xe5\x9d\x9e\', \'\xe5\x9d\x9f\', \'\xe5\x9d\xa0\', \'\xe5\x9d\xa1\', \'\xe5\x9d\xa4\', \'\xe5\x9d\xa6\', \'\xe5\x9d\xa8\', \'\xe5\x9d\xaa\', \'\xe5\x9d\xad\', \'\xe5\x9d\xaf\', \'\xe5\x9d\xb3\', \'\xe5\x9d\xb7\', \'\xe5\x9d\xbb\',\n    \'\xe5\x9d\xbc\', \'\xe5\x9e\x82\', \'\xe5\x9e\x83\', \'\xe5\x9e\x84\', \'\xe5\x9e\x8b\', \'\xe5\x9e\x92\', \'\xe5\x9e\x93\', \'\xe5\x9e\x9b\', \'\xe5\x9e\x9d\', \'\xe5\x9e\xa0\', \'\xe5\x9e\xa2\', \'\xe5\x9e\xa3\', \'\xe5\x9e\xa6\', \'\xe5\x9e\xa9\', \'\xe5\x9e\xab\', \'\xe5\x9e\xae\', \'\xe5\x9f\x83\', \'\xe5\x9f\x8b\', \'\xe5\x9f\x8e\', \'\xe5\x9f\x92\',\n    \'\xe5\x9f\x94\', \'\xe5\x9f\x9f\', \'\xe5\x9f\xa0\', \'\xe5\x9f\xa4\', \'\xe5\x9f\xb6\', \'\xe5\x9f\xb9\', \'\xe5\x9f\xba\', \'\xe5\x9f\xbd\', \'\xe5\xa0\x82\', \'\xe5\xa0\x83\', \'\xe5\xa0\x86\', \'\xe5\xa0\x91\', \'\xe5\xa0\x95\', \'\xe5\xa0\x99\', \'\xe5\xa0\xa1\', \'\xe5\xa0\xa4\', \'\xe5\xa0\xaa\', \'\xe5\xa0\xb0\', \'\xe5\xa0\xb5\', \'\xe5\xa1\x8c\',\n    \'\xe5\xa1\x91\', \'\xe5\xa1\x94\', \'\xe5\xa1\x98\', \'\xe5\xa1\x9e\', \'\xe5\xa1\xab\', \'\xe5\xa1\xbe\', \'\xe5\xa2\x80\', \'\xe5\xa2\x83\', \'\xe5\xa2\x85\', \'\xe5\xa2\x89\', \'\xe5\xa2\x93\', \'\xe5\xa2\x99\', \'\xe5\xa2\x9e\', \'\xe5\xa2\x9f\', \'\xe5\xa2\xa0\', \'\xe5\xa2\xa8\', \'\xe5\xa2\xa9\', \'\xe5\xa3\x81\', \'\xe5\xa3\x85\', \'\xe5\xa3\x91\',\n    \'\xe5\xa3\x95\', \'\xe5\xa3\x96\', \'\xe5\xa3\xa4\', \'\xe5\xa3\xab\', \'\xe5\xa3\xac\', \'\xe5\xa3\xae\', \'\xe5\xa3\xb0\', \'\xe5\xa3\xb3\', \'\xe5\xa3\xb6\', \'\xe5\xa3\xb9\', \'\xe5\xa4\x84\', \'\xe5\xa4\x87\', \'\xe5\xa4\x8d\', \'\xe5\xa4\x8f\', \'\xe5\xa4\x94\', \'\xe5\xa4\x95\', \'\xe5\xa4\x96\', \'\xe5\xa4\x99\', \'\xe5\xa4\x9a\', \'\xe5\xa4\x9c\',\n    \'\xe5\xa4\x9f\', \'\xe5\xa4\xa1\', \'\xe5\xa4\xa4\', \'\xe5\xa4\xa5\', \'\xe5\xa4\xa7\', \'\xe5\xa4\xa9\', \'\xe5\xa4\xaa\', \'\xe5\xa4\xab\', \'\xe5\xa4\xad\', \'\xe5\xa4\xae\', \'\xe5\xa4\xaf\', \'\xe5\xa4\xb1\', \'\xe5\xa4\xb4\', \'\xe5\xa4\xb7\', \'\xe5\xa4\xb8\', \'\xe5\xa4\xb9\', \'\xe5\xa4\xba\', \'\xe5\xa5\x81\', \'\xe5\xa5\x82\', \'\xe5\xa5\x84\',\n    \'\xe5\xa5\x87\', \'\xe5\xa5\x88\', \'\xe5\xa5\x89\', \'\xe5\xa5\x8b\', \'\xe5\xa5\x8e\', \'\xe5\xa5\x8f\', \'\xe5\xa5\x91\', \'\xe5\xa5\x94\', \'\xe5\xa5\x95\', \'\xe5\xa5\x96\', \'\xe5\xa5\x97\', \'\xe5\xa5\x98\', \'\xe5\xa5\x9a\', \'\xe5\xa5\xa0\', \'\xe5\xa5\xa1\', \'\xe5\xa5\xa2\', \'\xe5\xa5\xa5\', \'\xe5\xa5\xad\', \'\xe5\xa5\xb3\', \'\xe5\xa5\xb4\',\n    \'\xe5\xa5\xb6\', \'\xe5\xa5\xb8\', \'\xe5\xa5\xb9\', \'\xe5\xa5\xbd\', \'\xe5\xa6\x81\', \'\xe5\xa6\x82\', \'\xe5\xa6\x83\', \'\xe5\xa6\x84\', \'\xe5\xa6\x86\', \'\xe5\xa6\x87\', \'\xe5\xa6\x88\', \'\xe5\xa6\x8a\', \'\xe5\xa6\x8d\', \'\xe5\xa6\x92\', \'\xe5\xa6\x93\', \'\xe5\xa6\x96\', \'\xe5\xa6\x97\', \'\xe5\xa6\x99\', \'\xe5\xa6\x9e\', \'\xe5\xa6\xa4\',\n    \'\xe5\xa6\xa5\', \'\xe5\xa6\xa8\', \'\xe5\xa6\xa9\', \'\xe5\xa6\xaa\', \'\xe5\xa6\xab\', \'\xe5\xa6\xae\', \'\xe5\xa6\xb2\', \'\xe5\xa6\xb3\', \'\xe5\xa6\xb9\', \'\xe5\xa6\xbb\', \'\xe5\xa6\xbe\', \'\xe5\xa7\x81\', \'\xe5\xa7\x86\', \'\xe5\xa7\x8a\', \'\xe5\xa7\x8b\', \'\xe5\xa7\x90\', \'\xe5\xa7\x91\', \'\xe5\xa7\x92\', \'\xe5\xa7\x93\', \'\xe5\xa7\x94\',\n    \'\xe5\xa7\x97\', \'\xe5\xa7\x9a\', \'\xe5\xa7\x9c\', \'\xe5\xa7\x9d\', \'\xe5\xa7\x9e\', \'\xe5\xa7\xa3\', \'\xe5\xa7\xa5\', \'\xe5\xa7\xa8\', \'\xe5\xa7\xac\', \'\xe5\xa7\xae\', \'\xe5\xa7\xb9\', \'\xe5\xa7\xbb\', \'\xe5\xa7\xbf\', \'\xe5\xa8\x80\', \'\xe5\xa8\x81\', \'\xe5\xa8\x83\', \'\xe5\xa8\x84\', \'\xe5\xa8\x85\', \'\xe5\xa8\x86\', \'\xe5\xa8\x87\',\n    \'\xe5\xa8\x88\', \'\xe5\xa8\x89\', \'\xe5\xa8\x91\', \'\xe5\xa8\x93\', \'\xe5\xa8\x98\', \'\xe5\xa8\x9c\', \'\xe5\xa8\x9f\', \'\xe5\xa8\xa0\', \'\xe5\xa8\xa1\', \'\xe5\xa8\xa3\', \'\xe5\xa8\xa5\', \'\xe5\xa8\xa9\', \'\xe5\xa8\xb1\', \'\xe5\xa8\xb2\', \'\xe5\xa8\xb4\', \'\xe5\xa8\xb6\', \'\xe5\xa8\xbc\', \'\xe5\xa9\x80\', \'\xe5\xa9\x86\', \'\xe5\xa9\x89\',\n    \'\xe5\xa9\x8a\', \'\xe5\xa9\x95\', \'\xe5\xa9\x9a\', \'\xe5\xa9\xa2\', \'\xe5\xa9\xa7\', \'\xe5\xa9\xaa\', \'\xe5\xa9\xb4\', \'\xe5\xa9\xb6\', \'\xe5\xa9\xb7\', \'\xe5\xa9\xba\', \'\xe5\xa9\xbf\', \'\xe5\xaa\x92\', \'\xe5\xaa\x9a\', \'\xe5\xaa\x9b\', \'\xe5\xaa\xa2\', \'\xe5\xaa\xaa\', \'\xe5\xaa\xb2\', \'\xe5\xaa\xb3\', \'\xe5\xaa\xb5\', \'\xe5\xaa\xb8\',\n    \'\xe5\xaa\xbe\', \'\xe5\xab\x81\', \'\xe5\xab\x82\', \'\xe5\xab\x84\', \'\xe5\xab\x89\', \'\xe5\xab\x8c\', \'\xe5\xab\x94\', \'\xe5\xab\x96\', \'\xe5\xab\x9a\', \'\xe5\xab\x9c\', \'\xe5\xab\xa1\', \'\xe5\xab\xa3\', \'\xe5\xab\xa6\', \'\xe5\xab\xa9\', \'\xe5\xab\xaa\', \'\xe5\xab\xb1\', \'\xe5\xac\x83\', \'\xe5\xac\x89\', \'\xe5\xac\x96\', \'\xe5\xac\x97\',\n    \'\xe5\xac\x9b\', \'\xe5\xac\xb4\', \'\xe5\xad\x80\', \'\xe5\xad\x90\', \'\xe5\xad\x91\', \'\xe5\xad\x94\', \'\xe5\xad\x95\', \'\xe5\xad\x97\', \'\xe5\xad\x98\', \'\xe5\xad\x99\', \'\xe5\xad\x9a\', \'\xe5\xad\x9b\', \'\xe5\xad\x9c\', \'\xe5\xad\x9d\', \'\xe5\xad\x9f\', \'\xe5\xad\xa2\', \'\xe5\xad\xa3\', \'\xe5\xad\xa4\', \'\xe5\xad\xa5\', \'\xe5\xad\xa6\',\n    \'\xe5\xad\xa9\', \'\xe5\xad\xaa\', \'\xe5\xad\xb0\', \'\xe5\xad\xb1\', \'\xe5\xad\xb3\', \'\xe5\xad\xb5\', \'\xe5\xad\xba\', \'\xe5\xad\xbd\', \'\xe5\xae\x81\', \'\xe5\xae\x83\', \'\xe5\xae\x85\', \'\xe5\xae\x87\', \'\xe5\xae\x88\', \'\xe5\xae\x89\', \'\xe5\xae\x8b\', \'\xe5\xae\x8c\', \'\xe5\xae\x8f\', \'\xe5\xae\x93\', \'\xe5\xae\x95\', \'\xe5\xae\x97\',\n    \'\xe5\xae\x98\', \'\xe5\xae\x99\', \'\xe5\xae\x9a\', \'\xe5\xae\x9b\', \'\xe5\xae\x9c\', \'\xe5\xae\x9d\', \'\xe5\xae\x9e\', \'\xe5\xae\xa0\', \'\xe5\xae\xa1\', \'\xe5\xae\xa2\', \'\xe5\xae\xa3\', \'\xe5\xae\xa4\', \'\xe5\xae\xa5\', \'\xe5\xae\xa6\', \'\xe5\xae\xaa\', \'\xe5\xae\xab\', \'\xe5\xae\xb0\', \'\xe5\xae\xb3\', \'\xe5\xae\xb4\', \'\xe5\xae\xb5\',\n    \'\xe5\xae\xb6\', \'\xe5\xae\xb8\', \'\xe5\xae\xb9\', \'\xe5\xae\xbd\', \'\xe5\xae\xbe\', \'\xe5\xae\xbf\', \'\xe5\xaf\x82\', \'\xe5\xaf\x84\', \'\xe5\xaf\x85\', \'\xe5\xaf\x86\', \'\xe5\xaf\x87\', \'\xe5\xaf\x8c\', \'\xe5\xaf\x90\', \'\xe5\xaf\x92\', \'\xe5\xaf\x93\', \'\xe5\xaf\x96\', \'\xe5\xaf\x98\', \'\xe5\xaf\x9d\', \'\xe5\xaf\x9e\', \'\xe5\xaf\x9f\',\n    \'\xe5\xaf\xa1\', \'\xe5\xaf\xa4\', \'\xe5\xaf\xa5\', \'\xe5\xaf\xa8\', \'\xe5\xaf\xb0\', \'\xe5\xaf\xb8\', \'\xe5\xaf\xb9\', \'\xe5\xaf\xba\', \'\xe5\xaf\xbb\', \'\xe5\xaf\xbc\', \'\xe5\xaf\xbf\', \'\xe5\xb0\x81\', \'\xe5\xb0\x84\', \'\xe5\xb0\x86\', \'\xe5\xb0\x89\', \'\xe5\xb0\x8a\', \'\xe5\xb0\x8f\', \'\xe5\xb0\x91\', \'\xe5\xb0\x94\', \'\xe5\xb0\x96\',\n    \'\xe5\xb0\x98\', \'\xe5\xb0\x9a\', \'\xe5\xb0\x9d\', \'\xe5\xb0\xa4\', \'\xe5\xb0\xa7\', \'\xe5\xb0\xac\', \'\xe5\xb0\xb1\', \'\xe5\xb0\xb4\', \'\xe5\xb0\xb8\', \'\xe5\xb0\xb9\', \'\xe5\xb0\xba\', \'\xe5\xb0\xbb\', \'\xe5\xb0\xbc\', \'\xe5\xb0\xbd\', \'\xe5\xb0\xbe\', \'\xe5\xb0\xbf\', \'\xe5\xb1\x80\', \'\xe5\xb1\x81\', \'\xe5\xb1\x82\', \'\xe5\xb1\x85\',\n    \'\xe5\xb1\x88\', \'\xe5\xb1\x89\', \'\xe5\xb1\x8a\', \'\xe5\xb1\x8b\', \'\xe5\xb1\x8e\', \'\xe5\xb1\x8f\', \'\xe5\xb1\x91\', \'\xe5\xb1\x95\', \'\xe5\xb1\x9e\', \'\xe5\xb1\xa0\', \'\xe5\xb1\xa1\', \'\xe5\xb1\xa3\', \'\xe5\xb1\xa5\', \'\xe5\xb1\xa6\', \'\xe5\xb1\xaf\', \'\xe5\xb1\xb1\', \'\xe5\xb1\xb9\', \'\xe5\xb1\xbf\', \'\xe5\xb2\x81\', \'\xe5\xb2\x82\',\n    \'\xe5\xb2\x8c\', \'\xe5\xb2\x90\', \'\xe5\xb2\x91\', \'\xe5\xb2\x94\', \'\xe5\xb2\x96\', \'\xe5\xb2\x97\', \'\xe5\xb2\x9a\', \'\xe5\xb2\x9b\', \'\xe5\xb2\xa9\', \'\xe5\xb2\xab\', \'\xe5\xb2\xac\', \'\xe5\xb2\xad\', \'\xe5\xb2\xb1\', \'\xe5\xb2\xb3\', \'\xe5\xb2\xb7\', \'\xe5\xb2\xb8\', \'\xe5\xb2\xbf\', \'\xe5\xb3\x84\', \'\xe5\xb3\x87\', \'\xe5\xb3\x8b\',\n    \'\xe5\xb3\x92\', \'\xe5\xb3\x99\', \'\xe5\xb3\xa1\', \'\xe5\xb3\xa3\', \'\xe5\xb3\xa4\', \'\xe5\xb3\xa5\', \'\xe5\xb3\xa6\', \'\xe5\xb3\xa8\', \'\xe5\xb3\xaa\', \'\xe5\xb3\xad\', \'\xe5\xb3\xb0\', \'\xe5\xb3\xbb\', \'\xe5\xb4\x82\', \'\xe5\xb4\x83\', \'\xe5\xb4\x86\', \'\xe5\xb4\x87\', \'\xe5\xb4\x8e\', \'\xe5\xb4\x94\', \'\xe5\xb4\x96\', \'\xe5\xb4\x9a\',\n    \'\xe5\xb4\x9b\', \'\xe5\xb4\xa7\', \'\xe5\xb4\xa9\', \'\xe5\xb4\xad\', \'\xe5\xb4\xb4\', \'\xe5\xb5\x8b\', \'\xe5\xb5\x8c\', \'\xe5\xb5\x98\', \'\xe5\xb5\xa9\', \'\xe5\xb5\xac\', \'\xe5\xb5\xaf\', \'\xe5\xb6\x82\', \'\xe5\xb6\x93\', \'\xe5\xb6\x99\', \'\xe5\xb6\xb2\', \'\xe5\xb6\xb6\', \'\xe5\xb6\xb7\', \'\xe5\xb7\x82\', \'\xe5\xb7\x85\', \'\xe5\xb7\x89\',\n    \'\xe5\xb7\x8d\', \'\xe5\xb7\x9d\', \'\xe5\xb7\x9e\', \'\xe5\xb7\xa1\', \'\xe5\xb7\xa2\', \'\xe5\xb7\xa5\', \'\xe5\xb7\xa6\', \'\xe5\xb7\xa7\', \'\xe5\xb7\xa8\', \'\xe5\xb7\xa9\', \'\xe5\xb7\xab\', \'\xe5\xb7\xae\', \'\xe5\xb7\xb1\', \'\xe5\xb7\xb2\', \'\xe5\xb7\xb3\', \'\xe5\xb7\xb4\', \'\xe5\xb7\xb7\', \'\xe5\xb7\xbd\', \'\xe5\xb7\xbe\', \'\xe5\xb7\xbf\',\n    \'\xe5\xb8\x81\', \'\xe5\xb8\x82\', \'\xe5\xb8\x83\', \'\xe5\xb8\x85\', \'\xe5\xb8\x86\', \'\xe5\xb8\x87\', \'\xe5\xb8\x88\', \'\xe5\xb8\x8c\', \'\xe5\xb8\x8f\', \'\xe5\xb8\x90\', \'\xe5\xb8\x91\', \'\xe5\xb8\x94\', \'\xe5\xb8\x95\', \'\xe5\xb8\x96\', \'\xe5\xb8\x98\', \'\xe5\xb8\x9a\', \'\xe5\xb8\x9b\', \'\xe5\xb8\x9c\', \'\xe5\xb8\x9d\', \'\xe5\xb8\xa6\',\n    \'\xe5\xb8\xa7\', \'\xe5\xb8\xa8\', \'\xe5\xb8\xad\', \'\xe5\xb8\xae\', \'\xe5\xb8\xb7\', \'\xe5\xb8\xb8\', \'\xe5\xb8\xbc\', \'\xe5\xb8\xbd\', \'\xe5\xb9\x82\', \'\xe5\xb9\x84\', \'\xe5\xb9\x85\', \'\xe5\xb9\x8c\', \'\xe5\xb9\x94\', \'\xe5\xb9\x95\', \'\xe5\xb9\x9b\', \'\xe5\xb9\x9e\', \'\xe5\xb9\xa1\', \'\xe5\xb9\xa2\', \'\xe5\xb9\xa4\', \'\xe5\xb9\xb2\',\n    \'\xe5\xb9\xb3\', \'\xe5\xb9\xb4\', \'\xe5\xb9\xb6\', \'\xe5\xb9\xb8\', \'\xe5\xb9\xba\', \'\xe5\xb9\xbb\', \'\xe5\xb9\xbc\', \'\xe5\xb9\xbd\', \'\xe5\xb9\xbf\', \'\xe5\xba\x84\', \'\xe5\xba\x86\', \'\xe5\xba\x87\', \'\xe5\xba\x8a\', \'\xe5\xba\x8f\', \'\xe5\xba\x90\', \'\xe5\xba\x91\', \'\xe5\xba\x93\', \'\xe5\xba\x94\', \'\xe5\xba\x95\', \'\xe5\xba\x96\',\n    \'\xe5\xba\x97\', \'\xe5\xba\x99\', \'\xe5\xba\x9a\', \'\xe5\xba\x9c\', \'\xe5\xba\x9e\', \'\xe5\xba\x9f\', \'\xe5\xba\xa0\', \'\xe5\xba\xa5\', \'\xe5\xba\xa6\', \'\xe5\xba\xa7\', \'\xe5\xba\xad\', \'\xe5\xba\xb3\', \'\xe5\xba\xb5\', \'\xe5\xba\xb6\', \'\xe5\xba\xb7\', \'\xe5\xba\xb8\', \'\xe5\xba\xbe\', \'\xe5\xbb\x89\', \'\xe5\xbb\x8a\', \'\xe5\xbb\x93\',\n    \'\xe5\xbb\x96\', \'\xe5\xbb\x9b\', \'\xe5\xbb\xa8\', \'\xe5\xbb\xaa\', \'\xe5\xbb\xb6\', \'\xe5\xbb\xb7\', \'\xe5\xbb\xba\', \'\xe5\xbb\xbf\', \'\xe5\xbc\x80\', \'\xe5\xbc\x81\', \'\xe5\xbc\x82\', \'\xe5\xbc\x83\', \'\xe5\xbc\x84\', \'\xe5\xbc\x88\', \'\xe5\xbc\x8a\', \'\xe5\xbc\x8b\', \'\xe5\xbc\x8f\', \'\xe5\xbc\x91\', \'\xe5\xbc\x92\', \'\xe5\xbc\x93\',\n    \'\xe5\xbc\x95\', \'\xe5\xbc\x97\', \'\xe5\xbc\x98\', \'\xe5\xbc\x9b\', \'\xe5\xbc\x9f\', \'\xe5\xbc\xa0\', \'\xe5\xbc\xa2\', \'\xe5\xbc\xa5\', \'\xe5\xbc\xa6\', \'\xe5\xbc\xa7\', \'\xe5\xbc\xa9\', \'\xe5\xbc\xad\', \'\xe5\xbc\xaf\', \'\xe5\xbc\xb1\', \'\xe5\xbc\xb5\', \'\xe5\xbc\xb9\', \'\xe5\xbc\xba\', \'\xe5\xbc\xbc\', \'\xe5\xbd\x80\', \'\xe5\xbd\x8a\',\n    \'\xe5\xbd\x92\', \'\xe5\xbd\x93\', \'\xe5\xbd\x95\', \'\xe5\xbd\x97\', \'\xe5\xbd\x98\', \'\xe5\xbd\x9d\', \'\xe5\xbd\xa2\', \'\xe5\xbd\xa4\', \'\xe5\xbd\xa6\', \'\xe5\xbd\xa9\', \'\xe5\xbd\xaa\', \'\xe5\xbd\xac\', \'\xe5\xbd\xad\', \'\xe5\xbd\xb0\', \'\xe5\xbd\xb1\', \'\xe5\xbd\xb7\', \'\xe5\xbd\xb9\', \'\xe5\xbd\xbb\', \'\xe5\xbd\xbc\', \'\xe5\xbe\x80\',\n    \'\xe5\xbe\x81\', \'\xe5\xbe\x82\', \'\xe5\xbe\x84\', \'\xe5\xbe\x85\', \'\xe5\xbe\x87\', \'\xe5\xbe\x88\', \'\xe5\xbe\x89\', \'\xe5\xbe\x8a\', \'\xe5\xbe\x8b\', \'\xe5\xbe\x8c\', \'\xe5\xbe\x90\', \'\xe5\xbe\x92\', \'\xe5\xbe\x95\', \'\xe5\xbe\x97\', \'\xe5\xbe\x98\', \'\xe5\xbe\x99\', \'\xe5\xbe\x9c\', \'\xe5\xbe\xa1\', \'\xe5\xbe\xa8\', \'\xe5\xbe\xaa\',\n    \'\xe5\xbe\xad\', \'\xe5\xbe\xae\', \'\xe5\xbe\xb3\', \'\xe5\xbe\xb5\', \'\xe5\xbe\xb7\', \'\xe5\xbe\xbc\', \'\xe5\xbe\xbd\', \'\xe5\xbf\x83\', \'\xe5\xbf\x85\', \'\xe5\xbf\x86\', \'\xe5\xbf\x8c\', \'\xe5\xbf\x8d\', \'\xe5\xbf\x8f\', \'\xe5\xbf\x90\', \'\xe5\xbf\x91\', \'\xe5\xbf\x92\', \'\xe5\xbf\x96\', \'\xe5\xbf\x97\', \'\xe5\xbf\x98\', \'\xe5\xbf\x99\',\n    \'\xe5\xbf\x9d\', \'\xe5\xbf\xa0\', \'\xe5\xbf\xa1\', \'\xe5\xbf\xa4\', \'\xe5\xbf\xa7\', \'\xe5\xbf\xaa\', \'\xe5\xbf\xab\', \'\xe5\xbf\xb1\', \'\xe5\xbf\xb5\', \'\xe5\xbf\xbb\', \'\xe5\xbf\xbd\', \'\xe5\xbf\xbf\', \'\xe6\x80\x80\', \'\xe6\x80\x81\', \'\xe6\x80\x82\', \'\xe6\x80\x85\', \'\xe6\x80\x86\', \'\xe6\x80\x8d\', \'\xe6\x80\x8e\', \'\xe6\x80\x8f\',\n    \'\xe6\x80\x92\', \'\xe6\x80\x94\', \'\xe6\x80\x95\', \'\xe6\x80\x96\', \'\xe6\x80\x99\', \'\xe6\x80\x9b\', \'\xe6\x80\x9c\', \'\xe6\x80\x9d\', \'\xe6\x80\xa0\', \'\xe6\x80\xa1\', \'\xe6\x80\xa5\', \'\xe6\x80\xa6\', \'\xe6\x80\xa7\', \'\xe6\x80\xa8\', \'\xe6\x80\xaa\', \'\xe6\x80\xab\', \'\xe6\x80\xaf\', \'\xe6\x80\xb5\', \'\xe6\x80\xbb\', \'\xe6\x80\xbc\',\n    \'\xe6\x80\xbf\', \'\xe6\x81\x82\', \'\xe6\x81\x83\', \'\xe6\x81\x8b\', \'\xe6\x81\x8d\', \'\xe6\x81\x90\', \'\xe6\x81\x92\', \'\xe6\x81\x95\', \'\xe6\x81\x99\', \'\xe6\x81\x9a\', \'\xe6\x81\x9d\', \'\xe6\x81\xa2\', \'\xe6\x81\xa3\', \'\xe6\x81\xa4\', \'\xe6\x81\xa8\', \'\xe6\x81\xa9\', \'\xe6\x81\xaa\', \'\xe6\x81\xab\', \'\xe6\x81\xac\', \'\xe6\x81\xad\',\n    \'\xe6\x81\xaf\', \'\xe6\x81\xb0\', \'\xe6\x81\xb3\', \'\xe6\x81\xb6\', \'\xe6\x81\xb8\', \'\xe6\x81\xb9\', \'\xe6\x81\xba\', \'\xe6\x81\xbb\', \'\xe6\x81\xbc\', \'\xe6\x81\xbd\', \'\xe6\x81\xbf\', \'\xe6\x82\x84\', \'\xe6\x82\x89\', \'\xe6\x82\x8c\', \'\xe6\x82\x8d\', \'\xe6\x82\x92\', \'\xe6\x82\x94\', \'\xe6\x82\x96\', \'\xe6\x82\x9a\', \'\xe6\x82\x9d\',\n    \'\xe6\x82\x9e\', \'\xe6\x82\x9f\', \'\xe6\x82\xa0\', \'\xe6\x82\xa3\', \'\xe6\x82\xa6\', \'\xe6\x82\xa8\', \'\xe6\x82\xab\', \'\xe6\x82\xac\', \'\xe6\x82\xad\', \'\xe6\x82\xaf\', \'\xe6\x82\xb2\', \'\xe6\x82\xb4\', \'\xe6\x82\xb8\', \'\xe6\x82\xbb\', \'\xe6\x82\xbc\', \'\xe6\x83\x85\', \'\xe6\x83\x86\', \'\xe6\x83\x87\', \'\xe6\x83\x8a\', \'\xe6\x83\x8b\',\n    \'\xe6\x83\x91\', \'\xe6\x83\x95\', \'\xe6\x83\x98\', \'\xe6\x83\x9a\', \'\xe6\x83\x9c\', \'\xe6\x83\x9f\', \'\xe6\x83\xa0\', \'\xe6\x83\xa6\', \'\xe6\x83\xa7\', \'\xe6\x83\xa8\', \'\xe6\x83\xa9\', \'\xe6\x83\xab\', \'\xe6\x83\xac\', \'\xe6\x83\xad\', \'\xe6\x83\xae\', \'\xe6\x83\xaf\', \'\xe6\x83\xb0\', \'\xe6\x83\xb3\', \'\xe6\x83\xb4\', \'\xe6\x83\xb6\',\n    \'\xe6\x83\xb9\', \'\xe6\x83\xba\', \'\xe6\x84\x80\', \'\xe6\x84\x81\', \'\xe6\x84\x86\', \'\xe6\x84\x88\', \'\xe6\x84\x89\', \'\xe6\x84\x8d\', \'\xe6\x84\x8e\', \'\xe6\x84\x8f\', \'\xe6\x84\x95\', \'\xe6\x84\x9a\', \'\xe6\x84\x9b\', \'\xe6\x84\x9f\', \'\xe6\x84\xa0\', \'\xe6\x84\xa3\', \'\xe6\x84\xa4\', \'\xe6\x84\xa6\', \'\xe6\x84\xa7\', \'\xe6\x84\xab\',\n    \'\xe6\x84\xac\', \'\xe6\x84\xbf\', \'\xe6\x85\x88\', \'\xe6\x85\x8c\', \'\xe6\x85\x8e\', \'\xe6\x85\x91\', \'\xe6\x85\x95\', \'\xe6\x85\x99\', \'\xe6\x85\x9d\', \'\xe6\x85\xa2\', \'\xe6\x85\xa7\', \'\xe6\x85\xa8\', \'\xe6\x85\xb0\', \'\xe6\x85\xb5\', \'\xe6\x85\xb7\', \'\xe6\x86\x8b\', \'\xe6\x86\x8e\', \'\xe6\x86\x94\', \'\xe6\x86\xa7\', \'\xe6\x86\xa8\',\n    \'\xe6\x86\xa9\', \'\xe6\x86\xac\', \'\xe6\x86\xbe\', \'\xe6\x87\x82\', \'\xe6\x87\x88\', \'\xe6\x87\x8a\', \'\xe6\x87\x8b\', \'\xe6\x87\x91\', \'\xe6\x87\x92\', \'\xe6\x87\x9c\', \'\xe6\x87\xa6\', \'\xe6\x87\xb5\', \'\xe6\x87\xbf\', \'\xe6\x88\x86\', \'\xe6\x88\x88\', \'\xe6\x88\x8a\', \'\xe6\x88\x8c\', \'\xe6\x88\x8d\', \'\xe6\x88\x8e\', \'\xe6\x88\x8f\',\n    \'\xe6\x88\x90\', \'\xe6\x88\x91\', \'\xe6\x88\x92\', \'\xe6\x88\x95\', \'\xe6\x88\x96\', \'\xe6\x88\x97\', \'\xe6\x88\x98\', \'\xe6\x88\x9a\', \'\xe6\x88\x9b\', \'\xe6\x88\x9f\', \'\xe6\x88\xa2\', \'\xe6\x88\xaa\', \'\xe6\x88\xae\', \'\xe6\x88\xb3\', \'\xe6\x88\xb4\', \'\xe6\x88\xb7\', \'\xe6\x88\xbe\', \'\xe6\x88\xbf\', \'\xe6\x89\x80\', \'\xe6\x89\x81\',\n    \'\xe6\x89\x83\', \'\xe6\x89\x87\', \'\xe6\x89\x88\', \'\xe6\x89\x89\', \'\xe6\x89\x8b\', \'\xe6\x89\x8c\', \'\xe6\x89\x8d\', \'\xe6\x89\x8e\', \'\xe6\x89\x91\', \'\xe6\x89\x92\', \'\xe6\x89\x93\', \'\xe6\x89\x94\', \'\xe6\x89\x98\', \'\xe6\x89\x9b\', \'\xe6\x89\x9e\', \'\xe6\x89\xa2\', \'\xe6\x89\xa3\', \'\xe6\x89\xa7\', \'\xe6\x89\xa9\', \'\xe6\x89\xaa\',\n    \'\xe6\x89\xab\', \'\xe6\x89\xac\', \'\xe6\x89\xad\', \'\xe6\x89\xae\', \'\xe6\x89\xaf\', \'\xe6\x89\xb0\', \'\xe6\x89\xb3\', \'\xe6\x89\xb6\', \'\xe6\x89\xb9\', \'\xe6\x89\xbc\', \'\xe6\x89\xbe\', \'\xe6\x89\xbf\', \'\xe6\x8a\x80\', \'\xe6\x8a\x84\', \'\xe6\x8a\x89\', \'\xe6\x8a\x8a\', \'\xe6\x8a\x91\', \'\xe6\x8a\x92\', \'\xe6\x8a\x93\', \'\xe6\x8a\x95\',\n    \'\xe6\x8a\x96\', \'\xe6\x8a\x97\', \'\xe6\x8a\x98\', \'\xe6\x8a\x9a\', \'\xe6\x8a\x9b\', \'\xe6\x8a\x9f\', \'\xe6\x8a\xa0\', \'\xe6\x8a\xa1\', \'\xe6\x8a\xa2\', \'\xe6\x8a\xa4\', \'\xe6\x8a\xa5\', \'\xe6\x8a\xa8\', \'\xe6\x8a\xab\', \'\xe6\x8a\xac\', \'\xe6\x8a\xb1\', \'\xe6\x8a\xb5\', \'\xe6\x8a\xb9\', \'\xe6\x8a\xbc\', \'\xe6\x8a\xbd\', \'\xe6\x8a\xbf\',\n    \'\xe6\x8b\x82\', \'\xe6\x8b\x84\', \'\xe6\x8b\x85\', \'\xe6\x8b\x86\', \'\xe6\x8b\x87\', \'\xe6\x8b\x88\', \'\xe6\x8b\x89\', \'\xe6\x8b\x8a\', \'\xe6\x8b\x8c\', \'\xe6\x8b\x8d\', \'\xe6\x8b\x8e\', \'\xe6\x8b\x90\', \'\xe6\x8b\x92\', \'\xe6\x8b\x93\', \'\xe6\x8b\x94\', \'\xe6\x8b\x96\', \'\xe6\x8b\x97\', \'\xe6\x8b\x98\', \'\xe6\x8b\x99\', \'\xe6\x8b\x9a\',\n    \'\xe6\x8b\x9b\', \'\xe6\x8b\x9c\', \'\xe6\x8b\x9f\', \'\xe6\x8b\xa2\', \'\xe6\x8b\xa3\', \'\xe6\x8b\xa5\', \'\xe6\x8b\xa6\', \'\xe6\x8b\xa7\', \'\xe6\x8b\xa8\', \'\xe6\x8b\xa9\', \'\xe6\x8b\xac\', \'\xe6\x8b\xad\', \'\xe6\x8b\xae\', \'\xe6\x8b\xaf\', \'\xe6\x8b\xb1\', \'\xe6\x8b\xb3\', \'\xe6\x8b\xb4\', \'\xe6\x8b\xb7\', \'\xe6\x8b\xbc\', \'\xe6\x8b\xbd\',\n    \'\xe6\x8b\xbe\', \'\xe6\x8b\xbf\', \'\xe6\x8c\x81\', \'\xe6\x8c\x82\', \'\xe6\x8c\x87\', \'\xe6\x8c\x88\', \'\xe6\x8c\x89\', \'\xe6\x8c\x8e\', \'\xe6\x8c\x91\', \'\xe6\x8c\x96\', \'\xe6\x8c\x9a\', \'\xe6\x8c\x9b\', \'\xe6\x8c\x9d\', \'\xe6\x8c\x9e\', \'\xe6\x8c\x9f\', \'\xe6\x8c\xa0\', \'\xe6\x8c\xa1\', \'\xe6\x8c\xa3\', \'\xe6\x8c\xa4\', \'\xe6\x8c\xa5\',\n    \'\xe6\x8c\xa8\', \'\xe6\x8c\xaa\', \'\xe6\x8c\xab\', \'\xe6\x8c\xaf\', \'\xe6\x8c\xb9\', \'\xe6\x8c\xba\', \'\xe6\x8c\xbd\', \'\xe6\x8d\x82\', \'\xe6\x8d\x85\', \'\xe6\x8d\x86\', \'\xe6\x8d\x89\', \'\xe6\x8d\x8b\', \'\xe6\x8d\x8d\', \'\xe6\x8d\x8e\', \'\xe6\x8d\x8f\', \'\xe6\x8d\x90\', \'\xe6\x8d\x95\', \'\xe6\x8d\x9e\', \'\xe6\x8d\x9f\', \'\xe6\x8d\xa1\',\n    \'\xe6\x8d\xa2\', \'\xe6\x8d\xa3\', \'\xe6\x8d\xa7\', \'\xe6\x8d\xad\', \'\xe6\x8d\xae\', \'\xe6\x8d\xb1\', \'\xe6\x8d\xb6\', \'\xe6\x8d\xb7\', \'\xe6\x8d\xba\', \'\xe6\x8d\xbb\', \'\xe6\x8d\xbd\', \'\xe6\x8e\x80\', \'\xe6\x8e\x82\', \'\xe6\x8e\x87\', \'\xe6\x8e\x88\', \'\xe6\x8e\x89\', \'\xe6\x8e\x8c\', \'\xe6\x8e\x8f\', \'\xe6\x8e\x90\', \'\xe6\x8e\x92\',\n    \'\xe6\x8e\x96\', \'\xe6\x8e\x98\', \'\xe6\x8e\xa0\', \'\xe6\x8e\xa2\', \'\xe6\x8e\xa3\', \'\xe6\x8e\xa5\', \'\xe6\x8e\xa7\', \'\xe6\x8e\xa8\', \'\xe6\x8e\xa9\', \'\xe6\x8e\xaa\', \'\xe6\x8e\xac\', \'\xe6\x8e\xb0\', \'\xe6\x8e\xb3\', \'\xe6\x8e\xb7\', \'\xe6\x8e\xba\', \'\xe6\x8e\xbc\', \'\xe6\x8e\xbe\', \'\xe6\x8f\x84\', \'\xe6\x8f\x86\', \'\xe6\x8f\x89\',\n    \'\xe6\x8f\x8d\', \'\xe6\x8f\x8f\', \'\xe6\x8f\x90\', \'\xe6\x8f\x92\', \'\xe6\x8f\x96\', \'\xe6\x8f\x9c\', \'\xe6\x8f\xa1\', \'\xe6\x8f\xa3\', \'\xe6\x8f\xa9\', \'\xe6\x8f\xaa\', \'\xe6\x8f\xad\', \'\xe6\x8f\xb4\', \'\xe6\x8f\xb6\', \'\xe6\x8f\xbd\', \'\xe6\x90\x80\', \'\xe6\x90\x81\', \'\xe6\x90\x82\', \'\xe6\x90\x85\', \'\xe6\x90\x8f\', \'\xe6\x90\x90\',\n    \'\xe6\x90\x92\', \'\xe6\x90\x93\', \'\xe6\x90\x94\', \'\xe6\x90\x9c\', \'\xe6\x90\x9e\', \'\xe6\x90\xa0\', \'\xe6\x90\xa2\', \'\xe6\x90\xa4\', \'\xe6\x90\xaa\', \'\xe6\x90\xac\', \'\xe6\x90\xad\', \'\xe6\x90\xb4\', \'\xe6\x90\xba\', \'\xe6\x90\xbd\', \'\xe6\x91\x81\', \'\xe6\x91\x84\', \'\xe6\x91\x86\', \'\xe6\x91\x87\', \'\xe6\x91\x88\', \'\xe6\x91\x8a\',\n    \'\xe6\x91\x92\', \'\xe6\x91\x94\', \'\xe6\x91\x98\', \'\xe6\x91\x9e\', \'\xe6\x91\xa7\', \'\xe6\x91\xa9\', \'\xe6\x91\xb8\', \'\xe6\x91\xb9\', \'\xe6\x92\x82\', \'\xe6\x92\x87\', \'\xe6\x92\x91\', \'\xe6\x92\x92\', \'\xe6\x92\x95\', \'\xe6\x92\x9d\', \'\xe6\x92\x9e\', \'\xe6\x92\xa4\', \'\xe6\x92\xa9\', \'\xe6\x92\xac\', \'\xe6\x92\xad\', \'\xe6\x92\xae\',\n    \'\xe6\x92\xb0\', \'\xe6\x92\xb5\', \'\xe6\x92\xb7\', \'\xe6\x92\xba\', \'\xe6\x92\xbc\', \'\xe6\x93\x82\', \'\xe6\x93\x85\', \'\xe6\x93\x8d\', \'\xe6\x93\x8e\', \'\xe6\x93\x92\', \'\xe6\x93\x98\', \'\xe6\x93\x9e\', \'\xe6\x93\xa2\', \'\xe6\x93\xa6\', \'\xe6\x94\x80\', \'\xe6\x94\x92\', \'\xe6\x94\x98\', \'\xe6\x94\xa5\', \'\xe6\x94\xab\', \'\xe6\x94\xaf\',\n    \'\xe6\x94\xb6\', \'\xe6\x94\xb8\', \'\xe6\x94\xb9\', \'\xe6\x94\xbb\', \'\xe6\x94\xbe\', \'\xe6\x94\xbf\', \'\xe6\x95\x85\', \'\xe6\x95\x88\', \'\xe6\x95\x8c\', \'\xe6\x95\x8f\', \'\xe6\x95\x91\', \'\xe6\x95\x95\', \'\xe6\x95\x96\', \'\xe6\x95\x99\', \'\xe6\x95\x9b\', \'\xe6\x95\x9d\', \'\xe6\x95\x9e\', \'\xe6\x95\xa2\', \'\xe6\x95\xa3\', \'\xe6\x95\xa6\',\n    \'\xe6\x95\xac\', \'\xe6\x95\xb0\', \'\xe6\x95\xb2\', \'\xe6\x95\xb4\', \'\xe6\x95\xb7\', \'\xe6\x96\x84\', \'\xe6\x96\x87\', \'\xe6\x96\x8b\', \'\xe6\x96\x8c\', \'\xe6\x96\x90\', \'\xe6\x96\x91\', \'\xe6\x96\x93\', \'\xe6\x96\x97\', \'\xe6\x96\x99\', \'\xe6\x96\x9b\', \'\xe6\x96\x9c\', \'\xe6\x96\x9f\', \'\xe6\x96\xa1\', \'\xe6\x96\xa4\', \'\xe6\x96\xa5\',\n    \'\xe6\x96\xa7\', \'\xe6\x96\xa9\', \'\xe6\x96\xab\', \'\xe6\x96\xad\', \'\xe6\x96\xaf\', \'\xe6\x96\xb0\', \'\xe6\x96\xb2\', \'\xe6\x96\xb9\', \'\xe6\x96\xbc\', \'\xe6\x96\xbd\', \'\xe6\x97\x81\', \'\xe6\x97\x83\', \'\xe6\x97\x84\', \'\xe6\x97\x85\', \'\xe6\x97\x8b\', \'\xe6\x97\x8c\', \'\xe6\x97\x8e\', \'\xe6\x97\x8f\', \'\xe6\x97\x92\', \'\xe6\x97\x96\',\n    \'\xe6\x97\x97\', \'\xe6\x97\x98\', \'\xe6\x97\xa0\', \'\xe6\x97\xa2\', \'\xe6\x97\xa5\', \'\xe6\x97\xa6\', \'\xe6\x97\xa7\', \'\xe6\x97\xa8\', \'\xe6\x97\xa9\', \'\xe6\x97\xac\', \'\xe6\x97\xad\', \'\xe6\x97\xb1\', \'\xe6\x97\xb3\', \'\xe6\x97\xb6\', \'\xe6\x97\xb7\', \'\xe6\x97\xba\', \'\xe6\x97\xbb\', \'\xe6\x98\x80\', \'\xe6\x98\x82\', \'\xe6\x98\x83\',\n    \'\xe6\x98\x86\', \'\xe6\x98\x87\', \'\xe6\x98\x8a\', \'\xe6\x98\x8c\', \'\xe6\x98\x8e\', \'\xe6\x98\x8f\', \'\xe6\x98\x93\', \'\xe6\x98\x94\', \'\xe6\x98\x95\', \'\xe6\x98\x99\', \'\xe6\x98\x9f\', \'\xe6\x98\xa0\', \'\xe6\x98\xa5\', \'\xe6\x98\xa7\', \'\xe6\x98\xa8\', \'\xe6\x98\xad\', \'\xe6\x98\xaf\', \'\xe6\x98\xb1\', \'\xe6\x98\xb4\', \'\xe6\x98\xb5\',\n    \'\xe6\x98\xbc\', \'\xe6\x98\xbe\', \'\xe6\x99\x81\', \'\xe6\x99\x83\', \'\xe6\x99\x8b\', \'\xe6\x99\x8c\', \'\xe6\x99\x8f\', \'\xe6\x99\x92\', \'\xe6\x99\x93\', \'\xe6\x99\x94\', \'\xe6\x99\x95\', \'\xe6\x99\x96\', \'\xe6\x99\x97\', \'\xe6\x99\x9a\', \'\xe6\x99\x9e\', \'\xe6\x99\x9f\', \'\xe6\x99\xa1\', \'\xe6\x99\xa4\', \'\xe6\x99\xa6\', \'\xe6\x99\xa8\',\n    \'\xe6\x99\xae\', \'\xe6\x99\xaf\', \'\xe6\x99\xb0\', \'\xe6\x99\xb4\', \'\xe6\x99\xb6\', \'\xe6\x99\xba\', \'\xe6\x99\xbe\', \'\xe6\x9a\x82\', \'\xe6\x9a\x84\', \'\xe6\x9a\x87\', \'\xe6\x9a\x91\', \'\xe6\x9a\x96\', \'\xe6\x9a\x97\', \'\xe6\x9a\xa7\', \'\xe6\x9a\xa8\', \'\xe6\x9a\xae\', \'\xe6\x9a\xb2\', \'\xe6\x9a\xb4\', \'\xe6\x9a\xb9\', \'\xe6\x9a\xbe\',\n    \'\xe6\x9b\x99\', \'\xe6\x9b\x9b\', \'\xe6\x9b\x9c\', \'\xe6\x9b\x9d\', \'\xe6\x9b\xa6\', \'\xe6\x9b\xa9\', \'\xe6\x9b\xaa\', \'\xe6\x9b\xb0\', \'\xe6\x9b\xb2\', \'\xe6\x9b\xb3\', \'\xe6\x9b\xb4\', \'\xe6\x9b\xb7\', \'\xe6\x9b\xb8\', \'\xe6\x9b\xb9\', \'\xe6\x9b\xbc\', \'\xe6\x9b\xbe\', \'\xe6\x9b\xbf\', \'\xe6\x9c\x80\', \'\xe6\x9c\x88\', \'\xe6\x9c\x89\',\n    \'\xe6\x9c\x8b\', \'\xe6\x9c\x8d\', \'\xe6\x9c\x90\', \'\xe6\x9c\x94\', \'\xe6\x9c\x95\', \'\xe6\x9c\x97\', \'\xe6\x9c\x9b\', \'\xe6\x9c\x9d\', \'\xe6\x9c\x9f\', \'\xe6\x9c\xa6\', \'\xe6\x9c\xa8\', \'\xe6\x9c\xaa\', \'\xe6\x9c\xab\', \'\xe6\x9c\xac\', \'\xe6\x9c\xad\', \'\xe6\x9c\xaf\', \'\xe6\x9c\xb1\', \'\xe6\x9c\xb4\', \'\xe6\x9c\xb5\', \'\xe6\x9c\xba\',\n    \'\xe6\x9c\xbd\', \'\xe6\x9d\x80\', \'\xe6\x9d\x82\', \'\xe6\x9d\x83\', \'\xe6\x9d\x85\', \'\xe6\x9d\x86\', \'\xe6\x9d\x89\', \'\xe6\x9d\x8c\', \'\xe6\x9d\x8e\', \'\xe6\x9d\x8f\', \'\xe6\x9d\x90\', \'\xe6\x9d\x91\', \'\xe6\x9d\x93\', \'\xe6\x9d\x96\', \'\xe6\x9d\x9c\', \'\xe6\x9d\x9e\', \'\xe6\x9d\x9f\', \'\xe6\x9d\xa0\', \'\xe6\x9d\xa1\', \'\xe6\x9d\xa5\',\n    \'\xe6\x9d\xa8\', \'\xe6\x9d\xaa\', \'\xe6\x9d\xad\', \'\xe6\x9d\xaf\', \'\xe6\x9d\xb0\', \'\xe6\x9d\xb2\', \'\xe6\x9d\xb3\', \'\xe6\x9d\xb5\', \'\xe6\x9d\xb7\', \'\xe6\x9d\xbc\', \'\xe6\x9d\xbe\', \'\xe6\x9d\xbf\', \'\xe6\x9e\x81\', \'\xe6\x9e\x84\', \'\xe6\x9e\x87\', \'\xe6\x9e\x89\', \'\xe6\x9e\x8b\', \'\xe6\x9e\x90\', \'\xe6\x9e\x95\', \'\xe6\x9e\x97\',\n    \'\xe6\x9e\x9a\', \'\xe6\x9e\x9c\', \'\xe6\x9e\x9d\', \'\xe6\x9e\x9e\', \'\xe6\x9e\xa2\', \'\xe6\x9e\xa3\', \'\xe6\x9e\xa5\', \'\xe6\x9e\xaa\', \'\xe6\x9e\xab\', \'\xe6\x9e\xad\', \'\xe6\x9e\xaf\', \'\xe6\x9e\xb0\', \'\xe6\x9e\xb3\', \'\xe6\x9e\xb5\', \'\xe6\x9e\xb6\', \'\xe6\x9e\xb7\', \'\xe6\x9e\xb8\', \'\xe6\x9f\x84\', \'\xe6\x9f\x88\', \'\xe6\x9f\x8f\',\n    \'\xe6\x9f\x90\', \'\xe6\x9f\x91\', \'\xe6\x9f\x93\', \'\xe6\x9f\x94\', \'\xe6\x9f\x98\', \'\xe6\x9f\x9a\', \'\xe6\x9f\x9c\', \'\xe6\x9f\x9e\', \'\xe6\x9f\xa0\', \'\xe6\x9f\xa2\', \'\xe6\x9f\xa5\', \'\xe6\x9f\xa9\', \'\xe6\x9f\xac\', \'\xe6\x9f\xaf\', \'\xe6\x9f\xb0\', \'\xe6\x9f\xb1\', \'\xe6\x9f\xb3\', \'\xe6\x9f\xb4\', \'\xe6\x9f\xbf\', \'\xe6\xa0\x80\',\n    \'\xe6\xa0\x85\', \'\xe6\xa0\x87\', \'\xe6\xa0\x88\', \'\xe6\xa0\x89\', \'\xe6\xa0\x8b\', \'\xe6\xa0\x8e\', \'\xe6\xa0\x8f\', \'\xe6\xa0\x91\', \'\xe6\xa0\x93\', \'\xe6\xa0\x96\', \'\xe6\xa0\x97\', \'\xe6\xa0\xa1\', \'\xe6\xa0\xa9\', \'\xe6\xa0\xaa\', \'\xe6\xa0\xb7\', \'\xe6\xa0\xb8\', \'\xe6\xa0\xb9\', \'\xe6\xa0\xbc\', \'\xe6\xa0\xbd\', \'\xe6\xa0\xbe\',\n    \'\xe6\xa1\x80\', \'\xe6\xa1\x82\', \'\xe6\xa1\x83\', \'\xe6\xa1\x85\', \'\xe6\xa1\x86\', \'\xe6\xa1\x88\', \'\xe6\xa1\x8c\', \'\xe6\xa1\x8e\', \'\xe6\xa1\x90\', \'\xe6\xa1\x91\', \'\xe6\xa1\x93\', \'\xe6\xa1\x94\', \'\xe6\xa1\x9e\', \'\xe6\xa1\xa0\', \'\xe6\xa1\xa1\', \'\xe6\xa1\xa2\', \'\xe6\xa1\xa3\', \'\xe6\xa1\xa5\', \'\xe6\xa1\xa6\', \'\xe6\xa1\xa7\',\n    \'\xe6\xa1\xa8\', \'\xe6\xa1\xa9\', \'\xe6\xa1\xb6\', \'\xe6\xa2\x81\', \'\xe6\xa2\x83\', \'\xe6\xa2\x85\', \'\xe6\xa2\x86\', \'\xe6\xa2\x8f\', \'\xe6\xa2\x93\', \'\xe6\xa2\x97\', \'\xe6\xa2\xa2\', \'\xe6\xa2\xa6\', \'\xe6\xa2\xa7\', \'\xe6\xa2\xa8\', \'\xe6\xa2\xad\', \'\xe6\xa2\xaf\', \'\xe6\xa2\xb0\', \'\xe6\xa2\xb3\', \'\xe6\xa2\xb5\', \'\xe6\xa3\x80\',\n    \'\xe6\xa3\x82\', \'\xe6\xa3\x89\', \'\xe6\xa3\x8b\', \'\xe6\xa3\x8d\', \'\xe6\xa3\x92\', \'\xe6\xa3\x93\', \'\xe6\xa3\x95\', \'\xe6\xa3\x98\', \'\xe6\xa3\x9a\', \'\xe6\xa3\xa0\', \'\xe6\xa3\xa3\', \'\xe6\xa3\xae\', \'\xe6\xa3\xb0\', \'\xe6\xa3\xb1\', \'\xe6\xa3\xb5\', \'\xe6\xa3\xb9\', \'\xe6\xa3\xba\', \'\xe6\xa4\x80\', \'\xe6\xa4\x81\', \'\xe6\xa4\x85\',\n    \'\xe6\xa4\x8d\', \'\xe6\xa4\x8e\', \'\xe6\xa4\x90\', \'\xe6\xa4\x92\', \'\xe6\xa4\x9f\', \'\xe6\xa4\xad\', \'\xe6\xa4\xb0\', \'\xe6\xa4\xb9\', \'\xe6\xa4\xbd\', \'\xe6\xa4\xbf\', \'\xe6\xa5\x82\', \'\xe6\xa5\x94\', \'\xe6\xa5\x97\', \'\xe6\xa5\x9a\', \'\xe6\xa5\x9e\', \'\xe6\xa5\xa0\', \'\xe6\xa5\xa3\', \'\xe6\xa5\xab\', \'\xe6\xa5\xae\', \'\xe6\xa5\xaf\',\n    \'\xe6\xa5\xb7\', \'\xe6\xa5\xb8\', \'\xe6\xa5\xb9\', \'\xe6\xa5\xbc\', \'\xe6\xa6\x82\', \'\xe6\xa6\x84\', \'\xe6\xa6\x86\', \'\xe6\xa6\x87\', \'\xe6\xa6\x88\', \'\xe6\xa6\x94\', \'\xe6\xa6\x95\', \'\xe6\xa6\x9b\', \'\xe6\xa6\x9c\', \'\xe6\xa6\xa7\', \'\xe6\xa6\xa8\', \'\xe6\xa6\xab\', \'\xe6\xa6\xad\', \'\xe6\xa6\xb1\', \'\xe6\xa6\xb4\', \'\xe6\xa6\xb7\',\n    \'\xe6\xa6\xbb\', \'\xe6\xa6\xbc\', \'\xe6\xa7\x81\', \'\xe6\xa7\x83\', \'\xe6\xa7\x8a\', \'\xe6\xa7\x8c\', \'\xe6\xa7\x90\', \'\xe6\xa7\x9b\', \'\xe6\xa7\x9f\', \'\xe6\xa7\xbd\', \'\xe6\xa7\xbf\', \'\xe6\xa8\x8a\', \'\xe6\xa8\x97\', \'\xe6\xa8\x9f\', \'\xe6\xa8\xa1\', \'\xe6\xa8\xaa\', \'\xe6\xa8\xad\', \'\xe6\xa8\xaf\', \'\xe6\xa8\xb1\', \'\xe6\xa8\xb5\',\n    \'\xe6\xa8\xbd\', \'\xe6\xa8\xbe\', \'\xe6\xa9\x84\', \'\xe6\xa9\x87\', \'\xe6\xa9\x90\', \'\xe6\xa9\x98\', \'\xe6\xa9\x99\', \'\xe6\xa9\xa1\', \'\xe6\xa9\xaa\', \'\xe6\xa9\xb1\', \'\xe6\xa9\xb9\', \'\xe6\xaa\x80\', \'\xe6\xaa\x84\', \'\xe6\xaa\x87\', \'\xe6\xaa\x90\', \'\xe6\xaa\xa0\', \'\xe6\xaa\xac\', \'\xe6\xac\x83\', \'\xe6\xac\xa0\', \'\xe6\xac\xa1\',\n    \'\xe6\xac\xa2\', \'\xe6\xac\xa3\', \'\xe6\xac\xa4\', \'\xe6\xac\xa7\', \'\xe6\xac\xb2\', \'\xe6\xac\xb7\', \'\xe6\xac\xba\', \'\xe6\xac\xbb\', \'\xe6\xac\xbe\', \'\xe6\xad\x83\', \'\xe6\xad\x86\', \'\xe6\xad\x87\', \'\xe6\xad\x89\', \'\xe6\xad\x8c\', \'\xe6\xad\x94\', \'\xe6\xad\x98\', \'\xe6\xad\x99\', \'\xe6\xad\xa2\', \'\xe6\xad\xa3\', \'\xe6\xad\xa4\',\n    \'\xe6\xad\xa5\', \'\xe6\xad\xa6\', \'\xe6\xad\xa7\', \'\xe6\xad\xaa\', \'\xe6\xad\xb9\', \'\xe6\xad\xbb\', \'\xe6\xad\xbc\', \'\xe6\xae\x81\', \'\xe6\xae\x82\', \'\xe6\xae\x83\', \'\xe6\xae\x84\', \'\xe6\xae\x86\', \'\xe6\xae\x87\', \'\xe6\xae\x89\', \'\xe6\xae\x8a\', \'\xe6\xae\x8b\', \'\xe6\xae\x92\', \'\xe6\xae\x93\', \'\xe6\xae\x96\', \'\xe6\xae\x9a\',\n    \'\xe6\xae\x9b\', \'\xe6\xae\xa1\', \'\xe6\xae\xaa\', \'\xe6\xae\xb4\', \'\xe6\xae\xb5\', \'\xe6\xae\xb7\', \'\xe6\xae\xbd\', \'\xe6\xae\xbf\', \'\xe6\xaf\x81\', \'\xe6\xaf\x82\', \'\xe6\xaf\x85\', \'\xe6\xaf\x8b\', \'\xe6\xaf\x8d\', \'\xe6\xaf\x8f\', \'\xe6\xaf\x90\', \'\xe6\xaf\x92\', \'\xe6\xaf\x93\', \'\xe6\xaf\x94\', \'\xe6\xaf\x95\', \'\xe6\xaf\x97\',\n    \'\xe6\xaf\x99\', \'\xe6\xaf\x9b\', \'\xe6\xaf\xa1\', \'\xe6\xaf\xab\', \'\xe6\xaf\xaf\', \'\xe6\xaf\xb6\', \'\xe6\xb0\x85\', \'\xe6\xb0\x86\', \'\xe6\xb0\x87\', \'\xe6\xb0\x8f\', \'\xe6\xb0\x90\', \'\xe6\xb0\x91\', \'\xe6\xb0\x93\', \'\xe6\xb0\x94\', \'\xe6\xb0\x96\', \'\xe6\xb0\x9b\', \'\xe6\xb0\x9f\', \'\xe6\xb0\xa1\', \'\xe6\xb0\xa2\', \'\xe6\xb0\xa4\',\n    \'\xe6\xb0\xa6\', \'\xe6\xb0\xa7\', \'\xe6\xb0\xa8\', \'\xe6\xb0\xa9\', \'\xe6\xb0\xae\', \'\xe6\xb0\xaf\', \'\xe6\xb0\xb0\', \'\xe6\xb0\xb2\', \'\xe6\xb0\xb4\', \'\xe6\xb0\xb8\', \'\xe6\xb1\x80\', \'\xe6\xb1\x81\', \'\xe6\xb1\x82\', \'\xe6\xb1\x87\', \'\xe6\xb1\x89\', \'\xe6\xb1\x90\', \'\xe6\xb1\x95\', \'\xe6\xb1\x97\', \'\xe6\xb1\x9b\', \'\xe6\xb1\x9c\',\n    \'\xe6\xb1\x9d\', \'\xe6\xb1\x9e\', \'\xe6\xb1\x9f\', \'\xe6\xb1\xa0\', \'\xe6\xb1\xa1\', \'\xe6\xb1\xa4\', \'\xe6\xb1\xa7\', \'\xe6\xb1\xa8\', \'\xe6\xb1\xa9\', \'\xe6\xb1\xaa\', \'\xe6\xb1\xad\', \'\xe6\xb1\xb0\', \'\xe6\xb1\xb2\', \'\xe6\xb1\xb4\', \'\xe6\xb1\xb6\', \'\xe6\xb1\xb9\', \'\xe6\xb1\xbd\', \'\xe6\xb1\xbe\', \'\xe6\xb2\x81\', \'\xe6\xb2\x82\',\n    \'\xe6\xb2\x83\', \'\xe6\xb2\x85\', \'\xe6\xb2\x87\', \'\xe6\xb2\x88\', \'\xe6\xb2\x89\', \'\xe6\xb2\x8c\', \'\xe6\xb2\x90\', \'\xe6\xb2\x93\', \'\xe6\xb2\x94\', \'\xe6\xb2\x95\', \'\xe6\xb2\x99\', \'\xe6\xb2\x9b\', \'\xe6\xb2\x9f\', \'\xe6\xb2\xa1\', \'\xe6\xb2\xa3\', \'\xe6\xb2\xa5\', \'\xe6\xb2\xa6\', \'\xe6\xb2\xa7\', \'\xe6\xb2\xaa\', \'\xe6\xb2\xab\',\n    \'\xe6\xb2\xac\', \'\xe6\xb2\xae\', \'\xe6\xb2\xb1\', \'\xe6\xb2\xb3\', \'\xe6\xb2\xb8\', \'\xe6\xb2\xb9\', \'\xe6\xb2\xbb\', \'\xe6\xb2\xbc\', \'\xe6\xb2\xbd\', \'\xe6\xb2\xbe\', \'\xe6\xb2\xbf\', \'\xe6\xb3\x84\', \'\xe6\xb3\x85\', \'\xe6\xb3\x89\', \'\xe6\xb3\x8a\', \'\xe6\xb3\x8c\', \'\xe6\xb3\x93\', \'\xe6\xb3\x95\', \'\xe6\xb3\x97\', \'\xe6\xb3\x9b\',\n    \'\xe6\xb3\x9e\', \'\xe6\xb3\xa0\', \'\xe6\xb3\xa1\', \'\xe6\xb3\xa2\', \'\xe6\xb3\xa3\', \'\xe6\xb3\xa5\', \'\xe6\xb3\xa8\', \'\xe6\xb3\xaa\', \'\xe6\xb3\xab\', \'\xe6\xb3\xae\', \'\xe6\xb3\xaf\', \'\xe6\xb3\xb0\', \'\xe6\xb3\xb1\', \'\xe6\xb3\xb3\', \'\xe6\xb3\xb5\', \'\xe6\xb3\xb7\', \'\xe6\xb3\xb8\', \'\xe6\xb3\xbb\', \'\xe6\xb3\xbc\', \'\xe6\xb3\xbd\',\n    \'\xe6\xb3\xbe\', \'\xe6\xb4\x81\', \'\xe6\xb4\x8b\', \'\xe6\xb4\x92\', \'\xe6\xb4\x97\', \'\xe6\xb4\x99\', \'\xe6\xb4\x9b\', \'\xe6\xb4\x9e\', \'\xe6\xb4\x9f\', \'\xe6\xb4\xa5\', \'\xe6\xb4\xaa\', \'\xe6\xb4\xab\', \'\xe6\xb4\xae\', \'\xe6\xb4\xb1\', \'\xe6\xb4\xb2\', \'\xe6\xb4\xb9\', \'\xe6\xb4\xba\', \'\xe6\xb4\xbb\', \'\xe6\xb4\xbc\', \'\xe6\xb4\xbd\',\n    \'\xe6\xb4\xbe\', \'\xe6\xb5\x81\', \'\xe6\xb5\x83\', \'\xe6\xb5\x85\', \'\xe6\xb5\x86\', \'\xe6\xb5\x87\', \'\xe6\xb5\x8a\', \'\xe6\xb5\x8b\', \'\xe6\xb5\x8d\', \'\xe6\xb5\x8e\', \'\xe6\xb5\x8f\', \'\xe6\xb5\x90\', \'\xe6\xb5\x91\', \'\xe6\xb5\x92\', \'\xe6\xb5\x93\', \'\xe6\xb5\x94\', \'\xe6\xb5\x99\', \'\xe6\xb5\x9a\', \'\xe6\xb5\x9c\', \'\xe6\xb5\x9e\',\n    \'\xe6\xb5\xa3\', \'\xe6\xb5\xa6\', \'\xe6\xb5\xa9\', \'\xe6\xb5\xaa\', \'\xe6\xb5\xae\', \'\xe6\xb5\xb4\', \'\xe6\xb5\xb7\', \'\xe6\xb5\xb8\', \'\xe6\xb5\xbc\', \'\xe6\xb5\xbf\', \'\xe6\xb6\x82\', \'\xe6\xb6\x85\', \'\xe6\xb6\x88\', \'\xe6\xb6\x89\', \'\xe6\xb6\x8c\', \'\xe6\xb6\x8e\', \'\xe6\xb6\x92\', \'\xe6\xb6\x93\', \'\xe6\xb6\x94\', \'\xe6\xb6\x95\',\n    \'\xe6\xb6\x9b\', \'\xe6\xb6\x9d\', \'\xe6\xb6\x9f\', \'\xe6\xb6\xa1\', \'\xe6\xb6\xa3\', \'\xe6\xb6\xa4\', \'\xe6\xb6\xa6\', \'\xe6\xb6\xa7\', \'\xe6\xb6\xa8\', \'\xe6\xb6\xa9\', \'\xe6\xb6\xaa\', \'\xe6\xb6\xae\', \'\xe6\xb6\xaf\', \'\xe6\xb6\xb2\', \'\xe6\xb6\xb5\', \'\xe6\xb6\xb8\', \'\xe6\xb6\xbf\', \'\xe6\xb7\x80\', \'\xe6\xb7\x84\', \'\xe6\xb7\x85\',\n    \'\xe6\xb7\x86\', \'\xe6\xb7\x87\', \'\xe6\xb7\x8b\', \'\xe6\xb7\x8c\', \'\xe6\xb7\x91\', \'\xe6\xb7\x96\', \'\xe6\xb7\x98\', \'\xe6\xb7\x99\', \'\xe6\xb7\x9e\', \'\xe6\xb7\xa1\', \'\xe6\xb7\xa4\', \'\xe6\xb7\xab\', \'\xe6\xb7\xac\', \'\xe6\xb7\xae\', \'\xe6\xb7\xb1\', \'\xe6\xb7\xb3\', \'\xe6\xb7\xb7\', \'\xe6\xb7\xb9\', \'\xe6\xb7\xbb\', \'\xe6\xb7\xbc\',\n    \'\xe6\xb8\x85\', \'\xe6\xb8\x8a\', \'\xe6\xb8\x8d\', \'\xe6\xb8\x8e\', \'\xe6\xb8\x90\', \'\xe6\xb8\x91\', \'\xe6\xb8\x94\', \'\xe6\xb8\x96\', \'\xe6\xb8\x97\', \'\xe6\xb8\x9a\', \'\xe6\xb8\x9d\', \'\xe6\xb8\xa0\', \'\xe6\xb8\xa1\', \'\xe6\xb8\xa3\', \'\xe6\xb8\xa4\', \'\xe6\xb8\xa5\', \'\xe6\xb8\xa9\', \'\xe6\xb8\xad\', \'\xe6\xb8\xaf\', \'\xe6\xb8\xb2\',\n    \'\xe6\xb8\xb4\', \'\xe6\xb8\xb8\', \'\xe6\xb8\xba\', \'\xe6\xb9\x83\', \'\xe6\xb9\x84\', \'\xe6\xb9\x8d\', \'\xe6\xb9\x8e\', \'\xe6\xb9\x96\', \'\xe6\xb9\x98\', \'\xe6\xb9\x9b\', \'\xe6\xb9\x9f\', \'\xe6\xb9\xab\', \'\xe6\xb9\xae\', \'\xe6\xb9\xbe\', \'\xe6\xb9\xbf\', \'\xe6\xba\x83\', \'\xe6\xba\x85\', \'\xe6\xba\x89\', \'\xe6\xba\x8a\', \'\xe6\xba\x8d\',\n    \'\xe6\xba\x90\', \'\xe6\xba\x9c\', \'\xe6\xba\x9f\', \'\xe6\xba\xa2\', \'\xe6\xba\xa5\', \'\xe6\xba\xa7\', \'\xe6\xba\xaa\', \'\xe6\xba\xaf\', \'\xe6\xba\xb2\', \'\xe6\xba\xb4\', \'\xe6\xba\xb6\', \'\xe6\xba\xb7\', \'\xe6\xba\xba\', \'\xe6\xbb\x81\', \'\xe6\xbb\x82\', \'\xe6\xbb\x87\', \'\xe6\xbb\x88\', \'\xe6\xbb\x8b\', \'\xe6\xbb\x91\', \'\xe6\xbb\x93\',\n    \'\xe6\xbb\x94\', \'\xe6\xbb\x95\', \'\xe6\xbb\x9a\', \'\xe6\xbb\x9e\', \'\xe6\xbb\xa1\', \'\xe6\xbb\xa4\', \'\xe6\xbb\xa5\', \'\xe6\xbb\xa6\', \'\xe6\xbb\xa8\', \'\xe6\xbb\xa9\', \'\xe6\xbb\xb4\', \'\xe6\xbc\x82\', \'\xe6\xbc\x86\', \'\xe6\xbc\x89\', \'\xe6\xbc\x8f\', \'\xe6\xbc\x93\', \'\xe6\xbc\x94\', \'\xe6\xbc\x95\', \'\xe6\xbc\xa0\', \'\xe6\xbc\xa6\',\n    \'\xe6\xbc\xa9\', \'\xe6\xbc\xaa\', \'\xe6\xbc\xab\', \'\xe6\xbc\xaf\', \'\xe6\xbc\xb1\', \'\xe6\xbc\xb3\', \'\xe6\xbc\xbe\', \'\xe6\xbd\x87\', \'\xe6\xbd\x8d\', \'\xe6\xbd\x8f\', \'\xe6\xbd\x98\', \'\xe6\xbd\x9c\', \'\xe6\xbd\x9e\', \'\xe6\xbd\xa2\', \'\xe6\xbd\xa6\', \'\xe6\xbd\xad\', \'\xe6\xbd\xae\', \'\xe6\xbd\xb4\', \'\xe6\xbd\xb8\', \'\xe6\xbd\xba\',\n    \'\xe6\xbd\xbc\', \'\xe6\xbe\x84\', \'\xe6\xbe\x88\', \'\xe6\xbe\x8d\', \'\xe6\xbe\x8e\', \'\xe6\xbe\x99\', \'\xe6\xbe\x9c\', \'\xe6\xbe\x9d\', \'\xe6\xbe\xa1\', \'\xe6\xbe\xa7\', \'\xe6\xbe\xb3\', \'\xe6\xbe\xb9\', \'\xe6\xbf\x80\', \'\xe6\xbf\x82\', \'\xe6\xbf\x91\', \'\xe6\xbf\x92\', \'\xe6\xbf\x9e\', \'\xe6\xbf\xa0\', \'\xe6\xbf\xa1\', \'\xe6\xbf\xa9\',\n    \'\xe6\xbf\xae\', \'\xe6\xbf\xaf\', \'\xe7\x80\x91\', \'\xe7\x80\x9a\', \'\xe7\x80\x9b\', \'\xe7\x80\xb9\', \'\xe7\x81\x8a\', \'\xe7\x81\x8c\', \'\xe7\x81\x9e\', \'\xe7\x81\xab\', \'\xe7\x81\xad\', \'\xe7\x81\xaf\', \'\xe7\x81\xb0\', \'\xe7\x81\xb5\', \'\xe7\x81\xb6\', \'\xe7\x81\xb8\', \'\xe7\x81\xbc\', \'\xe7\x81\xbe\', \'\xe7\x81\xbf\', \'\xe7\x82\x80\',\n    \'\xe7\x82\x89\', \'\xe7\x82\x8a\', \'\xe7\x82\x8e\', \'\xe7\x82\x92\', \'\xe7\x82\x94\', \'\xe7\x82\x95\', \'\xe7\x82\x96\', \'\xe7\x82\x99\', \'\xe7\x82\x9c\', \'\xe7\x82\x9f\', \'\xe7\x82\xab\', \'\xe7\x82\xac\', \'\xe7\x82\xad\', \'\xe7\x82\xae\', \'\xe7\x82\xaf\', \'\xe7\x82\xb3\', \'\xe7\x82\xb7\', \'\xe7\x82\xb8\', \'\xe7\x82\xb9\', \'\xe7\x82\xbc\',\n    \'\xe7\x82\xbd\', \'\xe7\x83\x81\', \'\xe7\x83\x82\', \'\xe7\x83\x88\', \'\xe7\x83\x98\', \'\xe7\x83\x99\', \'\xe7\x83\x9b\', \'\xe7\x83\x9c\', \'\xe7\x83\x9d\', \'\xe7\x83\x9f\', \'\xe7\x83\xa4\', \'\xe7\x83\xa6\', \'\xe7\x83\xa7\', \'\xe7\x83\xa8\', \'\xe7\x83\xa9\', \'\xe7\x83\xab\', \'\xe7\x83\xac\', \'\xe7\x83\xad\', \'\xe7\x83\xaf\', \'\xe7\x83\xb7\',\n    \'\xe7\x83\xb9\', \'\xe7\x83\xbd\', \'\xe7\x84\x89\', \'\xe7\x84\x8a\', \'\xe7\x84\x92\', \'\xe7\x84\x95\', \'\xe7\x84\x96\', \'\xe7\x84\x98\', \'\xe7\x84\x99\', \'\xe7\x84\x9a\', \'\xe7\x84\x9c\', \'\xe7\x84\xa6\', \'\xe7\x84\xaf\', \'\xe7\x84\xb0\', \'\xe7\x84\xb1\', \'\xe7\x84\xb6\', \'\xe7\x84\xbb\', \'\xe7\x85\x85\', \'\xe7\x85\x8a\', \'\xe7\x85\x8c\',\n    \'\xe7\x85\x8e\', \'\xe7\x85\x9c\', \'\xe7\x85\x9e\', \'\xe7\x85\xa4\', \'\xe7\x85\xa6\', \'\xe7\x85\xa7\', \'\xe7\x85\xa8\', \'\xe7\x85\xae\', \'\xe7\x85\xb2\', \'\xe7\x85\xbd\', \'\xe7\x86\x84\', \'\xe7\x86\x8a\', \'\xe7\x86\x8f\', \'\xe7\x86\x94\', \'\xe7\x86\x99\', \'\xe7\x86\x9b\', \'\xe7\x86\x9f\', \'\xe7\x86\xa0\', \'\xe7\x86\xa8\', \'\xe7\x86\xac\',\n    \'\xe7\x86\xb9\', \'\xe7\x87\x83\', \'\xe7\x87\x8e\', \'\xe7\x87\x94\', \'\xe7\x87\x95\', \'\xe7\x87\xa0\', \'\xe7\x87\xa5\', \'\xe7\x87\xa7\', \'\xe7\x87\xae\', \'\xe7\x87\xb9\', \'\xe7\x88\x86\', \'\xe7\x88\x87\', \'\xe7\x88\xa8\', \'\xe7\x88\xaa\', \'\xe7\x88\xac\', \'\xe7\x88\xb0\', \'\xe7\x88\xb1\', \'\xe7\x88\xb2\', \'\xe7\x88\xb5\', \'\xe7\x88\xb6\',\n    \'\xe7\x88\xb7\', \'\xe7\x88\xb8\', \'\xe7\x88\xb9\', \'\xe7\x88\xbb\', \'\xe7\x88\xbd\', \'\xe7\x89\x82\', \'\xe7\x89\x87\', \'\xe7\x89\x88\', \'\xe7\x89\x8c\', \'\xe7\x89\x8d\', \'\xe7\x89\x92\', \'\xe7\x89\x96\', \'\xe7\x89\x99\', \'\xe7\x89\x9b\', \'\xe7\x89\x9d\', \'\xe7\x89\x9f\', \'\xe7\x89\xa1\', \'\xe7\x89\xa2\', \'\xe7\x89\xa6\', \'\xe7\x89\xa7\',\n    \'\xe7\x89\xa9\', \'\xe7\x89\xaf\', \'\xe7\x89\xb2\', \'\xe7\x89\xb5\', \'\xe7\x89\xb9\', \'\xe7\x89\xba\', \'\xe7\x8a\x80\', \'\xe7\x8a\x81\', \'\xe7\x8a\x8a\', \'\xe7\x8a\x8d\', \'\xe7\x8a\x92\', \'\xe7\x8a\xa8\', \'\xe7\x8a\xac\', \'\xe7\x8a\xaf\', \'\xe7\x8a\xb4\', \'\xe7\x8a\xb6\', \'\xe7\x8a\xb7\', \'\xe7\x8a\xb9\', \'\xe7\x8b\x81\', \'\xe7\x8b\x82\',\n    \'\xe7\x8b\x83\', \'\xe7\x8b\x84\', \'\xe7\x8b\x88\', \'\xe7\x8b\x8e\', \'\xe7\x8b\x90\', \'\xe7\x8b\x92\', \'\xe7\x8b\x97\', \'\xe7\x8b\x99\', \'\xe7\x8b\x9d\', \'\xe7\x8b\x9e\', \'\xe7\x8b\xa0\', \'\xe7\x8b\xa1\', \'\xe7\x8b\xa9\', \'\xe7\x8b\xac\', \'\xe7\x8b\xad\', \'\xe7\x8b\xae\', \'\xe7\x8b\xb0\', \'\xe7\x8b\xb1\', \'\xe7\x8b\xb2\', \'\xe7\x8b\xb8\',\n    \'\xe7\x8b\xbb\', \'\xe7\x8b\xbc\', \'\xe7\x8c\x83\', \'\xe7\x8c\x8a\', \'\xe7\x8c\x8e\', \'\xe7\x8c\x95\', \'\xe7\x8c\x96\', \'\xe7\x8c\x97\', \'\xe7\x8c\x9b\', \'\xe7\x8c\x9c\', \'\xe7\x8c\x9d\', \'\xe7\x8c\xa2\', \'\xe7\x8c\xa5\', \'\xe7\x8c\xa9\', \'\xe7\x8c\xaa\', \'\xe7\x8c\xab\', \'\xe7\x8c\xac\', \'\xe7\x8c\xae\', \'\xe7\x8c\xb1\', \'\xe7\x8c\xb4\',\n    \'\xe7\x8c\xb7\', \'\xe7\x8c\xbe\', \'\xe7\x8c\xbf\', \'\xe7\x8d\x90\', \'\xe7\x8d\x97\', \'\xe7\x8d\x98\', \'\xe7\x8d\xa0\', \'\xe7\x8d\xac\', \'\xe7\x8d\xad\', \'\xe7\x8d\xbe\', \'\xe7\x8e\x83\', \'\xe7\x8e\x84\', \'\xe7\x8e\x87\', \'\xe7\x8e\x89\', \'\xe7\x8e\x8a\', \'\xe7\x8e\x8b\', \'\xe7\x8e\x91\', \'\xe7\x8e\x95\', \'\xe7\x8e\x9b\', \'\xe7\x8e\xa6\',\n    \'\xe7\x8e\xa9\', \'\xe7\x8e\xab\', \'\xe7\x8e\xae\', \'\xe7\x8e\xaf\', \'\xe7\x8e\xb0\', \'\xe7\x8e\xb2\', \'\xe7\x8e\xb3\', \'\xe7\x8e\xb7\', \'\xe7\x8e\xba\', \'\xe7\x8e\xbb\', \'\xe7\x8f\x80\', \'\xe7\x8f\x82\', \'\xe7\x8f\x85\', \'\xe7\x8f\x88\', \'\xe7\x8f\x8a\', \'\xe7\x8f\x8d\', \'\xe7\x8f\x8f\', \'\xe7\x8f\x90\', \'\xe7\x8f\x91\', \'\xe7\x8f\x9e\',\n    \'\xe7\x8f\xa0\', \'\xe7\x8f\xa5\', \'\xe7\x8f\xa9\', \'\xe7\x8f\xaa\', \'\xe7\x8f\xad\', \'\xe7\x8f\xae\', \'\xe7\x8f\xb0\', \'\xe7\x90\x83\', \'\xe7\x90\x85\', \'\xe7\x90\x86\', \'\xe7\x90\x89\', \'\xe7\x90\x8f\', \'\xe7\x90\x90\', \'\xe7\x90\x96\', \'\xe7\x90\x9b\', \'\xe7\x90\xa2\', \'\xe7\x90\xa5\', \'\xe7\x90\xa6\', \'\xe7\x90\xa8\', \'\xe7\x90\xaa\',\n    \'\xe7\x90\xae\', \'\xe7\x90\xb0\', \'\xe7\x90\xb3\', \'\xe7\x90\xb4\', \'\xe7\x90\xb5\', \'\xe7\x90\xb6\', \'\xe7\x90\xbc\', \'\xe7\x91\x81\', \'\xe7\x91\x95\', \'\xe7\x91\x99\', \'\xe7\x91\x9a\', \'\xe7\x91\x9b\', \'\xe7\x91\x9c\', \'\xe7\x91\x9e\', \'\xe7\x91\x9f\', \'\xe7\x91\xb0\', \'\xe7\x91\xb6\', \'\xe7\x91\xbe\', \'\xe7\x92\x80\', \'\xe7\x92\x83\',\n    \'\xe7\x92\x86\', \'\xe7\x92\x87\', \'\xe7\x92\x8b\', \'\xe7\x92\x90\', \'\xe7\x92\x9c\', \'\xe7\x92\x9e\', \'\xe7\x92\x9f\', \'\xe7\x92\xa7\', \'\xe7\x92\xa8\', \'\xe7\x93\x92\', \'\xe7\x93\x9c\', \'\xe7\x93\xa0\', \'\xe7\x93\xa2\', \'\xe7\x93\xa3\', \'\xe7\x93\xa6\', \'\xe7\x93\xae\', \'\xe7\x93\xaf\', \'\xe7\x93\xb4\', \'\xe7\x93\xb6\', \'\xe7\x93\xb7\',\n    \'\xe7\x93\xbb\', \'\xe7\x94\x84\', \'\xe7\x94\x91\', \'\xe7\x94\x98\', \'\xe7\x94\x99\', \'\xe7\x94\x9a\', \'\xe7\x94\x9c\', \'\xe7\x94\x9f\', \'\xe7\x94\xa3\', \'\xe7\x94\xa5\', \'\xe7\x94\xa8\', \'\xe7\x94\xa9\', \'\xe7\x94\xab\', \'\xe7\x94\xac\', \'\xe7\x94\xad\', \'\xe7\x94\xb0\', \'\xe7\x94\xb1\', \'\xe7\x94\xb2\', \'\xe7\x94\xb3\', \'\xe7\x94\xb5\',\n    \'\xe7\x94\xb7\', \'\xe7\x94\xb8\', \'\xe7\x94\xba\', \'\xe7\x94\xbb\', \'\xe7\x94\xbe\', \'\xe7\x95\x80\', \'\xe7\x95\x85\', \'\xe7\x95\x8c\', \'\xe7\x95\x8e\', \'\xe7\x95\x8f\', \'\xe7\x95\x91\', \'\xe7\x95\x94\', \'\xe7\x95\x99\', \'\xe7\x95\x9c\', \'\xe7\x95\xa4\', \'\xe7\x95\xa5\', \'\xe7\x95\xa6\', \'\xe7\x95\xaa\', \'\xe7\x95\xb2\', \'\xe7\x95\xb4\',\n    \'\xe7\x95\xb8\', \'\xe7\x95\xbc\', \'\xe7\x95\xbf\', \'\xe7\x96\x83\', \'\xe7\x96\x86\', \'\xe7\x96\x8b\', \'\xe7\x96\x8f\', \'\xe7\x96\x91\', \'\xe7\x96\x97\', \'\xe7\x96\x99\', \'\xe7\x96\x9a\', \'\xe7\x96\x9d\', \'\xe7\x96\x9f\', \'\xe7\x96\xa1\', \'\xe7\x96\xa3\', \'\xe7\x96\xa4\', \'\xe7\x96\xa5\', \'\xe7\x96\xab\', \'\xe7\x96\xae\', \'\xe7\x96\xaf\',\n    \'\xe7\x96\xb1\', \'\xe7\x96\xb2\', \'\xe7\x96\xb4\', \'\xe7\x96\xb5\', \'\xe7\x96\xb8\', \'\xe7\x96\xb9\', \'\xe7\x96\xbc\', \'\xe7\x96\xbd\', \'\xe7\x96\xbe\', \'\xe7\x97\x82\', \'\xe7\x97\x85\', \'\xe7\x97\x87\', \'\xe7\x97\x88\', \'\xe7\x97\x89\', \'\xe7\x97\x8a\', \'\xe7\x97\x8d\', \'\xe7\x97\x92\', \'\xe7\x97\x94\', \'\xe7\x97\x95\', \'\xe7\x97\x98\',\n    \'\xe7\x97\x9b\', \'\xe7\x97\x9e\', \'\xe7\x97\xa2\', \'\xe7\x97\xa3\', \'\xe7\x97\xa4\', \'\xe7\x97\xa7\', \'\xe7\x97\xaa\', \'\xe7\x97\xab\', \'\xe7\x97\xb0\', \'\xe7\x97\xb4\', \'\xe7\x97\xb9\', \'\xe7\x97\xbc\', \'\xe7\x97\xbf\', \'\xe7\x98\x80\', \'\xe7\x98\x81\', \'\xe7\x98\x90\', \'\xe7\x98\x97\', \'\xe7\x98\x98\', \'\xe7\x98\x99\', \'\xe7\x98\x9f\',\n    \'\xe7\x98\xa0\', \'\xe7\x98\xa2\', \'\xe7\x98\xa4\', \'\xe7\x98\xa5\', \'\xe7\x98\xa6\', \'\xe7\x98\xa9\', \'\xe7\x98\xaa\', \'\xe7\x98\xab\', \'\xe7\x98\xb3\', \'\xe7\x98\xb4\', \'\xe7\x98\xb5\', \'\xe7\x98\xb8\', \'\xe7\x98\xbe\', \'\xe7\x99\x80\', \'\xe7\x99\x8c\', \'\xe7\x99\x94\', \'\xe7\x99\x96\', \'\xe7\x99\x9c\', \'\xe7\x99\x9e\', \'\xe7\x99\xa3\',\n    \'\xe7\x99\xab\', \'\xe7\x99\xb8\', \'\xe7\x99\xbb\', \'\xe7\x99\xbd\', \'\xe7\x99\xbe\', \'\xe7\x9a\x81\', \'\xe7\x9a\x82\', \'\xe7\x9a\x84\', \'\xe7\x9a\x86\', \'\xe7\x9a\x87\', \'\xe7\x9a\x88\', \'\xe7\x9a\x8b\', \'\xe7\x9a\x8e\', \'\xe7\x9a\x91\', \'\xe7\x9a\x93\', \'\xe7\x9a\x96\', \'\xe7\x9a\x99\', \'\xe7\x9a\xa4\', \'\xe7\x9a\xae\', \'\xe7\x9a\xb1\',\n    \'\xe7\x9a\xb4\', \'\xe7\x9a\xbf\', \'\xe7\x9b\x82\', \'\xe7\x9b\x85\', \'\xe7\x9b\x86\', \'\xe7\x9b\x88\', \'\xe7\x9b\x8a\', \'\xe7\x9b\x8d\', \'\xe7\x9b\x8e\', \'\xe7\x9b\x8f\', \'\xe7\x9b\x90\', \'\xe7\x9b\x91\', \'\xe7\x9b\x92\', \'\xe7\x9b\x94\', \'\xe7\x9b\x96\', \'\xe7\x9b\x97\', \'\xe7\x9b\x98\', \'\xe7\x9b\x9b\', \'\xe7\x9b\x9f\', \'\xe7\x9b\xa5\',\n    \'\xe7\x9b\xae\', \'\xe7\x9b\xaf\', \'\xe7\x9b\xb1\', \'\xe7\x9b\xb2\', \'\xe7\x9b\xb4\', \'\xe7\x9b\xb8\', \'\xe7\x9b\xb9\', \'\xe7\x9b\xbc\', \'\xe7\x9b\xbe\', \'\xe7\x9c\x81\', \'\xe7\x9c\x87\', \'\xe7\x9c\x88\', \'\xe7\x9c\x89\', \'\xe7\x9c\x8b\', \'\xe7\x9c\x99\', \'\xe7\x9c\x9b\', \'\xe7\x9c\x9f\', \'\xe7\x9c\xa0\', \'\xe7\x9c\xa2\', \'\xe7\x9c\xa6\',\n    \'\xe7\x9c\xa8\', \'\xe7\x9c\xa9\', \'\xe7\x9c\xaf\', \'\xe7\x9c\xb6\', \'\xe7\x9c\xb7\', \'\xe7\x9c\xb8\', \'\xe7\x9c\xba\', \'\xe7\x9c\xbc\', \'\xe7\x9d\x80\', \'\xe7\x9d\x81\', \'\xe7\x9d\x87\', \'\xe7\x9d\x90\', \'\xe7\x9d\x91\', \'\xe7\x9d\x92\', \'\xe7\x9d\x9a\', \'\xe7\x9d\x9b\', \'\xe7\x9d\xa1\', \'\xe7\x9d\xa2\', \'\xe7\x9d\xa3\', \'\xe7\x9d\xa6\',\n    \'\xe7\x9d\xa8\', \'\xe7\x9d\xaa\', \'\xe7\x9d\xab\', \'\xe7\x9d\xac\', \'\xe7\x9d\xb9\', \'\xe7\x9d\xbd\', \'\xe7\x9d\xbe\', \'\xe7\x9d\xbf\', \'\xe7\x9e\x80\', \'\xe7\x9e\x84\', \'\xe7\x9e\x85\', \'\xe7\x9e\x8b\', \'\xe7\x9e\x8c\', \'\xe7\x9e\x8e\', \'\xe7\x9e\x91\', \'\xe7\x9e\x92\', \'\xe7\x9e\x9f\', \'\xe7\x9e\xa0\', \'\xe7\x9e\xa5\', \'\xe7\x9e\xa7\',\n    \'\xe7\x9e\xa9\', \'\xe7\x9e\xaa\', \'\xe7\x9e\xac\', \'\xe7\x9e\xad\', \'\xe7\x9e\xb0\', \'\xe7\x9e\xb3\', \'\xe7\x9e\xbb\', \'\xe7\x9e\xbd\', \'\xe7\x9e\xbe\', \'\xe7\x9e\xbf\', \'\xe7\x9f\x97\', \'\xe7\x9f\x9b\', \'\xe7\x9f\x9c\', \'\xe7\x9f\xa2\', \'\xe7\x9f\xa3\', \'\xe7\x9f\xa5\', \'\xe7\x9f\xa9\', \'\xe7\x9f\xab\', \'\xe7\x9f\xad\', \'\xe7\x9f\xae\',\n    \'\xe7\x9f\xb3\', \'\xe7\x9f\xb6\', \'\xe7\x9f\xbd\', \'\xe7\x9f\xbe\', \'\xe7\x9f\xbf\', \'\xe7\xa0\x80\', \'\xe7\xa0\x81\', \'\xe7\xa0\x82\', \'\xe7\xa0\x8c\', \'\xe7\xa0\x8d\', \'\xe7\xa0\x92\', \'\xe7\xa0\x94\', \'\xe7\xa0\x96\', \'\xe7\xa0\x9a\', \'\xe7\xa0\x9d\', \'\xe7\xa0\xa3\', \'\xe7\xa0\xa5\', \'\xe7\xa0\xa7\', \'\xe7\xa0\xad\', \'\xe7\xa0\xb0\',\n    \'\xe7\xa0\xb4\', \'\xe7\xa0\xb7\', \'\xe7\xa0\xb8\', \'\xe7\xa0\xba\', \'\xe7\xa0\xbe\', \'\xe7\xa1\x80\', \'\xe7\xa1\x85\', \'\xe7\xa1\x92\', \'\xe7\xa1\x95\', \'\xe7\xa1\x9d\', \'\xe7\xa1\xab\', \'\xe7\xa1\xac\', \'\xe7\xa1\xae\', \'\xe7\xa1\xbc\', \'\xe7\xa2\x81\', \'\xe7\xa2\x89\', \'\xe7\xa2\x8c\', \'\xe7\xa2\x8d\', \'\xe7\xa2\x8e\', \'\xe7\xa2\x91\',\n    \'\xe7\xa2\x93\', \'\xe7\xa2\x97\', \'\xe7\xa2\x98\', \'\xe7\xa2\x9b\', \'\xe7\xa2\x9f\', \'\xe7\xa2\xa3\', \'\xe7\xa2\xa7\', \'\xe7\xa2\xb0\', \'\xe7\xa2\xb1\', \'\xe7\xa2\xb3\', \'\xe7\xa2\xb4\', \'\xe7\xa2\xbe\', \'\xe7\xa3\x81\', \'\xe7\xa3\x85\', \'\xe7\xa3\x8a\', \'\xe7\xa3\x8b\', \'\xe7\xa3\x90\', \'\xe7\xa3\x94\', \'\xe7\xa3\x95\', \'\xe7\xa3\x9b\',\n    \'\xe7\xa3\xa8\', \'\xe7\xa3\xac\', \'\xe7\xa3\xb7\', \'\xe7\xa3\xba\', \'\xe7\xa4\x81\', \'\xe7\xa4\xb4\', \'\xe7\xa4\xb6\', \'\xe7\xa4\xba\', \'\xe7\xa4\xbb\', \'\xe7\xa4\xbc\', \'\xe7\xa4\xbe\', \'\xe7\xa5\x80\', \'\xe7\xa5\x81\', \'\xe7\xa5\x87\', \'\xe7\xa5\x88\', \'\xe7\xa5\x89\', \'\xe7\xa5\x8a\', \'\xe7\xa5\x8e\', \'\xe7\xa5\x90\', \'\xe7\xa5\x93\',\n    \'\xe7\xa5\x96\', \'\xe7\xa5\x97\', \'\xe7\xa5\x9a\', \'\xe7\xa5\x9b\', \'\xe7\xa5\x9c\', \'\xe7\xa5\x9d\', \'\xe7\xa5\x9e\', \'\xe7\xa5\x9f\', \'\xe7\xa5\xa0\', \'\xe7\xa5\xa5\', \'\xe7\xa5\xa7\', \'\xe7\xa5\xa8\', \'\xe7\xa5\xad\', \'\xe7\xa5\xaf\', \'\xe7\xa5\xb7\', \'\xe7\xa5\xb8\', \'\xe7\xa5\xba\', \'\xe7\xa6\x80\', \'\xe7\xa6\x81\', \'\xe7\xa6\x84\',\n    \'\xe7\xa6\x85\', \'\xe7\xa6\x8f\', \'\xe7\xa6\xa7\', \'\xe7\xa6\xa8\', \'\xe7\xa6\xb3\', \'\xe7\xa6\xb9\', \'\xe7\xa6\xba\', \'\xe7\xa6\xbb\', \'\xe7\xa6\xbd\', \'\xe7\xa6\xbe\', \'\xe7\xa7\x80\', \'\xe7\xa7\x81\', \'\xe7\xa7\x83\', \'\xe7\xa7\x89\', \'\xe7\xa7\x8b\', \'\xe7\xa7\x8d\', \'\xe7\xa7\x8f\', \'\xe7\xa7\x91\', \'\xe7\xa7\x92\', \'\xe7\xa7\x98\',\n    \'\xe7\xa7\x9f\', \'\xe7\xa7\xa4\', \'\xe7\xa7\xa6\', \'\xe7\xa7\xa7\', \'\xe7\xa7\xa9\', \'\xe7\xa7\xaf\', \'\xe7\xa7\xb0\', \'\xe7\xa7\xb8\', \'\xe7\xa7\xbb\', \'\xe7\xa7\xbd\', \'\xe7\xa8\x80\', \'\xe7\xa8\x8b\', \'\xe7\xa8\x8d\', \'\xe7\xa8\x8e\', \'\xe7\xa8\x94\', \'\xe7\xa8\x97\', \'\xe7\xa8\x9a\', \'\xe7\xa8\x9e\', \'\xe7\xa8\xa0\', \'\xe7\xa8\xa3\',\n    \'\xe7\xa8\xb3\', \'\xe7\xa8\xb7\', \'\xe7\xa8\xbb\', \'\xe7\xa8\xbc\', \'\xe7\xa8\xbd\', \'\xe7\xa8\xbf\', \'\xe7\xa9\x86\', \'\xe7\xa9\x91\', \'\xe7\xa9\x97\', \'\xe7\xa9\xb0\', \'\xe7\xa9\xb4\', \'\xe7\xa9\xb6\', \'\xe7\xa9\xb7\', \'\xe7\xa9\xb9\', \'\xe7\xa9\xba\', \'\xe7\xa9\xbf\', \'\xe7\xaa\x81\', \'\xe7\xaa\x83\', \'\xe7\xaa\x84\', \'\xe7\xaa\x88\',\n    \'\xe7\xaa\x8b\', \'\xe7\xaa\x8d\', \'\xe7\xaa\x8e\', \'\xe7\xaa\x91\', \'\xe7\xaa\x92\', \'\xe7\xaa\x95\', \'\xe7\xaa\x96\', \'\xe7\xaa\x97\', \'\xe7\xaa\x98\', \'\xe7\xaa\x9c\', \'\xe7\xaa\x9d\', \'\xe7\xaa\x9f\', \'\xe7\xaa\xa0\', \'\xe7\xaa\xa3\', \'\xe7\xaa\xa5\', \'\xe7\xaa\xa6\', \'\xe7\xaa\xac\', \'\xe7\xaa\xad\', \'\xe7\xaa\xb3\', \'\xe7\xaa\xb4\',\n    \'\xe7\xaa\xbf\', \'\xe7\xab\x8b\', \'\xe7\xab\x96\', \'\xe7\xab\x99\', \'\xe7\xab\x9e\', \'\xe7\xab\x9f\', \'\xe7\xab\xa0\', \'\xe7\xab\xa3\', \'\xe7\xab\xa5\', \'\xe7\xab\xad\', \'\xe7\xab\xaf\', \'\xe7\xab\xb9\', \'\xe7\xab\xba\', \'\xe7\xab\xbd\', \'\xe7\xab\xbf\', \'\xe7\xac\x83\', \'\xe7\xac\x84\', \'\xe7\xac\x86\', \'\xe7\xac\x88\', \'\xe7\xac\x8b\',\n    \'\xe7\xac\x91\', \'\xe7\xac\x94\', \'\xe7\xac\x99\', \'\xe7\xac\x9b\', \'\xe7\xac\x9e\', \'\xe7\xac\xa0\', \'\xe7\xac\xa4\', \'\xe7\xac\xa5\', \'\xe7\xac\xa6\', \'\xe7\xac\xa8\', \'\xe7\xac\xab\', \'\xe7\xac\xac\', \'\xe7\xac\xae\', \'\xe7\xac\xba\', \'\xe7\xac\xbc\', \'\xe7\xad\x89\', \'\xe7\xad\x8b\', \'\xe7\xad\x8f\', \'\xe7\xad\x90\', \'\xe7\xad\x91\',\n    \'\xe7\xad\x92\', \'\xe7\xad\x94\', \'\xe7\xad\x96\', \'\xe7\xad\x9b\', \'\xe7\xad\x9d\', \'\xe7\xad\xa0\', \'\xe7\xad\xae\', \'\xe7\xad\xb0\', \'\xe7\xad\xb1\', \'\xe7\xad\xb4\', \'\xe7\xad\xb5\', \'\xe7\xad\xb7\', \'\xe7\xad\xb9\', \'\xe7\xad\xbe\', \'\xe7\xae\x80\', \'\xe7\xae\x8d\', \'\xe7\xae\x94\', \'\xe7\xae\x95\', \'\xe7\xae\x97\', \'\xe7\xae\xa1\',\n    \'\xe7\xae\xa6\', \'\xe7\xae\xa7\', \'\xe7\xae\xa9\', \'\xe7\xae\xab\', \'\xe7\xae\xad\', \'\xe7\xae\xb1\', \'\xe7\xae\xb4\', \'\xe7\xae\xb8\', \'\xe7\xaf\x81\', \'\xe7\xaf\x83\', \'\xe7\xaf\x86\', \'\xe7\xaf\x87\', \'\xe7\xaf\x91\', \'\xe7\xaf\x93\', \'\xe7\xaf\x99\', \'\xe7\xaf\x9d\', \'\xe7\xaf\xa1\', \'\xe7\xaf\xae\', \'\xe7\xaf\xb1\', \'\xe7\xaf\xb7\',\n    \'\xe7\xaf\xbe\', \'\xe7\xb0\x87\', \'\xe7\xb0\x8b\', \'\xe7\xb0\x8c\', \'\xe7\xb0\x8f\', \'\xe7\xb0\xa7\', \'\xe7\xb0\xaa\', \'\xe7\xb0\xb8\', \'\xe7\xb0\xbf\', \'\xe7\xb1\x81\', \'\xe7\xb1\x8d\', \'\xe7\xb1\xb3\', \'\xe7\xb1\xbb\', \'\xe7\xb1\xbd\', \'\xe7\xb2\x89\', \'\xe7\xb2\x91\', \'\xe7\xb2\x92\', \'\xe7\xb2\x95\', \'\xe7\xb2\x97\', \'\xe7\xb2\x98\',\n    \'\xe7\xb2\x9c\', \'\xe7\xb2\x9d\', \'\xe7\xb2\x9f\', \'\xe7\xb2\xa4\', \'\xe7\xb2\xa5\', \'\xe7\xb2\xaa\', \'\xe7\xb2\xae\', \'\xe7\xb2\xb1\', \'\xe7\xb2\xb2\', \'\xe7\xb2\xb3\', \'\xe7\xb2\xb9\', \'\xe7\xb2\xbc\', \'\xe7\xb2\xbd\', \'\xe7\xb2\xbe\', \'\xe7\xb3\x81\', \'\xe7\xb3\x85\', \'\xe7\xb3\x8a\', \'\xe7\xb3\x8c\', \'\xe7\xb3\x8d\', \'\xe7\xb3\x95\',\n    \'\xe7\xb3\x96\', \'\xe7\xb3\x97\', \'\xe7\xb3\x99\', \'\xe7\xb3\x9c\', \'\xe7\xb3\x9f\', \'\xe7\xb3\xa0\', \'\xe7\xb3\xaf\', \'\xe7\xb3\xbb\', \'\xe7\xb4\x8a\', \'\xe7\xb4\xa0\', \'\xe7\xb4\xa2\', \'\xe7\xb4\xa7\', \'\xe7\xb4\xab\', \'\xe7\xb4\xac\', \'\xe7\xb4\xaf\', \'\xe7\xb5\x9c\', \'\xe7\xb5\xae\', \'\xe7\xb5\xb7\', \'\xe7\xb6\xa6\', \'\xe7\xb7\x83\',\n    \'\xe7\xb8\xa0\', \'\xe7\xb8\xa2\', \'\xe7\xb8\xaf\', \'\xe7\xb8\xbb\', \'\xe7\xb9\x81\', \'\xe7\xb9\x87\', \'\xe7\xb9\xbb\', \'\xe7\xba\x82\', \'\xe7\xba\x94\', \'\xe7\xba\xa0\', \'\xe7\xba\xa1\', \'\xe7\xba\xa2\', \'\xe7\xba\xa3\', \'\xe7\xba\xa4\', \'\xe7\xba\xa5\', \'\xe7\xba\xa6\', \'\xe7\xba\xa7\', \'\xe7\xba\xa8\', \'\xe7\xba\xaa\', \'\xe7\xba\xab\',\n    \'\xe7\xba\xac\', \'\xe7\xba\xad\', \'\xe7\xba\xae\', \'\xe7\xba\xaf\', \'\xe7\xba\xb0\', \'\xe7\xba\xb1\', \'\xe7\xba\xb2\', \'\xe7\xba\xb3\', \'\xe7\xba\xb5\', \'\xe7\xba\xb6\', \'\xe7\xba\xb7\', \'\xe7\xba\xb8\', \'\xe7\xba\xb9\', \'\xe7\xba\xba\', \'\xe7\xba\xbb\', \'\xe7\xba\xbd\', \'\xe7\xba\xbe\', \'\xe7\xba\xbf\', \'\xe7\xbb\x80\', \'\xe7\xbb\x81\',\n    \'\xe7\xbb\x83\', \'\xe7\xbb\x84\', \'\xe7\xbb\x85\', \'\xe7\xbb\x86\', \'\xe7\xbb\x87\', \'\xe7\xbb\x88\', \'\xe7\xbb\x8a\', \'\xe7\xbb\x8c\', \'\xe7\xbb\x8d\', \'\xe7\xbb\x8e\', \'\xe7\xbb\x8f\', \'\xe7\xbb\x90\', \'\xe7\xbb\x91\', \'\xe7\xbb\x92\', \'\xe7\xbb\x93\', \'\xe7\xbb\x94\', \'\xe7\xbb\x95\', \'\xe7\xbb\x96\', \'\xe7\xbb\x98\', \'\xe7\xbb\x99\',\n    \'\xe7\xbb\x9a\', \'\xe7\xbb\x9b\', \'\xe7\xbb\x9c\', \'\xe7\xbb\x9d\', \'\xe7\xbb\x9e\', \'\xe7\xbb\x9f\', \'\xe7\xbb\xa0\', \'\xe7\xbb\xa1\', \'\xe7\xbb\xa2\', \'\xe7\xbb\xa3\', \'\xe7\xbb\xa5\', \'\xe7\xbb\xa6\', \'\xe7\xbb\xa7\', \'\xe7\xbb\xa8\', \'\xe7\xbb\xa9\', \'\xe7\xbb\xaa\', \'\xe7\xbb\xab\', \'\xe7\xbb\xad\', \'\xe7\xbb\xae\', \'\xe7\xbb\xaf\',\n    \'\xe7\xbb\xb0\', \'\xe7\xbb\xb3\', \'\xe7\xbb\xb4\', \'\xe7\xbb\xb5\', \'\xe7\xbb\xb6\', \'\xe7\xbb\xb7\', \'\xe7\xbb\xb8\', \'\xe7\xbb\xba\', \'\xe7\xbb\xbb\', \'\xe7\xbb\xbc\', \'\xe7\xbb\xbd\', \'\xe7\xbb\xbe\', \'\xe7\xbb\xbf\', \'\xe7\xbc\x80\', \'\xe7\xbc\x81\', \'\xe7\xbc\x84\', \'\xe7\xbc\x85\', \'\xe7\xbc\x86\', \'\xe7\xbc\x87\', \'\xe7\xbc\x88\',\n    \'\xe7\xbc\x89\', \'\xe7\xbc\x8e\', \'\xe7\xbc\x91\', \'\xe7\xbc\x92\', \'\xe7\xbc\x93\', \'\xe7\xbc\x94\', \'\xe7\xbc\x95\', \'\xe7\xbc\x96\', \'\xe7\xbc\x97\', \'\xe7\xbc\x98\', \'\xe7\xbc\x99\', \'\xe7\xbc\x9a\', \'\xe7\xbc\x9c\', \'\xe7\xbc\x9d\', \'\xe7\xbc\x9e\', \'\xe7\xbc\x9f\', \'\xe7\xbc\xa0\', \'\xe7\xbc\xa2\', \'\xe7\xbc\xa4\', \'\xe7\xbc\xa5\',\n    \'\xe7\xbc\xa7\', \'\xe7\xbc\xa8\', \'\xe7\xbc\xa9\', \'\xe7\xbc\xaa\', \'\xe7\xbc\xad\', \'\xe7\xbc\xae\', \'\xe7\xbc\xaf\', \'\xe7\xbc\xb0\', \'\xe7\xbc\xb1\', \'\xe7\xbc\xb3\', \'\xe7\xbc\xb4\', \'\xe7\xbc\xb5\', \'\xe7\xbc\xb6\', \'\xe7\xbc\xb8\', \'\xe7\xbc\xba\', \'\xe7\xbd\x82\', \'\xe7\xbd\x83\', \'\xe7\xbd\x84\', \'\xe7\xbd\x85\', \'\xe7\xbd\x90\',\n    \'\xe7\xbd\x91\', \'\xe7\xbd\x94\', \'\xe7\xbd\x95\', \'\xe7\xbd\x97\', \'\xe7\xbd\x98\', \'\xe7\xbd\x9a\', \'\xe7\xbd\xa1\', \'\xe7\xbd\xa2\', \'\xe7\xbd\xa5\', \'\xe7\xbd\xa9\', \'\xe7\xbd\xaa\', \'\xe7\xbd\xae\', \'\xe7\xbd\xb2\', \'\xe7\xbd\xb4\', \'\xe7\xbd\xb9\', \'\xe7\xbe\x81\', \'\xe7\xbe\x8a\', \'\xe7\xbe\x8c\', \'\xe7\xbe\x8e\', \'\xe7\xbe\x91\',\n    \'\xe7\xbe\x94\', \'\xe7\xbe\x96\', \'\xe7\xbe\x9a\', \'\xe7\xbe\x9e\', \'\xe7\xbe\x9f\', \'\xe7\xbe\xa1\', \'\xe7\xbe\xa4\', \'\xe7\xbe\xaf\', \'\xe7\xbe\xb2\', \'\xe7\xbe\xb8\', \'\xe7\xbe\xb9\', \'\xe7\xbe\xbd\', \'\xe7\xbe\xbf\', \'\xe7\xbf\x81\', \'\xe7\xbf\x85\', \'\xe7\xbf\x8a\', \'\xe7\xbf\x8c\', \'\xe7\xbf\x8e\', \'\xe7\xbf\x94\', \'\xe7\xbf\x95\',\n    \'\xe7\xbf\x98\', \'\xe7\xbf\x9f\', \'\xe7\xbf\xa0\', \'\xe7\xbf\xa1\', \'\xe7\xbf\xa6\', \'\xe7\xbf\xa9\', \'\xe7\xbf\xae\', \'\xe7\xbf\xb0\', \'\xe7\xbf\xb1\', \'\xe7\xbf\xb3\', \'\xe7\xbf\xbb\', \'\xe7\xbf\xbc\', \'\xe8\x80\x80\', \'\xe8\x80\x81\', \'\xe8\x80\x83\', \'\xe8\x80\x84\', \'\xe8\x80\x85\', \'\xe8\x80\x86\', \'\xe8\x80\x8b\', \'\xe8\x80\x8c\',\n    \'\xe8\x80\x8d\', \'\xe8\x80\x8e\', \'\xe8\x80\x90\', \'\xe8\x80\x95\', \'\xe8\x80\x97\', \'\xe8\x80\x98\', \'\xe8\x80\x99\', \'\xe8\x80\x9c\', \'\xe8\x80\xa6\', \'\xe8\x80\xa8\', \'\xe8\x80\xb3\', \'\xe8\x80\xb6\', \'\xe8\x80\xb8\', \'\xe8\x80\xbb\', \'\xe8\x80\xbd\', \'\xe8\x80\xbf\', \'\xe8\x81\x82\', \'\xe8\x81\x86\', \'\xe8\x81\x8a\', \'\xe8\x81\x8b\',\n    \'\xe8\x81\x8c\', \'\xe8\x81\x92\', \'\xe8\x81\x94\', \'\xe8\x81\x98\', \'\xe8\x81\x9a\', \'\xe8\x81\xa9\', \'\xe8\x81\xaa\', \'\xe8\x82\x83\', \'\xe8\x82\x84\', \'\xe8\x82\x86\', \'\xe8\x82\x87\', \'\xe8\x82\x89\', \'\xe8\x82\x8b\', \'\xe8\x82\x8c\', \'\xe8\x82\x93\', \'\xe8\x82\x96\', \'\xe8\x82\x98\', \'\xe8\x82\x9a\', \'\xe8\x82\x9b\', \'\xe8\x82\x9d\',\n    \'\xe8\x82\xa0\', \'\xe8\x82\xa1\', \'\xe8\x82\xa2\', \'\xe8\x82\xa3\', \'\xe8\x82\xa4\', \'\xe8\x82\xa5\', \'\xe8\x82\xa9\', \'\xe8\x82\xaa\', \'\xe8\x82\xae\', \'\xe8\x82\xaf\', \'\xe8\x82\xb1\', \'\xe8\x82\xb2\', \'\xe8\x82\xb4\', \'\xe8\x82\xb8\', \'\xe8\x82\xba\', \'\xe8\x82\xbd\', \'\xe8\x82\xbe\', \'\xe8\x82\xbf\', \'\xe8\x83\x80\', \'\xe8\x83\x81\',\n    \'\xe8\x83\x83\', \'\xe8\x83\x84\', \'\xe8\x83\x86\', \'\xe8\x83\x8c\', \'\xe8\x83\x8e\', \'\xe8\x83\x96\', \'\xe8\x83\x99\', \'\xe8\x83\x9a\', \'\xe8\x83\x9c\', \'\xe8\x83\x9d\', \'\xe8\x83\x9e\', \'\xe8\x83\xa1\', \'\xe8\x83\xa4\', \'\xe8\x83\xa5\', \'\xe8\x83\xa7\', \'\xe8\x83\xaa\', \'\xe8\x83\xab\', \'\xe8\x83\xad\', \'\xe8\x83\xaf\', \'\xe8\x83\xb0\',\n    \'\xe8\x83\xb1\', \'\xe8\x83\xb3\', \'\xe8\x83\xb6\', \'\xe8\x83\xb8\', \'\xe8\x83\xba\', \'\xe8\x83\xbd\', \'\xe8\x83\xbe\', \'\xe8\x84\x81\', \'\xe8\x84\x82\', \'\xe8\x84\x86\', \'\xe8\x84\x89\', \'\xe8\x84\x8a\', \'\xe8\x84\x8d\', \'\xe8\x84\x8f\', \'\xe8\x84\x90\', \'\xe8\x84\x91\', \'\xe8\x84\x93\', \'\xe8\x84\x94\', \'\xe8\x84\x96\', \'\xe8\x84\x9a\',\n    \'\xe8\x84\xaf\', \'\xe8\x84\xb1\', \'\xe8\x84\xb2\', \'\xe8\x84\xb8\', \'\xe8\x84\xbe\', \'\xe8\x85\x86\', \'\xe8\x85\x88\', \'\xe8\x85\x89\', \'\xe8\x85\x8a\', \'\xe8\x85\x8b\', \'\xe8\x85\x8c\', \'\xe8\x85\x90\', \'\xe8\x85\x91\', \'\xe8\x85\x93\', \'\xe8\x85\x94\', \'\xe8\x85\x95\', \'\xe8\x85\xa5\', \'\xe8\x85\xa9\', \'\xe8\x85\xad\', \'\xe8\x85\xae\',\n    \'\xe8\x85\xb0\', \'\xe8\x85\xb1\', \'\xe8\x85\xb4\', \'\xe8\x85\xb9\', \'\xe8\x85\xba\', \'\xe8\x85\xbb\', \'\xe8\x85\xbc\', \'\xe8\x85\xbe\', \'\xe8\x85\xbf\', \'\xe8\x86\x80\', \'\xe8\x86\x88\', \'\xe8\x86\x8a\', \'\xe8\x86\x8f\', \'\xe8\x86\x91\', \'\xe8\x86\x98\', \'\xe8\x86\x9b\', \'\xe8\x86\x9c\', \'\xe8\x86\x9d\', \'\xe8\x86\xa6\', \'\xe8\x86\xa8\',\n    \'\xe8\x86\xb3\', \'\xe8\x86\xba\', \'\xe8\x86\xbb\', \'\xe8\x87\x80\', \'\xe8\x87\x82\', \'\xe8\x87\x83\', \'\xe8\x87\x86\', \'\xe8\x87\x8a\', \'\xe8\x87\x9b\', \'\xe8\x87\xa3\', \'\xe8\x87\xa7\', \'\xe8\x87\xaa\', \'\xe8\x87\xac\', \'\xe8\x87\xad\', \'\xe8\x87\xb1\', \'\xe8\x87\xb3\', \'\xe8\x87\xb4\', \'\xe8\x87\xbb\', \'\xe8\x87\xbc\', \'\xe8\x87\xbe\',\n    \'\xe8\x88\x80\', \'\xe8\x88\x81\', \'\xe8\x88\x82\', \'\xe8\x88\x84\', \'\xe8\x88\x85\', \'\xe8\x88\x86\', \'\xe8\x88\x8c\', \'\xe8\x88\x8d\', \'\xe8\x88\x90\', \'\xe8\x88\x92\', \'\xe8\x88\x94\', \'\xe8\x88\x9b\', \'\xe8\x88\x9c\', \'\xe8\x88\x9e\', \'\xe8\x88\x9f\', \'\xe8\x88\xa1\', \'\xe8\x88\xaa\', \'\xe8\x88\xab\', \'\xe8\x88\xac\', \'\xe8\x88\xb0\',\n    \'\xe8\x88\xb1\', \'\xe8\x88\xb5\', \'\xe8\x88\xb6\', \'\xe8\x88\xb7\', \'\xe8\x88\xb9\', \'\xe8\x89\x87\', \'\xe8\x89\x98\', \'\xe8\x89\xae\', \'\xe8\x89\xaf\', \'\xe8\x89\xb0\', \'\xe8\x89\xb2\', \'\xe8\x89\xb3\', \'\xe8\x89\xba\', \'\xe8\x89\xbe\', \'\xe8\x8a\x82\', \'\xe8\x8a\x88\', \'\xe8\x8a\x8b\', \'\xe8\x8a\x8d\', \'\xe8\x8a\x8e\', \'\xe8\x8a\x92\',\n    \'\xe8\x8a\x98\', \'\xe8\x8a\x99\', \'\xe8\x8a\x9c\', \'\xe8\x8a\x9d\', \'\xe8\x8a\xa1\', \'\xe8\x8a\xa5\', \'\xe8\x8a\xa6\', \'\xe8\x8a\xaa\', \'\xe8\x8a\xab\', \'\xe8\x8a\xac\', \'\xe8\x8a\xad\', \'\xe8\x8a\xae\', \'\xe8\x8a\xaf\', \'\xe8\x8a\xb1\', \'\xe8\x8a\xb3\', \'\xe8\x8a\xb7\', \'\xe8\x8a\xb8\', \'\xe8\x8a\xb9\', \'\xe8\x8a\xbd\', \'\xe8\x8b\x84\',\n    \'\xe8\x8b\x87\', \'\xe8\x8b\x8b\', \'\xe8\x8b\x8c\', \'\xe8\x8b\x8d\', \'\xe8\x8b\x8e\', \'\xe8\x8b\x8f\', \'\xe8\x8b\x91\', \'\xe8\x8b\x92\', \'\xe8\x8b\x93\', \'\xe8\x8b\x94\', \'\xe8\x8b\x95\', \'\xe8\x8b\x97\', \'\xe8\x8b\x9b\', \'\xe8\x8b\x9e\', \'\xe8\x8b\x9f\', \'\xe8\x8b\xa1\', \'\xe8\x8b\xa3\', \'\xe8\x8b\xa5\', \'\xe8\x8b\xa6\', \'\xe8\x8b\xab\',\n    \'\xe8\x8b\xaf\', \'\xe8\x8b\xb1\', \'\xe8\x8b\xb4\', \'\xe8\x8b\xb7\', \'\xe8\x8b\xb9\', \'\xe8\x8b\xbb\', \'\xe8\x8c\x80\', \'\xe8\x8c\x81\', \'\xe8\x8c\x82\', \'\xe8\x8c\x83\', \'\xe8\x8c\x84\', \'\xe8\x8c\x85\', \'\xe8\x8c\x86\', \'\xe8\x8c\x89\', \'\xe8\x8c\x8e\', \'\xe8\x8c\x8f\', \'\xe8\x8c\x94\', \'\xe8\x8c\x95\', \'\xe8\x8c\x97\', \'\xe8\x8c\x9c\',\n    \'\xe8\x8c\xa7\', \'\xe8\x8c\xa8\', \'\xe8\x8c\xab\', \'\xe8\x8c\xac\', \'\xe8\x8c\xad\', \'\xe8\x8c\xaf\', \'\xe8\x8c\xb1\', \'\xe8\x8c\xb4\', \'\xe8\x8c\xb5\', \'\xe8\x8c\xb6\', \'\xe8\x8c\xb8\', \'\xe8\x8c\xb9\', \'\xe8\x8d\x80\', \'\xe8\x8d\x83\', \'\xe8\x8d\x86\', \'\xe8\x8d\x89\', \'\xe8\x8d\x8f\', \'\xe8\x8d\x90\', \'\xe8\x8d\x92\', \'\xe8\x8d\x94\',\n    \'\xe8\x8d\x9a\', \'\xe8\x8d\x9c\', \'\xe8\x8d\x9e\', \'\xe8\x8d\x9f\', \'\xe8\x8d\xa0\', \'\xe8\x8d\xa1\', \'\xe8\x8d\xa3\', \'\xe8\x8d\xa4\', \'\xe8\x8d\xa5\', \'\xe8\x8d\xa6\', \'\xe8\x8d\xa7\', \'\xe8\x8d\xaa\', \'\xe8\x8d\xab\', \'\xe8\x8d\xaf\', \'\xe8\x8d\xb7\', \'\xe8\x8d\xbb\', \'\xe8\x8d\xbc\', \'\xe8\x8e\x85\', \'\xe8\x8e\x86\', \'\xe8\x8e\x89\',\n    \'\xe8\x8e\x8e\', \'\xe8\x8e\x92\', \'\xe8\x8e\x93\', \'\xe8\x8e\x98\', \'\xe8\x8e\x9c\', \'\xe8\x8e\x9e\', \'\xe8\x8e\xa0\', \'\xe8\x8e\xa8\', \'\xe8\x8e\xa9\', \'\xe8\x8e\xab\', \'\xe8\x8e\xb1\', \'\xe8\x8e\xb2\', \'\xe8\x8e\xb4\', \'\xe8\x8e\xb7\', \'\xe8\x8e\xb9\', \'\xe8\x8e\xba\', \'\xe8\x8e\xbd\', \'\xe8\x8f\x81\', \'\xe8\x8f\x85\', \'\xe8\x8f\x87\',\n    \'\xe8\x8f\x8a\', \'\xe8\x8f\x8c\', \'\xe8\x8f\x8f\', \'\xe8\x8f\x91\', \'\xe8\x8f\x9c\', \'\xe8\x8f\x9f\', \'\xe8\x8f\xa0\', \'\xe8\x8f\xa1\', \'\xe8\x8f\xa9\', \'\xe8\x8f\xb1\', \'\xe8\x8f\xb2\', \'\xe8\x8f\xbd\', \'\xe8\x90\x83\', \'\xe8\x90\x84\', \'\xe8\x90\x8c\', \'\xe8\x90\x8d\', \'\xe8\x90\x8e\', \'\xe8\x90\x9d\', \'\xe8\x90\xa4\', \'\xe8\x90\xa5\',\n    \'\xe8\x90\xa6\', \'\xe8\x90\xa7\', \'\xe8\x90\xa8\', \'\xe8\x90\xb8\', \'\xe8\x90\xbd\', \'\xe8\x91\x86\', \'\xe8\x91\x97\', \'\xe8\x91\x9b\', \'\xe8\x91\xa1\', \'\xe8\x91\xa3\', \'\xe8\x91\xa9\', \'\xe8\x91\xab\', \'\xe8\x91\xac\', \'\xe8\x91\xad\', \'\xe8\x91\xb1\', \'\xe8\x91\xb3\', \'\xe8\x91\xb4\', \'\xe8\x91\xb5\', \'\xe8\x91\xba\', \'\xe8\x92\x82\',\n    \'\xe8\x92\x89\', \'\xe8\x92\x8b\', \'\xe8\x92\x8d\', \'\xe8\x92\x97\', \'\xe8\x92\x99\', \'\xe8\x92\x9c\', \'\xe8\x92\xaf\', \'\xe8\x92\xb2\', \'\xe8\x92\xb8\', \'\xe8\x92\xba\', \'\xe8\x92\xbd\', \'\xe8\x92\xbf\', \'\xe8\x93\x84\', \'\xe8\x93\x89\', \'\xe8\x93\x8d\', \'\xe8\x93\x90\', \'\xe8\x93\x93\', \'\xe8\x93\x96\', \'\xe8\x93\x9d\', \'\xe8\x93\x9f\',\n    \'\xe8\x93\xa6\', \'\xe8\x93\xac\', \'\xe8\x93\xba\', \'\xe8\x93\xbc\', \'\xe8\x93\xbf\', \'\xe8\x94\x91\', \'\xe8\x94\x93\', \'\xe8\x94\x97\', \'\xe8\x94\x9a\', \'\xe8\x94\x9f\', \'\xe8\x94\xa1\', \'\xe8\x94\xab\', \'\xe8\x94\xac\', \'\xe8\x94\xb7\', \'\xe8\x94\xba\', \'\xe8\x94\xbc\', \'\xe8\x94\xbd\', \'\xe8\x95\x83\', \'\xe8\x95\x89\', \'\xe8\x95\x8a\',\n    \'\xe8\x95\x99\', \'\xe8\x95\xa4\', \'\xe8\x95\xa8\', \'\xe8\x95\xb2\', \'\xe8\x95\xb4\', \'\xe8\x95\xbe\', \'\xe8\x96\x84\', \'\xe8\x96\x87\', \'\xe8\x96\x8f\', \'\xe8\x96\x9b\', \'\xe8\x96\x9c\', \'\xe8\x96\xa4\', \'\xe8\x96\xa8\', \'\xe8\x96\xaa\', \'\xe8\x96\xae\', \'\xe8\x96\xaf\', \'\xe8\x96\xb0\', \'\xe8\x97\x81\', \'\xe8\x97\x89\', \'\xe8\x97\x8f\',\n    \'\xe8\x97\x90\', \'\xe8\x97\x93\', \'\xe8\x97\x95\', \'\xe8\x97\x9c\', \'\xe8\x97\xa4\', \'\xe8\x97\xa9\', \'\xe8\x97\xbb\', \'\xe8\x97\xbf\', \'\xe8\x98\x91\', \'\xe8\x98\xa7\', \'\xe8\x98\xb8\', \'\xe8\x99\x8e\', \'\xe8\x99\x8f\', \'\xe8\x99\x90\', \'\xe8\x99\x91\', \'\xe8\x99\x94\', \'\xe8\x99\x9a\', \'\xe8\x99\x9e\', \'\xe8\x99\xa2\', \'\xe8\x99\xab\',\n    \'\xe8\x99\xac\', \'\xe8\x99\xae\', \'\xe8\x99\xb1\', \'\xe8\x99\xb9\', \'\xe8\x99\xba\', \'\xe8\x99\xbd\', \'\xe8\x99\xbe\', \'\xe8\x9a\x80\', \'\xe8\x9a\x81\', \'\xe8\x9a\x82\', \'\xe8\x9a\x8a\', \'\xe8\x9a\x8c\', \'\xe8\x9a\x93\', \'\xe8\x9a\x95\', \'\xe8\x9a\x9d\', \'\xe8\x9a\xa1\', \'\xe8\x9a\xa3\', \'\xe8\x9a\xa4\', \'\xe8\x9a\xa9\', \'\xe8\x9a\xaf\',\n    \'\xe8\x9a\xb0\', \'\xe8\x9b\x80\', \'\xe8\x9b\x86\', \'\xe8\x9b\x87\', \'\xe8\x9b\x8a\', \'\xe8\x9b\x8b\', \'\xe8\x9b\x8e\', \'\xe8\x9b\x90\', \'\xe8\x9b\x94\', \'\xe8\x9b\x99\', \'\xe8\x9b\x9b\', \'\xe8\x9b\x9f\', \'\xe8\x9b\xa4\', \'\xe8\x9b\xa9\', \'\xe8\x9b\xad\', \'\xe8\x9b\xae\', \'\xe8\x9b\xb0\', \'\xe8\x9b\xb2\', \'\xe8\x9b\xb9\', \'\xe8\x9b\xbe\',\n    \'\xe8\x9c\x80\', \'\xe8\x9c\x82\', \'\xe8\x9c\x83\', \'\xe8\x9c\x87\', \'\xe8\x9c\x88\', \'\xe8\x9c\x8d\', \'\xe8\x9c\x92\', \'\xe8\x9c\x93\', \'\xe8\x9c\x94\', \'\xe8\x9c\x95\', \'\xe8\x9c\x97\', \'\xe8\x9c\x98\', \'\xe8\x9c\x9a\', \'\xe8\x9c\x9c\', \'\xe8\x9c\xa1\', \'\xe8\x9c\xa5\', \'\xe8\x9c\xb4\', \'\xe8\x9c\xb7\', \'\xe8\x9c\xbb\', \'\xe8\x9c\xbf\',\n    \'\xe8\x9d\x84\', \'\xe8\x9d\x87\', \'\xe8\x9d\x89\', \'\xe8\x9d\x8e\', \'\xe8\x9d\x97\', \'\xe8\x9d\x99\', \'\xe8\x9d\xa0\', \'\xe8\x9d\xae\', \'\xe8\x9d\xb4\', \'\xe8\x9d\xb6\', \'\xe8\x9d\xbc\', \'\xe8\x9e\x82\', \'\xe8\x9e\x83\', \'\xe8\x9e\x8d\', \'\xe8\x9e\xa8\', \'\xe8\x9e\xab\', \'\xe8\x9e\xad\', \'\xe8\x9e\xb3\', \'\xe8\x9e\xba\', \'\xe8\x9e\xbe\',\n    \'\xe8\x9f\x86\', \'\xe8\x9f\x8b\', \'\xe8\x9f\x92\', \'\xe8\x9f\x9c\', \'\xe8\x9f\xa0\', \'\xe8\x9f\xad\', \'\xe8\x9f\xb9\', \'\xe8\x9f\xbe\', \'\xe8\xa0\x95\', \'\xe8\xa0\xa1\', \'\xe8\xa0\xa2\', \'\xe8\xa0\xb9\', \'\xe8\xa1\x80\', \'\xe8\xa1\x85\', \'\xe8\xa1\x8c\', \'\xe8\xa1\x8d\', \'\xe8\xa1\x94\', \'\xe8\xa1\x97\', \'\xe8\xa1\x99\', \'\xe8\xa1\xa1\',\n    \'\xe8\xa1\xa2\', \'\xe8\xa1\xa3\', \'\xe8\xa1\xa5\', \'\xe8\xa1\xa8\', \'\xe8\xa1\xa9\', \'\xe8\xa1\xab\', \'\xe8\xa1\xac\', \'\xe8\xa1\xae\', \'\xe8\xa1\xb0\', \'\xe8\xa1\xb2\', \'\xe8\xa1\xb7\', \'\xe8\xa1\xbd\', \'\xe8\xa1\xbe\', \'\xe8\xa1\xbf\', \'\xe8\xa2\x81\', \'\xe8\xa2\x82\', \'\xe8\xa2\x84\', \'\xe8\xa2\x85\', \'\xe8\xa2\x88\', \'\xe8\xa2\x8b\',\n    \'\xe8\xa2\x8d\', \'\xe8\xa2\x92\', \'\xe8\xa2\x96\', \'\xe8\xa2\x9c\', \'\xe8\xa2\xa4\', \'\xe8\xa2\xab\', \'\xe8\xa2\xad\', \'\xe8\xa2\xb1\', \'\xe8\xa2\xb4\', \'\xe8\xa3\x80\', \'\xe8\xa3\x81\', \'\xe8\xa3\x82\', \'\xe8\xa3\x85\', \'\xe8\xa3\x86\', \'\xe8\xa3\x94\', \'\xe8\xa3\x95\', \'\xe8\xa3\x98\', \'\xe8\xa3\x99\', \'\xe8\xa3\x9f\', \'\xe8\xa3\xa4\',\n    \'\xe8\xa3\xa8\', \'\xe8\xa3\xb0\', \'\xe8\xa3\xb1\', \'\xe8\xa3\xb3\', \'\xe8\xa3\xb4\', \'\xe8\xa3\xb8\', \'\xe8\xa3\xb9\', \'\xe8\xa3\xbe\', \'\xe8\xa4\x82\', \'\xe8\xa4\x8a\', \'\xe8\xa4\x90\', \'\xe8\xa4\x92\', \'\xe8\xa4\x93\', \'\xe8\xa4\x9a\', \'\xe8\xa4\x9b\', \'\xe8\xa4\xa5\', \'\xe8\xa4\xaa\', \'\xe8\xa4\xab\', \'\xe8\xa4\xb4\', \'\xe8\xa4\xb6\',\n    \'\xe8\xa5\x81\', \'\xe8\xa5\x84\', \'\xe8\xa5\x86\', \'\xe8\xa5\x9c\', \'\xe8\xa5\x9f\', \'\xe8\xa5\xa6\', \'\xe8\xa5\xbf\', \'\xe8\xa6\x81\', \'\xe8\xa6\x83\', \'\xe8\xa6\x86\', \'\xe8\xa7\x81\', \'\xe8\xa7\x82\', \'\xe8\xa7\x84\', \'\xe8\xa7\x85\', \'\xe8\xa7\x86\', \'\xe8\xa7\x87\', \'\xe8\xa7\x88\', \'\xe8\xa7\x89\', \'\xe8\xa7\x8a\', \'\xe8\xa7\x8c\',\n    \'\xe8\xa7\x8e\', \'\xe8\xa7\x90\', \'\xe8\xa7\x91\', \'\xe8\xa7\x92\', \'\xe8\xa7\x96\', \'\xe8\xa7\x9a\', \'\xe8\xa7\x9c\', \'\xe8\xa7\x9e\', \'\xe8\xa7\xa3\', \'\xe8\xa7\xa5\', \'\xe8\xa7\xa6\', \'\xe8\xa7\xb3\', \'\xe8\xa7\xbd\', \'\xe8\xa8\x80\', \'\xe8\xa8\x87\', \'\xe8\xa8\xbe\', \'\xe8\xa9\x88\', \'\xe8\xa9\xb9\', \'\xe8\xaa\x89\', \'\xe8\xaa\x93\',\n    \'\xe8\xad\x84\', \'\xe8\xad\xa6\', \'\xe8\xad\xac\', \'\xe8\xae\x99\', \'\xe8\xae\xa1\', \'\xe8\xae\xa2\', \'\xe8\xae\xa3\', \'\xe8\xae\xa4\', \'\xe8\xae\xa5\', \'\xe8\xae\xa6\', \'\xe8\xae\xa7\', \'\xe8\xae\xa8\', \'\xe8\xae\xa9\', \'\xe8\xae\xaa\', \'\xe8\xae\xab\', \'\xe8\xae\xad\', \'\xe8\xae\xae\', \'\xe8\xae\xaf\', \'\xe8\xae\xb0\', \'\xe8\xae\xb2\',\n    \'\xe8\xae\xb3\', \'\xe8\xae\xb4\', \'\xe8\xae\xb5\', \'\xe8\xae\xb6\', \'\xe8\xae\xb7\', \'\xe8\xae\xb8\', \'\xe8\xae\xb9\', \'\xe8\xae\xba\', \'\xe8\xae\xbc\', \'\xe8\xae\xbd\', \'\xe8\xae\xbe\', \'\xe8\xae\xbf\', \'\xe8\xaf\x80\', \'\xe8\xaf\x81\', \'\xe8\xaf\x82\', \'\xe8\xaf\x83\', \'\xe8\xaf\x84\', \'\xe8\xaf\x85\', \'\xe8\xaf\x86\', \'\xe8\xaf\x88\',\n    \'\xe8\xaf\x89\', \'\xe8\xaf\x8a\', \'\xe8\xaf\x8b\', \'\xe8\xaf\x8d\', \'\xe8\xaf\x8e\', \'\xe8\xaf\x8f\', \'\xe8\xaf\x91\', \'\xe8\xaf\x92\', \'\xe8\xaf\x95\', \'\xe8\xaf\x97\', \'\xe8\xaf\x98\', \'\xe8\xaf\x99\', \'\xe8\xaf\x9a\', \'\xe8\xaf\x9b\', \'\xe8\xaf\x9d\', \'\xe8\xaf\x9e\', \'\xe8\xaf\x9f\', \'\xe8\xaf\xa0\', \'\xe8\xaf\xa1\', \'\xe8\xaf\xa2\',\n    \'\xe8\xaf\xa3\', \'\xe8\xaf\xa4\', \'\xe8\xaf\xa5\', \'\xe8\xaf\xa6\', \'\xe8\xaf\xa7\', \'\xe8\xaf\xa8\', \'\xe8\xaf\xa9\', \'\xe8\xaf\xab\', \'\xe8\xaf\xac\', \'\xe8\xaf\xad\', \'\xe8\xaf\xae\', \'\xe8\xaf\xaf\', \'\xe8\xaf\xb0\', \'\xe8\xaf\xb1\', \'\xe8\xaf\xb2\', \'\xe8\xaf\xb3\', \'\xe8\xaf\xb4\', \'\xe8\xaf\xb5\', \'\xe8\xaf\xb7\', \'\xe8\xaf\xb8\',\n    \'\xe8\xaf\xba\', \'\xe8\xaf\xbb\', \'\xe8\xaf\xbd\', \'\xe8\xaf\xbe\', \'\xe8\xaf\xbf\', \'\xe8\xb0\x80\', \'\xe8\xb0\x81\', \'\xe8\xb0\x83\', \'\xe8\xb0\x84\', \'\xe8\xb0\x85\', \'\xe8\xb0\x86\', \'\xe8\xb0\x87\', \'\xe8\xb0\x88\', \'\xe8\xb0\x8a\', \'\xe8\xb0\x8b\', \'\xe8\xb0\x8d\', \'\xe8\xb0\x8e\', \'\xe8\xb0\x8f\', \'\xe8\xb0\x90\', \'\xe8\xb0\x91\',\n    \'\xe8\xb0\x92\', \'\xe8\xb0\x93\', \'\xe8\xb0\x94\', \'\xe8\xb0\x95\', \'\xe8\xb0\x97\', \'\xe8\xb0\x99\', \'\xe8\xb0\x9a\', \'\xe8\xb0\x9b\', \'\xe8\xb0\x9c\', \'\xe8\xb0\x9f\', \'\xe8\xb0\xa2\', \'\xe8\xb0\xa3\', \'\xe8\xb0\xa4\', \'\xe8\xb0\xa5\', \'\xe8\xb0\xa6\', \'\xe8\xb0\xa7\', \'\xe8\xb0\xa8\', \'\xe8\xb0\xa9\', \'\xe8\xb0\xaa\', \'\xe8\xb0\xac\',\n    \'\xe8\xb0\xad\', \'\xe8\xb0\xae\', \'\xe8\xb0\xaf\', \'\xe8\xb0\xb1\', \'\xe8\xb0\xb2\', \'\xe8\xb0\xb3\', \'\xe8\xb0\xb4\', \'\xe8\xb0\xb6\', \'\xe8\xb0\xb7\', \'\xe8\xb0\xb8\', \'\xe8\xb1\x81\', \'\xe8\xb1\x86\', \'\xe8\xb1\x89\', \'\xe8\xb1\x8c\', \'\xe8\xb1\x95\', \'\xe8\xb1\x9a\', \'\xe8\xb1\xa1\', \'\xe8\xb1\xa2\', \'\xe8\xb1\xa8\', \'\xe8\xb1\xaa\',\n    \'\xe8\xb1\xab\', \'\xe8\xb1\xad\', \'\xe8\xb1\xb3\', \'\xe8\xb1\xb8\', \'\xe8\xb1\xb9\', \'\xe8\xb1\xba\', \'\xe8\xb2\x82\', \'\xe8\xb2\x89\', \'\xe8\xb2\x8a\', \'\xe8\xb2\x8b\', \'\xe8\xb2\x8c\', \'\xe8\xb2\x94\', \'\xe8\xb4\x87\', \'\xe8\xb4\x9d\', \'\xe8\xb4\x9e\', \'\xe8\xb4\x9f\', \'\xe8\xb4\xa1\', \'\xe8\xb4\xa2\', \'\xe8\xb4\xa3\', \'\xe8\xb4\xa4\',\n    \'\xe8\xb4\xa5\', \'\xe8\xb4\xa6\', \'\xe8\xb4\xa7\', \'\xe8\xb4\xa8\', \'\xe8\xb4\xa9\', \'\xe8\xb4\xaa\', \'\xe8\xb4\xab\', \'\xe8\xb4\xac\', \'\xe8\xb4\xad\', \'\xe8\xb4\xae\', \'\xe8\xb4\xaf\', \'\xe8\xb4\xb0\', \'\xe8\xb4\xb1\', \'\xe8\xb4\xb2\', \'\xe8\xb4\xb3\', \'\xe8\xb4\xb4\', \'\xe8\xb4\xb5\', \'\xe8\xb4\xb7\', \'\xe8\xb4\xb8\', \'\xe8\xb4\xb9\',\n    \'\xe8\xb4\xba\', \'\xe8\xb4\xbb\', \'\xe8\xb4\xbc\', \'\xe8\xb4\xbd\', \'\xe8\xb4\xbe\', \'\xe8\xb4\xbf\', \'\xe8\xb5\x80\', \'\xe8\xb5\x81\', \'\xe8\xb5\x82\', \'\xe8\xb5\x83\', \'\xe8\xb5\x84\', \'\xe8\xb5\x85\', \'\xe8\xb5\x87\', \'\xe8\xb5\x88\', \'\xe8\xb5\x89\', \'\xe8\xb5\x8a\', \'\xe8\xb5\x8b\', \'\xe8\xb5\x8c\', \'\xe8\xb5\x8d\', \'\xe8\xb5\x8e\',\n    \'\xe8\xb5\x8f\', \'\xe8\xb5\x90\', \'\xe8\xb5\x94\', \'\xe8\xb5\x96\', \'\xe8\xb5\x98\', \'\xe8\xb5\x9a\', \'\xe8\xb5\x9b\', \'\xe8\xb5\x9c\', \'\xe8\xb5\x9d\', \'\xe8\xb5\x9e\', \'\xe8\xb5\x9f\', \'\xe8\xb5\xa0\', \'\xe8\xb5\xa1\', \'\xe8\xb5\xa2\', \'\xe8\xb5\xa3\', \'\xe8\xb5\xa4\', \'\xe8\xb5\xa6\', \'\xe8\xb5\xa7\', \'\xe8\xb5\xaa\', \'\xe8\xb5\xab\',\n    \'\xe8\xb5\xad\', \'\xe8\xb5\xb0\', \'\xe8\xb5\xb3\', \'\xe8\xb5\xb4\', \'\xe8\xb5\xb5\', \'\xe8\xb5\xb6\', \'\xe8\xb5\xb7\', \'\xe8\xb6\x81\', \'\xe8\xb6\x84\', \'\xe8\xb6\x85\', \'\xe8\xb6\x8a\', \'\xe8\xb6\x8b\', \'\xe8\xb6\x9f\', \'\xe8\xb6\xa3\', \'\xe8\xb6\xb1\', \'\xe8\xb6\xb3\', \'\xe8\xb6\xb4\', \'\xe8\xb6\xb5\', \'\xe8\xb6\xb8\', \'\xe8\xb6\xb9\',\n    \'\xe8\xb6\xba\', \'\xe8\xb6\xbe\', \'\xe8\xb7\x82\', \'\xe8\xb7\x83\', \'\xe8\xb7\x84\', \'\xe8\xb7\x86\', \'\xe8\xb7\x8b\', \'\xe8\xb7\x8c\', \'\xe8\xb7\x91\', \'\xe8\xb7\x96\', \'\xe8\xb7\x9a\', \'\xe8\xb7\x9b\', \'\xe8\xb7\x9d\', \'\xe8\xb7\x9f\', \'\xe8\xb7\xa3\', \'\xe8\xb7\xa4\', \'\xe8\xb7\xa8\', \'\xe8\xb7\xaa\', \'\xe8\xb7\xac\', \'\xe8\xb7\xaf\',\n    \'\xe8\xb7\xb3\', \'\xe8\xb7\xb5\', \'\xe8\xb7\xb7\', \'\xe8\xb7\xb8\', \'\xe8\xb7\xb9\', \'\xe8\xb7\xba\', \'\xe8\xb7\xbb\', \'\xe8\xb7\xbd\', \'\xe8\xb8\x89\', \'\xe8\xb8\x8a\', \'\xe8\xb8\x8c\', \'\xe8\xb8\x8f\', \'\xe8\xb8\x94\', \'\xe8\xb8\x9d\', \'\xe8\xb8\x9e\', \'\xe8\xb8\x9f\', \'\xe8\xb8\xa2\', \'\xe8\xb8\xa3\', \'\xe8\xb8\xa7\', \'\xe8\xb8\xa9\',\n    \'\xe8\xb8\xaa\', \'\xe8\xb8\xaf\', \'\xe8\xb8\xb0\', \'\xe8\xb8\xb1\', \'\xe8\xb8\xb5\', \'\xe8\xb8\xb9\', \'\xe8\xb8\xbd\', \'\xe8\xb9\x80\', \'\xe8\xb9\x82\', \'\xe8\xb9\x84\', \'\xe8\xb9\x87\', \'\xe8\xb9\x88\', \'\xe8\xb9\x89\', \'\xe8\xb9\x8a\', \'\xe8\xb9\x8b\', \'\xe8\xb9\x91\', \'\xe8\xb9\x92\', \'\xe8\xb9\x99\', \'\xe8\xb9\xa6\', \'\xe8\xb9\xa9\',\n    \'\xe8\xb9\xac\', \'\xe8\xb9\xad\', \'\xe8\xb9\xb0\', \'\xe8\xb9\xb2\', \'\xe8\xb9\xb4\', \'\xe8\xb9\xb6\', \'\xe8\xb9\xbb\', \'\xe8\xb9\xbf\', \'\xe8\xba\x81\', \'\xe8\xba\x85\', \'\xe8\xba\x87\', \'\xe8\xba\x8f\', \'\xe8\xba\x9e\', \'\xe8\xba\xab\', \'\xe8\xba\xac\', \'\xe8\xba\xaf\', \'\xe8\xba\xb2\', \'\xe8\xba\xba\', \'\xe8\xbd\x98\', \'\xe8\xbd\xa6\',\n    \'\xe8\xbd\xa7\', \'\xe8\xbd\xa8\', \'\xe8\xbd\xa9\', \'\xe8\xbd\xab\', \'\xe8\xbd\xac\', \'\xe8\xbd\xae\', \'\xe8\xbd\xaf\', \'\xe8\xbd\xb0\', \'\xe8\xbd\xb2\', \'\xe8\xbd\xb4\', \'\xe8\xbd\xb5\', \'\xe8\xbd\xb6\', \'\xe8\xbd\xb8\', \'\xe8\xbd\xba\', \'\xe8\xbd\xbb\', \'\xe8\xbd\xbc\', \'\xe8\xbd\xbd\', \'\xe8\xbd\xbf\', \'\xe8\xbe\x82\', \'\xe8\xbe\x83\',\n    \'\xe8\xbe\x84\', \'\xe8\xbe\x85\', \'\xe8\xbe\x86\', \'\xe8\xbe\x87\', \'\xe8\xbe\x88\', \'\xe8\xbe\x89\', \'\xe8\xbe\x8d\', \'\xe8\xbe\x8e\', \'\xe8\xbe\x90\', \'\xe8\xbe\x91\', \'\xe8\xbe\x93\', \'\xe8\xbe\x94\', \'\xe8\xbe\x95\', \'\xe8\xbe\x96\', \'\xe8\xbe\x97\', \'\xe8\xbe\x98\', \'\xe8\xbe\x99\', \'\xe8\xbe\x9b\', \'\xe8\xbe\x9c\', \'\xe8\xbe\x9e\',\n    \'\xe8\xbe\x9f\', \'\xe8\xbe\xa3\', \'\xe8\xbe\xa8\', \'\xe8\xbe\xa9\', \'\xe8\xbe\xab\', \'\xe8\xbe\xb0\', \'\xe8\xbe\xb1\', \'\xe8\xbe\xb9\', \'\xe8\xbe\xbd\', \'\xe8\xbe\xbe\', \'\xe8\xbf\x81\', \'\xe8\xbf\x82\', \'\xe8\xbf\x84\', \'\xe8\xbf\x85\', \'\xe8\xbf\x87\', \'\xe8\xbf\x88\', \'\xe8\xbf\x8e\', \'\xe8\xbf\x90\', \'\xe8\xbf\x91\', \'\xe8\xbf\x93\',\n    \'\xe8\xbf\x94\', \'\xe8\xbf\x95\', \'\xe8\xbf\x98\', \'\xe8\xbf\x99\', \'\xe8\xbf\x9b\', \'\xe8\xbf\x9c\', \'\xe8\xbf\x9d\', \'\xe8\xbf\x9e\', \'\xe8\xbf\x9f\', \'\xe8\xbf\xa2\', \'\xe8\xbf\xa4\', \'\xe8\xbf\xa5\', \'\xe8\xbf\xa6\', \'\xe8\xbf\xa8\', \'\xe8\xbf\xa9\', \'\xe8\xbf\xaa\', \'\xe8\xbf\xab\', \'\xe8\xbf\xad\', \'\xe8\xbf\xb0\', \'\xe8\xbf\xb7\',\n    \'\xe8\xbf\xb8\', \'\xe8\xbf\xb9\', \'\xe8\xbf\xbd\', \'\xe9\x80\x80\', \'\xe9\x80\x81\', \'\xe9\x80\x82\', \'\xe9\x80\x83\', \'\xe9\x80\x85\', \'\xe9\x80\x86\', \'\xe9\x80\x89\', \'\xe9\x80\x8a\', \'\xe9\x80\x8b\', \'\xe9\x80\x8d\', \'\xe9\x80\x8f\', \'\xe9\x80\x90\', \'\xe9\x80\x91\', \'\xe9\x80\x92\', \'\xe9\x80\x94\', \'\xe9\x80\x96\', \'\xe9\x80\x97\',\n    \'\xe9\x80\x9a\', \'\xe9\x80\x9b\', \'\xe9\x80\x9d\', \'\xe9\x80\x9e\', \'\xe9\x80\x9f\', \'\xe9\x80\xa0\', \'\xe9\x80\xa1\', \'\xe9\x80\xa2\', \'\xe9\x80\xa6\', \'\xe9\x80\xae\', \'\xe9\x80\xb5\', \'\xe9\x80\xb6\', \'\xe9\x80\xb8\', \'\xe9\x80\xbb\', \'\xe9\x80\xbc\', \'\xe9\x80\xbe\', \'\xe9\x81\x81\', \'\xe9\x81\x82\', \'\xe9\x81\x87\', \'\xe9\x81\x8d\',\n    \'\xe9\x81\x8f\', \'\xe9\x81\x90\', \'\xe9\x81\x91\', \'\xe9\x81\x92\', \'\xe9\x81\x93\', \'\xe9\x81\x97\', \'\xe9\x81\x98\', \'\xe9\x81\x9b\', \'\xe9\x81\xa2\', \'\xe9\x81\xa3\', \'\xe9\x81\xa5\', \'\xe9\x81\xa8\', \'\xe9\x81\xab\', \'\xe9\x81\xad\', \'\xe9\x81\xae\', \'\xe9\x81\xb4\', \'\xe9\x81\xb5\', \'\xe9\x81\xb6\', \'\xe9\x81\xb9\', \'\xe9\x81\xbd\',\n    \'\xe9\x81\xbf\', \'\xe9\x82\x80\', \'\xe9\x82\x82\', \'\xe9\x82\x83\', \'\xe9\x82\x88\', \'\xe9\x82\x8b\', \'\xe9\x82\x91\', \'\xe9\x82\x93\', \'\xe9\x82\x95\', \'\xe9\x82\x98\', \'\xe9\x82\x9b\', \'\xe9\x82\xa0\', \'\xe9\x82\xa2\', \'\xe9\x82\xa3\', \'\xe9\x82\xa6\', \'\xe9\x82\xaa\', \'\xe9\x82\xac\', \'\xe9\x82\xae\', \'\xe9\x82\xaf\', \'\xe9\x82\xb0\',\n    \'\xe9\x82\xb1\', \'\xe9\x82\xb3\', \'\xe9\x82\xb4\', \'\xe9\x82\xb5\', \'\xe9\x82\xb8\', \'\xe9\x82\xb9\', \'\xe9\x82\xba\', \'\xe9\x82\xbb\', \'\xe9\x82\xbd\', \'\xe9\x82\xbe\', \'\xe9\x83\x81\', \'\xe9\x83\x84\', \'\xe9\x83\x85\', \'\xe9\x83\x87\', \'\xe9\x83\x88\', \'\xe9\x83\x8a\', \'\xe9\x83\x8e\', \'\xe9\x83\x8f\', \'\xe9\x83\x90\', \'\xe9\x83\x91\',\n    \'\xe9\x83\x93\', \'\xe9\x83\x95\', \'\xe9\x83\x9c\', \'\xe9\x83\x9d\', \'\xe9\x83\xa1\', \'\xe9\x83\xa2\', \'\xe9\x83\xa6\', \'\xe9\x83\xa7\', \'\xe9\x83\xa8\', \'\xe9\x83\xaa\', \'\xe9\x83\xab\', \'\xe9\x83\xad\', \'\xe9\x83\xaf\', \'\xe9\x83\xb4\', \'\xe9\x83\xb8\', \'\xe9\x83\xbd\', \'\xe9\x83\xbe\', \'\xe9\x83\xbf\', \'\xe9\x84\x82\', \'\xe9\x84\x84\',\n    \'\xe9\x84\x8f\', \'\xe9\x84\x97\', \'\xe9\x84\x99\', \'\xe9\x84\x9c\', \'\xe9\x84\xa0\', \'\xe9\x84\xa2\', \'\xe9\x84\xa3\', \'\xe9\x84\xb1\', \'\xe9\x84\xb3\', \'\xe9\x85\x86\', \'\xe9\x85\x87\', \'\xe9\x85\x89\', \'\xe9\x85\x8a\', \'\xe9\x85\x8b\', \'\xe9\x85\x8c\', \'\xe9\x85\x8d\', \'\xe9\x85\x8e\', \'\xe9\x85\x92\', \'\xe9\x85\x97\', \'\xe9\x85\x9a\',\n    \'\xe9\x85\x9d\', \'\xe9\x85\x9e\', \'\xe9\x85\xa1\', \'\xe9\x85\xa2\', \'\xe9\x85\xa3\', \'\xe9\x85\xa4\', \'\xe9\x85\xa5\', \'\xe9\x85\xa9\', \'\xe9\x85\xaa\', \'\xe9\x85\xac\', \'\xe9\x85\xae\', \'\xe9\x85\xaf\', \'\xe9\x85\xb0\', \'\xe9\x85\xb1\', \'\xe9\x85\xb5\', \'\xe9\x85\xb6\', \'\xe9\x85\xb7\', \'\xe9\x85\xb8\', \'\xe9\x85\xb9\', \'\xe9\x85\xba\',\n    \'\xe9\x85\xbf\', \'\xe9\x86\x87\', \'\xe9\x86\x89\', \'\xe9\x86\x8b\', \'\xe9\x86\x8d\', \'\xe9\x86\x92\', \'\xe9\x86\x9a\', \'\xe9\x86\x9b\', \'\xe9\x86\xa2\', \'\xe9\x86\xa6\', \'\xe9\x86\xaa\', \'\xe9\x86\xae\', \'\xe9\x86\xb3\', \'\xe9\x86\xb4\', \'\xe9\x86\xb5\', \'\xe9\x86\xba\', \'\xe9\x87\x82\', \'\xe9\x87\x87\', \'\xe9\x87\x89\', \'\xe9\x87\x8a\',\n    \'\xe9\x87\x8c\', \'\xe9\x87\x8d\', \'\xe9\x87\x8e\', \'\xe9\x87\x8f\', \'\xe9\x87\x90\', \'\xe9\x87\x91\', \'\xe9\x87\x9c\', \'\xe9\x88\x87\', \'\xe9\x89\x8f\', \'\xe9\x89\xb4\', \'\xe9\x8a\xae\', \'\xe9\x8f\x96\', \'\xe9\x90\x98\', \'\xe9\x91\x99\', \'\xe9\x91\xab\', \'\xe9\x92\x88\', \'\xe9\x92\x89\', \'\xe9\x92\x8a\', \'\xe9\x92\x8e\', \'\xe9\x92\x8f\',\n    \'\xe9\x92\x92\', \'\xe9\x92\x93\', \'\xe9\x92\x97\', \'\xe9\x92\x99\', \'\xe9\x92\x9a\', \'\xe9\x92\x9b\', \'\xe9\x92\x9c\', \'\xe9\x92\x9d\', \'\xe9\x92\x9e\', \'\xe9\x92\x9f\', \'\xe9\x92\xa0\', \'\xe9\x92\xa1\', \'\xe9\x92\xa2\', \'\xe9\x92\xa4\', \'\xe9\x92\xa5\', \'\xe9\x92\xa6\', \'\xe9\x92\xa7\', \'\xe9\x92\xa8\', \'\xe9\x92\xa9\', \'\xe9\x92\xae\',\n    \'\xe9\x92\xaf\', \'\xe9\x92\xb0\', \'\xe9\x92\xb1\', \'\xe9\x92\xb2\', \'\xe9\x92\xb3\', \'\xe9\x92\xb4\', \'\xe9\x92\xb5\', \'\xe9\x92\xb9\', \'\xe9\x92\xba\', \'\xe9\x92\xbb\', \'\xe9\x92\xbc\', \'\xe9\x92\xbe\', \'\xe9\x92\xbf\', \'\xe9\x93\x80\', \'\xe9\x93\x81\', \'\xe9\x93\x82\', \'\xe9\x93\x83\', \'\xe9\x93\x84\', \'\xe9\x93\x85\', \'\xe9\x93\x86\',\n    \'\xe9\x93\x89\', \'\xe9\x93\x8e\', \'\xe9\x93\x90\', \'\xe9\x93\x99\', \'\xe9\x93\x9a\', \'\xe9\x93\x9b\', \'\xe9\x93\x9c\', \'\xe9\x93\x9d\', \'\xe9\x93\xa0\', \'\xe9\x93\xa2\', \'\xe9\x93\xa3\', \'\xe9\x93\xa4\', \'\xe9\x93\xa8\', \'\xe9\x93\xa9\', \'\xe9\x93\xac\', \'\xe9\x93\xad\', \'\xe9\x93\xae\', \'\xe9\x93\xb2\', \'\xe9\x93\xb3\', \'\xe9\x93\xb5\',\n    \'\xe9\x93\xb6\', \'\xe9\x93\xb8\', \'\xe9\x93\xba\', \'\xe9\x93\xbe\', \'\xe9\x93\xbf\', \'\xe9\x94\x80\', \'\xe9\x94\x81\', \'\xe9\x94\x82\', \'\xe9\x94\x84\', \'\xe9\x94\x85\', \'\xe9\x94\x88\', \'\xe9\x94\x89\', \'\xe9\x94\x8b\', \'\xe9\x94\x8c\', \'\xe9\x94\x8f\', \'\xe9\x94\x90\', \'\xe9\x94\x91\', \'\xe9\x94\x97\', \'\xe9\x94\x99\', \'\xe9\x94\x9a\',\n    \'\xe9\x94\xa1\', \'\xe9\x94\xa2\', \'\xe9\x94\xa3\', \'\xe9\x94\xa4\', \'\xe9\x94\xa5\', \'\xe9\x94\xa6\', \'\xe9\x94\xad\', \'\xe9\x94\xae\', \'\xe9\x94\xaf\', \'\xe9\x94\xb0\', \'\xe9\x94\xb1\', \'\xe9\x94\xb2\', \'\xe9\x94\xb5\', \'\xe9\x94\xb7\', \'\xe9\x94\xb9\', \'\xe9\x94\xba\', \'\xe9\x94\xbb\', \'\xe9\x94\xbd\', \'\xe9\x94\xbe\', \'\xe9\x95\x80\',\n    \'\xe9\x95\x81\', \'\xe9\x95\x82\', \'\xe9\x95\x87\', \'\xe9\x95\x89\', \'\xe9\x95\x8a\', \'\xe9\x95\x8c\', \'\xe9\x95\x8d\', \'\xe9\x95\x90\', \'\xe9\x95\x91\', \'\xe9\x95\x92\', \'\xe9\x95\x95\', \'\xe9\x95\x96\', \'\xe9\x95\x9b\', \'\xe9\x95\x9c\', \'\xe9\x95\x9d\', \'\xe9\x95\x9e\', \'\xe9\x95\xa3\', \'\xe9\x95\xaa\', \'\xe9\x95\xac\', \'\xe9\x95\xad\',\n    \'\xe9\x95\xaf\', \'\xe9\x95\xb0\', \'\xe9\x95\xb3\', \'\xe9\x95\xb5\', \'\xe9\x95\xb6\', \'\xe9\x95\xbf\', \'\xe9\x96\x8b\', \'\xe9\x96\x93\', \'\xe9\x97\x87\', \'\xe9\x97\x9f\', \'\xe9\x97\xa8\', \'\xe9\x97\xaa\', \'\xe9\x97\xab\', \'\xe9\x97\xad\', \'\xe9\x97\xae\', \'\xe9\x97\xaf\', \'\xe9\x97\xb0\', \'\xe9\x97\xb1\', \'\xe9\x97\xb2\', \'\xe9\x97\xb3\',\n    \'\xe9\x97\xb4\', \'\xe9\x97\xb5\', \'\xe9\x97\xb7\', \'\xe9\x97\xb8\', \'\xe9\x97\xb9\', \'\xe9\x97\xba\', \'\xe9\x97\xbb\', \'\xe9\x97\xbc\', \'\xe9\x97\xbd\', \'\xe9\x97\xbe\', \'\xe9\x98\x80\', \'\xe9\x98\x81\', \'\xe9\x98\x82\', \'\xe9\x98\x83\', \'\xe9\x98\x85\', \'\xe9\x98\x86\', \'\xe9\x98\x88\', \'\xe9\x98\x89\', \'\xe9\x98\x8a\', \'\xe9\x98\x8d\',\n    \'\xe9\x98\x8e\', \'\xe9\x98\x8f\', \'\xe9\x98\x90\', \'\xe9\x98\x91\', \'\xe9\x98\x94\', \'\xe9\x98\x95\', \'\xe9\x98\x96\', \'\xe9\x98\x97\', \'\xe9\x98\x99\', \'\xe9\x98\x9a\', \'\xe9\x98\x9c\', \'\xe9\x98\x9f\', \'\xe9\x98\xa1\', \'\xe9\x98\xaa\', \'\xe9\x98\xae\', \'\xe9\x98\xb1\', \'\xe9\x98\xb2\', \'\xe9\x98\xb3\', \'\xe9\x98\xb4\', \'\xe9\x98\xb5\',\n    \'\xe9\x98\xb6\', \'\xe9\x98\xbb\', \'\xe9\x98\xbf\', \'\xe9\x99\x80\', \'\xe9\x99\x82\', \'\xe9\x99\x84\', \'\xe9\x99\x85\', \'\xe9\x99\x86\', \'\xe9\x99\x87\', \'\xe9\x99\x88\', \'\xe9\x99\x89\', \'\xe9\x99\x8b\', \'\xe9\x99\x8c\', \'\xe9\x99\x8d\', \'\xe9\x99\x90\', \'\xe9\x99\x95\', \'\xe9\x99\x9b\', \'\xe9\x99\x9f\', \'\xe9\x99\xa1\', \'\xe9\x99\xa2\',\n    \'\xe9\x99\xa4\', \'\xe9\x99\xa8\', \'\xe9\x99\xa9\', \'\xe9\x99\xaa\', \'\xe9\x99\xac\', \'\xe9\x99\xb2\', \'\xe9\x99\xb5\', \'\xe9\x99\xb6\', \'\xe9\x99\xb7\', \'\xe9\x9a\x85\', \'\xe9\x9a\x86\', \'\xe9\x9a\x8b\', \'\xe9\x9a\x8d\', \'\xe9\x9a\x8f\', \'\xe9\x9a\x90\', \'\xe9\x9a\x94\', \'\xe9\x9a\x97\', \'\xe9\x9a\x98\', \'\xe9\x9a\x99\', \'\xe9\x9a\x9c\',\n    \'\xe9\x9a\xa7\', \'\xe9\x9a\xb0\', \'\xe9\x9a\xb3\', \'\xe9\x9a\xb6\', \'\xe9\x9a\xbc\', \'\xe9\x9a\xbd\', \'\xe9\x9a\xbe\', \'\xe9\x9b\x80\', \'\xe9\x9b\x81\', \'\xe9\x9b\x84\', \'\xe9\x9b\x85\', \'\xe9\x9b\x86\', \'\xe9\x9b\x87\', \'\xe9\x9b\x89\', \'\xe9\x9b\x8c\', \'\xe9\x9b\x8d\', \'\xe9\x9b\x8e\', \'\xe9\x9b\x8f\', \'\xe9\x9b\x92\', \'\xe9\x9b\x95\',\n    \'\xe9\x9b\xa0\', \'\xe9\x9b\xa8\', \'\xe9\x9b\xa9\', \'\xe9\x9b\xaa\', \'\xe9\x9b\xaf\', \'\xe9\x9b\xb3\', \'\xe9\x9b\xb6\', \'\xe9\x9b\xb7\', \'\xe9\x9b\xb9\', \'\xe9\x9b\xbe\', \'\xe9\x9c\x80\', \'\xe9\x9c\x81\', \'\xe9\x9c\x84\', \'\xe9\x9c\x86\', \'\xe9\x9c\x87\', \'\xe9\x9c\x89\', \'\xe9\x9c\x8d\', \'\xe9\x9c\x8e\', \'\xe9\x9c\x93\', \'\xe9\x9c\x96\',\n    \'\xe9\x9c\x9c\', \'\xe9\x9c\x9e\', \'\xe9\x9c\xa3\', \'\xe9\x9c\xad\', \'\xe9\x9c\xb2\', \'\xe9\x9c\xb8\', \'\xe9\x9c\xb9\', \'\xe9\x9c\xbe\', \'\xe9\x9d\x92\', \'\xe9\x9d\x93\', \'\xe9\x9d\x96\', \'\xe9\x9d\x99\', \'\xe9\x9d\x9b\', \'\xe9\x9d\x9e\', \'\xe9\x9d\xa0\', \'\xe9\x9d\xa1\', \'\xe9\x9d\xa2\', \'\xe9\x9d\xa5\', \'\xe9\x9d\xa9\', \'\xe9\x9d\xb3\',\n    \'\xe9\x9d\xb4\', \'\xe9\x9d\xb6\', \'\xe9\x9e\x85\', \'\xe9\x9e\x8b\', \'\xe9\x9e\x8d\', \'\xe9\x9e\x91\', \'\xe9\x9e\x98\', \'\xe9\x9e\x9a\', \'\xe9\x9e\xa0\', \'\xe9\x9e\xa3\', \'\xe9\x9e\xab\', \'\xe9\x9e\xad\', \'\xe9\x9e\xae\', \'\xe9\x9f\x82\', \'\xe9\x9f\xa6\', \'\xe9\x9f\xa7\', \'\xe9\x9f\xa9\', \'\xe9\x9f\xaa\', \'\xe9\x9f\xac\', \'\xe9\x9f\xad\',\n    \'\xe9\x9f\xb3\', \'\xe9\x9f\xb5\', \'\xe9\x9f\xb6\', \'\xe9\xa0\x89\', \'\xe9\xa0\xab\', \'\xe9\xa1\x92\', \'\xe9\xa1\xb5\', \'\xe9\xa1\xb6\', \'\xe9\xa1\xb7\', \'\xe9\xa1\xb9\', \'\xe9\xa1\xba\', \'\xe9\xa1\xbb\', \'\xe9\xa1\xbc\', \'\xe9\xa1\xbd\', \'\xe9\xa1\xbe\', \'\xe9\xa1\xbf\', \'\xe9\xa2\x80\', \'\xe9\xa2\x81\', \'\xe9\xa2\x82\', \'\xe9\xa2\x84\',\n    \'\xe9\xa2\x85\', \'\xe9\xa2\x86\', \'\xe9\xa2\x87\', \'\xe9\xa2\x88\', \'\xe9\xa2\x89\', \'\xe9\xa2\x8a\', \'\xe9\xa2\x8c\', \'\xe9\xa2\x8d\', \'\xe9\xa2\x90\', \'\xe9\xa2\x91\', \'\xe9\xa2\x93\', \'\xe9\xa2\x94\', \'\xe9\xa2\x96\', \'\xe9\xa2\x97\', \'\xe9\xa2\x98\', \'\xe9\xa2\x9a\', \'\xe9\xa2\x9b\', \'\xe9\xa2\x9c\', \'\xe9\xa2\x9d\', \'\xe9\xa2\xa0\',\n    \'\xe9\xa2\xa1\', \'\xe9\xa2\xa4\', \'\xe9\xa2\xa6\', \'\xe9\xa2\xa7\', \'\xe9\xa3\x8e\', \'\xe9\xa3\x92\', \'\xe9\xa3\x93\', \'\xe9\xa3\x95\', \'\xe9\xa3\x98\', \'\xe9\xa3\x99\', \'\xe9\xa3\x9a\', \'\xe9\xa3\x9e\', \'\xe9\xa3\x9f\', \'\xe9\xa3\xa7\', \'\xe9\xa3\xa8\', \'\xe9\xa4\x8d\', \'\xe9\xa4\x90\', \'\xe9\xa4\xae\', \'\xe9\xa5\x95\', \'\xe9\xa5\x9f\',\n    \'\xe9\xa5\xa5\', \'\xe9\xa5\xa6\', \'\xe9\xa5\xaa\', \'\xe9\xa5\xac\', \'\xe9\xa5\xad\', \'\xe9\xa5\xae\', \'\xe9\xa5\xaf\', \'\xe9\xa5\xb0\', \'\xe9\xa5\xb1\', \'\xe9\xa5\xb2\', \'\xe9\xa5\xb4\', \'\xe9\xa5\xb5\', \'\xe9\xa5\xb6\', \'\xe9\xa5\xb7\', \'\xe9\xa5\xba\', \'\xe9\xa5\xbc\', \'\xe9\xa5\xbd\', \'\xe9\xa5\xbf\', \'\xe9\xa6\x80\', \'\xe9\xa6\x81\',\n    \'\xe9\xa6\x85\', \'\xe9\xa6\x86\', \'\xe9\xa6\x88\', \'\xe9\xa6\x8b\', \'\xe9\xa6\x8d\', \'\xe9\xa6\x8e\', \'\xe9\xa6\x8f\', \'\xe9\xa6\x90\', \'\xe9\xa6\x92\', \'\xe9\xa6\x93\', \'\xe9\xa6\x94\', \'\xe9\xa6\x95\', \'\xe9\xa6\x96\', \'\xe9\xa6\x99\', \'\xe9\xa6\xa5\', \'\xe9\xa6\xa8\', \'\xe9\xa7\x86\', \'\xe9\xa7\xb9\', \'\xe9\xa8\xa0\', \'\xe9\xa8\xb3\',\n    \'\xe9\xa9\xa9\', \'\xe9\xa9\xac\', \'\xe9\xa9\xad\', \'\xe9\xa9\xae\', \'\xe9\xa9\xaf\', \'\xe9\xa9\xb0\', \'\xe9\xa9\xb1\', \'\xe9\xa9\xb3\', \'\xe9\xa9\xb4\', \'\xe9\xa9\xb5\', \'\xe9\xa9\xb6\', \'\xe9\xa9\xb7\', \'\xe9\xa9\xb8\', \'\xe9\xa9\xb9\', \'\xe9\xa9\xba\', \'\xe9\xa9\xbb\', \'\xe9\xa9\xbc\', \'\xe9\xa9\xbd\', \'\xe9\xa9\xbe\', \'\xe9\xa9\xbf\',\n    \'\xe9\xaa\x80\', \'\xe9\xaa\x81\', \'\xe9\xaa\x82\', \'\xe9\xaa\x83\', \'\xe9\xaa\x84\', \'\xe9\xaa\x85\', \'\xe9\xaa\x86\', \'\xe9\xaa\x87\', \'\xe9\xaa\x88\', \'\xe9\xaa\x8a\', \'\xe9\xaa\x8b\', \'\xe9\xaa\x8c\', \'\xe9\xaa\x8d\', \'\xe9\xaa\x8f\', \'\xe9\xaa\x90\', \'\xe9\xaa\x91\', \'\xe9\xaa\x96\', \'\xe9\xaa\x97\', \'\xe9\xaa\x98\', \'\xe9\xaa\x9a\',\n    \'\xe9\xaa\x9b\', \'\xe9\xaa\x9c\', \'\xe9\xaa\x9e\', \'\xe9\xaa\xa0\', \'\xe9\xaa\xa1\', \'\xe9\xaa\xa4\', \'\xe9\xaa\xa5\', \'\xe9\xaa\xa7\', \'\xe9\xaa\xa8\', \'\xe9\xaa\xb0\', \'\xe9\xaa\xb6\', \'\xe9\xaa\xb7\', \'\xe9\xaa\xb8\', \'\xe9\xaa\xbc\', \'\xe9\xab\x80\', \'\xe9\xab\x83\', \'\xe9\xab\x85\', \'\xe9\xab\x8b\', \'\xe9\xab\x91\', \'\xe9\xab\x93\',\n    \'\xe9\xab\x98\', \'\xe9\xab\xa1\', \'\xe9\xab\xa6\', \'\xe9\xab\xab\', \'\xe9\xab\xad\', \'\xe9\xab\xaf\', \'\xe9\xab\xbb\', \'\xe9\xac\x83\', \'\xe9\xac\x93\', \'\xe9\xac\x9f\', \'\xe9\xac\xa3\', \'\xe9\xac\xb2\', \'\xe9\xac\xbb\', \'\xe9\xac\xbc\', \'\xe9\xad\x81\', \'\xe9\xad\x82\', \'\xe9\xad\x84\', \'\xe9\xad\x85\', \'\xe9\xad\x87\', \'\xe9\xad\x89\',\n    \'\xe9\xad\x8b\', \'\xe9\xad\x8d\', \'\xe9\xad\x8f\', \'\xe9\xad\x91\', \'\xe9\xad\x94\', \'\xe9\xad\xad\', \'\xe9\xae\xbc\', \'\xe9\xb1\xbc\', \'\xe9\xb1\xbf\', \'\xe9\xb2\x81\', \'\xe9\xb2\x87\', \'\xe9\xb2\x8b\', \'\xe9\xb2\x8d\', \'\xe9\xb2\x90\', \'\xe9\xb2\x91\', \'\xe9\xb2\x94\', \'\xe9\xb2\x9b\', \'\xe9\xb2\x9c\', \'\xe9\xb2\xa0\', \'\xe9\xb2\xa4\',\n    \'\xe9\xb2\xa7\', \'\xe9\xb2\xa8\', \'\xe9\xb2\xb0\', \'\xe9\xb2\xb2\', \'\xe9\xb2\xb8\', \'\xe9\xb3\x83\', \'\xe9\xb3\x84\', \'\xe9\xb3\x8c\', \'\xe9\xb3\x8d\', \'\xe9\xb3\x8f\', \'\xe9\xb3\x96\', \'\xe9\xb3\x9c\', \'\xe9\xb3\x9d\', \'\xe9\xb3\x9e\', \'\xe9\xb4\x88\', \'\xe9\xb7\xaa\', \'\xe9\xb8\x9f\', \'\xe9\xb8\xa0\', \'\xe9\xb8\xa1\', \'\xe9\xb8\xa2\',\n    \'\xe9\xb8\xa3\', \'\xe9\xb8\xa5\', \'\xe9\xb8\xa6\', \'\xe9\xb8\xa8\', \'\xe9\xb8\xa9\', \'\xe9\xb8\xac\', \'\xe9\xb8\xad\', \'\xe9\xb8\xae\', \'\xe9\xb8\xaf\', \'\xe9\xb8\xb1\', \'\xe9\xb8\xb3\', \'\xe9\xb8\xb5\', \'\xe9\xb8\xb7\', \'\xe9\xb8\xbd\', \'\xe9\xb8\xbe\', \'\xe9\xb8\xbf\', \'\xe9\xb9\x82\', \'\xe9\xb9\x83\', \'\xe9\xb9\x84\', \'\xe9\xb9\x85\',\n    \'\xe9\xb9\x86\', \'\xe9\xb9\x89\', \'\xe9\xb9\x8a\', \'\xe9\xb9\x8f\', \'\xe9\xb9\x91\', \'\xe9\xb9\x96\', \'\xe9\xb9\x97\', \'\xe9\xb9\x98\', \'\xe9\xb9\x9a\', \'\xe9\xb9\x9c\', \'\xe9\xb9\x9e\', \'\xe9\xb9\xa3\', \'\xe9\xb9\xa4\', \'\xe9\xb9\xa6\', \'\xe9\xb9\xab\', \'\xe9\xb9\xad\', \'\xe9\xb9\xb0\', \'\xe9\xb9\xb3\', \'\xe9\xb9\xbf\', \'\xe9\xba\x82\',\n    \'\xe9\xba\x83\', \'\xe9\xba\x8b\', \'\xe9\xba\x92\', \'\xe9\xba\x93\', \'\xe9\xba\x9d\', \'\xe9\xba\x9f\', \'\xe9\xba\xa4\', \'\xe9\xba\xa6\', \'\xe9\xba\xbb\', \'\xe9\xba\xbd\', \'\xe9\xba\xbe\', \'\xe9\xbb\x84\', \'\xe9\xbb\x8d\', \'\xe9\xbb\x8e\', \'\xe9\xbb\x8f\', \'\xe9\xbb\x91\', \'\xe9\xbb\x94\', \'\xe9\xbb\x98\', \'\xe9\xbb\x99\', \'\xe9\xbb\x9b\',\n    \'\xe9\xbb\x9c\', \'\xe9\xbb\x9d\', \'\xe9\xbb\x9f\', \'\xe9\xbb\xa0\', \'\xe9\xbb\xa1\', \'\xe9\xbb\xa5\', \'\xe9\xbb\xaf\', \'\xe9\xbb\xbe\', \'\xe9\xbc\x8b\', \'\xe9\xbc\x8d\', \'\xe9\xbc\x8e\', \'\xe9\xbc\x93\', \'\xe9\xbc\xa0\', \'\xe9\xbc\xbb\', \'\xe9\xbc\xbe\', \'\xe9\xbd\x90\', \'\xe9\xbd\xae\', \'\xe9\xbd\xbf\', \'\xe9\xbe\x81\', \'\xe9\xbe\x82\',\n    \'\xe9\xbe\x84\', \'\xe9\xbe\x88\', \'\xe9\xbe\x8a\', \'\xe9\xbe\x8b\', \'\xe9\xbe\x8c\', \'\xe9\xbe\x8f\', \'\xe9\xbe\x99\', \'\xe9\xbe\x9a\', \'\xe9\xbe\x9b\', \'\xe9\xbe\x9f\', \'\xe5\x81\xb7\', \'\xe5\x81\xbb\', \'\xe5\x81\xbf\', \'\xe5\x82\x80\', \'\xe5\x82\x85\', \'\xe5\x82\x88\', \'\xe5\x82\x8d\', \'\xe5\x82\x92\'\n]\n\nFLOAT = [\'.\']\n\nSIMPLE_CATEGORY_MODEL = dict(\n    NUMERIC=NUMBER,\n    ALPHANUMERIC=NUMBER + ALPHA_LOWER + ALPHA_UPPER,\n    ALPHANUMERIC_LOWER=NUMBER + ALPHA_LOWER,\n    ALPHANUMERIC_UPPER=NUMBER + ALPHA_UPPER,\n    ALPHABET_LOWER=ALPHA_LOWER,\n    ALPHABET_UPPER=ALPHA_UPPER,\n    ALPHABET=ALPHA_LOWER + ALPHA_UPPER,\n    ARITHMETIC=NUMBER + ARITHMETIC,\n    FLOAT=NUMBER + FLOAT,\n    CHS_3500=CHINESE_3500,\n    # Older Version\n    ALPHANUMERIC_MIX_CHS_3500_LOWER=NUMBER + ALPHA_LOWER + CHINESE_3500,\n    # Current Version\n    ALPHANUMERIC_CHS_3500_LOWER=NUMBER + ALPHA_LOWER + CHINESE_3500,\n    DOCUMENT_OCR=NUMBER + ALPHA_LOWER + ALPHA_UPPER + DOCUMENT_SYMBOLS + DOCUMENT_CHS\n)\n\n\ndef encode_maps(source):\n    return {category: i for i, category in enumerate(source, 0)}\n'"
config.py,0,"b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>\nimport os\nimport uuid\nimport yaml\nimport hashlib\nimport logging\nimport logging.handlers\nfrom category import *\nfrom constants import SystemConfig, ModelField, ModelScene\n\nMODEL_SCENE_MAP = {\n    \'Classification\': ModelScene.Classification\n}\n\nMODEL_FIELD_MAP = {\n    \'Image\': ModelField.Image,\n    \'Text\': ModelField.Text\n}\n\n\nclass Config(object):\n    def __init__(self, conf_path: str, graph_path: str = None, model_path: str = None):\n        self.model_path = model_path\n        self.conf_path = conf_path\n        self.graph_path = graph_path\n        self.sys_cf = self.read_conf\n        self.access_key = None\n        self.secret_key = None\n        self.default_model = self.sys_cf[\'System\'][\'DefaultModel\']\n        self.split_flag = self.sys_cf[\'System\'][\'SplitFlag\']\n        self.split_flag = self.split_flag if isinstance(self.split_flag, bytes) else SystemConfig.split_flag\n\n        self.route_map = self.sys_cf.get(\'RouteMap\')\n        self.route_map = self.route_map if self.route_map else SystemConfig.default_route\n        self.log_path = ""logs""\n        self.request_def_map = self.sys_cf.get(\'RequestDef\')\n        self.request_def_map = self.request_def_map if self.request_def_map else SystemConfig.default_config[\'RequestDef\']\n        self.response_def_map = self.sys_cf.get(\'ResponseDef\')\n        self.response_def_map = self.response_def_map if self.response_def_map else SystemConfig.default_config[\'ResponseDef\']\n        self.save_path = self.sys_cf[\'System\'].get(""SavePath"")\n        self.request_count_interval = self.sys_cf[\'System\'].get(""RequestCountInterval"")\n        self.g_request_count_interval = self.sys_cf[\'System\'].get(""GlobalRequestCountInterval"")\n        self.request_limit = self.sys_cf[\'System\'].get(""RequestLimit"")\n        self.request_limit = self.request_limit if self.request_limit else -1\n        self.global_request_limit = self.sys_cf[\'System\'].get(""GlobalRequestLimit"")\n        self.global_request_limit = self.global_request_limit if self.global_request_limit else -1\n        self.exceeded_msg = self.sys_cf[\'System\'].get(""ExceededMessage"")\n        self.exceeded_msg = self.exceeded_msg if self.exceeded_msg else ""The maximum number of requests has been exceeded""\n        self.request_count_interval = self.request_count_interval if self.request_count_interval else 60 * 60 * 24\n        self.g_request_count_interval = self.g_request_count_interval if self.g_request_count_interval else 60 * 60 * 24\n        self.logger_tag = self.sys_cf[\'System\'].get(\'LoggerTag\')\n        self.logger_tag = self.logger_tag if self.logger_tag else ""coriander""\n        self.without_logger = self.sys_cf[\'System\'].get(\'WithoutLogger\')\n        self.without_logger = self.without_logger if self.without_logger is not None else False\n        self.logger = logging.getLogger(self.logger_tag)\n        self.use_default_authorization = False\n        self.authorization = None\n        self.init_logger()\n        self.assignment()\n\n    def init_logger(self):\n        self.logger.setLevel(logging.INFO)\n\n        if not os.path.exists(self.model_path):\n            os.makedirs(self.model_path)\n        if not os.path.exists(self.graph_path):\n            os.makedirs(self.graph_path)\n\n        self.logger.propagate = False\n\n        if not self.without_logger:\n            if not os.path.exists(self.log_path):\n                os.makedirs(self.log_path)\n            file_handler = logging.handlers.TimedRotatingFileHandler(\n                \'{}/{}.log\'.format(self.log_path, ""captcha_platform""),\n                when=""MIDNIGHT"",\n                interval=1,\n                backupCount=180,\n                encoding=\'utf-8\'\n            )\n            stream_handler = logging.StreamHandler()\n            formatter = logging.Formatter(\'%(asctime)s - %(name)s - %(levelname)s - %(message)s\')\n            file_handler.setFormatter(formatter)\n            stream_handler.setFormatter(formatter)\n            self.logger.addHandler(file_handler)\n            self.logger.addHandler(stream_handler)\n\n    def assignment(self):\n        # ---AUTHORIZATION START---\n        mac_address = hex(uuid.getnode())[2:]\n        self.use_default_authorization = False\n        self.authorization = self.sys_cf.get(\'Security\')\n        if not self.authorization or not self.authorization.get(\'AccessKey\') or not self.authorization.get(\'SecretKey\'):\n            self.use_default_authorization = True\n            model_name_md5 = hashlib.md5(\n                ""{}"".format(self.default_model).encode(\'utf8\')).hexdigest()\n            self.authorization = {\n                \'AccessKey\': model_name_md5[0: 16],\n                \'SecretKey\': hashlib.md5(""{}{}"".format(model_name_md5, mac_address).encode(\'utf8\')).hexdigest()\n            }\n        self.access_key = self.authorization[\'AccessKey\']\n        self.secret_key = self.authorization[\'SecretKey\']\n        # ---AUTHORIZATION END---\n\n    @property\n    def read_conf(self):\n        if not os.path.exists(self.conf_path):\n            with open(self.conf_path, \'w\', encoding=""utf-8"") as sys_fp:\n                sys_fp.write(yaml.safe_dump(SystemConfig.default_config))\n                return SystemConfig.default_config\n        with open(self.conf_path, \'r\', encoding=""utf-8"") as sys_fp:\n            sys_stream = sys_fp.read()\n            return yaml.load(sys_stream, Loader=yaml.SafeLoader)\n\n\nclass Model(object):\n\n    def __init__(self, conf: Config, model_conf_path: str):\n        self.conf = conf\n        self.logger = self.conf.logger\n        self.graph_path = conf.graph_path\n        self.model_path = conf.model_path\n        self.model_conf_path = model_conf_path\n        self.model_conf_demo = \'model_demo.yaml\'\n        self.verify()\n\n    def verify(self):\n        if not os.path.exists(self.model_conf_path):\n            raise Exception(\n                \'Configuration File ""{}"" No Found. \'\n                \'If it is used for the first time, please copy one from {} as {}\'.format(\n                    self.model_conf_path,\n                    self.model_conf_demo,\n                    self.model_path\n                )\n            )\n\n        if not os.path.exists(self.model_path):\n            os.makedirs(self.model_path)\n            raise Exception(\n                \'For the first time, please put the trained model in the model directory.\'\n            )\n\n    def category_extract(self, param):\n        if isinstance(param, list):\n            return param\n        if isinstance(param, str):\n            if param in SIMPLE_CATEGORY_MODEL.keys():\n                return SIMPLE_CATEGORY_MODEL.get(param)\n            self.logger.error(\n                ""Category set configuration error, customized category set should be list type""\n            )\n            return None\n\n    @property\n    def model_conf(self) -> dict:\n        with open(self.model_conf_path, \'r\', encoding=""utf-8"") as sys_fp:\n            sys_stream = sys_fp.read()\n            return yaml.load(sys_stream, Loader=yaml.SafeLoader)\n\n\nclass ModelConfig(Model):\n\n    model_exists: bool = False\n\n    def __init__(self, conf: Config, model_conf_path: str):\n        super().__init__(conf=conf, model_conf_path=model_conf_path)\n\n        self.conf = conf\n\n        """"""MODEL""""""\n        self.model_root: dict = self.model_conf[\'Model\']\n        self.model_name: str = self.model_root.get(\'ModelName\')\n        self.model_version: float = self.model_root.get(\'Version\')\n        self.model_version = self.model_version if self.model_version else 1.0\n        self.model_field_param: str = self.model_root.get(\'ModelField\')\n        self.model_field: ModelField = ModelConfig.param_convert(\n            source=self.model_field_param,\n            param_map=MODEL_FIELD_MAP,\n            text=""Current model field ({model_field}) is not supported"".format(model_field=self.model_field_param),\n            code=50002\n        )\n\n        self.model_scene_param: str = self.model_root.get(\'ModelScene\')\n\n        self.model_scene: ModelScene = ModelConfig.param_convert(\n            source=self.model_scene_param,\n            param_map=MODEL_SCENE_MAP,\n            text=""Current model scene ({model_scene}) is not supported"".format(model_scene=self.model_scene_param),\n            code=50001\n        )\n\n        """"""SYSTEM""""""\n        self.checkpoint_tag = \'checkpoint\'\n        self.system_root: dict = self.model_conf[\'System\']\n        self.memory_usage: float = self.system_root.get(\'MemoryUsage\')\n\n        """"""FIELD PARAM - IMAGE""""""\n        self.field_root: dict = self.model_conf[\'FieldParam\']\n        self.category_param = self.field_root.get(\'Category\')\n        self.category_value = self.category_extract(self.category_param)\n        if self.category_value is None:\n            raise Exception(\n                ""The category set type does not exist, there is no category set named {}"".format(self.category_param),\n            )\n        self.category: list = SPACE_TOKEN + self.category_value\n        self.category_num: int = len(self.category)\n        self.image_channel: int = self.field_root.get(\'ImageChannel\')\n        self.image_width: int = self.field_root.get(\'ImageWidth\')\n        self.image_height: int = self.field_root.get(\'ImageHeight\')\n        self.resize: list = self.field_root.get(\'Resize\')\n        self.output_split = self.field_root.get(\'OutputSplit\')\n        self.output_split = self.output_split if self.output_split else """"\n        self.corp_params = self.field_root.get(\'CorpParams\')\n        self.output_coord = self.field_root.get(\'OutputCoord\')\n        self.batch_model = self.field_root.get(\'BatchModel\')\n        self.external_model = self.field_root.get(\'ExternalModelForCorp\')\n        self.category_split = self.field_root.get(\'CategorySplit\')\n\n        """"""PRETREATMENT""""""\n        self.pretreatment_root = self.model_conf.get(\'Pretreatment\')\n        self.pre_binaryzation = self.get_var(self.pretreatment_root, \'Binaryzation\', -1)\n        self.pre_replace_transparent = self.get_var(self.pretreatment_root, \'ReplaceTransparent\', True)\n        self.pre_horizontal_stitching = self.get_var(self.pretreatment_root, \'HorizontalStitching\', False)\n        self.pre_concat_frames = self.get_var(self.pretreatment_root, \'ConcatFrames\', -1)\n        self.pre_blend_frames = self.get_var(self.pretreatment_root, \'BlendFrames\', -1)\n        self.exec_map = self.get_var(self.pretreatment_root, \'ExecuteMap\', None)\n\n        """"""COMPILE_MODEL""""""\n        self.compile_model_path = os.path.join(self.graph_path, \'{}.pb\'.format(self.model_name))\n        if not os.path.exists(self.compile_model_path):\n            if not os.path.exists(self.graph_path):\n                os.makedirs(self.graph_path)\n            self.logger.error(\n                \'{} not found, please put the trained model in the graph directory.\'.format(self.compile_model_path)\n            )\n        else:\n            self.model_exists = True\n\n    @staticmethod\n    def param_convert(source, param_map: dict, text, code, default=None):\n        if source is None:\n            return default\n        if source not in param_map.keys():\n            raise Exception(text)\n        return param_map[source]\n\n    def size_match(self, size_str):\n        return size_str == self.size_string\n\n    @staticmethod\n    def get_var(src: dict, name: str, default=None):\n        if not src:\n            return default\n        return src.get(name)\n\n    @property\n    def size_string(self):\n        return ""{}x{}"".format(self.image_width, self.image_height)\n'"
constants.py,0,"b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>\nfrom enum import Enum, unique\n\n\n@unique\nclass ModelScene(Enum):\n    """"""\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x9c\xba\xe6\x99\xaf\xe6\x9e\x9a\xe4\xb8\xbe""""""\n    Classification = \'Classification\'\n\n\n@unique\nclass ModelField(Enum):\n    """"""\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xb1\xbb\xe5\x88\xab\xe6\x9e\x9a\xe4\xb8\xbe""""""\n    Image = \'Image\'\n    Text = \'Text\'\n\n\nclass SystemConfig:\n    split_flag = b\'\\x99\\x99\\x99\\x00\\xff\\xff\\xff\\x00\\x99\\x99\\x99\'\n    default_route = [\n            {\n                ""Class"": ""AuthHandler"",\n                ""Route"": ""/captcha/auth/v2""\n            },\n            {\n                ""Class"": ""NoAuthHandler"",\n                ""Route"": ""/captcha/v1""\n            },\n            {\n                ""Class"": ""SimpleHandler"",\n                ""Route"": ""/captcha/v3""\n            },\n            {\n                ""Class"": ""HeartBeatHandler"",\n                ""Route"": ""/check_backend_active.html""\n            },\n            {\n                ""Class"": ""HeartBeatHandler"",\n                ""Route"": ""/verification""\n            },\n            {\n                ""Class"": ""HeartBeatHandler"",\n                ""Route"": ""/""\n            },\n            {\n                ""Class"": ""ServiceHandler"",\n                ""Route"": ""/service/info""\n            },\n            {\n                ""Class"": ""FileHandler"",\n                ""Route"": ""/service/logs/(.*)"",\n                ""Param"": {""path"": ""logs""}\n            },\n            {\n                ""Class"": ""BaseHandler"",\n                ""Route"": "".*""\n            }\n        ]\n    default_config = {\n        ""System"": {\n            ""DefaultModel"": ""default"",\n            ""SplitFlag"": b\'\\x99\\x99\\x99\\x00\\xff\\xff\\xff\\x00\\x99\\x99\\x99\',\n            ""SavePath"": """",\n            ""RequestCountInterval"": 86400,\n            ""GlobalRequestCountInterval"": 86400,\n            ""RequestLimit"": -1,\n            ""GlobalRequestLimit"": -1,\n            ""WithoutLogger"": False\n        },\n        ""RouteMap"": default_route,\n        ""Security"": {\n            ""AccessKey"": """",\n            ""SecretKey"": """"\n        },\n        ""RequestDef"": {\n            ""InputData"": ""image"",\n            ""ModelName"": ""model_name"",\n        },\n        ""ResponseDef"": {\n            ""Message"": ""message"",\n            ""StatusCode"": ""code"",\n            ""StatusBool"": ""success"",\n            ""Uid"": ""uid"",\n        },\n    }\n\n\nclass ServerType(str):\n    FLASK = 19951\n    TORNADO = 19952\n    SANIC = 19953\n\n\nclass Response:\n\n    def __init__(self, def_map: dict):\n        # SIGN\n        self.INVALID_PUBLIC_PARAMS = dict(Message=\'Invalid Public Params\', StatusCode=400001, StatusBool=False)\n        self.UNKNOWN_SERVER_ERROR = dict(Message=\'Unknown Server Error\', StatusCode=400002, StatusBool=False)\n        self.INVALID_TIMESTAMP = dict(Message=\'Invalid Timestamp\', StatusCode=400004, StatusBool=False)\n        self.INVALID_ACCESS_KEY = dict(Message=\'Invalid Access Key\', StatusCode=400005, StatusBool=False)\n        self.INVALID_QUERY_STRING = dict(Message=\'Invalid Query String\', StatusCode=400006, StatusBool=False)\n\n        # SERVER\n        self.SUCCESS = dict(Message=None, StatusCode=000000, StatusBool=True)\n        self.INVALID_IMAGE_FORMAT = dict(Message=\'Invalid Image Format\', StatusCode=500001, StatusBool=False)\n        self.INVALID_BASE64_STRING = dict(Message=\'Invalid Base64 String\', StatusCode=500002, StatusBool=False)\n        self.IMAGE_DAMAGE = dict(Message=\'Image Damage\', StatusCode=500003, StatusBool=False)\n        self.IMAGE_SIZE_NOT_MATCH_GRAPH = dict(Message=\'Image Size Not Match Graph Value\', StatusCode=500004, StatusBool=False)\n\n        self.INVALID_PUBLIC_PARAMS = self.parse(self.INVALID_PUBLIC_PARAMS, def_map)\n        self.UNKNOWN_SERVER_ERROR = self.parse(self.UNKNOWN_SERVER_ERROR, def_map)\n        self.INVALID_TIMESTAMP = self.parse(self.INVALID_TIMESTAMP, def_map)\n        self.INVALID_ACCESS_KEY = self.parse(self.INVALID_ACCESS_KEY, def_map)\n        self.INVALID_QUERY_STRING = self.parse(self.INVALID_QUERY_STRING, def_map)\n\n        self.SUCCESS = self.parse(self.SUCCESS, def_map)\n        self.INVALID_IMAGE_FORMAT = self.parse(self.INVALID_IMAGE_FORMAT, def_map)\n        self.INVALID_BASE64_STRING = self.parse(self.INVALID_BASE64_STRING, def_map)\n        self.IMAGE_DAMAGE = self.parse(self.IMAGE_DAMAGE, def_map)\n        self.IMAGE_SIZE_NOT_MATCH_GRAPH = self.parse(self.IMAGE_SIZE_NOT_MATCH_GRAPH, def_map)\n\n    def find_message(self, _code):\n        e = [value for value in vars(self).values()]\n        _t = [i[\'message\'] for i in e if i[\'code\'] == _code]\n        return _t[0] if _t else None\n\n    def find(self, _code):\n        e = [value for value in vars(self).values()]\n        _t = [i for i in e if i[\'code\'] == _code]\n        return _t[0] if _t else None\n\n    def all_code(self):\n        return [i[\'message\'] for i in [value for value in vars(self).values()]]\n\n    @staticmethod\n    def parse(src: dict, target_map: dict):\n        return {target_map[k]: v for k, v in src.items()}\n'"
demo.py,0,"b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>\nimport io\nimport os\nimport base64\nimport datetime\nimport hashlib\nimport time\nimport numpy as np\nimport cv2\nfrom config import Config\nfrom requests import Session, post, get\nfrom PIL import Image as PilImage\nfrom constants import ServerType\n\n# DEFAULT_HOST = ""63.211.111.82""\n# DEFAULT_HOST = ""39.100.71.103""\n# DEFAULT_HOST = ""120.79.233.49""\n# DEFAULT_HOST = ""47.52.203.228""\nDEFAULT_HOST = ""192.168.50.152""\n# DEFAULT_HOST = ""127.0.0.1""\n\n\ndef _image(_path, model_type=None, model_site=None, need_color=None, fpath=None):\n    with open(_path, ""rb"") as f:\n        img_bytes = f.read()\n        # data_stream = io.BytesIO(img_bytes)\n        # pil_image = PilImage.open(data_stream)\n        # size = pil_image.size\n        # im = np.array(pil_image)\n        # im = im[3:size[1] - 3, 3:size[0] - 3]\n        # img_bytes = bytearray(cv2.imencode(\'.png\', im)[1])\n\n    b64 = base64.b64encode(img_bytes).decode()\n    return {\n        \'image\': b64,\n        \'model_type\': model_type,\n        \'model_site\': model_site,\n        \'need_color\': need_color,\n        \'path\': fpath\n    }\n\n\nclass Auth(object):\n\n    def __init__(self, host: str, server_type: ServerType, access_key=None, secret_key=None, port=None):\n        self._conf = Config(conf_path=""config.yaml"")\n        self._url = \'http://{}:{}/captcha/auth/v2\'.format(host, port if port else server_type)\n        self._access_key = access_key if access_key else self._conf.access_key\n        self._secret_key = secret_key if secret_key else self._conf.secret_key\n        self.true_count = 0\n        self.total_count = 0\n\n    def sign(self, args):\n        """""" MD5 signature\n        @param args: All query parameters (public and private) requested in addition to signature\n        {\n            \'image\': \'base64 encoded text\',\n            \'accessKey\': \'C180130204197838\',\n            \'timestamp\': 1536682949,\n            \'sign\': \'F641778AE4F93DAF5CCE3E43A674C34E\'\n        }\n        The sign is the md5 encrypted of ""accessKey=your_assess_key&image=base64_encoded_text&timestamp=current_timestamp""\n        """"""\n        if ""sign"" in args:\n            args.pop(""sign"")\n        query_string = \'&\'.join([\'{}={}\'.format(k, v) for (k, v) in sorted(args.items())])\n        query_string = \'&\'.join([query_string, self._secret_key])\n        return hashlib.md5(query_string.encode(\'utf-8\')).hexdigest().upper()\n\n    def make_json(self, params):\n        if not isinstance(params, dict):\n            raise TypeError(""params is not a dict"")\n        # Get the current timestamp\n        timestamp = int(time.mktime(datetime.datetime.now().timetuple()))\n        # Set public parameters\n        params.update(accessKey=self._access_key, timestamp=timestamp)\n        params.update(sign=self.sign(params))\n        return params\n\n    def request(self, params):\n        params = dict(params, **self.make_json(params))\n        return post(self._url, json=params).json()\n\n    def local_iter(self, image_list: dict):\n        for k, v in image_list.items():\n            code = self.request(v).get(\'message\')\n            _true = str(code).lower() == str(k).lower()\n            if _true:\n                self.true_count += 1\n            self.total_count += 1\n            print(\'result: {}, label: {}, flag: n{}, acc_rate: {}\'.format(code, k, _true,\n                                                                          self.true_count / self.total_count))\n\n\nclass NoAuth(object):\n    def __init__(self, host: str, server_type: ServerType, port=None, url=None):\n        self._url = \'http://{}:{}/captcha/v1\'.format(host, port if port else server_type)\n        self._url = self._url if not url else url\n        self.true_count = 0\n        self.total_count = 0\n\n    def request(self, params):\n        import json\n        # print(params)\n        # print(params[\'fpath\'])\n        # print(json.dumps(params))\n        # return post(self._url, data=base64.b64decode(params.get(""image"").encode())).json()\n        return post(self._url, json=params).json()\n\n    def local_iter(self, image_list: dict):\n        for k, v in image_list.items():\n            try:\n                code = self.request(v).get(\'message\')\n                _true = str(code).lower() == str(k).lower()\n                if _true:\n                    self.true_count += 1\n                self.total_count += 1\n                print(\'result: {}, label: {}, flag: {}, acc_rate: {}, {}\'.format(\n                    code, k, _true, self.true_count / self.total_count, v.get(\'path\')\n                ))\n            except Exception as e:\n                print(e)\n\n    def press_testing(self, image_list: dict, model_type=None, model_site=None):\n        from multiprocessing.pool import ThreadPool\n        pool = ThreadPool(500)\n        for k, v in image_list.items():\n            pool.apply_async(\n                self.request({""image"": v.get(\'image\'), ""model_type"": model_type, ""model_site"": model_site}))\n        pool.close()\n        pool.join()\n        print(self.true_count / len(image_list))\n\n\nclass GoogleRPC(object):\n\n    def __init__(self, host: str):\n        self._url = \'{}:50054\'.format(host)\n        self.true_count = 0\n        self.total_count = 0\n\n    def request(self, image, println=False, value=None, model_type=None, model_site=None, need_color=None):\n\n        import grpc\n        import grpc_pb2\n        import grpc_pb2_grpc\n        channel = grpc.insecure_channel(self._url)\n        stub = grpc_pb2_grpc.PredictStub(channel)\n        response = stub.predict(grpc_pb2.PredictRequest(\n            image=image, split_char=\',\', model_type=model_type, model_site=model_site, need_color=need_color\n        ))\n        if println and value:\n            _true = str(response.result).lower() == str(value).lower()\n            if _true:\n                self.true_count += 1\n            print(""result: {}, label: {}, flag: {}"".format(response.result, value, _true))\n        return {""message"": response.result, ""code"": response.code, ""success"": response.success}\n\n    def local_iter(self, image_list: dict, model_type=None, model_site=None):\n        for k, v in image_list.items():\n            code = self.request(v.get(\'image\'), model_type=model_type, model_site=model_site,\n                                need_color=v.get(\'need_color\')).get(\'message\')\n            _true = str(code).lower() == str(k).lower()\n            if _true:\n                self.true_count += 1\n            self.total_count += 1\n            print(\'result: {}, label: {}, flag: {}, acc_rate: {}\'.format(\n                code, k, _true, self.true_count / self.total_count\n            ))\n\n    def remote_iter(self, url: str, save_path: str = None, num=100, model_type=None, model_site=None):\n        if not os.path.exists(save_path):\n            os.makedirs(save_path)\n        sess = Session()\n        sess.verify = False\n        for i in range(num):\n            img_bytes = sess.get(url).content\n            img_b64 = base64.b64encode(img_bytes).decode()\n            code = self.request(img_b64, model_type=model_type, model_site=model_site).get(\'message\')\n            with open(""{}/{}_{}.jpg"".format(save_path, code, hashlib.md5(img_bytes).hexdigest()), ""wb"") as f:\n                f.write(img_bytes)\n\n            print(\'result: {}\'.format(\n                code,\n            ))\n\n    def press_testing(self, image_list: dict, model_type=None, model_site=None):\n        from multiprocessing.pool import ThreadPool\n        pool = ThreadPool(500)\n        for k, v in image_list.items():\n            pool.apply_async(self.request(v.get(\'image\'), True, k, model_type=model_type, model_site=model_site))\n        pool.close()\n        pool.join()\n        print(self.true_count / len(image_list))\n\n\nif __name__ == \'__main__\':\n    # # Here you can replace it with a web request to get images in real time.\n    # with open(r""D:\\***.jpg"", ""rb"") as f:\n    #     img_bytes = f.read()\n\n    # # Here is the code for the network request.\n    # # Replace your own captcha url for testing.\n    # # sess = Session()\n    # # sess.headers = {\n    # #     \'user-agent\': \'Chrome\'\n    # # }\n    # # img_bytes = sess.get(""http://***.com/captcha"").content\n    #\n    # # Open the image for human eye comparison,\n    # # preview whether the recognition result is consistent.\n    # data_stream = io.BytesIO(img_bytes)\n    # pil_image = PilImage.open(data_stream)\n    # pil_image.show()\n    # api_params = {\n    #     \'image\': base64.b64encode(img_bytes).decode(),\n    # }\n    # print(api_params)\n    # for i in range(1):\n    # Tornado API with authentication\n    # resp = Auth(DEFAULT_HOST, ServerType.TORNADO).request(api_params)\n    # print(resp)\n\n    # Flask API with authentication\n    # resp = Auth(DEFAULT_HOST, ServerType.FLASK).request(api_params)\n    # print(resp)\n\n    # Tornado API without authentication\n    # resp = NoAuth(DEFAULT_HOST, ServerType.TORNADO).request(api_params)\n    # print(resp)\n\n    # Flask API without authentication\n    # resp = NoAuth(DEFAULT_HOST, ServerType.FLASK).request(api_params)\n    # print(resp)\n\n    # API by gRPC - The fastest way.\n    # If you want to identify multiple verification codes continuously, please do like this:\n    # resp = GoogleRPC(DEFAULT_HOST).request(base64.b64encode(img_bytes+b\'\\x00\\xff\\xff\\xff\\x00\'+img_bytes).decode())\n    # b\'\\x00\\xff\\xff\\xff\\x00\' is the split_flag defined in config.py\n    # resp = GoogleRPC(DEFAULT_HOST).request(base64.b64encode(img_bytes).decode())\n    # print(resp)\n    # pass\n\n    # API by gRPC - The fastest way, Local batch version, only for self testing.\n    path = r""C:\\Users\\kerlomz\\Desktop\\New folder (6)""\n    path_list = os.listdir(path)\n    import random\n\n    # random.shuffle(path_list)\n    print(path_list)\n    batch = {\n        _path.split(\'_\')[0].lower(): _image(\n            os.path.join(path, _path),\n            model_type=None,\n            model_site=None,\n            need_color=None,\n            fpath=_path\n        )\n        for i, _path in enumerate(path_list)\n        if i < 10000\n    }\n    print(batch)\n    NoAuth(DEFAULT_HOST, ServerType.TORNADO, port=19952).local_iter(batch)\n    # NoAuth(DEFAULT_HOST, ServerType.FLASK).local_iter(batch)\n    # NoAuth(DEFAULT_HOST, ServerType.SANIC).local_iter(batch)\n    # GoogleRPC(DEFAULT_HOST).local_iter(batch, model_site=None, model_type=None)\n    # GoogleRPC(DEFAULT_HOST).press_testing(batch, model_site=None, model_type=None)\n    # GoogleRPC(DEFAULT_HOST).remote_iter(""https://pbank.cqrcb.com:9080/perbank/VerifyImage?update=0.8746844661116633"", r""D:\\test12"", 100, model_site=\'80x24\', model_type=None)\n'"
deploy.conf.py,0,"b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>\n# Gunicorn deploy file.\n\nimport multiprocessing\n\nbind = \'0.0.0.0:19951\'\nworkers = multiprocessing.cpu_count() * 2 + 1\nbacklog = 2048\n# worker_class = ""gevent""\ndebug = False\ndaemon = True\nproc_name = \'gunicorn.pid\'\npidfile = \'debug.log\'\nerrorlog = \'error.log\'\naccesslog = \'access.log\'\nloglevel = \'info\'\ntimeout = 10\n'"
event_handler.py,0,"b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>\nimport os\nimport time\nfrom watchdog.events import *\nfrom config import ModelConfig, Config\nfrom graph_session import GraphSession\nfrom interface import InterfaceManager, Interface\nfrom utils import PathUtils\n\n\nclass FileEventHandler(FileSystemEventHandler):\n    def __init__(self, conf: Config, model_conf_path: str, interface_manager: InterfaceManager):\n        FileSystemEventHandler.__init__(self)\n        self.conf = conf\n        self.logger = self.conf.logger\n        self.name_map = {}\n        self.model_conf_path = model_conf_path\n        self.interface_manager = interface_manager\n        self.init()\n\n    def init(self):\n        model_list = os.listdir(self.model_conf_path)\n        model_list = [os.path.join(self.model_conf_path, i) for i in model_list if i.endswith(""yaml"")]\n        for model in model_list:\n            self._add(model, is_first=True)\n        if self.interface_manager.total == 0:\n            self.logger.info(\n                ""\\n - Number of interfaces: {}""\n                ""\\n - There is currently no model deployment""\n                ""\\n - Services are not available""\n                ""\\n[ Please check the graph and model path whether the pb file and yaml file are placed. ]"".format(\n                    self.interface_manager.total,\n                ))\n        else:\n            self.logger.info(\n                ""\\n - Number of interfaces: {}""\n                ""\\n - Current online interface: \\n\\t - {}""\n                ""\\n - The default Interface is: {}"".format(\n                    self.interface_manager.total,\n                    ""\\n\\t - "".join([""[{}]"".format(v) for k, v in self.name_map.items()]),\n                    self.interface_manager.default_name\n                ))\n\n    def _add(self, src_path, is_first=False, count=0):\n        try:\n            model_path = str(src_path)\n            path_exists = os.path.exists(model_path)\n            if not path_exists and count > 0:\n                self.logger.error(""{} not found, retry attempt is terminated."".format(model_path))\n                return\n            if \'model_demo.yaml\' in model_path:\n                self.logger.warning(\n                    ""\\n-------------------------------------------------------------------\\n""\n                    ""- Found that the model_demo.yaml file exists, \\n""\n                    ""- the loading is automatically ignored. \\n""\n                    ""- If it is used for the first time, \\n""\n                    ""- please copy it as a template. \\n""\n                    ""- and do not use the reserved character \\""model_demo.yaml\\"" as the file name.""\n                    ""\\n-------------------------------------------------------------------""\n                )\n                return\n            if model_path.endswith(""yaml""):\n                model_conf = ModelConfig(self.conf, model_path)\n                inner_name = model_conf.model_name\n                inner_size = model_conf.size_string\n                inner_key = PathUtils.get_file_name(model_path)\n                for k, v in self.name_map.items():\n                    if inner_size in v:\n                        self.logger.warning(\n                            ""\\n-------------------------------------------------------------------\\n""\n                            ""- The current model {} is the same size [{}] as the loaded model {}. \\n""\n                            ""- Only one of the smart calls can be called. \\n""\n                            ""- If you want to refer to one of them, \\n""\n                            ""- please use the model key or model type to find it.""\n                            ""\\n-------------------------------------------------------------------"".format(\n                                inner_key, inner_size, k\n                            )\n                        )\n                        break\n\n                inner_value = model_conf.model_name\n                graph_session = GraphSession(model_conf)\n                if graph_session.loaded:\n                    interface = Interface(graph_session)\n                    if inner_name == self.conf.default_model:\n                        self.interface_manager.set_default(interface)\n                    else:\n                        self.interface_manager.add(interface)\n                    self.logger.info(""{} a new model: {} ({})"".format(\n                        ""Inited"" if is_first else ""Added"", inner_value, inner_key\n                    ))\n                    self.name_map[inner_key] = inner_value\n                    if src_path in self.interface_manager.invalid_group:\n                        self.interface_manager.invalid_group.pop(src_path)\n                else:\n                    self.interface_manager.report(src_path)\n                    if count < 12 and not is_first:\n                        time.sleep(5)\n                        return self._add(src_path, is_first=is_first, count=count+1)\n\n        except Exception as e:\n            self.interface_manager.report(src_path)\n            self.logger.error(e)\n\n    def delete(self, src_path):\n        try:\n            model_path = str(src_path)\n            if model_path.endswith(""yaml""):\n                inner_key = PathUtils.get_file_name(model_path)\n                graph_name = self.name_map.get(inner_key)\n                self.interface_manager.remove_by_name(graph_name)\n                self.name_map.pop(inner_key)\n                self.logger.info(""Unload the model: {} ({})"".format(graph_name, inner_key))\n        except Exception as e:\n            self.logger.error(""Config File [{}] does not exist."".format(str(e).replace(""\'"", """")))\n\n    def on_created(self, event):\n        if event.is_directory:\n            self.logger.info(""directory created:{0}"".format(event.src_path))\n        else:\n            model_path = str(event.src_path)\n            self._add(model_path)\n            self.logger.info(\n                ""\\n - Number of interfaces: {}""\n                ""\\n - Current online interface: \\n\\t - {}""\n                ""\\n - The default Interface is: {}"".format(\n                    len(self.interface_manager.group),\n                    ""\\n\\t - "".join([""[{}]"".format(v) for k, v in self.name_map.items()]),\n                    self.interface_manager.default_name\n                ))\n\n    def on_deleted(self, event):\n        if event.is_directory:\n            self.logger.info(""directory deleted:{0}"".format(event.src_path))\n        else:\n            model_path = str(event.src_path)\n            if model_path in self.interface_manager.invalid_group:\n                self.interface_manager.invalid_group.pop(model_path)\n            inner_key = PathUtils.get_file_name(model_path)\n            if inner_key in self.name_map:\n                self.delete(model_path)\n            self.logger.info(\n                ""\\n - Number of interfaces: {}""\n                ""\\n - Current online interface: \\n\\t - {}""\n                ""\\n - The default Interface is: {}"".format(\n                    len(self.interface_manager.group),\n                    ""\\n\\t - "".join([""[{}]"".format(v) for k, v in self.name_map.items()]),\n                    self.interface_manager.default_name\n                ))\n\n\nif __name__ == ""__main__"":\n    pass\n    # import time\n    # from watchdog.observers import Observer\n    # observer = Observer()\n    # interface_manager = InterfaceManager()\n    # event_handler = FileEventHandler("""", interface_manager)\n    # observer.schedule(event_handler, event_handler.model_conf_path, True)\n    # observer.start()\n    # try:\n    #     while True:\n    #         time.sleep(1)\n    # except KeyboardInterrupt:\n    #     observer.stop()\n    # observer.join()\n'"
event_loop.py,0,"b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>\nimport time\nfrom watchdog.observers import Observer\nfrom event_handler import FileEventHandler\n\n\ndef event_loop(system_config, model_path, interface_manager):\n    observer = Observer()\n    event_handler = FileEventHandler(system_config, model_path, interface_manager)\n    observer.schedule(event_handler, event_handler.model_conf_path, True)\n    observer.start()\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        observer.stop()\n    observer.join()'"
flask_server.py,0,"b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>\nimport time\nimport optparse\nimport threading\nfrom flask import *\nfrom flask_caching import Cache\nfrom gevent.pywsgi import WSGIServer\nfrom geventwebsocket.handler import WebSocketHandler\nfrom config import Config\nfrom utils import ImageUtils\nfrom constants import Response\n\nfrom interface import InterfaceManager\nfrom signature import Signature, ServerType\nfrom watchdog.observers import Observer\nfrom event_handler import FileEventHandler\nfrom middleware import *\n# The order cannot be changed, it must be before the flask.\n\napp = Flask(__name__)\ncache = Cache(app, config={\'CACHE_TYPE\': \'simple\'})\n\nconf_path = \'config.yaml\'\nmodel_path = \'model\'\ngraph_path = \'graph\'\n\n\nsystem_config = Config(conf_path=conf_path, model_path=model_path, graph_path=graph_path)\nsign = Signature(ServerType.FLASK, system_config)\n_except = Response(system_config.response_def_map)\nroute_map = {i[\'Class\']: i[\'Route\'] for i in system_config.route_map}\nsign.set_auth([{\'accessKey\': system_config.access_key, \'secretKey\': system_config.secret_key}])\nlogger = system_config.logger\ninterface_manager = InterfaceManager()\nimage_utils = ImageUtils(system_config)\n\n\n@app.after_request\ndef after_request(response):\n    response.headers[\'Access-Control-Allow-Origin\'] = \'*\'\n    return response\n\n\n@app.errorhandler(400)\ndef server_error(error=None):\n    message = ""Bad Request""\n    return jsonify(message=message, code=error.code, success=False)\n\n\n@app.errorhandler(500)\ndef server_error(error=None):\n    message = \'Internal Server Error\'\n    return jsonify(message=message, code=500, success=False)\n\n\n@app.errorhandler(404)\ndef not_found(error=None):\n    message = \'404 Not Found\'\n    return jsonify(message=message, code=error.code, success=False)\n\n\n@app.errorhandler(403)\ndef permission_denied(error=None):\n    message = \'Forbidden\'\n    return jsonify(message=message, code=error.code, success=False)\n\n\n@app.route(route_map[\'AuthHandler\'], methods=[\'POST\'])\n@sign.signature_required  # This decorator is required for certification.\ndef auth_request():\n    return common_request()\n\n\n@app.route(route_map[\'NoAuthHandler\'], methods=[\'POST\'])\ndef no_auth_request():\n    return common_request()\n\n\ndef common_request():\n    """"""\n    This api is used for captcha prediction without authentication\n    :return:\n    """"""\n    start_time = time.time()\n    if not request.json or \'image\' not in request.json:\n        abort(400)\n\n    if interface_manager.total == 0:\n        logger.info(\'There is currently no model deployment and services are not available.\')\n        return json.dumps({""message"": """", ""success"": False, ""code"": -999})\n\n    bytes_batch, response = image_utils.get_bytes_batch(request.json[\'image\'])\n\n    if not bytes_batch:\n        logger.error(\'Name[{}] - Response[{}] - {} ms\'.format(\n            request.json.get(\'model_site\'), response,\n            (time.time() - start_time) * 1000)\n        )\n        return json.dumps(response), 200\n\n    image_sample = bytes_batch[0]\n    image_size = ImageUtils.size_of_image(image_sample)\n    size_string = ""{}x{}"".format(image_size[0], image_size[1])\n\n    if \'model_name\' in request.json:\n        interface = interface_manager.get_by_name(request.json[\'model_name\'])\n    else:\n        interface = interface_manager.get_by_size(size_string)\n\n    split_char = request.json[\'output_split\'] if \'output_split\' in request.json else interface.model_conf.output_split\n\n    if \'need_color\' in request.json and request.json[\'need_color\']:\n        bytes_batch = [color_extract.separate_color(_, color_map[request.json[\'need_color\']]) for _ in bytes_batch]\n\n    image_batch, response = ImageUtils.get_image_batch(interface.model_conf, bytes_batch)\n\n    if not image_batch:\n        logger.error(\'[{}] - Size[{}] - Name[{}] - Response[{}] - {} ms\'.format(\n            interface.name, size_string, request.json.get(\'model_name\'), response,\n            (time.time() - start_time) * 1000)\n        )\n        return json.dumps(response), 200\n\n    result = interface.predict_batch(image_batch, split_char)\n    logger.info(\'[{}] - Size[{}] - Name[{}] - Predict Result[{}] - {} ms\'.format(\n        interface.name,\n        size_string,\n        request.json.get(\'model_name\'),\n        result,\n        (time.time() - start_time) * 1000\n    ))\n    response[\'message\'] = result\n    return json.dumps(response), 200\n\n\ndef event_loop():\n    event = threading.Event()\n    observer = Observer()\n    event_handler = FileEventHandler(system_config, model_path, interface_manager)\n    observer.schedule(event_handler, event_handler.model_conf_path, True)\n    observer.start()\n    try:\n        while True:\n            event.wait(1)\n    except KeyboardInterrupt:\n        observer.stop()\n    observer.join()\n\n\nthreading.Thread(target=event_loop, daemon=True).start()\n\nif __name__ == ""__main__"":\n\n    parser = optparse.OptionParser()\n    parser.add_option(\'-p\', \'--port\', type=""int"", default=19951, dest=""port"")\n\n    opt, args = parser.parse_args()\n    server_port = opt.port\n\n    server_host = ""0.0.0.0""\n\n    logger.info(\'Running on http://{}:{}/ <Press CTRL + C to quit>\'.format(server_host, server_port))\n    server = WSGIServer((server_host, server_port), app, handler_class=WebSocketHandler)\n    try:\n        server.serve_forever()\n    except KeyboardInterrupt:\n        server.stop()\n'"
graph_session.py,9,"b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>\nimport os\nimport tensorflow as tf\nfrom tensorflow.python.framework.errors_impl import NotFoundError\nfrom config import ModelConfig\n\nos.environ[\'TF_XLA_FLAGS\'] = \'--tf_xla_cpu_global_jit\'\nos.environ[\'CUDA_VISIBLE_DEVICES\'] = \'1\'\n\n\nclass GraphSession(object):\n    def __init__(self, model_conf: ModelConfig):\n        self.model_conf = model_conf\n        self.logger = self.model_conf.logger\n        self.size_str = self.model_conf.size_string\n        self.model_name = self.model_conf.model_name\n        self.graph_name = self.model_conf.model_name\n        self.version = self.model_conf.model_version\n        self.graph = tf.Graph()\n        self.sess = tf.Session(\n            graph=self.graph,\n            config=tf.ConfigProto(\n\n                # allow_soft_placement=True,\n                # log_device_placement=True,\n                gpu_options=tf.GPUOptions(\n                    # allocator_type=\'BFC\',\n                    allow_growth=True,  # it will cause fragmentation.\n                    # per_process_gpu_memory_fraction=self.model_conf.device_usage\n                    per_process_gpu_memory_fraction=0.1\n                )\n            )\n        )\n        self.graph_def = self.graph.as_graph_def()\n        self.loaded = self.load_model()\n\n    def load_model(self):\n        # Here is for debugging, positioning error source use.\n        # with self.graph.as_default():\n        #     saver = tf.train.import_meta_graph(\'graph/***.meta\')\n        #     saver.restore(self.sess, tf.train.latest_checkpoint(\'graph\'))\n        if not self.model_conf.model_exists:\n            self.destroy()\n            return False\n        try:\n            with tf.io.gfile.GFile(self.model_conf.compile_model_path, ""rb"") as f:\n                graph_def_file = f.read()\n            self.graph_def.ParseFromString(graph_def_file)\n            with self.graph.as_default():\n                self.sess.run(tf.global_variables_initializer())\n                _ = tf.import_graph_def(self.graph_def, name="""")\n\n            self.logger.info(\'TensorFlow Session {} Loaded.\'.format(self.model_conf.model_name))\n            return True\n        except NotFoundError:\n            self.logger.error(\'The system cannot find the model specified.\')\n            self.destroy()\n            return False\n\n    @property\n    def session(self):\n        return self.sess\n\n    def destroy(self):\n        self.sess.close()\n        del self.sess\n'"
grpc_pb2.py,0,"b'# Generated by the protocol buffer compiler.  DO NOT EDIT!\n# source: grpc.proto\n\nimport sys\n_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode(\'latin1\'))\nfrom google.protobuf import descriptor as _descriptor\nfrom google.protobuf import message as _message\nfrom google.protobuf import reflection as _reflection\nfrom google.protobuf import symbol_database as _symbol_database\n# @@protoc_insertion_point(imports)\n\n_sym_db = _symbol_database.Default()\n\n\n\n\nDESCRIPTOR = _descriptor.FileDescriptor(\n  name=\'grpc.proto\',\n  package=\'\',\n  syntax=\'proto3\',\n  serialized_options=None,\n  serialized_pb=_b(\'\\n\\ngrpc.proto\\""\\x83\\x01\\n\\x0ePredictRequest\\x12\\r\\n\\x05image\\x18\\x01 \\x01(\\t\\x12\\x12\\n\\nsplit_char\\x18\\x02 \\x01(\\t\\x12\\x12\\n\\nmodel_name\\x18\\x03 \\x01(\\t\\x12\\x12\\n\\nmodel_type\\x18\\x04 \\x01(\\t\\x12\\x12\\n\\nmodel_site\\x18\\x05 \\x01(\\t\\x12\\x12\\n\\nneed_color\\x18\\x06 \\x01(\\t\\"">\\n\\rPredictResult\\x12\\x0e\\n\\x06result\\x18\\x01 \\x01(\\t\\x12\\x0c\\n\\x04\\x63ode\\x18\\x02 \\x01(\\x05\\x12\\x0f\\n\\x07success\\x18\\x03 \\x01(\\x08\\x32\\x37\\n\\x07Predict\\x12,\\n\\x07predict\\x12\\x0f.PredictRequest\\x1a\\x0e.PredictResult\\""\\x00\\x62\\x06proto3\')\n)\n\n\n\n\n_PREDICTREQUEST = _descriptor.Descriptor(\n  name=\'PredictRequest\',\n  full_name=\'PredictRequest\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'image\', full_name=\'PredictRequest.image\', index=0,\n      number=1, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n    _descriptor.FieldDescriptor(\n      name=\'split_char\', full_name=\'PredictRequest.split_char\', index=1,\n      number=2, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n    _descriptor.FieldDescriptor(\n      name=\'model_name\', full_name=\'PredictRequest.model_name\', index=2,\n      number=3, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n    _descriptor.FieldDescriptor(\n      name=\'model_type\', full_name=\'PredictRequest.model_type\', index=3,\n      number=4, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n    _descriptor.FieldDescriptor(\n      name=\'model_site\', full_name=\'PredictRequest.model_site\', index=4,\n      number=5, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n    _descriptor.FieldDescriptor(\n      name=\'need_color\', full_name=\'PredictRequest.need_color\', index=5,\n      number=6, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  serialized_options=None,\n  is_extendable=False,\n  syntax=\'proto3\',\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=15,\n  serialized_end=146,\n)\n\n\n_PREDICTRESULT = _descriptor.Descriptor(\n  name=\'PredictResult\',\n  full_name=\'PredictResult\',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name=\'result\', full_name=\'PredictResult.result\', index=0,\n      number=1, type=9, cpp_type=9, label=1,\n      has_default_value=False, default_value=_b("""").decode(\'utf-8\'),\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n    _descriptor.FieldDescriptor(\n      name=\'code\', full_name=\'PredictResult.code\', index=1,\n      number=2, type=5, cpp_type=1, label=1,\n      has_default_value=False, default_value=0,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n    _descriptor.FieldDescriptor(\n      name=\'success\', full_name=\'PredictResult.success\', index=2,\n      number=3, type=8, cpp_type=7, label=1,\n      has_default_value=False, default_value=False,\n      message_type=None, enum_type=None, containing_type=None,\n      is_extension=False, extension_scope=None,\n      serialized_options=None, file=DESCRIPTOR),\n  ],\n  extensions=[\n  ],\n  nested_types=[],\n  enum_types=[\n  ],\n  serialized_options=None,\n  is_extendable=False,\n  syntax=\'proto3\',\n  extension_ranges=[],\n  oneofs=[\n  ],\n  serialized_start=148,\n  serialized_end=210,\n)\n\nDESCRIPTOR.message_types_by_name[\'PredictRequest\'] = _PREDICTREQUEST\nDESCRIPTOR.message_types_by_name[\'PredictResult\'] = _PREDICTRESULT\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\n\nPredictRequest = _reflection.GeneratedProtocolMessageType(\'PredictRequest\', (_message.Message,), dict(\n  DESCRIPTOR = _PREDICTREQUEST,\n  __module__ = \'grpc_pb2\'\n  # @@protoc_insertion_point(class_scope:PredictRequest)\n  ))\n_sym_db.RegisterMessage(PredictRequest)\n\nPredictResult = _reflection.GeneratedProtocolMessageType(\'PredictResult\', (_message.Message,), dict(\n  DESCRIPTOR = _PREDICTRESULT,\n  __module__ = \'grpc_pb2\'\n  # @@protoc_insertion_point(class_scope:PredictResult)\n  ))\n_sym_db.RegisterMessage(PredictResult)\n\n\n\n_PREDICT = _descriptor.ServiceDescriptor(\n  name=\'Predict\',\n  full_name=\'Predict\',\n  file=DESCRIPTOR,\n  index=0,\n  serialized_options=None,\n  serialized_start=212,\n  serialized_end=267,\n  methods=[\n  _descriptor.MethodDescriptor(\n    name=\'predict\',\n    full_name=\'Predict.predict\',\n    index=0,\n    containing_service=None,\n    input_type=_PREDICTREQUEST,\n    output_type=_PREDICTRESULT,\n    serialized_options=None,\n  ),\n])\n_sym_db.RegisterServiceDescriptor(_PREDICT)\n\nDESCRIPTOR.services_by_name[\'Predict\'] = _PREDICT\n\n# @@protoc_insertion_point(module_scope)\n'"
grpc_pb2_grpc.py,0,"b'# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!\nimport grpc\n\nimport grpc_pb2 as grpc__pb2\n\n\nclass PredictStub(object):\n  # missing associated documentation comment in .proto file\n  pass\n\n  def __init__(self, channel):\n    """"""Constructor.\n\n    Args:\n      channel: A grpc.Channel.\n    """"""\n    self.predict = channel.unary_unary(\n        \'/Predict/predict\',\n        request_serializer=grpc__pb2.PredictRequest.SerializeToString,\n        response_deserializer=grpc__pb2.PredictResult.FromString,\n        )\n\n\nclass PredictServicer(object):\n  # missing associated documentation comment in .proto file\n  pass\n\n  def predict(self, request, context):\n    # missing associated documentation comment in .proto file\n    pass\n    context.set_code(grpc.StatusCode.UNIMPLEMENTED)\n    context.set_details(\'Method not implemented!\')\n    raise NotImplementedError(\'Method not implemented!\')\n\n\ndef add_PredictServicer_to_server(servicer, server):\n  rpc_method_handlers = {\n      \'predict\': grpc.unary_unary_rpc_method_handler(\n          servicer.predict,\n          request_deserializer=grpc__pb2.PredictRequest.FromString,\n          response_serializer=grpc__pb2.PredictResult.SerializeToString,\n      ),\n  }\n  generic_handler = grpc.method_handlers_generic_handler(\n      \'Predict\', rpc_method_handlers)\n  server.add_generic_rpc_handlers((generic_handler,))\n'"
grpc_server.py,0,"b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>\n\nimport time\nimport threading\nfrom concurrent import futures\n\nimport grpc\nimport grpc_pb2\nimport grpc_pb2_grpc\nimport optparse\nfrom utils import ImageUtils\nfrom interface import InterfaceManager\nfrom config import Config\nfrom event_handler import FileEventHandler\nfrom watchdog.observers import Observer\nfrom middleware import *\nfrom event_loop import event_loop\n\n_ONE_DAY_IN_SECONDS = 60 * 60 * 24\n\n\nclass Predict(grpc_pb2_grpc.PredictServicer):\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.image_utils = ImageUtils(system_config)\n\n    def predict(self, request, context):\n        start_time = time.time()\n        bytes_batch, status = self.image_utils.get_bytes_batch(request.image)\n\n        if interface_manager.total == 0:\n            logger.info(\'There is currently no model deployment and services are not available.\')\n            return {""result"": """", ""success"": False, ""code"": -999}\n\n        if not bytes_batch:\n            return grpc_pb2.PredictResult(result="""", success=status[\'success\'], code=status[\'code\'])\n\n        image_sample = bytes_batch[0]\n        image_size = ImageUtils.size_of_image(image_sample)\n        size_string = ""{}x{}"".format(image_size[0], image_size[1])\n        if request.model_name:\n            interface = interface_manager.get_by_name(request.model_name)\n        else:\n            interface = interface_manager.get_by_size(size_string)\n        if not interface:\n            logger.info(\'Service is not ready!\')\n            return {""result"": """", ""success"": False, ""code"": 999}\n\n        if request.need_color:\n            bytes_batch = [color_extract.separate_color(_, color_map[request.need_color]) for _ in bytes_batch]\n\n        image_batch, status = ImageUtils.get_image_batch(interface.model_conf, bytes_batch)\n\n        if not image_batch:\n            return grpc_pb2.PredictResult(result="""", success=status[\'success\'], code=status[\'code\'])\n\n        result = interface.predict_batch(image_batch, request.split_char)\n        logger.info(\'[{}] - Size[{}] - Type[{}] - Site[{}] - Predict Result[{}] - {} ms\'.format(\n            interface.name,\n            size_string,\n            request.model_type,\n            request.model_site,\n            result,\n            (time.time() - start_time) * 1000\n        ))\n        return grpc_pb2.PredictResult(result=result, success=status[\'success\'], code=status[\'code\'])\n\n\ndef serve():\n    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n    grpc_pb2_grpc.add_PredictServicer_to_server(Predict(), server)\n    server.add_insecure_port(\'[::]:50054\')\n    server.start()\n    try:\n        while True:\n            time.sleep(_ONE_DAY_IN_SECONDS)\n    except KeyboardInterrupt:\n        server.stop(0)\n\n\nif __name__ == \'__main__\':\n    parser = optparse.OptionParser()\n    parser.add_option(\'-p\', \'--port\', type=""int"", default=50054, dest=""port"")\n    parser.add_option(\'-c\', \'--config\', type=""str"", default=\'./config.yaml\', dest=""config"")\n    parser.add_option(\'-m\', \'--model_path\', type=""str"", default=\'model\', dest=""model_path"")\n    parser.add_option(\'-g\', \'--graph_path\', type=""str"", default=\'graph\', dest=""graph_path"")\n    opt, args = parser.parse_args()\n    server_port = opt.port\n    conf_path = opt.config\n    model_path = opt.model_path\n    graph_path = opt.graph_path\n    system_config = Config(conf_path=conf_path, model_path=model_path, graph_path=graph_path)\n    interface_manager = InterfaceManager()\n    threading.Thread(target=lambda: event_loop(system_config, model_path, interface_manager)).start()\n\n    logger = system_config.logger\n    server_host = ""0.0.0.0""\n\n    logger.info(\'Running on http://{}:{}/ <Press CTRL + C to quit>\'.format(server_host, server_port))\n    serve()\n'"
interface.py,0,"b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>\nimport os\nimport time\nfrom graph_session import GraphSession\nfrom predict import predict_func\n\nos.environ[""CUDA_VISIBLE_DEVICES""] = ""0""\n\n\nclass Interface(object):\n\n    def __init__(self, graph_session: GraphSession):\n        self.graph_sess = graph_session\n        self.model_conf = graph_session.model_conf\n        self.size_str = self.model_conf.size_string\n        self.graph_name = self.graph_sess.graph_name\n        self.version = self.graph_sess.version\n        self.model_category = self.model_conf.category_param\n        if self.graph_sess.loaded:\n            self.sess = self.graph_sess.session\n            self.dense_decoded = self.sess.graph.get_tensor_by_name(""dense_decoded:0"")\n            self.x = self.sess.graph.get_tensor_by_name(\'input:0\')\n            self.sess.graph.finalize()\n\n    @property\n    def name(self):\n        return self.graph_name\n\n    @property\n    def size(self):\n        return self.size_str\n\n    def destroy(self):\n        self.graph_sess.destroy()\n\n    def predict_batch(self, image_batch, output_split=None):\n        predict_text = predict_func(\n            image_batch,\n            self.sess,\n            self.dense_decoded,\n            self.x,\n            self.model_conf,\n            output_split\n        )\n        return predict_text\n\n\nclass InterfaceManager(object):\n\n    def __init__(self, interface: Interface = None):\n        self.group = []\n        self.invalid_group = {}\n        self.set_default(interface)\n\n    def add(self, interface: Interface):\n        if interface in self.group:\n            return\n        self.group.append(interface)\n\n    def remove(self, interface: Interface):\n        if interface in self.group:\n            interface.destroy()\n            self.group.remove(interface)\n\n    def report(self, model):\n        self.invalid_group[model] = {""create_time"": time.asctime(time.localtime(time.time()))}\n\n    def remove_by_name(self, graph_name):\n        interface = self.get_by_name(graph_name, False)\n        self.remove(interface)\n\n    def get_by_size(self, size: str, return_default=True):\n\n        match_ids = [i for i in range(len(self.group)) if self.group[i].size_str == size]\n        if not match_ids:\n            return self.default if return_default else None\n        else:\n            ver = [self.group[i].version for i in match_ids]\n            return self.group[match_ids[ver.index(max(ver))]]\n\n    def get_by_name(self, key: str, return_default=True):\n        for interface in self.group:\n            if interface.name == key:\n\n                return interface\n        return self.default if return_default else None\n\n    @property\n    def default(self):\n        return self.group[0] if len(self.group) > 0 else None\n\n    @property\n    def default_name(self):\n        _default = self.default\n        if not _default:\n            return\n        return _default.graph_name\n\n    @property\n    def total(self):\n        return len(self.group)\n\n    @property\n    def online_names(self):\n        return [i.name for i in self.group]\n\n    def set_default(self, interface: Interface):\n        if not interface:\n            return\n        self.group.insert(0, interface)\n'"
package.py,1,"b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>\nimport os\nimport stat\nimport socket\nimport paramiko\nimport platform\nimport distutils\nimport tensorflow as tf\nfrom enum import Enum, unique\nfrom utils import SystemUtils\n\nfrom PyInstaller.__main__ import run, logger\n"""""" Used to package as a single executable """"""\n\nif platform.system() == \'Linux\':\n    if distutils.distutils_path.endswith(\'__init__.py\'):\n        distutils.distutils_path = os.path.dirname(distutils.distutils_path)\n\n\n@unique\nclass Version(Enum):\n    CPU = \'CPU\'\n    GPU = \'GPU\'\n\n\nif __name__ == \'__main__\':\n\n    ver = Version.GPU if tf.test.gpu_device_name() else Version.CPU\n\n    upload = False\n    server_ip = """"\n    username = """"\n    password = """"\n    model_dir = ""model""\n    graph_dir = ""graph""\n\n    if ver == Version.GPU:\n        opts = [\'tornado_server_gpu.spec\', \'--distpath=dist\']\n    else:\n        opts = [\'tornado_server.spec\', \'--distpath=dist\']\n    run(opts)\n\n    if upload:\n        transport = paramiko.Transport(sock=(server_ip, 22))\n        transport.connect(username=username, password=password)\n        sftp = paramiko.SFTPClient.from_transport(transport)\n\n        with open(""dist/start.sh"", ""w"", encoding=""utf8"") as f:\n            f.write(""nohup ./captcha_platform_tornado &"")\n\n        SystemUtils.empty(sftp, \'/home/captcha_platform\')\n        logger.info(\'uploading app...\')\n\n        SystemUtils.empty(sftp, \'/home/captcha_platform/graph\')\n        SystemUtils.empty(sftp, \'/home/captcha_platform/model\')\n\n        for model in os.listdir(model_dir):\n            if os.path.isdir(model):\n                continue\n            sftp.put(os.path.join(model_dir, model), \'/home/captcha_platform/model/{}\'.format(model))\n\n        for graph in os.listdir(graph_dir):\n            sftp.put(os.path.join(graph_dir, graph), \'/home/captcha_platform/graph/{}\'.format(graph))\n\n        sftp.put(""dist/captcha_platform_tornado"", \'/home/captcha_platform/captcha_platform_tornado\')\n        sftp.put(""dist/start.sh"", \'/home/captcha_platform/start.sh\')\n        sftp.put(""config.yaml"", \'/home/captcha_platform/config.yaml\')\n\n        sftp.chmod(\'/home/captcha_platform/captcha_platform_tornado\', stat.S_IRWXU)\n        sftp.chmod(\'/home/captcha_platform/start.sh\', stat.S_IRWXU)\n\n        logger.info(\'uploaded.\')\n        logger.info(\'update completed!\')\n        transport.close()'"
predict.py,0,"b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>\nfrom config import ModelConfig\n\n\ndef decode_maps(categories):\n    return {index: category for index, category in enumerate(categories, 0)}\n\n\ndef predict_func(image_batch, _sess, dense_decoded, op_input, model: ModelConfig, output_split=None):\n\n    output_split = model.output_split if output_split is None else output_split\n\n    category_split = model.category_split if model.category_split else """"\n\n    dense_decoded_code = _sess.run(dense_decoded, feed_dict={\n        op_input: image_batch,\n    })\n    decoded_expression = []\n    for item in dense_decoded_code:\n        expression = []\n\n        for i in item:\n            if i == -1 or i == model.category_num:\n                expression.append("""")\n            else:\n                expression.append(decode_maps(model.category)[i])\n        decoded_expression.append(category_split.join(expression))\n    return output_split.join(decoded_expression) if len(decoded_expression) > 1 else decoded_expression[0]\n'"
pretreatment.py,0,"b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>\nimport cv2\n\n\nclass Pretreatment(object):\n\n    def __init__(self, origin):\n        self.origin = origin\n\n    def get(self):\n        return self.origin\n\n    def binarization(self, value, modify=False):\n        ret, _binarization = cv2.threshold(self.origin, value, 255, cv2.THRESH_BINARY)\n        if modify:\n            self.origin = _binarization\n        return _binarization\n\n\ndef preprocessing(image, binaryzation=-1):\n    pretreatment = Pretreatment(image)\n    if binaryzation > 0:\n        pretreatment.binarization(binaryzation, True)\n    return pretreatment.get()\n\n\ndef preprocessing_by_func(exec_map, key, src_arr):\n    if not exec_map:\n        return src_arr\n    target_arr = cv2.cvtColor(src_arr, cv2.COLOR_RGB2BGR)\n    for sentence in exec_map.get(key):\n        if sentence.startswith(""@@""):\n            target_arr = eval(sentence[2:])\n        elif sentence.startswith(""$$""):\n            exec(sentence[2:])\n    return cv2.cvtColor(target_arr, cv2.COLOR_BGR2RGB)\n\n\nif __name__ == \'__main__\':\n    pass\n'"
sanic_server.py,0,"b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>\nimport time\nimport optparse\nimport threading\nfrom config import Config\nfrom utils import ImageUtils\nfrom interface import InterfaceManager\nfrom watchdog.observers import Observer\nfrom event_handler import FileEventHandler\nfrom sanic import Sanic\nfrom sanic.response import json\nfrom signature import Signature, ServerType\nfrom middleware import *\nfrom event_loop import event_loop\n\napp = Sanic()\nsign = Signature(ServerType.SANIC)\nparser = optparse.OptionParser()\n\nconf_path = \'config.yaml\'\nmodel_path = \'model\'\ngraph_path = \'graph\'\n\nsystem_config = Config(conf_path=conf_path, model_path=model_path, graph_path=graph_path)\nsign.set_auth([{\'accessKey\': system_config.access_key, \'secretKey\': system_config.secret_key}])\nlogger = system_config.logger\ninterface_manager = InterfaceManager()\nthreading.Thread(target=lambda: event_loop(system_config, model_path, interface_manager)).start()\n\nimage_utils = ImageUtils(system_config)\n\n\n@app.route(\'/captcha/auth/v2\', methods=[\'POST\'])\n@sign.signature_required  # This decorator is required for certification.\ndef auth_request(request):\n    return common_request(request)\n\n\n@app.route(\'/captcha/v1\', methods=[\'POST\'])\ndef no_auth_request(request):\n    return common_request(request)\n\n\ndef common_request(request):\n    """"""\n    This api is used for captcha prediction without authentication\n    :return:\n    """"""\n    start_time = time.time()\n    if not request.json or \'image\' not in request.json:\n        print(request.json)\n        return\n\n    if interface_manager.total == 0:\n        logger.info(\'There is currently no model deployment and services are not available.\')\n        return json({""message"": """", ""success"": False, ""code"": -999})\n\n    bytes_batch, response = image_utils.get_bytes_batch(request.json[\'image\'])\n\n    if not bytes_batch:\n        logger.error(\'Type[{}] - Site[{}] - Response[{}] - {} ms\'.format(\n            request.json[\'model_type\'], request.json[\'model_site\'], response,\n            (time.time() - start_time) * 1000)\n        )\n        return json(response)\n\n    image_sample = bytes_batch[0]\n    image_size = ImageUtils.size_of_image(image_sample)\n    size_string = ""{}x{}"".format(image_size[0], image_size[1])\n\n    if \'model_name\' in request.json:\n        interface = interface_manager.get_by_name(request.json[\'model_name\'])\n    else:\n        interface = interface_manager.get_by_size(size_string)\n\n    split_char = request.json[\'split_char\'] if \'split_char\' in request.json else interface.model_conf.split_char\n\n    if \'need_color\' in request.json and request.json[\'need_color\']:\n        bytes_batch = [color_extract.separate_color(_, color_map[request.json[\'need_color\']]) for _ in bytes_batch]\n\n    image_batch, response = ImageUtils.get_image_batch(interface.model_conf, bytes_batch)\n\n    if not image_batch:\n        logger.error(\'[{}] - Size[{}] - Name[{}] - Response[{}] - {} ms\'.format(\n            interface.name, size_string, request.json.get(\'model_name\'), response,\n            (time.time() - start_time) * 1000)\n        )\n        return json(response)\n\n    result = interface.predict_batch(image_batch, split_char)\n    logger.info(\'[{}] - Size[{}] - Predict Result[{}] - {} ms\'.format(\n        interface.name,\n        size_string,\n        result,\n        (time.time() - start_time) * 1000\n    ))\n    response[\'message\'] = result\n    return json(response)\n\n\nif __name__ == ""__main__"":\n\n    parser.add_option(\'-p\', \'--port\', type=""int"", default=19953, dest=""port"")\n\n    opt, args = parser.parse_args()\n    server_port = opt.port\n\n\n\n    server_host = ""0.0.0.0""\n\n    logger.info(\'Running on http://{}:{}/ <Press CTRL + C to quit>\'.format(server_host, server_port))\n    app.run(host=server_host, port=server_port)\n'"
signature.py,0,"b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>\nfrom functools import wraps\nfrom constants import ServerType\nfrom utils import *\n\n\nclass InvalidUsage(Exception):\n\n    def __init__(self, message, code=None):\n        Exception.__init__(self)\n        self.message = message\n        self.success = False\n        self.code = code\n\n    def to_dict(self):\n        rv = {\'code\': self.code, \'message\': self.message, \'success\': self.success}\n        return rv\n\n\nclass Signature(object):\n    """""" api signature authentication """"""\n\n    def __init__(self, server_type: ServerType, conf: Config):\n        self.conf = conf\n        self._except = Response(self.conf.response_def_map)\n        self._auth = []\n        self._timestamp_expiration = 120\n        self.request = None\n        self.type = server_type\n\n    def set_auth(self, auth):\n        self._auth = auth\n\n    def _check_req_timestamp(self, req_timestamp):\n        """""" Check the timestamp\n        @pram req_timestamp str,int: Timestamp in the request parameter (10 digits)\n        """"""\n        if len(str(req_timestamp)) == 10:\n            req_timestamp = int(req_timestamp)\n            now_timestamp = SignUtils.timestamp()\n            if now_timestamp - self._timestamp_expiration <= req_timestamp <= now_timestamp + self._timestamp_expiration:\n                return True\n        return False\n\n    def _check_req_access_key(self, req_access_key):\n        """""" Check the access_key in the request parameter\n        @pram req_access_key str: access key in the request parameter\n        """"""\n        if req_access_key in [i[\'accessKey\'] for i in self._auth if ""accessKey"" in i]:\n            return True\n        return False\n\n    def _get_secret_key(self, access_key):\n        """""" Obtain the corresponding secret_key according to access_key\n        @pram access_key str: access key in the request parameter\n        """"""\n        secret_keys = [i[\'secretKey\'] for i in self._auth if i.get(\'accessKey\') == access_key]\n        return """" if not secret_keys else secret_keys[0]\n\n    def _sign(self, args):\n        """""" MD5 signature\n        @param args: All query parameters (public and private) requested in addition to signature\n        """"""\n        if ""sign"" in args:\n            args.pop(""sign"")\n        access_key = args[""accessKey""]\n        query_string = \'&\'.join([\'{}={}\'.format(k, v) for (k, v) in sorted(args.items())])\n        query_string = \'&\'.join([query_string, self._get_secret_key(access_key)])\n        return SignUtils.md5(query_string).upper()\n\n    def _verification(self, req_params, tornado_handler=None):\n        """""" Verify that the request is valid\n        @param req_params: All query parameters requested (public and private)\n        """"""\n        try:\n            req_signature = req_params[""sign""]\n            req_timestamp = req_params[""timestamp""]\n            req_access_key = req_params[""accessKey""]\n        except KeyError:\n            raise InvalidUsage(**self._except.INVALID_PUBLIC_PARAMS)\n        except Exception:\n            raise InvalidUsage(**self._except.UNKNOWN_SERVER_ERROR)\n        else:\n            if self.type == ServerType.FLASK or self.type == ServerType.SANIC:\n                from flask.app import HTTPException, json\n                # NO.1 Check the timestamp\n                if not self._check_req_timestamp(req_timestamp):\n                    raise HTTPException(response=json.jsonify(self._except.INVALID_TIMESTAMP))\n                # NO.2 Check the access_id\n                if not self._check_req_access_key(req_access_key):\n                    raise HTTPException(response=json.jsonify(self._except.INVALID_ACCESS_KEY))\n                # NO.3 Check the sign\n                if req_signature == self._sign(req_params):\n                    return True\n                else:\n                    raise HTTPException(response=json.jsonify(self._except.INVALID_QUERY_STRING))\n            elif self.type == ServerType.TORNADO:\n                from tornado.web import HTTPError\n                # NO.1 Check the timestamp\n                if not self._check_req_timestamp(req_timestamp):\n                    return tornado_handler.write_error(self._except.INVALID_TIMESTAMP[\'code\'])\n                # NO.2 Check the access_id\n                if not self._check_req_access_key(req_access_key):\n                    return tornado_handler.write_error(self._except.INVALID_ACCESS_KEY[\'code\'])\n                # NO.3 Check the sign\n                if req_signature == self._sign(req_params):\n                    return True\n                else:\n                    return tornado_handler.write_error(self._except.INVALID_QUERY_STRING[\'code\'])\n            raise Exception(\'Unknown Server Type\')\n\n    def signature_required(self, f):\n        @wraps(f)\n        def decorated_function(*args, **kwargs):\n            if self.type == ServerType.FLASK:\n                from flask import request\n                params = request.json\n            elif self.type == ServerType.TORNADO:\n                from tornado.escape import json_decode\n                params = json_decode(args[0].request.body)\n            elif self.type == ServerType.SANIC:\n                params = args[0].json\n            else:\n                raise UserWarning(\'Illegal type, the current version is not supported at this time.\')\n            result = self._verification(params, args[0] if self.type == ServerType.TORNADO else None)\n            if result is True:\n                return f(*args, **kwargs)\n        return decorated_function\n'"
test.py,3,"b""import tensorflow as tf\n\n\nclass SquareTest(tf.test.TestCase):\n\n    def testSquare(self):\n        with self.test_session():\n            x = tf.square([2, 3])\n            self.assertAllEqual(x.eval(), [4, 9])\n\n\nif __name__ == '__main__':\n    tf.test.main()\n"""
tornado_server.py,0,"b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>\nimport os\nimport uuid\nimport time\nimport json\nimport platform\nimport numpy as np\nimport asyncio\nimport hashlib\nimport optparse\nimport threading\nimport tornado.ioloop\nimport tornado.log\nimport tornado.gen\nimport tornado.httpserver\nimport tornado.options\nfrom pytz import utc\nfrom apscheduler.triggers.interval import IntervalTrigger\nfrom apscheduler.schedulers.background import BackgroundScheduler\nfrom tornado.web import RequestHandler\nfrom constants import Response\nfrom json.decoder import JSONDecodeError\nfrom tornado.escape import json_decode, json_encode\nfrom interface import InterfaceManager, Interface\nfrom config import Config\nfrom utils import ImageUtils, ParamUtils, Arithmetic\nfrom signature import Signature, ServerType\nfrom tornado.concurrent import run_on_executor\nfrom concurrent.futures import ThreadPoolExecutor\nfrom middleware import *\nfrom event_loop import event_loop\n\ntornado.options.define(\'request_count\', default=dict(), type=dict)\ntornado.options.define(\'global_request_count\', default=0, type=int)\nmodel_path = ""model""\nsystem_config = Config(conf_path=""config.yaml"", model_path=model_path, graph_path=""graph"")\nsign = Signature(ServerType.TORNADO, system_config)\narithmetic = Arithmetic()\nsemaphore = asyncio.Semaphore(500)\n\nscheduler = BackgroundScheduler(timezone=utc)\n\n\nclass BaseHandler(RequestHandler):\n\n    def __init__(self, application, request, **kwargs):\n        super().__init__(application, request, **kwargs)\n        self.exception = Response(system_config.response_def_map)\n        self.executor = ThreadPoolExecutor(workers)\n        self.image_utils = ImageUtils(system_config)\n\n    def data_received(self, chunk):\n        pass\n\n    def parse_param(self):\n        try:\n            data = json_decode(self.request.body)\n        except JSONDecodeError:\n            data = self.request.body_arguments\n        except UnicodeDecodeError:\n            raise tornado.web.HTTPError(401)\n        if not data:\n            raise tornado.web.HTTPError(400)\n        return data\n\n    def write_error(self, code, **kw):\n        system = {\n            500: dict(StatusCode=code, Message=""Internal Server Error"", StatusBool=False),\n            400: dict(StatusCode=code, Message=""Bad Request"", StatusBool=False),\n            404: dict(StatusCode=code, Message=""404 Not Found"", StatusBool=False),\n            403: dict(StatusCode=code, Message=""Forbidden"", StatusBool=False),\n            405: dict(StatusCode=code, Message=""Method Not Allowed"", StatusBool=False),\n        }\n        if code in system.keys():\n            code_dict = Response.parse(system.get(code), system_config.response_def_map)\n        else:\n            code_dict = self.exception.find(code)\n        return self.finish(json_encode(code_dict))\n\n\nclass NoAuthHandler(BaseHandler):\n\n    uid_key: str = system_config.response_def_map[\'Uid\']\n    message_key: str = system_config.response_def_map[\'Message\']\n    status_bool_key = system_config.response_def_map[\'StatusBool\']\n    status_code_key = system_config.response_def_map[\'StatusCode\']\n\n    @staticmethod\n    def save_image(uid, label, image_bytes):\n        if system_config.save_path:\n            if not os.path.exists(system_config.save_path):\n                os.makedirs(system_config.save_path)\n            save_name = ""{}_{}.png"".format(label, uid)\n            with open(os.path.join(system_config.save_path, save_name), ""wb"") as f:\n                f.write(image_bytes)\n\n    @run_on_executor\n    def predict(self, interface: Interface, image_batch, split_char, size_string, start_time, log_params, request_count, uid=""""):\n        result = interface.predict_batch(image_batch, split_char)\n        if interface.model_category == \'ARITHMETIC\':\n            if \'=\' in result or \'+\' in result or \'-\' in result or \'\xc3\x97\' in result or \'\xc3\xb7\' in result:\n                result = result.replace(""\xc3\x97"", ""*"").replace(""\xc3\xb7"", ""/"")\n                result = str(int(arithmetic.calc(result)))\n        uid_str = ""[{}] - "".format(uid)\n        logger.info(\'{}[{} {}] | [{}] - Size[{}]{}{} - Predict[{}] - {} ms\'.format(\n            uid_str, self.request.remote_ip, self.request.uri, interface.name, size_string, request_count, log_params, result,\n            round((time.time() - start_time) * 1000))\n        )\n\n        return result\n\n    @property\n    def request_incr(self):\n        if self.request.remote_ip not in tornado.options.options.request_count:\n            tornado.options.options.request_count[self.request.remote_ip] = 1\n        else:\n            tornado.options.options.request_count[self.request.remote_ip] += 1\n        return tornado.options.options.request_count[self.request.remote_ip]\n\n    @property\n    def global_request_incr(self):\n        tornado.options.options.global_request_count += 1\n        return tornado.options.options.global_request_count\n\n    @tornado.gen.coroutine\n    def post(self):\n        uid = str(uuid.uuid1())\n        start_time = time.time()\n        data = self.parse_param()\n        request_def_map = system_config.request_def_map\n        input_data_key = request_def_map[\'InputData\']\n        model_name_key = request_def_map[\'ModelName\']\n        if input_data_key not in data.keys():\n            raise tornado.web.HTTPError(400)\n\n        model_name = ParamUtils.filter(data.get(model_name_key))\n        output_split = ParamUtils.filter(data.get(\'output_split\'))\n        need_color = ParamUtils.filter(data.get(\'need_color\'))\n        param_key = ParamUtils.filter(data.get(\'param_key\'))\n\n        request_incr = self.request_incr\n        global_count = self.global_request_incr\n        request_count = "" - Count[{}]"".format(request_incr)\n        log_params = "" - ParamKey[{}]"".format(param_key) if param_key else """"\n        log_params += "" - NeedColor[{}]"".format(need_color) if need_color else """"\n\n        if interface_manager.total == 0:\n            logger.info(\'There is currently no model deployment and services are not available.\')\n            return self.finish(json_encode(\n                {self.uid_key: uid, self.message_key: """", self.status_bool_key: False, self.status_code_key: -999}\n            ))\n        bytes_batch, response = self.image_utils.get_bytes_batch(data[input_data_key])\n\n        if not bytes_batch:\n            logger.error(\'[{}] - [{} {}] | - Response[{}] - {} ms\'.format(\n                uid, self.request.remote_ip, self.request.uri, response,\n                (time.time() - start_time) * 1000)\n            )\n            return self.finish(json_encode(response))\n\n        # auxiliary_result = None\n\n        image_sample = bytes_batch[0]\n        image_size = ImageUtils.size_of_image(image_sample)\n        size_string = ""{}x{}"".format(image_size[0], image_size[1])\n        if global_request_limit != -1 and global_count > global_request_limit:\n            logger.info(\'[{}] - [{} {}] | Size[{}]{}{} - Error[{}] - {} ms\'.format(\n                uid, self.request.remote_ip, self.request.uri, size_string, global_count, log_params,\n                ""Maximum number of requests exceeded (G)"",\n                round((time.time() - start_time) * 1000))\n            )\n            return self.finish(json.dumps({\n                self.uid_key: uid,\n                self.message_key: system_config.exceeded_msg,\n                self.status_bool_key: False,\n                self.status_code_key: -555\n            }, ensure_ascii=False))\n\n        if request_limit != -1 and request_incr > request_limit:\n            logger.info(\'[{}] - [{} {}] | Size[{}]{}{} - Error[{}] - {} ms\'.format(\n                uid, self.request.remote_ip, self.request.uri, size_string, request_count, log_params,\n                ""Maximum number of requests exceeded (IP)"",\n                round((time.time() - start_time) * 1000))\n            )\n            return self.finish(json.dumps({\n                self.uid_key: uid,\n                self.message_key: system_config.exceeded_msg,\n                self.status_bool_key: False,\n                self.status_code_key: -444\n            }, ensure_ascii=False))\n        if model_name_key in data and data[model_name_key]:\n            interface = interface_manager.get_by_name(model_name)\n        else:\n            interface = interface_manager.get_by_size(size_string)\n        if not interface:\n            logger.info(\'Service is not ready!\')\n            return self.finish(json_encode(\n                {self.uid_key: uid, self.message_key: """", self.status_bool_key: False, self.status_code_key: 999}\n            ))\n\n        output_split = output_split if \'output_split\' in data else interface.model_conf.output_split\n\n        if need_color:\n            bytes_batch = [color_extract.separate_color(_, color_map[need_color]) for _ in bytes_batch]\n\n        if interface.model_conf.corp_params:\n            bytes_batch = corp_to_multi.parse_multi_img(bytes_batch, interface.model_conf.corp_params)\n\n        if interface.model_conf.exec_map and not param_key:\n            logger.info(\'[{}] - [{} {}] | [{}] - Size[{}]{}{} - Error[{}] - {} ms\'.format(\n                uid, self.request.remote_ip, self.request.uri, interface.name, size_string, request_count, log_params,\n                ""The model is missing the param_key parameter because the model is configured with ExecuteMap."",\n                round((time.time() - start_time) * 1000))\n            )\n            return self.finish(json_encode(\n                {\n                    self.uid_key: uid,\n                    self.message_key: ""Missing the parameter [param_key]."",\n                    self.status_bool_key: False,\n                    self.status_code_key: 474\n                }\n            ))\n\n        if interface.model_conf.external_model and interface.model_conf.corp_params:\n            result = []\n            len_of_result = []\n            pre_corp_num = 0\n            for corp_param in interface.model_conf.corp_params:\n                corp_size = corp_param[\'corp_size\']\n                corp_num_list = corp_param[\'corp_num\']\n                corp_num = corp_num_list[0] * corp_num_list[1]\n                sub_bytes_batch = bytes_batch[pre_corp_num: pre_corp_num + corp_num]\n                pre_corp_num = corp_num\n                size_string = ""{}x{}"".format(corp_size[0], corp_size[1])\n\n                sub_interface = interface_manager.get_by_size(size_string)\n\n                image_batch, response = ImageUtils.get_image_batch(\n                    sub_interface.model_conf, sub_bytes_batch, param_key=param_key\n                )\n\n                text = yield self.predict(\n                    sub_interface, image_batch, output_split, size_string, start_time, log_params, request_count, uid=uid\n                )\n                result.append(text)\n                len_of_result.append(len(result[0].split(sub_interface.model_conf.category_split)))\n\n            response[self.message_key] = interface.model_conf.output_split.join(result)\n            if interface.model_conf.corp_params and interface.model_conf.output_coord:\n                # final_result = auxiliary_result + "","" + response[self.message_key]\n                # if auxiliary_result else response[self.message_key]\n                final_result = response[self.message_key]\n                response[self.message_key] = corp_to_multi.get_coordinate(\n                    label=final_result,\n                    param_group=interface.model_conf.corp_params,\n                    title_index=[i for i in range(len_of_result[0])]\n                )\n            return self.finish(json.dumps(response, ensure_ascii=False).replace(""</"", ""<\\\\/""))\n        else:\n            image_batch, response = ImageUtils.get_image_batch(interface.model_conf, bytes_batch, param_key=param_key)\n\n        # if interface.model_conf.batch_model:\n        #     auxiliary_index = list(interface.model_conf.batch_model.keys())[0]\n        #     auxiliary_name = list(interface.model_conf.batch_model.values())[0]\n        #     auxiliary_interface = interface_manager.get_by_name(auxiliary_name)\n        #     auxiliary_image_batch, response = ImageUtils.get_image_batch(\n        #         auxiliary_interface.model_conf,\n        #         bytes_batch,\n        #         param_key=param_key\n        #     )\n        #     auxiliary_result = yield self.predict(\n        #         auxiliary_interface,\n        #         auxiliary_image_batch[auxiliary_index: auxiliary_index+1],\n        #         output_split,\n        #         size_string,\n        #         start_time\n        #     )\n        #     image_batch = np.delete(image_batch, auxiliary_index, axis=0).tolist()\n\n        if not image_batch:\n            logger.error(\'[{}] - [{} {}] | [{}] - Size[{}] - Response[{}] - {} ms\'.format(\n                uid, self.request.remote_ip, self.request.uri, interface.name, size_string, response,\n                round((time.time() - start_time) * 1000))\n            )\n            response[self.uid_key] = uid\n            return self.finish(json_encode(response))\n\n        response[self.message_key] = yield self.predict(\n            interface, image_batch, output_split, size_string, start_time, log_params, request_count, uid=uid\n        )\n        response[self.uid_key] = uid\n        self.executor.submit(self.save_image, uid, response[self.message_key], bytes_batch[0])\n        # if interface.model_conf.corp_params and interface.model_conf.output_coord:\n        #     # final_result = auxiliary_result + "","" + response[self.message_key]\n        #     # if auxiliary_result else response[self.message_key]\n        #     final_result = response[self.message_key]\n        #     response[self.message_key] = corp_to_multi.get_coordinate(\n        #         label=final_result,\n        #         param_group=interface.model_conf.corp_params,\n        #         title_index=[0]\n        #     )\n        return self.finish(json.dumps(response, ensure_ascii=False).replace(""</"", ""<\\\\/""))\n\n\nclass AuthHandler(NoAuthHandler):\n\n    @sign.signature_required\n    def post(self):\n        return super().post()\n\n\nclass SimpleHandler(BaseHandler):\n\n    message_key: str = system_config.response_def_map[\'Message\']\n    status_bool_key = system_config.response_def_map[\'StatusBool\']\n    status_code_key = system_config.response_def_map[\'StatusCode\']\n\n    def post(self):\n        start_time = time.time()\n        if interface_manager.total == 0:\n            logger.info(\'There is currently no model deployment and services are not available.\')\n            return self.finish(json_encode(\n                {self.message_key: """", self.status_bool_key: False, self.status_code_key: -999}\n            ))\n\n        bytes_batch, response = self.image_utils.get_bytes_batch(self.request.body)\n\n        if not bytes_batch:\n            logger.error(\'Response[{}] - {} ms\'.format(\n                response,\n                (time.time() - start_time) * 1000)\n            )\n            return self.finish(json_encode(response))\n\n        image_sample = bytes_batch[0]\n        image_size = ImageUtils.size_of_image(image_sample)\n        size_string = ""{}x{}"".format(image_size[0], image_size[1])\n\n        interface = interface_manager.get_by_size(size_string)\n        if not interface:\n            logger.info(\'Service is not ready!\')\n            return self.finish(json_encode(\n                {self.message_key: """", self.status_bool_key: False, self.status_code_key: 999}\n            ))\n\n        image_batch, response = ImageUtils.get_image_batch(interface.model_conf, bytes_batch, param_key=None)\n\n        if not image_batch:\n            logger.error(\'[{}] | [{}] - Size[{}] - Response[{}] - {} ms\'.format(\n\n                self.request.remote_ip, interface.name, size_string, response,\n                (time.time() - start_time) * 1000)\n            )\n            return self.finish(json_encode(response))\n\n        result = interface.predict_batch(image_batch, None)\n        logger.info(\'[{}] | [{}] - Size[{}] - Predict[{}] - {} ms\'.format(\n            self.request.remote_ip, interface.name, size_string, result, (time.time() - start_time) * 1000)\n        )\n        response[self.message_key] = result\n        return self.write(json.dumps(response, ensure_ascii=False).replace(""</"", ""<\\\\/""))\n\n\nclass ServiceHandler(BaseHandler):\n\n    def get(self):\n        response = {\n            ""total"": interface_manager.total,\n            ""online"": interface_manager.online_names,\n            ""invalid"": interface_manager.invalid_group\n        }\n        return self.finish(json.dumps(response, ensure_ascii=False, indent=2))\n\n\nclass FileHandler(tornado.web.StaticFileHandler):\n    def data_received(self, chunk):\n        pass\n\n    def set_extra_headers(self, path):\n        self.set_header(""Cache-control"", ""no-cache"")\n\n\nclass HeartBeatHandler(BaseHandler):\n\n    def get(self):\n        self.finish("""")\n\n\ndef clear_specific_job():\n    tornado.options.options.request_count = {}\n\n\ndef clear_global_job():\n    tornado.options.options.global_request_count = 0\n\n\ndef make_app(route: list):\n    return tornado.web.Application([\n        (i[\'Route\'], globals()[i[\'Class\']], i.get(""Param""))\n        if ""Param"" in i else\n        (i[\'Route\'], globals()[i[\'Class\']]) for i in route\n    ])\n\n\ntrigger_specific = IntervalTrigger(seconds=system_config.request_count_interval)\ntrigger_global = IntervalTrigger(seconds=system_config.g_request_count_interval)\nscheduler.add_job(clear_specific_job, trigger_specific)\nscheduler.add_job(clear_global_job, trigger_global)\nscheduler.start()\n\nif __name__ == ""__main__"":\n    if platform.system() == \'Windows\':\n        os.system(""chcp 65001"")\n    parser = optparse.OptionParser()\n    parser.add_option(\'-p\', \'--port\', type=""int"", default=19952, dest=""port"")\n    parser.add_option(\'-w\', \'--workers\', type=""int"", default=50, dest=""workers"")\n    opt, args = parser.parse_args()\n    server_port = opt.port\n    request_limit = system_config.request_limit\n    global_request_limit = system_config.global_request_limit\n    workers = opt.workers\n    logger = system_config.logger\n    print(\'=============WITHOUT_LOGGER=============\', system_config.without_logger)\n    tornado.log.enable_pretty_logging(logger=logger)\n    interface_manager = InterfaceManager()\n    threading.Thread(target=lambda: event_loop(system_config, model_path, interface_manager)).start()\n\n    sign.set_auth([{\'accessKey\': system_config.access_key, \'secretKey\': system_config.secret_key}])\n\n    server_host = ""0.0.0.0""\n    logger.info(\'Running on http://{}:{}/ <Press CTRL + C to quit>\'.format(server_host, server_port))\n    app = make_app(system_config.route_map)\n    http_server = tornado.httpserver.HTTPServer(app)\n    http_server.bind(server_port, server_host)\n    http_server.start(1)\n    # app.listen(server_port, server_host)\n    try:\n        tornado.ioloop.IOLoop.instance().start()\n    except KeyboardInterrupt:\n        tornado.ioloop.IOLoop.instance().stop()\n\n'"
utils.py,0,"b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>\nimport io\nimport re\nimport os\nimport cv2\nimport time\nimport base64\nimport functools\nimport binascii\nimport datetime\nimport hashlib\nimport numpy as np\nimport tensorflow as tf\nfrom PIL import Image as PIL_Image\nfrom constants import Response, SystemConfig\nfrom pretreatment import preprocessing, preprocessing_by_func\nfrom config import ModelConfig, Config\nfrom middleware.impl.gif_frames import concat_frames, blend_frame\n\n\nclass Arithmetic(object):\n\n    def calc(self, formula):\n        formula = re.sub(\' \', \'\', formula)\n        formula_ret = 0\n        match_brackets = re.search(r\'\\([^()]+\\)\', formula)\n        if match_brackets:\n            calc_result = self.calc(match_brackets.group().strip(""(,)""))\n            formula = formula.replace(match_brackets.group(), str(calc_result))\n            return self.calc(formula)\n        else:\n            formula = formula.replace(\'--\', \'+\').replace(\'++\', \'+\').replace(\'-+\', \'-\').replace(\'+-\', \'-\')\n            while re.findall(r""[*/]"", formula):\n                get_formula = re.search(r""[.\\d]+[*/]+[-]?[.\\d]+"", formula)\n                if get_formula:\n                    get_formula_str = get_formula.group()\n                    if get_formula_str.count(""*""):\n                        formula_list = get_formula_str.split(""*"")\n                        ret = float(formula_list[0]) * float(formula_list[1])\n                    else:\n                        formula_list = get_formula_str.split(""/"")\n                        ret = float(formula_list[0]) / float(formula_list[1])\n                    formula = formula.replace(get_formula_str, str(ret)).replace(\'--\', \'+\').replace(\'++\', \'+\')\n            formula = re.findall(r\'[-]?[.\\d]+\', formula)\n            for num in formula:\n                formula_ret += float(num)\n        return formula_ret\n\n\nclass ParamUtils(object):\n\n    @staticmethod\n    def filter(param):\n        if isinstance(param, list) and len(param) > 0 and isinstance(param[0], bytes):\n            return param[0].decode()\n        return param\n\n\nclass SignUtils(object):\n\n    @staticmethod\n    def md5(text):\n        return hashlib.md5(text.encode(\'utf-8\')).hexdigest()\n\n    @staticmethod\n    def timestamp():\n        return int(time.mktime(datetime.datetime.now().timetuple()))\n\n\nclass PathUtils(object):\n\n    @staticmethod\n    def get_file_name(path: str):\n        if \'/\' in path:\n            return path.split(\'/\')[-1]\n        elif \'\\\\\' in path:\n            return path.split(\'\\\\\')[-1]\n        else:\n            return path\n\n\nclass ImageUtils(object):\n\n    def __init__(self, conf: Config):\n        self.conf = conf\n\n    def get_bytes_batch(self, base64_or_bytes):\n        response = Response(self.conf.response_def_map)\n        b64_filter_s = lambda s: re.sub(""data:image/.+?base64,"", """", s, 1) if \',\' in s else s\n        b64_filter_b = lambda s: re.sub(b""data:image/.+?base64,"", b"""", s, 1) if b\',\' in s else s\n        try:\n            if isinstance(base64_or_bytes, bytes):\n                if self.conf.split_flag in base64_or_bytes:\n                    bytes_batch = base64_or_bytes.split(self.conf.split_flag)\n                else:\n                    bytes_batch = [base64_or_bytes]\n            elif isinstance(base64_or_bytes, list):\n                bytes_batch = [base64.b64decode(b64_filter_s(i).encode(\'utf-8\')) for i in base64_or_bytes if isinstance(i, str)]\n                if not bytes_batch:\n                    bytes_batch = [base64.b64decode(b64_filter_b(i)) for i in base64_or_bytes if isinstance(i, bytes)]\n            else:\n                base64_or_bytes = b64_filter_s(base64_or_bytes)\n                bytes_batch = base64.b64decode(base64_or_bytes.encode(\'utf-8\')).split(self.conf.split_flag)\n\n        except binascii.Error:\n            return None, response.INVALID_BASE64_STRING\n        what_img = [ImageUtils.test_image(i) for i in bytes_batch]\n        if None in what_img:\n            return None, response.INVALID_IMAGE_FORMAT\n        return bytes_batch, response.SUCCESS\n\n    @staticmethod\n    def get_image_batch(model: ModelConfig, bytes_batch, param_key=None):\n        # Note that there are two return objects here.\n        # 1.image_batch, 2.response\n\n        response = Response(model.conf.response_def_map)\n\n        def load_image(image_bytes):\n            data_stream = io.BytesIO(image_bytes)\n            pil_image = PIL_Image.open(data_stream)\n\n            if pil_image.mode == \'P\':\n                pil_image = pil_image.convert(\'RGB\')\n\n            rgb = pil_image.split()\n            size = pil_image.size\n\n            gif_handle = model.pre_concat_frames != -1 or model.pre_blend_frames != -1\n\n            if (len(rgb) > 3 and model.pre_replace_transparent) and not gif_handle:\n                background = PIL_Image.new(\'RGB\', pil_image.size, (255, 255, 255))\n                background.paste(pil_image, (0, 0, size[0], size[1]), pil_image)\n                pil_image = background\n\n            if model.pre_concat_frames != -1:\n                im = concat_frames(pil_image, model.pre_concat_frames)\n            elif model.pre_blend_frames != -1:\n                im = blend_frame(pil_image, model.pre_blend_frames)\n            else:\n                im = np.asarray(pil_image)\n\n            if model.image_channel == 1 and len(im.shape) == 3:\n                im = cv2.cvtColor(im, cv2.COLOR_RGB2GRAY)\n\n            im = preprocessing_by_func(\n                exec_map=model.exec_map,\n                key=param_key,\n                src_arr=im\n            )\n\n            im = preprocessing(\n                image=im,\n                binaryzation=model.pre_binaryzation,\n            )\n\n            if model.pre_horizontal_stitching:\n                up_slice = im[0: int(size[1] / 2), 0: size[0]]\n                down_slice = im[int(size[1] / 2): size[1], 0: size[0]]\n                im = np.concatenate((up_slice, down_slice), axis=1)\n\n            image = im.astype(np.float32)\n            if model.resize[0] == -1:\n                ratio = model.resize[1] / size[1]\n                resize_width = int(ratio * size[0])\n                image = cv2.resize(image, (resize_width, model.resize[1]))\n            else:\n                image = cv2.resize(image, (model.resize[0], model.resize[1]))\n            image = image.swapaxes(0, 1)\n            return (image[:, :, np.newaxis] if model.image_channel == 1 else image[:, :]) / 255.\n\n        try:\n            image_batch = [load_image(i) for i in bytes_batch]\n            return image_batch, response.SUCCESS\n        except OSError:\n            return None, response.IMAGE_DAMAGE\n        except ValueError as _e:\n            print(_e)\n            return None, response.IMAGE_SIZE_NOT_MATCH_GRAPH\n\n    @staticmethod\n    def size_of_image(image_bytes: bytes):\n        _null_size = tuple((-1, -1))\n        try:\n            data_stream = io.BytesIO(image_bytes)\n            size = PIL_Image.open(data_stream).size\n            return size\n        except OSError:\n            return _null_size\n        except ValueError:\n            return _null_size\n\n    @staticmethod\n    def test_image(h):\n        """"""JPEG""""""\n        if h[:3] == b""\\xff\\xd8\\xff"":\n            return \'jpeg\'\n        """"""PNG""""""\n        if h[:8] == b""\\211PNG\\r\\n\\032\\n"":\n            return \'png\'\n        """"""GIF (\'87 and \'89 variants)""""""\n        if h[:6] in (b\'GIF87a\', b\'GIF89a\'):\n            return \'gif\'\n        """"""TIFF (can be in Motorola or Intel byte order)""""""\n        if h[:2] in (b\'MM\', b\'II\'):\n            return \'tiff\'\n        if h[:2] == b\'BM\':\n            return \'bmp\'\n        """"""SGI image library""""""\n        if h[:2] == b\'\\001\\332\':\n            return \'rgb\'\n        """"""PBM (portable bitmap)""""""\n        if len(h) >= 3 and \\\n                h[0] == b\'P\' and h[1] in b\'14\' and h[2] in b\' \\t\\n\\r\':\n            return \'pbm\'\n        """"""PGM (portable graymap)""""""\n        if len(h) >= 3 and \\\n                h[0] == b\'P\' and h[1] in b\'25\' and h[2] in b\' \\t\\n\\r\':\n            return \'pgm\'\n        """"""PPM (portable pixmap)""""""\n        if len(h) >= 3 and h[0] == b\'P\' and h[1] in b\'36\' and h[2] in b\' \\t\\n\\r\':\n            return \'ppm\'\n        """"""Sun raster file""""""\n        if h[:4] == b\'\\x59\\xA6\\x6A\\x95\':\n            return \'rast\'\n        """"""X bitmap (X10 or X11)""""""\n        s = b\'#define \'\n        if h[:len(s)] == s:\n            return \'xbm\'\n        return None\n\n\nclass SystemUtils(object):\n\n    @staticmethod\n    def datetime(origin=None, microseconds=None):\n        now = origin if origin else time.time()\n        if microseconds:\n            return (\n                    datetime.datetime.fromtimestamp(now) + datetime.timedelta(microseconds=microseconds)\n            ).strftime(\'%Y-%m-%d %H:%M:%S.%f\')\n        return datetime.datetime.fromtimestamp(now).strftime(\'%Y-%m-%d %H:%M:%S.%f\')\n\n    @staticmethod\n    def isdir(sftp, path):\n        from stat import S_ISDIR\n        try:\n            return S_ISDIR(sftp.stat(path).st_mode)\n        except IOError:\n            return False\n\n    @staticmethod\n    def empty(sftp, path):\n        from paramiko import SFTPClient\n        if not SystemUtils.isdir(sftp, path):\n            sftp.mkdir(path)\n\n        files = sftp.listdir(path=path)\n\n        for f in files:\n            file_path = os.path.join(path, f)\n            if SystemUtils.isdir(sftp, file_path):\n                SystemUtils.empty(sftp, file_path)\n            else:\n                sftp.remove(file_path)\n'"
middleware/__init__.py,0,b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>\n\nfrom middleware.impl import color_extractor\nfrom middleware.impl import corp_to_multi\n\ncolor_extract = color_extractor.ColorExtract()\ncolor_map = color_extractor.color_map\n\n'
sdk/__init__.py,0,b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>'
middleware/constructor/color_extractor.py,27,"b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>\nimport tensorflow as tf\nfrom tensorflow.python.framework.graph_util import convert_variables_to_constants\n\nblack = tf.constant([[0, 0, 0]], dtype=tf.int32)\nred = tf.constant([[0, 0, 255]], dtype=tf.int32)\nyellow = tf.constant([[0, 255, 255]], dtype=tf.int32)\nblue = tf.constant([[255, 0, 0]], dtype=tf.int32)\ngreen = tf.constant([[0, 255, 0]], dtype=tf.int32)\nwhite = tf.constant([[255, 255, 255]], dtype=tf.int32)\n\n\ndef k_means(data, target_color, bg_color1, bg_color2, alpha=1.0):\n    def get_distance(point):\n        sum_squares = tf.cast(tf.reduce_sum(tf.abs(tf.subtract(data, point)), axis=2, keep_dims=True), tf.float32)\n        return sum_squares\n\n    alpha_value = tf.constant(alpha, dtype=tf.float32)\n    # target_color  black:0, red:1, blue:2, yellow:3, green:4, color_1:5, color_2:6\n    black_distance = get_distance(black)\n    red_distance = get_distance(red)\n    if target_color == 1:\n        red_distance = tf.multiply(red_distance, alpha_value)\n    blue_distance = get_distance(blue)\n    if target_color == 2:\n        blue_distance = tf.multiply(blue_distance, alpha_value)\n    yellow_distance = get_distance(yellow)\n    if target_color == 3:\n        yellow_distance = tf.multiply(yellow_distance, alpha_value)\n    white_distance = get_distance(yellow)\n    if target_color == 7:\n        white_distance = tf.multiply(white_distance, alpha_value)\n\n    green_distance = get_distance(green)\n    c_1_distance = get_distance(bg_color1)\n    c_2_distance = get_distance(bg_color2)\n\n    distances = tf.concat([\n        black_distance,\n        red_distance,\n        blue_distance,\n        yellow_distance,\n        green_distance,\n        c_1_distance,\n        c_2_distance,\n        white_distance\n    ], axis=-1)\n\n    clusters = tf.cast(tf.argmin(distances, axis=-1), tf.int32)\n\n    mask = tf.equal(clusters, target_color)\n    mask = tf.cast(mask, tf.int32)\n\n    return mask * 255\n\n\ndef filter_img(img, target_color, alpha=0.9):\n    # background color1\n    color_1 = img[0, 0, :]\n    color_1 = tf.reshape(color_1, [1, 3])\n    color_1 = tf.cast(color_1, dtype=tf.int32)\n\n    # background color2\n    color_2 = img[6, 6, :]\n    color_2 = tf.reshape(color_2, [1, 3])\n    color_2 = tf.cast(color_2, dtype=tf.int32)\n\n    filtered_img = k_means(img_holder, target_color, color_1, color_2, alpha)\n    filtered_img = tf.expand_dims(filtered_img, axis=0)\n    filtered_img = tf.expand_dims(filtered_img, axis=-1)\n    filtered_img = tf.squeeze(filtered_img, name=""filtered"")\n    return filtered_img\n\n\ndef compile_graph():\n\n    with sess.graph.as_default():\n        input_graph_def = sess.graph.as_graph_def()\n\n    output_graph_def = convert_variables_to_constants(\n        sess,\n        input_graph_def,\n        output_node_names=[\'filtered\']\n    )\n\n    last_compile_model_path = ""color_extractor.pb""\n    with tf.gfile.FastGFile(last_compile_model_path, mode=\'wb\') as gf:\n        # gf.write(output_graph_def.SerializeToString())\n        print(output_graph_def.SerializeToString())\n\n\nif __name__ == ""__main__"":\n\n    sess = tf.Session()\n    img_holder = tf.placeholder(dtype=tf.int32, name=""img_holder"")\n    color = tf.placeholder(dtype=tf.int32, name=""target_color"")\n    filtered = filter_img(img_holder, color, alpha=0.8)\n\n    compile_graph()\n\n'"
middleware/impl/color_extractor.py,6,"b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>\nimport io\nimport cv2\nimport time\nimport PIL.Image as PilImage\nimport numpy as np\nimport tensorflow as tf\nfrom enum import Enum, unique\nfrom distutils.version import StrictVersion\n\n\n@unique\nclass TargetColor(Enum):\n    Black = 0\n    Red = 1\n    Blue = 2\n    Yellow = 3\n    Green = 4\n    White = 7\n\n\ncolor_map = {\n    \'black\': TargetColor.Black,\n    \'red\': TargetColor.Red,\n    \'blue\': TargetColor.Blue,\n    \'yellow\': TargetColor.Yellow,\n    \'green\': TargetColor.Green,\n    \'white\': TargetColor.White\n}\n\n\nclass ColorExtract:\n\n    def __init__(self):\n        self.model_raw_v1_14 = b\'\\nB\\n\\x05Const\\x12\\x05Const*%\\n\\x05value\\x12\\x1cB\\x1a\\x08\\x03\\x12\\x08\\x12\\x02\\x08\\x01\\x12\\x02\\x08\\x03""\\x0c\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00*\\x0b\\n\\x05dtype\\x12\\x020\\x03\\nD\\n\\x07Const_1\\x12\\x05Const*%\\n\\x05value\\x12\\x1cB\\x1a\\x08\\x03\\x12\\x08\\x12\\x02\\x08\\x01\\x12\\x02\\x08\\x03""\\x0c\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\x00\\x00\\x00*\\x0b\\n\\x05dtype\\x12\\x020\\x03\\nD\\n\\x07Const_2\\x12\\x05Const*%\\n\\x05value\\x12\\x1cB\\x1a\\x08\\x03\\x12\\x08\\x12\\x02\\x08\\x01\\x12\\x02\\x08\\x03""\\x0c\\x00\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\xff\\x00\\x00\\x00*\\x0b\\n\\x05dtype\\x12\\x020\\x03\\nD\\n\\x07Const_3\\x12\\x05Const*%\\n\\x05value\\x12\\x1cB\\x1a\\x08\\x03\\x12\\x08\\x12\\x02\\x08\\x01\\x12\\x02\\x08\\x03""\\x0c\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00*\\x0b\\n\\x05dtype\\x12\\x020\\x03\\nD\\n\\x07Const_4\\x12\\x05Const*%\\n\\x05value\\x12\\x1cB\\x1a\\x08\\x03\\x12\\x08\\x12\\x02\\x08\\x01\\x12\\x02\\x08\\x03""\\x0c\\x00\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00*\\x0b\\n\\x05dtype\\x12\\x020\\x03\\n5\\n\\nimg_holder\\x12\\x0bPlaceholder*\\r\\n\\x05shape\\x12\\x04:\\x02\\x18\\x01*\\x0b\\n\\x05dtype\\x12\\x020\\x03\\n7\\n\\x0ctarget_color\\x12\\x0bPlaceholder*\\r\\n\\x05shape\\x12\\x04:\\x02\\x18\\x01*\\x0b\\n\\x05dtype\\x12\\x020\\x03\\nL\\n\\x13strided_slice/stack\\x12\\x05Const*!\\n\\x05value\\x12\\x18B\\x16\\x08\\x03\\x12\\x04\\x12\\x02\\x08\\x03""\\x0c\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00*\\x0b\\n\\x05dtype\\x12\\x020\\x03\\nN\\n\\x15strided_slice/stack_1\\x12\\x05Const*!\\n\\x05value\\x12\\x18B\\x16\\x08\\x03\\x12\\x04\\x12\\x02\\x08\\x03""\\x0c\\x01\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00*\\x0b\\n\\x05dtype\\x12\\x020\\x03\\nN\\n\\x15strided_slice/stack_2\\x12\\x05Const*!\\n\\x05value\\x12\\x18B\\x16\\x08\\x03\\x12\\x04\\x12\\x02\\x08\\x03""\\x0c\\x01\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x00\\x00*\\x0b\\n\\x05dtype\\x12\\x020\\x03\\n\\xe6\\x01\\n\\rstrided_slice\\x12\\x0cStridedSlice\\x1a\\nimg_holder\\x1a\\x13strided_slice/stack\\x1a\\x15strided_slice/stack_1\\x1a\\x15strided_slice/stack_2*\\x07\\n\\x01T\\x12\\x020\\x03*\\x0b\\n\\x05Index\\x12\\x020\\x03*\\x16\\n\\x10shrink_axis_mask\\x12\\x02\\x18\\x03*\\x10\\n\\nbegin_mask\\x12\\x02\\x18\\x04*\\x13\\n\\rellipsis_mask\\x12\\x02\\x18\\x00*\\x13\\n\\rnew_axis_mask\\x12\\x02\\x18\\x00*\\x0e\\n\\x08end_mask\\x12\\x02\\x18\\x04\\nB\\n\\rReshape/shape\\x12\\x05Const*\\x1d\\n\\x05value\\x12\\x14B\\x12\\x08\\x03\\x12\\x04\\x12\\x02\\x08\\x02""\\x08\\x01\\x00\\x00\\x00\\x03\\x00\\x00\\x00*\\x0b\\n\\x05dtype\\x12\\x020\\x03\\nG\\n\\x07Reshape\\x12\\x07Reshape\\x1a\\rstrided_slice\\x1a\\rReshape/shape*\\x07\\n\\x01T\\x12\\x020\\x03*\\x0c\\n\\x06Tshape\\x12\\x020\\x03\\nN\\n\\x15strided_slice_1/stack\\x12\\x05Const*!\\n\\x05value\\x12\\x18B\\x16\\x08\\x03\\x12\\x04\\x12\\x02\\x08\\x03""\\x0c\\x06\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x00*\\x0b\\n\\x05dtype\\x12\\x020\\x03\\nP\\n\\x17strided_slice_1/stack_1\\x12\\x05Const*!\\n\\x05value\\x12\\x18B\\x16\\x08\\x03\\x12\\x04\\x12\\x02\\x08\\x03""\\x0c\\x07\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\x00\\x00\\x00\\x00*\\x0b\\n\\x05dtype\\x12\\x020\\x03\\nP\\n\\x17strided_slice_1/stack_2\\x12\\x05Const*!\\n\\x05value\\x12\\x18B\\x16\\x08\\x03\\x12\\x04\\x12\\x02\\x08\\x03""\\x0c\\x01\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x00\\x00*\\x0b\\n\\x05dtype\\x12\\x020\\x03\\n\\xee\\x01\\n\\x0fstrided_slice_1\\x12\\x0cStridedSlice\\x1a\\nimg_holder\\x1a\\x15strided_slice_1/stack\\x1a\\x17strided_slice_1/stack_1\\x1a\\x17strided_slice_1/stack_2*\\x07\\n\\x01T\\x12\\x020\\x03*\\x0b\\n\\x05Index\\x12\\x020\\x03*\\x16\\n\\x10shrink_axis_mask\\x12\\x02\\x18\\x03*\\x10\\n\\nbegin_mask\\x12\\x02\\x18\\x04*\\x13\\n\\rellipsis_mask\\x12\\x02\\x18\\x00*\\x13\\n\\rnew_axis_mask\\x12\\x02\\x18\\x00*\\x0e\\n\\x08end_mask\\x12\\x02\\x18\\x04\\nD\\n\\x0fReshape_1/shape\\x12\\x05Const*\\x1d\\n\\x05value\\x12\\x14B\\x12\\x08\\x03\\x12\\x04\\x12\\x02\\x08\\x02""\\x08\\x01\\x00\\x00\\x00\\x03\\x00\\x00\\x00*\\x0b\\n\\x05dtype\\x12\\x020\\x03\\nM\\n\\tReshape_1\\x12\\x07Reshape\\x1a\\x0fstrided_slice_1\\x1a\\x0fReshape_1/shape*\\x07\\n\\x01T\\x12\\x020\\x03*\\x0c\\n\\x06Tshape\\x12\\x020\\x03\\n&\\n\\x03Sub\\x12\\x03Sub\\x1a\\nimg_holder\\x1a\\x05Const*\\x07\\n\\x01T\\x12\\x020\\x03\\n\\x18\\n\\x03Abs\\x12\\x03Abs\\x1a\\x03Sub*\\x07\\n\\x01T\\x12\\x020\\x03\\n?\\n\\x15Sum/reduction_indices\\x12\\x05Const*\\x12\\n\\x05value\\x12\\tB\\x07\\x08\\x03\\x12\\x00:\\x01\\x02*\\x0b\\n\\x05dtype\\x12\\x020\\x03\\nL\\n\\x03Sum\\x12\\x03Sum\\x1a\\x03Abs\\x1a\\x15Sum/reduction_indices*\\n\\n\\x04Tidx\\x12\\x020\\x03*\\x0f\\n\\tkeep_dims\\x12\\x02(\\x01*\\x07\\n\\x01T\\x12\\x020\\x03\\n9\\n\\x04Cast\\x12\\x04Cast\\x1a\\x03Sum*\\n\\n\\x04SrcT\\x12\\x020\\x03*\\x0e\\n\\x08Truncate\\x12\\x02(\\x00*\\n\\n\\x04DstT\\x12\\x020\\x01\\n*\\n\\x05Sub_1\\x12\\x03Sub\\x1a\\nimg_holder\\x1a\\x07Const_1*\\x07\\n\\x01T\\x12\\x020\\x03\\n\\x1c\\n\\x05Abs_1\\x12\\x03Abs\\x1a\\x05Sub_1*\\x07\\n\\x01T\\x12\\x020\\x03\\nA\\n\\x17Sum_1/reduction_indices\\x12\\x05Const*\\x12\\n\\x05value\\x12\\tB\\x07\\x08\\x03\\x12\\x00:\\x01\\x02*\\x0b\\n\\x05dtype\\x12\\x020\\x03\\nR\\n\\x05Sum_1\\x12\\x03Sum\\x1a\\x05Abs_1\\x1a\\x17Sum_1/reduction_indices*\\n\\n\\x04Tidx\\x12\\x020\\x03*\\x0f\\n\\tkeep_dims\\x12\\x02(\\x01*\\x07\\n\\x01T\\x12\\x020\\x03\\n=\\n\\x06Cast_1\\x12\\x04Cast\\x1a\\x05Sum_1*\\n\\n\\x04SrcT\\x12\\x020\\x03*\\x0e\\n\\x08Truncate\\x12\\x02(\\x00*\\n\\n\\x04DstT\\x12\\x020\\x01\\n*\\n\\x05Sub_2\\x12\\x03Sub\\x1a\\nimg_holder\\x1a\\x07Const_3*\\x07\\n\\x01T\\x12\\x020\\x03\\n\\x1c\\n\\x05Abs_2\\x12\\x03Abs\\x1a\\x05Sub_2*\\x07\\n\\x01T\\x12\\x020\\x03\\nA\\n\\x17Sum_2/reduction_indices\\x12\\x05Const*\\x12\\n\\x05value\\x12\\tB\\x07\\x08\\x03\\x12\\x00:\\x01\\x02*\\x0b\\n\\x05dtype\\x12\\x020\\x03\\nR\\n\\x05Sum_2\\x12\\x03Sum\\x1a\\x05Abs_2\\x1a\\x17Sum_2/reduction_indices*\\n\\n\\x04Tidx\\x12\\x020\\x03*\\x0f\\n\\tkeep_dims\\x12\\x02(\\x01*\\x07\\n\\x01T\\x12\\x020\\x03\\n=\\n\\x06Cast_2\\x12\\x04Cast\\x1a\\x05Sum_2*\\n\\n\\x04SrcT\\x12\\x020\\x03*\\x0e\\n\\x08Truncate\\x12\\x02(\\x00*\\n\\n\\x04DstT\\x12\\x020\\x01\\n*\\n\\x05Sub_3\\x12\\x03Sub\\x1a\\nimg_holder\\x1a\\x07Const_2*\\x07\\n\\x01T\\x12\\x020\\x03\\n\\x1c\\n\\x05Abs_3\\x12\\x03Abs\\x1a\\x05Sub_3*\\x07\\n\\x01T\\x12\\x020\\x03\\nA\\n\\x17Sum_3/reduction_indices\\x12\\x05Const*\\x12\\n\\x05value\\x12\\tB\\x07\\x08\\x03\\x12\\x00:\\x01\\x02*\\x0b\\n\\x05dtype\\x12\\x020\\x03\\nR\\n\\x05Sum_3\\x12\\x03Sum\\x1a\\x05Abs_3\\x1a\\x17Sum_3/reduction_indices*\\n\\n\\x04Tidx\\x12\\x020\\x03*\\x0f\\n\\tkeep_dims\\x12\\x02(\\x01*\\x07\\n\\x01T\\x12\\x020\\x03\\n=\\n\\x06Cast_3\\x12\\x04Cast\\x1a\\x05Sum_3*\\n\\n\\x04SrcT\\x12\\x020\\x03*\\x0e\\n\\x08Truncate\\x12\\x02(\\x00*\\n\\n\\x04DstT\\x12\\x020\\x01\\n*\\n\\x05Sub_4\\x12\\x03Sub\\x1a\\nimg_holder\\x1a\\x07Const_2*\\x07\\n\\x01T\\x12\\x020\\x03\\n\\x1c\\n\\x05Abs_4\\x12\\x03Abs\\x1a\\x05Sub_4*\\x07\\n\\x01T\\x12\\x020\\x03\\nA\\n\\x17Sum_4/reduction_indices\\x12\\x05Const*\\x12\\n\\x05value\\x12\\tB\\x07\\x08\\x03\\x12\\x00:\\x01\\x02*\\x0b\\n\\x05dtype\\x12\\x020\\x03\\nR\\n\\x05Sum_4\\x12\\x03Sum\\x1a\\x05Abs_4\\x1a\\x17Sum_4/reduction_indices*\\n\\n\\x04Tidx\\x12\\x020\\x03*\\x0f\\n\\tkeep_dims\\x12\\x02(\\x01*\\x07\\n\\x01T\\x12\\x020\\x03\\n=\\n\\x06Cast_4\\x12\\x04Cast\\x1a\\x05Sum_4*\\n\\n\\x04SrcT\\x12\\x020\\x03*\\x0e\\n\\x08Truncate\\x12\\x02(\\x00*\\n\\n\\x04DstT\\x12\\x020\\x01\\n*\\n\\x05Sub_5\\x12\\x03Sub\\x1a\\nimg_holder\\x1a\\x07Const_4*\\x07\\n\\x01T\\x12\\x020\\x03\\n\\x1c\\n\\x05Abs_5\\x12\\x03Abs\\x1a\\x05Sub_5*\\x07\\n\\x01T\\x12\\x020\\x03\\nA\\n\\x17Sum_5/reduction_indices\\x12\\x05Const*\\x12\\n\\x05value\\x12\\tB\\x07\\x08\\x03\\x12\\x00:\\x01\\x02*\\x0b\\n\\x05dtype\\x12\\x020\\x03\\nR\\n\\x05Sum_5\\x12\\x03Sum\\x1a\\x05Abs_5\\x1a\\x17Sum_5/reduction_indices*\\n\\n\\x04Tidx\\x12\\x020\\x03*\\x0f\\n\\tkeep_dims\\x12\\x02(\\x01*\\x07\\n\\x01T\\x12\\x020\\x03\\n=\\n\\x06Cast_5\\x12\\x04Cast\\x1a\\x05Sum_5*\\n\\n\\x04SrcT\\x12\\x020\\x03*\\x0e\\n\\x08Truncate\\x12\\x02(\\x00*\\n\\n\\x04DstT\\x12\\x020\\x01\\n*\\n\\x05Sub_6\\x12\\x03Sub\\x1a\\nimg_holder\\x1a\\x07Reshape*\\x07\\n\\x01T\\x12\\x020\\x03\\n\\x1c\\n\\x05Abs_6\\x12\\x03Abs\\x1a\\x05Sub_6*\\x07\\n\\x01T\\x12\\x020\\x03\\nA\\n\\x17Sum_6/reduction_indices\\x12\\x05Const*\\x12\\n\\x05value\\x12\\tB\\x07\\x08\\x03\\x12\\x00:\\x01\\x02*\\x0b\\n\\x05dtype\\x12\\x020\\x03\\nR\\n\\x05Sum_6\\x12\\x03Sum\\x1a\\x05Abs_6\\x1a\\x17Sum_6/reduction_indices*\\n\\n\\x04Tidx\\x12\\x020\\x03*\\x0f\\n\\tkeep_dims\\x12\\x02(\\x01*\\x07\\n\\x01T\\x12\\x020\\x03\\n=\\n\\x06Cast_6\\x12\\x04Cast\\x1a\\x05Sum_6*\\n\\n\\x04SrcT\\x12\\x020\\x03*\\x0e\\n\\x08Truncate\\x12\\x02(\\x00*\\n\\n\\x04DstT\\x12\\x020\\x01\\n,\\n\\x05Sub_7\\x12\\x03Sub\\x1a\\nimg_holder\\x1a\\tReshape_1*\\x07\\n\\x01T\\x12\\x020\\x03\\n\\x1c\\n\\x05Abs_7\\x12\\x03Abs\\x1a\\x05Sub_7*\\x07\\n\\x01T\\x12\\x020\\x03\\nA\\n\\x17Sum_7/reduction_indices\\x12\\x05Const*\\x12\\n\\x05value\\x12\\tB\\x07\\x08\\x03\\x12\\x00:\\x01\\x02*\\x0b\\n\\x05dtype\\x12\\x020\\x03\\nR\\n\\x05Sum_7\\x12\\x03Sum\\x1a\\x05Abs_7\\x1a\\x17Sum_7/reduction_indices*\\n\\n\\x04Tidx\\x12\\x020\\x03*\\x0f\\n\\tkeep_dims\\x12\\x02(\\x01*\\x07\\n\\x01T\\x12\\x020\\x03\\n=\\n\\x06Cast_7\\x12\\x04Cast\\x1a\\x05Sum_7*\\n\\n\\x04SrcT\\x12\\x020\\x03*\\x0e\\n\\x08Truncate\\x12\\x02(\\x00*\\n\\n\\x04DstT\\x12\\x020\\x01\\n>\\n\\x0bconcat/axis\\x12\\x05Const*\\x1b\\n\\x05value\\x12\\x12B\\x10\\x08\\x03\\x12\\x00:\\n\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x01*\\x0b\\n\\x05dtype\\x12\\x020\\x03\\n{\\n\\x06concat\\x12\\x08ConcatV2\\x1a\\x04Cast\\x1a\\x06Cast_1\\x1a\\x06Cast_2\\x1a\\x06Cast_3\\x1a\\x06Cast_5\\x1a\\x06Cast_6\\x1a\\x06Cast_7\\x1a\\x06Cast_4\\x1a\\x0bconcat/axis*\\n\\n\\x04Tidx\\x12\\x020\\x03*\\x07\\n\\x01T\\x12\\x020\\x01*\\x07\\n\\x01N\\x12\\x02\\x18\\x08\\nC\\n\\x10ArgMin/dimension\\x12\\x05Const*\\x1b\\n\\x05value\\x12\\x12B\\x10\\x08\\x03\\x12\\x00:\\n\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x01*\\x0b\\n\\x05dtype\\x12\\x020\\x03\\nR\\n\\x06ArgMin\\x12\\x06ArgMin\\x1a\\x06concat\\x1a\\x10ArgMin/dimension*\\n\\n\\x04Tidx\\x12\\x020\\x03*\\x07\\n\\x01T\\x12\\x020\\x01*\\x11\\n\\x0boutput_type\\x12\\x020\\t\\n>\\n\\x06Cast_8\\x12\\x04Cast\\x1a\\x06ArgMin*\\n\\n\\x04SrcT\\x12\\x020\\t*\\x0e\\n\\x08Truncate\\x12\\x02(\\x00*\\n\\n\\x04DstT\\x12\\x020\\x03\\n-\\n\\x05Equal\\x12\\x05Equal\\x1a\\x06Cast_8\\x1a\\x0ctarget_color*\\x07\\n\\x01T\\x12\\x020\\x03\\n=\\n\\x06Cast_9\\x12\\x04Cast\\x1a\\x05Equal*\\n\\n\\x04SrcT\\x12\\x020\\n*\\x0e\\n\\x08Truncate\\x12\\x02(\\x00*\\n\\n\\x04DstT\\x12\\x020\\x03\\n0\\n\\x05mul/y\\x12\\x05Const*\\x13\\n\\x05value\\x12\\nB\\x08\\x08\\x03\\x12\\x00:\\x02\\xff\\x01*\\x0b\\n\\x05dtype\\x12\\x020\\x03\\n""\\n\\x03mul\\x12\\x03Mul\\x1a\\x06Cast_9\\x1a\\x05mul/y*\\x07\\n\\x01T\\x12\\x020\\x03\\n8\\n\\x0eExpandDims/dim\\x12\\x05Const*\\x12\\n\\x05value\\x12\\tB\\x07\\x08\\x03\\x12\\x00:\\x01\\x00*\\x0b\\n\\x05dtype\\x12\\x020\\x03\\nB\\n\\nExpandDims\\x12\\nExpandDims\\x1a\\x03mul\\x1a\\x0eExpandDims/dim*\\n\\n\\x04Tdim\\x12\\x020\\x03*\\x07\\n\\x01T\\x12\\x020\\x03\\nC\\n\\x10ExpandDims_1/dim\\x12\\x05Const*\\x1b\\n\\x05value\\x12\\x12B\\x10\\x08\\x03\\x12\\x00:\\n\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x01*\\x0b\\n\\x05dtype\\x12\\x020\\x03\\nM\\n\\x0cExpandDims_1\\x12\\nExpandDims\\x1a\\nExpandDims\\x1a\\x10ExpandDims_1/dim*\\n\\n\\x04Tdim\\x12\\x020\\x03*\\x07\\n\\x01T\\x12\\x020\\x03\\n>\\n\\x08filtered\\x12\\x07Squeeze\\x1a\\x0cExpandDims_1*\\x12\\n\\x0csqueeze_dims\\x12\\x02\\n\\x00*\\x07\\n\\x01T\\x12\\x020\\x03\\x12\\x00\'\n        self.color_graph = tf.Graph()\n        self.color_sess = tf.compat.v1.Session(\n            graph=self.color_graph,\n            config=tf.compat.v1.ConfigProto(\n                allow_soft_placement=True,\n                # log_device_placement=True,\n                gpu_options=tf.compat.v1.GPUOptions(\n                    # allow_growth=True,  # it will cause fragmentation.\n                    per_process_gpu_memory_fraction=0.1\n                ))\n        )\n        self.color_graph_def = self.color_graph.as_graph_def()\n        self.load_model()\n        self.img_holder = self.color_sess.graph.get_tensor_by_name(""img_holder:0"")\n        self.target_color = self.color_sess.graph.get_tensor_by_name(""target_color:0"")\n        self.filtered = self.color_sess.graph.get_tensor_by_name(""filtered:0"")\n        self.color_graph.finalize()\n\n    def load_model(self):\n        raw = self.model_raw_v1_14\n        self.color_graph_def.ParseFromString(raw)\n        with self.color_graph.as_default():\n            self.color_sess.run(tf.compat.v1.global_variables_initializer())\n            _ = tf.import_graph_def(self.color_graph_def, name="""")\n\n    def separate_color(self, image_bytes, color: TargetColor):\n        # image = np.asarray(bytearray(image_bytes), dtype=""uint8"")\n        # image = cv2.imdecode(image, -1)\n        image = np.array(PilImage.open(io.BytesIO(image_bytes)))\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        mask = self.color_sess.run(self.filtered, {self.img_holder: image, self.target_color: color.value})\n        mask = bytearray(cv2.imencode(\'.png\', mask)[1])\n        return mask\n\n\nif __name__ == \'__main__\':\n\n    pass\n    # import os\n    # source_dir = r\'E:\\***\'\n    # target_dir = r\'E:\\***\'\n    # if not os.path.exists(target_dir):\n    #     os.makedirs(target_dir)\n    #\n    # source_names = os.listdir(source_dir)\n    # color_extract = ColorExtract()\n    # st = time.time()\n    # for i, name in enumerate(source_names):\n    #     img_path = os.path.join(source_dir, name)\n    #     if i % 100 == 0:\n    #         print(i)\n    #     with open(img_path, ""rb"") as f:\n    #         b = f.read()\n    #         result = color_extract.separate_color(b, color_map[\'red\'])\n    #     target_path = os.path.join(target_dir, name)\n    #     with open(target_path, ""wb"") as f:\n    #         f.write(result)\n    #\n    # print(\'completed {}\'.format(time.time() - st))\n'"
middleware/impl/corp_to_multi.py,0,"b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>\nimport io\nimport cv2\nimport PIL.Image as Pil_Image\nimport numpy as np\n\n\ndef coord_calc(param, is_range=True, is_integer=True):\n\n    result_group = []\n    start_h = param[\'start_pos\'][1]\n    end_h = start_h + param[\'corp_size\'][1]\n    for row in range(param[\'corp_num\'][1]):\n        start_w = param[\'start_pos\'][0]\n        end_w = start_w + param[\'corp_size\'][0]\n        for col in range(param[\'corp_num\'][0]):\n            pos_range = [[start_w, end_w], [start_h, end_h]]\n            t = lambda x: int(x) if is_integer else x\n            pos_center = [t((start_w + end_w)/2), t((start_h + end_h)/2)]\n            result_group.append(pos_range if is_range else pos_center)\n            start_w = end_w + param[\'interval_size\'][0]\n            end_w = start_w + param[\'corp_size\'][0]\n        start_h = end_h + param[\'interval_size\'][1]\n        end_h = start_h + param[\'corp_size\'][1]\n    return result_group\n\n\ndef parse_multi_img(image_bytes, param_group):\n    img_bytes = image_bytes[0]\n    image_arr = np.array(Pil_Image.open(io.BytesIO(img_bytes)).convert(\'RGB\'))\n    if len(image_arr.shape) == 3:\n        image_arr = cv2.cvtColor(image_arr, cv2.COLOR_BGR2RGB)\n    # image_arr = np.fromstring(img_bytes, np.uint8)\n    # print(image_arr.shape)\n    image_arr = image_arr.swapaxes(0, 1)\n    group = []\n    for p in param_group:\n        pos_ranges = coord_calc(p, True, True)\n        for pos_range in pos_ranges:\n            corp_arr = image_arr[pos_range[0][0]: pos_range[0][1], pos_range[1][0]: pos_range[1][1]]\n            corp_arr = cv2.imencode(\'.png\', np.swapaxes(corp_arr, 0, 1))[1]\n            corp_bytes = bytes(bytearray(corp_arr))\n            group.append(corp_bytes)\n    return group\n\n\ndef get_coordinate(label: str, param_group, title_index=None):\n    if title_index is None:\n        title_index = [0]\n    param = param_group[-1]\n    coord_map = coord_calc(param, is_range=False, is_integer=True)\n    index_group = get_pair_index(label=label, title_index=title_index)\n    return [coord_map[i] for i in index_group]\n\n\ndef get_pair_index(label: str, title_index=None):\n    if title_index is None:\n        title_index = [0]\n    max_index = max(title_index)\n\n    label_group = label.split(\',\')\n    titles = [label_group[i] for i in title_index]\n\n    index_group = []\n    for title in titles:\n        for i, item in enumerate(label_group[max_index+1:]):\n            if item == title:\n                index_group.append(i)\n        index_group = [i for i in index_group]\n    return index_group\n\n\nif __name__ == \'__main__\':\n    import os\n    import hashlib\n    root_dir = r""H:\\Task\\Trains\\d111_Trains""\n    target_dir = r""F:\\1q2""\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    _param_group = [\n        {\n          ""start_pos"": [20, 50],\n          ""interval_size"": [20, 20],\n          ""corp_num"": [4, 2],\n          ""corp_size"": [60, 60]\n        }\n    ]\n    for name in os.listdir(root_dir):\n        path = os.path.join(root_dir, name)\n        with open(path, ""rb"") as f:\n            file_bytes = [f.read()]\n        group = parse_multi_img(file_bytes, _param_group)\n        for b in group:\n            tag = hashlib.md5(b).hexdigest()\n            p = os.path.join(target_dir, ""{}.png"".format(tag))\n            with open(p, ""wb"") as f:\n                f.write(b)'"
middleware/impl/gif_frames.py,0,"b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>\n\nimport cv2\nimport numpy as np\nfrom PIL import ImageSequence\n\n\ndef split_frames(image_obj, need_frame=None):\n    image_seq = ImageSequence.all_frames(image_obj)\n    image_arr_last = [np.asarray(image_seq[-1])] if -1 in need_frame and len(need_frame) > 1 else []\n    image_arr = [np.asarray(item) for i, item in enumerate(image_seq) if (i in need_frame or need_frame == [-1])]\n    image_arr += image_arr_last\n    return image_arr\n\n\ndef concat_arr(img_arr):\n    if len(img_arr) < 2:\n        return img_arr[0]\n    all_slice = img_arr[0]\n    for im_slice in img_arr[1:]:\n        all_slice = np.concatenate((all_slice, im_slice), axis=1)\n    return all_slice\n\n\ndef numpy_to_bytes(numpy_arr):\n    cv_img = cv2.imencode(\'.png\', numpy_arr)[1]\n    img_bytes = bytes(bytearray(cv_img))\n    return img_bytes\n\n\ndef concat_frames(image_obj, need_frame=None):\n    if not need_frame:\n        need_frame = [0]\n    img_arr = split_frames(image_obj, need_frame)\n    img_arr = concat_arr(img_arr)\n    return img_arr\n\n\ndef blend_arr(img_arr):\n    if len(img_arr) < 2:\n        return img_arr[0]\n    all_slice = img_arr[0]\n    for im_slice in img_arr[1:]:\n        all_slice = cv2.addWeighted(all_slice, 0.5, im_slice, 0.5, 0)\n    all_slice = cv2.equalizeHist(all_slice)\n    return all_slice\n\n\ndef blend_frame(image_obj, need_frame=None):\n    if not need_frame:\n        need_frame = [-1]\n    img_arr = split_frames(image_obj, need_frame)\n    img_arr = blend_arr(img_arr)\n    return img_arr\n\n\nif __name__ == ""__main__"":\n    pass'"
sdk/onnx/__init__.py,0,b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>'
sdk/onnx/sdk.py,0,"b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>\nimport io\nimport os\nimport pickle\nimport cv2\nimport time\nimport yaml\nimport binascii\nimport numpy as np\nimport PIL.Image as PIL_Image\nfrom enum import Enum, unique\nimport onnxruntime as ort\n\nSPACE_TOKEN = [\'\']\nNUMBER = [\'0\', \'1\', \'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\']\nALPHA_UPPER = [\'A\', \'B\', \'C\', \'D\', \'E\', \'F\', \'G\', \'H\', \'I\', \'J\', \'K\', \'L\', \'M\', \'N\', \'O\', \'P\', \'Q\', \'R\', \'S\', \'T\', \'U\',\n               \'V\', \'W\', \'X\', \'Y\', \'Z\']\nALPHA_LOWER = [\'a\', \'b\', \'c\', \'d\', \'e\', \'f\', \'g\', \'h\', \'i\', \'j\', \'k\', \'l\', \'m\', \'n\', \'o\', \'p\', \'q\', \'r\', \'s\', \'t\', \'u\',\n               \'v\', \'w\', \'x\', \'y\', \'z\']\nARITHMETIC = [\'(\', \')\', \'+\', \'-\', \'\xc3\x97\', \'\xc3\xb7\', \'=\']\nCHINESE_3500 = [\n    \'\xe4\xb8\x80\', \'\xe4\xb9\x99\', \'\xe4\xba\x8c\', \'\xe5\x8d\x81\', \'\xe4\xb8\x81\', \'\xe5\x8e\x82\', \'\xe4\xb8\x83\', \'\xe5\x8d\x9c\', \'\xe4\xba\xba\', \'\xe5\x85\xa5\', \'\xe5\x85\xab\', \'\xe4\xb9\x9d\', \'\xe5\x87\xa0\', \'\xe5\x84\xbf\', \'\xe4\xba\x86\', \'\xe5\x8a\x9b\', \'\xe4\xb9\x83\', \'\xe5\x88\x80\', \'\xe5\x8f\x88\', \'\xe4\xb8\x89\',\n    \'\xe4\xba\x8e\', \'\xe5\xb9\xb2\', \'\xe4\xba\x8f\', \'\xe5\xa3\xab\', \'\xe5\xb7\xa5\', \'\xe5\x9c\x9f\', \'\xe6\x89\x8d\', \'\xe5\xaf\xb8\', \'\xe4\xb8\x8b\', \'\xe5\xa4\xa7\', \'\xe4\xb8\x88\', \'\xe4\xb8\x8e\', \'\xe4\xb8\x87\', \'\xe4\xb8\x8a\', \'\xe5\xb0\x8f\', \'\xe5\x8f\xa3\', \'\xe5\xb7\xbe\', \'\xe5\xb1\xb1\', \'\xe5\x8d\x83\', \'\xe4\xb9\x9e\',\n    \'\xe5\xb7\x9d\', \'\xe4\xba\xbf\', \'\xe4\xb8\xaa\', \'\xe5\x8b\xba\', \'\xe4\xb9\x85\', \'\xe5\x87\xa1\', \'\xe5\x8f\x8a\', \'\xe5\xa4\x95\', \'\xe4\xb8\xb8\', \'\xe4\xb9\x88\', \'\xe5\xb9\xbf\', \'\xe4\xba\xa1\', \'\xe9\x97\xa8\', \'\xe4\xb9\x89\', \'\xe4\xb9\x8b\', \'\xe5\xb0\xb8\', \'\xe5\xbc\x93\', \'\xe5\xb7\xb1\', \'\xe5\xb7\xb2\', \'\xe5\xad\x90\',\n    \'\xe5\x8d\xab\', \'\xe4\xb9\x9f\', \'\xe5\xa5\xb3\', \'\xe9\xa3\x9e\', \'\xe5\x88\x83\', \'\xe4\xb9\xa0\', \'\xe5\x8f\x89\', \'\xe9\xa9\xac\', \'\xe4\xb9\xa1\', \'\xe4\xb8\xb0\', \'\xe7\x8e\x8b\', \'\xe4\xba\x95\', \'\xe5\xbc\x80\', \'\xe5\xa4\xab\', \'\xe5\xa4\xa9\', \'\xe6\x97\xa0\', \'\xe5\x85\x83\', \'\xe4\xb8\x93\', \'\xe4\xba\x91\', \'\xe6\x89\x8e\',\n    \'\xe8\x89\xba\', \'\xe6\x9c\xa8\', \'\xe4\xba\x94\', \'\xe6\x94\xaf\', \'\xe5\x8e\x85\', \'\xe4\xb8\x8d\', \'\xe5\xa4\xaa\', \'\xe7\x8a\xac\', \'\xe5\x8c\xba\', \'\xe5\x8e\x86\', \'\xe5\xb0\xa4\', \'\xe5\x8f\x8b\', \'\xe5\x8c\xb9\', \'\xe8\xbd\xa6\', \'\xe5\xb7\xa8\', \'\xe7\x89\x99\', \'\xe5\xb1\xaf\', \'\xe6\xaf\x94\', \'\xe4\xba\x92\', \'\xe5\x88\x87\',\n    \'\xe7\x93\xa6\', \'\xe6\xad\xa2\', \'\xe5\xb0\x91\', \'\xe6\x97\xa5\', \'\xe4\xb8\xad\', \'\xe5\x86\x88\', \'\xe8\xb4\x9d\', \'\xe5\x86\x85\', \'\xe6\xb0\xb4\', \'\xe8\xa7\x81\', \'\xe5\x8d\x88\', \'\xe7\x89\x9b\', \'\xe6\x89\x8b\', \'\xe6\xaf\x9b\', \'\xe6\xb0\x94\', \'\xe5\x8d\x87\', \'\xe9\x95\xbf\', \'\xe4\xbb\x81\', \'\xe4\xbb\x80\', \'\xe7\x89\x87\',\n    \'\xe4\xbb\x86\', \'\xe5\x8c\x96\', \'\xe4\xbb\x87\', \'\xe5\xb8\x81\', \'\xe4\xbb\x8d\', \'\xe4\xbb\x85\', \'\xe6\x96\xa4\', \'\xe7\x88\xaa\', \'\xe5\x8f\x8d\', \'\xe4\xbb\x8b\', \'\xe7\x88\xb6\', \'\xe4\xbb\x8e\', \'\xe4\xbb\x8a\', \'\xe5\x87\xb6\', \'\xe5\x88\x86\', \'\xe4\xb9\x8f\', \'\xe5\x85\xac\', \'\xe4\xbb\x93\', \'\xe6\x9c\x88\', \'\xe6\xb0\x8f\',\n    \'\xe5\x8b\xbf\', \'\xe6\xac\xa0\', \'\xe9\xa3\x8e\', \'\xe4\xb8\xb9\', \'\xe5\x8c\x80\', \'\xe4\xb9\x8c\', \'\xe5\x87\xa4\', \'\xe5\x8b\xbe\', \'\xe6\x96\x87\', \'\xe5\x85\xad\', \'\xe6\x96\xb9\', \'\xe7\x81\xab\', \'\xe4\xb8\xba\', \'\xe6\x96\x97\', \'\xe5\xbf\x86\', \'\xe8\xae\xa2\', \'\xe8\xae\xa1\', \'\xe6\x88\xb7\', \'\xe8\xae\xa4\', \'\xe5\xbf\x83\',\n    \'\xe5\xb0\xba\', \'\xe5\xbc\x95\', \'\xe4\xb8\x91\', \'\xe5\xb7\xb4\', \'\xe5\xad\x94\', \'\xe9\x98\x9f\', \'\xe5\x8a\x9e\', \'\xe4\xbb\xa5\', \'\xe5\x85\x81\', \'\xe4\xba\x88\', \'\xe5\x8a\x9d\', \'\xe5\x8f\x8c\', \'\xe4\xb9\xa6\', \'\xe5\xb9\xbb\', \'\xe7\x8e\x89\', \'\xe5\x88\x8a\', \'\xe7\xa4\xba\', \'\xe6\x9c\xab\', \'\xe6\x9c\xaa\', \'\xe5\x87\xbb\',\n    \'\xe6\x89\x93\', \'\xe5\xb7\xa7\', \'\xe6\xad\xa3\', \'\xe6\x89\x91\', \'\xe6\x89\x92\', \'\xe5\x8a\x9f\', \'\xe6\x89\x94\', \'\xe5\x8e\xbb\', \'\xe7\x94\x98\', \'\xe4\xb8\x96\', \'\xe5\x8f\xa4\', \'\xe8\x8a\x82\', \'\xe6\x9c\xac\', \'\xe6\x9c\xaf\', \'\xe5\x8f\xaf\', \'\xe4\xb8\x99\', \'\xe5\xb7\xa6\', \'\xe5\x8e\x89\', \'\xe5\x8f\xb3\', \'\xe7\x9f\xb3\',\n    \'\xe5\xb8\x83\', \'\xe9\xbe\x99\', \'\xe5\xb9\xb3\', \'\xe7\x81\xad\', \'\xe8\xbd\xa7\', \'\xe4\xb8\x9c\', \'\xe5\x8d\xa1\', \'\xe5\x8c\x97\', \'\xe5\x8d\xa0\', \'\xe4\xb8\x9a\', \'\xe6\x97\xa7\', \'\xe5\xb8\x85\', \'\xe5\xbd\x92\', \'\xe4\xb8\x94\', \'\xe6\x97\xa6\', \'\xe7\x9b\xae\', \'\xe5\x8f\xb6\', \'\xe7\x94\xb2\', \'\xe7\x94\xb3\', \'\xe5\x8f\xae\',\n    \'\xe7\x94\xb5\', \'\xe5\x8f\xb7\', \'\xe7\x94\xb0\', \'\xe7\x94\xb1\', \'\xe5\x8f\xb2\', \'\xe5\x8f\xaa\', \'\xe5\xa4\xae\', \'\xe5\x85\x84\', \'\xe5\x8f\xbc\', \'\xe5\x8f\xab\', \'\xe5\x8f\xa6\', \'\xe5\x8f\xa8\', \'\xe5\x8f\xb9\', \'\xe5\x9b\x9b\', \'\xe7\x94\x9f\', \'\xe5\xa4\xb1\', \'\xe7\xa6\xbe\', \'\xe4\xb8\x98\', \'\xe4\xbb\x98\', \'\xe4\xbb\x97\',\n    \'\xe4\xbb\xa3\', \'\xe4\xbb\x99\', \'\xe4\xbb\xac\', \'\xe4\xbb\xaa\', \'\xe7\x99\xbd\', \'\xe4\xbb\x94\', \'\xe4\xbb\x96\', \'\xe6\x96\xa5\', \'\xe7\x93\x9c\', \'\xe4\xb9\x8e\', \'\xe4\xb8\x9b\', \'\xe4\xbb\xa4\', \'\xe7\x94\xa8\', \'\xe7\x94\xa9\', \'\xe5\x8d\xb0\', \'\xe4\xb9\x90\', \'\xe5\x8f\xa5\', \'\xe5\x8c\x86\', \'\xe5\x86\x8c\', \'\xe7\x8a\xaf\',\n    \'\xe5\xa4\x96\', \'\xe5\xa4\x84\', \'\xe5\x86\xac\', \'\xe9\xb8\x9f\', \'\xe5\x8a\xa1\', \'\xe5\x8c\x85\', \'\xe9\xa5\xa5\', \'\xe4\xb8\xbb\', \'\xe5\xb8\x82\', \'\xe7\xab\x8b\', \'\xe9\x97\xaa\', \'\xe5\x85\xb0\', \'\xe5\x8d\x8a\', \'\xe6\xb1\x81\', \'\xe6\xb1\x87\', \'\xe5\xa4\xb4\', \'\xe6\xb1\x89\', \'\xe5\xae\x81\', \'\xe7\xa9\xb4\', \'\xe5\xae\x83\',\n    \'\xe8\xae\xa8\', \'\xe5\x86\x99\', \'\xe8\xae\xa9\', \'\xe7\xa4\xbc\', \'\xe8\xae\xad\', \'\xe5\xbf\x85\', \'\xe8\xae\xae\', \'\xe8\xae\xaf\', \'\xe8\xae\xb0\', \'\xe6\xb0\xb8\', \'\xe5\x8f\xb8\', \'\xe5\xb0\xbc\', \'\xe6\xb0\x91\', \'\xe5\x87\xba\', \'\xe8\xbe\xbd\', \'\xe5\xa5\xb6\', \'\xe5\xa5\xb4\', \'\xe5\x8a\xa0\', \'\xe5\x8f\xac\', \'\xe7\x9a\xae\',\n    \'\xe8\xbe\xb9\', \'\xe5\x8f\x91\', \'\xe5\xad\x95\', \'\xe5\x9c\xa3\', \'\xe5\xaf\xb9\', \'\xe5\x8f\xb0\', \'\xe7\x9f\x9b\', \'\xe7\xba\xa0\', \'\xe6\xaf\x8d\', \'\xe5\xb9\xbc\', \'\xe4\xb8\x9d\', \'\xe5\xbc\x8f\', \'\xe5\x88\x91\', \'\xe5\x8a\xa8\', \'\xe6\x89\x9b\', \'\xe5\xaf\xba\', \'\xe5\x90\x89\', \'\xe6\x89\xa3\', \'\xe8\x80\x83\', \'\xe6\x89\x98\',\n    \'\xe8\x80\x81\', \'\xe6\x89\xa7\', \'\xe5\xb7\xa9\', \'\xe5\x9c\xbe\', \'\xe6\x89\xa9\', \'\xe6\x89\xab\', \'\xe5\x9c\xb0\', \'\xe6\x89\xac\', \'\xe5\x9c\xba\', \'\xe8\x80\xb3\', \'\xe5\x85\xb1\', \'\xe8\x8a\x92\', \'\xe4\xba\x9a\', \'\xe8\x8a\x9d\', \'\xe6\x9c\xbd\', \'\xe6\x9c\xb4\', \'\xe6\x9c\xba\', \'\xe6\x9d\x83\', \'\xe8\xbf\x87\', \'\xe8\x87\xa3\',\n    \'\xe5\x86\x8d\', \'\xe5\x8d\x8f\', \'\xe8\xa5\xbf\', \'\xe5\x8e\x8b\', \'\xe5\x8e\x8c\', \'\xe5\x9c\xa8\', \'\xe6\x9c\x89\', \'\xe7\x99\xbe\', \'\xe5\xad\x98\', \'\xe8\x80\x8c\', \'\xe9\xa1\xb5\', \'\xe5\x8c\xa0\', \'\xe5\xa4\xb8\', \'\xe5\xa4\xba\', \'\xe7\x81\xb0\', \'\xe8\xbe\xbe\', \'\xe5\x88\x97\', \'\xe6\xad\xbb\', \'\xe6\x88\x90\', \'\xe5\xa4\xb9\',\n    \'\xe8\xbd\xa8\', \'\xe9\x82\xaa\', \'\xe5\x88\x92\', \'\xe8\xbf\x88\', \'\xe6\xaf\x95\', \'\xe8\x87\xb3\', \'\xe6\xad\xa4\', \'\xe8\xb4\x9e\', \'\xe5\xb8\x88\', \'\xe5\xb0\x98\', \'\xe5\xb0\x96\', \'\xe5\x8a\xa3\', \'\xe5\x85\x89\', \'\xe5\xbd\x93\', \'\xe6\x97\xa9\', \'\xe5\x90\x90\', \'\xe5\x90\x93\', \'\xe8\x99\xab\', \'\xe6\x9b\xb2\', \'\xe5\x9b\xa2\',\n    \'\xe5\x90\x8c\', \'\xe5\x90\x8a\', \'\xe5\x90\x83\', \'\xe5\x9b\xa0\', \'\xe5\x90\xb8\', \'\xe5\x90\x97\', \'\xe5\xb1\xbf\', \'\xe5\xb8\x86\', \'\xe5\xb2\x81\', \'\xe5\x9b\x9e\', \'\xe5\xb2\x82\', \'\xe5\x88\x9a\', \'\xe5\x88\x99\', \'\xe8\x82\x89\', \'\xe7\xbd\x91\', \'\xe5\xb9\xb4\', \'\xe6\x9c\xb1\', \'\xe5\x85\x88\', \'\xe4\xb8\xa2\', \'\xe8\x88\x8c\',\n    \'\xe7\xab\xb9\', \'\xe8\xbf\x81\', \'\xe4\xb9\x94\', \'\xe4\xbc\x9f\', \'\xe4\xbc\xa0\', \'\xe4\xb9\x92\', \'\xe4\xb9\x93\', \'\xe4\xbc\x91\', \'\xe4\xbc\x8d\', \'\xe4\xbc\x8f\', \'\xe4\xbc\x98\', \'\xe4\xbc\x90\', \'\xe5\xbb\xb6\', \'\xe4\xbb\xb6\', \'\xe4\xbb\xbb\', \'\xe4\xbc\xa4\', \'\xe4\xbb\xb7\', \'\xe4\xbb\xbd\', \'\xe5\x8d\x8e\', \'\xe4\xbb\xb0\',\n    \'\xe4\xbb\xbf\', \'\xe4\xbc\x99\', \'\xe4\xbc\xaa\', \'\xe8\x87\xaa\', \'\xe8\xa1\x80\', \'\xe5\x90\x91\', \'\xe4\xbc\xbc\', \'\xe5\x90\x8e\', \'\xe8\xa1\x8c\', \'\xe8\x88\x9f\', \'\xe5\x85\xa8\', \'\xe4\xbc\x9a\', \'\xe6\x9d\x80\', \'\xe5\x90\x88\', \'\xe5\x85\x86\', \'\xe4\xbc\x81\', \'\xe4\xbc\x97\', \'\xe7\x88\xb7\', \'\xe4\xbc\x9e\', \'\xe5\x88\x9b\',\n    \'\xe8\x82\x8c\', \'\xe6\x9c\xb5\', \'\xe6\x9d\x82\', \'\xe5\x8d\xb1\', \'\xe6\x97\xac\', \'\xe6\x97\xa8\', \'\xe8\xb4\x9f\', \'\xe5\x90\x84\', \'\xe5\x90\x8d\', \'\xe5\xa4\x9a\', \'\xe4\xba\x89\', \'\xe8\x89\xb2\', \'\xe5\xa3\xae\', \'\xe5\x86\xb2\', \'\xe5\x86\xb0\', \'\xe5\xba\x84\', \'\xe5\xba\x86\', \'\xe4\xba\xa6\', \'\xe5\x88\x98\', \'\xe9\xbd\x90\',\n    \'\xe4\xba\xa4\', \'\xe6\xac\xa1\', \'\xe8\xa1\xa3\', \'\xe4\xba\xa7\', \'\xe5\x86\xb3\', \'\xe5\x85\x85\', \'\xe5\xa6\x84\', \'\xe9\x97\xad\', \'\xe9\x97\xae\', \'\xe9\x97\xaf\', \'\xe7\xbe\x8a\', \'\xe5\xb9\xb6\', \'\xe5\x85\xb3\', \'\xe7\xb1\xb3\', \'\xe7\x81\xaf\', \'\xe5\xb7\x9e\', \'\xe6\xb1\x97\', \'\xe6\xb1\xa1\', \'\xe6\xb1\x9f\', \'\xe6\xb1\xa0\',\n    \'\xe6\xb1\xa4\', \'\xe5\xbf\x99\', \'\xe5\x85\xb4\', \'\xe5\xae\x87\', \'\xe5\xae\x88\', \'\xe5\xae\x85\', \'\xe5\xad\x97\', \'\xe5\xae\x89\', \'\xe8\xae\xb2\', \'\xe5\x86\x9b\', \'\xe8\xae\xb8\', \'\xe8\xae\xba\', \'\xe5\x86\x9c\', \'\xe8\xae\xbd\', \'\xe8\xae\xbe\', \'\xe8\xae\xbf\', \'\xe5\xaf\xbb\', \'\xe9\x82\xa3\', \'\xe8\xbf\x85\', \'\xe5\xb0\xbd\',\n    \'\xe5\xaf\xbc\', \'\xe5\xbc\x82\', \'\xe5\xad\x99\', \'\xe9\x98\xb5\', \'\xe9\x98\xb3\', \'\xe6\x94\xb6\', \'\xe9\x98\xb6\', \'\xe9\x98\xb4\', \'\xe9\x98\xb2\', \'\xe5\xa5\xb8\', \'\xe5\xa6\x82\', \'\xe5\xa6\x87\', \'\xe5\xa5\xbd\', \'\xe5\xa5\xb9\', \'\xe5\xa6\x88\', \'\xe6\x88\x8f\', \'\xe7\xbe\xbd\', \'\xe8\xa7\x82\', \'\xe6\xac\xa2\', \'\xe4\xb9\xb0\',\n    \'\xe7\xba\xa2\', \'\xe7\xba\xa4\', \'\xe7\xba\xa7\', \'\xe7\xba\xa6\', \'\xe7\xba\xaa\', \'\xe9\xa9\xb0\', \'\xe5\xb7\xa1\', \'\xe5\xaf\xbf\', \'\xe5\xbc\x84\', \'\xe9\xba\xa6\', \'\xe5\xbd\xa2\', \'\xe8\xbf\x9b\', \'\xe6\x88\x92\', \'\xe5\x90\x9e\', \'\xe8\xbf\x9c\', \'\xe8\xbf\x9d\', \'\xe8\xbf\x90\', \'\xe6\x89\xb6\', \'\xe6\x8a\x9a\', \'\xe5\x9d\x9b\',\n    \'\xe6\x8a\x80\', \'\xe5\x9d\x8f\', \'\xe6\x89\xb0\', \'\xe6\x8b\x92\', \'\xe6\x89\xbe\', \'\xe6\x89\xb9\', \'\xe6\x89\xaf\', \'\xe5\x9d\x80\', \'\xe8\xb5\xb0\', \'\xe6\x8a\x84\', \'\xe5\x9d\x9d\', \'\xe8\xb4\xa1\', \'\xe6\x94\xbb\', \'\xe8\xb5\xa4\', \'\xe6\x8a\x98\', \'\xe6\x8a\x93\', \'\xe6\x89\xae\', \'\xe6\x8a\xa2\', \'\xe5\xad\x9d\', \'\xe5\x9d\x87\',\n    \'\xe6\x8a\x9b\', \'\xe6\x8a\x95\', \'\xe5\x9d\x9f\', \'\xe6\x8a\x97\', \'\xe5\x9d\x91\', \'\xe5\x9d\x8a\', \'\xe6\x8a\x96\', \'\xe6\x8a\xa4\', \'\xe5\xa3\xb3\', \'\xe5\xbf\x97\', \'\xe6\x89\xad\', \'\xe5\x9d\x97\', \'\xe5\xa3\xb0\', \'\xe6\x8a\x8a\', \'\xe6\x8a\xa5\', \'\xe5\x8d\xb4\', \'\xe5\x8a\xab\', \'\xe8\x8a\xbd\', \'\xe8\x8a\xb1\', \'\xe8\x8a\xb9\',\n    \'\xe8\x8a\xac\', \'\xe8\x8b\x8d\', \'\xe8\x8a\xb3\', \'\xe4\xb8\xa5\', \'\xe8\x8a\xa6\', \'\xe5\x8a\xb3\', \'\xe5\x85\x8b\', \'\xe8\x8b\x8f\', \'\xe6\x9d\x86\', \'\xe6\x9d\xa0\', \'\xe6\x9d\x9c\', \'\xe6\x9d\x90\', \'\xe6\x9d\x91\', \'\xe6\x9d\x8f\', \'\xe6\x9e\x81\', \'\xe6\x9d\x8e\', \'\xe6\x9d\xa8\', \'\xe6\xb1\x82\', \'\xe6\x9b\xb4\', \'\xe6\x9d\x9f\',\n    \'\xe8\xb1\x86\', \'\xe4\xb8\xa4\', \'\xe4\xb8\xbd\', \'\xe5\x8c\xbb\', \'\xe8\xbe\xb0\', \'\xe5\x8a\xb1\', \'\xe5\x90\xa6\', \'\xe8\xbf\x98\', \'\xe6\xad\xbc\', \'\xe6\x9d\xa5\', \'\xe8\xbf\x9e\', \'\xe6\xad\xa5\', \'\xe5\x9d\x9a\', \'\xe6\x97\xb1\', \'\xe7\x9b\xaf\', \'\xe5\x91\x88\', \'\xe6\x97\xb6\', \'\xe5\x90\xb4\', \'\xe5\x8a\xa9\', \'\xe5\x8e\xbf\',\n    \'\xe9\x87\x8c\', \'\xe5\x91\x86\', \'\xe5\x9b\xad\', \'\xe6\x97\xb7\', \'\xe5\x9b\xb4\', \'\xe5\x91\x80\', \'\xe5\x90\xa8\', \'\xe8\xb6\xb3\', \'\xe9\x82\xae\', \'\xe7\x94\xb7\', \'\xe5\x9b\xb0\', \'\xe5\x90\xb5\', \'\xe4\xb8\xb2\', \'\xe5\x91\x98\', \'\xe5\x90\xac\', \'\xe5\x90\xa9\', \'\xe5\x90\xb9\', \'\xe5\x91\x9c\', \'\xe5\x90\xa7\', \'\xe5\x90\xbc\',\n    \'\xe5\x88\xab\', \'\xe5\xb2\x97\', \'\xe5\xb8\x90\', \'\xe8\xb4\xa2\', \'\xe9\x92\x88\', \'\xe9\x92\x89\', \'\xe5\x91\x8a\', \'\xe6\x88\x91\', \'\xe4\xb9\xb1\', \'\xe5\x88\xa9\', \'\xe7\xa7\x83\', \'\xe7\xa7\x80\', \'\xe7\xa7\x81\', \'\xe6\xaf\x8f\', \'\xe5\x85\xb5\', \'\xe4\xbc\xb0\', \'\xe4\xbd\x93\', \'\xe4\xbd\x95\', \'\xe4\xbd\x86\', \'\xe4\xbc\xb8\',\n    \'\xe4\xbd\x9c\', \'\xe4\xbc\xaf\', \'\xe4\xbc\xb6\', \'\xe4\xbd\xa3\', \'\xe4\xbd\x8e\', \'\xe4\xbd\xa0\', \'\xe4\xbd\x8f\', \'\xe4\xbd\x8d\', \'\xe4\xbc\xb4\', \'\xe8\xba\xab\', \'\xe7\x9a\x82\', \'\xe4\xbd\x9b\', \'\xe8\xbf\x91\', \'\xe5\xbd\xbb\', \'\xe5\xbd\xb9\', \'\xe8\xbf\x94\', \'\xe4\xbd\x99\', \'\xe5\xb8\x8c\', \'\xe5\x9d\x90\', \'\xe8\xb0\xb7\',\n    \'\xe5\xa6\xa5\', \'\xe5\x90\xab\', \'\xe9\x82\xbb\', \'\xe5\xb2\x94\', \'\xe8\x82\x9d\', \'\xe8\x82\x9a\', \'\xe8\x82\xa0\', \'\xe9\xbe\x9f\', \'\xe5\x85\x8d\', \'\xe7\x8b\x82\', \'\xe7\x8a\xb9\', \'\xe8\xa7\x92\', \'\xe5\x88\xa0\', \'\xe6\x9d\xa1\', \'\xe5\x8d\xb5\', \'\xe5\xb2\x9b\', \'\xe8\xbf\x8e\', \'\xe9\xa5\xad\', \'\xe9\xa5\xae\', \'\xe7\xb3\xbb\',\n    \'\xe8\xa8\x80\', \'\xe5\x86\xbb\', \'\xe7\x8a\xb6\', \'\xe4\xba\xa9\', \'\xe5\x86\xb5\', \'\xe5\xba\x8a\', \'\xe5\xba\x93\', \'\xe7\x96\x97\', \'\xe5\xba\x94\', \'\xe5\x86\xb7\', \'\xe8\xbf\x99\', \'\xe5\xba\x8f\', \'\xe8\xbe\x9b\', \'\xe5\xbc\x83\', \'\xe5\x86\xb6\', \'\xe5\xbf\x98\', \'\xe9\x97\xb2\', \'\xe9\x97\xb4\', \'\xe9\x97\xb7\', \'\xe5\x88\xa4\',\n    \'\xe7\x81\xb6\', \'\xe7\x81\xbf\', \'\xe5\xbc\x9f\', \'\xe6\xb1\xaa\', \'\xe6\xb2\x99\', \'\xe6\xb1\xbd\', \'\xe6\xb2\x83\', \'\xe6\xb3\x9b\', \'\xe6\xb2\x9f\', \'\xe6\xb2\xa1\', \'\xe6\xb2\x88\', \'\xe6\xb2\x89\', \'\xe6\x80\x80\', \'\xe5\xbf\xa7\', \'\xe5\xbf\xab\', \'\xe5\xae\x8c\', \'\xe5\xae\x8b\', \'\xe5\xae\x8f\', \'\xe7\x89\xa2\', \'\xe7\xa9\xb6\',\n    \'\xe7\xa9\xb7\', \'\xe7\x81\xbe\', \'\xe8\x89\xaf\', \'\xe8\xaf\x81\', \'\xe5\x90\xaf\', \'\xe8\xaf\x84\', \'\xe8\xa1\xa5\', \'\xe5\x88\x9d\', \'\xe7\xa4\xbe\', \'\xe8\xaf\x86\', \'\xe8\xaf\x89\', \'\xe8\xaf\x8a\', \'\xe8\xaf\x8d\', \'\xe8\xaf\x91\', \'\xe5\x90\x9b\', \'\xe7\x81\xb5\', \'\xe5\x8d\xb3\', \'\xe5\xb1\x82\', \'\xe5\xb0\xbf\', \'\xe5\xb0\xbe\',\n    \'\xe8\xbf\x9f\', \'\xe5\xb1\x80\', \'\xe6\x94\xb9\', \'\xe5\xbc\xa0\', \'\xe5\xbf\x8c\', \'\xe9\x99\x85\', \'\xe9\x99\x86\', \'\xe9\x98\xbf\', \'\xe9\x99\x88\', \'\xe9\x98\xbb\', \'\xe9\x99\x84\', \'\xe5\xa6\x99\', \'\xe5\xa6\x96\', \'\xe5\xa6\xa8\', \'\xe5\x8a\xaa\', \'\xe5\xbf\x8d\', \'\xe5\x8a\xb2\', \'\xe9\xb8\xa1\', \'\xe9\xa9\xb1\', \'\xe7\xba\xaf\',\n    \'\xe7\xba\xb1\', \'\xe7\xba\xb3\', \'\xe7\xba\xb2\', \'\xe9\xa9\xb3\', \'\xe7\xba\xb5\', \'\xe7\xba\xb7\', \'\xe7\xba\xb8\', \'\xe7\xba\xb9\', \'\xe7\xba\xba\', \'\xe9\xa9\xb4\', \'\xe7\xba\xbd\', \'\xe5\xa5\x89\', \'\xe7\x8e\xa9\', \'\xe7\x8e\xaf\', \'\xe6\xad\xa6\', \'\xe9\x9d\x92\', \'\xe8\xb4\xa3\', \'\xe7\x8e\xb0\', \'\xe8\xa1\xa8\', \'\xe8\xa7\x84\',\n    \'\xe6\x8a\xb9\', \'\xe6\x8b\xa2\', \'\xe6\x8b\x94\', \'\xe6\x8b\xa3\', \'\xe6\x8b\x85\', \'\xe5\x9d\xa6\', \'\xe6\x8a\xbc\', \'\xe6\x8a\xbd\', \'\xe6\x8b\x90\', \'\xe6\x8b\x96\', \'\xe6\x8b\x8d\', \'\xe8\x80\x85\', \'\xe9\xa1\xb6\', \'\xe6\x8b\x86\', \'\xe6\x8b\xa5\', \'\xe6\x8a\xb5\', \'\xe6\x8b\x98\', \'\xe5\x8a\xbf\', \'\xe6\x8a\xb1\', \'\xe5\x9e\x83\',\n    \'\xe6\x8b\x89\', \'\xe6\x8b\xa6\', \'\xe6\x8b\x8c\', \'\xe5\xb9\xb8\', \'\xe6\x8b\x9b\', \'\xe5\x9d\xa1\', \'\xe6\x8a\xab\', \'\xe6\x8b\xa8\', \'\xe6\x8b\xa9\', \'\xe6\x8a\xac\', \'\xe5\x85\xb6\', \'\xe5\x8f\x96\', \'\xe8\x8b\xa6\', \'\xe8\x8b\xa5\', \'\xe8\x8c\x82\', \'\xe8\x8b\xb9\', \'\xe8\x8b\x97\', \'\xe8\x8b\xb1\', \'\xe8\x8c\x83\', \'\xe7\x9b\xb4\',\n    \'\xe8\x8c\x84\', \'\xe8\x8c\x8e\', \'\xe8\x8c\x85\', \'\xe6\x9e\x97\', \'\xe6\x9e\x9d\', \'\xe6\x9d\xaf\', \'\xe6\x9f\x9c\', \'\xe6\x9e\x90\', \'\xe6\x9d\xbf\', \'\xe6\x9d\xbe\', \'\xe6\x9e\xaa\', \'\xe6\x9e\x84\', \'\xe6\x9d\xb0\', \'\xe8\xbf\xb0\', \'\xe6\x9e\x95\', \'\xe4\xb8\xa7\', \'\xe6\x88\x96\', \'\xe7\x94\xbb\', \'\xe5\x8d\xa7\', \'\xe4\xba\x8b\',\n    \'\xe5\x88\xba\', \'\xe6\x9e\xa3\', \'\xe9\x9b\xa8\', \'\xe5\x8d\x96\', \'\xe7\x9f\xbf\', \'\xe7\xa0\x81\', \'\xe5\x8e\x95\', \'\xe5\xa5\x94\', \'\xe5\xa5\x87\', \'\xe5\xa5\x8b\', \'\xe6\x80\x81\', \'\xe6\xac\xa7\', \'\xe5\x9e\x84\', \'\xe5\xa6\xbb\', \'\xe8\xbd\xb0\', \'\xe9\xa1\xb7\', \'\xe8\xbd\xac\', \'\xe6\x96\xa9\', \'\xe8\xbd\xae\', \'\xe8\xbd\xaf\',\n    \'\xe5\x88\xb0\', \'\xe9\x9d\x9e\', \'\xe5\x8f\x94\', \'\xe8\x82\xaf\', \'\xe9\xbd\xbf\', \'\xe4\xba\x9b\', \'\xe8\x99\x8e\', \'\xe8\x99\x8f\', \'\xe8\x82\xbe\', \'\xe8\xb4\xa4\', \'\xe5\xb0\x9a\', \'\xe6\x97\xba\', \'\xe5\x85\xb7\', \'\xe6\x9e\x9c\', \'\xe5\x91\xb3\', \'\xe6\x98\x86\', \'\xe5\x9b\xbd\', \'\xe6\x98\x8c\', \'\xe7\x95\x85\', \'\xe6\x98\x8e\',\n    \'\xe6\x98\x93\', \'\xe6\x98\x82\', \'\xe5\x85\xb8\', \'\xe5\x9b\xba\', \'\xe5\xbf\xa0\', \'\xe5\x92\x90\', \'\xe5\x91\xbc\', \'\xe9\xb8\xa3\', \'\xe5\x92\x8f\', \'\xe5\x91\xa2\', \'\xe5\xb2\xb8\', \'\xe5\xb2\xa9\', \'\xe5\xb8\x96\', \'\xe7\xbd\x97\', \'\xe5\xb8\x9c\', \'\xe5\xb2\xad\', \'\xe5\x87\xaf\', \'\xe8\xb4\xa5\', \'\xe8\xb4\xa9\', \'\xe8\xb4\xad\',\n    \'\xe5\x9b\xbe\', \'\xe9\x92\x93\', \'\xe5\x88\xb6\', \'\xe7\x9f\xa5\', \'\xe5\x9e\x82\', \'\xe7\x89\xa7\', \'\xe7\x89\xa9\', \'\xe4\xb9\x96\', \'\xe5\x88\xae\', \'\xe7\xa7\x86\', \'\xe5\x92\x8c\', \'\xe5\xad\xa3\', \'\xe5\xa7\x94\', \'\xe4\xbd\xb3\', \'\xe4\xbe\x8d\', \'\xe4\xbe\x9b\', \'\xe4\xbd\xbf\', \'\xe4\xbe\x8b\', \'\xe7\x89\x88\', \'\xe4\xbe\x84\',\n    \'\xe4\xbe\xa6\', \'\xe4\xbe\xa7\', \'\xe5\x87\xad\', \'\xe4\xbe\xa8\', \'\xe4\xbd\xa9\', \'\xe8\xb4\xa7\', \'\xe4\xbe\x9d\', \'\xe7\x9a\x84\', \'\xe8\xbf\xab\', \'\xe8\xb4\xa8\', \'\xe6\xac\xa3\', \'\xe5\xbe\x81\', \'\xe5\xbe\x80\', \'\xe7\x88\xac\', \'\xe5\xbd\xbc\', \'\xe5\xbe\x84\', \'\xe6\x89\x80\', \'\xe8\x88\x8d\', \'\xe9\x87\x91\', \'\xe5\x91\xbd\',\n    \'\xe6\x96\xa7\', \'\xe7\x88\xb8\', \'\xe9\x87\x87\', \'\xe5\x8f\x97\', \'\xe4\xb9\xb3\', \'\xe8\xb4\xaa\', \'\xe5\xbf\xb5\', \'\xe8\xb4\xab\', \'\xe8\x82\xa4\', \'\xe8\x82\xba\', \'\xe8\x82\xa2\', \'\xe8\x82\xbf\', \'\xe8\x83\x80\', \'\xe6\x9c\x8b\', \'\xe8\x82\xa1\', \'\xe8\x82\xa5\', \'\xe6\x9c\x8d\', \'\xe8\x83\x81\', \'\xe5\x91\xa8\', \'\xe6\x98\x8f\',\n    \'\xe9\xb1\xbc\', \'\xe5\x85\x94\', \'\xe7\x8b\x90\', \'\xe5\xbf\xbd\', \'\xe7\x8b\x97\', \'\xe5\xa4\x87\', \'\xe9\xa5\xb0\', \'\xe9\xa5\xb1\', \'\xe9\xa5\xb2\', \'\xe5\x8f\x98\', \'\xe4\xba\xac\', \'\xe4\xba\xab\', \'\xe5\xba\x97\', \'\xe5\xa4\x9c\', \'\xe5\xba\x99\', \'\xe5\xba\x9c\', \'\xe5\xba\x95\', \'\xe5\x89\x82\', \'\xe9\x83\x8a\', \'\xe5\xba\x9f\',\n    \'\xe5\x87\x80\', \'\xe7\x9b\xb2\', \'\xe6\x94\xbe\', \'\xe5\x88\xbb\', \'\xe8\x82\xb2\', \'\xe9\x97\xb8\', \'\xe9\x97\xb9\', \'\xe9\x83\x91\', \'\xe5\x88\xb8\', \'\xe5\x8d\xb7\', \'\xe5\x8d\x95\', \'\xe7\x82\x92\', \'\xe7\x82\x8a\', \'\xe7\x82\x95\', \'\xe7\x82\x8e\', \'\xe7\x82\x89\', \'\xe6\xb2\xab\', \'\xe6\xb5\x85\', \'\xe6\xb3\x95\', \'\xe6\xb3\x84\',\n    \'\xe6\xb2\xb3\', \'\xe6\xb2\xbe\', \'\xe6\xb3\xaa\', \'\xe6\xb2\xb9\', \'\xe6\xb3\x8a\', \'\xe6\xb2\xbf\', \'\xe6\xb3\xa1\', \'\xe6\xb3\xa8\', \'\xe6\xb3\xbb\', \'\xe6\xb3\xb3\', \'\xe6\xb3\xa5\', \'\xe6\xb2\xb8\', \'\xe6\xb3\xa2\', \'\xe6\xb3\xbc\', \'\xe6\xb3\xbd\', \'\xe6\xb2\xbb\', \'\xe6\x80\x96\', \'\xe6\x80\xa7\', \'\xe6\x80\x95\', \'\xe6\x80\x9c\',\n    \'\xe6\x80\xaa\', \'\xe5\xad\xa6\', \'\xe5\xae\x9d\', \'\xe5\xae\x97\', \'\xe5\xae\x9a\', \'\xe5\xae\x9c\', \'\xe5\xae\xa1\', \'\xe5\xae\x99\', \'\xe5\xae\x98\', \'\xe7\xa9\xba\', \'\xe5\xb8\x98\', \'\xe5\xae\x9e\', \'\xe8\xaf\x95\', \'\xe9\x83\x8e\', \'\xe8\xaf\x97\', \'\xe8\x82\xa9\', \'\xe6\x88\xbf\', \'\xe8\xaf\x9a\', \'\xe8\xa1\xac\', \'\xe8\xa1\xab\',\n    \'\xe8\xa7\x86\', \'\xe8\xaf\x9d\', \'\xe8\xaf\x9e\', \'\xe8\xaf\xa2\', \'\xe8\xaf\xa5\', \'\xe8\xaf\xa6\', \'\xe5\xbb\xba\', \'\xe8\x82\x83\', \'\xe5\xbd\x95\', \'\xe9\x9a\xb6\', \'\xe5\xb1\x85\', \'\xe5\xb1\x8a\', \'\xe5\x88\xb7\', \'\xe5\xb1\x88\', \'\xe5\xbc\xa6\', \'\xe6\x89\xbf\', \'\xe5\xad\x9f\', \'\xe5\xad\xa4\', \'\xe9\x99\x95\', \'\xe9\x99\x8d\',\n    \'\xe9\x99\x90\', \'\xe5\xa6\xb9\', \'\xe5\xa7\x91\', \'\xe5\xa7\x90\', \'\xe5\xa7\x93\', \'\xe5\xa7\x8b\', \'\xe9\xa9\xbe\', \'\xe5\x8f\x82\', \'\xe8\x89\xb0\', \'\xe7\xba\xbf\', \'\xe7\xbb\x83\', \'\xe7\xbb\x84\', \'\xe7\xbb\x86\', \'\xe9\xa9\xb6\', \'\xe7\xbb\x87\', \'\xe7\xbb\x88\', \'\xe9\xa9\xbb\', \'\xe9\xa9\xbc\', \'\xe7\xbb\x8d\', \'\xe7\xbb\x8f\',\n    \'\xe8\xb4\xaf\', \'\xe5\xa5\x8f\', \'\xe6\x98\xa5\', \'\xe5\xb8\xae\', \'\xe7\x8f\x8d\', \'\xe7\x8e\xbb\', \'\xe6\xaf\x92\', \'\xe5\x9e\x8b\', \'\xe6\x8c\x82\', \'\xe5\xb0\x81\', \'\xe6\x8c\x81\', \'\xe9\xa1\xb9\', \'\xe5\x9e\xae\', \'\xe6\x8c\x8e\', \'\xe5\x9f\x8e\', \'\xe6\x8c\xa0\', \'\xe6\x94\xbf\', \'\xe8\xb5\xb4\', \'\xe8\xb5\xb5\', \'\xe6\x8c\xa1\',\n    \'\xe6\x8c\xba\', \'\xe6\x8b\xac\', \'\xe6\x8b\xb4\', \'\xe6\x8b\xbe\', \'\xe6\x8c\x91\', \'\xe6\x8c\x87\', \'\xe5\x9e\xab\', \'\xe6\x8c\xa3\', \'\xe6\x8c\xa4\', \'\xe6\x8b\xbc\', \'\xe6\x8c\x96\', \'\xe6\x8c\x89\', \'\xe6\x8c\xa5\', \'\xe6\x8c\xaa\', \'\xe6\x9f\x90\', \'\xe7\x94\x9a\', \'\xe9\x9d\xa9\', \'\xe8\x8d\x90\', \'\xe5\xb7\xb7\', \'\xe5\xb8\xa6\',\n    \'\xe8\x8d\x89\', \'\xe8\x8c\xa7\', \'\xe8\x8c\xb6\', \'\xe8\x8d\x92\', \'\xe8\x8c\xab\', \'\xe8\x8d\xa1\', \'\xe8\x8d\xa3\', \'\xe6\x95\x85\', \'\xe8\x83\xa1\', \'\xe5\x8d\x97\', \'\xe8\x8d\xaf\', \'\xe6\xa0\x87\', \'\xe6\x9e\xaf\', \'\xe6\x9f\x84\', \'\xe6\xa0\x8b\', \'\xe7\x9b\xb8\', \'\xe6\x9f\xa5\', \'\xe6\x9f\x8f\', \'\xe6\x9f\xb3\', \'\xe6\x9f\xb1\',\n    \'\xe6\x9f\xbf\', \'\xe6\xa0\x8f\', \'\xe6\xa0\x91\', \'\xe8\xa6\x81\', \'\xe5\x92\xb8\', \'\xe5\xa8\x81\', \'\xe6\xad\xaa\', \'\xe7\xa0\x94\', \'\xe7\xa0\x96\', \'\xe5\x8e\x98\', \'\xe5\x8e\x9a\', \'\xe7\xa0\x8c\', \'\xe7\xa0\x8d\', \'\xe9\x9d\xa2\', \'\xe8\x80\x90\', \'\xe8\x80\x8d\', \'\xe7\x89\xb5\', \'\xe6\xae\x8b\', \'\xe6\xae\x83\', \'\xe8\xbd\xbb\',\n    \'\xe9\xb8\xa6\', \'\xe7\x9a\x86\', \'\xe8\x83\x8c\', \'\xe6\x88\x98\', \'\xe7\x82\xb9\', \'\xe4\xb8\xb4\', \'\xe8\xa7\x88\', \'\xe7\xab\x96\', \'\xe7\x9c\x81\', \'\xe5\x89\x8a\', \'\xe5\xb0\x9d\', \'\xe6\x98\xaf\', \'\xe7\x9b\xbc\', \'\xe7\x9c\xa8\', \'\xe5\x93\x84\', \'\xe6\x98\xbe\', \'\xe5\x93\x91\', \'\xe5\x86\x92\', \'\xe6\x98\xa0\', \'\xe6\x98\x9f\',\n    \'\xe6\x98\xa8\', \'\xe7\x95\x8f\', \'\xe8\xb6\xb4\', \'\xe8\x83\x83\', \'\xe8\xb4\xb5\', \'\xe7\x95\x8c\', \'\xe8\x99\xb9\', \'\xe8\x99\xbe\', \'\xe8\x9a\x81\', \'\xe6\x80\x9d\', \'\xe8\x9a\x82\', \'\xe8\x99\xbd\', \'\xe5\x93\x81\', \'\xe5\x92\xbd\', \'\xe9\xaa\x82\', \'\xe5\x93\x97\', \'\xe5\x92\xb1\', \'\xe5\x93\x8d\', \'\xe5\x93\x88\', \'\xe5\x92\xac\',\n    \'\xe5\x92\xb3\', \'\xe5\x93\xaa\', \'\xe7\x82\xad\', \'\xe5\xb3\xa1\', \'\xe7\xbd\x9a\', \'\xe8\xb4\xb1\', \'\xe8\xb4\xb4\', \'\xe9\xaa\xa8\', \'\xe9\x92\x9e\', \'\xe9\x92\x9f\', \'\xe9\x92\xa2\', \'\xe9\x92\xa5\', \'\xe9\x92\xa9\', \'\xe5\x8d\xb8\', \'\xe7\xbc\xb8\', \'\xe6\x8b\x9c\', \'\xe7\x9c\x8b\', \'\xe7\x9f\xa9\', \'\xe6\x80\x8e\', \'\xe7\x89\xb2\',\n    \'\xe9\x80\x89\', \'\xe9\x80\x82\', \'\xe7\xa7\x92\', \'\xe9\xa6\x99\', \'\xe7\xa7\x8d\', \'\xe7\xa7\x8b\', \'\xe7\xa7\x91\', \'\xe9\x87\x8d\', \'\xe5\xa4\x8d\', \'\xe7\xab\xbf\', \'\xe6\xae\xb5\', \'\xe4\xbe\xbf\', \'\xe4\xbf\xa9\', \'\xe8\xb4\xb7\', \'\xe9\xa1\xba\', \'\xe4\xbf\xae\', \'\xe4\xbf\x9d\', \'\xe4\xbf\x83\', \'\xe4\xbe\xae\', \'\xe4\xbf\xad\',\n    \'\xe4\xbf\x97\', \'\xe4\xbf\x98\', \'\xe4\xbf\xa1\', \'\xe7\x9a\x87\', \'\xe6\xb3\x89\', \'\xe9\xac\xbc\', \'\xe4\xbe\xb5\', \'\xe8\xbf\xbd\', \'\xe4\xbf\x8a\', \'\xe7\x9b\xbe\', \'\xe5\xbe\x85\', \'\xe5\xbe\x8b\', \'\xe5\xbe\x88\', \'\xe9\xa1\xbb\', \'\xe5\x8f\x99\', \'\xe5\x89\x91\', \'\xe9\x80\x83\', \'\xe9\xa3\x9f\', \'\xe7\x9b\x86\', \'\xe8\x83\x86\',\n    \'\xe8\x83\x9c\', \'\xe8\x83\x9e\', \'\xe8\x83\x96\', \'\xe8\x84\x89\', \'\xe5\x8b\x89\', \'\xe7\x8b\xad\', \'\xe7\x8b\xae\', \'\xe7\x8b\xac\', \'\xe7\x8b\xa1\', \'\xe7\x8b\xb1\', \'\xe7\x8b\xa0\', \'\xe8\xb4\xb8\', \'\xe6\x80\xa8\', \'\xe6\x80\xa5\', \'\xe9\xa5\xb6\', \'\xe8\x9a\x80\', \'\xe9\xa5\xba\', \'\xe9\xa5\xbc\', \'\xe5\xbc\xaf\', \'\xe5\xb0\x86\',\n    \'\xe5\xa5\x96\', \'\xe5\x93\x80\', \'\xe4\xba\xad\', \'\xe4\xba\xae\', \'\xe5\xba\xa6\', \'\xe8\xbf\xb9\', \'\xe5\xba\xad\', \'\xe7\x96\xae\', \'\xe7\x96\xaf\', \'\xe7\x96\xab\', \'\xe7\x96\xa4\', \'\xe5\xa7\xbf\', \'\xe4\xba\xb2\', \'\xe9\x9f\xb3\', \'\xe5\xb8\x9d\', \'\xe6\x96\xbd\', \'\xe9\x97\xbb\', \'\xe9\x98\x80\', \'\xe9\x98\x81\', \'\xe5\xb7\xae\',\n    \'\xe5\x85\xbb\', \'\xe7\xbe\x8e\', \'\xe5\xa7\x9c\', \'\xe5\x8f\x9b\', \'\xe9\x80\x81\', \'\xe7\xb1\xbb\', \'\xe8\xbf\xb7\', \'\xe5\x89\x8d\', \'\xe9\xa6\x96\', \'\xe9\x80\x86\', \'\xe6\x80\xbb\', \'\xe7\x82\xbc\', \'\xe7\x82\xb8\', \'\xe7\x82\xae\', \'\xe7\x83\x82\', \'\xe5\x89\x83\', \'\xe6\xb4\x81\', \'\xe6\xb4\xaa\', \'\xe6\xb4\x92\', \'\xe6\xb5\x87\',\n    \'\xe6\xb5\x8a\', \'\xe6\xb4\x9e\', \'\xe6\xb5\x8b\', \'\xe6\xb4\x97\', \'\xe6\xb4\xbb\', \'\xe6\xb4\xbe\', \'\xe6\xb4\xbd\', \'\xe6\x9f\x93\', \'\xe6\xb5\x8e\', \'\xe6\xb4\x8b\', \'\xe6\xb4\xb2\', \'\xe6\xb5\x91\', \'\xe6\xb5\x93\', \'\xe6\xb4\xa5\', \'\xe6\x81\x92\', \'\xe6\x81\xa2\', \'\xe6\x81\xb0\', \'\xe6\x81\xbc\', \'\xe6\x81\xa8\', \'\xe4\xb8\xbe\',\n    \'\xe8\xa7\x89\', \'\xe5\xae\xa3\', \'\xe5\xae\xa4\', \'\xe5\xae\xab\', \'\xe5\xae\xaa\', \'\xe7\xaa\x81\', \'\xe7\xa9\xbf\', \'\xe7\xaa\x83\', \'\xe5\xae\xa2\', \'\xe5\x86\xa0\', \'\xe8\xaf\xad\', \'\xe6\x89\x81\', \'\xe8\xa2\x84\', \'\xe7\xa5\x96\', \'\xe7\xa5\x9e\', \'\xe7\xa5\x9d\', \'\xe8\xaf\xaf\', \'\xe8\xaf\xb1\', \'\xe8\xaf\xb4\', \'\xe8\xaf\xb5\',\n    \'\xe5\x9e\xa6\', \'\xe9\x80\x80\', \'\xe6\x97\xa2\', \'\xe5\xb1\x8b\', \'\xe6\x98\xbc\', \'\xe8\xb4\xb9\', \'\xe9\x99\xa1\', \'\xe7\x9c\x89\', \'\xe5\xad\xa9\', \'\xe9\x99\xa4\', \'\xe9\x99\xa9\', \'\xe9\x99\xa2\', \'\xe5\xa8\x83\', \'\xe5\xa7\xa5\', \'\xe5\xa7\xa8\', \'\xe5\xa7\xbb\', \'\xe5\xa8\x87\', \'\xe6\x80\x92\', \'\xe6\x9e\xb6\', \'\xe8\xb4\xba\',\n    \'\xe7\x9b\x88\', \'\xe5\x8b\x87\', \'\xe6\x80\xa0\', \'\xe6\x9f\x94\', \'\xe5\x9e\x92\', \'\xe7\xbb\x91\', \'\xe7\xbb\x92\', \'\xe7\xbb\x93\', \'\xe7\xbb\x95\', \'\xe9\xaa\x84\', \'\xe7\xbb\x98\', \'\xe7\xbb\x99\', \'\xe7\xbb\x9c\', \'\xe9\xaa\x86\', \'\xe7\xbb\x9d\', \'\xe7\xbb\x9e\', \'\xe7\xbb\x9f\', \'\xe8\x80\x95\', \'\xe8\x80\x97\', \'\xe8\x89\xb3\',\n    \'\xe6\xb3\xb0\', \'\xe7\x8f\xa0\', \'\xe7\x8f\xad\', \'\xe7\xb4\xa0\', \'\xe8\x9a\x95\', \'\xe9\xa1\xbd\', \'\xe7\x9b\x8f\', \'\xe5\x8c\xaa\', \'\xe6\x8d\x9e\', \'\xe6\xa0\xbd\', \'\xe6\x8d\x95\', \'\xe6\x8c\xaf\', \'\xe8\xbd\xbd\', \'\xe8\xb5\xb6\', \'\xe8\xb5\xb7\', \'\xe7\x9b\x90\', \'\xe6\x8d\x8e\', \'\xe6\x8d\x8f\', \'\xe5\x9f\x8b\', \'\xe6\x8d\x89\',\n    \'\xe6\x8d\x86\', \'\xe6\x8d\x90\', \'\xe6\x8d\x9f\', \'\xe9\x83\xbd\', \'\xe5\x93\xb2\', \'\xe9\x80\x9d\', \'\xe6\x8d\xa1\', \'\xe6\x8d\xa2\', \'\xe6\x8c\xbd\', \'\xe7\x83\xad\', \'\xe6\x81\x90\', \'\xe5\xa3\xb6\', \'\xe6\x8c\xa8\', \'\xe8\x80\xbb\', \'\xe8\x80\xbd\', \'\xe6\x81\xad\', \'\xe8\x8e\xb2\', \'\xe8\x8e\xab\', \'\xe8\x8d\xb7\', \'\xe8\x8e\xb7\',\n    \'\xe6\x99\x8b\', \'\xe6\x81\xb6\', \'\xe7\x9c\x9f\', \'\xe6\xa1\x86\', \'\xe6\xa1\x82\', \'\xe6\xa1\xa3\', \'\xe6\xa1\x90\', \'\xe6\xa0\xaa\', \'\xe6\xa1\xa5\', \'\xe6\xa1\x83\', \'\xe6\xa0\xbc\', \'\xe6\xa0\xa1\', \'\xe6\xa0\xb8\', \'\xe6\xa0\xb7\', \'\xe6\xa0\xb9\', \'\xe7\xb4\xa2\', \'\xe5\x93\xa5\', \'\xe9\x80\x9f\', \'\xe9\x80\x97\', \'\xe6\xa0\x97\',\n    \'\xe9\x85\x8d\', \'\xe7\xbf\x85\', \'\xe8\xbe\xb1\', \'\xe5\x94\x87\', \'\xe5\xa4\x8f\', \'\xe7\xa1\x80\', \'\xe7\xa0\xb4\', \'\xe5\x8e\x9f\', \'\xe5\xa5\x97\', \'\xe9\x80\x90\', \'\xe7\x83\x88\', \'\xe6\xae\x8a\', \'\xe9\xa1\xbe\', \'\xe8\xbd\xbf\', \'\xe8\xbe\x83\', \'\xe9\xa1\xbf\', \'\xe6\xaf\x99\', \'\xe8\x87\xb4\', \'\xe6\x9f\xb4\', \'\xe6\xa1\x8c\',\n    \'\xe8\x99\x91\', \'\xe7\x9b\x91\', \'\xe7\xb4\xa7\', \'\xe5\x85\x9a\', \'\xe6\x99\x92\', \'\xe7\x9c\xa0\', \'\xe6\x99\x93\', \'\xe9\xb8\xad\', \'\xe6\x99\x83\', \'\xe6\x99\x8c\', \'\xe6\x99\x95\', \'\xe8\x9a\x8a\', \'\xe5\x93\xa8\', \'\xe5\x93\xad\', \'\xe6\x81\xa9\', \'\xe5\x94\xa4\', \'\xe5\x95\x8a\', \'\xe5\x94\x89\', \'\xe7\xbd\xa2\', \'\xe5\xb3\xb0\',\n    \'\xe5\x9c\x86\', \'\xe8\xb4\xbc\', \'\xe8\xb4\xbf\', \'\xe9\x92\xb1\', \'\xe9\x92\xb3\', \'\xe9\x92\xbb\', \'\xe9\x93\x81\', \'\xe9\x93\x83\', \'\xe9\x93\x85\', \'\xe7\xbc\xba\', \'\xe6\xb0\xa7\', \'\xe7\x89\xb9\', \'\xe7\x89\xba\', \'\xe9\x80\xa0\', \'\xe4\xb9\x98\', \'\xe6\x95\x8c\', \'\xe7\xa7\xa4\', \'\xe7\xa7\x9f\', \'\xe7\xa7\xaf\', \'\xe7\xa7\xa7\',\n    \'\xe7\xa7\xa9\', \'\xe7\xa7\xb0\', \'\xe7\xa7\x98\', \'\xe9\x80\x8f\', \'\xe7\xac\x94\', \'\xe7\xac\x91\', \'\xe7\xac\x8b\', \'\xe5\x80\xba\', \'\xe5\x80\x9f\', \'\xe5\x80\xbc\', \'\xe5\x80\x9a\', \'\xe5\x80\xbe\', \'\xe5\x80\x92\', \'\xe5\x80\x98\', \'\xe4\xbf\xb1\', \'\xe5\x80\xa1\', \'\xe5\x80\x99\', \'\xe4\xbf\xaf\', \'\xe5\x80\x8d\', \'\xe5\x80\xa6\',\n    \'\xe5\x81\xa5\', \'\xe8\x87\xad\', \'\xe5\xb0\x84\', \'\xe8\xba\xac\', \'\xe6\x81\xaf\', \'\xe5\xbe\x92\', \'\xe5\xbe\x90\', \'\xe8\x88\xb0\', \'\xe8\x88\xb1\', \'\xe8\x88\xac\', \'\xe8\x88\xaa\', \'\xe9\x80\x94\', \'\xe6\x8b\xbf\', \'\xe7\x88\xb9\', \'\xe7\x88\xb1\', \'\xe9\xa2\x82\', \'\xe7\xbf\x81\', \'\xe8\x84\x86\', \'\xe8\x84\x82\', \'\xe8\x83\xb8\',\n    \'\xe8\x83\xb3\', \'\xe8\x84\x8f\', \'\xe8\x83\xb6\', \'\xe8\x84\x91\', \'\xe7\x8b\xb8\', \'\xe7\x8b\xbc\', \'\xe9\x80\xa2\', \'\xe7\x95\x99\', \'\xe7\x9a\xb1\', \'\xe9\xa5\xbf\', \'\xe6\x81\x8b\', \'\xe6\xa1\xa8\', \'\xe6\xb5\x86\', \'\xe8\xa1\xb0\', \'\xe9\xab\x98\', \'\xe5\xb8\xad\', \'\xe5\x87\x86\', \'\xe5\xba\xa7\', \'\xe8\x84\x8a\', \'\xe7\x97\x87\',\n    \'\xe7\x97\x85\', \'\xe7\x96\xbe\', \'\xe7\x96\xbc\', \'\xe7\x96\xb2\', \'\xe6\x95\x88\', \'\xe7\xa6\xbb\', \'\xe5\x94\x90\', \'\xe8\xb5\x84\', \'\xe5\x87\x89\', \'\xe7\xab\x99\', \'\xe5\x89\x96\', \'\xe7\xab\x9e\', \'\xe9\x83\xa8\', \'\xe6\x97\x81\', \'\xe6\x97\x85\', \'\xe7\x95\x9c\', \'\xe9\x98\x85\', \'\xe7\xbe\x9e\', \'\xe7\x93\xb6\', \'\xe6\x8b\xb3\',\n    \'\xe7\xb2\x89\', \'\xe6\x96\x99\', \'\xe7\x9b\x8a\', \'\xe5\x85\xbc\', \'\xe7\x83\xa4\', \'\xe7\x83\x98\', \'\xe7\x83\xa6\', \'\xe7\x83\xa7\', \'\xe7\x83\x9b\', \'\xe7\x83\x9f\', \'\xe9\x80\x92\', \'\xe6\xb6\x9b\', \'\xe6\xb5\x99\', \'\xe6\xb6\x9d\', \'\xe9\x85\x92\', \'\xe6\xb6\x89\', \'\xe6\xb6\x88\', \'\xe6\xb5\xa9\', \'\xe6\xb5\xb7\', \'\xe6\xb6\x82\',\n    \'\xe6\xb5\xb4\', \'\xe6\xb5\xae\', \'\xe6\xb5\x81\', \'\xe6\xb6\xa6\', \'\xe6\xb5\xaa\', \'\xe6\xb5\xb8\', \'\xe6\xb6\xa8\', \'\xe7\x83\xab\', \'\xe6\xb6\x8c\', \'\xe6\x82\x9f\', \'\xe6\x82\x84\', \'\xe6\x82\x94\', \'\xe6\x82\xa6\', \'\xe5\xae\xb3\', \'\xe5\xae\xbd\', \'\xe5\xae\xb6\', \'\xe5\xae\xb5\', \'\xe5\xae\xb4\', \'\xe5\xae\xbe\', \'\xe7\xaa\x84\',\n    \'\xe5\xae\xb9\', \'\xe5\xae\xb0\', \'\xe6\xa1\x88\', \'\xe8\xaf\xb7\', \'\xe6\x9c\x97\', \'\xe8\xaf\xb8\', \'\xe8\xaf\xbb\', \'\xe6\x89\x87\', \'\xe8\xa2\x9c\', \'\xe8\xa2\x96\', \'\xe8\xa2\x8d\', \'\xe8\xa2\xab\', \'\xe7\xa5\xa5\', \'\xe8\xaf\xbe\', \'\xe8\xb0\x81\', \'\xe8\xb0\x83\', \'\xe5\x86\xa4\', \'\xe8\xb0\x85\', \'\xe8\xb0\x88\', \'\xe8\xb0\x8a\',\n    \'\xe5\x89\xa5\', \'\xe6\x81\xb3\', \'\xe5\xb1\x95\', \'\xe5\x89\xa7\', \'\xe5\xb1\x91\', \'\xe5\xbc\xb1\', \'\xe9\x99\xb5\', \'\xe9\x99\xb6\', \'\xe9\x99\xb7\', \'\xe9\x99\xaa\', \'\xe5\xa8\xb1\', \'\xe5\xa8\x98\', \'\xe9\x80\x9a\', \'\xe8\x83\xbd\', \'\xe9\x9a\xbe\', \'\xe9\xa2\x84\', \'\xe6\xa1\x91\', \'\xe7\xbb\xa2\', \'\xe7\xbb\xa3\', \'\xe9\xaa\x8c\',\n    \'\xe7\xbb\xa7\', \'\xe7\x90\x83\', \'\xe7\x90\x86\', \'\xe6\x8d\xa7\', \'\xe5\xa0\xb5\', \'\xe6\x8f\x8f\', \'\xe5\x9f\x9f\', \'\xe6\x8e\xa9\', \'\xe6\x8d\xb7\', \'\xe6\x8e\x92\', \'\xe6\x8e\x89\', \'\xe5\xa0\x86\', \'\xe6\x8e\xa8\', \'\xe6\x8e\x80\', \'\xe6\x8e\x88\', \'\xe6\x95\x99\', \'\xe6\x8e\x8f\', \'\xe6\x8e\xa0\', \'\xe5\x9f\xb9\', \'\xe6\x8e\xa5\',\n    \'\xe6\x8e\xa7\', \'\xe6\x8e\xa2\', \'\xe6\x8d\xae\', \'\xe6\x8e\x98\', \'\xe8\x81\x8c\', \'\xe5\x9f\xba\', \'\xe8\x91\x97\', \'\xe5\x8b\x92\', \'\xe9\xbb\x84\', \'\xe8\x90\x8c\', \'\xe8\x90\x9d\', \'\xe8\x8f\x8c\', \'\xe8\x8f\x9c\', \'\xe8\x90\x84\', \'\xe8\x8f\x8a\', \'\xe8\x90\x8d\', \'\xe8\x8f\xa0\', \'\xe8\x90\xa5\', \'\xe6\xa2\xb0\', \'\xe6\xa2\xa6\',\n    \'\xe6\xa2\xa2\', \'\xe6\xa2\x85\', \'\xe6\xa3\x80\', \'\xe6\xa2\xb3\', \'\xe6\xa2\xaf\', \'\xe6\xa1\xb6\', \'\xe6\x95\x91\', \'\xe5\x89\xaf\', \'\xe7\xa5\xa8\', \'\xe6\x88\x9a\', \'\xe7\x88\xbd\', \'\xe8\x81\x8b\', \'\xe8\xa2\xad\', \'\xe7\x9b\x9b\', \'\xe9\x9b\xaa\', \'\xe8\xbe\x85\', \'\xe8\xbe\x86\', \'\xe8\x99\x9a\', \'\xe9\x9b\x80\', \'\xe5\xa0\x82\',\n    \'\xe5\xb8\xb8\', \'\xe5\x8c\x99\', \'\xe6\x99\xa8\', \'\xe7\x9d\x81\', \'\xe7\x9c\xaf\', \'\xe7\x9c\xbc\', \'\xe6\x82\xac\', \'\xe9\x87\x8e\', \'\xe5\x95\xa6\', \'\xe6\x99\x9a\', \'\xe5\x95\x84\', \'\xe8\xb7\x9d\', \'\xe8\xb7\x83\', \'\xe7\x95\xa5\', \'\xe8\x9b\x87\', \'\xe7\xb4\xaf\', \'\xe5\x94\xb1\', \'\xe6\x82\xa3\', \'\xe5\x94\xaf\', \'\xe5\xb4\x96\',\n    \'\xe5\xb4\xad\', \'\xe5\xb4\x87\', \'\xe5\x9c\x88\', \'\xe9\x93\x9c\', \'\xe9\x93\xb2\', \'\xe9\x93\xb6\', \'\xe7\x94\x9c\', \'\xe6\xa2\xa8\', \'\xe7\x8a\x81\', \'\xe7\xa7\xbb\', \'\xe7\xac\xa8\', \'\xe7\xac\xbc\', \'\xe7\xac\x9b\', \'\xe7\xac\xa6\', \'\xe7\xac\xac\', \'\xe6\x95\x8f\', \'\xe5\x81\x9a\', \'\xe8\xa2\x8b\', \'\xe6\x82\xa0\', \'\xe5\x81\xbf\',\n    \'\xe5\x81\xb6\', \'\xe5\x81\xb7\', \'\xe6\x82\xa8\', \'\xe5\x94\xae\', \'\xe5\x81\x9c\', \'\xe5\x81\x8f\', \'\xe5\x81\x87\', \'\xe5\xbe\x97\', \'\xe8\xa1\x94\', \'\xe7\x9b\x98\', \'\xe8\x88\xb9\', \'\xe6\x96\x9c\', \'\xe7\x9b\x92\', \'\xe9\xb8\xbd\', \'\xe6\x82\x89\', \'\xe6\xac\xb2\', \'\xe5\xbd\xa9\', \'\xe9\xa2\x86\', \'\xe8\x84\x9a\', \'\xe8\x84\x96\',\n    \'\xe8\x84\xb8\', \'\xe8\x84\xb1\', \'\xe8\xb1\xa1\', \'\xe5\xa4\x9f\', \'\xe7\x8c\x9c\', \'\xe7\x8c\xaa\', \'\xe7\x8c\x8e\', \'\xe7\x8c\xab\', \'\xe7\x8c\x9b\', \'\xe9\xa6\x85\', \'\xe9\xa6\x86\', \'\xe5\x87\x91\', \'\xe5\x87\x8f\', \'\xe6\xaf\xab\', \'\xe9\xba\xbb\', \'\xe7\x97\x92\', \'\xe7\x97\x95\', \'\xe5\xbb\x8a\', \'\xe5\xba\xb7\', \'\xe5\xba\xb8\',\n    \'\xe9\xb9\xbf\', \'\xe7\x9b\x97\', \'\xe7\xab\xa0\', \'\xe7\xab\x9f\', \'\xe5\x95\x86\', \'\xe6\x97\x8f\', \'\xe6\x97\x8b\', \'\xe6\x9c\x9b\', \'\xe7\x8e\x87\', \'\xe7\x9d\x80\', \'\xe7\x9b\x96\', \'\xe7\xb2\x98\', \'\xe7\xb2\x97\', \'\xe7\xb2\x92\', \'\xe6\x96\xad\', \'\xe5\x89\xaa\', \'\xe5\x85\xbd\', \'\xe6\xb8\x85\', \'\xe6\xb7\xbb\', \'\xe6\xb7\x8b\',\n    \'\xe6\xb7\xb9\', \'\xe6\xb8\xa0\', \'\xe6\xb8\x90\', \'\xe6\xb7\xb7\', \'\xe6\xb8\x94\', \'\xe6\xb7\x98\', \'\xe6\xb6\xb2\', \'\xe6\xb7\xa1\', \'\xe6\xb7\xb1\', \'\xe5\xa9\x86\', \'\xe6\xa2\x81\', \'\xe6\xb8\x97\', \'\xe6\x83\x85\', \'\xe6\x83\x9c\', \'\xe6\x83\xad\', \'\xe6\x82\xbc\', \'\xe6\x83\xa7\', \'\xe6\x83\x95\', \'\xe6\x83\x8a\', \'\xe6\x83\xa8\',\n    \'\xe6\x83\xaf\', \'\xe5\xaf\x87\', \'\xe5\xaf\x84\', \'\xe5\xae\xbf\', \'\xe7\xaa\x91\', \'\xe5\xaf\x86\', \'\xe8\xb0\x8b\', \'\xe8\xb0\x8e\', \'\xe7\xa5\xb8\', \'\xe8\xb0\x9c\', \'\xe9\x80\xae\', \'\xe6\x95\xa2\', \'\xe5\xb1\xa0\', \'\xe5\xbc\xb9\', \'\xe9\x9a\x8f\', \'\xe8\x9b\x8b\', \'\xe9\x9a\x86\', \'\xe9\x9a\x90\', \'\xe5\xa9\x9a\', \'\xe5\xa9\xb6\',\n    \'\xe9\xa2\x88\', \'\xe7\xbb\xa9\', \'\xe7\xbb\xaa\', \'\xe7\xbb\xad\', \'\xe9\xaa\x91\', \'\xe7\xbb\xb3\', \'\xe7\xbb\xb4\', \'\xe7\xbb\xb5\', \'\xe7\xbb\xb8\', \'\xe7\xbb\xbf\', \'\xe7\x90\xb4\', \'\xe6\x96\x91\', \'\xe6\x9b\xbf\', \'\xe6\xac\xbe\', \'\xe5\xa0\xaa\', \'\xe6\x90\xad\', \'\xe5\xa1\x94\', \'\xe8\xb6\x8a\', \'\xe8\xb6\x81\', \'\xe8\xb6\x8b\',\n    \'\xe8\xb6\x85\', \'\xe6\x8f\x90\', \'\xe5\xa0\xa4\', \'\xe5\x8d\x9a\', \'\xe6\x8f\xad\', \'\xe5\x96\x9c\', \'\xe6\x8f\x92\', \'\xe6\x8f\xaa\', \'\xe6\x90\x9c\', \'\xe7\x85\xae\', \'\xe6\x8f\xb4\', \'\xe8\xa3\x81\', \'\xe6\x90\x81\', \'\xe6\x90\x82\', \'\xe6\x90\x85\', \'\xe6\x8f\xa1\', \'\xe6\x8f\x89\', \'\xe6\x96\xaf\', \'\xe6\x9c\x9f\', \'\xe6\xac\xba\',\n    \'\xe8\x81\x94\', \'\xe6\x95\xa3\', \'\xe6\x83\xb9\', \'\xe8\x91\xac\', \'\xe8\x91\x9b\', \'\xe8\x91\xa3\', \'\xe8\x91\xa1\', \'\xe6\x95\xac\', \'\xe8\x91\xb1\', \'\xe8\x90\xbd\', \'\xe6\x9c\x9d\', \'\xe8\xbe\x9c\', \'\xe8\x91\xb5\', \'\xe6\xa3\x92\', \'\xe6\xa3\x8b\', \'\xe6\xa4\x8d\', \'\xe6\xa3\xae\', \'\xe6\xa4\x85\', \'\xe6\xa4\x92\', \'\xe6\xa3\xb5\',\n    \'\xe6\xa3\x8d\', \'\xe6\xa3\x89\', \'\xe6\xa3\x9a\', \'\xe6\xa3\x95\', \'\xe6\x83\xa0\', \'\xe6\x83\x91\', \'\xe9\x80\xbc\', \'\xe5\x8e\xa8\', \'\xe5\x8e\xa6\', \'\xe7\xa1\xac\', \'\xe7\xa1\xae\', \'\xe9\x9b\x81\', \'\xe6\xae\x96\', \'\xe8\xa3\x82\', \'\xe9\x9b\x84\', \'\xe6\x9a\x82\', \'\xe9\x9b\x85\', \'\xe8\xbe\x88\', \'\xe6\x82\xb2\', \'\xe7\xb4\xab\',\n    \'\xe8\xbe\x89\', \'\xe6\x95\x9e\', \'\xe8\xb5\x8f\', \'\xe6\x8e\x8c\', \'\xe6\x99\xb4\', \'\xe6\x9a\x91\', \'\xe6\x9c\x80\', \'\xe9\x87\x8f\', \'\xe5\x96\xb7\', \'\xe6\x99\xb6\', \'\xe5\x96\x87\', \'\xe9\x81\x87\', \'\xe5\x96\x8a\', \'\xe6\x99\xaf\', \'\xe8\xb7\xb5\', \'\xe8\xb7\x8c\', \'\xe8\xb7\x91\', \'\xe9\x81\x97\', \'\xe8\x9b\x99\', \'\xe8\x9b\x9b\',\n    \'\xe8\x9c\x93\', \'\xe5\x96\x9d\', \'\xe5\x96\x82\', \'\xe5\x96\x98\', \'\xe5\x96\x89\', \'\xe5\xb9\x85\', \'\xe5\xb8\xbd\', \'\xe8\xb5\x8c\', \'\xe8\xb5\x94\', \'\xe9\xbb\x91\', \'\xe9\x93\xb8\', \'\xe9\x93\xba\', \'\xe9\x93\xbe\', \'\xe9\x94\x80\', \'\xe9\x94\x81\', \'\xe9\x94\x84\', \'\xe9\x94\x85\', \'\xe9\x94\x88\', \'\xe9\x94\x8b\', \'\xe9\x94\x90\',\n    \'\xe7\x9f\xad\', \'\xe6\x99\xba\', \'\xe6\xaf\xaf\', \'\xe9\xb9\x85\', \'\xe5\x89\xa9\', \'\xe7\xa8\x8d\', \'\xe7\xa8\x8b\', \'\xe7\xa8\x80\', \'\xe7\xa8\x8e\', \'\xe7\xad\x90\', \'\xe7\xad\x89\', \'\xe7\xad\x91\', \'\xe7\xad\x96\', \'\xe7\xad\x9b\', \'\xe7\xad\x92\', \'\xe7\xad\x94\', \'\xe7\xad\x8b\', \'\xe7\xad\x9d\', \'\xe5\x82\xb2\', \'\xe5\x82\x85\',\n    \'\xe7\x89\x8c\', \'\xe5\xa0\xa1\', \'\xe9\x9b\x86\', \'\xe7\x84\xa6\', \'\xe5\x82\x8d\', \'\xe5\x82\xa8\', \'\xe5\xa5\xa5\', \'\xe8\xa1\x97\', \'\xe6\x83\xa9\', \'\xe5\xbe\xa1\', \'\xe5\xbe\xaa\', \'\xe8\x89\x87\', \'\xe8\x88\x92\', \'\xe7\x95\xaa\', \'\xe9\x87\x8a\', \'\xe7\xa6\xbd\', \'\xe8\x85\x8a\', \'\xe8\x84\xbe\', \'\xe8\x85\x94\', \'\xe9\xb2\x81\',\n    \'\xe7\x8c\xbe\', \'\xe7\x8c\xb4\', \'\xe7\x84\xb6\', \'\xe9\xa6\x8b\', \'\xe8\xa3\x85\', \'\xe8\x9b\xae\', \'\xe5\xb0\xb1\', \'\xe7\x97\x9b\', \'\xe7\xab\xa5\', \'\xe9\x98\x94\', \'\xe5\x96\x84\', \'\xe7\xbe\xa1\', \'\xe6\x99\xae\', \'\xe7\xb2\xaa\', \'\xe5\xb0\x8a\', \'\xe9\x81\x93\', \'\xe6\x9b\xbe\', \'\xe7\x84\xb0\', \'\xe6\xb8\xaf\', \'\xe6\xb9\x96\',\n    \'\xe6\xb8\xa3\', \'\xe6\xb9\xbf\', \'\xe6\xb8\xa9\', \'\xe6\xb8\xb4\', \'\xe6\xbb\x91\', \'\xe6\xb9\xbe\', \'\xe6\xb8\xa1\', \'\xe6\xb8\xb8\', \'\xe6\xbb\x8b\', \'\xe6\xba\x89\', \'\xe6\x84\xa4\', \'\xe6\x85\x8c\', \'\xe6\x83\xb0\', \'\xe6\x84\xa7\', \'\xe6\x84\x89\', \'\xe6\x85\xa8\', \'\xe5\x89\xb2\', \'\xe5\xaf\x92\', \'\xe5\xaf\x8c\', \'\xe7\xaa\x9c\',\n    \'\xe7\xaa\x9d\', \'\xe7\xaa\x97\', \'\xe9\x81\x8d\', \'\xe8\xa3\x95\', \'\xe8\xa3\xa4\', \'\xe8\xa3\x99\', \'\xe8\xb0\xa2\', \'\xe8\xb0\xa3\', \'\xe8\xb0\xa6\', \'\xe5\xb1\x9e\', \'\xe5\xb1\xa1\', \'\xe5\xbc\xba\', \'\xe7\xb2\xa5\', \'\xe7\x96\x8f\', \'\xe9\x9a\x94\', \'\xe9\x9a\x99\', \'\xe7\xb5\xae\', \'\xe5\xab\x82\', \'\xe7\x99\xbb\', \'\xe7\xbc\x8e\',\n    \'\xe7\xbc\x93\', \'\xe7\xbc\x96\', \'\xe9\xaa\x97\', \'\xe7\xbc\x98\', \'\xe7\x91\x9e\', \'\xe9\xad\x82\', \'\xe8\x82\x86\', \'\xe6\x91\x84\', \'\xe6\x91\xb8\', \'\xe5\xa1\xab\', \'\xe6\x90\x8f\', \'\xe5\xa1\x8c\', \'\xe9\xbc\x93\', \'\xe6\x91\x86\', \'\xe6\x90\xba\', \'\xe6\x90\xac\', \'\xe6\x91\x87\', \'\xe6\x90\x9e\', \'\xe5\xa1\x98\', \'\xe6\x91\x8a\',\n    \'\xe8\x92\x9c\', \'\xe5\x8b\xa4\', \'\xe9\xb9\x8a\', \'\xe8\x93\x9d\', \'\xe5\xa2\x93\', \'\xe5\xb9\x95\', \'\xe8\x93\xac\', \'\xe8\x93\x84\', \'\xe8\x92\x99\', \'\xe8\x92\xb8\', \'\xe7\x8c\xae\', \'\xe7\xa6\x81\', \'\xe6\xa5\x9a\', \'\xe6\x83\xb3\', \'\xe6\xa7\x90\', \'\xe6\xa6\x86\', \'\xe6\xa5\xbc\', \'\xe6\xa6\x82\', \'\xe8\xb5\x96\', \'\xe9\x85\xac\',\n    \'\xe6\x84\x9f\', \'\xe7\xa2\x8d\', \'\xe7\xa2\x91\', \'\xe7\xa2\x8e\', \'\xe7\xa2\xb0\', \'\xe7\xa2\x97\', \'\xe7\xa2\x8c\', \'\xe9\x9b\xb7\', \'\xe9\x9b\xb6\', \'\xe9\x9b\xbe\', \'\xe9\x9b\xb9\', \'\xe8\xbe\x93\', \'\xe7\x9d\xa3\', \'\xe9\xbe\x84\', \'\xe9\x89\xb4\', \'\xe7\x9d\x9b\', \'\xe7\x9d\xa1\', \'\xe7\x9d\xac\', \'\xe9\x84\x99\', \'\xe6\x84\x9a\',\n    \'\xe6\x9a\x96\', \'\xe7\x9b\x9f\', \'\xe6\xad\x87\', \'\xe6\x9a\x97\', \'\xe7\x85\xa7\', \'\xe8\xb7\xa8\', \'\xe8\xb7\xb3\', \'\xe8\xb7\xaa\', \'\xe8\xb7\xaf\', \'\xe8\xb7\x9f\', \'\xe9\x81\xa3\', \'\xe8\x9b\xbe\', \'\xe8\x9c\x82\', \'\xe5\x97\x93\', \'\xe7\xbd\xae\', \'\xe7\xbd\xaa\', \'\xe7\xbd\xa9\', \'\xe9\x94\x99\', \'\xe9\x94\xa1\', \'\xe9\x94\xa3\',\n    \'\xe9\x94\xa4\', \'\xe9\x94\xa6\', \'\xe9\x94\xae\', \'\xe9\x94\xaf\', \'\xe7\x9f\xae\', \'\xe8\xbe\x9e\', \'\xe7\xa8\xa0\', \'\xe6\x84\x81\', \'\xe7\xad\xb9\', \'\xe7\xad\xbe\', \'\xe7\xae\x80\', \'\xe6\xaf\x81\', \'\xe8\x88\x85\', \'\xe9\xbc\xa0\', \'\xe5\x82\xac\', \'\xe5\x82\xbb\', \'\xe5\x83\x8f\', \'\xe8\xba\xb2\', \'\xe5\xbe\xae\', \'\xe6\x84\x88\',\n    \'\xe9\x81\xa5\', \'\xe8\x85\xb0\', \'\xe8\x85\xa5\', \'\xe8\x85\xb9\', \'\xe8\x85\xbe\', \'\xe8\x85\xbf\', \'\xe8\xa7\xa6\', \'\xe8\xa7\xa3\', \'\xe9\x85\xb1\', \'\xe7\x97\xb0\', \'\xe5\xbb\x89\', \'\xe6\x96\xb0\', \'\xe9\x9f\xb5\', \'\xe6\x84\x8f\', \'\xe7\xb2\xae\', \'\xe6\x95\xb0\', \'\xe7\x85\x8e\', \'\xe5\xa1\x91\', \'\xe6\x85\x88\', \'\xe7\x85\xa4\',\n    \'\xe7\x85\x8c\', \'\xe6\xbb\xa1\', \'\xe6\xbc\xa0\', \'\xe6\xba\x90\', \'\xe6\xbb\xa4\', \'\xe6\xbb\xa5\', \'\xe6\xbb\x94\', \'\xe6\xba\xaa\', \'\xe6\xba\x9c\', \'\xe6\xbb\x9a\', \'\xe6\xbb\xa8\', \'\xe7\xb2\xb1\', \'\xe6\xbb\xa9\', \'\xe6\x85\x8e\', \'\xe8\xaa\x89\', \'\xe5\xa1\x9e\', \'\xe8\xb0\xa8\', \'\xe7\xa6\x8f\', \'\xe7\xbe\xa4\', \'\xe6\xae\xbf\',\n    \'\xe8\xbe\x9f\', \'\xe9\x9a\x9c\', \'\xe5\xab\x8c\', \'\xe5\xab\x81\', \'\xe5\x8f\xa0\', \'\xe7\xbc\x9d\', \'\xe7\xbc\xa0\', \'\xe9\x9d\x99\', \'\xe7\xa2\xa7\', \'\xe7\x92\x83\', \'\xe5\xa2\x99\', \'\xe6\x92\x87\', \'\xe5\x98\x89\', \'\xe6\x91\xa7\', \'\xe6\x88\xaa\', \'\xe8\xaa\x93\', \'\xe5\xa2\x83\', \'\xe6\x91\x98\', \'\xe6\x91\x94\', \'\xe8\x81\x9a\',\n    \'\xe8\x94\xbd\', \'\xe6\x85\x95\', \'\xe6\x9a\xae\', \'\xe8\x94\x91\', \'\xe6\xa8\xa1\', \'\xe6\xa6\xb4\', \'\xe6\xa6\x9c\', \'\xe6\xa6\xa8\', \'\xe6\xad\x8c\', \'\xe9\x81\xad\', \'\xe9\x85\xb7\', \'\xe9\x85\xbf\', \'\xe9\x85\xb8\', \'\xe7\xa3\x81\', \'\xe6\x84\xbf\', \'\xe9\x9c\x80\', \'\xe5\xbc\x8a\', \'\xe8\xa3\xb3\', \'\xe9\xa2\x97\', \'\xe5\x97\xbd\',\n    \'\xe8\x9c\xbb\', \'\xe8\x9c\xa1\', \'\xe8\x9d\x87\', \'\xe8\x9c\x98\', \'\xe8\xb5\x9a\', \'\xe9\x94\xb9\', \'\xe9\x94\xbb\', \'\xe8\x88\x9e\', \'\xe7\xa8\xb3\', \'\xe7\xae\x97\', \'\xe7\xae\xa9\', \'\xe7\xae\xa1\', \'\xe5\x83\x9a\', \'\xe9\xbc\xbb\', \'\xe9\xad\x84\', \'\xe8\xb2\x8c\', \'\xe8\x86\x9c\', \'\xe8\x86\x8a\', \'\xe8\x86\x80\', \'\xe9\xb2\x9c\',\n    \'\xe7\x96\x91\', \'\xe9\xa6\x92\', \'\xe8\xa3\xb9\', \'\xe6\x95\xb2\', \'\xe8\xb1\xaa\', \'\xe8\x86\x8f\', \'\xe9\x81\xae\', \'\xe8\x85\x90\', \'\xe7\x98\xa6\', \'\xe8\xbe\xa3\', \'\xe7\xab\xad\', \'\xe7\xab\xaf\', \'\xe6\x97\x97\', \'\xe7\xb2\xbe\', \'\xe6\xad\x89\', \'\xe7\x86\x84\', \'\xe7\x86\x94\', \'\xe6\xbc\x86\', \'\xe6\xbc\x82\', \'\xe6\xbc\xab\',\n    \'\xe6\xbb\xb4\', \'\xe6\xbc\x94\', \'\xe6\xbc\x8f\', \'\xe6\x85\xa2\', \'\xe5\xaf\xa8\', \'\xe8\xb5\x9b\', \'\xe5\xaf\x9f\', \'\xe8\x9c\x9c\', \'\xe8\xb0\xb1\', \'\xe5\xab\xa9\', \'\xe7\xbf\xa0\', \'\xe7\x86\x8a\', \'\xe5\x87\xb3\', \'\xe9\xaa\xa1\', \'\xe7\xbc\xa9\', \'\xe6\x85\xa7\', \'\xe6\x92\x95\', \'\xe6\x92\x92\', \'\xe8\xb6\xa3\', \'\xe8\xb6\x9f\',\n    \'\xe6\x92\x91\', \'\xe6\x92\xad\', \'\xe6\x92\x9e\', \'\xe6\x92\xa4\', \'\xe5\xa2\x9e\', \'\xe8\x81\xaa\', \'\xe9\x9e\x8b\', \'\xe8\x95\x89\', \'\xe8\x94\xac\', \'\xe6\xa8\xaa\', \'\xe6\xa7\xbd\', \'\xe6\xa8\xb1\', \'\xe6\xa9\xa1\', \'\xe9\xa3\x98\', \'\xe9\x86\x8b\', \'\xe9\x86\x89\', \'\xe9\x9c\x87\', \'\xe9\x9c\x89\', \'\xe7\x9e\x92\', \'\xe9\xa2\x98\',\n    \'\xe6\x9a\xb4\', \'\xe7\x9e\x8e\', \'\xe5\xbd\xb1\', \'\xe8\xb8\xa2\', \'\xe8\xb8\x8f\', \'\xe8\xb8\xa9\', \'\xe8\xb8\xaa\', \'\xe8\x9d\xb6\', \'\xe8\x9d\xb4\', \'\xe5\x98\xb1\', \'\xe5\xa2\xa8\', \'\xe9\x95\x87\', \'\xe9\x9d\xa0\', \'\xe7\xa8\xbb\', \'\xe9\xbb\x8e\', \'\xe7\xa8\xbf\', \'\xe7\xa8\xbc\', \'\xe7\xae\xb1\', \'\xe7\xae\xad\', \'\xe7\xaf\x87\',\n    \'\xe5\x83\xb5\', \'\xe8\xba\xba\', \'\xe5\x83\xbb\', \'\xe5\xbe\xb7\', \'\xe8\x89\x98\', \'\xe8\x86\x9d\', \'\xe8\x86\x9b\', \'\xe7\x86\x9f\', \'\xe6\x91\xa9\', \'\xe9\xa2\x9c\', \'\xe6\xaf\x85\', \'\xe7\xb3\x8a\', \'\xe9\x81\xb5\', \'\xe6\xbd\x9c\', \'\xe6\xbd\xae\', \'\xe6\x87\x82\', \'\xe9\xa2\x9d\', \'\xe6\x85\xb0\', \'\xe5\x8a\x88\', \'\xe6\x93\x8d\',\n    \'\xe7\x87\x95\', \'\xe8\x96\xaf\', \'\xe8\x96\xaa\', \'\xe8\x96\x84\', \'\xe9\xa2\xa0\', \'\xe6\xa9\x98\', \'\xe6\x95\xb4\', \'\xe8\x9e\x8d\', \'\xe9\x86\x92\', \'\xe9\xa4\x90\', \'\xe5\x98\xb4\', \'\xe8\xb9\x84\', \'\xe5\x99\xa8\', \'\xe8\xb5\xa0\', \'\xe9\xbb\x98\', \'\xe9\x95\x9c\', \'\xe8\xb5\x9e\', \'\xe7\xaf\xae\', \'\xe9\x82\x80\', \'\xe8\xa1\xa1\',\n    \'\xe8\x86\xa8\', \'\xe9\x9b\x95\', \'\xe7\xa3\xa8\', \'\xe5\x87\x9d\', \'\xe8\xbe\xa8\', \'\xe8\xbe\xa9\', \'\xe7\xb3\x96\', \'\xe7\xb3\x95\', \'\xe7\x87\x83\', \'\xe6\xbe\xa1\', \'\xe6\xbf\x80\', \'\xe6\x87\x92\', \'\xe5\xa3\x81\', \'\xe9\x81\xbf\', \'\xe7\xbc\xb4\', \'\xe6\x88\xb4\', \'\xe6\x93\xa6\', \'\xe9\x9e\xa0\', \'\xe8\x97\x8f\', \'\xe9\x9c\x9c\',\n    \'\xe9\x9c\x9e\', \'\xe7\x9e\xa7\', \'\xe8\xb9\x88\', \'\xe8\x9e\xba\', \'\xe7\xa9\x97\', \'\xe7\xb9\x81\', \'\xe8\xbe\xab\', \'\xe8\xb5\xa2\', \'\xe7\xb3\x9f\', \'\xe7\xb3\xa0\', \'\xe7\x87\xa5\', \'\xe8\x87\x82\', \'\xe7\xbf\xbc\', \'\xe9\xaa\xa4\', \'\xe9\x9e\xad\', \'\xe8\xa6\x86\', \'\xe8\xb9\xa6\', \'\xe9\x95\xb0\', \'\xe7\xbf\xbb\', \'\xe9\xb9\xb0\',\n    \'\xe8\xad\xa6\', \'\xe6\x94\x80\', \'\xe8\xb9\xb2\', \'\xe9\xa2\xa4\', \'\xe7\x93\xa3\', \'\xe7\x88\x86\', \'\xe7\x96\x86\', \'\xe5\xa3\xa4\', \'\xe8\x80\x80\', \'\xe8\xba\x81\', \'\xe5\x9a\xbc\', \'\xe5\x9a\xb7\', \'\xe7\xb1\x8d\', \'\xe9\xad\x94\', \'\xe7\x81\x8c\', \'\xe8\xa0\xa2\', \'\xe9\x9c\xb8\', \'\xe9\x9c\xb2\', \'\xe5\x9b\x8a\', \'\xe7\xbd\x90\',\n    \'\xe5\x8c\x95\', \'\xe5\x88\x81\', \'\xe4\xb8\x90\', \'\xe6\xad\xb9\', \'\xe6\x88\x88\', \'\xe5\xa4\xad\', \'\xe4\xbb\x91\', \'\xe8\xae\xa5\', \'\xe5\x86\x97\', \'\xe9\x82\x93\', \'\xe8\x89\xbe\', \'\xe5\xa4\xaf\', \'\xe5\x87\xb8\', \'\xe5\x8d\xa2\', \'\xe5\x8f\xad\', \'\xe5\x8f\xbd\', \'\xe7\x9a\xbf\', \'\xe5\x87\xb9\', \'\xe5\x9b\x9a\', \'\xe7\x9f\xa2\',\n    \'\xe4\xb9\x8d\', \'\xe5\xb0\x94\', \'\xe5\x86\xaf\', \'\xe7\x8e\x84\', \'\xe9\x82\xa6\', \'\xe8\xbf\x82\', \'\xe9\x82\xa2\', \'\xe8\x8a\x8b\', \'\xe8\x8a\x8d\', \'\xe5\x90\x8f\', \'\xe5\xa4\xb7\', \'\xe5\x90\x81\', \'\xe5\x90\x95\', \'\xe5\x90\x86\', \'\xe5\xb1\xb9\', \'\xe5\xbb\xb7\', \'\xe8\xbf\x84\', \'\xe8\x87\xbc\', \'\xe4\xbb\xb2\', \'\xe4\xbc\xa6\',\n    \'\xe4\xbc\x8a\', \'\xe8\x82\x8b\', \'\xe6\x97\xad\', \'\xe5\x8c\x88\', \'\xe5\x87\xab\', \'\xe5\xa6\x86\', \'\xe4\xba\xa5\', \'\xe6\xb1\x9b\', \'\xe8\xae\xb3\', \'\xe8\xae\xb6\', \'\xe8\xae\xb9\', \'\xe8\xae\xbc\', \'\xe8\xaf\x80\', \'\xe5\xbc\x9b\', \'\xe9\x98\xb1\', \'\xe9\xa9\xae\', \'\xe9\xa9\xaf\', \'\xe7\xba\xab\', \'\xe7\x8e\x96\', \'\xe7\x8e\x9b\',\n    \'\xe9\x9f\xa7\', \'\xe6\x8a\xa0\', \'\xe6\x89\xbc\', \'\xe6\xb1\x9e\', \'\xe6\x89\xb3\', \'\xe6\x8a\xa1\', \'\xe5\x9d\x8e\', \'\xe5\x9d\x9e\', \'\xe6\x8a\x91\', \'\xe6\x8b\x9f\', \'\xe6\x8a\x92\', \'\xe8\x8a\x99\', \'\xe8\x8a\x9c\', \'\xe8\x8b\x87\', \'\xe8\x8a\xa5\', \'\xe8\x8a\xaf\', \'\xe8\x8a\xad\', \'\xe6\x9d\x96\', \'\xe6\x9d\x89\', \'\xe5\xb7\xab\',\n    \'\xe6\x9d\x88\', \'\xe7\x94\xab\', \'\xe5\x8c\xa3\', \'\xe8\xbd\xa9\', \'\xe5\x8d\xa4\', \'\xe8\x82\x96\', \'\xe5\x90\xb1\', \'\xe5\x90\xa0\', \'\xe5\x91\x95\', \'\xe5\x91\x90\', \'\xe5\x90\x9f\', \'\xe5\x91\x9b\', \'\xe5\x90\xbb\', \'\xe5\x90\xad\', \'\xe9\x82\x91\', \'\xe5\x9b\xa4\', \'\xe5\x90\xae\', \'\xe5\xb2\x96\', \'\xe7\x89\xa1\', \'\xe4\xbd\x91\',\n    \'\xe4\xbd\x83\', \'\xe4\xbc\xba\', \'\xe5\x9b\xb1\', \'\xe8\x82\x9b\', \'\xe8\x82\x98\', \'\xe7\x94\xb8\', \'\xe7\x8b\x88\', \'\xe9\xb8\xa0\', \'\xe5\xbd\xa4\', \'\xe7\x81\xb8\', \'\xe5\x88\xa8\', \'\xe5\xba\x87\', \'\xe5\x90\x9d\', \'\xe5\xba\x90\', \'\xe9\x97\xb0\', \'\xe5\x85\x91\', \'\xe7\x81\xbc\', \'\xe6\xb2\x90\', \'\xe6\xb2\x9b\', \'\xe6\xb1\xb0\',\n    \'\xe6\xb2\xa5\', \'\xe6\xb2\xa6\', \'\xe6\xb1\xb9\', \'\xe6\xb2\xa7\', \'\xe6\xb2\xaa\', \'\xe5\xbf\xb1\', \'\xe8\xaf\x85\', \'\xe8\xaf\x88\', \'\xe7\xbd\x95\', \'\xe5\xb1\x81\', \'\xe5\x9d\xa0\', \'\xe5\xa6\x93\', \'\xe5\xa7\x8a\', \'\xe5\xa6\x92\', \'\xe7\xba\xac\', \'\xe7\x8e\xab\', \'\xe5\x8d\xa6\', \'\xe5\x9d\xb7\', \'\xe5\x9d\xaf\', \'\xe6\x8b\x93\',\n    \'\xe5\x9d\xaa\', \'\xe5\x9d\xa4\', \'\xe6\x8b\x84\', \'\xe6\x8b\xa7\', \'\xe6\x8b\x82\', \'\xe6\x8b\x99\', \'\xe6\x8b\x87\', \'\xe6\x8b\x97\', \'\xe8\x8c\x89\', \'\xe6\x98\x94\', \'\xe8\x8b\x9b\', \'\xe8\x8b\xab\', \'\xe8\x8b\x9f\', \'\xe8\x8b\x9e\', \'\xe8\x8c\x81\', \'\xe8\x8b\x94\', \'\xe6\x9e\x89\', \'\xe6\x9e\xa2\', \'\xe6\x9e\x9a\', \'\xe6\x9e\xab\',\n    \'\xe6\x9d\xad\', \'\xe9\x83\x81\', \'\xe7\x9f\xbe\', \'\xe5\xa5\x88\', \'\xe5\xa5\x84\', \'\xe6\xae\xb4\', \'\xe6\xad\xa7\', \'\xe5\x8d\x93\', \'\xe6\x98\x99\', \'\xe5\x93\x8e\', \'\xe5\x92\x95\', \'\xe5\x91\xb5\', \'\xe5\x92\x99\', \'\xe5\x91\xbb\', \'\xe5\x92\x92\', \'\xe5\x92\x86\', \'\xe5\x92\x96\', \'\xe5\xb8\x95\', \'\xe8\xb4\xa6\', \'\xe8\xb4\xac\',\n    \'\xe8\xb4\xae\', \'\xe6\xb0\x9b\', \'\xe7\xa7\x89\', \'\xe5\xb2\xb3\', \'\xe4\xbe\xa0\', \'\xe4\xbe\xa5\', \'\xe4\xbe\xa3\', \'\xe4\xbe\x88\', \'\xe5\x8d\x91\', \'\xe5\x88\xbd\', \'\xe5\x88\xb9\', \'\xe8\x82\xb4\', \'\xe8\xa7\x85\', \'\xe5\xbf\xbf\', \'\xe7\x93\xae\', \'\xe8\x82\xae\', \'\xe8\x82\xaa\', \'\xe7\x8b\x9e\', \'\xe5\xba\x9e\', \'\xe7\x96\x9f\',\n    \'\xe7\x96\x99\', \'\xe7\x96\x9a\', \'\xe5\x8d\x92\', \'\xe6\xb0\x93\', \'\xe7\x82\xac\', \'\xe6\xb2\xbd\', \'\xe6\xb2\xae\', \'\xe6\xb3\xa3\', \'\xe6\xb3\x9e\', \'\xe6\xb3\x8c\', \'\xe6\xb2\xbc\', \'\xe6\x80\x94\', \'\xe6\x80\xaf\', \'\xe5\xae\xa0\', \'\xe5\xae\x9b\', \'\xe8\xa1\xa9\', \'\xe7\xa5\x88\', \'\xe8\xaf\xa1\', \'\xe5\xb8\x9a\', \'\xe5\xb1\x89\',\n    \'\xe5\xbc\xa7\', \'\xe5\xbc\xa5\', \'\xe9\x99\x8b\', \'\xe9\x99\x8c\', \'\xe5\x87\xbd\', \'\xe5\xa7\x86\', \'\xe8\x99\xb1\', \'\xe5\x8f\x81\', \'\xe7\xbb\x85\', \'\xe9\xa9\xb9\', \'\xe7\xbb\x8a\', \'\xe7\xbb\x8e\', \'\xe5\xa5\x91\', \'\xe8\xb4\xb0\', \'\xe7\x8e\xb7\', \'\xe7\x8e\xb2\', \'\xe7\x8f\x8a\', \'\xe6\x8b\xad\', \'\xe6\x8b\xb7\', \'\xe6\x8b\xb1\',\n    \'\xe6\x8c\x9f\', \'\xe5\x9e\xa2\', \'\xe5\x9e\x9b\', \'\xe6\x8b\xaf\', \'\xe8\x8d\x86\', \'\xe8\x8c\xb8\', \'\xe8\x8c\xac\', \'\xe8\x8d\x9a\', \'\xe8\x8c\xb5\', \'\xe8\x8c\xb4\', \'\xe8\x8d\x9e\', \'\xe8\x8d\xa0\', \'\xe8\x8d\xa4\', \'\xe8\x8d\xa7\', \'\xe8\x8d\x94\', \'\xe6\xa0\x88\', \'\xe6\x9f\x91\', \'\xe6\xa0\x85\', \'\xe6\x9f\xa0\', \'\xe6\x9e\xb7\',\n    \'\xe5\x8b\x83\', \'\xe6\x9f\xac\', \'\xe7\xa0\x82\', \'\xe6\xb3\xb5\', \'\xe7\xa0\x9a\', \'\xe9\xb8\xa5\', \'\xe8\xbd\xb4\', \'\xe9\x9f\xad\', \'\xe8\x99\x90\', \'\xe6\x98\xa7\', \'\xe7\x9b\xb9\', \'\xe5\x92\xa7\', \'\xe6\x98\xb5\', \'\xe6\x98\xad\', \'\xe7\x9b\x85\', \'\xe5\x8b\x8b\', \'\xe5\x93\x86\', \'\xe5\x92\xaa\', \'\xe5\x93\x9f\', \'\xe5\xb9\xbd\',\n    \'\xe9\x92\x99\', \'\xe9\x92\x9d\', \'\xe9\x92\xa0\', \'\xe9\x92\xa6\', \'\xe9\x92\xa7\', \'\xe9\x92\xae\', \'\xe6\xaf\xa1\', \'\xe6\xb0\xa2\', \'\xe7\xa7\x95\', \'\xe4\xbf\x8f\', \'\xe4\xbf\x84\', \'\xe4\xbf\x90\', \'\xe4\xbe\xaf\', \'\xe5\xbe\x8a\', \'\xe8\xa1\x8d\', \'\xe8\x83\x9a\', \'\xe8\x83\xa7\', \'\xe8\x83\x8e\', \'\xe7\x8b\xb0\', \'\xe9\xa5\xb5\',\n    \'\xe5\xb3\xa6\', \'\xe5\xa5\x95\', \'\xe5\x92\xa8\', \'\xe9\xa3\x92\', \'\xe9\x97\xba\', \'\xe9\x97\xbd\', \'\xe7\xb1\xbd\', \'\xe5\xa8\x84\', \'\xe7\x83\x81\', \'\xe7\x82\xab\', \'\xe6\xb4\xbc\', \'\xe6\x9f\x92\', \'\xe6\xb6\x8e\', \'\xe6\xb4\x9b\', \'\xe6\x81\x83\', \'\xe6\x81\x8d\', \'\xe6\x81\xac\', \'\xe6\x81\xa4\', \'\xe5\xae\xa6\', \'\xe8\xaf\xab\',\n    \'\xe8\xaf\xac\', \'\xe7\xa5\xa0\', \'\xe8\xaf\xb2\', \'\xe5\xb1\x8f\', \'\xe5\xb1\x8e\', \'\xe9\x80\x8a\', \'\xe9\x99\xa8\', \'\xe5\xa7\x9a\', \'\xe5\xa8\x9c\', \'\xe8\x9a\xa4\', \'\xe9\xaa\x87\', \'\xe8\x80\x98\', \'\xe8\x80\x99\', \'\xe7\xa7\xa6\', \'\xe5\x8c\xbf\', \'\xe5\x9f\x82\', \'\xe6\x8d\x82\', \'\xe6\x8d\x8d\', \'\xe8\xa2\x81\', \'\xe6\x8d\x8c\',\n    \'\xe6\x8c\xab\', \'\xe6\x8c\x9a\', \'\xe6\x8d\xa3\', \'\xe6\x8d\x85\', \'\xe5\x9f\x83\', \'\xe8\x80\xbf\', \'\xe8\x81\x82\', \'\xe8\x8d\xb8\', \'\xe8\x8e\xbd\', \'\xe8\x8e\xb1\', \'\xe8\x8e\x89\', \'\xe8\x8e\xb9\', \'\xe8\x8e\xba\', \'\xe6\xa2\x86\', \'\xe6\xa0\x96\', \'\xe6\xa1\xa6\', \'\xe6\xa0\x93\', \'\xe6\xa1\x85\', \'\xe6\xa1\xa9\', \'\xe8\xb4\xbe\',\n    \'\xe9\x85\x8c\', \'\xe7\xa0\xb8\', \'\xe7\xa0\xb0\', \'\xe7\xa0\xbe\', \'\xe6\xae\x89\', \'\xe9\x80\x9e\', \'\xe5\x93\xae\', \'\xe5\x94\xa0\', \'\xe5\x93\xba\', \'\xe5\x89\x94\', \'\xe8\x9a\x8c\', \'\xe8\x9a\x9c\', \'\xe7\x95\x94\', \'\xe8\x9a\xa3\', \'\xe8\x9a\xaa\', \'\xe8\x9a\x93\', \'\xe5\x93\xa9\', \'\xe5\x9c\x83\', \'\xe9\xb8\xaf\', \'\xe5\x94\x81\',\n    \'\xe5\x93\xbc\', \'\xe5\x94\x86\', \'\xe5\xb3\xad\', \'\xe5\x94\xa7\', \'\xe5\xb3\xbb\', \'\xe8\xb5\x82\', \'\xe8\xb5\x83\', \'\xe9\x92\xbe\', \'\xe9\x93\x86\', \'\xe6\xb0\xa8\', \'\xe7\xa7\xab\', \'\xe7\xac\x86\', \'\xe4\xbf\xba\', \'\xe8\xb5\x81\', \'\xe5\x80\x94\', \'\xe6\xae\xb7\', \'\xe8\x80\xb8\', \'\xe8\x88\x80\', \'\xe8\xb1\xba\', \'\xe8\xb1\xb9\',\n    \'\xe9\xa2\x81\', \'\xe8\x83\xaf\', \'\xe8\x83\xb0\', \'\xe8\x84\x90\', \'\xe8\x84\x93\', \'\xe9\x80\x9b\', \'\xe5\x8d\xbf\', \'\xe9\xb8\xb5\', \'\xe9\xb8\xb3\', \'\xe9\xa6\x81\', \'\xe5\x87\x8c\', \'\xe5\x87\x84\', \'\xe8\xa1\xb7\', \'\xe9\x83\xad\', \'\xe6\x96\x8b\', \'\xe7\x96\xb9\', \'\xe7\xb4\x8a\', \'\xe7\x93\xb7\', \'\xe7\xbe\x94\', \'\xe7\x83\x99\',\n    \'\xe6\xb5\xa6\', \'\xe6\xb6\xa1\', \'\xe6\xb6\xa3\', \'\xe6\xb6\xa4\', \'\xe6\xb6\xa7\', \'\xe6\xb6\x95\', \'\xe6\xb6\xa9\', \'\xe6\x82\x8d\', \'\xe6\x82\xaf\', \'\xe7\xaa\x8d\', \'\xe8\xaf\xba\', \'\xe8\xaf\xbd\', \'\xe8\xa2\x92\', \'\xe8\xb0\x86\', \'\xe7\xa5\x9f\', \'\xe6\x81\x95\', \'\xe5\xa8\xa9\', \'\xe9\xaa\x8f\', \'\xe7\x90\x90\', \'\xe9\xba\xb8\',\n    \'\xe7\x90\x89\', \'\xe7\x90\x85\', \'\xe6\x8e\xaa\', \'\xe6\x8d\xba\', \'\xe6\x8d\xb6\', \'\xe8\xb5\xa6\', \'\xe5\x9f\xa0\', \'\xe6\x8d\xbb\', \'\xe6\x8e\x90\', \'\xe6\x8e\x82\', \'\xe6\x8e\x96\', \'\xe6\x8e\xb7\', \'\xe6\x8e\xb8\', \'\xe6\x8e\xba\', \'\xe5\x8b\x98\', \'\xe8\x81\x8a\', \'\xe5\xa8\xb6\', \'\xe8\x8f\xb1\', \'\xe8\x8f\xb2\', \'\xe8\x90\x8e\',\n    \'\xe8\x8f\xa9\', \'\xe8\x90\xa4\', \'\xe4\xb9\xbe\', \'\xe8\x90\xa7\', \'\xe8\x90\xa8\', \'\xe8\x8f\x87\', \'\xe5\xbd\xac\', \'\xe6\xa2\x97\', \'\xe6\xa2\xa7\', \'\xe6\xa2\xad\', \'\xe6\x9b\xb9\', \'\xe9\x85\x9d\', \'\xe9\x85\x97\', \'\xe5\x8e\xa2\', \'\xe7\xa1\x85\', \'\xe7\xa1\x95\', \'\xe5\xa5\xa2\', \'\xe7\x9b\x94\', \'\xe5\x8c\xbe\', \'\xe9\xa2\x85\',\n    \'\xe5\xbd\xaa\', \'\xe7\x9c\xb6\', \'\xe6\x99\xa4\', \'\xe6\x9b\xbc\', \'\xe6\x99\xa6\', \'\xe5\x86\x95\', \'\xe5\x95\xa1\', \'\xe7\x95\xa6\', \'\xe8\xb6\xbe\', \'\xe5\x95\x83\', \'\xe8\x9b\x86\', \'\xe8\x9a\xaf\', \'\xe8\x9b\x89\', \'\xe8\x9b\x80\', \'\xe5\x94\xac\', \'\xe5\x94\xbe\', \'\xe5\x95\xa4\', \'\xe5\x95\xa5\', \'\xe5\x95\xb8\', \'\xe5\xb4\x8e\',\n    \'\xe9\x80\xbb\', \'\xe5\xb4\x94\', \'\xe5\xb4\xa9\', \'\xe5\xa9\xb4\', \'\xe8\xb5\x8a\', \'\xe9\x93\x90\', \'\xe9\x93\x9b\', \'\xe9\x93\x9d\', \'\xe9\x93\xa1\', \'\xe9\x93\xa3\', \'\xe9\x93\xad\', \'\xe7\x9f\xab\', \'\xe7\xa7\xb8\', \'\xe7\xa7\xbd\', \'\xe7\xac\x99\', \'\xe7\xac\xa4\', \'\xe5\x81\x8e\', \'\xe5\x82\x80\', \'\xe8\xba\xaf\', \'\xe5\x85\x9c\',\n    \'\xe8\xa1\x85\', \'\xe5\xbe\x98\', \'\xe5\xbe\x99\', \'\xe8\x88\xb6\', \'\xe8\x88\xb7\', \'\xe8\x88\xb5\', \'\xe6\x95\x9b\', \'\xe7\xbf\x8e\', \'\xe8\x84\xaf\', \'\xe9\x80\xb8\', \'\xe5\x87\xb0\', \'\xe7\x8c\x96\', \'\xe7\xa5\xad\', \'\xe7\x83\xb9\', \'\xe5\xba\xb6\', \'\xe5\xba\xb5\', \'\xe7\x97\x8a\', \'\xe9\x98\x8e\', \'\xe9\x98\x90\', \'\xe7\x9c\xb7\',\n    \'\xe7\x84\x8a\', \'\xe7\x84\x95\', \'\xe9\xb8\xbf\', \'\xe6\xb6\xaf\', \'\xe6\xb7\x91\', \'\xe6\xb7\x8c\', \'\xe6\xb7\xae\', \'\xe6\xb7\x86\', \'\xe6\xb8\x8a\', \'\xe6\xb7\xab\', \'\xe6\xb7\xb3\', \'\xe6\xb7\xa4\', \'\xe6\xb7\x80\', \'\xe6\xb6\xae\', \'\xe6\xb6\xb5\', \'\xe6\x83\xa6\', \'\xe6\x82\xb4\', \'\xe6\x83\x8b\', \'\xe5\xaf\x82\', \'\xe7\xaa\x92\',\n    \'\xe8\xb0\x8d\', \'\xe8\xb0\x90\', \'\xe8\xa3\x86\', \'\xe8\xa2\xb1\', \'\xe7\xa5\xb7\', \'\xe8\xb0\x92\', \'\xe8\xb0\x93\', \'\xe8\xb0\x9a\', \'\xe5\xb0\x89\', \'\xe5\xa0\x95\', \'\xe9\x9a\x85\', \'\xe5\xa9\x89\', \'\xe9\xa2\x87\', \'\xe7\xbb\xb0\', \'\xe7\xbb\xb7\', \'\xe7\xbb\xbc\', \'\xe7\xbb\xbd\', \'\xe7\xbc\x80\', \'\xe5\xb7\xa2\', \'\xe7\x90\xb3\',\n    \'\xe7\x90\xa2\', \'\xe7\x90\xbc\', \'\xe6\x8f\x8d\', \'\xe5\xa0\xb0\', \'\xe6\x8f\xa9\', \'\xe6\x8f\xbd\', \'\xe6\x8f\x96\', \'\xe5\xbd\xad\', \'\xe6\x8f\xa3\', \'\xe6\x90\x80\', \'\xe6\x90\x93\', \'\xe5\xa3\xb9\', \'\xe6\x90\x94\', \'\xe8\x91\xab\', \'\xe5\x8b\x9f\', \'\xe8\x92\x8b\', \'\xe8\x92\x82\', \'\xe9\x9f\xa9\', \'\xe6\xa3\xb1\', \'\xe6\xa4\xb0\',\n    \'\xe7\x84\x9a\', \'\xe6\xa4\x8e\', \'\xe6\xa3\xba\', \'\xe6\xa6\x94\', \'\xe6\xa4\xad\', \'\xe7\xb2\x9f\', \'\xe6\xa3\x98\', \'\xe9\x85\xa3\', \'\xe9\x85\xa5\', \'\xe7\xa1\x9d\', \'\xe7\xa1\xab\', \'\xe9\xa2\x8a\', \'\xe9\x9b\xb3\', \'\xe7\xbf\x98\', \'\xe5\x87\xbf\', \'\xe6\xa3\xa0\', \'\xe6\x99\xb0\', \'\xe9\xbc\x8e\', \'\xe5\x96\xb3\', \'\xe9\x81\x8f\',\n    \'\xe6\x99\xbe\', \'\xe7\x95\xb4\', \'\xe8\xb7\x8b\', \'\xe8\xb7\x9b\', \'\xe8\x9b\x94\', \'\xe8\x9c\x92\', \'\xe8\x9b\xa4\', \'\xe9\xb9\x83\', \'\xe5\x96\xbb\', \'\xe5\x95\xbc\', \'\xe5\x96\xa7\', \'\xe5\xb5\x8c\', \'\xe8\xb5\x8b\', \'\xe8\xb5\x8e\', \'\xe8\xb5\x90\', \'\xe9\x94\x89\', \'\xe9\x94\x8c\', \'\xe7\x94\xa5\', \'\xe6\x8e\xb0\', \'\xe6\xb0\xae\',\n    \'\xe6\xb0\xaf\', \'\xe9\xbb\x8d\', \'\xe7\xad\x8f\', \'\xe7\x89\x8d\', \'\xe7\xb2\xa4\', \'\xe9\x80\xbe\', \'\xe8\x85\x8c\', \'\xe8\x85\x8b\', \'\xe8\x85\x95\', \'\xe7\x8c\xa9\', \'\xe7\x8c\xac\', \'\xe6\x83\xab\', \'\xe6\x95\xa6\', \'\xe7\x97\x98\', \'\xe7\x97\xa2\', \'\xe7\x97\xaa\', \'\xe7\xab\xa3\', \'\xe7\xbf\x94\', \'\xe5\xa5\xa0\', \'\xe9\x81\x82\',\n    \'\xe7\x84\x99\', \'\xe6\xbb\x9e\', \'\xe6\xb9\x98\', \'\xe6\xb8\xa4\', \'\xe6\xb8\xba\', \'\xe6\xba\x83\', \'\xe6\xba\x85\', \'\xe6\xb9\x83\', \'\xe6\x84\x95\', \'\xe6\x83\xb6\', \'\xe5\xaf\x93\', \'\xe7\xaa\x96\', \'\xe7\xaa\x98\', \'\xe9\x9b\x87\', \'\xe8\xb0\xa4\', \'\xe7\x8a\x80\', \'\xe9\x9a\x98\', \'\xe5\xaa\x92\', \'\xe5\xaa\x9a\', \'\xe5\xa9\xbf\',\n    \'\xe7\xbc\x85\', \'\xe7\xbc\x86\', \'\xe7\xbc\x94\', \'\xe7\xbc\x95\', \'\xe9\xaa\x9a\', \'\xe7\x91\x9f\', \'\xe9\xb9\x89\', \'\xe7\x91\xb0\', \'\xe6\x90\xaa\', \'\xe8\x81\x98\', \'\xe6\x96\x9f\', \'\xe9\x9d\xb4\', \'\xe9\x9d\xb6\', \'\xe8\x93\x96\', \'\xe8\x92\xbf\', \'\xe8\x92\xb2\', \'\xe8\x93\x89\', \'\xe6\xa5\x94\', \'\xe6\xa4\xbf\', \'\xe6\xa5\xb7\',\n    \'\xe6\xa6\x84\', \'\xe6\xa5\x9e\', \'\xe6\xa5\xa3\', \'\xe9\x85\xaa\', \'\xe7\xa2\x98\', \'\xe7\xa1\xbc\', \'\xe7\xa2\x89\', \'\xe8\xbe\x90\', \'\xe8\xbe\x91\', \'\xe9\xa2\x91\', \'\xe7\x9d\xb9\', \'\xe7\x9d\xa6\', \'\xe7\x9e\x84\', \'\xe5\x97\x9c\', \'\xe5\x97\xa6\', \'\xe6\x9a\x87\', \'\xe7\x95\xb8\', \'\xe8\xb7\xb7\', \'\xe8\xb7\xba\', \'\xe8\x9c\x88\',\n    \'\xe8\x9c\x97\', \'\xe8\x9c\x95\', \'\xe8\x9b\xb9\', \'\xe5\x97\x85\', \'\xe5\x97\xa1\', \'\xe5\x97\xa4\', \'\xe7\xbd\xb2\', \'\xe8\x9c\x80\', \'\xe5\xb9\x8c\', \'\xe9\x94\x9a\', \'\xe9\x94\xa5\', \'\xe9\x94\xa8\', \'\xe9\x94\xad\', \'\xe9\x94\xb0\', \'\xe7\xa8\x9a\', \'\xe9\xa2\x93\', \'\xe7\xad\xb7\', \'\xe9\xad\x81\', \'\xe8\xa1\x99\', \'\xe8\x85\xbb\',\n    \'\xe8\x85\xae\', \'\xe8\x85\xba\', \'\xe9\xb9\x8f\', \'\xe8\x82\x84\', \'\xe7\x8c\xbf\', \'\xe9\xa2\x96\', \'\xe7\x85\x9e\', \'\xe9\x9b\x8f\', \'\xe9\xa6\x8d\', \'\xe9\xa6\x8f\', \'\xe7\xa6\x80\', \'\xe7\x97\xb9\', \'\xe5\xbb\x93\', \'\xe7\x97\xb4\', \'\xe9\x9d\x96\', \'\xe8\xaa\x8a\', \'\xe6\xbc\x93\', \'\xe6\xba\xa2\', \'\xe6\xba\xaf\', \'\xe6\xba\xb6\',\n    \'\xe6\xbb\x93\', \'\xe6\xba\xba\', \'\xe5\xaf\x9e\', \'\xe7\xaa\xa5\', \'\xe7\xaa\x9f\', \'\xe5\xaf\x9d\', \'\xe8\xa4\x82\', \'\xe8\xa3\xb8\', \'\xe8\xb0\xac\', \'\xe5\xaa\xb3\', \'\xe5\xab\x89\', \'\xe7\xbc\x9a\', \'\xe7\xbc\xa4\', \'\xe5\x89\xbf\', \'\xe8\xb5\x98\', \'\xe7\x86\xac\', \'\xe8\xb5\xab\', \'\xe8\x94\xab\', \'\xe6\x91\xb9\', \'\xe8\x94\x93\',\n    \'\xe8\x94\x97\', \'\xe8\x94\xbc\', \'\xe7\x86\x99\', \'\xe8\x94\x9a\', \'\xe5\x85\xa2\', \'\xe6\xa6\x9b\', \'\xe6\xa6\x95\', \'\xe9\x85\xb5\', \'\xe7\xa2\x9f\', \'\xe7\xa2\xb4\', \'\xe7\xa2\xb1\', \'\xe7\xa2\xb3\', \'\xe8\xbe\x95\', \'\xe8\xbe\x96\', \'\xe9\x9b\x8c\', \'\xe5\xa2\x85\', \'\xe5\x98\x81\', \'\xe8\xb8\x8a\', \'\xe8\x9d\x89\', \'\xe5\x98\x80\',\n    \'\xe5\xb9\x94\', \'\xe9\x95\x80\', \'\xe8\x88\x94\', \'\xe7\x86\x8f\', \'\xe7\xae\x8d\', \'\xe7\xae\x95\', \'\xe7\xae\xab\', \'\xe8\x88\x86\', \'\xe5\x83\xa7\', \'\xe5\xad\xb5\', \'\xe7\x98\xa9\', \'\xe7\x98\x9f\', \'\xe5\xbd\xb0\', \'\xe7\xb2\xb9\', \'\xe6\xbc\xb1\', \'\xe6\xbc\xa9\', \'\xe6\xbc\xbe\', \'\xe6\x85\xb7\', \'\xe5\xaf\xa1\', \'\xe5\xaf\xa5\',\n    \'\xe8\xb0\xad\', \'\xe8\xa4\x90\', \'\xe8\xa4\xaa\', \'\xe9\x9a\xa7\', \'\xe5\xab\xa1\', \'\xe7\xbc\xa8\', \'\xe6\x92\xb5\', \'\xe6\x92\xa9\', \'\xe6\x92\xae\', \'\xe6\x92\xac\', \'\xe6\x93\x92\', \'\xe5\xa2\xa9\', \'\xe6\x92\xb0\', \'\xe9\x9e\x8d\', \'\xe8\x95\x8a\', \'\xe8\x95\xb4\', \'\xe6\xa8\x8a\', \'\xe6\xa8\x9f\', \'\xe6\xa9\x84\', \'\xe6\x95\xb7\',\n    \'\xe8\xb1\x8c\', \'\xe9\x86\x87\', \'\xe7\xa3\x95\', \'\xe7\xa3\x85\', \'\xe7\xa2\xbe\', \'\xe6\x86\x8b\', \'\xe5\x98\xb6\', \'\xe5\x98\xb2\', \'\xe5\x98\xb9\', \'\xe8\x9d\xa0\', \'\xe8\x9d\x8e\', \'\xe8\x9d\x8c\', \'\xe8\x9d\x97\', \'\xe8\x9d\x99\', \'\xe5\x98\xbf\', \'\xe5\xb9\xa2\', \'\xe9\x95\x8a\', \'\xe9\x95\x90\', \'\xe7\xa8\xbd\', \'\xe7\xaf\x93\',\n    \'\xe8\x86\x98\', \'\xe9\xb2\xa4\', \'\xe9\xb2\xab\', \'\xe8\xa4\x92\', \'\xe7\x98\xaa\', \'\xe7\x98\xa4\', \'\xe7\x98\xab\', \'\xe5\x87\x9b\', \'\xe6\xbe\x8e\', \'\xe6\xbd\xad\', \'\xe6\xbd\xa6\', \'\xe6\xbe\xb3\', \'\xe6\xbd\x98\', \'\xe6\xbe\x88\', \'\xe6\xbe\x9c\', \'\xe6\xbe\x84\', \'\xe6\x86\x94\', \'\xe6\x87\x8a\', \'\xe6\x86\x8e\', \'\xe7\xbf\xa9\',\n    \'\xe8\xa4\xa5\', \'\xe8\xb0\xb4\', \'\xe9\xb9\xa4\', \'\xe6\x86\xa8\', \'\xe5\xb1\xa5\', \'\xe5\xac\x89\', \'\xe8\xb1\xab\', \'\xe7\xbc\xad\', \'\xe6\x92\xbc\', \'\xe6\x93\x82\', \'\xe6\x93\x85\', \'\xe8\x95\xbe\', \'\xe8\x96\x9b\', \'\xe8\x96\x87\', \'\xe6\x93\x8e\', \'\xe7\xbf\xb0\', \'\xe5\x99\xa9\', \'\xe6\xa9\xb1\', \'\xe6\xa9\x99\', \'\xe7\x93\xa2\',\n    \'\xe8\x9f\xa5\', \'\xe9\x9c\x8d\', \'\xe9\x9c\x8e\', \'\xe8\xbe\x99\', \'\xe5\x86\x80\', \'\xe8\xb8\xb1\', \'\xe8\xb9\x82\', \'\xe8\x9f\x86\', \'\xe8\x9e\x83\', \'\xe8\x9e\x9f\', \'\xe5\x99\xaa\', \'\xe9\xb9\xa6\', \'\xe9\xbb\x94\', \'\xe7\xa9\x86\', \'\xe7\xaf\xa1\', \'\xe7\xaf\xb7\', \'\xe7\xaf\x99\', \'\xe7\xaf\xb1\', \'\xe5\x84\x92\', \'\xe8\x86\xb3\',\n    \'\xe9\xb2\xb8\', \'\xe7\x98\xbe\', \'\xe7\x98\xb8\', \'\xe7\xb3\x99\', \'\xe7\x87\x8e\', \'\xe6\xbf\x92\', \'\xe6\x86\xbe\', \'\xe6\x87\x88\', \'\xe7\xaa\xbf\', \'\xe7\xbc\xb0\', \'\xe5\xa3\x95\', \'\xe8\x97\x90\', \'\xe6\xaa\xac\', \'\xe6\xaa\x90\', \'\xe6\xaa\xa9\', \'\xe6\xaa\x80\', \'\xe7\xa4\x81\', \'\xe7\xa3\xb7\', \'\xe4\xba\x86\', \'\xe7\x9e\xac\',\n    \'\xe7\x9e\xb3\', \'\xe7\x9e\xaa\', \'\xe6\x9b\x99\', \'\xe8\xb9\x8b\', \'\xe8\x9f\x8b\', \'\xe8\x9f\x80\', \'\xe5\x9a\x8e\', \'\xe8\xb5\xa1\', \'\xe9\x95\xa3\', \'\xe9\xad\x8f\', \'\xe7\xb0\x87\', \'\xe5\x84\xa1\', \'\xe5\xbe\xbd\', \'\xe7\x88\xb5\', \'\xe6\x9c\xa6\', \'\xe8\x87\x8a\', \'\xe9\xb3\x84\', \'\xe7\xb3\x9c\', \'\xe7\x99\x8c\', \'\xe6\x87\xa6\',\n    \'\xe8\xb1\x81\', \'\xe8\x87\x80\', \'\xe8\x97\x95\', \'\xe8\x97\xa4\', \'\xe7\x9e\xbb\', \'\xe5\x9a\xa3\', \'\xe9\xb3\x8d\', \'\xe7\x99\x9e\', \'\xe7\x80\x91\', \'\xe8\xa5\x9f\', \'\xe7\x92\xa7\', \'\xe6\x88\xb3\', \'\xe6\x94\x92\', \'\xe5\xad\xbd\', \'\xe8\x98\x91\', \'\xe8\x97\xbb\', \'\xe9\xb3\x96\', \'\xe8\xb9\xad\', \'\xe8\xb9\xac\', \'\xe7\xb0\xb8\',\n    \'\xe7\xb0\xbf\', \'\xe8\x9f\xb9\', \'\xe9\x9d\xa1\', \'\xe7\x99\xa3\', \'\xe7\xbe\xb9\', \'\xe9\xac\x93\', \'\xe6\x94\x98\', \'\xe8\xa0\x95\', \'\xe5\xb7\x8d\', \'\xe9\xb3\x9e\', \'\xe7\xb3\xaf\', \'\xe8\xad\xac\', \'\xe9\x9c\xb9\', \'\xe8\xba\x8f\', \'\xe9\xab\x93\', \'\xe8\x98\xb8\', \'\xe9\x95\xb6\', \'\xe7\x93\xa4\', \'\xe7\x9f\x97\', \'\xe5\x9c\xb3\',\n    \'\xe7\x8f\x8f\', \'\xe8\x95\x99\', \'\xe6\x97\xbb\', \'\xe6\xb6\x85\', \'\xe6\x94\xb8\', \'\xe5\x98\x9b\', \'\xe9\x86\xaa\', \'\xe7\xbc\xaa\', \'\xe5\x99\x97\', \'\xe7\x9e\xa8\', \'\xe9\x9d\xb3\', \'\xe5\xb8\xb7\', \'\xe5\xbe\xa8\',\n]\n\nFLOAT = [\'.\']\n\nSIMPLE_CATEGORY_MODEL = dict(\n    NUMERIC=NUMBER,\n    ALPHANUMERIC=NUMBER + ALPHA_LOWER + ALPHA_UPPER,\n    ALPHANUMERIC_LOWER=NUMBER + ALPHA_LOWER,\n    ALPHANUMERIC_UPPER=NUMBER + ALPHA_UPPER,\n    ALPHABET_LOWER=ALPHA_LOWER,\n    ALPHABET_UPPER=ALPHA_UPPER,\n    ALPHABET=ALPHA_LOWER + ALPHA_UPPER,\n    ARITHMETIC=NUMBER + ARITHMETIC,\n    FLOAT=NUMBER + FLOAT,\n    CHS_3500=CHINESE_3500,\n    ALPHANUMERIC_MIX_CHS_3500_LOWER=NUMBER + ALPHA_LOWER + CHINESE_3500\n)\n\n\ndef encode_maps(source):\n    return {category: i for i, category in enumerate(source, 0)}\n\n\n@unique\nclass ModelScene(Enum):\n    """"""\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x9c\xba\xe6\x99\xaf\xe6\x9e\x9a\xe4\xb8\xbe""""""\n    Classification = \'Classification\'\n\n\n@unique\nclass ModelField(Enum):\n    """"""\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xb1\xbb\xe5\x88\xab\xe6\x9e\x9a\xe4\xb8\xbe""""""\n    Image = \'Image\'\n    Text = \'Text\'\n\n\nMODEL_SCENE_MAP = {\n    \'Classification\': ModelScene.Classification\n}\n\nMODEL_FIELD_MAP = {\n    \'Image\': ModelField.Image,\n    \'Text\': ModelField.Text\n}\n\n\nclass ModelConfig(object):\n\n    @staticmethod\n    def category_extract(param):\n        if isinstance(param, list):\n            return param\n        if isinstance(param, str):\n            if param in SIMPLE_CATEGORY_MODEL.keys():\n                return SIMPLE_CATEGORY_MODEL.get(param)\n            raise ValueError(\n                ""Category set configuration error, customized category set should be list type""\n            )\n\n    @property\n    def model_conf(self) -> dict:\n        if self.model_content:\n            return self.model_content\n        with open(self.model_conf_path, \'r\', encoding=""utf-8"") as sys_fp:\n            sys_stream = sys_fp.read()\n            return yaml.load(sys_stream, Loader=yaml.SafeLoader)\n\n    def __init__(self, model_conf_path=None, model_content=None):\n        self.model_content = model_content\n        self.model_path = model_conf_path\n        self.graph_path = os.path.dirname(self.model_path) if model_conf_path else """"\n        self.model_conf_path = model_conf_path\n        self.model_conf_demo = \'model_demo.yaml\'\n\n        """"""MODEL""""""\n        self.model_root: dict = self.model_conf[\'Model\']\n        self.model_name: str = self.model_root.get(\'ModelName\')\n        self.model_version: float = self.model_root.get(\'Version\')\n        self.model_version = self.model_version if self.model_version else 1.0\n        self.model_field_param: str = self.model_root.get(\'ModelField\')\n        self.model_field: ModelField = self.param_convert(\n            source=self.model_field_param,\n            param_map=MODEL_FIELD_MAP,\n            text=""Current model field ({model_field}) is not supported"".format(model_field=self.model_field_param),\n            code=50002\n        )\n\n        self.model_scene_param: str = self.model_root.get(\'ModelScene\')\n\n        self.model_scene: ModelScene = self.param_convert(\n            source=self.model_scene_param,\n            param_map=MODEL_SCENE_MAP,\n            text=""Current model scene ({model_scene}) is not supported"".format(model_scene=self.model_scene_param),\n            code=50001\n        )\n\n        """"""SYSTEM""""""\n        self.checkpoint_tag = \'checkpoint\'\n        self.system_root: dict = self.model_conf[\'System\']\n        self.memory_usage: float = self.system_root.get(\'MemoryUsage\')\n\n        """"""FIELD PARAM - IMAGE""""""\n        self.field_root: dict = self.model_conf[\'FieldParam\']\n        self.category_param = self.field_root.get(\'Category\')\n        self.category_value = self.category_extract(self.category_param)\n        if self.category_value is None:\n            raise Exception(\n                ""The category set type does not exist, there is no category set named {}"".format(self.category_param),\n            )\n        self.category: list = SPACE_TOKEN + self.category_value\n        self.category_num: int = len(self.category)\n        self.image_channel: int = self.field_root.get(\'ImageChannel\')\n        self.image_width: int = self.field_root.get(\'ImageWidth\')\n        self.image_height: int = self.field_root.get(\'ImageHeight\')\n        self.resize: list = self.field_root.get(\'Resize\')\n        self.output_split = self.field_root.get(\'OutputSplit\')\n        self.output_split = self.output_split if self.output_split else """"\n        self.corp_params = self.field_root.get(\'CorpParams\')\n        self.output_coord = self.field_root.get(\'OutputCoord\')\n        self.batch_model = self.field_root.get(\'BatchModel\')\n\n        """"""PRETREATMENT""""""\n        self.pretreatment_root = self.model_conf.get(\'Pretreatment\')\n        self.pre_binaryzation = self.get_var(self.pretreatment_root, \'Binaryzation\', -1)\n        self.pre_replace_transparent = self.get_var(self.pretreatment_root, \'ReplaceTransparent\', True)\n        self.pre_horizontal_stitching = self.get_var(self.pretreatment_root, \'HorizontalStitching\', False)\n        self.pre_concat_frames = self.get_var(self.pretreatment_root, \'ConcatFrames\', -1)\n        self.pre_blend_frames = self.get_var(self.pretreatment_root, \'BlendFrames\', -1)\n        self.exec_map = self.pretreatment_root.get(\'ExecuteMap\')\n\n        """"""COMPILE_MODEL""""""\n        if self.graph_path:\n            self.compile_model_path = os.path.join(self.graph_path, \'{}.onnx\'.format(self.model_name))\n            if not os.path.exists(self.compile_model_path):\n                if not os.path.exists(self.graph_path):\n                    os.makedirs(self.graph_path)\n                raise ValueError(\n                    \'{} not found, please put the trained model in the current directory.\'.format(self.compile_model_path)\n                )\n            else:\n                self.model_exists = True\n        else:\n            self.model_exists = True if self.model_content else False\n            self.compile_model_path = """"\n\n    @staticmethod\n    def param_convert(source, param_map: dict, text, code, default=None):\n        if source is None:\n            return default\n        if source not in param_map.keys():\n            raise Exception(text)\n        return param_map[source]\n\n    def size_match(self, size_str):\n        return size_str == self.size_string\n\n    @staticmethod\n    def get_var(src: dict, name: str, default=None):\n        if not src:\n            return default\n        return src.get(name)\n\n    @property\n    def size_string(self):\n        return ""{}x{}"".format(self.image_width, self.image_height)\n\n\nclass Model(object):\n    model_conf: ModelConfig\n    graph_bytes: object = None\n\n    def __init__(self, conf_path: str, source_bytes: bytes = None, key=None):\n        if conf_path:\n            self.model_conf = ModelConfig(model_conf_path=conf_path)\n            # self.graph_bytes = self.model_conf.compile_model_path\n        if source_bytes:\n            model_conf, self.graph_bytes = self.parse_model(source_bytes, key)\n            self.model_conf = ModelConfig(model_content=model_conf)\n\n    @staticmethod\n    def parse_model(source_bytes: bytes, key=None):\n        split_tag = b\'-#||#-\'\n\n        if not key:\n            key = [b""_____"" + i.encode(""utf8"") + b""_____"" for i in ""&coriander""]\n        if isinstance(key, str):\n            key = [b""_____"" + i.encode(""utf8"") + b""_____"" for i in key]\n        key_len_int = len(key)\n        model_bytes_list = []\n        graph_bytes_list = []\n        slice_index = source_bytes.index(key[0])\n        split_tag_len = len(split_tag)\n        slice_0 = source_bytes[0: slice_index].split(split_tag)\n        model_slice_len = len(slice_0[1])\n        graph_slice_len = len(slice_0[0])\n        slice_len = split_tag_len + model_slice_len + graph_slice_len\n\n        for i in range(key_len_int - 1):\n            slice_index = source_bytes.index(key[i])\n            print(slice_index, slice_index - slice_len)\n            slices = source_bytes[slice_index - slice_len: slice_index].split(split_tag)\n            model_bytes_list.append(slices[1])\n            graph_bytes_list.append(slices[0])\n        slices = source_bytes.split(key[-2])[1][:-len(key[-1])].split(split_tag)\n\n        model_bytes_list.append(slices[1])\n        graph_bytes_list.append(slices[0])\n        model_bytes = b"""".join(model_bytes_list)\n        model_conf: dict = pickle.loads(model_bytes)\n        graph_bytes: bytes = b"""".join(graph_bytes_list)\n        return model_conf, graph_bytes\n\n\nclass GraphSession(object):\n    def __init__(self, model: Model):\n        self.model_conf = model.model_conf\n        self.size_str = self.model_conf.size_string\n        self.model_name = self.model_conf.model_name\n        self.graph_name = self.model_conf.model_name\n        self.version = self.model_conf.model_version\n        self.graph_bytes = model.graph_bytes\n        self.sess = ort.InferenceSession(\n            self.model_conf.compile_model_path if not model.graph_bytes else model.graph_bytes\n        )\n\n\nclass Interface(object):\n\n    def __init__(self, graph_session: GraphSession):\n        self.graph_sess = graph_session\n        self.model_conf = graph_session.model_conf\n        self.size_str = self.model_conf.size_string\n        self.graph_name = self.graph_sess.graph_name\n        self.version = self.graph_sess.version\n        self.model_category = self.model_conf.category\n        if self.graph_sess.sess:\n            self.sess = self.graph_sess.sess\n\n    @property\n    def name(self):\n        return self.graph_name\n\n    @property\n    def size(self):\n        return self.size_str\n\n    def predict_batch(self, image_batch, output_split=None):\n        predict_text = self.predict_func(\n            image_batch,\n            self.sess,\n            self.model_conf,\n            output_split\n        )\n        return predict_text\n\n    @staticmethod\n    def decode_maps(categories):\n        return {index: category for index, category in enumerate(categories, 0)}\n\n    def predict_func(self, image_batch, _sess, model: ModelConfig, output_split=None):\n        if isinstance(image_batch, list):\n            image_batch = np.asarray(image_batch)\n        if output_split is None:\n            output_split = model.output_split\n\n        dense_decoded_code = _sess.run([""dense_decoded:0""], input_feed={\n            ""input:0"": image_batch,\n        })\n        decoded_expression = []\n        for item in dense_decoded_code[0]:\n            expression = \'\'\n\n            for i in item:\n                if i == -1 or i == model.category_num:\n                    expression += \'\'\n                else:\n                    expression += self.decode_maps(model.category)[i]\n            decoded_expression.append(expression)\n        return output_split.join(decoded_expression) if len(decoded_expression) > 1 else decoded_expression[0]\n\n\nclass Pretreatment(object):\n\n    def __init__(self, origin):\n        self.origin = origin\n\n    def get(self):\n        return self.origin\n\n    def binarization(self, value, modify=False):\n        ret, _binarization = cv2.threshold(self.origin, value, 255, cv2.THRESH_BINARY)\n        if modify:\n            self.origin = _binarization\n        return _binarization\n\n    @staticmethod\n    def preprocessing(image, binaryzation=-1):\n        pretreatment = Pretreatment(image)\n        if binaryzation > 0:\n            pretreatment.binarization(binaryzation, True)\n        return pretreatment.get()\n\n    @staticmethod\n    def preprocessing_by_func(exec_map, key, src_arr):\n        if not exec_map:\n            return src_arr\n        target_arr = cv2.cvtColor(src_arr, cv2.COLOR_RGB2BGR)\n        for sentence in exec_map.get(key):\n            if sentence.startswith(""@@""):\n                target_arr = eval(sentence[2:])\n            elif sentence.startswith(""$$""):\n                exec(sentence[2:])\n        return cv2.cvtColor(target_arr, cv2.COLOR_BGR2RGB)\n\n\nclass ImageUtils(object):\n\n    @staticmethod\n    def get_bytes_batch(image_bytes):\n        try:\n            bytes_batch = [image_bytes]\n        except binascii.Error:\n            return None, ""INVALID_BASE64_STRING""\n        what_img = [ImageUtils.test_image(i) for i in bytes_batch]\n        if None in what_img:\n            return None, ""INVALID_IMAGE_FORMAT""\n        return bytes_batch, ""SUCCESS""\n\n    @staticmethod\n    def get_image_batch(model: ModelConfig, bytes_batch, param_key=None):\n        # Note that there are two return objects here.\n        # 1.image_batch, 2.response\n\n        def load_image(image_bytes):\n            data_stream = io.BytesIO(image_bytes)\n            pil_image = PIL_Image.open(data_stream)\n            rgb = pil_image.split()\n            size = pil_image.size\n\n            gif_handle = model.pre_concat_frames != -1 or model.pre_blend_frames != -1\n\n            if len(rgb) > 3 and model.pre_replace_transparent and gif_handle:\n                background = PIL_Image.new(\'RGB\', pil_image.size, (255, 255, 255))\n                background.paste(pil_image, (0, 0, size[0], size[1]), pil_image)\n                pil_image = background\n\n            im = np.asarray(pil_image)\n\n            if model.image_channel == 1 and len(im.shape) == 3:\n                im = cv2.cvtColor(im, cv2.COLOR_RGB2GRAY)\n\n            im = Pretreatment.preprocessing_by_func(\n                exec_map=model.exec_map,\n                key=param_key,\n                src_arr=im\n            )\n\n            im = Pretreatment.preprocessing(\n                image=im,\n                binaryzation=model.pre_binaryzation,\n            )\n\n            if model.pre_horizontal_stitching:\n                up_slice = im[0: int(size[1] / 2), 0: size[0]]\n                down_slice = im[int(size[1] / 2): size[1], 0: size[0]]\n                im = np.concatenate((up_slice, down_slice), axis=1)\n\n            image = im.astype(np.float32)\n            if model.resize[0] == -1:\n                ratio = model.resize[1] / size[1]\n                resize_width = int(ratio * size[0])\n                image = cv2.resize(image, (resize_width, model.resize[1]))\n            else:\n                image = cv2.resize(image, (model.resize[0], model.resize[1]))\n            image = image.swapaxes(0, 1)\n            return (image[:, :, np.newaxis] if model.image_channel == 1 else image[:, :]) / 255.\n\n        try:\n            image_batch = [load_image(i) for i in bytes_batch]\n            return image_batch, ""SUCCESS""\n        except OSError:\n            return None, ""IMAGE_DAMAGE""\n        except ValueError as _e:\n            print(_e)\n            return None, ""IMAGE_SIZE_NOT_MATCH_GRAPH""\n\n    @staticmethod\n    def size_of_image(image_bytes: bytes):\n        _null_size = tuple((-1, -1))\n        try:\n            data_stream = io.BytesIO(image_bytes)\n            size = PIL_Image.open(data_stream).size\n            return size\n        except OSError:\n            return _null_size\n        except ValueError:\n            return _null_size\n\n    @staticmethod\n    def test_image(h):\n        """"""JPEG""""""\n        if h[:3] == b""\\xff\\xd8\\xff"":\n            return \'jpeg\'\n        """"""PNG""""""\n        if h[:8] == b""\\211PNG\\r\\n\\032\\n"":\n            return \'png\'\n        """"""GIF (\'87 and \'89 variants)""""""\n        if h[:6] in (b\'GIF87a\', b\'GIF89a\'):\n            return \'gif\'\n        """"""TIFF (can be in Motorola or Intel byte order)""""""\n        if h[:2] in (b\'MM\', b\'II\'):\n            return \'tiff\'\n        if h[:2] == b\'BM\':\n            return \'bmp\'\n        """"""SGI image library""""""\n        if h[:2] == b\'\\001\\332\':\n            return \'rgb\'\n        """"""PBM (portable bitmap)""""""\n        if len(h) >= 3 and \\\n                h[0] == b\'P\' and h[1] in b\'14\' and h[2] in b\' \\t\\n\\r\':\n            return \'pbm\'\n        """"""PGM (portable graymap)""""""\n        if len(h) >= 3 and \\\n                h[0] == b\'P\' and h[1] in b\'25\' and h[2] in b\' \\t\\n\\r\':\n            return \'pgm\'\n        """"""PPM (portable pixmap)""""""\n        if len(h) >= 3 and h[0] == b\'P\' and h[1] in b\'36\' and h[2] in b\' \\t\\n\\r\':\n            return \'ppm\'\n        """"""Sun raster file""""""\n        if h[:4] == b\'\\x59\\xA6\\x6A\\x95\':\n            return \'rast\'\n        """"""X bitmap (X10 or X11)""""""\n        s = b\'#define \'\n        if h[:len(s)] == s:\n            return \'xbm\'\n        return None\n\n\nclass SDK(object):\n\n    def __init__(self, conf_path=None, model_entity: bytes = None):\n        if not conf_path and not model_entity:\n            raise ValueError(\'One of parameters conf_path and model_entity must be filled\')\n        model = Model(conf_path=conf_path, source_bytes=model_entity)\n        self.model_conf = model.model_conf\n        self.graph_session = GraphSession(model)\n        self.interface = Interface(self.graph_session)\n\n    def predict(self, image_bytes, param_key=None):\n        bytes_batch, message = ImageUtils.get_bytes_batch(image_bytes)\n        if not bytes_batch:\n            raise ValueError(message)\n        image_batch, message = ImageUtils.get_image_batch(self.model_conf, bytes_batch, param_key=param_key)\n        if not image_batch:\n            raise ValueError(message)\n        result = self.interface.predict_batch(image_batch, None)\n        return result\n\n\nif __name__ == \'__main__\':\n    # FROM PATH\n    # sdk = SDK(conf_path=r""model.yaml"")\n    # with open(r""H:\\TrainSet\\1541187040676.jpg"", ""rb"") as f:\n    #     b = f.read()\n    # for i in [b] * 1000:\n    #     t1 = time.time()\n    #     print(sdk.predict(b), (time.time() - t1) * 1000)\n\n    # FROM BYTES\n    with open(r""model.pl"", ""rb"") as f:\n        b = f.read()\n    sdk = SDK(model_entity=b)\n    with open(r""1540868881850.jpg"", ""rb"") as f:\n        b = f.read()\n    for i in [b] * 1000:\n        t1 = time.time()\n        print(sdk.predict(b), (time.time() - t1) * 1000)\n'"
sdk/pb/__init__.py,0,b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>'
sdk/pb/sdk.py,9,"b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>\nimport io\nimport os\nimport cv2\nimport time\nimport pickle\nimport yaml\nimport binascii\nimport numpy as np\nimport PIL.Image as PIL_Image\nfrom enum import Enum, unique\nimport tensorflow as tf\nfrom tensorflow.python.framework.errors_impl import NotFoundError\n\nSPACE_TOKEN = [\'\']\nNUMBER = [\'0\', \'1\', \'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\']\nALPHA_UPPER = [\'A\', \'B\', \'C\', \'D\', \'E\', \'F\', \'G\', \'H\', \'I\', \'J\', \'K\', \'L\', \'M\', \'N\', \'O\', \'P\', \'Q\', \'R\', \'S\', \'T\', \'U\',\n               \'V\', \'W\', \'X\', \'Y\', \'Z\']\nALPHA_LOWER = [\'a\', \'b\', \'c\', \'d\', \'e\', \'f\', \'g\', \'h\', \'i\', \'j\', \'k\', \'l\', \'m\', \'n\', \'o\', \'p\', \'q\', \'r\', \'s\', \'t\', \'u\',\n               \'v\', \'w\', \'x\', \'y\', \'z\']\nARITHMETIC = [\'(\', \')\', \'+\', \'-\', \'\xc3\x97\', \'\xc3\xb7\', \'=\']\nCHINESE_3500 = [\n    \'\xe4\xb8\x80\', \'\xe4\xb9\x99\', \'\xe4\xba\x8c\', \'\xe5\x8d\x81\', \'\xe4\xb8\x81\', \'\xe5\x8e\x82\', \'\xe4\xb8\x83\', \'\xe5\x8d\x9c\', \'\xe4\xba\xba\', \'\xe5\x85\xa5\', \'\xe5\x85\xab\', \'\xe4\xb9\x9d\', \'\xe5\x87\xa0\', \'\xe5\x84\xbf\', \'\xe4\xba\x86\', \'\xe5\x8a\x9b\', \'\xe4\xb9\x83\', \'\xe5\x88\x80\', \'\xe5\x8f\x88\', \'\xe4\xb8\x89\',\n    \'\xe4\xba\x8e\', \'\xe5\xb9\xb2\', \'\xe4\xba\x8f\', \'\xe5\xa3\xab\', \'\xe5\xb7\xa5\', \'\xe5\x9c\x9f\', \'\xe6\x89\x8d\', \'\xe5\xaf\xb8\', \'\xe4\xb8\x8b\', \'\xe5\xa4\xa7\', \'\xe4\xb8\x88\', \'\xe4\xb8\x8e\', \'\xe4\xb8\x87\', \'\xe4\xb8\x8a\', \'\xe5\xb0\x8f\', \'\xe5\x8f\xa3\', \'\xe5\xb7\xbe\', \'\xe5\xb1\xb1\', \'\xe5\x8d\x83\', \'\xe4\xb9\x9e\',\n    \'\xe5\xb7\x9d\', \'\xe4\xba\xbf\', \'\xe4\xb8\xaa\', \'\xe5\x8b\xba\', \'\xe4\xb9\x85\', \'\xe5\x87\xa1\', \'\xe5\x8f\x8a\', \'\xe5\xa4\x95\', \'\xe4\xb8\xb8\', \'\xe4\xb9\x88\', \'\xe5\xb9\xbf\', \'\xe4\xba\xa1\', \'\xe9\x97\xa8\', \'\xe4\xb9\x89\', \'\xe4\xb9\x8b\', \'\xe5\xb0\xb8\', \'\xe5\xbc\x93\', \'\xe5\xb7\xb1\', \'\xe5\xb7\xb2\', \'\xe5\xad\x90\',\n    \'\xe5\x8d\xab\', \'\xe4\xb9\x9f\', \'\xe5\xa5\xb3\', \'\xe9\xa3\x9e\', \'\xe5\x88\x83\', \'\xe4\xb9\xa0\', \'\xe5\x8f\x89\', \'\xe9\xa9\xac\', \'\xe4\xb9\xa1\', \'\xe4\xb8\xb0\', \'\xe7\x8e\x8b\', \'\xe4\xba\x95\', \'\xe5\xbc\x80\', \'\xe5\xa4\xab\', \'\xe5\xa4\xa9\', \'\xe6\x97\xa0\', \'\xe5\x85\x83\', \'\xe4\xb8\x93\', \'\xe4\xba\x91\', \'\xe6\x89\x8e\',\n    \'\xe8\x89\xba\', \'\xe6\x9c\xa8\', \'\xe4\xba\x94\', \'\xe6\x94\xaf\', \'\xe5\x8e\x85\', \'\xe4\xb8\x8d\', \'\xe5\xa4\xaa\', \'\xe7\x8a\xac\', \'\xe5\x8c\xba\', \'\xe5\x8e\x86\', \'\xe5\xb0\xa4\', \'\xe5\x8f\x8b\', \'\xe5\x8c\xb9\', \'\xe8\xbd\xa6\', \'\xe5\xb7\xa8\', \'\xe7\x89\x99\', \'\xe5\xb1\xaf\', \'\xe6\xaf\x94\', \'\xe4\xba\x92\', \'\xe5\x88\x87\',\n    \'\xe7\x93\xa6\', \'\xe6\xad\xa2\', \'\xe5\xb0\x91\', \'\xe6\x97\xa5\', \'\xe4\xb8\xad\', \'\xe5\x86\x88\', \'\xe8\xb4\x9d\', \'\xe5\x86\x85\', \'\xe6\xb0\xb4\', \'\xe8\xa7\x81\', \'\xe5\x8d\x88\', \'\xe7\x89\x9b\', \'\xe6\x89\x8b\', \'\xe6\xaf\x9b\', \'\xe6\xb0\x94\', \'\xe5\x8d\x87\', \'\xe9\x95\xbf\', \'\xe4\xbb\x81\', \'\xe4\xbb\x80\', \'\xe7\x89\x87\',\n    \'\xe4\xbb\x86\', \'\xe5\x8c\x96\', \'\xe4\xbb\x87\', \'\xe5\xb8\x81\', \'\xe4\xbb\x8d\', \'\xe4\xbb\x85\', \'\xe6\x96\xa4\', \'\xe7\x88\xaa\', \'\xe5\x8f\x8d\', \'\xe4\xbb\x8b\', \'\xe7\x88\xb6\', \'\xe4\xbb\x8e\', \'\xe4\xbb\x8a\', \'\xe5\x87\xb6\', \'\xe5\x88\x86\', \'\xe4\xb9\x8f\', \'\xe5\x85\xac\', \'\xe4\xbb\x93\', \'\xe6\x9c\x88\', \'\xe6\xb0\x8f\',\n    \'\xe5\x8b\xbf\', \'\xe6\xac\xa0\', \'\xe9\xa3\x8e\', \'\xe4\xb8\xb9\', \'\xe5\x8c\x80\', \'\xe4\xb9\x8c\', \'\xe5\x87\xa4\', \'\xe5\x8b\xbe\', \'\xe6\x96\x87\', \'\xe5\x85\xad\', \'\xe6\x96\xb9\', \'\xe7\x81\xab\', \'\xe4\xb8\xba\', \'\xe6\x96\x97\', \'\xe5\xbf\x86\', \'\xe8\xae\xa2\', \'\xe8\xae\xa1\', \'\xe6\x88\xb7\', \'\xe8\xae\xa4\', \'\xe5\xbf\x83\',\n    \'\xe5\xb0\xba\', \'\xe5\xbc\x95\', \'\xe4\xb8\x91\', \'\xe5\xb7\xb4\', \'\xe5\xad\x94\', \'\xe9\x98\x9f\', \'\xe5\x8a\x9e\', \'\xe4\xbb\xa5\', \'\xe5\x85\x81\', \'\xe4\xba\x88\', \'\xe5\x8a\x9d\', \'\xe5\x8f\x8c\', \'\xe4\xb9\xa6\', \'\xe5\xb9\xbb\', \'\xe7\x8e\x89\', \'\xe5\x88\x8a\', \'\xe7\xa4\xba\', \'\xe6\x9c\xab\', \'\xe6\x9c\xaa\', \'\xe5\x87\xbb\',\n    \'\xe6\x89\x93\', \'\xe5\xb7\xa7\', \'\xe6\xad\xa3\', \'\xe6\x89\x91\', \'\xe6\x89\x92\', \'\xe5\x8a\x9f\', \'\xe6\x89\x94\', \'\xe5\x8e\xbb\', \'\xe7\x94\x98\', \'\xe4\xb8\x96\', \'\xe5\x8f\xa4\', \'\xe8\x8a\x82\', \'\xe6\x9c\xac\', \'\xe6\x9c\xaf\', \'\xe5\x8f\xaf\', \'\xe4\xb8\x99\', \'\xe5\xb7\xa6\', \'\xe5\x8e\x89\', \'\xe5\x8f\xb3\', \'\xe7\x9f\xb3\',\n    \'\xe5\xb8\x83\', \'\xe9\xbe\x99\', \'\xe5\xb9\xb3\', \'\xe7\x81\xad\', \'\xe8\xbd\xa7\', \'\xe4\xb8\x9c\', \'\xe5\x8d\xa1\', \'\xe5\x8c\x97\', \'\xe5\x8d\xa0\', \'\xe4\xb8\x9a\', \'\xe6\x97\xa7\', \'\xe5\xb8\x85\', \'\xe5\xbd\x92\', \'\xe4\xb8\x94\', \'\xe6\x97\xa6\', \'\xe7\x9b\xae\', \'\xe5\x8f\xb6\', \'\xe7\x94\xb2\', \'\xe7\x94\xb3\', \'\xe5\x8f\xae\',\n    \'\xe7\x94\xb5\', \'\xe5\x8f\xb7\', \'\xe7\x94\xb0\', \'\xe7\x94\xb1\', \'\xe5\x8f\xb2\', \'\xe5\x8f\xaa\', \'\xe5\xa4\xae\', \'\xe5\x85\x84\', \'\xe5\x8f\xbc\', \'\xe5\x8f\xab\', \'\xe5\x8f\xa6\', \'\xe5\x8f\xa8\', \'\xe5\x8f\xb9\', \'\xe5\x9b\x9b\', \'\xe7\x94\x9f\', \'\xe5\xa4\xb1\', \'\xe7\xa6\xbe\', \'\xe4\xb8\x98\', \'\xe4\xbb\x98\', \'\xe4\xbb\x97\',\n    \'\xe4\xbb\xa3\', \'\xe4\xbb\x99\', \'\xe4\xbb\xac\', \'\xe4\xbb\xaa\', \'\xe7\x99\xbd\', \'\xe4\xbb\x94\', \'\xe4\xbb\x96\', \'\xe6\x96\xa5\', \'\xe7\x93\x9c\', \'\xe4\xb9\x8e\', \'\xe4\xb8\x9b\', \'\xe4\xbb\xa4\', \'\xe7\x94\xa8\', \'\xe7\x94\xa9\', \'\xe5\x8d\xb0\', \'\xe4\xb9\x90\', \'\xe5\x8f\xa5\', \'\xe5\x8c\x86\', \'\xe5\x86\x8c\', \'\xe7\x8a\xaf\',\n    \'\xe5\xa4\x96\', \'\xe5\xa4\x84\', \'\xe5\x86\xac\', \'\xe9\xb8\x9f\', \'\xe5\x8a\xa1\', \'\xe5\x8c\x85\', \'\xe9\xa5\xa5\', \'\xe4\xb8\xbb\', \'\xe5\xb8\x82\', \'\xe7\xab\x8b\', \'\xe9\x97\xaa\', \'\xe5\x85\xb0\', \'\xe5\x8d\x8a\', \'\xe6\xb1\x81\', \'\xe6\xb1\x87\', \'\xe5\xa4\xb4\', \'\xe6\xb1\x89\', \'\xe5\xae\x81\', \'\xe7\xa9\xb4\', \'\xe5\xae\x83\',\n    \'\xe8\xae\xa8\', \'\xe5\x86\x99\', \'\xe8\xae\xa9\', \'\xe7\xa4\xbc\', \'\xe8\xae\xad\', \'\xe5\xbf\x85\', \'\xe8\xae\xae\', \'\xe8\xae\xaf\', \'\xe8\xae\xb0\', \'\xe6\xb0\xb8\', \'\xe5\x8f\xb8\', \'\xe5\xb0\xbc\', \'\xe6\xb0\x91\', \'\xe5\x87\xba\', \'\xe8\xbe\xbd\', \'\xe5\xa5\xb6\', \'\xe5\xa5\xb4\', \'\xe5\x8a\xa0\', \'\xe5\x8f\xac\', \'\xe7\x9a\xae\',\n    \'\xe8\xbe\xb9\', \'\xe5\x8f\x91\', \'\xe5\xad\x95\', \'\xe5\x9c\xa3\', \'\xe5\xaf\xb9\', \'\xe5\x8f\xb0\', \'\xe7\x9f\x9b\', \'\xe7\xba\xa0\', \'\xe6\xaf\x8d\', \'\xe5\xb9\xbc\', \'\xe4\xb8\x9d\', \'\xe5\xbc\x8f\', \'\xe5\x88\x91\', \'\xe5\x8a\xa8\', \'\xe6\x89\x9b\', \'\xe5\xaf\xba\', \'\xe5\x90\x89\', \'\xe6\x89\xa3\', \'\xe8\x80\x83\', \'\xe6\x89\x98\',\n    \'\xe8\x80\x81\', \'\xe6\x89\xa7\', \'\xe5\xb7\xa9\', \'\xe5\x9c\xbe\', \'\xe6\x89\xa9\', \'\xe6\x89\xab\', \'\xe5\x9c\xb0\', \'\xe6\x89\xac\', \'\xe5\x9c\xba\', \'\xe8\x80\xb3\', \'\xe5\x85\xb1\', \'\xe8\x8a\x92\', \'\xe4\xba\x9a\', \'\xe8\x8a\x9d\', \'\xe6\x9c\xbd\', \'\xe6\x9c\xb4\', \'\xe6\x9c\xba\', \'\xe6\x9d\x83\', \'\xe8\xbf\x87\', \'\xe8\x87\xa3\',\n    \'\xe5\x86\x8d\', \'\xe5\x8d\x8f\', \'\xe8\xa5\xbf\', \'\xe5\x8e\x8b\', \'\xe5\x8e\x8c\', \'\xe5\x9c\xa8\', \'\xe6\x9c\x89\', \'\xe7\x99\xbe\', \'\xe5\xad\x98\', \'\xe8\x80\x8c\', \'\xe9\xa1\xb5\', \'\xe5\x8c\xa0\', \'\xe5\xa4\xb8\', \'\xe5\xa4\xba\', \'\xe7\x81\xb0\', \'\xe8\xbe\xbe\', \'\xe5\x88\x97\', \'\xe6\xad\xbb\', \'\xe6\x88\x90\', \'\xe5\xa4\xb9\',\n    \'\xe8\xbd\xa8\', \'\xe9\x82\xaa\', \'\xe5\x88\x92\', \'\xe8\xbf\x88\', \'\xe6\xaf\x95\', \'\xe8\x87\xb3\', \'\xe6\xad\xa4\', \'\xe8\xb4\x9e\', \'\xe5\xb8\x88\', \'\xe5\xb0\x98\', \'\xe5\xb0\x96\', \'\xe5\x8a\xa3\', \'\xe5\x85\x89\', \'\xe5\xbd\x93\', \'\xe6\x97\xa9\', \'\xe5\x90\x90\', \'\xe5\x90\x93\', \'\xe8\x99\xab\', \'\xe6\x9b\xb2\', \'\xe5\x9b\xa2\',\n    \'\xe5\x90\x8c\', \'\xe5\x90\x8a\', \'\xe5\x90\x83\', \'\xe5\x9b\xa0\', \'\xe5\x90\xb8\', \'\xe5\x90\x97\', \'\xe5\xb1\xbf\', \'\xe5\xb8\x86\', \'\xe5\xb2\x81\', \'\xe5\x9b\x9e\', \'\xe5\xb2\x82\', \'\xe5\x88\x9a\', \'\xe5\x88\x99\', \'\xe8\x82\x89\', \'\xe7\xbd\x91\', \'\xe5\xb9\xb4\', \'\xe6\x9c\xb1\', \'\xe5\x85\x88\', \'\xe4\xb8\xa2\', \'\xe8\x88\x8c\',\n    \'\xe7\xab\xb9\', \'\xe8\xbf\x81\', \'\xe4\xb9\x94\', \'\xe4\xbc\x9f\', \'\xe4\xbc\xa0\', \'\xe4\xb9\x92\', \'\xe4\xb9\x93\', \'\xe4\xbc\x91\', \'\xe4\xbc\x8d\', \'\xe4\xbc\x8f\', \'\xe4\xbc\x98\', \'\xe4\xbc\x90\', \'\xe5\xbb\xb6\', \'\xe4\xbb\xb6\', \'\xe4\xbb\xbb\', \'\xe4\xbc\xa4\', \'\xe4\xbb\xb7\', \'\xe4\xbb\xbd\', \'\xe5\x8d\x8e\', \'\xe4\xbb\xb0\',\n    \'\xe4\xbb\xbf\', \'\xe4\xbc\x99\', \'\xe4\xbc\xaa\', \'\xe8\x87\xaa\', \'\xe8\xa1\x80\', \'\xe5\x90\x91\', \'\xe4\xbc\xbc\', \'\xe5\x90\x8e\', \'\xe8\xa1\x8c\', \'\xe8\x88\x9f\', \'\xe5\x85\xa8\', \'\xe4\xbc\x9a\', \'\xe6\x9d\x80\', \'\xe5\x90\x88\', \'\xe5\x85\x86\', \'\xe4\xbc\x81\', \'\xe4\xbc\x97\', \'\xe7\x88\xb7\', \'\xe4\xbc\x9e\', \'\xe5\x88\x9b\',\n    \'\xe8\x82\x8c\', \'\xe6\x9c\xb5\', \'\xe6\x9d\x82\', \'\xe5\x8d\xb1\', \'\xe6\x97\xac\', \'\xe6\x97\xa8\', \'\xe8\xb4\x9f\', \'\xe5\x90\x84\', \'\xe5\x90\x8d\', \'\xe5\xa4\x9a\', \'\xe4\xba\x89\', \'\xe8\x89\xb2\', \'\xe5\xa3\xae\', \'\xe5\x86\xb2\', \'\xe5\x86\xb0\', \'\xe5\xba\x84\', \'\xe5\xba\x86\', \'\xe4\xba\xa6\', \'\xe5\x88\x98\', \'\xe9\xbd\x90\',\n    \'\xe4\xba\xa4\', \'\xe6\xac\xa1\', \'\xe8\xa1\xa3\', \'\xe4\xba\xa7\', \'\xe5\x86\xb3\', \'\xe5\x85\x85\', \'\xe5\xa6\x84\', \'\xe9\x97\xad\', \'\xe9\x97\xae\', \'\xe9\x97\xaf\', \'\xe7\xbe\x8a\', \'\xe5\xb9\xb6\', \'\xe5\x85\xb3\', \'\xe7\xb1\xb3\', \'\xe7\x81\xaf\', \'\xe5\xb7\x9e\', \'\xe6\xb1\x97\', \'\xe6\xb1\xa1\', \'\xe6\xb1\x9f\', \'\xe6\xb1\xa0\',\n    \'\xe6\xb1\xa4\', \'\xe5\xbf\x99\', \'\xe5\x85\xb4\', \'\xe5\xae\x87\', \'\xe5\xae\x88\', \'\xe5\xae\x85\', \'\xe5\xad\x97\', \'\xe5\xae\x89\', \'\xe8\xae\xb2\', \'\xe5\x86\x9b\', \'\xe8\xae\xb8\', \'\xe8\xae\xba\', \'\xe5\x86\x9c\', \'\xe8\xae\xbd\', \'\xe8\xae\xbe\', \'\xe8\xae\xbf\', \'\xe5\xaf\xbb\', \'\xe9\x82\xa3\', \'\xe8\xbf\x85\', \'\xe5\xb0\xbd\',\n    \'\xe5\xaf\xbc\', \'\xe5\xbc\x82\', \'\xe5\xad\x99\', \'\xe9\x98\xb5\', \'\xe9\x98\xb3\', \'\xe6\x94\xb6\', \'\xe9\x98\xb6\', \'\xe9\x98\xb4\', \'\xe9\x98\xb2\', \'\xe5\xa5\xb8\', \'\xe5\xa6\x82\', \'\xe5\xa6\x87\', \'\xe5\xa5\xbd\', \'\xe5\xa5\xb9\', \'\xe5\xa6\x88\', \'\xe6\x88\x8f\', \'\xe7\xbe\xbd\', \'\xe8\xa7\x82\', \'\xe6\xac\xa2\', \'\xe4\xb9\xb0\',\n    \'\xe7\xba\xa2\', \'\xe7\xba\xa4\', \'\xe7\xba\xa7\', \'\xe7\xba\xa6\', \'\xe7\xba\xaa\', \'\xe9\xa9\xb0\', \'\xe5\xb7\xa1\', \'\xe5\xaf\xbf\', \'\xe5\xbc\x84\', \'\xe9\xba\xa6\', \'\xe5\xbd\xa2\', \'\xe8\xbf\x9b\', \'\xe6\x88\x92\', \'\xe5\x90\x9e\', \'\xe8\xbf\x9c\', \'\xe8\xbf\x9d\', \'\xe8\xbf\x90\', \'\xe6\x89\xb6\', \'\xe6\x8a\x9a\', \'\xe5\x9d\x9b\',\n    \'\xe6\x8a\x80\', \'\xe5\x9d\x8f\', \'\xe6\x89\xb0\', \'\xe6\x8b\x92\', \'\xe6\x89\xbe\', \'\xe6\x89\xb9\', \'\xe6\x89\xaf\', \'\xe5\x9d\x80\', \'\xe8\xb5\xb0\', \'\xe6\x8a\x84\', \'\xe5\x9d\x9d\', \'\xe8\xb4\xa1\', \'\xe6\x94\xbb\', \'\xe8\xb5\xa4\', \'\xe6\x8a\x98\', \'\xe6\x8a\x93\', \'\xe6\x89\xae\', \'\xe6\x8a\xa2\', \'\xe5\xad\x9d\', \'\xe5\x9d\x87\',\n    \'\xe6\x8a\x9b\', \'\xe6\x8a\x95\', \'\xe5\x9d\x9f\', \'\xe6\x8a\x97\', \'\xe5\x9d\x91\', \'\xe5\x9d\x8a\', \'\xe6\x8a\x96\', \'\xe6\x8a\xa4\', \'\xe5\xa3\xb3\', \'\xe5\xbf\x97\', \'\xe6\x89\xad\', \'\xe5\x9d\x97\', \'\xe5\xa3\xb0\', \'\xe6\x8a\x8a\', \'\xe6\x8a\xa5\', \'\xe5\x8d\xb4\', \'\xe5\x8a\xab\', \'\xe8\x8a\xbd\', \'\xe8\x8a\xb1\', \'\xe8\x8a\xb9\',\n    \'\xe8\x8a\xac\', \'\xe8\x8b\x8d\', \'\xe8\x8a\xb3\', \'\xe4\xb8\xa5\', \'\xe8\x8a\xa6\', \'\xe5\x8a\xb3\', \'\xe5\x85\x8b\', \'\xe8\x8b\x8f\', \'\xe6\x9d\x86\', \'\xe6\x9d\xa0\', \'\xe6\x9d\x9c\', \'\xe6\x9d\x90\', \'\xe6\x9d\x91\', \'\xe6\x9d\x8f\', \'\xe6\x9e\x81\', \'\xe6\x9d\x8e\', \'\xe6\x9d\xa8\', \'\xe6\xb1\x82\', \'\xe6\x9b\xb4\', \'\xe6\x9d\x9f\',\n    \'\xe8\xb1\x86\', \'\xe4\xb8\xa4\', \'\xe4\xb8\xbd\', \'\xe5\x8c\xbb\', \'\xe8\xbe\xb0\', \'\xe5\x8a\xb1\', \'\xe5\x90\xa6\', \'\xe8\xbf\x98\', \'\xe6\xad\xbc\', \'\xe6\x9d\xa5\', \'\xe8\xbf\x9e\', \'\xe6\xad\xa5\', \'\xe5\x9d\x9a\', \'\xe6\x97\xb1\', \'\xe7\x9b\xaf\', \'\xe5\x91\x88\', \'\xe6\x97\xb6\', \'\xe5\x90\xb4\', \'\xe5\x8a\xa9\', \'\xe5\x8e\xbf\',\n    \'\xe9\x87\x8c\', \'\xe5\x91\x86\', \'\xe5\x9b\xad\', \'\xe6\x97\xb7\', \'\xe5\x9b\xb4\', \'\xe5\x91\x80\', \'\xe5\x90\xa8\', \'\xe8\xb6\xb3\', \'\xe9\x82\xae\', \'\xe7\x94\xb7\', \'\xe5\x9b\xb0\', \'\xe5\x90\xb5\', \'\xe4\xb8\xb2\', \'\xe5\x91\x98\', \'\xe5\x90\xac\', \'\xe5\x90\xa9\', \'\xe5\x90\xb9\', \'\xe5\x91\x9c\', \'\xe5\x90\xa7\', \'\xe5\x90\xbc\',\n    \'\xe5\x88\xab\', \'\xe5\xb2\x97\', \'\xe5\xb8\x90\', \'\xe8\xb4\xa2\', \'\xe9\x92\x88\', \'\xe9\x92\x89\', \'\xe5\x91\x8a\', \'\xe6\x88\x91\', \'\xe4\xb9\xb1\', \'\xe5\x88\xa9\', \'\xe7\xa7\x83\', \'\xe7\xa7\x80\', \'\xe7\xa7\x81\', \'\xe6\xaf\x8f\', \'\xe5\x85\xb5\', \'\xe4\xbc\xb0\', \'\xe4\xbd\x93\', \'\xe4\xbd\x95\', \'\xe4\xbd\x86\', \'\xe4\xbc\xb8\',\n    \'\xe4\xbd\x9c\', \'\xe4\xbc\xaf\', \'\xe4\xbc\xb6\', \'\xe4\xbd\xa3\', \'\xe4\xbd\x8e\', \'\xe4\xbd\xa0\', \'\xe4\xbd\x8f\', \'\xe4\xbd\x8d\', \'\xe4\xbc\xb4\', \'\xe8\xba\xab\', \'\xe7\x9a\x82\', \'\xe4\xbd\x9b\', \'\xe8\xbf\x91\', \'\xe5\xbd\xbb\', \'\xe5\xbd\xb9\', \'\xe8\xbf\x94\', \'\xe4\xbd\x99\', \'\xe5\xb8\x8c\', \'\xe5\x9d\x90\', \'\xe8\xb0\xb7\',\n    \'\xe5\xa6\xa5\', \'\xe5\x90\xab\', \'\xe9\x82\xbb\', \'\xe5\xb2\x94\', \'\xe8\x82\x9d\', \'\xe8\x82\x9a\', \'\xe8\x82\xa0\', \'\xe9\xbe\x9f\', \'\xe5\x85\x8d\', \'\xe7\x8b\x82\', \'\xe7\x8a\xb9\', \'\xe8\xa7\x92\', \'\xe5\x88\xa0\', \'\xe6\x9d\xa1\', \'\xe5\x8d\xb5\', \'\xe5\xb2\x9b\', \'\xe8\xbf\x8e\', \'\xe9\xa5\xad\', \'\xe9\xa5\xae\', \'\xe7\xb3\xbb\',\n    \'\xe8\xa8\x80\', \'\xe5\x86\xbb\', \'\xe7\x8a\xb6\', \'\xe4\xba\xa9\', \'\xe5\x86\xb5\', \'\xe5\xba\x8a\', \'\xe5\xba\x93\', \'\xe7\x96\x97\', \'\xe5\xba\x94\', \'\xe5\x86\xb7\', \'\xe8\xbf\x99\', \'\xe5\xba\x8f\', \'\xe8\xbe\x9b\', \'\xe5\xbc\x83\', \'\xe5\x86\xb6\', \'\xe5\xbf\x98\', \'\xe9\x97\xb2\', \'\xe9\x97\xb4\', \'\xe9\x97\xb7\', \'\xe5\x88\xa4\',\n    \'\xe7\x81\xb6\', \'\xe7\x81\xbf\', \'\xe5\xbc\x9f\', \'\xe6\xb1\xaa\', \'\xe6\xb2\x99\', \'\xe6\xb1\xbd\', \'\xe6\xb2\x83\', \'\xe6\xb3\x9b\', \'\xe6\xb2\x9f\', \'\xe6\xb2\xa1\', \'\xe6\xb2\x88\', \'\xe6\xb2\x89\', \'\xe6\x80\x80\', \'\xe5\xbf\xa7\', \'\xe5\xbf\xab\', \'\xe5\xae\x8c\', \'\xe5\xae\x8b\', \'\xe5\xae\x8f\', \'\xe7\x89\xa2\', \'\xe7\xa9\xb6\',\n    \'\xe7\xa9\xb7\', \'\xe7\x81\xbe\', \'\xe8\x89\xaf\', \'\xe8\xaf\x81\', \'\xe5\x90\xaf\', \'\xe8\xaf\x84\', \'\xe8\xa1\xa5\', \'\xe5\x88\x9d\', \'\xe7\xa4\xbe\', \'\xe8\xaf\x86\', \'\xe8\xaf\x89\', \'\xe8\xaf\x8a\', \'\xe8\xaf\x8d\', \'\xe8\xaf\x91\', \'\xe5\x90\x9b\', \'\xe7\x81\xb5\', \'\xe5\x8d\xb3\', \'\xe5\xb1\x82\', \'\xe5\xb0\xbf\', \'\xe5\xb0\xbe\',\n    \'\xe8\xbf\x9f\', \'\xe5\xb1\x80\', \'\xe6\x94\xb9\', \'\xe5\xbc\xa0\', \'\xe5\xbf\x8c\', \'\xe9\x99\x85\', \'\xe9\x99\x86\', \'\xe9\x98\xbf\', \'\xe9\x99\x88\', \'\xe9\x98\xbb\', \'\xe9\x99\x84\', \'\xe5\xa6\x99\', \'\xe5\xa6\x96\', \'\xe5\xa6\xa8\', \'\xe5\x8a\xaa\', \'\xe5\xbf\x8d\', \'\xe5\x8a\xb2\', \'\xe9\xb8\xa1\', \'\xe9\xa9\xb1\', \'\xe7\xba\xaf\',\n    \'\xe7\xba\xb1\', \'\xe7\xba\xb3\', \'\xe7\xba\xb2\', \'\xe9\xa9\xb3\', \'\xe7\xba\xb5\', \'\xe7\xba\xb7\', \'\xe7\xba\xb8\', \'\xe7\xba\xb9\', \'\xe7\xba\xba\', \'\xe9\xa9\xb4\', \'\xe7\xba\xbd\', \'\xe5\xa5\x89\', \'\xe7\x8e\xa9\', \'\xe7\x8e\xaf\', \'\xe6\xad\xa6\', \'\xe9\x9d\x92\', \'\xe8\xb4\xa3\', \'\xe7\x8e\xb0\', \'\xe8\xa1\xa8\', \'\xe8\xa7\x84\',\n    \'\xe6\x8a\xb9\', \'\xe6\x8b\xa2\', \'\xe6\x8b\x94\', \'\xe6\x8b\xa3\', \'\xe6\x8b\x85\', \'\xe5\x9d\xa6\', \'\xe6\x8a\xbc\', \'\xe6\x8a\xbd\', \'\xe6\x8b\x90\', \'\xe6\x8b\x96\', \'\xe6\x8b\x8d\', \'\xe8\x80\x85\', \'\xe9\xa1\xb6\', \'\xe6\x8b\x86\', \'\xe6\x8b\xa5\', \'\xe6\x8a\xb5\', \'\xe6\x8b\x98\', \'\xe5\x8a\xbf\', \'\xe6\x8a\xb1\', \'\xe5\x9e\x83\',\n    \'\xe6\x8b\x89\', \'\xe6\x8b\xa6\', \'\xe6\x8b\x8c\', \'\xe5\xb9\xb8\', \'\xe6\x8b\x9b\', \'\xe5\x9d\xa1\', \'\xe6\x8a\xab\', \'\xe6\x8b\xa8\', \'\xe6\x8b\xa9\', \'\xe6\x8a\xac\', \'\xe5\x85\xb6\', \'\xe5\x8f\x96\', \'\xe8\x8b\xa6\', \'\xe8\x8b\xa5\', \'\xe8\x8c\x82\', \'\xe8\x8b\xb9\', \'\xe8\x8b\x97\', \'\xe8\x8b\xb1\', \'\xe8\x8c\x83\', \'\xe7\x9b\xb4\',\n    \'\xe8\x8c\x84\', \'\xe8\x8c\x8e\', \'\xe8\x8c\x85\', \'\xe6\x9e\x97\', \'\xe6\x9e\x9d\', \'\xe6\x9d\xaf\', \'\xe6\x9f\x9c\', \'\xe6\x9e\x90\', \'\xe6\x9d\xbf\', \'\xe6\x9d\xbe\', \'\xe6\x9e\xaa\', \'\xe6\x9e\x84\', \'\xe6\x9d\xb0\', \'\xe8\xbf\xb0\', \'\xe6\x9e\x95\', \'\xe4\xb8\xa7\', \'\xe6\x88\x96\', \'\xe7\x94\xbb\', \'\xe5\x8d\xa7\', \'\xe4\xba\x8b\',\n    \'\xe5\x88\xba\', \'\xe6\x9e\xa3\', \'\xe9\x9b\xa8\', \'\xe5\x8d\x96\', \'\xe7\x9f\xbf\', \'\xe7\xa0\x81\', \'\xe5\x8e\x95\', \'\xe5\xa5\x94\', \'\xe5\xa5\x87\', \'\xe5\xa5\x8b\', \'\xe6\x80\x81\', \'\xe6\xac\xa7\', \'\xe5\x9e\x84\', \'\xe5\xa6\xbb\', \'\xe8\xbd\xb0\', \'\xe9\xa1\xb7\', \'\xe8\xbd\xac\', \'\xe6\x96\xa9\', \'\xe8\xbd\xae\', \'\xe8\xbd\xaf\',\n    \'\xe5\x88\xb0\', \'\xe9\x9d\x9e\', \'\xe5\x8f\x94\', \'\xe8\x82\xaf\', \'\xe9\xbd\xbf\', \'\xe4\xba\x9b\', \'\xe8\x99\x8e\', \'\xe8\x99\x8f\', \'\xe8\x82\xbe\', \'\xe8\xb4\xa4\', \'\xe5\xb0\x9a\', \'\xe6\x97\xba\', \'\xe5\x85\xb7\', \'\xe6\x9e\x9c\', \'\xe5\x91\xb3\', \'\xe6\x98\x86\', \'\xe5\x9b\xbd\', \'\xe6\x98\x8c\', \'\xe7\x95\x85\', \'\xe6\x98\x8e\',\n    \'\xe6\x98\x93\', \'\xe6\x98\x82\', \'\xe5\x85\xb8\', \'\xe5\x9b\xba\', \'\xe5\xbf\xa0\', \'\xe5\x92\x90\', \'\xe5\x91\xbc\', \'\xe9\xb8\xa3\', \'\xe5\x92\x8f\', \'\xe5\x91\xa2\', \'\xe5\xb2\xb8\', \'\xe5\xb2\xa9\', \'\xe5\xb8\x96\', \'\xe7\xbd\x97\', \'\xe5\xb8\x9c\', \'\xe5\xb2\xad\', \'\xe5\x87\xaf\', \'\xe8\xb4\xa5\', \'\xe8\xb4\xa9\', \'\xe8\xb4\xad\',\n    \'\xe5\x9b\xbe\', \'\xe9\x92\x93\', \'\xe5\x88\xb6\', \'\xe7\x9f\xa5\', \'\xe5\x9e\x82\', \'\xe7\x89\xa7\', \'\xe7\x89\xa9\', \'\xe4\xb9\x96\', \'\xe5\x88\xae\', \'\xe7\xa7\x86\', \'\xe5\x92\x8c\', \'\xe5\xad\xa3\', \'\xe5\xa7\x94\', \'\xe4\xbd\xb3\', \'\xe4\xbe\x8d\', \'\xe4\xbe\x9b\', \'\xe4\xbd\xbf\', \'\xe4\xbe\x8b\', \'\xe7\x89\x88\', \'\xe4\xbe\x84\',\n    \'\xe4\xbe\xa6\', \'\xe4\xbe\xa7\', \'\xe5\x87\xad\', \'\xe4\xbe\xa8\', \'\xe4\xbd\xa9\', \'\xe8\xb4\xa7\', \'\xe4\xbe\x9d\', \'\xe7\x9a\x84\', \'\xe8\xbf\xab\', \'\xe8\xb4\xa8\', \'\xe6\xac\xa3\', \'\xe5\xbe\x81\', \'\xe5\xbe\x80\', \'\xe7\x88\xac\', \'\xe5\xbd\xbc\', \'\xe5\xbe\x84\', \'\xe6\x89\x80\', \'\xe8\x88\x8d\', \'\xe9\x87\x91\', \'\xe5\x91\xbd\',\n    \'\xe6\x96\xa7\', \'\xe7\x88\xb8\', \'\xe9\x87\x87\', \'\xe5\x8f\x97\', \'\xe4\xb9\xb3\', \'\xe8\xb4\xaa\', \'\xe5\xbf\xb5\', \'\xe8\xb4\xab\', \'\xe8\x82\xa4\', \'\xe8\x82\xba\', \'\xe8\x82\xa2\', \'\xe8\x82\xbf\', \'\xe8\x83\x80\', \'\xe6\x9c\x8b\', \'\xe8\x82\xa1\', \'\xe8\x82\xa5\', \'\xe6\x9c\x8d\', \'\xe8\x83\x81\', \'\xe5\x91\xa8\', \'\xe6\x98\x8f\',\n    \'\xe9\xb1\xbc\', \'\xe5\x85\x94\', \'\xe7\x8b\x90\', \'\xe5\xbf\xbd\', \'\xe7\x8b\x97\', \'\xe5\xa4\x87\', \'\xe9\xa5\xb0\', \'\xe9\xa5\xb1\', \'\xe9\xa5\xb2\', \'\xe5\x8f\x98\', \'\xe4\xba\xac\', \'\xe4\xba\xab\', \'\xe5\xba\x97\', \'\xe5\xa4\x9c\', \'\xe5\xba\x99\', \'\xe5\xba\x9c\', \'\xe5\xba\x95\', \'\xe5\x89\x82\', \'\xe9\x83\x8a\', \'\xe5\xba\x9f\',\n    \'\xe5\x87\x80\', \'\xe7\x9b\xb2\', \'\xe6\x94\xbe\', \'\xe5\x88\xbb\', \'\xe8\x82\xb2\', \'\xe9\x97\xb8\', \'\xe9\x97\xb9\', \'\xe9\x83\x91\', \'\xe5\x88\xb8\', \'\xe5\x8d\xb7\', \'\xe5\x8d\x95\', \'\xe7\x82\x92\', \'\xe7\x82\x8a\', \'\xe7\x82\x95\', \'\xe7\x82\x8e\', \'\xe7\x82\x89\', \'\xe6\xb2\xab\', \'\xe6\xb5\x85\', \'\xe6\xb3\x95\', \'\xe6\xb3\x84\',\n    \'\xe6\xb2\xb3\', \'\xe6\xb2\xbe\', \'\xe6\xb3\xaa\', \'\xe6\xb2\xb9\', \'\xe6\xb3\x8a\', \'\xe6\xb2\xbf\', \'\xe6\xb3\xa1\', \'\xe6\xb3\xa8\', \'\xe6\xb3\xbb\', \'\xe6\xb3\xb3\', \'\xe6\xb3\xa5\', \'\xe6\xb2\xb8\', \'\xe6\xb3\xa2\', \'\xe6\xb3\xbc\', \'\xe6\xb3\xbd\', \'\xe6\xb2\xbb\', \'\xe6\x80\x96\', \'\xe6\x80\xa7\', \'\xe6\x80\x95\', \'\xe6\x80\x9c\',\n    \'\xe6\x80\xaa\', \'\xe5\xad\xa6\', \'\xe5\xae\x9d\', \'\xe5\xae\x97\', \'\xe5\xae\x9a\', \'\xe5\xae\x9c\', \'\xe5\xae\xa1\', \'\xe5\xae\x99\', \'\xe5\xae\x98\', \'\xe7\xa9\xba\', \'\xe5\xb8\x98\', \'\xe5\xae\x9e\', \'\xe8\xaf\x95\', \'\xe9\x83\x8e\', \'\xe8\xaf\x97\', \'\xe8\x82\xa9\', \'\xe6\x88\xbf\', \'\xe8\xaf\x9a\', \'\xe8\xa1\xac\', \'\xe8\xa1\xab\',\n    \'\xe8\xa7\x86\', \'\xe8\xaf\x9d\', \'\xe8\xaf\x9e\', \'\xe8\xaf\xa2\', \'\xe8\xaf\xa5\', \'\xe8\xaf\xa6\', \'\xe5\xbb\xba\', \'\xe8\x82\x83\', \'\xe5\xbd\x95\', \'\xe9\x9a\xb6\', \'\xe5\xb1\x85\', \'\xe5\xb1\x8a\', \'\xe5\x88\xb7\', \'\xe5\xb1\x88\', \'\xe5\xbc\xa6\', \'\xe6\x89\xbf\', \'\xe5\xad\x9f\', \'\xe5\xad\xa4\', \'\xe9\x99\x95\', \'\xe9\x99\x8d\',\n    \'\xe9\x99\x90\', \'\xe5\xa6\xb9\', \'\xe5\xa7\x91\', \'\xe5\xa7\x90\', \'\xe5\xa7\x93\', \'\xe5\xa7\x8b\', \'\xe9\xa9\xbe\', \'\xe5\x8f\x82\', \'\xe8\x89\xb0\', \'\xe7\xba\xbf\', \'\xe7\xbb\x83\', \'\xe7\xbb\x84\', \'\xe7\xbb\x86\', \'\xe9\xa9\xb6\', \'\xe7\xbb\x87\', \'\xe7\xbb\x88\', \'\xe9\xa9\xbb\', \'\xe9\xa9\xbc\', \'\xe7\xbb\x8d\', \'\xe7\xbb\x8f\',\n    \'\xe8\xb4\xaf\', \'\xe5\xa5\x8f\', \'\xe6\x98\xa5\', \'\xe5\xb8\xae\', \'\xe7\x8f\x8d\', \'\xe7\x8e\xbb\', \'\xe6\xaf\x92\', \'\xe5\x9e\x8b\', \'\xe6\x8c\x82\', \'\xe5\xb0\x81\', \'\xe6\x8c\x81\', \'\xe9\xa1\xb9\', \'\xe5\x9e\xae\', \'\xe6\x8c\x8e\', \'\xe5\x9f\x8e\', \'\xe6\x8c\xa0\', \'\xe6\x94\xbf\', \'\xe8\xb5\xb4\', \'\xe8\xb5\xb5\', \'\xe6\x8c\xa1\',\n    \'\xe6\x8c\xba\', \'\xe6\x8b\xac\', \'\xe6\x8b\xb4\', \'\xe6\x8b\xbe\', \'\xe6\x8c\x91\', \'\xe6\x8c\x87\', \'\xe5\x9e\xab\', \'\xe6\x8c\xa3\', \'\xe6\x8c\xa4\', \'\xe6\x8b\xbc\', \'\xe6\x8c\x96\', \'\xe6\x8c\x89\', \'\xe6\x8c\xa5\', \'\xe6\x8c\xaa\', \'\xe6\x9f\x90\', \'\xe7\x94\x9a\', \'\xe9\x9d\xa9\', \'\xe8\x8d\x90\', \'\xe5\xb7\xb7\', \'\xe5\xb8\xa6\',\n    \'\xe8\x8d\x89\', \'\xe8\x8c\xa7\', \'\xe8\x8c\xb6\', \'\xe8\x8d\x92\', \'\xe8\x8c\xab\', \'\xe8\x8d\xa1\', \'\xe8\x8d\xa3\', \'\xe6\x95\x85\', \'\xe8\x83\xa1\', \'\xe5\x8d\x97\', \'\xe8\x8d\xaf\', \'\xe6\xa0\x87\', \'\xe6\x9e\xaf\', \'\xe6\x9f\x84\', \'\xe6\xa0\x8b\', \'\xe7\x9b\xb8\', \'\xe6\x9f\xa5\', \'\xe6\x9f\x8f\', \'\xe6\x9f\xb3\', \'\xe6\x9f\xb1\',\n    \'\xe6\x9f\xbf\', \'\xe6\xa0\x8f\', \'\xe6\xa0\x91\', \'\xe8\xa6\x81\', \'\xe5\x92\xb8\', \'\xe5\xa8\x81\', \'\xe6\xad\xaa\', \'\xe7\xa0\x94\', \'\xe7\xa0\x96\', \'\xe5\x8e\x98\', \'\xe5\x8e\x9a\', \'\xe7\xa0\x8c\', \'\xe7\xa0\x8d\', \'\xe9\x9d\xa2\', \'\xe8\x80\x90\', \'\xe8\x80\x8d\', \'\xe7\x89\xb5\', \'\xe6\xae\x8b\', \'\xe6\xae\x83\', \'\xe8\xbd\xbb\',\n    \'\xe9\xb8\xa6\', \'\xe7\x9a\x86\', \'\xe8\x83\x8c\', \'\xe6\x88\x98\', \'\xe7\x82\xb9\', \'\xe4\xb8\xb4\', \'\xe8\xa7\x88\', \'\xe7\xab\x96\', \'\xe7\x9c\x81\', \'\xe5\x89\x8a\', \'\xe5\xb0\x9d\', \'\xe6\x98\xaf\', \'\xe7\x9b\xbc\', \'\xe7\x9c\xa8\', \'\xe5\x93\x84\', \'\xe6\x98\xbe\', \'\xe5\x93\x91\', \'\xe5\x86\x92\', \'\xe6\x98\xa0\', \'\xe6\x98\x9f\',\n    \'\xe6\x98\xa8\', \'\xe7\x95\x8f\', \'\xe8\xb6\xb4\', \'\xe8\x83\x83\', \'\xe8\xb4\xb5\', \'\xe7\x95\x8c\', \'\xe8\x99\xb9\', \'\xe8\x99\xbe\', \'\xe8\x9a\x81\', \'\xe6\x80\x9d\', \'\xe8\x9a\x82\', \'\xe8\x99\xbd\', \'\xe5\x93\x81\', \'\xe5\x92\xbd\', \'\xe9\xaa\x82\', \'\xe5\x93\x97\', \'\xe5\x92\xb1\', \'\xe5\x93\x8d\', \'\xe5\x93\x88\', \'\xe5\x92\xac\',\n    \'\xe5\x92\xb3\', \'\xe5\x93\xaa\', \'\xe7\x82\xad\', \'\xe5\xb3\xa1\', \'\xe7\xbd\x9a\', \'\xe8\xb4\xb1\', \'\xe8\xb4\xb4\', \'\xe9\xaa\xa8\', \'\xe9\x92\x9e\', \'\xe9\x92\x9f\', \'\xe9\x92\xa2\', \'\xe9\x92\xa5\', \'\xe9\x92\xa9\', \'\xe5\x8d\xb8\', \'\xe7\xbc\xb8\', \'\xe6\x8b\x9c\', \'\xe7\x9c\x8b\', \'\xe7\x9f\xa9\', \'\xe6\x80\x8e\', \'\xe7\x89\xb2\',\n    \'\xe9\x80\x89\', \'\xe9\x80\x82\', \'\xe7\xa7\x92\', \'\xe9\xa6\x99\', \'\xe7\xa7\x8d\', \'\xe7\xa7\x8b\', \'\xe7\xa7\x91\', \'\xe9\x87\x8d\', \'\xe5\xa4\x8d\', \'\xe7\xab\xbf\', \'\xe6\xae\xb5\', \'\xe4\xbe\xbf\', \'\xe4\xbf\xa9\', \'\xe8\xb4\xb7\', \'\xe9\xa1\xba\', \'\xe4\xbf\xae\', \'\xe4\xbf\x9d\', \'\xe4\xbf\x83\', \'\xe4\xbe\xae\', \'\xe4\xbf\xad\',\n    \'\xe4\xbf\x97\', \'\xe4\xbf\x98\', \'\xe4\xbf\xa1\', \'\xe7\x9a\x87\', \'\xe6\xb3\x89\', \'\xe9\xac\xbc\', \'\xe4\xbe\xb5\', \'\xe8\xbf\xbd\', \'\xe4\xbf\x8a\', \'\xe7\x9b\xbe\', \'\xe5\xbe\x85\', \'\xe5\xbe\x8b\', \'\xe5\xbe\x88\', \'\xe9\xa1\xbb\', \'\xe5\x8f\x99\', \'\xe5\x89\x91\', \'\xe9\x80\x83\', \'\xe9\xa3\x9f\', \'\xe7\x9b\x86\', \'\xe8\x83\x86\',\n    \'\xe8\x83\x9c\', \'\xe8\x83\x9e\', \'\xe8\x83\x96\', \'\xe8\x84\x89\', \'\xe5\x8b\x89\', \'\xe7\x8b\xad\', \'\xe7\x8b\xae\', \'\xe7\x8b\xac\', \'\xe7\x8b\xa1\', \'\xe7\x8b\xb1\', \'\xe7\x8b\xa0\', \'\xe8\xb4\xb8\', \'\xe6\x80\xa8\', \'\xe6\x80\xa5\', \'\xe9\xa5\xb6\', \'\xe8\x9a\x80\', \'\xe9\xa5\xba\', \'\xe9\xa5\xbc\', \'\xe5\xbc\xaf\', \'\xe5\xb0\x86\',\n    \'\xe5\xa5\x96\', \'\xe5\x93\x80\', \'\xe4\xba\xad\', \'\xe4\xba\xae\', \'\xe5\xba\xa6\', \'\xe8\xbf\xb9\', \'\xe5\xba\xad\', \'\xe7\x96\xae\', \'\xe7\x96\xaf\', \'\xe7\x96\xab\', \'\xe7\x96\xa4\', \'\xe5\xa7\xbf\', \'\xe4\xba\xb2\', \'\xe9\x9f\xb3\', \'\xe5\xb8\x9d\', \'\xe6\x96\xbd\', \'\xe9\x97\xbb\', \'\xe9\x98\x80\', \'\xe9\x98\x81\', \'\xe5\xb7\xae\',\n    \'\xe5\x85\xbb\', \'\xe7\xbe\x8e\', \'\xe5\xa7\x9c\', \'\xe5\x8f\x9b\', \'\xe9\x80\x81\', \'\xe7\xb1\xbb\', \'\xe8\xbf\xb7\', \'\xe5\x89\x8d\', \'\xe9\xa6\x96\', \'\xe9\x80\x86\', \'\xe6\x80\xbb\', \'\xe7\x82\xbc\', \'\xe7\x82\xb8\', \'\xe7\x82\xae\', \'\xe7\x83\x82\', \'\xe5\x89\x83\', \'\xe6\xb4\x81\', \'\xe6\xb4\xaa\', \'\xe6\xb4\x92\', \'\xe6\xb5\x87\',\n    \'\xe6\xb5\x8a\', \'\xe6\xb4\x9e\', \'\xe6\xb5\x8b\', \'\xe6\xb4\x97\', \'\xe6\xb4\xbb\', \'\xe6\xb4\xbe\', \'\xe6\xb4\xbd\', \'\xe6\x9f\x93\', \'\xe6\xb5\x8e\', \'\xe6\xb4\x8b\', \'\xe6\xb4\xb2\', \'\xe6\xb5\x91\', \'\xe6\xb5\x93\', \'\xe6\xb4\xa5\', \'\xe6\x81\x92\', \'\xe6\x81\xa2\', \'\xe6\x81\xb0\', \'\xe6\x81\xbc\', \'\xe6\x81\xa8\', \'\xe4\xb8\xbe\',\n    \'\xe8\xa7\x89\', \'\xe5\xae\xa3\', \'\xe5\xae\xa4\', \'\xe5\xae\xab\', \'\xe5\xae\xaa\', \'\xe7\xaa\x81\', \'\xe7\xa9\xbf\', \'\xe7\xaa\x83\', \'\xe5\xae\xa2\', \'\xe5\x86\xa0\', \'\xe8\xaf\xad\', \'\xe6\x89\x81\', \'\xe8\xa2\x84\', \'\xe7\xa5\x96\', \'\xe7\xa5\x9e\', \'\xe7\xa5\x9d\', \'\xe8\xaf\xaf\', \'\xe8\xaf\xb1\', \'\xe8\xaf\xb4\', \'\xe8\xaf\xb5\',\n    \'\xe5\x9e\xa6\', \'\xe9\x80\x80\', \'\xe6\x97\xa2\', \'\xe5\xb1\x8b\', \'\xe6\x98\xbc\', \'\xe8\xb4\xb9\', \'\xe9\x99\xa1\', \'\xe7\x9c\x89\', \'\xe5\xad\xa9\', \'\xe9\x99\xa4\', \'\xe9\x99\xa9\', \'\xe9\x99\xa2\', \'\xe5\xa8\x83\', \'\xe5\xa7\xa5\', \'\xe5\xa7\xa8\', \'\xe5\xa7\xbb\', \'\xe5\xa8\x87\', \'\xe6\x80\x92\', \'\xe6\x9e\xb6\', \'\xe8\xb4\xba\',\n    \'\xe7\x9b\x88\', \'\xe5\x8b\x87\', \'\xe6\x80\xa0\', \'\xe6\x9f\x94\', \'\xe5\x9e\x92\', \'\xe7\xbb\x91\', \'\xe7\xbb\x92\', \'\xe7\xbb\x93\', \'\xe7\xbb\x95\', \'\xe9\xaa\x84\', \'\xe7\xbb\x98\', \'\xe7\xbb\x99\', \'\xe7\xbb\x9c\', \'\xe9\xaa\x86\', \'\xe7\xbb\x9d\', \'\xe7\xbb\x9e\', \'\xe7\xbb\x9f\', \'\xe8\x80\x95\', \'\xe8\x80\x97\', \'\xe8\x89\xb3\',\n    \'\xe6\xb3\xb0\', \'\xe7\x8f\xa0\', \'\xe7\x8f\xad\', \'\xe7\xb4\xa0\', \'\xe8\x9a\x95\', \'\xe9\xa1\xbd\', \'\xe7\x9b\x8f\', \'\xe5\x8c\xaa\', \'\xe6\x8d\x9e\', \'\xe6\xa0\xbd\', \'\xe6\x8d\x95\', \'\xe6\x8c\xaf\', \'\xe8\xbd\xbd\', \'\xe8\xb5\xb6\', \'\xe8\xb5\xb7\', \'\xe7\x9b\x90\', \'\xe6\x8d\x8e\', \'\xe6\x8d\x8f\', \'\xe5\x9f\x8b\', \'\xe6\x8d\x89\',\n    \'\xe6\x8d\x86\', \'\xe6\x8d\x90\', \'\xe6\x8d\x9f\', \'\xe9\x83\xbd\', \'\xe5\x93\xb2\', \'\xe9\x80\x9d\', \'\xe6\x8d\xa1\', \'\xe6\x8d\xa2\', \'\xe6\x8c\xbd\', \'\xe7\x83\xad\', \'\xe6\x81\x90\', \'\xe5\xa3\xb6\', \'\xe6\x8c\xa8\', \'\xe8\x80\xbb\', \'\xe8\x80\xbd\', \'\xe6\x81\xad\', \'\xe8\x8e\xb2\', \'\xe8\x8e\xab\', \'\xe8\x8d\xb7\', \'\xe8\x8e\xb7\',\n    \'\xe6\x99\x8b\', \'\xe6\x81\xb6\', \'\xe7\x9c\x9f\', \'\xe6\xa1\x86\', \'\xe6\xa1\x82\', \'\xe6\xa1\xa3\', \'\xe6\xa1\x90\', \'\xe6\xa0\xaa\', \'\xe6\xa1\xa5\', \'\xe6\xa1\x83\', \'\xe6\xa0\xbc\', \'\xe6\xa0\xa1\', \'\xe6\xa0\xb8\', \'\xe6\xa0\xb7\', \'\xe6\xa0\xb9\', \'\xe7\xb4\xa2\', \'\xe5\x93\xa5\', \'\xe9\x80\x9f\', \'\xe9\x80\x97\', \'\xe6\xa0\x97\',\n    \'\xe9\x85\x8d\', \'\xe7\xbf\x85\', \'\xe8\xbe\xb1\', \'\xe5\x94\x87\', \'\xe5\xa4\x8f\', \'\xe7\xa1\x80\', \'\xe7\xa0\xb4\', \'\xe5\x8e\x9f\', \'\xe5\xa5\x97\', \'\xe9\x80\x90\', \'\xe7\x83\x88\', \'\xe6\xae\x8a\', \'\xe9\xa1\xbe\', \'\xe8\xbd\xbf\', \'\xe8\xbe\x83\', \'\xe9\xa1\xbf\', \'\xe6\xaf\x99\', \'\xe8\x87\xb4\', \'\xe6\x9f\xb4\', \'\xe6\xa1\x8c\',\n    \'\xe8\x99\x91\', \'\xe7\x9b\x91\', \'\xe7\xb4\xa7\', \'\xe5\x85\x9a\', \'\xe6\x99\x92\', \'\xe7\x9c\xa0\', \'\xe6\x99\x93\', \'\xe9\xb8\xad\', \'\xe6\x99\x83\', \'\xe6\x99\x8c\', \'\xe6\x99\x95\', \'\xe8\x9a\x8a\', \'\xe5\x93\xa8\', \'\xe5\x93\xad\', \'\xe6\x81\xa9\', \'\xe5\x94\xa4\', \'\xe5\x95\x8a\', \'\xe5\x94\x89\', \'\xe7\xbd\xa2\', \'\xe5\xb3\xb0\',\n    \'\xe5\x9c\x86\', \'\xe8\xb4\xbc\', \'\xe8\xb4\xbf\', \'\xe9\x92\xb1\', \'\xe9\x92\xb3\', \'\xe9\x92\xbb\', \'\xe9\x93\x81\', \'\xe9\x93\x83\', \'\xe9\x93\x85\', \'\xe7\xbc\xba\', \'\xe6\xb0\xa7\', \'\xe7\x89\xb9\', \'\xe7\x89\xba\', \'\xe9\x80\xa0\', \'\xe4\xb9\x98\', \'\xe6\x95\x8c\', \'\xe7\xa7\xa4\', \'\xe7\xa7\x9f\', \'\xe7\xa7\xaf\', \'\xe7\xa7\xa7\',\n    \'\xe7\xa7\xa9\', \'\xe7\xa7\xb0\', \'\xe7\xa7\x98\', \'\xe9\x80\x8f\', \'\xe7\xac\x94\', \'\xe7\xac\x91\', \'\xe7\xac\x8b\', \'\xe5\x80\xba\', \'\xe5\x80\x9f\', \'\xe5\x80\xbc\', \'\xe5\x80\x9a\', \'\xe5\x80\xbe\', \'\xe5\x80\x92\', \'\xe5\x80\x98\', \'\xe4\xbf\xb1\', \'\xe5\x80\xa1\', \'\xe5\x80\x99\', \'\xe4\xbf\xaf\', \'\xe5\x80\x8d\', \'\xe5\x80\xa6\',\n    \'\xe5\x81\xa5\', \'\xe8\x87\xad\', \'\xe5\xb0\x84\', \'\xe8\xba\xac\', \'\xe6\x81\xaf\', \'\xe5\xbe\x92\', \'\xe5\xbe\x90\', \'\xe8\x88\xb0\', \'\xe8\x88\xb1\', \'\xe8\x88\xac\', \'\xe8\x88\xaa\', \'\xe9\x80\x94\', \'\xe6\x8b\xbf\', \'\xe7\x88\xb9\', \'\xe7\x88\xb1\', \'\xe9\xa2\x82\', \'\xe7\xbf\x81\', \'\xe8\x84\x86\', \'\xe8\x84\x82\', \'\xe8\x83\xb8\',\n    \'\xe8\x83\xb3\', \'\xe8\x84\x8f\', \'\xe8\x83\xb6\', \'\xe8\x84\x91\', \'\xe7\x8b\xb8\', \'\xe7\x8b\xbc\', \'\xe9\x80\xa2\', \'\xe7\x95\x99\', \'\xe7\x9a\xb1\', \'\xe9\xa5\xbf\', \'\xe6\x81\x8b\', \'\xe6\xa1\xa8\', \'\xe6\xb5\x86\', \'\xe8\xa1\xb0\', \'\xe9\xab\x98\', \'\xe5\xb8\xad\', \'\xe5\x87\x86\', \'\xe5\xba\xa7\', \'\xe8\x84\x8a\', \'\xe7\x97\x87\',\n    \'\xe7\x97\x85\', \'\xe7\x96\xbe\', \'\xe7\x96\xbc\', \'\xe7\x96\xb2\', \'\xe6\x95\x88\', \'\xe7\xa6\xbb\', \'\xe5\x94\x90\', \'\xe8\xb5\x84\', \'\xe5\x87\x89\', \'\xe7\xab\x99\', \'\xe5\x89\x96\', \'\xe7\xab\x9e\', \'\xe9\x83\xa8\', \'\xe6\x97\x81\', \'\xe6\x97\x85\', \'\xe7\x95\x9c\', \'\xe9\x98\x85\', \'\xe7\xbe\x9e\', \'\xe7\x93\xb6\', \'\xe6\x8b\xb3\',\n    \'\xe7\xb2\x89\', \'\xe6\x96\x99\', \'\xe7\x9b\x8a\', \'\xe5\x85\xbc\', \'\xe7\x83\xa4\', \'\xe7\x83\x98\', \'\xe7\x83\xa6\', \'\xe7\x83\xa7\', \'\xe7\x83\x9b\', \'\xe7\x83\x9f\', \'\xe9\x80\x92\', \'\xe6\xb6\x9b\', \'\xe6\xb5\x99\', \'\xe6\xb6\x9d\', \'\xe9\x85\x92\', \'\xe6\xb6\x89\', \'\xe6\xb6\x88\', \'\xe6\xb5\xa9\', \'\xe6\xb5\xb7\', \'\xe6\xb6\x82\',\n    \'\xe6\xb5\xb4\', \'\xe6\xb5\xae\', \'\xe6\xb5\x81\', \'\xe6\xb6\xa6\', \'\xe6\xb5\xaa\', \'\xe6\xb5\xb8\', \'\xe6\xb6\xa8\', \'\xe7\x83\xab\', \'\xe6\xb6\x8c\', \'\xe6\x82\x9f\', \'\xe6\x82\x84\', \'\xe6\x82\x94\', \'\xe6\x82\xa6\', \'\xe5\xae\xb3\', \'\xe5\xae\xbd\', \'\xe5\xae\xb6\', \'\xe5\xae\xb5\', \'\xe5\xae\xb4\', \'\xe5\xae\xbe\', \'\xe7\xaa\x84\',\n    \'\xe5\xae\xb9\', \'\xe5\xae\xb0\', \'\xe6\xa1\x88\', \'\xe8\xaf\xb7\', \'\xe6\x9c\x97\', \'\xe8\xaf\xb8\', \'\xe8\xaf\xbb\', \'\xe6\x89\x87\', \'\xe8\xa2\x9c\', \'\xe8\xa2\x96\', \'\xe8\xa2\x8d\', \'\xe8\xa2\xab\', \'\xe7\xa5\xa5\', \'\xe8\xaf\xbe\', \'\xe8\xb0\x81\', \'\xe8\xb0\x83\', \'\xe5\x86\xa4\', \'\xe8\xb0\x85\', \'\xe8\xb0\x88\', \'\xe8\xb0\x8a\',\n    \'\xe5\x89\xa5\', \'\xe6\x81\xb3\', \'\xe5\xb1\x95\', \'\xe5\x89\xa7\', \'\xe5\xb1\x91\', \'\xe5\xbc\xb1\', \'\xe9\x99\xb5\', \'\xe9\x99\xb6\', \'\xe9\x99\xb7\', \'\xe9\x99\xaa\', \'\xe5\xa8\xb1\', \'\xe5\xa8\x98\', \'\xe9\x80\x9a\', \'\xe8\x83\xbd\', \'\xe9\x9a\xbe\', \'\xe9\xa2\x84\', \'\xe6\xa1\x91\', \'\xe7\xbb\xa2\', \'\xe7\xbb\xa3\', \'\xe9\xaa\x8c\',\n    \'\xe7\xbb\xa7\', \'\xe7\x90\x83\', \'\xe7\x90\x86\', \'\xe6\x8d\xa7\', \'\xe5\xa0\xb5\', \'\xe6\x8f\x8f\', \'\xe5\x9f\x9f\', \'\xe6\x8e\xa9\', \'\xe6\x8d\xb7\', \'\xe6\x8e\x92\', \'\xe6\x8e\x89\', \'\xe5\xa0\x86\', \'\xe6\x8e\xa8\', \'\xe6\x8e\x80\', \'\xe6\x8e\x88\', \'\xe6\x95\x99\', \'\xe6\x8e\x8f\', \'\xe6\x8e\xa0\', \'\xe5\x9f\xb9\', \'\xe6\x8e\xa5\',\n    \'\xe6\x8e\xa7\', \'\xe6\x8e\xa2\', \'\xe6\x8d\xae\', \'\xe6\x8e\x98\', \'\xe8\x81\x8c\', \'\xe5\x9f\xba\', \'\xe8\x91\x97\', \'\xe5\x8b\x92\', \'\xe9\xbb\x84\', \'\xe8\x90\x8c\', \'\xe8\x90\x9d\', \'\xe8\x8f\x8c\', \'\xe8\x8f\x9c\', \'\xe8\x90\x84\', \'\xe8\x8f\x8a\', \'\xe8\x90\x8d\', \'\xe8\x8f\xa0\', \'\xe8\x90\xa5\', \'\xe6\xa2\xb0\', \'\xe6\xa2\xa6\',\n    \'\xe6\xa2\xa2\', \'\xe6\xa2\x85\', \'\xe6\xa3\x80\', \'\xe6\xa2\xb3\', \'\xe6\xa2\xaf\', \'\xe6\xa1\xb6\', \'\xe6\x95\x91\', \'\xe5\x89\xaf\', \'\xe7\xa5\xa8\', \'\xe6\x88\x9a\', \'\xe7\x88\xbd\', \'\xe8\x81\x8b\', \'\xe8\xa2\xad\', \'\xe7\x9b\x9b\', \'\xe9\x9b\xaa\', \'\xe8\xbe\x85\', \'\xe8\xbe\x86\', \'\xe8\x99\x9a\', \'\xe9\x9b\x80\', \'\xe5\xa0\x82\',\n    \'\xe5\xb8\xb8\', \'\xe5\x8c\x99\', \'\xe6\x99\xa8\', \'\xe7\x9d\x81\', \'\xe7\x9c\xaf\', \'\xe7\x9c\xbc\', \'\xe6\x82\xac\', \'\xe9\x87\x8e\', \'\xe5\x95\xa6\', \'\xe6\x99\x9a\', \'\xe5\x95\x84\', \'\xe8\xb7\x9d\', \'\xe8\xb7\x83\', \'\xe7\x95\xa5\', \'\xe8\x9b\x87\', \'\xe7\xb4\xaf\', \'\xe5\x94\xb1\', \'\xe6\x82\xa3\', \'\xe5\x94\xaf\', \'\xe5\xb4\x96\',\n    \'\xe5\xb4\xad\', \'\xe5\xb4\x87\', \'\xe5\x9c\x88\', \'\xe9\x93\x9c\', \'\xe9\x93\xb2\', \'\xe9\x93\xb6\', \'\xe7\x94\x9c\', \'\xe6\xa2\xa8\', \'\xe7\x8a\x81\', \'\xe7\xa7\xbb\', \'\xe7\xac\xa8\', \'\xe7\xac\xbc\', \'\xe7\xac\x9b\', \'\xe7\xac\xa6\', \'\xe7\xac\xac\', \'\xe6\x95\x8f\', \'\xe5\x81\x9a\', \'\xe8\xa2\x8b\', \'\xe6\x82\xa0\', \'\xe5\x81\xbf\',\n    \'\xe5\x81\xb6\', \'\xe5\x81\xb7\', \'\xe6\x82\xa8\', \'\xe5\x94\xae\', \'\xe5\x81\x9c\', \'\xe5\x81\x8f\', \'\xe5\x81\x87\', \'\xe5\xbe\x97\', \'\xe8\xa1\x94\', \'\xe7\x9b\x98\', \'\xe8\x88\xb9\', \'\xe6\x96\x9c\', \'\xe7\x9b\x92\', \'\xe9\xb8\xbd\', \'\xe6\x82\x89\', \'\xe6\xac\xb2\', \'\xe5\xbd\xa9\', \'\xe9\xa2\x86\', \'\xe8\x84\x9a\', \'\xe8\x84\x96\',\n    \'\xe8\x84\xb8\', \'\xe8\x84\xb1\', \'\xe8\xb1\xa1\', \'\xe5\xa4\x9f\', \'\xe7\x8c\x9c\', \'\xe7\x8c\xaa\', \'\xe7\x8c\x8e\', \'\xe7\x8c\xab\', \'\xe7\x8c\x9b\', \'\xe9\xa6\x85\', \'\xe9\xa6\x86\', \'\xe5\x87\x91\', \'\xe5\x87\x8f\', \'\xe6\xaf\xab\', \'\xe9\xba\xbb\', \'\xe7\x97\x92\', \'\xe7\x97\x95\', \'\xe5\xbb\x8a\', \'\xe5\xba\xb7\', \'\xe5\xba\xb8\',\n    \'\xe9\xb9\xbf\', \'\xe7\x9b\x97\', \'\xe7\xab\xa0\', \'\xe7\xab\x9f\', \'\xe5\x95\x86\', \'\xe6\x97\x8f\', \'\xe6\x97\x8b\', \'\xe6\x9c\x9b\', \'\xe7\x8e\x87\', \'\xe7\x9d\x80\', \'\xe7\x9b\x96\', \'\xe7\xb2\x98\', \'\xe7\xb2\x97\', \'\xe7\xb2\x92\', \'\xe6\x96\xad\', \'\xe5\x89\xaa\', \'\xe5\x85\xbd\', \'\xe6\xb8\x85\', \'\xe6\xb7\xbb\', \'\xe6\xb7\x8b\',\n    \'\xe6\xb7\xb9\', \'\xe6\xb8\xa0\', \'\xe6\xb8\x90\', \'\xe6\xb7\xb7\', \'\xe6\xb8\x94\', \'\xe6\xb7\x98\', \'\xe6\xb6\xb2\', \'\xe6\xb7\xa1\', \'\xe6\xb7\xb1\', \'\xe5\xa9\x86\', \'\xe6\xa2\x81\', \'\xe6\xb8\x97\', \'\xe6\x83\x85\', \'\xe6\x83\x9c\', \'\xe6\x83\xad\', \'\xe6\x82\xbc\', \'\xe6\x83\xa7\', \'\xe6\x83\x95\', \'\xe6\x83\x8a\', \'\xe6\x83\xa8\',\n    \'\xe6\x83\xaf\', \'\xe5\xaf\x87\', \'\xe5\xaf\x84\', \'\xe5\xae\xbf\', \'\xe7\xaa\x91\', \'\xe5\xaf\x86\', \'\xe8\xb0\x8b\', \'\xe8\xb0\x8e\', \'\xe7\xa5\xb8\', \'\xe8\xb0\x9c\', \'\xe9\x80\xae\', \'\xe6\x95\xa2\', \'\xe5\xb1\xa0\', \'\xe5\xbc\xb9\', \'\xe9\x9a\x8f\', \'\xe8\x9b\x8b\', \'\xe9\x9a\x86\', \'\xe9\x9a\x90\', \'\xe5\xa9\x9a\', \'\xe5\xa9\xb6\',\n    \'\xe9\xa2\x88\', \'\xe7\xbb\xa9\', \'\xe7\xbb\xaa\', \'\xe7\xbb\xad\', \'\xe9\xaa\x91\', \'\xe7\xbb\xb3\', \'\xe7\xbb\xb4\', \'\xe7\xbb\xb5\', \'\xe7\xbb\xb8\', \'\xe7\xbb\xbf\', \'\xe7\x90\xb4\', \'\xe6\x96\x91\', \'\xe6\x9b\xbf\', \'\xe6\xac\xbe\', \'\xe5\xa0\xaa\', \'\xe6\x90\xad\', \'\xe5\xa1\x94\', \'\xe8\xb6\x8a\', \'\xe8\xb6\x81\', \'\xe8\xb6\x8b\',\n    \'\xe8\xb6\x85\', \'\xe6\x8f\x90\', \'\xe5\xa0\xa4\', \'\xe5\x8d\x9a\', \'\xe6\x8f\xad\', \'\xe5\x96\x9c\', \'\xe6\x8f\x92\', \'\xe6\x8f\xaa\', \'\xe6\x90\x9c\', \'\xe7\x85\xae\', \'\xe6\x8f\xb4\', \'\xe8\xa3\x81\', \'\xe6\x90\x81\', \'\xe6\x90\x82\', \'\xe6\x90\x85\', \'\xe6\x8f\xa1\', \'\xe6\x8f\x89\', \'\xe6\x96\xaf\', \'\xe6\x9c\x9f\', \'\xe6\xac\xba\',\n    \'\xe8\x81\x94\', \'\xe6\x95\xa3\', \'\xe6\x83\xb9\', \'\xe8\x91\xac\', \'\xe8\x91\x9b\', \'\xe8\x91\xa3\', \'\xe8\x91\xa1\', \'\xe6\x95\xac\', \'\xe8\x91\xb1\', \'\xe8\x90\xbd\', \'\xe6\x9c\x9d\', \'\xe8\xbe\x9c\', \'\xe8\x91\xb5\', \'\xe6\xa3\x92\', \'\xe6\xa3\x8b\', \'\xe6\xa4\x8d\', \'\xe6\xa3\xae\', \'\xe6\xa4\x85\', \'\xe6\xa4\x92\', \'\xe6\xa3\xb5\',\n    \'\xe6\xa3\x8d\', \'\xe6\xa3\x89\', \'\xe6\xa3\x9a\', \'\xe6\xa3\x95\', \'\xe6\x83\xa0\', \'\xe6\x83\x91\', \'\xe9\x80\xbc\', \'\xe5\x8e\xa8\', \'\xe5\x8e\xa6\', \'\xe7\xa1\xac\', \'\xe7\xa1\xae\', \'\xe9\x9b\x81\', \'\xe6\xae\x96\', \'\xe8\xa3\x82\', \'\xe9\x9b\x84\', \'\xe6\x9a\x82\', \'\xe9\x9b\x85\', \'\xe8\xbe\x88\', \'\xe6\x82\xb2\', \'\xe7\xb4\xab\',\n    \'\xe8\xbe\x89\', \'\xe6\x95\x9e\', \'\xe8\xb5\x8f\', \'\xe6\x8e\x8c\', \'\xe6\x99\xb4\', \'\xe6\x9a\x91\', \'\xe6\x9c\x80\', \'\xe9\x87\x8f\', \'\xe5\x96\xb7\', \'\xe6\x99\xb6\', \'\xe5\x96\x87\', \'\xe9\x81\x87\', \'\xe5\x96\x8a\', \'\xe6\x99\xaf\', \'\xe8\xb7\xb5\', \'\xe8\xb7\x8c\', \'\xe8\xb7\x91\', \'\xe9\x81\x97\', \'\xe8\x9b\x99\', \'\xe8\x9b\x9b\',\n    \'\xe8\x9c\x93\', \'\xe5\x96\x9d\', \'\xe5\x96\x82\', \'\xe5\x96\x98\', \'\xe5\x96\x89\', \'\xe5\xb9\x85\', \'\xe5\xb8\xbd\', \'\xe8\xb5\x8c\', \'\xe8\xb5\x94\', \'\xe9\xbb\x91\', \'\xe9\x93\xb8\', \'\xe9\x93\xba\', \'\xe9\x93\xbe\', \'\xe9\x94\x80\', \'\xe9\x94\x81\', \'\xe9\x94\x84\', \'\xe9\x94\x85\', \'\xe9\x94\x88\', \'\xe9\x94\x8b\', \'\xe9\x94\x90\',\n    \'\xe7\x9f\xad\', \'\xe6\x99\xba\', \'\xe6\xaf\xaf\', \'\xe9\xb9\x85\', \'\xe5\x89\xa9\', \'\xe7\xa8\x8d\', \'\xe7\xa8\x8b\', \'\xe7\xa8\x80\', \'\xe7\xa8\x8e\', \'\xe7\xad\x90\', \'\xe7\xad\x89\', \'\xe7\xad\x91\', \'\xe7\xad\x96\', \'\xe7\xad\x9b\', \'\xe7\xad\x92\', \'\xe7\xad\x94\', \'\xe7\xad\x8b\', \'\xe7\xad\x9d\', \'\xe5\x82\xb2\', \'\xe5\x82\x85\',\n    \'\xe7\x89\x8c\', \'\xe5\xa0\xa1\', \'\xe9\x9b\x86\', \'\xe7\x84\xa6\', \'\xe5\x82\x8d\', \'\xe5\x82\xa8\', \'\xe5\xa5\xa5\', \'\xe8\xa1\x97\', \'\xe6\x83\xa9\', \'\xe5\xbe\xa1\', \'\xe5\xbe\xaa\', \'\xe8\x89\x87\', \'\xe8\x88\x92\', \'\xe7\x95\xaa\', \'\xe9\x87\x8a\', \'\xe7\xa6\xbd\', \'\xe8\x85\x8a\', \'\xe8\x84\xbe\', \'\xe8\x85\x94\', \'\xe9\xb2\x81\',\n    \'\xe7\x8c\xbe\', \'\xe7\x8c\xb4\', \'\xe7\x84\xb6\', \'\xe9\xa6\x8b\', \'\xe8\xa3\x85\', \'\xe8\x9b\xae\', \'\xe5\xb0\xb1\', \'\xe7\x97\x9b\', \'\xe7\xab\xa5\', \'\xe9\x98\x94\', \'\xe5\x96\x84\', \'\xe7\xbe\xa1\', \'\xe6\x99\xae\', \'\xe7\xb2\xaa\', \'\xe5\xb0\x8a\', \'\xe9\x81\x93\', \'\xe6\x9b\xbe\', \'\xe7\x84\xb0\', \'\xe6\xb8\xaf\', \'\xe6\xb9\x96\',\n    \'\xe6\xb8\xa3\', \'\xe6\xb9\xbf\', \'\xe6\xb8\xa9\', \'\xe6\xb8\xb4\', \'\xe6\xbb\x91\', \'\xe6\xb9\xbe\', \'\xe6\xb8\xa1\', \'\xe6\xb8\xb8\', \'\xe6\xbb\x8b\', \'\xe6\xba\x89\', \'\xe6\x84\xa4\', \'\xe6\x85\x8c\', \'\xe6\x83\xb0\', \'\xe6\x84\xa7\', \'\xe6\x84\x89\', \'\xe6\x85\xa8\', \'\xe5\x89\xb2\', \'\xe5\xaf\x92\', \'\xe5\xaf\x8c\', \'\xe7\xaa\x9c\',\n    \'\xe7\xaa\x9d\', \'\xe7\xaa\x97\', \'\xe9\x81\x8d\', \'\xe8\xa3\x95\', \'\xe8\xa3\xa4\', \'\xe8\xa3\x99\', \'\xe8\xb0\xa2\', \'\xe8\xb0\xa3\', \'\xe8\xb0\xa6\', \'\xe5\xb1\x9e\', \'\xe5\xb1\xa1\', \'\xe5\xbc\xba\', \'\xe7\xb2\xa5\', \'\xe7\x96\x8f\', \'\xe9\x9a\x94\', \'\xe9\x9a\x99\', \'\xe7\xb5\xae\', \'\xe5\xab\x82\', \'\xe7\x99\xbb\', \'\xe7\xbc\x8e\',\n    \'\xe7\xbc\x93\', \'\xe7\xbc\x96\', \'\xe9\xaa\x97\', \'\xe7\xbc\x98\', \'\xe7\x91\x9e\', \'\xe9\xad\x82\', \'\xe8\x82\x86\', \'\xe6\x91\x84\', \'\xe6\x91\xb8\', \'\xe5\xa1\xab\', \'\xe6\x90\x8f\', \'\xe5\xa1\x8c\', \'\xe9\xbc\x93\', \'\xe6\x91\x86\', \'\xe6\x90\xba\', \'\xe6\x90\xac\', \'\xe6\x91\x87\', \'\xe6\x90\x9e\', \'\xe5\xa1\x98\', \'\xe6\x91\x8a\',\n    \'\xe8\x92\x9c\', \'\xe5\x8b\xa4\', \'\xe9\xb9\x8a\', \'\xe8\x93\x9d\', \'\xe5\xa2\x93\', \'\xe5\xb9\x95\', \'\xe8\x93\xac\', \'\xe8\x93\x84\', \'\xe8\x92\x99\', \'\xe8\x92\xb8\', \'\xe7\x8c\xae\', \'\xe7\xa6\x81\', \'\xe6\xa5\x9a\', \'\xe6\x83\xb3\', \'\xe6\xa7\x90\', \'\xe6\xa6\x86\', \'\xe6\xa5\xbc\', \'\xe6\xa6\x82\', \'\xe8\xb5\x96\', \'\xe9\x85\xac\',\n    \'\xe6\x84\x9f\', \'\xe7\xa2\x8d\', \'\xe7\xa2\x91\', \'\xe7\xa2\x8e\', \'\xe7\xa2\xb0\', \'\xe7\xa2\x97\', \'\xe7\xa2\x8c\', \'\xe9\x9b\xb7\', \'\xe9\x9b\xb6\', \'\xe9\x9b\xbe\', \'\xe9\x9b\xb9\', \'\xe8\xbe\x93\', \'\xe7\x9d\xa3\', \'\xe9\xbe\x84\', \'\xe9\x89\xb4\', \'\xe7\x9d\x9b\', \'\xe7\x9d\xa1\', \'\xe7\x9d\xac\', \'\xe9\x84\x99\', \'\xe6\x84\x9a\',\n    \'\xe6\x9a\x96\', \'\xe7\x9b\x9f\', \'\xe6\xad\x87\', \'\xe6\x9a\x97\', \'\xe7\x85\xa7\', \'\xe8\xb7\xa8\', \'\xe8\xb7\xb3\', \'\xe8\xb7\xaa\', \'\xe8\xb7\xaf\', \'\xe8\xb7\x9f\', \'\xe9\x81\xa3\', \'\xe8\x9b\xbe\', \'\xe8\x9c\x82\', \'\xe5\x97\x93\', \'\xe7\xbd\xae\', \'\xe7\xbd\xaa\', \'\xe7\xbd\xa9\', \'\xe9\x94\x99\', \'\xe9\x94\xa1\', \'\xe9\x94\xa3\',\n    \'\xe9\x94\xa4\', \'\xe9\x94\xa6\', \'\xe9\x94\xae\', \'\xe9\x94\xaf\', \'\xe7\x9f\xae\', \'\xe8\xbe\x9e\', \'\xe7\xa8\xa0\', \'\xe6\x84\x81\', \'\xe7\xad\xb9\', \'\xe7\xad\xbe\', \'\xe7\xae\x80\', \'\xe6\xaf\x81\', \'\xe8\x88\x85\', \'\xe9\xbc\xa0\', \'\xe5\x82\xac\', \'\xe5\x82\xbb\', \'\xe5\x83\x8f\', \'\xe8\xba\xb2\', \'\xe5\xbe\xae\', \'\xe6\x84\x88\',\n    \'\xe9\x81\xa5\', \'\xe8\x85\xb0\', \'\xe8\x85\xa5\', \'\xe8\x85\xb9\', \'\xe8\x85\xbe\', \'\xe8\x85\xbf\', \'\xe8\xa7\xa6\', \'\xe8\xa7\xa3\', \'\xe9\x85\xb1\', \'\xe7\x97\xb0\', \'\xe5\xbb\x89\', \'\xe6\x96\xb0\', \'\xe9\x9f\xb5\', \'\xe6\x84\x8f\', \'\xe7\xb2\xae\', \'\xe6\x95\xb0\', \'\xe7\x85\x8e\', \'\xe5\xa1\x91\', \'\xe6\x85\x88\', \'\xe7\x85\xa4\',\n    \'\xe7\x85\x8c\', \'\xe6\xbb\xa1\', \'\xe6\xbc\xa0\', \'\xe6\xba\x90\', \'\xe6\xbb\xa4\', \'\xe6\xbb\xa5\', \'\xe6\xbb\x94\', \'\xe6\xba\xaa\', \'\xe6\xba\x9c\', \'\xe6\xbb\x9a\', \'\xe6\xbb\xa8\', \'\xe7\xb2\xb1\', \'\xe6\xbb\xa9\', \'\xe6\x85\x8e\', \'\xe8\xaa\x89\', \'\xe5\xa1\x9e\', \'\xe8\xb0\xa8\', \'\xe7\xa6\x8f\', \'\xe7\xbe\xa4\', \'\xe6\xae\xbf\',\n    \'\xe8\xbe\x9f\', \'\xe9\x9a\x9c\', \'\xe5\xab\x8c\', \'\xe5\xab\x81\', \'\xe5\x8f\xa0\', \'\xe7\xbc\x9d\', \'\xe7\xbc\xa0\', \'\xe9\x9d\x99\', \'\xe7\xa2\xa7\', \'\xe7\x92\x83\', \'\xe5\xa2\x99\', \'\xe6\x92\x87\', \'\xe5\x98\x89\', \'\xe6\x91\xa7\', \'\xe6\x88\xaa\', \'\xe8\xaa\x93\', \'\xe5\xa2\x83\', \'\xe6\x91\x98\', \'\xe6\x91\x94\', \'\xe8\x81\x9a\',\n    \'\xe8\x94\xbd\', \'\xe6\x85\x95\', \'\xe6\x9a\xae\', \'\xe8\x94\x91\', \'\xe6\xa8\xa1\', \'\xe6\xa6\xb4\', \'\xe6\xa6\x9c\', \'\xe6\xa6\xa8\', \'\xe6\xad\x8c\', \'\xe9\x81\xad\', \'\xe9\x85\xb7\', \'\xe9\x85\xbf\', \'\xe9\x85\xb8\', \'\xe7\xa3\x81\', \'\xe6\x84\xbf\', \'\xe9\x9c\x80\', \'\xe5\xbc\x8a\', \'\xe8\xa3\xb3\', \'\xe9\xa2\x97\', \'\xe5\x97\xbd\',\n    \'\xe8\x9c\xbb\', \'\xe8\x9c\xa1\', \'\xe8\x9d\x87\', \'\xe8\x9c\x98\', \'\xe8\xb5\x9a\', \'\xe9\x94\xb9\', \'\xe9\x94\xbb\', \'\xe8\x88\x9e\', \'\xe7\xa8\xb3\', \'\xe7\xae\x97\', \'\xe7\xae\xa9\', \'\xe7\xae\xa1\', \'\xe5\x83\x9a\', \'\xe9\xbc\xbb\', \'\xe9\xad\x84\', \'\xe8\xb2\x8c\', \'\xe8\x86\x9c\', \'\xe8\x86\x8a\', \'\xe8\x86\x80\', \'\xe9\xb2\x9c\',\n    \'\xe7\x96\x91\', \'\xe9\xa6\x92\', \'\xe8\xa3\xb9\', \'\xe6\x95\xb2\', \'\xe8\xb1\xaa\', \'\xe8\x86\x8f\', \'\xe9\x81\xae\', \'\xe8\x85\x90\', \'\xe7\x98\xa6\', \'\xe8\xbe\xa3\', \'\xe7\xab\xad\', \'\xe7\xab\xaf\', \'\xe6\x97\x97\', \'\xe7\xb2\xbe\', \'\xe6\xad\x89\', \'\xe7\x86\x84\', \'\xe7\x86\x94\', \'\xe6\xbc\x86\', \'\xe6\xbc\x82\', \'\xe6\xbc\xab\',\n    \'\xe6\xbb\xb4\', \'\xe6\xbc\x94\', \'\xe6\xbc\x8f\', \'\xe6\x85\xa2\', \'\xe5\xaf\xa8\', \'\xe8\xb5\x9b\', \'\xe5\xaf\x9f\', \'\xe8\x9c\x9c\', \'\xe8\xb0\xb1\', \'\xe5\xab\xa9\', \'\xe7\xbf\xa0\', \'\xe7\x86\x8a\', \'\xe5\x87\xb3\', \'\xe9\xaa\xa1\', \'\xe7\xbc\xa9\', \'\xe6\x85\xa7\', \'\xe6\x92\x95\', \'\xe6\x92\x92\', \'\xe8\xb6\xa3\', \'\xe8\xb6\x9f\',\n    \'\xe6\x92\x91\', \'\xe6\x92\xad\', \'\xe6\x92\x9e\', \'\xe6\x92\xa4\', \'\xe5\xa2\x9e\', \'\xe8\x81\xaa\', \'\xe9\x9e\x8b\', \'\xe8\x95\x89\', \'\xe8\x94\xac\', \'\xe6\xa8\xaa\', \'\xe6\xa7\xbd\', \'\xe6\xa8\xb1\', \'\xe6\xa9\xa1\', \'\xe9\xa3\x98\', \'\xe9\x86\x8b\', \'\xe9\x86\x89\', \'\xe9\x9c\x87\', \'\xe9\x9c\x89\', \'\xe7\x9e\x92\', \'\xe9\xa2\x98\',\n    \'\xe6\x9a\xb4\', \'\xe7\x9e\x8e\', \'\xe5\xbd\xb1\', \'\xe8\xb8\xa2\', \'\xe8\xb8\x8f\', \'\xe8\xb8\xa9\', \'\xe8\xb8\xaa\', \'\xe8\x9d\xb6\', \'\xe8\x9d\xb4\', \'\xe5\x98\xb1\', \'\xe5\xa2\xa8\', \'\xe9\x95\x87\', \'\xe9\x9d\xa0\', \'\xe7\xa8\xbb\', \'\xe9\xbb\x8e\', \'\xe7\xa8\xbf\', \'\xe7\xa8\xbc\', \'\xe7\xae\xb1\', \'\xe7\xae\xad\', \'\xe7\xaf\x87\',\n    \'\xe5\x83\xb5\', \'\xe8\xba\xba\', \'\xe5\x83\xbb\', \'\xe5\xbe\xb7\', \'\xe8\x89\x98\', \'\xe8\x86\x9d\', \'\xe8\x86\x9b\', \'\xe7\x86\x9f\', \'\xe6\x91\xa9\', \'\xe9\xa2\x9c\', \'\xe6\xaf\x85\', \'\xe7\xb3\x8a\', \'\xe9\x81\xb5\', \'\xe6\xbd\x9c\', \'\xe6\xbd\xae\', \'\xe6\x87\x82\', \'\xe9\xa2\x9d\', \'\xe6\x85\xb0\', \'\xe5\x8a\x88\', \'\xe6\x93\x8d\',\n    \'\xe7\x87\x95\', \'\xe8\x96\xaf\', \'\xe8\x96\xaa\', \'\xe8\x96\x84\', \'\xe9\xa2\xa0\', \'\xe6\xa9\x98\', \'\xe6\x95\xb4\', \'\xe8\x9e\x8d\', \'\xe9\x86\x92\', \'\xe9\xa4\x90\', \'\xe5\x98\xb4\', \'\xe8\xb9\x84\', \'\xe5\x99\xa8\', \'\xe8\xb5\xa0\', \'\xe9\xbb\x98\', \'\xe9\x95\x9c\', \'\xe8\xb5\x9e\', \'\xe7\xaf\xae\', \'\xe9\x82\x80\', \'\xe8\xa1\xa1\',\n    \'\xe8\x86\xa8\', \'\xe9\x9b\x95\', \'\xe7\xa3\xa8\', \'\xe5\x87\x9d\', \'\xe8\xbe\xa8\', \'\xe8\xbe\xa9\', \'\xe7\xb3\x96\', \'\xe7\xb3\x95\', \'\xe7\x87\x83\', \'\xe6\xbe\xa1\', \'\xe6\xbf\x80\', \'\xe6\x87\x92\', \'\xe5\xa3\x81\', \'\xe9\x81\xbf\', \'\xe7\xbc\xb4\', \'\xe6\x88\xb4\', \'\xe6\x93\xa6\', \'\xe9\x9e\xa0\', \'\xe8\x97\x8f\', \'\xe9\x9c\x9c\',\n    \'\xe9\x9c\x9e\', \'\xe7\x9e\xa7\', \'\xe8\xb9\x88\', \'\xe8\x9e\xba\', \'\xe7\xa9\x97\', \'\xe7\xb9\x81\', \'\xe8\xbe\xab\', \'\xe8\xb5\xa2\', \'\xe7\xb3\x9f\', \'\xe7\xb3\xa0\', \'\xe7\x87\xa5\', \'\xe8\x87\x82\', \'\xe7\xbf\xbc\', \'\xe9\xaa\xa4\', \'\xe9\x9e\xad\', \'\xe8\xa6\x86\', \'\xe8\xb9\xa6\', \'\xe9\x95\xb0\', \'\xe7\xbf\xbb\', \'\xe9\xb9\xb0\',\n    \'\xe8\xad\xa6\', \'\xe6\x94\x80\', \'\xe8\xb9\xb2\', \'\xe9\xa2\xa4\', \'\xe7\x93\xa3\', \'\xe7\x88\x86\', \'\xe7\x96\x86\', \'\xe5\xa3\xa4\', \'\xe8\x80\x80\', \'\xe8\xba\x81\', \'\xe5\x9a\xbc\', \'\xe5\x9a\xb7\', \'\xe7\xb1\x8d\', \'\xe9\xad\x94\', \'\xe7\x81\x8c\', \'\xe8\xa0\xa2\', \'\xe9\x9c\xb8\', \'\xe9\x9c\xb2\', \'\xe5\x9b\x8a\', \'\xe7\xbd\x90\',\n    \'\xe5\x8c\x95\', \'\xe5\x88\x81\', \'\xe4\xb8\x90\', \'\xe6\xad\xb9\', \'\xe6\x88\x88\', \'\xe5\xa4\xad\', \'\xe4\xbb\x91\', \'\xe8\xae\xa5\', \'\xe5\x86\x97\', \'\xe9\x82\x93\', \'\xe8\x89\xbe\', \'\xe5\xa4\xaf\', \'\xe5\x87\xb8\', \'\xe5\x8d\xa2\', \'\xe5\x8f\xad\', \'\xe5\x8f\xbd\', \'\xe7\x9a\xbf\', \'\xe5\x87\xb9\', \'\xe5\x9b\x9a\', \'\xe7\x9f\xa2\',\n    \'\xe4\xb9\x8d\', \'\xe5\xb0\x94\', \'\xe5\x86\xaf\', \'\xe7\x8e\x84\', \'\xe9\x82\xa6\', \'\xe8\xbf\x82\', \'\xe9\x82\xa2\', \'\xe8\x8a\x8b\', \'\xe8\x8a\x8d\', \'\xe5\x90\x8f\', \'\xe5\xa4\xb7\', \'\xe5\x90\x81\', \'\xe5\x90\x95\', \'\xe5\x90\x86\', \'\xe5\xb1\xb9\', \'\xe5\xbb\xb7\', \'\xe8\xbf\x84\', \'\xe8\x87\xbc\', \'\xe4\xbb\xb2\', \'\xe4\xbc\xa6\',\n    \'\xe4\xbc\x8a\', \'\xe8\x82\x8b\', \'\xe6\x97\xad\', \'\xe5\x8c\x88\', \'\xe5\x87\xab\', \'\xe5\xa6\x86\', \'\xe4\xba\xa5\', \'\xe6\xb1\x9b\', \'\xe8\xae\xb3\', \'\xe8\xae\xb6\', \'\xe8\xae\xb9\', \'\xe8\xae\xbc\', \'\xe8\xaf\x80\', \'\xe5\xbc\x9b\', \'\xe9\x98\xb1\', \'\xe9\xa9\xae\', \'\xe9\xa9\xaf\', \'\xe7\xba\xab\', \'\xe7\x8e\x96\', \'\xe7\x8e\x9b\',\n    \'\xe9\x9f\xa7\', \'\xe6\x8a\xa0\', \'\xe6\x89\xbc\', \'\xe6\xb1\x9e\', \'\xe6\x89\xb3\', \'\xe6\x8a\xa1\', \'\xe5\x9d\x8e\', \'\xe5\x9d\x9e\', \'\xe6\x8a\x91\', \'\xe6\x8b\x9f\', \'\xe6\x8a\x92\', \'\xe8\x8a\x99\', \'\xe8\x8a\x9c\', \'\xe8\x8b\x87\', \'\xe8\x8a\xa5\', \'\xe8\x8a\xaf\', \'\xe8\x8a\xad\', \'\xe6\x9d\x96\', \'\xe6\x9d\x89\', \'\xe5\xb7\xab\',\n    \'\xe6\x9d\x88\', \'\xe7\x94\xab\', \'\xe5\x8c\xa3\', \'\xe8\xbd\xa9\', \'\xe5\x8d\xa4\', \'\xe8\x82\x96\', \'\xe5\x90\xb1\', \'\xe5\x90\xa0\', \'\xe5\x91\x95\', \'\xe5\x91\x90\', \'\xe5\x90\x9f\', \'\xe5\x91\x9b\', \'\xe5\x90\xbb\', \'\xe5\x90\xad\', \'\xe9\x82\x91\', \'\xe5\x9b\xa4\', \'\xe5\x90\xae\', \'\xe5\xb2\x96\', \'\xe7\x89\xa1\', \'\xe4\xbd\x91\',\n    \'\xe4\xbd\x83\', \'\xe4\xbc\xba\', \'\xe5\x9b\xb1\', \'\xe8\x82\x9b\', \'\xe8\x82\x98\', \'\xe7\x94\xb8\', \'\xe7\x8b\x88\', \'\xe9\xb8\xa0\', \'\xe5\xbd\xa4\', \'\xe7\x81\xb8\', \'\xe5\x88\xa8\', \'\xe5\xba\x87\', \'\xe5\x90\x9d\', \'\xe5\xba\x90\', \'\xe9\x97\xb0\', \'\xe5\x85\x91\', \'\xe7\x81\xbc\', \'\xe6\xb2\x90\', \'\xe6\xb2\x9b\', \'\xe6\xb1\xb0\',\n    \'\xe6\xb2\xa5\', \'\xe6\xb2\xa6\', \'\xe6\xb1\xb9\', \'\xe6\xb2\xa7\', \'\xe6\xb2\xaa\', \'\xe5\xbf\xb1\', \'\xe8\xaf\x85\', \'\xe8\xaf\x88\', \'\xe7\xbd\x95\', \'\xe5\xb1\x81\', \'\xe5\x9d\xa0\', \'\xe5\xa6\x93\', \'\xe5\xa7\x8a\', \'\xe5\xa6\x92\', \'\xe7\xba\xac\', \'\xe7\x8e\xab\', \'\xe5\x8d\xa6\', \'\xe5\x9d\xb7\', \'\xe5\x9d\xaf\', \'\xe6\x8b\x93\',\n    \'\xe5\x9d\xaa\', \'\xe5\x9d\xa4\', \'\xe6\x8b\x84\', \'\xe6\x8b\xa7\', \'\xe6\x8b\x82\', \'\xe6\x8b\x99\', \'\xe6\x8b\x87\', \'\xe6\x8b\x97\', \'\xe8\x8c\x89\', \'\xe6\x98\x94\', \'\xe8\x8b\x9b\', \'\xe8\x8b\xab\', \'\xe8\x8b\x9f\', \'\xe8\x8b\x9e\', \'\xe8\x8c\x81\', \'\xe8\x8b\x94\', \'\xe6\x9e\x89\', \'\xe6\x9e\xa2\', \'\xe6\x9e\x9a\', \'\xe6\x9e\xab\',\n    \'\xe6\x9d\xad\', \'\xe9\x83\x81\', \'\xe7\x9f\xbe\', \'\xe5\xa5\x88\', \'\xe5\xa5\x84\', \'\xe6\xae\xb4\', \'\xe6\xad\xa7\', \'\xe5\x8d\x93\', \'\xe6\x98\x99\', \'\xe5\x93\x8e\', \'\xe5\x92\x95\', \'\xe5\x91\xb5\', \'\xe5\x92\x99\', \'\xe5\x91\xbb\', \'\xe5\x92\x92\', \'\xe5\x92\x86\', \'\xe5\x92\x96\', \'\xe5\xb8\x95\', \'\xe8\xb4\xa6\', \'\xe8\xb4\xac\',\n    \'\xe8\xb4\xae\', \'\xe6\xb0\x9b\', \'\xe7\xa7\x89\', \'\xe5\xb2\xb3\', \'\xe4\xbe\xa0\', \'\xe4\xbe\xa5\', \'\xe4\xbe\xa3\', \'\xe4\xbe\x88\', \'\xe5\x8d\x91\', \'\xe5\x88\xbd\', \'\xe5\x88\xb9\', \'\xe8\x82\xb4\', \'\xe8\xa7\x85\', \'\xe5\xbf\xbf\', \'\xe7\x93\xae\', \'\xe8\x82\xae\', \'\xe8\x82\xaa\', \'\xe7\x8b\x9e\', \'\xe5\xba\x9e\', \'\xe7\x96\x9f\',\n    \'\xe7\x96\x99\', \'\xe7\x96\x9a\', \'\xe5\x8d\x92\', \'\xe6\xb0\x93\', \'\xe7\x82\xac\', \'\xe6\xb2\xbd\', \'\xe6\xb2\xae\', \'\xe6\xb3\xa3\', \'\xe6\xb3\x9e\', \'\xe6\xb3\x8c\', \'\xe6\xb2\xbc\', \'\xe6\x80\x94\', \'\xe6\x80\xaf\', \'\xe5\xae\xa0\', \'\xe5\xae\x9b\', \'\xe8\xa1\xa9\', \'\xe7\xa5\x88\', \'\xe8\xaf\xa1\', \'\xe5\xb8\x9a\', \'\xe5\xb1\x89\',\n    \'\xe5\xbc\xa7\', \'\xe5\xbc\xa5\', \'\xe9\x99\x8b\', \'\xe9\x99\x8c\', \'\xe5\x87\xbd\', \'\xe5\xa7\x86\', \'\xe8\x99\xb1\', \'\xe5\x8f\x81\', \'\xe7\xbb\x85\', \'\xe9\xa9\xb9\', \'\xe7\xbb\x8a\', \'\xe7\xbb\x8e\', \'\xe5\xa5\x91\', \'\xe8\xb4\xb0\', \'\xe7\x8e\xb7\', \'\xe7\x8e\xb2\', \'\xe7\x8f\x8a\', \'\xe6\x8b\xad\', \'\xe6\x8b\xb7\', \'\xe6\x8b\xb1\',\n    \'\xe6\x8c\x9f\', \'\xe5\x9e\xa2\', \'\xe5\x9e\x9b\', \'\xe6\x8b\xaf\', \'\xe8\x8d\x86\', \'\xe8\x8c\xb8\', \'\xe8\x8c\xac\', \'\xe8\x8d\x9a\', \'\xe8\x8c\xb5\', \'\xe8\x8c\xb4\', \'\xe8\x8d\x9e\', \'\xe8\x8d\xa0\', \'\xe8\x8d\xa4\', \'\xe8\x8d\xa7\', \'\xe8\x8d\x94\', \'\xe6\xa0\x88\', \'\xe6\x9f\x91\', \'\xe6\xa0\x85\', \'\xe6\x9f\xa0\', \'\xe6\x9e\xb7\',\n    \'\xe5\x8b\x83\', \'\xe6\x9f\xac\', \'\xe7\xa0\x82\', \'\xe6\xb3\xb5\', \'\xe7\xa0\x9a\', \'\xe9\xb8\xa5\', \'\xe8\xbd\xb4\', \'\xe9\x9f\xad\', \'\xe8\x99\x90\', \'\xe6\x98\xa7\', \'\xe7\x9b\xb9\', \'\xe5\x92\xa7\', \'\xe6\x98\xb5\', \'\xe6\x98\xad\', \'\xe7\x9b\x85\', \'\xe5\x8b\x8b\', \'\xe5\x93\x86\', \'\xe5\x92\xaa\', \'\xe5\x93\x9f\', \'\xe5\xb9\xbd\',\n    \'\xe9\x92\x99\', \'\xe9\x92\x9d\', \'\xe9\x92\xa0\', \'\xe9\x92\xa6\', \'\xe9\x92\xa7\', \'\xe9\x92\xae\', \'\xe6\xaf\xa1\', \'\xe6\xb0\xa2\', \'\xe7\xa7\x95\', \'\xe4\xbf\x8f\', \'\xe4\xbf\x84\', \'\xe4\xbf\x90\', \'\xe4\xbe\xaf\', \'\xe5\xbe\x8a\', \'\xe8\xa1\x8d\', \'\xe8\x83\x9a\', \'\xe8\x83\xa7\', \'\xe8\x83\x8e\', \'\xe7\x8b\xb0\', \'\xe9\xa5\xb5\',\n    \'\xe5\xb3\xa6\', \'\xe5\xa5\x95\', \'\xe5\x92\xa8\', \'\xe9\xa3\x92\', \'\xe9\x97\xba\', \'\xe9\x97\xbd\', \'\xe7\xb1\xbd\', \'\xe5\xa8\x84\', \'\xe7\x83\x81\', \'\xe7\x82\xab\', \'\xe6\xb4\xbc\', \'\xe6\x9f\x92\', \'\xe6\xb6\x8e\', \'\xe6\xb4\x9b\', \'\xe6\x81\x83\', \'\xe6\x81\x8d\', \'\xe6\x81\xac\', \'\xe6\x81\xa4\', \'\xe5\xae\xa6\', \'\xe8\xaf\xab\',\n    \'\xe8\xaf\xac\', \'\xe7\xa5\xa0\', \'\xe8\xaf\xb2\', \'\xe5\xb1\x8f\', \'\xe5\xb1\x8e\', \'\xe9\x80\x8a\', \'\xe9\x99\xa8\', \'\xe5\xa7\x9a\', \'\xe5\xa8\x9c\', \'\xe8\x9a\xa4\', \'\xe9\xaa\x87\', \'\xe8\x80\x98\', \'\xe8\x80\x99\', \'\xe7\xa7\xa6\', \'\xe5\x8c\xbf\', \'\xe5\x9f\x82\', \'\xe6\x8d\x82\', \'\xe6\x8d\x8d\', \'\xe8\xa2\x81\', \'\xe6\x8d\x8c\',\n    \'\xe6\x8c\xab\', \'\xe6\x8c\x9a\', \'\xe6\x8d\xa3\', \'\xe6\x8d\x85\', \'\xe5\x9f\x83\', \'\xe8\x80\xbf\', \'\xe8\x81\x82\', \'\xe8\x8d\xb8\', \'\xe8\x8e\xbd\', \'\xe8\x8e\xb1\', \'\xe8\x8e\x89\', \'\xe8\x8e\xb9\', \'\xe8\x8e\xba\', \'\xe6\xa2\x86\', \'\xe6\xa0\x96\', \'\xe6\xa1\xa6\', \'\xe6\xa0\x93\', \'\xe6\xa1\x85\', \'\xe6\xa1\xa9\', \'\xe8\xb4\xbe\',\n    \'\xe9\x85\x8c\', \'\xe7\xa0\xb8\', \'\xe7\xa0\xb0\', \'\xe7\xa0\xbe\', \'\xe6\xae\x89\', \'\xe9\x80\x9e\', \'\xe5\x93\xae\', \'\xe5\x94\xa0\', \'\xe5\x93\xba\', \'\xe5\x89\x94\', \'\xe8\x9a\x8c\', \'\xe8\x9a\x9c\', \'\xe7\x95\x94\', \'\xe8\x9a\xa3\', \'\xe8\x9a\xaa\', \'\xe8\x9a\x93\', \'\xe5\x93\xa9\', \'\xe5\x9c\x83\', \'\xe9\xb8\xaf\', \'\xe5\x94\x81\',\n    \'\xe5\x93\xbc\', \'\xe5\x94\x86\', \'\xe5\xb3\xad\', \'\xe5\x94\xa7\', \'\xe5\xb3\xbb\', \'\xe8\xb5\x82\', \'\xe8\xb5\x83\', \'\xe9\x92\xbe\', \'\xe9\x93\x86\', \'\xe6\xb0\xa8\', \'\xe7\xa7\xab\', \'\xe7\xac\x86\', \'\xe4\xbf\xba\', \'\xe8\xb5\x81\', \'\xe5\x80\x94\', \'\xe6\xae\xb7\', \'\xe8\x80\xb8\', \'\xe8\x88\x80\', \'\xe8\xb1\xba\', \'\xe8\xb1\xb9\',\n    \'\xe9\xa2\x81\', \'\xe8\x83\xaf\', \'\xe8\x83\xb0\', \'\xe8\x84\x90\', \'\xe8\x84\x93\', \'\xe9\x80\x9b\', \'\xe5\x8d\xbf\', \'\xe9\xb8\xb5\', \'\xe9\xb8\xb3\', \'\xe9\xa6\x81\', \'\xe5\x87\x8c\', \'\xe5\x87\x84\', \'\xe8\xa1\xb7\', \'\xe9\x83\xad\', \'\xe6\x96\x8b\', \'\xe7\x96\xb9\', \'\xe7\xb4\x8a\', \'\xe7\x93\xb7\', \'\xe7\xbe\x94\', \'\xe7\x83\x99\',\n    \'\xe6\xb5\xa6\', \'\xe6\xb6\xa1\', \'\xe6\xb6\xa3\', \'\xe6\xb6\xa4\', \'\xe6\xb6\xa7\', \'\xe6\xb6\x95\', \'\xe6\xb6\xa9\', \'\xe6\x82\x8d\', \'\xe6\x82\xaf\', \'\xe7\xaa\x8d\', \'\xe8\xaf\xba\', \'\xe8\xaf\xbd\', \'\xe8\xa2\x92\', \'\xe8\xb0\x86\', \'\xe7\xa5\x9f\', \'\xe6\x81\x95\', \'\xe5\xa8\xa9\', \'\xe9\xaa\x8f\', \'\xe7\x90\x90\', \'\xe9\xba\xb8\',\n    \'\xe7\x90\x89\', \'\xe7\x90\x85\', \'\xe6\x8e\xaa\', \'\xe6\x8d\xba\', \'\xe6\x8d\xb6\', \'\xe8\xb5\xa6\', \'\xe5\x9f\xa0\', \'\xe6\x8d\xbb\', \'\xe6\x8e\x90\', \'\xe6\x8e\x82\', \'\xe6\x8e\x96\', \'\xe6\x8e\xb7\', \'\xe6\x8e\xb8\', \'\xe6\x8e\xba\', \'\xe5\x8b\x98\', \'\xe8\x81\x8a\', \'\xe5\xa8\xb6\', \'\xe8\x8f\xb1\', \'\xe8\x8f\xb2\', \'\xe8\x90\x8e\',\n    \'\xe8\x8f\xa9\', \'\xe8\x90\xa4\', \'\xe4\xb9\xbe\', \'\xe8\x90\xa7\', \'\xe8\x90\xa8\', \'\xe8\x8f\x87\', \'\xe5\xbd\xac\', \'\xe6\xa2\x97\', \'\xe6\xa2\xa7\', \'\xe6\xa2\xad\', \'\xe6\x9b\xb9\', \'\xe9\x85\x9d\', \'\xe9\x85\x97\', \'\xe5\x8e\xa2\', \'\xe7\xa1\x85\', \'\xe7\xa1\x95\', \'\xe5\xa5\xa2\', \'\xe7\x9b\x94\', \'\xe5\x8c\xbe\', \'\xe9\xa2\x85\',\n    \'\xe5\xbd\xaa\', \'\xe7\x9c\xb6\', \'\xe6\x99\xa4\', \'\xe6\x9b\xbc\', \'\xe6\x99\xa6\', \'\xe5\x86\x95\', \'\xe5\x95\xa1\', \'\xe7\x95\xa6\', \'\xe8\xb6\xbe\', \'\xe5\x95\x83\', \'\xe8\x9b\x86\', \'\xe8\x9a\xaf\', \'\xe8\x9b\x89\', \'\xe8\x9b\x80\', \'\xe5\x94\xac\', \'\xe5\x94\xbe\', \'\xe5\x95\xa4\', \'\xe5\x95\xa5\', \'\xe5\x95\xb8\', \'\xe5\xb4\x8e\',\n    \'\xe9\x80\xbb\', \'\xe5\xb4\x94\', \'\xe5\xb4\xa9\', \'\xe5\xa9\xb4\', \'\xe8\xb5\x8a\', \'\xe9\x93\x90\', \'\xe9\x93\x9b\', \'\xe9\x93\x9d\', \'\xe9\x93\xa1\', \'\xe9\x93\xa3\', \'\xe9\x93\xad\', \'\xe7\x9f\xab\', \'\xe7\xa7\xb8\', \'\xe7\xa7\xbd\', \'\xe7\xac\x99\', \'\xe7\xac\xa4\', \'\xe5\x81\x8e\', \'\xe5\x82\x80\', \'\xe8\xba\xaf\', \'\xe5\x85\x9c\',\n    \'\xe8\xa1\x85\', \'\xe5\xbe\x98\', \'\xe5\xbe\x99\', \'\xe8\x88\xb6\', \'\xe8\x88\xb7\', \'\xe8\x88\xb5\', \'\xe6\x95\x9b\', \'\xe7\xbf\x8e\', \'\xe8\x84\xaf\', \'\xe9\x80\xb8\', \'\xe5\x87\xb0\', \'\xe7\x8c\x96\', \'\xe7\xa5\xad\', \'\xe7\x83\xb9\', \'\xe5\xba\xb6\', \'\xe5\xba\xb5\', \'\xe7\x97\x8a\', \'\xe9\x98\x8e\', \'\xe9\x98\x90\', \'\xe7\x9c\xb7\',\n    \'\xe7\x84\x8a\', \'\xe7\x84\x95\', \'\xe9\xb8\xbf\', \'\xe6\xb6\xaf\', \'\xe6\xb7\x91\', \'\xe6\xb7\x8c\', \'\xe6\xb7\xae\', \'\xe6\xb7\x86\', \'\xe6\xb8\x8a\', \'\xe6\xb7\xab\', \'\xe6\xb7\xb3\', \'\xe6\xb7\xa4\', \'\xe6\xb7\x80\', \'\xe6\xb6\xae\', \'\xe6\xb6\xb5\', \'\xe6\x83\xa6\', \'\xe6\x82\xb4\', \'\xe6\x83\x8b\', \'\xe5\xaf\x82\', \'\xe7\xaa\x92\',\n    \'\xe8\xb0\x8d\', \'\xe8\xb0\x90\', \'\xe8\xa3\x86\', \'\xe8\xa2\xb1\', \'\xe7\xa5\xb7\', \'\xe8\xb0\x92\', \'\xe8\xb0\x93\', \'\xe8\xb0\x9a\', \'\xe5\xb0\x89\', \'\xe5\xa0\x95\', \'\xe9\x9a\x85\', \'\xe5\xa9\x89\', \'\xe9\xa2\x87\', \'\xe7\xbb\xb0\', \'\xe7\xbb\xb7\', \'\xe7\xbb\xbc\', \'\xe7\xbb\xbd\', \'\xe7\xbc\x80\', \'\xe5\xb7\xa2\', \'\xe7\x90\xb3\',\n    \'\xe7\x90\xa2\', \'\xe7\x90\xbc\', \'\xe6\x8f\x8d\', \'\xe5\xa0\xb0\', \'\xe6\x8f\xa9\', \'\xe6\x8f\xbd\', \'\xe6\x8f\x96\', \'\xe5\xbd\xad\', \'\xe6\x8f\xa3\', \'\xe6\x90\x80\', \'\xe6\x90\x93\', \'\xe5\xa3\xb9\', \'\xe6\x90\x94\', \'\xe8\x91\xab\', \'\xe5\x8b\x9f\', \'\xe8\x92\x8b\', \'\xe8\x92\x82\', \'\xe9\x9f\xa9\', \'\xe6\xa3\xb1\', \'\xe6\xa4\xb0\',\n    \'\xe7\x84\x9a\', \'\xe6\xa4\x8e\', \'\xe6\xa3\xba\', \'\xe6\xa6\x94\', \'\xe6\xa4\xad\', \'\xe7\xb2\x9f\', \'\xe6\xa3\x98\', \'\xe9\x85\xa3\', \'\xe9\x85\xa5\', \'\xe7\xa1\x9d\', \'\xe7\xa1\xab\', \'\xe9\xa2\x8a\', \'\xe9\x9b\xb3\', \'\xe7\xbf\x98\', \'\xe5\x87\xbf\', \'\xe6\xa3\xa0\', \'\xe6\x99\xb0\', \'\xe9\xbc\x8e\', \'\xe5\x96\xb3\', \'\xe9\x81\x8f\',\n    \'\xe6\x99\xbe\', \'\xe7\x95\xb4\', \'\xe8\xb7\x8b\', \'\xe8\xb7\x9b\', \'\xe8\x9b\x94\', \'\xe8\x9c\x92\', \'\xe8\x9b\xa4\', \'\xe9\xb9\x83\', \'\xe5\x96\xbb\', \'\xe5\x95\xbc\', \'\xe5\x96\xa7\', \'\xe5\xb5\x8c\', \'\xe8\xb5\x8b\', \'\xe8\xb5\x8e\', \'\xe8\xb5\x90\', \'\xe9\x94\x89\', \'\xe9\x94\x8c\', \'\xe7\x94\xa5\', \'\xe6\x8e\xb0\', \'\xe6\xb0\xae\',\n    \'\xe6\xb0\xaf\', \'\xe9\xbb\x8d\', \'\xe7\xad\x8f\', \'\xe7\x89\x8d\', \'\xe7\xb2\xa4\', \'\xe9\x80\xbe\', \'\xe8\x85\x8c\', \'\xe8\x85\x8b\', \'\xe8\x85\x95\', \'\xe7\x8c\xa9\', \'\xe7\x8c\xac\', \'\xe6\x83\xab\', \'\xe6\x95\xa6\', \'\xe7\x97\x98\', \'\xe7\x97\xa2\', \'\xe7\x97\xaa\', \'\xe7\xab\xa3\', \'\xe7\xbf\x94\', \'\xe5\xa5\xa0\', \'\xe9\x81\x82\',\n    \'\xe7\x84\x99\', \'\xe6\xbb\x9e\', \'\xe6\xb9\x98\', \'\xe6\xb8\xa4\', \'\xe6\xb8\xba\', \'\xe6\xba\x83\', \'\xe6\xba\x85\', \'\xe6\xb9\x83\', \'\xe6\x84\x95\', \'\xe6\x83\xb6\', \'\xe5\xaf\x93\', \'\xe7\xaa\x96\', \'\xe7\xaa\x98\', \'\xe9\x9b\x87\', \'\xe8\xb0\xa4\', \'\xe7\x8a\x80\', \'\xe9\x9a\x98\', \'\xe5\xaa\x92\', \'\xe5\xaa\x9a\', \'\xe5\xa9\xbf\',\n    \'\xe7\xbc\x85\', \'\xe7\xbc\x86\', \'\xe7\xbc\x94\', \'\xe7\xbc\x95\', \'\xe9\xaa\x9a\', \'\xe7\x91\x9f\', \'\xe9\xb9\x89\', \'\xe7\x91\xb0\', \'\xe6\x90\xaa\', \'\xe8\x81\x98\', \'\xe6\x96\x9f\', \'\xe9\x9d\xb4\', \'\xe9\x9d\xb6\', \'\xe8\x93\x96\', \'\xe8\x92\xbf\', \'\xe8\x92\xb2\', \'\xe8\x93\x89\', \'\xe6\xa5\x94\', \'\xe6\xa4\xbf\', \'\xe6\xa5\xb7\',\n    \'\xe6\xa6\x84\', \'\xe6\xa5\x9e\', \'\xe6\xa5\xa3\', \'\xe9\x85\xaa\', \'\xe7\xa2\x98\', \'\xe7\xa1\xbc\', \'\xe7\xa2\x89\', \'\xe8\xbe\x90\', \'\xe8\xbe\x91\', \'\xe9\xa2\x91\', \'\xe7\x9d\xb9\', \'\xe7\x9d\xa6\', \'\xe7\x9e\x84\', \'\xe5\x97\x9c\', \'\xe5\x97\xa6\', \'\xe6\x9a\x87\', \'\xe7\x95\xb8\', \'\xe8\xb7\xb7\', \'\xe8\xb7\xba\', \'\xe8\x9c\x88\',\n    \'\xe8\x9c\x97\', \'\xe8\x9c\x95\', \'\xe8\x9b\xb9\', \'\xe5\x97\x85\', \'\xe5\x97\xa1\', \'\xe5\x97\xa4\', \'\xe7\xbd\xb2\', \'\xe8\x9c\x80\', \'\xe5\xb9\x8c\', \'\xe9\x94\x9a\', \'\xe9\x94\xa5\', \'\xe9\x94\xa8\', \'\xe9\x94\xad\', \'\xe9\x94\xb0\', \'\xe7\xa8\x9a\', \'\xe9\xa2\x93\', \'\xe7\xad\xb7\', \'\xe9\xad\x81\', \'\xe8\xa1\x99\', \'\xe8\x85\xbb\',\n    \'\xe8\x85\xae\', \'\xe8\x85\xba\', \'\xe9\xb9\x8f\', \'\xe8\x82\x84\', \'\xe7\x8c\xbf\', \'\xe9\xa2\x96\', \'\xe7\x85\x9e\', \'\xe9\x9b\x8f\', \'\xe9\xa6\x8d\', \'\xe9\xa6\x8f\', \'\xe7\xa6\x80\', \'\xe7\x97\xb9\', \'\xe5\xbb\x93\', \'\xe7\x97\xb4\', \'\xe9\x9d\x96\', \'\xe8\xaa\x8a\', \'\xe6\xbc\x93\', \'\xe6\xba\xa2\', \'\xe6\xba\xaf\', \'\xe6\xba\xb6\',\n    \'\xe6\xbb\x93\', \'\xe6\xba\xba\', \'\xe5\xaf\x9e\', \'\xe7\xaa\xa5\', \'\xe7\xaa\x9f\', \'\xe5\xaf\x9d\', \'\xe8\xa4\x82\', \'\xe8\xa3\xb8\', \'\xe8\xb0\xac\', \'\xe5\xaa\xb3\', \'\xe5\xab\x89\', \'\xe7\xbc\x9a\', \'\xe7\xbc\xa4\', \'\xe5\x89\xbf\', \'\xe8\xb5\x98\', \'\xe7\x86\xac\', \'\xe8\xb5\xab\', \'\xe8\x94\xab\', \'\xe6\x91\xb9\', \'\xe8\x94\x93\',\n    \'\xe8\x94\x97\', \'\xe8\x94\xbc\', \'\xe7\x86\x99\', \'\xe8\x94\x9a\', \'\xe5\x85\xa2\', \'\xe6\xa6\x9b\', \'\xe6\xa6\x95\', \'\xe9\x85\xb5\', \'\xe7\xa2\x9f\', \'\xe7\xa2\xb4\', \'\xe7\xa2\xb1\', \'\xe7\xa2\xb3\', \'\xe8\xbe\x95\', \'\xe8\xbe\x96\', \'\xe9\x9b\x8c\', \'\xe5\xa2\x85\', \'\xe5\x98\x81\', \'\xe8\xb8\x8a\', \'\xe8\x9d\x89\', \'\xe5\x98\x80\',\n    \'\xe5\xb9\x94\', \'\xe9\x95\x80\', \'\xe8\x88\x94\', \'\xe7\x86\x8f\', \'\xe7\xae\x8d\', \'\xe7\xae\x95\', \'\xe7\xae\xab\', \'\xe8\x88\x86\', \'\xe5\x83\xa7\', \'\xe5\xad\xb5\', \'\xe7\x98\xa9\', \'\xe7\x98\x9f\', \'\xe5\xbd\xb0\', \'\xe7\xb2\xb9\', \'\xe6\xbc\xb1\', \'\xe6\xbc\xa9\', \'\xe6\xbc\xbe\', \'\xe6\x85\xb7\', \'\xe5\xaf\xa1\', \'\xe5\xaf\xa5\',\n    \'\xe8\xb0\xad\', \'\xe8\xa4\x90\', \'\xe8\xa4\xaa\', \'\xe9\x9a\xa7\', \'\xe5\xab\xa1\', \'\xe7\xbc\xa8\', \'\xe6\x92\xb5\', \'\xe6\x92\xa9\', \'\xe6\x92\xae\', \'\xe6\x92\xac\', \'\xe6\x93\x92\', \'\xe5\xa2\xa9\', \'\xe6\x92\xb0\', \'\xe9\x9e\x8d\', \'\xe8\x95\x8a\', \'\xe8\x95\xb4\', \'\xe6\xa8\x8a\', \'\xe6\xa8\x9f\', \'\xe6\xa9\x84\', \'\xe6\x95\xb7\',\n    \'\xe8\xb1\x8c\', \'\xe9\x86\x87\', \'\xe7\xa3\x95\', \'\xe7\xa3\x85\', \'\xe7\xa2\xbe\', \'\xe6\x86\x8b\', \'\xe5\x98\xb6\', \'\xe5\x98\xb2\', \'\xe5\x98\xb9\', \'\xe8\x9d\xa0\', \'\xe8\x9d\x8e\', \'\xe8\x9d\x8c\', \'\xe8\x9d\x97\', \'\xe8\x9d\x99\', \'\xe5\x98\xbf\', \'\xe5\xb9\xa2\', \'\xe9\x95\x8a\', \'\xe9\x95\x90\', \'\xe7\xa8\xbd\', \'\xe7\xaf\x93\',\n    \'\xe8\x86\x98\', \'\xe9\xb2\xa4\', \'\xe9\xb2\xab\', \'\xe8\xa4\x92\', \'\xe7\x98\xaa\', \'\xe7\x98\xa4\', \'\xe7\x98\xab\', \'\xe5\x87\x9b\', \'\xe6\xbe\x8e\', \'\xe6\xbd\xad\', \'\xe6\xbd\xa6\', \'\xe6\xbe\xb3\', \'\xe6\xbd\x98\', \'\xe6\xbe\x88\', \'\xe6\xbe\x9c\', \'\xe6\xbe\x84\', \'\xe6\x86\x94\', \'\xe6\x87\x8a\', \'\xe6\x86\x8e\', \'\xe7\xbf\xa9\',\n    \'\xe8\xa4\xa5\', \'\xe8\xb0\xb4\', \'\xe9\xb9\xa4\', \'\xe6\x86\xa8\', \'\xe5\xb1\xa5\', \'\xe5\xac\x89\', \'\xe8\xb1\xab\', \'\xe7\xbc\xad\', \'\xe6\x92\xbc\', \'\xe6\x93\x82\', \'\xe6\x93\x85\', \'\xe8\x95\xbe\', \'\xe8\x96\x9b\', \'\xe8\x96\x87\', \'\xe6\x93\x8e\', \'\xe7\xbf\xb0\', \'\xe5\x99\xa9\', \'\xe6\xa9\xb1\', \'\xe6\xa9\x99\', \'\xe7\x93\xa2\',\n    \'\xe8\x9f\xa5\', \'\xe9\x9c\x8d\', \'\xe9\x9c\x8e\', \'\xe8\xbe\x99\', \'\xe5\x86\x80\', \'\xe8\xb8\xb1\', \'\xe8\xb9\x82\', \'\xe8\x9f\x86\', \'\xe8\x9e\x83\', \'\xe8\x9e\x9f\', \'\xe5\x99\xaa\', \'\xe9\xb9\xa6\', \'\xe9\xbb\x94\', \'\xe7\xa9\x86\', \'\xe7\xaf\xa1\', \'\xe7\xaf\xb7\', \'\xe7\xaf\x99\', \'\xe7\xaf\xb1\', \'\xe5\x84\x92\', \'\xe8\x86\xb3\',\n    \'\xe9\xb2\xb8\', \'\xe7\x98\xbe\', \'\xe7\x98\xb8\', \'\xe7\xb3\x99\', \'\xe7\x87\x8e\', \'\xe6\xbf\x92\', \'\xe6\x86\xbe\', \'\xe6\x87\x88\', \'\xe7\xaa\xbf\', \'\xe7\xbc\xb0\', \'\xe5\xa3\x95\', \'\xe8\x97\x90\', \'\xe6\xaa\xac\', \'\xe6\xaa\x90\', \'\xe6\xaa\xa9\', \'\xe6\xaa\x80\', \'\xe7\xa4\x81\', \'\xe7\xa3\xb7\', \'\xe4\xba\x86\', \'\xe7\x9e\xac\',\n    \'\xe7\x9e\xb3\', \'\xe7\x9e\xaa\', \'\xe6\x9b\x99\', \'\xe8\xb9\x8b\', \'\xe8\x9f\x8b\', \'\xe8\x9f\x80\', \'\xe5\x9a\x8e\', \'\xe8\xb5\xa1\', \'\xe9\x95\xa3\', \'\xe9\xad\x8f\', \'\xe7\xb0\x87\', \'\xe5\x84\xa1\', \'\xe5\xbe\xbd\', \'\xe7\x88\xb5\', \'\xe6\x9c\xa6\', \'\xe8\x87\x8a\', \'\xe9\xb3\x84\', \'\xe7\xb3\x9c\', \'\xe7\x99\x8c\', \'\xe6\x87\xa6\',\n    \'\xe8\xb1\x81\', \'\xe8\x87\x80\', \'\xe8\x97\x95\', \'\xe8\x97\xa4\', \'\xe7\x9e\xbb\', \'\xe5\x9a\xa3\', \'\xe9\xb3\x8d\', \'\xe7\x99\x9e\', \'\xe7\x80\x91\', \'\xe8\xa5\x9f\', \'\xe7\x92\xa7\', \'\xe6\x88\xb3\', \'\xe6\x94\x92\', \'\xe5\xad\xbd\', \'\xe8\x98\x91\', \'\xe8\x97\xbb\', \'\xe9\xb3\x96\', \'\xe8\xb9\xad\', \'\xe8\xb9\xac\', \'\xe7\xb0\xb8\',\n    \'\xe7\xb0\xbf\', \'\xe8\x9f\xb9\', \'\xe9\x9d\xa1\', \'\xe7\x99\xa3\', \'\xe7\xbe\xb9\', \'\xe9\xac\x93\', \'\xe6\x94\x98\', \'\xe8\xa0\x95\', \'\xe5\xb7\x8d\', \'\xe9\xb3\x9e\', \'\xe7\xb3\xaf\', \'\xe8\xad\xac\', \'\xe9\x9c\xb9\', \'\xe8\xba\x8f\', \'\xe9\xab\x93\', \'\xe8\x98\xb8\', \'\xe9\x95\xb6\', \'\xe7\x93\xa4\', \'\xe7\x9f\x97\', \'\xe5\x9c\xb3\',\n    \'\xe7\x8f\x8f\', \'\xe8\x95\x99\', \'\xe6\x97\xbb\', \'\xe6\xb6\x85\', \'\xe6\x94\xb8\', \'\xe5\x98\x9b\', \'\xe9\x86\xaa\', \'\xe7\xbc\xaa\', \'\xe5\x99\x97\', \'\xe7\x9e\xa8\', \'\xe9\x9d\xb3\', \'\xe5\xb8\xb7\', \'\xe5\xbe\xa8\',\n]\n\nFLOAT = [\'.\']\n\nSIMPLE_CATEGORY_MODEL = dict(\n    NUMERIC=NUMBER,\n    ALPHANUMERIC=NUMBER + ALPHA_LOWER + ALPHA_UPPER,\n    ALPHANUMERIC_LOWER=NUMBER + ALPHA_LOWER,\n    ALPHANUMERIC_UPPER=NUMBER + ALPHA_UPPER,\n    ALPHABET_LOWER=ALPHA_LOWER,\n    ALPHABET_UPPER=ALPHA_UPPER,\n    ALPHABET=ALPHA_LOWER + ALPHA_UPPER,\n    ARITHMETIC=NUMBER + ARITHMETIC,\n    FLOAT=NUMBER + FLOAT,\n    CHS_3500=CHINESE_3500,\n    ALPHANUMERIC_MIX_CHS_3500_LOWER=NUMBER + ALPHA_LOWER + CHINESE_3500\n)\n\n\ndef encode_maps(source):\n    return {category: i for i, category in enumerate(source, 0)}\n\n\n@unique\nclass ModelScene(Enum):\n    """"""\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x9c\xba\xe6\x99\xaf\xe6\x9e\x9a\xe4\xb8\xbe""""""\n    Classification = \'Classification\'\n\n\n@unique\nclass ModelField(Enum):\n    """"""\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xb1\xbb\xe5\x88\xab\xe6\x9e\x9a\xe4\xb8\xbe""""""\n    Image = \'Image\'\n    Text = \'Text\'\n\n\nMODEL_SCENE_MAP = {\n    \'Classification\': ModelScene.Classification\n}\n\nMODEL_FIELD_MAP = {\n    \'Image\': ModelField.Image,\n    \'Text\': ModelField.Text\n}\n\n\nclass ModelConfig(object):\n\n    @staticmethod\n    def category_extract(param):\n        if isinstance(param, list):\n            return param\n        if isinstance(param, str):\n            if param in SIMPLE_CATEGORY_MODEL.keys():\n                return SIMPLE_CATEGORY_MODEL.get(param)\n            raise ValueError(\n                ""Category set configuration error, customized category set should be list type""\n            )\n\n    @property\n    def model_conf(self) -> dict:\n        if self.model_content:\n            return self.model_content\n        with open(self.model_conf_path, \'r\', encoding=""utf-8"") as sys_fp:\n            sys_stream = sys_fp.read()\n            return yaml.load(sys_stream, Loader=yaml.SafeLoader)\n\n    def __init__(self, model_conf_path=None, model_content=None):\n        self.model_content = model_content\n        self.model_path = model_conf_path\n        self.graph_path = os.path.dirname(self.model_path) if model_conf_path else """"\n        self.model_conf_path = model_conf_path\n        self.model_conf_demo = \'model_demo.yaml\'\n\n        """"""MODEL""""""\n        self.model_root: dict = self.model_conf[\'Model\']\n        self.model_name: str = self.model_root.get(\'ModelName\')\n        self.model_version: float = self.model_root.get(\'Version\')\n        self.model_version = self.model_version if self.model_version else 1.0\n        self.model_field_param: str = self.model_root.get(\'ModelField\')\n        self.model_field: ModelField = self.param_convert(\n            source=self.model_field_param,\n            param_map=MODEL_FIELD_MAP,\n            text=""Current model field ({model_field}) is not supported"".format(model_field=self.model_field_param),\n            code=50002\n        )\n\n        self.model_scene_param: str = self.model_root.get(\'ModelScene\')\n\n        self.model_scene: ModelScene = self.param_convert(\n            source=self.model_scene_param,\n            param_map=MODEL_SCENE_MAP,\n            text=""Current model scene ({model_scene}) is not supported"".format(model_scene=self.model_scene_param),\n            code=50001\n        )\n\n        """"""SYSTEM""""""\n        self.checkpoint_tag = \'checkpoint\'\n        self.system_root: dict = self.model_conf[\'System\']\n        self.memory_usage: float = self.system_root.get(\'MemoryUsage\')\n\n        """"""FIELD PARAM - IMAGE""""""\n        self.field_root: dict = self.model_conf[\'FieldParam\']\n        self.category_param = self.field_root.get(\'Category\')\n        self.category_value = self.category_extract(self.category_param)\n        if self.category_value is None:\n            raise Exception(\n                ""The category set type does not exist, there is no category set named {}"".format(self.category_param),\n            )\n        self.category: list = SPACE_TOKEN + self.category_value\n        self.category_num: int = len(self.category)\n        self.image_channel: int = self.field_root.get(\'ImageChannel\')\n        self.image_width: int = self.field_root.get(\'ImageWidth\')\n        self.image_height: int = self.field_root.get(\'ImageHeight\')\n        self.resize: list = self.field_root.get(\'Resize\')\n        self.output_split = self.field_root.get(\'OutputSplit\')\n        self.output_split = self.output_split if self.output_split else """"\n        self.corp_params = self.field_root.get(\'CorpParams\')\n        self.output_coord = self.field_root.get(\'OutputCoord\')\n        self.batch_model = self.field_root.get(\'BatchModel\')\n\n        """"""PRETREATMENT""""""\n        self.pretreatment_root = self.model_conf.get(\'Pretreatment\')\n        self.pre_binaryzation = self.get_var(self.pretreatment_root, \'Binaryzation\', -1)\n        self.pre_replace_transparent = self.get_var(self.pretreatment_root, \'ReplaceTransparent\', True)\n        self.pre_horizontal_stitching = self.get_var(self.pretreatment_root, \'HorizontalStitching\', False)\n        self.pre_concat_frames = self.get_var(self.pretreatment_root, \'ConcatFrames\', -1)\n        self.pre_blend_frames = self.get_var(self.pretreatment_root, \'BlendFrames\', -1)\n        self.exec_map = self.pretreatment_root.get(\'ExecuteMap\')\n\n        """"""COMPILE_MODEL""""""\n        if self.graph_path:\n            self.compile_model_path = os.path.join(self.graph_path, \'{}.pb\'.format(self.model_name))\n            if not os.path.exists(self.compile_model_path):\n                if not os.path.exists(self.graph_path):\n                    os.makedirs(self.graph_path)\n                raise ValueError(\n                    \'{} not found, please put the trained model in the current directory.\'.format(self.compile_model_path)\n                )\n            else:\n                self.model_exists = True\n        else:\n            self.model_exists = True if self.model_content else False\n            self.compile_model_path = """"\n\n    @staticmethod\n    def param_convert(source, param_map: dict, text, code, default=None):\n        if source is None:\n            return default\n        if source not in param_map.keys():\n            raise Exception(text)\n        return param_map[source]\n\n    def size_match(self, size_str):\n        return size_str == self.size_string\n\n    @staticmethod\n    def get_var(src: dict, name: str, default=None):\n        if not src:\n            return default\n        return src.get(name)\n\n    @property\n    def size_string(self):\n        return ""{}x{}"".format(self.image_width, self.image_height)\n\n\nclass Model(object):\n    model_conf: ModelConfig\n    graph_bytes: object\n\n    def __init__(self, conf_path: str, source_bytes: bytes = None, key=None):\n        if conf_path:\n            self.model_conf = ModelConfig(model_conf_path=conf_path)\n            self.graph_bytes = None\n        if source_bytes:\n            model_conf, self.graph_bytes = self.parse_model(source_bytes, key)\n            self.model_conf = ModelConfig(model_content=model_conf)\n\n    @staticmethod\n    def parse_model(source_bytes: bytes, key=None):\n        split_tag = b\'-#||#-\'\n\n        if not key:\n            key = [b""_____"" + i.encode(""utf8"") + b""_____"" for i in ""&coriander""]\n        if isinstance(key, str):\n            key = [b""_____"" + i.encode(""utf8"") + b""_____"" for i in key]\n        key_len_int = len(key)\n        model_bytes_list = []\n        graph_bytes_list = []\n        slice_index = source_bytes.index(key[0])\n        split_tag_len = len(split_tag)\n        slice_0 = source_bytes[0: slice_index].split(split_tag)\n        model_slice_len = len(slice_0[1])\n        graph_slice_len = len(slice_0[0])\n        slice_len = split_tag_len + model_slice_len + graph_slice_len\n\n        for i in range(key_len_int - 1):\n            slice_index = source_bytes.index(key[i])\n            slices = source_bytes[slice_index - slice_len: slice_index].split(split_tag)\n            model_bytes_list.append(slices[1])\n            graph_bytes_list.append(slices[0])\n        slices = source_bytes.split(key[-2])[1][:-len(key[-1])].split(split_tag)\n\n        model_bytes_list.append(slices[1])\n        graph_bytes_list.append(slices[0])\n        model_bytes = b"""".join(model_bytes_list)\n        model_conf: dict = pickle.loads(model_bytes)\n        graph_bytes: bytes = b"""".join(graph_bytes_list)\n        return model_conf, graph_bytes\n\n\nclass GraphSession(object):\n    def __init__(self, model: Model):\n        self.model = model\n        self.model_conf = model.model_conf\n        self.size_str = self.model_conf.size_string\n        self.model_name = self.model_conf.model_name\n        self.graph_name = self.model_conf.model_name\n        self.version = self.model_conf.model_version\n        self.graph = tf.Graph()\n        self.sess = tf.Session(\n            graph=self.graph,\n            config=tf.ConfigProto(\n\n                # allow_soft_placement=True,\n                # log_device_placement=True,\n                gpu_options=tf.GPUOptions(\n                    # allocator_type=\'BFC\',\n                    allow_growth=True,  # it will cause fragmentation.\n                    # per_process_gpu_memory_fraction=self.model_conf.device_usage\n                    per_process_gpu_memory_fraction=0.1\n                )\n            )\n        )\n        self.graph_def = self.graph.as_graph_def()\n        self.loaded = self.load_model()\n\n    def load_model(self):\n        # Here is for debugging, positioning error source use.\n        # with self.graph.as_default():\n        #     saver = tf.train.import_meta_graph(\'graph/***.meta\')\n        #     saver.restore(self.sess, tf.train.latest_checkpoint(\'graph\'))\n        if not self.model_conf.model_exists:\n            self.destroy()\n            return False\n        try:\n            if self.model.graph_bytes:\n                graph_def_file = self.model.graph_bytes\n            else:\n                with tf.io.gfile.GFile(\n                        self.model_conf.compile_model_path, ""rb""\n                ) as f:\n                    graph_def_file = f.read()\n            self.graph_def.ParseFromString(graph_def_file)\n            with self.graph.as_default():\n                self.sess.run(tf.global_variables_initializer())\n                _ = tf.import_graph_def(self.graph_def, name="""")\n\n            print(\'TensorFlow Session {} Loaded.\'.format(self.model_conf.model_name))\n            return True\n        except NotFoundError:\n            print(\'The system cannot find the model specified.\')\n            self.destroy()\n            return False\n\n    @property\n    def session(self):\n        return self.sess\n\n    def destroy(self):\n        self.sess.close()\n        del self.sess\n\n\nclass Interface(object):\n\n    def __init__(self, graph_session: GraphSession):\n        self.graph_sess = graph_session\n        self.model_conf = graph_session.model_conf\n        self.size_str = self.model_conf.size_string\n        self.graph_name = self.graph_sess.graph_name\n        self.version = self.graph_sess.version\n        self.model_category = self.model_conf.category\n        if self.graph_sess.loaded:\n            self.sess = self.graph_sess.session\n            self.dense_decoded = self.sess.graph.get_tensor_by_name(""dense_decoded:0"")\n            self.x = self.sess.graph.get_tensor_by_name(\'input:0\')\n            self.sess.graph.finalize()\n\n    @property\n    def name(self):\n        return self.graph_name\n\n    @property\n    def size(self):\n        return self.size_str\n\n    def destroy(self):\n        self.graph_sess.destroy()\n\n    def predict_batch(self, image_batch, output_split=None):\n        predict_text = self.predict_func(\n            image_batch,\n            self.sess,\n            self.dense_decoded,\n            self.x,\n            self.model_conf,\n            output_split\n        )\n        return predict_text\n\n    @staticmethod\n    def decode_maps(categories):\n        return {index: category for index, category in enumerate(categories, 0)}\n\n    def predict_func(self, image_batch, _sess, dense_decoded, op_input, model: ModelConfig, output_split=None):\n\n        if output_split is None:\n            output_split = model.output_split\n\n        dense_decoded_code = _sess.run(dense_decoded, feed_dict={\n            op_input: image_batch,\n        })\n        decoded_expression = []\n        for item in dense_decoded_code:\n            expression = \'\'\n\n            for i in item:\n                if i == -1 or i == model.category_num:\n                    expression += \'\'\n                else:\n                    expression += self.decode_maps(model.category)[i]\n            decoded_expression.append(expression)\n        return output_split.join(decoded_expression) if len(decoded_expression) > 1 else decoded_expression[0]\n\n\nclass Pretreatment(object):\n\n    def __init__(self, origin):\n        self.origin = origin\n\n    def get(self):\n        return self.origin\n\n    def binarization(self, value, modify=False):\n        ret, _binarization = cv2.threshold(self.origin, value, 255, cv2.THRESH_BINARY)\n        if modify:\n            self.origin = _binarization\n        return _binarization\n\n    @staticmethod\n    def preprocessing(image, binaryzation=-1):\n        pretreatment = Pretreatment(image)\n        if binaryzation > 0:\n            pretreatment.binarization(binaryzation, True)\n        return pretreatment.get()\n\n    @staticmethod\n    def preprocessing_by_func(exec_map, key, src_arr):\n        if not exec_map:\n            return src_arr\n        target_arr = cv2.cvtColor(src_arr, cv2.COLOR_RGB2BGR)\n        for sentence in exec_map.get(key):\n            if sentence.startswith(""@@""):\n                target_arr = eval(sentence[2:])\n            elif sentence.startswith(""$$""):\n                exec(sentence[2:])\n        return cv2.cvtColor(target_arr, cv2.COLOR_BGR2RGB)\n\n\nclass ImageUtils(object):\n\n    @staticmethod\n    def get_bytes_batch(image_bytes):\n        try:\n            bytes_batch = [image_bytes]\n        except binascii.Error:\n            return None, ""INVALID_BASE64_STRING""\n        what_img = [ImageUtils.test_image(i) for i in bytes_batch]\n        if None in what_img:\n            return None, ""INVALID_IMAGE_FORMAT""\n        return bytes_batch, ""SUCCESS""\n\n    @staticmethod\n    def get_image_batch(model: ModelConfig, bytes_batch, param_key=None):\n        # Note that there are two return objects here.\n        # 1.image_batch, 2.response\n\n        def load_image(image_bytes):\n            data_stream = io.BytesIO(image_bytes)\n            pil_image = PIL_Image.open(data_stream)\n            rgb = pil_image.split()\n            size = pil_image.size\n\n            gif_handle = model.pre_concat_frames != -1 or model.pre_blend_frames != -1\n\n            if len(rgb) > 3 and model.pre_replace_transparent and gif_handle:\n                background = PIL_Image.new(\'RGB\', pil_image.size, (255, 255, 255))\n                background.paste(pil_image, (0, 0, size[0], size[1]), pil_image)\n                pil_image = background\n\n            im = np.asarray(pil_image)\n\n            if model.image_channel == 1 and len(im.shape) == 3:\n                im = cv2.cvtColor(im, cv2.COLOR_RGB2GRAY)\n\n            im = Pretreatment.preprocessing_by_func(\n                exec_map=model.exec_map,\n                key=param_key,\n                src_arr=im\n            )\n\n            im = Pretreatment.preprocessing(\n                image=im,\n                binaryzation=model.pre_binaryzation,\n            )\n\n            if model.pre_horizontal_stitching:\n                up_slice = im[0: int(size[1] / 2), 0: size[0]]\n                down_slice = im[int(size[1] / 2): size[1], 0: size[0]]\n                im = np.concatenate((up_slice, down_slice), axis=1)\n\n            image = im.astype(np.float32)\n            if model.resize[0] == -1:\n                ratio = model.resize[1] / size[1]\n                resize_width = int(ratio * size[0])\n                image = cv2.resize(image, (resize_width, model.resize[1]))\n            else:\n                image = cv2.resize(image, (model.resize[0], model.resize[1]))\n            image = image.swapaxes(0, 1)\n            return (image[:, :, np.newaxis] if model.image_channel == 1 else image[:, :]) / 255.\n\n        try:\n            image_batch = [load_image(i) for i in bytes_batch]\n            return image_batch, ""SUCCESS""\n        except OSError:\n            return None, ""IMAGE_DAMAGE""\n        except ValueError as _e:\n            print(_e)\n            return None, ""IMAGE_SIZE_NOT_MATCH_GRAPH""\n\n    @staticmethod\n    def size_of_image(image_bytes: bytes):\n        _null_size = tuple((-1, -1))\n        try:\n            data_stream = io.BytesIO(image_bytes)\n            size = PIL_Image.open(data_stream).size\n            return size\n        except OSError:\n            return _null_size\n        except ValueError:\n            return _null_size\n\n    @staticmethod\n    def test_image(h):\n        """"""JPEG""""""\n        if h[:3] == b""\\xff\\xd8\\xff"":\n            return \'jpeg\'\n        """"""PNG""""""\n        if h[:8] == b""\\211PNG\\r\\n\\032\\n"":\n            return \'png\'\n        """"""GIF (\'87 and \'89 variants)""""""\n        if h[:6] in (b\'GIF87a\', b\'GIF89a\'):\n            return \'gif\'\n        """"""TIFF (can be in Motorola or Intel byte order)""""""\n        if h[:2] in (b\'MM\', b\'II\'):\n            return \'tiff\'\n        if h[:2] == b\'BM\':\n            return \'bmp\'\n        """"""SGI image library""""""\n        if h[:2] == b\'\\001\\332\':\n            return \'rgb\'\n        """"""PBM (portable bitmap)""""""\n        if len(h) >= 3 and \\\n                h[0] == b\'P\' and h[1] in b\'14\' and h[2] in b\' \\t\\n\\r\':\n            return \'pbm\'\n        """"""PGM (portable graymap)""""""\n        if len(h) >= 3 and \\\n                h[0] == b\'P\' and h[1] in b\'25\' and h[2] in b\' \\t\\n\\r\':\n            return \'pgm\'\n        """"""PPM (portable pixmap)""""""\n        if len(h) >= 3 and h[0] == b\'P\' and h[1] in b\'36\' and h[2] in b\' \\t\\n\\r\':\n            return \'ppm\'\n        """"""Sun raster file""""""\n        if h[:4] == b\'\\x59\\xA6\\x6A\\x95\':\n            return \'rast\'\n        """"""X bitmap (X10 or X11)""""""\n        s = b\'#define \'\n        if h[:len(s)] == s:\n            return \'xbm\'\n        return None\n\n\nclass SDK(object):\n\n    def __init__(self, conf_path=None, model_entity=None):\n        if not conf_path and not model_entity:\n            raise ValueError(\'One of parameters conf_path and model_entity must be filled\')\n        self.model = Model(conf_path=conf_path, source_bytes=model_entity)\n        self.model_conf = self.model.model_conf\n        self.graph_session = GraphSession(self.model)\n        self.interface = Interface(self.graph_session)\n\n    def predict(self, image_bytes, param_key=None):\n        bytes_batch, message = ImageUtils.get_bytes_batch(image_bytes)\n        if not bytes_batch:\n            raise ValueError(message)\n        image_batch, message = ImageUtils.get_image_batch(self.model_conf, bytes_batch, param_key=param_key)\n        if not image_batch:\n            raise ValueError(message)\n        result = self.interface.predict_batch(image_batch, None)\n        return result\n\n\nif __name__ == \'__main__\':\n    # FROM PATH\n    # sdk = SDK(r""model.yaml"")\n    # with open(r""H:\\TrainSet\\1541187040676.jpg"", ""rb"") as f:\n    #     b = f.read()\n    # for i in [b] * 1000:\n    #     t1 = time.time()\n    #     print(sdk.predict(b), (time.time() - t1)*1000)\n\n    # FROM BYTES\n    with open(r""model.pl"", ""rb"") as f:\n        b = f.read()\n    sdk = SDK(model_entity=b)\n    with open(r""1540868881850.jpg"", ""rb"") as f:\n        b = f.read()\n    for i in [b] * 1000:\n        t1 = time.time()\n        print(sdk.predict(b), (time.time() - t1) * 1000)\n'"
sdk/tflite/__init__.py,0,b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>'
sdk/tflite/sdk.py,4,"b'#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n# Author: kerlomz <kerlomz@gmail.com>\nimport io\nimport os\nimport cv2\nimport time\nimport pickle\nimport yaml\nimport binascii\nimport numpy as np\nimport PIL.Image as PIL_Image\nfrom enum import Enum, unique\nimport tensorflow as tf\nfrom tensorflow.python.framework.errors_impl import NotFoundError\n\nSPACE_TOKEN = [\'\']\nNUMBER = [\'0\', \'1\', \'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\']\nALPHA_UPPER = [\'A\', \'B\', \'C\', \'D\', \'E\', \'F\', \'G\', \'H\', \'I\', \'J\', \'K\', \'L\', \'M\', \'N\', \'O\', \'P\', \'Q\', \'R\', \'S\', \'T\', \'U\',\n               \'V\', \'W\', \'X\', \'Y\', \'Z\']\nALPHA_LOWER = [\'a\', \'b\', \'c\', \'d\', \'e\', \'f\', \'g\', \'h\', \'i\', \'j\', \'k\', \'l\', \'m\', \'n\', \'o\', \'p\', \'q\', \'r\', \'s\', \'t\', \'u\',\n               \'v\', \'w\', \'x\', \'y\', \'z\']\nARITHMETIC = [\'(\', \')\', \'+\', \'-\', \'\xc3\x97\', \'\xc3\xb7\', \'=\']\nCHINESE_3500 = [\n    \'\xe4\xb8\x80\', \'\xe4\xb9\x99\', \'\xe4\xba\x8c\', \'\xe5\x8d\x81\', \'\xe4\xb8\x81\', \'\xe5\x8e\x82\', \'\xe4\xb8\x83\', \'\xe5\x8d\x9c\', \'\xe4\xba\xba\', \'\xe5\x85\xa5\', \'\xe5\x85\xab\', \'\xe4\xb9\x9d\', \'\xe5\x87\xa0\', \'\xe5\x84\xbf\', \'\xe4\xba\x86\', \'\xe5\x8a\x9b\', \'\xe4\xb9\x83\', \'\xe5\x88\x80\', \'\xe5\x8f\x88\', \'\xe4\xb8\x89\',\n    \'\xe4\xba\x8e\', \'\xe5\xb9\xb2\', \'\xe4\xba\x8f\', \'\xe5\xa3\xab\', \'\xe5\xb7\xa5\', \'\xe5\x9c\x9f\', \'\xe6\x89\x8d\', \'\xe5\xaf\xb8\', \'\xe4\xb8\x8b\', \'\xe5\xa4\xa7\', \'\xe4\xb8\x88\', \'\xe4\xb8\x8e\', \'\xe4\xb8\x87\', \'\xe4\xb8\x8a\', \'\xe5\xb0\x8f\', \'\xe5\x8f\xa3\', \'\xe5\xb7\xbe\', \'\xe5\xb1\xb1\', \'\xe5\x8d\x83\', \'\xe4\xb9\x9e\',\n    \'\xe5\xb7\x9d\', \'\xe4\xba\xbf\', \'\xe4\xb8\xaa\', \'\xe5\x8b\xba\', \'\xe4\xb9\x85\', \'\xe5\x87\xa1\', \'\xe5\x8f\x8a\', \'\xe5\xa4\x95\', \'\xe4\xb8\xb8\', \'\xe4\xb9\x88\', \'\xe5\xb9\xbf\', \'\xe4\xba\xa1\', \'\xe9\x97\xa8\', \'\xe4\xb9\x89\', \'\xe4\xb9\x8b\', \'\xe5\xb0\xb8\', \'\xe5\xbc\x93\', \'\xe5\xb7\xb1\', \'\xe5\xb7\xb2\', \'\xe5\xad\x90\',\n    \'\xe5\x8d\xab\', \'\xe4\xb9\x9f\', \'\xe5\xa5\xb3\', \'\xe9\xa3\x9e\', \'\xe5\x88\x83\', \'\xe4\xb9\xa0\', \'\xe5\x8f\x89\', \'\xe9\xa9\xac\', \'\xe4\xb9\xa1\', \'\xe4\xb8\xb0\', \'\xe7\x8e\x8b\', \'\xe4\xba\x95\', \'\xe5\xbc\x80\', \'\xe5\xa4\xab\', \'\xe5\xa4\xa9\', \'\xe6\x97\xa0\', \'\xe5\x85\x83\', \'\xe4\xb8\x93\', \'\xe4\xba\x91\', \'\xe6\x89\x8e\',\n    \'\xe8\x89\xba\', \'\xe6\x9c\xa8\', \'\xe4\xba\x94\', \'\xe6\x94\xaf\', \'\xe5\x8e\x85\', \'\xe4\xb8\x8d\', \'\xe5\xa4\xaa\', \'\xe7\x8a\xac\', \'\xe5\x8c\xba\', \'\xe5\x8e\x86\', \'\xe5\xb0\xa4\', \'\xe5\x8f\x8b\', \'\xe5\x8c\xb9\', \'\xe8\xbd\xa6\', \'\xe5\xb7\xa8\', \'\xe7\x89\x99\', \'\xe5\xb1\xaf\', \'\xe6\xaf\x94\', \'\xe4\xba\x92\', \'\xe5\x88\x87\',\n    \'\xe7\x93\xa6\', \'\xe6\xad\xa2\', \'\xe5\xb0\x91\', \'\xe6\x97\xa5\', \'\xe4\xb8\xad\', \'\xe5\x86\x88\', \'\xe8\xb4\x9d\', \'\xe5\x86\x85\', \'\xe6\xb0\xb4\', \'\xe8\xa7\x81\', \'\xe5\x8d\x88\', \'\xe7\x89\x9b\', \'\xe6\x89\x8b\', \'\xe6\xaf\x9b\', \'\xe6\xb0\x94\', \'\xe5\x8d\x87\', \'\xe9\x95\xbf\', \'\xe4\xbb\x81\', \'\xe4\xbb\x80\', \'\xe7\x89\x87\',\n    \'\xe4\xbb\x86\', \'\xe5\x8c\x96\', \'\xe4\xbb\x87\', \'\xe5\xb8\x81\', \'\xe4\xbb\x8d\', \'\xe4\xbb\x85\', \'\xe6\x96\xa4\', \'\xe7\x88\xaa\', \'\xe5\x8f\x8d\', \'\xe4\xbb\x8b\', \'\xe7\x88\xb6\', \'\xe4\xbb\x8e\', \'\xe4\xbb\x8a\', \'\xe5\x87\xb6\', \'\xe5\x88\x86\', \'\xe4\xb9\x8f\', \'\xe5\x85\xac\', \'\xe4\xbb\x93\', \'\xe6\x9c\x88\', \'\xe6\xb0\x8f\',\n    \'\xe5\x8b\xbf\', \'\xe6\xac\xa0\', \'\xe9\xa3\x8e\', \'\xe4\xb8\xb9\', \'\xe5\x8c\x80\', \'\xe4\xb9\x8c\', \'\xe5\x87\xa4\', \'\xe5\x8b\xbe\', \'\xe6\x96\x87\', \'\xe5\x85\xad\', \'\xe6\x96\xb9\', \'\xe7\x81\xab\', \'\xe4\xb8\xba\', \'\xe6\x96\x97\', \'\xe5\xbf\x86\', \'\xe8\xae\xa2\', \'\xe8\xae\xa1\', \'\xe6\x88\xb7\', \'\xe8\xae\xa4\', \'\xe5\xbf\x83\',\n    \'\xe5\xb0\xba\', \'\xe5\xbc\x95\', \'\xe4\xb8\x91\', \'\xe5\xb7\xb4\', \'\xe5\xad\x94\', \'\xe9\x98\x9f\', \'\xe5\x8a\x9e\', \'\xe4\xbb\xa5\', \'\xe5\x85\x81\', \'\xe4\xba\x88\', \'\xe5\x8a\x9d\', \'\xe5\x8f\x8c\', \'\xe4\xb9\xa6\', \'\xe5\xb9\xbb\', \'\xe7\x8e\x89\', \'\xe5\x88\x8a\', \'\xe7\xa4\xba\', \'\xe6\x9c\xab\', \'\xe6\x9c\xaa\', \'\xe5\x87\xbb\',\n    \'\xe6\x89\x93\', \'\xe5\xb7\xa7\', \'\xe6\xad\xa3\', \'\xe6\x89\x91\', \'\xe6\x89\x92\', \'\xe5\x8a\x9f\', \'\xe6\x89\x94\', \'\xe5\x8e\xbb\', \'\xe7\x94\x98\', \'\xe4\xb8\x96\', \'\xe5\x8f\xa4\', \'\xe8\x8a\x82\', \'\xe6\x9c\xac\', \'\xe6\x9c\xaf\', \'\xe5\x8f\xaf\', \'\xe4\xb8\x99\', \'\xe5\xb7\xa6\', \'\xe5\x8e\x89\', \'\xe5\x8f\xb3\', \'\xe7\x9f\xb3\',\n    \'\xe5\xb8\x83\', \'\xe9\xbe\x99\', \'\xe5\xb9\xb3\', \'\xe7\x81\xad\', \'\xe8\xbd\xa7\', \'\xe4\xb8\x9c\', \'\xe5\x8d\xa1\', \'\xe5\x8c\x97\', \'\xe5\x8d\xa0\', \'\xe4\xb8\x9a\', \'\xe6\x97\xa7\', \'\xe5\xb8\x85\', \'\xe5\xbd\x92\', \'\xe4\xb8\x94\', \'\xe6\x97\xa6\', \'\xe7\x9b\xae\', \'\xe5\x8f\xb6\', \'\xe7\x94\xb2\', \'\xe7\x94\xb3\', \'\xe5\x8f\xae\',\n    \'\xe7\x94\xb5\', \'\xe5\x8f\xb7\', \'\xe7\x94\xb0\', \'\xe7\x94\xb1\', \'\xe5\x8f\xb2\', \'\xe5\x8f\xaa\', \'\xe5\xa4\xae\', \'\xe5\x85\x84\', \'\xe5\x8f\xbc\', \'\xe5\x8f\xab\', \'\xe5\x8f\xa6\', \'\xe5\x8f\xa8\', \'\xe5\x8f\xb9\', \'\xe5\x9b\x9b\', \'\xe7\x94\x9f\', \'\xe5\xa4\xb1\', \'\xe7\xa6\xbe\', \'\xe4\xb8\x98\', \'\xe4\xbb\x98\', \'\xe4\xbb\x97\',\n    \'\xe4\xbb\xa3\', \'\xe4\xbb\x99\', \'\xe4\xbb\xac\', \'\xe4\xbb\xaa\', \'\xe7\x99\xbd\', \'\xe4\xbb\x94\', \'\xe4\xbb\x96\', \'\xe6\x96\xa5\', \'\xe7\x93\x9c\', \'\xe4\xb9\x8e\', \'\xe4\xb8\x9b\', \'\xe4\xbb\xa4\', \'\xe7\x94\xa8\', \'\xe7\x94\xa9\', \'\xe5\x8d\xb0\', \'\xe4\xb9\x90\', \'\xe5\x8f\xa5\', \'\xe5\x8c\x86\', \'\xe5\x86\x8c\', \'\xe7\x8a\xaf\',\n    \'\xe5\xa4\x96\', \'\xe5\xa4\x84\', \'\xe5\x86\xac\', \'\xe9\xb8\x9f\', \'\xe5\x8a\xa1\', \'\xe5\x8c\x85\', \'\xe9\xa5\xa5\', \'\xe4\xb8\xbb\', \'\xe5\xb8\x82\', \'\xe7\xab\x8b\', \'\xe9\x97\xaa\', \'\xe5\x85\xb0\', \'\xe5\x8d\x8a\', \'\xe6\xb1\x81\', \'\xe6\xb1\x87\', \'\xe5\xa4\xb4\', \'\xe6\xb1\x89\', \'\xe5\xae\x81\', \'\xe7\xa9\xb4\', \'\xe5\xae\x83\',\n    \'\xe8\xae\xa8\', \'\xe5\x86\x99\', \'\xe8\xae\xa9\', \'\xe7\xa4\xbc\', \'\xe8\xae\xad\', \'\xe5\xbf\x85\', \'\xe8\xae\xae\', \'\xe8\xae\xaf\', \'\xe8\xae\xb0\', \'\xe6\xb0\xb8\', \'\xe5\x8f\xb8\', \'\xe5\xb0\xbc\', \'\xe6\xb0\x91\', \'\xe5\x87\xba\', \'\xe8\xbe\xbd\', \'\xe5\xa5\xb6\', \'\xe5\xa5\xb4\', \'\xe5\x8a\xa0\', \'\xe5\x8f\xac\', \'\xe7\x9a\xae\',\n    \'\xe8\xbe\xb9\', \'\xe5\x8f\x91\', \'\xe5\xad\x95\', \'\xe5\x9c\xa3\', \'\xe5\xaf\xb9\', \'\xe5\x8f\xb0\', \'\xe7\x9f\x9b\', \'\xe7\xba\xa0\', \'\xe6\xaf\x8d\', \'\xe5\xb9\xbc\', \'\xe4\xb8\x9d\', \'\xe5\xbc\x8f\', \'\xe5\x88\x91\', \'\xe5\x8a\xa8\', \'\xe6\x89\x9b\', \'\xe5\xaf\xba\', \'\xe5\x90\x89\', \'\xe6\x89\xa3\', \'\xe8\x80\x83\', \'\xe6\x89\x98\',\n    \'\xe8\x80\x81\', \'\xe6\x89\xa7\', \'\xe5\xb7\xa9\', \'\xe5\x9c\xbe\', \'\xe6\x89\xa9\', \'\xe6\x89\xab\', \'\xe5\x9c\xb0\', \'\xe6\x89\xac\', \'\xe5\x9c\xba\', \'\xe8\x80\xb3\', \'\xe5\x85\xb1\', \'\xe8\x8a\x92\', \'\xe4\xba\x9a\', \'\xe8\x8a\x9d\', \'\xe6\x9c\xbd\', \'\xe6\x9c\xb4\', \'\xe6\x9c\xba\', \'\xe6\x9d\x83\', \'\xe8\xbf\x87\', \'\xe8\x87\xa3\',\n    \'\xe5\x86\x8d\', \'\xe5\x8d\x8f\', \'\xe8\xa5\xbf\', \'\xe5\x8e\x8b\', \'\xe5\x8e\x8c\', \'\xe5\x9c\xa8\', \'\xe6\x9c\x89\', \'\xe7\x99\xbe\', \'\xe5\xad\x98\', \'\xe8\x80\x8c\', \'\xe9\xa1\xb5\', \'\xe5\x8c\xa0\', \'\xe5\xa4\xb8\', \'\xe5\xa4\xba\', \'\xe7\x81\xb0\', \'\xe8\xbe\xbe\', \'\xe5\x88\x97\', \'\xe6\xad\xbb\', \'\xe6\x88\x90\', \'\xe5\xa4\xb9\',\n    \'\xe8\xbd\xa8\', \'\xe9\x82\xaa\', \'\xe5\x88\x92\', \'\xe8\xbf\x88\', \'\xe6\xaf\x95\', \'\xe8\x87\xb3\', \'\xe6\xad\xa4\', \'\xe8\xb4\x9e\', \'\xe5\xb8\x88\', \'\xe5\xb0\x98\', \'\xe5\xb0\x96\', \'\xe5\x8a\xa3\', \'\xe5\x85\x89\', \'\xe5\xbd\x93\', \'\xe6\x97\xa9\', \'\xe5\x90\x90\', \'\xe5\x90\x93\', \'\xe8\x99\xab\', \'\xe6\x9b\xb2\', \'\xe5\x9b\xa2\',\n    \'\xe5\x90\x8c\', \'\xe5\x90\x8a\', \'\xe5\x90\x83\', \'\xe5\x9b\xa0\', \'\xe5\x90\xb8\', \'\xe5\x90\x97\', \'\xe5\xb1\xbf\', \'\xe5\xb8\x86\', \'\xe5\xb2\x81\', \'\xe5\x9b\x9e\', \'\xe5\xb2\x82\', \'\xe5\x88\x9a\', \'\xe5\x88\x99\', \'\xe8\x82\x89\', \'\xe7\xbd\x91\', \'\xe5\xb9\xb4\', \'\xe6\x9c\xb1\', \'\xe5\x85\x88\', \'\xe4\xb8\xa2\', \'\xe8\x88\x8c\',\n    \'\xe7\xab\xb9\', \'\xe8\xbf\x81\', \'\xe4\xb9\x94\', \'\xe4\xbc\x9f\', \'\xe4\xbc\xa0\', \'\xe4\xb9\x92\', \'\xe4\xb9\x93\', \'\xe4\xbc\x91\', \'\xe4\xbc\x8d\', \'\xe4\xbc\x8f\', \'\xe4\xbc\x98\', \'\xe4\xbc\x90\', \'\xe5\xbb\xb6\', \'\xe4\xbb\xb6\', \'\xe4\xbb\xbb\', \'\xe4\xbc\xa4\', \'\xe4\xbb\xb7\', \'\xe4\xbb\xbd\', \'\xe5\x8d\x8e\', \'\xe4\xbb\xb0\',\n    \'\xe4\xbb\xbf\', \'\xe4\xbc\x99\', \'\xe4\xbc\xaa\', \'\xe8\x87\xaa\', \'\xe8\xa1\x80\', \'\xe5\x90\x91\', \'\xe4\xbc\xbc\', \'\xe5\x90\x8e\', \'\xe8\xa1\x8c\', \'\xe8\x88\x9f\', \'\xe5\x85\xa8\', \'\xe4\xbc\x9a\', \'\xe6\x9d\x80\', \'\xe5\x90\x88\', \'\xe5\x85\x86\', \'\xe4\xbc\x81\', \'\xe4\xbc\x97\', \'\xe7\x88\xb7\', \'\xe4\xbc\x9e\', \'\xe5\x88\x9b\',\n    \'\xe8\x82\x8c\', \'\xe6\x9c\xb5\', \'\xe6\x9d\x82\', \'\xe5\x8d\xb1\', \'\xe6\x97\xac\', \'\xe6\x97\xa8\', \'\xe8\xb4\x9f\', \'\xe5\x90\x84\', \'\xe5\x90\x8d\', \'\xe5\xa4\x9a\', \'\xe4\xba\x89\', \'\xe8\x89\xb2\', \'\xe5\xa3\xae\', \'\xe5\x86\xb2\', \'\xe5\x86\xb0\', \'\xe5\xba\x84\', \'\xe5\xba\x86\', \'\xe4\xba\xa6\', \'\xe5\x88\x98\', \'\xe9\xbd\x90\',\n    \'\xe4\xba\xa4\', \'\xe6\xac\xa1\', \'\xe8\xa1\xa3\', \'\xe4\xba\xa7\', \'\xe5\x86\xb3\', \'\xe5\x85\x85\', \'\xe5\xa6\x84\', \'\xe9\x97\xad\', \'\xe9\x97\xae\', \'\xe9\x97\xaf\', \'\xe7\xbe\x8a\', \'\xe5\xb9\xb6\', \'\xe5\x85\xb3\', \'\xe7\xb1\xb3\', \'\xe7\x81\xaf\', \'\xe5\xb7\x9e\', \'\xe6\xb1\x97\', \'\xe6\xb1\xa1\', \'\xe6\xb1\x9f\', \'\xe6\xb1\xa0\',\n    \'\xe6\xb1\xa4\', \'\xe5\xbf\x99\', \'\xe5\x85\xb4\', \'\xe5\xae\x87\', \'\xe5\xae\x88\', \'\xe5\xae\x85\', \'\xe5\xad\x97\', \'\xe5\xae\x89\', \'\xe8\xae\xb2\', \'\xe5\x86\x9b\', \'\xe8\xae\xb8\', \'\xe8\xae\xba\', \'\xe5\x86\x9c\', \'\xe8\xae\xbd\', \'\xe8\xae\xbe\', \'\xe8\xae\xbf\', \'\xe5\xaf\xbb\', \'\xe9\x82\xa3\', \'\xe8\xbf\x85\', \'\xe5\xb0\xbd\',\n    \'\xe5\xaf\xbc\', \'\xe5\xbc\x82\', \'\xe5\xad\x99\', \'\xe9\x98\xb5\', \'\xe9\x98\xb3\', \'\xe6\x94\xb6\', \'\xe9\x98\xb6\', \'\xe9\x98\xb4\', \'\xe9\x98\xb2\', \'\xe5\xa5\xb8\', \'\xe5\xa6\x82\', \'\xe5\xa6\x87\', \'\xe5\xa5\xbd\', \'\xe5\xa5\xb9\', \'\xe5\xa6\x88\', \'\xe6\x88\x8f\', \'\xe7\xbe\xbd\', \'\xe8\xa7\x82\', \'\xe6\xac\xa2\', \'\xe4\xb9\xb0\',\n    \'\xe7\xba\xa2\', \'\xe7\xba\xa4\', \'\xe7\xba\xa7\', \'\xe7\xba\xa6\', \'\xe7\xba\xaa\', \'\xe9\xa9\xb0\', \'\xe5\xb7\xa1\', \'\xe5\xaf\xbf\', \'\xe5\xbc\x84\', \'\xe9\xba\xa6\', \'\xe5\xbd\xa2\', \'\xe8\xbf\x9b\', \'\xe6\x88\x92\', \'\xe5\x90\x9e\', \'\xe8\xbf\x9c\', \'\xe8\xbf\x9d\', \'\xe8\xbf\x90\', \'\xe6\x89\xb6\', \'\xe6\x8a\x9a\', \'\xe5\x9d\x9b\',\n    \'\xe6\x8a\x80\', \'\xe5\x9d\x8f\', \'\xe6\x89\xb0\', \'\xe6\x8b\x92\', \'\xe6\x89\xbe\', \'\xe6\x89\xb9\', \'\xe6\x89\xaf\', \'\xe5\x9d\x80\', \'\xe8\xb5\xb0\', \'\xe6\x8a\x84\', \'\xe5\x9d\x9d\', \'\xe8\xb4\xa1\', \'\xe6\x94\xbb\', \'\xe8\xb5\xa4\', \'\xe6\x8a\x98\', \'\xe6\x8a\x93\', \'\xe6\x89\xae\', \'\xe6\x8a\xa2\', \'\xe5\xad\x9d\', \'\xe5\x9d\x87\',\n    \'\xe6\x8a\x9b\', \'\xe6\x8a\x95\', \'\xe5\x9d\x9f\', \'\xe6\x8a\x97\', \'\xe5\x9d\x91\', \'\xe5\x9d\x8a\', \'\xe6\x8a\x96\', \'\xe6\x8a\xa4\', \'\xe5\xa3\xb3\', \'\xe5\xbf\x97\', \'\xe6\x89\xad\', \'\xe5\x9d\x97\', \'\xe5\xa3\xb0\', \'\xe6\x8a\x8a\', \'\xe6\x8a\xa5\', \'\xe5\x8d\xb4\', \'\xe5\x8a\xab\', \'\xe8\x8a\xbd\', \'\xe8\x8a\xb1\', \'\xe8\x8a\xb9\',\n    \'\xe8\x8a\xac\', \'\xe8\x8b\x8d\', \'\xe8\x8a\xb3\', \'\xe4\xb8\xa5\', \'\xe8\x8a\xa6\', \'\xe5\x8a\xb3\', \'\xe5\x85\x8b\', \'\xe8\x8b\x8f\', \'\xe6\x9d\x86\', \'\xe6\x9d\xa0\', \'\xe6\x9d\x9c\', \'\xe6\x9d\x90\', \'\xe6\x9d\x91\', \'\xe6\x9d\x8f\', \'\xe6\x9e\x81\', \'\xe6\x9d\x8e\', \'\xe6\x9d\xa8\', \'\xe6\xb1\x82\', \'\xe6\x9b\xb4\', \'\xe6\x9d\x9f\',\n    \'\xe8\xb1\x86\', \'\xe4\xb8\xa4\', \'\xe4\xb8\xbd\', \'\xe5\x8c\xbb\', \'\xe8\xbe\xb0\', \'\xe5\x8a\xb1\', \'\xe5\x90\xa6\', \'\xe8\xbf\x98\', \'\xe6\xad\xbc\', \'\xe6\x9d\xa5\', \'\xe8\xbf\x9e\', \'\xe6\xad\xa5\', \'\xe5\x9d\x9a\', \'\xe6\x97\xb1\', \'\xe7\x9b\xaf\', \'\xe5\x91\x88\', \'\xe6\x97\xb6\', \'\xe5\x90\xb4\', \'\xe5\x8a\xa9\', \'\xe5\x8e\xbf\',\n    \'\xe9\x87\x8c\', \'\xe5\x91\x86\', \'\xe5\x9b\xad\', \'\xe6\x97\xb7\', \'\xe5\x9b\xb4\', \'\xe5\x91\x80\', \'\xe5\x90\xa8\', \'\xe8\xb6\xb3\', \'\xe9\x82\xae\', \'\xe7\x94\xb7\', \'\xe5\x9b\xb0\', \'\xe5\x90\xb5\', \'\xe4\xb8\xb2\', \'\xe5\x91\x98\', \'\xe5\x90\xac\', \'\xe5\x90\xa9\', \'\xe5\x90\xb9\', \'\xe5\x91\x9c\', \'\xe5\x90\xa7\', \'\xe5\x90\xbc\',\n    \'\xe5\x88\xab\', \'\xe5\xb2\x97\', \'\xe5\xb8\x90\', \'\xe8\xb4\xa2\', \'\xe9\x92\x88\', \'\xe9\x92\x89\', \'\xe5\x91\x8a\', \'\xe6\x88\x91\', \'\xe4\xb9\xb1\', \'\xe5\x88\xa9\', \'\xe7\xa7\x83\', \'\xe7\xa7\x80\', \'\xe7\xa7\x81\', \'\xe6\xaf\x8f\', \'\xe5\x85\xb5\', \'\xe4\xbc\xb0\', \'\xe4\xbd\x93\', \'\xe4\xbd\x95\', \'\xe4\xbd\x86\', \'\xe4\xbc\xb8\',\n    \'\xe4\xbd\x9c\', \'\xe4\xbc\xaf\', \'\xe4\xbc\xb6\', \'\xe4\xbd\xa3\', \'\xe4\xbd\x8e\', \'\xe4\xbd\xa0\', \'\xe4\xbd\x8f\', \'\xe4\xbd\x8d\', \'\xe4\xbc\xb4\', \'\xe8\xba\xab\', \'\xe7\x9a\x82\', \'\xe4\xbd\x9b\', \'\xe8\xbf\x91\', \'\xe5\xbd\xbb\', \'\xe5\xbd\xb9\', \'\xe8\xbf\x94\', \'\xe4\xbd\x99\', \'\xe5\xb8\x8c\', \'\xe5\x9d\x90\', \'\xe8\xb0\xb7\',\n    \'\xe5\xa6\xa5\', \'\xe5\x90\xab\', \'\xe9\x82\xbb\', \'\xe5\xb2\x94\', \'\xe8\x82\x9d\', \'\xe8\x82\x9a\', \'\xe8\x82\xa0\', \'\xe9\xbe\x9f\', \'\xe5\x85\x8d\', \'\xe7\x8b\x82\', \'\xe7\x8a\xb9\', \'\xe8\xa7\x92\', \'\xe5\x88\xa0\', \'\xe6\x9d\xa1\', \'\xe5\x8d\xb5\', \'\xe5\xb2\x9b\', \'\xe8\xbf\x8e\', \'\xe9\xa5\xad\', \'\xe9\xa5\xae\', \'\xe7\xb3\xbb\',\n    \'\xe8\xa8\x80\', \'\xe5\x86\xbb\', \'\xe7\x8a\xb6\', \'\xe4\xba\xa9\', \'\xe5\x86\xb5\', \'\xe5\xba\x8a\', \'\xe5\xba\x93\', \'\xe7\x96\x97\', \'\xe5\xba\x94\', \'\xe5\x86\xb7\', \'\xe8\xbf\x99\', \'\xe5\xba\x8f\', \'\xe8\xbe\x9b\', \'\xe5\xbc\x83\', \'\xe5\x86\xb6\', \'\xe5\xbf\x98\', \'\xe9\x97\xb2\', \'\xe9\x97\xb4\', \'\xe9\x97\xb7\', \'\xe5\x88\xa4\',\n    \'\xe7\x81\xb6\', \'\xe7\x81\xbf\', \'\xe5\xbc\x9f\', \'\xe6\xb1\xaa\', \'\xe6\xb2\x99\', \'\xe6\xb1\xbd\', \'\xe6\xb2\x83\', \'\xe6\xb3\x9b\', \'\xe6\xb2\x9f\', \'\xe6\xb2\xa1\', \'\xe6\xb2\x88\', \'\xe6\xb2\x89\', \'\xe6\x80\x80\', \'\xe5\xbf\xa7\', \'\xe5\xbf\xab\', \'\xe5\xae\x8c\', \'\xe5\xae\x8b\', \'\xe5\xae\x8f\', \'\xe7\x89\xa2\', \'\xe7\xa9\xb6\',\n    \'\xe7\xa9\xb7\', \'\xe7\x81\xbe\', \'\xe8\x89\xaf\', \'\xe8\xaf\x81\', \'\xe5\x90\xaf\', \'\xe8\xaf\x84\', \'\xe8\xa1\xa5\', \'\xe5\x88\x9d\', \'\xe7\xa4\xbe\', \'\xe8\xaf\x86\', \'\xe8\xaf\x89\', \'\xe8\xaf\x8a\', \'\xe8\xaf\x8d\', \'\xe8\xaf\x91\', \'\xe5\x90\x9b\', \'\xe7\x81\xb5\', \'\xe5\x8d\xb3\', \'\xe5\xb1\x82\', \'\xe5\xb0\xbf\', \'\xe5\xb0\xbe\',\n    \'\xe8\xbf\x9f\', \'\xe5\xb1\x80\', \'\xe6\x94\xb9\', \'\xe5\xbc\xa0\', \'\xe5\xbf\x8c\', \'\xe9\x99\x85\', \'\xe9\x99\x86\', \'\xe9\x98\xbf\', \'\xe9\x99\x88\', \'\xe9\x98\xbb\', \'\xe9\x99\x84\', \'\xe5\xa6\x99\', \'\xe5\xa6\x96\', \'\xe5\xa6\xa8\', \'\xe5\x8a\xaa\', \'\xe5\xbf\x8d\', \'\xe5\x8a\xb2\', \'\xe9\xb8\xa1\', \'\xe9\xa9\xb1\', \'\xe7\xba\xaf\',\n    \'\xe7\xba\xb1\', \'\xe7\xba\xb3\', \'\xe7\xba\xb2\', \'\xe9\xa9\xb3\', \'\xe7\xba\xb5\', \'\xe7\xba\xb7\', \'\xe7\xba\xb8\', \'\xe7\xba\xb9\', \'\xe7\xba\xba\', \'\xe9\xa9\xb4\', \'\xe7\xba\xbd\', \'\xe5\xa5\x89\', \'\xe7\x8e\xa9\', \'\xe7\x8e\xaf\', \'\xe6\xad\xa6\', \'\xe9\x9d\x92\', \'\xe8\xb4\xa3\', \'\xe7\x8e\xb0\', \'\xe8\xa1\xa8\', \'\xe8\xa7\x84\',\n    \'\xe6\x8a\xb9\', \'\xe6\x8b\xa2\', \'\xe6\x8b\x94\', \'\xe6\x8b\xa3\', \'\xe6\x8b\x85\', \'\xe5\x9d\xa6\', \'\xe6\x8a\xbc\', \'\xe6\x8a\xbd\', \'\xe6\x8b\x90\', \'\xe6\x8b\x96\', \'\xe6\x8b\x8d\', \'\xe8\x80\x85\', \'\xe9\xa1\xb6\', \'\xe6\x8b\x86\', \'\xe6\x8b\xa5\', \'\xe6\x8a\xb5\', \'\xe6\x8b\x98\', \'\xe5\x8a\xbf\', \'\xe6\x8a\xb1\', \'\xe5\x9e\x83\',\n    \'\xe6\x8b\x89\', \'\xe6\x8b\xa6\', \'\xe6\x8b\x8c\', \'\xe5\xb9\xb8\', \'\xe6\x8b\x9b\', \'\xe5\x9d\xa1\', \'\xe6\x8a\xab\', \'\xe6\x8b\xa8\', \'\xe6\x8b\xa9\', \'\xe6\x8a\xac\', \'\xe5\x85\xb6\', \'\xe5\x8f\x96\', \'\xe8\x8b\xa6\', \'\xe8\x8b\xa5\', \'\xe8\x8c\x82\', \'\xe8\x8b\xb9\', \'\xe8\x8b\x97\', \'\xe8\x8b\xb1\', \'\xe8\x8c\x83\', \'\xe7\x9b\xb4\',\n    \'\xe8\x8c\x84\', \'\xe8\x8c\x8e\', \'\xe8\x8c\x85\', \'\xe6\x9e\x97\', \'\xe6\x9e\x9d\', \'\xe6\x9d\xaf\', \'\xe6\x9f\x9c\', \'\xe6\x9e\x90\', \'\xe6\x9d\xbf\', \'\xe6\x9d\xbe\', \'\xe6\x9e\xaa\', \'\xe6\x9e\x84\', \'\xe6\x9d\xb0\', \'\xe8\xbf\xb0\', \'\xe6\x9e\x95\', \'\xe4\xb8\xa7\', \'\xe6\x88\x96\', \'\xe7\x94\xbb\', \'\xe5\x8d\xa7\', \'\xe4\xba\x8b\',\n    \'\xe5\x88\xba\', \'\xe6\x9e\xa3\', \'\xe9\x9b\xa8\', \'\xe5\x8d\x96\', \'\xe7\x9f\xbf\', \'\xe7\xa0\x81\', \'\xe5\x8e\x95\', \'\xe5\xa5\x94\', \'\xe5\xa5\x87\', \'\xe5\xa5\x8b\', \'\xe6\x80\x81\', \'\xe6\xac\xa7\', \'\xe5\x9e\x84\', \'\xe5\xa6\xbb\', \'\xe8\xbd\xb0\', \'\xe9\xa1\xb7\', \'\xe8\xbd\xac\', \'\xe6\x96\xa9\', \'\xe8\xbd\xae\', \'\xe8\xbd\xaf\',\n    \'\xe5\x88\xb0\', \'\xe9\x9d\x9e\', \'\xe5\x8f\x94\', \'\xe8\x82\xaf\', \'\xe9\xbd\xbf\', \'\xe4\xba\x9b\', \'\xe8\x99\x8e\', \'\xe8\x99\x8f\', \'\xe8\x82\xbe\', \'\xe8\xb4\xa4\', \'\xe5\xb0\x9a\', \'\xe6\x97\xba\', \'\xe5\x85\xb7\', \'\xe6\x9e\x9c\', \'\xe5\x91\xb3\', \'\xe6\x98\x86\', \'\xe5\x9b\xbd\', \'\xe6\x98\x8c\', \'\xe7\x95\x85\', \'\xe6\x98\x8e\',\n    \'\xe6\x98\x93\', \'\xe6\x98\x82\', \'\xe5\x85\xb8\', \'\xe5\x9b\xba\', \'\xe5\xbf\xa0\', \'\xe5\x92\x90\', \'\xe5\x91\xbc\', \'\xe9\xb8\xa3\', \'\xe5\x92\x8f\', \'\xe5\x91\xa2\', \'\xe5\xb2\xb8\', \'\xe5\xb2\xa9\', \'\xe5\xb8\x96\', \'\xe7\xbd\x97\', \'\xe5\xb8\x9c\', \'\xe5\xb2\xad\', \'\xe5\x87\xaf\', \'\xe8\xb4\xa5\', \'\xe8\xb4\xa9\', \'\xe8\xb4\xad\',\n    \'\xe5\x9b\xbe\', \'\xe9\x92\x93\', \'\xe5\x88\xb6\', \'\xe7\x9f\xa5\', \'\xe5\x9e\x82\', \'\xe7\x89\xa7\', \'\xe7\x89\xa9\', \'\xe4\xb9\x96\', \'\xe5\x88\xae\', \'\xe7\xa7\x86\', \'\xe5\x92\x8c\', \'\xe5\xad\xa3\', \'\xe5\xa7\x94\', \'\xe4\xbd\xb3\', \'\xe4\xbe\x8d\', \'\xe4\xbe\x9b\', \'\xe4\xbd\xbf\', \'\xe4\xbe\x8b\', \'\xe7\x89\x88\', \'\xe4\xbe\x84\',\n    \'\xe4\xbe\xa6\', \'\xe4\xbe\xa7\', \'\xe5\x87\xad\', \'\xe4\xbe\xa8\', \'\xe4\xbd\xa9\', \'\xe8\xb4\xa7\', \'\xe4\xbe\x9d\', \'\xe7\x9a\x84\', \'\xe8\xbf\xab\', \'\xe8\xb4\xa8\', \'\xe6\xac\xa3\', \'\xe5\xbe\x81\', \'\xe5\xbe\x80\', \'\xe7\x88\xac\', \'\xe5\xbd\xbc\', \'\xe5\xbe\x84\', \'\xe6\x89\x80\', \'\xe8\x88\x8d\', \'\xe9\x87\x91\', \'\xe5\x91\xbd\',\n    \'\xe6\x96\xa7\', \'\xe7\x88\xb8\', \'\xe9\x87\x87\', \'\xe5\x8f\x97\', \'\xe4\xb9\xb3\', \'\xe8\xb4\xaa\', \'\xe5\xbf\xb5\', \'\xe8\xb4\xab\', \'\xe8\x82\xa4\', \'\xe8\x82\xba\', \'\xe8\x82\xa2\', \'\xe8\x82\xbf\', \'\xe8\x83\x80\', \'\xe6\x9c\x8b\', \'\xe8\x82\xa1\', \'\xe8\x82\xa5\', \'\xe6\x9c\x8d\', \'\xe8\x83\x81\', \'\xe5\x91\xa8\', \'\xe6\x98\x8f\',\n    \'\xe9\xb1\xbc\', \'\xe5\x85\x94\', \'\xe7\x8b\x90\', \'\xe5\xbf\xbd\', \'\xe7\x8b\x97\', \'\xe5\xa4\x87\', \'\xe9\xa5\xb0\', \'\xe9\xa5\xb1\', \'\xe9\xa5\xb2\', \'\xe5\x8f\x98\', \'\xe4\xba\xac\', \'\xe4\xba\xab\', \'\xe5\xba\x97\', \'\xe5\xa4\x9c\', \'\xe5\xba\x99\', \'\xe5\xba\x9c\', \'\xe5\xba\x95\', \'\xe5\x89\x82\', \'\xe9\x83\x8a\', \'\xe5\xba\x9f\',\n    \'\xe5\x87\x80\', \'\xe7\x9b\xb2\', \'\xe6\x94\xbe\', \'\xe5\x88\xbb\', \'\xe8\x82\xb2\', \'\xe9\x97\xb8\', \'\xe9\x97\xb9\', \'\xe9\x83\x91\', \'\xe5\x88\xb8\', \'\xe5\x8d\xb7\', \'\xe5\x8d\x95\', \'\xe7\x82\x92\', \'\xe7\x82\x8a\', \'\xe7\x82\x95\', \'\xe7\x82\x8e\', \'\xe7\x82\x89\', \'\xe6\xb2\xab\', \'\xe6\xb5\x85\', \'\xe6\xb3\x95\', \'\xe6\xb3\x84\',\n    \'\xe6\xb2\xb3\', \'\xe6\xb2\xbe\', \'\xe6\xb3\xaa\', \'\xe6\xb2\xb9\', \'\xe6\xb3\x8a\', \'\xe6\xb2\xbf\', \'\xe6\xb3\xa1\', \'\xe6\xb3\xa8\', \'\xe6\xb3\xbb\', \'\xe6\xb3\xb3\', \'\xe6\xb3\xa5\', \'\xe6\xb2\xb8\', \'\xe6\xb3\xa2\', \'\xe6\xb3\xbc\', \'\xe6\xb3\xbd\', \'\xe6\xb2\xbb\', \'\xe6\x80\x96\', \'\xe6\x80\xa7\', \'\xe6\x80\x95\', \'\xe6\x80\x9c\',\n    \'\xe6\x80\xaa\', \'\xe5\xad\xa6\', \'\xe5\xae\x9d\', \'\xe5\xae\x97\', \'\xe5\xae\x9a\', \'\xe5\xae\x9c\', \'\xe5\xae\xa1\', \'\xe5\xae\x99\', \'\xe5\xae\x98\', \'\xe7\xa9\xba\', \'\xe5\xb8\x98\', \'\xe5\xae\x9e\', \'\xe8\xaf\x95\', \'\xe9\x83\x8e\', \'\xe8\xaf\x97\', \'\xe8\x82\xa9\', \'\xe6\x88\xbf\', \'\xe8\xaf\x9a\', \'\xe8\xa1\xac\', \'\xe8\xa1\xab\',\n    \'\xe8\xa7\x86\', \'\xe8\xaf\x9d\', \'\xe8\xaf\x9e\', \'\xe8\xaf\xa2\', \'\xe8\xaf\xa5\', \'\xe8\xaf\xa6\', \'\xe5\xbb\xba\', \'\xe8\x82\x83\', \'\xe5\xbd\x95\', \'\xe9\x9a\xb6\', \'\xe5\xb1\x85\', \'\xe5\xb1\x8a\', \'\xe5\x88\xb7\', \'\xe5\xb1\x88\', \'\xe5\xbc\xa6\', \'\xe6\x89\xbf\', \'\xe5\xad\x9f\', \'\xe5\xad\xa4\', \'\xe9\x99\x95\', \'\xe9\x99\x8d\',\n    \'\xe9\x99\x90\', \'\xe5\xa6\xb9\', \'\xe5\xa7\x91\', \'\xe5\xa7\x90\', \'\xe5\xa7\x93\', \'\xe5\xa7\x8b\', \'\xe9\xa9\xbe\', \'\xe5\x8f\x82\', \'\xe8\x89\xb0\', \'\xe7\xba\xbf\', \'\xe7\xbb\x83\', \'\xe7\xbb\x84\', \'\xe7\xbb\x86\', \'\xe9\xa9\xb6\', \'\xe7\xbb\x87\', \'\xe7\xbb\x88\', \'\xe9\xa9\xbb\', \'\xe9\xa9\xbc\', \'\xe7\xbb\x8d\', \'\xe7\xbb\x8f\',\n    \'\xe8\xb4\xaf\', \'\xe5\xa5\x8f\', \'\xe6\x98\xa5\', \'\xe5\xb8\xae\', \'\xe7\x8f\x8d\', \'\xe7\x8e\xbb\', \'\xe6\xaf\x92\', \'\xe5\x9e\x8b\', \'\xe6\x8c\x82\', \'\xe5\xb0\x81\', \'\xe6\x8c\x81\', \'\xe9\xa1\xb9\', \'\xe5\x9e\xae\', \'\xe6\x8c\x8e\', \'\xe5\x9f\x8e\', \'\xe6\x8c\xa0\', \'\xe6\x94\xbf\', \'\xe8\xb5\xb4\', \'\xe8\xb5\xb5\', \'\xe6\x8c\xa1\',\n    \'\xe6\x8c\xba\', \'\xe6\x8b\xac\', \'\xe6\x8b\xb4\', \'\xe6\x8b\xbe\', \'\xe6\x8c\x91\', \'\xe6\x8c\x87\', \'\xe5\x9e\xab\', \'\xe6\x8c\xa3\', \'\xe6\x8c\xa4\', \'\xe6\x8b\xbc\', \'\xe6\x8c\x96\', \'\xe6\x8c\x89\', \'\xe6\x8c\xa5\', \'\xe6\x8c\xaa\', \'\xe6\x9f\x90\', \'\xe7\x94\x9a\', \'\xe9\x9d\xa9\', \'\xe8\x8d\x90\', \'\xe5\xb7\xb7\', \'\xe5\xb8\xa6\',\n    \'\xe8\x8d\x89\', \'\xe8\x8c\xa7\', \'\xe8\x8c\xb6\', \'\xe8\x8d\x92\', \'\xe8\x8c\xab\', \'\xe8\x8d\xa1\', \'\xe8\x8d\xa3\', \'\xe6\x95\x85\', \'\xe8\x83\xa1\', \'\xe5\x8d\x97\', \'\xe8\x8d\xaf\', \'\xe6\xa0\x87\', \'\xe6\x9e\xaf\', \'\xe6\x9f\x84\', \'\xe6\xa0\x8b\', \'\xe7\x9b\xb8\', \'\xe6\x9f\xa5\', \'\xe6\x9f\x8f\', \'\xe6\x9f\xb3\', \'\xe6\x9f\xb1\',\n    \'\xe6\x9f\xbf\', \'\xe6\xa0\x8f\', \'\xe6\xa0\x91\', \'\xe8\xa6\x81\', \'\xe5\x92\xb8\', \'\xe5\xa8\x81\', \'\xe6\xad\xaa\', \'\xe7\xa0\x94\', \'\xe7\xa0\x96\', \'\xe5\x8e\x98\', \'\xe5\x8e\x9a\', \'\xe7\xa0\x8c\', \'\xe7\xa0\x8d\', \'\xe9\x9d\xa2\', \'\xe8\x80\x90\', \'\xe8\x80\x8d\', \'\xe7\x89\xb5\', \'\xe6\xae\x8b\', \'\xe6\xae\x83\', \'\xe8\xbd\xbb\',\n    \'\xe9\xb8\xa6\', \'\xe7\x9a\x86\', \'\xe8\x83\x8c\', \'\xe6\x88\x98\', \'\xe7\x82\xb9\', \'\xe4\xb8\xb4\', \'\xe8\xa7\x88\', \'\xe7\xab\x96\', \'\xe7\x9c\x81\', \'\xe5\x89\x8a\', \'\xe5\xb0\x9d\', \'\xe6\x98\xaf\', \'\xe7\x9b\xbc\', \'\xe7\x9c\xa8\', \'\xe5\x93\x84\', \'\xe6\x98\xbe\', \'\xe5\x93\x91\', \'\xe5\x86\x92\', \'\xe6\x98\xa0\', \'\xe6\x98\x9f\',\n    \'\xe6\x98\xa8\', \'\xe7\x95\x8f\', \'\xe8\xb6\xb4\', \'\xe8\x83\x83\', \'\xe8\xb4\xb5\', \'\xe7\x95\x8c\', \'\xe8\x99\xb9\', \'\xe8\x99\xbe\', \'\xe8\x9a\x81\', \'\xe6\x80\x9d\', \'\xe8\x9a\x82\', \'\xe8\x99\xbd\', \'\xe5\x93\x81\', \'\xe5\x92\xbd\', \'\xe9\xaa\x82\', \'\xe5\x93\x97\', \'\xe5\x92\xb1\', \'\xe5\x93\x8d\', \'\xe5\x93\x88\', \'\xe5\x92\xac\',\n    \'\xe5\x92\xb3\', \'\xe5\x93\xaa\', \'\xe7\x82\xad\', \'\xe5\xb3\xa1\', \'\xe7\xbd\x9a\', \'\xe8\xb4\xb1\', \'\xe8\xb4\xb4\', \'\xe9\xaa\xa8\', \'\xe9\x92\x9e\', \'\xe9\x92\x9f\', \'\xe9\x92\xa2\', \'\xe9\x92\xa5\', \'\xe9\x92\xa9\', \'\xe5\x8d\xb8\', \'\xe7\xbc\xb8\', \'\xe6\x8b\x9c\', \'\xe7\x9c\x8b\', \'\xe7\x9f\xa9\', \'\xe6\x80\x8e\', \'\xe7\x89\xb2\',\n    \'\xe9\x80\x89\', \'\xe9\x80\x82\', \'\xe7\xa7\x92\', \'\xe9\xa6\x99\', \'\xe7\xa7\x8d\', \'\xe7\xa7\x8b\', \'\xe7\xa7\x91\', \'\xe9\x87\x8d\', \'\xe5\xa4\x8d\', \'\xe7\xab\xbf\', \'\xe6\xae\xb5\', \'\xe4\xbe\xbf\', \'\xe4\xbf\xa9\', \'\xe8\xb4\xb7\', \'\xe9\xa1\xba\', \'\xe4\xbf\xae\', \'\xe4\xbf\x9d\', \'\xe4\xbf\x83\', \'\xe4\xbe\xae\', \'\xe4\xbf\xad\',\n    \'\xe4\xbf\x97\', \'\xe4\xbf\x98\', \'\xe4\xbf\xa1\', \'\xe7\x9a\x87\', \'\xe6\xb3\x89\', \'\xe9\xac\xbc\', \'\xe4\xbe\xb5\', \'\xe8\xbf\xbd\', \'\xe4\xbf\x8a\', \'\xe7\x9b\xbe\', \'\xe5\xbe\x85\', \'\xe5\xbe\x8b\', \'\xe5\xbe\x88\', \'\xe9\xa1\xbb\', \'\xe5\x8f\x99\', \'\xe5\x89\x91\', \'\xe9\x80\x83\', \'\xe9\xa3\x9f\', \'\xe7\x9b\x86\', \'\xe8\x83\x86\',\n    \'\xe8\x83\x9c\', \'\xe8\x83\x9e\', \'\xe8\x83\x96\', \'\xe8\x84\x89\', \'\xe5\x8b\x89\', \'\xe7\x8b\xad\', \'\xe7\x8b\xae\', \'\xe7\x8b\xac\', \'\xe7\x8b\xa1\', \'\xe7\x8b\xb1\', \'\xe7\x8b\xa0\', \'\xe8\xb4\xb8\', \'\xe6\x80\xa8\', \'\xe6\x80\xa5\', \'\xe9\xa5\xb6\', \'\xe8\x9a\x80\', \'\xe9\xa5\xba\', \'\xe9\xa5\xbc\', \'\xe5\xbc\xaf\', \'\xe5\xb0\x86\',\n    \'\xe5\xa5\x96\', \'\xe5\x93\x80\', \'\xe4\xba\xad\', \'\xe4\xba\xae\', \'\xe5\xba\xa6\', \'\xe8\xbf\xb9\', \'\xe5\xba\xad\', \'\xe7\x96\xae\', \'\xe7\x96\xaf\', \'\xe7\x96\xab\', \'\xe7\x96\xa4\', \'\xe5\xa7\xbf\', \'\xe4\xba\xb2\', \'\xe9\x9f\xb3\', \'\xe5\xb8\x9d\', \'\xe6\x96\xbd\', \'\xe9\x97\xbb\', \'\xe9\x98\x80\', \'\xe9\x98\x81\', \'\xe5\xb7\xae\',\n    \'\xe5\x85\xbb\', \'\xe7\xbe\x8e\', \'\xe5\xa7\x9c\', \'\xe5\x8f\x9b\', \'\xe9\x80\x81\', \'\xe7\xb1\xbb\', \'\xe8\xbf\xb7\', \'\xe5\x89\x8d\', \'\xe9\xa6\x96\', \'\xe9\x80\x86\', \'\xe6\x80\xbb\', \'\xe7\x82\xbc\', \'\xe7\x82\xb8\', \'\xe7\x82\xae\', \'\xe7\x83\x82\', \'\xe5\x89\x83\', \'\xe6\xb4\x81\', \'\xe6\xb4\xaa\', \'\xe6\xb4\x92\', \'\xe6\xb5\x87\',\n    \'\xe6\xb5\x8a\', \'\xe6\xb4\x9e\', \'\xe6\xb5\x8b\', \'\xe6\xb4\x97\', \'\xe6\xb4\xbb\', \'\xe6\xb4\xbe\', \'\xe6\xb4\xbd\', \'\xe6\x9f\x93\', \'\xe6\xb5\x8e\', \'\xe6\xb4\x8b\', \'\xe6\xb4\xb2\', \'\xe6\xb5\x91\', \'\xe6\xb5\x93\', \'\xe6\xb4\xa5\', \'\xe6\x81\x92\', \'\xe6\x81\xa2\', \'\xe6\x81\xb0\', \'\xe6\x81\xbc\', \'\xe6\x81\xa8\', \'\xe4\xb8\xbe\',\n    \'\xe8\xa7\x89\', \'\xe5\xae\xa3\', \'\xe5\xae\xa4\', \'\xe5\xae\xab\', \'\xe5\xae\xaa\', \'\xe7\xaa\x81\', \'\xe7\xa9\xbf\', \'\xe7\xaa\x83\', \'\xe5\xae\xa2\', \'\xe5\x86\xa0\', \'\xe8\xaf\xad\', \'\xe6\x89\x81\', \'\xe8\xa2\x84\', \'\xe7\xa5\x96\', \'\xe7\xa5\x9e\', \'\xe7\xa5\x9d\', \'\xe8\xaf\xaf\', \'\xe8\xaf\xb1\', \'\xe8\xaf\xb4\', \'\xe8\xaf\xb5\',\n    \'\xe5\x9e\xa6\', \'\xe9\x80\x80\', \'\xe6\x97\xa2\', \'\xe5\xb1\x8b\', \'\xe6\x98\xbc\', \'\xe8\xb4\xb9\', \'\xe9\x99\xa1\', \'\xe7\x9c\x89\', \'\xe5\xad\xa9\', \'\xe9\x99\xa4\', \'\xe9\x99\xa9\', \'\xe9\x99\xa2\', \'\xe5\xa8\x83\', \'\xe5\xa7\xa5\', \'\xe5\xa7\xa8\', \'\xe5\xa7\xbb\', \'\xe5\xa8\x87\', \'\xe6\x80\x92\', \'\xe6\x9e\xb6\', \'\xe8\xb4\xba\',\n    \'\xe7\x9b\x88\', \'\xe5\x8b\x87\', \'\xe6\x80\xa0\', \'\xe6\x9f\x94\', \'\xe5\x9e\x92\', \'\xe7\xbb\x91\', \'\xe7\xbb\x92\', \'\xe7\xbb\x93\', \'\xe7\xbb\x95\', \'\xe9\xaa\x84\', \'\xe7\xbb\x98\', \'\xe7\xbb\x99\', \'\xe7\xbb\x9c\', \'\xe9\xaa\x86\', \'\xe7\xbb\x9d\', \'\xe7\xbb\x9e\', \'\xe7\xbb\x9f\', \'\xe8\x80\x95\', \'\xe8\x80\x97\', \'\xe8\x89\xb3\',\n    \'\xe6\xb3\xb0\', \'\xe7\x8f\xa0\', \'\xe7\x8f\xad\', \'\xe7\xb4\xa0\', \'\xe8\x9a\x95\', \'\xe9\xa1\xbd\', \'\xe7\x9b\x8f\', \'\xe5\x8c\xaa\', \'\xe6\x8d\x9e\', \'\xe6\xa0\xbd\', \'\xe6\x8d\x95\', \'\xe6\x8c\xaf\', \'\xe8\xbd\xbd\', \'\xe8\xb5\xb6\', \'\xe8\xb5\xb7\', \'\xe7\x9b\x90\', \'\xe6\x8d\x8e\', \'\xe6\x8d\x8f\', \'\xe5\x9f\x8b\', \'\xe6\x8d\x89\',\n    \'\xe6\x8d\x86\', \'\xe6\x8d\x90\', \'\xe6\x8d\x9f\', \'\xe9\x83\xbd\', \'\xe5\x93\xb2\', \'\xe9\x80\x9d\', \'\xe6\x8d\xa1\', \'\xe6\x8d\xa2\', \'\xe6\x8c\xbd\', \'\xe7\x83\xad\', \'\xe6\x81\x90\', \'\xe5\xa3\xb6\', \'\xe6\x8c\xa8\', \'\xe8\x80\xbb\', \'\xe8\x80\xbd\', \'\xe6\x81\xad\', \'\xe8\x8e\xb2\', \'\xe8\x8e\xab\', \'\xe8\x8d\xb7\', \'\xe8\x8e\xb7\',\n    \'\xe6\x99\x8b\', \'\xe6\x81\xb6\', \'\xe7\x9c\x9f\', \'\xe6\xa1\x86\', \'\xe6\xa1\x82\', \'\xe6\xa1\xa3\', \'\xe6\xa1\x90\', \'\xe6\xa0\xaa\', \'\xe6\xa1\xa5\', \'\xe6\xa1\x83\', \'\xe6\xa0\xbc\', \'\xe6\xa0\xa1\', \'\xe6\xa0\xb8\', \'\xe6\xa0\xb7\', \'\xe6\xa0\xb9\', \'\xe7\xb4\xa2\', \'\xe5\x93\xa5\', \'\xe9\x80\x9f\', \'\xe9\x80\x97\', \'\xe6\xa0\x97\',\n    \'\xe9\x85\x8d\', \'\xe7\xbf\x85\', \'\xe8\xbe\xb1\', \'\xe5\x94\x87\', \'\xe5\xa4\x8f\', \'\xe7\xa1\x80\', \'\xe7\xa0\xb4\', \'\xe5\x8e\x9f\', \'\xe5\xa5\x97\', \'\xe9\x80\x90\', \'\xe7\x83\x88\', \'\xe6\xae\x8a\', \'\xe9\xa1\xbe\', \'\xe8\xbd\xbf\', \'\xe8\xbe\x83\', \'\xe9\xa1\xbf\', \'\xe6\xaf\x99\', \'\xe8\x87\xb4\', \'\xe6\x9f\xb4\', \'\xe6\xa1\x8c\',\n    \'\xe8\x99\x91\', \'\xe7\x9b\x91\', \'\xe7\xb4\xa7\', \'\xe5\x85\x9a\', \'\xe6\x99\x92\', \'\xe7\x9c\xa0\', \'\xe6\x99\x93\', \'\xe9\xb8\xad\', \'\xe6\x99\x83\', \'\xe6\x99\x8c\', \'\xe6\x99\x95\', \'\xe8\x9a\x8a\', \'\xe5\x93\xa8\', \'\xe5\x93\xad\', \'\xe6\x81\xa9\', \'\xe5\x94\xa4\', \'\xe5\x95\x8a\', \'\xe5\x94\x89\', \'\xe7\xbd\xa2\', \'\xe5\xb3\xb0\',\n    \'\xe5\x9c\x86\', \'\xe8\xb4\xbc\', \'\xe8\xb4\xbf\', \'\xe9\x92\xb1\', \'\xe9\x92\xb3\', \'\xe9\x92\xbb\', \'\xe9\x93\x81\', \'\xe9\x93\x83\', \'\xe9\x93\x85\', \'\xe7\xbc\xba\', \'\xe6\xb0\xa7\', \'\xe7\x89\xb9\', \'\xe7\x89\xba\', \'\xe9\x80\xa0\', \'\xe4\xb9\x98\', \'\xe6\x95\x8c\', \'\xe7\xa7\xa4\', \'\xe7\xa7\x9f\', \'\xe7\xa7\xaf\', \'\xe7\xa7\xa7\',\n    \'\xe7\xa7\xa9\', \'\xe7\xa7\xb0\', \'\xe7\xa7\x98\', \'\xe9\x80\x8f\', \'\xe7\xac\x94\', \'\xe7\xac\x91\', \'\xe7\xac\x8b\', \'\xe5\x80\xba\', \'\xe5\x80\x9f\', \'\xe5\x80\xbc\', \'\xe5\x80\x9a\', \'\xe5\x80\xbe\', \'\xe5\x80\x92\', \'\xe5\x80\x98\', \'\xe4\xbf\xb1\', \'\xe5\x80\xa1\', \'\xe5\x80\x99\', \'\xe4\xbf\xaf\', \'\xe5\x80\x8d\', \'\xe5\x80\xa6\',\n    \'\xe5\x81\xa5\', \'\xe8\x87\xad\', \'\xe5\xb0\x84\', \'\xe8\xba\xac\', \'\xe6\x81\xaf\', \'\xe5\xbe\x92\', \'\xe5\xbe\x90\', \'\xe8\x88\xb0\', \'\xe8\x88\xb1\', \'\xe8\x88\xac\', \'\xe8\x88\xaa\', \'\xe9\x80\x94\', \'\xe6\x8b\xbf\', \'\xe7\x88\xb9\', \'\xe7\x88\xb1\', \'\xe9\xa2\x82\', \'\xe7\xbf\x81\', \'\xe8\x84\x86\', \'\xe8\x84\x82\', \'\xe8\x83\xb8\',\n    \'\xe8\x83\xb3\', \'\xe8\x84\x8f\', \'\xe8\x83\xb6\', \'\xe8\x84\x91\', \'\xe7\x8b\xb8\', \'\xe7\x8b\xbc\', \'\xe9\x80\xa2\', \'\xe7\x95\x99\', \'\xe7\x9a\xb1\', \'\xe9\xa5\xbf\', \'\xe6\x81\x8b\', \'\xe6\xa1\xa8\', \'\xe6\xb5\x86\', \'\xe8\xa1\xb0\', \'\xe9\xab\x98\', \'\xe5\xb8\xad\', \'\xe5\x87\x86\', \'\xe5\xba\xa7\', \'\xe8\x84\x8a\', \'\xe7\x97\x87\',\n    \'\xe7\x97\x85\', \'\xe7\x96\xbe\', \'\xe7\x96\xbc\', \'\xe7\x96\xb2\', \'\xe6\x95\x88\', \'\xe7\xa6\xbb\', \'\xe5\x94\x90\', \'\xe8\xb5\x84\', \'\xe5\x87\x89\', \'\xe7\xab\x99\', \'\xe5\x89\x96\', \'\xe7\xab\x9e\', \'\xe9\x83\xa8\', \'\xe6\x97\x81\', \'\xe6\x97\x85\', \'\xe7\x95\x9c\', \'\xe9\x98\x85\', \'\xe7\xbe\x9e\', \'\xe7\x93\xb6\', \'\xe6\x8b\xb3\',\n    \'\xe7\xb2\x89\', \'\xe6\x96\x99\', \'\xe7\x9b\x8a\', \'\xe5\x85\xbc\', \'\xe7\x83\xa4\', \'\xe7\x83\x98\', \'\xe7\x83\xa6\', \'\xe7\x83\xa7\', \'\xe7\x83\x9b\', \'\xe7\x83\x9f\', \'\xe9\x80\x92\', \'\xe6\xb6\x9b\', \'\xe6\xb5\x99\', \'\xe6\xb6\x9d\', \'\xe9\x85\x92\', \'\xe6\xb6\x89\', \'\xe6\xb6\x88\', \'\xe6\xb5\xa9\', \'\xe6\xb5\xb7\', \'\xe6\xb6\x82\',\n    \'\xe6\xb5\xb4\', \'\xe6\xb5\xae\', \'\xe6\xb5\x81\', \'\xe6\xb6\xa6\', \'\xe6\xb5\xaa\', \'\xe6\xb5\xb8\', \'\xe6\xb6\xa8\', \'\xe7\x83\xab\', \'\xe6\xb6\x8c\', \'\xe6\x82\x9f\', \'\xe6\x82\x84\', \'\xe6\x82\x94\', \'\xe6\x82\xa6\', \'\xe5\xae\xb3\', \'\xe5\xae\xbd\', \'\xe5\xae\xb6\', \'\xe5\xae\xb5\', \'\xe5\xae\xb4\', \'\xe5\xae\xbe\', \'\xe7\xaa\x84\',\n    \'\xe5\xae\xb9\', \'\xe5\xae\xb0\', \'\xe6\xa1\x88\', \'\xe8\xaf\xb7\', \'\xe6\x9c\x97\', \'\xe8\xaf\xb8\', \'\xe8\xaf\xbb\', \'\xe6\x89\x87\', \'\xe8\xa2\x9c\', \'\xe8\xa2\x96\', \'\xe8\xa2\x8d\', \'\xe8\xa2\xab\', \'\xe7\xa5\xa5\', \'\xe8\xaf\xbe\', \'\xe8\xb0\x81\', \'\xe8\xb0\x83\', \'\xe5\x86\xa4\', \'\xe8\xb0\x85\', \'\xe8\xb0\x88\', \'\xe8\xb0\x8a\',\n    \'\xe5\x89\xa5\', \'\xe6\x81\xb3\', \'\xe5\xb1\x95\', \'\xe5\x89\xa7\', \'\xe5\xb1\x91\', \'\xe5\xbc\xb1\', \'\xe9\x99\xb5\', \'\xe9\x99\xb6\', \'\xe9\x99\xb7\', \'\xe9\x99\xaa\', \'\xe5\xa8\xb1\', \'\xe5\xa8\x98\', \'\xe9\x80\x9a\', \'\xe8\x83\xbd\', \'\xe9\x9a\xbe\', \'\xe9\xa2\x84\', \'\xe6\xa1\x91\', \'\xe7\xbb\xa2\', \'\xe7\xbb\xa3\', \'\xe9\xaa\x8c\',\n    \'\xe7\xbb\xa7\', \'\xe7\x90\x83\', \'\xe7\x90\x86\', \'\xe6\x8d\xa7\', \'\xe5\xa0\xb5\', \'\xe6\x8f\x8f\', \'\xe5\x9f\x9f\', \'\xe6\x8e\xa9\', \'\xe6\x8d\xb7\', \'\xe6\x8e\x92\', \'\xe6\x8e\x89\', \'\xe5\xa0\x86\', \'\xe6\x8e\xa8\', \'\xe6\x8e\x80\', \'\xe6\x8e\x88\', \'\xe6\x95\x99\', \'\xe6\x8e\x8f\', \'\xe6\x8e\xa0\', \'\xe5\x9f\xb9\', \'\xe6\x8e\xa5\',\n    \'\xe6\x8e\xa7\', \'\xe6\x8e\xa2\', \'\xe6\x8d\xae\', \'\xe6\x8e\x98\', \'\xe8\x81\x8c\', \'\xe5\x9f\xba\', \'\xe8\x91\x97\', \'\xe5\x8b\x92\', \'\xe9\xbb\x84\', \'\xe8\x90\x8c\', \'\xe8\x90\x9d\', \'\xe8\x8f\x8c\', \'\xe8\x8f\x9c\', \'\xe8\x90\x84\', \'\xe8\x8f\x8a\', \'\xe8\x90\x8d\', \'\xe8\x8f\xa0\', \'\xe8\x90\xa5\', \'\xe6\xa2\xb0\', \'\xe6\xa2\xa6\',\n    \'\xe6\xa2\xa2\', \'\xe6\xa2\x85\', \'\xe6\xa3\x80\', \'\xe6\xa2\xb3\', \'\xe6\xa2\xaf\', \'\xe6\xa1\xb6\', \'\xe6\x95\x91\', \'\xe5\x89\xaf\', \'\xe7\xa5\xa8\', \'\xe6\x88\x9a\', \'\xe7\x88\xbd\', \'\xe8\x81\x8b\', \'\xe8\xa2\xad\', \'\xe7\x9b\x9b\', \'\xe9\x9b\xaa\', \'\xe8\xbe\x85\', \'\xe8\xbe\x86\', \'\xe8\x99\x9a\', \'\xe9\x9b\x80\', \'\xe5\xa0\x82\',\n    \'\xe5\xb8\xb8\', \'\xe5\x8c\x99\', \'\xe6\x99\xa8\', \'\xe7\x9d\x81\', \'\xe7\x9c\xaf\', \'\xe7\x9c\xbc\', \'\xe6\x82\xac\', \'\xe9\x87\x8e\', \'\xe5\x95\xa6\', \'\xe6\x99\x9a\', \'\xe5\x95\x84\', \'\xe8\xb7\x9d\', \'\xe8\xb7\x83\', \'\xe7\x95\xa5\', \'\xe8\x9b\x87\', \'\xe7\xb4\xaf\', \'\xe5\x94\xb1\', \'\xe6\x82\xa3\', \'\xe5\x94\xaf\', \'\xe5\xb4\x96\',\n    \'\xe5\xb4\xad\', \'\xe5\xb4\x87\', \'\xe5\x9c\x88\', \'\xe9\x93\x9c\', \'\xe9\x93\xb2\', \'\xe9\x93\xb6\', \'\xe7\x94\x9c\', \'\xe6\xa2\xa8\', \'\xe7\x8a\x81\', \'\xe7\xa7\xbb\', \'\xe7\xac\xa8\', \'\xe7\xac\xbc\', \'\xe7\xac\x9b\', \'\xe7\xac\xa6\', \'\xe7\xac\xac\', \'\xe6\x95\x8f\', \'\xe5\x81\x9a\', \'\xe8\xa2\x8b\', \'\xe6\x82\xa0\', \'\xe5\x81\xbf\',\n    \'\xe5\x81\xb6\', \'\xe5\x81\xb7\', \'\xe6\x82\xa8\', \'\xe5\x94\xae\', \'\xe5\x81\x9c\', \'\xe5\x81\x8f\', \'\xe5\x81\x87\', \'\xe5\xbe\x97\', \'\xe8\xa1\x94\', \'\xe7\x9b\x98\', \'\xe8\x88\xb9\', \'\xe6\x96\x9c\', \'\xe7\x9b\x92\', \'\xe9\xb8\xbd\', \'\xe6\x82\x89\', \'\xe6\xac\xb2\', \'\xe5\xbd\xa9\', \'\xe9\xa2\x86\', \'\xe8\x84\x9a\', \'\xe8\x84\x96\',\n    \'\xe8\x84\xb8\', \'\xe8\x84\xb1\', \'\xe8\xb1\xa1\', \'\xe5\xa4\x9f\', \'\xe7\x8c\x9c\', \'\xe7\x8c\xaa\', \'\xe7\x8c\x8e\', \'\xe7\x8c\xab\', \'\xe7\x8c\x9b\', \'\xe9\xa6\x85\', \'\xe9\xa6\x86\', \'\xe5\x87\x91\', \'\xe5\x87\x8f\', \'\xe6\xaf\xab\', \'\xe9\xba\xbb\', \'\xe7\x97\x92\', \'\xe7\x97\x95\', \'\xe5\xbb\x8a\', \'\xe5\xba\xb7\', \'\xe5\xba\xb8\',\n    \'\xe9\xb9\xbf\', \'\xe7\x9b\x97\', \'\xe7\xab\xa0\', \'\xe7\xab\x9f\', \'\xe5\x95\x86\', \'\xe6\x97\x8f\', \'\xe6\x97\x8b\', \'\xe6\x9c\x9b\', \'\xe7\x8e\x87\', \'\xe7\x9d\x80\', \'\xe7\x9b\x96\', \'\xe7\xb2\x98\', \'\xe7\xb2\x97\', \'\xe7\xb2\x92\', \'\xe6\x96\xad\', \'\xe5\x89\xaa\', \'\xe5\x85\xbd\', \'\xe6\xb8\x85\', \'\xe6\xb7\xbb\', \'\xe6\xb7\x8b\',\n    \'\xe6\xb7\xb9\', \'\xe6\xb8\xa0\', \'\xe6\xb8\x90\', \'\xe6\xb7\xb7\', \'\xe6\xb8\x94\', \'\xe6\xb7\x98\', \'\xe6\xb6\xb2\', \'\xe6\xb7\xa1\', \'\xe6\xb7\xb1\', \'\xe5\xa9\x86\', \'\xe6\xa2\x81\', \'\xe6\xb8\x97\', \'\xe6\x83\x85\', \'\xe6\x83\x9c\', \'\xe6\x83\xad\', \'\xe6\x82\xbc\', \'\xe6\x83\xa7\', \'\xe6\x83\x95\', \'\xe6\x83\x8a\', \'\xe6\x83\xa8\',\n    \'\xe6\x83\xaf\', \'\xe5\xaf\x87\', \'\xe5\xaf\x84\', \'\xe5\xae\xbf\', \'\xe7\xaa\x91\', \'\xe5\xaf\x86\', \'\xe8\xb0\x8b\', \'\xe8\xb0\x8e\', \'\xe7\xa5\xb8\', \'\xe8\xb0\x9c\', \'\xe9\x80\xae\', \'\xe6\x95\xa2\', \'\xe5\xb1\xa0\', \'\xe5\xbc\xb9\', \'\xe9\x9a\x8f\', \'\xe8\x9b\x8b\', \'\xe9\x9a\x86\', \'\xe9\x9a\x90\', \'\xe5\xa9\x9a\', \'\xe5\xa9\xb6\',\n    \'\xe9\xa2\x88\', \'\xe7\xbb\xa9\', \'\xe7\xbb\xaa\', \'\xe7\xbb\xad\', \'\xe9\xaa\x91\', \'\xe7\xbb\xb3\', \'\xe7\xbb\xb4\', \'\xe7\xbb\xb5\', \'\xe7\xbb\xb8\', \'\xe7\xbb\xbf\', \'\xe7\x90\xb4\', \'\xe6\x96\x91\', \'\xe6\x9b\xbf\', \'\xe6\xac\xbe\', \'\xe5\xa0\xaa\', \'\xe6\x90\xad\', \'\xe5\xa1\x94\', \'\xe8\xb6\x8a\', \'\xe8\xb6\x81\', \'\xe8\xb6\x8b\',\n    \'\xe8\xb6\x85\', \'\xe6\x8f\x90\', \'\xe5\xa0\xa4\', \'\xe5\x8d\x9a\', \'\xe6\x8f\xad\', \'\xe5\x96\x9c\', \'\xe6\x8f\x92\', \'\xe6\x8f\xaa\', \'\xe6\x90\x9c\', \'\xe7\x85\xae\', \'\xe6\x8f\xb4\', \'\xe8\xa3\x81\', \'\xe6\x90\x81\', \'\xe6\x90\x82\', \'\xe6\x90\x85\', \'\xe6\x8f\xa1\', \'\xe6\x8f\x89\', \'\xe6\x96\xaf\', \'\xe6\x9c\x9f\', \'\xe6\xac\xba\',\n    \'\xe8\x81\x94\', \'\xe6\x95\xa3\', \'\xe6\x83\xb9\', \'\xe8\x91\xac\', \'\xe8\x91\x9b\', \'\xe8\x91\xa3\', \'\xe8\x91\xa1\', \'\xe6\x95\xac\', \'\xe8\x91\xb1\', \'\xe8\x90\xbd\', \'\xe6\x9c\x9d\', \'\xe8\xbe\x9c\', \'\xe8\x91\xb5\', \'\xe6\xa3\x92\', \'\xe6\xa3\x8b\', \'\xe6\xa4\x8d\', \'\xe6\xa3\xae\', \'\xe6\xa4\x85\', \'\xe6\xa4\x92\', \'\xe6\xa3\xb5\',\n    \'\xe6\xa3\x8d\', \'\xe6\xa3\x89\', \'\xe6\xa3\x9a\', \'\xe6\xa3\x95\', \'\xe6\x83\xa0\', \'\xe6\x83\x91\', \'\xe9\x80\xbc\', \'\xe5\x8e\xa8\', \'\xe5\x8e\xa6\', \'\xe7\xa1\xac\', \'\xe7\xa1\xae\', \'\xe9\x9b\x81\', \'\xe6\xae\x96\', \'\xe8\xa3\x82\', \'\xe9\x9b\x84\', \'\xe6\x9a\x82\', \'\xe9\x9b\x85\', \'\xe8\xbe\x88\', \'\xe6\x82\xb2\', \'\xe7\xb4\xab\',\n    \'\xe8\xbe\x89\', \'\xe6\x95\x9e\', \'\xe8\xb5\x8f\', \'\xe6\x8e\x8c\', \'\xe6\x99\xb4\', \'\xe6\x9a\x91\', \'\xe6\x9c\x80\', \'\xe9\x87\x8f\', \'\xe5\x96\xb7\', \'\xe6\x99\xb6\', \'\xe5\x96\x87\', \'\xe9\x81\x87\', \'\xe5\x96\x8a\', \'\xe6\x99\xaf\', \'\xe8\xb7\xb5\', \'\xe8\xb7\x8c\', \'\xe8\xb7\x91\', \'\xe9\x81\x97\', \'\xe8\x9b\x99\', \'\xe8\x9b\x9b\',\n    \'\xe8\x9c\x93\', \'\xe5\x96\x9d\', \'\xe5\x96\x82\', \'\xe5\x96\x98\', \'\xe5\x96\x89\', \'\xe5\xb9\x85\', \'\xe5\xb8\xbd\', \'\xe8\xb5\x8c\', \'\xe8\xb5\x94\', \'\xe9\xbb\x91\', \'\xe9\x93\xb8\', \'\xe9\x93\xba\', \'\xe9\x93\xbe\', \'\xe9\x94\x80\', \'\xe9\x94\x81\', \'\xe9\x94\x84\', \'\xe9\x94\x85\', \'\xe9\x94\x88\', \'\xe9\x94\x8b\', \'\xe9\x94\x90\',\n    \'\xe7\x9f\xad\', \'\xe6\x99\xba\', \'\xe6\xaf\xaf\', \'\xe9\xb9\x85\', \'\xe5\x89\xa9\', \'\xe7\xa8\x8d\', \'\xe7\xa8\x8b\', \'\xe7\xa8\x80\', \'\xe7\xa8\x8e\', \'\xe7\xad\x90\', \'\xe7\xad\x89\', \'\xe7\xad\x91\', \'\xe7\xad\x96\', \'\xe7\xad\x9b\', \'\xe7\xad\x92\', \'\xe7\xad\x94\', \'\xe7\xad\x8b\', \'\xe7\xad\x9d\', \'\xe5\x82\xb2\', \'\xe5\x82\x85\',\n    \'\xe7\x89\x8c\', \'\xe5\xa0\xa1\', \'\xe9\x9b\x86\', \'\xe7\x84\xa6\', \'\xe5\x82\x8d\', \'\xe5\x82\xa8\', \'\xe5\xa5\xa5\', \'\xe8\xa1\x97\', \'\xe6\x83\xa9\', \'\xe5\xbe\xa1\', \'\xe5\xbe\xaa\', \'\xe8\x89\x87\', \'\xe8\x88\x92\', \'\xe7\x95\xaa\', \'\xe9\x87\x8a\', \'\xe7\xa6\xbd\', \'\xe8\x85\x8a\', \'\xe8\x84\xbe\', \'\xe8\x85\x94\', \'\xe9\xb2\x81\',\n    \'\xe7\x8c\xbe\', \'\xe7\x8c\xb4\', \'\xe7\x84\xb6\', \'\xe9\xa6\x8b\', \'\xe8\xa3\x85\', \'\xe8\x9b\xae\', \'\xe5\xb0\xb1\', \'\xe7\x97\x9b\', \'\xe7\xab\xa5\', \'\xe9\x98\x94\', \'\xe5\x96\x84\', \'\xe7\xbe\xa1\', \'\xe6\x99\xae\', \'\xe7\xb2\xaa\', \'\xe5\xb0\x8a\', \'\xe9\x81\x93\', \'\xe6\x9b\xbe\', \'\xe7\x84\xb0\', \'\xe6\xb8\xaf\', \'\xe6\xb9\x96\',\n    \'\xe6\xb8\xa3\', \'\xe6\xb9\xbf\', \'\xe6\xb8\xa9\', \'\xe6\xb8\xb4\', \'\xe6\xbb\x91\', \'\xe6\xb9\xbe\', \'\xe6\xb8\xa1\', \'\xe6\xb8\xb8\', \'\xe6\xbb\x8b\', \'\xe6\xba\x89\', \'\xe6\x84\xa4\', \'\xe6\x85\x8c\', \'\xe6\x83\xb0\', \'\xe6\x84\xa7\', \'\xe6\x84\x89\', \'\xe6\x85\xa8\', \'\xe5\x89\xb2\', \'\xe5\xaf\x92\', \'\xe5\xaf\x8c\', \'\xe7\xaa\x9c\',\n    \'\xe7\xaa\x9d\', \'\xe7\xaa\x97\', \'\xe9\x81\x8d\', \'\xe8\xa3\x95\', \'\xe8\xa3\xa4\', \'\xe8\xa3\x99\', \'\xe8\xb0\xa2\', \'\xe8\xb0\xa3\', \'\xe8\xb0\xa6\', \'\xe5\xb1\x9e\', \'\xe5\xb1\xa1\', \'\xe5\xbc\xba\', \'\xe7\xb2\xa5\', \'\xe7\x96\x8f\', \'\xe9\x9a\x94\', \'\xe9\x9a\x99\', \'\xe7\xb5\xae\', \'\xe5\xab\x82\', \'\xe7\x99\xbb\', \'\xe7\xbc\x8e\',\n    \'\xe7\xbc\x93\', \'\xe7\xbc\x96\', \'\xe9\xaa\x97\', \'\xe7\xbc\x98\', \'\xe7\x91\x9e\', \'\xe9\xad\x82\', \'\xe8\x82\x86\', \'\xe6\x91\x84\', \'\xe6\x91\xb8\', \'\xe5\xa1\xab\', \'\xe6\x90\x8f\', \'\xe5\xa1\x8c\', \'\xe9\xbc\x93\', \'\xe6\x91\x86\', \'\xe6\x90\xba\', \'\xe6\x90\xac\', \'\xe6\x91\x87\', \'\xe6\x90\x9e\', \'\xe5\xa1\x98\', \'\xe6\x91\x8a\',\n    \'\xe8\x92\x9c\', \'\xe5\x8b\xa4\', \'\xe9\xb9\x8a\', \'\xe8\x93\x9d\', \'\xe5\xa2\x93\', \'\xe5\xb9\x95\', \'\xe8\x93\xac\', \'\xe8\x93\x84\', \'\xe8\x92\x99\', \'\xe8\x92\xb8\', \'\xe7\x8c\xae\', \'\xe7\xa6\x81\', \'\xe6\xa5\x9a\', \'\xe6\x83\xb3\', \'\xe6\xa7\x90\', \'\xe6\xa6\x86\', \'\xe6\xa5\xbc\', \'\xe6\xa6\x82\', \'\xe8\xb5\x96\', \'\xe9\x85\xac\',\n    \'\xe6\x84\x9f\', \'\xe7\xa2\x8d\', \'\xe7\xa2\x91\', \'\xe7\xa2\x8e\', \'\xe7\xa2\xb0\', \'\xe7\xa2\x97\', \'\xe7\xa2\x8c\', \'\xe9\x9b\xb7\', \'\xe9\x9b\xb6\', \'\xe9\x9b\xbe\', \'\xe9\x9b\xb9\', \'\xe8\xbe\x93\', \'\xe7\x9d\xa3\', \'\xe9\xbe\x84\', \'\xe9\x89\xb4\', \'\xe7\x9d\x9b\', \'\xe7\x9d\xa1\', \'\xe7\x9d\xac\', \'\xe9\x84\x99\', \'\xe6\x84\x9a\',\n    \'\xe6\x9a\x96\', \'\xe7\x9b\x9f\', \'\xe6\xad\x87\', \'\xe6\x9a\x97\', \'\xe7\x85\xa7\', \'\xe8\xb7\xa8\', \'\xe8\xb7\xb3\', \'\xe8\xb7\xaa\', \'\xe8\xb7\xaf\', \'\xe8\xb7\x9f\', \'\xe9\x81\xa3\', \'\xe8\x9b\xbe\', \'\xe8\x9c\x82\', \'\xe5\x97\x93\', \'\xe7\xbd\xae\', \'\xe7\xbd\xaa\', \'\xe7\xbd\xa9\', \'\xe9\x94\x99\', \'\xe9\x94\xa1\', \'\xe9\x94\xa3\',\n    \'\xe9\x94\xa4\', \'\xe9\x94\xa6\', \'\xe9\x94\xae\', \'\xe9\x94\xaf\', \'\xe7\x9f\xae\', \'\xe8\xbe\x9e\', \'\xe7\xa8\xa0\', \'\xe6\x84\x81\', \'\xe7\xad\xb9\', \'\xe7\xad\xbe\', \'\xe7\xae\x80\', \'\xe6\xaf\x81\', \'\xe8\x88\x85\', \'\xe9\xbc\xa0\', \'\xe5\x82\xac\', \'\xe5\x82\xbb\', \'\xe5\x83\x8f\', \'\xe8\xba\xb2\', \'\xe5\xbe\xae\', \'\xe6\x84\x88\',\n    \'\xe9\x81\xa5\', \'\xe8\x85\xb0\', \'\xe8\x85\xa5\', \'\xe8\x85\xb9\', \'\xe8\x85\xbe\', \'\xe8\x85\xbf\', \'\xe8\xa7\xa6\', \'\xe8\xa7\xa3\', \'\xe9\x85\xb1\', \'\xe7\x97\xb0\', \'\xe5\xbb\x89\', \'\xe6\x96\xb0\', \'\xe9\x9f\xb5\', \'\xe6\x84\x8f\', \'\xe7\xb2\xae\', \'\xe6\x95\xb0\', \'\xe7\x85\x8e\', \'\xe5\xa1\x91\', \'\xe6\x85\x88\', \'\xe7\x85\xa4\',\n    \'\xe7\x85\x8c\', \'\xe6\xbb\xa1\', \'\xe6\xbc\xa0\', \'\xe6\xba\x90\', \'\xe6\xbb\xa4\', \'\xe6\xbb\xa5\', \'\xe6\xbb\x94\', \'\xe6\xba\xaa\', \'\xe6\xba\x9c\', \'\xe6\xbb\x9a\', \'\xe6\xbb\xa8\', \'\xe7\xb2\xb1\', \'\xe6\xbb\xa9\', \'\xe6\x85\x8e\', \'\xe8\xaa\x89\', \'\xe5\xa1\x9e\', \'\xe8\xb0\xa8\', \'\xe7\xa6\x8f\', \'\xe7\xbe\xa4\', \'\xe6\xae\xbf\',\n    \'\xe8\xbe\x9f\', \'\xe9\x9a\x9c\', \'\xe5\xab\x8c\', \'\xe5\xab\x81\', \'\xe5\x8f\xa0\', \'\xe7\xbc\x9d\', \'\xe7\xbc\xa0\', \'\xe9\x9d\x99\', \'\xe7\xa2\xa7\', \'\xe7\x92\x83\', \'\xe5\xa2\x99\', \'\xe6\x92\x87\', \'\xe5\x98\x89\', \'\xe6\x91\xa7\', \'\xe6\x88\xaa\', \'\xe8\xaa\x93\', \'\xe5\xa2\x83\', \'\xe6\x91\x98\', \'\xe6\x91\x94\', \'\xe8\x81\x9a\',\n    \'\xe8\x94\xbd\', \'\xe6\x85\x95\', \'\xe6\x9a\xae\', \'\xe8\x94\x91\', \'\xe6\xa8\xa1\', \'\xe6\xa6\xb4\', \'\xe6\xa6\x9c\', \'\xe6\xa6\xa8\', \'\xe6\xad\x8c\', \'\xe9\x81\xad\', \'\xe9\x85\xb7\', \'\xe9\x85\xbf\', \'\xe9\x85\xb8\', \'\xe7\xa3\x81\', \'\xe6\x84\xbf\', \'\xe9\x9c\x80\', \'\xe5\xbc\x8a\', \'\xe8\xa3\xb3\', \'\xe9\xa2\x97\', \'\xe5\x97\xbd\',\n    \'\xe8\x9c\xbb\', \'\xe8\x9c\xa1\', \'\xe8\x9d\x87\', \'\xe8\x9c\x98\', \'\xe8\xb5\x9a\', \'\xe9\x94\xb9\', \'\xe9\x94\xbb\', \'\xe8\x88\x9e\', \'\xe7\xa8\xb3\', \'\xe7\xae\x97\', \'\xe7\xae\xa9\', \'\xe7\xae\xa1\', \'\xe5\x83\x9a\', \'\xe9\xbc\xbb\', \'\xe9\xad\x84\', \'\xe8\xb2\x8c\', \'\xe8\x86\x9c\', \'\xe8\x86\x8a\', \'\xe8\x86\x80\', \'\xe9\xb2\x9c\',\n    \'\xe7\x96\x91\', \'\xe9\xa6\x92\', \'\xe8\xa3\xb9\', \'\xe6\x95\xb2\', \'\xe8\xb1\xaa\', \'\xe8\x86\x8f\', \'\xe9\x81\xae\', \'\xe8\x85\x90\', \'\xe7\x98\xa6\', \'\xe8\xbe\xa3\', \'\xe7\xab\xad\', \'\xe7\xab\xaf\', \'\xe6\x97\x97\', \'\xe7\xb2\xbe\', \'\xe6\xad\x89\', \'\xe7\x86\x84\', \'\xe7\x86\x94\', \'\xe6\xbc\x86\', \'\xe6\xbc\x82\', \'\xe6\xbc\xab\',\n    \'\xe6\xbb\xb4\', \'\xe6\xbc\x94\', \'\xe6\xbc\x8f\', \'\xe6\x85\xa2\', \'\xe5\xaf\xa8\', \'\xe8\xb5\x9b\', \'\xe5\xaf\x9f\', \'\xe8\x9c\x9c\', \'\xe8\xb0\xb1\', \'\xe5\xab\xa9\', \'\xe7\xbf\xa0\', \'\xe7\x86\x8a\', \'\xe5\x87\xb3\', \'\xe9\xaa\xa1\', \'\xe7\xbc\xa9\', \'\xe6\x85\xa7\', \'\xe6\x92\x95\', \'\xe6\x92\x92\', \'\xe8\xb6\xa3\', \'\xe8\xb6\x9f\',\n    \'\xe6\x92\x91\', \'\xe6\x92\xad\', \'\xe6\x92\x9e\', \'\xe6\x92\xa4\', \'\xe5\xa2\x9e\', \'\xe8\x81\xaa\', \'\xe9\x9e\x8b\', \'\xe8\x95\x89\', \'\xe8\x94\xac\', \'\xe6\xa8\xaa\', \'\xe6\xa7\xbd\', \'\xe6\xa8\xb1\', \'\xe6\xa9\xa1\', \'\xe9\xa3\x98\', \'\xe9\x86\x8b\', \'\xe9\x86\x89\', \'\xe9\x9c\x87\', \'\xe9\x9c\x89\', \'\xe7\x9e\x92\', \'\xe9\xa2\x98\',\n    \'\xe6\x9a\xb4\', \'\xe7\x9e\x8e\', \'\xe5\xbd\xb1\', \'\xe8\xb8\xa2\', \'\xe8\xb8\x8f\', \'\xe8\xb8\xa9\', \'\xe8\xb8\xaa\', \'\xe8\x9d\xb6\', \'\xe8\x9d\xb4\', \'\xe5\x98\xb1\', \'\xe5\xa2\xa8\', \'\xe9\x95\x87\', \'\xe9\x9d\xa0\', \'\xe7\xa8\xbb\', \'\xe9\xbb\x8e\', \'\xe7\xa8\xbf\', \'\xe7\xa8\xbc\', \'\xe7\xae\xb1\', \'\xe7\xae\xad\', \'\xe7\xaf\x87\',\n    \'\xe5\x83\xb5\', \'\xe8\xba\xba\', \'\xe5\x83\xbb\', \'\xe5\xbe\xb7\', \'\xe8\x89\x98\', \'\xe8\x86\x9d\', \'\xe8\x86\x9b\', \'\xe7\x86\x9f\', \'\xe6\x91\xa9\', \'\xe9\xa2\x9c\', \'\xe6\xaf\x85\', \'\xe7\xb3\x8a\', \'\xe9\x81\xb5\', \'\xe6\xbd\x9c\', \'\xe6\xbd\xae\', \'\xe6\x87\x82\', \'\xe9\xa2\x9d\', \'\xe6\x85\xb0\', \'\xe5\x8a\x88\', \'\xe6\x93\x8d\',\n    \'\xe7\x87\x95\', \'\xe8\x96\xaf\', \'\xe8\x96\xaa\', \'\xe8\x96\x84\', \'\xe9\xa2\xa0\', \'\xe6\xa9\x98\', \'\xe6\x95\xb4\', \'\xe8\x9e\x8d\', \'\xe9\x86\x92\', \'\xe9\xa4\x90\', \'\xe5\x98\xb4\', \'\xe8\xb9\x84\', \'\xe5\x99\xa8\', \'\xe8\xb5\xa0\', \'\xe9\xbb\x98\', \'\xe9\x95\x9c\', \'\xe8\xb5\x9e\', \'\xe7\xaf\xae\', \'\xe9\x82\x80\', \'\xe8\xa1\xa1\',\n    \'\xe8\x86\xa8\', \'\xe9\x9b\x95\', \'\xe7\xa3\xa8\', \'\xe5\x87\x9d\', \'\xe8\xbe\xa8\', \'\xe8\xbe\xa9\', \'\xe7\xb3\x96\', \'\xe7\xb3\x95\', \'\xe7\x87\x83\', \'\xe6\xbe\xa1\', \'\xe6\xbf\x80\', \'\xe6\x87\x92\', \'\xe5\xa3\x81\', \'\xe9\x81\xbf\', \'\xe7\xbc\xb4\', \'\xe6\x88\xb4\', \'\xe6\x93\xa6\', \'\xe9\x9e\xa0\', \'\xe8\x97\x8f\', \'\xe9\x9c\x9c\',\n    \'\xe9\x9c\x9e\', \'\xe7\x9e\xa7\', \'\xe8\xb9\x88\', \'\xe8\x9e\xba\', \'\xe7\xa9\x97\', \'\xe7\xb9\x81\', \'\xe8\xbe\xab\', \'\xe8\xb5\xa2\', \'\xe7\xb3\x9f\', \'\xe7\xb3\xa0\', \'\xe7\x87\xa5\', \'\xe8\x87\x82\', \'\xe7\xbf\xbc\', \'\xe9\xaa\xa4\', \'\xe9\x9e\xad\', \'\xe8\xa6\x86\', \'\xe8\xb9\xa6\', \'\xe9\x95\xb0\', \'\xe7\xbf\xbb\', \'\xe9\xb9\xb0\',\n    \'\xe8\xad\xa6\', \'\xe6\x94\x80\', \'\xe8\xb9\xb2\', \'\xe9\xa2\xa4\', \'\xe7\x93\xa3\', \'\xe7\x88\x86\', \'\xe7\x96\x86\', \'\xe5\xa3\xa4\', \'\xe8\x80\x80\', \'\xe8\xba\x81\', \'\xe5\x9a\xbc\', \'\xe5\x9a\xb7\', \'\xe7\xb1\x8d\', \'\xe9\xad\x94\', \'\xe7\x81\x8c\', \'\xe8\xa0\xa2\', \'\xe9\x9c\xb8\', \'\xe9\x9c\xb2\', \'\xe5\x9b\x8a\', \'\xe7\xbd\x90\',\n    \'\xe5\x8c\x95\', \'\xe5\x88\x81\', \'\xe4\xb8\x90\', \'\xe6\xad\xb9\', \'\xe6\x88\x88\', \'\xe5\xa4\xad\', \'\xe4\xbb\x91\', \'\xe8\xae\xa5\', \'\xe5\x86\x97\', \'\xe9\x82\x93\', \'\xe8\x89\xbe\', \'\xe5\xa4\xaf\', \'\xe5\x87\xb8\', \'\xe5\x8d\xa2\', \'\xe5\x8f\xad\', \'\xe5\x8f\xbd\', \'\xe7\x9a\xbf\', \'\xe5\x87\xb9\', \'\xe5\x9b\x9a\', \'\xe7\x9f\xa2\',\n    \'\xe4\xb9\x8d\', \'\xe5\xb0\x94\', \'\xe5\x86\xaf\', \'\xe7\x8e\x84\', \'\xe9\x82\xa6\', \'\xe8\xbf\x82\', \'\xe9\x82\xa2\', \'\xe8\x8a\x8b\', \'\xe8\x8a\x8d\', \'\xe5\x90\x8f\', \'\xe5\xa4\xb7\', \'\xe5\x90\x81\', \'\xe5\x90\x95\', \'\xe5\x90\x86\', \'\xe5\xb1\xb9\', \'\xe5\xbb\xb7\', \'\xe8\xbf\x84\', \'\xe8\x87\xbc\', \'\xe4\xbb\xb2\', \'\xe4\xbc\xa6\',\n    \'\xe4\xbc\x8a\', \'\xe8\x82\x8b\', \'\xe6\x97\xad\', \'\xe5\x8c\x88\', \'\xe5\x87\xab\', \'\xe5\xa6\x86\', \'\xe4\xba\xa5\', \'\xe6\xb1\x9b\', \'\xe8\xae\xb3\', \'\xe8\xae\xb6\', \'\xe8\xae\xb9\', \'\xe8\xae\xbc\', \'\xe8\xaf\x80\', \'\xe5\xbc\x9b\', \'\xe9\x98\xb1\', \'\xe9\xa9\xae\', \'\xe9\xa9\xaf\', \'\xe7\xba\xab\', \'\xe7\x8e\x96\', \'\xe7\x8e\x9b\',\n    \'\xe9\x9f\xa7\', \'\xe6\x8a\xa0\', \'\xe6\x89\xbc\', \'\xe6\xb1\x9e\', \'\xe6\x89\xb3\', \'\xe6\x8a\xa1\', \'\xe5\x9d\x8e\', \'\xe5\x9d\x9e\', \'\xe6\x8a\x91\', \'\xe6\x8b\x9f\', \'\xe6\x8a\x92\', \'\xe8\x8a\x99\', \'\xe8\x8a\x9c\', \'\xe8\x8b\x87\', \'\xe8\x8a\xa5\', \'\xe8\x8a\xaf\', \'\xe8\x8a\xad\', \'\xe6\x9d\x96\', \'\xe6\x9d\x89\', \'\xe5\xb7\xab\',\n    \'\xe6\x9d\x88\', \'\xe7\x94\xab\', \'\xe5\x8c\xa3\', \'\xe8\xbd\xa9\', \'\xe5\x8d\xa4\', \'\xe8\x82\x96\', \'\xe5\x90\xb1\', \'\xe5\x90\xa0\', \'\xe5\x91\x95\', \'\xe5\x91\x90\', \'\xe5\x90\x9f\', \'\xe5\x91\x9b\', \'\xe5\x90\xbb\', \'\xe5\x90\xad\', \'\xe9\x82\x91\', \'\xe5\x9b\xa4\', \'\xe5\x90\xae\', \'\xe5\xb2\x96\', \'\xe7\x89\xa1\', \'\xe4\xbd\x91\',\n    \'\xe4\xbd\x83\', \'\xe4\xbc\xba\', \'\xe5\x9b\xb1\', \'\xe8\x82\x9b\', \'\xe8\x82\x98\', \'\xe7\x94\xb8\', \'\xe7\x8b\x88\', \'\xe9\xb8\xa0\', \'\xe5\xbd\xa4\', \'\xe7\x81\xb8\', \'\xe5\x88\xa8\', \'\xe5\xba\x87\', \'\xe5\x90\x9d\', \'\xe5\xba\x90\', \'\xe9\x97\xb0\', \'\xe5\x85\x91\', \'\xe7\x81\xbc\', \'\xe6\xb2\x90\', \'\xe6\xb2\x9b\', \'\xe6\xb1\xb0\',\n    \'\xe6\xb2\xa5\', \'\xe6\xb2\xa6\', \'\xe6\xb1\xb9\', \'\xe6\xb2\xa7\', \'\xe6\xb2\xaa\', \'\xe5\xbf\xb1\', \'\xe8\xaf\x85\', \'\xe8\xaf\x88\', \'\xe7\xbd\x95\', \'\xe5\xb1\x81\', \'\xe5\x9d\xa0\', \'\xe5\xa6\x93\', \'\xe5\xa7\x8a\', \'\xe5\xa6\x92\', \'\xe7\xba\xac\', \'\xe7\x8e\xab\', \'\xe5\x8d\xa6\', \'\xe5\x9d\xb7\', \'\xe5\x9d\xaf\', \'\xe6\x8b\x93\',\n    \'\xe5\x9d\xaa\', \'\xe5\x9d\xa4\', \'\xe6\x8b\x84\', \'\xe6\x8b\xa7\', \'\xe6\x8b\x82\', \'\xe6\x8b\x99\', \'\xe6\x8b\x87\', \'\xe6\x8b\x97\', \'\xe8\x8c\x89\', \'\xe6\x98\x94\', \'\xe8\x8b\x9b\', \'\xe8\x8b\xab\', \'\xe8\x8b\x9f\', \'\xe8\x8b\x9e\', \'\xe8\x8c\x81\', \'\xe8\x8b\x94\', \'\xe6\x9e\x89\', \'\xe6\x9e\xa2\', \'\xe6\x9e\x9a\', \'\xe6\x9e\xab\',\n    \'\xe6\x9d\xad\', \'\xe9\x83\x81\', \'\xe7\x9f\xbe\', \'\xe5\xa5\x88\', \'\xe5\xa5\x84\', \'\xe6\xae\xb4\', \'\xe6\xad\xa7\', \'\xe5\x8d\x93\', \'\xe6\x98\x99\', \'\xe5\x93\x8e\', \'\xe5\x92\x95\', \'\xe5\x91\xb5\', \'\xe5\x92\x99\', \'\xe5\x91\xbb\', \'\xe5\x92\x92\', \'\xe5\x92\x86\', \'\xe5\x92\x96\', \'\xe5\xb8\x95\', \'\xe8\xb4\xa6\', \'\xe8\xb4\xac\',\n    \'\xe8\xb4\xae\', \'\xe6\xb0\x9b\', \'\xe7\xa7\x89\', \'\xe5\xb2\xb3\', \'\xe4\xbe\xa0\', \'\xe4\xbe\xa5\', \'\xe4\xbe\xa3\', \'\xe4\xbe\x88\', \'\xe5\x8d\x91\', \'\xe5\x88\xbd\', \'\xe5\x88\xb9\', \'\xe8\x82\xb4\', \'\xe8\xa7\x85\', \'\xe5\xbf\xbf\', \'\xe7\x93\xae\', \'\xe8\x82\xae\', \'\xe8\x82\xaa\', \'\xe7\x8b\x9e\', \'\xe5\xba\x9e\', \'\xe7\x96\x9f\',\n    \'\xe7\x96\x99\', \'\xe7\x96\x9a\', \'\xe5\x8d\x92\', \'\xe6\xb0\x93\', \'\xe7\x82\xac\', \'\xe6\xb2\xbd\', \'\xe6\xb2\xae\', \'\xe6\xb3\xa3\', \'\xe6\xb3\x9e\', \'\xe6\xb3\x8c\', \'\xe6\xb2\xbc\', \'\xe6\x80\x94\', \'\xe6\x80\xaf\', \'\xe5\xae\xa0\', \'\xe5\xae\x9b\', \'\xe8\xa1\xa9\', \'\xe7\xa5\x88\', \'\xe8\xaf\xa1\', \'\xe5\xb8\x9a\', \'\xe5\xb1\x89\',\n    \'\xe5\xbc\xa7\', \'\xe5\xbc\xa5\', \'\xe9\x99\x8b\', \'\xe9\x99\x8c\', \'\xe5\x87\xbd\', \'\xe5\xa7\x86\', \'\xe8\x99\xb1\', \'\xe5\x8f\x81\', \'\xe7\xbb\x85\', \'\xe9\xa9\xb9\', \'\xe7\xbb\x8a\', \'\xe7\xbb\x8e\', \'\xe5\xa5\x91\', \'\xe8\xb4\xb0\', \'\xe7\x8e\xb7\', \'\xe7\x8e\xb2\', \'\xe7\x8f\x8a\', \'\xe6\x8b\xad\', \'\xe6\x8b\xb7\', \'\xe6\x8b\xb1\',\n    \'\xe6\x8c\x9f\', \'\xe5\x9e\xa2\', \'\xe5\x9e\x9b\', \'\xe6\x8b\xaf\', \'\xe8\x8d\x86\', \'\xe8\x8c\xb8\', \'\xe8\x8c\xac\', \'\xe8\x8d\x9a\', \'\xe8\x8c\xb5\', \'\xe8\x8c\xb4\', \'\xe8\x8d\x9e\', \'\xe8\x8d\xa0\', \'\xe8\x8d\xa4\', \'\xe8\x8d\xa7\', \'\xe8\x8d\x94\', \'\xe6\xa0\x88\', \'\xe6\x9f\x91\', \'\xe6\xa0\x85\', \'\xe6\x9f\xa0\', \'\xe6\x9e\xb7\',\n    \'\xe5\x8b\x83\', \'\xe6\x9f\xac\', \'\xe7\xa0\x82\', \'\xe6\xb3\xb5\', \'\xe7\xa0\x9a\', \'\xe9\xb8\xa5\', \'\xe8\xbd\xb4\', \'\xe9\x9f\xad\', \'\xe8\x99\x90\', \'\xe6\x98\xa7\', \'\xe7\x9b\xb9\', \'\xe5\x92\xa7\', \'\xe6\x98\xb5\', \'\xe6\x98\xad\', \'\xe7\x9b\x85\', \'\xe5\x8b\x8b\', \'\xe5\x93\x86\', \'\xe5\x92\xaa\', \'\xe5\x93\x9f\', \'\xe5\xb9\xbd\',\n    \'\xe9\x92\x99\', \'\xe9\x92\x9d\', \'\xe9\x92\xa0\', \'\xe9\x92\xa6\', \'\xe9\x92\xa7\', \'\xe9\x92\xae\', \'\xe6\xaf\xa1\', \'\xe6\xb0\xa2\', \'\xe7\xa7\x95\', \'\xe4\xbf\x8f\', \'\xe4\xbf\x84\', \'\xe4\xbf\x90\', \'\xe4\xbe\xaf\', \'\xe5\xbe\x8a\', \'\xe8\xa1\x8d\', \'\xe8\x83\x9a\', \'\xe8\x83\xa7\', \'\xe8\x83\x8e\', \'\xe7\x8b\xb0\', \'\xe9\xa5\xb5\',\n    \'\xe5\xb3\xa6\', \'\xe5\xa5\x95\', \'\xe5\x92\xa8\', \'\xe9\xa3\x92\', \'\xe9\x97\xba\', \'\xe9\x97\xbd\', \'\xe7\xb1\xbd\', \'\xe5\xa8\x84\', \'\xe7\x83\x81\', \'\xe7\x82\xab\', \'\xe6\xb4\xbc\', \'\xe6\x9f\x92\', \'\xe6\xb6\x8e\', \'\xe6\xb4\x9b\', \'\xe6\x81\x83\', \'\xe6\x81\x8d\', \'\xe6\x81\xac\', \'\xe6\x81\xa4\', \'\xe5\xae\xa6\', \'\xe8\xaf\xab\',\n    \'\xe8\xaf\xac\', \'\xe7\xa5\xa0\', \'\xe8\xaf\xb2\', \'\xe5\xb1\x8f\', \'\xe5\xb1\x8e\', \'\xe9\x80\x8a\', \'\xe9\x99\xa8\', \'\xe5\xa7\x9a\', \'\xe5\xa8\x9c\', \'\xe8\x9a\xa4\', \'\xe9\xaa\x87\', \'\xe8\x80\x98\', \'\xe8\x80\x99\', \'\xe7\xa7\xa6\', \'\xe5\x8c\xbf\', \'\xe5\x9f\x82\', \'\xe6\x8d\x82\', \'\xe6\x8d\x8d\', \'\xe8\xa2\x81\', \'\xe6\x8d\x8c\',\n    \'\xe6\x8c\xab\', \'\xe6\x8c\x9a\', \'\xe6\x8d\xa3\', \'\xe6\x8d\x85\', \'\xe5\x9f\x83\', \'\xe8\x80\xbf\', \'\xe8\x81\x82\', \'\xe8\x8d\xb8\', \'\xe8\x8e\xbd\', \'\xe8\x8e\xb1\', \'\xe8\x8e\x89\', \'\xe8\x8e\xb9\', \'\xe8\x8e\xba\', \'\xe6\xa2\x86\', \'\xe6\xa0\x96\', \'\xe6\xa1\xa6\', \'\xe6\xa0\x93\', \'\xe6\xa1\x85\', \'\xe6\xa1\xa9\', \'\xe8\xb4\xbe\',\n    \'\xe9\x85\x8c\', \'\xe7\xa0\xb8\', \'\xe7\xa0\xb0\', \'\xe7\xa0\xbe\', \'\xe6\xae\x89\', \'\xe9\x80\x9e\', \'\xe5\x93\xae\', \'\xe5\x94\xa0\', \'\xe5\x93\xba\', \'\xe5\x89\x94\', \'\xe8\x9a\x8c\', \'\xe8\x9a\x9c\', \'\xe7\x95\x94\', \'\xe8\x9a\xa3\', \'\xe8\x9a\xaa\', \'\xe8\x9a\x93\', \'\xe5\x93\xa9\', \'\xe5\x9c\x83\', \'\xe9\xb8\xaf\', \'\xe5\x94\x81\',\n    \'\xe5\x93\xbc\', \'\xe5\x94\x86\', \'\xe5\xb3\xad\', \'\xe5\x94\xa7\', \'\xe5\xb3\xbb\', \'\xe8\xb5\x82\', \'\xe8\xb5\x83\', \'\xe9\x92\xbe\', \'\xe9\x93\x86\', \'\xe6\xb0\xa8\', \'\xe7\xa7\xab\', \'\xe7\xac\x86\', \'\xe4\xbf\xba\', \'\xe8\xb5\x81\', \'\xe5\x80\x94\', \'\xe6\xae\xb7\', \'\xe8\x80\xb8\', \'\xe8\x88\x80\', \'\xe8\xb1\xba\', \'\xe8\xb1\xb9\',\n    \'\xe9\xa2\x81\', \'\xe8\x83\xaf\', \'\xe8\x83\xb0\', \'\xe8\x84\x90\', \'\xe8\x84\x93\', \'\xe9\x80\x9b\', \'\xe5\x8d\xbf\', \'\xe9\xb8\xb5\', \'\xe9\xb8\xb3\', \'\xe9\xa6\x81\', \'\xe5\x87\x8c\', \'\xe5\x87\x84\', \'\xe8\xa1\xb7\', \'\xe9\x83\xad\', \'\xe6\x96\x8b\', \'\xe7\x96\xb9\', \'\xe7\xb4\x8a\', \'\xe7\x93\xb7\', \'\xe7\xbe\x94\', \'\xe7\x83\x99\',\n    \'\xe6\xb5\xa6\', \'\xe6\xb6\xa1\', \'\xe6\xb6\xa3\', \'\xe6\xb6\xa4\', \'\xe6\xb6\xa7\', \'\xe6\xb6\x95\', \'\xe6\xb6\xa9\', \'\xe6\x82\x8d\', \'\xe6\x82\xaf\', \'\xe7\xaa\x8d\', \'\xe8\xaf\xba\', \'\xe8\xaf\xbd\', \'\xe8\xa2\x92\', \'\xe8\xb0\x86\', \'\xe7\xa5\x9f\', \'\xe6\x81\x95\', \'\xe5\xa8\xa9\', \'\xe9\xaa\x8f\', \'\xe7\x90\x90\', \'\xe9\xba\xb8\',\n    \'\xe7\x90\x89\', \'\xe7\x90\x85\', \'\xe6\x8e\xaa\', \'\xe6\x8d\xba\', \'\xe6\x8d\xb6\', \'\xe8\xb5\xa6\', \'\xe5\x9f\xa0\', \'\xe6\x8d\xbb\', \'\xe6\x8e\x90\', \'\xe6\x8e\x82\', \'\xe6\x8e\x96\', \'\xe6\x8e\xb7\', \'\xe6\x8e\xb8\', \'\xe6\x8e\xba\', \'\xe5\x8b\x98\', \'\xe8\x81\x8a\', \'\xe5\xa8\xb6\', \'\xe8\x8f\xb1\', \'\xe8\x8f\xb2\', \'\xe8\x90\x8e\',\n    \'\xe8\x8f\xa9\', \'\xe8\x90\xa4\', \'\xe4\xb9\xbe\', \'\xe8\x90\xa7\', \'\xe8\x90\xa8\', \'\xe8\x8f\x87\', \'\xe5\xbd\xac\', \'\xe6\xa2\x97\', \'\xe6\xa2\xa7\', \'\xe6\xa2\xad\', \'\xe6\x9b\xb9\', \'\xe9\x85\x9d\', \'\xe9\x85\x97\', \'\xe5\x8e\xa2\', \'\xe7\xa1\x85\', \'\xe7\xa1\x95\', \'\xe5\xa5\xa2\', \'\xe7\x9b\x94\', \'\xe5\x8c\xbe\', \'\xe9\xa2\x85\',\n    \'\xe5\xbd\xaa\', \'\xe7\x9c\xb6\', \'\xe6\x99\xa4\', \'\xe6\x9b\xbc\', \'\xe6\x99\xa6\', \'\xe5\x86\x95\', \'\xe5\x95\xa1\', \'\xe7\x95\xa6\', \'\xe8\xb6\xbe\', \'\xe5\x95\x83\', \'\xe8\x9b\x86\', \'\xe8\x9a\xaf\', \'\xe8\x9b\x89\', \'\xe8\x9b\x80\', \'\xe5\x94\xac\', \'\xe5\x94\xbe\', \'\xe5\x95\xa4\', \'\xe5\x95\xa5\', \'\xe5\x95\xb8\', \'\xe5\xb4\x8e\',\n    \'\xe9\x80\xbb\', \'\xe5\xb4\x94\', \'\xe5\xb4\xa9\', \'\xe5\xa9\xb4\', \'\xe8\xb5\x8a\', \'\xe9\x93\x90\', \'\xe9\x93\x9b\', \'\xe9\x93\x9d\', \'\xe9\x93\xa1\', \'\xe9\x93\xa3\', \'\xe9\x93\xad\', \'\xe7\x9f\xab\', \'\xe7\xa7\xb8\', \'\xe7\xa7\xbd\', \'\xe7\xac\x99\', \'\xe7\xac\xa4\', \'\xe5\x81\x8e\', \'\xe5\x82\x80\', \'\xe8\xba\xaf\', \'\xe5\x85\x9c\',\n    \'\xe8\xa1\x85\', \'\xe5\xbe\x98\', \'\xe5\xbe\x99\', \'\xe8\x88\xb6\', \'\xe8\x88\xb7\', \'\xe8\x88\xb5\', \'\xe6\x95\x9b\', \'\xe7\xbf\x8e\', \'\xe8\x84\xaf\', \'\xe9\x80\xb8\', \'\xe5\x87\xb0\', \'\xe7\x8c\x96\', \'\xe7\xa5\xad\', \'\xe7\x83\xb9\', \'\xe5\xba\xb6\', \'\xe5\xba\xb5\', \'\xe7\x97\x8a\', \'\xe9\x98\x8e\', \'\xe9\x98\x90\', \'\xe7\x9c\xb7\',\n    \'\xe7\x84\x8a\', \'\xe7\x84\x95\', \'\xe9\xb8\xbf\', \'\xe6\xb6\xaf\', \'\xe6\xb7\x91\', \'\xe6\xb7\x8c\', \'\xe6\xb7\xae\', \'\xe6\xb7\x86\', \'\xe6\xb8\x8a\', \'\xe6\xb7\xab\', \'\xe6\xb7\xb3\', \'\xe6\xb7\xa4\', \'\xe6\xb7\x80\', \'\xe6\xb6\xae\', \'\xe6\xb6\xb5\', \'\xe6\x83\xa6\', \'\xe6\x82\xb4\', \'\xe6\x83\x8b\', \'\xe5\xaf\x82\', \'\xe7\xaa\x92\',\n    \'\xe8\xb0\x8d\', \'\xe8\xb0\x90\', \'\xe8\xa3\x86\', \'\xe8\xa2\xb1\', \'\xe7\xa5\xb7\', \'\xe8\xb0\x92\', \'\xe8\xb0\x93\', \'\xe8\xb0\x9a\', \'\xe5\xb0\x89\', \'\xe5\xa0\x95\', \'\xe9\x9a\x85\', \'\xe5\xa9\x89\', \'\xe9\xa2\x87\', \'\xe7\xbb\xb0\', \'\xe7\xbb\xb7\', \'\xe7\xbb\xbc\', \'\xe7\xbb\xbd\', \'\xe7\xbc\x80\', \'\xe5\xb7\xa2\', \'\xe7\x90\xb3\',\n    \'\xe7\x90\xa2\', \'\xe7\x90\xbc\', \'\xe6\x8f\x8d\', \'\xe5\xa0\xb0\', \'\xe6\x8f\xa9\', \'\xe6\x8f\xbd\', \'\xe6\x8f\x96\', \'\xe5\xbd\xad\', \'\xe6\x8f\xa3\', \'\xe6\x90\x80\', \'\xe6\x90\x93\', \'\xe5\xa3\xb9\', \'\xe6\x90\x94\', \'\xe8\x91\xab\', \'\xe5\x8b\x9f\', \'\xe8\x92\x8b\', \'\xe8\x92\x82\', \'\xe9\x9f\xa9\', \'\xe6\xa3\xb1\', \'\xe6\xa4\xb0\',\n    \'\xe7\x84\x9a\', \'\xe6\xa4\x8e\', \'\xe6\xa3\xba\', \'\xe6\xa6\x94\', \'\xe6\xa4\xad\', \'\xe7\xb2\x9f\', \'\xe6\xa3\x98\', \'\xe9\x85\xa3\', \'\xe9\x85\xa5\', \'\xe7\xa1\x9d\', \'\xe7\xa1\xab\', \'\xe9\xa2\x8a\', \'\xe9\x9b\xb3\', \'\xe7\xbf\x98\', \'\xe5\x87\xbf\', \'\xe6\xa3\xa0\', \'\xe6\x99\xb0\', \'\xe9\xbc\x8e\', \'\xe5\x96\xb3\', \'\xe9\x81\x8f\',\n    \'\xe6\x99\xbe\', \'\xe7\x95\xb4\', \'\xe8\xb7\x8b\', \'\xe8\xb7\x9b\', \'\xe8\x9b\x94\', \'\xe8\x9c\x92\', \'\xe8\x9b\xa4\', \'\xe9\xb9\x83\', \'\xe5\x96\xbb\', \'\xe5\x95\xbc\', \'\xe5\x96\xa7\', \'\xe5\xb5\x8c\', \'\xe8\xb5\x8b\', \'\xe8\xb5\x8e\', \'\xe8\xb5\x90\', \'\xe9\x94\x89\', \'\xe9\x94\x8c\', \'\xe7\x94\xa5\', \'\xe6\x8e\xb0\', \'\xe6\xb0\xae\',\n    \'\xe6\xb0\xaf\', \'\xe9\xbb\x8d\', \'\xe7\xad\x8f\', \'\xe7\x89\x8d\', \'\xe7\xb2\xa4\', \'\xe9\x80\xbe\', \'\xe8\x85\x8c\', \'\xe8\x85\x8b\', \'\xe8\x85\x95\', \'\xe7\x8c\xa9\', \'\xe7\x8c\xac\', \'\xe6\x83\xab\', \'\xe6\x95\xa6\', \'\xe7\x97\x98\', \'\xe7\x97\xa2\', \'\xe7\x97\xaa\', \'\xe7\xab\xa3\', \'\xe7\xbf\x94\', \'\xe5\xa5\xa0\', \'\xe9\x81\x82\',\n    \'\xe7\x84\x99\', \'\xe6\xbb\x9e\', \'\xe6\xb9\x98\', \'\xe6\xb8\xa4\', \'\xe6\xb8\xba\', \'\xe6\xba\x83\', \'\xe6\xba\x85\', \'\xe6\xb9\x83\', \'\xe6\x84\x95\', \'\xe6\x83\xb6\', \'\xe5\xaf\x93\', \'\xe7\xaa\x96\', \'\xe7\xaa\x98\', \'\xe9\x9b\x87\', \'\xe8\xb0\xa4\', \'\xe7\x8a\x80\', \'\xe9\x9a\x98\', \'\xe5\xaa\x92\', \'\xe5\xaa\x9a\', \'\xe5\xa9\xbf\',\n    \'\xe7\xbc\x85\', \'\xe7\xbc\x86\', \'\xe7\xbc\x94\', \'\xe7\xbc\x95\', \'\xe9\xaa\x9a\', \'\xe7\x91\x9f\', \'\xe9\xb9\x89\', \'\xe7\x91\xb0\', \'\xe6\x90\xaa\', \'\xe8\x81\x98\', \'\xe6\x96\x9f\', \'\xe9\x9d\xb4\', \'\xe9\x9d\xb6\', \'\xe8\x93\x96\', \'\xe8\x92\xbf\', \'\xe8\x92\xb2\', \'\xe8\x93\x89\', \'\xe6\xa5\x94\', \'\xe6\xa4\xbf\', \'\xe6\xa5\xb7\',\n    \'\xe6\xa6\x84\', \'\xe6\xa5\x9e\', \'\xe6\xa5\xa3\', \'\xe9\x85\xaa\', \'\xe7\xa2\x98\', \'\xe7\xa1\xbc\', \'\xe7\xa2\x89\', \'\xe8\xbe\x90\', \'\xe8\xbe\x91\', \'\xe9\xa2\x91\', \'\xe7\x9d\xb9\', \'\xe7\x9d\xa6\', \'\xe7\x9e\x84\', \'\xe5\x97\x9c\', \'\xe5\x97\xa6\', \'\xe6\x9a\x87\', \'\xe7\x95\xb8\', \'\xe8\xb7\xb7\', \'\xe8\xb7\xba\', \'\xe8\x9c\x88\',\n    \'\xe8\x9c\x97\', \'\xe8\x9c\x95\', \'\xe8\x9b\xb9\', \'\xe5\x97\x85\', \'\xe5\x97\xa1\', \'\xe5\x97\xa4\', \'\xe7\xbd\xb2\', \'\xe8\x9c\x80\', \'\xe5\xb9\x8c\', \'\xe9\x94\x9a\', \'\xe9\x94\xa5\', \'\xe9\x94\xa8\', \'\xe9\x94\xad\', \'\xe9\x94\xb0\', \'\xe7\xa8\x9a\', \'\xe9\xa2\x93\', \'\xe7\xad\xb7\', \'\xe9\xad\x81\', \'\xe8\xa1\x99\', \'\xe8\x85\xbb\',\n    \'\xe8\x85\xae\', \'\xe8\x85\xba\', \'\xe9\xb9\x8f\', \'\xe8\x82\x84\', \'\xe7\x8c\xbf\', \'\xe9\xa2\x96\', \'\xe7\x85\x9e\', \'\xe9\x9b\x8f\', \'\xe9\xa6\x8d\', \'\xe9\xa6\x8f\', \'\xe7\xa6\x80\', \'\xe7\x97\xb9\', \'\xe5\xbb\x93\', \'\xe7\x97\xb4\', \'\xe9\x9d\x96\', \'\xe8\xaa\x8a\', \'\xe6\xbc\x93\', \'\xe6\xba\xa2\', \'\xe6\xba\xaf\', \'\xe6\xba\xb6\',\n    \'\xe6\xbb\x93\', \'\xe6\xba\xba\', \'\xe5\xaf\x9e\', \'\xe7\xaa\xa5\', \'\xe7\xaa\x9f\', \'\xe5\xaf\x9d\', \'\xe8\xa4\x82\', \'\xe8\xa3\xb8\', \'\xe8\xb0\xac\', \'\xe5\xaa\xb3\', \'\xe5\xab\x89\', \'\xe7\xbc\x9a\', \'\xe7\xbc\xa4\', \'\xe5\x89\xbf\', \'\xe8\xb5\x98\', \'\xe7\x86\xac\', \'\xe8\xb5\xab\', \'\xe8\x94\xab\', \'\xe6\x91\xb9\', \'\xe8\x94\x93\',\n    \'\xe8\x94\x97\', \'\xe8\x94\xbc\', \'\xe7\x86\x99\', \'\xe8\x94\x9a\', \'\xe5\x85\xa2\', \'\xe6\xa6\x9b\', \'\xe6\xa6\x95\', \'\xe9\x85\xb5\', \'\xe7\xa2\x9f\', \'\xe7\xa2\xb4\', \'\xe7\xa2\xb1\', \'\xe7\xa2\xb3\', \'\xe8\xbe\x95\', \'\xe8\xbe\x96\', \'\xe9\x9b\x8c\', \'\xe5\xa2\x85\', \'\xe5\x98\x81\', \'\xe8\xb8\x8a\', \'\xe8\x9d\x89\', \'\xe5\x98\x80\',\n    \'\xe5\xb9\x94\', \'\xe9\x95\x80\', \'\xe8\x88\x94\', \'\xe7\x86\x8f\', \'\xe7\xae\x8d\', \'\xe7\xae\x95\', \'\xe7\xae\xab\', \'\xe8\x88\x86\', \'\xe5\x83\xa7\', \'\xe5\xad\xb5\', \'\xe7\x98\xa9\', \'\xe7\x98\x9f\', \'\xe5\xbd\xb0\', \'\xe7\xb2\xb9\', \'\xe6\xbc\xb1\', \'\xe6\xbc\xa9\', \'\xe6\xbc\xbe\', \'\xe6\x85\xb7\', \'\xe5\xaf\xa1\', \'\xe5\xaf\xa5\',\n    \'\xe8\xb0\xad\', \'\xe8\xa4\x90\', \'\xe8\xa4\xaa\', \'\xe9\x9a\xa7\', \'\xe5\xab\xa1\', \'\xe7\xbc\xa8\', \'\xe6\x92\xb5\', \'\xe6\x92\xa9\', \'\xe6\x92\xae\', \'\xe6\x92\xac\', \'\xe6\x93\x92\', \'\xe5\xa2\xa9\', \'\xe6\x92\xb0\', \'\xe9\x9e\x8d\', \'\xe8\x95\x8a\', \'\xe8\x95\xb4\', \'\xe6\xa8\x8a\', \'\xe6\xa8\x9f\', \'\xe6\xa9\x84\', \'\xe6\x95\xb7\',\n    \'\xe8\xb1\x8c\', \'\xe9\x86\x87\', \'\xe7\xa3\x95\', \'\xe7\xa3\x85\', \'\xe7\xa2\xbe\', \'\xe6\x86\x8b\', \'\xe5\x98\xb6\', \'\xe5\x98\xb2\', \'\xe5\x98\xb9\', \'\xe8\x9d\xa0\', \'\xe8\x9d\x8e\', \'\xe8\x9d\x8c\', \'\xe8\x9d\x97\', \'\xe8\x9d\x99\', \'\xe5\x98\xbf\', \'\xe5\xb9\xa2\', \'\xe9\x95\x8a\', \'\xe9\x95\x90\', \'\xe7\xa8\xbd\', \'\xe7\xaf\x93\',\n    \'\xe8\x86\x98\', \'\xe9\xb2\xa4\', \'\xe9\xb2\xab\', \'\xe8\xa4\x92\', \'\xe7\x98\xaa\', \'\xe7\x98\xa4\', \'\xe7\x98\xab\', \'\xe5\x87\x9b\', \'\xe6\xbe\x8e\', \'\xe6\xbd\xad\', \'\xe6\xbd\xa6\', \'\xe6\xbe\xb3\', \'\xe6\xbd\x98\', \'\xe6\xbe\x88\', \'\xe6\xbe\x9c\', \'\xe6\xbe\x84\', \'\xe6\x86\x94\', \'\xe6\x87\x8a\', \'\xe6\x86\x8e\', \'\xe7\xbf\xa9\',\n    \'\xe8\xa4\xa5\', \'\xe8\xb0\xb4\', \'\xe9\xb9\xa4\', \'\xe6\x86\xa8\', \'\xe5\xb1\xa5\', \'\xe5\xac\x89\', \'\xe8\xb1\xab\', \'\xe7\xbc\xad\', \'\xe6\x92\xbc\', \'\xe6\x93\x82\', \'\xe6\x93\x85\', \'\xe8\x95\xbe\', \'\xe8\x96\x9b\', \'\xe8\x96\x87\', \'\xe6\x93\x8e\', \'\xe7\xbf\xb0\', \'\xe5\x99\xa9\', \'\xe6\xa9\xb1\', \'\xe6\xa9\x99\', \'\xe7\x93\xa2\',\n    \'\xe8\x9f\xa5\', \'\xe9\x9c\x8d\', \'\xe9\x9c\x8e\', \'\xe8\xbe\x99\', \'\xe5\x86\x80\', \'\xe8\xb8\xb1\', \'\xe8\xb9\x82\', \'\xe8\x9f\x86\', \'\xe8\x9e\x83\', \'\xe8\x9e\x9f\', \'\xe5\x99\xaa\', \'\xe9\xb9\xa6\', \'\xe9\xbb\x94\', \'\xe7\xa9\x86\', \'\xe7\xaf\xa1\', \'\xe7\xaf\xb7\', \'\xe7\xaf\x99\', \'\xe7\xaf\xb1\', \'\xe5\x84\x92\', \'\xe8\x86\xb3\',\n    \'\xe9\xb2\xb8\', \'\xe7\x98\xbe\', \'\xe7\x98\xb8\', \'\xe7\xb3\x99\', \'\xe7\x87\x8e\', \'\xe6\xbf\x92\', \'\xe6\x86\xbe\', \'\xe6\x87\x88\', \'\xe7\xaa\xbf\', \'\xe7\xbc\xb0\', \'\xe5\xa3\x95\', \'\xe8\x97\x90\', \'\xe6\xaa\xac\', \'\xe6\xaa\x90\', \'\xe6\xaa\xa9\', \'\xe6\xaa\x80\', \'\xe7\xa4\x81\', \'\xe7\xa3\xb7\', \'\xe4\xba\x86\', \'\xe7\x9e\xac\',\n    \'\xe7\x9e\xb3\', \'\xe7\x9e\xaa\', \'\xe6\x9b\x99\', \'\xe8\xb9\x8b\', \'\xe8\x9f\x8b\', \'\xe8\x9f\x80\', \'\xe5\x9a\x8e\', \'\xe8\xb5\xa1\', \'\xe9\x95\xa3\', \'\xe9\xad\x8f\', \'\xe7\xb0\x87\', \'\xe5\x84\xa1\', \'\xe5\xbe\xbd\', \'\xe7\x88\xb5\', \'\xe6\x9c\xa6\', \'\xe8\x87\x8a\', \'\xe9\xb3\x84\', \'\xe7\xb3\x9c\', \'\xe7\x99\x8c\', \'\xe6\x87\xa6\',\n    \'\xe8\xb1\x81\', \'\xe8\x87\x80\', \'\xe8\x97\x95\', \'\xe8\x97\xa4\', \'\xe7\x9e\xbb\', \'\xe5\x9a\xa3\', \'\xe9\xb3\x8d\', \'\xe7\x99\x9e\', \'\xe7\x80\x91\', \'\xe8\xa5\x9f\', \'\xe7\x92\xa7\', \'\xe6\x88\xb3\', \'\xe6\x94\x92\', \'\xe5\xad\xbd\', \'\xe8\x98\x91\', \'\xe8\x97\xbb\', \'\xe9\xb3\x96\', \'\xe8\xb9\xad\', \'\xe8\xb9\xac\', \'\xe7\xb0\xb8\',\n    \'\xe7\xb0\xbf\', \'\xe8\x9f\xb9\', \'\xe9\x9d\xa1\', \'\xe7\x99\xa3\', \'\xe7\xbe\xb9\', \'\xe9\xac\x93\', \'\xe6\x94\x98\', \'\xe8\xa0\x95\', \'\xe5\xb7\x8d\', \'\xe9\xb3\x9e\', \'\xe7\xb3\xaf\', \'\xe8\xad\xac\', \'\xe9\x9c\xb9\', \'\xe8\xba\x8f\', \'\xe9\xab\x93\', \'\xe8\x98\xb8\', \'\xe9\x95\xb6\', \'\xe7\x93\xa4\', \'\xe7\x9f\x97\', \'\xe5\x9c\xb3\',\n    \'\xe7\x8f\x8f\', \'\xe8\x95\x99\', \'\xe6\x97\xbb\', \'\xe6\xb6\x85\', \'\xe6\x94\xb8\', \'\xe5\x98\x9b\', \'\xe9\x86\xaa\', \'\xe7\xbc\xaa\', \'\xe5\x99\x97\', \'\xe7\x9e\xa8\', \'\xe9\x9d\xb3\', \'\xe5\xb8\xb7\', \'\xe5\xbe\xa8\',\n]\n\nFLOAT = [\'.\']\n\nSIMPLE_CATEGORY_MODEL = dict(\n    NUMERIC=NUMBER,\n    ALPHANUMERIC=NUMBER + ALPHA_LOWER + ALPHA_UPPER,\n    ALPHANUMERIC_LOWER=NUMBER + ALPHA_LOWER,\n    ALPHANUMERIC_UPPER=NUMBER + ALPHA_UPPER,\n    ALPHABET_LOWER=ALPHA_LOWER,\n    ALPHABET_UPPER=ALPHA_UPPER,\n    ALPHABET=ALPHA_LOWER + ALPHA_UPPER,\n    ARITHMETIC=NUMBER + ARITHMETIC,\n    FLOAT=NUMBER + FLOAT,\n    CHS_3500=CHINESE_3500,\n    ALPHANUMERIC_MIX_CHS_3500_LOWER=NUMBER + ALPHA_LOWER + CHINESE_3500\n)\n\n\ndef encode_maps(source):\n    return {category: i for i, category in enumerate(source, 0)}\n\n\n@unique\nclass ModelScene(Enum):\n    """"""\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x9c\xba\xe6\x99\xaf\xe6\x9e\x9a\xe4\xb8\xbe""""""\n    Classification = \'Classification\'\n\n\n@unique\nclass ModelField(Enum):\n    """"""\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xb1\xbb\xe5\x88\xab\xe6\x9e\x9a\xe4\xb8\xbe""""""\n    Image = \'Image\'\n    Text = \'Text\'\n\n\nMODEL_SCENE_MAP = {\n    \'Classification\': ModelScene.Classification\n}\n\nMODEL_FIELD_MAP = {\n    \'Image\': ModelField.Image,\n    \'Text\': ModelField.Text\n}\n\n\nclass ModelConfig(object):\n\n    @staticmethod\n    def category_extract(param):\n        if isinstance(param, list):\n            return param\n        if isinstance(param, str):\n            if param in SIMPLE_CATEGORY_MODEL.keys():\n                return SIMPLE_CATEGORY_MODEL.get(param)\n            raise ValueError(\n                ""Category set configuration error, customized category set should be list type""\n            )\n\n    @property\n    def model_conf(self) -> dict:\n        if self.model_content:\n            return self.model_content\n        with open(self.model_conf_path, \'r\', encoding=""utf-8"") as sys_fp:\n            sys_stream = sys_fp.read()\n            return yaml.load(sys_stream, Loader=yaml.SafeLoader)\n\n    def __init__(self, model_conf_path=None, model_content=None):\n        self.model_content = model_content\n        self.model_path = model_conf_path\n        self.graph_path = os.path.dirname(self.model_path) if model_conf_path else """"\n        self.model_conf_path = model_conf_path\n        self.model_conf_demo = \'model_demo.yaml\'\n\n        """"""MODEL""""""\n        self.model_root: dict = self.model_conf[\'Model\']\n        self.model_name: str = self.model_root.get(\'ModelName\')\n        self.model_version: float = self.model_root.get(\'Version\')\n        self.model_version = self.model_version if self.model_version else 1.0\n        self.model_field_param: str = self.model_root.get(\'ModelField\')\n        self.model_field: ModelField = self.param_convert(\n            source=self.model_field_param,\n            param_map=MODEL_FIELD_MAP,\n            text=""Current model field ({model_field}) is not supported"".format(model_field=self.model_field_param),\n            code=50002\n        )\n\n        self.model_scene_param: str = self.model_root.get(\'ModelScene\')\n\n        self.model_scene: ModelScene = self.param_convert(\n            source=self.model_scene_param,\n            param_map=MODEL_SCENE_MAP,\n            text=""Current model scene ({model_scene}) is not supported"".format(model_scene=self.model_scene_param),\n            code=50001\n        )\n\n        """"""SYSTEM""""""\n        self.checkpoint_tag = \'checkpoint\'\n        self.system_root: dict = self.model_conf[\'System\']\n        self.memory_usage: float = self.system_root.get(\'MemoryUsage\')\n\n        """"""FIELD PARAM - IMAGE""""""\n        self.field_root: dict = self.model_conf[\'FieldParam\']\n        self.category_param = self.field_root.get(\'Category\')\n        self.category_value = self.category_extract(self.category_param)\n        if self.category_value is None:\n            raise Exception(\n                ""The category set type does not exist, there is no category set named {}"".format(self.category_param),\n            )\n        self.category: list = SPACE_TOKEN + self.category_value\n        self.category_num: int = len(self.category)\n        self.image_channel: int = self.field_root.get(\'ImageChannel\')\n        self.image_width: int = self.field_root.get(\'ImageWidth\')\n        self.image_height: int = self.field_root.get(\'ImageHeight\')\n        self.resize: list = self.field_root.get(\'Resize\')\n        self.output_split = self.field_root.get(\'OutputSplit\')\n        self.output_split = self.output_split if self.output_split else """"\n        self.corp_params = self.field_root.get(\'CorpParams\')\n        self.output_coord = self.field_root.get(\'OutputCoord\')\n        self.batch_model = self.field_root.get(\'BatchModel\')\n\n        """"""PRETREATMENT""""""\n        self.pretreatment_root = self.model_conf.get(\'Pretreatment\')\n        self.pre_binaryzation = self.get_var(self.pretreatment_root, \'Binaryzation\', -1)\n        self.pre_replace_transparent = self.get_var(self.pretreatment_root, \'ReplaceTransparent\', True)\n        self.pre_horizontal_stitching = self.get_var(self.pretreatment_root, \'HorizontalStitching\', False)\n        self.pre_concat_frames = self.get_var(self.pretreatment_root, \'ConcatFrames\', -1)\n        self.pre_blend_frames = self.get_var(self.pretreatment_root, \'BlendFrames\', -1)\n        self.exec_map = self.pretreatment_root.get(\'ExecuteMap\')\n\n        """"""COMPILE_MODEL""""""\n        if self.graph_path:\n            self.compile_model_path = os.path.join(self.graph_path, \'{}.tflite\'.format(self.model_name))\n            if not os.path.exists(self.compile_model_path):\n                if not os.path.exists(self.graph_path):\n                    os.makedirs(self.graph_path)\n                raise ValueError(\n                    \'{} not found, please put the trained model in the current directory.\'.format(self.compile_model_path)\n                )\n            else:\n                self.model_exists = True\n        else:\n            self.model_exists = True if self.model_content else False\n            self.compile_model_path = """"\n\n    @staticmethod\n    def param_convert(source, param_map: dict, text, code, default=None):\n        if source is None:\n            return default\n        if source not in param_map.keys():\n            raise Exception(text)\n        return param_map[source]\n\n    def size_match(self, size_str):\n        return size_str == self.size_string\n\n    @staticmethod\n    def get_var(src: dict, name: str, default=None):\n        if not src:\n            return default\n        return src.get(name)\n\n    @property\n    def size_string(self):\n        return ""{}x{}"".format(self.image_width, self.image_height)\n\n\nclass Model(object):\n    model_conf: ModelConfig\n    graph_bytes: object\n\n    def __init__(self, conf_path: str, source_bytes: bytes = None, key=None):\n        if conf_path:\n            self.model_conf = ModelConfig(model_conf_path=conf_path)\n            self.graph_bytes = None\n        if source_bytes:\n            model_conf, self.graph_bytes = self.parse_model(source_bytes, key)\n            self.model_conf = ModelConfig(model_content=model_conf)\n\n    @staticmethod\n    def parse_model(source_bytes: bytes, key=None):\n        split_tag = b\'-#||#-\'\n        if not key:\n            key = [b""_____"" + i.encode(""utf8"") + b""_____"" for i in ""&coriander""]\n        if isinstance(key, str):\n            key = [b""_____"" + i.encode(""utf8"") + b""_____"" for i in key]\n        key_len_int = len(key)\n        model_bytes_list = []\n        graph_bytes_list = []\n        slice_index = source_bytes.index(key[0])\n        split_tag_len = len(split_tag)\n        slice_0 = source_bytes[0: slice_index].split(split_tag)\n        model_slice_len = len(slice_0[1])\n        graph_slice_len = len(slice_0[0])\n        slice_len = split_tag_len + model_slice_len + graph_slice_len\n\n        for i in range(key_len_int - 1):\n            slice_index = source_bytes.index(key[i])\n            slices = source_bytes[slice_index - slice_len: slice_index].split(split_tag)\n            model_bytes_list.append(slices[1])\n            graph_bytes_list.append(slices[0])\n        slices = source_bytes.split(key[-2])[1][:-len(key[-1])].split(split_tag)\n\n        model_bytes_list.append(slices[1])\n        graph_bytes_list.append(slices[0])\n        model_bytes = b"""".join(model_bytes_list)\n        model_conf: dict = pickle.loads(model_bytes)\n        graph_bytes: bytes = b"""".join(graph_bytes_list)\n        return model_conf, graph_bytes\n\n\nclass GraphSession(object):\n    def __init__(self, model: Model):\n        self.interpreter: tf.lite.Interpreter\n        self.model = model\n        self.model_conf = model.model_conf\n        self.size_str = self.model_conf.size_string\n        self.model_name = self.model_conf.model_name\n        self.graph_name = self.model_conf.model_name\n        self.version = self.model_conf.model_version\n        self.loaded = self.load_model()\n\n    def load_model(self):\n\n        if not self.model_conf.model_exists:\n            return False\n        try:\n            if self.model.graph_bytes:\n                graph_def_file = self.model.graph_bytes\n                self.interpreter = tf.lite.Interpreter(model_content=graph_def_file)\n                self.interpreter.allocate_tensors()\n            else:\n                self.interpreter = tf.lite.Interpreter(model_path=self.model_conf.compile_model_path)\n                self.interpreter.allocate_tensors()\n\n            print(\'TensorFlow Session {} Loaded.\'.format(self.model_conf.model_name))\n            return True\n        except NotFoundError:\n            print(\'The system cannot find the model specified.\')\n            return False\n\n    @property\n    def session(self) -> tf.lite.Interpreter:\n        return self.interpreter\n\n\nclass Interface(object):\n\n    def __init__(self, graph_session: GraphSession):\n        self.graph_sess = graph_session\n        self.model_conf = graph_session.model_conf\n        self.size_str = self.model_conf.size_string\n        self.graph_name = self.graph_sess.graph_name\n        self.version = self.graph_sess.version\n        self.model_category = self.model_conf.category\n        if self.graph_sess.loaded:\n            self.sess = self.graph_sess.session\n            self.dense_decoded = self.sess.get_output_details()\n            self.x = self.sess.get_input_details()\n\n    @property\n    def name(self):\n        return self.graph_name\n\n    @property\n    def size(self):\n        return self.size_str\n\n    def predict_batch(self, image_batch, output_split=None):\n        predict_text = self.predict_func(\n            image_batch,\n            self.sess,\n            self.dense_decoded,\n            self.x,\n            self.model_conf,\n            output_split\n        )\n        return predict_text\n\n    @staticmethod\n    def decode_maps(categories):\n        return {index: category for index, category in enumerate(categories, 0)}\n\n    def predict_func(self, image_batch, _sess, dense_decoded, op_input, model: ModelConfig, output_split=None):\n\n        if output_split is None:\n            output_split = model.output_split\n\n        _sess.set_tensor(op_input[0][\'index\'], image_batch)\n        _sess.invoke()\n        dense_decoded_code = _sess.get_tensor(dense_decoded[0][\'index\'])\n\n        decoded_expression = []\n        for item in dense_decoded_code:\n            expression = \'\'\n\n            for i in item:\n                if i == -1 or i == model.category_num:\n                    expression += \'\'\n                else:\n                    expression += self.decode_maps(model.category)[i]\n            decoded_expression.append(expression)\n        return output_split.join(decoded_expression) if len(decoded_expression) > 1 else decoded_expression[0]\n\n\nclass Pretreatment(object):\n\n    def __init__(self, origin):\n        self.origin = origin\n\n    def get(self):\n        return self.origin\n\n    def binarization(self, value, modify=False):\n        ret, _binarization = cv2.threshold(self.origin, value, 255, cv2.THRESH_BINARY)\n        if modify:\n            self.origin = _binarization\n        return _binarization\n\n    @staticmethod\n    def preprocessing(image, binaryzation=-1):\n        pretreatment = Pretreatment(image)\n        if binaryzation > 0:\n            pretreatment.binarization(binaryzation, True)\n        return pretreatment.get()\n\n    @staticmethod\n    def preprocessing_by_func(exec_map, key, src_arr):\n        if not exec_map:\n            return src_arr\n        target_arr = cv2.cvtColor(src_arr, cv2.COLOR_RGB2BGR)\n        for sentence in exec_map.get(key):\n            if sentence.startswith(""@@""):\n                target_arr = eval(sentence[2:])\n            elif sentence.startswith(""$$""):\n                exec(sentence[2:])\n        return cv2.cvtColor(target_arr, cv2.COLOR_BGR2RGB)\n\n\nclass ImageUtils(object):\n\n    @staticmethod\n    def get_bytes_batch(image_bytes):\n        try:\n            bytes_batch = [image_bytes]\n        except binascii.Error:\n            return None, ""INVALID_BASE64_STRING""\n        what_img = [ImageUtils.test_image(i) for i in bytes_batch]\n        if None in what_img:\n            return None, ""INVALID_IMAGE_FORMAT""\n        return bytes_batch, ""SUCCESS""\n\n    @staticmethod\n    def get_image_batch(model: ModelConfig, bytes_batch, param_key=None):\n        # Note that there are two return objects here.\n        # 1.image_batch, 2.response\n\n        def load_image(image_bytes):\n            data_stream = io.BytesIO(image_bytes)\n            pil_image = PIL_Image.open(data_stream)\n            rgb = pil_image.split()\n            size = pil_image.size\n\n            gif_handle = model.pre_concat_frames != -1 or model.pre_blend_frames != -1\n\n            if len(rgb) > 3 and model.pre_replace_transparent and gif_handle:\n                background = PIL_Image.new(\'RGB\', pil_image.size, (255, 255, 255))\n                background.paste(pil_image, (0, 0, size[0], size[1]), pil_image)\n                pil_image = background\n\n            im = np.asarray(pil_image)\n\n            if model.image_channel == 1 and len(im.shape) == 3:\n                im = cv2.cvtColor(im, cv2.COLOR_RGB2GRAY)\n\n            im = Pretreatment.preprocessing_by_func(\n                exec_map=model.exec_map,\n                key=param_key,\n                src_arr=im\n            )\n\n            im = Pretreatment.preprocessing(\n                image=im,\n                binaryzation=model.pre_binaryzation,\n            )\n\n            if model.pre_horizontal_stitching:\n                up_slice = im[0: int(size[1] / 2), 0: size[0]]\n                down_slice = im[int(size[1] / 2): size[1], 0: size[0]]\n                im = np.concatenate((up_slice, down_slice), axis=1)\n\n            image = im.astype(np.float32)\n            # image = im\n            if model.resize[0] == -1:\n                ratio = model.resize[1] / size[1]\n                resize_width = int(ratio * size[0])\n                image = cv2.resize(image, (resize_width, model.resize[1]))\n            else:\n                image = cv2.resize(image, (model.resize[0], model.resize[1]))\n            image = image.swapaxes(0, 1)\n            return (image[:, :, np.newaxis] if model.image_channel == 1 else image[:, :]) / 255.\n\n        try:\n            image_batch = [load_image(i) for i in bytes_batch]\n            return image_batch, ""SUCCESS""\n        except OSError:\n            return None, ""IMAGE_DAMAGE""\n        except ValueError as _e:\n            print(_e)\n            return None, ""IMAGE_SIZE_NOT_MATCH_GRAPH""\n\n    @staticmethod\n    def size_of_image(image_bytes: bytes):\n        _null_size = tuple((-1, -1))\n        try:\n            data_stream = io.BytesIO(image_bytes)\n            size = PIL_Image.open(data_stream).size\n            return size\n        except OSError:\n            return _null_size\n        except ValueError:\n            return _null_size\n\n    @staticmethod\n    def test_image(h):\n        """"""JPEG""""""\n        if h[:3] == b""\\xff\\xd8\\xff"":\n            return \'jpeg\'\n        """"""PNG""""""\n        if h[:8] == b""\\211PNG\\r\\n\\032\\n"":\n            return \'png\'\n        """"""GIF (\'87 and \'89 variants)""""""\n        if h[:6] in (b\'GIF87a\', b\'GIF89a\'):\n            return \'gif\'\n        """"""TIFF (can be in Motorola or Intel byte order)""""""\n        if h[:2] in (b\'MM\', b\'II\'):\n            return \'tiff\'\n        if h[:2] == b\'BM\':\n            return \'bmp\'\n        """"""SGI image library""""""\n        if h[:2] == b\'\\001\\332\':\n            return \'rgb\'\n        """"""PBM (portable bitmap)""""""\n        if len(h) >= 3 and \\\n                h[0] == b\'P\' and h[1] in b\'14\' and h[2] in b\' \\t\\n\\r\':\n            return \'pbm\'\n        """"""PGM (portable graymap)""""""\n        if len(h) >= 3 and \\\n                h[0] == b\'P\' and h[1] in b\'25\' and h[2] in b\' \\t\\n\\r\':\n            return \'pgm\'\n        """"""PPM (portable pixmap)""""""\n        if len(h) >= 3 and h[0] == b\'P\' and h[1] in b\'36\' and h[2] in b\' \\t\\n\\r\':\n            return \'ppm\'\n        """"""Sun raster file""""""\n        if h[:4] == b\'\\x59\\xA6\\x6A\\x95\':\n            return \'rast\'\n        """"""X bitmap (X10 or X11)""""""\n        s = b\'#define \'\n        if h[:len(s)] == s:\n            return \'xbm\'\n        return None\n\n\nclass SDK(object):\n\n    def __init__(self, conf_path=None, model_entity=None):\n        if not conf_path and not model_entity:\n            raise ValueError(\'One of parameters conf_path and model_entity must be filled\')\n        self.model = Model(conf_path=conf_path, source_bytes=model_entity)\n        self.model_conf = self.model.model_conf\n        self.graph_session = GraphSession(self.model)\n        self.interface = Interface(self.graph_session)\n\n    def predict(self, image_bytes, param_key=None):\n        bytes_batch, message = ImageUtils.get_bytes_batch(image_bytes)\n        if not bytes_batch:\n            raise ValueError(message)\n        image_batch, message = ImageUtils.get_image_batch(self.model_conf, bytes_batch, param_key=param_key)\n        if not image_batch:\n            raise ValueError(message)\n        result = self.interface.predict_batch(image_batch, None)\n        return result\n\n\nif __name__ == \'__main__\':\n    # FROM PATH\n\n    # sdk = SDK(r""model.yaml"")\n    # with open(r""H:\\TrainSet\\1541187040676.jpg"", ""rb"") as f:\n    #     b = f.read()\n    # for i in [b] * 1000:\n    #     t1 = time.time()\n    #     print(sdk.predict(b), (time.time() - t1)*1000)\n\n    # FROM BYTES\n    with open(r""model.pl"", ""rb"") as f:\n        b = f.read()\n    sdk = SDK(model_entity=b)\n    with open(r""1540868881850.jpg"", ""rb"") as f:\n        b = f.read()\n    for i in [b] * 1000:\n        t1 = time.time()\n        print(sdk.predict(b), (time.time() - t1) * 1000)\n'"
