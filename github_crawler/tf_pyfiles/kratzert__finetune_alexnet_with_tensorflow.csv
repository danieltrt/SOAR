file_path,api_count,code
alexnet.py,21,"b'""""""This is an TensorFLow implementation of AlexNet by Alex Krizhevsky at all.\n\nPaper:\n(http://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf)\n\nExplanation can be found in my blog post:\nhttps://kratzert.github.io/2017/02/24/finetuning-alexnet-with-tensorflow.html\n\nThis script enables finetuning AlexNet on any given Dataset with any number of\nclasses. The structure of this script is strongly inspired by the fast.ai\nDeep Learning class by Jeremy Howard and Rachel Thomas, especially their vgg16\nfinetuning script:\nLink:\n- https://github.com/fastai/courses/blob/master/deeplearning1/nbs/vgg16.py\n\n\nThe pretrained weights can be downloaded here and should be placed in the same\nfolder as this file:\n- http://www.cs.toronto.edu/~guerzhoy/tf_alexnet/\n\n@author: Frederik Kratzert (contact: f.kratzert(at)gmail.com)\n""""""\n\nimport tensorflow as tf\nimport numpy as np\n\n\nclass AlexNet(object):\n    """"""Implementation of the AlexNet.""""""\n\n    def __init__(self, x, keep_prob, num_classes, skip_layer,\n                 weights_path=\'DEFAULT\'):\n        """"""Create the graph of the AlexNet model.\n\n        Args:\n            x: Placeholder for the input tensor.\n            keep_prob: Dropout probability.\n            num_classes: Number of classes in the dataset.\n            skip_layer: List of names of the layer, that get trained from\n                scratch\n            weights_path: Complete path to the pretrained weight file, if it\n                isn\'t in the same folder as this code\n        """"""\n        # Parse input arguments into class variables\n        self.X = x\n        self.NUM_CLASSES = num_classes\n        self.KEEP_PROB = keep_prob\n        self.SKIP_LAYER = skip_layer\n\n        if weights_path == \'DEFAULT\':\n            self.WEIGHTS_PATH = \'bvlc_alexnet.npy\'\n        else:\n            self.WEIGHTS_PATH = weights_path\n\n        # Call the create function to build the computational graph of AlexNet\n        self.create()\n\n    def create(self):\n        """"""Create the network graph.""""""\n        # 1st Layer: Conv (w ReLu) -> Lrn -> Pool\n        conv1 = conv(self.X, 11, 11, 96, 4, 4, padding=\'VALID\', name=\'conv1\')\n        norm1 = lrn(conv1, 2, 2e-05, 0.75, name=\'norm1\')\n        pool1 = max_pool(norm1, 3, 3, 2, 2, padding=\'VALID\', name=\'pool1\')\n        \n        # 2nd Layer: Conv (w ReLu)  -> Lrn -> Pool with 2 groups\n        conv2 = conv(pool1, 5, 5, 256, 1, 1, groups=2, name=\'conv2\')\n        norm2 = lrn(conv2, 2, 2e-05, 0.75, name=\'norm2\')\n        pool2 = max_pool(norm2, 3, 3, 2, 2, padding=\'VALID\', name=\'pool2\')\n        \n        # 3rd Layer: Conv (w ReLu)\n        conv3 = conv(pool2, 3, 3, 384, 1, 1, name=\'conv3\')\n\n        # 4th Layer: Conv (w ReLu) splitted into two groups\n        conv4 = conv(conv3, 3, 3, 384, 1, 1, groups=2, name=\'conv4\')\n\n        # 5th Layer: Conv (w ReLu) -> Pool splitted into two groups\n        conv5 = conv(conv4, 3, 3, 256, 1, 1, groups=2, name=\'conv5\')\n        pool5 = max_pool(conv5, 3, 3, 2, 2, padding=\'VALID\', name=\'pool5\')\n\n        # 6th Layer: Flatten -> FC (w ReLu) -> Dropout\n        flattened = tf.reshape(pool5, [-1, 6*6*256])\n        fc6 = fc(flattened, 6*6*256, 4096, name=\'fc6\')\n        dropout6 = dropout(fc6, self.KEEP_PROB)\n\n        # 7th Layer: FC (w ReLu) -> Dropout\n        fc7 = fc(dropout6, 4096, 4096, name=\'fc7\')\n        dropout7 = dropout(fc7, self.KEEP_PROB)\n\n        # 8th Layer: FC and return unscaled activations\n        self.fc8 = fc(dropout7, 4096, self.NUM_CLASSES, relu=False, name=\'fc8\')\n\n    def load_initial_weights(self, session):\n        """"""Load weights from file into network.\n\n        As the weights from http://www.cs.toronto.edu/~guerzhoy/tf_alexnet/\n        come as a dict of lists (e.g. weights[\'conv1\'] is a list) and not as\n        dict of dicts (e.g. weights[\'conv1\'] is a dict with keys \'weights\' &\n        \'biases\') we need a special load function\n        """"""\n        # Load the weights into memory\n        weights_dict = np.load(self.WEIGHTS_PATH, encoding=\'bytes\').item()\n\n        # Loop over all layer names stored in the weights dict\n        for op_name in weights_dict:\n\n            # Check if layer should be trained from scratch\n            if op_name not in self.SKIP_LAYER:\n\n                with tf.variable_scope(op_name, reuse=True):\n\n                    # Assign weights/biases to their corresponding tf variable\n                    for data in weights_dict[op_name]:\n\n                        # Biases\n                        if len(data.shape) == 1:\n                            var = tf.get_variable(\'biases\', trainable=False)\n                            session.run(var.assign(data))\n\n                        # Weights\n                        else:\n                            var = tf.get_variable(\'weights\', trainable=False)\n                            session.run(var.assign(data))\n\n\ndef conv(x, filter_height, filter_width, num_filters, stride_y, stride_x, name,\n         padding=\'SAME\', groups=1):\n    """"""Create a convolution layer.\n\n    Adapted from: https://github.com/ethereon/caffe-tensorflow\n    """"""\n    # Get number of input channels\n    input_channels = int(x.get_shape()[-1])\n\n    # Create lambda function for the convolution\n    convolve = lambda i, k: tf.nn.conv2d(i, k,\n                                         strides=[1, stride_y, stride_x, 1],\n                                         padding=padding)\n\n    with tf.variable_scope(name) as scope:\n        # Create tf variables for the weights and biases of the conv layer\n        weights = tf.get_variable(\'weights\', shape=[filter_height,\n                                                    filter_width,\n                                                    input_channels/groups,\n                                                    num_filters])\n        biases = tf.get_variable(\'biases\', shape=[num_filters])\n\n    if groups == 1:\n        conv = convolve(x, weights)\n\n    # In the cases of multiple groups, split inputs & weights and\n    else:\n        # Split input and weights and convolve them separately\n        input_groups = tf.split(axis=3, num_or_size_splits=groups, value=x)\n        weight_groups = tf.split(axis=3, num_or_size_splits=groups,\n                                 value=weights)\n        output_groups = [convolve(i, k) for i, k in zip(input_groups, weight_groups)]\n\n        # Concat the convolved output together again\n        conv = tf.concat(axis=3, values=output_groups)\n\n    # Add biases\n    bias = tf.reshape(tf.nn.bias_add(conv, biases), tf.shape(conv))\n\n    # Apply relu function\n    relu = tf.nn.relu(bias, name=scope.name)\n\n    return relu\n\n\ndef fc(x, num_in, num_out, name, relu=True):\n    """"""Create a fully connected layer.""""""\n    with tf.variable_scope(name) as scope:\n\n        # Create tf variables for the weights and biases\n        weights = tf.get_variable(\'weights\', shape=[num_in, num_out],\n                                  trainable=True)\n        biases = tf.get_variable(\'biases\', [num_out], trainable=True)\n\n        # Matrix multiply weights and inputs and add bias\n        act = tf.nn.xw_plus_b(x, weights, biases, name=scope.name)\n\n    if relu:\n        # Apply ReLu non linearity\n        relu = tf.nn.relu(act)\n        return relu\n    else:\n        return act\n\n\ndef max_pool(x, filter_height, filter_width, stride_y, stride_x, name,\n             padding=\'SAME\'):\n    """"""Create a max pooling layer.""""""\n    return tf.nn.max_pool(x, ksize=[1, filter_height, filter_width, 1],\n                          strides=[1, stride_y, stride_x, 1],\n                          padding=padding, name=name)\n\n\ndef lrn(x, radius, alpha, beta, name, bias=1.0):\n    """"""Create a local response normalization layer.""""""\n    return tf.nn.local_response_normalization(x, depth_radius=radius,\n                                              alpha=alpha, beta=beta,\n                                              bias=bias, name=name)\n\n\ndef dropout(x, keep_prob):\n    """"""Create a dropout layer.""""""\n    return tf.nn.dropout(x, keep_prob)\n'"
caffe_classes.py,0,"b'class_names = \'\'\'tench, Tinca tinca\ngoldfish, Carassius auratus\ngreat white shark, white shark, man-eater, man-eating shark, Carcharodon carcharias\ntiger shark, Galeocerdo cuvieri\nhammerhead, hammerhead shark\nelectric ray, crampfish, numbfish, torpedo\nstingray\ncock\nhen\nostrich, Struthio camelus\nbrambling, Fringilla montifringilla\ngoldfinch, Carduelis carduelis\nhouse finch, linnet, Carpodacus mexicanus\njunco, snowbird\nindigo bunting, indigo finch, indigo bird, Passerina cyanea\nrobin, American robin, Turdus migratorius\nbulbul\njay\nmagpie\nchickadee\nwater ouzel, dipper\nkite\nbald eagle, American eagle, Haliaeetus leucocephalus\nvulture\ngreat grey owl, great gray owl, Strix nebulosa\nEuropean fire salamander, Salamandra salamandra\ncommon newt, Triturus vulgaris\neft\nspotted salamander, Ambystoma maculatum\naxolotl, mud puppy, Ambystoma mexicanum\nbullfrog, Rana catesbeiana\ntree frog, tree-frog\ntailed frog, bell toad, ribbed toad, tailed toad, Ascaphus trui\nloggerhead, loggerhead turtle, Caretta caretta\nleatherback turtle, leatherback, leathery turtle, Dermochelys coriacea\nmud turtle\nterrapin\nbox turtle, box tortoise\nbanded gecko\ncommon iguana, iguana, Iguana iguana\nAmerican chameleon, anole, Anolis carolinensis\nwhiptail, whiptail lizard\nagama\nfrilled lizard, Chlamydosaurus kingi\nalligator lizard\nGila monster, Heloderma suspectum\ngreen lizard, Lacerta viridis\nAfrican chameleon, Chamaeleo chamaeleon\nKomodo dragon, Komodo lizard, dragon lizard, giant lizard, Varanus komodoensis\nAfrican crocodile, Nile crocodile, Crocodylus niloticus\nAmerican alligator, Alligator mississipiensis\ntriceratops\nthunder snake, worm snake, Carphophis amoenus\nringneck snake, ring-necked snake, ring snake\nhognose snake, puff adder, sand viper\ngreen snake, grass snake\nking snake, kingsnake\ngarter snake, grass snake\nwater snake\nvine snake\nnight snake, Hypsiglena torquata\nboa constrictor, Constrictor constrictor\nrock python, rock snake, Python sebae\nIndian cobra, Naja naja\ngreen mamba\nsea snake\nhorned viper, cerastes, sand viper, horned asp, Cerastes cornutus\ndiamondback, diamondback rattlesnake, Crotalus adamanteus\nsidewinder, horned rattlesnake, Crotalus cerastes\ntrilobite\nharvestman, daddy longlegs, Phalangium opilio\nscorpion\nblack and gold garden spider, Argiope aurantia\nbarn spider, Araneus cavaticus\ngarden spider, Aranea diademata\nblack widow, Latrodectus mactans\ntarantula\nwolf spider, hunting spider\ntick\ncentipede\nblack grouse\nptarmigan\nruffed grouse, partridge, Bonasa umbellus\nprairie chicken, prairie grouse, prairie fowl\npeacock\nquail\npartridge\nAfrican grey, African gray, Psittacus erithacus\nmacaw\nsulphur-crested cockatoo, Kakatoe galerita, Cacatua galerita\nlorikeet\ncoucal\nbee eater\nhornbill\nhummingbird\njacamar\ntoucan\ndrake\nred-breasted merganser, Mergus serrator\ngoose\nblack swan, Cygnus atratus\ntusker\nechidna, spiny anteater, anteater\nplatypus, duckbill, duckbilled platypus, duck-billed platypus, Ornithorhynchus anatinus\nwallaby, brush kangaroo\nkoala, koala bear, kangaroo bear, native bear, Phascolarctos cinereus\nwombat\njellyfish\nsea anemone, anemone\nbrain coral\nflatworm, platyhelminth\nnematode, nematode worm, roundworm\nconch\nsnail\nslug\nsea slug, nudibranch\nchiton, coat-of-mail shell, sea cradle, polyplacophore\nchambered nautilus, pearly nautilus, nautilus\nDungeness crab, Cancer magister\nrock crab, Cancer irroratus\nfiddler crab\nking crab, Alaska crab, Alaskan king crab, Alaska king crab, Paralithodes camtschatica\nAmerican lobster, Northern lobster, Maine lobster, Homarus americanus\nspiny lobster, langouste, rock lobster, crawfish, crayfish, sea crawfish\ncrayfish, crawfish, crawdad, crawdaddy\nhermit crab\nisopod\nwhite stork, Ciconia ciconia\nblack stork, Ciconia nigra\nspoonbill\nflamingo\nlittle blue heron, Egretta caerulea\nAmerican egret, great white heron, Egretta albus\nbittern\ncrane\nlimpkin, Aramus pictus\nEuropean gallinule, Porphyrio porphyrio\nAmerican coot, marsh hen, mud hen, water hen, Fulica americana\nbustard\nruddy turnstone, Arenaria interpres\nred-backed sandpiper, dunlin, Erolia alpina\nredshank, Tringa totanus\ndowitcher\noystercatcher, oyster catcher\npelican\nking penguin, Aptenodytes patagonica\nalbatross, mollymawk\ngrey whale, gray whale, devilfish, Eschrichtius gibbosus, Eschrichtius robustus\nkiller whale, killer, orca, grampus, sea wolf, Orcinus orca\ndugong, Dugong dugon\nsea lion\nChihuahua\nJapanese spaniel\nMaltese dog, Maltese terrier, Maltese\nPekinese, Pekingese, Peke\nShih-Tzu\nBlenheim spaniel\npapillon\ntoy terrier\nRhodesian ridgeback\nAfghan hound, Afghan\nbasset, basset hound\nbeagle\nbloodhound, sleuthhound\nbluetick\nblack-and-tan coonhound\nWalker hound, Walker foxhound\nEnglish foxhound\nredbone\nborzoi, Russian wolfhound\nIrish wolfhound\nItalian greyhound\nwhippet\nIbizan hound, Ibizan Podenco\nNorwegian elkhound, elkhound\notterhound, otter hound\nSaluki, gazelle hound\nScottish deerhound, deerhound\nWeimaraner\nStaffordshire bullterrier, Staffordshire bull terrier\nAmerican Staffordshire terrier, Staffordshire terrier, American pit bull terrier, pit bull terrier\nBedlington terrier\nBorder terrier\nKerry blue terrier\nIrish terrier\nNorfolk terrier\nNorwich terrier\nYorkshire terrier\nwire-haired fox terrier\nLakeland terrier\nSealyham terrier, Sealyham\nAiredale, Airedale terrier\ncairn, cairn terrier\nAustralian terrier\nDandie Dinmont, Dandie Dinmont terrier\nBoston bull, Boston terrier\nminiature schnauzer\ngiant schnauzer\nstandard schnauzer\nScotch terrier, Scottish terrier, Scottie\nTibetan terrier, chrysanthemum dog\nsilky terrier, Sydney silky\nsoft-coated wheaten terrier\nWest Highland white terrier\nLhasa, Lhasa apso\nflat-coated retriever\ncurly-coated retriever\ngolden retriever\nLabrador retriever\nChesapeake Bay retriever\nGerman short-haired pointer\nvizsla, Hungarian pointer\nEnglish setter\nIrish setter, red setter\nGordon setter\nBrittany spaniel\nclumber, clumber spaniel\nEnglish springer, English springer spaniel\nWelsh springer spaniel\ncocker spaniel, English cocker spaniel, cocker\nSussex spaniel\nIrish water spaniel\nkuvasz\nschipperke\ngroenendael\nmalinois\nbriard\nkelpie\nkomondor\nOld English sheepdog, bobtail\nShetland sheepdog, Shetland sheep dog, Shetland\ncollie\nBorder collie\nBouvier des Flandres, Bouviers des Flandres\nRottweiler\nGerman shepherd, German shepherd dog, German police dog, alsatian\nDoberman, Doberman pinscher\nminiature pinscher\nGreater Swiss Mountain dog\nBernese mountain dog\nAppenzeller\nEntleBucher\nboxer\nbull mastiff\nTibetan mastiff\nFrench bulldog\nGreat Dane\nSaint Bernard, St Bernard\nEskimo dog, husky\nmalamute, malemute, Alaskan malamute\nSiberian husky\ndalmatian, coach dog, carriage dog\naffenpinscher, monkey pinscher, monkey dog\nbasenji\npug, pug-dog\nLeonberg\nNewfoundland, Newfoundland dog\nGreat Pyrenees\nSamoyed, Samoyede\nPomeranian\nchow, chow chow\nkeeshond\nBrabancon griffon\nPembroke, Pembroke Welsh corgi\nCardigan, Cardigan Welsh corgi\ntoy poodle\nminiature poodle\nstandard poodle\nMexican hairless\ntimber wolf, grey wolf, gray wolf, Canis lupus\nwhite wolf, Arctic wolf, Canis lupus tundrarum\nred wolf, maned wolf, Canis rufus, Canis niger\ncoyote, prairie wolf, brush wolf, Canis latrans\ndingo, warrigal, warragal, Canis dingo\ndhole, Cuon alpinus\nAfrican hunting dog, hyena dog, Cape hunting dog, Lycaon pictus\nhyena, hyaena\nred fox, Vulpes vulpes\nkit fox, Vulpes macrotis\nArctic fox, white fox, Alopex lagopus\ngrey fox, gray fox, Urocyon cinereoargenteus\ntabby, tabby cat\ntiger cat\nPersian cat\nSiamese cat, Siamese\nEgyptian cat\ncougar, puma, catamount, mountain lion, painter, panther, Felis concolor\nlynx, catamount\nleopard, Panthera pardus\nsnow leopard, ounce, Panthera uncia\njaguar, panther, Panthera onca, Felis onca\nlion, king of beasts, Panthera leo\ntiger, Panthera tigris\ncheetah, chetah, Acinonyx jubatus\nbrown bear, bruin, Ursus arctos\nAmerican black bear, black bear, Ursus americanus, Euarctos americanus\nice bear, polar bear, Ursus Maritimus, Thalarctos maritimus\nsloth bear, Melursus ursinus, Ursus ursinus\nmongoose\nmeerkat, mierkat\ntiger beetle\nladybug, ladybeetle, lady beetle, ladybird, ladybird beetle\nground beetle, carabid beetle\nlong-horned beetle, longicorn, longicorn beetle\nleaf beetle, chrysomelid\ndung beetle\nrhinoceros beetle\nweevil\nfly\nbee\nant, emmet, pismire\ngrasshopper, hopper\ncricket\nwalking stick, walkingstick, stick insect\ncockroach, roach\nmantis, mantid\ncicada, cicala\nleafhopper\nlacewing, lacewing fly\ndragonfly, darning needle, devil\'s darning needle, sewing needle, snake feeder, snake doctor, mosquito hawk, skeeter hawk\ndamselfly\nadmiral\nringlet, ringlet butterfly\nmonarch, monarch butterfly, milkweed butterfly, Danaus plexippus\ncabbage butterfly\nsulphur butterfly, sulfur butterfly\nlycaenid, lycaenid butterfly\nstarfish, sea star\nsea urchin\nsea cucumber, holothurian\nwood rabbit, cottontail, cottontail rabbit\nhare\nAngora, Angora rabbit\nhamster\nporcupine, hedgehog\nfox squirrel, eastern fox squirrel, Sciurus niger\nmarmot\nbeaver\nguinea pig, Cavia cobaya\nsorrel\nzebra\nhog, pig, grunter, squealer, Sus scrofa\nwild boar, boar, Sus scrofa\nwarthog\nhippopotamus, hippo, river horse, Hippopotamus amphibius\nox\nwater buffalo, water ox, Asiatic buffalo, Bubalus bubalis\nbison\nram, tup\nbighorn, bighorn sheep, cimarron, Rocky Mountain bighorn, Rocky Mountain sheep, Ovis canadensis\nibex, Capra ibex\nhartebeest\nimpala, Aepyceros melampus\ngazelle\nArabian camel, dromedary, Camelus dromedarius\nllama\nweasel\nmink\npolecat, fitch, foulmart, foumart, Mustela putorius\nblack-footed ferret, ferret, Mustela nigripes\notter\nskunk, polecat, wood pussy\nbadger\narmadillo\nthree-toed sloth, ai, Bradypus tridactylus\norangutan, orang, orangutang, Pongo pygmaeus\ngorilla, Gorilla gorilla\nchimpanzee, chimp, Pan troglodytes\ngibbon, Hylobates lar\nsiamang, Hylobates syndactylus, Symphalangus syndactylus\nguenon, guenon monkey\npatas, hussar monkey, Erythrocebus patas\nbaboon\nmacaque\nlangur\ncolobus, colobus monkey\nproboscis monkey, Nasalis larvatus\nmarmoset\ncapuchin, ringtail, Cebus capucinus\nhowler monkey, howler\ntiti, titi monkey\nspider monkey, Ateles geoffroyi\nsquirrel monkey, Saimiri sciureus\nMadagascar cat, ring-tailed lemur, Lemur catta\nindri, indris, Indri indri, Indri brevicaudatus\nIndian elephant, Elephas maximus\nAfrican elephant, Loxodonta africana\nlesser panda, red panda, panda, bear cat, cat bear, Ailurus fulgens\ngiant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca\nbarracouta, snoek\neel\ncoho, cohoe, coho salmon, blue jack, silver salmon, Oncorhynchus kisutch\nrock beauty, Holocanthus tricolor\nanemone fish\nsturgeon\ngar, garfish, garpike, billfish, Lepisosteus osseus\nlionfish\npuffer, pufferfish, blowfish, globefish\nabacus\nabaya\nacademic gown, academic robe, judge\'s robe\naccordion, piano accordion, squeeze box\nacoustic guitar\naircraft carrier, carrier, flattop, attack aircraft carrier\nairliner\nairship, dirigible\naltar\nambulance\namphibian, amphibious vehicle\nanalog clock\napiary, bee house\napron\nashcan, trash can, garbage can, wastebin, ash bin, ash-bin, ashbin, dustbin, trash barrel, trash bin\nassault rifle, assault gun\nbackpack, back pack, knapsack, packsack, rucksack, haversack\nbakery, bakeshop, bakehouse\nbalance beam, beam\nballoon\nballpoint, ballpoint pen, ballpen, Biro\nBand Aid\nbanjo\nbannister, banister, balustrade, balusters, handrail\nbarbell\nbarber chair\nbarbershop\nbarn\nbarometer\nbarrel, cask\nbarrow, garden cart, lawn cart, wheelbarrow\nbaseball\nbasketball\nbassinet\nbassoon\nbathing cap, swimming cap\nbath towel\nbathtub, bathing tub, bath, tub\nbeach wagon, station wagon, wagon, estate car, beach waggon, station waggon, waggon\nbeacon, lighthouse, beacon light, pharos\nbeaker\nbearskin, busby, shako\nbeer bottle\nbeer glass\nbell cote, bell cot\nbib\nbicycle-built-for-two, tandem bicycle, tandem\nbikini, two-piece\nbinder, ring-binder\nbinoculars, field glasses, opera glasses\nbirdhouse\nboathouse\nbobsled, bobsleigh, bob\nbolo tie, bolo, bola tie, bola\nbonnet, poke bonnet\nbookcase\nbookshop, bookstore, bookstall\nbottlecap\nbow\nbow tie, bow-tie, bowtie\nbrass, memorial tablet, plaque\nbrassiere, bra, bandeau\nbreakwater, groin, groyne, mole, bulwark, seawall, jetty\nbreastplate, aegis, egis\nbroom\nbucket, pail\nbuckle\nbulletproof vest\nbullet train, bullet\nbutcher shop, meat market\ncab, hack, taxi, taxicab\ncaldron, cauldron\ncandle, taper, wax light\ncannon\ncanoe\ncan opener, tin opener\ncardigan\ncar mirror\ncarousel, carrousel, merry-go-round, roundabout, whirligig\ncarpenter\'s kit, tool kit\ncarton\ncar wheel\ncash machine, cash dispenser, automated teller machine, automatic teller machine, automated teller, automatic teller, ATM\ncassette\ncassette player\ncastle\ncatamaran\nCD player\ncello, violoncello\ncellular telephone, cellular phone, cellphone, cell, mobile phone\nchain\nchainlink fence\nchain mail, ring mail, mail, chain armor, chain armour, ring armor, ring armour\nchain saw, chainsaw\nchest\nchiffonier, commode\nchime, bell, gong\nchina cabinet, china closet\nChristmas stocking\nchurch, church building\ncinema, movie theater, movie theatre, movie house, picture palace\ncleaver, meat cleaver, chopper\ncliff dwelling\ncloak\nclog, geta, patten, sabot\ncocktail shaker\ncoffee mug\ncoffeepot\ncoil, spiral, volute, whorl, helix\ncombination lock\ncomputer keyboard, keypad\nconfectionery, confectionary, candy store\ncontainer ship, containership, container vessel\nconvertible\ncorkscrew, bottle screw\ncornet, horn, trumpet, trump\ncowboy boot\ncowboy hat, ten-gallon hat\ncradle\ncrane\ncrash helmet\ncrate\ncrib, cot\nCrock Pot\ncroquet ball\ncrutch\ncuirass\ndam, dike, dyke\ndesk\ndesktop computer\ndial telephone, dial phone\ndiaper, nappy, napkin\ndigital clock\ndigital watch\ndining table, board\ndishrag, dishcloth\ndishwasher, dish washer, dishwashing machine\ndisk brake, disc brake\ndock, dockage, docking facility\ndogsled, dog sled, dog sleigh\ndome\ndoormat, welcome mat\ndrilling platform, offshore rig\ndrum, membranophone, tympan\ndrumstick\ndumbbell\nDutch oven\nelectric fan, blower\nelectric guitar\nelectric locomotive\nentertainment center\nenvelope\nespresso maker\nface powder\nfeather boa, boa\nfile, file cabinet, filing cabinet\nfireboat\nfire engine, fire truck\nfire screen, fireguard\nflagpole, flagstaff\nflute, transverse flute\nfolding chair\nfootball helmet\nforklift\nfountain\nfountain pen\nfour-poster\nfreight car\nFrench horn, horn\nfrying pan, frypan, skillet\nfur coat\ngarbage truck, dustcart\ngasmask, respirator, gas helmet\ngas pump, gasoline pump, petrol pump, island dispenser\ngoblet\ngo-kart\ngolf ball\ngolfcart, golf cart\ngondola\ngong, tam-tam\ngown\ngrand piano, grand\ngreenhouse, nursery, glasshouse\ngrille, radiator grille\ngrocery store, grocery, food market, market\nguillotine\nhair slide\nhair spray\nhalf track\nhammer\nhamper\nhand blower, blow dryer, blow drier, hair dryer, hair drier\nhand-held computer, hand-held microcomputer\nhandkerchief, hankie, hanky, hankey\nhard disc, hard disk, fixed disk\nharmonica, mouth organ, harp, mouth harp\nharp\nharvester, reaper\nhatchet\nholster\nhome theater, home theatre\nhoneycomb\nhook, claw\nhoopskirt, crinoline\nhorizontal bar, high bar\nhorse cart, horse-cart\nhourglass\niPod\niron, smoothing iron\njack-o\'-lantern\njean, blue jean, denim\njeep, landrover\njersey, T-shirt, tee shirt\njigsaw puzzle\njinrikisha, ricksha, rickshaw\njoystick\nkimono\nknee pad\nknot\nlab coat, laboratory coat\nladle\nlampshade, lamp shade\nlaptop, laptop computer\nlawn mower, mower\nlens cap, lens cover\nletter opener, paper knife, paperknife\nlibrary\nlifeboat\nlighter, light, igniter, ignitor\nlimousine, limo\nliner, ocean liner\nlipstick, lip rouge\nLoafer\nlotion\nloudspeaker, speaker, speaker unit, loudspeaker system, speaker system\nloupe, jeweler\'s loupe\nlumbermill, sawmill\nmagnetic compass\nmailbag, postbag\nmailbox, letter box\nmaillot\nmaillot, tank suit\nmanhole cover\nmaraca\nmarimba, xylophone\nmask\nmatchstick\nmaypole\nmaze, labyrinth\nmeasuring cup\nmedicine chest, medicine cabinet\nmegalith, megalithic structure\nmicrophone, mike\nmicrowave, microwave oven\nmilitary uniform\nmilk can\nminibus\nminiskirt, mini\nminivan\nmissile\nmitten\nmixing bowl\nmobile home, manufactured home\nModel T\nmodem\nmonastery\nmonitor\nmoped\nmortar\nmortarboard\nmosque\nmosquito net\nmotor scooter, scooter\nmountain bike, all-terrain bike, off-roader\nmountain tent\nmouse, computer mouse\nmousetrap\nmoving van\nmuzzle\nnail\nneck brace\nnecklace\nnipple\nnotebook, notebook computer\nobelisk\noboe, hautboy, hautbois\nocarina, sweet potato\nodometer, hodometer, mileometer, milometer\noil filter\norgan, pipe organ\noscilloscope, scope, cathode-ray oscilloscope, CRO\noverskirt\noxcart\noxygen mask\npacket\npaddle, boat paddle\npaddlewheel, paddle wheel\npadlock\npaintbrush\npajama, pyjama, pj\'s, jammies\npalace\npanpipe, pandean pipe, syrinx\npaper towel\nparachute, chute\nparallel bars, bars\npark bench\nparking meter\npassenger car, coach, carriage\npatio, terrace\npay-phone, pay-station\npedestal, plinth, footstall\npencil box, pencil case\npencil sharpener\nperfume, essence\nPetri dish\nphotocopier\npick, plectrum, plectron\npickelhaube\npicket fence, paling\npickup, pickup truck\npier\npiggy bank, penny bank\npill bottle\npillow\nping-pong ball\npinwheel\npirate, pirate ship\npitcher, ewer\nplane, carpenter\'s plane, woodworking plane\nplanetarium\nplastic bag\nplate rack\nplow, plough\nplunger, plumber\'s helper\nPolaroid camera, Polaroid Land camera\npole\npolice van, police wagon, paddy wagon, patrol wagon, wagon, black Maria\nponcho\npool table, billiard table, snooker table\npop bottle, soda bottle\npot, flowerpot\npotter\'s wheel\npower drill\nprayer rug, prayer mat\nprinter\nprison, prison house\nprojectile, missile\nprojector\npuck, hockey puck\npunching bag, punch bag, punching ball, punchball\npurse\nquill, quill pen\nquilt, comforter, comfort, puff\nracer, race car, racing car\nracket, racquet\nradiator\nradio, wireless\nradio telescope, radio reflector\nrain barrel\nrecreational vehicle, RV, R.V.\nreel\nreflex camera\nrefrigerator, icebox\nremote control, remote\nrestaurant, eating house, eating place, eatery\nrevolver, six-gun, six-shooter\nrifle\nrocking chair, rocker\nrotisserie\nrubber eraser, rubber, pencil eraser\nrugby ball\nrule, ruler\nrunning shoe\nsafe\nsafety pin\nsaltshaker, salt shaker\nsandal\nsarong\nsax, saxophone\nscabbard\nscale, weighing machine\nschool bus\nschooner\nscoreboard\nscreen, CRT screen\nscrew\nscrewdriver\nseat belt, seatbelt\nsewing machine\nshield, buckler\nshoe shop, shoe-shop, shoe store\nshoji\nshopping basket\nshopping cart\nshovel\nshower cap\nshower curtain\nski\nski mask\nsleeping bag\nslide rule, slipstick\nsliding door\nslot, one-armed bandit\nsnorkel\nsnowmobile\nsnowplow, snowplough\nsoap dispenser\nsoccer ball\nsock\nsolar dish, solar collector, solar furnace\nsombrero\nsoup bowl\nspace bar\nspace heater\nspace shuttle\nspatula\nspeedboat\nspider web, spider\'s web\nspindle\nsports car, sport car\nspotlight, spot\nstage\nsteam locomotive\nsteel arch bridge\nsteel drum\nstethoscope\nstole\nstone wall\nstopwatch, stop watch\nstove\nstrainer\nstreetcar, tram, tramcar, trolley, trolley car\nstretcher\nstudio couch, day bed\nstupa, tope\nsubmarine, pigboat, sub, U-boat\nsuit, suit of clothes\nsundial\nsunglass\nsunglasses, dark glasses, shades\nsunscreen, sunblock, sun blocker\nsuspension bridge\nswab, swob, mop\nsweatshirt\nswimming trunks, bathing trunks\nswing\nswitch, electric switch, electrical switch\nsyringe\ntable lamp\ntank, army tank, armored combat vehicle, armoured combat vehicle\ntape player\nteapot\nteddy, teddy bear\ntelevision, television system\ntennis ball\nthatch, thatched roof\ntheater curtain, theatre curtain\nthimble\nthresher, thrasher, threshing machine\nthrone\ntile roof\ntoaster\ntobacco shop, tobacconist shop, tobacconist\ntoilet seat\ntorch\ntotem pole\ntow truck, tow car, wrecker\ntoyshop\ntractor\ntrailer truck, tractor trailer, trucking rig, rig, articulated lorry, semi\ntray\ntrench coat\ntricycle, trike, velocipede\ntrimaran\ntripod\ntriumphal arch\ntrolleybus, trolley coach, trackless trolley\ntrombone\ntub, vat\nturnstile\ntypewriter keyboard\numbrella\nunicycle, monocycle\nupright, upright piano\nvacuum, vacuum cleaner\nvase\nvault\nvelvet\nvending machine\nvestment\nviaduct\nviolin, fiddle\nvolleyball\nwaffle iron\nwall clock\nwallet, billfold, notecase, pocketbook\nwardrobe, closet, press\nwarplane, military plane\nwashbasin, handbasin, washbowl, lavabo, wash-hand basin\nwasher, automatic washer, washing machine\nwater bottle\nwater jug\nwater tower\nwhiskey jug\nwhistle\nwig\nwindow screen\nwindow shade\nWindsor tie\nwine bottle\nwing\nwok\nwooden spoon\nwool, woolen, woollen\nworm fence, snake fence, snake-rail fence, Virginia fence\nwreck\nyawl\nyurt\nweb site, website, internet site, site\ncomic book\ncrossword puzzle, crossword\nstreet sign\ntraffic light, traffic signal, stoplight\nbook jacket, dust cover, dust jacket, dust wrapper\nmenu\nplate\nguacamole\nconsomme\nhot pot, hotpot\ntrifle\nice cream, icecream\nice lolly, lolly, lollipop, popsicle\nFrench loaf\nbagel, beigel\npretzel\ncheeseburger\nhotdog, hot dog, red hot\nmashed potato\nhead cabbage\nbroccoli\ncauliflower\nzucchini, courgette\nspaghetti squash\nacorn squash\nbutternut squash\ncucumber, cuke\nartichoke, globe artichoke\nbell pepper\ncardoon\nmushroom\nGranny Smith\nstrawberry\norange\nlemon\nfig\npineapple, ananas\nbanana\njackfruit, jak, jack\ncustard apple\npomegranate\nhay\ncarbonara\nchocolate sauce, chocolate syrup\ndough\nmeat loaf, meatloaf\npizza, pizza pie\npotpie\nburrito\nred wine\nespresso\ncup\neggnog\nalp\nbubble\ncliff, drop, drop-off\ncoral reef\ngeyser\nlakeside, lakeshore\npromontory, headland, head, foreland\nsandbar, sand bar\nseashore, coast, seacoast, sea-coast\nvalley, vale\nvolcano\nballplayer, baseball player\ngroom, bridegroom\nscuba diver\nrapeseed\ndaisy\nyellow lady\'s slipper, yellow lady-slipper, Cypripedium calceolus, Cypripedium parviflorum\ncorn\nacorn\nhip, rose hip, rosehip\nbuckeye, horse chestnut, conker\ncoral fungus\nagaric\ngyromitra\nstinkhorn, carrion fungus\nearthstar\nhen-of-the-woods, hen of the woods, Polyporus frondosus, Grifola frondosa\nbolete\near, spike, capitulum\ntoilet tissue, toilet paper, bathroom tissue\'\'\'.split(""\\n"")'"
datagenerator.py,11,"b'# Created on Wed May 31 14:48:46 2017\n#\n# @author: Frederik Kratzert\n\n""""""Containes a helper class for image input pipelines in tensorflow.""""""\n\nimport tensorflow as tf\nimport numpy as np\n\nfrom tensorflow.contrib.data import Dataset\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework.ops import convert_to_tensor\n\nIMAGENET_MEAN = tf.constant([123.68, 116.779, 103.939], dtype=tf.float32)\n\n\nclass ImageDataGenerator(object):\n    """"""Wrapper class around the new Tensorflows dataset pipeline.\n\n    Requires Tensorflow >= version 1.12rc0\n    """"""\n\n    def __init__(self, txt_file, mode, batch_size, num_classes, shuffle=True,\n                 buffer_size=1000):\n        """"""Create a new ImageDataGenerator.\n\n        Recieves a path string to a text file, which consists of many lines,\n        where each line has first a path string to an image and seperated by\n        a space an integer, referring to the class number. Using this data,\n        this class will create TensrFlow datasets, that can be used to train\n        e.g. a convolutional neural network.\n\n        Args:\n            txt_file: Path to the text file.\n            mode: Either \'training\' or \'validation\'. Depending on this value,\n                different parsing functions will be used.\n            batch_size: Number of images per batch.\n            num_classes: Number of classes in the dataset.\n            shuffle: Wether or not to shuffle the data in the dataset and the\n                initial file list.\n            buffer_size: Number of images used as buffer for TensorFlows\n                shuffling of the dataset.\n\n        Raises:\n            ValueError: If an invalid mode is passed.\n\n        """"""\n        self.txt_file = txt_file\n        self.num_classes = num_classes\n\n        # retrieve the data from the text file\n        self._read_txt_file()\n\n        # number of samples in the dataset\n        self.data_size = len(self.labels)\n\n        # initial shuffling of the file and label lists (together!)\n        if shuffle:\n            self._shuffle_lists()\n\n        # convert lists to TF tensor\n        self.img_paths = convert_to_tensor(self.img_paths, dtype=dtypes.string)\n        self.labels = convert_to_tensor(self.labels, dtype=dtypes.int32)\n\n        # create dataset\n        data = Dataset.from_tensor_slices((self.img_paths, self.labels))\n\n        # distinguish between train/infer. when calling the parsing functions\n        if mode == \'training\':\n            data = data.map(self._parse_function_train, num_threads=8,\n                      output_buffer_size=100*batch_size)\n\n        elif mode == \'inference\':\n            data = data.map(self._parse_function_inference, num_threads=8,\n                      output_buffer_size=100*batch_size)\n\n        else:\n            raise ValueError(""Invalid mode \'%s\'."" % (mode))\n\n        # shuffle the first `buffer_size` elements of the dataset\n        if shuffle:\n            data = data.shuffle(buffer_size=buffer_size)\n\n        # create a new dataset with batches of images\n        data = data.batch(batch_size)\n\n        self.data = data\n\n    def _read_txt_file(self):\n        """"""Read the content of the text file and store it into lists.""""""\n        self.img_paths = []\n        self.labels = []\n        with open(self.txt_file, \'r\') as f:\n            lines = f.readlines()\n            for line in lines:\n                items = line.split(\' \')\n                self.img_paths.append(items[0])\n                self.labels.append(int(items[1]))\n\n    def _shuffle_lists(self):\n        """"""Conjoined shuffling of the list of paths and labels.""""""\n        path = self.img_paths\n        labels = self.labels\n        permutation = np.random.permutation(self.data_size)\n        self.img_paths = []\n        self.labels = []\n        for i in permutation:\n            self.img_paths.append(path[i])\n            self.labels.append(labels[i])\n\n    def _parse_function_train(self, filename, label):\n        """"""Input parser for samples of the training set.""""""\n        # convert label number into one-hot-encoding\n        one_hot = tf.one_hot(label, self.num_classes)\n\n        # load and preprocess the image\n        img_string = tf.read_file(filename)\n        img_decoded = tf.image.decode_png(img_string, channels=3)\n        img_resized = tf.image.resize_images(img_decoded, [227, 227])\n        """"""\n        Dataaugmentation comes here.\n        """"""\n        img_centered = tf.subtract(img_resized, IMAGENET_MEAN)\n\n        # RGB -> BGR\n        img_bgr = img_centered[:, :, ::-1]\n\n        return img_bgr, one_hot\n\n    def _parse_function_inference(self, filename, label):\n        """"""Input parser for samples of the validation/test set.""""""\n        # convert label number into one-hot-encoding\n        one_hot = tf.one_hot(label, self.num_classes)\n\n        # load and preprocess the image\n        img_string = tf.read_file(filename)\n        img_decoded = tf.image.decode_png(img_string, channels=3)\n        img_resized = tf.image.resize_images(img_decoded, [227, 227])\n        img_centered = tf.subtract(img_resized, IMAGENET_MEAN)\n\n        # RGB -> BGR\n        img_bgr = img_centered[:, :, ::-1]\n\n        return img_bgr, one_hot\n'"
finetune.py,24,"b'""""""Script to finetune AlexNet using Tensorflow.\n\nWith this script you can finetune AlexNet as provided in the alexnet.py\nclass on any given dataset. Specify the configuration settings at the\nbeginning according to your problem.\nThis script was written for TensorFlow >= version 1.2rc0 and comes with a blog\npost, which you can find here:\n\nhttps://kratzert.github.io/2017/02/24/finetuning-alexnet-with-tensorflow.html\n\nAuthor: Frederik Kratzert\ncontact: f.kratzert(at)gmail.com\n""""""\n\nimport os\n\nimport numpy as np\nimport tensorflow as tf\n\nfrom alexnet import AlexNet\nfrom datagenerator import ImageDataGenerator\nfrom datetime import datetime\nfrom tensorflow.contrib.data import Iterator\n\n""""""\nConfiguration Part.\n""""""\n\n# Path to the textfiles for the trainings and validation set\ntrain_file = \'/path/to/train.txt\'\nval_file = \'/path/to/val.txt\'\n\n# Learning params\nlearning_rate = 0.01\nnum_epochs = 10\nbatch_size = 128\n\n# Network params\ndropout_rate = 0.5\nnum_classes = 2\ntrain_layers = [\'fc8\', \'fc7\', \'fc6\']\n\n# How often we want to write the tf.summary data to disk\ndisplay_step = 20\n\n# Path for tf.summary.FileWriter and to store model checkpoints\nfilewriter_path = ""/tmp/finetune_alexnet/tensorboard""\ncheckpoint_path = ""/tmp/finetune_alexnet/checkpoints""\n\n""""""\nMain Part of the finetuning Script.\n""""""\n\n# Create parent path if it doesn\'t exist\nif not os.path.isdir(checkpoint_path):\n    os.mkdir(checkpoint_path)\n\n# Place data loading and preprocessing on the cpu\nwith tf.device(\'/cpu:0\'):\n    tr_data = ImageDataGenerator(train_file,\n                                 mode=\'training\',\n                                 batch_size=batch_size,\n                                 num_classes=num_classes,\n                                 shuffle=True)\n    val_data = ImageDataGenerator(val_file,\n                                  mode=\'inference\',\n                                  batch_size=batch_size,\n                                  num_classes=num_classes,\n                                  shuffle=False)\n\n    # create an reinitializable iterator given the dataset structure\n    iterator = Iterator.from_structure(tr_data.data.output_types,\n                                       tr_data.data.output_shapes)\n    next_batch = iterator.get_next()\n\n# Ops for initializing the two different iterators\ntraining_init_op = iterator.make_initializer(tr_data.data)\nvalidation_init_op = iterator.make_initializer(val_data.data)\n\n# TF placeholder for graph input and output\nx = tf.placeholder(tf.float32, [batch_size, 227, 227, 3])\ny = tf.placeholder(tf.float32, [batch_size, num_classes])\nkeep_prob = tf.placeholder(tf.float32)\n\n# Initialize model\nmodel = AlexNet(x, keep_prob, num_classes, train_layers)\n\n# Link variable to model output\nscore = model.fc8\n\n# List of trainable variables of the layers we want to train\nvar_list = [v for v in tf.trainable_variables() if v.name.split(\'/\')[0] in train_layers]\n\n# Op for calculating the loss\nwith tf.name_scope(""cross_ent""):\n    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=score,\n                                                                  labels=y))\n\n# Train op\nwith tf.name_scope(""train""):\n    # Get gradients of all trainable variables\n    gradients = tf.gradients(loss, var_list)\n    gradients = list(zip(gradients, var_list))\n\n    # Create optimizer and apply gradient descent to the trainable variables\n    optimizer = tf.train.GradientDescentOptimizer(learning_rate)\n    train_op = optimizer.apply_gradients(grads_and_vars=gradients)\n\n# Add gradients to summary\nfor gradient, var in gradients:\n    tf.summary.histogram(var.name + \'/gradient\', gradient)\n\n# Add the variables we train to the summary\nfor var in var_list:\n    tf.summary.histogram(var.name, var)\n\n# Add the loss to summary\ntf.summary.scalar(\'cross_entropy\', loss)\n\n\n# Evaluation op: Accuracy of the model\nwith tf.name_scope(""accuracy""):\n    correct_pred = tf.equal(tf.argmax(score, 1), tf.argmax(y, 1))\n    accuracy = tf.reduce_mean(tf.cast(correct_pred, tf.float32))\n\n# Add the accuracy to the summary\ntf.summary.scalar(\'accuracy\', accuracy)\n\n# Merge all summaries together\nmerged_summary = tf.summary.merge_all()\n\n# Initialize the FileWriter\nwriter = tf.summary.FileWriter(filewriter_path)\n\n# Initialize an saver for store model checkpoints\nsaver = tf.train.Saver()\n\n# Get the number of training/validation steps per epoch\ntrain_batches_per_epoch = int(np.floor(tr_data.data_size/batch_size))\nval_batches_per_epoch = int(np.floor(val_data.data_size / batch_size))\n\n# Start Tensorflow session\nwith tf.Session() as sess:\n\n    # Initialize all variables\n    sess.run(tf.global_variables_initializer())\n\n    # Add the model graph to TensorBoard\n    writer.add_graph(sess.graph)\n\n    # Load the pretrained weights into the non-trainable layer\n    model.load_initial_weights(sess)\n\n    print(""{} Start training..."".format(datetime.now()))\n    print(""{} Open Tensorboard at --logdir {}"".format(datetime.now(),\n                                                      filewriter_path))\n\n    # Loop over number of epochs\n    for epoch in range(num_epochs):\n\n        print(""{} Epoch number: {}"".format(datetime.now(), epoch+1))\n\n        # Initialize iterator with the training dataset\n        sess.run(training_init_op)\n\n        for step in range(train_batches_per_epoch):\n\n            # get next batch of data\n            img_batch, label_batch = sess.run(next_batch)\n\n            # And run the training op\n            sess.run(train_op, feed_dict={x: img_batch,\n                                          y: label_batch,\n                                          keep_prob: dropout_rate})\n\n            # Generate summary with the current batch of data and write to file\n            if step % display_step == 0:\n                s = sess.run(merged_summary, feed_dict={x: img_batch,\n                                                        y: label_batch,\n                                                        keep_prob: 1.})\n\n                writer.add_summary(s, epoch*train_batches_per_epoch + step)\n\n        # Validate the model on the entire validation set\n        print(""{} Start validation"".format(datetime.now()))\n        sess.run(validation_init_op)\n        test_acc = 0.\n        test_count = 0\n        for _ in range(val_batches_per_epoch):\n\n            img_batch, label_batch = sess.run(next_batch)\n            acc = sess.run(accuracy, feed_dict={x: img_batch,\n                                                y: label_batch,\n                                                keep_prob: 1.})\n            test_acc += acc\n            test_count += 1\n        test_acc /= test_count\n        print(""{} Validation Accuracy = {:.4f}"".format(datetime.now(),\n                                                       test_acc))\n        print(""{} Saving checkpoint of model..."".format(datetime.now()))\n\n        # save checkpoint of the model\n        checkpoint_name = os.path.join(checkpoint_path,\n                                       \'model_epoch\'+str(epoch+1)+\'.ckpt\')\n        save_path = saver.save(sess, checkpoint_name)\n\n        print(""{} Model checkpoint saved at {}"".format(datetime.now(),\n                                                       checkpoint_name))\n'"
