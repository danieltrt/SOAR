file_path,api_count,code
gen_sample_by_captcha.py,0,"b'# -*- coding: UTF-8 -*-\n""""""\n\xe4\xbd\xbf\xe7\x94\xa8captcha lib\xe7\x94\x9f\xe6\x88\x90\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xef\xbc\x88\xe5\x89\x8d\xe6\x8f\x90\xef\xbc\x9apip install captcha\xef\xbc\x89\n""""""\nfrom captcha.image import ImageCaptcha\nimport os\nimport random\nimport time\nimport json\n\n\ndef gen_special_img(text, file_path, width, height):\n    # \xe7\x94\x9f\xe6\x88\x90img\xe6\x96\x87\xe4\xbb\xb6\n    generator = ImageCaptcha(width=width, height=height)  # \xe6\x8c\x87\xe5\xae\x9a\xe5\xa4\xa7\xe5\xb0\x8f\n    img = generator.generate_image(text)  # \xe7\x94\x9f\xe6\x88\x90\xe5\x9b\xbe\xe7\x89\x87\n    img.save(file_path)  # \xe4\xbf\x9d\xe5\xad\x98\xe5\x9b\xbe\xe7\x89\x87\n\n\ndef gen_ima_by_batch(root_dir, image_suffix, characters, count, char_count, width, height):\n    # \xe5\x88\xa4\xe6\x96\xad\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe6\x98\xaf\xe5\x90\xa6\xe5\xad\x98\xe5\x9c\xa8\n    if not os.path.exists(root_dir):\n        os.makedirs(root_dir)\n\n    for index, i in enumerate(range(count)):\n        text = """"\n        for j in range(char_count):\n            text += random.choice(characters)\n\n        timec = str(time.time()).replace(""."", """")\n        p = os.path.join(root_dir, ""{}_{}.{}"".format(text, timec, image_suffix))\n        gen_special_img(text, p, width, height)\n\n        print(""Generate captcha image => {}"".format(index + 1))\n\n\ndef main():\n    with open(""conf/captcha_config.json"", ""r"") as f:\n        config = json.load(f)\n    # \xe9\x85\x8d\xe7\xbd\xae\xe5\x8f\x82\xe6\x95\xb0\n    root_dir = config[""root_dir""]  # \xe5\x9b\xbe\xe7\x89\x87\xe5\x82\xa8\xe5\xad\x98\xe8\xb7\xaf\xe5\xbe\x84\n    image_suffix = config[""image_suffix""]  # \xe5\x9b\xbe\xe7\x89\x87\xe5\x82\xa8\xe5\xad\x98\xe5\x90\x8e\xe7\xbc\x80\n    characters = config[""characters""]  # \xe5\x9b\xbe\xe7\x89\x87\xe4\xb8\x8a\xe6\x98\xbe\xe7\xa4\xba\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe9\x9b\x86 # characters = ""0123456789abcdefghijklmnopqrstuvwxyz""\n    count = config[""count""]  # \xe7\x94\x9f\xe6\x88\x90\xe5\xa4\x9a\xe5\xb0\x91\xe5\xbc\xa0\xe6\xa0\xb7\xe6\x9c\xac\n    char_count = config[""char_count""]  # \xe5\x9b\xbe\xe7\x89\x87\xe4\xb8\x8a\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe6\x95\xb0\xe9\x87\x8f\n\n    # \xe8\xae\xbe\xe7\xbd\xae\xe5\x9b\xbe\xe7\x89\x87\xe9\xab\x98\xe5\xba\xa6\xe5\x92\x8c\xe5\xae\xbd\xe5\xba\xa6\n    width = config[""width""]\n    height = config[""height""]\n\n    gen_ima_by_batch(root_dir, image_suffix, characters, count, char_count, width, height)\n\n\nif __name__ == \'__main__\':\n    main()\n'"
recognize_local.py,0,"b'#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n""""""\n\xe4\xbd\xbf\xe7\x94\xa8\xe8\x87\xaa\xe5\xbb\xba\xe7\x9a\x84\xe6\x8e\xa5\xe5\x8f\xa3\xe8\xaf\x86\xe5\x88\xab\xe6\x9d\xa5\xe8\x87\xaa\xe7\xbd\x91\xe7\xbb\x9c\xe7\x9a\x84\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\n\xe9\x9c\x80\xe8\xa6\x81\xe9\x85\x8d\xe7\xbd\xae\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\n    remote_url = ""https://www.xxxxxxx.com/getImg""  \xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xe9\x93\xbe\xe6\x8e\xa5\xe5\x9c\xb0\xe5\x9d\x80\n    rec_times = 1  \xe8\xaf\x86\xe5\x88\xab\xe7\x9a\x84\xe6\xac\xa1\xe6\x95\xb0\n""""""\nimport datetime\nimport requests\nfrom io import BytesIO\nimport time\nimport json\nimport os\n\n\ndef recognize_captcha(test_path, save_path, image_suffix):\n    image_file_name = \'captcha.{}\'.format(image_suffix)\n\n    with open(test_path, ""rb"") as f:\n        content = f.read()\n\n    # \xe8\xaf\x86\xe5\x88\xab\n    s = time.time()\n    url = ""http://127.0.0.1:6000/b""\n    files = {\'image_file\': (image_file_name, BytesIO(content), \'application\')}\n    r = requests.post(url=url, files=files)\n    e = time.time()\n\n    # \xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c\n    print(""\xe6\x8e\xa5\xe5\x8f\xa3\xe5\x93\x8d\xe5\xba\x94: {}"".format(r.text))\n    predict_text = json.loads(r.text)[""value""]\n    now_time = datetime.datetime.now().strftime(\'%Y-%m-%d %H:%M:%S\')\n    print(""\xe3\x80\x90{}\xe3\x80\x91 \xe8\x80\x97\xe6\x97\xb6\xef\xbc\x9a{}ms \xe9\xa2\x84\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x9a{}"".format(now_time, int((e-s)*1000), predict_text))\n\n    # \xe4\xbf\x9d\xe5\xad\x98\xe6\x96\x87\xe4\xbb\xb6\n    img_name = ""{}_{}.{}"".format(predict_text, str(time.time()).replace(""."", """"), image_suffix)\n    path = os.path.join(save_path, img_name)\n    with open(path, ""wb"") as f:\n        f.write(content)\n    print(""============== end =============="")\n\n\ndef main():\n    with open(""conf/sample_config.json"", ""r"") as f:\n        sample_conf = json.load(f)\n\n    # \xe9\x85\x8d\xe7\xbd\xae\xe7\x9b\xb8\xe5\x85\xb3\xe5\x8f\x82\xe6\x95\xb0\n    test_path = ""sample/test/0401_15440848576253345.png""  # \xe6\xb5\x8b\xe8\xaf\x95\xe8\xaf\x86\xe5\x88\xab\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\xe8\xb7\xaf\xe5\xbe\x84\n    save_path = sample_conf[""local_image_dir""]  # \xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe5\x9c\xb0\xe5\x9d\x80\n    image_suffix = sample_conf[""image_suffix""]  # \xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8e\xe7\xbc\x80\n    recognize_captcha(test_path, save_path, image_suffix)\n\n\nif __name__ == \'__main__\':\n    main()\n    \n\n'"
recognize_online.py,0,"b'#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n""""""\n\xe4\xbd\xbf\xe7\x94\xa8\xe8\x87\xaa\xe5\xbb\xba\xe7\x9a\x84\xe6\x8e\xa5\xe5\x8f\xa3\xe8\xaf\x86\xe5\x88\xab\xe6\x9d\xa5\xe8\x87\xaa\xe7\xbd\x91\xe7\xbb\x9c\xe7\x9a\x84\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\n\xe9\x9c\x80\xe8\xa6\x81\xe9\x85\x8d\xe7\xbd\xae\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\n    remote_url = ""https://www.xxxxxxx.com/getImg""  \xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xe9\x93\xbe\xe6\x8e\xa5\xe5\x9c\xb0\xe5\x9d\x80\n    rec_times = 1  \xe8\xaf\x86\xe5\x88\xab\xe7\x9a\x84\xe6\xac\xa1\xe6\x95\xb0\n""""""\nimport datetime\nimport requests\nfrom io import BytesIO\nimport time\nimport json\nimport os\n\n\ndef recognize_captcha(remote_url, rec_times, save_path, image_suffix):\n    image_file_name = \'captcha.{}\'.format(image_suffix)\n\n    headers = {\n        \'user-agent\': ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.146 Safari/537.36"",\n    }\n\n    for index in range(rec_times):\n        # \xe8\xaf\xb7\xe6\xb1\x82\n        while True:\n            try:\n                response = requests.request(""GET"", remote_url, headers=headers, timeout=6)\n                if response.text:\n                    break\n                else:\n                    print(""retry, response.text is empty"")\n            except Exception as ee:\n                print(ee)\n\n        # \xe8\xaf\x86\xe5\x88\xab\n        s = time.time()\n        url = ""http://127.0.0.1:6000/b""\n        files = {\'image_file\': (image_file_name, BytesIO(response.content), \'application\')}\n        r = requests.post(url=url, files=files)\n        e = time.time()\n\n        # \xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c\n        print(""\xe6\x8e\xa5\xe5\x8f\xa3\xe5\x93\x8d\xe5\xba\x94: {}"".format(r.text))\n        predict_text = json.loads(r.text)[""value""]\n        now_time = datetime.datetime.now().strftime(\'%Y-%m-%d %H:%M:%S\')\n        print(""\xe3\x80\x90{}\xe3\x80\x91 index:{} \xe8\x80\x97\xe6\x97\xb6\xef\xbc\x9a{}ms \xe9\xa2\x84\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x9a{}"".format(now_time, index, int((e-s)*1000), predict_text))\n\n        # \xe4\xbf\x9d\xe5\xad\x98\xe6\x96\x87\xe4\xbb\xb6\n        img_name = ""{}_{}.{}"".format(predict_text, str(time.time()).replace(""."", """"), image_suffix)\n        path = os.path.join(save_path, img_name)\n        with open(path, ""wb"") as f:\n            f.write(response.content)\n        print(""============== end =============="")\n\n\ndef main():\n    with open(""conf/sample_config.json"", ""r"") as f:\n        sample_conf = json.load(f)\n\n    # \xe9\x85\x8d\xe7\xbd\xae\xe7\x9b\xb8\xe5\x85\xb3\xe5\x8f\x82\xe6\x95\xb0\n    save_path = sample_conf[""online_image_dir""]  # \xe4\xb8\x8b\xe8\xbd\xbd\xe5\x9b\xbe\xe7\x89\x87\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe5\x9c\xb0\xe5\x9d\x80\n    remote_url = sample_conf[""remote_url""]  # \xe7\xbd\x91\xe7\xbb\x9c\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xe5\x9c\xb0\xe5\x9d\x80\n    image_suffix = sample_conf[""image_suffix""]  # \xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8e\xe7\xbc\x80\n    rec_times = 1\n    recognize_captcha(remote_url, rec_times, save_path, image_suffix)\n\n\nif __name__ == \'__main__\':\n    main()\n    \n\n'"
recognize_time_test.py,0,"b'#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n""""""\n\xe4\xbd\xbf\xe7\x94\xa8\xe8\x87\xaa\xe5\xbb\xba\xe7\x9a\x84\xe6\x8e\xa5\xe5\x8f\xa3\xe8\xaf\x86\xe5\x88\xab\xe6\x9d\xa5\xe8\x87\xaa\xe7\xbd\x91\xe7\xbb\x9c\xe7\x9a\x84\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\n\xe9\x9c\x80\xe8\xa6\x81\xe9\x85\x8d\xe7\xbd\xae\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\n    remote_url = ""https://www.xxxxxxx.com/getImg""  \xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xe9\x93\xbe\xe6\x8e\xa5\xe5\x9c\xb0\xe5\x9d\x80\n    rec_times = 1  \xe8\xaf\x86\xe5\x88\xab\xe7\x9a\x84\xe6\xac\xa1\xe6\x95\xb0\n""""""\nimport datetime\nimport requests\nfrom io import BytesIO\nimport time\nimport json\nimport os\n\n\ndef recognize_captcha(index, test_path, save_path, image_suffix):\n    image_file_name = \'captcha.{}\'.format(image_suffix)\n\n    with open(test_path, ""rb"") as f:\n        content = f.read()\n\n    # \xe8\xaf\x86\xe5\x88\xab\n    s = time.time()\n    url = ""http://127.0.0.1:6000/b""\n    files = {\'image_file\': (image_file_name, BytesIO(content), \'application\')}\n    r = requests.post(url=url, files=files)\n    e = time.time()\n\n    # \xe6\xb5\x8b\xe8\xaf\x95\xe5\x8f\x82\xe6\x95\xb0\n    result_dict = json.loads(r.text)[""value""]  # \xe5\x93\x8d\xe5\xba\x94\n    predict_text = result_dict[""value""]  # \xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c\n    whole_time_for_work = int((e - s) * 1000)\n    speed_time_by_rec = result_dict[""speed_time(ms)""]  # \xe6\xa8\xa1\xe5\x9e\x8b\xe8\xaf\x86\xe5\x88\xab\xe8\x80\x97\xe6\x97\xb6\n    request_time_by_rec = whole_time_for_work - speed_time_by_rec  # \xe8\xaf\xb7\xe6\xb1\x82\xe8\x80\x97\xe6\x97\xb6\n    now_time = datetime.datetime.now().strftime(\'%Y-%m-%d@%H:%M:%S\')  # \xe5\xbd\x93\xe5\x89\x8d\xe6\x97\xb6\xe9\x97\xb4\n\n    # \xe8\xae\xb0\xe5\xbd\x95\xe6\x97\xa5\xe5\xbf\x97\n    log = ""{},{},{},{},{},{}\\n""\\\n        .format(index, predict_text, now_time, whole_time_for_work, speed_time_by_rec, request_time_by_rec)\n    with open(""./test.csv"", ""a+"") as f:\n        f.write(log)\n\n    # \xe8\xbe\x93\xe5\x87\xba\xe7\xbb\x93\xe6\x9e\x9c\xe5\x88\xb0\xe6\x8e\xa7\xe5\x88\xb6\xe5\x8f\xb0\n    print(""\xe6\xac\xa1\xe6\x95\xb0\xef\xbc\x9a{},\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x9a{},\xe6\x97\xb6\xe5\x88\xbb\xef\xbc\x9a{},\xe6\x80\xbb\xe8\x80\x97\xe6\x97\xb6\xef\xbc\x9a{}ms,\xe8\xaf\x86\xe5\x88\xab\xef\xbc\x9a{}ms,\xe8\xaf\xb7\xe6\xb1\x82\xef\xbc\x9a{}ms""\n          .format(index, predict_text, now_time, whole_time_for_work, speed_time_by_rec, request_time_by_rec))\n\n    # \xe4\xbf\x9d\xe5\xad\x98\xe6\x96\x87\xe4\xbb\xb6\n    # img_name = ""{}_{}.{}"".format(predict_text, str(time.time()).replace(""."", """"), image_suffix)\n    # path = os.path.join(save_path, img_name)\n    # with open(path, ""wb"") as f:\n    #     f.write(content)\n\n\ndef main():\n    with open(""conf/sample_config.json"", ""r"") as f:\n        sample_conf = json.load(f)\n\n    # \xe9\x85\x8d\xe7\xbd\xae\xe7\x9b\xb8\xe5\x85\xb3\xe5\x8f\x82\xe6\x95\xb0\n    test_file = ""sample/test/0001_15430304076164024.png""  # \xe6\xb5\x8b\xe8\xaf\x95\xe8\xaf\x86\xe5\x88\xab\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\xe8\xb7\xaf\xe5\xbe\x84\n    save_path = sample_conf[""local_image_dir""]  # \xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe5\x9c\xb0\xe5\x9d\x80\n    image_suffix = sample_conf[""image_suffix""]  # \xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8e\xe7\xbc\x80\n    for i in range(20000):\n        recognize_captcha(i, test_file, save_path, image_suffix)\n\n\nif __name__ == \'__main__\':\n    main()\n    \n\n'"
test_batch.py,3,"b'# -*- coding: utf-8 -*-\nimport json\n\nimport tensorflow as tf\nimport numpy as np\nimport time\nfrom PIL import Image\nimport random\nimport os\nfrom cnnlib.network import CNN\n\n\nclass TestError(Exception):\n    pass\n\n\nclass TestBatch(CNN):\n    def __init__(self, img_path, char_set, model_save_dir, total):\n        # \xe6\xa8\xa1\xe5\x9e\x8b\xe8\xb7\xaf\xe5\xbe\x84\n        self.model_save_dir = model_save_dir\n        # \xe6\x89\x93\xe4\xb9\xb1\xe6\x96\x87\xe4\xbb\xb6\xe9\xa1\xba\xe5\xba\x8f\n        self.img_path = img_path\n        self.img_list = os.listdir(img_path)\n        random.seed(time.time())\n        random.shuffle(self.img_list)\n\n        # \xe8\x8e\xb7\xe5\xbe\x97\xe5\x9b\xbe\xe7\x89\x87\xe5\xae\xbd\xe9\xab\x98\xe5\x92\x8c\xe5\xad\x97\xe7\xac\xa6\xe9\x95\xbf\xe5\xba\xa6\xe5\x9f\xba\xe6\x9c\xac\xe4\xbf\xa1\xe6\x81\xaf\n        label, captcha_array = self.gen_captcha_text_image()\n\n        captcha_shape = captcha_array.shape\n        captcha_shape_len = len(captcha_shape)\n        if captcha_shape_len == 3:\n            image_height, image_width, channel = captcha_shape\n            self.channel = channel\n        elif captcha_shape_len == 2:\n            image_height, image_width = captcha_shape\n        else:\n            raise TestError(""\xe5\x9b\xbe\xe7\x89\x87\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe7\x9f\xa9\xe9\x98\xb5\xe6\x97\xb6\xe5\x87\xba\xe9\x94\x99\xef\xbc\x8c\xe8\xaf\xb7\xe6\xa3\x80\xe6\x9f\xa5\xe5\x9b\xbe\xe7\x89\x87\xe6\xa0\xbc\xe5\xbc\x8f"")\n\n        # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\x8f\x98\xe9\x87\x8f\n        super(TestBatch, self).__init__(image_height, image_width, len(label), char_set, model_save_dir)\n        self.total = total\n\n        # \xe7\x9b\xb8\xe5\x85\xb3\xe4\xbf\xa1\xe6\x81\xaf\xe6\x89\x93\xe5\x8d\xb0\n        print(""-->\xe5\x9b\xbe\xe7\x89\x87\xe5\xb0\xba\xe5\xaf\xb8: {} X {}"".format(image_height, image_width))\n        print(""-->\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xe9\x95\xbf\xe5\xba\xa6: {}"".format(self.max_captcha))\n        print(""-->\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xe5\x85\xb1{}\xe7\xb1\xbb {}"".format(self.char_set_len, char_set))\n        print(""-->\xe4\xbd\xbf\xe7\x94\xa8\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe4\xb8\xba {}"".format(img_path))\n\n    def gen_captcha_text_image(self):\n        """"""\n        \xe8\xbf\x94\xe5\x9b\x9e\xe4\xb8\x80\xe4\xb8\xaa\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xe7\x9a\x84array\xe5\xbd\xa2\xe5\xbc\x8f\xe5\x92\x8c\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe6\xa0\x87\xe7\xad\xbe\n        :return:tuple (str, numpy.array)\n        """"""\n        img_name = random.choice(self.img_list)\n        # \xe6\xa0\x87\xe7\xad\xbe\n        label = img_name.split(""_"")[0]\n        # \xe6\x96\x87\xe4\xbb\xb6\n        img_file = os.path.join(self.img_path, img_name)\n        captcha_image = Image.open(img_file)\n        captcha_array = np.array(captcha_image)  # \xe5\x90\x91\xe9\x87\x8f\xe5\x8c\x96\n\n        return label, captcha_array\n\n    def test_batch(self):\n        y_predict = self.model()\n        total = self.total\n        right = 0\n\n        saver = tf.train.Saver()\n        with tf.Session() as sess:\n            saver.restore(sess, self.model_save_dir)\n            s = time.time()\n            for i in range(total):\n                # test_text, test_image = gen_special_num_image(i)\n                test_text, test_image = self.gen_captcha_text_image()  # \xe9\x9a\x8f\xe6\x9c\xba\n                test_image = self.convert2gray(test_image)\n                test_image = test_image.flatten() / 255\n\n                predict = tf.argmax(tf.reshape(y_predict, [-1, self.max_captcha, self.char_set_len]), 2)\n                text_list = sess.run(predict, feed_dict={self.X: [test_image], self.keep_prob: 1.})\n                predict_text = text_list[0].tolist()\n                p_text = """"\n                for p in predict_text:\n                    p_text += str(self.char_set[p])\n                print(""origin: {} predict: {}"".format(test_text, p_text))\n                if test_text == p_text:\n                    right += 1\n                else:\n                    pass\n            e = time.time()\n        rate = str(right/total * 100) + ""%""\n        print(""\xe6\xb5\x8b\xe8\xaf\x95\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x9a {}/{}"".format(right, total))\n        print(""{}\xe4\xb8\xaa\xe6\xa0\xb7\xe6\x9c\xac\xe8\xaf\x86\xe5\x88\xab\xe8\x80\x97\xe6\x97\xb6{}\xe7\xa7\x92\xef\xbc\x8c\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87{}"".format(total, e-s, rate))\n\n\ndef main():\n    with open(""conf/sample_config.json"", ""r"") as f:\n        sample_conf = json.load(f)\n\n    test_image_dir = sample_conf[""test_image_dir""]\n    model_save_dir = sample_conf[""model_save_dir""]\n\n    use_labels_json_file = sample_conf[\'use_labels_json_file\']\n\n    if use_labels_json_file:\n        with open(""tools/labels.json"", ""r"") as f:\n            char_set = f.read().strip()\n    else:\n        char_set = sample_conf[""char_set""]\n\n    total = 100\n    tb = TestBatch(test_image_dir, char_set, model_save_dir, total)\n    tb.test_batch()\n\n\nif __name__ == \'__main__\':\n    main()\n'"
train_model.py,19,"b'# -*- coding: utf-8 -*-\nimport json\n\nimport tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport time\nfrom PIL import Image\nimport random\nimport os\nfrom cnnlib.network import CNN\n\n\nclass TrainError(Exception):\n    pass\n\n\nclass TrainModel(CNN):\n    def __init__(self, train_img_path, verify_img_path, char_set, model_save_dir, cycle_stop, acc_stop, cycle_save,\n                 image_suffix, train_batch_size, test_batch_size, verify=False):\n        # \xe8\xae\xad\xe7\xbb\x83\xe7\x9b\xb8\xe5\x85\xb3\xe5\x8f\x82\xe6\x95\xb0\n        self.cycle_stop = cycle_stop\n        self.acc_stop = acc_stop\n        self.cycle_save = cycle_save\n        self.train_batch_size = train_batch_size\n        self.test_batch_size = test_batch_size\n\n        self.image_suffix = image_suffix\n        char_set = [str(i) for i in char_set]\n\n        # \xe6\x89\x93\xe4\xb9\xb1\xe6\x96\x87\xe4\xbb\xb6\xe9\xa1\xba\xe5\xba\x8f+\xe6\xa0\xa1\xe9\xaa\x8c\xe5\x9b\xbe\xe7\x89\x87\xe6\xa0\xbc\xe5\xbc\x8f\n        self.train_img_path = train_img_path\n        self.train_images_list = os.listdir(train_img_path)\n        # \xe6\xa0\xa1\xe9\xaa\x8c\xe6\xa0\xbc\xe5\xbc\x8f\n        if verify:\n            self.confirm_image_suffix()\n        # \xe6\x89\x93\xe4\xb9\xb1\xe6\x96\x87\xe4\xbb\xb6\xe9\xa1\xba\xe5\xba\x8f\n        random.seed(time.time())\n        random.shuffle(self.train_images_list)\n\n        # \xe9\xaa\x8c\xe8\xaf\x81\xe9\x9b\x86\xe6\x96\x87\xe4\xbb\xb6\n        self.verify_img_path = verify_img_path\n        self.verify_images_list = os.listdir(verify_img_path)\n\n        # \xe8\x8e\xb7\xe5\xbe\x97\xe5\x9b\xbe\xe7\x89\x87\xe5\xae\xbd\xe9\xab\x98\xe5\x92\x8c\xe5\xad\x97\xe7\xac\xa6\xe9\x95\xbf\xe5\xba\xa6\xe5\x9f\xba\xe6\x9c\xac\xe4\xbf\xa1\xe6\x81\xaf\n        label, captcha_array = self.gen_captcha_text_image(train_img_path, self.train_images_list[0])\n\n        captcha_shape = captcha_array.shape\n        captcha_shape_len = len(captcha_shape)\n        if captcha_shape_len == 3:\n            image_height, image_width, channel = captcha_shape\n            self.channel = channel\n        elif captcha_shape_len == 2:\n            image_height, image_width = captcha_shape\n        else:\n            raise TrainError(""\xe5\x9b\xbe\xe7\x89\x87\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe7\x9f\xa9\xe9\x98\xb5\xe6\x97\xb6\xe5\x87\xba\xe9\x94\x99\xef\xbc\x8c\xe8\xaf\xb7\xe6\xa3\x80\xe6\x9f\xa5\xe5\x9b\xbe\xe7\x89\x87\xe6\xa0\xbc\xe5\xbc\x8f"")\n\n        # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\x8f\x98\xe9\x87\x8f\n        super(TrainModel, self).__init__(image_height, image_width, len(label), char_set, model_save_dir)\n\n        # \xe7\x9b\xb8\xe5\x85\xb3\xe4\xbf\xa1\xe6\x81\xaf\xe6\x89\x93\xe5\x8d\xb0\n        print(""-->\xe5\x9b\xbe\xe7\x89\x87\xe5\xb0\xba\xe5\xaf\xb8: {} X {}"".format(image_height, image_width))\n        print(""-->\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xe9\x95\xbf\xe5\xba\xa6: {}"".format(self.max_captcha))\n        print(""-->\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xe5\x85\xb1{}\xe7\xb1\xbb {}"".format(self.char_set_len, char_set))\n        print(""-->\xe4\xbd\xbf\xe7\x94\xa8\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe4\xb8\xba {}"".format(train_img_path))\n        print(""-->\xe4\xbd\xbf\xe9\xaa\x8c\xe8\xaf\x81\xe9\x9b\x86\xe4\xb8\xba {}"".format(verify_img_path))\n\n        # test model input and output\n        print("">>> Start model test"")\n        batch_x, batch_y = self.get_batch(0, size=100)\n        print("">>> input batch images shape: {}"".format(batch_x.shape))\n        print("">>> input batch labels shape: {}"".format(batch_y.shape))\n\n    @staticmethod\n    def gen_captcha_text_image(img_path, img_name):\n        """"""\n        \xe8\xbf\x94\xe5\x9b\x9e\xe4\xb8\x80\xe4\xb8\xaa\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xe7\x9a\x84array\xe5\xbd\xa2\xe5\xbc\x8f\xe5\x92\x8c\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe4\xb8\xb2\xe6\xa0\x87\xe7\xad\xbe\n        :return:tuple (str, numpy.array)\n        """"""\n        # \xe6\xa0\x87\xe7\xad\xbe\n        label = img_name.split(""_"")[0]\n        # \xe6\x96\x87\xe4\xbb\xb6\n        img_file = os.path.join(img_path, img_name)\n        captcha_image = Image.open(img_file)\n        captcha_array = np.array(captcha_image)  # \xe5\x90\x91\xe9\x87\x8f\xe5\x8c\x96\n        return label, captcha_array\n\n    def get_batch(self, n, size=128):\n        batch_x = np.zeros([size, self.image_height * self.image_width])  # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n        batch_y = np.zeros([size, self.max_captcha * self.char_set_len])  # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n\n        max_batch = int(len(self.train_images_list) / size)\n        # print(max_batch)\n        if max_batch - 1 < 0:\n            raise TrainError(""\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe5\x9b\xbe\xe7\x89\x87\xe6\x95\xb0\xe9\x87\x8f\xe9\x9c\x80\xe8\xa6\x81\xe5\xa4\xa7\xe4\xba\x8e\xe6\xaf\x8f\xe6\x89\xb9\xe6\xac\xa1\xe8\xae\xad\xe7\xbb\x83\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\xe6\x95\xb0\xe9\x87\x8f"")\n        if n > max_batch - 1:\n            n = n % max_batch\n        s = n * size\n        e = (n + 1) * size\n        this_batch = self.train_images_list[s:e]\n        # print(""{}:{}"".format(s, e))\n\n        for i, img_name in enumerate(this_batch):\n            label, image_array = self.gen_captcha_text_image(self.train_img_path, img_name)\n            image_array = self.convert2gray(image_array)  # \xe7\x81\xb0\xe5\xba\xa6\xe5\x8c\x96\xe5\x9b\xbe\xe7\x89\x87\n            batch_x[i, :] = image_array.flatten() / 255  # flatten \xe8\xbd\xac\xe4\xb8\xba\xe4\xb8\x80\xe7\xbb\xb4\n            batch_y[i, :] = self.text2vec(label)  # \xe7\x94\x9f\xe6\x88\x90 oneHot\n        return batch_x, batch_y\n\n    def get_verify_batch(self, size=100):\n        batch_x = np.zeros([size, self.image_height * self.image_width])  # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n        batch_y = np.zeros([size, self.max_captcha * self.char_set_len])  # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n\n        verify_images = []\n        for i in range(size):\n            verify_images.append(random.choice(self.verify_images_list))\n\n        for i, img_name in enumerate(verify_images):\n            label, image_array = self.gen_captcha_text_image(self.verify_img_path, img_name)\n            image_array = self.convert2gray(image_array)  # \xe7\x81\xb0\xe5\xba\xa6\xe5\x8c\x96\xe5\x9b\xbe\xe7\x89\x87\n            batch_x[i, :] = image_array.flatten() / 255  # flatten \xe8\xbd\xac\xe4\xb8\xba\xe4\xb8\x80\xe7\xbb\xb4\n            batch_y[i, :] = self.text2vec(label)  # \xe7\x94\x9f\xe6\x88\x90 oneHot\n        return batch_x, batch_y\n\n    def confirm_image_suffix(self):\n        # \xe5\x9c\xa8\xe8\xae\xad\xe7\xbb\x83\xe5\x89\x8d\xe6\xa0\xa1\xe9\xaa\x8c\xe6\x89\x80\xe6\x9c\x89\xe6\x96\x87\xe4\xbb\xb6\xe6\xa0\xbc\xe5\xbc\x8f\n        print(""\xe5\xbc\x80\xe5\xa7\x8b\xe6\xa0\xa1\xe9\xaa\x8c\xe6\x89\x80\xe6\x9c\x89\xe5\x9b\xbe\xe7\x89\x87\xe5\x90\x8e\xe7\xbc\x80"")\n        for index, img_name in enumerate(self.train_images_list):\n            print(""{} image pass"".format(index), end=\'\\r\')\n            if not img_name.endswith(self.image_suffix):\n                raise TrainError(\'confirm images suffix\xef\xbc\x9ayou request [.{}] file but get file [{}]\'\n                                 .format(self.image_suffix, img_name))\n        print(""\xe6\x89\x80\xe6\x9c\x89\xe5\x9b\xbe\xe7\x89\x87\xe6\xa0\xbc\xe5\xbc\x8f\xe6\xa0\xa1\xe9\xaa\x8c\xe9\x80\x9a\xe8\xbf\x87"")\n\n    def train_cnn(self):\n        y_predict = self.model()\n        print("">>> input batch predict shape: {}"".format(y_predict.shape))\n        print("">>> End model test"")\n        # \xe8\xae\xa1\xe7\xae\x97\xe6\xa6\x82\xe7\x8e\x87 \xe6\x8d\x9f\xe5\xa4\xb1\n        with tf.name_scope(\'cost\'):\n            cost = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=y_predict, labels=self.Y))\n        # \xe6\xa2\xaf\xe5\xba\xa6\xe4\xb8\x8b\xe9\x99\x8d\n        with tf.name_scope(\'train\'):\n            optimizer = tf.train.AdamOptimizer(learning_rate=0.0001).minimize(cost)\n        # \xe8\xae\xa1\xe7\xae\x97\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\n        predict = tf.reshape(y_predict, [-1, self.max_captcha, self.char_set_len])  # \xe9\xa2\x84\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\n        max_idx_p = tf.argmax(predict, 2)  # \xe9\xa2\x84\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\n        max_idx_l = tf.argmax(tf.reshape(self.Y, [-1, self.max_captcha, self.char_set_len]), 2)  # \xe6\xa0\x87\xe7\xad\xbe\n        # \xe8\xae\xa1\xe7\xae\x97\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\n        correct_pred = tf.equal(max_idx_p, max_idx_l)\n        with tf.name_scope(\'char_acc\'):\n            accuracy_char_count = tf.reduce_mean(tf.cast(correct_pred, tf.float32))\n        with tf.name_scope(\'image_acc\'):\n            accuracy_image_count = tf.reduce_mean(tf.reduce_min(tf.cast(correct_pred, tf.float32), axis=1))\n        # \xe6\xa8\xa1\xe5\x9e\x8b\xe4\xbf\x9d\xe5\xad\x98\xe5\xaf\xb9\xe8\xb1\xa1\n        saver = tf.train.Saver()\n        with tf.Session() as sess:\n            init = tf.global_variables_initializer()\n            sess.run(init)\n            # \xe6\x81\xa2\xe5\xa4\x8d\xe6\xa8\xa1\xe5\x9e\x8b\n            if os.path.exists(self.model_save_dir):\n                try:\n                    saver.restore(sess, self.model_save_dir)\n                # \xe5\x88\xa4\xe6\x96\xad\xe6\x8d\x95\xe8\x8e\xb7model\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe4\xb8\xad\xe6\xb2\xa1\xe6\x9c\x89\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x96\x87\xe4\xbb\xb6\xe7\x9a\x84\xe9\x94\x99\xe8\xaf\xaf\n                except ValueError:\n                    print(""model\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\xe4\xb8\xba\xe7\xa9\xba\xef\xbc\x8c\xe5\xb0\x86\xe5\x88\x9b\xe5\xbb\xba\xe6\x96\xb0\xe6\xa8\xa1\xe5\x9e\x8b"")\n            else:\n                pass\n            # \xe5\x86\x99\xe5\x85\xa5\xe6\x97\xa5\xe5\xbf\x97\n            tf.summary.FileWriter(""logs/"", sess.graph)\n\n            step = 1\n            for i in range(self.cycle_stop):\n                batch_x, batch_y = self.get_batch(i, size=self.train_batch_size)\n                # \xe6\xa2\xaf\xe5\xba\xa6\xe4\xb8\x8b\xe9\x99\x8d\xe8\xae\xad\xe7\xbb\x83\n                _, cost_ = sess.run([optimizer, cost],\n                                    feed_dict={self.X: batch_x, self.Y: batch_y, self.keep_prob: 0.75})\n                if step % 10 == 0:\n                    # \xe5\x9f\xba\xe4\xba\x8e\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe7\x9a\x84\xe6\xb5\x8b\xe8\xaf\x95\n                    batch_x_test, batch_y_test = self.get_batch(i, size=self.train_batch_size)\n                    acc_char = sess.run(accuracy_char_count, feed_dict={self.X: batch_x_test, self.Y: batch_y_test, self.keep_prob: 1.})\n                    acc_image = sess.run(accuracy_image_count, feed_dict={self.X: batch_x_test, self.Y: batch_y_test, self.keep_prob: 1.})\n                    print(""\xe7\xac\xac{}\xe6\xac\xa1\xe8\xae\xad\xe7\xbb\x83 >>> "".format(step))\n                    print(""[\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86] \xe5\xad\x97\xe7\xac\xa6\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\xe4\xb8\xba {:.5f} \xe5\x9b\xbe\xe7\x89\x87\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\xe4\xb8\xba {:.5f} >>> loss {:.10f}"".format(acc_char, acc_image, cost_))\n\n                    # with open(""loss_train.csv"", ""a+"") as f:\n                    #     f.write(""{},{},{},{}\\n"".format(step, acc_char, acc_image, cost_))\n\n                    # \xe5\x9f\xba\xe4\xba\x8e\xe9\xaa\x8c\xe8\xaf\x81\xe9\x9b\x86\xe7\x9a\x84\xe6\xb5\x8b\xe8\xaf\x95\n                    batch_x_verify, batch_y_verify = self.get_verify_batch(size=self.test_batch_size)\n                    acc_char = sess.run(accuracy_char_count, feed_dict={self.X: batch_x_verify, self.Y: batch_y_verify, self.keep_prob: 1.})\n                    acc_image = sess.run(accuracy_image_count, feed_dict={self.X: batch_x_verify, self.Y: batch_y_verify, self.keep_prob: 1.})\n                    print(""[\xe9\xaa\x8c\xe8\xaf\x81\xe9\x9b\x86] \xe5\xad\x97\xe7\xac\xa6\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\xe4\xb8\xba {:.5f} \xe5\x9b\xbe\xe7\x89\x87\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\xe4\xb8\xba {:.5f} >>> loss {:.10f}"".format(acc_char, acc_image, cost_))\n\n                    # with open(""loss_test.csv"", ""a+"") as f:\n                    #     f.write(""{}, {},{},{}\\n"".format(step, acc_char, acc_image, cost_))\n\n                    # \xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\xe8\xbe\xbe\xe5\x88\xb099%\xe5\x90\x8e\xe4\xbf\x9d\xe5\xad\x98\xe5\xb9\xb6\xe5\x81\x9c\xe6\xad\xa2\n                    if acc_image > self.acc_stop:\n                        saver.save(sess, self.model_save_dir)\n                        print(""\xe9\xaa\x8c\xe8\xaf\x81\xe9\x9b\x86\xe5\x87\x86\xe7\xa1\xae\xe7\x8e\x87\xe8\xbe\xbe\xe5\x88\xb099%\xef\xbc\x8c\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x88\x90\xe5\x8a\x9f"")\n                        break\n                # \xe6\xaf\x8f\xe8\xae\xad\xe7\xbb\x83500\xe8\xbd\xae\xe5\xb0\xb1\xe4\xbf\x9d\xe5\xad\x98\xe4\xb8\x80\xe6\xac\xa1\n                if i % self.cycle_save == 0:\n                    saver.save(sess, self.model_save_dir)\n                    print(""\xe5\xae\x9a\xe6\x97\xb6\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x88\x90\xe5\x8a\x9f"")\n                step += 1\n            saver.save(sess, self.model_save_dir)\n\n    def recognize_captcha(self):\n        label, captcha_array = self.gen_captcha_text_image(self.train_img_path, random.choice(self.train_images_list))\n\n        f = plt.figure()\n        ax = f.add_subplot(111)\n        ax.text(0.1, 0.9, ""origin:"" + label, ha=\'center\', va=\'center\', transform=ax.transAxes)\n        plt.imshow(captcha_array)\n        # \xe9\xa2\x84\xe6\xb5\x8b\xe5\x9b\xbe\xe7\x89\x87\n        image = self.convert2gray(captcha_array)\n        image = image.flatten() / 255\n\n        y_predict = self.model()\n\n        saver = tf.train.Saver()\n        with tf.Session() as sess:\n            saver.restore(sess, self.model_save_dir)\n            predict = tf.argmax(tf.reshape(y_predict, [-1, self.max_captcha, self.char_set_len]), 2)\n            text_list = sess.run(predict, feed_dict={self.X: [image], self.keep_prob: 1.})\n            predict_text = text_list[0].tolist()\n\n        print(""\xe6\xad\xa3\xe7\xa1\xae: {}  \xe9\xa2\x84\xe6\xb5\x8b: {}"".format(label, predict_text))\n        # \xe6\x98\xbe\xe7\xa4\xba\xe5\x9b\xbe\xe7\x89\x87\xe5\x92\x8c\xe9\xa2\x84\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\n        p_text = """"\n        for p in predict_text:\n            p_text += str(self.char_set[p])\n        print(p_text)\n        plt.text(20, 1, \'predict:{}\'.format(p_text))\n        plt.show()\n\n\ndef main():\n    with open(""conf/sample_config.json"", ""r"") as f:\n        sample_conf = json.load(f)\n\n    train_image_dir = sample_conf[""train_image_dir""]\n    verify_image_dir = sample_conf[""test_image_dir""]\n    model_save_dir = sample_conf[""model_save_dir""]\n    cycle_stop = sample_conf[""cycle_stop""]\n    acc_stop = sample_conf[""acc_stop""]\n    cycle_save = sample_conf[""cycle_save""]\n    enable_gpu = sample_conf[""enable_gpu""]\n    image_suffix = sample_conf[\'image_suffix\']\n    use_labels_json_file = sample_conf[\'use_labels_json_file\']\n    train_batch_size = sample_conf[\'train_batch_size\']\n    test_batch_size = sample_conf[\'test_batch_size\']\n\n    if use_labels_json_file:\n        with open(""tools/labels.json"", ""r"") as f:\n            char_set = f.read().strip()\n    else:\n        char_set = sample_conf[""char_set""]\n\n    if not enable_gpu:\n        # \xe8\xae\xbe\xe7\xbd\xae\xe4\xbb\xa5\xe4\xb8\x8b\xe7\x8e\xaf\xe5\xa2\x83\xe5\x8f\x98\xe9\x87\x8f\xe5\x8f\xaf\xe5\xbc\x80\xe5\x90\xafCPU\xe8\xaf\x86\xe5\x88\xab\n        os.environ[""CUDA_DEVICE_ORDER""] = ""PCI_BUS_ID""\n        os.environ[""CUDA_VISIBLE_DEVICES""] = ""-1""\n\n    tm = TrainModel(train_image_dir, verify_image_dir, char_set, model_save_dir, cycle_stop, acc_stop, cycle_save,\n                    image_suffix, train_batch_size, test_batch_size, verify=False)\n    tm.train_cnn()  # \xe5\xbc\x80\xe5\xa7\x8b\xe8\xae\xad\xe7\xbb\x83\xe6\xa8\xa1\xe5\x9e\x8b\n    # tm.recognize_captcha()  # \xe8\xaf\x86\xe5\x88\xab\xe5\x9b\xbe\xe7\x89\x87\xe7\xa4\xba\xe4\xbe\x8b\n\n\nif __name__ == \'__main__\':\n    main()\n'"
verify_and_split_data.py,0,"b'""""""\n\xe9\xaa\x8c\xe8\xaf\x81\xe5\x9b\xbe\xe7\x89\x87\xe5\xb0\xba\xe5\xaf\xb8\xe5\x92\x8c\xe5\x88\x86\xe7\xa6\xbb\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xef\xbc\x885%\xef\xbc\x89\xe5\x92\x8c\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xef\xbc\x8895%\xef\xbc\x89\n\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x8c\xe6\x9c\x89\xe6\x96\xb0\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\xe5\x90\x8e\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe6\x8a\x8a\xe5\x9b\xbe\xe7\x89\x87\xe6\x94\xbe\xe5\x9c\xa8new\xe7\x9b\xae\xe5\xbd\x95\xe9\x87\x8c\xe9\x9d\xa2\xe4\xbd\xbf\xe7\x94\xa8\xe3\x80\x82\n""""""\nimport json\n\nfrom PIL import Image\nimport random\nimport os\nimport shutil\n\n\ndef verify(origin_dir, real_width, real_height, image_suffix):\n    """"""\n    \xe6\xa0\xa1\xe9\xaa\x8c\xe5\x9b\xbe\xe7\x89\x87\xe5\xa4\xa7\xe5\xb0\x8f\n    :return:\n    """"""\n    if not os.path.exists(origin_dir):\n        print(""\xe3\x80\x90\xe8\xad\xa6\xe5\x91\x8a\xe3\x80\x91\xe6\x89\xbe\xe4\xb8\x8d\xe5\x88\xb0\xe7\x9b\xae\xe5\xbd\x95{}\xef\xbc\x8c\xe5\x8d\xb3\xe5\xb0\x86\xe5\x88\x9b\xe5\xbb\xba"".format(origin_dir))\n        os.makedirs(origin_dir)\n\n    print(""\xe5\xbc\x80\xe5\xa7\x8b\xe6\xa0\xa1\xe9\xaa\x8c\xe5\x8e\x9f\xe5\xa7\x8b\xe5\x9b\xbe\xe7\x89\x87\xe9\x9b\x86"")\n    # \xe5\x9b\xbe\xe7\x89\x87\xe7\x9c\x9f\xe5\xae\x9e\xe5\xb0\xba\xe5\xaf\xb8\n    real_size = (real_width, real_height)\n    # \xe5\x9b\xbe\xe7\x89\x87\xe5\x90\x8d\xe7\xa7\xb0\xe5\x88\x97\xe8\xa1\xa8\xe5\x92\x8c\xe6\x95\xb0\xe9\x87\x8f\n    img_list = os.listdir(origin_dir)\n    total_count = len(img_list)\n    print(""\xe5\x8e\x9f\xe5\xa7\x8b\xe9\x9b\x86\xe5\x85\xb1\xe6\x9c\x89\xe5\x9b\xbe\xe7\x89\x87: {}\xe5\xbc\xa0"".format(total_count))\n\n    # \xe6\x97\xa0\xe6\x95\x88\xe5\x9b\xbe\xe7\x89\x87\xe5\x88\x97\xe8\xa1\xa8\n    bad_img = []\n\n    # \xe9\x81\x8d\xe5\x8e\x86\xe6\x89\x80\xe6\x9c\x89\xe5\x9b\xbe\xe7\x89\x87\xe8\xbf\x9b\xe8\xa1\x8c\xe9\xaa\x8c\xe8\xaf\x81\n    for index, img_name in enumerate(img_list):\n        file_path = os.path.join(origin_dir, img_name)\n        # \xe8\xbf\x87\xe6\xbb\xa4\xe5\x9b\xbe\xe7\x89\x87\xe4\xb8\x8d\xe6\xad\xa3\xe7\xa1\xae\xe7\x9a\x84\xe5\x90\x8e\xe7\xbc\x80\n        if not img_name.endswith(image_suffix):\n            bad_img.append((index, img_name, ""\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8e\xe7\xbc\x80\xe4\xb8\x8d\xe6\xad\xa3\xe7\xa1\xae""))\n            continue\n\n        # \xe8\xbf\x87\xe6\xbb\xa4\xe5\x9b\xbe\xe7\x89\x87\xe6\xa0\x87\xe7\xad\xbe\xe4\xb8\x8d\xe6\xa0\x87\xe5\x87\x86\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\n        prefix, posfix = img_name.split(""_"")\n        if prefix == """" or posfix == """":\n            bad_img.append((index, img_name, ""\xe5\x9b\xbe\xe7\x89\x87\xe6\xa0\x87\xe7\xad\xbe\xe5\xbc\x82\xe5\xb8\xb8""))\n            continue\n\n        # \xe5\x9b\xbe\xe7\x89\x87\xe6\x97\xa0\xe6\xb3\x95\xe6\xad\xa3\xe5\xb8\xb8\xe6\x89\x93\xe5\xbc\x80\n        try:\n            img = Image.open(file_path)\n        except OSError:\n            bad_img.append((index, img_name, ""\xe5\x9b\xbe\xe7\x89\x87\xe6\x97\xa0\xe6\xb3\x95\xe6\xad\xa3\xe5\xb8\xb8\xe6\x89\x93\xe5\xbc\x80""))\n            continue\n\n        # \xe5\x9b\xbe\xe7\x89\x87\xe5\xb0\xba\xe5\xaf\xb8\xe6\x9c\x89\xe5\xbc\x82\xe5\xb8\xb8\n        if real_size == img.size:\n            print(""{} pass"".format(index), end=\'\\r\')\n        else:\n            bad_img.append((index, img_name, ""\xe5\x9b\xbe\xe7\x89\x87\xe5\xb0\xba\xe5\xaf\xb8\xe5\xbc\x82\xe5\xb8\xb8\xe4\xb8\xba\xef\xbc\x9a{}"".format(img.size)))\n\n    print(""====\xe4\xbb\xa5\xe4\xb8\x8b{}\xe5\xbc\xa0\xe5\x9b\xbe\xe7\x89\x87\xe6\x9c\x89\xe5\xbc\x82\xe5\xb8\xb8===="".format(len(bad_img)))\n    if bad_img:\n        for b in bad_img:\n            print(""[\xe7\xac\xac{}\xe5\xbc\xa0\xe5\x9b\xbe\xe7\x89\x87] [{}] [{}]"".format(b[0], b[1], b[2]))\n    else:\n        print(""\xe6\x9c\xaa\xe5\x8f\x91\xe7\x8e\xb0\xe5\xbc\x82\xe5\xb8\xb8\xef\xbc\x88\xe5\x85\xb1 {} \xe5\xbc\xa0\xe5\x9b\xbe\xe7\x89\x87\xef\xbc\x89"".format(len(img_list)))\n    print(""========end"")\n    return bad_img\n\n\ndef split(origin_dir, train_dir, test_dir, bad_imgs):\n    """"""\n    \xe5\x88\x86\xe7\xa6\xbb\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe5\x92\x8c\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\n    :return:\n    """"""\n    if not os.path.exists(origin_dir):\n        print(""\xe3\x80\x90\xe8\xad\xa6\xe5\x91\x8a\xe3\x80\x91\xe6\x89\xbe\xe4\xb8\x8d\xe5\x88\xb0\xe7\x9b\xae\xe5\xbd\x95{}\xef\xbc\x8c\xe5\x8d\xb3\xe5\xb0\x86\xe5\x88\x9b\xe5\xbb\xba"".format(origin_dir))\n        os.makedirs(origin_dir)\n\n    print(""\xe5\xbc\x80\xe5\xa7\x8b\xe5\x88\x86\xe7\xa6\xbb\xe5\x8e\x9f\xe5\xa7\x8b\xe5\x9b\xbe\xe7\x89\x87\xe9\x9b\x86\xe4\xb8\xba\xef\xbc\x9a\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xef\xbc\x885%\xef\xbc\x89\xe5\x92\x8c\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xef\xbc\x8895%\xef\xbc\x89"")\n\n    # \xe5\x9b\xbe\xe7\x89\x87\xe5\x90\x8d\xe7\xa7\xb0\xe5\x88\x97\xe8\xa1\xa8\xe5\x92\x8c\xe6\x95\xb0\xe9\x87\x8f\n    img_list = os.listdir(origin_dir)\n    for img in bad_imgs:\n        img_list.remove(img)\n    total_count = len(img_list)\n    print(""\xe5\x85\xb1\xe5\x88\x86\xe9\x85\x8d{}\xe5\xbc\xa0\xe5\x9b\xbe\xe7\x89\x87\xe5\x88\xb0\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe5\x92\x8c\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xef\xbc\x8c\xe5\x85\xb6\xe4\xb8\xad{}\xe5\xbc\xa0\xe4\xb8\xba\xe5\xbc\x82\xe5\xb8\xb8\xe7\x95\x99\xe5\x9c\xa8\xe5\x8e\x9f\xe5\xa7\x8b\xe7\x9b\xae\xe5\xbd\x95"".format(total_count, len(bad_imgs)))\n\n    # \xe5\x88\x9b\xe5\xbb\xba\xe6\x96\x87\xe4\xbb\xb6\xe5\xa4\xb9\n    if not os.path.exists(train_dir):\n        os.mkdir(train_dir)\n\n    if not os.path.exists(test_dir):\n        os.mkdir(test_dir)\n\n    # \xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\n    test_count = int(total_count*0.05)\n    test_set = set()\n    for i in range(test_count):\n        while True:\n            file_name = random.choice(img_list)\n            if file_name in test_set:\n                pass\n            else:\n                test_set.add(file_name)\n                img_list.remove(file_name)\n                break\n\n    test_list = list(test_set)\n    print(""\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\xe6\x95\xb0\xe9\x87\x8f\xe4\xb8\xba\xef\xbc\x9a{}"".format(len(test_list)))\n    for file_name in test_list:\n        src = os.path.join(origin_dir, file_name)\n        dst = os.path.join(test_dir, file_name)\n        shutil.move(src, dst)\n\n    # \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\n    train_list = img_list\n    print(""\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\xe6\x95\xb0\xe9\x87\x8f\xe4\xb8\xba\xef\xbc\x9a{}"".format(len(train_list)))\n    for file_name in train_list:\n        src = os.path.join(origin_dir, file_name)\n        dst = os.path.join(train_dir, file_name)\n        shutil.move(src, dst)\n\n    if os.listdir(origin_dir) == 0:\n        print(""migration done"")\n\n\ndef main():\n    with open(""conf/sample_config.json"", ""r"") as f:\n        sample_conf = json.load(f)\n\n    # \xe5\x9b\xbe\xe7\x89\x87\xe8\xb7\xaf\xe5\xbe\x84\n    origin_dir = sample_conf[""origin_image_dir""]\n    new_dir = sample_conf[""new_image_dir""]\n    train_dir = sample_conf[""train_image_dir""]\n    test_dir = sample_conf[""test_image_dir""]\n    # \xe5\x9b\xbe\xe7\x89\x87\xe5\xb0\xba\xe5\xaf\xb8\n    real_width = sample_conf[""image_width""]\n    real_height = sample_conf[""image_height""]\n    # \xe5\x9b\xbe\xe7\x89\x87\xe5\x90\x8e\xe7\xbc\x80\n    image_suffix = sample_conf[""image_suffix""]\n\n    for image_dir in [origin_dir, new_dir]:\n        print("">>> \xe5\xbc\x80\xe5\xa7\x8b\xe6\xa0\xa1\xe9\xaa\x8c\xe7\x9b\xae\xe5\xbd\x95\xef\xbc\x9a[{}]"".format(image_dir))\n        bad_images_info = verify(image_dir, real_width, real_height, image_suffix)\n        bad_imgs = []\n        for info in bad_images_info:\n            bad_imgs.append(info[1])\n        split(image_dir, train_dir, test_dir, bad_imgs)\n\n\nif __name__ == \'__main__\':\n    main()\n'"
webserver_captcha_image.py,0,"b'# -*- coding: UTF-8 -*-\n""""""\n    \xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xe5\x9b\xbe\xe7\x89\x87\xe6\x8e\xa5\xe5\x8f\xa3\xef\xbc\x8c\xe8\xae\xbf\xe9\x97\xae`/captcha/1`\xe8\x8e\xb7\xe5\xbe\x97\xe5\x9b\xbe\xe7\x89\x87\n""""""\nfrom captcha.image import ImageCaptcha\nimport os\nimport random\nfrom flask import Flask, request, jsonify, Response, make_response\nimport json\nimport io\n\n\n# Flask\xe5\xaf\xb9\xe8\xb1\xa1\napp = Flask(__name__)\nbasedir = os.path.abspath(os.path.dirname(__file__))\n\n\nwith open(""conf/captcha_config.json"", ""r"") as f:\n    config = json.load(f)\n# \xe9\x85\x8d\xe7\xbd\xae\xe5\x8f\x82\xe6\x95\xb0\nroot_dir = config[""root_dir""]  # \xe5\x9b\xbe\xe7\x89\x87\xe5\x82\xa8\xe5\xad\x98\xe8\xb7\xaf\xe5\xbe\x84\nimage_suffix = config[""image_suffix""]  # \xe5\x9b\xbe\xe7\x89\x87\xe5\x82\xa8\xe5\xad\x98\xe5\x90\x8e\xe7\xbc\x80\ncharacters = config[""characters""]  # \xe5\x9b\xbe\xe7\x89\x87\xe4\xb8\x8a\xe6\x98\xbe\xe7\xa4\xba\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe9\x9b\x86 # characters = ""0123456789abcdefghijklmnopqrstuvwxyz""\ncount = config[""count""]  # \xe7\x94\x9f\xe6\x88\x90\xe5\xa4\x9a\xe5\xb0\x91\xe5\xbc\xa0\xe6\xa0\xb7\xe6\x9c\xac\nchar_count = config[""char_count""]  # \xe5\x9b\xbe\xe7\x89\x87\xe4\xb8\x8a\xe7\x9a\x84\xe5\xad\x97\xe7\xac\xa6\xe6\x95\xb0\xe9\x87\x8f\n\n# \xe8\xae\xbe\xe7\xbd\xae\xe5\x9b\xbe\xe7\x89\x87\xe9\xab\x98\xe5\xba\xa6\xe5\x92\x8c\xe5\xae\xbd\xe5\xba\xa6\nwidth = config[""width""]\nheight = config[""height""]\n\n\ndef response_headers(content):\n    resp = Response(content)\n    resp.headers[\'Access-Control-Allow-Origin\'] = \'*\'\n    return resp\n\n\ndef gen_special_img():\n    # \xe9\x9a\x8f\xe6\x9c\xba\xe6\x96\x87\xe5\xad\x97\n    text = """"\n    for j in range(char_count):\n        text += random.choice(characters)\n    print(text)\n    # \xe7\x94\x9f\xe6\x88\x90img\xe6\x96\x87\xe4\xbb\xb6\n    generator = ImageCaptcha(width=width, height=height)  # \xe6\x8c\x87\xe5\xae\x9a\xe5\xa4\xa7\xe5\xb0\x8f\n    img = generator.generate_image(text)  # \xe7\x94\x9f\xe6\x88\x90\xe5\x9b\xbe\xe7\x89\x87\n    imgByteArr = io.BytesIO()\n    img.save(imgByteArr, format=\'PNG\')\n    imgByteArr = imgByteArr.getvalue()\n    return imgByteArr\n\n\n@app.route(\'/captcha/\', methods=[\'GET\'])\ndef show_photo():\n    if request.method == \'GET\':\n        image_data = gen_special_img()\n        response = make_response(image_data)\n        response.headers[\'Content-Type\'] = \'image/png\'\n        response.headers[\'Access-Control-Allow-Origin\'] = \'*\'\n        return response\n    else:\n        pass\n\n\nif __name__ == \'__main__\':\n    app.run(\n        host=\'0.0.0.0\',\n        port=6100,\n        debug=True\n    )\n'"
webserver_recognize_api.py,0,"b'# -*- coding: UTF-8 -*-\n""""""\n\xe6\x9e\x84\xe5\xbb\xbaflask\xe6\x8e\xa5\xe5\x8f\xa3\xe6\x9c\x8d\xe5\x8a\xa1\n\xe6\x8e\xa5\xe6\x94\xb6 files={\'image_file\': (\'captcha.jpg\', BytesIO(bytes), \'application\')} \xe5\x8f\x82\xe6\x95\xb0\xe8\xaf\x86\xe5\x88\xab\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\n\xe9\x9c\x80\xe8\xa6\x81\xe9\x85\x8d\xe7\xbd\xae\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\n    image_height = 40\n    image_width = 80\n    max_captcha = 4\n""""""\nimport json\nfrom io import BytesIO\nimport os\nfrom cnnlib.recognition_object import Recognizer\n\nimport time\nfrom flask import Flask, request, jsonify, Response\nfrom PIL import Image\n\n# \xe9\xbb\x98\xe8\xae\xa4\xe4\xbd\xbf\xe7\x94\xa8CPU\nos.environ[""CUDA_DEVICE_ORDER""] = ""PCI_BUS_ID""\nos.environ[""CUDA_VISIBLE_DEVICES""] = ""-1""\n\nwith open(""conf/sample_config.json"", ""r"") as f:\n    sample_conf = json.load(f)\n# \xe9\x85\x8d\xe7\xbd\xae\xe5\x8f\x82\xe6\x95\xb0\nimage_height = sample_conf[""image_height""]\nimage_width = sample_conf[""image_width""]\nmax_captcha = sample_conf[""max_captcha""]\napi_image_dir = sample_conf[""api_image_dir""]\nmodel_save_dir = sample_conf[""model_save_dir""]\nimage_suffix = sample_conf[""image_suffix""]  # \xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8e\xe7\xbc\x80\nuse_labels_json_file = sample_conf[\'use_labels_json_file\']\n\nif use_labels_json_file:\n    with open(""tools/labels.json"", ""r"") as f:\n        char_set = f.read().strip()\nelse:\n    char_set = sample_conf[""char_set""]\n\n# Flask\xe5\xaf\xb9\xe8\xb1\xa1\napp = Flask(__name__)\nbasedir = os.path.abspath(os.path.dirname(__file__))\n\n# \xe7\x94\x9f\xe6\x88\x90\xe8\xaf\x86\xe5\x88\xab\xe5\xaf\xb9\xe8\xb1\xa1\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe9\x85\x8d\xe7\xbd\xae\xe5\x8f\x82\xe6\x95\xb0\nR = Recognizer(image_height, image_width, max_captcha, char_set, model_save_dir)\n\n# \xe5\xa6\x82\xe6\x9e\x9c\xe4\xbd\xa0\xe9\x9c\x80\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa4\x9a\xe4\xb8\xaa\xe6\xa8\xa1\xe5\x9e\x8b\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe5\x8f\x82\xe7\x85\xa7\xe5\x8e\x9f\xe6\x9c\x89\xe7\x9a\x84\xe4\xbe\x8b\xe5\xad\x90\xe9\x85\x8d\xe7\xbd\xae\xe8\xb7\xaf\xe7\x94\xb1\xe5\x92\x8c\xe7\xbc\x96\xe5\x86\x99\xe9\x80\xbb\xe8\xbe\x91\n# Q = Recognizer(image_height, image_width, max_captcha, char_set, model_save_dir)\n\n\ndef response_headers(content):\n    resp = Response(content)\n    resp.headers[\'Access-Control-Allow-Origin\'] = \'*\'\n    return resp\n\n\n@app.route(\'/b\', methods=[\'POST\'])\ndef up_image():\n    if request.method == \'POST\' and request.files.get(\'image_file\'):\n        timec = str(time.time()).replace(""."", """")\n        file = request.files.get(\'image_file\')\n        img = file.read()\n        img = BytesIO(img)\n        img = Image.open(img, mode=""r"")\n        # username = request.form.get(""name"")\n        print(""\xe6\x8e\xa5\xe6\x94\xb6\xe5\x9b\xbe\xe7\x89\x87\xe5\xb0\xba\xe5\xaf\xb8: {}"".format(img.size))\n        s = time.time()\n        value = R.rec_image(img)\n        e = time.time()\n        print(""\xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c: {}"".format(value))\n        # \xe4\xbf\x9d\xe5\xad\x98\xe5\x9b\xbe\xe7\x89\x87\n        print(""\xe4\xbf\x9d\xe5\xad\x98\xe5\x9b\xbe\xe7\x89\x87\xef\xbc\x9a {}{}_{}.{}"".format(api_image_dir, value, timec, image_suffix))\n        file_name = ""{}_{}.{}"".format(value, timec, image_suffix)\n        file_path = os.path.join(api_image_dir + file_name)\n        img.save(file_path)\n        result = {\n            \'time\': timec,   # \xe6\x97\xb6\xe9\x97\xb4\xe6\x88\xb3\n            \'value\': value,  # \xe9\xa2\x84\xe6\xb5\x8b\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\n            \'speed_time(ms)\': int((e - s) * 1000)  # \xe8\xaf\x86\xe5\x88\xab\xe8\x80\x97\xe8\xb4\xb9\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\n        }\n        img.close()\n        return jsonify(result)\n    else:\n        content = json.dumps({""error_code"": ""1001""})\n        resp = response_headers(content)\n        return resp\n\n\nif __name__ == \'__main__\':\n    app.run(\n        host=\'0.0.0.0\',\n        port=6000,\n        debug=True\n    )\n'"
cnnlib/network.py,35,"b'import tensorflow as tf\nimport numpy as np\nimport os\nfrom PIL import Image\nimport random\n\n\nclass CNN(object):\n    def __init__(self, image_height, image_width, max_captcha, char_set, model_save_dir):\n        # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x80\xbc\n        self.image_height = image_height\n        self.image_width = image_width\n        self.max_captcha = max_captcha\n        self.char_set = char_set\n        self.char_set_len = len(char_set)\n        self.model_save_dir = model_save_dir  # \xe6\xa8\xa1\xe5\x9e\x8b\xe8\xb7\xaf\xe5\xbe\x84\n        with tf.name_scope(\'parameters\'):\n            self.w_alpha = 0.01\n            self.b_alpha = 0.1\n        # tf\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\x8d\xa0\xe4\xbd\x8d\xe7\xac\xa6\n        with tf.name_scope(\'data\'):\n            self.X = tf.placeholder(tf.float32, [None, self.image_height * self.image_width])  # \xe7\x89\xb9\xe5\xbe\x81\xe5\x90\x91\xe9\x87\x8f\n            self.Y = tf.placeholder(tf.float32, [None, self.max_captcha * self.char_set_len])  # \xe6\xa0\x87\xe7\xad\xbe\n            self.keep_prob = tf.placeholder(tf.float32)  # dropout\xe5\x80\xbc\n\n    @staticmethod\n    def convert2gray(img):\n        """"""\n        \xe5\x9b\xbe\xe7\x89\x87\xe8\xbd\xac\xe4\xb8\xba\xe7\x81\xb0\xe5\xba\xa6\xe5\x9b\xbe\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe6\x98\xaf3\xe9\x80\x9a\xe9\x81\x93\xe5\x9b\xbe\xe5\x88\x99\xe8\xae\xa1\xe7\xae\x97\xef\xbc\x8c\xe5\x8d\x95\xe9\x80\x9a\xe9\x81\x93\xe5\x9b\xbe\xe5\x88\x99\xe7\x9b\xb4\xe6\x8e\xa5\xe8\xbf\x94\xe5\x9b\x9e\n        :param img:\n        :return:\n        """"""\n        if len(img.shape) > 2:\n            r, g, b = img[:, :, 0], img[:, :, 1], img[:, :, 2]\n            gray = 0.2989 * r + 0.5870 * g + 0.1140 * b\n            return gray\n        else:\n            return img\n\n    def text2vec(self, text):\n        """"""\n        \xe8\xbd\xac\xe6\xa0\x87\xe7\xad\xbe\xe4\xb8\xbaoneHot\xe7\xbc\x96\xe7\xa0\x81\n        :param text: str\n        :return: numpy.array\n        """"""\n        text_len = len(text)\n        if text_len > self.max_captcha:\n            raise ValueError(\'\xe9\xaa\x8c\xe8\xaf\x81\xe7\xa0\x81\xe6\x9c\x80\xe9\x95\xbf{}\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\'.format(self.max_captcha))\n\n        vector = np.zeros(self.max_captcha * self.char_set_len)\n\n        for i, ch in enumerate(text):\n            idx = i * self.char_set_len + self.char_set.index(ch)\n            vector[idx] = 1\n        return vector\n\n    def model(self):\n        x = tf.reshape(self.X, shape=[-1, self.image_height, self.image_width, 1])\n        print("">>> input x: {}"".format(x))\n\n        # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x821\n        wc1 = tf.get_variable(name=\'wc1\', shape=[3, 3, 1, 32], dtype=tf.float32,\n                              initializer=tf.contrib.layers.xavier_initializer())\n        bc1 = tf.Variable(self.b_alpha * tf.random_normal([32]))\n        conv1 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(x, wc1, strides=[1, 1, 1, 1], padding=\'SAME\'), bc1))\n        conv1 = tf.nn.max_pool(conv1, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding=\'SAME\')\n        conv1 = tf.nn.dropout(conv1, self.keep_prob)\n\n        # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x822\n        wc2 = tf.get_variable(name=\'wc2\', shape=[3, 3, 32, 64], dtype=tf.float32,\n                              initializer=tf.contrib.layers.xavier_initializer())\n        bc2 = tf.Variable(self.b_alpha * tf.random_normal([64]))\n        conv2 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(conv1, wc2, strides=[1, 1, 1, 1], padding=\'SAME\'), bc2))\n        conv2 = tf.nn.max_pool(conv2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding=\'SAME\')\n        conv2 = tf.nn.dropout(conv2, self.keep_prob)\n\n        # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x823\n        wc3 = tf.get_variable(name=\'wc3\', shape=[3, 3, 64, 128], dtype=tf.float32,\n                              initializer=tf.contrib.layers.xavier_initializer())\n        bc3 = tf.Variable(self.b_alpha * tf.random_normal([128]))\n        conv3 = tf.nn.relu(tf.nn.bias_add(tf.nn.conv2d(conv2, wc3, strides=[1, 1, 1, 1], padding=\'SAME\'), bc3))\n        conv3 = tf.nn.max_pool(conv3, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding=\'SAME\')\n        conv3 = tf.nn.dropout(conv3, self.keep_prob)\n        print("">>> convolution 3: "", conv3.shape)\n        next_shape = conv3.shape[1] * conv3.shape[2] * conv3.shape[3]\n\n        # \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x821\n        wd1 = tf.get_variable(name=\'wd1\', shape=[next_shape, 1024], dtype=tf.float32,\n                              initializer=tf.contrib.layers.xavier_initializer())\n        bd1 = tf.Variable(self.b_alpha * tf.random_normal([1024]))\n        dense = tf.reshape(conv3, [-1, wd1.get_shape().as_list()[0]])\n        dense = tf.nn.relu(tf.add(tf.matmul(dense, wd1), bd1))\n        dense = tf.nn.dropout(dense, self.keep_prob)\n\n        # \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x822\n        wout = tf.get_variable(\'name\', shape=[1024, self.max_captcha * self.char_set_len], dtype=tf.float32,\n                               initializer=tf.contrib.layers.xavier_initializer())\n        bout = tf.Variable(self.b_alpha * tf.random_normal([self.max_captcha * self.char_set_len]))\n\n        with tf.name_scope(\'y_prediction\'):\n            y_predict = tf.add(tf.matmul(dense, wout), bout)\n\n        return y_predict\n'"
cnnlib/recognition_object.py,7,"b'# -*- coding: utf-8 -*-\n""""""\n\xe8\xaf\x86\xe5\x88\xab\xe5\x9b\xbe\xe5\x83\x8f\xe7\x9a\x84\xe7\xb1\xbb\xef\xbc\x8c\xe4\xb8\xba\xe4\xba\x86\xe5\xbf\xab\xe9\x80\x9f\xe8\xbf\x9b\xe8\xa1\x8c\xe5\xa4\x9a\xe6\xac\xa1\xe8\xaf\x86\xe5\x88\xab\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xb0\x83\xe7\x94\xa8\xe6\xad\xa4\xe7\xb1\xbb\xe4\xb8\x8b\xe9\x9d\xa2\xe7\x9a\x84\xe6\x96\xb9\xe6\xb3\x95\xef\xbc\x9a\nR = Recognizer(image_height, image_width, max_captcha)\nfor i in range(10):\n    r_img = Image.open(str(i) + "".jpg"")\n    t = R.rec_image(r_img)\n\xe7\xae\x80\xe5\x8d\x95\xe7\x9a\x84\xe5\x9b\xbe\xe7\x89\x87\xe6\xaf\x8f\xe5\xbc\xa0\xe5\x9f\xba\xe6\x9c\xac\xe4\xb8\x8a\xe5\x8f\xaf\xe4\xbb\xa5\xe8\xbe\xbe\xe5\x88\xb0\xe6\xaf\xab\xe7\xa7\x92\xe7\xba\xa7\xe7\x9a\x84\xe8\xaf\x86\xe5\x88\xab\xe9\x80\x9f\xe5\xba\xa6\n""""""\nimport tensorflow as tf\nimport numpy as np\nfrom PIL import Image\nfrom cnnlib.network import CNN\nimport json\n\n\nclass Recognizer(CNN):\n    def __init__(self, image_height, image_width, max_captcha, char_set, model_save_dir):\n        # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\x8f\x98\xe9\x87\x8f\n        super(Recognizer, self).__init__(image_height, image_width, max_captcha, char_set, model_save_dir)\n\n        # \xe6\x96\xb0\xe5\xbb\xba\xe5\x9b\xbe\xe5\x92\x8c\xe4\xbc\x9a\xe8\xaf\x9d\n        self.g = tf.Graph()\n        self.sess = tf.Session(graph=self.g)\n        # \xe4\xbd\xbf\xe7\x94\xa8\xe6\x8c\x87\xe5\xae\x9a\xe7\x9a\x84\xe5\x9b\xbe\xe5\x92\x8c\xe4\xbc\x9a\xe8\xaf\x9d\n        with self.g.as_default():\n            # \xe8\xbf\xad\xe4\xbb\xa3\xe5\xbe\xaa\xe7\x8e\xaf\xe5\x89\x8d\xef\xbc\x8c\xe5\x86\x99\xe5\x87\xba\xe6\x89\x80\xe6\x9c\x89\xe7\x94\xa8\xe5\x88\xb0\xe7\x9a\x84\xe5\xbc\xa0\xe9\x87\x8f\xe7\x9a\x84\xe8\xae\xa1\xe7\xae\x97\xe8\xa1\xa8\xe8\xbe\xbe\xe5\xbc\x8f\xef\xbc\x8c\xe5\xa6\x82\xe6\x9e\x9c\xe5\x86\x99\xe5\x9c\xa8\xe5\xbe\xaa\xe7\x8e\xaf\xe4\xb8\xad\xef\xbc\x8c\xe4\xbc\x9a\xe5\x8f\x91\xe7\x94\x9f\xe5\x86\x85\xe5\xad\x98\xe6\xb3\x84\xe6\xbc\x8f\xef\xbc\x8c\xe6\x8b\x96\xe6\x85\xa2\xe8\xaf\x86\xe5\x88\xab\xe7\x9a\x84\xe9\x80\x9f\xe5\xba\xa6\n            # tf\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\x8d\xa0\xe4\xbd\x8d\xe7\xac\xa6\n            self.X = tf.placeholder(tf.float32, [None, self.image_height * self.image_width])  # \xe7\x89\xb9\xe5\xbe\x81\xe5\x90\x91\xe9\x87\x8f\n            self.Y = tf.placeholder(tf.float32, [None, self.max_captcha * self.char_set_len])  # \xe6\xa0\x87\xe7\xad\xbe\n            self.keep_prob = tf.placeholder(tf.float32)  # dropout\xe5\x80\xbc\n            # \xe5\x8a\xa0\xe8\xbd\xbd\xe7\xbd\x91\xe7\xbb\x9c\xe5\x92\x8c\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x8f\x82\xe6\x95\xb0\n            self.y_predict = self.model()\n            self.predict = tf.argmax(tf.reshape(self.y_predict, [-1, self.max_captcha, self.char_set_len]), 2)\n            saver = tf.train.Saver()\n            with self.sess.as_default() as sess:\n                saver.restore(sess, self.model_save_dir)\n\n    # def __del__(self):\n    #     self.sess.close()\n    #     print(""session close"")\n\n    def rec_image(self, img):\n        # \xe8\xaf\xbb\xe5\x8f\x96\xe5\x9b\xbe\xe7\x89\x87\n        img_array = np.array(img)\n        test_image = self.convert2gray(img_array)\n        test_image = test_image.flatten() / 255\n        # \xe4\xbd\xbf\xe7\x94\xa8\xe6\x8c\x87\xe5\xae\x9a\xe7\x9a\x84\xe5\x9b\xbe\xe5\x92\x8c\xe4\xbc\x9a\xe8\xaf\x9d\n        with self.g.as_default():\n            with self.sess.as_default() as sess:\n                text_list = sess.run(self.predict, feed_dict={self.X: [test_image], self.keep_prob: 1.})\n\n        # \xe8\x8e\xb7\xe5\x8f\x96\xe7\xbb\x93\xe6\x9e\x9c\n        predict_text = text_list[0].tolist()\n        p_text = """"\n        for p in predict_text:\n            p_text += str(self.char_set[p])\n\n        # \xe8\xbf\x94\xe5\x9b\x9e\xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c\n        return p_text\n\n\ndef main():\n    with open(""conf/sample_config.json"", ""r"", encoding=""utf-8"") as f:\n        sample_conf = json.load(f)\n    image_height = sample_conf[""image_height""]\n    image_width = sample_conf[""image_width""]\n    max_captcha = sample_conf[""max_captcha""]\n    char_set = sample_conf[""char_set""]\n    model_save_dir = sample_conf[""model_save_dir""]\n    R = Recognizer(image_height, image_width, max_captcha, char_set, model_save_dir)\n    r_img = Image.open(""./sample/test/2b3n_6915e26c67a52bc0e4e13d216eb62b37.jpg"")\n    t = R.rec_image(r_img)\n    print(t)\n\n\nif __name__ == \'__main__\':\n    main()\n'"
tools/collect_labels.py,0,"b'#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n""""""\n\xe7\xbb\x9f\xe8\xae\xa1\xe6\xa0\xb7\xe6\x9c\xac\xe7\x9a\x84\xe6\xa0\x87\xe7\xad\xbe\xef\xbc\x8c\xe5\xb9\xb6\xe5\x86\x99\xe5\x85\xa5\xe6\x96\x87\xe4\xbb\xb6labels.json\n""""""\nimport os\nimport json\n\n\nimage_dir = ""../sample/origin""\nimage_list = os.listdir(image_dir)\n\nlabels = set()\nfor img in image_list:\n    split_result = img.split(""_"")\n    if len(split_result) == 2:\n        label, name = split_result\n        if label:\n            for word in label:\n                labels.add(word)\n    else:\n        pass\n\nprint(""\xe5\x85\xb1\xe6\x9c\x89\xe6\xa0\x87\xe7\xad\xbe{}\xe7\xa7\x8d"".format(len(labels)))\n\nwith open(""./labels.json"", ""w"") as f:\n    f.write(json.dumps("""".join(list(labels)), ensure_ascii=False))\n\nprint(""\xe5\xb0\x86\xe6\xa0\x87\xe7\xad\xbe\xe5\x88\x97\xe8\xa1\xa8\xe5\x86\x99\xe5\x85\xa5\xe6\x96\x87\xe4\xbb\xb6labels.json\xe6\x88\x90\xe5\x8a\x9f"")\n'"
tools/correction_captcha.py,0,"b'#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n""""""\n\xe4\xba\xba\xe5\xb7\xa5\xe5\x9c\xa8\xe7\xba\xbf\xe9\xaa\x8c\xe8\xaf\x81\xe8\x84\x9a\xe6\x9c\xac\n""""""\nimport requests\nfrom io import BytesIO\nimport time\nimport matplotlib.pyplot as plt\nimport json\nimport numpy as np\nfrom PIL import Image\nimport os\n\n\ndef correction(fail_path, pass_path, correction_times, remote_url):\n    headers = {\n        \'user-agent\': ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.146 Safari/537.36"",\n    }\n\n    fail_count = 0\n    for index in range(correction_times):\n        # \xe8\xaf\xb7\xe6\xb1\x82\n        while True:\n            try:\n                response = requests.request(""GET"", remote_url, headers=headers, timeout=10)\n                break\n            except Exception as e:\n                print(e)\n\n        # \xe8\xaf\x86\xe5\x88\xab\n        s = time.time()\n        url = ""http://127.0.0.1:6000/b""\n        files = {\'image_file\': (\'captcha.jpg\', BytesIO(response.content), \'application\')}\n        r = requests.post(url=url, files=files)\n        e = time.time()\n        print(index, int((e-s)*1000), ""ms"")\n        print(r.text)\n        time.sleep(2)\n\n        # \xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c\n        predict_text = json.loads(r.text)[""value""]\n        f = plt.figure()\n        ax = f.add_subplot(111)\n        ax.text(0.1, 0.9, ""\xe5\xa4\x87\xe6\xb3\xa8"", ha=\'center\', va=\'center\', transform=ax.transAxes)\n\n        # \xe5\x9b\xbe\xe7\x89\x87\xe5\xad\x97\xe8\x8a\x82\xe6\xb5\x81\xe8\xbd\xac\xe4\xb8\xbaimage array\n        img = BytesIO(response.content)\n        img = Image.open(img, mode=""r"")\n        captcha_array = np.array(img)\n        plt.imshow(captcha_array)\n\n        # \xe9\xa2\x84\xe6\xb5\x8b\xe5\x9b\xbe\xe7\x89\x87\n        print(""\xe9\xa2\x84\xe6\xb5\x8b: {}\\n"".format(predict_text))\n\n        # \xe6\x98\xbe\xe7\xa4\xba\xe5\x9b\xbe\xe7\x89\x87\xe5\x92\x8c\xe9\xa2\x84\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\n        plt.text(20, 2, \'predict:{}\'.format(predict_text))\n        plt.show()\n\n        q = input(""index:<{}> \xe6\xad\xa3\xe7\xa1\xae\xe6\x8c\x89enter\xef\xbc\x8c\xe9\x94\x99\xe8\xaf\xaf\xe8\xbe\x93\xe5\x85\xa5\xe7\x9c\x9f\xe5\xae\x9e\xe5\x80\xbc\xe5\x90\x8e\xe4\xbc\x9a\xe4\xbf\x9d\xe5\xad\x98:"".format(index))\n        img_name = ""{}_{}"".format(q, str(time.time()).replace(""."", """"))\n        if q:\n            path = os.path.join(fail_path, img_name)\n            with open(path, ""wb"") as f:\n                f.write(response.content)\n            fail_count += 1\n        else:\n            path = os.path.join(pass_path, img_name)\n            with open(path, ""wb"") as f:\n                f.write(response.content)\n\n        print(""=============="")\n\n    rate = (correction_times - fail_count)/correction_times\n    print(""Pass Rate: {}"".format(rate))\n\n\ndef main():\n    fail_path = ""./sample/fail_sample/""\n    pass_path = ""./sample/pass_sample/""\n    correction_times = 10\n    remote_url = ""https://www.xxxxxxx.com/getImg""\n\n    correction(fail_path, pass_path, correction_times, remote_url)\n\n\nif __name__ == \'__main__\':\n    main()\n\n\n\n'"
tools/gen_md_content.py,0,"b'# -*- coding: utf-8 -*-\nimport re\n\n\nfile_path = ""../README.md""\nwith open(file_path, ""r"") as f:\n    content = f.readlines()\n\nfor c in content:\n    c = c.strip()\n    pattern = r""^#+\\s[0-9.]+\\s""\n    r = re.match(pattern, c)\n    if r:\n        c1 = re.sub(pattern, """", c)\n        c2 = re.sub(r""#+\\s"", """", c)\n        string = \'<a href=""#{}"">{}</a>  \'.format(c1, c2)\n        print(string)\n\n'"
