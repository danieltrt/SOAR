file_path,api_count,code
LanguageModel.py,0,"b'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n""""""\n@author: nl8590687\n\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\x9a\x84\xe8\xaf\xad\xe8\xa8\x80\xe6\xa8\xa1\xe5\x9e\x8b\n\n\xe5\x9f\xba\xe4\xba\x8e\xe9\xa9\xac\xe5\xb0\x94\xe5\x8f\xaf\xe5\xa4\xab\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe8\xaf\xad\xe8\xa8\x80\xe6\xa8\xa1\xe5\x9e\x8b\n\n""""""\nimport platform as plat\n\n\nclass ModelLanguage(): # \xe8\xaf\xad\xe9\x9f\xb3\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xb1\xbb\n\tdef __init__(self, modelpath):\n\t\tself.modelpath = modelpath\n\t\tsystem_type = plat.system() # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa4\xe6\x96\xad\n\t\t\n\t\tself.slash = \'\'\n\t\tif(system_type == \'Windows\'):\n\t\t\tself.slash = \'\\\\\'\n\t\telif(system_type == \'Linux\'):\n\t\t\tself.slash = \'/\'\n\t\telse:\n\t\t\tprint(\'*[Message] Unknown System\\n\')\n\t\t\tself.slash = \'/\'\n\t\t\n\t\tif(self.slash != self.modelpath[-1]): # \xe5\x9c\xa8\xe7\x9b\xae\xe5\xbd\x95\xe8\xb7\xaf\xe5\xbe\x84\xe6\x9c\xab\xe5\xb0\xbe\xe5\xa2\x9e\xe5\x8a\xa0\xe6\x96\x9c\xe6\x9d\xa0\n\t\t\tself.modelpath = self.modelpath + self.slash\n\t\t\n\t\tpass\n\t\t\n\tdef LoadModel(self):\n\t\tself.dict_pinyin = self.GetSymbolDict(\'dict.txt\')\n\t\tself.model1 = self.GetLanguageModel(self.modelpath + \'language_model1.txt\')\n\t\tself.model2 = self.GetLanguageModel(self.modelpath + \'language_model2.txt\')\n\t\tself.pinyin = self.GetPinyin(self.modelpath + \'dic_pinyin.txt\')\n\t\tmodel = (self.dict_pinyin, self.model1, self.model2 )\n\t\treturn model\n\t\tpass\n\t\n\tdef SpeechToText(self, list_syllable):\n\t\t\'\'\'\n\t\t\xe4\xb8\xba\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe4\xb8\x93\xe7\x94\xa8\xe7\x9a\x84\xe5\xa4\x84\xe7\x90\x86\xe5\x87\xbd\xe6\x95\xb0\n\t\t\xe5\xae\x9e\xe7\x8e\xb0\xe4\xbb\x8e\xe8\xaf\xad\xe9\x9f\xb3\xe6\x8b\xbc\xe9\x9f\xb3\xe7\xac\xa6\xe5\x8f\xb7\xe5\x88\xb0\xe6\x9c\x80\xe7\xbb\x88\xe6\x96\x87\xe6\x9c\xac\xe7\x9a\x84\xe8\xbd\xac\xe6\x8d\xa2\n\t\t\'\'\'\n\t\tr=\'\'\n\t\tlength = len(list_syllable)\n\t\tif(length == 0): # \xe4\xbc\xa0\xe5\x85\xa5\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe6\xb2\xa1\xe6\x9c\x89\xe5\x8c\x85\xe5\x90\xab\xe4\xbb\xbb\xe4\xbd\x95\xe6\x8b\xbc\xe9\x9f\xb3\xe6\x97\xb6\n\t\t\treturn \'\'\n\t\t\n\t\t# \xe5\x85\x88\xe5\x8f\x96\xe5\x87\xba\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xef\xbc\x8c\xe5\x8d\xb3\xe6\x8b\xbc\xe9\x9f\xb3\xe5\x88\x97\xe8\xa1\xa8\xe4\xb8\xad\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\n\t\tstr_tmp = [list_syllable[0]]\n\t\t\n\t\tfor i in range(0, length - 1):\n\t\t\t# \xe4\xbe\x9d\xe6\xac\xa1\xe4\xbb\x8e\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe5\xbc\x80\xe5\xa7\x8b\xe6\xaf\x8f\xe6\xac\xa1\xe8\xbf\x9e\xe7\xbb\xad\xe5\x8f\x96\xe4\xb8\xa4\xe4\xb8\xaa\xe5\xad\x97\xe6\x8b\xbc\xe9\x9f\xb3\n\t\t\tstr_split = list_syllable[i] + \' \' + list_syllable[i+1]\n\t\t\t#print(str_split,str_tmp,r)\n\t\t\t# \xe5\xa6\x82\xe6\x9e\x9c\xe8\xbf\x99\xe4\xb8\xaa\xe6\x8b\xbc\xe9\x9f\xb3\xe5\x9c\xa8\xe6\xb1\x89\xe8\xaf\xad\xe6\x8b\xbc\xe9\x9f\xb3\xe7\x8a\xb6\xe6\x80\x81\xe8\xbd\xac\xe7\xa7\xbb\xe5\xad\x97\xe5\x85\xb8\xe9\x87\x8c\xe7\x9a\x84\xe8\xaf\x9d\n\t\t\tif(str_split in self.pinyin):\n\t\t\t\t# \xe5\xb0\x86\xe7\xac\xac\xe4\xba\x8c\xe4\xb8\xaa\xe5\xad\x97\xe7\x9a\x84\xe6\x8b\xbc\xe9\x9f\xb3\xe5\x8a\xa0\xe5\x85\xa5\n\t\t\t\tstr_tmp.append(list_syllable[i+1])\n\t\t\telse:\n\t\t\t\t# \xe5\x90\xa6\xe5\x88\x99\xe4\xb8\x8d\xe5\x8a\xa0\xe5\x85\xa5\xef\xbc\x8c\xe7\x84\xb6\xe5\x90\x8e\xe7\x9b\xb4\xe6\x8e\xa5\xe5\xb0\x86\xe7\x8e\xb0\xe6\x9c\x89\xe7\x9a\x84\xe6\x8b\xbc\xe9\x9f\xb3\xe5\xba\x8f\xe5\x88\x97\xe8\xbf\x9b\xe8\xa1\x8c\xe8\xa7\xa3\xe7\xa0\x81\n\t\t\t\tstr_decode = self.decode(str_tmp, 0.0000)\n\t\t\t\t#print(\'decode \',str_tmp,str_decode)\n\t\t\t\tif(str_decode != []):\n\t\t\t\t\tr += str_decode[0][0]\n\t\t\t\t# \xe5\x86\x8d\xe9\x87\x8d\xe6\x96\xb0\xe4\xbb\x8ei+1\xe5\xbc\x80\xe5\xa7\x8b\xe4\xbd\x9c\xe4\xb8\xba\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe6\x8b\xbc\xe9\x9f\xb3\n\t\t\t\tstr_tmp = [list_syllable[i+1]]\n\t\t\t\t\n\t\t\n\t\t#print(\'\xe6\x9c\x80\xe5\x90\x8e\xef\xbc\x9a\', str_tmp)\n\t\tstr_decode = self.decode(str_tmp, 0.0000)\n\t\t\n\t\t#print(\'\xe5\x89\xa9\xe4\xbd\x99\xe8\xa7\xa3\xe7\xa0\x81\xef\xbc\x9a\',str_decode)\n\t\t\n\t\tif(str_decode != []):\n\t\t\tr += str_decode[0][0]\n\t\t\n\t\treturn r\n\t\n\tdef decode(self,list_syllable, yuzhi = 0.0001):\n\t\t\'\'\'\n\t\t\xe5\xae\x9e\xe7\x8e\xb0\xe6\x8b\xbc\xe9\x9f\xb3\xe5\x90\x91\xe6\x96\x87\xe6\x9c\xac\xe7\x9a\x84\xe8\xbd\xac\xe6\x8d\xa2\n\t\t\xe5\x9f\xba\xe4\xba\x8e\xe9\xa9\xac\xe5\xb0\x94\xe5\x8f\xaf\xe5\xa4\xab\xe9\x93\xbe\n\t\t\'\'\'\n\t\t#assert self.dic_pinyin == null or self.model1 == null or self.model2 == null\n\t\tlist_words = []\n\t\t\n\t\tnum_pinyin = len(list_syllable)\n\t\t#print(\'======\')\n\t\t#print(\'decode function: list_syllable\\n\',list_syllable)\n\t\t#print(num_pinyin)\n\t\t# \xe5\xbc\x80\xe5\xa7\x8b\xe8\xaf\xad\xe9\x9f\xb3\xe8\xa7\xa3\xe7\xa0\x81\n\t\tfor i in range(num_pinyin):\n\t\t\t#print(i)\n\t\t\tls = \'\'\n\t\t\tif(list_syllable[i] in self.dict_pinyin): # \xe5\xa6\x82\xe6\x9e\x9c\xe8\xbf\x99\xe4\xb8\xaa\xe6\x8b\xbc\xe9\x9f\xb3\xe5\x9c\xa8\xe6\xb1\x89\xe8\xaf\xad\xe6\x8b\xbc\xe9\x9f\xb3\xe5\xad\x97\xe5\x85\xb8\xe9\x87\x8c\xe7\x9a\x84\xe8\xaf\x9d\n\t\t\t\t# \xe8\x8e\xb7\xe5\x8f\x96\xe6\x8b\xbc\xe9\x9f\xb3\xe4\xb8\x8b\xe5\xb1\x9e\xe7\x9a\x84\xe5\xad\x97\xe7\x9a\x84\xe5\x88\x97\xe8\xa1\xa8\xef\xbc\x8cls\xe5\x8c\x85\xe5\x90\xab\xe4\xba\x86\xe8\xaf\xa5\xe6\x8b\xbc\xe9\x9f\xb3\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84\xe5\xad\x97\n\t\t\t\tls = self.dict_pinyin[list_syllable[i]]\n\t\t\telse:\n\t\t\t\tbreak\n\t\t\t\n\t\t\t\n\t\t\tif(i == 0):\n\t\t\t\t# \xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe5\x81\x9a\xe5\x88\x9d\xe5\xa7\x8b\xe5\xa4\x84\xe7\x90\x86\n\t\t\t\tnum_ls = len(ls)\n\t\t\t\tfor j in range(num_ls):\n\t\t\t\t\ttuple_word = [\'\',0.0]\n\t\t\t\t\t# \xe8\xae\xbe\xe7\xbd\xae\xe9\xa9\xac\xe5\xb0\x94\xe7\xa7\x91\xe5\xa4\xab\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe7\x8a\xb6\xe6\x80\x81\xe5\x80\xbc\n\t\t\t\t\t# \xe8\xae\xbe\xe7\xbd\xae\xe5\x88\x9d\xe5\xa7\x8b\xe6\xa6\x82\xe7\x8e\x87\xef\xbc\x8c\xe7\xbd\xae\xe4\xb8\xba1.0\n\t\t\t\t\ttuple_word = [ls[j], 1.0]\n\t\t\t\t\t#print(tuple_word)\n\t\t\t\t\t# \xe6\xb7\xbb\xe5\x8a\xa0\xe5\x88\xb0\xe5\x8f\xaf\xe8\x83\xbd\xe7\x9a\x84\xe5\x8f\xa5\xe5\xad\x90\xe5\x88\x97\xe8\xa1\xa8\n\t\t\t\t\tlist_words.append(tuple_word)\n\t\t\t\t\n\t\t\t\t#print(list_words)\n\t\t\t\tcontinue\n\t\t\telse:\n\t\t\t\t# \xe5\xbc\x80\xe5\xa7\x8b\xe5\xa4\x84\xe7\x90\x86\xe7\xb4\xa7\xe8\xb7\x9f\xe5\x9c\xa8\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe5\x90\x8e\xe9\x9d\xa2\xe7\x9a\x84\xe5\xad\x97\n\t\t\t\tlist_words_2 = []\n\t\t\t\tnum_ls_word = len(list_words)\n\t\t\t\t#print(\'ls_wd: \',list_words)\n\t\t\t\tfor j in range(0, num_ls_word):\n\t\t\t\t\t\n\t\t\t\t\tnum_ls = len(ls)\n\t\t\t\t\tfor k in range(0, num_ls):\n\t\t\t\t\t\ttuple_word = [\'\',0.0]\n\t\t\t\t\t\ttuple_word = list(list_words[j]) # \xe6\x8a\x8a\xe7\x8e\xb0\xe6\x9c\x89\xe7\x9a\x84\xe6\xaf\x8f\xe4\xb8\x80\xe6\x9d\xa1\xe7\x9f\xad\xe8\xaf\xad\xe5\x8f\x96\xe5\x87\xba\xe6\x9d\xa5\n\t\t\t\t\t\t#print(\'tw1: \',tuple_word)\n\t\t\t\t\t\ttuple_word[0] = tuple_word[0] + ls[k] # \xe5\xb0\x9d\xe8\xaf\x95\xe6\x8c\x89\xe7\x85\xa7\xe4\xb8\x8b\xe4\xb8\x80\xe4\xb8\xaa\xe9\x9f\xb3\xe5\x8f\xaf\xe8\x83\xbd\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\x85\xa8\xe9\x83\xa8\xe7\x9a\x84\xe5\xad\x97\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbb\x84\xe5\x90\x88\n\t\t\t\t\t\t#print(\'ls[k]  \',ls[k])\n\t\t\t\t\t\t\n\t\t\t\t\t\ttmp_words = tuple_word[0][-2:] # \xe5\x8f\x96\xe5\x87\xba\xe7\x94\xa8\xe4\xba\x8e\xe8\xae\xa1\xe7\xae\x97\xe7\x9a\x84\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\xa4\xe4\xb8\xaa\xe5\xad\x97\n\t\t\t\t\t\t#print(\'tmp_words: \',tmp_words,tmp_words in self.model2)\n\t\t\t\t\t\tif(tmp_words in self.model2): # \xe5\x88\xa4\xe6\x96\xad\xe5\xae\x83\xe4\xbb\xac\xe6\x98\xaf\xe4\xb8\x8d\xe6\x98\xaf\xe5\x86\x8d\xe7\x8a\xb6\xe6\x80\x81\xe8\xbd\xac\xe7\xa7\xbb\xe8\xa1\xa8\xe9\x87\x8c\n\t\t\t\t\t\t\t#print(tmp_words,tmp_words in self.model2)\n\t\t\t\t\t\t\ttuple_word[1] = tuple_word[1] * float(self.model2[tmp_words]) / float(self.model1[tmp_words[-2]])\n\t\t\t\t\t\t\t# \xe6\xa0\xb8\xe5\xbf\x83\xef\xbc\x81\xe5\x9c\xa8\xe5\xbd\x93\xe5\x89\x8d\xe6\xa6\x82\xe7\x8e\x87\xe4\xb8\x8a\xe4\xb9\x98\xe8\xbd\xac\xe7\xa7\xbb\xe6\xa6\x82\xe7\x8e\x87\xef\xbc\x8c\xe5\x85\xac\xe5\xbc\x8f\xe5\x8c\x96\xe7\xae\x80\xe5\x90\x8e\xe4\xb8\xba\xe7\xac\xacn-1\xe5\x92\x8cn\xe4\xb8\xaa\xe5\xad\x97\xe5\x87\xba\xe7\x8e\xb0\xe7\x9a\x84\xe6\xac\xa1\xe6\x95\xb0\xe9\x99\xa4\xe4\xbb\xa5\xe7\xac\xacn-1\xe4\xb8\xaa\xe5\xad\x97\xe5\x87\xba\xe7\x8e\xb0\xe7\x9a\x84\xe6\xac\xa1\xe6\x95\xb0\n\t\t\t\t\t\t\t#print(self.model2[tmp_words],self.model1[tmp_words[-2]])\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\ttuple_word[1] = 0.0\n\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t#print(\'tw2: \',tuple_word)\n\t\t\t\t\t\t#print(tuple_word[1] >= pow(yuzhi, i))\n\t\t\t\t\t\tif(tuple_word[1] >= pow(yuzhi, i)):\n\t\t\t\t\t\t\t# \xe5\xa4\xa7\xe4\xba\x8e\xe9\x98\x88\xe5\x80\xbc\xe4\xb9\x8b\xe5\x90\x8e\xe4\xbf\x9d\xe7\x95\x99\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe4\xb8\xa2\xe5\xbc\x83\n\t\t\t\t\t\t\tlist_words_2.append(tuple_word)\n\t\t\t\t\t\t\n\t\t\t\tlist_words = list_words_2\n\t\t\t\t#print(list_words,\'\\n\')\n\t\t#print(list_words)\n\t\tfor i in range(0, len(list_words)):\n\t\t\tfor j in range(i + 1, len(list_words)):\n\t\t\t\tif(list_words[i][1] < list_words[j][1]):\n\t\t\t\t\ttmp = list_words[i]\n\t\t\t\t\tlist_words[i] = list_words[j]\n\t\t\t\t\tlist_words[j] = tmp\n\t\t\n\t\treturn list_words\n\t\tpass\n\t\t\n\tdef GetSymbolDict(self, dictfilename):\n\t\t\'\'\'\n\t\t\xe8\xaf\xbb\xe5\x8f\x96\xe6\x8b\xbc\xe9\x9f\xb3\xe6\xb1\x89\xe5\xad\x97\xe7\x9a\x84\xe5\xad\x97\xe5\x85\xb8\xe6\x96\x87\xe4\xbb\xb6\n\t\t\xe8\xbf\x94\xe5\x9b\x9e\xe8\xaf\xbb\xe5\x8f\x96\xe5\x90\x8e\xe7\x9a\x84\xe5\xad\x97\xe5\x85\xb8\n\t\t\'\'\'\n\t\ttxt_obj = open(dictfilename, \'r\', encoding=\'UTF-8\') # \xe6\x89\x93\xe5\xbc\x80\xe6\x96\x87\xe4\xbb\xb6\xe5\xb9\xb6\xe8\xaf\xbb\xe5\x85\xa5\n\t\ttxt_text = txt_obj.read()\n\t\ttxt_obj.close()\n\t\ttxt_lines = txt_text.split(\'\\n\') # \xe6\x96\x87\xe6\x9c\xac\xe5\x88\x86\xe5\x89\xb2\n\t\t\n\t\tdic_symbol = {} # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe7\xac\xa6\xe5\x8f\xb7\xe5\xad\x97\xe5\x85\xb8\n\t\tfor i in txt_lines:\n\t\t\tlist_symbol=[] # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe7\xac\xa6\xe5\x8f\xb7\xe5\x88\x97\xe8\xa1\xa8\n\t\t\tif(i!=\'\'):\n\t\t\t\ttxt_l=i.split(\'\\t\')\n\t\t\t\tpinyin = txt_l[0]\n\t\t\t\tfor word in txt_l[1]:\n\t\t\t\t\tlist_symbol.append(word)\n\t\t\tdic_symbol[pinyin] = list_symbol\n\t\t\n\t\treturn dic_symbol\n\t\t\n\tdef GetLanguageModel(self, modelLanFilename):\n\t\t\'\'\'\n\t\t\xe8\xaf\xbb\xe5\x8f\x96\xe8\xaf\xad\xe8\xa8\x80\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\n\t\t\xe8\xbf\x94\xe5\x9b\x9e\xe8\xaf\xbb\xe5\x8f\x96\xe5\x90\x8e\xe7\x9a\x84\xe6\xa8\xa1\xe5\x9e\x8b\n\t\t\'\'\'\n\t\ttxt_obj = open(modelLanFilename, \'r\', encoding=\'UTF-8\') # \xe6\x89\x93\xe5\xbc\x80\xe6\x96\x87\xe4\xbb\xb6\xe5\xb9\xb6\xe8\xaf\xbb\xe5\x85\xa5\n\t\ttxt_text = txt_obj.read()\n\t\ttxt_obj.close()\n\t\ttxt_lines = txt_text.split(\'\\n\') # \xe6\x96\x87\xe6\x9c\xac\xe5\x88\x86\xe5\x89\xb2\n\t\t\n\t\tdic_model = {} # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe7\xac\xa6\xe5\x8f\xb7\xe5\xad\x97\xe5\x85\xb8\n\t\tfor i in txt_lines:\n\t\t\tif(i!=\'\'):\n\t\t\t\ttxt_l=i.split(\'\\t\')\n\t\t\t\tif(len(txt_l) == 1):\n\t\t\t\t\tcontinue\n\t\t\t\t#print(txt_l)\n\t\t\t\tdic_model[txt_l[0]] = txt_l[1]\n\t\t\t\t\n\t\treturn dic_model\n\t\n\tdef GetPinyin(self, filename):\n\t\tfile_obj = open(filename,\'r\',encoding=\'UTF-8\')\n\t\ttxt_all = file_obj.read()\n\t\tfile_obj.close()\n\t\n\t\ttxt_lines = txt_all.split(\'\\n\')\n\t\tdic={}\n\t\n\t\tfor line in txt_lines:\n\t\t\tif(line == \'\'):\n\t\t\t\tcontinue\n\t\t\tpinyin_split = line.split(\'\\t\')\n\t\t\t\n\t\t\tlist_pinyin=pinyin_split[0]\n\t\t\t\n\t\t\tif(list_pinyin not in dic and int(pinyin_split[1]) > 1):\n\t\t\t\tdic[list_pinyin] = pinyin_split[1]\n\t\treturn dic\n\n\nif(__name__==\'__main__\'):\n\t\n\tml = ModelLanguage(\'model_language\')\n\tml.LoadModel()\n\t\n\t#str_pinyin = [\'zhe4\',\'zhen1\',\'shi4\',\'ji2\', \'hao3\',\'de5\']\n\t#str_pinyin = [\'jin1\', \'tian1\', \'shi4\', \'xing1\', \'qi1\', \'san1\']\n\t#str_pinyin = [\'ni3\', \'hao3\',\'a1\']\n\t#str_pinyin = [\'wo3\',\'dui4\',\'shi4\',\'mei2\',\'cuo4\',\'ni3\',\'hao3\']\n\t#str_pinyin = [\'wo3\',\'dui4\',\'shi4\',\'tian1\',\'mei2\',\'na5\',\'li3\',\'hai4\']\n\t#str_pinyin = [\'ba3\',\'zhe4\',\'xie1\',\'zuo4\',\'wan2\',\'wo3\',\'jiu4\',\'qu4\',\'shui4\',\'jiao4\']\n\t#str_pinyin = [\'wo3\',\'qu4\',\'a4\',\'mei2\',\'shi4\',\'er2\',\'la1\']\n\t#str_pinyin = [\'wo3\', \'men5\', \'qun2\', \'li3\', \'xiong1\', \'di4\', \'jian4\', \'mei4\', \'dou1\', \'zai4\', \'shuo1\']\n\t#str_pinyin = [\'su1\', \'an1\', \'ni3\', \'sui4\', \'li4\', \'yun4\', \'sui2\', \'cong2\', \'jiao4\', \'ming2\', \'tao2\', \'qi3\', \'yu2\', \'peng2\', \'ya4\', \'yang4\', \'chao1\', \'dao3\', \'jiang1\', \'li3\', \'yuan2\', \'kang1\', \'zhua1\', \'zou3\']\n\t#str_pinyin = [\'da4\', \'jia1\', \'hao3\']\n\tstr_pinyin = [\'kao3\', \'yan2\', \'yan1\', \'yu3\', \'ci2\', \'hui4\']\n\t#r = ml.decode(str_pinyin)\n\tr=ml.SpeechToText(str_pinyin)\n\tprint(\'\xe8\xaf\xad\xe9\x9f\xb3\xe8\xbd\xac\xe6\x96\x87\xe5\xad\x97\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x9a\\n\',r)\n\n'"
LanguageModel2.py,0,"b'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n""""""\n@author: nl8590687\n\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\x9a\x84\xe8\xaf\xad\xe8\xa8\x80\xe6\xa8\xa1\xe5\x9e\x8b\n\n\xe5\x9f\xba\xe4\xba\x8e\xe9\xa9\xac\xe5\xb0\x94\xe5\x8f\xaf\xe5\xa4\xab\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe8\xaf\xad\xe8\xa8\x80\xe6\xa8\xa1\xe5\x9e\x8b\n\n""""""\nimport platform as plat\n\n\nclass ModelLanguage(): # \xe8\xaf\xad\xe9\x9f\xb3\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xb1\xbb\n\tdef __init__(self, modelpath):\n\t\tself.modelpath = modelpath\n\t\tsystem_type = plat.system() # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa4\xe6\x96\xad\n\t\t\n\t\tself.slash = \'\'\n\t\tif(system_type == \'Windows\'):\n\t\t\tself.slash = \'\\\\\'\n\t\telif(system_type == \'Linux\'):\n\t\t\tself.slash = \'/\'\n\t\telse:\n\t\t\tprint(\'*[Message] Unknown System\\n\')\n\t\t\tself.slash = \'/\'\n\t\t\n\t\tif(self.slash != self.modelpath[-1]): # \xe5\x9c\xa8\xe7\x9b\xae\xe5\xbd\x95\xe8\xb7\xaf\xe5\xbe\x84\xe6\x9c\xab\xe5\xb0\xbe\xe5\xa2\x9e\xe5\x8a\xa0\xe6\x96\x9c\xe6\x9d\xa0\n\t\t\tself.modelpath = self.modelpath + self.slash\n\t\t\n\t\tpass\n\t\t\n\tdef LoadModel(self):\n\t\tself.dict_pinyin = self.GetSymbolDict(\'dict.txt\')\n\t\tself.model1 = self.GetLanguageModel(self.modelpath + \'language_model1.txt\')\n\t\tself.model2 = self.GetLanguageModel(self.modelpath + \'language_model2.txt\')\n\t\tself.pinyin = self.GetPinyin(self.modelpath + \'dic_pinyin.txt\')\n\t\tmodel = (self.dict_pinyin, self.model1, self.model2 )\n\t\treturn model\n\t\tpass\n\t\n\tdef SpeechToText(self, list_syllable):\n\t\t\'\'\'\n\t\t\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe4\xb8\x93\xe7\x94\xa8\xe7\x9a\x84\xe5\xa4\x84\xe7\x90\x86\xe5\x87\xbd\xe6\x95\xb0\n\n\t\t\xe5\xae\x9e\xe7\x8e\xb0\xe4\xbb\x8e\xe8\xaf\xad\xe9\x9f\xb3\xe6\x8b\xbc\xe9\x9f\xb3\xe7\xac\xa6\xe5\x8f\xb7\xe5\x88\xb0\xe6\x9c\x80\xe7\xbb\x88\xe6\x96\x87\xe6\x9c\xac\xe7\x9a\x84\xe8\xbd\xac\xe6\x8d\xa2\n\n\t\t\xe4\xbd\xbf\xe7\x94\xa8\xe6\x81\x90\xe6\x85\x8c\xe6\xa8\xa1\xe5\xbc\x8f\xe5\xa4\x84\xe7\x90\x86\xe4\xb8\x80\xe6\xac\xa1\xe8\xa7\xa3\xe7\xa0\x81\xe5\xa4\xb1\xe8\xb4\xa5\xe7\x9a\x84\xe6\x83\x85\xe5\x86\xb5\n\t\t\'\'\'\n\t\tlength = len(list_syllable)\n\t\tif(length == 0): # \xe4\xbc\xa0\xe5\x85\xa5\xe7\x9a\x84\xe5\x8f\x82\xe6\x95\xb0\xe6\xb2\xa1\xe6\x9c\x89\xe5\x8c\x85\xe5\x90\xab\xe4\xbb\xbb\xe4\xbd\x95\xe6\x8b\xbc\xe9\x9f\xb3\xe6\x97\xb6\n\t\t\treturn \'\'\n\t\t\n\t\tlst_syllable_remain = [] # \xe5\xad\x98\xe5\x82\xa8\xe5\x89\xa9\xe4\xbd\x99\xe7\x9a\x84\xe6\x8b\xbc\xe9\x9f\xb3\xe5\xba\x8f\xe5\x88\x97\n\t\tstr_result = \'\'\n\n\t\t# \xe5\xad\x98\xe5\x82\xa8\xe4\xb8\xb4\xe6\x97\xb6\xe8\xbe\x93\xe5\x85\xa5\xe6\x8b\xbc\xe9\x9f\xb3\xe5\xba\x8f\xe5\x88\x97\n\t\ttmp_list_syllable = list_syllable\n\n\t\twhile(len(tmp_list_syllable) > 0):\n\t\t\t# \xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xbc\xe9\x9f\xb3\xe8\xbd\xac\xe6\xb1\x89\xe5\xad\x97\xe8\xa7\xa3\xe7\xa0\x81\xef\xbc\x8c\xe5\xad\x98\xe5\x82\xa8\xe4\xb8\xb4\xe6\x97\xb6\xe7\xbb\x93\xe6\x9e\x9c\n\t\t\ttmp_lst_result = self.decode(tmp_list_syllable, 0.0)\n\t\t\t\n\t\t\tif(len(tmp_lst_result) > 0): # \xe6\x9c\x89\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x8c\xe4\xb8\x8d\xe7\x94\xa8\xe6\x81\x90\xe6\x85\x8c\n\t\t\t\tstr_result = str_result + tmp_lst_result[0][0]\n\t\t\t\t\n\t\t\twhile(len(tmp_lst_result) == 0): # \xe6\xb2\xa1\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x8c\xe5\xbc\x80\xe5\xa7\x8b\xe6\x81\x90\xe6\x85\x8c\n\t\t\t\t# \xe6\x8f\x92\xe5\x85\xa5\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe6\x8b\xbc\xe9\x9f\xb3\n\t\t\t\tlst_syllable_remain.insert(0, tmp_list_syllable[-1])\n\t\t\t\t# \xe5\x88\xa0\xe9\x99\xa4\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\x80\xe4\xb8\xaa\xe6\x8b\xbc\xe9\x9f\xb3\n\t\t\t\ttmp_list_syllable = tmp_list_syllable[:-1]\n\t\t\t\t# \xe5\x86\x8d\xe6\xac\xa1\xe8\xbf\x9b\xe8\xa1\x8c\xe6\x8b\xbc\xe9\x9f\xb3\xe8\xbd\xac\xe6\xb1\x89\xe5\xad\x97\xe8\xa7\xa3\xe7\xa0\x81\n\t\t\t\ttmp_lst_result = self.decode(tmp_list_syllable, 0.0)\n\t\t\t\t\n\t\t\t\tif(len(tmp_lst_result) > 0):\n\t\t\t\t\t# \xe5\xb0\x86\xe5\xbe\x97\xe5\x88\xb0\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe5\x8a\xa0\xe5\x85\xa5\xe8\xbf\x9b\xe6\x9d\xa5\n\t\t\t\t\tstr_result = str_result + tmp_lst_result[0][0]\n\t\t\t\t\n\t\t\t# \xe5\xb0\x86\xe5\x89\xa9\xe4\xbd\x99\xe7\x9a\x84\xe7\xbb\x93\xe6\x9e\x9c\xe8\xa1\xa5\xe5\x9b\x9e\xe6\x9d\xa5\n\t\t\ttmp_list_syllable = lst_syllable_remain\n\t\t\tlst_syllable_remain = [] # \xe6\xb8\x85\xe7\xa9\xba\n\n\t\t\n\t\treturn str_result\n\t\n\tdef decode(self,list_syllable, yuzhi = 0.0001):\n\t\t\'\'\'\n\t\t\xe5\xae\x9e\xe7\x8e\xb0\xe6\x8b\xbc\xe9\x9f\xb3\xe5\x90\x91\xe6\x96\x87\xe6\x9c\xac\xe7\x9a\x84\xe8\xbd\xac\xe6\x8d\xa2\n\t\t\xe5\x9f\xba\xe4\xba\x8e\xe9\xa9\xac\xe5\xb0\x94\xe5\x8f\xaf\xe5\xa4\xab\xe9\x93\xbe\n\t\t\'\'\'\n\t\t#assert self.dic_pinyin == null or self.model1 == null or self.model2 == null\n\t\tlist_words = []\n\t\t\n\t\tnum_pinyin = len(list_syllable)\n\t\t#print(\'======\')\n\t\t#print(\'decode function: list_syllable\\n\',list_syllable)\n\t\t#print(num_pinyin)\n\t\t# \xe5\xbc\x80\xe5\xa7\x8b\xe8\xaf\xad\xe9\x9f\xb3\xe8\xa7\xa3\xe7\xa0\x81\n\t\tfor i in range(num_pinyin):\n\t\t\t#print(i)\n\t\t\tls = \'\'\n\t\t\tif(list_syllable[i] in self.dict_pinyin): # \xe5\xa6\x82\xe6\x9e\x9c\xe8\xbf\x99\xe4\xb8\xaa\xe6\x8b\xbc\xe9\x9f\xb3\xe5\x9c\xa8\xe6\xb1\x89\xe8\xaf\xad\xe6\x8b\xbc\xe9\x9f\xb3\xe5\xad\x97\xe5\x85\xb8\xe9\x87\x8c\xe7\x9a\x84\xe8\xaf\x9d\n\t\t\t\t# \xe8\x8e\xb7\xe5\x8f\x96\xe6\x8b\xbc\xe9\x9f\xb3\xe4\xb8\x8b\xe5\xb1\x9e\xe7\x9a\x84\xe5\xad\x97\xe7\x9a\x84\xe5\x88\x97\xe8\xa1\xa8\xef\xbc\x8cls\xe5\x8c\x85\xe5\x90\xab\xe4\xba\x86\xe8\xaf\xa5\xe6\x8b\xbc\xe9\x9f\xb3\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe6\x89\x80\xe6\x9c\x89\xe7\x9a\x84\xe5\xad\x97\n\t\t\t\tls = self.dict_pinyin[list_syllable[i]]\n\t\t\telse:\n\t\t\t\tbreak\n\t\t\t\n\t\t\t\n\t\t\tif(i == 0):\n\t\t\t\t# \xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe5\x81\x9a\xe5\x88\x9d\xe5\xa7\x8b\xe5\xa4\x84\xe7\x90\x86\n\t\t\t\tnum_ls = len(ls)\n\t\t\t\tfor j in range(num_ls):\n\t\t\t\t\ttuple_word = [\'\',0.0]\n\t\t\t\t\t# \xe8\xae\xbe\xe7\xbd\xae\xe9\xa9\xac\xe5\xb0\x94\xe7\xa7\x91\xe5\xa4\xab\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x88\x9d\xe5\xa7\x8b\xe7\x8a\xb6\xe6\x80\x81\xe5\x80\xbc\n\t\t\t\t\t# \xe8\xae\xbe\xe7\xbd\xae\xe5\x88\x9d\xe5\xa7\x8b\xe6\xa6\x82\xe7\x8e\x87\xef\xbc\x8c\xe7\xbd\xae\xe4\xb8\xba1.0\n\t\t\t\t\ttuple_word = [ls[j], 1.0]\n\t\t\t\t\t#print(tuple_word)\n\t\t\t\t\t# \xe6\xb7\xbb\xe5\x8a\xa0\xe5\x88\xb0\xe5\x8f\xaf\xe8\x83\xbd\xe7\x9a\x84\xe5\x8f\xa5\xe5\xad\x90\xe5\x88\x97\xe8\xa1\xa8\n\t\t\t\t\tlist_words.append(tuple_word)\n\t\t\t\t\n\t\t\t\t#print(list_words)\n\t\t\t\tcontinue\n\t\t\telse:\n\t\t\t\t# \xe5\xbc\x80\xe5\xa7\x8b\xe5\xa4\x84\xe7\x90\x86\xe7\xb4\xa7\xe8\xb7\x9f\xe5\x9c\xa8\xe7\xac\xac\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe5\x90\x8e\xe9\x9d\xa2\xe7\x9a\x84\xe5\xad\x97\n\t\t\t\tlist_words_2 = []\n\t\t\t\tnum_ls_word = len(list_words)\n\t\t\t\t#print(\'ls_wd: \',list_words)\n\t\t\t\tfor j in range(0, num_ls_word):\n\t\t\t\t\t\n\t\t\t\t\tnum_ls = len(ls)\n\t\t\t\t\tfor k in range(0, num_ls):\n\t\t\t\t\t\ttuple_word = [\'\',0.0]\n\t\t\t\t\t\ttuple_word = list(list_words[j]) # \xe6\x8a\x8a\xe7\x8e\xb0\xe6\x9c\x89\xe7\x9a\x84\xe6\xaf\x8f\xe4\xb8\x80\xe6\x9d\xa1\xe7\x9f\xad\xe8\xaf\xad\xe5\x8f\x96\xe5\x87\xba\xe6\x9d\xa5\n\t\t\t\t\t\t#print(\'tw1: \',tuple_word)\n\t\t\t\t\t\ttuple_word[0] = tuple_word[0] + ls[k] # \xe5\xb0\x9d\xe8\xaf\x95\xe6\x8c\x89\xe7\x85\xa7\xe4\xb8\x8b\xe4\xb8\x80\xe4\xb8\xaa\xe9\x9f\xb3\xe5\x8f\xaf\xe8\x83\xbd\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\x85\xa8\xe9\x83\xa8\xe7\x9a\x84\xe5\xad\x97\xe8\xbf\x9b\xe8\xa1\x8c\xe7\xbb\x84\xe5\x90\x88\n\t\t\t\t\t\t#print(\'ls[k]  \',ls[k])\n\t\t\t\t\t\t\n\t\t\t\t\t\ttmp_words = tuple_word[0][-2:] # \xe5\x8f\x96\xe5\x87\xba\xe7\x94\xa8\xe4\xba\x8e\xe8\xae\xa1\xe7\xae\x97\xe7\x9a\x84\xe6\x9c\x80\xe5\x90\x8e\xe4\xb8\xa4\xe4\xb8\xaa\xe5\xad\x97\n\t\t\t\t\t\t#print(\'tmp_words: \',tmp_words,tmp_words in self.model2)\n\t\t\t\t\t\tif(tmp_words in self.model2): # \xe5\x88\xa4\xe6\x96\xad\xe5\xae\x83\xe4\xbb\xac\xe6\x98\xaf\xe4\xb8\x8d\xe6\x98\xaf\xe5\x86\x8d\xe7\x8a\xb6\xe6\x80\x81\xe8\xbd\xac\xe7\xa7\xbb\xe8\xa1\xa8\xe9\x87\x8c\n\t\t\t\t\t\t\t#print(tmp_words,tmp_words in self.model2)\n\t\t\t\t\t\t\ttuple_word[1] = tuple_word[1] * float(self.model2[tmp_words]) / float(self.model1[tmp_words[-2]])\n\t\t\t\t\t\t\t# \xe6\xa0\xb8\xe5\xbf\x83\xef\xbc\x81\xe5\x9c\xa8\xe5\xbd\x93\xe5\x89\x8d\xe6\xa6\x82\xe7\x8e\x87\xe4\xb8\x8a\xe4\xb9\x98\xe8\xbd\xac\xe7\xa7\xbb\xe6\xa6\x82\xe7\x8e\x87\xef\xbc\x8c\xe5\x85\xac\xe5\xbc\x8f\xe5\x8c\x96\xe7\xae\x80\xe5\x90\x8e\xe4\xb8\xba\xe7\xac\xacn-1\xe5\x92\x8cn\xe4\xb8\xaa\xe5\xad\x97\xe5\x87\xba\xe7\x8e\xb0\xe7\x9a\x84\xe6\xac\xa1\xe6\x95\xb0\xe9\x99\xa4\xe4\xbb\xa5\xe7\xac\xacn-1\xe4\xb8\xaa\xe5\xad\x97\xe5\x87\xba\xe7\x8e\xb0\xe7\x9a\x84\xe6\xac\xa1\xe6\x95\xb0\n\t\t\t\t\t\t\t#print(self.model2[tmp_words],self.model1[tmp_words[-2]])\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\ttuple_word[1] = 0.0\n\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t#print(\'tw2: \',tuple_word)\n\t\t\t\t\t\t#print(tuple_word[1] >= pow(yuzhi, i))\n\t\t\t\t\t\tif(tuple_word[1] >= pow(yuzhi, i)):\n\t\t\t\t\t\t\t# \xe5\xa4\xa7\xe4\xba\x8e\xe9\x98\x88\xe5\x80\xbc\xe4\xb9\x8b\xe5\x90\x8e\xe4\xbf\x9d\xe7\x95\x99\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe4\xb8\xa2\xe5\xbc\x83\n\t\t\t\t\t\t\tlist_words_2.append(tuple_word)\n\t\t\t\t\t\t\n\t\t\t\tlist_words = list_words_2\n\t\t\t\t#print(list_words,\'\\n\')\n\t\t#print(list_words)\n\t\tfor i in range(0, len(list_words)):\n\t\t\tfor j in range(i + 1, len(list_words)):\n\t\t\t\tif(list_words[i][1] < list_words[j][1]):\n\t\t\t\t\ttmp = list_words[i]\n\t\t\t\t\tlist_words[i] = list_words[j]\n\t\t\t\t\tlist_words[j] = tmp\n\t\t\n\t\treturn list_words\n\t\tpass\n\t\t\n\tdef GetSymbolDict(self, dictfilename):\n\t\t\'\'\'\n\t\t\xe8\xaf\xbb\xe5\x8f\x96\xe6\x8b\xbc\xe9\x9f\xb3\xe6\xb1\x89\xe5\xad\x97\xe7\x9a\x84\xe5\xad\x97\xe5\x85\xb8\xe6\x96\x87\xe4\xbb\xb6\n\t\t\xe8\xbf\x94\xe5\x9b\x9e\xe8\xaf\xbb\xe5\x8f\x96\xe5\x90\x8e\xe7\x9a\x84\xe5\xad\x97\xe5\x85\xb8\n\t\t\'\'\'\n\t\ttxt_obj = open(dictfilename, \'r\', encoding=\'UTF-8\') # \xe6\x89\x93\xe5\xbc\x80\xe6\x96\x87\xe4\xbb\xb6\xe5\xb9\xb6\xe8\xaf\xbb\xe5\x85\xa5\n\t\ttxt_text = txt_obj.read()\n\t\ttxt_obj.close()\n\t\ttxt_lines = txt_text.split(\'\\n\') # \xe6\x96\x87\xe6\x9c\xac\xe5\x88\x86\xe5\x89\xb2\n\t\t\n\t\tdic_symbol = {} # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe7\xac\xa6\xe5\x8f\xb7\xe5\xad\x97\xe5\x85\xb8\n\t\tfor i in txt_lines:\n\t\t\tlist_symbol=[] # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe7\xac\xa6\xe5\x8f\xb7\xe5\x88\x97\xe8\xa1\xa8\n\t\t\tif(i!=\'\'):\n\t\t\t\ttxt_l=i.split(\'\\t\')\n\t\t\t\tpinyin = txt_l[0]\n\t\t\t\tfor word in txt_l[1]:\n\t\t\t\t\tlist_symbol.append(word)\n\t\t\tdic_symbol[pinyin] = list_symbol\n\t\t\n\t\treturn dic_symbol\n\t\t\n\tdef GetLanguageModel(self, modelLanFilename):\n\t\t\'\'\'\n\t\t\xe8\xaf\xbb\xe5\x8f\x96\xe8\xaf\xad\xe8\xa8\x80\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\n\t\t\xe8\xbf\x94\xe5\x9b\x9e\xe8\xaf\xbb\xe5\x8f\x96\xe5\x90\x8e\xe7\x9a\x84\xe6\xa8\xa1\xe5\x9e\x8b\n\t\t\'\'\'\n\t\ttxt_obj = open(modelLanFilename, \'r\', encoding=\'UTF-8\') # \xe6\x89\x93\xe5\xbc\x80\xe6\x96\x87\xe4\xbb\xb6\xe5\xb9\xb6\xe8\xaf\xbb\xe5\x85\xa5\n\t\ttxt_text = txt_obj.read()\n\t\ttxt_obj.close()\n\t\ttxt_lines = txt_text.split(\'\\n\') # \xe6\x96\x87\xe6\x9c\xac\xe5\x88\x86\xe5\x89\xb2\n\t\t\n\t\tdic_model = {} # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe7\xac\xa6\xe5\x8f\xb7\xe5\xad\x97\xe5\x85\xb8\n\t\tfor i in txt_lines:\n\t\t\tif(i!=\'\'):\n\t\t\t\ttxt_l=i.split(\'\\t\')\n\t\t\t\tif(len(txt_l) == 1):\n\t\t\t\t\tcontinue\n\t\t\t\t#print(txt_l)\n\t\t\t\tdic_model[txt_l[0]] = txt_l[1]\n\t\t\t\t\n\t\treturn dic_model\n\t\n\tdef GetPinyin(self, filename):\n\t\tfile_obj = open(filename,\'r\',encoding=\'UTF-8\')\n\t\ttxt_all = file_obj.read()\n\t\tfile_obj.close()\n\t\n\t\ttxt_lines = txt_all.split(\'\\n\')\n\t\tdic={}\n\t\n\t\tfor line in txt_lines:\n\t\t\tif(line == \'\'):\n\t\t\t\tcontinue\n\t\t\tpinyin_split = line.split(\'\\t\')\n\t\t\t\n\t\t\tlist_pinyin=pinyin_split[0]\n\t\t\t\n\t\t\tif(list_pinyin not in dic and int(pinyin_split[1]) > 1):\n\t\t\t\tdic[list_pinyin] = pinyin_split[1]\n\t\treturn dic\n\n\nif(__name__==\'__main__\'):\n\t\n\tml = ModelLanguage(\'model_language\')\n\tml.LoadModel()\n\t\n\t#str_pinyin = [\'zhe4\',\'zhen1\',\'shi4\',\'ji2\', \'hao3\',\'de5\']\n\t#str_pinyin = [\'jin1\', \'tian1\', \'shi4\', \'xing1\', \'qi1\', \'san1\']\n\t#str_pinyin = [\'ni3\', \'hao3\',\'a1\']\n\t#str_pinyin = [\'wo3\',\'dui4\',\'shi4\',\'mei2\',\'cuo4\',\'ni3\',\'hao3\']\n\t#str_pinyin = [\'wo3\',\'dui4\',\'shi4\',\'tian1\',\'mei2\',\'na5\',\'li3\',\'hai4\']\n\t#str_pinyin = [\'ba3\',\'zhe4\',\'xie1\',\'zuo4\',\'wan2\',\'wo3\',\'jiu4\',\'qu4\',\'shui4\',\'jiao4\']\n\t#str_pinyin = [\'wo3\',\'qu4\',\'a4\',\'mei2\',\'shi4\',\'er2\',\'la1\']\n\t#str_pinyin = [\'wo3\', \'men5\', \'qun2\', \'li3\', \'xiong1\', \'di4\', \'jian4\', \'mei4\', \'dou1\', \'zai4\', \'shuo1\']\n\t#str_pinyin = [\'su1\', \'an1\', \'ni3\', \'sui4\', \'li4\', \'yun4\', \'sui2\', \'cong2\', \'jiao4\', \'ming2\', \'tao2\', \'qi3\', \'yu2\', \'peng2\', \'ya4\', \'yang4\', \'chao1\', \'dao3\', \'jiang1\', \'li3\', \'yuan2\', \'kang1\', \'zhua1\', \'zou3\']\n\t#str_pinyin = [\'da4\', \'jia1\', \'hao3\']\n\tstr_pinyin = [\'kao3\', \'yan2\', \'yan1\', \'yu3\', \'ci2\', \'hui4\']\n\t#r = ml.decode(str_pinyin)\n\tr=ml.SpeechToText(str_pinyin)\n\tprint(\'\xe8\xaf\xad\xe9\x9f\xb3\xe8\xbd\xac\xe6\x96\x87\xe5\xad\x97\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x9a\\n\',r)\n\n'"
SpeechModel24.py,4,"b'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n""""""\n@author: nl8590687\n""""""\nimport platform as plat\nimport os\nimport time\n\nfrom general_function.file_wav import *\nfrom general_function.file_dict import *\nfrom general_function.gen_func import *\n\n# LSTM_CNN\nimport keras as kr\nimport numpy as np\nimport random\n\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dense, Dropout, Input, Reshape # , Flatten,LSTM,Convolution1D,MaxPooling1D,Merge\nfrom keras.layers import Conv1D,LSTM,MaxPooling1D, Lambda, TimeDistributed, Activation,Conv2D, MaxPooling2D #, Merge,Conv1D\nfrom keras import backend as K\nfrom keras.optimizers import SGD, Adadelta\n\nfrom readdata24 import DataSpeech\n\nclass ModelSpeech(): # \xe8\xaf\xad\xe9\x9f\xb3\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xb1\xbb\n\tdef __init__(self, datapath):\n\t\t\'\'\'\n\t\t\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n\t\t\xe9\xbb\x98\xe8\xae\xa4\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe6\x8b\xbc\xe9\x9f\xb3\xe7\x9a\x84\xe8\xa1\xa8\xe7\xa4\xba\xe5\xa4\xa7\xe5\xb0\x8f\xe6\x98\xaf1424\xef\xbc\x8c\xe5\x8d\xb31423\xe4\xb8\xaa\xe6\x8b\xbc\xe9\x9f\xb3+1\xe4\xb8\xaa\xe7\xa9\xba\xe7\x99\xbd\xe5\x9d\x97\n\t\t\'\'\'\n\t\tMS_OUTPUT_SIZE = 1424\n\t\tself.MS_OUTPUT_SIZE = MS_OUTPUT_SIZE # \xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe6\x9c\x80\xe7\xbb\x88\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe5\x90\x91\xe9\x87\x8f\xe7\xbb\xb4\xe5\xba\xa6\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\n\t\t#self.BATCH_SIZE = BATCH_SIZE # \xe4\xb8\x80\xe6\xac\xa1\xe8\xae\xad\xe7\xbb\x83\xe7\x9a\x84batch\n\t\tself.label_max_string_length = 64\n\t\tself.AUDIO_LENGTH = 1600\n\t\tself.AUDIO_FEATURE_LENGTH = 200\n\t\tself._model, self.base_model = self.CreateModel() \n\t\t\n\t\tself.datapath = datapath\n\t\tself.slash = \'\'\n\t\tsystem_type = plat.system() # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa4\xe6\x96\xad\n\t\tif(system_type == \'Windows\'):\n\t\t\tself.slash=\'\\\\\' # \xe5\x8f\x8d\xe6\x96\x9c\xe6\x9d\xa0\n\t\telif(system_type == \'Linux\'):\n\t\t\tself.slash=\'/\' # \xe6\xad\xa3\xe6\x96\x9c\xe6\x9d\xa0\n\t\telse:\n\t\t\tprint(\'*[Message] Unknown System\\n\')\n\t\t\tself.slash=\'/\' # \xe6\xad\xa3\xe6\x96\x9c\xe6\x9d\xa0\n\t\tif(self.slash != self.datapath[-1]): # \xe5\x9c\xa8\xe7\x9b\xae\xe5\xbd\x95\xe8\xb7\xaf\xe5\xbe\x84\xe6\x9c\xab\xe5\xb0\xbe\xe5\xa2\x9e\xe5\x8a\xa0\xe6\x96\x9c\xe6\x9d\xa0\n\t\t\tself.datapath = self.datapath + self.slash\n\t\n\t\t\n\tdef CreateModel(self):\n\t\t\'\'\'\n\t\t\xe5\xae\x9a\xe4\xb9\x89CNN/LSTM/CTC\xe6\xa8\xa1\xe5\x9e\x8b\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\x87\xbd\xe6\x95\xb0\xe5\xbc\x8f\xe6\xa8\xa1\xe5\x9e\x8b\n\t\t\xe8\xbe\x93\xe5\x85\xa5\xe5\xb1\x82\xef\xbc\x9a200\xe7\xbb\xb4\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\x80\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe4\xb8\x80\xe6\x9d\xa1\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\xa7\xe9\x95\xbf\xe5\xba\xa6\xe8\xae\xbe\xe4\xb8\xba1600\xef\xbc\x88\xe5\xa4\xa7\xe7\xba\xa616s\xef\xbc\x89\n\t\t\xe9\x9a\x90\xe8\x97\x8f\xe5\xb1\x82\xef\xbc\x9a\xe5\x8d\xb7\xe7\xa7\xaf\xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\xef\xbc\x8c\xe5\x8d\xb7\xe7\xa7\xaf\xe6\xa0\xb8\xe5\xa4\xa7\xe5\xb0\x8f\xe4\xb8\xba3x3\xef\xbc\x8c\xe6\xb1\xa0\xe5\x8c\x96\xe7\xaa\x97\xe5\x8f\xa3\xe5\xa4\xa7\xe5\xb0\x8f\xe4\xb8\xba2\n\t\t\xe9\x9a\x90\xe8\x97\x8f\xe5\xb1\x82\xef\xbc\x9a\xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\t\xe8\xbe\x93\xe5\x87\xba\xe5\xb1\x82\xef\xbc\x9a\xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\xef\xbc\x8c\xe7\xa5\x9e\xe7\xbb\x8f\xe5\x85\x83\xe6\x95\xb0\xe9\x87\x8f\xe4\xb8\xbaself.MS_OUTPUT_SIZE\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8softmax\xe4\xbd\x9c\xe4\xb8\xba\xe6\xbf\x80\xe6\xb4\xbb\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\n\t\tCTC\xe5\xb1\x82\xef\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8CTC\xe7\x9a\x84loss\xe4\xbd\x9c\xe4\xb8\xba\xe6\x8d\x9f\xe5\xa4\xb1\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\xae\x9e\xe7\x8e\xb0\xe8\xbf\x9e\xe6\x8e\xa5\xe6\x80\xa7\xe6\x97\xb6\xe5\xba\x8f\xe5\xa4\x9a\xe8\xbe\x93\xe5\x87\xba\n\t\t\n\t\t\'\'\'\n\t\t# \xe6\xaf\x8f\xe4\xb8\x80\xe5\xb8\xa7\xe4\xbd\xbf\xe7\x94\xa813\xe7\xbb\xb4mfcc\xe7\x89\xb9\xe5\xbe\x81\xe5\x8f\x8a\xe5\x85\xb613\xe7\xbb\xb4\xe4\xb8\x80\xe9\x98\xb6\xe5\xb7\xae\xe5\x88\x86\xe5\x92\x8c13\xe7\xbb\xb4\xe4\xba\x8c\xe9\x98\xb6\xe5\xb7\xae\xe5\x88\x86\xe8\xa1\xa8\xe7\xa4\xba\xef\xbc\x8c\xe6\x9c\x80\xe5\xa4\xa7\xe4\xbf\xa1\xe5\x8f\xb7\xe5\xba\x8f\xe5\x88\x97\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\xba1500\n\t\tinput_data = Input(name=\'the_input\', shape=(self.AUDIO_LENGTH, self.AUDIO_FEATURE_LENGTH, 1))\n\t\t\n\t\tlayer_h1 = Conv2D(32, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(input_data) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h1 = Dropout(0.1)(layer_h1)\n\t\tlayer_h2 = Conv2D(32, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h1) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h3 = MaxPooling2D(pool_size=2, strides=None, padding=""valid"")(layer_h2) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t#layer_h3 = Dropout(0.2)(layer_h2) # \xe9\x9a\x8f\xe6\x9c\xba\xe4\xb8\xad\xe6\x96\xad\xe9\x83\xa8\xe5\x88\x86\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe8\xbf\x9e\xe6\x8e\xa5\xef\xbc\x8c\xe9\x98\xb2\xe6\xad\xa2\xe8\xbf\x87\xe6\x8b\x9f\xe5\x90\x88\n\t\tlayer_h3 = Dropout(0.2)(layer_h3)\n\t\tlayer_h4 = Conv2D(64, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h3) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h4 = Dropout(0.2)(layer_h4)\n\t\tlayer_h5 = Conv2D(64, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h4) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h6 = MaxPooling2D(pool_size=2, strides=None, padding=""valid"")(layer_h5) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\tlayer_h6 = Dropout(0.3)(layer_h6)\n\t\tlayer_h7 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h6) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h7 = Dropout(0.3)(layer_h7)\n\t\tlayer_h8 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h7) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h9 = MaxPooling2D(pool_size=2, strides=None, padding=""valid"")(layer_h8) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t#test=Model(inputs = input_data, outputs = layer_h6)\n\t\t#test.summary()\n\t\t\n\t\tlayer_h10 = Reshape((200, 3200))(layer_h9) #Reshape\xe5\xb1\x82\n\t\t#layer_h5 = LSTM(256, activation=\'relu\', use_bias=True, return_sequences=True)(layer_h4) # LSTM\xe5\xb1\x82\n\t\t#layer_h6 = Dropout(0.2)(layer_h5) # \xe9\x9a\x8f\xe6\x9c\xba\xe4\xb8\xad\xe6\x96\xad\xe9\x83\xa8\xe5\x88\x86\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe8\xbf\x9e\xe6\x8e\xa5\xef\xbc\x8c\xe9\x98\xb2\xe6\xad\xa2\xe8\xbf\x87\xe6\x8b\x9f\xe5\x90\x88\n\t\tlayer_h10 = Dropout(0.4)(layer_h10)\n\t\tlayer_h11 = Dense(128, activation=""relu"", use_bias=True, kernel_initializer=\'he_normal\')(layer_h10) # \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\tlayer_h11 = Dropout(0.4)(layer_h11)\n\t\tlayer_h12 = Dense(self.MS_OUTPUT_SIZE, use_bias=True, kernel_initializer=\'he_normal\')(layer_h11) # \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\t\n\t\ty_pred = Activation(\'softmax\', name=\'Activation0\')(layer_h12)\n\t\tmodel_data = Model(inputs = input_data, outputs = y_pred)\n\t\t#model_data.summary()\n\t\t\n\t\tlabels = Input(name=\'the_labels\', shape=[self.label_max_string_length], dtype=\'float32\')\n\t\tinput_length = Input(name=\'input_length\', shape=[1], dtype=\'int64\')\n\t\tlabel_length = Input(name=\'label_length\', shape=[1], dtype=\'int64\')\n\t\t# Keras doesn\'t currently support loss funcs with extra parameters\n\t\t# so CTC loss is implemented in a lambda layer\n\t\t\n\t\t#layer_out = Lambda(ctc_lambda_func,output_shape=(self.MS_OUTPUT_SIZE, ), name=\'ctc\')([y_pred, labels, input_length, label_length])#(layer_h6) # CTC\n\t\tloss_out = Lambda(self.ctc_lambda_func, output_shape=(1,), name=\'ctc\')([y_pred, labels, input_length, label_length])\n\t\t\n\t\t\n\t\t\n\t\tmodel = Model(inputs=[input_data, labels, input_length, label_length], outputs=loss_out)\n\t\t\n\t\t#model.summary()\n\t\t\n\t\t# clipnorm seems to speeds up convergence\n\t\t#sgd = SGD(lr=0.0001, decay=1e-6, momentum=0.9, nesterov=True, clipnorm=5)\n\t\tada_d = Adadelta(lr = 0.01, rho = 0.95, epsilon = 1e-06)\n\t\t\n\t\t#model.compile(loss={\'ctc\': lambda y_true, y_pred: y_pred}, optimizer=sgd)\n\t\tmodel.compile(loss={\'ctc\': lambda y_true, y_pred: y_pred}, optimizer = ada_d)\n\t\t\n\t\t\n\t\t# captures output of softmax so we can decode the output during visualization\n\t\ttest_func = K.function([input_data], [y_pred])\n\t\t\n\t\tprint(\'[*\xe6\x8f\x90\xe7\xa4\xba] \xe5\x88\x9b\xe5\xbb\xba\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x88\x90\xe5\x8a\x9f\xef\xbc\x8c\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xbc\x96\xe8\xaf\x91\xe6\x88\x90\xe5\x8a\x9f\')\n\t\treturn model, model_data\n\t\t\n\tdef ctc_lambda_func(self, args):\n\t\ty_pred, labels, input_length, label_length = args\n\t\t\n\t\ty_pred = y_pred[:, :, :]\n\t\t#y_pred = y_pred[:, 2:, :]\n\t\treturn K.ctc_batch_cost(labels, y_pred, input_length, label_length)\n\t\n\t\n\t\n\tdef TrainModel(self, datapath, epoch = 2, save_step = 1000, batch_size = 32, filename = \'model_speech/speech_model24\'):\n\t\t\'\'\'\n\t\t\xe8\xae\xad\xe7\xbb\x83\xe6\xa8\xa1\xe5\x9e\x8b\n\t\t\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\n\t\t\tdatapath: \xe6\x95\xb0\xe6\x8d\xae\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe8\xb7\xaf\xe5\xbe\x84\n\t\t\tepoch: \xe8\xbf\xad\xe4\xbb\xa3\xe8\xbd\xae\xe6\x95\xb0\n\t\t\tsave_step: \xe6\xaf\x8f\xe5\xa4\x9a\xe5\xb0\x91\xe6\xad\xa5\xe4\xbf\x9d\xe5\xad\x98\xe4\xb8\x80\xe6\xac\xa1\xe6\xa8\xa1\xe5\x9e\x8b\n\t\t\tfilename: \xe9\xbb\x98\xe8\xae\xa4\xe4\xbf\x9d\xe5\xad\x98\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xef\xbc\x8c\xe4\xb8\x8d\xe5\x90\xab\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8e\xe7\xbc\x80\xe5\x90\x8d\n\t\t\'\'\'\n\t\tdata=DataSpeech(datapath, \'train\')\n\t\t\n\t\tnum_data = data.GetDataNum() # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\n\t\t\n\t\tyielddatas = data.data_genetator(batch_size, self.AUDIO_LENGTH)\n\t\t\n\t\tfor epoch in range(epoch): # \xe8\xbf\xad\xe4\xbb\xa3\xe8\xbd\xae\xe6\x95\xb0\n\t\t\tprint(\'[running] train epoch %d .\' % epoch)\n\t\t\tn_step = 0 # \xe8\xbf\xad\xe4\xbb\xa3\xe6\x95\xb0\xe6\x8d\xae\xe6\x95\xb0\n\t\t\twhile True:\n\t\t\t\ttry:\n\t\t\t\t\tprint(\'[message] epoch %d . Have train datas %d+\'%(epoch, n_step*save_step))\n\t\t\t\t\t# data_genetator\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe7\x94\x9f\xe6\x88\x90\xe5\x99\xa8\xe5\x87\xbd\xe6\x95\xb0\n\t\t\t\t\t\n\t\t\t\t\t#self._model.fit_generator(yielddatas, save_step, nb_worker=2)\n\t\t\t\t\tself._model.fit_generator(yielddatas, save_step)\n\t\t\t\t\tn_step += 1\n\t\t\t\texcept StopIteration:\n\t\t\t\t\tprint(\'[error] generator error. please check data format.\')\n\t\t\t\t\tbreak\n\t\t\t\t\n\t\t\t\tself.SaveModel(comment=\'_e_\'+str(epoch)+\'_step_\'+str(n_step * save_step))\n\t\t\t\tself.TestModel(self.datapath, str_dataset=\'train\', data_count = 4)\n\t\t\t\tself.TestModel(self.datapath, str_dataset=\'dev\', data_count = 4)\n\t\t\t\t\n\tdef LoadModel(self,filename=\'model_speech/speech_model24.model\'):\n\t\t\'\'\'\n\t\t\xe5\x8a\xa0\xe8\xbd\xbd\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x8f\x82\xe6\x95\xb0\n\t\t\'\'\'\n\t\tself._model.load_weights(filename)\n\t\tself.base_model.load_weights(filename + \'.base\')\n\n\tdef SaveModel(self,filename=\'model_speech/speech_model24\',comment=\'\'):\n\t\t\'\'\'\n\t\t\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x8f\x82\xe6\x95\xb0\n\t\t\'\'\'\n\t\tself._model.save_weights(filename+comment+\'.model\')\n\t\tself.base_model.save_weights(filename + comment + \'.model.base\')\n\t\tf = open(\'step24.txt\',\'w\')\n\t\tf.write(filename+comment)\n\t\tf.close()\n\n\tdef TestModel(self, datapath=\'\', str_dataset=\'dev\', data_count = 32, out_report = False, show_ratio = True):\n\t\t\'\'\'\n\t\t\xe6\xb5\x8b\xe8\xaf\x95\xe6\xa3\x80\xe9\xaa\x8c\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x95\x88\xe6\x9e\x9c\n\t\t\'\'\'\n\t\tdata=DataSpeech(self.datapath, str_dataset)\n\t\t#data.LoadDataList(str_dataset) \n\t\tnum_data = data.GetDataNum() # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\n\t\tif(data_count <= 0 or data_count > num_data): # \xe5\xbd\x93data_count\xe4\xb8\xba\xe5\xb0\x8f\xe4\xba\x8e\xe7\xad\x89\xe4\xba\x8e0\xe6\x88\x96\xe8\x80\x85\xe5\xa4\xa7\xe4\xba\x8e\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xae\xe9\x87\x8f\xe7\x9a\x84\xe5\x80\xbc\xe6\x97\xb6\xef\xbc\x8c\xe5\x88\x99\xe4\xbd\xbf\xe7\x94\xa8\xe5\x85\xa8\xe9\x83\xa8\xe6\x95\xb0\xe6\x8d\xae\xe6\x9d\xa5\xe6\xb5\x8b\xe8\xaf\x95\n\t\t\tdata_count = num_data\n\t\t\n\t\ttry:\n\t\t\tran_num = random.randint(0,num_data - 1) # \xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\x80\xe4\xb8\xaa\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\n\t\t\t\n\t\t\twords_num = 0\n\t\t\tword_error_num = 0\n\t\t\t\n\t\t\tnowtime = time.strftime(\'%Y%m%d_%H%M%S\',time.localtime(time.time()))\n\t\t\tif(out_report == True):\n\t\t\t\ttxt_obj = open(\'Test_Report_\' + str_dataset + \'_\' + nowtime + \'.txt\', \'w\', encoding=\'UTF-8\') # \xe6\x89\x93\xe5\xbc\x80\xe6\x96\x87\xe4\xbb\xb6\xe5\xb9\xb6\xe8\xaf\xbb\xe5\x85\xa5\n\t\t\t\n\t\t\ttxt = \'\'\n\t\t\tfor i in range(data_count):\n\t\t\t\tdata_input, data_labels = data.GetData((ran_num + i) % num_data)  # \xe4\xbb\x8e\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xe5\xbc\x80\xe5\xa7\x8b\xe8\xbf\x9e\xe7\xbb\xad\xe5\x90\x91\xe5\x90\x8e\xe5\x8f\x96\xe4\xb8\x80\xe5\xae\x9a\xe6\x95\xb0\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\xae\n\t\t\t\t\n\t\t\t\t# \xe6\x95\xb0\xe6\x8d\xae\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x87\xba\xe9\x94\x99\xe5\xa4\x84\xe7\x90\x86 \xe5\xbc\x80\xe5\xa7\x8b\n\t\t\t\t# \xe5\xbd\x93\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84wav\xe6\x96\x87\xe4\xbb\xb6\xe9\x95\xbf\xe5\xba\xa6\xe8\xbf\x87\xe9\x95\xbf\xe6\x97\xb6\xe8\x87\xaa\xe5\x8a\xa8\xe8\xb7\xb3\xe8\xbf\x87\xe8\xaf\xa5\xe6\x96\x87\xe4\xbb\xb6\xef\xbc\x8c\xe8\xbd\xac\xe8\x80\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8b\xe4\xb8\x80\xe4\xb8\xaawav\xe6\x96\x87\xe4\xbb\xb6\xe6\x9d\xa5\xe8\xbf\x90\xe8\xa1\x8c\n\t\t\t\tnum_bias = 0\n\t\t\t\twhile(data_input.shape[0] > self.AUDIO_LENGTH):\n\t\t\t\t\tprint(\'*[Error]\',\'wave data lenghth of num\',(ran_num + i) % num_data, \'is too long.\',\'\\n A Exception raise when test Speech Model.\')\n\t\t\t\t\tnum_bias += 1\n\t\t\t\t\tdata_input, data_labels = data.GetData((ran_num + i + num_bias) % num_data)  # \xe4\xbb\x8e\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xe5\xbc\x80\xe5\xa7\x8b\xe8\xbf\x9e\xe7\xbb\xad\xe5\x90\x91\xe5\x90\x8e\xe5\x8f\x96\xe4\xb8\x80\xe5\xae\x9a\xe6\x95\xb0\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\xae\n\t\t\t\t# \xe6\x95\xb0\xe6\x8d\xae\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x87\xba\xe9\x94\x99\xe5\xa4\x84\xe7\x90\x86 \xe7\xbb\x93\xe6\x9d\x9f\n\t\t\t\t\n\t\t\t\tpre = self.Predict(data_input, data_input.shape[0] // 8)\n\t\t\t\t\n\t\t\t\twords_n = data_labels.shape[0] # \xe8\x8e\xb7\xe5\x8f\x96\xe6\xaf\x8f\xe4\xb8\xaa\xe5\x8f\xa5\xe5\xad\x90\xe7\x9a\x84\xe5\xad\x97\xe6\x95\xb0\n\t\t\t\twords_num += words_n # \xe6\x8a\x8a\xe5\x8f\xa5\xe5\xad\x90\xe7\x9a\x84\xe6\x80\xbb\xe5\xad\x97\xe6\x95\xb0\xe5\x8a\xa0\xe4\xb8\x8a\n\t\t\t\tedit_distance = GetEditDistance(data_labels, pre) # \xe8\x8e\xb7\xe5\x8f\x96\xe7\xbc\x96\xe8\xbe\x91\xe8\xb7\x9d\xe7\xa6\xbb\n\t\t\t\tif(edit_distance <= words_n): # \xe5\xbd\x93\xe7\xbc\x96\xe8\xbe\x91\xe8\xb7\x9d\xe7\xa6\xbb\xe5\xb0\x8f\xe4\xba\x8e\xe7\xad\x89\xe4\xba\x8e\xe5\x8f\xa5\xe5\xad\x90\xe5\xad\x97\xe6\x95\xb0\xe6\x97\xb6\n\t\t\t\t\tword_error_num += edit_distance # \xe4\xbd\xbf\xe7\x94\xa8\xe7\xbc\x96\xe8\xbe\x91\xe8\xb7\x9d\xe7\xa6\xbb\xe4\xbd\x9c\xe4\xb8\xba\xe9\x94\x99\xe8\xaf\xaf\xe5\xad\x97\xe6\x95\xb0\n\t\t\t\telse: # \xe5\x90\xa6\xe5\x88\x99\xe8\x82\xaf\xe5\xae\x9a\xe6\x98\xaf\xe5\xa2\x9e\xe5\x8a\xa0\xe4\xba\x86\xe4\xb8\x80\xe5\xa0\x86\xe4\xb9\xb1\xe4\xb8\x83\xe5\x85\xab\xe7\xb3\x9f\xe7\x9a\x84\xe5\xa5\x87\xe5\xa5\x87\xe6\x80\xaa\xe6\x80\xaa\xe7\x9a\x84\xe5\xad\x97\n\t\t\t\t\tword_error_num += words_n # \xe5\xb0\xb1\xe7\x9b\xb4\xe6\x8e\xa5\xe5\x8a\xa0\xe5\x8f\xa5\xe5\xad\x90\xe6\x9c\xac\xe6\x9d\xa5\xe7\x9a\x84\xe6\x80\xbb\xe5\xad\x97\xe6\x95\xb0\xe5\xb0\xb1\xe5\xa5\xbd\xe4\xba\x86\n\t\t\t\t\n\t\t\t\tif(i % 10 == 0 and show_ratio == True):\n\t\t\t\t\tprint(\'\xe6\xb5\x8b\xe8\xaf\x95\xe8\xbf\x9b\xe5\xba\xa6\xef\xbc\x9a\',i,\'/\',data_count)\n\t\t\t\t\n\t\t\t\ttxt = \'\'\n\t\t\t\tif(out_report == True):\n\t\t\t\t\ttxt += str(i) + \'\\n\'\n\t\t\t\t\ttxt += \'True:\\t\' + str(data_labels) + \'\\n\'\n\t\t\t\t\ttxt += \'Pred:\\t\' + str(pre) + \'\\n\'\n\t\t\t\t\ttxt += \'\\n\'\n\t\t\t\t\ttxt_obj.write(txt)\n\t\t\t\t\n\t\t\t\n\t\t\tprint(\'*[\xe6\xb5\x8b\xe8\xaf\x95\xe7\xbb\x93\xe6\x9e\x9c] \xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab \' + str_dataset + \' \xe9\x9b\x86\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\x95\xe5\xad\x97\xe9\x94\x99\xe8\xaf\xaf\xe7\x8e\x87\xef\xbc\x9a\', word_error_num / words_num * 100, \'%\')\n\t\t\tif(out_report == True):\n\t\t\t\ttxt = \'*[\xe6\xb5\x8b\xe8\xaf\x95\xe7\xbb\x93\xe6\x9e\x9c] \xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab \' + str_dataset + \' \xe9\x9b\x86\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\x95\xe5\xad\x97\xe9\x94\x99\xe8\xaf\xaf\xe7\x8e\x87\xef\xbc\x9a \' + str(word_error_num / words_num * 100) + \' %\'\n\t\t\t\ttxt_obj.write(txt)\n\t\t\t\ttxt_obj.close()\n\t\t\t\n\t\texcept StopIteration:\n\t\t\tprint(\'[Error] Model Test Error. please check data format.\')\n\t\n\tdef Predict(self, data_input, input_len):\n\t\t\'\'\'\n\t\t\xe9\xa2\x84\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\n\t\t\xe8\xbf\x94\xe5\x9b\x9e\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe5\x90\x8e\xe7\x9a\x84\xe6\x8b\xbc\xe9\x9f\xb3\xe7\xac\xa6\xe5\x8f\xb7\xe5\x88\x97\xe8\xa1\xa8\n\t\t\'\'\'\n\t\t\n\t\tbatch_size = 1 \n\t\tin_len = np.zeros((batch_size),dtype = np.int32)\n\t\t\n\t\tin_len[0] = input_len\n\t\t\n\t\tx_in = np.zeros((batch_size, 1600, self.AUDIO_FEATURE_LENGTH, 1), dtype=np.float)\n\t\t\n\t\tfor i in range(batch_size):\n\t\t\tx_in[i,0:len(data_input)] = data_input\n\t\t\n\t\t\n\t\tbase_pred = self.base_model.predict(x = x_in)\n\t\t\n\t\t#print(\'base_pred:\\n\', base_pred)\n\t\t\n\t\t#y_p = base_pred\n\t\t#for j in range(200):\n\t\t#\tmean = np.sum(y_p[0][j]) / y_p[0][j].shape[0]\n\t\t#\tprint(\'max y_p:\',np.max(y_p[0][j]),\'min y_p:\',np.min(y_p[0][j]),\'mean y_p:\',mean,\'mid y_p:\',y_p[0][j][100])\n\t\t#\tprint(\'argmin:\',np.argmin(y_p[0][j]),\'argmax:\',np.argmax(y_p[0][j]))\n\t\t#\tcount=0\n\t\t#\tfor i in range(y_p[0][j].shape[0]):\n\t\t#\t\tif(y_p[0][j][i] < mean):\n\t\t#\t\t\tcount += 1\n\t\t#\tprint(\'count:\',count)\n\t\t\n\t\tbase_pred =base_pred[:, :, :]\n\t\t#base_pred =base_pred[:, 2:, :]\n\t\t\n\t\tr = K.ctc_decode(base_pred, in_len, greedy = True, beam_width=100, top_paths=1)\n\t\t\n\t\t#print(\'r\', r)\n\t\t\n\t\t\n\t\tr1 = K.get_value(r[0][0])\n\t\t#print(\'r1\', r1)\n\t\t\n\t\t\n\t\t#r2 = K.get_value(r[1])\n\t\t#print(r2)\n\t\t\n\t\tr1=r1[0]\n\t\t\n\t\treturn r1\n\t\tpass\n\t\n\tdef RecognizeSpeech(self, wavsignal, fs):\n\t\t\'\'\'\n\t\t\xe6\x9c\x80\xe7\xbb\x88\xe5\x81\x9a\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\x94\xa8\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe8\xaf\x86\xe5\x88\xab\xe4\xb8\x80\xe4\xb8\xaawav\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe8\xaf\xad\xe9\x9f\xb3\n\t\t\'\'\'\n\t\t\n\t\t#data = self.data\n\t\t#data = DataSpeech(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\')\n\t\t#data.LoadDataList(\'dev\')\n\t\t# \xe8\x8e\xb7\xe5\x8f\x96\xe8\xbe\x93\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\n\t\t#data_input = GetMfccFeature(wavsignal, fs)\n\t\t#t0=time.time()\n\t\tdata_input = GetFrequencyFeature2(wavsignal, fs)\n\t\t#t1=time.time()\n\t\t#print(\'time cost:\',t1-t0)\n\t\t\n\t\tinput_length = len(data_input)\n\t\tinput_length = input_length // 8\n\t\t\n\t\tdata_input = np.array(data_input, dtype = np.float)\n\t\t#print(data_input,data_input.shape)\n\t\tdata_input = data_input.reshape(data_input.shape[0],data_input.shape[1],1)\n\t\t#t2=time.time()\n\t\tr1 = self.Predict(data_input, input_length)\n\t\t#t3=time.time()\n\t\t#print(\'time cost:\',t3-t2)\n\t\tlist_symbol_dic = GetSymbolList(self.datapath) # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x8b\xbc\xe9\x9f\xb3\xe5\x88\x97\xe8\xa1\xa8\n\t\t\n\t\t\n\t\tr_str=[]\n\t\tfor i in r1:\n\t\t\tr_str.append(list_symbol_dic[i])\n\t\t\n\t\treturn r_str\n\t\tpass\n\t\t\n\tdef RecognizeSpeech_FromFile(self, filename):\n\t\t\'\'\'\n\t\t\xe6\x9c\x80\xe7\xbb\x88\xe5\x81\x9a\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\x94\xa8\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe8\xaf\x86\xe5\x88\xab\xe6\x8c\x87\xe5\xae\x9a\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\x9a\x84\xe8\xaf\xad\xe9\x9f\xb3\n\t\t\'\'\'\n\t\t\n\t\twavsignal,fs = read_wav_data(filename)\n\t\t\n\t\tr = self.RecognizeSpeech(wavsignal, fs)\n\t\t\n\t\treturn r\n\t\t\n\t\tpass\n\t\t\n\t\n\t\t\n\t@property\n\tdef model(self):\n\t\t\'\'\'\n\t\t\xe8\xbf\x94\xe5\x9b\x9ekeras model\n\t\t\'\'\'\n\t\treturn self._model\n\n\nif(__name__==\'__main__\'):\n\t\n\timport tensorflow as tf\n\tfrom keras.backend.tensorflow_backend import set_session\n\tos.environ[""CUDA_VISIBLE_DEVICES""] = ""0""\n\t#\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x85\x8d\xe7\xbd\xae\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa870%\xe7\x9a\x84GPU\n\tconfig = tf.ConfigProto()\n\tconfig.gpu_options.per_process_gpu_memory_fraction = 0.93\n\t#config.gpu_options.allow_growth=True   #\xe4\xb8\x8d\xe5\x85\xa8\xe9\x83\xa8\xe5\x8d\xa0\xe6\xbb\xa1\xe6\x98\xbe\xe5\xad\x98, \xe6\x8c\x89\xe9\x9c\x80\xe5\x88\x86\xe9\x85\x8d\n\tset_session(tf.Session(config=config))\n\t\n\t\n\tdatapath = \'\'\n\tmodelpath = \'model_speech\'\n\t\n\t\n\tif(not os.path.exists(modelpath)): # \xe5\x88\xa4\xe6\x96\xad\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe7\x9b\xae\xe5\xbd\x95\xe6\x98\xaf\xe5\x90\xa6\xe5\xad\x98\xe5\x9c\xa8\n\t\tos.makedirs(modelpath) # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x8c\xe5\xb0\xb1\xe6\x96\xb0\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\xaa\xef\xbc\x8c\xe9\x81\xbf\xe5\x85\x8d\xe4\xb9\x8b\xe5\x90\x8e\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe7\x82\xb8\xe6\x8e\x89\n\t\n\tsystem_type = plat.system() # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa4\xe6\x96\xad\n\tif(system_type == \'Windows\'):\n\t\tdatapath = \'D:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\'\n\t\tmodelpath = modelpath + \'\\\\\'\n\telif(system_type == \'Linux\'):\n\t\tdatapath = \'dataset\'\n\t\tmodelpath = modelpath + \'/\'\n\telse:\n\t\tprint(\'*[Message] Unknown System\\n\')\n\t\tdatapath = \'dataset\'\n\t\tmodelpath = modelpath + \'/\'\n\t\n\tms = ModelSpeech(datapath)\n\t\n\t#ms.LoadModel(modelpath + \'m24/speech_model24_e_0_step_411000.model\')\n\tms.TrainModel(datapath, epoch = 50, batch_size = 16, save_step = 500)\n\t#ms.TestModel(datapath, str_dataset=\'test\', data_count = 128, out_report = True)\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\ST-CMDS-20170001_1-OS\\\\20170001P00241I0053.wav\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\ST-CMDS-20170001_1-OS\\\\20170001P00020I0087.wav\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\wav\\\\train\\\\A11\\\\A11_167.WAV\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\wav\\\\test\\\\D4\\\\D4_750.wav\')\n\t#print(\'*[\xe6\x8f\x90\xe7\xa4\xba] \xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x9a\\n\',r)\n'"
SpeechModel25.py,4,"b'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n""""""\n@author: nl8590687\n""""""\nimport platform as plat\nimport os\nimport time\n\nfrom general_function.file_wav import *\nfrom general_function.file_dict import *\nfrom general_function.gen_func import *\n\n# LSTM_CNN\nimport keras as kr\nimport numpy as np\nimport random\n\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dense, Dropout, Input, Reshape # , Flatten,LSTM,Convolution1D,MaxPooling1D,Merge\nfrom keras.layers import Conv1D,LSTM,MaxPooling1D, Lambda, TimeDistributed, Activation,Conv2D, MaxPooling2D #, Merge,Conv1D\nfrom keras import backend as K\nfrom keras.optimizers import SGD, Adadelta\n\nfrom readdata24 import DataSpeech\n\nclass ModelSpeech(): # \xe8\xaf\xad\xe9\x9f\xb3\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xb1\xbb\n\tdef __init__(self, datapath):\n\t\t\'\'\'\n\t\t\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n\t\t\xe9\xbb\x98\xe8\xae\xa4\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe6\x8b\xbc\xe9\x9f\xb3\xe7\x9a\x84\xe8\xa1\xa8\xe7\xa4\xba\xe5\xa4\xa7\xe5\xb0\x8f\xe6\x98\xaf1424\xef\xbc\x8c\xe5\x8d\xb31423\xe4\xb8\xaa\xe6\x8b\xbc\xe9\x9f\xb3+1\xe4\xb8\xaa\xe7\xa9\xba\xe7\x99\xbd\xe5\x9d\x97\n\t\t\'\'\'\n\t\tMS_OUTPUT_SIZE = 1424\n\t\tself.MS_OUTPUT_SIZE = MS_OUTPUT_SIZE # \xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe6\x9c\x80\xe7\xbb\x88\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe5\x90\x91\xe9\x87\x8f\xe7\xbb\xb4\xe5\xba\xa6\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\n\t\t#self.BATCH_SIZE = BATCH_SIZE # \xe4\xb8\x80\xe6\xac\xa1\xe8\xae\xad\xe7\xbb\x83\xe7\x9a\x84batch\n\t\tself.label_max_string_length = 64\n\t\tself.AUDIO_LENGTH = 1600\n\t\tself.AUDIO_FEATURE_LENGTH = 200\n\t\tself._model, self.base_model = self.CreateModel() \n\t\t\n\t\tself.datapath = datapath\n\t\tself.slash = \'\'\n\t\tsystem_type = plat.system() # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa4\xe6\x96\xad\n\t\tif(system_type == \'Windows\'):\n\t\t\tself.slash=\'\\\\\' # \xe5\x8f\x8d\xe6\x96\x9c\xe6\x9d\xa0\n\t\telif(system_type == \'Linux\'):\n\t\t\tself.slash=\'/\' # \xe6\xad\xa3\xe6\x96\x9c\xe6\x9d\xa0\n\t\telse:\n\t\t\tprint(\'*[Message] Unknown System\\n\')\n\t\t\tself.slash=\'/\' # \xe6\xad\xa3\xe6\x96\x9c\xe6\x9d\xa0\n\t\tif(self.slash != self.datapath[-1]): # \xe5\x9c\xa8\xe7\x9b\xae\xe5\xbd\x95\xe8\xb7\xaf\xe5\xbe\x84\xe6\x9c\xab\xe5\xb0\xbe\xe5\xa2\x9e\xe5\x8a\xa0\xe6\x96\x9c\xe6\x9d\xa0\n\t\t\tself.datapath = self.datapath + self.slash\n\t\n\t\t\n\tdef CreateModel(self):\n\t\t\'\'\'\n\t\t\xe5\xae\x9a\xe4\xb9\x89CNN/LSTM/CTC\xe6\xa8\xa1\xe5\x9e\x8b\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\x87\xbd\xe6\x95\xb0\xe5\xbc\x8f\xe6\xa8\xa1\xe5\x9e\x8b\n\t\t\xe8\xbe\x93\xe5\x85\xa5\xe5\xb1\x82\xef\xbc\x9a200\xe7\xbb\xb4\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\x80\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe4\xb8\x80\xe6\x9d\xa1\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\xa7\xe9\x95\xbf\xe5\xba\xa6\xe8\xae\xbe\xe4\xb8\xba1600\xef\xbc\x88\xe5\xa4\xa7\xe7\xba\xa616s\xef\xbc\x89\n\t\t\xe9\x9a\x90\xe8\x97\x8f\xe5\xb1\x82\xef\xbc\x9a3*3\xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\t\xe9\x9a\x90\xe8\x97\x8f\xe5\xb1\x82\xef\xbc\x9a\xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\xef\xbc\x8c\xe6\xb1\xa0\xe5\x8c\x96\xe7\xaa\x97\xe5\x8f\xa3\xe5\xa4\xa7\xe5\xb0\x8f\xe4\xb8\xba2\n\t\t\xe9\x9a\x90\xe8\x97\x8f\xe5\xb1\x82\xef\xbc\x9aDropout\xe5\xb1\x82\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe6\x96\xad\xe5\xbc\x80\xe7\x9a\x84\xe7\xa5\x9e\xe7\xbb\x8f\xe5\x85\x83\xe7\x9a\x84\xe6\xaf\x94\xe4\xbe\x8b\xe4\xb8\xba0.2\xef\xbc\x8c\xe9\x98\xb2\xe6\xad\xa2\xe8\xbf\x87\xe6\x8b\x9f\xe5\x90\x88\n\t\t\xe9\x9a\x90\xe8\x97\x8f\xe5\xb1\x82\xef\xbc\x9a\xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\t\xe7\x9b\xae\xe6\xa0\x87\xe8\xbe\x93\xe5\x87\xba\xe5\xb1\x82\xef\xbc\x9a\xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\xef\xbc\x8c\xe7\xa5\x9e\xe7\xbb\x8f\xe5\x85\x83\xe6\x95\xb0\xe9\x87\x8f\xe4\xb8\xbaself.MS_OUTPUT_SIZE\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8softmax\xe4\xbd\x9c\xe4\xb8\xba\xe6\xbf\x80\xe6\xb4\xbb\xe5\x87\xbd\xe6\x95\xb0\n\t\t\xe8\xbe\x93\xe5\x87\xba\xe5\xb1\x82\xef\xbc\x9a\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe5\xb1\x82\xef\xbc\x8c\xe5\x8d\xb3CTC\xe5\xb1\x82\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8CTC\xe7\x9a\x84loss\xe4\xbd\x9c\xe4\xb8\xba\xe6\x8d\x9f\xe5\xa4\xb1\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\xae\x9e\xe7\x8e\xb0\xe8\xbf\x9e\xe6\x8e\xa5\xe6\x80\xa7\xe6\x97\xb6\xe5\xba\x8f\xe5\xa4\x9a\xe8\xbe\x93\xe5\x87\xba\n\t\t\n\t\t\'\'\'\n\t\t# \xe6\xaf\x8f\xe4\xb8\x80\xe5\xb8\xa7\xe4\xbd\xbf\xe7\x94\xa813\xe7\xbb\xb4mfcc\xe7\x89\xb9\xe5\xbe\x81\xe5\x8f\x8a\xe5\x85\xb613\xe7\xbb\xb4\xe4\xb8\x80\xe9\x98\xb6\xe5\xb7\xae\xe5\x88\x86\xe5\x92\x8c13\xe7\xbb\xb4\xe4\xba\x8c\xe9\x98\xb6\xe5\xb7\xae\xe5\x88\x86\xe8\xa1\xa8\xe7\xa4\xba\xef\xbc\x8c\xe6\x9c\x80\xe5\xa4\xa7\xe4\xbf\xa1\xe5\x8f\xb7\xe5\xba\x8f\xe5\x88\x97\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\xba1500\n\t\tinput_data = Input(name=\'the_input\', shape=(self.AUDIO_LENGTH, self.AUDIO_FEATURE_LENGTH, 1))\n\t\t\n\t\tlayer_h1 = Conv2D(32, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(input_data) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h1 = Dropout(0.1)(layer_h1)\n\t\tlayer_h2 = Conv2D(32, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h1) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h3 = MaxPooling2D(pool_size=2, strides=None, padding=""valid"")(layer_h2) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t#layer_h3 = Dropout(0.2)(layer_h2) # \xe9\x9a\x8f\xe6\x9c\xba\xe4\xb8\xad\xe6\x96\xad\xe9\x83\xa8\xe5\x88\x86\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe8\xbf\x9e\xe6\x8e\xa5\xef\xbc\x8c\xe9\x98\xb2\xe6\xad\xa2\xe8\xbf\x87\xe6\x8b\x9f\xe5\x90\x88\n\t\tlayer_h3 = Dropout(0.1)(layer_h3)\n\t\tlayer_h4 = Conv2D(64, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h3) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h4 = Dropout(0.2)(layer_h4)\n\t\tlayer_h5 = Conv2D(64, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h4) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h6 = MaxPooling2D(pool_size=2, strides=None, padding=""valid"")(layer_h5) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\tlayer_h6 = Dropout(0.2)(layer_h6)\n\t\tlayer_h7 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h6) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h7 = Dropout(0.3)(layer_h7)\n\t\tlayer_h8 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h7) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h9 = MaxPooling2D(pool_size=2, strides=None, padding=""valid"")(layer_h8) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\tlayer_h9 = Dropout(0.3)(layer_h9)\n\t\tlayer_h10 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h9) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h10 = Dropout(0.4)(layer_h10)\n\t\tlayer_h11 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h10) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h12 = MaxPooling2D(pool_size=1, strides=None, padding=""valid"")(layer_h11) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\t#test=Model(inputs = input_data, outputs = layer_h12)\n\t\t#test.summary()\n\t\t\n\t\tlayer_h10 = Reshape((200, 3200))(layer_h12) #Reshape\xe5\xb1\x82\n\t\t#layer_h5 = LSTM(256, activation=\'relu\', use_bias=True, return_sequences=True)(layer_h4) # LSTM\xe5\xb1\x82\n\t\t#layer_h6 = Dropout(0.2)(layer_h5) # \xe9\x9a\x8f\xe6\x9c\xba\xe4\xb8\xad\xe6\x96\xad\xe9\x83\xa8\xe5\x88\x86\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe8\xbf\x9e\xe6\x8e\xa5\xef\xbc\x8c\xe9\x98\xb2\xe6\xad\xa2\xe8\xbf\x87\xe6\x8b\x9f\xe5\x90\x88\n\t\tlayer_h10 = Dropout(0.4)(layer_h10)\n\t\tlayer_h11 = Dense(128, activation=""relu"", use_bias=True, kernel_initializer=\'he_normal\')(layer_h10) # \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\tlayer_h11 = Dropout(0.5)(layer_h11)\n\t\tlayer_h12 = Dense(self.MS_OUTPUT_SIZE, use_bias=True, kernel_initializer=\'he_normal\')(layer_h11) # \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\t\n\t\ty_pred = Activation(\'softmax\', name=\'Activation0\')(layer_h12)\n\t\tmodel_data = Model(inputs = input_data, outputs = y_pred)\n\t\t#model_data.summary()\n\t\t\n\t\tlabels = Input(name=\'the_labels\', shape=[self.label_max_string_length], dtype=\'float32\')\n\t\tinput_length = Input(name=\'input_length\', shape=[1], dtype=\'int64\')\n\t\tlabel_length = Input(name=\'label_length\', shape=[1], dtype=\'int64\')\n\t\t# Keras doesn\'t currently support loss funcs with extra parameters\n\t\t# so CTC loss is implemented in a lambda layer\n\t\t\n\t\t#layer_out = Lambda(ctc_lambda_func,output_shape=(self.MS_OUTPUT_SIZE, ), name=\'ctc\')([y_pred, labels, input_length, label_length])#(layer_h6) # CTC\n\t\tloss_out = Lambda(self.ctc_lambda_func, output_shape=(1,), name=\'ctc\')([y_pred, labels, input_length, label_length])\n\t\t\n\t\t\n\t\t\n\t\tmodel = Model(inputs=[input_data, labels, input_length, label_length], outputs=loss_out)\n\t\t\n\t\t#model.summary()\n\t\t\n\t\t# clipnorm seems to speeds up convergence\n\t\t#sgd = SGD(lr=0.0001, decay=1e-6, momentum=0.9, nesterov=True, clipnorm=5)\n\t\tada_d = Adadelta(lr = 0.01, rho = 0.95, epsilon = 1e-06)\n\t\t\n\t\t#model.compile(loss={\'ctc\': lambda y_true, y_pred: y_pred}, optimizer=sgd)\n\t\tmodel.compile(loss={\'ctc\': lambda y_true, y_pred: y_pred}, optimizer = ada_d)\n\t\t\n\t\t\n\t\t# captures output of softmax so we can decode the output during visualization\n\t\ttest_func = K.function([input_data], [y_pred])\n\t\t\n\t\tprint(\'[*\xe6\x8f\x90\xe7\xa4\xba] \xe5\x88\x9b\xe5\xbb\xba\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x88\x90\xe5\x8a\x9f\xef\xbc\x8c\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xbc\x96\xe8\xaf\x91\xe6\x88\x90\xe5\x8a\x9f\')\n\t\treturn model, model_data\n\t\t\n\tdef ctc_lambda_func(self, args):\n\t\ty_pred, labels, input_length, label_length = args\n\t\t\n\t\ty_pred = y_pred[:, :, :]\n\t\t#y_pred = y_pred[:, 2:, :]\n\t\treturn K.ctc_batch_cost(labels, y_pred, input_length, label_length)\n\t\n\t\n\t\n\tdef TrainModel(self, datapath, epoch = 2, save_step = 1000, batch_size = 32, filename = \'model_speech/speech_model25\'):\n\t\t\'\'\'\n\t\t\xe8\xae\xad\xe7\xbb\x83\xe6\xa8\xa1\xe5\x9e\x8b\n\t\t\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\n\t\t\tdatapath: \xe6\x95\xb0\xe6\x8d\xae\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe8\xb7\xaf\xe5\xbe\x84\n\t\t\tepoch: \xe8\xbf\xad\xe4\xbb\xa3\xe8\xbd\xae\xe6\x95\xb0\n\t\t\tsave_step: \xe6\xaf\x8f\xe5\xa4\x9a\xe5\xb0\x91\xe6\xad\xa5\xe4\xbf\x9d\xe5\xad\x98\xe4\xb8\x80\xe6\xac\xa1\xe6\xa8\xa1\xe5\x9e\x8b\n\t\t\tfilename: \xe9\xbb\x98\xe8\xae\xa4\xe4\xbf\x9d\xe5\xad\x98\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xef\xbc\x8c\xe4\xb8\x8d\xe5\x90\xab\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8e\xe7\xbc\x80\xe5\x90\x8d\n\t\t\'\'\'\n\t\tdata=DataSpeech(datapath, \'train\')\n\t\t\n\t\tnum_data = data.GetDataNum() # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\n\t\t\n\t\tyielddatas = data.data_genetator(batch_size, self.AUDIO_LENGTH)\n\t\t\n\t\tfor epoch in range(epoch): # \xe8\xbf\xad\xe4\xbb\xa3\xe8\xbd\xae\xe6\x95\xb0\n\t\t\tprint(\'[running] train epoch %d .\' % epoch)\n\t\t\tn_step = 0 # \xe8\xbf\xad\xe4\xbb\xa3\xe6\x95\xb0\xe6\x8d\xae\xe6\x95\xb0\n\t\t\twhile True:\n\t\t\t\ttry:\n\t\t\t\t\tprint(\'[message] epoch %d . Have train datas %d+\'%(epoch, n_step*save_step))\n\t\t\t\t\t# data_genetator\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe7\x94\x9f\xe6\x88\x90\xe5\x99\xa8\xe5\x87\xbd\xe6\x95\xb0\n\t\t\t\t\t\n\t\t\t\t\t#self._model.fit_generator(yielddatas, save_step, nb_worker=2)\n\t\t\t\t\tself._model.fit_generator(yielddatas, save_step)\n\t\t\t\t\tn_step += 1\n\t\t\t\texcept StopIteration:\n\t\t\t\t\tprint(\'[error] generator error. please check data format.\')\n\t\t\t\t\tbreak\n\t\t\t\t\n\t\t\t\tself.SaveModel(comment=\'_e_\'+str(epoch)+\'_step_\'+str(n_step * save_step))\n\t\t\t\tself.TestModel(self.datapath, str_dataset=\'train\', data_count = 4)\n\t\t\t\tself.TestModel(self.datapath, str_dataset=\'dev\', data_count = 4)\n\t\t\t\t\n\tdef LoadModel(self,filename=\'model_speech/speech_model25.model\'):\n\t\t\'\'\'\n\t\t\xe5\x8a\xa0\xe8\xbd\xbd\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x8f\x82\xe6\x95\xb0\n\t\t\'\'\'\n\t\tself._model.load_weights(filename)\n\t\tself.base_model.load_weights(filename + \'.base\')\n\n\tdef SaveModel(self,filename=\'model_speech/speech_model25\',comment=\'\'):\n\t\t\'\'\'\n\t\t\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x8f\x82\xe6\x95\xb0\n\t\t\'\'\'\n\t\tself._model.save_weights(filename+comment+\'.model\')\n\t\tself.base_model.save_weights(filename + comment + \'.model.base\')\n\t\tf = open(\'step25.txt\',\'w\')\n\t\tf.write(filename+comment)\n\t\tf.close()\n\n\tdef TestModel(self, datapath=\'\', str_dataset=\'dev\', data_count = 32, out_report = False, show_ratio = True):\n\t\t\'\'\'\n\t\t\xe6\xb5\x8b\xe8\xaf\x95\xe6\xa3\x80\xe9\xaa\x8c\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x95\x88\xe6\x9e\x9c\n\t\t\'\'\'\n\t\tdata=DataSpeech(self.datapath, str_dataset)\n\t\t#data.LoadDataList(str_dataset) \n\t\tnum_data = data.GetDataNum() # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\n\t\tif(data_count <= 0 or data_count > num_data): # \xe5\xbd\x93data_count\xe4\xb8\xba\xe5\xb0\x8f\xe4\xba\x8e\xe7\xad\x89\xe4\xba\x8e0\xe6\x88\x96\xe8\x80\x85\xe5\xa4\xa7\xe4\xba\x8e\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xae\xe9\x87\x8f\xe7\x9a\x84\xe5\x80\xbc\xe6\x97\xb6\xef\xbc\x8c\xe5\x88\x99\xe4\xbd\xbf\xe7\x94\xa8\xe5\x85\xa8\xe9\x83\xa8\xe6\x95\xb0\xe6\x8d\xae\xe6\x9d\xa5\xe6\xb5\x8b\xe8\xaf\x95\n\t\t\tdata_count = num_data\n\t\t\n\t\ttry:\n\t\t\tran_num = random.randint(0,num_data - 1) # \xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\x80\xe4\xb8\xaa\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\n\t\t\t\n\t\t\twords_num = 0\n\t\t\tword_error_num = 0\n\t\t\t\n\t\t\tnowtime = time.strftime(\'%Y%m%d_%H%M%S\',time.localtime(time.time()))\n\t\t\tif(out_report == True):\n\t\t\t\ttxt_obj = open(\'Test_Report_\' + str_dataset + \'_\' + nowtime + \'.txt\', \'w\', encoding=\'UTF-8\') # \xe6\x89\x93\xe5\xbc\x80\xe6\x96\x87\xe4\xbb\xb6\xe5\xb9\xb6\xe8\xaf\xbb\xe5\x85\xa5\n\t\t\t\n\t\t\ttxt = \'\'\n\t\t\tfor i in range(data_count):\n\t\t\t\tdata_input, data_labels = data.GetData((ran_num + i) % num_data)  # \xe4\xbb\x8e\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xe5\xbc\x80\xe5\xa7\x8b\xe8\xbf\x9e\xe7\xbb\xad\xe5\x90\x91\xe5\x90\x8e\xe5\x8f\x96\xe4\xb8\x80\xe5\xae\x9a\xe6\x95\xb0\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\xae\n\t\t\t\t\n\t\t\t\t# \xe6\x95\xb0\xe6\x8d\xae\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x87\xba\xe9\x94\x99\xe5\xa4\x84\xe7\x90\x86 \xe5\xbc\x80\xe5\xa7\x8b\n\t\t\t\t# \xe5\xbd\x93\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84wav\xe6\x96\x87\xe4\xbb\xb6\xe9\x95\xbf\xe5\xba\xa6\xe8\xbf\x87\xe9\x95\xbf\xe6\x97\xb6\xe8\x87\xaa\xe5\x8a\xa8\xe8\xb7\xb3\xe8\xbf\x87\xe8\xaf\xa5\xe6\x96\x87\xe4\xbb\xb6\xef\xbc\x8c\xe8\xbd\xac\xe8\x80\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8b\xe4\xb8\x80\xe4\xb8\xaawav\xe6\x96\x87\xe4\xbb\xb6\xe6\x9d\xa5\xe8\xbf\x90\xe8\xa1\x8c\n\t\t\t\tnum_bias = 0\n\t\t\t\twhile(data_input.shape[0] > self.AUDIO_LENGTH):\n\t\t\t\t\tprint(\'*[Error]\',\'wave data lenghth of num\',(ran_num + i) % num_data, \'is too long.\',\'\\n A Exception raise when test Speech Model.\')\n\t\t\t\t\tnum_bias += 1\n\t\t\t\t\tdata_input, data_labels = data.GetData((ran_num + i + num_bias) % num_data)  # \xe4\xbb\x8e\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xe5\xbc\x80\xe5\xa7\x8b\xe8\xbf\x9e\xe7\xbb\xad\xe5\x90\x91\xe5\x90\x8e\xe5\x8f\x96\xe4\xb8\x80\xe5\xae\x9a\xe6\x95\xb0\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\xae\n\t\t\t\t# \xe6\x95\xb0\xe6\x8d\xae\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x87\xba\xe9\x94\x99\xe5\xa4\x84\xe7\x90\x86 \xe7\xbb\x93\xe6\x9d\x9f\n\t\t\t\t\n\t\t\t\tpre = self.Predict(data_input, data_input.shape[0] // 8)\n\t\t\t\t\n\t\t\t\twords_n = data_labels.shape[0] # \xe8\x8e\xb7\xe5\x8f\x96\xe6\xaf\x8f\xe4\xb8\xaa\xe5\x8f\xa5\xe5\xad\x90\xe7\x9a\x84\xe5\xad\x97\xe6\x95\xb0\n\t\t\t\twords_num += words_n # \xe6\x8a\x8a\xe5\x8f\xa5\xe5\xad\x90\xe7\x9a\x84\xe6\x80\xbb\xe5\xad\x97\xe6\x95\xb0\xe5\x8a\xa0\xe4\xb8\x8a\n\t\t\t\tedit_distance = GetEditDistance(data_labels, pre) # \xe8\x8e\xb7\xe5\x8f\x96\xe7\xbc\x96\xe8\xbe\x91\xe8\xb7\x9d\xe7\xa6\xbb\n\t\t\t\tif(edit_distance <= words_n): # \xe5\xbd\x93\xe7\xbc\x96\xe8\xbe\x91\xe8\xb7\x9d\xe7\xa6\xbb\xe5\xb0\x8f\xe4\xba\x8e\xe7\xad\x89\xe4\xba\x8e\xe5\x8f\xa5\xe5\xad\x90\xe5\xad\x97\xe6\x95\xb0\xe6\x97\xb6\n\t\t\t\t\tword_error_num += edit_distance # \xe4\xbd\xbf\xe7\x94\xa8\xe7\xbc\x96\xe8\xbe\x91\xe8\xb7\x9d\xe7\xa6\xbb\xe4\xbd\x9c\xe4\xb8\xba\xe9\x94\x99\xe8\xaf\xaf\xe5\xad\x97\xe6\x95\xb0\n\t\t\t\telse: # \xe5\x90\xa6\xe5\x88\x99\xe8\x82\xaf\xe5\xae\x9a\xe6\x98\xaf\xe5\xa2\x9e\xe5\x8a\xa0\xe4\xba\x86\xe4\xb8\x80\xe5\xa0\x86\xe4\xb9\xb1\xe4\xb8\x83\xe5\x85\xab\xe7\xb3\x9f\xe7\x9a\x84\xe5\xa5\x87\xe5\xa5\x87\xe6\x80\xaa\xe6\x80\xaa\xe7\x9a\x84\xe5\xad\x97\n\t\t\t\t\tword_error_num += words_n # \xe5\xb0\xb1\xe7\x9b\xb4\xe6\x8e\xa5\xe5\x8a\xa0\xe5\x8f\xa5\xe5\xad\x90\xe6\x9c\xac\xe6\x9d\xa5\xe7\x9a\x84\xe6\x80\xbb\xe5\xad\x97\xe6\x95\xb0\xe5\xb0\xb1\xe5\xa5\xbd\xe4\xba\x86\n\t\t\t\t\n\t\t\t\tif(i % 10 == 0 and show_ratio == True):\n\t\t\t\t\tprint(\'\xe6\xb5\x8b\xe8\xaf\x95\xe8\xbf\x9b\xe5\xba\xa6\xef\xbc\x9a\',i,\'/\',data_count)\n\t\t\t\t\n\t\t\t\ttxt = \'\'\n\t\t\t\tif(out_report == True):\n\t\t\t\t\ttxt += str(i) + \'\\n\'\n\t\t\t\t\ttxt += \'True:\\t\' + str(data_labels) + \'\\n\'\n\t\t\t\t\ttxt += \'Pred:\\t\' + str(pre) + \'\\n\'\n\t\t\t\t\ttxt += \'\\n\'\n\t\t\t\t\ttxt_obj.write(txt)\n\t\t\t\t\n\t\t\t\n\t\t\tprint(\'*[\xe6\xb5\x8b\xe8\xaf\x95\xe7\xbb\x93\xe6\x9e\x9c] \xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab \' + str_dataset + \' \xe9\x9b\x86\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\x95\xe5\xad\x97\xe9\x94\x99\xe8\xaf\xaf\xe7\x8e\x87\xef\xbc\x9a\', word_error_num / words_num * 100, \'%\')\n\t\t\tif(out_report == True):\n\t\t\t\ttxt = \'*[\xe6\xb5\x8b\xe8\xaf\x95\xe7\xbb\x93\xe6\x9e\x9c] \xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab \' + str_dataset + \' \xe9\x9b\x86\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\x95\xe5\xad\x97\xe9\x94\x99\xe8\xaf\xaf\xe7\x8e\x87\xef\xbc\x9a \' + str(word_error_num / words_num * 100) + \' %\'\n\t\t\t\ttxt_obj.write(txt)\n\t\t\t\ttxt_obj.close()\n\t\t\t\n\t\texcept StopIteration:\n\t\t\tprint(\'[Error] Model Test Error. please check data format.\')\n\t\n\tdef Predict(self, data_input, input_len):\n\t\t\'\'\'\n\t\t\xe9\xa2\x84\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\n\t\t\xe8\xbf\x94\xe5\x9b\x9e\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe5\x90\x8e\xe7\x9a\x84\xe6\x8b\xbc\xe9\x9f\xb3\xe7\xac\xa6\xe5\x8f\xb7\xe5\x88\x97\xe8\xa1\xa8\n\t\t\'\'\'\n\t\t\n\t\tbatch_size = 1 \n\t\tin_len = np.zeros((batch_size),dtype = np.int32)\n\t\t\n\t\tin_len[0] = input_len\n\t\t\n\t\tx_in = np.zeros((batch_size, 1600, self.AUDIO_FEATURE_LENGTH, 1), dtype=np.float)\n\t\t\n\t\tfor i in range(batch_size):\n\t\t\tx_in[i,0:len(data_input)] = data_input\n\t\t\n\t\t\n\t\tbase_pred = self.base_model.predict(x = x_in)\n\t\t\n\t\t#print(\'base_pred:\\n\', base_pred)\n\t\t\n\t\t#y_p = base_pred\n\t\t#for j in range(200):\n\t\t#\tmean = np.sum(y_p[0][j]) / y_p[0][j].shape[0]\n\t\t#\tprint(\'max y_p:\',np.max(y_p[0][j]),\'min y_p:\',np.min(y_p[0][j]),\'mean y_p:\',mean,\'mid y_p:\',y_p[0][j][100])\n\t\t#\tprint(\'argmin:\',np.argmin(y_p[0][j]),\'argmax:\',np.argmax(y_p[0][j]))\n\t\t#\tcount=0\n\t\t#\tfor i in range(y_p[0][j].shape[0]):\n\t\t#\t\tif(y_p[0][j][i] < mean):\n\t\t#\t\t\tcount += 1\n\t\t#\tprint(\'count:\',count)\n\t\t\n\t\tbase_pred =base_pred[:, :, :]\n\t\t#base_pred =base_pred[:, 2:, :]\n\t\t\n\t\tr = K.ctc_decode(base_pred, in_len, greedy = True, beam_width=100, top_paths=1)\n\t\t\n\t\t#print(\'r\', r)\n\t\t\n\t\t\n\t\tr1 = K.get_value(r[0][0])\n\t\t#print(\'r1\', r1)\n\t\t\n\t\t\n\t\t#r2 = K.get_value(r[1])\n\t\t#print(r2)\n\t\t\n\t\tr1=r1[0]\n\t\t\n\t\treturn r1\n\t\tpass\n\t\n\tdef RecognizeSpeech(self, wavsignal, fs):\n\t\t\'\'\'\n\t\t\xe6\x9c\x80\xe7\xbb\x88\xe5\x81\x9a\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\x94\xa8\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe8\xaf\x86\xe5\x88\xab\xe4\xb8\x80\xe4\xb8\xaawav\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe8\xaf\xad\xe9\x9f\xb3\n\t\t\'\'\'\n\t\t\n\t\t#data = self.data\n\t\t#data = DataSpeech(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\')\n\t\t#data.LoadDataList(\'dev\')\n\t\t# \xe8\x8e\xb7\xe5\x8f\x96\xe8\xbe\x93\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\n\t\t#data_input = GetMfccFeature(wavsignal, fs)\n\t\t#t0=time.time()\n\t\tdata_input = GetFrequencyFeature3(wavsignal, fs)\n\t\t#t1=time.time()\n\t\t#print(\'time cost:\',t1-t0)\n\t\t\n\t\tinput_length = len(data_input)\n\t\tinput_length = input_length // 8\n\t\t\n\t\tdata_input = np.array(data_input, dtype = np.float)\n\t\t#print(data_input,data_input.shape)\n\t\tdata_input = data_input.reshape(data_input.shape[0],data_input.shape[1],1)\n\t\t#t2=time.time()\n\t\tr1 = self.Predict(data_input, input_length)\n\t\t#t3=time.time()\n\t\t#print(\'time cost:\',t3-t2)\n\t\tlist_symbol_dic = GetSymbolList(self.datapath) # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x8b\xbc\xe9\x9f\xb3\xe5\x88\x97\xe8\xa1\xa8\n\t\t\n\t\t\n\t\tr_str=[]\n\t\tfor i in r1:\n\t\t\tr_str.append(list_symbol_dic[i])\n\t\t\n\t\treturn r_str\n\t\tpass\n\t\t\n\tdef RecognizeSpeech_FromFile(self, filename):\n\t\t\'\'\'\n\t\t\xe6\x9c\x80\xe7\xbb\x88\xe5\x81\x9a\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\x94\xa8\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe8\xaf\x86\xe5\x88\xab\xe6\x8c\x87\xe5\xae\x9a\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\x9a\x84\xe8\xaf\xad\xe9\x9f\xb3\n\t\t\'\'\'\n\t\t\n\t\twavsignal,fs = read_wav_data(filename)\n\t\t\n\t\tr = self.RecognizeSpeech(wavsignal, fs)\n\t\t\n\t\treturn r\n\t\t\n\t\tpass\n\t\t\n\t\n\t\t\n\t@property\n\tdef model(self):\n\t\t\'\'\'\n\t\t\xe8\xbf\x94\xe5\x9b\x9ekeras model\n\t\t\'\'\'\n\t\treturn self._model\n\n\nif(__name__==\'__main__\'):\n\t\n\timport tensorflow as tf\n\tfrom keras.backend.tensorflow_backend import set_session\n\tos.environ[""CUDA_VISIBLE_DEVICES""] = ""0""\n\t#\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x85\x8d\xe7\xbd\xae\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa870%\xe7\x9a\x84GPU\n\tconfig = tf.ConfigProto()\n\tconfig.gpu_options.per_process_gpu_memory_fraction = 0.93\n\t#config.gpu_options.allow_growth=True   #\xe4\xb8\x8d\xe5\x85\xa8\xe9\x83\xa8\xe5\x8d\xa0\xe6\xbb\xa1\xe6\x98\xbe\xe5\xad\x98, \xe6\x8c\x89\xe9\x9c\x80\xe5\x88\x86\xe9\x85\x8d\n\tset_session(tf.Session(config=config))\n\t\n\t\n\tdatapath = \'\'\n\tmodelpath = \'model_speech\'\n\t\n\t\n\tif(not os.path.exists(modelpath)): # \xe5\x88\xa4\xe6\x96\xad\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe7\x9b\xae\xe5\xbd\x95\xe6\x98\xaf\xe5\x90\xa6\xe5\xad\x98\xe5\x9c\xa8\n\t\tos.makedirs(modelpath) # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x8c\xe5\xb0\xb1\xe6\x96\xb0\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\xaa\xef\xbc\x8c\xe9\x81\xbf\xe5\x85\x8d\xe4\xb9\x8b\xe5\x90\x8e\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe7\x82\xb8\xe6\x8e\x89\n\t\n\tsystem_type = plat.system() # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa4\xe6\x96\xad\n\tif(system_type == \'Windows\'):\n\t\tdatapath = \'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\'\n\t\tmodelpath = modelpath + \'\\\\\'\n\telif(system_type == \'Linux\'):\n\t\tdatapath = \'dataset\'\n\t\tmodelpath = modelpath + \'/\'\n\telse:\n\t\tprint(\'*[Message] Unknown System\\n\')\n\t\tdatapath = \'dataset\'\n\t\tmodelpath = modelpath + \'/\'\n\t\n\tms = ModelSpeech(datapath)\n\t\n\t#ms.LoadModel(modelpath + \'m25/speech_model25_e_0_step_545500.model\')\n\tms.TrainModel(datapath, epoch = 50, batch_size = 16, save_step = 500)\n\t#ms.TestModel(datapath, str_dataset=\'test\', data_count = 128, out_report = True)\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\ST-CMDS-20170001_1-OS\\\\20170001P00241I0053.wav\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\ST-CMDS-20170001_1-OS\\\\20170001P00020I0087.wav\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\wav\\\\train\\\\A11\\\\A11_167.WAV\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\wav\\\\test\\\\D4\\\\D4_750.wav\')\n\t#print(\'*[\xe6\x8f\x90\xe7\xa4\xba] \xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x9a\\n\',r)\n'"
SpeechModel251.py,6,"b'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n""""""\n@author: nl8590687\n""""""\nimport platform as plat\nimport os\nimport time\n\nfrom general_function.file_wav import *\nfrom general_function.file_dict import *\nfrom general_function.gen_func import *\n\n# LSTM_CNN\nimport tensorflow as tf\nimport keras as kr\nimport numpy as np\nimport random\n\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dense, Dropout, Input, Reshape, BatchNormalization # , Flatten\nfrom keras.layers import Lambda, TimeDistributed, Activation,Conv2D, MaxPooling2D #, Merge\nfrom keras import backend as K\nfrom keras.optimizers import SGD, Adadelta, Adam\n\nfrom readdata24 import DataSpeech\n\nabspath = \'\'\nModelName=\'251\'\n#NUM_GPU = 2\n\nclass ModelSpeech(): # \xe8\xaf\xad\xe9\x9f\xb3\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xb1\xbb\n\tdef __init__(self, datapath):\n\t\t\'\'\'\n\t\t\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n\t\t\xe9\xbb\x98\xe8\xae\xa4\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe6\x8b\xbc\xe9\x9f\xb3\xe7\x9a\x84\xe8\xa1\xa8\xe7\xa4\xba\xe5\xa4\xa7\xe5\xb0\x8f\xe6\x98\xaf1424\xef\xbc\x8c\xe5\x8d\xb31423\xe4\xb8\xaa\xe6\x8b\xbc\xe9\x9f\xb3+1\xe4\xb8\xaa\xe7\xa9\xba\xe7\x99\xbd\xe5\x9d\x97\n\t\t\'\'\'\n\t\tMS_OUTPUT_SIZE = 1424\n\t\tself.MS_OUTPUT_SIZE = MS_OUTPUT_SIZE # \xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe6\x9c\x80\xe7\xbb\x88\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe5\x90\x91\xe9\x87\x8f\xe7\xbb\xb4\xe5\xba\xa6\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\n\t\t#self.BATCH_SIZE = BATCH_SIZE # \xe4\xb8\x80\xe6\xac\xa1\xe8\xae\xad\xe7\xbb\x83\xe7\x9a\x84batch\n\t\tself.label_max_string_length = 64\n\t\tself.AUDIO_LENGTH = 1600\n\t\tself.AUDIO_FEATURE_LENGTH = 200\n\t\tself._model, self.base_model = self.CreateModel() \n\t\t\n\t\tself.datapath = datapath\n\t\tself.slash = \'\'\n\t\tsystem_type = plat.system() # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa4\xe6\x96\xad\n\t\tif(system_type == \'Windows\'):\n\t\t\tself.slash=\'\\\\\' # \xe5\x8f\x8d\xe6\x96\x9c\xe6\x9d\xa0\n\t\telif(system_type == \'Linux\'):\n\t\t\tself.slash=\'/\' # \xe6\xad\xa3\xe6\x96\x9c\xe6\x9d\xa0\n\t\telse:\n\t\t\tprint(\'*[Message] Unknown System\\n\')\n\t\t\tself.slash=\'/\' # \xe6\xad\xa3\xe6\x96\x9c\xe6\x9d\xa0\n\t\tif(self.slash != self.datapath[-1]): # \xe5\x9c\xa8\xe7\x9b\xae\xe5\xbd\x95\xe8\xb7\xaf\xe5\xbe\x84\xe6\x9c\xab\xe5\xb0\xbe\xe5\xa2\x9e\xe5\x8a\xa0\xe6\x96\x9c\xe6\x9d\xa0\n\t\t\tself.datapath = self.datapath + self.slash\n\t\n\t\t\n\tdef CreateModel(self):\n\t\t\'\'\'\n\t\t\xe5\xae\x9a\xe4\xb9\x89CNN/LSTM/CTC\xe6\xa8\xa1\xe5\x9e\x8b\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\x87\xbd\xe6\x95\xb0\xe5\xbc\x8f\xe6\xa8\xa1\xe5\x9e\x8b\n\t\t\xe8\xbe\x93\xe5\x85\xa5\xe5\xb1\x82\xef\xbc\x9a200\xe7\xbb\xb4\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\x80\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe4\xb8\x80\xe6\x9d\xa1\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\xa7\xe9\x95\xbf\xe5\xba\xa6\xe8\xae\xbe\xe4\xb8\xba1600\xef\xbc\x88\xe5\xa4\xa7\xe7\xba\xa616s\xef\xbc\x89\n\t\t\xe9\x9a\x90\xe8\x97\x8f\xe5\xb1\x82\xef\xbc\x9a\xe5\x8d\xb7\xe7\xa7\xaf\xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\xef\xbc\x8c\xe5\x8d\xb7\xe7\xa7\xaf\xe6\xa0\xb8\xe5\xa4\xa7\xe5\xb0\x8f\xe4\xb8\xba3x3\xef\xbc\x8c\xe6\xb1\xa0\xe5\x8c\x96\xe7\xaa\x97\xe5\x8f\xa3\xe5\xa4\xa7\xe5\xb0\x8f\xe4\xb8\xba2\n\t\t\xe9\x9a\x90\xe8\x97\x8f\xe5\xb1\x82\xef\xbc\x9a\xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\t\xe8\xbe\x93\xe5\x87\xba\xe5\xb1\x82\xef\xbc\x9a\xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\xef\xbc\x8c\xe7\xa5\x9e\xe7\xbb\x8f\xe5\x85\x83\xe6\x95\xb0\xe9\x87\x8f\xe4\xb8\xbaself.MS_OUTPUT_SIZE\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8softmax\xe4\xbd\x9c\xe4\xb8\xba\xe6\xbf\x80\xe6\xb4\xbb\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\n\t\tCTC\xe5\xb1\x82\xef\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8CTC\xe7\x9a\x84loss\xe4\xbd\x9c\xe4\xb8\xba\xe6\x8d\x9f\xe5\xa4\xb1\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\xae\x9e\xe7\x8e\xb0\xe8\xbf\x9e\xe6\x8e\xa5\xe6\x80\xa7\xe6\x97\xb6\xe5\xba\x8f\xe5\xa4\x9a\xe8\xbe\x93\xe5\x87\xba\n\t\t\n\t\t\'\'\'\n\t\t\n\t\tinput_data = Input(name=\'the_input\', shape=(self.AUDIO_LENGTH, self.AUDIO_FEATURE_LENGTH, 1))\n\t\t\n\t\tlayer_h1 = Conv2D(32, (3,3), use_bias=False, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(input_data) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h1 = Dropout(0.05)(layer_h1)\n\t\tlayer_h2 = Conv2D(32, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h1) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h3 = MaxPooling2D(pool_size=2, strides=None, padding=""valid"")(layer_h2) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t#layer_h3 = Dropout(0.2)(layer_h2) # \xe9\x9a\x8f\xe6\x9c\xba\xe4\xb8\xad\xe6\x96\xad\xe9\x83\xa8\xe5\x88\x86\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe8\xbf\x9e\xe6\x8e\xa5\xef\xbc\x8c\xe9\x98\xb2\xe6\xad\xa2\xe8\xbf\x87\xe6\x8b\x9f\xe5\x90\x88\n\t\tlayer_h3 = Dropout(0.05)(layer_h3)\n\t\tlayer_h4 = Conv2D(64, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h3) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h4 = Dropout(0.1)(layer_h4)\n\t\tlayer_h5 = Conv2D(64, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h4) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h6 = MaxPooling2D(pool_size=2, strides=None, padding=""valid"")(layer_h5) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\tlayer_h6 = Dropout(0.1)(layer_h6)\n\t\tlayer_h7 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h6) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h7 = Dropout(0.15)(layer_h7)\n\t\tlayer_h8 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h7) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h9 = MaxPooling2D(pool_size=2, strides=None, padding=""valid"")(layer_h8) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\tlayer_h9 = Dropout(0.15)(layer_h9)\n\t\tlayer_h10 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h9) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h10 = Dropout(0.2)(layer_h10)\n\t\tlayer_h11 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h10) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h12 = MaxPooling2D(pool_size=1, strides=None, padding=""valid"")(layer_h11) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\tlayer_h12 = Dropout(0.2)(layer_h12)\n\t\tlayer_h13 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h12) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h13 = Dropout(0.2)(layer_h13)\n\t\tlayer_h14 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h13) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h15 = MaxPooling2D(pool_size=1, strides=None, padding=""valid"")(layer_h14) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\t#test=Model(inputs = input_data, outputs = layer_h12)\n\t\t#test.summary()\n\t\t\n\t\tlayer_h16 = Reshape((200, 3200))(layer_h15) #Reshape\xe5\xb1\x82\n\t\t#layer_h5 = LSTM(256, activation=\'relu\', use_bias=True, return_sequences=True)(layer_h4) # LSTM\xe5\xb1\x82\n\t\t#layer_h6 = Dropout(0.2)(layer_h5) # \xe9\x9a\x8f\xe6\x9c\xba\xe4\xb8\xad\xe6\x96\xad\xe9\x83\xa8\xe5\x88\x86\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe8\xbf\x9e\xe6\x8e\xa5\xef\xbc\x8c\xe9\x98\xb2\xe6\xad\xa2\xe8\xbf\x87\xe6\x8b\x9f\xe5\x90\x88\n\t\tlayer_h16 = Dropout(0.3)(layer_h16)\n\t\tlayer_h17 = Dense(128, activation=""relu"", use_bias=True, kernel_initializer=\'he_normal\')(layer_h16) # \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\tlayer_h17 = Dropout(0.3)(layer_h17)\n\t\tlayer_h18 = Dense(self.MS_OUTPUT_SIZE, use_bias=True, kernel_initializer=\'he_normal\')(layer_h17) # \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\t\n\t\ty_pred = Activation(\'softmax\', name=\'Activation0\')(layer_h18)\n\t\tmodel_data = Model(inputs = input_data, outputs = y_pred)\n\t\t#model_data.summary()\n\t\t\n\t\tlabels = Input(name=\'the_labels\', shape=[self.label_max_string_length], dtype=\'float32\')\n\t\tinput_length = Input(name=\'input_length\', shape=[1], dtype=\'int64\')\n\t\tlabel_length = Input(name=\'label_length\', shape=[1], dtype=\'int64\')\n\t\t# Keras doesn\'t currently support loss funcs with extra parameters\n\t\t# so CTC loss is implemented in a lambda layer\n\t\t\n\t\t#layer_out = Lambda(ctc_lambda_func,output_shape=(self.MS_OUTPUT_SIZE, ), name=\'ctc\')([y_pred, labels, input_length, label_length])#(layer_h6) # CTC\n\t\tloss_out = Lambda(self.ctc_lambda_func, output_shape=(1,), name=\'ctc\')([y_pred, labels, input_length, label_length])\n\t\t\n\t\t\n\t\t\n\t\tmodel = Model(inputs=[input_data, labels, input_length, label_length], outputs=loss_out)\n\t\t\n\t\tmodel.summary()\n\t\t\n\t\t# clipnorm seems to speeds up convergence\n\t\t#sgd = SGD(lr=0.0001, decay=1e-6, momentum=0.9, nesterov=True, clipnorm=5)\n\t\t#opt = Adadelta(lr = 0.01, rho = 0.95, epsilon = 1e-06)\n\t\topt = Adam(lr = 0.001, beta_1 = 0.9, beta_2 = 0.999, decay = 0.0, epsilon = 10e-8)\n\t\t#model.compile(loss={\'ctc\': lambda y_true, y_pred: y_pred}, optimizer=sgd)\n\t\tmodel.compile(loss={\'ctc\': lambda y_true, y_pred: y_pred}, optimizer = opt)\n\t\t\n\t\t\n\t\t# captures output of softmax so we can decode the output during visualization\n\t\ttest_func = K.function([input_data], [y_pred])\n\t\t\n\t\t#print(\'[*\xe6\x8f\x90\xe7\xa4\xba] \xe5\x88\x9b\xe5\xbb\xba\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x88\x90\xe5\x8a\x9f\xef\xbc\x8c\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xbc\x96\xe8\xaf\x91\xe6\x88\x90\xe5\x8a\x9f\')\n\t\tprint(\'[*Info] Create Model Successful, Compiles Model Successful. \')\n\t\treturn model, model_data\n\t\t\n\tdef ctc_lambda_func(self, args):\n\t\ty_pred, labels, input_length, label_length = args\n\t\t\n\t\ty_pred = y_pred[:, :, :]\n\t\t#y_pred = y_pred[:, 2:, :]\n\t\treturn K.ctc_batch_cost(labels, y_pred, input_length, label_length)\n\t\n\t\n\t\n\tdef TrainModel(self, datapath, epoch = 2, save_step = 1000, batch_size = 32, filename = abspath + \'model_speech/m\' + ModelName + \'/speech_model\'+ModelName):\n\t\t\'\'\'\n\t\t\xe8\xae\xad\xe7\xbb\x83\xe6\xa8\xa1\xe5\x9e\x8b\n\t\t\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\n\t\t\tdatapath: \xe6\x95\xb0\xe6\x8d\xae\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe8\xb7\xaf\xe5\xbe\x84\n\t\t\tepoch: \xe8\xbf\xad\xe4\xbb\xa3\xe8\xbd\xae\xe6\x95\xb0\n\t\t\tsave_step: \xe6\xaf\x8f\xe5\xa4\x9a\xe5\xb0\x91\xe6\xad\xa5\xe4\xbf\x9d\xe5\xad\x98\xe4\xb8\x80\xe6\xac\xa1\xe6\xa8\xa1\xe5\x9e\x8b\n\t\t\tfilename: \xe9\xbb\x98\xe8\xae\xa4\xe4\xbf\x9d\xe5\xad\x98\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xef\xbc\x8c\xe4\xb8\x8d\xe5\x90\xab\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8e\xe7\xbc\x80\xe5\x90\x8d\n\t\t\'\'\'\n\t\tdata=DataSpeech(datapath, \'train\')\n\t\t\n\t\tnum_data = data.GetDataNum() # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\n\t\t\n\t\tyielddatas = data.data_genetator(batch_size, self.AUDIO_LENGTH)\n\t\t\n\t\tfor epoch in range(epoch): # \xe8\xbf\xad\xe4\xbb\xa3\xe8\xbd\xae\xe6\x95\xb0\n\t\t\tprint(\'[running] train epoch %d .\' % epoch)\n\t\t\tn_step = 0 # \xe8\xbf\xad\xe4\xbb\xa3\xe6\x95\xb0\xe6\x8d\xae\xe6\x95\xb0\n\t\t\twhile True:\n\t\t\t\ttry:\n\t\t\t\t\tprint(\'[message] epoch %d . Have train datas %d+\'%(epoch, n_step*save_step))\n\t\t\t\t\t# data_genetator\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe7\x94\x9f\xe6\x88\x90\xe5\x99\xa8\xe5\x87\xbd\xe6\x95\xb0\n\t\t\t\t\t\n\t\t\t\t\t#self._model.fit_generator(yielddatas, save_step, nb_worker=2)\n\t\t\t\t\tself._model.fit_generator(yielddatas, save_step)\n\t\t\t\t\tn_step += 1\n\t\t\t\texcept StopIteration:\n\t\t\t\t\tprint(\'[error] generator error. please check data format.\')\n\t\t\t\t\tbreak\n\t\t\t\t\n\t\t\t\tself.SaveModel(comment=\'_e_\'+str(epoch)+\'_step_\'+str(n_step * save_step))\n\t\t\t\tself.TestModel(self.datapath, str_dataset=\'train\', data_count = 4)\n\t\t\t\tself.TestModel(self.datapath, str_dataset=\'dev\', data_count = 4)\n\t\t\t\t\n\tdef LoadModel(self,filename = abspath + \'model_speech/m\'+ModelName+\'/speech_model\'+ModelName+\'.model\'):\n\t\t\'\'\'\n\t\t\xe5\x8a\xa0\xe8\xbd\xbd\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x8f\x82\xe6\x95\xb0\n\t\t\'\'\'\n\t\tself._model.load_weights(filename)\n\t\tself.base_model.load_weights(filename + \'.base\')\n\n\tdef SaveModel(self,filename = abspath + \'model_speech/m\'+ModelName+\'/speech_model\'+ModelName,comment=\'\'):\n\t\t\'\'\'\n\t\t\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x8f\x82\xe6\x95\xb0\n\t\t\'\'\'\n\t\tself._model.save_weights(filename + comment + \'.model\')\n\t\tself.base_model.save_weights(filename + comment + \'.model.base\')\n\t\t# \xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x89\xe8\xa3\x85 hdf5 \xe6\xa8\xa1\xe5\x9d\x97\n\t\tself._model.save(filename + comment + \'.h5\')\n\t\tself.base_model.save(filename + comment + \'.base.h5\')\n\t\tf = open(\'step\'+ModelName+\'.txt\',\'w\')\n\t\tf.write(filename+comment)\n\t\tf.close()\n\n\tdef TestModel(self, datapath=\'\', str_dataset=\'dev\', data_count = 32, out_report = False, show_ratio = True, io_step_print = 10, io_step_file = 10):\n\t\t\'\'\'\n\t\t\xe6\xb5\x8b\xe8\xaf\x95\xe6\xa3\x80\xe9\xaa\x8c\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x95\x88\xe6\x9e\x9c\n\t\t\n\t\tio_step_print\n\t\t\t\xe4\xb8\xba\xe4\xba\x86\xe5\x87\x8f\xe5\xb0\x91\xe6\xb5\x8b\xe8\xaf\x95\xe6\x97\xb6\xe6\xa0\x87\xe5\x87\x86\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84io\xe5\xbc\x80\xe9\x94\x80\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe9\x80\x9a\xe8\xbf\x87\xe8\xb0\x83\xe6\x95\xb4\xe8\xbf\x99\xe4\xb8\xaa\xe5\x8f\x82\xe6\x95\xb0\xe6\x9d\xa5\xe5\xae\x9e\xe7\x8e\xb0\n\t\t\n\t\tio_step_file\n\t\t\t\xe4\xb8\xba\xe4\xba\x86\xe5\x87\x8f\xe5\xb0\x91\xe6\xb5\x8b\xe8\xaf\x95\xe6\x97\xb6\xe6\x96\x87\xe4\xbb\xb6\xe8\xaf\xbb\xe5\x86\x99\xe7\x9a\x84io\xe5\xbc\x80\xe9\x94\x80\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe9\x80\x9a\xe8\xbf\x87\xe8\xb0\x83\xe6\x95\xb4\xe8\xbf\x99\xe4\xb8\xaa\xe5\x8f\x82\xe6\x95\xb0\xe6\x9d\xa5\xe5\xae\x9e\xe7\x8e\xb0\n\t\t\n\t\t\'\'\'\n\t\tdata=DataSpeech(self.datapath, str_dataset)\n\t\t#data.LoadDataList(str_dataset) \n\t\tnum_data = data.GetDataNum() # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\n\t\tif(data_count <= 0 or data_count > num_data): # \xe5\xbd\x93data_count\xe4\xb8\xba\xe5\xb0\x8f\xe4\xba\x8e\xe7\xad\x89\xe4\xba\x8e0\xe6\x88\x96\xe8\x80\x85\xe5\xa4\xa7\xe4\xba\x8e\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xae\xe9\x87\x8f\xe7\x9a\x84\xe5\x80\xbc\xe6\x97\xb6\xef\xbc\x8c\xe5\x88\x99\xe4\xbd\xbf\xe7\x94\xa8\xe5\x85\xa8\xe9\x83\xa8\xe6\x95\xb0\xe6\x8d\xae\xe6\x9d\xa5\xe6\xb5\x8b\xe8\xaf\x95\n\t\t\tdata_count = num_data\n\t\t\n\t\ttry:\n\t\t\tran_num = random.randint(0,num_data - 1) # \xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\x80\xe4\xb8\xaa\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\n\t\t\t\n\t\t\twords_num = 0\n\t\t\tword_error_num = 0\n\t\t\t\n\t\t\tnowtime = time.strftime(\'%Y%m%d_%H%M%S\',time.localtime(time.time()))\n\t\t\tif(out_report == True):\n\t\t\t\ttxt_obj = open(\'Test_Report_\' + str_dataset + \'_\' + nowtime + \'.txt\', \'w\', encoding=\'UTF-8\') # \xe6\x89\x93\xe5\xbc\x80\xe6\x96\x87\xe4\xbb\xb6\xe5\xb9\xb6\xe8\xaf\xbb\xe5\x85\xa5\n\t\t\t\n\t\t\ttxt = \'\xe6\xb5\x8b\xe8\xaf\x95\xe6\x8a\xa5\xe5\x91\x8a\\n\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xbc\x96\xe5\x8f\xb7 \' + ModelName + \'\\n\\n\'\n\t\t\tfor i in range(data_count):\n\t\t\t\tdata_input, data_labels = data.GetData((ran_num + i) % num_data)  # \xe4\xbb\x8e\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xe5\xbc\x80\xe5\xa7\x8b\xe8\xbf\x9e\xe7\xbb\xad\xe5\x90\x91\xe5\x90\x8e\xe5\x8f\x96\xe4\xb8\x80\xe5\xae\x9a\xe6\x95\xb0\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\xae\n\t\t\t\t\n\t\t\t\t# \xe6\x95\xb0\xe6\x8d\xae\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x87\xba\xe9\x94\x99\xe5\xa4\x84\xe7\x90\x86 \xe5\xbc\x80\xe5\xa7\x8b\n\t\t\t\t# \xe5\xbd\x93\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84wav\xe6\x96\x87\xe4\xbb\xb6\xe9\x95\xbf\xe5\xba\xa6\xe8\xbf\x87\xe9\x95\xbf\xe6\x97\xb6\xe8\x87\xaa\xe5\x8a\xa8\xe8\xb7\xb3\xe8\xbf\x87\xe8\xaf\xa5\xe6\x96\x87\xe4\xbb\xb6\xef\xbc\x8c\xe8\xbd\xac\xe8\x80\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8b\xe4\xb8\x80\xe4\xb8\xaawav\xe6\x96\x87\xe4\xbb\xb6\xe6\x9d\xa5\xe8\xbf\x90\xe8\xa1\x8c\n\t\t\t\tnum_bias = 0\n\t\t\t\twhile(data_input.shape[0] > self.AUDIO_LENGTH):\n\t\t\t\t\tprint(\'*[Error]\',\'wave data lenghth of num\',(ran_num + i) % num_data, \'is too long.\',\'\\n A Exception raise when test Speech Model.\')\n\t\t\t\t\tnum_bias += 1\n\t\t\t\t\tdata_input, data_labels = data.GetData((ran_num + i + num_bias) % num_data)  # \xe4\xbb\x8e\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xe5\xbc\x80\xe5\xa7\x8b\xe8\xbf\x9e\xe7\xbb\xad\xe5\x90\x91\xe5\x90\x8e\xe5\x8f\x96\xe4\xb8\x80\xe5\xae\x9a\xe6\x95\xb0\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\xae\n\t\t\t\t# \xe6\x95\xb0\xe6\x8d\xae\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x87\xba\xe9\x94\x99\xe5\xa4\x84\xe7\x90\x86 \xe7\xbb\x93\xe6\x9d\x9f\n\t\t\t\t\n\t\t\t\tpre = self.Predict(data_input, data_input.shape[0] // 8)\n\t\t\t\t\n\t\t\t\twords_n = data_labels.shape[0] # \xe8\x8e\xb7\xe5\x8f\x96\xe6\xaf\x8f\xe4\xb8\xaa\xe5\x8f\xa5\xe5\xad\x90\xe7\x9a\x84\xe5\xad\x97\xe6\x95\xb0\n\t\t\t\twords_num += words_n # \xe6\x8a\x8a\xe5\x8f\xa5\xe5\xad\x90\xe7\x9a\x84\xe6\x80\xbb\xe5\xad\x97\xe6\x95\xb0\xe5\x8a\xa0\xe4\xb8\x8a\n\t\t\t\tedit_distance = GetEditDistance(data_labels, pre) # \xe8\x8e\xb7\xe5\x8f\x96\xe7\xbc\x96\xe8\xbe\x91\xe8\xb7\x9d\xe7\xa6\xbb\n\t\t\t\tif(edit_distance <= words_n): # \xe5\xbd\x93\xe7\xbc\x96\xe8\xbe\x91\xe8\xb7\x9d\xe7\xa6\xbb\xe5\xb0\x8f\xe4\xba\x8e\xe7\xad\x89\xe4\xba\x8e\xe5\x8f\xa5\xe5\xad\x90\xe5\xad\x97\xe6\x95\xb0\xe6\x97\xb6\n\t\t\t\t\tword_error_num += edit_distance # \xe4\xbd\xbf\xe7\x94\xa8\xe7\xbc\x96\xe8\xbe\x91\xe8\xb7\x9d\xe7\xa6\xbb\xe4\xbd\x9c\xe4\xb8\xba\xe9\x94\x99\xe8\xaf\xaf\xe5\xad\x97\xe6\x95\xb0\n\t\t\t\telse: # \xe5\x90\xa6\xe5\x88\x99\xe8\x82\xaf\xe5\xae\x9a\xe6\x98\xaf\xe5\xa2\x9e\xe5\x8a\xa0\xe4\xba\x86\xe4\xb8\x80\xe5\xa0\x86\xe4\xb9\xb1\xe4\xb8\x83\xe5\x85\xab\xe7\xb3\x9f\xe7\x9a\x84\xe5\xa5\x87\xe5\xa5\x87\xe6\x80\xaa\xe6\x80\xaa\xe7\x9a\x84\xe5\xad\x97\n\t\t\t\t\tword_error_num += words_n # \xe5\xb0\xb1\xe7\x9b\xb4\xe6\x8e\xa5\xe5\x8a\xa0\xe5\x8f\xa5\xe5\xad\x90\xe6\x9c\xac\xe6\x9d\xa5\xe7\x9a\x84\xe6\x80\xbb\xe5\xad\x97\xe6\x95\xb0\xe5\xb0\xb1\xe5\xa5\xbd\xe4\xba\x86\n\t\t\t\t\n\t\t\t\tif((i % io_step_print == 0 or i == data_count - 1) and show_ratio == True):\n\t\t\t\t\t#print(\'\xe6\xb5\x8b\xe8\xaf\x95\xe8\xbf\x9b\xe5\xba\xa6\xef\xbc\x9a\',i,\'/\',data_count)\n\t\t\t\t\tprint(\'Test Count: \',i,\'/\',data_count)\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif(out_report == True):\n\t\t\t\t\tif(i % io_step_file == 0 or i == data_count - 1):\n\t\t\t\t\t\ttxt_obj.write(txt)\n\t\t\t\t\t\ttxt = \'\'\n\t\t\t\t\t\n\t\t\t\t\ttxt += str(i) + \'\\n\'\n\t\t\t\t\ttxt += \'True:\\t\' + str(data_labels) + \'\\n\'\n\t\t\t\t\ttxt += \'Pred:\\t\' + str(pre) + \'\\n\'\n\t\t\t\t\ttxt += \'\\n\'\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t#print(\'*[\xe6\xb5\x8b\xe8\xaf\x95\xe7\xbb\x93\xe6\x9e\x9c] \xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab \' + str_dataset + \' \xe9\x9b\x86\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\x95\xe5\xad\x97\xe9\x94\x99\xe8\xaf\xaf\xe7\x8e\x87\xef\xbc\x9a\', word_error_num / words_num * 100, \'%\')\n\t\t\tprint(\'*[Test Result] Speech Recognition \' + str_dataset + \' set word error ratio: \', word_error_num / words_num * 100, \'%\')\n\t\t\tif(out_report == True):\n\t\t\t\ttxt += \'*[\xe6\xb5\x8b\xe8\xaf\x95\xe7\xbb\x93\xe6\x9e\x9c] \xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab \' + str_dataset + \' \xe9\x9b\x86\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\x95\xe5\xad\x97\xe9\x94\x99\xe8\xaf\xaf\xe7\x8e\x87\xef\xbc\x9a \' + str(word_error_num / words_num * 100) + \' %\'\n\t\t\t\ttxt_obj.write(txt)\n\t\t\t\ttxt = \'\'\n\t\t\t\ttxt_obj.close()\n\t\t\t\n\t\texcept StopIteration:\n\t\t\tprint(\'[Error] Model Test Error. please check data format.\')\n\t\n\tdef Predict(self, data_input, input_len):\n\t\t\'\'\'\n\t\t\xe9\xa2\x84\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\n\t\t\xe8\xbf\x94\xe5\x9b\x9e\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe5\x90\x8e\xe7\x9a\x84\xe6\x8b\xbc\xe9\x9f\xb3\xe7\xac\xa6\xe5\x8f\xb7\xe5\x88\x97\xe8\xa1\xa8\n\t\t\'\'\'\n\t\t\n\t\tbatch_size = 1 \n\t\tin_len = np.zeros((batch_size),dtype = np.int32)\n\t\t\n\t\tin_len[0] = input_len\n\t\t\n\t\tx_in = np.zeros((batch_size, 1600, self.AUDIO_FEATURE_LENGTH, 1), dtype=np.float)\n\t\t\n\t\tfor i in range(batch_size):\n\t\t\tx_in[i,0:len(data_input)] = data_input\n\t\t\n\t\t\n\t\tbase_pred = self.base_model.predict(x = x_in)\n\t\t\n\t\t#print(\'base_pred:\\n\', base_pred)\n\t\t\n\t\t#y_p = base_pred\n\t\t#for j in range(200):\n\t\t#\tmean = np.sum(y_p[0][j]) / y_p[0][j].shape[0]\n\t\t#\tprint(\'max y_p:\',np.max(y_p[0][j]),\'min y_p:\',np.min(y_p[0][j]),\'mean y_p:\',mean,\'mid y_p:\',y_p[0][j][100])\n\t\t#\tprint(\'argmin:\',np.argmin(y_p[0][j]),\'argmax:\',np.argmax(y_p[0][j]))\n\t\t#\tcount=0\n\t\t#\tfor i in range(y_p[0][j].shape[0]):\n\t\t#\t\tif(y_p[0][j][i] < mean):\n\t\t#\t\t\tcount += 1\n\t\t#\tprint(\'count:\',count)\n\t\t\n\t\tbase_pred =base_pred[:, :, :]\n\t\t#base_pred =base_pred[:, 2:, :]\n\t\t\n\t\tr = K.ctc_decode(base_pred, in_len, greedy = True, beam_width=100, top_paths=1)\n\t\t\n\t\t#print(\'r\', r)\n\t\tr1 = r[0][0].eval(session=tf.compat.v1.Session())\n\t\ttf.compat.v1.reset_default_graph()\n\t\treturn r1[0]\n\t\n\tdef RecognizeSpeech(self, wavsignal, fs):\n\t\t\'\'\'\n\t\t\xe6\x9c\x80\xe7\xbb\x88\xe5\x81\x9a\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\x94\xa8\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe8\xaf\x86\xe5\x88\xab\xe4\xb8\x80\xe4\xb8\xaawav\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe8\xaf\xad\xe9\x9f\xb3\n\t\t\'\'\'\n\t\t\n\t\t#data = self.data\n\t\t#data = DataSpeech(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\')\n\t\t#data.LoadDataList(\'dev\')\n\t\t# \xe8\x8e\xb7\xe5\x8f\x96\xe8\xbe\x93\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\n\t\t#data_input = GetMfccFeature(wavsignal, fs)\n\t\t#t0=time.time()\n\t\tdata_input = GetFrequencyFeature3(wavsignal, fs)\n\t\t#t1=time.time()\n\t\t#print(\'time cost:\',t1-t0)\n\t\t\n\t\tinput_length = len(data_input)\n\t\tinput_length = input_length // 8\n\t\t\n\t\tdata_input = np.array(data_input, dtype = np.float)\n\t\t#print(data_input,data_input.shape)\n\t\tdata_input = data_input.reshape(data_input.shape[0],data_input.shape[1],1)\n\t\t#t2=time.time()\n\t\tr1 = self.Predict(data_input, input_length)\n\t\t#t3=time.time()\n\t\t#print(\'time cost:\',t3-t2)\n\t\tlist_symbol_dic = GetSymbolList(self.datapath) # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x8b\xbc\xe9\x9f\xb3\xe5\x88\x97\xe8\xa1\xa8\n\t\t\n\t\t\n\t\tr_str=[]\n\t\tfor i in r1:\n\t\t\tr_str.append(list_symbol_dic[i])\n\t\t\n\t\treturn r_str\n\t\tpass\n\t\t\n\tdef RecognizeSpeech_FromFile(self, filename):\n\t\t\'\'\'\n\t\t\xe6\x9c\x80\xe7\xbb\x88\xe5\x81\x9a\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\x94\xa8\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe8\xaf\x86\xe5\x88\xab\xe6\x8c\x87\xe5\xae\x9a\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\x9a\x84\xe8\xaf\xad\xe9\x9f\xb3\n\t\t\'\'\'\n\t\t\n\t\twavsignal,fs = read_wav_data(filename)\n\t\t\n\t\tr = self.RecognizeSpeech(wavsignal, fs)\n\t\t\n\t\treturn r\n\t\t\n\t\tpass\n\t\t\n\t\n\t\t\n\t@property\n\tdef model(self):\n\t\t\'\'\'\n\t\t\xe8\xbf\x94\xe5\x9b\x9ekeras model\n\t\t\'\'\'\n\t\treturn self._model\n\n\nif(__name__==\'__main__\'):\n\t\n\t#import tensorflow as tf\n\t#from keras.backend.tensorflow_backend import set_session\n\t#os.environ[""CUDA_VISIBLE_DEVICES""] = ""0""\n\t#\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x85\x8d\xe7\xbd\xae\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa895%\xe7\x9a\x84GPU\n\t#config = tf.ConfigProto()\n\t#config.gpu_options.per_process_gpu_memory_fraction = 0.95\n\t#config.gpu_options.allow_growth=True   #\xe4\xb8\x8d\xe5\x85\xa8\xe9\x83\xa8\xe5\x8d\xa0\xe6\xbb\xa1\xe6\x98\xbe\xe5\xad\x98, \xe6\x8c\x89\xe9\x9c\x80\xe5\x88\x86\xe9\x85\x8d\n\t#set_session(tf.Session(config=config))\n\t\n\t\n\tdatapath =  abspath + \'\'\n\tmodelpath =  abspath + \'model_speech\'\n\t\n\t\n\tif(not os.path.exists(modelpath)): # \xe5\x88\xa4\xe6\x96\xad\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe7\x9b\xae\xe5\xbd\x95\xe6\x98\xaf\xe5\x90\xa6\xe5\xad\x98\xe5\x9c\xa8\n\t\tos.makedirs(modelpath) # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x8c\xe5\xb0\xb1\xe6\x96\xb0\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\xaa\xef\xbc\x8c\xe9\x81\xbf\xe5\x85\x8d\xe4\xb9\x8b\xe5\x90\x8e\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe7\x82\xb8\xe6\x8e\x89\n\t\n\tsystem_type = plat.system() # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa4\xe6\x96\xad\n\tif(system_type == \'Windows\'):\n\t\tdatapath = \'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\'\n\t\tmodelpath = modelpath + \'\\\\\'\n\telif(system_type == \'Linux\'):\n\t\tdatapath =  abspath + \'dataset\'\n\t\tmodelpath = modelpath + \'/\'\n\telse:\n\t\tprint(\'*[Message] Unknown System\\n\')\n\t\tdatapath = \'dataset\'\n\t\tmodelpath = modelpath + \'/\'\n\t\n\tms = ModelSpeech(datapath)\n\t\n\t\n\t#ms.LoadModel(modelpath + \'m251/speech_model251_e_0_step_100000.model\')\n\tms.TrainModel(datapath, epoch = 50, batch_size = 16, save_step = 500)\n\t\n\t#t1=time.time()\n\t#ms.TestModel(datapath, str_dataset=\'train\', data_count = 128, out_report = True)\n\t#ms.TestModel(datapath, str_dataset=\'dev\', data_count = 128, out_report = True)\n\t#ms.TestModel(datapath, str_dataset=\'test\', data_count = 128, out_report = True)\n\t#t2=time.time()\n\t#print(\'Test Model Time Cost:\',t2-t1,\'s\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\ST-CMDS-20170001_1-OS\\\\20170001P00241I0053.wav\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\ST-CMDS-20170001_1-OS\\\\20170001P00020I0087.wav\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\wav\\\\train\\\\A11\\\\A11_167.WAV\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\wav\\\\test\\\\D4\\\\D4_750.wav\')\n\t#print(\'*[\xe6\x8f\x90\xe7\xa4\xba] \xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x9a\\n\',r)\n'"
SpeechModel251_limitless.py,4,"b'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n""""""\n@author: nl8590687\n\xe4\xb8\x80\xe4\xb8\xaa\xe5\xaf\xb9\xe4\xba\x8e\xe5\x8d\x95\xe4\xb8\x80\xe9\x9f\xb3\xe9\xa2\x91\xe6\x97\xb6\xe9\x97\xb4\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\x8d\xe4\xbd\x9c\xe9\x99\x90\xe5\x88\xb6\xe7\x9a\x84\xe7\x89\x88\xe6\x9c\xac\xef\xbc\x8c\xe6\xad\xa3\xe5\x9c\xa8\xe6\xb5\x8b\xe8\xaf\x95\n""""""\nimport platform as plat\nimport os\nimport time\n\nfrom general_function.file_wav import *\nfrom general_function.file_dict import *\nfrom general_function.gen_func import *\n\nimport keras as kr\nimport numpy as np\nimport random\n\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dense, Dropout, Input, Reshape, BatchNormalization # , Flatten\nfrom keras.layers import Lambda, TimeDistributed, Activation,Conv2D, MaxPooling2D #, Merge\nfrom keras import backend as K\nfrom keras.optimizers import SGD, Adadelta, Adam\n\nfrom readdata24 import DataSpeech\n\nabspath = \'\'\nModelName=\'251\'\n#NUM_GPU = 2\n\nclass ModelSpeech(): # \xe8\xaf\xad\xe9\x9f\xb3\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xb1\xbb\n\tdef __init__(self, datapath):\n\t\t\'\'\'\n\t\t\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n\t\t\xe9\xbb\x98\xe8\xae\xa4\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe6\x8b\xbc\xe9\x9f\xb3\xe7\x9a\x84\xe8\xa1\xa8\xe7\xa4\xba\xe5\xa4\xa7\xe5\xb0\x8f\xe6\x98\xaf1424\xef\xbc\x8c\xe5\x8d\xb31423\xe4\xb8\xaa\xe6\x8b\xbc\xe9\x9f\xb3+1\xe4\xb8\xaa\xe7\xa9\xba\xe7\x99\xbd\xe5\x9d\x97\n\t\t\'\'\'\n\t\tMS_OUTPUT_SIZE = 1424\n\t\tself.MS_OUTPUT_SIZE = MS_OUTPUT_SIZE # \xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe6\x9c\x80\xe7\xbb\x88\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe5\x90\x91\xe9\x87\x8f\xe7\xbb\xb4\xe5\xba\xa6\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\n\t\t#self.BATCH_SIZE = BATCH_SIZE # \xe4\xb8\x80\xe6\xac\xa1\xe8\xae\xad\xe7\xbb\x83\xe7\x9a\x84batch\n\t\tself.label_max_string_length = 64\n\t\tself.AUDIO_LENGTH = 1600\n\t\tself.AUDIO_FEATURE_LENGTH = 200\n\t\tself._model, self.base_model = self.CreateModel() \n\t\t\n\t\tself.datapath = datapath\n\t\tself.slash = \'\'\n\t\tsystem_type = plat.system() # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa4\xe6\x96\xad\n\t\tif(system_type == \'Windows\'):\n\t\t\tself.slash=\'\\\\\' # \xe5\x8f\x8d\xe6\x96\x9c\xe6\x9d\xa0\n\t\telif(system_type == \'Linux\'):\n\t\t\tself.slash=\'/\' # \xe6\xad\xa3\xe6\x96\x9c\xe6\x9d\xa0\n\t\telse:\n\t\t\tprint(\'*[Message] Unknown System\\n\')\n\t\t\tself.slash=\'/\' # \xe6\xad\xa3\xe6\x96\x9c\xe6\x9d\xa0\n\t\tif(self.slash != self.datapath[-1]): # \xe5\x9c\xa8\xe7\x9b\xae\xe5\xbd\x95\xe8\xb7\xaf\xe5\xbe\x84\xe6\x9c\xab\xe5\xb0\xbe\xe5\xa2\x9e\xe5\x8a\xa0\xe6\x96\x9c\xe6\x9d\xa0\n\t\t\tself.datapath = self.datapath + self.slash\n\t\n\t\t\n\tdef CreateModel(self):\n\t\t\'\'\'\n\t\t\xe5\xae\x9a\xe4\xb9\x89CNN/LSTM/CTC\xe6\xa8\xa1\xe5\x9e\x8b\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\x87\xbd\xe6\x95\xb0\xe5\xbc\x8f\xe6\xa8\xa1\xe5\x9e\x8b\n\t\t\xe8\xbe\x93\xe5\x85\xa5\xe5\xb1\x82\xef\xbc\x9a200\xe7\xbb\xb4\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\x80\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe4\xb8\x80\xe6\x9d\xa1\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\xa7\xe9\x95\xbf\xe5\xba\xa6\xe8\xae\xbe\xe4\xb8\xba1600\xef\xbc\x88\xe5\xa4\xa7\xe7\xba\xa616s\xef\xbc\x89\n\t\t\xe9\x9a\x90\xe8\x97\x8f\xe5\xb1\x82\xef\xbc\x9a\xe5\x8d\xb7\xe7\xa7\xaf\xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\xef\xbc\x8c\xe5\x8d\xb7\xe7\xa7\xaf\xe6\xa0\xb8\xe5\xa4\xa7\xe5\xb0\x8f\xe4\xb8\xba3x3\xef\xbc\x8c\xe6\xb1\xa0\xe5\x8c\x96\xe7\xaa\x97\xe5\x8f\xa3\xe5\xa4\xa7\xe5\xb0\x8f\xe4\xb8\xba2\n\t\t\xe9\x9a\x90\xe8\x97\x8f\xe5\xb1\x82\xef\xbc\x9a\xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\t\xe8\xbe\x93\xe5\x87\xba\xe5\xb1\x82\xef\xbc\x9a\xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\xef\xbc\x8c\xe7\xa5\x9e\xe7\xbb\x8f\xe5\x85\x83\xe6\x95\xb0\xe9\x87\x8f\xe4\xb8\xbaself.MS_OUTPUT_SIZE\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8softmax\xe4\xbd\x9c\xe4\xb8\xba\xe6\xbf\x80\xe6\xb4\xbb\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\n\t\tCTC\xe5\xb1\x82\xef\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8CTC\xe7\x9a\x84loss\xe4\xbd\x9c\xe4\xb8\xba\xe6\x8d\x9f\xe5\xa4\xb1\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\xae\x9e\xe7\x8e\xb0\xe8\xbf\x9e\xe6\x8e\xa5\xe6\x80\xa7\xe6\x97\xb6\xe5\xba\x8f\xe5\xa4\x9a\xe8\xbe\x93\xe5\x87\xba\n\t\t\n\t\t\'\'\'\n\t\t\n\t\tinput_data = Input(name=\'the_input\', shape=(None, self.AUDIO_FEATURE_LENGTH, 1))\n\t\t\n\t\tlayer_h1 = Conv2D(32, (3,3), use_bias=False, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(input_data) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h1 = Dropout(0.05)(layer_h1)\n\t\tlayer_h2 = Conv2D(32, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h1) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h3 = MaxPooling2D(pool_size=2, strides=None, padding=""valid"")(layer_h2) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t#layer_h3 = Dropout(0.2)(layer_h2) # \xe9\x9a\x8f\xe6\x9c\xba\xe4\xb8\xad\xe6\x96\xad\xe9\x83\xa8\xe5\x88\x86\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe8\xbf\x9e\xe6\x8e\xa5\xef\xbc\x8c\xe9\x98\xb2\xe6\xad\xa2\xe8\xbf\x87\xe6\x8b\x9f\xe5\x90\x88\n\t\tlayer_h3 = Dropout(0.05)(layer_h3)\n\t\tlayer_h4 = Conv2D(64, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h3) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h4 = Dropout(0.1)(layer_h4)\n\t\tlayer_h5 = Conv2D(64, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h4) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h6 = MaxPooling2D(pool_size=2, strides=None, padding=""valid"")(layer_h5) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\tlayer_h6 = Dropout(0.1)(layer_h6)\n\t\tlayer_h7 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h6) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h7 = Dropout(0.15)(layer_h7)\n\t\tlayer_h8 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h7) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h9 = MaxPooling2D(pool_size=2, strides=None, padding=""valid"")(layer_h8) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\tlayer_h9 = Dropout(0.15)(layer_h9)\n\t\tlayer_h10 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h9) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h10 = Dropout(0.2)(layer_h10)\n\t\tlayer_h11 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h10) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h12 = MaxPooling2D(pool_size=1, strides=None, padding=""valid"")(layer_h11) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\tlayer_h12 = Dropout(0.2)(layer_h12)\n\t\tlayer_h13 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h12) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h13 = Dropout(0.2)(layer_h13)\n\t\tlayer_h14 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h13) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h15 = MaxPooling2D(pool_size=1, strides=None, padding=""valid"")(layer_h14) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\t#test=Model(inputs = input_data, outputs = layer_h12)\n\t\t#test.summary()\n\t\t\n\t\tlayer_h16 = Reshape((-1, 3200))(layer_h15) #Reshape\xe5\xb1\x82\n\t\t#layer_h5 = LSTM(256, activation=\'relu\', use_bias=True, return_sequences=True)(layer_h4) # LSTM\xe5\xb1\x82\n\t\t#layer_h6 = Dropout(0.2)(layer_h5) # \xe9\x9a\x8f\xe6\x9c\xba\xe4\xb8\xad\xe6\x96\xad\xe9\x83\xa8\xe5\x88\x86\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe8\xbf\x9e\xe6\x8e\xa5\xef\xbc\x8c\xe9\x98\xb2\xe6\xad\xa2\xe8\xbf\x87\xe6\x8b\x9f\xe5\x90\x88\n\t\tlayer_h16 = Dropout(0.3)(layer_h16)\n\t\tlayer_h17 = Dense(128, activation=""relu"", use_bias=True, kernel_initializer=\'he_normal\')(layer_h16) # \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\tlayer_h17 = Dropout(0.3)(layer_h17)\n\t\tlayer_h18 = Dense(self.MS_OUTPUT_SIZE, use_bias=True, kernel_initializer=\'he_normal\')(layer_h17) # \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\t\n\t\ty_pred = Activation(\'softmax\', name=\'Activation0\')(layer_h18)\n\t\tmodel_data = Model(inputs = input_data, outputs = y_pred)\n\t\t#model_data.summary()\n\t\t\n\t\tlabels = Input(name=\'the_labels\', shape=[self.label_max_string_length], dtype=\'float32\')\n\t\tinput_length = Input(name=\'input_length\', shape=[1], dtype=\'int64\')\n\t\tlabel_length = Input(name=\'label_length\', shape=[1], dtype=\'int64\')\n\t\t# Keras doesn\'t currently support loss funcs with extra parameters\n\t\t# so CTC loss is implemented in a lambda layer\n\t\t\n\t\t#layer_out = Lambda(ctc_lambda_func,output_shape=(self.MS_OUTPUT_SIZE, ), name=\'ctc\')([y_pred, labels, input_length, label_length])#(layer_h6) # CTC\n\t\tloss_out = Lambda(self.ctc_lambda_func, output_shape=(1,), name=\'ctc\')([y_pred, labels, input_length, label_length])\n\t\t\n\t\t\n\t\t\n\t\tmodel = Model(inputs=[input_data, labels, input_length, label_length], outputs=loss_out)\n\t\t\n\t\tmodel.summary()\n\t\t\n\t\t# clipnorm seems to speeds up convergence\n\t\t#sgd = SGD(lr=0.0001, decay=1e-6, momentum=0.9, nesterov=True, clipnorm=5)\n\t\t#opt = Adadelta(lr = 0.01, rho = 0.95, epsilon = 1e-06)\n\t\topt = Adam(lr = 0.001, beta_1 = 0.9, beta_2 = 0.999, decay = 0.0, epsilon = 10e-8)\n\t\t#model.compile(loss={\'ctc\': lambda y_true, y_pred: y_pred}, optimizer=sgd)\n\t\tmodel.compile(loss={\'ctc\': lambda y_true, y_pred: y_pred}, optimizer = opt)\n\t\t\n\t\t\n\t\t# captures output of softmax so we can decode the output during visualization\n\t\ttest_func = K.function([input_data], [y_pred])\n\t\t\n\t\t#print(\'[*\xe6\x8f\x90\xe7\xa4\xba] \xe5\x88\x9b\xe5\xbb\xba\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x88\x90\xe5\x8a\x9f\xef\xbc\x8c\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xbc\x96\xe8\xaf\x91\xe6\x88\x90\xe5\x8a\x9f\')\n\t\tprint(\'[*Info] Create Model Successful, Compiles Model Successful. \')\n\t\treturn model, model_data\n\t\t\n\tdef ctc_lambda_func(self, args):\n\t\ty_pred, labels, input_length, label_length = args\n\t\t\n\t\ty_pred = y_pred[:, :, :]\n\t\t#y_pred = y_pred[:, 2:, :]\n\t\treturn K.ctc_batch_cost(labels, y_pred, input_length, label_length)\n\t\n\t\n\t\n\tdef TrainModel(self, datapath, epoch = 2, save_step = 1000, batch_size = 32, filename = abspath + \'model_speech/m\' + ModelName + \'/speech_model\'+ModelName):\n\t\t\'\'\'\n\t\t\xe8\xae\xad\xe7\xbb\x83\xe6\xa8\xa1\xe5\x9e\x8b\n\t\t\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\n\t\t\tdatapath: \xe6\x95\xb0\xe6\x8d\xae\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe8\xb7\xaf\xe5\xbe\x84\n\t\t\tepoch: \xe8\xbf\xad\xe4\xbb\xa3\xe8\xbd\xae\xe6\x95\xb0\n\t\t\tsave_step: \xe6\xaf\x8f\xe5\xa4\x9a\xe5\xb0\x91\xe6\xad\xa5\xe4\xbf\x9d\xe5\xad\x98\xe4\xb8\x80\xe6\xac\xa1\xe6\xa8\xa1\xe5\x9e\x8b\n\t\t\tfilename: \xe9\xbb\x98\xe8\xae\xa4\xe4\xbf\x9d\xe5\xad\x98\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xef\xbc\x8c\xe4\xb8\x8d\xe5\x90\xab\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8e\xe7\xbc\x80\xe5\x90\x8d\n\t\t\'\'\'\n\t\tdata=DataSpeech(datapath, \'train\')\n\t\t\n\t\tnum_data = data.GetDataNum() # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\n\t\t\n\t\tyielddatas = data.data_genetator(batch_size, self.AUDIO_LENGTH)\n\t\t\n\t\tfor epoch in range(epoch): # \xe8\xbf\xad\xe4\xbb\xa3\xe8\xbd\xae\xe6\x95\xb0\n\t\t\tprint(\'[running] train epoch %d .\' % epoch)\n\t\t\tn_step = 0 # \xe8\xbf\xad\xe4\xbb\xa3\xe6\x95\xb0\xe6\x8d\xae\xe6\x95\xb0\n\t\t\twhile True:\n\t\t\t\ttry:\n\t\t\t\t\tprint(\'[message] epoch %d . Have train datas %d+\'%(epoch, n_step*save_step))\n\t\t\t\t\t# data_genetator\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe7\x94\x9f\xe6\x88\x90\xe5\x99\xa8\xe5\x87\xbd\xe6\x95\xb0\n\t\t\t\t\t\n\t\t\t\t\t#self._model.fit_generator(yielddatas, save_step, nb_worker=2)\n\t\t\t\t\tself._model.fit_generator(yielddatas, save_step)\n\t\t\t\t\tn_step += 1\n\t\t\t\texcept StopIteration:\n\t\t\t\t\tprint(\'[error] generator error. please check data format.\')\n\t\t\t\t\tbreak\n\t\t\t\t\n\t\t\t\tself.SaveModel(comment=\'_e_\'+str(epoch)+\'_step_\'+str(n_step * save_step))\n\t\t\t\tself.TestModel(self.datapath, str_dataset=\'train\', data_count = 4)\n\t\t\t\tself.TestModel(self.datapath, str_dataset=\'dev\', data_count = 4)\n\t\t\t\t\n\tdef LoadModel(self,filename = abspath + \'model_speech/m\'+ModelName+\'/speech_model\'+ModelName+\'.model\'):\n\t\t\'\'\'\n\t\t\xe5\x8a\xa0\xe8\xbd\xbd\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x8f\x82\xe6\x95\xb0\n\t\t\'\'\'\n\t\tself._model.load_weights(filename)\n\t\tself.base_model.load_weights(filename + \'.base\')\n\n\tdef SaveModel(self,filename = abspath + \'model_speech/m\'+ModelName+\'/speech_model\'+ModelName,comment=\'\'):\n\t\t\'\'\'\n\t\t\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x8f\x82\xe6\x95\xb0\n\t\t\'\'\'\n\t\tself._model.save_weights(filename + comment + \'.model\')\n\t\tself.base_model.save_weights(filename + comment + \'.model.base\')\n\t\t# \xe9\x9c\x80\xe8\xa6\x81\xe5\xae\x89\xe8\xa3\x85 hdf5 \xe6\xa8\xa1\xe5\x9d\x97\n\t\tself._model.save(filename + comment + \'.h5\')\n\t\tself.base_model.save(filename + comment + \'.base.h5\')\n\t\tf = open(\'step\'+ModelName+\'.txt\',\'w\')\n\t\tf.write(filename+comment)\n\t\tf.close()\n\n\tdef TestModel(self, datapath=\'\', str_dataset=\'dev\', data_count = 32, out_report = False, show_ratio = True, io_step_print = 10, io_step_file = 10):\n\t\t\'\'\'\n\t\t\xe6\xb5\x8b\xe8\xaf\x95\xe6\xa3\x80\xe9\xaa\x8c\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x95\x88\xe6\x9e\x9c\n\t\t\n\t\tio_step_print\n\t\t\t\xe4\xb8\xba\xe4\xba\x86\xe5\x87\x8f\xe5\xb0\x91\xe6\xb5\x8b\xe8\xaf\x95\xe6\x97\xb6\xe6\xa0\x87\xe5\x87\x86\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84io\xe5\xbc\x80\xe9\x94\x80\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe9\x80\x9a\xe8\xbf\x87\xe8\xb0\x83\xe6\x95\xb4\xe8\xbf\x99\xe4\xb8\xaa\xe5\x8f\x82\xe6\x95\xb0\xe6\x9d\xa5\xe5\xae\x9e\xe7\x8e\xb0\n\t\t\n\t\tio_step_file\n\t\t\t\xe4\xb8\xba\xe4\xba\x86\xe5\x87\x8f\xe5\xb0\x91\xe6\xb5\x8b\xe8\xaf\x95\xe6\x97\xb6\xe6\x96\x87\xe4\xbb\xb6\xe8\xaf\xbb\xe5\x86\x99\xe7\x9a\x84io\xe5\xbc\x80\xe9\x94\x80\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe9\x80\x9a\xe8\xbf\x87\xe8\xb0\x83\xe6\x95\xb4\xe8\xbf\x99\xe4\xb8\xaa\xe5\x8f\x82\xe6\x95\xb0\xe6\x9d\xa5\xe5\xae\x9e\xe7\x8e\xb0\n\t\t\n\t\t\'\'\'\n\t\tdata=DataSpeech(self.datapath, str_dataset)\n\t\t#data.LoadDataList(str_dataset) \n\t\tnum_data = data.GetDataNum() # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\n\t\tif(data_count <= 0 or data_count > num_data): # \xe5\xbd\x93data_count\xe4\xb8\xba\xe5\xb0\x8f\xe4\xba\x8e\xe7\xad\x89\xe4\xba\x8e0\xe6\x88\x96\xe8\x80\x85\xe5\xa4\xa7\xe4\xba\x8e\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xae\xe9\x87\x8f\xe7\x9a\x84\xe5\x80\xbc\xe6\x97\xb6\xef\xbc\x8c\xe5\x88\x99\xe4\xbd\xbf\xe7\x94\xa8\xe5\x85\xa8\xe9\x83\xa8\xe6\x95\xb0\xe6\x8d\xae\xe6\x9d\xa5\xe6\xb5\x8b\xe8\xaf\x95\n\t\t\tdata_count = num_data\n\t\t\n\t\ttry:\n\t\t\tran_num = random.randint(0,num_data - 1) # \xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\x80\xe4\xb8\xaa\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\n\t\t\t\n\t\t\twords_num = 0\n\t\t\tword_error_num = 0\n\t\t\t\n\t\t\tnowtime = time.strftime(\'%Y%m%d_%H%M%S\',time.localtime(time.time()))\n\t\t\tif(out_report == True):\n\t\t\t\ttxt_obj = open(\'Test_Report_\' + str_dataset + \'_\' + nowtime + \'.txt\', \'w\', encoding=\'UTF-8\') # \xe6\x89\x93\xe5\xbc\x80\xe6\x96\x87\xe4\xbb\xb6\xe5\xb9\xb6\xe8\xaf\xbb\xe5\x85\xa5\n\t\t\t\n\t\t\ttxt = \'\xe6\xb5\x8b\xe8\xaf\x95\xe6\x8a\xa5\xe5\x91\x8a\\n\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xbc\x96\xe5\x8f\xb7 \' + ModelName + \'\\n\\n\'\n\t\t\tfor i in range(data_count):\n\t\t\t\tdata_input, data_labels = data.GetData((ran_num + i) % num_data)  # \xe4\xbb\x8e\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xe5\xbc\x80\xe5\xa7\x8b\xe8\xbf\x9e\xe7\xbb\xad\xe5\x90\x91\xe5\x90\x8e\xe5\x8f\x96\xe4\xb8\x80\xe5\xae\x9a\xe6\x95\xb0\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\xae\n\t\t\t\t\n\t\t\t\t# \xe6\x95\xb0\xe6\x8d\xae\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x87\xba\xe9\x94\x99\xe5\xa4\x84\xe7\x90\x86 \xe5\xbc\x80\xe5\xa7\x8b\n\t\t\t\t# \xe5\xbd\x93\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84wav\xe6\x96\x87\xe4\xbb\xb6\xe9\x95\xbf\xe5\xba\xa6\xe8\xbf\x87\xe9\x95\xbf\xe6\x97\xb6\xe8\x87\xaa\xe5\x8a\xa8\xe8\xb7\xb3\xe8\xbf\x87\xe8\xaf\xa5\xe6\x96\x87\xe4\xbb\xb6\xef\xbc\x8c\xe8\xbd\xac\xe8\x80\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8b\xe4\xb8\x80\xe4\xb8\xaawav\xe6\x96\x87\xe4\xbb\xb6\xe6\x9d\xa5\xe8\xbf\x90\xe8\xa1\x8c\n\t\t\t\tnum_bias = 0\n\t\t\t\twhile(data_input.shape[0] > self.AUDIO_LENGTH):\n\t\t\t\t\tprint(\'*[Error]\',\'wave data lenghth of num\',(ran_num + i) % num_data, \'is too long.\',\'\\n A Exception raise when test Speech Model.\')\n\t\t\t\t\tnum_bias += 1\n\t\t\t\t\tdata_input, data_labels = data.GetData((ran_num + i + num_bias) % num_data)  # \xe4\xbb\x8e\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xe5\xbc\x80\xe5\xa7\x8b\xe8\xbf\x9e\xe7\xbb\xad\xe5\x90\x91\xe5\x90\x8e\xe5\x8f\x96\xe4\xb8\x80\xe5\xae\x9a\xe6\x95\xb0\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\xae\n\t\t\t\t# \xe6\x95\xb0\xe6\x8d\xae\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x87\xba\xe9\x94\x99\xe5\xa4\x84\xe7\x90\x86 \xe7\xbb\x93\xe6\x9d\x9f\n\t\t\t\t\n\t\t\t\tpre = self.Predict(data_input, data_input.shape[0] // 8)\n\t\t\t\t\n\t\t\t\twords_n = data_labels.shape[0] # \xe8\x8e\xb7\xe5\x8f\x96\xe6\xaf\x8f\xe4\xb8\xaa\xe5\x8f\xa5\xe5\xad\x90\xe7\x9a\x84\xe5\xad\x97\xe6\x95\xb0\n\t\t\t\twords_num += words_n # \xe6\x8a\x8a\xe5\x8f\xa5\xe5\xad\x90\xe7\x9a\x84\xe6\x80\xbb\xe5\xad\x97\xe6\x95\xb0\xe5\x8a\xa0\xe4\xb8\x8a\n\t\t\t\tedit_distance = GetEditDistance(data_labels, pre) # \xe8\x8e\xb7\xe5\x8f\x96\xe7\xbc\x96\xe8\xbe\x91\xe8\xb7\x9d\xe7\xa6\xbb\n\t\t\t\tif(edit_distance <= words_n): # \xe5\xbd\x93\xe7\xbc\x96\xe8\xbe\x91\xe8\xb7\x9d\xe7\xa6\xbb\xe5\xb0\x8f\xe4\xba\x8e\xe7\xad\x89\xe4\xba\x8e\xe5\x8f\xa5\xe5\xad\x90\xe5\xad\x97\xe6\x95\xb0\xe6\x97\xb6\n\t\t\t\t\tword_error_num += edit_distance # \xe4\xbd\xbf\xe7\x94\xa8\xe7\xbc\x96\xe8\xbe\x91\xe8\xb7\x9d\xe7\xa6\xbb\xe4\xbd\x9c\xe4\xb8\xba\xe9\x94\x99\xe8\xaf\xaf\xe5\xad\x97\xe6\x95\xb0\n\t\t\t\telse: # \xe5\x90\xa6\xe5\x88\x99\xe8\x82\xaf\xe5\xae\x9a\xe6\x98\xaf\xe5\xa2\x9e\xe5\x8a\xa0\xe4\xba\x86\xe4\xb8\x80\xe5\xa0\x86\xe4\xb9\xb1\xe4\xb8\x83\xe5\x85\xab\xe7\xb3\x9f\xe7\x9a\x84\xe5\xa5\x87\xe5\xa5\x87\xe6\x80\xaa\xe6\x80\xaa\xe7\x9a\x84\xe5\xad\x97\n\t\t\t\t\tword_error_num += words_n # \xe5\xb0\xb1\xe7\x9b\xb4\xe6\x8e\xa5\xe5\x8a\xa0\xe5\x8f\xa5\xe5\xad\x90\xe6\x9c\xac\xe6\x9d\xa5\xe7\x9a\x84\xe6\x80\xbb\xe5\xad\x97\xe6\x95\xb0\xe5\xb0\xb1\xe5\xa5\xbd\xe4\xba\x86\n\t\t\t\t\n\t\t\t\tif((i % io_step_print == 0 or i == data_count - 1) and show_ratio == True):\n\t\t\t\t\t#print(\'\xe6\xb5\x8b\xe8\xaf\x95\xe8\xbf\x9b\xe5\xba\xa6\xef\xbc\x9a\',i,\'/\',data_count)\n\t\t\t\t\tprint(\'Test Count: \',i,\'/\',data_count)\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif(out_report == True):\n\t\t\t\t\tif(i % io_step_file == 0 or i == data_count - 1):\n\t\t\t\t\t\ttxt_obj.write(txt)\n\t\t\t\t\t\ttxt = \'\'\n\t\t\t\t\t\n\t\t\t\t\ttxt += str(i) + \'\\n\'\n\t\t\t\t\ttxt += \'True:\\t\' + str(data_labels) + \'\\n\'\n\t\t\t\t\ttxt += \'Pred:\\t\' + str(pre) + \'\\n\'\n\t\t\t\t\ttxt += \'\\n\'\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t#print(\'*[\xe6\xb5\x8b\xe8\xaf\x95\xe7\xbb\x93\xe6\x9e\x9c] \xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab \' + str_dataset + \' \xe9\x9b\x86\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\x95\xe5\xad\x97\xe9\x94\x99\xe8\xaf\xaf\xe7\x8e\x87\xef\xbc\x9a\', word_error_num / words_num * 100, \'%\')\n\t\t\tprint(\'*[Test Result] Speech Recognition \' + str_dataset + \' set word error ratio: \', word_error_num / words_num * 100, \'%\')\n\t\t\tif(out_report == True):\n\t\t\t\ttxt += \'*[\xe6\xb5\x8b\xe8\xaf\x95\xe7\xbb\x93\xe6\x9e\x9c] \xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab \' + str_dataset + \' \xe9\x9b\x86\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\x95\xe5\xad\x97\xe9\x94\x99\xe8\xaf\xaf\xe7\x8e\x87\xef\xbc\x9a \' + str(word_error_num / words_num * 100) + \' %\'\n\t\t\t\ttxt_obj.write(txt)\n\t\t\t\ttxt = \'\'\n\t\t\t\ttxt_obj.close()\n\t\t\t\n\t\texcept StopIteration:\n\t\t\tprint(\'[Error] Model Test Error. please check data format.\')\n\t\n\tdef Predict(self, data_input, input_len):\n\t\t\'\'\'\n\t\t\xe9\xa2\x84\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\n\t\t\xe8\xbf\x94\xe5\x9b\x9e\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe5\x90\x8e\xe7\x9a\x84\xe6\x8b\xbc\xe9\x9f\xb3\xe7\xac\xa6\xe5\x8f\xb7\xe5\x88\x97\xe8\xa1\xa8\n\t\t\'\'\'\n\t\t\n\t\tbatch_size = 1 \n\t\tin_len = np.zeros((batch_size),dtype = np.int32)\n\t\t\n\t\tin_len[0] = input_len\n\t\t\n\t\tx_in = np.zeros((batch_size, 1600, self.AUDIO_FEATURE_LENGTH, 1), dtype=np.float)\n\t\t\n\t\tfor i in range(batch_size):\n\t\t\tx_in[i,0:len(data_input)] = data_input\n\t\t\n\t\t\n\t\tbase_pred = self.base_model.predict(x = x_in)\n\t\t\n\t\t#print(\'base_pred:\\n\', base_pred)\n\t\t\n\t\t#y_p = base_pred\n\t\t#for j in range(200):\n\t\t#\tmean = np.sum(y_p[0][j]) / y_p[0][j].shape[0]\n\t\t#\tprint(\'max y_p:\',np.max(y_p[0][j]),\'min y_p:\',np.min(y_p[0][j]),\'mean y_p:\',mean,\'mid y_p:\',y_p[0][j][100])\n\t\t#\tprint(\'argmin:\',np.argmin(y_p[0][j]),\'argmax:\',np.argmax(y_p[0][j]))\n\t\t#\tcount=0\n\t\t#\tfor i in range(y_p[0][j].shape[0]):\n\t\t#\t\tif(y_p[0][j][i] < mean):\n\t\t#\t\t\tcount += 1\n\t\t#\tprint(\'count:\',count)\n\t\t\n\t\tbase_pred =base_pred[:, :, :]\n\t\t#base_pred =base_pred[:, 2:, :]\n\t\t\n\t\tr = K.ctc_decode(base_pred, in_len, greedy = True, beam_width=100, top_paths=1)\n\t\t\n\t\t#print(\'r\', r)\n\t\t\n\t\t\n\t\tr1 = K.get_value(r[0][0])\n\t\t#print(\'r1\', r1)\n\t\t\n\t\t\n\t\t#r2 = K.get_value(r[1])\n\t\t#print(r2)\n\t\t\n\t\tr1=r1[0]\n\t\t\n\t\treturn r1\n\t\tpass\n\t\n\tdef RecognizeSpeech(self, wavsignal, fs):\n\t\t\'\'\'\n\t\t\xe6\x9c\x80\xe7\xbb\x88\xe5\x81\x9a\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\x94\xa8\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe8\xaf\x86\xe5\x88\xab\xe4\xb8\x80\xe4\xb8\xaawav\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe8\xaf\xad\xe9\x9f\xb3\n\t\t\'\'\'\n\t\t\n\t\t#data = self.data\n\t\t#data = DataSpeech(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\')\n\t\t#data.LoadDataList(\'dev\')\n\t\t# \xe8\x8e\xb7\xe5\x8f\x96\xe8\xbe\x93\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\n\t\t#data_input = GetMfccFeature(wavsignal, fs)\n\t\t#t0=time.time()\n\t\tdata_input = GetFrequencyFeature3(wavsignal, fs)\n\t\t#t1=time.time()\n\t\t#print(\'time cost:\',t1-t0)\n\t\t\n\t\tinput_length = len(data_input)\n\t\tinput_length = input_length // 8\n\t\t\n\t\tdata_input = np.array(data_input, dtype = np.float)\n\t\t#print(data_input,data_input.shape)\n\t\tdata_input = data_input.reshape(data_input.shape[0],data_input.shape[1],1)\n\t\t#t2=time.time()\n\t\tr1 = self.Predict(data_input, input_length)\n\t\t#t3=time.time()\n\t\t#print(\'time cost:\',t3-t2)\n\t\tlist_symbol_dic = GetSymbolList(self.datapath) # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x8b\xbc\xe9\x9f\xb3\xe5\x88\x97\xe8\xa1\xa8\n\t\t\n\t\t\n\t\tr_str=[]\n\t\tfor i in r1:\n\t\t\tr_str.append(list_symbol_dic[i])\n\t\t\n\t\treturn r_str\n\t\tpass\n\t\t\n\tdef RecognizeSpeech_FromFile(self, filename):\n\t\t\'\'\'\n\t\t\xe6\x9c\x80\xe7\xbb\x88\xe5\x81\x9a\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\x94\xa8\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe8\xaf\x86\xe5\x88\xab\xe6\x8c\x87\xe5\xae\x9a\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\x9a\x84\xe8\xaf\xad\xe9\x9f\xb3\n\t\t\'\'\'\n\t\t\n\t\twavsignal,fs = read_wav_data(filename)\n\t\t\n\t\tr = self.RecognizeSpeech(wavsignal, fs)\n\t\t\n\t\treturn r\n\t\t\n\t\tpass\n\t\t\n\t\n\t\t\n\t@property\n\tdef model(self):\n\t\t\'\'\'\n\t\t\xe8\xbf\x94\xe5\x9b\x9ekeras model\n\t\t\'\'\'\n\t\treturn self._model\n\n\nif(__name__==\'__main__\'):\n\t\n\t#import tensorflow as tf\n\t#from keras.backend.tensorflow_backend import set_session\n\t#os.environ[""CUDA_VISIBLE_DEVICES""] = ""0""\n\t#\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x85\x8d\xe7\xbd\xae\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa895%\xe7\x9a\x84GPU\n\t#config = tf.ConfigProto()\n\t#config.gpu_options.per_process_gpu_memory_fraction = 0.95\n\t#config.gpu_options.allow_growth=True   #\xe4\xb8\x8d\xe5\x85\xa8\xe9\x83\xa8\xe5\x8d\xa0\xe6\xbb\xa1\xe6\x98\xbe\xe5\xad\x98, \xe6\x8c\x89\xe9\x9c\x80\xe5\x88\x86\xe9\x85\x8d\n\t#set_session(tf.Session(config=config))\n\t\n\t\n\tdatapath =  abspath + \'\'\n\tmodelpath =  abspath + \'model_speech\'\n\t\n\t\n\tif(not os.path.exists(modelpath)): # \xe5\x88\xa4\xe6\x96\xad\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe7\x9b\xae\xe5\xbd\x95\xe6\x98\xaf\xe5\x90\xa6\xe5\xad\x98\xe5\x9c\xa8\n\t\tos.makedirs(modelpath) # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x8c\xe5\xb0\xb1\xe6\x96\xb0\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\xaa\xef\xbc\x8c\xe9\x81\xbf\xe5\x85\x8d\xe4\xb9\x8b\xe5\x90\x8e\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe7\x82\xb8\xe6\x8e\x89\n\t\n\tsystem_type = plat.system() # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa4\xe6\x96\xad\n\tif(system_type == \'Windows\'):\n\t\tdatapath = \'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\'\n\t\tmodelpath = modelpath + \'\\\\\'\n\telif(system_type == \'Linux\'):\n\t\tdatapath =  abspath + \'dataset\'\n\t\tmodelpath = modelpath + \'/\'\n\telse:\n\t\tprint(\'*[Message] Unknown System\\n\')\n\t\tdatapath = \'dataset\'\n\t\tmodelpath = modelpath + \'/\'\n\t\n\tms = ModelSpeech(datapath)\n\t\n\t\n\t#ms.LoadModel(modelpath + \'m251/speech_model251_e_0_step_100000.model\')\n\t#ms.TrainModel(datapath, epoch = 50, batch_size = 16, save_step = 500)\n\t\n\t#t1=time.time()\n\t#ms.TestModel(datapath, str_dataset=\'train\', data_count = 128, out_report = True)\n\t#ms.TestModel(datapath, str_dataset=\'dev\', data_count = 128, out_report = True)\n\t#ms.TestModel(datapath, str_dataset=\'test\', data_count = 128, out_report = True)\n\t#t2=time.time()\n\t#print(\'Test Model Time Cost:\',t2-t1,\'s\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\ST-CMDS-20170001_1-OS\\\\20170001P00241I0053.wav\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\ST-CMDS-20170001_1-OS\\\\20170001P00020I0087.wav\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\wav\\\\train\\\\A11\\\\A11_167.WAV\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\wav\\\\test\\\\D4\\\\D4_750.wav\')\n\t#print(\'*[\xe6\x8f\x90\xe7\xa4\xba] \xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x9a\\n\',r)\n'"
SpeechModel251_p.py,4,"b'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n""""""\n@author: nl8590687\n""""""\nimport platform as plat\nimport os\nimport time\n\nfrom general_function.file_wav import *\nfrom general_function.file_dict import *\nfrom general_function.gen_func import *\nfrom general_function.muti_gpu import *\n\nimport keras as kr\nimport numpy as np\nimport random\n\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dense, Dropout, Input, Reshape, BatchNormalization # , Flatten\nfrom keras.layers import Lambda, TimeDistributed, Activation,Conv2D, MaxPooling2D #, Merge\nfrom keras import backend as K\nfrom keras.optimizers import SGD, Adadelta, Adam\n\nfrom readdata24 import DataSpeech\n\nabspath = \'\'\nModelName=\'251\'\nNUM_GPU = 2\n\nclass ModelSpeech(): # \xe8\xaf\xad\xe9\x9f\xb3\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xb1\xbb\n\tdef __init__(self, datapath):\n\t\t\'\'\'\n\t\t\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n\t\t\xe9\xbb\x98\xe8\xae\xa4\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe6\x8b\xbc\xe9\x9f\xb3\xe7\x9a\x84\xe8\xa1\xa8\xe7\xa4\xba\xe5\xa4\xa7\xe5\xb0\x8f\xe6\x98\xaf1424\xef\xbc\x8c\xe5\x8d\xb31423\xe4\xb8\xaa\xe6\x8b\xbc\xe9\x9f\xb3+1\xe4\xb8\xaa\xe7\xa9\xba\xe7\x99\xbd\xe5\x9d\x97\n\t\t\'\'\'\n\t\tMS_OUTPUT_SIZE = 1424\n\t\tself.MS_OUTPUT_SIZE = MS_OUTPUT_SIZE # \xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe6\x9c\x80\xe7\xbb\x88\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe5\x90\x91\xe9\x87\x8f\xe7\xbb\xb4\xe5\xba\xa6\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\n\t\t#self.BATCH_SIZE = BATCH_SIZE # \xe4\xb8\x80\xe6\xac\xa1\xe8\xae\xad\xe7\xbb\x83\xe7\x9a\x84batch\n\t\tself.label_max_string_length = 64\n\t\tself.AUDIO_LENGTH = 1600\n\t\tself.AUDIO_FEATURE_LENGTH = 200\n\t\tself._model, self.base_model = self.CreateModel() \n\t\t\n\t\tself.datapath = datapath\n\t\tself.slash = \'\'\n\t\tsystem_type = plat.system() # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa4\xe6\x96\xad\n\t\tif(system_type == \'Windows\'):\n\t\t\tself.slash=\'\\\\\' # \xe5\x8f\x8d\xe6\x96\x9c\xe6\x9d\xa0\n\t\telif(system_type == \'Linux\'):\n\t\t\tself.slash=\'/\' # \xe6\xad\xa3\xe6\x96\x9c\xe6\x9d\xa0\n\t\telse:\n\t\t\tprint(\'*[Message] Unknown System\\n\')\n\t\t\tself.slash=\'/\' # \xe6\xad\xa3\xe6\x96\x9c\xe6\x9d\xa0\n\t\tif(self.slash != self.datapath[-1]): # \xe5\x9c\xa8\xe7\x9b\xae\xe5\xbd\x95\xe8\xb7\xaf\xe5\xbe\x84\xe6\x9c\xab\xe5\xb0\xbe\xe5\xa2\x9e\xe5\x8a\xa0\xe6\x96\x9c\xe6\x9d\xa0\n\t\t\tself.datapath = self.datapath + self.slash\n\t\n\t\t\n\tdef CreateModel(self):\n\t\t\'\'\'\n\t\t\xe5\xae\x9a\xe4\xb9\x89CNN/LSTM/CTC\xe6\xa8\xa1\xe5\x9e\x8b\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\x87\xbd\xe6\x95\xb0\xe5\xbc\x8f\xe6\xa8\xa1\xe5\x9e\x8b\n\t\t\xe8\xbe\x93\xe5\x85\xa5\xe5\xb1\x82\xef\xbc\x9a200\xe7\xbb\xb4\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\x80\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe4\xb8\x80\xe6\x9d\xa1\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\xa7\xe9\x95\xbf\xe5\xba\xa6\xe8\xae\xbe\xe4\xb8\xba1600\xef\xbc\x88\xe5\xa4\xa7\xe7\xba\xa616s\xef\xbc\x89\n\t\t\xe9\x9a\x90\xe8\x97\x8f\xe5\xb1\x82\xef\xbc\x9a\xe5\x8d\xb7\xe7\xa7\xaf\xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\xef\xbc\x8c\xe5\x8d\xb7\xe7\xa7\xaf\xe6\xa0\xb8\xe5\xa4\xa7\xe5\xb0\x8f\xe4\xb8\xba3x3\xef\xbc\x8c\xe6\xb1\xa0\xe5\x8c\x96\xe7\xaa\x97\xe5\x8f\xa3\xe5\xa4\xa7\xe5\xb0\x8f\xe4\xb8\xba2\n\t\t\xe9\x9a\x90\xe8\x97\x8f\xe5\xb1\x82\xef\xbc\x9a\xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\t\xe8\xbe\x93\xe5\x87\xba\xe5\xb1\x82\xef\xbc\x9a\xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\xef\xbc\x8c\xe7\xa5\x9e\xe7\xbb\x8f\xe5\x85\x83\xe6\x95\xb0\xe9\x87\x8f\xe4\xb8\xbaself.MS_OUTPUT_SIZE\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8softmax\xe4\xbd\x9c\xe4\xb8\xba\xe6\xbf\x80\xe6\xb4\xbb\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\n\t\tCTC\xe5\xb1\x82\xef\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8CTC\xe7\x9a\x84loss\xe4\xbd\x9c\xe4\xb8\xba\xe6\x8d\x9f\xe5\xa4\xb1\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\xae\x9e\xe7\x8e\xb0\xe8\xbf\x9e\xe6\x8e\xa5\xe6\x80\xa7\xe6\x97\xb6\xe5\xba\x8f\xe5\xa4\x9a\xe8\xbe\x93\xe5\x87\xba\n\t\t\n\t\t\'\'\'\n\t\t\n\t\tinput_data = Input(name=\'the_input\', shape=(self.AUDIO_LENGTH, self.AUDIO_FEATURE_LENGTH, 1))\n\t\t\n\t\tlayer_h1 = Conv2D(32, (3,3), use_bias=False, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(input_data) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h1 = Dropout(0.05)(layer_h1)\n\t\tlayer_h2 = Conv2D(32, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h1) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h3 = MaxPooling2D(pool_size=2, strides=None, padding=""valid"")(layer_h2) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t#layer_h3 = Dropout(0.2)(layer_h2) # \xe9\x9a\x8f\xe6\x9c\xba\xe4\xb8\xad\xe6\x96\xad\xe9\x83\xa8\xe5\x88\x86\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe8\xbf\x9e\xe6\x8e\xa5\xef\xbc\x8c\xe9\x98\xb2\xe6\xad\xa2\xe8\xbf\x87\xe6\x8b\x9f\xe5\x90\x88\n\t\tlayer_h3 = Dropout(0.05)(layer_h3)\n\t\tlayer_h4 = Conv2D(64, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h3) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h4 = Dropout(0.1)(layer_h4)\n\t\tlayer_h5 = Conv2D(64, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h4) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h6 = MaxPooling2D(pool_size=2, strides=None, padding=""valid"")(layer_h5) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\tlayer_h6 = Dropout(0.1)(layer_h6)\n\t\tlayer_h7 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h6) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h7 = Dropout(0.15)(layer_h7)\n\t\tlayer_h8 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h7) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h9 = MaxPooling2D(pool_size=2, strides=None, padding=""valid"")(layer_h8) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\tlayer_h9 = Dropout(0.15)(layer_h9)\n\t\tlayer_h10 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h9) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h10 = Dropout(0.2)(layer_h10)\n\t\tlayer_h11 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h10) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h12 = MaxPooling2D(pool_size=1, strides=None, padding=""valid"")(layer_h11) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\tlayer_h12 = Dropout(0.2)(layer_h12)\n\t\tlayer_h13 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h12) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h13 = Dropout(0.3)(layer_h13)\n\t\tlayer_h14 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h13) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h15 = MaxPooling2D(pool_size=1, strides=None, padding=""valid"")(layer_h14) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\t#test=Model(inputs = input_data, outputs = layer_h12)\n\t\t#test.summary()\n\t\t\n\t\tlayer_h16 = Reshape((200, 3200))(layer_h15) #Reshape\xe5\xb1\x82\n\t\t#layer_h5 = LSTM(256, activation=\'relu\', use_bias=True, return_sequences=True)(layer_h4) # LSTM\xe5\xb1\x82\n\t\t#layer_h6 = Dropout(0.2)(layer_h5) # \xe9\x9a\x8f\xe6\x9c\xba\xe4\xb8\xad\xe6\x96\xad\xe9\x83\xa8\xe5\x88\x86\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe8\xbf\x9e\xe6\x8e\xa5\xef\xbc\x8c\xe9\x98\xb2\xe6\xad\xa2\xe8\xbf\x87\xe6\x8b\x9f\xe5\x90\x88\n\t\tlayer_h16 = Dropout(0.3)(layer_h16)\n\t\tlayer_h17 = Dense(128, activation=""relu"", use_bias=True, kernel_initializer=\'he_normal\')(layer_h16) # \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\tlayer_h17 = Dropout(0.3)(layer_h17)\n\t\tlayer_h18 = Dense(self.MS_OUTPUT_SIZE, use_bias=True, kernel_initializer=\'he_normal\')(layer_h17) # \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\t\n\t\ty_pred = Activation(\'softmax\', name=\'Activation0\')(layer_h18)\n\t\tmodel_data = Model(inputs = input_data, outputs = y_pred)\n\t\t#model_data.summary()\n\t\t\n\t\tlabels = Input(name=\'the_labels\', shape=[self.label_max_string_length], dtype=\'float32\')\n\t\tinput_length = Input(name=\'input_length\', shape=[1], dtype=\'int64\')\n\t\tlabel_length = Input(name=\'label_length\', shape=[1], dtype=\'int64\')\n\t\t# Keras doesn\'t currently support loss funcs with extra parameters\n\t\t# so CTC loss is implemented in a lambda layer\n\t\t\n\t\t#layer_out = Lambda(ctc_lambda_func,output_shape=(self.MS_OUTPUT_SIZE, ), name=\'ctc\')([y_pred, labels, input_length, label_length])#(layer_h6) # CTC\n\t\tloss_out = Lambda(self.ctc_lambda_func, output_shape=(1,), name=\'ctc\')([y_pred, labels, input_length, label_length])\n\t\t\n\t\t\n\t\t\n\t\tmodel = Model(inputs=[input_data, labels, input_length, label_length], outputs=loss_out)\n\t\t\n\t\tmodel.summary()\n\t\t\n\t\t# clipnorm seems to speeds up convergence\n\t\t#sgd = SGD(lr=0.0001, decay=1e-6, momentum=0.9, nesterov=True, clipnorm=5)\n\t\t#ada_d = Adadelta(lr = 0.01, rho = 0.95, epsilon = 1e-06)\n\t\topt = Adam(lr = 0.001, beta_1 = 0.9, beta_2 = 0.999, decay = 0.0, epsilon = 10e-8)\n\t\t#model.compile(loss={\'ctc\': lambda y_true, y_pred: y_pred}, optimizer=sgd)\n\t\t\n\t\tmodel.build((self.AUDIO_LENGTH, self.AUDIO_FEATURE_LENGTH, 1))\n\t\tmodel = ParallelModel(model, NUM_GPU)\n\t\t\n\t\tmodel.compile(loss={\'ctc\': lambda y_true, y_pred: y_pred}, optimizer = opt)\n\t\t\n\t\t\n\t\t# captures output of softmax so we can decode the output during visualization\n\t\ttest_func = K.function([input_data], [y_pred])\n\t\t\n\t\t#print(\'[*\xe6\x8f\x90\xe7\xa4\xba] \xe5\x88\x9b\xe5\xbb\xba\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x88\x90\xe5\x8a\x9f\xef\xbc\x8c\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xbc\x96\xe8\xaf\x91\xe6\x88\x90\xe5\x8a\x9f\')\n\t\tprint(\'[*Info] Create Model Successful, Compiles Model Successful. \')\n\t\treturn model, model_data\n\t\t\n\tdef ctc_lambda_func(self, args):\n\t\ty_pred, labels, input_length, label_length = args\n\t\t\n\t\ty_pred = y_pred[:, :, :]\n\t\t#y_pred = y_pred[:, 2:, :]\n\t\treturn K.ctc_batch_cost(labels, y_pred, input_length, label_length)\n\t\n\t\n\t\n\tdef TrainModel(self, datapath, epoch = 2, save_step = 1000, batch_size = 32, filename = abspath + \'model_speech/m\' + ModelName + \'/speech_model\'+ModelName):\n\t\t\'\'\'\n\t\t\xe8\xae\xad\xe7\xbb\x83\xe6\xa8\xa1\xe5\x9e\x8b\n\t\t\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\n\t\t\tdatapath: \xe6\x95\xb0\xe6\x8d\xae\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe8\xb7\xaf\xe5\xbe\x84\n\t\t\tepoch: \xe8\xbf\xad\xe4\xbb\xa3\xe8\xbd\xae\xe6\x95\xb0\n\t\t\tsave_step: \xe6\xaf\x8f\xe5\xa4\x9a\xe5\xb0\x91\xe6\xad\xa5\xe4\xbf\x9d\xe5\xad\x98\xe4\xb8\x80\xe6\xac\xa1\xe6\xa8\xa1\xe5\x9e\x8b\n\t\t\tfilename: \xe9\xbb\x98\xe8\xae\xa4\xe4\xbf\x9d\xe5\xad\x98\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xef\xbc\x8c\xe4\xb8\x8d\xe5\x90\xab\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8e\xe7\xbc\x80\xe5\x90\x8d\n\t\t\'\'\'\n\t\tdata=DataSpeech(datapath, \'train\')\n\t\t\n\t\tnum_data = data.GetDataNum() # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\n\t\t\n\t\tyielddatas = data.data_genetator(batch_size, self.AUDIO_LENGTH)\n\t\t\n\t\tfor epoch in range(epoch): # \xe8\xbf\xad\xe4\xbb\xa3\xe8\xbd\xae\xe6\x95\xb0\n\t\t\tprint(\'[running] train epoch %d .\' % epoch)\n\t\t\tn_step = 0 # \xe8\xbf\xad\xe4\xbb\xa3\xe6\x95\xb0\xe6\x8d\xae\xe6\x95\xb0\n\t\t\twhile True:\n\t\t\t\ttry:\n\t\t\t\t\tprint(\'[message] epoch %d . Have train datas %d+\'%(epoch, n_step*save_step))\n\t\t\t\t\t# data_genetator\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe7\x94\x9f\xe6\x88\x90\xe5\x99\xa8\xe5\x87\xbd\xe6\x95\xb0\n\t\t\t\t\t\n\t\t\t\t\t#self._model.fit_generator(yielddatas, save_step, nb_worker=2)\n\t\t\t\t\tself._model.fit_generator(yielddatas, save_step)\n\t\t\t\t\tn_step += 1\n\t\t\t\texcept StopIteration:\n\t\t\t\t\tprint(\'[error] generator error. please check data format.\')\n\t\t\t\t\tbreak\n\t\t\t\t\n\t\t\t\tself.SaveModel(comment=\'_e_\'+str(epoch)+\'_step_\'+str(n_step * save_step))\n\t\t\t\tself.TestModel(self.datapath, str_dataset=\'train\', data_count = 4)\n\t\t\t\tself.TestModel(self.datapath, str_dataset=\'dev\', data_count = 4)\n\t\t\t\t\n\tdef LoadModel(self,filename = abspath + \'model_speech/m\'+ModelName+\'/speech_model\'+ModelName+\'.model\'):\n\t\t\'\'\'\n\t\t\xe5\x8a\xa0\xe8\xbd\xbd\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x8f\x82\xe6\x95\xb0\n\t\t\'\'\'\n\t\tself._model.load_weights(filename)\n\t\tself.base_model.load_weights(filename + \'.base\')\n\n\tdef SaveModel(self,filename = abspath + \'model_speech/m\'+ModelName+\'/speech_model\'+ModelName,comment=\'\'):\n\t\t\'\'\'\n\t\t\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x8f\x82\xe6\x95\xb0\n\t\t\'\'\'\n\t\tself._model.save_weights(filename+comment+\'.model\')\n\t\tself.base_model.save_weights(filename + comment + \'.model.base\')\n\t\tf = open(\'step\'+ModelName+\'.txt\',\'w\')\n\t\tf.write(filename+comment)\n\t\tf.close()\n\n\tdef TestModel(self, datapath=\'\', str_dataset=\'dev\', data_count = 32, out_report = False, show_ratio = True):\n\t\t\'\'\'\n\t\t\xe6\xb5\x8b\xe8\xaf\x95\xe6\xa3\x80\xe9\xaa\x8c\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x95\x88\xe6\x9e\x9c\n\t\t\'\'\'\n\t\tdata=DataSpeech(self.datapath, str_dataset)\n\t\t#data.LoadDataList(str_dataset) \n\t\tnum_data = data.GetDataNum() # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\n\t\tif(data_count <= 0 or data_count > num_data): # \xe5\xbd\x93data_count\xe4\xb8\xba\xe5\xb0\x8f\xe4\xba\x8e\xe7\xad\x89\xe4\xba\x8e0\xe6\x88\x96\xe8\x80\x85\xe5\xa4\xa7\xe4\xba\x8e\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xae\xe9\x87\x8f\xe7\x9a\x84\xe5\x80\xbc\xe6\x97\xb6\xef\xbc\x8c\xe5\x88\x99\xe4\xbd\xbf\xe7\x94\xa8\xe5\x85\xa8\xe9\x83\xa8\xe6\x95\xb0\xe6\x8d\xae\xe6\x9d\xa5\xe6\xb5\x8b\xe8\xaf\x95\n\t\t\tdata_count = num_data\n\t\t\n\t\ttry:\n\t\t\tran_num = random.randint(0,num_data - 1) # \xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\x80\xe4\xb8\xaa\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\n\t\t\t\n\t\t\twords_num = 0\n\t\t\tword_error_num = 0\n\t\t\t\n\t\t\tnowtime = time.strftime(\'%Y%m%d_%H%M%S\',time.localtime(time.time()))\n\t\t\tif(out_report == True):\n\t\t\t\ttxt_obj = open(\'Test_Report_\' + str_dataset + \'_\' + nowtime + \'.txt\', \'w\', encoding=\'UTF-8\') # \xe6\x89\x93\xe5\xbc\x80\xe6\x96\x87\xe4\xbb\xb6\xe5\xb9\xb6\xe8\xaf\xbb\xe5\x85\xa5\n\t\t\t\n\t\t\ttxt = \'\'\n\t\t\tfor i in range(data_count):\n\t\t\t\tdata_input, data_labels = data.GetData((ran_num + i) % num_data)  # \xe4\xbb\x8e\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xe5\xbc\x80\xe5\xa7\x8b\xe8\xbf\x9e\xe7\xbb\xad\xe5\x90\x91\xe5\x90\x8e\xe5\x8f\x96\xe4\xb8\x80\xe5\xae\x9a\xe6\x95\xb0\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\xae\n\t\t\t\t\n\t\t\t\t# \xe6\x95\xb0\xe6\x8d\xae\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x87\xba\xe9\x94\x99\xe5\xa4\x84\xe7\x90\x86 \xe5\xbc\x80\xe5\xa7\x8b\n\t\t\t\t# \xe5\xbd\x93\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84wav\xe6\x96\x87\xe4\xbb\xb6\xe9\x95\xbf\xe5\xba\xa6\xe8\xbf\x87\xe9\x95\xbf\xe6\x97\xb6\xe8\x87\xaa\xe5\x8a\xa8\xe8\xb7\xb3\xe8\xbf\x87\xe8\xaf\xa5\xe6\x96\x87\xe4\xbb\xb6\xef\xbc\x8c\xe8\xbd\xac\xe8\x80\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8b\xe4\xb8\x80\xe4\xb8\xaawav\xe6\x96\x87\xe4\xbb\xb6\xe6\x9d\xa5\xe8\xbf\x90\xe8\xa1\x8c\n\t\t\t\tnum_bias = 0\n\t\t\t\twhile(data_input.shape[0] > self.AUDIO_LENGTH):\n\t\t\t\t\tprint(\'*[Error]\',\'wave data lenghth of num\',(ran_num + i) % num_data, \'is too long.\',\'\\n A Exception raise when test Speech Model.\')\n\t\t\t\t\tnum_bias += 1\n\t\t\t\t\tdata_input, data_labels = data.GetData((ran_num + i + num_bias) % num_data)  # \xe4\xbb\x8e\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xe5\xbc\x80\xe5\xa7\x8b\xe8\xbf\x9e\xe7\xbb\xad\xe5\x90\x91\xe5\x90\x8e\xe5\x8f\x96\xe4\xb8\x80\xe5\xae\x9a\xe6\x95\xb0\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\xae\n\t\t\t\t# \xe6\x95\xb0\xe6\x8d\xae\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x87\xba\xe9\x94\x99\xe5\xa4\x84\xe7\x90\x86 \xe7\xbb\x93\xe6\x9d\x9f\n\t\t\t\t\n\t\t\t\tpre = self.Predict(data_input, data_input.shape[0] // 8)\n\t\t\t\t\n\t\t\t\twords_n = data_labels.shape[0] # \xe8\x8e\xb7\xe5\x8f\x96\xe6\xaf\x8f\xe4\xb8\xaa\xe5\x8f\xa5\xe5\xad\x90\xe7\x9a\x84\xe5\xad\x97\xe6\x95\xb0\n\t\t\t\twords_num += words_n # \xe6\x8a\x8a\xe5\x8f\xa5\xe5\xad\x90\xe7\x9a\x84\xe6\x80\xbb\xe5\xad\x97\xe6\x95\xb0\xe5\x8a\xa0\xe4\xb8\x8a\n\t\t\t\tedit_distance = GetEditDistance(data_labels, pre) # \xe8\x8e\xb7\xe5\x8f\x96\xe7\xbc\x96\xe8\xbe\x91\xe8\xb7\x9d\xe7\xa6\xbb\n\t\t\t\tif(edit_distance <= words_n): # \xe5\xbd\x93\xe7\xbc\x96\xe8\xbe\x91\xe8\xb7\x9d\xe7\xa6\xbb\xe5\xb0\x8f\xe4\xba\x8e\xe7\xad\x89\xe4\xba\x8e\xe5\x8f\xa5\xe5\xad\x90\xe5\xad\x97\xe6\x95\xb0\xe6\x97\xb6\n\t\t\t\t\tword_error_num += edit_distance # \xe4\xbd\xbf\xe7\x94\xa8\xe7\xbc\x96\xe8\xbe\x91\xe8\xb7\x9d\xe7\xa6\xbb\xe4\xbd\x9c\xe4\xb8\xba\xe9\x94\x99\xe8\xaf\xaf\xe5\xad\x97\xe6\x95\xb0\n\t\t\t\telse: # \xe5\x90\xa6\xe5\x88\x99\xe8\x82\xaf\xe5\xae\x9a\xe6\x98\xaf\xe5\xa2\x9e\xe5\x8a\xa0\xe4\xba\x86\xe4\xb8\x80\xe5\xa0\x86\xe4\xb9\xb1\xe4\xb8\x83\xe5\x85\xab\xe7\xb3\x9f\xe7\x9a\x84\xe5\xa5\x87\xe5\xa5\x87\xe6\x80\xaa\xe6\x80\xaa\xe7\x9a\x84\xe5\xad\x97\n\t\t\t\t\tword_error_num += words_n # \xe5\xb0\xb1\xe7\x9b\xb4\xe6\x8e\xa5\xe5\x8a\xa0\xe5\x8f\xa5\xe5\xad\x90\xe6\x9c\xac\xe6\x9d\xa5\xe7\x9a\x84\xe6\x80\xbb\xe5\xad\x97\xe6\x95\xb0\xe5\xb0\xb1\xe5\xa5\xbd\xe4\xba\x86\n\t\t\t\t\n\t\t\t\tif(i % 10 == 0 and show_ratio == True):\n\t\t\t\t\tprint(\'Test Count: \',i,\'/\',data_count)\n\t\t\t\t\n\t\t\t\ttxt = \'\'\n\t\t\t\tif(out_report == True):\n\t\t\t\t\ttxt += str(i) + \'\\n\'\n\t\t\t\t\ttxt += \'True:\\t\' + str(data_labels) + \'\\n\'\n\t\t\t\t\ttxt += \'Pred:\\t\' + str(pre) + \'\\n\'\n\t\t\t\t\ttxt += \'\\n\'\n\t\t\t\t\ttxt_obj.write(txt)\n\t\t\t\t\n\t\t\t\n\t\t\t#print(\'*[\xe6\xb5\x8b\xe8\xaf\x95\xe7\xbb\x93\xe6\x9e\x9c] \xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab \' + str_dataset + \' \xe9\x9b\x86\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\x95\xe5\xad\x97\xe9\x94\x99\xe8\xaf\xaf\xe7\x8e\x87\xef\xbc\x9a\', word_error_num / words_num * 100, \'%\')\n\t\t\tprint(\'*[Test Result] Speech Recognition \' + str_dataset + \' set word error ratio: \', word_error_num / words_num * 100, \'%\')\n\t\t\tif(out_report == True):\n\t\t\t\ttxt = \'*[\xe6\xb5\x8b\xe8\xaf\x95\xe7\xbb\x93\xe6\x9e\x9c] \xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab \' + str_dataset + \' \xe9\x9b\x86\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\x95\xe5\xad\x97\xe9\x94\x99\xe8\xaf\xaf\xe7\x8e\x87\xef\xbc\x9a \' + str(word_error_num / words_num * 100) + \' %\'\n\t\t\t\ttxt_obj.write(txt)\n\t\t\t\ttxt_obj.close()\n\t\t\t\n\t\texcept StopIteration:\n\t\t\tprint(\'[Error] Model Test Error. please check data format.\')\n\t\n\tdef Predict(self, data_input, input_len):\n\t\t\'\'\'\n\t\t\xe9\xa2\x84\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\n\t\t\xe8\xbf\x94\xe5\x9b\x9e\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe5\x90\x8e\xe7\x9a\x84\xe6\x8b\xbc\xe9\x9f\xb3\xe7\xac\xa6\xe5\x8f\xb7\xe5\x88\x97\xe8\xa1\xa8\n\t\t\'\'\'\n\t\t\n\t\tbatch_size = 1 \n\t\tin_len = np.zeros((batch_size),dtype = np.int32)\n\t\t\n\t\tin_len[0] = input_len\n\t\t\n\t\tx_in = np.zeros((batch_size, 1600, self.AUDIO_FEATURE_LENGTH, 1), dtype=np.float)\n\t\t\n\t\tfor i in range(batch_size):\n\t\t\tx_in[i,0:len(data_input)] = data_input\n\t\t\n\t\t\n\t\tbase_pred = self.base_model.predict(x = x_in)\n\t\t\n\t\t#print(\'base_pred:\\n\', base_pred)\n\t\t\n\t\t#y_p = base_pred\n\t\t#for j in range(200):\n\t\t#\tmean = np.sum(y_p[0][j]) / y_p[0][j].shape[0]\n\t\t#\tprint(\'max y_p:\',np.max(y_p[0][j]),\'min y_p:\',np.min(y_p[0][j]),\'mean y_p:\',mean,\'mid y_p:\',y_p[0][j][100])\n\t\t#\tprint(\'argmin:\',np.argmin(y_p[0][j]),\'argmax:\',np.argmax(y_p[0][j]))\n\t\t#\tcount=0\n\t\t#\tfor i in range(y_p[0][j].shape[0]):\n\t\t#\t\tif(y_p[0][j][i] < mean):\n\t\t#\t\t\tcount += 1\n\t\t#\tprint(\'count:\',count)\n\t\t\n\t\tbase_pred =base_pred[:, :, :]\n\t\t#base_pred =base_pred[:, 2:, :]\n\t\t\n\t\tr = K.ctc_decode(base_pred, in_len, greedy = True, beam_width=100, top_paths=1)\n\t\t\n\t\t#print(\'r\', r)\n\t\t\n\t\t\n\t\tr1 = K.get_value(r[0][0])\n\t\t#print(\'r1\', r1)\n\t\t\n\t\t\n\t\t#r2 = K.get_value(r[1])\n\t\t#print(r2)\n\t\t\n\t\tr1=r1[0]\n\t\t\n\t\treturn r1\n\t\tpass\n\t\n\tdef RecognizeSpeech(self, wavsignal, fs):\n\t\t\'\'\'\n\t\t\xe6\x9c\x80\xe7\xbb\x88\xe5\x81\x9a\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\x94\xa8\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe8\xaf\x86\xe5\x88\xab\xe4\xb8\x80\xe4\xb8\xaawav\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe8\xaf\xad\xe9\x9f\xb3\n\t\t\'\'\'\n\t\t\n\t\t#data = self.data\n\t\t#data = DataSpeech(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\')\n\t\t#data.LoadDataList(\'dev\')\n\t\t# \xe8\x8e\xb7\xe5\x8f\x96\xe8\xbe\x93\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\n\t\t#data_input = GetMfccFeature(wavsignal, fs)\n\t\t#t0=time.time()\n\t\tdata_input = GetFrequencyFeature3(wavsignal, fs)\n\t\t#t1=time.time()\n\t\t#print(\'time cost:\',t1-t0)\n\t\t\n\t\tinput_length = len(data_input)\n\t\tinput_length = input_length // 8\n\t\t\n\t\tdata_input = np.array(data_input, dtype = np.float)\n\t\t#print(data_input,data_input.shape)\n\t\tdata_input = data_input.reshape(data_input.shape[0],data_input.shape[1],1)\n\t\t#t2=time.time()\n\t\tr1 = self.Predict(data_input, input_length)\n\t\t#t3=time.time()\n\t\t#print(\'time cost:\',t3-t2)\n\t\tlist_symbol_dic = GetSymbolList(self.datapath) # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x8b\xbc\xe9\x9f\xb3\xe5\x88\x97\xe8\xa1\xa8\n\t\t\n\t\t\n\t\tr_str=[]\n\t\tfor i in r1:\n\t\t\tr_str.append(list_symbol_dic[i])\n\t\t\n\t\treturn r_str\n\t\tpass\n\t\t\n\tdef RecognizeSpeech_FromFile(self, filename):\n\t\t\'\'\'\n\t\t\xe6\x9c\x80\xe7\xbb\x88\xe5\x81\x9a\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\x94\xa8\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe8\xaf\x86\xe5\x88\xab\xe6\x8c\x87\xe5\xae\x9a\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\x9a\x84\xe8\xaf\xad\xe9\x9f\xb3\n\t\t\'\'\'\n\t\t\n\t\twavsignal,fs = read_wav_data(filename)\n\t\t\n\t\tr = self.RecognizeSpeech(wavsignal, fs)\n\t\t\n\t\treturn r\n\t\t\n\t\tpass\n\t\t\n\t\n\t\t\n\t@property\n\tdef model(self):\n\t\t\'\'\'\n\t\t\xe8\xbf\x94\xe5\x9b\x9ekeras model\n\t\t\'\'\'\n\t\treturn self._model\n\n\nif(__name__==\'__main__\'):\n\t\n\t#import tensorflow as tf\n\t#from keras.backend.tensorflow_backend import set_session\n\t#os.environ[""CUDA_VISIBLE_DEVICES""] = ""1""\n\t#\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x85\x8d\xe7\xbd\xae\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa870%\xe7\x9a\x84GPU\n\t#config = tf.ConfigProto()\n\t#config.gpu_options.per_process_gpu_memory_fraction = 0.95\n\t#config.gpu_options.allow_growth=True   #\xe4\xb8\x8d\xe5\x85\xa8\xe9\x83\xa8\xe5\x8d\xa0\xe6\xbb\xa1\xe6\x98\xbe\xe5\xad\x98, \xe6\x8c\x89\xe9\x9c\x80\xe5\x88\x86\xe9\x85\x8d\n\t#set_session(tf.Session(config=config))\n\t\n\t\n\tdatapath =  abspath + \'\'\n\tmodelpath =  abspath + \'model_speech\'\n\t\n\t\n\tif(not os.path.exists(modelpath)): # \xe5\x88\xa4\xe6\x96\xad\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe7\x9b\xae\xe5\xbd\x95\xe6\x98\xaf\xe5\x90\xa6\xe5\xad\x98\xe5\x9c\xa8\n\t\tos.makedirs(modelpath) # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x8c\xe5\xb0\xb1\xe6\x96\xb0\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\xaa\xef\xbc\x8c\xe9\x81\xbf\xe5\x85\x8d\xe4\xb9\x8b\xe5\x90\x8e\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe7\x82\xb8\xe6\x8e\x89\n\t\n\tsystem_type = plat.system() # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa4\xe6\x96\xad\n\tif(system_type == \'Windows\'):\n\t\tdatapath = \'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\'\n\t\tmodelpath = modelpath + \'\\\\\'\n\telif(system_type == \'Linux\'):\n\t\tdatapath =  abspath + \'dataset\'\n\t\tmodelpath = modelpath + \'/\'\n\telse:\n\t\tprint(\'*[Message] Unknown System\\n\')\n\t\tdatapath = \'dataset\'\n\t\tmodelpath = modelpath + \'/\'\n\t\n\tms = ModelSpeech(datapath)\n\t\n\t\n\t#ms.LoadModel(modelpath + \'m251/speech_model251_e_0_step_98000.model\')\n\tms.TrainModel(datapath, epoch = 50, batch_size = 16, save_step = 500)\n\t#ms.TestModel(datapath, str_dataset=\'test\', data_count = 128, out_report = True)\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\ST-CMDS-20170001_1-OS\\\\20170001P00241I0053.wav\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\ST-CMDS-20170001_1-OS\\\\20170001P00020I0087.wav\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\wav\\\\train\\\\A11\\\\A11_167.WAV\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\wav\\\\test\\\\D4\\\\D4_750.wav\')\n\t#print(\'*[\xe6\x8f\x90\xe7\xa4\xba] \xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x9a\\n\',r)\n'"
SpeechModel252.py,4,"b'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n""""""\n@author: nl8590687\n""""""\nimport platform as plat\nimport os\nimport time\n\nfrom general_function.file_wav import *\nfrom general_function.file_dict import *\nfrom general_function.gen_func import *\n\n# LSTM_CNN\nimport keras as kr\nimport numpy as np\nimport random\n\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dense, Dropout, Input, Reshape # , Flatten,LSTM,Convolution1D,MaxPooling1D,Merge\nfrom keras.layers import Conv1D,LSTM,MaxPooling1D, Lambda, TimeDistributed, Activation,Conv2D, MaxPooling2D #, Merge,Conv1D\nfrom keras import backend as K\nfrom keras.optimizers import SGD, Adadelta\n\nfrom readdata24 import DataSpeech\n\nabspath = \'\'\nModelName=\'252\'\n\nclass ModelSpeech(): # \xe8\xaf\xad\xe9\x9f\xb3\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xb1\xbb\n\tdef __init__(self, datapath):\n\t\t\'\'\'\n\t\t\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n\t\t\xe9\xbb\x98\xe8\xae\xa4\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe6\x8b\xbc\xe9\x9f\xb3\xe7\x9a\x84\xe8\xa1\xa8\xe7\xa4\xba\xe5\xa4\xa7\xe5\xb0\x8f\xe6\x98\xaf1424\xef\xbc\x8c\xe5\x8d\xb31423\xe4\xb8\xaa\xe6\x8b\xbc\xe9\x9f\xb3+1\xe4\xb8\xaa\xe7\xa9\xba\xe7\x99\xbd\xe5\x9d\x97\n\t\t\'\'\'\n\t\tMS_OUTPUT_SIZE = 1424\n\t\tself.MS_OUTPUT_SIZE = MS_OUTPUT_SIZE # \xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe6\x9c\x80\xe7\xbb\x88\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe5\x90\x91\xe9\x87\x8f\xe7\xbb\xb4\xe5\xba\xa6\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\n\t\t#self.BATCH_SIZE = BATCH_SIZE # \xe4\xb8\x80\xe6\xac\xa1\xe8\xae\xad\xe7\xbb\x83\xe7\x9a\x84batch\n\t\tself.label_max_string_length = 64\n\t\tself.AUDIO_LENGTH = 1600\n\t\tself.AUDIO_FEATURE_LENGTH = 200\n\t\tself._model, self.base_model = self.CreateModel() \n\t\t\n\t\tself.datapath = datapath\n\t\tself.slash = \'\'\n\t\tsystem_type = plat.system() # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa4\xe6\x96\xad\n\t\tif(system_type == \'Windows\'):\n\t\t\tself.slash=\'\\\\\' # \xe5\x8f\x8d\xe6\x96\x9c\xe6\x9d\xa0\n\t\telif(system_type == \'Linux\'):\n\t\t\tself.slash=\'/\' # \xe6\xad\xa3\xe6\x96\x9c\xe6\x9d\xa0\n\t\telse:\n\t\t\tprint(\'*[Message] Unknown System\\n\')\n\t\t\tself.slash=\'/\' # \xe6\xad\xa3\xe6\x96\x9c\xe6\x9d\xa0\n\t\tif(self.slash != self.datapath[-1]): # \xe5\x9c\xa8\xe7\x9b\xae\xe5\xbd\x95\xe8\xb7\xaf\xe5\xbe\x84\xe6\x9c\xab\xe5\xb0\xbe\xe5\xa2\x9e\xe5\x8a\xa0\xe6\x96\x9c\xe6\x9d\xa0\n\t\t\tself.datapath = self.datapath + self.slash\n\t\t\n\t\t\n\tdef CreateModel(self):\n\t\t\'\'\'\n\t\t\xe5\xae\x9a\xe4\xb9\x89CNN/LSTM/CTC\xe6\xa8\xa1\xe5\x9e\x8b\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\x87\xbd\xe6\x95\xb0\xe5\xbc\x8f\xe6\xa8\xa1\xe5\x9e\x8b\n\t\t\xe8\xbe\x93\xe5\x85\xa5\xe5\xb1\x82\xef\xbc\x9a39\xe7\xbb\xb4\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\x80\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe4\xb8\x80\xe6\x9d\xa1\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\xa7\xe9\x95\xbf\xe5\xba\xa6\xe8\xae\xbe\xe4\xb8\xba1500\xef\xbc\x88\xe5\xa4\xa7\xe7\xba\xa615s\xef\xbc\x89\n\t\t\xe9\x9a\x90\xe8\x97\x8f\xe5\xb1\x82\xe4\xb8\x80\xef\xbc\x9a1024\xe4\xb8\xaa\xe7\xa5\x9e\xe7\xbb\x8f\xe5\x85\x83\xe7\x9a\x84\xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\t\xe9\x9a\x90\xe8\x97\x8f\xe5\xb1\x82\xe4\xba\x8c\xef\xbc\x9a\xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\xef\xbc\x8c\xe6\xb1\xa0\xe5\x8c\x96\xe7\xaa\x97\xe5\x8f\xa3\xe5\xa4\xa7\xe5\xb0\x8f\xe4\xb8\xba2\n\t\t\xe9\x9a\x90\xe8\x97\x8f\xe5\xb1\x82\xe4\xb8\x89\xef\xbc\x9aDropout\xe5\xb1\x82\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe6\x96\xad\xe5\xbc\x80\xe7\x9a\x84\xe7\xa5\x9e\xe7\xbb\x8f\xe5\x85\x83\xe7\x9a\x84\xe6\xaf\x94\xe4\xbe\x8b\xe4\xb8\xba0.2\xef\xbc\x8c\xe9\x98\xb2\xe6\xad\xa2\xe8\xbf\x87\xe6\x8b\x9f\xe5\x90\x88\n\t\t\xe9\x9a\x90\xe8\x97\x8f\xe5\xb1\x82\xe5\x9b\x9b\xef\xbc\x9a\xe5\xbe\xaa\xe7\x8e\xaf\xe5\xb1\x82\xe3\x80\x81LSTM\xe5\xb1\x82\n\t\t\xe9\x9a\x90\xe8\x97\x8f\xe5\xb1\x82\xe4\xba\x94\xef\xbc\x9aDropout\xe5\xb1\x82\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe6\x96\xad\xe5\xbc\x80\xe7\x9a\x84\xe7\xa5\x9e\xe7\xbb\x8f\xe5\x85\x83\xe7\x9a\x84\xe6\xaf\x94\xe4\xbe\x8b\xe4\xb8\xba0.2\xef\xbc\x8c\xe9\x98\xb2\xe6\xad\xa2\xe8\xbf\x87\xe6\x8b\x9f\xe5\x90\x88\n\t\t\xe9\x9a\x90\xe8\x97\x8f\xe5\xb1\x82\xe5\x85\xad\xef\xbc\x9a\xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\xef\xbc\x8c\xe7\xa5\x9e\xe7\xbb\x8f\xe5\x85\x83\xe6\x95\xb0\xe9\x87\x8f\xe4\xb8\xbaself.MS_OUTPUT_SIZE\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8softmax\xe4\xbd\x9c\xe4\xb8\xba\xe6\xbf\x80\xe6\xb4\xbb\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\n\t\t\xe8\xbe\x93\xe5\x87\xba\xe5\xb1\x82\xef\xbc\x9a\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe5\xb1\x82\xef\xbc\x8c\xe5\x8d\xb3CTC\xe5\xb1\x82\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8CTC\xe7\x9a\x84loss\xe4\xbd\x9c\xe4\xb8\xba\xe6\x8d\x9f\xe5\xa4\xb1\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\xae\x9e\xe7\x8e\xb0\xe8\xbf\x9e\xe6\x8e\xa5\xe6\x80\xa7\xe6\x97\xb6\xe5\xba\x8f\xe5\xa4\x9a\xe8\xbe\x93\xe5\x87\xba\n\t\t\n\t\t\'\'\'\n\t\t# \xe6\xaf\x8f\xe4\xb8\x80\xe5\xb8\xa7\xe4\xbd\xbf\xe7\x94\xa813\xe7\xbb\xb4mfcc\xe7\x89\xb9\xe5\xbe\x81\xe5\x8f\x8a\xe5\x85\xb613\xe7\xbb\xb4\xe4\xb8\x80\xe9\x98\xb6\xe5\xb7\xae\xe5\x88\x86\xe5\x92\x8c13\xe7\xbb\xb4\xe4\xba\x8c\xe9\x98\xb6\xe5\xb7\xae\xe5\x88\x86\xe8\xa1\xa8\xe7\xa4\xba\xef\xbc\x8c\xe6\x9c\x80\xe5\xa4\xa7\xe4\xbf\xa1\xe5\x8f\xb7\xe5\xba\x8f\xe5\x88\x97\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\xba1500\n\t\tinput_data = Input(name=\'the_input\', shape=(self.AUDIO_LENGTH, self.AUDIO_FEATURE_LENGTH, 1))\n\t\t\n\t\tlayer_h1 = Conv2D(32, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(input_data) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h1 = Dropout(0.1)(layer_h1)\n\t\tlayer_h2 = Conv2D(32, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h1) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h3 = MaxPooling2D(pool_size=2, strides=None, padding=""valid"")(layer_h2) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t#layer_h3 = Dropout(0.2)(layer_h2) # \xe9\x9a\x8f\xe6\x9c\xba\xe4\xb8\xad\xe6\x96\xad\xe9\x83\xa8\xe5\x88\x86\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe8\xbf\x9e\xe6\x8e\xa5\xef\xbc\x8c\xe9\x98\xb2\xe6\xad\xa2\xe8\xbf\x87\xe6\x8b\x9f\xe5\x90\x88\n\t\tlayer_h3 = Dropout(0.1)(layer_h3)\n\t\tlayer_h4 = Conv2D(64, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h3) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h4 = Dropout(0.2)(layer_h4)\n\t\tlayer_h5 = Conv2D(64, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h4) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h6 = MaxPooling2D(pool_size=2, strides=None, padding=""valid"")(layer_h5) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\tlayer_h6 = Dropout(0.2)(layer_h6)\n\t\tlayer_h7 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h6) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h7 = Dropout(0.3)(layer_h7)\n\t\tlayer_h8 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h7) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h9 = MaxPooling2D(pool_size=2, strides=None, padding=""valid"")(layer_h8) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\tlayer_h9 = Dropout(0.3)(layer_h9)\n\t\tlayer_h10 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h9) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h10 = Dropout(0.4)(layer_h10)\n\t\tlayer_h11 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h10) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h12 = MaxPooling2D(pool_size=1, strides=None, padding=""valid"")(layer_h11) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\tlayer_h12 = Dropout(0.4)(layer_h12)\n\t\tlayer_h13 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h12) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h13 = Dropout(0.5)(layer_h13)\n\t\tlayer_h14 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h13) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h15 = MaxPooling2D(pool_size=1, strides=None, padding=""valid"")(layer_h14) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\t#test=Model(inputs = input_data, outputs = layer_h12)\n\t\t#test.summary()\n\t\t\n\t\tlayer_h16 = Reshape((200, 3200))(layer_h15) #Reshape\xe5\xb1\x82\n\t\t#layer_h5 = LSTM(256, activation=\'relu\', use_bias=True, return_sequences=True)(layer_h4) # LSTM\xe5\xb1\x82\n\t\t#layer_h6 = Dropout(0.2)(layer_h5) # \xe9\x9a\x8f\xe6\x9c\xba\xe4\xb8\xad\xe6\x96\xad\xe9\x83\xa8\xe5\x88\x86\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe8\xbf\x9e\xe6\x8e\xa5\xef\xbc\x8c\xe9\x98\xb2\xe6\xad\xa2\xe8\xbf\x87\xe6\x8b\x9f\xe5\x90\x88\n\t\tlayer_h16 = Dropout(0.5)(layer_h16)\n\t\tlayer_h17 = Dense(128, activation=""relu"", use_bias=True, kernel_initializer=\'he_normal\')(layer_h16) # \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\t\n\t\tlayer_h17 = Dropout(0.5)(layer_h17)\n\t\tlayer_h18 = Dense(128, activation=""relu"", use_bias=True, kernel_initializer=\'he_normal\')(layer_h17) # \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\tlayer_h18 = Dropout(0.5)(layer_h18)\n\t\tlayer_h19 = Dense(128, activation=""relu"", use_bias=True, kernel_initializer=\'he_normal\')(layer_h18) # \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\t\n\t\tlayer_h19 = Dropout(0.5)(layer_h19)\n\t\tlayer_h20 = Dense(self.MS_OUTPUT_SIZE, use_bias=True, kernel_initializer=\'he_normal\')(layer_h19) # \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\t\n\t\ty_pred = Activation(\'softmax\', name=\'Activation0\')(layer_h20)\n\t\tmodel_data = Model(inputs = input_data, outputs = y_pred)\n\t\t#model_data.summary()\n\t\t\n\t\tlabels = Input(name=\'the_labels\', shape=[self.label_max_string_length], dtype=\'float32\')\n\t\tinput_length = Input(name=\'input_length\', shape=[1], dtype=\'int64\')\n\t\tlabel_length = Input(name=\'label_length\', shape=[1], dtype=\'int64\')\n\t\t# Keras doesn\'t currently support loss funcs with extra parameters\n\t\t# so CTC loss is implemented in a lambda layer\n\t\t\n\t\t#layer_out = Lambda(ctc_lambda_func,output_shape=(self.MS_OUTPUT_SIZE, ), name=\'ctc\')([y_pred, labels, input_length, label_length])#(layer_h6) # CTC\n\t\tloss_out = Lambda(self.ctc_lambda_func, output_shape=(1,), name=\'ctc\')([y_pred, labels, input_length, label_length])\n\t\t\n\t\t\n\t\t\n\t\tmodel = Model(inputs=[input_data, labels, input_length, label_length], outputs=loss_out)\n\t\t\n\t\tmodel.summary()\n\t\t\n\t\t# clipnorm seems to speeds up convergence\n\t\t#sgd = SGD(lr=0.0001, decay=1e-6, momentum=0.9, nesterov=True, clipnorm=5)\n\t\tada_d = Adadelta(lr = 0.01, rho = 0.95, epsilon = 1e-06)\n\t\t\n\t\t#model.compile(loss={\'ctc\': lambda y_true, y_pred: y_pred}, optimizer=sgd)\n\t\tmodel.compile(loss={\'ctc\': lambda y_true, y_pred: y_pred}, optimizer = ada_d)\n\t\t\n\t\t\n\t\t# captures output of softmax so we can decode the output during visualization\n\t\ttest_func = K.function([input_data], [y_pred])\n\t\t\n\t\tprint(\'[*\xe6\x8f\x90\xe7\xa4\xba] \xe5\x88\x9b\xe5\xbb\xba\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x88\x90\xe5\x8a\x9f\xef\xbc\x8c\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xbc\x96\xe8\xaf\x91\xe6\x88\x90\xe5\x8a\x9f\')\n\t\t#print(\'[*Info] Create Model Successful, Compiles Model Successful. \')\n\t\treturn model, model_data\n\t\t\n\tdef ctc_lambda_func(self, args):\n\t\ty_pred, labels, input_length, label_length = args\n\t\t\n\t\ty_pred = y_pred[:, :, :]\n\t\t#y_pred = y_pred[:, 2:, :]\n\t\treturn K.ctc_batch_cost(labels, y_pred, input_length, label_length)\n\t\n\t\n\t\n\tdef TrainModel(self, datapath, epoch = 2, save_step = 1000, batch_size = 32, filename = abspath + \'model_speech/m\'+ModelName+\'/speech_model\'+ModelName):\n\t\t\'\'\'\n\t\t\xe8\xae\xad\xe7\xbb\x83\xe6\xa8\xa1\xe5\x9e\x8b\n\t\t\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\n\t\t\tdatapath: \xe6\x95\xb0\xe6\x8d\xae\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe8\xb7\xaf\xe5\xbe\x84\n\t\t\tepoch: \xe8\xbf\xad\xe4\xbb\xa3\xe8\xbd\xae\xe6\x95\xb0\n\t\t\tsave_step: \xe6\xaf\x8f\xe5\xa4\x9a\xe5\xb0\x91\xe6\xad\xa5\xe4\xbf\x9d\xe5\xad\x98\xe4\xb8\x80\xe6\xac\xa1\xe6\xa8\xa1\xe5\x9e\x8b\n\t\t\tfilename: \xe9\xbb\x98\xe8\xae\xa4\xe4\xbf\x9d\xe5\xad\x98\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xef\xbc\x8c\xe4\xb8\x8d\xe5\x90\xab\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8e\xe7\xbc\x80\xe5\x90\x8d\n\t\t\'\'\'\n\t\tdata=DataSpeech(datapath, \'train\')\n\t\t\n\t\tnum_data = data.GetDataNum() # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\n\t\t\n\t\tyielddatas = data.data_genetator(batch_size, self.AUDIO_LENGTH)\n\t\t\n\t\tfor epoch in range(epoch): # \xe8\xbf\xad\xe4\xbb\xa3\xe8\xbd\xae\xe6\x95\xb0\n\t\t\tprint(\'[running] train epoch %d .\' % epoch)\n\t\t\tn_step = 0 # \xe8\xbf\xad\xe4\xbb\xa3\xe6\x95\xb0\xe6\x8d\xae\xe6\x95\xb0\n\t\t\twhile True:\n\t\t\t\ttry:\n\t\t\t\t\tprint(\'[message] epoch %d . Have train datas %d+\'%(epoch, n_step*save_step))\n\t\t\t\t\t# data_genetator\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe7\x94\x9f\xe6\x88\x90\xe5\x99\xa8\xe5\x87\xbd\xe6\x95\xb0\n\t\t\t\t\t\n\t\t\t\t\t#self._model.fit_generator(yielddatas, save_step, nb_worker=2)\n\t\t\t\t\tself._model.fit_generator(yielddatas, save_step)\n\t\t\t\t\tn_step += 1\n\t\t\t\texcept StopIteration:\n\t\t\t\t\tprint(\'[error] generator error. please check data format.\')\n\t\t\t\t\tbreak\n\t\t\t\t\n\t\t\t\tself.SaveModel(comment=\'_e_\'+str(epoch)+\'_step_\'+str(n_step * save_step))\n\t\t\t\tself.TestModel(self.datapath, str_dataset=\'train\', data_count = 4)\n\t\t\t\tself.TestModel(self.datapath, str_dataset=\'dev\', data_count = 4)\n\t\t\t\t\n\tdef LoadModel(self,filename = abspath + \'model_speech/m\'+ModelName+\'/speech_model\'+ModelName+\'.model\'):\n\t\t\'\'\'\n\t\t\xe5\x8a\xa0\xe8\xbd\xbd\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x8f\x82\xe6\x95\xb0\n\t\t\'\'\'\n\t\tself._model.load_weights(filename)\n\t\tself.base_model.load_weights(filename + \'.base\')\n\n\tdef SaveModel(self,filename = abspath + \'model_speech/m\'+ModelName+\'/speech_model\'+ModelName,comment=\'\'):\n\t\t\'\'\'\n\t\t\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x8f\x82\xe6\x95\xb0\n\t\t\'\'\'\n\t\tself._model.save_weights(filename+comment+\'.model\')\n\t\tself.base_model.save_weights(filename + comment + \'.model.base\')\n\t\tf = open(\'step\'+ModelName+\'.txt\',\'w\')\n\t\tf.write(filename+comment)\n\t\tf.close()\n\n\tdef TestModel(self, datapath=\'\', str_dataset=\'dev\', data_count = 32, out_report = False, show_ratio = True):\n\t\t\'\'\'\n\t\t\xe6\xb5\x8b\xe8\xaf\x95\xe6\xa3\x80\xe9\xaa\x8c\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x95\x88\xe6\x9e\x9c\n\t\t\'\'\'\n\t\tdata=DataSpeech(self.datapath, str_dataset)\n\t\t#data.LoadDataList(str_dataset) \n\t\tnum_data = data.GetDataNum() # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\n\t\tif(data_count <= 0 or data_count > num_data): # \xe5\xbd\x93data_count\xe4\xb8\xba\xe5\xb0\x8f\xe4\xba\x8e\xe7\xad\x89\xe4\xba\x8e0\xe6\x88\x96\xe8\x80\x85\xe5\xa4\xa7\xe4\xba\x8e\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xae\xe9\x87\x8f\xe7\x9a\x84\xe5\x80\xbc\xe6\x97\xb6\xef\xbc\x8c\xe5\x88\x99\xe4\xbd\xbf\xe7\x94\xa8\xe5\x85\xa8\xe9\x83\xa8\xe6\x95\xb0\xe6\x8d\xae\xe6\x9d\xa5\xe6\xb5\x8b\xe8\xaf\x95\n\t\t\tdata_count = num_data\n\t\t\n\t\ttry:\n\t\t\tran_num = random.randint(0,num_data - 1) # \xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\x80\xe4\xb8\xaa\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\n\t\t\t\n\t\t\twords_num = 0\n\t\t\tword_error_num = 0\n\t\t\t\n\t\t\tnowtime = time.strftime(\'%Y%m%d_%H%M%S\',time.localtime(time.time()))\n\t\t\tif(out_report == True):\n\t\t\t\ttxt_obj = open(\'Test_Report_\' + str_dataset + \'_\' + nowtime + \'.txt\', \'w\', encoding=\'UTF-8\') # \xe6\x89\x93\xe5\xbc\x80\xe6\x96\x87\xe4\xbb\xb6\xe5\xb9\xb6\xe8\xaf\xbb\xe5\x85\xa5\n\t\t\t\n\t\t\ttxt = \'\'\n\t\t\tfor i in range(data_count):\n\t\t\t\tdata_input, data_labels = data.GetData((ran_num + i) % num_data)  # \xe4\xbb\x8e\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xe5\xbc\x80\xe5\xa7\x8b\xe8\xbf\x9e\xe7\xbb\xad\xe5\x90\x91\xe5\x90\x8e\xe5\x8f\x96\xe4\xb8\x80\xe5\xae\x9a\xe6\x95\xb0\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\xae\n\t\t\t\t\n\t\t\t\t# \xe6\x95\xb0\xe6\x8d\xae\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x87\xba\xe9\x94\x99\xe5\xa4\x84\xe7\x90\x86 \xe5\xbc\x80\xe5\xa7\x8b\n\t\t\t\t# \xe5\xbd\x93\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84wav\xe6\x96\x87\xe4\xbb\xb6\xe9\x95\xbf\xe5\xba\xa6\xe8\xbf\x87\xe9\x95\xbf\xe6\x97\xb6\xe8\x87\xaa\xe5\x8a\xa8\xe8\xb7\xb3\xe8\xbf\x87\xe8\xaf\xa5\xe6\x96\x87\xe4\xbb\xb6\xef\xbc\x8c\xe8\xbd\xac\xe8\x80\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8b\xe4\xb8\x80\xe4\xb8\xaawav\xe6\x96\x87\xe4\xbb\xb6\xe6\x9d\xa5\xe8\xbf\x90\xe8\xa1\x8c\n\t\t\t\tnum_bias = 0\n\t\t\t\twhile(data_input.shape[0] > self.AUDIO_LENGTH):\n\t\t\t\t\tprint(\'*[Error]\',\'wave data lenghth of num\',(ran_num + i) % num_data, \'is too long.\',\'\\n A Exception raise when test Speech Model.\')\n\t\t\t\t\tnum_bias += 1\n\t\t\t\t\tdata_input, data_labels = data.GetData((ran_num + i + num_bias) % num_data)  # \xe4\xbb\x8e\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xe5\xbc\x80\xe5\xa7\x8b\xe8\xbf\x9e\xe7\xbb\xad\xe5\x90\x91\xe5\x90\x8e\xe5\x8f\x96\xe4\xb8\x80\xe5\xae\x9a\xe6\x95\xb0\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\xae\n\t\t\t\t# \xe6\x95\xb0\xe6\x8d\xae\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x87\xba\xe9\x94\x99\xe5\xa4\x84\xe7\x90\x86 \xe7\xbb\x93\xe6\x9d\x9f\n\t\t\t\t\n\t\t\t\tpre = self.Predict(data_input, data_input.shape[0] // 8)\n\t\t\t\t\n\t\t\t\twords_n = data_labels.shape[0] # \xe8\x8e\xb7\xe5\x8f\x96\xe6\xaf\x8f\xe4\xb8\xaa\xe5\x8f\xa5\xe5\xad\x90\xe7\x9a\x84\xe5\xad\x97\xe6\x95\xb0\n\t\t\t\twords_num += words_n # \xe6\x8a\x8a\xe5\x8f\xa5\xe5\xad\x90\xe7\x9a\x84\xe6\x80\xbb\xe5\xad\x97\xe6\x95\xb0\xe5\x8a\xa0\xe4\xb8\x8a\n\t\t\t\tedit_distance = GetEditDistance(data_labels, pre) # \xe8\x8e\xb7\xe5\x8f\x96\xe7\xbc\x96\xe8\xbe\x91\xe8\xb7\x9d\xe7\xa6\xbb\n\t\t\t\tif(edit_distance <= words_n): # \xe5\xbd\x93\xe7\xbc\x96\xe8\xbe\x91\xe8\xb7\x9d\xe7\xa6\xbb\xe5\xb0\x8f\xe4\xba\x8e\xe7\xad\x89\xe4\xba\x8e\xe5\x8f\xa5\xe5\xad\x90\xe5\xad\x97\xe6\x95\xb0\xe6\x97\xb6\n\t\t\t\t\tword_error_num += edit_distance # \xe4\xbd\xbf\xe7\x94\xa8\xe7\xbc\x96\xe8\xbe\x91\xe8\xb7\x9d\xe7\xa6\xbb\xe4\xbd\x9c\xe4\xb8\xba\xe9\x94\x99\xe8\xaf\xaf\xe5\xad\x97\xe6\x95\xb0\n\t\t\t\telse: # \xe5\x90\xa6\xe5\x88\x99\xe8\x82\xaf\xe5\xae\x9a\xe6\x98\xaf\xe5\xa2\x9e\xe5\x8a\xa0\xe4\xba\x86\xe4\xb8\x80\xe5\xa0\x86\xe4\xb9\xb1\xe4\xb8\x83\xe5\x85\xab\xe7\xb3\x9f\xe7\x9a\x84\xe5\xa5\x87\xe5\xa5\x87\xe6\x80\xaa\xe6\x80\xaa\xe7\x9a\x84\xe5\xad\x97\n\t\t\t\t\tword_error_num += words_n # \xe5\xb0\xb1\xe7\x9b\xb4\xe6\x8e\xa5\xe5\x8a\xa0\xe5\x8f\xa5\xe5\xad\x90\xe6\x9c\xac\xe6\x9d\xa5\xe7\x9a\x84\xe6\x80\xbb\xe5\xad\x97\xe6\x95\xb0\xe5\xb0\xb1\xe5\xa5\xbd\xe4\xba\x86\n\t\t\t\t\n\t\t\t\tif(i % 10 == 0 and show_ratio == True):\n\t\t\t\t\tprint(\'\xe6\xb5\x8b\xe8\xaf\x95\xe8\xbf\x9b\xe5\xba\xa6\xef\xbc\x9a\',i,\'/\',data_count)\n\t\t\t\t\n\t\t\t\ttxt = \'\'\n\t\t\t\tif(out_report == True):\n\t\t\t\t\ttxt += str(i) + \'\\n\'\n\t\t\t\t\ttxt += \'True:\\t\' + str(data_labels) + \'\\n\'\n\t\t\t\t\ttxt += \'Pred:\\t\' + str(pre) + \'\\n\'\n\t\t\t\t\ttxt += \'\\n\'\n\t\t\t\t\ttxt_obj.write(txt)\n\t\t\t\t\n\t\t\t\n\t\t\tprint(\'*[\xe6\xb5\x8b\xe8\xaf\x95\xe7\xbb\x93\xe6\x9e\x9c] \xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab \' + str_dataset + \' \xe9\x9b\x86\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\x95\xe5\xad\x97\xe9\x94\x99\xe8\xaf\xaf\xe7\x8e\x87\xef\xbc\x9a\', word_error_num / words_num * 100, \'%\')\n\t\t\t#print(\'*[Test Result] Speech Recognition \' + str_dataset + \' set word error ratio: \', word_error_num / words_num * 100, \'%\')\n\t\t\tif(out_report == True):\n\t\t\t\ttxt = \'*[\xe6\xb5\x8b\xe8\xaf\x95\xe7\xbb\x93\xe6\x9e\x9c] \xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab \' + str_dataset + \' \xe9\x9b\x86\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\x95\xe5\xad\x97\xe9\x94\x99\xe8\xaf\xaf\xe7\x8e\x87\xef\xbc\x9a \' + str(word_error_num / words_num * 100) + \' %\'\n\t\t\t\ttxt_obj.write(txt)\n\t\t\t\ttxt_obj.close()\n\t\t\t\n\t\texcept StopIteration:\n\t\t\tprint(\'[Error] Model Test Error. please check data format.\')\n\t\n\tdef Predict(self, data_input, input_len):\n\t\t\'\'\'\n\t\t\xe9\xa2\x84\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\n\t\t\xe8\xbf\x94\xe5\x9b\x9e\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe5\x90\x8e\xe7\x9a\x84\xe6\x8b\xbc\xe9\x9f\xb3\xe7\xac\xa6\xe5\x8f\xb7\xe5\x88\x97\xe8\xa1\xa8\n\t\t\'\'\'\n\t\t\n\t\tbatch_size = 1 \n\t\tin_len = np.zeros((batch_size),dtype = np.int32)\n\t\t\n\t\tin_len[0] = input_len\n\t\t\n\t\tx_in = np.zeros((batch_size, 1600, self.AUDIO_FEATURE_LENGTH, 1), dtype=np.float)\n\t\t\n\t\tfor i in range(batch_size):\n\t\t\tx_in[i,0:len(data_input)] = data_input\n\t\t\n\t\t\n\t\tbase_pred = self.base_model.predict(x = x_in)\n\t\t\n\t\t#print(\'base_pred:\\n\', base_pred)\n\t\t\n\t\t#y_p = base_pred\n\t\t#for j in range(200):\n\t\t#\tmean = np.sum(y_p[0][j]) / y_p[0][j].shape[0]\n\t\t#\tprint(\'max y_p:\',np.max(y_p[0][j]),\'min y_p:\',np.min(y_p[0][j]),\'mean y_p:\',mean,\'mid y_p:\',y_p[0][j][100])\n\t\t#\tprint(\'argmin:\',np.argmin(y_p[0][j]),\'argmax:\',np.argmax(y_p[0][j]))\n\t\t#\tcount=0\n\t\t#\tfor i in range(y_p[0][j].shape[0]):\n\t\t#\t\tif(y_p[0][j][i] < mean):\n\t\t#\t\t\tcount += 1\n\t\t#\tprint(\'count:\',count)\n\t\t\n\t\tbase_pred =base_pred[:, :, :]\n\t\t#base_pred =base_pred[:, 2:, :]\n\t\t\n\t\tr = K.ctc_decode(base_pred, in_len, greedy = True, beam_width=100, top_paths=1)\n\t\t\n\t\t#print(\'r\', r)\n\t\t\n\t\t\n\t\tr1 = K.get_value(r[0][0])\n\t\t#print(\'r1\', r1)\n\t\t\n\t\t\n\t\t#r2 = K.get_value(r[1])\n\t\t#print(r2)\n\t\t\n\t\tr1=r1[0]\n\t\t\n\t\treturn r1\n\t\tpass\n\t\n\tdef RecognizeSpeech(self, wavsignal, fs):\n\t\t\'\'\'\n\t\t\xe6\x9c\x80\xe7\xbb\x88\xe5\x81\x9a\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\x94\xa8\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe8\xaf\x86\xe5\x88\xab\xe4\xb8\x80\xe4\xb8\xaawav\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe8\xaf\xad\xe9\x9f\xb3\n\t\t\'\'\'\n\t\t\n\t\t#data = self.data\n\t\t#data = DataSpeech(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\')\n\t\t#data.LoadDataList(\'dev\')\n\t\t# \xe8\x8e\xb7\xe5\x8f\x96\xe8\xbe\x93\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\n\t\t#data_input = GetMfccFeature(wavsignal, fs)\n\t\t#t0=time.time()\n\t\tdata_input = GetFrequencyFeature3(wavsignal, fs)\n\t\t#t1=time.time()\n\t\t#print(\'time cost:\',t1-t0)\n\t\t\n\t\tinput_length = len(data_input)\n\t\tinput_length = input_length // 8\n\t\t\n\t\tdata_input = np.array(data_input, dtype = np.float)\n\t\t#print(data_input,data_input.shape)\n\t\tdata_input = data_input.reshape(data_input.shape[0],data_input.shape[1],1)\n\t\t#t2=time.time()\n\t\tr1 = self.Predict(data_input, input_length)\n\t\t#t3=time.time()\n\t\t#print(\'time cost:\',t3-t2)\n\t\tlist_symbol_dic = GetSymbolList(self.datapath) # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x8b\xbc\xe9\x9f\xb3\xe5\x88\x97\xe8\xa1\xa8\n\t\t\n\t\t\n\t\tr_str=[]\n\t\tfor i in r1:\n\t\t\tr_str.append(list_symbol_dic[i])\n\t\t\n\t\treturn r_str\n\t\tpass\n\t\t\n\tdef RecognizeSpeech_FromFile(self, filename):\n\t\t\'\'\'\n\t\t\xe6\x9c\x80\xe7\xbb\x88\xe5\x81\x9a\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\x94\xa8\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe8\xaf\x86\xe5\x88\xab\xe6\x8c\x87\xe5\xae\x9a\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\x9a\x84\xe8\xaf\xad\xe9\x9f\xb3\n\t\t\'\'\'\n\t\t\n\t\twavsignal,fs = read_wav_data(filename)\n\t\t\n\t\tr = self.RecognizeSpeech(wavsignal, fs)\n\t\t\n\t\treturn r\n\t\t\n\t\tpass\n\t\t\n\t\n\t\t\n\t@property\n\tdef model(self):\n\t\t\'\'\'\n\t\t\xe8\xbf\x94\xe5\x9b\x9ekeras model\n\t\t\'\'\'\n\t\treturn self._model\n\n\nif(__name__==\'__main__\'):\n\t\n\timport tensorflow as tf\n\tfrom keras.backend.tensorflow_backend import set_session\n\tos.environ[""CUDA_VISIBLE_DEVICES""] = ""1""\n\t#\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x85\x8d\xe7\xbd\xae\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa895%\xe7\x9a\x84GPU\n\tconfig = tf.ConfigProto()\n\tconfig.gpu_options.per_process_gpu_memory_fraction = 0.95\n\t#config.gpu_options.allow_growth=True   #\xe4\xb8\x8d\xe5\x85\xa8\xe9\x83\xa8\xe5\x8d\xa0\xe6\xbb\xa1\xe6\x98\xbe\xe5\xad\x98, \xe6\x8c\x89\xe9\x9c\x80\xe5\x88\x86\xe9\x85\x8d\n\tset_session(tf.Session(config=config))\n\t\n\t\n\tdatapath =  abspath + \'\'\n\tmodelpath =  abspath + \'model_speech\'\n\t\n\t\n\tif(not os.path.exists(modelpath)): # \xe5\x88\xa4\xe6\x96\xad\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe7\x9b\xae\xe5\xbd\x95\xe6\x98\xaf\xe5\x90\xa6\xe5\xad\x98\xe5\x9c\xa8\n\t\tos.makedirs(modelpath) # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x8c\xe5\xb0\xb1\xe6\x96\xb0\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\xaa\xef\xbc\x8c\xe9\x81\xbf\xe5\x85\x8d\xe4\xb9\x8b\xe5\x90\x8e\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe7\x82\xb8\xe6\x8e\x89\n\t\n\tsystem_type = plat.system() # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa4\xe6\x96\xad\n\tif(system_type == \'Windows\'):\n\t\tdatapath = \'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\'\n\t\tmodelpath = modelpath + \'\\\\\'\n\telif(system_type == \'Linux\'):\n\t\tdatapath =  abspath + \'dataset\'\n\t\tmodelpath = modelpath + \'/\'\n\telse:\n\t\tprint(\'*[Message] Unknown System\\n\')\n\t\tdatapath = \'dataset\'\n\t\tmodelpath = modelpath + \'/\'\n\t\n\tms = ModelSpeech(datapath)\n\t\n\t\n\t#ms.LoadModel(modelpath + \'m252\\\\speech_model252_e_0_step_115500.model\')\n\tms.TrainModel(datapath, epoch = 50, batch_size = 4, save_step = 500)\n\t#ms.TestModel(datapath, str_dataset=\'dev\', data_count = 128, out_report = True)\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\ST-CMDS-20170001_1-OS\\\\20170001P00241I0053.wav\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\ST-CMDS-20170001_1-OS\\\\20170001P00020I0087.wav\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\wav\\\\train\\\\A11\\\\A11_167.WAV\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\wav\\\\test\\\\D4\\\\D4_750.wav\')\n\t#print(\'*[\xe6\x8f\x90\xe7\xa4\xba] \xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x9a\\n\',r)\n'"
SpeechModel26.py,4,"b'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n""""""\n@author: nl8590687\n""""""\nimport platform as plat\nimport os\nimport time\n\nfrom general_function.file_wav import *\nfrom general_function.file_dict import *\nfrom general_function.gen_func import *\n\n# LSTM_CNN\nimport keras as kr\nimport numpy as np\nimport random\n\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dense, Dropout, Input, Reshape,GRU # , Flatten,LSTM,Convolution1D,MaxPooling1D,Merge\nfrom keras.layers import Conv1D,LSTM,MaxPooling1D, Lambda, TimeDistributed, Activation,Conv2D, MaxPooling2D #, Merge,Conv1D\nfrom keras.layers.merge import add, concatenate\nfrom keras import backend as K\nfrom keras.optimizers import SGD, Adadelta\n\nfrom readdata24 import DataSpeech\n\nclass ModelSpeech(): # \xe8\xaf\xad\xe9\x9f\xb3\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xb1\xbb\n\tdef __init__(self, datapath):\n\t\t\'\'\'\n\t\t\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n\t\t\xe9\xbb\x98\xe8\xae\xa4\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe6\x8b\xbc\xe9\x9f\xb3\xe7\x9a\x84\xe8\xa1\xa8\xe7\xa4\xba\xe5\xa4\xa7\xe5\xb0\x8f\xe6\x98\xaf1424\xef\xbc\x8c\xe5\x8d\xb31423\xe4\xb8\xaa\xe6\x8b\xbc\xe9\x9f\xb3+1\xe4\xb8\xaa\xe7\xa9\xba\xe7\x99\xbd\xe5\x9d\x97\n\t\t\'\'\'\n\t\tMS_OUTPUT_SIZE = 1424\n\t\tself.MS_OUTPUT_SIZE = MS_OUTPUT_SIZE # \xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe6\x9c\x80\xe7\xbb\x88\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe5\x90\x91\xe9\x87\x8f\xe7\xbb\xb4\xe5\xba\xa6\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\n\t\t#self.BATCH_SIZE = BATCH_SIZE # \xe4\xb8\x80\xe6\xac\xa1\xe8\xae\xad\xe7\xbb\x83\xe7\x9a\x84batch\n\t\tself.label_max_string_length = 64\n\t\tself.AUDIO_LENGTH = 1600\n\t\tself.AUDIO_FEATURE_LENGTH = 200\n\t\tself._model, self.base_model = self.CreateModel() \n\t\t\n\t\tself.datapath = datapath\n\t\tself.slash = \'\'\n\t\tsystem_type = plat.system() # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa4\xe6\x96\xad\n\t\tif(system_type == \'Windows\'):\n\t\t\tself.slash=\'\\\\\' # \xe5\x8f\x8d\xe6\x96\x9c\xe6\x9d\xa0\n\t\telif(system_type == \'Linux\'):\n\t\t\tself.slash=\'/\' # \xe6\xad\xa3\xe6\x96\x9c\xe6\x9d\xa0\n\t\telse:\n\t\t\tprint(\'*[Message] Unknown System\\n\')\n\t\t\tself.slash=\'/\' # \xe6\xad\xa3\xe6\x96\x9c\xe6\x9d\xa0\n\t\tif(self.slash != self.datapath[-1]): # \xe5\x9c\xa8\xe7\x9b\xae\xe5\xbd\x95\xe8\xb7\xaf\xe5\xbe\x84\xe6\x9c\xab\xe5\xb0\xbe\xe5\xa2\x9e\xe5\x8a\xa0\xe6\x96\x9c\xe6\x9d\xa0\n\t\t\tself.datapath = self.datapath + self.slash\n\t\n\t\t\n\tdef CreateModel(self):\n\t\t\'\'\'\n\t\t\xe5\xae\x9a\xe4\xb9\x89CNN/LSTM/CTC\xe6\xa8\xa1\xe5\x9e\x8b\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\x87\xbd\xe6\x95\xb0\xe5\xbc\x8f\xe6\xa8\xa1\xe5\x9e\x8b\n\t\t\xe8\xbe\x93\xe5\x85\xa5\xe5\xb1\x82\xef\xbc\x9a200\xe7\xbb\xb4\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\x80\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe4\xb8\x80\xe6\x9d\xa1\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\xa7\xe9\x95\xbf\xe5\xba\xa6\xe8\xae\xbe\xe4\xb8\xba1600\xef\xbc\x88\xe5\xa4\xa7\xe7\xba\xa616s\xef\xbc\x89\n\t\t\xe9\x9a\x90\xe8\x97\x8f\xe5\xb1\x82\xe4\xb8\x80\xef\xbc\x9a3*3\xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\t\xe9\x9a\x90\xe8\x97\x8f\xe5\xb1\x82\xe4\xba\x8c\xef\xbc\x9a\xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\xef\xbc\x8c\xe6\xb1\xa0\xe5\x8c\x96\xe7\xaa\x97\xe5\x8f\xa3\xe5\xa4\xa7\xe5\xb0\x8f\xe4\xb8\xba2\n\t\t\xe9\x9a\x90\xe8\x97\x8f\xe5\xb1\x82\xe4\xb8\x89\xef\xbc\x9aDropout\xe5\xb1\x82\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe6\x96\xad\xe5\xbc\x80\xe7\x9a\x84\xe7\xa5\x9e\xe7\xbb\x8f\xe5\x85\x83\xe7\x9a\x84\xe6\xaf\x94\xe4\xbe\x8b\xe4\xb8\xba0.2\xef\xbc\x8c\xe9\x98\xb2\xe6\xad\xa2\xe8\xbf\x87\xe6\x8b\x9f\xe5\x90\x88\n\t\t\xe9\x9a\x90\xe8\x97\x8f\xe5\xb1\x82\xe5\x9b\x9b\xef\xbc\x9a\xe5\xbe\xaa\xe7\x8e\xaf\xe5\xb1\x82\xe3\x80\x81LSTM/GRU\xe5\xb1\x82\n\t\t\xe9\x9a\x90\xe8\x97\x8f\xe5\xb1\x82\xe4\xba\x94\xef\xbc\x9aDropout\xe5\xb1\x82\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe6\x96\xad\xe5\xbc\x80\xe7\x9a\x84\xe7\xa5\x9e\xe7\xbb\x8f\xe5\x85\x83\xe7\x9a\x84\xe6\xaf\x94\xe4\xbe\x8b\xe4\xb8\xba0.2\xef\xbc\x8c\xe9\x98\xb2\xe6\xad\xa2\xe8\xbf\x87\xe6\x8b\x9f\xe5\x90\x88\n\t\t\xe9\x9a\x90\xe8\x97\x8f\xe5\xb1\x82\xe5\x85\xad\xef\xbc\x9a\xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\xef\xbc\x8c\xe7\xa5\x9e\xe7\xbb\x8f\xe5\x85\x83\xe6\x95\xb0\xe9\x87\x8f\xe4\xb8\xbaself.MS_OUTPUT_SIZE\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8softmax\xe4\xbd\x9c\xe4\xb8\xba\xe6\xbf\x80\xe6\xb4\xbb\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\n\t\t\xe8\xbe\x93\xe5\x87\xba\xe5\xb1\x82\xef\xbc\x9a\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe5\xb1\x82\xef\xbc\x8c\xe5\x8d\xb3CTC\xe5\xb1\x82\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8CTC\xe7\x9a\x84loss\xe4\xbd\x9c\xe4\xb8\xba\xe6\x8d\x9f\xe5\xa4\xb1\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\xae\x9e\xe7\x8e\xb0\xe8\xbf\x9e\xe6\x8e\xa5\xe6\x80\xa7\xe6\x97\xb6\xe5\xba\x8f\xe5\xa4\x9a\xe8\xbe\x93\xe5\x87\xba\n\t\t\n\t\t\'\'\'\n\t\t# \xe6\xaf\x8f\xe4\xb8\x80\xe5\xb8\xa7\xe4\xbd\xbf\xe7\x94\xa813\xe7\xbb\xb4mfcc\xe7\x89\xb9\xe5\xbe\x81\xe5\x8f\x8a\xe5\x85\xb613\xe7\xbb\xb4\xe4\xb8\x80\xe9\x98\xb6\xe5\xb7\xae\xe5\x88\x86\xe5\x92\x8c13\xe7\xbb\xb4\xe4\xba\x8c\xe9\x98\xb6\xe5\xb7\xae\xe5\x88\x86\xe8\xa1\xa8\xe7\xa4\xba\xef\xbc\x8c\xe6\x9c\x80\xe5\xa4\xa7\xe4\xbf\xa1\xe5\x8f\xb7\xe5\xba\x8f\xe5\x88\x97\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\xba1500\n\t\tinput_data = Input(name=\'the_input\', shape=(self.AUDIO_LENGTH, self.AUDIO_FEATURE_LENGTH, 1))\n\t\t\n\t\tlayer_h1 = Conv2D(32, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(input_data) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h1 = Dropout(0.1)(layer_h1)\n\t\tlayer_h2 = Conv2D(32, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h1) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h3 = MaxPooling2D(pool_size=2, strides=None, padding=""valid"")(layer_h2) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t#layer_h3 = Dropout(0.2)(layer_h2) # \xe9\x9a\x8f\xe6\x9c\xba\xe4\xb8\xad\xe6\x96\xad\xe9\x83\xa8\xe5\x88\x86\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe8\xbf\x9e\xe6\x8e\xa5\xef\xbc\x8c\xe9\x98\xb2\xe6\xad\xa2\xe8\xbf\x87\xe6\x8b\x9f\xe5\x90\x88\n\t\tlayer_h3 = Dropout(0.2)(layer_h3)\n\t\tlayer_h4 = Conv2D(64, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h3) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h4 = Dropout(0.2)(layer_h4)\n\t\tlayer_h5 = Conv2D(64, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h4) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h6 = MaxPooling2D(pool_size=2, strides=None, padding=""valid"")(layer_h5) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\tlayer_h6 = Dropout(0.3)(layer_h6)\n\t\tlayer_h7 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h6) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h7 = Dropout(0.3)(layer_h7)\n\t\tlayer_h8 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h7) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h9 = MaxPooling2D(pool_size=2, strides=None, padding=""valid"")(layer_h8) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\tlayer_h9 = Dropout(0.3)(layer_h9)\n\t\tlayer_h10 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h9) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h10 = Dropout(0.4)(layer_h10)\n\t\tlayer_h11 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h10) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h12 = MaxPooling2D(pool_size=1, strides=None, padding=""valid"")(layer_h11) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\t#test=Model(inputs = input_data, outputs = layer_h6)\n\t\t#test.summary()\n\t\t\n\t\tlayer_h13 = Reshape((200, 3200))(layer_h12) #Reshape\xe5\xb1\x82\n\t\t\n\t\tlayer_h13 = Dropout(0.4)(layer_h13)\n\t\tlayer_h14 = Dense(128, activation=""relu"", use_bias=True, kernel_initializer=\'he_normal\')(layer_h13) # \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\tlayer_h14 = Dropout(0.4)(layer_h14)\n\t\tinner = layer_h14\n\t\t#layer_h5 = LSTM(256, activation=\'relu\', use_bias=True, return_sequences=True)(layer_h4) # LSTM\xe5\xb1\x82\n\t\t\n\t\trnn_size=128\n\t\tgru_1 = GRU(rnn_size, return_sequences=True, kernel_initializer=\'he_normal\', name=\'gru1\')(inner)\n\t\tgru_1b = GRU(rnn_size, return_sequences=True, go_backwards=True, kernel_initializer=\'he_normal\', name=\'gru1_b\')(inner)\n\t\tgru1_merged = add([gru_1, gru_1b])\n\t\tgru_2 = GRU(rnn_size, return_sequences=True, kernel_initializer=\'he_normal\', name=\'gru2\')(gru1_merged)\n\t\tgru_2b = GRU(rnn_size, return_sequences=True, go_backwards=True, kernel_initializer=\'he_normal\', name=\'gru2_b\')(gru1_merged)\n\t\t\n\t\tgru2 = concatenate([gru_2, gru_2b])\n\t\t#layer_h12 = GRU(128,activation=\'tanh\', recurrent_activation=\'hard_sigmoid\', use_bias=True, kernel_initializer=\'he_normal\', recurrent_initializer=\'orthogonal\', bias_initializer=\'zeros\', return_sequences=True)(layer_h11)\n\t\t\n\t\tlayer_h15 = Dropout(0.4)(gru2)\n\t\tlayer_h16 = Dense(128, activation=""relu"", use_bias=True, kernel_initializer=\'he_normal\')(layer_h15) # \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\t\n\t\tlayer_h16 = Dropout(0.5)(layer_h16) # \xe9\x9a\x8f\xe6\x9c\xba\xe4\xb8\xad\xe6\x96\xad\xe9\x83\xa8\xe5\x88\x86\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe8\xbf\x9e\xe6\x8e\xa5\xef\xbc\x8c\xe9\x98\xb2\xe6\xad\xa2\xe8\xbf\x87\xe6\x8b\x9f\xe5\x90\x88\n\t\tlayer_h17 = Dense(self.MS_OUTPUT_SIZE, use_bias=True, kernel_initializer=\'he_normal\')(layer_h16) # \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\t\n\t\ty_pred = Activation(\'softmax\', name=\'Activation0\')(layer_h17)\n\t\tmodel_data = Model(inputs = input_data, outputs = y_pred)\n\t\t#model_data.summary()\n\t\t\n\t\tlabels = Input(name=\'the_labels\', shape=[self.label_max_string_length], dtype=\'float32\')\n\t\tinput_length = Input(name=\'input_length\', shape=[1], dtype=\'int64\')\n\t\tlabel_length = Input(name=\'label_length\', shape=[1], dtype=\'int64\')\n\t\t# Keras doesn\'t currently support loss funcs with extra parameters\n\t\t# so CTC loss is implemented in a lambda layer\n\t\t\n\t\t#layer_out = Lambda(ctc_lambda_func,output_shape=(self.MS_OUTPUT_SIZE, ), name=\'ctc\')([y_pred, labels, input_length, label_length])#(layer_h6) # CTC\n\t\tloss_out = Lambda(self.ctc_lambda_func, output_shape=(1,), name=\'ctc\')([y_pred, labels, input_length, label_length])\n\t\t\n\t\t\n\t\t\n\t\tmodel = Model(inputs=[input_data, labels, input_length, label_length], outputs=loss_out)\n\t\t\n\t\tmodel.summary()\n\t\t\n\t\t# clipnorm seems to speeds up convergence\n\t\t#sgd = SGD(lr=0.0001, decay=1e-6, momentum=0.9, nesterov=True, clipnorm=5)\n\t\tada_d = Adadelta(lr = 0.01, rho = 0.95, epsilon = 1e-06)\n\t\t\n\t\t#model.compile(loss={\'ctc\': lambda y_true, y_pred: y_pred}, optimizer=sgd)\n\t\tmodel.compile(loss={\'ctc\': lambda y_true, y_pred: y_pred}, optimizer = ada_d)\n\t\t\n\t\t\n\t\t# captures output of softmax so we can decode the output during visualization\n\t\ttest_func = K.function([input_data], [y_pred])\n\t\t\n\t\tprint(\'[*\xe6\x8f\x90\xe7\xa4\xba] \xe5\x88\x9b\xe5\xbb\xba\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x88\x90\xe5\x8a\x9f\xef\xbc\x8c\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xbc\x96\xe8\xaf\x91\xe6\x88\x90\xe5\x8a\x9f\')\n\t\treturn model, model_data\n\t\t\n\tdef ctc_lambda_func(self, args):\n\t\ty_pred, labels, input_length, label_length = args\n\t\t\n\t\ty_pred = y_pred[:, :, :]\n\t\t#y_pred = y_pred[:, 2:, :]\n\t\treturn K.ctc_batch_cost(labels, y_pred, input_length, label_length)\n\t\n\t\n\t\n\tdef TrainModel(self, datapath, epoch = 2, save_step = 1000, batch_size = 32, filename = \'model_speech/m26/speech_model26\'):\n\t\t\'\'\'\n\t\t\xe8\xae\xad\xe7\xbb\x83\xe6\xa8\xa1\xe5\x9e\x8b\n\t\t\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\n\t\t\tdatapath: \xe6\x95\xb0\xe6\x8d\xae\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe8\xb7\xaf\xe5\xbe\x84\n\t\t\tepoch: \xe8\xbf\xad\xe4\xbb\xa3\xe8\xbd\xae\xe6\x95\xb0\n\t\t\tsave_step: \xe6\xaf\x8f\xe5\xa4\x9a\xe5\xb0\x91\xe6\xad\xa5\xe4\xbf\x9d\xe5\xad\x98\xe4\xb8\x80\xe6\xac\xa1\xe6\xa8\xa1\xe5\x9e\x8b\n\t\t\tfilename: \xe9\xbb\x98\xe8\xae\xa4\xe4\xbf\x9d\xe5\xad\x98\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xef\xbc\x8c\xe4\xb8\x8d\xe5\x90\xab\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8e\xe7\xbc\x80\xe5\x90\x8d\n\t\t\'\'\'\n\t\tdata=DataSpeech(datapath, \'train\')\n\t\t\n\t\tnum_data = data.GetDataNum() # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\n\t\t\n\t\tyielddatas = data.data_genetator(batch_size, self.AUDIO_LENGTH)\n\t\t\n\t\tfor epoch in range(epoch): # \xe8\xbf\xad\xe4\xbb\xa3\xe8\xbd\xae\xe6\x95\xb0\n\t\t\tprint(\'[running] train epoch %d .\' % epoch)\n\t\t\tn_step = 0 # \xe8\xbf\xad\xe4\xbb\xa3\xe6\x95\xb0\xe6\x8d\xae\xe6\x95\xb0\n\t\t\twhile True:\n\t\t\t\ttry:\n\t\t\t\t\tprint(\'[message] epoch %d . Have train datas %d+\'%(epoch, n_step*save_step))\n\t\t\t\t\t# data_genetator\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe7\x94\x9f\xe6\x88\x90\xe5\x99\xa8\xe5\x87\xbd\xe6\x95\xb0\n\t\t\t\t\t\n\t\t\t\t\t#self._model.fit_generator(yielddatas, save_step, nb_worker=2)\n\t\t\t\t\tself._model.fit_generator(yielddatas, save_step)\n\t\t\t\t\tn_step += 1\n\t\t\t\texcept StopIteration:\n\t\t\t\t\tprint(\'[error] generator error. please check data format.\')\n\t\t\t\t\tbreak\n\t\t\t\t\n\t\t\t\tself.SaveModel(comment=\'_e_\'+str(epoch)+\'_step_\'+str(n_step * save_step))\n\t\t\t\tself.TestModel(self.datapath, str_dataset=\'train\', data_count = 4)\n\t\t\t\tself.TestModel(self.datapath, str_dataset=\'dev\', data_count = 4)\n\t\t\t\t\n\tdef LoadModel(self,filename=\'model_speech/m26/speech_model26.model\'):\n\t\t\'\'\'\n\t\t\xe5\x8a\xa0\xe8\xbd\xbd\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x8f\x82\xe6\x95\xb0\n\t\t\'\'\'\n\t\tself._model.load_weights(filename)\n\t\tself.base_model.load_weights(filename + \'.base\')\n\n\tdef SaveModel(self,filename=\'model_speech/m26/speech_model26\',comment=\'\'):\n\t\t\'\'\'\n\t\t\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x8f\x82\xe6\x95\xb0\n\t\t\'\'\'\n\t\tself._model.save_weights(filename+comment+\'.model\')\n\t\tself.base_model.save_weights(filename + comment + \'.model.base\')\n\t\tf = open(\'step26.txt\',\'w\')\n\t\tf.write(filename+comment)\n\t\tf.close()\n\n\tdef TestModel(self, datapath=\'\', str_dataset=\'dev\', data_count = 32, out_report = False, show_ratio = True):\n\t\t\'\'\'\n\t\t\xe6\xb5\x8b\xe8\xaf\x95\xe6\xa3\x80\xe9\xaa\x8c\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x95\x88\xe6\x9e\x9c\n\t\t\'\'\'\n\t\tdata=DataSpeech(self.datapath, str_dataset)\n\t\t#data.LoadDataList(str_dataset) \n\t\tnum_data = data.GetDataNum() # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\n\t\tif(data_count <= 0 or data_count > num_data): # \xe5\xbd\x93data_count\xe4\xb8\xba\xe5\xb0\x8f\xe4\xba\x8e\xe7\xad\x89\xe4\xba\x8e0\xe6\x88\x96\xe8\x80\x85\xe5\xa4\xa7\xe4\xba\x8e\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xae\xe9\x87\x8f\xe7\x9a\x84\xe5\x80\xbc\xe6\x97\xb6\xef\xbc\x8c\xe5\x88\x99\xe4\xbd\xbf\xe7\x94\xa8\xe5\x85\xa8\xe9\x83\xa8\xe6\x95\xb0\xe6\x8d\xae\xe6\x9d\xa5\xe6\xb5\x8b\xe8\xaf\x95\n\t\t\tdata_count = num_data\n\t\t\n\t\ttry:\n\t\t\tran_num = random.randint(0,num_data - 1) # \xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\x80\xe4\xb8\xaa\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\n\t\t\t\n\t\t\twords_num = 0\n\t\t\tword_error_num = 0\n\t\t\t\n\t\t\tnowtime = time.strftime(\'%Y%m%d_%H%M%S\',time.localtime(time.time()))\n\t\t\tif(out_report == True):\n\t\t\t\ttxt_obj = open(\'Test_Report_\' + str_dataset + \'_\' + nowtime + \'.txt\', \'w\', encoding=\'UTF-8\') # \xe6\x89\x93\xe5\xbc\x80\xe6\x96\x87\xe4\xbb\xb6\xe5\xb9\xb6\xe8\xaf\xbb\xe5\x85\xa5\n\t\t\t\n\t\t\ttxt = \'\'\n\t\t\tfor i in range(data_count):\n\t\t\t\tdata_input, data_labels = data.GetData((ran_num + i) % num_data)  # \xe4\xbb\x8e\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xe5\xbc\x80\xe5\xa7\x8b\xe8\xbf\x9e\xe7\xbb\xad\xe5\x90\x91\xe5\x90\x8e\xe5\x8f\x96\xe4\xb8\x80\xe5\xae\x9a\xe6\x95\xb0\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\xae\n\t\t\t\t\n\t\t\t\t# \xe6\x95\xb0\xe6\x8d\xae\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x87\xba\xe9\x94\x99\xe5\xa4\x84\xe7\x90\x86 \xe5\xbc\x80\xe5\xa7\x8b\n\t\t\t\t# \xe5\xbd\x93\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84wav\xe6\x96\x87\xe4\xbb\xb6\xe9\x95\xbf\xe5\xba\xa6\xe8\xbf\x87\xe9\x95\xbf\xe6\x97\xb6\xe8\x87\xaa\xe5\x8a\xa8\xe8\xb7\xb3\xe8\xbf\x87\xe8\xaf\xa5\xe6\x96\x87\xe4\xbb\xb6\xef\xbc\x8c\xe8\xbd\xac\xe8\x80\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8b\xe4\xb8\x80\xe4\xb8\xaawav\xe6\x96\x87\xe4\xbb\xb6\xe6\x9d\xa5\xe8\xbf\x90\xe8\xa1\x8c\n\t\t\t\tnum_bias = 0\n\t\t\t\twhile(data_input.shape[0] > self.AUDIO_LENGTH):\n\t\t\t\t\tprint(\'*[Error]\',\'wave data lenghth of num\',(ran_num + i) % num_data, \'is too long.\',\'\\n A Exception raise when test Speech Model.\')\n\t\t\t\t\tnum_bias += 1\n\t\t\t\t\tdata_input, data_labels = data.GetData((ran_num + i + num_bias) % num_data)  # \xe4\xbb\x8e\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xe5\xbc\x80\xe5\xa7\x8b\xe8\xbf\x9e\xe7\xbb\xad\xe5\x90\x91\xe5\x90\x8e\xe5\x8f\x96\xe4\xb8\x80\xe5\xae\x9a\xe6\x95\xb0\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\xae\n\t\t\t\t# \xe6\x95\xb0\xe6\x8d\xae\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x87\xba\xe9\x94\x99\xe5\xa4\x84\xe7\x90\x86 \xe7\xbb\x93\xe6\x9d\x9f\n\t\t\t\t\n\t\t\t\tpre = self.Predict(data_input, data_input.shape[0] // 8)\n\t\t\t\t\n\t\t\t\twords_n = data_labels.shape[0] # \xe8\x8e\xb7\xe5\x8f\x96\xe6\xaf\x8f\xe4\xb8\xaa\xe5\x8f\xa5\xe5\xad\x90\xe7\x9a\x84\xe5\xad\x97\xe6\x95\xb0\n\t\t\t\twords_num += words_n # \xe6\x8a\x8a\xe5\x8f\xa5\xe5\xad\x90\xe7\x9a\x84\xe6\x80\xbb\xe5\xad\x97\xe6\x95\xb0\xe5\x8a\xa0\xe4\xb8\x8a\n\t\t\t\tedit_distance = GetEditDistance(data_labels, pre) # \xe8\x8e\xb7\xe5\x8f\x96\xe7\xbc\x96\xe8\xbe\x91\xe8\xb7\x9d\xe7\xa6\xbb\n\t\t\t\tif(edit_distance <= words_n): # \xe5\xbd\x93\xe7\xbc\x96\xe8\xbe\x91\xe8\xb7\x9d\xe7\xa6\xbb\xe5\xb0\x8f\xe4\xba\x8e\xe7\xad\x89\xe4\xba\x8e\xe5\x8f\xa5\xe5\xad\x90\xe5\xad\x97\xe6\x95\xb0\xe6\x97\xb6\n\t\t\t\t\tword_error_num += edit_distance # \xe4\xbd\xbf\xe7\x94\xa8\xe7\xbc\x96\xe8\xbe\x91\xe8\xb7\x9d\xe7\xa6\xbb\xe4\xbd\x9c\xe4\xb8\xba\xe9\x94\x99\xe8\xaf\xaf\xe5\xad\x97\xe6\x95\xb0\n\t\t\t\telse: # \xe5\x90\xa6\xe5\x88\x99\xe8\x82\xaf\xe5\xae\x9a\xe6\x98\xaf\xe5\xa2\x9e\xe5\x8a\xa0\xe4\xba\x86\xe4\xb8\x80\xe5\xa0\x86\xe4\xb9\xb1\xe4\xb8\x83\xe5\x85\xab\xe7\xb3\x9f\xe7\x9a\x84\xe5\xa5\x87\xe5\xa5\x87\xe6\x80\xaa\xe6\x80\xaa\xe7\x9a\x84\xe5\xad\x97\n\t\t\t\t\tword_error_num += words_n # \xe5\xb0\xb1\xe7\x9b\xb4\xe6\x8e\xa5\xe5\x8a\xa0\xe5\x8f\xa5\xe5\xad\x90\xe6\x9c\xac\xe6\x9d\xa5\xe7\x9a\x84\xe6\x80\xbb\xe5\xad\x97\xe6\x95\xb0\xe5\xb0\xb1\xe5\xa5\xbd\xe4\xba\x86\n\t\t\t\t\n\t\t\t\tif(i % 10 == 0 and show_ratio == True):\n\t\t\t\t\tprint(\'\xe6\xb5\x8b\xe8\xaf\x95\xe8\xbf\x9b\xe5\xba\xa6\xef\xbc\x9a\',i,\'/\',data_count)\n\t\t\t\t\n\t\t\t\ttxt = \'\'\n\t\t\t\tif(out_report == True):\n\t\t\t\t\ttxt += str(i) + \'\\n\'\n\t\t\t\t\ttxt += \'True:\\t\' + str(data_labels) + \'\\n\'\n\t\t\t\t\ttxt += \'Pred:\\t\' + str(pre) + \'\\n\'\n\t\t\t\t\ttxt += \'\\n\'\n\t\t\t\t\ttxt_obj.write(txt)\n\t\t\t\t\n\t\t\t\n\t\t\tprint(\'*[\xe6\xb5\x8b\xe8\xaf\x95\xe7\xbb\x93\xe6\x9e\x9c] \xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab \' + str_dataset + \' \xe9\x9b\x86\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\x95\xe5\xad\x97\xe9\x94\x99\xe8\xaf\xaf\xe7\x8e\x87\xef\xbc\x9a\', word_error_num / words_num * 100, \'%\')\n\t\t\tif(out_report == True):\n\t\t\t\ttxt = \'*[\xe6\xb5\x8b\xe8\xaf\x95\xe7\xbb\x93\xe6\x9e\x9c] \xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab \' + str_dataset + \' \xe9\x9b\x86\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\x95\xe5\xad\x97\xe9\x94\x99\xe8\xaf\xaf\xe7\x8e\x87\xef\xbc\x9a \' + str(word_error_num / words_num * 100) + \' %\'\n\t\t\t\ttxt_obj.write(txt)\n\t\t\t\ttxt_obj.close()\n\t\t\t\n\t\texcept StopIteration:\n\t\t\tprint(\'[Error] Model Test Error. please check data format.\')\n\t\n\tdef Predict(self, data_input, input_len):\n\t\t\'\'\'\n\t\t\xe9\xa2\x84\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\n\t\t\xe8\xbf\x94\xe5\x9b\x9e\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe5\x90\x8e\xe7\x9a\x84\xe6\x8b\xbc\xe9\x9f\xb3\xe7\xac\xa6\xe5\x8f\xb7\xe5\x88\x97\xe8\xa1\xa8\n\t\t\'\'\'\n\t\t\n\t\tbatch_size = 1 \n\t\tin_len = np.zeros((batch_size),dtype = np.int32)\n\t\t\n\t\tin_len[0] = input_len\n\t\t\n\t\tx_in = np.zeros((batch_size, 1600, self.AUDIO_FEATURE_LENGTH, 1), dtype=np.float)\n\t\t\n\t\tfor i in range(batch_size):\n\t\t\tx_in[i,0:len(data_input)] = data_input\n\t\t\n\t\t\n\t\tbase_pred = self.base_model.predict(x = x_in)\n\t\t\n\t\t#print(\'base_pred:\\n\', base_pred)\n\t\t\n\t\t#y_p = base_pred\n\t\t#for j in range(200):\n\t\t#\tmean = np.sum(y_p[0][j]) / y_p[0][j].shape[0]\n\t\t#\tprint(\'max y_p:\',np.max(y_p[0][j]),\'min y_p:\',np.min(y_p[0][j]),\'mean y_p:\',mean,\'mid y_p:\',y_p[0][j][100])\n\t\t#\tprint(\'argmin:\',np.argmin(y_p[0][j]),\'argmax:\',np.argmax(y_p[0][j]))\n\t\t#\tcount=0\n\t\t#\tfor i in range(y_p[0][j].shape[0]):\n\t\t#\t\tif(y_p[0][j][i] < mean):\n\t\t#\t\t\tcount += 1\n\t\t#\tprint(\'count:\',count)\n\t\t\n\t\tbase_pred =base_pred[:, :, :]\n\t\t#base_pred =base_pred[:, 2:, :]\n\t\t\n\t\tr = K.ctc_decode(base_pred, in_len, greedy = True, beam_width=100, top_paths=1)\n\t\t\n\t\t#print(\'r\', r)\n\t\t\n\t\t\n\t\tr1 = K.get_value(r[0][0])\n\t\t#print(\'r1\', r1)\n\t\t\n\t\t\n\t\t#r2 = K.get_value(r[1])\n\t\t#print(r2)\n\t\t\n\t\tr1=r1[0]\n\t\t\n\t\treturn r1\n\t\tpass\n\t\n\tdef RecognizeSpeech(self, wavsignal, fs):\n\t\t\'\'\'\n\t\t\xe6\x9c\x80\xe7\xbb\x88\xe5\x81\x9a\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\x94\xa8\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe8\xaf\x86\xe5\x88\xab\xe4\xb8\x80\xe4\xb8\xaawav\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe8\xaf\xad\xe9\x9f\xb3\n\t\t\'\'\'\n\t\t\n\t\t#data = self.data\n\t\t#data = DataSpeech(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\')\n\t\t#data.LoadDataList(\'dev\')\n\t\t# \xe8\x8e\xb7\xe5\x8f\x96\xe8\xbe\x93\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\n\t\t#data_input = GetMfccFeature(wavsignal, fs)\n\t\t#t0=time.time()\n\t\tdata_input = GetFrequencyFeature2(wavsignal, fs)\n\t\t#t1=time.time()\n\t\t#print(\'time cost:\',t1-t0)\n\t\t\n\t\tinput_length = len(data_input)\n\t\tinput_length = input_length // 8\n\t\t\n\t\tdata_input = np.array(data_input, dtype = np.float)\n\t\t#print(data_input,data_input.shape)\n\t\tdata_input = data_input.reshape(data_input.shape[0],data_input.shape[1],1)\n\t\t#t2=time.time()\n\t\tr1 = self.Predict(data_input, input_length)\n\t\t#t3=time.time()\n\t\t#print(\'time cost:\',t3-t2)\n\t\tlist_symbol_dic = GetSymbolList(self.datapath) # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x8b\xbc\xe9\x9f\xb3\xe5\x88\x97\xe8\xa1\xa8\n\t\t\n\t\t\n\t\tr_str=[]\n\t\tfor i in r1:\n\t\t\tr_str.append(list_symbol_dic[i])\n\t\t\n\t\treturn r_str\n\t\tpass\n\t\t\n\tdef RecognizeSpeech_FromFile(self, filename):\n\t\t\'\'\'\n\t\t\xe6\x9c\x80\xe7\xbb\x88\xe5\x81\x9a\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\x94\xa8\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe8\xaf\x86\xe5\x88\xab\xe6\x8c\x87\xe5\xae\x9a\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\x9a\x84\xe8\xaf\xad\xe9\x9f\xb3\n\t\t\'\'\'\n\t\t\n\t\twavsignal,fs = read_wav_data(filename)\n\t\t\n\t\tr = self.RecognizeSpeech(wavsignal, fs)\n\t\t\n\t\treturn r\n\t\t\n\t\tpass\n\t\t\n\t\n\t\t\n\t@property\n\tdef model(self):\n\t\t\'\'\'\n\t\t\xe8\xbf\x94\xe5\x9b\x9ekeras model\n\t\t\'\'\'\n\t\treturn self._model\n\n\nif(__name__==\'__main__\'):\n\t\n\timport tensorflow as tf\n\tfrom keras.backend.tensorflow_backend import set_session\n\tos.environ[""CUDA_VISIBLE_DEVICES""] = ""0""\n\t#\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x85\x8d\xe7\xbd\xae\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa870%\xe7\x9a\x84GPU\n\tconfig = tf.ConfigProto()\n\tconfig.gpu_options.per_process_gpu_memory_fraction = 0.93\n\t#config.gpu_options.allow_growth=True   #\xe4\xb8\x8d\xe5\x85\xa8\xe9\x83\xa8\xe5\x8d\xa0\xe6\xbb\xa1\xe6\x98\xbe\xe5\xad\x98, \xe6\x8c\x89\xe9\x9c\x80\xe5\x88\x86\xe9\x85\x8d\n\tset_session(tf.Session(config=config))\n\t\n\t\n\tdatapath = \'\'\n\tmodelpath = \'model_speech\'\n\t\n\t\n\tif(not os.path.exists(modelpath)): # \xe5\x88\xa4\xe6\x96\xad\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe7\x9b\xae\xe5\xbd\x95\xe6\x98\xaf\xe5\x90\xa6\xe5\xad\x98\xe5\x9c\xa8\n\t\tos.makedirs(modelpath) # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x8c\xe5\xb0\xb1\xe6\x96\xb0\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\xaa\xef\xbc\x8c\xe9\x81\xbf\xe5\x85\x8d\xe4\xb9\x8b\xe5\x90\x8e\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe7\x82\xb8\xe6\x8e\x89\n\t\n\tsystem_type = plat.system() # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa4\xe6\x96\xad\n\tif(system_type == \'Windows\'):\n\t\tdatapath = \'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\'\n\t\tmodelpath = modelpath + \'\\\\\'\n\telif(system_type == \'Linux\'):\n\t\tdatapath = \'dataset\'\n\t\tmodelpath = modelpath + \'/\'\n\telse:\n\t\tprint(\'*[Message] Unknown System\\n\')\n\t\tdatapath = \'dataset\'\n\t\tmodelpath = modelpath + \'/\'\n\t\n\tms = ModelSpeech(datapath)\n\t\n\t#ms.LoadModel(modelpath + \'m26/speech_model26_e_0_step_397000.model\')\n\tms.TrainModel(datapath, epoch = 50, batch_size = 16, save_step = 500)\n\t#ms.TestModel(datapath, str_dataset=\'test\', data_count = 128, out_report = True)\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\ST-CMDS-20170001_1-OS\\\\20170001P00241I0053.wav\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\ST-CMDS-20170001_1-OS\\\\20170001P00020I0087.wav\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\wav\\\\train\\\\A11\\\\A11_167.WAV\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\wav\\\\test\\\\D4\\\\D4_750.wav\')\n\t#print(\'*[\xe6\x8f\x90\xe7\xa4\xba] \xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x9a\\n\',r)\n'"
SpeechModel261.py,4,"b'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n""""""\n@author: nl8590687\n""""""\nimport platform as plat\nimport os\nimport time\n\nfrom general_function.file_wav import *\nfrom general_function.file_dict import *\nfrom general_function.gen_func import *\n\n# LSTM_CNN\nimport keras as kr\nimport numpy as np\nimport random\n\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dense, Dropout, Input, Reshape, BatchNormalization # , Flatten\nfrom keras.layers import Lambda, TimeDistributed, Activation,Conv2D, MaxPooling2D,GRU #, Merge\nfrom keras.layers.merge import add, concatenate\nfrom keras import backend as K\nfrom keras.optimizers import SGD, Adadelta, Adam\n\nfrom readdata24 import DataSpeech\n\nabspath = \'\'\nModelName=\'261\'\n#NUM_GPU = 2\n\nclass ModelSpeech(): # \xe8\xaf\xad\xe9\x9f\xb3\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xb1\xbb\n\tdef __init__(self, datapath):\n\t\t\'\'\'\n\t\t\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n\t\t\xe9\xbb\x98\xe8\xae\xa4\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe6\x8b\xbc\xe9\x9f\xb3\xe7\x9a\x84\xe8\xa1\xa8\xe7\xa4\xba\xe5\xa4\xa7\xe5\xb0\x8f\xe6\x98\xaf1422\xef\xbc\x8c\xe5\x8d\xb31421\xe4\xb8\xaa\xe6\x8b\xbc\xe9\x9f\xb3+1\xe4\xb8\xaa\xe7\xa9\xba\xe7\x99\xbd\xe5\x9d\x97\n\t\t\'\'\'\n\t\tMS_OUTPUT_SIZE = 1424\n\t\tself.MS_OUTPUT_SIZE = MS_OUTPUT_SIZE # \xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe6\x9c\x80\xe7\xbb\x88\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe5\x90\x91\xe9\x87\x8f\xe7\xbb\xb4\xe5\xba\xa6\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\n\t\t#self.BATCH_SIZE = BATCH_SIZE # \xe4\xb8\x80\xe6\xac\xa1\xe8\xae\xad\xe7\xbb\x83\xe7\x9a\x84batch\n\t\tself.label_max_string_length = 64\n\t\tself.AUDIO_LENGTH = 1600\n\t\tself.AUDIO_FEATURE_LENGTH = 200\n\t\tself._model, self.base_model = self.CreateModel() \n\t\t\n\t\tself.datapath = datapath\n\t\tself.slash = \'\'\n\t\tsystem_type = plat.system() # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa4\xe6\x96\xad\n\t\tif(system_type == \'Windows\'):\n\t\t\tself.slash=\'\\\\\' # \xe5\x8f\x8d\xe6\x96\x9c\xe6\x9d\xa0\n\t\telif(system_type == \'Linux\'):\n\t\t\tself.slash=\'/\' # \xe6\xad\xa3\xe6\x96\x9c\xe6\x9d\xa0\n\t\telse:\n\t\t\tprint(\'*[Message] Unknown System\\n\')\n\t\t\tself.slash=\'/\' # \xe6\xad\xa3\xe6\x96\x9c\xe6\x9d\xa0\n\t\tif(self.slash != self.datapath[-1]): # \xe5\x9c\xa8\xe7\x9b\xae\xe5\xbd\x95\xe8\xb7\xaf\xe5\xbe\x84\xe6\x9c\xab\xe5\xb0\xbe\xe5\xa2\x9e\xe5\x8a\xa0\xe6\x96\x9c\xe6\x9d\xa0\n\t\t\tself.datapath = self.datapath + self.slash\n\t\n\t\t\n\tdef CreateModel(self):\n\t\t\'\'\'\n\t\t\xe5\xae\x9a\xe4\xb9\x89CNN/LSTM/CTC\xe6\xa8\xa1\xe5\x9e\x8b\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\x87\xbd\xe6\x95\xb0\xe5\xbc\x8f\xe6\xa8\xa1\xe5\x9e\x8b\n\t\t\xe8\xbe\x93\xe5\x85\xa5\xe5\xb1\x82\xef\xbc\x9a200\xe7\xbb\xb4\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\x80\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe4\xb8\x80\xe6\x9d\xa1\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\xa7\xe9\x95\xbf\xe5\xba\xa6\xe8\xae\xbe\xe4\xb8\xba1600\xef\xbc\x88\xe5\xa4\xa7\xe7\xba\xa616s\xef\xbc\x89\n\t\t\xe9\x9a\x90\xe8\x97\x8f\xe5\xb1\x82\xef\xbc\x9a\xe5\x8d\xb7\xe7\xa7\xaf\xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\xef\xbc\x8c\xe5\x8d\xb7\xe7\xa7\xaf\xe6\xa0\xb8\xe5\xa4\xa7\xe5\xb0\x8f\xe4\xb8\xba3x3\xef\xbc\x8c\xe6\xb1\xa0\xe5\x8c\x96\xe7\xaa\x97\xe5\x8f\xa3\xe5\xa4\xa7\xe5\xb0\x8f\xe4\xb8\xba2\n\t\t\xe9\x9a\x90\xe8\x97\x8f\xe5\xb1\x82\xef\xbc\x9a\xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\t\xe8\xbe\x93\xe5\x87\xba\xe5\xb1\x82\xef\xbc\x9a\xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\xef\xbc\x8c\xe7\xa5\x9e\xe7\xbb\x8f\xe5\x85\x83\xe6\x95\xb0\xe9\x87\x8f\xe4\xb8\xbaself.MS_OUTPUT_SIZE\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8softmax\xe4\xbd\x9c\xe4\xb8\xba\xe6\xbf\x80\xe6\xb4\xbb\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\n\t\tCTC\xe5\xb1\x82\xef\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8CTC\xe7\x9a\x84loss\xe4\xbd\x9c\xe4\xb8\xba\xe6\x8d\x9f\xe5\xa4\xb1\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\xae\x9e\xe7\x8e\xb0\xe8\xbf\x9e\xe6\x8e\xa5\xe6\x80\xa7\xe6\x97\xb6\xe5\xba\x8f\xe5\xa4\x9a\xe8\xbe\x93\xe5\x87\xba\n\t\t\n\t\t\'\'\'\n\t\t\n\t\tinput_data = Input(name=\'the_input\', shape=(self.AUDIO_LENGTH, self.AUDIO_FEATURE_LENGTH, 1))\n\t\t\n\t\tlayer_h = Conv2D(32, (3,3), use_bias=False, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(input_data) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\t#layer_h = Dropout(0.05)(layer_h)\n\t\tlayer_h = Conv2D(32, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h = MaxPooling2D(pool_size=2, strides=None, padding=""valid"")(layer_h) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\t#layer_h = Dropout(0.05)(layer_h) # \xe9\x9a\x8f\xe6\x9c\xba\xe4\xb8\xad\xe6\x96\xad\xe9\x83\xa8\xe5\x88\x86\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe8\xbf\x9e\xe6\x8e\xa5\xef\xbc\x8c\xe9\x98\xb2\xe6\xad\xa2\xe8\xbf\x87\xe6\x8b\x9f\xe5\x90\x88\n\t\tlayer_h = Conv2D(64, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\t#layer_h = Dropout(0.1)(layer_h)\n\t\tlayer_h = Conv2D(64, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h = MaxPooling2D(pool_size=2, strides=None, padding=""valid"")(layer_h) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\t#layer_h = Dropout(0.1)(layer_h)\n\t\tlayer_h = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\t#layer_h = Dropout(0.15)(layer_h)\n\t\tlayer_h = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h = MaxPooling2D(pool_size=2, strides=None, padding=""valid"")(layer_h) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\t#layer_h = Dropout(0.15)(layer_h)\n\t\tlayer_h = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\t#layer_h = Dropout(0.2)(layer_h)\n\t\tlayer_h = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h = MaxPooling2D(pool_size=1, strides=None, padding=""valid"")(layer_h) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\t#layer_h = Dropout(0.2)(layer_h)\n\t\t#layer_h = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\t#layer_h = Dropout(0.2)(layer_h)\n\t\t#layer_h = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\t#layer_h = MaxPooling2D(pool_size=1, strides=None, padding=""valid"")(layer_h) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\t#test=Model(inputs = input_data, outputs = layer_h)\n\t\t#test.summary()\n\t\t\n\t\tlayer_h = Reshape((200, 3200))(layer_h) #Reshape\xe5\xb1\x82\n\t\t\n\t\t#layer_h16 = Dropout(0.3)(layer_h16) # \xe9\x9a\x8f\xe6\x9c\xba\xe4\xb8\xad\xe6\x96\xad\xe9\x83\xa8\xe5\x88\x86\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe8\xbf\x9e\xe6\x8e\xa5\xef\xbc\x8c\xe9\x98\xb2\xe6\xad\xa2\xe8\xbf\x87\xe6\x8b\x9f\xe5\x90\x88\n\t\tlayer_h = Dense(128, activation=""relu"", use_bias=True, kernel_initializer=\'he_normal\')(layer_h) # \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\t\n\t\tinner = layer_h\n\t\t#layer_h5 = LSTM(256, activation=\'relu\', use_bias=True, return_sequences=True)(layer_h4) # LSTM\xe5\xb1\x82\n\t\t\n\t\trnn_size=128\n\t\tgru_1 = GRU(rnn_size, return_sequences=True, kernel_initializer=\'he_normal\', name=\'gru1\')(inner)\n\t\tgru_1b = GRU(rnn_size, return_sequences=True, go_backwards=True, kernel_initializer=\'he_normal\', name=\'gru1_b\')(inner)\n\t\tgru1_merged = add([gru_1, gru_1b])\n\t\tgru_2 = GRU(rnn_size, return_sequences=True, kernel_initializer=\'he_normal\', name=\'gru2\')(gru1_merged)\n\t\tgru_2b = GRU(rnn_size, return_sequences=True, go_backwards=True, kernel_initializer=\'he_normal\', name=\'gru2_b\')(gru1_merged)\n\t\t\n\t\tgru2 = concatenate([gru_2, gru_2b])\n\t\t\n\t\tlayer_h = gru2\n\t\t#layer_h20 = Dropout(0.4)(gru2)\n\t\tlayer_h = Dense(128, activation=""relu"", use_bias=True, kernel_initializer=\'he_normal\')(layer_h) # \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\t\n\t\t#layer_h17 = Dropout(0.3)(layer_h17)\n\t\tlayer_h = Dense(self.MS_OUTPUT_SIZE, use_bias=True, kernel_initializer=\'he_normal\')(layer_h) # \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\t\n\t\ty_pred = Activation(\'softmax\', name=\'Activation0\')(layer_h)\n\t\tmodel_data = Model(inputs = input_data, outputs = y_pred)\n\t\t#model_data.summary()\n\t\t\n\t\tlabels = Input(name=\'the_labels\', shape=[self.label_max_string_length], dtype=\'float32\')\n\t\tinput_length = Input(name=\'input_length\', shape=[1], dtype=\'int64\')\n\t\tlabel_length = Input(name=\'label_length\', shape=[1], dtype=\'int64\')\n\t\t# Keras doesn\'t currently support loss funcs with extra parameters\n\t\t# so CTC loss is implemented in a lambda layer\n\t\t\n\t\t#layer_out = Lambda(ctc_lambda_func,output_shape=(self.MS_OUTPUT_SIZE, ), name=\'ctc\')([y_pred, labels, input_length, label_length])#(layer_h6) # CTC\n\t\tloss_out = Lambda(self.ctc_lambda_func, output_shape=(1,), name=\'ctc\')([y_pred, labels, input_length, label_length])\n\t\t\n\t\t\n\t\t\n\t\tmodel = Model(inputs=[input_data, labels, input_length, label_length], outputs=loss_out)\n\t\t\n\t\tmodel.summary()\n\t\t\n\t\t# clipnorm seems to speeds up convergence\n\t\t#sgd = SGD(lr=0.0001, decay=1e-6, momentum=0.9, nesterov=True, clipnorm=5)\n\t\t#opt = Adadelta(lr = 0.01, rho = 0.95, epsilon = 1e-06)\n\t\topt = Adam(lr = 0.001, beta_1 = 0.9, beta_2 = 0.999, decay = 0.0, epsilon = 10e-8)\n\t\t#model.compile(loss={\'ctc\': lambda y_true, y_pred: y_pred}, optimizer=sgd)\n\t\tmodel.compile(loss={\'ctc\': lambda y_true, y_pred: y_pred}, optimizer = opt)\n\t\t\n\t\t\n\t\t# captures output of softmax so we can decode the output during visualization\n\t\ttest_func = K.function([input_data], [y_pred])\n\t\t\n\t\t#print(\'[*\xe6\x8f\x90\xe7\xa4\xba] \xe5\x88\x9b\xe5\xbb\xba\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x88\x90\xe5\x8a\x9f\xef\xbc\x8c\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xbc\x96\xe8\xaf\x91\xe6\x88\x90\xe5\x8a\x9f\')\n\t\tprint(\'[*Info] Create Model Successful, Compiles Model Successful. \')\n\t\treturn model, model_data\n\t\t\n\tdef ctc_lambda_func(self, args):\n\t\ty_pred, labels, input_length, label_length = args\n\t\t\n\t\ty_pred = y_pred[:, :, :]\n\t\t#y_pred = y_pred[:, 2:, :]\n\t\treturn K.ctc_batch_cost(labels, y_pred, input_length, label_length)\n\t\n\t\n\t\n\tdef TrainModel(self, datapath, epoch = 2, save_step = 1000, batch_size = 32, filename = abspath + \'model_speech/m\' + ModelName + \'/speech_model\'+ModelName):\n\t\t\'\'\'\n\t\t\xe8\xae\xad\xe7\xbb\x83\xe6\xa8\xa1\xe5\x9e\x8b\n\t\t\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\n\t\t\tdatapath: \xe6\x95\xb0\xe6\x8d\xae\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe8\xb7\xaf\xe5\xbe\x84\n\t\t\tepoch: \xe8\xbf\xad\xe4\xbb\xa3\xe8\xbd\xae\xe6\x95\xb0\n\t\t\tsave_step: \xe6\xaf\x8f\xe5\xa4\x9a\xe5\xb0\x91\xe6\xad\xa5\xe4\xbf\x9d\xe5\xad\x98\xe4\xb8\x80\xe6\xac\xa1\xe6\xa8\xa1\xe5\x9e\x8b\n\t\t\tfilename: \xe9\xbb\x98\xe8\xae\xa4\xe4\xbf\x9d\xe5\xad\x98\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xef\xbc\x8c\xe4\xb8\x8d\xe5\x90\xab\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8e\xe7\xbc\x80\xe5\x90\x8d\n\t\t\'\'\'\n\t\tdata=DataSpeech(datapath, \'train\')\n\t\t\n\t\tnum_data = data.GetDataNum() # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\n\t\t\n\t\tyielddatas = data.data_genetator(batch_size, self.AUDIO_LENGTH)\n\t\t\n\t\tfor epoch in range(epoch): # \xe8\xbf\xad\xe4\xbb\xa3\xe8\xbd\xae\xe6\x95\xb0\n\t\t\tprint(\'[running] train epoch %d .\' % epoch)\n\t\t\tn_step = 0 # \xe8\xbf\xad\xe4\xbb\xa3\xe6\x95\xb0\xe6\x8d\xae\xe6\x95\xb0\n\t\t\twhile True:\n\t\t\t\ttry:\n\t\t\t\t\tprint(\'[message] epoch %d . Have train datas %d+\'%(epoch, n_step*save_step))\n\t\t\t\t\t# data_genetator\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe7\x94\x9f\xe6\x88\x90\xe5\x99\xa8\xe5\x87\xbd\xe6\x95\xb0\n\t\t\t\t\t\n\t\t\t\t\t#self._model.fit_generator(yielddatas, save_step, nb_worker=2)\n\t\t\t\t\tself._model.fit_generator(yielddatas, save_step)\n\t\t\t\t\tn_step += 1\n\t\t\t\texcept StopIteration:\n\t\t\t\t\tprint(\'[error] generator error. please check data format.\')\n\t\t\t\t\tbreak\n\t\t\t\t\n\t\t\t\tself.SaveModel(comment=\'_e_\'+str(epoch)+\'_step_\'+str(n_step * save_step))\n\t\t\t\tself.TestModel(self.datapath, str_dataset=\'train\', data_count = 4)\n\t\t\t\tself.TestModel(self.datapath, str_dataset=\'dev\', data_count = 4)\n\t\t\t\t\n\tdef LoadModel(self,filename = abspath + \'model_speech/m\'+ModelName+\'/speech_model\'+ModelName+\'.model\'):\n\t\t\'\'\'\n\t\t\xe5\x8a\xa0\xe8\xbd\xbd\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x8f\x82\xe6\x95\xb0\n\t\t\'\'\'\n\t\tself._model.load_weights(filename)\n\t\tself.base_model.load_weights(filename + \'.base\')\n\n\tdef SaveModel(self,filename = abspath + \'model_speech/m\'+ModelName+\'/speech_model\'+ModelName,comment=\'\'):\n\t\t\'\'\'\n\t\t\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x8f\x82\xe6\x95\xb0\n\t\t\'\'\'\n\t\tself._model.save_weights(filename+comment+\'.model\')\n\t\tself.base_model.save_weights(filename + comment + \'.model.base\')\n\t\tf = open(\'step\'+ModelName+\'.txt\',\'w\')\n\t\tf.write(filename+comment)\n\t\tf.close()\n\n\tdef TestModel(self, datapath=\'\', str_dataset=\'dev\', data_count = 32, out_report = False, show_ratio = True, io_step_print = 10, io_step_file = 10):\n\t\t\'\'\'\n\t\t\xe6\xb5\x8b\xe8\xaf\x95\xe6\xa3\x80\xe9\xaa\x8c\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x95\x88\xe6\x9e\x9c\n\t\t\n\t\tio_step_print\n\t\t\t\xe4\xb8\xba\xe4\xba\x86\xe5\x87\x8f\xe5\xb0\x91\xe6\xb5\x8b\xe8\xaf\x95\xe6\x97\xb6\xe6\xa0\x87\xe5\x87\x86\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84io\xe5\xbc\x80\xe9\x94\x80\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe9\x80\x9a\xe8\xbf\x87\xe8\xb0\x83\xe6\x95\xb4\xe8\xbf\x99\xe4\xb8\xaa\xe5\x8f\x82\xe6\x95\xb0\xe6\x9d\xa5\xe5\xae\x9e\xe7\x8e\xb0\n\t\t\n\t\tio_step_file\n\t\t\t\xe4\xb8\xba\xe4\xba\x86\xe5\x87\x8f\xe5\xb0\x91\xe6\xb5\x8b\xe8\xaf\x95\xe6\x97\xb6\xe6\x96\x87\xe4\xbb\xb6\xe8\xaf\xbb\xe5\x86\x99\xe7\x9a\x84io\xe5\xbc\x80\xe9\x94\x80\xef\xbc\x8c\xe5\x8f\xaf\xe4\xbb\xa5\xe9\x80\x9a\xe8\xbf\x87\xe8\xb0\x83\xe6\x95\xb4\xe8\xbf\x99\xe4\xb8\xaa\xe5\x8f\x82\xe6\x95\xb0\xe6\x9d\xa5\xe5\xae\x9e\xe7\x8e\xb0\n\t\t\n\t\t\'\'\'\n\t\tdata=DataSpeech(self.datapath, str_dataset)\n\t\t#data.LoadDataList(str_dataset) \n\t\tnum_data = data.GetDataNum() # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\n\t\tif(data_count <= 0 or data_count > num_data): # \xe5\xbd\x93data_count\xe4\xb8\xba\xe5\xb0\x8f\xe4\xba\x8e\xe7\xad\x89\xe4\xba\x8e0\xe6\x88\x96\xe8\x80\x85\xe5\xa4\xa7\xe4\xba\x8e\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xae\xe9\x87\x8f\xe7\x9a\x84\xe5\x80\xbc\xe6\x97\xb6\xef\xbc\x8c\xe5\x88\x99\xe4\xbd\xbf\xe7\x94\xa8\xe5\x85\xa8\xe9\x83\xa8\xe6\x95\xb0\xe6\x8d\xae\xe6\x9d\xa5\xe6\xb5\x8b\xe8\xaf\x95\n\t\t\tdata_count = num_data\n\t\t\n\t\ttry:\n\t\t\tran_num = random.randint(0,num_data - 1) # \xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\x80\xe4\xb8\xaa\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\n\t\t\t\n\t\t\twords_num = 0\n\t\t\tword_error_num = 0\n\t\t\t\n\t\t\tnowtime = time.strftime(\'%Y%m%d_%H%M%S\',time.localtime(time.time()))\n\t\t\tif(out_report == True):\n\t\t\t\ttxt_obj = open(\'Test_Report_\' + str_dataset + \'_\' + nowtime + \'.txt\', \'w\', encoding=\'UTF-8\') # \xe6\x89\x93\xe5\xbc\x80\xe6\x96\x87\xe4\xbb\xb6\xe5\xb9\xb6\xe8\xaf\xbb\xe5\x85\xa5\n\t\t\t\n\t\t\ttxt = \'\xe6\xb5\x8b\xe8\xaf\x95\xe6\x8a\xa5\xe5\x91\x8a\\n\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xbc\x96\xe5\x8f\xb7 \' + ModelName + \'\\n\\n\'\n\t\t\tfor i in range(data_count):\n\t\t\t\tdata_input, data_labels = data.GetData((ran_num + i) % num_data)  # \xe4\xbb\x8e\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xe5\xbc\x80\xe5\xa7\x8b\xe8\xbf\x9e\xe7\xbb\xad\xe5\x90\x91\xe5\x90\x8e\xe5\x8f\x96\xe4\xb8\x80\xe5\xae\x9a\xe6\x95\xb0\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\xae\n\t\t\t\t\n\t\t\t\t# \xe6\x95\xb0\xe6\x8d\xae\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x87\xba\xe9\x94\x99\xe5\xa4\x84\xe7\x90\x86 \xe5\xbc\x80\xe5\xa7\x8b\n\t\t\t\t# \xe5\xbd\x93\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84wav\xe6\x96\x87\xe4\xbb\xb6\xe9\x95\xbf\xe5\xba\xa6\xe8\xbf\x87\xe9\x95\xbf\xe6\x97\xb6\xe8\x87\xaa\xe5\x8a\xa8\xe8\xb7\xb3\xe8\xbf\x87\xe8\xaf\xa5\xe6\x96\x87\xe4\xbb\xb6\xef\xbc\x8c\xe8\xbd\xac\xe8\x80\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8b\xe4\xb8\x80\xe4\xb8\xaawav\xe6\x96\x87\xe4\xbb\xb6\xe6\x9d\xa5\xe8\xbf\x90\xe8\xa1\x8c\n\t\t\t\tnum_bias = 0\n\t\t\t\twhile(data_input.shape[0] > self.AUDIO_LENGTH):\n\t\t\t\t\tprint(\'*[Error]\',\'wave data lenghth of num\',(ran_num + i) % num_data, \'is too long.\',\'\\n A Exception raise when test Speech Model.\')\n\t\t\t\t\tnum_bias += 1\n\t\t\t\t\tdata_input, data_labels = data.GetData((ran_num + i + num_bias) % num_data)  # \xe4\xbb\x8e\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xe5\xbc\x80\xe5\xa7\x8b\xe8\xbf\x9e\xe7\xbb\xad\xe5\x90\x91\xe5\x90\x8e\xe5\x8f\x96\xe4\xb8\x80\xe5\xae\x9a\xe6\x95\xb0\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\xae\n\t\t\t\t# \xe6\x95\xb0\xe6\x8d\xae\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x87\xba\xe9\x94\x99\xe5\xa4\x84\xe7\x90\x86 \xe7\xbb\x93\xe6\x9d\x9f\n\t\t\t\t\n\t\t\t\tpre = self.Predict(data_input, data_input.shape[0] // 8)\n\t\t\t\t\n\t\t\t\twords_n = data_labels.shape[0] # \xe8\x8e\xb7\xe5\x8f\x96\xe6\xaf\x8f\xe4\xb8\xaa\xe5\x8f\xa5\xe5\xad\x90\xe7\x9a\x84\xe5\xad\x97\xe6\x95\xb0\n\t\t\t\twords_num += words_n # \xe6\x8a\x8a\xe5\x8f\xa5\xe5\xad\x90\xe7\x9a\x84\xe6\x80\xbb\xe5\xad\x97\xe6\x95\xb0\xe5\x8a\xa0\xe4\xb8\x8a\n\t\t\t\tedit_distance = GetEditDistance(data_labels, pre) # \xe8\x8e\xb7\xe5\x8f\x96\xe7\xbc\x96\xe8\xbe\x91\xe8\xb7\x9d\xe7\xa6\xbb\n\t\t\t\tif(edit_distance <= words_n): # \xe5\xbd\x93\xe7\xbc\x96\xe8\xbe\x91\xe8\xb7\x9d\xe7\xa6\xbb\xe5\xb0\x8f\xe4\xba\x8e\xe7\xad\x89\xe4\xba\x8e\xe5\x8f\xa5\xe5\xad\x90\xe5\xad\x97\xe6\x95\xb0\xe6\x97\xb6\n\t\t\t\t\tword_error_num += edit_distance # \xe4\xbd\xbf\xe7\x94\xa8\xe7\xbc\x96\xe8\xbe\x91\xe8\xb7\x9d\xe7\xa6\xbb\xe4\xbd\x9c\xe4\xb8\xba\xe9\x94\x99\xe8\xaf\xaf\xe5\xad\x97\xe6\x95\xb0\n\t\t\t\telse: # \xe5\x90\xa6\xe5\x88\x99\xe8\x82\xaf\xe5\xae\x9a\xe6\x98\xaf\xe5\xa2\x9e\xe5\x8a\xa0\xe4\xba\x86\xe4\xb8\x80\xe5\xa0\x86\xe4\xb9\xb1\xe4\xb8\x83\xe5\x85\xab\xe7\xb3\x9f\xe7\x9a\x84\xe5\xa5\x87\xe5\xa5\x87\xe6\x80\xaa\xe6\x80\xaa\xe7\x9a\x84\xe5\xad\x97\n\t\t\t\t\tword_error_num += words_n # \xe5\xb0\xb1\xe7\x9b\xb4\xe6\x8e\xa5\xe5\x8a\xa0\xe5\x8f\xa5\xe5\xad\x90\xe6\x9c\xac\xe6\x9d\xa5\xe7\x9a\x84\xe6\x80\xbb\xe5\xad\x97\xe6\x95\xb0\xe5\xb0\xb1\xe5\xa5\xbd\xe4\xba\x86\n\t\t\t\t\n\t\t\t\tif((i % io_step_print == 0 or i == data_count - 1) and show_ratio == True):\n\t\t\t\t\t#print(\'\xe6\xb5\x8b\xe8\xaf\x95\xe8\xbf\x9b\xe5\xba\xa6\xef\xbc\x9a\',i,\'/\',data_count)\n\t\t\t\t\tprint(\'Test Count: \',i,\'/\',data_count)\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif(out_report == True):\n\t\t\t\t\tif(i % io_step_file == 0 or i == data_count - 1):\n\t\t\t\t\t\ttxt_obj.write(txt)\n\t\t\t\t\t\ttxt = \'\'\n\t\t\t\t\t\n\t\t\t\t\ttxt += str(i) + \'\\n\'\n\t\t\t\t\ttxt += \'True:\\t\' + str(data_labels) + \'\\n\'\n\t\t\t\t\ttxt += \'Pred:\\t\' + str(pre) + \'\\n\'\n\t\t\t\t\ttxt += \'\\n\'\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t#print(\'*[\xe6\xb5\x8b\xe8\xaf\x95\xe7\xbb\x93\xe6\x9e\x9c] \xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab \' + str_dataset + \' \xe9\x9b\x86\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\x95\xe5\xad\x97\xe9\x94\x99\xe8\xaf\xaf\xe7\x8e\x87\xef\xbc\x9a\', word_error_num / words_num * 100, \'%\')\n\t\t\tprint(\'*[Test Result] Speech Recognition \' + str_dataset + \' set word error ratio: \', word_error_num / words_num * 100, \'%\')\n\t\t\tif(out_report == True):\n\t\t\t\ttxt += \'*[\xe6\xb5\x8b\xe8\xaf\x95\xe7\xbb\x93\xe6\x9e\x9c] \xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab \' + str_dataset + \' \xe9\x9b\x86\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\x95\xe5\xad\x97\xe9\x94\x99\xe8\xaf\xaf\xe7\x8e\x87\xef\xbc\x9a \' + str(word_error_num / words_num * 100) + \' %\'\n\t\t\t\ttxt_obj.write(txt)\n\t\t\t\ttxt = \'\'\n\t\t\t\ttxt_obj.close()\n\t\t\t\n\t\texcept StopIteration:\n\t\t\tprint(\'[Error] Model Test Error. please check data format.\')\n\t\n\tdef Predict(self, data_input, input_len):\n\t\t\'\'\'\n\t\t\xe9\xa2\x84\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\n\t\t\xe8\xbf\x94\xe5\x9b\x9e\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe5\x90\x8e\xe7\x9a\x84\xe6\x8b\xbc\xe9\x9f\xb3\xe7\xac\xa6\xe5\x8f\xb7\xe5\x88\x97\xe8\xa1\xa8\n\t\t\'\'\'\n\t\t\n\t\tbatch_size = 1 \n\t\tin_len = np.zeros((batch_size),dtype = np.int32)\n\t\t\n\t\tin_len[0] = input_len\n\t\t\n\t\tx_in = np.zeros((batch_size, 1600, self.AUDIO_FEATURE_LENGTH, 1), dtype=np.float)\n\t\t\n\t\tfor i in range(batch_size):\n\t\t\tx_in[i,0:len(data_input)] = data_input\n\t\t\n\t\t\n\t\tbase_pred = self.base_model.predict(x = x_in)\n\t\t\n\t\t#print(\'base_pred:\\n\', base_pred)\n\t\t\n\t\t#y_p = base_pred\n\t\t#for j in range(200):\n\t\t#\tmean = np.sum(y_p[0][j]) / y_p[0][j].shape[0]\n\t\t#\tprint(\'max y_p:\',np.max(y_p[0][j]),\'min y_p:\',np.min(y_p[0][j]),\'mean y_p:\',mean,\'mid y_p:\',y_p[0][j][100])\n\t\t#\tprint(\'argmin:\',np.argmin(y_p[0][j]),\'argmax:\',np.argmax(y_p[0][j]))\n\t\t#\tcount=0\n\t\t#\tfor i in range(y_p[0][j].shape[0]):\n\t\t#\t\tif(y_p[0][j][i] < mean):\n\t\t#\t\t\tcount += 1\n\t\t#\tprint(\'count:\',count)\n\t\t\n\t\tbase_pred =base_pred[:, :, :]\n\t\t#base_pred =base_pred[:, 2:, :]\n\t\t\n\t\tr = K.ctc_decode(base_pred, in_len, greedy = True, beam_width=100, top_paths=1)\n\t\t\n\t\t#print(\'r\', r)\n\t\t\n\t\t\n\t\tr1 = K.get_value(r[0][0])\n\t\t#print(\'r1\', r1)\n\t\t\n\t\t\n\t\t#r2 = K.get_value(r[1])\n\t\t#print(r2)\n\t\t\n\t\tr1=r1[0]\n\t\t\n\t\treturn r1\n\t\tpass\n\t\n\tdef RecognizeSpeech(self, wavsignal, fs):\n\t\t\'\'\'\n\t\t\xe6\x9c\x80\xe7\xbb\x88\xe5\x81\x9a\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\x94\xa8\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe8\xaf\x86\xe5\x88\xab\xe4\xb8\x80\xe4\xb8\xaawav\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe8\xaf\xad\xe9\x9f\xb3\n\t\t\'\'\'\n\t\t\n\t\t#data = self.data\n\t\t#data = DataSpeech(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\')\n\t\t#data.LoadDataList(\'dev\')\n\t\t# \xe8\x8e\xb7\xe5\x8f\x96\xe8\xbe\x93\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\n\t\t#data_input = GetMfccFeature(wavsignal, fs)\n\t\t#t0=time.time()\n\t\tdata_input = GetFrequencyFeature3(wavsignal, fs)\n\t\t#t1=time.time()\n\t\t#print(\'time cost:\',t1-t0)\n\t\t\n\t\tinput_length = len(data_input)\n\t\tinput_length = input_length // 8\n\t\t\n\t\tdata_input = np.array(data_input, dtype = np.float)\n\t\t#print(data_input,data_input.shape)\n\t\tdata_input = data_input.reshape(data_input.shape[0],data_input.shape[1],1)\n\t\t#t2=time.time()\n\t\tr1 = self.Predict(data_input, input_length)\n\t\t#t3=time.time()\n\t\t#print(\'time cost:\',t3-t2)\n\t\tlist_symbol_dic = GetSymbolList(self.datapath) # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x8b\xbc\xe9\x9f\xb3\xe5\x88\x97\xe8\xa1\xa8\n\t\t\n\t\t\n\t\tr_str=[]\n\t\tfor i in r1:\n\t\t\tr_str.append(list_symbol_dic[i])\n\t\t\n\t\treturn r_str\n\t\tpass\n\t\t\n\tdef RecognizeSpeech_FromFile(self, filename):\n\t\t\'\'\'\n\t\t\xe6\x9c\x80\xe7\xbb\x88\xe5\x81\x9a\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\x94\xa8\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe8\xaf\x86\xe5\x88\xab\xe6\x8c\x87\xe5\xae\x9a\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\x9a\x84\xe8\xaf\xad\xe9\x9f\xb3\n\t\t\'\'\'\n\t\t\n\t\twavsignal,fs = read_wav_data(filename)\n\t\t\n\t\tr = self.RecognizeSpeech(wavsignal, fs)\n\t\t\n\t\treturn r\n\t\t\n\t\tpass\n\t\t\n\t\n\t\t\n\t@property\n\tdef model(self):\n\t\t\'\'\'\n\t\t\xe8\xbf\x94\xe5\x9b\x9ekeras model\n\t\t\'\'\'\n\t\treturn self._model\n\n\nif(__name__==\'__main__\'):\n\t\n\t#import tensorflow as tf\n\t#from keras.backend.tensorflow_backend import set_session\n\t#os.environ[""CUDA_VISIBLE_DEVICES""] = ""1""\n\t#\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x85\x8d\xe7\xbd\xae\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa870%\xe7\x9a\x84GPU\n\t#config = tf.ConfigProto()\n\t#config.gpu_options.per_process_gpu_memory_fraction = 0.95\n\t#config.gpu_options.allow_growth=True   #\xe4\xb8\x8d\xe5\x85\xa8\xe9\x83\xa8\xe5\x8d\xa0\xe6\xbb\xa1\xe6\x98\xbe\xe5\xad\x98, \xe6\x8c\x89\xe9\x9c\x80\xe5\x88\x86\xe9\x85\x8d\n\t#set_session(tf.Session(config=config))\n\t\n\t\n\tdatapath =  abspath + \'\'\n\tmodelpath =  abspath + \'model_speech\'\n\t\n\t\n\tif(not os.path.exists(modelpath)): # \xe5\x88\xa4\xe6\x96\xad\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe7\x9b\xae\xe5\xbd\x95\xe6\x98\xaf\xe5\x90\xa6\xe5\xad\x98\xe5\x9c\xa8\n\t\tos.makedirs(modelpath) # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x8c\xe5\xb0\xb1\xe6\x96\xb0\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\xaa\xef\xbc\x8c\xe9\x81\xbf\xe5\x85\x8d\xe4\xb9\x8b\xe5\x90\x8e\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe7\x82\xb8\xe6\x8e\x89\n\t\n\tsystem_type = plat.system() # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa4\xe6\x96\xad\n\tif(system_type == \'Windows\'):\n\t\tdatapath = \'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\'\n\t\tmodelpath = modelpath + \'\\\\\'\n\telif(system_type == \'Linux\'):\n\t\tdatapath =  abspath + \'dataset\'\n\t\tmodelpath = modelpath + \'/\'\n\telse:\n\t\tprint(\'*[Message] Unknown System\\n\')\n\t\tdatapath = \'dataset\'\n\t\tmodelpath = modelpath + \'/\'\n\t\n\tms = ModelSpeech(datapath)\n\t\n\t\n\t#ms.LoadModel(modelpath + \'m261/speech_model261_e_0_step_100000.model\')\n\t#ms.TrainModel(datapath, epoch = 50, batch_size = 16, save_step = 500)\n\t\n\t#t1=time.time()\n\t#ms.TestModel(datapath, str_dataset=\'train\', data_count = 128, out_report = True)\n\t#ms.TestModel(datapath, str_dataset=\'dev\', data_count = 128, out_report = True)\n\t#ms.TestModel(datapath, str_dataset=\'test\', data_count = 128, out_report = True)\n\t#t2=time.time()\n\t#print(\'Test Model Time Cost:\',t2-t1,\'s\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\ST-CMDS-20170001_1-OS\\\\20170001P00241I0053.wav\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\ST-CMDS-20170001_1-OS\\\\20170001P00020I0087.wav\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\wav\\\\train\\\\A11\\\\A11_167.WAV\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\wav\\\\test\\\\D4\\\\D4_750.wav\')\n\t#print(\'*[\xe6\x8f\x90\xe7\xa4\xba] \xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x9a\\n\',r)\n'"
SpeechModel261_p.py,4,"b'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n""""""\n@author: nl8590687\n""""""\nimport platform as plat\nimport os\nimport time\n\nfrom general_function.file_wav import *\nfrom general_function.file_dict import *\nfrom general_function.gen_func import *\nfrom general_function.muti_gpu import *\n\nimport keras as kr\nimport numpy as np\nimport random\n\nfrom keras.models import Sequential, Model\nfrom keras.layers import Dense, Dropout, Input, Reshape, BatchNormalization # , Flatten\nfrom keras.layers import Lambda, TimeDistributed, Activation,Conv2D, MaxPooling2D,GRU #, Merge\nfrom keras.layers.merge import add, concatenate\nfrom keras import backend as K\nfrom keras.optimizers import SGD, Adadelta, Adam\n\nfrom readdata24 import DataSpeech\n\nabspath = \'\'\nModelName=\'261\'\nNUM_GPU = 2\n\nclass ModelSpeech(): # \xe8\xaf\xad\xe9\x9f\xb3\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xb1\xbb\n\tdef __init__(self, datapath):\n\t\t\'\'\'\n\t\t\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n\t\t\xe9\xbb\x98\xe8\xae\xa4\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe6\x8b\xbc\xe9\x9f\xb3\xe7\x9a\x84\xe8\xa1\xa8\xe7\xa4\xba\xe5\xa4\xa7\xe5\xb0\x8f\xe6\x98\xaf1422\xef\xbc\x8c\xe5\x8d\xb31421\xe4\xb8\xaa\xe6\x8b\xbc\xe9\x9f\xb3+1\xe4\xb8\xaa\xe7\xa9\xba\xe7\x99\xbd\xe5\x9d\x97\n\t\t\'\'\'\n\t\tMS_OUTPUT_SIZE = 1424\n\t\tself.MS_OUTPUT_SIZE = MS_OUTPUT_SIZE # \xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe6\x9c\x80\xe7\xbb\x88\xe8\xbe\x93\xe5\x87\xba\xe7\x9a\x84\xe6\xaf\x8f\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x97\xe7\xac\xa6\xe5\x90\x91\xe9\x87\x8f\xe7\xbb\xb4\xe5\xba\xa6\xe7\x9a\x84\xe5\xa4\xa7\xe5\xb0\x8f\n\t\t#self.BATCH_SIZE = BATCH_SIZE # \xe4\xb8\x80\xe6\xac\xa1\xe8\xae\xad\xe7\xbb\x83\xe7\x9a\x84batch\n\t\tself.label_max_string_length = 64\n\t\tself.AUDIO_LENGTH = 1600\n\t\tself.AUDIO_FEATURE_LENGTH = 200\n\t\tself._model, self.base_model = self.CreateModel() \n\t\t\n\t\tself.datapath = datapath\n\t\tself.slash = \'\'\n\t\tsystem_type = plat.system() # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa4\xe6\x96\xad\n\t\tif(system_type == \'Windows\'):\n\t\t\tself.slash=\'\\\\\' # \xe5\x8f\x8d\xe6\x96\x9c\xe6\x9d\xa0\n\t\telif(system_type == \'Linux\'):\n\t\t\tself.slash=\'/\' # \xe6\xad\xa3\xe6\x96\x9c\xe6\x9d\xa0\n\t\telse:\n\t\t\tprint(\'*[Message] Unknown System\\n\')\n\t\t\tself.slash=\'/\' # \xe6\xad\xa3\xe6\x96\x9c\xe6\x9d\xa0\n\t\tif(self.slash != self.datapath[-1]): # \xe5\x9c\xa8\xe7\x9b\xae\xe5\xbd\x95\xe8\xb7\xaf\xe5\xbe\x84\xe6\x9c\xab\xe5\xb0\xbe\xe5\xa2\x9e\xe5\x8a\xa0\xe6\x96\x9c\xe6\x9d\xa0\n\t\t\tself.datapath = self.datapath + self.slash\n\t\n\t\t\n\tdef CreateModel(self):\n\t\t\'\'\'\n\t\t\xe5\xae\x9a\xe4\xb9\x89CNN/LSTM/CTC\xe6\xa8\xa1\xe5\x9e\x8b\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe5\x87\xbd\xe6\x95\xb0\xe5\xbc\x8f\xe6\xa8\xa1\xe5\x9e\x8b\n\t\t\xe8\xbe\x93\xe5\x85\xa5\xe5\xb1\x82\xef\xbc\x9a200\xe7\xbb\xb4\xe7\x9a\x84\xe7\x89\xb9\xe5\xbe\x81\xe5\x80\xbc\xe5\xba\x8f\xe5\x88\x97\xef\xbc\x8c\xe4\xb8\x80\xe6\x9d\xa1\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x9c\x80\xe5\xa4\xa7\xe9\x95\xbf\xe5\xba\xa6\xe8\xae\xbe\xe4\xb8\xba1600\xef\xbc\x88\xe5\xa4\xa7\xe7\xba\xa616s\xef\xbc\x89\n\t\t\xe9\x9a\x90\xe8\x97\x8f\xe5\xb1\x82\xef\xbc\x9a\xe5\x8d\xb7\xe7\xa7\xaf\xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\xef\xbc\x8c\xe5\x8d\xb7\xe7\xa7\xaf\xe6\xa0\xb8\xe5\xa4\xa7\xe5\xb0\x8f\xe4\xb8\xba3x3\xef\xbc\x8c\xe6\xb1\xa0\xe5\x8c\x96\xe7\xaa\x97\xe5\x8f\xa3\xe5\xa4\xa7\xe5\xb0\x8f\xe4\xb8\xba2\n\t\t\xe9\x9a\x90\xe8\x97\x8f\xe5\xb1\x82\xef\xbc\x9a\xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\t\xe8\xbe\x93\xe5\x87\xba\xe5\xb1\x82\xef\xbc\x9a\xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\xef\xbc\x8c\xe7\xa5\x9e\xe7\xbb\x8f\xe5\x85\x83\xe6\x95\xb0\xe9\x87\x8f\xe4\xb8\xbaself.MS_OUTPUT_SIZE\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa8softmax\xe4\xbd\x9c\xe4\xb8\xba\xe6\xbf\x80\xe6\xb4\xbb\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\n\t\tCTC\xe5\xb1\x82\xef\xbc\x9a\xe4\xbd\xbf\xe7\x94\xa8CTC\xe7\x9a\x84loss\xe4\xbd\x9c\xe4\xb8\xba\xe6\x8d\x9f\xe5\xa4\xb1\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe5\xae\x9e\xe7\x8e\xb0\xe8\xbf\x9e\xe6\x8e\xa5\xe6\x80\xa7\xe6\x97\xb6\xe5\xba\x8f\xe5\xa4\x9a\xe8\xbe\x93\xe5\x87\xba\n\t\t\n\t\t\'\'\'\n\t\t\n\t\tinput_data = Input(name=\'the_input\', shape=(self.AUDIO_LENGTH, self.AUDIO_FEATURE_LENGTH, 1))\n\t\t\n\t\tlayer_h1 = Conv2D(32, (3,3), use_bias=False, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(input_data) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\t#layer_h1 = Dropout(0.05)(layer_h1)\n\t\tlayer_h2 = Conv2D(32, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h1) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h3 = MaxPooling2D(pool_size=2, strides=None, padding=""valid"")(layer_h2) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\t#layer_h3 = Dropout(0.05)(layer_h3) # \xe9\x9a\x8f\xe6\x9c\xba\xe4\xb8\xad\xe6\x96\xad\xe9\x83\xa8\xe5\x88\x86\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe8\xbf\x9e\xe6\x8e\xa5\xef\xbc\x8c\xe9\x98\xb2\xe6\xad\xa2\xe8\xbf\x87\xe6\x8b\x9f\xe5\x90\x88\n\t\tlayer_h4 = Conv2D(64, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h3) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\t#layer_h4 = Dropout(0.1)(layer_h4)\n\t\tlayer_h5 = Conv2D(64, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h4) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h6 = MaxPooling2D(pool_size=2, strides=None, padding=""valid"")(layer_h5) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\t#layer_h6 = Dropout(0.1)(layer_h6)\n\t\tlayer_h7 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h6) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\t#layer_h7 = Dropout(0.15)(layer_h7)\n\t\tlayer_h8 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h7) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h9 = MaxPooling2D(pool_size=2, strides=None, padding=""valid"")(layer_h8) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\t#layer_h9 = Dropout(0.15)(layer_h9)\n\t\tlayer_h10 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h9) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\t#layer_h10 = Dropout(0.2)(layer_h10)\n\t\tlayer_h11 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h10) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h12 = MaxPooling2D(pool_size=1, strides=None, padding=""valid"")(layer_h11) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\t#layer_h12 = Dropout(0.2)(layer_h12)\n\t\tlayer_h13 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h12) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\t#layer_h13 = Dropout(0.3)(layer_h13)\n\t\tlayer_h14 = Conv2D(128, (3,3), use_bias=True, activation=\'relu\', padding=\'same\', kernel_initializer=\'he_normal\')(layer_h13) # \xe5\x8d\xb7\xe7\xa7\xaf\xe5\xb1\x82\n\t\tlayer_h15 = MaxPooling2D(pool_size=1, strides=None, padding=""valid"")(layer_h14) # \xe6\xb1\xa0\xe5\x8c\x96\xe5\xb1\x82\n\t\t\n\t\t#test=Model(inputs = input_data, outputs = layer_h12)\n\t\t#test.summary()\n\t\t\n\t\tlayer_h16 = Reshape((200, 3200))(layer_h15) #Reshape\xe5\xb1\x82\n\t\t\n\t\t#layer_h16 = Dropout(0.3)(layer_h16) # \xe9\x9a\x8f\xe6\x9c\xba\xe4\xb8\xad\xe6\x96\xad\xe9\x83\xa8\xe5\x88\x86\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe8\xbf\x9e\xe6\x8e\xa5\xef\xbc\x8c\xe9\x98\xb2\xe6\xad\xa2\xe8\xbf\x87\xe6\x8b\x9f\xe5\x90\x88\n\t\tlayer_h17 = Dense(128, activation=""relu"", use_bias=True, kernel_initializer=\'he_normal\')(layer_h16) # \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\t\n\t\tinner = layer_h17\n\t\t#layer_h5 = LSTM(256, activation=\'relu\', use_bias=True, return_sequences=True)(layer_h4) # LSTM\xe5\xb1\x82\n\t\t\n\t\trnn_size=128\n\t\tgru_1 = GRU(rnn_size, return_sequences=True, kernel_initializer=\'he_normal\', name=\'gru1\')(inner)\n\t\tgru_1b = GRU(rnn_size, return_sequences=True, go_backwards=True, kernel_initializer=\'he_normal\', name=\'gru1_b\')(inner)\n\t\tgru1_merged = add([gru_1, gru_1b])\n\t\tgru_2 = GRU(rnn_size, return_sequences=True, kernel_initializer=\'he_normal\', name=\'gru2\')(gru1_merged)\n\t\tgru_2b = GRU(rnn_size, return_sequences=True, go_backwards=True, kernel_initializer=\'he_normal\', name=\'gru2_b\')(gru1_merged)\n\t\t\n\t\tgru2 = concatenate([gru_2, gru_2b])\n\t\t\n\t\tlayer_h20 = gru2\n\t\t#layer_h20 = Dropout(0.4)(gru2)\n\t\tlayer_h21 = Dense(128, activation=""relu"", use_bias=True, kernel_initializer=\'he_normal\')(layer_h20) # \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\t\n\t\t#layer_h17 = Dropout(0.3)(layer_h17)\n\t\tlayer_h22 = Dense(self.MS_OUTPUT_SIZE, use_bias=True, kernel_initializer=\'he_normal\')(layer_h21) # \xe5\x85\xa8\xe8\xbf\x9e\xe6\x8e\xa5\xe5\xb1\x82\n\t\t\n\t\ty_pred = Activation(\'softmax\', name=\'Activation0\')(layer_h22)\n\t\tmodel_data = Model(inputs = input_data, outputs = y_pred)\n\t\t#model_data.summary()\n\t\t\n\t\tlabels = Input(name=\'the_labels\', shape=[self.label_max_string_length], dtype=\'float32\')\n\t\tinput_length = Input(name=\'input_length\', shape=[1], dtype=\'int64\')\n\t\tlabel_length = Input(name=\'label_length\', shape=[1], dtype=\'int64\')\n\t\t# Keras doesn\'t currently support loss funcs with extra parameters\n\t\t# so CTC loss is implemented in a lambda layer\n\t\t\n\t\t#layer_out = Lambda(ctc_lambda_func,output_shape=(self.MS_OUTPUT_SIZE, ), name=\'ctc\')([y_pred, labels, input_length, label_length])#(layer_h6) # CTC\n\t\tloss_out = Lambda(self.ctc_lambda_func, output_shape=(1,), name=\'ctc\')([y_pred, labels, input_length, label_length])\n\t\t\n\t\t\n\t\t\n\t\tmodel = Model(inputs=[input_data, labels, input_length, label_length], outputs=loss_out)\n\t\t\n\t\tmodel.summary()\n\t\t\n\t\t# clipnorm seems to speeds up convergence\n\t\t#sgd = SGD(lr=0.0001, decay=1e-6, momentum=0.9, nesterov=True, clipnorm=5)\n\t\t#ada_d = Adadelta(lr = 0.01, rho = 0.95, epsilon = 1e-06)\n\t\topt = Adam(lr = 0.001, beta_1 = 0.9, beta_2 = 0.999, decay = 0.0, epsilon = 10e-8)\n\t\t#model.compile(loss={\'ctc\': lambda y_true, y_pred: y_pred}, optimizer=sgd)\n\t\t\n\t\tmodel.build((self.AUDIO_LENGTH, self.AUDIO_FEATURE_LENGTH, 1))\n\t\tmodel = ParallelModel(model, NUM_GPU)\n\t\t\n\t\tmodel.compile(loss={\'ctc\': lambda y_true, y_pred: y_pred}, optimizer = opt)\n\t\t\n\t\t\n\t\t# captures output of softmax so we can decode the output during visualization\n\t\ttest_func = K.function([input_data], [y_pred])\n\t\t\n\t\t#print(\'[*\xe6\x8f\x90\xe7\xa4\xba] \xe5\x88\x9b\xe5\xbb\xba\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x88\x90\xe5\x8a\x9f\xef\xbc\x8c\xe6\xa8\xa1\xe5\x9e\x8b\xe7\xbc\x96\xe8\xaf\x91\xe6\x88\x90\xe5\x8a\x9f\')\n\t\tprint(\'[*Info] Create Model Successful, Compiles Model Successful. \')\n\t\treturn model, model_data\n\t\t\n\tdef ctc_lambda_func(self, args):\n\t\ty_pred, labels, input_length, label_length = args\n\t\t\n\t\ty_pred = y_pred[:, :, :]\n\t\t#y_pred = y_pred[:, 2:, :]\n\t\treturn K.ctc_batch_cost(labels, y_pred, input_length, label_length)\n\t\n\t\n\t\n\tdef TrainModel(self, datapath, epoch = 2, save_step = 1000, batch_size = 32, filename = abspath + \'model_speech/m\' + ModelName + \'/speech_model\'+ModelName):\n\t\t\'\'\'\n\t\t\xe8\xae\xad\xe7\xbb\x83\xe6\xa8\xa1\xe5\x9e\x8b\n\t\t\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\n\t\t\tdatapath: \xe6\x95\xb0\xe6\x8d\xae\xe4\xbf\x9d\xe5\xad\x98\xe7\x9a\x84\xe8\xb7\xaf\xe5\xbe\x84\n\t\t\tepoch: \xe8\xbf\xad\xe4\xbb\xa3\xe8\xbd\xae\xe6\x95\xb0\n\t\t\tsave_step: \xe6\xaf\x8f\xe5\xa4\x9a\xe5\xb0\x91\xe6\xad\xa5\xe4\xbf\x9d\xe5\xad\x98\xe4\xb8\x80\xe6\xac\xa1\xe6\xa8\xa1\xe5\x9e\x8b\n\t\t\tfilename: \xe9\xbb\x98\xe8\xae\xa4\xe4\xbf\x9d\xe5\xad\x98\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xef\xbc\x8c\xe4\xb8\x8d\xe5\x90\xab\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8e\xe7\xbc\x80\xe5\x90\x8d\n\t\t\'\'\'\n\t\tdata=DataSpeech(datapath, \'train\')\n\t\t\n\t\tnum_data = data.GetDataNum() # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\n\t\t\n\t\tyielddatas = data.data_genetator(batch_size, self.AUDIO_LENGTH)\n\t\t\n\t\tfor epoch in range(epoch): # \xe8\xbf\xad\xe4\xbb\xa3\xe8\xbd\xae\xe6\x95\xb0\n\t\t\tprint(\'[running] train epoch %d .\' % epoch)\n\t\t\tn_step = 0 # \xe8\xbf\xad\xe4\xbb\xa3\xe6\x95\xb0\xe6\x8d\xae\xe6\x95\xb0\n\t\t\twhile True:\n\t\t\t\ttry:\n\t\t\t\t\tprint(\'[message] epoch %d . Have train datas %d+\'%(epoch, n_step*save_step))\n\t\t\t\t\t# data_genetator\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe7\x94\x9f\xe6\x88\x90\xe5\x99\xa8\xe5\x87\xbd\xe6\x95\xb0\n\t\t\t\t\t\n\t\t\t\t\t#self._model.fit_generator(yielddatas, save_step, nb_worker=2)\n\t\t\t\t\tself._model.fit_generator(yielddatas, save_step)\n\t\t\t\t\tn_step += 1\n\t\t\t\texcept StopIteration:\n\t\t\t\t\tprint(\'[error] generator error. please check data format.\')\n\t\t\t\t\tbreak\n\t\t\t\t\n\t\t\t\tself.SaveModel(comment=\'_e_\'+str(epoch)+\'_step_\'+str(n_step * save_step))\n\t\t\t\tself.TestModel(self.datapath, str_dataset=\'train\', data_count = 4)\n\t\t\t\tself.TestModel(self.datapath, str_dataset=\'dev\', data_count = 4)\n\t\t\t\t\n\tdef LoadModel(self,filename = abspath + \'model_speech/m\'+ModelName+\'/speech_model\'+ModelName+\'.model\'):\n\t\t\'\'\'\n\t\t\xe5\x8a\xa0\xe8\xbd\xbd\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x8f\x82\xe6\x95\xb0\n\t\t\'\'\'\n\t\tself._model.load_weights(filename)\n\t\tself.base_model.load_weights(filename + \'.base\')\n\n\tdef SaveModel(self,filename = abspath + \'model_speech/m\'+ModelName+\'/speech_model\'+ModelName,comment=\'\'):\n\t\t\'\'\'\n\t\t\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x8f\x82\xe6\x95\xb0\n\t\t\'\'\'\n\t\tself._model.save_weights(filename+comment+\'.model\')\n\t\tself.base_model.save_weights(filename + comment + \'.model.base\')\n\t\tf = open(\'step\'+ModelName+\'.txt\',\'w\')\n\t\tf.write(filename+comment)\n\t\tf.close()\n\n\tdef TestModel(self, datapath=\'\', str_dataset=\'dev\', data_count = 32, out_report = False, show_ratio = True):\n\t\t\'\'\'\n\t\t\xe6\xb5\x8b\xe8\xaf\x95\xe6\xa3\x80\xe9\xaa\x8c\xe6\xa8\xa1\xe5\x9e\x8b\xe6\x95\x88\xe6\x9e\x9c\n\t\t\'\'\'\n\t\tdata=DataSpeech(self.datapath, str_dataset)\n\t\t#data.LoadDataList(str_dataset) \n\t\tnum_data = data.GetDataNum() # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\n\t\tif(data_count <= 0 or data_count > num_data): # \xe5\xbd\x93data_count\xe4\xb8\xba\xe5\xb0\x8f\xe4\xba\x8e\xe7\xad\x89\xe4\xba\x8e0\xe6\x88\x96\xe8\x80\x85\xe5\xa4\xa7\xe4\xba\x8e\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb0\xe6\x8d\xae\xe9\x87\x8f\xe7\x9a\x84\xe5\x80\xbc\xe6\x97\xb6\xef\xbc\x8c\xe5\x88\x99\xe4\xbd\xbf\xe7\x94\xa8\xe5\x85\xa8\xe9\x83\xa8\xe6\x95\xb0\xe6\x8d\xae\xe6\x9d\xa5\xe6\xb5\x8b\xe8\xaf\x95\n\t\t\tdata_count = num_data\n\t\t\n\t\ttry:\n\t\t\tran_num = random.randint(0,num_data - 1) # \xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\x80\xe4\xb8\xaa\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\n\t\t\t\n\t\t\twords_num = 0\n\t\t\tword_error_num = 0\n\t\t\t\n\t\t\tnowtime = time.strftime(\'%Y%m%d_%H%M%S\',time.localtime(time.time()))\n\t\t\tif(out_report == True):\n\t\t\t\ttxt_obj = open(\'Test_Report_\' + str_dataset + \'_\' + nowtime + \'.txt\', \'w\', encoding=\'UTF-8\') # \xe6\x89\x93\xe5\xbc\x80\xe6\x96\x87\xe4\xbb\xb6\xe5\xb9\xb6\xe8\xaf\xbb\xe5\x85\xa5\n\t\t\t\n\t\t\ttxt = \'\'\n\t\t\tfor i in range(data_count):\n\t\t\t\tdata_input, data_labels = data.GetData((ran_num + i) % num_data)  # \xe4\xbb\x8e\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xe5\xbc\x80\xe5\xa7\x8b\xe8\xbf\x9e\xe7\xbb\xad\xe5\x90\x91\xe5\x90\x8e\xe5\x8f\x96\xe4\xb8\x80\xe5\xae\x9a\xe6\x95\xb0\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\xae\n\t\t\t\t\n\t\t\t\t# \xe6\x95\xb0\xe6\x8d\xae\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x87\xba\xe9\x94\x99\xe5\xa4\x84\xe7\x90\x86 \xe5\xbc\x80\xe5\xa7\x8b\n\t\t\t\t# \xe5\xbd\x93\xe8\xbe\x93\xe5\x85\xa5\xe7\x9a\x84wav\xe6\x96\x87\xe4\xbb\xb6\xe9\x95\xbf\xe5\xba\xa6\xe8\xbf\x87\xe9\x95\xbf\xe6\x97\xb6\xe8\x87\xaa\xe5\x8a\xa8\xe8\xb7\xb3\xe8\xbf\x87\xe8\xaf\xa5\xe6\x96\x87\xe4\xbb\xb6\xef\xbc\x8c\xe8\xbd\xac\xe8\x80\x8c\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x8b\xe4\xb8\x80\xe4\xb8\xaawav\xe6\x96\x87\xe4\xbb\xb6\xe6\x9d\xa5\xe8\xbf\x90\xe8\xa1\x8c\n\t\t\t\tnum_bias = 0\n\t\t\t\twhile(data_input.shape[0] > self.AUDIO_LENGTH):\n\t\t\t\t\tprint(\'*[Error]\',\'wave data lenghth of num\',(ran_num + i) % num_data, \'is too long.\',\'\\n A Exception raise when test Speech Model.\')\n\t\t\t\t\tnum_bias += 1\n\t\t\t\t\tdata_input, data_labels = data.GetData((ran_num + i + num_bias) % num_data)  # \xe4\xbb\x8e\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xe5\xbc\x80\xe5\xa7\x8b\xe8\xbf\x9e\xe7\xbb\xad\xe5\x90\x91\xe5\x90\x8e\xe5\x8f\x96\xe4\xb8\x80\xe5\xae\x9a\xe6\x95\xb0\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\xae\n\t\t\t\t# \xe6\x95\xb0\xe6\x8d\xae\xe6\xa0\xbc\xe5\xbc\x8f\xe5\x87\xba\xe9\x94\x99\xe5\xa4\x84\xe7\x90\x86 \xe7\xbb\x93\xe6\x9d\x9f\n\t\t\t\t\n\t\t\t\tpre = self.Predict(data_input, data_input.shape[0] // 8)\n\t\t\t\t\n\t\t\t\twords_n = data_labels.shape[0] # \xe8\x8e\xb7\xe5\x8f\x96\xe6\xaf\x8f\xe4\xb8\xaa\xe5\x8f\xa5\xe5\xad\x90\xe7\x9a\x84\xe5\xad\x97\xe6\x95\xb0\n\t\t\t\twords_num += words_n # \xe6\x8a\x8a\xe5\x8f\xa5\xe5\xad\x90\xe7\x9a\x84\xe6\x80\xbb\xe5\xad\x97\xe6\x95\xb0\xe5\x8a\xa0\xe4\xb8\x8a\n\t\t\t\tedit_distance = GetEditDistance(data_labels, pre) # \xe8\x8e\xb7\xe5\x8f\x96\xe7\xbc\x96\xe8\xbe\x91\xe8\xb7\x9d\xe7\xa6\xbb\n\t\t\t\tif(edit_distance <= words_n): # \xe5\xbd\x93\xe7\xbc\x96\xe8\xbe\x91\xe8\xb7\x9d\xe7\xa6\xbb\xe5\xb0\x8f\xe4\xba\x8e\xe7\xad\x89\xe4\xba\x8e\xe5\x8f\xa5\xe5\xad\x90\xe5\xad\x97\xe6\x95\xb0\xe6\x97\xb6\n\t\t\t\t\tword_error_num += edit_distance # \xe4\xbd\xbf\xe7\x94\xa8\xe7\xbc\x96\xe8\xbe\x91\xe8\xb7\x9d\xe7\xa6\xbb\xe4\xbd\x9c\xe4\xb8\xba\xe9\x94\x99\xe8\xaf\xaf\xe5\xad\x97\xe6\x95\xb0\n\t\t\t\telse: # \xe5\x90\xa6\xe5\x88\x99\xe8\x82\xaf\xe5\xae\x9a\xe6\x98\xaf\xe5\xa2\x9e\xe5\x8a\xa0\xe4\xba\x86\xe4\xb8\x80\xe5\xa0\x86\xe4\xb9\xb1\xe4\xb8\x83\xe5\x85\xab\xe7\xb3\x9f\xe7\x9a\x84\xe5\xa5\x87\xe5\xa5\x87\xe6\x80\xaa\xe6\x80\xaa\xe7\x9a\x84\xe5\xad\x97\n\t\t\t\t\tword_error_num += words_n # \xe5\xb0\xb1\xe7\x9b\xb4\xe6\x8e\xa5\xe5\x8a\xa0\xe5\x8f\xa5\xe5\xad\x90\xe6\x9c\xac\xe6\x9d\xa5\xe7\x9a\x84\xe6\x80\xbb\xe5\xad\x97\xe6\x95\xb0\xe5\xb0\xb1\xe5\xa5\xbd\xe4\xba\x86\n\t\t\t\t\n\t\t\t\tif(i % 10 == 0 and show_ratio == True):\n\t\t\t\t\tprint(\'Test Count: \',i,\'/\',data_count)\n\t\t\t\t\n\t\t\t\ttxt = \'\'\n\t\t\t\tif(out_report == True):\n\t\t\t\t\ttxt += str(i) + \'\\n\'\n\t\t\t\t\ttxt += \'True:\\t\' + str(data_labels) + \'\\n\'\n\t\t\t\t\ttxt += \'Pred:\\t\' + str(pre) + \'\\n\'\n\t\t\t\t\ttxt += \'\\n\'\n\t\t\t\t\ttxt_obj.write(txt)\n\t\t\t\t\n\t\t\t\n\t\t\t#print(\'*[\xe6\xb5\x8b\xe8\xaf\x95\xe7\xbb\x93\xe6\x9e\x9c] \xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab \' + str_dataset + \' \xe9\x9b\x86\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\x95\xe5\xad\x97\xe9\x94\x99\xe8\xaf\xaf\xe7\x8e\x87\xef\xbc\x9a\', word_error_num / words_num * 100, \'%\')\n\t\t\tprint(\'*[Test Result] Speech Recognition \' + str_dataset + \' set word error ratio: \', word_error_num / words_num * 100, \'%\')\n\t\t\tif(out_report == True):\n\t\t\t\ttxt = \'*[\xe6\xb5\x8b\xe8\xaf\x95\xe7\xbb\x93\xe6\x9e\x9c] \xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab \' + str_dataset + \' \xe9\x9b\x86\xe8\xaf\xad\xe9\x9f\xb3\xe5\x8d\x95\xe5\xad\x97\xe9\x94\x99\xe8\xaf\xaf\xe7\x8e\x87\xef\xbc\x9a \' + str(word_error_num / words_num * 100) + \' %\'\n\t\t\t\ttxt_obj.write(txt)\n\t\t\t\ttxt_obj.close()\n\t\t\t\n\t\texcept StopIteration:\n\t\t\tprint(\'[Error] Model Test Error. please check data format.\')\n\t\n\tdef Predict(self, data_input, input_len):\n\t\t\'\'\'\n\t\t\xe9\xa2\x84\xe6\xb5\x8b\xe7\xbb\x93\xe6\x9e\x9c\n\t\t\xe8\xbf\x94\xe5\x9b\x9e\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe5\x90\x8e\xe7\x9a\x84\xe6\x8b\xbc\xe9\x9f\xb3\xe7\xac\xa6\xe5\x8f\xb7\xe5\x88\x97\xe8\xa1\xa8\n\t\t\'\'\'\n\t\t\n\t\tbatch_size = 1 \n\t\tin_len = np.zeros((batch_size),dtype = np.int32)\n\t\t\n\t\tin_len[0] = input_len\n\t\t\n\t\tx_in = np.zeros((batch_size, 1600, self.AUDIO_FEATURE_LENGTH, 1), dtype=np.float)\n\t\t\n\t\tfor i in range(batch_size):\n\t\t\tx_in[i,0:len(data_input)] = data_input\n\t\t\n\t\t\n\t\tbase_pred = self.base_model.predict(x = x_in)\n\t\t\n\t\t#print(\'base_pred:\\n\', base_pred)\n\t\t\n\t\t#y_p = base_pred\n\t\t#for j in range(200):\n\t\t#\tmean = np.sum(y_p[0][j]) / y_p[0][j].shape[0]\n\t\t#\tprint(\'max y_p:\',np.max(y_p[0][j]),\'min y_p:\',np.min(y_p[0][j]),\'mean y_p:\',mean,\'mid y_p:\',y_p[0][j][100])\n\t\t#\tprint(\'argmin:\',np.argmin(y_p[0][j]),\'argmax:\',np.argmax(y_p[0][j]))\n\t\t#\tcount=0\n\t\t#\tfor i in range(y_p[0][j].shape[0]):\n\t\t#\t\tif(y_p[0][j][i] < mean):\n\t\t#\t\t\tcount += 1\n\t\t#\tprint(\'count:\',count)\n\t\t\n\t\tbase_pred =base_pred[:, :, :]\n\t\t#base_pred =base_pred[:, 2:, :]\n\t\t\n\t\tr = K.ctc_decode(base_pred, in_len, greedy = True, beam_width=100, top_paths=1)\n\t\t\n\t\t#print(\'r\', r)\n\t\t\n\t\t\n\t\tr1 = K.get_value(r[0][0])\n\t\t#print(\'r1\', r1)\n\t\t\n\t\t\n\t\t#r2 = K.get_value(r[1])\n\t\t#print(r2)\n\t\t\n\t\tr1=r1[0]\n\t\t\n\t\treturn r1\n\t\tpass\n\t\n\tdef RecognizeSpeech(self, wavsignal, fs):\n\t\t\'\'\'\n\t\t\xe6\x9c\x80\xe7\xbb\x88\xe5\x81\x9a\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\x94\xa8\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe8\xaf\x86\xe5\x88\xab\xe4\xb8\x80\xe4\xb8\xaawav\xe5\xba\x8f\xe5\x88\x97\xe7\x9a\x84\xe8\xaf\xad\xe9\x9f\xb3\n\t\t\'\'\'\n\t\t\n\t\t#data = self.data\n\t\t#data = DataSpeech(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\')\n\t\t#data.LoadDataList(\'dev\')\n\t\t# \xe8\x8e\xb7\xe5\x8f\x96\xe8\xbe\x93\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\n\t\t#data_input = GetMfccFeature(wavsignal, fs)\n\t\t#t0=time.time()\n\t\tdata_input = GetFrequencyFeature3(wavsignal, fs)\n\t\t#t1=time.time()\n\t\t#print(\'time cost:\',t1-t0)\n\t\t\n\t\tinput_length = len(data_input)\n\t\tinput_length = input_length // 8\n\t\t\n\t\tdata_input = np.array(data_input, dtype = np.float)\n\t\t#print(data_input,data_input.shape)\n\t\tdata_input = data_input.reshape(data_input.shape[0],data_input.shape[1],1)\n\t\t#t2=time.time()\n\t\tr1 = self.Predict(data_input, input_length)\n\t\t#t3=time.time()\n\t\t#print(\'time cost:\',t3-t2)\n\t\tlist_symbol_dic = GetSymbolList(self.datapath) # \xe8\x8e\xb7\xe5\x8f\x96\xe6\x8b\xbc\xe9\x9f\xb3\xe5\x88\x97\xe8\xa1\xa8\n\t\t\n\t\t\n\t\tr_str=[]\n\t\tfor i in r1:\n\t\t\tr_str.append(list_symbol_dic[i])\n\t\t\n\t\treturn r_str\n\t\tpass\n\t\t\n\tdef RecognizeSpeech_FromFile(self, filename):\n\t\t\'\'\'\n\t\t\xe6\x9c\x80\xe7\xbb\x88\xe5\x81\x9a\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\x94\xa8\xe7\x9a\x84\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe8\xaf\x86\xe5\x88\xab\xe6\x8c\x87\xe5\xae\x9a\xe6\x96\x87\xe4\xbb\xb6\xe5\x90\x8d\xe7\x9a\x84\xe8\xaf\xad\xe9\x9f\xb3\n\t\t\'\'\'\n\t\t\n\t\twavsignal,fs = read_wav_data(filename)\n\t\t\n\t\tr = self.RecognizeSpeech(wavsignal, fs)\n\t\t\n\t\treturn r\n\t\t\n\t\tpass\n\t\t\n\t\n\t\t\n\t@property\n\tdef model(self):\n\t\t\'\'\'\n\t\t\xe8\xbf\x94\xe5\x9b\x9ekeras model\n\t\t\'\'\'\n\t\treturn self._model\n\n\nif(__name__==\'__main__\'):\n\t\n\t#import tensorflow as tf\n\t#from keras.backend.tensorflow_backend import set_session\n\t#os.environ[""CUDA_VISIBLE_DEVICES""] = ""1""\n\t#\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x85\x8d\xe7\xbd\xae\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa870%\xe7\x9a\x84GPU\n\t#config = tf.ConfigProto()\n\t#config.gpu_options.per_process_gpu_memory_fraction = 0.95\n\t#config.gpu_options.allow_growth=True   #\xe4\xb8\x8d\xe5\x85\xa8\xe9\x83\xa8\xe5\x8d\xa0\xe6\xbb\xa1\xe6\x98\xbe\xe5\xad\x98, \xe6\x8c\x89\xe9\x9c\x80\xe5\x88\x86\xe9\x85\x8d\n\t#set_session(tf.Session(config=config))\n\t\n\t\n\tdatapath =  abspath + \'\'\n\tmodelpath =  abspath + \'model_speech\'\n\t\n\t\n\tif(not os.path.exists(modelpath)): # \xe5\x88\xa4\xe6\x96\xad\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe7\x9b\xae\xe5\xbd\x95\xe6\x98\xaf\xe5\x90\xa6\xe5\xad\x98\xe5\x9c\xa8\n\t\tos.makedirs(modelpath) # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x8c\xe5\xb0\xb1\xe6\x96\xb0\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\xaa\xef\xbc\x8c\xe9\x81\xbf\xe5\x85\x8d\xe4\xb9\x8b\xe5\x90\x8e\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe7\x82\xb8\xe6\x8e\x89\n\t\n\tsystem_type = plat.system() # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa4\xe6\x96\xad\n\tif(system_type == \'Windows\'):\n\t\tdatapath = \'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\'\n\t\tmodelpath = modelpath + \'\\\\\'\n\telif(system_type == \'Linux\'):\n\t\tdatapath =  abspath + \'dataset\'\n\t\tmodelpath = modelpath + \'/\'\n\telse:\n\t\tprint(\'*[Message] Unknown System\\n\')\n\t\tdatapath = \'dataset\'\n\t\tmodelpath = modelpath + \'/\'\n\t\n\tms = ModelSpeech(datapath)\n\t\n\t\n\t#ms.LoadModel(modelpath + \'m261/speech_model261_e_0_step_98000.model\')\n\tms.TrainModel(datapath, epoch = 50, batch_size = 16, save_step = 500)\n\t#ms.TestModel(datapath, str_dataset=\'test\', data_count = 128, out_report = True)\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\ST-CMDS-20170001_1-OS\\\\20170001P00241I0053.wav\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\ST-CMDS-20170001_1-OS\\\\20170001P00020I0087.wav\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\wav\\\\train\\\\A11\\\\A11_167.WAV\')\n\t#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\wav\\\\test\\\\D4\\\\D4_750.wav\')\n\t#print(\'*[\xe6\x8f\x90\xe7\xa4\xba] \xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x9a\\n\',r)\n'"
asrserver.py,0,"b'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n""""""\n@author: nl8590687\n\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xabAPI\xe7\x9a\x84HTTP\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\xe7\xa8\x8b\xe5\xba\x8f\n\n""""""\nimport http.server\nimport urllib\nimport keras\nfrom SpeechModel251 import ModelSpeech\nfrom LanguageModel import ModelLanguage\n\ndatapath = \'./\'\nmodelpath = \'model_speech/\'\nms = ModelSpeech(datapath)\nms.LoadModel(modelpath + \'m251/speech_model251_e_0_step_12000.model\')\n\nml = ModelLanguage(\'model_language\')\nml.LoadModel()\n\nclass TestHTTPHandle(http.server.BaseHTTPRequestHandler):  \n\tdef setup(self):\n\t\tself.request.settimeout(10)\n\t\thttp.server.BaseHTTPRequestHandler.setup(self)\n\t\n\tdef _set_response(self):\n\t\tself.send_response(200)\n\t\tself.send_header(\'Content-type\', \'text/html\')\n\t\tself.end_headers()\n\t\t\n\tdef do_GET(self):  \n\t\n\t\tbuf = \'ASRT_SpeechRecognition API\'  \n\t\tself.protocal_version = \'HTTP/1.1\'   \n\t\t\n\t\tself._set_response()\n\t\t\n\t\tbuf = bytes(buf,encoding=""utf-8"")\n\t\tself.wfile.write(buf) \n\t\t\n\tdef do_POST(self):  \n\t\t\'\'\'\n\t\t\xe5\xa4\x84\xe7\x90\x86\xe9\x80\x9a\xe8\xbf\x87POST\xe6\x96\xb9\xe5\xbc\x8f\xe4\xbc\xa0\xe9\x80\x92\xe8\xbf\x87\xe6\x9d\xa5\xe5\xb9\xb6\xe6\x8e\xa5\xe6\x94\xb6\xe7\x9a\x84\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\n\t\t\xe9\x80\x9a\xe8\xbf\x87\xe8\xaf\xad\xe9\x9f\xb3\xe6\xa8\xa1\xe5\x9e\x8b\xe5\x92\x8c\xe8\xaf\xad\xe8\xa8\x80\xe6\xa8\xa1\xe5\x9e\x8b\xe8\xae\xa1\xe7\xae\x97\xe5\xbe\x97\xe5\x88\xb0\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c\xe5\xb9\xb6\xe8\xbf\x94\xe5\x9b\x9e\n\t\t\'\'\'\n\t\tpath = self.path  \n\t\tprint(path)  \n\t\t#\xe8\x8e\xb7\xe5\x8f\x96post\xe6\x8f\x90\xe4\xba\xa4\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae  \n\t\tdatas = self.rfile.read(int(self.headers[\'content-length\']))  \n\t\t#datas = urllib.unquote(datas).decode(""utf-8"", \'ignore\') \n\t\tdatas = datas.decode(\'utf-8\')\n\t\tdatas_split = datas.split(\'&\')\n\t\ttoken = \'\'\n\t\tfs = 0\n\t\twavs = []\n\t\t#type = \'wavfilebytes\' # wavfilebytes or python-list\n\t\t\n\t\tfor line in datas_split:\n\t\t\t[key, value]=line.split(\'=\')\n\t\t\tif(\'wavs\' == key and \'\' != value):\n\t\t\t\twavs.append(int(value))\n\t\t\telif(\'fs\' == key):\n\t\t\t\tfs = int(value)\n\t\t\telif(\'token\' == key ):\n\t\t\t\ttoken = value\n\t\t\t#elif(\'type\' == key):\n\t\t\t#\ttype = value\n\t\t\telse:\n\t\t\t\tprint(key, value)\n\t\t\t\n\t\tif(token != \'qwertasd\'):\n\t\t\tbuf = \'403\'\n\t\t\tprint(buf)\n\t\t\tbuf = bytes(buf,encoding=""utf-8"")\n\t\t\tself.wfile.write(buf)  \n\t\t\treturn\n\t\t\n\t\t#if(\'python-list\' == type):\n\t\tif(len(wavs)>0):\n\t\t\tr = self.recognize([wavs], fs)\n\t\telse:\n\t\t\tr = \'\'\n\t\t#else:\n\t\t#\tr = self.recognize_from_file(\'\')\n\t\t\n\t\tif(token == \'qwertasd\'):\n\t\t\t#buf = \'\xe6\x88\x90\xe5\x8a\x9f\\n\'+\'wavs:\\n\'+str(wavs)+\'\\nfs:\\n\'+str(fs)\n\t\t\tbuf = r\n\t\telse:\n\t\t\tbuf = \'403\'\n\t\t\n\t\t#print(datas)\n\t\t\n\t\tself._set_response()\n\t\t\n\t\t#buf = \'<!DOCTYPE HTML> \\n<html> \\n<head>\\n<title>Post page</title>\\n</head> \\n<body>Post Data:%s  <br />Path:%s\\n</body>  \\n</html>\'%(datas,self.path)  \n\t\tprint(buf)\n\t\tbuf = bytes(buf,encoding=""utf-8"")\n\t\tself.wfile.write(buf)  \n\t\t\n\tdef recognize(self, wavs, fs):\n\t\tr=\'\'\n\t\ttry:\n\t\t\tr_speech = ms.RecognizeSpeech(wavs, fs)\n\t\t\tprint(r_speech)\n\t\t\tstr_pinyin = r_speech\n\t\t\tr = ml.SpeechToText(str_pinyin)\n\t\texcept:\n\t\t\tr=\'\'\n\t\t\tprint(\'[*Message] Server raise a bug. \')\n\t\treturn r\n\t\tpass\n\t\n\tdef recognize_from_file(self, filename):\n\t\tpass\n\nimport socket\n\nclass HTTPServerV6(http.server.HTTPServer):\n\taddress_family = socket.AF_INET6\n\ndef start_server(ip, port):  \n\t\n\tif(\':\' in ip):\n\t\thttp_server = HTTPServerV6((ip, port), TestHTTPHandle)\n\telse:\n\t\thttp_server = http.server.HTTPServer((ip, int(port)), TestHTTPHandle)\n\t\n\tprint(\'\xe6\x9c\x8d\xe5\x8a\xa1\xe5\x99\xa8\xe5\xb7\xb2\xe5\xbc\x80\xe5\x90\xaf\')\n\t\n\ttry:\n\t\thttp_server.serve_forever() #\xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\x80\xe7\x9b\xb4\xe7\x9b\x91\xe5\x90\xac\xe5\xb9\xb6\xe6\x8e\xa5\xe6\x94\xb6\xe8\xaf\xb7\xe6\xb1\x82  \n\texcept KeyboardInterrupt:\n\t\tpass\n\thttp_server.server_close()\n\tprint(\'HTTP server closed\')\n\t\nif __name__ == \'__main__\':\n\tstart_server(\'\', 20000) # For IPv4 Network Only\n\t#start_server(\'::\', 20000) # For IPv6 Network\n\t\n\t\n\t\n\t\n'"
readdata24.py,0,"b'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport platform as plat\nimport os\n\nimport numpy as np\nfrom general_function.file_wav import *\nfrom general_function.file_dict import *\n\nimport random\n#import scipy.io.wavfile as wav\nfrom scipy.fftpack import fft\n\nclass DataSpeech():\n\t\n\t\n\tdef __init__(self, path, type, LoadToMem = False, MemWavCount = 10000):\n\t\t\'\'\'\n\t\t\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n\t\t\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\n\t\t\tpath\xef\xbc\x9a\xe6\x95\xb0\xe6\x8d\xae\xe5\xad\x98\xe6\x94\xbe\xe4\xbd\x8d\xe7\xbd\xae\xe6\xa0\xb9\xe7\x9b\xae\xe5\xbd\x95\n\t\t\'\'\'\n\t\t\n\t\tsystem_type = plat.system() # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa4\xe6\x96\xad\n\t\t\n\t\tself.datapath = path; # \xe6\x95\xb0\xe6\x8d\xae\xe5\xad\x98\xe6\x94\xbe\xe4\xbd\x8d\xe7\xbd\xae\xe6\xa0\xb9\xe7\x9b\xae\xe5\xbd\x95\n\t\tself.type = type # \xe6\x95\xb0\xe6\x8d\xae\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe5\x88\x86\xe4\xb8\xba\xe4\xb8\x89\xe7\xa7\x8d\xef\xbc\x9a\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86(train)\xe3\x80\x81\xe9\xaa\x8c\xe8\xaf\x81\xe9\x9b\x86(dev)\xe3\x80\x81\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86(test)\n\t\t\n\t\tself.slash = \'\'\n\t\tif(system_type == \'Windows\'):\n\t\t\tself.slash=\'\\\\\' # \xe5\x8f\x8d\xe6\x96\x9c\xe6\x9d\xa0\n\t\telif(system_type == \'Linux\'):\n\t\t\tself.slash=\'/\' # \xe6\xad\xa3\xe6\x96\x9c\xe6\x9d\xa0\n\t\telse:\n\t\t\tprint(\'*[Message] Unknown System\\n\')\n\t\t\tself.slash=\'/\' # \xe6\xad\xa3\xe6\x96\x9c\xe6\x9d\xa0\n\t\t\n\t\tif(self.slash != self.datapath[-1]): # \xe5\x9c\xa8\xe7\x9b\xae\xe5\xbd\x95\xe8\xb7\xaf\xe5\xbe\x84\xe6\x9c\xab\xe5\xb0\xbe\xe5\xa2\x9e\xe5\x8a\xa0\xe6\x96\x9c\xe6\x9d\xa0\n\t\t\tself.datapath = self.datapath + self.slash\n\t\t\n\t\t\n\t\tself.dic_wavlist_thchs30 = {}\n\t\tself.dic_symbollist_thchs30 = {}\n\t\tself.dic_wavlist_stcmds = {}\n\t\tself.dic_symbollist_stcmds = {}\n\t\t\n\t\tself.SymbolNum = 0 # \xe8\xae\xb0\xe5\xbd\x95\xe6\x8b\xbc\xe9\x9f\xb3\xe7\xac\xa6\xe5\x8f\xb7\xe6\x95\xb0\xe9\x87\x8f\n\t\tself.list_symbol = self.GetSymbolList() # \xe5\x85\xa8\xe9\x83\xa8\xe6\xb1\x89\xe8\xaf\xad\xe6\x8b\xbc\xe9\x9f\xb3\xe7\xac\xa6\xe5\x8f\xb7\xe5\x88\x97\xe8\xa1\xa8\n\t\tself.list_wavnum=[] # wav\xe6\x96\x87\xe4\xbb\xb6\xe6\xa0\x87\xe8\xae\xb0\xe5\x88\x97\xe8\xa1\xa8\n\t\tself.list_symbolnum=[] # symbol\xe6\xa0\x87\xe8\xae\xb0\xe5\x88\x97\xe8\xa1\xa8\n\t\t\n\t\tself.DataNum = 0 # \xe8\xae\xb0\xe5\xbd\x95\xe6\x95\xb0\xe6\x8d\xae\xe9\x87\x8f\n\t\tself.LoadDataList()\n\t\t\n\t\tself.wavs_data = []\n\t\tself.LoadToMem = LoadToMem\n\t\tself.MemWavCount = MemWavCount\n\t\tpass\n\t\n\tdef LoadDataList(self):\n\t\t\'\'\'\n\t\t\xe5\x8a\xa0\xe8\xbd\xbd\xe7\x94\xa8\xe4\xba\x8e\xe8\xae\xa1\xe7\xae\x97\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\x88\x97\xe8\xa1\xa8\n\t\t\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\n\t\t\ttype\xef\xbc\x9a\xe9\x80\x89\xe5\x8f\x96\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe7\xb1\xbb\xe5\x9e\x8b\n\t\t\t\ttrain \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\n\t\t\t\tdev \xe5\xbc\x80\xe5\x8f\x91\xe9\x9b\x86\n\t\t\t\ttest \xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\n\t\t\'\'\'\n\t\t# \xe8\xae\xbe\xe5\xae\x9a\xe9\x80\x89\xe5\x8f\x96\xe5\x93\xaa\xe4\xb8\x80\xe9\xa1\xb9\xe4\xbd\x9c\xe4\xb8\xba\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\n\t\tif(self.type==\'train\'):\n\t\t\tfilename_wavlist_thchs30 = \'thchs30\' + self.slash + \'train.wav.lst\'\n\t\t\tfilename_wavlist_stcmds = \'st-cmds\' + self.slash + \'train.wav.txt\'\n\t\t\tfilename_symbollist_thchs30 = \'thchs30\' + self.slash + \'train.syllable.txt\'\n\t\t\tfilename_symbollist_stcmds = \'st-cmds\' + self.slash + \'train.syllable.txt\'\n\t\telif(self.type==\'dev\'):\n\t\t\tfilename_wavlist_thchs30 = \'thchs30\' + self.slash + \'cv.wav.lst\'\n\t\t\tfilename_wavlist_stcmds = \'st-cmds\' + self.slash + \'dev.wav.txt\'\n\t\t\tfilename_symbollist_thchs30 = \'thchs30\' + self.slash + \'cv.syllable.txt\'\n\t\t\tfilename_symbollist_stcmds = \'st-cmds\' + self.slash + \'dev.syllable.txt\'\n\t\telif(self.type==\'test\'):\n\t\t\tfilename_wavlist_thchs30 = \'thchs30\' + self.slash + \'test.wav.lst\'\n\t\t\tfilename_wavlist_stcmds = \'st-cmds\' + self.slash + \'test.wav.txt\'\n\t\t\tfilename_symbollist_thchs30 = \'thchs30\' + self.slash + \'test.syllable.txt\'\n\t\t\tfilename_symbollist_stcmds = \'st-cmds\' + self.slash + \'test.syllable.txt\'\n\t\telse:\n\t\t\tfilename_wavlist = \'\' # \xe9\xbb\x98\xe8\xae\xa4\xe7\x95\x99\xe7\xa9\xba\n\t\t\tfilename_symbollist = \'\'\n\t\t# \xe8\xaf\xbb\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xe5\x88\x97\xe8\xa1\xa8\xef\xbc\x8cwav\xe6\x96\x87\xe4\xbb\xb6\xe5\x88\x97\xe8\xa1\xa8\xe5\x92\x8c\xe5\x85\xb6\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe7\xac\xa6\xe5\x8f\xb7\xe5\x88\x97\xe8\xa1\xa8\n\t\tself.dic_wavlist_thchs30,self.list_wavnum_thchs30 = get_wav_list(self.datapath + filename_wavlist_thchs30)\n\t\tself.dic_wavlist_stcmds,self.list_wavnum_stcmds = get_wav_list(self.datapath + filename_wavlist_stcmds)\n\t\t\n\t\tself.dic_symbollist_thchs30,self.list_symbolnum_thchs30 = get_wav_symbol(self.datapath + filename_symbollist_thchs30)\n\t\tself.dic_symbollist_stcmds,self.list_symbolnum_stcmds = get_wav_symbol(self.datapath + filename_symbollist_stcmds)\n\t\tself.DataNum = self.GetDataNum()\n\t\n\tdef GetDataNum(self):\n\t\t\'\'\'\n\t\t\xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\n\t\t\xe5\xbd\x93wav\xe6\x95\xb0\xe9\x87\x8f\xe5\x92\x8csymbol\xe6\x95\xb0\xe9\x87\x8f\xe4\xb8\x80\xe8\x87\xb4\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe8\xbf\x94\xe5\x9b\x9e\xe6\xad\xa3\xe7\xa1\xae\xe7\x9a\x84\xe5\x80\xbc\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe8\xbf\x94\xe5\x9b\x9e-1\xef\xbc\x8c\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x87\xba\xe9\x94\x99\xe3\x80\x82\n\t\t\'\'\'\n\t\tnum_wavlist_thchs30 = len(self.dic_wavlist_thchs30)\n\t\tnum_symbollist_thchs30 = len(self.dic_symbollist_thchs30)\n\t\tnum_wavlist_stcmds = len(self.dic_wavlist_stcmds)\n\t\tnum_symbollist_stcmds = len(self.dic_symbollist_stcmds)\n\t\tif(num_wavlist_thchs30 == num_symbollist_thchs30 and num_wavlist_stcmds == num_symbollist_stcmds):\n\t\t\tDataNum = num_wavlist_thchs30 + num_wavlist_stcmds\n\t\telse:\n\t\t\tDataNum = -1\n\t\t\n\t\treturn DataNum\n\t\t\n\t\t\n\tdef GetData(self,n_start,n_amount=1):\n\t\t\'\'\'\n\t\t\xe8\xaf\xbb\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe8\xbe\x93\xe5\x85\xa5\xe5\x80\xbc\xe5\x92\x8c\xe8\xbe\x93\xe5\x87\xba\xe5\x80\xbc\xe7\x9f\xa9\xe9\x98\xb5(\xe5\x8f\xaf\xe7\x9b\xb4\xe6\x8e\xa5\xe7\x94\xa8\xe4\xba\x8e\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe8\xae\xad\xe7\xbb\x83\xe7\x9a\x84\xe9\x82\xa3\xe7\xa7\x8d)\n\t\t\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\n\t\t\tn_start\xef\xbc\x9a\xe4\xbb\x8e\xe7\xbc\x96\xe5\x8f\xb7\xe4\xb8\xban_start\xe6\x95\xb0\xe6\x8d\xae\xe5\xbc\x80\xe5\xa7\x8b\xe9\x80\x89\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\n\t\t\tn_amount\xef\xbc\x9a\xe9\x80\x89\xe5\x8f\x96\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba1\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb8\x80\xe6\xac\xa1\xe4\xb8\x80\xe4\xb8\xaawav\xe6\x96\x87\xe4\xbb\xb6\n\t\t\xe8\xbf\x94\xe5\x9b\x9e\xef\xbc\x9a\n\t\t\t\xe4\xb8\x89\xe4\xb8\xaa\xe5\x8c\x85\xe5\x90\xabwav\xe7\x89\xb9\xe5\xbe\x81\xe7\x9f\xa9\xe9\x98\xb5\xe7\x9a\x84\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe8\xbe\x93\xe5\x85\xa5\xe5\x80\xbc\xef\xbc\x8c\xe5\x92\x8c\xe4\xb8\x80\xe4\xb8\xaa\xe6\xa0\x87\xe5\xae\x9a\xe7\x9a\x84\xe7\xb1\xbb\xe5\x88\xab\xe7\x9f\xa9\xe9\x98\xb5\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe8\xbe\x93\xe5\x87\xba\xe5\x80\xbc\n\t\t\'\'\'\n\t\tbili = 2\n\t\tif(self.type==\'train\'):\n\t\t\tbili = 11\n\t\t\t\n\t\t# \xe8\xaf\xbb\xe5\x8f\x96\xe4\xb8\x80\xe4\xb8\xaa\xe6\x96\x87\xe4\xbb\xb6\n\t\tif(n_start % bili == 0):\n\t\t\tfilename = self.dic_wavlist_thchs30[self.list_wavnum_thchs30[n_start // bili]]\n\t\t\tlist_symbol=self.dic_symbollist_thchs30[self.list_symbolnum_thchs30[n_start // bili]]\n\t\telse:\n\t\t\tn = n_start // bili * (bili - 1)\n\t\t\tyushu = n_start % bili\n\t\t\tlength=len(self.list_wavnum_stcmds)\n\t\t\tfilename = self.dic_wavlist_stcmds[self.list_wavnum_stcmds[(n + yushu - 1)%length]]\n\t\t\tlist_symbol=self.dic_symbollist_stcmds[self.list_symbolnum_stcmds[(n + yushu - 1)%length]]\n\t\t\n\t\tif(\'Windows\' == plat.system()):\n\t\t\tfilename = filename.replace(\'/\',\'\\\\\') # windows\xe7\xb3\xbb\xe7\xbb\x9f\xe4\xb8\x8b\xe9\x9c\x80\xe8\xa6\x81\xe6\x89\xa7\xe8\xa1\x8c\xe8\xbf\x99\xe4\xb8\x80\xe8\xa1\x8c\xef\xbc\x8c\xe5\xaf\xb9\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe5\x81\x9a\xe7\x89\xb9\xe5\x88\xab\xe5\xa4\x84\xe7\x90\x86\n\t\t\n\t\twavsignal,fs=read_wav_data(self.datapath + filename)\n\t\t\n\t\t# \xe8\x8e\xb7\xe5\x8f\x96\xe8\xbe\x93\xe5\x87\xba\xe7\x89\xb9\xe5\xbe\x81\n\t\t\n\t\tfeat_out=[]\n\t\t#print(""\xe6\x95\xb0\xe6\x8d\xae\xe7\xbc\x96\xe5\x8f\xb7"",n_start,filename)\n\t\tfor i in list_symbol:\n\t\t\tif(\'\'!=i):\n\t\t\t\tn=self.SymbolToNum(i)\n\t\t\t\t#v=self.NumToVector(n)\n\t\t\t\t#feat_out.append(v)\n\t\t\t\tfeat_out.append(n)\n\t\t#print(\'feat_out:\',feat_out)\n\t\t\n\t\t# \xe8\x8e\xb7\xe5\x8f\x96\xe8\xbe\x93\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\n\t\tdata_input = GetFrequencyFeature3(wavsignal,fs)\n\t\t#data_input = np.array(data_input)\n\t\tdata_input = data_input.reshape(data_input.shape[0],data_input.shape[1],1)\n\t\t#arr_zero = np.zeros((1, 39), dtype=np.int16) #\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\xa8\xe6\x98\xaf0\xe7\x9a\x84\xe8\xa1\x8c\xe5\x90\x91\xe9\x87\x8f\n\t\t\n\t\t#while(len(data_input)<1600): #\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\x8d\xe5\xa4\x9f\xe6\x97\xb6\xe8\xa1\xa5\xe5\x85\xa8\xe5\x88\xb01600\n\t\t#\tdata_input = np.row_stack((data_input,arr_zero))\n\t\t\n\t\t#data_input = data_input.T\n\t\tdata_label = np.array(feat_out)\n\t\treturn data_input, data_label\n\t\n\tdef data_genetator(self, batch_size=32, audio_length = 1600):\n\t\t\'\'\'\n\t\t\xe6\x95\xb0\xe6\x8d\xae\xe7\x94\x9f\xe6\x88\x90\xe5\x99\xa8\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe7\x94\xa8\xe4\xba\x8eKeras\xe7\x9a\x84generator_fit\xe8\xae\xad\xe7\xbb\x83\n\t\tbatch_size: \xe4\xb8\x80\xe6\xac\xa1\xe4\xba\xa7\xe7\x94\x9f\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe9\x87\x8f\n\t\t\xe9\x9c\x80\xe8\xa6\x81\xe5\x86\x8d\xe4\xbf\xae\xe6\x94\xb9\xe3\x80\x82\xe3\x80\x82\xe3\x80\x82\n\t\t\'\'\'\n\t\t\n\t\t#labels = []\n\t\t#for i in range(0,batch_size):\n\t\t#\t#input_length.append([1500])\n\t\t#\tlabels.append([0.0])\n\t\t\n\t\t\n\t\t\n\t\t#labels = np.array(labels, dtype = np.float)\n\t\tlabels = np.zeros((batch_size,1), dtype = np.float)\n\t\t#print(input_length,len(input_length))\n\t\t\n\t\twhile True:\n\t\t\tX = np.zeros((batch_size, audio_length, 200, 1), dtype = np.float)\n\t\t\t#y = np.zeros((batch_size, 64, self.SymbolNum), dtype=np.int16)\n\t\t\ty = np.zeros((batch_size, 64), dtype=np.int16)\n\t\t\t\n\t\t\t#generator = ImageCaptcha(width=width, height=height)\n\t\t\tinput_length = []\n\t\t\tlabel_length = []\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tfor i in range(batch_size):\n\t\t\t\tran_num = random.randint(0,self.DataNum - 1) # \xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\x80\xe4\xb8\xaa\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\n\t\t\t\tdata_input, data_labels = self.GetData(ran_num)  # \xe9\x80\x9a\xe8\xbf\x87\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xe5\x8f\x96\xe4\xb8\x80\xe4\xb8\xaa\xe6\x95\xb0\xe6\x8d\xae\n\t\t\t\t#data_input, data_labels = self.GetData((ran_num + i) % self.DataNum)  # \xe4\xbb\x8e\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xe5\xbc\x80\xe5\xa7\x8b\xe8\xbf\x9e\xe7\xbb\xad\xe5\x90\x91\xe5\x90\x8e\xe5\x8f\x96\xe4\xb8\x80\xe5\xae\x9a\xe6\x95\xb0\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\xae\n\t\t\t\t\n\t\t\t\t# \xe5\x85\xb3\xe4\xba\x8e\xe4\xb8\x8b\xe9\x9d\xa2\xe8\xbf\x99\xe4\xb8\x80\xe8\xa1\x8c\xe5\x8f\x96\xe6\x95\xb4\xe9\x99\xa4\xe4\xbb\xa58 \xe5\xb9\xb6\xe5\x8a\xa08\xe7\x9a\x84\xe4\xbd\x99\xe6\x95\xb0\xef\xbc\x8c\xe5\x9c\xa8\xe5\xae\x9e\xe9\x99\x85\xe4\xb8\xad\xe5\xa6\x82\xe6\x9e\x9c\xe9\x81\x87\xe5\x88\xb0\xe6\x8a\xa5\xe9\x94\x99\xef\xbc\x8c\xe5\x8f\xaf\xe5\xb0\x9d\xe8\xaf\x95\xe5\x8f\xaa\xe5\x9c\xa8\xe6\x9c\x89\xe4\xbd\x99\xe6\x95\xb0\xe6\x97\xb6+1\xef\xbc\x8c\xe6\xb2\xa1\xe6\x9c\x89\xe4\xbd\x99\xe6\x95\xb0\xe6\x97\xb6+0\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\xb9\xb2\xe8\x84\x86\xe9\x83\xbd\xe4\xb8\x8d\xe5\x8a\xa0\xef\xbc\x8c\xe5\x8f\xaa\xe7\x95\x99\xe6\x95\xb4\xe9\x99\xa4\n\t\t\t\tinput_length.append(data_input.shape[0] // 8 + data_input.shape[0] % 8)\n\t\t\t\t#print(data_input, data_labels)\n\t\t\t\t#print(\'data_input\xe9\x95\xbf\xe5\xba\xa6:\',len(data_input))\n\t\t\t\t\n\t\t\t\tX[i,0:len(data_input)] = data_input\n\t\t\t\t#print(\'data_labels\xe9\x95\xbf\xe5\xba\xa6:\',len(data_labels))\n\t\t\t\t#print(data_labels)\n\t\t\t\ty[i,0:len(data_labels)] = data_labels\n\t\t\t\t#print(i,y[i].shape)\n\t\t\t\t#y[i] = y[i].T\n\t\t\t\t#print(i,y[i].shape)\n\t\t\t\tlabel_length.append([len(data_labels)])\n\t\t\t\n\t\t\tlabel_length = np.matrix(label_length)\n\t\t\tinput_length = np.array([input_length]).T\n\t\t\t#input_length = np.array(input_length)\n\t\t\t#print(\'input_length:\\n\',input_length)\n\t\t\t#X=X.reshape(batch_size, audio_length, 200, 1)\n\t\t\t#print(X)\n\t\t\tyield [X, y, input_length, label_length ], labels\n\t\tpass\n\t\t\n\tdef GetSymbolList(self):\n\t\t\'\'\'\n\t\t\xe5\x8a\xa0\xe8\xbd\xbd\xe6\x8b\xbc\xe9\x9f\xb3\xe7\xac\xa6\xe5\x8f\xb7\xe5\x88\x97\xe8\xa1\xa8\xef\xbc\x8c\xe7\x94\xa8\xe4\xba\x8e\xe6\xa0\x87\xe8\xae\xb0\xe7\xac\xa6\xe5\x8f\xb7\n\t\t\xe8\xbf\x94\xe5\x9b\x9e\xe4\xb8\x80\xe4\xb8\xaa\xe5\x88\x97\xe8\xa1\xa8list\xe7\xb1\xbb\xe5\x9e\x8b\xe5\x8f\x98\xe9\x87\x8f\n\t\t\'\'\'\n\t\ttxt_obj=open(\'dict.txt\',\'r\',encoding=\'UTF-8\') # \xe6\x89\x93\xe5\xbc\x80\xe6\x96\x87\xe4\xbb\xb6\xe5\xb9\xb6\xe8\xaf\xbb\xe5\x85\xa5\n\t\ttxt_text=txt_obj.read()\n\t\ttxt_lines=txt_text.split(\'\\n\') # \xe6\x96\x87\xe6\x9c\xac\xe5\x88\x86\xe5\x89\xb2\n\t\tlist_symbol=[] # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe7\xac\xa6\xe5\x8f\xb7\xe5\x88\x97\xe8\xa1\xa8\n\t\tfor i in txt_lines:\n\t\t\tif(i!=\'\'):\n\t\t\t\ttxt_l=i.split(\'\\t\')\n\t\t\t\tlist_symbol.append(txt_l[0])\n\t\ttxt_obj.close()\n\t\tlist_symbol.append(\'_\')\n\t\tself.SymbolNum = len(list_symbol)\n\t\treturn list_symbol\n\n\tdef GetSymbolNum(self):\n\t\t\'\'\'\n\t\t\xe8\x8e\xb7\xe5\x8f\x96\xe6\x8b\xbc\xe9\x9f\xb3\xe7\xac\xa6\xe5\x8f\xb7\xe6\x95\xb0\xe9\x87\x8f\n\t\t\'\'\'\n\t\treturn len(self.list_symbol)\n\t\t\n\tdef SymbolToNum(self,symbol):\n\t\t\'\'\'\n\t\t\xe7\xac\xa6\xe5\x8f\xb7\xe8\xbd\xac\xe4\xb8\xba\xe6\x95\xb0\xe5\xad\x97\n\t\t\'\'\'\n\t\tif(symbol != \'\'):\n\t\t\treturn self.list_symbol.index(symbol)\n\t\treturn self.SymbolNum\n\t\n\tdef NumToVector(self,num):\n\t\t\'\'\'\n\t\t\xe6\x95\xb0\xe5\xad\x97\xe8\xbd\xac\xe4\xb8\xba\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\x90\x91\xe9\x87\x8f\n\t\t\'\'\'\n\t\tv_tmp=[]\n\t\tfor i in range(0,len(self.list_symbol)):\n\t\t\tif(i==num):\n\t\t\t\tv_tmp.append(1)\n\t\t\telse:\n\t\t\t\tv_tmp.append(0)\n\t\tv=np.array(v_tmp)\n\t\treturn v\n\t\nif(__name__==\'__main__\'):\n\t#path=\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\'\n\t#l=DataSpeech(path)\n\t#l.LoadDataList(\'train\')\n\t#print(l.GetDataNum())\n\t#print(l.GetData(0))\n\t#aa=l.data_genetator()\n\t#for i in aa:\n\t\t#a,b=i\n\t#print(a,b)\n\tpass\n\t'"
readdata24_limitless.py,0,"b'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\'\'\'\n@author: nl8590687\n\xe4\xb8\x80\xe4\xb8\xaa\xe5\xaf\xb9\xe4\xba\x8e\xe5\x8d\x95\xe4\xb8\x80\xe9\x9f\xb3\xe9\xa2\x91\xe6\x97\xb6\xe9\x97\xb4\xe9\x95\xbf\xe5\xba\xa6\xe4\xb8\x8d\xe4\xbd\x9c\xe9\x99\x90\xe5\x88\xb6\xe7\x9a\x84\xe7\x89\x88\xe6\x9c\xac\xef\xbc\x8c\xe6\xad\xa3\xe5\x9c\xa8\xe6\xb5\x8b\xe8\xaf\x95\n\'\'\'\nimport platform as plat\nimport os\n\nimport numpy as np\nfrom general_function.file_wav import *\nfrom general_function.file_dict import *\n\nimport random\n#import scipy.io.wavfile as wav\nfrom scipy.fftpack import fft\n\nclass DataSpeech():\n\t\n\t\n\tdef __init__(self, path, type, LoadToMem = False, MemWavCount = 10000):\n\t\t\'\'\'\n\t\t\xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\n\t\t\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\n\t\t\tpath\xef\xbc\x9a\xe6\x95\xb0\xe6\x8d\xae\xe5\xad\x98\xe6\x94\xbe\xe4\xbd\x8d\xe7\xbd\xae\xe6\xa0\xb9\xe7\x9b\xae\xe5\xbd\x95\n\t\t\'\'\'\n\t\t\n\t\tsystem_type = plat.system() # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa4\xe6\x96\xad\n\t\t\n\t\tself.datapath = path; # \xe6\x95\xb0\xe6\x8d\xae\xe5\xad\x98\xe6\x94\xbe\xe4\xbd\x8d\xe7\xbd\xae\xe6\xa0\xb9\xe7\x9b\xae\xe5\xbd\x95\n\t\tself.type = type # \xe6\x95\xb0\xe6\x8d\xae\xe7\xb1\xbb\xe5\x9e\x8b\xef\xbc\x8c\xe5\x88\x86\xe4\xb8\xba\xe4\xb8\x89\xe7\xa7\x8d\xef\xbc\x9a\xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86(train)\xe3\x80\x81\xe9\xaa\x8c\xe8\xaf\x81\xe9\x9b\x86(dev)\xe3\x80\x81\xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86(test)\n\t\t\n\t\tself.slash = \'\'\n\t\tif(system_type == \'Windows\'):\n\t\t\tself.slash=\'\\\\\' # \xe5\x8f\x8d\xe6\x96\x9c\xe6\x9d\xa0\n\t\telif(system_type == \'Linux\'):\n\t\t\tself.slash=\'/\' # \xe6\xad\xa3\xe6\x96\x9c\xe6\x9d\xa0\n\t\telse:\n\t\t\tprint(\'*[Message] Unknown System\\n\')\n\t\t\tself.slash=\'/\' # \xe6\xad\xa3\xe6\x96\x9c\xe6\x9d\xa0\n\t\t\n\t\tif(self.slash != self.datapath[-1]): # \xe5\x9c\xa8\xe7\x9b\xae\xe5\xbd\x95\xe8\xb7\xaf\xe5\xbe\x84\xe6\x9c\xab\xe5\xb0\xbe\xe5\xa2\x9e\xe5\x8a\xa0\xe6\x96\x9c\xe6\x9d\xa0\n\t\t\tself.datapath = self.datapath + self.slash\n\t\t\n\t\t\n\t\tself.dic_wavlist_thchs30 = {}\n\t\tself.dic_symbollist_thchs30 = {}\n\t\tself.dic_wavlist_stcmds = {}\n\t\tself.dic_symbollist_stcmds = {}\n\t\t\n\t\tself.SymbolNum = 0 # \xe8\xae\xb0\xe5\xbd\x95\xe6\x8b\xbc\xe9\x9f\xb3\xe7\xac\xa6\xe5\x8f\xb7\xe6\x95\xb0\xe9\x87\x8f\n\t\tself.list_symbol = self.GetSymbolList() # \xe5\x85\xa8\xe9\x83\xa8\xe6\xb1\x89\xe8\xaf\xad\xe6\x8b\xbc\xe9\x9f\xb3\xe7\xac\xa6\xe5\x8f\xb7\xe5\x88\x97\xe8\xa1\xa8\n\t\tself.list_wavnum=[] # wav\xe6\x96\x87\xe4\xbb\xb6\xe6\xa0\x87\xe8\xae\xb0\xe5\x88\x97\xe8\xa1\xa8\n\t\tself.list_symbolnum=[] # symbol\xe6\xa0\x87\xe8\xae\xb0\xe5\x88\x97\xe8\xa1\xa8\n\t\t\n\t\tself.DataNum = 0 # \xe8\xae\xb0\xe5\xbd\x95\xe6\x95\xb0\xe6\x8d\xae\xe9\x87\x8f\n\t\tself.LoadDataList()\n\t\t\n\t\tself.wavs_data = []\n\t\tself.LoadToMem = LoadToMem\n\t\tself.MemWavCount = MemWavCount\n\t\tpass\n\t\n\tdef LoadDataList(self):\n\t\t\'\'\'\n\t\t\xe5\x8a\xa0\xe8\xbd\xbd\xe7\x94\xa8\xe4\xba\x8e\xe8\xae\xa1\xe7\xae\x97\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe5\x88\x97\xe8\xa1\xa8\n\t\t\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\n\t\t\ttype\xef\xbc\x9a\xe9\x80\x89\xe5\x8f\x96\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe7\xb1\xbb\xe5\x9e\x8b\n\t\t\t\ttrain \xe8\xae\xad\xe7\xbb\x83\xe9\x9b\x86\n\t\t\t\tdev \xe5\xbc\x80\xe5\x8f\x91\xe9\x9b\x86\n\t\t\t\ttest \xe6\xb5\x8b\xe8\xaf\x95\xe9\x9b\x86\n\t\t\'\'\'\n\t\t# \xe8\xae\xbe\xe5\xae\x9a\xe9\x80\x89\xe5\x8f\x96\xe5\x93\xaa\xe4\xb8\x80\xe9\xa1\xb9\xe4\xbd\x9c\xe4\xb8\xba\xe8\xa6\x81\xe4\xbd\xbf\xe7\x94\xa8\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\n\t\tif(self.type==\'train\'):\n\t\t\tfilename_wavlist_thchs30 = \'thchs30\' + self.slash + \'train.wav.lst\'\n\t\t\tfilename_wavlist_stcmds = \'st-cmds\' + self.slash + \'train.wav.txt\'\n\t\t\tfilename_symbollist_thchs30 = \'thchs30\' + self.slash + \'train.syllable.txt\'\n\t\t\tfilename_symbollist_stcmds = \'st-cmds\' + self.slash + \'train.syllable.txt\'\n\t\telif(self.type==\'dev\'):\n\t\t\tfilename_wavlist_thchs30 = \'thchs30\' + self.slash + \'cv.wav.lst\'\n\t\t\tfilename_wavlist_stcmds = \'st-cmds\' + self.slash + \'dev.wav.txt\'\n\t\t\tfilename_symbollist_thchs30 = \'thchs30\' + self.slash + \'cv.syllable.txt\'\n\t\t\tfilename_symbollist_stcmds = \'st-cmds\' + self.slash + \'dev.syllable.txt\'\n\t\telif(self.type==\'test\'):\n\t\t\tfilename_wavlist_thchs30 = \'thchs30\' + self.slash + \'test.wav.lst\'\n\t\t\tfilename_wavlist_stcmds = \'st-cmds\' + self.slash + \'test.wav.txt\'\n\t\t\tfilename_symbollist_thchs30 = \'thchs30\' + self.slash + \'test.syllable.txt\'\n\t\t\tfilename_symbollist_stcmds = \'st-cmds\' + self.slash + \'test.syllable.txt\'\n\t\telse:\n\t\t\tfilename_wavlist = \'\' # \xe9\xbb\x98\xe8\xae\xa4\xe7\x95\x99\xe7\xa9\xba\n\t\t\tfilename_symbollist = \'\'\n\t\t# \xe8\xaf\xbb\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xe5\x88\x97\xe8\xa1\xa8\xef\xbc\x8cwav\xe6\x96\x87\xe4\xbb\xb6\xe5\x88\x97\xe8\xa1\xa8\xe5\x92\x8c\xe5\x85\xb6\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe7\xac\xa6\xe5\x8f\xb7\xe5\x88\x97\xe8\xa1\xa8\n\t\tself.dic_wavlist_thchs30,self.list_wavnum_thchs30 = get_wav_list(self.datapath + filename_wavlist_thchs30)\n\t\tself.dic_wavlist_stcmds,self.list_wavnum_stcmds = get_wav_list(self.datapath + filename_wavlist_stcmds)\n\t\t\n\t\tself.dic_symbollist_thchs30,self.list_symbolnum_thchs30 = get_wav_symbol(self.datapath + filename_symbollist_thchs30)\n\t\tself.dic_symbollist_stcmds,self.list_symbolnum_stcmds = get_wav_symbol(self.datapath + filename_symbollist_stcmds)\n\t\tself.DataNum = self.GetDataNum()\n\t\n\tdef GetDataNum(self):\n\t\t\'\'\'\n\t\t\xe8\x8e\xb7\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xe7\x9a\x84\xe6\x95\xb0\xe9\x87\x8f\n\t\t\xe5\xbd\x93wav\xe6\x95\xb0\xe9\x87\x8f\xe5\x92\x8csymbol\xe6\x95\xb0\xe9\x87\x8f\xe4\xb8\x80\xe8\x87\xb4\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe8\xbf\x94\xe5\x9b\x9e\xe6\xad\xa3\xe7\xa1\xae\xe7\x9a\x84\xe5\x80\xbc\xef\xbc\x8c\xe5\x90\xa6\xe5\x88\x99\xe8\xbf\x94\xe5\x9b\x9e-1\xef\xbc\x8c\xe4\xbb\xa3\xe8\xa1\xa8\xe5\x87\xba\xe9\x94\x99\xe3\x80\x82\n\t\t\'\'\'\n\t\tnum_wavlist_thchs30 = len(self.dic_wavlist_thchs30)\n\t\tnum_symbollist_thchs30 = len(self.dic_symbollist_thchs30)\n\t\tnum_wavlist_stcmds = len(self.dic_wavlist_stcmds)\n\t\tnum_symbollist_stcmds = len(self.dic_symbollist_stcmds)\n\t\tif(num_wavlist_thchs30 == num_symbollist_thchs30 and num_wavlist_stcmds == num_symbollist_stcmds):\n\t\t\tDataNum = num_wavlist_thchs30 + num_wavlist_stcmds\n\t\telse:\n\t\t\tDataNum = -1\n\t\t\n\t\treturn DataNum\n\t\t\n\t\t\n\tdef GetData(self,n_start,n_amount=1):\n\t\t\'\'\'\n\t\t\xe8\xaf\xbb\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe8\xbe\x93\xe5\x85\xa5\xe5\x80\xbc\xe5\x92\x8c\xe8\xbe\x93\xe5\x87\xba\xe5\x80\xbc\xe7\x9f\xa9\xe9\x98\xb5(\xe5\x8f\xaf\xe7\x9b\xb4\xe6\x8e\xa5\xe7\x94\xa8\xe4\xba\x8e\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe8\xae\xad\xe7\xbb\x83\xe7\x9a\x84\xe9\x82\xa3\xe7\xa7\x8d)\n\t\t\xe5\x8f\x82\xe6\x95\xb0\xef\xbc\x9a\n\t\t\tn_start\xef\xbc\x9a\xe4\xbb\x8e\xe7\xbc\x96\xe5\x8f\xb7\xe4\xb8\xban_start\xe6\x95\xb0\xe6\x8d\xae\xe5\xbc\x80\xe5\xa7\x8b\xe9\x80\x89\xe5\x8f\x96\xe6\x95\xb0\xe6\x8d\xae\n\t\t\tn_amount\xef\xbc\x9a\xe9\x80\x89\xe5\x8f\x96\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe6\x95\xb0\xe9\x87\x8f\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe4\xb8\xba1\xef\xbc\x8c\xe5\x8d\xb3\xe4\xb8\x80\xe6\xac\xa1\xe4\xb8\x80\xe4\xb8\xaawav\xe6\x96\x87\xe4\xbb\xb6\n\t\t\xe8\xbf\x94\xe5\x9b\x9e\xef\xbc\x9a\n\t\t\t\xe4\xb8\x89\xe4\xb8\xaa\xe5\x8c\x85\xe5\x90\xabwav\xe7\x89\xb9\xe5\xbe\x81\xe7\x9f\xa9\xe9\x98\xb5\xe7\x9a\x84\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe8\xbe\x93\xe5\x85\xa5\xe5\x80\xbc\xef\xbc\x8c\xe5\x92\x8c\xe4\xb8\x80\xe4\xb8\xaa\xe6\xa0\x87\xe5\xae\x9a\xe7\x9a\x84\xe7\xb1\xbb\xe5\x88\xab\xe7\x9f\xa9\xe9\x98\xb5\xe7\xa5\x9e\xe7\xbb\x8f\xe7\xbd\x91\xe7\xbb\x9c\xe8\xbe\x93\xe5\x87\xba\xe5\x80\xbc\n\t\t\'\'\'\n\t\tbili = 2\n\t\tif(self.type==\'train\'):\n\t\t\tbili = 11\n\t\t\t\n\t\t# \xe8\xaf\xbb\xe5\x8f\x96\xe4\xb8\x80\xe4\xb8\xaa\xe6\x96\x87\xe4\xbb\xb6\n\t\tif(n_start % bili == 0):\n\t\t\tfilename = self.dic_wavlist_thchs30[self.list_wavnum_thchs30[n_start // bili]]\n\t\t\tlist_symbol=self.dic_symbollist_thchs30[self.list_symbolnum_thchs30[n_start // bili]]\n\t\telse:\n\t\t\tn = n_start // bili * (bili - 1)\n\t\t\tyushu = n_start % bili\n\t\t\tlength=len(self.list_wavnum_stcmds)\n\t\t\tfilename = self.dic_wavlist_stcmds[self.list_wavnum_stcmds[(n + yushu - 1)%length]]\n\t\t\tlist_symbol=self.dic_symbollist_stcmds[self.list_symbolnum_stcmds[(n + yushu - 1)%length]]\n\t\t\n\t\tif(\'Windows\' == plat.system()):\n\t\t\tfilename = filename.replace(\'/\',\'\\\\\') # windows\xe7\xb3\xbb\xe7\xbb\x9f\xe4\xb8\x8b\xe9\x9c\x80\xe8\xa6\x81\xe6\x89\xa7\xe8\xa1\x8c\xe8\xbf\x99\xe4\xb8\x80\xe8\xa1\x8c\xef\xbc\x8c\xe5\xaf\xb9\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe5\x81\x9a\xe7\x89\xb9\xe5\x88\xab\xe5\xa4\x84\xe7\x90\x86\n\t\t\n\t\twavsignal,fs=read_wav_data(self.datapath + filename)\n\t\t\n\t\t# \xe8\x8e\xb7\xe5\x8f\x96\xe8\xbe\x93\xe5\x87\xba\xe7\x89\xb9\xe5\xbe\x81\n\t\t\n\t\tfeat_out=[]\n\t\t#print(""\xe6\x95\xb0\xe6\x8d\xae\xe7\xbc\x96\xe5\x8f\xb7"",n_start,filename)\n\t\tfor i in list_symbol:\n\t\t\tif(\'\'!=i):\n\t\t\t\tn=self.SymbolToNum(i)\n\t\t\t\t#v=self.NumToVector(n)\n\t\t\t\t#feat_out.append(v)\n\t\t\t\tfeat_out.append(n)\n\t\t#print(\'feat_out:\',feat_out)\n\t\t\n\t\t# \xe8\x8e\xb7\xe5\x8f\x96\xe8\xbe\x93\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\n\t\tdata_input = GetFrequencyFeature3(wavsignal,fs)\n\t\t#data_input = np.array(data_input)\n\t\tdata_input = data_input.reshape(data_input.shape[0],data_input.shape[1],1)\n\t\t#arr_zero = np.zeros((1, 39), dtype=np.int16) #\xe4\xb8\x80\xe4\xb8\xaa\xe5\x85\xa8\xe6\x98\xaf0\xe7\x9a\x84\xe8\xa1\x8c\xe5\x90\x91\xe9\x87\x8f\n\t\t\n\t\t#data_input = data_input.T\n\t\tdata_label = np.array(feat_out)\n\t\treturn data_input, data_label\n\t\n\tdef data_genetator(self, batch_size=32, audio_length = 1600):\n\t\t\'\'\'\n\t\t\xe6\x95\xb0\xe6\x8d\xae\xe7\x94\x9f\xe6\x88\x90\xe5\x99\xa8\xe5\x87\xbd\xe6\x95\xb0\xef\xbc\x8c\xe7\x94\xa8\xe4\xba\x8eKeras\xe7\x9a\x84generator_fit\xe8\xae\xad\xe7\xbb\x83\n\t\tbatch_size: \xe4\xb8\x80\xe6\xac\xa1\xe4\xba\xa7\xe7\x94\x9f\xe7\x9a\x84\xe6\x95\xb0\xe6\x8d\xae\xe9\x87\x8f\n\t\t\xe9\x9c\x80\xe8\xa6\x81\xe5\x86\x8d\xe4\xbf\xae\xe6\x94\xb9\xe3\x80\x82\xe3\x80\x82\xe3\x80\x82\n\t\t\'\'\'\n\t\t\n\t\t#labels = []\n\t\t#for i in range(0,batch_size):\n\t\t#\t#input_length.append([1500])\n\t\t#\tlabels.append([0.0])\n\t\t\n\t\t\n\t\t\n\t\t#labels = np.array(labels, dtype = np.float)\n\t\tlabels = np.zeros((batch_size,1), dtype = np.float)\n\t\t#print(input_length,len(input_length))\n\t\t\n\t\twhile True:\n\t\t\t#X = np.zeros((batch_size, audio_length, 200, 1), dtype = np.float)\n\t\t\tX = []\n\t\t\t#y = np.zeros((batch_size, 64, self.SymbolNum), dtype=np.int16)\n\t\t\t#y = np.zeros((batch_size, 64), dtype=np.int16)\n\t\t\ty = []\n\t\t\t\n\t\t\t#generator = ImageCaptcha(width=width, height=height)\n\t\t\tinput_length = []\n\t\t\tlabel_length = []\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tfor i in range(batch_size):\n\t\t\t\tran_num = random.randint(0,self.DataNum - 1) # \xe8\x8e\xb7\xe5\x8f\x96\xe4\xb8\x80\xe4\xb8\xaa\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\n\t\t\t\tdata_input, data_labels = self.GetData(ran_num)  # \xe9\x80\x9a\xe8\xbf\x87\xe9\x9a\x8f\xe6\x9c\xba\xe6\x95\xb0\xe5\x8f\x96\xe4\xb8\x80\xe4\xb8\xaa\xe6\x95\xb0\xe6\x8d\xae\n\t\t\t\t\n\t\t\t\t# \xe5\x85\xb3\xe4\xba\x8e\xe4\xb8\x8b\xe9\x9d\xa2\xe8\xbf\x99\xe4\xb8\x80\xe8\xa1\x8c\xe5\x8f\x96\xe6\x95\xb4\xe9\x99\xa4\xe4\xbb\xa58 \xe5\xb9\xb6\xe5\x8a\xa08\xe7\x9a\x84\xe4\xbd\x99\xe6\x95\xb0\xef\xbc\x8c\xe5\x9c\xa8\xe5\xae\x9e\xe9\x99\x85\xe4\xb8\xad\xe5\xa6\x82\xe6\x9e\x9c\xe9\x81\x87\xe5\x88\xb0\xe6\x8a\xa5\xe9\x94\x99\xef\xbc\x8c\xe5\x8f\xaf\xe5\xb0\x9d\xe8\xaf\x95\xe5\x8f\xaa\xe5\x9c\xa8\xe6\x9c\x89\xe4\xbd\x99\xe6\x95\xb0\xe6\x97\xb6+1\xef\xbc\x8c\xe6\xb2\xa1\xe6\x9c\x89\xe4\xbd\x99\xe6\x95\xb0\xe6\x97\xb6+0\xef\xbc\x8c\xe6\x88\x96\xe8\x80\x85\xe5\xb9\xb2\xe8\x84\x86\xe9\x83\xbd\xe4\xb8\x8d\xe5\x8a\xa0\xef\xbc\x8c\xe5\x8f\xaa\xe7\x95\x99\xe6\x95\xb4\xe9\x99\xa4\n\t\t\t\tinput_length.append(data_input.shape[0] // 8 + data_input.shape[0] % 8)\n\t\t\t\t#print(data_input, data_labels)\n\t\t\t\t#print(\'data_input\xe9\x95\xbf\xe5\xba\xa6:\',len(data_input))\n\t\t\t\t\n\t\t\t\t#X[i,0:len(data_input)] = data_input\n\t\t\t\tX.append(data_input)\n\t\t\t\t#print(\'data_labels\xe9\x95\xbf\xe5\xba\xa6:\',len(data_labels))\n\t\t\t\t#print(data_labels)\n\t\t\t\t\n\t\t\t\t#y[i,0:len(data_labels)] = data_labels\n\t\t\t\ty.append(data_labels)\n\t\t\t\t\n\t\t\t\t#print(i,y[i].shape)\n\t\t\t\t\n\t\t\t\tlabel_length.append([len(data_labels)])\n\t\t\t\n\t\t\tlabel_length = np.matrix(label_length)\n\t\t\tinput_length = np.array([input_length]).T\n\t\t\t#input_length = np.array(input_length)\n\t\t\t#print(\'input_length:\\n\',input_length)\n\t\t\t#X=X.reshape(batch_size, audio_length, 200, 1)\n\t\t\t#print(X)\n\t\t\tyield [X, y, input_length, label_length ], labels\n\t\tpass\n\t\t\n\tdef GetSymbolList(self):\n\t\t\'\'\'\n\t\t\xe5\x8a\xa0\xe8\xbd\xbd\xe6\x8b\xbc\xe9\x9f\xb3\xe7\xac\xa6\xe5\x8f\xb7\xe5\x88\x97\xe8\xa1\xa8\xef\xbc\x8c\xe7\x94\xa8\xe4\xba\x8e\xe6\xa0\x87\xe8\xae\xb0\xe7\xac\xa6\xe5\x8f\xb7\n\t\t\xe8\xbf\x94\xe5\x9b\x9e\xe4\xb8\x80\xe4\xb8\xaa\xe5\x88\x97\xe8\xa1\xa8list\xe7\xb1\xbb\xe5\x9e\x8b\xe5\x8f\x98\xe9\x87\x8f\n\t\t\'\'\'\n\t\ttxt_obj=open(\'dict.txt\',\'r\',encoding=\'UTF-8\') # \xe6\x89\x93\xe5\xbc\x80\xe6\x96\x87\xe4\xbb\xb6\xe5\xb9\xb6\xe8\xaf\xbb\xe5\x85\xa5\n\t\ttxt_text=txt_obj.read()\n\t\ttxt_lines=txt_text.split(\'\\n\') # \xe6\x96\x87\xe6\x9c\xac\xe5\x88\x86\xe5\x89\xb2\n\t\tlist_symbol=[] # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe7\xac\xa6\xe5\x8f\xb7\xe5\x88\x97\xe8\xa1\xa8\n\t\tfor i in txt_lines:\n\t\t\tif(i!=\'\'):\n\t\t\t\ttxt_l=i.split(\'\\t\')\n\t\t\t\tlist_symbol.append(txt_l[0])\n\t\ttxt_obj.close()\n\t\tlist_symbol.append(\'_\')\n\t\tself.SymbolNum = len(list_symbol)\n\t\treturn list_symbol\n\n\tdef GetSymbolNum(self):\n\t\t\'\'\'\n\t\t\xe8\x8e\xb7\xe5\x8f\x96\xe6\x8b\xbc\xe9\x9f\xb3\xe7\xac\xa6\xe5\x8f\xb7\xe6\x95\xb0\xe9\x87\x8f\n\t\t\'\'\'\n\t\treturn len(self.list_symbol)\n\t\t\n\tdef SymbolToNum(self,symbol):\n\t\t\'\'\'\n\t\t\xe7\xac\xa6\xe5\x8f\xb7\xe8\xbd\xac\xe4\xb8\xba\xe6\x95\xb0\xe5\xad\x97\n\t\t\'\'\'\n\t\tif(symbol != \'\'):\n\t\t\treturn self.list_symbol.index(symbol)\n\t\treturn self.SymbolNum\n\t\n\tdef NumToVector(self,num):\n\t\t\'\'\'\n\t\t\xe6\x95\xb0\xe5\xad\x97\xe8\xbd\xac\xe4\xb8\xba\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe5\x90\x91\xe9\x87\x8f\n\t\t\'\'\'\n\t\tv_tmp=[]\n\t\tfor i in range(0,len(self.list_symbol)):\n\t\t\tif(i==num):\n\t\t\t\tv_tmp.append(1)\n\t\t\telse:\n\t\t\t\tv_tmp.append(0)\n\t\tv=np.array(v_tmp)\n\t\treturn v\n\t\nif(__name__==\'__main__\'):\n\t#path=\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\'\n\t#l=DataSpeech(path)\n\t#l.LoadDataList(\'train\')\n\t#print(l.GetDataNum())\n\t#print(l.GetData(0))\n\t#aa=l.data_genetator()\n\t#for i in aa:\n\t\t#a,b=i\n\t#print(a,b)\n\tpass\n\t'"
speech-recorder.py,0,"b'import wave\nfrom pyaudio import PyAudio,paInt16\n\nframerate=16000\nNUM_SAMPLES=2000\nchannels=1\nsampwidth=2\nTIME=10\ndef save_wave_file(filename,data):\n    \'\'\'save the date to the wavfile\'\'\'\n    wf=wave.open(filename,\'wb\')\n    wf.setnchannels(channels)\n    wf.setsampwidth(sampwidth)\n    wf.setframerate(framerate)\n    wf.writeframes(b"""".join(data))\n    wf.close()\n\ndef my_record():\n    pa=PyAudio()\n    stream=pa.open(format = paInt16,channels=1,\n                   rate=framerate,input=True,\n                   frames_per_buffer=NUM_SAMPLES)\n    my_buf=[]\n    count=0\n    while count<TIME*8:#\xe6\x8e\xa7\xe5\x88\xb6\xe5\xbd\x95\xe9\x9f\xb3\xe6\x97\xb6\xe9\x97\xb4\n        string_audio_data = stream.read(NUM_SAMPLES)\n        my_buf.append(string_audio_data)\n        count+=1\n        print(\'.\')\n    save_wave_file(\'01.wav\',my_buf)\n    stream.close()\n\nchunk=2014\ndef play():\n    wf=wave.open(r""01.wav"",\'rb\')\n    p=PyAudio()\n    stream=p.open(format=p.get_format_from_width(wf.getsampwidth()),channels=\n    wf.getnchannels(),rate=wf.getframerate(),output=True)\n    while True:\n        data=wf.readframes(chunk)\n        if data=="""":break\n        stream.write(data)\n    stream.close()\n    p.terminate()\n\nif __name__ == \'__main__\':\n    my_record()\n    print(\'Over!\') \n    play()'"
test.py,0,"b'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n""""""\n@author: nl8590687\n\xe7\x94\xa8\xe4\xba\x8e\xe6\xb5\x8b\xe8\xaf\x95\xe6\x95\xb4\xe4\xb8\xaa\xe4\xb8\x80\xe5\xa5\x97\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe7\xa8\x8b\xe5\xba\x8f\n\xe8\xaf\xad\xe9\x9f\xb3\xe6\xa8\xa1\xe5\x9e\x8b + \xe8\xaf\xad\xe8\xa8\x80\xe6\xa8\xa1\xe5\x9e\x8b\n""""""\nimport platform as plat\n\nfrom SpeechModel251 import ModelSpeech\nfrom LanguageModel2 import ModelLanguage\nfrom keras import backend as K\n\ndatapath = \'\'\nmodelpath = \'model_speech\'\n\nsystem_type = plat.system() # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa4\xe6\x96\xad\nif(system_type == \'Windows\'):\n\tdatapath = \'D:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\'\n\tmodelpath = modelpath + \'\\\\\'\nelif(system_type == \'Linux\'):\n\tdatapath = \'dataset\'\n\tmodelpath = modelpath + \'/\'\nelse:\n\tprint(\'*[Message] Unknown System\\n\')\n\tdatapath = \'dataset\'\n\tmodelpath = modelpath + \'/\'\n\nms = ModelSpeech(datapath)\n\n#ms.LoadModel(modelpath + \'m22_2\\\\0\\\\speech_model22_e_0_step_257000.model\')\nms.LoadModel(modelpath + \'m251\\\\speech_model251_e_0_step_12000.model\')\n\n#ms.TestModel(datapath, str_dataset=\'test\', data_count = 64, out_report = True)\nr = ms.RecognizeSpeech_FromFile(\'D:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\ST-CMDS-20170001_1-OS\\\\20170001P00241I0052.wav\')\n#r = ms.RecognizeSpeech_FromFile(\'D:\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\ST-CMDS-20170001_1-OS\\\\20170001P00241I0053.wav\')\n#r = ms.RecognizeSpeech_FromFile(\'D:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\ST-CMDS-20170001_1-OS\\\\20170001P00020I0087.wav\')\n#r = ms.RecognizeSpeech_FromFile(\'D:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\data_thchs30\\\\data\\\\A11_167.WAV\')\n#r = ms.RecognizeSpeech_FromFile(\'D:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\data_thchs30\\\\data\\\\D4_750.wav\')\n\nK.clear_session()\n\nprint(\'*[\xe6\x8f\x90\xe7\xa4\xba] \xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x9a\\n\',r)\n\n\nml = ModelLanguage(\'model_language\')\nml.LoadModel()\n\n#str_pinyin = [\'zhe4\',\'zhen1\',\'shi4\',\'ji2\', \'hao3\',\'de5\']\n#str_pinyin = [\'jin1\', \'tian1\', \'shi4\', \'xing1\', \'qi1\', \'san1\']\n#str_pinyin = [\'ni3\', \'hao3\',\'a1\']\nstr_pinyin = r\n#str_pinyin =  [\'su1\', \'bei3\', \'jun1\', \'de5\', \'yi4\',\'xie1\', \'ai4\', \'guo2\', \'jiang4\', \'shi4\', \'ma3\', \'zhan4\', \'shan1\', \'ming2\', \'yi1\', \'dong4\', \'ta1\', \'ju4\', \'su1\', \'bi3\', \'ai4\', \'dan4\', \'tian2\',\'mei2\', \'bai3\', \'ye3\', \'fei1\', \'qi3\', \'kan4\', \'zhan4\']\nr = ml.SpeechToText(str_pinyin)\nprint(\'\xe8\xaf\xad\xe9\x9f\xb3\xe8\xbd\xac\xe6\x96\x87\xe5\xad\x97\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x9a\\n\',r)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'"
testClient.py,0,"b""#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n'''\n@author: nl8590687\nasrserver\xe6\xb5\x8b\xe8\xaf\x95\xe4\xb8\x93\xe7\x94\xa8\xe5\xae\xa2\xe6\x88\xb7\xe7\xab\xaf\n\n'''\n\nimport requests\nfrom general_function.file_wav import *\n\nurl = 'http://127.0.0.1:20000/'\n\ntoken = 'qwertasd'\n\nwavsignal,fs=read_wav_data('D:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\ST-CMDS-20170001_1-OS\\\\20170001P00241I0052.wav')\n\n#print(wavsignal,fs)\n\ndatas={'token':token, 'fs':fs, 'wavs':wavsignal}\nimport time\nt0=time.time()\nr = requests.post(url, datas)\nt1=time.time()\nr.encoding='utf-8'\n\nprint(r.text)\nprint('time:', t1-t0, 's')"""
test_mspeech.py,3,"b'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n""""""\n@author: nl8590687\n\xe7\x94\xa8\xe4\xba\x8e\xe6\xb5\x8b\xe8\xaf\x95\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\xb3\xbb\xe7\xbb\x9f\xe8\xaf\xad\xe9\x9f\xb3\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe7\xa8\x8b\xe5\xba\x8f\n\n""""""\nimport platform as plat\nimport os\n\nimport tensorflow as tf\nfrom keras.backend.tensorflow_backend import set_session\n\n\nfrom SpeechModel251 import ModelSpeech\n\n\nos.environ[""CUDA_VISIBLE_DEVICES""] = ""0""\n#\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x85\x8d\xe7\xbd\xae\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa890%\xe7\x9a\x84GPU\nconfig = tf.compat.v1.ConfigProto()\nconfig.gpu_options.per_process_gpu_memory_fraction = 0.9\n#config.gpu_options.allow_growth=True   #\xe4\xb8\x8d\xe5\x85\xa8\xe9\x83\xa8\xe5\x8d\xa0\xe6\xbb\xa1\xe6\x98\xbe\xe5\xad\x98, \xe6\x8c\x89\xe9\x9c\x80\xe5\x88\x86\xe9\x85\x8d\nsess = tf.compat.v1.Session(config=config)\ntf.compat.v1.keras.backend.set_session(sess)\n\n\n\ndatapath = \'\'\nmodelpath = \'model_speech\'\n\n\nif(not os.path.exists(modelpath)): # \xe5\x88\xa4\xe6\x96\xad\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe7\x9b\xae\xe5\xbd\x95\xe6\x98\xaf\xe5\x90\xa6\xe5\xad\x98\xe5\x9c\xa8\n\tos.makedirs(modelpath) # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x8c\xe5\xb0\xb1\xe6\x96\xb0\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\xaa\xef\xbc\x8c\xe9\x81\xbf\xe5\x85\x8d\xe4\xb9\x8b\xe5\x90\x8e\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe7\x82\xb8\xe6\x8e\x89\n\nsystem_type = plat.system() # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa4\xe6\x96\xad\nif(system_type == \'Windows\'):\n\tdatapath = \'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\'\n\tmodelpath = modelpath + \'\\\\\'\nelif(system_type == \'Linux\'):\n\tdatapath = \'dataset\'\n\tmodelpath = modelpath + \'/\'\nelse:\n\tprint(\'*[Message] Unknown System\\n\')\n\tdatapath = \'dataset\'\n\tmodelpath = modelpath + \'/\'\n\nms = ModelSpeech(datapath)\n\nms.LoadModel(modelpath + \'m251/speech_model251_e_0_step_42500.model\')\n\nms.TestModel(datapath, str_dataset=\'test\', data_count = 128, out_report = True)\n\n#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\ST-CMDS-20170001_1-OS\\\\20170001P00241I0053.wav\')\n#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\ST-CMDS-20170001_1-OS\\\\20170001P00020I0087.wav\')\n#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\wav\\\\train\\\\A11\\\\A11_167.WAV\')\n#r = ms.RecognizeSpeech_FromFile(\'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\\\\wav\\\\test\\\\D4\\\\D4_750.wav\')\n#print(\'*[\xe6\x8f\x90\xe7\xa4\xba] \xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\xbb\x93\xe6\x9e\x9c\xef\xbc\x9a\\n\',r)\n\n\n'"
train_mspeech.py,3,"b'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n""""""\n@author: nl8590687\n\xe7\x94\xa8\xe4\xba\x8e\xe8\xae\xad\xe7\xbb\x83\xe8\xaf\xad\xe9\x9f\xb3\xe8\xaf\x86\xe5\x88\xab\xe7\xb3\xbb\xe7\xbb\x9f\xe8\xaf\xad\xe9\x9f\xb3\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe7\xa8\x8b\xe5\xba\x8f\n\n""""""\nimport platform as plat\nimport os\n\nimport tensorflow as tf\nfrom keras.backend.tensorflow_backend import set_session\n\n\nfrom SpeechModel251 import ModelSpeech\n\nos.environ[""CUDA_VISIBLE_DEVICES""] = ""0""\n#\xe8\xbf\x9b\xe8\xa1\x8c\xe9\x85\x8d\xe7\xbd\xae\xef\xbc\x8c\xe4\xbd\xbf\xe7\x94\xa895%\xe7\x9a\x84GPU\nconfig = tf.compat.v1.ConfigProto()\nconfig.gpu_options.per_process_gpu_memory_fraction = 0.95\n#config.gpu_options.allow_growth=True   #\xe4\xb8\x8d\xe5\x85\xa8\xe9\x83\xa8\xe5\x8d\xa0\xe6\xbb\xa1\xe6\x98\xbe\xe5\xad\x98, \xe6\x8c\x89\xe9\x9c\x80\xe5\x88\x86\xe9\x85\x8d\nsess = tf.compat.v1.Session(config=config)\ntf.compat.v1.keras.backend.set_session(sess)\n\n\ndatapath = \'\'\nmodelpath = \'model_speech\'\n\n\nif(not os.path.exists(modelpath)): # \xe5\x88\xa4\xe6\x96\xad\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe7\x9b\xae\xe5\xbd\x95\xe6\x98\xaf\xe5\x90\xa6\xe5\xad\x98\xe5\x9c\xa8\n\tos.makedirs(modelpath) # \xe5\xa6\x82\xe6\x9e\x9c\xe4\xb8\x8d\xe5\xad\x98\xe5\x9c\xa8\xef\xbc\x8c\xe5\xb0\xb1\xe6\x96\xb0\xe5\xbb\xba\xe4\xb8\x80\xe4\xb8\xaa\xef\xbc\x8c\xe9\x81\xbf\xe5\x85\x8d\xe4\xb9\x8b\xe5\x90\x8e\xe4\xbf\x9d\xe5\xad\x98\xe6\xa8\xa1\xe5\x9e\x8b\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe7\x82\xb8\xe6\x8e\x89\n\nsystem_type = plat.system() # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa4\xe6\x96\xad\nif(system_type == \'Windows\'):\n\tdatapath = \'E:\\\\\xe8\xaf\xad\xe9\x9f\xb3\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\'\n\tmodelpath = modelpath + \'\\\\\'\nelif(system_type == \'Linux\'):\n\tdatapath = \'dataset\'\n\tmodelpath = modelpath + \'/\'\nelse:\n\tprint(\'*[Message] Unknown System\\n\')\n\tdatapath = \'dataset\'\n\tmodelpath = modelpath + \'/\'\n\nms = ModelSpeech(datapath)\n\n#ms.LoadModel(modelpath + \'speech_model251_e_0_step_327500.model\')\nms.TrainModel(datapath, epoch = 50, batch_size = 16, save_step = 500)\n\n\n'"
general_function/__init__.py,0,"b""'''@package processing\nThis package contains all the functionality for data processing:\n- feature computation\n- feature storing and loading\n- file interpretation\n'''\n"""
general_function/file_dict.py,0,"b""#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n'''\n\xe8\x8e\xb7\xe5\x8f\x96\xe7\xac\xa6\xe5\x8f\xb7\xe5\xad\x97\xe5\x85\xb8\xe5\x88\x97\xe8\xa1\xa8\xe7\x9a\x84\xe7\xa8\x8b\xe5\xba\x8f\n'''\nimport platform as plat\n\ndef GetSymbolList(datapath):\n\t'''\n\t\xe5\x8a\xa0\xe8\xbd\xbd\xe6\x8b\xbc\xe9\x9f\xb3\xe7\xac\xa6\xe5\x8f\xb7\xe5\x88\x97\xe8\xa1\xa8\xef\xbc\x8c\xe7\x94\xa8\xe4\xba\x8e\xe6\xa0\x87\xe8\xae\xb0\xe7\xac\xa6\xe5\x8f\xb7\n\t\xe8\xbf\x94\xe5\x9b\x9e\xe4\xb8\x80\xe4\xb8\xaa\xe5\x88\x97\xe8\xa1\xa8list\xe7\xb1\xbb\xe5\x9e\x8b\xe5\x8f\x98\xe9\x87\x8f\n\t'''\n\tif(datapath != ''):\n\t\tif(datapath[-1]!='/' or datapath[-1]!='\\\\'):\n\t\t\tdatapath = datapath + '/'\n\t\n\ttxt_obj=open(datapath + 'dict.txt','r',encoding='UTF-8') # \xe6\x89\x93\xe5\xbc\x80\xe6\x96\x87\xe4\xbb\xb6\xe5\xb9\xb6\xe8\xaf\xbb\xe5\x85\xa5\n\ttxt_text=txt_obj.read()\n\ttxt_lines=txt_text.split('\\n') # \xe6\x96\x87\xe6\x9c\xac\xe5\x88\x86\xe5\x89\xb2\n\tlist_symbol=[] # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe7\xac\xa6\xe5\x8f\xb7\xe5\x88\x97\xe8\xa1\xa8\n\tfor i in txt_lines:\n\t\tif(i!=''):\n\t\t\ttxt_l=i.split('\\t')\n\t\t\tlist_symbol.append(txt_l[0])\n\ttxt_obj.close()\n\tlist_symbol.append('_')\n\t#SymbolNum = len(list_symbol)\n\treturn list_symbol\n\t\ndef GetSymbolList_trash2(datapath):\n\t'''\n\t\xe5\x8a\xa0\xe8\xbd\xbd\xe6\x8b\xbc\xe9\x9f\xb3\xe7\xac\xa6\xe5\x8f\xb7\xe5\x88\x97\xe8\xa1\xa8\xef\xbc\x8c\xe7\x94\xa8\xe4\xba\x8e\xe6\xa0\x87\xe8\xae\xb0\xe7\xac\xa6\xe5\x8f\xb7\n\t\xe8\xbf\x94\xe5\x9b\x9e\xe4\xb8\x80\xe4\xb8\xaa\xe5\x88\x97\xe8\xa1\xa8list\xe7\xb1\xbb\xe5\x9e\x8b\xe5\x8f\x98\xe9\x87\x8f\n\t'''\n\n\tdatapath_ = datapath.strip('dataset\\\\')\n\n\tsystem_type = plat.system()  # \xe7\x94\xb1\xe4\xba\x8e\xe4\xb8\x8d\xe5\x90\x8c\xe7\x9a\x84\xe7\xb3\xbb\xe7\xbb\x9f\xe7\x9a\x84\xe6\x96\x87\xe4\xbb\xb6\xe8\xb7\xaf\xe5\xbe\x84\xe8\xa1\xa8\xe7\xa4\xba\xe4\xb8\x8d\xe4\xb8\x80\xe6\xa0\xb7\xef\xbc\x8c\xe9\x9c\x80\xe8\xa6\x81\xe8\xbf\x9b\xe8\xa1\x8c\xe5\x88\xa4\xe6\x96\xad\n\tif (system_type == 'Windows'):\n\t\tdatapath_+='\\\\'\n\telif (system_type == 'Linux'):\n\t\tdatapath_ += '/'\n\telse:\n\t\tprint('*[Message] Unknown System\\n')\n\t\tdatapath_ += '/'  \n\t\n\ttxt_obj=open(datapath_ + 'dict.txt','r',encoding='UTF-8') # \xe6\x89\x93\xe5\xbc\x80\xe6\x96\x87\xe4\xbb\xb6\xe5\xb9\xb6\xe8\xaf\xbb\xe5\x85\xa5  \n\ttxt_text=txt_obj.read()        \n\ttxt_lines=txt_text.split('\\n') # \xe6\x96\x87\xe6\x9c\xac\xe5\x88\x86\xe5\x89\xb2    \n\tlist_symbol=[] # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe7\xac\xa6\xe5\x8f\xb7\xe5\x88\x97\xe8\xa1\xa8\n\tfor i in txt_lines:\n\t\tif(i!=''):\n\t\t\ttxt_l=i.split('\\t')\t\t\t\t\t\t\n\t\t\tlist_symbol.append(txt_l[0])            \n\ttxt_obj.close()\n\tlist_symbol.append('_')\n\t#SymbolNum = len(list_symbol)\n\treturn list_symbol\n\n\nif(__name__ == '__main__'):\n\tGetSymbolList('E:\\\\abc\\\\')"""
general_function/file_wav.py,0,"b'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport os\nimport wave\nimport numpy as np\nimport matplotlib.pyplot as plt  \nimport math\nimport time\n\nfrom python_speech_features import mfcc\nfrom python_speech_features import delta\nfrom python_speech_features import logfbank\n\nfrom scipy.fftpack import fft\n\ndef read_wav_data(filename):\n\t\'\'\'\n\t\xe8\xaf\xbb\xe5\x8f\x96\xe4\xb8\x80\xe4\xb8\xaawav\xe6\x96\x87\xe4\xbb\xb6\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe5\xa3\xb0\xe9\x9f\xb3\xe4\xbf\xa1\xe5\x8f\xb7\xe7\x9a\x84\xe6\x97\xb6\xe5\x9f\x9f\xe8\xb0\xb1\xe7\x9f\xa9\xe9\x98\xb5\xe5\x92\x8c\xe6\x92\xad\xe6\x94\xbe\xe6\x97\xb6\xe9\x97\xb4\n\t\'\'\'\n\twav = wave.open(filename,""rb"") # \xe6\x89\x93\xe5\xbc\x80\xe4\xb8\x80\xe4\xb8\xaawav\xe6\xa0\xbc\xe5\xbc\x8f\xe7\x9a\x84\xe5\xa3\xb0\xe9\x9f\xb3\xe6\x96\x87\xe4\xbb\xb6\xe6\xb5\x81\n\tnum_frame = wav.getnframes() # \xe8\x8e\xb7\xe5\x8f\x96\xe5\xb8\xa7\xe6\x95\xb0\n\tnum_channel=wav.getnchannels() # \xe8\x8e\xb7\xe5\x8f\x96\xe5\xa3\xb0\xe9\x81\x93\xe6\x95\xb0\n\tframerate=wav.getframerate() # \xe8\x8e\xb7\xe5\x8f\x96\xe5\xb8\xa7\xe9\x80\x9f\xe7\x8e\x87\n\tnum_sample_width=wav.getsampwidth() # \xe8\x8e\xb7\xe5\x8f\x96\xe5\xae\x9e\xe4\xbe\x8b\xe7\x9a\x84\xe6\xaf\x94\xe7\x89\xb9\xe5\xae\xbd\xe5\xba\xa6\xef\xbc\x8c\xe5\x8d\xb3\xe6\xaf\x8f\xe4\xb8\x80\xe5\xb8\xa7\xe7\x9a\x84\xe5\xad\x97\xe8\x8a\x82\xe6\x95\xb0\n\tstr_data = wav.readframes(num_frame) # \xe8\xaf\xbb\xe5\x8f\x96\xe5\x85\xa8\xe9\x83\xa8\xe7\x9a\x84\xe5\xb8\xa7\n\twav.close() # \xe5\x85\xb3\xe9\x97\xad\xe6\xb5\x81\n\twave_data = np.fromstring(str_data, dtype = np.short) # \xe5\xb0\x86\xe5\xa3\xb0\xe9\x9f\xb3\xe6\x96\x87\xe4\xbb\xb6\xe6\x95\xb0\xe6\x8d\xae\xe8\xbd\xac\xe6\x8d\xa2\xe4\xb8\xba\xe6\x95\xb0\xe7\xbb\x84\xe7\x9f\xa9\xe9\x98\xb5\xe5\xbd\xa2\xe5\xbc\x8f\n\twave_data.shape = -1, num_channel # \xe6\x8c\x89\xe7\x85\xa7\xe5\xa3\xb0\xe9\x81\x93\xe6\x95\xb0\xe5\xb0\x86\xe6\x95\xb0\xe7\xbb\x84\xe6\x95\xb4\xe5\xbd\xa2\xef\xbc\x8c\xe5\x8d\x95\xe5\xa3\xb0\xe9\x81\x93\xe6\x97\xb6\xe5\x80\x99\xe6\x98\xaf\xe4\xb8\x80\xe5\x88\x97\xe6\x95\xb0\xe7\xbb\x84\xef\xbc\x8c\xe5\x8f\x8c\xe5\xa3\xb0\xe9\x81\x93\xe6\x97\xb6\xe5\x80\x99\xe6\x98\xaf\xe4\xb8\xa4\xe5\x88\x97\xe7\x9a\x84\xe7\x9f\xa9\xe9\x98\xb5\n\twave_data = wave_data.T # \xe5\xb0\x86\xe7\x9f\xa9\xe9\x98\xb5\xe8\xbd\xac\xe7\xbd\xae\n\t#wave_data = wave_data \n\treturn wave_data, framerate  \n\ndef GetMfccFeature(wavsignal, fs):\n\t# \xe8\x8e\xb7\xe5\x8f\x96\xe8\xbe\x93\xe5\x85\xa5\xe7\x89\xb9\xe5\xbe\x81\n\tfeat_mfcc=mfcc(wavsignal[0],fs)\n\tfeat_mfcc_d=delta(feat_mfcc,2)\n\tfeat_mfcc_dd=delta(feat_mfcc_d,2)\n\t# \xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\xe5\x88\x86\xe5\x88\xab\xe6\x98\xafmfcc\xe7\x89\xb9\xe5\xbe\x81\xe5\x90\x91\xe9\x87\x8f\xe7\x9a\x84\xe7\x9f\xa9\xe9\x98\xb5\xe5\x8f\x8a\xe5\x85\xb6\xe4\xb8\x80\xe9\x98\xb6\xe5\xb7\xae\xe5\x88\x86\xe5\x92\x8c\xe4\xba\x8c\xe9\x98\xb6\xe5\xb7\xae\xe5\x88\x86\xe7\x9f\xa9\xe9\x98\xb5\n\twav_feature = np.column_stack((feat_mfcc, feat_mfcc_d, feat_mfcc_dd))\n\treturn wav_feature\n\ndef GetFrequencyFeature(wavsignal, fs):\n\tif(16000 != fs):\n\t\traise ValueError(\'[Error] ASRT currently only supports wav audio files with a sampling rate of 16000 Hz, but this audio is \' + str(fs) + \' Hz. \')\n\t\n\t# wav\xe6\xb3\xa2\xe5\xbd\xa2 \xe5\x8a\xa0\xe6\x97\xb6\xe9\x97\xb4\xe7\xaa\x97\xe4\xbb\xa5\xe5\x8f\x8a\xe6\x97\xb6\xe7\xa7\xbb10ms\n\ttime_window = 25 # \xe5\x8d\x95\xe4\xbd\x8dms\n\tdata_input = []\n\t\n\t#print(int(len(wavsignal[0])/fs*1000 - time_window) // 10)\n\twav_length = len(wavsignal[0]) # \xe8\xae\xa1\xe7\xae\x97\xe4\xb8\x80\xe6\x9d\xa1\xe8\xaf\xad\xe9\x9f\xb3\xe4\xbf\xa1\xe5\x8f\xb7\xe7\x9a\x84\xe5\x8e\x9f\xe5\xa7\x8b\xe9\x95\xbf\xe5\xba\xa6\n\trange0_end = int(len(wavsignal[0])/fs*1000 - time_window) // 10 # \xe8\xae\xa1\xe7\xae\x97\xe5\xbe\xaa\xe7\x8e\xaf\xe7\xbb\x88\xe6\xad\xa2\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\xef\xbc\x8c\xe4\xb9\x9f\xe5\xb0\xb1\xe6\x98\xaf\xe6\x9c\x80\xe7\xbb\x88\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe7\xaa\x97\xe6\x95\xb0\n\tfor i in range(0, range0_end):\n\t\tp_start = i * 160\n\t\tp_end = p_start + 400\n\t\tdata_line = []\n\t\t\n\t\tfor j in range(p_start, p_end):\n\t\t\tdata_line.append(wavsignal[0][j]) \n\t\t\t#print(\'wavsignal[0][j]:\\n\',wavsignal[0][j])\n\t\t#data_line = abs(fft(data_line)) / len(wavsignal[0])\n\t\tdata_line = fft(data_line) / wav_length\n\t\tdata_line2 = []\n\t\tfor fre_sig in data_line: \n\t\t\t# \xe5\x88\x86\xe5\x88\xab\xe5\x8f\x96\xe5\x87\xba\xe9\xa2\x91\xe7\x8e\x87\xe4\xbf\xa1\xe5\x8f\xb7\xe7\x9a\x84\xe5\xae\x9e\xe9\x83\xa8\xe5\x92\x8c\xe8\x99\x9a\xe9\x83\xa8\xe4\xbd\x9c\xe4\xb8\xba\xe8\xaf\xad\xe9\x9f\xb3\xe4\xbf\xa1\xe5\x8f\xb7\xe7\x9a\x84\xe9\xa2\x91\xe7\x8e\x87\xe7\x89\xb9\xe5\xbe\x81\n\t\t\t# \xe7\x9b\xb4\xe6\x8e\xa5\xe4\xbd\xbf\xe7\x94\xa8\xe5\xa4\x8d\xe6\x95\xb0\xe7\x9a\x84\xe8\xaf\x9d\xef\xbc\x8c\xe4\xb9\x8b\xe5\x90\x8e\xe4\xbc\x9a\xe8\xa2\xabnumpy\xe5\xb0\x86\xe8\x99\x9a\xe9\x83\xa8\xe4\xb8\xa2\xe5\xbc\x83\xef\xbc\x8c\xe9\x80\xa0\xe6\x88\x90\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xa2\xe5\xa4\xb1\n\t\t\t#print(\'fre_sig:\\n\',fre_sig)\n\t\t\tdata_line2.append(fre_sig.real)\n\t\t\tdata_line2.append(fre_sig.imag)\n\t\t\n\t\tdata_input.append(data_line2[0:len(data_line2)//2]) # \xe9\x99\xa4\xe4\xbb\xa52\xe6\x98\xaf\xe5\x8f\x96\xe4\xb8\x80\xe5\x8d\x8a\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe6\x98\xaf\xe5\xaf\xb9\xe7\xa7\xb0\xe7\x9a\x84\n\t\t#print(\'data_input:\\n\',data_input)\n\t\t#print(\'data_line:\\n\',data_line)\n\t#print(len(data_input),len(data_input[0]))\n\treturn data_input\n\ndef GetFrequencyFeature2(wavsignal, fs):\n\tif(16000 != fs):\n\t\traise ValueError(\'[Error] ASRT currently only supports wav audio files with a sampling rate of 16000 Hz, but this audio is \' + str(fs) + \' Hz. \')\n\t\n\t# wav\xe6\xb3\xa2\xe5\xbd\xa2 \xe5\x8a\xa0\xe6\x97\xb6\xe9\x97\xb4\xe7\xaa\x97\xe4\xbb\xa5\xe5\x8f\x8a\xe6\x97\xb6\xe7\xa7\xbb10ms\n\ttime_window = 25 # \xe5\x8d\x95\xe4\xbd\x8dms\n\twindow_length = fs / 1000 * time_window # \xe8\xae\xa1\xe7\xae\x97\xe7\xaa\x97\xe9\x95\xbf\xe5\xba\xa6\xe7\x9a\x84\xe5\x85\xac\xe5\xbc\x8f\xef\xbc\x8c\xe7\x9b\xae\xe5\x89\x8d\xe5\x85\xa8\xe9\x83\xa8\xe4\xb8\xba400\xe5\x9b\xba\xe5\xae\x9a\xe5\x80\xbc\n\t\n\twav_arr = np.array(wavsignal)\n\t#wav_length = len(wavsignal[0])\n\twav_length = wav_arr.shape[1]\n\t\n\trange0_end = int(len(wavsignal[0])/fs*1000 - time_window) // 10 # \xe8\xae\xa1\xe7\xae\x97\xe5\xbe\xaa\xe7\x8e\xaf\xe7\xbb\x88\xe6\xad\xa2\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\xef\xbc\x8c\xe4\xb9\x9f\xe5\xb0\xb1\xe6\x98\xaf\xe6\x9c\x80\xe7\xbb\x88\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe7\xaa\x97\xe6\x95\xb0\n\tdata_input = np.zeros((range0_end, 200), dtype = np.float) # \xe7\x94\xa8\xe4\xba\x8e\xe5\xad\x98\xe6\x94\xbe\xe6\x9c\x80\xe7\xbb\x88\xe7\x9a\x84\xe9\xa2\x91\xe7\x8e\x87\xe7\x89\xb9\xe5\xbe\x81\xe6\x95\xb0\xe6\x8d\xae\n\tdata_line = np.zeros((1, 400), dtype = np.float)\n\tfor i in range(0, range0_end):\n\t\tp_start = i * 160\n\t\tp_end = p_start + 400\n\t\t\n\t\tdata_line = wav_arr[0, p_start:p_end]\n\t\t\'\'\'\n\t\tx=np.linspace(0, 400 - 1, 400, dtype = np.int64)\n\t\tw = 0.54 - 0.46 * np.cos(2 * np.pi * (x) / (400 - 1) ) # \xe6\xb1\x89\xe6\x98\x8e\xe7\xaa\x97\n\t\tdata_line = data_line * w # \xe5\x8a\xa0\xe7\xaa\x97\n\t\t\'\'\'\n\t\tdata_line = np.abs(fft(data_line)) / wav_length\n\t\t\n\t\t\n\t\tdata_input[i]=data_line[0:200] # \xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba400\xe9\x99\xa4\xe4\xbb\xa52\xe7\x9a\x84\xe5\x80\xbc\xef\xbc\x88\xe5\x8d\xb3200\xef\xbc\x89\xe6\x98\xaf\xe5\x8f\x96\xe4\xb8\x80\xe5\x8d\x8a\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe6\x98\xaf\xe5\xaf\xb9\xe7\xa7\xb0\xe7\x9a\x84\n\t\t\n\t#print(data_input.shape)\n\treturn data_input\n\n\nx=np.linspace(0, 400 - 1, 400, dtype = np.int64)\nw = 0.54 - 0.46 * np.cos(2 * np.pi * (x) / (400 - 1) ) # \xe6\xb1\x89\xe6\x98\x8e\xe7\xaa\x97\n\ndef GetFrequencyFeature3(wavsignal, fs):\n\tif(16000 != fs):\n\t\traise ValueError(\'[Error] ASRT currently only supports wav audio files with a sampling rate of 16000 Hz, but this audio is \' + str(fs) + \' Hz. \')\n\t\n\t# wav\xe6\xb3\xa2\xe5\xbd\xa2 \xe5\x8a\xa0\xe6\x97\xb6\xe9\x97\xb4\xe7\xaa\x97\xe4\xbb\xa5\xe5\x8f\x8a\xe6\x97\xb6\xe7\xa7\xbb10ms\n\ttime_window = 25 # \xe5\x8d\x95\xe4\xbd\x8dms\n\twindow_length = fs / 1000 * time_window # \xe8\xae\xa1\xe7\xae\x97\xe7\xaa\x97\xe9\x95\xbf\xe5\xba\xa6\xe7\x9a\x84\xe5\x85\xac\xe5\xbc\x8f\xef\xbc\x8c\xe7\x9b\xae\xe5\x89\x8d\xe5\x85\xa8\xe9\x83\xa8\xe4\xb8\xba400\xe5\x9b\xba\xe5\xae\x9a\xe5\x80\xbc\n\t\n\twav_arr = np.array(wavsignal)\n\t#wav_length = len(wavsignal[0])\n\twav_length = wav_arr.shape[1]\n\t\n\trange0_end = int(len(wavsignal[0])/fs*1000 - time_window) // 10 # \xe8\xae\xa1\xe7\xae\x97\xe5\xbe\xaa\xe7\x8e\xaf\xe7\xbb\x88\xe6\xad\xa2\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\xef\xbc\x8c\xe4\xb9\x9f\xe5\xb0\xb1\xe6\x98\xaf\xe6\x9c\x80\xe7\xbb\x88\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe7\xaa\x97\xe6\x95\xb0\n\tdata_input = np.zeros((range0_end, 200), dtype = np.float) # \xe7\x94\xa8\xe4\xba\x8e\xe5\xad\x98\xe6\x94\xbe\xe6\x9c\x80\xe7\xbb\x88\xe7\x9a\x84\xe9\xa2\x91\xe7\x8e\x87\xe7\x89\xb9\xe5\xbe\x81\xe6\x95\xb0\xe6\x8d\xae\n\tdata_line = np.zeros((1, 400), dtype = np.float)\n\t\n\tfor i in range(0, range0_end):\n\t\tp_start = i * 160\n\t\tp_end = p_start + 400\n\t\t\n\t\tdata_line = wav_arr[0, p_start:p_end]\n\t\t\n\t\tdata_line = data_line * w # \xe5\x8a\xa0\xe7\xaa\x97\n\t\t\n\t\tdata_line = np.abs(fft(data_line)) / wav_length\n\t\t\n\t\t\n\t\tdata_input[i]=data_line[0:200] # \xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba400\xe9\x99\xa4\xe4\xbb\xa52\xe7\x9a\x84\xe5\x80\xbc\xef\xbc\x88\xe5\x8d\xb3200\xef\xbc\x89\xe6\x98\xaf\xe5\x8f\x96\xe4\xb8\x80\xe5\x8d\x8a\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe6\x98\xaf\xe5\xaf\xb9\xe7\xa7\xb0\xe7\x9a\x84\n\t\t\n\t#print(data_input.shape)\n\tdata_input = np.log(data_input + 1)\n\treturn data_input\n\t\ndef GetFrequencyFeature4(wavsignal, fs):\n\t\'\'\'\n\t\xe4\xb8\xbb\xe8\xa6\x81\xe6\x98\xaf\xe7\x94\xa8\xe6\x9d\xa5\xe4\xbf\xae\xe6\xad\xa33\xe7\x89\x88\xe7\x9a\x84bug\n\t\'\'\'\n\tif(16000 != fs):\n\t\traise ValueError(\'[Error] ASRT currently only supports wav audio files with a sampling rate of 16000 Hz, but this audio is \' + str(fs) + \' Hz. \')\n\t\n\t# wav\xe6\xb3\xa2\xe5\xbd\xa2 \xe5\x8a\xa0\xe6\x97\xb6\xe9\x97\xb4\xe7\xaa\x97\xe4\xbb\xa5\xe5\x8f\x8a\xe6\x97\xb6\xe7\xa7\xbb10ms\n\ttime_window = 25 # \xe5\x8d\x95\xe4\xbd\x8dms\n\twindow_length = fs / 1000 * time_window # \xe8\xae\xa1\xe7\xae\x97\xe7\xaa\x97\xe9\x95\xbf\xe5\xba\xa6\xe7\x9a\x84\xe5\x85\xac\xe5\xbc\x8f\xef\xbc\x8c\xe7\x9b\xae\xe5\x89\x8d\xe5\x85\xa8\xe9\x83\xa8\xe4\xb8\xba400\xe5\x9b\xba\xe5\xae\x9a\xe5\x80\xbc\n\t\n\twav_arr = np.array(wavsignal)\n\t#wav_length = len(wavsignal[0])\n\twav_length = wav_arr.shape[1]\n\t\n\trange0_end = int(len(wavsignal[0])/fs*1000 - time_window) // 10 + 1 # \xe8\xae\xa1\xe7\xae\x97\xe5\xbe\xaa\xe7\x8e\xaf\xe7\xbb\x88\xe6\xad\xa2\xe7\x9a\x84\xe4\xbd\x8d\xe7\xbd\xae\xef\xbc\x8c\xe4\xb9\x9f\xe5\xb0\xb1\xe6\x98\xaf\xe6\x9c\x80\xe7\xbb\x88\xe7\x94\x9f\xe6\x88\x90\xe7\x9a\x84\xe7\xaa\x97\xe6\x95\xb0\n\tdata_input = np.zeros((range0_end, window_length // 2), dtype = np.float) # \xe7\x94\xa8\xe4\xba\x8e\xe5\xad\x98\xe6\x94\xbe\xe6\x9c\x80\xe7\xbb\x88\xe7\x9a\x84\xe9\xa2\x91\xe7\x8e\x87\xe7\x89\xb9\xe5\xbe\x81\xe6\x95\xb0\xe6\x8d\xae\n\tdata_line = np.zeros((1, window_length), dtype = np.float)\n\t\n\tfor i in range(0, range0_end):\n\t\tp_start = i * 160\n\t\tp_end = p_start + 400\n\t\t\n\t\tdata_line = wav_arr[0, p_start:p_end]\n\t\t\n\t\tdata_line = data_line * w # \xe5\x8a\xa0\xe7\xaa\x97\n\t\t\n\t\tdata_line = np.abs(fft(data_line)) / wav_length\n\t\t\n\t\t\n\t\tdata_input[i]=data_line[0: window_length // 2] # \xe8\xae\xbe\xe7\xbd\xae\xe4\xb8\xba400\xe9\x99\xa4\xe4\xbb\xa52\xe7\x9a\x84\xe5\x80\xbc\xef\xbc\x88\xe5\x8d\xb3200\xef\xbc\x89\xe6\x98\xaf\xe5\x8f\x96\xe4\xb8\x80\xe5\x8d\x8a\xe6\x95\xb0\xe6\x8d\xae\xef\xbc\x8c\xe5\x9b\xa0\xe4\xb8\xba\xe6\x98\xaf\xe5\xaf\xb9\xe7\xa7\xb0\xe7\x9a\x84\n\t\t\n\t#print(data_input.shape)\n\tdata_input = np.log(data_input + 1)\n\treturn data_input\n\ndef wav_scale(energy):\n\t\'\'\'\n\t\xe8\xaf\xad\xe9\x9f\xb3\xe4\xbf\xa1\xe5\x8f\xb7\xe8\x83\xbd\xe9\x87\x8f\xe5\xbd\x92\xe4\xb8\x80\xe5\x8c\x96\n\t\'\'\'\n\tmeans = energy.mean() # \xe5\x9d\x87\xe5\x80\xbc\n\tvar=energy.var() # \xe6\x96\xb9\xe5\xb7\xae\n\te=(energy-means)/math.sqrt(var) # \xe5\xbd\x92\xe4\xb8\x80\xe5\x8c\x96\xe8\x83\xbd\xe9\x87\x8f\n\treturn e\n\ndef wav_scale2(energy):\n\t\'\'\'\n\t\xe8\xaf\xad\xe9\x9f\xb3\xe4\xbf\xa1\xe5\x8f\xb7\xe8\x83\xbd\xe9\x87\x8f\xe5\xbd\x92\xe4\xb8\x80\xe5\x8c\x96\n\t\'\'\'\n\tmaxnum = max(energy)\n\te = energy / maxnum\n\treturn e\n\ndef wav_scale3(energy):\n\t\'\'\'\n\t\xe8\xaf\xad\xe9\x9f\xb3\xe4\xbf\xa1\xe5\x8f\xb7\xe8\x83\xbd\xe9\x87\x8f\xe5\xbd\x92\xe4\xb8\x80\xe5\x8c\x96\n\t\'\'\'\n\tfor i in range(len(energy)):\n\t\t#if i == 1:\n\t\t#\t#print(\'wavsignal[0]:\\n {:.4f}\'.format(energy[1]),energy[1] is int)\n\t\tenergy[i] = float(energy[i]) / 100.0\n\t\t#if i == 1:\n\t\t#\t#print(\'wavsignal[0]:\\n {:.4f}\'.format(energy[1]),energy[1] is int)\n\treturn energy\n\t\ndef wav_show(wave_data, fs): # \xe6\x98\xbe\xe7\xa4\xba\xe5\x87\xba\xe6\x9d\xa5\xe5\xa3\xb0\xe9\x9f\xb3\xe6\xb3\xa2\xe5\xbd\xa2\n\ttime = np.arange(0, len(wave_data)) * (1.0/fs)  # \xe8\xae\xa1\xe7\xae\x97\xe5\xa3\xb0\xe9\x9f\xb3\xe7\x9a\x84\xe6\x92\xad\xe6\x94\xbe\xe6\x97\xb6\xe9\x97\xb4\xef\xbc\x8c\xe5\x8d\x95\xe4\xbd\x8d\xe4\xb8\xba\xe7\xa7\x92\n\t# \xe7\x94\xbb\xe5\xa3\xb0\xe9\x9f\xb3\xe6\xb3\xa2\xe5\xbd\xa2\n\t#plt.subplot(211)  \n\tplt.plot(time, wave_data)  \n\t#plt.subplot(212)  \n\t#plt.plot(time, wave_data[1], c = ""g"")  \n\tplt.show()  \n\n\t\ndef get_wav_list(filename):\n\t\'\'\'\n\t\xe8\xaf\xbb\xe5\x8f\x96\xe4\xb8\x80\xe4\xb8\xaawav\xe6\x96\x87\xe4\xbb\xb6\xe5\x88\x97\xe8\xa1\xa8\xef\xbc\x8c\xe8\xbf\x94\xe5\x9b\x9e\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x98\xe5\x82\xa8\xe8\xaf\xa5\xe5\x88\x97\xe8\xa1\xa8\xe7\x9a\x84\xe5\xad\x97\xe5\x85\xb8\xe7\xb1\xbb\xe5\x9e\x8b\xe5\x80\xbc\n\tps:\xe5\x9c\xa8\xe6\x95\xb0\xe6\x8d\xae\xe4\xb8\xad\xe4\xb8\x93\xe9\x97\xa8\xe6\x9c\x89\xe5\x87\xa0\xe4\xb8\xaa\xe6\x96\x87\xe4\xbb\xb6\xe7\x94\xa8\xe4\xba\x8e\xe5\xad\x98\xe6\x94\xbe\xe7\x94\xa8\xe4\xba\x8e\xe8\xae\xad\xe7\xbb\x83\xe3\x80\x81\xe9\xaa\x8c\xe8\xaf\x81\xe5\x92\x8c\xe6\xb5\x8b\xe8\xaf\x95\xe7\x9a\x84wav\xe6\x96\x87\xe4\xbb\xb6\xe5\x88\x97\xe8\xa1\xa8\n\t\'\'\'\n\ttxt_obj=open(filename,\'r\') # \xe6\x89\x93\xe5\xbc\x80\xe6\x96\x87\xe4\xbb\xb6\xe5\xb9\xb6\xe8\xaf\xbb\xe5\x85\xa5\n\ttxt_text=txt_obj.read()\n\ttxt_lines=txt_text.split(\'\\n\') # \xe6\x96\x87\xe6\x9c\xac\xe5\x88\x86\xe5\x89\xb2\n\tdic_filelist={} # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\xad\x97\xe5\x85\xb8\n\tlist_wavmark=[] # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96wav\xe5\x88\x97\xe8\xa1\xa8\n\tfor i in txt_lines:\n\t\tif(i!=\'\'):\n\t\t\ttxt_l=i.split(\' \')\n\t\t\tdic_filelist[txt_l[0]] = txt_l[1]\n\t\t\tlist_wavmark.append(txt_l[0])\n\ttxt_obj.close()\n\treturn dic_filelist,list_wavmark\n\t\ndef get_wav_symbol(filename):\n\t\'\'\'\n\t\xe8\xaf\xbb\xe5\x8f\x96\xe6\x8c\x87\xe5\xae\x9a\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86\xe4\xb8\xad\xef\xbc\x8c\xe6\x89\x80\xe6\x9c\x89wav\xe6\x96\x87\xe4\xbb\xb6\xe5\xaf\xb9\xe5\xba\x94\xe7\x9a\x84\xe8\xaf\xad\xe9\x9f\xb3\xe7\xac\xa6\xe5\x8f\xb7\n\t\xe8\xbf\x94\xe5\x9b\x9e\xe4\xb8\x80\xe4\xb8\xaa\xe5\xad\x98\xe5\x82\xa8\xe7\xac\xa6\xe5\x8f\xb7\xe9\x9b\x86\xe7\x9a\x84\xe5\xad\x97\xe5\x85\xb8\xe7\xb1\xbb\xe5\x9e\x8b\xe5\x80\xbc\n\t\'\'\'\n\ttxt_obj=open(filename,\'r\') # \xe6\x89\x93\xe5\xbc\x80\xe6\x96\x87\xe4\xbb\xb6\xe5\xb9\xb6\xe8\xaf\xbb\xe5\x85\xa5\n\ttxt_text=txt_obj.read()\n\ttxt_lines=txt_text.split(\'\\n\') # \xe6\x96\x87\xe6\x9c\xac\xe5\x88\x86\xe5\x89\xb2\n\tdic_symbol_list={} # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe5\xad\x97\xe5\x85\xb8\n\tlist_symbolmark=[] # \xe5\x88\x9d\xe5\xa7\x8b\xe5\x8c\x96symbol\xe5\x88\x97\xe8\xa1\xa8\n\tfor i in txt_lines:\n\t\tif(i!=\'\'):\n\t\t\ttxt_l=i.split(\' \')\n\t\t\tdic_symbol_list[txt_l[0]]=txt_l[1:]\n\t\t\tlist_symbolmark.append(txt_l[0])\n\ttxt_obj.close()\n\treturn dic_symbol_list,list_symbolmark\n\t\nif(__name__==\'__main__\'):\n\t\n\twave_data, fs = read_wav_data(""A2_0.wav"")  \n\t\n\twav_show(wave_data[0],fs)\n\tt0=time.time()\n\tfreimg = GetFrequencyFeature3(wave_data,fs)\n\tt1=time.time()\n\tprint(\'time cost:\',t1-t0)\n\t\n\tfreimg = freimg.T\n\tplt.subplot(111)\n\t\n\tplt.imshow(freimg)\n\tplt.colorbar(cax=None,ax=None,shrink=0.5)  \n\t \n\tplt.show() \n'"
general_function/gen_func.py,0,"b""#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n'''\n\xe4\xb8\x80\xe4\xba\x9b\xe9\x80\x9a\xe7\x94\xa8\xe5\x87\xbd\xe6\x95\xb0\n'''\n\nimport difflib\n\ndef GetEditDistance(str1, str2):\n\tleven_cost = 0\n\ts = difflib.SequenceMatcher(None, str1, str2)\n\tfor tag, i1, i2, j1, j2 in s.get_opcodes():\n\t\t#print('{:7} a[{}: {}] --> b[{}: {}] {} --> {}'.format(tag, i1, i2, j1, j2, str1[i1: i2], str2[j1: j2]))\n\t\tif tag == 'replace':\n\t\t\tleven_cost += max(i2-i1, j2-j1)\n\t\telif tag == 'insert':\n\t\t\tleven_cost += (j2-j1)\n\t\telif tag == 'delete':\n\t\t\tleven_cost += (i2-i1)\n\treturn leven_cost"""
general_function/muti_gpu.py,4,"b'#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\'\'\'\n\xe6\x84\x9f\xe8\xb0\xa2\xe5\x8e\x9f\xe4\xbd\x9c\xe8\x80\x85\xe7\x9a\x84\xe6\x97\xa0\xe7\xa7\x81\xe5\xa5\x89\xe7\x8c\xae\n\xe6\x9d\xa5\xe8\x87\xaa\xef\xbc\x9a\nhttps://www.jianshu.com/p/db0ba022936f\n\'\'\'\n\nimport tensorflow as tf\nimport keras\nimport keras.backend as K\nimport keras.layers as KL\n\nclass ParallelModel(keras.models.Model):\n    """"""Subclasses the standard Keras Model and adds multi-GPU support.\n    It works by creating a copy of the model on each GPU. Then it slices\n    the inputs and sends a slice to each copy of the model, and then\n    merges the outputs together and applies the loss on the combined\n    outputs.\n    """"""\n\n    def __init__(self, keras_model, gpu_count):\n        """"""Class constructor.\n        keras_model: The Keras model to parallelize\n        gpu_count: Number of GPUs. Must be > 1\n        """"""\n        super(ParallelModel, self).__init__() # Thanks to @greatken999 for fixing bugs\n        self.inner_model = keras_model\n        self.gpu_count = gpu_count\n        merged_outputs = self.make_parallel()\n        super(ParallelModel, self).__init__(inputs=self.inner_model.inputs,\n                                            outputs=merged_outputs)\n\n    def __getattribute__(self, attrname):\n        """"""Redirect loading and saving methods to the inner model. That\'s where\n        the weights are stored.""""""\n        if \'load\' in attrname or \'save\' in attrname:\n            return getattr(self.inner_model, attrname)\n        return super(ParallelModel, self).__getattribute__(attrname)\n\n    def summary(self, *args, **kwargs):\n        """"""Override summary() to display summaries of both, the wrapper\n        and inner models.""""""\n        super(ParallelModel, self).summary(*args, **kwargs)\n        self.inner_model.summary(*args, **kwargs)\n\n    def make_parallel(self):\n        """"""Creates a new wrapper model that consists of multiple replicas of\n        the original model placed on different GPUs.\n        """"""\n        # Slice inputs. Slice inputs on the CPU to avoid sending a copy\n        # of the full inputs to all GPUs. Saves on bandwidth and memory.\n        input_slices = {name: tf.split(x, self.gpu_count)\n                        for name, x in zip(self.inner_model.input_names,\n                                           self.inner_model.inputs)}\n\n        output_names = self.inner_model.output_names\n        outputs_all = []\n        for i in range(len(self.inner_model.outputs)):\n            outputs_all.append([])\n\n        # Run the model call() on each GPU to place the ops there\n        for i in range(self.gpu_count):\n            with tf.device(\'/gpu:%d\' % i):\n                with tf.name_scope(\'tower_%d\' % i):\n                    # Run a slice of inputs through this replica\n                    zipped_inputs = zip(self.inner_model.input_names,\n                                        self.inner_model.inputs)\n                    inputs = [\n                        KL.Lambda(lambda s: input_slices[name][i],\n                                  output_shape=lambda s: (None,) + s[1:])(tensor)\n                        for name, tensor in zipped_inputs]\n                    # Create the model replica and get the outputs\n                    outputs = self.inner_model(inputs)\n                    if not isinstance(outputs, list):\n                        outputs = [outputs]\n                    # Save the outputs for merging back together later\n                    for l, o in enumerate(outputs):\n                        outputs_all[l].append(o)\n\n        # Merge outputs on CPU\n        with tf.device(\'/cpu:0\'):\n            merged = []\n            for outputs, name in zip(outputs_all, output_names):\n                # If outputs are numbers without dimensions, add a batch dim.\n                def add_dim(tensor):\n                    """"""Add a dimension to tensors that don\'t have any.""""""\n                    if K.int_shape(tensor) == ():\n                        return KL.Lambda(lambda t: K.reshape(t, [1, 1]))(tensor)\n                    return tensor\n                outputs = list(map(add_dim, outputs))\n\n                # Concatenate\n                merged.append(KL.Concatenate(axis=0, name=name)(outputs))\n        return merged\n\n'"
