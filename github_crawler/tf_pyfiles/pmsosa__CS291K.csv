file_path,api_count,code
batchgen.py,0,"b'import csv\nimport re\nimport random\nimport numpy as np\n\nfrom IPython import embed\n\n#Separates a file with mixed positive and negative examples into two.\ndef separate_dataset(filename):\n    good_out = open(""good_""+filename,""w+"");\n    bad_out  = open(""bad_""+filename,""w+"");\n\n    seen = 1;\n    with open(filename,\'r\') as f:\n        reader = csv.reader(f)\n        reader.next()\n\n        for line in reader:\n            seen +=1\n            sentiment = line[1]\n            sentence = line[3]\n\n            if (sentiment == ""0""):\n                bad_out.write(sentence+""\\n"")\n            else:\n                good_out.write(sentence+""\\n"")\n\n            if (seen%10000==0):\n                print seen;\n\n    good_out.close();\n    bad_out.close();\n\n\n\n#Load Dataset\ndef get_dataset(goodfile,badfile,limit,randomize=True):\n    good_x = list(open(goodfile,""r"").readlines())\n    good_x = [s.strip() for s in good_x]\n    \n    bad_x  = list(open(badfile,""r"").readlines())\n    bad_x  = [s.strip() for s in bad_x]\n\n    if (randomize):\n        random.shuffle(bad_x)\n        random.shuffle(good_x)\n\n    good_x = good_x[:limit]\n    bad_x = bad_x[:limit]\n\n    x = good_x + bad_x\n    x = [clean_str(s) for s in x]\n\n\n    positive_labels = [[0, 1] for _ in good_x]\n    negative_labels = [[1, 0] for _ in bad_x]\n    y = np.concatenate([positive_labels, negative_labels], 0)\n    return [x,y]\n\n\n\n\n#Clean Dataset\ndef clean_str(string):\n\n\n    #EMOJIS\n    string = re.sub(r"":\\)"",""emojihappy1"",string)\n    string = re.sub(r"":P"",""emojihappy2"",string)\n    string = re.sub(r"":p"",""emojihappy3"",string)\n    string = re.sub(r"":>"",""emojihappy4"",string)\n    string = re.sub(r"":3"",""emojihappy5"",string)\n    string = re.sub(r"":D"",""emojihappy6"",string)\n    string = re.sub(r"" XD "",""emojihappy7"",string)\n    string = re.sub(r"" <3 "",""emojihappy8"",string)\n\n    string = re.sub(r"":\\("",""emojisad9"",string)\n    string = re.sub(r"":<"",""emojisad10"",string)\n    string = re.sub(r"":<"",""emojisad11"",string)\n    string = re.sub(r"">:\\("",""emojisad12"",string)\n\n    #MENTIONS ""(@)\\w+""\n    string = re.sub(r""(@)\\w+"",""mentiontoken"",string)\n    \n    #WEBSITES\n    string = re.sub(r""http(s)*:(\\S)*"",""linktoken"",string)\n\n    #STRANGE UNICODE \\x...\n    string = re.sub(r""\\\\x(\\S)*"","""",string)\n\n    #General Cleanup and Symbols\n    string = re.sub(r""[^A-Za-z0-9(),!?\\\'\\`]"", "" "", string)\n    string = re.sub(r""\\\'s"", "" \\\'s"", string)\n    string = re.sub(r""\\\'ve"", "" \\\'ve"", string)\n    string = re.sub(r""n\\\'t"", "" n\\\'t"", string)\n    string = re.sub(r""\\\'re"", "" \\\'re"", string)\n    string = re.sub(r""\\\'d"", "" \\\'d"", string)\n    string = re.sub(r""\\\'ll"", "" \\\'ll"", string)\n    string = re.sub(r"","", "" , "", string)\n    string = re.sub(r""!"", "" ! "", string)\n    string = re.sub(r""\\("", "" \\( "", string)\n    string = re.sub(r""\\)"", "" \\) "", string)\n    string = re.sub(r""\\?"", "" \\? "", string)\n    string = re.sub(r""\\s{2,}"", "" "", string)\n\n    return string.strip().lower()\n\n\n\n#Generate random batches\n#Source: https://github.com/dennybritz/cnn-text-classification-tf/blob/master/data_helpers.py\ndef gen_batch(data, batch_size, num_epochs, shuffle=True):\n    """"""\n    Generates a batch iterator for a dataset.\n    """"""\n    data = np.array(data)\n    data_size = len(data)\n    num_batches_per_epoch = int((len(data)-1)/batch_size) + 1\n    for epoch in range(num_epochs):\n        # Shuffle the data at each epoch\n        if shuffle:\n            shuffle_indices = np.random.permutation(np.arange(data_size))\n            shuffled_data = data[shuffle_indices]\n        else:\n            shuffled_data = data\n        for batch_num in range(num_batches_per_epoch):\n            start_index = batch_num * batch_size\n            end_index = min((batch_num + 1) * batch_size, data_size)\n            yield shuffled_data[start_index:end_index]\n\nif __name__ == ""__main__"":\n    separate_dataset(""small.txt"");\n\n\n#42\n#642'"
cnn.py,33,"b'#####\n# SOURCE: DENNY BRITZ - http://www.wildml.com/2015/12/implementing-a-cnn-for-text-classification-in-tensorflow/\n#####\n\nimport tensorflow as tf\nimport numpy as np\n\n\nclass CNN(object):\n    """"""\n    A CNN for text classification.\n    Uses an embedding layer, followed by a convolutional, max-pooling and softmax layer.\n    """"""\n    def __init__(\n      self, sequence_length, num_classes, vocab_size,\n      embedding_size, filter_sizes, num_filters, l2_reg_lambda=0.0):\n\n        # Placeholders for input, output and dropout\n        self.input_x = tf.placeholder(tf.int32, [None, sequence_length], name=""input_x"")\n        self.input_y = tf.placeholder(tf.float32, [None, num_classes], name=""input_y"")\n        self.dropout_keep_prob = tf.placeholder(tf.float32, name=""dropout_keep_prob"")\n\n        # Keeping track of l2 regularization loss (optional)\n        l2_loss = tf.constant(0.0)\n\n        # Embedding layer\n        with tf.device(\'/cpu:0\'), tf.name_scope(""embedding""):\n            self.W = tf.Variable(\n                tf.random_uniform([vocab_size, embedding_size], -1.0, 1.0),\n                name=""W"")\n            self.embedded_chars = tf.nn.embedding_lookup(self.W, self.input_x)\n            self.embedded_chars_expanded = tf.expand_dims(self.embedded_chars, -1)\n\n        # Create a convolution + maxpool layer for each filter size\n        pooled_outputs = []\n        for i, filter_size in enumerate(filter_sizes):\n            with tf.name_scope(""conv-maxpool-%s"" % filter_size):\n                # Convolution Layer\n                filter_shape = [filter_size, embedding_size, 1, num_filters]\n                W = tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name=""W"")\n                b = tf.Variable(tf.constant(0.1, shape=[num_filters]), name=""b"")\n                conv = tf.nn.conv2d(\n                    self.embedded_chars_expanded,\n                    W,\n                    strides=[1, 1, 1, 1],\n                    padding=""VALID"",\n                    name=""conv"")\n                # Apply nonlinearity\n                h = tf.nn.relu(tf.nn.bias_add(conv, b), name=""relu"")\n                # Maxpooling over the outputs\n                pooled = tf.nn.max_pool(\n                    h,\n                    ksize=[1, sequence_length - filter_size + 1, 1, 1],\n                    strides=[1, 1, 1, 1],\n                    padding=\'VALID\',\n                    name=""pool"")\n                pooled_outputs.append(pooled)\n\n        # Combine all the pooled features\n        num_filters_total = num_filters * len(filter_sizes)\n        self.h_pool = tf.concat(pooled_outputs, 3)\n        self.h_pool_flat = tf.reshape(self.h_pool, [-1, num_filters_total])\n\n        # Add dropout\n        with tf.name_scope(""dropout""):\n            self.h_drop = tf.nn.dropout(self.h_pool_flat, self.dropout_keep_prob)\n\n        # Final (unnormalized) scores and predictions\n        with tf.name_scope(""output""):\n            W = tf.get_variable(\n                ""W"",\n                shape=[num_filters_total, num_classes],\n                initializer=tf.contrib.layers.xavier_initializer())\n            b = tf.Variable(tf.constant(0.1, shape=[num_classes]), name=""b"")\n            l2_loss += tf.nn.l2_loss(W)\n            l2_loss += tf.nn.l2_loss(b)\n            self.scores = tf.nn.xw_plus_b(self.h_drop, W, b, name=""scores"")\n            self.predictions = tf.argmax(self.scores, 1, name=""predictions"")\n\n        # CalculateMean cross-entropy loss\n        with tf.name_scope(""loss""):\n            losses = tf.nn.softmax_cross_entropy_with_logits(logits=self.scores, labels=self.input_y)\n            self.loss = tf.reduce_mean(losses) + l2_reg_lambda * l2_loss\n\n        # Accuracy\n        with tf.name_scope(""accuracy""):\n            correct_predictions = tf.equal(self.predictions, tf.argmax(self.input_y, 1))\n            self.accuracy = tf.reduce_mean(tf.cast(correct_predictions, ""float""), name=""accuracy"")\n        print ""LOADED CNN!""'"
cnn_lstm.py,34,"b'import tensorflow as tf\nimport numpy as np\nfrom IPython import embed\n\nclass CNN_LSTM(object):\n    def __init__(self, sequence_length, num_classes, vocab_size, embedding_size, filter_sizes, num_filters, l2_reg_lambda=0.0,num_hidden=100):\n\n        # PLACEHOLDERS\n        self.input_x = tf.placeholder(tf.int32, [None, sequence_length], name=""input_x"")    # X - The Data\n        self.input_y = tf.placeholder(tf.float32, [None, num_classes], name=""input_y"")      # Y - The Lables\n        self.dropout_keep_prob = tf.placeholder(tf.float32, name=""dropout_keep_prob"")       # Dropout\n\n        \n        l2_loss = tf.constant(0.0) # Keeping track of l2 regularization loss\n\n        #1. EMBEDDING LAYER ################################################################\n        with tf.device(\'/cpu:0\'), tf.name_scope(""embedding""):\n            self.W = tf.Variable(tf.random_uniform([vocab_size, embedding_size], -1.0, 1.0),name=""W"")\n            self.embedded_chars = tf.nn.embedding_lookup(self.W, self.input_x)\n            self.embedded_chars_expanded = tf.expand_dims(self.embedded_chars, -1)\n\n        #2. CONVOLUTION LAYER + MAXPOOLING LAYER (per filter) ###############################\n        pooled_outputs = []\n        for i, filter_size in enumerate(filter_sizes):\n            with tf.name_scope(""conv-maxpool-%s"" % filter_size):\n                # CONVOLUTION LAYER\n                filter_shape = [filter_size, embedding_size, 1, num_filters]\n                W = tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name=""W"")\n                b = tf.Variable(tf.constant(0.1, shape=[num_filters]), name=""b"")\n                conv = tf.nn.conv2d(self.embedded_chars_expanded, W,strides=[1, 1, 1, 1],padding=""VALID"",name=""conv"")\n                # NON-LINEARITY\n                h = tf.nn.relu(tf.nn.bias_add(conv, b), name=""relu"")\n                # MAXPOOLING\n                pooled = tf.nn.max_pool(h, ksize=[1, sequence_length - filter_size + 1, 1, 1], strides=[1, 1, 1, 1], padding=\'VALID\', name=""pool"")\n                pooled_outputs.append(pooled)\n\n        # COMBINING POOLED FEATURES\n        num_filters_total = num_filters * len(filter_sizes)\n        self.h_pool = tf.concat(pooled_outputs, 3)\n        self.h_pool_flat = tf.reshape(self.h_pool, [-1, num_filters_total])\n        \n        #3. DROPOUT LAYER ###################################################################\n        with tf.name_scope(""dropout""):\n             self.h_drop = tf.nn.dropout(self.h_pool_flat, self.dropout_keep_prob)\n\n        #4. LSTM LAYER ######################################################################\n        cell = tf.contrib.rnn.LSTMCell(num_hidden,state_is_tuple=True)\n        self.h_drop_exp = tf.expand_dims(self.h_drop,-1)\n        val,state = tf.nn.dynamic_rnn(cell,self.h_drop_exp,dtype=tf.float32)\n        \n        #embed()\n\n        val2 = tf.transpose(val, [1, 0, 2])\n        last = tf.gather(val2, int(val2.get_shape()[0]) - 1) \n\n        out_weight = tf.Variable(tf.random_normal([num_hidden, num_classes]))\n        out_bias = tf.Variable(tf.random_normal([num_classes]))\n\n        with tf.name_scope(""output""):\n            #lstm_final_output = val[-1]\n            #embed()\n            self.scores = tf.nn.xw_plus_b(last, out_weight,out_bias, name=""scores"")\n            self.predictions = tf.nn.softmax(self.scores, name=""predictions"")\n\n        with tf.name_scope(""loss""):\n            self.losses = tf.nn.softmax_cross_entropy_with_logits(logits=self.scores,labels=self.input_y)\n            self.loss = tf.reduce_mean(self.losses, name=""loss"")\n\n        with tf.name_scope(""accuracy""):\n            self.correct_pred = tf.equal(tf.argmax(self.predictions, 1),tf.argmax(self.input_y, 1))\n            self.accuracy = tf.reduce_mean(tf.cast(self.correct_pred, ""float""),name=""accuracy"")\n\n        print ""(!) LOADED CNN-LSTM! :)""\n        #embed()\n\n'"
lstm.py,24,"b'#Roughly based around : https://github.com/jpmcd/TensorflowSentiment/blob/master/tf_lstm.py\n\nimport tensorflow as tf\nimport numpy as np\nfrom IPython import embed\n\nclass LSTM(object):\n    def __init__(self, sequence_length, num_classes, vocab_size, embedding_size, l2_reg_lambda=0.0,num_hidden=100):\n\n        # PLACEHOLDERS\n        self.input_x = tf.placeholder(tf.int32, [None, sequence_length], name=""input_x"")    # X - The Data\n        self.input_y = tf.placeholder(tf.float32, [None, num_classes], name=""input_y"")      # Y - The Lables\n        self.dropout_keep_prob = tf.placeholder(tf.float32, name=""dropout_keep_prob"")       # Dropout\n\n        \n        l2_loss = tf.constant(0.0) # Keeping track of l2 regularization loss\n\n        #1. EMBEDDING LAYER ################################################################\n        with tf.device(\'/cpu:0\'), tf.name_scope(""embedding""):\n            self.W = tf.Variable(tf.random_uniform([vocab_size, embedding_size], -1.0, 1.0),name=""W"")\n            self.embedded_chars = tf.nn.embedding_lookup(self.W, self.input_x)\n            #self.embedded_chars_expanded = tf.expand_dims(self.embedded_chars, -1)\n\n\n        #2. LSTM LAYER ######################################################################\n        self.lstm_cell = tf.contrib.rnn.LSTMCell(num_hidden,state_is_tuple=True)\n        #self.h_drop_exp = tf.expand_dims(self.h_drop,-1)\n        self.lstm_out,self.lstm_state = tf.nn.dynamic_rnn(self.lstm_cell,self.embedded_chars,dtype=tf.float32)\n        #embed()\n\n        val2 = tf.transpose(self.lstm_out, [1, 0, 2])\n        last = tf.gather(val2, int(val2.get_shape()[0]) - 1) \n\n        out_weight = tf.Variable(tf.random_normal([num_hidden, num_classes]))\n        out_bias = tf.Variable(tf.random_normal([num_classes]))\n\n        with tf.name_scope(""output""):\n            #lstm_final_output = val[-1]\n            #embed()\n            self.scores = tf.nn.xw_plus_b(last, out_weight,out_bias, name=""scores"")\n            self.predictions = tf.nn.softmax(self.scores, name=""predictions"")\n\n        with tf.name_scope(""loss""):\n            self.losses = tf.nn.softmax_cross_entropy_with_logits(logits=self.scores,labels=self.input_y)\n            self.loss = tf.reduce_mean(self.losses, name=""loss"")\n\n        with tf.name_scope(""accuracy""):\n            self.correct_pred = tf.equal(tf.argmax(self.predictions, 1),tf.argmax(self.input_y, 1))\n            self.accuracy = tf.reduce_mean(tf.cast(self.correct_pred, ""float""),name=""accuracy"")\n        print ""LOADED LSTM!""\n'"
lstm_cnn.py,36,"b'import tensorflow as tf\nimport numpy as np\nfrom IPython import embed\n\nclass LSTM_CNN(object):\n    def __init__(self, sequence_length, num_classes, vocab_size, embedding_size, filter_sizes, num_filters, l2_reg_lambda=0.0,num_hidden=100):\n\n        # PLACEHOLDERS\n        self.input_x = tf.placeholder(tf.int32, [None, sequence_length], name=""input_x"")    # X - The Data\n        self.input_y = tf.placeholder(tf.float32, [None, num_classes], name=""input_y"")      # Y - The Lables\n        self.dropout_keep_prob = tf.placeholder(tf.float32, name=""dropout_keep_prob"")       # Dropout\n\n        \n        l2_loss = tf.constant(0.0) # Keeping track of l2 regularization loss\n\n        #1. EMBEDDING LAYER ################################################################\n        with tf.device(\'/cpu:0\'), tf.name_scope(""embedding""):\n            self.W = tf.Variable(tf.random_uniform([vocab_size, embedding_size], -1.0, 1.0),name=""W"")\n            self.embedded_chars = tf.nn.embedding_lookup(self.W, self.input_x)\n            #self.embedded_chars_expanded = tf.expand_dims(self.embedded_chars, -1)\n\n\n        #2. LSTM LAYER ######################################################################\n        self.lstm_cell = tf.contrib.rnn.LSTMCell(32,state_is_tuple=True)\n        #self.h_drop_exp = tf.expand_dims(self.h_drop,-1)\n        self.lstm_out,self.lstm_state = tf.nn.dynamic_rnn(self.lstm_cell,self.embedded_chars,dtype=tf.float32)\n        #embed()\n\n        self.lstm_out_expanded = tf.expand_dims(self.lstm_out, -1)\n\n        #2. CONVOLUTION LAYER + MAXPOOLING LAYER (per filter) ###############################\n        pooled_outputs = []\n        for i, filter_size in enumerate(filter_sizes):\n            with tf.name_scope(""conv-maxpool-%s"" % filter_size):\n                # CONVOLUTION LAYER\n                filter_shape = [filter_size, embedding_size, 1, num_filters]\n                W = tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name=""W"")\n                b = tf.Variable(tf.constant(0.1, shape=[num_filters]), name=""b"")\n                conv = tf.nn.conv2d(self.lstm_out_expanded, W,strides=[1, 1, 1, 1],padding=""VALID"",name=""conv"")\n                # NON-LINEARITY\n                h = tf.nn.relu(tf.nn.bias_add(conv, b), name=""relu"")\n                # MAXPOOLING\n                pooled = tf.nn.max_pool(h, ksize=[1, sequence_length - filter_size + 1, 1, 1], strides=[1, 1, 1, 1], padding=\'VALID\', name=""pool"")\n                pooled_outputs.append(pooled)\n\n        # COMBINING POOLED FEATURES\n        num_filters_total = num_filters * len(filter_sizes)\n        self.h_pool = tf.concat(pooled_outputs, 3)\n        self.h_pool_flat = tf.reshape(self.h_pool, [-1, num_filters_total])\n        \n        # #3. DROPOUT LAYER ###################################################################\n        with tf.name_scope(""dropout""):\n            self.h_drop = tf.nn.dropout(self.h_pool_flat, self.dropout_keep_prob)\n\n        # Final (unnormalized) scores and predictions\n        with tf.name_scope(""output""):\n            W = tf.get_variable(\n                ""W"",\n                shape=[num_filters_total, num_classes],\n                initializer=tf.contrib.layers.xavier_initializer())\n            b = tf.Variable(tf.constant(0.1, shape=[num_classes]), name=""b"")\n            l2_loss += tf.nn.l2_loss(W)\n            l2_loss += tf.nn.l2_loss(b)\n            self.scores = tf.nn.xw_plus_b(self.h_drop, W, b, name=""scores"")\n            self.predictions = tf.argmax(self.scores, 1, name=""predictions"")\n\n        # CalculateMean cross-entropy loss\n        with tf.name_scope(""loss""):\n            losses = tf.nn.softmax_cross_entropy_with_logits(logits=self.scores, labels=self.input_y)\n            self.loss = tf.reduce_mean(losses) + l2_reg_lambda * l2_loss\n\n        # Accuracy\n        with tf.name_scope(""accuracy""):\n            correct_predictions = tf.equal(self.predictions, tf.argmax(self.input_y, 1))\n            self.accuracy = tf.reduce_mean(tf.cast(correct_predictions, ""float""), name=""accuracy"")\n\n\n        print ""(!!) LOADED LSTM-CNN! :)""\n        #embed()\n\n\n\n# 1. Embed --> LSTM\n# 2. LSTM --> CNN\n# 3. CNN --> Pooling/Output'"
train.py,21,"b'#! /usr/bin/env python\nimport sys\n\n#SELECT WHICH MODEL YOU WISH TO RUN:\nfrom cnn_lstm import CNN_LSTM   #OPTION 0\nfrom lstm_cnn import LSTM_CNN   #OPTION 1\nfrom cnn import CNN             #OPTION 2 (Model by: Danny Britz)\nfrom lstm import LSTM           #OPTION 3\nMODEL_TO_RUN = 0\n\n\nimport tensorflow as tf\nimport numpy as np\nimport os\nimport time\nimport datetime\nimport batchgen\nfrom tensorflow.contrib import learn\n\nfrom IPython import embed\n\n# Parameters\n# ==================================================\n\n# Data loading params\ndev_size = .10\n\n# Model Hyperparameters\nembedding_dim  = 32     #128\nmax_seq_legth = 70 \nfilter_sizes = [3,4,5]  #3\nnum_filters = 32\ndropout_prob = 0.5 #0.5\nl2_reg_lambda = 0.0\nuse_glove = True #Do we use glove\n\n# Training parameters\nbatch_size = 128\nnum_epochs = 10 #200\nevaluate_every = 100 #100\ncheckpoint_every = 100000 #100\nnum_checkpoints = 0 #Checkpoints to store\n\n\n# Misc Parameters\nallow_soft_placement = True\nlog_device_placement = False\n\n\n\n# Data Preparation\n# ==================================================\n\n\nfilename = ""../tweets.csv""\ngoodfile = ""../good_tweets.csv""\nbadfile = ""../bad_tweets.csv""\n\n\n# Load data\nprint(""Loading data..."")\nx_text, y = batchgen.get_dataset(goodfile, badfile, 5000) #TODO: MAX LENGTH\n\n# Build vocabulary\nmax_document_length = max([len(x.split("" "")) for x in x_text])\nif (not use_glove):\n    print ""Not using GloVe""\n    vocab_processor = learn.preprocessing.VocabularyProcessor(max_document_length)\n    x = np.array(list(vocab_processor.fit_transform(x_text)))\nelse:\n    print ""Using GloVe""\n    embedding_dim = 50\n    filename = \'../glove.6B.50d.txt\'\n    def loadGloVe(filename):\n        vocab = []\n        embd = []\n        file = open(filename,\'r\')\n        for line in file.readlines():\n            row = line.strip().split(\' \')\n            vocab.append(row[0])\n            embd.append(row[1:])\n        print(\'Loaded GloVe!\')\n        file.close()\n        return vocab,embd\n    vocab,embd = loadGloVe(filename)\n    vocab_size = len(vocab)\n    embedding_dim = len(embd[0])\n    embedding = np.asarray(embd)\n\n    W = tf.Variable(tf.constant(0.0, shape=[vocab_size, embedding_dim]),\n                    trainable=False, name=""W"")\n    embedding_placeholder = tf.placeholder(tf.float32, [vocab_size, embedding_dim])\n    embedding_init = W.assign(embedding_placeholder)\n\n    session_conf = tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)\n    sess = tf.Session(config=session_conf)\n    sess.run(embedding_init, feed_dict={embedding_placeholder: embedding})\n\n    from tensorflow.contrib import learn\n    #init vocab processor\n    vocab_processor = learn.preprocessing.VocabularyProcessor(max_document_length)\n    #fit the vocab from glove\n    pretrain = vocab_processor.fit(vocab)\n    #transform inputs\n    x = np.array(list(vocab_processor.transform(x_text)))\n\n    #init vocab processor\n    vocab_processor = learn.preprocessing.VocabularyProcessor(max_document_length)\n    #fit the vocab from glove\n    pretrain = vocab_processor.fit(vocab)\n    #transform inputs\n    x = np.array(list(vocab_processor.transform(x_text)))\n\n\n# Randomly shuffle data\nnp.random.seed(42)\nshuffle_indices = np.random.permutation(np.arange(len(y)))\nx_shuffled = x[shuffle_indices]\ny_shuffled = y[shuffle_indices]\n\n# Split train/test set\n# TODO: This is very crude, should use cross-validation\ndev_sample_index = -1 * int(dev_size * float(len(y)))\nx_train, x_dev = x_shuffled[:dev_sample_index], x_shuffled[dev_sample_index:]\ny_train, y_dev = y_shuffled[:dev_sample_index], y_shuffled[dev_sample_index:]\nprint(""Vocabulary Size: {:d}"".format(len(vocab_processor.vocabulary_)))\nprint(""Train/Dev split: {:d}/{:d}"".format(len(y_train), len(y_dev)))\n\n#embed()\n\n\n# Training\n# ==================================================\n\nwith tf.Graph().as_default():\n    session_conf = tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)\n    sess = tf.Session(config=session_conf)\n    with sess.as_default():\n        #embed()\n        if (MODEL_TO_RUN == 0):\n            model = CNN_LSTM(x_train.shape[1],y_train.shape[1],len(vocab_processor.vocabulary_),embedding_dim,filter_sizes,num_filters,l2_reg_lambda)\n        elif (MODEL_TO_RUN == 1):\n            model = LSTM_CNN(x_train.shape[1],y_train.shape[1],len(vocab_processor.vocabulary_),embedding_dim,filter_sizes,num_filters,l2_reg_lambda)\n        elif (MODEL_TO_RUN == 2):\n            model = CNN(x_train.shape[1],y_train.shape[1],len(vocab_processor.vocabulary_),embedding_dim,filter_sizes,num_filters,l2_reg_lambda)\n        elif (MODEL_TO_RUN == 3):\n            model = LSTM(x_train.shape[1],y_train.shape[1],len(vocab_processor.vocabulary_),embedding_dim)\n        else:\n            print ""PLEASE CHOOSE A VALID MODEL!\\n0 = CNN_LSTM\\n1 = LSTM_CNN\\n2 = CNN\\n3 = LSTM\\n""\n            exit();\n\n\n        # Define Training procedure\n        global_step = tf.Variable(0, name=""global_step"", trainable=False)\n        optimizer = tf.train.AdamOptimizer(1e-3)\n        grads_and_vars = optimizer.compute_gradients(model.loss)\n        train_op = optimizer.apply_gradients(grads_and_vars, global_step=global_step)\n\n        # Keep track of gradient values and sparsity (optional)\n        grad_summaries = []\n        for g, v in grads_and_vars:\n            if g is not None:\n                grad_hist_summary = tf.summary.histogram(""{}/grad/hist"".format(v.name), g)\n                sparsity_summary = tf.summary.scalar(""{}/grad/sparsity"".format(v.name), tf.nn.zero_fraction(g))\n                grad_summaries.append(grad_hist_summary)\n                grad_summaries.append(sparsity_summary)\n        grad_summaries_merged = tf.summary.merge(grad_summaries)\n\n        # Output directory for models and summaries\n        timestamp = str(int(time.time()))\n        out_dir = os.path.abspath(os.path.join(os.path.curdir, ""runs"", timestamp))\n        print(""Writing to {}\\n"".format(out_dir))\n\n        # Summaries for loss and accuracy\n        loss_summary = tf.summary.scalar(""loss"", model.loss)\n        acc_summary = tf.summary.scalar(""accuracy"", model.accuracy)\n\n        # Train Summaries\n        train_summary_op = tf.summary.merge([loss_summary, acc_summary, grad_summaries_merged])\n        train_summary_dir = os.path.join(out_dir, ""summaries"", ""train"")\n        train_summary_writer = tf.summary.FileWriter(train_summary_dir, sess.graph)\n\n        # Dev summaries\n        dev_summary_op = tf.summary.merge([loss_summary, acc_summary])\n        dev_summary_dir = os.path.join(out_dir, ""summaries"", ""dev"")\n        dev_summary_writer = tf.summary.FileWriter(dev_summary_dir, sess.graph)\n\n        # Checkpoint directory. Tensorflow assumes this directory already exists so we need to create it\n        checkpoint_dir = os.path.abspath(os.path.join(out_dir, ""checkpoints""))\n        checkpoint_prefix = os.path.join(checkpoint_dir, ""model"")\n        if not os.path.exists(checkpoint_dir):\n            os.makedirs(checkpoint_dir)\n        saver = tf.train.Saver(tf.global_variables(), max_to_keep=num_checkpoints)\n\n        # Write vocabulary\n        vocab_processor.save(os.path.join(out_dir, ""vocab""))\n\n        # Initialize all variables\n        sess.run(tf.global_variables_initializer())\n\n        #TRAINING STEP\n        def train_step(x_batch, y_batch,save=False):\n            feed_dict = {\n              model.input_x: x_batch,\n              model.input_y: y_batch,\n              model.dropout_keep_prob: dropout_prob\n            }\n            _, step, summaries, loss, accuracy = sess.run(\n                [train_op, global_step, train_summary_op, model.loss, model.accuracy],\n                feed_dict)\n            time_str = datetime.datetime.now().isoformat()\n            print(""{}: step {}, loss {:g}, acc {:g}"".format(time_str, step, loss, accuracy))\n            if save:\n                train_summary_writer.add_summary(summaries, step)\n\n        #EVALUATE MODEL\n        def dev_step(x_batch, y_batch, writer=None,save=False):\n            feed_dict = {\n              model.input_x: x_batch,\n              model.input_y: y_batch,\n              model.dropout_keep_prob: 0.5\n            }\n            step, summaries, loss, accuracy = sess.run(\n                [global_step, dev_summary_op, model.loss, model.accuracy],\n                feed_dict)\n            time_str = datetime.datetime.now().isoformat()\n            print(""{}: step {}, loss {:g}, acc {:g}"".format(time_str, step, loss, accuracy))\n            if save:\n                if writer:\n                    writer.add_summary(summaries, step)\n\n        #CREATE THE BATCHES GENERATOR\n        batches = batchgen.gen_batch(list(zip(x_train, y_train)), batch_size, num_epochs)\n        \n        #TRAIN FOR EACH BATCH\n        for batch in batches:\n            x_batch, y_batch = zip(*batch)\n            train_step(x_batch, y_batch)\n            current_step = tf.train.global_step(sess, global_step)\n            if current_step % evaluate_every == 0:\n                print(""\\nEvaluation:"")\n                dev_step(x_dev, y_dev, writer=dev_summary_writer)\n                print("""")\n            if current_step % checkpoint_every == 0:\n                path = saver.save(sess, checkpoint_prefix, global_step=current_step)\n                print(""Saved model checkpoint to {}\\n"".format(path))\n        dev_step(x_dev, y_dev, writer=dev_summary_writer)\n'"
