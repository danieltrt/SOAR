file_path,api_count,code
transform.py,0,"b'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# File: transform.py\n# Author: Yuxin Wu\n\n\nimport sys\nimport os\nimport bs4\nimport magic\n\nfname = sys.argv[1]\nif not fname.endswith(\'.html\'):\n    sys.exit(0)\n\nif \'gzip compressed\' in magic.from_file(fname):\n    import gzip\n    f = gzip.open(fname)\nelse:\n    f = open(fname, \'rb\')\nhtml = f.read().decode(\'utf-8\')\n\n\ndef get_level():\n    dirname = os.path.dirname(fname)\n    cnt = 0\n    while not os.path.isfile(os.path.join(dirname, \'main.css\')):\n        dirname = os.path.join(dirname, \'..\')\n        cnt += 1\n    return cnt\n\n\nprint(""Processing {} ..."".format(fname))\nlevel = get_level()\nsoup = bs4.BeautifulSoup(html, \'lxml\')\n\n\ndef remove(*args, **kwargs):\n    rs = soup.findAll(*args, **kwargs)\n    for r in rs:\n        r.extract()\n\n\nremove(\'header\')\nremove(\'footer\')\nremove(\'nav\')\nremove(\'devsite-header\')\nremove(\'devsite-content-footer\')\nremove(\'script\')\n\n# point to the new css\nallcss = soup.findAll(\'link\', attrs={\'rel\': \'stylesheet\'})\nif allcss:\n    css = allcss[0]\n    css[\'href\'] = \'\'.join([\'../\'] * level) + \'main.css\'\n    for k in allcss[1:]:\n        k.extract()\n\n\ntry:\n    title_node = soup.findAll(\'h1\', attrs={\'class\': \'devsite-page-title\'})\n    if title_node:\n        title_node = title_node[0]\n\n        # mark method\n        method_node = soup.findAll(\'h2\', attrs={\'id\': \'methods\'})\n        if method_node:\n            title_node.attrs[\'class\'] = \'dash-class\'\n            title = title_node.getText().strip()\n            body = method_node[0].parent\n            children = body.children\n            children = [x for x in children if x != \'\\n\']\n            for k in range(len(children) - 1):\n                if children[k].name == \'h3\' and children[k + 1].name == \'pre\':\n                    # is a method:\n                    children[k].attrs[\'class\'] = \'dash-method\'\n                    code = next(children[k].children)\n                    code.string = title + \'.\' + code.text\n                    #print(""Find method "", children[k].getText())\n        else:\n            title_node.attrs[\'class\'] = \'dash-function\'\nexcept Exception:\n    print(""Error parsing {}"".format(fname))\n\n# mathjax doesn\'t work currently\n# jss = soup.findAll(\'script\')\n# for js in jss:\n    # if \'MathJax\' in js.get(\'src\'):\n        # js[\'src\'] = \'/\'.join([\'..\'] * level) + js[\'src\']\n        # break\n\nto_write = str(soup).encode(\'utf-8\')\nwith open(fname, \'wb\') as f:\n    f.write(to_write)\n'"
