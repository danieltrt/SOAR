file_path,api_count,code
setup.py,0,"b'from setuptools import setup\nexec(open(\'keras_squeezenet/version.py\').read())\nsetup(name=\'keras_squeezenet\',\n      version=__version__,\n      description=\'Squeezenet implementation with Keras framework\',\n      url=\'https://github.com/rcmalli/keras-squeezenet\',\n      author=\'Refik Can MALLI\',\n      author_email = ""mallir@itu.edu.tr"",\n      license=\'MIT\',\n      packages=[\'keras_squeezenet\'],\n      zip_safe=False,\n      install_requires=[\'numpy>=1.9.1\',\n                        \'scipy>=0.14\',\n                        \'h5py\',\n                        \'tensorflow\',\n                        \'keras\',\n                        \'six>=1.9.0\',\n                        \'pyyaml\'])\n'"
test.py,0,"b""import numpy as np\nfrom keras_squeezenet import SqueezeNet\nfrom keras.applications.imagenet_utils import preprocess_input, decode_predictions\nfrom keras.preprocessing import image\nimport keras\nimport unittest\n\n\n\nclass SqueezeNetTests(unittest.TestCase):\n\n    def testModelInit(self):\n        model = SqueezeNet()\n        self.assertIsNotNone(model)\n    def testTFwPrediction(self):\n        keras.backend.set_image_dim_ordering('tf')\n        model = SqueezeNet()\n        img = image.load_img('images/cat.jpeg', target_size=(227, 227))\n        x = image.img_to_array(img)\n        x = np.expand_dims(x, axis=0)\n        x = preprocess_input(x)\n        preds = model.predict(x)\n        decoded_preds = decode_predictions(preds)\n        #print('Predicted:', decoded_preds)\n        self.assertIn(decoded_preds[0][0][1], 'tabby')\n        #self.assertAlmostEqual(decode_predictions(preds)[0][0][2], 0.82134342)\n    def testTHPrediction(self):\n        keras.backend.set_image_dim_ordering('th')\n        model = SqueezeNet()\n        img = image.load_img('images/cat.jpeg', target_size=(227, 227))\n        x = image.img_to_array(img)\n        x = np.expand_dims(x, axis=0)\n        x = preprocess_input(x)\n        preds = model.predict(x)\n        decoded_preds = decode_predictions(preds)\n        #print('Predicted:', decoded_preds)\n        self.assertIn(decoded_preds[0][0][1], 'tabby')\n        #self.assertAlmostEqual(decode_predictions(preds)[0][0][2], 0.82134342)\n\nif __name__ == '__main__':\n    unittest.main()"""
keras_squeezenet/__init__.py,0,b'from keras_squeezenet.squeezenet import SqueezeNet\nfrom keras_squeezenet.version import __version__\n'
keras_squeezenet/squeezenet.py,0,"b'from keras_applications.imagenet_utils import _obtain_input_shape\nfrom keras import backend as K\nfrom keras.layers import Input, Convolution2D, MaxPooling2D, Activation, concatenate, Dropout, warnings\nfrom keras.layers import GlobalAveragePooling2D, GlobalMaxPooling2D\nfrom keras.models import Model\nfrom keras.engine.topology import get_source_inputs\nfrom keras.utils import get_file\nfrom keras.utils import layer_utils\n\n\nsq1x1 = ""squeeze1x1""\nexp1x1 = ""expand1x1""\nexp3x3 = ""expand3x3""\nrelu = ""relu_""\n\nWEIGHTS_PATH = ""https://github.com/rcmalli/keras-squeezenet/releases/download/v1.0/squeezenet_weights_tf_dim_ordering_tf_kernels.h5""\nWEIGHTS_PATH_NO_TOP = ""https://github.com/rcmalli/keras-squeezenet/releases/download/v1.0/squeezenet_weights_tf_dim_ordering_tf_kernels_notop.h5""\n\n# Modular function for Fire Node\n\ndef fire_module(x, fire_id, squeeze=16, expand=64):\n    s_id = \'fire\' + str(fire_id) + \'/\'\n\n    if K.image_data_format() == \'channels_first\':\n        channel_axis = 1\n    else:\n        channel_axis = 3\n    \n    x = Convolution2D(squeeze, (1, 1), padding=\'valid\', name=s_id + sq1x1)(x)\n    x = Activation(\'relu\', name=s_id + relu + sq1x1)(x)\n\n    left = Convolution2D(expand, (1, 1), padding=\'valid\', name=s_id + exp1x1)(x)\n    left = Activation(\'relu\', name=s_id + relu + exp1x1)(left)\n\n    right = Convolution2D(expand, (3, 3), padding=\'same\', name=s_id + exp3x3)(x)\n    right = Activation(\'relu\', name=s_id + relu + exp3x3)(right)\n\n    x = concatenate([left, right], axis=channel_axis, name=s_id + \'concat\')\n    return x\n\n\n# Original SqueezeNet from paper.\n\ndef SqueezeNet(include_top=True, weights=\'imagenet\',\n               input_tensor=None, input_shape=None,\n               pooling=None,\n               classes=1000):\n    """"""Instantiates the SqueezeNet architecture.\n    """"""\n        \n    if weights not in {\'imagenet\', None}:\n        raise ValueError(\'The `weights` argument should be either \'\n                         \'`None` (random initialization) or `imagenet` \'\n                         \'(pre-training on ImageNet).\')\n\n    if weights == \'imagenet\' and classes != 1000:\n        raise ValueError(\'If using `weights` as imagenet with `include_top`\'\n                         \' as true, `classes` should be 1000\')\n\n\n    input_shape = _obtain_input_shape(input_shape,\n                                      default_size=227,\n                                      min_size=48,\n                                      data_format=K.image_data_format(),\n                                      require_flatten=include_top)\n\n    if input_tensor is None:\n        img_input = Input(shape=input_shape)\n    else:\n        if not K.is_keras_tensor(input_tensor):\n            img_input = Input(tensor=input_tensor, shape=input_shape)\n        else:\n            img_input = input_tensor\n\n\n    x = Convolution2D(64, (3, 3), strides=(2, 2), padding=\'valid\', name=\'conv1\')(img_input)\n    x = Activation(\'relu\', name=\'relu_conv1\')(x)\n    x = MaxPooling2D(pool_size=(3, 3), strides=(2, 2), name=\'pool1\')(x)\n\n    x = fire_module(x, fire_id=2, squeeze=16, expand=64)\n    x = fire_module(x, fire_id=3, squeeze=16, expand=64)\n    x = MaxPooling2D(pool_size=(3, 3), strides=(2, 2), name=\'pool3\')(x)\n\n    x = fire_module(x, fire_id=4, squeeze=32, expand=128)\n    x = fire_module(x, fire_id=5, squeeze=32, expand=128)\n    x = MaxPooling2D(pool_size=(3, 3), strides=(2, 2), name=\'pool5\')(x)\n\n    x = fire_module(x, fire_id=6, squeeze=48, expand=192)\n    x = fire_module(x, fire_id=7, squeeze=48, expand=192)\n    x = fire_module(x, fire_id=8, squeeze=64, expand=256)\n    x = fire_module(x, fire_id=9, squeeze=64, expand=256)\n    \n    if include_top:\n        # It\'s not obvious where to cut the network... \n        # Could do the 8th or 9th layer... some work recommends cutting earlier layers.\n    \n        x = Dropout(0.5, name=\'drop9\')(x)\n\n        x = Convolution2D(classes, (1, 1), padding=\'valid\', name=\'conv10\')(x)\n        x = Activation(\'relu\', name=\'relu_conv10\')(x)\n        x = GlobalAveragePooling2D()(x)\n        x = Activation(\'softmax\', name=\'loss\')(x)\n    else:\n        if pooling == \'avg\':\n            x = GlobalAveragePooling2D()(x)\n        elif pooling==\'max\':\n            x = GlobalMaxPooling2D()(x)\n        elif pooling==None:\n            pass\n        else:\n            raise ValueError(""Unknown argument for \'pooling\'="" + pooling)\n\n    # Ensure that the model takes into account\n    # any potential predecessors of `input_tensor`.\n    if input_tensor is not None:\n        inputs = get_source_inputs(input_tensor)\n    else:\n        inputs = img_input\n\n    model = Model(inputs, x, name=\'squeezenet\')\n\n    # load weights\n    if weights == \'imagenet\':\n        if include_top:\n            weights_path = get_file(\'squeezenet_weights_tf_dim_ordering_tf_kernels.h5\',\n                                    WEIGHTS_PATH,\n                                    cache_subdir=\'models\')\n        else:\n            weights_path = get_file(\'squeezenet_weights_tf_dim_ordering_tf_kernels_notop.h5\',\n                                    WEIGHTS_PATH_NO_TOP,\n                                    cache_subdir=\'models\')\n            \n        model.load_weights(weights_path)\n        if K.backend() == \'theano\':\n            layer_utils.convert_all_kernels_in_model(model)\n\n        if K.image_data_format() == \'channels_first\':\n\n            if K.backend() == \'tensorflow\':\n                warnings.warn(\'You are using the TensorFlow backend, yet you \'\n                              \'are using the Theano \'\n                              \'image data format convention \'\n                              \'(`image_data_format=""channels_first""`). \'\n                              \'For best performance, set \'\n                              \'`image_data_format=""channels_last""` in \'\n                              \'your Keras config \'\n                              \'at ~/.keras/keras.json.\')\n    return model\n\n\n'"
keras_squeezenet/version.py,0,"b""__version__ = '0.4'"""
