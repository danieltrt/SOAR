file_path,api_count,code
examples/jupyter-keras-tract/make_predictions.py,1,"b'import tensorflow as tf\nimport numpy as np\nimport warnings\n\nwarnings.filterwarnings(""ignore"")\nX = np.random.random((10, 100))\nnew_model = tf.keras.models.load_model(\'my_model\')\n    \n    \npredictions = new_model.predict(X)\n\nprint(f""result: {predictions}"")'"
examples/pytorch-resnet/export.py,0,"b'import torch\nimport torchvision\n\n\ndef export():\n    dummy_input = torch.randn(1, 3, 224, 224)\n    model = torchvision.models.resnet18(pretrained=True)\n    torch.onnx.export(model, dummy_input, ""resnet.onnx"")\n\n\nif __name__ == ""__main__"":\n    export()\n'"
harness/onnx-test-suite/debug-utils/save_all.py,0,"b'import os\nimport sys\nimport numpy\nimport onnx\nfrom onnx import numpy_helper\nimport onnxruntime as rt\n\nmodel = sys.argv[1]\noutput_name = sys.argv[2]\n\nprint(""model: "" + model)\nprint(""output: "" + output_name)\nsess = rt.InferenceSession(model)\n\nknown = {}\nfor i in range(3, len(sys.argv)):\n    input_data = sys.argv[i]\n    if input_data.endswith("".npz""):\n        tensors = numpy.load(input_data)\n        for name, array in tensors.items():\n            known[name] = array\n        name = sess.get_inputs()[i-3].name\n    elif input_data.endswith("".pb""):\n        new_tensor = onnx.TensorProto()\n        with open(input_data, \'rb\') as f:\n            new_tensor.ParseFromString(f.read())\n        name = new_tensor.name\n        input_data = numpy_helper.to_array(new_tensor)\n\nprint(""known: "", known)\n\ninputs = {}\nfor input in sess.get_inputs():\n    inputs[input.name] = known[input.name]\n\noutputs = inputs.copy()\npred_onnx = sess.run(None, inputs)\n\nfor ix, output in enumerate(sess.get_outputs()):\n    outputs[output.name] = pred_onnx[ix]\n\nprint(""computed: "", outputs.keys())\n\nfor name, array in outputs.items():\n    print(name)\n    print(array)\n\nos.mkdir(output_name)\n\nfor name in outputs:\n    value = numpy_helper.from_array(outputs[name], name=name)\n    with open(output_name + ""/"" + name + "".pb"", \'wb\') as f:\n        f.write(value.SerializeToString())\n'"
