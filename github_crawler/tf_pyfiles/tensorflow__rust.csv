file_path,api_count,code
examples/addition/addition.py,6,"b""import tensorflow as tf\n\n\nx = tf.placeholder(tf.int32, name = 'x')\ny = tf.placeholder(tf.int32, name = 'y')\nz = tf.add(x, y, name = 'z')\n\ntf.variables_initializer(tf.global_variables(), name = 'init')\n\ndefinition = tf.Session().graph_def\ndirectory = 'examples/addition'\ntf.train.write_graph(definition, directory, 'model.pb', as_text=False)\n"""
examples/regression/regression.py,9,"b""import os\nimport tensorflow as tf\n\nx = tf.placeholder(tf.float32, name='x')\ny = tf.placeholder(tf.float32, name='y')\n\nw = tf.Variable(tf.random_uniform([1], -1.0, 1.0), name='w')\nb = tf.Variable(tf.zeros([1]), name='b')\ny_hat = w * x + b\n\nloss = tf.reduce_mean(tf.square(y_hat - y))\noptimizer = tf.train.GradientDescentOptimizer(0.5)\ntrain = optimizer.minimize(loss, name='train')\n\ninit = tf.variables_initializer(tf.global_variables(), name='init')\n\ndefinition = tf.Session().graph_def\ndirectory = 'examples/regression'\ntf.train.write_graph(definition, directory, 'model.pb', as_text=False)\n"""
examples/regression_checkpoint/regression_checkpoint.py,10,"b""import os\nimport tensorflow as tf\n\nx = tf.placeholder(tf.float32, name='x')\ny = tf.placeholder(tf.float32, name='y')\n\nw = tf.Variable(tf.random_uniform([1], -1.0, 1.0), name='w')\nb = tf.Variable(tf.zeros([1]), name='b')\ny_hat = w * x + b\n\nloss = tf.reduce_mean(tf.square(y_hat - y))\noptimizer = tf.train.GradientDescentOptimizer(0.5)\ntrain = optimizer.minimize(loss, name='train')\n\ninit = tf.variables_initializer(tf.global_variables(), name='init')\n\n# Declare saver ops\nsaver = tf.train.Saver(tf.global_variables())\n\ndefinition = tf.Session().graph_def\ndirectory = 'examples/regression_checkpoint'\ntf.train.write_graph(definition, directory, 'model.pb', as_text=False)\n"""
examples/regression_savedmodel/regression_savedmodel.py,10,"b'import tensorflow as tf\nfrom tensorflow.python.saved_model.builder import SavedModelBuilder\nfrom tensorflow.python.saved_model.signature_def_utils import build_signature_def\nfrom tensorflow.python.saved_model.signature_constants import REGRESS_METHOD_NAME\nfrom tensorflow.python.saved_model.tag_constants import TRAINING, SERVING\nfrom tensorflow.python.saved_model.utils import build_tensor_info\n\nx = tf.placeholder(tf.float32, name=\'x\')\ny = tf.placeholder(tf.float32, name=\'y\')\n\nw = tf.Variable(tf.random_uniform([1], -1.0, 1.0), name=\'w\')\nb = tf.Variable(tf.zeros([1]), name=\'b\')\ny_hat = tf.add(w * x, b, name=""y_hat"")\n\nloss = tf.reduce_mean(tf.square(y_hat - y))\noptimizer = tf.train.GradientDescentOptimizer(0.5)\ntrain = optimizer.minimize(loss, name=\'train\')\n\ninit = tf.variables_initializer(tf.global_variables(), name=\'init\')\n\ndirectory = \'examples/regression_savedmodel\'\nbuilder = SavedModelBuilder(directory)\n\nwith tf.Session(graph=tf.get_default_graph()) as sess:\n    sess.run(init)\n\n    signature_inputs = {\n        ""x"": build_tensor_info(x),\n        ""y"": build_tensor_info(y)\n    }\n    signature_outputs = {\n        ""out"": build_tensor_info(y_hat)\n    }\n    signature_def = build_signature_def(\n        signature_inputs, signature_outputs,\n        REGRESS_METHOD_NAME)\n    builder.add_meta_graph_and_variables(\n        sess, [TRAINING, SERVING],\n        signature_def_map={\n            REGRESS_METHOD_NAME: signature_def\n        },\n        assets_collection=tf.get_collection(tf.GraphKeys.ASSET_FILEPATHS))\n    builder.save(as_text=False)\n'"
test_resources/io/python_writer.py,1,"b'import tensorflow as tf\n\nactual = ""test_resources/io/expected.tfrecord""\nwriter = tf.python_io.TFRecordWriter(golden)\n\nwriter.write(""The Quick Brown Fox"".encode(""utf-8""))\n'"
tensorflow-sys/examples/assets/multiplication.py,5,"b""import os\nimport tensorflow as tf\n\na = tf.placeholder(tf.float32, name='a')\nb = tf.placeholder(tf.float32, name='b')\nc = tf.mul(a, b, name='c')\n\ndefinition = tf.Session().graph_def\ndirectory = os.path.dirname(os.path.realpath(__file__))\ntf.train.write_graph(definition, directory, 'multiplication.pb', as_text=False)\n"""
