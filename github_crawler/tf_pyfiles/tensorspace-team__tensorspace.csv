file_path,api_count,code
docs/keras/train/mnist.py,1,"b'import tensorflow as tf\nimport numpy as np\nfrom keras.models import Sequential, Model, load_model\nfrom keras.layers import Dense, Input, InputLayer, Conv2D, MaxPooling2D, Reshape, Flatten\n\nmnist = tf.keras.datasets.mnist\n\n\ndef create_sequential_model():\n    single_output_model = Sequential([\n        InputLayer(input_shape=(28, 28)),\n        Reshape((28,28,1),input_shape=(28,28,)),\n        Conv2D(filters=6, kernel_size=5, strides=1, input_shape=(28, 28, 1), name=""Conv2D_1""),\n        MaxPooling2D(pool_size=(2, 2), strides=(2, 2), name=""MaxPooling2D_1""),\n        Conv2D(filters=16, kernel_size=5, strides=1, name=""Conv2D_2""),\n        MaxPooling2D(pool_size=(2, 2), strides=(2, 2), name=""MaxPooling2D_2""),\n        Flatten(),\n        Dense(120, activation=""relu"", name=""Dense_1""),\n        Dense(84, activation=""relu"", name=""Dense_2""),\n        Dense(10, activation=""softmax"", name=""Softmax"")\n    ])\n    return single_output_model\n\n\ndef train_model():\n    (x_train, y_train), (x_test, y_test) = mnist.load_data()\n    x_train, x_test = x_train / 255.0, x_test / 255.0\n\n    model = create_sequential_model()\n    model.compile(optimizer=\'adam\',\n                  loss=\'sparse_categorical_crossentropy\',\n                  metrics=[\'accuracy\'])\n\n    model.fit(x_train, y_train, epochs=5, batch_size=32)\n    return model\n\n\ndef save_model(model, name_path):\n    model.save(name_path)\n\n\nmodel = train_model()\nsave_model(model, ""../models/keras_model.h5"")\n'"
