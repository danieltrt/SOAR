file_path,api_count,code
server/patch_tensorboard.py,0,"b'# This script should silently fail\nfrom tensorflow.tensorboard import tensorboard\nimport os\nimport sys\n\nimport argparse\nparser = argparse.ArgumentParser(description=""Backend server for crayon"")\nparser.add_argument(""frontend_reload"", type=int,\n          help=""Frontend reload value"")\nparser.add_argument(""backend_reload"", type=float,\n          help=""How fast is tensorboard reloading its backend"")\ncli_args = parser.parse_args()\n\nfrontend_reload = str(cli_args.frontend_reload)\nbackend_reload = str(cli_args.backend_reload)\n\n\ntb_path = os.path.dirname(os.path.abspath(tensorboard.__file__))\n\nfrontend_worked = False\ntry:\n  print(""Patching tensorboard to change the delay to ""+frontend_reload+""s"")\n\n  dist_path = os.path.join(tb_path, ""dist"")\n  html_path = os.path.join(dist_path, ""tf-tensorboard.html"")\n\n  content = []\n  state = 0\n  # state:\n  # 0: looking for variable name\n  # 1: looking for type\n  # 2: looking for value\n  # 3: finishing to read the file\n  with open(html_path, ""r"") as html_file:\n    for line in html_file:\n      if state == 0:\n        if ""autoReloadIntervalSecs:"" in line:\n          state = 1\n      elif state == 1:\n        if ""type: Number"" in line:\n          state = 2\n        else:\n          print(""This should not happen, trying to find a new instance"")\n          state = 0\n      elif state == 2:\n        if ""value: 120"" in line:\n          line = line.replace(""120"", frontend_reload)\n          state = 3\n        else:\n          print(""This should not happen, trying to find a new instance"")\n          state = 0\n      elif state == 3:\n        pass\n      else:\n          print(""This should not happen, trying to find a new instance"")\n          state = 0\n\n      content += [line]\n\n  with open(html_path, ""w"") as html_file:\n    html_file.write(""\\n"".join(content))\n\n  frontend_worked = True\n  print(""Success !"")\nexcept:\n  print(""Patching failed"")\n\nbackend_worked = False\ntry:\n  print(""Patching tensorboard to change backend reload to float."")\n\n  tensorboard_path = os.path.join(tb_path, ""tensorboard.py"")\n\n  content = []\n  with open(tensorboard_path, ""r"") as source_file:\n    for line in source_file:\n      if (""DEFINE_integer"" in line) and (""reload_interval"" in line):\n        line = line.replace(""DEFINE_integer"", ""DEFINE_float"")\n      content += [line]\n\n  with open(tensorboard_path, ""w"") as source_file:\n    source_file.write(""\\n"".join(content))\n\n  backend_worked = True\n  print(""Success !"")\nexcept:\n  print(""Patching failed"")\n\nif backend_worked:\n  if frontend_worked:\n    # Both worked, return 3\n    sys.exit(3)\n  else:\n    # Only backend worked, return 2\n    sys.exit(2)\nelif frontend_worked:\n  # Only frontend worked, return 1\n  sys.exit(1)\nelse:\n  # Nothing worked, return -1\n  sys.exit(-1)\n'"
server/server.py,7,"b'# Flask app server\nfrom flask import Flask, request, json\napp = Flask(""crayonserver"")\n\n# HTTP client to use the tensorboard api\nimport urllib2\n\n# Server version\n__version__ = ""0.5""\n\n# Not-supported logging types\nnot_supported_types = [\n  ""audio"",\n  ""compressedHistograms"",\n  ""graph"",\n  ""images"",\n  ""meta_graph"",\n  ""run_metadata"",\n  ""firstEventTimestamp""]\n\n# Supported logging types\nsupported_types = [\n  ""scalars"",\n  ""histograms""]\n\n# Tensorboard includes\nimport tensorflow as tf\nimport bisect\nimport time\n\n# Backup includes\nfrom os import path\nfrom subprocess import Popen, PIPE\nfrom flask import send_file\nimport shutil\n\n# Command line arguments\nimport argparse\nparser = argparse.ArgumentParser(description=""Backend server for crayon"")\nparser.add_argument(""port"", type=int, default=8889,\n          help=""Port where to listen for incoming datas"")\nparser.add_argument(""backend_reload"", type=float, default=1,\n          help=""How fast is tensorboard reloading its backend"")\ncli_args = parser.parse_args()\n\n# Delay timer\n# We add 1s to make sure all files are loaded from disk\nrequest_delay = cli_args.backend_reload + 1\n\ndef to_unicode(experiment):\n\n  assert experiment and isinstance(experiment, basestring)\n\n  return unicode(experiment)\n\n### Tensorboard utility functions\ntensorboard_folder = ""/tmp/tensorboard/{}""\n# Make sure we do not access data too fast\nxp_modified = {}\ndef tb_modified_xp(experiment, modified_type=None, wall_time=None):\n  assert(modified_type is None or modified_type in supported_types)\n  xp_modified[experiment] = (time.time(), modified_type, wall_time)\n\ndef last_timestamp_loaded(experiment, modified_type, last_timestamp):\n  req_res = tb_request(""runs"", safe=False)\n  tb_data = json.loads(req_res)\n  if experiment in tb_data:\n    if modified_type in tb_data[experiment]:\n      names = tb_data[experiment][modified_type]\n      for name in names:\n        req_res = tb_request(modified_type, experiment, name, safe=False)\n        req_res = json.loads(req_res)\n        for value in req_res:\n          if value[0] == last_timestamp:\n            return True\n  return False\n\ndef tb_access_xp(experiment):\n  if experiment not in xp_modified:\n    return\n  last_modified, modified_type, last_timestamp = xp_modified[experiment]\n\n  while time.time() < last_modified + request_delay:\n    # If we know the last timestamp, try to exit early\n    if modified_type is not None:\n      if last_timestamp_loaded(experiment, modified_type, last_timestamp):\n        break\n    else:\n      time.sleep(0.01)\n  del xp_modified[experiment]\n\ndef tb_access_all():\n  for experiment in xp_modified.keys():\n    tb_access_xp(experiment)\n\n# Make sure we have writers for all experiments\nxp_writers = {}\ndef tb_get_xp_writer(experiment):\n  if experiment in xp_writers:\n    return xp_writers[experiment]\n\n  tb_access_xp(experiment)\n  xp_folder = tensorboard_folder.format(experiment)\n  writer = tf.summary.FileWriter(xp_folder, flush_secs=1)\n  xp_writers[experiment] = writer\n  tb_modified_xp(experiment)\n  return writer\n\ndef tb_remove_xp_writer(experiment):\n  # If the experiment does not exist, does nothing silently\n  if experiment in xp_writers:\n    del xp_writers[experiment]\n    # Prevent recreating it too quickly\n    tb_modified_xp(experiment)\n\ndef tb_xp_writer_exists(experiment):\n  return experiment in xp_writers\n\n# Use writers\ndef tb_add_scalar(experiment, name, wall_time, step, value):\n  writer = tb_get_xp_writer(experiment)\n  summary = tf.Summary(value=[\n      tf.Summary.Value(tag=name, simple_value=value),\n  ])\n  event = tf.Event(wall_time=wall_time, step=step, summary=summary)\n  writer.add_event(event)\n  writer.flush()\n  tb_modified_xp(experiment, modified_type=""scalars"", wall_time=wall_time)\n\ndef tb_add_histogram(experiment, name, wall_time, step, histo):\n  # Tensorflow does not support key being unicode\n  histo_string = {}\n  for k,v in histo.items():\n    histo_string[str(k)] = v\n  histo = histo_string\n\n  writer = tb_get_xp_writer(experiment)\n  summary = tf.Summary(value=[\n      tf.Summary.Value(tag=name, histo=histo),\n  ])\n  event = tf.Event(wall_time=wall_time, step=step, summary=summary)\n  writer.add_event(event)\n  writer.flush()\n  tb_modified_xp(experiment, modified_type=""histograms"", wall_time=wall_time)\n\n# Perform requests to tensorboard http api\ndef tb_request(query_type, run=None, tag=None, safe=True):\n  request_url = ""http://localhost:8888/data/{}""\n  if run and tag:\n    request_url += ""?run={}&tag={}""\n\n  if safe:\n    if run:\n      tb_access_xp(run)\n    else:\n      tb_access_all()\n\n  request_url = request_url.format(query_type, run, tag)\n  try:\n    return urllib2.urlopen(request_url, timeout=1).read()\n  except:\n    raise ValueError\n\n# Borrowed from tensorflow/tensorboard/scripts/generate_testdata.py\n# Create a histogram from a list of values\ndef _MakeHistogramBuckets():\n  v = 1E-12\n  buckets = []\n  neg_buckets = []\n  while v < 1E20:\n    buckets.append(v)\n    neg_buckets.append(-v)\n    v *= 1.1\n  # Should include DBL_MAX, but won\'t bother for test data.\n  return neg_buckets[::-1] + [0] + buckets\n\n\ndef tb_make_histogram(values):\n  """"""Convert values into a histogram proto using logic from histogram.cc.""""""\n  limits = _MakeHistogramBuckets()\n  counts = [0] * len(limits)\n  for v in values:\n    idx = bisect.bisect_left(limits, v)\n    counts[idx] += 1\n\n  limit_counts = [(limits[i], counts[i]) for i in xrange(len(limits))\n                  if counts[i]]\n  bucket_limit = [lc[0] for lc in limit_counts]\n  bucket = [lc[1] for lc in limit_counts]\n  sum_sq = sum(v * v for v in values)\n  return {\n      ""min"": min(values),\n      ""max"": max(values),\n      ""num"": len(values),\n      ""sum"": sum(values),\n      ""sum_squares"": sum_sq,\n      ""bucket_limit"": bucket_limit,\n      ""bucket"": bucket}\n## END of borrowed\n\n\n### Error handler\n@app.errorhandler(404)\ndef not_found(error):\n  return ""This is not the web page you are looking for.""\n\ndef wrong_argument(message):\n  print(""wrong_argument: "", message)\n  return message, 400\n\n### Running and version check\n@app.route(\'/\', methods=[""GET""])\ndef get_version():\n  # Verify that tensorboard is running\n  try:\n    req_res = tb_request(""logdir"")\n  except:\n    return wrong_argument(""Server: TensorBoard failed to answer request \'logdir\'"")\n\n  if not json.loads(req_res)[""logdir""] == tensorboard_folder[:-3]:\n    return wrong_argument(""Tensorboard is not running in the correct folder."")\n\n  return __version__\n\n\n### Experience management\n@app.route(\'/data\', methods=[""GET""])\ndef get_all_experiments():\n  experiment = request.args.get(\'xp\')\n\n  result = """"\n  try:\n    req_res = tb_request(""runs"")\n  except:\n    return wrong_argument(""Server: TensorBoard failed to answer request \'runs\'"")\n\n  tb_data = json.loads(req_res)\n  if experiment:\n    try:\n      experiment = to_unicode(experiment)\n    except:\n      return wrong_argument(""Experiment name should be a non-empty string or unicode instead of \'{}\'"".format(type(experiment)))\n    if not tb_xp_writer_exists(experiment):\n      return wrong_argument(""Unknown experiment name \'{}\'"".format(experiment))\n    if experiment in tb_data:\n      result = tb_data[experiment]\n      # Remove the not supported types from the answer\n      for not_supported_type in not_supported_types:\n        if not_supported_type in result:\n          del result[not_supported_type]\n    else:\n      # Experience with no data on tensorboard,\n      # return empty list for all types\n      result = {}\n      for t in supported_types:\n        result[t] = []\n  else:\n    result = tb_data.keys()\n  return json.dumps(result)\n\n@app.route(\'/data\', methods=[""POST""])\ndef post_experiment():\n  experiment = request.get_json()\n  try:\n    experiment = to_unicode(experiment)\n  except:\n    return wrong_argument(""Experiment name should be a non-empty string or unicode instead of \'{}\'"".format(type(experiment)))\n\n  if tb_xp_writer_exists(experiment):\n    return wrong_argument(""\'{}\' experiment already exists"".format(experiment))\n\n  tb_get_xp_writer(experiment)\n  return ""ok""\n\n@app.route(\'/data\', methods=[""DELETE""])\ndef delete_experiment():\n  experiment = request.args.get(\'xp\')\n  try:\n    experiment = to_unicode(experiment)\n  except:\n    return wrong_argument(""Experiment name should be a non-empty string or unicode instead of \'{}\'"".format(type(experiment)))\n\n  if not tb_xp_writer_exists(experiment):\n    return wrong_argument(""\'{}\' experiment does not already exist"".format(experiment))\n\n  # Delete folder on disk\n  folder_path = tensorboard_folder.format(experiment)\n  shutil.rmtree(folder_path)\n\n  # Delete experience writer\n  tb_remove_xp_writer(experiment)\n\n  return ""ok""\n\n### Scalar data\n@app.route(\'/data/scalars\', methods=[""GET""])\ndef get_scalars():\n  experiment = request.args.get(\'xp\')\n  try:\n    experiment = to_unicode(experiment)\n  except:\n    return wrong_argument(""Experiment name should be a non-empty string or unicode instead of \'{}\'"".format(type(experiment)))\n  name = request.args.get(\'name\')\n  if (not experiment) or (not name):\n    return wrong_argument(""xp and name arguments are required"")\n  if not tb_xp_writer_exists(experiment):\n    return wrong_argument(""Unknown experiment name \'{}\'"".format(experiment))\n\n  try:\n    req_res = tb_request(""scalars"", experiment, name)\n    return req_res\n  except:\n    message = ""Combination of experiment \'{}\' and name \'{}\' does not exist"".format(experiment, name)\n    return wrong_argument(message)\n\n\n\n@app.route(\'/data/scalars\', methods=[\'POST\'])\ndef post_scalars():\n  experiment = request.args.get(\'xp\')\n  try:\n    experiment = to_unicode(experiment)\n  except:\n    return wrong_argument(""Experiment name should be a non-empty string or unicode instead of \'{}\'"".format(type(experiment)))\n  name = request.args.get(\'name\')\n  if (not experiment) or (not name):\n    return wrong_argument(""xp and name arguments are required"")\n  if not tb_xp_writer_exists(experiment):\n    return wrong_argument(""Unknown experiment name \'{}\'"".format(experiment))\n\n  data = request.get_json()\n  if not data:\n    return wrong_argument(""POST content is not a proper json"")\n  if not isinstance(data, list):\n    return wrong_argument(""POST content is not a list: \'{}\'"".format(request.form.keys()))\n  if not len(data)==3:\n    return wrong_argument(""POST does not contain a list of 3 elements but \'{}\'"".format(data))\n  if not (isinstance(data[2], int) or isinstance(data[2], float)):\n    return wrong_argument(""POST value is not a number but \'{}\'"".format(data[2]))\n\n  tb_add_scalar(experiment, name, data[0], data[1], data[2])\n\n  return ""ok""\n\n\n### Histogram data\n@app.route(\'/data/histograms\', methods=[""GET""])\ndef get_histograms():\n  experiment = request.args.get(\'xp\')\n  try:\n    experiment = to_unicode(experiment)\n  except:\n    return wrong_argument(""Experiment name should be a non-empty string or unicode instead of \'{}\'"".format(type(experiment)))\n  name = request.args.get(\'name\')\n  if (not experiment) or (not name):\n    return wrong_argument(""xp and name arguments are required"")\n  if not tb_xp_writer_exists(experiment):\n    return wrong_argument(""Unknown experiment name \'{}\'"".format(experiment))\n\n  try:\n    req_res = tb_request(""histograms"", experiment, name)\n    return req_res\n  except:\n    message = ""Combination of experiment \'{}\' and name \'{}\' does not exist"".format(experiment, name)\n    return wrong_argument(message)\n\n\n\n@app.route(\'/data/histograms\', methods=[\'POST\'])\ndef post_histograms():\n  experiment = request.args.get(\'xp\')\n  try:\n    experiment = to_unicode(experiment)\n  except:\n    return wrong_argument(""Experiment name should be a non-empty string or unicode instead of \'{}\'"".format(type(experiment)))\n  name = request.args.get(\'name\')\n  to_build = request.args.get(\'tobuild\')\n  if (not experiment) or (not name) or (not to_build):\n    return wrong_argument(""xp, name and tobuild arguments are required"")\n  if not tb_xp_writer_exists(experiment):\n    return wrong_argument(""Unknown experiment name \'{}\'"".format(experiment))\n  to_build = to_build.lower() == ""true""\n\n  data = request.get_json()\n  if not data:\n    return wrong_argument(""POST content is not a proper json"")\n  if not isinstance(data, list):\n    return wrong_argument(""POST content is not a list: \'{}\'"".format(request.form.keys()))\n  if not len(data)==3:\n    return wrong_argument(""POST does not contain a list of 3 elements but \'{}\'"".format(data))\n\n  if to_build:\n    if (not data[2]) or (not isinstance(data[2], list)):\n      return wrong_argument(""elements to build the histogram are not in a list but \'{}\'"".format(data[2]))\n    histogram_dict = tb_make_histogram(data[2])\n  else:\n    already_built_required_params = {\n      ""min"": [float, int],\n      ""max"": [float, int],\n      ""num"": [int],\n      ""bucket_limit"": [list],\n      ""bucket"": [list],\n    }\n    histogram_dict = data[2]\n    for required_param in already_built_required_params:\n      if not (required_param in histogram_dict):\n        message = ""Missing argument \'{}\' to the given histogram"".format(required_param)\n        return wrong_argument(message)\n      is_ok = False\n      for required_type in already_built_required_params[required_param]:\n        if isinstance(histogram_dict[required_param], required_type):\n          is_ok = True\n          break\n      if not is_ok:\n        message = ""Argument \'{}\' should be of type \'{}\' and is \'{}\'""\n        message = message.format(required_param, str(already_built_required_params[required_param]), str(type(histogram_dict[required_param])))\n        return wrong_argument(message)\n\n  tb_add_histogram(experiment, name, data[0], data[1], histogram_dict)\n\n  return ""ok""\n\n\n### Backup data\n@app.route(\'/backup\', methods=[\'GET\'])\ndef get_backup():\n  experiment = request.args.get(\'xp\')\n  try:\n    experiment = to_unicode(experiment)\n  except:\n    return wrong_argument(""Experiment name should be a non-empty string or unicode instead of \'{}\'"".format(type(experiment)))\n  if not experiment:\n    return wrong_argument(""xp argument is required"")\n\n  folder_path = tensorboard_folder.format(experiment)\n\n  if not path.isdir(folder_path):\n    return wrong_argument(""Requested experiment \'{}\' does not exist"".format(experiment))\n\n  zip_file = shutil.make_archive(""/tmp/{}"".format(experiment), \'zip\', folder_path)\n\n  return send_file(zip_file, mimetype=\'application/zip\')\n\n@app.route(\'/backup\', methods=[\'POST\'])\ndef post_backup():\n  experiment = request.args.get(\'xp\')\n  try:\n    experiment = to_unicode(experiment)\n  except:\n    return wrong_argument(""Experiment name should be a non-empty string or unicode instead of \'{}\'"".format(type(experiment)))\n  force = request.args.get(\'force\')\n  if (not experiment) or (not force):\n    return wrong_argument(""xp and force argument are required"")\n  if not force.lower() == \'true\':\n    return wrong_argument(""Force must be set to 1 to be able to override a folder"")\n  if tb_xp_writer_exists(experiment):\n    return wrong_argument(""Experiment \'{}\' already exists"".format(experiment))\n\n  folder_path = tensorboard_folder.format(experiment)\n  zip_file_path = ""/tmp/{}.zip"".format(experiment)\n\n  if ""archive"" in request.files:\n    backup_data = request.files[""archive""]\n    backup_data.save(zip_file_path)\n  else:\n    content_type = request.headers.get(\'Content-type\', \'\')\n    if (not content_type) or (content_type != ""application/zip""):\n      return wrong_argument(""Backup post request should contain a file or a zip"")\n    with open(zip_file_path, ""wb"") as f:\n      f.write(request.data)\n\n  folder_path = tensorboard_folder.format(experiment)\n  Popen(""mkdir -p {}"".format(folder_path),stdout=PIPE, shell=True)\n  Popen(""cd {}; unzip {}"".format(folder_path, zip_file_path),stdout=PIPE, shell=True)\n\n  tb_get_xp_writer(experiment)\n\n  return ""ok""\n\n\napp.run(host=""0.0.0.0"", port=cli_args.port)\n'"
client/python/setup.py,0,"b'from setuptools import setup\n\nsetup(name=\'pycrayon\',\n      description=\'Crayon client for python\',\n      author=\'torrvision\',\n      url=\'https://github.com/torrvision/crayon\',\n      packages=[\'pycrayon\'],\n      version=\'0.5\',\n      install_requires=[\n        ""requests""\n      ]\n     )'"
client/python/pycrayon/__init__.py,0,b'from .crayon import CrayonClient'
client/python/pycrayon/crayon.py,0,"b'import requests\nimport json\nimport time\nimport collections\n\ntry:\n    # Python 2\n    from urllib import quote_plus\nexcept ImportError:\n    # Python 3\n    from urllib.parse import quote_plus\n\nfrom .version import __version__\n\ntry:\n    basestring\nexcept NameError:\n    basestring = str\n\n\nclass CrayonClient(object):\n    def __init__(self, hostname=""localhost"", port=8889):\n        self.hostname = hostname\n        self.port = port\n        self.url = self.hostname + "":"" + str(self.port)\n        # TODO use urlparse\n        if not (self.url.startswith(""http://"") or\n                self.url.startswith(""https://"")):\n            self.url = ""http://"" + self.url\n\n        # check server is working (not only up).\n        try:\n            r = requests.get(self.url)\n            if not r.ok:\n                raise RuntimeError(""Something went wrong!"" +\n                                   "" Server sent: {}."".format(r.text))\n            if not r.text == __version__:\n                msg = ""Initialised client version {}, however found ""\n                msg += ""server running version {}.""\n                raise RuntimeError(msg.format(r.text, __version__))\n\n        except requests.ConnectionError:\n            msg = ""The server at {}:{} does not appear to be up!""\n            raise ValueError(msg.format(self.hostname, self.port))\n\n    def get_experiment_names(self):\n        query = ""/data""\n        r = requests.get(self.url + query)\n        if not r.ok:\n            msg = ""Something went wrong. Server sent: {}.""\n            raise ValueError(msg.format(r.text))\n        else:\n            experiments = json.loads(r.text)\n        return experiments\n\n    def open_experiment(self, xp_name):\n        assert(isinstance(xp_name, basestring))\n        return CrayonExperiment(xp_name, self, create=False)\n\n    def create_experiment(self, xp_name, zip_file=None):\n        assert(isinstance(xp_name, basestring))\n        return CrayonExperiment(xp_name, self, zip_file=zip_file, create=True)\n\n    def remove_experiment(self, xp_name):\n        assert(isinstance(xp_name, basestring))\n        query = ""/data?xp={}"".format(quote_plus(xp_name))\n        r = requests.delete(self.url + query)\n\n        if not r.ok:\n            msg = ""Something went wrong. Server sent: {}.""\n            raise ValueError(msg.format(r.text))\n\n    def remove_all_experiments(self):\n        xp_list = self.get_experiment_names()\n        for xp_name in xp_list:\n            self.remove_experiment(xp_name)\n\n\nclass CrayonExperiment(object):\n\n    def __init__(self, xp_name, client, zip_file=None, create=False):\n        self.client = client\n        self.xp_name = xp_name\n        self.scalar_steps = collections.defaultdict(int)\n        self.hist_steps = collections.defaultdict(int)\n\n        if zip_file:\n            if not create:\n                msg = ""Can only create a new experiment when ""\n                msg += ""a zip_file is provided""\n                raise ValueError(msg)\n            self.__init_from_file(zip_file, True)\n\n        elif create:\n            self.__init_empty()\n\n        else:\n            self.__init_from_existing()\n\n    # Initialisations\n    def __init_empty(self):\n        query = ""/data""\n        r = requests.post(self.client.url + query, json=self.xp_name)\n\n        if not r.ok:\n            msg = ""Something went wrong. Server sent: {}.""\n            raise ValueError(msg.format(r.text))\n\n    def __init_from_existing(self):\n        query = ""/data?xp={}"".format(quote_plus(self.xp_name))\n        r = requests.get(self.client.url + query)\n\n        if not r.ok:\n            msg = ""Something went wrong. Server sent: {}.""\n            raise ValueError(msg.format(r.text))\n\n        # Retrieve the current step for existing metrics\n        content = json.loads(r.text)\n        self.__update_steps(content[""scalars""],\n                            self.scalar_steps,\n                            self.get_scalar_values)\n        self.__update_steps(content[""histograms""],\n                            self.hist_steps,\n                            self.get_histogram_values)\n\n    def __init_from_file(self, zip_file, force=False):\n        query = ""/backup?xp={}&force={}"".format(\n            quote_plus(self.xp_name), force)\n        fileobj = open(zip_file, \'rb\')\n        r = requests.post(self.client.url + query, data={""mysubmit"": ""Go""},\n                          files={""archive"": (""backup.zip"", fileobj)})\n        fileobj.close()\n\n        if not r.ok:\n            msg = ""Something went wrong. Server sent: {}.""\n            raise ValueError(msg.format(r.text))\n\n    # Scalar methods\n    def get_scalar_names(self):\n        return self.__get_name_list(""scalars"")\n\n    def add_scalar_value(self, name, value, wall_time=-1, step=-1):\n        if wall_time == -1:\n            wall_time = time.time()\n        if step == -1:\n            step = self.scalar_steps[name]\n            self.scalar_steps[name] += 1\n        else:\n            self.scalar_steps[name] = step + 1\n        query = ""/data/scalars?xp={}&name={}"".format(quote_plus(self.xp_name), quote_plus(name))\n        data = [wall_time, step, value]\n        r = requests.post(self.client.url + query, json=data)\n\n        if not r.ok:\n            msg = ""Something went wrong. Server sent: {}.""\n            raise ValueError(msg.format(r.text))\n\n    def add_scalar_dict(self, data, wall_time=-1, step=-1):\n        for name, value in data.items():\n            if not isinstance(name, basestring):\n                msg = ""Scalar name should be a string, got: {}."".format(name)\n                raise ValueError(msg)\n            self.add_scalar_value(name, value, wall_time, step)\n\n    def get_scalar_values(self, name):\n        query = ""/data/scalars?xp={}&name={}"".format(quote_plus(self.xp_name), quote_plus(name))\n\n        r = requests.get(self.client.url + query)\n\n        if not r.ok:\n            msg = ""Something went wrong. Server sent: {}.""\n            raise ValueError(msg.format(r.text))\n\n        return json.loads(r.text)\n\n    # Histogram methods\n    def get_histogram_names(self):\n        return self.__get_name_list(""histograms"")\n\n    def add_histogram_value(self, name, hist, tobuild=False,\n                            wall_time=-1, step=-1):\n        if wall_time == -1:\n            wall_time = time.time()\n        if step == -1:\n            step = self.scalar_steps[name]\n            self.scalar_steps[name] += 1\n        else:\n            self.scalar_steps[name] = step\n\n        if not tobuild and (not isinstance(hist, dict)\n                            or not self.__check_histogram_data(hist, tobuild)):\n            raise ValueError(""Data was not provided in a valid format!"")\n\n        if tobuild and (not isinstance(hist, list)):\n            raise ValueError(""Data was not provided in a valid format!"")\n\n        query = ""/data/histograms?xp={}&name={}&tobuild={}"".format(\n            quote_plus(self.xp_name), quote_plus(name), tobuild)\n\n        data = [wall_time, step, hist]\n        r = requests.post(self.client.url + query, json=data)\n        if not r.ok:\n            raise ValueError(\n                ""Something went wrong. Server sent: {}."".format(r.text)\n            )\n\n    def get_histogram_values(self, name):\n        query = ""/data/histograms?xp={}&name={}"".format(quote_plus(self.xp_name), quote_plus(name))\n        r = requests.get(self.client.url + query)\n\n        if not r.ok:\n            msg = ""Something went wrong. Server sent: {}.""\n            raise ValueError(msg.format(r.text))\n\n        return json.loads(r.text)\n\n    def __check_histogram_data(self, data, tobuild):\n        # TODO should use a schema here\n        # Note: all of these are sorted already\n\n        expected = [""bucket"", ""bucket_limit"", ""max"", ""min"", ""num""]\n        expected2 = [""bucket"", ""bucket_limit"", ""max"", ""min"", ""num"",\n                     ""sum""]\n        expected3 = [""bucket"", ""bucket_limit"", ""max"", ""min"", ""num"",\n                     ""sum"", ""sum_squares""]\n        expected4 = [""bucket"", ""bucket_limit"", ""max"", ""min"", ""num"",\n                     ""sum_squares""]\n        ks = tuple(data.keys())\n        ks = sorted(ks)\n        return (ks == expected or ks == expected2\n                or ks == expected3 or ks == expected4)\n\n    # Backup methods\n    def to_zip(self, filename=None):\n        query = ""/backup?xp={}"".format(quote_plus(self.xp_name))\n        r = requests.get(self.client.url + query)\n\n        if not r.ok:\n            msg = ""Something went wrong. Server sent: {}.""\n            raise ValueError(msg.format(r.text))\n\n        if not filename:\n            filename = ""backup_"" + self.xp_name + ""_"" + str(time.time())\n        out = open(filename + "".zip"", ""wb"")\n        out.write(r.content)\n        out.close()\n        return filename + "".zip""\n\n    # Helper methods\n    def __get_name_list(self, element_type):\n        query = ""/data?xp={}"".format(quote_plus(self.xp_name))\n        r = requests.get(self.client.url + query)\n\n        if not r.ok:\n            msg = ""Something went wrong. Server sent: {}.""\n            raise ValueError(msg.format(r.text))\n\n        return json.loads(r.text)[element_type]\n\n    def __update_steps(self, elements, steps_table, eval_function):\n        for element in elements:\n            values = eval_function(element)\n            if len(values) > 0:\n                steps_table[element] = values[-1][1] + 1\n'"
client/python/pycrayon/version.py,0,"b'r""""""\nLittle utility to reveal the package version.\nPlace in the root dir of the package.\n""""""\nfrom pkg_resources import get_distribution\n\n\n__version__ = get_distribution(__name__.split(\'.\')[0]).version\n'"
client/python/test/helper.py,0,"b'import time\nimport requests\ntry:\n    import docker\nexcept:\n    RuntimeError(""Please run \'pip install docker\' before using this module."")\n\n\nclass Helper(object):\n\n    def __init__(self, start=True, tb_ip=8888, server_ip=8889, name=""crayon""):\n        self.client = docker.from_env()\n        self.tb_ip = tb_ip\n        self.server_ip = server_ip\n        self.name = name\n        if start:\n            self.start()\n\n    def start(self):\n        self.container = self.client.containers.run(\n            ""alband/crayon:latest"",\n            ports={8888: self.tb_ip,\n                   8889: self.server_ip},\n            detach=True,\n            name=self.name)\n        # check server is working\n        running = False\n        retry = 50\n        while not running:\n            try:\n                assert(\n                    requests.get(""http://localhost:"" + str(self.server_ip)).ok\n                )\n                running = True\n            except:\n                retry -= 1\n                if retry == 0:\n                    # The test will trigger the not running server error\n                    return\n                time.sleep(0.1)\n\n    def kill(self):\n        if hasattr(self, ""container""):\n            self.container.kill()\n\n    def remove(self):\n        if hasattr(self, ""container""):\n            self.container.remove()\n            self.container = None\n\n    def kill_remove(self):\n        # Could do with remove -f too\n        self.kill()\n        self.remove()\n'"
client/python/test/test_crayon.py,0,"b'import unittest\nimport time\nimport os\n\nfrom pycrayon import CrayonClient\nfrom helper import Helper\n\n\nclass CrayonClientTestSuite(unittest.TestCase):\n\n    def __init__(self, *args, **kwargs):\n        super(CrayonClientTestSuite, self).__init__(*args, **kwargs)\n        self.test_server_port = 8886\n        self.test_tb_port = 8887\n        self.container_name = ""crayon_test_python""\n\n    def setUp(self):\n        self.h = Helper(\n            start=True,\n            tb_ip=self.test_tb_port,\n            server_ip=self.test_server_port,\n            name=self.container_name)\n\n    def tearDown(self):\n        self.h.kill_remove()\n        self.h = None\n\n    # INIT\n    def test_init(self):\n        CrayonClient(port=self.test_server_port)\n\n    def test_init_wrong_localhost(self):\n        self.assertRaises(ValueError, CrayonClient, ""not_open"",\n                          self.test_server_port)\n\n    def test_init_wrong_port(self):\n        self.assertRaises(ValueError, CrayonClient, ""localhost"", 123412341234)\n\n    def test_init_xp_empty(self):\n        cc = CrayonClient(port=self.test_server_port)\n        self.assertRaises(ValueError, cc.create_experiment, """")\n\n    def test_open_experiment(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        foo.add_scalar_value(""bar"", 1, step=2, wall_time=0)\n        foo = cc.open_experiment(""foo"")\n        foo.add_scalar_value(""bar"", 3, wall_time=1)\n        self.assertEqual(foo.get_scalar_values(""bar""),\n                         [[0.0, 2, 1.0], [1.0, 3, 3.0]])\n\n    def test_remove_experiment(self):\n        cc = CrayonClient(port=self.test_server_port)\n        self.assertRaises(ValueError, cc.open_experiment, ""foo"")\n        foo = cc.create_experiment(""foo"")\n        foo.add_scalar_value(""bar"", 1, step=2, wall_time=0)\n        self.assertRaises(ValueError, cc.create_experiment, ""foo"")\n        cc.open_experiment(""foo"")\n        cc.remove_experiment(foo.xp_name)\n        self.assertRaises(ValueError, cc.remove_experiment, foo.xp_name)\n        foo = cc.create_experiment(""foo"")\n\n    # scalars\n    def test_add_scalar_value(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        foo.add_scalar_value(""bar"", 2, wall_time=time.clock(), step=1)\n\n    def test_add_scalar_less_data(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        foo.add_scalar_value(""bar"", 2)\n\n    # TODO These should really be tested singularly...\n    def test_add_scalar_wrong_data(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        self.assertRaises(ValueError, foo.add_scalar_value,\n                          ""bar"", ""lol"")\n\n    def test_add_scalar_wrong_variable(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        self.assertRaises(ValueError, foo.add_scalar_value,\n                          """", 2)\n\n    def test_add_scalar_dict(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        data = {""fizz"": 3, ""buzz"": 5}\n        foo.add_scalar_dict(data, wall_time=0, step=5)\n        data = {""fizz"": 6, ""buzz"": 10}\n        foo.add_scalar_dict(data)\n\n    def test_add_scalar_dict_wrong_data(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        data = {""fizz"": ""foo"", ""buzz"": 5}\n        self.assertRaises(ValueError, foo.add_scalar_dict, data)\n        data = {3: 6, ""buzz"": 10}\n        self.assertRaises(ValueError, foo.add_scalar_dict, data)\n\n    def test_get_scalar_values_no_data(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        self.assertRaises(ValueError, foo.get_scalar_values, ""bar"")\n\n    def test_get_scalar_values_one_datum(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        foo.add_scalar_value(""bar"", 0, wall_time=0, step=0)\n        self.assertEqual(foo.get_scalar_values(""bar""), [[0.0, 0, 0.0]])\n\n    def test_get_scalar_values_two_data(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        foo.add_scalar_value(""bar"", 0, wall_time=0, step=0)\n        foo.add_scalar_value(""bar"", 1, wall_time=1, step=1)\n        self.assertEqual(foo.get_scalar_values(""bar""),\n                         [[0.0, 0, 0.0], [1.0, 1, 1.0]])\n\n    def test_get_scalar_values_auto_step(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        foo.add_scalar_value(""bar"", 0, wall_time=0)\n        foo.add_scalar_value(""bar"", 1, wall_time=1)\n        foo.add_scalar_value(""bar"", 2, wall_time=2, step=10)\n        foo.add_scalar_value(""bar"", 3, wall_time=3)\n        self.assertEqual(foo.get_scalar_values(""bar""),\n                         [[0.0, 0, 0.0], [1.0, 1, 1.0],\n                          [2.0, 10, 2.0], [3.0, 11, 3.0]])\n\n    def test_get_scalar_values_wrong_variable(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        foo.add_scalar_value(""bar"", 0)\n        self.assertRaises(ValueError, foo.get_scalar_values, """")\n\n    def test_get_scalar_dict(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        data = {""fizz"": 3, ""buzz"": 5}\n        foo.add_scalar_dict(data, wall_time=0, step=5)\n        data = {""fizz"": 6, ""buzz"": 10}\n        foo.add_scalar_dict(data, wall_time=1)\n        self.assertEqual(foo.get_scalar_values(""fizz""),\n                         [[0.0, 5, 3.0], [1.0, 6, 6.0]])\n        self.assertEqual(foo.get_scalar_values(""buzz""),\n                         [[0.0, 5, 5.0], [1.0, 6, 10.0]])\n\n    def test_get_scalar_names(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        foo.add_scalar_value(""fizz"", 0, wall_time=0)\n        foo.add_scalar_value(""buzz"", 0, wall_time=0)\n        self.assertEqual(sorted(foo.get_scalar_names()),\n                         sorted([""fizz"", ""buzz""]))\n\n    # Histograms\n    def test_add_histogram_value(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        data = {""min"": 0,\n                ""max"": 100,\n                ""num"": 3,\n                ""bucket_limit"": [10, 50, 30],\n                ""bucket"": [5, 45, 25]}\n        foo.add_histogram_value(""bar"", data, wall_time=0, step=0)\n        foo.add_histogram_value(""bar"", data)\n\n    def test_add_histogram_value_with_sum(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        data = {""min"": 0,\n                ""max"": 100,\n                ""num"": 3,\n                ""bucket_limit"": [10, 50, 30],\n                ""bucket"": [5, 45, 25],\n                ""sum"": 75}\n        foo.add_histogram_value(""bar"", data)\n\n    def test_add_histogram_value_with_sumsq(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        data = {""min"": 0,\n                ""max"": 100,\n                ""num"": 3,\n                ""bucket_limit"": [10, 50, 30],\n                ""bucket"": [5, 45, 25],\n                ""sum_squares"": 5625}\n        foo.add_histogram_value(""bar"", data)\n\n    def test_add_histogram_value_with_sum_sumsq(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        data = {""min"": 0,\n                ""max"": 100,\n                ""num"": 3,\n                ""bucket_limit"": [10, 50, 30],\n                ""bucket"": [5, 45, 25],\n                ""sum"": 75,\n                ""sum_squares"": 2675}\n        foo.add_histogram_value(""bar"", data)\n\n    def test_add_histogram_value_to_build(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        data = [1,2,3,4,5]\n        foo.add_histogram_value(""bar"", data, tobuild=True)\n\n    def test_add_histogram_value_less_data(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        data = {""some data"": 0}\n        self.assertRaises(ValueError, foo.add_histogram_value,\n                          ""bar"", data)\n\n    # TODO These should really be tested singularly...\n    def test_add_histogram_value_wrong_data(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        data = [""lolz"", ""lulz"", ""lelz""]\n        self.assertRaises(ValueError, foo.add_histogram_value,\n                          ""bar"", data, tobuild=True)\n\n    def test_add_histogram_value_wrong_variable(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        data = {""min"": 0,\n                ""max"": 100,\n                ""num"": 3,\n                ""bucket_limit"": [10, 50, 30],\n                ""bucket"": [5, 45, 25]}\n        self.assertRaises(ValueError, foo.add_histogram_value,\n                          """", data)\n\n    def test_get_histogram_values_no_data(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        self.assertRaises(ValueError, foo.get_histogram_values, ""bar"")\n\n    def test_get_histogram_values_one_datum(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        data = {""min"": 0,\n                ""max"": 100,\n                ""num"": 3,\n                ""bucket_limit"": [10, 50, 30],\n                ""bucket"": [5, 45, 25]}\n        foo.add_histogram_value(""bar"", data, wall_time=0, step=0)\n        self.assertEqual(foo.get_histogram_values(""bar""),\n                         [[0.0, 0,\n                           [0.0, 100.0, 3.0, 0.0, 0.0,\n                            [10.0, 50.0, 30.0],\n                            [5.0, 45.0, 25.0]]]])\n\n    def test_get_histogram_values_two_data(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        data = {""min"": 0,\n                ""max"": 100,\n                ""num"": 3,\n                ""bucket_limit"": [10, 50, 30],\n                ""bucket"": [5, 45, 25]}\n        foo.add_histogram_value(""bar"", data, wall_time=0, step=0)\n        data = {""min"": 0,\n                ""max"": 100,\n                ""num"": 3,\n                ""bucket_limit"": [10, 50, 30],\n                ""bucket"": [5, 45, 25]}\n        foo.add_histogram_value(""bar"", data, wall_time=1, step=1)\n        self.assertEqual(foo.get_histogram_values(""bar""),\n                         [[0.0, 0,\n                           [0.0, 100.0, 3.0, 0.0, 0.0,\n                            [10.0, 50.0, 30.0],\n                            [5.0, 45.0, 25.0]]],\n                          [1.0, 1,\n                           [0.0, 100.0, 3.0, 0.0, 0.0,\n                            [10.0, 50.0, 30.0],\n                            [5.0, 45.0, 25.0]]]])\n\n    def test_get_histogram_values_wrong_variable(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        data = {""min"": 0,\n                ""max"": 100,\n                ""num"": 3,\n                ""bucket_limit"": [10, 50, 30],\n                ""bucket"": [5, 45, 25]}\n        foo.add_histogram_value(""bar"", data, wall_time=0, step=0)\n        self.assertRaises(ValueError, foo.get_histogram_values, """")\n\n    def test_get_histogram_names(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        data = {""min"": 0,\n                ""max"": 100,\n                ""num"": 3,\n                ""bucket_limit"": [10, 50, 30],\n                ""bucket"": [5, 45, 25]}\n        foo.add_histogram_value(""fizz"", data, wall_time=0, step=0)\n        foo.add_histogram_value(""buzz"", data, wall_time=1, step=1)\n        self.assertEqual(sorted(foo.get_histogram_names()),\n                         sorted([""fizz"", ""buzz""]))\n\n    # Only checks that we get a zip file.\n    # TODO open and match data to recorded\n    def test_to_zip(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        foo.add_scalar_value(""bar"", 2, wall_time=time.time(), step=1)\n        filename = foo.to_zip()\n        os.remove(filename)\n\n    # Only checks that we set a zip file.\n    def test_init_from_file(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        foo.add_scalar_value(""bar"", 2, wall_time=time.time(), step=1)\n        filename = foo.to_zip()\n        new = cc.create_experiment(""new"", filename)\n        os.remove(filename)\n\n    def test_set_data_wrong_file(self):\n        cc = CrayonClient(port=self.test_server_port)\n        self.assertRaises(IOError, cc.create_experiment, ""foo"",\n                          ""random_noise"")\n\n    def test_backup(self):\n        cc = CrayonClient(port=self.test_server_port)\n        foo = cc.create_experiment(""foo"")\n        foo.add_scalar_value(""bar"", 2, wall_time=time.time(), step=1)\n        foo.add_scalar_value(""bar"", 2, wall_time=time.time(), step=2)\n        foo_data = foo.get_scalar_values(""bar"")\n        filename = foo.to_zip()\n\n        cc.remove_experiment(""foo"")\n\n        foo = cc.create_experiment(""foo"", zip_file=filename)\n        new_data = foo.get_scalar_values(""bar"")\n        self.assertEqual(foo_data, new_data)\n\n        new = cc.create_experiment(""new"", zip_file=filename)\n        new_data = new.get_scalar_values(""bar"")\n        self.assertEqual(foo_data, new_data)\n\n        os.remove(filename)\n'"
