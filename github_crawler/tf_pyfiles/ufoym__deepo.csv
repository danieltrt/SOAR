file_path,api_count,code
generator/__init__.py,0,b''
generator/generate.py,0,"b'# -*- coding: utf-8 -*-\n\n""""""Console script for generator.""""""\nimport argparse\nfrom core.composer import Composer\n\n\ndef _import(name):\n    mname = name.lower()\n    cname = name.title()\n    mod = __import__(\'modules.%s\' % mname, fromlist=[cname])\n    mod = getattr(mod, cname)\n    return mod\n\n\ndef main():\n    """"""\n    Generate a dockerfile according to the given modules to be installed.\n    """"""\n    parser = argparse.ArgumentParser(description=\'Composer\')\n    parser.add_argument(\'path\')\n    parser.add_argument(\'modules\', nargs=\'*\')\n    parser.add_argument(\'--cuda-ver\')\n    parser.add_argument(\'--cudnn-ver\')\n    parser.add_argument(\'--ubuntu-ver\', default=\'18.04\')\n    args = parser.parse_args()\n\n    in_modules = []\n    versions = {}\n    for module in args.modules:\n        terms = module.split(\'==\')\n        m = _import(terms[0])\n        in_modules.append(m)\n        if len(terms) > 1:\n            versions[m] = terms[1]\n    composer = Composer(in_modules, args.cuda_ver, args.cudnn_ver, args.ubuntu_ver, versions)\n    with open(args.path, \'w\') as f:\n        f.write(composer.to_dockerfile())\n\n\nif __name__ == ""__main__"":\n    main()\n'"
scripts/make-ci.py,0,"b'# -*- coding: utf-8 -*-\n\n""""""Generate dockerfiles & CI configuration.""""""\n\nimport os\nimport textwrap\nimport datetime\n\n\ndef indent(n, s):\n    prefix = \' \' * 4 * n\n    return \'\'.join(prefix + l for l in s.splitlines(True))\n\n\ndef get_tags(postfix,\n    default_mod=\'all\',\n    default_platform=\'cu101\',\n    default_pyver=\'py36\'):\n\n    terms = postfix.split(\'-\')\n    if len(terms) == 2:\n        mod, platform = terms\n        pyver = None\n    else:\n        mod = \'-\'.join(terms[:-2])\n        pyver, platform = terms[-2], terms[-1]\n\n    tags = [postfix]\n    if platform == default_platform:\n        tags.append(\'-\'.join(filter(None, (mod, pyver))))\n    if pyver == default_pyver:\n        tags.append(\'-\'.join(filter(None, (mod, platform))))\n    if mod == default_mod:\n        tags.append(\'-\'.join(filter(None, (pyver, platform))))\n    if platform == default_platform and pyver == default_pyver:\n        tags.append(mod)\n    if mod == default_mod and pyver == default_pyver:\n        tags.append(platform)\n    if mod == default_mod and platform == default_platform:\n        tags.append(pyver)\n        if platform == default_platform:\n            tags.append(\'latest\')\n\n    if mod == \'all\':\n        for t in list(tags):\n            tags.append(t.replace(\'all\', \'all-jupyter\'))\n\n    # for t in list(tags):\n    #     if \'latest\' not in t:\n    #         tags.append(\'%s-ver%s\' % (t, datetime.datetime.now().strftime(\'%y%m%d\')))\n\n    return tags\n\n\ndef get_job(tags):\n    job_name = \'_\'.join(tags)\n    build_scripts = indent(1, textwrap.dedent(\'\'\'\n        %s:\n            runs-on: ubuntu-latest\n            steps:\n                - uses: actions/checkout@master\n                - name: Free disk space\n                  run: |\n                    df -h\n                    sudo apt-get remove -y \'^ghc-8.*\' \'^dotnet-.*\' \'^llvm-.*\' \'php.*\' azure-cli google-cloud-sdk hhvm google-chrome-stable firefox powershell mono-devel\n                    sudo apt-get autoremove -y\n                    sudo apt-get clean\n                    sudo swapoff -a\n                    sudo rm -f /swapfile\n                    docker rmi $(docker image ls -aq)\n                    df -h\n                - name: Build docker image\n                  run: docker build %s -f docker/Dockerfile.%s .\n                - name: Deploy docker image\n                  run: |\n                    docker login -u ${{secrets.DOCKER_USER}} -p ${{secrets.DOCKER_PASS}}\n                    \'\'\' % (\n                    job_name,\n                    \' \'.join(\'-t ${{secrets.DOCKER_REPO}}:%s\' % tag for tag in tags),\n                    tags[0])))\n    is_all = False\n    is_cpu = False\n    for tag in tags:\n        build_scripts += indent(4, \'docker push ${{secrets.DOCKER_REPO}}:%s\\n\' % tag)\n        if \'all\' in tag:\n            is_all = True\n        if \'cpu\' in tag:\n            is_cpu = True\n    if is_all and is_cpu:\n        test_scripts = textwrap.dedent(\'\'\'\n            import tensorflow as m; print(m.__name__, \':\', m.__version__);\n            import sonnet as m; print(m.__name__, \':\', m.__version__);\n            import torch as m; print(m.__name__, \':\', m.__version__);\n            import keras as m; print(m.__name__, \':\', m.__version__);\n            import mxnet as m; print(m.__name__, \':\', m.__version__);\n            import cntk as m; print(m.__name__, \':\', m.__version__);\n            import chainer as m; print(m.__name__, \':\', m.__version__);\n            import theano as m; print(m.__name__, \':\', m.__version__);\n            import lasagne as m; print(m.__name__, \':\', m.__version__);\n            import caffe as m; print(m.__name__, \':\', m.__version__);\n            import caffe2.python as m; print(m.__name__, \':\', dir(m));\n            import paddle as m; print(m.__name__, \':\', m.__version__);\n            \'\'\').replace(\'\\n\', \'\')\n        run_prefix = \'- run: docker run ${{secrets.DOCKER_REPO}}:%s \' % tags[0]\n        build_scripts += indent(3, textwrap.dedent(\'\'\'\n            %s python -c ""%s""\n            %s caffe --version\n            %s darknet\n            %s th\n            \'\'\' % (run_prefix, test_scripts,\n                   run_prefix, run_prefix, run_prefix)))\n\n    build_scripts += \'\\n\'\n    return job_name, build_scripts\n\n\ndef generate(ci_fname):\n    with open(ci_fname, \'w\') as f:\n        f.write(textwrap.dedent(\'\'\'\n            name: deepo CI\n            on: [push]\n            jobs:\n        \'\'\')[1:])\n\n    job_names = []\n    for fn in os.listdir(os.path.join(\'..\', \'docker\')):\n        postfix = fn.split(\'.\')[-1]\n        tags = get_tags(postfix)\n        job_name, build_scripts = get_job(tags)\n        job_names.append(job_name)\n\n        with open(ci_fname, \'a\') as f:\n            f.write(build_scripts)\n\n\nif __name__ == \'__main__\':\n    generate(\'../.github/workflows/dockerimage.yml\')\n'"
scripts/make-gen-docker.py,0,"b'# -*- coding: utf-8 -*-\n\n""""""Generate scripts for generating dockerfiles.""""""\n\ncandidate_modules = [\n    \'tensorflow\',\n    \'sonnet\',\n    \'mxnet\',\n    \'cntk\',\n    \'keras\',\n    \'pytorch\',\n    \'chainer\',\n    \'theano\',\n    \'lasagne\',\n    \'caffe\',\n    \'torch\',\n    \'darknet\',\n    \'paddle\',\n]\n\nnon_python_modules = [\n    \'torch\',\n    \'darknet\',\n]\n\npyvers = [\n    # \'2.7\',\n    \'3.6\',\n]\n\n\ndef get_command(modules, postfix, cuda_ver, cudnn_ver):\n    cuver = \'cpu\' if cuda_ver is None else \'cu%d\' % (float(cuda_ver) * 10)\n    postfix += \'-%s\' % cuver\n    return \'python ../generator/generate.py ../docker/Dockerfile.%s %s%s%s\\n\' % (\n        postfix,\n        \' \'.join(m for m in modules),\n        \'\' if cuda_ver is None else \' --cuda-ver %s\' % cuda_ver,\n        \'\' if cudnn_ver is None else \' --cudnn-ver %s\' % cudnn_ver,\n    )\n\n\ndef generate(f, cuda_ver=None, cudnn_ver=None):\n\n        # single module\n        for module in candidate_modules:\n            if module in non_python_modules:\n                modules = [module]\n                f.write(get_command(modules, module, cuda_ver, cudnn_ver))\n            else:\n                for pyver in pyvers:\n                    modules = [module, \'python==%s\' % pyver]\n                    postfix = \'%s-py%s\' % (\n                        module, pyver.replace(\'.\', \'\'))\n                    f.write(get_command(modules, postfix, cuda_ver, cudnn_ver))\n\n        # all modules\n        for pyver in pyvers:\n            modules = candidate_modules + [\'python==%s\' % pyver, \'onnx\', \'jupyterlab\']\n            postfix = \'all-py%s\' % pyver.replace(\'.\', \'\')\n            f.write(get_command(modules, postfix, cuda_ver, cudnn_ver))\n\n\nif __name__ == \'__main__\':\n    with open(\'gen-docker.sh\', \'w\') as f:\n        generate(f)\n        # generate(f, \'8.0\', \'6\')\n        # generate(f, \'9.0\', \'7\')\n        generate(f, \'10.1\', \'7\')\n'"
generator/core/__init__.py,0,b''
generator/core/composer.py,0,"b'# -*- coding: utf-8 -*-\nimport textwrap\nimport functools\n\n\nclass Composer(object):\n\n    def __init__(self, modules, cuda_ver, cudnn_ver, ubuntu_ver, versions={}):\n        if len(modules) == 0:\n            raise ValueError(\'Modules should contain at least one module\')\n        pending = self._traverse(modules)\n        self.modules = [m for m in self._toposort(pending)]\n        self.instances = self._get_instances(versions)\n        self.cuda_ver = cuda_ver\n        self.cudnn_ver = cudnn_ver\n        self.ubuntu_ver = ubuntu_ver\n\n    def get(self):\n        return self.modules\n\n    def ver(self, module):\n        for ins in self.instances:\n            if ins.__class__ is module:\n                return ins.version\n        return None\n\n    def to_dockerfile(self):\n        def _indent(n, s):\n            prefix = \' \' * 4 * n\n            return \'\'.join(prefix + l for l in s.splitlines(True))\n\n        ports = \' \'.join([str(p) for m in self.instances for p in m.expose()])\n        return textwrap.dedent(\'\'.join([\n            _indent(3, \'\'.join([\n                self._split(\'module list\'),\n                \'\'.join(\'# %s\\n\' % repr(m)\n                    for m in self.instances if repr(m)),\n                self._split(),\n            ])),\n            r\'\'\'\n            FROM %s\n            ENV LANG C.UTF-8\n            RUN APT_INSTALL=""apt-get install -y --no-install-recommends"" && \\\n                PIP_INSTALL=""python -m pip --no-cache-dir install --upgrade"" && \\\n                GIT_CLONE=""git clone --depth 10"" && \\\n\n                rm -rf /var/lib/apt/lists/* \\\n                       /etc/apt/sources.list.d/cuda.list \\\n                       /etc/apt/sources.list.d/nvidia-ml.list && \\\n\n                apt-get update && \\\n            \'\'\' % (\'ubuntu:%s\' % self.ubuntu_ver if self.cuda_ver is None\n                   else \'nvidia/cuda:%s-cudnn%s-devel-ubuntu%s\' % (\n                    self.cuda_ver, self.cudnn_ver, self.ubuntu_ver)),\n            \'\\n\',\n            \'\\n\'.join([\n                \'\'.join([\n                    _indent(3, self._split(m.name())),\n                    _indent(1, m.build()),\n                ]) for m in self.instances\n            ]),\n            \'\\n\',\n            _indent(3, self._split(\'config & cleanup\')),\n            r\'\'\'\n                ldconfig && \\\n                apt-get clean && \\\n                apt-get autoremove && \\\n                rm -rf /var/lib/apt/lists/* /tmp/* ~/*\n            \'\'\',\n            r\'\'\'\n            EXPOSE %s\n            \'\'\' % ports if ports else \'\',\n            ]))\n\n    def _traverse(self, modules):\n        seen = set(modules)\n        current_level = modules\n        while current_level:\n            next_level = []\n            for module in current_level:\n                yield module\n                for child in (dep for dep in module.deps if dep not in seen):\n                    next_level.append(child)\n                    seen.add(child)\n            current_level = next_level\n\n    def _toposort(self, pending):\n        data = {m: set(m.deps) for m in pending}\n        for k, v in data.items():\n            v.discard(k)\n        extra_items_in_deps = functools.reduce(\n            set.union, data.values()) - set(data.keys())\n        data.update({item: set() for item in extra_items_in_deps})\n        while True:\n            ordered = set(item for item, dep in data.items() if len(dep) == 0)\n            if not ordered:\n                break\n            for m in sorted(ordered, key=lambda m: m.__name__):\n                yield m\n            data = {\n                item: (dep - ordered)\n                for item, dep in data.items()\n                if item not in ordered\n            }\n        if len(data) != 0:\n            raise ValueError(\n                \'Circular dependencies exist among these items: \'\n                \'{{{}}}\'.format(\', \'.join(\n                    \'{!r}:{!r}\'.format(\n                        key, value) for key, value in sorted(\n                        data.items()))))\n\n    def _split(self, title=None):\n        split_l = \'# \' + \'=\' * 66 + \'\\n\'\n        split_s = \'# \' + \'-\' * 66 + \'\\n\'\n        s = split_l if title is None else (\n            split_l + \'# %s\\n\' % title + split_s)\n        return s\n\n    def _get_instances(self, versions):\n        inses = []\n        for m in self.modules:\n            ins = m(self)\n            if m in versions:\n                ins.version = versions[m]\n            inses.append(ins)\n        return inses\n'"
generator/modules/__init__.py,0,b''
generator/modules/__module__.py,0,"b""# -*- coding: utf-8 -*-\n\n\ndef parametrized(dec):\n    def layer(*args, **kwargs):\n        def repl(f):\n            return dec(f, *args, **kwargs)\n        return repl\n    return layer\n\n\n@parametrized\ndef dependency(module, *_deps):\n    module.deps = _deps\n    return module\n\n\n@parametrized\ndef source(module, _source):\n    module.source = _source\n    return module\n\n\n@parametrized\ndef version(module, _ver):\n    module.version = _ver\n    return module\n\n\n@dependency()\n@source('unknown')\n@version('latest')\nclass Module(object):\n\n    def __init__(self, composer):\n        self.composer = composer\n\n    def __repr__(self):\n        return '%-13s %-6s (%s)' % (\n            self.name(),\n            self.version,\n            self.source)\n\n    def build(self):\n        pass\n\n    def expose(self):\n        return []\n\n    def name(self):\n        return self.__class__.__name__.lower()\n"""
generator/modules/boost.py,0,"b'# -*- coding: utf-8 -*-\nfrom .__module__ import Module, dependency, source\nfrom .tools import Tools\nfrom .python import Python\n\n\n@dependency(Tools, Python)\n@source(\'src\')\nclass Boost(Module):\n\n    def __repr__(self):\n        return \'\'\n\n    # def build(self):\n    #     pyver = self.composer.ver(Python)\n    #     return r\'\'\'\n    #         DEBIAN_FRONTEND=noninteractive $APT_INSTALL \\\n    #             libboost-all-dev \\\n    #             && \\\n    #         \'\'\' if pyver == \'2.7\' else (\n    #         r\'\'\'\n    #         wget -O ~/boost.tar.gz \'\'\'\n    #         + r\'\'\'https://dl.bintray.com/boostorg/release/1.69.0\'\'\'\n    #         + r\'\'\'/source/boost_1_69_0.tar.gz && \\\n    #         tar -zxf ~/boost.tar.gz -C ~ && \\\n    #         cd ~/boost_* && \\\n    #         ./bootstrap.sh --with-python=python%s && \\\n    #         ./b2 install -j""$(nproc)"" --prefix=/usr/local && \\\n    #         \'\'\' % pyver\n    #     )\n\n    def build(self):\n        return r\'\'\'\n            DEBIAN_FRONTEND=noninteractive $APT_INSTALL \\\n                libboost-all-dev \\\n                && \\\n        \'\'\'\n'"
generator/modules/caffe.py,0,"b""# -*- coding: utf-8 -*-\nfrom .__module__ import Module, dependency, source\nfrom .tools import Tools\nfrom .boost import Boost\nfrom .python import Python\nfrom .opencv import Opencv\n\n\n@dependency(Tools, Python, Boost, Opencv)\n@source('git')\nclass Caffe(Module):\n\n    def build(self):\n        cpu_only = self.composer.cuda_ver is None\n        return (r'''\n            apt-get update && \\\n            DEBIAN_FRONTEND=noninteractive $APT_INSTALL \\\n                caffe-%s \\\n                && \\\n        ''' % ('cpu' if cpu_only else 'cuda')\n        ).rstrip()\n"""
generator/modules/chainer.py,0,"b""# -*- coding: utf-8 -*-\nfrom .__module__ import Module, dependency, source\nfrom .python import Python\n\n\n@dependency(Python)\n@source('pip')\nclass Chainer(Module):\n\n    def build(self):\n        return r'''\n            $PIP_INSTALL \\\n            '''.rstrip() + (\n                '' if self.composer.cuda_ver is None else \\\n                r'''\n                cupy \\\n                '''.rstrip()\n            ) + r'''\n                chainer \\\n                && \\\n        '''\n"""
generator/modules/cntk.py,0,"b'# -*- coding: utf-8 -*-\nfrom .__module__ import Module, dependency, source, version\nfrom .python import Python\nfrom .opencv import Opencv\n\n\n@dependency(Python, Opencv)\n@source(\'pip\')\nclass Cntk(Module):\n\n    def build(self):\n        return r\'\'\'\n            DEBIAN_FRONTEND=noninteractive $APT_INSTALL \\\n                openmpi-bin \\\n                libpng-dev \\\n                libjpeg-dev \\\n                libtiff-dev \\\n                && \\\n\n            # Fix ImportError for CNTK\n            ln -s /usr/lib/x86_64-linux-gnu/libmpi_cxx.so.20 /usr/lib/x86_64-linux-gnu/libmpi_cxx.so.1 && \\\n            ln -s /usr/lib/x86_64-linux-gnu/libmpi.so.20.10.1 /usr/lib/x86_64-linux-gnu/libmpi.so.12 && \\\n\n            wget --no-verbose -O - https://github.com/01org/mkl-dnn/releases/download/v0.14/mklml_lnx_2018.0.3.20180406.tgz | tar -xzf - && \\\n            cp mklml*/* /usr/local -r && \\\n\n            wget --no-verbose -O - https://github.com/01org/mkl-dnn/archive/v0.14.tar.gz | tar -xzf - && \\\n            cd *-0.14 && mkdir build && cd build && \\\n            ln -s /usr/local external && \\\n            cmake -D CMAKE_BUILD_TYPE=RELEASE \\\n                  -D CMAKE_INSTALL_PREFIX=/usr/local \\\n                  .. && \\\n            make -j""$(nproc)"" install && \\\n\n            $PIP_INSTALL \\\n                cntk%s \\\n                && \\\n        \'\'\' % (\'\' if self.composer.cuda_ver is None else \'-gpu\')\n'"
generator/modules/darknet.py,0,"b'# -*- coding: utf-8 -*-\nfrom .__module__ import Module, dependency, source\nfrom .tools import Tools\n\n\n@dependency(Tools)\n@source(\'git\')\nclass Darknet(Module):\n\n    def build(self):\n        use_gpu = 1 if self.composer.cuda_ver else 0\n\n        return r\'\'\'\n            $GIT_CLONE https://github.com/pjreddie/darknet.git ~/darknet && \\\n            cd ~/darknet && \\\n            sed -i \'s/GPU=0/GPU=%d/g\' ~/darknet/Makefile && \\\n            sed -i \'s/CUDNN=0/CUDNN=%d/g\' ~/darknet/Makefile && \\\n            make -j""$(nproc)"" && \\\n            cp ~/darknet/include/* /usr/local/include && \\\n            cp ~/darknet/*.a /usr/local/lib && \\\n            cp ~/darknet/*.so /usr/local/lib && \\\n            cp ~/darknet/darknet /usr/local/bin && \\\n        \'\'\' % (use_gpu, use_gpu)\n'"
generator/modules/jupyter.py,0,"b""# -*- coding: utf-8 -*-\nfrom .__module__ import Module, dependency, source\nfrom .python import Python\n\n\n@dependency(Python)\n@source('pip')\nclass Jupyter(Module):\n\n    def build(self):\n        return r'''\n            $PIP_INSTALL \\\n                jupyter \\\n                && \\\n        '''\n\n    def expose(self):\n        return [\n            8888,  # expose port for jupyter\n        ]\n"""
generator/modules/jupyterlab.py,0,"b""# -*- coding: utf-8 -*-\nfrom .__module__ import Module, dependency, source\nfrom .python import Python\nfrom .jupyter import Jupyter\n\n\n@dependency(Python, Jupyter)\n@source('pip')\nclass Jupyterlab(Module):\n\n    def build(self):\n        return r'''\n            $PIP_INSTALL \\\n                jupyterlab \\\n                && \\\n        '''\n"""
generator/modules/keras.py,0,"b""# -*- coding: utf-8 -*-\nfrom .__module__ import Module, dependency, source\nfrom .python import Python\nfrom .tensorflow import Tensorflow\n\n\n@dependency(Python, Tensorflow)\n@source('pip')\nclass Keras(Module):\n\n    def build(self):\n        return r'''\n            $PIP_INSTALL \\\n                h5py \\\n                keras \\\n                && \\\n        '''\n"""
generator/modules/lasagne.py,0,"b""# -*- coding: utf-8 -*-\nfrom .__module__ import Module, dependency, source\nfrom .tools import Tools\nfrom .python import Python\nfrom .theano import Theano\n\n\n@dependency(Tools, Python, Theano)\n@source('git')\nclass Lasagne(Module):\n\n    def build(self):\n        return r'''\n            $GIT_CLONE https://github.com/Lasagne/Lasagne ~/lasagne && \\\n            cd ~/lasagne && \\\n            $PIP_INSTALL \\\n                . && \\\n        '''\n"""
generator/modules/mxnet.py,0,"b""# -*- coding: utf-8 -*-\nfrom .__module__ import Module, dependency, source\nfrom .python import Python\n\n\n@dependency(Python)\n@source('pip')\nclass Mxnet(Module):\n\n    def build(self):\n        cuver = '' if self.composer.cuda_ver is None else '-cu%d' % (\n            float(self.composer.cuda_ver) * 10)\n        return r'''\n            DEBIAN_FRONTEND=noninteractive $APT_INSTALL \\\n                libatlas-base-dev \\\n                graphviz \\\n                && \\\n\n            $PIP_INSTALL \\\n                mxnet%s \\\n                graphviz \\\n                && \\\n        ''' % cuver\n"""
generator/modules/onnx.py,0,"b""# -*- coding: utf-8 -*-\nfrom .__module__ import Module, dependency, source\nfrom .python import Python\n\n\n@dependency(Python)\n@source('pip')\nclass Onnx(Module):\n\n    def build(self):\n        return r'''\n            DEBIAN_FRONTEND=noninteractive $APT_INSTALL \\\n                protobuf-compiler \\\n                libprotoc-dev \\\n                && \\\n\n            $PIP_INSTALL \\\n                --no-binary onnx onnx \\\n                && \\\n\n            $PIP_INSTALL \\\n                onnxruntime \\\n                && \\\n        '''\n"""
generator/modules/opencv.py,0,"b'# -*- coding: utf-8 -*-\nfrom .__module__ import Module, dependency, source, version\nfrom .tools import Tools\nfrom .boost import Boost\nfrom .python import Python\n\n\n@dependency(Tools, Python, Boost)\n@source(\'git\')\n@version(\'4.3.0\')\nclass Opencv(Module):\n\n    def build(self):\n        return r\'\'\'\n            DEBIAN_FRONTEND=noninteractive $APT_INSTALL \\\n                libatlas-base-dev \\\n                libgflags-dev \\\n                libgoogle-glog-dev \\\n                libhdf5-serial-dev \\\n                libleveldb-dev \\\n                liblmdb-dev \\\n                libprotobuf-dev \\\n                libsnappy-dev \\\n                protobuf-compiler \\\n                && \\\n\n            $GIT_CLONE --branch %s https://github.com/opencv/opencv ~/opencv && \\\n            mkdir -p ~/opencv/build && cd ~/opencv/build && \\\n            cmake -D CMAKE_BUILD_TYPE=RELEASE \\\n                  -D CMAKE_INSTALL_PREFIX=/usr/local \\\n                  -D WITH_IPP=OFF \\\n                  -D WITH_CUDA=OFF \\\n                  -D WITH_OPENCL=OFF \\\n                  -D BUILD_TESTS=OFF \\\n                  -D BUILD_PERF_TESTS=OFF \\\n                  -D BUILD_DOCS=OFF \\\n                  -D BUILD_EXAMPLES=OFF \\\n                  .. && \\\n            make -j""$(nproc)"" install && \\\n            ln -s /usr/local/include/opencv4/opencv2 /usr/local/include/opencv2 && \\\n        \'\'\' % self.version\n'"
generator/modules/paddle.py,0,"b""# -*- coding: utf-8 -*-\nfrom .__module__ import Module, dependency, source, version\nfrom .python import Python\n\n\n@dependency(Python)\n@source('pip')\nclass Paddle(Module):\n\n    def build(self):\n        return r'''\n            $PIP_INSTALL \\\n                paddlepaddle%s \\\n                && \\\n        ''' % ('' if self.composer.cuda_ver is None else '-gpu')\n"""
generator/modules/python.py,0,"b""# -*- coding: utf-8 -*-\nfrom .__module__ import Module, dependency, source, version\nfrom .tools import Tools\n\n\n@dependency(Tools)\n@version('3.6')\n@source('apt')\nclass Python(Module):\n\n    def __init__(self, manager, **args):\n        super(self.__class__, self).__init__(manager, **args)\n        if self.version not in ('2.7', '3.6',):\n            raise NotImplementedError('unsupported python version')\n\n    def build(self):\n        return (\n            r'''\n            DEBIAN_FRONTEND=noninteractive $APT_INSTALL \\\n                software-properties-common \\\n                && \\\n            add-apt-repository ppa:deadsnakes/ppa && \\\n            apt-get update && \\\n            DEBIAN_FRONTEND=noninteractive $APT_INSTALL \\\n                python%s \\\n                python%s-dev \\\n                python3-distutils%s \\\n                && \\\n            wget -O ~/get-pip.py \\\n                https://bootstrap.pypa.io/get-pip.py && \\\n            python%s ~/get-pip.py && \\\n            ln -s /usr/bin/python%s /usr/local/bin/python3 && \\\n            ln -s /usr/bin/python%s /usr/local/bin/python && \\\n            $PIP_INSTALL \\\n                setuptools \\\n                && \\\n            ''' % (\n                self.version,\n                self.version,\n                '-extra' if self.composer.ubuntu_ver.startswith('18.') else '',\n                self.version,\n                self.version,\n                self.version,\n                ) if self.version.startswith('3') else\n            r'''\n            DEBIAN_FRONTEND=noninteractive $APT_INSTALL \\\n                python-pip \\\n                python-dev \\\n                && \\\n            $PIP_INSTALL \\\n                setuptools \\\n                pip \\\n                && \\\n            '''\n        ).rstrip() + r'''\n            $PIP_INSTALL \\\n                numpy \\\n                scipy \\\n                pandas \\\n                cloudpickle \\\n                scikit-image>=0.14.2 \\\n                scikit-learn \\\n                matplotlib \\\n                Cython \\\n                tqdm \\\n                && \\\n        '''\n"""
generator/modules/pytorch.py,0,"b""# -*- coding: utf-8 -*-\nfrom .__module__ import Module, dependency, source\nfrom .python import Python\n\n\n@dependency(Python)\n@source('pip')\nclass Pytorch(Module):\n\n    def build(self):\n        cuver = 'cpu' if self.composer.cuda_ver is None else 'cu%d' % (\n            float(self.composer.cuda_ver) * 10)\n        return r'''\n            $PIP_INSTALL \\\n                future \\\n                numpy \\\n                protobuf \\\n                enum34 \\\n                pyyaml \\\n                typing \\\n                && \\\n            $PIP_INSTALL \\\n                --pre torch torchvision -f \\\n                https://download.pytorch.org/whl/nightly/%s/torch_nightly.html \\\n                && \\\n        ''' % cuver\n"""
generator/modules/sonnet.py,0,"b'# -*- coding: utf-8 -*-\nfrom .__module__ import Module, dependency, source\nfrom .python import Python\nfrom .tensorflow import Tensorflow\n\n\n@dependency(Python, Tensorflow)\n@source(\'pip\')\nclass Sonnet(Module):\n\n    def build(self):\n        return r\'\'\'\n            $PIP_INSTALL \\\n                tensorflow_probability \\\n                ""dm-sonnet>=2.0.0b0"" --pre \\\n                && \\\n        \'\'\'\n'"
generator/modules/tensorflow.py,0,"b'# -*- coding: utf-8 -*-\nfrom .__module__ import Module, dependency, source, version\nfrom .python import Python\n\n\n@dependency(Python)\n@version(\'latest\')\n@source(\'pip\')\nclass Tensorflow(Module):\n\n    def __init__(self, manager, **args):\n        super(self.__class__, self).__init__(manager, **args)\n        if self.version not in (\'1.13.1\', \'2.0.0a0\', \'latest\'):\n            raise NotImplementedError(\'unsupported tensorflow version\')\n\n    def build(self):\n        is_gpu = \'\' if self.composer.cuda_ver is None else \'-gpu\'\n        tensorflow_version = (\'tensorflow%s\' % is_gpu) if self.version == \'latest\' else (""tensorflow%s==%s"" % (is_gpu, self.version))\n        return r\'\'\'\n            $PIP_INSTALL \\\n                %s \\\n                && \\\n        \'\'\' % tensorflow_version\n\n    def expose(self):\n        return [\n            6006,  # expose port for TensorBoard\n        ]\n'"
generator/modules/theano.py,0,"b'# -*- coding: utf-8 -*-\nfrom .__module__ import Module, dependency, source, version\nfrom .tools import Tools\nfrom .python import Python\n\n\n@dependency(Tools, Python)\n@source(\'git\')\nclass Theano(Module):\n\n    def build(self):\n        return r\'\'\'\n            DEBIAN_FRONTEND=noninteractive $APT_INSTALL \\\n                libblas-dev \\\n                && \\\n        \'\'\' + (\n            \'\' if self.composer.cuda_ver is None else r\'\'\'\n            wget -qO- https://github.com/Theano/libgpuarray/archive/v0.7.6.tar.gz | tar xz -C ~ && \\\n            cd ~/libgpuarray* && mkdir -p build && cd build && \\\n            cmake -D CMAKE_BUILD_TYPE=RELEASE \\\n                  -D CMAKE_INSTALL_PREFIX=/usr/local \\\n                  .. && \\\n            make -j""$(nproc)"" install && \\\n            cd ~/libgpuarray* && \\\n            python setup.py build && \\\n            python setup.py install && \\\n\n            printf \'[global]\\nfloatX = float32\\ndevice = cuda0\\n\\n[dnn]\\n\'\'\'\n            + r\'\'\'include_path = /usr/local/cuda/targets\'\'\'\n            + r\'\'\'/x86_64-linux/include\\n\' > ~/.theanorc && \\\n        \'\'\') + r\'\'\'\n            $PIP_INSTALL \\\n                https://github.com/Theano/Theano/archive/master.zip \\\n                && \\\n        \'\'\'\n'"
generator/modules/tools.py,0,"b'# -*- coding: utf-8 -*-\nfrom .__module__ import Module, source\n\n\n@source(\'apt\')\nclass Tools(Module):\n\n    def __repr__(self):\n        return \'\'\n\n    def build(self):\n        return r\'\'\'\n            DEBIAN_FRONTEND=noninteractive $APT_INSTALL \\\n                build-essential \\\n                apt-utils \\\n                ca-certificates \\\n                wget \\\n                git \\\n                vim \\\n                libssl-dev \\\n                curl \\\n                unzip \\\n                unrar \\\n                && \\\n\n            $GIT_CLONE https://github.com/Kitware/CMake ~/cmake && \\\n            cd ~/cmake && \\\n            ./bootstrap && \\\n            make -j""$(nproc)"" install && \\\n            \'\'\'\n'"
generator/modules/torch.py,0,"b""# -*- coding: utf-8 -*-\nfrom .__module__ import Module, dependency, source\nfrom .tools import Tools\n\n\n@dependency(Tools)\n@source('git')\nclass Torch(Module):\n\n    def build(self):\n        return r'''\n            DEBIAN_FRONTEND=noninteractive $APT_INSTALL \\\n                sudo \\\n                && \\\n\n            $GIT_CLONE https://github.com/nagadomi/distro.git ~/torch --recursive && \\\n            cd ~/torch && \\\n            bash install-deps && \\\n            sed -i 's/${THIS_DIR}\\/install/\\/usr\\/local/g' ./install.sh && \\\n            ./install.sh && \\\n        '''\n"""
