file_path,api_count,code
args.py,3,"b""# coding: utf-8\n# This file contains the parameter used in train.py\n\nfrom __future__ import division, print_function\n\nfrom utils.misc_utils import parse_anchors, read_class_names\nimport math\n\n### Some paths\ntrain_file = './data/my_data/train.txt'  # The path of the training txt file.\nval_file = './data/my_data/val.txt'  # The path of the validation txt file.\nrestore_path = './data/darknet_weights/yolov3.ckpt'  # The path of the weights to restore.\nsave_dir = './checkpoint/'  # The directory of the weights to save.\nlog_dir = './data/logs/'  # The directory to store the tensorboard log files.\nprogress_log_path = './data/progress.log'  # The path to record the training progress.\nanchor_path = './data/yolo_anchors.txt'  # The path of the anchor txt file.\nclass_name_path = './data/coco.names'  # The path of the class names.\n\n### Training releated numbers\nbatch_size = 6\nimg_size = [416, 416]  # Images will be resized to `img_size` and fed to the network, size format: [width, height]\nletterbox_resize = True  # Whether to use the letterbox resize, i.e., keep the original aspect ratio in the resized image.\ntotal_epoches = 100\ntrain_evaluation_step = 100  # Evaluate on the training batch after some steps.\nval_evaluation_epoch = 2  # Evaluate on the whole validation dataset after some epochs. Set to None to evaluate every epoch.\nsave_epoch = 10  # Save the model after some epochs.\nbatch_norm_decay = 0.99  # decay in bn ops\nweight_decay = 5e-4  # l2 weight decay\nglobal_step = 0  # used when resuming training\n\n### tf.data parameters\nnum_threads = 10  # Number of threads for image processing used in tf.data pipeline.\nprefetech_buffer = 5  # Prefetech_buffer used in tf.data pipeline.\n\n### Learning rate and optimizer\noptimizer_name = 'momentum'  # Chosen from [sgd, momentum, adam, rmsprop]\nsave_optimizer = True  # Whether to save the optimizer parameters into the checkpoint file.\nlearning_rate_init = 1e-4\nlr_type = 'piecewise'  # Chosen from [fixed, exponential, cosine_decay, cosine_decay_restart, piecewise]\nlr_decay_epoch = 5  # Epochs after which learning rate decays. Int or float. Used when chosen `exponential` and `cosine_decay_restart` lr_type.\nlr_decay_factor = 0.96  # The learning rate decay factor. Used when chosen `exponential` lr_type.\nlr_lower_bound = 1e-6  # The minimum learning rate.\n# only used in piecewise lr type\npw_boundaries = [30, 50]  # epoch based boundaries\npw_values = [learning_rate_init, 3e-5, 1e-5]\n\n### Load and finetune\n# Choose the parts you want to restore the weights. List form.\n# restore_include: None, restore_exclude: None  => restore the whole model\n# restore_include: None, restore_exclude: scope  => restore the whole model except `scope`\n# restore_include: scope1, restore_exclude: scope2  => if scope1 contains scope2, restore scope1 and not restore scope2 (scope1 - scope2)\n# choise 1: only restore the darknet body\n# restore_include = ['yolov3/darknet53_body']\n# restore_exclude = None\n# choise 2: restore all layers except the last 3 conv2d layers in 3 scale\nrestore_include = None\nrestore_exclude = ['yolov3/yolov3_head/Conv_14', 'yolov3/yolov3_head/Conv_6', 'yolov3/yolov3_head/Conv_22']\n# Choose the parts you want to finetune. List form.\n# Set to None to train the whole model.\nupdate_part = ['yolov3/yolov3_head']\n\n### other training strategies\nmulti_scale_train = True  # Whether to apply multi-scale training strategy. Image size varies from [320, 320] to [640, 640] by default.\nuse_label_smooth = True # Whether to use class label smoothing strategy.\nuse_focal_loss = True  # Whether to apply focal loss on the conf loss.\nuse_mix_up = True  # Whether to use mix up data augmentation strategy. \nuse_warm_up = True  # whether to use warm up strategy to prevent from gradient exploding.\nwarm_up_epoch = 3  # Warm up training epoches. Set to a larger value if gradient explodes.\n\n### some constants in validation\n# nms\nnms_threshold = 0.45  # iou threshold in nms operation\nscore_threshold = 0.01  # threshold of the probability of the classes in nms operation, i.e. score = pred_confs * pred_probs. set lower for higher recall.\nnms_topk = 150  # keep at most nms_topk outputs after nms\n# mAP eval\neval_threshold = 0.5  # the iou threshold applied in mAP evaluation\nuse_voc_07_metric = False  # whether to use voc 2007 evaluation metric, i.e. the 11-point metric\n\n### parse some params\nanchors = parse_anchors(anchor_path)\nclasses = read_class_names(class_name_path)\nclass_num = len(classes)\ntrain_img_cnt = len(open(train_file, 'r').readlines())\nval_img_cnt = len(open(val_file, 'r').readlines())\ntrain_batch_num = int(math.ceil(float(train_img_cnt) / batch_size))\n\nlr_decay_freq = int(train_batch_num * lr_decay_epoch)\npw_boundaries = [float(i) * train_batch_num + global_step for i in pw_boundaries]"""
convert_weight.py,5,"b""# coding: utf-8\n# for more details about the yolo darknet weights file, refer to\n# https://itnext.io/implementing-yolo-v3-in-tensorflow-tf-slim-c3c55ff59dbe\n\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nimport tensorflow as tf\nimport numpy as np\n\nfrom model import yolov3\nfrom utils.misc_utils import parse_anchors, load_weights\n\nnum_class = 80\nimg_size = 416\nweight_path = './data/darknet_weights/yolov3.weights'\nsave_path = './data/darknet_weights/yolov3.ckpt'\nanchors = parse_anchors('./data/yolo_anchors.txt')\n\nmodel = yolov3(80, anchors)\nwith tf.Session() as sess:\n    inputs = tf.placeholder(tf.float32, [1, img_size, img_size, 3])\n\n    with tf.variable_scope('yolov3'):\n        feature_map = model.forward(inputs)\n\n    saver = tf.train.Saver(var_list=tf.global_variables(scope='yolov3'))\n\n    load_ops = load_weights(tf.global_variables(scope='yolov3'), weight_path)\n    sess.run(load_ops)\n    saver.save(sess, save_path=save_path)\n    print('TensorFlow model checkpoint has been saved to {}'.format(save_path))\n\n\n\n"""
eval.py,13,"b'# coding: utf-8\n\nfrom __future__ import division, print_function\n\nimport tensorflow as tf\nimport numpy as np\nimport argparse\nfrom tqdm import trange\n\nfrom utils.data_utils import get_batch_data\nfrom utils.misc_utils import parse_anchors, read_class_names, AverageMeter\nfrom utils.eval_utils import evaluate_on_cpu, evaluate_on_gpu, get_preds_gpu, voc_eval, parse_gt_rec\nfrom utils.nms_utils import gpu_nms\n\nfrom model import yolov3\n\n#################\n# ArgumentParser\n#################\nparser = argparse.ArgumentParser(description=""YOLO-V3 eval procedure."")\n# some paths\nparser.add_argument(""--eval_file"", type=str, default=""./data/my_data/val.txt"",\n                    help=""The path of the validation or test txt file."")\n\nparser.add_argument(""--restore_path"", type=str, default=""./data/darknet_weights/yolov3.ckpt"",\n                    help=""The path of the weights to restore."")\n\nparser.add_argument(""--anchor_path"", type=str, default=""./data/yolo_anchors.txt"",\n                    help=""The path of the anchor txt file."")\n\nparser.add_argument(""--class_name_path"", type=str, default=""./data/coco.names"",\n                    help=""The path of the class names."")\n\n# some numbers\nparser.add_argument(""--img_size"", nargs=\'*\', type=int, default=[416, 416],\n                    help=""Resize the input image to `img_size`, size format: [width, height]"")\n\nparser.add_argument(""--letterbox_resize"", type=lambda x: (str(x).lower() == \'true\'), default=False,\n                    help=""Whether to use the letterbox resize, i.e., keep the original image aspect ratio."")\n\nparser.add_argument(""--num_threads"", type=int, default=10,\n                    help=""Number of threads for image processing used in tf.data pipeline."")\n\nparser.add_argument(""--prefetech_buffer"", type=int, default=5,\n                    help=""Prefetech_buffer used in tf.data pipeline."")\n\nparser.add_argument(""--nms_threshold"", type=float, default=0.45,\n                    help=""IOU threshold in nms operation."")\n\nparser.add_argument(""--score_threshold"", type=float, default=0.01,\n                    help=""Threshold of the probability of the classes in nms operation."")\n\nparser.add_argument(""--nms_topk"", type=int, default=400,\n                    help=""Keep at most nms_topk outputs after nms."")\n\nparser.add_argument(""--use_voc_07_metric"", type=lambda x: (str(x).lower() == \'true\'), default=False,\n                    help=""Whether to use the voc 2007 mAP metrics."")\n\nargs = parser.parse_args()\n\n# args params\nargs.anchors = parse_anchors(args.anchor_path)\nargs.classes = read_class_names(args.class_name_path)\nargs.class_num = len(args.classes)\nargs.img_cnt = len(open(args.eval_file, \'r\').readlines())\n\n# setting placeholders\nis_training = tf.placeholder(dtype=tf.bool, name=""phase_train"")\nhandle_flag = tf.placeholder(tf.string, [], name=\'iterator_handle_flag\')\npred_boxes_flag = tf.placeholder(tf.float32, [1, None, None])\npred_scores_flag = tf.placeholder(tf.float32, [1, None, None])\ngpu_nms_op = gpu_nms(pred_boxes_flag, pred_scores_flag, args.class_num, args.nms_topk, args.score_threshold, args.nms_threshold)\n\n##################\n# tf.data pipeline\n##################\nval_dataset = tf.data.TextLineDataset(args.eval_file)\nval_dataset = val_dataset.batch(1)\nval_dataset = val_dataset.map(\n    lambda x: tf.py_func(get_batch_data, [x, args.class_num, args.img_size, args.anchors, \'val\', False, False, args.letterbox_resize], [tf.int64, tf.float32, tf.float32, tf.float32, tf.float32]),\n    num_parallel_calls=args.num_threads\n)\nval_dataset.prefetch(args.prefetech_buffer)\niterator = val_dataset.make_one_shot_iterator()\n\nimage_ids, image, y_true_13, y_true_26, y_true_52 = iterator.get_next()\nimage_ids.set_shape([None])\ny_true = [y_true_13, y_true_26, y_true_52]\nimage.set_shape([None, args.img_size[1], args.img_size[0], 3])\nfor y in y_true:\n    y.set_shape([None, None, None, None, None])\n\n##################\n# Model definition\n##################\nyolo_model = yolov3(args.class_num, args.anchors)\nwith tf.variable_scope(\'yolov3\'):\n    pred_feature_maps = yolo_model.forward(image, is_training=is_training)\nloss = yolo_model.compute_loss(pred_feature_maps, y_true)\ny_pred = yolo_model.predict(pred_feature_maps)\n\nsaver_to_restore = tf.train.Saver()\n\nwith tf.Session() as sess:\n    sess.run([tf.global_variables_initializer()])\n    saver_to_restore.restore(sess, args.restore_path)\n\n    print(\'\\n----------- start to eval -----------\\n\')\n\n    val_loss_total, val_loss_xy, val_loss_wh, val_loss_conf, val_loss_class = \\\n        AverageMeter(), AverageMeter(), AverageMeter(), AverageMeter(), AverageMeter()\n    val_preds = []\n\n    for j in trange(args.img_cnt):\n        __image_ids, __y_pred, __loss = sess.run([image_ids, y_pred, loss], feed_dict={is_training: False})\n        pred_content = get_preds_gpu(sess, gpu_nms_op, pred_boxes_flag, pred_scores_flag, __image_ids, __y_pred)\n\n        val_preds.extend(pred_content)\n        val_loss_total.update(__loss[0])\n        val_loss_xy.update(__loss[1])\n        val_loss_wh.update(__loss[2])\n        val_loss_conf.update(__loss[3])\n        val_loss_class.update(__loss[4])\n\n    rec_total, prec_total, ap_total = AverageMeter(), AverageMeter(), AverageMeter()\n    gt_dict = parse_gt_rec(args.eval_file, args.img_size, args.letterbox_resize)\n    print(\'mAP eval:\')\n    for ii in range(args.class_num):\n        npos, nd, rec, prec, ap = voc_eval(gt_dict, val_preds, ii, iou_thres=0.5, use_07_metric=args.use_voc_07_metric)\n        rec_total.update(rec, npos)\n        prec_total.update(prec, nd)\n        ap_total.update(ap, 1)\n        print(\'Class {}: Recall: {:.4f}, Precision: {:.4f}, AP: {:.4f}\'.format(ii, rec, prec, ap))\n\n    mAP = ap_total.average\n    print(\'final mAP: {:.4f}\'.format(mAP))\n    print(""recall: {:.3f}, precision: {:.3f}"".format(rec_total.average, prec_total.average))\n    print(""total_loss: {:.3f}, loss_xy: {:.3f}, loss_wh: {:.3f}, loss_conf: {:.3f}, loss_class: {:.3f}"".format(\n        val_loss_total.average, val_loss_xy.average, val_loss_wh.average, val_loss_conf.average, val_loss_class.average\n    ))\n'"
get_kmeans.py,0,"b'# coding: utf-8\n# This script is modified from https://github.com/lars76/kmeans-anchor-boxes\n\nfrom __future__ import division, print_function\n\nimport numpy as np\n\ndef iou(box, clusters):\n    """"""\n    Calculates the Intersection over Union (IoU) between a box and k clusters.\n    param:\n        box: tuple or array, shifted to the origin (i. e. width and height)\n        clusters: numpy array of shape (k, 2) where k is the number of clusters\n    return:\n        numpy array of shape (k, 0) where k is the number of clusters\n    """"""\n    x = np.minimum(clusters[:, 0], box[0])\n    y = np.minimum(clusters[:, 1], box[1])\n    if np.count_nonzero(x == 0) > 0 or np.count_nonzero(y == 0) > 0:\n        raise ValueError(""Box has no area"")\n\n    intersection = x * y\n    box_area = box[0] * box[1]\n    cluster_area = clusters[:, 0] * clusters[:, 1]\n\n    iou_ = np.true_divide(intersection, box_area + cluster_area - intersection + 1e-10)\n    # iou_ = intersection / (box_area + cluster_area - intersection + 1e-10)\n\n    return iou_\n\n\ndef avg_iou(boxes, clusters):\n    """"""\n    Calculates the average Intersection over Union (IoU) between a numpy array of boxes and k clusters.\n    param:\n        boxes: numpy array of shape (r, 2), where r is the number of rows\n        clusters: numpy array of shape (k, 2) where k is the number of clusters\n    return:\n        average IoU as a single float\n    """"""\n    return np.mean([np.max(iou(boxes[i], clusters)) for i in range(boxes.shape[0])])\n\n\ndef translate_boxes(boxes):\n    """"""\n    Translates all the boxes to the origin.\n    param:\n        boxes: numpy array of shape (r, 4)\n    return:\n    numpy array of shape (r, 2)\n    """"""\n    new_boxes = boxes.copy()\n    for row in range(new_boxes.shape[0]):\n        new_boxes[row][2] = np.abs(new_boxes[row][2] - new_boxes[row][0])\n        new_boxes[row][3] = np.abs(new_boxes[row][3] - new_boxes[row][1])\n    return np.delete(new_boxes, [0, 1], axis=1)\n\n\ndef kmeans(boxes, k, dist=np.median):\n    """"""\n    Calculates k-means clustering with the Intersection over Union (IoU) metric.\n    param:\n        boxes: numpy array of shape (r, 2), where r is the number of rows\n        k: number of clusters\n        dist: distance function\n    return:\n        numpy array of shape (k, 2)\n    """"""\n    rows = boxes.shape[0]\n\n    distances = np.empty((rows, k))\n    last_clusters = np.zeros((rows,))\n\n    np.random.seed()\n\n    # the Forgy method will fail if the whole array contains the same rows\n    clusters = boxes[np.random.choice(rows, k, replace=False)]\n\n    while True:\n        for row in range(rows):\n            distances[row] = 1 - iou(boxes[row], clusters)\n\n        nearest_clusters = np.argmin(distances, axis=1)\n\n        if (last_clusters == nearest_clusters).all():\n            break\n\n        for cluster in range(k):\n            clusters[cluster] = dist(boxes[nearest_clusters == cluster], axis=0)\n\n        last_clusters = nearest_clusters\n\n    return clusters\n\n\ndef parse_anno(annotation_path, target_size=None):\n    anno = open(annotation_path, \'r\')\n    result = []\n    for line in anno:\n        s = line.strip().split(\' \')\n        img_w = int(s[2])\n        img_h = int(s[3])\n        s = s[4:]\n        box_cnt = len(s) // 5\n        for i in range(box_cnt):\n            x_min, y_min, x_max, y_max = float(s[i*5+1]), float(s[i*5+2]), float(s[i*5+3]), float(s[i*5+4])\n            width = x_max - x_min\n            height = y_max - y_min\n            assert width > 0\n            assert height > 0\n            # use letterbox resize, i.e. keep the original aspect ratio\n            # get k-means anchors on the resized target image size\n            if target_size is not None:\n                resize_ratio = min(target_size[0] / img_w, target_size[1] / img_h)\n                width *= resize_ratio\n                height *= resize_ratio\n                result.append([width, height])\n            # get k-means anchors on the original image size\n            else:\n                result.append([width, height])\n    result = np.asarray(result)\n    return result\n\n\ndef get_kmeans(anno, cluster_num=9):\n\n    anchors = kmeans(anno, cluster_num)\n    ave_iou = avg_iou(anno, anchors)\n\n    anchors = anchors.astype(\'int\').tolist()\n\n    anchors = sorted(anchors, key=lambda x: x[0] * x[1])\n\n    return anchors, ave_iou\n\n\nif __name__ == \'__main__\':\n    # target resize format: [width, height]\n    # if target_resize is speficied, the anchors are on the resized image scale\n    # if target_resize is set to None, the anchors are on the original image scale\n    target_size = [416, 416]\n    annotation_path = ""train.txt""\n    anno_result = parse_anno(annotation_path, target_size=target_size)\n    anchors, ave_iou = get_kmeans(anno_result, 9)\n\n    anchor_string = \'\'\n    for anchor in anchors:\n        anchor_string += \'{},{}, \'.format(anchor[0], anchor[1])\n    anchor_string = anchor_string[:-2]\n\n    print(\'anchors are:\')\n    print(anchor_string)\n    print(\'the average iou is:\')\n    print(ave_iou)\n\n'"
model.py,75,"b""# coding=utf-8\n# for better understanding about yolov3 architecture, refer to this website (in Chinese):\n# https://blog.csdn.net/leviopku/article/details/82660381\n\nfrom __future__ import division, print_function\n\nimport tensorflow as tf\nslim = tf.contrib.slim\n\nfrom utils.layer_utils import conv2d, darknet53_body, yolo_block, upsample_layer\n\nclass yolov3(object):\n\n    def __init__(self, class_num, anchors, use_label_smooth=False, use_focal_loss=False, batch_norm_decay=0.999, weight_decay=5e-4, use_static_shape=True):\n\n        # self.anchors = [[10, 13], [16, 30], [33, 23],\n                         # [30, 61], [62, 45], [59,  119],\n                         # [116, 90], [156, 198], [373,326]]\n        self.class_num = class_num\n        self.anchors = anchors\n        self.batch_norm_decay = batch_norm_decay\n        self.use_label_smooth = use_label_smooth\n        self.use_focal_loss = use_focal_loss\n        self.weight_decay = weight_decay\n        # inference speed optimization\n        # if `use_static_shape` is True, use tensor.get_shape(), otherwise use tf.shape(tensor)\n        # static_shape is slightly faster\n        self.use_static_shape = use_static_shape\n\n    def forward(self, inputs, is_training=False, reuse=False):\n        # the input img_size, form: [height, weight]\n        # it will be used later\n        self.img_size = tf.shape(inputs)[1:3]\n        # set batch norm params\n        batch_norm_params = {\n            'decay': self.batch_norm_decay,\n            'epsilon': 1e-05,\n            'scale': True,\n            'is_training': is_training,\n            'fused': None,  # Use fused batch norm if possible.\n        }\n\n        with slim.arg_scope([slim.conv2d, slim.batch_norm], reuse=reuse):\n            with slim.arg_scope([slim.conv2d], \n                                normalizer_fn=slim.batch_norm,\n                                normalizer_params=batch_norm_params,\n                                biases_initializer=None,\n                                activation_fn=lambda x: tf.nn.leaky_relu(x, alpha=0.1),\n                                weights_regularizer=slim.l2_regularizer(self.weight_decay)):\n                with tf.variable_scope('darknet53_body'):\n                    route_1, route_2, route_3 = darknet53_body(inputs)\n\n                with tf.variable_scope('yolov3_head'):\n                    inter1, net = yolo_block(route_3, 512)\n                    feature_map_1 = slim.conv2d(net, 3 * (5 + self.class_num), 1,\n                                                stride=1, normalizer_fn=None,\n                                                activation_fn=None, biases_initializer=tf.zeros_initializer())\n                    feature_map_1 = tf.identity(feature_map_1, name='feature_map_1')\n\n                    inter1 = conv2d(inter1, 256, 1)\n                    inter1 = upsample_layer(inter1, route_2.get_shape().as_list() if self.use_static_shape else tf.shape(route_2))\n                    concat1 = tf.concat([inter1, route_2], axis=3)\n\n                    inter2, net = yolo_block(concat1, 256)\n                    feature_map_2 = slim.conv2d(net, 3 * (5 + self.class_num), 1,\n                                                stride=1, normalizer_fn=None,\n                                                activation_fn=None, biases_initializer=tf.zeros_initializer())\n                    feature_map_2 = tf.identity(feature_map_2, name='feature_map_2')\n\n                    inter2 = conv2d(inter2, 128, 1)\n                    inter2 = upsample_layer(inter2, route_1.get_shape().as_list() if self.use_static_shape else tf.shape(route_1))\n                    concat2 = tf.concat([inter2, route_1], axis=3)\n\n                    _, feature_map_3 = yolo_block(concat2, 128)\n                    feature_map_3 = slim.conv2d(feature_map_3, 3 * (5 + self.class_num), 1,\n                                                stride=1, normalizer_fn=None,\n                                                activation_fn=None, biases_initializer=tf.zeros_initializer())\n                    feature_map_3 = tf.identity(feature_map_3, name='feature_map_3')\n\n            return feature_map_1, feature_map_2, feature_map_3\n\n    def reorg_layer(self, feature_map, anchors):\n        '''\n        feature_map: a feature_map from [feature_map_1, feature_map_2, feature_map_3] returned\n            from `forward` function\n        anchors: shape: [3, 2]\n        '''\n        # NOTE: size in [h, w] format! don't get messed up!\n        grid_size = feature_map.get_shape().as_list()[1:3] if self.use_static_shape else tf.shape(feature_map)[1:3]  # [13, 13]\n        # the downscale ratio in height and weight\n        ratio = tf.cast(self.img_size / grid_size, tf.float32)\n        # rescale the anchors to the feature_map\n        # NOTE: the anchor is in [w, h] format!\n        rescaled_anchors = [(anchor[0] / ratio[1], anchor[1] / ratio[0]) for anchor in anchors]\n\n        feature_map = tf.reshape(feature_map, [-1, grid_size[0], grid_size[1], 3, 5 + self.class_num])\n\n        # split the feature_map along the last dimension\n        # shape info: take 416x416 input image and the 13*13 feature_map for example:\n        # box_centers: [N, 13, 13, 3, 2] last_dimension: [center_x, center_y]\n        # box_sizes: [N, 13, 13, 3, 2] last_dimension: [width, height]\n        # conf_logits: [N, 13, 13, 3, 1]\n        # prob_logits: [N, 13, 13, 3, class_num]\n        box_centers, box_sizes, conf_logits, prob_logits = tf.split(feature_map, [2, 2, 1, self.class_num], axis=-1)\n        box_centers = tf.nn.sigmoid(box_centers)\n\n        # use some broadcast tricks to get the mesh coordinates\n        grid_x = tf.range(grid_size[1], dtype=tf.int32)\n        grid_y = tf.range(grid_size[0], dtype=tf.int32)\n        grid_x, grid_y = tf.meshgrid(grid_x, grid_y)\n        x_offset = tf.reshape(grid_x, (-1, 1))\n        y_offset = tf.reshape(grid_y, (-1, 1))\n        x_y_offset = tf.concat([x_offset, y_offset], axis=-1)\n        # shape: [13, 13, 1, 2]\n        x_y_offset = tf.cast(tf.reshape(x_y_offset, [grid_size[0], grid_size[1], 1, 2]), tf.float32)\n\n        # get the absolute box coordinates on the feature_map \n        box_centers = box_centers + x_y_offset\n        # rescale to the original image scale\n        box_centers = box_centers * ratio[::-1]\n\n        # avoid getting possible nan value with tf.clip_by_value\n        box_sizes = tf.exp(box_sizes) * rescaled_anchors\n        # box_sizes = tf.clip_by_value(tf.exp(box_sizes), 1e-9, 100) * rescaled_anchors\n        # rescale to the original image scale\n        box_sizes = box_sizes * ratio[::-1]\n\n        # shape: [N, 13, 13, 3, 4]\n        # last dimension: (center_x, center_y, w, h)\n        boxes = tf.concat([box_centers, box_sizes], axis=-1)\n\n        # shape:\n        # x_y_offset: [13, 13, 1, 2]\n        # boxes: [N, 13, 13, 3, 4], rescaled to the original image scale\n        # conf_logits: [N, 13, 13, 3, 1]\n        # prob_logits: [N, 13, 13, 3, class_num]\n        return x_y_offset, boxes, conf_logits, prob_logits\n\n\n    def predict(self, feature_maps):\n        '''\n        Receive the returned feature_maps from `forward` function,\n        the produce the output predictions at the test stage.\n        '''\n        feature_map_1, feature_map_2, feature_map_3 = feature_maps\n\n        feature_map_anchors = [(feature_map_1, self.anchors[6:9]),\n                               (feature_map_2, self.anchors[3:6]),\n                               (feature_map_3, self.anchors[0:3])]\n        reorg_results = [self.reorg_layer(feature_map, anchors) for (feature_map, anchors) in feature_map_anchors]\n\n        def _reshape(result):\n            x_y_offset, boxes, conf_logits, prob_logits = result\n            grid_size = x_y_offset.get_shape().as_list()[:2] if self.use_static_shape else tf.shape(x_y_offset)[:2]\n            boxes = tf.reshape(boxes, [-1, grid_size[0] * grid_size[1] * 3, 4])\n            conf_logits = tf.reshape(conf_logits, [-1, grid_size[0] * grid_size[1] * 3, 1])\n            prob_logits = tf.reshape(prob_logits, [-1, grid_size[0] * grid_size[1] * 3, self.class_num])\n            # shape: (take 416*416 input image and feature_map_1 for example)\n            # boxes: [N, 13*13*3, 4]\n            # conf_logits: [N, 13*13*3, 1]\n            # prob_logits: [N, 13*13*3, class_num]\n            return boxes, conf_logits, prob_logits\n\n        boxes_list, confs_list, probs_list = [], [], []\n        for result in reorg_results:\n            boxes, conf_logits, prob_logits = _reshape(result)\n            confs = tf.sigmoid(conf_logits)\n            probs = tf.sigmoid(prob_logits)\n            boxes_list.append(boxes)\n            confs_list.append(confs)\n            probs_list.append(probs)\n        \n        # collect results on three scales\n        # take 416*416 input image for example:\n        # shape: [N, (13*13+26*26+52*52)*3, 4]\n        boxes = tf.concat(boxes_list, axis=1)\n        # shape: [N, (13*13+26*26+52*52)*3, 1]\n        confs = tf.concat(confs_list, axis=1)\n        # shape: [N, (13*13+26*26+52*52)*3, class_num]\n        probs = tf.concat(probs_list, axis=1)\n\n        center_x, center_y, width, height = tf.split(boxes, [1, 1, 1, 1], axis=-1)\n        x_min = center_x - width / 2\n        y_min = center_y - height / 2\n        x_max = center_x + width / 2\n        y_max = center_y + height / 2\n\n        boxes = tf.concat([x_min, y_min, x_max, y_max], axis=-1)\n\n        return boxes, confs, probs\n    \n    def loss_layer(self, feature_map_i, y_true, anchors):\n        '''\n        calc loss function from a certain scale\n        input:\n            feature_map_i: feature maps of a certain scale. shape: [N, 13, 13, 3*(5 + num_class)] etc.\n            y_true: y_ture from a certain scale. shape: [N, 13, 13, 3, 5 + num_class + 1] etc.\n            anchors: shape [9, 2]\n        '''\n        \n        # size in [h, w] format! don't get messed up!\n        grid_size = tf.shape(feature_map_i)[1:3]\n        # the downscale ratio in height and weight\n        ratio = tf.cast(self.img_size / grid_size, tf.float32)\n        # N: batch_size\n        N = tf.cast(tf.shape(feature_map_i)[0], tf.float32)\n\n        x_y_offset, pred_boxes, pred_conf_logits, pred_prob_logits = self.reorg_layer(feature_map_i, anchors)\n\n        ###########\n        # get mask\n        ###########\n\n        # shape: take 416x416 input image and 13*13 feature_map for example:\n        # [N, 13, 13, 3, 1]\n        object_mask = y_true[..., 4:5]\n\n        # the calculation of ignore mask if referred from\n        # https://github.com/pjreddie/darknet/blob/master/src/yolo_layer.c#L179\n        ignore_mask = tf.TensorArray(tf.float32, size=0, dynamic_size=True)\n        def loop_cond(idx, ignore_mask):\n            return tf.less(idx, tf.cast(N, tf.int32))\n        def loop_body(idx, ignore_mask):\n            # shape: [13, 13, 3, 4] & [13, 13, 3]  ==>  [V, 4]\n            # V: num of true gt box of each image in a batch\n            valid_true_boxes = tf.boolean_mask(y_true[idx, ..., 0:4], tf.cast(object_mask[idx, ..., 0], 'bool'))\n            # shape: [13, 13, 3, 4] & [V, 4] ==> [13, 13, 3, V]\n            iou = self.box_iou(pred_boxes[idx], valid_true_boxes)\n            # shape: [13, 13, 3]\n            best_iou = tf.reduce_max(iou, axis=-1)\n            # shape: [13, 13, 3]\n            ignore_mask_tmp = tf.cast(best_iou < 0.5, tf.float32)\n            # finally will be shape: [N, 13, 13, 3]\n            ignore_mask = ignore_mask.write(idx, ignore_mask_tmp)\n            return idx + 1, ignore_mask\n        _, ignore_mask = tf.while_loop(cond=loop_cond, body=loop_body, loop_vars=[0, ignore_mask])\n        ignore_mask = ignore_mask.stack()\n        # shape: [N, 13, 13, 3, 1]\n        ignore_mask = tf.expand_dims(ignore_mask, -1)\n\n        # shape: [N, 13, 13, 3, 2]\n        pred_box_xy = pred_boxes[..., 0:2]\n        pred_box_wh = pred_boxes[..., 2:4]\n\n        # get xy coordinates in one cell from the feature_map\n        # numerical range: 0 ~ 1\n        # shape: [N, 13, 13, 3, 2]\n        true_xy = y_true[..., 0:2] / ratio[::-1] - x_y_offset\n        pred_xy = pred_box_xy / ratio[::-1] - x_y_offset\n\n        # get_tw_th\n        # numerical range: 0 ~ 1\n        # shape: [N, 13, 13, 3, 2]\n        true_tw_th = y_true[..., 2:4] / anchors\n        pred_tw_th = pred_box_wh / anchors\n        # for numerical stability\n        true_tw_th = tf.where(condition=tf.equal(true_tw_th, 0),\n                              x=tf.ones_like(true_tw_th), y=true_tw_th)\n        pred_tw_th = tf.where(condition=tf.equal(pred_tw_th, 0),\n                              x=tf.ones_like(pred_tw_th), y=pred_tw_th)\n        true_tw_th = tf.log(tf.clip_by_value(true_tw_th, 1e-9, 1e9))\n        pred_tw_th = tf.log(tf.clip_by_value(pred_tw_th, 1e-9, 1e9))\n\n        # box size punishment: \n        # box with smaller area has bigger weight. This is taken from the yolo darknet C source code.\n        # shape: [N, 13, 13, 3, 1]\n        box_loss_scale = 2. - (y_true[..., 2:3] / tf.cast(self.img_size[1], tf.float32)) * (y_true[..., 3:4] / tf.cast(self.img_size[0], tf.float32))\n\n        ############\n        # loss_part\n        ############\n        # mix_up weight\n        # [N, 13, 13, 3, 1]\n        mix_w = y_true[..., -1:]\n        # shape: [N, 13, 13, 3, 1]\n        xy_loss = tf.reduce_sum(tf.square(true_xy - pred_xy) * object_mask * box_loss_scale * mix_w) / N\n        wh_loss = tf.reduce_sum(tf.square(true_tw_th - pred_tw_th) * object_mask * box_loss_scale * mix_w) / N\n\n        # shape: [N, 13, 13, 3, 1]\n        conf_pos_mask = object_mask\n        conf_neg_mask = (1 - object_mask) * ignore_mask\n        conf_loss_pos = conf_pos_mask * tf.nn.sigmoid_cross_entropy_with_logits(labels=object_mask, logits=pred_conf_logits)\n        conf_loss_neg = conf_neg_mask * tf.nn.sigmoid_cross_entropy_with_logits(labels=object_mask, logits=pred_conf_logits)\n        # TODO: may need to balance the pos-neg by multiplying some weights\n        conf_loss = conf_loss_pos + conf_loss_neg\n        if self.use_focal_loss:\n            alpha = 1.0\n            gamma = 2.0\n            # TODO: alpha should be a mask array if needed\n            focal_mask = alpha * tf.pow(tf.abs(object_mask - tf.sigmoid(pred_conf_logits)), gamma)\n            conf_loss *= focal_mask\n        conf_loss = tf.reduce_sum(conf_loss * mix_w) / N\n\n        # shape: [N, 13, 13, 3, 1]\n        # whether to use label smooth\n        if self.use_label_smooth:\n            delta = 0.01\n            label_target = (1 - delta) * y_true[..., 5:-1] + delta * 1. / self.class_num\n        else:\n            label_target = y_true[..., 5:-1]\n        class_loss = object_mask * tf.nn.sigmoid_cross_entropy_with_logits(labels=label_target, logits=pred_prob_logits) * mix_w\n        class_loss = tf.reduce_sum(class_loss) / N\n\n        return xy_loss, wh_loss, conf_loss, class_loss\n    \n\n    def box_iou(self, pred_boxes, valid_true_boxes):\n        '''\n        param:\n            pred_boxes: [13, 13, 3, 4], (center_x, center_y, w, h)\n            valid_true: [V, 4]\n        '''\n\n        # [13, 13, 3, 2]\n        pred_box_xy = pred_boxes[..., 0:2]\n        pred_box_wh = pred_boxes[..., 2:4]\n\n        # shape: [13, 13, 3, 1, 2]\n        pred_box_xy = tf.expand_dims(pred_box_xy, -2)\n        pred_box_wh = tf.expand_dims(pred_box_wh, -2)\n\n        # [V, 2]\n        true_box_xy = valid_true_boxes[:, 0:2]\n        true_box_wh = valid_true_boxes[:, 2:4]\n\n        # [13, 13, 3, 1, 2] & [V, 2] ==> [13, 13, 3, V, 2]\n        intersect_mins = tf.maximum(pred_box_xy - pred_box_wh / 2.,\n                                    true_box_xy - true_box_wh / 2.)\n        intersect_maxs = tf.minimum(pred_box_xy + pred_box_wh / 2.,\n                                    true_box_xy + true_box_wh / 2.)\n        intersect_wh = tf.maximum(intersect_maxs - intersect_mins, 0.)\n\n        # shape: [13, 13, 3, V]\n        intersect_area = intersect_wh[..., 0] * intersect_wh[..., 1]\n        # shape: [13, 13, 3, 1]\n        pred_box_area = pred_box_wh[..., 0] * pred_box_wh[..., 1]\n        # shape: [V]\n        true_box_area = true_box_wh[..., 0] * true_box_wh[..., 1]\n        # shape: [1, V]\n        true_box_area = tf.expand_dims(true_box_area, axis=0)\n\n        # [13, 13, 3, V]\n        iou = intersect_area / (pred_box_area + true_box_area - intersect_area + 1e-10)\n\n        return iou\n\n    \n    def compute_loss(self, y_pred, y_true):\n        '''\n        param:\n            y_pred: returned feature_map list by `forward` function: [feature_map_1, feature_map_2, feature_map_3]\n            y_true: input y_true by the tf.data pipeline\n        '''\n        loss_xy, loss_wh, loss_conf, loss_class = 0., 0., 0., 0.\n        anchor_group = [self.anchors[6:9], self.anchors[3:6], self.anchors[0:3]]\n\n        # calc loss in 3 scales\n        for i in range(len(y_pred)):\n            result = self.loss_layer(y_pred[i], y_true[i], anchor_group[i])\n            loss_xy += result[0]\n            loss_wh += result[1]\n            loss_conf += result[2]\n            loss_class += result[3]\n        total_loss = loss_xy + loss_wh + loss_conf + loss_class\n        return [total_loss, loss_xy, loss_wh, loss_conf, loss_class]\n"""
test_single_image.py,4,"b'# coding: utf-8\n\nfrom __future__ import division, print_function\n\nimport tensorflow as tf\nimport numpy as np\nimport argparse\nimport cv2\n\nfrom utils.misc_utils import parse_anchors, read_class_names\nfrom utils.nms_utils import gpu_nms\nfrom utils.plot_utils import get_color_table, plot_one_box\nfrom utils.data_aug import letterbox_resize\n\nfrom model import yolov3\n\nparser = argparse.ArgumentParser(description=""YOLO-V3 test single image test procedure."")\nparser.add_argument(""input_image"", type=str,\n                    help=""The path of the input image."")\nparser.add_argument(""--anchor_path"", type=str, default=""./data/yolo_anchors.txt"",\n                    help=""The path of the anchor txt file."")\nparser.add_argument(""--new_size"", nargs=\'*\', type=int, default=[416, 416],\n                    help=""Resize the input image with `new_size`, size format: [width, height]"")\nparser.add_argument(""--letterbox_resize"", type=lambda x: (str(x).lower() == \'true\'), default=True,\n                    help=""Whether to use the letterbox resize."")\nparser.add_argument(""--class_name_path"", type=str, default=""./data/coco.names"",\n                    help=""The path of the class names."")\nparser.add_argument(""--restore_path"", type=str, default=""./data/darknet_weights/yolov3.ckpt"",\n                    help=""The path of the weights to restore."")\nargs = parser.parse_args()\n\nargs.anchors = parse_anchors(args.anchor_path)\nargs.classes = read_class_names(args.class_name_path)\nargs.num_class = len(args.classes)\n\ncolor_table = get_color_table(args.num_class)\n\nimg_ori = cv2.imread(args.input_image)\nif args.letterbox_resize:\n    img, resize_ratio, dw, dh = letterbox_resize(img_ori, args.new_size[0], args.new_size[1])\nelse:\n    height_ori, width_ori = img_ori.shape[:2]\n    img = cv2.resize(img_ori, tuple(args.new_size))\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\nimg = np.asarray(img, np.float32)\nimg = img[np.newaxis, :] / 255.\n\nwith tf.Session() as sess:\n    input_data = tf.placeholder(tf.float32, [1, args.new_size[1], args.new_size[0], 3], name=\'input_data\')\n    yolo_model = yolov3(args.num_class, args.anchors)\n    with tf.variable_scope(\'yolov3\'):\n        pred_feature_maps = yolo_model.forward(input_data, False)\n    pred_boxes, pred_confs, pred_probs = yolo_model.predict(pred_feature_maps)\n\n    pred_scores = pred_confs * pred_probs\n\n    boxes, scores, labels = gpu_nms(pred_boxes, pred_scores, args.num_class, max_boxes=200, score_thresh=0.3, nms_thresh=0.45)\n\n    saver = tf.train.Saver()\n    saver.restore(sess, args.restore_path)\n\n    boxes_, scores_, labels_ = sess.run([boxes, scores, labels], feed_dict={input_data: img})\n\n    # rescale the coordinates to the original image\n    if args.letterbox_resize:\n        boxes_[:, [0, 2]] = (boxes_[:, [0, 2]] - dw) / resize_ratio\n        boxes_[:, [1, 3]] = (boxes_[:, [1, 3]] - dh) / resize_ratio\n    else:\n        boxes_[:, [0, 2]] *= (width_ori/float(args.new_size[0]))\n        boxes_[:, [1, 3]] *= (height_ori/float(args.new_size[1]))\n\n    print(""box coords:"")\n    print(boxes_)\n    print(\'*\' * 30)\n    print(""scores:"")\n    print(scores_)\n    print(\'*\' * 30)\n    print(""labels:"")\n    print(labels_)\n\n    for i in range(len(boxes_)):\n        x0, y0, x1, y1 = boxes_[i]\n        plot_one_box(img_ori, [x0, y0, x1, y1], label=args.classes[labels_[i]] + \', {:.2f}%\'.format(scores_[i] * 100), color=color_table[labels_[i]])\n    cv2.imshow(\'Detection result\', img_ori)\n    cv2.imwrite(\'detection_result.jpg\', img_ori)\n    cv2.waitKey(0)\n'"
train.py,38,"b'# coding: utf-8\n\nfrom __future__ import division, print_function\n\nimport tensorflow as tf\nimport numpy as np\nimport logging\nfrom tqdm import trange\n\nimport args\n\nfrom utils.data_utils import get_batch_data\nfrom utils.misc_utils import shuffle_and_overwrite, make_summary, config_learning_rate, config_optimizer, AverageMeter\nfrom utils.eval_utils import evaluate_on_cpu, evaluate_on_gpu, get_preds_gpu, voc_eval, parse_gt_rec\nfrom utils.nms_utils import gpu_nms\n\nfrom model import yolov3\n\n# setting loggers\nlogging.basicConfig(level=logging.DEBUG, format=\'%(asctime)s %(levelname)s %(message)s\',\n                    datefmt=\'%a, %d %b %Y %H:%M:%S\', filename=args.progress_log_path, filemode=\'w\')\n\n# setting placeholders\nis_training = tf.placeholder(tf.bool, name=""phase_train"")\nhandle_flag = tf.placeholder(tf.string, [], name=\'iterator_handle_flag\')\n# register the gpu nms operation here for the following evaluation scheme\npred_boxes_flag = tf.placeholder(tf.float32, [1, None, None])\npred_scores_flag = tf.placeholder(tf.float32, [1, None, None])\ngpu_nms_op = gpu_nms(pred_boxes_flag, pred_scores_flag, args.class_num, args.nms_topk, args.score_threshold, args.nms_threshold)\n\n##################\n# tf.data pipeline\n##################\ntrain_dataset = tf.data.TextLineDataset(args.train_file)\ntrain_dataset = train_dataset.shuffle(args.train_img_cnt)\ntrain_dataset = train_dataset.batch(args.batch_size)\ntrain_dataset = train_dataset.map(\n    lambda x: tf.py_func(get_batch_data,\n                         inp=[x, args.class_num, args.img_size, args.anchors, \'train\', args.multi_scale_train, args.use_mix_up, args.letterbox_resize],\n                         Tout=[tf.int64, tf.float32, tf.float32, tf.float32, tf.float32]),\n    num_parallel_calls=args.num_threads\n)\ntrain_dataset = train_dataset.prefetch(args.prefetech_buffer)\n\nval_dataset = tf.data.TextLineDataset(args.val_file)\nval_dataset = val_dataset.batch(1)\nval_dataset = val_dataset.map(\n    lambda x: tf.py_func(get_batch_data,\n                         inp=[x, args.class_num, args.img_size, args.anchors, \'val\', False, False, args.letterbox_resize],\n                         Tout=[tf.int64, tf.float32, tf.float32, tf.float32, tf.float32]),\n    num_parallel_calls=args.num_threads\n)\nval_dataset.prefetch(args.prefetech_buffer)\n\niterator = tf.data.Iterator.from_structure(train_dataset.output_types, train_dataset.output_shapes)\ntrain_init_op = iterator.make_initializer(train_dataset)\nval_init_op = iterator.make_initializer(val_dataset)\n\n# get an element from the chosen dataset iterator\nimage_ids, image, y_true_13, y_true_26, y_true_52 = iterator.get_next()\ny_true = [y_true_13, y_true_26, y_true_52]\n\n# tf.data pipeline will lose the data `static` shape, so we need to set it manually\nimage_ids.set_shape([None])\nimage.set_shape([None, None, None, 3])\nfor y in y_true:\n    y.set_shape([None, None, None, None, None])\n\n##################\n# Model definition\n##################\nyolo_model = yolov3(args.class_num, args.anchors, args.use_label_smooth, args.use_focal_loss, args.batch_norm_decay, args.weight_decay, use_static_shape=False)\nwith tf.variable_scope(\'yolov3\'):\n    pred_feature_maps = yolo_model.forward(image, is_training=is_training)\nloss = yolo_model.compute_loss(pred_feature_maps, y_true)\ny_pred = yolo_model.predict(pred_feature_maps)\n\nl2_loss = tf.losses.get_regularization_loss()\n\n# setting restore parts and vars to update\nsaver_to_restore = tf.train.Saver(var_list=tf.contrib.framework.get_variables_to_restore(include=args.restore_include, exclude=args.restore_exclude))\nupdate_vars = tf.contrib.framework.get_variables_to_restore(include=args.update_part)\n\ntf.summary.scalar(\'train_batch_statistics/total_loss\', loss[0])\ntf.summary.scalar(\'train_batch_statistics/loss_xy\', loss[1])\ntf.summary.scalar(\'train_batch_statistics/loss_wh\', loss[2])\ntf.summary.scalar(\'train_batch_statistics/loss_conf\', loss[3])\ntf.summary.scalar(\'train_batch_statistics/loss_class\', loss[4])\ntf.summary.scalar(\'train_batch_statistics/loss_l2\', l2_loss)\ntf.summary.scalar(\'train_batch_statistics/loss_ratio\', l2_loss / loss[0])\n\nglobal_step = tf.Variable(float(args.global_step), trainable=False, collections=[tf.GraphKeys.LOCAL_VARIABLES])\nif args.use_warm_up:\n    learning_rate = tf.cond(tf.less(global_step, args.train_batch_num * args.warm_up_epoch), \n                            lambda: args.learning_rate_init * global_step / (args.train_batch_num * args.warm_up_epoch),\n                            lambda: config_learning_rate(args, global_step - args.train_batch_num * args.warm_up_epoch))\nelse:\n    learning_rate = config_learning_rate(args, global_step)\ntf.summary.scalar(\'learning_rate\', learning_rate)\n\nif not args.save_optimizer:\n    saver_to_save = tf.train.Saver()\n    saver_best = tf.train.Saver()\n\noptimizer = config_optimizer(args.optimizer_name, learning_rate)\n\n# set dependencies for BN ops\nupdate_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS)\nwith tf.control_dependencies(update_ops):\n    # train_op = optimizer.minimize(loss[0] + l2_loss, var_list=update_vars, global_step=global_step)\n    # apply gradient clip to avoid gradient exploding\n    gvs = optimizer.compute_gradients(loss[0] + l2_loss, var_list=update_vars)\n    clip_grad_var = [gv if gv[0] is None else [\n          tf.clip_by_norm(gv[0], 100.), gv[1]] for gv in gvs]\n    train_op = optimizer.apply_gradients(clip_grad_var, global_step=global_step)\n\nif args.save_optimizer:\n    print(\'Saving optimizer parameters to checkpoint! Remember to restore the global_step in the fine-tuning afterwards.\')\n    saver_to_save = tf.train.Saver()\n    saver_best = tf.train.Saver()\n\nwith tf.Session() as sess:\n    sess.run([tf.global_variables_initializer(), tf.local_variables_initializer()])\n    saver_to_restore.restore(sess, args.restore_path)\n    merged = tf.summary.merge_all()\n    writer = tf.summary.FileWriter(args.log_dir, sess.graph)\n\n    print(\'\\n----------- start to train -----------\\n\')\n\n    best_mAP = -np.Inf\n\n    for epoch in range(args.total_epoches):\n\n        sess.run(train_init_op)\n        loss_total, loss_xy, loss_wh, loss_conf, loss_class = AverageMeter(), AverageMeter(), AverageMeter(), AverageMeter(), AverageMeter()\n\n        for i in trange(args.train_batch_num):\n            _, summary, __y_pred, __y_true, __loss, __global_step, __lr = sess.run(\n                [train_op, merged, y_pred, y_true, loss, global_step, learning_rate],\n                feed_dict={is_training: True})\n\n            writer.add_summary(summary, global_step=__global_step)\n\n            loss_total.update(__loss[0], len(__y_pred[0]))\n            loss_xy.update(__loss[1], len(__y_pred[0]))\n            loss_wh.update(__loss[2], len(__y_pred[0]))\n            loss_conf.update(__loss[3], len(__y_pred[0]))\n            loss_class.update(__loss[4], len(__y_pred[0]))\n\n            if __global_step % args.train_evaluation_step == 0 and __global_step > 0:\n                # recall, precision = evaluate_on_cpu(__y_pred, __y_true, args.class_num, args.nms_topk, args.score_threshold, args.nms_threshold)\n                recall, precision = evaluate_on_gpu(sess, gpu_nms_op, pred_boxes_flag, pred_scores_flag, __y_pred, __y_true, args.class_num, args.nms_threshold)\n\n                info = ""Epoch: {}, global_step: {} | loss: total: {:.2f}, xy: {:.2f}, wh: {:.2f}, conf: {:.2f}, class: {:.2f} | "".format(\n                        epoch, int(__global_step), loss_total.average, loss_xy.average, loss_wh.average, loss_conf.average, loss_class.average)\n                info += \'Last batch: rec: {:.3f}, prec: {:.3f} | lr: {:.5g}\'.format(recall, precision, __lr)\n                print(info)\n                logging.info(info)\n\n                writer.add_summary(make_summary(\'evaluation/train_batch_recall\', recall), global_step=__global_step)\n                writer.add_summary(make_summary(\'evaluation/train_batch_precision\', precision), global_step=__global_step)\n\n                if np.isnan(loss_total.average):\n                    print(\'****\' * 10)\n                    raise ArithmeticError(\n                        \'Gradient exploded! Please train again and you may need modify some parameters.\')\n\n        # NOTE: this is just demo. You can set the conditions when to save the weights.\n        if epoch % args.save_epoch == 0 and epoch > 0:\n            if loss_total.average <= 2.:\n                saver_to_save.save(sess, args.save_dir + \'model-epoch_{}_step_{}_loss_{:.4f}_lr_{:.5g}\'.format(epoch, int(__global_step), loss_total.average, __lr))\n\n        # switch to validation dataset for evaluation\n        if epoch % args.val_evaluation_epoch == 0 and epoch >= args.warm_up_epoch:\n            sess.run(val_init_op)\n\n            val_loss_total, val_loss_xy, val_loss_wh, val_loss_conf, val_loss_class = \\\n                AverageMeter(), AverageMeter(), AverageMeter(), AverageMeter(), AverageMeter()\n\n            val_preds = []\n\n            for j in trange(args.val_img_cnt):\n                __image_ids, __y_pred, __loss = sess.run([image_ids, y_pred, loss],\n                                                         feed_dict={is_training: False})\n                pred_content = get_preds_gpu(sess, gpu_nms_op, pred_boxes_flag, pred_scores_flag, __image_ids, __y_pred)\n                val_preds.extend(pred_content)\n                val_loss_total.update(__loss[0])\n                val_loss_xy.update(__loss[1])\n                val_loss_wh.update(__loss[2])\n                val_loss_conf.update(__loss[3])\n                val_loss_class.update(__loss[4])\n\n            # calc mAP\n            rec_total, prec_total, ap_total = AverageMeter(), AverageMeter(), AverageMeter()\n            gt_dict = parse_gt_rec(args.val_file, args.img_size, args.letterbox_resize)\n\n            info = \'======> Epoch: {}, global_step: {}, lr: {:.6g} <======\\n\'.format(epoch, __global_step, __lr)\n\n            for ii in range(args.class_num):\n                npos, nd, rec, prec, ap = voc_eval(gt_dict, val_preds, ii, iou_thres=args.eval_threshold, use_07_metric=args.use_voc_07_metric)\n                info += \'EVAL: Class {}: Recall: {:.4f}, Precision: {:.4f}, AP: {:.4f}\\n\'.format(ii, rec, prec, ap)\n                rec_total.update(rec, npos)\n                prec_total.update(prec, nd)\n                ap_total.update(ap, 1)\n\n            mAP = ap_total.average\n            info += \'EVAL: Recall: {:.4f}, Precison: {:.4f}, mAP: {:.4f}\\n\'.format(rec_total.average, prec_total.average, mAP)\n            info += \'EVAL: loss: total: {:.2f}, xy: {:.2f}, wh: {:.2f}, conf: {:.2f}, class: {:.2f}\\n\'.format(\n                val_loss_total.average, val_loss_xy.average, val_loss_wh.average, val_loss_conf.average, val_loss_class.average)\n            print(info)\n            logging.info(info)\n\n            if mAP > best_mAP:\n                best_mAP = mAP\n                saver_best.save(sess, args.save_dir + \'best_model_Epoch_{}_step_{}_mAP_{:.4f}_loss_{:.4f}_lr_{:.7g}\'.format(\n                                   epoch, int(__global_step), best_mAP, val_loss_total.average, __lr))\n\n            writer.add_summary(make_summary(\'evaluation/val_mAP\', mAP), global_step=epoch)\n            writer.add_summary(make_summary(\'evaluation/val_recall\', rec_total.average), global_step=epoch)\n            writer.add_summary(make_summary(\'evaluation/val_precision\', prec_total.average), global_step=epoch)\n            writer.add_summary(make_summary(\'validation_statistics/total_loss\', val_loss_total.average), global_step=epoch)\n            writer.add_summary(make_summary(\'validation_statistics/loss_xy\', val_loss_xy.average), global_step=epoch)\n            writer.add_summary(make_summary(\'validation_statistics/loss_wh\', val_loss_wh.average), global_step=epoch)\n            writer.add_summary(make_summary(\'validation_statistics/loss_conf\', val_loss_conf.average), global_step=epoch)\n            writer.add_summary(make_summary(\'validation_statistics/loss_class\', val_loss_class.average), global_step=epoch)\n\n'"
video_test.py,4,"b'# coding: utf-8\n\nfrom __future__ import division, print_function\n\nimport tensorflow as tf\nimport numpy as np\nimport argparse\nimport cv2\nimport time\n\nfrom utils.misc_utils import parse_anchors, read_class_names\nfrom utils.nms_utils import gpu_nms\nfrom utils.plot_utils import get_color_table, plot_one_box\nfrom utils.data_aug import letterbox_resize\n\nfrom model import yolov3\n\nparser = argparse.ArgumentParser(description=""YOLO-V3 video test procedure."")\nparser.add_argument(""input_video"", type=str,\n                    help=""The path of the input video."")\nparser.add_argument(""--anchor_path"", type=str, default=""./data/yolo_anchors.txt"",\n                    help=""The path of the anchor txt file."")\nparser.add_argument(""--new_size"", nargs=\'*\', type=int, default=[416, 416],\n                    help=""Resize the input image with `new_size`, size format: [width, height]"")\nparser.add_argument(""--letterbox_resize"", type=lambda x: (str(x).lower() == \'true\'), default=True,\n                    help=""Whether to use the letterbox resize."")\nparser.add_argument(""--class_name_path"", type=str, default=""./data/coco.names"",\n                    help=""The path of the class names."")\nparser.add_argument(""--restore_path"", type=str, default=""./data/darknet_weights/yolov3.ckpt"",\n                    help=""The path of the weights to restore."")\nparser.add_argument(""--save_video"", type=lambda x: (str(x).lower() == \'true\'), default=False,\n                    help=""Whether to save the video detection results."")\nargs = parser.parse_args()\n\nargs.anchors = parse_anchors(args.anchor_path)\nargs.classes = read_class_names(args.class_name_path)\nargs.num_class = len(args.classes)\n\ncolor_table = get_color_table(args.num_class)\n\nvid = cv2.VideoCapture(args.input_video)\nvideo_frame_cnt = int(vid.get(7))\nvideo_width = int(vid.get(3))\nvideo_height = int(vid.get(4))\nvideo_fps = int(vid.get(5))\n\nif args.save_video:\n    fourcc = cv2.VideoWriter_fourcc(\'m\', \'p\', \'4\', \'v\')\n    videoWriter = cv2.VideoWriter(\'video_result.mp4\', fourcc, video_fps, (video_width, video_height))\n\nwith tf.Session() as sess:\n    input_data = tf.placeholder(tf.float32, [1, args.new_size[1], args.new_size[0], 3], name=\'input_data\')\n    yolo_model = yolov3(args.num_class, args.anchors)\n    with tf.variable_scope(\'yolov3\'):\n        pred_feature_maps = yolo_model.forward(input_data, False)\n    pred_boxes, pred_confs, pred_probs = yolo_model.predict(pred_feature_maps)\n\n    pred_scores = pred_confs * pred_probs\n\n    boxes, scores, labels = gpu_nms(pred_boxes, pred_scores, args.num_class, max_boxes=200, score_thresh=0.3, nms_thresh=0.45)\n\n    saver = tf.train.Saver()\n    saver.restore(sess, args.restore_path)\n\n    for i in range(video_frame_cnt):\n        ret, img_ori = vid.read()\n        if args.letterbox_resize:\n            img, resize_ratio, dw, dh = letterbox_resize(img_ori, args.new_size[0], args.new_size[1])\n        else:\n            height_ori, width_ori = img_ori.shape[:2]\n            img = cv2.resize(img_ori, tuple(args.new_size))\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        img = np.asarray(img, np.float32)\n        img = img[np.newaxis, :] / 255.\n\n        start_time = time.time()\n        boxes_, scores_, labels_ = sess.run([boxes, scores, labels], feed_dict={input_data: img})\n        end_time = time.time()\n\n        # rescale the coordinates to the original image\n        if args.letterbox_resize:\n            boxes_[:, [0, 2]] = (boxes_[:, [0, 2]] - dw) / resize_ratio\n            boxes_[:, [1, 3]] = (boxes_[:, [1, 3]] - dh) / resize_ratio\n        else:\n            boxes_[:, [0, 2]] *= (width_ori/float(args.new_size[0]))\n            boxes_[:, [1, 3]] *= (height_ori/float(args.new_size[1]))\n\n\n        for i in range(len(boxes_)):\n            x0, y0, x1, y1 = boxes_[i]\n            plot_one_box(img_ori, [x0, y0, x1, y1], label=args.classes[labels_[i]] + \', {:.2f}%\'.format(scores_[i] * 100), color=color_table[labels_[i]])\n        cv2.putText(img_ori, \'{:.2f}ms\'.format((end_time - start_time) * 1000), (40, 40), 0,\n                    fontScale=1, color=(0, 255, 0), thickness=2)\n        cv2.imshow(\'image\', img_ori)\n        if args.save_video:\n            videoWriter.write(img_ori)\n        if cv2.waitKey(1) & 0xFF == ord(\'q\'):\n            break\n\n    vid.release()\n    if args.save_video:\n        videoWriter.release()\n'"
misc/parse_voc_xml.py,0,"b'# coding: utf-8\r\n\r\nimport xml.etree.ElementTree as ET\r\nimport os\r\n\r\nnames_dict = {}\r\ncnt = 0\r\nf = open(\'./voc_names.txt\', \'r\').readlines()\r\nfor line in f:\r\n    line = line.strip()\r\n    names_dict[line] = cnt\r\n    cnt += 1\r\n\r\nvoc_07 = \'/data/VOCdevkit/VOC2007\'\r\nvoc_12 = \'/data/VOCdevkit/VOC2012\'\r\n\r\nanno_path = [os.path.join(voc_07, \'Annotations\'), os.path.join(voc_12, \'Annotations\')]\r\nimg_path = [os.path.join(voc_07, \'JPEGImages\'), os.path.join(voc_12, \'JPEGImages\')]\r\n\r\ntrainval_path = [os.path.join(voc_07, \'ImageSets/Main/trainval.txt\'),\r\n                 os.path.join(voc_12, \'ImageSets/Main/trainval.txt\')]\r\ntest_path = [os.path.join(voc_07, \'ImageSets/Main/test.txt\')]\r\n\r\n\r\ndef parse_xml(path):\r\n    tree = ET.parse(path)\r\n    img_name = path.split(\'/\')[-1][:-4]\r\n    \r\n    height = tree.findtext(""./size/height"")\r\n    width = tree.findtext(""./size/width"")\r\n\r\n    objects = [img_name, width, height]\r\n\r\n    for obj in tree.findall(\'object\'):\r\n        difficult = obj.find(\'difficult\').text\r\n        if difficult == \'1\':\r\n            continue\r\n        name = obj.find(\'name\').text\r\n        bbox = obj.find(\'bndbox\')\r\n        xmin = bbox.find(\'xmin\').text\r\n        ymin = bbox.find(\'ymin\').text\r\n        xmax = bbox.find(\'xmax\').text\r\n        ymax = bbox.find(\'ymax\').text\r\n\r\n        name = str(names_dict[name])\r\n        objects.extend([name, xmin, ymin, xmax, ymax])\r\n    if len(objects) > 1:\r\n        return objects\r\n    else:\r\n        return None\r\n\r\ntest_cnt = 0\r\ndef gen_test_txt(txt_path):\r\n    global test_cnt\r\n    f = open(txt_path, \'w\')\r\n\r\n    for i, path in enumerate(test_path):\r\n        img_names = open(path, \'r\').readlines()\r\n        for img_name in img_names:\r\n            img_name = img_name.strip()\r\n            xml_path = anno_path[i] + \'/\' + img_name + \'.xml\'\r\n            objects = parse_xml(xml_path)\r\n            if objects:\r\n                objects[0] = img_path[i] + \'/\' + img_name + \'.jpg\'\r\n                if os.path.exists(objects[0]):\r\n                    objects.insert(0, str(test_cnt))\r\n                    test_cnt += 1\r\n                    objects = \' \'.join(objects) + \'\\n\'\r\n                    f.write(objects)\r\n    f.close()\r\n\r\n\r\ntrain_cnt = 0\r\ndef gen_train_txt(txt_path):\r\n    global train_cnt\r\n    f = open(txt_path, \'w\')\r\n\r\n    for i, path in enumerate(trainval_path):\r\n        img_names = open(path, \'r\').readlines()\r\n        for img_name in img_names:\r\n            img_name = img_name.strip()\r\n            xml_path = anno_path[i] + \'/\' + img_name + \'.xml\'\r\n            objects = parse_xml(xml_path)\r\n            if objects:\r\n                objects[0] = img_path[i] + \'/\' + img_name + \'.jpg\'\r\n                if os.path.exists(objects[0]):\r\n                    objects.insert(0, str(train_cnt))\r\n                    train_cnt += 1\r\n                    objects = \' \'.join(objects) + \'\\n\'\r\n                    f.write(objects)\r\n    f.close()\r\n\r\n\r\ngen_train_txt(\'train.txt\')\r\ngen_test_txt(\'val.txt\')\r\n\r\n'"
misc/remove_optimizers_params_in_ckpt.py,6,"b""# coding: utf-8\n\n# This script is used to remove the optimizer parameters in the saved checkpoint files.\n# These parameters are useless in the forward process. \n# Removing them will shrink the checkpoint size a lot.\n\nimport sys\nsys.path.append('..')\n\nimport os\nimport tensorflow as tf\nfrom model import yolov3\n\n# params\nckpt_path = ''\nclass_num = 20\nsave_dir = 'shrinked_ckpt'\nif not os.path.exists(save_dir):\n    os.makedirs(save_dir)\n\nimage = tf.placeholder(tf.float32, [1, 416, 416, 3])\nyolo_model = yolov3(class_num, None)\nwith tf.variable_scope('yolov3'):\n    pred_feature_maps = yolo_model.forward(image)\n\nsaver_to_restore = tf.train.Saver()\nsaver_to_save = tf.train.Saver()\n\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n    saver_to_restore.restore(sess, ckpt_path)\n    saver_to_save.save(sess, save_dir + '/shrinked')"""
utils/__init__.py,0,b''
utils/data_aug.py,0,"b'# coding: utf-8\n# part of this is take from Gluon\'s repo:\n# https://github.com/dmlc/gluon-cv/blob/master/gluoncv/data/transforms/presets/yolo.py\n\nfrom __future__ import division, print_function\n\nimport random\nimport numpy as np\nimport cv2\n\n\ndef mix_up(img1, img2, bbox1, bbox2):\n    \'\'\'\n    return:\n        mix_img: HWC format mix up image\n        mix_bbox: [N, 5] shape mix up bbox, i.e. `x_min, y_min, x_max, y_mix, mixup_weight`.\n    \'\'\'\n    height = max(img1.shape[0], img2.shape[0])\n    width = max(img1.shape[1], img2.shape[1])\n\n    mix_img = np.zeros(shape=(height, width, 3), dtype=\'float32\')\n\n    # rand_num = np.random.random()\n    rand_num = np.random.beta(1.5, 1.5)\n    rand_num = max(0, min(1, rand_num))\n    mix_img[:img1.shape[0], :img1.shape[1], :] = img1.astype(\'float32\') * rand_num\n    mix_img[:img2.shape[0], :img2.shape[1], :] += img2.astype(\'float32\') * (1. - rand_num)\n\n    mix_img = mix_img.astype(\'uint8\')\n\n    # the last element of the 2nd dimention is the mix up weight\n    bbox1 = np.concatenate((bbox1, np.full(shape=(bbox1.shape[0], 1), fill_value=rand_num)), axis=-1)\n    bbox2 = np.concatenate((bbox2, np.full(shape=(bbox2.shape[0], 1), fill_value=1. - rand_num)), axis=-1)\n    mix_bbox = np.concatenate((bbox1, bbox2), axis=0)\n\n    return mix_img, mix_bbox\n\n\ndef bbox_crop(bbox, crop_box=None, allow_outside_center=True):\n    """"""Crop bounding boxes according to slice area.\n    This method is mainly used with image cropping to ensure bonding boxes fit\n    within the cropped image.\n    Parameters\n    ----------\n    bbox : numpy.ndarray\n        Numpy.ndarray with shape (N, 4+) where N is the number of bounding boxes.\n        The second axis represents attributes of the bounding box.\n        Specifically, these are :math:`(x_{min}, y_{min}, x_{max}, y_{max})`,\n        we allow additional attributes other than coordinates, which stay intact\n        during bounding box transformations.\n    crop_box : tuple\n        Tuple of length 4. :math:`(x_{min}, y_{min}, width, height)`\n    allow_outside_center : bool\n        If `False`, remove bounding boxes which have centers outside cropping area.\n    Returns\n    -------\n    numpy.ndarray\n        Cropped bounding boxes with shape (M, 4+) where M <= N.\n    """"""\n    bbox = bbox.copy()\n    if crop_box is None:\n        return bbox\n    if not len(crop_box) == 4:\n        raise ValueError(\n            ""Invalid crop_box parameter, requires length 4, given {}"".format(str(crop_box)))\n    if sum([int(c is None) for c in crop_box]) == 4:\n        return bbox\n\n    l, t, w, h = crop_box\n\n    left = l if l else 0\n    top = t if t else 0\n    right = left + (w if w else np.inf)\n    bottom = top + (h if h else np.inf)\n    crop_bbox = np.array((left, top, right, bottom))\n\n    if allow_outside_center:\n        mask = np.ones(bbox.shape[0], dtype=bool)\n    else:\n        centers = (bbox[:, :2] + bbox[:, 2:4]) / 2\n        mask = np.logical_and(crop_bbox[:2] <= centers, centers < crop_bbox[2:]).all(axis=1)\n\n    # transform borders\n    bbox[:, :2] = np.maximum(bbox[:, :2], crop_bbox[:2])\n    bbox[:, 2:4] = np.minimum(bbox[:, 2:4], crop_bbox[2:4])\n    bbox[:, :2] -= crop_bbox[:2]\n    bbox[:, 2:4] -= crop_bbox[:2]\n\n    mask = np.logical_and(mask, (bbox[:, :2] < bbox[:, 2:4]).all(axis=1))\n    bbox = bbox[mask]\n    return bbox\n\ndef bbox_iou(bbox_a, bbox_b, offset=0):\n    """"""Calculate Intersection-Over-Union(IOU) of two bounding boxes.\n    Parameters\n    ----------\n    bbox_a : numpy.ndarray\n        An ndarray with shape :math:`(N, 4)`.\n    bbox_b : numpy.ndarray\n        An ndarray with shape :math:`(M, 4)`.\n    offset : float or int, default is 0\n        The ``offset`` is used to control the whether the width(or height) is computed as\n        (right - left + ``offset``).\n        Note that the offset must be 0 for normalized bboxes, whose ranges are in ``[0, 1]``.\n    Returns\n    -------\n    numpy.ndarray\n        An ndarray with shape :math:`(N, M)` indicates IOU between each pairs of\n        bounding boxes in `bbox_a` and `bbox_b`.\n    """"""\n    if bbox_a.shape[1] < 4 or bbox_b.shape[1] < 4:\n        raise IndexError(""Bounding boxes axis 1 must have at least length 4"")\n\n    tl = np.maximum(bbox_a[:, None, :2], bbox_b[:, :2])\n    br = np.minimum(bbox_a[:, None, 2:4], bbox_b[:, 2:4])\n\n    area_i = np.prod(br - tl + offset, axis=2) * (tl < br).all(axis=2)\n    area_a = np.prod(bbox_a[:, 2:4] - bbox_a[:, :2] + offset, axis=1)\n    area_b = np.prod(bbox_b[:, 2:4] - bbox_b[:, :2] + offset, axis=1)\n    return area_i / (area_a[:, None] + area_b - area_i)\n\n\ndef random_crop_with_constraints(bbox, size, min_scale=0.3, max_scale=1,\n                                 max_aspect_ratio=2, constraints=None,\n                                 max_trial=50):\n    """"""Crop an image randomly with bounding box constraints.\n    This data augmentation is used in training of\n    Single Shot Multibox Detector [#]_. More details can be found in\n    data augmentation section of the original paper.\n    .. [#] Wei Liu, Dragomir Anguelov, Dumitru Erhan, Christian Szegedy,\n       Scott Reed, Cheng-Yang Fu, Alexander C. Berg.\n       SSD: Single Shot MultiBox Detector. ECCV 2016.\n    Parameters\n    ----------\n    bbox : numpy.ndarray\n        Numpy.ndarray with shape (N, 4+) where N is the number of bounding boxes.\n        The second axis represents attributes of the bounding box.\n        Specifically, these are :math:`(x_{min}, y_{min}, x_{max}, y_{max})`,\n        we allow additional attributes other than coordinates, which stay intact\n        during bounding box transformations.\n    size : tuple\n        Tuple of length 2 of image shape as (width, height).\n    min_scale : float\n        The minimum ratio between a cropped region and the original image.\n        The default value is :obj:`0.3`.\n    max_scale : float\n        The maximum ratio between a cropped region and the original image.\n        The default value is :obj:`1`.\n    max_aspect_ratio : float\n        The maximum aspect ratio of cropped region.\n        The default value is :obj:`2`.\n    constraints : iterable of tuples\n        An iterable of constraints.\n        Each constraint should be :obj:`(min_iou, max_iou)` format.\n        If means no constraint if set :obj:`min_iou` or :obj:`max_iou` to :obj:`None`.\n        If this argument defaults to :obj:`None`, :obj:`((0.1, None), (0.3, None),\n        (0.5, None), (0.7, None), (0.9, None), (None, 1))` will be used.\n    max_trial : int\n        Maximum number of trials for each constraint before exit no matter what.\n    Returns\n    -------\n    numpy.ndarray\n        Cropped bounding boxes with shape :obj:`(M, 4+)` where M <= N.\n    tuple\n        Tuple of length 4 as (x_offset, y_offset, new_width, new_height).\n    """"""\n    # default params in paper\n    if constraints is None:\n        constraints = (\n            (0.1, None),\n            (0.3, None),\n            (0.5, None),\n            (0.7, None),\n            (0.9, None),\n            (None, 1),\n        )\n\n    w, h = size\n\n    candidates = [(0, 0, w, h)]\n    for min_iou, max_iou in constraints:\n        min_iou = -np.inf if min_iou is None else min_iou\n        max_iou = np.inf if max_iou is None else max_iou\n\n        for _ in range(max_trial):\n            scale = random.uniform(min_scale, max_scale)\n            aspect_ratio = random.uniform(\n                max(1 / max_aspect_ratio, scale * scale),\n                min(max_aspect_ratio, 1 / (scale * scale)))\n            crop_h = int(h * scale / np.sqrt(aspect_ratio))\n            crop_w = int(w * scale * np.sqrt(aspect_ratio))\n\n            crop_t = random.randrange(h - crop_h)\n            crop_l = random.randrange(w - crop_w)\n            crop_bb = np.array((crop_l, crop_t, crop_l + crop_w, crop_t + crop_h))\n\n            if len(bbox) == 0:\n                top, bottom = crop_t, crop_t + crop_h\n                left, right = crop_l, crop_l + crop_w\n                return bbox, (left, top, right-left, bottom-top)\n\n            iou = bbox_iou(bbox, crop_bb[np.newaxis])\n            if min_iou <= iou.min() and iou.max() <= max_iou:\n                top, bottom = crop_t, crop_t + crop_h\n                left, right = crop_l, crop_l + crop_w\n                candidates.append((left, top, right-left, bottom-top))\n                break\n\n    # random select one\n    while candidates:\n        crop = candidates.pop(np.random.randint(0, len(candidates)))\n        new_bbox = bbox_crop(bbox, crop, allow_outside_center=False)\n        if new_bbox.size < 1:\n            continue\n        new_crop = (crop[0], crop[1], crop[2], crop[3])\n        return new_bbox, new_crop\n    return bbox, (0, 0, w, h)\n\n\ndef random_color_distort(img, brightness_delta=32, hue_vari=18, sat_vari=0.5, val_vari=0.5):\n    \'\'\'\n    randomly distort image color. Adjust brightness, hue, saturation, value.\n    param:\n        img: a BGR uint8 format OpenCV image. HWC format.\n    \'\'\'\n\n    def random_hue(img_hsv, hue_vari, p=0.5):\n        if np.random.uniform(0, 1) > p:\n            hue_delta = np.random.randint(-hue_vari, hue_vari)\n            img_hsv[:, :, 0] = (img_hsv[:, :, 0] + hue_delta) % 180\n        return img_hsv\n\n    def random_saturation(img_hsv, sat_vari, p=0.5):\n        if np.random.uniform(0, 1) > p:\n            sat_mult = 1 + np.random.uniform(-sat_vari, sat_vari)\n            img_hsv[:, :, 1] *= sat_mult\n        return img_hsv\n\n    def random_value(img_hsv, val_vari, p=0.5):\n        if np.random.uniform(0, 1) > p:\n            val_mult = 1 + np.random.uniform(-val_vari, val_vari)\n            img_hsv[:, :, 2] *= val_mult\n        return img_hsv\n\n    def random_brightness(img, brightness_delta, p=0.5):\n        if np.random.uniform(0, 1) > p:\n            img = img.astype(np.float32)\n            brightness_delta = int(np.random.uniform(-brightness_delta, brightness_delta))\n            img = img + brightness_delta\n        return np.clip(img, 0, 255)\n\n    # brightness\n    img = random_brightness(img, brightness_delta)\n    img = img.astype(np.uint8)\n\n    # color jitter\n    img_hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV).astype(np.float32)\n\n    if np.random.randint(0, 2):\n        img_hsv = random_value(img_hsv, val_vari)\n        img_hsv = random_saturation(img_hsv, sat_vari)\n        img_hsv = random_hue(img_hsv, hue_vari)\n    else:\n        img_hsv = random_saturation(img_hsv, sat_vari)\n        img_hsv = random_hue(img_hsv, hue_vari)\n        img_hsv = random_value(img_hsv, val_vari)\n\n    img_hsv = np.clip(img_hsv, 0, 255)\n    img = cv2.cvtColor(img_hsv.astype(np.uint8), cv2.COLOR_HSV2BGR)\n\n    return img\n\n\ndef letterbox_resize(img, new_width, new_height, interp=0):\n    \'\'\'\n    Letterbox resize. keep the original aspect ratio in the resized image.\n    \'\'\'\n    ori_height, ori_width = img.shape[:2]\n\n    resize_ratio = min(new_width / ori_width, new_height / ori_height)\n\n    resize_w = int(resize_ratio * ori_width)\n    resize_h = int(resize_ratio * ori_height)\n\n    img = cv2.resize(img, (resize_w, resize_h), interpolation=interp)\n    image_padded = np.full((new_height, new_width, 3), 128, np.uint8)\n\n    dw = int((new_width - resize_w) / 2)\n    dh = int((new_height - resize_h) / 2)\n\n    image_padded[dh: resize_h + dh, dw: resize_w + dw, :] = img\n\n    return image_padded, resize_ratio, dw, dh\n\n\ndef resize_with_bbox(img, bbox, new_width, new_height, interp=0, letterbox=False):\n    \'\'\'\n    Resize the image and correct the bbox accordingly.\n    \'\'\'\n\n    if letterbox:\n        image_padded, resize_ratio, dw, dh = letterbox_resize(img, new_width, new_height, interp)\n\n        # xmin, xmax\n        bbox[:, [0, 2]] = bbox[:, [0, 2]] * resize_ratio + dw\n        # ymin, ymax\n        bbox[:, [1, 3]] = bbox[:, [1, 3]] * resize_ratio + dh\n\n        return image_padded, bbox\n    else:\n        ori_height, ori_width = img.shape[:2]\n\n        img = cv2.resize(img, (new_width, new_height), interpolation=interp)\n\n        # xmin, xmax\n        bbox[:, [0, 2]] = bbox[:, [0, 2]] / ori_width * new_width\n        # ymin, ymax\n        bbox[:, [1, 3]] = bbox[:, [1, 3]] / ori_height * new_height\n\n        return img, bbox\n\n\ndef random_flip(img, bbox, px=0, py=0):\n    \'\'\'\n    Randomly flip the image and correct the bbox.\n    param:\n    px:\n        the probability of horizontal flip\n    py:\n        the probability of vertical flip\n    \'\'\'\n    height, width = img.shape[:2]\n    if np.random.uniform(0, 1) < px:\n        img = cv2.flip(img, 1)\n        xmax = width - bbox[:, 0]\n        xmin = width - bbox[:, 2]\n        bbox[:, 0] = xmin\n        bbox[:, 2] = xmax\n\n    if np.random.uniform(0, 1) < py:\n        img = cv2.flip(img, 0)\n        ymax = height - bbox[:, 1]\n        ymin = height - bbox[:, 3]\n        bbox[:, 1] = ymin\n        bbox[:, 3] = ymax\n    return img, bbox\n\n\ndef random_expand(img, bbox, max_ratio=4, fill=0, keep_ratio=True):\n    \'\'\'\n    Random expand original image with borders, this is identical to placing\n    the original image on a larger canvas.\n    param:\n    max_ratio :\n        Maximum ratio of the output image on both direction(vertical and horizontal)\n    fill :\n        The value(s) for padded borders.\n    keep_ratio : bool\n        If `True`, will keep output image the same aspect ratio as input.\n    \'\'\'\n    h, w, c = img.shape\n    ratio_x = random.uniform(1, max_ratio)\n    if keep_ratio:\n        ratio_y = ratio_x\n    else:\n        ratio_y = random.uniform(1, max_ratio)\n\n    oh, ow = int(h * ratio_y), int(w * ratio_x)\n    off_y = random.randint(0, oh - h)\n    off_x = random.randint(0, ow - w)\n\n    dst = np.full(shape=(oh, ow, c), fill_value=fill, dtype=img.dtype)\n\n    dst[off_y:off_y + h, off_x:off_x + w, :] = img\n\n    # correct bbox\n    bbox[:, :2] += (off_x, off_y)\n    bbox[:, 2:4] += (off_x, off_y)\n\n    return dst, bbox\n'"
utils/data_utils.py,0,"b""# coding: utf-8\n\nfrom __future__ import division, print_function\n\nimport numpy as np\nimport cv2\nimport sys\nfrom utils.data_aug import *\nimport random\n\nPY_VERSION = sys.version_info[0]\niter_cnt = 0\n\n\ndef parse_line(line):\n    '''\n    Given a line from the training/test txt file, return parsed info.\n    line format: line_index, img_path, img_width, img_height, [box_info_1 (5 number)], ...\n    return:\n        line_idx: int64\n        pic_path: string.\n        boxes: shape [N, 4], N is the ground truth count, elements in the second\n            dimension are [x_min, y_min, x_max, y_max]\n        labels: shape [N]. class index.\n        img_width: int.\n        img_height: int\n    '''\n    if 'str' not in str(type(line)):\n        line = line.decode()\n    s = line.strip().split(' ')\n    assert len(s) > 8, 'Annotation error! Please check your annotation file. Make sure there is at least one target object in each image.'\n    line_idx = int(s[0])\n    pic_path = s[1]\n    img_width = int(s[2])\n    img_height = int(s[3])\n    s = s[4:]\n    assert len(s) % 5 == 0, 'Annotation error! Please check your annotation file. Maybe partially missing some coordinates?'\n    box_cnt = len(s) // 5\n    boxes = []\n    labels = []\n    for i in range(box_cnt):\n        label, x_min, y_min, x_max, y_max = int(s[i * 5]), float(s[i * 5 + 1]), float(s[i * 5 + 2]), float(\n            s[i * 5 + 3]), float(s[i * 5 + 4])\n        boxes.append([x_min, y_min, x_max, y_max])\n        labels.append(label)\n    boxes = np.asarray(boxes, np.float32)\n    labels = np.asarray(labels, np.int64)\n    return line_idx, pic_path, boxes, labels, img_width, img_height\n\n\ndef process_box(boxes, labels, img_size, class_num, anchors):\n    '''\n    Generate the y_true label, i.e. the ground truth feature_maps in 3 different scales.\n    params:\n        boxes: [N, 5] shape, float32 dtype. `x_min, y_min, x_max, y_mix, mixup_weight`.\n        labels: [N] shape, int64 dtype.\n        class_num: int64 num.\n        anchors: [9, 4] shape, float32 dtype.\n    '''\n    anchors_mask = [[6, 7, 8], [3, 4, 5], [0, 1, 2]]\n\n    # convert boxes form:\n    # shape: [N, 2]\n    # (x_center, y_center)\n    box_centers = (boxes[:, 0:2] + boxes[:, 2:4]) / 2\n    # (width, height)\n    box_sizes = boxes[:, 2:4] - boxes[:, 0:2]\n\n    # [13, 13, 3, 5+num_class+1] `5` means coords and labels. `1` means mix up weight. \n    y_true_13 = np.zeros((img_size[1] // 32, img_size[0] // 32, 3, 6 + class_num), np.float32)\n    y_true_26 = np.zeros((img_size[1] // 16, img_size[0] // 16, 3, 6 + class_num), np.float32)\n    y_true_52 = np.zeros((img_size[1] // 8, img_size[0] // 8, 3, 6 + class_num), np.float32)\n\n    # mix up weight default to 1.\n    y_true_13[..., -1] = 1.\n    y_true_26[..., -1] = 1.\n    y_true_52[..., -1] = 1.\n\n    y_true = [y_true_13, y_true_26, y_true_52]\n\n    # [N, 1, 2]\n    box_sizes = np.expand_dims(box_sizes, 1)\n    # broadcast tricks\n    # [N, 1, 2] & [9, 2] ==> [N, 9, 2]\n    mins = np.maximum(- box_sizes / 2, - anchors / 2)\n    maxs = np.minimum(box_sizes / 2, anchors / 2)\n    # [N, 9, 2]\n    whs = maxs - mins\n\n    # [N, 9]\n    iou = (whs[:, :, 0] * whs[:, :, 1]) / (\n                box_sizes[:, :, 0] * box_sizes[:, :, 1] + anchors[:, 0] * anchors[:, 1] - whs[:, :, 0] * whs[:, :,\n                                                                                                         1] + 1e-10)\n    # [N]\n    best_match_idx = np.argmax(iou, axis=1)\n\n    ratio_dict = {1.: 8., 2.: 16., 3.: 32.}\n    for i, idx in enumerate(best_match_idx):\n        # idx: 0,1,2 ==> 2; 3,4,5 ==> 1; 6,7,8 ==> 0\n        feature_map_group = 2 - idx // 3\n        # scale ratio: 0,1,2 ==> 8; 3,4,5 ==> 16; 6,7,8 ==> 32\n        ratio = ratio_dict[np.ceil((idx + 1) / 3.)]\n        x = int(np.floor(box_centers[i, 0] / ratio))\n        y = int(np.floor(box_centers[i, 1] / ratio))\n        k = anchors_mask[feature_map_group].index(idx)\n        c = labels[i]\n        # print(feature_map_group, '|', y,x,k,c)\n\n        y_true[feature_map_group][y, x, k, :2] = box_centers[i]\n        y_true[feature_map_group][y, x, k, 2:4] = box_sizes[i]\n        y_true[feature_map_group][y, x, k, 4] = 1.\n        y_true[feature_map_group][y, x, k, 5 + c] = 1.\n        y_true[feature_map_group][y, x, k, -1] = boxes[i, -1]\n\n    return y_true_13, y_true_26, y_true_52\n\n\ndef parse_data(line, class_num, img_size, anchors, mode, letterbox_resize):\n    '''\n    param:\n        line: a line from the training/test txt file\n        class_num: totol class nums.\n        img_size: the size of image to be resized to. [width, height] format.\n        anchors: anchors.\n        mode: 'train' or 'val'. When set to 'train', data_augmentation will be applied.\n        letterbox_resize: whether to use the letterbox resize, i.e., keep the original aspect ratio in the resized image.\n    '''\n    if not isinstance(line, list):\n        img_idx, pic_path, boxes, labels, _, _ = parse_line(line)\n        img = cv2.imread(pic_path)\n        # expand the 2nd dimension, mix up weight default to 1.\n        boxes = np.concatenate((boxes, np.full(shape=(boxes.shape[0], 1), fill_value=1., dtype=np.float32)), axis=-1)\n    else:\n        # the mix up case\n        _, pic_path1, boxes1, labels1, _, _ = parse_line(line[0])\n        img1 = cv2.imread(pic_path1)\n        img_idx, pic_path2, boxes2, labels2, _, _ = parse_line(line[1])\n        img2 = cv2.imread(pic_path2)\n\n        img, boxes = mix_up(img1, img2, boxes1, boxes2)\n        labels = np.concatenate((labels1, labels2))\n\n    if mode == 'train':\n        # random color jittering\n        # NOTE: applying color distort may lead to bad performance sometimes\n        img = random_color_distort(img)\n\n        # random expansion with prob 0.5\n        if np.random.uniform(0, 1) > 0.5:\n            img, boxes = random_expand(img, boxes, 4)\n\n        # random cropping\n        h, w, _ = img.shape\n        boxes, crop = random_crop_with_constraints(boxes, (w, h))\n        x0, y0, w, h = crop\n        img = img[y0: y0+h, x0: x0+w]\n\n        # resize with random interpolation\n        h, w, _ = img.shape\n        interp = np.random.randint(0, 5)\n        img, boxes = resize_with_bbox(img, boxes, img_size[0], img_size[1], interp=interp, letterbox=letterbox_resize)\n\n        # random horizontal flip\n        h, w, _ = img.shape\n        img, boxes = random_flip(img, boxes, px=0.5)\n    else:\n        img, boxes = resize_with_bbox(img, boxes, img_size[0], img_size[1], interp=1, letterbox=letterbox_resize)\n\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB).astype(np.float32)\n\n    # the input of yolo_v3 should be in range 0~1\n    img = img / 255.\n\n    y_true_13, y_true_26, y_true_52 = process_box(boxes, labels, img_size, class_num, anchors)\n\n    return img_idx, img, y_true_13, y_true_26, y_true_52\n\n\ndef get_batch_data(batch_line, class_num, img_size, anchors, mode, multi_scale=False, mix_up=False, letterbox_resize=True, interval=10):\n    '''\n    generate a batch of imgs and labels\n    param:\n        batch_line: a batch of lines from train/val.txt files\n        class_num: num of total classes.\n        img_size: the image size to be resized to. format: [width, height].\n        anchors: anchors. shape: [9, 2].\n        mode: 'train' or 'val'. if set to 'train', data augmentation will be applied.\n        multi_scale: whether to use multi_scale training, img_size varies from [320, 320] to [640, 640] by default. Note that it will take effect only when mode is set to 'train'.\n        letterbox_resize: whether to use the letterbox resize, i.e., keep the original aspect ratio in the resized image.\n        interval: change the scale of image every interval batches. Note that it's indeterministic because of the multi threading.\n    '''\n    global iter_cnt\n    # multi_scale training\n    if multi_scale and mode == 'train':\n        random.seed(iter_cnt // interval)\n        random_img_size = [[x * 32, x * 32] for x in range(10, 20)]\n        img_size = random.sample(random_img_size, 1)[0]\n    iter_cnt += 1\n\n    img_idx_batch, img_batch, y_true_13_batch, y_true_26_batch, y_true_52_batch = [], [], [], [], []\n\n    # mix up strategy\n    if mix_up and mode == 'train':\n        mix_lines = []\n        batch_line = batch_line.tolist()\n        for idx, line in enumerate(batch_line):\n            if np.random.uniform(0, 1) < 0.5:\n                mix_lines.append([line, random.sample(batch_line[:idx] + batch_line[idx+1:], 1)[0]])\n            else:\n                mix_lines.append(line)\n        batch_line = mix_lines\n\n    for line in batch_line:\n        img_idx, img, y_true_13, y_true_26, y_true_52 = parse_data(line, class_num, img_size, anchors, mode, letterbox_resize)\n\n        img_idx_batch.append(img_idx)\n        img_batch.append(img)\n        y_true_13_batch.append(y_true_13)\n        y_true_26_batch.append(y_true_26)\n        y_true_52_batch.append(y_true_52)\n\n    img_idx_batch, img_batch, y_true_13_batch, y_true_26_batch, y_true_52_batch = np.asarray(img_idx_batch, np.int64), np.asarray(img_batch), np.asarray(y_true_13_batch), np.asarray(y_true_26_batch), np.asarray(y_true_52_batch)\n\n    return img_idx_batch, img_batch, y_true_13_batch, y_true_26_batch, y_true_52_batch\n"""
utils/eval_utils.py,0,"b'# coding: utf-8\n\nfrom __future__ import division, print_function\n\nimport numpy as np\nimport cv2\nfrom collections import Counter\n\nfrom utils.nms_utils import cpu_nms, gpu_nms\nfrom utils.data_utils import parse_line\n\n\ndef calc_iou(pred_boxes, true_boxes):\n    \'\'\'\n    Maintain an efficient way to calculate the ios matrix using the numpy broadcast tricks.\n    shape_info: pred_boxes: [N, 4]\n                true_boxes: [V, 4]\n    return: IoU matrix: shape: [N, V]\n    \'\'\'\n\n    # [N, 1, 4]\n    pred_boxes = np.expand_dims(pred_boxes, -2)\n    # [1, V, 4]\n    true_boxes = np.expand_dims(true_boxes, 0)\n\n    # [N, 1, 2] & [1, V, 2] ==> [N, V, 2]\n    intersect_mins = np.maximum(pred_boxes[..., :2], true_boxes[..., :2])\n    intersect_maxs = np.minimum(pred_boxes[..., 2:], true_boxes[..., 2:])\n    intersect_wh = np.maximum(intersect_maxs - intersect_mins, 0.)\n\n    # shape: [N, V]\n    intersect_area = intersect_wh[..., 0] * intersect_wh[..., 1]\n    # shape: [N, 1, 2]\n    pred_box_wh = pred_boxes[..., 2:] - pred_boxes[..., :2]\n    # shape: [N, 1]\n    pred_box_area = pred_box_wh[..., 0] * pred_box_wh[..., 1]\n    # [1, V, 2]\n    true_boxes_wh = true_boxes[..., 2:] - true_boxes[..., :2]\n    # [1, V]\n    true_boxes_area = true_boxes_wh[..., 0] * true_boxes_wh[..., 1]\n\n    # shape: [N, V]\n    iou = intersect_area / (pred_box_area + true_boxes_area - intersect_area + 1e-10)\n\n    return iou\n\n\ndef evaluate_on_cpu(y_pred, y_true, num_classes, calc_now=True, max_boxes=50, score_thresh=0.5, iou_thresh=0.5):\n    \'\'\'\n    Given y_pred and y_true of a batch of data, get the recall and precision of the current batch.\n    \'\'\'\n\n    num_images = y_true[0].shape[0]\n    true_labels_dict = {i: 0 for i in range(num_classes)}  # {class: count}\n    pred_labels_dict = {i: 0 for i in range(num_classes)}\n    true_positive_dict = {i: 0 for i in range(num_classes)}\n\n    for i in range(num_images):\n        true_labels_list, true_boxes_list = [], []\n        for j in range(3):  # three feature maps\n            # shape: [13, 13, 3, 80]\n            true_probs_temp = y_true[j][i][..., 5:-1]\n            # shape: [13, 13, 3, 4] (x_center, y_center, w, h)\n            true_boxes_temp = y_true[j][i][..., 0:4]\n\n            # [13, 13, 3]\n            object_mask = true_probs_temp.sum(axis=-1) > 0\n\n            # [V, 3] V: Ground truth number of the current image\n            true_probs_temp = true_probs_temp[object_mask]\n            # [V, 4]\n            true_boxes_temp = true_boxes_temp[object_mask]\n\n            # [V], labels\n            true_labels_list += np.argmax(true_probs_temp, axis=-1).tolist()\n            # [V, 4] (x_center, y_center, w, h)\n            true_boxes_list += true_boxes_temp.tolist()\n\n        if len(true_labels_list) != 0:\n            for cls, count in Counter(true_labels_list).items():\n                true_labels_dict[cls] += count\n\n        # [V, 4] (xmin, ymin, xmax, ymax)\n        true_boxes = np.array(true_boxes_list)\n        box_centers, box_sizes = true_boxes[:, 0:2], true_boxes[:, 2:4]\n        true_boxes[:, 0:2] = box_centers - box_sizes / 2.\n        true_boxes[:, 2:4] = true_boxes[:, 0:2] + box_sizes\n\n        # [1, xxx, 4]\n        pred_boxes = y_pred[0][i:i + 1]\n        pred_confs = y_pred[1][i:i + 1]\n        pred_probs = y_pred[2][i:i + 1]\n\n        # pred_boxes: [N, 4]\n        # pred_confs: [N]\n        # pred_labels: [N]\n        # N: Detected box number of the current image\n        pred_boxes, pred_confs, pred_labels = cpu_nms(pred_boxes, pred_confs * pred_probs, num_classes,\n                                                      max_boxes=max_boxes, score_thresh=score_thresh, iou_thresh=iou_thresh)\n\n        # len: N\n        pred_labels_list = [] if pred_labels is None else pred_labels.tolist()\n        if pred_labels_list == []:\n            continue\n\n        # calc iou\n        # [N, V]\n        iou_matrix = calc_iou(pred_boxes, true_boxes)\n        # [N]\n        max_iou_idx = np.argmax(iou_matrix, axis=-1)\n\n        correct_idx = []\n        correct_conf = []\n        for k in range(max_iou_idx.shape[0]):\n            pred_labels_dict[pred_labels_list[k]] += 1\n            match_idx = max_iou_idx[k]  # V level\n            if iou_matrix[k, match_idx] > iou_thresh and true_labels_list[match_idx] == pred_labels_list[k]:\n                if match_idx not in correct_idx:\n                    correct_idx.append(match_idx)\n                    correct_conf.append(pred_confs[k])\n                else:\n                    same_idx = correct_idx.index(match_idx)\n                    if pred_confs[k] > correct_conf[same_idx]:\n                        correct_idx.pop(same_idx)\n                        correct_conf.pop(same_idx)\n                        correct_idx.append(match_idx)\n                        correct_conf.append(pred_confs[k])\n\n        for t in correct_idx:\n            true_positive_dict[true_labels_list[t]] += 1\n\n    if calc_now:\n        # avoid divided by 0\n        recall = sum(true_positive_dict.values()) / (sum(true_labels_dict.values()) + 1e-6)\n        precision = sum(true_positive_dict.values()) / (sum(pred_labels_dict.values()) + 1e-6)\n\n        return recall, precision\n    else:\n        return true_positive_dict, true_labels_dict, pred_labels_dict\n\n\ndef evaluate_on_gpu(sess, gpu_nms_op, pred_boxes_flag, pred_scores_flag, y_pred, y_true, num_classes, iou_thresh=0.5, calc_now=True):\n    \'\'\'\n    Given y_pred and y_true of a batch of data, get the recall and precision of the current batch.\n    This function will perform gpu operation on the GPU.\n    \'\'\'\n\n    num_images = y_true[0].shape[0]\n    true_labels_dict = {i: 0 for i in range(num_classes)}  # {class: count}\n    pred_labels_dict = {i: 0 for i in range(num_classes)}\n    true_positive_dict = {i: 0 for i in range(num_classes)}\n\n    for i in range(num_images):\n        true_labels_list, true_boxes_list = [], []\n        for j in range(3):  # three feature maps\n            # shape: [13, 13, 3, 80]\n            true_probs_temp = y_true[j][i][..., 5:-1]\n            # shape: [13, 13, 3, 4] (x_center, y_center, w, h)\n            true_boxes_temp = y_true[j][i][..., 0:4]\n\n            # [13, 13, 3]\n            object_mask = true_probs_temp.sum(axis=-1) > 0\n\n            # [V, 80] V: Ground truth number of the current image\n            true_probs_temp = true_probs_temp[object_mask]\n            # [V, 4]\n            true_boxes_temp = true_boxes_temp[object_mask]\n\n            # [V], labels, each from 0 to 79\n            true_labels_list += np.argmax(true_probs_temp, axis=-1).tolist()\n            # [V, 4] (x_center, y_center, w, h)\n            true_boxes_list += true_boxes_temp.tolist()\n\n        if len(true_labels_list) != 0:\n            for cls, count in Counter(true_labels_list).items():\n                true_labels_dict[cls] += count\n\n        # [V, 4] (xmin, ymin, xmax, ymax)\n        true_boxes = np.array(true_boxes_list)\n        box_centers, box_sizes = true_boxes[:, 0:2], true_boxes[:, 2:4]\n        true_boxes[:, 0:2] = box_centers - box_sizes / 2.\n        true_boxes[:, 2:4] = true_boxes[:, 0:2] + box_sizes\n\n        # [1, xxx, 4]\n        pred_boxes = y_pred[0][i:i + 1]\n        pred_confs = y_pred[1][i:i + 1]\n        pred_probs = y_pred[2][i:i + 1]\n\n        # pred_boxes: [N, 4]\n        # pred_confs: [N]\n        # pred_labels: [N]\n        # N: Detected box number of the current image\n        pred_boxes, pred_confs, pred_labels = sess.run(gpu_nms_op,\n                                                       feed_dict={pred_boxes_flag: pred_boxes,\n                                                                  pred_scores_flag: pred_confs * pred_probs})\n        # len: N\n        pred_labels_list = [] if pred_labels is None else pred_labels.tolist()\n        if pred_labels_list == []:\n            continue\n\n        # calc iou\n        # [N, V]\n        iou_matrix = calc_iou(pred_boxes, true_boxes)\n        # [N]\n        max_iou_idx = np.argmax(iou_matrix, axis=-1)\n\n        correct_idx = []\n        correct_conf = []\n        for k in range(max_iou_idx.shape[0]):\n            pred_labels_dict[pred_labels_list[k]] += 1\n            match_idx = max_iou_idx[k]  # V level\n            if iou_matrix[k, match_idx] > iou_thresh and true_labels_list[match_idx] == pred_labels_list[k]:\n                if match_idx not in correct_idx:\n                    correct_idx.append(match_idx)\n                    correct_conf.append(pred_confs[k])\n                else:\n                    same_idx = correct_idx.index(match_idx)\n                    if pred_confs[k] > correct_conf[same_idx]:\n                        correct_idx.pop(same_idx)\n                        correct_conf.pop(same_idx)\n                        correct_idx.append(match_idx)\n                        correct_conf.append(pred_confs[k])\n\n        for t in correct_idx:\n            true_positive_dict[true_labels_list[t]] += 1\n\n    if calc_now:\n        # avoid divided by 0\n        recall = sum(true_positive_dict.values()) / (sum(true_labels_dict.values()) + 1e-6)\n        precision = sum(true_positive_dict.values()) / (sum(pred_labels_dict.values()) + 1e-6)\n\n        return recall, precision\n    else:\n        return true_positive_dict, true_labels_dict, pred_labels_dict\n\n\ndef get_preds_gpu(sess, gpu_nms_op, pred_boxes_flag, pred_scores_flag, image_ids, y_pred):\n    \'\'\'\n    Given the y_pred of an input image, get the predicted bbox and label info.\n    return:\n        pred_content: 2d list.\n    \'\'\'\n    image_id = image_ids[0]\n\n    # keep the first dimension 1\n    pred_boxes = y_pred[0][0:1]\n    pred_confs = y_pred[1][0:1]\n    pred_probs = y_pred[2][0:1]\n\n    boxes, scores, labels = sess.run(gpu_nms_op,\n                                     feed_dict={pred_boxes_flag: pred_boxes,\n                                                pred_scores_flag: pred_confs * pred_probs})\n\n    pred_content = []\n    for i in range(len(labels)):\n        x_min, y_min, x_max, y_max = boxes[i]\n        score = scores[i]\n        label = labels[i]\n        pred_content.append([image_id, x_min, y_min, x_max, y_max, score, label])\n\n    return pred_content\n\n\ngt_dict = {}  # key: img_id, value: gt object list\ndef parse_gt_rec(gt_filename, target_img_size, letterbox_resize=True):\n    \'\'\'\n    parse and re-organize the gt info.\n    return:\n        gt_dict: dict. Each key is a img_id, the value is the gt bboxes in the corresponding img.\n    \'\'\'\n\n    global gt_dict\n\n    if not gt_dict:\n        new_width, new_height = target_img_size\n        with open(gt_filename, \'r\') as f:\n            for line in f:\n                img_id, pic_path, boxes, labels, ori_width, ori_height = parse_line(line)\n\n                objects = []\n                for i in range(len(labels)):\n                    x_min, y_min, x_max, y_max = boxes[i]\n                    label = labels[i]\n\n                    if letterbox_resize:\n                        resize_ratio = min(new_width / ori_width, new_height / ori_height)\n\n                        resize_w = int(resize_ratio * ori_width)\n                        resize_h = int(resize_ratio * ori_height)\n\n                        dw = int((new_width - resize_w) / 2)\n                        dh = int((new_height - resize_h) / 2)\n\n                        objects.append([x_min * resize_ratio + dw,\n                                        y_min * resize_ratio + dh,\n                                        x_max * resize_ratio + dw,\n                                        y_max * resize_ratio + dh,\n                                        label])\n                    else:\n                        objects.append([x_min * new_width / ori_width,\n                                        y_min * new_height / ori_height,\n                                        x_max * new_width / ori_width,\n                                        y_max * new_height / ori_height,\n                                        label])\n                gt_dict[img_id] = objects\n    return gt_dict\n\n\n# The following two functions are modified from FAIR\'s Detectron repo to calculate mAP:\n# https://github.com/facebookresearch/Detectron/blob/master/detectron/datasets/voc_eval.py\ndef voc_ap(rec, prec, use_07_metric=False):\n    """"""Compute VOC AP given precision and recall. If use_07_metric is true, uses\n    the VOC 07 11-point method (default:False).\n    """"""\n    if use_07_metric:\n        # 11 point metric\n        ap = 0.\n        for t in np.arange(0., 1.1, 0.1):\n            if np.sum(rec >= t) == 0:\n                p = 0\n            else:\n                p = np.max(prec[rec >= t])\n            ap = ap + p / 11.\n    else:\n        # correct AP calculation\n        # first append sentinel values at the end\n        mrec = np.concatenate(([0.], rec, [1.]))\n        mpre = np.concatenate(([0.], prec, [0.]))\n\n        # compute the precision envelope\n        for i in range(mpre.size - 1, 0, -1):\n            mpre[i - 1] = np.maximum(mpre[i - 1], mpre[i])\n\n        # to calculate area under PR curve, look for points\n        # where X axis (recall) changes value\n        i = np.where(mrec[1:] != mrec[:-1])[0]\n\n        # and sum (\\Delta recall) * prec\n        ap = np.sum((mrec[i + 1] - mrec[i]) * mpre[i + 1])\n    return ap\n\n\ndef voc_eval(gt_dict, val_preds, classidx, iou_thres=0.5, use_07_metric=False):\n    \'\'\'\n    Top level function that does the PASCAL VOC evaluation.\n    \'\'\'\n    # 1.obtain gt: extract all gt objects for this class\n    class_recs = {}\n    npos = 0\n    for img_id in gt_dict:\n        R = [obj for obj in gt_dict[img_id] if obj[-1] == classidx]\n        bbox = np.array([x[:4] for x in R])\n        det = [False] * len(R)\n        npos += len(R)\n        class_recs[img_id] = {\'bbox\': bbox, \'det\': det}\n\n    # 2. obtain pred results\n    pred = [x for x in val_preds if x[-1] == classidx]\n    img_ids = [x[0] for x in pred]\n    confidence = np.array([x[-2] for x in pred])\n    BB = np.array([[x[1], x[2], x[3], x[4]] for x in pred])\n\n    # 3. sort by confidence\n    sorted_ind = np.argsort(-confidence)\n    try:\n        BB = BB[sorted_ind, :]\n    except:\n        print(\'no box, ignore\')\n        return 1e-6, 1e-6, 0, 0, 0\n    img_ids = [img_ids[x] for x in sorted_ind]\n\n    # 4. mark TPs and FPs\n    nd = len(img_ids)\n    tp = np.zeros(nd)\n    fp = np.zeros(nd)\n\n    for d in range(nd):\n        # all the gt info in some image\n        R = class_recs[img_ids[d]]\n        bb = BB[d, :]\n        ovmax = -np.Inf\n        BBGT = R[\'bbox\']\n\n        if BBGT.size > 0:\n            # calc iou\n            # intersection\n            ixmin = np.maximum(BBGT[:, 0], bb[0])\n            iymin = np.maximum(BBGT[:, 1], bb[1])\n            ixmax = np.minimum(BBGT[:, 2], bb[2])\n            iymax = np.minimum(BBGT[:, 3], bb[3])\n            iw = np.maximum(ixmax - ixmin + 1., 0.)\n            ih = np.maximum(iymax - iymin + 1., 0.)\n            inters = iw * ih\n\n            # union\n            uni = ((bb[2] - bb[0] + 1.) * (bb[3] - bb[1] + 1.) + (BBGT[:, 2] - BBGT[:, 0] + 1.) * (\n                        BBGT[:, 3] - BBGT[:, 1] + 1.) - inters)\n\n            overlaps = inters / uni\n            ovmax = np.max(overlaps)\n            jmax = np.argmax(overlaps)\n\n        if ovmax > iou_thres:\n            # gt not matched yet\n            if not R[\'det\'][jmax]:\n                tp[d] = 1.\n                R[\'det\'][jmax] = 1\n            else:\n                fp[d] = 1.\n        else:\n            fp[d] = 1.\n\n    # compute precision recall\n    fp = np.cumsum(fp)\n    tp = np.cumsum(tp)\n    rec = tp / float(npos)\n    # avoid divide by zero in case the first detection matches a difficult\n    # ground truth\n    prec = tp / np.maximum(tp + fp, np.finfo(np.float64).eps)\n    ap = voc_ap(rec, prec, use_07_metric)\n\n    # return rec, prec, ap\n    return npos, nd, tp[-1] / float(npos), tp[-1] / float(nd), ap\n'"
utils/layer_utils.py,3,"b""# coding: utf-8\n\nfrom __future__ import division, print_function\n\nimport numpy as np\nimport tensorflow as tf\nslim = tf.contrib.slim\n\ndef conv2d(inputs, filters, kernel_size, strides=1):\n    def _fixed_padding(inputs, kernel_size):\n        pad_total = kernel_size - 1\n        pad_beg = pad_total // 2\n        pad_end = pad_total - pad_beg\n\n        padded_inputs = tf.pad(inputs, [[0, 0], [pad_beg, pad_end],\n                                        [pad_beg, pad_end], [0, 0]], mode='CONSTANT')\n        return padded_inputs\n    if strides > 1: \n        inputs = _fixed_padding(inputs, kernel_size)\n    inputs = slim.conv2d(inputs, filters, kernel_size, stride=strides,\n                         padding=('SAME' if strides == 1 else 'VALID'))\n    return inputs\n\ndef darknet53_body(inputs):\n    def res_block(inputs, filters):\n        shortcut = inputs\n        net = conv2d(inputs, filters * 1, 1)\n        net = conv2d(net, filters * 2, 3)\n\n        net = net + shortcut\n\n        return net\n    \n    # first two conv2d layers\n    net = conv2d(inputs, 32,  3, strides=1)\n    net = conv2d(net, 64,  3, strides=2)\n\n    # res_block * 1\n    net = res_block(net, 32)\n\n    net = conv2d(net, 128, 3, strides=2)\n\n    # res_block * 2\n    for i in range(2):\n        net = res_block(net, 64)\n\n    net = conv2d(net, 256, 3, strides=2)\n\n    # res_block * 8\n    for i in range(8):\n        net = res_block(net, 128)\n\n    route_1 = net\n    net = conv2d(net, 512, 3, strides=2)\n\n    # res_block * 8\n    for i in range(8):\n        net = res_block(net, 256)\n\n    route_2 = net\n    net = conv2d(net, 1024, 3, strides=2)\n\n    # res_block * 4\n    for i in range(4):\n        net = res_block(net, 512)\n    route_3 = net\n\n    return route_1, route_2, route_3\n\n\ndef yolo_block(inputs, filters):\n    net = conv2d(inputs, filters * 1, 1)\n    net = conv2d(net, filters * 2, 3)\n    net = conv2d(net, filters * 1, 1)\n    net = conv2d(net, filters * 2, 3)\n    net = conv2d(net, filters * 1, 1)\n    route = net\n    net = conv2d(net, filters * 2, 3)\n    return route, net\n\n\ndef upsample_layer(inputs, out_shape):\n    new_height, new_width = out_shape[1], out_shape[2]\n    # NOTE: here height is the first\n    # TODO: Do we need to set `align_corners` as True?\n    inputs = tf.image.resize_nearest_neighbor(inputs, (new_height, new_width), name='upsampled')\n    return inputs\n\n\n"""
utils/misc_utils.py,13,"b'# coding: utf-8\n\nimport numpy as np\nimport tensorflow as tf\nimport random\n\nfrom tensorflow.core.framework import summary_pb2\n\n\ndef make_summary(name, val):\n    return summary_pb2.Summary(value=[summary_pb2.Summary.Value(tag=name, simple_value=val)])\n\n\nclass AverageMeter(object):\n    def __init__(self):\n        self.reset()\n\n    def reset(self):\n        self.val = 0\n        self.average = 0\n        self.sum = 0\n        self.count = 0\n\n    def update(self, val, n=1):\n        self.val = val\n        self.sum += val * n\n        self.count += n\n        self.average = self.sum / float(self.count)\n\n\ndef parse_anchors(anchor_path):\n    \'\'\'\n    parse anchors.\n    returned data: shape [N, 2], dtype float32\n    \'\'\'\n    anchors = np.reshape(np.asarray(open(anchor_path, \'r\').read().split(\',\'), np.float32), [-1, 2])\n    return anchors\n\n\ndef read_class_names(class_name_path):\n    names = {}\n    with open(class_name_path, \'r\') as data:\n        for ID, name in enumerate(data):\n            names[ID] = name.strip(\'\\n\')\n    return names\n\n\ndef shuffle_and_overwrite(file_name):\n    content = open(file_name, \'r\').readlines()\n    random.shuffle(content)\n    with open(file_name, \'w\') as f:\n        for line in content:\n            f.write(line)\n\n\ndef update_dict(ori_dict, new_dict):\n    if not ori_dict:\n        return new_dict\n    for key in ori_dict:\n        ori_dict[key] += new_dict[key]\n    return ori_dict\n\n\ndef list_add(ori_list, new_list):\n    for i in range(len(ori_list)):\n        ori_list[i] += new_list[i]\n    return ori_list\n\n\ndef load_weights(var_list, weights_file):\n    """"""\n    Loads and converts pre-trained weights.\n    param:\n        var_list: list of network variables.\n        weights_file: name of the binary file.\n    """"""\n    with open(weights_file, ""rb"") as fp:\n        np.fromfile(fp, dtype=np.int32, count=5)\n        weights = np.fromfile(fp, dtype=np.float32)\n\n    ptr = 0\n    i = 0\n    assign_ops = []\n    while i < len(var_list) - 1:\n        var1 = var_list[i]\n        var2 = var_list[i + 1]\n        # do something only if we process conv layer\n        if \'Conv\' in var1.name.split(\'/\')[-2]:\n            # check type of next layer\n            if \'BatchNorm\' in var2.name.split(\'/\')[-2]:\n                # load batch norm params\n                gamma, beta, mean, var = var_list[i + 1:i + 5]\n                batch_norm_vars = [beta, gamma, mean, var]\n                for var in batch_norm_vars:\n                    shape = var.shape.as_list()\n                    num_params = np.prod(shape)\n                    var_weights = weights[ptr:ptr + num_params].reshape(shape)\n                    ptr += num_params\n                    assign_ops.append(tf.assign(var, var_weights, validate_shape=True))\n                # we move the pointer by 4, because we loaded 4 variables\n                i += 4\n            elif \'Conv\' in var2.name.split(\'/\')[-2]:\n                # load biases\n                bias = var2\n                bias_shape = bias.shape.as_list()\n                bias_params = np.prod(bias_shape)\n                bias_weights = weights[ptr:ptr +\n                                       bias_params].reshape(bias_shape)\n                ptr += bias_params\n                assign_ops.append(tf.assign(bias, bias_weights, validate_shape=True))\n                # we loaded 1 variable\n                i += 1\n            # we can load weights of conv layer\n            shape = var1.shape.as_list()\n            num_params = np.prod(shape)\n\n            var_weights = weights[ptr:ptr + num_params].reshape(\n                (shape[3], shape[2], shape[0], shape[1]))\n            # remember to transpose to column-major\n            var_weights = np.transpose(var_weights, (2, 3, 1, 0))\n            ptr += num_params\n            assign_ops.append(\n                tf.assign(var1, var_weights, validate_shape=True))\n            i += 1\n\n    return assign_ops\n\n\ndef config_learning_rate(args, global_step):\n    if args.lr_type == \'exponential\':\n        lr_tmp = tf.train.exponential_decay(args.learning_rate_init, global_step, args.lr_decay_freq,\n                                            args.lr_decay_factor, staircase=True, name=\'exponential_learning_rate\')\n        return tf.maximum(lr_tmp, args.lr_lower_bound)\n    elif args.lr_type == \'cosine_decay\':\n        train_steps = (args.total_epoches - float(args.use_warm_up) * args.warm_up_epoch) * args.train_batch_num\n        return args.lr_lower_bound + 0.5 * (args.learning_rate_init - args.lr_lower_bound) * \\\n            (1 + tf.cos(global_step / train_steps * np.pi))\n    elif args.lr_type == \'cosine_decay_restart\':\n        return tf.train.cosine_decay_restarts(args.learning_rate_init, global_step, \n                                              args.lr_decay_freq, t_mul=2.0, m_mul=1.0, \n                                              name=\'cosine_decay_learning_rate_restart\')\n    elif args.lr_type == \'fixed\':\n        return tf.convert_to_tensor(args.learning_rate_init, name=\'fixed_learning_rate\')\n    elif args.lr_type == \'piecewise\':\n        return tf.train.piecewise_constant(global_step, boundaries=args.pw_boundaries, values=args.pw_values,\n                                           name=\'piecewise_learning_rate\')\n    else:\n        raise ValueError(\'Unsupported learning rate type!\')\n\n\ndef config_optimizer(optimizer_name, learning_rate, decay=0.9, momentum=0.9):\n    if optimizer_name == \'momentum\':\n        return tf.train.MomentumOptimizer(learning_rate, momentum=momentum)\n    elif optimizer_name == \'rmsprop\':\n        return tf.train.RMSPropOptimizer(learning_rate, decay=decay, momentum=momentum)\n    elif optimizer_name == \'adam\':\n        return tf.train.AdamOptimizer(learning_rate)\n    elif optimizer_name == \'sgd\':\n        return tf.train.GradientDescentOptimizer(learning_rate)\n    else:\n        raise ValueError(\'Unsupported optimizer type!\')'"
utils/nms_utils.py,13,"b'# coding: utf-8\n\nfrom __future__ import division, print_function\n\nimport numpy as np\nimport tensorflow as tf\n\ndef gpu_nms(boxes, scores, num_classes, max_boxes=50, score_thresh=0.5, nms_thresh=0.5):\n    """"""\n    Perform NMS on GPU using TensorFlow.\n\n    params:\n        boxes: tensor of shape [1, 10647, 4] # 10647=(13*13+26*26+52*52)*3, for input 416*416 image\n        scores: tensor of shape [1, 10647, num_classes], score=conf*prob\n        num_classes: total number of classes\n        max_boxes: integer, maximum number of predicted boxes you\'d like, default is 50\n        score_thresh: if [ highest class probability score < score_threshold]\n                        then get rid of the corresponding box\n        nms_thresh: real value, ""intersection over union"" threshold used for NMS filtering\n    """"""\n\n    boxes_list, label_list, score_list = [], [], []\n    max_boxes = tf.constant(max_boxes, dtype=\'int32\')\n\n    # since we do nms for single image, then reshape it\n    boxes = tf.reshape(boxes, [-1, 4]) # \'-1\' means we don\'t konw the exact number of boxes\n    score = tf.reshape(scores, [-1, num_classes])\n\n    # Step 1: Create a filtering mask based on ""box_class_scores"" by using ""threshold"".\n    mask = tf.greater_equal(score, tf.constant(score_thresh))\n    # Step 2: Do non_max_suppression for each class\n    for i in range(num_classes):\n        # Step 3: Apply the mask to scores, boxes and pick them out\n        filter_boxes = tf.boolean_mask(boxes, mask[:,i])\n        filter_score = tf.boolean_mask(score[:,i], mask[:,i])\n        nms_indices = tf.image.non_max_suppression(boxes=filter_boxes,\n                                                   scores=filter_score,\n                                                   max_output_size=max_boxes,\n                                                   iou_threshold=nms_thresh, name=\'nms_indices\')\n        label_list.append(tf.ones_like(tf.gather(filter_score, nms_indices), \'int32\')*i)\n        boxes_list.append(tf.gather(filter_boxes, nms_indices))\n        score_list.append(tf.gather(filter_score, nms_indices))\n\n    boxes = tf.concat(boxes_list, axis=0)\n    score = tf.concat(score_list, axis=0)\n    label = tf.concat(label_list, axis=0)\n\n    return boxes, score, label\n\n\ndef py_nms(boxes, scores, max_boxes=50, iou_thresh=0.5):\n    """"""\n    Pure Python NMS baseline.\n\n    Arguments: boxes: shape of [-1, 4], the value of \'-1\' means that dont know the\n                      exact number of boxes\n               scores: shape of [-1,]\n               max_boxes: representing the maximum of boxes to be selected by non_max_suppression\n               iou_thresh: representing iou_threshold for deciding to keep boxes\n    """"""\n    assert boxes.shape[1] == 4 and len(scores.shape) == 1\n\n    x1 = boxes[:, 0]\n    y1 = boxes[:, 1]\n    x2 = boxes[:, 2]\n    y2 = boxes[:, 3]\n\n    areas = (x2 - x1) * (y2 - y1)\n    order = scores.argsort()[::-1]\n\n    keep = []\n    while order.size > 0:\n        i = order[0]\n        keep.append(i)\n        xx1 = np.maximum(x1[i], x1[order[1:]])\n        yy1 = np.maximum(y1[i], y1[order[1:]])\n        xx2 = np.minimum(x2[i], x2[order[1:]])\n        yy2 = np.minimum(y2[i], y2[order[1:]])\n\n        w = np.maximum(0.0, xx2 - xx1 + 1)\n        h = np.maximum(0.0, yy2 - yy1 + 1)\n        inter = w * h\n        ovr = inter / (areas[i] + areas[order[1:]] - inter)\n\n        inds = np.where(ovr <= iou_thresh)[0]\n        order = order[inds + 1]\n\n    return keep[:max_boxes]\n\n\ndef cpu_nms(boxes, scores, num_classes, max_boxes=50, score_thresh=0.5, iou_thresh=0.5):\n    """"""\n    Perform NMS on CPU.\n    Arguments:\n        boxes: shape [1, 10647, 4]\n        scores: shape [1, 10647, num_classes]\n    """"""\n\n    boxes = boxes.reshape(-1, 4)\n    scores = scores.reshape(-1, num_classes)\n    # Picked bounding boxes\n    picked_boxes, picked_score, picked_label = [], [], []\n\n    for i in range(num_classes):\n        indices = np.where(scores[:,i] >= score_thresh)\n        filter_boxes = boxes[indices]\n        filter_scores = scores[:,i][indices]\n        if len(filter_boxes) == 0: \n            continue\n        # do non_max_suppression on the cpu\n        indices = py_nms(filter_boxes, filter_scores,\n                         max_boxes=max_boxes, iou_thresh=iou_thresh)\n        picked_boxes.append(filter_boxes[indices])\n        picked_score.append(filter_scores[indices])\n        picked_label.append(np.ones(len(indices), dtype=\'int32\')*i)\n    if len(picked_boxes) == 0: \n        return None, None, None\n\n    boxes = np.concatenate(picked_boxes, axis=0)\n    score = np.concatenate(picked_score, axis=0)\n    label = np.concatenate(picked_label, axis=0)\n\n    return boxes, score, label'"
utils/plot_utils.py,0,"b""# coding: utf-8\n\nfrom __future__ import division, print_function\n\nimport cv2\nimport random\n\n\ndef get_color_table(class_num, seed=2):\n    random.seed(seed)\n    color_table = {}\n    for i in range(class_num):\n        color_table[i] = [random.randint(0, 255) for _ in range(3)]\n    return color_table\n\n\ndef plot_one_box(img, coord, label=None, color=None, line_thickness=None):\n    '''\n    coord: [x_min, y_min, x_max, y_max] format coordinates.\n    img: img to plot on.\n    label: str. The label name.\n    color: int. color index.\n    line_thickness: int. rectangle line thickness.\n    '''\n    tl = line_thickness or int(round(0.002 * max(img.shape[0:2])))  # line thickness\n    color = color or [random.randint(0, 255) for _ in range(3)]\n    c1, c2 = (int(coord[0]), int(coord[1])), (int(coord[2]), int(coord[3]))\n    cv2.rectangle(img, c1, c2, color, thickness=tl)\n    if label:\n        tf = max(tl - 1, 1)  # font thickness\n        t_size = cv2.getTextSize(label, 0, fontScale=float(tl) / 3, thickness=tf)[0]\n        c2 = c1[0] + t_size[0], c1[1] - t_size[1] - 3\n        cv2.rectangle(img, c1, c2, color, -1)  # filled\n        cv2.putText(img, label, (c1[0], c1[1] - 2), 0, float(tl) / 3, [0, 0, 0], thickness=tf, lineType=cv2.LINE_AA)\n\n"""
misc/experiments_on_voc/args_voc.py,3,"b""# coding: utf-8\n# This file contains the parameter used in train.py\n\nfrom __future__ import division, print_function\n\nfrom utils.misc_utils import parse_anchors, read_class_names\nimport math\n\n### Some paths\ntrain_file = './data/my_data/train.txt'  # The path of the training txt file.\nval_file = './data/my_data/val.txt'  # The path of the validation txt file.\nrestore_path = './data/darknet_weights/yolov3.ckpt'  # The path of the weights to restore.\nsave_dir = './checkpoint/'  # The directory of the weights to save.\nlog_dir = './data/logs/'  # The directory to store the tensorboard log files.\nprogress_log_path = './data/progress.log'  # The path to record the training progress.\nanchor_path = './data/yolo_anchors.txt'  # The path of the anchor txt file.\nclass_name_path = './data/voc.names'  # The path of the class names.\n\n### Training releated numbers\nbatch_size = 6\nimg_size = [416, 416]  # Images will be resized to `img_size` and fed to the network, size format: [width, height]\nletterbox_resize = False  # Whether to use the letterbox resize, i.e., keep the original aspect ratio in the resized image.\ntotal_epoches = 100\ntrain_evaluation_step = 100  # Evaluate on the training batch after some steps.\nval_evaluation_epoch = 1  # Evaluate on the whole validation dataset after some steps. Set to None to evaluate every epoch.\nsave_epoch = 10  # Save the model after some epochs.\nbatch_norm_decay = 0.99  # decay in bn ops\nweight_decay = 5e-4  # l2 weight decay\nglobal_step = 0  # used when resuming training\n\n### tf.data parameters\nnum_threads = 10  # Number of threads for image processing used in tf.data pipeline.\nprefetech_buffer = 5  # Prefetech_buffer used in tf.data pipeline.\n\n### Learning rate and optimizer\noptimizer_name = 'momentum'  # Chosen from [sgd, momentum, adam, rmsprop]\nsave_optimizer = False  # Whether to save the optimizer parameters into the checkpoint file.\nlearning_rate_init = 1e-4\nlr_type = 'piecewise'  # Chosen from [fixed, exponential, cosine_decay, cosine_decay_restart, piecewise]\nlr_decay_epoch = 5  # Epochs after which learning rate decays. Int or float. Used when chosen `exponential` and `cosine_decay_restart` lr_type.\nlr_decay_factor = 0.96  # The learning rate decay factor. Used when chosen `exponential` lr_type.\nlr_lower_bound = 1e-6  # The minimum learning rate.\n# piecewise params\npw_boundaries = [25, 40]  # epoch based boundaries\npw_values = [learning_rate_init, 3e-5, 1e-4]\n\n### Load and finetune\n# Choose the parts you want to restore the weights. List form.\n# restore_include: None, restore_exclude: None  => restore the whole model\n# restore_include: None, restore_exclude: scope  => restore the whole model except `scope`\n# restore_include: scope1, restore_exclude: scope2  => if scope1 contains scope2, restore scope1 and not restore scope2 (scope1 - scope2)\n# choise 1: only restore the darknet body\n# restore_include = ['yolov3/darknet53_body']\n# restore_exclude = None\n# choise 2: restore all layers except the last 3 conv2d layers in 3 scale\nrestore_include = None\nrestore_exclude = ['yolov3/yolov3_head/Conv_14', 'yolov3/yolov3_head/Conv_6', 'yolov3/yolov3_head/Conv_22']\n# Choose the parts you want to finetune. List form.\n# Set to None to train the whole model.\nupdate_part = None\n\n### other training strategies\nmulti_scale_train = True  # Whether to apply multi-scale training strategy. Image size varies from [320, 320] to [640, 640] by default.\nuse_label_smooth = True # Whether to use class label smoothing strategy.\nuse_focal_loss = True  # Whether to apply focal loss on the conf loss.\nuse_mix_up = True  # Whether to use mix up data augmentation strategy. \nuse_warm_up = True  # whether to use warm up strategy to prevent from gradient exploding.\nwarm_up_epoch = 3  # Warm up training epoches. Set to a larger value if gradient explodes.\n\n### some constants in validation\n# nms\nnms_threshold = 0.45  # iou threshold in nms operation\nscore_threshold = 0.01 # threshold of the probability of the classes in nms operation, i.e. score = pred_confs * pred_probs. set lower for higher recall.\nnms_topk = 150  # keep at most nms_topk outputs after nms\n# mAP eval\neval_threshold = 0.5  # the iou threshold applied in mAP evaluation\nuse_voc_07_metric = False  # whether to use voc 2007 evaluation metric, i.e. the 11-point metric\n\n### parse some params\nanchors = parse_anchors(anchor_path)\nclasses = read_class_names(class_name_path)\nclass_num = len(classes)\ntrain_img_cnt = len(open(train_file, 'r').readlines())\nval_img_cnt = len(open(val_file, 'r').readlines())\ntrain_batch_num = int(math.ceil(float(train_img_cnt) / batch_size))\n\nlr_decay_freq = int(train_batch_num * lr_decay_epoch)\npw_boundaries = [float(i) * train_batch_num + global_step for i in pw_boundaries]"""
misc/experiments_on_voc/eval_voc.py,13,"b'# coding: utf-8\n\nfrom __future__ import division, print_function\n\nimport tensorflow as tf\nimport numpy as np\nimport argparse\nfrom tqdm import trange\n\nfrom utils.data_utils import get_batch_data\nfrom utils.misc_utils import parse_anchors, read_class_names, AverageMeter\nfrom utils.eval_utils import evaluate_on_cpu, evaluate_on_gpu, get_preds_gpu, voc_eval, parse_gt_rec\nfrom utils.nms_utils import gpu_nms\n\nfrom model import yolov3\n\n#################\n# ArgumentParser\n#################\nparser = argparse.ArgumentParser(description=""YOLO-V3 eval procedure."")\n# some paths\nparser.add_argument(""--eval_file"", type=str, default=""./data/my_data/val.txt"",\n                    help=""The path of the validation or test txt file."")\n\nparser.add_argument(""--restore_path"", type=str, default=""./data/checkpoint_whole_finetune_no_letterbox/best_model_Epoch_32_step_91046_mAP_0.8754_loss_2.2147_lr_3e-05"",\n                    help=""The path of the weights to restore."")\n\nparser.add_argument(""--anchor_path"", type=str, default=""./data/yolo_anchors.txt"",\n                    help=""The path of the anchor txt file."")\n\nparser.add_argument(""--class_name_path"", type=str, default=""./data/voc.names"",\n                    help=""The path of the class names."")\n\n# some numbers\nparser.add_argument(""--img_size"", nargs=\'*\', type=int, default=[416, 416],\n                    help=""Resize the input image to `img_size`, size format: [width, height]"")\n\nparser.add_argument(""--letterbox_resize"", type=lambda x: (str(x).lower() == \'true\'), default=False,\n                    help=""Whether to use the letterbox resize."")\n\nparser.add_argument(""--num_threads"", type=int, default=10,\n                    help=""Number of threads for image processing used in tf.data pipeline."")\n\nparser.add_argument(""--prefetech_buffer"", type=int, default=5,\n                    help=""Prefetech_buffer used in tf.data pipeline."")\n\nparser.add_argument(""--nms_threshold"", type=float, default=0.45,\n                    help=""IOU threshold in nms operation."")\n\nparser.add_argument(""--score_threshold"", type=float, default=0.01,\n                    help=""Threshold of the probability of the classes in nms operation."")\n\nparser.add_argument(""--nms_topk"", type=int, default=150,\n                    help=""Keep at most nms_topk outputs after nms."")\n\nparser.add_argument(""--use_voc_07_metric"", type=lambda x: (str(x).lower() == \'true\'), default=False,\n                    help=""Whether to use the voc 2007 mAP metrics."")\n\nargs = parser.parse_args()\n\n# args params\nargs.anchors = parse_anchors(args.anchor_path)\nargs.classes = read_class_names(args.class_name_path)\nargs.class_num = len(args.classes)\nargs.img_cnt = len(open(args.eval_file, \'r\').readlines())\n\n# setting placeholders\nis_training = tf.placeholder(dtype=tf.bool, name=""phase_train"")\nhandle_flag = tf.placeholder(tf.string, [], name=\'iterator_handle_flag\')\npred_boxes_flag = tf.placeholder(tf.float32, [1, None, None])\npred_scores_flag = tf.placeholder(tf.float32, [1, None, None])\ngpu_nms_op = gpu_nms(pred_boxes_flag, pred_scores_flag, args.class_num, args.nms_topk, args.score_threshold, args.nms_threshold)\n\n##################\n# tf.data pipeline\n##################\nval_dataset = tf.data.TextLineDataset(args.eval_file)\nval_dataset = val_dataset.batch(1)\nval_dataset = val_dataset.map(\n    lambda x: tf.py_func(get_batch_data, [x, args.class_num, args.img_size, args.anchors, \'val\', False, False, args.letterbox_resize], [tf.int64, tf.float32, tf.float32, tf.float32, tf.float32]),\n    num_parallel_calls=args.num_threads\n)\nval_dataset.prefetch(args.prefetech_buffer)\niterator = val_dataset.make_one_shot_iterator()\n\nimage_ids, image, y_true_13, y_true_26, y_true_52 = iterator.get_next()\nimage_ids.set_shape([None])\ny_true = [y_true_13, y_true_26, y_true_52]\nimage.set_shape([None, args.img_size[1], args.img_size[0], 3])\nfor y in y_true:\n    y.set_shape([None, None, None, None, None])\n\n##################\n# Model definition\n##################\nyolo_model = yolov3(args.class_num, args.anchors)\nwith tf.variable_scope(\'yolov3\'):\n    pred_feature_maps = yolo_model.forward(image, is_training=is_training)\nloss = yolo_model.compute_loss(pred_feature_maps, y_true)\ny_pred = yolo_model.predict(pred_feature_maps)\n\nsaver_to_restore = tf.train.Saver()\n\nwith tf.Session() as sess:\n    sess.run([tf.global_variables_initializer()])\n    saver_to_restore.restore(sess, args.restore_path)\n\n    print(\'\\n----------- start to eval -----------\\n\')\n\n    val_loss_total, val_loss_xy, val_loss_wh, val_loss_conf, val_loss_class = \\\n        AverageMeter(), AverageMeter(), AverageMeter(), AverageMeter(), AverageMeter()\n    val_preds = []\n\n    for j in trange(args.img_cnt):\n        __image_ids, __y_pred, __loss = sess.run([image_ids, y_pred, loss], feed_dict={is_training: False})\n        pred_content = get_preds_gpu(sess, gpu_nms_op, pred_boxes_flag, pred_scores_flag, __image_ids, __y_pred)\n\n        val_preds.extend(pred_content)\n        val_loss_total.update(__loss[0])\n        val_loss_xy.update(__loss[1])\n        val_loss_wh.update(__loss[2])\n        val_loss_conf.update(__loss[3])\n        val_loss_class.update(__loss[4])\n\n    rec_total, prec_total, ap_total = AverageMeter(), AverageMeter(), AverageMeter()\n    gt_dict = parse_gt_rec(args.eval_file, args.img_size, args.letterbox_resize)\n    print(\'mAP eval:\')\n    for ii in range(args.class_num):\n        npos, nd, rec, prec, ap = voc_eval(gt_dict, val_preds, ii, iou_thres=0.5, use_07_metric=args.use_voc_07_metric)\n        rec_total.update(rec, npos)\n        prec_total.update(prec, nd)\n        ap_total.update(ap, 1)\n        print(\'Class {}: Recall: {:.4f}, Precision: {:.4f}, AP: {:.4f}\'.format(ii, rec, prec, ap))\n\n    mAP = ap_total.average\n    print(\'final mAP: {:.4f}\'.format(mAP))\n    print(""recall: {:.3f}, precision: {:.3f}"".format(rec_total.average, prec_total.average))\n    print(""total_loss: {:.3f}, loss_xy: {:.3f}, loss_wh: {:.3f}, loss_conf: {:.3f}, loss_class: {:.3f}"".format(\n        val_loss_total.average, val_loss_xy.average, val_loss_wh.average, val_loss_conf.average, val_loss_class.average\n    ))\n'"
